In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libbz2.a_gcc_-O1:

blocksort.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fallbackSort>:
       0:	sub	sp, sp, #0xbb0
       4:	stp	x29, x30, [sp]
       8:	mov	x29, sp
       c:	stp	x19, x20, [sp, #16]
      10:	stp	x21, x22, [sp, #32]
      14:	stp	x23, x24, [sp, #48]
      18:	stp	x25, x26, [sp, #64]
      1c:	stp	x27, x28, [sp, #80]
      20:	mov	x19, x0
      24:	mov	x20, x1
      28:	mov	x21, x2
      2c:	mov	w28, w3
      30:	str	w4, [sp, #124]
      34:	cmp	w4, #0x3
      38:	b.gt	1b4 <fallbackSort+0x1b4>
      3c:	add	x3, sp, #0x7a8
      40:	add	x2, x3, #0x404
      44:	mov	x0, x3
      48:	str	wzr, [x0], #4
      4c:	cmp	x0, x2
      50:	b.ne	48 <fallbackSort+0x48>  // b.any
      54:	cmp	w28, #0x0
      58:	b.le	88 <fallbackSort+0x88>
      5c:	mov	x1, x20
      60:	sub	w6, w28, #0x1
      64:	add	x6, x6, #0x1
      68:	add	x6, x6, x20
      6c:	add	x5, sp, #0x7a8
      70:	ldrb	w4, [x1], #1
      74:	ldr	w0, [x5, x4, lsl #2]
      78:	add	w0, w0, #0x1
      7c:	str	w0, [x5, x4, lsl #2]
      80:	cmp	x1, x6
      84:	b.ne	70 <fallbackSort+0x70>  // b.any
      88:	mov	x1, #0x1                   	// #1
      8c:	lsl	x0, x1, #2
      90:	add	x4, sp, #0x3a8
      94:	add	x4, x0, x4
      98:	add	x5, sp, #0x7a8
      9c:	add	x0, x0, x5
      a0:	ldur	w0, [x0, #-4]
      a4:	stur	w0, [x4, #-4]
      a8:	add	x1, x1, #0x1
      ac:	cmp	x1, #0x101
      b0:	b.ne	8c <fallbackSort+0x8c>  // b.any
      b4:	add	x0, sp, #0x7ac
      b8:	ldr	w1, [x0]
      bc:	ldur	w4, [x0, #-4]
      c0:	add	w1, w1, w4
      c4:	str	w1, [x0], #4
      c8:	cmp	x0, x2
      cc:	b.ne	b8 <fallbackSort+0xb8>  // b.any
      d0:	cmp	w28, #0x0
      d4:	b.le	1d4 <fallbackSort+0x1d4>
      d8:	mov	x0, #0x0                   	// #0
      dc:	add	x4, sp, #0x7a8
      e0:	ldrb	w2, [x20, x0]
      e4:	ldr	w1, [x4, x2, lsl #2]
      e8:	sub	w1, w1, #0x1
      ec:	str	w1, [x4, x2, lsl #2]
      f0:	str	w0, [x19, w1, sxtw #2]
      f4:	add	x0, x0, #0x1
      f8:	cmp	w28, w0
      fc:	b.gt	e0 <fallbackSort+0xe0>
     100:	add	w1, w28, #0x1f
     104:	cmp	w28, #0x0
     108:	csel	w1, w1, w28, lt  // lt = tstop
     10c:	asr	w1, w1, #5
     110:	add	w1, w1, #0x2
     114:	mov	x0, #0x0                   	// #0
     118:	str	wzr, [x21, x0, lsl #2]
     11c:	add	x0, x0, #0x1
     120:	cmp	w1, w0
     124:	b.gt	118 <fallbackSort+0x118>
     128:	add	x5, x3, #0x400
     12c:	mov	w4, #0x1                   	// #1
     130:	ldr	w1, [x3], #4
     134:	asr	w0, w1, #5
     138:	sxtw	x0, w0
     13c:	lsl	w1, w4, w1
     140:	ldr	w2, [x21, x0, lsl #2]
     144:	orr	w1, w2, w1
     148:	str	w1, [x21, x0, lsl #2]
     14c:	cmp	x3, x5
     150:	b.ne	130 <fallbackSort+0x130>  // b.any
     154:	mov	w1, w28
     158:	add	w5, w28, #0x40
     15c:	mov	w3, #0x1                   	// #1
     160:	asr	w0, w1, #5
     164:	sxtw	x0, w0
     168:	lsl	w4, w3, w1
     16c:	ldr	w2, [x21, x0, lsl #2]
     170:	orr	w2, w2, w4
     174:	str	w2, [x21, x0, lsl #2]
     178:	add	w0, w1, #0x1
     17c:	asr	w2, w0, #5
     180:	sxtw	x2, w2
     184:	lsl	w0, w3, w0
     188:	ldr	w4, [x21, x2, lsl #2]
     18c:	bic	w0, w4, w0
     190:	str	w0, [x21, x2, lsl #2]
     194:	add	w1, w1, #0x2
     198:	cmp	w1, w5
     19c:	b.ne	160 <fallbackSort+0x160>  // b.any
     1a0:	mov	w0, #0x1                   	// #1
     1a4:	str	w0, [sp, #120]
     1a8:	add	x27, sp, #0x88
     1ac:	mov	w26, w28
     1b0:	b	788 <fallbackSort+0x788>
     1b4:	adrp	x0, 0 <stderr>
     1b8:	ldr	x3, [x0]
     1bc:	mov	x2, #0x1b                  	// #27
     1c0:	mov	x1, #0x1                   	// #1
     1c4:	adrp	x0, 0 <fallbackSort>
     1c8:	add	x0, x0, #0x0
     1cc:	bl	0 <fwrite>
     1d0:	b	3c <fallbackSort+0x3c>
     1d4:	add	w1, w28, #0x1f
     1d8:	csel	w1, w1, w28, lt  // lt = tstop
     1dc:	asr	w1, w1, #5
     1e0:	add	w1, w1, #0x2
     1e4:	cmp	w1, #0x0
     1e8:	b.le	128 <fallbackSort+0x128>
     1ec:	b	114 <fallbackSort+0x114>
     1f0:	ldr	w2, [sp, #120]
     1f4:	adrp	x1, 0 <fallbackSort>
     1f8:	add	x1, x1, #0x0
     1fc:	adrp	x0, 0 <stderr>
     200:	ldr	x0, [x0]
     204:	bl	0 <fprintf>
     208:	b	794 <fallbackSort+0x794>
     20c:	asr	w1, w0, #5
     210:	ldr	w1, [x21, w1, sxtw #2]
     214:	cmn	w1, #0x1
     218:	b.ne	230 <fallbackSort+0x230>  // b.any
     21c:	add	w0, w0, #0x20
     220:	asr	w1, w0, #5
     224:	ldr	w1, [x21, w1, sxtw #2]
     228:	cmn	w1, #0x1
     22c:	b.eq	21c <fallbackSort+0x21c>  // b.none
     230:	asr	w2, w0, #5
     234:	mov	w1, #0x1                   	// #1
     238:	lsl	w1, w1, w0
     23c:	ldr	w2, [x21, w2, sxtw #2]
     240:	tst	w1, w2
     244:	b.eq	2e4 <fallbackSort+0x2e4>  // b.none
     248:	mov	w3, #0x1                   	// #1
     24c:	add	w0, w0, #0x1
     250:	asr	w1, w0, #5
     254:	lsl	w2, w3, w0
     258:	ldr	w1, [x21, w1, sxtw #2]
     25c:	tst	w2, w1
     260:	b.ne	24c <fallbackSort+0x24c>  // b.any
     264:	b	2e4 <fallbackSort+0x2e4>
     268:	mov	w4, #0x1                   	// #1
     26c:	add	w1, w1, #0x1
     270:	asr	w2, w1, #5
     274:	lsl	w3, w4, w1
     278:	ldr	w2, [x21, w2, sxtw #2]
     27c:	tst	w3, w2
     280:	b.eq	26c <fallbackSort+0x26c>  // b.none
     284:	sub	w25, w1, #0x1
     288:	cmp	w26, w25
     28c:	b.le	760 <fallbackSort+0x760>
     290:	cmp	w0, w1
     294:	b.lt	374 <fallbackSort+0x374>  // b.tstop
     298:	add	w0, w25, #0x1
     29c:	ands	w2, w0, #0x1f
     2a0:	asr	w3, w0, #5
     2a4:	mov	w1, #0x1                   	// #1
     2a8:	lsl	w1, w1, w2
     2ac:	ldr	w3, [x21, w3, sxtw #2]
     2b0:	and	w1, w1, w3
     2b4:	ccmp	w1, #0x0, #0x4, ne  // ne = any
     2b8:	b.eq	2e0 <fallbackSort+0x2e0>  // b.none
     2bc:	mov	w4, #0x1                   	// #1
     2c0:	add	w0, w0, #0x1
     2c4:	ands	w2, w0, #0x1f
     2c8:	asr	w3, w0, #5
     2cc:	lsl	w1, w4, w2
     2d0:	ldr	w3, [x21, w3, sxtw #2]
     2d4:	and	w1, w1, w3
     2d8:	ccmp	w1, #0x0, #0x4, ne  // ne = any
     2dc:	b.ne	2c0 <fallbackSort+0x2c0>  // b.any
     2e0:	cbnz	w1, 20c <fallbackSort+0x20c>
     2e4:	sub	w22, w0, #0x1
     2e8:	cmp	w26, w22
     2ec:	b.le	760 <fallbackSort+0x760>
     2f0:	ands	w3, w0, #0x1f
     2f4:	asr	w2, w0, #5
     2f8:	mov	w1, #0x1                   	// #1
     2fc:	lsl	w1, w1, w3
     300:	ldr	w2, [x21, w2, sxtw #2]
     304:	and	w1, w1, w2
     308:	ccmp	w1, #0x0, #0x0, ne  // ne = any
     30c:	b.ne	8cc <fallbackSort+0x8cc>  // b.any
     310:	mov	w1, w0
     314:	mov	w5, #0x1                   	// #1
     318:	add	w1, w1, #0x1
     31c:	ands	w3, w1, #0x1f
     320:	asr	w4, w1, #5
     324:	lsl	w2, w5, w3
     328:	ldr	w4, [x21, w4, sxtw #2]
     32c:	and	w2, w2, w4
     330:	ccmp	w2, #0x0, #0x0, ne  // ne = any
     334:	b.eq	318 <fallbackSort+0x318>  // b.none
     338:	cbnz	w2, 284 <fallbackSort+0x284>
     33c:	asr	w2, w1, #5
     340:	ldr	w2, [x21, w2, sxtw #2]
     344:	cbnz	w2, 268 <fallbackSort+0x268>
     348:	add	w1, w1, #0x20
     34c:	asr	w2, w1, #5
     350:	ldr	w2, [x21, w2, sxtw #2]
     354:	cbz	w2, 348 <fallbackSort+0x348>
     358:	asr	w3, w1, #5
     35c:	mov	w2, #0x1                   	// #1
     360:	lsl	w2, w2, w1
     364:	ldr	w3, [x21, w3, sxtw #2]
     368:	tst	w2, w3
     36c:	b.eq	268 <fallbackSort+0x268>  // b.none
     370:	b	284 <fallbackSort+0x284>
     374:	sub	w0, w1, w0
     378:	add	w0, w0, #0x1
     37c:	ldr	w1, [sp, #108]
     380:	add	w0, w1, w0
     384:	str	w0, [sp, #108]
     388:	str	w22, [sp, #136]
     38c:	str	w25, [sp, #536]
     390:	mov	w23, #0x0                   	// #0
     394:	mov	w11, #0x1                   	// #1
     398:	add	x0, x19, #0x4
     39c:	str	x21, [sp, #112]
     3a0:	mov	x21, x0
     3a4:	b	5a4 <fallbackSort+0x5a4>
     3a8:	mov	w0, #0x3ec                 	// #1004
     3ac:	bl	0 <BZ2_bz__AssertH__fail>
     3b0:	b	5a0 <fallbackSort+0x5a0>
     3b4:	cmp	w7, w6
     3b8:	b.eq	590 <fallbackSort+0x590>  // b.none
     3bc:	cmp	w0, #0x3
     3c0:	b.le	434 <fallbackSort+0x434>
     3c4:	sub	w8, w6, #0x4
     3c8:	cmp	w7, w8
     3cc:	b.gt	434 <fallbackSort+0x434>
     3d0:	sxtw	x8, w8
     3d4:	mov	w5, w6
     3d8:	b	3f4 <fallbackSort+0x3f4>
     3dc:	add	x1, x19, w1, sxtw #2
     3e0:	stur	w9, [x1, #-16]
     3e4:	sub	x8, x8, #0x1
     3e8:	sub	w5, w5, #0x1
     3ec:	cmp	w7, w8
     3f0:	b.gt	434 <fallbackSort+0x434>
     3f4:	ldr	w9, [x19, x8, lsl #2]
     3f8:	ldr	w4, [x20, w9, sxtw #2]
     3fc:	mov	w1, w5
     400:	cmp	w6, w5
     404:	b.lt	3dc <fallbackSort+0x3dc>  // b.tstop
     408:	add	x0, x19, w5, sxtw #2
     40c:	ldr	w2, [x0]
     410:	ldr	w3, [x20, w2, uxtw #2]
     414:	cmp	w4, w3
     418:	b.ls	3dc <fallbackSort+0x3dc>  // b.plast
     41c:	stur	w2, [x0, #-16]
     420:	add	w1, w1, #0x4
     424:	add	x0, x0, #0x10
     428:	cmp	w6, w1
     42c:	b.ge	40c <fallbackSort+0x40c>  // b.tcont
     430:	b	3dc <fallbackSort+0x3dc>
     434:	sub	w5, w6, #0x1
     438:	cmp	w7, w5
     43c:	b.gt	590 <fallbackSort+0x590>
     440:	sxtw	x5, w5
     444:	mov	w4, w6
     448:	b	464 <fallbackSort+0x464>
     44c:	add	x1, x19, w1, sxtw #2
     450:	stur	w9, [x1, #-4]
     454:	sub	x5, x5, #0x1
     458:	sub	w4, w4, #0x1
     45c:	cmp	w7, w5
     460:	b.gt	590 <fallbackSort+0x590>
     464:	ldr	w9, [x19, x5, lsl #2]
     468:	ldr	w8, [x20, w9, sxtw #2]
     46c:	mov	w1, w4
     470:	cmp	w6, w4
     474:	b.lt	44c <fallbackSort+0x44c>  // b.tstop
     478:	add	x0, x19, w4, sxtw #2
     47c:	ldr	w2, [x0]
     480:	ldr	w3, [x20, w2, uxtw #2]
     484:	cmp	w8, w3
     488:	b.ls	44c <fallbackSort+0x44c>  // b.plast
     48c:	stur	w2, [x0, #-4]
     490:	add	w1, w1, #0x1
     494:	add	x0, x0, #0x4
     498:	cmp	w6, w1
     49c:	b.ge	47c <fallbackSort+0x47c>  // b.tcont
     4a0:	b	44c <fallbackSort+0x44c>
     4a4:	cmp	w0, #0x1
     4a8:	b.eq	4b8 <fallbackSort+0x4b8>  // b.none
     4ac:	ldr	w0, [x19, w6, sxtw #2]
     4b0:	ldr	w16, [x20, x0, lsl #2]
     4b4:	b	5f4 <fallbackSort+0x5f4>
     4b8:	add	w0, w7, w6
     4bc:	asr	w0, w0, #1
     4c0:	ldr	w0, [x19, w0, sxtw #2]
     4c4:	ldr	w16, [x20, x0, lsl #2]
     4c8:	b	5f4 <fallbackSort+0x5f4>
     4cc:	sxtw	x1, w12
     4d0:	ldr	w3, [x19, x1, lsl #2]
     4d4:	str	w3, [x9]
     4d8:	str	w2, [x19, x1, lsl #2]
     4dc:	add	w12, w12, #0x1
     4e0:	b	54c <fallbackSort+0x54c>
     4e4:	sxtw	x0, w4
     4e8:	ldr	w2, [x19, x0, lsl #2]
     4ec:	str	w2, [x3]
     4f0:	str	w8, [x19, x0, lsl #2]
     4f4:	sub	w4, w4, #0x1
     4f8:	mov	w0, w1
     4fc:	sub	x3, x3, #0x4
     500:	sub	w1, w1, #0x1
     504:	cmp	w10, w0
     508:	b.gt	588 <fallbackSort+0x588>
     50c:	add	w0, w1, #0x1
     510:	ldr	w8, [x3]
     514:	ldr	w2, [x20, w8, uxtw #2]
     518:	subs	w2, w2, w13
     51c:	b.eq	4e4 <fallbackSort+0x4e4>  // b.none
     520:	tbnz	w2, #31, 52c <fallbackSort+0x52c>
     524:	mov	w0, w1
     528:	b	4fc <fallbackSort+0x4fc>
     52c:	cmp	w10, w0
     530:	b.gt	588 <fallbackSort+0x588>
     534:	ldr	w2, [x15]
     538:	sxtw	x0, w0
     53c:	ldr	w3, [x19, x0, lsl #2]
     540:	str	w3, [x15]
     544:	str	w2, [x19, x0, lsl #2]
     548:	mov	w0, w1
     54c:	add	w5, w5, #0x1
     550:	add	x9, x9, #0x4
     554:	mov	w10, w5
     558:	cmp	w5, w0
     55c:	b.gt	588 <fallbackSort+0x588>
     560:	mov	x15, x9
     564:	ldr	w2, [x9]
     568:	ldr	w1, [x20, w2, uxtw #2]
     56c:	subs	w1, w1, w16
     570:	b.eq	4cc <fallbackSort+0x4cc>  // b.none
     574:	cmp	w1, #0x0
     578:	b.le	54c <fallbackSort+0x54c>
     57c:	add	x3, x19, w0, sxtw #2
     580:	sub	w1, w0, #0x1
     584:	b	50c <fallbackSort+0x50c>
     588:	cmp	w12, w4
     58c:	b.le	618 <fallbackSort+0x618>
     590:	cmp	w24, #0x0
     594:	b.le	710 <fallbackSort+0x710>
     598:	cmp	w24, #0x62
     59c:	b.gt	3a8 <fallbackSort+0x3a8>
     5a0:	mov	w11, w24
     5a4:	sub	w24, w11, #0x1
     5a8:	sxtw	x0, w24
     5ac:	ldr	w7, [x27, x0, lsl #2]
     5b0:	ldr	w6, [x28, x0, lsl #2]
     5b4:	sub	w0, w6, w7
     5b8:	cmp	w0, #0x9
     5bc:	b.le	3b4 <fallbackSort+0x3b4>
     5c0:	mov	w0, #0x1dc5                	// #7621
     5c4:	mul	w23, w23, w0
     5c8:	add	w23, w23, #0x1
     5cc:	and	w23, w23, #0x7fff
     5d0:	mov	w0, #0xaaab                	// #43691
     5d4:	movk	w0, #0xaaaa, lsl #16
     5d8:	umull	x0, w23, w0
     5dc:	lsr	x0, x0, #33
     5e0:	add	w0, w0, w0, lsl #1
     5e4:	subs	w0, w23, w0
     5e8:	b.ne	4a4 <fallbackSort+0x4a4>  // b.any
     5ec:	ldr	w0, [x19, w7, sxtw #2]
     5f0:	ldr	w16, [x20, x0, lsl #2]
     5f4:	mov	w5, w7
     5f8:	sxtw	x17, w7
     5fc:	add	x14, x19, w7, sxtw #2
     600:	mov	x9, x14
     604:	mov	w4, w6
     608:	mov	w12, w7
     60c:	mov	w0, w6
     610:	mov	w13, w16
     614:	b	554 <fallbackSort+0x554>
     618:	sub	w1, w10, w12
     61c:	sub	w2, w12, w7
     620:	cmp	w1, w2
     624:	csel	w1, w1, w2, le
     628:	sub	w2, w10, w1
     62c:	cmp	w1, #0x0
     630:	b.le	664 <fallbackSort+0x664>
     634:	sub	w1, w1, #0x1
     638:	add	x1, x1, x17
     63c:	add	x1, x21, x1, lsl #2
     640:	sxtw	x2, w2
     644:	sub	x17, x2, x17
     648:	ldr	w2, [x14]
     64c:	ldr	w3, [x14, x17, lsl #2]
     650:	str	w3, [x14]
     654:	str	w2, [x14, x17, lsl #2]
     658:	add	x14, x14, #0x4
     65c:	cmp	x14, x1
     660:	b.ne	648 <fallbackSort+0x648>  // b.any
     664:	sub	w0, w4, w0
     668:	sub	w1, w6, w4
     66c:	cmp	w1, w0
     670:	csel	w1, w1, w0, le
     674:	sub	w2, w6, w1
     678:	cmp	w1, #0x0
     67c:	b.le	6bc <fallbackSort+0x6bc>
     680:	sxtw	x4, w10
     684:	add	x3, x19, w10, sxtw #2
     688:	sub	w1, w1, #0x1
     68c:	add	x1, x1, x4
     690:	add	x1, x21, x1, lsl #2
     694:	sxtw	x2, w2
     698:	sub	x4, x2, x4
     69c:	mov	x2, x3
     6a0:	ldr	w5, [x2], #4
     6a4:	ldr	w8, [x2, x4, lsl #2]
     6a8:	str	w8, [x3]
     6ac:	str	w5, [x2, x4, lsl #2]
     6b0:	mov	x3, x2
     6b4:	cmp	x2, x1
     6b8:	b.ne	69c <fallbackSort+0x69c>  // b.any
     6bc:	add	w1, w7, w10
     6c0:	sub	w1, w1, w12
     6c4:	sub	w1, w1, #0x1
     6c8:	sub	w0, w6, w0
     6cc:	add	w0, w0, #0x1
     6d0:	sub	w3, w1, w7
     6d4:	sub	w2, w6, w0
     6d8:	cmp	w3, w2
     6dc:	b.le	6f8 <fallbackSort+0x6f8>
     6e0:	str	w1, [x28, w24, sxtw #2]
     6e4:	sxtw	x1, w11
     6e8:	str	w0, [x27, x1, lsl #2]
     6ec:	str	w6, [x28, x1, lsl #2]
     6f0:	add	w24, w11, #0x1
     6f4:	b	590 <fallbackSort+0x590>
     6f8:	str	w0, [x27, w24, sxtw #2]
     6fc:	sxtw	x0, w11
     700:	str	w7, [x27, x0, lsl #2]
     704:	str	w1, [x28, x0, lsl #2]
     708:	add	w24, w11, #0x1
     70c:	b	590 <fallbackSort+0x590>
     710:	ldr	x21, [sp, #112]
     714:	sxtw	x22, w22
     718:	mov	w1, #0xffffffff            	// #-1
     71c:	mov	w4, #0x1                   	// #1
     720:	b	730 <fallbackSort+0x730>
     724:	add	x22, x22, #0x1
     728:	cmp	w25, w22
     72c:	b.lt	298 <fallbackSort+0x298>  // b.tstop
     730:	mov	w0, w1
     734:	ldr	w1, [x19, x22, lsl #2]
     738:	ldr	w1, [x20, x1, lsl #2]
     73c:	cmp	w1, w0
     740:	b.eq	724 <fallbackSort+0x724>  // b.none
     744:	asr	w0, w22, #5
     748:	sxtw	x0, w0
     74c:	lsl	w2, w4, w22
     750:	ldr	w3, [x21, x0, lsl #2]
     754:	orr	w2, w3, w2
     758:	str	w2, [x21, x0, lsl #2]
     75c:	b	724 <fallbackSort+0x724>
     760:	ldr	w0, [sp, #124]
     764:	cmp	w0, #0x3
     768:	b.gt	7f8 <fallbackSort+0x7f8>
     76c:	ldr	w0, [sp, #120]
     770:	lsl	w0, w0, #1
     774:	str	w0, [sp, #120]
     778:	ldr	w1, [sp, #108]
     77c:	cmp	w1, #0x0
     780:	ccmp	w26, w0, #0x1, ne  // ne = any
     784:	b.lt	814 <fallbackSort+0x814>  // b.tstop
     788:	ldr	w0, [sp, #124]
     78c:	cmp	w0, #0x3
     790:	b.gt	1f0 <fallbackSort+0x1f0>
     794:	cmp	w26, #0x0
     798:	b.le	7e0 <fallbackSort+0x7e0>
     79c:	mov	x1, #0x0                   	// #0
     7a0:	mov	w2, #0x0                   	// #0
     7a4:	mov	w4, #0x1                   	// #1
     7a8:	ldr	w5, [sp, #120]
     7ac:	asr	w0, w1, #5
     7b0:	lsl	w3, w4, w1
     7b4:	ldr	w0, [x21, w0, sxtw #2]
     7b8:	tst	w3, w0
     7bc:	csel	w2, w2, w1, eq  // eq = none
     7c0:	ldr	w0, [x19, x1, lsl #2]
     7c4:	subs	w0, w0, w5
     7c8:	add	w3, w0, w26
     7cc:	csel	w0, w3, w0, mi  // mi = first
     7d0:	str	w2, [x20, w0, sxtw #2]
     7d4:	add	x1, x1, #0x1
     7d8:	cmp	w26, w1
     7dc:	b.gt	7ac <fallbackSort+0x7ac>
     7e0:	ldr	w1, [x21]
     7e4:	and	w1, w1, #0x1
     7e8:	str	wzr, [sp, #108]
     7ec:	mov	w0, #0x0                   	// #0
     7f0:	add	x28, sp, #0x218
     7f4:	b	2e0 <fallbackSort+0x2e0>
     7f8:	ldr	w2, [sp, #108]
     7fc:	adrp	x1, 0 <fallbackSort>
     800:	add	x1, x1, #0x0
     804:	adrp	x0, 0 <stderr>
     808:	ldr	x0, [x0]
     80c:	bl	0 <fprintf>
     810:	b	76c <fallbackSort+0x76c>
     814:	mov	w28, w26
     818:	ldr	w0, [sp, #124]
     81c:	cmp	w0, #0x3
     820:	b.gt	83c <fallbackSort+0x83c>
     824:	mov	x4, #0x0                   	// #0
     828:	mov	w2, #0x0                   	// #0
     82c:	add	x3, sp, #0x3a8
     830:	cmp	w28, #0x0
     834:	b.gt	888 <fallbackSort+0x888>
     838:	b	8a0 <fallbackSort+0x8a0>
     83c:	adrp	x0, 0 <stderr>
     840:	ldr	x3, [x0]
     844:	mov	x2, #0x21                  	// #33
     848:	mov	x1, #0x1                   	// #1
     84c:	adrp	x0, 0 <fallbackSort>
     850:	add	x0, x0, #0x0
     854:	bl	0 <fwrite>
     858:	b	824 <fallbackSort+0x824>
     85c:	add	w2, w0, #0x1
     860:	add	x0, x0, #0x1
     864:	ldr	w1, [x3, x0, lsl #2]
     868:	cbz	w1, 85c <fallbackSort+0x85c>
     86c:	sub	w1, w1, #0x1
     870:	str	w1, [x3, w2, sxtw #2]
     874:	ldr	w0, [x19, x4, lsl #2]
     878:	strb	w2, [x20, x0]
     87c:	add	x4, x4, #0x1
     880:	cmp	w28, w4
     884:	b.le	898 <fallbackSort+0x898>
     888:	ldr	w1, [x3, w2, sxtw #2]
     88c:	sxtw	x0, w2
     890:	cbz	w1, 85c <fallbackSort+0x85c>
     894:	b	86c <fallbackSort+0x86c>
     898:	cmp	w2, #0xff
     89c:	b.gt	8c0 <fallbackSort+0x8c0>
     8a0:	ldp	x19, x20, [sp, #16]
     8a4:	ldp	x21, x22, [sp, #32]
     8a8:	ldp	x23, x24, [sp, #48]
     8ac:	ldp	x25, x26, [sp, #64]
     8b0:	ldp	x27, x28, [sp, #80]
     8b4:	ldp	x29, x30, [sp]
     8b8:	add	sp, sp, #0xbb0
     8bc:	ret
     8c0:	mov	w0, #0x3ed                 	// #1005
     8c4:	bl	0 <BZ2_bz__AssertH__fail>
     8c8:	b	8a0 <fallbackSort+0x8a0>
     8cc:	mov	w25, w22
     8d0:	cbnz	w1, 298 <fallbackSort+0x298>
     8d4:	mov	w1, w0
     8d8:	b	33c <fallbackSort+0x33c>

00000000000008dc <mainSort>:
     8dc:	mov	x12, #0x12f0                	// #4848
     8e0:	sub	sp, sp, x12
     8e4:	stp	x29, x30, [sp]
     8e8:	mov	x29, sp
     8ec:	stp	x19, x20, [sp, #16]
     8f0:	stp	x21, x22, [sp, #32]
     8f4:	stp	x23, x24, [sp, #48]
     8f8:	stp	x25, x26, [sp, #64]
     8fc:	stp	x27, x28, [sp, #80]
     900:	mov	x23, x0
     904:	mov	x28, x1
     908:	str	x2, [sp, #288]
     90c:	str	x3, [sp, #176]
     910:	str	w4, [sp, #284]
     914:	str	w5, [sp, #248]
     918:	str	x6, [sp, #200]
     91c:	cmp	w5, #0x3
     920:	b.gt	c1c <mainSort+0x340>
     924:	ldr	x2, [sp, #176]
     928:	add	x0, x2, #0x40, lsl #12
     92c:	str	x2, [sp, #312]
     930:	str	wzr, [x0]
     934:	cmp	x0, x2
     938:	sub	x0, x0, #0x4
     93c:	b.ne	930 <mainSort+0x54>  // b.any
     940:	ldrb	w0, [x28]
     944:	lsl	w0, w0, #8
     948:	ldr	w4, [sp, #284]
     94c:	sub	w1, w4, #0x1
     950:	str	w1, [sp, #308]
     954:	cmp	w1, #0x2
     958:	b.le	c3c <mainSort+0x360>
     95c:	sbfiz	x5, x1, #1, #32
     960:	ldr	x7, [sp, #288]
     964:	add	x2, x7, x5
     968:	add	x3, x28, w1, sxtw
     96c:	sub	w1, w4, #0x4
     970:	lsr	w4, w1, #2
     974:	add	x6, x5, #0x2
     978:	lsr	w5, w1, #2
     97c:	sub	x5, x6, x5, lsl #3
     980:	sub	x1, x7, #0xa
     984:	add	x5, x5, x1
     988:	ldr	x1, [sp, #176]
     98c:	strh	wzr, [x2]
     990:	ldrb	w6, [x3]
     994:	lsl	w6, w6, #8
     998:	orr	w0, w6, w0, asr #8
     99c:	sxtw	x7, w0
     9a0:	ldr	w6, [x1, x7, lsl #2]
     9a4:	add	w6, w6, #0x1
     9a8:	str	w6, [x1, x7, lsl #2]
     9ac:	sturh	wzr, [x2, #-2]
     9b0:	ldurb	w6, [x3, #-1]
     9b4:	lsl	w6, w6, #8
     9b8:	orr	w0, w6, w0, asr #8
     9bc:	sxtw	x7, w0
     9c0:	ldr	w6, [x1, x7, lsl #2]
     9c4:	add	w6, w6, #0x1
     9c8:	str	w6, [x1, x7, lsl #2]
     9cc:	sturh	wzr, [x2, #-4]
     9d0:	ldurb	w6, [x3, #-2]
     9d4:	lsl	w6, w6, #8
     9d8:	orr	w0, w6, w0, asr #8
     9dc:	sxtw	x7, w0
     9e0:	ldr	w6, [x1, x7, lsl #2]
     9e4:	add	w6, w6, #0x1
     9e8:	str	w6, [x1, x7, lsl #2]
     9ec:	sturh	wzr, [x2, #-6]
     9f0:	ldurb	w6, [x3, #-3]
     9f4:	lsl	w6, w6, #8
     9f8:	orr	w0, w6, w0, asr #8
     9fc:	sxtw	x7, w0
     a00:	ldr	w6, [x1, x7, lsl #2]
     a04:	add	w6, w6, #0x1
     a08:	str	w6, [x1, x7, lsl #2]
     a0c:	sub	x2, x2, #0x8
     a10:	sub	x3, x3, #0x4
     a14:	cmp	x2, x5
     a18:	b.ne	98c <mainSort+0xb0>  // b.any
     a1c:	ldr	w1, [sp, #284]
     a20:	sub	w1, w1, #0x5
     a24:	sub	w1, w1, w4, lsl #2
     a28:	tbnz	w1, #31, a60 <mainSort+0x184>
     a2c:	sxtw	x1, w1
     a30:	ldr	x5, [sp, #288]
     a34:	ldr	x4, [sp, #176]
     a38:	strh	wzr, [x5, x1, lsl #1]
     a3c:	ldrb	w2, [x28, x1]
     a40:	lsl	w2, w2, #8
     a44:	orr	w0, w2, w0, asr #8
     a48:	sxtw	x3, w0
     a4c:	ldr	w2, [x4, x3, lsl #2]
     a50:	add	w2, w2, #0x1
     a54:	str	w2, [x4, x3, lsl #2]
     a58:	sub	x1, x1, #0x1
     a5c:	tbz	w1, #31, a38 <mainSort+0x15c>
     a60:	ldr	w1, [sp, #284]
     a64:	ldr	x0, [sp, #288]
     a68:	add	x3, x0, w1, sxtw #1
     a6c:	mov	x0, #0x0                   	// #0
     a70:	add	x2, x28, w1, sxtw
     a74:	ldrb	w1, [x28, x0]
     a78:	strb	w1, [x2, x0]
     a7c:	strh	wzr, [x3, x0, lsl #1]
     a80:	add	x0, x0, #0x1
     a84:	cmp	x0, #0x22
     a88:	b.ne	a74 <mainSort+0x198>  // b.any
     a8c:	ldr	w0, [sp, #248]
     a90:	cmp	w0, #0x3
     a94:	b.gt	c44 <mainSort+0x368>
     a98:	ldr	x1, [sp, #176]
     a9c:	add	x0, x1, #0x4
     aa0:	add	x3, x1, #0x40, lsl #12
     aa4:	add	x3, x3, #0x4
     aa8:	ldr	w1, [x0]
     aac:	ldur	w2, [x0, #-4]
     ab0:	add	w1, w1, w2
     ab4:	str	w1, [x0], #4
     ab8:	cmp	x0, x3
     abc:	b.ne	aa8 <mainSort+0x1cc>  // b.any
     ac0:	ldrb	w0, [x28]
     ac4:	ubfiz	w0, w0, #8, #8
     ac8:	ldr	w1, [sp, #308]
     acc:	cmp	w1, #0x2
     ad0:	b.le	c64 <mainSort+0x388>
     ad4:	add	x3, x28, w1, sxtw
     ad8:	ldr	x2, [sp, #176]
     adc:	ldrb	w4, [x3]
     ae0:	lsr	w0, w0, #8
     ae4:	orr	w4, w0, w4, lsl #8
     ae8:	and	x5, x4, #0xffff
     aec:	ldr	w0, [x2, x5, lsl #2]
     af0:	sub	w0, w0, #0x1
     af4:	str	w0, [x2, x5, lsl #2]
     af8:	str	w1, [x23, w0, sxtw #2]
     afc:	ldurb	w0, [x3, #-1]
     b00:	lsr	w4, w4, #8
     b04:	orr	w0, w4, w0, lsl #8
     b08:	and	x5, x0, #0xffff
     b0c:	ldr	w4, [x2, x5, lsl #2]
     b10:	sub	w4, w4, #0x1
     b14:	str	w4, [x2, x5, lsl #2]
     b18:	sub	w5, w1, #0x1
     b1c:	str	w5, [x23, w4, sxtw #2]
     b20:	ldurb	w4, [x3, #-2]
     b24:	lsr	w0, w0, #8
     b28:	orr	w4, w0, w4, lsl #8
     b2c:	and	x5, x4, #0xffff
     b30:	ldr	w0, [x2, x5, lsl #2]
     b34:	sub	w0, w0, #0x1
     b38:	str	w0, [x2, x5, lsl #2]
     b3c:	sub	w5, w1, #0x2
     b40:	str	w5, [x23, w0, sxtw #2]
     b44:	ldurb	w0, [x3, #-3]
     b48:	lsr	w4, w4, #8
     b4c:	orr	w0, w4, w0, lsl #8
     b50:	and	x5, x0, #0xffff
     b54:	ldr	w4, [x2, x5, lsl #2]
     b58:	sub	w4, w4, #0x1
     b5c:	str	w4, [x2, x5, lsl #2]
     b60:	sub	w5, w1, #0x3
     b64:	str	w5, [x23, w4, sxtw #2]
     b68:	sub	w1, w1, #0x4
     b6c:	sub	x3, x3, #0x4
     b70:	cmp	w1, #0x2
     b74:	b.gt	adc <mainSort+0x200>
     b78:	ldr	w2, [sp, #284]
     b7c:	sub	w1, w2, #0x4
     b80:	neg	w1, w1, lsr #2
     b84:	sub	w2, w2, #0x5
     b88:	add	w1, w2, w1, lsl #2
     b8c:	tbnz	w1, #31, bc0 <mainSort+0x2e4>
     b90:	sxtw	x1, w1
     b94:	ldr	x4, [sp, #176]
     b98:	ldrb	w2, [x28, x1]
     b9c:	lsr	w0, w0, #8
     ba0:	orr	w0, w0, w2, lsl #8
     ba4:	and	x3, x0, #0xffff
     ba8:	ldr	w2, [x4, x3, lsl #2]
     bac:	sub	w2, w2, #0x1
     bb0:	str	w2, [x4, x3, lsl #2]
     bb4:	str	w1, [x23, w2, sxtw #2]
     bb8:	sub	x1, x1, #0x1
     bbc:	tbz	w1, #31, b98 <mainSort+0x2bc>
     bc0:	mov	x0, #0x1                   	// #1
     bc4:	add	x1, sp, #0xdf0
     bc8:	add	x1, x0, x1
     bcc:	sturb	wzr, [x1, #-1]
     bd0:	add	x1, sp, #0xef0
     bd4:	add	x1, x1, x0, lsl #2
     bd8:	sub	w2, w0, #0x1
     bdc:	stur	w2, [x1, #-4]
     be0:	add	x0, x0, #0x1
     be4:	cmp	x0, #0x101
     be8:	b.ne	bc4 <mainSort+0x2e8>  // b.any
     bec:	mov	w0, #0x5                   	// #5
     bf0:	mov	w1, #0x1                   	// #1
     bf4:	add	w1, w1, w1, lsl #1
     bf8:	add	w1, w1, #0x1
     bfc:	subs	w0, w0, #0x1
     c00:	b.ne	bf4 <mainSort+0x318>  // b.any
     c04:	mov	w14, #0x5556                	// #21846
     c08:	movk	w14, #0x5555, lsl #16
     c0c:	add	x13, sp, #0xef0
     c10:	mov	w5, w1
     c14:	ldr	x4, [sp, #176]
     c18:	b	cf8 <mainSort+0x41c>
     c1c:	adrp	x0, 0 <stderr>
     c20:	ldr	x3, [x0]
     c24:	mov	x2, #0x21                  	// #33
     c28:	mov	x1, #0x1                   	// #1
     c2c:	adrp	x0, 0 <fallbackSort>
     c30:	add	x0, x0, #0x0
     c34:	bl	0 <fwrite>
     c38:	b	924 <mainSort+0x48>
     c3c:	ldr	w1, [sp, #308]
     c40:	b	a28 <mainSort+0x14c>
     c44:	adrp	x0, 0 <stderr>
     c48:	ldr	x3, [x0]
     c4c:	mov	x2, #0x1b                  	// #27
     c50:	mov	x1, #0x1                   	// #1
     c54:	adrp	x0, 0 <fallbackSort>
     c58:	add	x0, x0, #0x0
     c5c:	bl	0 <fwrite>
     c60:	b	a98 <mainSort+0x1bc>
     c64:	ldr	w1, [sp, #308]
     c68:	b	b8c <mainSort+0x2b0>
     c6c:	str	w15, [x13, w8, sxtw #2]
     c70:	add	x16, x16, #0x1
     c74:	add	x11, x11, #0x1
     c78:	add	x12, x12, #0x4
     c7c:	cmp	w11, #0xff
     c80:	b.gt	cf0 <mainSort+0x414>
     c84:	mov	w0, w11
     c88:	ldr	w15, [x12, x17, lsl #2]
     c8c:	add	w1, w15, #0x1
     c90:	lsl	w1, w1, #8
     c94:	lsl	w2, w15, #8
     c98:	ldr	w7, [x4, w1, sxtw #2]
     c9c:	ldr	w1, [x4, w2, sxtw #2]
     ca0:	sub	w7, w7, w1
     ca4:	mov	x3, x12
     ca8:	sub	x9, x11, x16
     cac:	mov	w8, w0
     cb0:	sub	w0, w0, w5
     cb4:	ldr	w2, [x3]
     cb8:	add	w1, w2, #0x1
     cbc:	lsl	w1, w1, #8
     cc0:	lsl	w6, w2, #8
     cc4:	ldr	w1, [x4, w1, sxtw #2]
     cc8:	ldr	w6, [x4, w6, sxtw #2]
     ccc:	sub	w1, w1, w6
     cd0:	cmp	w1, w7
     cd4:	b.ls	c6c <mainSort+0x390>  // b.plast
     cd8:	str	w2, [x3, x9, lsl #2]
     cdc:	add	x3, x3, x10
     ce0:	cmp	w0, w5
     ce4:	b.ge	cac <mainSort+0x3d0>  // b.tcont
     ce8:	mov	w8, w0
     cec:	b	c6c <mainSort+0x390>
     cf0:	cmp	w5, #0x1
     cf4:	b.eq	d2c <mainSort+0x450>  // b.none
     cf8:	mov	w1, w5
     cfc:	smull	x0, w5, w14
     d00:	lsr	x0, x0, #32
     d04:	sub	w5, w0, w5, asr #31
     d08:	cmp	w1, #0x2ff
     d0c:	b.gt	cf0 <mainSort+0x414>
     d10:	sxtw	x17, w5
     d14:	add	x12, sp, #0xef0
     d18:	neg	w10, w5
     d1c:	sbfiz	x10, x10, #2, #32
     d20:	mov	x11, x17
     d24:	mov	x16, #0x0                   	// #0
     d28:	b	c84 <mainSort+0x3a8>
     d2c:	str	w5, [sp, #252]
     d30:	str	xzr, [sp, #296]
     d34:	str	wzr, [sp, #244]
     d38:	ldr	w0, [sp, #284]
     d3c:	str	w0, [sp, #304]
     d40:	mov	x24, x23
     d44:	mov	x19, x28
     d48:	ldr	x0, [sp, #296]
     d4c:	add	x1, sp, #0xef0
     d50:	ldr	w0, [x1, x0, lsl #2]
     d54:	str	w0, [sp, #228]
     d58:	lsl	w0, w0, #8
     d5c:	str	w0, [sp, #240]
     d60:	str	wzr, [sp, #168]
     d64:	b	245c <mainSort+0x1b80>
     d68:	ldr	w0, [sp, #236]
     d6c:	sub	w5, w0, w1
     d70:	add	w5, w5, #0x1
     d74:	ldr	w4, [sp, #244]
     d78:	ldr	w3, [sp, #168]
     d7c:	ldr	w2, [sp, #228]
     d80:	adrp	x1, 0 <fallbackSort>
     d84:	add	x1, x1, #0x0
     d88:	adrp	x0, 0 <stderr>
     d8c:	ldr	x0, [x0]
     d90:	bl	0 <fprintf>
     d94:	b	24bc <mainSort+0x1be0>
     d98:	add	w8, w7, #0x1
     d9c:	ldrb	w15, [x24, w8, uxtw]
     da0:	ldrb	w8, [x24, x11]
     da4:	cmp	w15, w8
     da8:	b.eq	df4 <mainSort+0x518>  // b.none
     dac:	cset	w7, hi  // hi = pmore
     db0:	cbz	w7, 1320 <mainSort+0xa44>
     db4:	ldr	w7, [x1]
     db8:	str	w7, [x1, x30, lsl #2]
     dbc:	add	x5, x5, x27
     dc0:	cmp	w19, w3
     dc4:	b.gt	138c <mainSort+0xab0>
     dc8:	mov	w16, w3
     dcc:	sub	w3, w3, w21
     dd0:	mov	x1, x5
     dd4:	ldr	w7, [x5]
     dd8:	add	w7, w22, w7
     ddc:	ldrb	w15, [x24, w7, uxtw]
     de0:	ldrb	w8, [x24, w0, uxtw]
     de4:	cmp	w15, w8
     de8:	b.eq	d98 <mainSort+0x4bc>  // b.none
     dec:	cset	w7, hi  // hi = pmore
     df0:	b	db0 <mainSort+0x4d4>
     df4:	add	w8, w7, #0x2
     df8:	ldrb	w15, [x24, w8, uxtw]
     dfc:	ldrb	w8, [x24, x10]
     e00:	cmp	w15, w8
     e04:	b.eq	e10 <mainSort+0x534>  // b.none
     e08:	cset	w7, hi  // hi = pmore
     e0c:	b	db0 <mainSort+0x4d4>
     e10:	add	w8, w7, #0x3
     e14:	ldrb	w15, [x24, w8, uxtw]
     e18:	ldrb	w8, [x24, x9]
     e1c:	cmp	w15, w8
     e20:	b.eq	e2c <mainSort+0x550>  // b.none
     e24:	cset	w7, hi  // hi = pmore
     e28:	b	db0 <mainSort+0x4d4>
     e2c:	add	w8, w7, #0x4
     e30:	ldrb	w15, [x24, w8, uxtw]
     e34:	ldrb	w8, [x24, x12]
     e38:	cmp	w15, w8
     e3c:	b.eq	e48 <mainSort+0x56c>  // b.none
     e40:	cset	w7, hi  // hi = pmore
     e44:	b	db0 <mainSort+0x4d4>
     e48:	add	w8, w7, #0x5
     e4c:	ldrb	w15, [x24, w8, uxtw]
     e50:	ldrb	w8, [x24, x13]
     e54:	cmp	w15, w8
     e58:	b.eq	e64 <mainSort+0x588>  // b.none
     e5c:	cset	w7, hi  // hi = pmore
     e60:	b	db0 <mainSort+0x4d4>
     e64:	add	w8, w7, #0x6
     e68:	ldrb	w15, [x24, w8, uxtw]
     e6c:	ldrb	w8, [x24, x14]
     e70:	cmp	w15, w8
     e74:	b.eq	e80 <mainSort+0x5a4>  // b.none
     e78:	cset	w7, hi  // hi = pmore
     e7c:	b	db0 <mainSort+0x4d4>
     e80:	add	w8, w7, #0x7
     e84:	ldrb	w15, [x24, w8, uxtw]
     e88:	ldrb	w8, [x24, x17]
     e8c:	cmp	w15, w8
     e90:	b.eq	e9c <mainSort+0x5c0>  // b.none
     e94:	cset	w7, hi  // hi = pmore
     e98:	b	db0 <mainSort+0x4d4>
     e9c:	add	w8, w7, #0x8
     ea0:	ldrb	w15, [x24, w8, uxtw]
     ea4:	ldr	x8, [sp, #104]
     ea8:	ldrb	w8, [x24, x8]
     eac:	cmp	w15, w8
     eb0:	b.eq	ebc <mainSort+0x5e0>  // b.none
     eb4:	cset	w7, hi  // hi = pmore
     eb8:	b	db0 <mainSort+0x4d4>
     ebc:	add	w8, w7, #0x9
     ec0:	ldrb	w15, [x24, w8, uxtw]
     ec4:	ldr	x8, [sp, #112]
     ec8:	ldrb	w8, [x24, x8]
     ecc:	cmp	w15, w8
     ed0:	b.eq	edc <mainSort+0x600>  // b.none
     ed4:	cset	w7, hi  // hi = pmore
     ed8:	b	db0 <mainSort+0x4d4>
     edc:	add	w8, w7, #0xa
     ee0:	ldrb	w15, [x24, w8, uxtw]
     ee4:	ldr	x8, [sp, #136]
     ee8:	ldrb	w8, [x24, x8]
     eec:	cmp	w15, w8
     ef0:	b.eq	efc <mainSort+0x620>  // b.none
     ef4:	cset	w7, hi  // hi = pmore
     ef8:	b	db0 <mainSort+0x4d4>
     efc:	add	w8, w7, #0xb
     f00:	ldrb	w15, [x24, w8, uxtw]
     f04:	ldr	x8, [sp, #144]
     f08:	ldrb	w8, [x24, x8]
     f0c:	cmp	w15, w8
     f10:	b.eq	f20 <mainSort+0x644>  // b.none
     f14:	cmp	w15, w8
     f18:	cset	w7, hi  // hi = pmore
     f1c:	b	db0 <mainSort+0x4d4>
     f20:	add	w7, w7, #0xc
     f24:	add	w15, w0, #0xc
     f28:	ldr	w8, [sp, #284]
     f2c:	add	w8, w8, #0x8
     f30:	str	w20, [sp, #152]
     f34:	str	w22, [sp, #260]
     f38:	str	w21, [sp, #264]
     f3c:	str	w19, [sp, #268]
     f40:	str	w6, [sp, #272]
     f44:	str	w0, [sp, #276]
     f48:	mov	w6, w7
     f4c:	mov	w0, w8
     f50:	ldr	x19, [sp, #288]
     f54:	ldr	w20, [sp, #304]
     f58:	mov	w22, w6
     f5c:	ldrb	w8, [x24, w6, uxtw]
     f60:	mov	w21, w15
     f64:	ldrb	w7, [x24, w15, uxtw]
     f68:	cmp	w8, w7
     f6c:	b.ne	1120 <mainSort+0x844>  // b.any
     f70:	ldrh	w7, [x19, x22, lsl #1]
     f74:	ldrh	w8, [x19, x21, lsl #1]
     f78:	cmp	w7, w8
     f7c:	b.ne	1140 <mainSort+0x864>  // b.any
     f80:	add	w7, w6, #0x1
     f84:	add	w22, w6, #0x1
     f88:	ldrb	w8, [x24, w7, uxtw]
     f8c:	add	w7, w15, #0x1
     f90:	add	w21, w15, #0x1
     f94:	ldrb	w7, [x24, w7, uxtw]
     f98:	cmp	w8, w7
     f9c:	b.ne	1160 <mainSort+0x884>  // b.any
     fa0:	ldrh	w7, [x19, x22, lsl #1]
     fa4:	ldrh	w8, [x19, x21, lsl #1]
     fa8:	cmp	w7, w8
     fac:	b.ne	1180 <mainSort+0x8a4>  // b.any
     fb0:	add	w7, w6, #0x2
     fb4:	add	w22, w6, #0x2
     fb8:	ldrb	w8, [x24, w7, uxtw]
     fbc:	add	w7, w15, #0x2
     fc0:	add	w21, w15, #0x2
     fc4:	ldrb	w7, [x24, w7, uxtw]
     fc8:	cmp	w8, w7
     fcc:	b.ne	11a0 <mainSort+0x8c4>  // b.any
     fd0:	ldrh	w7, [x19, x22, lsl #1]
     fd4:	ldrh	w8, [x19, x21, lsl #1]
     fd8:	cmp	w7, w8
     fdc:	b.ne	11c0 <mainSort+0x8e4>  // b.any
     fe0:	add	w7, w6, #0x3
     fe4:	add	w22, w6, #0x3
     fe8:	ldrb	w8, [x24, w7, uxtw]
     fec:	add	w7, w15, #0x3
     ff0:	add	w21, w15, #0x3
     ff4:	ldrb	w7, [x24, w7, uxtw]
     ff8:	cmp	w8, w7
     ffc:	b.ne	11e0 <mainSort+0x904>  // b.any
    1000:	ldrh	w7, [x19, x22, lsl #1]
    1004:	ldrh	w8, [x19, x21, lsl #1]
    1008:	cmp	w7, w8
    100c:	b.ne	1200 <mainSort+0x924>  // b.any
    1010:	add	w7, w6, #0x4
    1014:	add	w22, w6, #0x4
    1018:	ldrb	w8, [x24, w7, uxtw]
    101c:	add	w7, w15, #0x4
    1020:	add	w21, w15, #0x4
    1024:	ldrb	w7, [x24, w7, uxtw]
    1028:	cmp	w8, w7
    102c:	b.ne	1220 <mainSort+0x944>  // b.any
    1030:	ldrh	w7, [x19, x22, lsl #1]
    1034:	ldrh	w8, [x19, x21, lsl #1]
    1038:	cmp	w7, w8
    103c:	b.ne	1240 <mainSort+0x964>  // b.any
    1040:	add	w7, w6, #0x5
    1044:	add	w22, w6, #0x5
    1048:	ldrb	w8, [x24, w7, uxtw]
    104c:	add	w7, w15, #0x5
    1050:	add	w21, w15, #0x5
    1054:	ldrb	w7, [x24, w7, uxtw]
    1058:	cmp	w8, w7
    105c:	b.ne	1260 <mainSort+0x984>  // b.any
    1060:	ldrh	w7, [x19, x22, lsl #1]
    1064:	ldrh	w8, [x19, x21, lsl #1]
    1068:	cmp	w7, w8
    106c:	b.ne	1280 <mainSort+0x9a4>  // b.any
    1070:	add	w7, w6, #0x6
    1074:	add	w22, w6, #0x6
    1078:	ldrb	w8, [x24, w7, uxtw]
    107c:	add	w7, w15, #0x6
    1080:	add	w21, w15, #0x6
    1084:	ldrb	w7, [x24, w7, uxtw]
    1088:	cmp	w8, w7
    108c:	b.ne	12a0 <mainSort+0x9c4>  // b.any
    1090:	ldrh	w7, [x19, x22, lsl #1]
    1094:	ldrh	w8, [x19, x21, lsl #1]
    1098:	cmp	w7, w8
    109c:	b.ne	12c0 <mainSort+0x9e4>  // b.any
    10a0:	add	w7, w6, #0x7
    10a4:	add	w22, w6, #0x7
    10a8:	ldrb	w8, [x24, w7, uxtw]
    10ac:	add	w7, w15, #0x7
    10b0:	add	w21, w15, #0x7
    10b4:	ldrb	w7, [x24, w7, uxtw]
    10b8:	cmp	w8, w7
    10bc:	b.ne	12e0 <mainSort+0xa04>  // b.any
    10c0:	ldrh	w7, [x19, x22, lsl #1]
    10c4:	ldrh	w8, [x19, x21, lsl #1]
    10c8:	cmp	w7, w8
    10cc:	b.ne	1300 <mainSort+0xa24>  // b.any
    10d0:	add	w6, w6, #0x8
    10d4:	add	w15, w15, #0x8
    10d8:	sub	w7, w6, w20
    10dc:	cmp	w20, w6
    10e0:	csel	w6, w7, w6, ls  // ls = plast
    10e4:	sub	w7, w15, w20
    10e8:	cmp	w20, w15
    10ec:	csel	w15, w7, w15, ls  // ls = plast
    10f0:	ldr	w7, [x26]
    10f4:	sub	w7, w7, #0x1
    10f8:	str	w7, [x26]
    10fc:	subs	w0, w0, #0x8
    1100:	b.pl	f58 <mainSort+0x67c>  // b.nfrst
    1104:	ldr	w20, [sp, #152]
    1108:	ldr	w22, [sp, #260]
    110c:	ldr	w21, [sp, #264]
    1110:	ldr	w19, [sp, #268]
    1114:	ldr	w6, [sp, #272]
    1118:	mov	w8, w16
    111c:	b	1324 <mainSort+0xa48>
    1120:	ldr	w20, [sp, #152]
    1124:	ldr	w22, [sp, #260]
    1128:	ldr	w21, [sp, #264]
    112c:	ldr	w19, [sp, #268]
    1130:	ldr	w6, [sp, #272]
    1134:	ldr	w0, [sp, #276]
    1138:	cset	w7, hi  // hi = pmore
    113c:	b	db0 <mainSort+0x4d4>
    1140:	ldr	w20, [sp, #152]
    1144:	ldr	w22, [sp, #260]
    1148:	ldr	w21, [sp, #264]
    114c:	ldr	w19, [sp, #268]
    1150:	ldr	w6, [sp, #272]
    1154:	ldr	w0, [sp, #276]
    1158:	cset	w7, hi  // hi = pmore
    115c:	b	db0 <mainSort+0x4d4>
    1160:	ldr	w20, [sp, #152]
    1164:	ldr	w22, [sp, #260]
    1168:	ldr	w21, [sp, #264]
    116c:	ldr	w19, [sp, #268]
    1170:	ldr	w6, [sp, #272]
    1174:	ldr	w0, [sp, #276]
    1178:	cset	w7, hi  // hi = pmore
    117c:	b	db0 <mainSort+0x4d4>
    1180:	ldr	w20, [sp, #152]
    1184:	ldr	w22, [sp, #260]
    1188:	ldr	w21, [sp, #264]
    118c:	ldr	w19, [sp, #268]
    1190:	ldr	w6, [sp, #272]
    1194:	ldr	w0, [sp, #276]
    1198:	cset	w7, hi  // hi = pmore
    119c:	b	db0 <mainSort+0x4d4>
    11a0:	ldr	w20, [sp, #152]
    11a4:	ldr	w22, [sp, #260]
    11a8:	ldr	w21, [sp, #264]
    11ac:	ldr	w19, [sp, #268]
    11b0:	ldr	w6, [sp, #272]
    11b4:	ldr	w0, [sp, #276]
    11b8:	cset	w7, hi  // hi = pmore
    11bc:	b	db0 <mainSort+0x4d4>
    11c0:	ldr	w20, [sp, #152]
    11c4:	ldr	w22, [sp, #260]
    11c8:	ldr	w21, [sp, #264]
    11cc:	ldr	w19, [sp, #268]
    11d0:	ldr	w6, [sp, #272]
    11d4:	ldr	w0, [sp, #276]
    11d8:	cset	w7, hi  // hi = pmore
    11dc:	b	db0 <mainSort+0x4d4>
    11e0:	ldr	w20, [sp, #152]
    11e4:	ldr	w22, [sp, #260]
    11e8:	ldr	w21, [sp, #264]
    11ec:	ldr	w19, [sp, #268]
    11f0:	ldr	w6, [sp, #272]
    11f4:	ldr	w0, [sp, #276]
    11f8:	cset	w7, hi  // hi = pmore
    11fc:	b	db0 <mainSort+0x4d4>
    1200:	ldr	w20, [sp, #152]
    1204:	ldr	w22, [sp, #260]
    1208:	ldr	w21, [sp, #264]
    120c:	ldr	w19, [sp, #268]
    1210:	ldr	w6, [sp, #272]
    1214:	ldr	w0, [sp, #276]
    1218:	cset	w7, hi  // hi = pmore
    121c:	b	db0 <mainSort+0x4d4>
    1220:	ldr	w20, [sp, #152]
    1224:	ldr	w22, [sp, #260]
    1228:	ldr	w21, [sp, #264]
    122c:	ldr	w19, [sp, #268]
    1230:	ldr	w6, [sp, #272]
    1234:	ldr	w0, [sp, #276]
    1238:	cset	w7, hi  // hi = pmore
    123c:	b	db0 <mainSort+0x4d4>
    1240:	ldr	w20, [sp, #152]
    1244:	ldr	w22, [sp, #260]
    1248:	ldr	w21, [sp, #264]
    124c:	ldr	w19, [sp, #268]
    1250:	ldr	w6, [sp, #272]
    1254:	ldr	w0, [sp, #276]
    1258:	cset	w7, hi  // hi = pmore
    125c:	b	db0 <mainSort+0x4d4>
    1260:	ldr	w20, [sp, #152]
    1264:	ldr	w22, [sp, #260]
    1268:	ldr	w21, [sp, #264]
    126c:	ldr	w19, [sp, #268]
    1270:	ldr	w6, [sp, #272]
    1274:	ldr	w0, [sp, #276]
    1278:	cset	w7, hi  // hi = pmore
    127c:	b	db0 <mainSort+0x4d4>
    1280:	ldr	w20, [sp, #152]
    1284:	ldr	w22, [sp, #260]
    1288:	ldr	w21, [sp, #264]
    128c:	ldr	w19, [sp, #268]
    1290:	ldr	w6, [sp, #272]
    1294:	ldr	w0, [sp, #276]
    1298:	cset	w7, hi  // hi = pmore
    129c:	b	db0 <mainSort+0x4d4>
    12a0:	ldr	w20, [sp, #152]
    12a4:	ldr	w22, [sp, #260]
    12a8:	ldr	w21, [sp, #264]
    12ac:	ldr	w19, [sp, #268]
    12b0:	ldr	w6, [sp, #272]
    12b4:	ldr	w0, [sp, #276]
    12b8:	cset	w7, hi  // hi = pmore
    12bc:	b	db0 <mainSort+0x4d4>
    12c0:	ldr	w20, [sp, #152]
    12c4:	ldr	w22, [sp, #260]
    12c8:	ldr	w21, [sp, #264]
    12cc:	ldr	w19, [sp, #268]
    12d0:	ldr	w6, [sp, #272]
    12d4:	ldr	w0, [sp, #276]
    12d8:	cset	w7, hi  // hi = pmore
    12dc:	b	db0 <mainSort+0x4d4>
    12e0:	ldr	w20, [sp, #152]
    12e4:	ldr	w22, [sp, #260]
    12e8:	ldr	w21, [sp, #264]
    12ec:	ldr	w19, [sp, #268]
    12f0:	ldr	w6, [sp, #272]
    12f4:	ldr	w0, [sp, #276]
    12f8:	cset	w7, hi  // hi = pmore
    12fc:	b	db0 <mainSort+0x4d4>
    1300:	ldr	w20, [sp, #152]
    1304:	ldr	w22, [sp, #260]
    1308:	ldr	w21, [sp, #264]
    130c:	ldr	w19, [sp, #268]
    1310:	ldr	w6, [sp, #272]
    1314:	ldr	w0, [sp, #276]
    1318:	cset	w7, hi  // hi = pmore
    131c:	b	db0 <mainSort+0x4d4>
    1320:	mov	w8, w16
    1324:	str	w6, [x25, w8, sxtw #2]
    1328:	mov	w3, w28
    132c:	cmp	w20, w28
    1330:	b.lt	1fa0 <mainSort+0x16c4>  // b.tstop
    1334:	ldr	x0, [sp, #120]
    1338:	ldr	w6, [x0, x2, lsl #2]
    133c:	sub	x5, x4, #0x4
    1340:	add	w0, w23, w6
    1344:	add	w12, w23, w6
    1348:	add	w11, w0, #0x1
    134c:	add	w10, w0, #0x2
    1350:	add	w9, w0, #0x3
    1354:	add	w13, w0, #0x4
    1358:	add	w14, w0, #0x5
    135c:	add	w15, w0, #0x6
    1360:	add	w1, w0, #0x7
    1364:	str	x1, [sp, #104]
    1368:	add	w1, w0, #0x8
    136c:	str	x1, [sp, #112]
    1370:	add	w1, w0, #0x9
    1374:	str	x1, [sp, #136]
    1378:	add	w1, w0, #0xa
    137c:	str	x1, [sp, #144]
    1380:	add	w1, w0, #0xb
    1384:	str	x1, [sp, #152]
    1388:	b	13c4 <mainSort+0xae8>
    138c:	mov	w8, w3
    1390:	b	1324 <mainSort+0xa48>
    1394:	add	w8, w7, #0x1
    1398:	ldrb	w16, [x24, w8, uxtw]
    139c:	ldrb	w8, [x24, x11]
    13a0:	cmp	w16, w8
    13a4:	b.eq	13f0 <mainSort+0xb14>  // b.none
    13a8:	cset	w7, hi  // hi = pmore
    13ac:	cbz	w7, 1920 <mainSort+0x1044>
    13b0:	ldr	w7, [x1]
    13b4:	str	w7, [x1, x30, lsl #2]
    13b8:	add	x5, x5, x27
    13bc:	cmp	w19, w3
    13c0:	b.gt	198c <mainSort+0x10b0>
    13c4:	mov	w17, w3
    13c8:	sub	w3, w3, w21
    13cc:	mov	x1, x5
    13d0:	ldr	w7, [x5]
    13d4:	add	w7, w23, w7
    13d8:	ldrb	w16, [x24, w7, uxtw]
    13dc:	ldrb	w8, [x24, x12]
    13e0:	cmp	w16, w8
    13e4:	b.eq	1394 <mainSort+0xab8>  // b.none
    13e8:	cset	w7, hi  // hi = pmore
    13ec:	b	13ac <mainSort+0xad0>
    13f0:	add	w8, w7, #0x2
    13f4:	ldrb	w16, [x24, w8, uxtw]
    13f8:	ldrb	w8, [x24, x10]
    13fc:	cmp	w16, w8
    1400:	b.eq	140c <mainSort+0xb30>  // b.none
    1404:	cset	w7, hi  // hi = pmore
    1408:	b	13ac <mainSort+0xad0>
    140c:	add	w8, w7, #0x3
    1410:	ldrb	w16, [x24, w8, uxtw]
    1414:	ldrb	w8, [x24, x9]
    1418:	cmp	w16, w8
    141c:	b.eq	1428 <mainSort+0xb4c>  // b.none
    1420:	cset	w7, hi  // hi = pmore
    1424:	b	13ac <mainSort+0xad0>
    1428:	add	w8, w7, #0x4
    142c:	ldrb	w16, [x24, w8, uxtw]
    1430:	ldrb	w8, [x24, x13]
    1434:	cmp	w16, w8
    1438:	b.eq	1444 <mainSort+0xb68>  // b.none
    143c:	cset	w7, hi  // hi = pmore
    1440:	b	13ac <mainSort+0xad0>
    1444:	add	w8, w7, #0x5
    1448:	ldrb	w16, [x24, w8, uxtw]
    144c:	ldrb	w8, [x24, x14]
    1450:	cmp	w16, w8
    1454:	b.eq	1460 <mainSort+0xb84>  // b.none
    1458:	cset	w7, hi  // hi = pmore
    145c:	b	13ac <mainSort+0xad0>
    1460:	add	w8, w7, #0x6
    1464:	ldrb	w16, [x24, w8, uxtw]
    1468:	ldrb	w8, [x24, x15]
    146c:	cmp	w16, w8
    1470:	b.eq	147c <mainSort+0xba0>  // b.none
    1474:	cset	w7, hi  // hi = pmore
    1478:	b	13ac <mainSort+0xad0>
    147c:	add	w8, w7, #0x7
    1480:	ldrb	w16, [x24, w8, uxtw]
    1484:	ldr	x8, [sp, #104]
    1488:	ldrb	w8, [x24, x8]
    148c:	cmp	w16, w8
    1490:	b.eq	149c <mainSort+0xbc0>  // b.none
    1494:	cset	w7, hi  // hi = pmore
    1498:	b	13ac <mainSort+0xad0>
    149c:	add	w8, w7, #0x8
    14a0:	ldrb	w16, [x24, w8, uxtw]
    14a4:	ldr	x8, [sp, #112]
    14a8:	ldrb	w8, [x24, x8]
    14ac:	cmp	w16, w8
    14b0:	b.eq	14bc <mainSort+0xbe0>  // b.none
    14b4:	cset	w7, hi  // hi = pmore
    14b8:	b	13ac <mainSort+0xad0>
    14bc:	add	w8, w7, #0x9
    14c0:	ldrb	w16, [x24, w8, uxtw]
    14c4:	ldr	x8, [sp, #136]
    14c8:	ldrb	w8, [x24, x8]
    14cc:	cmp	w16, w8
    14d0:	b.eq	14dc <mainSort+0xc00>  // b.none
    14d4:	cset	w7, hi  // hi = pmore
    14d8:	b	13ac <mainSort+0xad0>
    14dc:	add	w8, w7, #0xa
    14e0:	ldrb	w16, [x24, w8, uxtw]
    14e4:	ldr	x8, [sp, #144]
    14e8:	ldrb	w8, [x24, x8]
    14ec:	cmp	w16, w8
    14f0:	b.eq	14fc <mainSort+0xc20>  // b.none
    14f4:	cset	w7, hi  // hi = pmore
    14f8:	b	13ac <mainSort+0xad0>
    14fc:	add	w8, w7, #0xb
    1500:	ldrb	w16, [x24, w8, uxtw]
    1504:	ldr	x8, [sp, #152]
    1508:	ldrb	w8, [x24, x8]
    150c:	cmp	w16, w8
    1510:	b.eq	1520 <mainSort+0xc44>  // b.none
    1514:	cmp	w16, w8
    1518:	cset	w7, hi  // hi = pmore
    151c:	b	13ac <mainSort+0xad0>
    1520:	add	w8, w7, #0xc
    1524:	add	w16, w0, #0xc
    1528:	ldr	w7, [sp, #304]
    152c:	add	w7, w7, #0x8
    1530:	str	w20, [sp, #260]
    1534:	str	w22, [sp, #264]
    1538:	str	w21, [sp, #268]
    153c:	str	w19, [sp, #272]
    1540:	str	w6, [sp, #276]
    1544:	str	w0, [sp, #280]
    1548:	mov	w6, w8
    154c:	mov	w0, w7
    1550:	ldr	x19, [sp, #288]
    1554:	ldr	w20, [sp, #304]
    1558:	mov	w22, w6
    155c:	ldrb	w8, [x24, w6, uxtw]
    1560:	mov	w21, w16
    1564:	ldrb	w7, [x24, w16, uxtw]
    1568:	cmp	w8, w7
    156c:	b.ne	1720 <mainSort+0xe44>  // b.any
    1570:	ldrh	w7, [x19, x22, lsl #1]
    1574:	ldrh	w8, [x19, x21, lsl #1]
    1578:	cmp	w7, w8
    157c:	b.ne	1740 <mainSort+0xe64>  // b.any
    1580:	add	w7, w6, #0x1
    1584:	add	w22, w6, #0x1
    1588:	ldrb	w8, [x24, w7, uxtw]
    158c:	add	w7, w16, #0x1
    1590:	add	w21, w16, #0x1
    1594:	ldrb	w7, [x24, w7, uxtw]
    1598:	cmp	w8, w7
    159c:	b.ne	1760 <mainSort+0xe84>  // b.any
    15a0:	ldrh	w7, [x19, x22, lsl #1]
    15a4:	ldrh	w8, [x19, x21, lsl #1]
    15a8:	cmp	w7, w8
    15ac:	b.ne	1780 <mainSort+0xea4>  // b.any
    15b0:	add	w7, w6, #0x2
    15b4:	add	w22, w6, #0x2
    15b8:	ldrb	w8, [x24, w7, uxtw]
    15bc:	add	w7, w16, #0x2
    15c0:	add	w21, w16, #0x2
    15c4:	ldrb	w7, [x24, w7, uxtw]
    15c8:	cmp	w8, w7
    15cc:	b.ne	17a0 <mainSort+0xec4>  // b.any
    15d0:	ldrh	w7, [x19, x22, lsl #1]
    15d4:	ldrh	w8, [x19, x21, lsl #1]
    15d8:	cmp	w7, w8
    15dc:	b.ne	17c0 <mainSort+0xee4>  // b.any
    15e0:	add	w7, w6, #0x3
    15e4:	add	w22, w6, #0x3
    15e8:	ldrb	w8, [x24, w7, uxtw]
    15ec:	add	w7, w16, #0x3
    15f0:	add	w21, w16, #0x3
    15f4:	ldrb	w7, [x24, w7, uxtw]
    15f8:	cmp	w8, w7
    15fc:	b.ne	17e0 <mainSort+0xf04>  // b.any
    1600:	ldrh	w7, [x19, x22, lsl #1]
    1604:	ldrh	w8, [x19, x21, lsl #1]
    1608:	cmp	w7, w8
    160c:	b.ne	1800 <mainSort+0xf24>  // b.any
    1610:	add	w7, w6, #0x4
    1614:	add	w22, w6, #0x4
    1618:	ldrb	w8, [x24, w7, uxtw]
    161c:	add	w7, w16, #0x4
    1620:	add	w21, w16, #0x4
    1624:	ldrb	w7, [x24, w7, uxtw]
    1628:	cmp	w8, w7
    162c:	b.ne	1820 <mainSort+0xf44>  // b.any
    1630:	ldrh	w7, [x19, x22, lsl #1]
    1634:	ldrh	w8, [x19, x21, lsl #1]
    1638:	cmp	w7, w8
    163c:	b.ne	1840 <mainSort+0xf64>  // b.any
    1640:	add	w7, w6, #0x5
    1644:	add	w22, w6, #0x5
    1648:	ldrb	w8, [x24, w7, uxtw]
    164c:	add	w7, w16, #0x5
    1650:	add	w21, w16, #0x5
    1654:	ldrb	w7, [x24, w7, uxtw]
    1658:	cmp	w8, w7
    165c:	b.ne	1860 <mainSort+0xf84>  // b.any
    1660:	ldrh	w7, [x19, x22, lsl #1]
    1664:	ldrh	w8, [x19, x21, lsl #1]
    1668:	cmp	w7, w8
    166c:	b.ne	1880 <mainSort+0xfa4>  // b.any
    1670:	add	w7, w6, #0x6
    1674:	add	w22, w6, #0x6
    1678:	ldrb	w8, [x24, w7, uxtw]
    167c:	add	w7, w16, #0x6
    1680:	add	w21, w16, #0x6
    1684:	ldrb	w7, [x24, w7, uxtw]
    1688:	cmp	w8, w7
    168c:	b.ne	18a0 <mainSort+0xfc4>  // b.any
    1690:	ldrh	w7, [x19, x22, lsl #1]
    1694:	ldrh	w8, [x19, x21, lsl #1]
    1698:	cmp	w7, w8
    169c:	b.ne	18c0 <mainSort+0xfe4>  // b.any
    16a0:	add	w7, w6, #0x7
    16a4:	add	w22, w6, #0x7
    16a8:	ldrb	w8, [x24, w7, uxtw]
    16ac:	add	w7, w16, #0x7
    16b0:	add	w21, w16, #0x7
    16b4:	ldrb	w7, [x24, w7, uxtw]
    16b8:	cmp	w8, w7
    16bc:	b.ne	18e0 <mainSort+0x1004>  // b.any
    16c0:	ldrh	w7, [x19, x22, lsl #1]
    16c4:	ldrh	w8, [x19, x21, lsl #1]
    16c8:	cmp	w7, w8
    16cc:	b.ne	1900 <mainSort+0x1024>  // b.any
    16d0:	add	w6, w6, #0x8
    16d4:	add	w16, w16, #0x8
    16d8:	sub	w7, w6, w20
    16dc:	cmp	w20, w6
    16e0:	csel	w6, w7, w6, ls  // ls = plast
    16e4:	sub	w7, w16, w20
    16e8:	cmp	w20, w16
    16ec:	csel	w16, w7, w16, ls  // ls = plast
    16f0:	ldr	w7, [x26]
    16f4:	sub	w7, w7, #0x1
    16f8:	str	w7, [x26]
    16fc:	subs	w0, w0, #0x8
    1700:	b.pl	1558 <mainSort+0xc7c>  // b.nfrst
    1704:	ldr	w20, [sp, #260]
    1708:	ldr	w22, [sp, #264]
    170c:	ldr	w21, [sp, #268]
    1710:	ldr	w19, [sp, #272]
    1714:	ldr	w6, [sp, #276]
    1718:	mov	w8, w17
    171c:	b	1924 <mainSort+0x1048>
    1720:	ldr	w20, [sp, #260]
    1724:	ldr	w22, [sp, #264]
    1728:	ldr	w21, [sp, #268]
    172c:	ldr	w19, [sp, #272]
    1730:	ldr	w6, [sp, #276]
    1734:	ldr	w0, [sp, #280]
    1738:	cset	w7, hi  // hi = pmore
    173c:	b	13ac <mainSort+0xad0>
    1740:	ldr	w20, [sp, #260]
    1744:	ldr	w22, [sp, #264]
    1748:	ldr	w21, [sp, #268]
    174c:	ldr	w19, [sp, #272]
    1750:	ldr	w6, [sp, #276]
    1754:	ldr	w0, [sp, #280]
    1758:	cset	w7, hi  // hi = pmore
    175c:	b	13ac <mainSort+0xad0>
    1760:	ldr	w20, [sp, #260]
    1764:	ldr	w22, [sp, #264]
    1768:	ldr	w21, [sp, #268]
    176c:	ldr	w19, [sp, #272]
    1770:	ldr	w6, [sp, #276]
    1774:	ldr	w0, [sp, #280]
    1778:	cset	w7, hi  // hi = pmore
    177c:	b	13ac <mainSort+0xad0>
    1780:	ldr	w20, [sp, #260]
    1784:	ldr	w22, [sp, #264]
    1788:	ldr	w21, [sp, #268]
    178c:	ldr	w19, [sp, #272]
    1790:	ldr	w6, [sp, #276]
    1794:	ldr	w0, [sp, #280]
    1798:	cset	w7, hi  // hi = pmore
    179c:	b	13ac <mainSort+0xad0>
    17a0:	ldr	w20, [sp, #260]
    17a4:	ldr	w22, [sp, #264]
    17a8:	ldr	w21, [sp, #268]
    17ac:	ldr	w19, [sp, #272]
    17b0:	ldr	w6, [sp, #276]
    17b4:	ldr	w0, [sp, #280]
    17b8:	cset	w7, hi  // hi = pmore
    17bc:	b	13ac <mainSort+0xad0>
    17c0:	ldr	w20, [sp, #260]
    17c4:	ldr	w22, [sp, #264]
    17c8:	ldr	w21, [sp, #268]
    17cc:	ldr	w19, [sp, #272]
    17d0:	ldr	w6, [sp, #276]
    17d4:	ldr	w0, [sp, #280]
    17d8:	cset	w7, hi  // hi = pmore
    17dc:	b	13ac <mainSort+0xad0>
    17e0:	ldr	w20, [sp, #260]
    17e4:	ldr	w22, [sp, #264]
    17e8:	ldr	w21, [sp, #268]
    17ec:	ldr	w19, [sp, #272]
    17f0:	ldr	w6, [sp, #276]
    17f4:	ldr	w0, [sp, #280]
    17f8:	cset	w7, hi  // hi = pmore
    17fc:	b	13ac <mainSort+0xad0>
    1800:	ldr	w20, [sp, #260]
    1804:	ldr	w22, [sp, #264]
    1808:	ldr	w21, [sp, #268]
    180c:	ldr	w19, [sp, #272]
    1810:	ldr	w6, [sp, #276]
    1814:	ldr	w0, [sp, #280]
    1818:	cset	w7, hi  // hi = pmore
    181c:	b	13ac <mainSort+0xad0>
    1820:	ldr	w20, [sp, #260]
    1824:	ldr	w22, [sp, #264]
    1828:	ldr	w21, [sp, #268]
    182c:	ldr	w19, [sp, #272]
    1830:	ldr	w6, [sp, #276]
    1834:	ldr	w0, [sp, #280]
    1838:	cset	w7, hi  // hi = pmore
    183c:	b	13ac <mainSort+0xad0>
    1840:	ldr	w20, [sp, #260]
    1844:	ldr	w22, [sp, #264]
    1848:	ldr	w21, [sp, #268]
    184c:	ldr	w19, [sp, #272]
    1850:	ldr	w6, [sp, #276]
    1854:	ldr	w0, [sp, #280]
    1858:	cset	w7, hi  // hi = pmore
    185c:	b	13ac <mainSort+0xad0>
    1860:	ldr	w20, [sp, #260]
    1864:	ldr	w22, [sp, #264]
    1868:	ldr	w21, [sp, #268]
    186c:	ldr	w19, [sp, #272]
    1870:	ldr	w6, [sp, #276]
    1874:	ldr	w0, [sp, #280]
    1878:	cset	w7, hi  // hi = pmore
    187c:	b	13ac <mainSort+0xad0>
    1880:	ldr	w20, [sp, #260]
    1884:	ldr	w22, [sp, #264]
    1888:	ldr	w21, [sp, #268]
    188c:	ldr	w19, [sp, #272]
    1890:	ldr	w6, [sp, #276]
    1894:	ldr	w0, [sp, #280]
    1898:	cset	w7, hi  // hi = pmore
    189c:	b	13ac <mainSort+0xad0>
    18a0:	ldr	w20, [sp, #260]
    18a4:	ldr	w22, [sp, #264]
    18a8:	ldr	w21, [sp, #268]
    18ac:	ldr	w19, [sp, #272]
    18b0:	ldr	w6, [sp, #276]
    18b4:	ldr	w0, [sp, #280]
    18b8:	cset	w7, hi  // hi = pmore
    18bc:	b	13ac <mainSort+0xad0>
    18c0:	ldr	w20, [sp, #260]
    18c4:	ldr	w22, [sp, #264]
    18c8:	ldr	w21, [sp, #268]
    18cc:	ldr	w19, [sp, #272]
    18d0:	ldr	w6, [sp, #276]
    18d4:	ldr	w0, [sp, #280]
    18d8:	cset	w7, hi  // hi = pmore
    18dc:	b	13ac <mainSort+0xad0>
    18e0:	ldr	w20, [sp, #260]
    18e4:	ldr	w22, [sp, #264]
    18e8:	ldr	w21, [sp, #268]
    18ec:	ldr	w19, [sp, #272]
    18f0:	ldr	w6, [sp, #276]
    18f4:	ldr	w0, [sp, #280]
    18f8:	cset	w7, hi  // hi = pmore
    18fc:	b	13ac <mainSort+0xad0>
    1900:	ldr	w20, [sp, #260]
    1904:	ldr	w22, [sp, #264]
    1908:	ldr	w21, [sp, #268]
    190c:	ldr	w19, [sp, #272]
    1910:	ldr	w6, [sp, #276]
    1914:	ldr	w0, [sp, #280]
    1918:	cset	w7, hi  // hi = pmore
    191c:	b	13ac <mainSort+0xad0>
    1920:	mov	w8, w17
    1924:	str	w6, [x25, w8, sxtw #2]
    1928:	mov	w3, w18
    192c:	cmp	w20, w18
    1930:	b.lt	1fa0 <mainSort+0x16c4>  // b.tstop
    1934:	ldr	x0, [sp, #128]
    1938:	ldr	w6, [x0, x2, lsl #2]
    193c:	mov	x5, x4
    1940:	add	w0, w23, w6
    1944:	add	w12, w23, w6
    1948:	add	w11, w0, #0x1
    194c:	add	w10, w0, #0x2
    1950:	add	w9, w0, #0x3
    1954:	add	w13, w0, #0x4
    1958:	add	w14, w0, #0x5
    195c:	add	w15, w0, #0x6
    1960:	add	w1, w0, #0x7
    1964:	str	x1, [sp, #104]
    1968:	add	w1, w0, #0x8
    196c:	str	x1, [sp, #112]
    1970:	add	w1, w0, #0x9
    1974:	str	x1, [sp, #136]
    1978:	add	w1, w0, #0xa
    197c:	str	x1, [sp, #144]
    1980:	add	w1, w0, #0xb
    1984:	str	x1, [sp, #152]
    1988:	b	19c4 <mainSort+0x10e8>
    198c:	mov	w8, w3
    1990:	b	1924 <mainSort+0x1048>
    1994:	add	w8, w7, #0x1
    1998:	ldrb	w16, [x24, w8, uxtw]
    199c:	ldrb	w8, [x24, x11]
    19a0:	cmp	w16, w8
    19a4:	b.eq	19f0 <mainSort+0x1114>  // b.none
    19a8:	cset	w7, hi  // hi = pmore
    19ac:	cbz	w7, 1f20 <mainSort+0x1644>
    19b0:	ldr	w7, [x1]
    19b4:	str	w7, [x1, x30, lsl #2]
    19b8:	add	x5, x5, x27
    19bc:	cmp	w19, w3
    19c0:	b.gt	1f98 <mainSort+0x16bc>
    19c4:	mov	w17, w3
    19c8:	sub	w3, w3, w21
    19cc:	mov	x1, x5
    19d0:	ldr	w7, [x5]
    19d4:	add	w7, w23, w7
    19d8:	ldrb	w16, [x24, w7, uxtw]
    19dc:	ldrb	w8, [x24, x12]
    19e0:	cmp	w16, w8
    19e4:	b.eq	1994 <mainSort+0x10b8>  // b.none
    19e8:	cset	w7, hi  // hi = pmore
    19ec:	b	19ac <mainSort+0x10d0>
    19f0:	add	w8, w7, #0x2
    19f4:	ldrb	w16, [x24, w8, uxtw]
    19f8:	ldrb	w8, [x24, x10]
    19fc:	cmp	w16, w8
    1a00:	b.eq	1a0c <mainSort+0x1130>  // b.none
    1a04:	cset	w7, hi  // hi = pmore
    1a08:	b	19ac <mainSort+0x10d0>
    1a0c:	add	w8, w7, #0x3
    1a10:	ldrb	w16, [x24, w8, uxtw]
    1a14:	ldrb	w8, [x24, x9]
    1a18:	cmp	w16, w8
    1a1c:	b.eq	1a28 <mainSort+0x114c>  // b.none
    1a20:	cset	w7, hi  // hi = pmore
    1a24:	b	19ac <mainSort+0x10d0>
    1a28:	add	w8, w7, #0x4
    1a2c:	ldrb	w16, [x24, w8, uxtw]
    1a30:	ldrb	w8, [x24, x13]
    1a34:	cmp	w16, w8
    1a38:	b.eq	1a44 <mainSort+0x1168>  // b.none
    1a3c:	cset	w7, hi  // hi = pmore
    1a40:	b	19ac <mainSort+0x10d0>
    1a44:	add	w8, w7, #0x5
    1a48:	ldrb	w16, [x24, w8, uxtw]
    1a4c:	ldrb	w8, [x24, x14]
    1a50:	cmp	w16, w8
    1a54:	b.eq	1a60 <mainSort+0x1184>  // b.none
    1a58:	cset	w7, hi  // hi = pmore
    1a5c:	b	19ac <mainSort+0x10d0>
    1a60:	add	w8, w7, #0x6
    1a64:	ldrb	w16, [x24, w8, uxtw]
    1a68:	ldrb	w8, [x24, x15]
    1a6c:	cmp	w16, w8
    1a70:	b.eq	1a7c <mainSort+0x11a0>  // b.none
    1a74:	cset	w7, hi  // hi = pmore
    1a78:	b	19ac <mainSort+0x10d0>
    1a7c:	add	w8, w7, #0x7
    1a80:	ldrb	w16, [x24, w8, uxtw]
    1a84:	ldr	x8, [sp, #104]
    1a88:	ldrb	w8, [x24, x8]
    1a8c:	cmp	w16, w8
    1a90:	b.eq	1a9c <mainSort+0x11c0>  // b.none
    1a94:	cset	w7, hi  // hi = pmore
    1a98:	b	19ac <mainSort+0x10d0>
    1a9c:	add	w8, w7, #0x8
    1aa0:	ldrb	w16, [x24, w8, uxtw]
    1aa4:	ldr	x8, [sp, #112]
    1aa8:	ldrb	w8, [x24, x8]
    1aac:	cmp	w16, w8
    1ab0:	b.eq	1abc <mainSort+0x11e0>  // b.none
    1ab4:	cset	w7, hi  // hi = pmore
    1ab8:	b	19ac <mainSort+0x10d0>
    1abc:	add	w8, w7, #0x9
    1ac0:	ldrb	w16, [x24, w8, uxtw]
    1ac4:	ldr	x8, [sp, #136]
    1ac8:	ldrb	w8, [x24, x8]
    1acc:	cmp	w16, w8
    1ad0:	b.eq	1adc <mainSort+0x1200>  // b.none
    1ad4:	cset	w7, hi  // hi = pmore
    1ad8:	b	19ac <mainSort+0x10d0>
    1adc:	add	w8, w7, #0xa
    1ae0:	ldrb	w16, [x24, w8, uxtw]
    1ae4:	ldr	x8, [sp, #144]
    1ae8:	ldrb	w8, [x24, x8]
    1aec:	cmp	w16, w8
    1af0:	b.eq	1afc <mainSort+0x1220>  // b.none
    1af4:	cset	w7, hi  // hi = pmore
    1af8:	b	19ac <mainSort+0x10d0>
    1afc:	add	w8, w7, #0xb
    1b00:	ldrb	w16, [x24, w8, uxtw]
    1b04:	ldr	x8, [sp, #152]
    1b08:	ldrb	w8, [x24, x8]
    1b0c:	cmp	w16, w8
    1b10:	b.eq	1b20 <mainSort+0x1244>  // b.none
    1b14:	cmp	w16, w8
    1b18:	cset	w7, hi  // hi = pmore
    1b1c:	b	19ac <mainSort+0x10d0>
    1b20:	add	w8, w7, #0xc
    1b24:	add	w16, w0, #0xc
    1b28:	ldr	w7, [sp, #304]
    1b2c:	add	w7, w7, #0x8
    1b30:	str	w20, [sp, #260]
    1b34:	str	w22, [sp, #264]
    1b38:	str	w21, [sp, #268]
    1b3c:	str	w19, [sp, #272]
    1b40:	str	w6, [sp, #276]
    1b44:	str	w0, [sp, #280]
    1b48:	mov	w6, w8
    1b4c:	mov	w0, w7
    1b50:	ldr	x19, [sp, #288]
    1b54:	ldr	w20, [sp, #304]
    1b58:	mov	w22, w6
    1b5c:	ldrb	w8, [x24, w6, uxtw]
    1b60:	mov	w21, w16
    1b64:	ldrb	w7, [x24, w16, uxtw]
    1b68:	cmp	w8, w7
    1b6c:	b.ne	1d20 <mainSort+0x1444>  // b.any
    1b70:	ldrh	w7, [x19, x22, lsl #1]
    1b74:	ldrh	w8, [x19, x21, lsl #1]
    1b78:	cmp	w7, w8
    1b7c:	b.ne	1d40 <mainSort+0x1464>  // b.any
    1b80:	add	w7, w6, #0x1
    1b84:	add	w22, w6, #0x1
    1b88:	ldrb	w8, [x24, w7, uxtw]
    1b8c:	add	w7, w16, #0x1
    1b90:	add	w21, w16, #0x1
    1b94:	ldrb	w7, [x24, w7, uxtw]
    1b98:	cmp	w8, w7
    1b9c:	b.ne	1d60 <mainSort+0x1484>  // b.any
    1ba0:	ldrh	w7, [x19, x22, lsl #1]
    1ba4:	ldrh	w8, [x19, x21, lsl #1]
    1ba8:	cmp	w7, w8
    1bac:	b.ne	1d80 <mainSort+0x14a4>  // b.any
    1bb0:	add	w7, w6, #0x2
    1bb4:	add	w22, w6, #0x2
    1bb8:	ldrb	w8, [x24, w7, uxtw]
    1bbc:	add	w7, w16, #0x2
    1bc0:	add	w21, w16, #0x2
    1bc4:	ldrb	w7, [x24, w7, uxtw]
    1bc8:	cmp	w8, w7
    1bcc:	b.ne	1da0 <mainSort+0x14c4>  // b.any
    1bd0:	ldrh	w7, [x19, x22, lsl #1]
    1bd4:	ldrh	w8, [x19, x21, lsl #1]
    1bd8:	cmp	w7, w8
    1bdc:	b.ne	1dc0 <mainSort+0x14e4>  // b.any
    1be0:	add	w7, w6, #0x3
    1be4:	add	w22, w6, #0x3
    1be8:	ldrb	w8, [x24, w7, uxtw]
    1bec:	add	w7, w16, #0x3
    1bf0:	add	w21, w16, #0x3
    1bf4:	ldrb	w7, [x24, w7, uxtw]
    1bf8:	cmp	w8, w7
    1bfc:	b.ne	1de0 <mainSort+0x1504>  // b.any
    1c00:	ldrh	w7, [x19, x22, lsl #1]
    1c04:	ldrh	w8, [x19, x21, lsl #1]
    1c08:	cmp	w7, w8
    1c0c:	b.ne	1e00 <mainSort+0x1524>  // b.any
    1c10:	add	w7, w6, #0x4
    1c14:	add	w22, w6, #0x4
    1c18:	ldrb	w8, [x24, w7, uxtw]
    1c1c:	add	w7, w16, #0x4
    1c20:	add	w21, w16, #0x4
    1c24:	ldrb	w7, [x24, w7, uxtw]
    1c28:	cmp	w8, w7
    1c2c:	b.ne	1e20 <mainSort+0x1544>  // b.any
    1c30:	ldrh	w7, [x19, x22, lsl #1]
    1c34:	ldrh	w8, [x19, x21, lsl #1]
    1c38:	cmp	w7, w8
    1c3c:	b.ne	1e40 <mainSort+0x1564>  // b.any
    1c40:	add	w7, w6, #0x5
    1c44:	add	w22, w6, #0x5
    1c48:	ldrb	w8, [x24, w7, uxtw]
    1c4c:	add	w7, w16, #0x5
    1c50:	add	w21, w16, #0x5
    1c54:	ldrb	w7, [x24, w7, uxtw]
    1c58:	cmp	w8, w7
    1c5c:	b.ne	1e60 <mainSort+0x1584>  // b.any
    1c60:	ldrh	w7, [x19, x22, lsl #1]
    1c64:	ldrh	w8, [x19, x21, lsl #1]
    1c68:	cmp	w7, w8
    1c6c:	b.ne	1e80 <mainSort+0x15a4>  // b.any
    1c70:	add	w7, w6, #0x6
    1c74:	add	w22, w6, #0x6
    1c78:	ldrb	w8, [x24, w7, uxtw]
    1c7c:	add	w7, w16, #0x6
    1c80:	add	w21, w16, #0x6
    1c84:	ldrb	w7, [x24, w7, uxtw]
    1c88:	cmp	w8, w7
    1c8c:	b.ne	1ea0 <mainSort+0x15c4>  // b.any
    1c90:	ldrh	w7, [x19, x22, lsl #1]
    1c94:	ldrh	w8, [x19, x21, lsl #1]
    1c98:	cmp	w7, w8
    1c9c:	b.ne	1ec0 <mainSort+0x15e4>  // b.any
    1ca0:	add	w7, w6, #0x7
    1ca4:	add	w22, w6, #0x7
    1ca8:	ldrb	w8, [x24, w7, uxtw]
    1cac:	add	w7, w16, #0x7
    1cb0:	add	w21, w16, #0x7
    1cb4:	ldrb	w7, [x24, w7, uxtw]
    1cb8:	cmp	w8, w7
    1cbc:	b.ne	1ee0 <mainSort+0x1604>  // b.any
    1cc0:	ldrh	w7, [x19, x22, lsl #1]
    1cc4:	ldrh	w8, [x19, x21, lsl #1]
    1cc8:	cmp	w7, w8
    1ccc:	b.ne	1f00 <mainSort+0x1624>  // b.any
    1cd0:	add	w6, w6, #0x8
    1cd4:	add	w16, w16, #0x8
    1cd8:	sub	w7, w6, w20
    1cdc:	cmp	w20, w6
    1ce0:	csel	w6, w7, w6, ls  // ls = plast
    1ce4:	sub	w7, w16, w20
    1ce8:	cmp	w20, w16
    1cec:	csel	w16, w7, w16, ls  // ls = plast
    1cf0:	ldr	w7, [x26]
    1cf4:	sub	w7, w7, #0x1
    1cf8:	str	w7, [x26]
    1cfc:	subs	w0, w0, #0x8
    1d00:	b.pl	1b58 <mainSort+0x127c>  // b.nfrst
    1d04:	ldr	w20, [sp, #260]
    1d08:	ldr	w22, [sp, #264]
    1d0c:	ldr	w21, [sp, #268]
    1d10:	ldr	w19, [sp, #272]
    1d14:	ldr	w6, [sp, #276]
    1d18:	mov	w8, w17
    1d1c:	b	1f24 <mainSort+0x1648>
    1d20:	ldr	w20, [sp, #260]
    1d24:	ldr	w22, [sp, #264]
    1d28:	ldr	w21, [sp, #268]
    1d2c:	ldr	w19, [sp, #272]
    1d30:	ldr	w6, [sp, #276]
    1d34:	ldr	w0, [sp, #280]
    1d38:	cset	w7, hi  // hi = pmore
    1d3c:	b	19ac <mainSort+0x10d0>
    1d40:	ldr	w20, [sp, #260]
    1d44:	ldr	w22, [sp, #264]
    1d48:	ldr	w21, [sp, #268]
    1d4c:	ldr	w19, [sp, #272]
    1d50:	ldr	w6, [sp, #276]
    1d54:	ldr	w0, [sp, #280]
    1d58:	cset	w7, hi  // hi = pmore
    1d5c:	b	19ac <mainSort+0x10d0>
    1d60:	ldr	w20, [sp, #260]
    1d64:	ldr	w22, [sp, #264]
    1d68:	ldr	w21, [sp, #268]
    1d6c:	ldr	w19, [sp, #272]
    1d70:	ldr	w6, [sp, #276]
    1d74:	ldr	w0, [sp, #280]
    1d78:	cset	w7, hi  // hi = pmore
    1d7c:	b	19ac <mainSort+0x10d0>
    1d80:	ldr	w20, [sp, #260]
    1d84:	ldr	w22, [sp, #264]
    1d88:	ldr	w21, [sp, #268]
    1d8c:	ldr	w19, [sp, #272]
    1d90:	ldr	w6, [sp, #276]
    1d94:	ldr	w0, [sp, #280]
    1d98:	cset	w7, hi  // hi = pmore
    1d9c:	b	19ac <mainSort+0x10d0>
    1da0:	ldr	w20, [sp, #260]
    1da4:	ldr	w22, [sp, #264]
    1da8:	ldr	w21, [sp, #268]
    1dac:	ldr	w19, [sp, #272]
    1db0:	ldr	w6, [sp, #276]
    1db4:	ldr	w0, [sp, #280]
    1db8:	cset	w7, hi  // hi = pmore
    1dbc:	b	19ac <mainSort+0x10d0>
    1dc0:	ldr	w20, [sp, #260]
    1dc4:	ldr	w22, [sp, #264]
    1dc8:	ldr	w21, [sp, #268]
    1dcc:	ldr	w19, [sp, #272]
    1dd0:	ldr	w6, [sp, #276]
    1dd4:	ldr	w0, [sp, #280]
    1dd8:	cset	w7, hi  // hi = pmore
    1ddc:	b	19ac <mainSort+0x10d0>
    1de0:	ldr	w20, [sp, #260]
    1de4:	ldr	w22, [sp, #264]
    1de8:	ldr	w21, [sp, #268]
    1dec:	ldr	w19, [sp, #272]
    1df0:	ldr	w6, [sp, #276]
    1df4:	ldr	w0, [sp, #280]
    1df8:	cset	w7, hi  // hi = pmore
    1dfc:	b	19ac <mainSort+0x10d0>
    1e00:	ldr	w20, [sp, #260]
    1e04:	ldr	w22, [sp, #264]
    1e08:	ldr	w21, [sp, #268]
    1e0c:	ldr	w19, [sp, #272]
    1e10:	ldr	w6, [sp, #276]
    1e14:	ldr	w0, [sp, #280]
    1e18:	cset	w7, hi  // hi = pmore
    1e1c:	b	19ac <mainSort+0x10d0>
    1e20:	ldr	w20, [sp, #260]
    1e24:	ldr	w22, [sp, #264]
    1e28:	ldr	w21, [sp, #268]
    1e2c:	ldr	w19, [sp, #272]
    1e30:	ldr	w6, [sp, #276]
    1e34:	ldr	w0, [sp, #280]
    1e38:	cset	w7, hi  // hi = pmore
    1e3c:	b	19ac <mainSort+0x10d0>
    1e40:	ldr	w20, [sp, #260]
    1e44:	ldr	w22, [sp, #264]
    1e48:	ldr	w21, [sp, #268]
    1e4c:	ldr	w19, [sp, #272]
    1e50:	ldr	w6, [sp, #276]
    1e54:	ldr	w0, [sp, #280]
    1e58:	cset	w7, hi  // hi = pmore
    1e5c:	b	19ac <mainSort+0x10d0>
    1e60:	ldr	w20, [sp, #260]
    1e64:	ldr	w22, [sp, #264]
    1e68:	ldr	w21, [sp, #268]
    1e6c:	ldr	w19, [sp, #272]
    1e70:	ldr	w6, [sp, #276]
    1e74:	ldr	w0, [sp, #280]
    1e78:	cset	w7, hi  // hi = pmore
    1e7c:	b	19ac <mainSort+0x10d0>
    1e80:	ldr	w20, [sp, #260]
    1e84:	ldr	w22, [sp, #264]
    1e88:	ldr	w21, [sp, #268]
    1e8c:	ldr	w19, [sp, #272]
    1e90:	ldr	w6, [sp, #276]
    1e94:	ldr	w0, [sp, #280]
    1e98:	cset	w7, hi  // hi = pmore
    1e9c:	b	19ac <mainSort+0x10d0>
    1ea0:	ldr	w20, [sp, #260]
    1ea4:	ldr	w22, [sp, #264]
    1ea8:	ldr	w21, [sp, #268]
    1eac:	ldr	w19, [sp, #272]
    1eb0:	ldr	w6, [sp, #276]
    1eb4:	ldr	w0, [sp, #280]
    1eb8:	cset	w7, hi  // hi = pmore
    1ebc:	b	19ac <mainSort+0x10d0>
    1ec0:	ldr	w20, [sp, #260]
    1ec4:	ldr	w22, [sp, #264]
    1ec8:	ldr	w21, [sp, #268]
    1ecc:	ldr	w19, [sp, #272]
    1ed0:	ldr	w6, [sp, #276]
    1ed4:	ldr	w0, [sp, #280]
    1ed8:	cset	w7, hi  // hi = pmore
    1edc:	b	19ac <mainSort+0x10d0>
    1ee0:	ldr	w20, [sp, #260]
    1ee4:	ldr	w22, [sp, #264]
    1ee8:	ldr	w21, [sp, #268]
    1eec:	ldr	w19, [sp, #272]
    1ef0:	ldr	w6, [sp, #276]
    1ef4:	ldr	w0, [sp, #280]
    1ef8:	cset	w7, hi  // hi = pmore
    1efc:	b	19ac <mainSort+0x10d0>
    1f00:	ldr	w20, [sp, #260]
    1f04:	ldr	w22, [sp, #264]
    1f08:	ldr	w21, [sp, #268]
    1f0c:	ldr	w19, [sp, #272]
    1f10:	ldr	w6, [sp, #276]
    1f14:	ldr	w0, [sp, #280]
    1f18:	cset	w7, hi  // hi = pmore
    1f1c:	b	19ac <mainSort+0x10d0>
    1f20:	mov	w8, w17
    1f24:	str	w6, [x25, w8, sxtw #2]
    1f28:	add	x2, x2, #0x3
    1f2c:	add	w18, w18, #0x3
    1f30:	add	x4, x4, #0xc
    1f34:	add	w28, w28, #0x3
    1f38:	ldr	w0, [x26]
    1f3c:	tbnz	w0, #31, 27a0 <mainSort+0x1ec4>
    1f40:	mov	w3, w2
    1f44:	cmp	w20, w2
    1f48:	b.lt	1fa0 <mainSort+0x16c4>  // b.tstop
    1f4c:	ldr	w6, [x25, x2, lsl #2]
    1f50:	sub	x5, x4, #0x8
    1f54:	add	w0, w6, w22
    1f58:	add	w11, w0, #0x1
    1f5c:	add	w10, w0, #0x2
    1f60:	add	w9, w0, #0x3
    1f64:	add	w12, w0, #0x4
    1f68:	add	w13, w0, #0x5
    1f6c:	add	w14, w0, #0x6
    1f70:	add	w17, w0, #0x7
    1f74:	add	w1, w0, #0x8
    1f78:	str	x1, [sp, #104]
    1f7c:	add	w1, w0, #0x9
    1f80:	str	x1, [sp, #112]
    1f84:	add	w1, w0, #0xa
    1f88:	str	x1, [sp, #136]
    1f8c:	add	w1, w0, #0xb
    1f90:	str	x1, [sp, #144]
    1f94:	b	dc8 <mainSort+0x4ec>
    1f98:	mov	w8, w3
    1f9c:	b	1f24 <mainSort+0x1648>
    1fa0:	ldr	x0, [sp, #160]
    1fa4:	sub	x0, x0, #0x1
    1fa8:	str	x0, [sp, #160]
    1fac:	tbnz	w0, #31, 1ff8 <mainSort+0x171c>
    1fb0:	ldr	x0, [sp, #208]
    1fb4:	ldr	x1, [sp, #160]
    1fb8:	ldr	w26, [x0, x1, lsl #2]
    1fbc:	ldr	w0, [sp, #172]
    1fc0:	add	w19, w0, w26
    1fc4:	sxtw	x2, w19
    1fc8:	add	w18, w19, #0x2
    1fcc:	sxtw	x30, w26
    1fd0:	ldr	x0, [sp, #216]
    1fd4:	add	x4, x25, x0
    1fd8:	add	w28, w19, #0x1
    1fdc:	neg	w0, w26
    1fe0:	sbfiz	x27, x0, #2, #32
    1fe4:	ldr	w20, [sp, #224]
    1fe8:	ldr	w22, [sp, #192]
    1fec:	mov	w21, w26
    1ff0:	ldr	x26, [sp, #200]
    1ff4:	b	1f40 <mainSort+0x1664>
    1ff8:	ldr	x0, [sp, #200]
    1ffc:	ldr	w0, [x0]
    2000:	tbnz	w0, #31, 27a0 <mainSort+0x1ec4>
    2004:	ldr	w0, [sp, #196]
    2008:	cmp	w0, #0x0
    200c:	b.le	2404 <mainSort+0x1b28>
    2010:	ldr	w0, [sp, #196]
    2014:	cmp	w0, #0x61
    2018:	b.le	2024 <mainSort+0x1748>
    201c:	mov	w0, #0x3e9                 	// #1001
    2020:	bl	0 <BZ2_bz__AssertH__fail>
    2024:	ldr	w14, [sp, #196]
    2028:	sub	w0, w14, #0x1
    202c:	str	w0, [sp, #196]
    2030:	sxtw	x0, w0
    2034:	add	x1, sp, #0x140
    2038:	ldr	w2, [x1, x0, lsl #2]
    203c:	str	w2, [sp, #172]
    2040:	add	x1, sp, #0x2d0
    2044:	ldr	w30, [x1, x0, lsl #2]
    2048:	add	x1, sp, #0x460
    204c:	ldr	w0, [x1, x0, lsl #2]
    2050:	str	w0, [sp, #192]
    2054:	sub	w2, w30, w2
    2058:	cmp	w2, #0x13
    205c:	ccmp	w0, #0xe, #0x0, gt
    2060:	b.le	20d4 <mainSort+0x17f8>
    2064:	add	w2, w2, #0x1
    2068:	cmp	w2, #0x1
    206c:	b.le	1ff8 <mainSort+0x171c>
    2070:	mov	x0, #0x0                   	// #0
    2074:	adrp	x3, 0 <fallbackSort>
    2078:	add	x3, x3, #0x0
    207c:	mov	w4, w0
    2080:	add	x0, x0, #0x1
    2084:	ldr	w1, [x3, x0, lsl #2]
    2088:	cmp	w2, w1
    208c:	b.gt	207c <mainSort+0x17a0>
    2090:	tbnz	w4, #31, 1ff8 <mainSort+0x171c>
    2094:	sxtw	x0, w4
    2098:	str	x0, [sp, #160]
    209c:	adrp	x0, 0 <fallbackSort>
    20a0:	add	x0, x0, #0x0
    20a4:	str	x0, [sp, #208]
    20a8:	ldrsw	x0, [sp, #172]
    20ac:	add	x0, x0, #0x2
    20b0:	lsl	x0, x0, #2
    20b4:	str	x0, [sp, #216]
    20b8:	ldr	w23, [sp, #192]
    20bc:	add	x0, x25, #0x4
    20c0:	str	x0, [sp, #120]
    20c4:	add	x0, x25, #0x8
    20c8:	str	x0, [sp, #128]
    20cc:	str	w30, [sp, #224]
    20d0:	b	1fb0 <mainSort+0x16d4>
    20d4:	ldr	w3, [sp, #172]
    20d8:	sxtw	x15, w3
    20dc:	add	x11, x25, w3, sxtw #2
    20e0:	ldr	w2, [sp, #192]
    20e4:	mov	w8, w2
    20e8:	ldr	w0, [x25, x15, lsl #2]
    20ec:	add	w0, w2, w0
    20f0:	ldrb	w0, [x24, w0, uxtw]
    20f4:	ldr	w1, [x25, w30, sxtw #2]
    20f8:	add	w1, w2, w1
    20fc:	ldrb	w5, [x24, w1, uxtw]
    2100:	add	w1, w3, w30
    2104:	asr	w1, w1, #1
    2108:	ldr	w1, [x25, w1, sxtw #2]
    210c:	add	w1, w2, w1
    2110:	ldrb	w1, [x24, w1, uxtw]
    2114:	cmp	w0, w5
    2118:	ldr	w2, [sp, #256]
    211c:	csel	w3, w2, w0, ls  // ls = plast
    2120:	csel	w2, w0, w5, ls  // ls = plast
    2124:	csel	w5, w5, w0, ls  // ls = plast
    2128:	str	w3, [sp, #256]
    212c:	cmp	w1, w5
    2130:	b.cs	2140 <mainSort+0x1864>  // b.hs, b.nlast
    2134:	cmp	w2, w1
    2138:	csel	w5, w2, w1, hi  // hi = pmore
    213c:	and	w5, w5, #0xff
    2140:	ldr	w9, [sp, #172]
    2144:	mov	w10, w9
    2148:	mov	x12, x11
    214c:	mov	w7, w30
    2150:	mov	w2, w30
    2154:	b	21e4 <mainSort+0x1908>
    2158:	sxtw	x0, w9
    215c:	ldr	w3, [x25, x0, lsl #2]
    2160:	str	w3, [x11]
    2164:	str	w1, [x25, x0, lsl #2]
    2168:	add	w9, w9, #0x1
    216c:	b	21dc <mainSort+0x1900>
    2170:	sxtw	x0, w7
    2174:	ldr	w2, [x25, x0, lsl #2]
    2178:	str	w2, [x3]
    217c:	str	w4, [x25, x0, lsl #2]
    2180:	sub	w7, w7, #0x1
    2184:	sub	w2, w1, #0x1
    2188:	sub	x3, x3, #0x4
    218c:	sub	w1, w1, #0x1
    2190:	cmp	w6, w2
    2194:	b.gt	221c <mainSort+0x1940>
    2198:	mov	w2, w1
    219c:	ldr	w4, [x3]
    21a0:	add	w0, w8, w4
    21a4:	ldrb	w0, [x24, w0, uxtw]
    21a8:	subs	w0, w0, w5
    21ac:	b.eq	2170 <mainSort+0x1894>  // b.none
    21b0:	tbnz	w0, #31, 21bc <mainSort+0x18e0>
    21b4:	sub	w2, w1, #0x1
    21b8:	b	2188 <mainSort+0x18ac>
    21bc:	cmp	w6, w1
    21c0:	b.gt	221c <mainSort+0x1940>
    21c4:	ldr	w1, [x13]
    21c8:	sxtw	x0, w2
    21cc:	ldr	w3, [x25, x0, lsl #2]
    21d0:	str	w3, [x13]
    21d4:	str	w1, [x25, x0, lsl #2]
    21d8:	sub	w2, w2, #0x1
    21dc:	add	w10, w10, #0x1
    21e0:	add	x11, x11, #0x4
    21e4:	mov	w6, w10
    21e8:	cmp	w10, w2
    21ec:	b.gt	221c <mainSort+0x1940>
    21f0:	mov	x13, x11
    21f4:	ldr	w1, [x11]
    21f8:	add	w0, w8, w1
    21fc:	ldrb	w0, [x24, w0, uxtw]
    2200:	subs	w0, w0, w5
    2204:	b.eq	2158 <mainSort+0x187c>  // b.none
    2208:	cmp	w0, #0x0
    220c:	b.le	21dc <mainSort+0x1900>
    2210:	add	x3, x25, w2, sxtw #2
    2214:	mov	w1, w2
    2218:	b	2198 <mainSort+0x18bc>
    221c:	cmp	w9, w7
    2220:	b.le	2240 <mainSort+0x1964>
    2224:	ldr	w0, [sp, #192]
    2228:	add	w1, w0, #0x1
    222c:	add	x0, sp, #0x460
    2230:	ldr	w2, [sp, #196]
    2234:	str	w1, [x0, w2, sxtw #2]
    2238:	str	w14, [sp, #196]
    223c:	b	2004 <mainSort+0x1728>
    2240:	sub	w0, w6, w9
    2244:	ldr	w1, [sp, #172]
    2248:	sub	w1, w9, w1
    224c:	cmp	w0, w1
    2250:	csel	w0, w0, w1, le
    2254:	sub	w1, w6, w0
    2258:	cmp	w0, #0x0
    225c:	b.le	2294 <mainSort+0x19b8>
    2260:	sub	w0, w0, #0x1
    2264:	add	x0, x0, x15
    2268:	add	x3, x25, #0x4
    226c:	add	x0, x3, x0, lsl #2
    2270:	sxtw	x1, w1
    2274:	sub	x15, x1, x15
    2278:	ldr	w1, [x12]
    227c:	ldr	w3, [x12, x15, lsl #2]
    2280:	str	w3, [x12]
    2284:	str	w1, [x12, x15, lsl #2]
    2288:	add	x12, x12, #0x4
    228c:	cmp	x12, x0
    2290:	b.ne	2278 <mainSort+0x199c>  // b.any
    2294:	sub	w2, w7, w2
    2298:	sub	w0, w30, w7
    229c:	cmp	w0, w2
    22a0:	csel	w0, w0, w2, le
    22a4:	sub	w1, w30, w0
    22a8:	cmp	w0, #0x0
    22ac:	b.le	22f0 <mainSort+0x1a14>
    22b0:	sxtw	x4, w6
    22b4:	add	x3, x25, w6, sxtw #2
    22b8:	sub	w0, w0, #0x1
    22bc:	add	x0, x0, x4
    22c0:	add	x5, x25, #0x4
    22c4:	add	x0, x5, x0, lsl #2
    22c8:	sxtw	x1, w1
    22cc:	sub	x4, x1, x4
    22d0:	mov	x1, x3
    22d4:	ldr	w5, [x1], #4
    22d8:	ldr	w7, [x1, x4, lsl #2]
    22dc:	str	w7, [x3]
    22e0:	str	w5, [x1, x4, lsl #2]
    22e4:	mov	x3, x1
    22e8:	cmp	x1, x0
    22ec:	b.ne	22d0 <mainSort+0x19f4>  // b.any
    22f0:	ldr	w4, [sp, #172]
    22f4:	add	w0, w4, w6
    22f8:	sub	w0, w0, w9
    22fc:	sub	w3, w0, #0x1
    2300:	sub	w2, w30, w2
    2304:	add	w1, w2, #0x1
    2308:	ldr	w5, [sp, #192]
    230c:	add	w7, w5, #0x1
    2310:	mov	w6, w4
    2314:	sub	w5, w3, w4
    2318:	sub	w4, w30, w1
    231c:	cmp	w5, w4
    2320:	b.ge	2338 <mainSort+0x1a5c>  // b.tcont
    2324:	mov	w4, w3
    2328:	mov	w3, w30
    232c:	mov	w30, w4
    2330:	str	w1, [sp, #172]
    2334:	mov	w1, w6
    2338:	sub	w5, w30, w1
    233c:	sub	w4, w2, w0
    2340:	ldr	w8, [sp, #192]
    2344:	mov	w6, w8
    2348:	cmp	w5, w4
    234c:	b.ge	2370 <mainSort+0x1a94>  // b.tcont
    2350:	mov	w6, w7
    2354:	mov	w7, w8
    2358:	mov	w4, w30
    235c:	mov	w30, w2
    2360:	mov	w2, w4
    2364:	mov	w4, w1
    2368:	mov	w1, w0
    236c:	mov	w0, w4
    2370:	ldr	w8, [sp, #172]
    2374:	sub	w4, w3, w8
    2378:	sub	w5, w30, w1
    237c:	cmp	w4, w5
    2380:	b.ge	23a4 <mainSort+0x1ac8>  // b.tcont
    2384:	ldr	w4, [sp, #192]
    2388:	str	w6, [sp, #192]
    238c:	mov	w6, w4
    2390:	mov	w4, w3
    2394:	mov	w3, w30
    2398:	mov	w30, w4
    239c:	str	w1, [sp, #172]
    23a0:	mov	w1, w8
    23a4:	ldrsw	x4, [sp, #196]
    23a8:	add	x5, sp, #0x140
    23ac:	ldr	w8, [sp, #172]
    23b0:	str	w8, [x5, x4, lsl #2]
    23b4:	add	x5, sp, #0x2d0
    23b8:	str	w3, [x5, x4, lsl #2]
    23bc:	add	x3, sp, #0x460
    23c0:	ldr	w5, [sp, #192]
    23c4:	str	w5, [x3, x4, lsl #2]
    23c8:	sxtw	x4, w14
    23cc:	add	x5, sp, #0x140
    23d0:	str	w1, [x5, x4, lsl #2]
    23d4:	add	x1, sp, #0x2d0
    23d8:	str	w30, [x1, x4, lsl #2]
    23dc:	str	w6, [x3, x4, lsl #2]
    23e0:	add	w1, w14, #0x1
    23e4:	sxtw	x1, w1
    23e8:	str	w0, [x5, x1, lsl #2]
    23ec:	add	x0, sp, #0x2d0
    23f0:	str	w2, [x0, x1, lsl #2]
    23f4:	str	w7, [x3, x1, lsl #2]
    23f8:	add	w0, w14, #0x2
    23fc:	str	w0, [sp, #196]
    2400:	b	2004 <mainSort+0x1728>
    2404:	mov	x19, x24
    2408:	mov	x24, x25
    240c:	ldr	w0, [sp, #236]
    2410:	ldr	w1, [sp, #232]
    2414:	sub	w0, w0, w1
    2418:	add	w0, w0, #0x1
    241c:	ldr	w1, [sp, #244]
    2420:	add	w0, w1, w0
    2424:	str	w0, [sp, #244]
    2428:	ldr	x0, [sp, #200]
    242c:	ldr	w0, [x0]
    2430:	tbnz	w0, #31, 27a0 <mainSort+0x1ec4>
    2434:	ldr	x1, [sp, #176]
    2438:	ldr	x2, [sp, #184]
    243c:	ldr	w0, [x1, x2, lsl #2]
    2440:	orr	w0, w0, #0x200000
    2444:	str	w0, [x1, x2, lsl #2]
    2448:	ldr	w0, [sp, #168]
    244c:	add	w0, w0, #0x1
    2450:	str	w0, [sp, #168]
    2454:	cmp	w0, #0x100
    2458:	b.eq	24e4 <mainSort+0x1c08>  // b.none
    245c:	ldr	w1, [sp, #228]
    2460:	ldr	w0, [sp, #168]
    2464:	cmp	w1, w0
    2468:	b.eq	2448 <mainSort+0x1b6c>  // b.none
    246c:	ldr	w1, [sp, #240]
    2470:	add	w0, w1, w0
    2474:	sxtw	x1, w0
    2478:	str	x1, [sp, #184]
    247c:	sbfiz	x0, x0, #2, #32
    2480:	ldr	x2, [sp, #176]
    2484:	ldr	w1, [x2, x1, lsl #2]
    2488:	tbnz	w1, #21, 2434 <mainSort+0x1b58>
    248c:	and	w1, w1, #0xffdfffff
    2490:	str	w1, [sp, #232]
    2494:	add	x0, x2, x0
    2498:	ldr	w0, [x0, #4]
    249c:	and	w0, w0, #0xffdfffff
    24a0:	sub	w0, w0, #0x1
    24a4:	str	w0, [sp, #236]
    24a8:	cmp	w1, w0
    24ac:	b.ge	2434 <mainSort+0x1b58>  // b.tcont
    24b0:	ldr	w0, [sp, #248]
    24b4:	cmp	w0, #0x3
    24b8:	b.gt	d68 <mainSort+0x48c>
    24bc:	ldr	w0, [sp, #232]
    24c0:	str	w0, [sp, #320]
    24c4:	ldr	w0, [sp, #236]
    24c8:	str	w0, [sp, #720]
    24cc:	mov	w0, #0x2                   	// #2
    24d0:	str	w0, [sp, #1120]
    24d4:	ldr	w14, [sp, #252]
    24d8:	mov	x25, x24
    24dc:	mov	x24, x19
    24e0:	b	2028 <mainSort+0x174c>
    24e4:	add	x0, sp, #0xdf0
    24e8:	ldr	w1, [sp, #228]
    24ec:	ldrb	w0, [x0, w1, sxtw]
    24f0:	cbnz	w0, 2588 <mainSort+0x1cac>
    24f4:	ldr	w0, [sp, #228]
    24f8:	sbfiz	x21, x0, #2, #32
    24fc:	ldr	x0, [sp, #176]
    2500:	add	x23, x0, x21
    2504:	mov	x3, x23
    2508:	mov	x2, #0x1                   	// #1
    250c:	lsl	x0, x2, #2
    2510:	add	x1, sp, #0x9f0
    2514:	add	x4, x0, x1
    2518:	ldr	w1, [x3]
    251c:	and	w1, w1, #0xffdfffff
    2520:	stur	w1, [x4, #-4]
    2524:	add	x1, sp, #0x5f0
    2528:	add	x1, x0, x1
    252c:	ldr	w0, [x3, #4]
    2530:	and	w0, w0, #0xffdfffff
    2534:	sub	w0, w0, #0x1
    2538:	stur	w0, [x1, #-4]
    253c:	add	x2, x2, #0x1
    2540:	add	x3, x3, #0x400
    2544:	cmp	x2, #0x101
    2548:	b.ne	250c <mainSort+0x1c30>  // b.any
    254c:	ldrsw	x20, [sp, #240]
    2550:	ldr	x0, [sp, #176]
    2554:	ldr	w1, [x0, x20, lsl #2]
    2558:	and	w1, w1, #0xffdfffff
    255c:	add	x0, sp, #0x9f0
    2560:	ldr	w2, [sp, #228]
    2564:	ldr	w3, [x0, w2, sxtw #2]
    2568:	cmp	w1, w3
    256c:	b.ge	25d8 <mainSort+0x1cfc>  // b.tcont
    2570:	sxtw	x1, w1
    2574:	add	x6, sp, #0xdf0
    2578:	mov	x4, x0
    257c:	sbfiz	x5, x2, #2, #32
    2580:	ldr	w7, [sp, #284]
    2584:	b	25a4 <mainSort+0x1cc8>
    2588:	mov	w0, #0x3ee                 	// #1006
    258c:	bl	0 <BZ2_bz__AssertH__fail>
    2590:	b	24f4 <mainSort+0x1c18>
    2594:	ldr	w3, [x4, x5]
    2598:	add	x1, x1, #0x1
    259c:	cmp	w3, w1
    25a0:	b.le	25d8 <mainSort+0x1cfc>
    25a4:	ldr	w0, [x24, x1, lsl #2]
    25a8:	subs	w0, w0, #0x1
    25ac:	add	w2, w0, w7
    25b0:	csel	w0, w2, w0, mi  // mi = first
    25b4:	ldrb	w2, [x19, w0, sxtw]
    25b8:	ldrb	w3, [x6, w2, sxtw]
    25bc:	cbnz	w3, 2594 <mainSort+0x1cb8>
    25c0:	sxtw	x2, w2
    25c4:	ldr	w3, [x4, x2, lsl #2]
    25c8:	add	w8, w3, #0x1
    25cc:	str	w8, [x4, x2, lsl #2]
    25d0:	str	w0, [x24, w3, sxtw #2]
    25d4:	b	2594 <mainSort+0x1cb8>
    25d8:	ldr	w2, [sp, #228]
    25dc:	add	w22, w2, #0x1
    25e0:	lsl	w22, w22, #8
    25e4:	sxtw	x22, w22
    25e8:	ldr	x0, [sp, #176]
    25ec:	ldr	w1, [x0, x22, lsl #2]
    25f0:	and	w1, w1, #0xffdfffff
    25f4:	sub	w1, w1, #0x1
    25f8:	add	x0, sp, #0x5f0
    25fc:	ldr	w0, [x0, w2, sxtw #2]
    2600:	cmp	w1, w0
    2604:	b.le	2664 <mainSort+0x1d88>
    2608:	sxtw	x1, w1
    260c:	add	x7, sp, #0xdf0
    2610:	add	x4, sp, #0x5f0
    2614:	sbfiz	x6, x2, #2, #32
    2618:	ldr	w8, [sp, #284]
    261c:	b	2630 <mainSort+0x1d54>
    2620:	ldr	w0, [x4, x6]
    2624:	sub	x1, x1, #0x1
    2628:	cmp	w0, w1
    262c:	b.ge	2664 <mainSort+0x1d88>  // b.tcont
    2630:	ldr	w0, [x24, x1, lsl #2]
    2634:	subs	w0, w0, #0x1
    2638:	add	w2, w0, w8
    263c:	csel	w0, w2, w0, mi  // mi = first
    2640:	ldrb	w2, [x19, w0, sxtw]
    2644:	ldrb	w5, [x7, w2, sxtw]
    2648:	cbnz	w5, 2620 <mainSort+0x1d44>
    264c:	sxtw	x2, w2
    2650:	ldr	w5, [x4, x2, lsl #2]
    2654:	sub	w9, w5, #0x1
    2658:	str	w9, [x4, x2, lsl #2]
    265c:	str	w0, [x24, w5, sxtw #2]
    2660:	b	2620 <mainSort+0x1d44>
    2664:	sub	w1, w3, #0x1
    2668:	cmp	w1, w0
    266c:	b.eq	2688 <mainSort+0x1dac>  // b.none
    2670:	cmp	w3, #0x0
    2674:	ldr	w1, [sp, #308]
    2678:	ccmp	w1, w0, #0x0, eq  // eq = none
    267c:	b.eq	2688 <mainSort+0x1dac>  // b.none
    2680:	mov	w0, #0x3ef                 	// #1007
    2684:	bl	0 <BZ2_bz__AssertH__fail>
    2688:	ldr	x0, [sp, #312]
    268c:	add	x0, x0, #0x40, lsl #12
    2690:	add	x21, x0, x21
    2694:	ldr	w0, [x23]
    2698:	orr	w0, w0, #0x200000
    269c:	str	w0, [x23]
    26a0:	add	x23, x23, #0x400
    26a4:	cmp	x23, x21
    26a8:	b.ne	2694 <mainSort+0x1db8>  // b.any
    26ac:	add	x0, sp, #0xdf0
    26b0:	mov	w1, #0x1                   	// #1
    26b4:	ldr	w2, [sp, #228]
    26b8:	strb	w1, [x0, w2, sxtw]
    26bc:	ldr	w0, [sp, #296]
    26c0:	cmp	w0, #0xfe
    26c4:	b.gt	2784 <mainSort+0x1ea8>
    26c8:	ldr	x0, [sp, #176]
    26cc:	ldr	w5, [x0, x20, lsl #2]
    26d0:	and	w5, w5, #0xffdfffff
    26d4:	ldr	w0, [x0, x22, lsl #2]
    26d8:	and	w0, w0, #0xffdfffff
    26dc:	sub	w0, w0, w5
    26e0:	mov	w1, #0xfffe                	// #65534
    26e4:	cmp	w0, w1
    26e8:	b.le	271c <mainSort+0x1e40>
    26ec:	mov	w3, #0x0                   	// #0
    26f0:	mov	w2, w1
    26f4:	add	w3, w3, #0x1
    26f8:	asr	w1, w0, w3
    26fc:	cmp	w1, w2
    2700:	b.gt	26f4 <mainSort+0x1e18>
    2704:	sub	w4, w0, #0x1
    2708:	sxtw	x0, w4
    270c:	add	x5, x24, w5, sxtw #2
    2710:	ldr	x6, [sp, #288]
    2714:	ldr	w7, [sp, #284]
    2718:	b	2734 <mainSort+0x1e58>
    271c:	subs	w4, w0, #0x1
    2720:	b.mi	2768 <mainSort+0x1e8c>  // b.first
    2724:	mov	w3, #0x0                   	// #0
    2728:	b	2708 <mainSort+0x1e2c>
    272c:	sub	x0, x0, #0x1
    2730:	tbnz	w0, #31, 2758 <mainSort+0x1e7c>
    2734:	ldr	w1, [x5, x0, lsl #2]
    2738:	asr	w2, w0, w3
    273c:	and	w2, w2, #0xffff
    2740:	strh	w2, [x6, w1, sxtw #1]
    2744:	cmp	w1, #0x21
    2748:	b.gt	272c <mainSort+0x1e50>
    274c:	add	w1, w7, w1
    2750:	strh	w2, [x6, w1, sxtw #1]
    2754:	b	272c <mainSort+0x1e50>
    2758:	asr	w0, w4, w3
    275c:	mov	w1, #0xffff                	// #65535
    2760:	cmp	w0, w1
    2764:	b.gt	2778 <mainSort+0x1e9c>
    2768:	ldr	x0, [sp, #296]
    276c:	add	x0, x0, #0x1
    2770:	str	x0, [sp, #296]
    2774:	b	d48 <mainSort+0x46c>
    2778:	mov	w0, #0x3ea                 	// #1002
    277c:	bl	0 <BZ2_bz__AssertH__fail>
    2780:	b	2768 <mainSort+0x1e8c>
    2784:	ldr	w0, [sp, #296]
    2788:	add	w0, w0, #0x1
    278c:	cmp	w0, #0xff
    2790:	b.le	2768 <mainSort+0x1e8c>
    2794:	ldr	w0, [sp, #248]
    2798:	cmp	w0, #0x3
    279c:	b.gt	27c4 <mainSort+0x1ee8>
    27a0:	ldp	x19, x20, [sp, #16]
    27a4:	ldp	x21, x22, [sp, #32]
    27a8:	ldp	x23, x24, [sp, #48]
    27ac:	ldp	x25, x26, [sp, #64]
    27b0:	ldp	x27, x28, [sp, #80]
    27b4:	ldp	x29, x30, [sp]
    27b8:	mov	x12, #0x12f0                	// #4848
    27bc:	add	sp, sp, x12
    27c0:	ret
    27c4:	ldr	w0, [sp, #284]
    27c8:	ldr	w1, [sp, #244]
    27cc:	sub	w4, w0, w1
    27d0:	mov	w3, w1
    27d4:	mov	w2, w0
    27d8:	adrp	x1, 0 <fallbackSort>
    27dc:	add	x1, x1, #0x0
    27e0:	adrp	x0, 0 <stderr>
    27e4:	ldr	x0, [x0]
    27e8:	bl	0 <fprintf>
    27ec:	b	27a0 <mainSort+0x1ec4>

00000000000027f0 <BZ2_blockSort>:
    27f0:	stp	x29, x30, [sp, #-80]!
    27f4:	mov	x29, sp
    27f8:	stp	x19, x20, [sp, #16]
    27fc:	stp	x21, x22, [sp, #32]
    2800:	stp	x23, x24, [sp, #48]
    2804:	mov	x19, x0
    2808:	ldr	x21, [x0, #56]
    280c:	ldr	x24, [x0, #40]
    2810:	ldr	w22, [x0, #108]
    2814:	ldr	w23, [x0, #656]
    2818:	mov	w0, #0x270f                	// #9999
    281c:	cmp	w22, w0
    2820:	b.le	28e8 <BZ2_blockSort+0xf8>
    2824:	and	w2, w22, #0x1
    2828:	add	w2, w2, w22
    282c:	add	w2, w2, #0x22
    2830:	ldr	x1, [x19, #64]
    2834:	ldr	w0, [x19, #88]
    2838:	cmp	w0, #0x64
    283c:	mov	w3, #0x64                  	// #100
    2840:	csel	w0, w0, w3, le
    2844:	cmp	w0, #0x0
    2848:	csinc	w0, w0, wzr, gt
    284c:	sub	w0, w0, #0x1
    2850:	mov	w20, #0x5556                	// #21846
    2854:	movk	w20, #0x5555, lsl #16
    2858:	smull	x20, w0, w20
    285c:	lsr	x20, x20, #32
    2860:	sub	w0, w20, w0, asr #31
    2864:	mul	w20, w0, w22
    2868:	str	w20, [sp, #76]
    286c:	add	x6, sp, #0x4c
    2870:	mov	w5, w23
    2874:	mov	w4, w22
    2878:	mov	x3, x24
    287c:	add	x2, x1, w2, sxtw
    2880:	mov	x0, x21
    2884:	bl	8dc <mainSort>
    2888:	cmp	w23, #0x2
    288c:	b.le	2938 <BZ2_blockSort+0x148>
    2890:	ldr	w2, [sp, #76]
    2894:	sub	w2, w20, w2
    2898:	scvtf	s0, w2
    289c:	scvtf	s1, w22
    28a0:	fdiv	s0, s0, s1
    28a4:	fcvt	d0, s0
    28a8:	mov	w3, w22
    28ac:	adrp	x1, 0 <fallbackSort>
    28b0:	add	x1, x1, #0x0
    28b4:	adrp	x0, 0 <stderr>
    28b8:	ldr	x0, [x0]
    28bc:	bl	0 <fprintf>
    28c0:	ldr	w0, [sp, #76]
    28c4:	tbz	w0, #31, 2900 <BZ2_blockSort+0x110>
    28c8:	adrp	x0, 0 <stderr>
    28cc:	ldr	x3, [x0]
    28d0:	mov	x2, #0x35                  	// #53
    28d4:	mov	x1, #0x1                   	// #1
    28d8:	adrp	x0, 0 <fallbackSort>
    28dc:	add	x0, x0, #0x0
    28e0:	bl	0 <fwrite>
    28e4:	b	2948 <BZ2_blockSort+0x158>
    28e8:	mov	w4, w23
    28ec:	mov	w3, w22
    28f0:	mov	x2, x24
    28f4:	ldr	x1, [x19, #32]
    28f8:	ldr	x0, [x19, #24]
    28fc:	bl	0 <fallbackSort>
    2900:	mov	w0, #0xffffffff            	// #-1
    2904:	str	w0, [x19, #48]
    2908:	ldr	w3, [x19, #108]
    290c:	cmp	w3, #0x0
    2910:	b.le	292c <BZ2_blockSort+0x13c>
    2914:	mov	x1, #0x0                   	// #0
    2918:	ldr	w2, [x21, x1, lsl #2]
    291c:	cbz	w2, 2964 <BZ2_blockSort+0x174>
    2920:	add	x1, x1, #0x1
    2924:	cmp	w3, w1
    2928:	b.gt	2918 <BZ2_blockSort+0x128>
    292c:	mov	w0, #0x3eb                 	// #1003
    2930:	bl	0 <BZ2_bz__AssertH__fail>
    2934:	b	2970 <BZ2_blockSort+0x180>
    2938:	ldr	w0, [sp, #76]
    293c:	tbz	w0, #31, 2900 <BZ2_blockSort+0x110>
    2940:	cmp	w23, #0x2
    2944:	b.eq	28c8 <BZ2_blockSort+0xd8>  // b.none
    2948:	mov	w4, w23
    294c:	mov	w3, w22
    2950:	mov	x2, x24
    2954:	ldr	x1, [x19, #32]
    2958:	ldr	x0, [x19, #24]
    295c:	bl	0 <fallbackSort>
    2960:	b	2900 <BZ2_blockSort+0x110>
    2964:	str	w1, [x19, #48]
    2968:	cmn	w1, #0x1
    296c:	b.eq	292c <BZ2_blockSort+0x13c>  // b.none
    2970:	ldp	x19, x20, [sp, #16]
    2974:	ldp	x21, x22, [sp, #32]
    2978:	ldp	x23, x24, [sp, #48]
    297c:	ldp	x29, x30, [sp], #80
    2980:	ret

huffman.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_hbMakeCodeLengths>:
   0:	mov	x12, #0x1490                	// #5264
   4:	sub	sp, sp, x12
   8:	stp	x29, x30, [sp]
   c:	mov	x29, sp
  10:	stp	x19, x20, [sp, #16]
  14:	stp	x21, x22, [sp, #32]
  18:	stp	x23, x24, [sp, #48]
  1c:	stp	x25, x26, [sp, #64]
  20:	str	x27, [sp, #80]
  24:	mov	x21, x0
  28:	mov	w25, w2
  2c:	mov	w22, w3
  30:	cmp	w2, #0x0
  34:	b.le	6c <BZ2_hbMakeCodeLengths+0x6c>
  38:	mov	x4, x1
  3c:	mov	x0, #0x0                   	// #0
  40:	mov	w3, #0x100                 	// #256
  44:	ldr	w2, [x4, x0, lsl #2]
  48:	lsl	w1, w2, #8
  4c:	cmp	w2, #0x0
  50:	csel	w1, w1, w3, ne  // ne = any
  54:	add	x2, sp, #0x870
  58:	add	x2, x2, x0, lsl #2
  5c:	str	w1, [x2, #4]
  60:	add	x0, x0, #0x1
  64:	cmp	w25, w0
  68:	b.gt	44 <BZ2_hbMakeCodeLengths+0x44>
  6c:	cmp	w25, #0x0
  70:	csel	w27, w25, wzr, ge  // ge = tcont
  74:	mov	w26, w25
  78:	sub	w23, w25, #0x1
  7c:	add	x0, sp, #0x870
  80:	add	x24, sp, #0x874
  84:	add	x24, x24, x23, lsl #2
  88:	add	x19, sp, #0x1, lsl #12
  8c:	add	x19, x19, #0x80
  90:	mov	x20, x0
  94:	b	3d4 <BZ2_hbMakeCodeLengths+0x3d4>
  98:	mov	w0, w2
  9c:	str	w1, [x19, w3, sxtw #2]
  a0:	asr	w2, w0, #1
  a4:	ldr	w1, [x19, w2, sxtw #2]
  a8:	mov	w3, w0
  ac:	ldr	w4, [x20, w1, sxtw #2]
  b0:	cmp	w4, w5
  b4:	b.gt	98 <BZ2_hbMakeCodeLengths+0x98>
  b8:	str	w6, [x19, w0, sxtw #2]
  bc:	add	w6, w6, #0x1
  c0:	add	x7, x7, #0x4
  c4:	cmp	w6, w9
  c8:	b.eq	10c <BZ2_hbMakeCodeLengths+0x10c>  // b.none
  cc:	add	x0, sp, #0x60
  d0:	add	x0, x7, x0
  d4:	str	w8, [x0, #4]
  d8:	add	x0, x7, x19
  dc:	str	w6, [x0, #4]
  e0:	add	x0, x7, x20
  e4:	ldr	w5, [x0, #4]
  e8:	asr	w0, w6, #1
  ec:	ldr	w1, [x19, w0, sxtw #2]
  f0:	ldr	w2, [x20, w1, sxtw #2]
  f4:	cmp	w5, w2
  f8:	b.ge	104 <BZ2_hbMakeCodeLengths+0x104>  // b.tcont
  fc:	mov	w3, w6
 100:	b	9c <BZ2_hbMakeCodeLengths+0x9c>
 104:	mov	w0, w6
 108:	b	b8 <BZ2_hbMakeCodeLengths+0xb8>
 10c:	cmp	w25, #0x103
 110:	b.gt	148 <BZ2_hbMakeCodeLengths+0x148>
 114:	cmp	w25, #0x1
 118:	b.le	358 <BZ2_hbMakeCodeLengths+0x358>
 11c:	mov	w12, w27
 120:	sxtw	x7, w25
 124:	sub	w6, w12, #0x2
 128:	add	x5, x19, w12, sxtw #2
 12c:	sub	x5, x5, #0x4
 130:	mov	w3, w12
 134:	mov	w9, #0x1                   	// #1
 138:	mov	w10, #0x2                   	// #2
 13c:	add	x8, sp, #0x60
 140:	mov	w11, #0xffffffff            	// #-1
 144:	b	2ec <BZ2_hbMakeCodeLengths+0x2ec>
 148:	mov	w0, #0x7d1                 	// #2001
 14c:	bl	0 <BZ2_bz__AssertH__fail>
 150:	mov	w12, w25
 154:	b	120 <BZ2_hbMakeCodeLengths+0x120>
 158:	ldr	w1, [x19, w0, sxtw #2]
 15c:	ldr	w4, [x20, w1, sxtw #2]
 160:	cmp	w13, w4
 164:	b.lt	1ac <BZ2_hbMakeCodeLengths+0x1ac>  // b.tstop
 168:	str	w1, [x19, w2, sxtw #2]
 16c:	lsl	w1, w0, #1
 170:	cmp	w3, w0, lsl #1
 174:	b.lt	1a8 <BZ2_hbMakeCodeLengths+0x1a8>  // b.tstop
 178:	mov	w2, w0
 17c:	mov	w0, w1
 180:	cmp	w3, w1
 184:	b.le	158 <BZ2_hbMakeCodeLengths+0x158>
 188:	add	w0, w1, #0x1
 18c:	ldrsw	x4, [x19, w0, sxtw #2]
 190:	ldrsw	x0, [x19, w1, sxtw #2]
 194:	ldr	w4, [x20, x4, lsl #2]
 198:	ldr	w0, [x20, x0, lsl #2]
 19c:	cmp	w4, w0
 1a0:	cinc	w0, w1, lt  // lt = tstop
 1a4:	b	158 <BZ2_hbMakeCodeLengths+0x158>
 1a8:	mov	w2, w0
 1ac:	str	w16, [x19, w2, sxtw #2]
 1b0:	ldr	w17, [sp, #4228]
 1b4:	ldr	w18, [x15]
 1b8:	str	w18, [sp, #4228]
 1bc:	mov	w4, w6
 1c0:	cmp	w6, #0x1
 1c4:	b.le	2ac <BZ2_hbMakeCodeLengths+0x2ac>
 1c8:	ldr	w16, [x20, w18, sxtw #2]
 1cc:	mov	w1, w10
 1d0:	mov	w2, w9
 1d4:	b	204 <BZ2_hbMakeCodeLengths+0x204>
 1d8:	mov	w2, w9
 1dc:	b	1ac <BZ2_hbMakeCodeLengths+0x1ac>
 1e0:	ldr	w1, [x19, w0, sxtw #2]
 1e4:	ldr	w13, [x20, w1, sxtw #2]
 1e8:	cmp	w16, w13
 1ec:	b.lt	234 <BZ2_hbMakeCodeLengths+0x234>  // b.tstop
 1f0:	str	w1, [x19, w2, sxtw #2]
 1f4:	lsl	w1, w0, #1
 1f8:	cmp	w4, w0, lsl #1
 1fc:	b.lt	230 <BZ2_hbMakeCodeLengths+0x230>  // b.tstop
 200:	mov	w2, w0
 204:	mov	w0, w1
 208:	cmp	w4, w1
 20c:	b.le	1e0 <BZ2_hbMakeCodeLengths+0x1e0>
 210:	add	w0, w1, #0x1
 214:	ldrsw	x13, [x19, w0, sxtw #2]
 218:	ldrsw	x0, [x19, w1, sxtw #2]
 21c:	ldr	w13, [x20, x13, lsl #2]
 220:	ldr	w0, [x20, x0, lsl #2]
 224:	cmp	w13, w0
 228:	cinc	w0, w1, lt  // lt = tstop
 22c:	b	1e0 <BZ2_hbMakeCodeLengths+0x1e0>
 230:	mov	w2, w0
 234:	str	w18, [x19, w2, sxtw #2]
 238:	add	w16, w7, #0x1
 23c:	sxtw	x17, w17
 240:	str	w16, [x8, x17, lsl #2]
 244:	sxtw	x14, w14
 248:	str	w16, [x8, x14, lsl #2]
 24c:	ldr	w0, [x20, x14, lsl #2]
 250:	ldr	w1, [x20, x17, lsl #2]
 254:	and	w4, w1, #0xff
 258:	and	w2, w0, #0xff
 25c:	cmp	w2, w1, uxtb
 260:	csel	w4, w4, w2, le
 264:	add	w4, w4, #0x1
 268:	and	w0, w0, #0xffffff00
 26c:	and	w1, w1, #0xffffff00
 270:	add	w0, w0, w1
 274:	orr	w4, w4, w0
 278:	lsl	x0, x7, #2
 27c:	add	x1, x0, x20
 280:	str	w4, [x1, #4]
 284:	add	x0, x0, x8
 288:	str	w11, [x0, #4]
 28c:	str	w16, [x15]
 290:	asr	w0, w3, #1
 294:	ldr	w1, [x19, w0, sxtw #2]
 298:	ldr	w2, [x20, w1, sxtw #2]
 29c:	cmp	w4, w2
 2a0:	b.ge	318 <BZ2_hbMakeCodeLengths+0x318>  // b.tcont
 2a4:	mov	w13, w3
 2a8:	b	2b8 <BZ2_hbMakeCodeLengths+0x2b8>
 2ac:	mov	w2, w9
 2b0:	b	234 <BZ2_hbMakeCodeLengths+0x234>
 2b4:	mov	w0, w2
 2b8:	str	w1, [x19, w13, sxtw #2]
 2bc:	asr	w2, w0, #1
 2c0:	ldr	w1, [x19, w2, sxtw #2]
 2c4:	mov	w13, w0
 2c8:	ldr	w14, [x20, w1, sxtw #2]
 2cc:	cmp	w4, w14
 2d0:	b.lt	2b4 <BZ2_hbMakeCodeLengths+0x2b4>  // b.tstop
 2d4:	str	w16, [x19, w0, sxtw #2]
 2d8:	add	x7, x7, #0x1
 2dc:	sub	w6, w6, #0x1
 2e0:	sub	x5, x5, #0x4
 2e4:	cmp	w3, #0x1
 2e8:	b.le	320 <BZ2_hbMakeCodeLengths+0x320>
 2ec:	ldr	w14, [sp, #4228]
 2f0:	mov	x15, x5
 2f4:	ldr	w16, [x5, #4]
 2f8:	str	w16, [sp, #4228]
 2fc:	sub	w3, w3, #0x1
 300:	cmp	w3, #0x1
 304:	b.le	1d8 <BZ2_hbMakeCodeLengths+0x1d8>
 308:	ldr	w13, [x20, w16, sxtw #2]
 30c:	mov	w1, w10
 310:	mov	w2, w9
 314:	b	17c <BZ2_hbMakeCodeLengths+0x17c>
 318:	mov	w0, w3
 31c:	b	2d4 <BZ2_hbMakeCodeLengths+0x2d4>
 320:	sub	w0, w12, #0x2
 324:	cmp	w12, #0x1
 328:	csel	w0, w0, wzr, gt
 32c:	add	w1, w25, #0x1
 330:	add	w0, w0, w1
 334:	cmp	w0, #0x203
 338:	b.gt	360 <BZ2_hbMakeCodeLengths+0x360>
 33c:	cmp	w25, #0x0
 340:	b.le	400 <BZ2_hbMakeCodeLengths+0x400>
 344:	mov	x3, #0x0                   	// #0
 348:	mov	w4, #0x0                   	// #0
 34c:	add	x2, sp, #0x60
 350:	mov	w5, #0x1                   	// #1
 354:	b	394 <BZ2_hbMakeCodeLengths+0x394>
 358:	mov	w0, w25
 35c:	b	334 <BZ2_hbMakeCodeLengths+0x334>
 360:	mov	w0, #0x7d2                 	// #2002
 364:	bl	0 <BZ2_bz__AssertH__fail>
 368:	b	33c <BZ2_hbMakeCodeLengths+0x33c>
 36c:	add	w1, w1, #0x1
 370:	ldr	w0, [x2, w0, sxtw #2]
 374:	tbz	w0, #31, 36c <BZ2_hbMakeCodeLengths+0x36c>
 378:	strb	w1, [x21, x3]
 37c:	cmp	w22, w1
 380:	csel	w4, w4, w5, ge  // ge = tcont
 384:	add	x0, x3, #0x1
 388:	cmp	x23, x3
 38c:	b.eq	3a8 <BZ2_hbMakeCodeLengths+0x3a8>  // b.none
 390:	mov	x3, x0
 394:	add	x0, x2, x3, lsl #2
 398:	ldr	w0, [x0, #4]
 39c:	mov	w1, #0x0                   	// #0
 3a0:	tbz	w0, #31, 36c <BZ2_hbMakeCodeLengths+0x36c>
 3a4:	b	378 <BZ2_hbMakeCodeLengths+0x378>
 3a8:	cbz	w4, 400 <BZ2_hbMakeCodeLengths+0x400>
 3ac:	add	x1, sp, #0x870
 3b0:	ldr	w0, [x1, #4]
 3b4:	lsr	w2, w0, #31
 3b8:	add	w0, w2, w0, asr #8
 3bc:	asr	w0, w0, #1
 3c0:	add	w0, w0, #0x1
 3c4:	lsl	w0, w0, #8
 3c8:	str	w0, [x1, #4]!
 3cc:	cmp	x1, x24
 3d0:	b.ne	3b0 <BZ2_hbMakeCodeLengths+0x3b0>  // b.any
 3d4:	str	wzr, [sp, #4224]
 3d8:	str	wzr, [sp, #2160]
 3dc:	mov	w0, #0xfffffffe            	// #-2
 3e0:	str	w0, [sp, #96]
 3e4:	cmp	w25, #0x0
 3e8:	b.le	114 <BZ2_hbMakeCodeLengths+0x114>
 3ec:	add	w9, w26, #0x1
 3f0:	mov	x7, #0x0                   	// #0
 3f4:	mov	w6, #0x1                   	// #1
 3f8:	mov	w8, #0xffffffff            	// #-1
 3fc:	b	cc <BZ2_hbMakeCodeLengths+0xcc>
 400:	ldp	x19, x20, [sp, #16]
 404:	ldp	x21, x22, [sp, #32]
 408:	ldp	x23, x24, [sp, #48]
 40c:	ldp	x25, x26, [sp, #64]
 410:	ldr	x27, [sp, #80]
 414:	ldp	x29, x30, [sp]
 418:	mov	x12, #0x1490                	// #5264
 41c:	add	sp, sp, x12
 420:	ret

0000000000000424 <BZ2_hbAssignCodes>:
 424:	cmp	w2, w3
 428:	b.gt	47c <BZ2_hbAssignCodes+0x58>
 42c:	add	w7, w3, #0x1
 430:	mov	w6, #0x0                   	// #0
 434:	b	46c <BZ2_hbAssignCodes+0x48>
 438:	add	x3, x3, #0x1
 43c:	cmp	w4, w3
 440:	b.le	45c <BZ2_hbAssignCodes+0x38>
 444:	ldrb	w5, [x1, x3]
 448:	cmp	w5, w2
 44c:	b.ne	438 <BZ2_hbAssignCodes+0x14>  // b.any
 450:	str	w6, [x0, x3, lsl #2]
 454:	add	w6, w6, #0x1
 458:	b	438 <BZ2_hbAssignCodes+0x14>
 45c:	lsl	w6, w6, #1
 460:	add	w2, w2, #0x1
 464:	cmp	w7, w2
 468:	b.eq	47c <BZ2_hbAssignCodes+0x58>  // b.none
 46c:	mov	x3, #0x0                   	// #0
 470:	cmp	w4, #0x0
 474:	b.gt	444 <BZ2_hbAssignCodes+0x20>
 478:	b	45c <BZ2_hbAssignCodes+0x38>
 47c:	ret

0000000000000480 <BZ2_hbCreateDecodeTables>:
 480:	cmp	w4, w5
 484:	b.gt	4d8 <BZ2_hbCreateDecodeTables+0x58>
 488:	add	w11, w5, #0x1
 48c:	mov	w9, w4
 490:	mov	w10, #0x0                   	// #0
 494:	b	4c8 <BZ2_hbCreateDecodeTables+0x48>
 498:	add	x7, x7, #0x1
 49c:	cmp	w6, w7
 4a0:	b.le	4bc <BZ2_hbCreateDecodeTables+0x3c>
 4a4:	ldrb	w8, [x3, x7]
 4a8:	cmp	w8, w9
 4ac:	b.ne	498 <BZ2_hbCreateDecodeTables+0x18>  // b.any
 4b0:	str	w7, [x2, w10, sxtw #2]
 4b4:	add	w10, w10, #0x1
 4b8:	b	498 <BZ2_hbCreateDecodeTables+0x18>
 4bc:	add	w9, w9, #0x1
 4c0:	cmp	w9, w11
 4c4:	b.eq	4d8 <BZ2_hbCreateDecodeTables+0x58>  // b.none
 4c8:	mov	x7, #0x0                   	// #0
 4cc:	cmp	w6, #0x0
 4d0:	b.gt	4a4 <BZ2_hbCreateDecodeTables+0x24>
 4d4:	b	4bc <BZ2_hbCreateDecodeTables+0x3c>
 4d8:	mov	x2, x1
 4dc:	add	x7, x1, #0x5c
 4e0:	str	wzr, [x2], #4
 4e4:	cmp	x2, x7
 4e8:	b.ne	4e0 <BZ2_hbCreateDecodeTables+0x60>  // b.any
 4ec:	cmp	w6, #0x0
 4f0:	b.le	520 <BZ2_hbCreateDecodeTables+0xa0>
 4f4:	mov	x8, x3
 4f8:	sub	w2, w6, #0x1
 4fc:	add	x3, x3, #0x1
 500:	add	x2, x2, x3
 504:	ldrb	w3, [x8], #1
 508:	add	x3, x3, #0x1
 50c:	ldr	w6, [x1, x3, lsl #2]
 510:	add	w6, w6, #0x1
 514:	str	w6, [x1, x3, lsl #2]
 518:	cmp	x8, x2
 51c:	b.ne	504 <BZ2_hbCreateDecodeTables+0x84>  // b.any
 520:	add	x8, x1, #0x4
 524:	mov	x2, x8
 528:	ldr	w3, [x2]
 52c:	ldur	w6, [x2, #-4]
 530:	add	w3, w3, w6
 534:	str	w3, [x2], #4
 538:	cmp	x2, x7
 53c:	b.ne	528 <BZ2_hbCreateDecodeTables+0xa8>  // b.any
 540:	mov	x2, x0
 544:	add	x3, x0, #0x5c
 548:	str	wzr, [x2], #4
 54c:	cmp	x3, x2
 550:	b.ne	548 <BZ2_hbCreateDecodeTables+0xc8>  // b.any
 554:	cmp	w4, w5
 558:	b.gt	58c <BZ2_hbCreateDecodeTables+0x10c>
 55c:	sxtw	x2, w4
 560:	mov	w3, #0x0                   	// #0
 564:	ldr	w6, [x8, x2, lsl #2]
 568:	ldr	w7, [x1, x2, lsl #2]
 56c:	sub	w6, w6, w7
 570:	add	w3, w6, w3
 574:	sub	w6, w3, #0x1
 578:	str	w6, [x0, x2, lsl #2]
 57c:	lsl	w3, w3, #1
 580:	add	x2, x2, #0x1
 584:	cmp	w5, w2
 588:	b.ge	564 <BZ2_hbCreateDecodeTables+0xe4>  // b.tcont
 58c:	add	w2, w4, #0x1
 590:	cmp	w5, w2
 594:	b.lt	5c4 <BZ2_hbCreateDecodeTables+0x144>  // b.tstop
 598:	sxtw	x2, w2
 59c:	sub	x3, x0, #0x4
 5a0:	ldr	w0, [x3, x2, lsl #2]
 5a4:	add	w0, w0, #0x1
 5a8:	lsl	w0, w0, #1
 5ac:	ldr	w4, [x1, x2, lsl #2]
 5b0:	sub	w0, w0, w4
 5b4:	str	w0, [x1, x2, lsl #2]
 5b8:	add	x2, x2, #0x1
 5bc:	cmp	w5, w2
 5c0:	b.ge	5a0 <BZ2_hbCreateDecodeTables+0x120>  // b.tcont
 5c4:	ret

crctable.o:     file format elf64-littleaarch64


randtable.o:     file format elf64-littleaarch64


compress.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <bsFinishWrite>:
       0:	ldr	w1, [x0, #644]
       4:	cmp	w1, #0x0
       8:	b.le	48 <bsFinishWrite+0x48>
       c:	ldrsw	x1, [x0, #116]
      10:	ldr	x2, [x0, #80]
      14:	ldrb	w3, [x0, #643]
      18:	strb	w3, [x2, x1]
      1c:	ldr	w1, [x0, #116]
      20:	add	w1, w1, #0x1
      24:	str	w1, [x0, #116]
      28:	ldr	w1, [x0, #640]
      2c:	lsl	w1, w1, #8
      30:	str	w1, [x0, #640]
      34:	ldr	w1, [x0, #644]
      38:	sub	w1, w1, #0x8
      3c:	str	w1, [x0, #644]
      40:	cmp	w1, #0x0
      44:	b.gt	c <bsFinishWrite+0xc>
      48:	ret

000000000000004c <generateMTFValues>:
      4c:	sub	sp, sp, #0x100
      50:	ldr	x9, [x0, #56]
      54:	ldr	x10, [x0, #64]
      58:	ldr	x8, [x0, #72]
      5c:	str	wzr, [x0, #124]
      60:	add	x1, x0, #0x80
      64:	add	x3, x0, #0x180
      68:	b	78 <generateMTFValues+0x2c>
      6c:	add	x1, x1, #0x1
      70:	cmp	x1, x3
      74:	b.eq	94 <generateMTFValues+0x48>  // b.none
      78:	ldrb	w2, [x1]
      7c:	cbz	w2, 6c <generateMTFValues+0x20>
      80:	ldr	w2, [x0, #124]
      84:	strb	w2, [x1, #256]
      88:	add	w2, w2, #0x1
      8c:	str	w2, [x0, #124]
      90:	b	6c <generateMTFValues+0x20>
      94:	ldr	w11, [x0, #124]
      98:	adds	w12, w11, #0x1
      9c:	b.mi	bc <generateMTFValues+0x70>  // b.first
      a0:	add	x1, x0, #0x2a0
      a4:	add	w2, w11, #0x1
      a8:	add	x3, x0, #0x2a4
      ac:	add	x2, x3, x2, lsl #2
      b0:	str	wzr, [x1], #4
      b4:	cmp	x1, x2
      b8:	b.ne	b0 <generateMTFValues+0x64>  // b.any
      bc:	cmp	w11, #0x0
      c0:	b.le	dc <generateMTFValues+0x90>
      c4:	mov	x2, sp
      c8:	mov	w1, #0x0                   	// #0
      cc:	strb	w1, [x2], #1
      d0:	add	w1, w1, #0x1
      d4:	cmp	w11, w1
      d8:	b.ne	cc <generateMTFValues+0x80>  // b.any
      dc:	ldr	w3, [x0, #108]
      e0:	cmp	w3, #0x0
      e4:	b.le	26c <generateMTFValues+0x220>
      e8:	mov	x7, #0x0                   	// #0
      ec:	mov	w6, #0x0                   	// #0
      f0:	mov	w1, #0x0                   	// #0
      f4:	mov	x13, sp
      f8:	mov	w14, #0x1                   	// #1
      fc:	b	114 <generateMTFValues+0xc8>
     100:	add	w1, w1, #0x1
     104:	ldr	w3, [x0, #108]
     108:	add	x7, x7, #0x1
     10c:	cmp	w3, w7
     110:	b.le	204 <generateMTFValues+0x1b8>
     114:	ldr	w2, [x9, x7, lsl #2]
     118:	subs	w2, w2, #0x1
     11c:	add	w3, w2, w3
     120:	csel	w2, w3, w2, mi  // mi = first
     124:	ldrb	w2, [x10, w2, sxtw]
     128:	add	x2, x0, x2
     12c:	ldrb	w5, [x2, #384]
     130:	ldrb	w2, [sp]
     134:	cmp	w2, w5
     138:	b.eq	100 <generateMTFValues+0xb4>  // b.none
     13c:	cmp	w1, #0x0
     140:	b.gt	198 <generateMTFValues+0x14c>
     144:	ldrb	w3, [sp, #1]
     148:	ldrb	w2, [sp]
     14c:	strb	w2, [sp, #1]
     150:	cmp	w5, w3
     154:	b.eq	1fc <generateMTFValues+0x1b0>  // b.none
     158:	add	x2, x13, #0x1
     15c:	mov	w4, w3
     160:	ldrb	w3, [x2, #1]!
     164:	strb	w4, [x2]
     168:	cmp	w5, w3
     16c:	b.ne	15c <generateMTFValues+0x110>  // b.any
     170:	strb	w3, [sp]
     174:	sub	x2, x2, x13
     178:	add	w3, w2, #0x1
     17c:	strh	w3, [x8, w6, sxtw #1]
     180:	add	w6, w6, #0x1
     184:	add	x2, x0, w2, sxtw #2
     188:	ldr	w3, [x2, #676]
     18c:	add	w3, w3, #0x1
     190:	str	w3, [x2, #676]
     194:	b	104 <generateMTFValues+0xb8>
     198:	sub	w1, w1, #0x1
     19c:	add	w3, w6, #0x1
     1a0:	add	x2, x8, w6, sxtw #1
     1a4:	b	1d8 <generateMTFValues+0x18c>
     1a8:	strh	w14, [x2]
     1ac:	mov	w6, w3
     1b0:	ldr	w4, [x0, #676]
     1b4:	add	w4, w4, #0x1
     1b8:	str	w4, [x0, #676]
     1bc:	add	w3, w3, #0x1
     1c0:	add	x2, x2, #0x2
     1c4:	cmp	w1, #0x1
     1c8:	b.le	1f4 <generateMTFValues+0x1a8>
     1cc:	sub	w1, w1, #0x2
     1d0:	add	w1, w1, w1, lsr #31
     1d4:	asr	w1, w1, #1
     1d8:	tbnz	w1, #0, 1a8 <generateMTFValues+0x15c>
     1dc:	strh	wzr, [x2]
     1e0:	mov	w6, w3
     1e4:	ldr	w4, [x0, #672]
     1e8:	add	w4, w4, #0x1
     1ec:	str	w4, [x0, #672]
     1f0:	b	1bc <generateMTFValues+0x170>
     1f4:	mov	w1, #0x0                   	// #0
     1f8:	b	144 <generateMTFValues+0xf8>
     1fc:	add	x2, x13, #0x1
     200:	b	170 <generateMTFValues+0x124>
     204:	cmp	w1, #0x0
     208:	b.le	270 <generateMTFValues+0x224>
     20c:	sub	w1, w1, #0x1
     210:	add	w3, w6, #0x1
     214:	add	x2, x8, w6, sxtw #1
     218:	mov	w5, #0x1                   	// #1
     21c:	b	250 <generateMTFValues+0x204>
     220:	strh	w5, [x2]
     224:	mov	w6, w3
     228:	ldr	w4, [x0, #676]
     22c:	add	w4, w4, #0x1
     230:	str	w4, [x0, #676]
     234:	add	w3, w3, #0x1
     238:	add	x2, x2, #0x2
     23c:	cmp	w1, #0x1
     240:	b.le	270 <generateMTFValues+0x224>
     244:	sub	w1, w1, #0x2
     248:	add	w1, w1, w1, lsr #31
     24c:	asr	w1, w1, #1
     250:	tbnz	w1, #0, 220 <generateMTFValues+0x1d4>
     254:	strh	wzr, [x2]
     258:	mov	w6, w3
     25c:	ldr	w4, [x0, #672]
     260:	add	w4, w4, #0x1
     264:	str	w4, [x0, #672]
     268:	b	234 <generateMTFValues+0x1e8>
     26c:	mov	w6, #0x0                   	// #0
     270:	strh	w12, [x8, w6, sxtw #1]
     274:	add	x11, x0, w11, sxtw #2
     278:	ldr	w1, [x11, #676]
     27c:	add	w1, w1, #0x1
     280:	str	w1, [x11, #676]
     284:	add	w6, w6, #0x1
     288:	str	w6, [x0, #668]
     28c:	add	sp, sp, #0x100
     290:	ret

0000000000000294 <bsPutUChar>:
     294:	and	w1, w1, #0xff
     298:	ldr	w2, [x0, #644]
     29c:	cmp	w2, #0x7
     2a0:	b.le	2e0 <bsPutUChar+0x4c>
     2a4:	ldrsw	x2, [x0, #116]
     2a8:	ldr	x3, [x0, #80]
     2ac:	ldrb	w4, [x0, #643]
     2b0:	strb	w4, [x3, x2]
     2b4:	ldr	w2, [x0, #116]
     2b8:	add	w2, w2, #0x1
     2bc:	str	w2, [x0, #116]
     2c0:	ldr	w2, [x0, #640]
     2c4:	lsl	w2, w2, #8
     2c8:	str	w2, [x0, #640]
     2cc:	ldr	w2, [x0, #644]
     2d0:	sub	w2, w2, #0x8
     2d4:	str	w2, [x0, #644]
     2d8:	cmp	w2, #0x7
     2dc:	b.gt	2a4 <bsPutUChar+0x10>
     2e0:	mov	w3, #0x18                  	// #24
     2e4:	sub	w3, w3, w2
     2e8:	lsl	w3, w1, w3
     2ec:	ldr	w1, [x0, #640]
     2f0:	orr	w1, w1, w3
     2f4:	str	w1, [x0, #640]
     2f8:	add	w2, w2, #0x8
     2fc:	str	w2, [x0, #644]
     300:	ret

0000000000000304 <bsPutUInt32>:
     304:	lsr	w3, w1, #24
     308:	ldr	w2, [x0, #644]
     30c:	cmp	w2, #0x7
     310:	b.le	350 <bsPutUInt32+0x4c>
     314:	ldrsw	x2, [x0, #116]
     318:	ldr	x4, [x0, #80]
     31c:	ldrb	w5, [x0, #643]
     320:	strb	w5, [x4, x2]
     324:	ldr	w2, [x0, #116]
     328:	add	w2, w2, #0x1
     32c:	str	w2, [x0, #116]
     330:	ldr	w2, [x0, #640]
     334:	lsl	w2, w2, #8
     338:	str	w2, [x0, #640]
     33c:	ldr	w2, [x0, #644]
     340:	sub	w2, w2, #0x8
     344:	str	w2, [x0, #644]
     348:	cmp	w2, #0x7
     34c:	b.gt	314 <bsPutUInt32+0x10>
     350:	mov	w4, #0x18                  	// #24
     354:	sub	w4, w4, w2
     358:	lsl	w4, w3, w4
     35c:	ldr	w3, [x0, #640]
     360:	orr	w3, w3, w4
     364:	str	w3, [x0, #640]
     368:	add	w2, w2, #0x8
     36c:	str	w2, [x0, #644]
     370:	ubfx	x3, x1, #16, #8
     374:	cmp	w2, #0x7
     378:	b.le	3b8 <bsPutUInt32+0xb4>
     37c:	ldrsw	x2, [x0, #116]
     380:	ldr	x4, [x0, #80]
     384:	ldrb	w5, [x0, #643]
     388:	strb	w5, [x4, x2]
     38c:	ldr	w2, [x0, #116]
     390:	add	w2, w2, #0x1
     394:	str	w2, [x0, #116]
     398:	ldr	w2, [x0, #640]
     39c:	lsl	w2, w2, #8
     3a0:	str	w2, [x0, #640]
     3a4:	ldr	w2, [x0, #644]
     3a8:	sub	w2, w2, #0x8
     3ac:	str	w2, [x0, #644]
     3b0:	cmp	w2, #0x7
     3b4:	b.gt	37c <bsPutUInt32+0x78>
     3b8:	mov	w4, #0x18                  	// #24
     3bc:	sub	w4, w4, w2
     3c0:	lsl	w4, w3, w4
     3c4:	ldr	w3, [x0, #640]
     3c8:	orr	w3, w3, w4
     3cc:	str	w3, [x0, #640]
     3d0:	add	w2, w2, #0x8
     3d4:	str	w2, [x0, #644]
     3d8:	ubfx	x3, x1, #8, #8
     3dc:	cmp	w2, #0x7
     3e0:	b.le	420 <bsPutUInt32+0x11c>
     3e4:	ldrsw	x2, [x0, #116]
     3e8:	ldr	x4, [x0, #80]
     3ec:	ldrb	w5, [x0, #643]
     3f0:	strb	w5, [x4, x2]
     3f4:	ldr	w2, [x0, #116]
     3f8:	add	w2, w2, #0x1
     3fc:	str	w2, [x0, #116]
     400:	ldr	w2, [x0, #640]
     404:	lsl	w2, w2, #8
     408:	str	w2, [x0, #640]
     40c:	ldr	w2, [x0, #644]
     410:	sub	w2, w2, #0x8
     414:	str	w2, [x0, #644]
     418:	cmp	w2, #0x7
     41c:	b.gt	3e4 <bsPutUInt32+0xe0>
     420:	mov	w4, #0x18                  	// #24
     424:	sub	w4, w4, w2
     428:	lsl	w4, w3, w4
     42c:	ldr	w3, [x0, #640]
     430:	orr	w3, w3, w4
     434:	str	w3, [x0, #640]
     438:	add	w2, w2, #0x8
     43c:	str	w2, [x0, #644]
     440:	and	w1, w1, #0xff
     444:	cmp	w2, #0x7
     448:	b.le	488 <bsPutUInt32+0x184>
     44c:	ldrsw	x2, [x0, #116]
     450:	ldr	x3, [x0, #80]
     454:	ldrb	w4, [x0, #643]
     458:	strb	w4, [x3, x2]
     45c:	ldr	w2, [x0, #116]
     460:	add	w2, w2, #0x1
     464:	str	w2, [x0, #116]
     468:	ldr	w2, [x0, #640]
     46c:	lsl	w2, w2, #8
     470:	str	w2, [x0, #640]
     474:	ldr	w2, [x0, #644]
     478:	sub	w2, w2, #0x8
     47c:	str	w2, [x0, #644]
     480:	cmp	w2, #0x7
     484:	b.gt	44c <bsPutUInt32+0x148>
     488:	mov	w3, #0x18                  	// #24
     48c:	sub	w3, w3, w2
     490:	lsl	w1, w1, w3
     494:	ldr	w3, [x0, #640]
     498:	orr	w1, w3, w1
     49c:	str	w1, [x0, #640]
     4a0:	add	w2, w2, #0x8
     4a4:	str	w2, [x0, #644]
     4a8:	ret

00000000000004ac <BZ2_bsInitWrite>:
     4ac:	str	wzr, [x0, #644]
     4b0:	str	wzr, [x0, #640]
     4b4:	ret

00000000000004b8 <BZ2_compressBlock>:
     4b8:	sub	sp, sp, #0x240
     4bc:	stp	x29, x30, [sp]
     4c0:	mov	x29, sp
     4c4:	stp	x25, x26, [sp, #64]
     4c8:	mov	x26, x0
     4cc:	and	w0, w1, #0xff
     4d0:	str	w0, [sp, #464]
     4d4:	ldr	w5, [x26, #108]
     4d8:	cmp	w5, #0x0
     4dc:	b.le	51c <BZ2_compressBlock+0x64>
     4e0:	ldr	w3, [x26, #648]
     4e4:	mvn	w3, w3
     4e8:	str	w3, [x26, #648]
     4ec:	ldr	w4, [x26, #652]
     4f0:	eor	w4, w3, w4, ror #31
     4f4:	str	w4, [x26, #652]
     4f8:	ldr	w2, [x26, #660]
     4fc:	cmp	w2, #0x1
     500:	b.le	508 <BZ2_compressBlock+0x50>
     504:	str	wzr, [x26, #116]
     508:	ldr	w0, [x26, #656]
     50c:	cmp	w0, #0x1
     510:	b.gt	55c <BZ2_compressBlock+0xa4>
     514:	mov	x0, x26
     518:	bl	0 <BZ2_blockSort>
     51c:	ldrsw	x1, [x26, #108]
     520:	ldr	x0, [x26, #32]
     524:	add	x0, x0, x1
     528:	str	x0, [x26, #80]
     52c:	ldr	w0, [x26, #660]
     530:	cmp	w0, #0x1
     534:	b.eq	574 <BZ2_compressBlock+0xbc>  // b.none
     538:	ldr	w0, [x26, #108]
     53c:	cmp	w0, #0x0
     540:	b.gt	5b4 <BZ2_compressBlock+0xfc>
     544:	ldr	w0, [sp, #464]
     548:	cbnz	w0, 3df0 <BZ2_compressBlock+0x3938>
     54c:	ldp	x25, x26, [sp, #64]
     550:	ldp	x29, x30, [sp]
     554:	add	sp, sp, #0x240
     558:	ret
     55c:	adrp	x1, 0 <bsFinishWrite>
     560:	add	x1, x1, #0x0
     564:	adrp	x0, 0 <stderr>
     568:	ldr	x0, [x0]
     56c:	bl	0 <fprintf>
     570:	b	514 <BZ2_compressBlock+0x5c>
     574:	str	wzr, [x26, #644]
     578:	str	wzr, [x26, #640]
     57c:	mov	w1, #0x42                  	// #66
     580:	mov	x0, x26
     584:	bl	294 <bsPutUChar>
     588:	mov	w1, #0x5a                  	// #90
     58c:	mov	x0, x26
     590:	bl	294 <bsPutUChar>
     594:	mov	w1, #0x68                  	// #104
     598:	mov	x0, x26
     59c:	bl	294 <bsPutUChar>
     5a0:	ldr	w1, [x26, #664]
     5a4:	add	w1, w1, #0x30
     5a8:	mov	x0, x26
     5ac:	bl	294 <bsPutUChar>
     5b0:	b	538 <BZ2_compressBlock+0x80>
     5b4:	stp	x19, x20, [sp, #16]
     5b8:	stp	x21, x22, [sp, #32]
     5bc:	stp	x23, x24, [sp, #48]
     5c0:	stp	x27, x28, [sp, #80]
     5c4:	str	d8, [sp, #96]
     5c8:	mov	w1, #0x31                  	// #49
     5cc:	mov	x0, x26
     5d0:	bl	294 <bsPutUChar>
     5d4:	mov	w1, #0x41                  	// #65
     5d8:	mov	x0, x26
     5dc:	bl	294 <bsPutUChar>
     5e0:	mov	w1, #0x59                  	// #89
     5e4:	mov	x0, x26
     5e8:	bl	294 <bsPutUChar>
     5ec:	mov	w1, #0x26                  	// #38
     5f0:	mov	x0, x26
     5f4:	bl	294 <bsPutUChar>
     5f8:	mov	w1, #0x53                  	// #83
     5fc:	mov	x0, x26
     600:	bl	294 <bsPutUChar>
     604:	mov	w1, #0x59                  	// #89
     608:	mov	x0, x26
     60c:	bl	294 <bsPutUChar>
     610:	ldr	w1, [x26, #648]
     614:	mov	x0, x26
     618:	bl	304 <bsPutUInt32>
     61c:	ldr	w0, [x26, #644]
     620:	cmp	w0, #0x7
     624:	b.le	664 <BZ2_compressBlock+0x1ac>
     628:	ldrsw	x0, [x26, #116]
     62c:	ldr	x1, [x26, #80]
     630:	ldrb	w2, [x26, #643]
     634:	strb	w2, [x1, x0]
     638:	ldr	w0, [x26, #116]
     63c:	add	w0, w0, #0x1
     640:	str	w0, [x26, #116]
     644:	ldr	w0, [x26, #640]
     648:	lsl	w0, w0, #8
     64c:	str	w0, [x26, #640]
     650:	ldr	w0, [x26, #644]
     654:	sub	w0, w0, #0x8
     658:	str	w0, [x26, #644]
     65c:	cmp	w0, #0x7
     660:	b.gt	628 <BZ2_compressBlock+0x170>
     664:	add	w0, w0, #0x1
     668:	str	w0, [x26, #644]
     66c:	ldr	w3, [x26, #48]
     670:	cmp	w0, #0x7
     674:	b.le	6b4 <BZ2_compressBlock+0x1fc>
     678:	ldrsw	x0, [x26, #116]
     67c:	ldr	x1, [x26, #80]
     680:	ldrb	w2, [x26, #643]
     684:	strb	w2, [x1, x0]
     688:	ldr	w0, [x26, #116]
     68c:	add	w0, w0, #0x1
     690:	str	w0, [x26, #116]
     694:	ldr	w0, [x26, #640]
     698:	lsl	w0, w0, #8
     69c:	str	w0, [x26, #640]
     6a0:	ldr	w0, [x26, #644]
     6a4:	sub	w0, w0, #0x8
     6a8:	str	w0, [x26, #644]
     6ac:	cmp	w0, #0x7
     6b0:	b.gt	678 <BZ2_compressBlock+0x1c0>
     6b4:	mov	w1, #0x8                   	// #8
     6b8:	sub	w1, w1, w0
     6bc:	lsl	w2, w3, w1
     6c0:	ldr	w1, [x26, #640]
     6c4:	orr	w1, w1, w2
     6c8:	str	w1, [x26, #640]
     6cc:	add	w0, w0, #0x18
     6d0:	str	w0, [x26, #644]
     6d4:	mov	x0, x26
     6d8:	bl	4c <generateMTFValues>
     6dc:	ldr	x27, [x26, #72]
     6e0:	ldr	w0, [x26, #656]
     6e4:	cmp	w0, #0x2
     6e8:	b.gt	7d0 <BZ2_compressBlock+0x318>
     6ec:	ldr	w0, [x26, #124]
     6f0:	str	w0, [sp, #468]
     6f4:	add	w4, w0, #0x2
     6f8:	str	w4, [sp, #144]
     6fc:	add	x0, x26, #0x9, lsl #12
     700:	add	x0, x0, #0x34c
     704:	str	x0, [sp, #240]
     708:	str	x26, [sp, #488]
     70c:	add	x3, x26, #0x9, lsl #12
     710:	add	x3, x3, #0x958
     714:	mov	x1, x0
     718:	mov	w2, #0xf                   	// #15
     71c:	mov	x0, #0x0                   	// #0
     720:	cmp	w4, #0x0
     724:	b.le	738 <BZ2_compressBlock+0x280>
     728:	strb	w2, [x1, x0]
     72c:	add	x0, x0, #0x1
     730:	cmp	w4, w0
     734:	b.gt	728 <BZ2_compressBlock+0x270>
     738:	add	x1, x1, #0x102
     73c:	cmp	x1, x3
     740:	b.ne	71c <BZ2_compressBlock+0x264>  // b.any
     744:	ldr	w0, [x26, #668]
     748:	cmp	w0, #0x0
     74c:	b.le	7f4 <BZ2_compressBlock+0x33c>
     750:	ldr	w22, [x26, #668]
     754:	mov	w0, #0x2                   	// #2
     758:	str	w0, [sp, #128]
     75c:	cmp	w22, #0xc7
     760:	b.le	794 <BZ2_compressBlock+0x2dc>
     764:	mov	w0, #0x3                   	// #3
     768:	str	w0, [sp, #128]
     76c:	cmp	w22, #0x257
     770:	b.le	794 <BZ2_compressBlock+0x2dc>
     774:	mov	w0, #0x4                   	// #4
     778:	str	w0, [sp, #128]
     77c:	cmp	w22, #0x4af
     780:	b.le	794 <BZ2_compressBlock+0x2dc>
     784:	cmp	w22, #0x95f
     788:	cset	w0, gt
     78c:	add	w0, w0, #0x5
     790:	str	w0, [sp, #128]
     794:	ldr	w0, [sp, #128]
     798:	mov	w19, w0
     79c:	mov	w21, #0x0                   	// #0
     7a0:	ldr	w1, [sp, #468]
     7a4:	add	w23, w1, #0x1
     7a8:	add	x25, x26, #0x2a0
     7ac:	adrp	x1, 0 <bsFinishWrite>
     7b0:	ldr	d8, [x1]
     7b4:	adrp	x24, 0 <bsFinishWrite>
     7b8:	add	x24, x24, #0x0
     7bc:	str	x27, [sp, #120]
     7c0:	ldr	w27, [sp, #144]
     7c4:	str	x24, [sp, #112]
     7c8:	mov	w24, w0
     7cc:	b	878 <BZ2_compressBlock+0x3c0>
     7d0:	ldr	w4, [x26, #124]
     7d4:	ldr	w3, [x26, #668]
     7d8:	ldr	w2, [x26, #108]
     7dc:	adrp	x1, 0 <bsFinishWrite>
     7e0:	add	x1, x1, #0x0
     7e4:	adrp	x0, 0 <stderr>
     7e8:	ldr	x0, [x0]
     7ec:	bl	0 <fprintf>
     7f0:	b	6ec <BZ2_compressBlock+0x234>
     7f4:	mov	w0, #0xbb9                 	// #3001
     7f8:	bl	0 <BZ2_bz__AssertH__fail>
     7fc:	b	750 <BZ2_compressBlock+0x298>
     800:	mov	w28, #0x0                   	// #0
     804:	cmp	w21, w20
     808:	ccmp	w24, w19, #0x4, lt  // lt = tstop
     80c:	ccmp	w19, #0x1, #0x4, ne  // ne = any
     810:	b.ne	8d0 <BZ2_compressBlock+0x418>  // b.any
     814:	ldr	w0, [x26, #656]
     818:	cmp	w0, #0x2
     81c:	b.gt	8f8 <BZ2_compressBlock+0x440>
     820:	cmp	w27, #0x0
     824:	b.le	868 <BZ2_compressBlock+0x3b0>
     828:	sub	w0, w19, #0x1
     82c:	sbfiz	x1, x0, #7, #32
     830:	add	x0, x1, w0, sxtw
     834:	add	x0, x26, x0, lsl #1
     838:	add	x0, x0, #0x9, lsl #12
     83c:	add	x0, x0, #0x34c
     840:	mov	x1, #0x0                   	// #0
     844:	mov	w3, #0xf                   	// #15
     848:	mov	w2, #0x0                   	// #0
     84c:	cmp	w1, w21
     850:	ccmp	w20, w1, #0x1, ge  // ge = tcont
     854:	csel	w4, w2, w3, ge  // ge = tcont
     858:	strb	w4, [x0, x1]
     85c:	add	x1, x1, #0x1
     860:	cmp	w27, w1
     864:	b.gt	84c <BZ2_compressBlock+0x394>
     868:	add	w21, w20, #0x1
     86c:	sub	w22, w22, w28
     870:	subs	w19, w19, #0x1
     874:	b.eq	938 <BZ2_compressBlock+0x480>  // b.none
     878:	sdiv	w2, w22, w19
     87c:	sub	w20, w21, #0x1
     880:	cmp	w2, #0x0
     884:	b.le	800 <BZ2_compressBlock+0x348>
     888:	cmp	w20, w23
     88c:	b.ge	8c8 <BZ2_compressBlock+0x410>  // b.tcont
     890:	sxtw	x0, w21
     894:	sub	w1, w23, w21
     898:	add	x3, x0, #0x1
     89c:	add	x1, x1, x3
     8a0:	mov	w28, #0x0                   	// #0
     8a4:	mov	w20, w0
     8a8:	ldr	w3, [x25, x0, lsl #2]
     8ac:	add	w28, w28, w3
     8b0:	cmp	w2, w28
     8b4:	b.le	804 <BZ2_compressBlock+0x34c>
     8b8:	add	x0, x0, #0x1
     8bc:	cmp	x1, x0
     8c0:	b.ne	8a4 <BZ2_compressBlock+0x3ec>  // b.any
     8c4:	b	804 <BZ2_compressBlock+0x34c>
     8c8:	mov	w28, #0x0                   	// #0
     8cc:	b	804 <BZ2_compressBlock+0x34c>
     8d0:	subs	w0, w24, w19
     8d4:	and	w0, w0, #0x1
     8d8:	cneg	w0, w0, mi  // mi = first
     8dc:	cmp	w0, #0x1
     8e0:	b.ne	814 <BZ2_compressBlock+0x35c>  // b.any
     8e4:	add	x0, x26, w20, sxtw #2
     8e8:	ldr	w0, [x0, #672]
     8ec:	sub	w28, w28, w0
     8f0:	sub	w20, w20, #0x1
     8f4:	b	814 <BZ2_compressBlock+0x35c>
     8f8:	scvtf	s1, w28
     8fc:	fcvt	d1, s1
     900:	fmul	d1, d1, d8
     904:	ldr	s0, [x26, #668]
     908:	scvtf	s0, s0
     90c:	fcvt	d0, s0
     910:	fdiv	d0, d1, d0
     914:	mov	w5, w28
     918:	mov	w4, w20
     91c:	mov	w3, w21
     920:	mov	w2, w19
     924:	ldr	x1, [sp, #112]
     928:	adrp	x0, 0 <stderr>
     92c:	ldr	x0, [x0]
     930:	bl	0 <fprintf>
     934:	b	820 <BZ2_compressBlock+0x368>
     938:	str	w19, [sp, #112]
     93c:	ldr	w0, [sp, #128]
     940:	sub	w0, w0, #0x1
     944:	add	x1, sp, #0x22c
     948:	add	x1, x1, x0, lsl #2
     94c:	str	x1, [sp, #456]
     950:	lsl	x1, x0, #7
     954:	add	x3, x1, x0
     958:	add	x2, x26, #0xb, lsl #12
     95c:	add	x2, x2, #0x590
     960:	add	x2, x2, x3, lsl #3
     964:	str	x2, [sp, #480]
     968:	add	x2, sp, #0x20a
     96c:	add	x2, x2, x0, lsl #1
     970:	str	x2, [sp, #248]
     974:	add	x2, x26, #0x9, lsl #12
     978:	add	x2, x2, #0x44e
     97c:	str	x2, [sp, #496]
     980:	add	x0, x2, x3, lsl #1
     984:	str	x0, [sp, #472]
     988:	mov	w0, #0x4                   	// #4
     98c:	str	w0, [sp, #256]
     990:	ldr	w0, [sp, #468]
     994:	add	w0, w0, #0x1
     998:	ldr	x1, [sp, #488]
     99c:	add	x1, x1, #0x9, lsl #12
     9a0:	add	x1, x1, #0x34d
     9a4:	add	x0, x0, x1
     9a8:	str	x0, [sp, #504]
     9ac:	mov	x24, x26
     9b0:	b	1c34 <BZ2_compressBlock+0x177c>
     9b4:	add	x1, x24, #0xc, lsl #12
     9b8:	add	x1, x1, #0x9b8
     9bc:	ldr	x0, [sp, #240]
     9c0:	ldr	w2, [sp, #144]
     9c4:	cmp	w2, #0x0
     9c8:	b.le	1c90 <BZ2_compressBlock+0x17d8>
     9cc:	ldr	x4, [sp, #504]
     9d0:	ldrb	w2, [x0, #258]
     9d4:	ldrb	w3, [x0]
     9d8:	orr	w2, w3, w2, lsl #16
     9dc:	str	w2, [x1]
     9e0:	ldrb	w2, [x0, #774]
     9e4:	ldrb	w3, [x0, #516]
     9e8:	orr	w2, w3, w2, lsl #16
     9ec:	str	w2, [x1, #4]
     9f0:	ldrb	w2, [x0, #1290]
     9f4:	ldrb	w3, [x0, #1032]
     9f8:	orr	w2, w3, w2, lsl #16
     9fc:	str	w2, [x1, #8]
     a00:	add	x0, x0, #0x1
     a04:	add	x1, x1, #0x10
     a08:	cmp	x4, x0
     a0c:	b.ne	9d0 <BZ2_compressBlock+0x518>  // b.any
     a10:	b	1c90 <BZ2_compressBlock+0x17d8>
     a14:	sxtw	x1, w23
     a18:	cmp	w25, w23
     a1c:	b.ge	a30 <BZ2_compressBlock+0x578>  // b.tcont
     a20:	b	15c4 <BZ2_compressBlock+0x110c>
     a24:	add	x1, x1, #0x1
     a28:	cmp	w25, w1
     a2c:	b.lt	15c4 <BZ2_compressBlock+0x110c>  // b.tstop
     a30:	ldr	x0, [sp, #120]
     a34:	ldrh	w0, [x0, x1, lsl #1]
     a38:	add	x0, x0, #0x9, lsl #12
     a3c:	add	x0, x0, #0x34c
     a40:	add	x0, x24, x0
     a44:	add	x2, sp, #0x208
     a48:	ldrb	w4, [x0]
     a4c:	ldrh	w3, [x2]
     a50:	add	w3, w3, w4
     a54:	strh	w3, [x2], #2
     a58:	add	x0, x0, #0x102
     a5c:	ldr	x3, [sp, #248]
     a60:	cmp	x3, x2
     a64:	b.ne	a48 <BZ2_compressBlock+0x590>  // b.any
     a68:	b	a24 <BZ2_compressBlock+0x56c>
     a6c:	sxtw	x2, w23
     a70:	cmp	w25, w23
     a74:	b.lt	ab0 <BZ2_compressBlock+0x5f8>  // b.tstop
     a78:	sbfiz	x1, x0, #7, #32
     a7c:	add	x0, x1, w0, sxtw
     a80:	lsl	x0, x0, #1
     a84:	ldr	x1, [sp, #120]
     a88:	ldrh	w1, [x1, x2, lsl #1]
     a8c:	add	x1, x1, x0
     a90:	add	x1, x24, x1, lsl #2
     a94:	add	x1, x1, #0x8, lsl #12
     a98:	ldr	w3, [x1, #12680]
     a9c:	add	w3, w3, #0x1
     aa0:	str	w3, [x1, #12680]
     aa4:	add	x2, x2, #0x1
     aa8:	cmp	w25, w2
     aac:	b.ge	a84 <BZ2_compressBlock+0x5cc>  // b.tcont
     ab0:	add	w23, w25, #0x1
     ab4:	ldr	w1, [x24, #668]
     ab8:	ldr	x0, [sp, #136]
     abc:	add	x0, x0, #0x1
     ac0:	str	x0, [sp, #136]
     ac4:	cmp	w1, w23
     ac8:	b.le	1be4 <BZ2_compressBlock+0x172c>
     acc:	add	w25, w23, #0x31
     ad0:	sub	w0, w1, #0x1
     ad4:	cmp	w25, w1
     ad8:	csel	w25, w0, w25, ge  // ge = tcont
     adc:	add	x0, sp, #0x208
     ae0:	strh	wzr, [x0], #2
     ae4:	ldr	x1, [sp, #248]
     ae8:	cmp	x1, x0
     aec:	b.ne	ae0 <BZ2_compressBlock+0x628>  // b.any
     af0:	ldr	w0, [sp, #128]
     af4:	cmp	w0, #0x6
     af8:	b.ne	a14 <BZ2_compressBlock+0x55c>  // b.any
     afc:	sub	w0, w25, w23
     b00:	cmp	w0, #0x31
     b04:	b.ne	a14 <BZ2_compressBlock+0x55c>  // b.any
     b08:	sbfiz	x28, x23, #1, #32
     b0c:	ldr	x0, [sp, #120]
     b10:	add	x2, x0, x28
     b14:	ldrh	w3, [x2, #2]
     b18:	str	x3, [sp, #152]
     b1c:	add	x0, x3, #0xc9b
     b20:	add	x0, x24, x0, lsl #4
     b24:	ldrh	w4, [x2, #4]
     b28:	str	x4, [sp, #160]
     b2c:	add	x1, x4, #0xc9b
     b30:	add	x1, x24, x1, lsl #4
     b34:	ldr	w0, [x0, #8]
     b38:	ldr	w1, [x1, #8]
     b3c:	add	w0, w0, w1
     b40:	ldrh	w30, [x2, #6]
     b44:	add	x1, x30, #0xc9b
     b48:	add	x1, x24, x1, lsl #4
     b4c:	ldrh	w5, [x2, #8]
     b50:	str	x5, [sp, #168]
     b54:	add	x3, x5, #0xc9b
     b58:	add	x3, x24, x3, lsl #4
     b5c:	ldr	w1, [x1, #8]
     b60:	ldr	w3, [x3, #8]
     b64:	add	w1, w1, w3
     b68:	add	w0, w0, w1
     b6c:	ldrh	w6, [x2, #10]
     b70:	str	x6, [sp, #176]
     b74:	add	x1, x6, #0xc9b
     b78:	add	x1, x24, x1, lsl #4
     b7c:	ldrh	w7, [x2, #12]
     b80:	str	x7, [sp, #184]
     b84:	add	x3, x7, #0xc9b
     b88:	add	x3, x24, x3, lsl #4
     b8c:	ldr	w1, [x1, #8]
     b90:	ldr	w3, [x3, #8]
     b94:	add	w1, w1, w3
     b98:	add	w0, w0, w1
     b9c:	ldrh	w8, [x2, #14]
     ba0:	str	x8, [sp, #192]
     ba4:	add	x1, x8, #0xc9b
     ba8:	add	x1, x24, x1, lsl #4
     bac:	ldrh	w9, [x2, #16]
     bb0:	str	x9, [sp, #200]
     bb4:	add	x3, x9, #0xc9b
     bb8:	add	x3, x24, x3, lsl #4
     bbc:	ldr	w1, [x1, #8]
     bc0:	ldr	w3, [x3, #8]
     bc4:	add	w1, w1, w3
     bc8:	add	w0, w0, w1
     bcc:	ldrh	w10, [x2, #18]
     bd0:	str	x10, [sp, #208]
     bd4:	add	x1, x10, #0xc9b
     bd8:	add	x1, x24, x1, lsl #4
     bdc:	ldrh	w11, [x2, #20]
     be0:	str	x11, [sp, #216]
     be4:	add	x3, x11, #0xc9b
     be8:	add	x3, x24, x3, lsl #4
     bec:	ldr	w1, [x1, #8]
     bf0:	ldr	w3, [x3, #8]
     bf4:	add	w1, w1, w3
     bf8:	add	w0, w0, w1
     bfc:	ldrh	w12, [x2, #22]
     c00:	str	x12, [sp, #224]
     c04:	add	x1, x12, #0xc9b
     c08:	add	x1, x24, x1, lsl #4
     c0c:	ldrh	w13, [x2, #24]
     c10:	str	x13, [sp, #232]
     c14:	add	x3, x13, #0xc9b
     c18:	add	x3, x24, x3, lsl #4
     c1c:	ldr	w1, [x1, #8]
     c20:	ldr	w3, [x3, #8]
     c24:	add	w1, w1, w3
     c28:	add	w0, w0, w1
     c2c:	ldrh	w14, [x2, #26]
     c30:	str	x14, [sp, #272]
     c34:	add	x1, x14, #0xc9b
     c38:	add	x1, x24, x1, lsl #4
     c3c:	ldrh	w15, [x2, #28]
     c40:	str	x15, [sp, #280]
     c44:	add	x3, x15, #0xc9b
     c48:	add	x3, x24, x3, lsl #4
     c4c:	ldr	w1, [x1, #8]
     c50:	ldr	w3, [x3, #8]
     c54:	add	w1, w1, w3
     c58:	add	w0, w0, w1
     c5c:	ldrh	w16, [x2, #30]
     c60:	str	x16, [sp, #288]
     c64:	add	x1, x16, #0xc9b
     c68:	add	x1, x24, x1, lsl #4
     c6c:	ldrh	w17, [x2, #32]
     c70:	str	x17, [sp, #296]
     c74:	add	x3, x17, #0xc9b
     c78:	add	x3, x24, x3, lsl #4
     c7c:	ldr	w1, [x1, #8]
     c80:	ldr	w3, [x3, #8]
     c84:	add	w1, w1, w3
     c88:	add	w0, w0, w1
     c8c:	ldrh	w18, [x2, #34]
     c90:	str	x18, [sp, #304]
     c94:	add	x1, x18, #0xc9b
     c98:	add	x1, x24, x1, lsl #4
     c9c:	ldrh	w19, [x2, #36]
     ca0:	str	x19, [sp, #312]
     ca4:	add	x3, x19, #0xc9b
     ca8:	add	x3, x24, x3, lsl #4
     cac:	ldr	w1, [x1, #8]
     cb0:	ldr	w3, [x3, #8]
     cb4:	add	w1, w1, w3
     cb8:	add	w0, w0, w1
     cbc:	ldrh	w20, [x2, #38]
     cc0:	str	x20, [sp, #320]
     cc4:	add	x1, x20, #0xc9b
     cc8:	add	x1, x24, x1, lsl #4
     ccc:	ldrh	w21, [x2, #40]
     cd0:	str	x21, [sp, #328]
     cd4:	add	x3, x21, #0xc9b
     cd8:	add	x3, x24, x3, lsl #4
     cdc:	ldr	w1, [x1, #8]
     ce0:	ldr	w3, [x3, #8]
     ce4:	add	w1, w1, w3
     ce8:	add	w0, w0, w1
     cec:	ldrh	w22, [x2, #42]
     cf0:	str	x22, [sp, #336]
     cf4:	add	x1, x22, #0xc9b
     cf8:	add	x1, x24, x1, lsl #4
     cfc:	ldrh	w26, [x2, #44]
     d00:	str	x26, [sp, #344]
     d04:	add	x3, x26, #0xc9b
     d08:	add	x3, x24, x3, lsl #4
     d0c:	ldr	w1, [x1, #8]
     d10:	ldr	w3, [x3, #8]
     d14:	add	w1, w1, w3
     d18:	add	w0, w0, w1
     d1c:	ldrh	w27, [x2, #46]
     d20:	str	x27, [sp, #352]
     d24:	add	x1, x27, #0xc9b
     d28:	add	x1, x24, x1, lsl #4
     d2c:	ldrh	w3, [x2, #48]
     d30:	str	x3, [sp, #360]
     d34:	add	x3, x3, #0xc9b
     d38:	add	x3, x24, x3, lsl #4
     d3c:	ldr	w1, [x1, #8]
     d40:	ldr	w3, [x3, #8]
     d44:	add	w1, w1, w3
     d48:	add	w0, w0, w1
     d4c:	ldrh	w26, [x2, #50]
     d50:	add	x1, x26, #0xc9b
     d54:	add	x1, x24, x1, lsl #4
     d58:	ldrh	w4, [x2, #52]
     d5c:	str	x4, [sp, #368]
     d60:	add	x3, x4, #0xc9b
     d64:	add	x3, x24, x3, lsl #4
     d68:	ldr	w1, [x1, #8]
     d6c:	ldr	w3, [x3, #8]
     d70:	add	w1, w1, w3
     d74:	add	w0, w0, w1
     d78:	ldrh	w5, [x2, #54]
     d7c:	str	x5, [sp, #376]
     d80:	add	x1, x5, #0xc9b
     d84:	add	x1, x24, x1, lsl #4
     d88:	ldrh	w6, [x2, #56]
     d8c:	str	x6, [sp, #384]
     d90:	add	x3, x6, #0xc9b
     d94:	add	x3, x24, x3, lsl #4
     d98:	ldr	w1, [x1, #8]
     d9c:	ldr	w3, [x3, #8]
     da0:	add	w1, w1, w3
     da4:	add	w0, w0, w1
     da8:	ldrh	w22, [x2, #58]
     dac:	add	x1, x22, #0xc9b
     db0:	add	x1, x24, x1, lsl #4
     db4:	ldrh	w21, [x2, #60]
     db8:	add	x3, x21, #0xc9b
     dbc:	add	x3, x24, x3, lsl #4
     dc0:	ldr	w1, [x1, #8]
     dc4:	ldr	w3, [x3, #8]
     dc8:	add	w1, w1, w3
     dcc:	add	w0, w0, w1
     dd0:	ldrh	w20, [x2, #62]
     dd4:	add	x1, x20, #0xc9b
     dd8:	add	x1, x24, x1, lsl #4
     ddc:	ldrh	w19, [x2, #64]
     de0:	add	x3, x19, #0xc9b
     de4:	add	x3, x24, x3, lsl #4
     de8:	ldr	w1, [x1, #8]
     dec:	ldr	w3, [x3, #8]
     df0:	add	w1, w1, w3
     df4:	add	w0, w0, w1
     df8:	ldrh	w18, [x2, #66]
     dfc:	add	x1, x18, #0xc9b
     e00:	add	x1, x24, x1, lsl #4
     e04:	ldrh	w17, [x2, #68]
     e08:	add	x3, x17, #0xc9b
     e0c:	add	x3, x24, x3, lsl #4
     e10:	ldr	w1, [x1, #8]
     e14:	ldr	w3, [x3, #8]
     e18:	add	w1, w1, w3
     e1c:	add	w0, w0, w1
     e20:	ldrh	w16, [x2, #70]
     e24:	add	x1, x16, #0xc9b
     e28:	add	x1, x24, x1, lsl #4
     e2c:	ldrh	w15, [x2, #72]
     e30:	add	x3, x15, #0xc9b
     e34:	add	x3, x24, x3, lsl #4
     e38:	ldr	w1, [x1, #8]
     e3c:	ldr	w3, [x3, #8]
     e40:	add	w1, w1, w3
     e44:	add	w0, w0, w1
     e48:	ldrh	w14, [x2, #74]
     e4c:	add	x1, x14, #0xc9b
     e50:	add	x1, x24, x1, lsl #4
     e54:	ldrh	w13, [x2, #76]
     e58:	add	x3, x13, #0xc9b
     e5c:	add	x3, x24, x3, lsl #4
     e60:	ldr	w1, [x1, #8]
     e64:	ldr	w3, [x3, #8]
     e68:	add	w1, w1, w3
     e6c:	add	w0, w0, w1
     e70:	ldrh	w12, [x2, #78]
     e74:	add	x1, x12, #0xc9b
     e78:	add	x1, x24, x1, lsl #4
     e7c:	ldrh	w11, [x2, #80]
     e80:	add	x3, x11, #0xc9b
     e84:	add	x3, x24, x3, lsl #4
     e88:	ldr	w1, [x1, #8]
     e8c:	ldr	w3, [x3, #8]
     e90:	add	w1, w1, w3
     e94:	add	w0, w0, w1
     e98:	ldrh	w10, [x2, #82]
     e9c:	add	x1, x10, #0xc9b
     ea0:	add	x1, x24, x1, lsl #4
     ea4:	ldrh	w9, [x2, #84]
     ea8:	add	x3, x9, #0xc9b
     eac:	add	x3, x24, x3, lsl #4
     eb0:	ldr	w1, [x1, #8]
     eb4:	ldr	w3, [x3, #8]
     eb8:	add	w1, w1, w3
     ebc:	add	w0, w0, w1
     ec0:	ldrh	w8, [x2, #86]
     ec4:	add	x1, x8, #0xc9b
     ec8:	add	x1, x24, x1, lsl #4
     ecc:	ldrh	w7, [x2, #88]
     ed0:	add	x3, x7, #0xc9b
     ed4:	add	x3, x24, x3, lsl #4
     ed8:	ldr	w1, [x1, #8]
     edc:	ldr	w3, [x3, #8]
     ee0:	add	w1, w1, w3
     ee4:	add	w0, w0, w1
     ee8:	ldrh	w6, [x2, #90]
     eec:	add	x1, x6, #0xc9b
     ef0:	add	x1, x24, x1, lsl #4
     ef4:	ldrh	w5, [x2, #92]
     ef8:	add	x3, x5, #0xc9b
     efc:	add	x3, x24, x3, lsl #4
     f00:	ldr	w1, [x1, #8]
     f04:	ldr	w3, [x3, #8]
     f08:	add	w1, w1, w3
     f0c:	add	w0, w0, w1
     f10:	ldrh	w4, [x2, #94]
     f14:	add	x1, x4, #0xc9b
     f18:	add	x1, x24, x1, lsl #4
     f1c:	ldrh	w3, [x2, #96]
     f20:	add	x27, x3, #0xc9b
     f24:	add	x27, x24, x27, lsl #4
     f28:	ldr	w1, [x1, #8]
     f2c:	ldr	w27, [x27, #8]
     f30:	add	w1, w1, w27
     f34:	add	w0, w0, w1
     f38:	ldr	x1, [sp, #120]
     f3c:	ldrh	w27, [x1, x28]
     f40:	add	x1, x27, #0xc9b
     f44:	add	x1, x24, x1, lsl #4
     f48:	ldrh	w2, [x2, #98]
     f4c:	str	x2, [sp, #392]
     f50:	add	x2, x2, #0xc9b
     f54:	add	x2, x24, x2, lsl #4
     f58:	ldr	w1, [x1, #8]
     f5c:	ldr	w2, [x2, #8]
     f60:	add	w1, w1, w2
     f64:	add	w28, w0, w1
     f68:	str	w28, [sp, #260]
     f6c:	ldr	x0, [sp, #152]
     f70:	add	x0, x24, x0, lsl #4
     f74:	add	x28, x0, #0xc, lsl #12
     f78:	ldr	x0, [sp, #160]
     f7c:	add	x0, x24, x0, lsl #4
     f80:	add	x0, x0, #0xc, lsl #12
     f84:	ldr	w1, [x28, #2492]
     f88:	str	x0, [sp, #400]
     f8c:	ldr	w0, [x0, #2492]
     f90:	add	w0, w1, w0
     f94:	add	x30, x24, x30, lsl #4
     f98:	add	x30, x30, #0xc, lsl #12
     f9c:	ldr	x1, [sp, #168]
     fa0:	add	x1, x24, x1, lsl #4
     fa4:	add	x2, x1, #0xc, lsl #12
     fa8:	ldr	w1, [x30, #2492]
     fac:	str	x2, [sp, #408]
     fb0:	ldr	w2, [x2, #2492]
     fb4:	add	w1, w1, w2
     fb8:	add	w0, w0, w1
     fbc:	ldr	x1, [sp, #176]
     fc0:	add	x1, x24, x1, lsl #4
     fc4:	add	x2, x1, #0xc, lsl #12
     fc8:	ldr	x1, [sp, #184]
     fcc:	add	x1, x24, x1, lsl #4
     fd0:	add	x1, x1, #0xc, lsl #12
     fd4:	str	x1, [sp, #152]
     fd8:	str	x2, [sp, #416]
     fdc:	ldr	w1, [x2, #2492]
     fe0:	ldr	x2, [sp, #152]
     fe4:	ldr	w2, [x2, #2492]
     fe8:	add	w1, w1, w2
     fec:	add	w0, w0, w1
     ff0:	ldr	x1, [sp, #192]
     ff4:	add	x1, x24, x1, lsl #4
     ff8:	add	x2, x1, #0xc, lsl #12
     ffc:	ldr	x1, [sp, #200]
    1000:	add	x1, x24, x1, lsl #4
    1004:	add	x1, x1, #0xc, lsl #12
    1008:	str	x1, [sp, #160]
    100c:	str	x2, [sp, #424]
    1010:	ldr	w1, [x2, #2492]
    1014:	ldr	x2, [sp, #160]
    1018:	ldr	w2, [x2, #2492]
    101c:	add	w1, w1, w2
    1020:	add	w0, w0, w1
    1024:	ldr	x1, [sp, #208]
    1028:	add	x1, x24, x1, lsl #4
    102c:	add	x2, x1, #0xc, lsl #12
    1030:	ldr	x1, [sp, #216]
    1034:	add	x1, x24, x1, lsl #4
    1038:	add	x1, x1, #0xc, lsl #12
    103c:	str	x1, [sp, #168]
    1040:	str	x2, [sp, #432]
    1044:	ldr	w1, [x2, #2492]
    1048:	ldr	x2, [sp, #168]
    104c:	ldr	w2, [x2, #2492]
    1050:	add	w1, w1, w2
    1054:	add	w0, w0, w1
    1058:	ldr	x1, [sp, #224]
    105c:	add	x1, x24, x1, lsl #4
    1060:	add	x2, x1, #0xc, lsl #12
    1064:	ldr	x1, [sp, #232]
    1068:	add	x1, x24, x1, lsl #4
    106c:	add	x1, x1, #0xc, lsl #12
    1070:	str	x1, [sp, #176]
    1074:	str	x2, [sp, #440]
    1078:	ldr	w1, [x2, #2492]
    107c:	ldr	x2, [sp, #176]
    1080:	ldr	w2, [x2, #2492]
    1084:	add	w1, w1, w2
    1088:	add	w0, w0, w1
    108c:	ldr	x1, [sp, #272]
    1090:	add	x1, x24, x1, lsl #4
    1094:	add	x1, x1, #0xc, lsl #12
    1098:	mov	x2, x1
    109c:	ldr	x1, [sp, #280]
    10a0:	add	x1, x24, x1, lsl #4
    10a4:	add	x1, x1, #0xc, lsl #12
    10a8:	str	x1, [sp, #184]
    10ac:	str	x2, [sp, #272]
    10b0:	ldr	w1, [x2, #2492]
    10b4:	ldr	x2, [sp, #184]
    10b8:	ldr	w2, [x2, #2492]
    10bc:	add	w1, w1, w2
    10c0:	add	w0, w0, w1
    10c4:	ldr	x1, [sp, #288]
    10c8:	add	x1, x24, x1, lsl #4
    10cc:	add	x1, x1, #0xc, lsl #12
    10d0:	mov	x2, x1
    10d4:	ldr	x1, [sp, #296]
    10d8:	add	x1, x24, x1, lsl #4
    10dc:	add	x1, x1, #0xc, lsl #12
    10e0:	str	x1, [sp, #192]
    10e4:	str	x2, [sp, #280]
    10e8:	ldr	w1, [x2, #2492]
    10ec:	ldr	x2, [sp, #192]
    10f0:	ldr	w2, [x2, #2492]
    10f4:	add	w1, w1, w2
    10f8:	add	w0, w0, w1
    10fc:	ldr	x1, [sp, #304]
    1100:	add	x1, x24, x1, lsl #4
    1104:	add	x1, x1, #0xc, lsl #12
    1108:	mov	x2, x1
    110c:	ldr	x1, [sp, #312]
    1110:	add	x1, x24, x1, lsl #4
    1114:	add	x1, x1, #0xc, lsl #12
    1118:	str	x1, [sp, #200]
    111c:	str	x2, [sp, #288]
    1120:	ldr	w1, [x2, #2492]
    1124:	ldr	x2, [sp, #200]
    1128:	ldr	w2, [x2, #2492]
    112c:	add	w1, w1, w2
    1130:	add	w0, w0, w1
    1134:	ldr	x1, [sp, #320]
    1138:	add	x1, x24, x1, lsl #4
    113c:	add	x1, x1, #0xc, lsl #12
    1140:	mov	x2, x1
    1144:	ldr	x1, [sp, #328]
    1148:	add	x1, x24, x1, lsl #4
    114c:	add	x1, x1, #0xc, lsl #12
    1150:	str	x1, [sp, #208]
    1154:	str	x2, [sp, #296]
    1158:	ldr	w1, [x2, #2492]
    115c:	ldr	x2, [sp, #208]
    1160:	ldr	w2, [x2, #2492]
    1164:	add	w1, w1, w2
    1168:	add	w0, w0, w1
    116c:	ldr	x1, [sp, #336]
    1170:	add	x1, x24, x1, lsl #4
    1174:	add	x1, x1, #0xc, lsl #12
    1178:	mov	x2, x1
    117c:	ldr	x1, [sp, #344]
    1180:	add	x1, x24, x1, lsl #4
    1184:	add	x1, x1, #0xc, lsl #12
    1188:	str	x1, [sp, #216]
    118c:	str	x2, [sp, #304]
    1190:	ldr	w1, [x2, #2492]
    1194:	ldr	x2, [sp, #216]
    1198:	ldr	w2, [x2, #2492]
    119c:	add	w1, w1, w2
    11a0:	add	w0, w0, w1
    11a4:	ldr	x1, [sp, #352]
    11a8:	add	x1, x24, x1, lsl #4
    11ac:	add	x1, x1, #0xc, lsl #12
    11b0:	mov	x2, x1
    11b4:	ldr	x1, [sp, #360]
    11b8:	add	x1, x24, x1, lsl #4
    11bc:	add	x1, x1, #0xc, lsl #12
    11c0:	str	x1, [sp, #224]
    11c4:	str	x2, [sp, #312]
    11c8:	ldr	w1, [x2, #2492]
    11cc:	ldr	x2, [sp, #224]
    11d0:	ldr	w2, [x2, #2492]
    11d4:	add	w1, w1, w2
    11d8:	add	w0, w0, w1
    11dc:	add	x26, x24, x26, lsl #4
    11e0:	add	x26, x26, #0xc, lsl #12
    11e4:	ldr	x1, [sp, #368]
    11e8:	add	x1, x24, x1, lsl #4
    11ec:	add	x1, x1, #0xc, lsl #12
    11f0:	mov	x2, x1
    11f4:	ldr	w1, [x26, #2492]
    11f8:	str	x2, [sp, #320]
    11fc:	ldr	w2, [x2, #2492]
    1200:	add	w1, w1, w2
    1204:	add	w0, w0, w1
    1208:	ldr	x1, [sp, #376]
    120c:	add	x1, x24, x1, lsl #4
    1210:	add	x1, x1, #0xc, lsl #12
    1214:	mov	x2, x1
    1218:	ldr	x1, [sp, #384]
    121c:	add	x1, x24, x1, lsl #4
    1220:	add	x1, x1, #0xc, lsl #12
    1224:	str	x1, [sp, #232]
    1228:	str	x2, [sp, #328]
    122c:	ldr	w1, [x2, #2492]
    1230:	ldr	x2, [sp, #232]
    1234:	ldr	w2, [x2, #2492]
    1238:	add	w1, w1, w2
    123c:	add	w0, w0, w1
    1240:	add	x22, x24, x22, lsl #4
    1244:	add	x22, x22, #0xc, lsl #12
    1248:	add	x21, x24, x21, lsl #4
    124c:	add	x21, x21, #0xc, lsl #12
    1250:	ldr	w1, [x22, #2492]
    1254:	ldr	w2, [x21, #2492]
    1258:	add	w1, w1, w2
    125c:	add	w0, w0, w1
    1260:	add	x20, x24, x20, lsl #4
    1264:	add	x20, x20, #0xc, lsl #12
    1268:	add	x19, x24, x19, lsl #4
    126c:	add	x19, x19, #0xc, lsl #12
    1270:	ldr	w1, [x20, #2492]
    1274:	ldr	w2, [x19, #2492]
    1278:	add	w1, w1, w2
    127c:	add	w0, w0, w1
    1280:	add	x18, x24, x18, lsl #4
    1284:	add	x18, x18, #0xc, lsl #12
    1288:	add	x17, x24, x17, lsl #4
    128c:	add	x17, x17, #0xc, lsl #12
    1290:	ldr	w1, [x18, #2492]
    1294:	ldr	w2, [x17, #2492]
    1298:	add	w1, w1, w2
    129c:	add	w0, w0, w1
    12a0:	add	x16, x24, x16, lsl #4
    12a4:	add	x16, x16, #0xc, lsl #12
    12a8:	add	x15, x24, x15, lsl #4
    12ac:	add	x15, x15, #0xc, lsl #12
    12b0:	ldr	w1, [x16, #2492]
    12b4:	ldr	w2, [x15, #2492]
    12b8:	add	w1, w1, w2
    12bc:	add	w0, w0, w1
    12c0:	add	x14, x24, x14, lsl #4
    12c4:	add	x14, x14, #0xc, lsl #12
    12c8:	add	x13, x24, x13, lsl #4
    12cc:	add	x13, x13, #0xc, lsl #12
    12d0:	ldr	w1, [x14, #2492]
    12d4:	ldr	w2, [x13, #2492]
    12d8:	add	w1, w1, w2
    12dc:	add	w0, w0, w1
    12e0:	add	x12, x24, x12, lsl #4
    12e4:	add	x12, x12, #0xc, lsl #12
    12e8:	add	x11, x24, x11, lsl #4
    12ec:	add	x11, x11, #0xc, lsl #12
    12f0:	ldr	w1, [x12, #2492]
    12f4:	ldr	w2, [x11, #2492]
    12f8:	add	w1, w1, w2
    12fc:	add	w0, w0, w1
    1300:	add	x10, x24, x10, lsl #4
    1304:	add	x10, x10, #0xc, lsl #12
    1308:	add	x9, x24, x9, lsl #4
    130c:	add	x9, x9, #0xc, lsl #12
    1310:	ldr	w1, [x10, #2492]
    1314:	ldr	w2, [x9, #2492]
    1318:	add	w1, w1, w2
    131c:	add	w0, w0, w1
    1320:	add	x8, x24, x8, lsl #4
    1324:	add	x8, x8, #0xc, lsl #12
    1328:	add	x7, x24, x7, lsl #4
    132c:	add	x7, x7, #0xc, lsl #12
    1330:	ldr	w1, [x8, #2492]
    1334:	ldr	w2, [x7, #2492]
    1338:	add	w1, w1, w2
    133c:	add	w0, w0, w1
    1340:	add	x6, x24, x6, lsl #4
    1344:	add	x6, x6, #0xc, lsl #12
    1348:	add	x5, x24, x5, lsl #4
    134c:	add	x5, x5, #0xc, lsl #12
    1350:	ldr	w1, [x6, #2492]
    1354:	ldr	w2, [x5, #2492]
    1358:	add	w1, w1, w2
    135c:	add	w0, w0, w1
    1360:	add	x4, x24, x4, lsl #4
    1364:	add	x4, x4, #0xc, lsl #12
    1368:	add	x3, x24, x3, lsl #4
    136c:	add	x3, x3, #0xc, lsl #12
    1370:	ldr	w1, [x4, #2492]
    1374:	str	x3, [sp, #336]
    1378:	ldr	w2, [x3, #2492]
    137c:	add	w1, w1, w2
    1380:	add	w0, w0, w1
    1384:	add	x2, x24, x27, lsl #4
    1388:	add	x2, x2, #0xc, lsl #12
    138c:	ldr	x1, [sp, #392]
    1390:	add	x1, x24, x1, lsl #4
    1394:	add	x1, x1, #0xc, lsl #12
    1398:	ldr	w27, [x2, #2492]
    139c:	ldr	w3, [x1, #2492]
    13a0:	add	w27, w27, w3
    13a4:	add	w0, w0, w27
    13a8:	ldr	w28, [x28, #2496]
    13ac:	ldr	x27, [sp, #400]
    13b0:	ldr	w27, [x27, #2496]
    13b4:	add	w28, w28, w27
    13b8:	ldr	w27, [x30, #2496]
    13bc:	ldr	x30, [sp, #408]
    13c0:	ldr	w30, [x30, #2496]
    13c4:	add	w30, w27, w30
    13c8:	add	w30, w28, w30
    13cc:	ldr	x27, [sp, #416]
    13d0:	ldr	w27, [x27, #2496]
    13d4:	ldr	x28, [sp, #152]
    13d8:	ldr	w28, [x28, #2496]
    13dc:	add	w28, w27, w28
    13e0:	add	w28, w30, w28
    13e4:	ldr	x27, [sp, #424]
    13e8:	ldr	w27, [x27, #2496]
    13ec:	ldr	x30, [sp, #160]
    13f0:	ldr	w30, [x30, #2496]
    13f4:	add	w30, w27, w30
    13f8:	add	w30, w28, w30
    13fc:	ldr	x27, [sp, #432]
    1400:	ldr	w27, [x27, #2496]
    1404:	ldr	x28, [sp, #168]
    1408:	ldr	w28, [x28, #2496]
    140c:	add	w28, w27, w28
    1410:	add	w28, w30, w28
    1414:	ldr	x27, [sp, #440]
    1418:	ldr	w27, [x27, #2496]
    141c:	ldr	x30, [sp, #176]
    1420:	ldr	w30, [x30, #2496]
    1424:	add	w30, w27, w30
    1428:	add	w30, w28, w30
    142c:	ldr	x27, [sp, #272]
    1430:	ldr	w27, [x27, #2496]
    1434:	ldr	x28, [sp, #184]
    1438:	ldr	w28, [x28, #2496]
    143c:	add	w28, w27, w28
    1440:	add	w28, w30, w28
    1444:	ldr	x27, [sp, #280]
    1448:	ldr	w27, [x27, #2496]
    144c:	ldr	x30, [sp, #192]
    1450:	ldr	w30, [x30, #2496]
    1454:	add	w30, w27, w30
    1458:	add	w30, w28, w30
    145c:	ldr	x27, [sp, #288]
    1460:	ldr	w27, [x27, #2496]
    1464:	ldr	x28, [sp, #200]
    1468:	ldr	w28, [x28, #2496]
    146c:	add	w28, w27, w28
    1470:	add	w28, w30, w28
    1474:	ldr	x27, [sp, #296]
    1478:	ldr	w27, [x27, #2496]
    147c:	ldr	x30, [sp, #208]
    1480:	ldr	w30, [x30, #2496]
    1484:	add	w30, w27, w30
    1488:	add	w30, w28, w30
    148c:	ldr	x27, [sp, #304]
    1490:	ldr	w27, [x27, #2496]
    1494:	ldr	x28, [sp, #216]
    1498:	ldr	w28, [x28, #2496]
    149c:	add	w28, w27, w28
    14a0:	add	w28, w30, w28
    14a4:	ldr	x27, [sp, #312]
    14a8:	ldr	w27, [x27, #2496]
    14ac:	ldr	x30, [sp, #224]
    14b0:	ldr	w30, [x30, #2496]
    14b4:	add	w27, w27, w30
    14b8:	add	w27, w28, w27
    14bc:	ldr	w28, [x26, #2496]
    14c0:	ldr	x26, [sp, #320]
    14c4:	ldr	w30, [x26, #2496]
    14c8:	add	w28, w28, w30
    14cc:	add	w28, w27, w28
    14d0:	ldr	x26, [sp, #328]
    14d4:	ldr	w27, [x26, #2496]
    14d8:	ldr	x26, [sp, #232]
    14dc:	ldr	w30, [x26, #2496]
    14e0:	add	w27, w27, w30
    14e4:	add	w27, w28, w27
    14e8:	ldr	w28, [x22, #2496]
    14ec:	ldr	w30, [x21, #2496]
    14f0:	add	w28, w28, w30
    14f4:	add	w28, w27, w28
    14f8:	ldr	w27, [x20, #2496]
    14fc:	ldr	w30, [x19, #2496]
    1500:	add	w27, w27, w30
    1504:	add	w28, w28, w27
    1508:	ldr	w27, [x18, #2496]
    150c:	ldr	w30, [x17, #2496]
    1510:	add	w27, w27, w30
    1514:	add	w28, w28, w27
    1518:	ldr	w27, [x16, #2496]
    151c:	ldr	w15, [x15, #2496]
    1520:	add	w27, w27, w15
    1524:	add	w28, w28, w27
    1528:	ldr	w14, [x14, #2496]
    152c:	ldr	w13, [x13, #2496]
    1530:	add	w13, w14, w13
    1534:	add	w28, w28, w13
    1538:	ldr	w12, [x12, #2496]
    153c:	ldr	w11, [x11, #2496]
    1540:	add	w11, w12, w11
    1544:	add	w11, w28, w11
    1548:	ldr	w10, [x10, #2496]
    154c:	ldr	w9, [x9, #2496]
    1550:	add	w9, w10, w9
    1554:	add	w9, w11, w9
    1558:	ldr	w8, [x8, #2496]
    155c:	ldr	w7, [x7, #2496]
    1560:	add	w7, w8, w7
    1564:	add	w7, w9, w7
    1568:	ldr	w6, [x6, #2496]
    156c:	ldr	w5, [x5, #2496]
    1570:	add	w5, w6, w5
    1574:	add	w5, w7, w5
    1578:	ldr	w4, [x4, #2496]
    157c:	ldr	x3, [sp, #336]
    1580:	ldr	w3, [x3, #2496]
    1584:	add	w3, w4, w3
    1588:	add	w3, w5, w3
    158c:	ldr	w2, [x2, #2496]
    1590:	ldr	w1, [x1, #2496]
    1594:	add	w1, w2, w1
    1598:	add	w3, w3, w1
    159c:	ldr	w28, [sp, #260]
    15a0:	strh	w28, [sp, #520]
    15a4:	lsr	w1, w28, #16
    15a8:	strh	w1, [sp, #522]
    15ac:	strh	w0, [sp, #524]
    15b0:	lsr	w0, w0, #16
    15b4:	strh	w0, [sp, #526]
    15b8:	strh	w3, [sp, #528]
    15bc:	lsr	w3, w3, #16
    15c0:	strh	w3, [sp, #530]
    15c4:	add	x4, sp, #0x208
    15c8:	ldr	w1, [sp, #112]
    15cc:	mov	w0, #0xffffffff            	// #-1
    15d0:	mov	w2, #0xc9ff                	// #51711
    15d4:	movk	w2, #0x3b9a, lsl #16
    15d8:	ldrh	w3, [x4], #2
    15dc:	cmp	w3, w2
    15e0:	csel	w5, w2, w3, ge  // ge = tcont
    15e4:	mov	w2, w5
    15e8:	csel	w0, w0, w1, ge  // ge = tcont
    15ec:	add	w1, w1, #0x1
    15f0:	ldr	w3, [sp, #128]
    15f4:	cmp	w3, w1
    15f8:	b.ne	15d8 <BZ2_compressBlock+0x1120>  // b.any
    15fc:	ldr	w3, [sp, #148]
    1600:	add	w2, w3, w5
    1604:	str	w2, [sp, #148]
    1608:	sxtw	x3, w0
    160c:	add	x2, sp, #0x228
    1610:	ldr	w2, [x2, x3, lsl #2]
    1614:	add	w2, w2, #0x1
    1618:	add	x4, sp, #0x228
    161c:	str	w2, [x4, x3, lsl #2]
    1620:	ldr	x3, [sp, #448]
    1624:	ldr	x2, [sp, #136]
    1628:	strb	w0, [x3, x2]
    162c:	mov	w19, w2
    1630:	cmp	w1, #0x6
    1634:	b.ne	a6c <BZ2_compressBlock+0x5b4>  // b.any
    1638:	sub	w1, w25, w23
    163c:	cmp	w1, #0x31
    1640:	b.ne	a6c <BZ2_compressBlock+0x5b4>  // b.any
    1644:	sbfiz	x1, x23, #1, #32
    1648:	sbfiz	x2, x0, #7, #32
    164c:	add	x0, x2, w0, sxtw
    1650:	lsl	x0, x0, #1
    1654:	ldr	x4, [sp, #120]
    1658:	ldrh	w2, [x4, x1]
    165c:	add	x2, x2, x0
    1660:	add	x2, x24, x2, lsl #2
    1664:	add	x2, x2, #0x8, lsl #12
    1668:	ldr	w3, [x2, #12680]
    166c:	add	w3, w3, #0x1
    1670:	str	w3, [x2, #12680]
    1674:	add	x1, x4, x1
    1678:	ldrh	w2, [x1, #2]
    167c:	add	x2, x2, x0
    1680:	add	x2, x24, x2, lsl #2
    1684:	add	x2, x2, #0x8, lsl #12
    1688:	ldr	w3, [x2, #12680]
    168c:	add	w3, w3, #0x1
    1690:	str	w3, [x2, #12680]
    1694:	ldrh	w2, [x1, #4]
    1698:	add	x2, x2, x0
    169c:	add	x2, x24, x2, lsl #2
    16a0:	add	x2, x2, #0x8, lsl #12
    16a4:	ldr	w3, [x2, #12680]
    16a8:	add	w3, w3, #0x1
    16ac:	str	w3, [x2, #12680]
    16b0:	ldrh	w2, [x1, #6]
    16b4:	add	x2, x2, x0
    16b8:	add	x2, x24, x2, lsl #2
    16bc:	add	x2, x2, #0x8, lsl #12
    16c0:	ldr	w3, [x2, #12680]
    16c4:	add	w3, w3, #0x1
    16c8:	str	w3, [x2, #12680]
    16cc:	ldrh	w2, [x1, #8]
    16d0:	add	x2, x2, x0
    16d4:	add	x2, x24, x2, lsl #2
    16d8:	add	x2, x2, #0x8, lsl #12
    16dc:	ldr	w3, [x2, #12680]
    16e0:	add	w3, w3, #0x1
    16e4:	str	w3, [x2, #12680]
    16e8:	ldrh	w2, [x1, #10]
    16ec:	add	x2, x2, x0
    16f0:	add	x2, x24, x2, lsl #2
    16f4:	add	x2, x2, #0x8, lsl #12
    16f8:	ldr	w3, [x2, #12680]
    16fc:	add	w3, w3, #0x1
    1700:	str	w3, [x2, #12680]
    1704:	ldrh	w2, [x1, #12]
    1708:	add	x2, x2, x0
    170c:	add	x2, x24, x2, lsl #2
    1710:	add	x2, x2, #0x8, lsl #12
    1714:	ldr	w3, [x2, #12680]
    1718:	add	w3, w3, #0x1
    171c:	str	w3, [x2, #12680]
    1720:	ldrh	w2, [x1, #14]
    1724:	add	x2, x2, x0
    1728:	add	x2, x24, x2, lsl #2
    172c:	add	x2, x2, #0x8, lsl #12
    1730:	ldr	w3, [x2, #12680]
    1734:	add	w3, w3, #0x1
    1738:	str	w3, [x2, #12680]
    173c:	ldrh	w2, [x1, #16]
    1740:	add	x2, x2, x0
    1744:	add	x2, x24, x2, lsl #2
    1748:	add	x2, x2, #0x8, lsl #12
    174c:	ldr	w3, [x2, #12680]
    1750:	add	w3, w3, #0x1
    1754:	str	w3, [x2, #12680]
    1758:	ldrh	w2, [x1, #18]
    175c:	add	x2, x2, x0
    1760:	add	x2, x24, x2, lsl #2
    1764:	add	x2, x2, #0x8, lsl #12
    1768:	ldr	w3, [x2, #12680]
    176c:	add	w3, w3, #0x1
    1770:	str	w3, [x2, #12680]
    1774:	ldrh	w2, [x1, #20]
    1778:	add	x2, x2, x0
    177c:	add	x2, x24, x2, lsl #2
    1780:	add	x2, x2, #0x8, lsl #12
    1784:	ldr	w3, [x2, #12680]
    1788:	add	w3, w3, #0x1
    178c:	str	w3, [x2, #12680]
    1790:	ldrh	w2, [x1, #22]
    1794:	add	x2, x2, x0
    1798:	add	x2, x24, x2, lsl #2
    179c:	add	x2, x2, #0x8, lsl #12
    17a0:	ldr	w3, [x2, #12680]
    17a4:	add	w3, w3, #0x1
    17a8:	str	w3, [x2, #12680]
    17ac:	ldrh	w2, [x1, #24]
    17b0:	add	x2, x2, x0
    17b4:	add	x2, x24, x2, lsl #2
    17b8:	add	x2, x2, #0x8, lsl #12
    17bc:	ldr	w3, [x2, #12680]
    17c0:	add	w3, w3, #0x1
    17c4:	str	w3, [x2, #12680]
    17c8:	ldrh	w2, [x1, #26]
    17cc:	add	x2, x2, x0
    17d0:	add	x2, x24, x2, lsl #2
    17d4:	add	x2, x2, #0x8, lsl #12
    17d8:	ldr	w3, [x2, #12680]
    17dc:	add	w3, w3, #0x1
    17e0:	str	w3, [x2, #12680]
    17e4:	ldrh	w2, [x1, #28]
    17e8:	add	x2, x2, x0
    17ec:	add	x2, x24, x2, lsl #2
    17f0:	add	x2, x2, #0x8, lsl #12
    17f4:	ldr	w3, [x2, #12680]
    17f8:	add	w3, w3, #0x1
    17fc:	str	w3, [x2, #12680]
    1800:	ldrh	w2, [x1, #30]
    1804:	add	x2, x2, x0
    1808:	add	x2, x24, x2, lsl #2
    180c:	add	x2, x2, #0x8, lsl #12
    1810:	ldr	w3, [x2, #12680]
    1814:	add	w3, w3, #0x1
    1818:	str	w3, [x2, #12680]
    181c:	ldrh	w2, [x1, #32]
    1820:	add	x2, x2, x0
    1824:	add	x2, x24, x2, lsl #2
    1828:	add	x2, x2, #0x8, lsl #12
    182c:	ldr	w3, [x2, #12680]
    1830:	add	w3, w3, #0x1
    1834:	str	w3, [x2, #12680]
    1838:	ldrh	w2, [x1, #34]
    183c:	add	x2, x2, x0
    1840:	add	x2, x24, x2, lsl #2
    1844:	add	x2, x2, #0x8, lsl #12
    1848:	ldr	w3, [x2, #12680]
    184c:	add	w3, w3, #0x1
    1850:	str	w3, [x2, #12680]
    1854:	ldrh	w2, [x1, #36]
    1858:	add	x2, x2, x0
    185c:	add	x2, x24, x2, lsl #2
    1860:	add	x2, x2, #0x8, lsl #12
    1864:	ldr	w3, [x2, #12680]
    1868:	add	w3, w3, #0x1
    186c:	str	w3, [x2, #12680]
    1870:	ldrh	w2, [x1, #38]
    1874:	add	x2, x2, x0
    1878:	add	x2, x24, x2, lsl #2
    187c:	add	x2, x2, #0x8, lsl #12
    1880:	ldr	w3, [x2, #12680]
    1884:	add	w3, w3, #0x1
    1888:	str	w3, [x2, #12680]
    188c:	ldrh	w2, [x1, #40]
    1890:	add	x2, x2, x0
    1894:	add	x2, x24, x2, lsl #2
    1898:	add	x2, x2, #0x8, lsl #12
    189c:	ldr	w3, [x2, #12680]
    18a0:	add	w3, w3, #0x1
    18a4:	str	w3, [x2, #12680]
    18a8:	ldrh	w2, [x1, #42]
    18ac:	add	x2, x2, x0
    18b0:	add	x2, x24, x2, lsl #2
    18b4:	add	x2, x2, #0x8, lsl #12
    18b8:	ldr	w3, [x2, #12680]
    18bc:	add	w3, w3, #0x1
    18c0:	str	w3, [x2, #12680]
    18c4:	ldrh	w2, [x1, #44]
    18c8:	add	x2, x2, x0
    18cc:	add	x2, x24, x2, lsl #2
    18d0:	add	x2, x2, #0x8, lsl #12
    18d4:	ldr	w3, [x2, #12680]
    18d8:	add	w3, w3, #0x1
    18dc:	str	w3, [x2, #12680]
    18e0:	ldrh	w2, [x1, #46]
    18e4:	add	x2, x2, x0
    18e8:	add	x2, x24, x2, lsl #2
    18ec:	add	x2, x2, #0x8, lsl #12
    18f0:	ldr	w3, [x2, #12680]
    18f4:	add	w3, w3, #0x1
    18f8:	str	w3, [x2, #12680]
    18fc:	ldrh	w2, [x1, #48]
    1900:	add	x2, x2, x0
    1904:	add	x2, x24, x2, lsl #2
    1908:	add	x2, x2, #0x8, lsl #12
    190c:	ldr	w3, [x2, #12680]
    1910:	add	w3, w3, #0x1
    1914:	str	w3, [x2, #12680]
    1918:	ldrh	w2, [x1, #50]
    191c:	add	x2, x2, x0
    1920:	add	x2, x24, x2, lsl #2
    1924:	add	x2, x2, #0x8, lsl #12
    1928:	ldr	w3, [x2, #12680]
    192c:	add	w3, w3, #0x1
    1930:	str	w3, [x2, #12680]
    1934:	ldrh	w2, [x1, #52]
    1938:	add	x2, x2, x0
    193c:	add	x2, x24, x2, lsl #2
    1940:	add	x2, x2, #0x8, lsl #12
    1944:	ldr	w3, [x2, #12680]
    1948:	add	w3, w3, #0x1
    194c:	str	w3, [x2, #12680]
    1950:	ldrh	w2, [x1, #54]
    1954:	add	x2, x2, x0
    1958:	add	x2, x24, x2, lsl #2
    195c:	add	x2, x2, #0x8, lsl #12
    1960:	ldr	w3, [x2, #12680]
    1964:	add	w3, w3, #0x1
    1968:	str	w3, [x2, #12680]
    196c:	ldrh	w2, [x1, #56]
    1970:	add	x2, x2, x0
    1974:	add	x2, x24, x2, lsl #2
    1978:	add	x2, x2, #0x8, lsl #12
    197c:	ldr	w3, [x2, #12680]
    1980:	add	w3, w3, #0x1
    1984:	str	w3, [x2, #12680]
    1988:	ldrh	w2, [x1, #58]
    198c:	add	x2, x2, x0
    1990:	add	x2, x24, x2, lsl #2
    1994:	add	x2, x2, #0x8, lsl #12
    1998:	ldr	w3, [x2, #12680]
    199c:	add	w3, w3, #0x1
    19a0:	str	w3, [x2, #12680]
    19a4:	ldrh	w2, [x1, #60]
    19a8:	add	x2, x2, x0
    19ac:	add	x2, x24, x2, lsl #2
    19b0:	add	x2, x2, #0x8, lsl #12
    19b4:	ldr	w3, [x2, #12680]
    19b8:	add	w3, w3, #0x1
    19bc:	str	w3, [x2, #12680]
    19c0:	ldrh	w2, [x1, #62]
    19c4:	add	x2, x2, x0
    19c8:	add	x2, x24, x2, lsl #2
    19cc:	add	x2, x2, #0x8, lsl #12
    19d0:	ldr	w3, [x2, #12680]
    19d4:	add	w3, w3, #0x1
    19d8:	str	w3, [x2, #12680]
    19dc:	ldrh	w2, [x1, #64]
    19e0:	add	x2, x2, x0
    19e4:	add	x2, x24, x2, lsl #2
    19e8:	add	x2, x2, #0x8, lsl #12
    19ec:	ldr	w3, [x2, #12680]
    19f0:	add	w3, w3, #0x1
    19f4:	str	w3, [x2, #12680]
    19f8:	ldrh	w2, [x1, #66]
    19fc:	add	x2, x2, x0
    1a00:	add	x2, x24, x2, lsl #2
    1a04:	add	x2, x2, #0x8, lsl #12
    1a08:	ldr	w3, [x2, #12680]
    1a0c:	add	w3, w3, #0x1
    1a10:	str	w3, [x2, #12680]
    1a14:	ldrh	w2, [x1, #68]
    1a18:	add	x2, x2, x0
    1a1c:	add	x2, x24, x2, lsl #2
    1a20:	add	x2, x2, #0x8, lsl #12
    1a24:	ldr	w3, [x2, #12680]
    1a28:	add	w3, w3, #0x1
    1a2c:	str	w3, [x2, #12680]
    1a30:	ldrh	w2, [x1, #70]
    1a34:	add	x2, x2, x0
    1a38:	add	x2, x24, x2, lsl #2
    1a3c:	add	x2, x2, #0x8, lsl #12
    1a40:	ldr	w3, [x2, #12680]
    1a44:	add	w3, w3, #0x1
    1a48:	str	w3, [x2, #12680]
    1a4c:	ldrh	w2, [x1, #72]
    1a50:	add	x2, x2, x0
    1a54:	add	x2, x24, x2, lsl #2
    1a58:	add	x2, x2, #0x8, lsl #12
    1a5c:	ldr	w3, [x2, #12680]
    1a60:	add	w3, w3, #0x1
    1a64:	str	w3, [x2, #12680]
    1a68:	ldrh	w2, [x1, #74]
    1a6c:	add	x2, x2, x0
    1a70:	add	x2, x24, x2, lsl #2
    1a74:	add	x2, x2, #0x8, lsl #12
    1a78:	ldr	w3, [x2, #12680]
    1a7c:	add	w3, w3, #0x1
    1a80:	str	w3, [x2, #12680]
    1a84:	ldrh	w2, [x1, #76]
    1a88:	add	x2, x2, x0
    1a8c:	add	x2, x24, x2, lsl #2
    1a90:	add	x2, x2, #0x8, lsl #12
    1a94:	ldr	w3, [x2, #12680]
    1a98:	add	w3, w3, #0x1
    1a9c:	str	w3, [x2, #12680]
    1aa0:	ldrh	w2, [x1, #78]
    1aa4:	add	x2, x2, x0
    1aa8:	add	x2, x24, x2, lsl #2
    1aac:	add	x2, x2, #0x8, lsl #12
    1ab0:	ldr	w3, [x2, #12680]
    1ab4:	add	w3, w3, #0x1
    1ab8:	str	w3, [x2, #12680]
    1abc:	ldrh	w2, [x1, #80]
    1ac0:	add	x2, x2, x0
    1ac4:	add	x2, x24, x2, lsl #2
    1ac8:	add	x2, x2, #0x8, lsl #12
    1acc:	ldr	w3, [x2, #12680]
    1ad0:	add	w3, w3, #0x1
    1ad4:	str	w3, [x2, #12680]
    1ad8:	ldrh	w2, [x1, #82]
    1adc:	add	x2, x2, x0
    1ae0:	add	x2, x24, x2, lsl #2
    1ae4:	add	x2, x2, #0x8, lsl #12
    1ae8:	ldr	w3, [x2, #12680]
    1aec:	add	w3, w3, #0x1
    1af0:	str	w3, [x2, #12680]
    1af4:	ldrh	w2, [x1, #84]
    1af8:	add	x2, x2, x0
    1afc:	add	x2, x24, x2, lsl #2
    1b00:	add	x2, x2, #0x8, lsl #12
    1b04:	ldr	w3, [x2, #12680]
    1b08:	add	w3, w3, #0x1
    1b0c:	str	w3, [x2, #12680]
    1b10:	ldrh	w2, [x1, #86]
    1b14:	add	x2, x2, x0
    1b18:	add	x2, x24, x2, lsl #2
    1b1c:	add	x2, x2, #0x8, lsl #12
    1b20:	ldr	w3, [x2, #12680]
    1b24:	add	w3, w3, #0x1
    1b28:	str	w3, [x2, #12680]
    1b2c:	ldrh	w2, [x1, #88]
    1b30:	add	x2, x2, x0
    1b34:	add	x2, x24, x2, lsl #2
    1b38:	add	x2, x2, #0x8, lsl #12
    1b3c:	ldr	w3, [x2, #12680]
    1b40:	add	w3, w3, #0x1
    1b44:	str	w3, [x2, #12680]
    1b48:	ldrh	w2, [x1, #90]
    1b4c:	add	x2, x2, x0
    1b50:	add	x2, x24, x2, lsl #2
    1b54:	add	x2, x2, #0x8, lsl #12
    1b58:	ldr	w3, [x2, #12680]
    1b5c:	add	w3, w3, #0x1
    1b60:	str	w3, [x2, #12680]
    1b64:	ldrh	w2, [x1, #92]
    1b68:	add	x2, x2, x0
    1b6c:	add	x2, x24, x2, lsl #2
    1b70:	add	x2, x2, #0x8, lsl #12
    1b74:	ldr	w3, [x2, #12680]
    1b78:	add	w3, w3, #0x1
    1b7c:	str	w3, [x2, #12680]
    1b80:	ldrh	w2, [x1, #94]
    1b84:	add	x2, x2, x0
    1b88:	add	x2, x24, x2, lsl #2
    1b8c:	add	x2, x2, #0x8, lsl #12
    1b90:	ldr	w3, [x2, #12680]
    1b94:	add	w3, w3, #0x1
    1b98:	str	w3, [x2, #12680]
    1b9c:	ldrh	w2, [x1, #96]
    1ba0:	add	x2, x2, x0
    1ba4:	add	x2, x24, x2, lsl #2
    1ba8:	add	x2, x2, #0x8, lsl #12
    1bac:	ldr	w3, [x2, #12680]
    1bb0:	add	w3, w3, #0x1
    1bb4:	str	w3, [x2, #12680]
    1bb8:	ldrh	w1, [x1, #98]
    1bbc:	add	x0, x1, x0
    1bc0:	add	x0, x24, x0, lsl #2
    1bc4:	add	x0, x0, #0x8, lsl #12
    1bc8:	ldr	w1, [x0, #12680]
    1bcc:	add	w1, w1, #0x1
    1bd0:	str	w1, [x0, #12680]
    1bd4:	b	ab0 <BZ2_compressBlock+0x5f8>
    1bd8:	ldr	w0, [sp, #112]
    1bdc:	mov	w19, w0
    1be0:	str	w0, [sp, #148]
    1be4:	ldr	w0, [x24, #656]
    1be8:	cmp	w0, #0x2
    1bec:	b.gt	1cbc <BZ2_compressBlock+0x1804>
    1bf0:	ldr	x20, [sp, #240]
    1bf4:	mov	w21, #0x11                  	// #17
    1bf8:	ldr	x22, [sp, #264]
    1bfc:	mov	w3, w21
    1c00:	ldr	w2, [sp, #144]
    1c04:	mov	x1, x22
    1c08:	mov	x0, x20
    1c0c:	bl	0 <BZ2_hbMakeCodeLengths>
    1c10:	add	x20, x20, #0x102
    1c14:	add	x22, x22, #0x408
    1c18:	ldr	x0, [sp, #472]
    1c1c:	cmp	x0, x20
    1c20:	b.ne	1bfc <BZ2_compressBlock+0x1744>  // b.any
    1c24:	ldr	w0, [sp, #256]
    1c28:	subs	w0, w0, #0x1
    1c2c:	str	w0, [sp, #256]
    1c30:	b.eq	1d30 <BZ2_compressBlock+0x1878>  // b.none
    1c34:	add	x0, sp, #0x228
    1c38:	str	wzr, [x0], #4
    1c3c:	ldr	x1, [sp, #456]
    1c40:	cmp	x1, x0
    1c44:	b.ne	1c38 <BZ2_compressBlock+0x1780>  // b.any
    1c48:	add	x0, x24, #0xb, lsl #12
    1c4c:	add	x0, x0, #0x188
    1c50:	str	x0, [sp, #264]
    1c54:	ldr	w2, [sp, #144]
    1c58:	mov	x1, #0x0                   	// #0
    1c5c:	cmp	w2, #0x0
    1c60:	b.le	1c74 <BZ2_compressBlock+0x17bc>
    1c64:	str	wzr, [x0, x1, lsl #2]
    1c68:	add	x1, x1, #0x1
    1c6c:	cmp	w2, w1
    1c70:	b.gt	1c64 <BZ2_compressBlock+0x17ac>
    1c74:	add	x0, x0, #0x408
    1c78:	ldr	x1, [sp, #480]
    1c7c:	cmp	x0, x1
    1c80:	b.ne	1c58 <BZ2_compressBlock+0x17a0>  // b.any
    1c84:	ldr	w0, [sp, #128]
    1c88:	cmp	w0, #0x6
    1c8c:	b.eq	9b4 <BZ2_compressBlock+0x4fc>  // b.none
    1c90:	ldr	w1, [x24, #668]
    1c94:	cmp	w1, #0x0
    1c98:	b.le	1bd8 <BZ2_compressBlock+0x1720>
    1c9c:	ldr	w8, [sp, #112]
    1ca0:	str	w8, [sp, #148]
    1ca4:	mov	x0, #0x1                   	// #1
    1ca8:	str	x0, [sp, #136]
    1cac:	add	x0, x24, #0x6a7
    1cb0:	str	x0, [sp, #448]
    1cb4:	mov	w23, w8
    1cb8:	b	acc <BZ2_compressBlock+0x614>
    1cbc:	ldr	w0, [sp, #148]
    1cc0:	add	w3, w0, #0x7
    1cc4:	cmp	w0, #0x0
    1cc8:	csel	w3, w3, w0, lt  // lt = tstop
    1ccc:	asr	w3, w3, #3
    1cd0:	mov	w2, #0x5                   	// #5
    1cd4:	ldr	w0, [sp, #256]
    1cd8:	sub	w2, w2, w0
    1cdc:	adrp	x1, 0 <bsFinishWrite>
    1ce0:	add	x1, x1, #0x0
    1ce4:	adrp	x0, 0 <stderr>
    1ce8:	ldr	x0, [x0]
    1cec:	bl	0 <fprintf>
    1cf0:	add	x20, sp, #0x228
    1cf4:	adrp	x21, 0 <bsFinishWrite>
    1cf8:	add	x21, x21, #0x0
    1cfc:	adrp	x22, 0 <stderr>
    1d00:	ldr	x23, [sp, #456]
    1d04:	ldr	w2, [x20], #4
    1d08:	mov	x1, x21
    1d0c:	ldr	x0, [x22]
    1d10:	bl	0 <fprintf>
    1d14:	cmp	x23, x20
    1d18:	b.ne	1d04 <BZ2_compressBlock+0x184c>  // b.any
    1d1c:	adrp	x0, 0 <stderr>
    1d20:	ldr	x1, [x0]
    1d24:	mov	w0, #0xa                   	// #10
    1d28:	bl	0 <fputc>
    1d2c:	b	1bf0 <BZ2_compressBlock+0x1738>
    1d30:	ldr	x27, [sp, #120]
    1d34:	mov	x26, x24
    1d38:	mov	w0, #0x4652                	// #18002
    1d3c:	cmp	w19, w0
    1d40:	b.gt	1d80 <BZ2_compressBlock+0x18c8>
    1d44:	add	x0, sp, #0x218
    1d48:	ldr	w22, [sp, #112]
    1d4c:	ldr	w1, [sp, #128]
    1d50:	strb	w22, [x0], #1
    1d54:	mov	w24, w22
    1d58:	add	w22, w22, #0x1
    1d5c:	cmp	w1, w22
    1d60:	b.ne	1d50 <BZ2_compressBlock+0x1898>  // b.any
    1d64:	cmp	w19, #0x0
    1d68:	b.le	1ddc <BZ2_compressBlock+0x1924>
    1d6c:	mov	x1, #0x0                   	// #0
    1d70:	add	x7, x26, #0x6a8
    1d74:	add	x6, x26, #0x4, lsl #12
    1d78:	add	x6, x6, #0xcfa
    1d7c:	b	1db8 <BZ2_compressBlock+0x1900>
    1d80:	mov	w0, #0xbbb                 	// #3003
    1d84:	bl	0 <BZ2_bz__AssertH__fail>
    1d88:	b	1d44 <BZ2_compressBlock+0x188c>
    1d8c:	add	w2, w2, #0x1
    1d90:	mov	w5, w0
    1d94:	ldrb	w0, [x3, #1]
    1d98:	strb	w5, [x3, #1]!
    1d9c:	cmp	w4, w0
    1da0:	b.ne	1d8c <BZ2_compressBlock+0x18d4>  // b.any
    1da4:	strb	w0, [sp, #536]
    1da8:	strb	w2, [x6, x1]
    1dac:	add	x1, x1, #0x1
    1db0:	cmp	w19, w1
    1db4:	b.le	1ddc <BZ2_compressBlock+0x1924>
    1db8:	ldrb	w4, [x7, x1]
    1dbc:	ldrb	w0, [sp, #536]
    1dc0:	cmp	w4, w0
    1dc4:	b.eq	1dd4 <BZ2_compressBlock+0x191c>  // b.none
    1dc8:	add	x3, sp, #0x218
    1dcc:	ldr	w2, [sp, #112]
    1dd0:	b	1d8c <BZ2_compressBlock+0x18d4>
    1dd4:	ldr	w2, [sp, #112]
    1dd8:	b	1da4 <BZ2_compressBlock+0x18ec>
    1ddc:	add	x25, x26, #0x9, lsl #12
    1de0:	add	x25, x25, #0x958
    1de4:	str	w22, [sp, #120]
    1de8:	ubfiz	x0, x24, #7, #32
    1dec:	add	x24, x0, w24, uxtw
    1df0:	ldr	x0, [sp, #496]
    1df4:	add	x24, x0, x24, lsl #1
    1df8:	ldr	x23, [sp, #240]
    1dfc:	mov	w28, #0xbbc                 	// #3004
    1e00:	str	x27, [sp, #128]
    1e04:	ldr	w27, [sp, #144]
    1e08:	b	1e44 <BZ2_compressBlock+0x198c>
    1e0c:	mov	w0, w28
    1e10:	bl	0 <BZ2_bz__AssertH__fail>
    1e14:	cmp	w20, #0x0
    1e18:	b.le	1e84 <BZ2_compressBlock+0x19cc>
    1e1c:	mov	w4, w27
    1e20:	mov	w3, w21
    1e24:	mov	w2, w20
    1e28:	mov	x1, x23
    1e2c:	mov	x0, x25
    1e30:	bl	0 <BZ2_hbAssignCodes>
    1e34:	add	x25, x25, #0x408
    1e38:	add	x23, x23, #0x102
    1e3c:	cmp	x24, x23
    1e40:	b.eq	1e98 <BZ2_compressBlock+0x19e0>  // b.none
    1e44:	ldr	w21, [sp, #112]
    1e48:	mov	x0, #0x0                   	// #0
    1e4c:	mov	w20, #0x20                  	// #32
    1e50:	cmp	w27, #0x0
    1e54:	b.le	1e90 <BZ2_compressBlock+0x19d8>
    1e58:	ldrb	w1, [x23, x0]
    1e5c:	cmp	w21, w1
    1e60:	csel	w21, w21, w1, ge  // ge = tcont
    1e64:	cmp	w20, w1
    1e68:	csel	w20, w20, w1, le
    1e6c:	add	x0, x0, #0x1
    1e70:	cmp	w27, w0
    1e74:	b.gt	1e58 <BZ2_compressBlock+0x19a0>
    1e78:	cmp	w21, #0x11
    1e7c:	b.le	1e14 <BZ2_compressBlock+0x195c>
    1e80:	b	1e0c <BZ2_compressBlock+0x1954>
    1e84:	mov	w0, #0xbbd                 	// #3005
    1e88:	bl	0 <BZ2_bz__AssertH__fail>
    1e8c:	b	1e1c <BZ2_compressBlock+0x1964>
    1e90:	ldr	w21, [sp, #112]
    1e94:	b	1e1c <BZ2_compressBlock+0x1964>
    1e98:	ldr	x27, [sp, #128]
    1e9c:	add	x4, sp, #0x218
    1ea0:	mov	x2, x4
    1ea4:	mov	x0, #0x0                   	// #0
    1ea8:	ldr	x1, [sp, #488]
    1eac:	add	x6, x1, #0x80
    1eb0:	mov	w9, #0x1                   	// #1
    1eb4:	add	x5, x1, #0x90
    1eb8:	b	1ee8 <BZ2_compressBlock+0x1a30>
    1ebc:	strb	w9, [x7]
    1ec0:	add	x1, x1, #0x1
    1ec4:	cmp	x1, x3
    1ec8:	b.eq	1ed8 <BZ2_compressBlock+0x1a20>  // b.none
    1ecc:	ldrb	w8, [x1]
    1ed0:	cbz	w8, 1ec0 <BZ2_compressBlock+0x1a08>
    1ed4:	b	1ebc <BZ2_compressBlock+0x1a04>
    1ed8:	add	x2, x2, #0x1
    1edc:	add	x0, x0, #0x10
    1ee0:	cmp	x0, #0x100
    1ee4:	b.eq	1efc <BZ2_compressBlock+0x1a44>  // b.none
    1ee8:	mov	x7, x2
    1eec:	strb	wzr, [x2]
    1ef0:	add	x1, x6, x0
    1ef4:	add	x3, x5, x0
    1ef8:	b	1ecc <BZ2_compressBlock+0x1a14>
    1efc:	ldr	w2, [x26, #116]
    1f00:	add	x8, x4, #0x10
    1f04:	mov	x1, x4
    1f08:	mov	w7, #0x80000000            	// #-2147483648
    1f0c:	b	1f7c <BZ2_compressBlock+0x1ac4>
    1f10:	ldr	w0, [x26, #644]
    1f14:	cmp	w0, #0x7
    1f18:	b.le	1f58 <BZ2_compressBlock+0x1aa0>
    1f1c:	ldrsw	x0, [x26, #116]
    1f20:	ldr	x3, [x26, #80]
    1f24:	ldrb	w9, [x26, #643]
    1f28:	strb	w9, [x3, x0]
    1f2c:	ldr	w0, [x26, #116]
    1f30:	add	w0, w0, #0x1
    1f34:	str	w0, [x26, #116]
    1f38:	ldr	w0, [x26, #640]
    1f3c:	lsl	w0, w0, #8
    1f40:	str	w0, [x26, #640]
    1f44:	ldr	w0, [x26, #644]
    1f48:	sub	w0, w0, #0x8
    1f4c:	str	w0, [x26, #644]
    1f50:	cmp	w0, #0x7
    1f54:	b.gt	1f1c <BZ2_compressBlock+0x1a64>
    1f58:	lsr	w9, w7, w0
    1f5c:	ldr	w3, [x26, #640]
    1f60:	orr	w3, w3, w9
    1f64:	str	w3, [x26, #640]
    1f68:	add	w0, w0, #0x1
    1f6c:	str	w0, [x26, #644]
    1f70:	add	x1, x1, #0x1
    1f74:	cmp	x1, x8
    1f78:	b.eq	1fd8 <BZ2_compressBlock+0x1b20>  // b.none
    1f7c:	ldrb	w0, [x1]
    1f80:	cbnz	w0, 1f10 <BZ2_compressBlock+0x1a58>
    1f84:	ldr	w0, [x26, #644]
    1f88:	cmp	w0, #0x7
    1f8c:	b.le	1fcc <BZ2_compressBlock+0x1b14>
    1f90:	ldrsw	x0, [x26, #116]
    1f94:	ldr	x3, [x26, #80]
    1f98:	ldrb	w9, [x26, #643]
    1f9c:	strb	w9, [x3, x0]
    1fa0:	ldr	w0, [x26, #116]
    1fa4:	add	w0, w0, #0x1
    1fa8:	str	w0, [x26, #116]
    1fac:	ldr	w0, [x26, #640]
    1fb0:	lsl	w0, w0, #8
    1fb4:	str	w0, [x26, #640]
    1fb8:	ldr	w0, [x26, #644]
    1fbc:	sub	w0, w0, #0x8
    1fc0:	str	w0, [x26, #644]
    1fc4:	cmp	w0, #0x7
    1fc8:	b.gt	1f90 <BZ2_compressBlock+0x1ad8>
    1fcc:	add	w0, w0, #0x1
    1fd0:	str	w0, [x26, #644]
    1fd4:	b	1f70 <BZ2_compressBlock+0x1ab8>
    1fd8:	mov	x1, #0x0                   	// #0
    1fdc:	mov	w9, #0x80000000            	// #-2147483648
    1fe0:	b	20bc <BZ2_compressBlock+0x1c04>
    1fe4:	ldr	w0, [x26, #644]
    1fe8:	cmp	w0, #0x7
    1fec:	b.le	202c <BZ2_compressBlock+0x1b74>
    1ff0:	ldrsw	x0, [x26, #116]
    1ff4:	ldr	x7, [x26, #80]
    1ff8:	ldrb	w10, [x26, #643]
    1ffc:	strb	w10, [x7, x0]
    2000:	ldr	w0, [x26, #116]
    2004:	add	w0, w0, #0x1
    2008:	str	w0, [x26, #116]
    200c:	ldr	w0, [x26, #640]
    2010:	lsl	w0, w0, #8
    2014:	str	w0, [x26, #640]
    2018:	ldr	w0, [x26, #644]
    201c:	sub	w0, w0, #0x8
    2020:	str	w0, [x26, #644]
    2024:	cmp	w0, #0x7
    2028:	b.gt	1ff0 <BZ2_compressBlock+0x1b38>
    202c:	lsr	w10, w9, w0
    2030:	ldr	w7, [x26, #640]
    2034:	orr	w7, w7, w10
    2038:	str	w7, [x26, #640]
    203c:	add	w0, w0, #0x1
    2040:	str	w0, [x26, #644]
    2044:	add	x3, x3, #0x1
    2048:	cmp	x8, x3
    204c:	b.eq	20ac <BZ2_compressBlock+0x1bf4>  // b.none
    2050:	ldrb	w0, [x3]
    2054:	cbnz	w0, 1fe4 <BZ2_compressBlock+0x1b2c>
    2058:	ldr	w0, [x26, #644]
    205c:	cmp	w0, #0x7
    2060:	b.le	20a0 <BZ2_compressBlock+0x1be8>
    2064:	ldrsw	x0, [x26, #116]
    2068:	ldr	x7, [x26, #80]
    206c:	ldrb	w10, [x26, #643]
    2070:	strb	w10, [x7, x0]
    2074:	ldr	w0, [x26, #116]
    2078:	add	w0, w0, #0x1
    207c:	str	w0, [x26, #116]
    2080:	ldr	w0, [x26, #640]
    2084:	lsl	w0, w0, #8
    2088:	str	w0, [x26, #640]
    208c:	ldr	w0, [x26, #644]
    2090:	sub	w0, w0, #0x8
    2094:	str	w0, [x26, #644]
    2098:	cmp	w0, #0x7
    209c:	b.gt	2064 <BZ2_compressBlock+0x1bac>
    20a0:	add	w0, w0, #0x1
    20a4:	str	w0, [x26, #644]
    20a8:	b	2044 <BZ2_compressBlock+0x1b8c>
    20ac:	add	x4, x4, #0x1
    20b0:	add	x1, x1, #0x10
    20b4:	cmp	x1, #0x100
    20b8:	b.eq	20d0 <BZ2_compressBlock+0x1c18>  // b.none
    20bc:	ldrb	w0, [x4]
    20c0:	cbz	w0, 20ac <BZ2_compressBlock+0x1bf4>
    20c4:	add	x3, x6, x1
    20c8:	add	x8, x5, x1
    20cc:	b	2050 <BZ2_compressBlock+0x1b98>
    20d0:	ldr	w0, [x26, #656]
    20d4:	cmp	w0, #0x2
    20d8:	b.gt	21dc <BZ2_compressBlock+0x1d24>
    20dc:	ldr	w2, [x26, #116]
    20e0:	ldr	w0, [x26, #644]
    20e4:	cmp	w0, #0x7
    20e8:	b.le	2128 <BZ2_compressBlock+0x1c70>
    20ec:	ldrsw	x0, [x26, #116]
    20f0:	ldr	x1, [x26, #80]
    20f4:	ldrb	w3, [x26, #643]
    20f8:	strb	w3, [x1, x0]
    20fc:	ldr	w0, [x26, #116]
    2100:	add	w0, w0, #0x1
    2104:	str	w0, [x26, #116]
    2108:	ldr	w0, [x26, #640]
    210c:	lsl	w0, w0, #8
    2110:	str	w0, [x26, #640]
    2114:	ldr	w0, [x26, #644]
    2118:	sub	w0, w0, #0x8
    211c:	str	w0, [x26, #644]
    2120:	cmp	w0, #0x7
    2124:	b.gt	20ec <BZ2_compressBlock+0x1c34>
    2128:	mov	w1, #0x1d                  	// #29
    212c:	sub	w1, w1, w0
    2130:	ldr	w3, [sp, #120]
    2134:	lsl	w28, w3, w1
    2138:	ldr	w1, [x26, #640]
    213c:	orr	w28, w1, w28
    2140:	str	w28, [x26, #640]
    2144:	add	w0, w0, #0x3
    2148:	str	w0, [x26, #644]
    214c:	mov	w4, w19
    2150:	cmp	w0, #0x7
    2154:	b.le	2194 <BZ2_compressBlock+0x1cdc>
    2158:	ldrsw	x0, [x26, #116]
    215c:	ldr	x1, [x26, #80]
    2160:	ldrb	w3, [x26, #643]
    2164:	strb	w3, [x1, x0]
    2168:	ldr	w0, [x26, #116]
    216c:	add	w0, w0, #0x1
    2170:	str	w0, [x26, #116]
    2174:	ldr	w0, [x26, #640]
    2178:	lsl	w0, w0, #8
    217c:	str	w0, [x26, #640]
    2180:	ldr	w0, [x26, #644]
    2184:	sub	w0, w0, #0x8
    2188:	str	w0, [x26, #644]
    218c:	cmp	w0, #0x7
    2190:	b.gt	2158 <BZ2_compressBlock+0x1ca0>
    2194:	mov	w1, #0x11                  	// #17
    2198:	sub	w1, w1, w0
    219c:	lsl	w1, w4, w1
    21a0:	ldr	w3, [x26, #640]
    21a4:	orr	w1, w3, w1
    21a8:	str	w1, [x26, #640]
    21ac:	add	w0, w0, #0xf
    21b0:	str	w0, [x26, #644]
    21b4:	cmp	w19, #0x0
    21b8:	b.le	22e0 <BZ2_compressBlock+0x1e28>
    21bc:	add	x3, x26, #0x4, lsl #12
    21c0:	add	x3, x3, #0xcfa
    21c4:	sub	w4, w4, #0x1
    21c8:	add	x0, x26, #0x4, lsl #12
    21cc:	add	x0, x0, #0xcfb
    21d0:	add	x4, x4, x0
    21d4:	mov	w5, #0x80000000            	// #-2147483648
    21d8:	b	22cc <BZ2_compressBlock+0x1e14>
    21dc:	ldr	w0, [x26, #116]
    21e0:	sub	w2, w0, w2
    21e4:	adrp	x1, 0 <bsFinishWrite>
    21e8:	add	x1, x1, #0x0
    21ec:	adrp	x0, 0 <stderr>
    21f0:	ldr	x0, [x0]
    21f4:	bl	0 <fprintf>
    21f8:	b	20dc <BZ2_compressBlock+0x1c24>
    21fc:	ldrsw	x0, [x26, #116]
    2200:	ldr	x6, [x26, #80]
    2204:	ldrb	w8, [x26, #643]
    2208:	strb	w8, [x6, x0]
    220c:	ldr	w0, [x26, #116]
    2210:	add	w0, w0, #0x1
    2214:	str	w0, [x26, #116]
    2218:	ldr	w0, [x26, #640]
    221c:	lsl	w0, w0, #8
    2220:	str	w0, [x26, #640]
    2224:	ldr	w0, [x26, #644]
    2228:	sub	w0, w0, #0x8
    222c:	str	w0, [x26, #644]
    2230:	cmp	w0, #0x7
    2234:	b.gt	21fc <BZ2_compressBlock+0x1d44>
    2238:	lsr	w8, w5, w0
    223c:	ldr	w6, [x26, #640]
    2240:	orr	w6, w6, w8
    2244:	str	w6, [x26, #640]
    2248:	add	w0, w0, #0x1
    224c:	str	w0, [x26, #644]
    2250:	add	w1, w1, #0x1
    2254:	ldrb	w0, [x7]
    2258:	cmp	w1, w0
    225c:	b.ge	2270 <BZ2_compressBlock+0x1db8>  // b.tcont
    2260:	ldr	w0, [x26, #644]
    2264:	cmp	w0, #0x7
    2268:	b.gt	21fc <BZ2_compressBlock+0x1d44>
    226c:	b	2238 <BZ2_compressBlock+0x1d80>
    2270:	ldr	w0, [x26, #644]
    2274:	cmp	w0, #0x7
    2278:	b.le	22b8 <BZ2_compressBlock+0x1e00>
    227c:	ldrsw	x0, [x26, #116]
    2280:	ldr	x1, [x26, #80]
    2284:	ldrb	w6, [x26, #643]
    2288:	strb	w6, [x1, x0]
    228c:	ldr	w0, [x26, #116]
    2290:	add	w0, w0, #0x1
    2294:	str	w0, [x26, #116]
    2298:	ldr	w0, [x26, #640]
    229c:	lsl	w0, w0, #8
    22a0:	str	w0, [x26, #640]
    22a4:	ldr	w0, [x26, #644]
    22a8:	sub	w0, w0, #0x8
    22ac:	str	w0, [x26, #644]
    22b0:	cmp	w0, #0x7
    22b4:	b.gt	227c <BZ2_compressBlock+0x1dc4>
    22b8:	add	w0, w0, #0x1
    22bc:	str	w0, [x26, #644]
    22c0:	add	x3, x3, #0x1
    22c4:	cmp	x4, x3
    22c8:	b.eq	22e0 <BZ2_compressBlock+0x1e28>  // b.none
    22cc:	mov	x7, x3
    22d0:	ldrb	w0, [x3]
    22d4:	ldr	w1, [sp, #112]
    22d8:	cbnz	w0, 2260 <BZ2_compressBlock+0x1da8>
    22dc:	b	2270 <BZ2_compressBlock+0x1db8>
    22e0:	ldr	w0, [x26, #656]
    22e4:	cmp	w0, #0x2
    22e8:	b.gt	2318 <BZ2_compressBlock+0x1e60>
    22ec:	ldr	w2, [x26, #116]
    22f0:	mov	w7, #0x1b                  	// #27
    22f4:	ldr	w0, [sp, #468]
    22f8:	add	w4, w0, #0x1
    22fc:	mov	w5, #0x1e                  	// #30
    2300:	mov	w8, #0x2                   	// #2
    2304:	mov	w6, #0x3                   	// #3
    2308:	add	x4, x4, #0x1
    230c:	ldr	w11, [sp, #144]
    2310:	ldr	x3, [sp, #240]
    2314:	b	24b0 <BZ2_compressBlock+0x1ff8>
    2318:	ldr	w0, [x26, #116]
    231c:	sub	w2, w0, w2
    2320:	adrp	x1, 0 <bsFinishWrite>
    2324:	add	x1, x1, #0x0
    2328:	adrp	x0, 0 <stderr>
    232c:	ldr	x0, [x0]
    2330:	bl	0 <fprintf>
    2334:	b	22ec <BZ2_compressBlock+0x1e34>
    2338:	sub	w13, w5, w0
    233c:	lsl	w14, w8, w13
    2340:	ldr	w13, [x26, #640]
    2344:	orr	w13, w13, w14
    2348:	str	w13, [x26, #640]
    234c:	add	w0, w0, #0x2
    2350:	str	w0, [x26, #644]
    2354:	add	w1, w1, #0x1
    2358:	ldrb	w0, [x10]
    235c:	cmp	w1, w0
    2360:	b.ge	23b0 <BZ2_compressBlock+0x1ef8>  // b.tcont
    2364:	ldr	w0, [x26, #644]
    2368:	cmp	w0, #0x7
    236c:	b.le	2338 <BZ2_compressBlock+0x1e80>
    2370:	ldrsw	x0, [x26, #116]
    2374:	ldr	x13, [x26, #80]
    2378:	ldrb	w14, [x26, #643]
    237c:	strb	w14, [x13, x0]
    2380:	ldr	w0, [x26, #116]
    2384:	add	w0, w0, #0x1
    2388:	str	w0, [x26, #116]
    238c:	ldr	w0, [x26, #640]
    2390:	lsl	w0, w0, #8
    2394:	str	w0, [x26, #640]
    2398:	ldr	w0, [x26, #644]
    239c:	sub	w0, w0, #0x8
    23a0:	str	w0, [x26, #644]
    23a4:	cmp	w0, #0x7
    23a8:	b.gt	2370 <BZ2_compressBlock+0x1eb8>
    23ac:	b	2338 <BZ2_compressBlock+0x1e80>
    23b0:	ldrb	w0, [x10]
    23b4:	cmp	w0, w1
    23b8:	b.lt	2458 <BZ2_compressBlock+0x1fa0>  // b.tstop
    23bc:	ldr	w0, [x26, #644]
    23c0:	cmp	w0, #0x7
    23c4:	b.le	2404 <BZ2_compressBlock+0x1f4c>
    23c8:	ldrsw	x0, [x26, #116]
    23cc:	ldr	x10, [x26, #80]
    23d0:	ldrb	w13, [x26, #643]
    23d4:	strb	w13, [x10, x0]
    23d8:	ldr	w0, [x26, #116]
    23dc:	add	w0, w0, #0x1
    23e0:	str	w0, [x26, #116]
    23e4:	ldr	w0, [x26, #640]
    23e8:	lsl	w0, w0, #8
    23ec:	str	w0, [x26, #640]
    23f0:	ldr	w0, [x26, #644]
    23f4:	sub	w0, w0, #0x8
    23f8:	str	w0, [x26, #644]
    23fc:	cmp	w0, #0x7
    2400:	b.gt	23c8 <BZ2_compressBlock+0x1f10>
    2404:	add	w0, w0, #0x1
    2408:	str	w0, [x26, #644]
    240c:	add	x9, x9, #0x1
    2410:	cmp	x9, x12
    2414:	b.eq	24a4 <BZ2_compressBlock+0x1fec>  // b.none
    2418:	mov	x10, x9
    241c:	ldrb	w0, [x9]
    2420:	cmp	w0, w1
    2424:	b.gt	2364 <BZ2_compressBlock+0x1eac>
    2428:	b	23b0 <BZ2_compressBlock+0x1ef8>
    242c:	sub	w13, w5, w0
    2430:	lsl	w14, w6, w13
    2434:	ldr	w13, [x26, #640]
    2438:	orr	w13, w13, w14
    243c:	str	w13, [x26, #640]
    2440:	add	w0, w0, #0x2
    2444:	str	w0, [x26, #644]
    2448:	sub	w1, w1, #0x1
    244c:	ldrb	w0, [x10]
    2450:	cmp	w1, w0
    2454:	b.le	23bc <BZ2_compressBlock+0x1f04>
    2458:	ldr	w0, [x26, #644]
    245c:	cmp	w0, #0x7
    2460:	b.le	242c <BZ2_compressBlock+0x1f74>
    2464:	ldrsw	x0, [x26, #116]
    2468:	ldr	x13, [x26, #80]
    246c:	ldrb	w14, [x26, #643]
    2470:	strb	w14, [x13, x0]
    2474:	ldr	w0, [x26, #116]
    2478:	add	w0, w0, #0x1
    247c:	str	w0, [x26, #116]
    2480:	ldr	w0, [x26, #640]
    2484:	lsl	w0, w0, #8
    2488:	str	w0, [x26, #640]
    248c:	ldr	w0, [x26, #644]
    2490:	sub	w0, w0, #0x8
    2494:	str	w0, [x26, #644]
    2498:	cmp	w0, #0x7
    249c:	b.gt	2464 <BZ2_compressBlock+0x1fac>
    24a0:	b	242c <BZ2_compressBlock+0x1f74>
    24a4:	add	x3, x3, #0x102
    24a8:	cmp	x3, x24
    24ac:	b.eq	2530 <BZ2_compressBlock+0x2078>  // b.none
    24b0:	ldrb	w1, [x3]
    24b4:	mov	w9, w1
    24b8:	ldr	w0, [x26, #644]
    24bc:	cmp	w0, #0x7
    24c0:	b.le	2500 <BZ2_compressBlock+0x2048>
    24c4:	ldrsw	x0, [x26, #116]
    24c8:	ldr	x10, [x26, #80]
    24cc:	ldrb	w12, [x26, #643]
    24d0:	strb	w12, [x10, x0]
    24d4:	ldr	w0, [x26, #116]
    24d8:	add	w0, w0, #0x1
    24dc:	str	w0, [x26, #116]
    24e0:	ldr	w0, [x26, #640]
    24e4:	lsl	w0, w0, #8
    24e8:	str	w0, [x26, #640]
    24ec:	ldr	w0, [x26, #644]
    24f0:	sub	w0, w0, #0x8
    24f4:	str	w0, [x26, #644]
    24f8:	cmp	w0, #0x7
    24fc:	b.gt	24c4 <BZ2_compressBlock+0x200c>
    2500:	sub	w10, w7, w0
    2504:	lsl	w10, w9, w10
    2508:	ldr	w9, [x26, #640]
    250c:	orr	w9, w9, w10
    2510:	str	w9, [x26, #640]
    2514:	add	w0, w0, #0x5
    2518:	str	w0, [x26, #644]
    251c:	cmp	w11, #0x0
    2520:	b.le	24a4 <BZ2_compressBlock+0x1fec>
    2524:	mov	x9, x3
    2528:	add	x12, x4, x3
    252c:	b	2418 <BZ2_compressBlock+0x1f60>
    2530:	ldr	w0, [x26, #656]
    2534:	cmp	w0, #0x2
    2538:	b.gt	2570 <BZ2_compressBlock+0x20b8>
    253c:	ldr	w0, [x26, #116]
    2540:	str	w0, [sp, #128]
    2544:	ldr	w0, [x26, #668]
    2548:	cmp	w0, #0x0
    254c:	b.le	3da4 <BZ2_compressBlock+0x38ec>
    2550:	mov	x23, #0x1                   	// #1
    2554:	add	x24, x26, #0x6a7
    2558:	mov	w28, #0xbbe                 	// #3006
    255c:	mov	x25, #0x2654                	// #9812
    2560:	mov	w20, #0x20                  	// #32
    2564:	str	w19, [sp, #120]
    2568:	ldr	w19, [sp, #112]
    256c:	b	3c88 <BZ2_compressBlock+0x37d0>
    2570:	ldr	w0, [x26, #116]
    2574:	sub	w2, w0, w2
    2578:	adrp	x1, 0 <bsFinishWrite>
    257c:	add	x1, x1, #0x0
    2580:	adrp	x0, 0 <stderr>
    2584:	ldr	x0, [x0]
    2588:	bl	0 <fprintf>
    258c:	b	253c <BZ2_compressBlock+0x2084>
    2590:	mov	w0, w28
    2594:	bl	0 <BZ2_bz__AssertH__fail>
    2598:	b	3ca4 <BZ2_compressBlock+0x37ec>
    259c:	ldrb	w2, [x24, x23]
    25a0:	lsl	x0, x2, #7
    25a4:	add	x1, x0, x2
    25a8:	mov	x3, #0x934c                	// #37708
    25ac:	add	x1, x3, x1, lsl #1
    25b0:	add	x1, x26, x1
    25b4:	add	x0, x0, x2
    25b8:	add	x0, x26, x0, lsl #3
    25bc:	add	x0, x0, #0x9, lsl #12
    25c0:	add	x0, x0, #0x958
    25c4:	sbfiz	x19, x19, #1, #32
    25c8:	ldrh	w3, [x27, x19]
    25cc:	ldrb	w2, [x1, x3]
    25d0:	ldr	w4, [x0, x3, lsl #2]
    25d4:	ldr	w3, [x26, #644]
    25d8:	cmp	w3, #0x7
    25dc:	b.le	261c <BZ2_compressBlock+0x2164>
    25e0:	ldrsw	x3, [x26, #116]
    25e4:	ldr	x5, [x26, #80]
    25e8:	ldrb	w6, [x26, #643]
    25ec:	strb	w6, [x5, x3]
    25f0:	ldr	w3, [x26, #116]
    25f4:	add	w3, w3, #0x1
    25f8:	str	w3, [x26, #116]
    25fc:	ldr	w3, [x26, #640]
    2600:	lsl	w3, w3, #8
    2604:	str	w3, [x26, #640]
    2608:	ldr	w3, [x26, #644]
    260c:	sub	w3, w3, #0x8
    2610:	str	w3, [x26, #644]
    2614:	cmp	w3, #0x7
    2618:	b.gt	25e0 <BZ2_compressBlock+0x2128>
    261c:	sub	w5, w20, w3
    2620:	sub	w5, w5, w2
    2624:	lsl	w5, w4, w5
    2628:	ldr	w4, [x26, #640]
    262c:	orr	w4, w4, w5
    2630:	str	w4, [x26, #640]
    2634:	add	w2, w2, w3
    2638:	str	w2, [x26, #644]
    263c:	add	x3, x27, x19
    2640:	ldrh	w4, [x3, #2]
    2644:	ldrb	w3, [x1, x4]
    2648:	ldr	w4, [x0, x4, lsl #2]
    264c:	cmp	w2, #0x7
    2650:	b.le	2690 <BZ2_compressBlock+0x21d8>
    2654:	ldrsw	x2, [x26, #116]
    2658:	ldr	x5, [x26, #80]
    265c:	ldrb	w6, [x26, #643]
    2660:	strb	w6, [x5, x2]
    2664:	ldr	w2, [x26, #116]
    2668:	add	w2, w2, #0x1
    266c:	str	w2, [x26, #116]
    2670:	ldr	w2, [x26, #640]
    2674:	lsl	w2, w2, #8
    2678:	str	w2, [x26, #640]
    267c:	ldr	w2, [x26, #644]
    2680:	sub	w2, w2, #0x8
    2684:	str	w2, [x26, #644]
    2688:	cmp	w2, #0x7
    268c:	b.gt	2654 <BZ2_compressBlock+0x219c>
    2690:	sub	w5, w20, w2
    2694:	sub	w5, w5, w3
    2698:	lsl	w5, w4, w5
    269c:	ldr	w4, [x26, #640]
    26a0:	orr	w4, w4, w5
    26a4:	str	w4, [x26, #640]
    26a8:	add	w2, w3, w2
    26ac:	str	w2, [x26, #644]
    26b0:	add	x3, x27, x19
    26b4:	ldrh	w4, [x3, #4]
    26b8:	ldrb	w3, [x1, x4]
    26bc:	ldr	w4, [x0, x4, lsl #2]
    26c0:	cmp	w2, #0x7
    26c4:	b.le	2704 <BZ2_compressBlock+0x224c>
    26c8:	ldrsw	x2, [x26, #116]
    26cc:	ldr	x5, [x26, #80]
    26d0:	ldrb	w6, [x26, #643]
    26d4:	strb	w6, [x5, x2]
    26d8:	ldr	w2, [x26, #116]
    26dc:	add	w2, w2, #0x1
    26e0:	str	w2, [x26, #116]
    26e4:	ldr	w2, [x26, #640]
    26e8:	lsl	w2, w2, #8
    26ec:	str	w2, [x26, #640]
    26f0:	ldr	w2, [x26, #644]
    26f4:	sub	w2, w2, #0x8
    26f8:	str	w2, [x26, #644]
    26fc:	cmp	w2, #0x7
    2700:	b.gt	26c8 <BZ2_compressBlock+0x2210>
    2704:	sub	w5, w20, w2
    2708:	sub	w5, w5, w3
    270c:	lsl	w5, w4, w5
    2710:	ldr	w4, [x26, #640]
    2714:	orr	w4, w4, w5
    2718:	str	w4, [x26, #640]
    271c:	add	w3, w3, w2
    2720:	str	w3, [x26, #644]
    2724:	add	x2, x27, x19
    2728:	ldrh	w4, [x2, #6]
    272c:	ldrb	w2, [x1, x4]
    2730:	ldr	w4, [x0, x4, lsl #2]
    2734:	cmp	w3, #0x7
    2738:	b.le	2778 <BZ2_compressBlock+0x22c0>
    273c:	ldrsw	x3, [x26, #116]
    2740:	ldr	x5, [x26, #80]
    2744:	ldrb	w6, [x26, #643]
    2748:	strb	w6, [x5, x3]
    274c:	ldr	w3, [x26, #116]
    2750:	add	w3, w3, #0x1
    2754:	str	w3, [x26, #116]
    2758:	ldr	w3, [x26, #640]
    275c:	lsl	w3, w3, #8
    2760:	str	w3, [x26, #640]
    2764:	ldr	w3, [x26, #644]
    2768:	sub	w3, w3, #0x8
    276c:	str	w3, [x26, #644]
    2770:	cmp	w3, #0x7
    2774:	b.gt	273c <BZ2_compressBlock+0x2284>
    2778:	sub	w5, w20, w3
    277c:	sub	w5, w5, w2
    2780:	lsl	w5, w4, w5
    2784:	ldr	w4, [x26, #640]
    2788:	orr	w4, w4, w5
    278c:	str	w4, [x26, #640]
    2790:	add	w3, w2, w3
    2794:	str	w3, [x26, #644]
    2798:	add	x2, x27, x19
    279c:	ldrh	w4, [x2, #8]
    27a0:	ldrb	w2, [x1, x4]
    27a4:	ldr	w4, [x0, x4, lsl #2]
    27a8:	cmp	w3, #0x7
    27ac:	b.le	27ec <BZ2_compressBlock+0x2334>
    27b0:	ldrsw	x3, [x26, #116]
    27b4:	ldr	x5, [x26, #80]
    27b8:	ldrb	w6, [x26, #643]
    27bc:	strb	w6, [x5, x3]
    27c0:	ldr	w3, [x26, #116]
    27c4:	add	w3, w3, #0x1
    27c8:	str	w3, [x26, #116]
    27cc:	ldr	w3, [x26, #640]
    27d0:	lsl	w3, w3, #8
    27d4:	str	w3, [x26, #640]
    27d8:	ldr	w3, [x26, #644]
    27dc:	sub	w3, w3, #0x8
    27e0:	str	w3, [x26, #644]
    27e4:	cmp	w3, #0x7
    27e8:	b.gt	27b0 <BZ2_compressBlock+0x22f8>
    27ec:	sub	w5, w20, w3
    27f0:	sub	w5, w5, w2
    27f4:	lsl	w5, w4, w5
    27f8:	ldr	w4, [x26, #640]
    27fc:	orr	w4, w4, w5
    2800:	str	w4, [x26, #640]
    2804:	add	w2, w2, w3
    2808:	str	w2, [x26, #644]
    280c:	add	x3, x27, x19
    2810:	ldrh	w4, [x3, #10]
    2814:	ldrb	w3, [x1, x4]
    2818:	ldr	w4, [x0, x4, lsl #2]
    281c:	cmp	w2, #0x7
    2820:	b.le	2860 <BZ2_compressBlock+0x23a8>
    2824:	ldrsw	x2, [x26, #116]
    2828:	ldr	x5, [x26, #80]
    282c:	ldrb	w6, [x26, #643]
    2830:	strb	w6, [x5, x2]
    2834:	ldr	w2, [x26, #116]
    2838:	add	w2, w2, #0x1
    283c:	str	w2, [x26, #116]
    2840:	ldr	w2, [x26, #640]
    2844:	lsl	w2, w2, #8
    2848:	str	w2, [x26, #640]
    284c:	ldr	w2, [x26, #644]
    2850:	sub	w2, w2, #0x8
    2854:	str	w2, [x26, #644]
    2858:	cmp	w2, #0x7
    285c:	b.gt	2824 <BZ2_compressBlock+0x236c>
    2860:	sub	w5, w20, w2
    2864:	sub	w5, w5, w3
    2868:	lsl	w5, w4, w5
    286c:	ldr	w4, [x26, #640]
    2870:	orr	w4, w4, w5
    2874:	str	w4, [x26, #640]
    2878:	add	w2, w3, w2
    287c:	str	w2, [x26, #644]
    2880:	add	x3, x27, x19
    2884:	ldrh	w4, [x3, #12]
    2888:	ldrb	w3, [x1, x4]
    288c:	ldr	w4, [x0, x4, lsl #2]
    2890:	cmp	w2, #0x7
    2894:	b.le	28d4 <BZ2_compressBlock+0x241c>
    2898:	ldrsw	x2, [x26, #116]
    289c:	ldr	x5, [x26, #80]
    28a0:	ldrb	w6, [x26, #643]
    28a4:	strb	w6, [x5, x2]
    28a8:	ldr	w2, [x26, #116]
    28ac:	add	w2, w2, #0x1
    28b0:	str	w2, [x26, #116]
    28b4:	ldr	w2, [x26, #640]
    28b8:	lsl	w2, w2, #8
    28bc:	str	w2, [x26, #640]
    28c0:	ldr	w2, [x26, #644]
    28c4:	sub	w2, w2, #0x8
    28c8:	str	w2, [x26, #644]
    28cc:	cmp	w2, #0x7
    28d0:	b.gt	2898 <BZ2_compressBlock+0x23e0>
    28d4:	sub	w5, w20, w2
    28d8:	sub	w5, w5, w3
    28dc:	lsl	w5, w4, w5
    28e0:	ldr	w4, [x26, #640]
    28e4:	orr	w4, w4, w5
    28e8:	str	w4, [x26, #640]
    28ec:	add	w3, w3, w2
    28f0:	str	w3, [x26, #644]
    28f4:	add	x2, x27, x19
    28f8:	ldrh	w4, [x2, #14]
    28fc:	ldrb	w2, [x1, x4]
    2900:	ldr	w4, [x0, x4, lsl #2]
    2904:	cmp	w3, #0x7
    2908:	b.le	2948 <BZ2_compressBlock+0x2490>
    290c:	ldrsw	x3, [x26, #116]
    2910:	ldr	x5, [x26, #80]
    2914:	ldrb	w6, [x26, #643]
    2918:	strb	w6, [x5, x3]
    291c:	ldr	w3, [x26, #116]
    2920:	add	w3, w3, #0x1
    2924:	str	w3, [x26, #116]
    2928:	ldr	w3, [x26, #640]
    292c:	lsl	w3, w3, #8
    2930:	str	w3, [x26, #640]
    2934:	ldr	w3, [x26, #644]
    2938:	sub	w3, w3, #0x8
    293c:	str	w3, [x26, #644]
    2940:	cmp	w3, #0x7
    2944:	b.gt	290c <BZ2_compressBlock+0x2454>
    2948:	sub	w5, w20, w3
    294c:	sub	w5, w5, w2
    2950:	lsl	w5, w4, w5
    2954:	ldr	w4, [x26, #640]
    2958:	orr	w4, w4, w5
    295c:	str	w4, [x26, #640]
    2960:	add	w3, w2, w3
    2964:	str	w3, [x26, #644]
    2968:	add	x2, x27, x19
    296c:	ldrh	w4, [x2, #16]
    2970:	ldrb	w2, [x1, x4]
    2974:	ldr	w4, [x0, x4, lsl #2]
    2978:	cmp	w3, #0x7
    297c:	b.le	29bc <BZ2_compressBlock+0x2504>
    2980:	ldrsw	x3, [x26, #116]
    2984:	ldr	x5, [x26, #80]
    2988:	ldrb	w6, [x26, #643]
    298c:	strb	w6, [x5, x3]
    2990:	ldr	w3, [x26, #116]
    2994:	add	w3, w3, #0x1
    2998:	str	w3, [x26, #116]
    299c:	ldr	w3, [x26, #640]
    29a0:	lsl	w3, w3, #8
    29a4:	str	w3, [x26, #640]
    29a8:	ldr	w3, [x26, #644]
    29ac:	sub	w3, w3, #0x8
    29b0:	str	w3, [x26, #644]
    29b4:	cmp	w3, #0x7
    29b8:	b.gt	2980 <BZ2_compressBlock+0x24c8>
    29bc:	sub	w5, w20, w3
    29c0:	sub	w5, w5, w2
    29c4:	lsl	w5, w4, w5
    29c8:	ldr	w4, [x26, #640]
    29cc:	orr	w4, w4, w5
    29d0:	str	w4, [x26, #640]
    29d4:	add	w2, w2, w3
    29d8:	str	w2, [x26, #644]
    29dc:	add	x3, x27, x19
    29e0:	ldrh	w4, [x3, #18]
    29e4:	ldrb	w3, [x1, x4]
    29e8:	ldr	w4, [x0, x4, lsl #2]
    29ec:	cmp	w2, #0x7
    29f0:	b.le	2a30 <BZ2_compressBlock+0x2578>
    29f4:	ldrsw	x2, [x26, #116]
    29f8:	ldr	x5, [x26, #80]
    29fc:	ldrb	w6, [x26, #643]
    2a00:	strb	w6, [x5, x2]
    2a04:	ldr	w2, [x26, #116]
    2a08:	add	w2, w2, #0x1
    2a0c:	str	w2, [x26, #116]
    2a10:	ldr	w2, [x26, #640]
    2a14:	lsl	w2, w2, #8
    2a18:	str	w2, [x26, #640]
    2a1c:	ldr	w2, [x26, #644]
    2a20:	sub	w2, w2, #0x8
    2a24:	str	w2, [x26, #644]
    2a28:	cmp	w2, #0x7
    2a2c:	b.gt	29f4 <BZ2_compressBlock+0x253c>
    2a30:	sub	w5, w20, w2
    2a34:	sub	w5, w5, w3
    2a38:	lsl	w5, w4, w5
    2a3c:	ldr	w4, [x26, #640]
    2a40:	orr	w4, w4, w5
    2a44:	str	w4, [x26, #640]
    2a48:	add	w2, w3, w2
    2a4c:	str	w2, [x26, #644]
    2a50:	add	x3, x27, x19
    2a54:	ldrh	w4, [x3, #20]
    2a58:	ldrb	w3, [x1, x4]
    2a5c:	ldr	w4, [x0, x4, lsl #2]
    2a60:	cmp	w2, #0x7
    2a64:	b.le	2aa4 <BZ2_compressBlock+0x25ec>
    2a68:	ldrsw	x2, [x26, #116]
    2a6c:	ldr	x5, [x26, #80]
    2a70:	ldrb	w6, [x26, #643]
    2a74:	strb	w6, [x5, x2]
    2a78:	ldr	w2, [x26, #116]
    2a7c:	add	w2, w2, #0x1
    2a80:	str	w2, [x26, #116]
    2a84:	ldr	w2, [x26, #640]
    2a88:	lsl	w2, w2, #8
    2a8c:	str	w2, [x26, #640]
    2a90:	ldr	w2, [x26, #644]
    2a94:	sub	w2, w2, #0x8
    2a98:	str	w2, [x26, #644]
    2a9c:	cmp	w2, #0x7
    2aa0:	b.gt	2a68 <BZ2_compressBlock+0x25b0>
    2aa4:	sub	w5, w20, w2
    2aa8:	sub	w5, w5, w3
    2aac:	lsl	w5, w4, w5
    2ab0:	ldr	w4, [x26, #640]
    2ab4:	orr	w4, w4, w5
    2ab8:	str	w4, [x26, #640]
    2abc:	add	w3, w3, w2
    2ac0:	str	w3, [x26, #644]
    2ac4:	add	x2, x27, x19
    2ac8:	ldrh	w4, [x2, #22]
    2acc:	ldrb	w2, [x1, x4]
    2ad0:	ldr	w4, [x0, x4, lsl #2]
    2ad4:	cmp	w3, #0x7
    2ad8:	b.le	2b18 <BZ2_compressBlock+0x2660>
    2adc:	ldrsw	x3, [x26, #116]
    2ae0:	ldr	x5, [x26, #80]
    2ae4:	ldrb	w6, [x26, #643]
    2ae8:	strb	w6, [x5, x3]
    2aec:	ldr	w3, [x26, #116]
    2af0:	add	w3, w3, #0x1
    2af4:	str	w3, [x26, #116]
    2af8:	ldr	w3, [x26, #640]
    2afc:	lsl	w3, w3, #8
    2b00:	str	w3, [x26, #640]
    2b04:	ldr	w3, [x26, #644]
    2b08:	sub	w3, w3, #0x8
    2b0c:	str	w3, [x26, #644]
    2b10:	cmp	w3, #0x7
    2b14:	b.gt	2adc <BZ2_compressBlock+0x2624>
    2b18:	sub	w5, w20, w3
    2b1c:	sub	w5, w5, w2
    2b20:	lsl	w5, w4, w5
    2b24:	ldr	w4, [x26, #640]
    2b28:	orr	w4, w4, w5
    2b2c:	str	w4, [x26, #640]
    2b30:	add	w3, w2, w3
    2b34:	str	w3, [x26, #644]
    2b38:	add	x2, x27, x19
    2b3c:	ldrh	w4, [x2, #24]
    2b40:	ldrb	w2, [x1, x4]
    2b44:	ldr	w4, [x0, x4, lsl #2]
    2b48:	cmp	w3, #0x7
    2b4c:	b.le	2b8c <BZ2_compressBlock+0x26d4>
    2b50:	ldrsw	x3, [x26, #116]
    2b54:	ldr	x5, [x26, #80]
    2b58:	ldrb	w6, [x26, #643]
    2b5c:	strb	w6, [x5, x3]
    2b60:	ldr	w3, [x26, #116]
    2b64:	add	w3, w3, #0x1
    2b68:	str	w3, [x26, #116]
    2b6c:	ldr	w3, [x26, #640]
    2b70:	lsl	w3, w3, #8
    2b74:	str	w3, [x26, #640]
    2b78:	ldr	w3, [x26, #644]
    2b7c:	sub	w3, w3, #0x8
    2b80:	str	w3, [x26, #644]
    2b84:	cmp	w3, #0x7
    2b88:	b.gt	2b50 <BZ2_compressBlock+0x2698>
    2b8c:	sub	w5, w20, w3
    2b90:	sub	w5, w5, w2
    2b94:	lsl	w5, w4, w5
    2b98:	ldr	w4, [x26, #640]
    2b9c:	orr	w4, w4, w5
    2ba0:	str	w4, [x26, #640]
    2ba4:	add	w2, w2, w3
    2ba8:	str	w2, [x26, #644]
    2bac:	add	x3, x27, x19
    2bb0:	ldrh	w4, [x3, #26]
    2bb4:	ldrb	w3, [x1, x4]
    2bb8:	ldr	w4, [x0, x4, lsl #2]
    2bbc:	cmp	w2, #0x7
    2bc0:	b.le	2c00 <BZ2_compressBlock+0x2748>
    2bc4:	ldrsw	x2, [x26, #116]
    2bc8:	ldr	x5, [x26, #80]
    2bcc:	ldrb	w6, [x26, #643]
    2bd0:	strb	w6, [x5, x2]
    2bd4:	ldr	w2, [x26, #116]
    2bd8:	add	w2, w2, #0x1
    2bdc:	str	w2, [x26, #116]
    2be0:	ldr	w2, [x26, #640]
    2be4:	lsl	w2, w2, #8
    2be8:	str	w2, [x26, #640]
    2bec:	ldr	w2, [x26, #644]
    2bf0:	sub	w2, w2, #0x8
    2bf4:	str	w2, [x26, #644]
    2bf8:	cmp	w2, #0x7
    2bfc:	b.gt	2bc4 <BZ2_compressBlock+0x270c>
    2c00:	sub	w5, w20, w2
    2c04:	sub	w5, w5, w3
    2c08:	lsl	w5, w4, w5
    2c0c:	ldr	w4, [x26, #640]
    2c10:	orr	w4, w4, w5
    2c14:	str	w4, [x26, #640]
    2c18:	add	w2, w3, w2
    2c1c:	str	w2, [x26, #644]
    2c20:	add	x3, x27, x19
    2c24:	ldrh	w4, [x3, #28]
    2c28:	ldrb	w3, [x1, x4]
    2c2c:	ldr	w4, [x0, x4, lsl #2]
    2c30:	cmp	w2, #0x7
    2c34:	b.le	2c74 <BZ2_compressBlock+0x27bc>
    2c38:	ldrsw	x2, [x26, #116]
    2c3c:	ldr	x5, [x26, #80]
    2c40:	ldrb	w6, [x26, #643]
    2c44:	strb	w6, [x5, x2]
    2c48:	ldr	w2, [x26, #116]
    2c4c:	add	w2, w2, #0x1
    2c50:	str	w2, [x26, #116]
    2c54:	ldr	w2, [x26, #640]
    2c58:	lsl	w2, w2, #8
    2c5c:	str	w2, [x26, #640]
    2c60:	ldr	w2, [x26, #644]
    2c64:	sub	w2, w2, #0x8
    2c68:	str	w2, [x26, #644]
    2c6c:	cmp	w2, #0x7
    2c70:	b.gt	2c38 <BZ2_compressBlock+0x2780>
    2c74:	sub	w5, w20, w2
    2c78:	sub	w5, w5, w3
    2c7c:	lsl	w5, w4, w5
    2c80:	ldr	w4, [x26, #640]
    2c84:	orr	w4, w4, w5
    2c88:	str	w4, [x26, #640]
    2c8c:	add	w3, w3, w2
    2c90:	str	w3, [x26, #644]
    2c94:	add	x2, x27, x19
    2c98:	ldrh	w4, [x2, #30]
    2c9c:	ldrb	w2, [x1, x4]
    2ca0:	ldr	w4, [x0, x4, lsl #2]
    2ca4:	cmp	w3, #0x7
    2ca8:	b.le	2ce8 <BZ2_compressBlock+0x2830>
    2cac:	ldrsw	x3, [x26, #116]
    2cb0:	ldr	x5, [x26, #80]
    2cb4:	ldrb	w6, [x26, #643]
    2cb8:	strb	w6, [x5, x3]
    2cbc:	ldr	w3, [x26, #116]
    2cc0:	add	w3, w3, #0x1
    2cc4:	str	w3, [x26, #116]
    2cc8:	ldr	w3, [x26, #640]
    2ccc:	lsl	w3, w3, #8
    2cd0:	str	w3, [x26, #640]
    2cd4:	ldr	w3, [x26, #644]
    2cd8:	sub	w3, w3, #0x8
    2cdc:	str	w3, [x26, #644]
    2ce0:	cmp	w3, #0x7
    2ce4:	b.gt	2cac <BZ2_compressBlock+0x27f4>
    2ce8:	sub	w5, w20, w3
    2cec:	sub	w5, w5, w2
    2cf0:	lsl	w5, w4, w5
    2cf4:	ldr	w4, [x26, #640]
    2cf8:	orr	w4, w4, w5
    2cfc:	str	w4, [x26, #640]
    2d00:	add	w3, w2, w3
    2d04:	str	w3, [x26, #644]
    2d08:	add	x2, x27, x19
    2d0c:	ldrh	w4, [x2, #32]
    2d10:	ldrb	w2, [x1, x4]
    2d14:	ldr	w4, [x0, x4, lsl #2]
    2d18:	cmp	w3, #0x7
    2d1c:	b.le	2d5c <BZ2_compressBlock+0x28a4>
    2d20:	ldrsw	x3, [x26, #116]
    2d24:	ldr	x5, [x26, #80]
    2d28:	ldrb	w6, [x26, #643]
    2d2c:	strb	w6, [x5, x3]
    2d30:	ldr	w3, [x26, #116]
    2d34:	add	w3, w3, #0x1
    2d38:	str	w3, [x26, #116]
    2d3c:	ldr	w3, [x26, #640]
    2d40:	lsl	w3, w3, #8
    2d44:	str	w3, [x26, #640]
    2d48:	ldr	w3, [x26, #644]
    2d4c:	sub	w3, w3, #0x8
    2d50:	str	w3, [x26, #644]
    2d54:	cmp	w3, #0x7
    2d58:	b.gt	2d20 <BZ2_compressBlock+0x2868>
    2d5c:	sub	w5, w20, w3
    2d60:	sub	w5, w5, w2
    2d64:	lsl	w5, w4, w5
    2d68:	ldr	w4, [x26, #640]
    2d6c:	orr	w4, w4, w5
    2d70:	str	w4, [x26, #640]
    2d74:	add	w2, w2, w3
    2d78:	str	w2, [x26, #644]
    2d7c:	add	x3, x27, x19
    2d80:	ldrh	w4, [x3, #34]
    2d84:	ldrb	w3, [x1, x4]
    2d88:	ldr	w4, [x0, x4, lsl #2]
    2d8c:	cmp	w2, #0x7
    2d90:	b.le	2dd0 <BZ2_compressBlock+0x2918>
    2d94:	ldrsw	x2, [x26, #116]
    2d98:	ldr	x5, [x26, #80]
    2d9c:	ldrb	w6, [x26, #643]
    2da0:	strb	w6, [x5, x2]
    2da4:	ldr	w2, [x26, #116]
    2da8:	add	w2, w2, #0x1
    2dac:	str	w2, [x26, #116]
    2db0:	ldr	w2, [x26, #640]
    2db4:	lsl	w2, w2, #8
    2db8:	str	w2, [x26, #640]
    2dbc:	ldr	w2, [x26, #644]
    2dc0:	sub	w2, w2, #0x8
    2dc4:	str	w2, [x26, #644]
    2dc8:	cmp	w2, #0x7
    2dcc:	b.gt	2d94 <BZ2_compressBlock+0x28dc>
    2dd0:	sub	w5, w20, w2
    2dd4:	sub	w5, w5, w3
    2dd8:	lsl	w5, w4, w5
    2ddc:	ldr	w4, [x26, #640]
    2de0:	orr	w4, w4, w5
    2de4:	str	w4, [x26, #640]
    2de8:	add	w2, w3, w2
    2dec:	str	w2, [x26, #644]
    2df0:	add	x3, x27, x19
    2df4:	ldrh	w4, [x3, #36]
    2df8:	ldrb	w3, [x1, x4]
    2dfc:	ldr	w4, [x0, x4, lsl #2]
    2e00:	cmp	w2, #0x7
    2e04:	b.le	2e44 <BZ2_compressBlock+0x298c>
    2e08:	ldrsw	x2, [x26, #116]
    2e0c:	ldr	x5, [x26, #80]
    2e10:	ldrb	w6, [x26, #643]
    2e14:	strb	w6, [x5, x2]
    2e18:	ldr	w2, [x26, #116]
    2e1c:	add	w2, w2, #0x1
    2e20:	str	w2, [x26, #116]
    2e24:	ldr	w2, [x26, #640]
    2e28:	lsl	w2, w2, #8
    2e2c:	str	w2, [x26, #640]
    2e30:	ldr	w2, [x26, #644]
    2e34:	sub	w2, w2, #0x8
    2e38:	str	w2, [x26, #644]
    2e3c:	cmp	w2, #0x7
    2e40:	b.gt	2e08 <BZ2_compressBlock+0x2950>
    2e44:	sub	w5, w20, w2
    2e48:	sub	w5, w5, w3
    2e4c:	lsl	w5, w4, w5
    2e50:	ldr	w4, [x26, #640]
    2e54:	orr	w4, w4, w5
    2e58:	str	w4, [x26, #640]
    2e5c:	add	w3, w3, w2
    2e60:	str	w3, [x26, #644]
    2e64:	add	x2, x27, x19
    2e68:	ldrh	w4, [x2, #38]
    2e6c:	ldrb	w2, [x1, x4]
    2e70:	ldr	w4, [x0, x4, lsl #2]
    2e74:	cmp	w3, #0x7
    2e78:	b.le	2eb8 <BZ2_compressBlock+0x2a00>
    2e7c:	ldrsw	x3, [x26, #116]
    2e80:	ldr	x5, [x26, #80]
    2e84:	ldrb	w6, [x26, #643]
    2e88:	strb	w6, [x5, x3]
    2e8c:	ldr	w3, [x26, #116]
    2e90:	add	w3, w3, #0x1
    2e94:	str	w3, [x26, #116]
    2e98:	ldr	w3, [x26, #640]
    2e9c:	lsl	w3, w3, #8
    2ea0:	str	w3, [x26, #640]
    2ea4:	ldr	w3, [x26, #644]
    2ea8:	sub	w3, w3, #0x8
    2eac:	str	w3, [x26, #644]
    2eb0:	cmp	w3, #0x7
    2eb4:	b.gt	2e7c <BZ2_compressBlock+0x29c4>
    2eb8:	sub	w5, w20, w3
    2ebc:	sub	w5, w5, w2
    2ec0:	lsl	w5, w4, w5
    2ec4:	ldr	w4, [x26, #640]
    2ec8:	orr	w4, w4, w5
    2ecc:	str	w4, [x26, #640]
    2ed0:	add	w3, w2, w3
    2ed4:	str	w3, [x26, #644]
    2ed8:	add	x2, x27, x19
    2edc:	ldrh	w4, [x2, #40]
    2ee0:	ldrb	w2, [x1, x4]
    2ee4:	ldr	w4, [x0, x4, lsl #2]
    2ee8:	cmp	w3, #0x7
    2eec:	b.le	2f2c <BZ2_compressBlock+0x2a74>
    2ef0:	ldrsw	x3, [x26, #116]
    2ef4:	ldr	x5, [x26, #80]
    2ef8:	ldrb	w6, [x26, #643]
    2efc:	strb	w6, [x5, x3]
    2f00:	ldr	w3, [x26, #116]
    2f04:	add	w3, w3, #0x1
    2f08:	str	w3, [x26, #116]
    2f0c:	ldr	w3, [x26, #640]
    2f10:	lsl	w3, w3, #8
    2f14:	str	w3, [x26, #640]
    2f18:	ldr	w3, [x26, #644]
    2f1c:	sub	w3, w3, #0x8
    2f20:	str	w3, [x26, #644]
    2f24:	cmp	w3, #0x7
    2f28:	b.gt	2ef0 <BZ2_compressBlock+0x2a38>
    2f2c:	sub	w5, w20, w3
    2f30:	sub	w5, w5, w2
    2f34:	lsl	w5, w4, w5
    2f38:	ldr	w4, [x26, #640]
    2f3c:	orr	w4, w4, w5
    2f40:	str	w4, [x26, #640]
    2f44:	add	w2, w2, w3
    2f48:	str	w2, [x26, #644]
    2f4c:	add	x3, x27, x19
    2f50:	ldrh	w4, [x3, #42]
    2f54:	ldrb	w3, [x1, x4]
    2f58:	ldr	w4, [x0, x4, lsl #2]
    2f5c:	cmp	w2, #0x7
    2f60:	b.le	2fa0 <BZ2_compressBlock+0x2ae8>
    2f64:	ldrsw	x2, [x26, #116]
    2f68:	ldr	x5, [x26, #80]
    2f6c:	ldrb	w6, [x26, #643]
    2f70:	strb	w6, [x5, x2]
    2f74:	ldr	w2, [x26, #116]
    2f78:	add	w2, w2, #0x1
    2f7c:	str	w2, [x26, #116]
    2f80:	ldr	w2, [x26, #640]
    2f84:	lsl	w2, w2, #8
    2f88:	str	w2, [x26, #640]
    2f8c:	ldr	w2, [x26, #644]
    2f90:	sub	w2, w2, #0x8
    2f94:	str	w2, [x26, #644]
    2f98:	cmp	w2, #0x7
    2f9c:	b.gt	2f64 <BZ2_compressBlock+0x2aac>
    2fa0:	sub	w5, w20, w2
    2fa4:	sub	w5, w5, w3
    2fa8:	lsl	w5, w4, w5
    2fac:	ldr	w4, [x26, #640]
    2fb0:	orr	w4, w4, w5
    2fb4:	str	w4, [x26, #640]
    2fb8:	add	w2, w3, w2
    2fbc:	str	w2, [x26, #644]
    2fc0:	add	x3, x27, x19
    2fc4:	ldrh	w4, [x3, #44]
    2fc8:	ldrb	w3, [x1, x4]
    2fcc:	ldr	w4, [x0, x4, lsl #2]
    2fd0:	cmp	w2, #0x7
    2fd4:	b.le	3014 <BZ2_compressBlock+0x2b5c>
    2fd8:	ldrsw	x2, [x26, #116]
    2fdc:	ldr	x5, [x26, #80]
    2fe0:	ldrb	w6, [x26, #643]
    2fe4:	strb	w6, [x5, x2]
    2fe8:	ldr	w2, [x26, #116]
    2fec:	add	w2, w2, #0x1
    2ff0:	str	w2, [x26, #116]
    2ff4:	ldr	w2, [x26, #640]
    2ff8:	lsl	w2, w2, #8
    2ffc:	str	w2, [x26, #640]
    3000:	ldr	w2, [x26, #644]
    3004:	sub	w2, w2, #0x8
    3008:	str	w2, [x26, #644]
    300c:	cmp	w2, #0x7
    3010:	b.gt	2fd8 <BZ2_compressBlock+0x2b20>
    3014:	sub	w5, w20, w2
    3018:	sub	w5, w5, w3
    301c:	lsl	w5, w4, w5
    3020:	ldr	w4, [x26, #640]
    3024:	orr	w4, w4, w5
    3028:	str	w4, [x26, #640]
    302c:	add	w3, w3, w2
    3030:	str	w3, [x26, #644]
    3034:	add	x2, x27, x19
    3038:	ldrh	w4, [x2, #46]
    303c:	ldrb	w2, [x1, x4]
    3040:	ldr	w4, [x0, x4, lsl #2]
    3044:	cmp	w3, #0x7
    3048:	b.le	3088 <BZ2_compressBlock+0x2bd0>
    304c:	ldrsw	x3, [x26, #116]
    3050:	ldr	x5, [x26, #80]
    3054:	ldrb	w6, [x26, #643]
    3058:	strb	w6, [x5, x3]
    305c:	ldr	w3, [x26, #116]
    3060:	add	w3, w3, #0x1
    3064:	str	w3, [x26, #116]
    3068:	ldr	w3, [x26, #640]
    306c:	lsl	w3, w3, #8
    3070:	str	w3, [x26, #640]
    3074:	ldr	w3, [x26, #644]
    3078:	sub	w3, w3, #0x8
    307c:	str	w3, [x26, #644]
    3080:	cmp	w3, #0x7
    3084:	b.gt	304c <BZ2_compressBlock+0x2b94>
    3088:	sub	w5, w20, w3
    308c:	sub	w5, w5, w2
    3090:	lsl	w5, w4, w5
    3094:	ldr	w4, [x26, #640]
    3098:	orr	w4, w4, w5
    309c:	str	w4, [x26, #640]
    30a0:	add	w3, w2, w3
    30a4:	str	w3, [x26, #644]
    30a8:	add	x2, x27, x19
    30ac:	ldrh	w4, [x2, #48]
    30b0:	ldrb	w2, [x1, x4]
    30b4:	ldr	w4, [x0, x4, lsl #2]
    30b8:	cmp	w3, #0x7
    30bc:	b.le	30fc <BZ2_compressBlock+0x2c44>
    30c0:	ldrsw	x3, [x26, #116]
    30c4:	ldr	x5, [x26, #80]
    30c8:	ldrb	w6, [x26, #643]
    30cc:	strb	w6, [x5, x3]
    30d0:	ldr	w3, [x26, #116]
    30d4:	add	w3, w3, #0x1
    30d8:	str	w3, [x26, #116]
    30dc:	ldr	w3, [x26, #640]
    30e0:	lsl	w3, w3, #8
    30e4:	str	w3, [x26, #640]
    30e8:	ldr	w3, [x26, #644]
    30ec:	sub	w3, w3, #0x8
    30f0:	str	w3, [x26, #644]
    30f4:	cmp	w3, #0x7
    30f8:	b.gt	30c0 <BZ2_compressBlock+0x2c08>
    30fc:	sub	w5, w20, w3
    3100:	sub	w5, w5, w2
    3104:	lsl	w5, w4, w5
    3108:	ldr	w4, [x26, #640]
    310c:	orr	w4, w4, w5
    3110:	str	w4, [x26, #640]
    3114:	add	w2, w2, w3
    3118:	str	w2, [x26, #644]
    311c:	add	x3, x27, x19
    3120:	ldrh	w4, [x3, #50]
    3124:	ldrb	w3, [x1, x4]
    3128:	ldr	w4, [x0, x4, lsl #2]
    312c:	cmp	w2, #0x7
    3130:	b.le	3170 <BZ2_compressBlock+0x2cb8>
    3134:	ldrsw	x2, [x26, #116]
    3138:	ldr	x5, [x26, #80]
    313c:	ldrb	w6, [x26, #643]
    3140:	strb	w6, [x5, x2]
    3144:	ldr	w2, [x26, #116]
    3148:	add	w2, w2, #0x1
    314c:	str	w2, [x26, #116]
    3150:	ldr	w2, [x26, #640]
    3154:	lsl	w2, w2, #8
    3158:	str	w2, [x26, #640]
    315c:	ldr	w2, [x26, #644]
    3160:	sub	w2, w2, #0x8
    3164:	str	w2, [x26, #644]
    3168:	cmp	w2, #0x7
    316c:	b.gt	3134 <BZ2_compressBlock+0x2c7c>
    3170:	sub	w5, w20, w2
    3174:	sub	w5, w5, w3
    3178:	lsl	w5, w4, w5
    317c:	ldr	w4, [x26, #640]
    3180:	orr	w4, w4, w5
    3184:	str	w4, [x26, #640]
    3188:	add	w2, w3, w2
    318c:	str	w2, [x26, #644]
    3190:	add	x3, x27, x19
    3194:	ldrh	w4, [x3, #52]
    3198:	ldrb	w3, [x1, x4]
    319c:	ldr	w4, [x0, x4, lsl #2]
    31a0:	cmp	w2, #0x7
    31a4:	b.le	31e4 <BZ2_compressBlock+0x2d2c>
    31a8:	ldrsw	x2, [x26, #116]
    31ac:	ldr	x5, [x26, #80]
    31b0:	ldrb	w6, [x26, #643]
    31b4:	strb	w6, [x5, x2]
    31b8:	ldr	w2, [x26, #116]
    31bc:	add	w2, w2, #0x1
    31c0:	str	w2, [x26, #116]
    31c4:	ldr	w2, [x26, #640]
    31c8:	lsl	w2, w2, #8
    31cc:	str	w2, [x26, #640]
    31d0:	ldr	w2, [x26, #644]
    31d4:	sub	w2, w2, #0x8
    31d8:	str	w2, [x26, #644]
    31dc:	cmp	w2, #0x7
    31e0:	b.gt	31a8 <BZ2_compressBlock+0x2cf0>
    31e4:	sub	w5, w20, w2
    31e8:	sub	w5, w5, w3
    31ec:	lsl	w5, w4, w5
    31f0:	ldr	w4, [x26, #640]
    31f4:	orr	w4, w4, w5
    31f8:	str	w4, [x26, #640]
    31fc:	add	w3, w3, w2
    3200:	str	w3, [x26, #644]
    3204:	add	x2, x27, x19
    3208:	ldrh	w4, [x2, #54]
    320c:	ldrb	w2, [x1, x4]
    3210:	ldr	w4, [x0, x4, lsl #2]
    3214:	cmp	w3, #0x7
    3218:	b.le	3258 <BZ2_compressBlock+0x2da0>
    321c:	ldrsw	x3, [x26, #116]
    3220:	ldr	x5, [x26, #80]
    3224:	ldrb	w6, [x26, #643]
    3228:	strb	w6, [x5, x3]
    322c:	ldr	w3, [x26, #116]
    3230:	add	w3, w3, #0x1
    3234:	str	w3, [x26, #116]
    3238:	ldr	w3, [x26, #640]
    323c:	lsl	w3, w3, #8
    3240:	str	w3, [x26, #640]
    3244:	ldr	w3, [x26, #644]
    3248:	sub	w3, w3, #0x8
    324c:	str	w3, [x26, #644]
    3250:	cmp	w3, #0x7
    3254:	b.gt	321c <BZ2_compressBlock+0x2d64>
    3258:	sub	w5, w20, w3
    325c:	sub	w5, w5, w2
    3260:	lsl	w5, w4, w5
    3264:	ldr	w4, [x26, #640]
    3268:	orr	w4, w4, w5
    326c:	str	w4, [x26, #640]
    3270:	add	w3, w2, w3
    3274:	str	w3, [x26, #644]
    3278:	add	x2, x27, x19
    327c:	ldrh	w4, [x2, #56]
    3280:	ldrb	w2, [x1, x4]
    3284:	ldr	w4, [x0, x4, lsl #2]
    3288:	cmp	w3, #0x7
    328c:	b.le	32cc <BZ2_compressBlock+0x2e14>
    3290:	ldrsw	x3, [x26, #116]
    3294:	ldr	x5, [x26, #80]
    3298:	ldrb	w6, [x26, #643]
    329c:	strb	w6, [x5, x3]
    32a0:	ldr	w3, [x26, #116]
    32a4:	add	w3, w3, #0x1
    32a8:	str	w3, [x26, #116]
    32ac:	ldr	w3, [x26, #640]
    32b0:	lsl	w3, w3, #8
    32b4:	str	w3, [x26, #640]
    32b8:	ldr	w3, [x26, #644]
    32bc:	sub	w3, w3, #0x8
    32c0:	str	w3, [x26, #644]
    32c4:	cmp	w3, #0x7
    32c8:	b.gt	3290 <BZ2_compressBlock+0x2dd8>
    32cc:	sub	w5, w20, w3
    32d0:	sub	w5, w5, w2
    32d4:	lsl	w5, w4, w5
    32d8:	ldr	w4, [x26, #640]
    32dc:	orr	w4, w4, w5
    32e0:	str	w4, [x26, #640]
    32e4:	add	w2, w2, w3
    32e8:	str	w2, [x26, #644]
    32ec:	add	x3, x27, x19
    32f0:	ldrh	w4, [x3, #58]
    32f4:	ldrb	w3, [x1, x4]
    32f8:	ldr	w4, [x0, x4, lsl #2]
    32fc:	cmp	w2, #0x7
    3300:	b.le	3340 <BZ2_compressBlock+0x2e88>
    3304:	ldrsw	x2, [x26, #116]
    3308:	ldr	x5, [x26, #80]
    330c:	ldrb	w6, [x26, #643]
    3310:	strb	w6, [x5, x2]
    3314:	ldr	w2, [x26, #116]
    3318:	add	w2, w2, #0x1
    331c:	str	w2, [x26, #116]
    3320:	ldr	w2, [x26, #640]
    3324:	lsl	w2, w2, #8
    3328:	str	w2, [x26, #640]
    332c:	ldr	w2, [x26, #644]
    3330:	sub	w2, w2, #0x8
    3334:	str	w2, [x26, #644]
    3338:	cmp	w2, #0x7
    333c:	b.gt	3304 <BZ2_compressBlock+0x2e4c>
    3340:	sub	w5, w20, w2
    3344:	sub	w5, w5, w3
    3348:	lsl	w5, w4, w5
    334c:	ldr	w4, [x26, #640]
    3350:	orr	w4, w4, w5
    3354:	str	w4, [x26, #640]
    3358:	add	w2, w3, w2
    335c:	str	w2, [x26, #644]
    3360:	add	x3, x27, x19
    3364:	ldrh	w4, [x3, #60]
    3368:	ldrb	w3, [x1, x4]
    336c:	ldr	w4, [x0, x4, lsl #2]
    3370:	cmp	w2, #0x7
    3374:	b.le	33b4 <BZ2_compressBlock+0x2efc>
    3378:	ldrsw	x2, [x26, #116]
    337c:	ldr	x5, [x26, #80]
    3380:	ldrb	w6, [x26, #643]
    3384:	strb	w6, [x5, x2]
    3388:	ldr	w2, [x26, #116]
    338c:	add	w2, w2, #0x1
    3390:	str	w2, [x26, #116]
    3394:	ldr	w2, [x26, #640]
    3398:	lsl	w2, w2, #8
    339c:	str	w2, [x26, #640]
    33a0:	ldr	w2, [x26, #644]
    33a4:	sub	w2, w2, #0x8
    33a8:	str	w2, [x26, #644]
    33ac:	cmp	w2, #0x7
    33b0:	b.gt	3378 <BZ2_compressBlock+0x2ec0>
    33b4:	sub	w5, w20, w2
    33b8:	sub	w5, w5, w3
    33bc:	lsl	w5, w4, w5
    33c0:	ldr	w4, [x26, #640]
    33c4:	orr	w4, w4, w5
    33c8:	str	w4, [x26, #640]
    33cc:	add	w3, w3, w2
    33d0:	str	w3, [x26, #644]
    33d4:	add	x2, x27, x19
    33d8:	ldrh	w4, [x2, #62]
    33dc:	ldrb	w2, [x1, x4]
    33e0:	ldr	w4, [x0, x4, lsl #2]
    33e4:	cmp	w3, #0x7
    33e8:	b.le	3428 <BZ2_compressBlock+0x2f70>
    33ec:	ldrsw	x3, [x26, #116]
    33f0:	ldr	x5, [x26, #80]
    33f4:	ldrb	w6, [x26, #643]
    33f8:	strb	w6, [x5, x3]
    33fc:	ldr	w3, [x26, #116]
    3400:	add	w3, w3, #0x1
    3404:	str	w3, [x26, #116]
    3408:	ldr	w3, [x26, #640]
    340c:	lsl	w3, w3, #8
    3410:	str	w3, [x26, #640]
    3414:	ldr	w3, [x26, #644]
    3418:	sub	w3, w3, #0x8
    341c:	str	w3, [x26, #644]
    3420:	cmp	w3, #0x7
    3424:	b.gt	33ec <BZ2_compressBlock+0x2f34>
    3428:	sub	w5, w20, w3
    342c:	sub	w5, w5, w2
    3430:	lsl	w5, w4, w5
    3434:	ldr	w4, [x26, #640]
    3438:	orr	w4, w4, w5
    343c:	str	w4, [x26, #640]
    3440:	add	w3, w2, w3
    3444:	str	w3, [x26, #644]
    3448:	add	x2, x27, x19
    344c:	ldrh	w4, [x2, #64]
    3450:	ldrb	w2, [x1, x4]
    3454:	ldr	w4, [x0, x4, lsl #2]
    3458:	cmp	w3, #0x7
    345c:	b.le	349c <BZ2_compressBlock+0x2fe4>
    3460:	ldrsw	x3, [x26, #116]
    3464:	ldr	x5, [x26, #80]
    3468:	ldrb	w6, [x26, #643]
    346c:	strb	w6, [x5, x3]
    3470:	ldr	w3, [x26, #116]
    3474:	add	w3, w3, #0x1
    3478:	str	w3, [x26, #116]
    347c:	ldr	w3, [x26, #640]
    3480:	lsl	w3, w3, #8
    3484:	str	w3, [x26, #640]
    3488:	ldr	w3, [x26, #644]
    348c:	sub	w3, w3, #0x8
    3490:	str	w3, [x26, #644]
    3494:	cmp	w3, #0x7
    3498:	b.gt	3460 <BZ2_compressBlock+0x2fa8>
    349c:	sub	w5, w20, w3
    34a0:	sub	w5, w5, w2
    34a4:	lsl	w5, w4, w5
    34a8:	ldr	w4, [x26, #640]
    34ac:	orr	w4, w4, w5
    34b0:	str	w4, [x26, #640]
    34b4:	add	w2, w2, w3
    34b8:	str	w2, [x26, #644]
    34bc:	add	x3, x27, x19
    34c0:	ldrh	w4, [x3, #66]
    34c4:	ldrb	w3, [x1, x4]
    34c8:	ldr	w4, [x0, x4, lsl #2]
    34cc:	cmp	w2, #0x7
    34d0:	b.le	3510 <BZ2_compressBlock+0x3058>
    34d4:	ldrsw	x2, [x26, #116]
    34d8:	ldr	x5, [x26, #80]
    34dc:	ldrb	w6, [x26, #643]
    34e0:	strb	w6, [x5, x2]
    34e4:	ldr	w2, [x26, #116]
    34e8:	add	w2, w2, #0x1
    34ec:	str	w2, [x26, #116]
    34f0:	ldr	w2, [x26, #640]
    34f4:	lsl	w2, w2, #8
    34f8:	str	w2, [x26, #640]
    34fc:	ldr	w2, [x26, #644]
    3500:	sub	w2, w2, #0x8
    3504:	str	w2, [x26, #644]
    3508:	cmp	w2, #0x7
    350c:	b.gt	34d4 <BZ2_compressBlock+0x301c>
    3510:	sub	w5, w20, w2
    3514:	sub	w5, w5, w3
    3518:	lsl	w5, w4, w5
    351c:	ldr	w4, [x26, #640]
    3520:	orr	w4, w4, w5
    3524:	str	w4, [x26, #640]
    3528:	add	w2, w3, w2
    352c:	str	w2, [x26, #644]
    3530:	add	x3, x27, x19
    3534:	ldrh	w4, [x3, #68]
    3538:	ldrb	w3, [x1, x4]
    353c:	ldr	w4, [x0, x4, lsl #2]
    3540:	cmp	w2, #0x7
    3544:	b.le	3584 <BZ2_compressBlock+0x30cc>
    3548:	ldrsw	x2, [x26, #116]
    354c:	ldr	x5, [x26, #80]
    3550:	ldrb	w6, [x26, #643]
    3554:	strb	w6, [x5, x2]
    3558:	ldr	w2, [x26, #116]
    355c:	add	w2, w2, #0x1
    3560:	str	w2, [x26, #116]
    3564:	ldr	w2, [x26, #640]
    3568:	lsl	w2, w2, #8
    356c:	str	w2, [x26, #640]
    3570:	ldr	w2, [x26, #644]
    3574:	sub	w2, w2, #0x8
    3578:	str	w2, [x26, #644]
    357c:	cmp	w2, #0x7
    3580:	b.gt	3548 <BZ2_compressBlock+0x3090>
    3584:	sub	w5, w20, w2
    3588:	sub	w5, w5, w3
    358c:	lsl	w5, w4, w5
    3590:	ldr	w4, [x26, #640]
    3594:	orr	w4, w4, w5
    3598:	str	w4, [x26, #640]
    359c:	add	w3, w3, w2
    35a0:	str	w3, [x26, #644]
    35a4:	add	x2, x27, x19
    35a8:	ldrh	w4, [x2, #70]
    35ac:	ldrb	w2, [x1, x4]
    35b0:	ldr	w4, [x0, x4, lsl #2]
    35b4:	cmp	w3, #0x7
    35b8:	b.le	35f8 <BZ2_compressBlock+0x3140>
    35bc:	ldrsw	x3, [x26, #116]
    35c0:	ldr	x5, [x26, #80]
    35c4:	ldrb	w6, [x26, #643]
    35c8:	strb	w6, [x5, x3]
    35cc:	ldr	w3, [x26, #116]
    35d0:	add	w3, w3, #0x1
    35d4:	str	w3, [x26, #116]
    35d8:	ldr	w3, [x26, #640]
    35dc:	lsl	w3, w3, #8
    35e0:	str	w3, [x26, #640]
    35e4:	ldr	w3, [x26, #644]
    35e8:	sub	w3, w3, #0x8
    35ec:	str	w3, [x26, #644]
    35f0:	cmp	w3, #0x7
    35f4:	b.gt	35bc <BZ2_compressBlock+0x3104>
    35f8:	sub	w5, w20, w3
    35fc:	sub	w5, w5, w2
    3600:	lsl	w5, w4, w5
    3604:	ldr	w4, [x26, #640]
    3608:	orr	w4, w4, w5
    360c:	str	w4, [x26, #640]
    3610:	add	w3, w2, w3
    3614:	str	w3, [x26, #644]
    3618:	add	x2, x27, x19
    361c:	ldrh	w4, [x2, #72]
    3620:	ldrb	w2, [x1, x4]
    3624:	ldr	w4, [x0, x4, lsl #2]
    3628:	cmp	w3, #0x7
    362c:	b.le	366c <BZ2_compressBlock+0x31b4>
    3630:	ldrsw	x3, [x26, #116]
    3634:	ldr	x5, [x26, #80]
    3638:	ldrb	w6, [x26, #643]
    363c:	strb	w6, [x5, x3]
    3640:	ldr	w3, [x26, #116]
    3644:	add	w3, w3, #0x1
    3648:	str	w3, [x26, #116]
    364c:	ldr	w3, [x26, #640]
    3650:	lsl	w3, w3, #8
    3654:	str	w3, [x26, #640]
    3658:	ldr	w3, [x26, #644]
    365c:	sub	w3, w3, #0x8
    3660:	str	w3, [x26, #644]
    3664:	cmp	w3, #0x7
    3668:	b.gt	3630 <BZ2_compressBlock+0x3178>
    366c:	sub	w5, w20, w3
    3670:	sub	w5, w5, w2
    3674:	lsl	w5, w4, w5
    3678:	ldr	w4, [x26, #640]
    367c:	orr	w4, w4, w5
    3680:	str	w4, [x26, #640]
    3684:	add	w2, w2, w3
    3688:	str	w2, [x26, #644]
    368c:	add	x3, x27, x19
    3690:	ldrh	w4, [x3, #74]
    3694:	ldrb	w3, [x1, x4]
    3698:	ldr	w4, [x0, x4, lsl #2]
    369c:	cmp	w2, #0x7
    36a0:	b.le	36e0 <BZ2_compressBlock+0x3228>
    36a4:	ldrsw	x2, [x26, #116]
    36a8:	ldr	x5, [x26, #80]
    36ac:	ldrb	w6, [x26, #643]
    36b0:	strb	w6, [x5, x2]
    36b4:	ldr	w2, [x26, #116]
    36b8:	add	w2, w2, #0x1
    36bc:	str	w2, [x26, #116]
    36c0:	ldr	w2, [x26, #640]
    36c4:	lsl	w2, w2, #8
    36c8:	str	w2, [x26, #640]
    36cc:	ldr	w2, [x26, #644]
    36d0:	sub	w2, w2, #0x8
    36d4:	str	w2, [x26, #644]
    36d8:	cmp	w2, #0x7
    36dc:	b.gt	36a4 <BZ2_compressBlock+0x31ec>
    36e0:	sub	w5, w20, w2
    36e4:	sub	w5, w5, w3
    36e8:	lsl	w5, w4, w5
    36ec:	ldr	w4, [x26, #640]
    36f0:	orr	w4, w4, w5
    36f4:	str	w4, [x26, #640]
    36f8:	add	w2, w3, w2
    36fc:	str	w2, [x26, #644]
    3700:	add	x3, x27, x19
    3704:	ldrh	w4, [x3, #76]
    3708:	ldrb	w3, [x1, x4]
    370c:	ldr	w4, [x0, x4, lsl #2]
    3710:	cmp	w2, #0x7
    3714:	b.le	3754 <BZ2_compressBlock+0x329c>
    3718:	ldrsw	x2, [x26, #116]
    371c:	ldr	x5, [x26, #80]
    3720:	ldrb	w6, [x26, #643]
    3724:	strb	w6, [x5, x2]
    3728:	ldr	w2, [x26, #116]
    372c:	add	w2, w2, #0x1
    3730:	str	w2, [x26, #116]
    3734:	ldr	w2, [x26, #640]
    3738:	lsl	w2, w2, #8
    373c:	str	w2, [x26, #640]
    3740:	ldr	w2, [x26, #644]
    3744:	sub	w2, w2, #0x8
    3748:	str	w2, [x26, #644]
    374c:	cmp	w2, #0x7
    3750:	b.gt	3718 <BZ2_compressBlock+0x3260>
    3754:	sub	w5, w20, w2
    3758:	sub	w5, w5, w3
    375c:	lsl	w5, w4, w5
    3760:	ldr	w4, [x26, #640]
    3764:	orr	w4, w4, w5
    3768:	str	w4, [x26, #640]
    376c:	add	w3, w3, w2
    3770:	str	w3, [x26, #644]
    3774:	add	x2, x27, x19
    3778:	ldrh	w4, [x2, #78]
    377c:	ldrb	w2, [x1, x4]
    3780:	ldr	w4, [x0, x4, lsl #2]
    3784:	cmp	w3, #0x7
    3788:	b.le	37c8 <BZ2_compressBlock+0x3310>
    378c:	ldrsw	x3, [x26, #116]
    3790:	ldr	x5, [x26, #80]
    3794:	ldrb	w6, [x26, #643]
    3798:	strb	w6, [x5, x3]
    379c:	ldr	w3, [x26, #116]
    37a0:	add	w3, w3, #0x1
    37a4:	str	w3, [x26, #116]
    37a8:	ldr	w3, [x26, #640]
    37ac:	lsl	w3, w3, #8
    37b0:	str	w3, [x26, #640]
    37b4:	ldr	w3, [x26, #644]
    37b8:	sub	w3, w3, #0x8
    37bc:	str	w3, [x26, #644]
    37c0:	cmp	w3, #0x7
    37c4:	b.gt	378c <BZ2_compressBlock+0x32d4>
    37c8:	sub	w5, w20, w3
    37cc:	sub	w5, w5, w2
    37d0:	lsl	w5, w4, w5
    37d4:	ldr	w4, [x26, #640]
    37d8:	orr	w4, w4, w5
    37dc:	str	w4, [x26, #640]
    37e0:	add	w3, w2, w3
    37e4:	str	w3, [x26, #644]
    37e8:	add	x2, x27, x19
    37ec:	ldrh	w4, [x2, #80]
    37f0:	ldrb	w2, [x1, x4]
    37f4:	ldr	w4, [x0, x4, lsl #2]
    37f8:	cmp	w3, #0x7
    37fc:	b.le	383c <BZ2_compressBlock+0x3384>
    3800:	ldrsw	x3, [x26, #116]
    3804:	ldr	x5, [x26, #80]
    3808:	ldrb	w6, [x26, #643]
    380c:	strb	w6, [x5, x3]
    3810:	ldr	w3, [x26, #116]
    3814:	add	w3, w3, #0x1
    3818:	str	w3, [x26, #116]
    381c:	ldr	w3, [x26, #640]
    3820:	lsl	w3, w3, #8
    3824:	str	w3, [x26, #640]
    3828:	ldr	w3, [x26, #644]
    382c:	sub	w3, w3, #0x8
    3830:	str	w3, [x26, #644]
    3834:	cmp	w3, #0x7
    3838:	b.gt	3800 <BZ2_compressBlock+0x3348>
    383c:	sub	w5, w20, w3
    3840:	sub	w5, w5, w2
    3844:	lsl	w5, w4, w5
    3848:	ldr	w4, [x26, #640]
    384c:	orr	w4, w4, w5
    3850:	str	w4, [x26, #640]
    3854:	add	w2, w2, w3
    3858:	str	w2, [x26, #644]
    385c:	add	x3, x27, x19
    3860:	ldrh	w4, [x3, #82]
    3864:	ldrb	w3, [x1, x4]
    3868:	ldr	w4, [x0, x4, lsl #2]
    386c:	cmp	w2, #0x7
    3870:	b.le	38b0 <BZ2_compressBlock+0x33f8>
    3874:	ldrsw	x2, [x26, #116]
    3878:	ldr	x5, [x26, #80]
    387c:	ldrb	w6, [x26, #643]
    3880:	strb	w6, [x5, x2]
    3884:	ldr	w2, [x26, #116]
    3888:	add	w2, w2, #0x1
    388c:	str	w2, [x26, #116]
    3890:	ldr	w2, [x26, #640]
    3894:	lsl	w2, w2, #8
    3898:	str	w2, [x26, #640]
    389c:	ldr	w2, [x26, #644]
    38a0:	sub	w2, w2, #0x8
    38a4:	str	w2, [x26, #644]
    38a8:	cmp	w2, #0x7
    38ac:	b.gt	3874 <BZ2_compressBlock+0x33bc>
    38b0:	sub	w5, w20, w2
    38b4:	sub	w5, w5, w3
    38b8:	lsl	w5, w4, w5
    38bc:	ldr	w4, [x26, #640]
    38c0:	orr	w4, w4, w5
    38c4:	str	w4, [x26, #640]
    38c8:	add	w2, w3, w2
    38cc:	str	w2, [x26, #644]
    38d0:	add	x3, x27, x19
    38d4:	ldrh	w4, [x3, #84]
    38d8:	ldrb	w3, [x1, x4]
    38dc:	ldr	w4, [x0, x4, lsl #2]
    38e0:	cmp	w2, #0x7
    38e4:	b.le	3924 <BZ2_compressBlock+0x346c>
    38e8:	ldrsw	x2, [x26, #116]
    38ec:	ldr	x5, [x26, #80]
    38f0:	ldrb	w6, [x26, #643]
    38f4:	strb	w6, [x5, x2]
    38f8:	ldr	w2, [x26, #116]
    38fc:	add	w2, w2, #0x1
    3900:	str	w2, [x26, #116]
    3904:	ldr	w2, [x26, #640]
    3908:	lsl	w2, w2, #8
    390c:	str	w2, [x26, #640]
    3910:	ldr	w2, [x26, #644]
    3914:	sub	w2, w2, #0x8
    3918:	str	w2, [x26, #644]
    391c:	cmp	w2, #0x7
    3920:	b.gt	38e8 <BZ2_compressBlock+0x3430>
    3924:	sub	w5, w20, w2
    3928:	sub	w5, w5, w3
    392c:	lsl	w5, w4, w5
    3930:	ldr	w4, [x26, #640]
    3934:	orr	w4, w4, w5
    3938:	str	w4, [x26, #640]
    393c:	add	w3, w3, w2
    3940:	str	w3, [x26, #644]
    3944:	add	x2, x27, x19
    3948:	ldrh	w4, [x2, #86]
    394c:	ldrb	w2, [x1, x4]
    3950:	ldr	w4, [x0, x4, lsl #2]
    3954:	cmp	w3, #0x7
    3958:	b.le	3998 <BZ2_compressBlock+0x34e0>
    395c:	ldrsw	x3, [x26, #116]
    3960:	ldr	x5, [x26, #80]
    3964:	ldrb	w6, [x26, #643]
    3968:	strb	w6, [x5, x3]
    396c:	ldr	w3, [x26, #116]
    3970:	add	w3, w3, #0x1
    3974:	str	w3, [x26, #116]
    3978:	ldr	w3, [x26, #640]
    397c:	lsl	w3, w3, #8
    3980:	str	w3, [x26, #640]
    3984:	ldr	w3, [x26, #644]
    3988:	sub	w3, w3, #0x8
    398c:	str	w3, [x26, #644]
    3990:	cmp	w3, #0x7
    3994:	b.gt	395c <BZ2_compressBlock+0x34a4>
    3998:	sub	w5, w20, w3
    399c:	sub	w5, w5, w2
    39a0:	lsl	w5, w4, w5
    39a4:	ldr	w4, [x26, #640]
    39a8:	orr	w4, w4, w5
    39ac:	str	w4, [x26, #640]
    39b0:	add	w3, w2, w3
    39b4:	str	w3, [x26, #644]
    39b8:	add	x2, x27, x19
    39bc:	ldrh	w4, [x2, #88]
    39c0:	ldrb	w2, [x1, x4]
    39c4:	ldr	w4, [x0, x4, lsl #2]
    39c8:	cmp	w3, #0x7
    39cc:	b.le	3a0c <BZ2_compressBlock+0x3554>
    39d0:	ldrsw	x3, [x26, #116]
    39d4:	ldr	x5, [x26, #80]
    39d8:	ldrb	w6, [x26, #643]
    39dc:	strb	w6, [x5, x3]
    39e0:	ldr	w3, [x26, #116]
    39e4:	add	w3, w3, #0x1
    39e8:	str	w3, [x26, #116]
    39ec:	ldr	w3, [x26, #640]
    39f0:	lsl	w3, w3, #8
    39f4:	str	w3, [x26, #640]
    39f8:	ldr	w3, [x26, #644]
    39fc:	sub	w3, w3, #0x8
    3a00:	str	w3, [x26, #644]
    3a04:	cmp	w3, #0x7
    3a08:	b.gt	39d0 <BZ2_compressBlock+0x3518>
    3a0c:	sub	w5, w20, w3
    3a10:	sub	w5, w5, w2
    3a14:	lsl	w5, w4, w5
    3a18:	ldr	w4, [x26, #640]
    3a1c:	orr	w4, w4, w5
    3a20:	str	w4, [x26, #640]
    3a24:	add	w2, w2, w3
    3a28:	str	w2, [x26, #644]
    3a2c:	add	x3, x27, x19
    3a30:	ldrh	w4, [x3, #90]
    3a34:	ldrb	w3, [x1, x4]
    3a38:	ldr	w4, [x0, x4, lsl #2]
    3a3c:	cmp	w2, #0x7
    3a40:	b.le	3a80 <BZ2_compressBlock+0x35c8>
    3a44:	ldrsw	x2, [x26, #116]
    3a48:	ldr	x5, [x26, #80]
    3a4c:	ldrb	w6, [x26, #643]
    3a50:	strb	w6, [x5, x2]
    3a54:	ldr	w2, [x26, #116]
    3a58:	add	w2, w2, #0x1
    3a5c:	str	w2, [x26, #116]
    3a60:	ldr	w2, [x26, #640]
    3a64:	lsl	w2, w2, #8
    3a68:	str	w2, [x26, #640]
    3a6c:	ldr	w2, [x26, #644]
    3a70:	sub	w2, w2, #0x8
    3a74:	str	w2, [x26, #644]
    3a78:	cmp	w2, #0x7
    3a7c:	b.gt	3a44 <BZ2_compressBlock+0x358c>
    3a80:	sub	w5, w20, w2
    3a84:	sub	w5, w5, w3
    3a88:	lsl	w5, w4, w5
    3a8c:	ldr	w4, [x26, #640]
    3a90:	orr	w4, w4, w5
    3a94:	str	w4, [x26, #640]
    3a98:	add	w2, w3, w2
    3a9c:	str	w2, [x26, #644]
    3aa0:	add	x3, x27, x19
    3aa4:	ldrh	w4, [x3, #92]
    3aa8:	ldrb	w3, [x1, x4]
    3aac:	ldr	w4, [x0, x4, lsl #2]
    3ab0:	cmp	w2, #0x7
    3ab4:	b.le	3af4 <BZ2_compressBlock+0x363c>
    3ab8:	ldrsw	x2, [x26, #116]
    3abc:	ldr	x5, [x26, #80]
    3ac0:	ldrb	w6, [x26, #643]
    3ac4:	strb	w6, [x5, x2]
    3ac8:	ldr	w2, [x26, #116]
    3acc:	add	w2, w2, #0x1
    3ad0:	str	w2, [x26, #116]
    3ad4:	ldr	w2, [x26, #640]
    3ad8:	lsl	w2, w2, #8
    3adc:	str	w2, [x26, #640]
    3ae0:	ldr	w2, [x26, #644]
    3ae4:	sub	w2, w2, #0x8
    3ae8:	str	w2, [x26, #644]
    3aec:	cmp	w2, #0x7
    3af0:	b.gt	3ab8 <BZ2_compressBlock+0x3600>
    3af4:	sub	w5, w20, w2
    3af8:	sub	w5, w5, w3
    3afc:	lsl	w5, w4, w5
    3b00:	ldr	w4, [x26, #640]
    3b04:	orr	w4, w4, w5
    3b08:	str	w4, [x26, #640]
    3b0c:	add	w3, w3, w2
    3b10:	str	w3, [x26, #644]
    3b14:	add	x2, x27, x19
    3b18:	ldrh	w4, [x2, #94]
    3b1c:	ldrb	w2, [x1, x4]
    3b20:	ldr	w4, [x0, x4, lsl #2]
    3b24:	cmp	w3, #0x7
    3b28:	b.le	3b68 <BZ2_compressBlock+0x36b0>
    3b2c:	ldrsw	x3, [x26, #116]
    3b30:	ldr	x5, [x26, #80]
    3b34:	ldrb	w6, [x26, #643]
    3b38:	strb	w6, [x5, x3]
    3b3c:	ldr	w3, [x26, #116]
    3b40:	add	w3, w3, #0x1
    3b44:	str	w3, [x26, #116]
    3b48:	ldr	w3, [x26, #640]
    3b4c:	lsl	w3, w3, #8
    3b50:	str	w3, [x26, #640]
    3b54:	ldr	w3, [x26, #644]
    3b58:	sub	w3, w3, #0x8
    3b5c:	str	w3, [x26, #644]
    3b60:	cmp	w3, #0x7
    3b64:	b.gt	3b2c <BZ2_compressBlock+0x3674>
    3b68:	sub	w5, w20, w3
    3b6c:	sub	w5, w5, w2
    3b70:	lsl	w5, w4, w5
    3b74:	ldr	w4, [x26, #640]
    3b78:	orr	w4, w4, w5
    3b7c:	str	w4, [x26, #640]
    3b80:	add	w3, w2, w3
    3b84:	str	w3, [x26, #644]
    3b88:	add	x2, x27, x19
    3b8c:	ldrh	w4, [x2, #96]
    3b90:	ldrb	w2, [x1, x4]
    3b94:	ldr	w4, [x0, x4, lsl #2]
    3b98:	cmp	w3, #0x7
    3b9c:	b.le	3bdc <BZ2_compressBlock+0x3724>
    3ba0:	ldrsw	x3, [x26, #116]
    3ba4:	ldr	x5, [x26, #80]
    3ba8:	ldrb	w6, [x26, #643]
    3bac:	strb	w6, [x5, x3]
    3bb0:	ldr	w3, [x26, #116]
    3bb4:	add	w3, w3, #0x1
    3bb8:	str	w3, [x26, #116]
    3bbc:	ldr	w3, [x26, #640]
    3bc0:	lsl	w3, w3, #8
    3bc4:	str	w3, [x26, #640]
    3bc8:	ldr	w3, [x26, #644]
    3bcc:	sub	w3, w3, #0x8
    3bd0:	str	w3, [x26, #644]
    3bd4:	cmp	w3, #0x7
    3bd8:	b.gt	3ba0 <BZ2_compressBlock+0x36e8>
    3bdc:	sub	w5, w20, w3
    3be0:	sub	w5, w5, w2
    3be4:	lsl	w5, w4, w5
    3be8:	ldr	w4, [x26, #640]
    3bec:	orr	w4, w4, w5
    3bf0:	str	w4, [x26, #640]
    3bf4:	add	w2, w2, w3
    3bf8:	str	w2, [x26, #644]
    3bfc:	add	x19, x27, x19
    3c00:	ldrh	w3, [x19, #98]
    3c04:	ldrb	w1, [x1, x3]
    3c08:	ldr	w3, [x0, x3, lsl #2]
    3c0c:	cmp	w2, #0x7
    3c10:	b.le	3c50 <BZ2_compressBlock+0x3798>
    3c14:	ldrsw	x0, [x26, #116]
    3c18:	ldr	x2, [x26, #80]
    3c1c:	ldrb	w4, [x26, #643]
    3c20:	strb	w4, [x2, x0]
    3c24:	ldr	w0, [x26, #116]
    3c28:	add	w0, w0, #0x1
    3c2c:	str	w0, [x26, #116]
    3c30:	ldr	w0, [x26, #640]
    3c34:	lsl	w0, w0, #8
    3c38:	str	w0, [x26, #640]
    3c3c:	ldr	w2, [x26, #644]
    3c40:	sub	w2, w2, #0x8
    3c44:	str	w2, [x26, #644]
    3c48:	cmp	w2, #0x7
    3c4c:	b.gt	3c14 <BZ2_compressBlock+0x375c>
    3c50:	sub	w0, w20, w2
    3c54:	sub	w0, w0, w1
    3c58:	lsl	w3, w3, w0
    3c5c:	ldr	w0, [x26, #640]
    3c60:	orr	w0, w0, w3
    3c64:	str	w0, [x26, #640]
    3c68:	add	w2, w1, w2
    3c6c:	str	w2, [x26, #644]
    3c70:	add	w19, w21, #0x1
    3c74:	mov	w1, w23
    3c78:	ldr	w0, [x26, #668]
    3c7c:	add	x23, x23, #0x1
    3c80:	cmp	w0, w19
    3c84:	b.le	3d74 <BZ2_compressBlock+0x38bc>
    3c88:	add	w21, w19, #0x31
    3c8c:	sub	w1, w0, #0x1
    3c90:	cmp	w21, w0
    3c94:	csel	w21, w1, w21, ge  // ge = tcont
    3c98:	ldrb	w0, [x24, x23]
    3c9c:	cmp	w22, w0
    3ca0:	b.le	2590 <BZ2_compressBlock+0x20d8>
    3ca4:	cmp	w22, #0x6
    3ca8:	b.ne	3cb8 <BZ2_compressBlock+0x3800>  // b.any
    3cac:	sub	w0, w21, w19
    3cb0:	cmp	w0, #0x31
    3cb4:	b.eq	259c <BZ2_compressBlock+0x20e4>  // b.none
    3cb8:	sxtw	x2, w19
    3cbc:	cmp	w21, w19
    3cc0:	b.ge	3cf4 <BZ2_compressBlock+0x383c>  // b.tcont
    3cc4:	b	3c70 <BZ2_compressBlock+0x37b8>
    3cc8:	sub	w4, w20, w0
    3ccc:	sub	w4, w4, w1
    3cd0:	lsl	w4, w3, w4
    3cd4:	ldr	w3, [x26, #640]
    3cd8:	orr	w3, w3, w4
    3cdc:	str	w3, [x26, #640]
    3ce0:	add	w0, w1, w0
    3ce4:	str	w0, [x26, #644]
    3ce8:	add	x2, x2, #0x1
    3cec:	cmp	w21, w2
    3cf0:	b.lt	3c70 <BZ2_compressBlock+0x37b8>  // b.tstop
    3cf4:	ldrh	w4, [x27, x2, lsl #1]
    3cf8:	ldrb	w3, [x24, x23]
    3cfc:	lsl	x0, x3, #7
    3d00:	add	x1, x0, x3
    3d04:	add	x1, x26, x1, lsl #1
    3d08:	add	x1, x1, x4
    3d0c:	add	x1, x1, #0x9, lsl #12
    3d10:	ldrb	w1, [x1, #844]
    3d14:	add	x0, x0, x3
    3d18:	add	x0, x4, x0, lsl #1
    3d1c:	add	x0, x0, x25
    3d20:	add	x0, x26, x0, lsl #2
    3d24:	ldr	w3, [x0, #8]
    3d28:	ldr	w0, [x26, #644]
    3d2c:	cmp	w0, #0x7
    3d30:	b.le	3cc8 <BZ2_compressBlock+0x3810>
    3d34:	ldrsw	x0, [x26, #116]
    3d38:	ldr	x4, [x26, #80]
    3d3c:	ldrb	w5, [x26, #643]
    3d40:	strb	w5, [x4, x0]
    3d44:	ldr	w0, [x26, #116]
    3d48:	add	w0, w0, #0x1
    3d4c:	str	w0, [x26, #116]
    3d50:	ldr	w0, [x26, #640]
    3d54:	lsl	w0, w0, #8
    3d58:	str	w0, [x26, #640]
    3d5c:	ldr	w0, [x26, #644]
    3d60:	sub	w0, w0, #0x8
    3d64:	str	w0, [x26, #644]
    3d68:	cmp	w0, #0x7
    3d6c:	b.gt	3d34 <BZ2_compressBlock+0x387c>
    3d70:	b	3cc8 <BZ2_compressBlock+0x3810>
    3d74:	ldr	w19, [sp, #120]
    3d78:	cmp	w19, w1
    3d7c:	b.ne	3dac <BZ2_compressBlock+0x38f4>  // b.any
    3d80:	ldr	w0, [x26, #656]
    3d84:	cmp	w0, #0x2
    3d88:	b.gt	3db8 <BZ2_compressBlock+0x3900>
    3d8c:	ldp	x19, x20, [sp, #16]
    3d90:	ldp	x21, x22, [sp, #32]
    3d94:	ldp	x23, x24, [sp, #48]
    3d98:	ldp	x27, x28, [sp, #80]
    3d9c:	ldr	d8, [sp, #96]
    3da0:	b	544 <BZ2_compressBlock+0x8c>
    3da4:	ldr	w1, [sp, #112]
    3da8:	b	3d78 <BZ2_compressBlock+0x38c0>
    3dac:	mov	w0, #0xbbf                 	// #3007
    3db0:	bl	0 <BZ2_bz__AssertH__fail>
    3db4:	b	3d80 <BZ2_compressBlock+0x38c8>
    3db8:	ldr	w2, [x26, #116]
    3dbc:	ldr	w0, [sp, #128]
    3dc0:	sub	w2, w2, w0
    3dc4:	adrp	x1, 0 <bsFinishWrite>
    3dc8:	add	x1, x1, #0x0
    3dcc:	adrp	x0, 0 <stderr>
    3dd0:	ldr	x0, [x0]
    3dd4:	bl	0 <fprintf>
    3dd8:	ldp	x19, x20, [sp, #16]
    3ddc:	ldp	x21, x22, [sp, #32]
    3de0:	ldp	x23, x24, [sp, #48]
    3de4:	ldp	x27, x28, [sp, #80]
    3de8:	ldr	d8, [sp, #96]
    3dec:	b	544 <BZ2_compressBlock+0x8c>
    3df0:	mov	w1, #0x17                  	// #23
    3df4:	mov	x0, x26
    3df8:	bl	294 <bsPutUChar>
    3dfc:	mov	w1, #0x72                  	// #114
    3e00:	mov	x0, x26
    3e04:	bl	294 <bsPutUChar>
    3e08:	mov	w1, #0x45                  	// #69
    3e0c:	mov	x0, x26
    3e10:	bl	294 <bsPutUChar>
    3e14:	mov	w1, #0x38                  	// #56
    3e18:	mov	x0, x26
    3e1c:	bl	294 <bsPutUChar>
    3e20:	mov	w1, #0x50                  	// #80
    3e24:	mov	x0, x26
    3e28:	bl	294 <bsPutUChar>
    3e2c:	mov	w1, #0xffffff90            	// #-112
    3e30:	mov	x0, x26
    3e34:	bl	294 <bsPutUChar>
    3e38:	ldr	w1, [x26, #652]
    3e3c:	mov	x0, x26
    3e40:	bl	304 <bsPutUInt32>
    3e44:	ldr	w0, [x26, #656]
    3e48:	cmp	w0, #0x1
    3e4c:	b.gt	3e5c <BZ2_compressBlock+0x39a4>
    3e50:	mov	x0, x26
    3e54:	bl	0 <bsFinishWrite>
    3e58:	b	54c <BZ2_compressBlock+0x94>
    3e5c:	ldr	w2, [x26, #652]
    3e60:	adrp	x1, 0 <bsFinishWrite>
    3e64:	add	x1, x1, #0x0
    3e68:	adrp	x0, 0 <stderr>
    3e6c:	ldr	x0, [x0]
    3e70:	bl	0 <fprintf>
    3e74:	b	3e50 <BZ2_compressBlock+0x3998>

decompress.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_decompress>:
       0:	stp	x29, x30, [sp, #-208]!
       4:	mov	x29, sp
       8:	stp	x19, x20, [sp, #16]
       c:	stp	x21, x22, [sp, #32]
      10:	stp	x23, x24, [sp, #48]
      14:	stp	x25, x26, [sp, #64]
      18:	stp	x27, x28, [sp, #80]
      1c:	mov	x19, x0
      20:	ldr	x0, [x0]
      24:	str	x0, [sp, #176]
      28:	ldr	w1, [x19, #8]
      2c:	cmp	w1, #0xa
      30:	b.eq	fc <BZ2_decompress+0xfc>  // b.none
      34:	add	x0, x19, #0xc, lsl #12
      38:	ldr	w25, [x0, #14884]
      3c:	ldr	w23, [x0, #14888]
      40:	ldr	w26, [x0, #14892]
      44:	ldr	w22, [x0, #14896]
      48:	ldr	w24, [x0, #14900]
      4c:	ldr	w2, [x0, #14904]
      50:	str	w2, [sp, #108]
      54:	ldr	w2, [x0, #14908]
      58:	str	w2, [sp, #164]
      5c:	ldr	w2, [x0, #14912]
      60:	str	w2, [sp, #148]
      64:	ldr	w2, [x0, #14916]
      68:	str	w2, [sp, #144]
      6c:	ldr	w2, [x0, #14920]
      70:	str	w2, [sp, #132]
      74:	ldr	w2, [x0, #14924]
      78:	str	w2, [sp, #152]
      7c:	ldr	w28, [x0, #14928]
      80:	ldr	w2, [x0, #14932]
      84:	str	w2, [sp, #128]
      88:	ldr	w2, [x0, #14936]
      8c:	str	w2, [sp, #156]
      90:	ldr	w27, [x0, #14940]
      94:	ldr	w2, [x0, #14944]
      98:	str	w2, [sp, #172]
      9c:	ldr	w20, [x0, #14948]
      a0:	ldr	w21, [x0, #14952]
      a4:	ldr	w2, [x0, #14956]
      a8:	str	w2, [sp, #104]
      ac:	ldr	w2, [x0, #14960]
      b0:	str	w2, [sp, #168]
      b4:	ldr	w0, [x0, #14964]
      b8:	str	w0, [sp, #160]
      bc:	add	x0, x19, #0x8, lsl #12
      c0:	ldr	x2, [x0, #31352]
      c4:	str	x2, [sp, #112]
      c8:	ldr	x2, [x0, #31360]
      cc:	str	x2, [sp, #120]
      d0:	ldr	x0, [x0, #31368]
      d4:	str	x0, [sp, #136]
      d8:	sub	w1, w1, #0xa
      dc:	cmp	w1, #0x28
      e0:	b.hi	2a8c <BZ2_decompress+0x2a8c>  // b.pmore
      e4:	adrp	x0, 0 <BZ2_decompress>
      e8:	add	x0, x0, #0x0
      ec:	ldrh	w0, [x0, w1, uxtw #1]
      f0:	adr	x1, fc <BZ2_decompress+0xfc>
      f4:	add	x0, x1, w0, sxth #2
      f8:	br	x0
      fc:	add	x0, x19, #0xc, lsl #12
     100:	str	wzr, [x0, #14884]
     104:	str	wzr, [x0, #14888]
     108:	str	wzr, [x0, #14892]
     10c:	str	wzr, [x0, #14896]
     110:	str	wzr, [x0, #14900]
     114:	str	wzr, [x0, #14904]
     118:	str	wzr, [x0, #14908]
     11c:	str	wzr, [x0, #14912]
     120:	str	wzr, [x0, #14916]
     124:	str	wzr, [x0, #14920]
     128:	str	wzr, [x0, #14924]
     12c:	str	wzr, [x0, #14928]
     130:	str	wzr, [x0, #14932]
     134:	str	wzr, [x0, #14936]
     138:	str	wzr, [x0, #14940]
     13c:	str	wzr, [x0, #14944]
     140:	str	wzr, [x0, #14948]
     144:	str	wzr, [x0, #14952]
     148:	str	wzr, [x0, #14956]
     14c:	str	wzr, [x0, #14960]
     150:	str	wzr, [x0, #14964]
     154:	add	x0, x19, #0x8, lsl #12
     158:	str	xzr, [x0, #31352]
     15c:	str	xzr, [x0, #31360]
     160:	str	xzr, [x0, #31368]
     164:	b	34 <BZ2_decompress+0x34>
     168:	mov	w0, #0xa                   	// #10
     16c:	str	w0, [x19, #8]
     170:	ldr	w0, [x19, #36]
     174:	cmp	w0, #0x7
     178:	b.gt	1ec <BZ2_decompress+0x1ec>
     17c:	ldr	x1, [x19]
     180:	ldr	w2, [x1, #8]
     184:	cbz	w2, 2aac <BZ2_decompress+0x2aac>
     188:	ldr	w2, [x19, #32]
     18c:	ldr	x3, [x1]
     190:	ldrb	w3, [x3]
     194:	orr	w2, w3, w2, lsl #8
     198:	str	w2, [x19, #32]
     19c:	add	w0, w0, #0x8
     1a0:	str	w0, [x19, #36]
     1a4:	ldr	x0, [x1]
     1a8:	add	x0, x0, #0x1
     1ac:	str	x0, [x1]
     1b0:	ldr	x1, [x19]
     1b4:	ldr	w0, [x1, #8]
     1b8:	sub	w0, w0, #0x1
     1bc:	str	w0, [x1, #8]
     1c0:	ldr	x1, [x19]
     1c4:	ldr	w0, [x1, #12]
     1c8:	add	w0, w0, #0x1
     1cc:	str	w0, [x1, #12]
     1d0:	ldr	x0, [x19]
     1d4:	ldr	w1, [x0, #12]
     1d8:	cbnz	w1, 170 <BZ2_decompress+0x170>
     1dc:	ldr	w1, [x0, #16]
     1e0:	add	w1, w1, #0x1
     1e4:	str	w1, [x0, #16]
     1e8:	b	170 <BZ2_decompress+0x170>
     1ec:	sub	w0, w0, #0x8
     1f0:	ldr	w1, [x19, #32]
     1f4:	lsr	w1, w1, w0
     1f8:	str	w0, [x19, #36]
     1fc:	and	w0, w1, #0xff
     200:	cmp	w0, #0x42
     204:	b.ne	2aa4 <BZ2_decompress+0x2aa4>  // b.any
     208:	mov	w0, #0xb                   	// #11
     20c:	str	w0, [x19, #8]
     210:	ldr	w0, [x19, #36]
     214:	cmp	w0, #0x7
     218:	b.gt	28c <BZ2_decompress+0x28c>
     21c:	ldr	x1, [x19]
     220:	ldr	w2, [x1, #8]
     224:	cbz	w2, 2abc <BZ2_decompress+0x2abc>
     228:	ldr	w2, [x19, #32]
     22c:	ldr	x3, [x1]
     230:	ldrb	w3, [x3]
     234:	orr	w2, w3, w2, lsl #8
     238:	str	w2, [x19, #32]
     23c:	add	w0, w0, #0x8
     240:	str	w0, [x19, #36]
     244:	ldr	x0, [x1]
     248:	add	x0, x0, #0x1
     24c:	str	x0, [x1]
     250:	ldr	x1, [x19]
     254:	ldr	w0, [x1, #8]
     258:	sub	w0, w0, #0x1
     25c:	str	w0, [x1, #8]
     260:	ldr	x1, [x19]
     264:	ldr	w0, [x1, #12]
     268:	add	w0, w0, #0x1
     26c:	str	w0, [x1, #12]
     270:	ldr	x0, [x19]
     274:	ldr	w1, [x0, #12]
     278:	cbnz	w1, 210 <BZ2_decompress+0x210>
     27c:	ldr	w1, [x0, #16]
     280:	add	w1, w1, #0x1
     284:	str	w1, [x0, #16]
     288:	b	210 <BZ2_decompress+0x210>
     28c:	sub	w0, w0, #0x8
     290:	ldr	w1, [x19, #32]
     294:	lsr	w1, w1, w0
     298:	str	w0, [x19, #36]
     29c:	and	w0, w1, #0xff
     2a0:	cmp	w0, #0x5a
     2a4:	b.ne	2ab4 <BZ2_decompress+0x2ab4>  // b.any
     2a8:	mov	w0, #0xc                   	// #12
     2ac:	str	w0, [x19, #8]
     2b0:	ldr	w0, [x19, #36]
     2b4:	cmp	w0, #0x7
     2b8:	b.gt	32c <BZ2_decompress+0x32c>
     2bc:	ldr	x1, [x19]
     2c0:	ldr	w2, [x1, #8]
     2c4:	cbz	w2, 2acc <BZ2_decompress+0x2acc>
     2c8:	ldr	w2, [x19, #32]
     2cc:	ldr	x3, [x1]
     2d0:	ldrb	w3, [x3]
     2d4:	orr	w2, w3, w2, lsl #8
     2d8:	str	w2, [x19, #32]
     2dc:	add	w0, w0, #0x8
     2e0:	str	w0, [x19, #36]
     2e4:	ldr	x0, [x1]
     2e8:	add	x0, x0, #0x1
     2ec:	str	x0, [x1]
     2f0:	ldr	x1, [x19]
     2f4:	ldr	w0, [x1, #8]
     2f8:	sub	w0, w0, #0x1
     2fc:	str	w0, [x1, #8]
     300:	ldr	x1, [x19]
     304:	ldr	w0, [x1, #12]
     308:	add	w0, w0, #0x1
     30c:	str	w0, [x1, #12]
     310:	ldr	x0, [x19]
     314:	ldr	w1, [x0, #12]
     318:	cbnz	w1, 2b0 <BZ2_decompress+0x2b0>
     31c:	ldr	w1, [x0, #16]
     320:	add	w1, w1, #0x1
     324:	str	w1, [x0, #16]
     328:	b	2b0 <BZ2_decompress+0x2b0>
     32c:	sub	w0, w0, #0x8
     330:	ldr	w1, [x19, #32]
     334:	lsr	w1, w1, w0
     338:	str	w0, [x19, #36]
     33c:	and	w0, w1, #0xff
     340:	cmp	w0, #0x68
     344:	b.ne	2ac4 <BZ2_decompress+0x2ac4>  // b.any
     348:	mov	w0, #0xd                   	// #13
     34c:	str	w0, [x19, #8]
     350:	ldr	w0, [x19, #36]
     354:	cmp	w0, #0x7
     358:	b.gt	3cc <BZ2_decompress+0x3cc>
     35c:	ldr	x1, [x19]
     360:	ldr	w2, [x1, #8]
     364:	cbz	w2, 2ad4 <BZ2_decompress+0x2ad4>
     368:	ldr	w2, [x19, #32]
     36c:	ldr	x3, [x1]
     370:	ldrb	w3, [x3]
     374:	orr	w2, w3, w2, lsl #8
     378:	str	w2, [x19, #32]
     37c:	add	w0, w0, #0x8
     380:	str	w0, [x19, #36]
     384:	ldr	x0, [x1]
     388:	add	x0, x0, #0x1
     38c:	str	x0, [x1]
     390:	ldr	x1, [x19]
     394:	ldr	w0, [x1, #8]
     398:	sub	w0, w0, #0x1
     39c:	str	w0, [x1, #8]
     3a0:	ldr	x1, [x19]
     3a4:	ldr	w0, [x1, #12]
     3a8:	add	w0, w0, #0x1
     3ac:	str	w0, [x1, #12]
     3b0:	ldr	x0, [x19]
     3b4:	ldr	w1, [x0, #12]
     3b8:	cbnz	w1, 350 <BZ2_decompress+0x350>
     3bc:	ldr	w1, [x0, #16]
     3c0:	add	w1, w1, #0x1
     3c4:	str	w1, [x0, #16]
     3c8:	b	350 <BZ2_decompress+0x350>
     3cc:	sub	w0, w0, #0x8
     3d0:	ldr	w1, [x19, #32]
     3d4:	lsr	w1, w1, w0
     3d8:	and	w1, w1, #0xff
     3dc:	str	w0, [x19, #36]
     3e0:	sub	w0, w1, #0x31
     3e4:	cmp	w0, #0x8
     3e8:	b.hi	468 <BZ2_decompress+0x468>  // b.pmore
     3ec:	sub	w1, w1, #0x30
     3f0:	str	w1, [x19, #40]
     3f4:	ldrb	w0, [x19, #44]
     3f8:	cbz	w0, 474 <BZ2_decompress+0x474>
     3fc:	mov	w0, #0x86a0                	// #34464
     400:	movk	w0, #0x1, lsl #16
     404:	mul	w1, w1, w0
     408:	ldr	x0, [sp, #176]
     40c:	ldr	x3, [x0, #56]
     410:	mov	w2, #0x1                   	// #1
     414:	lsl	w1, w1, #1
     418:	ldr	x0, [x0, #72]
     41c:	blr	x3
     420:	str	x0, [x19, #3160]
     424:	ldr	w1, [x19, #40]
     428:	mov	w2, #0x86a0                	// #34464
     42c:	movk	w2, #0x1, lsl #16
     430:	mul	w1, w1, w2
     434:	ldr	x0, [sp, #176]
     438:	ldr	x3, [x0, #56]
     43c:	mov	w2, #0x1                   	// #1
     440:	asr	w1, w1, #1
     444:	ldr	x0, [x0, #72]
     448:	blr	x3
     44c:	str	x0, [x19, #3168]
     450:	ldr	x1, [x19, #3160]
     454:	cmp	x1, #0x0
     458:	ccmp	x0, #0x0, #0x4, ne  // ne = any
     45c:	b.ne	4a0 <BZ2_decompress+0x4a0>  // b.any
     460:	mov	w0, #0xfffffffd            	// #-3
     464:	b	2b98 <BZ2_decompress+0x2b98>
     468:	str	w1, [x19, #40]
     46c:	mov	w0, #0xfffffffb            	// #-5
     470:	b	2b98 <BZ2_decompress+0x2b98>
     474:	mov	w0, #0x86a0                	// #34464
     478:	movk	w0, #0x1, lsl #16
     47c:	mul	w1, w1, w0
     480:	ldr	x0, [sp, #176]
     484:	ldr	x3, [x0, #56]
     488:	mov	w2, #0x1                   	// #1
     48c:	lsl	w1, w1, #2
     490:	ldr	x0, [x0, #72]
     494:	blr	x3
     498:	str	x0, [x19, #3152]
     49c:	cbz	x0, 2adc <BZ2_decompress+0x2adc>
     4a0:	mov	w0, #0xe                   	// #14
     4a4:	str	w0, [x19, #8]
     4a8:	ldr	w0, [x19, #36]
     4ac:	cmp	w0, #0x7
     4b0:	b.gt	524 <BZ2_decompress+0x524>
     4b4:	ldr	x1, [x19]
     4b8:	ldr	w2, [x1, #8]
     4bc:	cbz	w2, 2ae4 <BZ2_decompress+0x2ae4>
     4c0:	ldr	w2, [x19, #32]
     4c4:	ldr	x3, [x1]
     4c8:	ldrb	w3, [x3]
     4cc:	orr	w2, w3, w2, lsl #8
     4d0:	str	w2, [x19, #32]
     4d4:	add	w0, w0, #0x8
     4d8:	str	w0, [x19, #36]
     4dc:	ldr	x0, [x1]
     4e0:	add	x0, x0, #0x1
     4e4:	str	x0, [x1]
     4e8:	ldr	x1, [x19]
     4ec:	ldr	w0, [x1, #8]
     4f0:	sub	w0, w0, #0x1
     4f4:	str	w0, [x1, #8]
     4f8:	ldr	x1, [x19]
     4fc:	ldr	w0, [x1, #12]
     500:	add	w0, w0, #0x1
     504:	str	w0, [x1, #12]
     508:	ldr	x0, [x19]
     50c:	ldr	w1, [x0, #12]
     510:	cbnz	w1, 4a8 <BZ2_decompress+0x4a8>
     514:	ldr	w1, [x0, #16]
     518:	add	w1, w1, #0x1
     51c:	str	w1, [x0, #16]
     520:	b	4a8 <BZ2_decompress+0x4a8>
     524:	sub	w0, w0, #0x8
     528:	ldr	w1, [x19, #32]
     52c:	lsr	w1, w1, w0
     530:	str	w0, [x19, #36]
     534:	and	w0, w1, #0xff
     538:	cmp	w0, #0x17
     53c:	b.eq	24c4 <BZ2_decompress+0x24c4>  // b.none
     540:	cmp	w0, #0x31
     544:	b.ne	2aec <BZ2_decompress+0x2aec>  // b.any
     548:	mov	w0, #0xf                   	// #15
     54c:	str	w0, [x19, #8]
     550:	ldr	w0, [x19, #36]
     554:	cmp	w0, #0x7
     558:	b.gt	5cc <BZ2_decompress+0x5cc>
     55c:	ldr	x1, [x19]
     560:	ldr	w2, [x1, #8]
     564:	cbz	w2, 2afc <BZ2_decompress+0x2afc>
     568:	ldr	w2, [x19, #32]
     56c:	ldr	x3, [x1]
     570:	ldrb	w3, [x3]
     574:	orr	w2, w3, w2, lsl #8
     578:	str	w2, [x19, #32]
     57c:	add	w0, w0, #0x8
     580:	str	w0, [x19, #36]
     584:	ldr	x0, [x1]
     588:	add	x0, x0, #0x1
     58c:	str	x0, [x1]
     590:	ldr	x1, [x19]
     594:	ldr	w0, [x1, #8]
     598:	sub	w0, w0, #0x1
     59c:	str	w0, [x1, #8]
     5a0:	ldr	x1, [x19]
     5a4:	ldr	w0, [x1, #12]
     5a8:	add	w0, w0, #0x1
     5ac:	str	w0, [x1, #12]
     5b0:	ldr	x0, [x19]
     5b4:	ldr	w1, [x0, #12]
     5b8:	cbnz	w1, 550 <BZ2_decompress+0x550>
     5bc:	ldr	w1, [x0, #16]
     5c0:	add	w1, w1, #0x1
     5c4:	str	w1, [x0, #16]
     5c8:	b	550 <BZ2_decompress+0x550>
     5cc:	sub	w0, w0, #0x8
     5d0:	ldr	w1, [x19, #32]
     5d4:	lsr	w1, w1, w0
     5d8:	str	w0, [x19, #36]
     5dc:	and	w0, w1, #0xff
     5e0:	cmp	w0, #0x41
     5e4:	b.ne	2af4 <BZ2_decompress+0x2af4>  // b.any
     5e8:	mov	w0, #0x10                  	// #16
     5ec:	str	w0, [x19, #8]
     5f0:	ldr	w0, [x19, #36]
     5f4:	cmp	w0, #0x7
     5f8:	b.gt	66c <BZ2_decompress+0x66c>
     5fc:	ldr	x1, [x19]
     600:	ldr	w2, [x1, #8]
     604:	cbz	w2, 2b0c <BZ2_decompress+0x2b0c>
     608:	ldr	w2, [x19, #32]
     60c:	ldr	x3, [x1]
     610:	ldrb	w3, [x3]
     614:	orr	w2, w3, w2, lsl #8
     618:	str	w2, [x19, #32]
     61c:	add	w0, w0, #0x8
     620:	str	w0, [x19, #36]
     624:	ldr	x0, [x1]
     628:	add	x0, x0, #0x1
     62c:	str	x0, [x1]
     630:	ldr	x1, [x19]
     634:	ldr	w0, [x1, #8]
     638:	sub	w0, w0, #0x1
     63c:	str	w0, [x1, #8]
     640:	ldr	x1, [x19]
     644:	ldr	w0, [x1, #12]
     648:	add	w0, w0, #0x1
     64c:	str	w0, [x1, #12]
     650:	ldr	x0, [x19]
     654:	ldr	w1, [x0, #12]
     658:	cbnz	w1, 5f0 <BZ2_decompress+0x5f0>
     65c:	ldr	w1, [x0, #16]
     660:	add	w1, w1, #0x1
     664:	str	w1, [x0, #16]
     668:	b	5f0 <BZ2_decompress+0x5f0>
     66c:	sub	w0, w0, #0x8
     670:	ldr	w1, [x19, #32]
     674:	lsr	w1, w1, w0
     678:	str	w0, [x19, #36]
     67c:	and	w0, w1, #0xff
     680:	cmp	w0, #0x59
     684:	b.ne	2b04 <BZ2_decompress+0x2b04>  // b.any
     688:	mov	w0, #0x11                  	// #17
     68c:	str	w0, [x19, #8]
     690:	ldr	w0, [x19, #36]
     694:	cmp	w0, #0x7
     698:	b.gt	70c <BZ2_decompress+0x70c>
     69c:	ldr	x1, [x19]
     6a0:	ldr	w2, [x1, #8]
     6a4:	cbz	w2, 2b1c <BZ2_decompress+0x2b1c>
     6a8:	ldr	w2, [x19, #32]
     6ac:	ldr	x3, [x1]
     6b0:	ldrb	w3, [x3]
     6b4:	orr	w2, w3, w2, lsl #8
     6b8:	str	w2, [x19, #32]
     6bc:	add	w0, w0, #0x8
     6c0:	str	w0, [x19, #36]
     6c4:	ldr	x0, [x1]
     6c8:	add	x0, x0, #0x1
     6cc:	str	x0, [x1]
     6d0:	ldr	x1, [x19]
     6d4:	ldr	w0, [x1, #8]
     6d8:	sub	w0, w0, #0x1
     6dc:	str	w0, [x1, #8]
     6e0:	ldr	x1, [x19]
     6e4:	ldr	w0, [x1, #12]
     6e8:	add	w0, w0, #0x1
     6ec:	str	w0, [x1, #12]
     6f0:	ldr	x0, [x19]
     6f4:	ldr	w1, [x0, #12]
     6f8:	cbnz	w1, 690 <BZ2_decompress+0x690>
     6fc:	ldr	w1, [x0, #16]
     700:	add	w1, w1, #0x1
     704:	str	w1, [x0, #16]
     708:	b	690 <BZ2_decompress+0x690>
     70c:	sub	w0, w0, #0x8
     710:	ldr	w1, [x19, #32]
     714:	lsr	w1, w1, w0
     718:	str	w0, [x19, #36]
     71c:	and	w0, w1, #0xff
     720:	cmp	w0, #0x26
     724:	b.ne	2b14 <BZ2_decompress+0x2b14>  // b.any
     728:	mov	w0, #0x12                  	// #18
     72c:	str	w0, [x19, #8]
     730:	ldr	w0, [x19, #36]
     734:	cmp	w0, #0x7
     738:	b.gt	7ac <BZ2_decompress+0x7ac>
     73c:	ldr	x1, [x19]
     740:	ldr	w2, [x1, #8]
     744:	cbz	w2, 2b2c <BZ2_decompress+0x2b2c>
     748:	ldr	w2, [x19, #32]
     74c:	ldr	x3, [x1]
     750:	ldrb	w3, [x3]
     754:	orr	w2, w3, w2, lsl #8
     758:	str	w2, [x19, #32]
     75c:	add	w0, w0, #0x8
     760:	str	w0, [x19, #36]
     764:	ldr	x0, [x1]
     768:	add	x0, x0, #0x1
     76c:	str	x0, [x1]
     770:	ldr	x1, [x19]
     774:	ldr	w0, [x1, #8]
     778:	sub	w0, w0, #0x1
     77c:	str	w0, [x1, #8]
     780:	ldr	x1, [x19]
     784:	ldr	w0, [x1, #12]
     788:	add	w0, w0, #0x1
     78c:	str	w0, [x1, #12]
     790:	ldr	x0, [x19]
     794:	ldr	w1, [x0, #12]
     798:	cbnz	w1, 730 <BZ2_decompress+0x730>
     79c:	ldr	w1, [x0, #16]
     7a0:	add	w1, w1, #0x1
     7a4:	str	w1, [x0, #16]
     7a8:	b	730 <BZ2_decompress+0x730>
     7ac:	sub	w0, w0, #0x8
     7b0:	ldr	w1, [x19, #32]
     7b4:	lsr	w1, w1, w0
     7b8:	str	w0, [x19, #36]
     7bc:	and	w0, w1, #0xff
     7c0:	cmp	w0, #0x53
     7c4:	b.ne	2b24 <BZ2_decompress+0x2b24>  // b.any
     7c8:	mov	w0, #0x13                  	// #19
     7cc:	str	w0, [x19, #8]
     7d0:	ldr	w0, [x19, #36]
     7d4:	cmp	w0, #0x7
     7d8:	b.gt	84c <BZ2_decompress+0x84c>
     7dc:	ldr	x1, [x19]
     7e0:	ldr	w2, [x1, #8]
     7e4:	cbz	w2, 2b3c <BZ2_decompress+0x2b3c>
     7e8:	ldr	w2, [x19, #32]
     7ec:	ldr	x3, [x1]
     7f0:	ldrb	w3, [x3]
     7f4:	orr	w2, w3, w2, lsl #8
     7f8:	str	w2, [x19, #32]
     7fc:	add	w0, w0, #0x8
     800:	str	w0, [x19, #36]
     804:	ldr	x0, [x1]
     808:	add	x0, x0, #0x1
     80c:	str	x0, [x1]
     810:	ldr	x1, [x19]
     814:	ldr	w0, [x1, #8]
     818:	sub	w0, w0, #0x1
     81c:	str	w0, [x1, #8]
     820:	ldr	x1, [x19]
     824:	ldr	w0, [x1, #12]
     828:	add	w0, w0, #0x1
     82c:	str	w0, [x1, #12]
     830:	ldr	x0, [x19]
     834:	ldr	w1, [x0, #12]
     838:	cbnz	w1, 7d0 <BZ2_decompress+0x7d0>
     83c:	ldr	w1, [x0, #16]
     840:	add	w1, w1, #0x1
     844:	str	w1, [x0, #16]
     848:	b	7d0 <BZ2_decompress+0x7d0>
     84c:	sub	w0, w0, #0x8
     850:	ldr	w1, [x19, #32]
     854:	lsr	w1, w1, w0
     858:	str	w0, [x19, #36]
     85c:	and	w0, w1, #0xff
     860:	cmp	w0, #0x59
     864:	b.ne	2b34 <BZ2_decompress+0x2b34>  // b.any
     868:	ldr	w2, [x19, #48]
     86c:	add	w2, w2, #0x1
     870:	str	w2, [x19, #48]
     874:	ldr	w0, [x19, #52]
     878:	cmp	w0, #0x1
     87c:	b.gt	908 <BZ2_decompress+0x908>
     880:	str	wzr, [x19, #3176]
     884:	mov	w0, #0x14                  	// #20
     888:	str	w0, [x19, #8]
     88c:	ldr	w0, [x19, #36]
     890:	cmp	w0, #0x7
     894:	b.gt	920 <BZ2_decompress+0x920>
     898:	ldr	x1, [x19]
     89c:	ldr	w2, [x1, #8]
     8a0:	cbz	w2, 2b44 <BZ2_decompress+0x2b44>
     8a4:	ldr	w2, [x19, #32]
     8a8:	ldr	x3, [x1]
     8ac:	ldrb	w3, [x3]
     8b0:	orr	w2, w3, w2, lsl #8
     8b4:	str	w2, [x19, #32]
     8b8:	add	w0, w0, #0x8
     8bc:	str	w0, [x19, #36]
     8c0:	ldr	x0, [x1]
     8c4:	add	x0, x0, #0x1
     8c8:	str	x0, [x1]
     8cc:	ldr	x1, [x19]
     8d0:	ldr	w0, [x1, #8]
     8d4:	sub	w0, w0, #0x1
     8d8:	str	w0, [x1, #8]
     8dc:	ldr	x1, [x19]
     8e0:	ldr	w0, [x1, #12]
     8e4:	add	w0, w0, #0x1
     8e8:	str	w0, [x1, #12]
     8ec:	ldr	x0, [x19]
     8f0:	ldr	w1, [x0, #12]
     8f4:	cbnz	w1, 88c <BZ2_decompress+0x88c>
     8f8:	ldr	w1, [x0, #16]
     8fc:	add	w1, w1, #0x1
     900:	str	w1, [x0, #16]
     904:	b	88c <BZ2_decompress+0x88c>
     908:	adrp	x1, 0 <BZ2_decompress>
     90c:	add	x1, x1, #0x0
     910:	adrp	x0, 0 <stderr>
     914:	ldr	x0, [x0]
     918:	bl	0 <fprintf>
     91c:	b	880 <BZ2_decompress+0x880>
     920:	sub	w0, w0, #0x8
     924:	ldr	w1, [x19, #32]
     928:	lsr	w1, w1, w0
     92c:	str	w0, [x19, #36]
     930:	ldr	w0, [x19, #3176]
     934:	bfi	w1, w0, #8, #24
     938:	str	w1, [x19, #3176]
     93c:	mov	w0, #0x15                  	// #21
     940:	str	w0, [x19, #8]
     944:	ldr	w0, [x19, #36]
     948:	cmp	w0, #0x7
     94c:	b.gt	9c0 <BZ2_decompress+0x9c0>
     950:	ldr	x1, [x19]
     954:	ldr	w2, [x1, #8]
     958:	cbz	w2, 2b4c <BZ2_decompress+0x2b4c>
     95c:	ldr	w2, [x19, #32]
     960:	ldr	x3, [x1]
     964:	ldrb	w3, [x3]
     968:	orr	w2, w3, w2, lsl #8
     96c:	str	w2, [x19, #32]
     970:	add	w0, w0, #0x8
     974:	str	w0, [x19, #36]
     978:	ldr	x0, [x1]
     97c:	add	x0, x0, #0x1
     980:	str	x0, [x1]
     984:	ldr	x1, [x19]
     988:	ldr	w0, [x1, #8]
     98c:	sub	w0, w0, #0x1
     990:	str	w0, [x1, #8]
     994:	ldr	x1, [x19]
     998:	ldr	w0, [x1, #12]
     99c:	add	w0, w0, #0x1
     9a0:	str	w0, [x1, #12]
     9a4:	ldr	x0, [x19]
     9a8:	ldr	w1, [x0, #12]
     9ac:	cbnz	w1, 944 <BZ2_decompress+0x944>
     9b0:	ldr	w1, [x0, #16]
     9b4:	add	w1, w1, #0x1
     9b8:	str	w1, [x0, #16]
     9bc:	b	944 <BZ2_decompress+0x944>
     9c0:	sub	w0, w0, #0x8
     9c4:	ldr	w1, [x19, #32]
     9c8:	lsr	w1, w1, w0
     9cc:	str	w0, [x19, #36]
     9d0:	ldr	w0, [x19, #3176]
     9d4:	bfi	w1, w0, #8, #24
     9d8:	str	w1, [x19, #3176]
     9dc:	mov	w0, #0x16                  	// #22
     9e0:	str	w0, [x19, #8]
     9e4:	ldr	w0, [x19, #36]
     9e8:	cmp	w0, #0x7
     9ec:	b.gt	a60 <BZ2_decompress+0xa60>
     9f0:	ldr	x1, [x19]
     9f4:	ldr	w2, [x1, #8]
     9f8:	cbz	w2, 2b54 <BZ2_decompress+0x2b54>
     9fc:	ldr	w2, [x19, #32]
     a00:	ldr	x3, [x1]
     a04:	ldrb	w3, [x3]
     a08:	orr	w2, w3, w2, lsl #8
     a0c:	str	w2, [x19, #32]
     a10:	add	w0, w0, #0x8
     a14:	str	w0, [x19, #36]
     a18:	ldr	x0, [x1]
     a1c:	add	x0, x0, #0x1
     a20:	str	x0, [x1]
     a24:	ldr	x1, [x19]
     a28:	ldr	w0, [x1, #8]
     a2c:	sub	w0, w0, #0x1
     a30:	str	w0, [x1, #8]
     a34:	ldr	x1, [x19]
     a38:	ldr	w0, [x1, #12]
     a3c:	add	w0, w0, #0x1
     a40:	str	w0, [x1, #12]
     a44:	ldr	x0, [x19]
     a48:	ldr	w1, [x0, #12]
     a4c:	cbnz	w1, 9e4 <BZ2_decompress+0x9e4>
     a50:	ldr	w1, [x0, #16]
     a54:	add	w1, w1, #0x1
     a58:	str	w1, [x0, #16]
     a5c:	b	9e4 <BZ2_decompress+0x9e4>
     a60:	sub	w0, w0, #0x8
     a64:	ldr	w1, [x19, #32]
     a68:	lsr	w1, w1, w0
     a6c:	str	w0, [x19, #36]
     a70:	ldr	w0, [x19, #3176]
     a74:	bfi	w1, w0, #8, #24
     a78:	str	w1, [x19, #3176]
     a7c:	mov	w0, #0x17                  	// #23
     a80:	str	w0, [x19, #8]
     a84:	ldr	w0, [x19, #36]
     a88:	cmp	w0, #0x7
     a8c:	b.gt	b00 <BZ2_decompress+0xb00>
     a90:	ldr	x1, [x19]
     a94:	ldr	w2, [x1, #8]
     a98:	cbz	w2, 2b5c <BZ2_decompress+0x2b5c>
     a9c:	ldr	w2, [x19, #32]
     aa0:	ldr	x3, [x1]
     aa4:	ldrb	w3, [x3]
     aa8:	orr	w2, w3, w2, lsl #8
     aac:	str	w2, [x19, #32]
     ab0:	add	w0, w0, #0x8
     ab4:	str	w0, [x19, #36]
     ab8:	ldr	x0, [x1]
     abc:	add	x0, x0, #0x1
     ac0:	str	x0, [x1]
     ac4:	ldr	x1, [x19]
     ac8:	ldr	w0, [x1, #8]
     acc:	sub	w0, w0, #0x1
     ad0:	str	w0, [x1, #8]
     ad4:	ldr	x1, [x19]
     ad8:	ldr	w0, [x1, #12]
     adc:	add	w0, w0, #0x1
     ae0:	str	w0, [x1, #12]
     ae4:	ldr	x0, [x19]
     ae8:	ldr	w1, [x0, #12]
     aec:	cbnz	w1, a84 <BZ2_decompress+0xa84>
     af0:	ldr	w1, [x0, #16]
     af4:	add	w1, w1, #0x1
     af8:	str	w1, [x0, #16]
     afc:	b	a84 <BZ2_decompress+0xa84>
     b00:	sub	w0, w0, #0x8
     b04:	ldr	w1, [x19, #32]
     b08:	lsr	w1, w1, w0
     b0c:	str	w0, [x19, #36]
     b10:	ldr	w0, [x19, #3176]
     b14:	bfi	w1, w0, #8, #24
     b18:	str	w1, [x19, #3176]
     b1c:	mov	w0, #0x18                  	// #24
     b20:	str	w0, [x19, #8]
     b24:	ldr	w0, [x19, #36]
     b28:	cmp	w0, #0x0
     b2c:	b.gt	ba0 <BZ2_decompress+0xba0>
     b30:	ldr	x1, [x19]
     b34:	ldr	w2, [x1, #8]
     b38:	cbz	w2, 2b64 <BZ2_decompress+0x2b64>
     b3c:	ldr	w2, [x19, #32]
     b40:	ldr	x3, [x1]
     b44:	ldrb	w3, [x3]
     b48:	orr	w2, w3, w2, lsl #8
     b4c:	str	w2, [x19, #32]
     b50:	add	w0, w0, #0x8
     b54:	str	w0, [x19, #36]
     b58:	ldr	x0, [x1]
     b5c:	add	x0, x0, #0x1
     b60:	str	x0, [x1]
     b64:	ldr	x1, [x19]
     b68:	ldr	w0, [x1, #8]
     b6c:	sub	w0, w0, #0x1
     b70:	str	w0, [x1, #8]
     b74:	ldr	x1, [x19]
     b78:	ldr	w0, [x1, #12]
     b7c:	add	w0, w0, #0x1
     b80:	str	w0, [x1, #12]
     b84:	ldr	x0, [x19]
     b88:	ldr	w1, [x0, #12]
     b8c:	cbnz	w1, b24 <BZ2_decompress+0xb24>
     b90:	ldr	w1, [x0, #16]
     b94:	add	w1, w1, #0x1
     b98:	str	w1, [x0, #16]
     b9c:	b	b24 <BZ2_decompress+0xb24>
     ba0:	sub	w0, w0, #0x1
     ba4:	ldr	w1, [x19, #32]
     ba8:	lsr	w1, w1, w0
     bac:	and	w1, w1, #0x1
     bb0:	str	w0, [x19, #36]
     bb4:	strb	w1, [x19, #20]
     bb8:	str	wzr, [x19, #56]
     bbc:	mov	w0, #0x19                  	// #25
     bc0:	str	w0, [x19, #8]
     bc4:	ldr	w0, [x19, #36]
     bc8:	cmp	w0, #0x7
     bcc:	b.gt	c40 <BZ2_decompress+0xc40>
     bd0:	ldr	x1, [x19]
     bd4:	ldr	w2, [x1, #8]
     bd8:	cbz	w2, 2b6c <BZ2_decompress+0x2b6c>
     bdc:	ldr	w2, [x19, #32]
     be0:	ldr	x3, [x1]
     be4:	ldrb	w3, [x3]
     be8:	orr	w2, w3, w2, lsl #8
     bec:	str	w2, [x19, #32]
     bf0:	add	w0, w0, #0x8
     bf4:	str	w0, [x19, #36]
     bf8:	ldr	x0, [x1]
     bfc:	add	x0, x0, #0x1
     c00:	str	x0, [x1]
     c04:	ldr	x1, [x19]
     c08:	ldr	w0, [x1, #8]
     c0c:	sub	w0, w0, #0x1
     c10:	str	w0, [x1, #8]
     c14:	ldr	x1, [x19]
     c18:	ldr	w0, [x1, #12]
     c1c:	add	w0, w0, #0x1
     c20:	str	w0, [x1, #12]
     c24:	ldr	x0, [x19]
     c28:	ldr	w1, [x0, #12]
     c2c:	cbnz	w1, bc4 <BZ2_decompress+0xbc4>
     c30:	ldr	w1, [x0, #16]
     c34:	add	w1, w1, #0x1
     c38:	str	w1, [x0, #16]
     c3c:	b	bc4 <BZ2_decompress+0xbc4>
     c40:	sub	w0, w0, #0x8
     c44:	ldr	w1, [x19, #32]
     c48:	lsr	w1, w1, w0
     c4c:	str	w0, [x19, #36]
     c50:	ldr	w0, [x19, #56]
     c54:	bfi	w1, w0, #8, #24
     c58:	str	w1, [x19, #56]
     c5c:	mov	w0, #0x1a                  	// #26
     c60:	str	w0, [x19, #8]
     c64:	ldr	w0, [x19, #36]
     c68:	cmp	w0, #0x7
     c6c:	b.gt	ce0 <BZ2_decompress+0xce0>
     c70:	ldr	x1, [x19]
     c74:	ldr	w2, [x1, #8]
     c78:	cbz	w2, 2b74 <BZ2_decompress+0x2b74>
     c7c:	ldr	w2, [x19, #32]
     c80:	ldr	x3, [x1]
     c84:	ldrb	w3, [x3]
     c88:	orr	w2, w3, w2, lsl #8
     c8c:	str	w2, [x19, #32]
     c90:	add	w0, w0, #0x8
     c94:	str	w0, [x19, #36]
     c98:	ldr	x0, [x1]
     c9c:	add	x0, x0, #0x1
     ca0:	str	x0, [x1]
     ca4:	ldr	x1, [x19]
     ca8:	ldr	w0, [x1, #8]
     cac:	sub	w0, w0, #0x1
     cb0:	str	w0, [x1, #8]
     cb4:	ldr	x1, [x19]
     cb8:	ldr	w0, [x1, #12]
     cbc:	add	w0, w0, #0x1
     cc0:	str	w0, [x1, #12]
     cc4:	ldr	x0, [x19]
     cc8:	ldr	w1, [x0, #12]
     ccc:	cbnz	w1, c64 <BZ2_decompress+0xc64>
     cd0:	ldr	w1, [x0, #16]
     cd4:	add	w1, w1, #0x1
     cd8:	str	w1, [x0, #16]
     cdc:	b	c64 <BZ2_decompress+0xc64>
     ce0:	sub	w0, w0, #0x8
     ce4:	ldr	w1, [x19, #32]
     ce8:	lsr	w1, w1, w0
     cec:	str	w0, [x19, #36]
     cf0:	ldr	w0, [x19, #56]
     cf4:	bfi	w1, w0, #8, #24
     cf8:	str	w1, [x19, #56]
     cfc:	mov	w0, #0x1b                  	// #27
     d00:	str	w0, [x19, #8]
     d04:	ldr	w0, [x19, #36]
     d08:	cmp	w0, #0x7
     d0c:	b.gt	d80 <BZ2_decompress+0xd80>
     d10:	ldr	x1, [x19]
     d14:	ldr	w2, [x1, #8]
     d18:	cbz	w2, 2b84 <BZ2_decompress+0x2b84>
     d1c:	ldr	w2, [x19, #32]
     d20:	ldr	x3, [x1]
     d24:	ldrb	w3, [x3]
     d28:	orr	w2, w3, w2, lsl #8
     d2c:	str	w2, [x19, #32]
     d30:	add	w0, w0, #0x8
     d34:	str	w0, [x19, #36]
     d38:	ldr	x0, [x1]
     d3c:	add	x0, x0, #0x1
     d40:	str	x0, [x1]
     d44:	ldr	x1, [x19]
     d48:	ldr	w0, [x1, #8]
     d4c:	sub	w0, w0, #0x1
     d50:	str	w0, [x1, #8]
     d54:	ldr	x1, [x19]
     d58:	ldr	w0, [x1, #12]
     d5c:	add	w0, w0, #0x1
     d60:	str	w0, [x1, #12]
     d64:	ldr	x0, [x19]
     d68:	ldr	w1, [x0, #12]
     d6c:	cbnz	w1, d04 <BZ2_decompress+0xd04>
     d70:	ldr	w1, [x0, #16]
     d74:	add	w1, w1, #0x1
     d78:	str	w1, [x0, #16]
     d7c:	b	d04 <BZ2_decompress+0xd04>
     d80:	sub	w0, w0, #0x8
     d84:	ldr	w1, [x19, #32]
     d88:	lsr	w1, w1, w0
     d8c:	str	w0, [x19, #36]
     d90:	ldr	w0, [x19, #56]
     d94:	bfi	w1, w0, #8, #24
     d98:	mov	w0, w1
     d9c:	str	w1, [x19, #56]
     da0:	tbnz	w1, #31, 2b7c <BZ2_decompress+0x2b7c>
     da4:	ldr	w1, [x19, #40]
     da8:	mov	w2, #0x86a0                	// #34464
     dac:	movk	w2, #0x1, lsl #16
     db0:	mul	w1, w1, w2
     db4:	add	w1, w1, #0xa
     db8:	cmp	w0, w1
     dbc:	b.gt	2b8c <BZ2_decompress+0x2b8c>
     dc0:	mov	w25, #0x0                   	// #0
     dc4:	sxtw	x3, w25
     dc8:	mov	w4, #0x1c                  	// #28
     dcc:	add	x5, x19, #0xd7c
     dd0:	mov	w25, w3
     dd4:	str	w4, [x19, #8]
     dd8:	ldr	w0, [x19, #36]
     ddc:	cmp	w0, #0x0
     de0:	b.gt	e54 <BZ2_decompress+0xe54>
     de4:	ldr	x1, [x19]
     de8:	ldr	w2, [x1, #8]
     dec:	cbz	w2, 2b94 <BZ2_decompress+0x2b94>
     df0:	ldr	w2, [x19, #32]
     df4:	ldr	x6, [x1]
     df8:	ldrb	w6, [x6]
     dfc:	orr	w2, w6, w2, lsl #8
     e00:	str	w2, [x19, #32]
     e04:	add	w0, w0, #0x8
     e08:	str	w0, [x19, #36]
     e0c:	ldr	x0, [x1]
     e10:	add	x0, x0, #0x1
     e14:	str	x0, [x1]
     e18:	ldr	x1, [x19]
     e1c:	ldr	w0, [x1, #8]
     e20:	sub	w0, w0, #0x1
     e24:	str	w0, [x1, #8]
     e28:	ldr	x1, [x19]
     e2c:	ldr	w0, [x1, #12]
     e30:	add	w0, w0, #0x1
     e34:	str	w0, [x1, #12]
     e38:	ldr	x0, [x19]
     e3c:	ldr	w1, [x0, #12]
     e40:	cbnz	w1, dd8 <BZ2_decompress+0xdd8>
     e44:	ldr	w1, [x0, #16]
     e48:	add	w1, w1, #0x1
     e4c:	str	w1, [x0, #16]
     e50:	b	dd8 <BZ2_decompress+0xdd8>
     e54:	sub	w0, w0, #0x1
     e58:	ldr	w1, [x19, #32]
     e5c:	lsr	w1, w1, w0
     e60:	str	w0, [x19, #36]
     e64:	and	w0, w1, #0x1
     e68:	strb	w0, [x5, x3]
     e6c:	add	x3, x3, #0x1
     e70:	cmp	w3, #0xf
     e74:	b.le	dd0 <BZ2_decompress+0xdd0>
     e78:	add	x0, x19, #0xc7c
     e7c:	add	x1, x19, #0xd7c
     e80:	strb	wzr, [x0], #1
     e84:	cmp	x0, x1
     e88:	b.ne	e80 <BZ2_decompress+0xe80>  // b.any
     e8c:	mov	w25, #0x0                   	// #0
     e90:	add	x0, x19, w25, sxtw
     e94:	ldrb	w0, [x0, #3452]
     e98:	cbz	w0, f4c <BZ2_decompress+0xf4c>
     e9c:	mov	w23, #0x0                   	// #0
     ea0:	lsl	w5, w25, #4
     ea4:	mov	w3, #0x1d                  	// #29
     ea8:	mov	w4, #0x1                   	// #1
     eac:	str	w3, [x19, #8]
     eb0:	ldr	w0, [x19, #36]
     eb4:	cmp	w0, #0x0
     eb8:	b.gt	f2c <BZ2_decompress+0xf2c>
     ebc:	ldr	x1, [x19]
     ec0:	ldr	w2, [x1, #8]
     ec4:	cbz	w2, 2c58 <BZ2_decompress+0x2c58>
     ec8:	ldr	w2, [x19, #32]
     ecc:	ldr	x6, [x1]
     ed0:	ldrb	w6, [x6]
     ed4:	orr	w2, w6, w2, lsl #8
     ed8:	str	w2, [x19, #32]
     edc:	add	w0, w0, #0x8
     ee0:	str	w0, [x19, #36]
     ee4:	ldr	x0, [x1]
     ee8:	add	x0, x0, #0x1
     eec:	str	x0, [x1]
     ef0:	ldr	x1, [x19]
     ef4:	ldr	w0, [x1, #8]
     ef8:	sub	w0, w0, #0x1
     efc:	str	w0, [x1, #8]
     f00:	ldr	x1, [x19]
     f04:	ldr	w0, [x1, #12]
     f08:	add	w0, w0, #0x1
     f0c:	str	w0, [x1, #12]
     f10:	ldr	x0, [x19]
     f14:	ldr	w1, [x0, #12]
     f18:	cbnz	w1, eb0 <BZ2_decompress+0xeb0>
     f1c:	ldr	w1, [x0, #16]
     f20:	add	w1, w1, #0x1
     f24:	str	w1, [x0, #16]
     f28:	b	eb0 <BZ2_decompress+0xeb0>
     f2c:	sub	w0, w0, #0x1
     f30:	ldr	w1, [x19, #32]
     f34:	lsr	w1, w1, w0
     f38:	str	w0, [x19, #36]
     f3c:	tbnz	w1, #0, f68 <BZ2_decompress+0xf68>
     f40:	add	w23, w23, #0x1
     f44:	cmp	w23, #0xf
     f48:	b.le	eac <BZ2_decompress+0xeac>
     f4c:	add	w25, w25, #0x1
     f50:	cmp	w25, #0xf
     f54:	b.le	e90 <BZ2_decompress+0xe90>
     f58:	str	wzr, [x19, #3192]
     f5c:	mov	x0, #0x0                   	// #0
     f60:	add	x2, x19, #0xc7c
     f64:	b	f84 <BZ2_decompress+0xf84>
     f68:	add	w0, w23, w5
     f6c:	add	x0, x19, w0, sxtw
     f70:	strb	w4, [x0, #3196]
     f74:	b	f40 <BZ2_decompress+0xf40>
     f78:	add	x0, x0, #0x1
     f7c:	cmp	x0, #0x100
     f80:	b.eq	fa4 <BZ2_decompress+0xfa4>  // b.none
     f84:	ldrb	w1, [x2, x0]
     f88:	cbz	w1, f78 <BZ2_decompress+0xf78>
     f8c:	ldr	w1, [x19, #3192]
     f90:	add	x3, x19, w1, sxtw
     f94:	strb	w0, [x3, #3468]
     f98:	add	w1, w1, #0x1
     f9c:	str	w1, [x19, #3192]
     fa0:	b	f78 <BZ2_decompress+0xf78>
     fa4:	ldr	w0, [x19, #3192]
     fa8:	cbz	w0, 2c60 <BZ2_decompress+0x2c60>
     fac:	add	w22, w0, #0x2
     fb0:	mov	w0, #0x1e                  	// #30
     fb4:	str	w0, [x19, #8]
     fb8:	ldr	w0, [x19, #36]
     fbc:	cmp	w0, #0x2
     fc0:	b.gt	1034 <BZ2_decompress+0x1034>
     fc4:	ldr	x1, [x19]
     fc8:	ldr	w2, [x1, #8]
     fcc:	cbz	w2, 2c70 <BZ2_decompress+0x2c70>
     fd0:	ldr	w2, [x19, #32]
     fd4:	ldr	x3, [x1]
     fd8:	ldrb	w3, [x3]
     fdc:	orr	w2, w3, w2, lsl #8
     fe0:	str	w2, [x19, #32]
     fe4:	add	w0, w0, #0x8
     fe8:	str	w0, [x19, #36]
     fec:	ldr	x0, [x1]
     ff0:	add	x0, x0, #0x1
     ff4:	str	x0, [x1]
     ff8:	ldr	x1, [x19]
     ffc:	ldr	w0, [x1, #8]
    1000:	sub	w0, w0, #0x1
    1004:	str	w0, [x1, #8]
    1008:	ldr	x1, [x19]
    100c:	ldr	w0, [x1, #12]
    1010:	add	w0, w0, #0x1
    1014:	str	w0, [x1, #12]
    1018:	ldr	x0, [x19]
    101c:	ldr	w1, [x0, #12]
    1020:	cbnz	w1, fb8 <BZ2_decompress+0xfb8>
    1024:	ldr	w1, [x0, #16]
    1028:	add	w1, w1, #0x1
    102c:	str	w1, [x0, #16]
    1030:	b	fb8 <BZ2_decompress+0xfb8>
    1034:	sub	w0, w0, #0x3
    1038:	ldr	w1, [x19, #32]
    103c:	lsr	w1, w1, w0
    1040:	and	w1, w1, #0x7
    1044:	str	w0, [x19, #36]
    1048:	mov	w24, w1
    104c:	sub	w1, w1, #0x2
    1050:	cmp	w1, #0x4
    1054:	b.hi	2c68 <BZ2_decompress+0x2c68>  // b.pmore
    1058:	mov	w0, #0x1f                  	// #31
    105c:	str	w0, [x19, #8]
    1060:	ldr	w0, [x19, #36]
    1064:	cmp	w0, #0xe
    1068:	b.gt	10dc <BZ2_decompress+0x10dc>
    106c:	ldr	x1, [x19]
    1070:	ldr	w2, [x1, #8]
    1074:	cbz	w2, 2c80 <BZ2_decompress+0x2c80>
    1078:	ldr	w2, [x19, #32]
    107c:	ldr	x3, [x1]
    1080:	ldrb	w3, [x3]
    1084:	orr	w2, w3, w2, lsl #8
    1088:	str	w2, [x19, #32]
    108c:	add	w0, w0, #0x8
    1090:	str	w0, [x19, #36]
    1094:	ldr	x0, [x1]
    1098:	add	x0, x0, #0x1
    109c:	str	x0, [x1]
    10a0:	ldr	x1, [x19]
    10a4:	ldr	w0, [x1, #8]
    10a8:	sub	w0, w0, #0x1
    10ac:	str	w0, [x1, #8]
    10b0:	ldr	x1, [x19]
    10b4:	ldr	w0, [x1, #12]
    10b8:	add	w0, w0, #0x1
    10bc:	str	w0, [x1, #12]
    10c0:	ldr	x0, [x19]
    10c4:	ldr	w1, [x0, #12]
    10c8:	cbnz	w1, 1060 <BZ2_decompress+0x1060>
    10cc:	ldr	w1, [x0, #16]
    10d0:	add	w1, w1, #0x1
    10d4:	str	w1, [x0, #16]
    10d8:	b	1060 <BZ2_decompress+0x1060>
    10dc:	sub	w0, w0, #0xf
    10e0:	ldr	w1, [x19, #32]
    10e4:	lsr	w1, w1, w0
    10e8:	and	w1, w1, #0x7fff
    10ec:	str	w0, [x19, #36]
    10f0:	str	w1, [sp, #108]
    10f4:	cbz	w1, 2c78 <BZ2_decompress+0x2c78>
    10f8:	mov	w23, #0x0                   	// #0
    10fc:	mov	w25, #0x0                   	// #0
    1100:	sxtw	x4, w25
    1104:	mov	w3, #0x20                  	// #32
    1108:	mov	w6, #0x4651                	// #18001
    110c:	add	x5, x19, #0x6, lsl #12
    1110:	add	x5, x5, #0x51e
    1114:	mov	w25, w4
    1118:	str	w3, [x19, #8]
    111c:	ldr	w0, [x19, #36]
    1120:	cmp	w0, #0x0
    1124:	b.gt	11a0 <BZ2_decompress+0x11a0>
    1128:	ldr	x1, [x19]
    112c:	ldr	w2, [x1, #8]
    1130:	cbz	w2, 2c88 <BZ2_decompress+0x2c88>
    1134:	ldr	w2, [x19, #32]
    1138:	ldr	x7, [x1]
    113c:	ldrb	w7, [x7]
    1140:	orr	w2, w7, w2, lsl #8
    1144:	str	w2, [x19, #32]
    1148:	add	w0, w0, #0x8
    114c:	str	w0, [x19, #36]
    1150:	ldr	x0, [x1]
    1154:	add	x0, x0, #0x1
    1158:	str	x0, [x1]
    115c:	ldr	x1, [x19]
    1160:	ldr	w0, [x1, #8]
    1164:	sub	w0, w0, #0x1
    1168:	str	w0, [x1, #8]
    116c:	ldr	x1, [x19]
    1170:	ldr	w0, [x1, #12]
    1174:	add	w0, w0, #0x1
    1178:	str	w0, [x1, #12]
    117c:	ldr	x0, [x19]
    1180:	ldr	w1, [x0, #12]
    1184:	cbnz	w1, 111c <BZ2_decompress+0x111c>
    1188:	ldr	w1, [x0, #16]
    118c:	add	w1, w1, #0x1
    1190:	str	w1, [x0, #16]
    1194:	b	111c <BZ2_decompress+0x111c>
    1198:	mov	w23, #0x0                   	// #0
    119c:	b	1114 <BZ2_decompress+0x1114>
    11a0:	sub	w0, w0, #0x1
    11a4:	ldr	w1, [x19, #32]
    11a8:	lsr	w1, w1, w0
    11ac:	str	w0, [x19, #36]
    11b0:	and	w0, w1, #0x1
    11b4:	tbz	w1, #0, 11cc <BZ2_decompress+0x11cc>
    11b8:	add	w23, w23, #0x1
    11bc:	cmp	w24, w23
    11c0:	b.gt	1118 <BZ2_decompress+0x1118>
    11c4:	mov	w0, #0xfffffffc            	// #-4
    11c8:	b	2b98 <BZ2_decompress+0x2b98>
    11cc:	cmp	w4, w6
    11d0:	b.gt	11d8 <BZ2_decompress+0x11d8>
    11d4:	strb	w23, [x5, x4]
    11d8:	add	x4, x4, #0x1
    11dc:	ldr	w1, [sp, #108]
    11e0:	cmp	w1, w4
    11e4:	b.gt	1198 <BZ2_decompress+0x1198>
    11e8:	mov	w6, #0x4652                	// #18002
    11ec:	cmp	w1, w6
    11f0:	csel	w6, w1, w6, le
    11f4:	cmp	w24, #0x0
    11f8:	b.le	121c <BZ2_decompress+0x121c>
    11fc:	mov	w1, #0x0                   	// #0
    1200:	add	x2, sp, #0xc8
    1204:	strb	w0, [x2, w1, sxtw]
    1208:	add	w0, w0, #0x1
    120c:	and	w0, w0, #0xff
    1210:	mov	w1, w0
    1214:	cmp	w0, w24
    1218:	b.lt	1204 <BZ2_decompress+0x1204>  // b.tstop
    121c:	ldr	w0, [sp, #108]
    1220:	cmp	w0, #0x0
    1224:	b.le	1294 <BZ2_decompress+0x1294>
    1228:	mov	x3, #0x0                   	// #0
    122c:	add	x8, x19, #0x6, lsl #12
    1230:	add	x8, x8, #0x51e
    1234:	add	x5, sp, #0xc8
    1238:	add	x7, x19, #0x1, lsl #12
    123c:	add	x7, x7, #0xecc
    1240:	b	1258 <BZ2_decompress+0x1258>
    1244:	strb	w4, [sp, #200]
    1248:	strb	w4, [x7, x3]
    124c:	add	x3, x3, #0x1
    1250:	cmp	w6, w3
    1254:	b.le	1280 <BZ2_decompress+0x1280>
    1258:	ldrb	w0, [x8, x3]
    125c:	ldrb	w4, [x5, w0, sxtw]
    1260:	cbz	w0, 1244 <BZ2_decompress+0x1244>
    1264:	add	x1, x5, w0, uxtb
    1268:	ldurb	w2, [x1, #-1]
    126c:	strb	w2, [x1], #-1
    1270:	sub	w0, w0, #0x1
    1274:	ands	w0, w0, #0xff
    1278:	b.ne	1268 <BZ2_decompress+0x1268>  // b.any
    127c:	b	1244 <BZ2_decompress+0x1244>
    1280:	cmp	w6, #0x0
    1284:	csinc	w25, w6, wzr, gt
    1288:	str	w6, [sp, #108]
    128c:	mov	w26, #0x0                   	// #0
    1290:	b	1344 <BZ2_decompress+0x1344>
    1294:	mov	w25, #0x0                   	// #0
    1298:	b	1288 <BZ2_decompress+0x1288>
    129c:	mov	w0, #0x21                  	// #33
    12a0:	str	w0, [x19, #8]
    12a4:	ldr	w0, [x19, #36]
    12a8:	cmp	w0, #0x4
    12ac:	b.gt	1320 <BZ2_decompress+0x1320>
    12b0:	ldr	x1, [x19]
    12b4:	ldr	w2, [x1, #8]
    12b8:	cbz	w2, 2c90 <BZ2_decompress+0x2c90>
    12bc:	ldr	w2, [x19, #32]
    12c0:	ldr	x3, [x1]
    12c4:	ldrb	w3, [x3]
    12c8:	orr	w2, w3, w2, lsl #8
    12cc:	str	w2, [x19, #32]
    12d0:	add	w0, w0, #0x8
    12d4:	str	w0, [x19, #36]
    12d8:	ldr	x0, [x1]
    12dc:	add	x0, x0, #0x1
    12e0:	str	x0, [x1]
    12e4:	ldr	x1, [x19]
    12e8:	ldr	w0, [x1, #8]
    12ec:	sub	w0, w0, #0x1
    12f0:	str	w0, [x1, #8]
    12f4:	ldr	x1, [x19]
    12f8:	ldr	w0, [x1, #12]
    12fc:	add	w0, w0, #0x1
    1300:	str	w0, [x1, #12]
    1304:	ldr	x0, [x19]
    1308:	ldr	w1, [x0, #12]
    130c:	cbnz	w1, 12a4 <BZ2_decompress+0x12a4>
    1310:	ldr	w1, [x0, #16]
    1314:	add	w1, w1, #0x1
    1318:	str	w1, [x0, #16]
    131c:	b	12a4 <BZ2_decompress+0x12a4>
    1320:	sub	w0, w0, #0x5
    1324:	ldr	w1, [x19, #32]
    1328:	lsr	w1, w1, w0
    132c:	str	w0, [x19, #36]
    1330:	and	w27, w1, #0x1f
    1334:	mov	w25, #0x0                   	// #0
    1338:	cmp	w25, w22
    133c:	b.lt	1500 <BZ2_decompress+0x1500>  // b.tstop
    1340:	add	w26, w26, #0x1
    1344:	cmp	w26, w24
    1348:	b.lt	129c <BZ2_decompress+0x129c>  // b.tstop
    134c:	cmp	w24, #0x0
    1350:	b.le	15b0 <BZ2_decompress+0x15b0>
    1354:	add	x28, x19, #0xb, lsl #12
    1358:	add	x28, x28, #0x17c
    135c:	add	x26, x19, #0xa, lsl #12
    1360:	add	x26, x26, #0xb70
    1364:	mov	x25, #0x0                   	// #0
    1368:	add	x0, x19, #0xf, lsl #12
    136c:	add	x0, x0, #0xa0c
    1370:	str	w23, [sp, #144]
    1374:	str	w27, [sp, #148]
    1378:	mov	x27, x0
    137c:	mov	x1, #0x0                   	// #0
    1380:	mov	w5, #0x0                   	// #0
    1384:	mov	w23, #0x20                  	// #32
    1388:	cmp	w22, #0x0
    138c:	b.le	13b0 <BZ2_decompress+0x13b0>
    1390:	ldrb	w0, [x26, x1]
    1394:	cmp	w5, w0
    1398:	csel	w5, w5, w0, ge  // ge = tcont
    139c:	cmp	w23, w0
    13a0:	csel	w23, w23, w0, le
    13a4:	add	x1, x1, #0x1
    13a8:	cmp	w22, w1
    13ac:	b.gt	1390 <BZ2_decompress+0x1390>
    13b0:	mov	w6, w22
    13b4:	mov	w4, w23
    13b8:	mov	x3, x26
    13bc:	add	x2, x28, #0x3, lsl #12
    13c0:	add	x2, x2, #0x60
    13c4:	add	x1, x28, #0x1, lsl #12
    13c8:	add	x1, x1, #0x830
    13cc:	mov	x0, x28
    13d0:	bl	0 <BZ2_hbCreateDecodeTables>
    13d4:	str	w23, [x27, x25, lsl #2]
    13d8:	add	x25, x25, #0x1
    13dc:	add	x28, x28, #0x408
    13e0:	add	x26, x26, #0x102
    13e4:	cmp	w24, w25
    13e8:	b.gt	137c <BZ2_decompress+0x137c>
    13ec:	ldr	w23, [sp, #144]
    13f0:	ldr	w27, [sp, #148]
    13f4:	mov	w26, w24
    13f8:	ldr	w0, [x19, #3192]
    13fc:	add	w0, w0, #0x1
    1400:	str	w0, [sp, #164]
    1404:	ldr	w1, [x19, #40]
    1408:	mov	w0, #0x86a0                	// #34464
    140c:	movk	w0, #0x1, lsl #16
    1410:	mul	w0, w1, w0
    1414:	str	w0, [sp, #152]
    1418:	add	x0, x19, #0x44
    141c:	add	x1, x19, #0x444
    1420:	str	wzr, [x0], #4
    1424:	cmp	x0, x1
    1428:	b.ne	1420 <BZ2_decompress+0x1420>  // b.any
    142c:	add	x6, x19, #0x1, lsl #12
    1430:	add	x6, x6, #0xec8
    1434:	add	x2, x19, #0x1, lsl #12
    1438:	add	x2, x2, #0xe8b
    143c:	add	x4, x19, #0x1, lsl #12
    1440:	add	x4, x4, #0xe7b
    1444:	mov	w5, #0xff0                 	// #4080
    1448:	b	15d0 <BZ2_decompress+0x15d0>
    144c:	sub	w0, w0, #0x1
    1450:	ldr	w1, [x19, #32]
    1454:	lsr	w1, w1, w0
    1458:	str	w0, [x19, #36]
    145c:	tbz	w1, #0, 1590 <BZ2_decompress+0x1590>
    1460:	mov	w0, #0x23                  	// #35
    1464:	str	w0, [x19, #8]
    1468:	ldr	w0, [x19, #36]
    146c:	cmp	w0, #0x0
    1470:	b.gt	14e4 <BZ2_decompress+0x14e4>
    1474:	ldr	x1, [x19]
    1478:	ldr	w2, [x1, #8]
    147c:	cbz	w2, 2ca8 <BZ2_decompress+0x2ca8>
    1480:	ldr	w2, [x19, #32]
    1484:	ldr	x3, [x1]
    1488:	ldrb	w3, [x3]
    148c:	orr	w2, w3, w2, lsl #8
    1490:	str	w2, [x19, #32]
    1494:	add	w0, w0, #0x8
    1498:	str	w0, [x19, #36]
    149c:	ldr	x0, [x1]
    14a0:	add	x0, x0, #0x1
    14a4:	str	x0, [x1]
    14a8:	ldr	x1, [x19]
    14ac:	ldr	w0, [x1, #8]
    14b0:	sub	w0, w0, #0x1
    14b4:	str	w0, [x1, #8]
    14b8:	ldr	x1, [x19]
    14bc:	ldr	w0, [x1, #12]
    14c0:	add	w0, w0, #0x1
    14c4:	str	w0, [x1, #12]
    14c8:	ldr	x0, [x19]
    14cc:	ldr	w1, [x0, #12]
    14d0:	cbnz	w1, 1468 <BZ2_decompress+0x1468>
    14d4:	ldr	w1, [x0, #16]
    14d8:	add	w1, w1, #0x1
    14dc:	str	w1, [x0, #16]
    14e0:	b	1468 <BZ2_decompress+0x1468>
    14e4:	sub	w0, w0, #0x1
    14e8:	ldr	w1, [x19, #32]
    14ec:	lsr	w1, w1, w0
    14f0:	str	w0, [x19, #36]
    14f4:	sub	w0, w27, #0x1
    14f8:	tst	x1, #0x1
    14fc:	csinc	w27, w0, w27, ne  // ne = any
    1500:	sub	w0, w27, #0x1
    1504:	cmp	w0, #0x13
    1508:	b.hi	2c98 <BZ2_decompress+0x2c98>  // b.pmore
    150c:	mov	w0, #0x22                  	// #34
    1510:	str	w0, [x19, #8]
    1514:	ldr	w0, [x19, #36]
    1518:	cmp	w0, #0x0
    151c:	b.gt	144c <BZ2_decompress+0x144c>
    1520:	ldr	x1, [x19]
    1524:	ldr	w2, [x1, #8]
    1528:	cbz	w2, 2ca0 <BZ2_decompress+0x2ca0>
    152c:	ldr	w2, [x19, #32]
    1530:	ldr	x3, [x1]
    1534:	ldrb	w3, [x3]
    1538:	orr	w2, w3, w2, lsl #8
    153c:	str	w2, [x19, #32]
    1540:	add	w0, w0, #0x8
    1544:	str	w0, [x19, #36]
    1548:	ldr	x0, [x1]
    154c:	add	x0, x0, #0x1
    1550:	str	x0, [x1]
    1554:	ldr	x1, [x19]
    1558:	ldr	w0, [x1, #8]
    155c:	sub	w0, w0, #0x1
    1560:	str	w0, [x1, #8]
    1564:	ldr	x1, [x19]
    1568:	ldr	w0, [x1, #12]
    156c:	add	w0, w0, #0x1
    1570:	str	w0, [x1, #12]
    1574:	ldr	x0, [x19]
    1578:	ldr	w1, [x0, #12]
    157c:	cbnz	w1, 1514 <BZ2_decompress+0x1514>
    1580:	ldr	w1, [x0, #16]
    1584:	add	w1, w1, #0x1
    1588:	str	w1, [x0, #16]
    158c:	b	1514 <BZ2_decompress+0x1514>
    1590:	sbfiz	x0, x26, #7, #32
    1594:	add	x0, x0, w26, sxtw
    1598:	add	x0, x19, x0, lsl #1
    159c:	add	x0, x0, w25, sxtw
    15a0:	add	x0, x0, #0xa, lsl #12
    15a4:	strb	w27, [x0, #2928]
    15a8:	add	w25, w25, #0x1
    15ac:	b	1338 <BZ2_decompress+0x1338>
    15b0:	mov	w26, #0x0                   	// #0
    15b4:	b	13f8 <BZ2_decompress+0x13f8>
    15b8:	str	w5, [x6], #-4
    15bc:	sub	w5, w5, #0x10
    15c0:	sub	x2, x2, #0x10
    15c4:	sub	x4, x4, #0x10
    15c8:	cmp	w5, #0xef0
    15cc:	b.eq	15f4 <BZ2_decompress+0x15f4>  // b.none
    15d0:	add	w3, w5, #0xf
    15d4:	and	w3, w3, #0xff
    15d8:	mov	x0, x2
    15dc:	sub	w1, w0, w2
    15e0:	add	w1, w3, w1
    15e4:	strb	w1, [x0], #-1
    15e8:	cmp	x0, x4
    15ec:	b.ne	15dc <BZ2_decompress+0x15dc>  // b.any
    15f0:	b	15b8 <BZ2_decompress+0x15b8>
    15f4:	ldr	w0, [sp, #108]
    15f8:	cmp	w0, #0x0
    15fc:	b.le	2cb0 <BZ2_decompress+0x2cb0>
    1600:	add	x0, x19, #0x1, lsl #12
    1604:	ldrb	w1, [x0, #3788]
    1608:	str	w1, [sp, #168]
    160c:	add	x0, x19, w1, sxtw #2
    1610:	add	x0, x0, #0xf, lsl #12
    1614:	add	x0, x0, #0xa00
    1618:	ldr	w20, [x0, #12]
    161c:	mov	x0, x1
    1620:	ubfiz	x0, x0, #7, #8
    1624:	add	x0, x0, w1, uxtb
    1628:	lsl	x0, x0, #3
    162c:	add	x1, x0, #0xb, lsl #12
    1630:	add	x1, x1, #0x17c
    1634:	add	x1, x19, x1
    1638:	str	x1, [sp, #112]
    163c:	add	x1, x0, #0xe, lsl #12
    1640:	add	x1, x1, #0x1dc
    1644:	add	x1, x19, x1
    1648:	str	x1, [sp, #136]
    164c:	add	x0, x0, #0xc, lsl #12
    1650:	add	x0, x0, #0x9ac
    1654:	add	x0, x19, x0
    1658:	str	x0, [sp, #120]
    165c:	str	w20, [sp, #160]
    1660:	mov	w28, #0x0                   	// #0
    1664:	mov	w0, #0x31                  	// #49
    1668:	str	w0, [sp, #144]
    166c:	str	wzr, [sp, #148]
    1670:	mov	w25, #0x100                 	// #256
    1674:	mov	w0, #0x24                  	// #36
    1678:	str	w0, [x19, #8]
    167c:	ldr	w0, [x19, #36]
    1680:	cmp	w0, w20
    1684:	b.ge	16f8 <BZ2_decompress+0x16f8>  // b.tcont
    1688:	ldr	x1, [x19]
    168c:	ldr	w2, [x1, #8]
    1690:	cbz	w2, 2cc8 <BZ2_decompress+0x2cc8>
    1694:	ldr	w2, [x19, #32]
    1698:	ldr	x3, [x1]
    169c:	ldrb	w3, [x3]
    16a0:	orr	w2, w3, w2, lsl #8
    16a4:	str	w2, [x19, #32]
    16a8:	add	w0, w0, #0x8
    16ac:	str	w0, [x19, #36]
    16b0:	ldr	x0, [x1]
    16b4:	add	x0, x0, #0x1
    16b8:	str	x0, [x1]
    16bc:	ldr	x1, [x19]
    16c0:	ldr	w0, [x1, #8]
    16c4:	sub	w0, w0, #0x1
    16c8:	str	w0, [x1, #8]
    16cc:	ldr	x1, [x19]
    16d0:	ldr	w0, [x1, #12]
    16d4:	add	w0, w0, #0x1
    16d8:	str	w0, [x1, #12]
    16dc:	ldr	x0, [x19]
    16e0:	ldr	w1, [x0, #12]
    16e4:	cbnz	w1, 167c <BZ2_decompress+0x167c>
    16e8:	ldr	w1, [x0, #16]
    16ec:	add	w1, w1, #0x1
    16f0:	str	w1, [x0, #16]
    16f4:	b	167c <BZ2_decompress+0x167c>
    16f8:	sub	w0, w0, w20
    16fc:	ldr	w21, [x19, #32]
    1700:	lsr	w21, w21, w0
    1704:	mov	w1, #0x1                   	// #1
    1708:	lsl	w1, w1, w20
    170c:	sub	w1, w1, #0x1
    1710:	str	w0, [x19, #36]
    1714:	and	w21, w21, w1
    1718:	b	1738 <BZ2_decompress+0x1738>
    171c:	sub	w0, w0, #0x1
    1720:	ldr	w1, [x19, #32]
    1724:	lsr	w1, w1, w0
    1728:	and	w1, w1, #0x1
    172c:	str	w0, [x19, #36]
    1730:	str	w1, [sp, #104]
    1734:	orr	w21, w1, w21, lsl #1
    1738:	cmp	w20, #0x14
    173c:	b.gt	2cd0 <BZ2_decompress+0x2cd0>
    1740:	sxtw	x0, w20
    1744:	ldr	x1, [sp, #112]
    1748:	ldr	w1, [x1, x0, lsl #2]
    174c:	cmp	w1, w21
    1750:	b.ge	17dc <BZ2_decompress+0x17dc>  // b.tcont
    1754:	add	w20, w20, #0x1
    1758:	mov	w0, #0x25                  	// #37
    175c:	str	w0, [x19, #8]
    1760:	ldr	w0, [x19, #36]
    1764:	cmp	w0, #0x0
    1768:	b.gt	171c <BZ2_decompress+0x171c>
    176c:	ldr	x1, [x19]
    1770:	ldr	w2, [x1, #8]
    1774:	cbz	w2, 2cd8 <BZ2_decompress+0x2cd8>
    1778:	ldr	w2, [x19, #32]
    177c:	ldr	x3, [x1]
    1780:	ldrb	w3, [x3]
    1784:	orr	w2, w3, w2, lsl #8
    1788:	str	w2, [x19, #32]
    178c:	add	w0, w0, #0x8
    1790:	str	w0, [x19, #36]
    1794:	ldr	x0, [x1]
    1798:	add	x0, x0, #0x1
    179c:	str	x0, [x1]
    17a0:	ldr	x1, [x19]
    17a4:	ldr	w0, [x1, #8]
    17a8:	sub	w0, w0, #0x1
    17ac:	str	w0, [x1, #8]
    17b0:	ldr	x1, [x19]
    17b4:	ldr	w0, [x1, #12]
    17b8:	add	w0, w0, #0x1
    17bc:	str	w0, [x1, #12]
    17c0:	ldr	x0, [x19]
    17c4:	ldr	w1, [x0, #12]
    17c8:	cbnz	w1, 1760 <BZ2_decompress+0x1760>
    17cc:	ldr	w1, [x0, #16]
    17d0:	add	w1, w1, #0x1
    17d4:	str	w1, [x0, #16]
    17d8:	b	1760 <BZ2_decompress+0x1760>
    17dc:	ldr	x1, [sp, #120]
    17e0:	ldr	w0, [x1, x0, lsl #2]
    17e4:	sub	w0, w21, w0
    17e8:	cmp	w0, #0x101
    17ec:	b.hi	2ce0 <BZ2_decompress+0x2ce0>  // b.pmore
    17f0:	ldr	x1, [sp, #136]
    17f4:	ldr	w0, [x1, w0, sxtw #2]
    17f8:	str	w0, [sp, #132]
    17fc:	ldr	w1, [sp, #164]
    1800:	ldr	w0, [sp, #132]
    1804:	cmp	w1, w0
    1808:	b.eq	2014 <BZ2_decompress+0x2014>  // b.none
    180c:	mov	w2, w0
    1810:	cmp	w0, #0x1
    1814:	b.ls	1a78 <BZ2_decompress+0x1a78>  // b.plast
    1818:	ldr	w0, [sp, #152]
    181c:	cmp	w0, w28
    1820:	b.le	2d28 <BZ2_decompress+0x2d28>
    1824:	ldr	w0, [sp, #132]
    1828:	sub	w1, w0, #0x1
    182c:	mov	w0, w1
    1830:	cmp	w1, #0xf
    1834:	b.hi	1df8 <BZ2_decompress+0x1df8>  // b.pmore
    1838:	ldr	w3, [x19, #7820]
    183c:	mov	w6, w3
    1840:	add	w4, w3, w1
    1844:	add	x4, x19, x4
    1848:	ldrb	w7, [x4, #3724]
    184c:	cmp	w1, #0x3
    1850:	b.ls	18d0 <BZ2_decompress+0x18d0>  // b.plast
    1854:	sub	w0, w3, #0x2
    1858:	add	w0, w0, w2
    185c:	mov	w5, #0x1                   	// #1
    1860:	sub	w5, w5, w3
    1864:	add	x8, x19, w0, sxtw
    1868:	ldrb	w4, [x8, #3724]
    186c:	add	w1, w0, #0x1
    1870:	add	x1, x19, w1, sxtw
    1874:	strb	w4, [x1, #3724]
    1878:	sub	w4, w0, #0x1
    187c:	add	x4, x19, w4, sxtw
    1880:	ldrb	w1, [x4, #3724]
    1884:	strb	w1, [x8, #3724]
    1888:	sub	w1, w0, #0x2
    188c:	add	x1, x19, w1, sxtw
    1890:	ldrb	w8, [x1, #3724]
    1894:	strb	w8, [x4, #3724]
    1898:	sub	w4, w0, #0x3
    189c:	add	x4, x19, w4, sxtw
    18a0:	ldrb	w4, [x4, #3724]
    18a4:	strb	w4, [x1, #3724]
    18a8:	sub	w0, w0, #0x4
    18ac:	add	w1, w5, w0
    18b0:	cmp	w1, #0x3
    18b4:	b.hi	1864 <BZ2_decompress+0x1864>  // b.pmore
    18b8:	sub	w1, w2, #0x5
    18bc:	lsr	w1, w1, #2
    18c0:	ldr	w0, [sp, #132]
    18c4:	sub	w2, w0, #0x5
    18c8:	mov	w0, #0xfffffffc            	// #-4
    18cc:	madd	w0, w1, w0, w2
    18d0:	cbz	w0, 18f8 <BZ2_decompress+0x18f8>
    18d4:	add	w0, w3, w0
    18d8:	sub	w1, w0, #0x1
    18dc:	add	x2, x19, w1, uxtw
    18e0:	ldrb	w2, [x2, #3724]
    18e4:	add	x0, x19, w0, uxtw
    18e8:	strb	w2, [x0, #3724]
    18ec:	mov	w0, w1
    18f0:	cmp	w6, w1
    18f4:	b.ne	18d8 <BZ2_decompress+0x18d8>  // b.any
    18f8:	add	x0, x19, w3, sxtw
    18fc:	strb	w7, [x0, #3724]
    1900:	add	x7, x19, w7, sxtw
    1904:	ldrb	w2, [x7, #3468]
    1908:	ldrb	w0, [x7, #3468]
    190c:	add	x0, x19, x0, lsl #2
    1910:	ldr	w1, [x0, #68]
    1914:	add	w1, w1, #0x1
    1918:	str	w1, [x0, #68]
    191c:	ldrb	w0, [x19, #44]
    1920:	cbz	w0, 1efc <BZ2_decompress+0x1efc>
    1924:	ldr	x0, [x19, #3160]
    1928:	strh	w2, [x0, w28, sxtw #1]
    192c:	add	w28, w28, #0x1
    1930:	ldr	w0, [sp, #144]
    1934:	cbnz	w0, 19bc <BZ2_decompress+0x19bc>
    1938:	ldr	w0, [sp, #148]
    193c:	add	w0, w0, #0x1
    1940:	str	w0, [sp, #148]
    1944:	ldr	w1, [sp, #108]
    1948:	cmp	w1, w0
    194c:	b.le	2d30 <BZ2_decompress+0x2d30>
    1950:	add	x0, x19, w0, sxtw
    1954:	add	x0, x0, #0x1, lsl #12
    1958:	ldrb	w1, [x0, #3788]
    195c:	str	w1, [sp, #168]
    1960:	ldrb	w1, [x0, #3788]
    1964:	add	x1, x1, #0x3, lsl #12
    1968:	add	x1, x1, #0xe80
    196c:	add	x1, x19, x1, lsl #2
    1970:	ldr	w1, [x1, #12]
    1974:	str	w1, [sp, #160]
    1978:	ldrb	w0, [x0, #3788]
    197c:	mov	x1, #0x408                 	// #1032
    1980:	mul	x0, x0, x1
    1984:	add	x1, x0, #0xb, lsl #12
    1988:	add	x1, x1, #0x17c
    198c:	add	x1, x19, x1
    1990:	str	x1, [sp, #112]
    1994:	add	x1, x0, #0xe, lsl #12
    1998:	add	x1, x1, #0x1dc
    199c:	add	x1, x19, x1
    19a0:	str	x1, [sp, #136]
    19a4:	add	x0, x0, #0xc, lsl #12
    19a8:	add	x0, x0, #0x9ac
    19ac:	add	x0, x19, x0
    19b0:	str	x0, [sp, #120]
    19b4:	mov	w0, #0x32                  	// #50
    19b8:	str	w0, [sp, #144]
    19bc:	ldr	w0, [sp, #144]
    19c0:	sub	w0, w0, #0x1
    19c4:	str	w0, [sp, #144]
    19c8:	ldr	w20, [sp, #160]
    19cc:	mov	w0, #0x28                  	// #40
    19d0:	str	w0, [x19, #8]
    19d4:	ldr	w0, [x19, #36]
    19d8:	cmp	w0, w20
    19dc:	b.ge	1f08 <BZ2_decompress+0x1f08>  // b.tcont
    19e0:	ldr	x1, [x19]
    19e4:	ldr	w2, [x1, #8]
    19e8:	cbz	w2, 2d38 <BZ2_decompress+0x2d38>
    19ec:	ldr	w2, [x19, #32]
    19f0:	ldr	x3, [x1]
    19f4:	ldrb	w3, [x3]
    19f8:	orr	w2, w3, w2, lsl #8
    19fc:	str	w2, [x19, #32]
    1a00:	add	w0, w0, #0x8
    1a04:	str	w0, [x19, #36]
    1a08:	ldr	x0, [x1]
    1a0c:	add	x0, x0, #0x1
    1a10:	str	x0, [x1]
    1a14:	ldr	x1, [x19]
    1a18:	ldr	w0, [x1, #8]
    1a1c:	sub	w0, w0, #0x1
    1a20:	str	w0, [x1, #8]
    1a24:	ldr	x1, [x19]
    1a28:	ldr	w0, [x1, #12]
    1a2c:	add	w0, w0, #0x1
    1a30:	str	w0, [x1, #12]
    1a34:	ldr	x0, [x19]
    1a38:	ldr	w1, [x0, #12]
    1a3c:	cbnz	w1, 19d4 <BZ2_decompress+0x19d4>
    1a40:	ldr	w1, [x0, #16]
    1a44:	add	w1, w1, #0x1
    1a48:	str	w1, [x0, #16]
    1a4c:	b	19d4 <BZ2_decompress+0x19d4>
    1a50:	str	w0, [sp, #128]
    1a54:	b	17fc <BZ2_decompress+0x17fc>
    1a58:	str	w0, [sp, #128]
    1a5c:	b	17fc <BZ2_decompress+0x17fc>
    1a60:	mov	w0, #0xfffffffc            	// #-4
    1a64:	mov	w1, #0x1fffff              	// #2097151
    1a68:	ldr	w2, [sp, #156]
    1a6c:	cmp	w2, w1
    1a70:	b.gt	2b98 <BZ2_decompress+0x2b98>
    1a74:	b	1a88 <BZ2_decompress+0x1a88>
    1a78:	mov	w0, #0x1                   	// #1
    1a7c:	str	w0, [sp, #156]
    1a80:	mov	w0, #0xffffffff            	// #-1
    1a84:	str	w0, [sp, #128]
    1a88:	ldr	w0, [sp, #132]
    1a8c:	cbnz	w0, 1bcc <BZ2_decompress+0x1bcc>
    1a90:	ldr	w0, [sp, #128]
    1a94:	ldr	w1, [sp, #156]
    1a98:	add	w0, w0, w1
    1a9c:	str	w0, [sp, #128]
    1aa0:	ldr	w0, [sp, #156]
    1aa4:	lsl	w0, w0, #1
    1aa8:	str	w0, [sp, #156]
    1aac:	ldr	w0, [sp, #144]
    1ab0:	cbnz	w0, 1b38 <BZ2_decompress+0x1b38>
    1ab4:	ldr	w0, [sp, #148]
    1ab8:	add	w0, w0, #0x1
    1abc:	str	w0, [sp, #148]
    1ac0:	ldr	w1, [sp, #108]
    1ac4:	cmp	w1, w0
    1ac8:	b.le	2ce8 <BZ2_decompress+0x2ce8>
    1acc:	add	x0, x19, w0, sxtw
    1ad0:	add	x0, x0, #0x1, lsl #12
    1ad4:	ldrb	w1, [x0, #3788]
    1ad8:	str	w1, [sp, #168]
    1adc:	ldrb	w1, [x0, #3788]
    1ae0:	add	x1, x1, #0x3, lsl #12
    1ae4:	add	x1, x1, #0xe80
    1ae8:	add	x1, x19, x1, lsl #2
    1aec:	ldr	w1, [x1, #12]
    1af0:	str	w1, [sp, #160]
    1af4:	ldrb	w0, [x0, #3788]
    1af8:	mov	x1, #0x408                 	// #1032
    1afc:	mul	x0, x0, x1
    1b00:	add	x1, x0, #0xb, lsl #12
    1b04:	add	x1, x1, #0x17c
    1b08:	add	x1, x19, x1
    1b0c:	str	x1, [sp, #112]
    1b10:	add	x1, x0, #0xe, lsl #12
    1b14:	add	x1, x1, #0x1dc
    1b18:	add	x1, x19, x1
    1b1c:	str	x1, [sp, #136]
    1b20:	add	x0, x0, #0xc, lsl #12
    1b24:	add	x0, x0, #0x9ac
    1b28:	add	x0, x19, x0
    1b2c:	str	x0, [sp, #120]
    1b30:	mov	w0, #0x32                  	// #50
    1b34:	str	w0, [sp, #144]
    1b38:	ldr	w0, [sp, #144]
    1b3c:	sub	w0, w0, #0x1
    1b40:	str	w0, [sp, #144]
    1b44:	ldr	w20, [sp, #160]
    1b48:	mov	w0, #0x26                  	// #38
    1b4c:	str	w0, [x19, #8]
    1b50:	ldr	w0, [x19, #36]
    1b54:	cmp	w0, w20
    1b58:	b.ge	1bec <BZ2_decompress+0x1bec>  // b.tcont
    1b5c:	ldr	x1, [x19]
    1b60:	ldr	w2, [x1, #8]
    1b64:	cbz	w2, 2cf0 <BZ2_decompress+0x2cf0>
    1b68:	ldr	w2, [x19, #32]
    1b6c:	ldr	x3, [x1]
    1b70:	ldrb	w3, [x3]
    1b74:	orr	w2, w3, w2, lsl #8
    1b78:	str	w2, [x19, #32]
    1b7c:	add	w0, w0, #0x8
    1b80:	str	w0, [x19, #36]
    1b84:	ldr	x0, [x1]
    1b88:	add	x0, x0, #0x1
    1b8c:	str	x0, [x1]
    1b90:	ldr	x1, [x19]
    1b94:	ldr	w0, [x1, #8]
    1b98:	sub	w0, w0, #0x1
    1b9c:	str	w0, [x1, #8]
    1ba0:	ldr	x1, [x19]
    1ba4:	ldr	w0, [x1, #12]
    1ba8:	add	w0, w0, #0x1
    1bac:	str	w0, [x1, #12]
    1bb0:	ldr	x0, [x19]
    1bb4:	ldr	w1, [x0, #12]
    1bb8:	cbnz	w1, 1b50 <BZ2_decompress+0x1b50>
    1bbc:	ldr	w1, [x0, #16]
    1bc0:	add	w1, w1, #0x1
    1bc4:	str	w1, [x0, #16]
    1bc8:	b	1b50 <BZ2_decompress+0x1b50>
    1bcc:	ldr	w0, [sp, #132]
    1bd0:	cmp	w0, #0x1
    1bd4:	b.ne	1aa0 <BZ2_decompress+0x1aa0>  // b.any
    1bd8:	ldr	w0, [sp, #156]
    1bdc:	ldr	w1, [sp, #128]
    1be0:	add	w0, w1, w0, lsl #1
    1be4:	str	w0, [sp, #128]
    1be8:	b	1aa0 <BZ2_decompress+0x1aa0>
    1bec:	sub	w0, w0, w20
    1bf0:	ldr	w21, [x19, #32]
    1bf4:	lsr	w21, w21, w0
    1bf8:	mov	w1, #0x1                   	// #1
    1bfc:	lsl	w1, w1, w20
    1c00:	sub	w1, w1, #0x1
    1c04:	str	w0, [x19, #36]
    1c08:	and	w21, w21, w1
    1c0c:	b	1c2c <BZ2_decompress+0x1c2c>
    1c10:	sub	w0, w0, #0x1
    1c14:	ldr	w1, [x19, #32]
    1c18:	lsr	w1, w1, w0
    1c1c:	and	w1, w1, #0x1
    1c20:	str	w0, [x19, #36]
    1c24:	str	w1, [sp, #104]
    1c28:	orr	w21, w1, w21, lsl #1
    1c2c:	cmp	w20, #0x14
    1c30:	b.gt	2cf8 <BZ2_decompress+0x2cf8>
    1c34:	sxtw	x0, w20
    1c38:	ldr	x1, [sp, #112]
    1c3c:	ldr	w1, [x1, x0, lsl #2]
    1c40:	cmp	w1, w21
    1c44:	b.ge	1cd0 <BZ2_decompress+0x1cd0>  // b.tcont
    1c48:	add	w20, w20, #0x1
    1c4c:	mov	w0, #0x27                  	// #39
    1c50:	str	w0, [x19, #8]
    1c54:	ldr	w0, [x19, #36]
    1c58:	cmp	w0, #0x0
    1c5c:	b.gt	1c10 <BZ2_decompress+0x1c10>
    1c60:	ldr	x1, [x19]
    1c64:	ldr	w2, [x1, #8]
    1c68:	cbz	w2, 2d00 <BZ2_decompress+0x2d00>
    1c6c:	ldr	w2, [x19, #32]
    1c70:	ldr	x3, [x1]
    1c74:	ldrb	w3, [x3]
    1c78:	orr	w2, w3, w2, lsl #8
    1c7c:	str	w2, [x19, #32]
    1c80:	add	w0, w0, #0x8
    1c84:	str	w0, [x19, #36]
    1c88:	ldr	x0, [x1]
    1c8c:	add	x0, x0, #0x1
    1c90:	str	x0, [x1]
    1c94:	ldr	x1, [x19]
    1c98:	ldr	w0, [x1, #8]
    1c9c:	sub	w0, w0, #0x1
    1ca0:	str	w0, [x1, #8]
    1ca4:	ldr	x1, [x19]
    1ca8:	ldr	w0, [x1, #12]
    1cac:	add	w0, w0, #0x1
    1cb0:	str	w0, [x1, #12]
    1cb4:	ldr	x0, [x19]
    1cb8:	ldr	w1, [x0, #12]
    1cbc:	cbnz	w1, 1c54 <BZ2_decompress+0x1c54>
    1cc0:	ldr	w1, [x0, #16]
    1cc4:	add	w1, w1, #0x1
    1cc8:	str	w1, [x0, #16]
    1ccc:	b	1c54 <BZ2_decompress+0x1c54>
    1cd0:	ldr	x1, [sp, #120]
    1cd4:	ldr	w0, [x1, x0, lsl #2]
    1cd8:	sub	w0, w21, w0
    1cdc:	cmp	w0, #0x101
    1ce0:	b.hi	2d08 <BZ2_decompress+0x2d08>  // b.pmore
    1ce4:	ldr	x1, [sp, #136]
    1ce8:	ldr	w0, [x1, w0, sxtw #2]
    1cec:	str	w0, [sp, #132]
    1cf0:	cmp	w0, #0x1
    1cf4:	b.ls	1a60 <BZ2_decompress+0x1a60>  // b.plast
    1cf8:	ldr	w4, [sp, #128]
    1cfc:	add	w0, w4, #0x1
    1d00:	ldrsw	x1, [x19, #7820]
    1d04:	add	x1, x19, x1
    1d08:	ldrb	w1, [x1, #3724]
    1d0c:	add	x1, x19, x1
    1d10:	ldrb	w3, [x1, #3468]
    1d14:	add	x2, x19, w3, uxtb #2
    1d18:	ldr	w1, [x2, #68]
    1d1c:	add	w1, w1, w0
    1d20:	str	w1, [x2, #68]
    1d24:	ldrb	w1, [x19, #44]
    1d28:	cbnz	w1, 1d88 <BZ2_decompress+0x1d88>
    1d2c:	cmp	w0, #0x0
    1d30:	b.le	1a50 <BZ2_decompress+0x1a50>
    1d34:	ldr	w1, [sp, #152]
    1d38:	cmp	w1, w28
    1d3c:	b.le	2d10 <BZ2_decompress+0x2d10>
    1d40:	sbfiz	x2, x28, #2, #32
    1d44:	add	w4, w4, w28
    1d48:	sub	w1, w4, w1
    1d4c:	add	w1, w1, #0x1
    1d50:	mov	w5, w0
    1d54:	mov	w0, #0x2                   	// #2
    1d58:	ldr	x6, [x19, #3152]
    1d5c:	str	w3, [x6, x2]
    1d60:	sub	w6, w0, w5
    1d64:	add	w28, w6, w4
    1d68:	subs	w5, w5, #0x1
    1d6c:	b.eq	1df0 <BZ2_decompress+0x1df0>  // b.none
    1d70:	add	x2, x2, #0x4
    1d74:	cmp	w5, w1
    1d78:	b.ne	1d58 <BZ2_decompress+0x1d58>  // b.any
    1d7c:	str	w1, [sp, #128]
    1d80:	mov	w0, #0xfffffffc            	// #-4
    1d84:	b	2b98 <BZ2_decompress+0x2b98>
    1d88:	cmp	w0, #0x0
    1d8c:	b.le	1a58 <BZ2_decompress+0x1a58>
    1d90:	ldr	w1, [sp, #152]
    1d94:	cmp	w1, w28
    1d98:	b.le	2d1c <BZ2_decompress+0x2d1c>
    1d9c:	sbfiz	x2, x28, #1, #32
    1da0:	ldr	w4, [sp, #128]
    1da4:	add	w4, w4, w28
    1da8:	sub	w1, w4, w1
    1dac:	add	w1, w1, #0x1
    1db0:	mov	w5, w0
    1db4:	mov	w0, #0x2                   	// #2
    1db8:	ldr	x6, [x19, #3160]
    1dbc:	strh	w3, [x6, x2]
    1dc0:	sub	w6, w0, w5
    1dc4:	add	w28, w6, w4
    1dc8:	subs	w5, w5, #0x1
    1dcc:	b.eq	1de8 <BZ2_decompress+0x1de8>  // b.none
    1dd0:	add	x2, x2, #0x2
    1dd4:	cmp	w5, w1
    1dd8:	b.ne	1db8 <BZ2_decompress+0x1db8>  // b.any
    1ddc:	str	w1, [sp, #128]
    1de0:	mov	w0, #0xfffffffc            	// #-4
    1de4:	b	2b98 <BZ2_decompress+0x2b98>
    1de8:	str	w5, [sp, #128]
    1dec:	b	17fc <BZ2_decompress+0x17fc>
    1df0:	str	w5, [sp, #128]
    1df4:	b	17fc <BZ2_decompress+0x17fc>
    1df8:	and	w4, w1, #0xf
    1dfc:	lsr	w0, w1, #4
    1e00:	add	x5, x19, x0, lsl #2
    1e04:	ldr	w3, [x5, #7820]
    1e08:	add	w1, w3, w4
    1e0c:	add	x2, x19, w1, sxtw
    1e10:	ldrb	w7, [x2, #3724]
    1e14:	cmp	w3, w1
    1e18:	b.ge	1e48 <BZ2_decompress+0x1e48>  // b.tcont
    1e1c:	sxtw	x2, w1
    1e20:	add	x1, x19, w1, sxtw
    1e24:	sub	w4, w4, #0x1
    1e28:	sub	x2, x2, x4
    1e2c:	sub	x4, x19, #0x1
    1e30:	add	x2, x2, x4
    1e34:	ldrb	w4, [x1, #3723]
    1e38:	strb	w4, [x1, #3724]
    1e3c:	sub	x1, x1, #0x1
    1e40:	cmp	x1, x2
    1e44:	b.ne	1e34 <BZ2_decompress+0x1e34>  // b.any
    1e48:	add	w3, w3, #0x1
    1e4c:	str	w3, [x5, #7820]
    1e50:	add	x3, x19, #0x1, lsl #12
    1e54:	add	x3, x3, #0xe8c
    1e58:	add	x4, x19, #0x1, lsl #12
    1e5c:	add	x4, x4, #0xe88
    1e60:	ldr	w1, [x3, x0, lsl #2]
    1e64:	sub	w1, w1, #0x1
    1e68:	str	w1, [x3, x0, lsl #2]
    1e6c:	ldr	w2, [x4, x0, lsl #2]
    1e70:	add	w2, w2, #0xf
    1e74:	add	x2, x19, w2, sxtw
    1e78:	ldrb	w2, [x2, #3724]
    1e7c:	add	x1, x19, w1, sxtw
    1e80:	strb	w2, [x1, #3724]
    1e84:	sub	x0, x0, #0x1
    1e88:	cmp	w0, #0x0
    1e8c:	b.gt	1e60 <BZ2_decompress+0x1e60>
    1e90:	ldr	w0, [x19, #7820]
    1e94:	sub	w0, w0, #0x1
    1e98:	str	w0, [x19, #7820]
    1e9c:	add	x1, x19, w0, sxtw
    1ea0:	strb	w7, [x1, #3724]
    1ea4:	cbnz	w0, 1900 <BZ2_decompress+0x1900>
    1ea8:	add	x6, x19, #0x1, lsl #12
    1eac:	add	x6, x6, #0xec8
    1eb0:	mov	x3, #0xff0                 	// #4080
    1eb4:	add	x9, x19, #0xe8b
    1eb8:	mov	x8, x6
    1ebc:	ldrsw	x4, [x6]
    1ec0:	add	x0, x4, #0xe9b
    1ec4:	add	x0, x19, x0
    1ec8:	add	x5, x9, x4
    1ecc:	ldrb	w2, [x0]
    1ed0:	sub	x1, x0, x4
    1ed4:	strb	w2, [x1, x3]
    1ed8:	sub	x0, x0, #0x1
    1edc:	cmp	x0, x5
    1ee0:	b.ne	1ecc <BZ2_decompress+0x1ecc>  // b.any
    1ee4:	str	w3, [x8]
    1ee8:	sub	x6, x6, #0x4
    1eec:	sub	x3, x3, #0x10
    1ef0:	cmp	x3, #0xef0
    1ef4:	b.ne	1eb8 <BZ2_decompress+0x1eb8>  // b.any
    1ef8:	b	1900 <BZ2_decompress+0x1900>
    1efc:	ldr	x0, [x19, #3152]
    1f00:	str	w2, [x0, w28, sxtw #2]
    1f04:	b	192c <BZ2_decompress+0x192c>
    1f08:	sub	w0, w0, w20
    1f0c:	ldr	w21, [x19, #32]
    1f10:	lsr	w21, w21, w0
    1f14:	mov	w1, #0x1                   	// #1
    1f18:	lsl	w1, w1, w20
    1f1c:	sub	w1, w1, #0x1
    1f20:	str	w0, [x19, #36]
    1f24:	and	w21, w21, w1
    1f28:	b	1f48 <BZ2_decompress+0x1f48>
    1f2c:	sub	w0, w0, #0x1
    1f30:	ldr	w1, [x19, #32]
    1f34:	lsr	w1, w1, w0
    1f38:	and	w1, w1, #0x1
    1f3c:	str	w0, [x19, #36]
    1f40:	str	w1, [sp, #104]
    1f44:	orr	w21, w1, w21, lsl #1
    1f48:	cmp	w20, #0x14
    1f4c:	b.gt	2d40 <BZ2_decompress+0x2d40>
    1f50:	sxtw	x0, w20
    1f54:	ldr	x1, [sp, #112]
    1f58:	ldr	w1, [x1, x0, lsl #2]
    1f5c:	cmp	w1, w21
    1f60:	b.ge	1fec <BZ2_decompress+0x1fec>  // b.tcont
    1f64:	add	w20, w20, #0x1
    1f68:	mov	w0, #0x29                  	// #41
    1f6c:	str	w0, [x19, #8]
    1f70:	ldr	w0, [x19, #36]
    1f74:	cmp	w0, #0x0
    1f78:	b.gt	1f2c <BZ2_decompress+0x1f2c>
    1f7c:	ldr	x1, [x19]
    1f80:	ldr	w2, [x1, #8]
    1f84:	cbz	w2, 2d48 <BZ2_decompress+0x2d48>
    1f88:	ldr	w2, [x19, #32]
    1f8c:	ldr	x3, [x1]
    1f90:	ldrb	w3, [x3]
    1f94:	orr	w2, w3, w2, lsl #8
    1f98:	str	w2, [x19, #32]
    1f9c:	add	w0, w0, #0x8
    1fa0:	str	w0, [x19, #36]
    1fa4:	ldr	x0, [x1]
    1fa8:	add	x0, x0, #0x1
    1fac:	str	x0, [x1]
    1fb0:	ldr	x1, [x19]
    1fb4:	ldr	w0, [x1, #8]
    1fb8:	sub	w0, w0, #0x1
    1fbc:	str	w0, [x1, #8]
    1fc0:	ldr	x1, [x19]
    1fc4:	ldr	w0, [x1, #12]
    1fc8:	add	w0, w0, #0x1
    1fcc:	str	w0, [x1, #12]
    1fd0:	ldr	x0, [x19]
    1fd4:	ldr	w1, [x0, #12]
    1fd8:	cbnz	w1, 1f70 <BZ2_decompress+0x1f70>
    1fdc:	ldr	w1, [x0, #16]
    1fe0:	add	w1, w1, #0x1
    1fe4:	str	w1, [x0, #16]
    1fe8:	b	1f70 <BZ2_decompress+0x1f70>
    1fec:	ldr	x1, [sp, #120]
    1ff0:	ldr	w1, [x1, x0, lsl #2]
    1ff4:	sub	w1, w21, w1
    1ff8:	mov	w0, #0xfffffffc            	// #-4
    1ffc:	cmp	w1, #0x101
    2000:	b.hi	2b98 <BZ2_decompress+0x2b98>  // b.pmore
    2004:	ldr	x0, [sp, #136]
    2008:	ldr	w0, [x0, w1, sxtw #2]
    200c:	str	w0, [sp, #132]
    2010:	b	17fc <BZ2_decompress+0x17fc>
    2014:	ldr	w0, [x19, #56]
    2018:	cmp	w0, #0x0
    201c:	ccmp	w0, w28, #0x0, ge  // ge = tcont
    2020:	b.lt	202c <BZ2_decompress+0x202c>  // b.tstop
    2024:	mov	w0, #0xfffffffc            	// #-4
    2028:	b	2b98 <BZ2_decompress+0x2b98>
    202c:	mov	x1, #0x0                   	// #0
    2030:	add	x0, x19, #0x44
    2034:	mov	w25, w1
    2038:	ldr	w2, [x0, x1, lsl #2]
    203c:	cmp	w2, #0x0
    2040:	ccmp	w2, w28, #0x0, ge  // ge = tcont
    2044:	b.gt	2d50 <BZ2_decompress+0x2d50>
    2048:	add	x1, x1, #0x1
    204c:	cmp	x1, #0x100
    2050:	b.ne	2034 <BZ2_decompress+0x2034>  // b.any
    2054:	str	wzr, [x19, #1096]
    2058:	add	x2, x19, #0x444
    205c:	ldr	w1, [x0]
    2060:	str	w1, [x0, #1032]
    2064:	add	x0, x0, #0x4
    2068:	cmp	x0, x2
    206c:	b.ne	205c <BZ2_decompress+0x205c>  // b.any
    2070:	add	x0, x19, #0x44c
    2074:	add	x3, x19, #0x84c
    2078:	str	x3, [sp, #184]
    207c:	ldr	w1, [x0]
    2080:	ldur	w2, [x0, #-4]
    2084:	add	w1, w1, w2
    2088:	str	w1, [x0], #4
    208c:	cmp	x0, x3
    2090:	b.ne	207c <BZ2_decompress+0x207c>  // b.any
    2094:	mov	x1, #0x0                   	// #0
    2098:	add	x0, x19, #0x448
    209c:	mov	w25, w1
    20a0:	ldr	w2, [x0, x1, lsl #2]
    20a4:	cmp	w2, #0x0
    20a8:	ccmp	w2, w28, #0x0, ge  // ge = tcont
    20ac:	b.gt	2d58 <BZ2_decompress+0x2d58>
    20b0:	add	x1, x1, #0x1
    20b4:	cmp	x1, #0x101
    20b8:	b.ne	209c <BZ2_decompress+0x209c>  // b.any
    20bc:	str	x0, [sp, #176]
    20c0:	mov	w25, #0x1                   	// #1
    20c4:	ldr	w2, [x0]
    20c8:	ldr	w1, [x0, #4]
    20cc:	cmp	w2, w1
    20d0:	b.gt	2d60 <BZ2_decompress+0x2d60>
    20d4:	add	w25, w25, #0x1
    20d8:	add	x0, x0, #0x4
    20dc:	cmp	w25, #0x101
    20e0:	b.ne	20c4 <BZ2_decompress+0x20c4>  // b.any
    20e4:	str	wzr, [x19, #16]
    20e8:	strb	wzr, [x19, #12]
    20ec:	mov	w0, #0xffffffff            	// #-1
    20f0:	str	w0, [x19, #3184]
    20f4:	mov	w0, #0x2                   	// #2
    20f8:	str	w0, [x19, #8]
    20fc:	ldr	w0, [x19, #52]
    2100:	cmp	w0, #0x1
    2104:	b.gt	2134 <BZ2_decompress+0x2134>
    2108:	ldrb	w0, [x19, #44]
    210c:	cbz	w0, 247c <BZ2_decompress+0x247c>
    2110:	ldr	x0, [sp, #176]
    2114:	ldr	w1, [x0]
    2118:	str	w1, [x0, #1028]
    211c:	add	x0, x0, #0x4
    2120:	ldr	x1, [sp, #184]
    2124:	cmp	x0, x1
    2128:	b.ne	2114 <BZ2_decompress+0x2114>  // b.any
    212c:	mov	x4, #0x0                   	// #0
    2130:	b	2184 <BZ2_decompress+0x2184>
    2134:	adrp	x0, 0 <stderr>
    2138:	ldr	x3, [x0]
    213c:	mov	x2, #0x6                   	// #6
    2140:	mov	x1, #0x1                   	// #1
    2144:	adrp	x0, 0 <BZ2_decompress>
    2148:	add	x0, x0, #0x0
    214c:	bl	0 <fwrite>
    2150:	b	2108 <BZ2_decompress+0x2108>
    2154:	asr	w0, w0, #1
    2158:	sxtw	x0, w0
    215c:	ldr	x5, [x19, #3168]
    2160:	ldrsh	w2, [x1, #2126]
    2164:	ldrb	w3, [x5, x0]
    2168:	and	w3, w3, #0xf
    216c:	orr	w2, w3, w2, lsl #4
    2170:	strb	w2, [x5, x0]
    2174:	ldr	w0, [x1, #2124]
    2178:	add	w0, w0, #0x1
    217c:	str	w0, [x1, #2124]
    2180:	add	x4, x4, #0x1
    2184:	mov	w0, w4
    2188:	cmp	w28, w4
    218c:	b.le	21d0 <BZ2_decompress+0x21d0>
    2190:	lsl	x2, x4, #1
    2194:	ldr	x3, [x19, #3160]
    2198:	ldrb	w1, [x3, x2]
    219c:	add	x1, x19, x1, lsl #2
    21a0:	ldr	w5, [x1, #2124]
    21a4:	strh	w5, [x3, x2]
    21a8:	tbnz	w4, #0, 2154 <BZ2_decompress+0x2154>
    21ac:	asr	w0, w0, #1
    21b0:	sxtw	x0, w0
    21b4:	ldr	x3, [x19, #3168]
    21b8:	ldrb	w2, [x3, x0]
    21bc:	and	w2, w2, #0xfffffff0
    21c0:	ldrsh	w5, [x1, #2126]
    21c4:	orr	w2, w2, w5
    21c8:	strb	w2, [x3, x0]
    21cc:	b	2174 <BZ2_decompress+0x2174>
    21d0:	ldr	w0, [x19, #56]
    21d4:	asr	w2, w0, #1
    21d8:	ldr	x1, [x19, #3168]
    21dc:	ldrb	w23, [x1, w2, sxtw]
    21e0:	ubfiz	w1, w0, #2, #1
    21e4:	lsr	w23, w23, w1
    21e8:	ubfiz	w23, w23, #16, #4
    21ec:	ldr	x1, [x19, #3160]
    21f0:	ldrh	w1, [x1, w0, sxtw #1]
    21f4:	orr	w23, w23, w1
    21f8:	b	2224 <BZ2_decompress+0x2224>
    21fc:	ldr	x3, [x19, #3168]
    2200:	ldrb	w1, [x3, x2]
    2204:	and	w1, w1, #0xf
    2208:	asr	w0, w0, #16
    220c:	orr	w0, w1, w0, lsl #4
    2210:	strb	w0, [x3, x2]
    2214:	mov	w0, w25
    2218:	ldr	w1, [x19, #56]
    221c:	cmp	w1, w25
    2220:	b.eq	2274 <BZ2_decompress+0x2274>  // b.none
    2224:	sbfiz	x4, x23, #1, #32
    2228:	ldr	x3, [x19, #3160]
    222c:	asr	w1, w23, #1
    2230:	sxtw	x2, w1
    2234:	mov	w25, w23
    2238:	ldr	x5, [x19, #3168]
    223c:	ldrb	w1, [x5, w1, sxtw]
    2240:	ubfiz	w5, w23, #2, #1
    2244:	lsr	w1, w1, w5
    2248:	ubfiz	w1, w1, #16, #4
    224c:	ldrh	w23, [x3, w23, sxtw #1]
    2250:	orr	w23, w1, w23
    2254:	strh	w0, [x3, x4]
    2258:	tbnz	w25, #0, 21fc <BZ2_decompress+0x21fc>
    225c:	ldr	x3, [x19, #3168]
    2260:	ldrb	w1, [x3, x2]
    2264:	and	w1, w1, #0xfffffff0
    2268:	orr	w0, w1, w0, asr #16
    226c:	strb	w0, [x3, x2]
    2270:	b	2214 <BZ2_decompress+0x2214>
    2274:	str	w25, [x19, #60]
    2278:	str	wzr, [x19, #1092]
    227c:	ldrb	w0, [x19, #20]
    2280:	cbz	w0, 2344 <BZ2_decompress+0x2344>
    2284:	str	wzr, [x19, #24]
    2288:	str	wzr, [x19, #28]
    228c:	ldr	w0, [x19, #40]
    2290:	mov	w1, #0x86a0                	// #34464
    2294:	movk	w1, #0x1, lsl #16
    2298:	mul	w0, w0, w1
    229c:	cmp	w25, w0
    22a0:	b.cc	22ac <BZ2_decompress+0x22ac>  // b.lo, b.ul, b.last
    22a4:	mov	w0, #0x1                   	// #1
    22a8:	b	2c3c <BZ2_decompress+0x2c3c>
    22ac:	add	x1, x19, #0x448
    22b0:	mov	w0, w25
    22b4:	bl	0 <BZ2_indexIntoF>
    22b8:	mov	w2, w0
    22bc:	str	w0, [x19, #64]
    22c0:	ldr	w1, [x19, #60]
    22c4:	lsr	w0, w1, #1
    22c8:	ldr	x3, [x19, #3168]
    22cc:	ldrb	w0, [x3, x0]
    22d0:	ubfiz	w3, w1, #2, #1
    22d4:	lsr	w0, w0, w3
    22d8:	ubfiz	w0, w0, #16, #4
    22dc:	ldr	x3, [x19, #3160]
    22e0:	ldrh	w1, [x3, w1, uxtw #1]
    22e4:	orr	w0, w0, w1
    22e8:	str	w0, [x19, #60]
    22ec:	ldr	w0, [x19, #1092]
    22f0:	add	w0, w0, #0x1
    22f4:	str	w0, [x19, #1092]
    22f8:	ldr	w0, [x19, #24]
    22fc:	cbnz	w0, 2320 <BZ2_decompress+0x2320>
    2300:	ldr	w0, [x19, #28]
    2304:	adrp	x1, 0 <BZ2_rNums>
    2308:	add	x1, x1, #0x0
    230c:	ldr	w1, [x1, w0, sxtw #2]
    2310:	str	w1, [x19, #24]
    2314:	cmp	w0, #0x1ff
    2318:	csinc	w0, wzr, w0, eq  // eq = none
    231c:	str	w0, [x19, #28]
    2320:	ldr	w0, [x19, #24]
    2324:	sub	w0, w0, #0x1
    2328:	str	w0, [x19, #24]
    232c:	cmp	w0, #0x1
    2330:	cset	w0, eq  // eq = none
    2334:	eor	w0, w0, w2
    2338:	str	w0, [x19, #64]
    233c:	mov	w0, #0x0                   	// #0
    2340:	b	2b98 <BZ2_decompress+0x2b98>
    2344:	ldr	w0, [x19, #40]
    2348:	mov	w1, #0x86a0                	// #34464
    234c:	movk	w1, #0x1, lsl #16
    2350:	mul	w0, w0, w1
    2354:	cmp	w25, w0
    2358:	b.cc	2364 <BZ2_decompress+0x2364>  // b.lo, b.ul, b.last
    235c:	mov	w0, #0x1                   	// #1
    2360:	b	2c3c <BZ2_decompress+0x2c3c>
    2364:	add	x1, x19, #0x448
    2368:	mov	w0, w25
    236c:	bl	0 <BZ2_indexIntoF>
    2370:	str	w0, [x19, #64]
    2374:	ldr	w1, [x19, #60]
    2378:	lsr	w0, w1, #1
    237c:	ldr	x2, [x19, #3168]
    2380:	ldrb	w0, [x2, x0]
    2384:	ubfiz	w2, w1, #2, #1
    2388:	lsr	w0, w0, w2
    238c:	ubfiz	w0, w0, #16, #4
    2390:	ldr	x2, [x19, #3160]
    2394:	ldrh	w1, [x2, w1, uxtw #1]
    2398:	orr	w0, w0, w1
    239c:	str	w0, [x19, #60]
    23a0:	ldr	w0, [x19, #1092]
    23a4:	add	w0, w0, #0x1
    23a8:	str	w0, [x19, #1092]
    23ac:	mov	w0, #0x0                   	// #0
    23b0:	b	2b98 <BZ2_decompress+0x2b98>
    23b4:	ldr	x3, [x19, #3152]
    23b8:	ldr	w1, [x3, x0, lsl #2]
    23bc:	add	x1, x19, w1, uxtb #2
    23c0:	ldrsw	x2, [x1, #1096]
    23c4:	lsl	x2, x2, #2
    23c8:	ldr	w4, [x3, x2]
    23cc:	orr	w4, w4, w0, lsl #8
    23d0:	str	w4, [x3, x2]
    23d4:	ldr	w2, [x1, #1096]
    23d8:	add	w2, w2, #0x1
    23dc:	str	w2, [x1, #1096]
    23e0:	add	x0, x0, #0x1
    23e4:	cmp	w28, w0
    23e8:	b.gt	23b4 <BZ2_decompress+0x23b4>
    23ec:	cmp	w28, #0x0
    23f0:	csel	w25, w28, wzr, ge  // ge = tcont
    23f4:	ldr	x1, [x19, #3152]
    23f8:	ldrsw	x0, [x19, #56]
    23fc:	ldr	w0, [x1, x0, lsl #2]
    2400:	lsr	w0, w0, #8
    2404:	str	w0, [x19, #60]
    2408:	str	wzr, [x19, #1092]
    240c:	ldrb	w2, [x19, #20]
    2410:	cbz	w2, 2484 <BZ2_decompress+0x2484>
    2414:	str	wzr, [x19, #24]
    2418:	str	wzr, [x19, #28]
    241c:	ldr	w2, [x19, #40]
    2420:	mov	w3, #0x86a0                	// #34464
    2424:	movk	w3, #0x1, lsl #16
    2428:	mul	w2, w2, w3
    242c:	cmp	w0, w2
    2430:	b.cs	2db0 <BZ2_decompress+0x2db0>  // b.hs, b.nlast
    2434:	mov	w0, w0
    2438:	ldr	w0, [x1, x0, lsl #2]
    243c:	lsr	w1, w0, #8
    2440:	str	w1, [x19, #60]
    2444:	mov	w2, #0x1                   	// #1
    2448:	str	w2, [x19, #1092]
    244c:	adrp	x1, 0 <BZ2_rNums>
    2450:	ldr	w1, [x1]
    2454:	str	w2, [x19, #28]
    2458:	sub	w1, w1, #0x1
    245c:	str	w1, [x19, #24]
    2460:	and	w0, w0, #0xff
    2464:	cmp	w1, w2
    2468:	cset	w1, eq  // eq = none
    246c:	eor	w0, w0, w1
    2470:	str	w0, [x19, #64]
    2474:	mov	w0, #0x0                   	// #0
    2478:	b	2b98 <BZ2_decompress+0x2b98>
    247c:	mov	x0, #0x0                   	// #0
    2480:	b	23e4 <BZ2_decompress+0x23e4>
    2484:	ldr	w2, [x19, #40]
    2488:	mov	w3, #0x86a0                	// #34464
    248c:	movk	w3, #0x1, lsl #16
    2490:	mul	w2, w2, w3
    2494:	cmp	w0, w2
    2498:	b.cs	2db8 <BZ2_decompress+0x2db8>  // b.hs, b.nlast
    249c:	mov	w0, w0
    24a0:	ldr	w0, [x1, x0, lsl #2]
    24a4:	and	w1, w0, #0xff
    24a8:	str	w1, [x19, #64]
    24ac:	lsr	w0, w0, #8
    24b0:	str	w0, [x19, #60]
    24b4:	mov	w0, #0x1                   	// #1
    24b8:	str	w0, [x19, #1092]
    24bc:	mov	w0, #0x0                   	// #0
    24c0:	b	2b98 <BZ2_decompress+0x2b98>
    24c4:	mov	w0, #0x2a                  	// #42
    24c8:	str	w0, [x19, #8]
    24cc:	ldr	w0, [x19, #36]
    24d0:	cmp	w0, #0x7
    24d4:	b.gt	2548 <BZ2_decompress+0x2548>
    24d8:	ldr	x1, [x19]
    24dc:	ldr	w2, [x1, #8]
    24e0:	cbz	w2, 2d68 <BZ2_decompress+0x2d68>
    24e4:	ldr	w2, [x19, #32]
    24e8:	ldr	x3, [x1]
    24ec:	ldrb	w3, [x3]
    24f0:	orr	w2, w3, w2, lsl #8
    24f4:	str	w2, [x19, #32]
    24f8:	add	w0, w0, #0x8
    24fc:	str	w0, [x19, #36]
    2500:	ldr	x0, [x1]
    2504:	add	x0, x0, #0x1
    2508:	str	x0, [x1]
    250c:	ldr	x1, [x19]
    2510:	ldr	w0, [x1, #8]
    2514:	sub	w0, w0, #0x1
    2518:	str	w0, [x1, #8]
    251c:	ldr	x1, [x19]
    2520:	ldr	w0, [x1, #12]
    2524:	add	w0, w0, #0x1
    2528:	str	w0, [x1, #12]
    252c:	ldr	x0, [x19]
    2530:	ldr	w1, [x0, #12]
    2534:	cbnz	w1, 24cc <BZ2_decompress+0x24cc>
    2538:	ldr	w1, [x0, #16]
    253c:	add	w1, w1, #0x1
    2540:	str	w1, [x0, #16]
    2544:	b	24cc <BZ2_decompress+0x24cc>
    2548:	sub	w0, w0, #0x8
    254c:	ldr	w1, [x19, #32]
    2550:	lsr	w1, w1, w0
    2554:	str	w0, [x19, #36]
    2558:	and	w1, w1, #0xff
    255c:	mov	w0, #0xfffffffc            	// #-4
    2560:	cmp	w1, #0x72
    2564:	b.ne	2b98 <BZ2_decompress+0x2b98>  // b.any
    2568:	mov	w0, #0x2b                  	// #43
    256c:	str	w0, [x19, #8]
    2570:	ldr	w0, [x19, #36]
    2574:	cmp	w0, #0x7
    2578:	b.gt	25ec <BZ2_decompress+0x25ec>
    257c:	ldr	x1, [x19]
    2580:	ldr	w2, [x1, #8]
    2584:	cbz	w2, 2d70 <BZ2_decompress+0x2d70>
    2588:	ldr	w2, [x19, #32]
    258c:	ldr	x3, [x1]
    2590:	ldrb	w3, [x3]
    2594:	orr	w2, w3, w2, lsl #8
    2598:	str	w2, [x19, #32]
    259c:	add	w0, w0, #0x8
    25a0:	str	w0, [x19, #36]
    25a4:	ldr	x0, [x1]
    25a8:	add	x0, x0, #0x1
    25ac:	str	x0, [x1]
    25b0:	ldr	x1, [x19]
    25b4:	ldr	w0, [x1, #8]
    25b8:	sub	w0, w0, #0x1
    25bc:	str	w0, [x1, #8]
    25c0:	ldr	x1, [x19]
    25c4:	ldr	w0, [x1, #12]
    25c8:	add	w0, w0, #0x1
    25cc:	str	w0, [x1, #12]
    25d0:	ldr	x0, [x19]
    25d4:	ldr	w1, [x0, #12]
    25d8:	cbnz	w1, 2570 <BZ2_decompress+0x2570>
    25dc:	ldr	w1, [x0, #16]
    25e0:	add	w1, w1, #0x1
    25e4:	str	w1, [x0, #16]
    25e8:	b	2570 <BZ2_decompress+0x2570>
    25ec:	sub	w0, w0, #0x8
    25f0:	ldr	w1, [x19, #32]
    25f4:	lsr	w1, w1, w0
    25f8:	str	w0, [x19, #36]
    25fc:	and	w1, w1, #0xff
    2600:	mov	w0, #0xfffffffc            	// #-4
    2604:	cmp	w1, #0x45
    2608:	b.ne	2b98 <BZ2_decompress+0x2b98>  // b.any
    260c:	mov	w0, #0x2c                  	// #44
    2610:	str	w0, [x19, #8]
    2614:	ldr	w0, [x19, #36]
    2618:	cmp	w0, #0x7
    261c:	b.gt	2690 <BZ2_decompress+0x2690>
    2620:	ldr	x1, [x19]
    2624:	ldr	w2, [x1, #8]
    2628:	cbz	w2, 2d78 <BZ2_decompress+0x2d78>
    262c:	ldr	w2, [x19, #32]
    2630:	ldr	x3, [x1]
    2634:	ldrb	w3, [x3]
    2638:	orr	w2, w3, w2, lsl #8
    263c:	str	w2, [x19, #32]
    2640:	add	w0, w0, #0x8
    2644:	str	w0, [x19, #36]
    2648:	ldr	x0, [x1]
    264c:	add	x0, x0, #0x1
    2650:	str	x0, [x1]
    2654:	ldr	x1, [x19]
    2658:	ldr	w0, [x1, #8]
    265c:	sub	w0, w0, #0x1
    2660:	str	w0, [x1, #8]
    2664:	ldr	x1, [x19]
    2668:	ldr	w0, [x1, #12]
    266c:	add	w0, w0, #0x1
    2670:	str	w0, [x1, #12]
    2674:	ldr	x0, [x19]
    2678:	ldr	w1, [x0, #12]
    267c:	cbnz	w1, 2614 <BZ2_decompress+0x2614>
    2680:	ldr	w1, [x0, #16]
    2684:	add	w1, w1, #0x1
    2688:	str	w1, [x0, #16]
    268c:	b	2614 <BZ2_decompress+0x2614>
    2690:	sub	w0, w0, #0x8
    2694:	ldr	w1, [x19, #32]
    2698:	lsr	w1, w1, w0
    269c:	str	w0, [x19, #36]
    26a0:	and	w1, w1, #0xff
    26a4:	mov	w0, #0xfffffffc            	// #-4
    26a8:	cmp	w1, #0x38
    26ac:	b.ne	2b98 <BZ2_decompress+0x2b98>  // b.any
    26b0:	mov	w0, #0x2d                  	// #45
    26b4:	str	w0, [x19, #8]
    26b8:	ldr	w0, [x19, #36]
    26bc:	cmp	w0, #0x7
    26c0:	b.gt	2734 <BZ2_decompress+0x2734>
    26c4:	ldr	x1, [x19]
    26c8:	ldr	w2, [x1, #8]
    26cc:	cbz	w2, 2d80 <BZ2_decompress+0x2d80>
    26d0:	ldr	w2, [x19, #32]
    26d4:	ldr	x3, [x1]
    26d8:	ldrb	w3, [x3]
    26dc:	orr	w2, w3, w2, lsl #8
    26e0:	str	w2, [x19, #32]
    26e4:	add	w0, w0, #0x8
    26e8:	str	w0, [x19, #36]
    26ec:	ldr	x0, [x1]
    26f0:	add	x0, x0, #0x1
    26f4:	str	x0, [x1]
    26f8:	ldr	x1, [x19]
    26fc:	ldr	w0, [x1, #8]
    2700:	sub	w0, w0, #0x1
    2704:	str	w0, [x1, #8]
    2708:	ldr	x1, [x19]
    270c:	ldr	w0, [x1, #12]
    2710:	add	w0, w0, #0x1
    2714:	str	w0, [x1, #12]
    2718:	ldr	x0, [x19]
    271c:	ldr	w1, [x0, #12]
    2720:	cbnz	w1, 26b8 <BZ2_decompress+0x26b8>
    2724:	ldr	w1, [x0, #16]
    2728:	add	w1, w1, #0x1
    272c:	str	w1, [x0, #16]
    2730:	b	26b8 <BZ2_decompress+0x26b8>
    2734:	sub	w0, w0, #0x8
    2738:	ldr	w1, [x19, #32]
    273c:	lsr	w1, w1, w0
    2740:	str	w0, [x19, #36]
    2744:	and	w1, w1, #0xff
    2748:	mov	w0, #0xfffffffc            	// #-4
    274c:	cmp	w1, #0x50
    2750:	b.ne	2b98 <BZ2_decompress+0x2b98>  // b.any
    2754:	mov	w0, #0x2e                  	// #46
    2758:	str	w0, [x19, #8]
    275c:	ldr	w0, [x19, #36]
    2760:	cmp	w0, #0x7
    2764:	b.gt	27d8 <BZ2_decompress+0x27d8>
    2768:	ldr	x1, [x19]
    276c:	ldr	w2, [x1, #8]
    2770:	cbz	w2, 2d88 <BZ2_decompress+0x2d88>
    2774:	ldr	w2, [x19, #32]
    2778:	ldr	x3, [x1]
    277c:	ldrb	w3, [x3]
    2780:	orr	w2, w3, w2, lsl #8
    2784:	str	w2, [x19, #32]
    2788:	add	w0, w0, #0x8
    278c:	str	w0, [x19, #36]
    2790:	ldr	x0, [x1]
    2794:	add	x0, x0, #0x1
    2798:	str	x0, [x1]
    279c:	ldr	x1, [x19]
    27a0:	ldr	w0, [x1, #8]
    27a4:	sub	w0, w0, #0x1
    27a8:	str	w0, [x1, #8]
    27ac:	ldr	x1, [x19]
    27b0:	ldr	w0, [x1, #12]
    27b4:	add	w0, w0, #0x1
    27b8:	str	w0, [x1, #12]
    27bc:	ldr	x0, [x19]
    27c0:	ldr	w1, [x0, #12]
    27c4:	cbnz	w1, 275c <BZ2_decompress+0x275c>
    27c8:	ldr	w1, [x0, #16]
    27cc:	add	w1, w1, #0x1
    27d0:	str	w1, [x0, #16]
    27d4:	b	275c <BZ2_decompress+0x275c>
    27d8:	sub	w0, w0, #0x8
    27dc:	ldr	w1, [x19, #32]
    27e0:	lsr	w1, w1, w0
    27e4:	str	w0, [x19, #36]
    27e8:	and	w1, w1, #0xff
    27ec:	mov	w0, #0xfffffffc            	// #-4
    27f0:	cmp	w1, #0x90
    27f4:	b.ne	2b98 <BZ2_decompress+0x2b98>  // b.any
    27f8:	str	wzr, [x19, #3180]
    27fc:	mov	w0, #0x2f                  	// #47
    2800:	str	w0, [x19, #8]
    2804:	ldr	w0, [x19, #36]
    2808:	cmp	w0, #0x7
    280c:	b.gt	2880 <BZ2_decompress+0x2880>
    2810:	ldr	x1, [x19]
    2814:	ldr	w2, [x1, #8]
    2818:	cbz	w2, 2d90 <BZ2_decompress+0x2d90>
    281c:	ldr	w2, [x19, #32]
    2820:	ldr	x3, [x1]
    2824:	ldrb	w3, [x3]
    2828:	orr	w2, w3, w2, lsl #8
    282c:	str	w2, [x19, #32]
    2830:	add	w0, w0, #0x8
    2834:	str	w0, [x19, #36]
    2838:	ldr	x0, [x1]
    283c:	add	x0, x0, #0x1
    2840:	str	x0, [x1]
    2844:	ldr	x1, [x19]
    2848:	ldr	w0, [x1, #8]
    284c:	sub	w0, w0, #0x1
    2850:	str	w0, [x1, #8]
    2854:	ldr	x1, [x19]
    2858:	ldr	w0, [x1, #12]
    285c:	add	w0, w0, #0x1
    2860:	str	w0, [x1, #12]
    2864:	ldr	x0, [x19]
    2868:	ldr	w1, [x0, #12]
    286c:	cbnz	w1, 2804 <BZ2_decompress+0x2804>
    2870:	ldr	w1, [x0, #16]
    2874:	add	w1, w1, #0x1
    2878:	str	w1, [x0, #16]
    287c:	b	2804 <BZ2_decompress+0x2804>
    2880:	sub	w0, w0, #0x8
    2884:	ldr	w1, [x19, #32]
    2888:	lsr	w1, w1, w0
    288c:	str	w0, [x19, #36]
    2890:	ldr	w0, [x19, #3180]
    2894:	bfi	w1, w0, #8, #24
    2898:	str	w1, [x19, #3180]
    289c:	mov	w0, #0x30                  	// #48
    28a0:	str	w0, [x19, #8]
    28a4:	ldr	w0, [x19, #36]
    28a8:	cmp	w0, #0x7
    28ac:	b.gt	2920 <BZ2_decompress+0x2920>
    28b0:	ldr	x1, [x19]
    28b4:	ldr	w2, [x1, #8]
    28b8:	cbz	w2, 2d98 <BZ2_decompress+0x2d98>
    28bc:	ldr	w2, [x19, #32]
    28c0:	ldr	x3, [x1]
    28c4:	ldrb	w3, [x3]
    28c8:	orr	w2, w3, w2, lsl #8
    28cc:	str	w2, [x19, #32]
    28d0:	add	w0, w0, #0x8
    28d4:	str	w0, [x19, #36]
    28d8:	ldr	x0, [x1]
    28dc:	add	x0, x0, #0x1
    28e0:	str	x0, [x1]
    28e4:	ldr	x1, [x19]
    28e8:	ldr	w0, [x1, #8]
    28ec:	sub	w0, w0, #0x1
    28f0:	str	w0, [x1, #8]
    28f4:	ldr	x1, [x19]
    28f8:	ldr	w0, [x1, #12]
    28fc:	add	w0, w0, #0x1
    2900:	str	w0, [x1, #12]
    2904:	ldr	x0, [x19]
    2908:	ldr	w1, [x0, #12]
    290c:	cbnz	w1, 28a4 <BZ2_decompress+0x28a4>
    2910:	ldr	w1, [x0, #16]
    2914:	add	w1, w1, #0x1
    2918:	str	w1, [x0, #16]
    291c:	b	28a4 <BZ2_decompress+0x28a4>
    2920:	sub	w0, w0, #0x8
    2924:	ldr	w1, [x19, #32]
    2928:	lsr	w1, w1, w0
    292c:	str	w0, [x19, #36]
    2930:	ldr	w0, [x19, #3180]
    2934:	bfi	w1, w0, #8, #24
    2938:	str	w1, [x19, #3180]
    293c:	mov	w0, #0x31                  	// #49
    2940:	str	w0, [x19, #8]
    2944:	ldr	w0, [x19, #36]
    2948:	cmp	w0, #0x7
    294c:	b.gt	29c0 <BZ2_decompress+0x29c0>
    2950:	ldr	x1, [x19]
    2954:	ldr	w2, [x1, #8]
    2958:	cbz	w2, 2da0 <BZ2_decompress+0x2da0>
    295c:	ldr	w2, [x19, #32]
    2960:	ldr	x3, [x1]
    2964:	ldrb	w3, [x3]
    2968:	orr	w2, w3, w2, lsl #8
    296c:	str	w2, [x19, #32]
    2970:	add	w0, w0, #0x8
    2974:	str	w0, [x19, #36]
    2978:	ldr	x0, [x1]
    297c:	add	x0, x0, #0x1
    2980:	str	x0, [x1]
    2984:	ldr	x1, [x19]
    2988:	ldr	w0, [x1, #8]
    298c:	sub	w0, w0, #0x1
    2990:	str	w0, [x1, #8]
    2994:	ldr	x1, [x19]
    2998:	ldr	w0, [x1, #12]
    299c:	add	w0, w0, #0x1
    29a0:	str	w0, [x1, #12]
    29a4:	ldr	x0, [x19]
    29a8:	ldr	w1, [x0, #12]
    29ac:	cbnz	w1, 2944 <BZ2_decompress+0x2944>
    29b0:	ldr	w1, [x0, #16]
    29b4:	add	w1, w1, #0x1
    29b8:	str	w1, [x0, #16]
    29bc:	b	2944 <BZ2_decompress+0x2944>
    29c0:	sub	w0, w0, #0x8
    29c4:	ldr	w1, [x19, #32]
    29c8:	lsr	w1, w1, w0
    29cc:	str	w0, [x19, #36]
    29d0:	ldr	w0, [x19, #3180]
    29d4:	bfi	w1, w0, #8, #24
    29d8:	str	w1, [x19, #3180]
    29dc:	mov	w0, #0x32                  	// #50
    29e0:	str	w0, [x19, #8]
    29e4:	ldr	w0, [x19, #36]
    29e8:	cmp	w0, #0x7
    29ec:	b.gt	2a60 <BZ2_decompress+0x2a60>
    29f0:	ldr	x1, [x19]
    29f4:	ldr	w2, [x1, #8]
    29f8:	cbz	w2, 2da8 <BZ2_decompress+0x2da8>
    29fc:	ldr	w2, [x19, #32]
    2a00:	ldr	x3, [x1]
    2a04:	ldrb	w3, [x3]
    2a08:	orr	w2, w3, w2, lsl #8
    2a0c:	str	w2, [x19, #32]
    2a10:	add	w0, w0, #0x8
    2a14:	str	w0, [x19, #36]
    2a18:	ldr	x0, [x1]
    2a1c:	add	x0, x0, #0x1
    2a20:	str	x0, [x1]
    2a24:	ldr	x1, [x19]
    2a28:	ldr	w0, [x1, #8]
    2a2c:	sub	w0, w0, #0x1
    2a30:	str	w0, [x1, #8]
    2a34:	ldr	x1, [x19]
    2a38:	ldr	w0, [x1, #12]
    2a3c:	add	w0, w0, #0x1
    2a40:	str	w0, [x1, #12]
    2a44:	ldr	x0, [x19]
    2a48:	ldr	w1, [x0, #12]
    2a4c:	cbnz	w1, 29e4 <BZ2_decompress+0x29e4>
    2a50:	ldr	w1, [x0, #16]
    2a54:	add	w1, w1, #0x1
    2a58:	str	w1, [x0, #16]
    2a5c:	b	29e4 <BZ2_decompress+0x29e4>
    2a60:	sub	w0, w0, #0x8
    2a64:	ldr	w1, [x19, #32]
    2a68:	lsr	w1, w1, w0
    2a6c:	str	w0, [x19, #36]
    2a70:	ldr	w0, [x19, #3180]
    2a74:	bfi	w1, w0, #8, #24
    2a78:	str	w1, [x19, #3180]
    2a7c:	mov	w0, #0x1                   	// #1
    2a80:	str	w0, [x19, #8]
    2a84:	mov	w0, #0x4                   	// #4
    2a88:	b	2b98 <BZ2_decompress+0x2b98>
    2a8c:	mov	w0, #0xfa1                 	// #4001
    2a90:	bl	0 <BZ2_bz__AssertH__fail>
    2a94:	mov	w0, #0xfa2                 	// #4002
    2a98:	bl	0 <BZ2_bz__AssertH__fail>
    2a9c:	mov	w0, #0x0                   	// #0
    2aa0:	b	2b98 <BZ2_decompress+0x2b98>
    2aa4:	mov	w0, #0xfffffffb            	// #-5
    2aa8:	b	2b98 <BZ2_decompress+0x2b98>
    2aac:	mov	w0, #0x0                   	// #0
    2ab0:	b	2b98 <BZ2_decompress+0x2b98>
    2ab4:	mov	w0, #0xfffffffb            	// #-5
    2ab8:	b	2b98 <BZ2_decompress+0x2b98>
    2abc:	mov	w0, #0x0                   	// #0
    2ac0:	b	2b98 <BZ2_decompress+0x2b98>
    2ac4:	mov	w0, #0xfffffffb            	// #-5
    2ac8:	b	2b98 <BZ2_decompress+0x2b98>
    2acc:	mov	w0, #0x0                   	// #0
    2ad0:	b	2b98 <BZ2_decompress+0x2b98>
    2ad4:	mov	w0, #0x0                   	// #0
    2ad8:	b	2b98 <BZ2_decompress+0x2b98>
    2adc:	mov	w0, #0xfffffffd            	// #-3
    2ae0:	b	2b98 <BZ2_decompress+0x2b98>
    2ae4:	mov	w0, #0x0                   	// #0
    2ae8:	b	2b98 <BZ2_decompress+0x2b98>
    2aec:	mov	w0, #0xfffffffc            	// #-4
    2af0:	b	2b98 <BZ2_decompress+0x2b98>
    2af4:	mov	w0, #0xfffffffc            	// #-4
    2af8:	b	2b98 <BZ2_decompress+0x2b98>
    2afc:	mov	w0, #0x0                   	// #0
    2b00:	b	2b98 <BZ2_decompress+0x2b98>
    2b04:	mov	w0, #0xfffffffc            	// #-4
    2b08:	b	2b98 <BZ2_decompress+0x2b98>
    2b0c:	mov	w0, #0x0                   	// #0
    2b10:	b	2b98 <BZ2_decompress+0x2b98>
    2b14:	mov	w0, #0xfffffffc            	// #-4
    2b18:	b	2b98 <BZ2_decompress+0x2b98>
    2b1c:	mov	w0, #0x0                   	// #0
    2b20:	b	2b98 <BZ2_decompress+0x2b98>
    2b24:	mov	w0, #0xfffffffc            	// #-4
    2b28:	b	2b98 <BZ2_decompress+0x2b98>
    2b2c:	mov	w0, #0x0                   	// #0
    2b30:	b	2b98 <BZ2_decompress+0x2b98>
    2b34:	mov	w0, #0xfffffffc            	// #-4
    2b38:	b	2b98 <BZ2_decompress+0x2b98>
    2b3c:	mov	w0, #0x0                   	// #0
    2b40:	b	2b98 <BZ2_decompress+0x2b98>
    2b44:	mov	w0, #0x0                   	// #0
    2b48:	b	2b98 <BZ2_decompress+0x2b98>
    2b4c:	mov	w0, #0x0                   	// #0
    2b50:	b	2b98 <BZ2_decompress+0x2b98>
    2b54:	mov	w0, #0x0                   	// #0
    2b58:	b	2b98 <BZ2_decompress+0x2b98>
    2b5c:	mov	w0, #0x0                   	// #0
    2b60:	b	2b98 <BZ2_decompress+0x2b98>
    2b64:	mov	w0, #0x0                   	// #0
    2b68:	b	2b98 <BZ2_decompress+0x2b98>
    2b6c:	mov	w0, #0x0                   	// #0
    2b70:	b	2b98 <BZ2_decompress+0x2b98>
    2b74:	mov	w0, #0x0                   	// #0
    2b78:	b	2b98 <BZ2_decompress+0x2b98>
    2b7c:	mov	w0, #0xfffffffc            	// #-4
    2b80:	b	2b98 <BZ2_decompress+0x2b98>
    2b84:	mov	w0, #0x0                   	// #0
    2b88:	b	2b98 <BZ2_decompress+0x2b98>
    2b8c:	mov	w0, #0xfffffffc            	// #-4
    2b90:	b	2b98 <BZ2_decompress+0x2b98>
    2b94:	mov	w0, #0x0                   	// #0
    2b98:	add	x1, x19, #0xc, lsl #12
    2b9c:	str	w25, [x1, #14884]
    2ba0:	str	w23, [x1, #14888]
    2ba4:	str	w26, [x1, #14892]
    2ba8:	str	w22, [x1, #14896]
    2bac:	str	w24, [x1, #14900]
    2bb0:	ldr	w2, [sp, #108]
    2bb4:	str	w2, [x1, #14904]
    2bb8:	ldr	w2, [sp, #164]
    2bbc:	str	w2, [x1, #14908]
    2bc0:	ldr	w2, [sp, #148]
    2bc4:	str	w2, [x1, #14912]
    2bc8:	ldr	w2, [sp, #144]
    2bcc:	str	w2, [x1, #14916]
    2bd0:	ldr	w2, [sp, #132]
    2bd4:	str	w2, [x1, #14920]
    2bd8:	ldr	w2, [sp, #152]
    2bdc:	str	w2, [x1, #14924]
    2be0:	str	w28, [x1, #14928]
    2be4:	ldr	w2, [sp, #128]
    2be8:	str	w2, [x1, #14932]
    2bec:	ldr	w2, [sp, #156]
    2bf0:	str	w2, [x1, #14936]
    2bf4:	str	w27, [x1, #14940]
    2bf8:	ldr	w2, [sp, #172]
    2bfc:	str	w2, [x1, #14944]
    2c00:	str	w20, [x1, #14948]
    2c04:	str	w21, [x1, #14952]
    2c08:	ldr	w2, [sp, #104]
    2c0c:	str	w2, [x1, #14956]
    2c10:	ldr	w2, [sp, #168]
    2c14:	str	w2, [x1, #14960]
    2c18:	ldr	w2, [sp, #160]
    2c1c:	str	w2, [x1, #14964]
    2c20:	add	x19, x19, #0x8, lsl #12
    2c24:	ldr	x1, [sp, #112]
    2c28:	str	x1, [x19, #31352]
    2c2c:	ldr	x1, [sp, #120]
    2c30:	str	x1, [x19, #31360]
    2c34:	ldr	x1, [sp, #136]
    2c38:	str	x1, [x19, #31368]
    2c3c:	ldp	x19, x20, [sp, #16]
    2c40:	ldp	x21, x22, [sp, #32]
    2c44:	ldp	x23, x24, [sp, #48]
    2c48:	ldp	x25, x26, [sp, #64]
    2c4c:	ldp	x27, x28, [sp, #80]
    2c50:	ldp	x29, x30, [sp], #208
    2c54:	ret
    2c58:	mov	w0, #0x0                   	// #0
    2c5c:	b	2b98 <BZ2_decompress+0x2b98>
    2c60:	mov	w0, #0xfffffffc            	// #-4
    2c64:	b	2b98 <BZ2_decompress+0x2b98>
    2c68:	mov	w0, #0xfffffffc            	// #-4
    2c6c:	b	2b98 <BZ2_decompress+0x2b98>
    2c70:	mov	w0, #0x0                   	// #0
    2c74:	b	2b98 <BZ2_decompress+0x2b98>
    2c78:	mov	w0, #0xfffffffc            	// #-4
    2c7c:	b	2b98 <BZ2_decompress+0x2b98>
    2c80:	mov	w0, #0x0                   	// #0
    2c84:	b	2b98 <BZ2_decompress+0x2b98>
    2c88:	mov	w0, #0x0                   	// #0
    2c8c:	b	2b98 <BZ2_decompress+0x2b98>
    2c90:	mov	w0, #0x0                   	// #0
    2c94:	b	2b98 <BZ2_decompress+0x2b98>
    2c98:	mov	w0, #0xfffffffc            	// #-4
    2c9c:	b	2b98 <BZ2_decompress+0x2b98>
    2ca0:	mov	w0, #0x0                   	// #0
    2ca4:	b	2b98 <BZ2_decompress+0x2b98>
    2ca8:	mov	w0, #0x0                   	// #0
    2cac:	b	2b98 <BZ2_decompress+0x2b98>
    2cb0:	mov	w28, #0x0                   	// #0
    2cb4:	str	wzr, [sp, #144]
    2cb8:	str	wzr, [sp, #148]
    2cbc:	mov	w25, #0x100                 	// #256
    2cc0:	mov	w0, #0xfffffffc            	// #-4
    2cc4:	b	2b98 <BZ2_decompress+0x2b98>
    2cc8:	mov	w0, #0x0                   	// #0
    2ccc:	b	2b98 <BZ2_decompress+0x2b98>
    2cd0:	mov	w0, #0xfffffffc            	// #-4
    2cd4:	b	2b98 <BZ2_decompress+0x2b98>
    2cd8:	mov	w0, #0x0                   	// #0
    2cdc:	b	2b98 <BZ2_decompress+0x2b98>
    2ce0:	mov	w0, #0xfffffffc            	// #-4
    2ce4:	b	2b98 <BZ2_decompress+0x2b98>
    2ce8:	mov	w0, #0xfffffffc            	// #-4
    2cec:	b	2b98 <BZ2_decompress+0x2b98>
    2cf0:	mov	w0, #0x0                   	// #0
    2cf4:	b	2b98 <BZ2_decompress+0x2b98>
    2cf8:	mov	w0, #0xfffffffc            	// #-4
    2cfc:	b	2b98 <BZ2_decompress+0x2b98>
    2d00:	mov	w0, #0x0                   	// #0
    2d04:	b	2b98 <BZ2_decompress+0x2b98>
    2d08:	mov	w0, #0xfffffffc            	// #-4
    2d0c:	b	2b98 <BZ2_decompress+0x2b98>
    2d10:	str	w0, [sp, #128]
    2d14:	mov	w0, #0xfffffffc            	// #-4
    2d18:	b	2b98 <BZ2_decompress+0x2b98>
    2d1c:	str	w0, [sp, #128]
    2d20:	mov	w0, #0xfffffffc            	// #-4
    2d24:	b	2b98 <BZ2_decompress+0x2b98>
    2d28:	mov	w0, #0xfffffffc            	// #-4
    2d2c:	b	2b98 <BZ2_decompress+0x2b98>
    2d30:	mov	w0, #0xfffffffc            	// #-4
    2d34:	b	2b98 <BZ2_decompress+0x2b98>
    2d38:	mov	w0, #0x0                   	// #0
    2d3c:	b	2b98 <BZ2_decompress+0x2b98>
    2d40:	mov	w0, #0xfffffffc            	// #-4
    2d44:	b	2b98 <BZ2_decompress+0x2b98>
    2d48:	mov	w0, #0x0                   	// #0
    2d4c:	b	2b98 <BZ2_decompress+0x2b98>
    2d50:	mov	w0, #0xfffffffc            	// #-4
    2d54:	b	2b98 <BZ2_decompress+0x2b98>
    2d58:	mov	w0, #0xfffffffc            	// #-4
    2d5c:	b	2b98 <BZ2_decompress+0x2b98>
    2d60:	mov	w0, #0xfffffffc            	// #-4
    2d64:	b	2b98 <BZ2_decompress+0x2b98>
    2d68:	mov	w0, #0x0                   	// #0
    2d6c:	b	2b98 <BZ2_decompress+0x2b98>
    2d70:	mov	w0, #0x0                   	// #0
    2d74:	b	2b98 <BZ2_decompress+0x2b98>
    2d78:	mov	w0, #0x0                   	// #0
    2d7c:	b	2b98 <BZ2_decompress+0x2b98>
    2d80:	mov	w0, #0x0                   	// #0
    2d84:	b	2b98 <BZ2_decompress+0x2b98>
    2d88:	mov	w0, #0x0                   	// #0
    2d8c:	b	2b98 <BZ2_decompress+0x2b98>
    2d90:	mov	w0, #0x0                   	// #0
    2d94:	b	2b98 <BZ2_decompress+0x2b98>
    2d98:	mov	w0, #0x0                   	// #0
    2d9c:	b	2b98 <BZ2_decompress+0x2b98>
    2da0:	mov	w0, #0x0                   	// #0
    2da4:	b	2b98 <BZ2_decompress+0x2b98>
    2da8:	mov	w0, #0x0                   	// #0
    2dac:	b	2b98 <BZ2_decompress+0x2b98>
    2db0:	mov	w0, #0x1                   	// #1
    2db4:	b	2c3c <BZ2_decompress+0x2c3c>
    2db8:	mov	w0, #0x1                   	// #1
    2dbc:	b	2c3c <BZ2_decompress+0x2c3c>

bzlib.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <add_pair_to_block>:
       0:	ldr	w7, [x0, #92]
       4:	and	w8, w7, #0xff
       8:	ldr	w4, [x0, #96]
       c:	cmp	w4, #0x0
      10:	b.le	48 <add_pair_to_block+0x48>
      14:	mov	w3, #0x0                   	// #0
      18:	adrp	x5, 0 <BZ2_crc32Table>
      1c:	add	x5, x5, #0x0
      20:	and	w6, w7, #0xff
      24:	ldr	w1, [x0, #648]
      28:	eor	w2, w6, w1, lsr #24
      2c:	mov	w2, w2
      30:	ldr	w2, [x5, x2, lsl #2]
      34:	eor	w1, w2, w1, lsl #8
      38:	str	w1, [x0, #648]
      3c:	add	w3, w3, #0x1
      40:	cmp	w3, w4
      44:	b.ne	24 <add_pair_to_block+0x24>  // b.any
      48:	add	x7, x0, w7, uxtw
      4c:	mov	w1, #0x1                   	// #1
      50:	strb	w1, [x7, #128]
      54:	cmp	w4, #0x2
      58:	b.eq	10c <add_pair_to_block+0x10c>  // b.none
      5c:	cmp	w4, #0x3
      60:	b.eq	13c <add_pair_to_block+0x13c>  // b.none
      64:	cmp	w4, #0x1
      68:	b.eq	f0 <add_pair_to_block+0xf0>  // b.none
      6c:	sub	w1, w4, #0x4
      70:	add	x1, x0, w1, sxtw
      74:	mov	w2, #0x1                   	// #1
      78:	strb	w2, [x1, #128]
      7c:	ldrsw	x1, [x0, #108]
      80:	ldr	x2, [x0, #64]
      84:	strb	w8, [x2, x1]
      88:	ldr	w1, [x0, #108]
      8c:	add	w1, w1, #0x1
      90:	str	w1, [x0, #108]
      94:	ldr	x2, [x0, #64]
      98:	strb	w8, [x2, w1, sxtw]
      9c:	ldr	w1, [x0, #108]
      a0:	add	w1, w1, #0x1
      a4:	str	w1, [x0, #108]
      a8:	ldr	x2, [x0, #64]
      ac:	strb	w8, [x2, w1, sxtw]
      b0:	ldr	w1, [x0, #108]
      b4:	add	w1, w1, #0x1
      b8:	str	w1, [x0, #108]
      bc:	ldr	x2, [x0, #64]
      c0:	strb	w8, [x2, w1, sxtw]
      c4:	ldr	w1, [x0, #108]
      c8:	add	w1, w1, #0x1
      cc:	str	w1, [x0, #108]
      d0:	ldr	x3, [x0, #64]
      d4:	ldr	w2, [x0, #96]
      d8:	sub	w2, w2, #0x4
      dc:	strb	w2, [x3, w1, sxtw]
      e0:	ldr	w1, [x0, #108]
      e4:	add	w1, w1, #0x1
      e8:	str	w1, [x0, #108]
      ec:	b	108 <add_pair_to_block+0x108>
      f0:	ldrsw	x1, [x0, #108]
      f4:	ldr	x2, [x0, #64]
      f8:	strb	w8, [x2, x1]
      fc:	ldr	w1, [x0, #108]
     100:	add	w1, w1, #0x1
     104:	str	w1, [x0, #108]
     108:	ret
     10c:	ldrsw	x1, [x0, #108]
     110:	ldr	x2, [x0, #64]
     114:	strb	w8, [x2, x1]
     118:	ldr	w1, [x0, #108]
     11c:	add	w1, w1, #0x1
     120:	str	w1, [x0, #108]
     124:	ldr	x2, [x0, #64]
     128:	strb	w8, [x2, w1, sxtw]
     12c:	ldr	w1, [x0, #108]
     130:	add	w1, w1, #0x1
     134:	str	w1, [x0, #108]
     138:	b	108 <add_pair_to_block+0x108>
     13c:	ldrsw	x1, [x0, #108]
     140:	ldr	x2, [x0, #64]
     144:	strb	w8, [x2, x1]
     148:	ldr	w1, [x0, #108]
     14c:	add	w1, w1, #0x1
     150:	str	w1, [x0, #108]
     154:	ldr	x2, [x0, #64]
     158:	strb	w8, [x2, w1, sxtw]
     15c:	ldr	w1, [x0, #108]
     160:	add	w1, w1, #0x1
     164:	str	w1, [x0, #108]
     168:	ldr	x2, [x0, #64]
     16c:	strb	w8, [x2, w1, sxtw]
     170:	ldr	w1, [x0, #108]
     174:	add	w1, w1, #0x1
     178:	str	w1, [x0, #108]
     17c:	b	108 <add_pair_to_block+0x108>

0000000000000180 <default_bzfree>:
     180:	cbz	x1, 19c <default_bzfree+0x1c>
     184:	stp	x29, x30, [sp, #-16]!
     188:	mov	x29, sp
     18c:	mov	x0, x1
     190:	bl	0 <free>
     194:	ldp	x29, x30, [sp], #16
     198:	ret
     19c:	ret

00000000000001a0 <default_bzalloc>:
     1a0:	stp	x29, x30, [sp, #-16]!
     1a4:	mov	x29, sp
     1a8:	mul	w0, w1, w2
     1ac:	sxtw	x0, w0
     1b0:	bl	0 <malloc>
     1b4:	ldp	x29, x30, [sp], #16
     1b8:	ret

00000000000001bc <handle_compress>:
     1bc:	stp	x29, x30, [sp, #-80]!
     1c0:	mov	x29, sp
     1c4:	stp	x19, x20, [sp, #16]
     1c8:	stp	x21, x22, [sp, #32]
     1cc:	stp	x23, x24, [sp, #48]
     1d0:	stp	x25, x26, [sp, #64]
     1d4:	ldr	x19, [x0, #48]
     1d8:	mov	w23, #0x0                   	// #0
     1dc:	mov	w22, #0x0                   	// #0
     1e0:	mov	w20, #0x1                   	// #1
     1e4:	adrp	x21, 0 <BZ2_crc32Table>
     1e8:	add	x21, x21, #0x0
     1ec:	b	5d8 <handle_compress+0x41c>
     1f0:	mov	w3, #0x0                   	// #0
     1f4:	mov	w4, w20
     1f8:	ldr	x1, [x19]
     1fc:	ldr	w0, [x1, #32]
     200:	cbz	w0, 284 <handle_compress+0xc8>
     204:	ldr	w0, [x19, #120]
     208:	ldr	w2, [x19, #116]
     20c:	cmp	w0, w2
     210:	b.ge	5f0 <handle_compress+0x434>  // b.tcont
     214:	ldr	x1, [x1, #24]
     218:	ldr	x2, [x19, #80]
     21c:	ldrb	w0, [x2, w0, sxtw]
     220:	strb	w0, [x1]
     224:	ldr	w0, [x19, #120]
     228:	add	w0, w0, #0x1
     22c:	str	w0, [x19, #120]
     230:	ldr	x1, [x19]
     234:	ldr	w0, [x1, #32]
     238:	sub	w0, w0, #0x1
     23c:	str	w0, [x1, #32]
     240:	ldr	x1, [x19]
     244:	ldr	x0, [x1, #24]
     248:	add	x0, x0, #0x1
     24c:	str	x0, [x1, #24]
     250:	ldr	x1, [x19]
     254:	ldr	w0, [x1, #36]
     258:	add	w0, w0, #0x1
     25c:	str	w0, [x1, #36]
     260:	ldr	x0, [x19]
     264:	mov	w3, w4
     268:	ldr	w1, [x0, #36]
     26c:	cbnz	w1, 1f8 <handle_compress+0x3c>
     270:	ldr	w1, [x0, #40]
     274:	add	w1, w1, #0x1
     278:	str	w1, [x0, #40]
     27c:	mov	w3, w20
     280:	b	1f8 <handle_compress+0x3c>
     284:	orr	w23, w23, w3
     288:	ldr	w1, [x19, #120]
     28c:	ldr	w0, [x19, #116]
     290:	cmp	w1, w0
     294:	b.ge	5f4 <handle_compress+0x438>  // b.tcont
     298:	b	2bc <handle_compress+0x100>
     29c:	ldr	w0, [x19, #16]
     2a0:	cbnz	w0, 664 <handle_compress+0x4a8>
     2a4:	ldr	w0, [x19, #92]
     2a8:	cmp	w0, #0xff
     2ac:	b.hi	2bc <handle_compress+0x100>  // b.pmore
     2b0:	ldr	w0, [x19, #96]
     2b4:	cmp	w0, #0x0
     2b8:	b.gt	664 <handle_compress+0x4a8>
     2bc:	orr	w22, w22, w23
     2c0:	cmp	w22, #0x0
     2c4:	cset	w0, ne  // ne = any
     2c8:	ldp	x19, x20, [sp, #16]
     2cc:	ldp	x21, x22, [sp, #32]
     2d0:	ldp	x23, x24, [sp, #48]
     2d4:	ldp	x25, x26, [sp, #64]
     2d8:	ldp	x29, x30, [sp], #80
     2dc:	ret
     2e0:	mov	w3, #0x0                   	// #0
     2e4:	mov	w24, w20
     2e8:	mov	w25, #0x1                   	// #1
     2ec:	b	398 <handle_compress+0x1dc>
     2f0:	ldr	w3, [x19, #648]
     2f4:	and	w2, w0, #0xff
     2f8:	eor	w2, w2, w3, lsr #24
     2fc:	mov	w2, w2
     300:	ldr	w2, [x21, x2, lsl #2]
     304:	eor	w3, w2, w3, lsl #8
     308:	str	w3, [x19, #648]
     30c:	add	x2, x19, w0, uxtw
     310:	strb	w25, [x2, #128]
     314:	ldr	x2, [x19, #64]
     318:	strb	w0, [x2, w1, sxtw]
     31c:	ldr	w0, [x19, #108]
     320:	add	w0, w0, #0x1
     324:	str	w0, [x19, #108]
     328:	str	w26, [x19, #92]
     32c:	b	358 <handle_compress+0x19c>
     330:	ldr	w0, [x19, #96]
     334:	cmp	w0, #0xff
     338:	b.eq	348 <handle_compress+0x18c>  // b.none
     33c:	add	w0, w0, #0x1
     340:	str	w0, [x19, #96]
     344:	b	358 <handle_compress+0x19c>
     348:	mov	x0, x19
     34c:	bl	0 <add_pair_to_block>
     350:	str	w26, [x19, #92]
     354:	str	w20, [x19, #96]
     358:	ldr	x1, [x19]
     35c:	ldr	x0, [x1]
     360:	add	x0, x0, #0x1
     364:	str	x0, [x1]
     368:	ldr	x1, [x19]
     36c:	ldr	w0, [x1, #8]
     370:	sub	w0, w0, #0x1
     374:	str	w0, [x1, #8]
     378:	ldr	x1, [x19]
     37c:	ldr	w0, [x1, #12]
     380:	add	w0, w0, #0x1
     384:	str	w0, [x1, #12]
     388:	ldr	x0, [x19]
     38c:	mov	w3, w24
     390:	ldr	w1, [x0, #12]
     394:	cbz	w1, 3e0 <handle_compress+0x224>
     398:	ldr	w1, [x19, #108]
     39c:	ldr	w0, [x19, #112]
     3a0:	cmp	w1, w0
     3a4:	b.ge	5a4 <handle_compress+0x3e8>  // b.tcont
     3a8:	ldr	x0, [x19]
     3ac:	ldr	w2, [x0, #8]
     3b0:	cbz	w2, 544 <handle_compress+0x388>
     3b4:	ldr	x0, [x0]
     3b8:	ldrb	w26, [x0]
     3bc:	ldr	w0, [x19, #92]
     3c0:	cmp	w26, w0
     3c4:	b.eq	330 <handle_compress+0x174>  // b.none
     3c8:	ldr	w2, [x19, #96]
     3cc:	cmp	w2, #0x1
     3d0:	b.eq	2f0 <handle_compress+0x134>  // b.none
     3d4:	cmp	w0, #0xff
     3d8:	b.hi	350 <handle_compress+0x194>  // b.pmore
     3dc:	b	348 <handle_compress+0x18c>
     3e0:	ldr	w1, [x0, #16]
     3e4:	add	w1, w1, #0x1
     3e8:	str	w1, [x0, #16]
     3ec:	mov	w3, w20
     3f0:	b	2e8 <handle_compress+0x12c>
     3f4:	ldr	w3, [x19, #648]
     3f8:	and	w2, w0, #0xff
     3fc:	eor	w2, w2, w3, lsr #24
     400:	mov	w2, w2
     404:	ldr	w2, [x21, x2, lsl #2]
     408:	eor	w3, w2, w3, lsl #8
     40c:	str	w3, [x19, #648]
     410:	add	x2, x19, w0, uxtw
     414:	strb	w24, [x2, #128]
     418:	ldr	x2, [x19, #64]
     41c:	strb	w0, [x2, w1, sxtw]
     420:	ldr	w0, [x19, #108]
     424:	add	w0, w0, #0x1
     428:	str	w0, [x19, #108]
     42c:	str	w25, [x19, #92]
     430:	b	45c <handle_compress+0x2a0>
     434:	ldr	w0, [x19, #96]
     438:	cmp	w0, #0xff
     43c:	b.eq	44c <handle_compress+0x290>  // b.none
     440:	add	w0, w0, #0x1
     444:	str	w0, [x19, #96]
     448:	b	45c <handle_compress+0x2a0>
     44c:	mov	x0, x19
     450:	bl	0 <add_pair_to_block>
     454:	str	w25, [x19, #92]
     458:	str	w20, [x19, #96]
     45c:	ldr	x1, [x19]
     460:	ldr	x0, [x1]
     464:	add	x0, x0, #0x1
     468:	str	x0, [x1]
     46c:	ldr	x1, [x19]
     470:	ldr	w0, [x1, #8]
     474:	sub	w0, w0, #0x1
     478:	str	w0, [x1, #8]
     47c:	ldr	x1, [x19]
     480:	ldr	w0, [x1, #12]
     484:	add	w0, w0, #0x1
     488:	str	w0, [x1, #12]
     48c:	ldr	x0, [x19]
     490:	ldr	w1, [x0, #12]
     494:	cbnz	w1, 4a4 <handle_compress+0x2e8>
     498:	ldr	w1, [x0, #16]
     49c:	add	w1, w1, #0x1
     4a0:	str	w1, [x0, #16]
     4a4:	ldr	w0, [x19, #16]
     4a8:	sub	w0, w0, #0x1
     4ac:	str	w0, [x19, #16]
     4b0:	ldr	w1, [x19, #108]
     4b4:	mov	w3, w20
     4b8:	ldr	w0, [x19, #112]
     4bc:	cmp	w1, w0
     4c0:	b.ge	5a4 <handle_compress+0x3e8>  // b.tcont
     4c4:	ldr	x0, [x19]
     4c8:	ldr	w2, [x0, #8]
     4cc:	cbz	w2, 504 <handle_compress+0x348>
     4d0:	ldr	w2, [x19, #16]
     4d4:	cbz	w2, 560 <handle_compress+0x3a4>
     4d8:	ldr	x0, [x0]
     4dc:	ldrb	w25, [x0]
     4e0:	ldr	w0, [x19, #92]
     4e4:	cmp	w25, w0
     4e8:	b.eq	434 <handle_compress+0x278>  // b.none
     4ec:	ldr	w2, [x19, #96]
     4f0:	cmp	w2, #0x1
     4f4:	b.eq	3f4 <handle_compress+0x238>  // b.none
     4f8:	cmp	w0, #0xff
     4fc:	b.hi	454 <handle_compress+0x298>  // b.pmore
     500:	b	44c <handle_compress+0x290>
     504:	orr	w22, w22, w3
     508:	ldr	w0, [x19, #8]
     50c:	cmp	w0, #0x2
     510:	b.ne	5b4 <handle_compress+0x3f8>  // b.any
     514:	ldr	w1, [x19, #112]
     518:	ldr	w0, [x19, #108]
     51c:	cmp	w1, w0
     520:	b.gt	2bc <handle_compress+0x100>
     524:	mov	w1, #0x0                   	// #0
     528:	mov	x0, x19
     52c:	bl	0 <BZ2_compressBlock>
     530:	str	w20, [x19, #12]
     534:	b	5d8 <handle_compress+0x41c>
     538:	mov	x0, x19
     53c:	bl	0 <add_pair_to_block>
     540:	b	57c <handle_compress+0x3c0>
     544:	orr	w22, w22, w3
     548:	ldr	w0, [x19, #8]
     54c:	cmp	w0, #0x2
     550:	b.eq	2bc <handle_compress+0x100>  // b.none
     554:	ldr	w0, [x19, #16]
     558:	cbnz	w0, 5cc <handle_compress+0x410>
     55c:	b	570 <handle_compress+0x3b4>
     560:	orr	w22, w22, w3
     564:	ldr	w0, [x19, #8]
     568:	cmp	w0, #0x2
     56c:	b.eq	68c <handle_compress+0x4d0>  // b.none
     570:	ldr	w0, [x19, #92]
     574:	cmp	w0, #0xff
     578:	b.ls	538 <handle_compress+0x37c>  // b.plast
     57c:	mov	w0, #0x100                 	// #256
     580:	str	w0, [x19, #92]
     584:	str	wzr, [x19, #96]
     588:	ldr	w0, [x19, #8]
     58c:	cmp	w0, #0x4
     590:	cset	w1, eq  // eq = none
     594:	mov	x0, x19
     598:	bl	0 <BZ2_compressBlock>
     59c:	str	w20, [x19, #12]
     5a0:	b	5d8 <handle_compress+0x41c>
     5a4:	orr	w22, w22, w3
     5a8:	ldr	w0, [x19, #8]
     5ac:	cmp	w0, #0x2
     5b0:	b.eq	524 <handle_compress+0x368>  // b.none
     5b4:	ldr	w0, [x19, #16]
     5b8:	cbz	w0, 570 <handle_compress+0x3b4>
     5bc:	ldr	w1, [x19, #108]
     5c0:	ldr	w0, [x19, #112]
     5c4:	cmp	w1, w0
     5c8:	b.ge	524 <handle_compress+0x368>  // b.tcont
     5cc:	ldr	x0, [x19]
     5d0:	ldr	w0, [x0, #8]
     5d4:	cbz	w0, 2bc <handle_compress+0x100>
     5d8:	ldr	w0, [x19, #12]
     5dc:	cmp	w0, #0x1
     5e0:	b.eq	1f0 <handle_compress+0x34>  // b.none
     5e4:	cmp	w0, #0x2
     5e8:	b.ne	5d8 <handle_compress+0x41c>  // b.any
     5ec:	b	664 <handle_compress+0x4a8>
     5f0:	orr	w23, w23, w3
     5f4:	ldr	w2, [x19, #8]
     5f8:	cmp	w2, #0x4
     5fc:	b.ne	620 <handle_compress+0x464>  // b.any
     600:	ldr	w0, [x19, #16]
     604:	cbnz	w0, 620 <handle_compress+0x464>
     608:	ldr	w0, [x19, #92]
     60c:	cmp	w0, #0xff
     610:	b.hi	2bc <handle_compress+0x100>  // b.pmore
     614:	ldr	w0, [x19, #96]
     618:	cmp	w0, #0x0
     61c:	b.le	2bc <handle_compress+0x100>
     620:	str	wzr, [x19, #108]
     624:	str	wzr, [x19, #116]
     628:	str	wzr, [x19, #120]
     62c:	mov	w0, #0xffffffff            	// #-1
     630:	str	w0, [x19, #648]
     634:	add	x0, x19, #0x80
     638:	add	x1, x19, #0x180
     63c:	strb	wzr, [x0], #1
     640:	cmp	x0, x1
     644:	b.ne	63c <handle_compress+0x480>  // b.any
     648:	ldr	w0, [x19, #660]
     64c:	add	w0, w0, #0x1
     650:	str	w0, [x19, #660]
     654:	mov	w0, #0x2                   	// #2
     658:	str	w0, [x19, #12]
     65c:	cmp	w2, #0x3
     660:	b.eq	29c <handle_compress+0xe0>  // b.none
     664:	ldr	w0, [x19, #8]
     668:	cmp	w0, #0x2
     66c:	b.eq	2e0 <handle_compress+0x124>  // b.none
     670:	ldr	w1, [x19, #108]
     674:	ldr	w0, [x19, #112]
     678:	cmp	w1, w0
     67c:	b.ge	6a0 <handle_compress+0x4e4>  // b.tcont
     680:	mov	w3, #0x0                   	// #0
     684:	mov	w24, #0x1                   	// #1
     688:	b	4c4 <handle_compress+0x308>
     68c:	ldr	w1, [x19, #108]
     690:	ldr	w0, [x19, #112]
     694:	cmp	w1, w0
     698:	b.lt	5d8 <handle_compress+0x41c>  // b.tstop
     69c:	b	524 <handle_compress+0x368>
     6a0:	ldr	w0, [x19, #16]
     6a4:	cbnz	w0, 524 <handle_compress+0x368>
     6a8:	b	570 <handle_compress+0x3b4>

00000000000006ac <BZ2_bz__AssertH__fail>:
     6ac:	stp	x29, x30, [sp, #-32]!
     6b0:	mov	x29, sp
     6b4:	str	x19, [sp, #16]
     6b8:	mov	w19, w0
     6bc:	adrp	x3, 0 <add_pair_to_block>
     6c0:	add	x3, x3, #0x0
     6c4:	mov	w2, w0
     6c8:	adrp	x1, 0 <add_pair_to_block>
     6cc:	add	x1, x1, #0x0
     6d0:	adrp	x0, 0 <stderr>
     6d4:	ldr	x0, [x0]
     6d8:	bl	0 <fprintf>
     6dc:	cmp	w19, #0x3ef
     6e0:	b.eq	6ec <BZ2_bz__AssertH__fail+0x40>  // b.none
     6e4:	mov	w0, #0x3                   	// #3
     6e8:	bl	0 <exit>
     6ec:	adrp	x0, 0 <stderr>
     6f0:	ldr	x3, [x0]
     6f4:	mov	x2, #0x420                 	// #1056
     6f8:	mov	x1, #0x1                   	// #1
     6fc:	adrp	x0, 0 <add_pair_to_block>
     700:	add	x0, x0, #0x0
     704:	bl	0 <fwrite>
     708:	b	6e4 <BZ2_bz__AssertH__fail+0x38>

000000000000070c <BZ2_bzCompressInit>:
     70c:	stp	x29, x30, [sp, #-64]!
     710:	mov	x29, sp
     714:	stp	x19, x20, [sp, #16]
     718:	mov	x20, x0
     71c:	sub	w0, w1, #0x1
     720:	cmp	x20, #0x0
     724:	ccmp	w0, #0x8, #0x2, ne  // ne = any
     728:	b.hi	914 <BZ2_bzCompressInit+0x208>  // b.pmore
     72c:	stp	x21, x22, [sp, #32]
     730:	stp	x23, x24, [sp, #48]
     734:	mov	w23, w1
     738:	mov	w24, w2
     73c:	cmp	w3, #0xfa
     740:	b.hi	91c <BZ2_bzCompressInit+0x210>  // b.pmore
     744:	cmp	w3, #0x0
     748:	mov	w0, #0x1e                  	// #30
     74c:	csel	w21, w3, w0, ne  // ne = any
     750:	ldr	x0, [x20, #56]
     754:	cbz	x0, 8a0 <BZ2_bzCompressInit+0x194>
     758:	ldr	x0, [x20, #64]
     75c:	cbz	x0, 8b0 <BZ2_bzCompressInit+0x1a4>
     760:	ldr	x3, [x20, #56]
     764:	mov	w2, #0x1                   	// #1
     768:	mov	w1, #0xd9d8                	// #55768
     76c:	ldr	x0, [x20, #72]
     770:	blr	x3
     774:	mov	x19, x0
     778:	cbz	x0, 92c <BZ2_bzCompressInit+0x220>
     77c:	str	x20, [x0]
     780:	str	xzr, [x0, #24]
     784:	str	xzr, [x0, #32]
     788:	str	xzr, [x0, #40]
     78c:	mov	w22, #0x86a0                	// #34464
     790:	movk	w22, #0x1, lsl #16
     794:	mul	w22, w23, w22
     798:	ldr	x3, [x20, #56]
     79c:	mov	w2, #0x1                   	// #1
     7a0:	lsl	w1, w22, #2
     7a4:	ldr	x0, [x20, #72]
     7a8:	blr	x3
     7ac:	str	x0, [x19, #24]
     7b0:	add	w1, w22, #0x22
     7b4:	ldr	x3, [x20, #56]
     7b8:	mov	w2, #0x1                   	// #1
     7bc:	lsl	w1, w1, #2
     7c0:	ldr	x0, [x20, #72]
     7c4:	blr	x3
     7c8:	str	x0, [x19, #32]
     7cc:	ldr	x3, [x20, #56]
     7d0:	mov	w2, #0x1                   	// #1
     7d4:	mov	w1, #0x40004               	// #262148
     7d8:	ldr	x0, [x20, #72]
     7dc:	blr	x3
     7e0:	str	x0, [x19, #40]
     7e4:	ldr	x1, [x19, #24]
     7e8:	cbz	x1, 8cc <BZ2_bzCompressInit+0x1c0>
     7ec:	ldr	x2, [x19, #32]
     7f0:	cmp	x0, #0x0
     7f4:	ccmp	x2, #0x0, #0x4, ne  // ne = any
     7f8:	b.eq	8c0 <BZ2_bzCompressInit+0x1b4>  // b.none
     7fc:	str	wzr, [x19, #660]
     800:	mov	w0, #0x2                   	// #2
     804:	str	w0, [x19, #12]
     808:	str	w0, [x19, #8]
     80c:	str	wzr, [x19, #652]
     810:	str	w23, [x19, #664]
     814:	sub	w22, w22, #0x13
     818:	str	w22, [x19, #112]
     81c:	str	w24, [x19, #656]
     820:	str	w21, [x19, #88]
     824:	str	x2, [x19, #64]
     828:	str	x1, [x19, #72]
     82c:	str	xzr, [x19, #80]
     830:	str	x1, [x19, #56]
     834:	str	x19, [x20, #48]
     838:	str	wzr, [x20, #12]
     83c:	str	wzr, [x20, #16]
     840:	str	wzr, [x20, #36]
     844:	str	wzr, [x20, #40]
     848:	mov	w0, #0x100                 	// #256
     84c:	str	w0, [x19, #92]
     850:	str	wzr, [x19, #96]
     854:	str	wzr, [x19, #108]
     858:	str	wzr, [x19, #116]
     85c:	str	wzr, [x19, #120]
     860:	mov	w0, #0xffffffff            	// #-1
     864:	str	w0, [x19, #648]
     868:	add	x0, x19, #0x80
     86c:	add	x1, x19, #0x180
     870:	strb	wzr, [x0], #1
     874:	cmp	x0, x1
     878:	b.ne	870 <BZ2_bzCompressInit+0x164>  // b.any
     87c:	ldr	w0, [x19, #660]
     880:	add	w0, w0, #0x1
     884:	str	w0, [x19, #660]
     888:	mov	w0, #0x0                   	// #0
     88c:	ldp	x21, x22, [sp, #32]
     890:	ldp	x23, x24, [sp, #48]
     894:	ldp	x19, x20, [sp, #16]
     898:	ldp	x29, x30, [sp], #64
     89c:	ret
     8a0:	adrp	x0, 0 <add_pair_to_block>
     8a4:	add	x0, x0, #0x0
     8a8:	str	x0, [x20, #56]
     8ac:	b	758 <BZ2_bzCompressInit+0x4c>
     8b0:	adrp	x0, 0 <add_pair_to_block>
     8b4:	add	x0, x0, #0x0
     8b8:	str	x0, [x20, #64]
     8bc:	b	760 <BZ2_bzCompressInit+0x54>
     8c0:	ldr	x2, [x20, #64]
     8c4:	ldr	x0, [x20, #72]
     8c8:	blr	x2
     8cc:	ldr	x1, [x19, #32]
     8d0:	cbz	x1, 8e0 <BZ2_bzCompressInit+0x1d4>
     8d4:	ldr	x2, [x20, #64]
     8d8:	ldr	x0, [x20, #72]
     8dc:	blr	x2
     8e0:	ldr	x1, [x19, #40]
     8e4:	cbz	x1, 8f4 <BZ2_bzCompressInit+0x1e8>
     8e8:	ldr	x2, [x20, #64]
     8ec:	ldr	x0, [x20, #72]
     8f0:	blr	x2
     8f4:	ldr	x2, [x20, #64]
     8f8:	mov	x1, x19
     8fc:	ldr	x0, [x20, #72]
     900:	blr	x2
     904:	mov	w0, #0xfffffffd            	// #-3
     908:	ldp	x21, x22, [sp, #32]
     90c:	ldp	x23, x24, [sp, #48]
     910:	b	894 <BZ2_bzCompressInit+0x188>
     914:	mov	w0, #0xfffffffe            	// #-2
     918:	b	894 <BZ2_bzCompressInit+0x188>
     91c:	mov	w0, #0xfffffffe            	// #-2
     920:	ldp	x21, x22, [sp, #32]
     924:	ldp	x23, x24, [sp, #48]
     928:	b	894 <BZ2_bzCompressInit+0x188>
     92c:	mov	w0, #0xfffffffd            	// #-3
     930:	ldp	x21, x22, [sp, #32]
     934:	ldp	x23, x24, [sp, #48]
     938:	b	894 <BZ2_bzCompressInit+0x188>

000000000000093c <BZ2_bzCompress>:
     93c:	stp	x29, x30, [sp, #-48]!
     940:	mov	x29, sp
     944:	stp	x19, x20, [sp, #16]
     948:	cbz	x0, a94 <BZ2_bzCompress+0x158>
     94c:	str	x21, [sp, #32]
     950:	mov	w21, w1
     954:	ldr	x20, [x0, #48]
     958:	cbz	x20, a9c <BZ2_bzCompress+0x160>
     95c:	ldr	x1, [x20]
     960:	cmp	x1, x0
     964:	b.ne	aa8 <BZ2_bzCompress+0x16c>  // b.any
     968:	mov	w1, #0x4                   	// #4
     96c:	mov	w2, #0x3                   	// #3
     970:	ldr	w19, [x20, #8]
     974:	cmp	w19, #0x3
     978:	b.eq	a4c <BZ2_bzCompress+0x110>  // b.none
     97c:	b.gt	9c0 <BZ2_bzCompress+0x84>
     980:	cmp	w19, #0x1
     984:	b.eq	ab4 <BZ2_bzCompress+0x178>  // b.none
     988:	cmp	w19, #0x2
     98c:	b.ne	9b4 <BZ2_bzCompress+0x78>  // b.any
     990:	cbz	w21, a24 <BZ2_bzCompress+0xe8>
     994:	cmp	w21, #0x1
     998:	b.eq	a3c <BZ2_bzCompress+0x100>  // b.none
     99c:	cmp	w21, #0x2
     9a0:	b.ne	acc <BZ2_bzCompress+0x190>  // b.any
     9a4:	ldr	w3, [x0, #8]
     9a8:	str	w3, [x20, #16]
     9ac:	str	w1, [x20, #8]
     9b0:	b	970 <BZ2_bzCompress+0x34>
     9b4:	mov	w19, #0x0                   	// #0
     9b8:	ldr	x21, [sp, #32]
     9bc:	b	abc <BZ2_bzCompress+0x180>
     9c0:	cmp	w19, #0x4
     9c4:	b.ne	a18 <BZ2_bzCompress+0xdc>  // b.any
     9c8:	cmp	w21, #0x2
     9cc:	b.ne	af0 <BZ2_bzCompress+0x1b4>  // b.any
     9d0:	ldr	w2, [x20, #16]
     9d4:	ldr	w1, [x0, #8]
     9d8:	cmp	w2, w1
     9dc:	b.ne	afc <BZ2_bzCompress+0x1c0>  // b.any
     9e0:	bl	1bc <handle_compress>
     9e4:	and	w0, w0, #0xff
     9e8:	cbz	w0, b08 <BZ2_bzCompress+0x1cc>
     9ec:	ldr	w0, [x20, #16]
     9f0:	cbnz	w0, b14 <BZ2_bzCompress+0x1d8>
     9f4:	ldr	w0, [x20, #92]
     9f8:	cmp	w0, #0xff
     9fc:	b.hi	b5c <BZ2_bzCompress+0x220>  // b.pmore
     a00:	ldr	w0, [x20, #96]
     a04:	cmp	w0, #0x0
     a08:	b.le	b5c <BZ2_bzCompress+0x220>
     a0c:	mov	w19, #0x3                   	// #3
     a10:	ldr	x21, [sp, #32]
     a14:	b	abc <BZ2_bzCompress+0x180>
     a18:	mov	w19, #0x0                   	// #0
     a1c:	ldr	x21, [sp, #32]
     a20:	b	abc <BZ2_bzCompress+0x180>
     a24:	bl	1bc <handle_compress>
     a28:	ands	w0, w0, #0xff
     a2c:	mov	w19, #0xfffffffe            	// #-2
     a30:	cinv	w19, w19, ne  // ne = any
     a34:	ldr	x21, [sp, #32]
     a38:	b	abc <BZ2_bzCompress+0x180>
     a3c:	ldr	w3, [x0, #8]
     a40:	str	w3, [x20, #16]
     a44:	str	w2, [x20, #8]
     a48:	b	970 <BZ2_bzCompress+0x34>
     a4c:	cmp	w21, #0x1
     a50:	b.ne	ad8 <BZ2_bzCompress+0x19c>  // b.any
     a54:	ldr	w2, [x20, #16]
     a58:	ldr	w1, [x0, #8]
     a5c:	cmp	w2, w1
     a60:	b.ne	ae4 <BZ2_bzCompress+0x1a8>  // b.any
     a64:	bl	1bc <handle_compress>
     a68:	ldr	w0, [x20, #16]
     a6c:	mov	w19, #0x2                   	// #2
     a70:	cbnz	w0, b7c <BZ2_bzCompress+0x240>
     a74:	ldr	w0, [x20, #92]
     a78:	cmp	w0, #0xff
     a7c:	b.hi	b2c <BZ2_bzCompress+0x1f0>  // b.pmore
     a80:	ldr	w0, [x20, #96]
     a84:	cmp	w0, #0x0
     a88:	b.le	b2c <BZ2_bzCompress+0x1f0>
     a8c:	ldr	x21, [sp, #32]
     a90:	b	abc <BZ2_bzCompress+0x180>
     a94:	mov	w19, #0xfffffffe            	// #-2
     a98:	b	abc <BZ2_bzCompress+0x180>
     a9c:	mov	w19, #0xfffffffe            	// #-2
     aa0:	ldr	x21, [sp, #32]
     aa4:	b	abc <BZ2_bzCompress+0x180>
     aa8:	mov	w19, #0xfffffffe            	// #-2
     aac:	ldr	x21, [sp, #32]
     ab0:	b	abc <BZ2_bzCompress+0x180>
     ab4:	mov	w19, #0xffffffff            	// #-1
     ab8:	ldr	x21, [sp, #32]
     abc:	mov	w0, w19
     ac0:	ldp	x19, x20, [sp, #16]
     ac4:	ldp	x29, x30, [sp], #48
     ac8:	ret
     acc:	mov	w19, #0xfffffffe            	// #-2
     ad0:	ldr	x21, [sp, #32]
     ad4:	b	abc <BZ2_bzCompress+0x180>
     ad8:	mov	w19, #0xffffffff            	// #-1
     adc:	ldr	x21, [sp, #32]
     ae0:	b	abc <BZ2_bzCompress+0x180>
     ae4:	mov	w19, #0xffffffff            	// #-1
     ae8:	ldr	x21, [sp, #32]
     aec:	b	abc <BZ2_bzCompress+0x180>
     af0:	mov	w19, #0xffffffff            	// #-1
     af4:	ldr	x21, [sp, #32]
     af8:	b	abc <BZ2_bzCompress+0x180>
     afc:	mov	w19, #0xffffffff            	// #-1
     b00:	ldr	x21, [sp, #32]
     b04:	b	abc <BZ2_bzCompress+0x180>
     b08:	mov	w19, #0xffffffff            	// #-1
     b0c:	ldr	x21, [sp, #32]
     b10:	b	abc <BZ2_bzCompress+0x180>
     b14:	mov	w19, #0x3                   	// #3
     b18:	ldr	x21, [sp, #32]
     b1c:	b	abc <BZ2_bzCompress+0x180>
     b20:	mov	w19, #0x3                   	// #3
     b24:	ldr	x21, [sp, #32]
     b28:	b	abc <BZ2_bzCompress+0x180>
     b2c:	ldr	w1, [x20, #120]
     b30:	ldr	w0, [x20, #116]
     b34:	mov	w19, #0x2                   	// #2
     b38:	cmp	w1, w0
     b3c:	b.lt	b54 <BZ2_bzCompress+0x218>  // b.tstop
     b40:	mov	w0, #0x2                   	// #2
     b44:	str	w0, [x20, #8]
     b48:	mov	w19, w21
     b4c:	ldr	x21, [sp, #32]
     b50:	b	abc <BZ2_bzCompress+0x180>
     b54:	ldr	x21, [sp, #32]
     b58:	b	abc <BZ2_bzCompress+0x180>
     b5c:	ldr	w1, [x20, #120]
     b60:	ldr	w0, [x20, #116]
     b64:	cmp	w1, w0
     b68:	b.lt	b20 <BZ2_bzCompress+0x1e4>  // b.tstop
     b6c:	mov	w0, #0x1                   	// #1
     b70:	str	w0, [x20, #8]
     b74:	ldr	x21, [sp, #32]
     b78:	b	abc <BZ2_bzCompress+0x180>
     b7c:	ldr	x21, [sp, #32]
     b80:	b	abc <BZ2_bzCompress+0x180>

0000000000000b84 <BZ2_bzCompressEnd>:
     b84:	cbz	x0, c0c <BZ2_bzCompressEnd+0x88>
     b88:	stp	x29, x30, [sp, #-32]!
     b8c:	mov	x29, sp
     b90:	stp	x19, x20, [sp, #16]
     b94:	mov	x19, x0
     b98:	ldr	x20, [x0, #48]
     b9c:	cbz	x20, c14 <BZ2_bzCompressEnd+0x90>
     ba0:	ldr	x0, [x20]
     ba4:	cmp	x0, x19
     ba8:	b.ne	c1c <BZ2_bzCompressEnd+0x98>  // b.any
     bac:	ldr	x1, [x20, #24]
     bb0:	cbz	x1, bc0 <BZ2_bzCompressEnd+0x3c>
     bb4:	ldr	x2, [x19, #64]
     bb8:	ldr	x0, [x19, #72]
     bbc:	blr	x2
     bc0:	ldr	x1, [x20, #32]
     bc4:	cbz	x1, bd4 <BZ2_bzCompressEnd+0x50>
     bc8:	ldr	x2, [x19, #64]
     bcc:	ldr	x0, [x19, #72]
     bd0:	blr	x2
     bd4:	ldr	x1, [x20, #40]
     bd8:	cbz	x1, be8 <BZ2_bzCompressEnd+0x64>
     bdc:	ldr	x2, [x19, #64]
     be0:	ldr	x0, [x19, #72]
     be4:	blr	x2
     be8:	ldr	x2, [x19, #64]
     bec:	ldr	x1, [x19, #48]
     bf0:	ldr	x0, [x19, #72]
     bf4:	blr	x2
     bf8:	str	xzr, [x19, #48]
     bfc:	mov	w0, #0x0                   	// #0
     c00:	ldp	x19, x20, [sp, #16]
     c04:	ldp	x29, x30, [sp], #32
     c08:	ret
     c0c:	mov	w0, #0xfffffffe            	// #-2
     c10:	ret
     c14:	mov	w0, #0xfffffffe            	// #-2
     c18:	b	c00 <BZ2_bzCompressEnd+0x7c>
     c1c:	mov	w0, #0xfffffffe            	// #-2
     c20:	b	c00 <BZ2_bzCompressEnd+0x7c>

0000000000000c24 <BZ2_bzDecompressInit>:
     c24:	cbz	x0, cf4 <BZ2_bzDecompressInit+0xd0>
     c28:	stp	x29, x30, [sp, #-48]!
     c2c:	mov	x29, sp
     c30:	stp	x19, x20, [sp, #16]
     c34:	str	x21, [sp, #32]
     c38:	mov	x19, x0
     c3c:	mov	w21, w1
     c40:	mov	w20, w2
     c44:	cmp	w2, #0x1
     c48:	b.hi	cfc <BZ2_bzDecompressInit+0xd8>  // b.pmore
     c4c:	cmp	w1, #0x4
     c50:	b.hi	d04 <BZ2_bzDecompressInit+0xe0>  // b.pmore
     c54:	ldr	x0, [x0, #56]
     c58:	cbz	x0, cd4 <BZ2_bzDecompressInit+0xb0>
     c5c:	ldr	x0, [x19, #64]
     c60:	cbz	x0, ce4 <BZ2_bzDecompressInit+0xc0>
     c64:	ldr	x3, [x19, #56]
     c68:	mov	w2, #0x1                   	// #1
     c6c:	mov	w1, #0xfa90                	// #64144
     c70:	ldr	x0, [x19, #72]
     c74:	blr	x3
     c78:	cbz	x0, d0c <BZ2_bzDecompressInit+0xe8>
     c7c:	str	x19, [x0]
     c80:	str	x0, [x19, #48]
     c84:	mov	w1, #0xa                   	// #10
     c88:	str	w1, [x0, #8]
     c8c:	str	wzr, [x0, #36]
     c90:	str	wzr, [x0, #32]
     c94:	str	wzr, [x0, #3188]
     c98:	str	wzr, [x19, #12]
     c9c:	str	wzr, [x19, #16]
     ca0:	str	wzr, [x19, #36]
     ca4:	str	wzr, [x19, #40]
     ca8:	strb	w20, [x0, #44]
     cac:	str	xzr, [x0, #3168]
     cb0:	str	xzr, [x0, #3160]
     cb4:	str	xzr, [x0, #3152]
     cb8:	str	wzr, [x0, #48]
     cbc:	str	w21, [x0, #52]
     cc0:	mov	w0, #0x0                   	// #0
     cc4:	ldp	x19, x20, [sp, #16]
     cc8:	ldr	x21, [sp, #32]
     ccc:	ldp	x29, x30, [sp], #48
     cd0:	ret
     cd4:	adrp	x0, 0 <add_pair_to_block>
     cd8:	add	x0, x0, #0x0
     cdc:	str	x0, [x19, #56]
     ce0:	b	c5c <BZ2_bzDecompressInit+0x38>
     ce4:	adrp	x0, 0 <add_pair_to_block>
     ce8:	add	x0, x0, #0x0
     cec:	str	x0, [x19, #64]
     cf0:	b	c64 <BZ2_bzDecompressInit+0x40>
     cf4:	mov	w0, #0xfffffffe            	// #-2
     cf8:	ret
     cfc:	mov	w0, #0xfffffffe            	// #-2
     d00:	b	cc4 <BZ2_bzDecompressInit+0xa0>
     d04:	mov	w0, #0xfffffffe            	// #-2
     d08:	b	cc4 <BZ2_bzDecompressInit+0xa0>
     d0c:	mov	w0, #0xfffffffd            	// #-3
     d10:	b	cc4 <BZ2_bzDecompressInit+0xa0>

0000000000000d14 <BZ2_indexIntoF>:
     d14:	mov	w5, w0
     d18:	mov	w3, #0x100                 	// #256
     d1c:	mov	w0, #0x0                   	// #0
     d20:	add	w2, w0, w3
     d24:	asr	w2, w2, #1
     d28:	ldr	w4, [x1, w2, sxtw #2]
     d2c:	cmp	w4, w5
     d30:	csel	w3, w3, w2, le
     d34:	csel	w0, w2, w0, le
     d38:	sub	w2, w3, w0
     d3c:	cmp	w2, #0x1
     d40:	b.ne	d20 <BZ2_indexIntoF+0xc>  // b.any
     d44:	ret

0000000000000d48 <BZ2_bzDecompress>:
     d48:	stp	x29, x30, [sp, #-48]!
     d4c:	mov	x29, sp
     d50:	stp	x19, x20, [sp, #16]
     d54:	cbz	x0, 1b9c <BZ2_bzDecompress+0xe54>
     d58:	ldr	x19, [x0, #48]
     d5c:	cbz	x19, 1ba4 <BZ2_bzDecompress+0xe5c>
     d60:	ldr	x1, [x19]
     d64:	cmp	x1, x0
     d68:	b.ne	1bac <BZ2_bzDecompress+0xe64>  // b.any
     d6c:	stp	x21, x22, [sp, #32]
     d70:	mov	w22, #0x86a0                	// #34464
     d74:	movk	w22, #0x1, lsl #16
     d78:	adrp	x21, 0 <BZ2_crc32Table>
     d7c:	add	x21, x21, #0x0
     d80:	ldr	w0, [x19, #8]
     d84:	b	1b10 <BZ2_bzDecompress+0xdc8>
     d88:	ldr	x0, [x19]
     d8c:	ldr	w1, [x0, #32]
     d90:	cbz	w1, 1a48 <BZ2_bzDecompress+0xd00>
     d94:	add	x5, x19, #0xc, lsl #12
     d98:	mov	w6, #0x1                   	// #1
     d9c:	add	x4, x19, #0x448
     da0:	mov	w8, #0x2                   	// #2
     da4:	mov	w9, #0x3                   	// #3
     da8:	adrp	x7, 0 <BZ2_rNums>
     dac:	add	x7, x7, #0x0
     db0:	b	ea8 <BZ2_bzDecompress+0x160>
     db4:	ldr	w11, [x19, #1092]
     db8:	ldr	w15, [x5, #14928]
     dbc:	add	w13, w15, #0x1
     dc0:	cmp	w11, w13
     dc4:	b.eq	1a60 <BZ2_bzDecompress+0xd18>  // b.none
     dc8:	b.gt	1be4 <BZ2_bzDecompress+0xe9c>
     dcc:	str	w6, [x19, #16]
     dd0:	ldr	w18, [x19, #64]
     dd4:	strb	w18, [x19, #12]
     dd8:	ldr	w14, [x19, #60]
     ddc:	ldr	w12, [x19, #40]
     de0:	mul	w12, w12, w22
     de4:	cmp	w14, w12
     de8:	b.cs	1be4 <BZ2_bzDecompress+0xe9c>  // b.hs, b.nlast
     dec:	mov	w10, w14
     df0:	mov	w1, w20
     df4:	mov	w2, #0x100                 	// #256
     df8:	add	w0, w2, w1
     dfc:	asr	w0, w0, #1
     e00:	ldr	w3, [x4, w0, sxtw #2]
     e04:	cmp	w10, w3
     e08:	csel	w2, w2, w0, ge  // ge = tcont
     e0c:	csel	w1, w0, w1, ge  // ge = tcont
     e10:	sub	w0, w2, w1
     e14:	cmp	w0, #0x1
     e18:	b.ne	df8 <BZ2_bzDecompress+0xb0>  // b.any
     e1c:	ldr	x16, [x19, #3160]
     e20:	ldr	x17, [x19, #3168]
     e24:	lsr	w0, w14, #1
     e28:	ldrb	w0, [x17, w0, uxtw]
     e2c:	ubfiz	w2, w14, #2, #1
     e30:	lsr	w0, w0, w2
     e34:	ubfiz	w0, w0, #16, #4
     e38:	ldrh	w14, [x16, w14, uxtw #1]
     e3c:	orr	w14, w0, w14
     e40:	str	w14, [x19, #60]
     e44:	ldr	w0, [x19, #24]
     e48:	cbnz	w0, e64 <BZ2_bzDecompress+0x11c>
     e4c:	ldr	w0, [x19, #28]
     e50:	ldr	w2, [x7, w0, sxtw #2]
     e54:	str	w2, [x19, #24]
     e58:	cmp	w0, #0x1ff
     e5c:	csinc	w0, wzr, w0, eq  // eq = none
     e60:	str	w0, [x19, #28]
     e64:	ldr	w30, [x19, #24]
     e68:	sub	w30, w30, #0x1
     e6c:	str	w30, [x19, #24]
     e70:	cmp	w30, #0x1
     e74:	cset	w2, eq  // eq = none
     e78:	eor	w1, w2, w1
     e7c:	and	w1, w1, #0xff
     e80:	add	w0, w11, #0x1
     e84:	str	w0, [x19, #1092]
     e88:	cmp	w11, w15
     e8c:	b.eq	e9c <BZ2_bzDecompress+0x154>  // b.none
     e90:	cmp	w18, w1
     e94:	b.eq	f2c <BZ2_bzDecompress+0x1e4>  // b.none
     e98:	str	w1, [x19, #64]
     e9c:	ldr	x0, [x19]
     ea0:	ldr	w1, [x0, #32]
     ea4:	cbz	w1, 1a48 <BZ2_bzDecompress+0xd00>
     ea8:	ldr	w20, [x19, #16]
     eac:	cbz	w20, db4 <BZ2_bzDecompress+0x6c>
     eb0:	ldr	x1, [x0, #24]
     eb4:	ldrb	w0, [x19, #12]
     eb8:	strb	w0, [x1]
     ebc:	ldr	w1, [x19, #3184]
     ec0:	eor	w0, w0, w1, lsr #24
     ec4:	mov	w0, w0
     ec8:	ldr	w0, [x21, x0, lsl #2]
     ecc:	eor	w1, w0, w1, lsl #8
     ed0:	str	w1, [x19, #3184]
     ed4:	ldr	w0, [x19, #16]
     ed8:	sub	w0, w0, #0x1
     edc:	str	w0, [x19, #16]
     ee0:	ldr	x1, [x19]
     ee4:	ldr	x0, [x1, #24]
     ee8:	add	x0, x0, #0x1
     eec:	str	x0, [x1, #24]
     ef0:	ldr	x1, [x19]
     ef4:	ldr	w0, [x1, #32]
     ef8:	sub	w0, w0, #0x1
     efc:	str	w0, [x1, #32]
     f00:	ldr	x1, [x19]
     f04:	ldr	w0, [x1, #36]
     f08:	add	w0, w0, #0x1
     f0c:	str	w0, [x1, #36]
     f10:	ldr	x0, [x19]
     f14:	ldr	w1, [x0, #36]
     f18:	cbnz	w1, e9c <BZ2_bzDecompress+0x154>
     f1c:	ldr	w1, [x0, #40]
     f20:	add	w1, w1, #0x1
     f24:	str	w1, [x0, #40]
     f28:	b	e9c <BZ2_bzDecompress+0x154>
     f2c:	str	w8, [x19, #16]
     f30:	cmp	w12, w14
     f34:	b.ls	1be4 <BZ2_bzDecompress+0xe9c>  // b.plast
     f38:	mov	w10, w14
     f3c:	mov	w15, w20
     f40:	mov	w2, #0x100                 	// #256
     f44:	add	w0, w15, w2
     f48:	asr	w0, w0, #1
     f4c:	ldr	w3, [x4, w0, sxtw #2]
     f50:	cmp	w10, w3
     f54:	csel	w2, w2, w0, ge  // ge = tcont
     f58:	csel	w15, w0, w15, ge  // ge = tcont
     f5c:	sub	w3, w2, w15
     f60:	cmp	w3, #0x1
     f64:	b.ne	f44 <BZ2_bzDecompress+0x1fc>  // b.any
     f68:	lsr	w0, w14, #1
     f6c:	ldrb	w2, [x17, w0, uxtw]
     f70:	ubfiz	w0, w14, #2, #1
     f74:	lsr	w2, w2, w0
     f78:	ubfiz	w2, w2, #16, #4
     f7c:	mov	w0, w14
     f80:	ldrh	w14, [x16, x0, lsl #1]
     f84:	orr	w14, w2, w14
     f88:	str	w14, [x19, #60]
     f8c:	cbnz	w30, fa8 <BZ2_bzDecompress+0x260>
     f90:	ldr	w0, [x19, #28]
     f94:	ldr	w2, [x7, w0, sxtw #2]
     f98:	str	w2, [x19, #24]
     f9c:	cmp	w0, #0x1ff
     fa0:	csinc	w0, wzr, w0, eq  // eq = none
     fa4:	str	w0, [x19, #28]
     fa8:	ldr	w18, [x19, #24]
     fac:	sub	w18, w18, #0x1
     fb0:	str	w18, [x19, #24]
     fb4:	cmp	w18, #0x1
     fb8:	cset	w0, eq  // eq = none
     fbc:	eor	w15, w0, w15
     fc0:	and	w15, w15, #0xff
     fc4:	add	w0, w11, #0x2
     fc8:	str	w0, [x19, #1092]
     fcc:	cmp	w13, w0
     fd0:	b.eq	e9c <BZ2_bzDecompress+0x154>  // b.none
     fd4:	cmp	w1, w15
     fd8:	b.eq	ff4 <BZ2_bzDecompress+0x2ac>  // b.none
     fdc:	str	w15, [x19, #64]
     fe0:	ldr	x0, [x19]
     fe4:	ldr	w1, [x0, #32]
     fe8:	cbnz	w1, ea8 <BZ2_bzDecompress+0x160>
     fec:	ldp	x21, x22, [sp, #32]
     ff0:	b	1bbc <BZ2_bzDecompress+0xe74>
     ff4:	str	w9, [x19, #16]
     ff8:	cmp	w12, w14
     ffc:	b.ls	1be4 <BZ2_bzDecompress+0xe9c>  // b.plast
    1000:	mov	w10, w14
    1004:	mov	w15, w20
    1008:	mov	w2, #0x100                 	// #256
    100c:	add	w0, w15, w2
    1010:	asr	w0, w0, #1
    1014:	ldr	w3, [x4, w0, sxtw #2]
    1018:	cmp	w10, w3
    101c:	csel	w2, w2, w0, ge  // ge = tcont
    1020:	csel	w15, w0, w15, ge  // ge = tcont
    1024:	sub	w0, w2, w15
    1028:	cmp	w0, #0x1
    102c:	b.ne	100c <BZ2_bzDecompress+0x2c4>  // b.any
    1030:	lsr	w0, w14, #1
    1034:	ldrb	w0, [x17, w0, uxtw]
    1038:	ubfiz	w2, w14, #2, #1
    103c:	lsr	w0, w0, w2
    1040:	ubfiz	w0, w0, #16, #4
    1044:	mov	w2, w14
    1048:	ldrh	w10, [x16, x2, lsl #1]
    104c:	orr	w10, w0, w10
    1050:	str	w10, [x19, #60]
    1054:	cbnz	w18, 1070 <BZ2_bzDecompress+0x328>
    1058:	ldr	w0, [x19, #28]
    105c:	ldr	w2, [x7, w0, sxtw #2]
    1060:	str	w2, [x19, #24]
    1064:	cmp	w0, #0x1ff
    1068:	csinc	w0, wzr, w0, eq  // eq = none
    106c:	str	w0, [x19, #28]
    1070:	ldr	w14, [x19, #24]
    1074:	sub	w14, w14, #0x1
    1078:	str	w14, [x19, #24]
    107c:	cmp	w14, #0x1
    1080:	cset	w0, eq  // eq = none
    1084:	eor	w0, w0, w15
    1088:	and	w0, w0, #0xff
    108c:	add	w2, w11, #0x3
    1090:	str	w2, [x19, #1092]
    1094:	cmp	w13, w2
    1098:	b.eq	e9c <BZ2_bzDecompress+0x154>  // b.none
    109c:	cmp	w1, w0
    10a0:	b.eq	10ac <BZ2_bzDecompress+0x364>  // b.none
    10a4:	str	w0, [x19, #64]
    10a8:	b	fe0 <BZ2_bzDecompress+0x298>
    10ac:	cmp	w12, w10
    10b0:	b.ls	1be4 <BZ2_bzDecompress+0xe9c>  // b.plast
    10b4:	mov	w3, w10
    10b8:	mov	w13, w20
    10bc:	mov	w1, #0x100                 	// #256
    10c0:	add	w0, w13, w1
    10c4:	asr	w0, w0, #1
    10c8:	ldr	w2, [x4, w0, sxtw #2]
    10cc:	cmp	w3, w2
    10d0:	csel	w1, w1, w0, ge  // ge = tcont
    10d4:	csel	w13, w0, w13, ge  // ge = tcont
    10d8:	sub	w2, w1, w13
    10dc:	cmp	w2, #0x1
    10e0:	b.ne	10c0 <BZ2_bzDecompress+0x378>  // b.any
    10e4:	lsr	w0, w10, #1
    10e8:	ldrb	w1, [x17, w0, uxtw]
    10ec:	ubfiz	w0, w10, #2, #1
    10f0:	lsr	w1, w1, w0
    10f4:	ubfiz	w1, w1, #16, #4
    10f8:	mov	w0, w10
    10fc:	ldrh	w10, [x16, x0, lsl #1]
    1100:	orr	w10, w1, w10
    1104:	str	w10, [x19, #60]
    1108:	cbnz	w14, 1124 <BZ2_bzDecompress+0x3dc>
    110c:	ldr	w0, [x19, #28]
    1110:	ldr	w1, [x7, w0, sxtw #2]
    1114:	str	w1, [x19, #24]
    1118:	cmp	w0, #0x1ff
    111c:	csinc	w0, wzr, w0, eq  // eq = none
    1120:	str	w0, [x19, #28]
    1124:	ldr	w14, [x19, #24]
    1128:	sub	w14, w14, #0x1
    112c:	str	w14, [x19, #24]
    1130:	add	w0, w11, #0x4
    1134:	str	w0, [x19, #1092]
    1138:	cmp	w14, #0x1
    113c:	cset	w0, eq  // eq = none
    1140:	eor	w0, w0, w13
    1144:	and	w0, w0, #0xff
    1148:	add	w0, w0, #0x4
    114c:	str	w0, [x19, #16]
    1150:	cmp	w12, w10
    1154:	b.ls	1be4 <BZ2_bzDecompress+0xe9c>  // b.plast
    1158:	mov	w3, w10
    115c:	mov	w1, #0x100                 	// #256
    1160:	add	w0, w20, w1
    1164:	asr	w0, w0, #1
    1168:	ldr	w2, [x4, w0, sxtw #2]
    116c:	cmp	w3, w2
    1170:	csel	w1, w1, w0, ge  // ge = tcont
    1174:	csel	w20, w0, w20, ge  // ge = tcont
    1178:	sub	w0, w1, w20
    117c:	cmp	w0, #0x1
    1180:	b.ne	1160 <BZ2_bzDecompress+0x418>  // b.any
    1184:	str	w20, [x19, #64]
    1188:	lsr	w0, w10, #1
    118c:	ldrb	w0, [x17, w0, uxtw]
    1190:	ubfiz	w1, w10, #2, #1
    1194:	lsr	w0, w0, w1
    1198:	ubfiz	w0, w0, #16, #4
    119c:	mov	w10, w10
    11a0:	ldrh	w1, [x16, x10, lsl #1]
    11a4:	orr	w0, w0, w1
    11a8:	str	w0, [x19, #60]
    11ac:	cbnz	w14, 11c8 <BZ2_bzDecompress+0x480>
    11b0:	ldr	w0, [x19, #28]
    11b4:	ldr	w1, [x7, w0, sxtw #2]
    11b8:	str	w1, [x19, #24]
    11bc:	cmp	w0, #0x1ff
    11c0:	csinc	w0, wzr, w0, eq  // eq = none
    11c4:	str	w0, [x19, #28]
    11c8:	ldr	w0, [x19, #24]
    11cc:	sub	w0, w0, #0x1
    11d0:	str	w0, [x19, #24]
    11d4:	cmp	w0, #0x1
    11d8:	cset	w0, eq  // eq = none
    11dc:	eor	w20, w0, w20
    11e0:	str	w20, [x19, #64]
    11e4:	add	w0, w11, #0x5
    11e8:	str	w0, [x19, #1092]
    11ec:	b	e9c <BZ2_bzDecompress+0x154>
    11f0:	ldr	w11, [x19, #1092]
    11f4:	ldr	w15, [x5, #14928]
    11f8:	add	w13, w15, #0x1
    11fc:	cmp	w11, w13
    1200:	b.eq	1a60 <BZ2_bzDecompress+0xd18>  // b.none
    1204:	b.gt	1be4 <BZ2_bzDecompress+0xe9c>
    1208:	str	w6, [x19, #16]
    120c:	ldr	w14, [x19, #64]
    1210:	strb	w14, [x19, #12]
    1214:	ldr	w10, [x19, #60]
    1218:	ldr	w12, [x19, #40]
    121c:	mul	w12, w12, w22
    1220:	cmp	w10, w12
    1224:	b.cs	1be4 <BZ2_bzDecompress+0xe9c>  // b.hs, b.nlast
    1228:	mov	w9, w10
    122c:	mov	w1, w20
    1230:	mov	w2, #0x100                 	// #256
    1234:	add	w0, w1, w2
    1238:	asr	w0, w0, #1
    123c:	ldr	w3, [x4, w0, sxtw #2]
    1240:	cmp	w9, w3
    1244:	csel	w2, w2, w0, ge  // ge = tcont
    1248:	csel	w1, w0, w1, ge  // ge = tcont
    124c:	sub	w0, w2, w1
    1250:	cmp	w0, #0x1
    1254:	b.ne	1234 <BZ2_bzDecompress+0x4ec>  // b.any
    1258:	ldr	x16, [x19, #3160]
    125c:	ldr	x17, [x19, #3168]
    1260:	lsr	w0, w10, #1
    1264:	ldrb	w2, [x17, w0, uxtw]
    1268:	ubfiz	w0, w10, #2, #1
    126c:	lsr	w2, w2, w0
    1270:	ubfiz	w2, w2, #16, #4
    1274:	ldrh	w0, [x16, w10, uxtw #1]
    1278:	orr	w2, w2, w0
    127c:	str	w2, [x19, #60]
    1280:	add	w0, w11, #0x1
    1284:	str	w0, [x19, #1092]
    1288:	cmp	w11, w15
    128c:	b.eq	12a0 <BZ2_bzDecompress+0x558>  // b.none
    1290:	and	w0, w1, #0xff
    1294:	cmp	w14, w1, uxtb
    1298:	b.eq	1330 <BZ2_bzDecompress+0x5e8>  // b.none
    129c:	str	w0, [x19, #64]
    12a0:	ldr	x0, [x19]
    12a4:	ldr	w1, [x0, #32]
    12a8:	cbz	w1, 1a48 <BZ2_bzDecompress+0xd00>
    12ac:	ldr	w20, [x19, #16]
    12b0:	cbz	w20, 11f0 <BZ2_bzDecompress+0x4a8>
    12b4:	ldr	x1, [x0, #24]
    12b8:	ldrb	w0, [x19, #12]
    12bc:	strb	w0, [x1]
    12c0:	ldr	w1, [x19, #3184]
    12c4:	eor	w0, w0, w1, lsr #24
    12c8:	mov	w0, w0
    12cc:	ldr	w0, [x21, x0, lsl #2]
    12d0:	eor	w1, w0, w1, lsl #8
    12d4:	str	w1, [x19, #3184]
    12d8:	ldr	w0, [x19, #16]
    12dc:	sub	w0, w0, #0x1
    12e0:	str	w0, [x19, #16]
    12e4:	ldr	x1, [x19]
    12e8:	ldr	x0, [x1, #24]
    12ec:	add	x0, x0, #0x1
    12f0:	str	x0, [x1, #24]
    12f4:	ldr	x1, [x19]
    12f8:	ldr	w0, [x1, #32]
    12fc:	sub	w0, w0, #0x1
    1300:	str	w0, [x1, #32]
    1304:	ldr	x1, [x19]
    1308:	ldr	w0, [x1, #36]
    130c:	add	w0, w0, #0x1
    1310:	str	w0, [x1, #36]
    1314:	ldr	x0, [x19]
    1318:	ldr	w1, [x0, #36]
    131c:	cbnz	w1, 12a0 <BZ2_bzDecompress+0x558>
    1320:	ldr	w1, [x0, #40]
    1324:	add	w1, w1, #0x1
    1328:	str	w1, [x0, #40]
    132c:	b	12a0 <BZ2_bzDecompress+0x558>
    1330:	str	w7, [x19, #16]
    1334:	cmp	w12, w2
    1338:	b.ls	1be4 <BZ2_bzDecompress+0xe9c>  // b.plast
    133c:	mov	w10, w2
    1340:	mov	w1, w20
    1344:	mov	w3, #0x100                 	// #256
    1348:	add	w0, w1, w3
    134c:	asr	w0, w0, #1
    1350:	ldr	w9, [x4, w0, sxtw #2]
    1354:	cmp	w10, w9
    1358:	csel	w3, w3, w0, ge  // ge = tcont
    135c:	csel	w1, w0, w1, ge  // ge = tcont
    1360:	sub	w0, w3, w1
    1364:	cmp	w0, #0x1
    1368:	b.ne	1348 <BZ2_bzDecompress+0x600>  // b.any
    136c:	lsr	w0, w2, #1
    1370:	ldrb	w0, [x17, w0, uxtw]
    1374:	ubfiz	w3, w2, #2, #1
    1378:	lsr	w0, w0, w3
    137c:	ubfiz	w0, w0, #16, #4
    1380:	mov	w2, w2
    1384:	ldrh	w2, [x16, x2, lsl #1]
    1388:	orr	w2, w0, w2
    138c:	str	w2, [x19, #60]
    1390:	add	w0, w11, #0x2
    1394:	str	w0, [x19, #1092]
    1398:	cmp	w13, w0
    139c:	b.eq	12a0 <BZ2_bzDecompress+0x558>  // b.none
    13a0:	and	w0, w1, #0xff
    13a4:	cmp	w14, w1, uxtb
    13a8:	b.eq	13c4 <BZ2_bzDecompress+0x67c>  // b.none
    13ac:	str	w0, [x19, #64]
    13b0:	ldr	x0, [x19]
    13b4:	ldr	w1, [x0, #32]
    13b8:	cbnz	w1, 12ac <BZ2_bzDecompress+0x564>
    13bc:	ldp	x21, x22, [sp, #32]
    13c0:	b	1bbc <BZ2_bzDecompress+0xe74>
    13c4:	str	w8, [x19, #16]
    13c8:	cmp	w12, w2
    13cc:	b.ls	1be4 <BZ2_bzDecompress+0xe9c>  // b.plast
    13d0:	mov	w9, w2
    13d4:	mov	w10, w20
    13d8:	mov	w1, #0x100                 	// #256
    13dc:	add	w0, w10, w1
    13e0:	asr	w0, w0, #1
    13e4:	ldr	w3, [x4, w0, sxtw #2]
    13e8:	cmp	w9, w3
    13ec:	csel	w1, w1, w0, ge  // ge = tcont
    13f0:	csel	w10, w0, w10, ge  // ge = tcont
    13f4:	sub	w0, w1, w10
    13f8:	cmp	w0, #0x1
    13fc:	b.ne	13dc <BZ2_bzDecompress+0x694>  // b.any
    1400:	lsr	w0, w2, #1
    1404:	ldrb	w0, [x17, w0, uxtw]
    1408:	ubfiz	w1, w2, #2, #1
    140c:	lsr	w0, w0, w1
    1410:	ubfiz	w0, w0, #16, #4
    1414:	mov	w2, w2
    1418:	ldrh	w2, [x16, x2, lsl #1]
    141c:	orr	w2, w0, w2
    1420:	str	w2, [x19, #60]
    1424:	add	w0, w11, #0x3
    1428:	str	w0, [x19, #1092]
    142c:	cmp	w13, w0
    1430:	b.eq	12a0 <BZ2_bzDecompress+0x558>  // b.none
    1434:	and	w0, w10, #0xff
    1438:	cmp	w14, w10, uxtb
    143c:	b.eq	1448 <BZ2_bzDecompress+0x700>  // b.none
    1440:	str	w0, [x19, #64]
    1444:	b	13b0 <BZ2_bzDecompress+0x668>
    1448:	cmp	w12, w2
    144c:	b.ls	1be4 <BZ2_bzDecompress+0xe9c>  // b.plast
    1450:	mov	w10, w2
    1454:	mov	w1, w20
    1458:	mov	w3, #0x100                 	// #256
    145c:	add	w0, w1, w3
    1460:	asr	w0, w0, #1
    1464:	ldr	w9, [x4, w0, sxtw #2]
    1468:	cmp	w10, w9
    146c:	csel	w3, w3, w0, ge  // ge = tcont
    1470:	csel	w1, w0, w1, ge  // ge = tcont
    1474:	sub	w0, w3, w1
    1478:	cmp	w0, #0x1
    147c:	b.ne	145c <BZ2_bzDecompress+0x714>  // b.any
    1480:	lsr	w0, w2, #1
    1484:	ldrb	w9, [x17, w0, uxtw]
    1488:	ubfiz	w0, w2, #2, #1
    148c:	lsr	w9, w9, w0
    1490:	ubfiz	w9, w9, #16, #4
    1494:	mov	w2, w2
    1498:	ldrh	w0, [x16, x2, lsl #1]
    149c:	orr	w9, w9, w0
    14a0:	str	w9, [x19, #60]
    14a4:	add	w0, w11, #0x4
    14a8:	str	w0, [x19, #1092]
    14ac:	and	w0, w1, #0xff
    14b0:	add	w0, w0, #0x4
    14b4:	str	w0, [x19, #16]
    14b8:	cmp	w12, w9
    14bc:	b.ls	1be4 <BZ2_bzDecompress+0xe9c>  // b.plast
    14c0:	mov	w3, w9
    14c4:	mov	w1, #0x100                 	// #256
    14c8:	add	w0, w20, w1
    14cc:	asr	w0, w0, #1
    14d0:	ldr	w2, [x4, w0, sxtw #2]
    14d4:	cmp	w3, w2
    14d8:	csel	w1, w1, w0, ge  // ge = tcont
    14dc:	csel	w20, w0, w20, ge  // ge = tcont
    14e0:	sub	w0, w1, w20
    14e4:	cmp	w0, #0x1
    14e8:	b.ne	14c8 <BZ2_bzDecompress+0x780>  // b.any
    14ec:	str	w20, [x19, #64]
    14f0:	lsr	w0, w9, #1
    14f4:	ldrb	w0, [x17, w0, uxtw]
    14f8:	ubfiz	w1, w9, #2, #1
    14fc:	lsr	w0, w0, w1
    1500:	ubfiz	w0, w0, #16, #4
    1504:	mov	w9, w9
    1508:	ldrh	w1, [x16, x9, lsl #1]
    150c:	orr	w0, w0, w1
    1510:	str	w0, [x19, #60]
    1514:	add	w0, w11, #0x5
    1518:	str	w0, [x19, #1092]
    151c:	b	12a0 <BZ2_bzDecompress+0x558>
    1520:	ldrb	w1, [x19, #20]
    1524:	cbz	w1, 183c <BZ2_bzDecompress+0xaf4>
    1528:	ldr	x0, [x19]
    152c:	ldr	w1, [x0, #32]
    1530:	cbz	w1, 1a48 <BZ2_bzDecompress+0xd00>
    1534:	add	x5, x19, #0xc, lsl #12
    1538:	mov	w6, #0x1                   	// #1
    153c:	mov	w7, #0x2                   	// #2
    1540:	mov	w8, #0x3                   	// #3
    1544:	adrp	x4, 0 <BZ2_rNums>
    1548:	add	x4, x4, #0x0
    154c:	b	1798 <BZ2_bzDecompress+0xa50>
    1550:	ldr	w0, [x19, #1092]
    1554:	ldr	w9, [x5, #14928]
    1558:	add	w13, w9, #0x1
    155c:	cmp	w0, w13
    1560:	b.eq	1a60 <BZ2_bzDecompress+0xd18>  // b.none
    1564:	b.gt	1be4 <BZ2_bzDecompress+0xe9c>
    1568:	str	w6, [x19, #16]
    156c:	ldr	w11, [x19, #64]
    1570:	strb	w11, [x19, #12]
    1574:	ldr	w1, [x19, #60]
    1578:	ldr	w12, [x19, #40]
    157c:	mul	w12, w12, w22
    1580:	cmp	w1, w12
    1584:	b.cs	1be4 <BZ2_bzDecompress+0xe9c>  // b.hs, b.nlast
    1588:	ldr	x14, [x19, #3152]
    158c:	ldr	w10, [x14, w1, uxtw #2]
    1590:	lsr	w3, w10, #8
    1594:	str	w3, [x19, #60]
    1598:	ldr	w1, [x19, #24]
    159c:	cbnz	w1, 15b8 <BZ2_bzDecompress+0x870>
    15a0:	ldr	w1, [x19, #28]
    15a4:	ldr	w2, [x4, w1, sxtw #2]
    15a8:	str	w2, [x19, #24]
    15ac:	cmp	w1, #0x1ff
    15b0:	csinc	w1, wzr, w1, eq  // eq = none
    15b4:	str	w1, [x19, #28]
    15b8:	ldr	w1, [x19, #24]
    15bc:	sub	w1, w1, #0x1
    15c0:	str	w1, [x19, #24]
    15c4:	cmp	w1, #0x1
    15c8:	cset	w2, eq  // eq = none
    15cc:	eor	w2, w2, w10
    15d0:	and	w2, w2, #0xff
    15d4:	add	w10, w0, #0x1
    15d8:	str	w10, [x19, #1092]
    15dc:	cmp	w0, w9
    15e0:	b.eq	178c <BZ2_bzDecompress+0xa44>  // b.none
    15e4:	cmp	w11, w2
    15e8:	b.ne	1788 <BZ2_bzDecompress+0xa40>  // b.any
    15ec:	str	w7, [x19, #16]
    15f0:	cmp	w12, w3
    15f4:	b.ls	1be4 <BZ2_bzDecompress+0xe9c>  // b.plast
    15f8:	mov	w3, w3
    15fc:	ldr	w10, [x14, x3, lsl #2]
    1600:	lsr	w9, w10, #8
    1604:	str	w9, [x19, #60]
    1608:	cbnz	w1, 1624 <BZ2_bzDecompress+0x8dc>
    160c:	ldr	w1, [x19, #28]
    1610:	ldr	w3, [x4, w1, sxtw #2]
    1614:	str	w3, [x19, #24]
    1618:	cmp	w1, #0x1ff
    161c:	csinc	w1, wzr, w1, eq  // eq = none
    1620:	str	w1, [x19, #28]
    1624:	ldr	w3, [x19, #24]
    1628:	sub	w3, w3, #0x1
    162c:	str	w3, [x19, #24]
    1630:	cmp	w3, #0x1
    1634:	cset	w1, eq  // eq = none
    1638:	eor	w1, w1, w10
    163c:	and	w1, w1, #0xff
    1640:	add	w10, w0, #0x2
    1644:	str	w10, [x19, #1092]
    1648:	cmp	w13, w10
    164c:	b.eq	178c <BZ2_bzDecompress+0xa44>  // b.none
    1650:	cmp	w2, w1
    1654:	b.ne	181c <BZ2_bzDecompress+0xad4>  // b.any
    1658:	str	w8, [x19, #16]
    165c:	cmp	w12, w9
    1660:	b.ls	1be4 <BZ2_bzDecompress+0xe9c>  // b.plast
    1664:	mov	w9, w9
    1668:	ldr	w10, [x14, x9, lsl #2]
    166c:	lsr	w9, w10, #8
    1670:	str	w9, [x19, #60]
    1674:	cbnz	w3, 1690 <BZ2_bzDecompress+0x948>
    1678:	ldr	w1, [x19, #28]
    167c:	ldr	w3, [x4, w1, sxtw #2]
    1680:	str	w3, [x19, #24]
    1684:	cmp	w1, #0x1ff
    1688:	csinc	w1, wzr, w1, eq  // eq = none
    168c:	str	w1, [x19, #28]
    1690:	ldr	w3, [x19, #24]
    1694:	sub	w3, w3, #0x1
    1698:	str	w3, [x19, #24]
    169c:	cmp	w3, #0x1
    16a0:	cset	w1, eq  // eq = none
    16a4:	eor	w1, w1, w10
    16a8:	and	w1, w1, #0xff
    16ac:	add	w10, w0, #0x3
    16b0:	str	w10, [x19, #1092]
    16b4:	cmp	w13, w10
    16b8:	b.eq	178c <BZ2_bzDecompress+0xa44>  // b.none
    16bc:	cmp	w2, w1
    16c0:	b.ne	1834 <BZ2_bzDecompress+0xaec>  // b.any
    16c4:	cmp	w12, w9
    16c8:	b.ls	1be4 <BZ2_bzDecompress+0xe9c>  // b.plast
    16cc:	mov	w9, w9
    16d0:	ldr	w10, [x14, x9, lsl #2]
    16d4:	lsr	w9, w10, #8
    16d8:	str	w9, [x19, #60]
    16dc:	cbnz	w3, 16f8 <BZ2_bzDecompress+0x9b0>
    16e0:	ldr	w1, [x19, #28]
    16e4:	ldr	w2, [x4, w1, sxtw #2]
    16e8:	str	w2, [x19, #24]
    16ec:	cmp	w1, #0x1ff
    16f0:	csinc	w1, wzr, w1, eq  // eq = none
    16f4:	str	w1, [x19, #28]
    16f8:	ldr	w2, [x19, #24]
    16fc:	sub	w2, w2, #0x1
    1700:	str	w2, [x19, #24]
    1704:	add	w1, w0, #0x4
    1708:	str	w1, [x19, #1092]
    170c:	cmp	w2, #0x1
    1710:	cset	w1, eq  // eq = none
    1714:	eor	w1, w1, w10
    1718:	and	w1, w1, #0xff
    171c:	add	w1, w1, #0x4
    1720:	str	w1, [x19, #16]
    1724:	cmp	w12, w9
    1728:	b.ls	1be4 <BZ2_bzDecompress+0xe9c>  // b.plast
    172c:	mov	w9, w9
    1730:	ldr	w1, [x14, x9, lsl #2]
    1734:	and	w3, w1, #0xff
    1738:	str	w3, [x19, #64]
    173c:	lsr	w1, w1, #8
    1740:	str	w1, [x19, #60]
    1744:	cbnz	w2, 1760 <BZ2_bzDecompress+0xa18>
    1748:	ldr	w1, [x19, #28]
    174c:	ldr	w2, [x4, w1, sxtw #2]
    1750:	str	w2, [x19, #24]
    1754:	cmp	w1, #0x1ff
    1758:	csinc	w1, wzr, w1, eq  // eq = none
    175c:	str	w1, [x19, #28]
    1760:	ldr	w1, [x19, #24]
    1764:	sub	w1, w1, #0x1
    1768:	str	w1, [x19, #24]
    176c:	cmp	w1, #0x1
    1770:	cset	w1, eq  // eq = none
    1774:	eor	w1, w1, w3
    1778:	str	w1, [x19, #64]
    177c:	add	w0, w0, #0x5
    1780:	str	w0, [x19, #1092]
    1784:	b	178c <BZ2_bzDecompress+0xa44>
    1788:	str	w2, [x19, #64]
    178c:	ldr	x0, [x19]
    1790:	ldr	w1, [x0, #32]
    1794:	cbz	w1, 1a48 <BZ2_bzDecompress+0xd00>
    1798:	ldr	w20, [x19, #16]
    179c:	cbz	w20, 1550 <BZ2_bzDecompress+0x808>
    17a0:	ldr	x1, [x0, #24]
    17a4:	ldrb	w0, [x19, #12]
    17a8:	strb	w0, [x1]
    17ac:	ldr	w1, [x19, #3184]
    17b0:	eor	w0, w0, w1, lsr #24
    17b4:	mov	w0, w0
    17b8:	ldr	w0, [x21, x0, lsl #2]
    17bc:	eor	w1, w0, w1, lsl #8
    17c0:	str	w1, [x19, #3184]
    17c4:	ldr	w0, [x19, #16]
    17c8:	sub	w0, w0, #0x1
    17cc:	str	w0, [x19, #16]
    17d0:	ldr	x1, [x19]
    17d4:	ldr	x0, [x1, #24]
    17d8:	add	x0, x0, #0x1
    17dc:	str	x0, [x1, #24]
    17e0:	ldr	x1, [x19]
    17e4:	ldr	w0, [x1, #32]
    17e8:	sub	w0, w0, #0x1
    17ec:	str	w0, [x1, #32]
    17f0:	ldr	x1, [x19]
    17f4:	ldr	w0, [x1, #36]
    17f8:	add	w0, w0, #0x1
    17fc:	str	w0, [x1, #36]
    1800:	ldr	x0, [x19]
    1804:	ldr	w1, [x0, #36]
    1808:	cbnz	w1, 178c <BZ2_bzDecompress+0xa44>
    180c:	ldr	w1, [x0, #40]
    1810:	add	w1, w1, #0x1
    1814:	str	w1, [x0, #40]
    1818:	b	178c <BZ2_bzDecompress+0xa44>
    181c:	str	w1, [x19, #64]
    1820:	ldr	x0, [x19]
    1824:	ldr	w1, [x0, #32]
    1828:	cbnz	w1, 1798 <BZ2_bzDecompress+0xa50>
    182c:	ldp	x21, x22, [sp, #32]
    1830:	b	1bbc <BZ2_bzDecompress+0xe74>
    1834:	str	w1, [x19, #64]
    1838:	b	1820 <BZ2_bzDecompress+0xad8>
    183c:	ldr	w4, [x19, #3184]
    1840:	ldrb	w5, [x19, #12]
    1844:	ldr	w2, [x19, #16]
    1848:	ldr	w8, [x19, #1092]
    184c:	ldr	w10, [x19, #64]
    1850:	ldr	x13, [x19, #3152]
    1854:	ldr	w7, [x19, #60]
    1858:	ldr	x1, [x19]
    185c:	ldr	x6, [x1, #24]
    1860:	ldr	w12, [x1, #32]
    1864:	add	x1, x19, #0xc, lsl #12
    1868:	ldr	w14, [x1, #14928]
    186c:	add	w11, w14, #0x1
    1870:	ldr	w9, [x19, #40]
    1874:	mul	w9, w9, w22
    1878:	mov	w3, w12
    187c:	cmp	w2, #0x0
    1880:	b.gt	1978 <BZ2_bzDecompress+0xc30>
    1884:	cmp	w11, w8
    1888:	b.lt	1be4 <BZ2_bzDecompress+0xe9c>  // b.tstop
    188c:	b.eq	19e8 <BZ2_bzDecompress+0xca0>  // b.none
    1890:	and	w5, w10, #0xff
    1894:	cmp	w9, w7
    1898:	b.ls	1be4 <BZ2_bzDecompress+0xe9c>  // b.plast
    189c:	ldr	w1, [x13, w7, uxtw #2]
    18a0:	lsr	w7, w1, #8
    18a4:	and	w2, w1, #0xff
    18a8:	cmp	w10, w1, uxtb
    18ac:	b.ne	19cc <BZ2_bzDecompress+0xc84>  // b.any
    18b0:	cmp	w14, w8
    18b4:	b.eq	19c8 <BZ2_bzDecompress+0xc80>  // b.none
    18b8:	cmp	w9, w7
    18bc:	b.ls	1be4 <BZ2_bzDecompress+0xe9c>  // b.plast
    18c0:	mov	w7, w7
    18c4:	ldr	w2, [x13, x7, lsl #2]
    18c8:	lsr	w7, w2, #8
    18cc:	add	w1, w8, #0x2
    18d0:	cmp	w11, w1
    18d4:	b.eq	194c <BZ2_bzDecompress+0xc04>  // b.none
    18d8:	and	w15, w2, #0xff
    18dc:	cmp	w10, w2, uxtb
    18e0:	b.ne	1954 <BZ2_bzDecompress+0xc0c>  // b.any
    18e4:	cmp	w9, w7
    18e8:	b.ls	1be4 <BZ2_bzDecompress+0xe9c>  // b.plast
    18ec:	mov	w7, w7
    18f0:	ldr	w2, [x13, x7, lsl #2]
    18f4:	lsr	w7, w2, #8
    18f8:	add	w1, w8, #0x3
    18fc:	cmp	w11, w1
    1900:	b.eq	1964 <BZ2_bzDecompress+0xc1c>  // b.none
    1904:	and	w15, w2, #0xff
    1908:	cmp	w10, w2, uxtb
    190c:	b.ne	196c <BZ2_bzDecompress+0xc24>  // b.any
    1910:	cmp	w9, w7
    1914:	b.ls	1be4 <BZ2_bzDecompress+0xe9c>  // b.plast
    1918:	mov	w7, w7
    191c:	ldr	w7, [x13, x7, lsl #2]
    1920:	lsr	w1, w7, #8
    1924:	and	w2, w7, #0xff
    1928:	add	w2, w2, #0x4
    192c:	cmp	w9, w7, lsr #8
    1930:	b.ls	1be4 <BZ2_bzDecompress+0xe9c>  // b.plast
    1934:	mov	w1, w1
    1938:	ldr	w7, [x13, x1, lsl #2]
    193c:	and	w10, w7, #0xff
    1940:	lsr	w7, w7, #8
    1944:	add	w1, w8, #0x5
    1948:	b	195c <BZ2_bzDecompress+0xc14>
    194c:	mov	w2, w0
    1950:	b	195c <BZ2_bzDecompress+0xc14>
    1954:	mov	w10, w15
    1958:	mov	w2, w0
    195c:	mov	w8, w1
    1960:	b	187c <BZ2_bzDecompress+0xb34>
    1964:	mov	w2, #0x3                   	// #3
    1968:	b	195c <BZ2_bzDecompress+0xc14>
    196c:	mov	w10, w15
    1970:	mov	w2, #0x3                   	// #3
    1974:	b	195c <BZ2_bzDecompress+0xc14>
    1978:	cbz	w3, 19ec <BZ2_bzDecompress+0xca4>
    197c:	cmp	w2, #0x1
    1980:	b.eq	19ac <BZ2_bzDecompress+0xc64>  // b.none
    1984:	strb	w5, [x6], #1
    1988:	eor	w1, w5, w4, lsr #24
    198c:	mov	w1, w1
    1990:	ldr	w1, [x21, x1, lsl #2]
    1994:	eor	w4, w1, w4, lsl #8
    1998:	sub	w2, w2, #0x1
    199c:	subs	w3, w3, #0x1
    19a0:	b.eq	19ec <BZ2_bzDecompress+0xca4>  // b.none
    19a4:	cmp	w2, #0x1
    19a8:	b.ne	1984 <BZ2_bzDecompress+0xc3c>  // b.any
    19ac:	strb	w5, [x6], #1
    19b0:	eor	w1, w5, w4, lsr #24
    19b4:	mov	w1, w1
    19b8:	ldr	w1, [x21, x1, lsl #2]
    19bc:	eor	w4, w1, w4, lsl #8
    19c0:	sub	w3, w3, #0x1
    19c4:	b	1884 <BZ2_bzDecompress+0xb3c>
    19c8:	mov	w2, w10
    19cc:	add	w8, w8, #0x1
    19d0:	cbnz	w3, 19e0 <BZ2_bzDecompress+0xc98>
    19d4:	mov	w10, w2
    19d8:	mov	w2, #0x1                   	// #1
    19dc:	b	19ec <BZ2_bzDecompress+0xca4>
    19e0:	mov	w10, w2
    19e4:	b	19ac <BZ2_bzDecompress+0xc64>
    19e8:	mov	w2, #0x0                   	// #0
    19ec:	ldr	x9, [x19]
    19f0:	ldr	w1, [x9, #36]
    19f4:	add	w0, w12, w1
    19f8:	sub	w0, w0, w3
    19fc:	str	w0, [x9, #36]
    1a00:	ldr	x0, [x19]
    1a04:	ldr	w9, [x0, #36]
    1a08:	cmp	w1, w9
    1a0c:	b.ls	1a1c <BZ2_bzDecompress+0xcd4>  // b.plast
    1a10:	ldr	w1, [x0, #40]
    1a14:	add	w1, w1, #0x1
    1a18:	str	w1, [x0, #40]
    1a1c:	str	w4, [x19, #3184]
    1a20:	strb	w5, [x19, #12]
    1a24:	str	w2, [x19, #16]
    1a28:	str	w8, [x19, #1092]
    1a2c:	str	w10, [x19, #64]
    1a30:	str	x13, [x19, #3152]
    1a34:	str	w7, [x19, #60]
    1a38:	ldr	x0, [x19]
    1a3c:	str	x6, [x0, #24]
    1a40:	ldr	x0, [x19]
    1a44:	str	w3, [x0, #32]
    1a48:	add	x0, x19, #0xc, lsl #12
    1a4c:	ldr	w0, [x0, #14928]
    1a50:	add	w0, w0, #0x1
    1a54:	ldr	w1, [x19, #1092]
    1a58:	cmp	w1, w0
    1a5c:	b.ne	1bf0 <BZ2_bzDecompress+0xea8>  // b.any
    1a60:	ldr	w0, [x19, #16]
    1a64:	cbnz	w0, 1bcc <BZ2_bzDecompress+0xe84>
    1a68:	ldr	w3, [x19, #3184]
    1a6c:	mvn	w3, w3
    1a70:	str	w3, [x19, #3184]
    1a74:	ldr	w0, [x19, #52]
    1a78:	cmp	w0, #0x2
    1a7c:	b.gt	1ad8 <BZ2_bzDecompress+0xd90>
    1a80:	ldr	w0, [x19, #52]
    1a84:	cmp	w0, #0x1
    1a88:	b.gt	1af4 <BZ2_bzDecompress+0xdac>
    1a8c:	ldr	w1, [x19, #3184]
    1a90:	ldr	w0, [x19, #3176]
    1a94:	cmp	w1, w0
    1a98:	b.ne	1bd8 <BZ2_bzDecompress+0xe90>  // b.any
    1a9c:	ldr	w0, [x19, #3188]
    1aa0:	eor	w0, w1, w0, ror #31
    1aa4:	str	w0, [x19, #3188]
    1aa8:	mov	w0, #0xe                   	// #14
    1aac:	str	w0, [x19, #8]
    1ab0:	mov	x0, x19
    1ab4:	bl	0 <BZ2_decompress>
    1ab8:	mov	w20, w0
    1abc:	cmp	w0, #0x4
    1ac0:	b.eq	1b54 <BZ2_bzDecompress+0xe0c>  // b.none
    1ac4:	ldr	w0, [x19, #8]
    1ac8:	cmp	w0, #0x2
    1acc:	b.eq	d80 <BZ2_bzDecompress+0x38>  // b.none
    1ad0:	ldp	x21, x22, [sp, #32]
    1ad4:	b	1bbc <BZ2_bzDecompress+0xe74>
    1ad8:	ldr	w2, [x19, #3176]
    1adc:	adrp	x1, 0 <add_pair_to_block>
    1ae0:	add	x1, x1, #0x0
    1ae4:	adrp	x0, 0 <stderr>
    1ae8:	ldr	x0, [x0]
    1aec:	bl	0 <fprintf>
    1af0:	b	1a80 <BZ2_bzDecompress+0xd38>
    1af4:	adrp	x0, 0 <stderr>
    1af8:	ldr	x1, [x0]
    1afc:	mov	w0, #0x5d                  	// #93
    1b00:	bl	0 <fputc>
    1b04:	b	1a8c <BZ2_bzDecompress+0xd44>
    1b08:	cmp	w0, #0x9
    1b0c:	b.gt	1ab0 <BZ2_bzDecompress+0xd68>
    1b10:	cmp	w0, #0x1
    1b14:	b.eq	1bb4 <BZ2_bzDecompress+0xe6c>  // b.none
    1b18:	cmp	w0, #0x2
    1b1c:	b.ne	1b08 <BZ2_bzDecompress+0xdc0>  // b.any
    1b20:	ldrb	w1, [x19, #44]
    1b24:	cbz	w1, 1520 <BZ2_bzDecompress+0x7d8>
    1b28:	ldrb	w0, [x19, #20]
    1b2c:	cbnz	w0, d88 <BZ2_bzDecompress+0x40>
    1b30:	ldr	x0, [x19]
    1b34:	ldr	w1, [x0, #32]
    1b38:	cbz	w1, 1a48 <BZ2_bzDecompress+0xd00>
    1b3c:	add	x5, x19, #0xc, lsl #12
    1b40:	mov	w6, #0x1                   	// #1
    1b44:	add	x4, x19, #0x448
    1b48:	mov	w7, #0x2                   	// #2
    1b4c:	mov	w8, #0x3                   	// #3
    1b50:	b	12ac <BZ2_bzDecompress+0x564>
    1b54:	ldr	w0, [x19, #52]
    1b58:	cmp	w0, #0x2
    1b5c:	b.gt	1b7c <BZ2_bzDecompress+0xe34>
    1b60:	ldr	w1, [x19, #3188]
    1b64:	ldr	w0, [x19, #3180]
    1b68:	cmp	w1, w0
    1b6c:	mov	w0, #0xfffffffc            	// #-4
    1b70:	csel	w20, w20, w0, eq  // eq = none
    1b74:	ldp	x21, x22, [sp, #32]
    1b78:	b	1bbc <BZ2_bzDecompress+0xe74>
    1b7c:	ldr	w3, [x19, #3188]
    1b80:	ldr	w2, [x19, #3180]
    1b84:	adrp	x1, 0 <add_pair_to_block>
    1b88:	add	x1, x1, #0x0
    1b8c:	adrp	x0, 0 <stderr>
    1b90:	ldr	x0, [x0]
    1b94:	bl	0 <fprintf>
    1b98:	b	1b60 <BZ2_bzDecompress+0xe18>
    1b9c:	mov	w20, #0xfffffffe            	// #-2
    1ba0:	b	1bbc <BZ2_bzDecompress+0xe74>
    1ba4:	mov	w20, #0xfffffffe            	// #-2
    1ba8:	b	1bbc <BZ2_bzDecompress+0xe74>
    1bac:	mov	w20, #0xfffffffe            	// #-2
    1bb0:	b	1bbc <BZ2_bzDecompress+0xe74>
    1bb4:	mov	w20, #0xffffffff            	// #-1
    1bb8:	ldp	x21, x22, [sp, #32]
    1bbc:	mov	w0, w20
    1bc0:	ldp	x19, x20, [sp, #16]
    1bc4:	ldp	x29, x30, [sp], #48
    1bc8:	ret
    1bcc:	mov	w20, #0x0                   	// #0
    1bd0:	ldp	x21, x22, [sp, #32]
    1bd4:	b	1bbc <BZ2_bzDecompress+0xe74>
    1bd8:	mov	w20, #0xfffffffc            	// #-4
    1bdc:	ldp	x21, x22, [sp, #32]
    1be0:	b	1bbc <BZ2_bzDecompress+0xe74>
    1be4:	mov	w20, #0xfffffffc            	// #-4
    1be8:	ldp	x21, x22, [sp, #32]
    1bec:	b	1bbc <BZ2_bzDecompress+0xe74>
    1bf0:	mov	w20, #0x0                   	// #0
    1bf4:	ldp	x21, x22, [sp, #32]
    1bf8:	b	1bbc <BZ2_bzDecompress+0xe74>

0000000000001bfc <BZ2_bzDecompressEnd>:
    1bfc:	cbz	x0, 1c84 <BZ2_bzDecompressEnd+0x88>
    1c00:	stp	x29, x30, [sp, #-32]!
    1c04:	mov	x29, sp
    1c08:	stp	x19, x20, [sp, #16]
    1c0c:	mov	x19, x0
    1c10:	ldr	x20, [x0, #48]
    1c14:	cbz	x20, 1c8c <BZ2_bzDecompressEnd+0x90>
    1c18:	ldr	x0, [x20]
    1c1c:	cmp	x0, x19
    1c20:	b.ne	1c94 <BZ2_bzDecompressEnd+0x98>  // b.any
    1c24:	ldr	x1, [x20, #3152]
    1c28:	cbz	x1, 1c38 <BZ2_bzDecompressEnd+0x3c>
    1c2c:	ldr	x2, [x19, #64]
    1c30:	ldr	x0, [x19, #72]
    1c34:	blr	x2
    1c38:	ldr	x1, [x20, #3160]
    1c3c:	cbz	x1, 1c4c <BZ2_bzDecompressEnd+0x50>
    1c40:	ldr	x2, [x19, #64]
    1c44:	ldr	x0, [x19, #72]
    1c48:	blr	x2
    1c4c:	ldr	x1, [x20, #3168]
    1c50:	cbz	x1, 1c60 <BZ2_bzDecompressEnd+0x64>
    1c54:	ldr	x2, [x19, #64]
    1c58:	ldr	x0, [x19, #72]
    1c5c:	blr	x2
    1c60:	ldr	x2, [x19, #64]
    1c64:	ldr	x1, [x19, #48]
    1c68:	ldr	x0, [x19, #72]
    1c6c:	blr	x2
    1c70:	str	xzr, [x19, #48]
    1c74:	mov	w0, #0x0                   	// #0
    1c78:	ldp	x19, x20, [sp, #16]
    1c7c:	ldp	x29, x30, [sp], #32
    1c80:	ret
    1c84:	mov	w0, #0xfffffffe            	// #-2
    1c88:	ret
    1c8c:	mov	w0, #0xfffffffe            	// #-2
    1c90:	b	1c78 <BZ2_bzDecompressEnd+0x7c>
    1c94:	mov	w0, #0xfffffffe            	// #-2
    1c98:	b	1c78 <BZ2_bzDecompressEnd+0x7c>

0000000000001c9c <BZ2_bzWriteOpen>:
    1c9c:	stp	x29, x30, [sp, #-64]!
    1ca0:	mov	x29, sp
    1ca4:	stp	x19, x20, [sp, #16]
    1ca8:	stp	x21, x22, [sp, #32]
    1cac:	stp	x23, x24, [sp, #48]
    1cb0:	mov	x20, x0
    1cb4:	mov	x21, x1
    1cb8:	mov	w23, w2
    1cbc:	mov	w24, w3
    1cc0:	mov	w22, w4
    1cc4:	cbz	x0, 1de8 <BZ2_bzWriteOpen+0x14c>
    1cc8:	str	wzr, [x0]
    1ccc:	cbz	x1, 1d74 <BZ2_bzWriteOpen+0xd8>
    1cd0:	sub	w0, w2, #0x1
    1cd4:	cmp	w0, #0x8
    1cd8:	b.hi	1d74 <BZ2_bzWriteOpen+0xd8>  // b.pmore
    1cdc:	cmp	w22, #0xfa
    1ce0:	ccmp	w24, #0x4, #0x2, ls  // ls = plast
    1ce4:	b.hi	1d6c <BZ2_bzWriteOpen+0xd0>  // b.pmore
    1ce8:	mov	x0, x21
    1cec:	bl	0 <ferror>
    1cf0:	cbnz	w0, 1d98 <BZ2_bzWriteOpen+0xfc>
    1cf4:	mov	x0, #0x13f0                	// #5104
    1cf8:	bl	0 <malloc>
    1cfc:	mov	x19, x0
    1d00:	cbz	x0, 1db0 <BZ2_bzWriteOpen+0x114>
    1d04:	cbz	x20, 1d0c <BZ2_bzWriteOpen+0x70>
    1d08:	str	wzr, [x20]
    1d0c:	str	wzr, [x19, #5096]
    1d10:	add	x0, x19, #0x1, lsl #12
    1d14:	strb	wzr, [x0, #1004]
    1d18:	str	wzr, [x19, #5008]
    1d1c:	str	x21, [x19]
    1d20:	mov	w1, #0x1                   	// #1
    1d24:	strb	w1, [x0, #916]
    1d28:	str	xzr, [x19, #5072]
    1d2c:	str	xzr, [x19, #5080]
    1d30:	str	xzr, [x19, #5088]
    1d34:	cmp	w22, #0x0
    1d38:	mov	w3, #0x1e                  	// #30
    1d3c:	csel	w3, w22, w3, ne  // ne = any
    1d40:	mov	w2, w24
    1d44:	mov	w1, w23
    1d48:	add	x0, x19, #0x1, lsl #12
    1d4c:	add	x0, x0, #0x398
    1d50:	bl	70c <BZ2_bzCompressInit>
    1d54:	cbnz	w0, 1dc0 <BZ2_bzWriteOpen+0x124>
    1d58:	str	wzr, [x19, #5024]
    1d5c:	add	x0, x19, #0x1, lsl #12
    1d60:	mov	w1, #0x1                   	// #1
    1d64:	strb	w1, [x0, #1004]
    1d68:	b	1d80 <BZ2_bzWriteOpen+0xe4>
    1d6c:	mov	x19, x20
    1d70:	cbz	x20, 1d80 <BZ2_bzWriteOpen+0xe4>
    1d74:	mov	w0, #0xfffffffe            	// #-2
    1d78:	str	w0, [x20]
    1d7c:	mov	x19, #0x0                   	// #0
    1d80:	mov	x0, x19
    1d84:	ldp	x19, x20, [sp, #16]
    1d88:	ldp	x21, x22, [sp, #32]
    1d8c:	ldp	x23, x24, [sp, #48]
    1d90:	ldp	x29, x30, [sp], #64
    1d94:	ret
    1d98:	mov	x19, x20
    1d9c:	cbz	x20, 1d80 <BZ2_bzWriteOpen+0xe4>
    1da0:	mov	w0, #0xfffffffa            	// #-6
    1da4:	str	w0, [x20]
    1da8:	mov	x19, #0x0                   	// #0
    1dac:	b	1d80 <BZ2_bzWriteOpen+0xe4>
    1db0:	cbz	x20, 1dd8 <BZ2_bzWriteOpen+0x13c>
    1db4:	mov	w0, #0xfffffffd            	// #-3
    1db8:	str	w0, [x20]
    1dbc:	b	1d80 <BZ2_bzWriteOpen+0xe4>
    1dc0:	cbz	x20, 1dc8 <BZ2_bzWriteOpen+0x12c>
    1dc4:	str	w0, [x20]
    1dc8:	mov	x0, x19
    1dcc:	bl	0 <free>
    1dd0:	mov	x19, #0x0                   	// #0
    1dd4:	b	1d80 <BZ2_bzWriteOpen+0xe4>
    1dd8:	mov	x19, x20
    1ddc:	b	1d80 <BZ2_bzWriteOpen+0xe4>
    1de0:	mov	x19, x21
    1de4:	b	1d80 <BZ2_bzWriteOpen+0xe4>
    1de8:	cbz	x1, 1de0 <BZ2_bzWriteOpen+0x144>
    1dec:	sub	w0, w2, #0x1
    1df0:	cmp	w0, #0x8
    1df4:	b.ls	1cdc <BZ2_bzWriteOpen+0x40>  // b.plast
    1df8:	mov	x19, x20
    1dfc:	b	1d80 <BZ2_bzWriteOpen+0xe4>

0000000000001e00 <BZ2_bzWrite>:
    1e00:	stp	x29, x30, [sp, #-80]!
    1e04:	mov	x29, sp
    1e08:	stp	x19, x20, [sp, #16]
    1e0c:	stp	x21, x22, [sp, #32]
    1e10:	mov	x20, x0
    1e14:	mov	x19, x1
    1e18:	mov	x22, x2
    1e1c:	mov	w21, w3
    1e20:	cbz	x0, 1e28 <BZ2_bzWrite+0x28>
    1e24:	str	wzr, [x0]
    1e28:	cbz	x19, 1f78 <BZ2_bzWrite+0x178>
    1e2c:	str	wzr, [x19, #5096]
    1e30:	cmp	x22, #0x0
    1e34:	ccmp	w21, #0x0, #0x1, ne  // ne = any
    1e38:	b.lt	1f70 <BZ2_bzWrite+0x170>  // b.tstop
    1e3c:	add	x0, x19, #0x1, lsl #12
    1e40:	ldrb	w0, [x0, #916]
    1e44:	cbnz	w0, 1e60 <BZ2_bzWrite+0x60>
    1e48:	cbz	x20, 1e54 <BZ2_bzWrite+0x54>
    1e4c:	mov	w0, #0xffffffff            	// #-1
    1e50:	str	w0, [x20]
    1e54:	mov	w0, #0xffffffff            	// #-1
    1e58:	str	w0, [x19, #5096]
    1e5c:	b	1f90 <BZ2_bzWrite+0x190>
    1e60:	ldr	x0, [x19]
    1e64:	bl	0 <ferror>
    1e68:	cbnz	w0, 1e9c <BZ2_bzWrite+0x9c>
    1e6c:	cbz	w21, 1eb4 <BZ2_bzWrite+0xb4>
    1e70:	stp	x23, x24, [sp, #48]
    1e74:	stp	x25, x26, [sp, #64]
    1e78:	str	w21, [x19, #5024]
    1e7c:	str	x22, [x19, #5016]
    1e80:	mov	w22, #0x1388                	// #5000
    1e84:	add	x21, x19, #0x8
    1e88:	add	x23, x19, #0x1, lsl #12
    1e8c:	add	x23, x23, #0x398
    1e90:	mov	w24, #0x1387                	// #4999
    1e94:	mov	x25, #0x1                   	// #1
    1e98:	b	1ee4 <BZ2_bzWrite+0xe4>
    1e9c:	cbz	x20, 1ea8 <BZ2_bzWrite+0xa8>
    1ea0:	mov	w0, #0xfffffffa            	// #-6
    1ea4:	str	w0, [x20]
    1ea8:	mov	w0, #0xfffffffa            	// #-6
    1eac:	str	w0, [x19, #5096]
    1eb0:	b	1f90 <BZ2_bzWrite+0x190>
    1eb4:	cbz	x20, 1ebc <BZ2_bzWrite+0xbc>
    1eb8:	str	wzr, [x20]
    1ebc:	str	wzr, [x19, #5096]
    1ec0:	b	1f90 <BZ2_bzWrite+0x190>
    1ec4:	cbz	x20, 1ecc <BZ2_bzWrite+0xcc>
    1ec8:	str	w0, [x20]
    1ecc:	str	w0, [x19, #5096]
    1ed0:	ldp	x23, x24, [sp, #48]
    1ed4:	ldp	x25, x26, [sp, #64]
    1ed8:	b	1f90 <BZ2_bzWrite+0x190>
    1edc:	ldr	w0, [x19, #5024]
    1ee0:	cbz	w0, 1f58 <BZ2_bzWrite+0x158>
    1ee4:	str	w22, [x19, #5048]
    1ee8:	str	x21, [x19, #5040]
    1eec:	mov	w1, #0x0                   	// #0
    1ef0:	mov	x0, x23
    1ef4:	bl	93c <BZ2_bzCompress>
    1ef8:	cmp	w0, #0x1
    1efc:	b.ne	1ec4 <BZ2_bzWrite+0xc4>  // b.any
    1f00:	ldr	w0, [x19, #5048]
    1f04:	cmp	w0, w24
    1f08:	b.hi	1edc <BZ2_bzWrite+0xdc>  // b.pmore
    1f0c:	sub	w26, w22, w0
    1f10:	ldr	x3, [x19]
    1f14:	sxtw	x2, w26
    1f18:	mov	x1, x25
    1f1c:	mov	x0, x21
    1f20:	bl	0 <fwrite>
    1f24:	cmp	w26, w0
    1f28:	b.ne	1f38 <BZ2_bzWrite+0x138>  // b.any
    1f2c:	ldr	x0, [x19]
    1f30:	bl	0 <ferror>
    1f34:	cbz	w0, 1edc <BZ2_bzWrite+0xdc>
    1f38:	cbz	x20, 1f44 <BZ2_bzWrite+0x144>
    1f3c:	mov	w0, #0xfffffffa            	// #-6
    1f40:	str	w0, [x20]
    1f44:	mov	w0, #0xfffffffa            	// #-6
    1f48:	str	w0, [x19, #5096]
    1f4c:	ldp	x23, x24, [sp, #48]
    1f50:	ldp	x25, x26, [sp, #64]
    1f54:	b	1f90 <BZ2_bzWrite+0x190>
    1f58:	cbz	x20, 1f60 <BZ2_bzWrite+0x160>
    1f5c:	str	wzr, [x20]
    1f60:	str	wzr, [x19, #5096]
    1f64:	ldp	x23, x24, [sp, #48]
    1f68:	ldp	x25, x26, [sp, #64]
    1f6c:	b	1f90 <BZ2_bzWrite+0x190>
    1f70:	cbnz	x20, 1f7c <BZ2_bzWrite+0x17c>
    1f74:	b	1f88 <BZ2_bzWrite+0x188>
    1f78:	cbz	x20, 1f90 <BZ2_bzWrite+0x190>
    1f7c:	mov	w0, #0xfffffffe            	// #-2
    1f80:	str	w0, [x20]
    1f84:	cbz	x19, 1f90 <BZ2_bzWrite+0x190>
    1f88:	mov	w0, #0xfffffffe            	// #-2
    1f8c:	str	w0, [x19, #5096]
    1f90:	ldp	x19, x20, [sp, #16]
    1f94:	ldp	x21, x22, [sp, #32]
    1f98:	ldp	x29, x30, [sp], #80
    1f9c:	ret

0000000000001fa0 <BZ2_bzWriteClose64>:
    1fa0:	stp	x29, x30, [sp, #-112]!
    1fa4:	mov	x29, sp
    1fa8:	stp	x19, x20, [sp, #16]
    1fac:	mov	x20, x0
    1fb0:	cbz	x1, 2010 <BZ2_bzWriteClose64+0x70>
    1fb4:	stp	x21, x22, [sp, #32]
    1fb8:	stp	x23, x24, [sp, #48]
    1fbc:	stp	x25, x26, [sp, #64]
    1fc0:	mov	x19, x1
    1fc4:	mov	w21, w2
    1fc8:	mov	x22, x3
    1fcc:	mov	x23, x4
    1fd0:	mov	x24, x5
    1fd4:	mov	x25, x6
    1fd8:	add	x0, x1, #0x1, lsl #12
    1fdc:	ldrb	w0, [x0, #916]
    1fe0:	cbnz	w0, 201c <BZ2_bzWriteClose64+0x7c>
    1fe4:	cbz	x20, 1ff0 <BZ2_bzWriteClose64+0x50>
    1fe8:	mov	w0, #0xffffffff            	// #-1
    1fec:	str	w0, [x20]
    1ff0:	mov	w0, #0xffffffff            	// #-1
    1ff4:	str	w0, [x19, #5096]
    1ff8:	ldp	x21, x22, [sp, #32]
    1ffc:	ldp	x23, x24, [sp, #48]
    2000:	ldp	x25, x26, [sp, #64]
    2004:	ldp	x19, x20, [sp, #16]
    2008:	ldp	x29, x30, [sp], #112
    200c:	ret
    2010:	cbz	x0, 2004 <BZ2_bzWriteClose64+0x64>
    2014:	str	wzr, [x0]
    2018:	b	2004 <BZ2_bzWriteClose64+0x64>
    201c:	ldr	x0, [x1]
    2020:	bl	0 <ferror>
    2024:	cbnz	w0, 2070 <BZ2_bzWriteClose64+0xd0>
    2028:	cbz	x22, 2030 <BZ2_bzWriteClose64+0x90>
    202c:	str	wzr, [x22]
    2030:	cbz	x23, 2038 <BZ2_bzWriteClose64+0x98>
    2034:	str	wzr, [x23]
    2038:	cbz	x24, 2040 <BZ2_bzWriteClose64+0xa0>
    203c:	str	wzr, [x24]
    2040:	cbz	x25, 2048 <BZ2_bzWriteClose64+0xa8>
    2044:	str	wzr, [x25]
    2048:	cbnz	w21, 2154 <BZ2_bzWriteClose64+0x1b4>
    204c:	ldr	w0, [x19, #5096]
    2050:	cbnz	w0, 2148 <BZ2_bzWriteClose64+0x1a8>
    2054:	stp	x27, x28, [sp, #80]
    2058:	mov	w28, #0x1388                	// #5000
    205c:	add	x27, x19, #0x8
    2060:	add	x0, x19, #0x1, lsl #12
    2064:	add	x0, x0, #0x398
    2068:	str	x0, [sp, #104]
    206c:	b	20bc <BZ2_bzWriteClose64+0x11c>
    2070:	cbz	x20, 207c <BZ2_bzWriteClose64+0xdc>
    2074:	mov	w0, #0xfffffffa            	// #-6
    2078:	str	w0, [x20]
    207c:	mov	w0, #0xfffffffa            	// #-6
    2080:	str	w0, [x19, #5096]
    2084:	ldp	x21, x22, [sp, #32]
    2088:	ldp	x23, x24, [sp, #48]
    208c:	ldp	x25, x26, [sp, #64]
    2090:	b	2004 <BZ2_bzWriteClose64+0x64>
    2094:	cbz	x20, 209c <BZ2_bzWriteClose64+0xfc>
    2098:	str	w21, [x20]
    209c:	str	w21, [x19, #5096]
    20a0:	ldp	x21, x22, [sp, #32]
    20a4:	ldp	x23, x24, [sp, #48]
    20a8:	ldp	x25, x26, [sp, #64]
    20ac:	ldp	x27, x28, [sp, #80]
    20b0:	b	2004 <BZ2_bzWriteClose64+0x64>
    20b4:	cmp	w21, #0x4
    20b8:	b.eq	2144 <BZ2_bzWriteClose64+0x1a4>  // b.none
    20bc:	str	w28, [x19, #5048]
    20c0:	str	x27, [x19, #5040]
    20c4:	mov	w1, #0x2                   	// #2
    20c8:	ldr	x0, [sp, #104]
    20cc:	bl	93c <BZ2_bzCompress>
    20d0:	mov	w21, w0
    20d4:	sub	w0, w0, #0x3
    20d8:	cmp	w0, #0x1
    20dc:	b.hi	2094 <BZ2_bzWriteClose64+0xf4>  // b.pmore
    20e0:	ldr	w26, [x19, #5048]
    20e4:	mov	w0, #0x1387                	// #4999
    20e8:	cmp	w26, w0
    20ec:	b.hi	20b4 <BZ2_bzWriteClose64+0x114>  // b.pmore
    20f0:	sub	w26, w28, w26
    20f4:	ldr	x3, [x19]
    20f8:	sxtw	x2, w26
    20fc:	mov	x1, #0x1                   	// #1
    2100:	mov	x0, x27
    2104:	bl	0 <fwrite>
    2108:	cmp	w26, w0
    210c:	b.ne	211c <BZ2_bzWriteClose64+0x17c>  // b.any
    2110:	ldr	x0, [x19]
    2114:	bl	0 <ferror>
    2118:	cbz	w0, 20b4 <BZ2_bzWriteClose64+0x114>
    211c:	cbz	x20, 2128 <BZ2_bzWriteClose64+0x188>
    2120:	mov	w0, #0xfffffffa            	// #-6
    2124:	str	w0, [x20]
    2128:	mov	w0, #0xfffffffa            	// #-6
    212c:	str	w0, [x19, #5096]
    2130:	ldp	x21, x22, [sp, #32]
    2134:	ldp	x23, x24, [sp, #48]
    2138:	ldp	x25, x26, [sp, #64]
    213c:	ldp	x27, x28, [sp, #80]
    2140:	b	2004 <BZ2_bzWriteClose64+0x64>
    2144:	ldp	x27, x28, [sp, #80]
    2148:	ldr	x0, [x19]
    214c:	bl	0 <ferror>
    2150:	cbz	w0, 21b4 <BZ2_bzWriteClose64+0x214>
    2154:	cbz	x22, 2160 <BZ2_bzWriteClose64+0x1c0>
    2158:	ldr	w0, [x19, #5028]
    215c:	str	w0, [x22]
    2160:	cbz	x23, 216c <BZ2_bzWriteClose64+0x1cc>
    2164:	ldr	w0, [x19, #5032]
    2168:	str	w0, [x23]
    216c:	cbz	x24, 2178 <BZ2_bzWriteClose64+0x1d8>
    2170:	ldr	w0, [x19, #5052]
    2174:	str	w0, [x24]
    2178:	cbz	x25, 2184 <BZ2_bzWriteClose64+0x1e4>
    217c:	ldr	w0, [x19, #5056]
    2180:	str	w0, [x25]
    2184:	cbz	x20, 218c <BZ2_bzWriteClose64+0x1ec>
    2188:	str	wzr, [x20]
    218c:	str	wzr, [x19, #5096]
    2190:	add	x0, x19, #0x1, lsl #12
    2194:	add	x0, x0, #0x398
    2198:	bl	b84 <BZ2_bzCompressEnd>
    219c:	mov	x0, x19
    21a0:	bl	0 <free>
    21a4:	ldp	x21, x22, [sp, #32]
    21a8:	ldp	x23, x24, [sp, #48]
    21ac:	ldp	x25, x26, [sp, #64]
    21b0:	b	2004 <BZ2_bzWriteClose64+0x64>
    21b4:	ldr	x0, [x19]
    21b8:	bl	0 <fflush>
    21bc:	ldr	x0, [x19]
    21c0:	bl	0 <ferror>
    21c4:	cbz	w0, 2154 <BZ2_bzWriteClose64+0x1b4>
    21c8:	cbz	x20, 21d4 <BZ2_bzWriteClose64+0x234>
    21cc:	mov	w0, #0xfffffffa            	// #-6
    21d0:	str	w0, [x20]
    21d4:	mov	w0, #0xfffffffa            	// #-6
    21d8:	str	w0, [x19, #5096]
    21dc:	ldp	x21, x22, [sp, #32]
    21e0:	ldp	x23, x24, [sp, #48]
    21e4:	ldp	x25, x26, [sp, #64]
    21e8:	b	2004 <BZ2_bzWriteClose64+0x64>

00000000000021ec <BZ2_bzWriteClose>:
    21ec:	stp	x29, x30, [sp, #-16]!
    21f0:	mov	x29, sp
    21f4:	mov	x6, #0x0                   	// #0
    21f8:	mov	x5, x4
    21fc:	mov	x4, #0x0                   	// #0
    2200:	bl	1fa0 <BZ2_bzWriteClose64>
    2204:	ldp	x29, x30, [sp], #16
    2208:	ret

000000000000220c <BZ2_bzReadOpen>:
    220c:	stp	x29, x30, [sp, #-80]!
    2210:	mov	x29, sp
    2214:	stp	x19, x20, [sp, #16]
    2218:	stp	x21, x22, [sp, #32]
    221c:	stp	x23, x24, [sp, #48]
    2220:	str	x25, [sp, #64]
    2224:	mov	x20, x0
    2228:	mov	x23, x1
    222c:	mov	w25, w2
    2230:	mov	w24, w3
    2234:	mov	x21, x4
    2238:	mov	w22, w5
    223c:	cbz	x0, 23a0 <BZ2_bzReadOpen+0x194>
    2240:	str	wzr, [x0]
    2244:	cmp	x1, #0x0
    2248:	ccmp	w3, #0x1, #0x2, ne  // ne = any
    224c:	b.hi	2328 <BZ2_bzReadOpen+0x11c>  // b.pmore
    2250:	cmp	w2, #0x4
    2254:	b.hi	2328 <BZ2_bzReadOpen+0x11c>  // b.pmore
    2258:	cmp	x21, #0x0
    225c:	ccmp	w22, #0x0, #0x4, eq  // eq = none
    2260:	b.ne	2320 <BZ2_bzReadOpen+0x114>  // b.any
    2264:	cmp	x21, #0x0
    2268:	mov	w0, #0x1388                	// #5000
    226c:	ccmp	w22, w0, #0x0, ne  // ne = any
    2270:	b.hi	2320 <BZ2_bzReadOpen+0x114>  // b.pmore
    2274:	mov	x0, x23
    2278:	bl	0 <ferror>
    227c:	cbnz	w0, 2350 <BZ2_bzReadOpen+0x144>
    2280:	mov	x0, #0x13f0                	// #5104
    2284:	bl	0 <malloc>
    2288:	mov	x19, x0
    228c:	cbz	x0, 2368 <BZ2_bzReadOpen+0x15c>
    2290:	cbz	x20, 2298 <BZ2_bzReadOpen+0x8c>
    2294:	str	wzr, [x20]
    2298:	str	wzr, [x19, #5096]
    229c:	add	x0, x19, #0x1, lsl #12
    22a0:	strb	wzr, [x0, #1004]
    22a4:	str	x23, [x19]
    22a8:	str	wzr, [x19, #5008]
    22ac:	strb	wzr, [x0, #916]
    22b0:	str	xzr, [x19, #5072]
    22b4:	str	xzr, [x19, #5080]
    22b8:	str	xzr, [x19, #5088]
    22bc:	cmp	w22, #0x0
    22c0:	b.le	22e8 <BZ2_bzReadOpen+0xdc>
    22c4:	sub	w3, w22, #0x1
    22c8:	mov	x1, #0x0                   	// #0
    22cc:	add	x2, x19, #0x8
    22d0:	ldrb	w0, [x21, x1]
    22d4:	strb	w0, [x2, x1]
    22d8:	cmp	x1, x3
    22dc:	add	x1, x1, #0x1
    22e0:	b.ne	22d0 <BZ2_bzReadOpen+0xc4>  // b.any
    22e4:	str	w22, [x19, #5008]
    22e8:	mov	w2, w24
    22ec:	mov	w1, w25
    22f0:	add	x0, x19, #0x1, lsl #12
    22f4:	add	x0, x0, #0x398
    22f8:	bl	c24 <BZ2_bzDecompressInit>
    22fc:	cbnz	w0, 2378 <BZ2_bzReadOpen+0x16c>
    2300:	ldr	w0, [x19, #5008]
    2304:	str	w0, [x19, #5024]
    2308:	add	x0, x19, #0x8
    230c:	str	x0, [x19, #5016]
    2310:	add	x0, x19, #0x1, lsl #12
    2314:	mov	w1, #0x1                   	// #1
    2318:	strb	w1, [x0, #1004]
    231c:	b	2334 <BZ2_bzReadOpen+0x128>
    2320:	mov	x19, x20
    2324:	cbz	x20, 2334 <BZ2_bzReadOpen+0x128>
    2328:	mov	w0, #0xfffffffe            	// #-2
    232c:	str	w0, [x20]
    2330:	mov	x19, #0x0                   	// #0
    2334:	mov	x0, x19
    2338:	ldp	x19, x20, [sp, #16]
    233c:	ldp	x21, x22, [sp, #32]
    2340:	ldp	x23, x24, [sp, #48]
    2344:	ldr	x25, [sp, #64]
    2348:	ldp	x29, x30, [sp], #80
    234c:	ret
    2350:	mov	x19, x20
    2354:	cbz	x20, 2334 <BZ2_bzReadOpen+0x128>
    2358:	mov	w0, #0xfffffffa            	// #-6
    235c:	str	w0, [x20]
    2360:	mov	x19, #0x0                   	// #0
    2364:	b	2334 <BZ2_bzReadOpen+0x128>
    2368:	cbz	x20, 2390 <BZ2_bzReadOpen+0x184>
    236c:	mov	w0, #0xfffffffd            	// #-3
    2370:	str	w0, [x20]
    2374:	b	2334 <BZ2_bzReadOpen+0x128>
    2378:	cbz	x20, 2380 <BZ2_bzReadOpen+0x174>
    237c:	str	w0, [x20]
    2380:	mov	x0, x19
    2384:	bl	0 <free>
    2388:	mov	x19, #0x0                   	// #0
    238c:	b	2334 <BZ2_bzReadOpen+0x128>
    2390:	mov	x19, x20
    2394:	b	2334 <BZ2_bzReadOpen+0x128>
    2398:	mov	x19, x20
    239c:	b	2334 <BZ2_bzReadOpen+0x128>
    23a0:	cmp	x1, #0x0
    23a4:	ccmp	w3, #0x1, #0x2, ne  // ne = any
    23a8:	b.hi	2398 <BZ2_bzReadOpen+0x18c>  // b.pmore
    23ac:	cmp	w2, #0x4
    23b0:	b.ls	2258 <BZ2_bzReadOpen+0x4c>  // b.plast
    23b4:	mov	x19, x20
    23b8:	b	2334 <BZ2_bzReadOpen+0x128>

00000000000023bc <bzopen_or_bzdopen>:
    23bc:	mov	x12, #0x1400                	// #5120
    23c0:	sub	sp, sp, x12
    23c4:	stp	x29, x30, [sp]
    23c8:	mov	x29, sp
    23cc:	stp	x19, x20, [sp, #16]
    23d0:	stp	x23, x24, [sp, #48]
    23d4:	mov	x24, x0
    23d8:	mov	x20, x2
    23dc:	adrp	x0, 0 <add_pair_to_block>
    23e0:	ldrb	w0, [x0]
    23e4:	strb	w0, [sp, #96]
    23e8:	stur	xzr, [sp, #97]
    23ec:	strb	wzr, [sp, #105]
    23f0:	cbz	x2, 250c <bzopen_or_bzdopen+0x150>
    23f4:	stp	x21, x22, [sp, #32]
    23f8:	stp	x25, x26, [sp, #64]
    23fc:	stp	x27, x28, [sp, #80]
    2400:	mov	w27, w1
    2404:	mov	w25, w3
    2408:	ldrb	w19, [x2]
    240c:	cbz	w19, 2528 <bzopen_or_bzdopen+0x16c>
    2410:	mov	w26, #0x0                   	// #0
    2414:	mov	w21, #0x0                   	// #0
    2418:	mov	w22, #0x9                   	// #9
    241c:	mov	w23, #0x1                   	// #1
    2420:	mov	w28, #0x0                   	// #0
    2424:	b	243c <bzopen_or_bzdopen+0x80>
    2428:	mov	w26, w23
    242c:	b	2434 <bzopen_or_bzdopen+0x78>
    2430:	mov	w21, w23
    2434:	ldrb	w19, [x20, #1]!
    2438:	cbz	w19, 247c <bzopen_or_bzdopen+0xc0>
    243c:	cmp	w19, #0x73
    2440:	b.eq	2428 <bzopen_or_bzdopen+0x6c>  // b.none
    2444:	cmp	w19, #0x77
    2448:	b.eq	2430 <bzopen_or_bzdopen+0x74>  // b.none
    244c:	cmp	w19, #0x72
    2450:	b.eq	2474 <bzopen_or_bzdopen+0xb8>  // b.none
    2454:	bl	0 <__ctype_b_loc>
    2458:	and	x1, x19, #0xff
    245c:	ldr	x0, [x0]
    2460:	ldrh	w0, [x0, x1, lsl #1]
    2464:	sub	w19, w19, #0x30
    2468:	tst	x0, #0x800
    246c:	csel	w22, w19, w22, ne  // ne = any
    2470:	b	2434 <bzopen_or_bzdopen+0x78>
    2474:	mov	w21, w28
    2478:	b	2434 <bzopen_or_bzdopen+0x78>
    247c:	cmp	w21, #0x0
    2480:	mov	w20, #0x72                  	// #114
    2484:	mov	w0, #0x77                  	// #119
    2488:	csel	w20, w20, w0, eq  // eq = none
    248c:	add	x19, sp, #0x60
    2490:	mov	x0, x19
    2494:	bl	0 <strlen>
    2498:	strh	w20, [x19, x0]
    249c:	mov	x0, x19
    24a0:	bl	0 <strlen>
    24a4:	mov	w1, #0x62                  	// #98
    24a8:	strh	w1, [x19, x0]
    24ac:	cbnz	w25, 2584 <bzopen_or_bzdopen+0x1c8>
    24b0:	cbz	x24, 24bc <bzopen_or_bzdopen+0x100>
    24b4:	ldrb	w0, [x24]
    24b8:	cbnz	w0, 2570 <bzopen_or_bzdopen+0x1b4>
    24bc:	cbz	w21, 253c <bzopen_or_bzdopen+0x180>
    24c0:	adrp	x0, 0 <stdout>
    24c4:	ldr	x19, [x0]
    24c8:	cbz	x19, 25d8 <bzopen_or_bzdopen+0x21c>
    24cc:	cmp	w22, #0x9
    24d0:	mov	w2, #0x9                   	// #9
    24d4:	csel	w2, w22, w2, le
    24d8:	cmp	w2, #0x0
    24dc:	mov	w4, #0x1e                  	// #30
    24e0:	mov	w3, #0x0                   	// #0
    24e4:	csinc	w2, w2, wzr, gt
    24e8:	mov	x1, x19
    24ec:	add	x0, sp, #0x1, lsl #12
    24f0:	add	x0, x0, #0x3fc
    24f4:	bl	1c9c <BZ2_bzWriteOpen>
    24f8:	mov	x20, x0
    24fc:	cbz	x20, 25a0 <bzopen_or_bzdopen+0x1e4>
    2500:	ldp	x21, x22, [sp, #32]
    2504:	ldp	x25, x26, [sp, #64]
    2508:	ldp	x27, x28, [sp, #80]
    250c:	mov	x0, x20
    2510:	ldp	x19, x20, [sp, #16]
    2514:	ldp	x23, x24, [sp, #48]
    2518:	ldp	x29, x30, [sp]
    251c:	mov	x12, #0x1400                	// #5120
    2520:	add	sp, sp, x12
    2524:	ret
    2528:	mov	w26, #0x0                   	// #0
    252c:	mov	w21, #0x0                   	// #0
    2530:	mov	w22, #0x9                   	// #9
    2534:	mov	w20, #0x72                  	// #114
    2538:	b	248c <bzopen_or_bzdopen+0xd0>
    253c:	adrp	x0, 0 <stdin>
    2540:	ldr	x19, [x0]
    2544:	cbz	x19, 25ec <bzopen_or_bzdopen+0x230>
    2548:	mov	w5, #0x0                   	// #0
    254c:	add	x4, sp, #0x70
    2550:	mov	w3, w26
    2554:	mov	w2, #0x0                   	// #0
    2558:	mov	x1, x19
    255c:	add	x0, sp, #0x1, lsl #12
    2560:	add	x0, x0, #0x3fc
    2564:	bl	220c <BZ2_bzReadOpen>
    2568:	mov	x20, x0
    256c:	b	24fc <bzopen_or_bzdopen+0x140>
    2570:	add	x1, sp, #0x60
    2574:	mov	x0, x24
    2578:	bl	0 <fopen64>
    257c:	mov	x19, x0
    2580:	b	2594 <bzopen_or_bzdopen+0x1d8>
    2584:	add	x1, sp, #0x60
    2588:	mov	w0, w27
    258c:	bl	0 <fdopen>
    2590:	mov	x19, x0
    2594:	cbz	x19, 2600 <bzopen_or_bzdopen+0x244>
    2598:	cbz	w21, 2548 <bzopen_or_bzdopen+0x18c>
    259c:	b	24cc <bzopen_or_bzdopen+0x110>
    25a0:	adrp	x0, 0 <stdin>
    25a4:	ldr	x0, [x0]
    25a8:	cmp	x0, x19
    25ac:	b.eq	2614 <bzopen_or_bzdopen+0x258>  // b.none
    25b0:	adrp	x0, 0 <stdout>
    25b4:	ldr	x0, [x0]
    25b8:	cmp	x0, x19
    25bc:	b.eq	2624 <bzopen_or_bzdopen+0x268>  // b.none
    25c0:	mov	x0, x19
    25c4:	bl	0 <fclose>
    25c8:	ldp	x21, x22, [sp, #32]
    25cc:	ldp	x25, x26, [sp, #64]
    25d0:	ldp	x27, x28, [sp, #80]
    25d4:	b	250c <bzopen_or_bzdopen+0x150>
    25d8:	mov	x20, x19
    25dc:	ldp	x21, x22, [sp, #32]
    25e0:	ldp	x25, x26, [sp, #64]
    25e4:	ldp	x27, x28, [sp, #80]
    25e8:	b	250c <bzopen_or_bzdopen+0x150>
    25ec:	mov	x20, x19
    25f0:	ldp	x21, x22, [sp, #32]
    25f4:	ldp	x25, x26, [sp, #64]
    25f8:	ldp	x27, x28, [sp, #80]
    25fc:	b	250c <bzopen_or_bzdopen+0x150>
    2600:	mov	x20, x19
    2604:	ldp	x21, x22, [sp, #32]
    2608:	ldp	x25, x26, [sp, #64]
    260c:	ldp	x27, x28, [sp, #80]
    2610:	b	250c <bzopen_or_bzdopen+0x150>
    2614:	ldp	x21, x22, [sp, #32]
    2618:	ldp	x25, x26, [sp, #64]
    261c:	ldp	x27, x28, [sp, #80]
    2620:	b	250c <bzopen_or_bzdopen+0x150>
    2624:	ldp	x21, x22, [sp, #32]
    2628:	ldp	x25, x26, [sp, #64]
    262c:	ldp	x27, x28, [sp, #80]
    2630:	b	250c <bzopen_or_bzdopen+0x150>

0000000000002634 <BZ2_bzReadClose>:
    2634:	stp	x29, x30, [sp, #-32]!
    2638:	mov	x29, sp
    263c:	str	x19, [sp, #16]
    2640:	mov	x19, x1
    2644:	cbz	x0, 26b0 <BZ2_bzReadClose+0x7c>
    2648:	str	wzr, [x0]
    264c:	cbz	x1, 2680 <BZ2_bzReadClose+0x4c>
    2650:	str	wzr, [x19, #5096]
    2654:	add	x1, x19, #0x1, lsl #12
    2658:	ldrb	w1, [x1, #916]
    265c:	cbnz	w1, 2688 <BZ2_bzReadClose+0x54>
    2660:	add	x0, x19, #0x1, lsl #12
    2664:	ldrb	w0, [x0, #1004]
    2668:	cbnz	w0, 26a0 <BZ2_bzReadClose+0x6c>
    266c:	mov	x0, x19
    2670:	bl	0 <free>
    2674:	ldr	x19, [sp, #16]
    2678:	ldp	x29, x30, [sp], #32
    267c:	ret
    2680:	str	wzr, [x0]
    2684:	b	2674 <BZ2_bzReadClose+0x40>
    2688:	cbz	x0, 2694 <BZ2_bzReadClose+0x60>
    268c:	mov	w1, #0xffffffff            	// #-1
    2690:	str	w1, [x0]
    2694:	mov	w0, #0xffffffff            	// #-1
    2698:	str	w0, [x19, #5096]
    269c:	b	2674 <BZ2_bzReadClose+0x40>
    26a0:	add	x0, x19, #0x1, lsl #12
    26a4:	add	x0, x0, #0x398
    26a8:	bl	1bfc <BZ2_bzDecompressEnd>
    26ac:	b	266c <BZ2_bzReadClose+0x38>
    26b0:	cbnz	x1, 2650 <BZ2_bzReadClose+0x1c>
    26b4:	b	2674 <BZ2_bzReadClose+0x40>

00000000000026b8 <BZ2_bzRead>:
    26b8:	stp	x29, x30, [sp, #-96]!
    26bc:	mov	x29, sp
    26c0:	stp	x19, x20, [sp, #16]
    26c4:	stp	x21, x22, [sp, #32]
    26c8:	stp	x23, x24, [sp, #48]
    26cc:	mov	x22, x0
    26d0:	mov	x19, x1
    26d4:	mov	w23, w3
    26d8:	cbz	x0, 26e0 <BZ2_bzRead+0x28>
    26dc:	str	wzr, [x0]
    26e0:	cbz	x19, 28e8 <BZ2_bzRead+0x230>
    26e4:	str	wzr, [x19, #5096]
    26e8:	cmp	x2, #0x0
    26ec:	ccmp	w23, #0x0, #0x1, ne  // ne = any
    26f0:	b.lt	2920 <BZ2_bzRead+0x268>  // b.tstop
    26f4:	add	x0, x19, #0x1, lsl #12
    26f8:	ldrb	w0, [x0, #916]
    26fc:	cbnz	w0, 272c <BZ2_bzRead+0x74>
    2700:	cbz	w23, 2748 <BZ2_bzRead+0x90>
    2704:	stp	x25, x26, [sp, #64]
    2708:	str	x27, [sp, #80]
    270c:	str	w23, [x19, #5048]
    2710:	str	x2, [x19, #5040]
    2714:	add	x25, x19, #0x8
    2718:	mov	x27, #0x1388                	// #5000
    271c:	mov	x26, #0x1                   	// #1
    2720:	add	x24, x19, #0x1, lsl #12
    2724:	add	x24, x24, #0x398
    2728:	b	27c8 <BZ2_bzRead+0x110>
    272c:	cbz	x22, 2738 <BZ2_bzRead+0x80>
    2730:	mov	w0, #0xffffffff            	// #-1
    2734:	str	w0, [x22]
    2738:	mov	w0, #0xffffffff            	// #-1
    273c:	str	w0, [x19, #5096]
    2740:	mov	w21, #0x0                   	// #0
    2744:	b	2908 <BZ2_bzRead+0x250>
    2748:	cbz	x22, 2750 <BZ2_bzRead+0x98>
    274c:	str	wzr, [x22]
    2750:	str	wzr, [x19, #5096]
    2754:	mov	w21, w23
    2758:	b	2908 <BZ2_bzRead+0x250>
    275c:	cbz	x22, 2768 <BZ2_bzRead+0xb0>
    2760:	mov	w0, #0xfffffffa            	// #-6
    2764:	str	w0, [x22]
    2768:	mov	w0, #0xfffffffa            	// #-6
    276c:	str	w0, [x19, #5096]
    2770:	mov	w21, #0x0                   	// #0
    2774:	ldp	x25, x26, [sp, #64]
    2778:	ldr	x27, [sp, #80]
    277c:	b	2908 <BZ2_bzRead+0x250>
    2780:	cbz	x22, 278c <BZ2_bzRead+0xd4>
    2784:	mov	w0, #0xfffffffa            	// #-6
    2788:	str	w0, [x22]
    278c:	mov	w0, #0xfffffffa            	// #-6
    2790:	str	w0, [x19, #5096]
    2794:	ldp	x25, x26, [sp, #64]
    2798:	ldr	x27, [sp, #80]
    279c:	b	2908 <BZ2_bzRead+0x250>
    27a0:	mov	x0, x24
    27a4:	bl	d48 <BZ2_bzDecompress>
    27a8:	mov	w20, w0
    27ac:	tst	w0, #0xfffffffb
    27b0:	b.ne	2830 <BZ2_bzRead+0x178>  // b.any
    27b4:	cbz	w0, 2848 <BZ2_bzRead+0x190>
    27b8:	cmp	w0, #0x4
    27bc:	b.eq	288c <BZ2_bzRead+0x1d4>  // b.none
    27c0:	ldr	w0, [x19, #5048]
    27c4:	cbz	w0, 28cc <BZ2_bzRead+0x214>
    27c8:	ldr	x0, [x19]
    27cc:	bl	0 <ferror>
    27d0:	mov	w21, w0
    27d4:	cbnz	w0, 275c <BZ2_bzRead+0xa4>
    27d8:	ldr	w0, [x19, #5024]
    27dc:	cbnz	w0, 27a0 <BZ2_bzRead+0xe8>
    27e0:	ldr	x20, [x19]
    27e4:	mov	x0, x20
    27e8:	bl	0 <fgetc>
    27ec:	cmn	w0, #0x1
    27f0:	b.eq	27a0 <BZ2_bzRead+0xe8>  // b.none
    27f4:	mov	x1, x20
    27f8:	bl	0 <ungetc>
    27fc:	ldr	x3, [x19]
    2800:	mov	x2, x27
    2804:	mov	x1, x26
    2808:	mov	x0, x25
    280c:	bl	0 <fread>
    2810:	mov	x20, x0
    2814:	ldr	x0, [x19]
    2818:	bl	0 <ferror>
    281c:	cbnz	w0, 2780 <BZ2_bzRead+0xc8>
    2820:	str	w20, [x19, #5008]
    2824:	str	w20, [x19, #5024]
    2828:	str	x25, [x19, #5016]
    282c:	b	27a0 <BZ2_bzRead+0xe8>
    2830:	cbz	x22, 2838 <BZ2_bzRead+0x180>
    2834:	str	w0, [x22]
    2838:	str	w20, [x19, #5096]
    283c:	ldp	x25, x26, [sp, #64]
    2840:	ldr	x27, [sp, #80]
    2844:	b	2908 <BZ2_bzRead+0x250>
    2848:	ldr	x21, [x19]
    284c:	mov	x0, x21
    2850:	bl	0 <fgetc>
    2854:	cmn	w0, #0x1
    2858:	b.eq	28bc <BZ2_bzRead+0x204>  // b.none
    285c:	mov	x1, x21
    2860:	bl	0 <ungetc>
    2864:	b	27c0 <BZ2_bzRead+0x108>
    2868:	cbz	x22, 2874 <BZ2_bzRead+0x1bc>
    286c:	mov	w0, #0xfffffff9            	// #-7
    2870:	str	w0, [x22]
    2874:	mov	w0, #0xfffffff9            	// #-7
    2878:	str	w0, [x19, #5096]
    287c:	mov	w21, w20
    2880:	ldp	x25, x26, [sp, #64]
    2884:	ldr	x27, [sp, #80]
    2888:	b	2908 <BZ2_bzRead+0x250>
    288c:	cbz	x22, 2898 <BZ2_bzRead+0x1e0>
    2890:	mov	w0, #0x4                   	// #4
    2894:	str	w0, [x22]
    2898:	mov	w0, #0x4                   	// #4
    289c:	str	w0, [x19, #5096]
    28a0:	ldr	w21, [x19, #5048]
    28a4:	sub	w21, w23, w21
    28a8:	ldp	x25, x26, [sp, #64]
    28ac:	ldr	x27, [sp, #80]
    28b0:	b	2908 <BZ2_bzRead+0x250>
    28b4:	mov	w21, #0x0                   	// #0
    28b8:	b	2908 <BZ2_bzRead+0x250>
    28bc:	ldr	w0, [x19, #5024]
    28c0:	cbnz	w0, 27c0 <BZ2_bzRead+0x108>
    28c4:	ldr	w0, [x19, #5048]
    28c8:	cbnz	w0, 2868 <BZ2_bzRead+0x1b0>
    28cc:	cbz	x22, 28d4 <BZ2_bzRead+0x21c>
    28d0:	str	wzr, [x22]
    28d4:	str	wzr, [x19, #5096]
    28d8:	mov	w21, w23
    28dc:	ldp	x25, x26, [sp, #64]
    28e0:	ldr	x27, [sp, #80]
    28e4:	b	2908 <BZ2_bzRead+0x250>
    28e8:	mov	w21, #0x0                   	// #0
    28ec:	cbz	x22, 2908 <BZ2_bzRead+0x250>
    28f0:	mov	w0, #0xfffffffe            	// #-2
    28f4:	str	w0, [x22]
    28f8:	cbz	x19, 28b4 <BZ2_bzRead+0x1fc>
    28fc:	mov	w0, #0xfffffffe            	// #-2
    2900:	str	w0, [x19, #5096]
    2904:	mov	w21, #0x0                   	// #0
    2908:	mov	w0, w21
    290c:	ldp	x19, x20, [sp, #16]
    2910:	ldp	x21, x22, [sp, #32]
    2914:	ldp	x23, x24, [sp, #48]
    2918:	ldp	x29, x30, [sp], #96
    291c:	ret
    2920:	cbnz	x22, 28f0 <BZ2_bzRead+0x238>
    2924:	b	28fc <BZ2_bzRead+0x244>

0000000000002928 <BZ2_bzReadGetUnused>:
    2928:	cbz	x1, 2950 <BZ2_bzReadGetUnused+0x28>
    292c:	ldr	w4, [x1, #5096]
    2930:	cmp	w4, #0x4
    2934:	b.eq	2960 <BZ2_bzReadGetUnused+0x38>  // b.none
    2938:	cbz	x0, 2944 <BZ2_bzReadGetUnused+0x1c>
    293c:	mov	w2, #0xffffffff            	// #-1
    2940:	str	w2, [x0]
    2944:	mov	w0, #0xffffffff            	// #-1
    2948:	str	w0, [x1, #5096]
    294c:	ret
    2950:	cbz	x0, 294c <BZ2_bzReadGetUnused+0x24>
    2954:	mov	w1, #0xfffffffe            	// #-2
    2958:	str	w1, [x0]
    295c:	b	294c <BZ2_bzReadGetUnused+0x24>
    2960:	cmp	x2, #0x0
    2964:	ccmp	x3, #0x0, #0x4, ne  // ne = any
    2968:	b.eq	298c <BZ2_bzReadGetUnused+0x64>  // b.none
    296c:	cbz	x0, 2974 <BZ2_bzReadGetUnused+0x4c>
    2970:	str	wzr, [x0]
    2974:	str	wzr, [x1, #5096]
    2978:	ldr	w0, [x1, #5024]
    297c:	str	w0, [x3]
    2980:	ldr	x0, [x1, #5016]
    2984:	str	x0, [x2]
    2988:	b	294c <BZ2_bzReadGetUnused+0x24>
    298c:	cbz	x0, 2998 <BZ2_bzReadGetUnused+0x70>
    2990:	mov	w2, #0xfffffffe            	// #-2
    2994:	str	w2, [x0]
    2998:	mov	w0, #0xfffffffe            	// #-2
    299c:	str	w0, [x1, #5096]
    29a0:	b	294c <BZ2_bzReadGetUnused+0x24>

00000000000029a4 <BZ2_bzBuffToBuffCompress>:
    29a4:	stp	x29, x30, [sp, #-144]!
    29a8:	mov	x29, sp
    29ac:	stp	x19, x20, [sp, #16]
    29b0:	mov	x20, x1
    29b4:	cmp	x0, #0x0
    29b8:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    29bc:	b.eq	2ac0 <BZ2_bzBuffToBuffCompress+0x11c>  // b.none
    29c0:	stp	x21, x22, [sp, #32]
    29c4:	str	x23, [sp, #48]
    29c8:	mov	x21, x0
    29cc:	mov	x22, x2
    29d0:	mov	w23, w3
    29d4:	mov	w1, w4
    29d8:	mov	w2, w5
    29dc:	sub	w0, w4, #0x1
    29e0:	cmp	x22, #0x0
    29e4:	ccmp	w0, #0x8, #0x2, ne  // ne = any
    29e8:	b.hi	2ac8 <BZ2_bzBuffToBuffCompress+0x124>  // b.pmore
    29ec:	cmp	w6, #0xfa
    29f0:	ccmp	w5, #0x4, #0x2, ls  // ls = plast
    29f4:	b.hi	2ad8 <BZ2_bzBuffToBuffCompress+0x134>  // b.pmore
    29f8:	cmp	w6, #0x0
    29fc:	str	xzr, [sp, #120]
    2a00:	str	xzr, [sp, #128]
    2a04:	str	xzr, [sp, #136]
    2a08:	mov	w3, #0x1e                  	// #30
    2a0c:	csel	w3, w6, w3, ne  // ne = any
    2a10:	add	x0, sp, #0x40
    2a14:	bl	70c <BZ2_bzCompressInit>
    2a18:	mov	w19, w0
    2a1c:	cbz	w0, 2a38 <BZ2_bzBuffToBuffCompress+0x94>
    2a20:	ldp	x21, x22, [sp, #32]
    2a24:	ldr	x23, [sp, #48]
    2a28:	mov	w0, w19
    2a2c:	ldp	x19, x20, [sp, #16]
    2a30:	ldp	x29, x30, [sp], #144
    2a34:	ret
    2a38:	str	x22, [sp, #64]
    2a3c:	str	x21, [sp, #88]
    2a40:	str	w23, [sp, #72]
    2a44:	ldr	w0, [x20]
    2a48:	str	w0, [sp, #96]
    2a4c:	mov	w1, #0x2                   	// #2
    2a50:	add	x0, sp, #0x40
    2a54:	bl	93c <BZ2_bzCompress>
    2a58:	mov	w21, w0
    2a5c:	cmp	w0, #0x3
    2a60:	b.eq	2a84 <BZ2_bzBuffToBuffCompress+0xe0>  // b.none
    2a64:	cmp	w0, #0x4
    2a68:	b.eq	2a9c <BZ2_bzBuffToBuffCompress+0xf8>  // b.none
    2a6c:	add	x0, sp, #0x40
    2a70:	bl	b84 <BZ2_bzCompressEnd>
    2a74:	mov	w19, w21
    2a78:	ldp	x21, x22, [sp, #32]
    2a7c:	ldr	x23, [sp, #48]
    2a80:	b	2a28 <BZ2_bzBuffToBuffCompress+0x84>
    2a84:	add	x0, sp, #0x40
    2a88:	bl	b84 <BZ2_bzCompressEnd>
    2a8c:	mov	w19, #0xfffffff8            	// #-8
    2a90:	ldp	x21, x22, [sp, #32]
    2a94:	ldr	x23, [sp, #48]
    2a98:	b	2a28 <BZ2_bzBuffToBuffCompress+0x84>
    2a9c:	ldr	w0, [x20]
    2aa0:	ldr	w1, [sp, #96]
    2aa4:	sub	w0, w0, w1
    2aa8:	str	w0, [x20]
    2aac:	add	x0, sp, #0x40
    2ab0:	bl	b84 <BZ2_bzCompressEnd>
    2ab4:	ldp	x21, x22, [sp, #32]
    2ab8:	ldr	x23, [sp, #48]
    2abc:	b	2a28 <BZ2_bzBuffToBuffCompress+0x84>
    2ac0:	mov	w19, #0xfffffffe            	// #-2
    2ac4:	b	2a28 <BZ2_bzBuffToBuffCompress+0x84>
    2ac8:	mov	w19, #0xfffffffe            	// #-2
    2acc:	ldp	x21, x22, [sp, #32]
    2ad0:	ldr	x23, [sp, #48]
    2ad4:	b	2a28 <BZ2_bzBuffToBuffCompress+0x84>
    2ad8:	mov	w19, #0xfffffffe            	// #-2
    2adc:	ldp	x21, x22, [sp, #32]
    2ae0:	ldr	x23, [sp, #48]
    2ae4:	b	2a28 <BZ2_bzBuffToBuffCompress+0x84>

0000000000002ae8 <BZ2_bzBuffToBuffDecompress>:
    2ae8:	stp	x29, x30, [sp, #-144]!
    2aec:	mov	x29, sp
    2af0:	stp	x19, x20, [sp, #16]
    2af4:	mov	x20, x1
    2af8:	cmp	x0, #0x0
    2afc:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    2b00:	b.eq	2c08 <BZ2_bzBuffToBuffDecompress+0x120>  // b.none
    2b04:	stp	x21, x22, [sp, #32]
    2b08:	str	x23, [sp, #48]
    2b0c:	mov	x21, x0
    2b10:	mov	x22, x2
    2b14:	mov	w23, w3
    2b18:	mov	w2, w4
    2b1c:	mov	w1, w5
    2b20:	cmp	x22, #0x0
    2b24:	ccmp	w4, #0x1, #0x2, ne  // ne = any
    2b28:	b.hi	2c10 <BZ2_bzBuffToBuffDecompress+0x128>  // b.pmore
    2b2c:	cmp	w5, #0x4
    2b30:	b.hi	2c20 <BZ2_bzBuffToBuffDecompress+0x138>  // b.pmore
    2b34:	str	xzr, [sp, #120]
    2b38:	str	xzr, [sp, #128]
    2b3c:	str	xzr, [sp, #136]
    2b40:	add	x0, sp, #0x40
    2b44:	bl	c24 <BZ2_bzDecompressInit>
    2b48:	mov	w19, w0
    2b4c:	cbz	w0, 2b68 <BZ2_bzBuffToBuffDecompress+0x80>
    2b50:	ldp	x21, x22, [sp, #32]
    2b54:	ldr	x23, [sp, #48]
    2b58:	mov	w0, w19
    2b5c:	ldp	x19, x20, [sp, #16]
    2b60:	ldp	x29, x30, [sp], #144
    2b64:	ret
    2b68:	str	x22, [sp, #64]
    2b6c:	str	x21, [sp, #88]
    2b70:	str	w23, [sp, #72]
    2b74:	ldr	w0, [x20]
    2b78:	str	w0, [sp, #96]
    2b7c:	add	x0, sp, #0x40
    2b80:	bl	d48 <BZ2_bzDecompress>
    2b84:	mov	w21, w0
    2b88:	cbz	w0, 2bac <BZ2_bzBuffToBuffDecompress+0xc4>
    2b8c:	cmp	w0, #0x4
    2b90:	b.eq	2bcc <BZ2_bzBuffToBuffDecompress+0xe4>  // b.none
    2b94:	add	x0, sp, #0x40
    2b98:	bl	1bfc <BZ2_bzDecompressEnd>
    2b9c:	mov	w19, w21
    2ba0:	ldp	x21, x22, [sp, #32]
    2ba4:	ldr	x23, [sp, #48]
    2ba8:	b	2b58 <BZ2_bzBuffToBuffDecompress+0x70>
    2bac:	ldr	w0, [sp, #96]
    2bb0:	cbnz	w0, 2bf0 <BZ2_bzBuffToBuffDecompress+0x108>
    2bb4:	add	x0, sp, #0x40
    2bb8:	bl	1bfc <BZ2_bzDecompressEnd>
    2bbc:	mov	w19, #0xfffffff8            	// #-8
    2bc0:	ldp	x21, x22, [sp, #32]
    2bc4:	ldr	x23, [sp, #48]
    2bc8:	b	2b58 <BZ2_bzBuffToBuffDecompress+0x70>
    2bcc:	ldr	w0, [x20]
    2bd0:	ldr	w1, [sp, #96]
    2bd4:	sub	w0, w0, w1
    2bd8:	str	w0, [x20]
    2bdc:	add	x0, sp, #0x40
    2be0:	bl	1bfc <BZ2_bzDecompressEnd>
    2be4:	ldp	x21, x22, [sp, #32]
    2be8:	ldr	x23, [sp, #48]
    2bec:	b	2b58 <BZ2_bzBuffToBuffDecompress+0x70>
    2bf0:	add	x0, sp, #0x40
    2bf4:	bl	1bfc <BZ2_bzDecompressEnd>
    2bf8:	mov	w19, #0xfffffff9            	// #-7
    2bfc:	ldp	x21, x22, [sp, #32]
    2c00:	ldr	x23, [sp, #48]
    2c04:	b	2b58 <BZ2_bzBuffToBuffDecompress+0x70>
    2c08:	mov	w19, #0xfffffffe            	// #-2
    2c0c:	b	2b58 <BZ2_bzBuffToBuffDecompress+0x70>
    2c10:	mov	w19, #0xfffffffe            	// #-2
    2c14:	ldp	x21, x22, [sp, #32]
    2c18:	ldr	x23, [sp, #48]
    2c1c:	b	2b58 <BZ2_bzBuffToBuffDecompress+0x70>
    2c20:	mov	w19, #0xfffffffe            	// #-2
    2c24:	ldp	x21, x22, [sp, #32]
    2c28:	ldr	x23, [sp, #48]
    2c2c:	b	2b58 <BZ2_bzBuffToBuffDecompress+0x70>

0000000000002c30 <BZ2_bzlibVersion>:
    2c30:	adrp	x0, 0 <add_pair_to_block>
    2c34:	add	x0, x0, #0x0
    2c38:	ret

0000000000002c3c <BZ2_bzopen>:
    2c3c:	stp	x29, x30, [sp, #-16]!
    2c40:	mov	x29, sp
    2c44:	mov	w3, #0x0                   	// #0
    2c48:	mov	x2, x1
    2c4c:	mov	w1, #0xffffffff            	// #-1
    2c50:	bl	23bc <bzopen_or_bzdopen>
    2c54:	ldp	x29, x30, [sp], #16
    2c58:	ret

0000000000002c5c <BZ2_bzdopen>:
    2c5c:	stp	x29, x30, [sp, #-16]!
    2c60:	mov	x29, sp
    2c64:	mov	w3, #0x1                   	// #1
    2c68:	mov	x2, x1
    2c6c:	mov	w1, w0
    2c70:	mov	x0, #0x0                   	// #0
    2c74:	bl	23bc <bzopen_or_bzdopen>
    2c78:	ldp	x29, x30, [sp], #16
    2c7c:	ret

0000000000002c80 <BZ2_bzread>:
    2c80:	mov	w3, w2
    2c84:	ldr	w2, [x0, #5096]
    2c88:	cmp	w2, #0x4
    2c8c:	b.eq	2cbc <BZ2_bzread+0x3c>  // b.none
    2c90:	stp	x29, x30, [sp, #-32]!
    2c94:	mov	x29, sp
    2c98:	mov	x2, x1
    2c9c:	mov	x1, x0
    2ca0:	add	x0, sp, #0x1c
    2ca4:	bl	26b8 <BZ2_bzRead>
    2ca8:	ldr	w1, [sp, #28]
    2cac:	tst	w1, #0xfffffffb
    2cb0:	csinv	w0, w0, wzr, eq  // eq = none
    2cb4:	ldp	x29, x30, [sp], #32
    2cb8:	ret
    2cbc:	mov	w0, #0x0                   	// #0
    2cc0:	ret

0000000000002cc4 <BZ2_bzwrite>:
    2cc4:	stp	x29, x30, [sp, #-48]!
    2cc8:	mov	x29, sp
    2ccc:	str	x19, [sp, #16]
    2cd0:	mov	w19, w2
    2cd4:	mov	w3, w2
    2cd8:	mov	x2, x1
    2cdc:	mov	x1, x0
    2ce0:	add	x0, sp, #0x2c
    2ce4:	bl	1e00 <BZ2_bzWrite>
    2ce8:	ldr	w0, [sp, #44]
    2cec:	cmp	w0, #0x0
    2cf0:	csinv	w0, w19, wzr, eq  // eq = none
    2cf4:	ldr	x19, [sp, #16]
    2cf8:	ldp	x29, x30, [sp], #48
    2cfc:	ret

0000000000002d00 <BZ2_bzflush>:
    2d00:	mov	w0, #0x0                   	// #0
    2d04:	ret

0000000000002d08 <BZ2_bzclose>:
    2d08:	cbz	x0, 2da8 <BZ2_bzclose+0xa0>
    2d0c:	stp	x29, x30, [sp, #-48]!
    2d10:	mov	x29, sp
    2d14:	stp	x19, x20, [sp, #16]
    2d18:	mov	x19, x0
    2d1c:	ldr	x20, [x0]
    2d20:	add	x0, x0, #0x1, lsl #12
    2d24:	ldrb	w0, [x0, #916]
    2d28:	cbz	w0, 2d68 <BZ2_bzclose+0x60>
    2d2c:	mov	x4, #0x0                   	// #0
    2d30:	mov	x3, #0x0                   	// #0
    2d34:	mov	w2, #0x0                   	// #0
    2d38:	mov	x1, x19
    2d3c:	add	x0, sp, #0x2c
    2d40:	bl	21ec <BZ2_bzWriteClose>
    2d44:	ldr	w0, [sp, #44]
    2d48:	cbz	w0, 2d74 <BZ2_bzclose+0x6c>
    2d4c:	mov	x4, #0x0                   	// #0
    2d50:	mov	x3, #0x0                   	// #0
    2d54:	mov	w2, #0x1                   	// #1
    2d58:	mov	x1, x19
    2d5c:	mov	x0, #0x0                   	// #0
    2d60:	bl	21ec <BZ2_bzWriteClose>
    2d64:	b	2d74 <BZ2_bzclose+0x6c>
    2d68:	mov	x1, x19
    2d6c:	add	x0, sp, #0x2c
    2d70:	bl	2634 <BZ2_bzReadClose>
    2d74:	adrp	x0, 0 <stdin>
    2d78:	ldr	x0, [x0]
    2d7c:	cmp	x0, x20
    2d80:	b.eq	2d9c <BZ2_bzclose+0x94>  // b.none
    2d84:	adrp	x0, 0 <stdout>
    2d88:	ldr	x0, [x0]
    2d8c:	cmp	x0, x20
    2d90:	b.eq	2d9c <BZ2_bzclose+0x94>  // b.none
    2d94:	mov	x0, x20
    2d98:	bl	0 <fclose>
    2d9c:	ldp	x19, x20, [sp, #16]
    2da0:	ldp	x29, x30, [sp], #48
    2da4:	ret
    2da8:	ret

0000000000002dac <BZ2_bzerror>:
    2dac:	ldr	w0, [x0, #5096]
    2db0:	cmp	w0, #0x0
    2db4:	csel	w0, w0, wzr, le
    2db8:	str	w0, [x1]
    2dbc:	adrp	x1, 0 <add_pair_to_block>
    2dc0:	add	x1, x1, #0x0
    2dc4:	neg	w0, w0
    2dc8:	add	x1, x1, #0x10
    2dcc:	ldr	x0, [x1, w0, sxtw #3]
    2dd0:	ret
