
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//mtd_probe_clang_-O1:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000210ae8 <_start>:
  210ae8:	mov	x29, #0x0                   	// #0
  210aec:	mov	x30, #0x0                   	// #0
  210af0:	mov	x5, x0
  210af4:	ldr	x1, [sp]
  210af8:	add	x2, sp, #0x8
  210afc:	mov	x6, sp
  210b00:	movz	x0, #0x0, lsl #48
  210b04:	movk	x0, #0x0, lsl #32
  210b08:	movk	x0, #0x21, lsl #16
  210b0c:	movk	x0, #0xc38
  210b10:	movz	x3, #0x0, lsl #48
  210b14:	movk	x3, #0x0, lsl #32
  210b18:	movk	x3, #0x21, lsl #16
  210b1c:	movk	x3, #0xfe0
  210b20:	movz	x4, #0x0, lsl #48
  210b24:	movk	x4, #0x0, lsl #32
  210b28:	movk	x4, #0x21, lsl #16
  210b2c:	movk	x4, #0x1060
  210b30:	bl	2110b0 <__libc_start_main@plt>
  210b34:	bl	2110c0 <abort@plt>

0000000000210b38 <call_weak_fn>:
  210b38:	adrp	x0, 221000 <free@plt+0xfe70>
  210b3c:	ldr	x0, [x0, #896]
  210b40:	cbz	x0, 210b48 <call_weak_fn+0x10>
  210b44:	b	2110d0 <__gmon_start__@plt>
  210b48:	ret

0000000000210b4c <deregister_tm_clones>:
  210b4c:	adrp	x0, 231000 <_DYNAMIC+0xfe50>
  210b50:	add	x0, x0, #0x418
  210b54:	adrp	x1, 231000 <_DYNAMIC+0xfe50>
  210b58:	add	x1, x1, #0x418
  210b5c:	cmp	x0, x1
  210b60:	b.eq	210b94 <deregister_tm_clones+0x48>  // b.none
  210b64:	stp	x29, x30, [sp, #-32]!
  210b68:	mov	x29, sp
  210b6c:	adrp	x0, 200000 <__FRAME_END__-0x9f0>
  210b70:	ldr	x0, [x0, #2152]
  210b74:	str	x0, [sp, #24]
  210b78:	mov	x1, x0
  210b7c:	cbz	x1, 210b8c <deregister_tm_clones+0x40>
  210b80:	adrp	x0, 231000 <_DYNAMIC+0xfe50>
  210b84:	add	x0, x0, #0x418
  210b88:	blr	x1
  210b8c:	ldp	x29, x30, [sp], #32
  210b90:	ret
  210b94:	ret

0000000000210b98 <register_tm_clones>:
  210b98:	adrp	x0, 231000 <_DYNAMIC+0xfe50>
  210b9c:	add	x0, x0, #0x418
  210ba0:	adrp	x1, 231000 <_DYNAMIC+0xfe50>
  210ba4:	add	x1, x1, #0x418
  210ba8:	sub	x0, x0, x1
  210bac:	lsr	x1, x0, #63
  210bb0:	add	x0, x1, x0, asr #3
  210bb4:	cmp	xzr, x0, asr #1
  210bb8:	b.eq	210bf0 <register_tm_clones+0x58>  // b.none
  210bbc:	stp	x29, x30, [sp, #-32]!
  210bc0:	mov	x29, sp
  210bc4:	asr	x1, x0, #1
  210bc8:	adrp	x0, 200000 <__FRAME_END__-0x9f0>
  210bcc:	ldr	x0, [x0, #2160]
  210bd0:	str	x0, [sp, #24]
  210bd4:	mov	x2, x0
  210bd8:	cbz	x2, 210be8 <register_tm_clones+0x50>
  210bdc:	adrp	x0, 231000 <_DYNAMIC+0xfe50>
  210be0:	add	x0, x0, #0x418
  210be4:	blr	x2
  210be8:	ldp	x29, x30, [sp], #32
  210bec:	ret
  210bf0:	ret

0000000000210bf4 <__do_global_dtors_aux>:
  210bf4:	adrp	x0, 231000 <_DYNAMIC+0xfe50>
  210bf8:	ldrb	w0, [x0, #1048]
  210bfc:	cbnz	w0, 210c20 <__do_global_dtors_aux+0x2c>
  210c00:	stp	x29, x30, [sp, #-16]!
  210c04:	mov	x29, sp
  210c08:	bl	210b4c <deregister_tm_clones>
  210c0c:	adrp	x0, 231000 <_DYNAMIC+0xfe50>
  210c10:	mov	w1, #0x1                   	// #1
  210c14:	strb	w1, [x0, #1048]
  210c18:	ldp	x29, x30, [sp], #16
  210c1c:	ret
  210c20:	ret

0000000000210c24 <frame_dummy>:
  210c24:	stp	x29, x30, [sp, #-16]!
  210c28:	mov	x29, sp
  210c2c:	bl	210b98 <register_tm_clones>
  210c30:	ldp	x29, x30, [sp], #16
  210c34:	ret

0000000000210c38 <main>:
  210c38:	sub	sp, sp, #0x40
  210c3c:	stp	x29, x30, [sp, #32]
  210c40:	add	x29, sp, #0x20
  210c44:	mov	w8, #0xffffffff            	// #-1
  210c48:	cmp	w0, #0x2
  210c4c:	str	x19, [sp, #48]
  210c50:	str	w8, [x29, #28]
  210c54:	b.ne	210c98 <main+0x60>  // b.any
  210c58:	ldr	x0, [x1, #8]
  210c5c:	mov	w1, #0x80000               	// #524288
  210c60:	bl	2110e0 <open64@plt>
  210c64:	str	w0, [x29, #28]
  210c68:	tbnz	w0, #31, 210ca8 <main+0x70>
  210c6c:	mov	w1, #0x4d01                	// #19713
  210c70:	mov	x2, sp
  210c74:	movk	w1, #0x8020, lsl #16
  210c78:	mov	w19, w0
  210c7c:	bl	2110f0 <ioctl@plt>
  210c80:	tbnz	w0, #31, 210ce8 <main+0xb0>
  210c84:	mov	x1, sp
  210c88:	mov	w0, w19
  210c8c:	bl	210d60 <probe_smart_media>
  210c90:	lsr	w19, w0, #31
  210c94:	b	210d2c <main+0xf4>
  210c98:	adrp	x0, 200000 <__FRAME_END__-0x9f0>
  210c9c:	add	x0, x0, #0x8ac
  210ca0:	bl	211100 <puts@plt>
  210ca4:	b	210d28 <main+0xf0>
  210ca8:	mov	w0, #0x1                   	// #1
  210cac:	mov	w19, #0x1                   	// #1
  210cb0:	bl	211110 <log_get_max_level_realm@plt>
  210cb4:	cmp	w0, #0x3
  210cb8:	b.lt	210d2c <main+0xf4>  // b.tstop
  210cbc:	bl	211120 <__errno_location@plt>
  210cc0:	ldr	w1, [x0]
  210cc4:	adrp	x2, 200000 <__FRAME_END__-0x9f0>
  210cc8:	adrp	x4, 200000 <__FRAME_END__-0x9f0>
  210ccc:	adrp	x5, 200000 <__FRAME_END__-0x9f0>
  210cd0:	add	x2, x2, #0x901
  210cd4:	add	x4, x4, #0x99b
  210cd8:	add	x5, x5, #0x878
  210cdc:	mov	w0, #0x403                 	// #1027
  210ce0:	mov	w3, #0x2e                  	// #46
  210ce4:	b	210d24 <main+0xec>
  210ce8:	mov	w0, #0x1                   	// #1
  210cec:	mov	w19, #0x1                   	// #1
  210cf0:	bl	211110 <log_get_max_level_realm@plt>
  210cf4:	cmp	w0, #0x3
  210cf8:	b.lt	210d2c <main+0xf4>  // b.tstop
  210cfc:	bl	211120 <__errno_location@plt>
  210d00:	ldr	w1, [x0]
  210d04:	adrp	x2, 200000 <__FRAME_END__-0x9f0>
  210d08:	adrp	x4, 200000 <__FRAME_END__-0x9f0>
  210d0c:	adrp	x5, 200000 <__FRAME_END__-0x9f0>
  210d10:	add	x2, x2, #0x901
  210d14:	add	x4, x4, #0x99b
  210d18:	add	x5, x5, #0x920
  210d1c:	mov	w0, #0x403                 	// #1027
  210d20:	mov	w3, #0x33                  	// #51
  210d24:	bl	211130 <log_internal_realm@plt>
  210d28:	mov	w19, #0x1                   	// #1
  210d2c:	add	x0, x29, #0x1c
  210d30:	bl	210d48 <closep>
  210d34:	mov	w0, w19
  210d38:	ldr	x19, [sp, #48]
  210d3c:	ldp	x29, x30, [sp, #32]
  210d40:	add	sp, sp, #0x40
  210d44:	ret

0000000000210d48 <closep>:
  210d48:	stp	x29, x30, [sp, #-16]!
  210d4c:	ldr	w0, [x0]
  210d50:	mov	x29, sp
  210d54:	bl	211140 <safe_close@plt>
  210d58:	ldp	x29, x30, [sp], #16
  210d5c:	ret

0000000000210d60 <probe_smart_media>:
  210d60:	stp	x29, x30, [sp, #-64]!
  210d64:	stp	x22, x21, [sp, #32]
  210d68:	mov	x29, sp
  210d6c:	mov	w21, w0
  210d70:	mov	w0, #0x200                 	// #512
  210d74:	str	x23, [sp, #16]
  210d78:	stp	x20, x19, [sp, #48]
  210d7c:	mov	x22, x1
  210d80:	str	xzr, [x29, #24]
  210d84:	bl	211150 <malloc@plt>
  210d88:	str	x0, [x29, #24]
  210d8c:	cbz	x0, 210dd8 <probe_smart_media+0x78>
  210d90:	ldrb	w8, [x22]
  210d94:	cmp	w8, #0x4
  210d98:	b.ne	210dfc <probe_smart_media+0x9c>  // b.any
  210d9c:	ldp	w8, w20, [x22, #12]
  210da0:	mov	x19, x0
  210da4:	cmp	w20, #0x200
  210da8:	b.eq	210db4 <probe_smart_media+0x54>  // b.none
  210dac:	cmp	w20, #0x100
  210db0:	b.ne	210e38 <probe_smart_media+0xd8>  // b.any
  210db4:	ldr	w9, [x22, #8]
  210db8:	lsr	w9, w9, #20
  210dbc:	sub	x9, x9, #0x1
  210dc0:	cmp	w9, #0x4
  210dc4:	b.cs	210e80 <probe_smart_media+0x120>  // b.hs, b.nlast
  210dc8:	adrp	x10, 200000 <__FRAME_END__-0x9f0>
  210dcc:	add	x10, x10, #0x9a0
  210dd0:	ldr	w9, [x10, x9, lsl #2]
  210dd4:	b	210e84 <probe_smart_media+0x124>
  210dd8:	adrp	x1, 200000 <__FRAME_END__-0x9f0>
  210ddc:	adrp	x3, 200000 <__FRAME_END__-0x9f0>
  210de0:	add	x1, x1, #0x963
  210de4:	add	x3, x3, #0x989
  210de8:	mov	w0, #0x1                   	// #1
  210dec:	mov	w2, #0x32                  	// #50
  210df0:	bl	211160 <log_oom_internal@plt>
  210df4:	mov	w19, w0
  210df8:	b	210f94 <probe_smart_media+0x234>
  210dfc:	mov	w0, #0x1                   	// #1
  210e00:	bl	211110 <log_get_max_level_realm@plt>
  210e04:	cmp	w0, #0x7
  210e08:	b.lt	210f90 <probe_smart_media+0x230>  // b.tstop
  210e0c:	adrp	x2, 200000 <__FRAME_END__-0x9f0>
  210e10:	adrp	x4, 200000 <__FRAME_END__-0x9f0>
  210e14:	adrp	x5, 200000 <__FRAME_END__-0x9f0>
  210e18:	mov	w1, #0x16                  	// #22
  210e1c:	add	x2, x2, #0x963
  210e20:	add	x4, x4, #0x989
  210e24:	add	x5, x5, #0x8c9
  210e28:	mov	w0, #0x407                 	// #1031
  210e2c:	movk	w1, #0x4000, lsl #16
  210e30:	mov	w3, #0x36                  	// #54
  210e34:	b	210f00 <probe_smart_media+0x1a0>
  210e38:	mov	w0, #0x1                   	// #1
  210e3c:	bl	211110 <log_get_max_level_realm@plt>
  210e40:	cmp	w0, #0x7
  210e44:	b.lt	210f90 <probe_smart_media+0x230>  // b.tstop
  210e48:	adrp	x2, 200000 <__FRAME_END__-0x9f0>
  210e4c:	adrp	x4, 200000 <__FRAME_END__-0x9f0>
  210e50:	adrp	x5, 200000 <__FRAME_END__-0x9f0>
  210e54:	mov	w1, #0x16                  	// #22
  210e58:	add	x2, x2, #0x963
  210e5c:	add	x4, x4, #0x989
  210e60:	add	x5, x5, #0x8e3
  210e64:	mov	w0, #0x407                 	// #1031
  210e68:	movk	w1, #0x4000, lsl #16
  210e6c:	mov	w3, #0x3e                  	// #62
  210e70:	mov	w6, w20
  210e74:	bl	211130 <log_internal_realm@plt>
  210e78:	mov	w19, w0
  210e7c:	b	210f94 <probe_smart_media+0x234>
  210e80:	mov	w9, #0x18                  	// #24
  210e84:	mul	w23, w9, w8
  210e88:	cmp	w23, #0x1
  210e8c:	b.lt	210ec8 <probe_smart_media+0x168>  // b.tstop
  210e90:	mov	w22, wzr
  210e94:	mov	w0, w21
  210e98:	mov	x1, xzr
  210e9c:	mov	w2, w22
  210ea0:	bl	211170 <lseek64@plt>
  210ea4:	mov	w2, #0x200                 	// #512
  210ea8:	mov	w0, w21
  210eac:	mov	x1, x19
  210eb0:	bl	211180 <read@plt>
  210eb4:	cmp	x0, #0x200
  210eb8:	b.eq	210f0c <probe_smart_media+0x1ac>  // b.none
  210ebc:	add	w22, w22, w20
  210ec0:	cmp	w22, w23
  210ec4:	b.lt	210e94 <probe_smart_media+0x134>  // b.tstop
  210ec8:	mov	w0, #0x1                   	// #1
  210ecc:	bl	211110 <log_get_max_level_realm@plt>
  210ed0:	cmp	w0, #0x7
  210ed4:	b.lt	210f90 <probe_smart_media+0x230>  // b.tstop
  210ed8:	adrp	x2, 200000 <__FRAME_END__-0x9f0>
  210edc:	adrp	x4, 200000 <__FRAME_END__-0x9f0>
  210ee0:	adrp	x5, 200000 <__FRAME_END__-0x9f0>
  210ee4:	mov	w1, #0x16                  	// #22
  210ee8:	add	x2, x2, #0x963
  210eec:	add	x4, x4, #0x989
  210ef0:	add	x5, x5, #0x88b
  210ef4:	mov	w0, #0x407                 	// #1031
  210ef8:	movk	w1, #0x4000, lsl #16
  210efc:	mov	w3, #0x58                  	// #88
  210f00:	bl	211130 <log_internal_realm@plt>
  210f04:	mov	w19, w0
  210f08:	b	210f94 <probe_smart_media+0x234>
  210f0c:	ldr	x9, [x19]
  210f10:	ldrh	w10, [x19, #8]
  210f14:	mov	x8, #0x301                 	// #769
  210f18:	movk	x8, #0x1d9, lsl #16
  210f1c:	movk	x8, #0x18ff, lsl #32
  210f20:	movk	x8, #0xdf02, lsl #48
  210f24:	mov	w11, #0x2001                	// #8193
  210f28:	eor	x9, x9, x8
  210f2c:	eor	x10, x10, x11
  210f30:	orr	x9, x9, x10
  210f34:	cbz	x9, 210fb4 <probe_smart_media+0x254>
  210f38:	ldr	x9, [x19, #256]
  210f3c:	ldrh	w10, [x19, #264]
  210f40:	mov	w11, #0x2001                	// #8193
  210f44:	eor	x8, x9, x8
  210f48:	eor	x9, x10, x11
  210f4c:	orr	x8, x8, x9
  210f50:	cbz	x8, 210fb4 <probe_smart_media+0x254>
  210f54:	mov	w0, #0x1                   	// #1
  210f58:	bl	211110 <log_get_max_level_realm@plt>
  210f5c:	cmp	w0, #0x7
  210f60:	b.lt	210f90 <probe_smart_media+0x230>  // b.tstop
  210f64:	adrp	x2, 200000 <__FRAME_END__-0x9f0>
  210f68:	adrp	x4, 200000 <__FRAME_END__-0x9f0>
  210f6c:	adrp	x5, 200000 <__FRAME_END__-0x9f0>
  210f70:	mov	w1, #0x16                  	// #22
  210f74:	add	x2, x2, #0x963
  210f78:	add	x4, x4, #0x989
  210f7c:	add	x5, x5, #0x945
  210f80:	mov	w0, #0x407                 	// #1031
  210f84:	movk	w1, #0x4000, lsl #16
  210f88:	mov	w3, #0x5d                  	// #93
  210f8c:	b	210f00 <probe_smart_media+0x1a0>
  210f90:	mov	w19, #0xffffffea            	// #-22
  210f94:	add	x0, x29, #0x18
  210f98:	bl	210fc8 <freep>
  210f9c:	mov	w0, w19
  210fa0:	ldp	x20, x19, [sp, #48]
  210fa4:	ldp	x22, x21, [sp, #32]
  210fa8:	ldr	x23, [sp, #16]
  210fac:	ldp	x29, x30, [sp], #64
  210fb0:	ret
  210fb4:	adrp	x0, 200000 <__FRAME_END__-0x9f0>
  210fb8:	add	x0, x0, #0x899
  210fbc:	bl	211100 <puts@plt>
  210fc0:	mov	w19, wzr
  210fc4:	b	210f94 <probe_smart_media+0x234>

0000000000210fc8 <freep>:
  210fc8:	stp	x29, x30, [sp, #-16]!
  210fcc:	ldr	x0, [x0]
  210fd0:	mov	x29, sp
  210fd4:	bl	211190 <free@plt>
  210fd8:	ldp	x29, x30, [sp], #16
  210fdc:	ret

0000000000210fe0 <__libc_csu_init>:
  210fe0:	stp	x29, x30, [sp, #-64]!
  210fe4:	mov	x29, sp
  210fe8:	stp	x19, x20, [sp, #16]
  210fec:	adrp	x20, 221000 <free@plt+0xfe70>
  210ff0:	add	x20, x20, #0x1b0
  210ff4:	stp	x21, x22, [sp, #32]
  210ff8:	adrp	x21, 221000 <free@plt+0xfe70>
  210ffc:	add	x21, x21, #0x1a8
  211000:	sub	x20, x20, x21
  211004:	mov	w22, w0
  211008:	stp	x23, x24, [sp, #48]
  21100c:	mov	x23, x1
  211010:	mov	x24, x2
  211014:	bl	211064 <_init>
  211018:	cmp	xzr, x20, asr #3
  21101c:	b.eq	211048 <__libc_csu_init+0x68>  // b.none
  211020:	asr	x20, x20, #3
  211024:	mov	x19, #0x0                   	// #0
  211028:	ldr	x3, [x21, x19, lsl #3]
  21102c:	mov	x2, x24
  211030:	add	x19, x19, #0x1
  211034:	mov	x1, x23
  211038:	mov	w0, w22
  21103c:	blr	x3
  211040:	cmp	x20, x19
  211044:	b.ne	211028 <__libc_csu_init+0x48>  // b.any
  211048:	ldp	x19, x20, [sp, #16]
  21104c:	ldp	x21, x22, [sp, #32]
  211050:	ldp	x23, x24, [sp, #48]
  211054:	ldp	x29, x30, [sp], #64
  211058:	ret
  21105c:	nop

0000000000211060 <__libc_csu_fini>:
  211060:	ret

Disassembly of section .init:

0000000000211064 <_init>:
  211064:	stp	x29, x30, [sp, #-16]!
  211068:	mov	x29, sp
  21106c:	bl	210b38 <call_weak_fn>
  211070:	ldp	x29, x30, [sp], #16
  211074:	ret

Disassembly of section .fini:

0000000000211078 <_fini>:
  211078:	stp	x29, x30, [sp, #-16]!
  21107c:	mov	x29, sp
  211080:	ldp	x29, x30, [sp], #16
  211084:	ret

Disassembly of section .plt:

0000000000211090 <__libc_start_main@plt-0x20>:
  211090:	stp	x16, x30, [sp, #-16]!
  211094:	adrp	x16, 221000 <free@plt+0xfe70>
  211098:	ldr	x17, [x16, #920]
  21109c:	add	x16, x16, #0x398
  2110a0:	br	x17
  2110a4:	nop
  2110a8:	nop
  2110ac:	nop

00000000002110b0 <__libc_start_main@plt>:
  2110b0:	adrp	x16, 221000 <free@plt+0xfe70>
  2110b4:	ldr	x17, [x16, #928]
  2110b8:	add	x16, x16, #0x3a0
  2110bc:	br	x17

00000000002110c0 <abort@plt>:
  2110c0:	adrp	x16, 221000 <free@plt+0xfe70>
  2110c4:	ldr	x17, [x16, #936]
  2110c8:	add	x16, x16, #0x3a8
  2110cc:	br	x17

00000000002110d0 <__gmon_start__@plt>:
  2110d0:	adrp	x16, 221000 <free@plt+0xfe70>
  2110d4:	ldr	x17, [x16, #944]
  2110d8:	add	x16, x16, #0x3b0
  2110dc:	br	x17

00000000002110e0 <open64@plt>:
  2110e0:	adrp	x16, 221000 <free@plt+0xfe70>
  2110e4:	ldr	x17, [x16, #952]
  2110e8:	add	x16, x16, #0x3b8
  2110ec:	br	x17

00000000002110f0 <ioctl@plt>:
  2110f0:	adrp	x16, 221000 <free@plt+0xfe70>
  2110f4:	ldr	x17, [x16, #960]
  2110f8:	add	x16, x16, #0x3c0
  2110fc:	br	x17

0000000000211100 <puts@plt>:
  211100:	adrp	x16, 221000 <free@plt+0xfe70>
  211104:	ldr	x17, [x16, #968]
  211108:	add	x16, x16, #0x3c8
  21110c:	br	x17

0000000000211110 <log_get_max_level_realm@plt>:
  211110:	adrp	x16, 221000 <free@plt+0xfe70>
  211114:	ldr	x17, [x16, #976]
  211118:	add	x16, x16, #0x3d0
  21111c:	br	x17

0000000000211120 <__errno_location@plt>:
  211120:	adrp	x16, 221000 <free@plt+0xfe70>
  211124:	ldr	x17, [x16, #984]
  211128:	add	x16, x16, #0x3d8
  21112c:	br	x17

0000000000211130 <log_internal_realm@plt>:
  211130:	adrp	x16, 221000 <free@plt+0xfe70>
  211134:	ldr	x17, [x16, #992]
  211138:	add	x16, x16, #0x3e0
  21113c:	br	x17

0000000000211140 <safe_close@plt>:
  211140:	adrp	x16, 221000 <free@plt+0xfe70>
  211144:	ldr	x17, [x16, #1000]
  211148:	add	x16, x16, #0x3e8
  21114c:	br	x17

0000000000211150 <malloc@plt>:
  211150:	adrp	x16, 221000 <free@plt+0xfe70>
  211154:	ldr	x17, [x16, #1008]
  211158:	add	x16, x16, #0x3f0
  21115c:	br	x17

0000000000211160 <log_oom_internal@plt>:
  211160:	adrp	x16, 221000 <free@plt+0xfe70>
  211164:	ldr	x17, [x16, #1016]
  211168:	add	x16, x16, #0x3f8
  21116c:	br	x17

0000000000211170 <lseek64@plt>:
  211170:	adrp	x16, 221000 <free@plt+0xfe70>
  211174:	ldr	x17, [x16, #1024]
  211178:	add	x16, x16, #0x400
  21117c:	br	x17

0000000000211180 <read@plt>:
  211180:	adrp	x16, 221000 <free@plt+0xfe70>
  211184:	ldr	x17, [x16, #1032]
  211188:	add	x16, x16, #0x408
  21118c:	br	x17

0000000000211190 <free@plt>:
  211190:	adrp	x16, 221000 <free@plt+0xfe70>
  211194:	ldr	x17, [x16, #1040]
  211198:	add	x16, x16, #0x410
  21119c:	br	x17
