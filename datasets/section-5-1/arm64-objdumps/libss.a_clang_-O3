In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libss.a_clang_-O3:

ss_err.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <initialize_ss_error_table>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	str	x19, [sp, #16]
   8:	adrp	x19, 0 <_et_list>
   c:	add	x19, x19, #0x0
  10:	ldr	x9, [x19]
  14:	mov	x29, sp
  18:	cbz	x9, 40 <initialize_ss_error_table+0x40>
  1c:	adrp	x8, 0 <initialize_ss_error_table>
  20:	add	x8, x8, #0x0
  24:	mov	x19, x9
  28:	ldr	x9, [x9, #8]
  2c:	ldr	x9, [x9]
  30:	cmp	x9, x8
  34:	b.eq	5c <initialize_ss_error_table+0x5c>  // b.none
  38:	ldr	x9, [x19]
  3c:	cbnz	x9, 24 <initialize_ss_error_table+0x24>
  40:	mov	w0, #0x10                  	// #16
  44:	bl	0 <malloc>
  48:	cbnz	x0, 68 <initialize_ss_error_table+0x68>
  4c:	adrp	x0, 0 <initialize_ss_error_table>
  50:	add	x0, x0, #0x0
  54:	ldr	x8, [x0, #8]
  58:	cbz	x8, 68 <initialize_ss_error_table+0x68>
  5c:	ldr	x19, [sp, #16]
  60:	ldp	x29, x30, [sp], #32
  64:	ret
  68:	adrp	x8, 68 <initialize_ss_error_table+0x68>
  6c:	add	x8, x8, #0x0
  70:	stp	xzr, x8, [x0]
  74:	str	x0, [x19]
  78:	ldr	x19, [sp, #16]
  7c:	ldp	x29, x30, [sp], #32
  80:	ret

0000000000000084 <initialize_ss_error_table_r>:
  84:	stp	x29, x30, [sp, #-32]!
  88:	ldr	x9, [x0]
  8c:	str	x19, [sp, #16]
  90:	mov	x19, x0
  94:	mov	x29, sp
  98:	cbz	x9, c0 <initialize_ss_error_table_r+0x3c>
  9c:	adrp	x8, 0 <initialize_ss_error_table>
  a0:	add	x8, x8, #0x0
  a4:	mov	x19, x9
  a8:	ldr	x9, [x9, #8]
  ac:	ldr	x9, [x9]
  b0:	cmp	x9, x8
  b4:	b.eq	dc <initialize_ss_error_table_r+0x58>  // b.none
  b8:	ldr	x9, [x19]
  bc:	cbnz	x9, a4 <initialize_ss_error_table_r+0x20>
  c0:	mov	w0, #0x10                  	// #16
  c4:	bl	0 <malloc>
  c8:	cbnz	x0, e8 <initialize_ss_error_table_r+0x64>
  cc:	adrp	x0, 0 <initialize_ss_error_table>
  d0:	add	x0, x0, #0x0
  d4:	ldr	x8, [x0, #8]
  d8:	cbz	x8, e8 <initialize_ss_error_table_r+0x64>
  dc:	ldr	x19, [sp, #16]
  e0:	ldp	x29, x30, [sp], #32
  e4:	ret
  e8:	adrp	x8, 68 <initialize_ss_error_table+0x68>
  ec:	add	x8, x8, #0x0
  f0:	stp	xzr, x8, [x0]
  f4:	str	x0, [x19]
  f8:	ldr	x19, [sp, #16]
  fc:	ldp	x29, x30, [sp], #32
 100:	ret

std_rqs.o:     file format elf64-littleaarch64


invocation.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_create_invocation>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	str	x27, [sp, #16]
   8:	stp	x26, x25, [sp, #32]
   c:	stp	x24, x23, [sp, #48]
  10:	stp	x22, x21, [sp, #64]
  14:	stp	x20, x19, [sp, #80]
  18:	str	wzr, [x4]
  1c:	adrp	x27, 0 <_ss_table>
  20:	ldr	x24, [x27]
  24:	mov	x22, x0
  28:	mov	w0, #0x90                  	// #144
  2c:	mov	x29, sp
  30:	mov	x26, x4
  34:	mov	x19, x3
  38:	mov	x23, x2
  3c:	mov	x25, x1
  40:	bl	0 <malloc>
  44:	mov	x20, x0
  48:	cbnz	x24, 5c <ss_create_invocation+0x5c>
  4c:	mov	w0, #0x10                  	// #16
  50:	bl	0 <malloc>
  54:	mov	x24, x0
  58:	stp	xzr, xzr, [x0]
  5c:	bl	0 <initialize_ss_error_table>
  60:	mov	w8, #0x1                   	// #1
  64:	ldr	x9, [x24, x8, lsl #3]
  68:	mov	x21, x8
  6c:	add	x8, x8, #0x1
  70:	cbnz	x9, 64 <ss_create_invocation+0x64>
  74:	lsl	x8, x21, #3
  78:	add	x8, x8, #0x10
  7c:	and	x1, x8, #0x7fffffff8
  80:	mov	x0, x24
  84:	bl	0 <realloc>
  88:	cbz	x0, 124 <ss_create_invocation+0x124>
  8c:	add	w8, w21, #0x1
  90:	mov	x24, x0
  94:	str	xzr, [x0, w8, uxtw #3]
  98:	str	x20, [x0, w21, uxtw #3]
  9c:	mov	w0, #0x8                   	// #8
  a0:	stp	x22, x25, [x20]
  a4:	stp	xzr, xzr, [x20, #24]
  a8:	bl	0 <malloc>
  ac:	str	xzr, [x0]
  b0:	stp	x0, x23, [x20, #40]
  b4:	mov	x0, x22
  b8:	bl	0 <strlen>
  bc:	add	w0, w0, #0x4
  c0:	bl	0 <malloc>
  c4:	mov	x1, x22
  c8:	str	x0, [x20, #56]
  cc:	bl	0 <strcpy>
  d0:	ldr	x22, [x20, #56]
  d4:	mov	x0, x22
  d8:	bl	0 <strlen>
  dc:	mov	w8, #0x203a                	// #8250
  e0:	movk	w8, #0x20, lsl #16
  e4:	str	w8, [x22, x0]
  e8:	ldrb	w8, [x20, #80]
  ec:	mov	w0, #0x2                   	// #2
  f0:	mov	w1, #0x8                   	// #8
  f4:	str	xzr, [x20, #72]
  f8:	and	w8, w8, #0xfc
  fc:	strb	w8, [x20, #80]
 100:	bl	0 <calloc>
 104:	movi	v0.2d, #0x0
 108:	str	x0, [x20, #64]
 10c:	str	x19, [x0]
 110:	stur	q0, [x20, #120]
 114:	stur	q0, [x20, #104]
 118:	stur	q0, [x20, #88]
 11c:	str	x24, [x27]
 120:	b	138 <ss_create_invocation+0x138>
 124:	mov	w8, #0xc                   	// #12
 128:	mov	x0, x20
 12c:	str	w8, [x26]
 130:	bl	0 <free>
 134:	mov	w21, wzr
 138:	mov	w0, w21
 13c:	ldp	x20, x19, [sp, #80]
 140:	ldp	x22, x21, [sp, #64]
 144:	ldp	x24, x23, [sp, #48]
 148:	ldp	x26, x25, [sp, #32]
 14c:	ldr	x27, [sp, #16]
 150:	ldp	x29, x30, [sp], #96
 154:	ret

0000000000000158 <ss_delete_invocation>:
 158:	sub	sp, sp, #0x30
 15c:	adrp	x8, 0 <_ss_table>
 160:	ldr	x8, [x8]
 164:	stp	x29, x30, [sp, #16]
 168:	stp	x20, x19, [sp, #32]
 16c:	mov	w20, w0
 170:	ldr	x19, [x8, w0, sxtw #3]
 174:	add	x29, sp, #0x10
 178:	ldr	x0, [x19, #56]
 17c:	bl	0 <free>
 180:	ldr	x0, [x19, #64]
 184:	bl	0 <free>
 188:	ldr	x0, [x19, #40]
 18c:	ldr	x1, [x0]
 190:	cbz	x1, 1ac <ss_delete_invocation+0x54>
 194:	sub	x2, x29, #0x4
 198:	mov	w0, w20
 19c:	bl	0 <ss_delete_info_dir>
 1a0:	ldr	x0, [x19, #40]
 1a4:	ldr	x1, [x0]
 1a8:	cbnz	x1, 194 <ss_delete_invocation+0x3c>
 1ac:	bl	0 <free>
 1b0:	mov	x0, x19
 1b4:	bl	0 <free>
 1b8:	ldp	x20, x19, [sp, #32]
 1bc:	ldp	x29, x30, [sp, #16]
 1c0:	add	sp, sp, #0x30
 1c4:	ret

help.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_help>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	stp	x26, x25, [sp, #32]
   8:	stp	x24, x23, [sp, #48]
   c:	stp	x22, x21, [sp, #64]
  10:	stp	x20, x19, [sp, #80]
  14:	adrp	x8, 0 <_ss_table>
  18:	ldr	x8, [x8]
  1c:	mov	w19, w2
  20:	cmp	w0, #0x2
  24:	mov	x20, x1
  28:	ldr	x23, [x8, w2, sxtw #3]
  2c:	str	x27, [sp, #16]
  30:	mov	x29, sp
  34:	b.eq	64 <ss_help+0x64>  // b.none
  38:	cmp	w0, #0x1
  3c:	b.ne	150 <ss_help+0x150>  // b.any
  40:	mov	x1, x20
  44:	mov	w2, w19
  48:	ldp	x20, x19, [sp, #80]
  4c:	ldp	x22, x21, [sp, #64]
  50:	ldp	x24, x23, [sp, #48]
  54:	ldp	x26, x25, [sp, #32]
  58:	ldr	x27, [sp, #16]
  5c:	ldp	x29, x30, [sp], #96
  60:	b	0 <ss_list_requests>
  64:	ldr	x8, [x23, #40]
  68:	cbz	x8, 1b4 <ss_help+0x1b4>
  6c:	ldr	x0, [x8]
  70:	cbz	x0, 1b4 <ss_help+0x1b4>
  74:	mov	w26, #0x692e                	// #26926
  78:	mov	x24, xzr
  7c:	mov	w25, #0x2f                  	// #47
  80:	movk	w26, #0x666e, lsl #16
  84:	mov	w27, #0x6f                  	// #111
  88:	bl	0 <strlen>
  8c:	ldr	x8, [x20, #8]
  90:	mov	x21, x0
  94:	mov	x0, x8
  98:	bl	0 <strlen>
  9c:	add	x8, x21, x0
  a0:	add	x0, x8, #0x7
  a4:	bl	0 <malloc>
  a8:	cbz	x0, 1d4 <ss_help+0x1d4>
  ac:	ldr	x8, [x23, #40]
  b0:	mov	x22, x0
  b4:	ldr	x1, [x8, x24]
  b8:	bl	0 <strcpy>
  bc:	bl	0 <strlen>
  c0:	strh	w25, [x22, x0]
  c4:	ldr	x1, [x20, #8]
  c8:	mov	x0, x22
  cc:	bl	0 <strcat>
  d0:	bl	0 <strlen>
  d4:	add	x8, x22, x0
  d8:	mov	x0, x22
  dc:	mov	w1, wzr
  e0:	str	w26, [x8]
  e4:	strh	w27, [x8, #4]
  e8:	bl	0 <open>
  ec:	mov	w21, w0
  f0:	mov	x0, x22
  f4:	bl	0 <free>
  f8:	tbz	w21, #31, 200 <ss_help+0x200>
  fc:	ldr	x8, [x23, #40]
 100:	add	x8, x8, x24
 104:	ldr	x0, [x8, #8]
 108:	add	x24, x24, #0x8
 10c:	cbnz	x0, 88 <ss_help+0x88>
 110:	ldr	x20, [x20, #8]
 114:	mov	x0, x20
 118:	bl	0 <strlen>
 11c:	add	x0, x0, #0x13
 120:	bl	0 <malloc>
 124:	adrp	x8, 0 <ss_help>
 128:	add	x8, x8, #0x0
 12c:	ldr	q0, [x8]
 130:	mov	w8, #0x726f                	// #29295
 134:	movk	w8, #0x20, lsl #16
 138:	mov	x1, x20
 13c:	mov	x21, x0
 140:	stur	w8, [x0, #15]
 144:	str	q0, [x0]
 148:	bl	0 <strcat>
 14c:	b	184 <ss_help+0x184>
 150:	ldr	x20, [x23, #32]
 154:	mov	x0, x20
 158:	bl	0 <strlen>
 15c:	lsl	x8, x0, #1
 160:	add	x0, x8, #0x50
 164:	bl	0 <malloc>
 168:	cbz	x0, 1c8 <ss_help+0x1c8>
 16c:	adrp	x1, 0 <ss_help>
 170:	add	x1, x1, #0x0
 174:	mov	x2, x20
 178:	mov	x3, x20
 17c:	mov	x21, x0
 180:	bl	0 <sprintf>
 184:	mov	w0, w19
 188:	mov	x1, xzr
 18c:	mov	x2, x21
 190:	bl	0 <ss_perror>
 194:	mov	x0, x21
 198:	ldp	x20, x19, [sp, #80]
 19c:	ldp	x22, x21, [sp, #64]
 1a0:	ldp	x24, x23, [sp, #48]
 1a4:	ldp	x26, x25, [sp, #32]
 1a8:	ldr	x27, [sp, #16]
 1ac:	ldp	x29, x30, [sp], #96
 1b0:	b	0 <free>
 1b4:	mov	w1, #0x6d03                	// #27907
 1b8:	movk	w1, #0xb, lsl #16
 1bc:	mov	w0, w19
 1c0:	mov	x2, xzr
 1c4:	b	1e4 <ss_help+0x1e4>
 1c8:	adrp	x2, 0 <ss_help>
 1cc:	add	x2, x2, #0x0
 1d0:	b	1dc <ss_help+0x1dc>
 1d4:	adrp	x2, 0 <ss_help>
 1d8:	add	x2, x2, #0x0
 1dc:	mov	w0, w19
 1e0:	mov	x1, xzr
 1e4:	ldp	x20, x19, [sp, #80]
 1e8:	ldp	x22, x21, [sp, #64]
 1ec:	ldp	x24, x23, [sp, #48]
 1f0:	ldp	x26, x25, [sp, #32]
 1f4:	ldr	x27, [sp, #16]
 1f8:	ldp	x29, x30, [sp], #96
 1fc:	b	0 <ss_perror>
 200:	bl	0 <fork>
 204:	mov	w20, w0
 208:	cbz	w0, 24c <ss_help+0x24c>
 20c:	cmn	w20, #0x1
 210:	b.ne	25c <ss_help+0x25c>  // b.any
 214:	bl	0 <__errno_location>
 218:	ldrsw	x1, [x0]
 21c:	adrp	x2, 0 <ss_help>
 220:	add	x2, x2, #0x0
 224:	mov	w0, w19
 228:	bl	0 <ss_perror>
 22c:	mov	w0, w21
 230:	ldp	x20, x19, [sp, #80]
 234:	ldp	x22, x21, [sp, #64]
 238:	ldp	x24, x23, [sp, #48]
 23c:	ldp	x26, x25, [sp, #32]
 240:	ldr	x27, [sp, #16]
 244:	ldp	x29, x30, [sp], #96
 248:	b	0 <close>
 24c:	mov	w0, w21
 250:	mov	w1, wzr
 254:	bl	0 <dup2>
 258:	bl	0 <ss_page_stdin>
 25c:	mov	w0, w21
 260:	bl	0 <close>
 264:	mov	x0, xzr
 268:	bl	0 <wait>
 26c:	cmp	w0, w20
 270:	b.ne	264 <ss_help+0x264>  // b.any
 274:	ldp	x20, x19, [sp, #80]
 278:	ldp	x22, x21, [sp, #64]
 27c:	ldp	x24, x23, [sp, #48]
 280:	ldp	x26, x25, [sp, #32]
 284:	ldr	x27, [sp, #16]
 288:	ldp	x29, x30, [sp], #96
 28c:	ret

0000000000000290 <ss_add_info_dir>:
 290:	stp	x29, x30, [sp, #-64]!
 294:	mov	w8, #0x6d03                	// #27907
 298:	stp	x20, x19, [sp, #48]
 29c:	mov	x19, x2
 2a0:	movk	w8, #0xb, lsl #16
 2a4:	str	x23, [sp, #16]
 2a8:	stp	x22, x21, [sp, #32]
 2ac:	mov	x29, sp
 2b0:	cbz	x1, 348 <ss_add_info_dir+0xb8>
 2b4:	ldrb	w9, [x1]
 2b8:	mov	x20, x1
 2bc:	cbz	w9, 348 <ss_add_info_dir+0xb8>
 2c0:	adrp	x8, 0 <_ss_table>
 2c4:	ldr	x8, [x8]
 2c8:	ldr	x22, [x8, w0, sxtw #3]
 2cc:	mov	x0, x20
 2d0:	bl	0 <opendir>
 2d4:	cbz	x0, 340 <ss_add_info_dir+0xb0>
 2d8:	bl	0 <closedir>
 2dc:	ldr	x0, [x22, #40]
 2e0:	mov	x8, xzr
 2e4:	mov	x23, #0xffffffffffffffff    	// #-1
 2e8:	ldr	x9, [x0, x8]
 2ec:	add	x23, x23, #0x1
 2f0:	add	x8, x8, #0x8
 2f4:	cbnz	x9, 2e8 <ss_add_info_dir+0x58>
 2f8:	add	x8, x8, #0x8
 2fc:	and	x1, x8, #0x7fffffff8
 300:	bl	0 <realloc>
 304:	cbz	x0, 33c <ss_add_info_dir+0xac>
 308:	add	w8, w23, #0x1
 30c:	mov	x21, x0
 310:	str	x0, [x22, #40]
 314:	str	xzr, [x0, w8, uxtw #3]
 318:	mov	x0, x20
 31c:	bl	0 <strlen>
 320:	add	w0, w0, #0x1
 324:	bl	0 <malloc>
 328:	mov	x1, x20
 32c:	str	x0, [x21, w23, uxtw #3]
 330:	bl	0 <strcpy>
 334:	mov	w8, wzr
 338:	b	348 <ss_add_info_dir+0xb8>
 33c:	str	xzr, [x22, #40]
 340:	bl	0 <__errno_location>
 344:	ldr	w8, [x0]
 348:	str	w8, [x19]
 34c:	ldp	x20, x19, [sp, #48]
 350:	ldp	x22, x21, [sp, #32]
 354:	ldr	x23, [sp, #16]
 358:	ldp	x29, x30, [sp], #64
 35c:	ret

0000000000000360 <ss_delete_info_dir>:
 360:	stp	x29, x30, [sp, #-48]!
 364:	adrp	x8, 0 <_ss_table>
 368:	ldr	x8, [x8]
 36c:	stp	x22, x21, [sp, #16]
 370:	stp	x20, x19, [sp, #32]
 374:	mov	w21, #0x6d03                	// #27907
 378:	ldr	x8, [x8, w0, sxtw #3]
 37c:	mov	x19, x2
 380:	movk	w21, #0xb, lsl #16
 384:	mov	x29, sp
 388:	ldr	x8, [x8, #40]
 38c:	ldr	x0, [x8]
 390:	cbz	x0, 3c8 <ss_delete_info_dir+0x68>
 394:	mov	x20, x1
 398:	add	x22, x8, #0x8
 39c:	mov	x1, x20
 3a0:	bl	0 <strcmp>
 3a4:	cbz	w0, 3b4 <ss_delete_info_dir+0x54>
 3a8:	ldr	x0, [x22], #8
 3ac:	cbnz	x0, 39c <ss_delete_info_dir+0x3c>
 3b0:	b	3c8 <ss_delete_info_dir+0x68>
 3b4:	ldr	x8, [x22]
 3b8:	stur	x8, [x22, #-8]
 3bc:	add	x22, x22, #0x8
 3c0:	cbnz	x8, 3b4 <ss_delete_info_dir+0x54>
 3c4:	mov	w21, wzr
 3c8:	str	w21, [x19]
 3cc:	ldp	x20, x19, [sp, #32]
 3d0:	ldp	x22, x21, [sp, #16]
 3d4:	ldp	x29, x30, [sp], #48
 3d8:	ret

execute_cmd.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_execute_command>:
   0:	sub	sp, sp, #0x70
   4:	stp	x24, x23, [sp, #64]
   8:	stp	x20, x19, [sp, #96]
   c:	mov	x23, x1
  10:	mov	w19, w0
  14:	mov	x24, xzr
  18:	mov	w20, #0xffffffff            	// #-1
  1c:	stp	x29, x30, [sp, #16]
  20:	stp	x28, x27, [sp, #32]
  24:	stp	x26, x25, [sp, #48]
  28:	stp	x22, x21, [sp, #80]
  2c:	add	x29, sp, #0x10
  30:	ldr	x8, [x23, x24]
  34:	add	x24, x24, #0x8
  38:	add	w20, w20, #0x1
  3c:	cbnz	x8, 30 <ss_execute_command+0x30>
  40:	add	w8, w20, #0x1
  44:	mov	w22, #0x6d04                	// #27908
  48:	lsl	x0, x8, #3
  4c:	movk	w22, #0xb, lsl #16
  50:	bl	0 <malloc>
  54:	mov	x1, x23
  58:	mov	x2, x24
  5c:	mov	x21, x0
  60:	bl	0 <memcpy>
  64:	adrp	x8, 0 <_ss_table>
  68:	ldr	x25, [x8]
  6c:	ldr	x24, [x25, w19, sxtw #3]
  70:	ldr	x26, [x24, #64]
  74:	ldr	x8, [x26]
  78:	cbz	x8, 120 <ss_execute_command+0x120>
  7c:	sxtw	x9, w19
  80:	stp	x9, x19, [sp]
  84:	ldr	x23, [x21]
  88:	str	w20, [x24, #16]
  8c:	str	x21, [x24, #24]
  90:	ldr	x22, [x8, #8]
  94:	ldr	x8, [x22]
  98:	cbz	x8, dc <ss_execute_command+0xdc>
  9c:	mov	x27, xzr
  a0:	mov	x28, x22
  a4:	b	b8 <ss_execute_command+0xb8>
  a8:	add	x27, x27, #0x1
  ac:	add	x28, x22, x27, lsl #5
  b0:	ldr	x8, [x28]
  b4:	cbz	x8, dc <ss_execute_command+0xdc>
  b8:	ldr	x0, [x8]
  bc:	cbz	x0, a8 <ss_execute_command+0xa8>
  c0:	add	x19, x8, #0x8
  c4:	mov	x1, x23
  c8:	bl	0 <strcmp>
  cc:	cbz	w0, f0 <ss_execute_command+0xf0>
  d0:	ldr	x0, [x19], #8
  d4:	cbnz	x0, c4 <ss_execute_command+0xc4>
  d8:	b	a8 <ss_execute_command+0xa8>
  dc:	ldr	x8, [x26, #8]!
  e0:	cbz	x8, 14c <ss_execute_command+0x14c>
  e4:	ldr	x9, [sp]
  e8:	ldr	x24, [x25, x9, lsl #3]
  ec:	b	84 <ss_execute_command+0x84>
  f0:	ldr	x8, [x28]
  f4:	add	x9, x22, x27, lsl #5
  f8:	ldr	x3, [x24, #48]
  fc:	mov	w0, w20
 100:	ldr	x8, [x8]
 104:	mov	x1, x21
 108:	ldr	x2, [sp, #8]
 10c:	str	x8, [x24, #32]
 110:	ldr	x8, [x9, #8]
 114:	blr	x8
 118:	mov	w22, wzr
 11c:	str	xzr, [x24, #32]
 120:	mov	x0, x21
 124:	bl	0 <free>
 128:	mov	w0, w22
 12c:	ldp	x20, x19, [sp, #96]
 130:	ldp	x22, x21, [sp, #80]
 134:	ldp	x24, x23, [sp, #64]
 138:	ldp	x26, x25, [sp, #48]
 13c:	ldp	x28, x27, [sp, #32]
 140:	ldp	x29, x30, [sp, #16]
 144:	add	sp, sp, #0x70
 148:	ret
 14c:	mov	w22, #0x6d04                	// #27908
 150:	movk	w22, #0xb, lsl #16
 154:	b	120 <ss_execute_command+0x120>

0000000000000158 <ss_execute_line>:
 158:	sub	sp, sp, #0x80
 15c:	stp	x20, x19, [sp, #112]
 160:	mov	w19, w0
 164:	stp	x29, x30, [sp, #32]
 168:	stp	x28, x27, [sp, #48]
 16c:	stp	x26, x25, [sp, #64]
 170:	stp	x24, x23, [sp, #80]
 174:	stp	x22, x21, [sp, #96]
 178:	add	x29, sp, #0x20
 17c:	b	184 <ss_execute_line+0x2c>
 180:	add	x1, x1, #0x1
 184:	ldrb	w8, [x1]
 188:	cmp	w8, #0x9
 18c:	b.eq	180 <ss_execute_line+0x28>  // b.none
 190:	cmp	w8, #0x20
 194:	b.eq	180 <ss_execute_line+0x28>  // b.none
 198:	cmp	w8, #0x21
 19c:	b.ne	1c8 <ss_execute_line+0x70>  // b.any
 1a0:	adrp	x8, 0 <_ss_table>
 1a4:	ldr	x8, [x8]
 1a8:	ldr	x8, [x8, w19, sxtw #3]
 1ac:	ldrb	w8, [x8, #80]
 1b0:	tbnz	w8, #0, 280 <ss_execute_line+0x128>
 1b4:	add	x0, x1, #0x1
 1b8:	bl	0 <system>
 1bc:	tbnz	w0, #31, 2dc <ss_execute_line+0x184>
 1c0:	mov	w21, wzr
 1c4:	b	2e4 <ss_execute_line+0x18c>
 1c8:	sub	x2, x29, #0x4
 1cc:	mov	w0, w19
 1d0:	bl	0 <ss_parse>
 1d4:	ldur	w9, [x29, #-4]
 1d8:	mov	x20, x0
 1dc:	cbz	w9, 2cc <ss_execute_line+0x174>
 1e0:	adrp	x8, 0 <_ss_table>
 1e4:	ldr	x8, [x8]
 1e8:	mov	w21, #0x6d04                	// #27908
 1ec:	movk	w21, #0xb, lsl #16
 1f0:	ldr	x24, [x8, w19, sxtw #3]
 1f4:	str	x8, [sp, #16]
 1f8:	ldr	x26, [x24, #64]
 1fc:	ldr	x8, [x26]
 200:	cbz	x8, 2c0 <ss_execute_line+0x168>
 204:	sxtw	x10, w19
 208:	str	x10, [sp, #8]
 20c:	stur	w9, [x29, #-8]
 210:	ldr	x23, [x20]
 214:	str	w9, [x24, #16]
 218:	str	x20, [x24, #24]
 21c:	ldr	x25, [x8, #8]
 220:	ldr	x8, [x25]
 224:	cbz	x8, 268 <ss_execute_line+0x110>
 228:	mov	x27, xzr
 22c:	mov	x28, x25
 230:	b	244 <ss_execute_line+0xec>
 234:	add	x27, x27, #0x1
 238:	add	x28, x25, x27, lsl #5
 23c:	ldr	x8, [x28]
 240:	cbz	x8, 268 <ss_execute_line+0x110>
 244:	ldr	x0, [x8]
 248:	cbz	x0, 234 <ss_execute_line+0xdc>
 24c:	add	x22, x8, #0x8
 250:	mov	x1, x23
 254:	bl	0 <strcmp>
 258:	cbz	w0, 290 <ss_execute_line+0x138>
 25c:	ldr	x0, [x22], #8
 260:	cbnz	x0, 250 <ss_execute_line+0xf8>
 264:	b	234 <ss_execute_line+0xdc>
 268:	ldr	x8, [x26, #8]!
 26c:	cbz	x8, 2c0 <ss_execute_line+0x168>
 270:	ldp	x10, x9, [sp, #8]
 274:	ldr	x24, [x9, x10, lsl #3]
 278:	ldur	w9, [x29, #-8]
 27c:	b	210 <ss_execute_line+0xb8>
 280:	mov	w8, #0x6d04                	// #27908
 284:	movk	w8, #0xb, lsl #16
 288:	add	w21, w8, #0x6
 28c:	b	2e4 <ss_execute_line+0x18c>
 290:	ldr	x8, [x28]
 294:	add	x9, x25, x27, lsl #5
 298:	ldr	x3, [x24, #48]
 29c:	ldur	w0, [x29, #-8]
 2a0:	ldr	x8, [x8]
 2a4:	mov	x1, x20
 2a8:	mov	w2, w19
 2ac:	str	x8, [x24, #32]
 2b0:	ldr	x8, [x9, #8]
 2b4:	blr	x8
 2b8:	mov	w21, wzr
 2bc:	str	xzr, [x24, #32]
 2c0:	mov	x0, x20
 2c4:	bl	0 <free>
 2c8:	b	2e4 <ss_execute_line+0x18c>
 2cc:	mov	x0, x20
 2d0:	bl	0 <free>
 2d4:	mov	w21, wzr
 2d8:	b	2e4 <ss_execute_line+0x18c>
 2dc:	bl	0 <__errno_location>
 2e0:	ldr	w21, [x0]
 2e4:	mov	w0, w21
 2e8:	ldp	x20, x19, [sp, #112]
 2ec:	ldp	x22, x21, [sp, #96]
 2f0:	ldp	x24, x23, [sp, #80]
 2f4:	ldp	x26, x25, [sp, #64]
 2f8:	ldp	x28, x27, [sp, #48]
 2fc:	ldp	x29, x30, [sp, #32]
 300:	add	sp, sp, #0x80
 304:	ret

listen.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_listen>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	stp	x28, x27, [sp, #16]
   8:	stp	x26, x25, [sp, #32]
   c:	stp	x24, x23, [sp, #48]
  10:	stp	x22, x21, [sp, #64]
  14:	stp	x20, x19, [sp, #80]
  18:	mov	x29, sp
  1c:	sub	sp, sp, #0x2, lsl #12
  20:	sub	sp, sp, #0x250
  24:	adrp	x8, 0 <_ss_table>
  28:	ldr	x8, [x8]
  2c:	adrp	x21, 0 <ss_listen>
  30:	add	x21, x21, #0x0
  34:	ldr	x23, [x21]
  38:	ldr	x28, [x8, w0, sxtw #3]
  3c:	mov	w20, w0
  40:	add	x0, sp, #0x148
  44:	stp	x28, xzr, [x21]
  48:	str	wzr, [x28, #136]
  4c:	bl	0 <sigemptyset>
  50:	add	x0, sp, #0x148
  54:	mov	w1, #0x2                   	// #2
  58:	bl	0 <sigaddset>
  5c:	add	x1, sp, #0x148
  60:	add	x2, sp, #0x1c8
  64:	mov	w0, wzr
  68:	bl	0 <sigprocmask>
  6c:	add	x19, x21, #0x20
  70:	add	x0, sp, #0x10
  74:	mov	w2, #0x138                 	// #312
  78:	mov	x1, x19
  7c:	bl	0 <memcpy>
  80:	adrp	x1, 0 <ss_listen>
  84:	add	x1, x1, #0x0
  88:	mov	w0, #0x2                   	// #2
  8c:	bl	0 <signal>
  90:	mov	x24, x0
  94:	mov	x0, x19
  98:	bl	0 <_setjmp>
  9c:	add	x1, sp, #0x1c8
  a0:	mov	w0, #0x2                   	// #2
  a4:	mov	x2, xzr
  a8:	bl	0 <sigprocmask>
  ac:	ldr	w8, [x28, #136]
  b0:	mov	w22, wzr
  b4:	cbnz	w8, 268 <ss_listen+0x268>
  b8:	mov	w27, #0x6d04                	// #27908
  bc:	mov	w8, #0x1fff                	// #8191
  c0:	add	x9, sp, #0x248
  c4:	adrp	x22, 0 <ss_listen>
  c8:	stp	x24, x23, [sp]
  cc:	movk	w27, #0xb, lsl #16
  d0:	adrp	x23, 0 <ss_listen>
  d4:	add	x22, x22, #0x0
  d8:	adrp	x21, 0 <ss_listen>
  dc:	add	x26, x9, x8
  e0:	b	ec <ss_listen+0xec>
  e4:	ldr	w8, [x28, #136]
  e8:	cbnz	w8, 258 <ss_listen+0x258>
  ec:	ldr	x24, [x23]
  f0:	mov	w0, #0x12                  	// #18
  f4:	mov	x1, x22
  f8:	bl	0 <signal>
  fc:	cmp	x0, x22
 100:	str	x0, [x23]
 104:	b.eq	128 <ss_listen+0x128>  // b.none
 108:	ldr	x9, [x28, #104]
 10c:	ldr	x8, [x21]
 110:	cbz	x9, 138 <ss_listen+0x138>
 114:	ldr	x0, [x8, #56]
 118:	blr	x9
 11c:	mov	x24, x0
 120:	cbnz	x0, 184 <ss_listen+0x184>
 124:	b	244 <ss_listen+0x244>
 128:	str	x24, [x23]
 12c:	ldr	x9, [x28, #104]
 130:	ldr	x8, [x21]
 134:	cbnz	x9, 114 <ss_listen+0x114>
 138:	ldr	x9, [x8, #120]
 13c:	cbz	x9, 148 <ss_listen+0x148>
 140:	blr	x9
 144:	b	160 <ss_listen+0x160>
 148:	adrp	x24, 0 <stdout>
 14c:	ldr	x0, [x8, #56]
 150:	ldr	x1, [x24]
 154:	bl	0 <fputs>
 158:	ldr	x0, [x24]
 15c:	bl	0 <fflush>
 160:	adrp	x8, 0 <stdin>
 164:	ldr	x2, [x8]
 168:	add	x0, sp, #0x248
 16c:	mov	w1, #0x2000                	// #8192
 170:	add	x24, sp, #0x248
 174:	bl	0 <fgets>
 178:	cmp	x0, x24
 17c:	strb	wzr, [x26]
 180:	b.ne	244 <ss_listen+0x244>  // b.any
 184:	mov	w1, #0xa                   	// #10
 188:	mov	x0, x24
 18c:	bl	0 <strchr>
 190:	cbz	x0, 1a0 <ss_listen+0x1a0>
 194:	cmp	x0, x24
 198:	strb	wzr, [x0]
 19c:	b.eq	e4 <ss_listen+0xe4>  // b.none
 1a0:	ldr	x1, [x23]
 1a4:	mov	w0, #0x12                  	// #18
 1a8:	bl	0 <signal>
 1ac:	ldr	x8, [x28, #112]
 1b0:	cbz	x8, 1bc <ss_listen+0x1bc>
 1b4:	mov	x0, x24
 1b8:	blr	x8
 1bc:	mov	w0, w20
 1c0:	mov	x1, x24
 1c4:	bl	0 <ss_execute_line>
 1c8:	cmp	w0, w27
 1cc:	b.ne	230 <ss_listen+0x230>  // b.any
 1d0:	mov	x25, x24
 1d4:	b	1dc <ss_listen+0x1dc>
 1d8:	add	x25, x25, #0x1
 1dc:	ldrb	w8, [x25]
 1e0:	cmp	w8, #0x20
 1e4:	b.eq	1d8 <ss_listen+0x1d8>  // b.none
 1e8:	cmp	w8, #0x9
 1ec:	b.eq	1d8 <ss_listen+0x1d8>  // b.none
 1f0:	mov	w1, #0x20                  	// #32
 1f4:	mov	x0, x25
 1f8:	bl	0 <strchr>
 1fc:	cbz	x0, 204 <ss_listen+0x204>
 200:	strb	wzr, [x0]
 204:	mov	w1, #0x9                   	// #9
 208:	mov	x0, x25
 20c:	bl	0 <strchr>
 210:	cbz	x0, 218 <ss_listen+0x218>
 214:	strb	wzr, [x0]
 218:	adrp	x2, 0 <ss_listen>
 21c:	mov	w0, w20
 220:	mov	x1, xzr
 224:	add	x2, x2, #0x0
 228:	mov	x3, x25
 22c:	bl	0 <ss_error>
 230:	ldr	x8, [x28, #104]
 234:	cbz	x8, e4 <ss_listen+0xe4>
 238:	mov	x0, x24
 23c:	bl	0 <free>
 240:	b	e4 <ss_listen+0xe4>
 244:	ldr	x1, [x23]
 248:	mov	w0, #0x12                  	// #18
 24c:	bl	0 <signal>
 250:	add	w22, w27, #0x2
 254:	b	25c <ss_listen+0x25c>
 258:	mov	w22, wzr
 25c:	ldp	x24, x23, [sp]
 260:	adrp	x21, 0 <ss_listen>
 264:	add	x21, x21, #0x0
 268:	mov	w0, #0x2                   	// #2
 26c:	mov	x1, x24
 270:	bl	0 <signal>
 274:	add	x1, sp, #0x10
 278:	mov	w2, #0x138                 	// #312
 27c:	mov	x0, x19
 280:	bl	0 <memcpy>
 284:	str	x23, [x21]
 288:	mov	w0, w22
 28c:	add	sp, sp, #0x2, lsl #12
 290:	add	sp, sp, #0x250
 294:	ldp	x20, x19, [sp, #80]
 298:	ldp	x22, x21, [sp, #64]
 29c:	ldp	x24, x23, [sp, #48]
 2a0:	ldp	x26, x25, [sp, #32]
 2a4:	ldp	x28, x27, [sp, #16]
 2a8:	ldp	x29, x30, [sp], #96
 2ac:	ret

00000000000002b0 <listen_int_handler>:
 2b0:	stp	x29, x30, [sp, #-16]!
 2b4:	adrp	x8, 0 <stdout>
 2b8:	ldr	x1, [x8]
 2bc:	mov	w0, #0xa                   	// #10
 2c0:	mov	x29, sp
 2c4:	bl	0 <putc>
 2c8:	adrp	x1, 0 <ss_listen>
 2cc:	add	x1, x1, #0x0
 2d0:	mov	w0, #0x2                   	// #2
 2d4:	bl	0 <signal>
 2d8:	adrp	x0, 0 <ss_listen>
 2dc:	add	x0, x0, #0x0
 2e0:	mov	w1, #0x1                   	// #1
 2e4:	bl	0 <longjmp>

00000000000002e8 <print_prompt>:
 2e8:	stp	x29, x30, [sp, #-32]!
 2ec:	adrp	x8, 0 <ss_listen>
 2f0:	ldr	x8, [x8]
 2f4:	str	x19, [sp, #16]
 2f8:	mov	x29, sp
 2fc:	ldr	x0, [x8, #120]
 300:	cbz	x0, 310 <print_prompt+0x28>
 304:	ldr	x19, [sp, #16]
 308:	ldp	x29, x30, [sp], #32
 30c:	br	x0
 310:	adrp	x19, 0 <stdout>
 314:	ldr	x0, [x8, #56]
 318:	ldr	x1, [x19]
 31c:	bl	0 <fputs>
 320:	ldr	x0, [x19]
 324:	ldr	x19, [sp, #16]
 328:	ldp	x29, x30, [sp], #32
 32c:	b	0 <fflush>

0000000000000330 <ss_abort_subsystem>:
 330:	adrp	x8, 0 <_ss_table>
 334:	ldr	x8, [x8]
 338:	mov	w9, #0x1                   	// #1
 33c:	ldr	x8, [x8, w0, sxtw #3]
 340:	stp	w9, w1, [x8, #136]
 344:	ret

0000000000000348 <ss_quit>:
 348:	adrp	x8, 0 <_ss_table>
 34c:	ldr	x8, [x8]
 350:	adrp	x9, 0 <ss_listen>
 354:	ldr	d0, [x9]
 358:	ldr	x8, [x8, w2, sxtw #3]
 35c:	str	d0, [x8, #136]
 360:	ret

0000000000000364 <ss_rl_completion>:
 364:	cbz	w1, 370 <ss_rl_completion+0xc>
 368:	mov	x0, xzr
 36c:	ret
 370:	adrp	x8, 0 <ss_listen>
 374:	ldr	x8, [x8]
 378:	ldr	x2, [x8, #128]
 37c:	cbz	x2, 368 <ss_rl_completion+0x4>
 380:	adrp	x1, 0 <ss_listen>
 384:	add	x1, x1, #0x0
 388:	br	x2

000000000000038c <cmd_generator>:
 38c:	stp	x29, x30, [sp, #-96]!
 390:	stp	x20, x19, [sp, #80]
 394:	mov	x19, x0
 398:	str	x27, [sp, #16]
 39c:	stp	x26, x25, [sp, #32]
 3a0:	stp	x24, x23, [sp, #48]
 3a4:	stp	x22, x21, [sp, #64]
 3a8:	mov	x29, sp
 3ac:	cbz	w1, 478 <cmd_generator+0xec>
 3b0:	adrp	x8, 0 <ss_listen>
 3b4:	add	x8, x8, #0x0
 3b8:	ldr	w0, [x8]
 3bc:	ldp	x24, x22, [x8, #24]
 3c0:	adrp	x25, 0 <ss_listen>
 3c4:	sxtw	x20, w0
 3c8:	add	x25, x25, #0x0
 3cc:	adrp	x26, 0 <ss_listen>
 3d0:	adrp	x27, 0 <ss_listen>
 3d4:	adrp	x23, 0 <ss_listen>
 3d8:	cbz	x22, 3e4 <cmd_generator+0x58>
 3dc:	ldr	x8, [x22]
 3e0:	cbnz	x8, 408 <cmd_generator+0x7c>
 3e4:	ldr	x8, [x24]
 3e8:	ldrsw	x9, [x25]
 3ec:	ldr	x8, [x8, #8]
 3f0:	add	w10, w9, #0x1
 3f4:	str	w10, [x25]
 3f8:	lsl	x9, x9, #5
 3fc:	ldr	x22, [x8, x9]
 400:	stur	x22, [x25, #28]
 404:	cbz	x22, 42c <cmd_generator+0xa0>
 408:	ldr	x21, [x22]
 40c:	mov	x1, x19
 410:	mov	x2, x20
 414:	mov	x0, x21
 418:	bl	0 <strncmp>
 41c:	cbz	w0, 44c <cmd_generator+0xc0>
 420:	add	x22, x22, #0x8
 424:	str	x22, [x23]
 428:	b	3d8 <cmd_generator+0x4c>
 42c:	add	x8, x24, #0x8
 430:	str	x8, [x26]
 434:	ldr	x9, [x24, #8]
 438:	cbz	x9, 4bc <cmd_generator+0x130>
 43c:	mov	x22, xzr
 440:	str	wzr, [x27]
 444:	mov	x24, x8
 448:	b	3d8 <cmd_generator+0x4c>
 44c:	mov	x0, x21
 450:	bl	0 <strlen>
 454:	add	x0, x0, #0x1
 458:	bl	0 <malloc>
 45c:	cbz	x0, 46c <cmd_generator+0xe0>
 460:	ldr	x1, [x22]
 464:	bl	0 <strcpy>
 468:	ldr	x22, [x23]
 46c:	add	x8, x22, #0x8
 470:	str	x8, [x23]
 474:	b	4c0 <cmd_generator+0x134>
 478:	mov	x0, x19
 47c:	bl	0 <strlen>
 480:	adrp	x8, 0 <ss_listen>
 484:	add	x8, x8, #0x0
 488:	ldr	x9, [x8, #8]
 48c:	str	w0, [x8]
 490:	ldr	x24, [x9, #64]
 494:	str	x24, [x8, #24]
 498:	cbz	x24, 4bc <cmd_generator+0x130>
 49c:	ldr	x8, [x24]
 4a0:	cbz	x8, 4bc <cmd_generator+0x130>
 4a4:	adrp	x8, 0 <ss_listen>
 4a8:	mov	x22, xzr
 4ac:	add	x8, x8, #0x0
 4b0:	str	wzr, [x8]
 4b4:	stur	xzr, [x8, #28]
 4b8:	b	3c0 <cmd_generator+0x34>
 4bc:	mov	x0, xzr
 4c0:	ldp	x20, x19, [sp, #80]
 4c4:	ldp	x22, x21, [sp, #64]
 4c8:	ldp	x24, x23, [sp, #48]
 4cc:	ldp	x26, x25, [sp, #32]
 4d0:	ldr	x27, [sp, #16]
 4d4:	ldp	x29, x30, [sp], #96
 4d8:	ret

parse.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_parse>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	stp	x20, x19, [sp, #64]
   8:	mov	w20, w0
   c:	mov	w0, #0x8                   	// #8
  10:	stp	x26, x25, [sp, #16]
  14:	stp	x24, x23, [sp, #32]
  18:	stp	x22, x21, [sp, #48]
  1c:	mov	x29, sp
  20:	mov	x19, x2
  24:	mov	x22, x1
  28:	bl	0 <malloc>
  2c:	mov	x21, x0
  30:	cbz	x0, 17c <ss_parse+0x17c>
  34:	adrp	x24, 0 <ss_parse>
  38:	mov	w23, wzr
  3c:	mov	w9, #0x1                   	// #1
  40:	add	x24, x24, #0x0
  44:	mov	w25, #0x22                  	// #34
  48:	mov	x8, x22
  4c:	str	xzr, [x21]
  50:	mov	x26, x22
  54:	tbz	w9, #0, ac <ss_parse+0xac>
  58:	ldrb	w8, [x26]
  5c:	cmp	w8, #0x22
  60:	b.hi	80 <ss_parse+0x80>  // b.pmore
  64:	adr	x9, 74 <ss_parse+0x74>
  68:	ldrb	w10, [x24, x8]
  6c:	add	x9, x9, x10, lsl #2
  70:	br	x9
  74:	ldrb	w8, [x26, #1]!
  78:	cmp	w8, #0x22
  7c:	b.ls	64 <ss_parse+0x64>  // b.plast
  80:	add	w8, w23, #0x2
  84:	lsl	x1, x8, #3
  88:	mov	x0, x21
  8c:	bl	0 <realloc>
  90:	cbz	x0, 1b0 <ss_parse+0x1b0>
  94:	sxtw	x8, w23
  98:	str	x26, [x0, w23, sxtw #3]
  9c:	add	x23, x8, #0x1
  a0:	str	xzr, [x0, x23, lsl #3]
  a4:	mov	x8, x26
  a8:	mov	x21, x0
  ac:	add	x22, x26, #0x1
  b0:	mov	x26, x8
  b4:	ldurb	w8, [x22, #-1]
  b8:	cmp	w8, #0x20
  bc:	b.eq	e8 <ss_parse+0xe8>  // b.none
  c0:	cmp	w8, #0x9
  c4:	b.eq	e8 <ss_parse+0xe8>  // b.none
  c8:	cbz	w8, 1c4 <ss_parse+0x1c4>
  cc:	cmp	w8, #0x22
  d0:	b.eq	124 <ss_parse+0x124>  // b.none
  d4:	strb	w8, [x26], #1
  d8:	add	x22, x22, #0x1
  dc:	ldurb	w8, [x22, #-1]
  e0:	cmp	w8, #0x20
  e4:	b.ne	c0 <ss_parse+0xc0>  // b.any
  e8:	strb	wzr, [x26], #1
  ec:	mov	w9, #0x1                   	// #1
  f0:	mov	x8, x26
  f4:	b	50 <ss_parse+0x50>
  f8:	add	w8, w23, #0x2
  fc:	lsl	x1, x8, #3
 100:	mov	x0, x21
 104:	bl	0 <realloc>
 108:	cbz	x0, 1b0 <ss_parse+0x1b0>
 10c:	sxtw	x8, w23
 110:	add	x22, x26, #0x1
 114:	str	x26, [x0, w23, sxtw #3]
 118:	add	x23, x8, #0x1
 11c:	mov	x21, x0
 120:	str	xzr, [x0, x23, lsl #3]
 124:	ldrb	w9, [x22]
 128:	mov	x10, x22
 12c:	mov	x8, x26
 130:	cbnz	w9, 14c <ss_parse+0x14c>
 134:	b	19c <ss_parse+0x19c>
 138:	strb	w9, [x8]
 13c:	ldrb	w9, [x22]
 140:	add	x8, x8, #0x1
 144:	mov	x10, x22
 148:	cbz	w9, 19c <ss_parse+0x19c>
 14c:	and	w11, w9, #0xff
 150:	cmp	w11, #0x22
 154:	add	x22, x10, #0x1
 158:	b.ne	138 <ss_parse+0x138>  // b.any
 15c:	ldrb	w9, [x22]
 160:	cmp	w9, #0x22
 164:	b.ne	174 <ss_parse+0x174>  // b.any
 168:	strb	w25, [x8]
 16c:	add	x22, x10, #0x2
 170:	b	13c <ss_parse+0x13c>
 174:	mov	w9, wzr
 178:	b	50 <ss_parse+0x50>
 17c:	bl	0 <__errno_location>
 180:	ldrsw	x1, [x0]
 184:	adrp	x2, 0 <ss_parse>
 188:	add	x2, x2, #0x0
 18c:	mov	w0, w20
 190:	bl	0 <ss_error>
 194:	mov	w23, wzr
 198:	b	1c8 <ss_parse+0x1c8>
 19c:	adrp	x2, 0 <ss_parse>
 1a0:	add	x2, x2, #0x0
 1a4:	mov	w0, w20
 1a8:	mov	x1, xzr
 1ac:	bl	0 <ss_error>
 1b0:	mov	x0, x21
 1b4:	bl	0 <free>
 1b8:	mov	w23, wzr
 1bc:	mov	x21, xzr
 1c0:	b	1c8 <ss_parse+0x1c8>
 1c4:	strb	wzr, [x26]
 1c8:	str	w23, [x19]
 1cc:	mov	x0, x21
 1d0:	ldp	x20, x19, [sp, #64]
 1d4:	ldp	x22, x21, [sp, #48]
 1d8:	ldp	x24, x23, [sp, #32]
 1dc:	ldp	x26, x25, [sp, #16]
 1e0:	ldp	x29, x30, [sp], #80
 1e4:	ret

error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_name>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	adrp	x8, 0 <_ss_table>
   8:	ldr	x8, [x8]
   c:	stp	x22, x21, [sp, #16]
  10:	stp	x20, x19, [sp, #32]
  14:	mov	x29, sp
  18:	ldr	x22, [x8, w0, sxtw #3]
  1c:	ldr	x19, [x22]
  20:	ldr	x21, [x22, #32]
  24:	mov	x0, x19
  28:	bl	0 <strlen>
  2c:	mov	x20, x0
  30:	cbz	x21, a4 <ss_name+0xa4>
  34:	mov	x0, x21
  38:	bl	0 <strlen>
  3c:	add	x8, x20, x0
  40:	add	x0, x8, #0x4
  44:	bl	0 <malloc>
  48:	ldrb	w9, [x19]
  4c:	mov	x8, x0
  50:	cbz	w9, 68 <ss_name+0x68>
  54:	add	x10, x19, #0x1
  58:	mov	x8, x0
  5c:	strb	w9, [x8], #1
  60:	ldrb	w9, [x10], #1
  64:	cbnz	w9, 5c <ss_name+0x5c>
  68:	mov	w9, #0x2820                	// #10272
  6c:	strh	w9, [x8], #2
  70:	ldr	x10, [x22, #32]
  74:	ldrb	w9, [x10]
  78:	cbz	w9, 8c <ss_name+0x8c>
  7c:	add	x10, x10, #0x1
  80:	strb	w9, [x8], #1
  84:	ldrb	w9, [x10], #1
  88:	cbnz	w9, 80 <ss_name+0x80>
  8c:	mov	w9, #0x29                  	// #41
  90:	strh	w9, [x8]
  94:	ldp	x20, x19, [sp, #32]
  98:	ldp	x22, x21, [sp, #16]
  9c:	ldp	x29, x30, [sp], #48
  a0:	ret
  a4:	add	w0, w20, #0x1
  a8:	bl	0 <malloc>
  ac:	cbz	x0, 94 <ss_name+0x94>
  b0:	ldr	x1, [x22]
  b4:	bl	0 <strcpy>
  b8:	ldp	x20, x19, [sp, #32]
  bc:	ldp	x22, x21, [sp, #16]
  c0:	ldp	x29, x30, [sp], #48
  c4:	ret

00000000000000c8 <ss_error>:
  c8:	sub	sp, sp, #0x120
  cc:	stp	x29, x30, [sp, #240]
  d0:	add	x29, sp, #0xf0
  d4:	mov	x8, #0xffffffffffffffd8    	// #-40
  d8:	mov	x9, sp
  dc:	sub	x10, x29, #0x68
  e0:	movk	x8, #0xff80, lsl #32
  e4:	add	x11, x29, #0x30
  e8:	add	x9, x9, #0x80
  ec:	add	x10, x10, #0x28
  f0:	stp	x28, x21, [sp, #256]
  f4:	stp	x20, x19, [sp, #272]
  f8:	mov	x19, x2
  fc:	mov	x20, x1
 100:	stp	x3, x4, [x29, #-104]
 104:	stp	x5, x6, [x29, #-88]
 108:	stur	x7, [x29, #-72]
 10c:	stp	q1, q2, [sp, #16]
 110:	stp	q3, q4, [sp, #48]
 114:	str	q0, [sp]
 118:	stp	q5, q6, [sp, #80]
 11c:	str	q7, [sp, #112]
 120:	stp	x9, x8, [x29, #-16]
 124:	stp	x11, x10, [x29, #-32]
 128:	bl	0 <ss_name>
 12c:	ldp	q0, q1, [x29, #-32]
 130:	sub	x3, x29, #0x40
 134:	mov	x1, x20
 138:	mov	x2, x19
 13c:	mov	x21, x0
 140:	stp	q0, q1, [x29, #-64]
 144:	bl	0 <com_err_va>
 148:	mov	x0, x21
 14c:	bl	0 <free>
 150:	ldp	x20, x19, [sp, #272]
 154:	ldp	x28, x21, [sp, #256]
 158:	ldp	x29, x30, [sp, #240]
 15c:	add	sp, sp, #0x120
 160:	ret

0000000000000164 <ss_perror>:
 164:	mov	x3, x2
 168:	adrp	x2, 0 <ss_name>
 16c:	add	x2, x2, #0x0
 170:	b	c8 <ss_error>

prompt.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_set_prompt>:
   0:	adrp	x8, 0 <_ss_table>
   4:	ldr	x8, [x8]
   8:	ldr	x8, [x8, w0, sxtw #3]
   c:	str	x1, [x8, #56]
  10:	ret

0000000000000014 <ss_get_prompt>:
  14:	adrp	x8, 0 <_ss_table>
  18:	ldr	x8, [x8]
  1c:	ldr	x8, [x8, w0, sxtw #3]
  20:	ldr	x0, [x8, #56]
  24:	ret

request_tbl.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_add_request_table>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	adrp	x9, 0 <_ss_table>
   8:	ldr	x9, [x9]
   c:	stp	x22, x21, [sp, #32]
  10:	stp	x20, x19, [sp, #48]
  14:	str	x23, [sp, #16]
  18:	ldr	x22, [x9, w0, sxtw #3]
  1c:	mov	x19, x3
  20:	mov	w21, w2
  24:	mov	x20, x1
  28:	ldr	x0, [x22, #64]
  2c:	mov	x8, xzr
  30:	mov	x23, #0xffffffffffffffff    	// #-1
  34:	mov	x29, sp
  38:	ldr	x9, [x0, x8]
  3c:	add	x23, x23, #0x1
  40:	add	x8, x8, #0x8
  44:	cbnz	x9, 38 <ss_add_request_table+0x38>
  48:	add	x8, x8, #0x8
  4c:	and	x1, x8, #0x7fffffff8
  50:	bl	0 <realloc>
  54:	cbz	x0, a0 <ss_add_request_table+0xa0>
  58:	cmp	w23, w21
  5c:	csel	w9, w23, w21, lt  // lt = tstop
  60:	and	x8, x23, #0xffffffff
  64:	sxtw	x9, w9
  68:	str	x0, [x22, #64]
  6c:	add	x10, x0, x8, lsl #3
  70:	ldr	x11, [x10]
  74:	cmp	x8, x9
  78:	sub	x8, x8, #0x1
  7c:	str	x11, [x10, #8]
  80:	ldr	x0, [x22, #64]
  84:	b.gt	6c <ss_add_request_table+0x6c>
  88:	str	x20, [x0, x9, lsl #3]
  8c:	ldr	x9, [x22, #64]
  90:	mov	w8, wzr
  94:	add	w10, w23, #0x1
  98:	str	xzr, [x9, w10, uxtw #3]
  9c:	b	a8 <ss_add_request_table+0xa8>
  a0:	bl	0 <__errno_location>
  a4:	ldr	w8, [x0]
  a8:	str	w8, [x19]
  ac:	ldp	x20, x19, [sp, #48]
  b0:	ldp	x22, x21, [sp, #32]
  b4:	ldr	x23, [sp, #16]
  b8:	ldp	x29, x30, [sp], #64
  bc:	ret

00000000000000c0 <ss_delete_request_table>:
  c0:	mov	w8, #0x6d08                	// #27912
  c4:	movk	w8, #0xb, lsl #16
  c8:	str	w8, [x2]
  cc:	adrp	x8, 0 <_ss_table>
  d0:	ldr	x8, [x8]
  d4:	ldr	x8, [x8, w0, sxtw #3]
  d8:	ldr	x8, [x8, #64]
  dc:	ldr	x10, [x8]
  e0:	cbz	x10, 108 <ss_delete_request_table+0x48>
  e4:	add	x9, x8, #0x8
  e8:	b	f4 <ss_delete_request_table+0x34>
  ec:	ldr	x10, [x9], #8
  f0:	cbz	x10, 108 <ss_delete_request_table+0x48>
  f4:	cmp	x10, x1
  f8:	b.eq	ec <ss_delete_request_table+0x2c>  // b.none
  fc:	str	x10, [x8], #8
 100:	str	wzr, [x2]
 104:	b	ec <ss_delete_request_table+0x2c>
 108:	str	xzr, [x8]
 10c:	ret

list_rqs.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_list_requests>:
   0:	sub	sp, sp, #0x170
   4:	add	x0, sp, #0x8
   8:	stp	x29, x30, [sp, #272]
   c:	stp	x28, x27, [sp, #288]
  10:	stp	x26, x25, [sp, #304]
  14:	stp	x24, x23, [sp, #320]
  18:	stp	x22, x21, [sp, #336]
  1c:	stp	x20, x19, [sp, #352]
  20:	add	x29, sp, #0x110
  24:	mov	w21, w2
  28:	bl	0 <sigemptyset>
  2c:	add	x0, sp, #0x8
  30:	mov	w1, #0x2                   	// #2
  34:	bl	0 <sigaddset>
  38:	add	x1, sp, #0x8
  3c:	add	x2, sp, #0x88
  40:	mov	w0, wzr
  44:	bl	0 <sigprocmask>
  48:	mov	w0, #0x2                   	// #2
  4c:	mov	w1, #0x1                   	// #1
  50:	bl	0 <signal>
  54:	mov	x19, x0
  58:	bl	0 <ss_pager_create>
  5c:	tbnz	w0, #31, 1dc <ss_list_requests+0x1dc>
  60:	adrp	x1, 0 <ss_list_requests>
  64:	add	x1, x1, #0x0
  68:	bl	0 <fdopen>
  6c:	mov	x20, x0
  70:	add	x1, sp, #0x88
  74:	mov	w0, #0x2                   	// #2
  78:	mov	x2, xzr
  7c:	bl	0 <sigprocmask>
  80:	adrp	x22, 0 <_ss_table>
  84:	ldr	x8, [x22]
  88:	sbfiz	x21, x21, #3, #32
  8c:	adrp	x1, 0 <ss_list_requests>
  90:	add	x1, x1, #0x0
  94:	ldr	x8, [x8, x21]
  98:	mov	x0, x20
  9c:	ldr	x2, [x8]
  a0:	bl	0 <fprintf>
  a4:	ldr	x8, [x22]
  a8:	ldr	x8, [x8, x21]
  ac:	ldr	x24, [x8, #64]
  b0:	ldr	x8, [x24]
  b4:	cbz	x8, 1a0 <ss_list_requests+0x1a0>
  b8:	adrp	x21, 0 <ss_list_requests>
  bc:	mov	w25, #0x19                  	// #25
  c0:	add	x21, x21, #0x0
  c4:	b	d0 <ss_list_requests+0xd0>
  c8:	ldr	x8, [x24, #8]!
  cc:	cbz	x8, 1a0 <ss_list_requests+0x1a0>
  d0:	ldr	x26, [x8, #8]
  d4:	ldr	x8, [x26]
  d8:	cbnz	x8, e8 <ss_list_requests+0xe8>
  dc:	b	c8 <ss_list_requests+0xc8>
  e0:	ldr	x8, [x26, #32]!
  e4:	cbz	x8, c8 <ss_list_requests+0xc8>
  e8:	ldrb	w9, [x26, #24]
  ec:	tbnz	w9, #0, e0 <ss_list_requests+0xe0>
  f0:	ldr	x22, [x8]
  f4:	cbz	x22, 160 <ss_list_requests+0x160>
  f8:	add	x28, x8, #0x8
  fc:	mov	w27, #0xfffffffe            	// #-2
 100:	mov	x0, x22
 104:	bl	0 <strlen>
 108:	mov	x23, x0
 10c:	mov	x0, x22
 110:	mov	x1, x20
 114:	bl	0 <fputs>
 118:	ldr	x8, [x28]
 11c:	add	w9, w27, w23
 120:	add	w27, w9, #0x2
 124:	cbz	x8, 144 <ss_list_requests+0x144>
 128:	mov	w1, #0x2                   	// #2
 12c:	mov	w2, #0x1                   	// #1
 130:	mov	x0, x21
 134:	mov	x3, x20
 138:	bl	0 <fwrite>
 13c:	ldr	x22, [x28], #8
 140:	cbnz	x22, 100 <ss_list_requests+0x100>
 144:	cmp	w27, #0x18
 148:	b.lt	164 <ss_list_requests+0x164>  // b.tstop
 14c:	mov	w0, #0xa                   	// #10
 150:	mov	x1, x20
 154:	bl	0 <fputc>
 158:	mov	w27, wzr
 15c:	b	164 <ss_list_requests+0x164>
 160:	mov	w27, #0xfffffffe            	// #-2
 164:	mov	w22, wzr
 168:	sub	w23, w25, w27
 16c:	mov	w0, #0x20                  	// #32
 170:	mov	x1, x20
 174:	bl	0 <fputc>
 178:	add	w22, w22, #0x1
 17c:	cmp	w22, w23
 180:	b.lt	16c <ss_list_requests+0x16c>  // b.tstop
 184:	ldr	x0, [x26, #16]
 188:	mov	x1, x20
 18c:	bl	0 <fputs>
 190:	mov	w0, #0xa                   	// #10
 194:	mov	x1, x20
 198:	bl	0 <fputc>
 19c:	b	e0 <ss_list_requests+0xe0>
 1a0:	mov	x0, x20
 1a4:	bl	0 <fclose>
 1a8:	add	x0, sp, #0x4
 1ac:	bl	0 <wait>
 1b0:	mov	w0, #0x2                   	// #2
 1b4:	mov	x1, x19
 1b8:	bl	0 <signal>
 1bc:	ldp	x20, x19, [sp, #352]
 1c0:	ldp	x22, x21, [sp, #336]
 1c4:	ldp	x24, x23, [sp, #320]
 1c8:	ldp	x26, x25, [sp, #304]
 1cc:	ldp	x28, x27, [sp, #288]
 1d0:	ldp	x29, x30, [sp, #272]
 1d4:	add	sp, sp, #0x170
 1d8:	ret
 1dc:	adrp	x0, 0 <ss_list_requests>
 1e0:	add	x0, x0, #0x0
 1e4:	bl	0 <perror>
 1e8:	b	1b0 <ss_list_requests+0x1b0>

pager.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_safe_getenv>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	stp	x20, x19, [sp, #16]
   8:	mov	x29, sp
   c:	mov	x19, x0
  10:	bl	0 <getuid>
  14:	mov	w20, w0
  18:	bl	0 <geteuid>
  1c:	cmp	w20, w0
  20:	b.ne	64 <ss_safe_getenv+0x64>  // b.any
  24:	bl	0 <getgid>
  28:	mov	w20, w0
  2c:	bl	0 <getegid>
  30:	cmp	w20, w0
  34:	b.ne	64 <ss_safe_getenv+0x64>  // b.any
  38:	mov	w0, #0x3                   	// #3
  3c:	mov	w1, wzr
  40:	mov	w2, wzr
  44:	mov	w3, wzr
  48:	mov	w4, wzr
  4c:	bl	0 <prctl>
  50:	cbz	w0, 64 <ss_safe_getenv+0x64>
  54:	mov	x0, x19
  58:	ldp	x20, x19, [sp, #16]
  5c:	ldp	x29, x30, [sp], #32
  60:	b	0 <secure_getenv>
  64:	ldp	x20, x19, [sp, #16]
  68:	mov	x0, xzr
  6c:	ldp	x29, x30, [sp], #32
  70:	ret

0000000000000074 <ss_pager_create>:
  74:	sub	sp, sp, #0x20
  78:	add	x0, sp, #0x8
  7c:	stp	x29, x30, [sp, #16]
  80:	add	x29, sp, #0x10
  84:	bl	0 <pipe>
  88:	cbz	w0, 9c <ss_pager_create+0x28>
  8c:	mov	w0, #0xffffffff            	// #-1
  90:	ldp	x29, x30, [sp, #16]
  94:	add	sp, sp, #0x20
  98:	ret
  9c:	bl	0 <fork>
  a0:	cmn	w0, #0x1
  a4:	b.eq	90 <ss_pager_create+0x1c>  // b.none
  a8:	cbz	w0, c4 <ss_pager_create+0x50>
  ac:	ldr	w0, [sp, #8]
  b0:	bl	0 <close>
  b4:	ldr	w0, [sp, #12]
  b8:	ldp	x29, x30, [sp, #16]
  bc:	add	sp, sp, #0x20
  c0:	ret
  c4:	ldr	w0, [sp, #8]
  c8:	mov	w1, wzr
  cc:	bl	0 <dup2>
  d0:	cmn	w0, #0x1
  d4:	b.ne	e0 <ss_pager_create+0x6c>  // b.any
  d8:	mov	w0, #0x1                   	// #1
  dc:	bl	0 <exit>
  e0:	bl	e4 <ss_page_stdin>

00000000000000e4 <ss_page_stdin>:
  e4:	sub	sp, sp, #0x100
  e8:	mov	w0, #0x3                   	// #3
  ec:	stp	x29, x30, [sp, #208]
  f0:	str	x21, [sp, #224]
  f4:	stp	x20, x19, [sp, #240]
  f8:	add	x29, sp, #0xd0
  fc:	bl	0 <close>
 100:	mov	w0, #0x4                   	// #4
 104:	bl	0 <close>
 108:	mov	w0, #0x5                   	// #5
 10c:	bl	0 <close>
 110:	mov	w0, #0x6                   	// #6
 114:	bl	0 <close>
 118:	mov	w0, #0x7                   	// #7
 11c:	bl	0 <close>
 120:	mov	w0, #0x8                   	// #8
 124:	bl	0 <close>
 128:	mov	w0, #0x9                   	// #9
 12c:	bl	0 <close>
 130:	mov	w0, #0xa                   	// #10
 134:	bl	0 <close>
 138:	mov	w0, #0xb                   	// #11
 13c:	bl	0 <close>
 140:	mov	w0, #0xc                   	// #12
 144:	bl	0 <close>
 148:	mov	w0, #0xd                   	// #13
 14c:	bl	0 <close>
 150:	mov	w0, #0xe                   	// #14
 154:	bl	0 <close>
 158:	mov	w0, #0xf                   	// #15
 15c:	bl	0 <close>
 160:	mov	w0, #0x10                  	// #16
 164:	bl	0 <close>
 168:	mov	w0, #0x11                  	// #17
 16c:	bl	0 <close>
 170:	mov	w0, #0x12                  	// #18
 174:	bl	0 <close>
 178:	mov	w0, #0x13                  	// #19
 17c:	bl	0 <close>
 180:	mov	w0, #0x14                  	// #20
 184:	bl	0 <close>
 188:	mov	w0, #0x15                  	// #21
 18c:	bl	0 <close>
 190:	mov	w0, #0x16                  	// #22
 194:	bl	0 <close>
 198:	mov	w0, #0x17                  	// #23
 19c:	bl	0 <close>
 1a0:	mov	w0, #0x18                  	// #24
 1a4:	bl	0 <close>
 1a8:	mov	w0, #0x19                  	// #25
 1ac:	bl	0 <close>
 1b0:	mov	w0, #0x1a                  	// #26
 1b4:	bl	0 <close>
 1b8:	mov	w0, #0x1b                  	// #27
 1bc:	bl	0 <close>
 1c0:	mov	w0, #0x1c                  	// #28
 1c4:	bl	0 <close>
 1c8:	mov	w0, #0x1d                  	// #29
 1cc:	bl	0 <close>
 1d0:	mov	w0, #0x1e                  	// #30
 1d4:	bl	0 <close>
 1d8:	mov	w0, #0x1f                  	// #31
 1dc:	bl	0 <close>
 1e0:	mov	w0, #0x2                   	// #2
 1e4:	mov	x1, xzr
 1e8:	bl	0 <signal>
 1ec:	add	x2, sp, #0x50
 1f0:	mov	w0, wzr
 1f4:	mov	x1, xzr
 1f8:	bl	0 <sigprocmask>
 1fc:	add	x0, sp, #0x50
 200:	mov	w1, #0x2                   	// #2
 204:	bl	0 <sigdelset>
 208:	add	x1, sp, #0x50
 20c:	mov	w0, #0x2                   	// #2
 210:	mov	x2, xzr
 214:	bl	0 <sigprocmask>
 218:	adrp	x20, 0 <_ss_pager_name>
 21c:	ldr	x0, [x20]
 220:	cbnz	x0, 280 <ss_page_stdin+0x19c>
 224:	bl	0 <getuid>
 228:	mov	w19, w0
 22c:	bl	0 <geteuid>
 230:	cmp	w19, w0
 234:	b.ne	268 <ss_page_stdin+0x184>  // b.any
 238:	bl	0 <getgid>
 23c:	mov	w19, w0
 240:	bl	0 <getegid>
 244:	cmp	w19, w0
 248:	b.ne	268 <ss_page_stdin+0x184>  // b.any
 24c:	mov	w0, #0x3                   	// #3
 250:	mov	w1, wzr
 254:	mov	w2, wzr
 258:	mov	w3, wzr
 25c:	mov	w4, wzr
 260:	bl	0 <prctl>
 264:	cbnz	w0, 328 <ss_page_stdin+0x244>
 268:	mov	x0, xzr
 26c:	adrp	x8, 0 <ss_safe_getenv>
 270:	add	x8, x8, #0x0
 274:	cmp	x0, #0x0
 278:	csel	x0, x8, x0, eq  // eq = none
 27c:	str	x0, [x20]
 280:	mov	x1, x0
 284:	mov	x2, xzr
 288:	bl	0 <execlp>
 28c:	mov	x1, sp
 290:	mov	w2, #0x50                  	// #80
 294:	mov	w0, wzr
 298:	bl	0 <read>
 29c:	cmp	w0, #0x1
 2a0:	b.lt	31c <ss_page_stdin+0x238>  // b.tstop
 2a4:	lsl	x8, x0, #32
 2a8:	cbz	x8, 304 <ss_page_stdin+0x220>
 2ac:	mov	x19, sp
 2b0:	asr	x20, x8, #32
 2b4:	mov	w0, #0x1                   	// #1
 2b8:	mov	x1, x19
 2bc:	mov	x2, x20
 2c0:	bl	0 <write>
 2c4:	tbz	x0, #63, 2f8 <ss_page_stdin+0x214>
 2c8:	bl	0 <__errno_location>
 2cc:	mov	x21, x0
 2d0:	ldr	w8, [x21]
 2d4:	cmp	w8, #0xb
 2d8:	b.eq	2e4 <ss_page_stdin+0x200>  // b.none
 2dc:	cmp	w8, #0x4
 2e0:	b.ne	304 <ss_page_stdin+0x220>  // b.any
 2e4:	mov	w0, #0x1                   	// #1
 2e8:	mov	x1, x19
 2ec:	mov	x2, x20
 2f0:	bl	0 <write>
 2f4:	tbnz	x0, #63, 2d0 <ss_page_stdin+0x1ec>
 2f8:	subs	x20, x20, x0
 2fc:	add	x19, x19, x0
 300:	b.ne	2b4 <ss_page_stdin+0x1d0>  // b.any
 304:	mov	x1, sp
 308:	mov	w2, #0x50                  	// #80
 30c:	mov	w0, wzr
 310:	bl	0 <read>
 314:	cmp	w0, #0x0
 318:	b.gt	2a4 <ss_page_stdin+0x1c0>
 31c:	bl	0 <__errno_location>
 320:	ldr	w0, [x0]
 324:	bl	0 <exit>
 328:	adrp	x0, 0 <ss_safe_getenv>
 32c:	add	x0, x0, #0x0
 330:	bl	0 <secure_getenv>
 334:	b	26c <ss_page_stdin+0x188>

requests.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_self_identify>:
   0:	adrp	x8, 0 <_ss_table>
   4:	ldr	x8, [x8]
   8:	adrp	x0, 0 <ss_self_identify>
   c:	add	x0, x0, #0x0
  10:	ldr	x8, [x8, w2, sxtw #3]
  14:	ldp	x1, x2, [x8]
  18:	b	0 <printf>

000000000000001c <ss_subsystem_name>:
  1c:	adrp	x8, 0 <_ss_table>
  20:	ldr	x8, [x8]
  24:	ldr	x8, [x8, w2, sxtw #3]
  28:	ldr	x0, [x8]
  2c:	b	0 <puts>

0000000000000030 <ss_subsystem_version>:
  30:	adrp	x8, 0 <_ss_table>
  34:	ldr	x8, [x8]
  38:	ldr	x8, [x8, w2, sxtw #3]
  3c:	ldr	x0, [x8, #8]
  40:	b	0 <puts>

0000000000000044 <ss_unimplemented>:
  44:	adrp	x8, 0 <ss_self_identify>
  48:	add	x8, x8, #0x0
  4c:	mov	w1, #0x6d0b                	// #27915
  50:	movk	w1, #0xb, lsl #16
  54:	mov	w0, w2
  58:	mov	x2, x8
  5c:	b	0 <ss_perror>

data.o:     file format elf64-littleaarch64


get_readline.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_get_readline>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	stp	x22, x21, [sp, #16]
   8:	stp	x20, x19, [sp, #32]
   c:	adrp	x8, 0 <_ss_table>
  10:	ldr	x8, [x8]
  14:	mov	x29, sp
  18:	ldr	x22, [x8, w0, sxtw #3]
  1c:	ldr	x8, [x22, #88]
  20:	cbz	x8, 34 <ss_get_readline+0x34>
  24:	ldp	x20, x19, [sp, #32]
  28:	ldp	x22, x21, [sp, #16]
  2c:	ldp	x29, x30, [sp], #48
  30:	ret
  34:	adrp	x0, 0 <ss_get_readline>
  38:	add	x0, x0, #0x0
  3c:	bl	0 <ss_safe_getenv>
  40:	adrp	x8, 0 <ss_get_readline>
  44:	add	x8, x8, #0x0
  48:	cmp	x0, #0x0
  4c:	csel	x20, x8, x0, eq  // eq = none
  50:	ldrb	w8, [x20]
  54:	cbz	w8, 24 <ss_get_readline+0x24>
  58:	adrp	x1, 0 <ss_get_readline>
  5c:	add	x1, x1, #0x0
  60:	mov	x0, x20
  64:	bl	0 <strcmp>
  68:	cbz	w0, 24 <ss_get_readline+0x24>
  6c:	mov	x0, x20
  70:	bl	0 <strlen>
  74:	add	x0, x0, #0x1
  78:	bl	0 <malloc>
  7c:	cbz	x0, 24 <ss_get_readline+0x24>
  80:	mov	x1, x20
  84:	mov	x19, x0
  88:	bl	0 <strcpy>
  8c:	mov	x20, x0
  90:	b	9c <ss_get_readline+0x9c>
  94:	mov	x20, x21
  98:	cbz	x21, 184 <ss_get_readline+0x184>
  9c:	mov	w1, #0x3a                  	// #58
  a0:	mov	x0, x20
  a4:	bl	0 <strchr>
  a8:	mov	x21, x0
  ac:	cbz	x0, b4 <ss_get_readline+0xb4>
  b0:	strb	wzr, [x21], #1
  b4:	ldrb	w8, [x20]
  b8:	cbz	w8, 94 <ss_get_readline+0x94>
  bc:	mov	w1, #0x2                   	// #2
  c0:	mov	x0, x20
  c4:	bl	0 <dlopen>
  c8:	cbz	x0, 94 <ss_get_readline+0x94>
  cc:	mov	x20, x0
  d0:	mov	x0, x19
  d4:	bl	0 <free>
  d8:	adrp	x1, 0 <ss_get_readline>
  dc:	add	x1, x1, #0x0
  e0:	mov	x0, x20
  e4:	str	x20, [x22, #88]
  e8:	bl	0 <dlsym>
  ec:	adrp	x1, 0 <ss_get_readline>
  f0:	str	x0, [x22, #104]
  f4:	add	x1, x1, #0x0
  f8:	mov	x0, x20
  fc:	bl	0 <dlsym>
 100:	adrp	x1, 0 <ss_get_readline>
 104:	str	x0, [x22, #112]
 108:	add	x1, x1, #0x0
 10c:	mov	x0, x20
 110:	bl	0 <dlsym>
 114:	adrp	x1, 0 <ss_get_readline>
 118:	str	x0, [x22, #120]
 11c:	add	x1, x1, #0x0
 120:	mov	x0, x20
 124:	bl	0 <dlsym>
 128:	adrp	x1, 0 <ss_get_readline>
 12c:	str	x0, [x22, #128]
 130:	add	x1, x1, #0x0
 134:	mov	x0, x20
 138:	bl	0 <dlsym>
 13c:	cbz	x0, 148 <ss_get_readline+0x148>
 140:	ldr	x8, [x22]
 144:	str	x8, [x0]
 148:	adrp	x1, 0 <ss_get_readline>
 14c:	add	x1, x1, #0x0
 150:	mov	x0, x20
 154:	bl	0 <dlsym>
 158:	cbz	x0, 168 <ss_get_readline+0x168>
 15c:	adrp	x8, 0 <ss_rl_completion>
 160:	add	x8, x8, #0x0
 164:	str	x8, [x0]
 168:	adrp	x8, 0 <ss_get_readline>
 16c:	add	x8, x8, #0x0
 170:	str	x8, [x22, #96]
 174:	ldp	x20, x19, [sp, #32]
 178:	ldp	x22, x21, [sp, #16]
 17c:	ldp	x29, x30, [sp], #48
 180:	ret
 184:	mov	x0, x19
 188:	ldp	x20, x19, [sp, #32]
 18c:	ldp	x22, x21, [sp, #16]
 190:	ldp	x29, x30, [sp], #48
 194:	b	0 <free>

0000000000000198 <ss_release_readline>:
 198:	stp	x29, x30, [sp, #-32]!
 19c:	str	x19, [sp, #16]
 1a0:	mov	x19, x0
 1a4:	ldr	x0, [x0, #88]
 1a8:	mov	x29, sp
 1ac:	cbz	x0, 1c4 <ss_release_readline+0x2c>
 1b0:	movi	v0.2d, #0x0
 1b4:	stur	q0, [x19, #120]
 1b8:	stur	q0, [x19, #104]
 1bc:	bl	0 <dlclose>
 1c0:	str	xzr, [x19, #88]
 1c4:	ldr	x19, [sp, #16]
 1c8:	ldp	x29, x30, [sp], #32
 1cc:	ret
