
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//seq_clang_-O1:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000000fc8 <_init>:
 fc8:	stp	x29, x30, [sp, #-16]!
 fcc:	mov	x29, sp
 fd0:	bl	11f0 <call_weak_fn>
 fd4:	ldp	x29, x30, [sp], #16
 fd8:	ret

Disassembly of section .plt:

0000000000000fe0 <.plt>:
     fe0:	stp	x16, x30, [sp, #-16]!
     fe4:	adrp	x16, 14000 <__FRAME_END__+0x1022c>
     fe8:	ldr	x17, [x16, #4088]
     fec:	add	x16, x16, #0xff8
     ff0:	br	x17
     ff4:	nop
     ff8:	nop
     ffc:	nop

0000000000001000 <memcpy@plt>:
    1000:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1004:	ldr	x17, [x16]
    1008:	add	x16, x16, #0x0
    100c:	br	x17

0000000000001010 <all_digits@plt>:
    1010:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1014:	ldr	x17, [x16, #8]
    1018:	add	x16, x16, #0x8
    101c:	br	x17

0000000000001020 <fputs@plt>:
    1020:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1024:	ldr	x17, [x16, #16]
    1028:	add	x16, x16, #0x10
    102c:	br	x17

0000000000001030 <builtin_error@plt>:
    1030:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1034:	ldr	x17, [x16, #24]
    1038:	add	x16, x16, #0x18
    103c:	br	x17

0000000000001040 <builtin_warning@plt>:
    1040:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1044:	ldr	x17, [x16, #32]
    1048:	add	x16, x16, #0x20
    104c:	br	x17

0000000000001050 <__cxa_finalize@plt>:
    1050:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1054:	ldr	x17, [x16, #40]
    1058:	add	x16, x16, #0x28
    105c:	br	x17

0000000000001060 <sprintf@plt>:
    1060:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1064:	ldr	x17, [x16, #48]
    1068:	add	x16, x16, #0x30
    106c:	br	x17

0000000000001070 <snprintf@plt>:
    1070:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1074:	ldr	x17, [x16, #56]
    1078:	add	x16, x16, #0x38
    107c:	br	x17

0000000000001080 <locale_decpoint@plt>:
    1080:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1084:	ldr	x17, [x16, #64]
    1088:	add	x16, x16, #0x40
    108c:	br	x17

0000000000001090 <print_intseq@plt>:
    1090:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1094:	ldr	x17, [x16, #72]
    1098:	add	x16, x16, #0x48
    109c:	br	x17

00000000000010a0 <builtin_help@plt>:
    10a0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10a4:	ldr	x17, [x16, #80]
    10a8:	add	x16, x16, #0x50
    10ac:	br	x17

00000000000010b0 <xmalloc@plt>:
    10b0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10b4:	ldr	x17, [x16, #88]
    10b8:	add	x16, x16, #0x58
    10bc:	br	x17

00000000000010c0 <builtin_usage@plt>:
    10c0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10c4:	ldr	x17, [x16, #96]
    10c8:	add	x16, x16, #0x60
    10cc:	br	x17

00000000000010d0 <strerror@plt>:
    10d0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10d4:	ldr	x17, [x16, #104]
    10d8:	add	x16, x16, #0x68
    10dc:	br	x17

00000000000010e0 <__gmon_start__@plt>:
    10e0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10e4:	ldr	x17, [x16, #112]
    10e8:	add	x16, x16, #0x70
    10ec:	br	x17

00000000000010f0 <__ctype_b_loc@plt>:
    10f0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10f4:	ldr	x17, [x16, #120]
    10f8:	add	x16, x16, #0x78
    10fc:	br	x17

0000000000001100 <strtold@plt>:
    1100:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1104:	ldr	x17, [x16, #128]
    1108:	add	x16, x16, #0x80
    110c:	br	x17

0000000000001110 <print_fltseq@plt>:
    1110:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1114:	ldr	x17, [x16, #136]
    1118:	add	x16, x16, #0x88
    111c:	br	x17

0000000000001120 <free@plt>:
    1120:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1124:	ldr	x17, [x16, #144]
    1128:	add	x16, x16, #0x90
    112c:	br	x17

0000000000001130 <internal_getopt@plt>:
    1130:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1134:	ldr	x17, [x16, #152]
    1138:	add	x16, x16, #0x98
    113c:	br	x17

0000000000001140 <reset_internal_getopt@plt>:
    1140:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1144:	ldr	x17, [x16, #160]
    1148:	add	x16, x16, #0xa0
    114c:	br	x17

0000000000001150 <strspn@plt>:
    1150:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1154:	ldr	x17, [x16, #168]
    1158:	add	x16, x16, #0xa8
    115c:	br	x17

0000000000001160 <strchr@plt>:
    1160:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1164:	ldr	x17, [x16, #176]
    1168:	add	x16, x16, #0xb0
    116c:	br	x17

0000000000001170 <sh_chkwrite@plt>:
    1170:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1174:	ldr	x17, [x16, #184]
    1178:	add	x16, x16, #0xb8
    117c:	br	x17

0000000000001180 <strcpy@plt>:
    1180:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1184:	ldr	x17, [x16, #192]
    1188:	add	x16, x16, #0xc0
    118c:	br	x17

0000000000001190 <termsig_handler@plt>:
    1190:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1194:	ldr	x17, [x16, #200]
    1198:	add	x16, x16, #0xc8
    119c:	br	x17

00000000000011a0 <width_needed@plt>:
    11a0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11a4:	ldr	x17, [x16, #208]
    11a8:	add	x16, x16, #0xd0
    11ac:	br	x17

00000000000011b0 <throw_to_top_level@plt>:
    11b0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11b4:	ldr	x17, [x16, #216]
    11b8:	add	x16, x16, #0xd8
    11bc:	br	x17

00000000000011c0 <printf@plt>:
    11c0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11c4:	ldr	x17, [x16, #224]
    11c8:	add	x16, x16, #0xe0
    11cc:	br	x17

00000000000011d0 <__errno_location@plt>:
    11d0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11d4:	ldr	x17, [x16, #232]
    11d8:	add	x16, x16, #0xe8
    11dc:	br	x17

00000000000011e0 <sh_invalidnum@plt>:
    11e0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11e4:	ldr	x17, [x16, #240]
    11e8:	add	x16, x16, #0xf0
    11ec:	br	x17

Disassembly of section .text:

00000000000011f0 <call_weak_fn>:
    11f0:	adrp	x0, 14000 <__FRAME_END__+0x1022c>
    11f4:	ldr	x0, [x0, #4032]
    11f8:	cbz	x0, 1200 <call_weak_fn+0x10>
    11fc:	b	10e0 <__gmon_start__@plt>
    1200:	ret
    1204:	nop

0000000000001208 <deregister_tm_clones>:
    1208:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    120c:	add	x0, x0, #0x1b0
    1210:	adrp	x1, 15000 <memcpy@GLIBC_2.17>
    1214:	add	x1, x1, #0x1b0
    1218:	cmp	x1, x0
    121c:	b.eq	1234 <deregister_tm_clones+0x2c>  // b.none
    1220:	adrp	x1, 14000 <__FRAME_END__+0x1022c>
    1224:	ldr	x1, [x1, #3992]
    1228:	cbz	x1, 1234 <deregister_tm_clones+0x2c>
    122c:	mov	x16, x1
    1230:	br	x16
    1234:	ret

0000000000001238 <register_tm_clones>:
    1238:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    123c:	add	x0, x0, #0x1b0
    1240:	adrp	x1, 15000 <memcpy@GLIBC_2.17>
    1244:	add	x1, x1, #0x1b0
    1248:	sub	x1, x1, x0
    124c:	lsr	x2, x1, #63
    1250:	add	x1, x2, x1, asr #3
    1254:	cmp	xzr, x1, asr #1
    1258:	asr	x1, x1, #1
    125c:	b.eq	1274 <register_tm_clones+0x3c>  // b.none
    1260:	adrp	x2, 14000 <__FRAME_END__+0x1022c>
    1264:	ldr	x2, [x2, #4064]
    1268:	cbz	x2, 1274 <register_tm_clones+0x3c>
    126c:	mov	x16, x2
    1270:	br	x16
    1274:	ret

0000000000001278 <__do_global_dtors_aux>:
    1278:	stp	x29, x30, [sp, #-32]!
    127c:	mov	x29, sp
    1280:	str	x19, [sp, #16]
    1284:	adrp	x19, 15000 <memcpy@GLIBC_2.17>
    1288:	ldrb	w0, [x19, #432]
    128c:	cbnz	w0, 12b4 <__do_global_dtors_aux+0x3c>
    1290:	adrp	x0, 14000 <__FRAME_END__+0x1022c>
    1294:	ldr	x0, [x0, #4000]
    1298:	cbz	x0, 12a8 <__do_global_dtors_aux+0x30>
    129c:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    12a0:	ldr	x0, [x0, #248]
    12a4:	bl	1050 <__cxa_finalize@plt>
    12a8:	bl	1208 <deregister_tm_clones>
    12ac:	mov	w0, #0x1                   	// #1
    12b0:	strb	w0, [x19, #432]
    12b4:	ldr	x19, [sp, #16]
    12b8:	ldp	x29, x30, [sp], #32
    12bc:	ret

00000000000012c0 <frame_dummy>:
    12c0:	b	1238 <register_tm_clones>

00000000000012c4 <print_fltseq>:
    12c4:	sub	sp, sp, #0xb0
    12c8:	stp	x29, x30, [sp, #80]
    12cc:	add	x29, sp, #0x50
    12d0:	str	x27, [sp, #96]
    12d4:	stp	x26, x25, [sp, #112]
    12d8:	stp	x24, x23, [sp, #128]
    12dc:	stp	x22, x21, [sp, #144]
    12e0:	stp	x20, x19, [sp, #160]
    12e4:	stur	q2, [x29, #-32]
    12e8:	stp	q0, q1, [sp, #16]
    12ec:	mov	x19, x0
    12f0:	bl	2b90 <__letf2>
    12f4:	ldp	q0, q1, [sp, #16]
    12f8:	cmp	w0, #0x0
    12fc:	cset	w20, le
    1300:	bl	2a48 <__getf2>
    1304:	adrp	x8, 3000 <__multf3+0x330>
    1308:	ldr	q1, [x8, #1776]
    130c:	ldur	q0, [x29, #-32]
    1310:	cmp	w0, #0x0
    1314:	cset	w21, ge  // ge = tcont
    1318:	str	q1, [sp]
    131c:	bl	2a48 <__getf2>
    1320:	cmp	w0, #0x0
    1324:	csel	w8, w20, w21, ge  // ge = tcont
    1328:	cmp	w8, #0x1
    132c:	b.ne	1420 <print_fltseq+0x15c>  // b.any
    1330:	adrp	x22, 14000 <__FRAME_END__+0x1022c>
    1334:	adrp	x23, 14000 <__FRAME_END__+0x1022c>
    1338:	adrp	x24, 14000 <__FRAME_END__+0x1022c>
    133c:	ldr	x22, [x22, #4048]
    1340:	ldr	x23, [x23, #4024]
    1344:	ldr	x24, [x24, #4016]
    1348:	ldr	q0, [sp, #16]
    134c:	adrp	x21, 3000 <__multf3+0x330>
    1350:	add	x21, x21, #0x742
    1354:	mov	w20, #0x1                   	// #1
    1358:	adrp	x25, 15000 <memcpy@GLIBC_2.17>
    135c:	stur	q0, [x29, #-16]
    1360:	ldr	w8, [x22]
    1364:	cbz	w8, 1370 <print_fltseq+0xac>
    1368:	ldr	w0, [x22]
    136c:	bl	1190 <termsig_handler@plt>
    1370:	ldr	w8, [x23]
    1374:	cbz	w8, 137c <print_fltseq+0xb8>
    1378:	bl	11b0 <throw_to_top_level@plt>
    137c:	ldrb	w8, [x21]
    1380:	cbz	w8, 1398 <print_fltseq+0xd4>
    1384:	ldr	x1, [x24]
    1388:	mov	x0, x21
    138c:	bl	1020 <fputs@plt>
    1390:	cmn	w0, #0x1
    1394:	b.eq	1428 <print_fltseq+0x164>  // b.none
    1398:	ldur	q0, [x29, #-16]
    139c:	mov	x0, x19
    13a0:	bl	11c0 <printf@plt>
    13a4:	tbnz	w0, #31, 1428 <print_fltseq+0x164>
    13a8:	ldr	x21, [x25, #440]
    13ac:	mov	w0, w20
    13b0:	bl	34b8 <__floatsitf>
    13b4:	ldur	q1, [x29, #-32]
    13b8:	bl	2cd0 <__multf3>
    13bc:	ldr	q1, [sp, #16]
    13c0:	bl	1e18 <__addtf3>
    13c4:	ldr	q1, [sp, #32]
    13c8:	stur	q0, [x29, #-16]
    13cc:	bl	2b90 <__letf2>
    13d0:	ldur	q0, [x29, #-16]
    13d4:	ldr	q1, [sp, #32]
    13d8:	cmp	w0, #0x0
    13dc:	cset	w26, le
    13e0:	bl	2a48 <__getf2>
    13e4:	ldur	q0, [x29, #-32]
    13e8:	ldr	q1, [sp]
    13ec:	cmp	w0, #0x0
    13f0:	cset	w27, ge  // ge = tcont
    13f4:	bl	2a48 <__getf2>
    13f8:	cmp	w0, #0x0
    13fc:	csel	w8, w26, w27, ge  // ge = tcont
    1400:	add	w20, w20, #0x1
    1404:	tbnz	w8, #0, 1360 <print_fltseq+0x9c>
    1408:	ldr	x1, [x24]
    140c:	adrp	x0, 3000 <__multf3+0x330>
    1410:	add	x0, x0, #0xb80
    1414:	bl	1020 <fputs@plt>
    1418:	cmn	w0, #0x1
    141c:	b.eq	1428 <print_fltseq+0x164>  // b.none
    1420:	mov	w0, wzr
    1424:	b	142c <print_fltseq+0x168>
    1428:	mov	w0, #0x1                   	// #1
    142c:	bl	1170 <sh_chkwrite@plt>
    1430:	ldp	x20, x19, [sp, #160]
    1434:	ldp	x22, x21, [sp, #144]
    1438:	ldp	x24, x23, [sp, #128]
    143c:	ldp	x26, x25, [sp, #112]
    1440:	ldr	x27, [sp, #96]
    1444:	ldp	x29, x30, [sp, #80]
    1448:	add	sp, sp, #0xb0
    144c:	ret

0000000000001450 <width_needed>:
    1450:	mov	x8, x0
    1454:	cmp	x8, #0x0
    1458:	cneg	x9, x8, mi  // mi = first
    145c:	mov	x8, #0x6666666666666666    	// #7378697629483820646
    1460:	lsr	x0, x0, #63
    1464:	movk	x8, #0x6667
    1468:	smulh	x10, x9, x8
    146c:	asr	x11, x10, #2
    1470:	add	x9, x9, #0x9
    1474:	add	x10, x11, x10, lsr #63
    1478:	cmp	x9, #0x12
    147c:	add	w0, w0, #0x1
    1480:	mov	x9, x10
    1484:	b.hi	1468 <width_needed+0x18>  // b.pmore
    1488:	ret

000000000000148c <print_intseq>:
    148c:	sub	sp, sp, #0x80
    1490:	adrp	x8, 15000 <memcpy@GLIBC_2.17>
    1494:	ldrb	w8, [x8, #448]
    1498:	stp	x22, x21, [sp, #96]
    149c:	stp	x20, x19, [sp, #112]
    14a0:	mov	x19, x2
    14a4:	mov	x20, x1
    14a8:	cmp	w8, #0x1
    14ac:	mov	x21, x0
    14b0:	stp	x29, x30, [sp, #32]
    14b4:	stp	x28, x27, [sp, #48]
    14b8:	stp	x26, x25, [sp, #64]
    14bc:	stp	x24, x23, [sp, #80]
    14c0:	add	x29, sp, #0x20
    14c4:	b.ne	14f8 <print_intseq+0x6c>  // b.any
    14c8:	mov	x0, x21
    14cc:	bl	11a0 <width_needed@plt>
    14d0:	mov	w22, w0
    14d4:	mov	x0, x20
    14d8:	bl	11a0 <width_needed@plt>
    14dc:	cmp	w22, w0
    14e0:	adrp	x2, 3000 <__multf3+0x330>
    14e4:	csel	w3, w0, w22, lt  // lt = tstop
    14e8:	add	x2, x2, #0x730
    14ec:	add	x0, sp, #0xc
    14f0:	mov	w1, #0x14                  	// #20
    14f4:	bl	1070 <snprintf@plt>
    14f8:	cmp	x21, x20
    14fc:	cset	w8, le
    1500:	cset	w9, ge  // ge = tcont
    1504:	csel	w8, w9, w8, gt
    1508:	cmp	w8, #0x1
    150c:	b.ne	1598 <print_intseq+0x10c>  // b.any
    1510:	adrp	x25, 14000 <__FRAME_END__+0x1022c>
    1514:	adrp	x26, 14000 <__FRAME_END__+0x1022c>
    1518:	ldr	x25, [x25, #4048]
    151c:	ldr	x26, [x26, #4024]
    1520:	adrp	x22, 3000 <__multf3+0x330>
    1524:	adrp	x27, 3000 <__multf3+0x330>
    1528:	add	x22, x22, #0x742
    152c:	add	x27, x27, #0x73b
    1530:	add	x28, sp, #0xc
    1534:	adrp	x24, 15000 <memcpy@GLIBC_2.17>
    1538:	mov	x23, x21
    153c:	ldr	w8, [x25]
    1540:	cbz	w8, 154c <print_intseq+0xc0>
    1544:	ldr	w0, [x25]
    1548:	bl	1190 <termsig_handler@plt>
    154c:	ldr	w8, [x26]
    1550:	cbz	w8, 1558 <print_intseq+0xcc>
    1554:	bl	11b0 <throw_to_top_level@plt>
    1558:	adrp	x8, 15000 <memcpy@GLIBC_2.17>
    155c:	ldrb	w8, [x8, #448]
    1560:	mov	x1, x22
    1564:	mov	x2, x23
    1568:	cmp	w8, #0x0
    156c:	csel	x0, x28, x27, ne  // ne = any
    1570:	bl	11c0 <printf@plt>
    1574:	tbnz	w0, #31, 15bc <print_intseq+0x130>
    1578:	ldr	x22, [x24, #440]
    157c:	add	x23, x23, x19
    1580:	cmp	x23, x20
    1584:	cset	w8, le
    1588:	cset	w9, ge  // ge = tcont
    158c:	cmp	x21, x20
    1590:	csel	w8, w9, w8, gt
    1594:	tbnz	w8, #0, 153c <print_intseq+0xb0>
    1598:	adrp	x8, 14000 <__FRAME_END__+0x1022c>
    159c:	ldr	x8, [x8, #4016]
    15a0:	adrp	x0, 3000 <__multf3+0x330>
    15a4:	add	x0, x0, #0xb80
    15a8:	ldr	x1, [x8]
    15ac:	bl	1020 <fputs@plt>
    15b0:	cmn	w0, #0x1
    15b4:	cset	w0, eq  // eq = none
    15b8:	b	15c0 <print_intseq+0x134>
    15bc:	mov	w0, #0x1                   	// #1
    15c0:	bl	1170 <sh_chkwrite@plt>
    15c4:	ldp	x20, x19, [sp, #112]
    15c8:	ldp	x22, x21, [sp, #96]
    15cc:	ldp	x24, x23, [sp, #80]
    15d0:	ldp	x26, x25, [sp, #64]
    15d4:	ldp	x28, x27, [sp, #48]
    15d8:	ldp	x29, x30, [sp, #32]
    15dc:	add	sp, sp, #0x80
    15e0:	ret

00000000000015e4 <seq_builtin>:
    15e4:	sub	sp, sp, #0x90
    15e8:	adrp	x8, 3000 <__multf3+0x330>
    15ec:	stp	x24, x23, [sp, #96]
    15f0:	stp	x22, x21, [sp, #112]
    15f4:	adrp	x24, 15000 <memcpy@GLIBC_2.17>
    15f8:	adrp	x22, 15000 <memcpy@GLIBC_2.17>
    15fc:	add	x8, x8, #0x741
    1600:	stp	x29, x30, [sp, #64]
    1604:	stp	x26, x25, [sp, #80]
    1608:	stp	x20, x19, [sp, #128]
    160c:	add	x29, sp, #0x40
    1610:	mov	x20, x0
    1614:	strb	wzr, [x24, #448]
    1618:	str	x8, [x22, #440]
    161c:	bl	1140 <reset_internal_getopt@plt>
    1620:	adrp	x23, 14000 <__FRAME_END__+0x1022c>
    1624:	adrp	x25, 14000 <__FRAME_END__+0x1022c>
    1628:	ldr	x23, [x23, #4008]
    162c:	ldr	x25, [x25, #4040]
    1630:	adrp	x21, 3000 <__multf3+0x330>
    1634:	mov	x19, xzr
    1638:	add	x21, x21, #0x743
    163c:	mov	w26, #0x1                   	// #1
    1640:	b	1654 <seq_builtin+0x70>
    1644:	ldr	x8, [x25]
    1648:	str	x8, [x22, #440]
    164c:	cmn	w0, #0x1
    1650:	b.eq	170c <seq_builtin+0x128>  // b.none
    1654:	ldr	x8, [x23]
    1658:	cmp	x8, #0x0
    165c:	csel	x8, x20, x8, eq  // eq = none
    1660:	cbz	x8, 169c <seq_builtin+0xb8>
    1664:	ldr	x9, [x8, #8]
    1668:	cbz	x9, 169c <seq_builtin+0xb8>
    166c:	ldr	x9, [x9]
    1670:	cbz	x9, 169c <seq_builtin+0xb8>
    1674:	ldrb	w10, [x9]
    1678:	cmp	w10, #0x2d
    167c:	b.ne	169c <seq_builtin+0xb8>  // b.any
    1680:	ldrb	w9, [x9, #1]
    1684:	cmp	w9, #0x2e
    1688:	b.eq	1700 <seq_builtin+0x11c>  // b.none
    168c:	sub	w9, w9, #0x30
    1690:	and	w9, w9, #0xff
    1694:	cmp	w9, #0x9
    1698:	b.ls	1700 <seq_builtin+0x11c>  // b.plast
    169c:	mov	x0, x20
    16a0:	mov	x1, x21
    16a4:	bl	1130 <internal_getopt@plt>
    16a8:	cmp	w0, #0x72
    16ac:	b.le	16c8 <seq_builtin+0xe4>
    16b0:	cmp	w0, #0x73
    16b4:	b.eq	1644 <seq_builtin+0x60>  // b.none
    16b8:	cmp	w0, #0x77
    16bc:	b.ne	16e8 <seq_builtin+0x104>  // b.any
    16c0:	strb	w26, [x24, #448]
    16c4:	b	164c <seq_builtin+0x68>
    16c8:	cmp	w0, #0x66
    16cc:	b.ne	16d8 <seq_builtin+0xf4>  // b.any
    16d0:	ldr	x19, [x25]
    16d4:	b	164c <seq_builtin+0x68>
    16d8:	cmn	w0, #0x63
    16dc:	b.eq	16f4 <seq_builtin+0x110>  // b.none
    16e0:	cmn	w0, #0x1
    16e4:	b.eq	170c <seq_builtin+0x128>  // b.none
    16e8:	bl	10c0 <builtin_usage@plt>
    16ec:	mov	w19, #0x102                 	// #258
    16f0:	b	1744 <seq_builtin+0x160>
    16f4:	bl	10a0 <builtin_help@plt>
    16f8:	mov	w19, #0x102                 	// #258
    16fc:	b	1744 <seq_builtin+0x160>
    1700:	adrp	x9, 14000 <__FRAME_END__+0x1022c>
    1704:	ldr	x9, [x9, #4056]
    1708:	str	x8, [x9]
    170c:	adrp	x8, 14000 <__FRAME_END__+0x1022c>
    1710:	ldr	x8, [x8, #4056]
    1714:	ldr	x22, [x8]
    1718:	cbz	x22, 173c <seq_builtin+0x158>
    171c:	mov	w25, wzr
    1720:	mov	x9, x22
    1724:	mov	x8, x9
    1728:	ldr	x9, [x9]
    172c:	add	w25, w25, #0x1
    1730:	cbnz	x9, 1724 <seq_builtin+0x140>
    1734:	cmp	w25, #0x4
    1738:	b.cc	1764 <seq_builtin+0x180>  // b.lo, b.ul, b.last
    173c:	bl	10c0 <builtin_usage@plt>
    1740:	mov	w19, #0x1                   	// #1
    1744:	mov	w0, w19
    1748:	ldp	x20, x19, [sp, #128]
    174c:	ldp	x22, x21, [sp, #112]
    1750:	ldp	x24, x23, [sp, #96]
    1754:	ldp	x26, x25, [sp, #80]
    1758:	ldp	x29, x30, [sp, #64]
    175c:	add	sp, sp, #0x90
    1760:	ret
    1764:	adrp	x26, 15000 <memcpy@GLIBC_2.17>
    1768:	strb	wzr, [x26, #452]
    176c:	ldr	x8, [x8, #8]
    1770:	ldr	x20, [x8]
    1774:	mov	x0, x20
    1778:	bl	19f4 <getfloatmax>
    177c:	ldrb	w8, [x26, #452]
    1780:	tbnz	w8, #0, 1740 <seq_builtin+0x15c>
    1784:	mov	v1.16b, v0.16b
    1788:	cmp	w25, #0x2
    178c:	str	q0, [sp, #32]
    1790:	b.cc	17bc <seq_builtin+0x1d8>  // b.lo, b.ul, b.last
    1794:	strb	wzr, [x26, #452]
    1798:	ldr	x8, [x22, #8]
    179c:	ldr	x21, [x8]
    17a0:	mov	x0, x21
    17a4:	bl	19f4 <getfloatmax>
    17a8:	ldrb	w8, [x26, #452]
    17ac:	stur	q0, [x29, #-16]
    17b0:	tbnz	w8, #0, 1740 <seq_builtin+0x15c>
    17b4:	ldr	q1, [sp, #32]
    17b8:	b	17cc <seq_builtin+0x1e8>
    17bc:	adrp	x8, 3000 <__multf3+0x330>
    17c0:	ldr	q0, [x8, #1792]
    17c4:	mov	x21, xzr
    17c8:	stur	q0, [x29, #-16]
    17cc:	adrp	x23, 3000 <__multf3+0x330>
    17d0:	ldr	q0, [x23, #1776]
    17d4:	cmp	w25, #0x3
    17d8:	str	q0, [sp]
    17dc:	b.cc	1840 <seq_builtin+0x25c>  // b.lo, b.ul, b.last
    17e0:	strb	wzr, [x26, #452]
    17e4:	ldr	x8, [x22]
    17e8:	ldr	x8, [x8, #8]
    17ec:	ldr	x22, [x8]
    17f0:	mov	x0, x22
    17f4:	bl	19f4 <getfloatmax>
    17f8:	ldrb	w8, [x26, #452]
    17fc:	tbnz	w8, #0, 1740 <seq_builtin+0x15c>
    1800:	ldr	q1, [x23, #1776]
    1804:	str	q0, [sp, #16]
    1808:	bl	2940 <__eqtf2>
    180c:	cbnz	w0, 1914 <seq_builtin+0x330>
    1810:	ldur	q0, [x29, #-16]
    1814:	ldr	q1, [sp, #32]
    1818:	bl	2b90 <__letf2>
    181c:	adrp	x8, 3000 <__multf3+0x330>
    1820:	adrp	x9, 3000 <__multf3+0x330>
    1824:	add	x8, x8, #0x75b
    1828:	add	x9, x9, #0x758
    182c:	cmp	w0, #0x0
    1830:	adrp	x0, 3000 <__multf3+0x330>
    1834:	csel	x1, x9, x8, lt  // lt = tstop
    1838:	add	x0, x0, #0x749
    183c:	b	18f0 <seq_builtin+0x30c>
    1840:	mov	x22, xzr
    1844:	str	q0, [sp, #16]
    1848:	ldur	q0, [x29, #-16]
    184c:	bl	2b90 <__letf2>
    1850:	ldp	q1, q0, [sp]
    1854:	cmp	w0, #0x0
    1858:	cset	w25, le
    185c:	bl	2940 <__eqtf2>
    1860:	cmp	w0, #0x0
    1864:	b.ne	1878 <seq_builtin+0x294>  // b.any
    1868:	adrp	x8, 3000 <__multf3+0x330>
    186c:	add	x8, x8, #0x710
    1870:	ldr	q0, [x8, w25, uxtw #4]
    1874:	str	q0, [sp, #16]
    1878:	ldur	q0, [x29, #-16]
    187c:	ldr	q1, [sp, #32]
    1880:	bl	2b90 <__letf2>
    1884:	cmp	w0, #0x0
    1888:	b.ge	189c <seq_builtin+0x2b8>  // b.tcont
    188c:	ldr	q1, [x23, #1776]
    1890:	ldr	q0, [sp, #16]
    1894:	bl	2b90 <__letf2>
    1898:	tbnz	w0, #31, 18c4 <seq_builtin+0x2e0>
    189c:	ldur	q0, [x29, #-16]
    18a0:	ldr	q1, [sp, #32]
    18a4:	bl	2a48 <__getf2>
    18a8:	cmp	w0, #0x0
    18ac:	b.le	18f8 <seq_builtin+0x314>
    18b0:	ldr	q1, [x23, #1776]
    18b4:	ldr	q0, [sp, #16]
    18b8:	bl	2a48 <__getf2>
    18bc:	cmp	w0, #0x0
    18c0:	b.le	18f8 <seq_builtin+0x314>
    18c4:	ldur	q0, [x29, #-16]
    18c8:	ldr	q1, [sp, #32]
    18cc:	bl	2b90 <__letf2>
    18d0:	adrp	x8, 3000 <__multf3+0x330>
    18d4:	adrp	x9, 3000 <__multf3+0x330>
    18d8:	add	x8, x8, #0x75b
    18dc:	add	x9, x9, #0x758
    18e0:	cmp	w0, #0x0
    18e4:	adrp	x0, 3000 <__multf3+0x330>
    18e8:	csel	x1, x9, x8, lt  // lt = tstop
    18ec:	add	x0, x0, #0x75e
    18f0:	bl	1030 <builtin_error@plt>
    18f4:	b	1740 <seq_builtin+0x15c>
    18f8:	cbz	x19, 191c <seq_builtin+0x338>
    18fc:	mov	x0, x19
    1900:	bl	1aa4 <long_double_format>
    1904:	mov	x23, x0
    1908:	mov	w19, #0x1                   	// #1
    190c:	cbnz	x0, 1920 <seq_builtin+0x33c>
    1910:	b	1744 <seq_builtin+0x160>
    1914:	ldr	q1, [sp, #32]
    1918:	b	1848 <seq_builtin+0x264>
    191c:	mov	x23, xzr
    1920:	cbz	x23, 193c <seq_builtin+0x358>
    1924:	ldrb	w8, [x24, #448]
    1928:	cbz	w8, 193c <seq_builtin+0x358>
    192c:	adrp	x0, 3000 <__multf3+0x330>
    1930:	add	x0, x0, #0x772
    1934:	bl	1040 <builtin_warning@plt>
    1938:	strb	wzr, [x24, #448]
    193c:	cbz	x20, 19a8 <seq_builtin+0x3c4>
    1940:	mov	x0, x20
    1944:	bl	1010 <all_digits@plt>
    1948:	cbz	w0, 19a8 <seq_builtin+0x3c4>
    194c:	cbz	x21, 195c <seq_builtin+0x378>
    1950:	mov	x0, x21
    1954:	bl	1010 <all_digits@plt>
    1958:	cbz	w0, 19a8 <seq_builtin+0x3c4>
    195c:	cbz	x22, 19a4 <seq_builtin+0x3c0>
    1960:	mov	x0, x22
    1964:	bl	1010 <all_digits@plt>
    1968:	cbnz	x23, 19a8 <seq_builtin+0x3c4>
    196c:	cbz	w0, 19a8 <seq_builtin+0x3c4>
    1970:	ldur	q0, [x29, #-16]
    1974:	bl	3538 <__fixtfdi>
    1978:	ldr	q0, [sp, #32]
    197c:	mov	x19, x0
    1980:	bl	3538 <__fixtfdi>
    1984:	ldr	q0, [sp, #16]
    1988:	mov	x20, x0
    198c:	bl	3538 <__fixtfdi>
    1990:	mov	x2, x0
    1994:	mov	x0, x19
    1998:	mov	x1, x20
    199c:	bl	1090 <print_intseq@plt>
    19a0:	b	19ec <seq_builtin+0x408>
    19a4:	cbz	x23, 1970 <seq_builtin+0x38c>
    19a8:	bl	1080 <locale_decpoint@plt>
    19ac:	adrp	x8, 15000 <memcpy@GLIBC_2.17>
    19b0:	strb	w0, [x8, #456]
    19b4:	cbnz	x23, 19c8 <seq_builtin+0x3e4>
    19b8:	ldur	q0, [x29, #-16]
    19bc:	ldp	q1, q2, [sp, #16]
    19c0:	bl	1c40 <genformat>
    19c4:	mov	x23, x0
    19c8:	ldur	q0, [x29, #-16]
    19cc:	ldp	q2, q1, [sp, #16]
    19d0:	mov	x0, x23
    19d4:	bl	1110 <print_fltseq@plt>
    19d8:	cbz	w19, 19e4 <seq_builtin+0x400>
    19dc:	mov	x0, x23
    19e0:	bl	1120 <free@plt>
    19e4:	mov	w0, wzr
    19e8:	bl	1170 <sh_chkwrite@plt>
    19ec:	mov	w19, w0
    19f0:	b	1744 <seq_builtin+0x160>

00000000000019f4 <getfloatmax>:
    19f4:	sub	sp, sp, #0x50
    19f8:	stp	x29, x30, [sp, #48]
    19fc:	stp	x20, x19, [sp, #64]
    1a00:	add	x29, sp, #0x30
    1a04:	mov	x19, x0
    1a08:	bl	11d0 <__errno_location@plt>
    1a0c:	mov	x20, x0
    1a10:	str	wzr, [x0]
    1a14:	sub	x1, x29, #0x8
    1a18:	mov	x0, x19
    1a1c:	bl	1100 <strtold@plt>
    1a20:	ldur	x8, [x29, #-8]
    1a24:	str	q0, [sp, #16]
    1a28:	ldrb	w8, [x8]
    1a2c:	cbz	w8, 1a3c <getfloatmax+0x48>
    1a30:	mov	x0, x19
    1a34:	bl	11e0 <sh_invalidnum@plt>
    1a38:	b	1a64 <getfloatmax+0x70>
    1a3c:	ldr	w8, [x20]
    1a40:	cmp	w8, #0x22
    1a44:	b.ne	1a70 <getfloatmax+0x7c>  // b.any
    1a48:	mov	w0, #0x22                  	// #34
    1a4c:	bl	10d0 <strerror@plt>
    1a50:	mov	x2, x0
    1a54:	adrp	x0, 3000 <__multf3+0x330>
    1a58:	add	x0, x0, #0xac4
    1a5c:	mov	x1, x19
    1a60:	bl	1030 <builtin_error@plt>
    1a64:	adrp	x8, 15000 <memcpy@GLIBC_2.17>
    1a68:	mov	w9, #0x1                   	// #1
    1a6c:	strb	w9, [x8, #452]
    1a70:	adrp	x8, 3000 <__multf3+0x330>
    1a74:	ldr	q1, [x8, #1776]
    1a78:	ldr	q0, [sp, #16]
    1a7c:	str	q1, [sp]
    1a80:	bl	2940 <__eqtf2>
    1a84:	ldr	q0, [sp, #16]
    1a88:	cmp	w0, #0x0
    1a8c:	b.ne	1a94 <getfloatmax+0xa0>  // b.any
    1a90:	ldr	q0, [sp]
    1a94:	ldp	x20, x19, [sp, #64]
    1a98:	ldp	x29, x30, [sp, #48]
    1a9c:	add	sp, sp, #0x50
    1aa0:	ret

0000000000001aa4 <long_double_format>:
    1aa4:	stp	x29, x30, [sp, #-64]!
    1aa8:	stp	x20, x19, [sp, #48]
    1aac:	mov	x19, x0
    1ab0:	mov	x8, xzr
    1ab4:	mov	w9, #0x1                   	// #1
    1ab8:	str	x23, [sp, #16]
    1abc:	stp	x22, x21, [sp, #32]
    1ac0:	mov	x29, sp
    1ac4:	ldrb	w10, [x19, x8]
    1ac8:	cmp	w10, #0x25
    1acc:	b.ne	1ae0 <long_double_format+0x3c>  // b.any
    1ad0:	add	x20, x8, #0x1
    1ad4:	ldrb	w11, [x19, x20]
    1ad8:	cmp	w11, #0x25
    1adc:	b.ne	1b20 <long_double_format+0x7c>  // b.any
    1ae0:	cbz	w10, 1af4 <long_double_format+0x50>
    1ae4:	cmp	w10, #0x25
    1ae8:	cinc	x10, x9, eq  // eq = none
    1aec:	add	x8, x10, x8
    1af0:	b	1ac4 <long_double_format+0x20>
    1af4:	adrp	x0, 3000 <__multf3+0x330>
    1af8:	add	x0, x0, #0xad4
    1afc:	mov	x1, x19
    1b00:	bl	1030 <builtin_error@plt>
    1b04:	mov	x21, xzr
    1b08:	mov	x0, x21
    1b0c:	ldp	x20, x19, [sp, #48]
    1b10:	ldp	x22, x21, [sp, #32]
    1b14:	ldr	x23, [sp, #16]
    1b18:	ldp	x29, x30, [sp], #64
    1b1c:	ret
    1b20:	adrp	x1, 3000 <__multf3+0x330>
    1b24:	add	x0, x19, x20
    1b28:	add	x1, x1, #0xaf2
    1b2c:	bl	1150 <strspn@plt>
    1b30:	add	x20, x0, x20
    1b34:	adrp	x1, 3000 <__multf3+0x330>
    1b38:	add	x0, x19, x20
    1b3c:	add	x1, x1, #0xaf9
    1b40:	bl	1150 <strspn@plt>
    1b44:	add	x20, x20, x0
    1b48:	ldrb	w8, [x19, x20]
    1b4c:	cmp	w8, #0x2e
    1b50:	b.ne	1b6c <long_double_format+0xc8>  // b.any
    1b54:	add	x20, x20, #0x1
    1b58:	adrp	x1, 3000 <__multf3+0x330>
    1b5c:	add	x0, x19, x20
    1b60:	add	x1, x1, #0xaf9
    1b64:	bl	1150 <strspn@plt>
    1b68:	add	x20, x0, x20
    1b6c:	add	x22, x19, x20
    1b70:	ldrb	w8, [x22]
    1b74:	cmp	w8, #0x4c
    1b78:	cinc	x8, x20, eq  // eq = none
    1b7c:	ldrb	w2, [x19, x8]
    1b80:	cset	w23, eq  // eq = none
    1b84:	sub	w9, w2, #0x41
    1b88:	cmp	w9, #0x26
    1b8c:	b.hi	1c1c <long_double_format+0x178>  // b.pmore
    1b90:	mov	w10, #0x1                   	// #1
    1b94:	lsl	x9, x10, x9
    1b98:	mov	x10, #0x71                  	// #113
    1b9c:	movk	x10, #0x71, lsl #32
    1ba0:	tst	x9, x10
    1ba4:	b.eq	1c1c <long_double_format+0x178>  // b.none
    1ba8:	add	x8, x8, #0x1
    1bac:	mov	w9, #0x1                   	// #1
    1bb0:	ldrb	w10, [x19, x8]
    1bb4:	cmp	w10, #0x25
    1bb8:	b.ne	1bcc <long_double_format+0x128>  // b.any
    1bbc:	add	x11, x8, x19
    1bc0:	ldrb	w11, [x11, #1]
    1bc4:	cmp	w11, #0x25
    1bc8:	b.ne	1c10 <long_double_format+0x16c>  // b.any
    1bcc:	cbz	w10, 1be0 <long_double_format+0x13c>
    1bd0:	cmp	w10, #0x25
    1bd4:	cinc	x10, x9, eq  // eq = none
    1bd8:	add	x8, x10, x8
    1bdc:	b	1bb0 <long_double_format+0x10c>
    1be0:	add	x0, x8, #0x2
    1be4:	bl	10b0 <xmalloc@plt>
    1be8:	mov	x1, x19
    1bec:	mov	x2, x20
    1bf0:	mov	x21, x0
    1bf4:	bl	1000 <memcpy@plt>
    1bf8:	add	x0, x21, x20
    1bfc:	mov	w8, #0x4c                  	// #76
    1c00:	strb	w8, [x0], #1
    1c04:	add	x1, x22, x23
    1c08:	bl	1180 <strcpy@plt>
    1c0c:	b	1b08 <long_double_format+0x64>
    1c10:	adrp	x0, 3000 <__multf3+0x330>
    1c14:	add	x0, x0, #0xb40
    1c18:	b	1afc <long_double_format+0x58>
    1c1c:	cbnz	w2, 1c2c <long_double_format+0x188>
    1c20:	adrp	x0, 3000 <__multf3+0x330>
    1c24:	add	x0, x0, #0xb04
    1c28:	b	1afc <long_double_format+0x58>
    1c2c:	adrp	x0, 3000 <__multf3+0x330>
    1c30:	add	x0, x0, #0xb19
    1c34:	mov	x1, x19
    1c38:	bl	1030 <builtin_error@plt>
    1c3c:	b	1b04 <long_double_format+0x60>

0000000000001c40 <genformat>:
    1c40:	sub	sp, sp, #0x60
    1c44:	adrp	x8, 15000 <memcpy@GLIBC_2.17>
    1c48:	ldrb	w8, [x8, #448]
    1c4c:	stp	x29, x30, [sp, #32]
    1c50:	str	x23, [sp, #48]
    1c54:	stp	x22, x21, [sp, #64]
    1c58:	cmp	w8, #0x1
    1c5c:	stp	x20, x19, [sp, #80]
    1c60:	add	x29, sp, #0x20
    1c64:	b.ne	1d64 <genformat+0x124>  // b.any
    1c68:	adrp	x20, 15000 <memcpy@GLIBC_2.17>
    1c6c:	adrp	x21, 3000 <__multf3+0x330>
    1c70:	add	x20, x20, #0x1c9
    1c74:	add	x21, x21, #0xb65
    1c78:	mov	w1, #0x1c                  	// #28
    1c7c:	mov	x0, x20
    1c80:	mov	x2, x21
    1c84:	stp	q0, q2, [sp]
    1c88:	mov	v0.16b, v1.16b
    1c8c:	bl	1070 <snprintf@plt>
    1c90:	mov	x0, x20
    1c94:	bl	1da8 <getprec>
    1c98:	ldr	q0, [sp]
    1c9c:	mov	w19, w0
    1ca0:	mov	w1, #0x1c                  	// #28
    1ca4:	mov	x0, x20
    1ca8:	mov	x2, x21
    1cac:	bl	1070 <snprintf@plt>
    1cb0:	mov	w22, w0
    1cb4:	mov	x0, x20
    1cb8:	bl	1da8 <getprec>
    1cbc:	ldr	q0, [sp, #16]
    1cc0:	cmp	w0, w19
    1cc4:	mov	w23, w0
    1cc8:	csel	w19, w19, w0, lt  // lt = tstop
    1ccc:	mov	w1, #0x1c                  	// #28
    1cd0:	mov	x0, x20
    1cd4:	mov	x2, x21
    1cd8:	bl	1070 <snprintf@plt>
    1cdc:	mov	w21, w0
    1ce0:	mov	x0, x20
    1ce4:	bl	1da8 <getprec>
    1ce8:	cmp	w0, #0x0
    1cec:	cset	w10, ne  // ne = any
    1cf0:	cset	w11, eq  // eq = none
    1cf4:	cmp	w19, #0x0
    1cf8:	sub	w8, w21, w0
    1cfc:	cset	w12, eq  // eq = none
    1d00:	cset	w13, ne  // ne = any
    1d04:	cmp	w23, #0x0
    1d08:	sub	w9, w22, w23
    1d0c:	add	w8, w8, w19
    1d10:	and	w10, w10, w12
    1d14:	cset	w12, eq  // eq = none
    1d18:	add	w9, w9, w19
    1d1c:	and	w11, w11, w13
    1d20:	sub	w8, w8, w10
    1d24:	and	w10, w12, w13
    1d28:	add	w8, w8, w11
    1d2c:	add	w9, w9, w10
    1d30:	cmp	w9, w8
    1d34:	adrp	x20, 15000 <memcpy@GLIBC_2.17>
    1d38:	add	x20, x20, #0x1c9
    1d3c:	csel	w2, w8, w9, lt  // lt = tstop
    1d40:	cbz	w2, 1d70 <genformat+0x130>
    1d44:	adrp	x1, 3000 <__multf3+0x330>
    1d48:	adrp	x4, 3000 <__multf3+0x330>
    1d4c:	add	x1, x1, #0xb69
    1d50:	add	x4, x4, #0xb75
    1d54:	mov	x0, x20
    1d58:	mov	w3, w19
    1d5c:	bl	1060 <sprintf@plt>
    1d60:	b	1d8c <genformat+0x14c>
    1d64:	adrp	x20, 3000 <__multf3+0x330>
    1d68:	add	x20, x20, #0xb65
    1d6c:	b	1d8c <genformat+0x14c>
    1d70:	adrp	x1, 3000 <__multf3+0x330>
    1d74:	adrp	x3, 3000 <__multf3+0x330>
    1d78:	add	x1, x1, #0xb77
    1d7c:	add	x3, x3, #0xb75
    1d80:	mov	x0, x20
    1d84:	mov	w2, w19
    1d88:	bl	1060 <sprintf@plt>
    1d8c:	mov	x0, x20
    1d90:	ldp	x20, x19, [sp, #80]
    1d94:	ldp	x22, x21, [sp, #64]
    1d98:	ldr	x23, [sp, #48]
    1d9c:	ldp	x29, x30, [sp, #32]
    1da0:	add	sp, sp, #0x60
    1da4:	ret

0000000000001da8 <getprec>:
    1da8:	stp	x29, x30, [sp, #-48]!
    1dac:	adrp	x8, 15000 <memcpy@GLIBC_2.17>
    1db0:	ldrb	w1, [x8, #456]
    1db4:	str	x21, [sp, #16]
    1db8:	stp	x20, x19, [sp, #32]
    1dbc:	mov	x29, sp
    1dc0:	bl	1160 <strchr@plt>
    1dc4:	cbz	x0, 1dfc <getprec+0x54>
    1dc8:	ldrb	w21, [x0, #1]
    1dcc:	cbz	w21, 1dfc <getprec+0x54>
    1dd0:	mov	x19, xzr
    1dd4:	add	x20, x0, #0x2
    1dd8:	bl	10f0 <__ctype_b_loc@plt>
    1ddc:	ldr	x8, [x0]
    1de0:	and	x9, x21, #0xff
    1de4:	ldrh	w8, [x8, x9, lsl #1]
    1de8:	tbz	w8, #11, 1e00 <getprec+0x58>
    1dec:	ldrb	w21, [x20, x19]
    1df0:	add	x19, x19, #0x1
    1df4:	cbnz	w21, 1dd8 <getprec+0x30>
    1df8:	b	1e00 <getprec+0x58>
    1dfc:	mov	w19, wzr
    1e00:	mov	w0, w19
    1e04:	ldp	x20, x19, [sp, #32]
    1e08:	ldr	x21, [sp, #16]
    1e0c:	ldp	x29, x30, [sp], #48
    1e10:	ret
    1e14:	nop

0000000000001e18 <__addtf3>:
    1e18:	stp	x29, x30, [sp, #-48]!
    1e1c:	mov	x29, sp
    1e20:	str	q0, [sp, #16]
    1e24:	str	q1, [sp, #32]
    1e28:	ldp	x6, x1, [sp, #16]
    1e2c:	ldp	x0, x3, [sp, #32]
    1e30:	mrs	x15, fpcr
    1e34:	lsr	x7, x1, #63
    1e38:	mov	x10, x0
    1e3c:	ubfiz	x4, x3, #3, #48
    1e40:	lsr	x5, x3, #63
    1e44:	mov	x12, x7
    1e48:	ubfiz	x2, x1, #3, #48
    1e4c:	orr	x4, x4, x0, lsr #61
    1e50:	ubfx	x8, x1, #48, #15
    1e54:	ubfx	x0, x3, #48, #15
    1e58:	and	w7, w7, #0xff
    1e5c:	mov	x16, x12
    1e60:	cmp	x12, x5
    1e64:	and	w11, w5, #0xff
    1e68:	orr	x2, x2, x6, lsr #61
    1e6c:	mov	x1, x8
    1e70:	lsl	x9, x6, #3
    1e74:	mov	x3, x0
    1e78:	lsl	x13, x10, #3
    1e7c:	b.eq	2028 <__addtf3+0x210>  // b.none
    1e80:	sub	w0, w8, w0
    1e84:	cmp	w0, #0x0
    1e88:	b.le	1fd4 <__addtf3+0x1bc>
    1e8c:	cbz	x3, 2088 <__addtf3+0x270>
    1e90:	orr	x4, x4, #0x8000000000000
    1e94:	mov	x3, #0x7fff                	// #32767
    1e98:	cmp	x1, x3
    1e9c:	b.eq	228c <__addtf3+0x474>  // b.none
    1ea0:	cmp	w0, #0x74
    1ea4:	b.gt	2310 <__addtf3+0x4f8>
    1ea8:	cmp	w0, #0x3f
    1eac:	b.gt	2470 <__addtf3+0x658>
    1eb0:	mov	w3, #0x40                  	// #64
    1eb4:	sub	w3, w3, w0
    1eb8:	lsr	x6, x13, x0
    1ebc:	lsl	x13, x13, x3
    1ec0:	cmp	x13, #0x0
    1ec4:	cset	x5, ne  // ne = any
    1ec8:	lsl	x3, x4, x3
    1ecc:	orr	x3, x3, x6
    1ed0:	lsr	x0, x4, x0
    1ed4:	orr	x3, x3, x5
    1ed8:	sub	x2, x2, x0
    1edc:	subs	x9, x9, x3
    1ee0:	sbc	x2, x2, xzr
    1ee4:	and	x3, x2, #0x7ffffffffffff
    1ee8:	tbz	x2, #51, 20c8 <__addtf3+0x2b0>
    1eec:	cbz	x3, 22f4 <__addtf3+0x4dc>
    1ef0:	clz	x0, x3
    1ef4:	sub	w0, w0, #0xc
    1ef8:	neg	w2, w0
    1efc:	lsl	x4, x3, x0
    1f00:	lsl	x3, x9, x0
    1f04:	lsr	x9, x9, x2
    1f08:	orr	x2, x9, x4
    1f0c:	cmp	x1, w0, sxtw
    1f10:	sxtw	x4, w0
    1f14:	b.gt	22d4 <__addtf3+0x4bc>
    1f18:	sub	w1, w0, w1
    1f1c:	add	w0, w1, #0x1
    1f20:	cmp	w0, #0x3f
    1f24:	b.gt	2438 <__addtf3+0x620>
    1f28:	mov	w1, #0x40                  	// #64
    1f2c:	sub	w1, w1, w0
    1f30:	lsr	x4, x3, x0
    1f34:	lsl	x3, x3, x1
    1f38:	cmp	x3, #0x0
    1f3c:	lsl	x9, x2, x1
    1f40:	cset	x1, ne  // ne = any
    1f44:	orr	x9, x9, x4
    1f48:	lsr	x2, x2, x0
    1f4c:	orr	x9, x9, x1
    1f50:	orr	x8, x9, x2
    1f54:	cbz	x8, 20dc <__addtf3+0x2c4>
    1f58:	and	x0, x9, #0x7
    1f5c:	mov	x1, #0x0                   	// #0
    1f60:	mov	w5, #0x1                   	// #1
    1f64:	cbz	x0, 2320 <__addtf3+0x508>
    1f68:	and	x3, x15, #0xc00000
    1f6c:	cmp	x3, #0x400, lsl #12
    1f70:	b.eq	2264 <__addtf3+0x44c>  // b.none
    1f74:	cmp	x3, #0x800, lsl #12
    1f78:	b.eq	2244 <__addtf3+0x42c>  // b.none
    1f7c:	cbz	x3, 2270 <__addtf3+0x458>
    1f80:	and	x3, x2, #0x8000000000000
    1f84:	mov	w0, #0x10                  	// #16
    1f88:	cbz	w5, 1f90 <__addtf3+0x178>
    1f8c:	orr	w0, w0, #0x8
    1f90:	cbz	x3, 22a8 <__addtf3+0x490>
    1f94:	add	x1, x1, #0x1
    1f98:	mov	x3, #0x7fff                	// #32767
    1f9c:	cmp	x1, x3
    1fa0:	b.eq	218c <__addtf3+0x374>  // b.none
    1fa4:	and	w1, w1, #0x7fff
    1fa8:	extr	x8, x2, x9, #3
    1fac:	ubfx	x2, x2, #3, #48
    1fb0:	mov	x5, #0x0                   	// #0
    1fb4:	orr	w1, w1, w7, lsl #15
    1fb8:	bfxil	x5, x2, #0, #48
    1fbc:	fmov	d0, x8
    1fc0:	bfi	x5, x1, #48, #16
    1fc4:	fmov	v0.d[1], x5
    1fc8:	cbnz	w0, 21e8 <__addtf3+0x3d0>
    1fcc:	ldp	x29, x30, [sp], #48
    1fd0:	ret
    1fd4:	mov	x14, x5
    1fd8:	b.eq	20f4 <__addtf3+0x2dc>  // b.none
    1fdc:	cbnz	x8, 2378 <__addtf3+0x560>
    1fe0:	orr	x1, x2, x9
    1fe4:	cbz	x1, 20a4 <__addtf3+0x28c>
    1fe8:	cmn	w0, #0x1
    1fec:	b.eq	2794 <__addtf3+0x97c>  // b.none
    1ff0:	mov	x1, #0x7fff                	// #32767
    1ff4:	mvn	w0, w0
    1ff8:	cmp	x3, x1
    1ffc:	b.ne	238c <__addtf3+0x574>  // b.any
    2000:	orr	x0, x4, x13
    2004:	cbnz	x0, 26ec <__addtf3+0x8d4>
    2008:	mov	x16, x14
    200c:	nop
    2010:	mov	x4, #0x0                   	// #0
    2014:	fmov	d0, x4
    2018:	lsl	x16, x16, #63
    201c:	orr	x5, x16, #0x7fff000000000000
    2020:	fmov	v0.d[1], x5
    2024:	b	1fcc <__addtf3+0x1b4>
    2028:	sub	w5, w8, w0
    202c:	cmp	w5, #0x0
    2030:	b.le	21fc <__addtf3+0x3e4>
    2034:	cbz	x0, 213c <__addtf3+0x324>
    2038:	orr	x4, x4, #0x8000000000000
    203c:	mov	x0, #0x7fff                	// #32767
    2040:	cmp	x1, x0
    2044:	b.eq	228c <__addtf3+0x474>  // b.none
    2048:	cmp	w5, #0x74
    204c:	b.gt	2420 <__addtf3+0x608>
    2050:	cmp	w5, #0x3f
    2054:	b.gt	2520 <__addtf3+0x708>
    2058:	mov	w0, #0x40                  	// #64
    205c:	sub	w0, w0, w5
    2060:	lsr	x6, x13, x5
    2064:	lsl	x13, x13, x0
    2068:	cmp	x13, #0x0
    206c:	lsl	x0, x4, x0
    2070:	cset	x3, ne  // ne = any
    2074:	orr	x0, x0, x6
    2078:	lsr	x4, x4, x5
    207c:	orr	x0, x0, x3
    2080:	add	x2, x2, x4
    2084:	b	242c <__addtf3+0x614>
    2088:	orr	x3, x4, x13
    208c:	cbz	x3, 23fc <__addtf3+0x5e4>
    2090:	subs	w0, w0, #0x1
    2094:	b.ne	1e94 <__addtf3+0x7c>  // b.any
    2098:	subs	x9, x9, x13
    209c:	sbc	x2, x2, x4
    20a0:	b	1ee4 <__addtf3+0xcc>
    20a4:	mov	x0, #0x7fff                	// #32767
    20a8:	cmp	x3, x0
    20ac:	b.eq	27e0 <__addtf3+0x9c8>  // b.none
    20b0:	mov	w7, w11
    20b4:	mov	x2, x4
    20b8:	mov	x9, x13
    20bc:	mov	x1, x3
    20c0:	mov	x12, x5
    20c4:	nop
    20c8:	orr	x8, x9, x2
    20cc:	and	x0, x9, #0x7
    20d0:	mov	w5, #0x0                   	// #0
    20d4:	cbnz	x1, 1f64 <__addtf3+0x14c>
    20d8:	cbnz	x8, 1f58 <__addtf3+0x140>
    20dc:	mov	x2, #0x0                   	// #0
    20e0:	mov	x1, #0x0                   	// #0
    20e4:	mov	w0, #0x0                   	// #0
    20e8:	and	x2, x2, #0xffffffffffff
    20ec:	and	w1, w1, #0x7fff
    20f0:	b	1fb0 <__addtf3+0x198>
    20f4:	add	x5, x8, #0x1
    20f8:	tst	x5, #0x7ffe
    20fc:	b.ne	23cc <__addtf3+0x5b4>  // b.any
    2100:	orr	x5, x2, x9
    2104:	orr	x8, x4, x13
    2108:	cbnz	x1, 258c <__addtf3+0x774>
    210c:	cbz	x5, 2634 <__addtf3+0x81c>
    2110:	cbz	x8, 2648 <__addtf3+0x830>
    2114:	subs	x5, x9, x13
    2118:	cmp	x9, x13
    211c:	sbc	x3, x2, x4
    2120:	tbz	x3, #51, 2814 <__addtf3+0x9fc>
    2124:	subs	x9, x13, x9
    2128:	mov	w7, w11
    212c:	sbc	x2, x4, x2
    2130:	mov	x12, x14
    2134:	orr	x8, x9, x2
    2138:	b	1f54 <__addtf3+0x13c>
    213c:	orr	x0, x4, x13
    2140:	cbz	x0, 2614 <__addtf3+0x7fc>
    2144:	subs	w5, w5, #0x1
    2148:	b.ne	203c <__addtf3+0x224>  // b.any
    214c:	adds	x9, x9, x13
    2150:	adc	x2, x4, x2
    2154:	nop
    2158:	tbz	x2, #51, 20c8 <__addtf3+0x2b0>
    215c:	add	x1, x1, #0x1
    2160:	mov	x0, #0x7fff                	// #32767
    2164:	cmp	x1, x0
    2168:	b.eq	2654 <__addtf3+0x83c>  // b.none
    216c:	and	x0, x9, #0x1
    2170:	and	x3, x2, #0xfff7ffffffffffff
    2174:	orr	x9, x0, x9, lsr #1
    2178:	mov	w5, #0x0                   	// #0
    217c:	orr	x9, x9, x2, lsl #63
    2180:	lsr	x2, x3, #1
    2184:	and	x0, x9, #0x7
    2188:	b	1f64 <__addtf3+0x14c>
    218c:	and	x3, x15, #0xc00000
    2190:	cbz	x3, 21c8 <__addtf3+0x3b0>
    2194:	cmp	x3, #0x400, lsl #12
    2198:	b.eq	21c0 <__addtf3+0x3a8>  // b.none
    219c:	cmp	x3, #0x800, lsl #12
    21a0:	csel	w12, w12, wzr, eq  // eq = none
    21a4:	cbnz	w12, 21c8 <__addtf3+0x3b0>
    21a8:	mov	w1, #0x14                  	// #20
    21ac:	mov	x2, #0x1fffffffffffffff    	// #2305843009213693951
    21b0:	orr	w0, w0, w1
    21b4:	mov	x8, #0xffffffffffffffff    	// #-1
    21b8:	mov	x1, #0x7ffe                	// #32766
    21bc:	b	20e8 <__addtf3+0x2d0>
    21c0:	cbnz	x12, 21a8 <__addtf3+0x390>
    21c4:	nop
    21c8:	mov	w1, #0x14                  	// #20
    21cc:	and	x16, x7, #0xff
    21d0:	orr	w0, w0, w1
    21d4:	mov	x4, #0x0                   	// #0
    21d8:	fmov	d0, x4
    21dc:	lsl	x16, x16, #63
    21e0:	orr	x5, x16, #0x7fff000000000000
    21e4:	fmov	v0.d[1], x5
    21e8:	str	q0, [sp, #16]
    21ec:	bl	3670 <__sfp_handle_exceptions>
    21f0:	ldr	q0, [sp, #16]
    21f4:	ldp	x29, x30, [sp], #48
    21f8:	ret
    21fc:	b.eq	233c <__addtf3+0x524>  // b.none
    2200:	cbnz	x8, 24c0 <__addtf3+0x6a8>
    2204:	orr	x0, x2, x9
    2208:	cbz	x0, 272c <__addtf3+0x914>
    220c:	cmn	w5, #0x1
    2210:	b.eq	288c <__addtf3+0xa74>  // b.none
    2214:	mov	x0, #0x7fff                	// #32767
    2218:	mvn	w5, w5
    221c:	cmp	x3, x0
    2220:	b.ne	24d4 <__addtf3+0x6bc>  // b.any
    2224:	orr	x0, x4, x13
    2228:	cbz	x0, 2010 <__addtf3+0x1f8>
    222c:	lsr	x5, x4, #50
    2230:	mov	x9, x13
    2234:	eor	x5, x5, #0x1
    2238:	mov	x2, x4
    223c:	and	w5, w5, #0x1
    2240:	b	22a0 <__addtf3+0x488>
    2244:	mov	w0, #0x10                  	// #16
    2248:	cbz	x12, 2254 <__addtf3+0x43c>
    224c:	adds	x9, x9, #0x8
    2250:	cinc	x2, x2, cs  // cs = hs, nlast
    2254:	and	x3, x2, #0x8000000000000
    2258:	cbz	w5, 1f90 <__addtf3+0x178>
    225c:	orr	w0, w0, #0x8
    2260:	b	1f90 <__addtf3+0x178>
    2264:	mov	w0, #0x10                  	// #16
    2268:	cbnz	x12, 2254 <__addtf3+0x43c>
    226c:	b	224c <__addtf3+0x434>
    2270:	and	x3, x9, #0xf
    2274:	mov	w0, #0x10                  	// #16
    2278:	cmp	x3, #0x4
    227c:	b.eq	2254 <__addtf3+0x43c>  // b.none
    2280:	adds	x9, x9, #0x4
    2284:	cinc	x2, x2, cs  // cs = hs, nlast
    2288:	b	2254 <__addtf3+0x43c>
    228c:	orr	x0, x2, x9
    2290:	cbz	x0, 2010 <__addtf3+0x1f8>
    2294:	lsr	x5, x2, #50
    2298:	eor	x5, x5, #0x1
    229c:	and	w5, w5, #0x1
    22a0:	mov	w0, w5
    22a4:	mov	x1, #0x7fff                	// #32767
    22a8:	mov	x3, #0x7fff                	// #32767
    22ac:	extr	x8, x2, x9, #3
    22b0:	cmp	x1, x3
    22b4:	lsr	x2, x2, #3
    22b8:	b.ne	20e8 <__addtf3+0x2d0>  // b.any
    22bc:	orr	x1, x8, x2
    22c0:	cbz	x1, 292c <__addtf3+0xb14>
    22c4:	orr	x2, x2, #0x800000000000
    22c8:	mov	w1, #0x7fff                	// #32767
    22cc:	and	x2, x2, #0xffffffffffff
    22d0:	b	1fb0 <__addtf3+0x198>
    22d4:	mov	x9, x3
    22d8:	and	x2, x2, #0xfff7ffffffffffff
    22dc:	sub	x1, x1, x4
    22e0:	orr	x8, x9, x2
    22e4:	and	x0, x9, #0x7
    22e8:	mov	w5, #0x0                   	// #0
    22ec:	cbz	x1, 20d8 <__addtf3+0x2c0>
    22f0:	b	1f64 <__addtf3+0x14c>
    22f4:	clz	x2, x9
    22f8:	add	w0, w2, #0x34
    22fc:	cmp	w0, #0x3f
    2300:	b.le	1ef8 <__addtf3+0xe0>
    2304:	sub	w2, w2, #0xc
    2308:	lsl	x2, x9, x2
    230c:	b	1f0c <__addtf3+0xf4>
    2310:	orr	x4, x4, x13
    2314:	cmp	x4, #0x0
    2318:	cset	x3, ne  // ne = any
    231c:	b	1edc <__addtf3+0xc4>
    2320:	and	x3, x2, #0x8000000000000
    2324:	mov	w0, #0x0                   	// #0
    2328:	cbz	w5, 1f90 <__addtf3+0x178>
    232c:	mov	w0, #0x0                   	// #0
    2330:	tbz	w15, #11, 1f90 <__addtf3+0x178>
    2334:	orr	w0, w0, #0x8
    2338:	b	1f90 <__addtf3+0x178>
    233c:	add	x0, x8, #0x1
    2340:	tst	x0, #0x7ffe
    2344:	b.ne	254c <__addtf3+0x734>  // b.any
    2348:	orr	x0, x2, x9
    234c:	cbnz	x8, 2708 <__addtf3+0x8f0>
    2350:	orr	x8, x4, x13
    2354:	cbz	x0, 275c <__addtf3+0x944>
    2358:	cbz	x8, 2648 <__addtf3+0x830>
    235c:	adds	x9, x9, x13
    2360:	adc	x2, x4, x2
    2364:	tbz	x2, #51, 2134 <__addtf3+0x31c>
    2368:	and	x2, x2, #0xfff7ffffffffffff
    236c:	and	x0, x9, #0x7
    2370:	mov	x1, #0x1                   	// #1
    2374:	b	1f64 <__addtf3+0x14c>
    2378:	mov	x1, #0x7fff                	// #32767
    237c:	neg	w0, w0
    2380:	orr	x2, x2, #0x8000000000000
    2384:	cmp	x3, x1
    2388:	b.eq	2000 <__addtf3+0x1e8>  // b.none
    238c:	cmp	w0, #0x74
    2390:	b.gt	249c <__addtf3+0x684>
    2394:	cmp	w0, #0x3f
    2398:	b.gt	26b8 <__addtf3+0x8a0>
    239c:	mov	w1, #0x40                  	// #64
    23a0:	sub	w1, w1, w0
    23a4:	lsr	x5, x9, x0
    23a8:	lsl	x9, x9, x1
    23ac:	cmp	x9, #0x0
    23b0:	lsl	x9, x2, x1
    23b4:	cset	x1, ne  // ne = any
    23b8:	orr	x9, x9, x5
    23bc:	lsr	x0, x2, x0
    23c0:	orr	x9, x9, x1
    23c4:	sub	x4, x4, x0
    23c8:	b	24a8 <__addtf3+0x690>
    23cc:	subs	x5, x9, x13
    23d0:	cmp	x9, x13
    23d4:	sbc	x3, x2, x4
    23d8:	tbnz	x3, #51, 2574 <__addtf3+0x75c>
    23dc:	orr	x8, x5, x3
    23e0:	cbnz	x8, 26a0 <__addtf3+0x888>
    23e4:	and	x15, x15, #0xc00000
    23e8:	mov	x2, #0x0                   	// #0
    23ec:	cmp	x15, #0x800, lsl #12
    23f0:	mov	x1, #0x0                   	// #0
    23f4:	cset	w7, eq  // eq = none
    23f8:	b	20e8 <__addtf3+0x2d0>
    23fc:	mov	x0, #0x7fff                	// #32767
    2400:	cmp	x8, x0
    2404:	b.ne	20c8 <__addtf3+0x2b0>  // b.any
    2408:	orr	x0, x2, x9
    240c:	cbnz	x0, 2294 <__addtf3+0x47c>
    2410:	mov	x2, #0x0                   	// #0
    2414:	mov	x8, #0x0                   	// #0
    2418:	mov	w0, #0x0                   	// #0
    241c:	b	22bc <__addtf3+0x4a4>
    2420:	orr	x4, x4, x13
    2424:	cmp	x4, #0x0
    2428:	cset	x0, ne  // ne = any
    242c:	adds	x9, x0, x9
    2430:	cinc	x2, x2, cs  // cs = hs, nlast
    2434:	b	2158 <__addtf3+0x340>
    2438:	mov	w4, #0x80                  	// #128
    243c:	sub	w4, w4, w0
    2440:	cmp	w0, #0x40
    2444:	sub	w9, w1, #0x3f
    2448:	lsl	x0, x2, x4
    244c:	orr	x0, x3, x0
    2450:	csel	x3, x0, x3, ne  // ne = any
    2454:	lsr	x9, x2, x9
    2458:	cmp	x3, #0x0
    245c:	mov	x2, #0x0                   	// #0
    2460:	cset	x0, ne  // ne = any
    2464:	orr	x9, x0, x9
    2468:	mov	x8, x9
    246c:	b	1f54 <__addtf3+0x13c>
    2470:	mov	w5, #0x80                  	// #128
    2474:	sub	w5, w5, w0
    2478:	subs	w0, w0, #0x40
    247c:	lsl	x5, x4, x5
    2480:	orr	x5, x13, x5
    2484:	csel	x13, x5, x13, ne  // ne = any
    2488:	lsr	x4, x4, x0
    248c:	cmp	x13, #0x0
    2490:	cset	x3, ne  // ne = any
    2494:	orr	x3, x3, x4
    2498:	b	1edc <__addtf3+0xc4>
    249c:	orr	x2, x2, x9
    24a0:	cmp	x2, #0x0
    24a4:	cset	x9, ne  // ne = any
    24a8:	subs	x9, x13, x9
    24ac:	mov	w7, w11
    24b0:	sbc	x2, x4, xzr
    24b4:	mov	x1, x3
    24b8:	mov	x12, x14
    24bc:	b	1ee4 <__addtf3+0xcc>
    24c0:	mov	x0, #0x7fff                	// #32767
    24c4:	neg	w5, w5
    24c8:	orr	x2, x2, #0x8000000000000
    24cc:	cmp	x3, x0
    24d0:	b.eq	2224 <__addtf3+0x40c>  // b.none
    24d4:	cmp	w5, #0x74
    24d8:	b.gt	26a8 <__addtf3+0x890>
    24dc:	cmp	w5, #0x3f
    24e0:	b.gt	2768 <__addtf3+0x950>
    24e4:	mov	w1, #0x40                  	// #64
    24e8:	sub	w1, w1, w5
    24ec:	lsr	x6, x9, x5
    24f0:	lsl	x9, x9, x1
    24f4:	cmp	x9, #0x0
    24f8:	cset	x0, ne  // ne = any
    24fc:	lsl	x9, x2, x1
    2500:	orr	x9, x9, x6
    2504:	lsr	x5, x2, x5
    2508:	orr	x9, x9, x0
    250c:	add	x4, x4, x5
    2510:	adds	x9, x9, x13
    2514:	mov	x1, x3
    2518:	cinc	x2, x4, cs  // cs = hs, nlast
    251c:	b	2158 <__addtf3+0x340>
    2520:	mov	w0, #0x80                  	// #128
    2524:	sub	w0, w0, w5
    2528:	subs	w5, w5, #0x40
    252c:	lsl	x0, x4, x0
    2530:	orr	x0, x13, x0
    2534:	csel	x13, x0, x13, ne  // ne = any
    2538:	lsr	x4, x4, x5
    253c:	cmp	x13, #0x0
    2540:	cset	x0, ne  // ne = any
    2544:	orr	x0, x0, x4
    2548:	b	242c <__addtf3+0x614>
    254c:	mov	x1, #0x7fff                	// #32767
    2550:	cmp	x0, x1
    2554:	b.eq	27b0 <__addtf3+0x998>  // b.none
    2558:	adds	x9, x9, x13
    255c:	mov	x1, x0
    2560:	adc	x2, x4, x2
    2564:	ubfx	x0, x9, #1, #3
    2568:	extr	x9, x2, x9, #1
    256c:	lsr	x2, x2, #1
    2570:	b	1f64 <__addtf3+0x14c>
    2574:	cmp	x13, x9
    2578:	mov	w7, w11
    257c:	sbc	x3, x4, x2
    2580:	sub	x9, x13, x9
    2584:	mov	x12, x14
    2588:	b	1eec <__addtf3+0xd4>
    258c:	mov	x12, #0x7fff                	// #32767
    2590:	cmp	x1, x12
    2594:	b.eq	25c0 <__addtf3+0x7a8>  // b.none
    2598:	cmp	x3, x12
    259c:	b.eq	27f0 <__addtf3+0x9d8>  // b.none
    25a0:	cbnz	x5, 25d8 <__addtf3+0x7c0>
    25a4:	mov	w5, w0
    25a8:	cbnz	x8, 28d0 <__addtf3+0xab8>
    25ac:	mov	w7, #0x0                   	// #0
    25b0:	mov	x2, #0xffffffffffff        	// #281474976710655
    25b4:	mov	w0, #0x1                   	// #1
    25b8:	mov	x8, #0xffffffffffffffff    	// #-1
    25bc:	b	22c4 <__addtf3+0x4ac>
    25c0:	cbz	x5, 28ec <__addtf3+0xad4>
    25c4:	lsr	x0, x2, #50
    25c8:	cmp	x3, x1
    25cc:	eor	x0, x0, #0x1
    25d0:	and	w0, w0, #0x1
    25d4:	b.eq	27f0 <__addtf3+0x9d8>  // b.none
    25d8:	cbz	x8, 280c <__addtf3+0x9f4>
    25dc:	bfi	x6, x2, #61, #3
    25e0:	lsr	x3, x2, #3
    25e4:	tbz	x2, #50, 2600 <__addtf3+0x7e8>
    25e8:	lsr	x1, x4, #3
    25ec:	tbnz	x4, #50, 2600 <__addtf3+0x7e8>
    25f0:	mov	x6, x10
    25f4:	mov	w7, w11
    25f8:	bfi	x6, x4, #61, #3
    25fc:	mov	x3, x1
    2600:	extr	x2, x3, x6, #61
    2604:	bfi	x6, x2, #61, #3
    2608:	lsr	x2, x2, #3
    260c:	mov	x8, x6
    2610:	b	22bc <__addtf3+0x4a4>
    2614:	mov	x0, #0x7fff                	// #32767
    2618:	cmp	x8, x0
    261c:	b.ne	20c8 <__addtf3+0x2b0>  // b.any
    2620:	orr	x0, x2, x9
    2624:	cbz	x0, 2410 <__addtf3+0x5f8>
    2628:	lsr	x5, x2, #50
    262c:	eor	w5, w5, #0x1
    2630:	b	22a0 <__addtf3+0x488>
    2634:	cbz	x8, 2748 <__addtf3+0x930>
    2638:	mov	w7, w11
    263c:	mov	x2, x4
    2640:	mov	x9, x13
    2644:	mov	x12, x14
    2648:	mov	x1, #0x0                   	// #0
    264c:	mov	x3, #0x0                   	// #0
    2650:	b	232c <__addtf3+0x514>
    2654:	ands	x3, x15, #0xc00000
    2658:	b.eq	26e4 <__addtf3+0x8cc>  // b.none
    265c:	cmp	x3, #0x400, lsl #12
    2660:	eor	w0, w7, #0x1
    2664:	cset	w1, eq  // eq = none
    2668:	tst	w1, w0
    266c:	b.ne	2908 <__addtf3+0xaf0>  // b.any
    2670:	cmp	x3, #0x800, lsl #12
    2674:	b.eq	28b4 <__addtf3+0xa9c>  // b.none
    2678:	cmp	x3, #0x400, lsl #12
    267c:	mov	w0, #0x14                  	// #20
    2680:	b.ne	2190 <__addtf3+0x378>  // b.any
    2684:	mov	x2, #0xffffffffffffffff    	// #-1
    2688:	mov	x1, #0x7ffe                	// #32766
    268c:	mov	x9, x2
    2690:	mov	w5, #0x0                   	// #0
    2694:	mov	w0, #0x14                  	// #20
    2698:	cbnz	x12, 2254 <__addtf3+0x43c>
    269c:	b	224c <__addtf3+0x434>
    26a0:	mov	x9, x5
    26a4:	b	1eec <__addtf3+0xd4>
    26a8:	orr	x2, x2, x9
    26ac:	cmp	x2, #0x0
    26b0:	cset	x9, ne  // ne = any
    26b4:	b	2510 <__addtf3+0x6f8>
    26b8:	mov	w1, #0x80                  	// #128
    26bc:	sub	w1, w1, w0
    26c0:	subs	w0, w0, #0x40
    26c4:	lsl	x1, x2, x1
    26c8:	orr	x1, x9, x1
    26cc:	csel	x9, x1, x9, ne  // ne = any
    26d0:	lsr	x2, x2, x0
    26d4:	cmp	x9, #0x0
    26d8:	cset	x9, ne  // ne = any
    26dc:	orr	x9, x9, x2
    26e0:	b	24a8 <__addtf3+0x690>
    26e4:	mov	w0, #0x14                  	// #20
    26e8:	b	21d4 <__addtf3+0x3bc>
    26ec:	lsr	x5, x4, #50
    26f0:	mov	w7, w11
    26f4:	eor	x5, x5, #0x1
    26f8:	mov	x9, x13
    26fc:	and	w5, w5, #0x1
    2700:	mov	x2, x4
    2704:	b	22a0 <__addtf3+0x488>
    2708:	mov	x8, #0x7fff                	// #32767
    270c:	cmp	x1, x8
    2710:	b.eq	2830 <__addtf3+0xa18>  // b.none
    2714:	cmp	x3, x8
    2718:	b.eq	28a4 <__addtf3+0xa8c>  // b.none
    271c:	cbnz	x0, 2848 <__addtf3+0xa30>
    2720:	mov	x2, x4
    2724:	mov	x9, x13
    2728:	b	22a0 <__addtf3+0x488>
    272c:	mov	x0, #0x7fff                	// #32767
    2730:	cmp	x3, x0
    2734:	b.eq	28e0 <__addtf3+0xac8>  // b.none
    2738:	mov	x2, x4
    273c:	mov	x9, x13
    2740:	mov	x1, x3
    2744:	b	20c8 <__addtf3+0x2b0>
    2748:	and	x15, x15, #0xc00000
    274c:	mov	x2, #0x0                   	// #0
    2750:	cmp	x15, #0x800, lsl #12
    2754:	cset	w7, eq  // eq = none
    2758:	b	20e8 <__addtf3+0x2d0>
    275c:	mov	x2, x4
    2760:	mov	x9, x13
    2764:	b	1f54 <__addtf3+0x13c>
    2768:	mov	w0, #0x80                  	// #128
    276c:	sub	w0, w0, w5
    2770:	subs	w5, w5, #0x40
    2774:	lsl	x0, x2, x0
    2778:	orr	x0, x9, x0
    277c:	csel	x9, x0, x9, ne  // ne = any
    2780:	lsr	x2, x2, x5
    2784:	cmp	x9, #0x0
    2788:	cset	x9, ne  // ne = any
    278c:	orr	x9, x9, x2
    2790:	b	2510 <__addtf3+0x6f8>
    2794:	cmp	x13, x9
    2798:	mov	w7, w11
    279c:	sbc	x2, x4, x2
    27a0:	sub	x9, x13, x9
    27a4:	mov	x1, x3
    27a8:	mov	x12, x5
    27ac:	b	1ee4 <__addtf3+0xcc>
    27b0:	ands	x3, x15, #0xc00000
    27b4:	b.eq	26e4 <__addtf3+0x8cc>  // b.none
    27b8:	cmp	x3, #0x400, lsl #12
    27bc:	eor	w0, w7, #0x1
    27c0:	csel	w0, w0, wzr, eq  // eq = none
    27c4:	cbnz	w0, 2908 <__addtf3+0xaf0>
    27c8:	cmp	x3, #0x800, lsl #12
    27cc:	b.ne	2678 <__addtf3+0x860>  // b.any
    27d0:	cbz	x12, 28b8 <__addtf3+0xaa0>
    27d4:	mov	w0, #0x14                  	// #20
    27d8:	mov	x16, #0x1                   	// #1
    27dc:	b	21d4 <__addtf3+0x3bc>
    27e0:	orr	x0, x4, x13
    27e4:	cbnz	x0, 26ec <__addtf3+0x8d4>
    27e8:	mov	w7, w11
    27ec:	b	2410 <__addtf3+0x5f8>
    27f0:	cbz	x8, 28fc <__addtf3+0xae4>
    27f4:	tst	x4, #0x4000000000000
    27f8:	csinc	w0, w0, wzr, ne  // ne = any
    27fc:	cbnz	x5, 25dc <__addtf3+0x7c4>
    2800:	mov	w7, w11
    2804:	mov	x2, x4
    2808:	mov	x9, x13
    280c:	mov	w5, w0
    2810:	b	22a0 <__addtf3+0x488>
    2814:	orr	x8, x5, x3
    2818:	cbz	x8, 2748 <__addtf3+0x930>
    281c:	and	x0, x5, #0x7
    2820:	mov	x9, x5
    2824:	mov	x2, x3
    2828:	mov	w5, #0x1                   	// #1
    282c:	b	1f64 <__addtf3+0x14c>
    2830:	cbz	x0, 289c <__addtf3+0xa84>
    2834:	lsr	x5, x2, #50
    2838:	cmp	x3, x1
    283c:	eor	x5, x5, #0x1
    2840:	and	w5, w5, #0x1
    2844:	b.eq	2914 <__addtf3+0xafc>  // b.none
    2848:	orr	x13, x4, x13
    284c:	cbz	x13, 22a0 <__addtf3+0x488>
    2850:	bfi	x6, x2, #61, #3
    2854:	lsr	x0, x2, #3
    2858:	tbz	x2, #50, 2874 <__addtf3+0xa5c>
    285c:	lsr	x1, x4, #3
    2860:	tbnz	x4, #50, 2874 <__addtf3+0xa5c>
    2864:	and	x6, x10, #0x1fffffffffffffff
    2868:	mov	w7, w11
    286c:	orr	x6, x6, x4, lsl #61
    2870:	mov	x0, x1
    2874:	extr	x2, x0, x6, #61
    2878:	mov	w0, w5
    287c:	bfi	x6, x2, #61, #3
    2880:	lsr	x2, x2, #3
    2884:	mov	x8, x6
    2888:	b	22bc <__addtf3+0x4a4>
    288c:	adds	x9, x9, x13
    2890:	mov	x1, x3
    2894:	adc	x2, x4, x2
    2898:	b	2158 <__addtf3+0x340>
    289c:	cmp	x3, x1
    28a0:	b.ne	2720 <__addtf3+0x908>  // b.any
    28a4:	orr	x1, x4, x13
    28a8:	cbnz	x1, 291c <__addtf3+0xb04>
    28ac:	cbz	x0, 2410 <__addtf3+0x5f8>
    28b0:	b	22a0 <__addtf3+0x488>
    28b4:	cbnz	x16, 27d4 <__addtf3+0x9bc>
    28b8:	mov	x2, #0xffffffffffffffff    	// #-1
    28bc:	mov	w7, #0x0                   	// #0
    28c0:	mov	x9, x2
    28c4:	mov	x1, #0x7ffe                	// #32766
    28c8:	mov	w0, #0x14                  	// #20
    28cc:	b	1f94 <__addtf3+0x17c>
    28d0:	mov	w7, w11
    28d4:	mov	x2, x4
    28d8:	mov	x9, x13
    28dc:	b	22a0 <__addtf3+0x488>
    28e0:	orr	x0, x4, x13
    28e4:	cbz	x0, 2410 <__addtf3+0x5f8>
    28e8:	b	222c <__addtf3+0x414>
    28ec:	cmp	x3, x1
    28f0:	b.eq	27f0 <__addtf3+0x9d8>  // b.none
    28f4:	mov	w5, #0x0                   	// #0
    28f8:	b	25a8 <__addtf3+0x790>
    28fc:	cbnz	x5, 280c <__addtf3+0x9f4>
    2900:	mov	w5, w0
    2904:	b	25a8 <__addtf3+0x790>
    2908:	mov	w0, #0x14                  	// #20
    290c:	mov	x16, #0x0                   	// #0
    2910:	b	21d4 <__addtf3+0x3bc>
    2914:	orr	x1, x4, x13
    2918:	cbz	x1, 22a0 <__addtf3+0x488>
    291c:	tst	x4, #0x4000000000000
    2920:	csinc	w5, w5, wzr, ne  // ne = any
    2924:	cbnz	x0, 2850 <__addtf3+0xa38>
    2928:	b	2720 <__addtf3+0x908>
    292c:	mov	x8, #0x0                   	// #0
    2930:	mov	w1, #0x7fff                	// #32767
    2934:	mov	x2, #0x0                   	// #0
    2938:	b	1fb0 <__addtf3+0x198>
    293c:	nop

0000000000002940 <__eqtf2>:
    2940:	stp	x29, x30, [sp, #-48]!
    2944:	mov	x29, sp
    2948:	str	q0, [sp, #16]
    294c:	str	q1, [sp, #32]
    2950:	ldp	x6, x1, [sp, #16]
    2954:	ldp	x7, x0, [sp, #32]
    2958:	mrs	x2, fpcr
    295c:	ubfx	x4, x1, #48, #15
    2960:	lsr	x2, x1, #63
    2964:	lsr	x3, x0, #63
    2968:	ubfx	x9, x0, #0, #48
    296c:	mov	x5, #0x7fff                	// #32767
    2970:	mov	x10, x6
    2974:	cmp	x4, x5
    2978:	and	w2, w2, #0xff
    297c:	ubfx	x1, x1, #0, #48
    2980:	and	w3, w3, #0xff
    2984:	ubfx	x0, x0, #48, #15
    2988:	b.eq	29bc <__eqtf2+0x7c>  // b.none
    298c:	cmp	x0, x5
    2990:	b.eq	29a8 <__eqtf2+0x68>  // b.none
    2994:	cmp	x4, x0
    2998:	mov	w0, #0x1                   	// #1
    299c:	b.eq	29d4 <__eqtf2+0x94>  // b.none
    29a0:	ldp	x29, x30, [sp], #48
    29a4:	ret
    29a8:	orr	x8, x9, x7
    29ac:	cbnz	x8, 2a38 <__eqtf2+0xf8>
    29b0:	mov	w0, #0x1                   	// #1
    29b4:	ldp	x29, x30, [sp], #48
    29b8:	ret
    29bc:	orr	x5, x1, x6
    29c0:	cbnz	x5, 2a08 <__eqtf2+0xc8>
    29c4:	cmp	x0, x4
    29c8:	b.ne	29b0 <__eqtf2+0x70>  // b.any
    29cc:	orr	x8, x9, x7
    29d0:	cbnz	x8, 2a38 <__eqtf2+0xf8>
    29d4:	cmp	x1, x9
    29d8:	mov	w0, #0x1                   	// #1
    29dc:	ccmp	x6, x7, #0x0, eq  // eq = none
    29e0:	b.ne	29a0 <__eqtf2+0x60>  // b.any
    29e4:	cmp	w2, w3
    29e8:	mov	w0, #0x0                   	// #0
    29ec:	b.eq	29a0 <__eqtf2+0x60>  // b.none
    29f0:	mov	w0, #0x1                   	// #1
    29f4:	cbnz	x4, 29a0 <__eqtf2+0x60>
    29f8:	orr	x1, x1, x10
    29fc:	cmp	x1, #0x0
    2a00:	cset	w0, ne  // ne = any
    2a04:	b	29a0 <__eqtf2+0x60>
    2a08:	tst	x1, #0x800000000000
    2a0c:	b.ne	2a24 <__eqtf2+0xe4>  // b.any
    2a10:	mov	w0, #0x1                   	// #1
    2a14:	bl	3670 <__sfp_handle_exceptions>
    2a18:	mov	w0, #0x1                   	// #1
    2a1c:	ldp	x29, x30, [sp], #48
    2a20:	ret
    2a24:	cmp	x0, x4
    2a28:	mov	w0, #0x1                   	// #1
    2a2c:	b.ne	29a0 <__eqtf2+0x60>  // b.any
    2a30:	orr	x8, x9, x7
    2a34:	cbz	x8, 29a0 <__eqtf2+0x60>
    2a38:	tst	x9, #0x800000000000
    2a3c:	b.eq	2a10 <__eqtf2+0xd0>  // b.none
    2a40:	b	29b0 <__eqtf2+0x70>
    2a44:	nop

0000000000002a48 <__getf2>:
    2a48:	stp	x29, x30, [sp, #-48]!
    2a4c:	mov	x29, sp
    2a50:	str	q0, [sp, #16]
    2a54:	str	q1, [sp, #32]
    2a58:	ldp	x8, x1, [sp, #16]
    2a5c:	ldp	x9, x0, [sp, #32]
    2a60:	mrs	x2, fpcr
    2a64:	ubfx	x4, x1, #48, #15
    2a68:	ubfx	x10, x1, #0, #48
    2a6c:	lsr	x2, x1, #63
    2a70:	mov	x7, #0x7fff                	// #32767
    2a74:	mov	x5, x8
    2a78:	cmp	x4, x7
    2a7c:	ubfx	x11, x0, #0, #48
    2a80:	ubfx	x6, x0, #48, #15
    2a84:	lsr	x1, x0, #63
    2a88:	mov	x3, x9
    2a8c:	b.eq	2ac8 <__getf2+0x80>  // b.none
    2a90:	cmp	x6, x7
    2a94:	b.eq	2ad8 <__getf2+0x90>  // b.none
    2a98:	cbnz	x4, 2b00 <__getf2+0xb8>
    2a9c:	orr	x5, x10, x8
    2aa0:	cmp	x5, #0x0
    2aa4:	cset	w0, eq  // eq = none
    2aa8:	cbnz	x6, 2ab4 <__getf2+0x6c>
    2aac:	orr	x3, x11, x9
    2ab0:	cbz	x3, 2b20 <__getf2+0xd8>
    2ab4:	cbz	w0, 2ae4 <__getf2+0x9c>
    2ab8:	cmp	x1, #0x0
    2abc:	csinv	w0, w0, wzr, ne  // ne = any
    2ac0:	ldp	x29, x30, [sp], #48
    2ac4:	ret
    2ac8:	orr	x0, x10, x8
    2acc:	cbnz	x0, 2b2c <__getf2+0xe4>
    2ad0:	cmp	x6, x4
    2ad4:	b.ne	2b00 <__getf2+0xb8>  // b.any
    2ad8:	orr	x3, x11, x3
    2adc:	cbnz	x3, 2b2c <__getf2+0xe4>
    2ae0:	cbz	x4, 2b10 <__getf2+0xc8>
    2ae4:	cmp	x2, x1
    2ae8:	b.eq	2b40 <__getf2+0xf8>  // b.none
    2aec:	cmp	x2, #0x0
    2af0:	mov	w0, #0xffffffff            	// #-1
    2af4:	cneg	w0, w0, eq  // eq = none
    2af8:	ldp	x29, x30, [sp], #48
    2afc:	ret
    2b00:	cbnz	x6, 2ae4 <__getf2+0x9c>
    2b04:	orr	x3, x11, x3
    2b08:	cbnz	x3, 2ae4 <__getf2+0x9c>
    2b0c:	b	2aec <__getf2+0xa4>
    2b10:	orr	x5, x10, x5
    2b14:	cmp	x5, #0x0
    2b18:	cset	w0, eq  // eq = none
    2b1c:	b	2ab4 <__getf2+0x6c>
    2b20:	mov	w0, #0x0                   	// #0
    2b24:	cbz	x5, 2ac0 <__getf2+0x78>
    2b28:	b	2aec <__getf2+0xa4>
    2b2c:	mov	w0, #0x1                   	// #1
    2b30:	bl	3670 <__sfp_handle_exceptions>
    2b34:	mov	w0, #0xfffffffe            	// #-2
    2b38:	ldp	x29, x30, [sp], #48
    2b3c:	ret
    2b40:	cmp	x4, x6
    2b44:	b.gt	2aec <__getf2+0xa4>
    2b48:	b.lt	2b80 <__getf2+0x138>  // b.tstop
    2b4c:	cmp	x10, x11
    2b50:	b.hi	2aec <__getf2+0xa4>  // b.pmore
    2b54:	cset	w0, eq  // eq = none
    2b58:	cmp	w0, #0x0
    2b5c:	ccmp	x8, x9, #0x0, ne  // ne = any
    2b60:	b.hi	2aec <__getf2+0xa4>  // b.pmore
    2b64:	cmp	x10, x11
    2b68:	b.cc	2b80 <__getf2+0x138>  // b.lo, b.ul, b.last
    2b6c:	cmp	w0, #0x0
    2b70:	mov	w0, #0x0                   	// #0
    2b74:	ccmp	x8, x9, #0x2, ne  // ne = any
    2b78:	b.cs	2ac0 <__getf2+0x78>  // b.hs, b.nlast
    2b7c:	nop
    2b80:	cmp	x2, #0x0
    2b84:	mov	w0, #0x1                   	// #1
    2b88:	cneg	w0, w0, eq  // eq = none
    2b8c:	b	2ac0 <__getf2+0x78>

0000000000002b90 <__letf2>:
    2b90:	stp	x29, x30, [sp, #-48]!
    2b94:	mov	x29, sp
    2b98:	str	q0, [sp, #16]
    2b9c:	str	q1, [sp, #32]
    2ba0:	ldp	x8, x1, [sp, #16]
    2ba4:	ldp	x9, x0, [sp, #32]
    2ba8:	mrs	x2, fpcr
    2bac:	ubfx	x4, x1, #48, #15
    2bb0:	ubfx	x10, x1, #0, #48
    2bb4:	lsr	x2, x1, #63
    2bb8:	mov	x5, #0x7fff                	// #32767
    2bbc:	mov	x6, x8
    2bc0:	cmp	x4, x5
    2bc4:	ubfx	x11, x0, #0, #48
    2bc8:	ubfx	x7, x0, #48, #15
    2bcc:	lsr	x1, x0, #63
    2bd0:	mov	x3, x9
    2bd4:	b.eq	2c0c <__letf2+0x7c>  // b.none
    2bd8:	cmp	x7, x5
    2bdc:	b.eq	2c1c <__letf2+0x8c>  // b.none
    2be0:	cbnz	x4, 2c48 <__letf2+0xb8>
    2be4:	orr	x6, x10, x8
    2be8:	cmp	x6, #0x0
    2bec:	cset	w0, eq  // eq = none
    2bf0:	cbnz	x7, 2c34 <__letf2+0xa4>
    2bf4:	orr	x3, x11, x9
    2bf8:	cbnz	x3, 2c34 <__letf2+0xa4>
    2bfc:	mov	w0, #0x0                   	// #0
    2c00:	cbnz	x6, 2c5c <__letf2+0xcc>
    2c04:	ldp	x29, x30, [sp], #48
    2c08:	ret
    2c0c:	orr	x0, x10, x8
    2c10:	cbnz	x0, 2c70 <__letf2+0xe0>
    2c14:	cmp	x7, x4
    2c18:	b.ne	2c48 <__letf2+0xb8>  // b.any
    2c1c:	orr	x3, x11, x3
    2c20:	cbnz	x3, 2c70 <__letf2+0xe0>
    2c24:	cbnz	x4, 2c54 <__letf2+0xc4>
    2c28:	orr	x6, x10, x6
    2c2c:	cmp	x6, #0x0
    2c30:	cset	w0, eq  // eq = none
    2c34:	cbz	w0, 2c54 <__letf2+0xc4>
    2c38:	cmp	x1, #0x0
    2c3c:	csinv	w0, w0, wzr, ne  // ne = any
    2c40:	ldp	x29, x30, [sp], #48
    2c44:	ret
    2c48:	cbnz	x7, 2c54 <__letf2+0xc4>
    2c4c:	orr	x3, x11, x3
    2c50:	cbz	x3, 2c5c <__letf2+0xcc>
    2c54:	cmp	x2, x1
    2c58:	b.eq	2c84 <__letf2+0xf4>  // b.none
    2c5c:	cmp	x2, #0x0
    2c60:	mov	w0, #0xffffffff            	// #-1
    2c64:	cneg	w0, w0, eq  // eq = none
    2c68:	ldp	x29, x30, [sp], #48
    2c6c:	ret
    2c70:	mov	w0, #0x1                   	// #1
    2c74:	bl	3670 <__sfp_handle_exceptions>
    2c78:	mov	w0, #0x2                   	// #2
    2c7c:	ldp	x29, x30, [sp], #48
    2c80:	ret
    2c84:	cmp	x4, x7
    2c88:	b.gt	2c5c <__letf2+0xcc>
    2c8c:	b.lt	2cc0 <__letf2+0x130>  // b.tstop
    2c90:	cmp	x10, x11
    2c94:	b.hi	2c5c <__letf2+0xcc>  // b.pmore
    2c98:	cset	w0, eq  // eq = none
    2c9c:	cmp	w0, #0x0
    2ca0:	ccmp	x8, x9, #0x0, ne  // ne = any
    2ca4:	b.hi	2c5c <__letf2+0xcc>  // b.pmore
    2ca8:	cmp	x10, x11
    2cac:	b.cc	2cc0 <__letf2+0x130>  // b.lo, b.ul, b.last
    2cb0:	cmp	w0, #0x0
    2cb4:	mov	w0, #0x0                   	// #0
    2cb8:	ccmp	x8, x9, #0x2, ne  // ne = any
    2cbc:	b.cs	2c04 <__letf2+0x74>  // b.hs, b.nlast
    2cc0:	cmp	x2, #0x0
    2cc4:	mov	w0, #0x1                   	// #1
    2cc8:	cneg	w0, w0, eq  // eq = none
    2ccc:	b	2c04 <__letf2+0x74>

0000000000002cd0 <__multf3>:
    2cd0:	stp	x29, x30, [sp, #-80]!
    2cd4:	mov	x29, sp
    2cd8:	str	q0, [sp, #48]
    2cdc:	str	q1, [sp, #64]
    2ce0:	ldp	x1, x0, [sp, #48]
    2ce4:	ldp	x6, x2, [sp, #64]
    2ce8:	mrs	x11, fpcr
    2cec:	lsr	x3, x0, #63
    2cf0:	ubfx	x7, x0, #0, #48
    2cf4:	and	w12, w3, #0xff
    2cf8:	mov	x14, x3
    2cfc:	ubfx	x3, x0, #48, #15
    2d00:	cbz	w3, 30a8 <__multf3+0x3d8>
    2d04:	mov	w4, #0x7fff                	// #32767
    2d08:	cmp	w3, w4
    2d0c:	b.eq	314c <__multf3+0x47c>  // b.none
    2d10:	and	x3, x3, #0xffff
    2d14:	extr	x4, x7, x1, #61
    2d18:	mov	x18, #0xffffffffffffc001    	// #-16383
    2d1c:	orr	x7, x4, #0x8000000000000
    2d20:	add	x3, x3, x18
    2d24:	lsl	x5, x1, #3
    2d28:	mov	x16, #0x0                   	// #0
    2d2c:	mov	x1, #0x0                   	// #0
    2d30:	mov	w0, #0x0                   	// #0
    2d34:	lsr	x8, x2, #63
    2d38:	ubfx	x4, x2, #0, #48
    2d3c:	and	w15, w8, #0xff
    2d40:	mov	x13, x8
    2d44:	ubfx	x9, x2, #48, #15
    2d48:	cbz	w9, 3108 <__multf3+0x438>
    2d4c:	mov	w8, #0x7fff                	// #32767
    2d50:	cmp	w9, w8
    2d54:	b.eq	2dd8 <__multf3+0x108>  // b.none
    2d58:	and	x9, x9, #0xffff
    2d5c:	mov	x17, #0xffffffffffffc001    	// #-16383
    2d60:	add	x9, x9, x17
    2d64:	extr	x2, x4, x6, #61
    2d68:	add	x9, x9, x3
    2d6c:	lsl	x6, x6, #3
    2d70:	orr	x4, x2, #0x8000000000000
    2d74:	mov	x2, #0x0                   	// #0
    2d78:	eor	w8, w12, w15
    2d7c:	cmp	x1, #0xa
    2d80:	and	w10, w8, #0xff
    2d84:	add	x3, x9, #0x1
    2d88:	and	x8, x8, #0xff
    2d8c:	b.le	2e10 <__multf3+0x140>
    2d90:	cmp	x1, #0xb
    2d94:	b.eq	34a8 <__multf3+0x7d8>  // b.none
    2d98:	mov	w15, w12
    2d9c:	mov	x13, x14
    2da0:	mov	w10, w15
    2da4:	cmp	x16, #0x2
    2da8:	b.eq	316c <__multf3+0x49c>  // b.none
    2dac:	mov	x4, x7
    2db0:	mov	x6, x5
    2db4:	mov	x2, x16
    2db8:	mov	x8, x13
    2dbc:	cmp	x2, #0x3
    2dc0:	b.ne	2e2c <__multf3+0x15c>  // b.any
    2dc4:	orr	x4, x4, #0x800000000000
    2dc8:	mov	x5, x6
    2dcc:	and	x4, x4, #0xffffffffffff
    2dd0:	mov	w1, #0x7fff                	// #32767
    2dd4:	b	2e40 <__multf3+0x170>
    2dd8:	mov	x8, #0x7fff                	// #32767
    2ddc:	orr	x2, x4, x6
    2de0:	add	x9, x3, x8
    2de4:	cbnz	x2, 2e64 <__multf3+0x194>
    2de8:	eor	w8, w12, w15
    2dec:	orr	x1, x1, #0x2
    2df0:	and	w10, w8, #0xff
    2df4:	cmp	x1, #0xa
    2df8:	add	x3, x3, #0x8, lsl #12
    2dfc:	and	x8, x8, #0xff
    2e00:	mov	x6, #0x0                   	// #0
    2e04:	b.gt	341c <__multf3+0x74c>
    2e08:	mov	x4, #0x0                   	// #0
    2e0c:	mov	x2, #0x2                   	// #2
    2e10:	cmp	x1, #0x2
    2e14:	b.gt	2e8c <__multf3+0x1bc>
    2e18:	sub	x1, x1, #0x1
    2e1c:	cmp	x1, #0x1
    2e20:	b.hi	2ec8 <__multf3+0x1f8>  // b.pmore
    2e24:	cmp	x2, #0x2
    2e28:	b.eq	316c <__multf3+0x49c>  // b.none
    2e2c:	cmp	x2, #0x1
    2e30:	b.ne	3028 <__multf3+0x358>  // b.any
    2e34:	mov	w1, #0x0                   	// #0
    2e38:	mov	x4, #0x0                   	// #0
    2e3c:	mov	x5, #0x0                   	// #0
    2e40:	mov	x3, #0x0                   	// #0
    2e44:	orr	w1, w1, w10, lsl #15
    2e48:	bfxil	x3, x4, #0, #48
    2e4c:	fmov	d0, x5
    2e50:	bfi	x3, x1, #48, #16
    2e54:	fmov	v0.d[1], x3
    2e58:	cbnz	w0, 3298 <__multf3+0x5c8>
    2e5c:	ldp	x29, x30, [sp], #80
    2e60:	ret
    2e64:	tst	x4, #0x800000000000
    2e68:	eor	w8, w12, w15
    2e6c:	orr	x1, x1, #0x3
    2e70:	csinc	w0, w0, wzr, ne  // ne = any
    2e74:	and	w10, w8, #0xff
    2e78:	add	x3, x3, #0x8, lsl #12
    2e7c:	cmp	x1, #0xa
    2e80:	and	x8, x8, #0xff
    2e84:	mov	x2, #0x3                   	// #3
    2e88:	b.gt	349c <__multf3+0x7cc>
    2e8c:	mov	x12, #0x1                   	// #1
    2e90:	mov	x14, #0x530                 	// #1328
    2e94:	lsl	x1, x12, x1
    2e98:	tst	x1, x14
    2e9c:	b.ne	309c <__multf3+0x3cc>  // b.any
    2ea0:	mov	x14, #0x240                 	// #576
    2ea4:	tst	x1, x14
    2ea8:	b.ne	3084 <__multf3+0x3b4>  // b.any
    2eac:	mov	x12, #0x88                  	// #136
    2eb0:	tst	x1, x12
    2eb4:	b.eq	2ec8 <__multf3+0x1f8>  // b.none
    2eb8:	mov	x7, x4
    2ebc:	mov	x5, x6
    2ec0:	mov	x16, x2
    2ec4:	b	2da0 <__multf3+0xd0>
    2ec8:	lsr	x13, x5, #32
    2ecc:	and	x12, x6, #0xffffffff
    2ed0:	and	x15, x5, #0xffffffff
    2ed4:	lsr	x6, x6, #32
    2ed8:	and	x18, x4, #0xffffffff
    2edc:	lsr	x2, x4, #32
    2ee0:	mul	x4, x13, x12
    2ee4:	stp	x21, x22, [sp, #32]
    2ee8:	lsr	x22, x7, #32
    2eec:	and	x5, x7, #0xffffffff
    2ef0:	mul	x16, x12, x15
    2ef4:	madd	x7, x6, x15, x4
    2ef8:	stp	x19, x20, [sp, #16]
    2efc:	mul	x1, x13, x18
    2f00:	mul	x17, x15, x18
    2f04:	and	x30, x16, #0xffffffff
    2f08:	madd	x15, x2, x15, x1
    2f0c:	add	x16, x7, x16, lsr #32
    2f10:	mul	x21, x22, x12
    2f14:	cmp	x4, x16
    2f18:	mul	x20, x22, x18
    2f1c:	mov	x14, #0x100000000           	// #4294967296
    2f20:	mul	x19, x13, x6
    2f24:	add	x15, x15, x17, lsr #32
    2f28:	mul	x12, x12, x5
    2f2c:	and	x17, x17, #0xffffffff
    2f30:	mul	x18, x5, x18
    2f34:	add	x4, x19, x14
    2f38:	madd	x7, x6, x5, x21
    2f3c:	csel	x19, x4, x19, hi  // hi = pmore
    2f40:	madd	x5, x2, x5, x20
    2f44:	cmp	x1, x15
    2f48:	mul	x13, x13, x2
    2f4c:	add	x17, x17, x15, lsl #32
    2f50:	mul	x6, x6, x22
    2f54:	add	x7, x7, x12, lsr #32
    2f58:	add	x5, x5, x18, lsr #32
    2f5c:	add	x4, x13, x14
    2f60:	mul	x2, x2, x22
    2f64:	csel	x13, x4, x13, hi  // hi = pmore
    2f68:	and	x1, x18, #0xffffffff
    2f6c:	cmp	x21, x7
    2f70:	add	x4, x6, x14
    2f74:	add	x30, x30, x16, lsl #32
    2f78:	csel	x6, x4, x6, hi  // hi = pmore
    2f7c:	add	x13, x13, x15, lsr #32
    2f80:	cmp	x20, x5
    2f84:	add	x1, x1, x5, lsl #32
    2f88:	add	x16, x17, x16, lsr #32
    2f8c:	add	x14, x2, x14
    2f90:	csel	x2, x14, x2, hi  // hi = pmore
    2f94:	add	x16, x19, x16
    2f98:	adds	x1, x1, x13
    2f9c:	and	x12, x12, #0xffffffff
    2fa0:	cset	x13, cs  // cs = hs, nlast
    2fa4:	cmp	x16, x17
    2fa8:	cset	x4, cc  // cc = lo, ul, last
    2fac:	add	x12, x12, x7, lsl #32
    2fb0:	adds	x1, x1, x4
    2fb4:	lsr	x5, x5, #32
    2fb8:	cset	x4, cs  // cs = hs, nlast
    2fbc:	cmp	x13, #0x0
    2fc0:	ccmp	x4, #0x0, #0x0, eq  // eq = none
    2fc4:	add	x7, x6, x7, lsr #32
    2fc8:	cinc	x5, x5, ne  // ne = any
    2fcc:	adds	x6, x16, x12
    2fd0:	cset	x4, cs  // cs = hs, nlast
    2fd4:	adds	x1, x1, x7
    2fd8:	cset	x7, cs  // cs = hs, nlast
    2fdc:	adds	x4, x1, x4
    2fe0:	cset	x1, cs  // cs = hs, nlast
    2fe4:	cmp	x7, #0x0
    2fe8:	orr	x30, x30, x6, lsl #13
    2fec:	ccmp	x1, #0x0, #0x0, eq  // eq = none
    2ff0:	cinc	x1, x2, ne  // ne = any
    2ff4:	cmp	x30, #0x0
    2ff8:	add	x1, x1, x5
    2ffc:	cset	x2, ne  // ne = any
    3000:	orr	x6, x2, x6, lsr #51
    3004:	orr	x6, x6, x4, lsl #13
    3008:	extr	x4, x1, x4, #51
    300c:	tbz	x1, #39, 3320 <__multf3+0x650>
    3010:	ldp	x19, x20, [sp, #16]
    3014:	and	x1, x6, #0x1
    3018:	ldp	x21, x22, [sp, #32]
    301c:	orr	x6, x1, x6, lsr #1
    3020:	orr	x6, x6, x4, lsl #63
    3024:	lsr	x4, x4, #1
    3028:	mov	x1, #0x3fff                	// #16383
    302c:	add	x2, x3, x1
    3030:	cmp	x2, #0x0
    3034:	b.le	31cc <__multf3+0x4fc>
    3038:	tst	x6, #0x7
    303c:	b.eq	305c <__multf3+0x38c>  // b.none
    3040:	and	x1, x11, #0xc00000
    3044:	orr	w0, w0, #0x10
    3048:	cmp	x1, #0x400, lsl #12
    304c:	b.eq	3414 <__multf3+0x744>  // b.none
    3050:	cmp	x1, #0x800, lsl #12
    3054:	b.eq	33bc <__multf3+0x6ec>  // b.none
    3058:	cbz	x1, 33a4 <__multf3+0x6d4>
    305c:	tbz	x4, #52, 3068 <__multf3+0x398>
    3060:	and	x4, x4, #0xffefffffffffffff
    3064:	add	x2, x3, #0x4, lsl #12
    3068:	mov	x1, #0x7ffe                	// #32766
    306c:	cmp	x2, x1
    3070:	b.gt	32f4 <__multf3+0x624>
    3074:	and	w1, w2, #0x7fff
    3078:	extr	x5, x4, x6, #3
    307c:	ubfx	x4, x4, #3, #48
    3080:	b	2e40 <__multf3+0x170>
    3084:	mov	w0, w12
    3088:	mov	w10, #0x0                   	// #0
    308c:	mov	x4, #0xffffffffffff        	// #281474976710655
    3090:	mov	x5, #0xffffffffffffffff    	// #-1
    3094:	mov	w1, #0x7fff                	// #32767
    3098:	b	2e40 <__multf3+0x170>
    309c:	mov	w15, w10
    30a0:	mov	x13, x8
    30a4:	b	2da0 <__multf3+0xd0>
    30a8:	orr	x5, x7, x1
    30ac:	cbz	x5, 31b4 <__multf3+0x4e4>
    30b0:	cbz	x7, 32d0 <__multf3+0x600>
    30b4:	clz	x0, x7
    30b8:	sub	x4, x0, #0xf
    30bc:	add	w5, w4, #0x3
    30c0:	mov	w3, #0x3d                  	// #61
    30c4:	sub	w3, w3, w4
    30c8:	lsl	x4, x7, x5
    30cc:	lsr	x3, x1, x3
    30d0:	orr	x7, x3, x4
    30d4:	lsl	x5, x1, x5
    30d8:	lsr	x8, x2, #63
    30dc:	mov	x3, #0xffffffffffffc011    	// #-16367
    30e0:	ubfx	x4, x2, #0, #48
    30e4:	sub	x3, x3, x0
    30e8:	and	w15, w8, #0xff
    30ec:	mov	x13, x8
    30f0:	ubfx	x9, x2, #48, #15
    30f4:	mov	x1, #0x0                   	// #0
    30f8:	mov	x16, #0x0                   	// #0
    30fc:	mov	w0, #0x0                   	// #0
    3100:	cbnz	w9, 2d4c <__multf3+0x7c>
    3104:	nop
    3108:	orr	x2, x4, x6
    310c:	cbz	x2, 317c <__multf3+0x4ac>
    3110:	cbz	x4, 32ac <__multf3+0x5dc>
    3114:	clz	x9, x4
    3118:	sub	x2, x9, #0xf
    311c:	add	w10, w2, #0x3
    3120:	mov	w8, #0x3d                  	// #61
    3124:	sub	w8, w8, w2
    3128:	lsl	x2, x4, x10
    312c:	lsr	x8, x6, x8
    3130:	orr	x4, x8, x2
    3134:	lsl	x6, x6, x10
    3138:	sub	x9, x3, x9
    313c:	mov	x10, #0xffffffffffffc011    	// #-16367
    3140:	mov	x2, #0x0                   	// #0
    3144:	add	x9, x9, x10
    3148:	b	2d78 <__multf3+0xa8>
    314c:	orr	x5, x7, x1
    3150:	cbnz	x5, 3194 <__multf3+0x4c4>
    3154:	mov	x7, #0x0                   	// #0
    3158:	mov	x1, #0x8                   	// #8
    315c:	mov	x3, #0x7fff                	// #32767
    3160:	mov	x16, #0x2                   	// #2
    3164:	mov	w0, #0x0                   	// #0
    3168:	b	2d34 <__multf3+0x64>
    316c:	mov	w1, #0x7fff                	// #32767
    3170:	mov	x4, #0x0                   	// #0
    3174:	mov	x5, #0x0                   	// #0
    3178:	b	2e40 <__multf3+0x170>
    317c:	orr	x1, x1, #0x1
    3180:	mov	x9, x3
    3184:	mov	x4, #0x0                   	// #0
    3188:	mov	x6, #0x0                   	// #0
    318c:	mov	x2, #0x1                   	// #1
    3190:	b	2d78 <__multf3+0xa8>
    3194:	lsr	x0, x7, #47
    3198:	mov	x5, x1
    319c:	eor	x0, x0, #0x1
    31a0:	mov	x1, #0xc                   	// #12
    31a4:	and	w0, w0, #0x1
    31a8:	mov	x3, #0x7fff                	// #32767
    31ac:	mov	x16, #0x3                   	// #3
    31b0:	b	2d34 <__multf3+0x64>
    31b4:	mov	x7, #0x0                   	// #0
    31b8:	mov	x1, #0x4                   	// #4
    31bc:	mov	x3, #0x0                   	// #0
    31c0:	mov	x16, #0x1                   	// #1
    31c4:	mov	w0, #0x0                   	// #0
    31c8:	b	2d34 <__multf3+0x64>
    31cc:	mov	x1, #0x1                   	// #1
    31d0:	sub	x2, x1, x2
    31d4:	cmp	x2, #0x74
    31d8:	b.gt	3250 <__multf3+0x580>
    31dc:	cmp	x2, #0x3f
    31e0:	b.le	3330 <__multf3+0x660>
    31e4:	mov	w1, #0x80                  	// #128
    31e8:	sub	w1, w1, w2
    31ec:	cmp	x2, #0x40
    31f0:	sub	w2, w2, #0x40
    31f4:	lsl	x1, x4, x1
    31f8:	orr	x1, x6, x1
    31fc:	csel	x6, x1, x6, ne  // ne = any
    3200:	lsr	x2, x4, x2
    3204:	cmp	x6, #0x0
    3208:	cset	x5, ne  // ne = any
    320c:	orr	x5, x5, x2
    3210:	ands	x2, x5, #0x7
    3214:	b.eq	3364 <__multf3+0x694>  // b.none
    3218:	mov	x2, #0x0                   	// #0
    321c:	and	x11, x11, #0xc00000
    3220:	orr	w0, w0, #0x10
    3224:	cmp	x11, #0x400, lsl #12
    3228:	b.eq	3474 <__multf3+0x7a4>  // b.none
    322c:	cmp	x11, #0x800, lsl #12
    3230:	b.eq	3488 <__multf3+0x7b8>  // b.none
    3234:	cbz	x11, 33cc <__multf3+0x6fc>
    3238:	tbnz	x2, #51, 33e4 <__multf3+0x714>
    323c:	ubfx	x4, x2, #3, #48
    3240:	extr	x5, x2, x5, #3
    3244:	orr	w0, w0, #0x8
    3248:	mov	w1, #0x0                   	// #0
    324c:	b	3280 <__multf3+0x5b0>
    3250:	orr	x5, x6, x4
    3254:	cbz	x5, 3274 <__multf3+0x5a4>
    3258:	and	x11, x11, #0xc00000
    325c:	orr	w0, w0, #0x10
    3260:	cmp	x11, #0x400, lsl #12
    3264:	sub	x5, x1, x8
    3268:	b.eq	3274 <__multf3+0x5a4>  // b.none
    326c:	cmp	x11, #0x800, lsl #12
    3270:	csel	x5, x8, xzr, eq  // eq = none
    3274:	orr	w0, w0, #0x8
    3278:	mov	w1, #0x0                   	// #0
    327c:	mov	x4, #0x0                   	// #0
    3280:	mov	x3, #0x0                   	// #0
    3284:	fmov	d0, x5
    3288:	bfxil	x3, x4, #0, #48
    328c:	bfi	x3, x1, #48, #15
    3290:	bfi	x3, x10, #63, #1
    3294:	fmov	v0.d[1], x3
    3298:	str	q0, [sp, #48]
    329c:	bl	3670 <__sfp_handle_exceptions>
    32a0:	ldr	q0, [sp, #48]
    32a4:	ldp	x29, x30, [sp], #80
    32a8:	ret
    32ac:	clz	x9, x6
    32b0:	add	x2, x9, #0x31
    32b4:	add	x9, x9, #0x40
    32b8:	cmp	x2, #0x3c
    32bc:	b.le	311c <__multf3+0x44c>
    32c0:	sub	w2, w2, #0x3d
    32c4:	lsl	x4, x6, x2
    32c8:	mov	x6, #0x0                   	// #0
    32cc:	b	3138 <__multf3+0x468>
    32d0:	clz	x3, x1
    32d4:	add	x4, x3, #0x31
    32d8:	add	x0, x3, #0x40
    32dc:	cmp	x4, #0x3c
    32e0:	b.le	30bc <__multf3+0x3ec>
    32e4:	sub	w4, w4, #0x3d
    32e8:	mov	x5, #0x0                   	// #0
    32ec:	lsl	x7, x1, x4
    32f0:	b	30d8 <__multf3+0x408>
    32f4:	and	x5, x11, #0xc00000
    32f8:	cmp	x5, #0x400, lsl #12
    32fc:	b.eq	33f8 <__multf3+0x728>  // b.none
    3300:	cmp	x5, #0x800, lsl #12
    3304:	b.eq	3388 <__multf3+0x6b8>  // b.none
    3308:	cbz	x5, 337c <__multf3+0x6ac>
    330c:	mov	x4, #0xffffffffffff        	// #281474976710655
    3310:	mov	x5, #0xffffffffffffffff    	// #-1
    3314:	mov	w2, #0x14                  	// #20
    3318:	orr	w0, w0, w2
    331c:	b	3280 <__multf3+0x5b0>
    3320:	mov	x3, x9
    3324:	ldp	x19, x20, [sp, #16]
    3328:	ldp	x21, x22, [sp, #32]
    332c:	b	3028 <__multf3+0x358>
    3330:	mov	w1, #0x40                  	// #64
    3334:	sub	w1, w1, w2
    3338:	lsr	x3, x6, x2
    333c:	lsl	x6, x6, x1
    3340:	cmp	x6, #0x0
    3344:	lsl	x5, x4, x1
    3348:	cset	x1, ne  // ne = any
    334c:	orr	x5, x5, x3
    3350:	lsr	x2, x4, x2
    3354:	orr	x5, x5, x1
    3358:	tst	x5, #0x7
    335c:	b.ne	321c <__multf3+0x54c>  // b.any
    3360:	tbnz	x2, #51, 3494 <__multf3+0x7c4>
    3364:	ubfx	x4, x2, #3, #48
    3368:	extr	x5, x2, x5, #3
    336c:	mov	w1, #0x0                   	// #0
    3370:	tbz	w11, #11, 2e40 <__multf3+0x170>
    3374:	orr	w0, w0, #0x8
    3378:	b	3280 <__multf3+0x5b0>
    337c:	mov	w1, #0x7fff                	// #32767
    3380:	mov	x4, #0x0                   	// #0
    3384:	b	3314 <__multf3+0x644>
    3388:	cmp	x8, #0x0
    338c:	mov	w2, #0x7fff                	// #32767
    3390:	mov	x4, #0xffffffffffff        	// #281474976710655
    3394:	csel	w1, w1, w2, eq  // eq = none
    3398:	csel	x4, x4, xzr, eq  // eq = none
    339c:	csetm	x5, eq  // eq = none
    33a0:	b	3314 <__multf3+0x644>
    33a4:	and	x1, x6, #0xf
    33a8:	cmp	x1, #0x4
    33ac:	b.eq	305c <__multf3+0x38c>  // b.none
    33b0:	adds	x6, x6, #0x4
    33b4:	cinc	x4, x4, cs  // cs = hs, nlast
    33b8:	b	305c <__multf3+0x38c>
    33bc:	cbz	x8, 305c <__multf3+0x38c>
    33c0:	adds	x6, x6, #0x8
    33c4:	cinc	x4, x4, cs  // cs = hs, nlast
    33c8:	b	305c <__multf3+0x38c>
    33cc:	and	x1, x5, #0xf
    33d0:	cmp	x1, #0x4
    33d4:	b.eq	33e0 <__multf3+0x710>  // b.none
    33d8:	adds	x5, x5, #0x4
    33dc:	cinc	x2, x2, cs  // cs = hs, nlast
    33e0:	tbz	x2, #51, 323c <__multf3+0x56c>
    33e4:	orr	w0, w0, #0x8
    33e8:	mov	w1, #0x1                   	// #1
    33ec:	mov	x4, #0x0                   	// #0
    33f0:	mov	x5, #0x0                   	// #0
    33f4:	b	3280 <__multf3+0x5b0>
    33f8:	cmp	x8, #0x0
    33fc:	mov	w2, #0x7fff                	// #32767
    3400:	mov	x4, #0xffffffffffff        	// #281474976710655
    3404:	csel	w1, w1, w2, ne  // ne = any
    3408:	csel	x4, x4, xzr, ne  // ne = any
    340c:	csetm	x5, ne  // ne = any
    3410:	b	3314 <__multf3+0x644>
    3414:	cbnz	x8, 305c <__multf3+0x38c>
    3418:	b	33c0 <__multf3+0x6f0>
    341c:	mov	x4, #0x2                   	// #2
    3420:	cmp	x1, #0xf
    3424:	b.ne	3448 <__multf3+0x778>  // b.any
    3428:	tbz	x7, #47, 3460 <__multf3+0x790>
    342c:	tbnz	x2, #47, 3460 <__multf3+0x790>
    3430:	orr	x4, x2, #0x800000000000
    3434:	mov	w10, w15
    3438:	and	x4, x4, #0xffffffffffff
    343c:	mov	x5, x6
    3440:	mov	w1, #0x7fff                	// #32767
    3444:	b	2e40 <__multf3+0x170>
    3448:	cmp	x1, #0xb
    344c:	b.ne	2d98 <__multf3+0xc8>  // b.any
    3450:	mov	x7, x2
    3454:	mov	x5, x6
    3458:	mov	x16, x4
    345c:	b	2da0 <__multf3+0xd0>
    3460:	orr	x4, x7, #0x800000000000
    3464:	mov	w10, w12
    3468:	and	x4, x4, #0xffffffffffff
    346c:	mov	w1, #0x7fff                	// #32767
    3470:	b	2e40 <__multf3+0x170>
    3474:	cbnz	x8, 33e0 <__multf3+0x710>
    3478:	adds	x5, x5, #0x8
    347c:	cinc	x2, x2, cs  // cs = hs, nlast
    3480:	tbnz	x2, #51, 33e4 <__multf3+0x714>
    3484:	b	323c <__multf3+0x56c>
    3488:	cbnz	x8, 3478 <__multf3+0x7a8>
    348c:	tbnz	x2, #51, 33e4 <__multf3+0x714>
    3490:	b	323c <__multf3+0x56c>
    3494:	orr	w0, w0, #0x10
    3498:	b	33e4 <__multf3+0x714>
    349c:	mov	x2, x4
    34a0:	mov	x4, #0x3                   	// #3
    34a4:	b	3420 <__multf3+0x750>
    34a8:	mov	w10, w15
    34ac:	mov	x8, x13
    34b0:	b	2dbc <__multf3+0xec>
    34b4:	nop

00000000000034b8 <__floatsitf>:
    34b8:	cmp	w0, #0x0
    34bc:	cbz	w0, 3508 <__floatsitf+0x50>
    34c0:	cneg	w1, w0, lt  // lt = tstop
    34c4:	mov	w4, #0x403e                	// #16446
    34c8:	clz	x3, x1
    34cc:	mov	w2, #0x402f                	// #16431
    34d0:	sub	w4, w4, w3
    34d4:	lsr	w0, w0, #31
    34d8:	sub	w2, w2, w4
    34dc:	mov	x3, #0x0                   	// #0
    34e0:	and	w4, w4, #0x7fff
    34e4:	lsl	x1, x1, x2
    34e8:	and	x1, x1, #0xffffffffffff
    34ec:	orr	w0, w4, w0, lsl #15
    34f0:	mov	x2, #0x0                   	// #0
    34f4:	bfxil	x3, x1, #0, #48
    34f8:	fmov	d0, x2
    34fc:	bfi	x3, x0, #48, #16
    3500:	fmov	v0.d[1], x3
    3504:	ret
    3508:	mov	w4, #0x0                   	// #0
    350c:	mov	x1, #0x0                   	// #0
    3510:	mov	w0, #0x0                   	// #0
    3514:	mov	x3, #0x0                   	// #0
    3518:	orr	w0, w4, w0, lsl #15
    351c:	bfxil	x3, x1, #0, #48
    3520:	mov	x2, #0x0                   	// #0
    3524:	fmov	d0, x2
    3528:	bfi	x3, x0, #48, #16
    352c:	fmov	v0.d[1], x3
    3530:	ret
    3534:	nop

0000000000003538 <__fixtfdi>:
    3538:	stp	x29, x30, [sp, #-48]!
    353c:	mov	x29, sp
    3540:	str	x19, [sp, #16]
    3544:	str	q0, [sp, #32]
    3548:	ldp	x2, x0, [sp, #32]
    354c:	mrs	x1, fpcr
    3550:	ubfx	x19, x0, #48, #15
    3554:	mov	x3, #0x3ffe                	// #16382
    3558:	ubfx	x4, x0, #0, #48
    355c:	cmp	x19, x3
    3560:	b.gt	3588 <__fixtfdi+0x50>
    3564:	cbnz	x19, 3628 <__fixtfdi+0xf0>
    3568:	orr	x2, x4, x2
    356c:	cbz	x2, 3578 <__fixtfdi+0x40>
    3570:	mov	w0, #0x10                  	// #16
    3574:	bl	3670 <__sfp_handle_exceptions>
    3578:	mov	x0, x19
    357c:	ldr	x19, [sp, #16]
    3580:	ldp	x29, x30, [sp], #48
    3584:	ret
    3588:	lsr	x1, x0, #63
    358c:	and	w3, w1, #0xff
    3590:	mov	x1, #0x403d                	// #16445
    3594:	cmp	x19, x1
    3598:	b.le	35d0 <__fixtfdi+0x98>
    359c:	mov	x0, #0x403e                	// #16446
    35a0:	and	x5, x3, #0xff
    35a4:	cmp	x19, x0
    35a8:	mov	x0, #0x7fffffffffffffff    	// #9223372036854775807
    35ac:	csel	w1, w3, wzr, eq  // eq = none
    35b0:	add	x19, x5, x0
    35b4:	cbz	w1, 3638 <__fixtfdi+0x100>
    35b8:	extr	x4, x4, x2, #49
    35bc:	cbnz	x4, 3638 <__fixtfdi+0x100>
    35c0:	cmp	xzr, x2, lsl #15
    35c4:	b.eq	3578 <__fixtfdi+0x40>  // b.none
    35c8:	mov	w0, #0x10                  	// #16
    35cc:	b	3574 <__fixtfdi+0x3c>
    35d0:	mov	x5, #0x406f                	// #16495
    35d4:	sub	x1, x5, x19
    35d8:	mov	x0, x19
    35dc:	cmp	x1, #0x3f
    35e0:	orr	x19, x4, #0x1000000000000
    35e4:	b.le	3644 <__fixtfdi+0x10c>
    35e8:	mov	w4, #0xffffc011            	// #-16367
    35ec:	add	w4, w0, w4
    35f0:	cmp	x1, #0x40
    35f4:	mov	w1, #0x402f                	// #16431
    35f8:	sub	w0, w1, w0
    35fc:	lsl	x1, x19, x4
    3600:	orr	x1, x2, x1
    3604:	csel	x2, x1, x2, ne  // ne = any
    3608:	lsr	x19, x19, x0
    360c:	cmp	x2, #0x0
    3610:	cset	w0, ne  // ne = any
    3614:	cmp	w3, #0x0
    3618:	cneg	x19, x19, ne  // ne = any
    361c:	cbz	w0, 3578 <__fixtfdi+0x40>
    3620:	mov	w0, #0x10                  	// #16
    3624:	b	3574 <__fixtfdi+0x3c>
    3628:	mov	x19, #0x0                   	// #0
    362c:	mov	w0, #0x10                  	// #16
    3630:	bl	3670 <__sfp_handle_exceptions>
    3634:	b	3578 <__fixtfdi+0x40>
    3638:	mov	w0, #0x1                   	// #1
    363c:	bl	3670 <__sfp_handle_exceptions>
    3640:	b	3578 <__fixtfdi+0x40>
    3644:	mov	w6, #0xffffbfd1            	// #-16431
    3648:	add	w4, w0, w6
    364c:	sub	w0, w5, w0
    3650:	lsl	x1, x2, x4
    3654:	cmp	x1, #0x0
    3658:	lsr	x2, x2, x0
    365c:	cset	w0, ne  // ne = any
    3660:	lsl	x19, x19, x4
    3664:	orr	x19, x2, x19
    3668:	b	3614 <__fixtfdi+0xdc>
    366c:	nop

0000000000003670 <__sfp_handle_exceptions>:
    3670:	tbz	w0, #0, 3680 <__sfp_handle_exceptions+0x10>
    3674:	movi	v1.2s, #0x0
    3678:	fdiv	s0, s1, s1
    367c:	mrs	x1, fpsr
    3680:	tbz	w0, #1, 3694 <__sfp_handle_exceptions+0x24>
    3684:	fmov	s1, #1.000000000000000000e+00
    3688:	movi	v2.2s, #0x0
    368c:	fdiv	s0, s1, s2
    3690:	mrs	x1, fpsr
    3694:	tbz	w0, #2, 36b4 <__sfp_handle_exceptions+0x44>
    3698:	mov	w2, #0xc5ae                	// #50606
    369c:	mov	w1, #0x7f7fffff            	// #2139095039
    36a0:	movk	w2, #0x749d, lsl #16
    36a4:	fmov	s1, w1
    36a8:	fmov	s2, w2
    36ac:	fadd	s0, s1, s2
    36b0:	mrs	x1, fpsr
    36b4:	tbz	w0, #3, 36c4 <__sfp_handle_exceptions+0x54>
    36b8:	movi	v1.2s, #0x80, lsl #16
    36bc:	fmul	s0, s1, s1
    36c0:	mrs	x1, fpsr
    36c4:	tbz	w0, #4, 36dc <__sfp_handle_exceptions+0x6c>
    36c8:	mov	w0, #0x7f7fffff            	// #2139095039
    36cc:	fmov	s2, #1.000000000000000000e+00
    36d0:	fmov	s1, w0
    36d4:	fsub	s0, s1, s2
    36d8:	mrs	x0, fpsr
    36dc:	ret

Disassembly of section .fini:

00000000000036e0 <_fini>:
    36e0:	stp	x29, x30, [sp, #-16]!
    36e4:	mov	x29, sp
    36e8:	ldp	x29, x30, [sp], #16
    36ec:	ret
