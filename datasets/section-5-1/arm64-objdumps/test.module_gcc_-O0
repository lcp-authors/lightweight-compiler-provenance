
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//test.module_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <grub_isdigit>:
       0:	sub	sp, sp, #0x10
       4:	str	w0, [sp, #12]
       8:	ldr	w0, [sp, #12]
       c:	cmp	w0, #0x2f
      10:	b.le	28 <grub_isdigit+0x28>
      14:	ldr	w0, [sp, #12]
      18:	cmp	w0, #0x39
      1c:	b.gt	28 <grub_isdigit+0x28>
      20:	mov	w0, #0x1                   	// #1
      24:	b	2c <grub_isdigit+0x2c>
      28:	mov	w0, #0x0                   	// #0
      2c:	add	sp, sp, #0x10
      30:	ret

0000000000000034 <grub_tolower>:
      34:	sub	sp, sp, #0x10
      38:	str	w0, [sp, #12]
      3c:	ldr	w0, [sp, #12]
      40:	cmp	w0, #0x40
      44:	b.le	60 <grub_tolower+0x2c>
      48:	ldr	w0, [sp, #12]
      4c:	cmp	w0, #0x5a
      50:	b.gt	60 <grub_tolower+0x2c>
      54:	ldr	w0, [sp, #12]
      58:	add	w0, w0, #0x20
      5c:	b	64 <grub_tolower+0x30>
      60:	ldr	w0, [sp, #12]
      64:	add	sp, sp, #0x10
      68:	ret

000000000000006c <grub_strcasecmp>:
      6c:	stp	x29, x30, [sp, #-48]!
      70:	mov	x29, sp
      74:	str	x19, [sp, #16]
      78:	str	x0, [sp, #40]
      7c:	str	x1, [sp, #32]
      80:	b	c0 <grub_strcasecmp+0x54>
      84:	ldr	x0, [sp, #40]
      88:	ldrb	w0, [x0]
      8c:	bl	34 <grub_tolower>
      90:	mov	w19, w0
      94:	ldr	x0, [sp, #32]
      98:	ldrb	w0, [x0]
      9c:	bl	34 <grub_tolower>
      a0:	cmp	w19, w0
      a4:	b.ne	e4 <grub_strcasecmp+0x78>  // b.any
      a8:	ldr	x0, [sp, #40]
      ac:	add	x0, x0, #0x1
      b0:	str	x0, [sp, #40]
      b4:	ldr	x0, [sp, #32]
      b8:	add	x0, x0, #0x1
      bc:	str	x0, [sp, #32]
      c0:	ldr	x0, [sp, #40]
      c4:	ldrb	w0, [x0]
      c8:	cmp	w0, #0x0
      cc:	b.eq	e8 <grub_strcasecmp+0x7c>  // b.none
      d0:	ldr	x0, [sp, #32]
      d4:	ldrb	w0, [x0]
      d8:	cmp	w0, #0x0
      dc:	b.ne	84 <grub_strcasecmp+0x18>  // b.any
      e0:	b	e8 <grub_strcasecmp+0x7c>
      e4:	nop
      e8:	ldr	x0, [sp, #40]
      ec:	ldrb	w0, [x0]
      f0:	bl	34 <grub_tolower>
      f4:	mov	w19, w0
      f8:	ldr	x0, [sp, #32]
      fc:	ldrb	w0, [x0]
     100:	bl	34 <grub_tolower>
     104:	sub	w0, w19, w0
     108:	ldr	x19, [sp, #16]
     10c:	ldp	x29, x30, [sp], #48
     110:	ret

0000000000000114 <grub_file_size>:
     114:	sub	sp, sp, #0x10
     118:	str	x0, [sp, #8]
     11c:	ldr	x0, [sp, #8]
     120:	ldr	x0, [x0, #64]
     124:	add	sp, sp, #0x10
     128:	ret

000000000000012c <grub_register_command>:
     12c:	stp	x29, x30, [sp, #-48]!
     130:	mov	x29, sp
     134:	str	x0, [sp, #40]
     138:	str	x1, [sp, #32]
     13c:	str	x2, [sp, #24]
     140:	str	x3, [sp, #16]
     144:	mov	w4, #0x0                   	// #0
     148:	ldr	x3, [sp, #16]
     14c:	ldr	x2, [sp, #24]
     150:	ldr	x1, [sp, #32]
     154:	ldr	x0, [sp, #40]
     158:	bl	0 <grub_register_command_prio>
     15c:	ldp	x29, x30, [sp], #48
     160:	ret

0000000000000164 <grub_strtosl>:
     164:	stp	x29, x30, [sp, #-48]!
     168:	mov	x29, sp
     16c:	str	x0, [sp, #40]
     170:	str	x1, [sp, #32]
     174:	str	w2, [sp, #28]
     178:	ldr	x0, [sp, #40]
     17c:	ldrb	w0, [x0]
     180:	cmp	w0, #0x2d
     184:	b.ne	1a4 <grub_strtosl+0x40>  // b.any
     188:	ldr	x0, [sp, #40]
     18c:	add	x0, x0, #0x1
     190:	ldr	w2, [sp, #28]
     194:	ldr	x1, [sp, #32]
     198:	bl	0 <grub_strtoul>
     19c:	neg	w0, w0
     1a0:	b	1b4 <grub_strtosl+0x50>
     1a4:	ldr	w2, [sp, #28]
     1a8:	ldr	x1, [sp, #32]
     1ac:	ldr	x0, [sp, #40]
     1b0:	bl	0 <grub_strtoul>
     1b4:	ldp	x29, x30, [sp], #48
     1b8:	ret

00000000000001bc <update_val>:
     1bc:	sub	sp, sp, #0x10
     1c0:	str	w0, [sp, #12]
     1c4:	str	x1, [sp]
     1c8:	ldr	x0, [sp]
     1cc:	ldr	w0, [x0, #8]
     1d0:	cmp	w0, #0x0
     1d4:	b.eq	20c <update_val+0x50>  // b.none
     1d8:	ldr	x0, [sp]
     1dc:	ldr	w0, [x0]
     1e0:	cmp	w0, #0x0
     1e4:	b.eq	1f8 <update_val+0x3c>  // b.none
     1e8:	ldr	w0, [sp, #12]
     1ec:	cmp	w0, #0x0
     1f0:	b.eq	204 <update_val+0x48>  // b.none
     1f4:	b	20c <update_val+0x50>
     1f8:	ldr	w0, [sp, #12]
     1fc:	cmp	w0, #0x0
     200:	b.eq	20c <update_val+0x50>  // b.none
     204:	mov	w0, #0x1                   	// #1
     208:	b	210 <update_val+0x54>
     20c:	mov	w0, #0x0                   	// #0
     210:	ldr	x1, [sp]
     214:	str	w0, [x1, #8]
     218:	ldr	x0, [sp]
     21c:	str	wzr, [x0]
     220:	nop
     224:	add	sp, sp, #0x10
     228:	ret

000000000000022c <find_file>:
     22c:	stp	x29, x30, [sp, #-64]!
     230:	mov	x29, sp
     234:	str	x0, [sp, #40]
     238:	str	x1, [sp, #32]
     23c:	str	x2, [sp, #24]
     240:	ldr	x0, [sp, #24]
     244:	str	x0, [sp, #56]
     248:	ldr	x0, [sp, #32]
     24c:	ldrb	w0, [x0]
     250:	and	w0, w0, #0x4
     254:	and	w0, w0, #0xff
     258:	cmp	w0, #0x0
     25c:	b.eq	284 <find_file+0x58>  // b.none
     260:	ldr	x0, [sp, #56]
     264:	ldr	x0, [x0, #32]
     268:	mov	x1, x0
     26c:	ldr	x0, [sp, #40]
     270:	bl	6c <grub_strcasecmp>
     274:	cmp	w0, #0x0
     278:	cset	w0, eq  // eq = none
     27c:	and	w0, w0, #0xff
     280:	b	2a4 <find_file+0x78>
     284:	ldr	x0, [sp, #56]
     288:	ldr	x0, [x0, #32]
     28c:	mov	x1, x0
     290:	ldr	x0, [sp, #40]
     294:	bl	0 <grub_strcmp>
     298:	cmp	w0, #0x0
     29c:	cset	w0, eq  // eq = none
     2a0:	and	w0, w0, #0xff
     2a4:	cmp	w0, #0x0
     2a8:	b.eq	2d0 <find_file+0xa4>  // b.none
     2ac:	ldr	x2, [sp, #56]
     2b0:	ldr	x0, [sp, #32]
     2b4:	ldp	x0, x1, [x0]
     2b8:	stp	x0, x1, [x2, #16]
     2bc:	ldr	x0, [sp, #56]
     2c0:	mov	w1, #0x1                   	// #1
     2c4:	str	w1, [x0, #12]
     2c8:	mov	w0, #0x1                   	// #1
     2cc:	b	2d4 <find_file+0xa8>
     2d0:	mov	w0, #0x0                   	// #0
     2d4:	ldp	x29, x30, [sp], #64
     2d8:	ret

00000000000002dc <get_fileinfo>:
     2dc:	stp	x29, x30, [sp, #-64]!
     2e0:	mov	x29, sp
     2e4:	str	x0, [sp, #24]
     2e8:	str	x1, [sp, #16]
     2ec:	ldr	x0, [sp, #16]
     2f0:	str	wzr, [x0, #12]
     2f4:	ldr	x0, [sp, #24]
     2f8:	bl	0 <grub_file_get_device_name>
     2fc:	str	x0, [sp, #48]
     300:	ldr	x0, [sp, #48]
     304:	bl	0 <grub_device_open>
     308:	str	x0, [sp, #40]
     30c:	ldr	x0, [sp, #40]
     310:	cmp	x0, #0x0
     314:	b.ne	324 <get_fileinfo+0x48>  // b.any
     318:	ldr	x0, [sp, #48]
     31c:	bl	0 <grub_free>
     320:	b	540 <get_fileinfo+0x264>
     324:	ldr	x0, [sp, #40]
     328:	bl	0 <grub_fs_probe>
     32c:	str	x0, [sp, #32]
     330:	ldr	x0, [sp, #32]
     334:	cmp	x0, #0x0
     338:	b.ne	350 <get_fileinfo+0x74>  // b.any
     33c:	ldr	x0, [sp, #48]
     340:	bl	0 <grub_free>
     344:	ldr	x0, [sp, #40]
     348:	bl	0 <grub_device_close>
     34c:	b	540 <get_fileinfo+0x264>
     350:	mov	w1, #0x29                  	// #41
     354:	ldr	x0, [sp, #24]
     358:	bl	0 <grub_strchr>
     35c:	str	x0, [sp, #56]
     360:	ldr	x0, [sp, #56]
     364:	cmp	x0, #0x0
     368:	b.ne	378 <get_fileinfo+0x9c>  // b.any
     36c:	ldr	x0, [sp, #24]
     370:	str	x0, [sp, #56]
     374:	b	3a0 <get_fileinfo+0xc4>
     378:	ldr	x0, [sp, #56]
     37c:	add	x0, x0, #0x1
     380:	str	x0, [sp, #56]
     384:	b	3a0 <get_fileinfo+0xc4>
     388:	ldr	x0, [sp, #56]
     38c:	bl	0 <grub_strlen>
     390:	sub	x0, x0, #0x1
     394:	ldr	x1, [sp, #56]
     398:	add	x0, x1, x0
     39c:	strb	wzr, [x0]
     3a0:	ldr	x0, [sp, #56]
     3a4:	ldrb	w0, [x0]
     3a8:	cmp	w0, #0x0
     3ac:	b.eq	3d0 <get_fileinfo+0xf4>  // b.none
     3b0:	ldr	x0, [sp, #56]
     3b4:	bl	0 <grub_strlen>
     3b8:	sub	x0, x0, #0x1
     3bc:	ldr	x1, [sp, #56]
     3c0:	add	x0, x1, x0
     3c4:	ldrb	w0, [x0]
     3c8:	cmp	w0, #0x2f
     3cc:	b.eq	388 <get_fileinfo+0xac>  // b.none
     3d0:	mov	w1, #0x2f                  	// #47
     3d4:	ldr	x0, [sp, #56]
     3d8:	bl	0 <grub_strrchr>
     3dc:	mov	x1, x0
     3e0:	ldr	x0, [sp, #16]
     3e4:	str	x1, [x0, #32]
     3e8:	ldr	x0, [sp, #16]
     3ec:	ldr	x0, [x0, #32]
     3f0:	cmp	x0, #0x0
     3f4:	b.ne	41c <get_fileinfo+0x140>  // b.any
     3f8:	adrp	x0, 0 <grub_isdigit>
     3fc:	add	x0, x0, #0x0
     400:	ldr	x0, [x0]
     404:	bl	0 <grub_strdup>
     408:	str	x0, [sp, #24]
     40c:	ldr	x0, [sp, #16]
     410:	ldr	x1, [sp, #56]
     414:	str	x1, [x0, #32]
     418:	b	45c <get_fileinfo+0x180>
     41c:	ldr	x0, [sp, #16]
     420:	ldr	x0, [x0, #32]
     424:	add	x1, x0, #0x1
     428:	ldr	x0, [sp, #16]
     42c:	str	x1, [x0, #32]
     430:	ldr	x0, [sp, #56]
     434:	bl	0 <grub_strdup>
     438:	str	x0, [sp, #24]
     43c:	ldr	x0, [sp, #16]
     440:	ldr	x1, [x0, #32]
     444:	ldr	x0, [sp, #56]
     448:	sub	x0, x1, x0
     44c:	mov	x1, x0
     450:	ldr	x0, [sp, #24]
     454:	add	x0, x0, x1
     458:	strb	wzr, [x0]
     45c:	ldr	x0, [sp, #56]
     460:	ldrb	w0, [x0]
     464:	cmp	w0, #0x0
     468:	b.ne	504 <get_fileinfo+0x228>  // b.any
     46c:	ldr	x0, [sp, #16]
     470:	mov	w1, #0x1                   	// #1
     474:	str	w1, [x0, #12]
     478:	ldr	x0, [sp, #16]
     47c:	add	x0, x0, #0x10
     480:	mov	x2, #0x10                  	// #16
     484:	mov	w1, #0x0                   	// #0
     488:	bl	0 <grub_memset>
     48c:	ldr	x0, [sp, #16]
     490:	ldrb	w1, [x0, #16]
     494:	orr	w1, w1, #0x1
     498:	strb	w1, [x0, #16]
     49c:	ldr	x0, [sp, #16]
     4a0:	ldrb	w1, [x0, #16]
     4a4:	and	w1, w1, #0xfffffffd
     4a8:	strb	w1, [x0, #16]
     4ac:	ldr	x0, [sp, #32]
     4b0:	ldr	x0, [x0, #72]
     4b4:	cmp	x0, #0x0
     4b8:	b.eq	528 <get_fileinfo+0x24c>  // b.none
     4bc:	ldr	x0, [sp, #32]
     4c0:	ldr	x2, [x0, #72]
     4c4:	ldr	x0, [sp, #16]
     4c8:	add	x0, x0, #0x14
     4cc:	mov	x1, x0
     4d0:	ldr	x0, [sp, #40]
     4d4:	blr	x2
     4d8:	cmp	w0, #0x0
     4dc:	b.ne	4f0 <get_fileinfo+0x214>  // b.any
     4e0:	ldr	x0, [sp, #16]
     4e4:	ldrb	w1, [x0, #16]
     4e8:	orr	w1, w1, #0x2
     4ec:	strb	w1, [x0, #16]
     4f0:	adrp	x0, 0 <grub_isdigit>
     4f4:	add	x0, x0, #0x0
     4f8:	ldr	x0, [x0]
     4fc:	str	wzr, [x0]
     500:	b	528 <get_fileinfo+0x24c>
     504:	ldr	x0, [sp, #32]
     508:	ldr	x4, [x0, #24]
     50c:	ldr	x3, [sp, #16]
     510:	adrp	x0, 0 <grub_isdigit>
     514:	add	x0, x0, #0x0
     518:	ldr	x2, [x0]
     51c:	ldr	x1, [sp, #24]
     520:	ldr	x0, [sp, #40]
     524:	blr	x4
     528:	ldr	x0, [sp, #40]
     52c:	bl	0 <grub_device_close>
     530:	ldr	x0, [sp, #24]
     534:	bl	0 <grub_free>
     538:	ldr	x0, [sp, #48]
     53c:	bl	0 <grub_free>
     540:	ldp	x29, x30, [sp], #64
     544:	ret
	...

0000000000000560 <test_parse>:
     560:	stp	x29, x30, [sp, #-144]!
     564:	mov	x29, sp
     568:	str	x19, [sp, #16]
     56c:	str	x0, [sp, #56]
     570:	str	x1, [sp, #48]
     574:	str	w2, [sp, #44]
     578:	stp	xzr, xzr, [sp, #80]
     57c:	stp	xzr, xzr, [sp, #96]
     580:	str	xzr, [sp, #112]
     584:	mov	w0, #0x1                   	// #1
     588:	str	w0, [sp, #88]
     58c:	b	1ab8 <test_parse+0x1558>
     590:	ldr	x0, [sp, #48]
     594:	ldr	w0, [x0]
     598:	add	w0, w0, #0x2
     59c:	ldr	w1, [sp, #44]
     5a0:	cmp	w1, w0
     5a4:	b.le	1470 <test_parse+0xf10>
     5a8:	ldr	x0, [sp, #48]
     5ac:	ldr	w0, [x0]
     5b0:	sxtw	x0, w0
     5b4:	add	x0, x0, #0x1
     5b8:	lsl	x0, x0, #3
     5bc:	ldr	x1, [sp, #56]
     5c0:	add	x0, x1, x0
     5c4:	ldr	x2, [x0]
     5c8:	adrp	x0, 0 <grub_isdigit>
     5cc:	add	x0, x0, #0x0
     5d0:	ldr	x1, [x0]
     5d4:	mov	x0, x2
     5d8:	bl	0 <grub_strcmp>
     5dc:	cmp	w0, #0x0
     5e0:	b.eq	620 <test_parse+0xc0>  // b.none
     5e4:	ldr	x0, [sp, #48]
     5e8:	ldr	w0, [x0]
     5ec:	sxtw	x0, w0
     5f0:	add	x0, x0, #0x1
     5f4:	lsl	x0, x0, #3
     5f8:	ldr	x1, [sp, #56]
     5fc:	add	x0, x1, x0
     600:	ldr	x2, [x0]
     604:	adrp	x0, 0 <grub_isdigit>
     608:	add	x0, x0, #0x0
     60c:	ldr	x1, [x0]
     610:	mov	x0, x2
     614:	bl	0 <grub_strcmp>
     618:	cmp	w0, #0x0
     61c:	b.ne	6a0 <test_parse+0x140>  // b.any
     620:	ldr	x0, [sp, #48]
     624:	ldr	w0, [x0]
     628:	sxtw	x0, w0
     62c:	lsl	x0, x0, #3
     630:	ldr	x1, [sp, #56]
     634:	add	x0, x1, x0
     638:	ldr	x2, [x0]
     63c:	ldr	x0, [sp, #48]
     640:	ldr	w0, [x0]
     644:	sxtw	x0, w0
     648:	add	x0, x0, #0x2
     64c:	lsl	x0, x0, #3
     650:	ldr	x1, [sp, #56]
     654:	add	x0, x1, x0
     658:	ldr	x0, [x0]
     65c:	mov	x1, x0
     660:	mov	x0, x2
     664:	bl	0 <grub_strcmp>
     668:	cmp	w0, #0x0
     66c:	cset	w0, eq  // eq = none
     670:	and	w0, w0, #0xff
     674:	mov	w2, w0
     678:	add	x0, sp, #0x50
     67c:	mov	x1, x0
     680:	mov	w0, w2
     684:	bl	1bc <update_val>
     688:	ldr	x0, [sp, #48]
     68c:	ldr	w0, [x0]
     690:	add	w1, w0, #0x3
     694:	ldr	x0, [sp, #48]
     698:	str	w1, [x0]
     69c:	b	1ab8 <test_parse+0x1558>
     6a0:	ldr	x0, [sp, #48]
     6a4:	ldr	w0, [x0]
     6a8:	sxtw	x0, w0
     6ac:	add	x0, x0, #0x1
     6b0:	lsl	x0, x0, #3
     6b4:	ldr	x1, [sp, #56]
     6b8:	add	x0, x1, x0
     6bc:	ldr	x2, [x0]
     6c0:	adrp	x0, 0 <grub_isdigit>
     6c4:	add	x0, x0, #0x0
     6c8:	ldr	x1, [x0]
     6cc:	mov	x0, x2
     6d0:	bl	0 <grub_strcmp>
     6d4:	cmp	w0, #0x0
     6d8:	b.ne	75c <test_parse+0x1fc>  // b.any
     6dc:	ldr	x0, [sp, #48]
     6e0:	ldr	w0, [x0]
     6e4:	sxtw	x0, w0
     6e8:	lsl	x0, x0, #3
     6ec:	ldr	x1, [sp, #56]
     6f0:	add	x0, x1, x0
     6f4:	ldr	x2, [x0]
     6f8:	ldr	x0, [sp, #48]
     6fc:	ldr	w0, [x0]
     700:	sxtw	x0, w0
     704:	add	x0, x0, #0x2
     708:	lsl	x0, x0, #3
     70c:	ldr	x1, [sp, #56]
     710:	add	x0, x1, x0
     714:	ldr	x0, [x0]
     718:	mov	x1, x0
     71c:	mov	x0, x2
     720:	bl	0 <grub_strcmp>
     724:	cmp	w0, #0x0
     728:	cset	w0, ne  // ne = any
     72c:	and	w0, w0, #0xff
     730:	mov	w2, w0
     734:	add	x0, sp, #0x50
     738:	mov	x1, x0
     73c:	mov	w0, w2
     740:	bl	1bc <update_val>
     744:	ldr	x0, [sp, #48]
     748:	ldr	w0, [x0]
     74c:	add	w1, w0, #0x3
     750:	ldr	x0, [sp, #48]
     754:	str	w1, [x0]
     758:	b	1ab8 <test_parse+0x1558>
     75c:	ldr	x0, [sp, #48]
     760:	ldr	w0, [x0]
     764:	sxtw	x0, w0
     768:	add	x0, x0, #0x1
     76c:	lsl	x0, x0, #3
     770:	ldr	x1, [sp, #56]
     774:	add	x0, x1, x0
     778:	ldr	x2, [x0]
     77c:	adrp	x0, 0 <grub_isdigit>
     780:	add	x0, x0, #0x0
     784:	ldr	x1, [x0]
     788:	mov	x0, x2
     78c:	bl	0 <grub_strcmp>
     790:	cmp	w0, #0x0
     794:	b.ne	814 <test_parse+0x2b4>  // b.any
     798:	ldr	x0, [sp, #48]
     79c:	ldr	w0, [x0]
     7a0:	sxtw	x0, w0
     7a4:	lsl	x0, x0, #3
     7a8:	ldr	x1, [sp, #56]
     7ac:	add	x0, x1, x0
     7b0:	ldr	x2, [x0]
     7b4:	ldr	x0, [sp, #48]
     7b8:	ldr	w0, [x0]
     7bc:	sxtw	x0, w0
     7c0:	add	x0, x0, #0x2
     7c4:	lsl	x0, x0, #3
     7c8:	ldr	x1, [sp, #56]
     7cc:	add	x0, x1, x0
     7d0:	ldr	x0, [x0]
     7d4:	mov	x1, x0
     7d8:	mov	x0, x2
     7dc:	bl	0 <grub_strcmp>
     7e0:	lsr	w0, w0, #31
     7e4:	and	w0, w0, #0xff
     7e8:	mov	w2, w0
     7ec:	add	x0, sp, #0x50
     7f0:	mov	x1, x0
     7f4:	mov	w0, w2
     7f8:	bl	1bc <update_val>
     7fc:	ldr	x0, [sp, #48]
     800:	ldr	w0, [x0]
     804:	add	w1, w0, #0x3
     808:	ldr	x0, [sp, #48]
     80c:	str	w1, [x0]
     810:	b	1ab8 <test_parse+0x1558>
     814:	ldr	x0, [sp, #48]
     818:	ldr	w0, [x0]
     81c:	sxtw	x0, w0
     820:	add	x0, x0, #0x1
     824:	lsl	x0, x0, #3
     828:	ldr	x1, [sp, #56]
     82c:	add	x0, x1, x0
     830:	ldr	x2, [x0]
     834:	adrp	x0, 0 <grub_isdigit>
     838:	add	x0, x0, #0x0
     83c:	ldr	x1, [x0]
     840:	mov	x0, x2
     844:	bl	0 <grub_strcmp>
     848:	cmp	w0, #0x0
     84c:	b.ne	8d0 <test_parse+0x370>  // b.any
     850:	ldr	x0, [sp, #48]
     854:	ldr	w0, [x0]
     858:	sxtw	x0, w0
     85c:	lsl	x0, x0, #3
     860:	ldr	x1, [sp, #56]
     864:	add	x0, x1, x0
     868:	ldr	x2, [x0]
     86c:	ldr	x0, [sp, #48]
     870:	ldr	w0, [x0]
     874:	sxtw	x0, w0
     878:	add	x0, x0, #0x2
     87c:	lsl	x0, x0, #3
     880:	ldr	x1, [sp, #56]
     884:	add	x0, x1, x0
     888:	ldr	x0, [x0]
     88c:	mov	x1, x0
     890:	mov	x0, x2
     894:	bl	0 <grub_strcmp>
     898:	cmp	w0, #0x0
     89c:	cset	w0, le
     8a0:	and	w0, w0, #0xff
     8a4:	mov	w2, w0
     8a8:	add	x0, sp, #0x50
     8ac:	mov	x1, x0
     8b0:	mov	w0, w2
     8b4:	bl	1bc <update_val>
     8b8:	ldr	x0, [sp, #48]
     8bc:	ldr	w0, [x0]
     8c0:	add	w1, w0, #0x3
     8c4:	ldr	x0, [sp, #48]
     8c8:	str	w1, [x0]
     8cc:	b	1ab8 <test_parse+0x1558>
     8d0:	ldr	x0, [sp, #48]
     8d4:	ldr	w0, [x0]
     8d8:	sxtw	x0, w0
     8dc:	add	x0, x0, #0x1
     8e0:	lsl	x0, x0, #3
     8e4:	ldr	x1, [sp, #56]
     8e8:	add	x0, x1, x0
     8ec:	ldr	x2, [x0]
     8f0:	adrp	x0, 0 <grub_isdigit>
     8f4:	add	x0, x0, #0x0
     8f8:	ldr	x1, [x0]
     8fc:	mov	x0, x2
     900:	bl	0 <grub_strcmp>
     904:	cmp	w0, #0x0
     908:	b.ne	98c <test_parse+0x42c>  // b.any
     90c:	ldr	x0, [sp, #48]
     910:	ldr	w0, [x0]
     914:	sxtw	x0, w0
     918:	lsl	x0, x0, #3
     91c:	ldr	x1, [sp, #56]
     920:	add	x0, x1, x0
     924:	ldr	x2, [x0]
     928:	ldr	x0, [sp, #48]
     92c:	ldr	w0, [x0]
     930:	sxtw	x0, w0
     934:	add	x0, x0, #0x2
     938:	lsl	x0, x0, #3
     93c:	ldr	x1, [sp, #56]
     940:	add	x0, x1, x0
     944:	ldr	x0, [x0]
     948:	mov	x1, x0
     94c:	mov	x0, x2
     950:	bl	0 <grub_strcmp>
     954:	cmp	w0, #0x0
     958:	cset	w0, gt
     95c:	and	w0, w0, #0xff
     960:	mov	w2, w0
     964:	add	x0, sp, #0x50
     968:	mov	x1, x0
     96c:	mov	w0, w2
     970:	bl	1bc <update_val>
     974:	ldr	x0, [sp, #48]
     978:	ldr	w0, [x0]
     97c:	add	w1, w0, #0x3
     980:	ldr	x0, [sp, #48]
     984:	str	w1, [x0]
     988:	b	1ab8 <test_parse+0x1558>
     98c:	ldr	x0, [sp, #48]
     990:	ldr	w0, [x0]
     994:	sxtw	x0, w0
     998:	add	x0, x0, #0x1
     99c:	lsl	x0, x0, #3
     9a0:	ldr	x1, [sp, #56]
     9a4:	add	x0, x1, x0
     9a8:	ldr	x2, [x0]
     9ac:	adrp	x0, 0 <grub_isdigit>
     9b0:	add	x0, x0, #0x0
     9b4:	ldr	x1, [x0]
     9b8:	mov	x0, x2
     9bc:	bl	0 <grub_strcmp>
     9c0:	cmp	w0, #0x0
     9c4:	b.ne	a48 <test_parse+0x4e8>  // b.any
     9c8:	ldr	x0, [sp, #48]
     9cc:	ldr	w0, [x0]
     9d0:	sxtw	x0, w0
     9d4:	lsl	x0, x0, #3
     9d8:	ldr	x1, [sp, #56]
     9dc:	add	x0, x1, x0
     9e0:	ldr	x2, [x0]
     9e4:	ldr	x0, [sp, #48]
     9e8:	ldr	w0, [x0]
     9ec:	sxtw	x0, w0
     9f0:	add	x0, x0, #0x2
     9f4:	lsl	x0, x0, #3
     9f8:	ldr	x1, [sp, #56]
     9fc:	add	x0, x1, x0
     a00:	ldr	x0, [x0]
     a04:	mov	x1, x0
     a08:	mov	x0, x2
     a0c:	bl	0 <grub_strcmp>
     a10:	mvn	w0, w0
     a14:	lsr	w0, w0, #31
     a18:	and	w0, w0, #0xff
     a1c:	mov	w2, w0
     a20:	add	x0, sp, #0x50
     a24:	mov	x1, x0
     a28:	mov	w0, w2
     a2c:	bl	1bc <update_val>
     a30:	ldr	x0, [sp, #48]
     a34:	ldr	w0, [x0]
     a38:	add	w1, w0, #0x3
     a3c:	ldr	x0, [sp, #48]
     a40:	str	w1, [x0]
     a44:	b	1ab8 <test_parse+0x1558>
     a48:	ldr	x0, [sp, #48]
     a4c:	ldr	w0, [x0]
     a50:	sxtw	x0, w0
     a54:	add	x0, x0, #0x1
     a58:	lsl	x0, x0, #3
     a5c:	ldr	x1, [sp, #56]
     a60:	add	x0, x1, x0
     a64:	ldr	x2, [x0]
     a68:	adrp	x0, 0 <grub_isdigit>
     a6c:	add	x0, x0, #0x0
     a70:	ldr	x1, [x0]
     a74:	mov	x0, x2
     a78:	bl	0 <grub_strcmp>
     a7c:	cmp	w0, #0x0
     a80:	b.ne	b14 <test_parse+0x5b4>  // b.any
     a84:	ldr	x0, [sp, #48]
     a88:	ldr	w0, [x0]
     a8c:	sxtw	x0, w0
     a90:	lsl	x0, x0, #3
     a94:	ldr	x1, [sp, #56]
     a98:	add	x0, x1, x0
     a9c:	ldr	x0, [x0]
     aa0:	mov	w2, #0x0                   	// #0
     aa4:	mov	x1, #0x0                   	// #0
     aa8:	bl	164 <grub_strtosl>
     aac:	mov	w19, w0
     ab0:	ldr	x0, [sp, #48]
     ab4:	ldr	w0, [x0]
     ab8:	sxtw	x0, w0
     abc:	add	x0, x0, #0x2
     ac0:	lsl	x0, x0, #3
     ac4:	ldr	x1, [sp, #56]
     ac8:	add	x0, x1, x0
     acc:	ldr	x0, [x0]
     ad0:	mov	w2, #0x0                   	// #0
     ad4:	mov	x1, #0x0                   	// #0
     ad8:	bl	164 <grub_strtosl>
     adc:	cmp	w19, w0
     ae0:	cset	w0, eq  // eq = none
     ae4:	and	w0, w0, #0xff
     ae8:	mov	w2, w0
     aec:	add	x0, sp, #0x50
     af0:	mov	x1, x0
     af4:	mov	w0, w2
     af8:	bl	1bc <update_val>
     afc:	ldr	x0, [sp, #48]
     b00:	ldr	w0, [x0]
     b04:	add	w1, w0, #0x3
     b08:	ldr	x0, [sp, #48]
     b0c:	str	w1, [x0]
     b10:	b	1ab8 <test_parse+0x1558>
     b14:	ldr	x0, [sp, #48]
     b18:	ldr	w0, [x0]
     b1c:	sxtw	x0, w0
     b20:	add	x0, x0, #0x1
     b24:	lsl	x0, x0, #3
     b28:	ldr	x1, [sp, #56]
     b2c:	add	x0, x1, x0
     b30:	ldr	x2, [x0]
     b34:	adrp	x0, 0 <grub_isdigit>
     b38:	add	x0, x0, #0x0
     b3c:	ldr	x1, [x0]
     b40:	mov	x0, x2
     b44:	bl	0 <grub_strcmp>
     b48:	cmp	w0, #0x0
     b4c:	b.ne	be0 <test_parse+0x680>  // b.any
     b50:	ldr	x0, [sp, #48]
     b54:	ldr	w0, [x0]
     b58:	sxtw	x0, w0
     b5c:	lsl	x0, x0, #3
     b60:	ldr	x1, [sp, #56]
     b64:	add	x0, x1, x0
     b68:	ldr	x0, [x0]
     b6c:	mov	w2, #0x0                   	// #0
     b70:	mov	x1, #0x0                   	// #0
     b74:	bl	164 <grub_strtosl>
     b78:	mov	w19, w0
     b7c:	ldr	x0, [sp, #48]
     b80:	ldr	w0, [x0]
     b84:	sxtw	x0, w0
     b88:	add	x0, x0, #0x2
     b8c:	lsl	x0, x0, #3
     b90:	ldr	x1, [sp, #56]
     b94:	add	x0, x1, x0
     b98:	ldr	x0, [x0]
     b9c:	mov	w2, #0x0                   	// #0
     ba0:	mov	x1, #0x0                   	// #0
     ba4:	bl	164 <grub_strtosl>
     ba8:	cmp	w19, w0
     bac:	cset	w0, ge  // ge = tcont
     bb0:	and	w0, w0, #0xff
     bb4:	mov	w2, w0
     bb8:	add	x0, sp, #0x50
     bbc:	mov	x1, x0
     bc0:	mov	w0, w2
     bc4:	bl	1bc <update_val>
     bc8:	ldr	x0, [sp, #48]
     bcc:	ldr	w0, [x0]
     bd0:	add	w1, w0, #0x3
     bd4:	ldr	x0, [sp, #48]
     bd8:	str	w1, [x0]
     bdc:	b	1ab8 <test_parse+0x1558>
     be0:	ldr	x0, [sp, #48]
     be4:	ldr	w0, [x0]
     be8:	sxtw	x0, w0
     bec:	add	x0, x0, #0x1
     bf0:	lsl	x0, x0, #3
     bf4:	ldr	x1, [sp, #56]
     bf8:	add	x0, x1, x0
     bfc:	ldr	x2, [x0]
     c00:	adrp	x0, 0 <grub_isdigit>
     c04:	add	x0, x0, #0x0
     c08:	ldr	x1, [x0]
     c0c:	mov	x0, x2
     c10:	bl	0 <grub_strcmp>
     c14:	cmp	w0, #0x0
     c18:	b.ne	cac <test_parse+0x74c>  // b.any
     c1c:	ldr	x0, [sp, #48]
     c20:	ldr	w0, [x0]
     c24:	sxtw	x0, w0
     c28:	lsl	x0, x0, #3
     c2c:	ldr	x1, [sp, #56]
     c30:	add	x0, x1, x0
     c34:	ldr	x0, [x0]
     c38:	mov	w2, #0x0                   	// #0
     c3c:	mov	x1, #0x0                   	// #0
     c40:	bl	164 <grub_strtosl>
     c44:	mov	w19, w0
     c48:	ldr	x0, [sp, #48]
     c4c:	ldr	w0, [x0]
     c50:	sxtw	x0, w0
     c54:	add	x0, x0, #0x2
     c58:	lsl	x0, x0, #3
     c5c:	ldr	x1, [sp, #56]
     c60:	add	x0, x1, x0
     c64:	ldr	x0, [x0]
     c68:	mov	w2, #0x0                   	// #0
     c6c:	mov	x1, #0x0                   	// #0
     c70:	bl	164 <grub_strtosl>
     c74:	cmp	w19, w0
     c78:	cset	w0, gt
     c7c:	and	w0, w0, #0xff
     c80:	mov	w2, w0
     c84:	add	x0, sp, #0x50
     c88:	mov	x1, x0
     c8c:	mov	w0, w2
     c90:	bl	1bc <update_val>
     c94:	ldr	x0, [sp, #48]
     c98:	ldr	w0, [x0]
     c9c:	add	w1, w0, #0x3
     ca0:	ldr	x0, [sp, #48]
     ca4:	str	w1, [x0]
     ca8:	b	1ab8 <test_parse+0x1558>
     cac:	ldr	x0, [sp, #48]
     cb0:	ldr	w0, [x0]
     cb4:	sxtw	x0, w0
     cb8:	add	x0, x0, #0x1
     cbc:	lsl	x0, x0, #3
     cc0:	ldr	x1, [sp, #56]
     cc4:	add	x0, x1, x0
     cc8:	ldr	x2, [x0]
     ccc:	adrp	x0, 0 <grub_isdigit>
     cd0:	add	x0, x0, #0x0
     cd4:	ldr	x1, [x0]
     cd8:	mov	x0, x2
     cdc:	bl	0 <grub_strcmp>
     ce0:	cmp	w0, #0x0
     ce4:	b.ne	d78 <test_parse+0x818>  // b.any
     ce8:	ldr	x0, [sp, #48]
     cec:	ldr	w0, [x0]
     cf0:	sxtw	x0, w0
     cf4:	lsl	x0, x0, #3
     cf8:	ldr	x1, [sp, #56]
     cfc:	add	x0, x1, x0
     d00:	ldr	x0, [x0]
     d04:	mov	w2, #0x0                   	// #0
     d08:	mov	x1, #0x0                   	// #0
     d0c:	bl	164 <grub_strtosl>
     d10:	mov	w19, w0
     d14:	ldr	x0, [sp, #48]
     d18:	ldr	w0, [x0]
     d1c:	sxtw	x0, w0
     d20:	add	x0, x0, #0x2
     d24:	lsl	x0, x0, #3
     d28:	ldr	x1, [sp, #56]
     d2c:	add	x0, x1, x0
     d30:	ldr	x0, [x0]
     d34:	mov	w2, #0x0                   	// #0
     d38:	mov	x1, #0x0                   	// #0
     d3c:	bl	164 <grub_strtosl>
     d40:	cmp	w19, w0
     d44:	cset	w0, le
     d48:	and	w0, w0, #0xff
     d4c:	mov	w2, w0
     d50:	add	x0, sp, #0x50
     d54:	mov	x1, x0
     d58:	mov	w0, w2
     d5c:	bl	1bc <update_val>
     d60:	ldr	x0, [sp, #48]
     d64:	ldr	w0, [x0]
     d68:	add	w1, w0, #0x3
     d6c:	ldr	x0, [sp, #48]
     d70:	str	w1, [x0]
     d74:	b	1ab8 <test_parse+0x1558>
     d78:	ldr	x0, [sp, #48]
     d7c:	ldr	w0, [x0]
     d80:	sxtw	x0, w0
     d84:	add	x0, x0, #0x1
     d88:	lsl	x0, x0, #3
     d8c:	ldr	x1, [sp, #56]
     d90:	add	x0, x1, x0
     d94:	ldr	x2, [x0]
     d98:	adrp	x0, 0 <grub_isdigit>
     d9c:	add	x0, x0, #0x0
     da0:	ldr	x1, [x0]
     da4:	mov	x0, x2
     da8:	bl	0 <grub_strcmp>
     dac:	cmp	w0, #0x0
     db0:	b.ne	e44 <test_parse+0x8e4>  // b.any
     db4:	ldr	x0, [sp, #48]
     db8:	ldr	w0, [x0]
     dbc:	sxtw	x0, w0
     dc0:	lsl	x0, x0, #3
     dc4:	ldr	x1, [sp, #56]
     dc8:	add	x0, x1, x0
     dcc:	ldr	x0, [x0]
     dd0:	mov	w2, #0x0                   	// #0
     dd4:	mov	x1, #0x0                   	// #0
     dd8:	bl	164 <grub_strtosl>
     ddc:	mov	w19, w0
     de0:	ldr	x0, [sp, #48]
     de4:	ldr	w0, [x0]
     de8:	sxtw	x0, w0
     dec:	add	x0, x0, #0x2
     df0:	lsl	x0, x0, #3
     df4:	ldr	x1, [sp, #56]
     df8:	add	x0, x1, x0
     dfc:	ldr	x0, [x0]
     e00:	mov	w2, #0x0                   	// #0
     e04:	mov	x1, #0x0                   	// #0
     e08:	bl	164 <grub_strtosl>
     e0c:	cmp	w19, w0
     e10:	cset	w0, lt  // lt = tstop
     e14:	and	w0, w0, #0xff
     e18:	mov	w2, w0
     e1c:	add	x0, sp, #0x50
     e20:	mov	x1, x0
     e24:	mov	w0, w2
     e28:	bl	1bc <update_val>
     e2c:	ldr	x0, [sp, #48]
     e30:	ldr	w0, [x0]
     e34:	add	w1, w0, #0x3
     e38:	ldr	x0, [sp, #48]
     e3c:	str	w1, [x0]
     e40:	b	1ab8 <test_parse+0x1558>
     e44:	ldr	x0, [sp, #48]
     e48:	ldr	w0, [x0]
     e4c:	sxtw	x0, w0
     e50:	add	x0, x0, #0x1
     e54:	lsl	x0, x0, #3
     e58:	ldr	x1, [sp, #56]
     e5c:	add	x0, x1, x0
     e60:	ldr	x2, [x0]
     e64:	adrp	x0, 0 <grub_isdigit>
     e68:	add	x0, x0, #0x0
     e6c:	ldr	x1, [x0]
     e70:	mov	x0, x2
     e74:	bl	0 <grub_strcmp>
     e78:	cmp	w0, #0x0
     e7c:	b.ne	f10 <test_parse+0x9b0>  // b.any
     e80:	ldr	x0, [sp, #48]
     e84:	ldr	w0, [x0]
     e88:	sxtw	x0, w0
     e8c:	lsl	x0, x0, #3
     e90:	ldr	x1, [sp, #56]
     e94:	add	x0, x1, x0
     e98:	ldr	x0, [x0]
     e9c:	mov	w2, #0x0                   	// #0
     ea0:	mov	x1, #0x0                   	// #0
     ea4:	bl	164 <grub_strtosl>
     ea8:	mov	w19, w0
     eac:	ldr	x0, [sp, #48]
     eb0:	ldr	w0, [x0]
     eb4:	sxtw	x0, w0
     eb8:	add	x0, x0, #0x2
     ebc:	lsl	x0, x0, #3
     ec0:	ldr	x1, [sp, #56]
     ec4:	add	x0, x1, x0
     ec8:	ldr	x0, [x0]
     ecc:	mov	w2, #0x0                   	// #0
     ed0:	mov	x1, #0x0                   	// #0
     ed4:	bl	164 <grub_strtosl>
     ed8:	cmp	w19, w0
     edc:	cset	w0, ne  // ne = any
     ee0:	and	w0, w0, #0xff
     ee4:	mov	w2, w0
     ee8:	add	x0, sp, #0x50
     eec:	mov	x1, x0
     ef0:	mov	w0, w2
     ef4:	bl	1bc <update_val>
     ef8:	ldr	x0, [sp, #48]
     efc:	ldr	w0, [x0]
     f00:	add	w1, w0, #0x3
     f04:	ldr	x0, [sp, #48]
     f08:	str	w1, [x0]
     f0c:	b	1ab8 <test_parse+0x1558>
     f10:	ldr	x0, [sp, #48]
     f14:	ldr	w0, [x0]
     f18:	sxtw	x0, w0
     f1c:	add	x0, x0, #0x1
     f20:	lsl	x0, x0, #3
     f24:	ldr	x1, [sp, #56]
     f28:	add	x0, x1, x0
     f2c:	ldr	x2, [x0]
     f30:	adrp	x0, 0 <grub_isdigit>
     f34:	add	x0, x0, #0x0
     f38:	ldr	x1, [x0]
     f3c:	mov	x0, x2
     f40:	bl	0 <grub_strcmp>
     f44:	cmp	w0, #0x0
     f48:	b.eq	f88 <test_parse+0xa28>  // b.none
     f4c:	ldr	x0, [sp, #48]
     f50:	ldr	w0, [x0]
     f54:	sxtw	x0, w0
     f58:	add	x0, x0, #0x1
     f5c:	lsl	x0, x0, #3
     f60:	ldr	x1, [sp, #56]
     f64:	add	x0, x1, x0
     f68:	ldr	x2, [x0]
     f6c:	adrp	x0, 0 <grub_isdigit>
     f70:	add	x0, x0, #0x0
     f74:	ldr	x1, [x0]
     f78:	mov	x0, x2
     f7c:	bl	0 <grub_strcmp>
     f80:	cmp	w0, #0x0
     f84:	b.ne	11f8 <test_parse+0xc98>  // b.any
     f88:	str	wzr, [sp, #140]
     f8c:	b	f9c <test_parse+0xa3c>
     f90:	ldr	w0, [sp, #140]
     f94:	add	w0, w0, #0x1
     f98:	str	w0, [sp, #140]
     f9c:	ldr	x0, [sp, #48]
     fa0:	ldr	w0, [x0]
     fa4:	sxtw	x0, w0
     fa8:	lsl	x0, x0, #3
     fac:	ldr	x1, [sp, #56]
     fb0:	add	x0, x1, x0
     fb4:	ldr	x1, [x0]
     fb8:	ldrsw	x0, [sp, #140]
     fbc:	add	x0, x1, x0
     fc0:	ldrb	w1, [x0]
     fc4:	ldr	x0, [sp, #48]
     fc8:	ldr	w0, [x0]
     fcc:	sxtw	x0, w0
     fd0:	add	x0, x0, #0x2
     fd4:	lsl	x0, x0, #3
     fd8:	ldr	x2, [sp, #56]
     fdc:	add	x0, x2, x0
     fe0:	ldr	x2, [x0]
     fe4:	ldrsw	x0, [sp, #140]
     fe8:	add	x0, x2, x0
     fec:	ldrb	w0, [x0]
     ff0:	cmp	w1, w0
     ff4:	b.ne	1028 <test_parse+0xac8>  // b.any
     ff8:	ldr	x0, [sp, #48]
     ffc:	ldr	w0, [x0]
    1000:	sxtw	x0, w0
    1004:	lsl	x0, x0, #3
    1008:	ldr	x1, [sp, #56]
    100c:	add	x0, x1, x0
    1010:	ldr	x1, [x0]
    1014:	ldrsw	x0, [sp, #140]
    1018:	add	x0, x1, x0
    101c:	ldrb	w0, [x0]
    1020:	cmp	w0, #0x0
    1024:	b.ne	f90 <test_parse+0xa30>  // b.any
    1028:	ldr	w0, [sp, #140]
    102c:	sub	w0, w0, #0x1
    1030:	str	w0, [sp, #140]
    1034:	b	1044 <test_parse+0xae4>
    1038:	ldr	w0, [sp, #140]
    103c:	sub	w0, w0, #0x1
    1040:	str	w0, [sp, #140]
    1044:	ldr	x0, [sp, #48]
    1048:	ldr	w0, [x0]
    104c:	sxtw	x0, w0
    1050:	lsl	x0, x0, #3
    1054:	ldr	x1, [sp, #56]
    1058:	add	x0, x1, x0
    105c:	ldr	x1, [x0]
    1060:	ldrsw	x0, [sp, #140]
    1064:	add	x0, x1, x0
    1068:	ldrb	w0, [x0]
    106c:	bl	0 <grub_isdigit>
    1070:	cmp	w0, #0x0
    1074:	b.eq	1084 <test_parse+0xb24>  // b.none
    1078:	ldr	w0, [sp, #140]
    107c:	cmp	w0, #0x0
    1080:	b.gt	1038 <test_parse+0xad8>
    1084:	ldr	w0, [sp, #140]
    1088:	add	w0, w0, #0x1
    108c:	str	w0, [sp, #140]
    1090:	ldr	x0, [sp, #48]
    1094:	ldr	w0, [x0]
    1098:	sxtw	x0, w0
    109c:	add	x0, x0, #0x1
    10a0:	lsl	x0, x0, #3
    10a4:	ldr	x1, [sp, #56]
    10a8:	add	x0, x1, x0
    10ac:	ldr	x2, [x0]
    10b0:	adrp	x0, 0 <grub_isdigit>
    10b4:	add	x0, x0, #0x0
    10b8:	ldr	x1, [x0]
    10bc:	mov	x0, x2
    10c0:	bl	0 <grub_strcmp>
    10c4:	cmp	w0, #0x0
    10c8:	b.ne	1158 <test_parse+0xbf8>  // b.any
    10cc:	ldr	x0, [sp, #48]
    10d0:	ldr	w0, [x0]
    10d4:	sxtw	x0, w0
    10d8:	lsl	x0, x0, #3
    10dc:	ldr	x1, [sp, #56]
    10e0:	add	x0, x1, x0
    10e4:	ldr	x1, [x0]
    10e8:	ldrsw	x0, [sp, #140]
    10ec:	add	x0, x1, x0
    10f0:	mov	w2, #0x0                   	// #0
    10f4:	mov	x1, #0x0                   	// #0
    10f8:	bl	0 <grub_strtoul>
    10fc:	mov	x19, x0
    1100:	ldr	x0, [sp, #48]
    1104:	ldr	w0, [x0]
    1108:	sxtw	x0, w0
    110c:	add	x0, x0, #0x2
    1110:	lsl	x0, x0, #3
    1114:	ldr	x1, [sp, #56]
    1118:	add	x0, x1, x0
    111c:	ldr	x1, [x0]
    1120:	ldrsw	x0, [sp, #140]
    1124:	add	x0, x1, x0
    1128:	mov	w2, #0x0                   	// #0
    112c:	mov	x1, #0x0                   	// #0
    1130:	bl	0 <grub_strtoul>
    1134:	cmp	x19, x0
    1138:	cset	w0, hi  // hi = pmore
    113c:	and	w0, w0, #0xff
    1140:	mov	w2, w0
    1144:	add	x0, sp, #0x50
    1148:	mov	x1, x0
    114c:	mov	w0, w2
    1150:	bl	1bc <update_val>
    1154:	b	11e0 <test_parse+0xc80>
    1158:	ldr	x0, [sp, #48]
    115c:	ldr	w0, [x0]
    1160:	sxtw	x0, w0
    1164:	lsl	x0, x0, #3
    1168:	ldr	x1, [sp, #56]
    116c:	add	x0, x1, x0
    1170:	ldr	x1, [x0]
    1174:	ldrsw	x0, [sp, #140]
    1178:	add	x0, x1, x0
    117c:	mov	w2, #0x0                   	// #0
    1180:	mov	x1, #0x0                   	// #0
    1184:	bl	0 <grub_strtoul>
    1188:	mov	x19, x0
    118c:	ldr	x0, [sp, #48]
    1190:	ldr	w0, [x0]
    1194:	sxtw	x0, w0
    1198:	add	x0, x0, #0x2
    119c:	lsl	x0, x0, #3
    11a0:	ldr	x1, [sp, #56]
    11a4:	add	x0, x1, x0
    11a8:	ldr	x1, [x0]
    11ac:	ldrsw	x0, [sp, #140]
    11b0:	add	x0, x1, x0
    11b4:	mov	w2, #0x0                   	// #0
    11b8:	mov	x1, #0x0                   	// #0
    11bc:	bl	0 <grub_strtoul>
    11c0:	cmp	x19, x0
    11c4:	cset	w0, cc  // cc = lo, ul, last
    11c8:	and	w0, w0, #0xff
    11cc:	mov	w2, w0
    11d0:	add	x0, sp, #0x50
    11d4:	mov	x1, x0
    11d8:	mov	w0, w2
    11dc:	bl	1bc <update_val>
    11e0:	ldr	x0, [sp, #48]
    11e4:	ldr	w0, [x0]
    11e8:	add	w1, w0, #0x3
    11ec:	ldr	x0, [sp, #48]
    11f0:	str	w1, [x0]
    11f4:	b	1ab8 <test_parse+0x1558>
    11f8:	ldr	x0, [sp, #48]
    11fc:	ldr	w0, [x0]
    1200:	sxtw	x0, w0
    1204:	add	x0, x0, #0x1
    1208:	lsl	x0, x0, #3
    120c:	ldr	x1, [sp, #56]
    1210:	add	x0, x1, x0
    1214:	ldr	x3, [x0]
    1218:	mov	x2, #0x3                   	// #3
    121c:	adrp	x0, 0 <grub_isdigit>
    1220:	add	x0, x0, #0x0
    1224:	ldr	x1, [x0]
    1228:	mov	x0, x3
    122c:	bl	0 <grub_memcmp>
    1230:	cmp	w0, #0x0
    1234:	b.eq	1278 <test_parse+0xd18>  // b.none
    1238:	ldr	x0, [sp, #48]
    123c:	ldr	w0, [x0]
    1240:	sxtw	x0, w0
    1244:	add	x0, x0, #0x1
    1248:	lsl	x0, x0, #3
    124c:	ldr	x1, [sp, #56]
    1250:	add	x0, x1, x0
    1254:	ldr	x3, [x0]
    1258:	mov	x2, #0x3                   	// #3
    125c:	adrp	x0, 0 <grub_isdigit>
    1260:	add	x0, x0, #0x0
    1264:	ldr	x1, [x0]
    1268:	mov	x0, x3
    126c:	bl	0 <grub_memcmp>
    1270:	cmp	w0, #0x0
    1274:	b.ne	1470 <test_parse+0xf10>  // b.any
    1278:	str	wzr, [sp, #136]
    127c:	ldr	x0, [sp, #48]
    1280:	ldr	w0, [x0]
    1284:	sxtw	x0, w0
    1288:	lsl	x0, x0, #3
    128c:	ldr	x1, [sp, #56]
    1290:	add	x0, x1, x0
    1294:	ldr	x0, [x0]
    1298:	add	x1, sp, #0x50
    129c:	bl	2dc <get_fileinfo>
    12a0:	ldp	x0, x1, [sp, #96]
    12a4:	stp	x0, x1, [sp, #64]
    12a8:	ldr	w0, [sp, #92]
    12ac:	str	w0, [sp, #132]
    12b0:	ldr	x0, [sp, #48]
    12b4:	ldr	w0, [x0]
    12b8:	sxtw	x0, w0
    12bc:	add	x0, x0, #0x2
    12c0:	lsl	x0, x0, #3
    12c4:	ldr	x1, [sp, #56]
    12c8:	add	x0, x1, x0
    12cc:	ldr	x0, [x0]
    12d0:	add	x1, sp, #0x50
    12d4:	bl	2dc <get_fileinfo>
    12d8:	ldr	x0, [sp, #48]
    12dc:	ldr	w0, [x0]
    12e0:	sxtw	x0, w0
    12e4:	add	x0, x0, #0x1
    12e8:	lsl	x0, x0, #3
    12ec:	ldr	x1, [sp, #56]
    12f0:	add	x0, x1, x0
    12f4:	ldr	x0, [x0]
    12f8:	add	x0, x0, #0x3
    12fc:	ldrb	w0, [x0]
    1300:	cmp	w0, #0x0
    1304:	b.eq	133c <test_parse+0xddc>  // b.none
    1308:	ldr	x0, [sp, #48]
    130c:	ldr	w0, [x0]
    1310:	sxtw	x0, w0
    1314:	add	x0, x0, #0x1
    1318:	lsl	x0, x0, #3
    131c:	ldr	x1, [sp, #56]
    1320:	add	x0, x1, x0
    1324:	ldr	x0, [x0]
    1328:	add	x0, x0, #0x3
    132c:	mov	w2, #0x0                   	// #0
    1330:	mov	x1, #0x0                   	// #0
    1334:	bl	164 <grub_strtosl>
    1338:	str	w0, [sp, #136]
    133c:	ldr	x0, [sp, #48]
    1340:	ldr	w0, [x0]
    1344:	sxtw	x0, w0
    1348:	add	x0, x0, #0x1
    134c:	lsl	x0, x0, #3
    1350:	ldr	x1, [sp, #56]
    1354:	add	x0, x1, x0
    1358:	ldr	x3, [x0]
    135c:	mov	x2, #0x3                   	// #3
    1360:	adrp	x0, 0 <grub_isdigit>
    1364:	add	x0, x0, #0x0
    1368:	ldr	x1, [x0]
    136c:	mov	x0, x3
    1370:	bl	0 <grub_memcmp>
    1374:	cmp	w0, #0x0
    1378:	b.ne	13ec <test_parse+0xe8c>  // b.any
    137c:	ldr	w0, [sp, #132]
    1380:	cmp	w0, #0x0
    1384:	b.eq	1394 <test_parse+0xe34>  // b.none
    1388:	ldr	w0, [sp, #92]
    138c:	cmp	w0, #0x0
    1390:	b.eq	13d4 <test_parse+0xe74>  // b.none
    1394:	ldrb	w0, [sp, #64]
    1398:	and	w0, w0, #0x2
    139c:	and	w0, w0, #0xff
    13a0:	cmp	w0, #0x0
    13a4:	b.eq	13dc <test_parse+0xe7c>  // b.none
    13a8:	ldrb	w0, [sp, #96]
    13ac:	and	w0, w0, #0x2
    13b0:	and	w0, w0, #0xff
    13b4:	cmp	w0, #0x0
    13b8:	b.eq	13dc <test_parse+0xe7c>  // b.none
    13bc:	ldr	w1, [sp, #68]
    13c0:	ldr	w0, [sp, #136]
    13c4:	add	w1, w1, w0
    13c8:	ldr	w0, [sp, #100]
    13cc:	cmp	w1, w0
    13d0:	b.le	13dc <test_parse+0xe7c>
    13d4:	mov	w0, #0x1                   	// #1
    13d8:	b	13e0 <test_parse+0xe80>
    13dc:	mov	w0, #0x0                   	// #0
    13e0:	add	x1, sp, #0x50
    13e4:	bl	1bc <update_val>
    13e8:	b	1458 <test_parse+0xef8>
    13ec:	ldr	w0, [sp, #132]
    13f0:	cmp	w0, #0x0
    13f4:	b.ne	1404 <test_parse+0xea4>  // b.any
    13f8:	ldr	w0, [sp, #92]
    13fc:	cmp	w0, #0x0
    1400:	b.ne	1444 <test_parse+0xee4>  // b.any
    1404:	ldrb	w0, [sp, #64]
    1408:	and	w0, w0, #0x2
    140c:	and	w0, w0, #0xff
    1410:	cmp	w0, #0x0
    1414:	b.eq	144c <test_parse+0xeec>  // b.none
    1418:	ldrb	w0, [sp, #96]
    141c:	and	w0, w0, #0x2
    1420:	and	w0, w0, #0xff
    1424:	cmp	w0, #0x0
    1428:	b.eq	144c <test_parse+0xeec>  // b.none
    142c:	ldr	w1, [sp, #68]
    1430:	ldr	w0, [sp, #136]
    1434:	add	w1, w1, w0
    1438:	ldr	w0, [sp, #100]
    143c:	cmp	w1, w0
    1440:	b.ge	144c <test_parse+0xeec>  // b.tcont
    1444:	mov	w0, #0x1                   	// #1
    1448:	b	1450 <test_parse+0xef0>
    144c:	mov	w0, #0x0                   	// #0
    1450:	add	x1, sp, #0x50
    1454:	bl	1bc <update_val>
    1458:	ldr	x0, [sp, #48]
    145c:	ldr	w0, [x0]
    1460:	add	w1, w0, #0x3
    1464:	ldr	x0, [sp, #48]
    1468:	str	w1, [x0]
    146c:	b	1ab8 <test_parse+0x1558>
    1470:	ldr	x0, [sp, #48]
    1474:	ldr	w0, [x0]
    1478:	add	w0, w0, #0x1
    147c:	ldr	w1, [sp, #44]
    1480:	cmp	w1, w0
    1484:	b.le	1854 <test_parse+0x12f4>
    1488:	ldr	x0, [sp, #48]
    148c:	ldr	w0, [x0]
    1490:	sxtw	x0, w0
    1494:	lsl	x0, x0, #3
    1498:	ldr	x1, [sp, #56]
    149c:	add	x0, x1, x0
    14a0:	ldr	x2, [x0]
    14a4:	adrp	x0, 0 <grub_isdigit>
    14a8:	add	x0, x0, #0x0
    14ac:	ldr	x1, [x0]
    14b0:	mov	x0, x2
    14b4:	bl	0 <grub_strcmp>
    14b8:	cmp	w0, #0x0
    14bc:	b.ne	1534 <test_parse+0xfd4>  // b.any
    14c0:	ldr	x0, [sp, #48]
    14c4:	ldr	w0, [x0]
    14c8:	sxtw	x0, w0
    14cc:	add	x0, x0, #0x1
    14d0:	lsl	x0, x0, #3
    14d4:	ldr	x1, [sp, #56]
    14d8:	add	x0, x1, x0
    14dc:	ldr	x0, [x0]
    14e0:	add	x1, sp, #0x50
    14e4:	bl	2dc <get_fileinfo>
    14e8:	ldr	w0, [sp, #92]
    14ec:	cmp	w0, #0x0
    14f0:	b.eq	1510 <test_parse+0xfb0>  // b.none
    14f4:	ldrb	w0, [sp, #96]
    14f8:	and	w0, w0, #0x1
    14fc:	and	w0, w0, #0xff
    1500:	cmp	w0, #0x0
    1504:	b.eq	1510 <test_parse+0xfb0>  // b.none
    1508:	mov	w0, #0x1                   	// #1
    150c:	b	1514 <test_parse+0xfb4>
    1510:	mov	w0, #0x0                   	// #0
    1514:	add	x1, sp, #0x50
    1518:	bl	1bc <update_val>
    151c:	ldr	x0, [sp, #48]
    1520:	ldr	w0, [x0]
    1524:	add	w1, w0, #0x2
    1528:	ldr	x0, [sp, #48]
    152c:	str	w1, [x0]
    1530:	b	1ab8 <test_parse+0x1558>
    1534:	ldr	x0, [sp, #48]
    1538:	ldr	w0, [x0]
    153c:	sxtw	x0, w0
    1540:	lsl	x0, x0, #3
    1544:	ldr	x1, [sp, #56]
    1548:	add	x0, x1, x0
    154c:	ldr	x2, [x0]
    1550:	adrp	x0, 0 <grub_isdigit>
    1554:	add	x0, x0, #0x0
    1558:	ldr	x1, [x0]
    155c:	mov	x0, x2
    1560:	bl	0 <grub_strcmp>
    1564:	cmp	w0, #0x0
    1568:	b.ne	15b8 <test_parse+0x1058>  // b.any
    156c:	ldr	x0, [sp, #48]
    1570:	ldr	w0, [x0]
    1574:	sxtw	x0, w0
    1578:	add	x0, x0, #0x1
    157c:	lsl	x0, x0, #3
    1580:	ldr	x1, [sp, #56]
    1584:	add	x0, x1, x0
    1588:	ldr	x0, [x0]
    158c:	add	x1, sp, #0x50
    1590:	bl	2dc <get_fileinfo>
    1594:	ldr	w0, [sp, #92]
    1598:	add	x1, sp, #0x50
    159c:	bl	1bc <update_val>
    15a0:	ldr	x0, [sp, #48]
    15a4:	ldr	w0, [x0]
    15a8:	add	w1, w0, #0x2
    15ac:	ldr	x0, [sp, #48]
    15b0:	str	w1, [x0]
    15b4:	b	1ab8 <test_parse+0x1558>
    15b8:	ldr	x0, [sp, #48]
    15bc:	ldr	w0, [x0]
    15c0:	sxtw	x0, w0
    15c4:	lsl	x0, x0, #3
    15c8:	ldr	x1, [sp, #56]
    15cc:	add	x0, x1, x0
    15d0:	ldr	x2, [x0]
    15d4:	adrp	x0, 0 <grub_isdigit>
    15d8:	add	x0, x0, #0x0
    15dc:	ldr	x1, [x0]
    15e0:	mov	x0, x2
    15e4:	bl	0 <grub_strcmp>
    15e8:	cmp	w0, #0x0
    15ec:	b.ne	1664 <test_parse+0x1104>  // b.any
    15f0:	ldr	x0, [sp, #48]
    15f4:	ldr	w0, [x0]
    15f8:	sxtw	x0, w0
    15fc:	add	x0, x0, #0x1
    1600:	lsl	x0, x0, #3
    1604:	ldr	x1, [sp, #56]
    1608:	add	x0, x1, x0
    160c:	ldr	x0, [x0]
    1610:	add	x1, sp, #0x50
    1614:	bl	2dc <get_fileinfo>
    1618:	ldr	w0, [sp, #92]
    161c:	cmp	w0, #0x0
    1620:	b.eq	1640 <test_parse+0x10e0>  // b.none
    1624:	ldrb	w0, [sp, #96]
    1628:	and	w0, w0, #0x1
    162c:	and	w0, w0, #0xff
    1630:	cmp	w0, #0x0
    1634:	b.ne	1640 <test_parse+0x10e0>  // b.any
    1638:	mov	w0, #0x1                   	// #1
    163c:	b	1644 <test_parse+0x10e4>
    1640:	mov	w0, #0x0                   	// #0
    1644:	add	x1, sp, #0x50
    1648:	bl	1bc <update_val>
    164c:	ldr	x0, [sp, #48]
    1650:	ldr	w0, [x0]
    1654:	add	w1, w0, #0x2
    1658:	ldr	x0, [sp, #48]
    165c:	str	w1, [x0]
    1660:	b	1ab8 <test_parse+0x1558>
    1664:	ldr	x0, [sp, #48]
    1668:	ldr	w0, [x0]
    166c:	sxtw	x0, w0
    1670:	lsl	x0, x0, #3
    1674:	ldr	x1, [sp, #56]
    1678:	add	x0, x1, x0
    167c:	ldr	x2, [x0]
    1680:	adrp	x0, 0 <grub_isdigit>
    1684:	add	x0, x0, #0x0
    1688:	ldr	x1, [x0]
    168c:	mov	x0, x2
    1690:	bl	0 <grub_strcmp>
    1694:	cmp	w0, #0x0
    1698:	b.ne	1738 <test_parse+0x11d8>  // b.any
    169c:	ldr	x0, [sp, #48]
    16a0:	ldr	w0, [x0]
    16a4:	sxtw	x0, w0
    16a8:	add	x0, x0, #0x1
    16ac:	lsl	x0, x0, #3
    16b0:	ldr	x1, [sp, #56]
    16b4:	add	x0, x1, x0
    16b8:	ldr	x0, [x0]
    16bc:	mov	w1, #0x23                  	// #35
    16c0:	movk	w1, #0x2, lsl #16
    16c4:	bl	0 <grub_file_open>
    16c8:	str	x0, [sp, #120]
    16cc:	ldr	x0, [sp, #120]
    16d0:	cmp	x0, #0x0
    16d4:	b.eq	16f0 <test_parse+0x1190>  // b.none
    16d8:	ldr	x0, [sp, #120]
    16dc:	bl	114 <grub_file_size>
    16e0:	cmp	x0, #0x0
    16e4:	b.eq	16f0 <test_parse+0x1190>  // b.none
    16e8:	mov	w0, #0x1                   	// #1
    16ec:	b	16f4 <test_parse+0x1194>
    16f0:	mov	w0, #0x0                   	// #0
    16f4:	add	x1, sp, #0x50
    16f8:	bl	1bc <update_val>
    16fc:	ldr	x0, [sp, #120]
    1700:	cmp	x0, #0x0
    1704:	b.eq	1710 <test_parse+0x11b0>  // b.none
    1708:	ldr	x0, [sp, #120]
    170c:	bl	0 <grub_file_close>
    1710:	adrp	x0, 0 <grub_isdigit>
    1714:	add	x0, x0, #0x0
    1718:	ldr	x0, [x0]
    171c:	str	wzr, [x0]
    1720:	ldr	x0, [sp, #48]
    1724:	ldr	w0, [x0]
    1728:	add	w1, w0, #0x2
    172c:	ldr	x0, [sp, #48]
    1730:	str	w1, [x0]
    1734:	b	1ab8 <test_parse+0x1558>
    1738:	ldr	x0, [sp, #48]
    173c:	ldr	w0, [x0]
    1740:	sxtw	x0, w0
    1744:	lsl	x0, x0, #3
    1748:	ldr	x1, [sp, #56]
    174c:	add	x0, x1, x0
    1750:	ldr	x2, [x0]
    1754:	adrp	x0, 0 <grub_isdigit>
    1758:	add	x0, x0, #0x0
    175c:	ldr	x1, [x0]
    1760:	mov	x0, x2
    1764:	bl	0 <grub_strcmp>
    1768:	cmp	w0, #0x0
    176c:	b.ne	17c0 <test_parse+0x1260>  // b.any
    1770:	ldr	x0, [sp, #48]
    1774:	ldr	w0, [x0]
    1778:	sxtw	x0, w0
    177c:	add	x0, x0, #0x1
    1780:	lsl	x0, x0, #3
    1784:	ldr	x1, [sp, #56]
    1788:	add	x0, x1, x0
    178c:	ldr	x0, [x0]
    1790:	ldrb	w0, [x0]
    1794:	mov	w2, w0
    1798:	add	x0, sp, #0x50
    179c:	mov	x1, x0
    17a0:	mov	w0, w2
    17a4:	bl	1bc <update_val>
    17a8:	ldr	x0, [sp, #48]
    17ac:	ldr	w0, [x0]
    17b0:	add	w1, w0, #0x2
    17b4:	ldr	x0, [sp, #48]
    17b8:	str	w1, [x0]
    17bc:	b	1ab8 <test_parse+0x1558>
    17c0:	ldr	x0, [sp, #48]
    17c4:	ldr	w0, [x0]
    17c8:	sxtw	x0, w0
    17cc:	lsl	x0, x0, #3
    17d0:	ldr	x1, [sp, #56]
    17d4:	add	x0, x1, x0
    17d8:	ldr	x2, [x0]
    17dc:	adrp	x0, 0 <grub_isdigit>
    17e0:	add	x0, x0, #0x0
    17e4:	ldr	x1, [x0]
    17e8:	mov	x0, x2
    17ec:	bl	0 <grub_strcmp>
    17f0:	cmp	w0, #0x0
    17f4:	b.ne	1854 <test_parse+0x12f4>  // b.any
    17f8:	ldr	x0, [sp, #48]
    17fc:	ldr	w0, [x0]
    1800:	sxtw	x0, w0
    1804:	add	x0, x0, #0x1
    1808:	lsl	x0, x0, #3
    180c:	ldr	x1, [sp, #56]
    1810:	add	x0, x1, x0
    1814:	ldr	x0, [x0]
    1818:	ldrb	w0, [x0]
    181c:	cmp	w0, #0x0
    1820:	cset	w0, eq  // eq = none
    1824:	and	w0, w0, #0xff
    1828:	mov	w2, w0
    182c:	add	x0, sp, #0x50
    1830:	mov	x1, x0
    1834:	mov	w0, w2
    1838:	bl	1bc <update_val>
    183c:	ldr	x0, [sp, #48]
    1840:	ldr	w0, [x0]
    1844:	add	w1, w0, #0x2
    1848:	ldr	x0, [sp, #48]
    184c:	str	w1, [x0]
    1850:	b	1ab8 <test_parse+0x1558>
    1854:	ldr	x0, [sp, #48]
    1858:	ldr	w0, [x0]
    185c:	sxtw	x0, w0
    1860:	lsl	x0, x0, #3
    1864:	ldr	x1, [sp, #56]
    1868:	add	x0, x1, x0
    186c:	ldr	x2, [x0]
    1870:	adrp	x0, 0 <grub_isdigit>
    1874:	add	x0, x0, #0x0
    1878:	ldr	x1, [x0]
    187c:	mov	x0, x2
    1880:	bl	0 <grub_strcmp>
    1884:	cmp	w0, #0x0
    1888:	b.ne	18c8 <test_parse+0x1368>  // b.any
    188c:	ldr	x0, [sp, #48]
    1890:	ldr	w0, [x0]
    1894:	add	w1, w0, #0x1
    1898:	ldr	x0, [sp, #48]
    189c:	str	w1, [x0]
    18a0:	ldr	w0, [sp, #84]
    18a4:	cmp	w0, #0x0
    18a8:	b.ne	18b8 <test_parse+0x1358>  // b.any
    18ac:	ldr	w0, [sp, #88]
    18b0:	cmp	w0, #0x0
    18b4:	b.eq	18c0 <test_parse+0x1360>  // b.none
    18b8:	mov	w0, #0x1                   	// #1
    18bc:	b	1af0 <test_parse+0x1590>
    18c0:	mov	w0, #0x0                   	// #0
    18c4:	b	1af0 <test_parse+0x1590>
    18c8:	ldr	x0, [sp, #48]
    18cc:	ldr	w0, [x0]
    18d0:	sxtw	x0, w0
    18d4:	lsl	x0, x0, #3
    18d8:	ldr	x1, [sp, #56]
    18dc:	add	x0, x1, x0
    18e0:	ldr	x2, [x0]
    18e4:	adrp	x0, 0 <grub_isdigit>
    18e8:	add	x0, x0, #0x0
    18ec:	ldr	x1, [x0]
    18f0:	mov	x0, x2
    18f4:	bl	0 <grub_strcmp>
    18f8:	cmp	w0, #0x0
    18fc:	b.ne	193c <test_parse+0x13dc>  // b.any
    1900:	ldr	x0, [sp, #48]
    1904:	ldr	w0, [x0]
    1908:	add	w1, w0, #0x1
    190c:	ldr	x0, [sp, #48]
    1910:	str	w1, [x0]
    1914:	ldr	w2, [sp, #44]
    1918:	ldr	x1, [sp, #48]
    191c:	ldr	x0, [sp, #56]
    1920:	bl	560 <test_parse>
    1924:	mov	w2, w0
    1928:	add	x0, sp, #0x50
    192c:	mov	x1, x0
    1930:	mov	w0, w2
    1934:	bl	1bc <update_val>
    1938:	b	1ab8 <test_parse+0x1558>
    193c:	ldr	x0, [sp, #48]
    1940:	ldr	w0, [x0]
    1944:	sxtw	x0, w0
    1948:	lsl	x0, x0, #3
    194c:	ldr	x1, [sp, #56]
    1950:	add	x0, x1, x0
    1954:	ldr	x2, [x0]
    1958:	adrp	x0, 0 <grub_isdigit>
    195c:	add	x0, x0, #0x0
    1960:	ldr	x1, [x0]
    1964:	mov	x0, x2
    1968:	bl	0 <grub_strcmp>
    196c:	cmp	w0, #0x0
    1970:	b.ne	19a0 <test_parse+0x1440>  // b.any
    1974:	ldr	w0, [sp, #80]
    1978:	cmp	w0, #0x0
    197c:	cset	w0, eq  // eq = none
    1980:	and	w0, w0, #0xff
    1984:	str	w0, [sp, #80]
    1988:	ldr	x0, [sp, #48]
    198c:	ldr	w0, [x0]
    1990:	add	w1, w0, #0x1
    1994:	ldr	x0, [sp, #48]
    1998:	str	w1, [x0]
    199c:	b	1ab8 <test_parse+0x1558>
    19a0:	ldr	x0, [sp, #48]
    19a4:	ldr	w0, [x0]
    19a8:	sxtw	x0, w0
    19ac:	lsl	x0, x0, #3
    19b0:	ldr	x1, [sp, #56]
    19b4:	add	x0, x1, x0
    19b8:	ldr	x2, [x0]
    19bc:	adrp	x0, 0 <grub_isdigit>
    19c0:	add	x0, x0, #0x0
    19c4:	ldr	x1, [x0]
    19c8:	mov	x0, x2
    19cc:	bl	0 <grub_strcmp>
    19d0:	cmp	w0, #0x0
    19d4:	b.ne	19f0 <test_parse+0x1490>  // b.any
    19d8:	ldr	x0, [sp, #48]
    19dc:	ldr	w0, [x0]
    19e0:	add	w1, w0, #0x1
    19e4:	ldr	x0, [sp, #48]
    19e8:	str	w1, [x0]
    19ec:	b	1ab8 <test_parse+0x1558>
    19f0:	ldr	x0, [sp, #48]
    19f4:	ldr	w0, [x0]
    19f8:	sxtw	x0, w0
    19fc:	lsl	x0, x0, #3
    1a00:	ldr	x1, [sp, #56]
    1a04:	add	x0, x1, x0
    1a08:	ldr	x2, [x0]
    1a0c:	adrp	x0, 0 <grub_isdigit>
    1a10:	add	x0, x0, #0x0
    1a14:	ldr	x1, [x0]
    1a18:	mov	x0, x2
    1a1c:	bl	0 <grub_strcmp>
    1a20:	cmp	w0, #0x0
    1a24:	b.ne	1a70 <test_parse+0x1510>  // b.any
    1a28:	ldr	w0, [sp, #84]
    1a2c:	cmp	w0, #0x0
    1a30:	b.ne	1a40 <test_parse+0x14e0>  // b.any
    1a34:	ldr	w0, [sp, #88]
    1a38:	cmp	w0, #0x0
    1a3c:	b.eq	1a48 <test_parse+0x14e8>  // b.none
    1a40:	mov	w0, #0x1                   	// #1
    1a44:	b	1a4c <test_parse+0x14ec>
    1a48:	mov	w0, #0x0                   	// #0
    1a4c:	str	w0, [sp, #84]
    1a50:	mov	w0, #0x1                   	// #1
    1a54:	str	w0, [sp, #88]
    1a58:	ldr	x0, [sp, #48]
    1a5c:	ldr	w0, [x0]
    1a60:	add	w1, w0, #0x1
    1a64:	ldr	x0, [sp, #48]
    1a68:	str	w1, [x0]
    1a6c:	b	1ab8 <test_parse+0x1558>
    1a70:	ldr	x0, [sp, #48]
    1a74:	ldr	w0, [x0]
    1a78:	sxtw	x0, w0
    1a7c:	lsl	x0, x0, #3
    1a80:	ldr	x1, [sp, #56]
    1a84:	add	x0, x1, x0
    1a88:	ldr	x0, [x0]
    1a8c:	ldrb	w0, [x0]
    1a90:	mov	w2, w0
    1a94:	add	x0, sp, #0x50
    1a98:	mov	x1, x0
    1a9c:	mov	w0, w2
    1aa0:	bl	1bc <update_val>
    1aa4:	ldr	x0, [sp, #48]
    1aa8:	ldr	w0, [x0]
    1aac:	add	w1, w0, #0x1
    1ab0:	ldr	x0, [sp, #48]
    1ab4:	str	w1, [x0]
    1ab8:	ldr	x0, [sp, #48]
    1abc:	ldr	w0, [x0]
    1ac0:	ldr	w1, [sp, #44]
    1ac4:	cmp	w1, w0
    1ac8:	b.gt	590 <test_parse+0x30>
    1acc:	ldr	w0, [sp, #84]
    1ad0:	cmp	w0, #0x0
    1ad4:	b.ne	1ae4 <test_parse+0x1584>  // b.any
    1ad8:	ldr	w0, [sp, #88]
    1adc:	cmp	w0, #0x0
    1ae0:	b.eq	1aec <test_parse+0x158c>  // b.none
    1ae4:	mov	w0, #0x1                   	// #1
    1ae8:	b	1af0 <test_parse+0x1590>
    1aec:	mov	w0, #0x0                   	// #0
    1af0:	ldr	x19, [sp, #16]
    1af4:	ldp	x29, x30, [sp], #144
    1af8:	ret
    1afc:	nop
	...

0000000000001be8 <grub_cmd_test>:
    1be8:	stp	x29, x30, [sp, #-64]!
    1bec:	mov	x29, sp
    1bf0:	str	x0, [sp, #40]
    1bf4:	str	w1, [sp, #36]
    1bf8:	str	x2, [sp, #24]
    1bfc:	str	wzr, [sp, #60]
    1c00:	ldr	w0, [sp, #36]
    1c04:	cmp	w0, #0x0
    1c08:	b.le	1c4c <grub_cmd_test+0x64>
    1c0c:	ldrsw	x0, [sp, #36]
    1c10:	lsl	x0, x0, #3
    1c14:	sub	x0, x0, #0x8
    1c18:	ldr	x1, [sp, #24]
    1c1c:	add	x0, x1, x0
    1c20:	ldr	x2, [x0]
    1c24:	adrp	x0, 0 <grub_isdigit>
    1c28:	add	x0, x0, #0x0
    1c2c:	ldr	x1, [x0]
    1c30:	mov	x0, x2
    1c34:	bl	0 <grub_strcmp>
    1c38:	cmp	w0, #0x0
    1c3c:	b.ne	1c4c <grub_cmd_test+0x64>  // b.any
    1c40:	ldr	w0, [sp, #36]
    1c44:	sub	w0, w0, #0x1
    1c48:	str	w0, [sp, #36]
    1c4c:	add	x0, sp, #0x3c
    1c50:	ldr	w2, [sp, #36]
    1c54:	mov	x1, x0
    1c58:	ldr	x0, [sp, #24]
    1c5c:	bl	560 <test_parse>
    1c60:	cmp	w0, #0x0
    1c64:	b.ne	1c80 <grub_cmd_test+0x98>  // b.any
    1c68:	adrp	x0, 0 <grub_isdigit>
    1c6c:	add	x0, x0, #0x0
    1c70:	ldr	x1, [x0]
    1c74:	mov	w0, #0x1                   	// #1
    1c78:	bl	0 <grub_error>
    1c7c:	b	1c84 <grub_cmd_test+0x9c>
    1c80:	mov	w0, #0x0                   	// #0
    1c84:	ldp	x29, x30, [sp], #64
    1c88:	ret
    1c8c:	nop
	...

0000000000001ca0 <grub_mod_init>:
    1ca0:	stp	x29, x30, [sp, #-32]!
    1ca4:	mov	x29, sp
    1ca8:	str	x0, [sp, #24]
    1cac:	adrp	x0, 0 <grub_isdigit>
    1cb0:	add	x0, x0, #0x0
    1cb4:	ldr	x3, [x0]
    1cb8:	adrp	x0, 0 <grub_isdigit>
    1cbc:	add	x0, x0, #0x0
    1cc0:	ldr	x2, [x0]
    1cc4:	adrp	x0, 0 <grub_isdigit>
    1cc8:	add	x0, x0, #0x0
    1ccc:	ldr	x1, [x0]
    1cd0:	adrp	x0, 0 <grub_isdigit>
    1cd4:	add	x0, x0, #0x0
    1cd8:	ldr	x0, [x0]
    1cdc:	bl	12c <grub_register_command>
    1ce0:	mov	x1, x0
    1ce4:	adrp	x0, 0 <grub_isdigit>
    1ce8:	add	x0, x0, #0x0
    1cec:	ldr	x0, [x0]
    1cf0:	str	x1, [x0]
    1cf4:	adrp	x0, 0 <grub_isdigit>
    1cf8:	add	x0, x0, #0x0
    1cfc:	ldr	x0, [x0]
    1d00:	ldr	x0, [x0]
    1d04:	ldr	w1, [x0, #40]
    1d08:	adrp	x0, 0 <grub_isdigit>
    1d0c:	add	x0, x0, #0x0
    1d10:	ldr	x0, [x0]
    1d14:	ldr	x0, [x0]
    1d18:	orr	w1, w1, #0x200
    1d1c:	str	w1, [x0, #40]
    1d20:	adrp	x0, 0 <grub_isdigit>
    1d24:	add	x0, x0, #0x0
    1d28:	ldr	x3, [x0]
    1d2c:	adrp	x0, 0 <grub_isdigit>
    1d30:	add	x0, x0, #0x0
    1d34:	ldr	x2, [x0]
    1d38:	adrp	x0, 0 <grub_isdigit>
    1d3c:	add	x0, x0, #0x0
    1d40:	ldr	x1, [x0]
    1d44:	adrp	x0, 0 <grub_isdigit>
    1d48:	add	x0, x0, #0x0
    1d4c:	ldr	x0, [x0]
    1d50:	bl	12c <grub_register_command>
    1d54:	mov	x1, x0
    1d58:	adrp	x0, 0 <grub_isdigit>
    1d5c:	add	x0, x0, #0x0
    1d60:	ldr	x0, [x0]
    1d64:	str	x1, [x0]
    1d68:	adrp	x0, 0 <grub_isdigit>
    1d6c:	add	x0, x0, #0x0
    1d70:	ldr	x0, [x0]
    1d74:	ldr	x0, [x0]
    1d78:	ldr	w1, [x0, #40]
    1d7c:	adrp	x0, 0 <grub_isdigit>
    1d80:	add	x0, x0, #0x0
    1d84:	ldr	x0, [x0]
    1d88:	ldr	x0, [x0]
    1d8c:	orr	w1, w1, #0x200
    1d90:	str	w1, [x0, #40]
    1d94:	nop
    1d98:	ldp	x29, x30, [sp], #32
    1d9c:	ret
	...

0000000000001de0 <grub_mod_fini>:
    1de0:	stp	x29, x30, [sp, #-16]!
    1de4:	mov	x29, sp
    1de8:	adrp	x0, 0 <grub_isdigit>
    1dec:	add	x0, x0, #0x0
    1df0:	ldr	x0, [x0]
    1df4:	ldr	x0, [x0]
    1df8:	bl	0 <grub_unregister_command>
    1dfc:	adrp	x0, 0 <grub_isdigit>
    1e00:	add	x0, x0, #0x0
    1e04:	ldr	x0, [x0]
    1e08:	ldr	x0, [x0]
    1e0c:	bl	0 <grub_unregister_command>
    1e10:	nop
    1e14:	ldp	x29, x30, [sp], #16
    1e18:	ret
    1e1c:	nop
	...
