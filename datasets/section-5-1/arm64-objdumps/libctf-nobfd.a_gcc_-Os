In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libctf-nobfd.a_gcc_-Os:

ctf-archive.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <sort_modent_by_name>:
   0:	ldr	x0, [x0]
   4:	ldr	x1, [x1]
   8:	add	x0, x2, x0
   c:	add	x1, x2, x1
  10:	b	0 <strcmp>

0000000000000014 <search_modent_by_name>:
  14:	mrs	x2, tpidr_el0
  18:	add	x2, x2, #0x0, lsl #12
  1c:	add	x2, x2, #0x0
  20:	ldr	x1, [x1]
  24:	ldr	x2, [x2]
  28:	add	x1, x2, x1
  2c:	b	0 <strcmp>

0000000000000030 <ctf_arc_open_by_name_internal>:
  30:	stp	x29, x30, [sp, #-96]!
  34:	mov	x29, sp
  38:	stp	x19, x20, [sp, #16]
  3c:	mov	x19, x4
  40:	stp	x21, x22, [sp, #32]
  44:	mov	x21, x1
  48:	mov	x22, x2
  4c:	str	x23, [sp, #48]
  50:	mov	x23, x0
  54:	cbnz	x3, d0 <ctf_arc_open_by_name_internal+0xa0>
  58:	adrp	x20, 0 <_CTF_SECTION>
  5c:	add	x20, x20, #0x0
  60:	mov	x1, x20
  64:	adrp	x0, 0 <sort_modent_by_name>
  68:	add	x0, x0, #0x0
  6c:	bl	0 <ctf_dprintf>
  70:	mrs	x1, tpidr_el0
  74:	adrp	x4, 0 <sort_modent_by_name>
  78:	ldr	x2, [x23, #24]
  7c:	add	x1, x1, #0x0, lsl #12
  80:	add	x1, x1, #0x0
  84:	add	x4, x4, #0x0
  88:	mov	x0, x20
  8c:	add	x2, x23, x2
  90:	mov	x3, #0x10                  	// #16
  94:	str	x2, [x1]
  98:	add	x1, x23, #0x28
  9c:	ldr	x2, [x23, #16]
  a0:	bl	0 <bsearch>
  a4:	cbnz	x0, d8 <ctf_arc_open_by_name_internal+0xa8>
  a8:	cbz	x19, b8 <ctf_arc_open_by_name_internal+0x88>
  ac:	mov	w0, #0x415                 	// #1045
  b0:	str	w0, [x19]
  b4:	mov	x19, #0x0                   	// #0
  b8:	mov	x0, x19
  bc:	ldp	x19, x20, [sp, #16]
  c0:	ldp	x21, x22, [sp, #32]
  c4:	ldr	x23, [sp, #48]
  c8:	ldp	x29, x30, [sp], #96
  cc:	ret
  d0:	mov	x20, x3
  d4:	b	60 <ctf_arc_open_by_name_internal+0x30>
  d8:	ldr	x20, [x0, #8]
  dc:	adrp	x0, 0 <sort_modent_by_name>
  e0:	add	x0, x0, #0x0
  e4:	mov	x1, x20
  e8:	bl	0 <ctf_dprintf>
  ec:	ldr	x1, [x23, #32]
  f0:	mov	x3, x19
  f4:	mov	x2, x22
  f8:	add	x20, x20, x1
  fc:	adrp	x1, 0 <_CTF_SECTION>
 100:	add	x1, x1, #0x0
 104:	ldr	x0, [x23, x20]
 108:	add	x20, x20, #0x8
 10c:	str	x0, [sp, #80]
 110:	mov	x0, #0x1                   	// #1
 114:	add	x20, x23, x20
 118:	stp	x1, x20, [sp, #64]
 11c:	mov	x1, x21
 120:	str	x0, [sp, #88]
 124:	add	x0, sp, #0x40
 128:	bl	0 <ctf_bufopen>
 12c:	mov	x19, x0
 130:	cbz	x0, b8 <ctf_arc_open_by_name_internal+0x88>
 134:	ldr	w1, [x23, #8]
 138:	bl	0 <ctf_setmodel>
 13c:	b	b8 <ctf_arc_open_by_name_internal+0x88>

0000000000000140 <ctf_arc_write_fd>:
 140:	stp	x29, x30, [sp, #-176]!
 144:	mov	x29, sp
 148:	stp	x19, x20, [sp, #16]
 14c:	lsl	x19, x2, #4
 150:	mov	w20, w0
 154:	adrp	x0, 0 <sort_modent_by_name>
 158:	add	x0, x0, #0x0
 15c:	stp	x21, x22, [sp, #32]
 160:	mov	x21, x2
 164:	stp	x23, x24, [sp, #48]
 168:	add	x23, x19, #0x28
 16c:	stp	x25, x26, [sp, #64]
 170:	mov	x25, x3
 174:	stp	x27, x28, [sp, #80]
 178:	str	x1, [sp, #96]
 17c:	mov	x1, x2
 180:	str	x4, [sp, #112]
 184:	strb	wzr, [sp, #167]
 188:	bl	0 <ctf_dprintf>
 18c:	mov	x1, x23
 190:	adrp	x0, 0 <sort_modent_by_name>
 194:	add	x0, x0, #0x0
 198:	bl	0 <ctf_dprintf>
 19c:	add	x1, x19, #0x27
 1a0:	mov	w0, w20
 1a4:	mov	w2, #0x0                   	// #0
 1a8:	bl	0 <lseek>
 1ac:	tbz	x0, #63, 1e4 <ctf_arc_write_fd+0xa4>
 1b0:	adrp	x20, 0 <sort_modent_by_name>
 1b4:	add	x20, x20, #0x0
 1b8:	bl	0 <__errno_location>
 1bc:	mov	x19, x0
 1c0:	ldr	w0, [x0]
 1c4:	cmp	w0, #0x3e7
 1c8:	b.gt	550 <ctf_arc_write_fd+0x410>
 1cc:	bl	0 <strerror>
 1d0:	mov	x1, x0
 1d4:	mov	x0, x20
 1d8:	bl	0 <ctf_dprintf>
 1dc:	ldr	w0, [x19]
 1e0:	b	320 <ctf_arc_write_fd+0x1e0>
 1e4:	add	x1, sp, #0xa7
 1e8:	mov	w0, w20
 1ec:	mov	x2, #0x1                   	// #1
 1f0:	bl	0 <write>
 1f4:	tbnz	x0, #63, 1b0 <ctf_arc_write_fd+0x70>
 1f8:	mov	w4, w20
 1fc:	mov	x1, x23
 200:	mov	x5, #0x0                   	// #0
 204:	mov	w3, #0x1                   	// #1
 208:	mov	w2, #0x3                   	// #3
 20c:	mov	x0, #0x0                   	// #0
 210:	bl	0 <mmap>
 214:	mov	x19, x0
 218:	cmn	x0, #0x1
 21c:	b.eq	538 <ctf_arc_write_fd+0x3f8>  // b.none
 220:	cbz	x0, 538 <ctf_arc_write_fd+0x3f8>
 224:	mov	x0, #0x3eeb                	// #16107
 228:	str	x21, [x19, #16]
 22c:	movk	x0, #0xd762, lsl #16
 230:	str	x23, [x19, #32]
 234:	movk	x0, #0xf2a4, lsl #32
 238:	movk	x0, #0x8b47, lsl #48
 23c:	str	x0, [x19]
 240:	cbz	x21, 354 <ctf_arc_write_fd+0x214>
 244:	ldr	x0, [sp, #96]
 248:	mov	x21, #0x0                   	// #0
 24c:	mov	x22, #0x0                   	// #0
 250:	ldr	x0, [x0]
 254:	bl	0 <ctf_getmodel>
 258:	sxtw	x0, w0
 25c:	ldr	x24, [x19, #16]
 260:	str	x0, [x19, #8]
 264:	cmp	x24, x22
 268:	b.ne	33c <ctf_arc_write_fd+0x1fc>  // b.any
 26c:	mov	x0, x21
 270:	bl	0 <malloc>
 274:	mov	x22, x0
 278:	cbz	x0, 520 <ctf_arc_write_fd+0x3e0>
 27c:	add	x0, x19, #0x28
 280:	str	x0, [sp, #104]
 284:	mov	x26, x0
 288:	adrp	x0, 0 <ctf_write>
 28c:	add	x0, x0, #0x0
 290:	mov	x21, #0x0                   	// #0
 294:	mov	x24, #0x0                   	// #0
 298:	str	x0, [sp, #120]
 29c:	adrp	x0, 0 <ctf_compress_write>
 2a0:	add	x0, x0, #0x0
 2a4:	str	x0, [sp, #128]
 2a8:	ldr	x1, [x19, #16]
 2ac:	cmp	x1, x24
 2b0:	b.hi	35c <ctf_arc_write_fd+0x21c>  // b.pmore
 2b4:	ldr	x0, [sp, #104]
 2b8:	mov	x4, x22
 2bc:	adrp	x3, 0 <sort_modent_by_name>
 2c0:	add	x3, x3, #0x0
 2c4:	mov	x2, #0x10                  	// #16
 2c8:	bl	0 <qsort_r>
 2cc:	mov	w0, w20
 2d0:	mov	w2, #0x1                   	// #1
 2d4:	mov	x1, #0x0                   	// #0
 2d8:	bl	0 <lseek>
 2dc:	tbnz	x0, #63, 508 <ctf_arc_write_fd+0x3c8>
 2e0:	mov	x24, x22
 2e4:	str	x0, [x19, #24]
 2e8:	cmp	x21, #0x0
 2ec:	b.gt	4dc <ctf_arc_write_fd+0x39c>
 2f0:	mov	x0, x22
 2f4:	bl	0 <free>
 2f8:	mov	x1, x23
 2fc:	mov	x0, x19
 300:	mov	w2, #0x1                   	// #1
 304:	bl	0 <msync>
 308:	tbnz	w0, #31, 52c <ctf_arc_write_fd+0x3ec>
 30c:	mov	x1, x23
 310:	mov	x0, x19
 314:	bl	0 <munmap>
 318:	tbnz	w0, #31, 544 <ctf_arc_write_fd+0x404>
 31c:	mov	w0, #0x0                   	// #0
 320:	ldp	x19, x20, [sp, #16]
 324:	ldp	x21, x22, [sp, #32]
 328:	ldp	x23, x24, [sp, #48]
 32c:	ldp	x25, x26, [sp, #64]
 330:	ldp	x27, x28, [sp, #80]
 334:	ldp	x29, x30, [sp], #176
 338:	ret
 33c:	ldr	x0, [x25, x22, lsl #3]
 340:	add	x21, x21, #0x1
 344:	add	x22, x22, #0x1
 348:	bl	0 <strlen>
 34c:	add	x21, x21, x0
 350:	b	264 <ctf_arc_write_fd+0x124>
 354:	mov	x21, #0x0                   	// #0
 358:	b	26c <ctf_arc_write_fd+0x12c>
 35c:	ldr	x1, [x25, x24, lsl #3]
 360:	add	x0, x22, x21
 364:	bl	0 <strcpy>
 368:	str	xzr, [sp, #168]
 36c:	ldr	x0, [sp, #96]
 370:	ldr	x28, [x0, x24, lsl #3]
 374:	mov	x0, x28
 378:	bl	0 <ctf_serialize>
 37c:	tbz	w0, #31, 390 <ctf_arc_write_fd+0x250>
 380:	ldr	w3, [x28, #556]
 384:	neg	w3, w3
 388:	sxtw	x27, w3
 38c:	b	47c <ctf_arc_write_fd+0x33c>
 390:	mov	w0, w20
 394:	mov	w2, #0x1                   	// #1
 398:	mov	x1, #0x0                   	// #0
 39c:	bl	0 <lseek>
 3a0:	mov	x27, x0
 3a4:	tbz	x0, #63, 3b4 <ctf_arc_write_fd+0x274>
 3a8:	bl	0 <__errno_location>
 3ac:	ldr	w3, [x0]
 3b0:	b	384 <ctf_arc_write_fd+0x244>
 3b4:	ldr	x1, [sp, #112]
 3b8:	mov	x2, #0x8                   	// #8
 3bc:	ldr	x0, [x28, #416]
 3c0:	cmp	x1, x0
 3c4:	ldp	x1, x0, [sp, #120]
 3c8:	csel	x5, x0, x1, cc  // cc = lo, ul, last
 3cc:	add	x1, sp, #0xa8
 3d0:	mov	w0, w20
 3d4:	stp	x1, x2, [sp, #136]
 3d8:	str	x5, [sp, #152]
 3dc:	bl	0 <write>
 3e0:	ldp	x1, x2, [sp, #136]
 3e4:	ldr	x5, [sp, #152]
 3e8:	tbnz	x0, #63, 3a8 <ctf_arc_write_fd+0x268>
 3ec:	add	x1, x1, x0
 3f0:	subs	x2, x2, x0
 3f4:	b.ne	3d0 <ctf_arc_write_fd+0x290>  // b.any
 3f8:	mov	w1, w20
 3fc:	mov	x0, x28
 400:	blr	x5
 404:	cbnz	w0, 380 <ctf_arc_write_fd+0x240>
 408:	mov	w0, w20
 40c:	mov	w2, #0x1                   	// #1
 410:	mov	x1, #0x0                   	// #0
 414:	bl	0 <lseek>
 418:	mov	x28, x0
 41c:	tbnz	x0, #63, 3a8 <ctf_arc_write_fd+0x268>
 420:	sub	x0, x0, x27
 424:	mov	x1, x27
 428:	mov	w2, #0x0                   	// #0
 42c:	str	x0, [sp, #168]
 430:	mov	w0, w20
 434:	bl	0 <lseek>
 438:	tbnz	x0, #63, 3a8 <ctf_arc_write_fd+0x268>
 43c:	add	x1, sp, #0xa8
 440:	mov	x2, #0x8                   	// #8
 444:	mov	w0, w20
 448:	stp	x1, x2, [sp, #136]
 44c:	bl	0 <write>
 450:	ldp	x1, x2, [sp, #136]
 454:	tbnz	x0, #63, 3a8 <ctf_arc_write_fd+0x268>
 458:	add	x1, x1, x0
 45c:	subs	x2, x2, x0
 460:	b.ne	444 <ctf_arc_write_fd+0x304>  // b.any
 464:	add	x1, x28, #0x7
 468:	mov	w0, w20
 46c:	and	x1, x1, #0xfffffffffffffff8
 470:	mov	w2, #0x0                   	// #0
 474:	bl	0 <lseek>
 478:	tbnz	x0, #63, 3a8 <ctf_arc_write_fd+0x268>
 47c:	add	x0, x27, #0x3e7
 480:	cmp	x0, #0x3e6
 484:	b.ls	4fc <ctf_arc_write_fd+0x3bc>  // b.plast
 488:	tbz	x27, #63, 4b8 <ctf_arc_write_fd+0x378>
 48c:	bl	0 <__errno_location>
 490:	adrp	x20, 0 <sort_modent_by_name>
 494:	add	x20, x20, #0x0
 498:	neg	w3, w27
 49c:	str	w3, [x0]
 4a0:	mov	x0, x22
 4a4:	bl	0 <free>
 4a8:	mov	x1, x23
 4ac:	mov	x0, x19
 4b0:	bl	0 <munmap>
 4b4:	b	1b8 <ctf_arc_write_fd+0x78>
 4b8:	ldr	x0, [x25, x24, lsl #3]
 4bc:	sub	x3, x27, x23
 4c0:	stp	x21, x3, [x26]
 4c4:	add	x21, x21, #0x1
 4c8:	add	x24, x24, #0x1
 4cc:	bl	0 <strlen>
 4d0:	add	x26, x26, #0x10
 4d4:	add	x21, x21, x0
 4d8:	b	2a8 <ctf_arc_write_fd+0x168>
 4dc:	mov	x2, x21
 4e0:	mov	x1, x24
 4e4:	mov	w0, w20
 4e8:	bl	0 <write>
 4ec:	tbnz	x0, #63, 514 <ctf_arc_write_fd+0x3d4>
 4f0:	sub	x21, x21, x0
 4f4:	add	x24, x24, x0
 4f8:	b	2e8 <ctf_arc_write_fd+0x1a8>
 4fc:	adrp	x20, 0 <sort_modent_by_name>
 500:	add	x20, x20, #0x0
 504:	b	4a0 <ctf_arc_write_fd+0x360>
 508:	adrp	x20, 0 <sort_modent_by_name>
 50c:	add	x20, x20, #0x0
 510:	b	4a0 <ctf_arc_write_fd+0x360>
 514:	adrp	x20, 0 <sort_modent_by_name>
 518:	add	x20, x20, #0x0
 51c:	b	4a0 <ctf_arc_write_fd+0x360>
 520:	adrp	x20, 0 <sort_modent_by_name>
 524:	add	x20, x20, #0x0
 528:	b	4a8 <ctf_arc_write_fd+0x368>
 52c:	adrp	x20, 0 <sort_modent_by_name>
 530:	add	x20, x20, #0x0
 534:	b	4a8 <ctf_arc_write_fd+0x368>
 538:	adrp	x20, 0 <sort_modent_by_name>
 53c:	add	x20, x20, #0x0
 540:	b	1b8 <ctf_arc_write_fd+0x78>
 544:	adrp	x20, 0 <sort_modent_by_name>
 548:	add	x20, x20, #0x0
 54c:	b	1b8 <ctf_arc_write_fd+0x78>
 550:	bl	0 <ctf_errmsg>
 554:	b	1d0 <ctf_arc_write_fd+0x90>

0000000000000558 <ctf_arc_write>:
 558:	stp	x29, x30, [sp, #-64]!
 55c:	mov	x29, sp
 560:	stp	x19, x20, [sp, #16]
 564:	mov	x19, x1
 568:	mov	w1, #0x242                 	// #578
 56c:	mov	x20, x0
 570:	movk	w1, #0x8, lsl #16
 574:	stp	x21, x22, [sp, #32]
 578:	mov	x22, x2
 57c:	mov	w2, #0x1b6                 	// #438
 580:	stp	x23, x24, [sp, #48]
 584:	mov	x23, x3
 588:	mov	x24, x4
 58c:	bl	0 <open>
 590:	tbz	w0, #31, 5d4 <ctf_arc_write+0x7c>
 594:	bl	0 <__errno_location>
 598:	mov	x19, x0
 59c:	ldr	w0, [x0]
 5a0:	bl	0 <strerror>
 5a4:	mov	x2, x0
 5a8:	mov	x1, x20
 5ac:	adrp	x0, 0 <sort_modent_by_name>
 5b0:	add	x0, x0, #0x0
 5b4:	bl	0 <ctf_dprintf>
 5b8:	ldr	w19, [x19]
 5bc:	mov	w0, w19
 5c0:	ldp	x19, x20, [sp, #16]
 5c4:	ldp	x21, x22, [sp, #32]
 5c8:	ldp	x23, x24, [sp, #48]
 5cc:	ldp	x29, x30, [sp], #64
 5d0:	ret
 5d4:	mov	x1, x19
 5d8:	mov	w21, w0
 5dc:	mov	x4, x24
 5e0:	mov	x3, x23
 5e4:	mov	x2, x22
 5e8:	bl	140 <ctf_arc_write_fd>
 5ec:	mov	w19, w0
 5f0:	cbnz	w0, 62c <ctf_arc_write+0xd4>
 5f4:	mov	w0, w21
 5f8:	bl	0 <close>
 5fc:	mov	w19, w0
 600:	tbz	w0, #31, 62c <ctf_arc_write+0xd4>
 604:	bl	0 <__errno_location>
 608:	ldr	w0, [x0]
 60c:	bl	0 <strerror>
 610:	mov	x1, x0
 614:	adrp	x0, 0 <sort_modent_by_name>
 618:	add	x0, x0, #0x0
 61c:	bl	0 <ctf_dprintf>
 620:	mov	x0, x20
 624:	bl	0 <unlink>
 628:	b	5bc <ctf_arc_write+0x64>
 62c:	mov	w0, w21
 630:	bl	0 <close>
 634:	tbz	w19, #31, 5bc <ctf_arc_write+0x64>
 638:	b	620 <ctf_arc_write+0xc8>

000000000000063c <ctf_arc_bufopen>:
 63c:	mov	x1, #0x3eeb                	// #16107
 640:	ldr	x3, [x0]
 644:	movk	x1, #0xd762, lsl #16
 648:	movk	x1, #0xf2a4, lsl #32
 64c:	movk	x1, #0x8b47, lsl #48
 650:	cmp	x3, x1
 654:	b.eq	668 <ctf_arc_bufopen+0x2c>  // b.none
 658:	cbz	x2, 664 <ctf_arc_bufopen+0x28>
 65c:	mov	w0, #0x3e8                 	// #1000
 660:	str	w0, [x2]
 664:	mov	x0, #0x0                   	// #0
 668:	ret

000000000000066c <ctf_arc_open_internal>:
 66c:	stp	x29, x30, [sp, #-192]!
 670:	mov	x29, sp
 674:	stp	x19, x20, [sp, #16]
 678:	stp	x21, x22, [sp, #32]
 67c:	mov	x21, x0
 680:	mov	x22, x1
 684:	str	x23, [sp, #48]
 688:	bl	0 <libctf_init_debug>
 68c:	mov	x0, x21
 690:	mov	w1, #0x0                   	// #0
 694:	bl	0 <open>
 698:	tbnz	w0, #31, 794 <ctf_arc_open_internal+0x128>
 69c:	mov	w20, w0
 6a0:	add	x1, sp, #0x40
 6a4:	bl	0 <fstat>
 6a8:	tbnz	w0, #31, 77c <ctf_arc_open_internal+0x110>
 6ac:	ldr	x1, [sp, #112]
 6b0:	mov	w4, w20
 6b4:	mov	x5, #0x0                   	// #0
 6b8:	mov	w3, #0x2                   	// #2
 6bc:	mov	w2, #0x3                   	// #3
 6c0:	mov	x0, #0x0                   	// #0
 6c4:	bl	0 <mmap>
 6c8:	mov	x19, x0
 6cc:	cmn	x0, #0x1
 6d0:	b.eq	788 <ctf_arc_open_internal+0x11c>  // b.none
 6d4:	cbz	x0, 788 <ctf_arc_open_internal+0x11c>
 6d8:	mov	x0, #0x3eeb                	// #16107
 6dc:	ldr	x1, [x19]
 6e0:	movk	x0, #0xd762, lsl #16
 6e4:	movk	x0, #0xf2a4, lsl #32
 6e8:	movk	x0, #0x8b47, lsl #48
 6ec:	cmp	x1, x0
 6f0:	ldr	x23, [sp, #112]
 6f4:	b.eq	758 <ctf_arc_open_internal+0xec>  // b.none
 6f8:	bl	0 <__errno_location>
 6fc:	mov	w1, #0x3e8                 	// #1000
 700:	str	w1, [x0]
 704:	mov	x0, x19
 708:	adrp	x19, 0 <sort_modent_by_name>
 70c:	add	x19, x19, #0x0
 710:	mov	x1, x23
 714:	bl	0 <munmap>
 718:	mov	w0, w20
 71c:	bl	0 <close>
 720:	bl	0 <__errno_location>
 724:	cbz	x22, 730 <ctf_arc_open_internal+0xc4>
 728:	ldr	w1, [x0]
 72c:	str	w1, [x22]
 730:	ldr	w0, [x0]
 734:	cmp	w0, #0x3e7
 738:	b.gt	7a0 <ctf_arc_open_internal+0x134>
 73c:	bl	0 <strerror>
 740:	mov	x2, x0
 744:	mov	x1, x21
 748:	mov	x0, x19
 74c:	mov	x19, #0x0                   	// #0
 750:	bl	0 <ctf_dprintf>
 754:	b	764 <ctf_arc_open_internal+0xf8>
 758:	str	x23, [x19]
 75c:	mov	w0, w20
 760:	bl	0 <close>
 764:	mov	x0, x19
 768:	ldp	x19, x20, [sp, #16]
 76c:	ldp	x21, x22, [sp, #32]
 770:	ldr	x23, [sp, #48]
 774:	ldp	x29, x30, [sp], #192
 778:	ret
 77c:	adrp	x19, 0 <sort_modent_by_name>
 780:	add	x19, x19, #0x0
 784:	b	718 <ctf_arc_open_internal+0xac>
 788:	adrp	x19, 0 <sort_modent_by_name>
 78c:	add	x19, x19, #0x0
 790:	b	718 <ctf_arc_open_internal+0xac>
 794:	adrp	x19, 0 <sort_modent_by_name>
 798:	add	x19, x19, #0x0
 79c:	b	720 <ctf_arc_open_internal+0xb4>
 7a0:	bl	0 <ctf_errmsg>
 7a4:	b	740 <ctf_arc_open_internal+0xd4>

00000000000007a8 <ctf_arc_close_internal>:
 7a8:	cbz	x0, 7b4 <ctf_arc_close_internal+0xc>
 7ac:	ldr	x1, [x0]
 7b0:	b	0 <munmap>
 7b4:	ret

00000000000007b8 <ctf_arc_close>:
 7b8:	cbz	x0, 818 <ctf_arc_close+0x60>
 7bc:	stp	x29, x30, [sp, #-32]!
 7c0:	mov	x29, sp
 7c4:	str	x19, [sp, #16]
 7c8:	mov	x19, x0
 7cc:	ldr	w0, [x0]
 7d0:	cbz	w0, 80c <ctf_arc_close+0x54>
 7d4:	ldr	x0, [x19, #16]
 7d8:	bl	7a8 <ctf_arc_close_internal>
 7dc:	ldr	x0, [x19, #32]
 7e0:	bl	0 <free>
 7e4:	ldr	x0, [x19, #88]
 7e8:	bl	0 <free>
 7ec:	ldr	x1, [x19, #104]
 7f0:	cbz	x1, 7fc <ctf_arc_close+0x44>
 7f4:	mov	x0, x19
 7f8:	blr	x1
 7fc:	mov	x0, x19
 800:	ldr	x19, [sp, #16]
 804:	ldp	x29, x30, [sp], #32
 808:	b	0 <free>
 80c:	ldr	x0, [x19, #8]
 810:	bl	0 <ctf_file_close>
 814:	b	7dc <ctf_arc_close+0x24>
 818:	ret

000000000000081c <ctf_arc_open_by_name_sections>:
 81c:	stp	x29, x30, [sp, #-32]!
 820:	mov	x29, sp
 824:	ldr	w5, [x0]
 828:	stp	x19, x20, [sp, #16]
 82c:	mov	x20, x0
 830:	cbz	w5, 858 <ctf_arc_open_by_name_sections+0x3c>
 834:	ldr	x0, [x0, #16]
 838:	bl	30 <ctf_arc_open_by_name_internal>
 83c:	mov	x19, x0
 840:	cbz	x0, 848 <ctf_arc_open_by_name_sections+0x2c>
 844:	str	x20, [x0, #640]
 848:	mov	x0, x19
 84c:	ldp	x19, x20, [sp, #16]
 850:	ldp	x29, x30, [sp], #32
 854:	ret
 858:	mov	x0, x3
 85c:	cbz	x3, 888 <ctf_arc_open_by_name_sections+0x6c>
 860:	adrp	x1, 0 <_CTF_SECTION>
 864:	mov	x19, x4
 868:	add	x1, x1, #0x0
 86c:	bl	0 <strcmp>
 870:	cbz	w0, 888 <ctf_arc_open_by_name_sections+0x6c>
 874:	cbz	x19, 848 <ctf_arc_open_by_name_sections+0x2c>
 878:	mov	w0, #0x415                 	// #1045
 87c:	str	w0, [x19]
 880:	mov	x19, #0x0                   	// #0
 884:	b	848 <ctf_arc_open_by_name_sections+0x2c>
 888:	ldr	x19, [x20, #8]
 88c:	ldr	w0, [x19, #548]
 890:	str	x20, [x19, #640]
 894:	add	w0, w0, #0x1
 898:	str	w0, [x19, #548]
 89c:	b	848 <ctf_arc_open_by_name_sections+0x2c>

00000000000008a0 <ctf_arc_open_by_name>:
 8a0:	mov	x3, x1
 8a4:	add	x4, x0, #0x18
 8a8:	ldr	x1, [x0, #24]
 8ac:	add	x6, x0, #0x38
 8b0:	ldr	x5, [x0, #56]
 8b4:	cmp	x1, #0x0
 8b8:	csel	x1, x1, x4, eq  // eq = none
 8bc:	mov	x4, x2
 8c0:	cmp	x5, #0x0
 8c4:	csel	x2, x5, x6, eq  // eq = none
 8c8:	b	81c <ctf_arc_open_by_name_sections>

00000000000008cc <ctf_archive_raw_iter>:
 8cc:	stp	x29, x30, [sp, #-64]!
 8d0:	mov	x29, sp
 8d4:	stp	x21, x22, [sp, #32]
 8d8:	mov	x22, x1
 8dc:	ldr	w1, [x0]
 8e0:	stp	x19, x20, [sp, #16]
 8e4:	stp	x23, x24, [sp, #48]
 8e8:	cbz	w1, 95c <ctf_archive_raw_iter+0x90>
 8ec:	ldr	x19, [x0, #16]
 8f0:	mov	x23, x2
 8f4:	mov	x20, #0x0                   	// #0
 8f8:	add	x21, x19, #0x28
 8fc:	ldr	x24, [x19, #24]
 900:	ldr	x0, [x19, #16]
 904:	cmp	x20, x0
 908:	b.cc	924 <ctf_archive_raw_iter+0x58>  // b.lo, b.ul, b.last
 90c:	mov	w0, #0x0                   	// #0
 910:	ldp	x19, x20, [sp, #16]
 914:	ldp	x21, x22, [sp, #32]
 918:	ldp	x23, x24, [sp, #48]
 91c:	ldp	x29, x30, [sp], #64
 920:	ret
 924:	ldr	x0, [x21, #8]
 928:	mov	x3, x23
 92c:	ldr	x4, [x19, #32]
 930:	add	x4, x4, x0
 934:	ldr	x0, [x21], #16
 938:	add	x1, x19, x4
 93c:	ldr	x2, [x19, x4]
 940:	add	x0, x24, x0
 944:	add	x1, x1, #0x8
 948:	add	x0, x19, x0
 94c:	blr	x22
 950:	cbnz	w0, 910 <ctf_archive_raw_iter+0x44>
 954:	add	x20, x20, #0x1
 958:	b	900 <ctf_archive_raw_iter+0x34>
 95c:	mov	w0, #0xffffffea            	// #-22
 960:	b	910 <ctf_archive_raw_iter+0x44>

0000000000000964 <ctf_archive_iter>:
 964:	stp	x29, x30, [sp, #-128]!
 968:	mov	x29, sp
 96c:	stp	x19, x20, [sp, #16]
 970:	mov	x19, x0
 974:	add	x0, x0, #0x18
 978:	stp	x23, x24, [sp, #48]
 97c:	ldr	x23, [x19, #24]
 980:	stp	x21, x22, [sp, #32]
 984:	mov	x21, x1
 988:	ldr	x24, [x19, #56]
 98c:	cmp	x23, #0x0
 990:	csel	x23, x23, x0, eq  // eq = none
 994:	add	x0, x19, #0x38
 998:	cmp	x24, #0x0
 99c:	stp	x25, x26, [sp, #64]
 9a0:	csel	x24, x24, x0, eq  // eq = none
 9a4:	ldr	w0, [x19]
 9a8:	stp	x27, x28, [sp, #80]
 9ac:	cbz	w0, a64 <ctf_archive_iter+0x100>
 9b0:	ldr	x26, [x19, #16]
 9b4:	mov	x25, x2
 9b8:	mov	x22, #0x0                   	// #0
 9bc:	add	x27, x26, #0x28
 9c0:	ldr	x0, [x26, #24]
 9c4:	str	x0, [sp, #104]
 9c8:	ldr	x0, [x26, #16]
 9cc:	cmp	x22, x0
 9d0:	b.cc	9dc <ctf_archive_iter+0x78>  // b.lo, b.ul, b.last
 9d4:	mov	w0, #0x0                   	// #0
 9d8:	b	a14 <ctf_archive_iter+0xb0>
 9dc:	lsl	x0, x22, #4
 9e0:	add	x4, sp, #0x7c
 9e4:	mov	x2, x24
 9e8:	mov	x1, x23
 9ec:	ldr	x28, [x27, x0]
 9f0:	ldr	x0, [sp, #104]
 9f4:	add	x28, x0, x28
 9f8:	mov	x0, x26
 9fc:	add	x28, x26, x28
 a00:	mov	x3, x28
 a04:	bl	30 <ctf_arc_open_by_name_internal>
 a08:	mov	x20, x0
 a0c:	cbnz	x0, a30 <ctf_archive_iter+0xcc>
 a10:	ldr	w0, [sp, #124]
 a14:	ldp	x19, x20, [sp, #16]
 a18:	ldp	x21, x22, [sp, #32]
 a1c:	ldp	x23, x24, [sp, #48]
 a20:	ldp	x25, x26, [sp, #64]
 a24:	ldp	x27, x28, [sp, #80]
 a28:	ldp	x29, x30, [sp], #128
 a2c:	ret
 a30:	str	x19, [x0, #640]
 a34:	mov	x2, x25
 a38:	mov	x1, x28
 a3c:	blr	x21
 a40:	str	w0, [sp, #124]
 a44:	cbz	w0, a54 <ctf_archive_iter+0xf0>
 a48:	mov	x0, x20
 a4c:	bl	0 <ctf_file_close>
 a50:	b	a10 <ctf_archive_iter+0xac>
 a54:	mov	x0, x20
 a58:	add	x22, x22, #0x1
 a5c:	bl	0 <ctf_file_close>
 a60:	b	9c8 <ctf_archive_iter+0x64>
 a64:	ldr	x0, [x19, #8]
 a68:	adrp	x1, 0 <_CTF_SECTION>
 a6c:	add	x1, x1, #0x0
 a70:	blr	x21
 a74:	b	a14 <ctf_archive_iter+0xb0>

ctf-dump.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_is_slice>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x1
  10:	mov	x19, x0
  14:	str	x21, [sp, #32]
  18:	mov	x21, x2
  1c:	bl	0 <ctf_type_kind>
  20:	sub	w1, w0, #0x1
  24:	cmp	w1, #0x1
  28:	ccmp	w0, #0x8, #0x4, hi  // hi = pmore
  2c:	b.eq	44 <ctf_is_slice+0x44>  // b.none
  30:	mov	w0, #0x0                   	// #0
  34:	ldp	x19, x20, [sp, #16]
  38:	ldr	x21, [sp, #32]
  3c:	ldp	x29, x30, [sp], #48
  40:	ret
  44:	mov	x1, x20
  48:	mov	x0, x19
  4c:	bl	0 <ctf_type_reference>
  50:	cmn	x0, #0x1
  54:	b.eq	30 <ctf_is_slice+0x30>  // b.none
  58:	mov	x2, x21
  5c:	mov	x1, x20
  60:	mov	x0, x19
  64:	bl	0 <ctf_type_encoding>
  68:	cmp	w0, #0x0
  6c:	cset	w0, eq  // eq = none
  70:	b	34 <ctf_is_slice+0x34>

0000000000000074 <ctf_dump_member>:
  74:	stp	x29, x30, [sp, #-112]!
  78:	mov	x29, sp
  7c:	stp	x19, x20, [sp, #16]
  80:	mov	x20, x1
  84:	mov	x19, x4
  88:	stp	x21, x22, [sp, #32]
  8c:	mov	x22, x2
  90:	mov	x21, #0x0                   	// #0
  94:	stp	x23, x24, [sp, #48]
  98:	mov	x24, x0
  9c:	sxtw	x23, w3
  a0:	stp	x25, x26, [sp, #64]
  a4:	adrp	x25, 0 <ctf_is_slice>
  a8:	add	x25, x25, #0x0
  ac:	str	xzr, [sp, #88]
  b0:	cmp	x23, x21
  b4:	b.gt	120 <ctf_dump_member+0xac>
  b8:	ldr	x0, [x19, #8]
  bc:	mov	x1, x20
  c0:	bl	0 <ctf_type_aname>
  c4:	mov	x21, x0
  c8:	cbnz	x0, 174 <ctf_dump_member+0x100>
  cc:	cbnz	x20, 13c <ctf_dump_member+0xc8>
  d0:	adrp	x1, 0 <ctf_is_slice>
  d4:	mov	x2, x22
  d8:	add	x1, x1, #0x0
  dc:	add	x0, sp, #0x58
  e0:	bl	0 <asprintf>
  e4:	tbnz	w0, #31, 14c <ctf_dump_member+0xd8>
  e8:	ldr	x19, [x19]
  ec:	ldr	x1, [sp, #88]
  f0:	ldr	x0, [x19]
  f4:	bl	0 <ctf_str_append_noerr>
  f8:	str	x0, [x19]
  fc:	ldr	x0, [sp, #88]
 100:	bl	0 <free>
 104:	mov	w0, #0x0                   	// #0
 108:	ldp	x19, x20, [sp, #16]
 10c:	ldp	x21, x22, [sp, #32]
 110:	ldp	x23, x24, [sp, #48]
 114:	ldp	x25, x26, [sp, #64]
 118:	ldp	x29, x30, [sp], #112
 11c:	ret
 120:	ldr	x26, [x19]
 124:	mov	x1, x25
 128:	add	x21, x21, #0x1
 12c:	ldr	x0, [x26]
 130:	bl	0 <ctf_str_append_noerr>
 134:	str	x0, [x26]
 138:	b	b0 <ctf_dump_member+0x3c>
 13c:	ldr	x0, [x19, #8]
 140:	bl	0 <ctf_errno>
 144:	cmp	w0, #0x41b
 148:	b.eq	d0 <ctf_dump_member+0x5c>  // b.none
 14c:	mov	x21, #0x0                   	// #0
 150:	mov	x0, x21
 154:	bl	0 <free>
 158:	ldr	x0, [sp, #88]
 15c:	bl	0 <free>
 160:	bl	0 <__errno_location>
 164:	ldr	w1, [x0]
 168:	ldr	x0, [x19, #8]
 16c:	bl	0 <ctf_set_errno>
 170:	b	108 <ctf_dump_member+0x94>
 174:	ldr	x0, [x19, #8]
 178:	mov	x1, x20
 17c:	bl	0 <ctf_type_kind>
 180:	mov	w23, w0
 184:	ldr	x0, [x19, #8]
 188:	mov	x1, x20
 18c:	bl	0 <ctf_type_align>
 190:	mov	x7, x0
 194:	adrp	x1, 0 <ctf_is_slice>
 198:	mov	x6, x24
 19c:	mov	x5, x21
 1a0:	mov	w4, w23
 1a4:	mov	x3, x20
 1a8:	mov	x2, x22
 1ac:	add	x1, x1, #0x0
 1b0:	add	x0, sp, #0x58
 1b4:	bl	0 <asprintf>
 1b8:	tbnz	w0, #31, 150 <ctf_dump_member+0xdc>
 1bc:	ldr	x22, [x19]
 1c0:	ldr	x1, [sp, #88]
 1c4:	ldr	x0, [x22]
 1c8:	bl	0 <ctf_str_append_noerr>
 1cc:	str	x0, [x22]
 1d0:	mov	x0, x21
 1d4:	bl	0 <free>
 1d8:	ldr	x0, [sp, #88]
 1dc:	bl	0 <free>
 1e0:	str	xzr, [sp, #88]
 1e4:	ldr	x0, [x19, #8]
 1e8:	mov	x1, x20
 1ec:	bl	0 <ctf_type_kind>
 1f0:	cmp	w0, #0x1
 1f4:	b.ne	248 <ctf_dump_member+0x1d4>  // b.any
 1f8:	ldr	x0, [x19, #8]
 1fc:	add	x2, sp, #0x60
 200:	mov	x1, x20
 204:	bl	0 <ctf_type_encoding>
 208:	ldp	w2, w3, [sp, #96]
 20c:	adrp	x1, 0 <ctf_is_slice>
 210:	ldr	w4, [sp, #104]
 214:	add	x1, x1, #0x0
 218:	add	x0, sp, #0x58
 21c:	bl	0 <asprintf>
 220:	tbnz	w0, #31, 14c <ctf_dump_member+0xd8>
 224:	ldr	x20, [x19]
 228:	ldr	x1, [sp, #88]
 22c:	ldr	x0, [x20]
 230:	bl	0 <ctf_str_append_noerr>
 234:	str	x0, [x20]
 238:	ldr	x0, [sp, #88]
 23c:	bl	0 <free>
 240:	str	xzr, [sp, #88]
 244:	b	274 <ctf_dump_member+0x200>
 248:	ldr	x0, [x19, #8]
 24c:	mov	x1, x20
 250:	bl	0 <ctf_type_kind>
 254:	cmp	w0, #0x2
 258:	b.eq	1f8 <ctf_dump_member+0x184>  // b.none
 25c:	ldr	x0, [x19, #8]
 260:	add	x2, sp, #0x60
 264:	mov	x1, x20
 268:	bl	0 <ctf_is_slice>
 26c:	cmp	w0, #0x8
 270:	b.eq	1f8 <ctf_dump_member+0x184>  // b.none
 274:	ldr	x19, [x19]
 278:	adrp	x1, 0 <ctf_is_slice>
 27c:	add	x1, x1, #0x0
 280:	ldr	x0, [x19]
 284:	bl	0 <ctf_str_append_noerr>
 288:	str	x0, [x19]
 28c:	b	104 <ctf_dump_member+0x90>

0000000000000290 <ctf_dump_format_type>:
 290:	stp	x29, x30, [sp, #-128]!
 294:	cmp	w2, #0x0
 298:	mov	x29, sp
 29c:	stp	x23, x24, [sp, #48]
 2a0:	adrp	x24, 0 <ctf_is_slice>
 2a4:	adrp	x23, 0 <ctf_is_slice>
 2a8:	add	x23, x23, #0x0
 2ac:	stp	x19, x20, [sp, #16]
 2b0:	mov	x20, x0
 2b4:	add	x0, x24, #0x0
 2b8:	adrp	x24, 0 <ctf_is_slice>
 2bc:	add	x24, x24, #0x0
 2c0:	mov	x19, x1
 2c4:	csel	x23, x23, x0, eq  // eq = none
 2c8:	csel	x24, x24, x0, eq  // eq = none
 2cc:	stp	x25, x26, [sp, #64]
 2d0:	adrp	x25, 0 <ctf_is_slice>
 2d4:	add	x25, x25, #0x0
 2d8:	adrp	x26, 0 <ctf_is_slice>
 2dc:	stp	x21, x22, [sp, #32]
 2e0:	mov	x22, #0x0                   	// #0
 2e4:	str	x27, [sp, #80]
 2e8:	str	xzr, [sp, #104]
 2ec:	mov	x1, x19
 2f0:	mov	x0, x20
 2f4:	bl	0 <ctf_type_aname>
 2f8:	mov	x21, x0
 2fc:	cbnz	x0, 388 <ctf_dump_format_type+0xf8>
 300:	cbnz	x19, 360 <ctf_dump_format_type+0xd0>
 304:	mov	x0, x22
 308:	adrp	x1, 0 <ctf_is_slice>
 30c:	add	x1, x1, #0x0
 310:	bl	0 <ctf_str_append_noerr>
 314:	mov	w1, #0x400                 	// #1024
 318:	mov	x21, x0
 31c:	mov	x0, x20
 320:	bl	0 <ctf_set_errno>
 324:	mov	x0, x20
 328:	bl	0 <ctf_errno>
 32c:	cmp	w0, #0x400
 330:	b.eq	340 <ctf_dump_format_type+0xb0>  // b.none
 334:	mov	x0, x21
 338:	mov	x21, #0x0                   	// #0
 33c:	bl	0 <free>
 340:	mov	x0, x21
 344:	ldp	x19, x20, [sp, #16]
 348:	ldp	x21, x22, [sp, #32]
 34c:	ldp	x23, x24, [sp, #48]
 350:	ldp	x25, x26, [sp, #64]
 354:	ldr	x27, [sp, #80]
 358:	ldp	x29, x30, [sp], #128
 35c:	ret
 360:	mov	x0, x20
 364:	bl	0 <ctf_errno>
 368:	cmp	w0, #0x41b
 36c:	b.eq	304 <ctf_dump_format_type+0x74>  // b.none
 370:	mov	x0, x21
 374:	bl	0 <free>
 378:	mov	x0, x22
 37c:	bl	0 <free>
 380:	ldr	x0, [sp, #104]
 384:	b	338 <ctf_dump_format_type+0xa8>
 388:	add	x2, sp, #0x70
 38c:	mov	x1, x19
 390:	mov	x0, x20
 394:	bl	0 <ctf_is_slice>
 398:	cbz	w0, 424 <ctf_dump_format_type+0x194>
 39c:	add	x2, sp, #0x70
 3a0:	mov	x1, x19
 3a4:	mov	x0, x20
 3a8:	bl	0 <ctf_type_encoding>
 3ac:	ldp	w4, w5, [sp, #116]
 3b0:	adrp	x1, 0 <ctf_is_slice>
 3b4:	mov	x6, x24
 3b8:	mov	x3, x19
 3bc:	mov	x2, x23
 3c0:	add	x1, x1, #0x0
 3c4:	add	x0, sp, #0x68
 3c8:	bl	0 <asprintf>
 3cc:	tbnz	w0, #31, 460 <ctf_dump_format_type+0x1d0>
 3d0:	mov	x0, x21
 3d4:	bl	0 <free>
 3d8:	ldr	x1, [sp, #104]
 3dc:	mov	x0, x22
 3e0:	bl	0 <ctf_str_append_noerr>
 3e4:	mov	x21, x0
 3e8:	ldr	x0, [sp, #104]
 3ec:	bl	0 <free>
 3f0:	str	xzr, [sp, #104]
 3f4:	mov	x1, x19
 3f8:	mov	x0, x20
 3fc:	bl	0 <ctf_type_reference>
 400:	mov	x19, x0
 404:	cmn	x0, #0x1
 408:	b.eq	324 <ctf_dump_format_type+0x94>  // b.none
 40c:	mov	x0, x21
 410:	adrp	x1, 0 <ctf_is_slice>
 414:	add	x1, x1, #0x0
 418:	bl	0 <ctf_str_append_noerr>
 41c:	mov	x22, x0
 420:	b	2ec <ctf_dump_format_type+0x5c>
 424:	ldrb	w0, [x21]
 428:	mov	x1, x19
 42c:	cmp	w0, #0x0
 430:	mov	x0, x20
 434:	csel	x27, x25, x21, eq  // eq = none
 438:	bl	0 <ctf_type_size>
 43c:	mov	x5, x0
 440:	mov	x6, x24
 444:	mov	x4, x27
 448:	mov	x3, x19
 44c:	mov	x2, x23
 450:	add	x1, x26, #0x0
 454:	add	x0, sp, #0x68
 458:	bl	0 <asprintf>
 45c:	b	3cc <ctf_dump_format_type+0x13c>
 460:	bl	0 <__errno_location>
 464:	ldr	w1, [x0]
 468:	mov	x0, x20
 46c:	bl	0 <ctf_set_errno>
 470:	b	370 <ctf_dump_format_type+0xe0>

0000000000000474 <ctf_dump_append>:
 474:	stp	x29, x30, [sp, #-32]!
 478:	mov	x29, sp
 47c:	stp	x19, x20, [sp, #16]
 480:	mov	x19, x0
 484:	mov	x20, x1
 488:	mov	x0, #0x18                  	// #24
 48c:	bl	0 <malloc>
 490:	cbnz	x0, 4ac <ctf_dump_append+0x38>
 494:	ldr	x0, [x19, #8]
 498:	mov	w1, #0xc                   	// #12
 49c:	bl	0 <ctf_set_errno>
 4a0:	ldp	x19, x20, [sp, #16]
 4a4:	ldp	x29, x30, [sp], #32
 4a8:	ret
 4ac:	mov	x1, x0
 4b0:	add	x0, x19, #0x18
 4b4:	str	x20, [x1, #16]
 4b8:	bl	0 <ctf_list_append>
 4bc:	mov	w0, #0x0                   	// #0
 4c0:	b	4a0 <ctf_dump_append+0x2c>

00000000000004c4 <ctf_dump_type>:
 4c4:	stp	x29, x30, [sp, #-80]!
 4c8:	mov	x29, sp
 4cc:	str	x21, [sp, #32]
 4d0:	mov	x21, x0
 4d4:	add	x0, sp, #0x38
 4d8:	str	x0, [sp, #64]
 4dc:	ldr	x0, [x2, #8]
 4e0:	stp	x19, x20, [sp, #16]
 4e4:	mov	x19, x2
 4e8:	mov	w2, w1
 4ec:	mov	x1, x21
 4f0:	str	x0, [sp, #72]
 4f4:	bl	290 <ctf_dump_format_type>
 4f8:	str	x0, [sp, #56]
 4fc:	cbz	x0, 5c0 <ctf_dump_type+0xfc>
 500:	adrp	x1, 0 <ctf_is_slice>
 504:	add	x1, x1, #0x0
 508:	bl	0 <ctf_str_append_noerr>
 50c:	str	x0, [sp, #56]
 510:	ldr	x0, [x19, #8]
 514:	adrp	x2, 0 <ctf_is_slice>
 518:	add	x3, sp, #0x40
 51c:	add	x2, x2, #0x0
 520:	mov	x1, x21
 524:	bl	0 <ctf_type_visit>
 528:	tbz	w0, #31, 59c <ctf_dump_type+0xd8>
 52c:	cbnz	x21, 550 <ctf_dump_type+0x8c>
 530:	ldr	x1, [sp, #56]
 534:	mov	x0, x19
 538:	bl	474 <ctf_dump_append>
 53c:	mov	w0, #0x0                   	// #0
 540:	ldp	x19, x20, [sp, #16]
 544:	ldr	x21, [sp, #32]
 548:	ldp	x29, x30, [sp], #80
 54c:	ret
 550:	ldr	x0, [x19, #8]
 554:	bl	0 <ctf_errno>
 558:	cmp	w0, #0x41b
 55c:	b.eq	530 <ctf_dump_type+0x6c>  // b.none
 560:	adrp	x20, 0 <ctf_is_slice>
 564:	add	x20, x20, #0x0
 568:	ldr	x0, [x19, #8]
 56c:	bl	0 <ctf_errno>
 570:	bl	0 <ctf_errmsg>
 574:	mov	x3, x0
 578:	mov	x2, x21
 57c:	mov	x1, x20
 580:	adrp	x0, 0 <ctf_is_slice>
 584:	add	x0, x0, #0x0
 588:	bl	0 <ctf_dprintf>
 58c:	ldr	x0, [sp, #56]
 590:	bl	0 <free>
 594:	mov	w0, #0xffffffff            	// #-1
 598:	b	540 <ctf_dump_type+0x7c>
 59c:	ldr	x20, [sp, #56]
 5a0:	mov	x0, x20
 5a4:	bl	0 <strlen>
 5a8:	sub	x0, x0, #0x1
 5ac:	ldrb	w1, [x20, x0]
 5b0:	cmp	w1, #0xa
 5b4:	b.ne	530 <ctf_dump_type+0x6c>  // b.any
 5b8:	strb	wzr, [x20, x0]
 5bc:	b	530 <ctf_dump_type+0x6c>
 5c0:	adrp	x20, 0 <ctf_is_slice>
 5c4:	add	x20, x20, #0x0
 5c8:	b	568 <ctf_dump_type+0xa4>

00000000000005cc <ctf_dump_label>:
 5cc:	stp	x29, x30, [sp, #-48]!
 5d0:	mov	x29, sp
 5d4:	stp	x19, x20, [sp, #16]
 5d8:	mov	x20, x1
 5dc:	mov	x19, x2
 5e0:	adrp	x1, 0 <ctf_is_slice>
 5e4:	mov	x2, x0
 5e8:	add	x1, x1, #0x0
 5ec:	add	x0, sp, #0x28
 5f0:	bl	0 <asprintf>
 5f4:	tbz	w0, #31, 614 <ctf_dump_label+0x48>
 5f8:	bl	0 <__errno_location>
 5fc:	ldr	w1, [x0]
 600:	ldr	x0, [x19, #8]
 604:	bl	0 <ctf_set_errno>
 608:	ldp	x19, x20, [sp, #16]
 60c:	ldp	x29, x30, [sp], #48
 610:	ret
 614:	ldr	x1, [x20]
 618:	mov	w2, #0x1                   	// #1
 61c:	ldr	x0, [x19, #8]
 620:	bl	290 <ctf_dump_format_type>
 624:	mov	x20, x0
 628:	cbnz	x0, 63c <ctf_dump_label+0x70>
 62c:	ldr	x0, [sp, #40]
 630:	bl	0 <free>
 634:	mov	w0, #0xffffffff            	// #-1
 638:	b	608 <ctf_dump_label+0x3c>
 63c:	mov	x1, x0
 640:	ldr	x0, [sp, #40]
 644:	bl	0 <ctf_str_append_noerr>
 648:	str	x0, [sp, #40]
 64c:	mov	x0, x20
 650:	bl	0 <free>
 654:	ldr	x1, [sp, #40]
 658:	mov	x0, x19
 65c:	bl	474 <ctf_dump_append>
 660:	mov	w0, #0x0                   	// #0
 664:	b	608 <ctf_dump_label+0x3c>

0000000000000668 <ctf_dump_header_strfield>:
 668:	cbz	w3, 6e0 <ctf_dump_header_strfield+0x78>
 66c:	stp	x29, x30, [sp, #-64]!
 670:	mov	x29, sp
 674:	stp	x19, x20, [sp, #16]
 678:	mov	x20, x0
 67c:	mov	x19, x1
 680:	mov	w1, w3
 684:	str	x21, [sp, #32]
 688:	mov	x21, x2
 68c:	bl	0 <ctf_strptr>
 690:	adrp	x1, 0 <ctf_is_slice>
 694:	mov	x3, x0
 698:	mov	x2, x21
 69c:	add	x1, x1, #0x0
 6a0:	add	x0, sp, #0x38
 6a4:	bl	0 <asprintf>
 6a8:	tbz	w0, #31, 6cc <ctf_dump_header_strfield+0x64>
 6ac:	bl	0 <__errno_location>
 6b0:	ldr	w1, [x0]
 6b4:	mov	x0, x20
 6b8:	bl	0 <ctf_set_errno>
 6bc:	ldp	x19, x20, [sp, #16]
 6c0:	ldr	x21, [sp, #32]
 6c4:	ldp	x29, x30, [sp], #64
 6c8:	ret
 6cc:	ldr	x1, [sp, #56]
 6d0:	mov	x0, x19
 6d4:	bl	474 <ctf_dump_append>
 6d8:	mov	w0, #0x0                   	// #0
 6dc:	b	6bc <ctf_dump_header_strfield+0x54>
 6e0:	mov	w0, #0x0                   	// #0
 6e4:	ret

00000000000006e8 <ctf_dump_var>:
 6e8:	stp	x29, x30, [sp, #-48]!
 6ec:	mov	x29, sp
 6f0:	stp	x19, x20, [sp, #16]
 6f4:	mov	x20, x1
 6f8:	mov	x19, x2
 6fc:	adrp	x1, 0 <ctf_is_slice>
 700:	mov	x2, x0
 704:	add	x1, x1, #0x0
 708:	add	x0, sp, #0x28
 70c:	bl	0 <asprintf>
 710:	tbz	w0, #31, 730 <ctf_dump_var+0x48>
 714:	bl	0 <__errno_location>
 718:	ldr	w1, [x0]
 71c:	ldr	x0, [x19, #8]
 720:	bl	0 <ctf_set_errno>
 724:	ldp	x19, x20, [sp, #16]
 728:	ldp	x29, x30, [sp], #48
 72c:	ret
 730:	ldr	x0, [x19, #8]
 734:	mov	x1, x20
 738:	mov	w2, #0x1                   	// #1
 73c:	bl	290 <ctf_dump_format_type>
 740:	mov	x20, x0
 744:	cbnz	x0, 758 <ctf_dump_var+0x70>
 748:	ldr	x0, [sp, #40]
 74c:	bl	0 <free>
 750:	mov	w0, #0xffffffff            	// #-1
 754:	b	724 <ctf_dump_var+0x3c>
 758:	mov	x1, x0
 75c:	ldr	x0, [sp, #40]
 760:	bl	0 <ctf_str_append_noerr>
 764:	str	x0, [sp, #40]
 768:	mov	x0, x20
 76c:	bl	0 <free>
 770:	ldr	x1, [sp, #40]
 774:	mov	x0, x19
 778:	bl	474 <ctf_dump_append>
 77c:	mov	w0, #0x0                   	// #0
 780:	b	724 <ctf_dump_var+0x3c>

0000000000000784 <ctf_dump_header_sectfield>:
 784:	cmp	w4, w3
 788:	b.eq	7f0 <ctf_dump_header_sectfield+0x6c>  // b.none
 78c:	stp	x29, x30, [sp, #-48]!
 790:	sub	w5, w4, w3
 794:	sub	w4, w4, #0x1
 798:	mov	x29, sp
 79c:	mov	w3, w3
 7a0:	stp	x19, x20, [sp, #16]
 7a4:	mov	x20, x0
 7a8:	mov	x19, x1
 7ac:	add	x0, sp, #0x28
 7b0:	adrp	x1, 0 <ctf_is_slice>
 7b4:	add	x1, x1, #0x0
 7b8:	bl	0 <asprintf>
 7bc:	tbz	w0, #31, 7dc <ctf_dump_header_sectfield+0x58>
 7c0:	bl	0 <__errno_location>
 7c4:	ldr	w1, [x0]
 7c8:	mov	x0, x20
 7cc:	bl	0 <ctf_set_errno>
 7d0:	ldp	x19, x20, [sp, #16]
 7d4:	ldp	x29, x30, [sp], #48
 7d8:	ret
 7dc:	ldr	x1, [sp, #40]
 7e0:	mov	x0, x19
 7e4:	bl	474 <ctf_dump_append>
 7e8:	mov	w0, #0x0                   	// #0
 7ec:	b	7d0 <ctf_dump_header_sectfield+0x4c>
 7f0:	mov	w0, #0x0                   	// #0
 7f4:	ret

00000000000007f8 <ctf_dump>:
 7f8:	stp	x29, x30, [sp, #-176]!
 7fc:	mov	x29, sp
 800:	stp	x19, x20, [sp, #16]
 804:	mov	x20, x0
 808:	ldr	x19, [x1]
 80c:	stp	x21, x22, [sp, #32]
 810:	stp	x23, x24, [sp, #48]
 814:	mov	x24, x1
 818:	mov	w23, w2
 81c:	stp	x25, x26, [sp, #64]
 820:	mov	x26, x3
 824:	stp	x27, x28, [sp, #80]
 828:	str	x4, [sp, #104]
 82c:	cbnz	x19, ed8 <ctf_dump+0x6e0>
 830:	mov	x0, #0x28                  	// #40
 834:	bl	0 <malloc>
 838:	str	x0, [x24]
 83c:	mov	x19, x0
 840:	cbnz	x0, 870 <ctf_dump+0x78>
 844:	mov	x0, x20
 848:	mov	w1, #0xc                   	// #12
 84c:	bl	0 <ctf_set_errno>
 850:	mov	x0, x19
 854:	bl	0 <free>
 858:	mov	x0, x20
 85c:	mov	w1, #0x0                   	// #0
 860:	mov	x19, #0x0                   	// #0
 864:	bl	0 <ctf_set_errno>
 868:	str	xzr, [x24]
 86c:	b	ab8 <ctf_dump+0x2c0>
 870:	stp	xzr, xzr, [x0]
 874:	cmp	w23, #0x6
 878:	str	w23, [x0]
 87c:	str	x20, [x0, #8]
 880:	stp	xzr, xzr, [x0, #16]
 884:	str	xzr, [x0, #32]
 888:	b.hi	ec8 <ctf_dump+0x6d0>  // b.pmore
 88c:	adrp	x0, 0 <ctf_is_slice>
 890:	add	x0, x0, #0x0
 894:	ldrh	w0, [x0, w23, uxtw #1]
 898:	adr	x1, 8a4 <ctf_dump+0xac>
 89c:	add	x0, x1, w0, sxth #2
 8a0:	br	x0
 8a4:	adrp	x0, 0 <ctf_is_slice>
 8a8:	add	x0, x0, #0x0
 8ac:	ldr	x21, [x20, #8]
 8b0:	ldp	x2, x3, [x0]
 8b4:	stp	x2, x3, [sp, #128]
 8b8:	ldp	x2, x3, [x0, #16]
 8bc:	stp	x2, x3, [sp, #144]
 8c0:	ldrh	w2, [x21]
 8c4:	ldp	x0, x1, [x0, #32]
 8c8:	stp	x0, x1, [sp, #160]
 8cc:	add	x0, sp, #0x78
 8d0:	adrp	x1, 0 <ctf_is_slice>
 8d4:	add	x1, x1, #0x0
 8d8:	bl	0 <asprintf>
 8dc:	tbz	w0, #31, 8ec <ctf_dump+0xf4>
 8e0:	bl	0 <__errno_location>
 8e4:	ldr	w1, [x0]
 8e8:	b	b04 <ctf_dump+0x30c>
 8ec:	ldr	x1, [sp, #120]
 8f0:	mov	x0, x19
 8f4:	bl	474 <ctf_dump_append>
 8f8:	ldrb	w2, [x21, #2]
 8fc:	cmp	w2, #0x4
 900:	b.hi	910 <ctf_dump+0x118>  // b.pmore
 904:	add	x0, sp, #0x80
 908:	ldr	x3, [x0, w2, sxtw #3]
 90c:	cbnz	x3, 918 <ctf_dump+0x120>
 910:	adrp	x3, 0 <ctf_is_slice>
 914:	add	x3, x3, #0x0
 918:	adrp	x1, 0 <ctf_is_slice>
 91c:	add	x0, sp, #0x78
 920:	add	x1, x1, #0x0
 924:	bl	0 <asprintf>
 928:	tbnz	w0, #31, 8e0 <ctf_dump+0xe8>
 92c:	ldr	x1, [sp, #120]
 930:	mov	x0, x19
 934:	bl	474 <ctf_dump_append>
 938:	ldrb	w2, [x20, #16]
 93c:	cbz	w2, 978 <ctf_dump+0x180>
 940:	tst	x2, #0x1
 944:	adrp	x0, 0 <ctf_is_slice>
 948:	adrp	x3, 0 <ctf_is_slice>
 94c:	add	x0, x0, #0x0
 950:	add	x3, x3, #0x0
 954:	adrp	x1, 0 <ctf_is_slice>
 958:	csel	x3, x3, x0, ne  // ne = any
 95c:	add	x1, x1, #0x0
 960:	add	x0, sp, #0x78
 964:	bl	0 <asprintf>
 968:	tbnz	w0, #31, 8e0 <ctf_dump+0xe8>
 96c:	ldr	x1, [sp, #120]
 970:	mov	x0, x19
 974:	bl	474 <ctf_dump_append>
 978:	ldr	w3, [x21, #4]
 97c:	adrp	x2, 0 <ctf_is_slice>
 980:	mov	x1, x19
 984:	add	x2, x2, #0x0
 988:	mov	x0, x20
 98c:	bl	668 <ctf_dump_header_strfield>
 990:	tbnz	w0, #31, 8e0 <ctf_dump+0xe8>
 994:	ldr	w3, [x21, #8]
 998:	adrp	x2, 0 <ctf_is_slice>
 99c:	mov	x1, x19
 9a0:	add	x2, x2, #0x0
 9a4:	mov	x0, x20
 9a8:	bl	668 <ctf_dump_header_strfield>
 9ac:	tbnz	w0, #31, 8e0 <ctf_dump+0xe8>
 9b0:	ldr	w3, [x21, #12]
 9b4:	adrp	x2, 0 <ctf_is_slice>
 9b8:	mov	x1, x19
 9bc:	add	x2, x2, #0x0
 9c0:	mov	x0, x20
 9c4:	bl	668 <ctf_dump_header_strfield>
 9c8:	tbnz	w0, #31, 8e0 <ctf_dump+0xe8>
 9cc:	ldp	w3, w4, [x21, #16]
 9d0:	adrp	x2, 0 <ctf_is_slice>
 9d4:	mov	x1, x19
 9d8:	add	x2, x2, #0x0
 9dc:	mov	x0, x20
 9e0:	bl	784 <ctf_dump_header_sectfield>
 9e4:	tbnz	w0, #31, 8e0 <ctf_dump+0xe8>
 9e8:	ldp	w3, w4, [x21, #20]
 9ec:	adrp	x2, 0 <ctf_is_slice>
 9f0:	mov	x1, x19
 9f4:	add	x2, x2, #0x0
 9f8:	mov	x0, x20
 9fc:	bl	784 <ctf_dump_header_sectfield>
 a00:	tbnz	w0, #31, 8e0 <ctf_dump+0xe8>
 a04:	ldr	w3, [x21, #24]
 a08:	adrp	x2, 0 <ctf_is_slice>
 a0c:	ldr	w4, [x21, #36]
 a10:	add	x2, x2, #0x0
 a14:	mov	x1, x19
 a18:	mov	x0, x20
 a1c:	bl	784 <ctf_dump_header_sectfield>
 a20:	tbnz	w0, #31, 8e0 <ctf_dump+0xe8>
 a24:	ldp	w3, w4, [x21, #36]
 a28:	adrp	x2, 0 <ctf_is_slice>
 a2c:	mov	x1, x19
 a30:	add	x2, x2, #0x0
 a34:	mov	x0, x20
 a38:	bl	784 <ctf_dump_header_sectfield>
 a3c:	tbnz	w0, #31, 8e0 <ctf_dump+0xe8>
 a40:	ldp	w3, w4, [x21, #40]
 a44:	adrp	x2, 0 <ctf_is_slice>
 a48:	mov	x1, x19
 a4c:	add	x2, x2, #0x0
 a50:	mov	x0, x20
 a54:	bl	784 <ctf_dump_header_sectfield>
 a58:	tbnz	w0, #31, 8e0 <ctf_dump+0xe8>
 a5c:	ldp	w3, w4, [x21, #44]
 a60:	adrp	x2, 0 <ctf_is_slice>
 a64:	mov	x1, x19
 a68:	add	x2, x2, #0x0
 a6c:	add	w4, w3, w4
 a70:	mov	x0, x20
 a74:	add	w4, w4, #0x1
 a78:	bl	784 <ctf_dump_header_sectfield>
 a7c:	tbnz	w0, #31, 8e0 <ctf_dump+0xe8>
 a80:	ldr	x0, [x19, #16]
 a84:	cbnz	x0, eec <ctf_dump+0x6f4>
 a88:	ldr	x0, [x19, #32]
 a8c:	str	x0, [x19, #16]
 a90:	cbz	x0, b44 <ctf_dump+0x34c>
 a94:	ldr	x21, [x0, #16]
 a98:	cbnz	x26, f84 <ctf_dump+0x78c>
 a9c:	mov	x0, x21
 aa0:	bl	0 <strdup>
 aa4:	mov	x19, x0
 aa8:	cbnz	x0, f7c <ctf_dump+0x784>
 aac:	mov	w1, #0xc                   	// #12
 ab0:	mov	x0, x20
 ab4:	bl	0 <ctf_set_errno>
 ab8:	mov	x0, x19
 abc:	ldp	x19, x20, [sp, #16]
 ac0:	ldp	x21, x22, [sp, #32]
 ac4:	ldp	x23, x24, [sp, #48]
 ac8:	ldp	x25, x26, [sp, #64]
 acc:	ldp	x27, x28, [sp, #80]
 ad0:	ldp	x29, x30, [sp], #176
 ad4:	ret
 ad8:	adrp	x1, 0 <ctf_is_slice>
 adc:	mov	x2, x19
 ae0:	add	x1, x1, #0x0
 ae4:	mov	x0, x20
 ae8:	bl	0 <ctf_label_iter>
 aec:	tbz	w0, #31, a80 <ctf_dump+0x288>
 af0:	mov	x0, x20
 af4:	bl	0 <ctf_errno>
 af8:	cmp	w0, #0x409
 afc:	b.ne	b44 <ctf_dump+0x34c>  // b.any
 b00:	mov	w1, #0x0                   	// #0
 b04:	mov	x0, x20
 b08:	bl	0 <ctf_set_errno>
 b0c:	b	a80 <ctf_dump+0x288>
 b10:	mov	x3, x21
 b14:	mov	x1, x25
 b18:	add	x0, sp, #0x80
 b1c:	bl	0 <asprintf>
 b20:	b	bdc <ctf_dump+0x3e4>
 b24:	ldr	x0, [x19, #8]
 b28:	mov	x1, x22
 b2c:	mov	w2, #0x1                   	// #1
 b30:	bl	290 <ctf_dump_format_type>
 b34:	mov	x22, x0
 b38:	cbnz	x0, b4c <ctf_dump+0x354>
 b3c:	ldr	x0, [sp, #128]
 b40:	bl	0 <free>
 b44:	ldr	x21, [x19, #32]
 b48:	b	fb0 <ctf_dump+0x7b8>
 b4c:	mov	x1, x0
 b50:	ldr	x0, [sp, #128]
 b54:	bl	0 <ctf_str_append_noerr>
 b58:	str	x0, [sp, #128]
 b5c:	mov	x0, x22
 b60:	bl	0 <free>
 b64:	ldr	x1, [sp, #128]
 b68:	mov	x0, x19
 b6c:	bl	474 <ctf_dump_append>
 b70:	add	x21, x21, #0x1
 b74:	ldr	x0, [x20, #432]
 b78:	cmp	x21, x0
 b7c:	b.cs	a80 <ctf_dump+0x288>  // b.hs, b.nlast
 b80:	ldr	x0, [x19, #8]
 b84:	mov	x1, x21
 b88:	bl	0 <ctf_lookup_by_symbol>
 b8c:	mov	x22, x0
 b90:	cmn	x0, #0x1
 b94:	b.ne	bb4 <ctf_dump+0x3bc>  // b.any
 b98:	ldr	x0, [x19, #8]
 b9c:	bl	0 <ctf_errno>
 ba0:	cmp	w0, #0x3f2
 ba4:	b.eq	b44 <ctf_dump+0x34c>  // b.none
 ba8:	sub	w0, w0, #0x406
 bac:	cmp	w0, #0x1
 bb0:	b.ls	b70 <ctf_dump+0x378>  // b.plast
 bb4:	mov	x1, x21
 bb8:	mov	x0, x20
 bbc:	bl	0 <ctf_lookup_symbol_name>
 bc0:	mov	x2, x0
 bc4:	ldrb	w0, [x0]
 bc8:	cbnz	w0, b10 <ctf_dump+0x318>
 bcc:	mov	x2, x21
 bd0:	mov	x1, x28
 bd4:	add	x0, sp, #0x80
 bd8:	bl	0 <asprintf>
 bdc:	tbz	w0, #31, b24 <ctf_dump+0x32c>
 be0:	bl	0 <__errno_location>
 be4:	ldr	w1, [x0]
 be8:	b	d48 <ctf_dump+0x550>
 bec:	adrp	x25, 0 <ctf_is_slice>
 bf0:	adrp	x28, 0 <ctf_is_slice>
 bf4:	add	x25, x25, #0x0
 bf8:	add	x28, x28, #0x0
 bfc:	mov	x21, #0x0                   	// #0
 c00:	b	b74 <ctf_dump+0x37c>
 c04:	ldr	x0, [x19, #8]
 c08:	mov	x1, x25
 c0c:	bl	0 <ctf_type_aname>
 c10:	mov	x27, x0
 c14:	cbz	x0, de0 <ctf_dump+0x5e8>
 c18:	adrp	x1, 0 <ctf_is_slice>
 c1c:	add	x1, x1, #0x0
 c20:	bl	0 <ctf_str_append_noerr>
 c24:	mov	x25, x0
 c28:	mov	x1, x21
 c2c:	mov	x0, x20
 c30:	bl	0 <ctf_lookup_symbol_name>
 c34:	mov	x2, x0
 c38:	ldrb	w0, [x0]
 c3c:	cbnz	w0, d58 <ctf_dump+0x560>
 c40:	adrp	x1, 0 <ctf_is_slice>
 c44:	mov	x2, x21
 c48:	add	x1, x1, #0x0
 c4c:	add	x0, sp, #0x78
 c50:	bl	0 <asprintf>
 c54:	tbnz	w0, #31, dcc <ctf_dump+0x5d4>
 c58:	ldr	x1, [sp, #120]
 c5c:	mov	x0, x25
 c60:	bl	0 <ctf_str_append_noerr>
 c64:	adrp	x1, 0 <ctf_is_slice>
 c68:	add	x1, x1, #0x0
 c6c:	bl	0 <ctf_str_append_noerr>
 c70:	mov	x27, x0
 c74:	ldr	x0, [sp, #120]
 c78:	bl	0 <free>
 c7c:	ldr	w2, [sp, #136]
 c80:	mov	x3, x22
 c84:	ldr	x0, [x19, #8]
 c88:	mov	x1, x21
 c8c:	bl	0 <ctf_func_args>
 c90:	tbnz	w0, #31, e1c <ctf_dump+0x624>
 c94:	mov	x25, #0x0                   	// #0
 c98:	ldr	w0, [sp, #136]
 c9c:	cmp	x25, x0
 ca0:	b.cc	d70 <ctf_dump+0x578>  // b.lo, b.ul, b.last
 ca4:	ldr	w0, [sp, #140]
 ca8:	tbz	w0, #0, cc0 <ctf_dump+0x4c8>
 cac:	mov	x0, x27
 cb0:	adrp	x1, 0 <ctf_is_slice>
 cb4:	add	x1, x1, #0x0
 cb8:	bl	0 <ctf_str_append_noerr>
 cbc:	mov	x27, x0
 cc0:	adrp	x1, 0 <ctf_is_slice>
 cc4:	add	x1, x1, #0x0
 cc8:	mov	x0, x27
 ccc:	bl	0 <ctf_str_append_noerr>
 cd0:	mov	x25, x0
 cd4:	mov	x0, x22
 cd8:	bl	0 <free>
 cdc:	mov	x1, x25
 ce0:	mov	x0, x19
 ce4:	bl	474 <ctf_dump_append>
 ce8:	add	x21, x21, #0x1
 cec:	ldr	x0, [x20, #432]
 cf0:	cmp	x21, x0
 cf4:	b.cs	a80 <ctf_dump+0x288>  // b.hs, b.nlast
 cf8:	ldr	x0, [x19, #8]
 cfc:	add	x2, sp, #0x80
 d00:	mov	x1, x21
 d04:	bl	0 <ctf_func_info>
 d08:	sxtw	x25, w0
 d0c:	cmn	w0, #0x1
 d10:	b.ne	d30 <ctf_dump+0x538>  // b.any
 d14:	ldr	x0, [x19, #8]
 d18:	bl	0 <ctf_errno>
 d1c:	cmp	w0, #0x3f2
 d20:	b.eq	b44 <ctf_dump+0x34c>  // b.none
 d24:	sub	w0, w0, #0x404
 d28:	cmp	w0, #0x2
 d2c:	b.ls	ce8 <ctf_dump+0x4f0>  // b.plast
 d30:	ldr	w0, [sp, #136]
 d34:	mov	x1, #0x8                   	// #8
 d38:	bl	0 <calloc>
 d3c:	mov	x22, x0
 d40:	cbnz	x0, c04 <ctf_dump+0x40c>
 d44:	mov	w1, #0xc                   	// #12
 d48:	mov	x0, x20
 d4c:	bl	0 <ctf_set_errno>
 d50:	tbz	w0, #31, a80 <ctf_dump+0x288>
 d54:	b	b44 <ctf_dump+0x34c>
 d58:	mov	x3, x21
 d5c:	add	x0, sp, #0x78
 d60:	adrp	x1, 0 <ctf_is_slice>
 d64:	add	x1, x1, #0x0
 d68:	bl	0 <asprintf>
 d6c:	b	c54 <ctf_dump+0x45c>
 d70:	ldr	x1, [x22, x25, lsl #3]
 d74:	ldr	x0, [x19, #8]
 d78:	bl	0 <ctf_type_aname>
 d7c:	str	x0, [sp, #120]
 d80:	mov	x1, x0
 d84:	cbz	x0, e28 <ctf_dump+0x630>
 d88:	mov	x0, x27
 d8c:	bl	0 <ctf_str_append_noerr>
 d90:	mov	x27, x0
 d94:	ldr	w0, [sp, #136]
 d98:	sub	w0, w0, #0x1
 d9c:	cmp	x25, x0
 da0:	b.cc	dac <ctf_dump+0x5b4>  // b.lo, b.ul, b.last
 da4:	ldr	w0, [sp, #140]
 da8:	tbz	w0, #0, dbc <ctf_dump+0x5c4>
 dac:	mov	x0, x27
 db0:	mov	x1, x28
 db4:	bl	0 <ctf_str_append_noerr>
 db8:	mov	x27, x0
 dbc:	ldr	x0, [sp, #120]
 dc0:	add	x25, x25, #0x1
 dc4:	bl	0 <free>
 dc8:	b	c98 <ctf_dump+0x4a0>
 dcc:	mov	x0, x22
 dd0:	bl	0 <free>
 dd4:	mov	x0, x25
 dd8:	bl	0 <free>
 ddc:	b	be0 <ctf_dump+0x3e8>
 de0:	adrp	x23, 0 <ctf_is_slice>
 de4:	add	x23, x23, #0x0
 de8:	ldr	x0, [x19, #8]
 dec:	bl	0 <ctf_errno>
 df0:	bl	0 <ctf_errmsg>
 df4:	mov	x3, x0
 df8:	mov	x2, x21
 dfc:	mov	x1, x23
 e00:	adrp	x0, 0 <ctf_is_slice>
 e04:	add	x0, x0, #0x0
 e08:	bl	0 <ctf_dprintf>
 e0c:	mov	x0, x22
 e10:	bl	0 <free>
 e14:	mov	x0, x27
 e18:	b	b40 <ctf_dump+0x348>
 e1c:	adrp	x23, 0 <ctf_is_slice>
 e20:	add	x23, x23, #0x0
 e24:	b	de8 <ctf_dump+0x5f0>
 e28:	adrp	x23, 0 <ctf_is_slice>
 e2c:	add	x23, x23, #0x0
 e30:	b	de8 <ctf_dump+0x5f0>
 e34:	adrp	x28, 0 <ctf_is_slice>
 e38:	mov	x21, #0x0                   	// #0
 e3c:	add	x28, x28, #0x0
 e40:	b	cec <ctf_dump+0x4f4>
 e44:	mov	x2, x19
 e48:	mov	x0, x20
 e4c:	adrp	x1, 0 <ctf_is_slice>
 e50:	add	x1, x1, #0x0
 e54:	bl	0 <ctf_variable_iter>
 e58:	b	d50 <ctf_dump+0x558>
 e5c:	mov	x2, x19
 e60:	mov	x0, x20
 e64:	adrp	x1, 0 <ctf_is_slice>
 e68:	add	x1, x1, #0x0
 e6c:	bl	0 <ctf_type_iter_all>
 e70:	b	d50 <ctf_dump+0x558>
 e74:	ldr	x21, [x20, #336]
 e78:	adrp	x22, 0 <ctf_is_slice>
 e7c:	add	x22, x22, #0x0
 e80:	ldp	x2, x0, [x20, #336]
 e84:	add	x0, x2, x0
 e88:	cmp	x21, x0
 e8c:	b.cs	a80 <ctf_dump+0x288>  // b.hs, b.nlast
 e90:	mov	x3, x21
 e94:	sub	x2, x21, x2
 e98:	mov	x1, x22
 e9c:	add	x0, sp, #0x80
 ea0:	bl	0 <asprintf>
 ea4:	tbnz	w0, #31, 8e0 <ctf_dump+0xe8>
 ea8:	ldr	x1, [sp, #128]
 eac:	mov	x0, x19
 eb0:	bl	474 <ctf_dump_append>
 eb4:	mov	x0, x21
 eb8:	bl	0 <strlen>
 ebc:	add	x0, x0, #0x1
 ec0:	add	x21, x21, x0
 ec4:	b	e80 <ctf_dump+0x688>
 ec8:	mov	x0, x20
 ecc:	mov	w1, #0x417                 	// #1047
 ed0:	bl	0 <ctf_set_errno>
 ed4:	b	b44 <ctf_dump+0x34c>
 ed8:	ldr	w1, [x19]
 edc:	cmp	w1, w2
 ee0:	b.eq	a80 <ctf_dump+0x288>  // b.none
 ee4:	mov	w1, #0x418                 	// #1048
 ee8:	b	ed0 <ctf_dump+0x6d8>
 eec:	ldr	x0, [x0, #8]
 ef0:	b	a8c <ctf_dump+0x294>
 ef4:	mov	x0, x21
 ef8:	mov	w1, #0xa                   	// #10
 efc:	bl	0 <strchr>
 f00:	mov	x22, x0
 f04:	cbz	x0, f0c <ctf_dump+0x714>
 f08:	strb	wzr, [x0]
 f0c:	ldr	x2, [sp, #104]
 f10:	mov	x1, x21
 f14:	mov	w0, w23
 f18:	blr	x26
 f1c:	mov	x1, x0
 f20:	mov	x28, x0
 f24:	mov	x0, x19
 f28:	bl	0 <ctf_str_append_noerr>
 f2c:	mov	x1, x24
 f30:	bl	0 <ctf_str_append_noerr>
 f34:	cmp	x21, x28
 f38:	mov	x19, x0
 f3c:	b.eq	f48 <ctf_dump+0x750>  // b.none
 f40:	mov	x0, x28
 f44:	bl	0 <free>
 f48:	cbz	x22, f60 <ctf_dump+0x768>
 f4c:	mov	x21, x22
 f50:	strb	w25, [x21], #1
 f54:	cbz	x21, f60 <ctf_dump+0x768>
 f58:	ldrb	w0, [x21]
 f5c:	cbnz	w0, ef4 <ctf_dump+0x6fc>
 f60:	mov	x0, x19
 f64:	bl	0 <strlen>
 f68:	sub	x0, x0, #0x1
 f6c:	ldrb	w1, [x19, x0]
 f70:	cmp	w1, #0xa
 f74:	b.ne	f7c <ctf_dump+0x784>  // b.any
 f78:	strb	wzr, [x19, x0]
 f7c:	mov	w1, #0x0                   	// #0
 f80:	b	ab0 <ctf_dump+0x2b8>
 f84:	adrp	x24, 0 <ctf_is_slice>
 f88:	mov	x19, #0x0                   	// #0
 f8c:	add	x24, x24, #0x0
 f90:	mov	w25, #0xa                   	// #10
 f94:	b	f54 <ctf_dump+0x75c>
 f98:	ldr	x0, [x21, #16]
 f9c:	bl	0 <free>
 fa0:	ldr	x22, [x21, #8]
 fa4:	mov	x0, x21
 fa8:	bl	0 <free>
 fac:	mov	x21, x22
 fb0:	cbnz	x21, f98 <ctf_dump+0x7a0>
 fb4:	b	850 <ctf_dump+0x58>

ctf-create.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <clp2>:
       0:	sub	x0, x0, #0x1
       4:	orr	x0, x0, x0, lsr #1
       8:	orr	x0, x0, x0, lsr #2
       c:	orr	x0, x0, x0, lsr #4
      10:	orr	x0, x0, x0, lsr #8
      14:	orr	x0, x0, x0, lsr #16
      18:	add	x0, x0, #0x1
      1c:	ret

0000000000000020 <ctf_sort_var>:
      20:	stp	x29, x30, [sp, #-48]!
      24:	mov	x29, sp
      28:	stp	x19, x20, [sp, #16]
      2c:	mov	x19, x2
      30:	ldr	x2, [x2, #8]
      34:	str	x21, [sp, #32]
      38:	mov	x21, x1
      3c:	ldr	w1, [x0]
      40:	ldr	x0, [x19]
      44:	bl	0 <ctf_strraw_explicit>
      48:	mov	x20, x0
      4c:	ldp	x0, x2, [x19]
      50:	ldr	w1, [x21]
      54:	bl	0 <ctf_strraw_explicit>
      58:	mov	x1, x0
      5c:	mov	x0, x20
      60:	ldp	x19, x20, [sp, #16]
      64:	ldr	x21, [sp, #32]
      68:	ldp	x29, x30, [sp], #48
      6c:	b	0 <strcmp>

0000000000000070 <ctf_grow_ptrtab>:
      70:	stp	x29, x30, [sp, #-32]!
      74:	mov	x29, sp
      78:	stp	x19, x20, [sp, #16]
      7c:	mov	x19, x0
      80:	ldr	x1, [x0, #456]
      84:	ldr	x0, [x0, #448]
      88:	cbz	x0, d8 <ctf_grow_ptrtab+0x68>
      8c:	ldr	x2, [x19, #480]
      90:	add	x2, x2, #0x2
      94:	cmp	x2, x1
      98:	b.ls	100 <ctf_grow_ptrtab+0x90>  // b.plast
      9c:	ucvtf	d0, x1
      a0:	fmov	d1, #1.250000000000000000e+00
      a4:	fmul	d0, d0, d1
      a8:	fcvtzu	x20, d0
      ac:	cmp	x20, x1
      b0:	b.eq	100 <ctf_grow_ptrtab+0x90>  // b.none
      b4:	lsl	x1, x20, #2
      b8:	bl	0 <realloc>
      bc:	cbnz	x0, e0 <ctf_grow_ptrtab+0x70>
      c0:	mov	x0, x19
      c4:	mov	w1, #0xc                   	// #12
      c8:	bl	0 <ctf_set_errno>
      cc:	ldp	x19, x20, [sp, #16]
      d0:	ldp	x29, x30, [sp], #32
      d4:	ret
      d8:	mov	x20, #0x400                 	// #1024
      dc:	b	ac <ctf_grow_ptrtab+0x3c>
      e0:	ldr	x3, [x19, #456]
      e4:	str	x0, [x19, #448]
      e8:	mov	w1, #0x0                   	// #0
      ec:	sub	x2, x20, x3
      f0:	add	x0, x0, x3, lsl #2
      f4:	lsl	x2, x2, #2
      f8:	bl	0 <memset>
      fc:	str	x20, [x19, #456]
     100:	mov	w0, #0x0                   	// #0
     104:	b	cc <ctf_grow_ptrtab+0x5c>

0000000000000108 <membadd>:
     108:	stp	x29, x30, [sp, #-64]!
     10c:	mov	x29, sp
     110:	stp	x19, x20, [sp, #16]
     114:	mov	x20, x0
     118:	mov	x0, #0x30                  	// #48
     11c:	stp	x21, x22, [sp, #32]
     120:	mov	x22, x2
     124:	mov	x21, x3
     128:	str	x23, [sp, #48]
     12c:	mov	x23, x1
     130:	bl	0 <malloc>
     134:	cbnz	x0, 158 <membadd+0x50>
     138:	ldr	x0, [x21]
     13c:	mov	w1, #0xb                   	// #11
     140:	bl	0 <ctf_set_errno>
     144:	ldp	x19, x20, [sp, #16]
     148:	ldp	x21, x22, [sp, #32]
     14c:	ldr	x23, [sp, #48]
     150:	ldp	x29, x30, [sp], #64
     154:	ret
     158:	mov	x19, x0
     15c:	cbz	x20, 17c <membadd+0x74>
     160:	mov	x0, x20
     164:	bl	0 <strdup>
     168:	mov	x20, x0
     16c:	cbnz	x0, 17c <membadd+0x74>
     170:	mov	x0, x19
     174:	bl	0 <free>
     178:	b	138 <membadd+0x30>
     17c:	mov	w0, #0xffffffff            	// #-1
     180:	str	w0, [x19, #40]
     184:	ldr	x0, [x21, #16]
     188:	stp	x20, x23, [x19, #16]
     18c:	mov	x1, x19
     190:	str	x22, [x19, #32]
     194:	add	x0, x0, #0x30
     198:	bl	0 <ctf_list_append>
     19c:	ldr	x1, [x21]
     1a0:	ldr	w0, [x1, #552]
     1a4:	orr	w0, w0, #0x4
     1a8:	str	w0, [x1, #552]
     1ac:	mov	w0, #0x0                   	// #0
     1b0:	b	144 <membadd+0x3c>

00000000000001b4 <enumcmp>:
     1b4:	stp	x29, x30, [sp, #-64]!
     1b8:	mov	x29, sp
     1bc:	stp	x19, x20, [sp, #16]
     1c0:	mov	x19, x2
     1c4:	mov	w20, w1
     1c8:	mov	x2, x0
     1cc:	add	x3, sp, #0x3c
     1d0:	ldr	x1, [x19, #8]
     1d4:	str	x21, [sp, #32]
     1d8:	mov	x21, x0
     1dc:	ldr	x0, [x19]
     1e0:	bl	0 <ctf_enum_value>
     1e4:	tbz	w0, #31, 21c <enumcmp+0x68>
     1e8:	ldr	x0, [x19]
     1ec:	bl	0 <ctf_errno>
     1f0:	bl	0 <ctf_errmsg>
     1f4:	mov	x2, x0
     1f8:	mov	x1, x21
     1fc:	adrp	x0, 0 <clp2>
     200:	add	x0, x0, #0x0
     204:	bl	0 <ctf_dprintf>
     208:	mov	w0, #0x1                   	// #1
     20c:	ldp	x19, x20, [sp, #16]
     210:	ldr	x21, [sp, #32]
     214:	ldp	x29, x30, [sp], #64
     218:	ret
     21c:	ldr	w2, [sp, #60]
     220:	cmp	w2, w20
     224:	b.eq	23c <enumcmp+0x88>  // b.none
     228:	mov	w1, w20
     22c:	adrp	x0, 0 <clp2>
     230:	add	x0, x0, #0x0
     234:	bl	0 <ctf_dprintf>
     238:	b	208 <enumcmp+0x54>
     23c:	mov	w0, #0x0                   	// #0
     240:	b	20c <enumcmp+0x58>

0000000000000244 <membcmp>:
     244:	stp	x29, x30, [sp, #-64]!
     248:	mov	x29, sp
     24c:	stp	x19, x20, [sp, #16]
     250:	mov	x20, x3
     254:	mov	x19, x0
     258:	add	x3, sp, #0x30
     25c:	ldr	x1, [x20, #8]
     260:	str	x21, [sp, #32]
     264:	mov	x21, x2
     268:	mov	x2, x0
     26c:	ldr	x0, [x20]
     270:	bl	0 <ctf_member_info>
     274:	tbz	w0, #31, 2ac <membcmp+0x68>
     278:	ldr	x0, [x20]
     27c:	bl	0 <ctf_errno>
     280:	bl	0 <ctf_errmsg>
     284:	mov	x2, x0
     288:	mov	x1, x19
     28c:	adrp	x0, 0 <clp2>
     290:	add	x0, x0, #0x0
     294:	bl	0 <ctf_dprintf>
     298:	mov	w0, #0x1                   	// #1
     29c:	ldp	x19, x20, [sp, #16]
     2a0:	ldr	x21, [sp, #32]
     2a4:	ldp	x29, x30, [sp], #64
     2a8:	ret
     2ac:	ldr	x2, [sp, #56]
     2b0:	cmp	x2, x21
     2b4:	b.eq	2d0 <membcmp+0x8c>  // b.none
     2b8:	mov	x3, x21
     2bc:	mov	x1, x19
     2c0:	adrp	x0, 0 <clp2>
     2c4:	add	x0, x0, #0x0
     2c8:	bl	0 <ctf_dprintf>
     2cc:	b	298 <membcmp+0x54>
     2d0:	mov	w0, #0x0                   	// #0
     2d4:	b	29c <membcmp+0x58>

00000000000002d8 <ctf_serialize.part.0>:
     2d8:	sub	sp, sp, #0x3d0
     2dc:	stp	x29, x30, [sp, #16]
     2e0:	add	x29, sp, #0x10
     2e4:	stp	x27, x28, [sp, #96]
     2e8:	mov	x28, x0
     2ec:	mov	w0, #0xffffdff2            	// #-8206
     2f0:	stp	x21, x22, [sp, #48]
     2f4:	adrp	x22, 0 <clp2>
     2f8:	add	x22, x22, #0x0
     2fc:	ldr	x21, [x28, #584]
     300:	stp	x23, x24, [sp, #64]
     304:	adrp	x23, 0 <clp2>
     308:	add	x23, x23, #0x0
     30c:	stp	xzr, xzr, [sp, #192]
     310:	stp	x19, x20, [sp, #32]
     314:	mov	x19, #0x0                   	// #0
     318:	stp	x25, x26, [sp, #80]
     31c:	mov	w25, #0x1fffffff            	// #536870911
     320:	strh	w0, [sp, #192]
     324:	mov	w0, #0x4                   	// #4
     328:	strb	w0, [sp, #194]
     32c:	stp	xzr, xzr, [sp, #208]
     330:	stp	xzr, xzr, [sp, #224]
     334:	str	wzr, [sp, #240]
     338:	cbnz	x21, 390 <ctf_serialize.part.0+0xb8>
     33c:	ldr	x0, [x28, #608]
     340:	cbnz	x0, 44c <ctf_serialize.part.0+0x174>
     344:	lsl	w0, w21, #3
     348:	add	w19, w0, w19
     34c:	stp	w0, w19, [sp, #232]
     350:	add	x19, x19, #0x34
     354:	mov	x0, x19
     358:	bl	0 <malloc>
     35c:	mov	x20, x0
     360:	cbnz	x0, 458 <ctf_serialize.part.0+0x180>
     364:	mov	w1, #0xb                   	// #11
     368:	mov	x0, x28
     36c:	bl	0 <ctf_set_errno>
     370:	ldp	x29, x30, [sp, #16]
     374:	ldp	x19, x20, [sp, #32]
     378:	ldp	x21, x22, [sp, #48]
     37c:	ldp	x23, x24, [sp, #64]
     380:	ldp	x25, x26, [sp, #80]
     384:	ldp	x27, x28, [sp, #96]
     388:	add	sp, sp, #0x3d0
     38c:	ret
     390:	ldr	x0, [x28]
     394:	ldr	x1, [x0]
     398:	ldr	w0, [x21, #28]
     39c:	blr	x1
     3a0:	mov	w20, w0
     3a4:	ldr	x0, [x28]
     3a8:	ldr	x1, [x0, #16]
     3ac:	ldr	w0, [x21, #28]
     3b0:	blr	x1
     3b4:	ldr	w2, [x21, #32]
     3b8:	sub	w1, w20, #0x1
     3bc:	cmn	w2, #0x1
     3c0:	b.eq	3e0 <ctf_serialize.part.0+0x108>  // b.none
     3c4:	add	x19, x19, #0xc
     3c8:	cmp	w1, #0xd
     3cc:	b.hi	400 <ctf_serialize.part.0+0x128>  // b.pmore
     3d0:	ldrb	w1, [x23, w1, uxtw]
     3d4:	adr	x3, 3e0 <ctf_serialize.part.0+0x108>
     3d8:	add	x1, x3, w1, sxtb #2
     3dc:	br	x1
     3e0:	add	x19, x19, #0x14
     3e4:	cmp	w1, #0xd
     3e8:	b.hi	400 <ctf_serialize.part.0+0x128>  // b.pmore
     3ec:	ldrb	w1, [x22, w1, uxtw]
     3f0:	adr	x2, 3fc <ctf_serialize.part.0+0x124>
     3f4:	add	x1, x2, w1, sxtb #2
     3f8:	br	x1
     3fc:	add	x19, x19, #0x4
     400:	ldr	x21, [x21, #8]
     404:	b	338 <ctf_serialize.part.0+0x60>
     408:	add	x19, x19, #0xc
     40c:	b	400 <ctf_serialize.part.0+0x128>
     410:	add	x19, x19, #0x8
     414:	b	400 <ctf_serialize.part.0+0x128>
     418:	add	w0, w0, #0x1
     41c:	and	w0, w0, #0xfffffffe
     420:	add	x19, x19, w0, uxtw #2
     424:	b	400 <ctf_serialize.part.0+0x128>
     428:	cmp	w2, w25
     42c:	b.hi	43c <ctf_serialize.part.0+0x164>  // b.pmore
     430:	mov	w1, #0xc                   	// #12
     434:	umaddl	x19, w0, w1, x19
     438:	b	400 <ctf_serialize.part.0+0x128>
     43c:	add	x19, x19, w0, uxtw #4
     440:	b	400 <ctf_serialize.part.0+0x128>
     444:	add	x19, x19, w0, uxtw #3
     448:	b	400 <ctf_serialize.part.0+0x128>
     44c:	add	x21, x21, #0x1
     450:	ldr	x0, [x0, #8]
     454:	b	340 <ctf_serialize.part.0+0x68>
     458:	add	x1, sp, #0xc0
     45c:	mov	x2, #0x34                  	// #52
     460:	bl	0 <memcpy>
     464:	add	x25, x20, #0x34
     468:	ldr	w0, [x28, #552]
     46c:	tbz	w0, #0, 484 <ctf_serialize.part.0+0x1ac>
     470:	ldr	x1, [x28, #528]
     474:	cbz	x1, 484 <ctf_serialize.part.0+0x1ac>
     478:	add	x2, x20, #0x8
     47c:	mov	x0, x28
     480:	bl	0 <ctf_str_add_ref>
     484:	ldr	x1, [x28, #496]
     488:	cbz	x1, 498 <ctf_serialize.part.0+0x1c0>
     48c:	add	x2, x20, #0xc
     490:	mov	x0, x28
     494:	bl	0 <ctf_str_add_ref>
     498:	ldr	x22, [x28, #608]
     49c:	mov	x23, x25
     4a0:	mov	x27, #0x0                   	// #0
     4a4:	cbnz	x22, 4d0 <ctf_serialize.part.0+0x1f8>
     4a8:	cmp	x21, x27
     4ac:	b.eq	4f8 <ctf_serialize.part.0+0x220>  // b.none
     4b0:	adrp	x3, 0 <clp2>
     4b4:	adrp	x1, 0 <clp2>
     4b8:	adrp	x0, 0 <clp2>
     4bc:	add	x3, x3, #0x0
     4c0:	add	x1, x1, #0x0
     4c4:	add	x0, x0, #0x0
     4c8:	mov	w2, #0x179                 	// #377
     4cc:	bl	0 <__assert_fail>
     4d0:	ldr	x1, [x22, #16]
     4d4:	mov	x2, x23
     4d8:	mov	x0, x28
     4dc:	add	x27, x27, #0x1
     4e0:	add	x23, x23, #0x8
     4e4:	bl	0 <ctf_str_add_ref>
     4e8:	ldr	x0, [x22, #24]
     4ec:	ldr	x22, [x22, #8]
     4f0:	stur	w0, [x23, #-4]
     4f4:	b	4a4 <ctf_serialize.part.0+0x1cc>
     4f8:	lsl	w0, w21, #3
     4fc:	add	x27, x25, x21, lsl #3
     500:	add	x0, x0, #0x34
     504:	add	x0, x20, x0
     508:	cmp	x27, x0
     50c:	b.eq	530 <ctf_serialize.part.0+0x258>  // b.none
     510:	adrp	x3, 0 <clp2>
     514:	adrp	x1, 0 <clp2>
     518:	adrp	x0, 0 <clp2>
     51c:	add	x3, x3, #0x0
     520:	add	x1, x1, #0x0
     524:	add	x0, x0, #0x0
     528:	mov	w2, #0x17d                 	// #381
     52c:	b	4cc <ctf_serialize.part.0+0x1f4>
     530:	ldr	x23, [x28, #584]
     534:	adrp	x0, 0 <clp2>
     538:	add	x0, x0, #0x0
     53c:	str	x0, [sp, #136]
     540:	cbnz	x23, 570 <ctf_serialize.part.0+0x298>
     544:	add	x0, x20, x19
     548:	cmp	x27, x0
     54c:	b.eq	74c <ctf_serialize.part.0+0x474>  // b.none
     550:	adrp	x3, 0 <clp2>
     554:	adrp	x1, 0 <clp2>
     558:	adrp	x0, 0 <clp2>
     55c:	add	x3, x3, #0x0
     560:	add	x1, x1, #0x0
     564:	add	x0, x0, #0x0
     568:	mov	w2, #0x1d8                 	// #472
     56c:	b	4cc <ctf_serialize.part.0+0x1f4>
     570:	ldr	x0, [x28]
     574:	ldr	x1, [x0]
     578:	ldr	w0, [x23, #28]
     57c:	blr	x1
     580:	str	w0, [sp, #132]
     584:	ldr	x0, [x28]
     588:	ldr	x1, [x0, #16]
     58c:	ldr	w0, [x23, #28]
     590:	blr	x1
     594:	str	w0, [sp, #112]
     598:	ldr	w0, [x23, #32]
     59c:	mov	x1, #0x14                  	// #20
     5a0:	cmn	w0, #0x1
     5a4:	mov	x0, #0xc                   	// #12
     5a8:	csel	x22, x0, x1, ne  // ne = any
     5ac:	add	x1, x23, #0x18
     5b0:	mov	x2, x22
     5b4:	mov	x0, x27
     5b8:	bl	0 <memcpy>
     5bc:	ldr	w1, [x27]
     5c0:	cbz	w1, 5e0 <ctf_serialize.part.0+0x308>
     5c4:	mov	x0, x28
     5c8:	bl	0 <ctf_strraw>
     5cc:	mov	x1, x0
     5d0:	cbz	x0, 5e0 <ctf_serialize.part.0+0x308>
     5d4:	mov	x2, x27
     5d8:	mov	x0, x28
     5dc:	bl	0 <ctf_str_add_ref>
     5e0:	ldr	w0, [sp, #132]
     5e4:	add	x27, x27, x22
     5e8:	sub	w22, w0, #0x1
     5ec:	cmp	w22, #0xd
     5f0:	b.hi	620 <ctf_serialize.part.0+0x348>  // b.pmore
     5f4:	ldr	x0, [sp, #136]
     5f8:	ldrb	w0, [x0, w22, uxtw]
     5fc:	adr	x1, 608 <ctf_serialize.part.0+0x330>
     600:	add	x0, x1, w0, sxtb #2
     604:	br	x0
     608:	ldp	w0, w1, [x23, #48]
     60c:	lsl	w1, w1, #16
     610:	orr	w0, w1, w0, lsl #24
     614:	ldr	w1, [x23, #56]
     618:	orr	w0, w0, w1
     61c:	str	w0, [x27], #4
     620:	ldr	x23, [x23, #8]
     624:	b	540 <ctf_serialize.part.0+0x268>
     628:	ldr	x0, [x23, #48]
     62c:	str	x0, [x27], #8
     630:	b	620 <ctf_serialize.part.0+0x348>
     634:	ldr	w0, [x23, #64]
     638:	ldp	x2, x1, [x23, #48]
     63c:	stp	w2, w1, [x27]
     640:	add	x27, x27, #0xc
     644:	stur	w0, [x27, #-4]
     648:	b	620 <ctf_serialize.part.0+0x348>
     64c:	ldr	x1, [x23, #48]
     650:	ldr	x1, [x1, x0, lsl #3]
     654:	str	w1, [x27, x0, lsl #2]
     658:	add	x0, x0, #0x1
     65c:	ldr	w1, [sp, #112]
     660:	cmp	w1, w0
     664:	b.hi	64c <ctf_serialize.part.0+0x374>  // b.pmore
     668:	ldr	x0, [sp, #112]
     66c:	add	x27, x27, w0, uxtw #2
     670:	tbz	w0, #0, 620 <ctf_serialize.part.0+0x348>
     674:	mov	x3, x27
     678:	str	wzr, [x3], #4
     67c:	mov	x27, x3
     680:	b	620 <ctf_serialize.part.0+0x348>
     684:	mov	x0, #0x0                   	// #0
     688:	b	65c <ctf_serialize.part.0+0x384>
     68c:	ldr	w0, [x23, #32]
     690:	mov	w1, #0x1fffffff            	// #536870911
     694:	ldr	x22, [x23, #56]
     698:	cmp	w0, w1
     69c:	b.ls	70c <ctf_serialize.part.0+0x434>  // b.plast
     6a0:	cbz	x22, 620 <ctf_serialize.part.0+0x348>
     6a4:	ldr	x0, [x22, #24]
     6a8:	and	x24, x24, #0xffffffff00000000
     6ac:	bfxil	x26, x0, #0, #32
     6b0:	ldr	x0, [x22, #32]
     6b4:	lsr	x1, x0, #32
     6b8:	bfi	x26, x0, #32, #32
     6bc:	bfi	x24, x1, #32, #32
     6c0:	stp	x24, x26, [x27]
     6c4:	ldr	x1, [x22, #16]
     6c8:	cbz	x1, 6d8 <ctf_serialize.part.0+0x400>
     6cc:	mov	x2, x27
     6d0:	mov	x0, x28
     6d4:	bl	0 <ctf_str_add_ref>
     6d8:	add	x27, x27, #0x10
     6dc:	ldr	x22, [x22, #8]
     6e0:	b	6a0 <ctf_serialize.part.0+0x3c8>
     6e4:	ldp	x0, x1, [x22, #24]
     6e8:	stp	wzr, w1, [x27]
     6ec:	str	w0, [x27, #8]
     6f0:	ldr	x1, [x22, #16]
     6f4:	cbz	x1, 704 <ctf_serialize.part.0+0x42c>
     6f8:	mov	x2, x27
     6fc:	mov	x0, x28
     700:	bl	0 <ctf_str_add_ref>
     704:	ldr	x22, [x22, #8]
     708:	add	x27, x27, #0xc
     70c:	cbnz	x22, 6e4 <ctf_serialize.part.0+0x40c>
     710:	b	620 <ctf_serialize.part.0+0x348>
     714:	ldr	x22, [x23, #56]
     718:	cbz	x22, 620 <ctf_serialize.part.0+0x348>
     71c:	ldr	x1, [sp, #120]
     720:	mov	x2, x27
     724:	ldr	w0, [x22, #40]
     728:	add	x27, x27, #0x8
     72c:	bfi	x1, x0, #32, #32
     730:	stur	x1, [x27, #-8]
     734:	str	x1, [sp, #120]
     738:	mov	x0, x28
     73c:	ldr	x1, [x22, #16]
     740:	bl	0 <ctf_str_add_ref>
     744:	ldr	x22, [x22, #8]
     748:	b	718 <ctf_serialize.part.0+0x440>
     74c:	mov	x0, x28
     750:	bl	0 <ctf_str_write_strtab>
     754:	stp	x0, x1, [sp, #160]
     758:	mov	x0, x28
     75c:	bl	0 <ctf_str_purge_refs>
     760:	ldr	x0, [sp, #160]
     764:	cbnz	x0, 774 <ctf_serialize.part.0+0x49c>
     768:	mov	x0, x20
     76c:	bl	0 <free>
     770:	b	364 <ctf_serialize.part.0+0x8c>
     774:	add	x0, sp, #0xa0
     778:	mov	x1, x21
     77c:	add	x4, sp, #0xb0
     780:	mov	x2, #0x8                   	// #8
     784:	adrp	x3, 0 <clp2>
     788:	add	x3, x3, #0x0
     78c:	stp	x28, x0, [sp, #176]
     790:	mov	x0, x25
     794:	bl	0 <qsort_r>
     798:	ldr	x2, [sp, #168]
     79c:	mov	x1, x20
     7a0:	mov	x0, x28
     7a4:	add	x2, x19, x2
     7a8:	bl	0 <ctf_realloc>
     7ac:	mov	x21, x0
     7b0:	cbnz	x0, 7c4 <ctf_serialize.part.0+0x4ec>
     7b4:	mov	x0, x20
     7b8:	bl	0 <free>
     7bc:	ldr	x0, [sp, #160]
     7c0:	b	76c <ctf_serialize.part.0+0x494>
     7c4:	ldp	x1, x2, [sp, #160]
     7c8:	add	x0, x0, x19
     7cc:	bl	0 <memcpy>
     7d0:	ldp	x0, x20, [sp, #160]
     7d4:	str	w20, [x21, #48]
     7d8:	bl	0 <free>
     7dc:	ldr	x7, [x28, #128]
     7e0:	add	x0, sp, #0x9c
     7e4:	str	x0, [sp, #8]
     7e8:	mov	w0, #0x1                   	// #1
     7ec:	str	w0, [sp]
     7f0:	add	x1, x19, w20, uxtw
     7f4:	mov	x0, x21
     7f8:	mov	x6, #0x0                   	// #0
     7fc:	mov	x5, #0x0                   	// #0
     800:	mov	x4, #0x0                   	// #0
     804:	mov	x3, #0x0                   	// #0
     808:	mov	x2, #0x0                   	// #0
     80c:	bl	0 <ctf_simple_open_internal>
     810:	mov	x19, x0
     814:	cbnz	x0, 828 <ctf_serialize.part.0+0x550>
     818:	mov	x0, x21
     81c:	bl	0 <free>
     820:	ldr	w1, [sp, #156]
     824:	b	368 <ctf_serialize.part.0+0x90>
     828:	mov	x0, x28
     82c:	bl	0 <ctf_getmodel>
     830:	mov	w1, w0
     834:	mov	x0, x19
     838:	bl	0 <ctf_setmodel>
     83c:	ldr	x1, [x28, #512]
     840:	mov	x0, x19
     844:	bl	0 <ctf_import>
     848:	ldr	w0, [x28, #548]
     84c:	str	w0, [x19, #548]
     850:	ldr	w0, [x28, #552]
     854:	and	w1, w0, #0xfffffffb
     858:	ldr	w0, [x19, #552]
     85c:	orr	w0, w0, w1
     860:	str	w0, [x19, #552]
     864:	ldr	x0, [x19, #400]
     868:	cbnz	x0, 870 <ctf_serialize.part.0+0x598>
     86c:	str	x21, [x19, #400]
     870:	add	x1, x28, #0x200
     874:	add	x20, x28, #0xd8
     878:	ldr	x0, [x28, #568]
     87c:	ldp	x2, x3, [x1, #64]
     880:	str	x0, [x19, #568]
     884:	add	x0, x19, #0x200
     888:	stp	x2, x3, [x0, #64]
     88c:	ldr	x2, [x28, #592]
     890:	str	x2, [x19, #592]
     894:	ldp	x2, x3, [x1, #88]
     898:	stp	x2, x3, [x0, #88]
     89c:	mov	x1, x20
     8a0:	ldr	x0, [x28, #616]
     8a4:	str	x0, [x19, #616]
     8a8:	ldr	x0, [x28, #696]
     8ac:	str	x0, [x19, #696]
     8b0:	ldr	x0, [x28, #624]
     8b4:	mov	x2, #0x78                  	// #120
     8b8:	add	x0, x0, #0x1
     8bc:	str	x0, [x19, #624]
     8c0:	ldr	x0, [x28, #720]
     8c4:	str	x0, [x19, #720]
     8c8:	ldr	x0, [x28, #448]
     8cc:	str	x0, [x19, #448]
     8d0:	ldr	x0, [x28, #456]
     8d4:	str	x0, [x19, #456]
     8d8:	ldr	x0, [x28, #648]
     8dc:	str	x0, [x19, #648]
     8e0:	ldr	x0, [x28, #656]
     8e4:	str	x0, [x19, #656]
     8e8:	ldr	w0, [x28, #384]
     8ec:	str	w0, [x19, #384]
     8f0:	ldr	x0, [x28, #128]
     8f4:	str	x0, [x19, #128]
     8f8:	ldr	x0, [x28, #672]
     8fc:	str	x0, [x19, #672]
     900:	ldr	x0, [x28, #664]
     904:	str	x0, [x19, #664]
     908:	ldr	x0, [x28, #680]
     90c:	str	x0, [x19, #680]
     910:	ldr	x0, [x28, #688]
     914:	str	x0, [x19, #688]
     918:	ldr	x0, [x28, #624]
     91c:	str	x0, [x19, #632]
     920:	add	x0, x19, #0xd8
     924:	bl	0 <memcpy>
     928:	ldp	x0, x1, [x28, #152]
     92c:	stp	x0, x1, [x19, #152]
     930:	ldp	x0, x1, [x28, #168]
     934:	stp	x0, x1, [x19, #168]
     938:	ldp	x0, x1, [x28, #184]
     93c:	stp	x0, x1, [x19, #184]
     940:	ldp	x0, x1, [x28, #200]
     944:	stp	x0, x1, [x19, #200]
     948:	str	xzr, [x28, #568]
     94c:	mov	x0, x19
     950:	bl	0 <ctf_str_free_atoms>
     954:	ldr	x0, [x28, #368]
     958:	str	x0, [x19, #368]
     95c:	ldr	x0, [x28, #120]
     960:	str	x0, [x19, #120]
     964:	add	x0, x28, #0x240
     968:	add	x3, x28, #0x288
     96c:	str	xzr, [x28, #120]
     970:	mov	x2, #0x78                  	// #120
     974:	str	xzr, [x28, #368]
     978:	mov	w1, #0x0                   	// #0
     97c:	stp	xzr, xzr, [x0]
     980:	add	x0, x28, #0x258
     984:	str	xzr, [x28, #128]
     988:	str	xzr, [x28, #448]
     98c:	str	xzr, [x28, #592]
     990:	stp	xzr, xzr, [x3]
     994:	stp	xzr, xzr, [x3, #16]
     998:	str	xzr, [x28, #696]
     99c:	stp	xzr, xzr, [x0]
     9a0:	mov	x0, x20
     9a4:	bl	0 <memset>
     9a8:	str	xzr, [x28, #160]
     9ac:	str	xzr, [x28, #176]
     9b0:	mov	x1, x28
     9b4:	str	xzr, [x28, #192]
     9b8:	mov	x2, #0x2d8                 	// #728
     9bc:	str	xzr, [x28, #208]
     9c0:	add	x0, sp, #0xf8
     9c4:	bl	0 <memcpy>
     9c8:	mov	x1, x19
     9cc:	mov	x2, #0x2d8                 	// #728
     9d0:	mov	x0, x28
     9d4:	bl	0 <memcpy>
     9d8:	add	x1, sp, #0xf8
     9dc:	mov	x2, #0x2d8                 	// #728
     9e0:	mov	x0, x19
     9e4:	bl	0 <memcpy>
     9e8:	mov	w0, #0x1                   	// #1
     9ec:	str	w0, [x19, #548]
     9f0:	mov	x0, x19
     9f4:	bl	0 <ctf_file_close>
     9f8:	mov	w0, #0x0                   	// #0
     9fc:	b	370 <ctf_serialize.part.0+0x98>

0000000000000a00 <ctf_create>:
     a00:	stp	x29, x30, [sp, #-128]!
     a04:	mov	x29, sp
     a08:	stp	x19, x20, [sp, #16]
     a0c:	mov	x20, x0
     a10:	stp	x21, x22, [sp, #32]
     a14:	stp	x23, x24, [sp, #48]
     a18:	stp	x25, x26, [sp, #64]
     a1c:	str	x27, [sp, #80]
     a20:	bl	0 <libctf_init_debug>
     a24:	adrp	x1, 0 <ctf_hash_eq_integer>
     a28:	adrp	x0, 0 <ctf_hash_integer>
     a2c:	add	x1, x1, #0x0
     a30:	add	x0, x0, #0x0
     a34:	mov	x3, #0x0                   	// #0
     a38:	mov	x2, #0x0                   	// #0
     a3c:	bl	0 <ctf_dynhash_create>
     a40:	cbnz	x0, a74 <ctf_create+0x74>
     a44:	mov	x0, x20
     a48:	mov	w1, #0xb                   	// #11
     a4c:	bl	0 <ctf_set_open_errno>
     a50:	mov	x19, #0x0                   	// #0
     a54:	mov	x0, x19
     a58:	ldp	x19, x20, [sp, #16]
     a5c:	ldp	x21, x22, [sp, #32]
     a60:	ldp	x23, x24, [sp, #48]
     a64:	ldp	x25, x26, [sp, #64]
     a68:	ldr	x27, [sp, #80]
     a6c:	ldp	x29, x30, [sp], #128
     a70:	ret
     a74:	adrp	x21, 0 <ctf_hash_eq_string>
     a78:	adrp	x19, 0 <ctf_hash_string>
     a7c:	add	x21, x21, #0x0
     a80:	add	x19, x19, #0x0
     a84:	mov	x22, x0
     a88:	mov	x1, x21
     a8c:	mov	x0, x19
     a90:	mov	x3, #0x0                   	// #0
     a94:	mov	x2, #0x0                   	// #0
     a98:	bl	0 <ctf_dynhash_create>
     a9c:	mov	x23, x0
     aa0:	cbnz	x0, abc <ctf_create+0xbc>
     aa4:	mov	x0, x20
     aa8:	mov	w1, #0xb                   	// #11
     aac:	bl	0 <ctf_set_open_errno>
     ab0:	mov	x0, x22
     ab4:	bl	0 <ctf_dynhash_destroy>
     ab8:	b	a50 <ctf_create+0x50>
     abc:	mov	x1, x21
     ac0:	mov	x3, #0x0                   	// #0
     ac4:	mov	x2, #0x0                   	// #0
     ac8:	mov	x0, x19
     acc:	bl	0 <ctf_dynhash_create>
     ad0:	mov	x26, x0
     ad4:	mov	x1, x21
     ad8:	mov	x3, #0x0                   	// #0
     adc:	mov	x2, #0x0                   	// #0
     ae0:	mov	x0, x19
     ae4:	bl	0 <ctf_dynhash_create>
     ae8:	mov	x25, x0
     aec:	mov	x1, x21
     af0:	mov	x3, #0x0                   	// #0
     af4:	mov	x2, #0x0                   	// #0
     af8:	mov	x0, x19
     afc:	bl	0 <ctf_dynhash_create>
     b00:	mov	x24, x0
     b04:	mov	x1, x21
     b08:	mov	x0, x19
     b0c:	mov	x3, #0x0                   	// #0
     b10:	mov	x2, #0x0                   	// #0
     b14:	bl	0 <ctf_dynhash_create>
     b18:	mov	x21, x0
     b1c:	cmp	x26, #0x0
     b20:	ccmp	x25, #0x0, #0x4, ne  // ne = any
     b24:	b.eq	b34 <ctf_create+0x134>  // b.none
     b28:	cmp	x24, #0x0
     b2c:	ccmp	x0, #0x0, #0x4, ne  // ne = any
     b30:	b.ne	b6c <ctf_create+0x16c>  // b.any
     b34:	mov	x0, x20
     b38:	mov	w1, #0xb                   	// #11
     b3c:	bl	0 <ctf_set_open_errno>
     b40:	mov	x0, x26
     b44:	bl	0 <ctf_dynhash_destroy>
     b48:	mov	x0, x25
     b4c:	bl	0 <ctf_dynhash_destroy>
     b50:	mov	x0, x24
     b54:	bl	0 <ctf_dynhash_destroy>
     b58:	mov	x0, x21
     b5c:	bl	0 <ctf_dynhash_destroy>
     b60:	mov	x0, x23
     b64:	bl	0 <ctf_dynhash_destroy>
     b68:	b	ab0 <ctf_create+0xb0>
     b6c:	adrp	x0, 0 <_CTF_SECTION>
     b70:	add	x0, x0, #0x0
     b74:	str	x0, [sp, #96]
     b78:	adrp	x0, 0 <clp2>
     b7c:	add	x0, x0, #0x0
     b80:	mov	x27, #0x1                   	// #1
     b84:	add	x0, x0, #0x10
     b88:	str	x0, [sp, #104]
     b8c:	mov	x0, #0x34                  	// #52
     b90:	mov	x5, x20
     b94:	mov	w4, w27
     b98:	mov	x3, #0x0                   	// #0
     b9c:	mov	x2, #0x0                   	// #0
     ba0:	mov	x1, #0x0                   	// #0
     ba4:	str	x0, [sp, #112]
     ba8:	add	x0, sp, #0x60
     bac:	str	x27, [sp, #120]
     bb0:	bl	0 <ctf_bufopen_internal>
     bb4:	mov	x19, x0
     bb8:	cbz	x0, b40 <ctf_create+0x140>
     bbc:	str	x26, [x0, #160]
     bc0:	str	x25, [x0, #176]
     bc4:	str	x24, [x0, #192]
     bc8:	str	x21, [x0, #208]
     bcc:	str	x22, [x0, #568]
     bd0:	str	x23, [x0, #592]
     bd4:	str	xzr, [x0, #616]
     bd8:	str	x27, [x0, #624]
     bdc:	str	xzr, [x0, #632]
     be0:	bl	0 <ctf_set_ctl_hashes>
     be4:	mov	w1, #0x2                   	// #2
     be8:	mov	x0, x19
     bec:	bl	0 <ctf_setmodel>
     bf0:	mov	x0, x19
     bf4:	bl	70 <ctf_grow_ptrtab>
     bf8:	tbz	w0, #31, a54 <ctf_create+0x54>
     bfc:	mov	x0, x19
     c00:	bl	0 <ctf_errno>
     c04:	mov	w1, w0
     c08:	mov	x0, x20
     c0c:	bl	0 <ctf_set_open_errno>
     c10:	mov	x0, x19
     c14:	bl	0 <ctf_file_close>
     c18:	b	a50 <ctf_create+0x50>

0000000000000c1c <ctf_update>:
     c1c:	ldr	w2, [x0, #552]
     c20:	tbnz	w2, #1, c3c <ctf_update+0x20>
     c24:	stp	x29, x30, [sp, #-16]!
     c28:	mov	w1, #0x40d                 	// #1037
     c2c:	mov	x29, sp
     c30:	bl	0 <ctf_set_errno>
     c34:	ldp	x29, x30, [sp], #16
     c38:	ret
     c3c:	mov	x1, x0
     c40:	ldr	x0, [x0, #480]
     c44:	str	x0, [x1, #616]
     c48:	mov	w0, #0x0                   	// #0
     c4c:	ret

0000000000000c50 <ctf_serialize>:
     c50:	ldr	w1, [x0, #552]
     c54:	tbnz	w1, #1, c70 <ctf_serialize+0x20>
     c58:	stp	x29, x30, [sp, #-16]!
     c5c:	mov	w1, #0x40d                 	// #1037
     c60:	mov	x29, sp
     c64:	bl	0 <ctf_set_errno>
     c68:	ldp	x29, x30, [sp], #16
     c6c:	ret
     c70:	tbz	w1, #2, c78 <ctf_serialize+0x28>
     c74:	b	2d8 <ctf_serialize.part.0>
     c78:	mov	w0, #0x0                   	// #0
     c7c:	ret

0000000000000c80 <ctf_name_table>:
     c80:	cmp	w1, #0x7
     c84:	b.eq	ca4 <ctf_name_table+0x24>  // b.none
     c88:	cmp	w1, #0x8
     c8c:	b.eq	cac <ctf_name_table+0x2c>  // b.none
     c90:	add	x2, x0, #0x98
     c94:	cmp	w1, #0x6
     c98:	add	x0, x0, #0xc8
     c9c:	csel	x0, x0, x2, ne  // ne = any
     ca0:	ret
     ca4:	add	x0, x0, #0xa8
     ca8:	b	ca0 <ctf_name_table+0x20>
     cac:	add	x0, x0, #0xb8
     cb0:	b	ca0 <ctf_name_table+0x20>

0000000000000cb4 <ctf_dtd_insert>:
     cb4:	stp	x29, x30, [sp, #-48]!
     cb8:	mov	x29, sp
     cbc:	stp	x19, x20, [sp, #16]
     cc0:	mov	x20, x0
     cc4:	mov	x19, x1
     cc8:	ldr	x0, [x0, #568]
     ccc:	str	x21, [sp, #32]
     cd0:	mov	w21, w2
     cd4:	mov	x2, x1
     cd8:	ldr	x1, [x1, #16]
     cdc:	bl	0 <ctf_dynhash_insert>
     ce0:	tbnz	w0, #31, d28 <ctf_dtd_insert+0x74>
     ce4:	ldr	w1, [x19, #24]
     ce8:	cbz	w1, d30 <ctf_dtd_insert+0x7c>
     cec:	mov	x0, x20
     cf0:	bl	0 <ctf_strraw>
     cf4:	mov	x3, x0
     cf8:	cbz	x0, d30 <ctf_dtd_insert+0x7c>
     cfc:	mov	w1, w21
     d00:	mov	x0, x20
     d04:	bl	c80 <ctf_name_table>
     d08:	mov	x1, x3
     d0c:	ldr	x0, [x0, #8]
     d10:	ldr	x2, [x19, #16]
     d14:	bl	0 <ctf_dynhash_insert>
     d18:	tbz	w0, #31, d30 <ctf_dtd_insert+0x7c>
     d1c:	ldr	x1, [x19, #16]
     d20:	ldr	x0, [x20, #568]
     d24:	bl	0 <ctf_dynhash_remove>
     d28:	mov	w0, #0xffffffff            	// #-1
     d2c:	b	d40 <ctf_dtd_insert+0x8c>
     d30:	add	x0, x20, #0x240
     d34:	mov	x1, x19
     d38:	bl	0 <ctf_list_append>
     d3c:	mov	w0, #0x0                   	// #0
     d40:	ldp	x19, x20, [sp, #16]
     d44:	ldr	x21, [sp, #32]
     d48:	ldp	x29, x30, [sp], #48
     d4c:	ret

0000000000000d50 <ctf_add_generic>:
     d50:	cmp	w1, #0x1
     d54:	b.ls	d60 <ctf_add_generic+0x10>  // b.plast
     d58:	mov	w1, #0x16                  	// #22
     d5c:	b	0 <ctf_set_errno>
     d60:	stp	x29, x30, [sp, #-64]!
     d64:	mov	x29, sp
     d68:	ldr	w1, [x0, #552]
     d6c:	stp	x19, x20, [sp, #16]
     d70:	mov	x19, x0
     d74:	stp	x21, x22, [sp, #32]
     d78:	stp	x23, x24, [sp, #48]
     d7c:	tbnz	w1, #1, d98 <ctf_add_generic+0x48>
     d80:	mov	w1, #0x40d                 	// #1037
     d84:	ldp	x19, x20, [sp, #16]
     d88:	ldp	x21, x22, [sp, #32]
     d8c:	ldp	x23, x24, [sp, #48]
     d90:	ldp	x29, x30, [sp], #64
     d94:	b	d5c <ctf_add_generic+0xc>
     d98:	ldr	w1, [x0, #544]
     d9c:	mov	x22, x2
     da0:	ldr	x2, [x0, #480]
     da4:	add	w1, w1, #0x1
     da8:	orr	x1, x1, x2
     dac:	mov	w2, #0xfffffffd            	// #-3
     db0:	cmp	x1, x2
     db4:	b.ls	dc4 <ctf_add_generic+0x74>  // b.plast
     db8:	mov	w1, #0x40f                 	// #1039
     dbc:	mov	x0, x19
     dc0:	b	d84 <ctf_add_generic+0x34>
     dc4:	mov	x2, #0x7ffffffe            	// #2147483646
     dc8:	cmp	x1, x2
     dcc:	b.eq	db8 <ctf_add_generic+0x68>  // b.none
     dd0:	mov	w24, w3
     dd4:	mov	x23, x4
     dd8:	bl	70 <ctf_grow_ptrtab>
     ddc:	tbnz	w0, #31, e7c <ctf_add_generic+0x12c>
     de0:	mov	x0, #0x48                  	// #72
     de4:	bl	0 <malloc>
     de8:	mov	x20, x0
     dec:	cbnz	x0, df8 <ctf_add_generic+0xa8>
     df0:	mov	w1, #0xb                   	// #11
     df4:	b	dbc <ctf_add_generic+0x6c>
     df8:	ldr	x21, [x19, #480]
     dfc:	ldr	w0, [x19, #552]
     e00:	add	x21, x21, #0x1
     e04:	str	x21, [x19, #480]
     e08:	tbz	w0, #0, e18 <ctf_add_generic+0xc8>
     e0c:	ldr	w0, [x19, #544]
     e10:	add	w0, w0, #0x1
     e14:	orr	x21, x21, x0
     e18:	add	x2, x20, #0x18
     e1c:	mov	x1, x22
     e20:	mov	x0, x19
     e24:	stp	xzr, xzr, [x20]
     e28:	stp	xzr, xzr, [x20, #16]
     e2c:	stp	xzr, xzr, [x20, #32]
     e30:	stp	xzr, xzr, [x20, #48]
     e34:	str	xzr, [x20, #64]
     e38:	bl	0 <ctf_str_add_ref>
     e3c:	str	x21, [x20, #16]
     e40:	str	w0, [x20, #24]
     e44:	cbnz	w0, e60 <ctf_add_generic+0x110>
     e48:	cbz	x22, e60 <ctf_add_generic+0x110>
     e4c:	ldrb	w0, [x22]
     e50:	cbz	w0, e60 <ctf_add_generic+0x110>
     e54:	mov	x0, x20
     e58:	bl	0 <free>
     e5c:	b	df0 <ctf_add_generic+0xa0>
     e60:	mov	w2, w24
     e64:	mov	x1, x20
     e68:	mov	x0, x19
     e6c:	bl	cb4 <ctf_dtd_insert>
     e70:	tbz	w0, #31, e84 <ctf_add_generic+0x134>
     e74:	mov	x0, x20
     e78:	bl	0 <free>
     e7c:	mov	x21, #0xffffffffffffffff    	// #-1
     e80:	b	e94 <ctf_add_generic+0x144>
     e84:	ldr	w0, [x19, #552]
     e88:	orr	w0, w0, #0x4
     e8c:	str	w0, [x19, #552]
     e90:	str	x20, [x23]
     e94:	mov	x0, x21
     e98:	ldp	x19, x20, [sp, #16]
     e9c:	ldp	x21, x22, [sp, #32]
     ea0:	ldp	x23, x24, [sp, #48]
     ea4:	ldp	x29, x30, [sp], #64
     ea8:	ret

0000000000000eac <ctf_add_encoded>:
     eac:	stp	x29, x30, [sp, #-64]!
     eb0:	mov	x29, sp
     eb4:	stp	x19, x20, [sp, #16]
     eb8:	str	x21, [sp, #32]
     ebc:	cbnz	x3, ee0 <ctf_add_encoded+0x34>
     ec0:	mov	w1, #0x16                  	// #22
     ec4:	bl	0 <ctf_set_errno>
     ec8:	mov	x2, x0
     ecc:	mov	x0, x2
     ed0:	ldp	x19, x20, [sp, #16]
     ed4:	ldr	x21, [sp, #32]
     ed8:	ldp	x29, x30, [sp], #64
     edc:	ret
     ee0:	mov	w20, w4
     ee4:	mov	w21, w1
     ee8:	mov	x19, x3
     eec:	add	x4, sp, #0x38
     ef0:	mov	w3, w20
     ef4:	bl	d50 <ctf_add_generic>
     ef8:	mov	x2, x0
     efc:	cmn	x0, #0x1
     f00:	b.eq	ecc <ctf_add_encoded+0x20>  // b.none
     f04:	cmp	w21, #0x0
     f08:	mov	w0, #0x2000000             	// #33554432
     f0c:	csel	w21, w21, w0, eq  // eq = none
     f10:	ldr	w0, [x19, #8]
     f14:	ldr	x1, [sp, #56]
     f18:	neg	w0, w0
     f1c:	and	w0, w0, #0xfffffff8
     f20:	orr	w20, w21, w20, lsl #26
     f24:	neg	w0, w0
     f28:	str	w20, [x1, #28]
     f2c:	lsr	w0, w0, #3
     f30:	bl	0 <clp2>
     f34:	str	w0, [x1, #32]
     f38:	ldr	x0, [x19]
     f3c:	str	x0, [x1, #48]
     f40:	ldr	w0, [x19, #8]
     f44:	str	w0, [x1, #56]
     f48:	b	ecc <ctf_add_encoded+0x20>

0000000000000f4c <ctf_add_reftype>:
     f4c:	stp	x29, x30, [sp, #-80]!
     f50:	mov	x29, sp
     f54:	stp	x19, x20, [sp, #16]
     f58:	stp	x21, x22, [sp, #32]
     f5c:	mov	w22, w1
     f60:	mov	x1, #0xfffffffe            	// #4294967294
     f64:	stp	x23, x24, [sp, #48]
     f68:	cmp	x2, x1
     f6c:	str	x0, [sp, #72]
     f70:	b.ls	f98 <ctf_add_reftype+0x4c>  // b.plast
     f74:	mov	w1, #0x16                  	// #22
     f78:	bl	0 <ctf_set_errno>
     f7c:	mov	x21, x0
     f80:	mov	x0, x21
     f84:	ldp	x19, x20, [sp, #16]
     f88:	ldp	x21, x22, [sp, #32]
     f8c:	ldp	x23, x24, [sp, #48]
     f90:	ldp	x29, x30, [sp], #80
     f94:	ret
     f98:	mov	x19, x0
     f9c:	mov	x20, x2
     fa0:	mov	w23, w3
     fa4:	mov	x1, x2
     fa8:	add	x0, sp, #0x48
     fac:	ldr	w24, [x19, #552]
     fb0:	bl	0 <ctf_lookup_by_id>
     fb4:	cbnz	x0, fc0 <ctf_add_reftype+0x74>
     fb8:	mov	x21, #0xffffffffffffffff    	// #-1
     fbc:	b	f80 <ctf_add_reftype+0x34>
     fc0:	add	x4, sp, #0x40
     fc4:	mov	w3, w23
     fc8:	mov	w1, w22
     fcc:	mov	x0, x19
     fd0:	mov	x2, #0x0                   	// #0
     fd4:	bl	d50 <ctf_add_generic>
     fd8:	mov	x21, x0
     fdc:	cmn	x0, #0x1
     fe0:	b.eq	fb8 <ctf_add_reftype+0x6c>  // b.none
     fe4:	cmp	w22, #0x0
     fe8:	mov	w0, #0x2000000             	// #33554432
     fec:	csel	w22, w22, w0, eq  // eq = none
     ff0:	cmp	w23, #0x3
     ff4:	ldr	x0, [sp, #64]
     ff8:	orr	w22, w22, w23, lsl #26
     ffc:	stp	w22, w20, [x0, #28]
    1000:	b.ne	f80 <ctf_add_reftype+0x34>  // b.any
    1004:	ldr	w1, [x19, #544]
    1008:	and	w24, w24, #0x1
    100c:	cmp	x20, w1, uxtw
    1010:	cset	w2, hi  // hi = pmore
    1014:	cmp	w2, w24
    1018:	b.ne	f80 <ctf_add_reftype+0x34>  // b.any
    101c:	ldr	x2, [x19, #480]
    1020:	and	w20, w1, w20
    1024:	cmp	x20, x2
    1028:	b.cs	f80 <ctf_add_reftype+0x34>  // b.hs, b.nlast
    102c:	and	w22, w1, w21
    1030:	ldr	x1, [x19, #448]
    1034:	str	w22, [x1, x20, lsl #2]
    1038:	ldr	x1, [sp, #72]
    103c:	cmp	x1, x19
    1040:	b.ne	f80 <ctf_add_reftype+0x34>  // b.any
    1044:	ldr	x1, [x19]
    1048:	ldr	w20, [x0, #32]
    104c:	ldr	w0, [x0, #28]
    1050:	ldr	x1, [x1]
    1054:	ldr	w23, [x19, #544]
    1058:	blr	x1
    105c:	cmp	w0, #0xa
    1060:	b.ne	f80 <ctf_add_reftype+0x34>  // b.any
    1064:	ldr	x0, [sp, #64]
    1068:	ldr	w1, [x0, #24]
    106c:	mov	x0, x19
    1070:	bl	0 <ctf_strptr>
    1074:	ldrb	w0, [x0]
    1078:	cbnz	w0, f80 <ctf_add_reftype+0x34>
    107c:	ldr	x1, [x19, #480]
    1080:	and	w0, w20, w23
    1084:	cmp	x1, x0
    1088:	b.ls	f80 <ctf_add_reftype+0x34>  // b.plast
    108c:	ldr	x1, [x19, #448]
    1090:	str	w22, [x1, x0, lsl #2]
    1094:	b	f80 <ctf_add_reftype+0x34>

0000000000001098 <ctf_dtd_delete>:
    1098:	stp	x29, x30, [sp, #-64]!
    109c:	mov	x29, sp
    10a0:	stp	x19, x20, [sp, #16]
    10a4:	mov	x20, x0
    10a8:	mov	x19, x1
    10ac:	ldr	x0, [x0]
    10b0:	stp	x21, x22, [sp, #32]
    10b4:	ldr	x1, [x0]
    10b8:	ldr	w0, [x19, #28]
    10bc:	str	x23, [sp, #48]
    10c0:	blr	x1
    10c4:	mov	w22, w0
    10c8:	ldr	x1, [x19, #16]
    10cc:	ldr	x0, [x20, #568]
    10d0:	bl	0 <ctf_dynhash_remove>
    10d4:	cmp	w22, #0x5
    10d8:	b.eq	1174 <ctf_dtd_delete+0xdc>  // b.none
    10dc:	sub	w0, w22, #0x6
    10e0:	cmp	w0, #0x2
    10e4:	b.hi	10f0 <ctf_dtd_delete+0x58>  // b.pmore
    10e8:	ldr	x21, [x19, #56]
    10ec:	cbnz	x21, 1154 <ctf_dtd_delete+0xbc>
    10f0:	ldr	w1, [x19, #24]
    10f4:	cbz	w1, 1130 <ctf_dtd_delete+0x98>
    10f8:	mov	x0, x20
    10fc:	bl	0 <ctf_strraw>
    1100:	mov	x21, x0
    1104:	cbz	x0, 1130 <ctf_dtd_delete+0x98>
    1108:	mov	w1, w22
    110c:	mov	x0, x20
    1110:	bl	c80 <ctf_name_table>
    1114:	ldr	x0, [x0, #8]
    1118:	mov	x1, x21
    111c:	bl	0 <ctf_dynhash_remove>
    1120:	add	x2, x19, #0x18
    1124:	mov	x1, x21
    1128:	mov	x0, x20
    112c:	bl	0 <ctf_str_remove_ref>
    1130:	mov	x1, x19
    1134:	add	x0, x20, #0x240
    1138:	bl	0 <ctf_list_delete>
    113c:	mov	x0, x19
    1140:	ldp	x19, x20, [sp, #16]
    1144:	ldp	x21, x22, [sp, #32]
    1148:	ldr	x23, [sp, #48]
    114c:	ldp	x29, x30, [sp], #64
    1150:	b	0 <free>
    1154:	ldr	x0, [x21, #16]
    1158:	cbz	x0, 1160 <ctf_dtd_delete+0xc8>
    115c:	bl	0 <free>
    1160:	ldr	x23, [x21, #8]
    1164:	mov	x0, x21
    1168:	bl	0 <free>
    116c:	mov	x21, x23
    1170:	b	10ec <ctf_dtd_delete+0x54>
    1174:	ldr	x0, [x19, #48]
    1178:	bl	0 <free>
    117c:	b	10f0 <ctf_dtd_delete+0x58>

0000000000001180 <ctf_dtd_lookup>:
    1180:	ldr	x0, [x0, #568]
    1184:	b	0 <ctf_dynhash_lookup>

0000000000001188 <ctf_dynamic_type>:
    1188:	ldr	w2, [x0, #552]
    118c:	tbz	w2, #1, 11bc <ctf_dynamic_type+0x34>
    1190:	tbz	w2, #0, 11a4 <ctf_dynamic_type+0x1c>
    1194:	ldr	w2, [x0, #544]
    1198:	cmp	x1, x2
    119c:	b.hi	11a4 <ctf_dynamic_type+0x1c>  // b.pmore
    11a0:	ldr	x0, [x0, #512]
    11a4:	ldr	w2, [x0, #544]
    11a8:	ldr	x3, [x0, #480]
    11ac:	and	x2, x2, x1
    11b0:	cmp	x3, x2
    11b4:	b.cc	11bc <ctf_dynamic_type+0x34>  // b.lo, b.ul, b.last
    11b8:	b	1180 <ctf_dtd_lookup>
    11bc:	mov	x0, #0x0                   	// #0
    11c0:	ret

00000000000011c4 <ctf_dvd_insert>:
    11c4:	stp	x29, x30, [sp, #-32]!
    11c8:	mov	x2, x1
    11cc:	mov	x29, sp
    11d0:	stp	x19, x20, [sp, #16]
    11d4:	mov	x20, x0
    11d8:	mov	x19, x1
    11dc:	ldr	x1, [x1, #16]
    11e0:	ldr	x0, [x0, #592]
    11e4:	bl	0 <ctf_dynhash_insert>
    11e8:	tbnz	w0, #31, 1208 <ctf_dvd_insert+0x44>
    11ec:	add	x0, x20, #0x258
    11f0:	mov	x1, x19
    11f4:	bl	0 <ctf_list_append>
    11f8:	mov	w0, #0x0                   	// #0
    11fc:	ldp	x19, x20, [sp, #16]
    1200:	ldp	x29, x30, [sp], #32
    1204:	ret
    1208:	mov	w0, #0xffffffff            	// #-1
    120c:	b	11fc <ctf_dvd_insert+0x38>

0000000000001210 <ctf_dvd_delete>:
    1210:	stp	x29, x30, [sp, #-32]!
    1214:	mov	x29, sp
    1218:	stp	x19, x20, [sp, #16]
    121c:	mov	x19, x1
    1220:	mov	x20, x0
    1224:	ldr	x1, [x1, #16]
    1228:	ldr	x0, [x0, #592]
    122c:	bl	0 <ctf_dynhash_remove>
    1230:	ldr	x0, [x19, #16]
    1234:	bl	0 <free>
    1238:	mov	x1, x19
    123c:	add	x0, x20, #0x258
    1240:	bl	0 <ctf_list_delete>
    1244:	mov	x0, x19
    1248:	ldp	x19, x20, [sp, #16]
    124c:	ldp	x29, x30, [sp], #32
    1250:	b	0 <free>

0000000000001254 <ctf_dvd_lookup>:
    1254:	ldr	x0, [x0, #592]
    1258:	b	0 <ctf_dynhash_lookup>

000000000000125c <ctf_snapshot>:
    125c:	ldr	x1, [x0, #624]
    1260:	add	x2, x1, #0x1
    1264:	str	x2, [x0, #624]
    1268:	ldr	x0, [x0, #480]
    126c:	ret

0000000000001270 <ctf_rollback>:
    1270:	stp	x29, x30, [sp, #-80]!
    1274:	mov	x29, sp
    1278:	stp	x23, x24, [sp, #48]
    127c:	mov	x23, x1
    1280:	ldr	w1, [x0, #552]
    1284:	stp	x19, x20, [sp, #16]
    1288:	stp	x21, x22, [sp, #32]
    128c:	str	x25, [sp, #64]
    1290:	tbnz	w1, #1, 12b4 <ctf_rollback+0x44>
    1294:	mov	w1, #0x40d                 	// #1037
    1298:	bl	0 <ctf_set_errno>
    129c:	ldp	x19, x20, [sp, #16]
    12a0:	ldp	x21, x22, [sp, #32]
    12a4:	ldp	x23, x24, [sp, #48]
    12a8:	ldr	x25, [sp, #64]
    12ac:	ldp	x29, x30, [sp], #80
    12b0:	ret
    12b4:	ldr	x1, [x0, #632]
    12b8:	mov	x19, x0
    12bc:	mov	x21, x2
    12c0:	cmp	x1, x2
    12c4:	b.cc	12d0 <ctf_rollback+0x60>  // b.lo, b.ul, b.last
    12c8:	mov	w1, #0x412                 	// #1042
    12cc:	b	1298 <ctf_rollback+0x28>
    12d0:	ldr	x20, [x0, #584]
    12d4:	cbnz	x20, 1308 <ctf_rollback+0x98>
    12d8:	ldr	x1, [x19, #608]
    12dc:	cbnz	x1, 1390 <ctf_rollback+0x120>
    12e0:	ldr	x0, [x19, #632]
    12e4:	str	x23, [x19, #480]
    12e8:	str	x21, [x19, #624]
    12ec:	cmp	x0, x21
    12f0:	b.ne	1300 <ctf_rollback+0x90>  // b.any
    12f4:	ldr	w0, [x19, #552]
    12f8:	and	w0, w0, #0xfffffffb
    12fc:	str	w0, [x19, #552]
    1300:	mov	w0, #0x0                   	// #0
    1304:	b	129c <ctf_rollback+0x2c>
    1308:	ldp	x25, x1, [x20, #8]
    130c:	ldr	w0, [x19, #544]
    1310:	and	x0, x0, x1
    1314:	cmp	x0, x23
    1318:	b.ls	1388 <ctf_rollback+0x118>  // b.plast
    131c:	ldr	x0, [x19]
    1320:	ldr	x1, [x0]
    1324:	ldr	w0, [x20, #28]
    1328:	blr	x1
    132c:	mov	w24, w0
    1330:	ldr	w1, [x20, #24]
    1334:	cbz	w1, 1370 <ctf_rollback+0x100>
    1338:	mov	x0, x19
    133c:	bl	0 <ctf_strraw>
    1340:	mov	x22, x0
    1344:	cbz	x0, 1370 <ctf_rollback+0x100>
    1348:	mov	w1, w24
    134c:	mov	x0, x19
    1350:	bl	c80 <ctf_name_table>
    1354:	ldr	x0, [x0, #8]
    1358:	mov	x1, x22
    135c:	bl	0 <ctf_dynhash_remove>
    1360:	add	x2, x20, #0x18
    1364:	mov	x1, x22
    1368:	mov	x0, x19
    136c:	bl	0 <ctf_str_remove_ref>
    1370:	ldr	x1, [x20, #16]
    1374:	ldr	x0, [x19, #568]
    1378:	bl	0 <ctf_dynhash_remove>
    137c:	mov	x1, x20
    1380:	mov	x0, x19
    1384:	bl	1098 <ctf_dtd_delete>
    1388:	mov	x20, x25
    138c:	b	12d4 <ctf_rollback+0x64>
    1390:	ldr	x0, [x1, #32]
    1394:	ldr	x20, [x1, #8]
    1398:	cmp	x0, x21
    139c:	b.ls	13a8 <ctf_rollback+0x138>  // b.plast
    13a0:	mov	x0, x19
    13a4:	bl	1210 <ctf_dvd_delete>
    13a8:	mov	x1, x20
    13ac:	b	12dc <ctf_rollback+0x6c>

00000000000013b0 <ctf_discard>:
    13b0:	ldr	w3, [x0, #552]
    13b4:	ldr	x2, [x0, #632]
    13b8:	ldr	x1, [x0, #616]
    13bc:	add	x2, x2, #0x1
    13c0:	tbz	w3, #2, 13c8 <ctf_discard+0x18>
    13c4:	b	1270 <ctf_rollback>
    13c8:	mov	w0, #0x0                   	// #0
    13cc:	ret

00000000000013d0 <ctf_add_slice>:
    13d0:	stp	x29, x30, [sp, #-64]!
    13d4:	mov	x29, sp
    13d8:	stp	x19, x20, [sp, #16]
    13dc:	mov	x20, x0
    13e0:	stp	x21, x22, [sp, #32]
    13e4:	str	x0, [sp, #56]
    13e8:	cbnz	x3, 1410 <ctf_add_slice+0x40>
    13ec:	mov	w1, #0x16                  	// #22
    13f0:	mov	x0, x20
    13f4:	bl	0 <ctf_set_errno>
    13f8:	mov	x4, x0
    13fc:	mov	x0, x4
    1400:	ldp	x19, x20, [sp, #16]
    1404:	ldp	x21, x22, [sp, #32]
    1408:	ldp	x29, x30, [sp], #64
    140c:	ret
    1410:	ldr	w0, [x3, #8]
    1414:	mov	x19, x3
    1418:	cmp	w0, #0xff
    141c:	b.hi	142c <ctf_add_slice+0x5c>  // b.pmore
    1420:	ldr	w0, [x3, #4]
    1424:	cmp	w0, #0xff
    1428:	b.ls	1434 <ctf_add_slice+0x64>  // b.plast
    142c:	mov	w1, #0x416                 	// #1046
    1430:	b	13f0 <ctf_add_slice+0x20>
    1434:	mov	x0, #0xfffffffe            	// #4294967294
    1438:	mov	x21, x2
    143c:	cmp	x2, x0
    1440:	b.hi	13ec <ctf_add_slice+0x1c>  // b.pmore
    1444:	mov	w22, w1
    1448:	add	x0, sp, #0x38
    144c:	mov	x1, x2
    1450:	bl	0 <ctf_lookup_by_id>
    1454:	cbnz	x0, 1460 <ctf_add_slice+0x90>
    1458:	mov	x4, #0xffffffffffffffff    	// #-1
    145c:	b	13fc <ctf_add_slice+0x2c>
    1460:	ldr	x0, [sp, #56]
    1464:	mov	x1, x21
    1468:	bl	0 <ctf_type_kind_unsliced>
    146c:	sub	w1, w0, #0x1
    1470:	cmp	w1, #0x1
    1474:	ccmp	w0, #0x8, #0x4, hi  // hi = pmore
    1478:	b.eq	1484 <ctf_add_slice+0xb4>  // b.none
    147c:	mov	w1, #0x3fe                 	// #1022
    1480:	b	13f0 <ctf_add_slice+0x20>
    1484:	add	x4, sp, #0x30
    1488:	mov	w1, w22
    148c:	mov	x0, x20
    1490:	mov	w3, #0xe                   	// #14
    1494:	mov	x2, #0x0                   	// #0
    1498:	bl	d50 <ctf_add_generic>
    149c:	mov	x4, x0
    14a0:	cmn	x0, #0x1
    14a4:	b.eq	1458 <ctf_add_slice+0x88>  // b.none
    14a8:	cmp	w22, #0x0
    14ac:	mov	w1, #0x38000000            	// #939524096
    14b0:	mov	w0, #0x3a000000            	// #973078528
    14b4:	csel	w0, w0, w1, ne  // ne = any
    14b8:	ldr	x1, [sp, #48]
    14bc:	str	w0, [x1, #28]
    14c0:	ldr	w0, [x19, #8]
    14c4:	neg	w0, w0
    14c8:	and	w0, w0, #0xfffffff8
    14cc:	neg	w0, w0
    14d0:	lsr	w0, w0, #3
    14d4:	bl	0 <clp2>
    14d8:	str	w21, [x1, #48]
    14dc:	str	w0, [x1, #32]
    14e0:	ldr	w0, [x19, #8]
    14e4:	strh	w0, [x1, #54]
    14e8:	ldr	w0, [x19, #4]
    14ec:	strh	w0, [x1, #52]
    14f0:	b	13fc <ctf_add_slice+0x2c>

00000000000014f4 <ctf_add_integer>:
    14f4:	mov	w4, #0x1                   	// #1
    14f8:	b	eac <ctf_add_encoded>

00000000000014fc <ctf_add_float>:
    14fc:	mov	w4, #0x2                   	// #2
    1500:	b	eac <ctf_add_encoded>

0000000000001504 <ctf_add_pointer>:
    1504:	mov	w3, #0x3                   	// #3
    1508:	b	f4c <ctf_add_reftype>

000000000000150c <ctf_add_array>:
    150c:	stp	x29, x30, [sp, #-64]!
    1510:	mov	x29, sp
    1514:	stp	x19, x20, [sp, #16]
    1518:	str	x21, [sp, #32]
    151c:	str	x0, [sp, #48]
    1520:	cbnz	x2, 153c <ctf_add_array+0x30>
    1524:	mov	w1, #0x16                  	// #22
    1528:	bl	0 <ctf_set_errno>
    152c:	ldp	x19, x20, [sp, #16]
    1530:	ldr	x21, [sp, #32]
    1534:	ldp	x29, x30, [sp], #64
    1538:	ret
    153c:	mov	w21, w1
    1540:	mov	x20, x0
    1544:	ldr	x1, [x2]
    1548:	mov	x19, x2
    154c:	add	x0, sp, #0x30
    1550:	bl	0 <ctf_lookup_by_id>
    1554:	cbnz	x0, 1560 <ctf_add_array+0x54>
    1558:	mov	x0, #0xffffffffffffffff    	// #-1
    155c:	b	152c <ctf_add_array+0x20>
    1560:	ldr	x1, [x19, #8]
    1564:	add	x0, sp, #0x30
    1568:	str	x20, [sp, #48]
    156c:	bl	0 <ctf_lookup_by_id>
    1570:	cbz	x0, 1558 <ctf_add_array+0x4c>
    1574:	add	x4, sp, #0x38
    1578:	mov	w1, w21
    157c:	mov	x0, x20
    1580:	mov	w3, #0x4                   	// #4
    1584:	mov	x2, #0x0                   	// #0
    1588:	bl	d50 <ctf_add_generic>
    158c:	cmn	x0, #0x1
    1590:	b.eq	152c <ctf_add_array+0x20>  // b.none
    1594:	mov	w1, #0x10000000            	// #268435456
    1598:	cmp	w21, #0x0
    159c:	mov	w2, #0x12000000            	// #301989888
    15a0:	csel	w2, w2, w1, ne  // ne = any
    15a4:	ldr	x1, [sp, #56]
    15a8:	stp	w2, wzr, [x1, #28]
    15ac:	ldp	x2, x3, [x19]
    15b0:	stp	x2, x3, [x1, #48]
    15b4:	ldr	x2, [x19, #16]
    15b8:	str	x2, [x1, #64]
    15bc:	b	152c <ctf_add_array+0x20>

00000000000015c0 <ctf_set_array>:
    15c0:	stp	x29, x30, [sp, #-48]!
    15c4:	mov	x29, sp
    15c8:	stp	x19, x20, [sp, #16]
    15cc:	mov	x19, x0
    15d0:	str	x21, [sp, #32]
    15d4:	mov	x21, x2
    15d8:	bl	1180 <ctf_dtd_lookup>
    15dc:	mov	x20, x0
    15e0:	ldr	w0, [x19, #552]
    15e4:	tbnz	w0, #1, 1604 <ctf_set_array+0x44>
    15e8:	mov	w1, #0x40d                 	// #1037
    15ec:	mov	x0, x19
    15f0:	bl	0 <ctf_set_errno>
    15f4:	ldp	x19, x20, [sp, #16]
    15f8:	ldr	x21, [sp, #32]
    15fc:	ldp	x29, x30, [sp], #48
    1600:	ret
    1604:	cbnz	x20, 1610 <ctf_set_array+0x50>
    1608:	mov	w1, #0x3fa                 	// #1018
    160c:	b	15ec <ctf_set_array+0x2c>
    1610:	ldr	x0, [x19]
    1614:	ldr	x1, [x0]
    1618:	ldr	w0, [x20, #28]
    161c:	blr	x1
    1620:	cmp	w0, #0x4
    1624:	b.ne	1608 <ctf_set_array+0x48>  // b.any
    1628:	ldr	w0, [x19, #552]
    162c:	orr	w0, w0, #0x4
    1630:	str	w0, [x19, #552]
    1634:	ldp	x0, x1, [x21]
    1638:	stp	x0, x1, [x20, #48]
    163c:	ldr	x0, [x21, #16]
    1640:	str	x0, [x20, #64]
    1644:	mov	w0, #0x0                   	// #0
    1648:	b	15f4 <ctf_set_array+0x34>

000000000000164c <ctf_add_function>:
    164c:	stp	x29, x30, [sp, #-80]!
    1650:	mov	x29, sp
    1654:	stp	x19, x20, [sp, #16]
    1658:	mov	x19, x0
    165c:	stp	x21, x22, [sp, #32]
    1660:	stp	x23, x24, [sp, #48]
    1664:	str	x0, [sp, #72]
    1668:	cbz	x2, 1690 <ctf_add_function+0x44>
    166c:	ldr	w0, [x2, #12]
    1670:	mov	x21, x2
    1674:	tst	w0, #0xfffffffe
    1678:	b.ne	1690 <ctf_add_function+0x44>  // b.any
    167c:	ldr	w20, [x2, #8]
    1680:	mov	w24, w1
    1684:	mov	x23, x3
    1688:	cbz	w20, 16a4 <ctf_add_function+0x58>
    168c:	cbnz	x3, 16a4 <ctf_add_function+0x58>
    1690:	mov	w1, #0x16                  	// #22
    1694:	mov	x0, x19
    1698:	bl	0 <ctf_set_errno>
    169c:	mov	x19, x0
    16a0:	b	16c4 <ctf_add_function+0x78>
    16a4:	ldr	x1, [x21]
    16a8:	cmp	w0, #0x0
    16ac:	cinc	w20, w20, ne  // ne = any
    16b0:	add	x0, sp, #0x48
    16b4:	mov	x22, #0x0                   	// #0
    16b8:	bl	0 <ctf_lookup_by_id>
    16bc:	cbnz	x0, 16f4 <ctf_add_function+0xa8>
    16c0:	mov	x19, #0xffffffffffffffff    	// #-1
    16c4:	mov	x0, x19
    16c8:	ldp	x19, x20, [sp, #16]
    16cc:	ldp	x21, x22, [sp, #32]
    16d0:	ldp	x23, x24, [sp, #48]
    16d4:	ldp	x29, x30, [sp], #80
    16d8:	ret
    16dc:	ldr	x1, [x23, x22, lsl #3]
    16e0:	add	x0, sp, #0x48
    16e4:	str	x19, [sp, #72]
    16e8:	bl	0 <ctf_lookup_by_id>
    16ec:	cbz	x0, 16c0 <ctf_add_function+0x74>
    16f0:	add	x22, x22, #0x1
    16f4:	ldr	w0, [x21, #8]
    16f8:	cmp	x0, x22
    16fc:	b.hi	16dc <ctf_add_function+0x90>  // b.pmore
    1700:	mov	w0, #0xffffff              	// #16777215
    1704:	cmp	w20, w0
    1708:	b.ls	1714 <ctf_add_function+0xc8>  // b.plast
    170c:	mov	w1, #0x4b                  	// #75
    1710:	b	1694 <ctf_add_function+0x48>
    1714:	cbz	w20, 1730 <ctf_add_function+0xe4>
    1718:	ubfiz	x0, x20, #3, #32
    171c:	bl	0 <malloc>
    1720:	mov	x22, x0
    1724:	cbnz	x0, 1734 <ctf_add_function+0xe8>
    1728:	mov	w1, #0xb                   	// #11
    172c:	b	1694 <ctf_add_function+0x48>
    1730:	mov	x22, #0x0                   	// #0
    1734:	mov	x0, x19
    1738:	add	x4, sp, #0x40
    173c:	mov	w1, w24
    1740:	mov	w3, #0x5                   	// #5
    1744:	mov	x2, #0x0                   	// #0
    1748:	bl	d50 <ctf_add_generic>
    174c:	mov	x19, x0
    1750:	cmn	x0, #0x1
    1754:	b.ne	1764 <ctf_add_function+0x118>  // b.any
    1758:	mov	x0, x22
    175c:	bl	0 <free>
    1760:	b	16c4 <ctf_add_function+0x78>
    1764:	cmp	w24, #0x0
    1768:	mov	w1, #0x14000000            	// #335544320
    176c:	ldr	x24, [sp, #64]
    1770:	mov	w0, #0x16000000            	// #369098752
    1774:	csel	w0, w0, w1, ne  // ne = any
    1778:	ldr	w2, [x21, #8]
    177c:	orr	w0, w20, w0
    1780:	mov	x1, x23
    1784:	str	w0, [x24, #28]
    1788:	ldr	x0, [x21]
    178c:	str	w0, [x24, #32]
    1790:	lsl	x2, x2, #3
    1794:	mov	x0, x22
    1798:	bl	0 <memcpy>
    179c:	ldr	w0, [x21, #12]
    17a0:	tbz	w0, #0, 17ac <ctf_add_function+0x160>
    17a4:	sub	w20, w20, #0x1
    17a8:	str	xzr, [x22, x20, lsl #3]
    17ac:	str	x22, [x24, #48]
    17b0:	b	16c4 <ctf_add_function+0x78>

00000000000017b4 <ctf_add_struct_sized>:
    17b4:	stp	x29, x30, [sp, #-80]!
    17b8:	mov	x29, sp
    17bc:	stp	x19, x20, [sp, #16]
    17c0:	mov	x20, x3
    17c4:	stp	x21, x22, [sp, #32]
    17c8:	mov	x21, x0
    17cc:	mov	w22, w1
    17d0:	str	x23, [sp, #48]
    17d4:	mov	x23, x2
    17d8:	cbz	x2, 184c <ctf_add_struct_sized+0x98>
    17dc:	mov	w1, #0x6                   	// #6
    17e0:	bl	0 <ctf_lookup_by_rawname>
    17e4:	mov	x19, x0
    17e8:	cbz	x0, 184c <ctf_add_struct_sized+0x98>
    17ec:	mov	x1, x0
    17f0:	mov	x0, x21
    17f4:	bl	0 <ctf_type_kind>
    17f8:	cmp	w0, #0x9
    17fc:	b.ne	184c <ctf_add_struct_sized+0x98>  // b.any
    1800:	mov	x1, x19
    1804:	mov	x0, x21
    1808:	bl	1180 <ctf_dtd_lookup>
    180c:	str	x0, [sp, #72]
    1810:	cmp	w22, #0x0
    1814:	mov	w0, #0x18000000            	// #402653184
    1818:	mov	w1, #0x1a000000            	// #436207616
    181c:	csel	w1, w1, w0, ne  // ne = any
    1820:	ldr	x0, [sp, #72]
    1824:	str	w1, [x0, #28]
    1828:	mov	x1, #0xfffffffe            	// #4294967294
    182c:	cmp	x20, x1
    1830:	b.ls	1888 <ctf_add_struct_sized+0xd4>  // b.plast
    1834:	mov	w1, #0xffffffff            	// #-1
    1838:	str	w1, [x0, #32]
    183c:	lsr	x1, x20, #32
    1840:	str	w1, [x0, #36]
    1844:	str	w20, [x0, #40]
    1848:	b	1870 <ctf_add_struct_sized+0xbc>
    184c:	add	x4, sp, #0x48
    1850:	mov	x2, x23
    1854:	mov	w1, w22
    1858:	mov	x0, x21
    185c:	mov	w3, #0x6                   	// #6
    1860:	bl	d50 <ctf_add_generic>
    1864:	mov	x19, x0
    1868:	cmn	x0, #0x1
    186c:	b.ne	1810 <ctf_add_struct_sized+0x5c>  // b.any
    1870:	mov	x0, x19
    1874:	ldp	x19, x20, [sp, #16]
    1878:	ldp	x21, x22, [sp, #32]
    187c:	ldr	x23, [sp, #48]
    1880:	ldp	x29, x30, [sp], #80
    1884:	ret
    1888:	str	w20, [x0, #32]
    188c:	b	1870 <ctf_add_struct_sized+0xbc>

0000000000001890 <ctf_add_struct>:
    1890:	mov	x3, #0x0                   	// #0
    1894:	b	17b4 <ctf_add_struct_sized>

0000000000001898 <ctf_add_union_sized>:
    1898:	stp	x29, x30, [sp, #-80]!
    189c:	mov	x29, sp
    18a0:	stp	x19, x20, [sp, #16]
    18a4:	mov	x20, x3
    18a8:	stp	x21, x22, [sp, #32]
    18ac:	mov	x21, x0
    18b0:	mov	w22, w1
    18b4:	str	x23, [sp, #48]
    18b8:	mov	x23, x2
    18bc:	cbz	x2, 1930 <ctf_add_union_sized+0x98>
    18c0:	mov	w1, #0x7                   	// #7
    18c4:	bl	0 <ctf_lookup_by_rawname>
    18c8:	mov	x19, x0
    18cc:	cbz	x0, 1930 <ctf_add_union_sized+0x98>
    18d0:	mov	x1, x0
    18d4:	mov	x0, x21
    18d8:	bl	0 <ctf_type_kind>
    18dc:	cmp	w0, #0x9
    18e0:	b.ne	1930 <ctf_add_union_sized+0x98>  // b.any
    18e4:	mov	x1, x19
    18e8:	mov	x0, x21
    18ec:	bl	1180 <ctf_dtd_lookup>
    18f0:	str	x0, [sp, #72]
    18f4:	cmp	w22, #0x0
    18f8:	mov	w0, #0x1c000000            	// #469762048
    18fc:	mov	w1, #0x1e000000            	// #503316480
    1900:	csel	w1, w1, w0, ne  // ne = any
    1904:	ldr	x0, [sp, #72]
    1908:	str	w1, [x0, #28]
    190c:	mov	x1, #0xfffffffe            	// #4294967294
    1910:	cmp	x20, x1
    1914:	b.ls	196c <ctf_add_union_sized+0xd4>  // b.plast
    1918:	mov	w1, #0xffffffff            	// #-1
    191c:	str	w1, [x0, #32]
    1920:	lsr	x1, x20, #32
    1924:	str	w1, [x0, #36]
    1928:	str	w20, [x0, #40]
    192c:	b	1954 <ctf_add_union_sized+0xbc>
    1930:	add	x4, sp, #0x48
    1934:	mov	x2, x23
    1938:	mov	w1, w22
    193c:	mov	x0, x21
    1940:	mov	w3, #0x7                   	// #7
    1944:	bl	d50 <ctf_add_generic>
    1948:	mov	x19, x0
    194c:	cmn	x0, #0x1
    1950:	b.ne	18f4 <ctf_add_union_sized+0x5c>  // b.any
    1954:	mov	x0, x19
    1958:	ldp	x19, x20, [sp, #16]
    195c:	ldp	x21, x22, [sp, #32]
    1960:	ldr	x23, [sp, #48]
    1964:	ldp	x29, x30, [sp], #80
    1968:	ret
    196c:	str	w20, [x0, #32]
    1970:	b	1954 <ctf_add_union_sized+0xbc>

0000000000001974 <ctf_add_union>:
    1974:	mov	x3, #0x0                   	// #0
    1978:	b	1898 <ctf_add_union_sized>

000000000000197c <ctf_add_enum>:
    197c:	stp	x29, x30, [sp, #-64]!
    1980:	mov	x29, sp
    1984:	stp	x19, x20, [sp, #16]
    1988:	mov	x20, x0
    198c:	stp	x21, x22, [sp, #32]
    1990:	mov	w21, w1
    1994:	mov	x22, x2
    1998:	cbz	x2, 19f8 <ctf_add_enum+0x7c>
    199c:	mov	w1, #0x8                   	// #8
    19a0:	bl	0 <ctf_lookup_by_rawname>
    19a4:	mov	x19, x0
    19a8:	cbz	x0, 19f8 <ctf_add_enum+0x7c>
    19ac:	mov	x1, x0
    19b0:	mov	x0, x20
    19b4:	bl	0 <ctf_type_kind>
    19b8:	cmp	w0, #0x9
    19bc:	b.ne	19f8 <ctf_add_enum+0x7c>  // b.any
    19c0:	mov	x1, x19
    19c4:	mov	x0, x20
    19c8:	bl	1180 <ctf_dtd_lookup>
    19cc:	str	x0, [sp, #56]
    19d0:	mov	w1, #0x20000000            	// #536870912
    19d4:	cmp	w21, #0x0
    19d8:	mov	w0, #0x22000000            	// #570425344
    19dc:	csel	w0, w0, w1, ne  // ne = any
    19e0:	ldr	x1, [sp, #56]
    19e4:	str	w0, [x1, #28]
    19e8:	ldr	x0, [x20, #488]
    19ec:	ldr	x0, [x0, #40]
    19f0:	str	w0, [x1, #32]
    19f4:	b	1a1c <ctf_add_enum+0xa0>
    19f8:	add	x4, sp, #0x38
    19fc:	mov	x2, x22
    1a00:	mov	w1, w21
    1a04:	mov	x0, x20
    1a08:	mov	w3, #0x8                   	// #8
    1a0c:	bl	d50 <ctf_add_generic>
    1a10:	mov	x19, x0
    1a14:	cmn	x0, #0x1
    1a18:	b.ne	19d0 <ctf_add_enum+0x54>  // b.any
    1a1c:	mov	x0, x19
    1a20:	ldp	x19, x20, [sp, #16]
    1a24:	ldp	x21, x22, [sp, #32]
    1a28:	ldp	x29, x30, [sp], #64
    1a2c:	ret

0000000000001a30 <ctf_add_enum_encoded>:
    1a30:	stp	x29, x30, [sp, #-64]!
    1a34:	mov	x29, sp
    1a38:	stp	x19, x20, [sp, #16]
    1a3c:	mov	x20, x0
    1a40:	stp	x21, x22, [sp, #32]
    1a44:	mov	w21, w1
    1a48:	mov	x22, x2
    1a4c:	str	x23, [sp, #48]
    1a50:	mov	x23, x3
    1a54:	cbz	x2, 1aac <ctf_add_enum_encoded+0x7c>
    1a58:	mov	w1, #0x8                   	// #8
    1a5c:	bl	0 <ctf_lookup_by_rawname>
    1a60:	mov	x19, x0
    1a64:	cbz	x0, 1aac <ctf_add_enum_encoded+0x7c>
    1a68:	mov	x1, x0
    1a6c:	mov	x0, x20
    1a70:	bl	0 <ctf_type_kind>
    1a74:	cmp	w0, #0x9
    1a78:	b.eq	1ac8 <ctf_add_enum_encoded+0x98>  // b.none
    1a7c:	mov	x1, x19
    1a80:	mov	x0, x20
    1a84:	bl	0 <ctf_type_kind_unsliced>
    1a88:	cmp	w0, #0x8
    1a8c:	b.eq	1ac8 <ctf_add_enum_encoded+0x98>  // b.none
    1a90:	mov	x0, x20
    1a94:	mov	w1, #0x3fe                 	// #1022
    1a98:	ldp	x19, x20, [sp, #16]
    1a9c:	ldp	x21, x22, [sp, #32]
    1aa0:	ldr	x23, [sp, #48]
    1aa4:	ldp	x29, x30, [sp], #64
    1aa8:	b	0 <ctf_set_errno>
    1aac:	mov	x2, x22
    1ab0:	mov	w1, w21
    1ab4:	mov	x0, x20
    1ab8:	bl	197c <ctf_add_enum>
    1abc:	mov	x19, x0
    1ac0:	cmn	x0, #0x1
    1ac4:	b.eq	1aec <ctf_add_enum_encoded+0xbc>  // b.none
    1ac8:	mov	x3, x23
    1acc:	mov	x2, x19
    1ad0:	mov	w1, w21
    1ad4:	mov	x0, x20
    1ad8:	ldp	x19, x20, [sp, #16]
    1adc:	ldp	x21, x22, [sp, #32]
    1ae0:	ldr	x23, [sp, #48]
    1ae4:	ldp	x29, x30, [sp], #64
    1ae8:	b	13d0 <ctf_add_slice>
    1aec:	ldp	x19, x20, [sp, #16]
    1af0:	ldp	x21, x22, [sp, #32]
    1af4:	ldr	x23, [sp, #48]
    1af8:	ldp	x29, x30, [sp], #64
    1afc:	ret

0000000000001b00 <ctf_add_forward>:
    1b00:	stp	x29, x30, [sp, #-64]!
    1b04:	mov	x29, sp
    1b08:	stp	x19, x20, [sp, #16]
    1b0c:	mov	w20, w1
    1b10:	sub	w1, w3, #0x6
    1b14:	stp	x21, x22, [sp, #32]
    1b18:	cmp	w1, #0x2
    1b1c:	b.ls	1b38 <ctf_add_forward+0x38>  // b.plast
    1b20:	mov	w1, #0x3fd                 	// #1021
    1b24:	bl	0 <ctf_set_errno>
    1b28:	ldp	x19, x20, [sp, #16]
    1b2c:	ldp	x21, x22, [sp, #32]
    1b30:	ldp	x29, x30, [sp], #64
    1b34:	ret
    1b38:	mov	x22, x0
    1b3c:	mov	x21, x2
    1b40:	mov	w19, w3
    1b44:	cbz	x2, 1b50 <ctf_add_forward+0x50>
    1b48:	mov	w1, w3
    1b4c:	bl	0 <ctf_lookup_by_rawname>
    1b50:	add	x4, sp, #0x38
    1b54:	mov	x2, x21
    1b58:	mov	w1, w20
    1b5c:	mov	x0, x22
    1b60:	mov	w3, #0x9                   	// #9
    1b64:	bl	d50 <ctf_add_generic>
    1b68:	cmn	x0, #0x1
    1b6c:	b.eq	1b28 <ctf_add_forward+0x28>  // b.none
    1b70:	mov	w2, #0x24000000            	// #603979776
    1b74:	cmp	w20, #0x0
    1b78:	mov	w1, #0x26000000            	// #637534208
    1b7c:	csel	w1, w1, w2, ne  // ne = any
    1b80:	ldr	x2, [sp, #56]
    1b84:	stp	w1, w19, [x2, #28]
    1b88:	b	1b28 <ctf_add_forward+0x28>

0000000000001b8c <ctf_add_typedef>:
    1b8c:	stp	x29, x30, [sp, #-64]!
    1b90:	mov	x29, sp
    1b94:	stp	x19, x20, [sp, #16]
    1b98:	mov	w20, w1
    1b9c:	mov	x1, #0xfffffffe            	// #4294967294
    1ba0:	stp	x21, x22, [sp, #32]
    1ba4:	cmp	x3, x1
    1ba8:	str	x0, [sp, #56]
    1bac:	b.ls	1bc8 <ctf_add_typedef+0x3c>  // b.plast
    1bb0:	mov	w1, #0x16                  	// #22
    1bb4:	bl	0 <ctf_set_errno>
    1bb8:	ldp	x19, x20, [sp, #16]
    1bbc:	ldp	x21, x22, [sp, #32]
    1bc0:	ldp	x29, x30, [sp], #64
    1bc4:	ret
    1bc8:	mov	x21, x0
    1bcc:	mov	x22, x2
    1bd0:	mov	x19, x3
    1bd4:	mov	x1, x3
    1bd8:	add	x0, sp, #0x38
    1bdc:	bl	0 <ctf_lookup_by_id>
    1be0:	cbnz	x0, 1bec <ctf_add_typedef+0x60>
    1be4:	mov	x0, #0xffffffffffffffff    	// #-1
    1be8:	b	1bb8 <ctf_add_typedef+0x2c>
    1bec:	add	x4, sp, #0x30
    1bf0:	mov	x2, x22
    1bf4:	mov	w1, w20
    1bf8:	mov	x0, x21
    1bfc:	mov	w3, #0xa                   	// #10
    1c00:	bl	d50 <ctf_add_generic>
    1c04:	cmn	x0, #0x1
    1c08:	b.eq	1be4 <ctf_add_typedef+0x58>  // b.none
    1c0c:	mov	w2, #0x28000000            	// #671088640
    1c10:	cmp	w20, #0x0
    1c14:	mov	w1, #0x2a000000            	// #704643072
    1c18:	csel	w1, w1, w2, ne  // ne = any
    1c1c:	ldr	x2, [sp, #48]
    1c20:	stp	w1, w19, [x2, #28]
    1c24:	b	1bb8 <ctf_add_typedef+0x2c>

0000000000001c28 <ctf_add_type_internal>:
    1c28:	sub	sp, sp, #0x130
    1c2c:	stp	x29, x30, [sp, #16]
    1c30:	add	x29, sp, #0x10
    1c34:	str	x1, [sp, #136]
    1c38:	ldr	w1, [x0, #552]
    1c3c:	stp	x19, x20, [sp, #32]
    1c40:	stp	x21, x22, [sp, #48]
    1c44:	stp	x23, x24, [sp, #64]
    1c48:	stp	x25, x26, [sp, #80]
    1c4c:	stp	x27, x28, [sp, #96]
    1c50:	str	x0, [sp, #152]
    1c54:	tbnz	w1, #1, 1c68 <ctf_add_type_internal+0x40>
    1c58:	mov	w1, #0x40d                 	// #1037
    1c5c:	bl	0 <ctf_set_errno>
    1c60:	mov	x27, x0
    1c64:	b	1fc0 <ctf_add_type_internal+0x398>
    1c68:	mov	x19, x0
    1c6c:	mov	x21, x2
    1c70:	mov	x24, x3
    1c74:	mov	x1, x2
    1c78:	add	x0, sp, #0x88
    1c7c:	bl	0 <ctf_lookup_by_id>
    1c80:	mov	x26, x0
    1c84:	cbnz	x0, 1c98 <ctf_add_type_internal+0x70>
    1c88:	ldr	x0, [sp, #136]
    1c8c:	bl	0 <ctf_errno>
    1c90:	mov	w1, w0
    1c94:	b	1cc0 <ctf_add_type_internal+0x98>
    1c98:	ldr	x0, [sp, #136]
    1c9c:	mov	x1, x21
    1ca0:	bl	0 <ctf_type_resolve>
    1ca4:	cmn	x0, #0x1
    1ca8:	b.ne	1cc8 <ctf_add_type_internal+0xa0>  // b.any
    1cac:	ldr	x0, [sp, #136]
    1cb0:	bl	0 <ctf_errno>
    1cb4:	mov	w1, w0
    1cb8:	cmp	w0, #0x41b
    1cbc:	b.ne	1cc8 <ctf_add_type_internal+0xa0>  // b.any
    1cc0:	mov	x0, x19
    1cc4:	b	1c5c <ctf_add_type_internal+0x34>
    1cc8:	ldr	w1, [x26]
    1ccc:	ldr	x0, [sp, #136]
    1cd0:	bl	0 <ctf_strptr>
    1cd4:	mov	x23, x0
    1cd8:	ldr	x0, [sp, #136]
    1cdc:	ldr	x0, [x0]
    1ce0:	ldr	x1, [x0]
    1ce4:	ldr	w0, [x26, #4]
    1ce8:	blr	x1
    1cec:	mov	w20, w0
    1cf0:	ldr	x0, [sp, #136]
    1cf4:	ldr	x0, [x0]
    1cf8:	ldr	x1, [x0, #8]
    1cfc:	ldr	w0, [x26, #4]
    1d00:	blr	x1
    1d04:	mov	w22, w0
    1d08:	ldr	x0, [sp, #136]
    1d0c:	ldr	x0, [x0]
    1d10:	ldr	x1, [x0, #16]
    1d14:	ldr	w0, [x26, #4]
    1d18:	blr	x1
    1d1c:	str	w0, [sp, #124]
    1d20:	ldr	x0, [sp, #136]
    1d24:	add	x2, sp, #0x98
    1d28:	mov	x1, x21
    1d2c:	bl	0 <ctf_type_mapping>
    1d30:	mov	x27, x0
    1d34:	cbz	x0, 1da0 <ctf_add_type_internal+0x178>
    1d38:	ldr	x0, [x24, #696]
    1d3c:	mov	x1, x21
    1d40:	bl	0 <ctf_dynhash_lookup>
    1d44:	cbnz	x0, 1fc0 <ctf_add_type_internal+0x398>
    1d48:	ldr	x0, [sp, #152]
    1d4c:	mov	x1, x27
    1d50:	bl	0 <ctf_type_kind_unsliced>
    1d54:	cmp	w0, w20
    1d58:	b.ne	1da0 <ctf_add_type_internal+0x178>  // b.any
    1d5c:	sub	w0, w20, #0x6
    1d60:	cmp	w0, #0x2
    1d64:	b.hi	1da0 <ctf_add_type_internal+0x178>  // b.pmore
    1d68:	add	x0, sp, #0x98
    1d6c:	mov	x1, #0xffffffffffffffff    	// #-1
    1d70:	bl	0 <ctf_lookup_by_id>
    1d74:	cbz	x0, 1d98 <ctf_add_type_internal+0x170>
    1d78:	ldr	x1, [sp, #152]
    1d7c:	ldr	w0, [x0, #4]
    1d80:	ldr	x1, [x1]
    1d84:	ldr	x1, [x1, #16]
    1d88:	blr	x1
    1d8c:	ldr	w1, [sp, #124]
    1d90:	cmp	w0, w1
    1d94:	b.eq	1fc0 <ctf_add_type_internal+0x398>  // b.none
    1d98:	mov	w28, w20
    1d9c:	b	1dac <ctf_add_type_internal+0x184>
    1da0:	cmp	w20, #0x9
    1da4:	b.ne	1d98 <ctf_add_type_internal+0x170>  // b.any
    1da8:	ldr	w28, [x26, #8]
    1dac:	tbnz	w22, #0, 1df0 <ctf_add_type_internal+0x1c8>
    1db0:	mov	w25, #0x0                   	// #0
    1db4:	mov	x27, #0xffffffffffffffff    	// #-1
    1db8:	cmp	w25, w20
    1dbc:	ccmn	x27, #0x1, #0x4, ne  // ne = any
    1dc0:	b.eq	1e64 <ctf_add_type_internal+0x23c>  // b.none
    1dc4:	cmp	w20, #0x9
    1dc8:	b.ne	1e24 <ctf_add_type_internal+0x1fc>  // b.any
    1dcc:	sub	w0, w25, #0x6
    1dd0:	cmp	w0, #0x2
    1dd4:	b.hi	1e40 <ctf_add_type_internal+0x218>  // b.pmore
    1dd8:	ldr	x0, [sp, #136]
    1ddc:	mov	x3, x27
    1de0:	mov	x2, x19
    1de4:	mov	x1, x21
    1de8:	bl	0 <ctf_add_type_mapping>
    1dec:	b	1fc0 <ctf_add_type_internal+0x398>
    1df0:	ldrb	w0, [x23]
    1df4:	cbz	w0, 1db0 <ctf_add_type_internal+0x188>
    1df8:	mov	x2, x23
    1dfc:	mov	w1, w28
    1e00:	mov	x0, x19
    1e04:	bl	0 <ctf_lookup_by_rawname>
    1e08:	mov	x27, x0
    1e0c:	cbz	x0, 1db0 <ctf_add_type_internal+0x188>
    1e10:	mov	x1, x0
    1e14:	mov	x0, x19
    1e18:	bl	0 <ctf_type_kind_unsliced>
    1e1c:	mov	w25, w0
    1e20:	b	1db8 <ctf_add_type_internal+0x190>
    1e24:	cmp	w25, #0x9
    1e28:	b.ne	1e40 <ctf_add_type_internal+0x218>  // b.any
    1e2c:	cmp	w20, #0x8
    1e30:	ccmp	w20, #0x6, #0x4, ne  // ne = any
    1e34:	b.eq	1e64 <ctf_add_type_internal+0x23c>  // b.none
    1e38:	cmp	w20, #0x7
    1e3c:	b.eq	1f04 <ctf_add_type_internal+0x2dc>  // b.none
    1e40:	adrp	x0, 0 <clp2>
    1e44:	mov	w4, w25
    1e48:	mov	x3, x27
    1e4c:	mov	w2, w20
    1e50:	mov	x1, x23
    1e54:	add	x0, x0, #0x0
    1e58:	bl	0 <ctf_dprintf>
    1e5c:	mov	w1, #0x411                 	// #1041
    1e60:	b	1cc0 <ctf_add_type_internal+0x98>
    1e64:	sub	w0, w20, #0x1
    1e68:	cmp	w0, #0x1
    1e6c:	ccmp	w20, #0xe, #0x4, hi  // hi = pmore
    1e70:	b.ne	1f04 <ctf_add_type_internal+0x2dc>  // b.any
    1e74:	ldr	x0, [sp, #136]
    1e78:	add	x2, sp, #0xa0
    1e7c:	mov	x1, x21
    1e80:	bl	0 <ctf_type_encoding>
    1e84:	cbnz	w0, 1c88 <ctf_add_type_internal+0x60>
    1e88:	cmn	x27, #0x1
    1e8c:	b.eq	1f04 <ctf_add_type_internal+0x2dc>  // b.none
    1e90:	mov	x1, x27
    1e94:	add	x0, sp, #0x118
    1e98:	str	x19, [sp, #280]
    1e9c:	bl	0 <ctf_lookup_by_id>
    1ea0:	str	x0, [sp, #128]
    1ea4:	cbz	x0, 1fbc <ctf_add_type_internal+0x394>
    1ea8:	add	x2, sp, #0xb0
    1eac:	mov	x1, x27
    1eb0:	mov	x0, x19
    1eb4:	bl	0 <ctf_type_encoding>
    1eb8:	cbnz	w0, 1fbc <ctf_add_type_internal+0x394>
    1ebc:	ldr	x0, [sp, #280]
    1ec0:	ldr	x3, [sp, #128]
    1ec4:	ldr	x0, [x0]
    1ec8:	ldr	x1, [x0, #8]
    1ecc:	ldr	w0, [x3, #4]
    1ed0:	blr	x1
    1ed4:	add	x1, sp, #0xb0
    1ed8:	mov	x2, #0xc                   	// #12
    1edc:	tbz	w0, #0, 1ef8 <ctf_add_type_internal+0x2d0>
    1ee0:	add	x0, sp, #0xa0
    1ee4:	bl	0 <memcmp>
    1ee8:	cbnz	w0, 1e5c <ctf_add_type_internal+0x234>
    1eec:	cmp	w20, #0xe
    1ef0:	b.eq	1f04 <ctf_add_type_internal+0x2dc>  // b.none
    1ef4:	b	1dd8 <ctf_add_type_internal+0x1b0>
    1ef8:	add	x0, sp, #0xa0
    1efc:	bl	0 <memcmp>
    1f00:	cbz	w0, 1eec <ctf_add_type_internal+0x2c4>
    1f04:	ldr	x0, [sp, #136]
    1f08:	stp	x0, x21, [sp, #208]
    1f0c:	mov	x1, x21
    1f10:	ldr	x0, [x24, #696]
    1f14:	mov	x2, #0x1                   	// #1
    1f18:	stp	xzr, x19, [sp, #224]
    1f1c:	stp	x27, xzr, [sp, #240]
    1f20:	bl	0 <ctf_dynhash_insert>
    1f24:	tbz	w0, #31, 1f30 <ctf_add_type_internal+0x308>
    1f28:	mov	w1, #0xc                   	// #12
    1f2c:	b	1cc0 <ctf_add_type_internal+0x98>
    1f30:	sub	w1, w20, #0x1
    1f34:	cmp	w1, #0xd
    1f38:	b.hi	240c <ctf_add_type_internal+0x7e4>  // b.pmore
    1f3c:	adrp	x0, 0 <clp2>
    1f40:	add	x0, x0, #0x0
    1f44:	ldrh	w0, [x0, w1, uxtw #1]
    1f48:	adr	x1, 1f54 <ctf_add_type_internal+0x32c>
    1f4c:	add	x0, x1, w0, sxth #2
    1f50:	br	x0
    1f54:	add	x3, sp, #0xa0
    1f58:	mov	x2, x23
    1f5c:	mov	w1, w22
    1f60:	mov	x0, x19
    1f64:	bl	14f4 <ctf_add_integer>
    1f68:	mov	x27, x0
    1f6c:	cmn	x0, #0x1
    1f70:	b.eq	1fbc <ctf_add_type_internal+0x394>  // b.none
    1f74:	b	1dd8 <ctf_add_type_internal+0x1b0>
    1f78:	add	x3, sp, #0xa0
    1f7c:	mov	x2, x23
    1f80:	mov	w1, w22
    1f84:	mov	x0, x19
    1f88:	bl	14fc <ctf_add_float>
    1f8c:	b	1f68 <ctf_add_type_internal+0x340>
    1f90:	ldr	x0, [sp, #136]
    1f94:	mov	x1, x21
    1f98:	bl	0 <ctf_type_reference>
    1f9c:	mov	x2, x0
    1fa0:	ldr	x1, [sp, #136]
    1fa4:	mov	x3, x24
    1fa8:	mov	x0, x19
    1fac:	bl	1c28 <ctf_add_type_internal>
    1fb0:	mov	x2, x0
    1fb4:	cmn	x0, #0x1
    1fb8:	b.ne	1fe4 <ctf_add_type_internal+0x3bc>  // b.any
    1fbc:	mov	x27, #0xffffffffffffffff    	// #-1
    1fc0:	mov	x0, x27
    1fc4:	ldp	x29, x30, [sp, #16]
    1fc8:	ldp	x19, x20, [sp, #32]
    1fcc:	ldp	x21, x22, [sp, #48]
    1fd0:	ldp	x23, x24, [sp, #64]
    1fd4:	ldp	x25, x26, [sp, #80]
    1fd8:	ldp	x27, x28, [sp, #96]
    1fdc:	add	sp, sp, #0x130
    1fe0:	ret
    1fe4:	add	x3, sp, #0xa0
    1fe8:	mov	w1, w22
    1fec:	mov	x0, x19
    1ff0:	bl	13d0 <ctf_add_slice>
    1ff4:	b	1f68 <ctf_add_type_internal+0x340>
    1ff8:	ldr	x0, [sp, #136]
    1ffc:	mov	x1, x21
    2000:	bl	0 <ctf_type_reference>
    2004:	mov	x2, x0
    2008:	ldr	x1, [sp, #136]
    200c:	mov	x3, x24
    2010:	mov	x0, x19
    2014:	bl	1c28 <ctf_add_type_internal>
    2018:	mov	x2, x0
    201c:	cmn	x0, #0x1
    2020:	b.eq	1fbc <ctf_add_type_internal+0x394>  // b.none
    2024:	mov	w3, w20
    2028:	mov	w1, w22
    202c:	mov	x0, x19
    2030:	bl	f4c <ctf_add_reftype>
    2034:	b	1f68 <ctf_add_type_internal+0x340>
    2038:	ldr	x0, [sp, #136]
    203c:	add	x2, sp, #0x100
    2040:	mov	x1, x21
    2044:	bl	0 <ctf_array_info>
    2048:	cbnz	w0, 1c88 <ctf_add_type_internal+0x60>
    204c:	ldr	x1, [sp, #136]
    2050:	mov	x3, x24
    2054:	ldr	x2, [sp, #256]
    2058:	mov	x0, x19
    205c:	bl	1c28 <ctf_add_type_internal>
    2060:	str	x0, [sp, #256]
    2064:	ldr	x1, [sp, #136]
    2068:	mov	x3, x24
    206c:	ldr	x2, [sp, #264]
    2070:	mov	x0, x19
    2074:	bl	1c28 <ctf_add_type_internal>
    2078:	str	x0, [sp, #264]
    207c:	ldr	x1, [sp, #256]
    2080:	cmn	x1, #0x1
    2084:	b.eq	1fbc <ctf_add_type_internal+0x394>  // b.none
    2088:	cmn	x0, #0x1
    208c:	b.eq	1fbc <ctf_add_type_internal+0x394>  // b.none
    2090:	cmn	x27, #0x1
    2094:	b.eq	20ec <ctf_add_type_internal+0x4c4>  // b.none
    2098:	add	x2, sp, #0x118
    209c:	mov	x1, x27
    20a0:	mov	x0, x19
    20a4:	bl	0 <ctf_array_info>
    20a8:	cbnz	w0, 1fbc <ctf_add_type_internal+0x394>
    20ac:	add	x1, sp, #0x118
    20b0:	add	x0, sp, #0x100
    20b4:	mov	x2, #0x18                  	// #24
    20b8:	bl	0 <memcmp>
    20bc:	cbz	w0, 1dd8 <ctf_add_type_internal+0x1b0>
    20c0:	ldp	x3, x4, [sp, #256]
    20c4:	mov	x2, x27
    20c8:	ldp	x6, x7, [sp, #280]
    20cc:	mov	x1, x23
    20d0:	ldr	w5, [sp, #272]
    20d4:	ldr	w0, [sp, #296]
    20d8:	str	w0, [sp]
    20dc:	adrp	x0, 0 <clp2>
    20e0:	add	x0, x0, #0x0
    20e4:	bl	0 <ctf_dprintf>
    20e8:	b	1e5c <ctf_add_type_internal+0x234>
    20ec:	add	x2, sp, #0x100
    20f0:	mov	w1, w22
    20f4:	mov	x0, x19
    20f8:	bl	150c <ctf_add_array>
    20fc:	b	1f68 <ctf_add_type_internal+0x340>
    2100:	ldr	w2, [x26, #8]
    2104:	mov	x3, x24
    2108:	ldr	x1, [sp, #136]
    210c:	mov	x0, x19
    2110:	bl	1c28 <ctf_add_type_internal>
    2114:	stp	x0, xzr, [sp, #192]
    2118:	cmn	x0, #0x1
    211c:	b.eq	1fbc <ctf_add_type_internal+0x394>  // b.none
    2120:	add	x2, sp, #0xc0
    2124:	mov	w1, w22
    2128:	mov	x0, x19
    212c:	mov	x3, #0x0                   	// #0
    2130:	bl	164c <ctf_add_function>
    2134:	b	1f68 <ctf_add_type_internal+0x340>
    2138:	cmn	x27, #0x1
    213c:	b.eq	21dc <ctf_add_type_internal+0x5b4>  // b.none
    2140:	cmp	w25, #0x9
    2144:	b.eq	21dc <ctf_add_type_internal+0x5b4>  // b.none
    2148:	ldr	x0, [sp, #136]
    214c:	mov	x1, x21
    2150:	bl	0 <ctf_type_size>
    2154:	mov	x20, x0
    2158:	mov	x1, x27
    215c:	mov	x0, x19
    2160:	bl	0 <ctf_type_size>
    2164:	cmp	x20, x0
    2168:	b.eq	21a8 <ctf_add_type_internal+0x580>  // b.none
    216c:	ldr	x0, [sp, #136]
    2170:	mov	x1, x21
    2174:	bl	0 <ctf_type_size>
    2178:	mov	x20, x0
    217c:	mov	x1, x27
    2180:	mov	x0, x19
    2184:	bl	0 <ctf_type_size>
    2188:	mov	x4, x0
    218c:	mov	x3, x20
    2190:	mov	x2, x27
    2194:	mov	x1, x23
    2198:	adrp	x0, 0 <clp2>
    219c:	add	x0, x0, #0x0
    21a0:	bl	0 <ctf_dprintf>
    21a4:	b	1e5c <ctf_add_type_internal+0x234>
    21a8:	ldr	x0, [sp, #136]
    21ac:	adrp	x2, 0 <clp2>
    21b0:	add	x3, sp, #0xe8
    21b4:	add	x2, x2, #0x0
    21b8:	mov	x1, x21
    21bc:	bl	0 <ctf_member_iter>
    21c0:	cbz	w0, 1dd8 <ctf_add_type_internal+0x1b0>
    21c4:	adrp	x0, 0 <clp2>
    21c8:	mov	x2, x27
    21cc:	mov	x1, x23
    21d0:	add	x0, x0, #0x0
    21d4:	bl	0 <ctf_dprintf>
    21d8:	b	1e5c <ctf_add_type_internal+0x234>
    21dc:	add	x4, sp, #0x100
    21e0:	mov	w3, w20
    21e4:	mov	x2, x23
    21e8:	mov	w1, w22
    21ec:	mov	x0, x19
    21f0:	bl	d50 <ctf_add_generic>
    21f4:	mov	x27, x0
    21f8:	cmn	x0, #0x1
    21fc:	b.eq	1fbc <ctf_add_type_internal+0x394>  // b.none
    2200:	mov	x3, x0
    2204:	mov	x2, x19
    2208:	ldr	x0, [sp, #256]
    220c:	stp	x27, x0, [sp, #240]
    2210:	mov	x1, x21
    2214:	ldr	x0, [sp, #136]
    2218:	bl	0 <ctf_add_type_mapping>
    221c:	ldr	x0, [sp, #136]
    2220:	mov	x1, x21
    2224:	add	x3, sp, #0xe8
    2228:	adrp	x2, 0 <clp2>
    222c:	add	x2, x2, #0x0
    2230:	bl	0 <ctf_member_iter>
    2234:	mov	w23, w0
    2238:	ldr	x0, [sp, #136]
    223c:	mov	x1, x21
    2240:	bl	0 <ctf_type_size>
    2244:	tbnz	x0, #63, 1fbc <ctf_add_type_internal+0x394>
    2248:	mov	x2, #0xfffffffe            	// #4294967294
    224c:	cmp	x0, x2
    2250:	ldr	x1, [sp, #256]
    2254:	b.le	22a4 <ctf_add_type_internal+0x67c>
    2258:	mov	w2, #0xffffffff            	// #-1
    225c:	str	w2, [x1, #32]
    2260:	lsr	x2, x0, #32
    2264:	str	w2, [x1, #36]
    2268:	str	w0, [x1, #40]
    226c:	cmp	w22, #0x0
    2270:	mov	w0, #0x2000000             	// #33554432
    2274:	csel	w22, w22, w0, eq  // eq = none
    2278:	ldr	w0, [sp, #124]
    227c:	cmp	w23, #0x0
    2280:	and	w0, w0, #0xffffff
    2284:	cset	w23, ne  // ne = any
    2288:	orr	w20, w0, w20, lsl #26
    228c:	orr	w22, w20, w22
    2290:	str	w22, [x1, #28]
    2294:	ldr	x20, [x1, #56]
    2298:	cbnz	x20, 22ac <ctf_add_type_internal+0x684>
    229c:	cbz	w23, 1dd8 <ctf_add_type_internal+0x1b0>
    22a0:	b	1fbc <ctf_add_type_internal+0x394>
    22a4:	str	w0, [x1, #32]
    22a8:	b	226c <ctf_add_type_internal+0x644>
    22ac:	ldr	x1, [x20, #24]
    22b0:	add	x2, sp, #0x118
    22b4:	ldr	x0, [sp, #136]
    22b8:	str	x19, [sp, #280]
    22bc:	bl	0 <ctf_type_mapping>
    22c0:	cbnz	x0, 22fc <ctf_add_type_internal+0x6d4>
    22c4:	ldr	x2, [x20, #24]
    22c8:	mov	x3, x24
    22cc:	ldr	x1, [sp, #136]
    22d0:	mov	x0, x19
    22d4:	bl	1c28 <ctf_add_type_internal>
    22d8:	str	x0, [x20, #24]
    22dc:	cmn	x0, #0x1
    22e0:	b.ne	22f4 <ctf_add_type_internal+0x6cc>  // b.any
    22e4:	mov	x0, x19
    22e8:	bl	0 <ctf_errno>
    22ec:	cmp	w0, #0x41b
    22f0:	cinc	w23, w23, ne  // ne = any
    22f4:	ldr	x20, [x20, #8]
    22f8:	b	2298 <ctf_add_type_internal+0x670>
    22fc:	str	x0, [x20, #24]
    2300:	b	22f4 <ctf_add_type_internal+0x6cc>
    2304:	cmn	x27, #0x1
    2308:	b.eq	2364 <ctf_add_type_internal+0x73c>  // b.none
    230c:	cmp	w25, #0x9
    2310:	b.eq	2364 <ctf_add_type_internal+0x73c>  // b.none
    2314:	ldr	x0, [sp, #136]
    2318:	adrp	x20, 0 <clp2>
    231c:	add	x20, x20, #0x0
    2320:	add	x3, sp, #0xe8
    2324:	mov	x2, x20
    2328:	mov	x1, x21
    232c:	bl	0 <ctf_enum_iter>
    2330:	cbz	w0, 2348 <ctf_add_type_internal+0x720>
    2334:	adrp	x0, 0 <clp2>
    2338:	mov	x2, x27
    233c:	mov	x1, x23
    2340:	add	x0, x0, #0x0
    2344:	b	21d4 <ctf_add_type_internal+0x5ac>
    2348:	add	x3, sp, #0xd0
    234c:	mov	x2, x20
    2350:	mov	x1, x27
    2354:	mov	x0, x19
    2358:	bl	0 <ctf_enum_iter>
    235c:	cbz	w0, 1dd8 <ctf_add_type_internal+0x1b0>
    2360:	b	2334 <ctf_add_type_internal+0x70c>
    2364:	mov	x2, x23
    2368:	mov	w1, w22
    236c:	mov	x0, x19
    2370:	bl	197c <ctf_add_enum>
    2374:	str	x0, [sp, #240]
    2378:	mov	x27, x0
    237c:	cmn	x0, #0x1
    2380:	b.eq	1fbc <ctf_add_type_internal+0x394>  // b.none
    2384:	ldr	x0, [sp, #136]
    2388:	adrp	x2, 0 <clp2>
    238c:	add	x3, sp, #0xe8
    2390:	add	x2, x2, #0x0
    2394:	mov	x1, x21
    2398:	bl	0 <ctf_enum_iter>
    239c:	cbz	w0, 1dd8 <ctf_add_type_internal+0x1b0>
    23a0:	b	1fbc <ctf_add_type_internal+0x394>
    23a4:	cmn	x27, #0x1
    23a8:	b.ne	1dd8 <ctf_add_type_internal+0x1b0>  // b.any
    23ac:	mov	w3, w28
    23b0:	mov	x2, x23
    23b4:	mov	w1, w22
    23b8:	mov	x0, x19
    23bc:	bl	1b00 <ctf_add_forward>
    23c0:	b	1f68 <ctf_add_type_internal+0x340>
    23c4:	ldr	x0, [sp, #136]
    23c8:	mov	x1, x21
    23cc:	bl	0 <ctf_type_reference>
    23d0:	mov	x2, x0
    23d4:	ldr	x1, [sp, #136]
    23d8:	mov	x3, x24
    23dc:	mov	x0, x19
    23e0:	bl	1c28 <ctf_add_type_internal>
    23e4:	mov	x3, x0
    23e8:	cmn	x0, #0x1
    23ec:	b.eq	1fbc <ctf_add_type_internal+0x394>  // b.none
    23f0:	cmn	x27, #0x1
    23f4:	b.ne	1dd8 <ctf_add_type_internal+0x1b0>  // b.any
    23f8:	mov	x2, x23
    23fc:	mov	w1, w22
    2400:	mov	x0, x19
    2404:	bl	1b8c <ctf_add_typedef>
    2408:	b	1f68 <ctf_add_type_internal+0x340>
    240c:	mov	w1, #0x3ef                 	// #1007
    2410:	b	1cc0 <ctf_add_type_internal+0x98>

0000000000002414 <ctf_add_volatile>:
    2414:	mov	w3, #0xb                   	// #11
    2418:	b	f4c <ctf_add_reftype>

000000000000241c <ctf_add_const>:
    241c:	mov	w3, #0xc                   	// #12
    2420:	b	f4c <ctf_add_reftype>

0000000000002424 <ctf_add_restrict>:
    2424:	mov	w3, #0xd                   	// #13
    2428:	b	f4c <ctf_add_reftype>

000000000000242c <ctf_add_enumerator>:
    242c:	stp	x29, x30, [sp, #-80]!
    2430:	mov	x29, sp
    2434:	stp	x19, x20, [sp, #16]
    2438:	mov	x19, x0
    243c:	stp	x21, x22, [sp, #32]
    2440:	stp	x23, x24, [sp, #48]
    2444:	mov	x24, x2
    2448:	str	x25, [sp, #64]
    244c:	mov	w25, w3
    2450:	bl	1180 <ctf_dtd_lookup>
    2454:	cbnz	x24, 247c <ctf_add_enumerator+0x50>
    2458:	mov	w1, #0x16                  	// #22
    245c:	mov	x0, x19
    2460:	bl	0 <ctf_set_errno>
    2464:	ldp	x19, x20, [sp, #16]
    2468:	ldp	x21, x22, [sp, #32]
    246c:	ldp	x23, x24, [sp, #48]
    2470:	ldr	x25, [sp, #64]
    2474:	ldp	x29, x30, [sp], #80
    2478:	ret
    247c:	mov	x21, x0
    2480:	ldr	w0, [x19, #552]
    2484:	tbnz	w0, #1, 2490 <ctf_add_enumerator+0x64>
    2488:	mov	w1, #0x40d                 	// #1037
    248c:	b	245c <ctf_add_enumerator+0x30>
    2490:	cbnz	x21, 249c <ctf_add_enumerator+0x70>
    2494:	mov	w1, #0x3fa                 	// #1018
    2498:	b	245c <ctf_add_enumerator+0x30>
    249c:	ldr	x0, [x19]
    24a0:	ldr	x1, [x0]
    24a4:	ldr	w0, [x21, #28]
    24a8:	blr	x1
    24ac:	mov	w22, w0
    24b0:	ldr	x0, [x19]
    24b4:	ldr	x1, [x0, #8]
    24b8:	ldr	w0, [x21, #28]
    24bc:	blr	x1
    24c0:	mov	w23, w0
    24c4:	ldr	x0, [x19]
    24c8:	ldr	x1, [x0, #16]
    24cc:	ldr	w0, [x21, #28]
    24d0:	blr	x1
    24d4:	mov	w20, w0
    24d8:	cmp	w22, #0x8
    24dc:	b.eq	24e8 <ctf_add_enumerator+0xbc>  // b.none
    24e0:	mov	w1, #0x3fc                 	// #1020
    24e4:	b	245c <ctf_add_enumerator+0x30>
    24e8:	mov	w0, #0xffffff              	// #16777215
    24ec:	cmp	w20, w0
    24f0:	b.ne	24fc <ctf_add_enumerator+0xd0>  // b.any
    24f4:	mov	w1, #0x40e                 	// #1038
    24f8:	b	245c <ctf_add_enumerator+0x30>
    24fc:	ldr	x22, [x21, #56]
    2500:	cbnz	x22, 251c <ctf_add_enumerator+0xf0>
    2504:	mov	x0, #0x30                  	// #48
    2508:	bl	0 <malloc>
    250c:	mov	x22, x0
    2510:	cbnz	x0, 253c <ctf_add_enumerator+0x110>
    2514:	mov	w1, #0xb                   	// #11
    2518:	b	245c <ctf_add_enumerator+0x30>
    251c:	ldr	x0, [x22, #16]
    2520:	mov	x1, x24
    2524:	bl	0 <strcmp>
    2528:	cbnz	w0, 2534 <ctf_add_enumerator+0x108>
    252c:	mov	w1, #0x410                 	// #1040
    2530:	b	245c <ctf_add_enumerator+0x30>
    2534:	ldr	x22, [x22, #8]
    2538:	b	2500 <ctf_add_enumerator+0xd4>
    253c:	mov	x0, x24
    2540:	bl	0 <strdup>
    2544:	cbnz	x0, 2554 <ctf_add_enumerator+0x128>
    2548:	mov	x0, x22
    254c:	bl	0 <free>
    2550:	b	2514 <ctf_add_enumerator+0xe8>
    2554:	cmp	w23, #0x0
    2558:	add	w20, w20, #0x1
    255c:	str	x0, [x22, #16]
    2560:	mov	x0, #0xffffffffffffffff    	// #-1
    2564:	and	w20, w20, #0xffffff
    2568:	str	x0, [x22, #24]
    256c:	mov	w0, #0x2000000             	// #33554432
    2570:	csel	w23, w23, w0, eq  // eq = none
    2574:	orr	w20, w20, w23
    2578:	str	xzr, [x22, #32]
    257c:	str	w25, [x22, #40]
    2580:	orr	w20, w20, #0x20000000
    2584:	str	w20, [x21, #28]
    2588:	add	x0, x21, #0x30
    258c:	mov	x1, x22
    2590:	bl	0 <ctf_list_append>
    2594:	ldr	w0, [x19, #552]
    2598:	orr	w0, w0, #0x4
    259c:	str	w0, [x19, #552]
    25a0:	mov	w0, #0x0                   	// #0
    25a4:	b	2464 <ctf_add_enumerator+0x38>

00000000000025a8 <enumadd>:
    25a8:	mov	x4, x2
    25ac:	stp	x29, x30, [sp, #-16]!
    25b0:	mov	w3, w1
    25b4:	mov	x29, sp
    25b8:	mov	x2, x0
    25bc:	ldp	x0, x1, [x4]
    25c0:	bl	242c <ctf_add_enumerator>
    25c4:	lsr	w0, w0, #31
    25c8:	ldp	x29, x30, [sp], #16
    25cc:	ret

00000000000025d0 <ctf_add_member_offset>:
    25d0:	stp	x29, x30, [sp, #-128]!
    25d4:	mov	x29, sp
    25d8:	stp	x19, x20, [sp, #16]
    25dc:	mov	x19, x0
    25e0:	stp	x21, x22, [sp, #32]
    25e4:	mov	x22, x3
    25e8:	stp	x23, x24, [sp, #48]
    25ec:	stp	x25, x26, [sp, #64]
    25f0:	mov	x26, x2
    25f4:	stp	x27, x28, [sp, #80]
    25f8:	mov	x28, x4
    25fc:	bl	1180 <ctf_dtd_lookup>
    2600:	mov	x20, x0
    2604:	ldr	w0, [x19, #552]
    2608:	tbnz	w0, #1, 261c <ctf_add_member_offset+0x4c>
    260c:	mov	w1, #0x40d                 	// #1037
    2610:	mov	x0, x19
    2614:	bl	0 <ctf_set_errno>
    2618:	b	26b4 <ctf_add_member_offset+0xe4>
    261c:	cbnz	x20, 2628 <ctf_add_member_offset+0x58>
    2620:	mov	w1, #0x3fa                 	// #1018
    2624:	b	2610 <ctf_add_member_offset+0x40>
    2628:	ldr	x0, [x19]
    262c:	ldr	x1, [x0]
    2630:	ldr	w0, [x20, #28]
    2634:	blr	x1
    2638:	str	w0, [sp, #108]
    263c:	ldr	x0, [x19]
    2640:	ldr	x1, [x0, #8]
    2644:	ldr	w0, [x20, #28]
    2648:	blr	x1
    264c:	mov	w25, w0
    2650:	ldr	x0, [x19]
    2654:	ldr	x1, [x0, #16]
    2658:	ldr	w0, [x20, #28]
    265c:	blr	x1
    2660:	mov	w24, w0
    2664:	ldr	w0, [sp, #108]
    2668:	sub	w0, w0, #0x6
    266c:	cmp	w0, #0x1
    2670:	b.ls	267c <ctf_add_member_offset+0xac>  // b.plast
    2674:	mov	w1, #0x3fb                 	// #1019
    2678:	b	2610 <ctf_add_member_offset+0x40>
    267c:	mov	w0, #0xffffff              	// #16777215
    2680:	cmp	w24, w0
    2684:	b.ne	2690 <ctf_add_member_offset+0xc0>  // b.any
    2688:	mov	w1, #0x40e                 	// #1038
    268c:	b	2610 <ctf_add_member_offset+0x40>
    2690:	cbz	x26, 269c <ctf_add_member_offset+0xcc>
    2694:	ldr	x21, [x20, #56]
    2698:	cbnz	x21, 26d0 <ctf_add_member_offset+0x100>
    269c:	mov	x1, x22
    26a0:	mov	x0, x19
    26a4:	bl	0 <ctf_type_size>
    26a8:	mov	x21, x0
    26ac:	tbz	x0, #63, 26f4 <ctf_add_member_offset+0x124>
    26b0:	mov	w0, #0xffffffff            	// #-1
    26b4:	ldp	x19, x20, [sp, #16]
    26b8:	ldp	x21, x22, [sp, #32]
    26bc:	ldp	x23, x24, [sp, #48]
    26c0:	ldp	x25, x26, [sp, #64]
    26c4:	ldp	x27, x28, [sp, #80]
    26c8:	ldp	x29, x30, [sp], #128
    26cc:	ret
    26d0:	ldr	x0, [x21, #16]
    26d4:	cbz	x0, 26ec <ctf_add_member_offset+0x11c>
    26d8:	mov	x1, x26
    26dc:	bl	0 <strcmp>
    26e0:	cbnz	w0, 26ec <ctf_add_member_offset+0x11c>
    26e4:	mov	w1, #0x410                 	// #1040
    26e8:	b	2610 <ctf_add_member_offset+0x40>
    26ec:	ldr	x21, [x21, #8]
    26f0:	b	2698 <ctf_add_member_offset+0xc8>
    26f4:	mov	x1, x22
    26f8:	mov	x0, x19
    26fc:	bl	0 <ctf_type_align>
    2700:	mov	x27, x0
    2704:	tbnz	x0, #63, 26b0 <ctf_add_member_offset+0xe0>
    2708:	mov	x0, #0x30                  	// #48
    270c:	bl	0 <malloc>
    2710:	mov	x23, x0
    2714:	cbnz	x0, 2720 <ctf_add_member_offset+0x150>
    2718:	mov	w1, #0xb                   	// #11
    271c:	b	2610 <ctf_add_member_offset+0x40>
    2720:	cbz	x26, 2740 <ctf_add_member_offset+0x170>
    2724:	mov	x0, x26
    2728:	bl	0 <strdup>
    272c:	mov	x26, x0
    2730:	cbnz	x0, 2740 <ctf_add_member_offset+0x170>
    2734:	mov	x0, x23
    2738:	bl	0 <free>
    273c:	b	2718 <ctf_add_member_offset+0x148>
    2740:	mov	w0, #0xffffffff            	// #-1
    2744:	stp	x26, x22, [x23, #16]
    2748:	cmp	w24, #0x0
    274c:	str	w0, [x23, #40]
    2750:	ldr	w0, [sp, #108]
    2754:	ccmp	w0, #0x6, #0x0, ne  // ne = any
    2758:	b.ne	2878 <ctf_add_member_offset+0x2a8>  // b.any
    275c:	cmn	x28, #0x1
    2760:	b.ne	2840 <ctf_add_member_offset+0x270>  // b.any
    2764:	ldr	x22, [x20, #48]
    2768:	mov	x0, x19
    276c:	ldr	x1, [x22, #24]
    2770:	bl	0 <ctf_type_resolve>
    2774:	mov	x26, x0
    2778:	mov	x1, x0
    277c:	add	x2, sp, #0x70
    2780:	mov	x0, x19
    2784:	ldr	x22, [x22, #32]
    2788:	bl	0 <ctf_type_encoding>
    278c:	cbnz	w0, 2824 <ctf_add_member_offset+0x254>
    2790:	ldr	w0, [sp, #120]
    2794:	add	x22, x22, x0
    2798:	cmp	x27, #0x0
    279c:	add	x22, x22, #0x7
    27a0:	csinc	x27, x27, xzr, gt
    27a4:	sub	x0, x27, #0x1
    27a8:	add	x22, x0, x22, lsr #3
    27ac:	udiv	x22, x22, x27
    27b0:	mul	x22, x22, x27
    27b4:	add	x21, x21, x22
    27b8:	lsl	x0, x22, #3
    27bc:	str	x0, [x23, #32]
    27c0:	mov	x0, #0xfffffffe            	// #4294967294
    27c4:	cmp	x21, x0
    27c8:	b.ls	289c <ctf_add_member_offset+0x2cc>  // b.plast
    27cc:	mov	w0, #0xffffffff            	// #-1
    27d0:	str	w0, [x20, #32]
    27d4:	lsr	x0, x21, #32
    27d8:	str	w0, [x20, #36]
    27dc:	str	w21, [x20, #40]
    27e0:	cmp	w25, #0x0
    27e4:	mov	w0, #0x2000000             	// #33554432
    27e8:	csel	w25, w25, w0, eq  // eq = none
    27ec:	ldr	w0, [sp, #108]
    27f0:	add	w24, w24, #0x1
    27f4:	mov	x1, x23
    27f8:	and	w24, w24, #0xffffff
    27fc:	orr	w0, w24, w0, lsl #26
    2800:	orr	w25, w0, w25
    2804:	str	w25, [x20, #28]
    2808:	add	x0, x20, #0x30
    280c:	bl	0 <ctf_list_append>
    2810:	ldr	w0, [x19, #552]
    2814:	orr	w0, w0, #0x4
    2818:	str	w0, [x19, #552]
    281c:	mov	w0, #0x0                   	// #0
    2820:	b	26b4 <ctf_add_member_offset+0xe4>
    2824:	mov	x1, x26
    2828:	mov	x0, x19
    282c:	bl	0 <ctf_type_size>
    2830:	cmp	x0, #0x0
    2834:	b.le	2798 <ctf_add_member_offset+0x1c8>
    2838:	add	x22, x22, x0, lsl #3
    283c:	b	2798 <ctf_add_member_offset+0x1c8>
    2840:	ldr	x0, [x19]
    2844:	mov	w22, #0x8                   	// #8
    2848:	add	x1, x20, #0x18
    284c:	mov	x3, #0x0                   	// #0
    2850:	mov	x2, #0x0                   	// #0
    2854:	ldr	x4, [x0, #24]
    2858:	str	x28, [x23, #32]
    285c:	mov	x0, x19
    2860:	blr	x4
    2864:	sdiv	w28, w28, w22
    2868:	add	x21, x21, w28, sxtw
    286c:	cmp	x21, x0
    2870:	csel	x21, x21, x0, ge  // ge = tcont
    2874:	b	27c0 <ctf_add_member_offset+0x1f0>
    2878:	ldr	x0, [x19]
    287c:	add	x1, x20, #0x18
    2880:	mov	x3, #0x0                   	// #0
    2884:	mov	x2, #0x0                   	// #0
    2888:	ldr	x4, [x0, #24]
    288c:	str	xzr, [x23, #32]
    2890:	mov	x0, x19
    2894:	blr	x4
    2898:	b	286c <ctf_add_member_offset+0x29c>
    289c:	str	w21, [x20, #32]
    28a0:	b	27e0 <ctf_add_member_offset+0x210>

00000000000028a4 <ctf_add_member_encoded>:
    28a4:	stp	x29, x30, [sp, #-80]!
    28a8:	mov	x29, sp
    28ac:	stp	x19, x20, [sp, #16]
    28b0:	mov	x19, x0
    28b4:	mov	x20, x3
    28b8:	stp	x21, x22, [sp, #32]
    28bc:	mov	x22, x2
    28c0:	mov	x21, x1
    28c4:	mov	x1, x3
    28c8:	str	x23, [sp, #48]
    28cc:	mov	x23, x4
    28d0:	str	x5, [sp, #64]
    28d4:	str	w6, [sp, #72]
    28d8:	bl	1180 <ctf_dtd_lookup>
    28dc:	ldr	x1, [x19]
    28e0:	ldr	w0, [x0, #28]
    28e4:	ldr	x1, [x1]
    28e8:	blr	x1
    28ec:	sub	w1, w0, #0x1
    28f0:	cmp	w1, #0x1
    28f4:	ccmp	w0, #0x8, #0x4, hi  // hi = pmore
    28f8:	b.eq	291c <ctf_add_member_encoded+0x78>  // b.none
    28fc:	mov	x0, x19
    2900:	mov	w1, #0x3fe                 	// #1022
    2904:	bl	0 <ctf_set_errno>
    2908:	ldp	x19, x20, [sp, #16]
    290c:	ldp	x21, x22, [sp, #32]
    2910:	ldr	x23, [sp, #48]
    2914:	ldp	x29, x30, [sp], #80
    2918:	ret
    291c:	add	x3, sp, #0x40
    2920:	sxtw	x2, w20
    2924:	mov	x0, x19
    2928:	mov	w1, #0x0                   	// #0
    292c:	bl	13d0 <ctf_add_slice>
    2930:	mov	x3, x0
    2934:	cmn	x0, #0x1
    2938:	b.eq	2908 <ctf_add_member_encoded+0x64>  // b.none
    293c:	mov	x4, x23
    2940:	mov	x2, x22
    2944:	mov	x1, x21
    2948:	mov	x0, x19
    294c:	bl	25d0 <ctf_add_member_offset>
    2950:	b	2908 <ctf_add_member_encoded+0x64>

0000000000002954 <ctf_add_member>:
    2954:	mov	x4, #0xffffffffffffffff    	// #-1
    2958:	b	25d0 <ctf_add_member_offset>

000000000000295c <ctf_add_variable>:
    295c:	stp	x29, x30, [sp, #-64]!
    2960:	mov	x29, sp
    2964:	stp	x21, x22, [sp, #32]
    2968:	mov	x21, x2
    296c:	ldr	w2, [x0, #552]
    2970:	stp	x19, x20, [sp, #16]
    2974:	str	x0, [sp, #56]
    2978:	tbnz	w2, #1, 2994 <ctf_add_variable+0x38>
    297c:	mov	w1, #0x40d                 	// #1037
    2980:	bl	0 <ctf_set_errno>
    2984:	ldp	x19, x20, [sp, #16]
    2988:	ldp	x21, x22, [sp, #32]
    298c:	ldp	x29, x30, [sp], #64
    2990:	ret
    2994:	mov	x19, x0
    2998:	mov	x22, x1
    299c:	bl	1254 <ctf_dvd_lookup>
    29a0:	cbz	x0, 29b0 <ctf_add_variable+0x54>
    29a4:	mov	w1, #0x410                 	// #1040
    29a8:	mov	x0, x19
    29ac:	b	2980 <ctf_add_variable+0x24>
    29b0:	mov	x1, x21
    29b4:	add	x0, sp, #0x38
    29b8:	bl	0 <ctf_lookup_by_id>
    29bc:	cbnz	x0, 29c8 <ctf_add_variable+0x6c>
    29c0:	mov	w0, #0xffffffff            	// #-1
    29c4:	b	2984 <ctf_add_variable+0x28>
    29c8:	mov	x1, x21
    29cc:	mov	x0, x19
    29d0:	bl	0 <ctf_type_resolve>
    29d4:	cmn	x0, #0x1
    29d8:	b.eq	29f4 <ctf_add_variable+0x98>  // b.none
    29dc:	mov	x0, #0x28                  	// #40
    29e0:	bl	0 <malloc>
    29e4:	mov	x20, x0
    29e8:	cbnz	x0, 2a08 <ctf_add_variable+0xac>
    29ec:	mov	w1, #0xb                   	// #11
    29f0:	b	29a8 <ctf_add_variable+0x4c>
    29f4:	mov	x0, x19
    29f8:	bl	0 <ctf_errno>
    29fc:	cmp	w0, #0x41b
    2a00:	b.ne	29dc <ctf_add_variable+0x80>  // b.any
    2a04:	b	29c0 <ctf_add_variable+0x64>
    2a08:	cbz	x22, 2a28 <ctf_add_variable+0xcc>
    2a0c:	mov	x0, x22
    2a10:	bl	0 <strdup>
    2a14:	str	x0, [x20, #16]
    2a18:	cbnz	x0, 2a28 <ctf_add_variable+0xcc>
    2a1c:	mov	x0, x20
    2a20:	bl	0 <free>
    2a24:	b	29ec <ctf_add_variable+0x90>
    2a28:	ldr	x0, [x19, #624]
    2a2c:	mov	x1, x20
    2a30:	stp	x21, x0, [x20, #24]
    2a34:	mov	x0, x19
    2a38:	bl	11c4 <ctf_dvd_insert>
    2a3c:	tbz	w0, #31, 2a54 <ctf_add_variable+0xf8>
    2a40:	ldr	x0, [x20, #16]
    2a44:	bl	0 <free>
    2a48:	mov	x0, x20
    2a4c:	bl	0 <free>
    2a50:	b	29c0 <ctf_add_variable+0x64>
    2a54:	ldr	w0, [x19, #552]
    2a58:	orr	w0, w0, #0x4
    2a5c:	str	w0, [x19, #552]
    2a60:	mov	w0, #0x0                   	// #0
    2a64:	b	2984 <ctf_add_variable+0x28>

0000000000002a68 <ctf_add_type>:
    2a68:	stp	x29, x30, [sp, #-48]!
    2a6c:	mov	x29, sp
    2a70:	stp	x19, x20, [sp, #16]
    2a74:	mov	x20, x0
    2a78:	mov	x19, x1
    2a7c:	ldr	x0, [x1, #696]
    2a80:	str	x21, [sp, #32]
    2a84:	mov	x21, x2
    2a88:	cbnz	x0, 2ac8 <ctf_add_type+0x60>
    2a8c:	mov	x3, #0x0                   	// #0
    2a90:	mov	x2, #0x0                   	// #0
    2a94:	adrp	x1, 0 <ctf_hash_eq_integer>
    2a98:	adrp	x0, 0 <ctf_hash_integer>
    2a9c:	add	x1, x1, #0x0
    2aa0:	add	x0, x0, #0x0
    2aa4:	bl	0 <ctf_dynhash_create>
    2aa8:	str	x0, [x19, #696]
    2aac:	cbnz	x0, 2ac8 <ctf_add_type+0x60>
    2ab0:	mov	x0, x20
    2ab4:	mov	w1, #0xc                   	// #12
    2ab8:	ldp	x19, x20, [sp, #16]
    2abc:	ldr	x21, [sp, #32]
    2ac0:	ldp	x29, x30, [sp], #48
    2ac4:	b	0 <ctf_set_errno>
    2ac8:	mov	x3, x19
    2acc:	mov	x2, x21
    2ad0:	mov	x1, x19
    2ad4:	mov	x0, x20
    2ad8:	bl	1c28 <ctf_add_type_internal>
    2adc:	mov	x20, x0
    2ae0:	ldr	x0, [x19, #696]
    2ae4:	bl	0 <ctf_dynhash_empty>
    2ae8:	mov	x0, x20
    2aec:	ldp	x19, x20, [sp, #16]
    2af0:	ldr	x21, [sp, #32]
    2af4:	ldp	x29, x30, [sp], #48
    2af8:	ret

0000000000002afc <ctf_gzwrite>:
    2afc:	stp	x29, x30, [sp, #-48]!
    2b00:	mov	x29, sp
    2b04:	stp	x21, x22, [sp, #32]
    2b08:	mov	x21, x1
    2b0c:	ldr	x22, [x0, #8]
    2b10:	stp	x19, x20, [sp, #16]
    2b14:	mov	x19, x0
    2b18:	mov	x20, #0x34                  	// #52
    2b1c:	mov	w2, w20
    2b20:	mov	x1, x22
    2b24:	mov	x0, x21
    2b28:	bl	0 <gzwrite>
    2b2c:	sxtw	x0, w0
    2b30:	cmp	x0, #0x0
    2b34:	b.gt	2b58 <ctf_gzwrite+0x5c>
    2b38:	bl	0 <__errno_location>
    2b3c:	ldr	w1, [x0]
    2b40:	mov	x0, x19
    2b44:	bl	0 <ctf_set_errno>
    2b48:	ldp	x19, x20, [sp, #16]
    2b4c:	ldp	x21, x22, [sp, #32]
    2b50:	ldp	x29, x30, [sp], #48
    2b54:	ret
    2b58:	add	x22, x22, x0
    2b5c:	subs	x20, x20, x0
    2b60:	b.ne	2b1c <ctf_gzwrite+0x20>  // b.any
    2b64:	ldp	x22, x20, [x19, #408]
    2b68:	cbnz	x20, 2b74 <ctf_gzwrite+0x78>
    2b6c:	mov	w0, #0x0                   	// #0
    2b70:	b	2b48 <ctf_gzwrite+0x4c>
    2b74:	mov	w2, w20
    2b78:	mov	x1, x22
    2b7c:	mov	x0, x21
    2b80:	bl	0 <gzwrite>
    2b84:	sxtw	x0, w0
    2b88:	cmp	x0, #0x0
    2b8c:	b.le	2b38 <ctf_gzwrite+0x3c>
    2b90:	sub	x20, x20, x0
    2b94:	add	x22, x22, x0
    2b98:	b	2b68 <ctf_gzwrite+0x6c>

0000000000002b9c <ctf_compress_write>:
    2b9c:	stp	x29, x30, [sp, #-144]!
    2ba0:	mov	x29, sp
    2ba4:	stp	x19, x20, [sp, #16]
    2ba8:	mov	x20, x0
    2bac:	stp	x21, x22, [sp, #32]
    2bb0:	stp	x23, x24, [sp, #48]
    2bb4:	mov	w24, w1
    2bb8:	str	x25, [sp, #64]
    2bbc:	bl	c50 <ctf_serialize>
    2bc0:	tbnz	w0, #31, 2cd8 <ctf_compress_write+0x13c>
    2bc4:	ldr	x1, [x20, #8]
    2bc8:	mov	x2, #0x34                  	// #52
    2bcc:	add	x0, sp, #0x58
    2bd0:	bl	0 <memcpy>
    2bd4:	ldrb	w0, [sp, #91]
    2bd8:	orr	w0, w0, #0x1
    2bdc:	strb	w0, [sp, #91]
    2be0:	ldr	x0, [x20, #416]
    2be4:	bl	0 <compressBound>
    2be8:	str	x0, [sp, #80]
    2bec:	bl	0 <malloc>
    2bf0:	mov	x22, x0
    2bf4:	cbnz	x0, 2c24 <ctf_compress_write+0x88>
    2bf8:	mov	x0, x20
    2bfc:	mov	w1, #0x3f6                 	// #1014
    2c00:	bl	0 <ctf_set_errno>
    2c04:	mov	w19, w0
    2c08:	mov	w0, w19
    2c0c:	ldp	x19, x20, [sp, #16]
    2c10:	ldp	x21, x22, [sp, #32]
    2c14:	ldp	x23, x24, [sp, #48]
    2c18:	ldr	x25, [sp, #64]
    2c1c:	ldp	x29, x30, [sp], #144
    2c20:	ret
    2c24:	ldp	x2, x3, [x20, #408]
    2c28:	add	x1, sp, #0x50
    2c2c:	bl	0 <compress>
    2c30:	mov	w19, w0
    2c34:	cbz	w0, 2c68 <ctf_compress_write+0xcc>
    2c38:	bl	0 <zError>
    2c3c:	mov	x1, x0
    2c40:	adrp	x0, 0 <clp2>
    2c44:	add	x0, x0, #0x0
    2c48:	bl	0 <ctf_dprintf>
    2c4c:	mov	w1, #0x413                 	// #1043
    2c50:	mov	x0, x20
    2c54:	bl	0 <ctf_set_errno>
    2c58:	mov	w19, w0
    2c5c:	mov	x0, x22
    2c60:	bl	0 <free>
    2c64:	b	2c08 <ctf_compress_write+0x6c>
    2c68:	mov	x23, #0x34                  	// #52
    2c6c:	add	x21, sp, #0x58
    2c70:	mov	x25, x23
    2c74:	mov	x2, x23
    2c78:	mov	x1, x21
    2c7c:	mov	w0, w24
    2c80:	bl	0 <write>
    2c84:	tbz	x0, #63, 2c94 <ctf_compress_write+0xf8>
    2c88:	bl	0 <__errno_location>
    2c8c:	ldr	w1, [x0]
    2c90:	b	2c50 <ctf_compress_write+0xb4>
    2c94:	sub	x23, x23, x0
    2c98:	madd	x21, x0, x25, x21
    2c9c:	cmp	x23, #0x0
    2ca0:	b.gt	2c74 <ctf_compress_write+0xd8>
    2ca4:	mov	x21, x22
    2ca8:	ldr	x2, [sp, #80]
    2cac:	cmp	x2, #0x0
    2cb0:	b.le	2c5c <ctf_compress_write+0xc0>
    2cb4:	mov	x1, x21
    2cb8:	mov	w0, w24
    2cbc:	bl	0 <write>
    2cc0:	tbnz	x0, #63, 2c88 <ctf_compress_write+0xec>
    2cc4:	ldr	x1, [sp, #80]
    2cc8:	add	x21, x21, x0
    2ccc:	sub	x1, x1, x0
    2cd0:	str	x1, [sp, #80]
    2cd4:	b	2ca8 <ctf_compress_write+0x10c>
    2cd8:	mov	w19, #0xffffffff            	// #-1
    2cdc:	b	2c08 <ctf_compress_write+0x6c>

0000000000002ce0 <ctf_write_mem>:
    2ce0:	stp	x29, x30, [sp, #-80]!
    2ce4:	mov	x29, sp
    2ce8:	stp	x19, x20, [sp, #16]
    2cec:	mov	x20, x0
    2cf0:	stp	x21, x22, [sp, #32]
    2cf4:	mov	x21, x1
    2cf8:	str	x23, [sp, #48]
    2cfc:	mov	x23, x2
    2d00:	bl	c50 <ctf_serialize>
    2d04:	tbnz	w0, #31, 2de0 <ctf_write_mem+0x100>
    2d08:	ldr	x0, [x20, #416]
    2d0c:	bl	0 <compressBound>
    2d10:	ldr	x1, [x20, #416]
    2d14:	cmp	x1, x23
    2d18:	csel	x0, x0, x1, cs  // cs = hs, nlast
    2d1c:	str	x0, [sp, #72]
    2d20:	add	x0, x0, #0x34
    2d24:	bl	0 <malloc>
    2d28:	mov	x19, x0
    2d2c:	cbnz	x0, 2d54 <ctf_write_mem+0x74>
    2d30:	mov	x0, x20
    2d34:	mov	w1, #0xc                   	// #12
    2d38:	bl	0 <ctf_set_errno>
    2d3c:	mov	x0, x19
    2d40:	ldp	x19, x20, [sp, #16]
    2d44:	ldp	x21, x22, [sp, #32]
    2d48:	ldr	x23, [sp, #48]
    2d4c:	ldp	x29, x30, [sp], #80
    2d50:	ret
    2d54:	ldr	x1, [x20, #8]
    2d58:	mov	x22, #0x34                  	// #52
    2d5c:	mov	x2, x22
    2d60:	bl	0 <memcpy>
    2d64:	ldr	x1, [x20, #408]
    2d68:	str	x22, [x21]
    2d6c:	add	x0, x19, x22
    2d70:	ldrb	w2, [x19, #3]
    2d74:	ldr	x22, [x20, #416]
    2d78:	cmp	x22, x23
    2d7c:	b.cs	2d9c <ctf_write_mem+0xbc>  // b.hs, b.nlast
    2d80:	and	w2, w2, #0xfffffffe
    2d84:	strb	w2, [x19, #3]
    2d88:	mov	x2, x22
    2d8c:	add	x22, x22, #0x34
    2d90:	bl	0 <memcpy>
    2d94:	str	x22, [x21]
    2d98:	b	2d3c <ctf_write_mem+0x5c>
    2d9c:	orr	w2, w2, #0x1
    2da0:	strb	w2, [x19, #3]
    2da4:	mov	x3, x22
    2da8:	mov	x2, x1
    2dac:	add	x1, sp, #0x48
    2db0:	bl	0 <compress>
    2db4:	cbz	w0, 2de8 <ctf_write_mem+0x108>
    2db8:	bl	0 <zError>
    2dbc:	mov	x1, x0
    2dc0:	adrp	x0, 0 <clp2>
    2dc4:	add	x0, x0, #0x0
    2dc8:	bl	0 <ctf_dprintf>
    2dcc:	mov	w1, #0x413                 	// #1043
    2dd0:	mov	x0, x20
    2dd4:	bl	0 <ctf_set_errno>
    2dd8:	mov	x0, x19
    2ddc:	bl	0 <free>
    2de0:	mov	x19, #0x0                   	// #0
    2de4:	b	2d3c <ctf_write_mem+0x5c>
    2de8:	ldr	x0, [x21]
    2dec:	ldr	x1, [sp, #72]
    2df0:	add	x0, x0, x1
    2df4:	str	x0, [x21]
    2df8:	b	2d3c <ctf_write_mem+0x5c>

0000000000002dfc <ctf_write>:
    2dfc:	stp	x29, x30, [sp, #-48]!
    2e00:	mov	x29, sp
    2e04:	stp	x19, x20, [sp, #16]
    2e08:	mov	x19, x0
    2e0c:	stp	x21, x22, [sp, #32]
    2e10:	mov	w21, w1
    2e14:	bl	c50 <ctf_serialize>
    2e18:	tbnz	w0, #31, 2e9c <ctf_write+0xa0>
    2e1c:	ldr	x22, [x19, #8]
    2e20:	mov	x20, #0x34                  	// #52
    2e24:	mov	x2, x20
    2e28:	mov	x1, x22
    2e2c:	mov	w0, w21
    2e30:	bl	0 <write>
    2e34:	cmp	x0, #0x0
    2e38:	b.gt	2e5c <ctf_write+0x60>
    2e3c:	bl	0 <__errno_location>
    2e40:	ldr	w1, [x0]
    2e44:	mov	x0, x19
    2e48:	bl	0 <ctf_set_errno>
    2e4c:	ldp	x19, x20, [sp, #16]
    2e50:	ldp	x21, x22, [sp, #32]
    2e54:	ldp	x29, x30, [sp], #48
    2e58:	ret
    2e5c:	add	x22, x22, x0
    2e60:	subs	x20, x20, x0
    2e64:	b.ne	2e24 <ctf_write+0x28>  // b.any
    2e68:	ldp	x22, x20, [x19, #408]
    2e6c:	cbnz	x20, 2e78 <ctf_write+0x7c>
    2e70:	mov	w0, #0x0                   	// #0
    2e74:	b	2e4c <ctf_write+0x50>
    2e78:	mov	x2, x20
    2e7c:	mov	x1, x22
    2e80:	mov	w0, w21
    2e84:	bl	0 <write>
    2e88:	cmp	x0, #0x0
    2e8c:	b.le	2e3c <ctf_write+0x40>
    2e90:	sub	x20, x20, x0
    2e94:	add	x22, x22, x0
    2e98:	b	2e6c <ctf_write+0x70>
    2e9c:	mov	w0, #0xffffffff            	// #-1
    2ea0:	b	2e4c <ctf_write+0x50>

ctf-decl.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_decl_init>:
   0:	mov	x1, #0xffffffffffffffff    	// #-1
   4:	stp	xzr, xzr, [x0]
   8:	stp	xzr, xzr, [x0, #16]
   c:	stp	xzr, xzr, [x0, #32]
  10:	stp	xzr, xzr, [x0, #48]
  14:	stp	x1, x1, [x0, #64]
  18:	stp	xzr, xzr, [x0, #80]
  1c:	str	xzr, [x0, #96]
  20:	ret

0000000000000024 <ctf_decl_fini>:
  24:	stp	x29, x30, [sp, #-48]!
  28:	mov	x29, sp
  2c:	stp	x19, x20, [sp, #16]
  30:	add	x20, x0, #0x8
  34:	add	x19, x0, #0x48
  38:	str	x21, [sp, #32]
  3c:	ldr	x0, [x20]
  40:	cbnz	x0, 60 <ctf_decl_fini+0x3c>
  44:	add	x20, x20, #0x10
  48:	cmp	x20, x19
  4c:	b.ne	3c <ctf_decl_fini+0x18>  // b.any
  50:	ldp	x19, x20, [sp, #16]
  54:	ldr	x21, [sp, #32]
  58:	ldp	x29, x30, [sp], #48
  5c:	ret
  60:	ldr	x21, [x0, #8]
  64:	bl	0 <free>
  68:	mov	x0, x21
  6c:	b	40 <ctf_decl_fini+0x1c>

0000000000000070 <ctf_decl_push>:
  70:	stp	x29, x30, [sp, #-112]!
  74:	mov	x29, sp
  78:	stp	x19, x20, [sp, #16]
  7c:	mov	x19, x0
  80:	add	x0, sp, #0x48
  84:	stp	x21, x22, [sp, #32]
  88:	stp	x23, x24, [sp, #48]
  8c:	mov	x23, x2
  90:	str	x1, [sp, #72]
  94:	mov	x1, x2
  98:	bl	0 <ctf_lookup_by_id>
  9c:	mov	x20, x0
  a0:	ldr	x0, [sp, #72]
  a4:	cbnz	x20, b4 <ctf_decl_push+0x44>
  a8:	ldr	w0, [x0, #556]
  ac:	str	w0, [x19, #96]
  b0:	b	154 <ctf_decl_push+0xe4>
  b4:	ldr	x0, [x0]
  b8:	ldr	x1, [x0]
  bc:	ldr	w0, [x20, #4]
  c0:	blr	x1
  c4:	sub	w1, w0, #0x3
  c8:	mov	w24, w0
  cc:	cmp	w1, #0xb
  d0:	b.hi	1c8 <ctf_decl_push+0x158>  // b.pmore
  d4:	adrp	x0, 0 <ctf_decl_init>
  d8:	add	x0, x0, #0x0
  dc:	ldrb	w0, [x0, w1, uxtw]
  e0:	adr	x1, ec <ctf_decl_push+0x7c>
  e4:	add	x0, x1, w0, sxtb #2
  e8:	br	x0
  ec:	ldr	x0, [sp, #72]
  f0:	add	x2, sp, #0x58
  f4:	mov	x1, x23
  f8:	mov	w21, #0x0                   	// #0
  fc:	mov	w20, #0x2                   	// #2
 100:	bl	0 <ctf_array_info>
 104:	ldr	x1, [sp, #72]
 108:	mov	x0, x19
 10c:	ldr	x2, [sp, #88]
 110:	bl	70 <ctf_decl_push>
 114:	ldr	w22, [sp, #104]
 118:	mov	x0, #0x20                  	// #32
 11c:	bl	0 <malloc>
 120:	mov	x1, x0
 124:	cbnz	x0, 1f8 <ctf_decl_push+0x188>
 128:	mov	w0, #0xb                   	// #11
 12c:	b	ac <ctf_decl_push+0x3c>
 130:	ldr	w1, [x20]
 134:	ldr	x0, [sp, #72]
 138:	bl	0 <ctf_strptr>
 13c:	ldrb	w0, [x0]
 140:	cbnz	w0, 1c8 <ctf_decl_push+0x158>
 144:	ldr	w2, [x20, #8]
 148:	mov	x0, x19
 14c:	ldr	x1, [sp, #72]
 150:	bl	70 <ctf_decl_push>
 154:	ldp	x19, x20, [sp, #16]
 158:	ldp	x21, x22, [sp, #32]
 15c:	ldp	x23, x24, [sp, #48]
 160:	ldp	x29, x30, [sp], #112
 164:	ret
 168:	ldr	w2, [x20, #8]
 16c:	mov	x0, x19
 170:	ldr	x1, [sp, #72]
 174:	mov	w21, #0x0                   	// #0
 178:	mov	w22, #0x1                   	// #1
 17c:	mov	w20, #0x3                   	// #3
 180:	bl	70 <ctf_decl_push>
 184:	b	118 <ctf_decl_push+0xa8>
 188:	ldr	w2, [x20, #8]
 18c:	mov	w22, #0x1                   	// #1
 190:	ldr	x1, [sp, #72]
 194:	mov	x0, x19
 198:	mov	w20, w22
 19c:	mov	w21, #0x0                   	// #0
 1a0:	bl	70 <ctf_decl_push>
 1a4:	b	118 <ctf_decl_push+0xa8>
 1a8:	ldr	x20, [sp, #72]
 1ac:	mov	x1, x23
 1b0:	mov	x0, x20
 1b4:	bl	0 <ctf_type_reference>
 1b8:	mov	x1, x20
 1bc:	mov	x2, x0
 1c0:	mov	x0, x19
 1c4:	bl	70 <ctf_decl_push>
 1c8:	mov	w21, #0x0                   	// #0
 1cc:	mov	w22, #0x1                   	// #1
 1d0:	mov	w20, #0x0                   	// #0
 1d4:	b	118 <ctf_decl_push+0xa8>
 1d8:	ldr	w2, [x20, #8]
 1dc:	mov	x0, x19
 1e0:	ldr	x1, [sp, #72]
 1e4:	mov	w21, #0x1                   	// #1
 1e8:	mov	w22, w21
 1ec:	bl	70 <ctf_decl_push>
 1f0:	ldr	w20, [x19, #80]
 1f4:	b	118 <ctf_decl_push+0xa8>
 1f8:	ubfiz	x2, x20, #4, #32
 1fc:	str	x23, [x1, #16]
 200:	add	x2, x19, x2
 204:	stp	w24, w22, [x1, #24]
 208:	mov	w0, w20
 20c:	ldr	x2, [x2, #8]
 210:	cbnz	x2, 228 <ctf_decl_push+0x1b8>
 214:	ldr	w2, [x19, #84]
 218:	add	w3, w2, #0x1
 21c:	str	w3, [x19, #84]
 220:	add	x3, x0, #0x10
 224:	str	w2, [x19, x3, lsl #2]
 228:	ldr	w2, [x19, #80]
 22c:	cmp	w2, w20
 230:	b.cs	240 <ctf_decl_push+0x1d0>  // b.hs, b.nlast
 234:	cmp	w20, #0x1
 238:	b.hi	240 <ctf_decl_push+0x1d0>  // b.pmore
 23c:	str	w20, [x19, #80]
 240:	add	x0, x19, x0, lsl #4
 244:	cmp	w24, #0x4
 248:	b.eq	258 <ctf_decl_push+0x1e8>  // b.none
 24c:	cmp	w20, #0x0
 250:	csel	w21, w21, wzr, eq  // eq = none
 254:	cbz	w21, 260 <ctf_decl_push+0x1f0>
 258:	bl	0 <ctf_list_prepend>
 25c:	b	154 <ctf_decl_push+0xe4>
 260:	bl	0 <ctf_list_append>
 264:	b	154 <ctf_decl_push+0xe4>

0000000000000268 <ctf_decl_sprintf>:
 268:	stp	x29, x30, [sp, #-288]!
 26c:	mov	x29, sp
 270:	str	q0, [sp, #112]
 274:	str	q1, [sp, #128]
 278:	str	q2, [sp, #144]
 27c:	str	q3, [sp, #160]
 280:	str	q4, [sp, #176]
 284:	str	q5, [sp, #192]
 288:	str	q6, [sp, #208]
 28c:	str	q7, [sp, #224]
 290:	stp	x2, x3, [sp, #240]
 294:	stp	x4, x5, [sp, #256]
 298:	stp	x6, x7, [sp, #272]
 29c:	str	x19, [sp, #16]
 2a0:	mov	x19, x0
 2a4:	ldr	w0, [x0, #100]
 2a8:	cbnz	w0, 32c <ctf_decl_sprintf+0xc4>
 2ac:	add	x0, sp, #0x120
 2b0:	stp	x0, x0, [sp, #80]
 2b4:	add	x0, sp, #0xf0
 2b8:	str	x0, [sp, #96]
 2bc:	mov	w0, #0xffffffd0            	// #-48
 2c0:	str	w0, [sp, #104]
 2c4:	mov	w0, #0xffffff80            	// #-128
 2c8:	str	w0, [sp, #108]
 2cc:	add	x0, sp, #0x48
 2d0:	ldp	x2, x3, [sp, #80]
 2d4:	stp	x2, x3, [sp, #32]
 2d8:	ldp	x2, x3, [sp, #96]
 2dc:	stp	x2, x3, [sp, #48]
 2e0:	add	x2, sp, #0x20
 2e4:	bl	0 <vasprintf>
 2e8:	cmp	w0, #0x0
 2ec:	b.le	338 <ctf_decl_sprintf+0xd0>
 2f0:	ldr	x1, [sp, #72]
 2f4:	ldr	x0, [x19, #88]
 2f8:	bl	0 <ctf_str_append>
 2fc:	cbnz	x0, 320 <ctf_decl_sprintf+0xb8>
 300:	ldr	x0, [x19, #88]
 304:	cbnz	x0, 324 <ctf_decl_sprintf+0xbc>
 308:	ldr	x0, [x19, #88]
 30c:	bl	0 <free>
 310:	str	xzr, [x19, #88]
 314:	mov	w0, #0x1                   	// #1
 318:	str	w0, [x19, #100]
 31c:	b	324 <ctf_decl_sprintf+0xbc>
 320:	str	x0, [x19, #88]
 324:	ldr	x0, [sp, #72]
 328:	bl	0 <free>
 32c:	ldr	x19, [sp, #16]
 330:	ldp	x29, x30, [sp], #288
 334:	ret
 338:	b.eq	300 <ctf_decl_sprintf+0x98>  // b.none
 33c:	b	308 <ctf_decl_sprintf+0xa0>

0000000000000340 <ctf_decl_buf>:
 340:	ldr	x0, [x0, #88]
 344:	ret

ctf-error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_errmsg>:
   0:	sub	w1, w0, #0x3e8
   4:	cmp	w1, #0x33
   8:	b.ls	2c <ctf_errmsg+0x2c>  // b.plast
   c:	stp	x29, x30, [sp, #-16]!
  10:	mov	x29, sp
  14:	bl	0 <ctf_strerror>
  18:	cbnz	x0, 24 <ctf_errmsg+0x24>
  1c:	adrp	x0, 0 <ctf_errmsg>
  20:	add	x0, x0, #0x0
  24:	ldp	x29, x30, [sp], #16
  28:	ret
  2c:	adrp	x0, 0 <ctf_errmsg>
  30:	add	x0, x0, #0x0
  34:	ldr	x0, [x0, w1, sxtw #3]
  38:	cbnz	x0, 48 <ctf_errmsg+0x48>
  3c:	adrp	x0, 0 <ctf_errmsg>
  40:	add	x0, x0, #0x0
  44:	ret
  48:	ret

000000000000004c <ctf_errno>:
  4c:	ldr	w0, [x0, #556]
  50:	ret

ctf-hash.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_hashtab_traverse>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	ldr	x0, [x0]
   c:	ldp	x3, x2, [x1]
  10:	ldr	x1, [x0, #8]
  14:	ldr	x0, [x0]
  18:	blr	x3
  1c:	mov	w0, #0x1                   	// #1
  20:	ldp	x29, x30, [sp], #16
  24:	ret

0000000000000028 <ctf_dynhash_item_free>:
  28:	stp	x29, x30, [sp, #-32]!
  2c:	mov	x29, sp
  30:	ldr	x1, [x0, #16]
  34:	str	x19, [sp, #16]
  38:	mov	x19, x0
  3c:	cbz	x1, 4c <ctf_dynhash_item_free+0x24>
  40:	ldr	x0, [x0]
  44:	cbz	x0, 4c <ctf_dynhash_item_free+0x24>
  48:	blr	x1
  4c:	ldr	x1, [x19, #24]
  50:	cbz	x1, 60 <ctf_dynhash_item_free+0x38>
  54:	ldr	x0, [x19, #8]
  58:	cbz	x0, 60 <ctf_dynhash_item_free+0x38>
  5c:	blr	x1
  60:	mov	x0, x19
  64:	ldr	x19, [sp, #16]
  68:	ldp	x29, x30, [sp], #32
  6c:	b	0 <free>

0000000000000070 <ctf_hashtab_traverse_remove>:
  70:	stp	x29, x30, [sp, #-32]!
  74:	mov	x29, sp
  78:	stp	x19, x20, [sp, #16]
  7c:	mov	x20, x0
  80:	mov	x19, x1
  84:	ldr	x0, [x0]
  88:	ldp	x3, x2, [x1, #8]
  8c:	ldr	x1, [x0, #8]
  90:	ldr	x0, [x0]
  94:	blr	x3
  98:	cbz	w0, a8 <ctf_hashtab_traverse_remove+0x38>
  9c:	ldr	x0, [x19]
  a0:	mov	x1, x20
  a4:	bl	0 <htab_clear_slot>
  a8:	mov	w0, #0x1                   	// #1
  ac:	ldp	x19, x20, [sp, #16]
  b0:	ldp	x29, x30, [sp], #32
  b4:	ret

00000000000000b8 <ctf_hashtab_insert>:
  b8:	stp	x29, x30, [sp, #-96]!
  bc:	mov	x29, sp
  c0:	stp	x19, x20, [sp, #16]
  c4:	mov	x20, x1
  c8:	stp	x21, x22, [sp, #32]
  cc:	mov	x22, x3
  d0:	mov	x21, x4
  d4:	str	x23, [sp, #48]
  d8:	mov	x23, x2
  dc:	mov	w2, #0x1                   	// #1
  e0:	str	x1, [sp, #64]
  e4:	add	x1, sp, #0x40
  e8:	stp	xzr, xzr, [sp, #72]
  ec:	str	xzr, [sp, #88]
  f0:	bl	0 <htab_find_slot>
  f4:	cbnz	x0, 11c <ctf_hashtab_insert+0x64>
  f8:	bl	0 <__errno_location>
  fc:	mov	w1, #0xfffffff4            	// #-12
 100:	str	w1, [x0]
 104:	mov	x0, #0x0                   	// #0
 108:	ldp	x19, x20, [sp, #16]
 10c:	ldp	x21, x22, [sp, #32]
 110:	ldr	x23, [sp, #48]
 114:	ldp	x29, x30, [sp], #96
 118:	ret
 11c:	mov	x19, x0
 120:	ldr	x0, [x0]
 124:	cbnz	x0, 150 <ctf_hashtab_insert+0x98>
 128:	mov	x0, #0x20                  	// #32
 12c:	bl	0 <malloc>
 130:	str	x0, [x19]
 134:	cbz	x0, 108 <ctf_hashtab_insert+0x50>
 138:	ldr	x0, [x19]
 13c:	str	x20, [x0]
 140:	ldr	x0, [x19]
 144:	str	x23, [x0, #8]
 148:	ldr	x0, [x19]
 14c:	b	108 <ctf_hashtab_insert+0x50>
 150:	cbz	x22, 15c <ctf_hashtab_insert+0xa4>
 154:	ldr	x0, [x0]
 158:	blr	x22
 15c:	cbz	x21, 138 <ctf_hashtab_insert+0x80>
 160:	ldr	x0, [x19]
 164:	ldr	x0, [x0, #8]
 168:	blr	x21
 16c:	b	138 <ctf_hashtab_insert+0x80>

0000000000000170 <ctf_hash_integer>:
 170:	adrp	x1, 0 <htab_hash_pointer>
 174:	ldr	x0, [x0]
 178:	ldr	x1, [x1]
 17c:	mov	x16, x1
 180:	br	x16

0000000000000184 <ctf_hash_eq_integer>:
 184:	adrp	x2, 0 <htab_eq_pointer>
 188:	ldr	x0, [x0]
 18c:	ldr	x2, [x2]
 190:	ldr	x1, [x1]
 194:	mov	x16, x2
 198:	br	x16

000000000000019c <ctf_hash_string>:
 19c:	ldr	x0, [x0]
 1a0:	b	0 <htab_hash_string>

00000000000001a4 <ctf_hash_eq_string>:
 1a4:	stp	x29, x30, [sp, #-16]!
 1a8:	mov	x29, sp
 1ac:	ldr	x0, [x0]
 1b0:	ldr	x1, [x1]
 1b4:	bl	0 <strcmp>
 1b8:	cmp	w0, #0x0
 1bc:	cset	w0, eq  // eq = none
 1c0:	ldp	x29, x30, [sp], #16
 1c4:	ret

00000000000001c8 <ctf_hash_type_mapping_key>:
 1c8:	stp	x29, x30, [sp, #-48]!
 1cc:	mov	x29, sp
 1d0:	stp	x19, x20, [sp, #16]
 1d4:	ldr	x20, [x0]
 1d8:	ldr	x0, [x20]
 1dc:	str	x21, [sp, #32]
 1e0:	adrp	x21, 0 <htab_hash_pointer>
 1e4:	ldr	x1, [x21]
 1e8:	blr	x1
 1ec:	mov	w19, w0
 1f0:	ldr	x1, [x21]
 1f4:	ldr	x0, [x20, #8]
 1f8:	blr	x1
 1fc:	mov	w1, #0x3b                  	// #59
 200:	ldr	x21, [sp, #32]
 204:	madd	w0, w0, w1, w19
 208:	ldp	x19, x20, [sp, #16]
 20c:	ldp	x29, x30, [sp], #48
 210:	ret

0000000000000214 <ctf_hash_eq_type_mapping_key>:
 214:	ldr	x2, [x0]
 218:	ldr	x0, [x1]
 21c:	ldr	x3, [x2]
 220:	ldr	x1, [x0]
 224:	cmp	x3, x1
 228:	b.ne	240 <ctf_hash_eq_type_mapping_key+0x2c>  // b.any
 22c:	ldr	x0, [x0, #8]
 230:	ldr	x1, [x2, #8]
 234:	cmp	x1, x0
 238:	cset	w0, eq  // eq = none
 23c:	ret
 240:	mov	w0, #0x0                   	// #0
 244:	b	23c <ctf_hash_eq_type_mapping_key+0x28>

0000000000000248 <ctf_dynhash_create>:
 248:	stp	x29, x30, [sp, #-64]!
 24c:	mov	x29, sp
 250:	stp	x19, x20, [sp, #16]
 254:	mov	x20, x3
 258:	stp	x21, x22, [sp, #32]
 25c:	mov	x22, x0
 260:	mov	x21, x2
 264:	mov	x0, #0x18                  	// #24
 268:	str	x23, [sp, #48]
 26c:	mov	x23, x1
 270:	bl	0 <malloc>
 274:	mov	x19, x0
 278:	cbz	x0, 2b8 <ctf_dynhash_create+0x70>
 27c:	mov	x2, x23
 280:	mov	x1, x22
 284:	adrp	x5, 0 <free>
 288:	adrp	x4, 0 <xcalloc>
 28c:	add	x5, x5, #0x0
 290:	add	x4, x4, #0x0
 294:	adrp	x3, 0 <ctf_hashtab_traverse>
 298:	mov	x0, #0x7                   	// #7
 29c:	add	x3, x3, #0x0
 2a0:	bl	0 <htab_create_alloc>
 2a4:	str	x0, [x19]
 2a8:	cbnz	x0, 2d0 <ctf_dynhash_create+0x88>
 2ac:	mov	x0, x19
 2b0:	mov	x19, #0x0                   	// #0
 2b4:	bl	0 <free>
 2b8:	mov	x0, x19
 2bc:	ldp	x19, x20, [sp, #16]
 2c0:	ldp	x21, x22, [sp, #32]
 2c4:	ldr	x23, [sp, #48]
 2c8:	ldp	x29, x30, [sp], #64
 2cc:	ret
 2d0:	stp	x21, x20, [x19, #8]
 2d4:	b	2b8 <ctf_dynhash_create+0x70>

00000000000002d8 <ctf_dynhash_insert>:
 2d8:	stp	x29, x30, [sp, #-32]!
 2dc:	mov	x29, sp
 2e0:	ldp	x3, x4, [x0, #8]
 2e4:	str	x19, [sp, #16]
 2e8:	mov	x19, x0
 2ec:	ldr	x0, [x0]
 2f0:	bl	b8 <ctf_hashtab_insert>
 2f4:	cbnz	x0, 30c <ctf_dynhash_insert+0x34>
 2f8:	bl	0 <__errno_location>
 2fc:	ldr	w0, [x0]
 300:	ldr	x19, [sp, #16]
 304:	ldp	x29, x30, [sp], #32
 308:	ret
 30c:	ldr	x1, [x19, #8]
 310:	str	x1, [x0, #16]
 314:	ldr	x1, [x19, #16]
 318:	str	x1, [x0, #24]
 31c:	mov	w0, #0x0                   	// #0
 320:	b	300 <ctf_dynhash_insert+0x28>

0000000000000324 <ctf_dynhash_remove>:
 324:	stp	x29, x30, [sp, #-48]!
 328:	mov	x29, sp
 32c:	ldr	x0, [x0]
 330:	stp	x1, xzr, [sp, #16]
 334:	add	x1, sp, #0x10
 338:	stp	xzr, xzr, [sp, #32]
 33c:	bl	0 <htab_remove_elt>
 340:	ldp	x29, x30, [sp], #48
 344:	ret

0000000000000348 <ctf_dynhash_empty>:
 348:	ldr	x0, [x0]
 34c:	b	0 <htab_empty>

0000000000000350 <ctf_dynhash_lookup>:
 350:	stp	x29, x30, [sp, #-48]!
 354:	mov	w2, #0x0                   	// #0
 358:	mov	x29, sp
 35c:	ldr	x0, [x0]
 360:	str	x1, [sp, #16]
 364:	add	x1, sp, #0x10
 368:	stp	xzr, xzr, [sp, #24]
 36c:	str	xzr, [sp, #40]
 370:	bl	0 <htab_find_slot>
 374:	cbz	x0, 380 <ctf_dynhash_lookup+0x30>
 378:	ldr	x0, [x0]
 37c:	ldr	x0, [x0, #8]
 380:	ldp	x29, x30, [sp], #48
 384:	ret

0000000000000388 <ctf_dynhash_iter>:
 388:	stp	x29, x30, [sp, #-32]!
 38c:	mov	x29, sp
 390:	ldr	x0, [x0]
 394:	stp	x1, x2, [sp, #16]
 398:	add	x2, sp, #0x10
 39c:	adrp	x1, 0 <ctf_hashtab_traverse>
 3a0:	add	x1, x1, #0x0
 3a4:	bl	0 <htab_traverse>
 3a8:	ldp	x29, x30, [sp], #32
 3ac:	ret

00000000000003b0 <ctf_dynhash_iter_remove>:
 3b0:	stp	x29, x30, [sp, #-48]!
 3b4:	mov	x29, sp
 3b8:	ldr	x0, [x0]
 3bc:	stp	x0, x1, [sp, #24]
 3c0:	adrp	x1, 0 <ctf_hashtab_traverse>
 3c4:	add	x1, x1, #0x0
 3c8:	str	x2, [sp, #40]
 3cc:	add	x2, sp, #0x18
 3d0:	bl	0 <htab_traverse>
 3d4:	ldp	x29, x30, [sp], #48
 3d8:	ret

00000000000003dc <ctf_dynhash_destroy>:
 3dc:	stp	x29, x30, [sp, #-32]!
 3e0:	mov	x29, sp
 3e4:	str	x19, [sp, #16]
 3e8:	mov	x19, x0
 3ec:	cbz	x0, 3f8 <ctf_dynhash_destroy+0x1c>
 3f0:	ldr	x0, [x0]
 3f4:	bl	0 <htab_delete>
 3f8:	mov	x0, x19
 3fc:	ldr	x19, [sp, #16]
 400:	ldp	x29, x30, [sp], #32
 404:	b	0 <free>

0000000000000408 <ctf_hash_create>:
 408:	adrp	x5, 0 <free>
 40c:	add	x5, x5, #0x0
 410:	mov	x3, x5
 414:	adrp	x4, 0 <xcalloc>
 418:	add	x4, x4, #0x0
 41c:	b	0 <htab_create_alloc>

0000000000000420 <ctf_hash_size>:
 420:	stp	x29, x30, [sp, #-16]!
 424:	mov	x29, sp
 428:	bl	0 <htab_elements>
 42c:	ldp	x29, x30, [sp], #16
 430:	ret

0000000000000434 <ctf_hash_insert_type>:
 434:	stp	x29, x30, [sp, #-48]!
 438:	mov	x29, sp
 43c:	stp	x19, x20, [sp, #16]
 440:	mov	x19, x1
 444:	mov	w20, w2
 448:	mov	w1, w3
 44c:	stp	x21, x22, [sp, #32]
 450:	mov	x22, x0
 454:	mov	w21, w3
 458:	mov	x0, x19
 45c:	bl	0 <ctf_strraw>
 460:	cbz	w20, 4cc <ctf_hash_insert_type+0x98>
 464:	mov	x1, x0
 468:	cbnz	x0, 498 <ctf_hash_insert_type+0x64>
 46c:	tbz	w21, #31, 4d4 <ctf_hash_insert_type+0xa0>
 470:	ldr	x0, [x19, #128]
 474:	cbnz	x0, 4d4 <ctf_hash_insert_type+0xa0>
 478:	ldr	x0, [x19, #352]
 47c:	cmp	x0, #0x0
 480:	cset	w0, ne  // ne = any
 484:	add	w0, w0, #0x3f8
 488:	ldp	x19, x20, [sp, #16]
 48c:	ldp	x21, x22, [sp, #32]
 490:	ldp	x29, x30, [sp], #48
 494:	ret
 498:	ldrb	w0, [x0]
 49c:	cbnz	w0, 4a8 <ctf_hash_insert_type+0x74>
 4a0:	mov	w0, #0x0                   	// #0
 4a4:	b	488 <ctf_hash_insert_type+0x54>
 4a8:	mov	w2, w20
 4ac:	mov	x0, x22
 4b0:	mov	x4, #0x0                   	// #0
 4b4:	mov	x3, #0x0                   	// #0
 4b8:	bl	b8 <ctf_hashtab_insert>
 4bc:	cbnz	x0, 4a0 <ctf_hash_insert_type+0x6c>
 4c0:	bl	0 <__errno_location>
 4c4:	ldr	w0, [x0]
 4c8:	b	488 <ctf_hash_insert_type+0x54>
 4cc:	mov	w0, #0x16                  	// #22
 4d0:	b	488 <ctf_hash_insert_type+0x54>
 4d4:	mov	w0, #0x3f9                 	// #1017
 4d8:	b	488 <ctf_hash_insert_type+0x54>

00000000000004dc <ctf_hash_define_type>:
 4dc:	b	434 <ctf_hash_insert_type>

00000000000004e0 <ctf_hash_lookup_type>:
 4e0:	stp	x29, x30, [sp, #-48]!
 4e4:	mov	x29, sp
 4e8:	add	x1, sp, #0x10
 4ec:	str	x2, [sp, #16]
 4f0:	mov	w2, #0x0                   	// #0
 4f4:	stp	xzr, xzr, [sp, #24]
 4f8:	str	xzr, [sp, #40]
 4fc:	bl	0 <htab_find_slot>
 500:	cbz	x0, 514 <ctf_hash_lookup_type+0x34>
 504:	ldr	x0, [x0]
 508:	ldr	x0, [x0, #8]
 50c:	ldp	x29, x30, [sp], #48
 510:	ret
 514:	mov	x0, #0x0                   	// #0
 518:	b	50c <ctf_hash_lookup_type+0x2c>

000000000000051c <ctf_hash_destroy>:
 51c:	cbz	x0, 524 <ctf_hash_destroy+0x8>
 520:	b	0 <htab_delete>
 524:	ret

ctf-labels.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <label_info_cb>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x1
  10:	mov	x19, x2
  14:	ldr	x1, [x2]
  18:	bl	0 <strcmp>
  1c:	cbnz	w0, 38 <label_info_cb+0x38>
  20:	ldr	x0, [x19, #8]
  24:	cbz	x0, 30 <label_info_cb+0x30>
  28:	ldr	x1, [x20]
  2c:	str	x1, [x0]
  30:	mov	w0, #0x1                   	// #1
  34:	b	3c <label_info_cb+0x3c>
  38:	mov	w0, #0x0                   	// #0
  3c:	ldp	x19, x20, [sp, #16]
  40:	ldp	x29, x30, [sp], #32
  44:	ret

0000000000000048 <ctf_label_topmost>:
  48:	stp	x29, x30, [sp, #-32]!
  4c:	mov	x29, sp
  50:	ldr	x2, [x0, #32]
  54:	stp	x19, x20, [sp, #16]
  58:	ldp	w1, w2, [x2, #16]
  5c:	sub	w2, w2, w1
  60:	cmp	wzr, w2, lsr #3
  64:	b.ne	84 <ctf_label_topmost+0x3c>  // b.any
  68:	mov	x19, #0x0                   	// #0
  6c:	mov	w1, #0x409                 	// #1033
  70:	bl	0 <ctf_set_errno>
  74:	mov	x0, x19
  78:	ldp	x19, x20, [sp, #16]
  7c:	ldp	x29, x30, [sp], #32
  80:	ret
  84:	lsr	w3, w2, #3
  88:	mov	w1, w1
  8c:	sub	x1, x1, #0x8
  90:	mov	x20, x0
  94:	ldr	x2, [x0, #408]
  98:	add	x1, x1, w3, uxtw #3
  9c:	ldr	w1, [x2, x1]
  a0:	bl	0 <ctf_strraw>
  a4:	mov	x19, x0
  a8:	cbnz	x0, 74 <ctf_label_topmost+0x2c>
  ac:	mov	x0, x20
  b0:	mov	w1, #0x3ef                 	// #1007
  b4:	bl	0 <ctf_set_errno>
  b8:	b	74 <ctf_label_topmost+0x2c>

00000000000000bc <ctf_label_iter>:
  bc:	stp	x29, x30, [sp, #-80]!
  c0:	mov	x29, sp
  c4:	stp	x23, x24, [sp, #48]
  c8:	mov	x23, x2
  cc:	ldr	x2, [x0, #32]
  d0:	stp	x21, x22, [sp, #32]
  d4:	mov	x22, x1
  d8:	stp	x19, x20, [sp, #16]
  dc:	ldp	w1, w3, [x2, #16]
  e0:	ldr	x19, [x0, #408]
  e4:	sub	w3, w3, w1
  e8:	cmp	wzr, w3, lsr #3
  ec:	add	x19, x19, w1, uxtw
  f0:	b.ne	110 <ctf_label_iter+0x54>  // b.any
  f4:	mov	w1, #0x409                 	// #1033
  f8:	bl	0 <ctf_set_errno>
  fc:	ldp	x19, x20, [sp, #16]
 100:	ldp	x21, x22, [sp, #32]
 104:	ldp	x23, x24, [sp, #48]
 108:	ldp	x29, x30, [sp], #80
 10c:	ret
 110:	mov	x20, x0
 114:	lsr	w24, w3, #3
 118:	mov	w21, #0x0                   	// #0
 11c:	ldr	w1, [x19]
 120:	mov	x0, x20
 124:	bl	0 <ctf_strraw>
 128:	cbnz	x0, 148 <ctf_label_iter+0x8c>
 12c:	ldp	w1, w2, [x19]
 130:	adrp	x0, 0 <label_info_cb>
 134:	add	x0, x0, #0x0
 138:	bl	0 <ctf_dprintf>
 13c:	mov	x0, x20
 140:	mov	w1, #0x3ef                 	// #1007
 144:	b	f8 <ctf_label_iter+0x3c>
 148:	ldr	w1, [x19, #4]
 14c:	mov	x2, x23
 150:	str	x1, [sp, #72]
 154:	add	x1, sp, #0x48
 158:	blr	x22
 15c:	cbnz	w0, fc <ctf_label_iter+0x40>
 160:	add	w21, w21, #0x1
 164:	add	x19, x19, #0x8
 168:	cmp	w21, w24
 16c:	b.ne	11c <ctf_label_iter+0x60>  // b.any
 170:	b	fc <ctf_label_iter+0x40>

0000000000000174 <ctf_label_info>:
 174:	stp	x29, x30, [sp, #-48]!
 178:	mov	x29, sp
 17c:	str	x19, [sp, #16]
 180:	mov	x19, x0
 184:	stp	x1, x2, [sp, #32]
 188:	adrp	x1, 0 <label_info_cb>
 18c:	add	x2, sp, #0x20
 190:	add	x1, x1, #0x0
 194:	bl	bc <ctf_label_iter>
 198:	tbnz	w0, #31, 1b0 <ctf_label_info+0x3c>
 19c:	cmp	w0, #0x1
 1a0:	b.eq	1bc <ctf_label_info+0x48>  // b.none
 1a4:	mov	x0, x19
 1a8:	mov	w1, #0x408                 	// #1032
 1ac:	bl	0 <ctf_set_errno>
 1b0:	ldr	x19, [sp, #16]
 1b4:	ldp	x29, x30, [sp], #48
 1b8:	ret
 1bc:	mov	w0, #0x0                   	// #0
 1c0:	b	1b0 <ctf_label_info+0x3c>

ctf-link.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_arc_close_thunk>:
   0:	b	0 <ctf_arc_close>

0000000000000004 <ctf_file_close_thunk>:
   4:	b	0 <ctf_file_close>

0000000000000008 <ctf_create_per_cu>:
   8:	stp	x29, x30, [sp, #-80]!
   c:	mov	x29, sp
  10:	stp	x19, x20, [sp, #16]
  14:	mov	x20, x0
  18:	ldr	x0, [x0, #672]
  1c:	stp	x21, x22, [sp, #32]
  20:	stp	x23, x24, [sp, #48]
  24:	mov	x24, x1
  28:	mov	x23, x2
  2c:	cbz	x0, 50 <ctf_create_per_cu+0x48>
  30:	bl	0 <ctf_dynhash_lookup>
  34:	mov	x19, x0
  38:	cbnz	x0, 54 <ctf_create_per_cu+0x4c>
  3c:	ldr	x0, [x20, #672]
  40:	mov	x1, x23
  44:	bl	0 <ctf_dynhash_lookup>
  48:	mov	x19, x0
  4c:	cbnz	x0, 54 <ctf_create_per_cu+0x4c>
  50:	mov	x19, x24
  54:	ldr	x0, [x20, #656]
  58:	mov	x1, x19
  5c:	bl	0 <ctf_dynhash_lookup>
  60:	mov	x22, x0
  64:	cbnz	x0, f8 <ctf_create_per_cu+0xf0>
  68:	add	x0, sp, #0x4c
  6c:	bl	0 <ctf_create>
  70:	mov	x21, x0
  74:	cbnz	x0, a8 <ctf_create_per_cu+0xa0>
  78:	ldr	w0, [sp, #76]
  7c:	bl	0 <ctf_errmsg>
  80:	mov	x3, x0
  84:	mov	x1, x23
  88:	mov	x2, x24
  8c:	adrp	x0, 0 <ctf_arc_close_thunk>
  90:	add	x0, x0, #0x0
  94:	bl	0 <ctf_dprintf>
  98:	ldr	w1, [sp, #76]
  9c:	mov	x0, x20
  a0:	bl	0 <ctf_set_errno>
  a4:	b	f8 <ctf_create_per_cu+0xf0>
  a8:	mov	x0, x19
  ac:	bl	0 <strdup>
  b0:	mov	x19, x0
  b4:	cbz	x0, 110 <ctf_create_per_cu+0x108>
  b8:	mov	x1, x0
  bc:	mov	x2, x21
  c0:	ldr	x0, [x20, #656]
  c4:	bl	0 <ctf_dynhash_insert>
  c8:	tbnz	w0, #31, 110 <ctf_create_per_cu+0x108>
  cc:	mov	x22, x21
  d0:	mov	x1, x20
  d4:	mov	x0, x21
  d8:	bl	0 <ctf_import>
  dc:	mov	x1, x23
  e0:	mov	x0, x21
  e4:	bl	0 <ctf_cuname_set>
  e8:	mov	x0, x21
  ec:	adrp	x1, 0 <_CTF_SECTION>
  f0:	add	x1, x1, #0x0
  f4:	bl	0 <ctf_parent_name_set>
  f8:	mov	x0, x22
  fc:	ldp	x19, x20, [sp, #16]
 100:	ldp	x21, x22, [sp, #32]
 104:	ldp	x23, x24, [sp, #48]
 108:	ldp	x29, x30, [sp], #80
 10c:	ret
 110:	mov	x0, x19
 114:	bl	0 <free>
 118:	mov	x0, x21
 11c:	bl	0 <ctf_file_close>
 120:	mov	w1, #0xc                   	// #12
 124:	b	9c <ctf_create_per_cu+0x94>

0000000000000128 <ctf_change_parent_name>:
 128:	mov	x0, x1
 12c:	mov	x1, x2
 130:	b	0 <ctf_parent_name_set>

0000000000000134 <empty_link_type_mapping>:
 134:	ldr	x0, [x1, #664]
 138:	cbz	x0, 140 <empty_link_type_mapping+0xc>
 13c:	b	0 <ctf_dynhash_empty>
 140:	ret

0000000000000144 <ctf_link_one_input_archive_member>:
 144:	stp	x29, x30, [sp, #-48]!
 148:	mov	x29, sp
 14c:	stp	x19, x20, [sp, #16]
 150:	mov	x20, x1
 154:	mov	x19, x2
 158:	adrp	x1, 0 <_CTF_SECTION>
 15c:	add	x1, x1, #0x0
 160:	str	x21, [sp, #32]
 164:	mov	x21, x0
 168:	mov	x0, x20
 16c:	bl	0 <strcmp>
 170:	cbnz	w0, 240 <ctf_link_one_input_archive_member+0xfc>
 174:	ldr	w1, [x19, #48]
 178:	cbnz	w1, 19c <ctf_link_one_input_archive_member+0x58>
 17c:	adrp	x0, 0 <ctf_arc_close_thunk>
 180:	add	x0, x0, #0x0
 184:	bl	0 <strdup>
 188:	str	x0, [x19, #40]
 18c:	cbnz	x0, 1ac <ctf_link_one_input_archive_member+0x68>
 190:	mov	x0, x21
 194:	mov	w1, #0xc                   	// #12
 198:	bl	0 <ctf_set_errno>
 19c:	ldp	x19, x20, [sp, #16]
 1a0:	ldr	x21, [sp, #32]
 1a4:	ldp	x29, x30, [sp], #48
 1a8:	ret
 1ac:	ldr	x1, [x19, #8]
 1b0:	bl	0 <ctf_str_append>
 1b4:	cbz	x0, 22c <ctf_link_one_input_archive_member+0xe8>
 1b8:	str	x0, [x19, #40]
 1bc:	str	x20, [x19, #32]
 1c0:	adrp	x1, 0 <ctf_arc_close_thunk>
 1c4:	mov	x0, x20
 1c8:	add	x1, x1, #0x0
 1cc:	mov	x2, #0x5                   	// #5
 1d0:	bl	0 <strncmp>
 1d4:	cbnz	w0, 1e0 <ctf_link_one_input_archive_member+0x9c>
 1d8:	add	x20, x20, #0x5
 1dc:	str	x20, [x19, #32]
 1e0:	str	x21, [x19, #16]
 1e4:	mov	x2, x19
 1e8:	mov	x0, x21
 1ec:	adrp	x1, 0 <ctf_arc_close_thunk>
 1f0:	add	x1, x1, #0x0
 1f4:	bl	0 <ctf_type_iter_all>
 1f8:	mov	w20, w0
 1fc:	tbnz	w0, #31, 218 <ctf_link_one_input_archive_member+0xd4>
 200:	mov	x2, x19
 204:	mov	x0, x21
 208:	adrp	x1, 0 <ctf_arc_close_thunk>
 20c:	add	x1, x1, #0x0
 210:	bl	0 <ctf_variable_iter>
 214:	mov	w20, w0
 218:	ldr	x0, [x19, #40]
 21c:	str	wzr, [x19, #56]
 220:	bl	0 <free>
 224:	asr	w0, w20, #31
 228:	b	19c <ctf_link_one_input_archive_member+0x58>
 22c:	ldr	x0, [x19, #40]
 230:	bl	0 <free>
 234:	ldr	x0, [x19, #40]
 238:	cbnz	x0, 1bc <ctf_link_one_input_archive_member+0x78>
 23c:	b	190 <ctf_link_one_input_archive_member+0x4c>
 240:	mov	x0, x20
 244:	bl	0 <strdup>
 248:	ldr	x1, [x19, #24]
 24c:	str	x0, [x19, #40]
 250:	mov	x0, x21
 254:	bl	0 <ctf_import>
 258:	mov	w0, #0x1                   	// #1
 25c:	str	w0, [x19, #56]
 260:	b	234 <ctf_link_one_input_archive_member+0xf0>

0000000000000264 <ctf_link_one_type>:
 264:	stp	x29, x30, [sp, #-64]!
 268:	mov	x29, sp
 26c:	stp	x19, x20, [sp, #16]
 270:	mov	x19, x2
 274:	ldr	w20, [x2, #52]
 278:	stp	x21, x22, [sp, #32]
 27c:	stp	x23, x24, [sp, #48]
 280:	cbz	w20, 2b8 <ctf_link_one_type+0x54>
 284:	adrp	x0, 0 <ctf_arc_close_thunk>
 288:	add	x0, x0, #0x0
 28c:	bl	0 <ctf_dprintf>
 290:	ldr	x0, [x19]
 294:	mov	w1, #0x419                 	// #1049
 298:	bl	0 <ctf_set_errno>
 29c:	mov	w20, w0
 2a0:	mov	w0, w20
 2a4:	ldp	x19, x20, [sp, #16]
 2a8:	ldp	x21, x22, [sp, #32]
 2ac:	ldp	x23, x24, [sp, #48]
 2b0:	ldp	x29, x30, [sp], #64
 2b4:	ret
 2b8:	mov	x21, x0
 2bc:	ldr	w0, [x2, #56]
 2c0:	cbnz	w0, 32c <ctf_link_one_type+0xc8>
 2c4:	ldr	x0, [x19]
 2c8:	mov	x2, x21
 2cc:	ldr	x1, [x19, #16]
 2d0:	bl	0 <ctf_add_type>
 2d4:	cmn	x0, #0x1
 2d8:	b.ne	2a0 <ctf_link_one_type+0x3c>  // b.any
 2dc:	ldr	x0, [x19]
 2e0:	bl	0 <ctf_errno>
 2e4:	cmp	w0, #0x411
 2e8:	b.eq	320 <ctf_link_one_type+0xbc>  // b.none
 2ec:	cmp	w0, #0x41b
 2f0:	b.eq	2a0 <ctf_link_one_type+0x3c>  // b.none
 2f4:	ldr	x22, [x19, #40]
 2f8:	ldr	x19, [x19, #8]
 2fc:	bl	0 <ctf_errmsg>
 300:	mov	x2, x22
 304:	mov	x4, x0
 308:	mov	x3, x19
 30c:	mov	x1, x21
 310:	adrp	x0, 0 <ctf_arc_close_thunk>
 314:	add	x0, x0, #0x0
 318:	bl	0 <ctf_dprintf>
 31c:	b	2a0 <ctf_link_one_type+0x3c>
 320:	ldr	x0, [x19]
 324:	mov	w1, #0x0                   	// #0
 328:	bl	0 <ctf_set_errno>
 32c:	ldp	x0, x1, [x19]
 330:	ldr	x2, [x19, #32]
 334:	bl	8 <ctf_create_per_cu>
 338:	mov	x22, x0
 33c:	cbz	x0, 3ac <ctf_link_one_type+0x148>
 340:	ldr	x1, [x19, #16]
 344:	mov	x2, x21
 348:	bl	0 <ctf_add_type>
 34c:	cmn	x0, #0x1
 350:	b.ne	2a0 <ctf_link_one_type+0x3c>  // b.any
 354:	mov	x0, x22
 358:	bl	0 <ctf_errno>
 35c:	mov	w22, w0
 360:	cmp	w0, #0x41b
 364:	b.eq	2a0 <ctf_link_one_type+0x3c>  // b.none
 368:	ldr	x23, [x19, #8]
 36c:	ldr	x24, [x19, #40]
 370:	bl	0 <ctf_errmsg>
 374:	mov	x3, x23
 378:	mov	x5, x0
 37c:	mov	x4, x24
 380:	mov	x2, x24
 384:	mov	x1, x21
 388:	adrp	x0, 0 <ctf_arc_close_thunk>
 38c:	add	x0, x0, #0x0
 390:	bl	0 <ctf_dprintf>
 394:	cmp	w22, #0x411
 398:	b.ne	2a0 <ctf_link_one_type+0x3c>  // b.any
 39c:	ldr	x0, [x19]
 3a0:	mov	w1, #0x0                   	// #0
 3a4:	bl	0 <ctf_set_errno>
 3a8:	b	2a0 <ctf_link_one_type+0x3c>
 3ac:	mov	w20, #0xffffffff            	// #-1
 3b0:	b	2a0 <ctf_link_one_type+0x3c>

00000000000003b4 <ctf_link_intern_extern_string>:
 3b4:	stp	x29, x30, [sp, #-32]!
 3b8:	mov	x0, x1
 3bc:	mov	x29, sp
 3c0:	ldr	w1, [x1, #552]
 3c4:	str	x19, [sp, #16]
 3c8:	mov	x19, x2
 3cc:	orr	w1, w1, #0x4
 3d0:	ldr	w2, [x2, #8]
 3d4:	str	w1, [x0, #552]
 3d8:	ldr	x1, [x19]
 3dc:	bl	0 <ctf_str_add_external>
 3e0:	cbnz	w0, 3ec <ctf_link_intern_extern_string+0x38>
 3e4:	mov	w0, #0xc                   	// #12
 3e8:	str	w0, [x19, #12]
 3ec:	ldr	x19, [sp, #16]
 3f0:	ldp	x29, x30, [sp], #32
 3f4:	ret

00000000000003f8 <ctf_accumulate_archive_names>:
 3f8:	stp	x29, x30, [sp, #-64]!
 3fc:	mov	x29, sp
 400:	stp	x19, x20, [sp, #16]
 404:	mov	x20, x1
 408:	mov	x19, x2
 40c:	ldr	x1, [x2, #24]
 410:	stp	x23, x24, [sp, #48]
 414:	mov	x23, x0
 418:	ldr	x0, [x2]
 41c:	stp	x21, x22, [sp, #32]
 420:	add	x1, x1, #0x1
 424:	str	x1, [x2, #24]
 428:	lsl	x1, x1, #3
 42c:	bl	0 <realloc>
 430:	ldr	x1, [x19, #24]
 434:	cbnz	x0, 45c <ctf_accumulate_archive_names+0x64>
 438:	sub	x1, x1, #0x1
 43c:	str	x1, [x19, #24]
 440:	ldr	x0, [x19, #8]
 444:	mov	w1, #0xc                   	// #12
 448:	ldp	x19, x20, [sp, #16]
 44c:	ldp	x21, x22, [sp, #32]
 450:	ldp	x23, x24, [sp, #48]
 454:	ldp	x29, x30, [sp], #64
 458:	b	0 <ctf_set_errno>
 45c:	mov	x22, x0
 460:	lsl	x1, x1, #3
 464:	ldr	x0, [x19, #16]
 468:	bl	0 <realloc>
 46c:	mov	x21, x0
 470:	cbnz	x0, 484 <ctf_accumulate_archive_names+0x8c>
 474:	ldr	x0, [x19, #24]
 478:	sub	x0, x0, #0x1
 47c:	str	x0, [x19, #24]
 480:	b	440 <ctf_accumulate_archive_names+0x48>
 484:	ldr	x3, [x20, #680]
 488:	cbz	x3, 4d4 <ctf_accumulate_archive_names+0xdc>
 48c:	ldr	x2, [x20, #688]
 490:	mov	x1, x23
 494:	mov	x0, x20
 498:	blr	x3
 49c:	mov	x24, x0
 4a0:	cbz	x0, 4d4 <ctf_accumulate_archive_names+0xdc>
 4a4:	ldp	x0, x1, [x19, #32]
 4a8:	add	x1, x1, #0x1
 4ac:	str	x1, [x19, #40]
 4b0:	lsl	x1, x1, #3
 4b4:	bl	0 <realloc>
 4b8:	cbnz	x0, 4cc <ctf_accumulate_archive_names+0xd4>
 4bc:	ldr	x0, [x19, #40]
 4c0:	sub	x0, x0, #0x1
 4c4:	str	x0, [x19, #40]
 4c8:	b	440 <ctf_accumulate_archive_names+0x48>
 4cc:	mov	x23, x24
 4d0:	str	x0, [x19, #32]
 4d4:	ldr	x2, [x19, #24]
 4d8:	str	x22, [x19]
 4dc:	lsl	x2, x2, #3
 4e0:	sub	x2, x2, #0x8
 4e4:	str	x23, [x22, x2]
 4e8:	ldp	x23, x24, [sp, #48]
 4ec:	str	x21, [x19, #16]
 4f0:	str	x20, [x21, x2]
 4f4:	ldp	x19, x20, [sp, #16]
 4f8:	ldp	x21, x22, [sp, #32]
 4fc:	ldp	x29, x30, [sp], #64
 500:	ret

0000000000000504 <ctf_link_one_input_archive>:
 504:	stp	x29, x30, [sp, #-48]!
 508:	mov	x29, sp
 50c:	stp	x19, x20, [sp, #16]
 510:	mov	x19, x2
 514:	mov	x20, x1
 518:	str	x0, [x2, #8]
 51c:	mov	x1, #0x0                   	// #0
 520:	str	wzr, [x2, #48]
 524:	mov	x0, x20
 528:	add	x2, sp, #0x2c
 52c:	bl	0 <ctf_arc_open_by_name>
 530:	str	x0, [x19, #24]
 534:	cbnz	x0, 570 <ctf_link_one_input_archive+0x6c>
 538:	ldr	w2, [sp, #44]
 53c:	cmp	w2, #0x415
 540:	b.eq	570 <ctf_link_one_input_archive+0x6c>  // b.none
 544:	ldr	x19, [x19, #8]
 548:	mov	w0, w2
 54c:	bl	0 <ctf_errmsg>
 550:	mov	x2, x0
 554:	mov	x1, x19
 558:	adrp	x0, 0 <ctf_arc_close_thunk>
 55c:	add	x0, x0, #0x0
 560:	bl	0 <ctf_dprintf>
 564:	ldp	x19, x20, [sp, #16]
 568:	ldp	x29, x30, [sp], #48
 56c:	ret
 570:	adrp	x1, 0 <_CTF_SECTION>
 574:	mov	x2, x19
 578:	add	x1, x1, #0x0
 57c:	bl	144 <ctf_link_one_input_archive_member>
 580:	tbz	w0, #31, 590 <ctf_link_one_input_archive+0x8c>
 584:	ldr	x0, [x19, #24]
 588:	bl	0 <ctf_file_close>
 58c:	b	564 <ctf_link_one_input_archive+0x60>
 590:	mov	w0, #0x1                   	// #1
 594:	str	w0, [x19, #48]
 598:	adrp	x1, 0 <ctf_arc_close_thunk>
 59c:	mov	x2, x19
 5a0:	add	x1, x1, #0x0
 5a4:	mov	x0, x20
 5a8:	bl	0 <ctf_archive_iter>
 5ac:	tbz	w0, #31, 604 <ctf_link_one_input_archive+0x100>
 5b0:	ldp	x0, x20, [x19]
 5b4:	bl	0 <ctf_errno>
 5b8:	bl	0 <ctf_errmsg>
 5bc:	mov	x2, x0
 5c0:	mov	x1, x20
 5c4:	adrp	x0, 0 <ctf_arc_close_thunk>
 5c8:	add	x0, x0, #0x0
 5cc:	bl	0 <ctf_dprintf>
 5d0:	ldr	x0, [x19, #24]
 5d4:	bl	0 <ctf_file_close>
 5d8:	ldr	x0, [x19]
 5dc:	ldr	x0, [x0, #664]
 5e0:	cbz	x0, 5e8 <ctf_link_one_input_archive+0xe4>
 5e4:	bl	0 <ctf_dynhash_empty>
 5e8:	ldr	x0, [x19]
 5ec:	mov	x2, #0x0                   	// #0
 5f0:	adrp	x1, 0 <ctf_arc_close_thunk>
 5f4:	add	x1, x1, #0x0
 5f8:	ldr	x0, [x0, #656]
 5fc:	bl	0 <ctf_dynhash_iter>
 600:	b	564 <ctf_link_one_input_archive+0x60>
 604:	ldr	x0, [x19]
 608:	mov	w1, #0x0                   	// #0
 60c:	bl	0 <ctf_set_errno>
 610:	b	5d0 <ctf_link_one_input_archive+0xcc>

0000000000000614 <ctf_add_type_mapping>:
 614:	stp	x29, x30, [sp, #-48]!
 618:	mov	x29, sp
 61c:	stp	x19, x20, [sp, #16]
 620:	mov	x20, x0
 624:	ldr	w0, [x0, #544]
 628:	stp	x21, x22, [sp, #32]
 62c:	mov	x19, x2
 630:	cmp	x0, x1
 634:	b.cc	644 <ctf_add_type_mapping+0x30>  // b.lo, b.ul, b.last
 638:	ldr	x0, [x20, #512]
 63c:	cmp	x0, #0x0
 640:	csel	x20, x20, x0, eq  // eq = none
 644:	ldr	w0, [x19, #544]
 648:	ldr	w22, [x20, #544]
 64c:	cmp	x0, x3
 650:	and	x22, x22, x1
 654:	b.cc	664 <ctf_add_type_mapping+0x50>  // b.lo, b.ul, b.last
 658:	ldr	x0, [x19, #512]
 65c:	cmp	x0, #0x0
 660:	csel	x19, x19, x0, eq  // eq = none
 664:	ldr	x0, [x19, #664]
 668:	ldr	w21, [x19, #544]
 66c:	and	x21, x21, x3
 670:	cbz	x0, 698 <ctf_add_type_mapping+0x84>
 674:	mov	x1, #0x10                  	// #16
 678:	mov	x0, #0x1                   	// #1
 67c:	bl	0 <calloc>
 680:	mov	x1, x0
 684:	cbnz	x0, 6c4 <ctf_add_type_mapping+0xb0>
 688:	ldp	x19, x20, [sp, #16]
 68c:	ldp	x21, x22, [sp, #32]
 690:	ldp	x29, x30, [sp], #48
 694:	ret
 698:	mov	x3, #0x0                   	// #0
 69c:	adrp	x2, 0 <free>
 6a0:	adrp	x1, 0 <ctf_hash_eq_type_mapping_key>
 6a4:	add	x2, x2, #0x0
 6a8:	add	x1, x1, #0x0
 6ac:	adrp	x0, 0 <ctf_hash_type_mapping_key>
 6b0:	add	x0, x0, #0x0
 6b4:	bl	0 <ctf_dynhash_create>
 6b8:	str	x0, [x19, #664]
 6bc:	cbnz	x0, 674 <ctf_add_type_mapping+0x60>
 6c0:	b	688 <ctf_add_type_mapping+0x74>
 6c4:	ldr	x0, [x19, #664]
 6c8:	stp	x20, x22, [x1]
 6cc:	mov	x2, x21
 6d0:	ldp	x19, x20, [sp, #16]
 6d4:	ldp	x21, x22, [sp, #32]
 6d8:	ldp	x29, x30, [sp], #48
 6dc:	b	0 <ctf_dynhash_insert>

00000000000006e0 <ctf_type_mapping>:
 6e0:	stp	x29, x30, [sp, #-48]!
 6e4:	mov	x29, sp
 6e8:	stp	x19, x20, [sp, #16]
 6ec:	mov	x19, x2
 6f0:	ldr	x20, [x2]
 6f4:	ldr	w2, [x0, #544]
 6f8:	cmp	x2, x1
 6fc:	b.cc	70c <ctf_type_mapping+0x2c>  // b.lo, b.ul, b.last
 700:	ldr	x2, [x0, #512]
 704:	cmp	x2, #0x0
 708:	csel	x0, x0, x2, eq  // eq = none
 70c:	ldr	w2, [x0, #544]
 710:	and	x1, x2, x1
 714:	stp	x0, x1, [sp, #32]
 718:	ldr	x0, [x20, #664]
 71c:	cbz	x0, 744 <ctf_type_mapping+0x64>
 720:	add	x1, sp, #0x20
 724:	bl	0 <ctf_dynhash_lookup>
 728:	cbz	x0, 744 <ctf_type_mapping+0x64>
 72c:	ldr	x1, [x20, #512]
 730:	cbz	x1, 758 <ctf_type_mapping+0x78>
 734:	ldr	w1, [x20, #544]
 738:	add	w1, w1, #0x1
 73c:	orr	x0, x0, x1
 740:	b	758 <ctf_type_mapping+0x78>
 744:	ldr	x20, [x20, #512]
 748:	cbz	x20, 778 <ctf_type_mapping+0x98>
 74c:	ldr	x0, [x20, #664]
 750:	cbnz	x0, 768 <ctf_type_mapping+0x88>
 754:	mov	x0, #0x0                   	// #0
 758:	str	x20, [x19]
 75c:	ldp	x19, x20, [sp, #16]
 760:	ldp	x29, x30, [sp], #48
 764:	ret
 768:	add	x1, sp, #0x20
 76c:	bl	0 <ctf_dynhash_lookup>
 770:	cbnz	x0, 72c <ctf_type_mapping+0x4c>
 774:	b	754 <ctf_type_mapping+0x74>
 778:	mov	x0, #0x0                   	// #0
 77c:	b	75c <ctf_type_mapping+0x7c>

0000000000000780 <ctf_link_one_variable>:
 780:	stp	x29, x30, [sp, #-80]!
 784:	mov	x29, sp
 788:	stp	x19, x20, [sp, #16]
 78c:	mov	x20, x2
 790:	stp	x21, x22, [sp, #32]
 794:	mov	x21, x0
 798:	ldr	x0, [x2]
 79c:	str	x0, [sp, #72]
 7a0:	ldr	x0, [x20, #16]
 7a4:	add	x2, sp, #0x48
 7a8:	str	x23, [sp, #48]
 7ac:	mov	x23, x1
 7b0:	bl	6e0 <ctf_type_mapping>
 7b4:	mov	x19, x0
 7b8:	cbz	x0, 834 <ctf_link_one_variable+0xb4>
 7bc:	ldr	x0, [x20]
 7c0:	ldr	x1, [sp, #72]
 7c4:	cmp	x0, x1
 7c8:	b.ne	834 <ctf_link_one_variable+0xb4>  // b.any
 7cc:	ldr	x0, [x0, #592]
 7d0:	mov	x1, x21
 7d4:	bl	0 <ctf_dynhash_lookup>
 7d8:	mov	x22, x0
 7dc:	cbnz	x0, 80c <ctf_link_one_variable+0x8c>
 7e0:	ldr	x0, [sp, #72]
 7e4:	mov	x2, x19
 7e8:	mov	x1, x21
 7ec:	bl	0 <ctf_add_variable>
 7f0:	tbnz	w0, #31, 884 <ctf_link_one_variable+0x104>
 7f4:	mov	w0, #0x0                   	// #0
 7f8:	ldp	x19, x20, [sp, #16]
 7fc:	ldp	x21, x22, [sp, #32]
 800:	ldr	x23, [sp, #48]
 804:	ldp	x29, x30, [sp], #80
 808:	ret
 80c:	ldr	x0, [x0, #24]
 810:	cmp	x19, x0
 814:	b.eq	828 <ctf_link_one_variable+0xa8>  // b.none
 818:	adrp	x0, 0 <ctf_arc_close_thunk>
 81c:	mov	x1, x21
 820:	add	x0, x0, #0x0
 824:	bl	0 <ctf_dprintf>
 828:	ldr	x0, [x22, #24]
 82c:	cmp	x0, x23
 830:	b.eq	7f4 <ctf_link_one_variable+0x74>  // b.none
 834:	ldp	x0, x1, [x20]
 838:	ldr	x2, [x20, #32]
 83c:	bl	8 <ctf_create_per_cu>
 840:	mov	x22, x0
 844:	cbz	x0, 8f0 <ctf_link_one_variable+0x170>
 848:	cbnz	x19, 8a0 <ctf_link_one_variable+0x120>
 84c:	ldr	x0, [x20, #16]
 850:	add	x2, sp, #0x48
 854:	mov	x1, x23
 858:	str	x22, [sp, #72]
 85c:	bl	6e0 <ctf_type_mapping>
 860:	mov	x19, x0
 864:	cbnz	x0, 8a0 <ctf_link_one_variable+0x120>
 868:	ldr	x3, [x20, #8]
 86c:	mov	x2, x21
 870:	mov	x1, x23
 874:	adrp	x0, 0 <ctf_arc_close_thunk>
 878:	add	x0, x0, #0x0
 87c:	bl	0 <ctf_dprintf>
 880:	b	7f4 <ctf_link_one_variable+0x74>
 884:	ldr	x19, [x20]
 888:	ldr	x0, [sp, #72]
 88c:	bl	0 <ctf_errno>
 890:	mov	w1, w0
 894:	mov	x0, x19
 898:	bl	0 <ctf_set_errno>
 89c:	b	7f8 <ctf_link_one_variable+0x78>
 8a0:	ldr	x0, [x22, #592]
 8a4:	mov	x1, x21
 8a8:	bl	0 <ctf_dynhash_lookup>
 8ac:	cbz	x0, 8d0 <ctf_link_one_variable+0x150>
 8b0:	ldr	x0, [x0, #24]
 8b4:	cmp	x19, x0
 8b8:	b.eq	7f4 <ctf_link_one_variable+0x74>  // b.none
 8bc:	mov	x1, x21
 8c0:	adrp	x0, 0 <ctf_arc_close_thunk>
 8c4:	add	x0, x0, #0x0
 8c8:	bl	0 <ctf_dprintf>
 8cc:	b	7f4 <ctf_link_one_variable+0x74>
 8d0:	mov	x2, x19
 8d4:	mov	x1, x21
 8d8:	mov	x0, x22
 8dc:	bl	0 <ctf_add_variable>
 8e0:	tbz	w0, #31, 7f4 <ctf_link_one_variable+0x74>
 8e4:	mov	x0, x22
 8e8:	ldr	x19, [x20]
 8ec:	b	88c <ctf_link_one_variable+0x10c>
 8f0:	mov	w0, #0xffffffff            	// #-1
 8f4:	b	7f8 <ctf_link_one_variable+0x78>

00000000000008f8 <ctf_link_add_ctf>:
 8f8:	stp	x29, x30, [sp, #-48]!
 8fc:	mov	x29, sp
 900:	stp	x19, x20, [sp, #16]
 904:	mov	x20, x1
 908:	ldr	x1, [x0, #656]
 90c:	stp	x21, x22, [sp, #32]
 910:	cbz	x1, 92c <ctf_link_add_ctf+0x34>
 914:	mov	w1, #0x3f5                 	// #1013
 918:	bl	0 <ctf_set_errno>
 91c:	ldp	x19, x20, [sp, #16]
 920:	ldp	x21, x22, [sp, #32]
 924:	ldp	x29, x30, [sp], #48
 928:	ret
 92c:	mov	x19, x0
 930:	mov	x21, x2
 934:	ldr	x0, [x0, #648]
 938:	cbnz	x0, 964 <ctf_link_add_ctf+0x6c>
 93c:	adrp	x3, 0 <ctf_arc_close_thunk>
 940:	adrp	x2, 0 <free>
 944:	add	x3, x3, #0x0
 948:	add	x2, x2, #0x0
 94c:	adrp	x1, 0 <ctf_hash_eq_string>
 950:	adrp	x0, 0 <ctf_hash_string>
 954:	add	x1, x1, #0x0
 958:	add	x0, x0, #0x0
 95c:	bl	0 <ctf_dynhash_create>
 960:	str	x0, [x19, #648]
 964:	ldr	x22, [x19, #648]
 968:	cbnz	x22, 990 <ctf_link_add_ctf+0x98>
 96c:	mov	x21, #0x0                   	// #0
 970:	ldr	x0, [x19, #648]
 974:	bl	0 <free>
 978:	str	xzr, [x19, #648]
 97c:	mov	x0, x21
 980:	bl	0 <free>
 984:	mov	x0, x19
 988:	mov	w1, #0xc                   	// #12
 98c:	b	918 <ctf_link_add_ctf+0x20>
 990:	mov	x0, x21
 994:	bl	0 <strdup>
 998:	mov	x1, x0
 99c:	mov	x21, x0
 9a0:	cbz	x0, 96c <ctf_link_add_ctf+0x74>
 9a4:	mov	x2, x20
 9a8:	mov	x0, x22
 9ac:	bl	0 <ctf_dynhash_insert>
 9b0:	tbnz	w0, #31, 970 <ctf_link_add_ctf+0x78>
 9b4:	mov	w0, #0x0                   	// #0
 9b8:	b	91c <ctf_link_add_ctf+0x24>

00000000000009bc <ctf_link_add_cu_mapping>:
 9bc:	stp	x29, x30, [sp, #-48]!
 9c0:	mov	x29, sp
 9c4:	stp	x19, x20, [sp, #16]
 9c8:	mov	x19, x0
 9cc:	mov	x20, x2
 9d0:	ldr	x0, [x0, #672]
 9d4:	str	x21, [sp, #32]
 9d8:	mov	x21, x1
 9dc:	cbnz	x0, a24 <ctf_link_add_cu_mapping+0x68>
 9e0:	adrp	x3, 0 <free>
 9e4:	add	x3, x3, #0x0
 9e8:	mov	x2, x3
 9ec:	adrp	x1, 0 <ctf_hash_eq_string>
 9f0:	adrp	x0, 0 <ctf_hash_string>
 9f4:	add	x1, x1, #0x0
 9f8:	add	x0, x0, #0x0
 9fc:	bl	0 <ctf_dynhash_create>
 a00:	str	x0, [x19, #672]
 a04:	cbnz	x0, a24 <ctf_link_add_cu_mapping+0x68>
 a08:	mov	x0, x19
 a0c:	mov	w1, #0xc                   	// #12
 a10:	bl	0 <ctf_set_errno>
 a14:	ldp	x19, x20, [sp, #16]
 a18:	ldr	x21, [sp, #32]
 a1c:	ldp	x29, x30, [sp], #48
 a20:	ret
 a24:	ldr	x0, [x19, #656]
 a28:	cbnz	x0, a58 <ctf_link_add_cu_mapping+0x9c>
 a2c:	adrp	x3, 0 <ctf_arc_close_thunk>
 a30:	adrp	x2, 0 <free>
 a34:	add	x3, x3, #0x0
 a38:	add	x2, x2, #0x0
 a3c:	adrp	x1, 0 <ctf_hash_eq_string>
 a40:	adrp	x0, 0 <ctf_hash_string>
 a44:	add	x1, x1, #0x0
 a48:	add	x0, x0, #0x0
 a4c:	bl	0 <ctf_dynhash_create>
 a50:	str	x0, [x19, #656]
 a54:	cbz	x0, a08 <ctf_link_add_cu_mapping+0x4c>
 a58:	mov	x0, x21
 a5c:	bl	0 <strdup>
 a60:	mov	x21, x0
 a64:	mov	x0, x20
 a68:	bl	0 <strdup>
 a6c:	mov	x20, x0
 a70:	cmp	x21, #0x0
 a74:	ccmp	x0, #0x0, #0x4, ne  // ne = any
 a78:	b.ne	aa4 <ctf_link_add_cu_mapping+0xe8>  // b.any
 a7c:	bl	0 <__errno_location>
 a80:	ldr	w1, [x0]
 a84:	mov	x0, x19
 a88:	bl	0 <ctf_set_errno>
 a8c:	mov	x0, x21
 a90:	bl	0 <free>
 a94:	mov	x0, x20
 a98:	bl	0 <free>
 a9c:	mov	w0, #0xffffffff            	// #-1
 aa0:	b	a14 <ctf_link_add_cu_mapping+0x58>
 aa4:	mov	x2, x0
 aa8:	mov	x1, x0
 aac:	mov	x0, x19
 ab0:	bl	8 <ctf_create_per_cu>
 ab4:	cbz	x0, a8c <ctf_link_add_cu_mapping+0xd0>
 ab8:	ldr	x0, [x19, #672]
 abc:	mov	x2, x20
 ac0:	mov	x1, x21
 ac4:	bl	0 <ctf_dynhash_insert>
 ac8:	cbz	w0, a14 <ctf_link_add_cu_mapping+0x58>
 acc:	mov	w1, w0
 ad0:	b	a84 <ctf_link_add_cu_mapping+0xc8>

0000000000000ad4 <ctf_link_set_memb_name_changer>:
 ad4:	str	x1, [x0, #680]
 ad8:	str	x2, [x0, #688]
 adc:	ret

0000000000000ae0 <ctf_link>:
 ae0:	stp	x29, x30, [sp, #-96]!
 ae4:	mov	x29, sp
 ae8:	str	x19, [sp, #16]
 aec:	mov	x19, x0
 af0:	ldr	x0, [x0, #648]
 af4:	stp	xzr, xzr, [sp, #72]
 af8:	str	x19, [sp, #32]
 afc:	stp	xzr, xzr, [sp, #40]
 b00:	stp	xzr, xzr, [sp, #56]
 b04:	str	w1, [sp, #84]
 b08:	str	xzr, [sp, #88]
 b0c:	cbz	x0, b84 <ctf_link+0xa4>
 b10:	ldr	x0, [x19, #656]
 b14:	cbnz	x0, b5c <ctf_link+0x7c>
 b18:	adrp	x3, 0 <ctf_arc_close_thunk>
 b1c:	adrp	x2, 0 <free>
 b20:	add	x3, x3, #0x0
 b24:	add	x2, x2, #0x0
 b28:	adrp	x1, 0 <ctf_hash_eq_string>
 b2c:	adrp	x0, 0 <ctf_hash_string>
 b30:	add	x1, x1, #0x0
 b34:	add	x0, x0, #0x0
 b38:	bl	0 <ctf_dynhash_create>
 b3c:	str	x0, [x19, #656]
 b40:	cbnz	x0, b5c <ctf_link+0x7c>
 b44:	mov	x0, x19
 b48:	mov	w1, #0xc                   	// #12
 b4c:	bl	0 <ctf_set_errno>
 b50:	ldr	x19, [sp, #16]
 b54:	ldp	x29, x30, [sp], #96
 b58:	ret
 b5c:	ldr	x0, [x19, #648]
 b60:	add	x2, sp, #0x20
 b64:	adrp	x1, 0 <ctf_arc_close_thunk>
 b68:	add	x1, x1, #0x0
 b6c:	bl	0 <ctf_dynhash_iter>
 b70:	mov	x0, x19
 b74:	bl	0 <ctf_errno>
 b78:	cmp	w0, #0x0
 b7c:	csetm	w0, ne  // ne = any
 b80:	b	b50 <ctf_link+0x70>
 b84:	mov	w0, #0x0                   	// #0
 b88:	b	b50 <ctf_link+0x70>

0000000000000b8c <ctf_link_add_strtab>:
 b8c:	stp	x29, x30, [sp, #-96]!
 b90:	mov	x29, sp
 b94:	stp	x19, x20, [sp, #16]
 b98:	mov	x19, x0
 b9c:	mov	w20, #0x0                   	// #0
 ba0:	stp	x21, x22, [sp, #32]
 ba4:	mov	x21, x1
 ba8:	mov	x22, x2
 bac:	stp	x23, x24, [sp, #48]
 bb0:	adrp	x23, 0 <ctf_arc_close_thunk>
 bb4:	add	x23, x23, #0x0
 bb8:	mov	w24, #0xc                   	// #12
 bbc:	mov	x1, x22
 bc0:	add	x0, sp, #0x4c
 bc4:	blr	x21
 bc8:	mov	x1, x0
 bcc:	cbnz	x0, be8 <ctf_link_add_strtab+0x5c>
 bd0:	neg	w0, w20
 bd4:	ldp	x19, x20, [sp, #16]
 bd8:	ldp	x21, x22, [sp, #32]
 bdc:	ldp	x23, x24, [sp, #48]
 be0:	ldp	x29, x30, [sp], #96
 be4:	ret
 be8:	ldr	w0, [x19, #552]
 bec:	ldr	w2, [sp, #76]
 bf0:	orr	w0, w0, #0x4
 bf4:	str	w0, [x19, #552]
 bf8:	mov	x0, x19
 bfc:	str	x1, [sp, #80]
 c00:	stp	w2, wzr, [sp, #88]
 c04:	bl	0 <ctf_str_add_external>
 c08:	cmp	w0, #0x0
 c0c:	ldr	x0, [x19, #656]
 c10:	csel	w20, w20, w24, ne  // ne = any
 c14:	add	x2, sp, #0x50
 c18:	mov	x1, x23
 c1c:	bl	0 <ctf_dynhash_iter>
 c20:	ldr	w0, [sp, #92]
 c24:	cmp	w0, #0x0
 c28:	csel	w20, w20, w0, eq  // eq = none
 c2c:	b	bbc <ctf_link_add_strtab+0x30>

0000000000000c30 <ctf_link_shuffle_syms>:
 c30:	mov	w0, #0x0                   	// #0
 c34:	ret

0000000000000c38 <ctf_link_write>:
 c38:	stp	x29, x30, [sp, #-112]!
 c3c:	mov	x29, sp
 c40:	stp	xzr, xzr, [sp, #64]
 c44:	stp	x23, x24, [sp, #48]
 c48:	mov	x23, x0
 c4c:	mov	x24, x1
 c50:	str	x0, [sp, #72]
 c54:	ldr	x0, [x0, #656]
 c58:	stp	x19, x20, [sp, #16]
 c5c:	mov	x19, x2
 c60:	stp	x21, x22, [sp, #32]
 c64:	stp	xzr, xzr, [sp, #80]
 c68:	stp	xzr, xzr, [sp, #96]
 c6c:	cbnz	x0, ca4 <ctf_link_write+0x6c>
 c70:	ldr	x1, [sp, #88]
 c74:	cbnz	x1, cd8 <ctf_link_write+0xa0>
 c78:	mov	x2, x19
 c7c:	mov	x1, x24
 c80:	mov	x0, x23
 c84:	bl	0 <ctf_write_mem>
 c88:	mov	x21, x0
 c8c:	mov	x0, x21
 c90:	ldp	x19, x20, [sp, #16]
 c94:	ldp	x21, x22, [sp, #32]
 c98:	ldp	x23, x24, [sp, #48]
 c9c:	ldp	x29, x30, [sp], #112
 ca0:	ret
 ca4:	add	x2, sp, #0x40
 ca8:	adrp	x1, 0 <ctf_arc_close_thunk>
 cac:	add	x1, x1, #0x0
 cb0:	bl	0 <ctf_dynhash_iter>
 cb4:	mov	x0, x23
 cb8:	bl	0 <ctf_errno>
 cbc:	tbz	w0, #31, c70 <ctf_link_write+0x38>
 cc0:	adrp	x19, 0 <ctf_arc_close_thunk>
 cc4:	mov	x21, #0x0                   	// #0
 cc8:	add	x19, x19, #0x0
 ccc:	mov	x20, #0x0                   	// #0
 cd0:	mov	x22, #0x0                   	// #0
 cd4:	b	dc4 <ctf_link_write+0x18c>
 cd8:	ldr	x0, [sp, #64]
 cdc:	add	x1, x1, #0x1
 ce0:	lsl	x1, x1, #3
 ce4:	bl	0 <realloc>
 ce8:	mov	x22, x0
 cec:	cbz	x0, ef8 <ctf_link_write+0x2c0>
 cf0:	ldr	x2, [sp, #88]
 cf4:	mov	x1, x0
 cf8:	add	x0, x0, #0x8
 cfc:	str	x22, [sp, #64]
 d00:	lsl	x2, x2, #3
 d04:	bl	0 <memmove>
 d08:	ldr	x3, [x23, #680]
 d0c:	adrp	x1, 0 <_CTF_SECTION>
 d10:	add	x1, x1, #0x0
 d14:	str	x1, [x22]
 d18:	cbz	x3, e20 <ctf_link_write+0x1e8>
 d1c:	ldr	x2, [x23, #688]
 d20:	mov	x0, x23
 d24:	blr	x3
 d28:	mov	x22, x0
 d2c:	cbz	x0, d4c <ctf_link_write+0x114>
 d30:	mov	x2, x0
 d34:	adrp	x1, 0 <ctf_arc_close_thunk>
 d38:	ldr	x0, [sp, #64]
 d3c:	add	x1, x1, #0x0
 d40:	str	x22, [x0]
 d44:	ldr	x0, [x23, #656]
 d48:	bl	0 <ctf_dynhash_iter>
 d4c:	ldp	x0, x1, [sp, #80]
 d50:	add	x1, x1, #0x1
 d54:	lsl	x1, x1, #3
 d58:	bl	0 <realloc>
 d5c:	mov	x20, x0
 d60:	cbz	x0, f1c <ctf_link_write+0x2e4>
 d64:	ldr	x2, [sp, #88]
 d68:	mov	x1, x0
 d6c:	add	x0, x0, #0x8
 d70:	str	x20, [sp, #80]
 d74:	lsl	x2, x2, #3
 d78:	bl	0 <memmove>
 d7c:	ldr	x0, [sp, #80]
 d80:	str	x23, [x0]
 d84:	bl	0 <tmpfile>
 d88:	mov	x20, x0
 d8c:	cbz	x0, f2c <ctf_link_write+0x2f4>
 d90:	bl	0 <fileno>
 d94:	ldp	x1, x2, [sp, #80]
 d98:	mov	x4, x19
 d9c:	ldr	x3, [sp, #64]
 da0:	add	x2, x2, #0x1
 da4:	bl	0 <ctf_arc_write_fd>
 da8:	mov	w1, w0
 dac:	tbz	w0, #31, e28 <ctf_link_write+0x1f0>
 db0:	adrp	x19, 0 <ctf_arc_close_thunk>
 db4:	add	x19, x19, #0x0
 db8:	mov	x21, #0x0                   	// #0
 dbc:	mov	x0, x23
 dc0:	bl	0 <ctf_set_errno>
 dc4:	mov	x0, x21
 dc8:	bl	0 <free>
 dcc:	cbz	x20, dd8 <ctf_link_write+0x1a0>
 dd0:	mov	x0, x20
 dd4:	bl	0 <fclose>
 dd8:	ldr	x0, [sp, #64]
 ddc:	bl	0 <free>
 de0:	ldr	x0, [sp, #80]
 de4:	bl	0 <free>
 de8:	mov	x0, x22
 dec:	bl	0 <free>
 df0:	ldr	x0, [sp, #104]
 df4:	cbnz	x0, f98 <ctf_link_write+0x360>
 df8:	mov	x0, x23
 dfc:	bl	0 <ctf_errno>
 e00:	bl	0 <ctf_errmsg>
 e04:	mov	x21, #0x0                   	// #0
 e08:	mov	x2, x0
 e0c:	mov	x1, x19
 e10:	adrp	x0, 0 <ctf_arc_close_thunk>
 e14:	add	x0, x0, #0x0
 e18:	bl	0 <ctf_dprintf>
 e1c:	b	c8c <ctf_link_write+0x54>
 e20:	mov	x22, #0x0                   	// #0
 e24:	b	d4c <ctf_link_write+0x114>
 e28:	mov	x0, x20
 e2c:	mov	w2, #0x2                   	// #2
 e30:	mov	x1, #0x0                   	// #0
 e34:	bl	0 <fseek>
 e38:	tbnz	w0, #31, f3c <ctf_link_write+0x304>
 e3c:	mov	x0, x20
 e40:	bl	0 <ftell>
 e44:	mov	x19, x0
 e48:	tbnz	x0, #63, f4c <ctf_link_write+0x314>
 e4c:	mov	x0, x20
 e50:	mov	w2, #0x0                   	// #0
 e54:	mov	x1, #0x0                   	// #0
 e58:	bl	0 <fseek>
 e5c:	tbnz	w0, #31, f5c <ctf_link_write+0x324>
 e60:	mov	x0, x19
 e64:	bl	0 <malloc>
 e68:	mov	x21, x0
 e6c:	cbnz	x0, ea0 <ctf_link_write+0x268>
 e70:	adrp	x19, 0 <ctf_arc_close_thunk>
 e74:	add	x19, x19, #0x0
 e78:	b	f08 <ctf_link_write+0x2d0>
 e7c:	mov	x3, x20
 e80:	mov	x1, x19
 e84:	mov	x0, x21
 e88:	mov	x2, #0x1                   	// #1
 e8c:	bl	0 <fread>
 e90:	cbnz	x0, eac <ctf_link_write+0x274>
 e94:	mov	x0, x20
 e98:	bl	0 <ferror>
 e9c:	cbnz	w0, f6c <ctf_link_write+0x334>
 ea0:	mov	x0, x20
 ea4:	bl	0 <feof>
 ea8:	cbz	w0, e7c <ctf_link_write+0x244>
 eac:	ldr	x0, [sp, #64]
 eb0:	str	x19, [x24]
 eb4:	bl	0 <free>
 eb8:	ldr	x0, [sp, #80]
 ebc:	bl	0 <free>
 ec0:	mov	x0, x22
 ec4:	bl	0 <free>
 ec8:	ldr	x0, [sp, #104]
 ecc:	cbz	x0, c8c <ctf_link_write+0x54>
 ed0:	mov	x19, #0x0                   	// #0
 ed4:	b	ee4 <ctf_link_write+0x2ac>
 ed8:	ldr	x0, [x0, x19, lsl #3]
 edc:	add	x19, x19, #0x1
 ee0:	bl	0 <free>
 ee4:	ldp	x0, x1, [sp, #96]
 ee8:	cmp	x1, x19
 eec:	b.hi	ed8 <ctf_link_write+0x2a0>  // b.pmore
 ef0:	bl	0 <free>
 ef4:	b	c8c <ctf_link_write+0x54>
 ef8:	adrp	x19, 0 <ctf_arc_close_thunk>
 efc:	add	x19, x19, #0x0
 f00:	mov	x21, #0x0                   	// #0
 f04:	mov	x20, #0x0                   	// #0
 f08:	bl	0 <__errno_location>
 f0c:	ldr	w1, [x0]
 f10:	mov	x0, x23
 f14:	bl	0 <ctf_set_errno>
 f18:	b	dc4 <ctf_link_write+0x18c>
 f1c:	adrp	x19, 0 <ctf_arc_close_thunk>
 f20:	mov	x21, #0x0                   	// #0
 f24:	add	x19, x19, #0x0
 f28:	b	f08 <ctf_link_write+0x2d0>
 f2c:	adrp	x19, 0 <ctf_arc_close_thunk>
 f30:	mov	x21, #0x0                   	// #0
 f34:	add	x19, x19, #0x0
 f38:	b	f08 <ctf_link_write+0x2d0>
 f3c:	adrp	x19, 0 <ctf_arc_close_thunk>
 f40:	mov	x21, #0x0                   	// #0
 f44:	add	x19, x19, #0x0
 f48:	b	f08 <ctf_link_write+0x2d0>
 f4c:	adrp	x19, 0 <ctf_arc_close_thunk>
 f50:	mov	x21, #0x0                   	// #0
 f54:	add	x19, x19, #0x0
 f58:	b	f08 <ctf_link_write+0x2d0>
 f5c:	adrp	x19, 0 <ctf_arc_close_thunk>
 f60:	mov	x21, #0x0                   	// #0
 f64:	add	x19, x19, #0x0
 f68:	b	f08 <ctf_link_write+0x2d0>
 f6c:	adrp	x19, 0 <ctf_arc_close_thunk>
 f70:	add	x19, x19, #0x0
 f74:	b	f08 <ctf_link_write+0x2d0>
 f78:	ldr	x0, [x0, x20, lsl #3]
 f7c:	add	x20, x20, #0x1
 f80:	bl	0 <free>
 f84:	ldp	x0, x1, [sp, #96]
 f88:	cmp	x1, x20
 f8c:	b.hi	f78 <ctf_link_write+0x340>  // b.pmore
 f90:	bl	0 <free>
 f94:	b	df8 <ctf_link_write+0x1c0>
 f98:	mov	x20, #0x0                   	// #0
 f9c:	b	f84 <ctf_link_write+0x34c>

ctf-lookup.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_lookup_var>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	ldr	w1, [x1]
   c:	str	x19, [sp, #16]
  10:	ldr	x19, [x0, #8]
  14:	ldr	x0, [x0]
  18:	bl	0 <ctf_strptr>
  1c:	mov	x1, x0
  20:	mov	x0, x19
  24:	ldr	x19, [sp, #16]
  28:	ldp	x29, x30, [sp], #32
  2c:	b	0 <strcmp>

0000000000000030 <ctf_lookup_by_name>:
  30:	stp	x29, x30, [sp, #-112]!
  34:	mov	x29, sp
  38:	stp	x25, x26, [sp, #64]
  3c:	adrp	x25, 0 <ctf_lookup_var>
  40:	add	x25, x25, #0x0
  44:	add	x26, x25, #0x8
  48:	stp	x19, x20, [sp, #16]
  4c:	mov	x19, x0
  50:	stp	x21, x22, [sp, #32]
  54:	mov	x22, x1
  58:	stp	x23, x24, [sp, #48]
  5c:	stp	x27, x28, [sp, #80]
  60:	cbnz	x22, 88 <ctf_lookup_by_name+0x58>
  64:	mov	w1, #0x16                  	// #22
  68:	mov	x0, x19
  6c:	ldp	x19, x20, [sp, #16]
  70:	ldp	x21, x22, [sp, #32]
  74:	ldp	x23, x24, [sp, #48]
  78:	ldp	x25, x26, [sp, #64]
  7c:	ldp	x27, x28, [sp, #80]
  80:	ldp	x29, x30, [sp], #112
  84:	b	0 <ctf_set_errno>
  88:	mov	x0, x22
  8c:	mov	x21, x22
  90:	bl	0 <strlen>
  94:	add	x24, x22, x0
  98:	mov	x28, #0x0                   	// #0
  9c:	ldrb	w0, [x21]
  a0:	cbz	w0, 2b4 <ctf_lookup_by_name+0x284>
  a4:	bl	0 <__ctype_b_loc>
  a8:	ldr	x27, [x0]
  ac:	b	b4 <ctf_lookup_by_name+0x84>
  b0:	add	x21, x21, #0x1
  b4:	ldrb	w0, [x21]
  b8:	ldrb	w2, [x21]
  bc:	ldrh	w0, [x27, x0, lsl #1]
  c0:	tbnz	w0, #13, b0 <ctf_lookup_by_name+0x80>
  c4:	cmp	x21, x24
  c8:	b.eq	2b0 <ctf_lookup_by_name+0x280>  // b.none
  cc:	add	x20, x21, #0x1
  d0:	mov	x1, x25
  d4:	mov	x0, x20
  d8:	str	w2, [sp, #108]
  dc:	bl	0 <strpbrk>
  e0:	cmp	x0, #0x0
  e4:	ldr	w2, [sp, #108]
  e8:	csel	x23, x0, x24, ne  // ne = any
  ec:	cmp	w2, #0x2a
  f0:	b.ne	188 <ctf_lookup_by_name+0x158>  // b.any
  f4:	ldr	w0, [x19, #544]
  f8:	ldr	x1, [x19, #448]
  fc:	and	x0, x0, x28
 100:	ldr	w0, [x1, x0, lsl #2]
 104:	cbnz	x0, 168 <ctf_lookup_by_name+0x138>
 108:	mov	x1, x28
 10c:	mov	x0, x19
 110:	bl	0 <ctf_type_resolve_unsliced>
 114:	cmn	x0, #0x1
 118:	b.eq	130 <ctf_lookup_by_name+0x100>  // b.none
 11c:	ldr	w1, [x19, #544]
 120:	and	x0, x1, x0
 124:	ldr	x1, [x19, #448]
 128:	ldr	w0, [x1, x0, lsl #2]
 12c:	cbnz	x0, 168 <ctf_lookup_by_name+0x138>
 130:	mov	x0, x19
 134:	mov	w1, #0x402                 	// #1026
 138:	bl	0 <ctf_set_errno>
 13c:	ldr	x19, [x19, #512]
 140:	cbnz	x19, 60 <ctf_lookup_by_name+0x30>
 144:	mov	x28, #0xffffffffffffffff    	// #-1
 148:	mov	x0, x28
 14c:	ldp	x19, x20, [sp, #16]
 150:	ldp	x21, x22, [sp, #32]
 154:	ldp	x23, x24, [sp, #48]
 158:	ldp	x25, x26, [sp, #64]
 15c:	ldp	x27, x28, [sp, #80]
 160:	ldp	x29, x30, [sp], #112
 164:	ret
 168:	ldr	w1, [x19, #552]
 16c:	tbz	w1, #0, 17c <ctf_lookup_by_name+0x14c>
 170:	ldr	w1, [x19, #544]
 174:	add	w1, w1, #0x1
 178:	orr	x0, x0, x1
 17c:	mov	x28, x0
 180:	mov	x21, x20
 184:	b	9c <ctf_lookup_by_name+0x6c>
 188:	ldurb	w1, [x23, #-1]
 18c:	sub	x20, x23, x21
 190:	add	w1, w1, w20
 194:	sub	w1, w1, #0x69
 198:	cmp	w1, #0x14
 19c:	b.hi	1c8 <ctf_lookup_by_name+0x198>  // b.pmore
 1a0:	sbfiz	x0, x1, #4, #32
 1a4:	add	x1, x26, w1, sxtw #4
 1a8:	ldr	x1, [x1, #8]
 1ac:	cmp	x20, x1
 1b0:	b.ne	1c8 <ctf_lookup_by_name+0x198>  // b.any
 1b4:	ldr	x0, [x26, x0]
 1b8:	mov	x2, x20
 1bc:	mov	x1, x21
 1c0:	bl	0 <strncmp>
 1c4:	cbz	w0, 2a4 <ctf_lookup_by_name+0x274>
 1c8:	add	x23, x19, #0xd8
 1cc:	ldr	x1, [x23]
 1d0:	cbz	x1, 130 <ctf_lookup_by_name+0x100>
 1d4:	ldrb	w0, [x1]
 1d8:	cbz	w0, 1ec <ctf_lookup_by_name+0x1bc>
 1dc:	mov	x2, x20
 1e0:	mov	x0, x21
 1e4:	bl	0 <strncmp>
 1e8:	cbnz	w0, 29c <ctf_lookup_by_name+0x26c>
 1ec:	ldr	x0, [x23, #8]
 1f0:	cmp	x20, x0
 1f4:	b.cc	29c <ctf_lookup_by_name+0x26c>  // b.lo, b.ul, b.last
 1f8:	add	x21, x21, x0
 1fc:	ldrb	w0, [x21]
 200:	ldrh	w0, [x27, x0, lsl #1]
 204:	tbnz	w0, #13, 274 <ctf_lookup_by_name+0x244>
 208:	mov	x0, x21
 20c:	mov	w1, #0x2a                  	// #42
 210:	bl	0 <strchr>
 214:	cmp	x0, #0x0
 218:	csel	x20, x0, x24, ne  // ne = any
 21c:	ldurb	w0, [x20, #-1]
 220:	ldrh	w0, [x27, x0, lsl #1]
 224:	tbnz	w0, #13, 27c <ctf_lookup_by_name+0x24c>
 228:	ldr	x2, [x19, #712]
 22c:	sub	x27, x20, x21
 230:	add	x1, x27, #0x1
 234:	cmp	x2, x1
 238:	ldr	x0, [x19, #704]
 23c:	b.cc	284 <ctf_lookup_by_name+0x254>  // b.lo, b.ul, b.last
 240:	mov	x2, x27
 244:	mov	x1, x21
 248:	bl	0 <memcpy>
 24c:	ldr	x0, [x19, #704]
 250:	strb	wzr, [x0, x27]
 254:	ldr	x1, [x23, #16]
 258:	mov	x0, x19
 25c:	ldr	x2, [x19, #704]
 260:	bl	0 <ctf_lookup_by_rawhash>
 264:	cbz	x0, 130 <ctf_lookup_by_name+0x100>
 268:	ldr	x1, [x23]
 26c:	cbnz	x1, 17c <ctf_lookup_by_name+0x14c>
 270:	b	130 <ctf_lookup_by_name+0x100>
 274:	add	x21, x21, #0x1
 278:	b	1fc <ctf_lookup_by_name+0x1cc>
 27c:	sub	x20, x20, #0x1
 280:	b	21c <ctf_lookup_by_name+0x1ec>
 284:	bl	0 <free>
 288:	mov	x1, x27
 28c:	mov	x0, x21
 290:	bl	0 <xstrndup>
 294:	str	x0, [x19, #704]
 298:	b	254 <ctf_lookup_by_name+0x224>
 29c:	add	x23, x23, #0x18
 2a0:	b	1cc <ctf_lookup_by_name+0x19c>
 2a4:	mov	x0, x28
 2a8:	mov	x20, x23
 2ac:	b	17c <ctf_lookup_by_name+0x14c>
 2b0:	cbnz	w2, 2b8 <ctf_lookup_by_name+0x288>
 2b4:	cbnz	x28, 148 <ctf_lookup_by_name+0x118>
 2b8:	mov	w1, #0x403                 	// #1027
 2bc:	b	68 <ctf_lookup_by_name+0x38>

00000000000002c0 <ctf_lookup_variable>:
 2c0:	stp	x29, x30, [sp, #-48]!
 2c4:	adrp	x4, 0 <ctf_lookup_var>
 2c8:	mov	x3, #0x8                   	// #8
 2cc:	mov	x29, sp
 2d0:	stp	x19, x20, [sp, #16]
 2d4:	mov	x20, x1
 2d8:	mov	x19, x0
 2dc:	stp	x0, x1, [sp, #32]
 2e0:	add	x4, x4, #0x0
 2e4:	ldr	x1, [x0, #464]
 2e8:	ldr	x2, [x0, #472]
 2ec:	add	x0, sp, #0x20
 2f0:	bl	0 <bsearch>
 2f4:	cbnz	x0, 324 <ctf_lookup_variable+0x64>
 2f8:	ldr	x0, [x19, #512]
 2fc:	cbz	x0, 314 <ctf_lookup_variable+0x54>
 300:	mov	x1, x20
 304:	bl	2c0 <ctf_lookup_variable>
 308:	ldp	x19, x20, [sp, #16]
 30c:	ldp	x29, x30, [sp], #48
 310:	ret
 314:	mov	x0, x19
 318:	mov	w1, #0x407                 	// #1031
 31c:	bl	0 <ctf_set_errno>
 320:	b	308 <ctf_lookup_variable+0x48>
 324:	ldr	w0, [x0, #4]
 328:	b	308 <ctf_lookup_variable+0x48>

000000000000032c <ctf_lookup_symbol_name>:
 32c:	mov	x2, x1
 330:	add	x1, x0, #0x38
 334:	stp	x29, x30, [sp, #-64]!
 338:	mov	x29, sp
 33c:	ldr	x3, [x1, #8]
 340:	str	x19, [sp, #16]
 344:	cbnz	x3, 35c <ctf_lookup_symbol_name+0x30>
 348:	mov	w1, #0x3f2                 	// #1010
 34c:	bl	0 <ctf_set_errno>
 350:	adrp	x0, 0 <_CTF_NULLSTR>
 354:	add	x0, x0, #0x0
 358:	b	3a4 <ctf_lookup_symbol_name+0x78>
 35c:	ldr	x4, [x0, #432]
 360:	mov	x19, x0
 364:	cmp	x4, x2
 368:	b.hi	374 <ctf_lookup_symbol_name+0x48>  // b.pmore
 36c:	mov	w1, #0x16                  	// #22
 370:	b	34c <ctf_lookup_symbol_name+0x20>
 374:	ldr	x0, [x1, #24]
 378:	cmp	x0, #0x10
 37c:	b.ne	3b0 <ctf_lookup_symbol_name+0x84>  // b.any
 380:	add	x1, sp, #0x28
 384:	add	x0, x3, x2, lsl #4
 388:	bl	0 <ctf_sym_to_elf64>
 38c:	ldr	w1, [x0]
 390:	ldr	x0, [x19, #360]
 394:	cmp	x1, x0
 398:	b.cs	350 <ctf_lookup_symbol_name+0x24>  // b.hs, b.nlast
 39c:	ldr	x0, [x19, #352]
 3a0:	add	x0, x0, x1
 3a4:	ldr	x19, [sp, #16]
 3a8:	ldp	x29, x30, [sp], #64
 3ac:	ret
 3b0:	mov	x0, #0x18                  	// #24
 3b4:	madd	x0, x2, x0, x3
 3b8:	b	38c <ctf_lookup_symbol_name+0x60>

00000000000003bc <ctf_lookup_by_symbol>:
 3bc:	ldr	x3, [x0, #64]
 3c0:	add	x4, x0, #0x38
 3c4:	mov	x2, x0
 3c8:	cbnz	x3, 3d4 <ctf_lookup_by_symbol+0x18>
 3cc:	mov	w1, #0x3f2                 	// #1010
 3d0:	b	0 <ctf_set_errno>
 3d4:	ldr	x5, [x0, #432]
 3d8:	cmp	x5, x1
 3dc:	b.hi	3e8 <ctf_lookup_by_symbol+0x2c>  // b.pmore
 3e0:	mov	w1, #0x16                  	// #22
 3e4:	b	3d0 <ctf_lookup_by_symbol+0x14>
 3e8:	ldr	x0, [x4, #24]
 3ec:	cmp	x0, #0x10
 3f0:	b.ne	414 <ctf_lookup_by_symbol+0x58>  // b.any
 3f4:	add	x3, x3, x1, lsl #4
 3f8:	ldrb	w0, [x3, #12]
 3fc:	and	w0, w0, #0xf
 400:	cmp	w0, #0x1
 404:	b.eq	424 <ctf_lookup_by_symbol+0x68>  // b.none
 408:	mov	w1, #0x406                 	// #1030
 40c:	mov	x0, x2
 410:	b	3d0 <ctf_lookup_by_symbol+0x14>
 414:	mov	x0, #0x18                  	// #24
 418:	madd	x3, x1, x0, x3
 41c:	ldrb	w0, [x3, #4]
 420:	b	3fc <ctf_lookup_by_symbol+0x40>
 424:	ldr	x0, [x2, #424]
 428:	ldr	w0, [x0, x1, lsl #2]
 42c:	cmn	w0, #0x1
 430:	b.ne	43c <ctf_lookup_by_symbol+0x80>  // b.any
 434:	mov	w1, #0x407                 	// #1031
 438:	b	40c <ctf_lookup_by_symbol+0x50>
 43c:	ldr	x1, [x2, #408]
 440:	ldr	w0, [x1, w0, uxtw]
 444:	cbz	x0, 434 <ctf_lookup_by_symbol+0x78>
 448:	ret

000000000000044c <ctf_lookup_by_id>:
 44c:	stp	x29, x30, [sp, #-32]!
 450:	mov	x29, sp
 454:	stp	x19, x20, [sp, #16]
 458:	mov	x20, x0
 45c:	ldr	x0, [x0]
 460:	ldr	w2, [x0, #552]
 464:	tbz	w2, #0, 494 <ctf_lookup_by_id+0x48>
 468:	ldr	w2, [x0, #544]
 46c:	cmp	x2, x1
 470:	b.cc	494 <ctf_lookup_by_id+0x48>  // b.lo, b.ul, b.last
 474:	ldr	x19, [x0, #512]
 478:	cbnz	x19, 498 <ctf_lookup_by_id+0x4c>
 47c:	mov	w1, #0x3f3                 	// #1011
 480:	bl	0 <ctf_set_errno>
 484:	mov	x0, x19
 488:	ldp	x19, x20, [sp, #16]
 48c:	ldp	x29, x30, [sp], #32
 490:	ret
 494:	mov	x19, x0
 498:	ldr	w2, [x19, #552]
 49c:	tbz	w2, #1, 4cc <ctf_lookup_by_id+0x80>
 4a0:	mov	x0, x19
 4a4:	bl	0 <ctf_dynamic_type>
 4a8:	cbz	x0, 4b8 <ctf_lookup_by_id+0x6c>
 4ac:	str	x19, [x20]
 4b0:	add	x19, x0, #0x18
 4b4:	b	484 <ctf_lookup_by_id+0x38>
 4b8:	ldr	x0, [x20]
 4bc:	mov	w1, #0x3fa                 	// #1018
 4c0:	mov	x19, #0x0                   	// #0
 4c4:	bl	0 <ctf_set_errno>
 4c8:	b	484 <ctf_lookup_by_id+0x38>
 4cc:	ldr	w2, [x19, #544]
 4d0:	ands	x1, x2, x1
 4d4:	b.eq	4fc <ctf_lookup_by_id+0xb0>  // b.none
 4d8:	ldr	x2, [x19, #480]
 4dc:	cmp	x2, x1
 4e0:	b.cc	4fc <ctf_lookup_by_id+0xb0>  // b.lo, b.ul, b.last
 4e4:	ldr	x0, [x19, #440]
 4e8:	ldr	w0, [x0, x1, lsl #2]
 4ec:	str	x19, [x20]
 4f0:	ldr	x19, [x19, #408]
 4f4:	add	x19, x19, x0
 4f8:	b	484 <ctf_lookup_by_id+0x38>
 4fc:	mov	w1, #0x3fa                 	// #1018
 500:	b	4c0 <ctf_lookup_by_id+0x74>

0000000000000504 <ctf_func_info>:
 504:	stp	x29, x30, [sp, #-64]!
 508:	add	x3, x0, #0x38
 50c:	mov	x29, sp
 510:	stp	x19, x20, [sp, #16]
 514:	mov	x20, x2
 518:	ldr	x2, [x3, #8]
 51c:	stp	x21, x22, [sp, #32]
 520:	str	x23, [sp, #48]
 524:	cbnz	x2, 544 <ctf_func_info+0x40>
 528:	mov	w1, #0x3f2                 	// #1010
 52c:	bl	0 <ctf_set_errno>
 530:	ldp	x19, x20, [sp, #16]
 534:	ldp	x21, x22, [sp, #32]
 538:	ldr	x23, [sp, #48]
 53c:	ldp	x29, x30, [sp], #64
 540:	ret
 544:	ldr	x4, [x0, #432]
 548:	mov	x19, x0
 54c:	cmp	x4, x1
 550:	b.hi	55c <ctf_func_info+0x58>  // b.pmore
 554:	mov	w1, #0x16                  	// #22
 558:	b	52c <ctf_func_info+0x28>
 55c:	ldr	x0, [x3, #24]
 560:	cmp	x0, #0x10
 564:	b.ne	588 <ctf_func_info+0x84>  // b.any
 568:	add	x2, x2, x1, lsl #4
 56c:	ldrb	w0, [x2, #12]
 570:	and	w0, w0, #0xf
 574:	cmp	w0, #0x2
 578:	b.eq	598 <ctf_func_info+0x94>  // b.none
 57c:	mov	w1, #0x404                 	// #1028
 580:	mov	x0, x19
 584:	b	52c <ctf_func_info+0x28>
 588:	mov	x0, #0x18                  	// #24
 58c:	madd	x2, x1, x0, x2
 590:	ldrb	w0, [x2, #4]
 594:	b	570 <ctf_func_info+0x6c>
 598:	ldr	x0, [x19, #424]
 59c:	ldr	w0, [x0, x1, lsl #2]
 5a0:	cmn	w0, #0x1
 5a4:	b.ne	5b0 <ctf_func_info+0xac>  // b.any
 5a8:	mov	w1, #0x405                 	// #1029
 5ac:	b	580 <ctf_func_info+0x7c>
 5b0:	ldr	x1, [x19, #408]
 5b4:	ldr	w23, [x1, w0, uxtw]
 5b8:	add	x21, x1, w0, uxtw
 5bc:	ldr	x0, [x19]
 5c0:	ldr	x1, [x0]
 5c4:	mov	w0, w23
 5c8:	blr	x1
 5cc:	mov	w22, w0
 5d0:	ldr	x0, [x19]
 5d4:	ldr	x1, [x0, #16]
 5d8:	mov	w0, w23
 5dc:	blr	x1
 5e0:	orr	w1, w22, w0
 5e4:	cbz	w1, 5a8 <ctf_func_info+0xa4>
 5e8:	cmp	w22, #0x5
 5ec:	b.eq	5f8 <ctf_func_info+0xf4>  // b.none
 5f0:	mov	w1, #0x3ef                 	// #1007
 5f4:	b	580 <ctf_func_info+0x7c>
 5f8:	ldr	w1, [x21, #4]
 5fc:	str	x1, [x20]
 600:	stp	w0, wzr, [x20, #8]
 604:	cbz	w0, 620 <ctf_func_info+0x11c>
 608:	sub	w0, w0, #0x1
 60c:	add	x21, x21, w0, uxtw #2
 610:	ldr	w1, [x21, #8]
 614:	cbnz	w1, 620 <ctf_func_info+0x11c>
 618:	mov	w1, #0x1                   	// #1
 61c:	stp	w0, w1, [x20, #8]
 620:	mov	w0, #0x0                   	// #0
 624:	b	530 <ctf_func_info+0x2c>

0000000000000628 <ctf_func_args>:
 628:	stp	x29, x30, [sp, #-64]!
 62c:	mov	x29, sp
 630:	stp	x19, x20, [sp, #16]
 634:	mov	w19, w2
 638:	mov	x20, x0
 63c:	add	x2, sp, #0x30
 640:	stp	x21, x22, [sp, #32]
 644:	mov	x22, x1
 648:	mov	x21, x3
 64c:	bl	504 <ctf_func_info>
 650:	tbnz	w0, #31, 6a8 <ctf_func_args+0x80>
 654:	ldr	x0, [x20, #424]
 658:	ldr	w1, [x0, x22, lsl #2]
 65c:	ldr	x0, [x20, #408]
 660:	add	x0, x0, #0x8
 664:	add	x1, x1, x0
 668:	ldr	w0, [sp, #56]
 66c:	cmp	w0, w19
 670:	csel	w2, w0, w19, ls  // ls = plast
 674:	mov	x0, #0x0                   	// #0
 678:	lsl	x3, x0, #2
 67c:	cmp	x0, x2
 680:	b.ne	698 <ctf_func_args+0x70>  // b.any
 684:	mov	w0, #0x0                   	// #0
 688:	ldp	x19, x20, [sp, #16]
 68c:	ldp	x21, x22, [sp, #32]
 690:	ldp	x29, x30, [sp], #64
 694:	ret
 698:	ldr	w3, [x3, x1]
 69c:	str	x3, [x21, x0, lsl #3]
 6a0:	add	x0, x0, #0x1
 6a4:	b	678 <ctf_func_args+0x50>
 6a8:	mov	w0, #0xffffffff            	// #-1
 6ac:	b	688 <ctf_func_args+0x60>

ctf-open.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <get_kind_v1>:
       0:	ubfx	x0, x0, #11, #5
       4:	ret

0000000000000008 <get_root_v1>:
       8:	ubfx	x0, x0, #10, #1
       c:	ret

0000000000000010 <get_vlen_v1>:
      10:	and	w0, w0, #0x3ff
      14:	ret

0000000000000018 <get_kind_v2>:
      18:	lsr	w0, w0, #26
      1c:	ret

0000000000000020 <get_root_v2>:
      20:	ubfx	x0, x0, #25, #1
      24:	ret

0000000000000028 <get_vlen_v2>:
      28:	and	w0, w0, #0xffffff
      2c:	ret

0000000000000030 <get_ctt_size_v1>:
      30:	ldrh	w0, [x1, #6]
      34:	ldp	w5, w4, [x1, #8]
      38:	mov	w1, #0xffff                	// #65535
      3c:	cmp	w0, w1
      40:	b.ne	64 <get_ctt_size_v1+0x34>  // b.any
      44:	mov	w0, w4
      48:	mov	x1, #0x10                  	// #16
      4c:	orr	x0, x0, x5, lsl #32
      50:	cbz	x2, 58 <get_ctt_size_v1+0x28>
      54:	str	x0, [x2]
      58:	cbz	x3, 60 <get_ctt_size_v1+0x30>
      5c:	str	x1, [x3]
      60:	ret
      64:	and	x0, x0, #0xffff
      68:	mov	x1, #0x8                   	// #8
      6c:	b	50 <get_ctt_size_v1+0x20>

0000000000000070 <get_ctt_size_v2>:
      70:	ldp	w0, w5, [x1, #8]
      74:	ldr	w4, [x1, #16]
      78:	cmn	w0, #0x1
      7c:	b.ne	a0 <get_ctt_size_v2+0x30>  // b.any
      80:	mov	w0, w4
      84:	mov	x1, #0x14                  	// #20
      88:	orr	x0, x0, x5, lsl #32
      8c:	cbz	x2, 94 <get_ctt_size_v2+0x24>
      90:	str	x0, [x2]
      94:	cbz	x3, 9c <get_ctt_size_v2+0x2c>
      98:	str	x1, [x3]
      9c:	ret
      a0:	mov	w0, w0
      a4:	mov	x1, #0xc                   	// #12
      a8:	b	8c <get_ctt_size_v2+0x1c>

00000000000000ac <flip_objts>:
      ac:	lsr	x1, x1, #2
      b0:	mov	x2, #0x0                   	// #0
      b4:	cmp	x1, x2
      b8:	b.ne	c0 <flip_objts+0x14>  // b.any
      bc:	ret
      c0:	ldr	w3, [x0, x2, lsl #2]
      c4:	rev	w3, w3
      c8:	str	w3, [x0, x2, lsl #2]
      cc:	add	x2, x2, #0x1
      d0:	b	b4 <flip_objts+0x8>

00000000000000d4 <ctf_set_base>:
      d4:	stp	x29, x30, [sp, #-32]!
      d8:	mov	x29, sp
      dc:	stp	x19, x20, [sp, #16]
      e0:	mov	x20, x1
      e4:	mov	x19, x0
      e8:	ldr	x3, [x0, #392]
      ec:	ldr	x1, [x0, #408]
      f0:	sub	x1, x1, x3
      f4:	ldr	w3, [x20, #36]
      f8:	add	x1, x2, x1
      fc:	str	x2, [x0, #392]
     100:	str	x1, [x0, #408]
     104:	add	x2, x1, w3, uxtw
     108:	str	x2, [x0, #464]
     10c:	ldr	w2, [x20, #40]
     110:	sub	w2, w2, w3
     114:	lsr	w2, w2, #3
     118:	str	x2, [x0, #472]
     11c:	ldr	w2, [x20, #44]
     120:	add	x1, x1, x2
     124:	str	x1, [x0, #336]
     128:	ldr	w1, [x20, #48]
     12c:	str	x1, [x0, #344]
     130:	ldr	w1, [x20, #4]
     134:	cbz	w1, 140 <ctf_set_base+0x6c>
     138:	bl	0 <ctf_strptr>
     13c:	str	x0, [x19, #520]
     140:	ldr	w1, [x20, #8]
     144:	cbz	w1, 154 <ctf_set_base+0x80>
     148:	mov	x0, x19
     14c:	bl	0 <ctf_strptr>
     150:	str	x0, [x19, #528]
     154:	ldr	w1, [x20, #12]
     158:	cbz	w1, 168 <ctf_set_base+0x94>
     15c:	mov	x0, x19
     160:	bl	0 <ctf_strptr>
     164:	str	x0, [x19, #496]
     168:	ldr	x1, [x19, #496]
     16c:	cbz	x1, 17c <ctf_set_base+0xa8>
     170:	adrp	x0, 0 <get_kind_v1>
     174:	add	x0, x0, #0x0
     178:	bl	0 <ctf_dprintf>
     17c:	ldr	x1, [x19, #528]
     180:	cbz	x1, 1a8 <ctf_set_base+0xd4>
     184:	ldr	x2, [x19, #520]
     188:	cbnz	x2, 194 <ctf_set_base+0xc0>
     18c:	adrp	x2, 0 <get_kind_v1>
     190:	add	x2, x2, #0x0
     194:	ldp	x19, x20, [sp, #16]
     198:	adrp	x0, 0 <get_kind_v1>
     19c:	ldp	x29, x30, [sp], #32
     1a0:	add	x0, x0, #0x0
     1a4:	b	0 <ctf_dprintf>
     1a8:	ldp	x19, x20, [sp, #16]
     1ac:	ldp	x29, x30, [sp], #32
     1b0:	ret

00000000000001b4 <get_vbytes_common.isra.0>:
     1b4:	and	w0, w0, #0xffff
     1b8:	cmp	w0, #0xe
     1bc:	b.hi	1f0 <get_vbytes_common.isra.0+0x3c>  // b.pmore
     1c0:	adrp	x2, 0 <get_kind_v1>
     1c4:	add	x2, x2, #0x0
     1c8:	ldrb	w2, [x2, w0, uxtw]
     1cc:	adr	x3, 1d8 <get_vbytes_common.isra.0+0x24>
     1d0:	add	x2, x3, w2, sxtb #2
     1d4:	br	x2
     1d8:	mov	x0, #0x8                   	// #8
     1dc:	ret
     1e0:	lsl	x0, x1, #3
     1e4:	ret
     1e8:	mov	x0, #0x0                   	// #0
     1ec:	ret
     1f0:	stp	x29, x30, [sp, #-16]!
     1f4:	mov	w1, w0
     1f8:	adrp	x0, 0 <get_kind_v1>
     1fc:	mov	x29, sp
     200:	add	x0, x0, #0x0
     204:	bl	0 <ctf_dprintf>
     208:	mov	x0, #0x3ef                 	// #1007
     20c:	ldp	x29, x30, [sp], #16
     210:	ret
     214:	mov	x0, #0x4                   	// #4
     218:	ret

000000000000021c <get_vbytes_v2>:
     21c:	and	w0, w0, #0xffff
     220:	mov	x3, x1
     224:	cmp	w0, #0x5
     228:	mov	x1, x2
     22c:	b.eq	26c <get_vbytes_v2+0x50>  // b.none
     230:	b.hi	240 <get_vbytes_v2+0x24>  // b.pmore
     234:	cmp	w0, #0x4
     238:	b.eq	27c <get_vbytes_v2+0x60>  // b.none
     23c:	b	1b4 <get_vbytes_common.isra.0>
     240:	sub	w2, w0, #0x6
     244:	and	w2, w2, #0xffff
     248:	cmp	w2, #0x1
     24c:	b.hi	23c <get_vbytes_v2+0x20>  // b.pmore
     250:	mov	x0, #0xc                   	// #12
     254:	mul	x2, x1, x0
     258:	lsl	x0, x1, #4
     25c:	mov	x1, #0x1fffffff            	// #536870911
     260:	cmp	x3, x1
     264:	csel	x0, x0, x2, gt
     268:	b	278 <get_vbytes_v2+0x5c>
     26c:	add	x0, x2, #0x1
     270:	and	x0, x0, #0xfffffffffffffffe
     274:	lsl	x0, x0, #2
     278:	ret
     27c:	mov	x0, #0xc                   	// #12
     280:	b	278 <get_vbytes_v2+0x5c>

0000000000000284 <get_vbytes_v1>:
     284:	and	w0, w0, #0xffff
     288:	mov	x3, x1
     28c:	cmp	w0, #0x5
     290:	mov	x1, x2
     294:	b.eq	2d0 <get_vbytes_v1+0x4c>  // b.none
     298:	b.hi	2a8 <get_vbytes_v1+0x24>  // b.pmore
     29c:	cmp	w0, #0x4
     2a0:	b.eq	2e0 <get_vbytes_v1+0x5c>  // b.none
     2a4:	b	1b4 <get_vbytes_common.isra.0>
     2a8:	sub	w2, w0, #0x6
     2ac:	and	w2, w2, #0xffff
     2b0:	cmp	w2, #0x1
     2b4:	b.hi	2a4 <get_vbytes_v1+0x20>  // b.pmore
     2b8:	lsl	x2, x1, #3
     2bc:	lsl	x0, x1, #4
     2c0:	mov	x1, #0x1fff                	// #8191
     2c4:	cmp	x3, x1
     2c8:	csel	x0, x0, x2, gt
     2cc:	b	2dc <get_vbytes_v1+0x58>
     2d0:	add	x0, x2, #0x1
     2d4:	and	x0, x0, #0xfffffffffffffffe
     2d8:	lsl	x0, x0, #1
     2dc:	ret
     2e0:	mov	x0, #0x8                   	// #8
     2e4:	b	2dc <get_vbytes_v1+0x58>

00000000000002e8 <init_types>:
     2e8:	sub	sp, sp, #0x2a0
     2ec:	mov	x2, #0x200                 	// #512
     2f0:	stp	x29, x30, [sp]
     2f4:	mov	x29, sp
     2f8:	stp	x27, x28, [sp, #80]
     2fc:	mov	x27, x0
     300:	stp	x21, x22, [sp, #32]
     304:	add	x22, sp, #0xa0
     308:	mov	x0, x22
     30c:	stp	x19, x20, [sp, #16]
     310:	mov	x20, x1
     314:	mov	w1, #0x0                   	// #0
     318:	stp	x23, x24, [sp, #48]
     31c:	stp	x25, x26, [sp, #64]
     320:	bl	0 <memset>
     324:	ldr	w0, [x27, #552]
     328:	ldr	w21, [x20, #8]
     32c:	tbz	w0, #1, 350 <init_types+0x68>
     330:	adrp	x3, 0 <get_kind_v1>
     334:	adrp	x1, 0 <get_kind_v1>
     338:	adrp	x0, 0 <get_kind_v1>
     33c:	add	x3, x3, #0x0
     340:	add	x1, x1, #0x0
     344:	add	x0, x0, #0x0
     348:	mov	w2, #0x29c                 	// #668
     34c:	bl	0 <__assert_fail>
     350:	ldr	w0, [x27, #560]
     354:	cmp	w0, #0x1
     358:	b.ne	370 <init_types+0x88>  // b.any
     35c:	ldrb	w0, [x20, #2]
     360:	cmp	w0, #0x1
     364:	b.eq	3f8 <init_types+0x110>  // b.none
     368:	cmp	w0, #0x2
     36c:	b.eq	85c <init_types+0x574>  // b.none
     370:	ldp	w19, w0, [x20, #40]
     374:	ldr	x23, [x27, #408]
     378:	add	x19, x23, x19
     37c:	add	x23, x23, x0
     380:	mov	x20, x19
     384:	cmp	x20, x23
     388:	b.cc	868 <init_types+0x580>  // b.lo, b.ul, b.last
     38c:	mov	x1, x27
     390:	cbz	w21, 938 <init_types+0x650>
     394:	adrp	x0, 0 <get_kind_v1>
     398:	add	x0, x0, #0x0
     39c:	bl	0 <ctf_dprintf>
     3a0:	ldr	w0, [x27, #552]
     3a4:	orr	w0, w0, #0x1
     3a8:	str	w0, [x27, #552]
     3ac:	ldr	x0, [sp, #208]
     3b0:	adrp	x22, 0 <ctf_hash_eq_string>
     3b4:	adrp	x20, 0 <ctf_hash_string>
     3b8:	add	x22, x22, #0x0
     3bc:	add	x20, x20, #0x0
     3c0:	mov	x2, x22
     3c4:	mov	x1, x20
     3c8:	bl	0 <ctf_hash_create>
     3cc:	str	x0, [x27, #152]
     3d0:	cbnz	x0, 948 <init_types+0x660>
     3d4:	mov	w0, #0xc                   	// #12
     3d8:	ldp	x29, x30, [sp]
     3dc:	ldp	x19, x20, [sp, #16]
     3e0:	ldp	x21, x22, [sp, #32]
     3e4:	ldp	x23, x24, [sp, #48]
     3e8:	ldp	x25, x26, [sp, #64]
     3ec:	ldp	x27, x28, [sp, #80]
     3f0:	add	sp, sp, #0x2a0
     3f4:	ret
     3f8:	ldp	w28, w0, [x20, #40]
     3fc:	mov	x24, #0x0                   	// #0
     400:	ldr	x19, [x27, #408]
     404:	mov	x25, #0xc                   	// #12
     408:	add	x0, x19, x0
     40c:	add	x28, x19, x28
     410:	mov	x26, x28
     414:	str	x0, [sp, #104]
     418:	ldr	x0, [x27, #400]
     41c:	mov	w19, #0xffff                	// #65535
     420:	str	x0, [sp, #112]
     424:	ldr	x0, [sp, #104]
     428:	cmp	x26, x0
     42c:	b.cc	4cc <init_types+0x1e4>  // b.lo, b.ul, b.last
     430:	ldr	x26, [x27, #416]
     434:	add	x26, x24, x26
     438:	mov	x0, x26
     43c:	bl	0 <malloc>
     440:	ldr	w19, [x20, #40]
     444:	mov	x23, x0
     448:	ldr	x1, [x27, #408]
     44c:	mov	w5, w19
     450:	cbz	x0, 85c <init_types+0x574>
     454:	mov	x2, x5
     458:	str	x1, [sp, #96]
     45c:	str	x5, [sp, #120]
     460:	bl	0 <memcpy>
     464:	ldp	w25, w2, [x20, #44]
     468:	ldr	x1, [sp, #96]
     46c:	add	x0, x24, w25, uxtw
     470:	add	x0, x23, x0
     474:	add	x1, x1, w25, uxtw
     478:	bl	0 <memcpy>
     47c:	ldr	x5, [sp, #120]
     480:	sub	w2, w25, w19
     484:	add	x2, x2, x24
     488:	mov	w1, #0x0                   	// #0
     48c:	add	w24, w25, w24
     490:	add	x0, x23, x5
     494:	bl	0 <memset>
     498:	str	w24, [x20, #44]
     49c:	str	x26, [x27, #416]
     4a0:	cmp	w24, w19
     4a4:	b.cs	560 <init_types+0x278>  // b.hs, b.nlast
     4a8:	adrp	x3, 0 <get_kind_v1>
     4ac:	add	x3, x3, #0x0
     4b0:	adrp	x1, 0 <get_kind_v1>
     4b4:	adrp	x0, 0 <get_kind_v1>
     4b8:	add	x3, x3, #0xb
     4bc:	add	x1, x1, #0x0
     4c0:	add	x0, x0, #0x0
     4c4:	mov	w2, #0x1d0                 	// #464
     4c8:	b	34c <init_types+0x64>
     4cc:	ldrh	w2, [x26, #4]
     4d0:	ldrh	w23, [x26, #6]
     4d4:	ldp	w0, w1, [x26, #8]
     4d8:	lsr	w7, w2, #11
     4dc:	cmp	w23, w19
     4e0:	and	x2, x2, #0x3ff
     4e4:	b.ne	554 <init_types+0x26c>  // b.any
     4e8:	mov	w23, w1
     4ec:	mov	x4, #0x10                  	// #16
     4f0:	orr	x23, x23, x0, lsl #32
     4f4:	mov	x1, x23
     4f8:	mov	w0, w7
     4fc:	str	w7, [sp, #120]
     500:	stp	x2, x4, [sp, #128]
     504:	bl	284 <get_vbytes_v1>
     508:	ldr	w7, [sp, #120]
     50c:	ldr	x2, [sp, #128]
     510:	mov	x3, x0
     514:	mov	x1, x23
     518:	mov	w0, w7
     51c:	str	x3, [sp, #96]
     520:	bl	21c <get_vbytes_v2>
     524:	ldr	x3, [sp, #96]
     528:	cmp	x3, #0x0
     52c:	ccmp	x23, #0x0, #0x1, ge  // ge = tcont
     530:	b.lt	85c <init_types+0x574>  // b.tstop
     534:	ldr	x4, [sp, #136]
     538:	sub	x0, x0, x3
     53c:	sub	x1, x25, x4
     540:	add	x24, x1, x24
     544:	add	x24, x0, x24
     548:	add	x0, x4, x3
     54c:	add	x26, x26, x0
     550:	b	424 <init_types+0x13c>
     554:	and	x23, x23, #0xffff
     558:	mov	x4, #0x8                   	// #8
     55c:	b	4f4 <init_types+0x20c>
     560:	stp	x23, x23, [x27, #392]
     564:	mov	x2, x23
     568:	mov	x0, x27
     56c:	str	x23, [x27, #408]
     570:	mov	x1, x20
     574:	adrp	x23, 0 <get_kind_v1>
     578:	bl	d4 <ctf_set_base>
     57c:	ldr	x3, [x27, #408]
     580:	ldr	w0, [x20, #40]
     584:	add	x26, x3, x0
     588:	add	x0, x23, #0x0
     58c:	str	x0, [sp, #120]
     590:	ldr	x0, [sp, #104]
     594:	cmp	x28, x0
     598:	b.cc	5d4 <init_types+0x2ec>  // b.lo, b.ul, b.last
     59c:	ldr	x0, [x27, #408]
     5a0:	sub	x3, x26, x0
     5a4:	ldr	w0, [x20, #44]
     5a8:	cmp	x3, x0
     5ac:	adrp	x3, 0 <get_kind_v1>
     5b0:	add	x3, x3, #0x0
     5b4:	b.eq	840 <init_types+0x558>  // b.none
     5b8:	adrp	x1, 0 <get_kind_v1>
     5bc:	adrp	x0, 0 <get_kind_v1>
     5c0:	add	x3, x3, #0xb
     5c4:	add	x1, x1, #0x0
     5c8:	add	x0, x0, #0x0
     5cc:	mov	w2, #0x265                 	// #613
     5d0:	b	34c <init_types+0x64>
     5d4:	ldrh	w2, [x28, #4]
     5d8:	ldrh	w0, [x28, #6]
     5dc:	and	w9, w2, #0x400
     5e0:	and	w8, w2, #0x3ff
     5e4:	lsr	w19, w2, #11
     5e8:	and	x25, x2, #0x3ff
     5ec:	ldp	w1, w6, [x28, #8]
     5f0:	mov	w2, #0xffff                	// #65535
     5f4:	cmp	w0, w2
     5f8:	b.ne	668 <init_types+0x380>  // b.any
     5fc:	mov	w6, w6
     600:	mov	x0, #0x10                  	// #16
     604:	orr	x24, x6, x1, lsl #32
     608:	mov	x1, x24
     60c:	mov	x2, x25
     610:	str	x0, [sp, #96]
     614:	mov	w0, w19
     618:	str	w8, [sp, #128]
     61c:	str	w9, [sp, #136]
     620:	bl	284 <get_vbytes_v1>
     624:	ldr	w9, [sp, #136]
     628:	mov	x23, x0
     62c:	ldr	w8, [sp, #128]
     630:	cmp	w9, #0x0
     634:	ldr	w0, [x28]
     638:	cset	w1, ne  // ne = any
     63c:	cmp	w19, #0xd
     640:	lsl	w1, w1, #25
     644:	orr	w1, w1, w19, lsl #26
     648:	orr	w1, w1, w8
     64c:	stp	w0, w1, [x26]
     650:	b.hi	67c <init_types+0x394>  // b.pmore
     654:	ldr	x0, [sp, #120]
     658:	ldrb	w0, [x0, w19, uxtw]
     65c:	adr	x1, 668 <init_types+0x380>
     660:	add	x0, x1, w0, sxtb #2
     664:	br	x0
     668:	and	x24, x0, #0xffff
     66c:	mov	x0, #0x8                   	// #8
     670:	b	608 <init_types+0x320>
     674:	ldrh	w0, [x28, #6]
     678:	str	w0, [x26, #8]
     67c:	ldp	w1, w8, [x26, #8]
     680:	ldr	w0, [x26, #16]
     684:	cmn	w1, #0x1
     688:	b.ne	6fc <init_types+0x414>  // b.any
     68c:	mov	w1, w0
     690:	mov	x9, #0x14                  	// #20
     694:	orr	x1, x1, x8, lsl #32
     698:	mov	x2, x25
     69c:	mov	w0, w19
     6a0:	stp	x1, x9, [sp, #128]
     6a4:	bl	21c <get_vbytes_v2>
     6a8:	mov	x8, x0
     6ac:	ldp	x1, x9, [sp, #128]
     6b0:	cmp	x24, x1
     6b4:	b.eq	708 <init_types+0x420>  // b.none
     6b8:	adrp	x3, 0 <get_kind_v1>
     6bc:	add	x3, x3, #0x0
     6c0:	adrp	x1, 0 <get_kind_v1>
     6c4:	adrp	x0, 0 <get_kind_v1>
     6c8:	add	x3, x3, #0xb
     6cc:	add	x1, x1, #0x0
     6d0:	add	x0, x0, #0x0
     6d4:	mov	w2, #0x210                 	// #528
     6d8:	b	34c <init_types+0x64>
     6dc:	mov	x0, #0xfffffffe            	// #4294967294
     6e0:	cmp	x24, x0
     6e4:	b.hi	6f0 <init_types+0x408>  // b.pmore
     6e8:	str	w24, [x26, #8]
     6ec:	b	67c <init_types+0x394>
     6f0:	lsr	x0, x24, #32
     6f4:	stp	w0, w24, [x26, #12]
     6f8:	b	67c <init_types+0x394>
     6fc:	mov	w1, w1
     700:	mov	x9, #0xc                   	// #12
     704:	b	698 <init_types+0x3b0>
     708:	ldr	x0, [sp, #96]
     70c:	add	x26, x26, x9
     710:	mov	x9, x26
     714:	cmp	w19, #0x5
     718:	add	x28, x28, x0
     71c:	mov	x0, x28
     720:	b.eq	81c <init_types+0x534>  // b.none
     724:	b.hi	75c <init_types+0x474>  // b.pmore
     728:	cmp	w19, #0x4
     72c:	b.eq	7bc <init_types+0x4d4>  // b.none
     730:	cmp	x23, x8
     734:	b.eq	824 <init_types+0x53c>  // b.none
     738:	adrp	x3, 0 <get_kind_v1>
     73c:	add	x3, x3, #0x0
     740:	adrp	x1, 0 <get_kind_v1>
     744:	adrp	x0, 0 <get_kind_v1>
     748:	add	x3, x3, #0xb
     74c:	add	x1, x1, #0x0
     750:	add	x0, x0, #0x0
     754:	mov	w2, #0x25c                 	// #604
     758:	b	34c <init_types+0x64>
     75c:	sub	w5, w19, #0x6
     760:	and	w5, w5, #0xffff
     764:	cmp	w5, #0x1
     768:	b.hi	730 <init_types+0x448>  // b.pmore
     76c:	mov	x1, x28
     770:	sub	x13, x26, x28
     774:	mov	x14, #0x1fffffff            	// #536870911
     778:	add	x10, x1, x13
     77c:	cbz	x25, 7d4 <init_types+0x4ec>
     780:	mov	x2, #0x1fff                	// #8191
     784:	cmp	x24, x2
     788:	b.gt	7e0 <init_types+0x4f8>
     78c:	ldrh	w5, [x0, #6]
     790:	ldrh	w11, [x0, #4]
     794:	ldr	w12, [x0]
     798:	cmp	x24, x14
     79c:	b.gt	7f4 <init_types+0x50c>
     7a0:	stp	w12, w5, [x9]
     7a4:	str	w11, [x9, #8]
     7a8:	sub	x25, x25, #0x1
     7ac:	add	x0, x0, #0x8
     7b0:	add	x1, x1, #0x10
     7b4:	add	x9, x9, #0xc
     7b8:	b	778 <init_types+0x490>
     7bc:	ldrh	w0, [x28]
     7c0:	str	w0, [x26]
     7c4:	ldrh	w0, [x28, #2]
     7c8:	str	w0, [x26, #4]
     7cc:	ldr	w0, [x28, #4]
     7d0:	str	w0, [x26, #8]
     7d4:	add	x28, x23, x28
     7d8:	add	x26, x8, x26
     7dc:	b	590 <init_types+0x2a8>
     7e0:	ldp	w5, w11, [x1, #8]
     7e4:	ldr	w12, [x1]
     7e8:	orr	x5, x11, x5, lsl #32
     7ec:	ldrh	w11, [x1, #4]
     7f0:	b	798 <init_types+0x4b0>
     7f4:	str	w12, [x10]
     7f8:	stp	w11, w5, [x10, #8]
     7fc:	lsr	x11, x5, #32
     800:	str	w11, [x10, #4]
     804:	b	7a8 <init_types+0x4c0>
     808:	ldrh	w5, [x0], #2
     80c:	sub	x25, x25, #0x1
     810:	str	w5, [x1], #4
     814:	cbnz	x25, 808 <init_types+0x520>
     818:	b	730 <init_types+0x448>
     81c:	mov	x1, x26
     820:	b	814 <init_types+0x52c>
     824:	mov	x2, x23
     828:	mov	x1, x28
     82c:	mov	x0, x26
     830:	str	x8, [sp, #96]
     834:	bl	0 <memcpy>
     838:	ldr	x8, [sp, #96]
     83c:	b	7d4 <init_types+0x4ec>
     840:	mov	w0, #0x2                   	// #2
     844:	str	w0, [x27, #560]
     848:	strb	w0, [x20, #2]
     84c:	add	x3, x3, #0x70
     850:	ldr	x0, [sp, #112]
     854:	str	x3, [x27]
     858:	bl	0 <free>
     85c:	mov	w0, #0x7fff                	// #32767
     860:	str	w0, [x27, #544]
     864:	b	370 <init_types+0x88>
     868:	ldr	x0, [x27]
     86c:	ldr	x1, [x0]
     870:	ldr	w0, [x20, #4]
     874:	blr	x1
     878:	and	w25, w0, #0xffff
     87c:	mov	w24, w0
     880:	ldr	x0, [x27]
     884:	ldr	x1, [x0, #16]
     888:	ldr	w0, [x20, #4]
     88c:	blr	x1
     890:	mov	w26, w0
     894:	ldr	x0, [x27]
     898:	add	x3, sp, #0x98
     89c:	add	x2, sp, #0x90
     8a0:	mov	x1, x20
     8a4:	ldr	x5, [x0, #24]
     8a8:	mov	x0, x27
     8ac:	blr	x5
     8b0:	ldr	x0, [x27]
     8b4:	mov	w2, w26
     8b8:	ldr	x1, [sp, #144]
     8bc:	ldr	x3, [x0, #32]
     8c0:	mov	w0, w25
     8c4:	blr	x3
     8c8:	tbz	x0, #63, 8d4 <init_types+0x5ec>
     8cc:	mov	w0, #0x3ef                 	// #1007
     8d0:	b	3d8 <init_types+0xf0>
     8d4:	cmp	w25, #0x9
     8d8:	b.ne	8f8 <init_types+0x610>  // b.any
     8dc:	ldr	w1, [x20, #8]
     8e0:	sub	w2, w1, #0x1
     8e4:	cmp	w2, #0x3d
     8e8:	b.ls	924 <init_types+0x63c>  // b.plast
     8ec:	ldr	x1, [sp, #208]
     8f0:	add	x1, x1, #0x1
     8f4:	str	x1, [sp, #208]
     8f8:	ldr	x1, [sp, #152]
     8fc:	ubfiz	x24, x24, #3, #16
     900:	add	x20, x20, x1
     904:	add	x20, x20, x0
     908:	ldr	x0, [x22, x24]
     90c:	add	x0, x0, #0x1
     910:	str	x0, [x22, x24]
     914:	ldr	x0, [x27, #480]
     918:	add	x0, x0, #0x1
     91c:	str	x0, [x27, #480]
     920:	b	384 <init_types+0x9c>
     924:	ubfiz	x1, x1, #3, #32
     928:	ldr	x2, [x22, x1]
     92c:	add	x2, x2, #0x1
     930:	str	x2, [x22, x1]
     934:	b	8f8 <init_types+0x610>
     938:	adrp	x0, 0 <get_kind_v1>
     93c:	add	x0, x0, #0x0
     940:	bl	0 <ctf_dprintf>
     944:	b	3ac <init_types+0xc4>
     948:	ldr	x0, [sp, #216]
     94c:	mov	x2, x22
     950:	mov	x1, x20
     954:	bl	0 <ctf_hash_create>
     958:	str	x0, [x27, #168]
     95c:	cbz	x0, 3d4 <init_types+0xec>
     960:	ldr	x0, [sp, #224]
     964:	mov	x2, x22
     968:	mov	x1, x20
     96c:	bl	0 <ctf_hash_create>
     970:	str	x0, [x27, #184]
     974:	cbz	x0, 3d4 <init_types+0xec>
     978:	ldr	x3, [sp, #200]
     97c:	mov	x2, x22
     980:	ldr	x0, [sp, #240]
     984:	ldr	x1, [sp, #176]
     988:	add	x3, x3, x0
     98c:	ldr	x0, [sp, #168]
     990:	add	x0, x0, x1
     994:	add	x3, x3, x0
     998:	ldr	x0, [sp, #184]
     99c:	ldr	x1, [sp, #248]
     9a0:	add	x0, x0, x1
     9a4:	add	x3, x3, x0
     9a8:	ldp	x0, x1, [sp, #256]
     9ac:	add	x0, x0, x1
     9b0:	mov	x1, x20
     9b4:	add	x0, x3, x0
     9b8:	bl	0 <ctf_hash_create>
     9bc:	str	x0, [x27, #200]
     9c0:	cbz	x0, 3d4 <init_types+0xec>
     9c4:	ldr	x22, [x27, #480]
     9c8:	add	x22, x22, #0x1
     9cc:	lsl	x25, x22, #2
     9d0:	mov	x0, x25
     9d4:	bl	0 <malloc>
     9d8:	mov	x20, x0
     9dc:	str	x20, [x27, #440]
     9e0:	str	x22, [x27, #456]
     9e4:	mov	x0, x25
     9e8:	bl	0 <malloc>
     9ec:	str	x0, [x27, #448]
     9f0:	mov	x22, x0
     9f4:	cbz	x20, 3d4 <init_types+0xec>
     9f8:	cbz	x0, 3d4 <init_types+0xec>
     9fc:	mov	x24, x20
     a00:	cmp	w21, #0x0
     a04:	cset	w0, ne  // ne = any
     a08:	mov	x2, x25
     a0c:	mov	w1, #0x0                   	// #0
     a10:	str	w0, [sp, #96]
     a14:	str	wzr, [x24], #4
     a18:	mov	x0, x20
     a1c:	mov	w26, #0x0                   	// #0
     a20:	mov	w20, #0x1                   	// #1
     a24:	bl	0 <memset>
     a28:	mov	x2, x25
     a2c:	mov	x0, x22
     a30:	mov	w1, #0x0                   	// #0
     a34:	bl	0 <memset>
     a38:	adrp	x0, 0 <get_kind_v1>
     a3c:	mov	w25, #0x0                   	// #0
     a40:	add	x0, x0, #0x0
     a44:	str	x0, [sp, #120]
     a48:	cmp	x19, x23
     a4c:	b.cc	ae4 <init_types+0x7fc>  // b.lo, b.ul, b.last
     a50:	ldr	x1, [x27, #480]
     a54:	adrp	x0, 0 <get_kind_v1>
     a58:	add	x0, x0, #0x0
     a5c:	mov	w21, #0x1                   	// #1
     a60:	bl	0 <ctf_dprintf>
     a64:	ldr	x0, [x27, #184]
     a68:	bl	0 <ctf_hash_size>
     a6c:	mov	w1, w0
     a70:	adrp	x0, 0 <get_kind_v1>
     a74:	add	x0, x0, #0x0
     a78:	bl	0 <ctf_dprintf>
     a7c:	ldr	x0, [x27, #152]
     a80:	bl	0 <ctf_hash_size>
     a84:	mov	w1, w0
     a88:	mov	w2, w26
     a8c:	adrp	x0, 0 <get_kind_v1>
     a90:	add	x0, x0, #0x0
     a94:	bl	0 <ctf_dprintf>
     a98:	ldr	x0, [x27, #168]
     a9c:	bl	0 <ctf_hash_size>
     aa0:	mov	w1, w0
     aa4:	mov	w2, w25
     aa8:	adrp	x0, 0 <get_kind_v1>
     aac:	add	x0, x0, #0x0
     ab0:	bl	0 <ctf_dprintf>
     ab4:	ldr	x0, [x27, #200]
     ab8:	bl	0 <ctf_hash_size>
     abc:	mov	w1, w0
     ac0:	adrp	x0, 0 <get_kind_v1>
     ac4:	add	x0, x0, #0x0
     ac8:	bl	0 <ctf_dprintf>
     acc:	ldr	x0, [x27, #480]
     ad0:	mov	w1, w21
     ad4:	cmp	x0, w21, uxtw
     ad8:	b.cs	d24 <init_types+0xa3c>  // b.hs, b.nlast
     adc:	mov	w0, #0x0                   	// #0
     ae0:	b	3d8 <init_types+0xf0>
     ae4:	ldr	x0, [x27]
     ae8:	ldr	x1, [x0]
     aec:	ldr	w0, [x19, #4]
     af0:	blr	x1
     af4:	mov	w22, w0
     af8:	ldr	x0, [x27]
     afc:	ldr	x1, [x0, #8]
     b00:	ldr	w0, [x19, #4]
     b04:	blr	x1
     b08:	str	w0, [sp, #104]
     b0c:	ldr	x0, [x27]
     b10:	ldr	x1, [x0, #16]
     b14:	ldr	w0, [x19, #4]
     b18:	blr	x1
     b1c:	mov	w5, w0
     b20:	ldr	x0, [x27]
     b24:	add	x3, sp, #0x98
     b28:	add	x2, sp, #0x90
     b2c:	mov	x1, x19
     b30:	str	w5, [sp, #112]
     b34:	ldr	x6, [x0, #24]
     b38:	mov	x0, x27
     b3c:	blr	x6
     b40:	ldr	w1, [x19]
     b44:	mov	x0, x27
     b48:	bl	0 <ctf_strptr>
     b4c:	mov	x28, x0
     b50:	ldr	x0, [x27]
     b54:	ldr	w5, [sp, #112]
     b58:	ldr	x1, [sp, #144]
     b5c:	mov	w2, w5
     b60:	ldr	x6, [x0, #32]
     b64:	mov	w0, w22
     b68:	blr	x6
     b6c:	str	x0, [sp, #112]
     b70:	and	w1, w22, #0xffff
     b74:	sub	w0, w1, #0x1
     b78:	cmp	w0, #0xd
     b7c:	b.hi	d14 <init_types+0xa2c>  // b.pmore
     b80:	ldr	x1, [sp, #120]
     b84:	ldrb	w0, [x1, w0, uxtw]
     b88:	adr	x1, b94 <init_types+0x8ac>
     b8c:	add	x0, x1, w0, sxtb #2
     b90:	br	x0
     b94:	ldr	x0, [x27, #200]
     b98:	mov	x2, x28
     b9c:	mov	x1, x27
     ba0:	bl	0 <ctf_hash_lookup_type>
     ba4:	cbz	x0, bb0 <init_types+0x8c8>
     ba8:	ldr	x0, [sp, #104]
     bac:	tbz	w0, #0, c0c <init_types+0x924>
     bb0:	ldr	x0, [x27, #200]
     bb4:	cbz	w21, c80 <init_types+0x998>
     bb8:	ldr	w2, [x27, #544]
     bbc:	add	w2, w2, #0x1
     bc0:	orr	w2, w2, w20
     bc4:	ldr	w3, [x19]
     bc8:	mov	x1, x27
     bcc:	bl	0 <ctf_hash_define_type>
     bd0:	cbz	w0, c0c <init_types+0x924>
     bd4:	b	3d8 <init_types+0xf0>
     bd8:	ldr	x0, [x27, #152]
     bdc:	cbz	w21, c30 <init_types+0x948>
     be0:	ldr	w2, [x27, #544]
     be4:	add	w2, w2, #0x1
     be8:	orr	w2, w2, w20
     bec:	ldr	w3, [x19]
     bf0:	mov	x1, x27
     bf4:	bl	0 <ctf_hash_define_type>
     bf8:	cbnz	w0, 3d8 <init_types+0xf0>
     bfc:	ldr	x0, [sp, #144]
     c00:	mov	x1, #0x1fffffff            	// #536870911
     c04:	cmp	x0, x1
     c08:	cinc	w26, w26, gt
     c0c:	ldr	x0, [x27, #408]
     c10:	add	w20, w20, #0x1
     c14:	sub	x0, x19, x0
     c18:	str	w0, [x24], #4
     c1c:	ldr	x0, [sp, #152]
     c20:	add	x19, x19, x0
     c24:	ldr	x0, [sp, #112]
     c28:	add	x19, x19, x0
     c2c:	b	a48 <init_types+0x760>
     c30:	mov	w2, w20
     c34:	b	bec <init_types+0x904>
     c38:	ldr	x0, [x27, #168]
     c3c:	cbz	w21, c70 <init_types+0x988>
     c40:	ldr	w2, [x27, #544]
     c44:	add	w2, w2, #0x1
     c48:	orr	w2, w2, w20
     c4c:	ldr	w3, [x19]
     c50:	mov	x1, x27
     c54:	bl	0 <ctf_hash_define_type>
     c58:	cbnz	w0, 3d8 <init_types+0xf0>
     c5c:	ldr	x0, [sp, #144]
     c60:	mov	x1, #0x1fffffff            	// #536870911
     c64:	cmp	x0, x1
     c68:	cinc	w25, w25, gt
     c6c:	b	c0c <init_types+0x924>
     c70:	mov	w2, w20
     c74:	b	c4c <init_types+0x964>
     c78:	ldr	x0, [x27, #184]
     c7c:	b	bb4 <init_types+0x8cc>
     c80:	mov	w2, w20
     c84:	b	bc4 <init_types+0x8dc>
     c88:	ldr	w1, [x19, #8]
     c8c:	mov	x0, x27
     c90:	bl	0 <ctf_name_table>
     c94:	mov	x22, x0
     c98:	ldr	x0, [x0]
     c9c:	mov	x2, x28
     ca0:	mov	x1, x27
     ca4:	bl	0 <ctf_hash_lookup_type>
     ca8:	cbnz	x0, c0c <init_types+0x924>
     cac:	ldr	x0, [x22]
     cb0:	cbz	w21, d0c <init_types+0xa24>
     cb4:	ldr	w2, [x27, #544]
     cb8:	add	w2, w2, #0x1
     cbc:	orr	w2, w2, w20
     cc0:	ldr	w3, [x19]
     cc4:	mov	x1, x27
     cc8:	bl	0 <ctf_hash_insert_type>
     ccc:	b	bd0 <init_types+0x8e8>
     cd0:	ldr	w0, [x19, #8]
     cd4:	ldr	w1, [x27, #544]
     cd8:	ldr	w3, [sp, #96]
     cdc:	cmp	w0, w1
     ce0:	cset	w2, hi  // hi = pmore
     ce4:	cmp	w2, w3
     ce8:	b.ne	d04 <init_types+0xa1c>  // b.any
     cec:	and	w0, w0, w1
     cf0:	ldr	x1, [x27, #480]
     cf4:	cmp	x0, x1
     cf8:	b.hi	d04 <init_types+0xa1c>  // b.pmore
     cfc:	ldr	x1, [x27, #448]
     d00:	str	w20, [x1, x0, lsl #2]
     d04:	ldr	x0, [x27, #200]
     d08:	b	cb0 <init_types+0x9c8>
     d0c:	mov	w2, w20
     d10:	b	cc0 <init_types+0x9d8>
     d14:	adrp	x0, 0 <get_kind_v1>
     d18:	add	x0, x0, #0x0
     d1c:	bl	0 <ctf_dprintf>
     d20:	b	8cc <init_types+0x5e4>
     d24:	ldr	x2, [x27, #448]
     d28:	lsl	x0, x1, #2
     d2c:	ldr	w20, [x2, x0]
     d30:	cbz	w20, db8 <init_types+0xad0>
     d34:	ldr	w2, [x27, #552]
     d38:	tbz	w2, #1, dc0 <init_types+0xad8>
     d3c:	tbz	w2, #0, d4c <init_types+0xa64>
     d40:	ldr	w1, [x27, #544]
     d44:	add	w1, w1, #0x1
     d48:	orr	w1, w1, w21
     d4c:	mov	x0, x27
     d50:	bl	0 <ctf_dtd_lookup>
     d54:	add	x19, x0, #0x18
     d58:	ldr	x0, [x27]
     d5c:	ldr	x1, [x0]
     d60:	ldr	w0, [x19, #4]
     d64:	blr	x1
     d68:	cmp	w0, #0xa
     d6c:	b.ne	db8 <init_types+0xad0>  // b.any
     d70:	ldr	w1, [x19]
     d74:	mov	x0, x27
     d78:	bl	0 <ctf_strptr>
     d7c:	ldrb	w0, [x0]
     d80:	cbnz	w0, db8 <init_types+0xad0>
     d84:	ldr	w0, [x19, #8]
     d88:	ldr	w1, [x27, #544]
     d8c:	ldr	w3, [sp, #96]
     d90:	cmp	w0, w1
     d94:	cset	w2, hi  // hi = pmore
     d98:	cmp	w2, w3
     d9c:	b.ne	db8 <init_types+0xad0>  // b.any
     da0:	and	w0, w0, w1
     da4:	ldr	x1, [x27, #480]
     da8:	cmp	x0, x1
     dac:	b.hi	db8 <init_types+0xad0>  // b.pmore
     db0:	ldr	x1, [x27, #448]
     db4:	str	w20, [x1, x0, lsl #2]
     db8:	add	w21, w21, #0x1
     dbc:	b	acc <init_types+0x7e4>
     dc0:	ldr	x1, [x27, #440]
     dc4:	ldr	x19, [x27, #408]
     dc8:	ldr	w0, [x1, x0]
     dcc:	add	x19, x19, x0
     dd0:	b	d58 <init_types+0xa70>

0000000000000dd4 <ctf_set_ctl_hashes>:
     dd4:	adrp	x1, 0 <get_kind_v1>
     dd8:	add	x1, x1, #0x0
     ddc:	str	x1, [x0, #216]
     de0:	mov	x1, #0x6                   	// #6
     de4:	str	x1, [x0, #224]
     de8:	add	x1, x0, #0x98
     dec:	str	x1, [x0, #232]
     df0:	adrp	x1, 0 <get_kind_v1>
     df4:	add	x1, x1, #0x0
     df8:	str	x1, [x0, #240]
     dfc:	mov	x1, #0x5                   	// #5
     e00:	str	x1, [x0, #248]
     e04:	add	x1, x0, #0xa8
     e08:	str	x1, [x0, #256]
     e0c:	adrp	x1, 0 <get_kind_v1>
     e10:	add	x1, x1, #0x0
     e14:	str	x1, [x0, #264]
     e18:	mov	x1, #0x4                   	// #4
     e1c:	str	x1, [x0, #272]
     e20:	add	x1, x0, #0xb8
     e24:	str	x1, [x0, #280]
     e28:	adrp	x1, 0 <get_kind_v1>
     e2c:	add	x1, x1, #0x0
     e30:	str	xzr, [x0, #296]
     e34:	add	x1, x1, #0xe8
     e38:	str	x1, [x0, #288]
     e3c:	add	x1, x0, #0xc8
     e40:	str	x1, [x0, #304]
     e44:	stp	xzr, xzr, [x0, #312]
     e48:	str	xzr, [x0, #328]
     e4c:	ret

0000000000000e50 <ctf_file_close>:
     e50:	cbz	x0, 1014 <ctf_file_close+0x1c4>
     e54:	stp	x29, x30, [sp, #-32]!
     e58:	mov	x1, x0
     e5c:	mov	x29, sp
     e60:	stp	x19, x20, [sp, #16]
     e64:	mov	x19, x0
     e68:	adrp	x0, 0 <get_kind_v1>
     e6c:	add	x0, x0, #0x0
     e70:	ldr	w2, [x19, #548]
     e74:	bl	0 <ctf_dprintf>
     e78:	ldr	w0, [x19, #548]
     e7c:	cmp	w0, #0x1
     e80:	b.ls	e98 <ctf_file_close+0x48>  // b.plast
     e84:	sub	w0, w0, #0x1
     e88:	str	w0, [x19, #548]
     e8c:	ldp	x19, x20, [sp, #16]
     e90:	ldp	x29, x30, [sp], #32
     e94:	ret
     e98:	ldr	x0, [x19, #504]
     e9c:	bl	0 <free>
     ea0:	ldr	x0, [x19, #536]
     ea4:	bl	0 <free>
     ea8:	ldr	x0, [x19, #512]
     eac:	bl	e50 <ctf_file_close>
     eb0:	ldr	x1, [x19, #584]
     eb4:	cbnz	x1, fb4 <ctf_file_close+0x164>
     eb8:	ldr	x0, [x19, #568]
     ebc:	bl	0 <ctf_dynhash_destroy>
     ec0:	ldr	w0, [x19, #552]
     ec4:	tbz	w0, #1, fc8 <ctf_file_close+0x178>
     ec8:	ldr	x0, [x19, #160]
     ecc:	bl	0 <ctf_dynhash_destroy>
     ed0:	ldr	x0, [x19, #176]
     ed4:	bl	0 <ctf_dynhash_destroy>
     ed8:	ldr	x0, [x19, #192]
     edc:	bl	0 <ctf_dynhash_destroy>
     ee0:	ldr	x0, [x19, #208]
     ee4:	bl	0 <ctf_dynhash_destroy>
     ee8:	ldr	x1, [x19, #608]
     eec:	cbnz	x1, fec <ctf_file_close+0x19c>
     ef0:	ldr	x0, [x19, #592]
     ef4:	adrp	x20, 0 <get_kind_v1>
     ef8:	add	x20, x20, #0x0
     efc:	bl	0 <ctf_dynhash_destroy>
     f00:	mov	x0, x19
     f04:	bl	0 <ctf_str_free_atoms>
     f08:	ldr	x0, [x19, #704]
     f0c:	bl	0 <free>
     f10:	ldr	x0, [x19, #24]
     f14:	add	x1, x20, #0xe8
     f18:	cmp	x0, x1
     f1c:	b.eq	f24 <ctf_file_close+0xd4>  // b.none
     f20:	bl	0 <free>
     f24:	ldr	x0, [x19, #56]
     f28:	add	x1, x20, #0xe8
     f2c:	cmp	x0, x1
     f30:	b.eq	f38 <ctf_file_close+0xe8>  // b.none
     f34:	bl	0 <free>
     f38:	ldr	x0, [x19, #88]
     f3c:	add	x20, x20, #0xe8
     f40:	cmp	x0, x20
     f44:	b.eq	1000 <ctf_file_close+0x1b0>  // b.none
     f48:	bl	0 <free>
     f4c:	ldr	x0, [x19, #400]
     f50:	bl	0 <free>
     f54:	ldr	x0, [x19, #128]
     f58:	bl	0 <ctf_dynhash_destroy>
     f5c:	ldr	x0, [x19, #648]
     f60:	bl	0 <ctf_dynhash_destroy>
     f64:	ldr	x0, [x19, #656]
     f68:	bl	0 <ctf_dynhash_destroy>
     f6c:	ldr	x0, [x19, #664]
     f70:	bl	0 <ctf_dynhash_destroy>
     f74:	ldr	x0, [x19, #672]
     f78:	bl	0 <ctf_dynhash_destroy>
     f7c:	ldr	x0, [x19, #696]
     f80:	bl	0 <ctf_dynhash_destroy>
     f84:	ldr	x0, [x19, #424]
     f88:	bl	0 <free>
     f8c:	ldr	x0, [x19, #440]
     f90:	bl	0 <free>
     f94:	ldr	x0, [x19, #448]
     f98:	bl	0 <free>
     f9c:	ldr	x0, [x19, #8]
     fa0:	bl	0 <free>
     fa4:	mov	x0, x19
     fa8:	ldp	x19, x20, [sp, #16]
     fac:	ldp	x29, x30, [sp], #32
     fb0:	b	0 <free>
     fb4:	ldr	x20, [x1, #8]
     fb8:	mov	x0, x19
     fbc:	bl	0 <ctf_dtd_delete>
     fc0:	mov	x1, x20
     fc4:	b	eb4 <ctf_file_close+0x64>
     fc8:	ldr	x0, [x19, #152]
     fcc:	bl	0 <ctf_hash_destroy>
     fd0:	ldr	x0, [x19, #168]
     fd4:	bl	0 <ctf_hash_destroy>
     fd8:	ldr	x0, [x19, #184]
     fdc:	bl	0 <ctf_hash_destroy>
     fe0:	ldr	x0, [x19, #200]
     fe4:	bl	0 <ctf_hash_destroy>
     fe8:	b	ee8 <ctf_file_close+0x98>
     fec:	ldr	x20, [x1, #8]
     ff0:	mov	x0, x19
     ff4:	bl	0 <ctf_dvd_delete>
     ff8:	mov	x1, x20
     ffc:	b	eec <ctf_file_close+0x9c>
    1000:	ldr	x0, [x19, #136]
    1004:	cbz	x0, f4c <ctf_file_close+0xfc>
    1008:	ldr	x1, [x19, #144]
    100c:	bl	0 <ctf_munmap>
    1010:	b	f4c <ctf_file_close+0xfc>
    1014:	ret

0000000000001018 <ctf_close>:
    1018:	b	0 <ctf_arc_close>

000000000000101c <ctf_get_arc>:
    101c:	ldr	x0, [x0, #640]
    1020:	ret

0000000000001024 <ctf_getdatasect>:
    1024:	ldp	x2, x3, [x0, #24]
    1028:	stp	x2, x3, [x8]
    102c:	ldp	x0, x1, [x0, #40]
    1030:	stp	x0, x1, [x8, #16]
    1034:	ret

0000000000001038 <ctf_parent_file>:
    1038:	ldr	x0, [x0, #512]
    103c:	ret

0000000000001040 <ctf_parent_name>:
    1040:	ldr	x0, [x0, #528]
    1044:	ret

0000000000001048 <ctf_parent_name_set>:
    1048:	stp	x29, x30, [sp, #-32]!
    104c:	mov	x29, sp
    1050:	stp	x19, x20, [sp, #16]
    1054:	mov	x19, x0
    1058:	mov	x20, x1
    105c:	ldr	x0, [x0, #536]
    1060:	cbz	x0, 1068 <ctf_parent_name_set+0x20>
    1064:	bl	0 <free>
    1068:	mov	x0, x20
    106c:	bl	0 <strdup>
    1070:	str	x0, [x19, #536]
    1074:	cbnz	x0, 1090 <ctf_parent_name_set+0x48>
    1078:	mov	x0, x19
    107c:	mov	w1, #0xc                   	// #12
    1080:	bl	0 <ctf_set_errno>
    1084:	ldp	x19, x20, [sp, #16]
    1088:	ldp	x29, x30, [sp], #32
    108c:	ret
    1090:	str	x0, [x19, #528]
    1094:	mov	w0, #0x0                   	// #0
    1098:	b	1084 <ctf_parent_name_set+0x3c>

000000000000109c <ctf_cuname>:
    109c:	ldr	x0, [x0, #496]
    10a0:	ret

00000000000010a4 <ctf_cuname_set>:
    10a4:	stp	x29, x30, [sp, #-32]!
    10a8:	mov	x29, sp
    10ac:	stp	x19, x20, [sp, #16]
    10b0:	mov	x19, x0
    10b4:	mov	x20, x1
    10b8:	ldr	x0, [x0, #504]
    10bc:	cbz	x0, 10c4 <ctf_cuname_set+0x20>
    10c0:	bl	0 <free>
    10c4:	mov	x0, x20
    10c8:	bl	0 <strdup>
    10cc:	str	x0, [x19, #504]
    10d0:	cbnz	x0, 10ec <ctf_cuname_set+0x48>
    10d4:	mov	x0, x19
    10d8:	mov	w1, #0xc                   	// #12
    10dc:	bl	0 <ctf_set_errno>
    10e0:	ldp	x19, x20, [sp, #16]
    10e4:	ldp	x29, x30, [sp], #32
    10e8:	ret
    10ec:	str	x0, [x19, #496]
    10f0:	mov	w0, #0x0                   	// #0
    10f4:	b	10e0 <ctf_cuname_set+0x3c>

00000000000010f8 <ctf_import>:
    10f8:	stp	x29, x30, [sp, #-32]!
    10fc:	cmp	x0, #0x0
    1100:	ccmp	x0, x1, #0x4, ne  // ne = any
    1104:	mov	x29, sp
    1108:	stp	x19, x20, [sp, #16]
    110c:	mov	x19, x0
    1110:	b.eq	1124 <ctf_import+0x2c>  // b.none
    1114:	mov	x20, x1
    1118:	cbz	x1, 1154 <ctf_import+0x5c>
    111c:	ldr	w1, [x1, #548]
    1120:	cbnz	w1, 113c <ctf_import+0x44>
    1124:	mov	x0, x19
    1128:	mov	w1, #0x16                  	// #22
    112c:	bl	0 <ctf_set_errno>
    1130:	ldp	x19, x20, [sp, #16]
    1134:	ldp	x29, x30, [sp], #32
    1138:	ret
    113c:	ldr	x1, [x0, #488]
    1140:	ldr	x2, [x20, #488]
    1144:	cmp	x2, x1
    1148:	b.eq	1154 <ctf_import+0x5c>  // b.none
    114c:	mov	w1, #0x3f4                 	// #1012
    1150:	b	112c <ctf_import+0x34>
    1154:	ldr	x0, [x19, #512]
    1158:	cbz	x0, 1170 <ctf_import+0x78>
    115c:	ldr	w1, [x0, #548]
    1160:	sub	w1, w1, #0x1
    1164:	str	w1, [x0, #548]
    1168:	bl	e50 <ctf_file_close>
    116c:	str	xzr, [x19, #512]
    1170:	cbz	x20, 1194 <ctf_import+0x9c>
    1174:	ldr	x0, [x19, #528]
    1178:	cbz	x0, 11a0 <ctf_import+0xa8>
    117c:	ldr	w0, [x19, #552]
    1180:	orr	w0, w0, #0x1
    1184:	str	w0, [x19, #552]
    1188:	ldr	w0, [x20, #548]
    118c:	add	w0, w0, #0x1
    1190:	str	w0, [x20, #548]
    1194:	mov	w0, #0x0                   	// #0
    1198:	str	x20, [x19, #512]
    119c:	b	1130 <ctf_import+0x38>
    11a0:	adrp	x1, 0 <get_kind_v1>
    11a4:	mov	x0, x19
    11a8:	add	x1, x1, #0x0
    11ac:	bl	1048 <ctf_parent_name_set>
    11b0:	tbz	w0, #31, 117c <ctf_import+0x84>
    11b4:	b	1130 <ctf_import+0x38>

00000000000011b8 <ctf_setmodel>:
    11b8:	adrp	x2, 0 <get_kind_v1>
    11bc:	add	x2, x2, #0x0
    11c0:	add	x2, x2, #0xf0
    11c4:	ldr	w3, [x2, #8]
    11c8:	cmp	w3, w1
    11cc:	b.ne	11dc <ctf_setmodel+0x24>  // b.any
    11d0:	str	x2, [x0, #488]
    11d4:	mov	w0, #0x0                   	// #0
    11d8:	ret
    11dc:	ldr	x3, [x2, #56]!
    11e0:	cbnz	x3, 11c4 <ctf_setmodel+0xc>
    11e4:	stp	x29, x30, [sp, #-16]!
    11e8:	mov	w1, #0x16                  	// #22
    11ec:	mov	x29, sp
    11f0:	bl	0 <ctf_set_errno>
    11f4:	ldp	x29, x30, [sp], #16
    11f8:	ret

00000000000011fc <ctf_bufopen_internal>:
    11fc:	stp	x29, x30, [sp, #-176]!
    1200:	mov	x29, sp
    1204:	stp	x19, x20, [sp, #16]
    1208:	mov	x19, x1
    120c:	mov	x20, x2
    1210:	stp	x21, x22, [sp, #32]
    1214:	mov	x22, x0
    1218:	stp	x23, x24, [sp, #48]
    121c:	mov	x24, x5
    1220:	stp	x25, x26, [sp, #64]
    1224:	stp	x27, x28, [sp, #80]
    1228:	mov	w27, w4
    122c:	str	x3, [sp, #104]
    1230:	bl	0 <libctf_init_debug>
    1234:	cbz	x22, 1248 <ctf_bufopen_internal+0x4c>
    1238:	cbz	x19, 12a0 <ctf_bufopen_internal+0xa4>
    123c:	ldr	x0, [sp, #104]
    1240:	orr	x0, x20, x0
    1244:	cbnz	x0, 1278 <ctf_bufopen_internal+0x7c>
    1248:	mov	w1, #0x16                  	// #22
    124c:	mov	x0, x24
    1250:	bl	0 <ctf_set_open_errno>
    1254:	mov	x28, x0
    1258:	mov	x0, x28
    125c:	ldp	x19, x20, [sp, #16]
    1260:	ldp	x21, x22, [sp, #32]
    1264:	ldp	x23, x24, [sp, #48]
    1268:	ldp	x25, x26, [sp, #64]
    126c:	ldp	x27, x28, [sp, #80]
    1270:	ldp	x29, x30, [sp], #176
    1274:	ret
    1278:	ldr	x0, [x19, #24]
    127c:	and	x0, x0, #0xfffffffffffffff7
    1280:	cmp	x0, #0x10
    1284:	b.eq	1290 <ctf_bufopen_internal+0x94>  // b.none
    1288:	mov	w1, #0x3ec                 	// #1004
    128c:	b	124c <ctf_bufopen_internal+0x50>
    1290:	ldr	x0, [x19, #8]
    1294:	cbnz	x0, 12a0 <ctf_bufopen_internal+0xa4>
    1298:	mov	w1, #0x3ed                 	// #1005
    129c:	b	124c <ctf_bufopen_internal+0x50>
    12a0:	cbz	x20, 12b4 <ctf_bufopen_internal+0xb8>
    12a4:	ldr	x0, [x20, #8]
    12a8:	cbnz	x0, 12b4 <ctf_bufopen_internal+0xb8>
    12ac:	mov	w1, #0x3ee                 	// #1006
    12b0:	b	124c <ctf_bufopen_internal+0x50>
    12b4:	ldr	x0, [x22, #16]
    12b8:	cmp	x0, #0x3
    12bc:	b.hi	12c8 <ctf_bufopen_internal+0xcc>  // b.pmore
    12c0:	mov	w1, #0x3f1                 	// #1009
    12c4:	b	124c <ctf_bufopen_internal+0x50>
    12c8:	ldr	x26, [x22, #8]
    12cc:	adrp	x0, 0 <get_kind_v1>
    12d0:	add	x0, x0, #0x0
    12d4:	mov	w23, #0x0                   	// #0
    12d8:	ldrh	w1, [x26]
    12dc:	ldrb	w2, [x26, #2]
    12e0:	bl	0 <ctf_dprintf>
    12e4:	ldrh	w0, [x26]
    12e8:	mov	w1, #0xdff2                	// #57330
    12ec:	cmp	w0, w1
    12f0:	b.eq	1318 <ctf_bufopen_internal+0x11c>  // b.none
    12f4:	mov	w1, #0xf2df                	// #62175
    12f8:	cmp	w0, w1
    12fc:	b.ne	12c0 <ctf_bufopen_internal+0xc4>  // b.any
    1300:	ldrb	w0, [x26, #2]
    1304:	cmp	w0, #0x4
    1308:	b.eq	1314 <ctf_bufopen_internal+0x118>  // b.none
    130c:	mov	w1, #0x3ea                 	// #1002
    1310:	b	124c <ctf_bufopen_internal+0x50>
    1314:	mov	w23, #0x1                   	// #1
    1318:	ldrb	w1, [x26, #2]
    131c:	sub	w0, w1, #0x1
    1320:	and	w0, w0, #0xff
    1324:	cmp	w0, #0x3
    1328:	b.hi	130c <ctf_bufopen_internal+0x110>  // b.pmore
    132c:	cbz	x19, 134c <ctf_bufopen_internal+0x150>
    1330:	cmp	w1, #0x2
    1334:	b.hi	134c <ctf_bufopen_internal+0x150>  // b.pmore
    1338:	adrp	x0, 0 <get_kind_v1>
    133c:	add	x0, x0, #0x0
    1340:	bl	0 <ctf_dprintf>
    1344:	mov	w1, #0x40a                 	// #1034
    1348:	b	124c <ctf_bufopen_internal+0x50>
    134c:	cmp	w1, #0x4
    1350:	mov	x0, #0x28                  	// #40
    1354:	mov	x21, #0x34                  	// #52
    1358:	csel	x21, x21, x0, eq  // eq = none
    135c:	ldr	x0, [x22, #16]
    1360:	cmp	x0, x21
    1364:	b.cc	12c0 <ctf_bufopen_internal+0xc4>  // b.lo, b.ul, b.last
    1368:	mov	x0, #0x2d8                 	// #728
    136c:	bl	0 <malloc>
    1370:	mov	x28, x0
    1374:	cbnz	x0, 1380 <ctf_bufopen_internal+0x184>
    1378:	mov	w1, #0xc                   	// #12
    137c:	b	124c <ctf_bufopen_internal+0x50>
    1380:	mov	x2, #0x2d8                 	// #728
    1384:	mov	w1, #0x0                   	// #0
    1388:	bl	0 <memset>
    138c:	cbz	w27, 1398 <ctf_bufopen_internal+0x19c>
    1390:	mov	w0, #0x2                   	// #2
    1394:	str	w0, [x28, #552]
    1398:	mov	x0, #0x34                  	// #52
    139c:	bl	0 <malloc>
    13a0:	str	x0, [x28, #8]
    13a4:	mov	x25, x0
    13a8:	cbnz	x0, 13b8 <ctf_bufopen_internal+0x1bc>
    13ac:	mov	x0, x28
    13b0:	bl	0 <free>
    13b4:	b	1378 <ctf_bufopen_internal+0x17c>
    13b8:	ldr	x1, [x22, #8]
    13bc:	mov	x2, x21
    13c0:	bl	0 <memcpy>
    13c4:	ldrb	w0, [x26, #2]
    13c8:	cmp	w0, #0x3
    13cc:	b.hi	1404 <ctf_bufopen_internal+0x208>  // b.pmore
    13d0:	ldr	w0, [x25, #36]
    13d4:	str	w0, [x25, #48]
    13d8:	ldr	w0, [x25, #24]
    13dc:	str	w0, [x25, #36]
    13e0:	ldur	x1, [x25, #28]
    13e4:	stp	w0, w0, [x25, #28]
    13e8:	ldr	w0, [x25, #20]
    13ec:	str	w0, [x25, #24]
    13f0:	ldr	w0, [x25, #16]
    13f4:	str	w0, [x25, #20]
    13f8:	ldr	w0, [x25, #12]
    13fc:	stp	wzr, w0, [x25, #12]
    1400:	str	x1, [x25, #40]
    1404:	cbz	w23, 1490 <ctf_bufopen_internal+0x294>
    1408:	ldrh	w2, [x25]
    140c:	ldp	w1, w0, [x25, #44]
    1410:	rev16	w2, w2
    1414:	strh	w2, [x25]
    1418:	ldr	w2, [x25, #4]
    141c:	rev	w1, w1
    1420:	rev	w0, w0
    1424:	stp	w1, w0, [x25, #44]
    1428:	rev	w2, w2
    142c:	str	w2, [x25, #4]
    1430:	ldr	w2, [x25, #8]
    1434:	rev	w2, w2
    1438:	str	w2, [x25, #8]
    143c:	ldr	w2, [x25, #12]
    1440:	rev	w2, w2
    1444:	str	w2, [x25, #12]
    1448:	ldr	w2, [x25, #20]
    144c:	rev	w2, w2
    1450:	str	w2, [x25, #20]
    1454:	ldr	w2, [x25, #24]
    1458:	rev	w2, w2
    145c:	str	w2, [x25, #24]
    1460:	ldr	w2, [x25, #28]
    1464:	rev	w2, w2
    1468:	str	w2, [x25, #28]
    146c:	ldr	w2, [x25, #32]
    1470:	rev	w2, w2
    1474:	str	w2, [x25, #32]
    1478:	ldr	w2, [x25, #36]
    147c:	rev	w2, w2
    1480:	str	w2, [x25, #36]
    1484:	ldr	w2, [x25, #40]
    1488:	rev	w2, w2
    148c:	str	w2, [x25, #40]
    1490:	ldrb	w0, [x25, #3]
    1494:	strb	w0, [x28, #16]
    1498:	ldp	w1, w0, [x25, #44]
    149c:	add	w1, w1, w0
    14a0:	str	x1, [x28, #416]
    14a4:	adrp	x0, 0 <get_kind_v1>
    14a8:	add	x0, x0, #0x0
    14ac:	bl	0 <ctf_dprintf>
    14b0:	ldr	x27, [x28, #416]
    14b4:	ldr	w0, [x25, #16]
    14b8:	cmp	x27, w0, uxtw
    14bc:	b.cc	1510 <ctf_bufopen_internal+0x314>  // b.lo, b.ul, b.last
    14c0:	ldr	w8, [x25, #20]
    14c4:	cmp	x27, w8, uxtw
    14c8:	b.cc	1510 <ctf_bufopen_internal+0x314>  // b.lo, b.ul, b.last
    14cc:	ldr	w3, [x25, #24]
    14d0:	orr	w1, w8, w3
    14d4:	cmp	x27, w3, uxtw
    14d8:	b.cc	1510 <ctf_bufopen_internal+0x314>  // b.lo, b.ul, b.last
    14dc:	ldr	w7, [x25, #28]
    14e0:	cmp	x27, w7, uxtw
    14e4:	b.cc	1510 <ctf_bufopen_internal+0x314>  // b.lo, b.ul, b.last
    14e8:	ldr	w5, [x25, #32]
    14ec:	orr	w10, w7, w5
    14f0:	cmp	x27, w5, uxtw
    14f4:	b.cc	1510 <ctf_bufopen_internal+0x314>  // b.lo, b.ul, b.last
    14f8:	ldr	w2, [x25, #40]
    14fc:	cmp	x27, w2, uxtw
    1500:	b.cc	1510 <ctf_bufopen_internal+0x314>  // b.lo, b.ul, b.last
    1504:	ldr	w9, [x25, #44]
    1508:	cmp	x27, w9, uxtw
    150c:	b.cs	1518 <ctf_bufopen_internal+0x31c>  // b.hs, b.nlast
    1510:	mov	w1, #0x3ef                 	// #1007
    1514:	b	124c <ctf_bufopen_internal+0x50>
    1518:	cmp	w0, w8
    151c:	b.hi	1510 <ctf_bufopen_internal+0x314>  // b.pmore
    1520:	cmp	w8, w3
    1524:	b.hi	1510 <ctf_bufopen_internal+0x314>  // b.pmore
    1528:	cmp	w3, w2
    152c:	b.hi	1510 <ctf_bufopen_internal+0x314>  // b.pmore
    1530:	cmp	w3, w7
    1534:	b.hi	1510 <ctf_bufopen_internal+0x314>  // b.pmore
    1538:	cmp	w7, w5
    153c:	b.hi	1510 <ctf_bufopen_internal+0x314>  // b.pmore
    1540:	ldr	w3, [x25, #36]
    1544:	cmp	w5, w3
    1548:	b.hi	1510 <ctf_bufopen_internal+0x314>  // b.pmore
    154c:	cmp	w2, w3
    1550:	b.cc	1510 <ctf_bufopen_internal+0x314>  // b.lo, b.ul, b.last
    1554:	cmp	w2, w9
    1558:	b.hi	1510 <ctf_bufopen_internal+0x314>  // b.pmore
    155c:	orr	w0, w0, w2
    1560:	orr	w1, w1, w10
    1564:	orr	w0, w0, w3
    1568:	and	w1, w1, #0x2
    156c:	and	w0, w0, #0x3
    1570:	orr	w0, w0, w1
    1574:	cbnz	w0, 1510 <ctf_bufopen_internal+0x314>
    1578:	ldrb	w26, [x25, #3]
    157c:	tbz	w26, #0, 160c <ctf_bufopen_internal+0x410>
    1580:	mov	x0, x27
    1584:	bl	0 <malloc>
    1588:	str	x0, [x28, #392]
    158c:	cbz	x0, 1c94 <ctf_bufopen_internal+0xa98>
    1590:	ldp	x2, x3, [x22, #8]
    1594:	stp	x0, x0, [x28, #400]
    1598:	and	w26, w26, #0xfffffffe
    159c:	add	x1, sp, #0x98
    15a0:	strb	w26, [x25, #3]
    15a4:	str	x27, [sp, #152]
    15a8:	sub	x3, x3, x21
    15ac:	add	x2, x2, x21
    15b0:	bl	0 <uncompress>
    15b4:	cbz	w0, 15e8 <ctf_bufopen_internal+0x3ec>
    15b8:	bl	0 <zError>
    15bc:	mov	x1, x0
    15c0:	adrp	x0, 0 <get_kind_v1>
    15c4:	add	x0, x0, #0x0
    15c8:	bl	0 <ctf_dprintf>
    15cc:	mov	w1, #0x3f7                 	// #1015
    15d0:	mov	x0, x24
    15d4:	bl	0 <ctf_set_open_errno>
    15d8:	mov	x0, x28
    15dc:	mov	x28, #0x0                   	// #0
    15e0:	bl	e50 <ctf_file_close>
    15e4:	b	1258 <ctf_bufopen_internal+0x5c>
    15e8:	ldr	x1, [sp, #152]
    15ec:	ldr	x2, [x28, #416]
    15f0:	cmp	x2, x1
    15f4:	b.eq	163c <ctf_bufopen_internal+0x440>  // b.none
    15f8:	adrp	x0, 0 <get_kind_v1>
    15fc:	add	x0, x0, #0x0
    1600:	bl	0 <ctf_dprintf>
    1604:	mov	w1, #0x3ef                 	// #1007
    1608:	b	15d0 <ctf_bufopen_internal+0x3d4>
    160c:	cbz	w23, 17c0 <ctf_bufopen_internal+0x5c4>
    1610:	mov	x0, x27
    1614:	bl	0 <malloc>
    1618:	str	x0, [x28, #392]
    161c:	mov	x26, x0
    1620:	cbz	x0, 1c94 <ctf_bufopen_internal+0xa98>
    1624:	ldr	x1, [x22, #8]
    1628:	str	x0, [x28, #400]
    162c:	mov	x2, x27
    1630:	add	x1, x1, x21
    1634:	bl	0 <memcpy>
    1638:	str	x26, [x28, #408]
    163c:	ldrb	w0, [x25, #2]
    1640:	adrp	x21, 0 <get_kind_v1>
    1644:	add	x21, x21, #0x0
    1648:	mov	w2, #0x28                  	// #40
    164c:	add	x1, x21, #0x20
    1650:	str	w0, [x28, #560]
    1654:	umaddl	x0, w0, w2, x1
    1658:	str	x0, [x28]
    165c:	mov	x0, x28
    1660:	bl	0 <ctf_str_create_atoms>
    1664:	mov	w0, #0x7fffffff            	// #2147483647
    1668:	str	w0, [x28, #544]
    166c:	ldp	x0, x1, [x22]
    1670:	stp	x0, x1, [x28, #24]
    1674:	ldp	x0, x1, [x22, #16]
    1678:	stp	x0, x1, [x28, #40]
    167c:	cbz	x19, 16a0 <ctf_bufopen_internal+0x4a4>
    1680:	ldp	x0, x1, [x19]
    1684:	stp	x0, x1, [x28, #56]
    1688:	ldp	x0, x1, [x19, #16]
    168c:	stp	x0, x1, [x28, #72]
    1690:	ldp	x0, x1, [x20]
    1694:	stp	x0, x1, [x28, #88]
    1698:	ldp	x0, x1, [x20, #16]
    169c:	stp	x0, x1, [x28, #104]
    16a0:	ldr	x0, [x28, #24]
    16a4:	cbnz	x0, 17d4 <ctf_bufopen_internal+0x5d8>
    16a8:	ldr	x0, [x28, #56]
    16ac:	cbnz	x0, 17e8 <ctf_bufopen_internal+0x5ec>
    16b0:	ldr	x0, [x28, #88]
    16b4:	cbnz	x0, 17f8 <ctf_bufopen_internal+0x5fc>
    16b8:	ldr	x0, [x28, #24]
    16bc:	cbnz	x0, 16c8 <ctf_bufopen_internal+0x4cc>
    16c0:	add	x0, x21, #0xe8
    16c4:	str	x0, [x28, #24]
    16c8:	ldr	x0, [x28, #56]
    16cc:	cbnz	x0, 16d8 <ctf_bufopen_internal+0x4dc>
    16d0:	add	x0, x21, #0xe8
    16d4:	str	x0, [x28, #56]
    16d8:	ldr	x0, [x28, #88]
    16dc:	cbnz	x0, 16e8 <ctf_bufopen_internal+0x4ec>
    16e0:	add	x0, x21, #0xe8
    16e4:	str	x0, [x28, #88]
    16e8:	cbz	x20, 16fc <ctf_bufopen_internal+0x500>
    16ec:	ldr	x0, [x20, #8]
    16f0:	str	x0, [x28, #352]
    16f4:	ldr	x0, [x20, #16]
    16f8:	str	x0, [x28, #360]
    16fc:	ldr	x0, [sp, #104]
    1700:	str	x0, [x28, #128]
    1704:	cbnz	w23, 1808 <ctf_bufopen_internal+0x60c>
    1708:	ldr	x2, [x28, #392]
    170c:	mov	x0, x28
    1710:	mov	x1, x25
    1714:	bl	d4 <ctf_set_base>
    1718:	ldr	w0, [x28, #552]
    171c:	tbnz	w0, #1, 1c88 <ctf_bufopen_internal+0xa8c>
    1720:	mov	x1, x25
    1724:	mov	x0, x28
    1728:	bl	2e8 <init_types>
    172c:	mov	w1, w0
    1730:	cbnz	w0, 15d0 <ctf_bufopen_internal+0x3d4>
    1734:	cbz	x19, 17a0 <ctf_bufopen_internal+0x5a4>
    1738:	ldp	x22, x0, [x19, #16]
    173c:	udiv	x22, x22, x0
    1740:	str	x22, [x28, #432]
    1744:	lsl	x22, x22, #2
    1748:	mov	x0, x22
    174c:	bl	0 <malloc>
    1750:	str	x0, [x28, #424]
    1754:	mov	x26, x0
    1758:	cbz	x0, 17e0 <ctf_bufopen_internal+0x5e4>
    175c:	add	x0, x0, x22
    1760:	str	x0, [sp, #112]
    1764:	ldp	w22, w23, [x25, #20]
    1768:	adrp	x0, 0 <get_kind_v1>
    176c:	ldr	x24, [x19, #8]
    1770:	add	x0, x0, #0x0
    1774:	adrp	x27, 0 <get_kind_v1>
    1778:	str	x0, [sp, #120]
    177c:	add	x0, x27, #0x0
    1780:	str	x0, [sp, #128]
    1784:	ldr	x0, [sp, #112]
    1788:	cmp	x0, x26
    178c:	b.hi	1b40 <ctf_bufopen_internal+0x944>  // b.pmore
    1790:	ldr	x1, [x28, #432]
    1794:	adrp	x0, 0 <get_kind_v1>
    1798:	add	x0, x0, #0x0
    179c:	bl	0 <ctf_dprintf>
    17a0:	mov	x0, x28
    17a4:	bl	dd4 <ctf_set_ctl_hashes>
    17a8:	cbz	x19, 17b8 <ctf_bufopen_internal+0x5bc>
    17ac:	ldr	x0, [x19, #24]
    17b0:	cmp	x0, #0x18
    17b4:	b.ne	1c7c <ctf_bufopen_internal+0xa80>  // b.any
    17b8:	mov	w1, #0x2                   	// #2
    17bc:	b	1c80 <ctf_bufopen_internal+0xa84>
    17c0:	ldr	x0, [x22, #8]
    17c4:	stp	x0, xzr, [x28, #392]
    17c8:	add	x21, x0, x21
    17cc:	str	x21, [x28, #408]
    17d0:	b	163c <ctf_bufopen_internal+0x440>
    17d4:	bl	0 <strdup>
    17d8:	str	x0, [x28, #24]
    17dc:	cbnz	x0, 16a8 <ctf_bufopen_internal+0x4ac>
    17e0:	mov	w1, #0xc                   	// #12
    17e4:	b	15d0 <ctf_bufopen_internal+0x3d4>
    17e8:	bl	0 <strdup>
    17ec:	str	x0, [x28, #56]
    17f0:	cbnz	x0, 16b0 <ctf_bufopen_internal+0x4b4>
    17f4:	b	17e0 <ctf_bufopen_internal+0x5e4>
    17f8:	bl	0 <strdup>
    17fc:	str	x0, [x28, #88]
    1800:	cbnz	x0, 16b8 <ctf_bufopen_internal+0x4bc>
    1804:	b	17e0 <ctf_bufopen_internal+0x5e4>
    1808:	ldp	w1, w0, [x25, #16]
    180c:	ldr	x5, [x28, #408]
    1810:	add	x2, x5, w1, uxtw
    1814:	sub	w1, w0, w1
    1818:	and	x1, x1, #0xfffffff8
    181c:	add	x1, x2, x1
    1820:	cmp	x2, x1
    1824:	b.ne	1930 <ctf_bufopen_internal+0x734>  // b.any
    1828:	ldr	w1, [x25, #24]
    182c:	sub	w1, w1, w0
    1830:	add	x0, x5, w0, uxtw
    1834:	bl	ac <flip_objts>
    1838:	ldp	w0, w1, [x25, #24]
    183c:	sub	w1, w1, w0
    1840:	add	x0, x5, w0, uxtw
    1844:	bl	ac <flip_objts>
    1848:	ldp	w0, w1, [x25, #28]
    184c:	sub	w1, w1, w0
    1850:	add	x0, x5, w0, uxtw
    1854:	bl	ac <flip_objts>
    1858:	ldp	w0, w1, [x25, #32]
    185c:	sub	w1, w1, w0
    1860:	add	x0, x5, w0, uxtw
    1864:	bl	ac <flip_objts>
    1868:	ldp	w0, w22, [x25, #36]
    186c:	add	x1, x5, w0, uxtw
    1870:	sub	w0, w22, w0
    1874:	and	x0, x0, #0xfffffff8
    1878:	add	x0, x1, x0
    187c:	cmp	x1, x0
    1880:	b.ne	1950 <ctf_bufopen_internal+0x754>  // b.any
    1884:	ldr	w26, [x25, #44]
    1888:	sub	w26, w26, w22
    188c:	add	x22, x5, w22, uxtw
    1890:	add	x26, x22, x26
    1894:	cmp	x22, x26
    1898:	b.cs	1708 <ctf_bufopen_internal+0x50c>  // b.hs, b.nlast
    189c:	ldp	w0, w23, [x22]
    18a0:	ldr	w27, [x22, #8]
    18a4:	rev	w23, w23
    18a8:	rev	w0, w0
    18ac:	rev	w4, w27
    18b0:	stp	w0, w23, [x22]
    18b4:	lsr	w7, w23, #26
    18b8:	str	w4, [x22, #8]
    18bc:	and	x23, x23, #0xffffff
    18c0:	mov	x27, x4
    18c4:	mov	x1, x4
    18c8:	mov	w0, w7
    18cc:	mov	x2, x23
    18d0:	str	w7, [sp, #104]
    18d4:	str	x4, [sp, #112]
    18d8:	bl	21c <get_vbytes_v2>
    18dc:	adrp	x1, 0 <get_kind_v1>
    18e0:	ldr	w7, [sp, #104]
    18e4:	add	x3, x22, #0xc
    18e8:	cmn	w27, #0x1
    18ec:	add	x6, x1, #0x0
    18f0:	mov	x5, #0x1fffffff            	// #536870911
    18f4:	ldr	x4, [sp, #112]
    18f8:	b.ne	1918 <ctf_bufopen_internal+0x71c>  // b.any
    18fc:	ldr	w1, [x22, #12]
    1900:	add	x3, x22, #0x14
    1904:	rev	w2, w1
    1908:	ldr	w1, [x22, #16]
    190c:	rev	w1, w1
    1910:	stp	w2, w1, [x22, #12]
    1914:	orr	x4, x1, x2, lsl #32
    1918:	cmp	w7, #0xe
    191c:	b.hi	1b1c <ctf_bufopen_internal+0x920>  // b.pmore
    1920:	ldrb	w1, [x6, w7, uxtw]
    1924:	adr	x2, 1930 <ctf_bufopen_internal+0x734>
    1928:	add	x1, x2, w1, sxtb #2
    192c:	br	x1
    1930:	ldr	w3, [x2]
    1934:	add	x2, x2, #0x8
    1938:	rev	w3, w3
    193c:	stur	w3, [x2, #-8]
    1940:	ldur	w3, [x2, #-4]
    1944:	rev	w3, w3
    1948:	stur	w3, [x2, #-4]
    194c:	b	1820 <ctf_bufopen_internal+0x624>
    1950:	ldr	w2, [x1]
    1954:	add	x1, x1, #0x8
    1958:	rev	w2, w2
    195c:	stur	w2, [x1, #-8]
    1960:	ldur	w2, [x1, #-4]
    1964:	rev	w2, w2
    1968:	stur	w2, [x1, #-4]
    196c:	b	187c <ctf_bufopen_internal+0x680>
    1970:	cbz	x0, 199c <ctf_bufopen_internal+0x7a0>
    1974:	adrp	x1, 0 <get_kind_v1>
    1978:	adrp	x0, 0 <get_kind_v1>
    197c:	add	x3, x21, #0x198
    1980:	add	x1, x1, #0x0
    1984:	add	x0, x0, #0x0
    1988:	mov	w2, #0x428                 	// #1064
    198c:	bl	0 <__assert_fail>
    1990:	ldr	w1, [x3]
    1994:	rev	w1, w1
    1998:	str	w1, [x3]
    199c:	add	x22, x3, x0
    19a0:	b	1894 <ctf_bufopen_internal+0x698>
    19a4:	ldr	w2, [x3, x1, lsl #2]
    19a8:	rev	w2, w2
    19ac:	str	w2, [x3, x1, lsl #2]
    19b0:	add	x1, x1, #0x1
    19b4:	cmp	x1, x23
    19b8:	b.ne	19a4 <ctf_bufopen_internal+0x7a8>  // b.any
    19bc:	b	199c <ctf_bufopen_internal+0x7a0>
    19c0:	mov	x1, #0x0                   	// #0
    19c4:	b	19b4 <ctf_bufopen_internal+0x7b8>
    19c8:	cmp	x0, #0xc
    19cc:	b.eq	19ec <ctf_bufopen_internal+0x7f0>  // b.none
    19d0:	adrp	x1, 0 <get_kind_v1>
    19d4:	adrp	x0, 0 <get_kind_v1>
    19d8:	add	x3, x21, #0x198
    19dc:	add	x1, x1, #0x0
    19e0:	add	x0, x0, #0x0
    19e4:	mov	w2, #0x448                 	// #1096
    19e8:	b	198c <ctf_bufopen_internal+0x790>
    19ec:	ldr	w1, [x3]
    19f0:	rev	w1, w1
    19f4:	str	w1, [x3]
    19f8:	ldr	w1, [x3, #4]
    19fc:	rev	w1, w1
    1a00:	str	w1, [x3, #4]
    1a04:	ldr	w1, [x3, #8]
    1a08:	rev	w1, w1
    1a0c:	str	w1, [x3, #8]
    1a10:	b	199c <ctf_bufopen_internal+0x7a0>
    1a14:	cmp	x0, #0x8
    1a18:	b.eq	1a38 <ctf_bufopen_internal+0x83c>  // b.none
    1a1c:	adrp	x1, 0 <get_kind_v1>
    1a20:	adrp	x0, 0 <get_kind_v1>
    1a24:	add	x3, x21, #0x198
    1a28:	add	x1, x1, #0x0
    1a2c:	add	x0, x0, #0x0
    1a30:	mov	w2, #0x456                 	// #1110
    1a34:	b	198c <ctf_bufopen_internal+0x790>
    1a38:	ldr	w1, [x3]
    1a3c:	rev	w1, w1
    1a40:	str	w1, [x3]
    1a44:	ldrh	w1, [x3, #4]
    1a48:	rev16	w1, w1
    1a4c:	strh	w1, [x3, #4]
    1a50:	ldrh	w1, [x3, #6]
    1a54:	rev16	w1, w1
    1a58:	strh	w1, [x3, #6]
    1a5c:	b	199c <ctf_bufopen_internal+0x7a0>
    1a60:	mov	x1, x23
    1a64:	mov	x2, x3
    1a68:	cmp	x4, x5
    1a6c:	b.ls	1ae4 <ctf_bufopen_internal+0x8e8>  // b.plast
    1a70:	add	x23, x3, x23, lsl #4
    1a74:	mov	x1, x3
    1a78:	cmp	x1, x23
    1a7c:	b.eq	199c <ctf_bufopen_internal+0x7a0>  // b.none
    1a80:	ldr	w7, [x1]
    1a84:	add	x1, x1, #0x10
    1a88:	rev	w7, w7
    1a8c:	stur	w7, [x1, #-16]
    1a90:	ldur	w7, [x1, #-12]
    1a94:	rev	w7, w7
    1a98:	stur	w7, [x1, #-12]
    1a9c:	ldur	w7, [x1, #-8]
    1aa0:	rev	w7, w7
    1aa4:	stur	w7, [x1, #-8]
    1aa8:	ldur	w7, [x1, #-4]
    1aac:	rev	w7, w7
    1ab0:	stur	w7, [x1, #-4]
    1ab4:	b	1a78 <ctf_bufopen_internal+0x87c>
    1ab8:	ldr	w7, [x2]
    1abc:	sub	x1, x1, #0x1
    1ac0:	add	x2, x2, #0xc
    1ac4:	rev	w7, w7
    1ac8:	stur	w7, [x2, #-12]
    1acc:	ldur	w7, [x2, #-8]
    1ad0:	rev	w7, w7
    1ad4:	stur	w7, [x2, #-8]
    1ad8:	ldur	w7, [x2, #-4]
    1adc:	rev	w7, w7
    1ae0:	stur	w7, [x2, #-4]
    1ae4:	cbnz	x1, 1ab8 <ctf_bufopen_internal+0x8bc>
    1ae8:	b	199c <ctf_bufopen_internal+0x7a0>
    1aec:	add	x23, x3, x23, lsl #3
    1af0:	mov	x1, x3
    1af4:	cmp	x1, x23
    1af8:	b.eq	199c <ctf_bufopen_internal+0x7a0>  // b.none
    1afc:	ldr	w2, [x1]
    1b00:	add	x1, x1, #0x8
    1b04:	rev	w2, w2
    1b08:	stur	w2, [x1, #-8]
    1b0c:	ldur	w2, [x1, #-4]
    1b10:	rev	w2, w2
    1b14:	stur	w2, [x1, #-4]
    1b18:	b	1af4 <ctf_bufopen_internal+0x8f8>
    1b1c:	mov	w1, w7
    1b20:	adrp	x0, 0 <get_kind_v1>
    1b24:	add	x0, x0, #0x0
    1b28:	bl	0 <ctf_dprintf>
    1b2c:	ldr	x2, [x28, #392]
    1b30:	mov	x1, x25
    1b34:	mov	x0, x28
    1b38:	bl	d4 <ctf_set_base>
    1b3c:	b	1604 <ctf_bufopen_internal+0x408>
    1b40:	ldr	x0, [x19, #24]
    1b44:	cmp	x0, #0x10
    1b48:	b.ne	1bb8 <ctf_bufopen_internal+0x9bc>  // b.any
    1b4c:	add	x1, sp, #0x98
    1b50:	mov	x0, x24
    1b54:	bl	0 <ctf_sym_to_elf64>
    1b58:	mov	x27, x0
    1b5c:	ldr	x3, [x20, #16]
    1b60:	ldr	w0, [x27]
    1b64:	mov	w1, w0
    1b68:	cmp	x3, w0, uxtw
    1b6c:	b.ls	1bc0 <ctf_bufopen_internal+0x9c4>  // b.plast
    1b70:	ldr	x3, [x20, #8]
    1b74:	add	x3, x3, x1
    1b78:	cbz	w0, 1bac <ctf_bufopen_internal+0x9b0>
    1b7c:	ldrh	w0, [x27, #6]
    1b80:	str	w0, [sp, #104]
    1b84:	cbz	w0, 1bac <ctf_bufopen_internal+0x9b0>
    1b88:	ldr	x1, [sp, #120]
    1b8c:	mov	x0, x3
    1b90:	str	x3, [sp, #136]
    1b94:	bl	0 <strcmp>
    1b98:	cbz	w0, 1bac <ctf_bufopen_internal+0x9b0>
    1b9c:	ldp	x1, x3, [sp, #128]
    1ba0:	mov	x0, x3
    1ba4:	bl	0 <strcmp>
    1ba8:	cbnz	w0, 1bc8 <ctf_bufopen_internal+0x9cc>
    1bac:	mov	w0, #0xffffffff            	// #-1
    1bb0:	str	w0, [x26]
    1bb4:	b	1c6c <ctf_bufopen_internal+0xa70>
    1bb8:	mov	x27, x24
    1bbc:	b	1b5c <ctf_bufopen_internal+0x960>
    1bc0:	add	x3, x21, #0xe8
    1bc4:	b	1b78 <ctf_bufopen_internal+0x97c>
    1bc8:	ldrb	w0, [x27, #4]
    1bcc:	and	w0, w0, #0xf
    1bd0:	cmp	w0, #0x1
    1bd4:	b.eq	1c40 <ctf_bufopen_internal+0xa44>  // b.none
    1bd8:	cmp	w0, #0x2
    1bdc:	b.ne	1bac <ctf_bufopen_internal+0x9b0>  // b.any
    1be0:	ldr	w0, [x25, #28]
    1be4:	cmp	w0, w23
    1be8:	b.ls	1bac <ctf_bufopen_internal+0x9b0>  // b.plast
    1bec:	ldr	x0, [x28, #408]
    1bf0:	str	w23, [x26]
    1bf4:	ldr	w1, [x0, w23, uxtw]
    1bf8:	ldr	x0, [x28]
    1bfc:	str	w1, [sp, #104]
    1c00:	ldr	x2, [x0, #16]
    1c04:	mov	w0, w1
    1c08:	blr	x2
    1c0c:	mov	w27, w0
    1c10:	ldr	x0, [x28]
    1c14:	ldr	w1, [sp, #104]
    1c18:	ldr	x2, [x0]
    1c1c:	mov	w0, w1
    1c20:	blr	x2
    1c24:	orr	w0, w27, w0
    1c28:	add	w2, w27, #0x2
    1c2c:	add	w1, w23, #0x4
    1c30:	cmp	w0, #0x0
    1c34:	add	w23, w23, w2, lsl #2
    1c38:	csel	w23, w23, w1, ne  // ne = any
    1c3c:	b	1c6c <ctf_bufopen_internal+0xa70>
    1c40:	ldr	w0, [x25, #24]
    1c44:	cmp	w0, w22
    1c48:	b.ls	1bac <ctf_bufopen_internal+0x9b0>  // b.plast
    1c4c:	ldr	w1, [sp, #104]
    1c50:	mov	w0, #0xfff1                	// #65521
    1c54:	cmp	w1, w0
    1c58:	b.ne	1c64 <ctf_bufopen_internal+0xa68>  // b.any
    1c5c:	ldr	x0, [x27, #8]
    1c60:	cbz	x0, 1bac <ctf_bufopen_internal+0x9b0>
    1c64:	str	w22, [x26]
    1c68:	add	w22, w22, #0x4
    1c6c:	ldr	x0, [x19, #24]
    1c70:	add	x26, x26, #0x4
    1c74:	add	x24, x24, x0
    1c78:	b	1784 <ctf_bufopen_internal+0x588>
    1c7c:	mov	w1, #0x1                   	// #1
    1c80:	mov	x0, x28
    1c84:	bl	11b8 <ctf_setmodel>
    1c88:	mov	w0, #0x1                   	// #1
    1c8c:	str	w0, [x28, #548]
    1c90:	b	1258 <ctf_bufopen_internal+0x5c>
    1c94:	mov	w1, #0x3f6                 	// #1014
    1c98:	b	15d0 <ctf_bufopen_internal+0x3d4>

0000000000001c9c <ctf_simple_open_internal>:
    1c9c:	stp	x29, x30, [sp, #-112]!
    1ca0:	mov	x9, x1
    1ca4:	mov	x8, x3
    1ca8:	mov	x29, sp
    1cac:	mov	x1, x2
    1cb0:	mov	x3, x7
    1cb4:	mov	x2, x5
    1cb8:	cbz	x0, 1cdc <ctf_simple_open_internal+0x40>
    1cbc:	adrp	x5, 0 <get_kind_v1>
    1cc0:	add	x5, x5, #0x0
    1cc4:	add	x5, x5, #0x1a3
    1cc8:	stp	x5, x0, [sp, #16]
    1ccc:	add	x0, sp, #0x10
    1cd0:	mov	x5, #0x1                   	// #1
    1cd4:	str	x9, [sp, #32]
    1cd8:	str	x5, [sp, #40]
    1cdc:	cbz	x1, 1cf8 <ctf_simple_open_internal+0x5c>
    1ce0:	adrp	x5, 0 <get_kind_v1>
    1ce4:	add	x5, x5, #0x0
    1ce8:	add	x5, x5, #0x1a3
    1cec:	stp	x5, x1, [sp, #48]
    1cf0:	add	x1, sp, #0x30
    1cf4:	stp	x8, x4, [sp, #64]
    1cf8:	cbz	x2, 1d1c <ctf_simple_open_internal+0x80>
    1cfc:	adrp	x4, 0 <get_kind_v1>
    1d00:	add	x4, x4, #0x0
    1d04:	add	x4, x4, #0x1a3
    1d08:	stp	x4, x2, [sp, #80]
    1d0c:	add	x2, sp, #0x50
    1d10:	mov	x4, #0x1                   	// #1
    1d14:	str	x6, [sp, #96]
    1d18:	str	x4, [sp, #104]
    1d1c:	ldr	w4, [sp, #112]
    1d20:	ldr	x5, [sp, #120]
    1d24:	bl	11fc <ctf_bufopen_internal>
    1d28:	ldp	x29, x30, [sp], #112
    1d2c:	ret

0000000000001d30 <ctf_simple_open>:
    1d30:	sub	sp, sp, #0x20
    1d34:	stp	x29, x30, [sp, #16]
    1d38:	add	x29, sp, #0x10
    1d3c:	str	wzr, [sp]
    1d40:	str	x7, [sp, #8]
    1d44:	mov	x7, #0x0                   	// #0
    1d48:	bl	1c9c <ctf_simple_open_internal>
    1d4c:	ldp	x29, x30, [sp, #16]
    1d50:	add	sp, sp, #0x20
    1d54:	ret

0000000000001d58 <ctf_bufopen>:
    1d58:	mov	x5, x3
    1d5c:	mov	w4, #0x0                   	// #0
    1d60:	mov	x3, #0x0                   	// #0
    1d64:	b	11fc <ctf_bufopen_internal>

0000000000001d68 <ctf_getmodel>:
    1d68:	ldr	x0, [x0, #488]
    1d6c:	ldr	w0, [x0, #8]
    1d70:	ret

0000000000001d74 <ctf_setspecific>:
    1d74:	str	x1, [x0, #720]
    1d78:	ret

0000000000001d7c <ctf_getspecific>:
    1d7c:	ldr	x0, [x0, #720]
    1d80:	ret

ctf-string.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_str_rollback_atom>:
   0:	ldr	x0, [x2, #8]
   4:	ldr	x1, [x1, #32]
   8:	cmp	x1, x0
   c:	cset	w0, hi  // hi = pmore
  10:	ret

0000000000000014 <ctf_str_purge_atom_refs>:
  14:	stp	x29, x30, [sp, #-48]!
  18:	mov	x29, sp
  1c:	stp	x19, x20, [sp, #16]
  20:	add	x19, x0, #0x8
  24:	ldr	x20, [x0, #16]
  28:	str	x21, [sp, #32]
  2c:	cbnz	x20, 40 <ctf_str_purge_atom_refs+0x2c>
  30:	ldp	x19, x20, [sp, #16]
  34:	ldr	x21, [sp, #32]
  38:	ldp	x29, x30, [sp], #48
  3c:	ret
  40:	mov	x1, x20
  44:	mov	x0, x19
  48:	ldr	x21, [x20, #8]
  4c:	bl	0 <ctf_list_delete>
  50:	mov	x0, x20
  54:	bl	0 <free>
  58:	mov	x20, x21
  5c:	b	2c <ctf_str_purge_atom_refs+0x18>

0000000000000060 <ctf_str_free_atom>:
  60:	stp	x29, x30, [sp, #-32]!
  64:	mov	x29, sp
  68:	str	x19, [sp, #16]
  6c:	mov	x19, x0
  70:	bl	14 <ctf_str_purge_atom_refs>
  74:	mov	x0, x19
  78:	ldr	x19, [sp, #16]
  7c:	ldp	x29, x30, [sp], #32
  80:	b	0 <free>

0000000000000084 <ctf_str_purge_one_atom_refs>:
  84:	mov	x0, x1
  88:	b	14 <ctf_str_purge_atom_refs>

000000000000008c <ctf_str_add_ref_internal>:
  8c:	stp	x29, x30, [sp, #-80]!
  90:	mov	x29, sp
  94:	stp	x19, x20, [sp, #16]
  98:	mov	x20, x0
  9c:	ldr	x0, [x0, #368]
  a0:	stp	x21, x22, [sp, #32]
  a4:	mov	x21, x1
  a8:	mov	w22, w2
  ac:	stp	x23, x24, [sp, #48]
  b0:	mov	w23, w3
  b4:	str	x25, [sp, #64]
  b8:	mov	x25, x4
  bc:	bl	0 <ctf_dynhash_lookup>
  c0:	mov	x19, x0
  c4:	cbz	w22, 148 <ctf_str_add_ref_internal+0xbc>
  c8:	mov	x0, #0x18                  	// #24
  cc:	bl	0 <malloc>
  d0:	mov	x1, x0
  d4:	mov	x24, x0
  d8:	cbz	x0, 130 <ctf_str_add_ref_internal+0xa4>
  dc:	str	x25, [x0, #16]
  e0:	cbz	x19, 150 <ctf_str_add_ref_internal+0xc4>
  e4:	add	x0, x19, #0x8
  e8:	bl	0 <ctf_list_append>
  ec:	ldr	x0, [x20, #376]
  f0:	add	x0, x0, #0x1
  f4:	str	x0, [x20, #376]
  f8:	mov	x0, x19
  fc:	ldp	x19, x20, [sp, #16]
 100:	ldp	x21, x22, [sp, #32]
 104:	ldp	x23, x24, [sp, #48]
 108:	ldr	x25, [sp, #64]
 10c:	ldp	x29, x30, [sp], #80
 110:	ret
 114:	mov	x25, #0x0                   	// #0
 118:	mov	x0, x19
 11c:	bl	0 <free>
 120:	mov	x0, x24
 124:	bl	0 <free>
 128:	mov	x0, x25
 12c:	bl	0 <free>
 130:	mov	x19, #0x0                   	// #0
 134:	b	f8 <ctf_str_add_ref_internal+0x6c>
 138:	ldr	x0, [x20, #368]
 13c:	mov	x1, x21
 140:	bl	0 <ctf_dynhash_remove>
 144:	b	118 <ctf_str_add_ref_internal+0x8c>
 148:	cbnz	x0, f8 <ctf_str_add_ref_internal+0x6c>
 14c:	mov	x24, #0x0                   	// #0
 150:	mov	x0, #0x28                  	// #40
 154:	bl	0 <malloc>
 158:	mov	x19, x0
 15c:	cbz	x0, 114 <ctf_str_add_ref_internal+0x88>
 160:	stp	xzr, xzr, [x0]
 164:	stp	xzr, xzr, [x0, #16]
 168:	mov	x0, x21
 16c:	str	xzr, [x19, #32]
 170:	bl	0 <strdup>
 174:	mov	x21, x0
 178:	mov	x25, x0
 17c:	cbz	x0, 114 <ctf_str_add_ref_internal+0x88>
 180:	mov	x1, x0
 184:	mov	x2, x19
 188:	ldr	x0, [x20, #368]
 18c:	bl	0 <ctf_dynhash_insert>
 190:	tbnz	w0, #31, 138 <ctf_str_add_ref_internal+0xac>
 194:	ldr	x0, [x20, #624]
 198:	str	x21, [x19]
 19c:	str	x0, [x19, #32]
 1a0:	cbz	w23, 1d8 <ctf_str_add_ref_internal+0x14c>
 1a4:	ldr	x0, [x20, #120]
 1a8:	mov	x2, x21
 1ac:	ldr	w1, [x20, #384]
 1b0:	str	w1, [x19, #24]
 1b4:	mov	w1, w1
 1b8:	bl	0 <ctf_dynhash_insert>
 1bc:	tbnz	w0, #31, 138 <ctf_str_add_ref_internal+0xac>
 1c0:	ldr	x0, [x19]
 1c4:	bl	0 <strlen>
 1c8:	ldr	w1, [x20, #384]
 1cc:	add	w1, w1, #0x1
 1d0:	add	w1, w1, w0
 1d4:	str	w1, [x20, #384]
 1d8:	cbz	w22, f8 <ctf_str_add_ref_internal+0x6c>
 1dc:	mov	x1, x24
 1e0:	b	e4 <ctf_str_add_ref_internal+0x58>

00000000000001e4 <ctf_str_sort_strtab>:
 1e4:	ldr	x0, [x0]
 1e8:	ldr	x1, [x1]
 1ec:	ldr	x0, [x0]
 1f0:	ldr	x1, [x1]
 1f4:	b	0 <strcmp>

00000000000001f8 <ctf_str_populate_sorttab>:
 1f8:	ldr	x0, [x2, #32]
 1fc:	cmp	x0, x1
 200:	b.eq	240 <ctf_str_populate_sorttab+0x48>  // b.none
 204:	stp	x29, x30, [sp, #-32]!
 208:	add	x0, x1, #0x8
 20c:	mov	x29, sp
 210:	stp	x19, x20, [sp, #16]
 214:	mov	x20, x1
 218:	mov	x19, x2
 21c:	bl	0 <ctf_list_empty_p>
 220:	cbnz	w0, 234 <ctf_str_populate_sorttab+0x3c>
 224:	ldp	x1, x0, [x19, #16]
 228:	add	x2, x0, #0x1
 22c:	str	x2, [x19, #24]
 230:	str	x20, [x1, x0, lsl #3]
 234:	ldp	x19, x20, [sp, #16]
 238:	ldp	x29, x30, [sp], #32
 23c:	ret
 240:	ret

0000000000000244 <ctf_str_count_strtab>:
 244:	stp	x29, x30, [sp, #-48]!
 248:	mov	x29, sp
 24c:	ldr	x0, [x2, #32]
 250:	stp	x19, x20, [sp, #16]
 254:	mov	x19, x2
 258:	str	x21, [sp, #32]
 25c:	cmp	x0, x1
 260:	b.ne	280 <ctf_str_count_strtab+0x3c>  // b.any
 264:	ldr	x0, [x19, #8]
 268:	add	x0, x0, #0x1
 26c:	str	x0, [x19, #8]
 270:	ldp	x19, x20, [sp, #16]
 274:	ldr	x21, [sp, #32]
 278:	ldp	x29, x30, [sp], #48
 27c:	ret
 280:	mov	x20, x1
 284:	add	x0, x1, #0x8
 288:	bl	0 <ctf_list_empty_p>
 28c:	cbnz	w0, 270 <ctf_str_count_strtab+0x2c>
 290:	ldr	w0, [x20, #28]
 294:	cbnz	w0, 264 <ctf_str_count_strtab+0x20>
 298:	ldr	x0, [x20]
 29c:	ldr	x21, [x19]
 2a0:	bl	0 <strlen>
 2a4:	ldr	x1, [x21, #8]
 2a8:	add	x1, x1, #0x1
 2ac:	add	x1, x1, x0
 2b0:	str	x1, [x21, #8]
 2b4:	b	264 <ctf_str_count_strtab+0x20>

00000000000002b8 <ctf_strraw_explicit>:
 2b8:	cmp	w1, #0x0
 2bc:	mov	x4, x0
 2c0:	mov	w3, w1
 2c4:	lsr	w0, w1, #31
 2c8:	ccmp	x2, #0x0, #0x4, ge  // ge = tcont
 2cc:	b.ne	338 <ctf_strraw_explicit+0x80>  // b.any
 2d0:	mov	w2, w0
 2d4:	add	x2, x2, #0x15
 2d8:	add	x2, x4, x2, lsl #4
 2dc:	cbz	w0, 2f0 <ctf_strraw_explicit+0x38>
 2e0:	ldr	x0, [x4, #128]
 2e4:	cbz	x0, 2f0 <ctf_strraw_explicit+0x38>
 2e8:	mov	w1, w3
 2ec:	b	0 <ctf_dynhash_lookup>
 2f0:	tbnz	w3, #31, 318 <ctf_strraw_explicit+0x60>
 2f4:	ldr	x0, [x2, #8]
 2f8:	mov	w1, w3
 2fc:	cmp	x0, w3, uxtw
 300:	b.hi	318 <ctf_strraw_explicit+0x60>  // b.pmore
 304:	ldr	w0, [x4, #384]
 308:	cmp	w0, w3
 30c:	b.ls	318 <ctf_strraw_explicit+0x60>  // b.plast
 310:	ldr	x0, [x4, #120]
 314:	b	2ec <ctf_strraw_explicit+0x34>
 318:	ldr	x0, [x2]
 31c:	cbz	x0, 334 <ctf_strraw_explicit+0x7c>
 320:	ldr	x1, [x2, #8]
 324:	and	x3, x3, #0x7fffffff
 328:	add	x0, x0, x3
 32c:	cmp	x3, x1
 330:	csel	x0, x0, xzr, cc  // cc = lo, ul, last
 334:	ret
 338:	cbz	w0, 2f4 <ctf_strraw_explicit+0x3c>
 33c:	b	2e0 <ctf_strraw_explicit+0x28>

0000000000000340 <ctf_strraw>:
 340:	mov	x2, #0x0                   	// #0
 344:	b	2b8 <ctf_strraw_explicit>

0000000000000348 <ctf_strptr>:
 348:	stp	x29, x30, [sp, #-16]!
 34c:	mov	x29, sp
 350:	bl	340 <ctf_strraw>
 354:	cbnz	x0, 360 <ctf_strptr+0x18>
 358:	adrp	x0, 0 <ctf_str_rollback_atom>
 35c:	add	x0, x0, #0x0
 360:	ldp	x29, x30, [sp], #16
 364:	ret

0000000000000368 <ctf_str_free_atoms>:
 368:	stp	x29, x30, [sp, #-32]!
 36c:	mov	x29, sp
 370:	str	x19, [sp, #16]
 374:	mov	x19, x0
 378:	ldr	x0, [x0, #120]
 37c:	bl	0 <ctf_dynhash_destroy>
 380:	ldr	x0, [x19, #368]
 384:	ldr	x19, [sp, #16]
 388:	ldp	x29, x30, [sp], #32
 38c:	b	0 <ctf_dynhash_destroy>

0000000000000390 <ctf_str_add>:
 390:	cbnz	x1, 3a8 <ctf_str_add+0x18>
 394:	mov	w0, #0x0                   	// #0
 398:	ret
 39c:	mov	w0, #0x0                   	// #0
 3a0:	ldp	x29, x30, [sp], #16
 3a4:	ret
 3a8:	stp	x29, x30, [sp, #-16]!
 3ac:	mov	x4, #0x0                   	// #0
 3b0:	mov	w3, #0x1                   	// #1
 3b4:	mov	x29, sp
 3b8:	mov	w2, #0x0                   	// #0
 3bc:	bl	8c <ctf_str_add_ref_internal>
 3c0:	cbz	x0, 39c <ctf_str_add+0xc>
 3c4:	ldr	w0, [x0, #24]
 3c8:	b	3a0 <ctf_str_add+0x10>

00000000000003cc <ctf_str_create_atoms>:
 3cc:	stp	x29, x30, [sp, #-32]!
 3d0:	adrp	x3, 0 <ctf_str_rollback_atom>
 3d4:	adrp	x2, 0 <free>
 3d8:	mov	x29, sp
 3dc:	stp	x19, x20, [sp, #16]
 3e0:	mov	x19, x0
 3e4:	add	x3, x3, #0x0
 3e8:	add	x2, x2, #0x0
 3ec:	adrp	x1, 0 <ctf_hash_eq_string>
 3f0:	adrp	x0, 0 <ctf_hash_string>
 3f4:	add	x1, x1, #0x0
 3f8:	add	x0, x0, #0x0
 3fc:	bl	0 <ctf_dynhash_create>
 400:	str	x0, [x19, #368]
 404:	cbz	x0, 478 <ctf_str_create_atoms+0xac>
 408:	ldr	x0, [x19, #120]
 40c:	cbz	x0, 448 <ctf_str_create_atoms+0x7c>
 410:	bl	0 <__errno_location>
 414:	mov	x20, x0
 418:	adrp	x1, 0 <ctf_str_rollback_atom>
 41c:	mov	x0, x19
 420:	add	x1, x1, #0x0
 424:	str	wzr, [x20]
 428:	bl	390 <ctf_str_add>
 42c:	ldr	w0, [x20]
 430:	cmp	w0, #0xc
 434:	b.eq	480 <ctf_str_create_atoms+0xb4>  // b.none
 438:	mov	w0, #0x0                   	// #0
 43c:	ldp	x19, x20, [sp, #16]
 440:	ldp	x29, x30, [sp], #32
 444:	ret
 448:	mov	x3, #0x0                   	// #0
 44c:	mov	x2, #0x0                   	// #0
 450:	adrp	x1, 0 <ctf_hash_eq_integer>
 454:	adrp	x0, 0 <ctf_hash_integer>
 458:	add	x1, x1, #0x0
 45c:	add	x0, x0, #0x0
 460:	bl	0 <ctf_dynhash_create>
 464:	str	x0, [x19, #120]
 468:	cbnz	x0, 410 <ctf_str_create_atoms+0x44>
 46c:	ldr	x0, [x19, #368]
 470:	bl	0 <ctf_dynhash_destroy>
 474:	str	xzr, [x19, #368]
 478:	mov	w0, #0xfffffff4            	// #-12
 47c:	b	43c <ctf_str_create_atoms+0x70>
 480:	ldr	x0, [x19, #120]
 484:	bl	0 <ctf_dynhash_destroy>
 488:	str	xzr, [x19, #120]
 48c:	b	46c <ctf_str_create_atoms+0xa0>

0000000000000490 <ctf_str_add_ref>:
 490:	cbnz	x1, 4a8 <ctf_str_add_ref+0x18>
 494:	mov	w0, #0x0                   	// #0
 498:	ret
 49c:	mov	w0, #0x0                   	// #0
 4a0:	ldp	x29, x30, [sp], #16
 4a4:	ret
 4a8:	stp	x29, x30, [sp, #-16]!
 4ac:	mov	x4, x2
 4b0:	mov	w3, #0x1                   	// #1
 4b4:	mov	x29, sp
 4b8:	mov	w2, w3
 4bc:	bl	8c <ctf_str_add_ref_internal>
 4c0:	cbz	x0, 49c <ctf_str_add_ref+0xc>
 4c4:	ldr	w0, [x0, #24]
 4c8:	b	4a0 <ctf_str_add_ref+0x10>

00000000000004cc <ctf_str_add_external>:
 4cc:	cbnz	x1, 4e8 <ctf_str_add_external+0x1c>
 4d0:	mov	w0, #0x0                   	// #0
 4d4:	ret
 4d8:	mov	w0, #0x0                   	// #0
 4dc:	ldr	x19, [sp, #16]
 4e0:	ldp	x29, x30, [sp], #32
 4e4:	ret
 4e8:	stp	x29, x30, [sp, #-32]!
 4ec:	mov	x4, #0x0                   	// #0
 4f0:	mov	w3, #0x0                   	// #0
 4f4:	mov	x29, sp
 4f8:	str	x19, [sp, #16]
 4fc:	mov	w19, w2
 500:	mov	w2, #0x0                   	// #0
 504:	bl	8c <ctf_str_add_ref_internal>
 508:	cbz	x0, 4d8 <ctf_str_add_external+0xc>
 50c:	orr	w19, w19, #0x80000000
 510:	str	w19, [x0, #28]
 514:	mov	w0, #0x1                   	// #1
 518:	b	4dc <ctf_str_add_external+0x10>

000000000000051c <ctf_str_remove_ref>:
 51c:	stp	x29, x30, [sp, #-48]!
 520:	mov	x29, sp
 524:	ldr	x0, [x0, #368]
 528:	stp	x19, x20, [sp, #16]
 52c:	stp	x21, x22, [sp, #32]
 530:	mov	x21, x2
 534:	bl	0 <ctf_dynhash_lookup>
 538:	cbz	x0, 548 <ctf_str_remove_ref+0x2c>
 53c:	ldr	x20, [x0, #16]
 540:	add	x19, x0, #0x8
 544:	cbnz	x20, 558 <ctf_str_remove_ref+0x3c>
 548:	ldp	x19, x20, [sp, #16]
 54c:	ldp	x21, x22, [sp, #32]
 550:	ldp	x29, x30, [sp], #48
 554:	ret
 558:	ldp	x22, x0, [x20, #8]
 55c:	cmp	x0, x21
 560:	b.ne	578 <ctf_str_remove_ref+0x5c>  // b.any
 564:	mov	x1, x20
 568:	mov	x0, x19
 56c:	bl	0 <ctf_list_delete>
 570:	mov	x0, x20
 574:	bl	0 <free>
 578:	mov	x20, x22
 57c:	b	544 <ctf_str_remove_ref+0x28>

0000000000000580 <ctf_str_rollback>:
 580:	stp	x29, x30, [sp, #-32]!
 584:	mov	x29, sp
 588:	ldr	x0, [x0, #368]
 58c:	stp	x1, x2, [sp, #16]
 590:	add	x2, sp, #0x10
 594:	adrp	x1, 0 <ctf_str_rollback_atom>
 598:	add	x1, x1, #0x0
 59c:	bl	0 <ctf_dynhash_iter_remove>
 5a0:	ldp	x29, x30, [sp], #32
 5a4:	ret

00000000000005a8 <ctf_str_purge_refs>:
 5a8:	stp	x29, x30, [sp, #-32]!
 5ac:	mov	x29, sp
 5b0:	str	x19, [sp, #16]
 5b4:	mov	x19, x0
 5b8:	ldr	x0, [x0, #376]
 5bc:	cbz	x0, 5d4 <ctf_str_purge_refs+0x2c>
 5c0:	ldr	x0, [x19, #368]
 5c4:	adrp	x1, 0 <ctf_str_rollback_atom>
 5c8:	mov	x2, #0x0                   	// #0
 5cc:	add	x1, x1, #0x0
 5d0:	bl	0 <ctf_dynhash_iter>
 5d4:	str	xzr, [x19, #376]
 5d8:	ldr	x19, [sp, #16]
 5dc:	ldp	x29, x30, [sp], #32
 5e0:	ret

00000000000005e4 <ctf_str_write_strtab>:
 5e4:	stp	x29, x30, [sp, #-128]!
 5e8:	adrp	x1, 0 <ctf_str_rollback_atom>
 5ec:	add	x1, x1, #0x0
 5f0:	mov	x29, sp
 5f4:	stp	x19, x20, [sp, #16]
 5f8:	mov	x19, x0
 5fc:	add	x0, sp, #0x48
 600:	str	x0, [sp, #88]
 604:	ldr	x0, [x19, #368]
 608:	stp	x21, x22, [sp, #32]
 60c:	str	x23, [sp, #48]
 610:	stp	xzr, xzr, [sp, #72]
 614:	stp	xzr, xzr, [sp, #96]
 618:	stp	xzr, xzr, [sp, #112]
 61c:	bl	0 <ctf_dynhash_lookup>
 620:	cbnz	x0, 64c <ctf_str_write_strtab+0x68>
 624:	adrp	x0, 0 <ctf_str_rollback_atom>
 628:	add	x0, x0, #0x0
 62c:	bl	0 <ctf_dprintf>
 630:	str	xzr, [sp, #72]
 634:	ldp	x19, x20, [sp, #16]
 638:	ldp	x21, x22, [sp, #32]
 63c:	ldr	x23, [sp, #48]
 640:	ldp	x0, x1, [sp, #72]
 644:	ldp	x29, x30, [sp], #128
 648:	ret
 64c:	mov	x21, x0
 650:	add	x2, sp, #0x58
 654:	ldr	x0, [x19, #368]
 658:	adrp	x1, 0 <ctf_str_rollback_atom>
 65c:	add	x1, x1, #0x0
 660:	str	x21, [sp, #120]
 664:	bl	0 <ctf_dynhash_iter>
 668:	ldr	x1, [sp, #80]
 66c:	adrp	x0, 0 <ctf_str_rollback_atom>
 670:	add	x0, x0, #0x0
 674:	add	x1, x1, #0x1
 678:	str	x1, [sp, #80]
 67c:	bl	0 <ctf_dprintf>
 680:	ldr	x0, [sp, #96]
 684:	mov	x1, #0x8                   	// #8
 688:	bl	0 <calloc>
 68c:	mov	x20, x0
 690:	cbz	x0, 634 <ctf_str_write_strtab+0x50>
 694:	mov	x0, #0x1                   	// #1
 698:	stp	x20, x0, [sp, #104]
 69c:	add	x2, sp, #0x58
 6a0:	ldr	x0, [x19, #368]
 6a4:	adrp	x1, 0 <ctf_str_rollback_atom>
 6a8:	add	x1, x1, #0x0
 6ac:	str	x21, [x20]
 6b0:	bl	0 <ctf_dynhash_iter>
 6b4:	ldr	x1, [sp, #96]
 6b8:	mov	x2, #0x8                   	// #8
 6bc:	adrp	x3, 0 <ctf_str_rollback_atom>
 6c0:	add	x0, x20, x2
 6c4:	add	x3, x3, #0x0
 6c8:	sub	x1, x1, #0x1
 6cc:	bl	0 <qsort>
 6d0:	ldr	x0, [sp, #80]
 6d4:	bl	0 <malloc>
 6d8:	str	x0, [sp, #72]
 6dc:	cbz	x0, 7ec <ctf_str_write_strtab+0x208>
 6e0:	ldr	x0, [x19, #128]
 6e4:	cbnz	x0, 70c <ctf_str_write_strtab+0x128>
 6e8:	mov	x3, #0x0                   	// #0
 6ec:	mov	x2, #0x0                   	// #0
 6f0:	adrp	x1, 0 <ctf_hash_eq_integer>
 6f4:	adrp	x0, 0 <ctf_hash_integer>
 6f8:	add	x1, x1, #0x0
 6fc:	add	x0, x0, #0x0
 700:	bl	0 <ctf_dynhash_create>
 704:	str	x0, [x19, #128]
 708:	cbz	x0, 7e0 <ctf_str_write_strtab+0x1fc>
 70c:	mov	w23, #0x0                   	// #0
 710:	mov	x22, #0x0                   	// #0
 714:	mov	w21, #0x0                   	// #0
 718:	b	794 <ctf_str_write_strtab+0x1b0>
 71c:	ldr	x1, [x20, x22, lsl #3]
 720:	ldr	w2, [x1, #28]
 724:	ldr	x0, [x1, #16]
 728:	cbnz	w2, 768 <ctf_str_write_strtab+0x184>
 72c:	cbnz	x0, 7d0 <ctf_str_write_strtab+0x1ec>
 730:	str	w21, [x1, #24]
 734:	ldr	x1, [x1]
 738:	ldr	x0, [sp, #72]
 73c:	add	x0, x0, w21, uxtw
 740:	bl	0 <strcpy>
 744:	ldr	x0, [x20, x22, lsl #3]
 748:	add	w21, w21, #0x1
 74c:	ldr	x0, [x0]
 750:	bl	0 <strlen>
 754:	add	w21, w21, w0
 758:	b	790 <ctf_str_write_strtab+0x1ac>
 75c:	ldr	x3, [x0, #16]
 760:	ldr	x0, [x0, #8]
 764:	str	w2, [x3]
 768:	cbnz	x0, 75c <ctf_str_write_strtab+0x178>
 76c:	ldr	x2, [x1]
 770:	ldr	w1, [x1, #28]
 774:	ldr	x0, [x19, #128]
 778:	bl	0 <ctf_dynhash_insert>
 77c:	tbnz	w0, #31, 7e0 <ctf_str_write_strtab+0x1fc>
 780:	ldr	x0, [x20, x22, lsl #3]
 784:	mov	w23, #0x1                   	// #1
 788:	ldr	w1, [x0, #28]
 78c:	str	w1, [x0, #24]
 790:	add	x22, x22, #0x1
 794:	ldr	x0, [sp, #96]
 798:	cmp	x0, x22
 79c:	b.hi	71c <ctf_str_write_strtab+0x138>  // b.pmore
 7a0:	mov	x0, x20
 7a4:	bl	0 <free>
 7a8:	cbnz	w23, 7b8 <ctf_str_write_strtab+0x1d4>
 7ac:	ldr	x0, [x19, #128]
 7b0:	bl	0 <ctf_dynhash_destroy>
 7b4:	str	xzr, [x19, #128]
 7b8:	ldr	x0, [x19, #120]
 7bc:	bl	0 <ctf_dynhash_empty>
 7c0:	ldr	x0, [sp, #80]
 7c4:	add	w0, w0, #0x1
 7c8:	str	w0, [x19, #384]
 7cc:	b	634 <ctf_str_write_strtab+0x50>
 7d0:	ldr	x2, [x0, #16]
 7d4:	ldr	x0, [x0, #8]
 7d8:	str	w21, [x2]
 7dc:	b	72c <ctf_str_write_strtab+0x148>
 7e0:	ldr	x0, [sp, #72]
 7e4:	bl	0 <free>
 7e8:	str	xzr, [sp, #72]
 7ec:	mov	x0, x20
 7f0:	bl	0 <free>
 7f4:	b	634 <ctf_str_write_strtab+0x50>

ctf-subr.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_mmap>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x5, x1
   8:	mov	w4, w2
   c:	mov	x29, sp
  10:	mov	x1, x0
  14:	mov	w3, #0x2                   	// #2
  18:	mov	w2, #0x1                   	// #1
  1c:	mov	x0, #0x0                   	// #0
  20:	bl	0 <mmap>
  24:	cmn	x0, #0x1
  28:	b.ne	30 <ctf_mmap+0x30>  // b.any
  2c:	mov	x0, #0x0                   	// #0
  30:	ldp	x29, x30, [sp], #16
  34:	ret

0000000000000038 <ctf_munmap>:
  38:	b	0 <munmap>

000000000000003c <ctf_pread>:
  3c:	stp	x29, x30, [sp, #-64]!
  40:	mov	x29, sp
  44:	stp	x19, x20, [sp, #16]
  48:	mov	x20, x1
  4c:	mov	x19, x2
  50:	stp	x21, x22, [sp, #32]
  54:	mov	x21, x3
  58:	mov	x22, #0x0                   	// #0
  5c:	stp	x23, x24, [sp, #48]
  60:	mov	w23, w0
  64:	cmp	x19, #0x0
  68:	b.le	c0 <ctf_pread+0x84>
  6c:	bl	0 <__errno_location>
  70:	mov	x24, x0
  74:	mov	x1, x20
  78:	mov	x3, x21
  7c:	mov	x2, x19
  80:	mov	w0, w23
  84:	str	wzr, [x24]
  88:	bl	0 <pread>
  8c:	ldr	w1, [x24]
  90:	tbz	x0, #63, b0 <ctf_pread+0x74>
  94:	cmp	w1, #0x4
  98:	b.eq	64 <ctf_pread+0x28>  // b.none
  9c:	ldp	x19, x20, [sp, #16]
  a0:	ldp	x21, x22, [sp, #32]
  a4:	ldp	x23, x24, [sp, #48]
  a8:	ldp	x29, x30, [sp], #64
  ac:	ret
  b0:	cmp	w1, #0x4
  b4:	b.eq	64 <ctf_pread+0x28>  // b.none
  b8:	add	x22, x22, x0
  bc:	cbnz	x0, c8 <ctf_pread+0x8c>
  c0:	mov	x0, x22
  c4:	b	9c <ctf_pread+0x60>
  c8:	sub	x19, x19, x0
  cc:	add	x21, x21, x0
  d0:	add	x20, x20, x0
  d4:	b	64 <ctf_pread+0x28>

00000000000000d8 <ctf_strerror>:
  d8:	b	0 <strerror>

00000000000000dc <libctf_init_debug>:
  dc:	stp	x29, x30, [sp, #-32]!
  e0:	mov	x29, sp
  e4:	stp	x19, x20, [sp, #16]
  e8:	adrp	x19, 0 <ctf_mmap>
  ec:	ldr	w0, [x19]
  f0:	cbnz	w0, 118 <libctf_init_debug+0x3c>
  f4:	add	x20, x19, #0x0
  f8:	adrp	x0, 0 <ctf_mmap>
  fc:	add	x0, x0, #0x0
 100:	bl	0 <getenv>
 104:	cmp	x0, #0x0
 108:	cset	w0, ne  // ne = any
 10c:	str	w0, [x20, #4]
 110:	mov	w0, #0x1                   	// #1
 114:	str	w0, [x19]
 118:	ldp	x19, x20, [sp, #16]
 11c:	ldp	x29, x30, [sp], #32
 120:	ret

0000000000000124 <ctf_getdebug>:
 124:	adrp	x0, 0 <ctf_mmap>
 128:	ldr	w0, [x0]
 12c:	ret

0000000000000130 <ctf_dprintf>:
 130:	stp	x29, x30, [sp, #-288]!
 134:	mov	x29, sp
 138:	stp	x19, x20, [sp, #16]
 13c:	mov	x19, x0
 140:	adrp	x0, 0 <ctf_mmap>
 144:	str	q0, [sp, #96]
 148:	ldr	w0, [x0]
 14c:	str	q1, [sp, #112]
 150:	str	q2, [sp, #128]
 154:	str	q3, [sp, #144]
 158:	str	q4, [sp, #160]
 15c:	str	q5, [sp, #176]
 160:	str	q6, [sp, #192]
 164:	str	q7, [sp, #208]
 168:	stp	x1, x2, [sp, #232]
 16c:	stp	x3, x4, [sp, #248]
 170:	stp	x5, x6, [sp, #264]
 174:	str	x7, [sp, #280]
 178:	cbz	w0, 1dc <ctf_dprintf+0xac>
 17c:	add	x0, sp, #0x120
 180:	stp	x0, x0, [sp, #64]
 184:	add	x0, sp, #0xe0
 188:	str	x0, [sp, #80]
 18c:	mov	w0, #0xffffffc8            	// #-56
 190:	str	w0, [sp, #88]
 194:	mov	w0, #0xffffff80            	// #-128
 198:	str	w0, [sp, #92]
 19c:	adrp	x0, 0 <stdout>
 1a0:	adrp	x20, 0 <stderr>
 1a4:	ldr	x0, [x0]
 1a8:	bl	0 <fflush>
 1ac:	ldr	x1, [x20]
 1b0:	adrp	x0, 0 <ctf_mmap>
 1b4:	add	x0, x0, #0x0
 1b8:	bl	0 <fputs>
 1bc:	ldp	x0, x1, [sp, #64]
 1c0:	stp	x0, x1, [sp, #32]
 1c4:	add	x2, sp, #0x20
 1c8:	ldp	x0, x1, [sp, #80]
 1cc:	stp	x0, x1, [sp, #48]
 1d0:	ldr	x0, [x20]
 1d4:	mov	x1, x19
 1d8:	bl	0 <vfprintf>
 1dc:	ldp	x19, x20, [sp, #16]
 1e0:	ldp	x29, x30, [sp], #288
 1e4:	ret

00000000000001e8 <ctf_version>:
 1e8:	stp	x29, x30, [sp, #-32]!
 1ec:	cmp	w0, #0x0
 1f0:	mov	x29, sp
 1f4:	str	x19, [sp, #16]
 1f8:	b.ge	218 <ctf_version+0x30>  // b.tcont
 1fc:	bl	0 <__errno_location>
 200:	mov	w1, #0x16                  	// #22
 204:	str	w1, [x0]
 208:	mov	w0, #0xffffffff            	// #-1
 20c:	ldr	x19, [sp, #16]
 210:	ldp	x29, x30, [sp], #32
 214:	ret
 218:	b.eq	24c <ctf_version+0x64>  // b.none
 21c:	mov	w19, w0
 220:	cmp	w0, #0x4
 224:	b.eq	234 <ctf_version+0x4c>  // b.none
 228:	bl	0 <__errno_location>
 22c:	mov	w1, #0x5f                  	// #95
 230:	b	204 <ctf_version+0x1c>
 234:	mov	w1, w0
 238:	adrp	x0, 0 <ctf_mmap>
 23c:	add	x0, x0, #0x0
 240:	bl	130 <ctf_dprintf>
 244:	adrp	x0, 0 <ctf_mmap>
 248:	str	w19, [x0]
 24c:	adrp	x0, 0 <ctf_mmap>
 250:	ldr	w0, [x0]
 254:	b	20c <ctf_version+0x24>

0000000000000258 <ctf_setdebug>:
 258:	stp	x29, x30, [sp, #-32]!
 25c:	mov	x29, sp
 260:	str	x19, [sp, #16]
 264:	mov	w19, w0
 268:	bl	dc <libctf_init_debug>
 26c:	adrp	x0, 0 <ctf_mmap>
 270:	mov	w1, w19
 274:	str	w19, [x0]
 278:	adrp	x0, 0 <ctf_mmap>
 27c:	ldr	x19, [sp, #16]
 280:	add	x0, x0, #0x0
 284:	ldp	x29, x30, [sp], #32
 288:	b	130 <ctf_dprintf>

ctf-types.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_get_ctt_size>:
       0:	ldr	x4, [x0]
       4:	ldr	x4, [x4, #24]
       8:	mov	x16, x4
       c:	br	x16

0000000000000010 <ctf_type_isparent>:
      10:	ldr	w0, [x0, #544]
      14:	cmp	x0, x1
      18:	cset	w0, cs  // cs = hs, nlast
      1c:	ret

0000000000000020 <ctf_type_ischild>:
      20:	ldr	w0, [x0, #544]
      24:	cmp	x0, x1
      28:	cset	w0, cc  // cc = lo, ul, last
      2c:	ret

0000000000000030 <ctf_type_iter>:
      30:	stp	x29, x30, [sp, #-64]!
      34:	mov	x29, sp
      38:	stp	x21, x22, [sp, #32]
      3c:	mov	x22, x1
      40:	ldr	w21, [x0, #552]
      44:	stp	x23, x24, [sp, #48]
      48:	mov	x23, x2
      4c:	and	w21, w21, #0x1
      50:	ldr	x24, [x0, #480]
      54:	stp	x19, x20, [sp, #16]
      58:	mov	x19, x0
      5c:	mov	x20, #0x1                   	// #1
      60:	cmp	x20, x24
      64:	b.ls	70 <ctf_type_iter+0x40>  // b.plast
      68:	mov	w0, #0x0                   	// #0
      6c:	b	e8 <ctf_type_iter+0xb8>
      70:	ldr	w0, [x19, #552]
      74:	tbz	w0, #1, b8 <ctf_type_iter+0x88>
      78:	tbz	w0, #0, b0 <ctf_type_iter+0x80>
      7c:	ldr	w1, [x19, #544]
      80:	add	w1, w1, #0x1
      84:	orr	x1, x1, x20
      88:	mov	x0, x19
      8c:	bl	0 <ctf_dtd_lookup>
      90:	add	x0, x0, #0x18
      94:	ldr	x1, [x19]
      98:	ldr	w0, [x0, #4]
      9c:	ldr	x1, [x1, #8]
      a0:	blr	x1
      a4:	cbnz	w0, cc <ctf_type_iter+0x9c>
      a8:	add	x20, x20, #0x1
      ac:	b	60 <ctf_type_iter+0x30>
      b0:	mov	x1, x20
      b4:	b	88 <ctf_type_iter+0x58>
      b8:	ldr	x0, [x19, #440]
      bc:	ldr	w1, [x0, x20, lsl #2]
      c0:	ldr	x0, [x19, #408]
      c4:	add	x0, x0, x1
      c8:	b	94 <ctf_type_iter+0x64>
      cc:	cbz	w21, fc <ctf_type_iter+0xcc>
      d0:	ldr	w0, [x19, #544]
      d4:	add	w0, w0, #0x1
      d8:	orr	x0, x0, x20
      dc:	mov	x1, x23
      e0:	blr	x22
      e4:	cbz	w0, a8 <ctf_type_iter+0x78>
      e8:	ldp	x19, x20, [sp, #16]
      ec:	ldp	x21, x22, [sp, #32]
      f0:	ldp	x23, x24, [sp, #48]
      f4:	ldp	x29, x30, [sp], #64
      f8:	ret
      fc:	mov	x0, x20
     100:	b	dc <ctf_type_iter+0xac>

0000000000000104 <ctf_type_iter_all>:
     104:	stp	x29, x30, [sp, #-80]!
     108:	mov	x29, sp
     10c:	stp	x21, x22, [sp, #32]
     110:	ldr	w22, [x0, #552]
     114:	str	x25, [sp, #64]
     118:	ldr	x25, [x0, #480]
     11c:	and	w22, w22, #0x1
     120:	stp	x19, x20, [sp, #16]
     124:	mov	x19, x0
     128:	mov	x20, #0x1                   	// #1
     12c:	stp	x23, x24, [sp, #48]
     130:	mov	x23, x1
     134:	mov	x24, x2
     138:	cmp	x20, x25
     13c:	b.ls	15c <ctf_type_iter_all+0x58>  // b.plast
     140:	mov	w0, #0x0                   	// #0
     144:	ldp	x19, x20, [sp, #16]
     148:	ldp	x21, x22, [sp, #32]
     14c:	ldp	x23, x24, [sp, #48]
     150:	ldr	x25, [sp, #64]
     154:	ldp	x29, x30, [sp], #80
     158:	ret
     15c:	ldr	w0, [x19, #552]
     160:	tbz	w0, #1, 1c8 <ctf_type_iter_all+0xc4>
     164:	tbz	w0, #0, 1c0 <ctf_type_iter_all+0xbc>
     168:	ldr	w1, [x19, #544]
     16c:	add	w1, w1, #0x1
     170:	orr	x1, x1, x20
     174:	mov	x0, x19
     178:	bl	0 <ctf_dtd_lookup>
     17c:	add	x0, x0, #0x18
     180:	cbz	w22, 1dc <ctf_type_iter_all+0xd8>
     184:	ldr	w21, [x19, #544]
     188:	add	w21, w21, #0x1
     18c:	orr	x21, x21, x20
     190:	ldr	x1, [x19]
     194:	ldr	w0, [x0, #4]
     198:	ldr	x1, [x1, #8]
     19c:	blr	x1
     1a0:	cmp	w0, #0x0
     1a4:	mov	x2, x24
     1a8:	cset	w1, ne  // ne = any
     1ac:	mov	x0, x21
     1b0:	blr	x23
     1b4:	cbnz	w0, 1e4 <ctf_type_iter_all+0xe0>
     1b8:	add	x20, x20, #0x1
     1bc:	b	138 <ctf_type_iter_all+0x34>
     1c0:	mov	x1, x20
     1c4:	b	174 <ctf_type_iter_all+0x70>
     1c8:	ldr	x0, [x19, #440]
     1cc:	ldr	w1, [x0, x20, lsl #2]
     1d0:	ldr	x0, [x19, #408]
     1d4:	add	x0, x0, x1
     1d8:	b	180 <ctf_type_iter_all+0x7c>
     1dc:	mov	x21, x20
     1e0:	b	190 <ctf_type_iter_all+0x8c>
     1e4:	mov	w0, #0x1                   	// #1
     1e8:	b	144 <ctf_type_iter_all+0x40>

00000000000001ec <ctf_variable_iter>:
     1ec:	stp	x29, x30, [sp, #-64]!
     1f0:	mov	x29, sp
     1f4:	stp	x19, x20, [sp, #16]
     1f8:	mov	x19, x0
     1fc:	ldr	w0, [x0, #552]
     200:	stp	x21, x22, [sp, #32]
     204:	mov	x20, x1
     208:	mov	x21, x2
     20c:	str	x23, [sp, #48]
     210:	tbz	w0, #0, 21c <ctf_variable_iter+0x30>
     214:	ldr	x1, [x19, #512]
     218:	cbz	x1, 29c <ctf_variable_iter+0xb0>
     21c:	tbz	w0, #1, 294 <ctf_variable_iter+0xa8>
     220:	ldr	x19, [x19, #608]
     224:	cbz	x19, 27c <ctf_variable_iter+0x90>
     228:	ldp	x0, x1, [x19, #16]
     22c:	mov	x2, x21
     230:	blr	x20
     234:	cbnz	w0, 280 <ctf_variable_iter+0x94>
     238:	ldr	x19, [x19, #8]
     23c:	b	224 <ctf_variable_iter+0x38>
     240:	ldr	x0, [x19, #464]
     244:	lsl	x23, x22, #3
     248:	ldr	w1, [x0, x23]
     24c:	mov	x0, x19
     250:	bl	0 <ctf_strptr>
     254:	ldr	x1, [x19, #464]
     258:	mov	x2, x21
     25c:	add	x23, x1, x23
     260:	ldr	w1, [x23, #4]
     264:	blr	x20
     268:	cbnz	w0, 280 <ctf_variable_iter+0x94>
     26c:	add	x22, x22, #0x1
     270:	ldr	x0, [x19, #472]
     274:	cmp	x0, x22
     278:	b.hi	240 <ctf_variable_iter+0x54>  // b.pmore
     27c:	mov	w0, #0x0                   	// #0
     280:	ldp	x19, x20, [sp, #16]
     284:	ldp	x21, x22, [sp, #32]
     288:	ldr	x23, [sp, #48]
     28c:	ldp	x29, x30, [sp], #64
     290:	ret
     294:	mov	x22, #0x0                   	// #0
     298:	b	270 <ctf_variable_iter+0x84>
     29c:	mov	w0, #0x3f3                 	// #1011
     2a0:	b	280 <ctf_variable_iter+0x94>

00000000000002a4 <ctf_type_resolve>:
     2a4:	stp	x29, x30, [sp, #-80]!
     2a8:	mov	x29, sp
     2ac:	stp	x19, x20, [sp, #16]
     2b0:	stp	x21, x22, [sp, #32]
     2b4:	str	x23, [sp, #48]
     2b8:	str	x0, [sp, #72]
     2bc:	cbnz	x1, 34c <ctf_type_resolve+0xa8>
     2c0:	mov	w1, #0x41b                 	// #1051
     2c4:	bl	0 <ctf_set_errno>
     2c8:	mov	x19, x0
     2cc:	mov	x0, x19
     2d0:	ldp	x19, x20, [sp, #16]
     2d4:	ldp	x21, x22, [sp, #32]
     2d8:	ldr	x23, [sp, #48]
     2dc:	ldp	x29, x30, [sp], #80
     2e0:	ret
     2e4:	ldr	x0, [sp, #72]
     2e8:	ldr	x0, [x0]
     2ec:	ldr	x1, [x0]
     2f0:	ldr	w0, [x21, #4]
     2f4:	blr	x1
     2f8:	sub	w0, w0, #0xa
     2fc:	cmp	w0, #0x3
     300:	b.hi	2cc <ctf_type_resolve+0x28>  // b.pmore
     304:	ldr	w1, [x21, #8]
     308:	cmp	x1, x19
     30c:	b.eq	320 <ctf_type_resolve+0x7c>  // b.none
     310:	cmp	x1, x20
     314:	b.eq	320 <ctf_type_resolve+0x7c>  // b.none
     318:	cmp	x1, x23
     31c:	b.ne	33c <ctf_type_resolve+0x98>  // b.any
     320:	mov	x1, x20
     324:	adrp	x0, 0 <ctf_get_ctt_size>
     328:	add	x0, x0, #0x0
     32c:	bl	0 <ctf_dprintf>
     330:	mov	w1, #0x3ef                 	// #1007
     334:	mov	x0, x22
     338:	b	2c4 <ctf_type_resolve+0x20>
     33c:	mov	x23, x19
     340:	cbnz	x1, 378 <ctf_type_resolve+0xd4>
     344:	mov	w1, #0x41b                 	// #1051
     348:	b	334 <ctf_type_resolve+0x90>
     34c:	mov	x20, x1
     350:	mov	x22, x0
     354:	mov	x23, x1
     358:	mov	x19, x1
     35c:	mov	x1, x19
     360:	add	x0, sp, #0x48
     364:	bl	0 <ctf_lookup_by_id>
     368:	mov	x21, x0
     36c:	cbnz	x0, 2e4 <ctf_type_resolve+0x40>
     370:	mov	x19, #0xffffffffffffffff    	// #-1
     374:	b	2cc <ctf_type_resolve+0x28>
     378:	mov	x19, x1
     37c:	b	35c <ctf_type_resolve+0xb8>

0000000000000380 <ctf_member_iter>:
     380:	stp	x29, x30, [sp, #-96]!
     384:	mov	x29, sp
     388:	stp	x19, x20, [sp, #16]
     38c:	mov	x20, x2
     390:	stp	x21, x22, [sp, #32]
     394:	mov	x21, x3
     398:	str	x23, [sp, #48]
     39c:	mov	x23, x0
     3a0:	str	x0, [sp, #72]
     3a4:	bl	2a4 <ctf_type_resolve>
     3a8:	cmn	x0, #0x1
     3ac:	b.ne	3c8 <ctf_member_iter+0x48>  // b.any
     3b0:	mov	w0, #0xffffffff            	// #-1
     3b4:	ldp	x19, x20, [sp, #16]
     3b8:	ldp	x21, x22, [sp, #32]
     3bc:	ldr	x23, [sp, #48]
     3c0:	ldp	x29, x30, [sp], #96
     3c4:	ret
     3c8:	mov	x1, x0
     3cc:	mov	x22, x0
     3d0:	add	x0, sp, #0x48
     3d4:	bl	0 <ctf_lookup_by_id>
     3d8:	mov	x19, x0
     3dc:	cbz	x0, 3b0 <ctf_member_iter+0x30>
     3e0:	mov	x1, x0
     3e4:	add	x3, sp, #0x58
     3e8:	ldr	x0, [sp, #72]
     3ec:	add	x2, sp, #0x50
     3f0:	bl	0 <ctf_get_ctt_size>
     3f4:	ldr	x0, [sp, #72]
     3f8:	ldr	x0, [x0]
     3fc:	ldr	x1, [x0]
     400:	ldr	w0, [x19, #4]
     404:	blr	x1
     408:	sub	w0, w0, #0x6
     40c:	cmp	w0, #0x1
     410:	b.ls	424 <ctf_member_iter+0xa4>  // b.plast
     414:	mov	x0, x23
     418:	mov	w1, #0x3fb                 	// #1019
     41c:	bl	0 <ctf_set_errno>
     420:	b	3b4 <ctf_member_iter+0x34>
     424:	ldr	x0, [sp, #72]
     428:	mov	x1, x22
     42c:	bl	0 <ctf_dynamic_type>
     430:	cbnz	x0, 4d4 <ctf_member_iter+0x154>
     434:	ldp	x0, x3, [sp, #72]
     438:	ldr	x2, [sp, #88]
     43c:	ldr	x0, [x0]
     440:	ldr	x1, [x0, #16]
     444:	ldr	w0, [x19, #4]
     448:	add	x19, x19, x2
     44c:	mov	x2, #0x1fffffff            	// #536870911
     450:	cmp	x3, x2
     454:	b.gt	494 <ctf_member_iter+0x114>
     458:	blr	x1
     45c:	mov	w22, w0
     460:	cbnz	w22, 46c <ctf_member_iter+0xec>
     464:	mov	w0, #0x0                   	// #0
     468:	b	3b4 <ctf_member_iter+0x34>
     46c:	ldr	w1, [x19]
     470:	ldr	x0, [sp, #72]
     474:	bl	0 <ctf_strptr>
     478:	ldp	w2, w1, [x19, #4]
     47c:	mov	x3, x21
     480:	blr	x20
     484:	cbnz	w0, 3b4 <ctf_member_iter+0x34>
     488:	sub	w22, w22, #0x1
     48c:	add	x19, x19, #0xc
     490:	b	460 <ctf_member_iter+0xe0>
     494:	blr	x1
     498:	mov	w22, w0
     49c:	cbz	w22, 464 <ctf_member_iter+0xe4>
     4a0:	ldr	w1, [x19]
     4a4:	ldr	x0, [sp, #72]
     4a8:	bl	0 <ctf_strptr>
     4ac:	ldr	w1, [x19, #12]
     4b0:	mov	x3, x21
     4b4:	ldr	w2, [x19, #4]
     4b8:	orr	x2, x1, x2, lsl #32
     4bc:	ldr	w1, [x19, #8]
     4c0:	blr	x20
     4c4:	cbnz	w0, 3b4 <ctf_member_iter+0x34>
     4c8:	sub	w22, w22, #0x1
     4cc:	add	x19, x19, #0x10
     4d0:	b	49c <ctf_member_iter+0x11c>
     4d4:	ldr	x19, [x0, #56]
     4d8:	cbz	x19, 464 <ctf_member_iter+0xe4>
     4dc:	ldp	x0, x1, [x19, #16]
     4e0:	mov	x3, x21
     4e4:	ldr	x2, [x19, #32]
     4e8:	blr	x20
     4ec:	cbnz	w0, 3b4 <ctf_member_iter+0x34>
     4f0:	ldr	x19, [x19, #8]
     4f4:	b	4d8 <ctf_member_iter+0x158>

00000000000004f8 <ctf_type_rvisit>:
     4f8:	stp	x29, x30, [sp, #-128]!
     4fc:	mov	x29, sp
     500:	stp	x19, x20, [sp, #16]
     504:	mov	w20, w6
     508:	stp	x21, x22, [sp, #32]
     50c:	mov	x22, x2
     510:	mov	x21, x4
     514:	stp	x23, x24, [sp, #48]
     518:	mov	x23, x3
     51c:	stp	x25, x26, [sp, #64]
     520:	mov	x26, x1
     524:	mov	x25, x5
     528:	str	x27, [sp, #80]
     52c:	str	x0, [sp, #104]
     530:	bl	2a4 <ctf_type_resolve>
     534:	cmn	x0, #0x1
     538:	b.ne	560 <ctf_type_rvisit+0x68>  // b.any
     53c:	mov	w21, #0xffffffff            	// #-1
     540:	mov	w0, w21
     544:	ldp	x19, x20, [sp, #16]
     548:	ldp	x21, x22, [sp, #32]
     54c:	ldp	x23, x24, [sp, #48]
     550:	ldp	x25, x26, [sp, #64]
     554:	ldr	x27, [sp, #80]
     558:	ldp	x29, x30, [sp], #128
     55c:	ret
     560:	mov	x1, x0
     564:	mov	x24, x0
     568:	add	x0, sp, #0x68
     56c:	bl	0 <ctf_lookup_by_id>
     570:	mov	x19, x0
     574:	cbz	x0, 53c <ctf_type_rvisit+0x44>
     578:	mov	x0, x21
     57c:	mov	x4, x23
     580:	mov	w3, w20
     584:	mov	x2, x25
     588:	mov	x1, x26
     58c:	blr	x22
     590:	mov	w21, w0
     594:	cbnz	w0, 540 <ctf_type_rvisit+0x48>
     598:	ldr	x0, [sp, #104]
     59c:	ldr	x0, [x0]
     5a0:	ldr	x1, [x0]
     5a4:	ldr	w0, [x19, #4]
     5a8:	blr	x1
     5ac:	sub	w0, w0, #0x6
     5b0:	cmp	w0, #0x1
     5b4:	b.hi	540 <ctf_type_rvisit+0x48>  // b.pmore
     5b8:	ldr	x0, [sp, #104]
     5bc:	mov	x1, x19
     5c0:	add	x3, sp, #0x78
     5c4:	add	x2, sp, #0x70
     5c8:	bl	0 <ctf_get_ctt_size>
     5cc:	ldr	x0, [sp, #104]
     5d0:	mov	x1, x24
     5d4:	bl	0 <ctf_dynamic_type>
     5d8:	cbnz	x0, 6b8 <ctf_type_rvisit+0x1c0>
     5dc:	ldp	x0, x3, [sp, #104]
     5e0:	ldr	x2, [sp, #120]
     5e4:	ldr	x0, [x0]
     5e8:	ldr	x1, [x0, #16]
     5ec:	ldr	w0, [x19, #4]
     5f0:	add	x19, x19, x2
     5f4:	mov	x2, #0x1fffffff            	// #536870911
     5f8:	cmp	x3, x2
     5fc:	b.gt	658 <ctf_type_rvisit+0x160>
     600:	blr	x1
     604:	add	w20, w20, #0x1
     608:	mov	w24, w0
     60c:	cbz	w24, 540 <ctf_type_rvisit+0x48>
     610:	ldr	w1, [x19]
     614:	ldr	x26, [sp, #104]
     618:	ldr	w27, [x19, #8]
     61c:	mov	x0, x26
     620:	bl	0 <ctf_strptr>
     624:	ldr	w5, [x19, #4]
     628:	mov	x4, x0
     62c:	mov	w6, w20
     630:	mov	x3, x23
     634:	mov	x2, x22
     638:	mov	x1, x27
     63c:	mov	x0, x26
     640:	add	x5, x5, x25
     644:	bl	4f8 <ctf_type_rvisit>
     648:	cbnz	w0, 6ec <ctf_type_rvisit+0x1f4>
     64c:	sub	w24, w24, #0x1
     650:	add	x19, x19, #0xc
     654:	b	60c <ctf_type_rvisit+0x114>
     658:	blr	x1
     65c:	add	w20, w20, #0x1
     660:	mov	w24, w0
     664:	cbz	w24, 540 <ctf_type_rvisit+0x48>
     668:	ldr	w1, [x19]
     66c:	ldr	x26, [sp, #104]
     670:	ldr	w27, [x19, #8]
     674:	mov	x0, x26
     678:	bl	0 <ctf_strptr>
     67c:	ldr	w1, [x19, #12]
     680:	mov	x4, x0
     684:	ldr	w5, [x19, #4]
     688:	mov	w6, w20
     68c:	mov	x3, x23
     690:	mov	x2, x22
     694:	mov	x0, x26
     698:	orr	x5, x1, x5, lsl #32
     69c:	mov	x1, x27
     6a0:	add	x5, x5, x25
     6a4:	bl	4f8 <ctf_type_rvisit>
     6a8:	cbnz	w0, 6ec <ctf_type_rvisit+0x1f4>
     6ac:	sub	w24, w24, #0x1
     6b0:	add	x19, x19, #0x10
     6b4:	b	664 <ctf_type_rvisit+0x16c>
     6b8:	ldr	x19, [x0, #56]
     6bc:	add	w20, w20, #0x1
     6c0:	cbz	x19, 540 <ctf_type_rvisit+0x48>
     6c4:	ldp	x4, x1, [x19, #16]
     6c8:	mov	w6, w20
     6cc:	ldr	x5, [x19, #32]
     6d0:	mov	x3, x23
     6d4:	ldr	x0, [sp, #104]
     6d8:	mov	x2, x22
     6dc:	bl	4f8 <ctf_type_rvisit>
     6e0:	cbnz	w0, 6ec <ctf_type_rvisit+0x1f4>
     6e4:	ldr	x19, [x19, #8]
     6e8:	b	6c0 <ctf_type_rvisit+0x1c8>
     6ec:	mov	w21, w0
     6f0:	b	540 <ctf_type_rvisit+0x48>

00000000000006f4 <ctf_lookup_by_rawhash>:
     6f4:	ldr	w4, [x0, #552]
     6f8:	mov	x3, x1
     6fc:	mov	x1, x2
     700:	tbz	w4, #1, 70c <ctf_lookup_by_rawhash+0x18>
     704:	ldr	x0, [x3, #8]
     708:	b	0 <ctf_dynhash_lookup>
     70c:	mov	x1, x0
     710:	ldr	x0, [x3]
     714:	b	0 <ctf_hash_lookup_type>

0000000000000718 <ctf_lookup_by_rawname>:
     718:	stp	x29, x30, [sp, #-32]!
     71c:	mov	x29, sp
     720:	stp	x19, x20, [sp, #16]
     724:	mov	x19, x0
     728:	mov	x20, x2
     72c:	bl	0 <ctf_name_table>
     730:	mov	x1, x0
     734:	mov	x2, x20
     738:	mov	x0, x19
     73c:	ldp	x19, x20, [sp, #16]
     740:	ldp	x29, x30, [sp], #32
     744:	b	6f4 <ctf_lookup_by_rawhash>

0000000000000748 <ctf_type_aname>:
     748:	stp	x29, x30, [sp, #-208]!
     74c:	cmp	x0, #0x0
     750:	ccmn	x1, #0x1, #0x0, eq  // eq = none
     754:	mov	x29, sp
     758:	stp	x19, x20, [sp, #16]
     75c:	stp	x21, x22, [sp, #32]
     760:	stp	x23, x24, [sp, #48]
     764:	stp	x25, x26, [sp, #64]
     768:	stp	x27, x28, [sp, #80]
     76c:	b.eq	7ac <ctf_type_aname+0x64>  // b.none
     770:	mov	x20, x1
     774:	mov	x19, x0
     778:	add	x0, sp, #0x68
     77c:	bl	0 <ctf_decl_init>
     780:	add	x0, sp, #0x68
     784:	mov	x2, x20
     788:	mov	x1, x19
     78c:	bl	0 <ctf_decl_push>
     790:	ldr	w0, [sp, #200]
     794:	cbz	w0, 7b4 <ctf_type_aname+0x6c>
     798:	add	x0, sp, #0x68
     79c:	bl	0 <ctf_decl_fini>
     7a0:	ldr	w1, [sp, #200]
     7a4:	mov	x0, x19
     7a8:	bl	0 <ctf_set_errno>
     7ac:	mov	x19, #0x0                   	// #0
     7b0:	b	844 <ctf_type_aname+0xfc>
     7b4:	ldp	w0, w1, [sp, #172]
     7b8:	cmp	w1, #0x2
     7bc:	b.gt	864 <ctf_type_aname+0x11c>
     7c0:	cmp	w0, #0x1
     7c4:	b.gt	878 <ctf_type_aname+0x130>
     7c8:	mov	w20, #0xffffffff            	// #-1
     7cc:	mov	w24, w20
     7d0:	adrp	x27, 0 <ctf_get_ctt_size>
     7d4:	add	x26, sp, #0x68
     7d8:	add	x27, x27, #0x0
     7dc:	mov	w25, #0x3                   	// #3
     7e0:	mov	w23, #0x0                   	// #0
     7e4:	ldr	x21, [x26, #8]
     7e8:	adrp	x28, 0 <ctf_get_ctt_size>
     7ec:	add	x28, x28, #0x0
     7f0:	cbnz	x21, 880 <ctf_type_aname+0x138>
     7f4:	cmp	w23, w20
     7f8:	b.ne	80c <ctf_type_aname+0xc4>  // b.any
     7fc:	adrp	x1, 0 <ctf_get_ctt_size>
     800:	add	x0, sp, #0x68
     804:	add	x1, x1, #0x0
     808:	bl	0 <ctf_decl_sprintf>
     80c:	add	w23, w23, #0x1
     810:	add	x26, x26, #0x10
     814:	cmp	w23, #0x4
     818:	b.ne	7e4 <ctf_type_aname+0x9c>  // b.any
     81c:	ldr	w0, [sp, #204]
     820:	cbz	w0, 830 <ctf_type_aname+0xe8>
     824:	mov	x0, x19
     828:	mov	w1, #0xc                   	// #12
     82c:	bl	0 <ctf_set_errno>
     830:	add	x0, sp, #0x68
     834:	bl	0 <ctf_decl_buf>
     838:	mov	x19, x0
     83c:	add	x0, sp, #0x68
     840:	bl	0 <ctf_decl_fini>
     844:	mov	x0, x19
     848:	ldp	x19, x20, [sp, #16]
     84c:	ldp	x21, x22, [sp, #32]
     850:	ldp	x23, x24, [sp, #48]
     854:	ldp	x25, x26, [sp, #64]
     858:	ldp	x27, x28, [sp, #80]
     85c:	ldp	x29, x30, [sp], #208
     860:	ret
     864:	cmp	w0, #0x1
     868:	mov	w20, #0x2                   	// #2
     86c:	b.le	7cc <ctf_type_aname+0x84>
     870:	mov	w24, #0x1                   	// #1
     874:	b	7d0 <ctf_type_aname+0x88>
     878:	mov	w20, #0x1                   	// #1
     87c:	b	7cc <ctf_type_aname+0x84>
     880:	ldr	x1, [x21, #16]
     884:	add	x0, sp, #0x60
     888:	str	x19, [sp, #96]
     88c:	sub	w25, w25, #0x3
     890:	bl	0 <ctf_lookup_by_id>
     894:	ldr	w1, [x0]
     898:	ldr	x0, [sp, #96]
     89c:	bl	0 <ctf_strptr>
     8a0:	mov	x22, x0
     8a4:	cmp	w25, #0x1
     8a8:	b.ls	8b8 <ctf_type_aname+0x170>  // b.plast
     8ac:	mov	x1, x28
     8b0:	add	x0, sp, #0x68
     8b4:	bl	0 <ctf_decl_sprintf>
     8b8:	cmp	w24, w23
     8bc:	b.ne	8d0 <ctf_type_aname+0x188>  // b.any
     8c0:	mov	w24, #0xffffffff            	// #-1
     8c4:	mov	x1, x27
     8c8:	add	x0, sp, #0x68
     8cc:	bl	0 <ctf_decl_sprintf>
     8d0:	ldr	w0, [x21, #24]
     8d4:	sub	w0, w0, #0x1
     8d8:	cmp	w0, #0xc
     8dc:	b.hi	938 <ctf_type_aname+0x1f0>  // b.pmore
     8e0:	adrp	x1, 0 <ctf_get_ctt_size>
     8e4:	add	x1, x1, #0x0
     8e8:	ldrb	w0, [x1, w0, uxtw]
     8ec:	adr	x1, 8f8 <ctf_type_aname+0x1b0>
     8f0:	add	x0, x1, w0, sxtb #2
     8f4:	br	x0
     8f8:	adrp	x1, 0 <ctf_get_ctt_size>
     8fc:	mov	x2, x22
     900:	add	x1, x1, #0x0
     904:	add	x0, sp, #0x68
     908:	bl	0 <ctf_decl_sprintf>
     90c:	b	938 <ctf_type_aname+0x1f0>
     910:	adrp	x1, 0 <ctf_get_ctt_size>
     914:	add	x1, x1, #0x0
     918:	add	x0, sp, #0x68
     91c:	bl	0 <ctf_decl_sprintf>
     920:	b	938 <ctf_type_aname+0x1f0>
     924:	ldr	w2, [x21, #28]
     928:	adrp	x1, 0 <ctf_get_ctt_size>
     92c:	add	x0, sp, #0x68
     930:	add	x1, x1, #0x0
     934:	bl	0 <ctf_decl_sprintf>
     938:	ldr	w25, [x21, #24]
     93c:	ldr	x21, [x21, #8]
     940:	b	7f0 <ctf_type_aname+0xa8>
     944:	adrp	x1, 0 <ctf_get_ctt_size>
     948:	add	x1, x1, #0x0
     94c:	b	918 <ctf_type_aname+0x1d0>
     950:	adrp	x1, 0 <ctf_get_ctt_size>
     954:	mov	x2, x22
     958:	add	x1, x1, #0x0
     95c:	b	904 <ctf_type_aname+0x1bc>
     960:	adrp	x1, 0 <ctf_get_ctt_size>
     964:	mov	x2, x22
     968:	add	x1, x1, #0x0
     96c:	b	904 <ctf_type_aname+0x1bc>
     970:	adrp	x1, 0 <ctf_get_ctt_size>
     974:	mov	x2, x22
     978:	add	x1, x1, #0x0
     97c:	b	904 <ctf_type_aname+0x1bc>
     980:	adrp	x1, 0 <ctf_get_ctt_size>
     984:	add	x1, x1, #0x0
     988:	b	918 <ctf_type_aname+0x1d0>
     98c:	adrp	x1, 0 <ctf_get_ctt_size>
     990:	add	x1, x1, #0x0
     994:	b	918 <ctf_type_aname+0x1d0>
     998:	adrp	x1, 0 <ctf_get_ctt_size>
     99c:	add	x1, x1, #0x0
     9a0:	b	918 <ctf_type_aname+0x1d0>

00000000000009a4 <ctf_type_lname>:
     9a4:	stp	x29, x30, [sp, #-64]!
     9a8:	mov	x29, sp
     9ac:	stp	x19, x20, [sp, #16]
     9b0:	stp	x21, x22, [sp, #32]
     9b4:	mov	x22, x0
     9b8:	mov	x21, x3
     9bc:	str	x23, [sp, #48]
     9c0:	mov	x23, x2
     9c4:	bl	748 <ctf_type_aname>
     9c8:	cbz	x0, a24 <ctf_type_lname+0x80>
     9cc:	mov	x20, x0
     9d0:	bl	0 <strlen>
     9d4:	mov	x3, x20
     9d8:	mov	x1, x21
     9dc:	adrp	x2, 0 <ctf_get_ctt_size>
     9e0:	add	x2, x2, #0x0
     9e4:	mov	x19, x0
     9e8:	mov	x0, x23
     9ec:	bl	0 <snprintf>
     9f0:	mov	x0, x20
     9f4:	bl	0 <free>
     9f8:	cmp	x19, x21
     9fc:	b.cc	a0c <ctf_type_lname+0x68>  // b.lo, b.ul, b.last
     a00:	mov	x0, x22
     a04:	mov	w1, #0x401                 	// #1025
     a08:	bl	0 <ctf_set_errno>
     a0c:	mov	x0, x19
     a10:	ldp	x19, x20, [sp, #16]
     a14:	ldp	x21, x22, [sp, #32]
     a18:	ldr	x23, [sp, #48]
     a1c:	ldp	x29, x30, [sp], #64
     a20:	ret
     a24:	mov	x0, #0xffffffffffffffff    	// #-1
     a28:	b	a10 <ctf_type_lname+0x6c>

0000000000000a2c <ctf_type_name>:
     a2c:	stp	x29, x30, [sp, #-32]!
     a30:	mov	x29, sp
     a34:	stp	x19, x20, [sp, #16]
     a38:	mov	x19, x2
     a3c:	mov	x20, x3
     a40:	bl	9a4 <ctf_type_lname>
     a44:	cmp	x0, #0x0
     a48:	ccmp	x0, x20, #0x2, ge  // ge = tcont
     a4c:	csel	x0, x19, xzr, cc  // cc = lo, ul, last
     a50:	ldp	x19, x20, [sp, #16]
     a54:	ldp	x29, x30, [sp], #32
     a58:	ret

0000000000000a5c <ctf_type_aname_raw>:
     a5c:	stp	x29, x30, [sp, #-48]!
     a60:	mov	x29, sp
     a64:	str	x19, [sp, #16]
     a68:	str	x0, [sp, #40]
     a6c:	add	x0, sp, #0x28
     a70:	bl	0 <ctf_lookup_by_id>
     a74:	cbnz	x0, a88 <ctf_type_aname_raw+0x2c>
     a78:	mov	x0, #0x0                   	// #0
     a7c:	ldr	x19, [sp, #16]
     a80:	ldp	x29, x30, [sp], #48
     a84:	ret
     a88:	ldr	w1, [x0]
     a8c:	mov	x19, x0
     a90:	ldr	x0, [sp, #40]
     a94:	bl	0 <ctf_strraw>
     a98:	cbz	x0, a78 <ctf_type_aname_raw+0x1c>
     a9c:	ldr	w1, [x19]
     aa0:	ldr	x0, [sp, #40]
     aa4:	bl	0 <ctf_strraw>
     aa8:	bl	0 <strdup>
     aac:	b	a7c <ctf_type_aname_raw+0x20>

0000000000000ab0 <ctf_type_kind_unsliced>:
     ab0:	stp	x29, x30, [sp, #-32]!
     ab4:	mov	x29, sp
     ab8:	str	x0, [sp, #24]
     abc:	add	x0, sp, #0x18
     ac0:	bl	0 <ctf_lookup_by_id>
     ac4:	cbz	x0, ae4 <ctf_type_kind_unsliced+0x34>
     ac8:	ldr	x1, [sp, #24]
     acc:	ldr	w0, [x0, #4]
     ad0:	ldr	x1, [x1]
     ad4:	ldr	x1, [x1]
     ad8:	blr	x1
     adc:	ldp	x29, x30, [sp], #32
     ae0:	ret
     ae4:	mov	w0, #0xffffffff            	// #-1
     ae8:	b	adc <ctf_type_kind_unsliced+0x2c>

0000000000000aec <ctf_type_reference>:
     aec:	stp	x29, x30, [sp, #-64]!
     af0:	mov	x29, sp
     af4:	stp	x19, x20, [sp, #16]
     af8:	mov	x20, x0
     afc:	str	x0, [sp, #40]
     b00:	add	x0, sp, #0x28
     b04:	bl	0 <ctf_lookup_by_id>
     b08:	cbz	x0, b84 <ctf_type_reference+0x98>
     b0c:	mov	x19, x0
     b10:	ldr	x0, [sp, #40]
     b14:	ldr	x0, [x0]
     b18:	ldr	x1, [x0]
     b1c:	ldr	w0, [x19, #4]
     b20:	blr	x1
     b24:	cmp	w0, #0xd
     b28:	b.hi	b4c <ctf_type_reference+0x60>  // b.pmore
     b2c:	cmp	w0, #0x9
     b30:	b.hi	b74 <ctf_type_reference+0x88>  // b.pmore
     b34:	cmp	w0, #0x3
     b38:	b.eq	b74 <ctf_type_reference+0x88>  // b.none
     b3c:	mov	x0, x20
     b40:	mov	w1, #0x400                 	// #1024
     b44:	bl	0 <ctf_set_errno>
     b48:	b	b78 <ctf_type_reference+0x8c>
     b4c:	cmp	w0, #0xe
     b50:	b.ne	b3c <ctf_type_reference+0x50>  // b.any
     b54:	ldr	x0, [sp, #40]
     b58:	add	x3, sp, #0x38
     b5c:	mov	x1, x19
     b60:	mov	x2, #0x0                   	// #0
     b64:	bl	0 <ctf_get_ctt_size>
     b68:	ldr	x0, [sp, #56]
     b6c:	ldr	w0, [x19, x0]
     b70:	b	b78 <ctf_type_reference+0x8c>
     b74:	ldr	w0, [x19, #8]
     b78:	ldp	x19, x20, [sp, #16]
     b7c:	ldp	x29, x30, [sp], #64
     b80:	ret
     b84:	mov	x0, #0xffffffffffffffff    	// #-1
     b88:	b	b78 <ctf_type_reference+0x8c>

0000000000000b8c <ctf_type_resolve_unsliced>:
     b8c:	stp	x29, x30, [sp, #-48]!
     b90:	mov	x29, sp
     b94:	str	x19, [sp, #16]
     b98:	str	x0, [sp, #40]
     b9c:	bl	2a4 <ctf_type_resolve>
     ba0:	cmn	x0, #0x1
     ba4:	b.ne	bbc <ctf_type_resolve_unsliced+0x30>  // b.any
     ba8:	mov	x19, #0xffffffffffffffff    	// #-1
     bac:	mov	x0, x19
     bb0:	ldr	x19, [sp, #16]
     bb4:	ldp	x29, x30, [sp], #48
     bb8:	ret
     bbc:	mov	x19, x0
     bc0:	mov	x1, x0
     bc4:	add	x0, sp, #0x28
     bc8:	bl	0 <ctf_lookup_by_id>
     bcc:	cbz	x0, ba8 <ctf_type_resolve_unsliced+0x1c>
     bd0:	ldr	x1, [sp, #40]
     bd4:	ldr	w0, [x0, #4]
     bd8:	ldr	x1, [x1]
     bdc:	ldr	x1, [x1]
     be0:	blr	x1
     be4:	cmp	w0, #0xe
     be8:	b.ne	bac <ctf_type_resolve_unsliced+0x20>  // b.any
     bec:	ldr	x0, [sp, #40]
     bf0:	mov	x1, x19
     bf4:	bl	aec <ctf_type_reference>
     bf8:	mov	x19, x0
     bfc:	b	bac <ctf_type_resolve_unsliced+0x20>

0000000000000c00 <ctf_enum_iter>:
     c00:	stp	x29, x30, [sp, #-96]!
     c04:	mov	x29, sp
     c08:	stp	x19, x20, [sp, #16]
     c0c:	stp	x21, x22, [sp, #32]
     c10:	mov	x21, x2
     c14:	mov	x22, x3
     c18:	str	x23, [sp, #48]
     c1c:	mov	x23, x0
     c20:	str	x0, [sp, #72]
     c24:	bl	b8c <ctf_type_resolve_unsliced>
     c28:	cmn	x0, #0x1
     c2c:	b.ne	c48 <ctf_enum_iter+0x48>  // b.any
     c30:	mov	w0, #0xffffffff            	// #-1
     c34:	ldp	x19, x20, [sp, #16]
     c38:	ldp	x21, x22, [sp, #32]
     c3c:	ldr	x23, [sp, #48]
     c40:	ldp	x29, x30, [sp], #96
     c44:	ret
     c48:	mov	x1, x0
     c4c:	mov	x20, x0
     c50:	add	x0, sp, #0x48
     c54:	bl	0 <ctf_lookup_by_id>
     c58:	mov	x19, x0
     c5c:	cbz	x0, c30 <ctf_enum_iter+0x30>
     c60:	ldr	x0, [sp, #72]
     c64:	ldr	x0, [x0]
     c68:	ldr	x1, [x0]
     c6c:	ldr	w0, [x19, #4]
     c70:	blr	x1
     c74:	cmp	w0, #0x8
     c78:	b.eq	c8c <ctf_enum_iter+0x8c>  // b.none
     c7c:	mov	x0, x23
     c80:	mov	w1, #0x3fc                 	// #1020
     c84:	bl	0 <ctf_set_errno>
     c88:	b	c34 <ctf_enum_iter+0x34>
     c8c:	ldr	x0, [sp, #72]
     c90:	add	x3, sp, #0x58
     c94:	mov	x2, #0x0                   	// #0
     c98:	mov	x1, x19
     c9c:	bl	0 <ctf_get_ctt_size>
     ca0:	mov	x1, x20
     ca4:	mov	x0, x23
     ca8:	bl	0 <ctf_dynamic_type>
     cac:	cbnz	x0, d04 <ctf_enum_iter+0x104>
     cb0:	ldr	x0, [sp, #72]
     cb4:	ldr	x20, [sp, #88]
     cb8:	ldr	x0, [x0]
     cbc:	add	x20, x19, x20
     cc0:	ldr	x1, [x0, #16]
     cc4:	ldr	w0, [x19, #4]
     cc8:	blr	x1
     ccc:	mov	w19, w0
     cd0:	cbnz	w19, cdc <ctf_enum_iter+0xdc>
     cd4:	mov	w0, #0x0                   	// #0
     cd8:	b	c34 <ctf_enum_iter+0x34>
     cdc:	ldr	w1, [x20]
     ce0:	ldr	x0, [sp, #72]
     ce4:	bl	0 <ctf_strptr>
     ce8:	ldr	w1, [x20, #4]
     cec:	mov	x2, x22
     cf0:	blr	x21
     cf4:	cbnz	w0, c34 <ctf_enum_iter+0x34>
     cf8:	sub	w19, w19, #0x1
     cfc:	add	x20, x20, #0x8
     d00:	b	cd0 <ctf_enum_iter+0xd0>
     d04:	ldr	x19, [x0, #56]
     d08:	cbz	x19, cd4 <ctf_enum_iter+0xd4>
     d0c:	ldr	w1, [x19, #40]
     d10:	mov	x2, x22
     d14:	ldr	x0, [x19, #16]
     d18:	blr	x21
     d1c:	cbnz	w0, c34 <ctf_enum_iter+0x34>
     d20:	ldr	x19, [x19, #8]
     d24:	b	d08 <ctf_enum_iter+0x108>

0000000000000d28 <ctf_type_kind>:
     d28:	stp	x29, x30, [sp, #-32]!
     d2c:	mov	x29, sp
     d30:	stp	x19, x20, [sp, #16]
     d34:	mov	x19, x0
     d38:	mov	x20, x1
     d3c:	bl	ab0 <ctf_type_kind_unsliced>
     d40:	tbz	w0, #31, d54 <ctf_type_kind+0x2c>
     d44:	mov	w0, #0xffffffff            	// #-1
     d48:	ldp	x19, x20, [sp, #16]
     d4c:	ldp	x29, x30, [sp], #32
     d50:	ret
     d54:	cmp	w0, #0xe
     d58:	b.ne	d48 <ctf_type_kind+0x20>  // b.any
     d5c:	mov	x1, x20
     d60:	mov	x0, x19
     d64:	bl	aec <ctf_type_reference>
     d68:	mov	x1, x0
     d6c:	cmn	x0, #0x1
     d70:	b.eq	d44 <ctf_type_kind+0x1c>  // b.none
     d74:	mov	x0, x19
     d78:	ldp	x19, x20, [sp, #16]
     d7c:	ldp	x29, x30, [sp], #32
     d80:	b	ab0 <ctf_type_kind_unsliced>

0000000000000d84 <ctf_type_pointer>:
     d84:	stp	x29, x30, [sp, #-48]!
     d88:	mov	x29, sp
     d8c:	stp	x19, x20, [sp, #16]
     d90:	mov	x20, x0
     d94:	mov	x19, x1
     d98:	str	x0, [sp, #40]
     d9c:	add	x0, sp, #0x28
     da0:	bl	0 <ctf_lookup_by_id>
     da4:	cbz	x0, e48 <ctf_type_pointer+0xc4>
     da8:	ldr	x2, [sp, #40]
     dac:	ldr	w1, [x2, #544]
     db0:	ldr	x0, [x2, #448]
     db4:	and	w3, w1, w19
     db8:	ldr	w3, [x0, x3, lsl #2]
     dbc:	mov	w0, w3
     dc0:	cbz	w3, de0 <ctf_type_pointer+0x5c>
     dc4:	ldr	w2, [x2, #552]
     dc8:	tbz	w2, #0, dd4 <ctf_type_pointer+0x50>
     dcc:	add	w0, w1, #0x1
     dd0:	orr	w0, w0, w3
     dd4:	ldp	x19, x20, [sp, #16]
     dd8:	ldp	x29, x30, [sp], #48
     ddc:	ret
     de0:	mov	x1, x19
     de4:	mov	x0, x2
     de8:	bl	2a4 <ctf_type_resolve>
     dec:	mov	x19, x0
     df0:	cmn	x0, #0x1
     df4:	b.ne	e08 <ctf_type_pointer+0x84>  // b.any
     df8:	mov	x0, x20
     dfc:	mov	w1, #0x402                 	// #1026
     e00:	bl	0 <ctf_set_errno>
     e04:	b	dd4 <ctf_type_pointer+0x50>
     e08:	mov	x1, x0
     e0c:	add	x0, sp, #0x28
     e10:	bl	0 <ctf_lookup_by_id>
     e14:	cbz	x0, df8 <ctf_type_pointer+0x74>
     e18:	ldr	x3, [sp, #40]
     e1c:	ldr	w1, [x3, #544]
     e20:	ldr	x0, [x3, #448]
     e24:	and	w19, w1, w19
     e28:	ldr	w2, [x0, x19, lsl #2]
     e2c:	mov	w0, w2
     e30:	cbz	w2, df8 <ctf_type_pointer+0x74>
     e34:	ldr	w3, [x3, #552]
     e38:	tbz	w3, #0, dd4 <ctf_type_pointer+0x50>
     e3c:	add	w0, w1, #0x1
     e40:	orr	w0, w0, w2
     e44:	b	dd4 <ctf_type_pointer+0x50>
     e48:	mov	x0, #0xffffffffffffffff    	// #-1
     e4c:	b	dd4 <ctf_type_pointer+0x50>

0000000000000e50 <ctf_type_encoding>:
     e50:	stp	x29, x30, [sp, #-96]!
     e54:	mov	x29, sp
     e58:	stp	x19, x20, [sp, #16]
     e5c:	mov	x19, x2
     e60:	stp	x21, x22, [sp, #32]
     e64:	mov	x22, x0
     e68:	mov	x21, x1
     e6c:	str	x0, [sp, #56]
     e70:	add	x0, sp, #0x38
     e74:	bl	0 <ctf_lookup_by_id>
     e78:	cbz	x0, fa8 <ctf_type_encoding+0x158>
     e7c:	mov	x1, x21
     e80:	mov	x20, x0
     e84:	mov	x0, x22
     e88:	bl	0 <ctf_dynamic_type>
     e8c:	mov	x21, x0
     e90:	cbz	x0, f18 <ctf_type_encoding+0xc8>
     e94:	ldr	x0, [sp, #56]
     e98:	ldr	x0, [x0]
     e9c:	ldr	x1, [x0]
     ea0:	ldr	w0, [x20, #4]
     ea4:	blr	x1
     ea8:	cmp	w0, #0x2
     eac:	b.hi	ed8 <ctf_type_encoding+0x88>  // b.pmore
     eb0:	cbz	w0, ee0 <ctf_type_encoding+0x90>
     eb4:	ldr	x0, [x21, #48]
     eb8:	str	x0, [x19]
     ebc:	ldr	w0, [x21, #56]
     ec0:	str	w0, [x19, #8]
     ec4:	mov	w0, #0x0                   	// #0
     ec8:	ldp	x19, x20, [sp, #16]
     ecc:	ldp	x21, x22, [sp, #32]
     ed0:	ldp	x29, x30, [sp], #96
     ed4:	ret
     ed8:	cmp	w0, #0xe
     edc:	b.eq	ef0 <ctf_type_encoding+0xa0>  // b.none
     ee0:	mov	x0, x22
     ee4:	mov	w1, #0x3fe                 	// #1022
     ee8:	bl	0 <ctf_set_errno>
     eec:	b	ec8 <ctf_type_encoding+0x78>
     ef0:	ldr	w1, [x21, #48]
     ef4:	add	x2, sp, #0x50
     ef8:	ldr	x0, [sp, #56]
     efc:	bl	e50 <ctf_type_encoding>
     f00:	ldr	w0, [sp, #80]
     f04:	str	w0, [x19]
     f08:	ldrh	w0, [x21, #52]
     f0c:	str	w0, [x19, #4]
     f10:	ldrh	w0, [x21, #54]
     f14:	b	ec0 <ctf_type_encoding+0x70>
     f18:	ldr	x0, [sp, #56]
     f1c:	add	x3, sp, #0x48
     f20:	mov	x1, x20
     f24:	mov	x2, #0x0                   	// #0
     f28:	bl	0 <ctf_get_ctt_size>
     f2c:	ldr	x0, [sp, #56]
     f30:	ldr	x0, [x0]
     f34:	ldr	x1, [x0]
     f38:	ldr	w0, [x20, #4]
     f3c:	blr	x1
     f40:	cmp	w0, #0x2
     f44:	b.eq	f58 <ctf_type_encoding+0x108>  // b.none
     f48:	cmp	w0, #0xe
     f4c:	b.eq	f78 <ctf_type_encoding+0x128>  // b.none
     f50:	cmp	w0, #0x1
     f54:	b.ne	ee0 <ctf_type_encoding+0x90>  // b.any
     f58:	ldr	x0, [sp, #72]
     f5c:	ldr	w0, [x20, x0]
     f60:	lsr	w1, w0, #24
     f64:	str	w1, [x19]
     f68:	ubfx	x1, x0, #16, #8
     f6c:	and	w0, w0, #0xffff
     f70:	str	w1, [x19, #4]
     f74:	b	ec0 <ctf_type_encoding+0x70>
     f78:	ldr	x0, [sp, #72]
     f7c:	add	x2, sp, #0x50
     f80:	add	x21, x20, x0
     f84:	ldr	w1, [x20, x0]
     f88:	ldr	x0, [sp, #56]
     f8c:	bl	e50 <ctf_type_encoding>
     f90:	ldr	w0, [sp, #80]
     f94:	str	w0, [x19]
     f98:	ldrh	w0, [x21, #4]
     f9c:	str	w0, [x19, #4]
     fa0:	ldrh	w0, [x21, #6]
     fa4:	b	ec0 <ctf_type_encoding+0x70>
     fa8:	mov	w0, #0xffffffff            	// #-1
     fac:	b	ec8 <ctf_type_encoding+0x78>

0000000000000fb0 <ctf_type_cmp>:
     fb0:	cmp	x1, x3
     fb4:	mov	x4, x0
     fb8:	cset	w0, hi  // hi = pmore
     fbc:	csinv	w0, w0, wzr, cs  // cs = hs, nlast
     fc0:	cmp	x4, x2
     fc4:	b.eq	1004 <ctf_type_cmp+0x54>  // b.none
     fc8:	ldr	w5, [x4, #544]
     fcc:	cmp	x5, x1
     fd0:	b.cc	fe0 <ctf_type_cmp+0x30>  // b.lo, b.ul, b.last
     fd4:	ldr	x1, [x4, #512]
     fd8:	cmp	x1, #0x0
     fdc:	csel	x4, x4, x1, eq  // eq = none
     fe0:	ldr	w1, [x2, #544]
     fe4:	cmp	x1, x3
     fe8:	b.cc	ff8 <ctf_type_cmp+0x48>  // b.lo, b.ul, b.last
     fec:	ldr	x1, [x2, #512]
     ff0:	cmp	x1, #0x0
     ff4:	csel	x2, x2, x1, eq  // eq = none
     ff8:	cmp	x4, x2
     ffc:	csinc	w0, w0, wzr, ls  // ls = plast
    1000:	csinv	w0, w0, wzr, cs  // cs = hs, nlast
    1004:	ret

0000000000001008 <ctf_member_info>:
    1008:	stp	x29, x30, [sp, #-96]!
    100c:	mov	x29, sp
    1010:	stp	x19, x20, [sp, #16]
    1014:	mov	x20, x3
    1018:	stp	x21, x22, [sp, #32]
    101c:	mov	x21, x2
    1020:	mov	x22, x0
    1024:	str	x23, [sp, #48]
    1028:	str	x0, [sp, #72]
    102c:	bl	2a4 <ctf_type_resolve>
    1030:	cmn	x0, #0x1
    1034:	b.ne	1050 <ctf_member_info+0x48>  // b.any
    1038:	mov	w0, #0xffffffff            	// #-1
    103c:	ldp	x19, x20, [sp, #16]
    1040:	ldp	x21, x22, [sp, #32]
    1044:	ldr	x23, [sp, #48]
    1048:	ldp	x29, x30, [sp], #96
    104c:	ret
    1050:	mov	x1, x0
    1054:	mov	x23, x0
    1058:	add	x0, sp, #0x48
    105c:	bl	0 <ctf_lookup_by_id>
    1060:	mov	x19, x0
    1064:	cbz	x0, 1038 <ctf_member_info+0x30>
    1068:	mov	x1, x0
    106c:	add	x3, sp, #0x58
    1070:	ldr	x0, [sp, #72]
    1074:	add	x2, sp, #0x50
    1078:	bl	0 <ctf_get_ctt_size>
    107c:	ldr	x0, [sp, #72]
    1080:	ldr	x0, [x0]
    1084:	ldr	x1, [x0]
    1088:	ldr	w0, [x19, #4]
    108c:	blr	x1
    1090:	sub	w0, w0, #0x6
    1094:	cmp	w0, #0x1
    1098:	b.ls	10ac <ctf_member_info+0xa4>  // b.plast
    109c:	mov	w1, #0x3fb                 	// #1019
    10a0:	mov	x0, x22
    10a4:	bl	0 <ctf_set_errno>
    10a8:	b	103c <ctf_member_info+0x34>
    10ac:	ldr	x0, [sp, #72]
    10b0:	mov	x1, x23
    10b4:	bl	0 <ctf_dynamic_type>
    10b8:	cbnz	x0, 1170 <ctf_member_info+0x168>
    10bc:	ldp	x0, x3, [sp, #72]
    10c0:	ldr	x2, [sp, #88]
    10c4:	ldr	x0, [x0]
    10c8:	ldr	x1, [x0, #16]
    10cc:	ldr	w0, [x19, #4]
    10d0:	add	x19, x19, x2
    10d4:	mov	x2, #0x1fffffff            	// #536870911
    10d8:	cmp	x3, x2
    10dc:	b.gt	112c <ctf_member_info+0x124>
    10e0:	blr	x1
    10e4:	mov	w23, w0
    10e8:	cbnz	w23, 10f4 <ctf_member_info+0xec>
    10ec:	mov	w1, #0x40c                 	// #1036
    10f0:	b	10a0 <ctf_member_info+0x98>
    10f4:	ldr	w1, [x19]
    10f8:	ldr	x0, [sp, #72]
    10fc:	bl	0 <ctf_strptr>
    1100:	mov	x1, x21
    1104:	bl	0 <strcmp>
    1108:	cbnz	w0, 1120 <ctf_member_info+0x118>
    110c:	ldr	w1, [x19, #8]
    1110:	str	x1, [x20]
    1114:	ldr	w1, [x19, #4]
    1118:	str	x1, [x20, #8]
    111c:	b	103c <ctf_member_info+0x34>
    1120:	sub	w23, w23, #0x1
    1124:	add	x19, x19, #0xc
    1128:	b	10e8 <ctf_member_info+0xe0>
    112c:	blr	x1
    1130:	mov	w23, w0
    1134:	cbz	w23, 10ec <ctf_member_info+0xe4>
    1138:	ldr	w1, [x19]
    113c:	ldr	x0, [sp, #72]
    1140:	bl	0 <ctf_strptr>
    1144:	mov	x1, x21
    1148:	bl	0 <strcmp>
    114c:	cbnz	w0, 1164 <ctf_member_info+0x15c>
    1150:	ldp	w1, w2, [x19, #8]
    1154:	str	x1, [x20]
    1158:	ldr	w1, [x19, #4]
    115c:	orr	x1, x2, x1, lsl #32
    1160:	b	1118 <ctf_member_info+0x110>
    1164:	sub	w23, w23, #0x1
    1168:	add	x19, x19, #0x10
    116c:	b	1134 <ctf_member_info+0x12c>
    1170:	ldr	x19, [x0, #56]
    1174:	cbz	x19, 10ec <ctf_member_info+0xe4>
    1178:	ldr	x0, [x19, #16]
    117c:	mov	x1, x21
    1180:	bl	0 <strcmp>
    1184:	cbnz	w0, 1198 <ctf_member_info+0x190>
    1188:	ldr	x1, [x19, #24]
    118c:	str	x1, [x20]
    1190:	ldr	x1, [x19, #32]
    1194:	b	1118 <ctf_member_info+0x110>
    1198:	ldr	x19, [x19, #8]
    119c:	b	1174 <ctf_member_info+0x16c>

00000000000011a0 <ctf_array_info>:
    11a0:	stp	x29, x30, [sp, #-80]!
    11a4:	mov	x29, sp
    11a8:	stp	x19, x20, [sp, #16]
    11ac:	mov	x19, x2
    11b0:	stp	x21, x22, [sp, #32]
    11b4:	mov	x21, x0
    11b8:	mov	x22, x1
    11bc:	str	x0, [sp, #56]
    11c0:	add	x0, sp, #0x38
    11c4:	bl	0 <ctf_lookup_by_id>
    11c8:	cbz	x0, 1264 <ctf_array_info+0xc4>
    11cc:	mov	x20, x0
    11d0:	ldr	x0, [sp, #56]
    11d4:	ldr	x0, [x0]
    11d8:	ldr	x1, [x0]
    11dc:	ldr	w0, [x20, #4]
    11e0:	blr	x1
    11e4:	cmp	w0, #0x4
    11e8:	b.eq	1208 <ctf_array_info+0x68>  // b.none
    11ec:	mov	x0, x21
    11f0:	mov	w1, #0x3ff                 	// #1023
    11f4:	bl	0 <ctf_set_errno>
    11f8:	ldp	x19, x20, [sp, #16]
    11fc:	ldp	x21, x22, [sp, #32]
    1200:	ldp	x29, x30, [sp], #80
    1204:	ret
    1208:	mov	x1, x22
    120c:	mov	x0, x21
    1210:	bl	0 <ctf_dynamic_type>
    1214:	cbz	x0, 1230 <ctf_array_info+0x90>
    1218:	ldp	x2, x3, [x0, #48]
    121c:	stp	x2, x3, [x19]
    1220:	ldr	x0, [x0, #64]
    1224:	str	x0, [x19, #16]
    1228:	mov	w0, #0x0                   	// #0
    122c:	b	11f8 <ctf_array_info+0x58>
    1230:	ldr	x0, [sp, #56]
    1234:	mov	x1, x20
    1238:	add	x3, sp, #0x48
    123c:	mov	x2, #0x0                   	// #0
    1240:	bl	0 <ctf_get_ctt_size>
    1244:	ldr	x1, [sp, #72]
    1248:	add	x0, x20, x1
    124c:	ldr	w1, [x20, x1]
    1250:	str	x1, [x19]
    1254:	ldp	w1, w0, [x0, #4]
    1258:	str	x1, [x19, #8]
    125c:	str	w0, [x19, #16]
    1260:	b	1228 <ctf_array_info+0x88>
    1264:	mov	w0, #0xffffffff            	// #-1
    1268:	b	11f8 <ctf_array_info+0x58>

000000000000126c <ctf_type_size>:
    126c:	stp	x29, x30, [sp, #-80]!
    1270:	mov	x29, sp
    1274:	stp	x19, x20, [sp, #16]
    1278:	str	x0, [sp, #40]
    127c:	bl	2a4 <ctf_type_resolve>
    1280:	cmn	x0, #0x1
    1284:	b.ne	1298 <ctf_type_size+0x2c>  // b.any
    1288:	mov	x0, #0xffffffffffffffff    	// #-1
    128c:	ldp	x19, x20, [sp, #16]
    1290:	ldp	x29, x30, [sp], #80
    1294:	ret
    1298:	mov	x1, x0
    129c:	mov	x20, x0
    12a0:	add	x0, sp, #0x28
    12a4:	bl	0 <ctf_lookup_by_id>
    12a8:	mov	x19, x0
    12ac:	cbz	x0, 1288 <ctf_type_size+0x1c>
    12b0:	ldr	x0, [sp, #40]
    12b4:	ldr	x0, [x0]
    12b8:	ldr	x1, [x0]
    12bc:	ldr	w0, [x19, #4]
    12c0:	blr	x1
    12c4:	sub	w0, w0, #0x3
    12c8:	cmp	w0, #0x5
    12cc:	b.hi	1354 <ctf_type_size+0xe8>  // b.pmore
    12d0:	adrp	x1, 0 <ctf_get_ctt_size>
    12d4:	add	x1, x1, #0x0
    12d8:	ldrb	w0, [x1, w0, uxtw]
    12dc:	adr	x1, 12e8 <ctf_type_size+0x7c>
    12e0:	add	x0, x1, w0, sxtb #2
    12e4:	br	x0
    12e8:	ldr	x0, [sp, #40]
    12ec:	ldr	x0, [x0, #488]
    12f0:	ldr	x0, [x0, #16]
    12f4:	b	128c <ctf_type_size+0x20>
    12f8:	ldr	x0, [sp, #40]
    12fc:	ldr	x0, [x0, #488]
    1300:	ldr	x0, [x0, #40]
    1304:	b	128c <ctf_type_size+0x20>
    1308:	ldr	x0, [sp, #40]
    130c:	mov	x1, x19
    1310:	mov	x3, #0x0                   	// #0
    1314:	mov	x2, #0x0                   	// #0
    1318:	bl	0 <ctf_get_ctt_size>
    131c:	cmp	x0, #0x0
    1320:	b.gt	128c <ctf_type_size+0x20>
    1324:	ldr	x0, [sp, #40]
    1328:	add	x2, sp, #0x38
    132c:	mov	x1, x20
    1330:	bl	11a0 <ctf_array_info>
    1334:	tbnz	w0, #31, 1288 <ctf_type_size+0x1c>
    1338:	ldr	x0, [sp, #40]
    133c:	ldr	x1, [sp, #56]
    1340:	bl	126c <ctf_type_size>
    1344:	tbnz	x0, #63, 1288 <ctf_type_size+0x1c>
    1348:	ldr	w1, [sp, #72]
    134c:	mul	x0, x1, x0
    1350:	b	128c <ctf_type_size+0x20>
    1354:	ldr	x0, [sp, #40]
    1358:	mov	x1, x19
    135c:	mov	x3, #0x0                   	// #0
    1360:	mov	x2, #0x0                   	// #0
    1364:	bl	0 <ctf_get_ctt_size>
    1368:	b	128c <ctf_type_size+0x20>
    136c:	mov	x0, #0x0                   	// #0
    1370:	b	128c <ctf_type_size+0x20>

0000000000001374 <ctf_type_align>:
    1374:	stp	x29, x30, [sp, #-96]!
    1378:	mov	x29, sp
    137c:	stp	x19, x20, [sp, #16]
    1380:	stp	x21, x22, [sp, #32]
    1384:	mov	x21, x0
    1388:	str	x0, [sp, #56]
    138c:	bl	2a4 <ctf_type_resolve>
    1390:	cmn	x0, #0x1
    1394:	b.ne	13a0 <ctf_type_align+0x2c>  // b.any
    1398:	mov	x0, #0xffffffffffffffff    	// #-1
    139c:	b	1400 <ctf_type_align+0x8c>
    13a0:	mov	x1, x0
    13a4:	mov	x20, x0
    13a8:	add	x0, sp, #0x38
    13ac:	bl	0 <ctf_lookup_by_id>
    13b0:	mov	x19, x0
    13b4:	cbz	x0, 1398 <ctf_type_align+0x24>
    13b8:	ldr	x0, [sp, #56]
    13bc:	ldr	x0, [x0]
    13c0:	ldr	x1, [x0]
    13c4:	ldr	w0, [x19, #4]
    13c8:	blr	x1
    13cc:	sub	w1, w0, #0x3
    13d0:	mov	w22, w0
    13d4:	cmp	w1, #0x5
    13d8:	b.hi	1528 <ctf_type_align+0x1b4>  // b.pmore
    13dc:	adrp	x0, 0 <ctf_get_ctt_size>
    13e0:	add	x0, x0, #0x0
    13e4:	ldrb	w0, [x0, w1, uxtw]
    13e8:	adr	x1, 13f4 <ctf_type_align+0x80>
    13ec:	add	x0, x1, w0, sxtb #2
    13f0:	br	x0
    13f4:	ldr	x0, [sp, #56]
    13f8:	ldr	x0, [x0, #488]
    13fc:	ldr	x0, [x0, #16]
    1400:	ldp	x19, x20, [sp, #16]
    1404:	ldp	x21, x22, [sp, #32]
    1408:	ldp	x29, x30, [sp], #96
    140c:	ret
    1410:	ldr	x0, [sp, #56]
    1414:	add	x2, sp, #0x48
    1418:	mov	x1, x20
    141c:	bl	11a0 <ctf_array_info>
    1420:	tbnz	w0, #31, 1398 <ctf_type_align+0x24>
    1424:	ldr	x0, [sp, #56]
    1428:	ldr	x1, [sp, #72]
    142c:	bl	1374 <ctf_type_align>
    1430:	b	1400 <ctf_type_align+0x8c>
    1434:	mov	x1, x20
    1438:	mov	x0, x21
    143c:	bl	0 <ctf_dynamic_type>
    1440:	cbnz	x0, 14e8 <ctf_type_align+0x174>
    1444:	ldr	x0, [sp, #56]
    1448:	ldr	x0, [x0]
    144c:	ldr	x1, [x0, #16]
    1450:	ldr	w0, [x19, #4]
    1454:	blr	x1
    1458:	mov	w21, w0
    145c:	ldr	x0, [sp, #56]
    1460:	add	x3, sp, #0x48
    1464:	add	x2, sp, #0x40
    1468:	mov	x1, x19
    146c:	bl	0 <ctf_get_ctt_size>
    1470:	ldr	x20, [sp, #72]
    1474:	cmp	w22, #0x6
    1478:	add	x20, x19, x20
    147c:	b.ne	1488 <ctf_type_align+0x114>  // b.any
    1480:	cmp	w21, #0x0
    1484:	cset	w21, ne  // ne = any
    1488:	ldr	x1, [sp, #64]
    148c:	mov	x0, #0x1fffffff            	// #536870911
    1490:	mov	x19, #0x0                   	// #0
    1494:	cmp	x1, x0
    1498:	b.le	14dc <ctf_type_align+0x168>
    149c:	cbz	w21, 14e0 <ctf_type_align+0x16c>
    14a0:	ldr	w1, [x20, #8]
    14a4:	sub	w21, w21, #0x1
    14a8:	ldr	x0, [sp, #56]
    14ac:	add	x20, x20, #0x10
    14b0:	bl	1374 <ctf_type_align>
    14b4:	cmp	x19, x0
    14b8:	csel	x19, x19, x0, cs  // cs = hs, nlast
    14bc:	b	149c <ctf_type_align+0x128>
    14c0:	ldr	w1, [x20, #8]
    14c4:	sub	w21, w21, #0x1
    14c8:	ldr	x0, [sp, #56]
    14cc:	add	x20, x20, #0xc
    14d0:	bl	1374 <ctf_type_align>
    14d4:	cmp	x19, x0
    14d8:	csel	x19, x19, x0, cs  // cs = hs, nlast
    14dc:	cbnz	w21, 14c0 <ctf_type_align+0x14c>
    14e0:	mov	x0, x19
    14e4:	b	1400 <ctf_type_align+0x8c>
    14e8:	ldr	x20, [x0, #56]
    14ec:	mov	x19, #0x0                   	// #0
    14f0:	cbz	x20, 14e0 <ctf_type_align+0x16c>
    14f4:	ldr	x1, [x20, #24]
    14f8:	ldr	x0, [sp, #56]
    14fc:	bl	1374 <ctf_type_align>
    1500:	cmp	x19, x0
    1504:	csel	x19, x19, x0, cs  // cs = hs, nlast
    1508:	cmp	w22, #0x6
    150c:	b.eq	14e0 <ctf_type_align+0x16c>  // b.none
    1510:	ldr	x20, [x20, #8]
    1514:	b	14f0 <ctf_type_align+0x17c>
    1518:	ldr	x0, [sp, #56]
    151c:	ldr	x0, [x0, #488]
    1520:	ldr	x0, [x0, #40]
    1524:	b	1400 <ctf_type_align+0x8c>
    1528:	ldr	x0, [sp, #56]
    152c:	mov	x1, x19
    1530:	mov	x3, #0x0                   	// #0
    1534:	mov	x2, #0x0                   	// #0
    1538:	bl	0 <ctf_get_ctt_size>
    153c:	b	1400 <ctf_type_align+0x8c>

0000000000001540 <ctf_type_compat>:
    1540:	stp	x29, x30, [sp, #-128]!
    1544:	mov	x7, x1
    1548:	mov	x6, x0
    154c:	mov	x29, sp
    1550:	stp	x19, x20, [sp, #16]
    1554:	stp	x21, x22, [sp, #32]
    1558:	stp	x23, x24, [sp, #48]
    155c:	stp	x2, x0, [sp, #64]
    1560:	bl	fb0 <ctf_type_cmp>
    1564:	cbnz	w0, 1584 <ctf_type_compat+0x44>
    1568:	mov	w19, #0x1                   	// #1
    156c:	mov	w0, w19
    1570:	ldp	x19, x20, [sp, #16]
    1574:	ldp	x21, x22, [sp, #32]
    1578:	ldp	x23, x24, [sp, #48]
    157c:	ldp	x29, x30, [sp], #128
    1580:	ret
    1584:	mov	x19, x3
    1588:	mov	x1, x7
    158c:	mov	x0, x6
    1590:	bl	2a4 <ctf_type_resolve>
    1594:	mov	x1, x0
    1598:	mov	x21, x0
    159c:	ldr	x0, [sp, #72]
    15a0:	bl	d28 <ctf_type_kind>
    15a4:	mov	w22, w0
    15a8:	ldr	x0, [sp, #64]
    15ac:	mov	x1, x19
    15b0:	bl	2a4 <ctf_type_resolve>
    15b4:	mov	x1, x0
    15b8:	mov	x20, x0
    15bc:	ldr	x0, [sp, #64]
    15c0:	bl	d28 <ctf_type_kind>
    15c4:	mov	w23, w0
    15c8:	mov	x1, x21
    15cc:	add	x0, sp, #0x48
    15d0:	bl	0 <ctf_lookup_by_id>
    15d4:	mov	x24, x0
    15d8:	mov	x1, x20
    15dc:	add	x0, sp, #0x40
    15e0:	bl	0 <ctf_lookup_by_id>
    15e4:	mov	x19, x0
    15e8:	cmp	x24, #0x0
    15ec:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    15f0:	b.eq	1668 <ctf_type_compat+0x128>  // b.none
    15f4:	ldr	w1, [x24]
    15f8:	ldr	x0, [sp, #72]
    15fc:	bl	0 <ctf_strptr>
    1600:	mov	x24, x0
    1604:	ldr	w1, [x19]
    1608:	ldr	x0, [sp, #64]
    160c:	bl	0 <ctf_strptr>
    1610:	mov	x1, x0
    1614:	mov	x0, x24
    1618:	bl	0 <strcmp>
    161c:	cmp	w0, #0x0
    1620:	cset	w19, eq  // eq = none
    1624:	cmp	w22, #0x8
    1628:	ccmp	w23, #0x1, #0x0, eq  // eq = none
    162c:	b.eq	1568 <ctf_type_compat+0x28>  // b.none
    1630:	cmp	w23, #0x8
    1634:	ccmp	w22, #0x1, #0x0, eq  // eq = none
    1638:	b.eq	1568 <ctf_type_compat+0x28>  // b.none
    163c:	cmp	w22, w23
    1640:	b.ne	17d8 <ctf_type_compat+0x298>  // b.any
    1644:	sub	w22, w22, #0x1
    1648:	cmp	w22, #0x8
    164c:	b.hi	17d8 <ctf_type_compat+0x298>  // b.pmore
    1650:	adrp	x0, 0 <ctf_get_ctt_size>
    1654:	add	x0, x0, #0x0
    1658:	ldrb	w0, [x0, w22, uxtw]
    165c:	adr	x1, 1668 <ctf_type_compat+0x128>
    1660:	add	x0, x1, w0, sxtb #2
    1664:	br	x0
    1668:	mov	w19, #0x0                   	// #0
    166c:	b	1624 <ctf_type_compat+0xe4>
    1670:	ldr	x0, [sp, #72]
    1674:	add	x2, sp, #0x50
    1678:	mov	x1, x21
    167c:	str	xzr, [sp, #80]
    1680:	str	wzr, [sp, #88]
    1684:	str	xzr, [sp, #104]
    1688:	str	wzr, [sp, #112]
    168c:	bl	e50 <ctf_type_encoding>
    1690:	cbnz	w0, 17d8 <ctf_type_compat+0x298>
    1694:	ldr	x0, [sp, #64]
    1698:	add	x2, sp, #0x68
    169c:	mov	x1, x20
    16a0:	bl	e50 <ctf_type_encoding>
    16a4:	cbnz	w0, 17d8 <ctf_type_compat+0x298>
    16a8:	add	x1, sp, #0x68
    16ac:	add	x0, sp, #0x50
    16b0:	mov	x2, #0xc                   	// #12
    16b4:	bl	0 <memcmp>
    16b8:	cmp	w0, #0x0
    16bc:	cset	w19, eq  // eq = none
    16c0:	b	156c <ctf_type_compat+0x2c>
    16c4:	ldr	x22, [sp, #72]
    16c8:	mov	x1, x21
    16cc:	mov	x0, x22
    16d0:	bl	aec <ctf_type_reference>
    16d4:	ldr	x21, [sp, #64]
    16d8:	mov	x19, x0
    16dc:	mov	x1, x20
    16e0:	mov	x0, x21
    16e4:	bl	aec <ctf_type_reference>
    16e8:	mov	x1, x19
    16ec:	mov	x3, x0
    16f0:	mov	x2, x21
    16f4:	mov	x0, x22
    16f8:	bl	1540 <ctf_type_compat>
    16fc:	mov	w19, w0
    1700:	b	156c <ctf_type_compat+0x2c>
    1704:	ldr	x0, [sp, #72]
    1708:	add	x2, sp, #0x50
    170c:	mov	x1, x21
    1710:	bl	11a0 <ctf_array_info>
    1714:	cbnz	w0, 17d8 <ctf_type_compat+0x298>
    1718:	ldr	x0, [sp, #64]
    171c:	add	x2, sp, #0x68
    1720:	mov	x1, x20
    1724:	bl	11a0 <ctf_array_info>
    1728:	cbnz	w0, 17d8 <ctf_type_compat+0x298>
    172c:	ldr	w1, [sp, #96]
    1730:	ldr	w0, [sp, #120]
    1734:	cmp	w1, w0
    1738:	b.ne	17d8 <ctf_type_compat+0x298>  // b.any
    173c:	ldp	x2, x0, [sp, #64]
    1740:	ldr	x1, [sp, #80]
    1744:	ldr	x3, [sp, #104]
    1748:	bl	1540 <ctf_type_compat>
    174c:	cbz	w0, 17d8 <ctf_type_compat+0x298>
    1750:	ldp	x2, x0, [sp, #64]
    1754:	ldr	x1, [sp, #88]
    1758:	ldr	x3, [sp, #112]
    175c:	bl	1540 <ctf_type_compat>
    1760:	cmp	w0, #0x0
    1764:	cset	w19, ne  // ne = any
    1768:	b	156c <ctf_type_compat+0x2c>
    176c:	cbz	w19, 17d8 <ctf_type_compat+0x298>
    1770:	ldr	x0, [sp, #72]
    1774:	mov	x1, x21
    1778:	bl	126c <ctf_type_size>
    177c:	mov	x19, x0
    1780:	ldr	x0, [sp, #64]
    1784:	mov	x1, x20
    1788:	bl	126c <ctf_type_size>
    178c:	cmp	x19, x0
    1790:	b	16bc <ctf_type_compat+0x17c>
    1794:	ldr	x0, [sp, #72]
    1798:	mov	x1, x21
    179c:	add	x2, sp, #0x50
    17a0:	bl	e50 <ctf_type_encoding>
    17a4:	mov	w21, w0
    17a8:	ldr	x0, [sp, #64]
    17ac:	add	x2, sp, #0x68
    17b0:	mov	x1, x20
    17b4:	bl	e50 <ctf_type_encoding>
    17b8:	cmp	w21, w0
    17bc:	b.ne	17d8 <ctf_type_compat+0x298>  // b.any
    17c0:	cbnz	w21, 156c <ctf_type_compat+0x2c>
    17c4:	add	x1, sp, #0x68
    17c8:	add	x0, sp, #0x50
    17cc:	mov	x2, #0xc                   	// #12
    17d0:	bl	0 <memcmp>
    17d4:	cbz	w0, 156c <ctf_type_compat+0x2c>
    17d8:	mov	w19, #0x0                   	// #0
    17dc:	b	156c <ctf_type_compat+0x2c>

00000000000017e0 <ctf_enum_name>:
    17e0:	stp	x29, x30, [sp, #-80]!
    17e4:	mov	x29, sp
    17e8:	stp	x19, x20, [sp, #16]
    17ec:	stp	x21, x22, [sp, #32]
    17f0:	mov	w22, w2
    17f4:	mov	x21, x0
    17f8:	str	x0, [sp, #56]
    17fc:	bl	b8c <ctf_type_resolve_unsliced>
    1800:	cmn	x0, #0x1
    1804:	b.ne	1810 <ctf_enum_name+0x30>  // b.any
    1808:	mov	x0, #0x0                   	// #0
    180c:	b	18b8 <ctf_enum_name+0xd8>
    1810:	mov	x1, x0
    1814:	mov	x20, x0
    1818:	add	x0, sp, #0x38
    181c:	bl	0 <ctf_lookup_by_id>
    1820:	mov	x19, x0
    1824:	cbz	x0, 1808 <ctf_enum_name+0x28>
    1828:	ldr	x0, [sp, #56]
    182c:	ldr	x0, [x0]
    1830:	ldr	x1, [x0]
    1834:	ldr	w0, [x19, #4]
    1838:	blr	x1
    183c:	cmp	w0, #0x8
    1840:	b.eq	1854 <ctf_enum_name+0x74>  // b.none
    1844:	mov	w1, #0x3fc                 	// #1020
    1848:	mov	x0, x21
    184c:	bl	0 <ctf_set_errno>
    1850:	b	1808 <ctf_enum_name+0x28>
    1854:	ldr	x0, [sp, #56]
    1858:	add	x3, sp, #0x48
    185c:	mov	x2, #0x0                   	// #0
    1860:	mov	x1, x19
    1864:	bl	0 <ctf_get_ctt_size>
    1868:	mov	x1, x20
    186c:	mov	x0, x21
    1870:	bl	0 <ctf_dynamic_type>
    1874:	cbnz	x0, 18d4 <ctf_enum_name+0xf4>
    1878:	ldr	x0, [sp, #56]
    187c:	ldr	x20, [sp, #72]
    1880:	ldr	x0, [x0]
    1884:	add	x20, x19, x20
    1888:	ldr	x1, [x0, #16]
    188c:	ldr	w0, [x19, #4]
    1890:	blr	x1
    1894:	cbnz	w0, 18a0 <ctf_enum_name+0xc0>
    1898:	mov	w1, #0x40b                 	// #1035
    189c:	b	1848 <ctf_enum_name+0x68>
    18a0:	ldr	w1, [x20, #4]
    18a4:	cmp	w1, w22
    18a8:	b.ne	18c8 <ctf_enum_name+0xe8>  // b.any
    18ac:	ldr	w1, [x20]
    18b0:	ldr	x0, [sp, #56]
    18b4:	bl	0 <ctf_strptr>
    18b8:	ldp	x19, x20, [sp, #16]
    18bc:	ldp	x21, x22, [sp, #32]
    18c0:	ldp	x29, x30, [sp], #80
    18c4:	ret
    18c8:	sub	w0, w0, #0x1
    18cc:	add	x20, x20, #0x8
    18d0:	b	1894 <ctf_enum_name+0xb4>
    18d4:	ldr	x0, [x0, #56]
    18d8:	cbz	x0, 1898 <ctf_enum_name+0xb8>
    18dc:	ldr	w1, [x0, #40]
    18e0:	cmp	w1, w22
    18e4:	b.ne	18f0 <ctf_enum_name+0x110>  // b.any
    18e8:	ldr	x0, [x0, #16]
    18ec:	b	18b8 <ctf_enum_name+0xd8>
    18f0:	ldr	x0, [x0, #8]
    18f4:	b	18d8 <ctf_enum_name+0xf8>

00000000000018f8 <ctf_enum_value>:
    18f8:	stp	x29, x30, [sp, #-96]!
    18fc:	mov	x29, sp
    1900:	stp	x19, x20, [sp, #16]
    1904:	mov	x20, x3
    1908:	stp	x21, x22, [sp, #32]
    190c:	mov	x22, x0
    1910:	stp	x23, x24, [sp, #48]
    1914:	mov	x23, x2
    1918:	str	x0, [sp, #72]
    191c:	bl	b8c <ctf_type_resolve_unsliced>
    1920:	cmn	x0, #0x1
    1924:	b.ne	1930 <ctf_enum_value+0x38>  // b.any
    1928:	mov	w0, #0xffffffff            	// #-1
    192c:	b	19e4 <ctf_enum_value+0xec>
    1930:	mov	x1, x0
    1934:	mov	x24, x0
    1938:	add	x0, sp, #0x48
    193c:	bl	0 <ctf_lookup_by_id>
    1940:	mov	x19, x0
    1944:	cbz	x0, 1928 <ctf_enum_value+0x30>
    1948:	ldr	x0, [sp, #72]
    194c:	ldr	x0, [x0]
    1950:	ldr	x1, [x0]
    1954:	ldr	w0, [x19, #4]
    1958:	blr	x1
    195c:	cmp	w0, #0x8
    1960:	b.eq	1974 <ctf_enum_value+0x7c>  // b.none
    1964:	mov	w1, #0x3fc                 	// #1020
    1968:	mov	x0, x22
    196c:	bl	0 <ctf_set_errno>
    1970:	b	1928 <ctf_enum_value+0x30>
    1974:	ldr	x0, [sp, #72]
    1978:	add	x3, sp, #0x58
    197c:	mov	x2, #0x0                   	// #0
    1980:	mov	x1, x19
    1984:	bl	0 <ctf_get_ctt_size>
    1988:	mov	x1, x24
    198c:	mov	x0, x22
    1990:	ldr	x21, [sp, #88]
    1994:	bl	0 <ctf_dynamic_type>
    1998:	cbnz	x0, 1a10 <ctf_enum_value+0x118>
    199c:	ldr	x0, [sp, #72]
    19a0:	add	x21, x19, x21
    19a4:	ldr	x0, [x0]
    19a8:	ldr	x1, [x0, #16]
    19ac:	ldr	w0, [x19, #4]
    19b0:	blr	x1
    19b4:	mov	w19, w0
    19b8:	cbnz	w19, 19c4 <ctf_enum_value+0xcc>
    19bc:	mov	w1, #0x40b                 	// #1035
    19c0:	b	1968 <ctf_enum_value+0x70>
    19c4:	ldr	w1, [x21]
    19c8:	ldr	x0, [sp, #72]
    19cc:	bl	0 <ctf_strptr>
    19d0:	mov	x1, x23
    19d4:	bl	0 <strcmp>
    19d8:	cbnz	w0, 1a04 <ctf_enum_value+0x10c>
    19dc:	cbnz	x20, 19f8 <ctf_enum_value+0x100>
    19e0:	mov	w0, #0x0                   	// #0
    19e4:	ldp	x19, x20, [sp, #16]
    19e8:	ldp	x21, x22, [sp, #32]
    19ec:	ldp	x23, x24, [sp, #48]
    19f0:	ldp	x29, x30, [sp], #96
    19f4:	ret
    19f8:	ldr	w1, [x21, #4]
    19fc:	str	w1, [x20]
    1a00:	b	19e4 <ctf_enum_value+0xec>
    1a04:	sub	w19, w19, #0x1
    1a08:	add	x21, x21, #0x8
    1a0c:	b	19b8 <ctf_enum_value+0xc0>
    1a10:	ldr	x19, [x0, #56]
    1a14:	cbz	x19, 19bc <ctf_enum_value+0xc4>
    1a18:	ldr	x0, [x19, #16]
    1a1c:	mov	x1, x23
    1a20:	bl	0 <strcmp>
    1a24:	cbnz	w0, 1a34 <ctf_enum_value+0x13c>
    1a28:	cbz	x20, 19e0 <ctf_enum_value+0xe8>
    1a2c:	ldr	w1, [x19, #40]
    1a30:	b	19fc <ctf_enum_value+0x104>
    1a34:	ldr	x19, [x19, #8]
    1a38:	b	1a14 <ctf_enum_value+0x11c>

0000000000001a3c <ctf_func_type_info>:
    1a3c:	stp	x29, x30, [sp, #-80]!
    1a40:	mov	x29, sp
    1a44:	stp	x19, x20, [sp, #16]
    1a48:	mov	x20, x2
    1a4c:	str	x21, [sp, #32]
    1a50:	str	x0, [sp, #56]
    1a54:	bl	2a4 <ctf_type_resolve>
    1a58:	cmn	x0, #0x1
    1a5c:	b.ne	1a74 <ctf_func_type_info+0x38>  // b.any
    1a60:	mov	w0, #0xffffffff            	// #-1
    1a64:	ldp	x19, x20, [sp, #16]
    1a68:	ldr	x21, [sp, #32]
    1a6c:	ldp	x29, x30, [sp], #80
    1a70:	ret
    1a74:	mov	x1, x0
    1a78:	mov	x21, x0
    1a7c:	add	x0, sp, #0x38
    1a80:	bl	0 <ctf_lookup_by_id>
    1a84:	mov	x19, x0
    1a88:	cbz	x0, 1a60 <ctf_func_type_info+0x24>
    1a8c:	mov	x1, x0
    1a90:	add	x3, sp, #0x48
    1a94:	ldr	x0, [sp, #56]
    1a98:	add	x2, sp, #0x40
    1a9c:	bl	0 <ctf_get_ctt_size>
    1aa0:	ldr	x0, [sp, #56]
    1aa4:	ldr	x0, [x0]
    1aa8:	ldr	x1, [x0]
    1aac:	ldr	w0, [x19, #4]
    1ab0:	blr	x1
    1ab4:	cmp	w0, #0x5
    1ab8:	b.eq	1acc <ctf_func_type_info+0x90>  // b.none
    1abc:	ldr	x0, [sp, #56]
    1ac0:	mov	w1, #0x404                 	// #1028
    1ac4:	bl	0 <ctf_set_errno>
    1ac8:	b	1a64 <ctf_func_type_info+0x28>
    1acc:	ldr	w0, [x19, #8]
    1ad0:	str	x0, [x20]
    1ad4:	ldr	x0, [sp, #56]
    1ad8:	str	wzr, [x20, #12]
    1adc:	ldr	x0, [x0]
    1ae0:	ldr	x1, [x0, #16]
    1ae4:	ldr	w0, [x19, #4]
    1ae8:	blr	x1
    1aec:	str	w0, [x20, #8]
    1af0:	ldr	x0, [sp, #56]
    1af4:	mov	x1, x21
    1af8:	bl	0 <ctf_dynamic_type>
    1afc:	cbnz	x0, 1b30 <ctf_func_type_info+0xf4>
    1b00:	ldr	x0, [sp, #72]
    1b04:	add	x19, x19, x0
    1b08:	ldr	w0, [x20, #8]
    1b0c:	cbz	w0, 1b28 <ctf_func_type_info+0xec>
    1b10:	sub	w0, w0, #0x1
    1b14:	ldr	w1, [x19, w0, uxtw #2]
    1b18:	cbnz	w1, 1b28 <ctf_func_type_info+0xec>
    1b1c:	ldr	w1, [x20, #12]
    1b20:	orr	w1, w1, #0x1
    1b24:	stp	w0, w1, [x20, #8]
    1b28:	mov	w0, #0x0                   	// #0
    1b2c:	b	1a64 <ctf_func_type_info+0x28>
    1b30:	ldr	x19, [x0, #48]
    1b34:	b	1b08 <ctf_func_type_info+0xcc>

0000000000001b38 <ctf_func_type_args>:
    1b38:	stp	x29, x30, [sp, #-96]!
    1b3c:	mov	x29, sp
    1b40:	stp	x19, x20, [sp, #16]
    1b44:	mov	x19, x1
    1b48:	stp	x21, x22, [sp, #32]
    1b4c:	mov	w21, w2
    1b50:	mov	x22, x3
    1b54:	add	x2, sp, #0x50
    1b58:	str	x0, [sp, #56]
    1b5c:	bl	1a3c <ctf_func_type_info>
    1b60:	tbz	w0, #31, 1b78 <ctf_func_type_args+0x40>
    1b64:	mov	w0, #0xffffffff            	// #-1
    1b68:	ldp	x19, x20, [sp, #16]
    1b6c:	ldp	x21, x22, [sp, #32]
    1b70:	ldp	x29, x30, [sp], #96
    1b74:	ret
    1b78:	ldr	x0, [sp, #56]
    1b7c:	mov	x1, x19
    1b80:	bl	2a4 <ctf_type_resolve>
    1b84:	mov	x20, x0
    1b88:	cmn	x0, #0x1
    1b8c:	b.eq	1b64 <ctf_func_type_args+0x2c>  // b.none
    1b90:	mov	x1, x0
    1b94:	add	x0, sp, #0x38
    1b98:	bl	0 <ctf_lookup_by_id>
    1b9c:	mov	x19, x0
    1ba0:	cbz	x0, 1b64 <ctf_func_type_args+0x2c>
    1ba4:	mov	x1, x0
    1ba8:	add	x3, sp, #0x48
    1bac:	ldr	x0, [sp, #56]
    1bb0:	add	x2, sp, #0x40
    1bb4:	bl	0 <ctf_get_ctt_size>
    1bb8:	ldr	x0, [sp, #56]
    1bbc:	mov	x1, x20
    1bc0:	bl	0 <ctf_dynamic_type>
    1bc4:	cbnz	x0, 1bf0 <ctf_func_type_args+0xb8>
    1bc8:	ldr	x0, [sp, #72]
    1bcc:	add	x19, x19, x0
    1bd0:	ldr	w0, [sp, #88]
    1bd4:	cmp	w0, w21
    1bd8:	csel	w2, w0, w21, ls  // ls = plast
    1bdc:	mov	x0, #0x0                   	// #0
    1be0:	cmp	x2, x0
    1be4:	b.ne	1bf8 <ctf_func_type_args+0xc0>  // b.any
    1be8:	mov	w0, #0x0                   	// #0
    1bec:	b	1b68 <ctf_func_type_args+0x30>
    1bf0:	ldr	x19, [x0, #48]
    1bf4:	b	1bd0 <ctf_func_type_args+0x98>
    1bf8:	ldr	w1, [x19, x0, lsl #2]
    1bfc:	str	x1, [x22, x0, lsl #3]
    1c00:	add	x0, x0, #0x1
    1c04:	b	1be0 <ctf_func_type_args+0xa8>

0000000000001c08 <ctf_type_visit>:
    1c08:	mov	w6, #0x0                   	// #0
    1c0c:	mov	x5, #0x0                   	// #0
    1c10:	adrp	x4, 0 <ctf_get_ctt_size>
    1c14:	add	x4, x4, #0x0
    1c18:	b	4f8 <ctf_type_rvisit>

ctf-util.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_list_append>:
   0:	ldr	x2, [x0]
   4:	str	x1, [x0]
   8:	stp	x2, xzr, [x1]
   c:	cbz	x2, 18 <ctf_list_append+0x18>
  10:	str	x1, [x2, #8]
  14:	ret
  18:	str	x1, [x0, #8]
  1c:	b	14 <ctf_list_append+0x14>

0000000000000020 <ctf_list_prepend>:
  20:	ldr	x2, [x0, #8]
  24:	str	x1, [x0, #8]
  28:	stp	xzr, x2, [x1]
  2c:	cbz	x2, 38 <ctf_list_prepend+0x18>
  30:	str	x1, [x2]
  34:	ret
  38:	str	x1, [x0]
  3c:	b	34 <ctf_list_prepend+0x14>

0000000000000040 <ctf_list_delete>:
  40:	ldp	x2, x3, [x1]
  44:	cbz	x2, 5c <ctf_list_delete+0x1c>
  48:	str	x3, [x2, #8]
  4c:	ldr	x1, [x1, #8]
  50:	cbz	x1, 64 <ctf_list_delete+0x24>
  54:	str	x2, [x1]
  58:	ret
  5c:	str	x3, [x0, #8]
  60:	b	4c <ctf_list_delete+0xc>
  64:	str	x2, [x0]
  68:	b	58 <ctf_list_delete+0x18>

000000000000006c <ctf_list_empty_p>:
  6c:	ldr	x1, [x0, #8]
  70:	cbnz	x1, 84 <ctf_list_empty_p+0x18>
  74:	ldr	x0, [x0]
  78:	cmp	x0, #0x0
  7c:	cset	w0, eq  // eq = none
  80:	ret
  84:	mov	w0, #0x0                   	// #0
  88:	b	80 <ctf_list_empty_p+0x14>

000000000000008c <ctf_sym_to_elf64>:
  8c:	mov	x2, x0
  90:	mov	x0, x1
  94:	ldr	w1, [x2]
  98:	str	w1, [x0]
  9c:	ldr	w1, [x2, #4]
  a0:	str	x1, [x0, #8]
  a4:	ldr	w1, [x2, #8]
  a8:	str	x1, [x0, #16]
  ac:	ldrb	w1, [x2, #12]
  b0:	strb	w1, [x0, #4]
  b4:	ldrb	w1, [x2, #13]
  b8:	strb	w1, [x0, #5]
  bc:	ldrh	w1, [x2, #14]
  c0:	strh	w1, [x0, #6]
  c4:	ret

00000000000000c8 <ctf_str_append>:
  c8:	stp	x29, x30, [sp, #-64]!
  cc:	mov	x29, sp
  d0:	stp	x19, x20, [sp, #16]
  d4:	mov	x19, x0
  d8:	stp	x21, x22, [sp, #32]
  dc:	str	x23, [sp, #48]
  e0:	cbz	x1, 12c <ctf_str_append+0x64>
  e4:	mov	x21, x1
  e8:	cbz	x0, 144 <ctf_str_append+0x7c>
  ec:	bl	0 <strlen>
  f0:	mov	x20, x0
  f4:	mov	x0, x21
  f8:	bl	0 <strlen>
  fc:	add	x23, x20, x0
 100:	mov	x22, x0
 104:	add	x1, x23, #0x1
 108:	mov	x0, x19
 10c:	bl	0 <realloc>
 110:	mov	x19, x0
 114:	cbz	x0, 12c <ctf_str_append+0x64>
 118:	mov	x2, x22
 11c:	mov	x1, x21
 120:	add	x0, x0, x20
 124:	bl	0 <memcpy>
 128:	strb	wzr, [x19, x23]
 12c:	mov	x0, x19
 130:	ldp	x19, x20, [sp, #16]
 134:	ldp	x21, x22, [sp, #32]
 138:	ldr	x23, [sp, #48]
 13c:	ldp	x29, x30, [sp], #64
 140:	ret
 144:	mov	x20, #0x0                   	// #0
 148:	b	f4 <ctf_str_append+0x2c>

000000000000014c <ctf_str_append_noerr>:
 14c:	stp	x29, x30, [sp, #-32]!
 150:	mov	x29, sp
 154:	str	x19, [sp, #16]
 158:	mov	x19, x0
 15c:	bl	c8 <ctf_str_append>
 160:	cmp	x0, #0x0
 164:	csel	x0, x0, x19, ne  // ne = any
 168:	ldr	x19, [sp, #16]
 16c:	ldp	x29, x30, [sp], #32
 170:	ret

0000000000000174 <ctf_realloc>:
 174:	mov	x3, x0
 178:	mov	x0, x1
 17c:	mov	x1, x2
 180:	ldr	x2, [x3, #376]
 184:	cbnz	x2, 18c <ctf_realloc+0x18>
 188:	b	0 <realloc>
 18c:	stp	x29, x30, [sp, #-16]!
 190:	mov	x1, x3
 194:	adrp	x0, 0 <ctf_list_append>
 198:	mov	x29, sp
 19c:	add	x0, x0, #0x0
 1a0:	bl	0 <ctf_dprintf>
 1a4:	mov	x0, #0x0                   	// #0
 1a8:	ldp	x29, x30, [sp], #16
 1ac:	ret

00000000000001b0 <ctf_set_open_errno>:
 1b0:	cbz	x0, 1b8 <ctf_set_open_errno+0x8>
 1b4:	str	w1, [x0]
 1b8:	mov	x0, #0x0                   	// #0
 1bc:	ret

00000000000001c0 <ctf_set_errno>:
 1c0:	str	w1, [x0, #556]
 1c4:	mov	x0, #0xffffffffffffffff    	// #-1
 1c8:	ret
