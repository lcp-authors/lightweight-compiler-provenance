
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//systemd-portabled_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000404230 <_init>:
  404230:	stp	x29, x30, [sp, #-16]!
  404234:	mov	x29, sp
  404238:	bl	404ec0 <call_weak_fn>
  40423c:	ldp	x29, x30, [sp], #16
  404240:	ret

Disassembly of section .plt:

0000000000404250 <.plt>:
  404250:	stp	x16, x30, [sp, #-16]!
  404254:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404258:	ldr	x17, [x16, #2536]
  40425c:	add	x16, x16, #0x9e8
  404260:	br	x17
  404264:	nop
  404268:	nop
  40426c:	nop

0000000000404270 <image_unref@plt>:
  404270:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404274:	ldr	x17, [x16, #2544]
  404278:	add	x16, x16, #0x9f0
  40427c:	br	x17

0000000000404280 <safe_fclose@plt>:
  404280:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404284:	ldr	x17, [x16, #2552]
  404288:	add	x16, x16, #0x9f8
  40428c:	br	x17

0000000000404290 <sd_bus_message_read_strv@plt>:
  404290:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404294:	ldr	x17, [x16, #2560]
  404298:	add	x16, x16, #0xa00
  40429c:	br	x17

00000000004042a0 <read_line_full@plt>:
  4042a0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4042a4:	ldr	x17, [x16, #2568]
  4042a8:	add	x16, x16, #0xa08
  4042ac:	br	x17

00000000004042b0 <bus_error_message@plt>:
  4042b0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4042b4:	ldr	x17, [x16, #2576]
  4042b8:	add	x16, x16, #0xa10
  4042bc:	br	x17

00000000004042c0 <unit_dbus_path_from_name@plt>:
  4042c0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4042c4:	ldr	x17, [x16, #2584]
  4042c8:	add	x16, x16, #0xa18
  4042cc:	br	x17

00000000004042d0 <sd_bus_message_new_method_call@plt>:
  4042d0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4042d4:	ldr	x17, [x16, #2592]
  4042d8:	add	x16, x16, #0xa20
  4042dc:	br	x17

00000000004042e0 <image_in_search_path@plt>:
  4042e0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4042e4:	ldr	x17, [x16, #2600]
  4042e8:	add	x16, x16, #0xa28
  4042ec:	br	x17

00000000004042f0 <sd_bus_error_is_set@plt>:
  4042f0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4042f4:	ldr	x17, [x16, #2608]
  4042f8:	add	x16, x16, #0xa30
  4042fc:	br	x17

0000000000404300 <unlink@plt>:
  404300:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404304:	ldr	x17, [x16, #2616]
  404308:	add	x16, x16, #0xa38
  40430c:	br	x17

0000000000404310 <openat64@plt>:
  404310:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404314:	ldr	x17, [x16, #2624]
  404318:	add	x16, x16, #0xa40
  40431c:	br	x17

0000000000404320 <internal_hashmap_free@plt>:
  404320:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404324:	ldr	x17, [x16, #2632]
  404328:	add	x16, x16, #0xa48
  40432c:	br	x17

0000000000404330 <image_find@plt>:
  404330:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404334:	ldr	x17, [x16, #2640]
  404338:	add	x16, x16, #0xa50
  40433c:	br	x17

0000000000404340 <sd_bus_reply_method_return@plt>:
  404340:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404344:	ldr	x17, [x16, #2648]
  404348:	add	x16, x16, #0xa58
  40434c:	br	x17

0000000000404350 <strcspn@plt>:
  404350:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404354:	ldr	x17, [x16, #2656]
  404358:	add	x16, x16, #0xa60
  40435c:	br	x17

0000000000404360 <internal_set_ensure_allocated@plt>:
  404360:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404364:	ldr	x17, [x16, #2664]
  404368:	add	x16, x16, #0xa68
  40436c:	br	x17

0000000000404370 <fchmod@plt>:
  404370:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404374:	ldr	x17, [x16, #2672]
  404378:	add	x16, x16, #0xa70
  40437c:	br	x17

0000000000404380 <stpcpy@plt>:
  404380:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404384:	ldr	x17, [x16, #2680]
  404388:	add	x16, x16, #0xa78
  40438c:	br	x17

0000000000404390 <sd_event_add_child@plt>:
  404390:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404394:	ldr	x17, [x16, #2688]
  404398:	add	x16, x16, #0xa80
  40439c:	br	x17

00000000004043a0 <__libc_start_main@plt>:
  4043a0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4043a4:	ldr	x17, [x16, #2696]
  4043a8:	add	x16, x16, #0xa88
  4043ac:	br	x17

00000000004043b0 <sd_event_set_watchdog@plt>:
  4043b0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4043b4:	ldr	x17, [x16, #2704]
  4043b8:	add	x16, x16, #0xa90
  4043bc:	br	x17

00000000004043c0 <fdopen@plt>:
  4043c0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4043c4:	ldr	x17, [x16, #2712]
  4043c8:	add	x16, x16, #0xa98
  4043cc:	br	x17

00000000004043d0 <lookup_paths_free@plt>:
  4043d0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4043d4:	ldr	x17, [x16, #2720]
  4043d8:	add	x16, x16, #0xaa0
  4043dc:	br	x17

00000000004043e0 <sd_bus_message_unref@plt>:
  4043e0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4043e4:	ldr	x17, [x16, #2728]
  4043e8:	add	x16, x16, #0xaa8
  4043ec:	br	x17

00000000004043f0 <sd_bus_message_enter_container@plt>:
  4043f0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4043f4:	ldr	x17, [x16, #2736]
  4043f8:	add	x16, x16, #0xab0
  4043fc:	br	x17

0000000000404400 <sd_bus_request_name_async@plt>:
  404400:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404404:	ldr	x17, [x16, #2744]
  404408:	add	x16, x16, #0xab8
  40440c:	br	x17

0000000000404410 <open_tmpfile_linkable@plt>:
  404410:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404414:	ldr	x17, [x16, #2752]
  404418:	add	x16, x16, #0xac0
  40441c:	br	x17

0000000000404420 <copy_file_atomic_full@plt>:
  404420:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404424:	ldr	x17, [x16, #2760]
  404428:	add	x16, x16, #0xac8
  40442c:	br	x17

0000000000404430 <__gmon_start__@plt>:
  404430:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404434:	ldr	x17, [x16, #2768]
  404438:	add	x16, x16, #0xad0
  40443c:	br	x17

0000000000404440 <sd_bus_error_set_errnof@plt>:
  404440:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404444:	ldr	x17, [x16, #2776]
  404448:	add	x16, x16, #0xad8
  40444c:	br	x17

0000000000404450 <write_string_file_ts@plt>:
  404450:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404454:	ldr	x17, [x16, #2784]
  404458:	add	x16, x16, #0xae0
  40445c:	br	x17

0000000000404460 <polkit_agent_close@plt>:
  404460:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404464:	ldr	x17, [x16, #2792]
  404468:	add	x16, x16, #0xae8
  40446c:	br	x17

0000000000404470 <qsort@plt>:
  404470:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404474:	ldr	x17, [x16, #2800]
  404478:	add	x16, x16, #0xaf0
  40447c:	br	x17

0000000000404480 <sd_event_default@plt>:
  404480:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404484:	ldr	x17, [x16, #2808]
  404488:	add	x16, x16, #0xaf8
  40448c:	br	x17

0000000000404490 <bus_event_loop_with_idle@plt>:
  404490:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404494:	ldr	x17, [x16, #2816]
  404498:	add	x16, x16, #0xb00
  40449c:	br	x17

00000000004044a0 <strnlen@plt>:
  4044a0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4044a4:	ldr	x17, [x16, #2824]
  4044a8:	add	x16, x16, #0xb08
  4044ac:	br	x17

00000000004044b0 <sd_bus_message_new_method_return@plt>:
  4044b0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4044b4:	ldr	x17, [x16, #2832]
  4044b8:	add	x16, x16, #0xb10
  4044bc:	br	x17

00000000004044c0 <hidden_or_backup_file@plt>:
  4044c0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4044c4:	ldr	x17, [x16, #2840]
  4044c8:	add	x16, x16, #0xb18
  4044cc:	br	x17

00000000004044d0 <bus_verify_polkit_async_registry_free@plt>:
  4044d0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4044d4:	ldr	x17, [x16, #2848]
  4044d8:	add	x16, x16, #0xb20
  4044dc:	br	x17

00000000004044e0 <sd_bus_message_open_container@plt>:
  4044e0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4044e4:	ldr	x17, [x16, #2856]
  4044e8:	add	x16, x16, #0xb28
  4044ec:	br	x17

00000000004044f0 <reallocarray@plt>:
  4044f0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4044f4:	ldr	x17, [x16, #2864]
  4044f8:	add	x16, x16, #0xb30
  4044fc:	br	x17

0000000000404500 <sd_bus_message_append_array@plt>:
  404500:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404504:	ldr	x17, [x16, #2872]
  404508:	add	x16, x16, #0xb38
  40450c:	br	x17

0000000000404510 <getpid_cached@plt>:
  404510:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404514:	ldr	x17, [x16, #2880]
  404518:	add	x16, x16, #0xb40
  40451c:	br	x17

0000000000404520 <fd_duplicate_data_fd@plt>:
  404520:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404524:	ldr	x17, [x16, #2888]
  404528:	add	x16, x16, #0xb48
  40452c:	br	x17

0000000000404530 <__cmsg_nxthdr@plt>:
  404530:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404534:	ldr	x17, [x16, #2896]
  404538:	add	x16, x16, #0xb50
  40453c:	br	x17

0000000000404540 <memcpy@plt>:
  404540:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404544:	ldr	x17, [x16, #2904]
  404548:	add	x16, x16, #0xb58
  40454c:	br	x17

0000000000404550 <loop_device_unref@plt>:
  404550:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404554:	ldr	x17, [x16, #2912]
  404558:	add	x16, x16, #0xb60
  40455c:	br	x17

0000000000404560 <dirent_ensure_type@plt>:
  404560:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404564:	ldr	x17, [x16, #2920]
  404568:	add	x16, x16, #0xb68
  40456c:	br	x17

0000000000404570 <image_type_to_string@plt>:
  404570:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404574:	ldr	x17, [x16, #2928]
  404578:	add	x16, x16, #0xb70
  40457c:	br	x17

0000000000404580 <sd_event_source_unref@plt>:
  404580:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404584:	ldr	x17, [x16, #2936]
  404588:	add	x16, x16, #0xb78
  40458c:	br	x17

0000000000404590 <symlink@plt>:
  404590:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404594:	ldr	x17, [x16, #2944]
  404598:	add	x16, x16, #0xb80
  40459c:	br	x17

00000000004045a0 <last_path_component@plt>:
  4045a0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4045a4:	ldr	x17, [x16, #2952]
  4045a8:	add	x16, x16, #0xb88
  4045ac:	br	x17

00000000004045b0 <sd_bus_message_append@plt>:
  4045b0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4045b4:	ldr	x17, [x16, #2960]
  4045b8:	add	x16, x16, #0xb90
  4045bc:	br	x17

00000000004045c0 <log_setup_service@plt>:
  4045c0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4045c4:	ldr	x17, [x16, #2968]
  4045c8:	add	x16, x16, #0xb98
  4045cc:	br	x17

00000000004045d0 <strjoin_real@plt>:
  4045d0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4045d4:	ldr	x17, [x16, #2976]
  4045d8:	add	x16, x16, #0xba0
  4045dc:	br	x17

00000000004045e0 <safe_close@plt>:
  4045e0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4045e4:	ldr	x17, [x16, #2984]
  4045e8:	add	x16, x16, #0xba8
  4045ec:	br	x17

00000000004045f0 <image_read_only@plt>:
  4045f0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4045f4:	ldr	x17, [x16, #2992]
  4045f8:	add	x16, x16, #0xbb0
  4045fc:	br	x17

0000000000404600 <safe_close_pair@plt>:
  404600:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404604:	ldr	x17, [x16, #3000]
  404608:	add	x16, x16, #0xbb8
  40460c:	br	x17

0000000000404610 <sd_bus_message_get_bus@plt>:
  404610:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404614:	ldr	x17, [x16, #3008]
  404618:	add	x16, x16, #0xbc0
  40461c:	br	x17

0000000000404620 <strrchr@plt>:
  404620:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404624:	ldr	x17, [x16, #3016]
  404628:	add	x16, x16, #0xbc8
  40462c:	br	x17

0000000000404630 <dirfd@plt>:
  404630:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404634:	ldr	x17, [x16, #3024]
  404638:	add	x16, x16, #0xbd0
  40463c:	br	x17

0000000000404640 <sd_bus_reply_method_errorf@plt>:
  404640:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404644:	ldr	x17, [x16, #3032]
  404648:	add	x16, x16, #0xbd8
  40464c:	br	x17

0000000000404650 <sigkill_wait@plt>:
  404650:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404654:	ldr	x17, [x16, #3040]
  404658:	add	x16, x16, #0xbe0
  40465c:	br	x17

0000000000404660 <loop_device_make_by_path@plt>:
  404660:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404664:	ldr	x17, [x16, #3048]
  404668:	add	x16, x16, #0xbe8
  40466c:	br	x17

0000000000404670 <log_assert_failed_realm@plt>:
  404670:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404674:	ldr	x17, [x16, #3056]
  404678:	add	x16, x16, #0xbf0
  40467c:	br	x17

0000000000404680 <sd_bus_message_read@plt>:
  404680:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404684:	ldr	x17, [x16, #3064]
  404688:	add	x16, x16, #0xbf8
  40468c:	br	x17

0000000000404690 <faccessat@plt>:
  404690:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404694:	ldr	x17, [x16, #3072]
  404698:	add	x16, x16, #0xc00
  40469c:	br	x17

00000000004046a0 <readdir64@plt>:
  4046a0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4046a4:	ldr	x17, [x16, #3080]
  4046a8:	add	x16, x16, #0xc08
  4046ac:	br	x17

00000000004046b0 <sigkill_waitp@plt>:
  4046b0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4046b4:	ldr	x17, [x16, #3088]
  4046b8:	add	x16, x16, #0xc10
  4046bc:	br	x17

00000000004046c0 <_exit@plt>:
  4046c0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4046c4:	ldr	x17, [x16, #3096]
  4046c8:	add	x16, x16, #0xc18
  4046cc:	br	x17

00000000004046d0 <log_assert_failed_unreachable_realm@plt>:
  4046d0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4046d4:	ldr	x17, [x16, #3104]
  4046d8:	add	x16, x16, #0xc20
  4046dc:	br	x17

00000000004046e0 <link_tmpfile@plt>:
  4046e0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4046e4:	ldr	x17, [x16, #3112]
  4046e8:	add	x16, x16, #0xc28
  4046ec:	br	x17

00000000004046f0 <sd_event_source_set_enabled@plt>:
  4046f0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4046f4:	ldr	x17, [x16, #3120]
  4046f8:	add	x16, x16, #0xc30
  4046fc:	br	x17

0000000000404700 <umask@plt>:
  404700:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404704:	ldr	x17, [x16, #3128]
  404708:	add	x16, x16, #0xc38
  40470c:	br	x17

0000000000404710 <sd_bus_attach_event@plt>:
  404710:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404714:	ldr	x17, [x16, #3136]
  404718:	add	x16, x16, #0xc40
  40471c:	br	x17

0000000000404720 <path_is_absolute@plt>:
  404720:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404724:	ldr	x17, [x16, #3144]
  404728:	add	x16, x16, #0xc48
  40472c:	br	x17

0000000000404730 <image_ref@plt>:
  404730:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404734:	ldr	x17, [x16, #3152]
  404738:	add	x16, x16, #0xc50
  40473c:	br	x17

0000000000404740 <closedir@plt>:
  404740:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404744:	ldr	x17, [x16, #3160]
  404748:	add	x16, x16, #0xc58
  40474c:	br	x17

0000000000404750 <sd_bus_set_exit_on_disconnect@plt>:
  404750:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404754:	ldr	x17, [x16, #3168]
  404758:	add	x16, x16, #0xc60
  40475c:	br	x17

0000000000404760 <strncmp@plt>:
  404760:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404764:	ldr	x17, [x16, #3176]
  404768:	add	x16, x16, #0xc68
  40476c:	br	x17

0000000000404770 <path_is_normalized@plt>:
  404770:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404774:	ldr	x17, [x16, #3184]
  404778:	add	x16, x16, #0xc70
  40477c:	br	x17

0000000000404780 <image_find_harder@plt>:
  404780:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404784:	ldr	x17, [x16, #3192]
  404788:	add	x16, x16, #0xc78
  40478c:	br	x17

0000000000404790 <sigprocmask_many@plt>:
  404790:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404794:	ldr	x17, [x16, #3200]
  404798:	add	x16, x16, #0xc80
  40479c:	br	x17

00000000004047a0 <abort@plt>:
  4047a0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4047a4:	ldr	x17, [x16, #3208]
  4047a8:	add	x16, x16, #0xc88
  4047ac:	br	x17

00000000004047b0 <greedy_realloc@plt>:
  4047b0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4047b4:	ldr	x17, [x16, #3216]
  4047b8:	add	x16, x16, #0xc90
  4047bc:	br	x17

00000000004047c0 <set_iterate@plt>:
  4047c0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4047c4:	ldr	x17, [x16, #3224]
  4047c8:	add	x16, x16, #0xc98
  4047cc:	br	x17

00000000004047d0 <unlink_noerrno@plt>:
  4047d0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4047d4:	ldr	x17, [x16, #3232]
  4047d8:	add	x16, x16, #0xca0
  4047dc:	br	x17

00000000004047e0 <unit_file_lookup_state@plt>:
  4047e0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4047e4:	ldr	x17, [x16, #3240]
  4047e8:	add	x16, x16, #0xca8
  4047ec:	br	x17

00000000004047f0 <strspn@plt>:
  4047f0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4047f4:	ldr	x17, [x16, #3248]
  4047f8:	add	x16, x16, #0xcb0
  4047fc:	br	x17

0000000000404800 <internal_hashmap_get@plt>:
  404800:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404804:	ldr	x17, [x16, #3256]
  404808:	add	x16, x16, #0xcb8
  40480c:	br	x17

0000000000404810 <rmdir@plt>:
  404810:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404814:	ldr	x17, [x16, #3264]
  404818:	add	x16, x16, #0xcc0
  40481c:	br	x17

0000000000404820 <__errno_location@plt>:
  404820:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404824:	ldr	x17, [x16, #3272]
  404828:	add	x16, x16, #0xcc8
  40482c:	br	x17

0000000000404830 <strv_free@plt>:
  404830:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404834:	ldr	x17, [x16, #3280]
  404838:	add	x16, x16, #0xcd0
  40483c:	br	x17

0000000000404840 <wait_for_terminate_and_check@plt>:
  404840:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404844:	ldr	x17, [x16, #3288]
  404848:	add	x16, x16, #0xcd8
  40484c:	br	x17

0000000000404850 <unit_file_state_to_string@plt>:
  404850:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404854:	ldr	x17, [x16, #3296]
  404858:	add	x16, x16, #0xce0
  40485c:	br	x17

0000000000404860 <sd_event_add_defer@plt>:
  404860:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404864:	ldr	x17, [x16, #3304]
  404868:	add	x16, x16, #0xce8
  40486c:	br	x17

0000000000404870 <read@plt>:
  404870:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404874:	ldr	x17, [x16, #3312]
  404878:	add	x16, x16, #0xcf0
  40487c:	br	x17

0000000000404880 <image_name_is_valid@plt>:
  404880:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404884:	ldr	x17, [x16, #3320]
  404888:	add	x16, x16, #0xcf8
  40488c:	br	x17

0000000000404890 <sigprocmask@plt>:
  404890:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404894:	ldr	x17, [x16, #3328]
  404898:	add	x16, x16, #0xd00
  40489c:	br	x17

00000000004048a0 <internal_set_new@plt>:
  4048a0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4048a4:	ldr	x17, [x16, #3336]
  4048a8:	add	x16, x16, #0xd08
  4048ac:	br	x17

00000000004048b0 <sd_event_source_set_priority@plt>:
  4048b0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4048b4:	ldr	x17, [x16, #3344]
  4048b8:	add	x16, x16, #0xd10
  4048bc:	br	x17

00000000004048c0 <sd_bus_add_object_vtable@plt>:
  4048c0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4048c4:	ldr	x17, [x16, #3352]
  4048c8:	add	x16, x16, #0xd18
  4048cc:	br	x17

00000000004048d0 <strextend_with_separator@plt>:
  4048d0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4048d4:	ldr	x17, [x16, #3360]
  4048d8:	add	x16, x16, #0xd20
  4048dc:	br	x17

00000000004048e0 <__lxstat64@plt>:
  4048e0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4048e4:	ldr	x17, [x16, #3368]
  4048e8:	add	x16, x16, #0xd28
  4048ec:	br	x17

00000000004048f0 <strndup@plt>:
  4048f0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4048f4:	ldr	x17, [x16, #3376]
  4048f8:	add	x16, x16, #0xd30
  4048fc:	br	x17

0000000000404900 <sd_bus_get_current_message@plt>:
  404900:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404904:	ldr	x17, [x16, #3384]
  404908:	add	x16, x16, #0xd38
  40490c:	br	x17

0000000000404910 <sd_bus_error_setf@plt>:
  404910:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404914:	ldr	x17, [x16, #3392]
  404918:	add	x16, x16, #0xd40
  40491c:	br	x17

0000000000404920 <internal_hashmap_new@plt>:
  404920:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404924:	ldr	x17, [x16, #3400]
  404928:	add	x16, x16, #0xd48
  40492c:	br	x17

0000000000404930 <__stack_chk_fail@plt>:
  404930:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404934:	ldr	x17, [x16, #3408]
  404938:	add	x16, x16, #0xd50
  40493c:	br	x17

0000000000404940 <sd_bus_send@plt>:
  404940:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404944:	ldr	x17, [x16, #3416]
  404948:	add	x16, x16, #0xd58
  40494c:	br	x17

0000000000404950 <conf_files_list_nulstr@plt>:
  404950:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404954:	ldr	x17, [x16, #3424]
  404958:	add	x16, x16, #0xd60
  40495c:	br	x17

0000000000404960 <basename@plt>:
  404960:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404964:	ldr	x17, [x16, #3432]
  404968:	add	x16, x16, #0xd68
  40496c:	br	x17

0000000000404970 <write@plt>:
  404970:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404974:	ldr	x17, [x16, #3440]
  404978:	add	x16, x16, #0xd70
  40497c:	br	x17

0000000000404980 <path_join_internal@plt>:
  404980:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404984:	ldr	x17, [x16, #3448]
  404988:	add	x16, x16, #0xd78
  40498c:	br	x17

0000000000404990 <socketpair@plt>:
  404990:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404994:	ldr	x17, [x16, #3456]
  404998:	add	x16, x16, #0xd80
  40499c:	br	x17

00000000004049a0 <btrfs_qgroup_set_limit@plt>:
  4049a0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4049a4:	ldr	x17, [x16, #3464]
  4049a8:	add	x16, x16, #0xd88
  4049ac:	br	x17

00000000004049b0 <ask_password_agent_close@plt>:
  4049b0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4049b4:	ldr	x17, [x16, #3472]
  4049b8:	add	x16, x16, #0xd90
  4049bc:	br	x17

00000000004049c0 <pager_close@plt>:
  4049c0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4049c4:	ldr	x17, [x16, #3480]
  4049c8:	add	x16, x16, #0xd98
  4049cc:	br	x17

00000000004049d0 <set_put_strdup@plt>:
  4049d0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4049d4:	ldr	x17, [x16, #3488]
  4049d8:	add	x16, x16, #0xda0
  4049dc:	br	x17

00000000004049e0 <chase_symlinks_and_opendir@plt>:
  4049e0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4049e4:	ldr	x17, [x16, #3496]
  4049e8:	add	x16, x16, #0xda8
  4049ec:	br	x17

00000000004049f0 <memcmp@plt>:
  4049f0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  4049f4:	ldr	x17, [x16, #3504]
  4049f8:	add	x16, x16, #0xdb0
  4049fc:	br	x17

0000000000404a00 <sd_bus_error_free@plt>:
  404a00:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404a04:	ldr	x17, [x16, #3512]
  404a08:	add	x16, x16, #0xdb8
  404a0c:	br	x17

0000000000404a10 <cmsg_close_all@plt>:
  404a10:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404a14:	ldr	x17, [x16, #3520]
  404a18:	add	x16, x16, #0xdc0
  404a1c:	br	x17

0000000000404a20 <sd_bus_call@plt>:
  404a20:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404a24:	ldr	x17, [x16, #3528]
  404a28:	add	x16, x16, #0xdc8
  404a2c:	br	x17

0000000000404a30 <strv_find@plt>:
  404a30:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404a34:	ldr	x17, [x16, #3536]
  404a38:	add	x16, x16, #0xdd0
  404a3c:	br	x17

0000000000404a40 <sd_notify@plt>:
  404a40:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404a44:	ldr	x17, [x16, #3544]
  404a48:	add	x16, x16, #0xdd8
  404a4c:	br	x17

0000000000404a50 <malloc@plt>:
  404a50:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404a54:	ldr	x17, [x16, #3552]
  404a58:	add	x16, x16, #0xde0
  404a5c:	br	x17

0000000000404a60 <lookup_paths_init@plt>:
  404a60:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404a64:	ldr	x17, [x16, #3560]
  404a68:	add	x16, x16, #0xde8
  404a6c:	br	x17

0000000000404a70 <internal_hashmap_size@plt>:
  404a70:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404a74:	ldr	x17, [x16, #3568]
  404a78:	add	x16, x16, #0xdf0
  404a7c:	br	x17

0000000000404a80 <log_internal_realm@plt>:
  404a80:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404a84:	ldr	x17, [x16, #3576]
  404a88:	add	x16, x16, #0xdf8
  404a8c:	br	x17

0000000000404a90 <mkdtemp_malloc@plt>:
  404a90:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404a94:	ldr	x17, [x16, #3584]
  404a98:	add	x16, x16, #0xe00
  404a9c:	br	x17

0000000000404aa0 <sd_bus_default_system@plt>:
  404aa0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404aa4:	ldr	x17, [x16, #3592]
  404aa8:	add	x16, x16, #0xe08
  404aac:	br	x17

0000000000404ab0 <sd_bus_flush_close_unref@plt>:
  404ab0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404ab4:	ldr	x17, [x16, #3600]
  404ab8:	add	x16, x16, #0xe10
  404abc:	br	x17

0000000000404ac0 <pipe2@plt>:
  404ac0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404ac4:	ldr	x17, [x16, #3608]
  404ac8:	add	x16, x16, #0xe18
  404acc:	br	x17

0000000000404ad0 <string_hash_func@plt>:
  404ad0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404ad4:	ldr	x17, [x16, #3616]
  404ad8:	add	x16, x16, #0xe20
  404adc:	br	x17

0000000000404ae0 <sd_bus_path_encode@plt>:
  404ae0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404ae4:	ldr	x17, [x16, #3624]
  404ae8:	add	x16, x16, #0xe28
  404aec:	br	x17

0000000000404af0 <dissect_image@plt>:
  404af0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404af4:	ldr	x17, [x16, #3632]
  404af8:	add	x16, x16, #0xe30
  404afc:	br	x17

0000000000404b00 <sd_bus_add_fallback_vtable@plt>:
  404b00:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404b04:	ldr	x17, [x16, #3640]
  404b08:	add	x16, x16, #0xe38
  404b0c:	br	x17

0000000000404b10 <internal_hashmap_clear@plt>:
  404b10:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404b14:	ldr	x17, [x16, #3648]
  404b18:	add	x16, x16, #0xe40
  404b1c:	br	x17

0000000000404b20 <hashmap_put@plt>:
  404b20:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404b24:	ldr	x17, [x16, #3656]
  404b28:	add	x16, x16, #0xe48
  404b2c:	br	x17

0000000000404b30 <sd_bus_path_decode@plt>:
  404b30:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404b34:	ldr	x17, [x16, #3664]
  404b38:	add	x16, x16, #0xe50
  404b3c:	br	x17

0000000000404b40 <bus_property_get_bool@plt>:
  404b40:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404b44:	ldr	x17, [x16, #3672]
  404b48:	add	x16, x16, #0xe58
  404b4c:	br	x17

0000000000404b50 <sigchld_code_to_string@plt>:
  404b50:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404b54:	ldr	x17, [x16, #3680]
  404b58:	add	x16, x16, #0xe60
  404b5c:	br	x17

0000000000404b60 <endswith@plt>:
  404b60:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404b64:	ldr	x17, [x16, #3688]
  404b68:	add	x16, x16, #0xe68
  404b6c:	br	x17

0000000000404b70 <sd_bus_reply_method_error@plt>:
  404b70:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404b74:	ldr	x17, [x16, #3696]
  404b78:	add	x16, x16, #0xe70
  404b7c:	br	x17

0000000000404b80 <path_simplify@plt>:
  404b80:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404b84:	ldr	x17, [x16, #3704]
  404b88:	add	x16, x16, #0xe78
  404b8c:	br	x17

0000000000404b90 <strcmp@plt>:
  404b90:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404b94:	ldr	x17, [x16, #3712]
  404b98:	add	x16, x16, #0xe80
  404b9c:	br	x17

0000000000404ba0 <dissected_image_mount@plt>:
  404ba0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404ba4:	ldr	x17, [x16, #3720]
  404ba8:	add	x16, x16, #0xe88
  404bac:	br	x17

0000000000404bb0 <sd_bus_get_property_string@plt>:
  404bb0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404bb4:	ldr	x17, [x16, #3728]
  404bb8:	add	x16, x16, #0xe90
  404bbc:	br	x17

0000000000404bc0 <recvmsg@plt>:
  404bc0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404bc4:	ldr	x17, [x16, #3736]
  404bc8:	add	x16, x16, #0xe98
  404bcc:	br	x17

0000000000404bd0 <dissected_image_unref@plt>:
  404bd0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404bd4:	ldr	x17, [x16, #3744]
  404bd8:	add	x16, x16, #0xea0
  404bdc:	br	x17

0000000000404be0 <opendir@plt>:
  404be0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404be4:	ldr	x17, [x16, #3752]
  404be8:	add	x16, x16, #0xea8
  404bec:	br	x17

0000000000404bf0 <internal_hashmap_iterate@plt>:
  404bf0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404bf4:	ldr	x17, [x16, #3760]
  404bf8:	add	x16, x16, #0xeb0
  404bfc:	br	x17

0000000000404c00 <strdup@plt>:
  404c00:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404c04:	ldr	x17, [x16, #3768]
  404c08:	add	x16, x16, #0xeb8
  404c0c:	br	x17

0000000000404c10 <calloc@plt>:
  404c10:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404c14:	ldr	x17, [x16, #3776]
  404c18:	add	x16, x16, #0xec0
  404c1c:	br	x17

0000000000404c20 <safe_fork_full@plt>:
  404c20:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404c24:	ldr	x17, [x16, #3784]
  404c28:	add	x16, x16, #0xec8
  404c2c:	br	x17

0000000000404c30 <read_full_stream_full@plt>:
  404c30:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404c34:	ldr	x17, [x16, #3792]
  404c38:	add	x16, x16, #0xed0
  404c3c:	br	x17

0000000000404c40 <strchr@plt>:
  404c40:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404c44:	ldr	x17, [x16, #3800]
  404c48:	add	x16, x16, #0xed8
  404c4c:	br	x17

0000000000404c50 <btrfs_subvol_get_subtree_quota_fd@plt>:
  404c50:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404c54:	ldr	x17, [x16, #3808]
  404c58:	add	x16, x16, #0xee0
  404c5c:	br	x17

0000000000404c60 <sd_bus_message_append_strv@plt>:
  404c60:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404c64:	ldr	x17, [x16, #3816]
  404c68:	add	x16, x16, #0xee8
  404c6c:	br	x17

0000000000404c70 <mkdir@plt>:
  404c70:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404c74:	ldr	x17, [x16, #3824]
  404c78:	add	x16, x16, #0xef0
  404c7c:	br	x17

0000000000404c80 <btrfs_subvol_set_subtree_quota_limit@plt>:
  404c80:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404c84:	ldr	x17, [x16, #3832]
  404c88:	add	x16, x16, #0xef8
  404c8c:	br	x17

0000000000404c90 <bus_reply_pair_array@plt>:
  404c90:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404c94:	ldr	x17, [x16, #3840]
  404c98:	add	x16, x16, #0xf00
  404c9c:	br	x17

0000000000404ca0 <sd_bus_add_node_enumerator@plt>:
  404ca0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404ca4:	ldr	x17, [x16, #3848]
  404ca8:	add	x16, x16, #0xf08
  404cac:	br	x17

0000000000404cb0 <unlinkat@plt>:
  404cb0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404cb4:	ldr	x17, [x16, #3856]
  404cb8:	add	x16, x16, #0xf10
  404cbc:	br	x17

0000000000404cc0 <free@plt>:
  404cc0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404cc4:	ldr	x17, [x16, #3864]
  404cc8:	add	x16, x16, #0xf18
  404ccc:	br	x17

0000000000404cd0 <image_set_limit@plt>:
  404cd0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404cd4:	ldr	x17, [x16, #3872]
  404cd8:	add	x16, x16, #0xf20
  404cdc:	br	x17

0000000000404ce0 <copy_bytes_full@plt>:
  404ce0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404ce4:	ldr	x17, [x16, #3880]
  404ce8:	add	x16, x16, #0xf28
  404cec:	br	x17

0000000000404cf0 <open_os_release@plt>:
  404cf0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404cf4:	ldr	x17, [x16, #3888]
  404cf8:	add	x16, x16, #0xf30
  404cfc:	br	x17

0000000000404d00 <sendmsg@plt>:
  404d00:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404d04:	ldr	x17, [x16, #3896]
  404d08:	add	x16, x16, #0xf38
  404d0c:	br	x17

0000000000404d10 <internal_hashmap_ensure_allocated@plt>:
  404d10:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404d14:	ldr	x17, [x16, #3904]
  404d18:	add	x16, x16, #0xf40
  404d1c:	br	x17

0000000000404d20 <image_from_path@plt>:
  404d20:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404d24:	ldr	x17, [x16, #3912]
  404d28:	add	x16, x16, #0xf48
  404d2c:	br	x17

0000000000404d30 <fdopen_unlocked@plt>:
  404d30:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404d34:	ldr	x17, [x16, #3920]
  404d38:	add	x16, x16, #0xf50
  404d3c:	br	x17

0000000000404d40 <image_remove@plt>:
  404d40:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404d44:	ldr	x17, [x16, #3928]
  404d48:	add	x16, x16, #0xf58
  404d4c:	br	x17

0000000000404d50 <sd_event_unref@plt>:
  404d50:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404d54:	ldr	x17, [x16, #3936]
  404d58:	add	x16, x16, #0xf60
  404d5c:	br	x17

0000000000404d60 <mac_selinux_finish@plt>:
  404d60:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404d64:	ldr	x17, [x16, #3944]
  404d68:	add	x16, x16, #0xf68
  404d6c:	br	x17

0000000000404d70 <strcpy@plt>:
  404d70:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404d74:	ldr	x17, [x16, #3952]
  404d78:	add	x16, x16, #0xf70
  404d7c:	br	x17

0000000000404d80 <image_read_metadata@plt>:
  404d80:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404d84:	ldr	x17, [x16, #3960]
  404d88:	add	x16, x16, #0xf78
  404d8c:	br	x17

0000000000404d90 <image_discover@plt>:
  404d90:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404d94:	ldr	x17, [x16, #3968]
  404d98:	add	x16, x16, #0xf80
  404d9c:	br	x17

0000000000404da0 <unit_file_exists@plt>:
  404da0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404da4:	ldr	x17, [x16, #3976]
  404da8:	add	x16, x16, #0xf88
  404dac:	br	x17

0000000000404db0 <sd_event_add_signal@plt>:
  404db0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404db4:	ldr	x17, [x16, #3984]
  404db8:	add	x16, x16, #0xf90
  404dbc:	br	x17

0000000000404dc0 <open64@plt>:
  404dc0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404dc4:	ldr	x17, [x16, #3992]
  404dc8:	add	x16, x16, #0xf98
  404dcc:	br	x17

0000000000404dd0 <sd_bus_error_set_errno@plt>:
  404dd0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404dd4:	ldr	x17, [x16, #4000]
  404dd8:	add	x16, x16, #0xfa0
  404ddc:	br	x17

0000000000404de0 <set_put@plt>:
  404de0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404de4:	ldr	x17, [x16, #4008]
  404de8:	add	x16, x16, #0xfa8
  404dec:	br	x17

0000000000404df0 <strlen@plt>:
  404df0:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404df4:	ldr	x17, [x16, #4016]
  404df8:	add	x16, x16, #0xfb0
  404dfc:	br	x17

0000000000404e00 <mkdir_parents@plt>:
  404e00:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404e04:	ldr	x17, [x16, #4024]
  404e08:	add	x16, x16, #0xfb8
  404e0c:	br	x17

0000000000404e10 <sd_bus_message_ref@plt>:
  404e10:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404e14:	ldr	x17, [x16, #4032]
  404e18:	add	x16, x16, #0xfc0
  404e1c:	br	x17

0000000000404e20 <bus_verify_polkit_async@plt>:
  404e20:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404e24:	ldr	x17, [x16, #4040]
  404e28:	add	x16, x16, #0xfc8
  404e2c:	br	x17

0000000000404e30 <unit_name_is_valid@plt>:
  404e30:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404e34:	ldr	x17, [x16, #4048]
  404e38:	add	x16, x16, #0xfd0
  404e3c:	br	x17

0000000000404e40 <special_glyph@plt>:
  404e40:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404e44:	ldr	x17, [x16, #4056]
  404e48:	add	x16, x16, #0xfd8
  404e4c:	br	x17

0000000000404e50 <log_get_max_level_realm@plt>:
  404e50:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404e54:	ldr	x17, [x16, #4064]
  404e58:	add	x16, x16, #0xfe0
  404e5c:	br	x17

0000000000404e60 <sd_bus_message_close_container@plt>:
  404e60:	adrp	x16, 427000 <__FRAME_END__+0x1064c>
  404e64:	ldr	x17, [x16, #4072]
  404e68:	add	x16, x16, #0xfe8
  404e6c:	br	x17

Disassembly of section .text:

0000000000404e70 <_start>:
  404e70:	mov	x29, #0x0                   	// #0
  404e74:	mov	x30, #0x0                   	// #0
  404e78:	mov	x5, x0
  404e7c:	ldr	x1, [sp]
  404e80:	add	x2, sp, #0x8
  404e84:	mov	x6, sp
  404e88:	movz	x0, #0x0, lsl #48
  404e8c:	movk	x0, #0x0, lsl #32
  404e90:	movk	x0, #0x41, lsl #16
  404e94:	movk	x0, #0x1ec8
  404e98:	movz	x3, #0x0, lsl #48
  404e9c:	movk	x3, #0x0, lsl #32
  404ea0:	movk	x3, #0x41, lsl #16
  404ea4:	movk	x3, #0x1f18
  404ea8:	movz	x4, #0x0, lsl #48
  404eac:	movk	x4, #0x0, lsl #32
  404eb0:	movk	x4, #0x41, lsl #16
  404eb4:	movk	x4, #0x1f98
  404eb8:	bl	4043a0 <__libc_start_main@plt>
  404ebc:	bl	4047a0 <abort@plt>

0000000000404ec0 <call_weak_fn>:
  404ec0:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  404ec4:	ldr	x0, [x0, #4088]
  404ec8:	cbz	x0, 404ed0 <call_weak_fn+0x10>
  404ecc:	b	404430 <__gmon_start__@plt>
  404ed0:	ret

0000000000404ed4 <deregister_tm_clones>:
  404ed4:	stp	x29, x30, [sp, #-32]!
  404ed8:	mov	x29, sp
  404edc:	adrp	x0, 428000 <saved_argv@@SD_SHARED>
  404ee0:	add	x0, x0, #0x0
  404ee4:	str	x0, [sp, #24]
  404ee8:	ldr	x0, [sp, #24]
  404eec:	str	x0, [sp, #24]
  404ef0:	ldr	x1, [sp, #24]
  404ef4:	adrp	x0, 428000 <saved_argv@@SD_SHARED>
  404ef8:	add	x0, x0, #0x0
  404efc:	cmp	x1, x0
  404f00:	b.eq	404f3c <deregister_tm_clones+0x68>  // b.none
  404f04:	adrp	x0, 411000 <operation_free+0xac>
  404f08:	add	x0, x0, #0xfc0
  404f0c:	ldr	x0, [x0]
  404f10:	str	x0, [sp, #16]
  404f14:	ldr	x0, [sp, #16]
  404f18:	str	x0, [sp, #16]
  404f1c:	ldr	x0, [sp, #16]
  404f20:	cmp	x0, #0x0
  404f24:	b.eq	404f40 <deregister_tm_clones+0x6c>  // b.none
  404f28:	ldr	x1, [sp, #16]
  404f2c:	adrp	x0, 428000 <saved_argv@@SD_SHARED>
  404f30:	add	x0, x0, #0x0
  404f34:	blr	x1
  404f38:	b	404f40 <deregister_tm_clones+0x6c>
  404f3c:	nop
  404f40:	ldp	x29, x30, [sp], #32
  404f44:	ret

0000000000404f48 <register_tm_clones>:
  404f48:	stp	x29, x30, [sp, #-48]!
  404f4c:	mov	x29, sp
  404f50:	adrp	x0, 428000 <saved_argv@@SD_SHARED>
  404f54:	add	x0, x0, #0x0
  404f58:	str	x0, [sp, #40]
  404f5c:	ldr	x0, [sp, #40]
  404f60:	str	x0, [sp, #40]
  404f64:	ldr	x1, [sp, #40]
  404f68:	adrp	x0, 428000 <saved_argv@@SD_SHARED>
  404f6c:	add	x0, x0, #0x0
  404f70:	sub	x0, x1, x0
  404f74:	asr	x0, x0, #3
  404f78:	lsr	x1, x0, #63
  404f7c:	add	x0, x1, x0
  404f80:	asr	x0, x0, #1
  404f84:	str	x0, [sp, #32]
  404f88:	ldr	x0, [sp, #32]
  404f8c:	cmp	x0, #0x0
  404f90:	b.eq	404fd0 <register_tm_clones+0x88>  // b.none
  404f94:	adrp	x0, 411000 <operation_free+0xac>
  404f98:	add	x0, x0, #0xfc8
  404f9c:	ldr	x0, [x0]
  404fa0:	str	x0, [sp, #24]
  404fa4:	ldr	x0, [sp, #24]
  404fa8:	str	x0, [sp, #24]
  404fac:	ldr	x0, [sp, #24]
  404fb0:	cmp	x0, #0x0
  404fb4:	b.eq	404fd4 <register_tm_clones+0x8c>  // b.none
  404fb8:	ldr	x2, [sp, #24]
  404fbc:	ldr	x1, [sp, #32]
  404fc0:	adrp	x0, 428000 <saved_argv@@SD_SHARED>
  404fc4:	add	x0, x0, #0x0
  404fc8:	blr	x2
  404fcc:	b	404fd4 <register_tm_clones+0x8c>
  404fd0:	nop
  404fd4:	ldp	x29, x30, [sp], #48
  404fd8:	ret

0000000000404fdc <__do_global_dtors_aux>:
  404fdc:	stp	x29, x30, [sp, #-16]!
  404fe0:	mov	x29, sp
  404fe4:	adrp	x0, 428000 <saved_argv@@SD_SHARED>
  404fe8:	add	x0, x0, #0xc
  404fec:	ldrb	w0, [x0]
  404ff0:	and	x0, x0, #0xff
  404ff4:	cmp	x0, #0x0
  404ff8:	b.ne	405014 <__do_global_dtors_aux+0x38>  // b.any
  404ffc:	bl	404ed4 <deregister_tm_clones>
  405000:	adrp	x0, 428000 <saved_argv@@SD_SHARED>
  405004:	add	x0, x0, #0xc
  405008:	mov	w1, #0x1                   	// #1
  40500c:	strb	w1, [x0]
  405010:	b	405018 <__do_global_dtors_aux+0x3c>
  405014:	nop
  405018:	ldp	x29, x30, [sp], #16
  40501c:	ret

0000000000405020 <frame_dummy>:
  405020:	stp	x29, x30, [sp, #-16]!
  405024:	mov	x29, sp
  405028:	bl	404f48 <register_tm_clones>
  40502c:	nop
  405030:	ldp	x29, x30, [sp], #16
  405034:	ret

0000000000405038 <sd_bus_message_unrefp>:
  405038:	stp	x29, x30, [sp, #-32]!
  40503c:	mov	x29, sp
  405040:	str	x0, [sp, #24]
  405044:	ldr	x0, [sp, #24]
  405048:	ldr	x0, [x0]
  40504c:	cmp	x0, #0x0
  405050:	b.eq	405060 <sd_bus_message_unrefp+0x28>  // b.none
  405054:	ldr	x0, [sp, #24]
  405058:	ldr	x0, [x0]
  40505c:	bl	4043e0 <sd_bus_message_unref@plt>
  405060:	nop
  405064:	ldp	x29, x30, [sp], #32
  405068:	ret

000000000040506c <copy_file_atomic>:
  40506c:	stp	x29, x30, [sp, #-48]!
  405070:	mov	x29, sp
  405074:	str	x0, [sp, #40]
  405078:	str	x1, [sp, #32]
  40507c:	str	w2, [sp, #28]
  405080:	str	w3, [sp, #24]
  405084:	str	w4, [sp, #20]
  405088:	str	w5, [sp, #16]
  40508c:	mov	x7, #0x0                   	// #0
  405090:	mov	x6, #0x0                   	// #0
  405094:	ldr	w5, [sp, #16]
  405098:	ldr	w4, [sp, #20]
  40509c:	ldr	w3, [sp, #24]
  4050a0:	ldr	w2, [sp, #28]
  4050a4:	ldr	x1, [sp, #32]
  4050a8:	ldr	x0, [sp, #40]
  4050ac:	bl	404420 <copy_file_atomic_full@plt>
  4050b0:	ldp	x29, x30, [sp], #48
  4050b4:	ret

00000000004050b8 <copy_bytes>:
  4050b8:	stp	x29, x30, [sp, #-48]!
  4050bc:	mov	x29, sp
  4050c0:	str	w0, [sp, #44]
  4050c4:	str	w1, [sp, #40]
  4050c8:	str	x2, [sp, #32]
  4050cc:	str	w3, [sp, #28]
  4050d0:	mov	x7, #0x0                   	// #0
  4050d4:	mov	x6, #0x0                   	// #0
  4050d8:	mov	x5, #0x0                   	// #0
  4050dc:	mov	x4, #0x0                   	// #0
  4050e0:	ldr	w3, [sp, #28]
  4050e4:	ldr	x2, [sp, #32]
  4050e8:	ldr	w1, [sp, #40]
  4050ec:	ldr	w0, [sp, #44]
  4050f0:	bl	404ce0 <copy_bytes_full@plt>
  4050f4:	ldp	x29, x30, [sp], #48
  4050f8:	ret

00000000004050fc <mfree>:
  4050fc:	stp	x29, x30, [sp, #-32]!
  405100:	mov	x29, sp
  405104:	str	x0, [sp, #24]
  405108:	ldr	x0, [sp, #24]
  40510c:	bl	404cc0 <free@plt>
  405110:	mov	x0, #0x0                   	// #0
  405114:	ldp	x29, x30, [sp], #32
  405118:	ret

000000000040511c <freep>:
  40511c:	stp	x29, x30, [sp, #-32]!
  405120:	mov	x29, sp
  405124:	str	x0, [sp, #24]
  405128:	ldr	x0, [sp, #24]
  40512c:	ldr	x0, [x0]
  405130:	bl	404cc0 <free@plt>
  405134:	nop
  405138:	ldp	x29, x30, [sp], #32
  40513c:	ret

0000000000405140 <size_multiply_overflow>:
  405140:	sub	sp, sp, #0x10
  405144:	str	x0, [sp, #8]
  405148:	str	x1, [sp]
  40514c:	ldr	x0, [sp]
  405150:	cmp	x0, #0x0
  405154:	cset	w0, ne  // ne = any
  405158:	and	w0, w0, #0xff
  40515c:	and	x0, x0, #0xff
  405160:	cmp	x0, #0x0
  405164:	b.eq	4051a8 <size_multiply_overflow+0x68>  // b.none
  405168:	mov	x2, #0x0                   	// #0
  40516c:	ldr	x1, [sp, #8]
  405170:	ldr	x0, [sp]
  405174:	umulh	x0, x1, x0
  405178:	cmp	x0, #0x0
  40517c:	b.eq	405184 <size_multiply_overflow+0x44>  // b.none
  405180:	mov	x2, #0x1                   	// #1
  405184:	mov	x0, x2
  405188:	cmp	x0, #0x0
  40518c:	cset	w0, ne  // ne = any
  405190:	and	w0, w0, #0xff
  405194:	and	x0, x0, #0xff
  405198:	cmp	x0, #0x0
  40519c:	b.eq	4051a8 <size_multiply_overflow+0x68>  // b.none
  4051a0:	mov	w0, #0x1                   	// #1
  4051a4:	b	4051ac <size_multiply_overflow+0x6c>
  4051a8:	mov	w0, #0x0                   	// #0
  4051ac:	and	w0, w0, #0x1
  4051b0:	and	w0, w0, #0xff
  4051b4:	add	sp, sp, #0x10
  4051b8:	ret

00000000004051bc <malloc_multiply>:
  4051bc:	stp	x29, x30, [sp, #-32]!
  4051c0:	mov	x29, sp
  4051c4:	str	x0, [sp, #24]
  4051c8:	str	x1, [sp, #16]
  4051cc:	ldr	x1, [sp, #16]
  4051d0:	ldr	x0, [sp, #24]
  4051d4:	bl	405140 <size_multiply_overflow>
  4051d8:	and	w0, w0, #0xff
  4051dc:	cmp	w0, #0x0
  4051e0:	b.eq	4051ec <malloc_multiply+0x30>  // b.none
  4051e4:	mov	x0, #0x0                   	// #0
  4051e8:	b	405208 <malloc_multiply+0x4c>
  4051ec:	ldr	x1, [sp, #24]
  4051f0:	ldr	x0, [sp, #16]
  4051f4:	mul	x0, x1, x0
  4051f8:	cmp	x0, #0x0
  4051fc:	b.ne	405204 <malloc_multiply+0x48>  // b.any
  405200:	mov	x0, #0x1                   	// #1
  405204:	bl	404a50 <malloc@plt>
  405208:	ldp	x29, x30, [sp], #32
  40520c:	ret

0000000000405210 <isempty>:
  405210:	sub	sp, sp, #0x10
  405214:	str	x0, [sp, #8]
  405218:	ldr	x0, [sp, #8]
  40521c:	cmp	x0, #0x0
  405220:	b.eq	405234 <isempty+0x24>  // b.none
  405224:	ldr	x0, [sp, #8]
  405228:	ldrb	w0, [x0]
  40522c:	cmp	w0, #0x0
  405230:	b.ne	40523c <isempty+0x2c>  // b.any
  405234:	mov	w0, #0x1                   	// #1
  405238:	b	405240 <isempty+0x30>
  40523c:	mov	w0, #0x0                   	// #0
  405240:	and	w0, w0, #0x1
  405244:	and	w0, w0, #0xff
  405248:	add	sp, sp, #0x10
  40524c:	ret

0000000000405250 <startswith>:
  405250:	stp	x29, x30, [sp, #-48]!
  405254:	mov	x29, sp
  405258:	str	x0, [sp, #24]
  40525c:	str	x1, [sp, #16]
  405260:	ldr	x0, [sp, #16]
  405264:	bl	404df0 <strlen@plt>
  405268:	str	x0, [sp, #40]
  40526c:	ldr	x2, [sp, #40]
  405270:	ldr	x1, [sp, #16]
  405274:	ldr	x0, [sp, #24]
  405278:	bl	404760 <strncmp@plt>
  40527c:	cmp	w0, #0x0
  405280:	b.ne	405294 <startswith+0x44>  // b.any
  405284:	ldr	x1, [sp, #24]
  405288:	ldr	x0, [sp, #40]
  40528c:	add	x0, x1, x0
  405290:	b	405298 <startswith+0x48>
  405294:	mov	x0, #0x0                   	// #0
  405298:	ldp	x29, x30, [sp], #48
  40529c:	ret

00000000004052a0 <hashmap_free>:
  4052a0:	stp	x29, x30, [sp, #-32]!
  4052a4:	mov	x29, sp
  4052a8:	str	x0, [sp, #24]
  4052ac:	mov	x2, #0x0                   	// #0
  4052b0:	mov	x1, #0x0                   	// #0
  4052b4:	ldr	x0, [sp, #24]
  4052b8:	bl	404320 <internal_hashmap_free@plt>
  4052bc:	ldp	x29, x30, [sp], #32
  4052c0:	ret

00000000004052c4 <hashmap_get>:
  4052c4:	stp	x29, x30, [sp, #-32]!
  4052c8:	mov	x29, sp
  4052cc:	str	x0, [sp, #24]
  4052d0:	str	x1, [sp, #16]
  4052d4:	ldr	x1, [sp, #16]
  4052d8:	ldr	x0, [sp, #24]
  4052dc:	bl	404800 <internal_hashmap_get@plt>
  4052e0:	ldp	x29, x30, [sp], #32
  4052e4:	ret

00000000004052e8 <hashmap_size>:
  4052e8:	stp	x29, x30, [sp, #-32]!
  4052ec:	mov	x29, sp
  4052f0:	str	x0, [sp, #24]
  4052f4:	ldr	x0, [sp, #24]
  4052f8:	bl	404a70 <internal_hashmap_size@plt>
  4052fc:	ldp	x29, x30, [sp], #32
  405300:	ret

0000000000405304 <hashmap_isempty>:
  405304:	stp	x29, x30, [sp, #-32]!
  405308:	mov	x29, sp
  40530c:	str	x0, [sp, #24]
  405310:	ldr	x0, [sp, #24]
  405314:	bl	4052e8 <hashmap_size>
  405318:	cmp	w0, #0x0
  40531c:	cset	w0, eq  // eq = none
  405320:	and	w0, w0, #0xff
  405324:	ldp	x29, x30, [sp], #32
  405328:	ret

000000000040532c <hashmap_iterate>:
  40532c:	stp	x29, x30, [sp, #-48]!
  405330:	mov	x29, sp
  405334:	str	x0, [sp, #40]
  405338:	str	x1, [sp, #32]
  40533c:	str	x2, [sp, #24]
  405340:	str	x3, [sp, #16]
  405344:	ldr	x3, [sp, #16]
  405348:	ldr	x2, [sp, #24]
  40534c:	ldr	x1, [sp, #32]
  405350:	ldr	x0, [sp, #40]
  405354:	bl	404bf0 <internal_hashmap_iterate@plt>
  405358:	and	w0, w0, #0xff
  40535c:	ldp	x29, x30, [sp], #48
  405360:	ret

0000000000405364 <hashmap_freep>:
  405364:	stp	x29, x30, [sp, #-32]!
  405368:	mov	x29, sp
  40536c:	str	x0, [sp, #24]
  405370:	ldr	x0, [sp, #24]
  405374:	ldr	x0, [x0]
  405378:	cmp	x0, #0x0
  40537c:	b.eq	40538c <hashmap_freep+0x28>  // b.none
  405380:	ldr	x0, [sp, #24]
  405384:	ldr	x0, [x0]
  405388:	bl	4052a0 <hashmap_free>
  40538c:	nop
  405390:	ldp	x29, x30, [sp], #32
  405394:	ret

0000000000405398 <strv_isempty>:
  405398:	sub	sp, sp, #0x10
  40539c:	str	x0, [sp, #8]
  4053a0:	ldr	x0, [sp, #8]
  4053a4:	cmp	x0, #0x0
  4053a8:	b.eq	4053bc <strv_isempty+0x24>  // b.none
  4053ac:	ldr	x0, [sp, #8]
  4053b0:	ldr	x0, [x0]
  4053b4:	cmp	x0, #0x0
  4053b8:	b.ne	4053c4 <strv_isempty+0x2c>  // b.any
  4053bc:	mov	w0, #0x1                   	// #1
  4053c0:	b	4053c8 <strv_isempty+0x30>
  4053c4:	mov	w0, #0x0                   	// #0
  4053c8:	and	w0, w0, #0x1
  4053cc:	and	w0, w0, #0xff
  4053d0:	add	sp, sp, #0x10
  4053d4:	ret

00000000004053d8 <dissected_image_unrefp>:
  4053d8:	stp	x29, x30, [sp, #-32]!
  4053dc:	mov	x29, sp
  4053e0:	str	x0, [sp, #24]
  4053e4:	ldr	x0, [sp, #24]
  4053e8:	ldr	x0, [x0]
  4053ec:	cmp	x0, #0x0
  4053f0:	b.eq	405400 <dissected_image_unrefp+0x28>  // b.none
  4053f4:	ldr	x0, [sp, #24]
  4053f8:	ldr	x0, [x0]
  4053fc:	bl	404bd0 <dissected_image_unref@plt>
  405400:	nop
  405404:	ldp	x29, x30, [sp], #32
  405408:	ret

000000000040540c <closep>:
  40540c:	stp	x29, x30, [sp, #-32]!
  405410:	mov	x29, sp
  405414:	str	x0, [sp, #24]
  405418:	ldr	x0, [sp, #24]
  40541c:	ldr	w0, [x0]
  405420:	bl	4045e0 <safe_close@plt>
  405424:	nop
  405428:	ldp	x29, x30, [sp], #32
  40542c:	ret

0000000000405430 <close_pairp>:
  405430:	stp	x29, x30, [sp, #-32]!
  405434:	mov	x29, sp
  405438:	str	x0, [sp, #24]
  40543c:	ldr	x0, [sp, #24]
  405440:	bl	404600 <safe_close_pair@plt>
  405444:	nop
  405448:	ldp	x29, x30, [sp], #32
  40544c:	ret

0000000000405450 <fclosep>:
  405450:	stp	x29, x30, [sp, #-32]!
  405454:	mov	x29, sp
  405458:	str	x0, [sp, #24]
  40545c:	ldr	x0, [sp, #24]
  405460:	ldr	x0, [x0]
  405464:	bl	404280 <safe_fclose@plt>
  405468:	nop
  40546c:	ldp	x29, x30, [sp], #32
  405470:	ret

0000000000405474 <closedirp>:
  405474:	stp	x29, x30, [sp, #-32]!
  405478:	mov	x29, sp
  40547c:	str	x0, [sp, #24]
  405480:	ldr	x0, [sp, #24]
  405484:	ldr	x0, [x0]
  405488:	cmp	x0, #0x0
  40548c:	b.eq	40549c <closedirp+0x28>  // b.none
  405490:	ldr	x0, [sp, #24]
  405494:	ldr	x0, [x0]
  405498:	bl	404740 <closedir@plt>
  40549c:	nop
  4054a0:	ldp	x29, x30, [sp], #32
  4054a4:	ret

00000000004054a8 <write_string_file>:
  4054a8:	stp	x29, x30, [sp, #-48]!
  4054ac:	mov	x29, sp
  4054b0:	str	x0, [sp, #40]
  4054b4:	str	x1, [sp, #32]
  4054b8:	str	w2, [sp, #28]
  4054bc:	mov	x3, #0x0                   	// #0
  4054c0:	ldr	w2, [sp, #28]
  4054c4:	ldr	x1, [sp, #32]
  4054c8:	ldr	x0, [sp, #40]
  4054cc:	bl	404450 <write_string_file_ts@plt>
  4054d0:	ldp	x29, x30, [sp], #48
  4054d4:	ret

00000000004054d8 <read_line>:
  4054d8:	stp	x29, x30, [sp, #-48]!
  4054dc:	mov	x29, sp
  4054e0:	str	x0, [sp, #40]
  4054e4:	str	x1, [sp, #32]
  4054e8:	str	x2, [sp, #24]
  4054ec:	ldr	x3, [sp, #24]
  4054f0:	mov	w2, #0x0                   	// #0
  4054f4:	ldr	x1, [sp, #32]
  4054f8:	ldr	x0, [sp, #40]
  4054fc:	bl	4042a0 <read_line_full@plt>
  405500:	ldp	x29, x30, [sp], #48
  405504:	ret

0000000000405508 <_reset_errno_>:
  405508:	stp	x29, x30, [sp, #-32]!
  40550c:	mov	x29, sp
  405510:	str	x0, [sp, #24]
  405514:	ldr	x0, [sp, #24]
  405518:	ldr	w0, [x0]
  40551c:	cmp	w0, #0x0
  405520:	b.lt	40553c <_reset_errno_+0x34>  // b.tstop
  405524:	bl	404820 <__errno_location@plt>
  405528:	mov	x1, x0
  40552c:	ldr	x0, [sp, #24]
  405530:	ldr	w0, [x0]
  405534:	str	w0, [x1]
  405538:	b	405540 <_reset_errno_+0x38>
  40553c:	nop
  405540:	ldp	x29, x30, [sp], #32
  405544:	ret

0000000000405548 <rmdir_and_free>:
  405548:	stp	x29, x30, [sp, #-48]!
  40554c:	mov	x29, sp
  405550:	str	x0, [sp, #24]
  405554:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  405558:	add	x0, x0, #0x728
  40555c:	ldr	x1, [x0]
  405560:	str	x1, [sp, #40]
  405564:	mov	x1, #0x0                   	// #0
  405568:	bl	404820 <__errno_location@plt>
  40556c:	ldr	w0, [x0]
  405570:	str	w0, [sp, #36]
  405574:	ldr	x0, [sp, #24]
  405578:	bl	404810 <rmdir@plt>
  40557c:	ldr	x0, [sp, #24]
  405580:	bl	404cc0 <free@plt>
  405584:	add	x0, sp, #0x24
  405588:	bl	405508 <_reset_errno_>
  40558c:	nop
  405590:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  405594:	add	x0, x0, #0x728
  405598:	ldr	x1, [sp, #40]
  40559c:	ldr	x0, [x0]
  4055a0:	eor	x0, x1, x0
  4055a4:	cmp	x0, #0x0
  4055a8:	b.eq	4055b0 <rmdir_and_free+0x68>  // b.none
  4055ac:	bl	404930 <__stack_chk_fail@plt>
  4055b0:	ldp	x29, x30, [sp], #48
  4055b4:	ret

00000000004055b8 <rmdir_and_freep>:
  4055b8:	stp	x29, x30, [sp, #-32]!
  4055bc:	mov	x29, sp
  4055c0:	str	x0, [sp, #24]
  4055c4:	ldr	x0, [sp, #24]
  4055c8:	ldr	x0, [x0]
  4055cc:	cmp	x0, #0x0
  4055d0:	b.eq	4055e0 <rmdir_and_freep+0x28>  // b.none
  4055d4:	ldr	x0, [sp, #24]
  4055d8:	ldr	x0, [x0]
  4055dc:	bl	405548 <rmdir_and_free>
  4055e0:	nop
  4055e4:	ldp	x29, x30, [sp], #32
  4055e8:	ret

00000000004055ec <unlink_and_free>:
  4055ec:	stp	x29, x30, [sp, #-32]!
  4055f0:	mov	x29, sp
  4055f4:	str	x0, [sp, #24]
  4055f8:	ldr	x0, [sp, #24]
  4055fc:	bl	4047d0 <unlink_noerrno@plt>
  405600:	ldr	x0, [sp, #24]
  405604:	bl	404cc0 <free@plt>
  405608:	nop
  40560c:	ldp	x29, x30, [sp], #32
  405610:	ret

0000000000405614 <unlink_and_freep>:
  405614:	stp	x29, x30, [sp, #-32]!
  405618:	mov	x29, sp
  40561c:	str	x0, [sp, #24]
  405620:	ldr	x0, [sp, #24]
  405624:	ldr	x0, [x0]
  405628:	cmp	x0, #0x0
  40562c:	b.eq	40563c <unlink_and_freep+0x28>  // b.none
  405630:	ldr	x0, [sp, #24]
  405634:	ldr	x0, [x0]
  405638:	bl	4055ec <unlink_and_free>
  40563c:	nop
  405640:	ldp	x29, x30, [sp], #32
  405644:	ret

0000000000405648 <loop_device_unrefp>:
  405648:	stp	x29, x30, [sp, #-32]!
  40564c:	mov	x29, sp
  405650:	str	x0, [sp, #24]
  405654:	ldr	x0, [sp, #24]
  405658:	ldr	x0, [x0]
  40565c:	cmp	x0, #0x0
  405660:	b.eq	405670 <loop_device_unrefp+0x28>  // b.none
  405664:	ldr	x0, [sp, #24]
  405668:	ldr	x0, [x0]
  40566c:	bl	404550 <loop_device_unref@plt>
  405670:	nop
  405674:	ldp	x29, x30, [sp], #32
  405678:	ret

000000000040567c <image_unrefp>:
  40567c:	stp	x29, x30, [sp, #-32]!
  405680:	mov	x29, sp
  405684:	str	x0, [sp, #24]
  405688:	ldr	x0, [sp, #24]
  40568c:	ldr	x0, [x0]
  405690:	cmp	x0, #0x0
  405694:	b.eq	4056a4 <image_unrefp+0x28>  // b.none
  405698:	ldr	x0, [sp, #24]
  40569c:	ldr	x0, [x0]
  4056a0:	bl	404270 <image_unref@plt>
  4056a4:	nop
  4056a8:	ldp	x29, x30, [sp], #32
  4056ac:	ret

00000000004056b0 <set_free_free>:
  4056b0:	stp	x29, x30, [sp, #-32]!
  4056b4:	mov	x29, sp
  4056b8:	str	x0, [sp, #24]
  4056bc:	mov	x2, #0x0                   	// #0
  4056c0:	adrp	x0, 404000 <_init-0x230>
  4056c4:	add	x1, x0, #0xcc0
  4056c8:	ldr	x0, [sp, #24]
  4056cc:	bl	404320 <internal_hashmap_free@plt>
  4056d0:	ldp	x29, x30, [sp], #32
  4056d4:	ret

00000000004056d8 <set_get>:
  4056d8:	stp	x29, x30, [sp, #-32]!
  4056dc:	mov	x29, sp
  4056e0:	str	x0, [sp, #24]
  4056e4:	str	x1, [sp, #16]
  4056e8:	ldr	x1, [sp, #16]
  4056ec:	ldr	x0, [sp, #24]
  4056f0:	bl	404800 <internal_hashmap_get@plt>
  4056f4:	ldp	x29, x30, [sp], #32
  4056f8:	ret

00000000004056fc <set_size>:
  4056fc:	stp	x29, x30, [sp, #-32]!
  405700:	mov	x29, sp
  405704:	str	x0, [sp, #24]
  405708:	ldr	x0, [sp, #24]
  40570c:	bl	404a70 <internal_hashmap_size@plt>
  405710:	ldp	x29, x30, [sp], #32
  405714:	ret

0000000000405718 <set_isempty>:
  405718:	stp	x29, x30, [sp, #-32]!
  40571c:	mov	x29, sp
  405720:	str	x0, [sp, #24]
  405724:	ldr	x0, [sp, #24]
  405728:	bl	4056fc <set_size>
  40572c:	cmp	w0, #0x0
  405730:	cset	w0, eq  // eq = none
  405734:	and	w0, w0, #0xff
  405738:	ldp	x29, x30, [sp], #32
  40573c:	ret

0000000000405740 <set_free_freep>:
  405740:	stp	x29, x30, [sp, #-32]!
  405744:	mov	x29, sp
  405748:	str	x0, [sp, #24]
  40574c:	ldr	x0, [sp, #24]
  405750:	ldr	x0, [x0]
  405754:	cmp	x0, #0x0
  405758:	b.eq	405768 <set_free_freep+0x28>  // b.none
  40575c:	ldr	x0, [sp, #24]
  405760:	ldr	x0, [x0]
  405764:	bl	4056b0 <set_free_free>
  405768:	nop
  40576c:	ldp	x29, x30, [sp], #32
  405770:	ret

0000000000405774 <portable_metadata_unrefp>:
  405774:	stp	x29, x30, [sp, #-32]!
  405778:	mov	x29, sp
  40577c:	str	x0, [sp, #24]
  405780:	ldr	x0, [sp, #24]
  405784:	ldr	x0, [x0]
  405788:	cmp	x0, #0x0
  40578c:	b.eq	40579c <portable_metadata_unrefp+0x28>  // b.none
  405790:	ldr	x0, [sp, #24]
  405794:	ldr	x0, [x0]
  405798:	bl	405af0 <portable_metadata_unref>
  40579c:	nop
  4057a0:	ldp	x29, x30, [sp], #32
  4057a4:	ret

00000000004057a8 <safe_fork>:
  4057a8:	stp	x29, x30, [sp, #-48]!
  4057ac:	mov	x29, sp
  4057b0:	str	x0, [sp, #40]
  4057b4:	str	w1, [sp, #36]
  4057b8:	str	x2, [sp, #24]
  4057bc:	ldr	x4, [sp, #24]
  4057c0:	ldr	w3, [sp, #36]
  4057c4:	mov	x2, #0x0                   	// #0
  4057c8:	mov	x1, #0x0                   	// #0
  4057cc:	ldr	x0, [sp, #40]
  4057d0:	bl	404c20 <safe_fork_full@plt>
  4057d4:	ldp	x29, x30, [sp], #48
  4057d8:	ret

00000000004057dc <block_signals_reset>:
  4057dc:	stp	x29, x30, [sp, #-32]!
  4057e0:	mov	x29, sp
  4057e4:	str	x0, [sp, #24]
  4057e8:	mov	x2, #0x0                   	// #0
  4057ec:	ldr	x1, [sp, #24]
  4057f0:	mov	w0, #0x2                   	// #2
  4057f4:	bl	404890 <sigprocmask@plt>
  4057f8:	lsr	w0, w0, #31
  4057fc:	and	w0, w0, #0xff
  405800:	and	x0, x0, #0xff
  405804:	cmp	x0, #0x0
  405808:	b.eq	405834 <block_signals_reset+0x58>  // b.none
  40580c:	adrp	x0, 412000 <_fini+0x50>
  405810:	add	x1, x0, #0x3
  405814:	adrp	x0, 413000 <_fini+0x1050>
  405818:	add	x4, x0, #0x228
  40581c:	mov	w3, #0x18                  	// #24
  405820:	mov	x2, x1
  405824:	adrp	x0, 412000 <_fini+0x50>
  405828:	add	x1, x0, #0x20
  40582c:	mov	w0, #0x0                   	// #0
  405830:	bl	404670 <log_assert_failed_realm@plt>
  405834:	nop
  405838:	ldp	x29, x30, [sp], #32
  40583c:	ret

0000000000405840 <qsort_safe>:
  405840:	stp	x29, x30, [sp, #-48]!
  405844:	mov	x29, sp
  405848:	str	x0, [sp, #40]
  40584c:	str	x1, [sp, #32]
  405850:	str	x2, [sp, #24]
  405854:	str	x3, [sp, #16]
  405858:	ldr	x0, [sp, #32]
  40585c:	cmp	x0, #0x1
  405860:	b.ls	4058c0 <qsort_safe+0x80>  // b.plast
  405864:	ldr	x0, [sp, #40]
  405868:	cmp	x0, #0x0
  40586c:	cset	w0, eq  // eq = none
  405870:	and	w0, w0, #0xff
  405874:	and	x0, x0, #0xff
  405878:	cmp	x0, #0x0
  40587c:	b.eq	4058a8 <qsort_safe+0x68>  // b.none
  405880:	adrp	x0, 412000 <_fini+0x50>
  405884:	add	x1, x0, #0x4b
  405888:	adrp	x0, 413000 <_fini+0x1050>
  40588c:	add	x4, x0, #0x198
  405890:	mov	w3, #0x2e                  	// #46
  405894:	mov	x2, x1
  405898:	adrp	x0, 412000 <_fini+0x50>
  40589c:	add	x1, x0, #0x68
  4058a0:	mov	w0, #0x0                   	// #0
  4058a4:	bl	404670 <log_assert_failed_realm@plt>
  4058a8:	ldr	x3, [sp, #16]
  4058ac:	ldr	x2, [sp, #24]
  4058b0:	ldr	x1, [sp, #32]
  4058b4:	ldr	x0, [sp, #40]
  4058b8:	bl	404470 <qsort@plt>
  4058bc:	b	4058c4 <qsort_safe+0x84>
  4058c0:	nop
  4058c4:	ldp	x29, x30, [sp], #48
  4058c8:	ret

00000000004058cc <prefix_match>:
  4058cc:	stp	x29, x30, [sp, #-48]!
  4058d0:	mov	x29, sp
  4058d4:	str	x0, [sp, #24]
  4058d8:	str	x1, [sp, #16]
  4058dc:	ldr	x1, [sp, #16]
  4058e0:	ldr	x0, [sp, #24]
  4058e4:	bl	405250 <startswith>
  4058e8:	str	x0, [sp, #40]
  4058ec:	ldr	x0, [sp, #40]
  4058f0:	cmp	x0, #0x0
  4058f4:	b.ne	405900 <prefix_match+0x34>  // b.any
  4058f8:	mov	w0, #0x0                   	// #0
  4058fc:	b	40594c <prefix_match+0x80>
  405900:	strb	wzr, [sp, #39]
  405904:	ldr	x0, [sp, #40]
  405908:	ldrb	w0, [x0]
  40590c:	cmp	w0, #0x40
  405910:	b.eq	405938 <prefix_match+0x6c>  // b.none
  405914:	cmp	w0, #0x40
  405918:	b.gt	405940 <prefix_match+0x74>
  40591c:	cmp	w0, #0x0
  405920:	b.eq	405938 <prefix_match+0x6c>  // b.none
  405924:	cmp	w0, #0x0
  405928:	b.lt	405940 <prefix_match+0x74>  // b.tstop
  40592c:	sub	w0, w0, #0x2d
  405930:	cmp	w0, #0x1
  405934:	b.hi	405940 <prefix_match+0x74>  // b.pmore
  405938:	mov	w0, #0x1                   	// #1
  40593c:	strb	w0, [sp, #39]
  405940:	nop
  405944:	ldrb	w0, [sp, #39]
  405948:	nop
  40594c:	ldp	x29, x30, [sp], #48
  405950:	ret

0000000000405954 <unit_match>:
  405954:	stp	x29, x30, [sp, #-112]!
  405958:	mov	x29, sp
  40595c:	str	x0, [sp, #24]
  405960:	str	x1, [sp, #16]
  405964:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  405968:	add	x0, x0, #0x728
  40596c:	ldr	x1, [x0]
  405970:	str	x1, [sp, #104]
  405974:	mov	x1, #0x0                   	// #0
  405978:	mov	w1, #0x2e                  	// #46
  40597c:	ldr	x0, [sp, #24]
  405980:	bl	404620 <strrchr@plt>
  405984:	str	x0, [sp, #48]
  405988:	ldr	x0, [sp, #48]
  40598c:	cmp	x0, #0x0
  405990:	b.ne	40599c <unit_match+0x48>  // b.any
  405994:	mov	w0, #0x0                   	// #0
  405998:	b	405a58 <unit_match+0x104>
  40599c:	adrp	x0, 412000 <_fini+0x50>
  4059a0:	add	x1, x0, #0x70
  4059a4:	add	x0, sp, #0x38
  4059a8:	ldp	x2, x3, [x1]
  4059ac:	stp	x2, x3, [x0]
  4059b0:	ldp	x2, x3, [x1, #16]
  4059b4:	stp	x2, x3, [x0, #16]
  4059b8:	ldp	x2, x3, [x1, #32]
  4059bc:	stp	x2, x3, [x0, #32]
  4059c0:	add	x0, sp, #0x38
  4059c4:	ldr	x1, [sp, #48]
  4059c8:	bl	404a30 <strv_find@plt>
  4059cc:	cmp	x0, #0x0
  4059d0:	b.ne	4059dc <unit_match+0x88>  // b.any
  4059d4:	mov	w0, #0x0                   	// #0
  4059d8:	b	405a58 <unit_match+0x104>
  4059dc:	ldr	x0, [sp, #16]
  4059e0:	bl	405398 <strv_isempty>
  4059e4:	and	w0, w0, #0xff
  4059e8:	cmp	w0, #0x0
  4059ec:	b.eq	4059f8 <unit_match+0xa4>  // b.none
  4059f0:	mov	w0, #0x1                   	// #1
  4059f4:	b	405a58 <unit_match+0x104>
  4059f8:	ldr	x0, [sp, #16]
  4059fc:	str	x0, [sp, #40]
  405a00:	b	405a38 <unit_match+0xe4>
  405a04:	ldr	x0, [sp, #40]
  405a08:	ldr	x0, [x0]
  405a0c:	mov	x1, x0
  405a10:	ldr	x0, [sp, #24]
  405a14:	bl	4058cc <prefix_match>
  405a18:	and	w0, w0, #0xff
  405a1c:	cmp	w0, #0x0
  405a20:	b.eq	405a2c <unit_match+0xd8>  // b.none
  405a24:	mov	w0, #0x1                   	// #1
  405a28:	b	405a58 <unit_match+0x104>
  405a2c:	ldr	x0, [sp, #40]
  405a30:	add	x0, x0, #0x8
  405a34:	str	x0, [sp, #40]
  405a38:	ldr	x0, [sp, #40]
  405a3c:	cmp	x0, #0x0
  405a40:	b.eq	405a54 <unit_match+0x100>  // b.none
  405a44:	ldr	x0, [sp, #40]
  405a48:	ldr	x0, [x0]
  405a4c:	cmp	x0, #0x0
  405a50:	b.ne	405a04 <unit_match+0xb0>  // b.any
  405a54:	mov	w0, #0x0                   	// #0
  405a58:	mov	w1, w0
  405a5c:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  405a60:	add	x0, x0, #0x728
  405a64:	ldr	x2, [sp, #104]
  405a68:	ldr	x0, [x0]
  405a6c:	eor	x0, x2, x0
  405a70:	cmp	x0, #0x0
  405a74:	b.eq	405a7c <unit_match+0x128>  // b.none
  405a78:	bl	404930 <__stack_chk_fail@plt>
  405a7c:	mov	w0, w1
  405a80:	ldp	x29, x30, [sp], #112
  405a84:	ret

0000000000405a88 <portable_metadata_new>:
  405a88:	stp	x29, x30, [sp, #-48]!
  405a8c:	mov	x29, sp
  405a90:	str	x0, [sp, #24]
  405a94:	str	w1, [sp, #20]
  405a98:	ldr	x0, [sp, #24]
  405a9c:	bl	404df0 <strlen@plt>
  405aa0:	add	x0, x0, #0x11
  405aa4:	mov	x1, x0
  405aa8:	mov	x0, #0x1                   	// #1
  405aac:	bl	404c10 <calloc@plt>
  405ab0:	str	x0, [sp, #40]
  405ab4:	ldr	x0, [sp, #40]
  405ab8:	cmp	x0, #0x0
  405abc:	b.ne	405ac8 <portable_metadata_new+0x40>  // b.any
  405ac0:	mov	x0, #0x0                   	// #0
  405ac4:	b	405ae8 <portable_metadata_new+0x60>
  405ac8:	ldr	x0, [sp, #40]
  405acc:	add	x0, x0, #0x10
  405ad0:	ldr	x1, [sp, #24]
  405ad4:	bl	404d70 <strcpy@plt>
  405ad8:	ldr	x0, [sp, #40]
  405adc:	ldr	w1, [sp, #20]
  405ae0:	str	w1, [x0]
  405ae4:	ldr	x0, [sp, #40]
  405ae8:	ldp	x29, x30, [sp], #48
  405aec:	ret

0000000000405af0 <portable_metadata_unref>:
  405af0:	stp	x29, x30, [sp, #-32]!
  405af4:	mov	x29, sp
  405af8:	str	x0, [sp, #24]
  405afc:	ldr	x0, [sp, #24]
  405b00:	cmp	x0, #0x0
  405b04:	b.ne	405b10 <portable_metadata_unref+0x20>  // b.any
  405b08:	mov	x0, #0x0                   	// #0
  405b0c:	b	405b30 <portable_metadata_unref+0x40>
  405b10:	ldr	x0, [sp, #24]
  405b14:	ldr	w0, [x0]
  405b18:	bl	4045e0 <safe_close@plt>
  405b1c:	ldr	x0, [sp, #24]
  405b20:	ldr	x0, [x0, #8]
  405b24:	bl	404cc0 <free@plt>
  405b28:	ldr	x0, [sp, #24]
  405b2c:	bl	4050fc <mfree>
  405b30:	ldp	x29, x30, [sp], #32
  405b34:	ret

0000000000405b38 <compare_metadata>:
  405b38:	stp	x29, x30, [sp, #-32]!
  405b3c:	mov	x29, sp
  405b40:	str	x0, [sp, #24]
  405b44:	str	x1, [sp, #16]
  405b48:	ldr	x0, [sp, #24]
  405b4c:	ldr	x0, [x0]
  405b50:	add	x2, x0, #0x10
  405b54:	ldr	x0, [sp, #16]
  405b58:	ldr	x0, [x0]
  405b5c:	add	x0, x0, #0x10
  405b60:	mov	x1, x0
  405b64:	mov	x0, x2
  405b68:	bl	404b90 <strcmp@plt>
  405b6c:	ldp	x29, x30, [sp], #32
  405b70:	ret

0000000000405b74 <portable_metadata_hashmap_to_sorted_array>:
  405b74:	stp	x29, x30, [sp, #-112]!
  405b78:	mov	x29, sp
  405b7c:	str	x19, [sp, #16]
  405b80:	str	x0, [sp, #40]
  405b84:	str	x1, [sp, #32]
  405b88:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  405b8c:	add	x0, x0, #0x728
  405b90:	ldr	x1, [x0]
  405b94:	str	x1, [sp, #104]
  405b98:	mov	x1, #0x0                   	// #0
  405b9c:	str	xzr, [sp, #48]
  405ba0:	str	xzr, [sp, #64]
  405ba4:	ldr	x0, [sp, #40]
  405ba8:	bl	4052e8 <hashmap_size>
  405bac:	mov	w0, w0
  405bb0:	mov	x1, x0
  405bb4:	mov	x0, #0x8                   	// #8
  405bb8:	bl	4051bc <malloc_multiply>
  405bbc:	str	x0, [sp, #48]
  405bc0:	ldr	x0, [sp, #48]
  405bc4:	cmp	x0, #0x0
  405bc8:	b.ne	405bd4 <portable_metadata_hashmap_to_sorted_array+0x60>  // b.any
  405bcc:	mov	w19, #0xfffffff4            	// #-12
  405bd0:	b	405cb8 <portable_metadata_hashmap_to_sorted_array+0x144>
  405bd4:	mov	w0, #0xfffffffe            	// #-2
  405bd8:	str	w0, [sp, #88]
  405bdc:	str	xzr, [sp, #96]
  405be0:	b	405c04 <portable_metadata_hashmap_to_sorted_array+0x90>
  405be4:	ldr	x1, [sp, #48]
  405be8:	ldr	x0, [sp, #64]
  405bec:	add	x2, x0, #0x1
  405bf0:	str	x2, [sp, #64]
  405bf4:	lsl	x0, x0, #3
  405bf8:	add	x0, x1, x0
  405bfc:	ldr	x1, [sp, #56]
  405c00:	str	x1, [x0]
  405c04:	add	x1, sp, #0x38
  405c08:	add	x0, sp, #0x58
  405c0c:	mov	x3, #0x0                   	// #0
  405c10:	mov	x2, x1
  405c14:	mov	x1, x0
  405c18:	ldr	x0, [sp, #40]
  405c1c:	bl	40532c <hashmap_iterate>
  405c20:	and	w0, w0, #0xff
  405c24:	cmp	w0, #0x0
  405c28:	b.ne	405be4 <portable_metadata_hashmap_to_sorted_array+0x70>  // b.any
  405c2c:	ldr	x0, [sp, #40]
  405c30:	bl	4052e8 <hashmap_size>
  405c34:	mov	w0, w0
  405c38:	ldr	x1, [sp, #64]
  405c3c:	cmp	x1, x0
  405c40:	cset	w0, ne  // ne = any
  405c44:	and	w0, w0, #0xff
  405c48:	and	x0, x0, #0xff
  405c4c:	cmp	x0, #0x0
  405c50:	b.eq	405c7c <portable_metadata_hashmap_to_sorted_array+0x108>  // b.none
  405c54:	adrp	x0, 412000 <_fini+0x50>
  405c58:	add	x1, x0, #0xa3
  405c5c:	adrp	x0, 413000 <_fini+0x1050>
  405c60:	add	x4, x0, #0x168
  405c64:	mov	w3, #0x73                  	// #115
  405c68:	mov	x2, x1
  405c6c:	adrp	x0, 412000 <_fini+0x50>
  405c70:	add	x1, x0, #0xc0
  405c74:	mov	w0, #0x0                   	// #0
  405c78:	bl	404670 <log_assert_failed_realm@plt>
  405c7c:	adrp	x0, 405000 <__do_global_dtors_aux+0x24>
  405c80:	add	x0, x0, #0xb38
  405c84:	str	x0, [sp, #72]
  405c88:	ldr	x0, [sp, #48]
  405c8c:	ldr	x3, [sp, #72]
  405c90:	mov	x2, #0x8                   	// #8
  405c94:	ldr	x1, [sp, #64]
  405c98:	bl	405840 <qsort_safe>
  405c9c:	ldr	x0, [sp, #48]
  405ca0:	str	x0, [sp, #80]
  405ca4:	str	xzr, [sp, #48]
  405ca8:	ldr	x1, [sp, #80]
  405cac:	ldr	x0, [sp, #32]
  405cb0:	str	x1, [x0]
  405cb4:	mov	w19, #0x0                   	// #0
  405cb8:	add	x0, sp, #0x30
  405cbc:	bl	40511c <freep>
  405cc0:	mov	w1, w19
  405cc4:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  405cc8:	add	x0, x0, #0x728
  405ccc:	ldr	x2, [sp, #104]
  405cd0:	ldr	x0, [x0]
  405cd4:	eor	x0, x2, x0
  405cd8:	cmp	x0, #0x0
  405cdc:	b.eq	405ce4 <portable_metadata_hashmap_to_sorted_array+0x170>  // b.none
  405ce0:	bl	404930 <__stack_chk_fail@plt>
  405ce4:	mov	w0, w1
  405ce8:	ldr	x19, [sp, #16]
  405cec:	ldp	x29, x30, [sp], #112
  405cf0:	ret

0000000000405cf4 <send_item>:
  405cf4:	stp	x29, x30, [sp, #-176]!
  405cf8:	mov	x29, sp
  405cfc:	str	x19, [sp, #16]
  405d00:	str	w0, [sp, #44]
  405d04:	str	x1, [sp, #32]
  405d08:	str	w2, [sp, #40]
  405d0c:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  405d10:	add	x0, x0, #0x728
  405d14:	ldr	x1, [x0]
  405d18:	str	x1, [sp, #168]
  405d1c:	mov	x1, #0x0                   	// #0
  405d20:	stp	xzr, xzr, [sp, #144]
  405d24:	str	xzr, [sp, #160]
  405d28:	stp	xzr, xzr, [sp, #88]
  405d2c:	stp	xzr, xzr, [sp, #104]
  405d30:	stp	xzr, xzr, [sp, #120]
  405d34:	str	xzr, [sp, #136]
  405d38:	add	x0, sp, #0x48
  405d3c:	str	x0, [sp, #104]
  405d40:	mov	x0, #0x1                   	// #1
  405d44:	str	x0, [sp, #112]
  405d48:	add	x0, sp, #0x90
  405d4c:	str	x0, [sp, #120]
  405d50:	mov	x0, #0x18                  	// #24
  405d54:	str	x0, [sp, #128]
  405d58:	mov	w0, #0xffffffff            	// #-1
  405d5c:	str	w0, [sp, #60]
  405d60:	ldr	w0, [sp, #44]
  405d64:	lsr	w0, w0, #31
  405d68:	and	w0, w0, #0xff
  405d6c:	and	x0, x0, #0xff
  405d70:	cmp	x0, #0x0
  405d74:	b.eq	405da0 <send_item+0xac>  // b.none
  405d78:	adrp	x0, 412000 <_fini+0x50>
  405d7c:	add	x1, x0, #0xa3
  405d80:	adrp	x0, 413000 <_fini+0x1050>
  405d84:	add	x4, x0, #0x1a8
  405d88:	mov	w3, #0x8e                  	// #142
  405d8c:	mov	x2, x1
  405d90:	adrp	x0, 412000 <_fini+0x50>
  405d94:	add	x1, x0, #0xe0
  405d98:	mov	w0, #0x0                   	// #0
  405d9c:	bl	404670 <log_assert_failed_realm@plt>
  405da0:	ldr	x0, [sp, #32]
  405da4:	cmp	x0, #0x0
  405da8:	cset	w0, eq  // eq = none
  405dac:	and	w0, w0, #0xff
  405db0:	and	x0, x0, #0xff
  405db4:	cmp	x0, #0x0
  405db8:	b.eq	405de4 <send_item+0xf0>  // b.none
  405dbc:	adrp	x0, 412000 <_fini+0x50>
  405dc0:	add	x1, x0, #0xa3
  405dc4:	adrp	x0, 413000 <_fini+0x1050>
  405dc8:	add	x4, x0, #0x1a8
  405dcc:	mov	w3, #0x8f                  	// #143
  405dd0:	mov	x2, x1
  405dd4:	adrp	x0, 412000 <_fini+0x50>
  405dd8:	add	x1, x0, #0xf0
  405ddc:	mov	w0, #0x0                   	// #0
  405de0:	bl	404670 <log_assert_failed_realm@plt>
  405de4:	ldr	w0, [sp, #40]
  405de8:	lsr	w0, w0, #31
  405dec:	and	w0, w0, #0xff
  405df0:	and	x0, x0, #0xff
  405df4:	cmp	x0, #0x0
  405df8:	b.eq	405e24 <send_item+0x130>  // b.none
  405dfc:	adrp	x0, 412000 <_fini+0x50>
  405e00:	add	x1, x0, #0xa3
  405e04:	adrp	x0, 413000 <_fini+0x1050>
  405e08:	add	x4, x0, #0x1a8
  405e0c:	mov	w3, #0x90                  	// #144
  405e10:	mov	x2, x1
  405e14:	adrp	x0, 412000 <_fini+0x50>
  405e18:	add	x1, x0, #0xf8
  405e1c:	mov	w0, #0x0                   	// #0
  405e20:	bl	404670 <log_assert_failed_realm@plt>
  405e24:	ldr	w0, [sp, #40]
  405e28:	bl	404520 <fd_duplicate_data_fd@plt>
  405e2c:	str	w0, [sp, #60]
  405e30:	ldr	w0, [sp, #60]
  405e34:	cmp	w0, #0x0
  405e38:	b.ge	405e44 <send_item+0x150>  // b.tcont
  405e3c:	ldr	w19, [sp, #60]
  405e40:	b	405ee4 <send_item+0x1f0>
  405e44:	ldr	x0, [sp, #128]
  405e48:	cmp	x0, #0xf
  405e4c:	b.ls	405e58 <send_item+0x164>  // b.plast
  405e50:	ldr	x0, [sp, #120]
  405e54:	b	405e5c <send_item+0x168>
  405e58:	mov	x0, #0x0                   	// #0
  405e5c:	str	x0, [sp, #64]
  405e60:	ldr	x0, [sp, #64]
  405e64:	mov	w1, #0x1                   	// #1
  405e68:	str	w1, [x0, #8]
  405e6c:	ldr	x0, [sp, #64]
  405e70:	mov	w1, #0x1                   	// #1
  405e74:	str	w1, [x0, #12]
  405e78:	ldr	x0, [sp, #64]
  405e7c:	mov	x1, #0x14                  	// #20
  405e80:	str	x1, [x0]
  405e84:	ldr	x0, [sp, #64]
  405e88:	add	x0, x0, #0x10
  405e8c:	ldr	w1, [sp, #60]
  405e90:	str	w1, [x0]
  405e94:	mov	x0, #0x18                  	// #24
  405e98:	str	x0, [sp, #128]
  405e9c:	ldr	x0, [sp, #32]
  405ea0:	bl	404df0 <strlen@plt>
  405ea4:	mov	x1, x0
  405ea8:	ldr	x0, [sp, #32]
  405eac:	str	x0, [sp, #72]
  405eb0:	str	x1, [sp, #80]
  405eb4:	add	x0, sp, #0x58
  405eb8:	mov	w2, #0x4000                	// #16384
  405ebc:	mov	x1, x0
  405ec0:	ldr	w0, [sp, #44]
  405ec4:	bl	404d00 <sendmsg@plt>
  405ec8:	cmp	x0, #0x0
  405ecc:	b.ge	405ee0 <send_item+0x1ec>  // b.tcont
  405ed0:	bl	404820 <__errno_location@plt>
  405ed4:	ldr	w0, [x0]
  405ed8:	neg	w19, w0
  405edc:	b	405ee4 <send_item+0x1f0>
  405ee0:	mov	w19, #0x0                   	// #0
  405ee4:	add	x0, sp, #0x3c
  405ee8:	bl	40540c <closep>
  405eec:	mov	w1, w19
  405ef0:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  405ef4:	add	x0, x0, #0x728
  405ef8:	ldr	x2, [sp, #168]
  405efc:	ldr	x0, [x0]
  405f00:	eor	x0, x2, x0
  405f04:	cmp	x0, #0x0
  405f08:	b.eq	405f10 <send_item+0x21c>  // b.none
  405f0c:	bl	404930 <__stack_chk_fail@plt>
  405f10:	mov	w0, w1
  405f14:	ldr	x19, [sp, #16]
  405f18:	ldp	x29, x30, [sp], #176
  405f1c:	ret

0000000000405f20 <recv_item>:
  405f20:	mov	x12, #0x10d0                	// #4304
  405f24:	sub	sp, sp, x12
  405f28:	stp	x29, x30, [sp]
  405f2c:	mov	x29, sp
  405f30:	str	x19, [sp, #16]
  405f34:	str	w0, [sp, #60]
  405f38:	str	x1, [sp, #48]
  405f3c:	str	x2, [sp, #40]
  405f40:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  405f44:	add	x0, x0, #0x728
  405f48:	ldr	x1, [x0]
  405f4c:	str	x1, [sp, #4296]
  405f50:	mov	x1, #0x0                   	// #0
  405f54:	stp	xzr, xzr, [sp, #168]
  405f58:	str	xzr, [sp, #184]
  405f5c:	add	x0, sp, #0xc0
  405f60:	str	x0, [sp, #96]
  405f64:	mov	x0, #0x1001                	// #4097
  405f68:	str	x0, [sp, #104]
  405f6c:	stp	xzr, xzr, [sp, #112]
  405f70:	stp	xzr, xzr, [sp, #128]
  405f74:	stp	xzr, xzr, [sp, #144]
  405f78:	str	xzr, [sp, #160]
  405f7c:	add	x0, sp, #0x60
  405f80:	str	x0, [sp, #128]
  405f84:	mov	x0, #0x1                   	// #1
  405f88:	str	x0, [sp, #136]
  405f8c:	add	x0, sp, #0xa8
  405f90:	str	x0, [sp, #144]
  405f94:	mov	x0, #0x18                  	// #24
  405f98:	str	x0, [sp, #152]
  405f9c:	mov	w0, #0xffffffff            	// #-1
  405fa0:	str	w0, [sp, #64]
  405fa4:	ldr	w0, [sp, #60]
  405fa8:	lsr	w0, w0, #31
  405fac:	and	w0, w0, #0xff
  405fb0:	and	x0, x0, #0xff
  405fb4:	cmp	x0, #0x0
  405fb8:	b.eq	405fe4 <recv_item+0xc4>  // b.none
  405fbc:	adrp	x0, 412000 <_fini+0x50>
  405fc0:	add	x1, x0, #0xa3
  405fc4:	adrp	x0, 413000 <_fini+0x1050>
  405fc8:	add	x4, x0, #0x1b8
  405fcc:	mov	w3, #0xbb                  	// #187
  405fd0:	mov	x2, x1
  405fd4:	adrp	x0, 412000 <_fini+0x50>
  405fd8:	add	x1, x0, #0xe0
  405fdc:	mov	w0, #0x0                   	// #0
  405fe0:	bl	404670 <log_assert_failed_realm@plt>
  405fe4:	ldr	x0, [sp, #48]
  405fe8:	cmp	x0, #0x0
  405fec:	cset	w0, eq  // eq = none
  405ff0:	and	w0, w0, #0xff
  405ff4:	and	x0, x0, #0xff
  405ff8:	cmp	x0, #0x0
  405ffc:	b.eq	406028 <recv_item+0x108>  // b.none
  406000:	adrp	x0, 412000 <_fini+0x50>
  406004:	add	x1, x0, #0xa3
  406008:	adrp	x0, 413000 <_fini+0x1050>
  40600c:	add	x4, x0, #0x1b8
  406010:	mov	w3, #0xbc                  	// #188
  406014:	mov	x2, x1
  406018:	adrp	x0, 412000 <_fini+0x50>
  40601c:	add	x1, x0, #0x100
  406020:	mov	w0, #0x0                   	// #0
  406024:	bl	404670 <log_assert_failed_realm@plt>
  406028:	ldr	x0, [sp, #40]
  40602c:	cmp	x0, #0x0
  406030:	cset	w0, eq  // eq = none
  406034:	and	w0, w0, #0xff
  406038:	and	x0, x0, #0xff
  40603c:	cmp	x0, #0x0
  406040:	b.eq	40606c <recv_item+0x14c>  // b.none
  406044:	adrp	x0, 412000 <_fini+0x50>
  406048:	add	x1, x0, #0xa3
  40604c:	adrp	x0, 413000 <_fini+0x1050>
  406050:	add	x4, x0, #0x1b8
  406054:	mov	w3, #0xbd                  	// #189
  406058:	mov	x2, x1
  40605c:	adrp	x0, 412000 <_fini+0x50>
  406060:	add	x1, x0, #0x110
  406064:	mov	w0, #0x0                   	// #0
  406068:	bl	404670 <log_assert_failed_realm@plt>
  40606c:	add	x0, sp, #0x70
  406070:	mov	w2, #0x40000000            	// #1073741824
  406074:	mov	x1, x0
  406078:	ldr	w0, [sp, #60]
  40607c:	bl	404bc0 <recvmsg@plt>
  406080:	str	x0, [sp, #80]
  406084:	ldr	x0, [sp, #80]
  406088:	cmp	x0, #0x0
  40608c:	b.ge	4060a0 <recv_item+0x180>  // b.tcont
  406090:	bl	404820 <__errno_location@plt>
  406094:	ldr	w0, [x0]
  406098:	neg	w19, w0
  40609c:	b	4061cc <recv_item+0x2ac>
  4060a0:	ldr	x0, [sp, #152]
  4060a4:	cmp	x0, #0xf
  4060a8:	b.ls	4060b4 <recv_item+0x194>  // b.plast
  4060ac:	ldr	x0, [sp, #144]
  4060b0:	b	4060b8 <recv_item+0x198>
  4060b4:	mov	x0, #0x0                   	// #0
  4060b8:	str	x0, [sp, #72]
  4060bc:	b	406168 <recv_item+0x248>
  4060c0:	ldr	x0, [sp, #72]
  4060c4:	ldr	w0, [x0, #8]
  4060c8:	cmp	w0, #0x1
  4060cc:	b.ne	406158 <recv_item+0x238>  // b.any
  4060d0:	ldr	x0, [sp, #72]
  4060d4:	ldr	w0, [x0, #12]
  4060d8:	cmp	w0, #0x1
  4060dc:	b.ne	406158 <recv_item+0x238>  // b.any
  4060e0:	ldr	x0, [sp, #72]
  4060e4:	ldr	x0, [x0]
  4060e8:	cmp	x0, #0x14
  4060ec:	b.ne	406148 <recv_item+0x228>  // b.any
  4060f0:	ldr	w0, [sp, #64]
  4060f4:	mvn	w0, w0
  4060f8:	lsr	w0, w0, #31
  4060fc:	and	w0, w0, #0xff
  406100:	and	x0, x0, #0xff
  406104:	cmp	x0, #0x0
  406108:	b.eq	406134 <recv_item+0x214>  // b.none
  40610c:	adrp	x0, 412000 <_fini+0x50>
  406110:	add	x1, x0, #0xa3
  406114:	adrp	x0, 413000 <_fini+0x1050>
  406118:	add	x4, x0, #0x1b8
  40611c:	mov	w3, #0xc8                  	// #200
  406120:	mov	x2, x1
  406124:	adrp	x0, 412000 <_fini+0x50>
  406128:	add	x1, x0, #0x118
  40612c:	mov	w0, #0x0                   	// #0
  406130:	bl	404670 <log_assert_failed_realm@plt>
  406134:	ldr	x0, [sp, #72]
  406138:	add	x0, x0, #0x10
  40613c:	ldr	w0, [x0]
  406140:	str	w0, [sp, #64]
  406144:	b	406174 <recv_item+0x254>
  406148:	add	x0, sp, #0x70
  40614c:	bl	404a10 <cmsg_close_all@plt>
  406150:	mov	w19, #0xfffffffb            	// #-5
  406154:	b	4061cc <recv_item+0x2ac>
  406158:	add	x0, sp, #0x70
  40615c:	ldr	x1, [sp, #72]
  406160:	bl	404530 <__cmsg_nxthdr@plt>
  406164:	str	x0, [sp, #72]
  406168:	ldr	x0, [sp, #72]
  40616c:	cmp	x0, #0x0
  406170:	b.ne	4060c0 <recv_item+0x1a0>  // b.any
  406174:	ldr	x0, [sp, #80]
  406178:	add	x1, sp, #0xc0
  40617c:	strb	wzr, [x1, x0]
  406180:	add	x0, sp, #0xc0
  406184:	bl	404c00 <strdup@plt>
  406188:	str	x0, [sp, #88]
  40618c:	ldr	x0, [sp, #88]
  406190:	cmp	x0, #0x0
  406194:	b.ne	4061a0 <recv_item+0x280>  // b.any
  406198:	mov	w19, #0xfffffff4            	// #-12
  40619c:	b	4061cc <recv_item+0x2ac>
  4061a0:	ldr	x0, [sp, #48]
  4061a4:	ldr	x1, [sp, #88]
  4061a8:	str	x1, [x0]
  4061ac:	ldr	w0, [sp, #64]
  4061b0:	str	w0, [sp, #68]
  4061b4:	mov	w0, #0xffffffff            	// #-1
  4061b8:	str	w0, [sp, #64]
  4061bc:	ldr	w1, [sp, #68]
  4061c0:	ldr	x0, [sp, #40]
  4061c4:	str	w1, [x0]
  4061c8:	mov	w19, #0x0                   	// #0
  4061cc:	add	x0, sp, #0x40
  4061d0:	bl	40540c <closep>
  4061d4:	mov	w1, w19
  4061d8:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  4061dc:	add	x0, x0, #0x728
  4061e0:	ldr	x2, [sp, #4296]
  4061e4:	ldr	x0, [x0]
  4061e8:	eor	x0, x2, x0
  4061ec:	cmp	x0, #0x0
  4061f0:	b.eq	4061f8 <recv_item+0x2d8>  // b.none
  4061f4:	bl	404930 <__stack_chk_fail@plt>
  4061f8:	mov	w0, w1
  4061fc:	ldr	x19, [sp, #16]
  406200:	ldp	x29, x30, [sp]
  406204:	mov	x12, #0x10d0                	// #4304
  406208:	add	sp, sp, x12
  40620c:	ret

0000000000406210 <__unique_prefix_static_free_wrapper4>:
  406210:	stp	x29, x30, [sp, #-48]!
  406214:	mov	x29, sp
  406218:	str	x0, [sp, #24]
  40621c:	ldr	x0, [sp, #24]
  406220:	str	x0, [sp, #40]
  406224:	ldr	x0, [sp, #40]
  406228:	bl	405af0 <portable_metadata_unref>
  40622c:	nop
  406230:	ldp	x29, x30, [sp], #48
  406234:	ret

0000000000406238 <extract_now>:
  406238:	stp	x29, x30, [sp, #-400]!
  40623c:	mov	x29, sp
  406240:	stp	x19, x20, [sp, #16]
  406244:	str	x0, [sp, #72]
  406248:	str	x1, [sp, #64]
  40624c:	str	w2, [sp, #60]
  406250:	str	x3, [sp, #48]
  406254:	str	x4, [sp, #40]
  406258:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40625c:	add	x0, x0, #0x728
  406260:	ldr	x1, [x0]
  406264:	str	x1, [sp, #392]
  406268:	mov	x1, #0x0                   	// #0
  40626c:	str	xzr, [sp, #200]
  406270:	str	xzr, [sp, #208]
  406274:	stp	xzr, xzr, [sp, #288]
  406278:	stp	xzr, xzr, [sp, #304]
  40627c:	stp	xzr, xzr, [sp, #320]
  406280:	stp	xzr, xzr, [sp, #336]
  406284:	stp	xzr, xzr, [sp, #352]
  406288:	stp	xzr, xzr, [sp, #368]
  40628c:	str	xzr, [sp, #384]
  406290:	mov	w0, #0xffffffff            	// #-1
  406294:	str	w0, [sp, #92]
  406298:	str	xzr, [sp, #216]
  40629c:	ldr	x0, [sp, #72]
  4062a0:	cmp	x0, #0x0
  4062a4:	cset	w0, eq  // eq = none
  4062a8:	and	w0, w0, #0xff
  4062ac:	and	x0, x0, #0xff
  4062b0:	cmp	x0, #0x0
  4062b4:	b.eq	4062e0 <extract_now+0xa8>  // b.none
  4062b8:	adrp	x0, 412000 <_fini+0x50>
  4062bc:	add	x1, x0, #0xa3
  4062c0:	adrp	x0, 413000 <_fini+0x1050>
  4062c4:	add	x4, x0, #0x1c8
  4062c8:	mov	w3, #0xf9                  	// #249
  4062cc:	mov	x2, x1
  4062d0:	adrp	x0, 412000 <_fini+0x50>
  4062d4:	add	x1, x0, #0x128
  4062d8:	mov	w0, #0x0                   	// #0
  4062dc:	bl	404670 <log_assert_failed_realm@plt>
  4062e0:	add	x1, sp, #0x5c
  4062e4:	add	x0, sp, #0xd8
  4062e8:	mov	x2, x1
  4062ec:	mov	x1, x0
  4062f0:	ldr	x0, [sp, #72]
  4062f4:	bl	404cf0 <open_os_release@plt>
  4062f8:	str	w0, [sp, #100]
  4062fc:	ldr	w0, [sp, #100]
  406300:	cmp	w0, #0x0
  406304:	b.ge	406384 <extract_now+0x14c>  // b.tcont
  406308:	mov	w0, #0x7                   	// #7
  40630c:	str	w0, [sp, #116]
  406310:	ldr	w0, [sp, #100]
  406314:	str	w0, [sp, #120]
  406318:	str	wzr, [sp, #124]
  40631c:	ldr	w0, [sp, #124]
  406320:	bl	404e50 <log_get_max_level_realm@plt>
  406324:	mov	w1, w0
  406328:	ldr	w0, [sp, #116]
  40632c:	and	w0, w0, #0x7
  406330:	cmp	w1, w0
  406334:	b.lt	406378 <extract_now+0x140>  // b.tstop
  406338:	ldr	w0, [sp, #124]
  40633c:	lsl	w1, w0, #10
  406340:	ldr	w0, [sp, #116]
  406344:	orr	w6, w1, w0
  406348:	adrp	x0, 412000 <_fini+0x50>
  40634c:	add	x1, x0, #0xa3
  406350:	adrp	x0, 412000 <_fini+0x50>
  406354:	add	x5, x0, #0x130
  406358:	adrp	x0, 413000 <_fini+0x1050>
  40635c:	add	x4, x0, #0x1d8
  406360:	mov	w3, #0xfe                  	// #254
  406364:	mov	x2, x1
  406368:	ldr	w1, [sp, #120]
  40636c:	mov	w0, w6
  406370:	bl	404a80 <log_internal_realm@plt>
  406374:	b	40649c <extract_now+0x264>
  406378:	ldr	w0, [sp, #120]
  40637c:	cmp	w0, #0x0
  406380:	b	40649c <extract_now+0x264>
  406384:	ldr	w0, [sp, #60]
  406388:	cmp	w0, #0x0
  40638c:	b.lt	406444 <extract_now+0x20c>  // b.tstop
  406390:	ldr	w0, [sp, #92]
  406394:	mov	w2, w0
  406398:	adrp	x0, 412000 <_fini+0x50>
  40639c:	add	x1, x0, #0x160
  4063a0:	ldr	w0, [sp, #60]
  4063a4:	bl	405cf4 <send_item>
  4063a8:	str	w0, [sp, #100]
  4063ac:	ldr	w0, [sp, #100]
  4063b0:	cmp	w0, #0x0
  4063b4:	b.ge	406444 <extract_now+0x20c>  // b.tcont
  4063b8:	mov	w0, #0x7                   	// #7
  4063bc:	str	w0, [sp, #104]
  4063c0:	ldr	w0, [sp, #100]
  4063c4:	str	w0, [sp, #108]
  4063c8:	str	wzr, [sp, #112]
  4063cc:	ldr	w0, [sp, #112]
  4063d0:	bl	404e50 <log_get_max_level_realm@plt>
  4063d4:	mov	w1, w0
  4063d8:	ldr	w0, [sp, #104]
  4063dc:	and	w0, w0, #0x7
  4063e0:	cmp	w1, w0
  4063e4:	b.lt	40642c <extract_now+0x1f4>  // b.tstop
  4063e8:	ldr	w0, [sp, #112]
  4063ec:	lsl	w1, w0, #10
  4063f0:	ldr	w0, [sp, #104]
  4063f4:	orr	w6, w1, w0
  4063f8:	adrp	x0, 412000 <_fini+0x50>
  4063fc:	add	x1, x0, #0xa3
  406400:	adrp	x0, 412000 <_fini+0x50>
  406404:	add	x5, x0, #0x170
  406408:	adrp	x0, 413000 <_fini+0x1050>
  40640c:	add	x4, x0, #0x1d8
  406410:	mov	w3, #0x103                 	// #259
  406414:	mov	x2, x1
  406418:	ldr	w1, [sp, #108]
  40641c:	mov	w0, w6
  406420:	bl	404a80 <log_internal_realm@plt>
  406424:	mov	w19, w0
  406428:	b	406bf4 <extract_now+0x9bc>
  40642c:	ldr	w0, [sp, #108]
  406430:	cmp	w0, #0x0
  406434:	cneg	w0, w0, lt  // lt = tstop
  406438:	and	w0, w0, #0xff
  40643c:	neg	w19, w0
  406440:	b	406bf4 <extract_now+0x9bc>
  406444:	ldr	x0, [sp, #48]
  406448:	cmp	x0, #0x0
  40644c:	b.eq	40649c <extract_now+0x264>  // b.none
  406450:	ldr	w0, [sp, #92]
  406454:	mov	w1, w0
  406458:	adrp	x0, 412000 <_fini+0x50>
  40645c:	add	x0, x0, #0x160
  406460:	bl	405a88 <portable_metadata_new>
  406464:	str	x0, [sp, #208]
  406468:	ldr	x0, [sp, #208]
  40646c:	cmp	x0, #0x0
  406470:	b.ne	40647c <extract_now+0x244>  // b.any
  406474:	mov	w19, #0xfffffff4            	// #-12
  406478:	b	406bf4 <extract_now+0x9bc>
  40647c:	mov	w0, #0xffffffff            	// #-1
  406480:	str	w0, [sp, #92]
  406484:	ldr	x0, [sp, #216]
  406488:	str	x0, [sp, #264]
  40648c:	str	xzr, [sp, #216]
  406490:	ldr	x1, [sp, #264]
  406494:	ldr	x0, [sp, #208]
  406498:	str	x1, [x0, #8]
  40649c:	add	x0, sp, #0x120
  4064a0:	ldr	x3, [sp, #72]
  4064a4:	mov	w2, #0x4                   	// #4
  4064a8:	mov	w1, #0x0                   	// #0
  4064ac:	bl	404a60 <lookup_paths_init@plt>
  4064b0:	str	w0, [sp, #100]
  4064b4:	ldr	w0, [sp, #100]
  4064b8:	cmp	w0, #0x0
  4064bc:	b.ge	40654c <extract_now+0x314>  // b.tcont
  4064c0:	mov	w0, #0x7                   	// #7
  4064c4:	str	w0, [sp, #188]
  4064c8:	ldr	w0, [sp, #100]
  4064cc:	str	w0, [sp, #192]
  4064d0:	str	wzr, [sp, #196]
  4064d4:	ldr	w0, [sp, #196]
  4064d8:	bl	404e50 <log_get_max_level_realm@plt>
  4064dc:	mov	w1, w0
  4064e0:	ldr	w0, [sp, #188]
  4064e4:	and	w0, w0, #0x7
  4064e8:	cmp	w1, w0
  4064ec:	b.lt	406534 <extract_now+0x2fc>  // b.tstop
  4064f0:	ldr	w0, [sp, #196]
  4064f4:	lsl	w1, w0, #10
  4064f8:	ldr	w0, [sp, #188]
  4064fc:	orr	w6, w1, w0
  406500:	adrp	x0, 412000 <_fini+0x50>
  406504:	add	x1, x0, #0xa3
  406508:	adrp	x0, 412000 <_fini+0x50>
  40650c:	add	x5, x0, #0x198
  406510:	adrp	x0, 413000 <_fini+0x1050>
  406514:	add	x4, x0, #0x1d8
  406518:	mov	w3, #0x115                 	// #277
  40651c:	mov	x2, x1
  406520:	ldr	w1, [sp, #192]
  406524:	mov	w0, w6
  406528:	bl	404a80 <log_internal_realm@plt>
  40652c:	mov	w19, w0
  406530:	b	406bf4 <extract_now+0x9bc>
  406534:	ldr	w0, [sp, #192]
  406538:	cmp	w0, #0x0
  40653c:	cneg	w0, w0, lt  // lt = tstop
  406540:	and	w0, w0, #0xff
  406544:	neg	w19, w0
  406548:	b	406bf4 <extract_now+0x9bc>
  40654c:	adrp	x0, 413000 <_fini+0x1050>
  406550:	add	x0, x0, #0xe8
  406554:	bl	404920 <internal_hashmap_new@plt>
  406558:	str	x0, [sp, #200]
  40655c:	ldr	x0, [sp, #200]
  406560:	cmp	x0, #0x0
  406564:	b.ne	406570 <extract_now+0x338>  // b.any
  406568:	mov	w19, #0xfffffff4            	// #-12
  40656c:	b	406bf4 <extract_now+0x9bc>
  406570:	ldr	x0, [sp, #288]
  406574:	str	x0, [sp, #248]
  406578:	b	406b8c <extract_now+0x954>
  40657c:	str	xzr, [sp, #224]
  406580:	str	xzr, [sp, #232]
  406584:	ldr	x0, [sp, #248]
  406588:	ldr	x0, [x0]
  40658c:	add	x2, sp, #0xe8
  406590:	add	x1, sp, #0xe0
  406594:	mov	x4, x2
  406598:	mov	x3, x1
  40659c:	mov	w2, #0x0                   	// #0
  4065a0:	ldr	x1, [sp, #72]
  4065a4:	bl	4049e0 <chase_symlinks_and_opendir@plt>
  4065a8:	str	w0, [sp, #100]
  4065ac:	ldr	w0, [sp, #100]
  4065b0:	cmp	w0, #0x0
  4065b4:	b.ge	406644 <extract_now+0x40c>  // b.tcont
  4065b8:	mov	w0, #0x7                   	// #7
  4065bc:	str	w0, [sp, #176]
  4065c0:	ldr	w0, [sp, #100]
  4065c4:	str	w0, [sp, #180]
  4065c8:	str	wzr, [sp, #184]
  4065cc:	ldr	w0, [sp, #184]
  4065d0:	bl	404e50 <log_get_max_level_realm@plt>
  4065d4:	mov	w1, w0
  4065d8:	ldr	w0, [sp, #176]
  4065dc:	and	w0, w0, #0x7
  4065e0:	cmp	w1, w0
  4065e4:	b.lt	406634 <extract_now+0x3fc>  // b.tstop
  4065e8:	ldr	w0, [sp, #184]
  4065ec:	lsl	w1, w0, #10
  4065f0:	ldr	w0, [sp, #176]
  4065f4:	orr	w7, w1, w0
  4065f8:	adrp	x0, 412000 <_fini+0x50>
  4065fc:	add	x1, x0, #0xa3
  406600:	ldr	x0, [sp, #248]
  406604:	ldr	x0, [x0]
  406608:	mov	x6, x0
  40660c:	adrp	x0, 412000 <_fini+0x50>
  406610:	add	x5, x0, #0x1c0
  406614:	adrp	x0, 413000 <_fini+0x1050>
  406618:	add	x4, x0, #0x1d8
  40661c:	mov	w3, #0x122                 	// #290
  406620:	mov	x2, x1
  406624:	ldr	w1, [sp, #180]
  406628:	mov	w0, w7
  40662c:	bl	404a80 <log_internal_realm@plt>
  406630:	b	40663c <extract_now+0x404>
  406634:	ldr	w0, [sp, #180]
  406638:	cmp	w0, #0x0
  40663c:	mov	w20, #0x0                   	// #0
  406640:	b	406b38 <extract_now+0x900>
  406644:	bl	404820 <__errno_location@plt>
  406648:	str	wzr, [x0]
  40664c:	ldr	x0, [sp, #232]
  406650:	bl	4046a0 <readdir64@plt>
  406654:	str	x0, [sp, #256]
  406658:	ldr	x0, [sp, #256]
  40665c:	cmp	x0, #0x0
  406660:	b.ne	406708 <extract_now+0x4d0>  // b.any
  406664:	bl	404820 <__errno_location@plt>
  406668:	ldr	w0, [x0]
  40666c:	cmp	w0, #0x0
  406670:	b.le	406b30 <extract_now+0x8f8>
  406674:	mov	w0, #0x7                   	// #7
  406678:	str	w0, [sp, #164]
  40667c:	bl	404820 <__errno_location@plt>
  406680:	ldr	w0, [x0]
  406684:	str	w0, [sp, #168]
  406688:	str	wzr, [sp, #172]
  40668c:	ldr	w0, [sp, #172]
  406690:	bl	404e50 <log_get_max_level_realm@plt>
  406694:	mov	w1, w0
  406698:	ldr	w0, [sp, #164]
  40669c:	and	w0, w0, #0x7
  4066a0:	cmp	w1, w0
  4066a4:	b.lt	4066ec <extract_now+0x4b4>  // b.tstop
  4066a8:	ldr	w0, [sp, #172]
  4066ac:	lsl	w1, w0, #10
  4066b0:	ldr	w0, [sp, #164]
  4066b4:	orr	w6, w1, w0
  4066b8:	adrp	x0, 412000 <_fini+0x50>
  4066bc:	add	x1, x0, #0xa3
  4066c0:	adrp	x0, 412000 <_fini+0x50>
  4066c4:	add	x5, x0, #0x1f0
  4066c8:	adrp	x0, 413000 <_fini+0x1050>
  4066cc:	add	x4, x0, #0x1d8
  4066d0:	mov	w3, #0x126                 	// #294
  4066d4:	mov	x2, x1
  4066d8:	ldr	w1, [sp, #168]
  4066dc:	mov	w0, w6
  4066e0:	bl	404a80 <log_internal_realm@plt>
  4066e4:	mov	w19, w0
  4066e8:	b	406700 <extract_now+0x4c8>
  4066ec:	ldr	w0, [sp, #168]
  4066f0:	cmp	w0, #0x0
  4066f4:	cneg	w0, w0, lt  // lt = tstop
  4066f8:	and	w0, w0, #0xff
  4066fc:	neg	w19, w0
  406700:	mov	w20, #0x1                   	// #1
  406704:	b	406b38 <extract_now+0x900>
  406708:	ldr	x0, [sp, #256]
  40670c:	add	x0, x0, #0x13
  406710:	bl	4044c0 <hidden_or_backup_file@plt>
  406714:	and	w0, w0, #0xff
  406718:	cmp	w0, #0x0
  40671c:	b.ne	406b14 <extract_now+0x8dc>  // b.any
  406720:	str	xzr, [sp, #240]
  406724:	mov	w0, #0xffffffff            	// #-1
  406728:	str	w0, [sp, #96]
  40672c:	ldr	x0, [sp, #256]
  406730:	add	x0, x0, #0x13
  406734:	mov	w1, #0x7                   	// #7
  406738:	bl	404e30 <unit_name_is_valid@plt>
  40673c:	and	w0, w0, #0xff
  406740:	eor	w0, w0, #0x1
  406744:	and	w0, w0, #0xff
  406748:	cmp	w0, #0x0
  40674c:	b.eq	406758 <extract_now+0x520>  // b.none
  406750:	mov	w20, #0x0                   	// #0
  406754:	b	406ac4 <extract_now+0x88c>
  406758:	ldr	x0, [sp, #256]
  40675c:	add	x0, x0, #0x13
  406760:	ldr	x1, [sp, #64]
  406764:	bl	405954 <unit_match>
  406768:	and	w0, w0, #0xff
  40676c:	eor	w0, w0, #0x1
  406770:	and	w0, w0, #0xff
  406774:	cmp	w0, #0x0
  406778:	b.eq	406784 <extract_now+0x54c>  // b.none
  40677c:	mov	w20, #0x0                   	// #0
  406780:	b	406ac4 <extract_now+0x88c>
  406784:	ldr	x2, [sp, #200]
  406788:	ldr	x0, [sp, #256]
  40678c:	add	x0, x0, #0x13
  406790:	mov	x1, x0
  406794:	mov	x0, x2
  406798:	bl	4052c4 <hashmap_get>
  40679c:	cmp	x0, #0x0
  4067a0:	b.eq	4067ac <extract_now+0x574>  // b.none
  4067a4:	mov	w20, #0x0                   	// #0
  4067a8:	b	406ac4 <extract_now+0x88c>
  4067ac:	ldr	x0, [sp, #232]
  4067b0:	ldr	x1, [sp, #256]
  4067b4:	bl	404560 <dirent_ensure_type@plt>
  4067b8:	strb	wzr, [sp, #91]
  4067bc:	ldr	x0, [sp, #256]
  4067c0:	ldrb	w0, [x0, #18]
  4067c4:	cmp	w0, #0x8
  4067c8:	b.eq	4067d4 <extract_now+0x59c>  // b.none
  4067cc:	cmp	w0, #0xa
  4067d0:	b.ne	4067dc <extract_now+0x5a4>  // b.any
  4067d4:	mov	w0, #0x1                   	// #1
  4067d8:	strb	w0, [sp, #91]
  4067dc:	nop
  4067e0:	ldrb	w0, [sp, #91]
  4067e4:	eor	w0, w0, #0x1
  4067e8:	and	w0, w0, #0xff
  4067ec:	cmp	w0, #0x0
  4067f0:	b.eq	4067fc <extract_now+0x5c4>  // b.none
  4067f4:	mov	w20, #0x0                   	// #0
  4067f8:	b	406ac4 <extract_now+0x88c>
  4067fc:	ldr	x0, [sp, #232]
  406800:	bl	404630 <dirfd@plt>
  406804:	mov	w3, w0
  406808:	ldr	x0, [sp, #256]
  40680c:	add	x0, x0, #0x13
  406810:	mov	w2, #0x80000               	// #524288
  406814:	mov	x1, x0
  406818:	mov	w0, w3
  40681c:	bl	404310 <openat64@plt>
  406820:	str	w0, [sp, #96]
  406824:	ldr	w0, [sp, #96]
  406828:	cmp	w0, #0x0
  40682c:	b.ge	4068c0 <extract_now+0x688>  // b.tcont
  406830:	mov	w0, #0x7                   	// #7
  406834:	str	w0, [sp, #152]
  406838:	bl	404820 <__errno_location@plt>
  40683c:	ldr	w0, [x0]
  406840:	str	w0, [sp, #156]
  406844:	str	wzr, [sp, #160]
  406848:	ldr	w0, [sp, #160]
  40684c:	bl	404e50 <log_get_max_level_realm@plt>
  406850:	mov	w1, w0
  406854:	ldr	w0, [sp, #152]
  406858:	and	w0, w0, #0x7
  40685c:	cmp	w1, w0
  406860:	b.lt	4068b0 <extract_now+0x678>  // b.tstop
  406864:	ldr	w0, [sp, #160]
  406868:	lsl	w1, w0, #10
  40686c:	ldr	w0, [sp, #152]
  406870:	orr	w7, w1, w0
  406874:	adrp	x0, 412000 <_fini+0x50>
  406878:	add	x1, x0, #0xa3
  40687c:	ldr	x0, [sp, #256]
  406880:	add	x0, x0, #0x13
  406884:	mov	x6, x0
  406888:	adrp	x0, 412000 <_fini+0x50>
  40688c:	add	x5, x0, #0x210
  406890:	adrp	x0, 413000 <_fini+0x1050>
  406894:	add	x4, x0, #0x1d8
  406898:	mov	w3, #0x13a                 	// #314
  40689c:	mov	x2, x1
  4068a0:	ldr	w1, [sp, #156]
  4068a4:	mov	w0, w7
  4068a8:	bl	404a80 <log_internal_realm@plt>
  4068ac:	b	4068b8 <extract_now+0x680>
  4068b0:	ldr	w0, [sp, #156]
  4068b4:	cmp	w0, #0x0
  4068b8:	mov	w20, #0x0                   	// #0
  4068bc:	b	406ac4 <extract_now+0x88c>
  4068c0:	ldr	w0, [sp, #60]
  4068c4:	cmp	w0, #0x0
  4068c8:	b.lt	406988 <extract_now+0x750>  // b.tstop
  4068cc:	ldr	x0, [sp, #256]
  4068d0:	add	x0, x0, #0x13
  4068d4:	ldr	w1, [sp, #96]
  4068d8:	mov	w2, w1
  4068dc:	mov	x1, x0
  4068e0:	ldr	w0, [sp, #60]
  4068e4:	bl	405cf4 <send_item>
  4068e8:	str	w0, [sp, #100]
  4068ec:	ldr	w0, [sp, #100]
  4068f0:	cmp	w0, #0x0
  4068f4:	b.ge	406988 <extract_now+0x750>  // b.tcont
  4068f8:	mov	w0, #0x7                   	// #7
  4068fc:	str	w0, [sp, #128]
  406900:	ldr	w0, [sp, #100]
  406904:	str	w0, [sp, #132]
  406908:	str	wzr, [sp, #136]
  40690c:	ldr	w0, [sp, #136]
  406910:	bl	404e50 <log_get_max_level_realm@plt>
  406914:	mov	w1, w0
  406918:	ldr	w0, [sp, #128]
  40691c:	and	w0, w0, #0x7
  406920:	cmp	w1, w0
  406924:	b.lt	40696c <extract_now+0x734>  // b.tstop
  406928:	ldr	w0, [sp, #136]
  40692c:	lsl	w1, w0, #10
  406930:	ldr	w0, [sp, #128]
  406934:	orr	w6, w1, w0
  406938:	adrp	x0, 412000 <_fini+0x50>
  40693c:	add	x1, x0, #0xa3
  406940:	adrp	x0, 412000 <_fini+0x50>
  406944:	add	x5, x0, #0x240
  406948:	adrp	x0, 413000 <_fini+0x1050>
  40694c:	add	x4, x0, #0x1d8
  406950:	mov	w3, #0x141                 	// #321
  406954:	mov	x2, x1
  406958:	ldr	w1, [sp, #132]
  40695c:	mov	w0, w6
  406960:	bl	404a80 <log_internal_realm@plt>
  406964:	mov	w19, w0
  406968:	b	406980 <extract_now+0x748>
  40696c:	ldr	w0, [sp, #132]
  406970:	cmp	w0, #0x0
  406974:	cneg	w0, w0, lt  // lt = tstop
  406978:	and	w0, w0, #0xff
  40697c:	neg	w19, w0
  406980:	mov	w20, #0x1                   	// #1
  406984:	b	406ac4 <extract_now+0x88c>
  406988:	ldr	x0, [sp, #256]
  40698c:	add	x0, x0, #0x13
  406990:	ldr	w1, [sp, #96]
  406994:	bl	405a88 <portable_metadata_new>
  406998:	str	x0, [sp, #240]
  40699c:	ldr	x0, [sp, #240]
  4069a0:	cmp	x0, #0x0
  4069a4:	b.ne	4069b4 <extract_now+0x77c>  // b.any
  4069a8:	mov	w19, #0xfffffff4            	// #-12
  4069ac:	mov	w20, #0x1                   	// #1
  4069b0:	b	406ac4 <extract_now+0x88c>
  4069b4:	mov	w0, #0xffffffff            	// #-1
  4069b8:	str	w0, [sp, #96]
  4069bc:	ldr	x3, [sp, #224]
  4069c0:	ldr	x0, [sp, #256]
  4069c4:	add	x0, x0, #0x13
  4069c8:	ldr	x20, [sp, #240]
  4069cc:	mov	x2, #0xffffffffffffffff    	// #-1
  4069d0:	mov	x1, x0
  4069d4:	mov	x0, x3
  4069d8:	bl	404980 <path_join_internal@plt>
  4069dc:	str	x0, [x20, #8]
  4069e0:	ldr	x0, [sp, #240]
  4069e4:	ldr	x0, [x0, #8]
  4069e8:	cmp	x0, #0x0
  4069ec:	b.ne	4069fc <extract_now+0x7c4>  // b.any
  4069f0:	mov	w19, #0xfffffff4            	// #-12
  4069f4:	mov	w20, #0x1                   	// #1
  4069f8:	b	406ac4 <extract_now+0x88c>
  4069fc:	ldr	x3, [sp, #200]
  406a00:	ldr	x0, [sp, #240]
  406a04:	add	x0, x0, #0x10
  406a08:	ldr	x1, [sp, #240]
  406a0c:	mov	x2, x1
  406a10:	mov	x1, x0
  406a14:	mov	x0, x3
  406a18:	bl	404b20 <hashmap_put@plt>
  406a1c:	str	w0, [sp, #100]
  406a20:	ldr	w0, [sp, #100]
  406a24:	cmp	w0, #0x0
  406a28:	b.ge	406abc <extract_now+0x884>  // b.tcont
  406a2c:	mov	w0, #0x7                   	// #7
  406a30:	str	w0, [sp, #140]
  406a34:	ldr	w0, [sp, #100]
  406a38:	str	w0, [sp, #144]
  406a3c:	str	wzr, [sp, #148]
  406a40:	ldr	w0, [sp, #148]
  406a44:	bl	404e50 <log_get_max_level_realm@plt>
  406a48:	mov	w1, w0
  406a4c:	ldr	w0, [sp, #140]
  406a50:	and	w0, w0, #0x7
  406a54:	cmp	w1, w0
  406a58:	b.lt	406aa0 <extract_now+0x868>  // b.tstop
  406a5c:	ldr	w0, [sp, #148]
  406a60:	lsl	w1, w0, #10
  406a64:	ldr	w0, [sp, #140]
  406a68:	orr	w6, w1, w0
  406a6c:	adrp	x0, 412000 <_fini+0x50>
  406a70:	add	x1, x0, #0xa3
  406a74:	adrp	x0, 412000 <_fini+0x50>
  406a78:	add	x5, x0, #0x270
  406a7c:	adrp	x0, 413000 <_fini+0x1050>
  406a80:	add	x4, x0, #0x1d8
  406a84:	mov	w3, #0x14f                 	// #335
  406a88:	mov	x2, x1
  406a8c:	ldr	w1, [sp, #144]
  406a90:	mov	w0, w6
  406a94:	bl	404a80 <log_internal_realm@plt>
  406a98:	mov	w19, w0
  406a9c:	b	406ab4 <extract_now+0x87c>
  406aa0:	ldr	w0, [sp, #144]
  406aa4:	cmp	w0, #0x0
  406aa8:	cneg	w0, w0, lt  // lt = tstop
  406aac:	and	w0, w0, #0xff
  406ab0:	neg	w19, w0
  406ab4:	mov	w20, #0x1                   	// #1
  406ab8:	b	406ac4 <extract_now+0x88c>
  406abc:	str	xzr, [sp, #240]
  406ac0:	mov	w20, #0x2                   	// #2
  406ac4:	add	x0, sp, #0x60
  406ac8:	bl	40540c <closep>
  406acc:	cmp	w20, #0x0
  406ad0:	b.eq	406ae0 <extract_now+0x8a8>  // b.none
  406ad4:	cmp	w20, #0x2
  406ad8:	b.ne	406ae8 <extract_now+0x8b0>  // b.any
  406adc:	b	406af0 <extract_now+0x8b8>
  406ae0:	mov	w20, #0x0                   	// #0
  406ae4:	b	406af4 <extract_now+0x8bc>
  406ae8:	mov	w20, #0x1                   	// #1
  406aec:	b	406af4 <extract_now+0x8bc>
  406af0:	mov	w20, #0x2                   	// #2
  406af4:	add	x0, sp, #0xf0
  406af8:	bl	405774 <portable_metadata_unrefp>
  406afc:	cmp	w20, #0x0
  406b00:	b.eq	406b18 <extract_now+0x8e0>  // b.none
  406b04:	cmp	w20, #0x2
  406b08:	b.eq	406b18 <extract_now+0x8e0>  // b.none
  406b0c:	mov	w20, #0x1                   	// #1
  406b10:	b	406b38 <extract_now+0x900>
  406b14:	nop
  406b18:	bl	404820 <__errno_location@plt>
  406b1c:	str	wzr, [x0]
  406b20:	ldr	x0, [sp, #232]
  406b24:	bl	4046a0 <readdir64@plt>
  406b28:	str	x0, [sp, #256]
  406b2c:	b	406658 <extract_now+0x420>
  406b30:	nop
  406b34:	mov	w20, #0x2                   	// #2
  406b38:	add	x0, sp, #0xe8
  406b3c:	bl	405474 <closedirp>
  406b40:	cmp	w20, #0x0
  406b44:	b.eq	406b54 <extract_now+0x91c>  // b.none
  406b48:	cmp	w20, #0x2
  406b4c:	b.ne	406b5c <extract_now+0x924>  // b.any
  406b50:	b	406b64 <extract_now+0x92c>
  406b54:	mov	w20, #0x0                   	// #0
  406b58:	b	406b68 <extract_now+0x930>
  406b5c:	mov	w20, #0x1                   	// #1
  406b60:	b	406b68 <extract_now+0x930>
  406b64:	mov	w20, #0x2                   	// #2
  406b68:	add	x0, sp, #0xe0
  406b6c:	bl	40511c <freep>
  406b70:	cmp	w20, #0x0
  406b74:	b.eq	406b80 <extract_now+0x948>  // b.none
  406b78:	cmp	w20, #0x2
  406b7c:	b.ne	406bf4 <extract_now+0x9bc>  // b.any
  406b80:	ldr	x0, [sp, #248]
  406b84:	add	x0, x0, #0x8
  406b88:	str	x0, [sp, #248]
  406b8c:	ldr	x0, [sp, #248]
  406b90:	cmp	x0, #0x0
  406b94:	b.eq	406ba8 <extract_now+0x970>  // b.none
  406b98:	ldr	x0, [sp, #248]
  406b9c:	ldr	x0, [x0]
  406ba0:	cmp	x0, #0x0
  406ba4:	b.ne	40657c <extract_now+0x344>  // b.any
  406ba8:	ldr	x0, [sp, #48]
  406bac:	cmp	x0, #0x0
  406bb0:	b.eq	406bcc <extract_now+0x994>  // b.none
  406bb4:	ldr	x0, [sp, #208]
  406bb8:	str	x0, [sp, #272]
  406bbc:	str	xzr, [sp, #208]
  406bc0:	ldr	x1, [sp, #272]
  406bc4:	ldr	x0, [sp, #48]
  406bc8:	str	x1, [x0]
  406bcc:	ldr	x0, [sp, #40]
  406bd0:	cmp	x0, #0x0
  406bd4:	b.eq	406bf0 <extract_now+0x9b8>  // b.none
  406bd8:	ldr	x0, [sp, #200]
  406bdc:	str	x0, [sp, #280]
  406be0:	str	xzr, [sp, #200]
  406be4:	ldr	x1, [sp, #280]
  406be8:	ldr	x0, [sp, #40]
  406bec:	str	x1, [x0]
  406bf0:	mov	w19, #0x0                   	// #0
  406bf4:	add	x0, sp, #0xd8
  406bf8:	bl	40511c <freep>
  406bfc:	add	x0, sp, #0x5c
  406c00:	bl	40540c <closep>
  406c04:	add	x0, sp, #0x120
  406c08:	bl	4043d0 <lookup_paths_free@plt>
  406c0c:	add	x0, sp, #0xd0
  406c10:	bl	405774 <portable_metadata_unrefp>
  406c14:	add	x0, sp, #0xc8
  406c18:	bl	405364 <hashmap_freep>
  406c1c:	mov	w1, w19
  406c20:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  406c24:	add	x0, x0, #0x728
  406c28:	ldr	x2, [sp, #392]
  406c2c:	ldr	x0, [x0]
  406c30:	eor	x0, x2, x0
  406c34:	cmp	x0, #0x0
  406c38:	b.eq	406c40 <extract_now+0xa08>  // b.none
  406c3c:	bl	404930 <__stack_chk_fail@plt>
  406c40:	mov	w0, w1
  406c44:	ldp	x19, x20, [sp, #16]
  406c48:	ldp	x29, x30, [sp], #400
  406c4c:	ret

0000000000406c50 <portable_extract_by_path>:
  406c50:	sub	sp, sp, #0x220
  406c54:	stp	x29, x30, [sp]
  406c58:	mov	x29, sp
  406c5c:	stp	x19, x20, [sp, #16]
  406c60:	str	x0, [sp, #72]
  406c64:	str	x1, [sp, #64]
  406c68:	str	x2, [sp, #56]
  406c6c:	str	x3, [sp, #48]
  406c70:	str	x4, [sp, #40]
  406c74:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  406c78:	add	x0, x0, #0x728
  406c7c:	ldr	x1, [x0]
  406c80:	str	x1, [sp, #536]
  406c84:	mov	x1, #0x0                   	// #0
  406c88:	str	xzr, [sp, #192]
  406c8c:	str	xzr, [sp, #200]
  406c90:	str	xzr, [sp, #208]
  406c94:	ldr	x0, [sp, #72]
  406c98:	cmp	x0, #0x0
  406c9c:	cset	w0, eq  // eq = none
  406ca0:	and	w0, w0, #0xff
  406ca4:	and	x0, x0, #0xff
  406ca8:	cmp	x0, #0x0
  406cac:	b.eq	406cd8 <portable_extract_by_path+0x88>  // b.none
  406cb0:	adrp	x0, 412000 <_fini+0x50>
  406cb4:	add	x1, x0, #0xa3
  406cb8:	adrp	x0, 413000 <_fini+0x1050>
  406cbc:	add	x4, x0, #0x1e8
  406cc0:	mov	w3, #0x168                 	// #360
  406cc4:	mov	x2, x1
  406cc8:	adrp	x0, 412000 <_fini+0x50>
  406ccc:	add	x1, x0, #0x298
  406cd0:	mov	w0, #0x0                   	// #0
  406cd4:	bl	404670 <log_assert_failed_realm@plt>
  406cd8:	add	x0, sp, #0xd0
  406cdc:	mov	x2, x0
  406ce0:	mov	w1, #0x0                   	// #0
  406ce4:	ldr	x0, [sp, #72]
  406ce8:	bl	404660 <loop_device_make_by_path@plt>
  406cec:	str	w0, [sp, #104]
  406cf0:	ldr	w0, [sp, #104]
  406cf4:	cmn	w0, #0x15
  406cf8:	b.ne	406d34 <portable_extract_by_path+0xe4>  // b.any
  406cfc:	add	x1, sp, #0xc0
  406d00:	add	x0, sp, #0xc8
  406d04:	mov	x4, x1
  406d08:	mov	x3, x0
  406d0c:	mov	w2, #0xffffffff            	// #-1
  406d10:	ldr	x1, [sp, #64]
  406d14:	ldr	x0, [sp, #72]
  406d18:	bl	406238 <extract_now>
  406d1c:	str	w0, [sp, #104]
  406d20:	ldr	w0, [sp, #104]
  406d24:	cmp	w0, #0x0
  406d28:	b.ge	40773c <portable_extract_by_path+0xaec>  // b.tcont
  406d2c:	ldr	w19, [sp, #104]
  406d30:	b	4077f0 <portable_extract_by_path+0xba0>
  406d34:	ldr	w0, [sp, #104]
  406d38:	cmp	w0, #0x0
  406d3c:	b.ge	406dcc <portable_extract_by_path+0x17c>  // b.tcont
  406d40:	mov	w0, #0x7                   	// #7
  406d44:	str	w0, [sp, #180]
  406d48:	ldr	w0, [sp, #104]
  406d4c:	str	w0, [sp, #184]
  406d50:	str	wzr, [sp, #188]
  406d54:	ldr	w0, [sp, #188]
  406d58:	bl	404e50 <log_get_max_level_realm@plt>
  406d5c:	mov	w1, w0
  406d60:	ldr	w0, [sp, #180]
  406d64:	and	w0, w0, #0x7
  406d68:	cmp	w1, w0
  406d6c:	b.lt	406db4 <portable_extract_by_path+0x164>  // b.tstop
  406d70:	ldr	w0, [sp, #188]
  406d74:	lsl	w1, w0, #10
  406d78:	ldr	w0, [sp, #180]
  406d7c:	orr	w6, w1, w0
  406d80:	adrp	x0, 412000 <_fini+0x50>
  406d84:	add	x1, x0, #0xa3
  406d88:	adrp	x0, 412000 <_fini+0x50>
  406d8c:	add	x5, x0, #0x2a0
  406d90:	adrp	x0, 413000 <_fini+0x1050>
  406d94:	add	x4, x0, #0x208
  406d98:	mov	w3, #0x174                 	// #372
  406d9c:	mov	x2, x1
  406da0:	ldr	w1, [sp, #184]
  406da4:	mov	w0, w6
  406da8:	bl	404a80 <log_internal_realm@plt>
  406dac:	mov	w19, w0
  406db0:	b	4077f0 <portable_extract_by_path+0xba0>
  406db4:	ldr	w0, [sp, #184]
  406db8:	cmp	w0, #0x0
  406dbc:	cneg	w0, w0, lt  // lt = tstop
  406dc0:	and	w0, w0, #0xff
  406dc4:	neg	w19, w0
  406dc8:	b	4077f0 <portable_extract_by_path+0xba0>
  406dcc:	str	xzr, [sp, #216]
  406dd0:	str	xzr, [sp, #224]
  406dd4:	mov	w0, #0xffffffff            	// #-1
  406dd8:	str	w0, [sp, #272]
  406ddc:	mov	w0, #0xffffffff            	// #-1
  406de0:	str	w0, [sp, #276]
  406de4:	str	wzr, [sp, #96]
  406de8:	add	x0, sp, #0x118
  406dec:	mov	w3, #0xffffffff            	// #-1
  406df0:	mov	w2, #0x11                  	// #17
  406df4:	mov	x1, x0
  406df8:	mov	w0, #0x0                   	// #0
  406dfc:	bl	404790 <sigprocmask_many@plt>
  406e00:	lsr	w0, w0, #31
  406e04:	and	w0, w0, #0xff
  406e08:	and	x0, x0, #0xff
  406e0c:	cmp	x0, #0x0
  406e10:	b.eq	406e3c <portable_extract_by_path+0x1ec>  // b.none
  406e14:	adrp	x0, 412000 <_fini+0x50>
  406e18:	add	x1, x0, #0xa3
  406e1c:	adrp	x0, 413000 <_fini+0x1050>
  406e20:	add	x4, x0, #0x1e8
  406e24:	mov	w3, #0x17e                 	// #382
  406e28:	mov	x2, x1
  406e2c:	adrp	x0, 412000 <_fini+0x50>
  406e30:	add	x1, x0, #0x2c8
  406e34:	mov	w0, #0x0                   	// #0
  406e38:	bl	404670 <log_assert_failed_realm@plt>
  406e3c:	add	x0, sp, #0x198
  406e40:	add	x1, sp, #0x118
  406e44:	ldp	x2, x3, [x1]
  406e48:	stp	x2, x3, [x0]
  406e4c:	ldp	x2, x3, [x1, #16]
  406e50:	stp	x2, x3, [x0, #16]
  406e54:	ldp	x2, x3, [x1, #32]
  406e58:	stp	x2, x3, [x0, #32]
  406e5c:	ldp	x2, x3, [x1, #48]
  406e60:	stp	x2, x3, [x0, #48]
  406e64:	ldp	x2, x3, [x1, #64]
  406e68:	stp	x2, x3, [x0, #64]
  406e6c:	ldp	x2, x3, [x1, #80]
  406e70:	stp	x2, x3, [x0, #80]
  406e74:	ldp	x2, x3, [x1, #96]
  406e78:	stp	x2, x3, [x0, #96]
  406e7c:	ldp	x2, x3, [x1, #112]
  406e80:	stp	x2, x3, [x0, #112]
  406e84:	add	x0, sp, #0x118
  406e88:	add	x1, sp, #0x198
  406e8c:	ldp	x2, x3, [x1]
  406e90:	stp	x2, x3, [x0]
  406e94:	ldp	x2, x3, [x1, #16]
  406e98:	stp	x2, x3, [x0, #16]
  406e9c:	ldp	x2, x3, [x1, #32]
  406ea0:	stp	x2, x3, [x0, #32]
  406ea4:	ldp	x2, x3, [x1, #48]
  406ea8:	stp	x2, x3, [x0, #48]
  406eac:	ldp	x2, x3, [x1, #64]
  406eb0:	stp	x2, x3, [x0, #64]
  406eb4:	ldp	x2, x3, [x1, #80]
  406eb8:	stp	x2, x3, [x0, #80]
  406ebc:	ldp	x2, x3, [x1, #96]
  406ec0:	stp	x2, x3, [x0, #96]
  406ec4:	ldp	x2, x3, [x1, #112]
  406ec8:	stp	x2, x3, [x0, #112]
  406ecc:	add	x0, sp, #0xe0
  406ed0:	mov	x1, x0
  406ed4:	adrp	x0, 412000 <_fini+0x50>
  406ed8:	add	x0, x0, #0x2f8
  406edc:	bl	404a90 <mkdtemp_malloc@plt>
  406ee0:	str	w0, [sp, #104]
  406ee4:	ldr	w0, [sp, #104]
  406ee8:	cmp	w0, #0x0
  406eec:	b.ge	406f80 <portable_extract_by_path+0x330>  // b.tcont
  406ef0:	mov	w0, #0x7                   	// #7
  406ef4:	str	w0, [sp, #168]
  406ef8:	ldr	w0, [sp, #104]
  406efc:	str	w0, [sp, #172]
  406f00:	str	wzr, [sp, #176]
  406f04:	ldr	w0, [sp, #176]
  406f08:	bl	404e50 <log_get_max_level_realm@plt>
  406f0c:	mov	w1, w0
  406f10:	ldr	w0, [sp, #168]
  406f14:	and	w0, w0, #0x7
  406f18:	cmp	w1, w0
  406f1c:	b.lt	406f64 <portable_extract_by_path+0x314>  // b.tstop
  406f20:	ldr	w0, [sp, #176]
  406f24:	lsl	w1, w0, #10
  406f28:	ldr	w0, [sp, #168]
  406f2c:	orr	w6, w1, w0
  406f30:	adrp	x0, 412000 <_fini+0x50>
  406f34:	add	x1, x0, #0xa3
  406f38:	adrp	x0, 412000 <_fini+0x50>
  406f3c:	add	x5, x0, #0x310
  406f40:	adrp	x0, 413000 <_fini+0x1050>
  406f44:	add	x4, x0, #0x208
  406f48:	mov	w3, #0x182                 	// #386
  406f4c:	mov	x2, x1
  406f50:	ldr	w1, [sp, #172]
  406f54:	mov	w0, w6
  406f58:	bl	404a80 <log_internal_realm@plt>
  406f5c:	mov	w19, w0
  406f60:	b	406f78 <portable_extract_by_path+0x328>
  406f64:	ldr	w0, [sp, #172]
  406f68:	cmp	w0, #0x0
  406f6c:	cneg	w0, w0, lt  // lt = tstop
  406f70:	and	w0, w0, #0xff
  406f74:	neg	w19, w0
  406f78:	mov	w20, #0x0                   	// #0
  406f7c:	b	4076bc <portable_extract_by_path+0xa6c>
  406f80:	ldr	x0, [sp, #208]
  406f84:	ldr	w0, [x0]
  406f88:	add	x1, sp, #0xd8
  406f8c:	mov	x4, x1
  406f90:	mov	w3, #0x23                  	// #35
  406f94:	mov	x2, #0x0                   	// #0
  406f98:	mov	x1, #0x0                   	// #0
  406f9c:	bl	404af0 <dissect_image@plt>
  406fa0:	str	w0, [sp, #104]
  406fa4:	ldr	w0, [sp, #104]
  406fa8:	cmn	w0, #0x41
  406fac:	b.ne	406fd0 <portable_extract_by_path+0x380>  // b.any
  406fb0:	ldr	x3, [sp, #72]
  406fb4:	adrp	x0, 412000 <_fini+0x50>
  406fb8:	add	x2, x0, #0x340
  406fbc:	adrp	x0, 412000 <_fini+0x50>
  406fc0:	add	x1, x0, #0x388
  406fc4:	ldr	x0, [sp, #40]
  406fc8:	bl	404910 <sd_bus_error_setf@plt>
  406fcc:	b	40707c <portable_extract_by_path+0x42c>
  406fd0:	ldr	w0, [sp, #104]
  406fd4:	cmn	w0, #0x63
  406fd8:	b.ne	406ffc <portable_extract_by_path+0x3ac>  // b.any
  406fdc:	ldr	x3, [sp, #72]
  406fe0:	adrp	x0, 412000 <_fini+0x50>
  406fe4:	add	x2, x0, #0x3b0
  406fe8:	adrp	x0, 412000 <_fini+0x50>
  406fec:	add	x1, x0, #0x388
  406ff0:	ldr	x0, [sp, #40]
  406ff4:	bl	404910 <sd_bus_error_setf@plt>
  406ff8:	b	40707c <portable_extract_by_path+0x42c>
  406ffc:	ldr	w0, [sp, #104]
  407000:	cmn	w0, #0x4c
  407004:	b.ne	407028 <portable_extract_by_path+0x3d8>  // b.any
  407008:	ldr	x3, [sp, #72]
  40700c:	adrp	x0, 412000 <_fini+0x50>
  407010:	add	x2, x0, #0x3f0
  407014:	adrp	x0, 412000 <_fini+0x50>
  407018:	add	x1, x0, #0x388
  40701c:	ldr	x0, [sp, #40]
  407020:	bl	404910 <sd_bus_error_setf@plt>
  407024:	b	40707c <portable_extract_by_path+0x42c>
  407028:	ldr	w0, [sp, #104]
  40702c:	cmn	w0, #0x6
  407030:	b.ne	407054 <portable_extract_by_path+0x404>  // b.any
  407034:	ldr	x3, [sp, #72]
  407038:	adrp	x0, 412000 <_fini+0x50>
  40703c:	add	x2, x0, #0x428
  407040:	adrp	x0, 412000 <_fini+0x50>
  407044:	add	x1, x0, #0x388
  407048:	ldr	x0, [sp, #40]
  40704c:	bl	404910 <sd_bus_error_setf@plt>
  407050:	b	40707c <portable_extract_by_path+0x42c>
  407054:	ldr	w0, [sp, #104]
  407058:	cmn	w0, #0x5d
  40705c:	b.ne	40707c <portable_extract_by_path+0x42c>  // b.any
  407060:	ldr	x3, [sp, #72]
  407064:	adrp	x0, 412000 <_fini+0x50>
  407068:	add	x2, x0, #0x458
  40706c:	adrp	x0, 412000 <_fini+0x50>
  407070:	add	x1, x0, #0x388
  407074:	ldr	x0, [sp, #40]
  407078:	bl	404910 <sd_bus_error_setf@plt>
  40707c:	ldr	w0, [sp, #104]
  407080:	cmp	w0, #0x0
  407084:	b.ge	407094 <portable_extract_by_path+0x444>  // b.tcont
  407088:	ldr	w19, [sp, #104]
  40708c:	mov	w20, #0x0                   	// #0
  407090:	b	4076bc <portable_extract_by_path+0xa6c>
  407094:	add	x0, sp, #0x110
  407098:	mov	x3, x0
  40709c:	mov	w2, #0x0                   	// #0
  4070a0:	mov	w1, #0x5                   	// #5
  4070a4:	movk	w1, #0x8, lsl #16
  4070a8:	mov	w0, #0x1                   	// #1
  4070ac:	bl	404990 <socketpair@plt>
  4070b0:	cmp	w0, #0x0
  4070b4:	b.ge	40714c <portable_extract_by_path+0x4fc>  // b.tcont
  4070b8:	mov	w0, #0x7                   	// #7
  4070bc:	str	w0, [sp, #156]
  4070c0:	bl	404820 <__errno_location@plt>
  4070c4:	ldr	w0, [x0]
  4070c8:	str	w0, [sp, #160]
  4070cc:	str	wzr, [sp, #164]
  4070d0:	ldr	w0, [sp, #164]
  4070d4:	bl	404e50 <log_get_max_level_realm@plt>
  4070d8:	mov	w1, w0
  4070dc:	ldr	w0, [sp, #156]
  4070e0:	and	w0, w0, #0x7
  4070e4:	cmp	w1, w0
  4070e8:	b.lt	407130 <portable_extract_by_path+0x4e0>  // b.tstop
  4070ec:	ldr	w0, [sp, #164]
  4070f0:	lsl	w1, w0, #10
  4070f4:	ldr	w0, [sp, #156]
  4070f8:	orr	w6, w1, w0
  4070fc:	adrp	x0, 412000 <_fini+0x50>
  407100:	add	x1, x0, #0xa3
  407104:	adrp	x0, 412000 <_fini+0x50>
  407108:	add	x5, x0, #0x4b8
  40710c:	adrp	x0, 413000 <_fini+0x1050>
  407110:	add	x4, x0, #0x208
  407114:	mov	w3, #0x193                 	// #403
  407118:	mov	x2, x1
  40711c:	ldr	w1, [sp, #160]
  407120:	mov	w0, w6
  407124:	bl	404a80 <log_internal_realm@plt>
  407128:	mov	w19, w0
  40712c:	b	407144 <portable_extract_by_path+0x4f4>
  407130:	ldr	w0, [sp, #160]
  407134:	cmp	w0, #0x0
  407138:	cneg	w0, w0, lt  // lt = tstop
  40713c:	and	w0, w0, #0xff
  407140:	neg	w19, w0
  407144:	mov	w20, #0x0                   	// #0
  407148:	b	4076bc <portable_extract_by_path+0xa6c>
  40714c:	add	x0, sp, #0x60
  407150:	mov	x2, x0
  407154:	mov	w1, #0x1a5                 	// #421
  407158:	adrp	x0, 412000 <_fini+0x50>
  40715c:	add	x0, x0, #0x4e8
  407160:	bl	4057a8 <safe_fork>
  407164:	str	w0, [sp, #104]
  407168:	ldr	w0, [sp, #104]
  40716c:	cmp	w0, #0x0
  407170:	b.ge	407180 <portable_extract_by_path+0x530>  // b.tcont
  407174:	ldr	w19, [sp, #104]
  407178:	mov	w20, #0x0                   	// #0
  40717c:	b	4076bc <portable_extract_by_path+0xa6c>
  407180:	ldr	w0, [sp, #104]
  407184:	cmp	w0, #0x0
  407188:	b.ne	407264 <portable_extract_by_path+0x614>  // b.any
  40718c:	ldr	w0, [sp, #272]
  407190:	bl	4045e0 <safe_close@plt>
  407194:	str	w0, [sp, #272]
  407198:	ldr	x0, [sp, #216]
  40719c:	ldr	x1, [sp, #224]
  4071a0:	mov	w3, #0x101                 	// #257
  4071a4:	mov	w2, #0xffffffff            	// #-1
  4071a8:	bl	404ba0 <dissected_image_mount@plt>
  4071ac:	str	w0, [sp, #104]
  4071b0:	ldr	w0, [sp, #104]
  4071b4:	cmp	w0, #0x0
  4071b8:	b.ge	407238 <portable_extract_by_path+0x5e8>  // b.tcont
  4071bc:	mov	w0, #0x7                   	// #7
  4071c0:	str	w0, [sp, #144]
  4071c4:	ldr	w0, [sp, #104]
  4071c8:	str	w0, [sp, #148]
  4071cc:	str	wzr, [sp, #152]
  4071d0:	ldr	w0, [sp, #152]
  4071d4:	bl	404e50 <log_get_max_level_realm@plt>
  4071d8:	mov	w1, w0
  4071dc:	ldr	w0, [sp, #144]
  4071e0:	and	w0, w0, #0x7
  4071e4:	cmp	w1, w0
  4071e8:	b.lt	40722c <portable_extract_by_path+0x5dc>  // b.tstop
  4071ec:	ldr	w0, [sp, #152]
  4071f0:	lsl	w1, w0, #10
  4071f4:	ldr	w0, [sp, #144]
  4071f8:	orr	w6, w1, w0
  4071fc:	adrp	x0, 412000 <_fini+0x50>
  407200:	add	x1, x0, #0xa3
  407204:	adrp	x0, 412000 <_fini+0x50>
  407208:	add	x5, x0, #0x4f8
  40720c:	adrp	x0, 413000 <_fini+0x1050>
  407210:	add	x4, x0, #0x208
  407214:	mov	w3, #0x19d                 	// #413
  407218:	mov	x2, x1
  40721c:	ldr	w1, [sp, #148]
  407220:	mov	w0, w6
  407224:	bl	404a80 <log_internal_realm@plt>
  407228:	b	407258 <portable_extract_by_path+0x608>
  40722c:	ldr	w0, [sp, #148]
  407230:	cmp	w0, #0x0
  407234:	b	407258 <portable_extract_by_path+0x608>
  407238:	ldr	x0, [sp, #224]
  40723c:	ldr	w1, [sp, #276]
  407240:	mov	x4, #0x0                   	// #0
  407244:	mov	x3, #0x0                   	// #0
  407248:	mov	w2, w1
  40724c:	ldr	x1, [sp, #64]
  407250:	bl	406238 <extract_now>
  407254:	str	w0, [sp, #104]
  407258:	ldr	w0, [sp, #104]
  40725c:	lsr	w0, w0, #31
  407260:	bl	4046c0 <_exit@plt>
  407264:	ldr	w0, [sp, #276]
  407268:	bl	4045e0 <safe_close@plt>
  40726c:	str	w0, [sp, #276]
  407270:	adrp	x0, 413000 <_fini+0x1050>
  407274:	add	x0, x0, #0xe8
  407278:	bl	404920 <internal_hashmap_new@plt>
  40727c:	str	x0, [sp, #192]
  407280:	ldr	x0, [sp, #192]
  407284:	cmp	x0, #0x0
  407288:	b.ne	407298 <portable_extract_by_path+0x648>  // b.any
  40728c:	mov	w19, #0xfffffff4            	// #-12
  407290:	mov	w20, #0x0                   	// #0
  407294:	b	4076bc <portable_extract_by_path+0xa6c>
  407298:	str	xzr, [sp, #232]
  40729c:	str	xzr, [sp, #240]
  4072a0:	mov	w0, #0xffffffff            	// #-1
  4072a4:	str	w0, [sp, #100]
  4072a8:	ldr	w0, [sp, #272]
  4072ac:	add	x2, sp, #0x64
  4072b0:	add	x1, sp, #0xf0
  4072b4:	bl	405f20 <recv_item>
  4072b8:	str	w0, [sp, #104]
  4072bc:	ldr	w0, [sp, #104]
  4072c0:	cmp	w0, #0x0
  4072c4:	b.ge	407358 <portable_extract_by_path+0x708>  // b.tcont
  4072c8:	mov	w0, #0x7                   	// #7
  4072cc:	str	w0, [sp, #132]
  4072d0:	ldr	w0, [sp, #104]
  4072d4:	str	w0, [sp, #136]
  4072d8:	str	wzr, [sp, #140]
  4072dc:	ldr	w0, [sp, #140]
  4072e0:	bl	404e50 <log_get_max_level_realm@plt>
  4072e4:	mov	w1, w0
  4072e8:	ldr	w0, [sp, #132]
  4072ec:	and	w0, w0, #0x7
  4072f0:	cmp	w1, w0
  4072f4:	b.lt	40733c <portable_extract_by_path+0x6ec>  // b.tstop
  4072f8:	ldr	w0, [sp, #140]
  4072fc:	lsl	w1, w0, #10
  407300:	ldr	w0, [sp, #132]
  407304:	orr	w6, w1, w0
  407308:	adrp	x0, 412000 <_fini+0x50>
  40730c:	add	x1, x0, #0xa3
  407310:	adrp	x0, 412000 <_fini+0x50>
  407314:	add	x5, x0, #0x520
  407318:	adrp	x0, 413000 <_fini+0x1050>
  40731c:	add	x4, x0, #0x208
  407320:	mov	w3, #0x1b4                 	// #436
  407324:	mov	x2, x1
  407328:	ldr	w1, [sp, #136]
  40732c:	mov	w0, w6
  407330:	bl	404a80 <log_internal_realm@plt>
  407334:	mov	w19, w0
  407338:	b	407350 <portable_extract_by_path+0x700>
  40733c:	ldr	w0, [sp, #136]
  407340:	cmp	w0, #0x0
  407344:	cneg	w0, w0, lt  // lt = tstop
  407348:	and	w0, w0, #0xff
  40734c:	neg	w19, w0
  407350:	mov	w20, #0x0                   	// #0
  407354:	b	4075fc <portable_extract_by_path+0x9ac>
  407358:	ldr	x0, [sp, #240]
  40735c:	bl	405210 <isempty>
  407360:	and	w0, w0, #0xff
  407364:	cmp	w0, #0x0
  407368:	b.eq	407380 <portable_extract_by_path+0x730>  // b.none
  40736c:	ldr	w0, [sp, #100]
  407370:	cmp	w0, #0x0
  407374:	b.ge	407380 <portable_extract_by_path+0x730>  // b.tcont
  407378:	mov	w20, #0x1                   	// #1
  40737c:	b	4075fc <portable_extract_by_path+0x9ac>
  407380:	ldr	x0, [sp, #240]
  407384:	bl	405210 <isempty>
  407388:	and	w0, w0, #0xff
  40738c:	cmp	w0, #0x0
  407390:	b.ne	4073a0 <portable_extract_by_path+0x750>  // b.any
  407394:	ldr	w0, [sp, #100]
  407398:	cmp	w0, #0x0
  40739c:	b.ge	407420 <portable_extract_by_path+0x7d0>  // b.tcont
  4073a0:	mov	w0, #0x7                   	// #7
  4073a4:	str	w0, [sp, #120]
  4073a8:	str	wzr, [sp, #124]
  4073ac:	str	wzr, [sp, #128]
  4073b0:	ldr	w0, [sp, #128]
  4073b4:	bl	404e50 <log_get_max_level_realm@plt>
  4073b8:	mov	w1, w0
  4073bc:	ldr	w0, [sp, #120]
  4073c0:	and	w0, w0, #0x7
  4073c4:	cmp	w1, w0
  4073c8:	b.lt	40740c <portable_extract_by_path+0x7bc>  // b.tstop
  4073cc:	ldr	w0, [sp, #128]
  4073d0:	lsl	w1, w0, #10
  4073d4:	ldr	w0, [sp, #120]
  4073d8:	orr	w6, w1, w0
  4073dc:	adrp	x0, 412000 <_fini+0x50>
  4073e0:	add	x1, x0, #0xa3
  4073e4:	adrp	x0, 412000 <_fini+0x50>
  4073e8:	add	x5, x0, #0x540
  4073ec:	adrp	x0, 413000 <_fini+0x1050>
  4073f0:	add	x4, x0, #0x208
  4073f4:	mov	w3, #0x1bc                 	// #444
  4073f8:	mov	x2, x1
  4073fc:	ldr	w1, [sp, #124]
  407400:	mov	w0, w6
  407404:	bl	404a80 <log_internal_realm@plt>
  407408:	b	407414 <portable_extract_by_path+0x7c4>
  40740c:	ldr	w0, [sp, #124]
  407410:	cmp	w0, #0x0
  407414:	mov	w19, #0xffffffea            	// #-22
  407418:	mov	w20, #0x0                   	// #0
  40741c:	b	4075fc <portable_extract_by_path+0x9ac>
  407420:	ldr	x0, [sp, #240]
  407424:	ldr	w1, [sp, #100]
  407428:	bl	405a88 <portable_metadata_new>
  40742c:	str	x0, [sp, #232]
  407430:	ldr	x0, [sp, #232]
  407434:	cmp	x0, #0x0
  407438:	b.ne	407448 <portable_extract_by_path+0x7f8>  // b.any
  40743c:	mov	w19, #0xfffffff4            	// #-12
  407440:	mov	w20, #0x0                   	// #0
  407444:	b	4075fc <portable_extract_by_path+0x9ac>
  407448:	mov	w0, #0xffffffff            	// #-1
  40744c:	str	w0, [sp, #100]
  407450:	strb	wzr, [sp, #95]
  407454:	ldr	x0, [sp, #232]
  407458:	ldrb	w0, [x0, #16]
  40745c:	cmp	w0, #0x0
  407460:	b.eq	40746c <portable_extract_by_path+0x81c>  // b.none
  407464:	cmp	w0, #0x2f
  407468:	b.ne	407474 <portable_extract_by_path+0x824>  // b.any
  40746c:	mov	w0, #0x1                   	// #1
  407470:	strb	w0, [sp, #95]
  407474:	nop
  407478:	ldrb	w0, [sp, #95]
  40747c:	eor	w0, w0, #0x1
  407480:	and	w0, w0, #0xff
  407484:	cmp	w0, #0x0
  407488:	b.eq	407554 <portable_extract_by_path+0x904>  // b.none
  40748c:	ldr	x3, [sp, #192]
  407490:	ldr	x0, [sp, #232]
  407494:	add	x0, x0, #0x10
  407498:	ldr	x1, [sp, #232]
  40749c:	mov	x2, x1
  4074a0:	mov	x1, x0
  4074a4:	mov	x0, x3
  4074a8:	bl	404b20 <hashmap_put@plt>
  4074ac:	str	w0, [sp, #104]
  4074b0:	ldr	w0, [sp, #104]
  4074b4:	cmp	w0, #0x0
  4074b8:	b.ge	40754c <portable_extract_by_path+0x8fc>  // b.tcont
  4074bc:	mov	w0, #0x7                   	// #7
  4074c0:	str	w0, [sp, #108]
  4074c4:	ldr	w0, [sp, #104]
  4074c8:	str	w0, [sp, #112]
  4074cc:	str	wzr, [sp, #116]
  4074d0:	ldr	w0, [sp, #116]
  4074d4:	bl	404e50 <log_get_max_level_realm@plt>
  4074d8:	mov	w1, w0
  4074dc:	ldr	w0, [sp, #108]
  4074e0:	and	w0, w0, #0x7
  4074e4:	cmp	w1, w0
  4074e8:	b.lt	407530 <portable_extract_by_path+0x8e0>  // b.tstop
  4074ec:	ldr	w0, [sp, #116]
  4074f0:	lsl	w1, w0, #10
  4074f4:	ldr	w0, [sp, #108]
  4074f8:	orr	w6, w1, w0
  4074fc:	adrp	x0, 412000 <_fini+0x50>
  407500:	add	x1, x0, #0xa3
  407504:	adrp	x0, 412000 <_fini+0x50>
  407508:	add	x5, x0, #0x560
  40750c:	adrp	x0, 413000 <_fini+0x1050>
  407510:	add	x4, x0, #0x208
  407514:	mov	w3, #0x1cc                 	// #460
  407518:	mov	x2, x1
  40751c:	ldr	w1, [sp, #112]
  407520:	mov	w0, w6
  407524:	bl	404a80 <log_internal_realm@plt>
  407528:	mov	w19, w0
  40752c:	b	407544 <portable_extract_by_path+0x8f4>
  407530:	ldr	w0, [sp, #112]
  407534:	cmp	w0, #0x0
  407538:	cneg	w0, w0, lt  // lt = tstop
  40753c:	and	w0, w0, #0xff
  407540:	neg	w19, w0
  407544:	mov	w20, #0x0                   	// #0
  407548:	b	4075fc <portable_extract_by_path+0x9ac>
  40754c:	str	xzr, [sp, #232]
  407550:	b	4075f8 <portable_extract_by_path+0x9a8>
  407554:	ldr	x0, [sp, #232]
  407558:	add	x2, x0, #0x10
  40755c:	adrp	x0, 412000 <_fini+0x50>
  407560:	add	x1, x0, #0x160
  407564:	mov	x0, x2
  407568:	bl	404b90 <strcmp@plt>
  40756c:	cmp	w0, #0x0
  407570:	b.ne	4075d0 <portable_extract_by_path+0x980>  // b.any
  407574:	ldr	x0, [sp, #200]
  407578:	cmp	x0, #0x0
  40757c:	cset	w0, ne  // ne = any
  407580:	and	w0, w0, #0xff
  407584:	and	x0, x0, #0xff
  407588:	cmp	x0, #0x0
  40758c:	b.eq	4075b8 <portable_extract_by_path+0x968>  // b.none
  407590:	adrp	x0, 412000 <_fini+0x50>
  407594:	add	x1, x0, #0xa3
  407598:	adrp	x0, 413000 <_fini+0x1050>
  40759c:	add	x4, x0, #0x1e8
  4075a0:	mov	w3, #0x1d2                 	// #466
  4075a4:	mov	x2, x1
  4075a8:	adrp	x0, 412000 <_fini+0x50>
  4075ac:	add	x1, x0, #0x590
  4075b0:	mov	w0, #0x0                   	// #0
  4075b4:	bl	404670 <log_assert_failed_realm@plt>
  4075b8:	ldr	x0, [sp, #232]
  4075bc:	str	x0, [sp, #248]
  4075c0:	str	xzr, [sp, #232]
  4075c4:	ldr	x0, [sp, #248]
  4075c8:	str	x0, [sp, #200]
  4075cc:	b	4075f8 <portable_extract_by_path+0x9a8>
  4075d0:	adrp	x0, 412000 <_fini+0x50>
  4075d4:	add	x1, x0, #0xa3
  4075d8:	adrp	x0, 413000 <_fini+0x1050>
  4075dc:	add	x4, x0, #0x1e8
  4075e0:	mov	w3, #0x1d5                 	// #469
  4075e4:	mov	x2, x1
  4075e8:	adrp	x0, 412000 <_fini+0x50>
  4075ec:	add	x1, x0, #0x5a0
  4075f0:	mov	w0, #0x0                   	// #0
  4075f4:	bl	4046d0 <log_assert_failed_unreachable_realm@plt>
  4075f8:	mov	w20, #0x2                   	// #2
  4075fc:	add	x0, sp, #0x64
  407600:	bl	40540c <closep>
  407604:	cmp	w20, #0x0
  407608:	b.eq	407618 <portable_extract_by_path+0x9c8>  // b.none
  40760c:	cmp	w20, #0x2
  407610:	b.ne	407620 <portable_extract_by_path+0x9d0>  // b.any
  407614:	b	407628 <portable_extract_by_path+0x9d8>
  407618:	mov	w20, #0x0                   	// #0
  40761c:	b	40762c <portable_extract_by_path+0x9dc>
  407620:	mov	w20, #0x1                   	// #1
  407624:	b	40762c <portable_extract_by_path+0x9dc>
  407628:	mov	w20, #0x2                   	// #2
  40762c:	add	x0, sp, #0xf0
  407630:	bl	40511c <freep>
  407634:	cmp	w20, #0x0
  407638:	b.eq	407648 <portable_extract_by_path+0x9f8>  // b.none
  40763c:	cmp	w20, #0x2
  407640:	b.ne	407650 <portable_extract_by_path+0xa00>  // b.any
  407644:	b	407658 <portable_extract_by_path+0xa08>
  407648:	mov	w20, #0x0                   	// #0
  40764c:	b	40765c <portable_extract_by_path+0xa0c>
  407650:	mov	w20, #0x1                   	// #1
  407654:	b	40765c <portable_extract_by_path+0xa0c>
  407658:	mov	w20, #0x2                   	// #2
  40765c:	add	x0, sp, #0xe8
  407660:	bl	405774 <portable_metadata_unrefp>
  407664:	cmp	w20, #0x0
  407668:	b.eq	407678 <portable_extract_by_path+0xa28>  // b.none
  40766c:	cmp	w20, #0x2
  407670:	b.ne	407680 <portable_extract_by_path+0xa30>  // b.any
  407674:	b	407298 <portable_extract_by_path+0x648>
  407678:	mov	w20, #0x0                   	// #0
  40767c:	b	4076bc <portable_extract_by_path+0xa6c>
  407680:	ldr	w0, [sp, #96]
  407684:	mov	w2, #0x0                   	// #0
  407688:	mov	w1, w0
  40768c:	adrp	x0, 412000 <_fini+0x50>
  407690:	add	x0, x0, #0x4e8
  407694:	bl	404840 <wait_for_terminate_and_check@plt>
  407698:	str	w0, [sp, #104]
  40769c:	ldr	w0, [sp, #104]
  4076a0:	cmp	w0, #0x0
  4076a4:	b.ge	4076b4 <portable_extract_by_path+0xa64>  // b.tcont
  4076a8:	ldr	w19, [sp, #104]
  4076ac:	mov	w20, #0x0                   	// #0
  4076b0:	b	4076bc <portable_extract_by_path+0xa6c>
  4076b4:	str	wzr, [sp, #96]
  4076b8:	mov	w20, #0x1                   	// #1
  4076bc:	add	x0, sp, #0x118
  4076c0:	bl	4057dc <block_signals_reset>
  4076c4:	cmp	w20, #0x1
  4076c8:	b.eq	4076d4 <portable_extract_by_path+0xa84>  // b.none
  4076cc:	mov	w20, #0x0                   	// #0
  4076d0:	b	4076d8 <portable_extract_by_path+0xa88>
  4076d4:	mov	w20, #0x1                   	// #1
  4076d8:	add	x0, sp, #0x60
  4076dc:	bl	4046b0 <sigkill_waitp@plt>
  4076e0:	cmp	w20, #0x1
  4076e4:	b.eq	4076f0 <portable_extract_by_path+0xaa0>  // b.none
  4076e8:	mov	w20, #0x0                   	// #0
  4076ec:	b	4076f4 <portable_extract_by_path+0xaa4>
  4076f0:	mov	w20, #0x1                   	// #1
  4076f4:	add	x0, sp, #0x110
  4076f8:	bl	405430 <close_pairp>
  4076fc:	cmp	w20, #0x1
  407700:	b.eq	40770c <portable_extract_by_path+0xabc>  // b.none
  407704:	mov	w20, #0x0                   	// #0
  407708:	b	407710 <portable_extract_by_path+0xac0>
  40770c:	mov	w20, #0x1                   	// #1
  407710:	add	x0, sp, #0xe0
  407714:	bl	4055b8 <rmdir_and_freep>
  407718:	cmp	w20, #0x1
  40771c:	b.eq	407728 <portable_extract_by_path+0xad8>  // b.none
  407720:	mov	w20, #0x0                   	// #0
  407724:	b	40772c <portable_extract_by_path+0xadc>
  407728:	mov	w20, #0x1                   	// #1
  40772c:	add	x0, sp, #0xd8
  407730:	bl	4053d8 <dissected_image_unrefp>
  407734:	cmp	w20, #0x1
  407738:	b.ne	4077f0 <portable_extract_by_path+0xba0>  // b.any
  40773c:	ldr	x0, [sp, #200]
  407740:	cmp	x0, #0x0
  407744:	b.ne	40776c <portable_extract_by_path+0xb1c>  // b.any
  407748:	ldr	x3, [sp, #72]
  40774c:	adrp	x0, 412000 <_fini+0x50>
  407750:	add	x2, x0, #0x5c8
  407754:	adrp	x0, 412000 <_fini+0x50>
  407758:	add	x1, x0, #0x388
  40775c:	ldr	x0, [sp, #40]
  407760:	bl	404910 <sd_bus_error_setf@plt>
  407764:	mov	w19, w0
  407768:	b	4077f0 <portable_extract_by_path+0xba0>
  40776c:	ldr	x0, [sp, #192]
  407770:	bl	405304 <hashmap_isempty>
  407774:	and	w0, w0, #0xff
  407778:	cmp	w0, #0x0
  40777c:	b.eq	4077a4 <portable_extract_by_path+0xb54>  // b.none
  407780:	ldr	x3, [sp, #72]
  407784:	adrp	x0, 412000 <_fini+0x50>
  407788:	add	x2, x0, #0x5f8
  40778c:	adrp	x0, 412000 <_fini+0x50>
  407790:	add	x1, x0, #0x388
  407794:	ldr	x0, [sp, #40]
  407798:	bl	404910 <sd_bus_error_setf@plt>
  40779c:	mov	w19, w0
  4077a0:	b	4077f0 <portable_extract_by_path+0xba0>
  4077a4:	ldr	x0, [sp, #48]
  4077a8:	cmp	x0, #0x0
  4077ac:	b.eq	4077c8 <portable_extract_by_path+0xb78>  // b.none
  4077b0:	ldr	x0, [sp, #192]
  4077b4:	str	x0, [sp, #256]
  4077b8:	str	xzr, [sp, #192]
  4077bc:	ldr	x1, [sp, #256]
  4077c0:	ldr	x0, [sp, #48]
  4077c4:	str	x1, [x0]
  4077c8:	ldr	x0, [sp, #56]
  4077cc:	cmp	x0, #0x0
  4077d0:	b.eq	4077ec <portable_extract_by_path+0xb9c>  // b.none
  4077d4:	ldr	x0, [sp, #200]
  4077d8:	str	x0, [sp, #264]
  4077dc:	str	xzr, [sp, #200]
  4077e0:	ldr	x1, [sp, #264]
  4077e4:	ldr	x0, [sp, #56]
  4077e8:	str	x1, [x0]
  4077ec:	mov	w19, #0x0                   	// #0
  4077f0:	add	x0, sp, #0xd0
  4077f4:	bl	405648 <loop_device_unrefp>
  4077f8:	add	x0, sp, #0xc8
  4077fc:	bl	405774 <portable_metadata_unrefp>
  407800:	add	x0, sp, #0xc0
  407804:	bl	405364 <hashmap_freep>
  407808:	mov	w1, w19
  40780c:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  407810:	add	x0, x0, #0x728
  407814:	ldr	x2, [sp, #536]
  407818:	ldr	x0, [x0]
  40781c:	eor	x0, x2, x0
  407820:	cmp	x0, #0x0
  407824:	b.eq	40782c <portable_extract_by_path+0xbdc>  // b.none
  407828:	bl	404930 <__stack_chk_fail@plt>
  40782c:	mov	w0, w1
  407830:	ldp	x19, x20, [sp, #16]
  407834:	ldp	x29, x30, [sp]
  407838:	add	sp, sp, #0x220
  40783c:	ret

0000000000407840 <portable_extract>:
  407840:	stp	x29, x30, [sp, #-112]!
  407844:	mov	x29, sp
  407848:	str	x19, [sp, #16]
  40784c:	str	x0, [sp, #72]
  407850:	str	x1, [sp, #64]
  407854:	str	x2, [sp, #56]
  407858:	str	x3, [sp, #48]
  40785c:	str	x4, [sp, #40]
  407860:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  407864:	add	x0, x0, #0x728
  407868:	ldr	x1, [x0]
  40786c:	str	x1, [sp, #104]
  407870:	mov	x1, #0x0                   	// #0
  407874:	str	xzr, [sp, #96]
  407878:	ldr	x0, [sp, #72]
  40787c:	cmp	x0, #0x0
  407880:	cset	w0, eq  // eq = none
  407884:	and	w0, w0, #0xff
  407888:	and	x0, x0, #0xff
  40788c:	cmp	x0, #0x0
  407890:	b.eq	4078bc <portable_extract+0x7c>  // b.none
  407894:	adrp	x0, 412000 <_fini+0x50>
  407898:	add	x1, x0, #0xa3
  40789c:	adrp	x0, 413000 <_fini+0x1050>
  4078a0:	add	x4, x0, #0x240
  4078a4:	mov	w3, #0x1f7                 	// #503
  4078a8:	mov	x2, x1
  4078ac:	adrp	x0, 412000 <_fini+0x50>
  4078b0:	add	x1, x0, #0x638
  4078b4:	mov	w0, #0x0                   	// #0
  4078b8:	bl	404670 <log_assert_failed_realm@plt>
  4078bc:	add	x0, sp, #0x60
  4078c0:	mov	x2, x0
  4078c4:	ldr	x1, [sp, #72]
  4078c8:	mov	w0, #0x1                   	// #1
  4078cc:	bl	404780 <image_find_harder@plt>
  4078d0:	str	w0, [sp, #92]
  4078d4:	ldr	w0, [sp, #92]
  4078d8:	cmp	w0, #0x0
  4078dc:	b.ge	4078e8 <portable_extract+0xa8>  // b.tcont
  4078e0:	ldr	w19, [sp, #92]
  4078e4:	b	407908 <portable_extract+0xc8>
  4078e8:	ldr	x0, [sp, #96]
  4078ec:	ldr	x0, [x0, #16]
  4078f0:	ldr	x4, [sp, #40]
  4078f4:	ldr	x3, [sp, #48]
  4078f8:	ldr	x2, [sp, #56]
  4078fc:	ldr	x1, [sp, #64]
  407900:	bl	406c50 <portable_extract_by_path>
  407904:	mov	w19, w0
  407908:	add	x0, sp, #0x60
  40790c:	bl	40567c <image_unrefp>
  407910:	mov	w1, w19
  407914:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  407918:	add	x0, x0, #0x728
  40791c:	ldr	x2, [sp, #104]
  407920:	ldr	x0, [x0]
  407924:	eor	x0, x2, x0
  407928:	cmp	x0, #0x0
  40792c:	b.eq	407934 <portable_extract+0xf4>  // b.none
  407930:	bl	404930 <__stack_chk_fail@plt>
  407934:	mov	w0, w1
  407938:	ldr	x19, [sp, #16]
  40793c:	ldp	x29, x30, [sp], #112
  407940:	ret

0000000000407944 <unit_file_is_active>:
  407944:	stp	x29, x30, [sp, #-240]!
  407948:	mov	x29, sp
  40794c:	stp	x19, x20, [sp, #16]
  407950:	str	x0, [x29, #56]
  407954:	str	x1, [x29, #48]
  407958:	str	x2, [x29, #40]
  40795c:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  407960:	add	x0, x0, #0x728
  407964:	ldr	x1, [x0]
  407968:	str	x1, [x29, #232]
  40796c:	mov	x1, #0x0                   	// #0
  407970:	ldr	x0, [x29, #56]
  407974:	cmp	x0, #0x0
  407978:	b.ne	407984 <unit_file_is_active+0x40>  // b.any
  40797c:	mov	w19, #0x0                   	// #0
  407980:	b	407f74 <unit_file_is_active+0x630>
  407984:	mov	w1, #0x5                   	// #5
  407988:	ldr	x0, [x29, #48]
  40798c:	bl	404e30 <unit_name_is_valid@plt>
  407990:	and	w0, w0, #0xff
  407994:	cmp	w0, #0x0
  407998:	b.eq	407adc <unit_file_is_active+0x198>  // b.none
  40799c:	str	xzr, [x29, #104]
  4079a0:	str	xzr, [x29, #112]
  4079a4:	ldr	x0, [x29, #48]
  4079a8:	bl	4042c0 <unit_dbus_path_from_name@plt>
  4079ac:	str	x0, [x29, #104]
  4079b0:	ldr	x0, [x29, #104]
  4079b4:	cmp	x0, #0x0
  4079b8:	b.ne	4079c4 <unit_file_is_active+0x80>  // b.any
  4079bc:	mov	w19, #0xfffffff4            	// #-12
  4079c0:	b	407ac8 <unit_file_is_active+0x184>
  4079c4:	ldr	x1, [x29, #104]
  4079c8:	add	x0, x29, #0x70
  4079cc:	mov	x6, x0
  4079d0:	ldr	x5, [x29, #40]
  4079d4:	adrp	x0, 412000 <_fini+0x50>
  4079d8:	add	x4, x0, #0x648
  4079dc:	adrp	x0, 412000 <_fini+0x50>
  4079e0:	add	x3, x0, #0x658
  4079e4:	mov	x2, x1
  4079e8:	adrp	x0, 412000 <_fini+0x50>
  4079ec:	add	x1, x0, #0x678
  4079f0:	ldr	x0, [x29, #56]
  4079f4:	bl	404bb0 <sd_bus_get_property_string@plt>
  4079f8:	str	w0, [x29, #76]
  4079fc:	ldr	w0, [x29, #76]
  407a00:	cmp	w0, #0x0
  407a04:	b.ge	407aa4 <unit_file_is_active+0x160>  // b.tcont
  407a08:	mov	w0, #0x7                   	// #7
  407a0c:	str	w0, [x29, #92]
  407a10:	ldr	w0, [x29, #76]
  407a14:	str	w0, [x29, #96]
  407a18:	str	wzr, [x29, #100]
  407a1c:	ldr	w0, [x29, #100]
  407a20:	bl	404e50 <log_get_max_level_realm@plt>
  407a24:	mov	w1, w0
  407a28:	ldr	w0, [x29, #92]
  407a2c:	and	w0, w0, #0x7
  407a30:	cmp	w1, w0
  407a34:	b.lt	407a8c <unit_file_is_active+0x148>  // b.tstop
  407a38:	ldr	w0, [x29, #100]
  407a3c:	lsl	w1, w0, #10
  407a40:	ldr	w0, [x29, #92]
  407a44:	orr	w19, w1, w0
  407a48:	adrp	x0, 412000 <_fini+0x50>
  407a4c:	add	x20, x0, #0xa3
  407a50:	ldr	w1, [x29, #76]
  407a54:	ldr	x0, [x29, #40]
  407a58:	bl	4042b0 <bus_error_message@plt>
  407a5c:	mov	x6, x0
  407a60:	adrp	x0, 412000 <_fini+0x50>
  407a64:	add	x5, x0, #0x698
  407a68:	adrp	x0, 413000 <_fini+0x1050>
  407a6c:	add	x4, x0, #0x258
  407a70:	mov	w3, #0x222                 	// #546
  407a74:	mov	x2, x20
  407a78:	ldr	w1, [x29, #96]
  407a7c:	mov	w0, w19
  407a80:	bl	404a80 <log_internal_realm@plt>
  407a84:	mov	w19, w0
  407a88:	b	407ac8 <unit_file_is_active+0x184>
  407a8c:	ldr	w0, [x29, #96]
  407a90:	cmp	w0, #0x0
  407a94:	cneg	w0, w0, lt  // lt = tstop
  407a98:	and	w0, w0, #0xff
  407a9c:	neg	w19, w0
  407aa0:	b	407ac8 <unit_file_is_active+0x184>
  407aa4:	ldr	x0, [x29, #112]
  407aa8:	mov	x1, x0
  407aac:	adrp	x0, 413000 <_fini+0x1050>
  407ab0:	add	x0, x0, #0x270
  407ab4:	bl	404a30 <strv_find@plt>
  407ab8:	cmp	x0, #0x0
  407abc:	cset	w0, ne  // ne = any
  407ac0:	and	w0, w0, #0xff
  407ac4:	mov	w19, w0
  407ac8:	add	x0, x29, #0x70
  407acc:	bl	40511c <freep>
  407ad0:	add	x0, x29, #0x68
  407ad4:	bl	40511c <freep>
  407ad8:	b	407f74 <unit_file_is_active+0x630>
  407adc:	mov	w1, #0x2                   	// #2
  407ae0:	ldr	x0, [x29, #48]
  407ae4:	bl	404e30 <unit_name_is_valid@plt>
  407ae8:	and	w0, w0, #0xff
  407aec:	cmp	w0, #0x0
  407af0:	b.eq	407f70 <unit_file_is_active+0x62c>  // b.none
  407af4:	str	xzr, [x29, #104]
  407af8:	str	xzr, [x29, #112]
  407afc:	add	x1, x29, #0x68
  407b00:	adrp	x0, 412000 <_fini+0x50>
  407b04:	add	x5, x0, #0x6c0
  407b08:	adrp	x0, 412000 <_fini+0x50>
  407b0c:	add	x4, x0, #0x6d8
  407b10:	adrp	x0, 412000 <_fini+0x50>
  407b14:	add	x3, x0, #0x700
  407b18:	adrp	x0, 412000 <_fini+0x50>
  407b1c:	add	x2, x0, #0x678
  407b20:	ldr	x0, [x29, #56]
  407b24:	bl	4042d0 <sd_bus_message_new_method_call@plt>
  407b28:	str	w0, [x29, #76]
  407b2c:	ldr	w0, [x29, #76]
  407b30:	cmp	w0, #0x0
  407b34:	b.ge	407b40 <unit_file_is_active+0x1fc>  // b.tcont
  407b38:	ldr	w19, [x29, #76]
  407b3c:	b	407f5c <unit_file_is_active+0x618>
  407b40:	ldr	x2, [x29, #104]
  407b44:	adrp	x0, 413000 <_fini+0x1050>
  407b48:	add	x1, x0, #0x270
  407b4c:	mov	x0, x2
  407b50:	bl	404c60 <sd_bus_message_append_strv@plt>
  407b54:	str	w0, [x29, #76]
  407b58:	ldr	w0, [x29, #76]
  407b5c:	cmp	w0, #0x0
  407b60:	b.ge	407b6c <unit_file_is_active+0x228>  // b.tcont
  407b64:	ldr	w19, [x29, #76]
  407b68:	b	407f5c <unit_file_is_active+0x618>
  407b6c:	mov	w1, #0x40                  	// #64
  407b70:	ldr	x0, [x29, #48]
  407b74:	bl	404c40 <strchr@plt>
  407b78:	str	x0, [x29, #144]
  407b7c:	ldr	x0, [x29, #144]
  407b80:	cmp	x0, #0x0
  407b84:	cset	w0, eq  // eq = none
  407b88:	and	w0, w0, #0xff
  407b8c:	and	x0, x0, #0xff
  407b90:	cmp	x0, #0x0
  407b94:	b.eq	407bc0 <unit_file_is_active+0x27c>  // b.none
  407b98:	adrp	x0, 412000 <_fini+0x50>
  407b9c:	add	x1, x0, #0xa3
  407ba0:	adrp	x0, 413000 <_fini+0x1050>
  407ba4:	add	x4, x0, #0x298
  407ba8:	mov	w3, #0x23b                 	// #571
  407bac:	mov	x2, x1
  407bb0:	adrp	x0, 412000 <_fini+0x50>
  407bb4:	add	x1, x0, #0x720
  407bb8:	mov	w0, #0x0                   	// #0
  407bbc:	bl	404670 <log_assert_failed_realm@plt>
  407bc0:	ldr	x0, [x29, #48]
  407bc4:	str	x0, [x29, #152]
  407bc8:	ldr	x0, [x29, #144]
  407bcc:	add	x1, x0, #0x1
  407bd0:	ldr	x0, [x29, #48]
  407bd4:	sub	x0, x1, x0
  407bd8:	mov	x1, x0
  407bdc:	ldr	x0, [x29, #152]
  407be0:	bl	4044a0 <strnlen@plt>
  407be4:	str	x0, [x29, #160]
  407be8:	ldr	x0, [x29, #160]
  407bec:	add	x0, x0, #0x1
  407bf0:	add	x0, x0, #0xf
  407bf4:	lsr	x0, x0, #4
  407bf8:	lsl	x0, x0, #4
  407bfc:	sub	sp, sp, x0
  407c00:	mov	x0, sp
  407c04:	add	x0, x0, #0xf
  407c08:	lsr	x0, x0, #4
  407c0c:	lsl	x0, x0, #4
  407c10:	str	x0, [x29, #168]
  407c14:	ldr	x1, [x29, #168]
  407c18:	ldr	x0, [x29, #160]
  407c1c:	add	x0, x1, x0
  407c20:	strb	wzr, [x0]
  407c24:	ldr	x2, [x29, #160]
  407c28:	ldr	x1, [x29, #152]
  407c2c:	ldr	x0, [x29, #168]
  407c30:	bl	404540 <memcpy@plt>
  407c34:	str	x0, [x29, #176]
  407c38:	ldr	x0, [x29, #176]
  407c3c:	str	x0, [x29, #208]
  407c40:	adrp	x0, 412000 <_fini+0x50>
  407c44:	add	x0, x0, #0x728
  407c48:	str	x0, [x29, #216]
  407c4c:	ldr	x0, [x29, #144]
  407c50:	add	x0, x0, #0x1
  407c54:	str	x0, [x29, #224]
  407c58:	str	xzr, [x29, #128]
  407c5c:	str	xzr, [x29, #136]
  407c60:	b	407c94 <unit_file_is_active+0x350>
  407c64:	ldr	x0, [x29, #136]
  407c68:	lsl	x0, x0, #3
  407c6c:	add	x1, x29, #0xd0
  407c70:	ldr	x0, [x1, x0]
  407c74:	bl	404df0 <strlen@plt>
  407c78:	mov	x1, x0
  407c7c:	ldr	x0, [x29, #128]
  407c80:	add	x0, x0, x1
  407c84:	str	x0, [x29, #128]
  407c88:	ldr	x0, [x29, #136]
  407c8c:	add	x0, x0, #0x1
  407c90:	str	x0, [x29, #136]
  407c94:	ldr	x0, [x29, #136]
  407c98:	cmp	x0, #0x2
  407c9c:	b.hi	407cb8 <unit_file_is_active+0x374>  // b.pmore
  407ca0:	ldr	x0, [x29, #136]
  407ca4:	lsl	x0, x0, #3
  407ca8:	add	x1, x29, #0xd0
  407cac:	ldr	x0, [x1, x0]
  407cb0:	cmp	x0, #0x0
  407cb4:	b.ne	407c64 <unit_file_is_active+0x320>  // b.any
  407cb8:	ldr	x0, [x29, #128]
  407cbc:	add	x0, x0, #0x1
  407cc0:	str	x0, [x29, #184]
  407cc4:	ldr	x1, [x29, #184]
  407cc8:	mov	x0, #0x1                   	// #1
  407ccc:	bl	405140 <size_multiply_overflow>
  407cd0:	and	w0, w0, #0xff
  407cd4:	and	x0, x0, #0xff
  407cd8:	cmp	x0, #0x0
  407cdc:	b.eq	407d08 <unit_file_is_active+0x3c4>  // b.none
  407ce0:	adrp	x0, 412000 <_fini+0x50>
  407ce4:	add	x1, x0, #0xa3
  407ce8:	adrp	x0, 413000 <_fini+0x1050>
  407cec:	add	x4, x0, #0x298
  407cf0:	mov	w3, #0x23e                 	// #574
  407cf4:	mov	x2, x1
  407cf8:	adrp	x0, 412000 <_fini+0x50>
  407cfc:	add	x1, x0, #0x730
  407d00:	mov	w0, #0x0                   	// #0
  407d04:	bl	404670 <log_assert_failed_realm@plt>
  407d08:	ldr	x0, [x29, #184]
  407d0c:	cmp	x0, #0x400, lsl #12
  407d10:	cset	w0, hi  // hi = pmore
  407d14:	and	w0, w0, #0xff
  407d18:	and	x0, x0, #0xff
  407d1c:	cmp	x0, #0x0
  407d20:	b.eq	407d4c <unit_file_is_active+0x408>  // b.none
  407d24:	adrp	x0, 412000 <_fini+0x50>
  407d28:	add	x1, x0, #0xa3
  407d2c:	adrp	x0, 413000 <_fini+0x1050>
  407d30:	add	x4, x0, #0x298
  407d34:	mov	w3, #0x23e                 	// #574
  407d38:	mov	x2, x1
  407d3c:	adrp	x0, 412000 <_fini+0x50>
  407d40:	add	x1, x0, #0x760
  407d44:	mov	w0, #0x0                   	// #0
  407d48:	bl	404670 <log_assert_failed_realm@plt>
  407d4c:	ldr	x0, [x29, #184]
  407d50:	add	x0, x0, #0xf
  407d54:	lsr	x0, x0, #4
  407d58:	lsl	x0, x0, #4
  407d5c:	sub	sp, sp, x0
  407d60:	mov	x0, sp
  407d64:	add	x0, x0, #0xf
  407d68:	lsr	x0, x0, #4
  407d6c:	lsl	x0, x0, #4
  407d70:	str	x0, [x29, #192]
  407d74:	ldr	x0, [x29, #192]
  407d78:	str	x0, [x29, #120]
  407d7c:	str	xzr, [x29, #136]
  407d80:	b	407db0 <unit_file_is_active+0x46c>
  407d84:	ldr	x0, [x29, #136]
  407d88:	lsl	x0, x0, #3
  407d8c:	add	x1, x29, #0xd0
  407d90:	ldr	x0, [x1, x0]
  407d94:	mov	x1, x0
  407d98:	ldr	x0, [x29, #120]
  407d9c:	bl	404380 <stpcpy@plt>
  407da0:	str	x0, [x29, #120]
  407da4:	ldr	x0, [x29, #136]
  407da8:	add	x0, x0, #0x1
  407dac:	str	x0, [x29, #136]
  407db0:	ldr	x0, [x29, #136]
  407db4:	cmp	x0, #0x2
  407db8:	b.hi	407dd4 <unit_file_is_active+0x490>  // b.pmore
  407dbc:	ldr	x0, [x29, #136]
  407dc0:	lsl	x0, x0, #3
  407dc4:	add	x1, x29, #0xd0
  407dc8:	ldr	x0, [x1, x0]
  407dcc:	cmp	x0, #0x0
  407dd0:	b.ne	407d84 <unit_file_is_active+0x440>  // b.any
  407dd4:	ldr	x0, [x29, #120]
  407dd8:	strb	wzr, [x0]
  407ddc:	ldr	x0, [x29, #192]
  407de0:	str	x0, [x29, #200]
  407de4:	ldr	x2, [x29, #104]
  407de8:	ldr	x0, [x29, #200]
  407dec:	str	x0, [x29, #208]
  407df0:	str	xzr, [x29, #216]
  407df4:	add	x0, x29, #0xd0
  407df8:	mov	x1, x0
  407dfc:	mov	x0, x2
  407e00:	bl	404c60 <sd_bus_message_append_strv@plt>
  407e04:	str	w0, [x29, #76]
  407e08:	ldr	w0, [x29, #76]
  407e0c:	cmp	w0, #0x0
  407e10:	b.ge	407e1c <unit_file_is_active+0x4d8>  // b.tcont
  407e14:	ldr	w19, [x29, #76]
  407e18:	b	407f5c <unit_file_is_active+0x618>
  407e1c:	ldr	x0, [x29, #104]
  407e20:	add	x1, x29, #0x70
  407e24:	mov	x4, x1
  407e28:	ldr	x3, [x29, #40]
  407e2c:	mov	x2, #0x0                   	// #0
  407e30:	mov	x1, x0
  407e34:	ldr	x0, [x29, #56]
  407e38:	bl	404a20 <sd_bus_call@plt>
  407e3c:	str	w0, [x29, #76]
  407e40:	ldr	w0, [x29, #76]
  407e44:	cmp	w0, #0x0
  407e48:	b.ge	407ee8 <unit_file_is_active+0x5a4>  // b.tcont
  407e4c:	mov	w0, #0x7                   	// #7
  407e50:	str	w0, [x29, #80]
  407e54:	ldr	w0, [x29, #76]
  407e58:	str	w0, [x29, #84]
  407e5c:	str	wzr, [x29, #88]
  407e60:	ldr	w0, [x29, #88]
  407e64:	bl	404e50 <log_get_max_level_realm@plt>
  407e68:	mov	w1, w0
  407e6c:	ldr	w0, [x29, #80]
  407e70:	and	w0, w0, #0x7
  407e74:	cmp	w1, w0
  407e78:	b.lt	407ed0 <unit_file_is_active+0x58c>  // b.tstop
  407e7c:	ldr	w0, [x29, #88]
  407e80:	lsl	w1, w0, #10
  407e84:	ldr	w0, [x29, #80]
  407e88:	orr	w19, w1, w0
  407e8c:	adrp	x0, 412000 <_fini+0x50>
  407e90:	add	x20, x0, #0xa3
  407e94:	ldr	w1, [x29, #76]
  407e98:	ldr	x0, [x29, #40]
  407e9c:	bl	4042b0 <bus_error_message@plt>
  407ea0:	mov	x6, x0
  407ea4:	adrp	x0, 412000 <_fini+0x50>
  407ea8:	add	x5, x0, #0x780
  407eac:	adrp	x0, 413000 <_fini+0x1050>
  407eb0:	add	x4, x0, #0x258
  407eb4:	mov	w3, #0x246                 	// #582
  407eb8:	mov	x2, x20
  407ebc:	ldr	w1, [x29, #84]
  407ec0:	mov	w0, w19
  407ec4:	bl	404a80 <log_internal_realm@plt>
  407ec8:	mov	w19, w0
  407ecc:	b	407f5c <unit_file_is_active+0x618>
  407ed0:	ldr	w0, [x29, #84]
  407ed4:	cmp	w0, #0x0
  407ed8:	cneg	w0, w0, lt  // lt = tstop
  407edc:	and	w0, w0, #0xff
  407ee0:	neg	w19, w0
  407ee4:	b	407f5c <unit_file_is_active+0x618>
  407ee8:	ldr	x3, [x29, #112]
  407eec:	adrp	x0, 412000 <_fini+0x50>
  407ef0:	add	x2, x0, #0x7a0
  407ef4:	mov	w1, #0x61                  	// #97
  407ef8:	mov	x0, x3
  407efc:	bl	4043f0 <sd_bus_message_enter_container@plt>
  407f00:	str	w0, [x29, #76]
  407f04:	ldr	w0, [x29, #76]
  407f08:	cmp	w0, #0x0
  407f0c:	b.ge	407f18 <unit_file_is_active+0x5d4>  // b.tcont
  407f10:	ldr	w19, [x29, #76]
  407f14:	b	407f5c <unit_file_is_active+0x618>
  407f18:	ldr	x3, [x29, #112]
  407f1c:	adrp	x0, 412000 <_fini+0x50>
  407f20:	add	x2, x0, #0x7b0
  407f24:	mov	w1, #0x72                  	// #114
  407f28:	mov	x0, x3
  407f2c:	bl	4043f0 <sd_bus_message_enter_container@plt>
  407f30:	str	w0, [x29, #76]
  407f34:	ldr	w0, [x29, #76]
  407f38:	cmp	w0, #0x0
  407f3c:	b.ge	407f48 <unit_file_is_active+0x604>  // b.tcont
  407f40:	ldr	w19, [x29, #76]
  407f44:	b	407f5c <unit_file_is_active+0x618>
  407f48:	ldr	w0, [x29, #76]
  407f4c:	cmp	w0, #0x0
  407f50:	cset	w0, gt
  407f54:	and	w0, w0, #0xff
  407f58:	mov	w19, w0
  407f5c:	add	x0, x29, #0x70
  407f60:	bl	405038 <sd_bus_message_unrefp>
  407f64:	add	x0, x29, #0x68
  407f68:	bl	405038 <sd_bus_message_unrefp>
  407f6c:	b	407f74 <unit_file_is_active+0x630>
  407f70:	mov	w19, #0xffffffea            	// #-22
  407f74:	mov	w1, w19
  407f78:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  407f7c:	add	x0, x0, #0x728
  407f80:	ldr	x2, [x29, #232]
  407f84:	ldr	x0, [x0]
  407f88:	eor	x0, x2, x0
  407f8c:	cmp	x0, #0x0
  407f90:	b.eq	407f98 <unit_file_is_active+0x654>  // b.none
  407f94:	bl	404930 <__stack_chk_fail@plt>
  407f98:	mov	w0, w1
  407f9c:	mov	sp, x29
  407fa0:	ldp	x19, x20, [sp, #16]
  407fa4:	ldp	x29, x30, [sp], #240
  407fa8:	ret

0000000000407fac <portable_changes_add>:
  407fac:	stp	x29, x30, [sp, #-144]!
  407fb0:	mov	x29, sp
  407fb4:	str	x19, [sp, #16]
  407fb8:	str	x0, [sp, #72]
  407fbc:	str	x1, [sp, #64]
  407fc0:	str	w2, [sp, #60]
  407fc4:	str	x3, [sp, #48]
  407fc8:	str	x4, [sp, #40]
  407fcc:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  407fd0:	add	x0, x0, #0x728
  407fd4:	ldr	x1, [x0]
  407fd8:	str	x1, [sp, #136]
  407fdc:	mov	x1, #0x0                   	// #0
  407fe0:	str	xzr, [sp, #80]
  407fe4:	str	xzr, [sp, #112]
  407fe8:	ldr	x0, [sp, #48]
  407fec:	cmp	x0, #0x0
  407ff0:	cset	w0, eq  // eq = none
  407ff4:	and	w0, w0, #0xff
  407ff8:	and	x0, x0, #0xff
  407ffc:	cmp	x0, #0x0
  408000:	b.eq	40802c <portable_changes_add+0x80>  // b.none
  408004:	adrp	x0, 412000 <_fini+0x50>
  408008:	add	x1, x0, #0xa3
  40800c:	adrp	x0, 413000 <_fini+0x1050>
  408010:	add	x4, x0, #0x2b0
  408014:	mov	w3, #0x260                 	// #608
  408018:	mov	x2, x1
  40801c:	adrp	x0, 412000 <_fini+0x50>
  408020:	add	x1, x0, #0x298
  408024:	mov	w0, #0x0                   	// #0
  408028:	bl	404670 <log_assert_failed_realm@plt>
  40802c:	ldr	x0, [sp, #72]
  408030:	cmp	x0, #0x0
  408034:	cset	w0, eq  // eq = none
  408038:	and	w1, w0, #0xff
  40803c:	ldr	x0, [sp, #64]
  408040:	cmp	x0, #0x0
  408044:	cset	w0, eq  // eq = none
  408048:	and	w0, w0, #0xff
  40804c:	eor	w0, w1, w0
  408050:	and	w0, w0, #0xff
  408054:	and	x0, x0, #0xff
  408058:	cmp	x0, #0x0
  40805c:	b.eq	408088 <portable_changes_add+0xdc>  // b.none
  408060:	adrp	x0, 412000 <_fini+0x50>
  408064:	add	x1, x0, #0xa3
  408068:	adrp	x0, 413000 <_fini+0x1050>
  40806c:	add	x4, x0, #0x2b0
  408070:	mov	w3, #0x261                 	// #609
  408074:	mov	x2, x1
  408078:	adrp	x0, 412000 <_fini+0x50>
  40807c:	add	x1, x0, #0x7c0
  408080:	mov	w0, #0x0                   	// #0
  408084:	bl	404670 <log_assert_failed_realm@plt>
  408088:	ldr	x0, [sp, #72]
  40808c:	cmp	x0, #0x0
  408090:	b.ne	40809c <portable_changes_add+0xf0>  // b.any
  408094:	mov	w19, #0x0                   	// #0
  408098:	b	4081ac <portable_changes_add+0x200>
  40809c:	ldr	x0, [sp, #72]
  4080a0:	ldr	x3, [x0]
  4080a4:	ldr	x0, [sp, #64]
  4080a8:	ldr	x0, [x0]
  4080ac:	add	x0, x0, #0x1
  4080b0:	mov	x2, #0x18                  	// #24
  4080b4:	mov	x1, x0
  4080b8:	mov	x0, x3
  4080bc:	bl	4044f0 <reallocarray@plt>
  4080c0:	str	x0, [sp, #88]
  4080c4:	ldr	x0, [sp, #88]
  4080c8:	cmp	x0, #0x0
  4080cc:	b.ne	4080d8 <portable_changes_add+0x12c>  // b.any
  4080d0:	mov	w19, #0xfffffff4            	// #-12
  4080d4:	b	4081ac <portable_changes_add+0x200>
  4080d8:	ldr	x0, [sp, #72]
  4080dc:	ldr	x1, [sp, #88]
  4080e0:	str	x1, [x0]
  4080e4:	ldr	x0, [sp, #48]
  4080e8:	bl	404c00 <strdup@plt>
  4080ec:	str	x0, [sp, #80]
  4080f0:	ldr	x0, [sp, #80]
  4080f4:	cmp	x0, #0x0
  4080f8:	b.ne	408104 <portable_changes_add+0x158>  // b.any
  4080fc:	mov	w19, #0xfffffff4            	// #-12
  408100:	b	4081ac <portable_changes_add+0x200>
  408104:	ldr	x0, [sp, #80]
  408108:	mov	w1, #0x0                   	// #0
  40810c:	bl	404b80 <path_simplify@plt>
  408110:	ldr	x0, [sp, #40]
  408114:	cmp	x0, #0x0
  408118:	b.eq	408148 <portable_changes_add+0x19c>  // b.none
  40811c:	ldr	x0, [sp, #40]
  408120:	bl	404c00 <strdup@plt>
  408124:	str	x0, [sp, #112]
  408128:	ldr	x0, [sp, #112]
  40812c:	cmp	x0, #0x0
  408130:	b.ne	40813c <portable_changes_add+0x190>  // b.any
  408134:	mov	w19, #0xfffffff4            	// #-12
  408138:	b	4081ac <portable_changes_add+0x200>
  40813c:	ldr	x0, [sp, #112]
  408140:	mov	w1, #0x0                   	// #0
  408144:	bl	404b80 <path_simplify@plt>
  408148:	ldr	x0, [sp, #64]
  40814c:	ldr	x1, [x0]
  408150:	add	x2, x1, #0x1
  408154:	ldr	x0, [sp, #64]
  408158:	str	x2, [x0]
  40815c:	mov	x0, x1
  408160:	lsl	x0, x0, #1
  408164:	add	x0, x0, x1
  408168:	lsl	x0, x0, #3
  40816c:	mov	x1, x0
  408170:	ldr	x0, [sp, #88]
  408174:	add	x0, x0, x1
  408178:	ldr	x1, [sp, #80]
  40817c:	str	x1, [sp, #96]
  408180:	str	xzr, [sp, #80]
  408184:	ldr	x2, [sp, #96]
  408188:	ldr	x1, [sp, #112]
  40818c:	str	x1, [sp, #104]
  408190:	str	xzr, [sp, #112]
  408194:	ldr	x1, [sp, #104]
  408198:	ldr	w3, [sp, #60]
  40819c:	str	w3, [x0]
  4081a0:	str	x2, [x0, #8]
  4081a4:	str	x1, [x0, #16]
  4081a8:	mov	w19, #0x0                   	// #0
  4081ac:	add	x0, sp, #0x70
  4081b0:	bl	40511c <freep>
  4081b4:	add	x0, sp, #0x50
  4081b8:	bl	40511c <freep>
  4081bc:	mov	w1, w19
  4081c0:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  4081c4:	add	x0, x0, #0x728
  4081c8:	ldr	x2, [sp, #136]
  4081cc:	ldr	x0, [x0]
  4081d0:	eor	x0, x2, x0
  4081d4:	cmp	x0, #0x0
  4081d8:	b.eq	4081e0 <portable_changes_add+0x234>  // b.none
  4081dc:	bl	404930 <__stack_chk_fail@plt>
  4081e0:	mov	w0, w1
  4081e4:	ldr	x19, [sp, #16]
  4081e8:	ldp	x29, x30, [sp], #144
  4081ec:	ret

00000000004081f0 <portable_changes_add_with_prefix>:
  4081f0:	stp	x29, x30, [sp, #-208]!
  4081f4:	mov	x29, sp
  4081f8:	str	x19, [sp, #16]
  4081fc:	str	x0, [x29, #72]
  408200:	str	x1, [x29, #64]
  408204:	str	w2, [x29, #60]
  408208:	str	x3, [x29, #48]
  40820c:	str	x4, [x29, #40]
  408210:	str	x5, [x29, #32]
  408214:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  408218:	add	x0, x0, #0x728
  40821c:	ldr	x1, [x0]
  408220:	str	x1, [x29, #200]
  408224:	mov	x1, #0x0                   	// #0
  408228:	ldr	x0, [x29, #40]
  40822c:	cmp	x0, #0x0
  408230:	cset	w0, eq  // eq = none
  408234:	and	w0, w0, #0xff
  408238:	and	x0, x0, #0xff
  40823c:	cmp	x0, #0x0
  408240:	b.eq	40826c <portable_changes_add_with_prefix+0x7c>  // b.none
  408244:	adrp	x0, 412000 <_fini+0x50>
  408248:	add	x1, x0, #0xa3
  40824c:	adrp	x0, 413000 <_fini+0x1050>
  408250:	add	x4, x0, #0x2c8
  408254:	mov	w3, #0x28a                 	// #650
  408258:	mov	x2, x1
  40825c:	adrp	x0, 412000 <_fini+0x50>
  408260:	add	x1, x0, #0x298
  408264:	mov	w0, #0x0                   	// #0
  408268:	bl	404670 <log_assert_failed_realm@plt>
  40826c:	ldr	x0, [x29, #72]
  408270:	cmp	x0, #0x0
  408274:	cset	w0, eq  // eq = none
  408278:	and	w1, w0, #0xff
  40827c:	ldr	x0, [x29, #64]
  408280:	cmp	x0, #0x0
  408284:	cset	w0, eq  // eq = none
  408288:	and	w0, w0, #0xff
  40828c:	eor	w0, w1, w0
  408290:	and	w0, w0, #0xff
  408294:	and	x0, x0, #0xff
  408298:	cmp	x0, #0x0
  40829c:	b.eq	4082c8 <portable_changes_add_with_prefix+0xd8>  // b.none
  4082a0:	adrp	x0, 412000 <_fini+0x50>
  4082a4:	add	x1, x0, #0xa3
  4082a8:	adrp	x0, 413000 <_fini+0x1050>
  4082ac:	add	x4, x0, #0x2c8
  4082b0:	mov	w3, #0x28b                 	// #651
  4082b4:	mov	x2, x1
  4082b8:	adrp	x0, 412000 <_fini+0x50>
  4082bc:	add	x1, x0, #0x7c0
  4082c0:	mov	w0, #0x0                   	// #0
  4082c4:	bl	404670 <log_assert_failed_realm@plt>
  4082c8:	ldr	x0, [x29, #72]
  4082cc:	cmp	x0, #0x0
  4082d0:	b.ne	4082dc <portable_changes_add_with_prefix+0xec>  // b.any
  4082d4:	mov	w0, #0x0                   	// #0
  4082d8:	b	40868c <portable_changes_add_with_prefix+0x49c>
  4082dc:	ldr	x0, [x29, #48]
  4082e0:	cmp	x0, #0x0
  4082e4:	b.eq	408674 <portable_changes_add_with_prefix+0x484>  // b.none
  4082e8:	ldr	x0, [x29, #40]
  4082ec:	str	x0, [x29, #88]
  4082f0:	ldr	x0, [x29, #48]
  4082f4:	str	x0, [x29, #136]
  4082f8:	b	408308 <portable_changes_add_with_prefix+0x118>
  4082fc:	ldr	x0, [x29, #88]
  408300:	add	x0, x0, #0x1
  408304:	str	x0, [x29, #88]
  408308:	ldr	x0, [x29, #88]
  40830c:	ldrb	w0, [x0]
  408310:	cmp	w0, #0x2f
  408314:	b.ne	40832c <portable_changes_add_with_prefix+0x13c>  // b.any
  408318:	ldr	x0, [x29, #88]
  40831c:	add	x0, x0, #0x1
  408320:	ldrb	w0, [x0]
  408324:	cmp	w0, #0x2f
  408328:	b.eq	4082fc <portable_changes_add_with_prefix+0x10c>  // b.none
  40832c:	ldr	x0, [x29, #136]
  408330:	bl	405210 <isempty>
  408334:	and	w0, w0, #0xff
  408338:	cmp	w0, #0x0
  40833c:	b.eq	40834c <portable_changes_add_with_prefix+0x15c>  // b.none
  408340:	ldr	x0, [x29, #88]
  408344:	str	x0, [x29, #96]
  408348:	b	4084a0 <portable_changes_add_with_prefix+0x2b0>
  40834c:	ldr	x0, [x29, #136]
  408350:	bl	404df0 <strlen@plt>
  408354:	mov	x19, x0
  408358:	ldr	x0, [x29, #88]
  40835c:	bl	404df0 <strlen@plt>
  408360:	add	x0, x19, x0
  408364:	add	x0, x0, #0x2
  408368:	str	x0, [x29, #144]
  40836c:	ldr	x0, [x29, #144]
  408370:	str	x0, [x29, #152]
  408374:	ldr	x1, [x29, #152]
  408378:	mov	x0, #0x1                   	// #1
  40837c:	bl	405140 <size_multiply_overflow>
  408380:	and	w0, w0, #0xff
  408384:	and	x0, x0, #0xff
  408388:	cmp	x0, #0x0
  40838c:	b.eq	4083b8 <portable_changes_add_with_prefix+0x1c8>  // b.none
  408390:	adrp	x0, 412000 <_fini+0x50>
  408394:	add	x1, x0, #0xa3
  408398:	adrp	x0, 413000 <_fini+0x1050>
  40839c:	add	x4, x0, #0x2c8
  4083a0:	mov	w3, #0x291                 	// #657
  4083a4:	mov	x2, x1
  4083a8:	adrp	x0, 412000 <_fini+0x50>
  4083ac:	add	x1, x0, #0x730
  4083b0:	mov	w0, #0x0                   	// #0
  4083b4:	bl	404670 <log_assert_failed_realm@plt>
  4083b8:	ldr	x0, [x29, #152]
  4083bc:	cmp	x0, #0x400, lsl #12
  4083c0:	cset	w0, hi  // hi = pmore
  4083c4:	and	w0, w0, #0xff
  4083c8:	and	x0, x0, #0xff
  4083cc:	cmp	x0, #0x0
  4083d0:	b.eq	4083fc <portable_changes_add_with_prefix+0x20c>  // b.none
  4083d4:	adrp	x0, 412000 <_fini+0x50>
  4083d8:	add	x1, x0, #0xa3
  4083dc:	adrp	x0, 413000 <_fini+0x1050>
  4083e0:	add	x4, x0, #0x2c8
  4083e4:	mov	w3, #0x291                 	// #657
  4083e8:	mov	x2, x1
  4083ec:	adrp	x0, 412000 <_fini+0x50>
  4083f0:	add	x1, x0, #0x760
  4083f4:	mov	w0, #0x0                   	// #0
  4083f8:	bl	404670 <log_assert_failed_realm@plt>
  4083fc:	ldr	x0, [x29, #152]
  408400:	add	x0, x0, #0xf
  408404:	lsr	x0, x0, #4
  408408:	lsl	x0, x0, #4
  40840c:	sub	sp, sp, x0
  408410:	mov	x0, sp
  408414:	add	x0, x0, #0xf
  408418:	lsr	x0, x0, #4
  40841c:	lsl	x0, x0, #4
  408420:	str	x0, [x29, #160]
  408424:	ldr	x1, [x29, #136]
  408428:	ldr	x0, [x29, #160]
  40842c:	bl	404380 <stpcpy@plt>
  408430:	str	x0, [x29, #104]
  408434:	b	408444 <portable_changes_add_with_prefix+0x254>
  408438:	ldr	x0, [x29, #104]
  40843c:	sub	x0, x0, #0x1
  408440:	str	x0, [x29, #104]
  408444:	ldr	x1, [x29, #104]
  408448:	ldr	x0, [x29, #160]
  40844c:	cmp	x1, x0
  408450:	b.ls	408468 <portable_changes_add_with_prefix+0x278>  // b.plast
  408454:	ldr	x0, [x29, #104]
  408458:	sub	x0, x0, #0x1
  40845c:	ldrb	w0, [x0]
  408460:	cmp	w0, #0x2f
  408464:	b.eq	408438 <portable_changes_add_with_prefix+0x248>  // b.none
  408468:	ldr	x0, [x29, #88]
  40846c:	ldrb	w0, [x0]
  408470:	cmp	w0, #0x2f
  408474:	b.eq	40848c <portable_changes_add_with_prefix+0x29c>  // b.none
  408478:	ldr	x0, [x29, #104]
  40847c:	add	x1, x0, #0x1
  408480:	str	x1, [x29, #104]
  408484:	mov	w1, #0x2f                  	// #47
  408488:	strb	w1, [x0]
  40848c:	ldr	x1, [x29, #88]
  408490:	ldr	x0, [x29, #104]
  408494:	bl	404d70 <strcpy@plt>
  408498:	ldr	x0, [x29, #160]
  40849c:	str	x0, [x29, #96]
  4084a0:	ldr	x0, [x29, #96]
  4084a4:	str	x0, [x29, #40]
  4084a8:	ldr	x0, [x29, #32]
  4084ac:	cmp	x0, #0x0
  4084b0:	b.eq	408674 <portable_changes_add_with_prefix+0x484>  // b.none
  4084b4:	ldr	x0, [x29, #32]
  4084b8:	str	x0, [x29, #112]
  4084bc:	ldr	x0, [x29, #48]
  4084c0:	str	x0, [x29, #168]
  4084c4:	b	4084d4 <portable_changes_add_with_prefix+0x2e4>
  4084c8:	ldr	x0, [x29, #112]
  4084cc:	add	x0, x0, #0x1
  4084d0:	str	x0, [x29, #112]
  4084d4:	ldr	x0, [x29, #112]
  4084d8:	ldrb	w0, [x0]
  4084dc:	cmp	w0, #0x2f
  4084e0:	b.ne	4084f8 <portable_changes_add_with_prefix+0x308>  // b.any
  4084e4:	ldr	x0, [x29, #112]
  4084e8:	add	x0, x0, #0x1
  4084ec:	ldrb	w0, [x0]
  4084f0:	cmp	w0, #0x2f
  4084f4:	b.eq	4084c8 <portable_changes_add_with_prefix+0x2d8>  // b.none
  4084f8:	ldr	x0, [x29, #168]
  4084fc:	bl	405210 <isempty>
  408500:	and	w0, w0, #0xff
  408504:	cmp	w0, #0x0
  408508:	b.eq	408518 <portable_changes_add_with_prefix+0x328>  // b.none
  40850c:	ldr	x0, [x29, #112]
  408510:	str	x0, [x29, #120]
  408514:	b	40866c <portable_changes_add_with_prefix+0x47c>
  408518:	ldr	x0, [x29, #168]
  40851c:	bl	404df0 <strlen@plt>
  408520:	mov	x19, x0
  408524:	ldr	x0, [x29, #112]
  408528:	bl	404df0 <strlen@plt>
  40852c:	add	x0, x19, x0
  408530:	add	x0, x0, #0x2
  408534:	str	x0, [x29, #176]
  408538:	ldr	x0, [x29, #176]
  40853c:	str	x0, [x29, #184]
  408540:	ldr	x1, [x29, #184]
  408544:	mov	x0, #0x1                   	// #1
  408548:	bl	405140 <size_multiply_overflow>
  40854c:	and	w0, w0, #0xff
  408550:	and	x0, x0, #0xff
  408554:	cmp	x0, #0x0
  408558:	b.eq	408584 <portable_changes_add_with_prefix+0x394>  // b.none
  40855c:	adrp	x0, 412000 <_fini+0x50>
  408560:	add	x1, x0, #0xa3
  408564:	adrp	x0, 413000 <_fini+0x1050>
  408568:	add	x4, x0, #0x2c8
  40856c:	mov	w3, #0x294                 	// #660
  408570:	mov	x2, x1
  408574:	adrp	x0, 412000 <_fini+0x50>
  408578:	add	x1, x0, #0x730
  40857c:	mov	w0, #0x0                   	// #0
  408580:	bl	404670 <log_assert_failed_realm@plt>
  408584:	ldr	x0, [x29, #184]
  408588:	cmp	x0, #0x400, lsl #12
  40858c:	cset	w0, hi  // hi = pmore
  408590:	and	w0, w0, #0xff
  408594:	and	x0, x0, #0xff
  408598:	cmp	x0, #0x0
  40859c:	b.eq	4085c8 <portable_changes_add_with_prefix+0x3d8>  // b.none
  4085a0:	adrp	x0, 412000 <_fini+0x50>
  4085a4:	add	x1, x0, #0xa3
  4085a8:	adrp	x0, 413000 <_fini+0x1050>
  4085ac:	add	x4, x0, #0x2c8
  4085b0:	mov	w3, #0x294                 	// #660
  4085b4:	mov	x2, x1
  4085b8:	adrp	x0, 412000 <_fini+0x50>
  4085bc:	add	x1, x0, #0x760
  4085c0:	mov	w0, #0x0                   	// #0
  4085c4:	bl	404670 <log_assert_failed_realm@plt>
  4085c8:	ldr	x0, [x29, #184]
  4085cc:	add	x0, x0, #0xf
  4085d0:	lsr	x0, x0, #4
  4085d4:	lsl	x0, x0, #4
  4085d8:	sub	sp, sp, x0
  4085dc:	mov	x0, sp
  4085e0:	add	x0, x0, #0xf
  4085e4:	lsr	x0, x0, #4
  4085e8:	lsl	x0, x0, #4
  4085ec:	str	x0, [x29, #192]
  4085f0:	ldr	x1, [x29, #168]
  4085f4:	ldr	x0, [x29, #192]
  4085f8:	bl	404380 <stpcpy@plt>
  4085fc:	str	x0, [x29, #128]
  408600:	b	408610 <portable_changes_add_with_prefix+0x420>
  408604:	ldr	x0, [x29, #128]
  408608:	sub	x0, x0, #0x1
  40860c:	str	x0, [x29, #128]
  408610:	ldr	x1, [x29, #128]
  408614:	ldr	x0, [x29, #192]
  408618:	cmp	x1, x0
  40861c:	b.ls	408634 <portable_changes_add_with_prefix+0x444>  // b.plast
  408620:	ldr	x0, [x29, #128]
  408624:	sub	x0, x0, #0x1
  408628:	ldrb	w0, [x0]
  40862c:	cmp	w0, #0x2f
  408630:	b.eq	408604 <portable_changes_add_with_prefix+0x414>  // b.none
  408634:	ldr	x0, [x29, #112]
  408638:	ldrb	w0, [x0]
  40863c:	cmp	w0, #0x2f
  408640:	b.eq	408658 <portable_changes_add_with_prefix+0x468>  // b.none
  408644:	ldr	x0, [x29, #128]
  408648:	add	x1, x0, #0x1
  40864c:	str	x1, [x29, #128]
  408650:	mov	w1, #0x2f                  	// #47
  408654:	strb	w1, [x0]
  408658:	ldr	x1, [x29, #112]
  40865c:	ldr	x0, [x29, #128]
  408660:	bl	404d70 <strcpy@plt>
  408664:	ldr	x0, [x29, #192]
  408668:	str	x0, [x29, #120]
  40866c:	ldr	x0, [x29, #120]
  408670:	str	x0, [x29, #32]
  408674:	ldr	x4, [x29, #32]
  408678:	ldr	x3, [x29, #40]
  40867c:	ldr	w2, [x29, #60]
  408680:	ldr	x1, [x29, #64]
  408684:	ldr	x0, [x29, #72]
  408688:	bl	407fac <portable_changes_add>
  40868c:	mov	w1, w0
  408690:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  408694:	add	x0, x0, #0x728
  408698:	ldr	x2, [x29, #200]
  40869c:	ldr	x0, [x0]
  4086a0:	eor	x0, x2, x0
  4086a4:	cmp	x0, #0x0
  4086a8:	b.eq	4086b0 <portable_changes_add_with_prefix+0x4c0>  // b.none
  4086ac:	bl	404930 <__stack_chk_fail@plt>
  4086b0:	mov	w0, w1
  4086b4:	mov	sp, x29
  4086b8:	ldr	x19, [sp, #16]
  4086bc:	ldp	x29, x30, [sp], #208
  4086c0:	ret

00000000004086c4 <portable_changes_free>:
  4086c4:	stp	x29, x30, [sp, #-48]!
  4086c8:	mov	x29, sp
  4086cc:	str	x0, [sp, #24]
  4086d0:	str	x1, [sp, #16]
  4086d4:	ldr	x0, [sp, #24]
  4086d8:	cmp	x0, #0x0
  4086dc:	cset	w0, eq  // eq = none
  4086e0:	and	w0, w0, #0xff
  4086e4:	and	x0, x0, #0xff
  4086e8:	cmp	x0, #0x0
  4086ec:	b.eq	408734 <portable_changes_free+0x70>  // b.none
  4086f0:	ldr	x0, [sp, #16]
  4086f4:	cmp	x0, #0x0
  4086f8:	cset	w0, ne  // ne = any
  4086fc:	and	w0, w0, #0xff
  408700:	and	x0, x0, #0xff
  408704:	cmp	x0, #0x0
  408708:	b.eq	408734 <portable_changes_free+0x70>  // b.none
  40870c:	adrp	x0, 412000 <_fini+0x50>
  408710:	add	x1, x0, #0xa3
  408714:	adrp	x0, 413000 <_fini+0x1050>
  408718:	add	x4, x0, #0x2f0
  40871c:	mov	w3, #0x29d                 	// #669
  408720:	mov	x2, x1
  408724:	adrp	x0, 412000 <_fini+0x50>
  408728:	add	x1, x0, #0x7d8
  40872c:	mov	w0, #0x0                   	// #0
  408730:	bl	404670 <log_assert_failed_realm@plt>
  408734:	str	xzr, [sp, #40]
  408738:	b	408798 <portable_changes_free+0xd4>
  40873c:	ldr	x1, [sp, #40]
  408740:	mov	x0, x1
  408744:	lsl	x0, x0, #1
  408748:	add	x0, x0, x1
  40874c:	lsl	x0, x0, #3
  408750:	mov	x1, x0
  408754:	ldr	x0, [sp, #24]
  408758:	add	x0, x0, x1
  40875c:	ldr	x0, [x0, #8]
  408760:	bl	404cc0 <free@plt>
  408764:	ldr	x1, [sp, #40]
  408768:	mov	x0, x1
  40876c:	lsl	x0, x0, #1
  408770:	add	x0, x0, x1
  408774:	lsl	x0, x0, #3
  408778:	mov	x1, x0
  40877c:	ldr	x0, [sp, #24]
  408780:	add	x0, x0, x1
  408784:	ldr	x0, [x0, #16]
  408788:	bl	404cc0 <free@plt>
  40878c:	ldr	x0, [sp, #40]
  408790:	add	x0, x0, #0x1
  408794:	str	x0, [sp, #40]
  408798:	ldr	x1, [sp, #40]
  40879c:	ldr	x0, [sp, #16]
  4087a0:	cmp	x1, x0
  4087a4:	b.cc	40873c <portable_changes_free+0x78>  // b.lo, b.ul, b.last
  4087a8:	ldr	x0, [sp, #24]
  4087ac:	bl	404cc0 <free@plt>
  4087b0:	nop
  4087b4:	ldp	x29, x30, [sp], #48
  4087b8:	ret

00000000004087bc <install_chroot_dropin>:
  4087bc:	sub	sp, sp, #0xc0
  4087c0:	stp	x29, x30, [sp, #32]
  4087c4:	add	x29, sp, #0x20
  4087c8:	stp	x19, x20, [sp, #48]
  4087cc:	str	x0, [sp, #120]
  4087d0:	str	w1, [sp, #116]
  4087d4:	str	x2, [sp, #104]
  4087d8:	str	x3, [sp, #96]
  4087dc:	str	x4, [sp, #88]
  4087e0:	str	x5, [sp, #80]
  4087e4:	str	x6, [sp, #72]
  4087e8:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  4087ec:	add	x0, x0, #0x728
  4087f0:	ldr	x1, [x0]
  4087f4:	str	x1, [sp, #184]
  4087f8:	mov	x1, #0x0                   	// #0
  4087fc:	str	xzr, [sp, #160]
  408800:	str	xzr, [sp, #168]
  408804:	ldr	x0, [sp, #120]
  408808:	cmp	x0, #0x0
  40880c:	cset	w0, eq  // eq = none
  408810:	and	w0, w0, #0xff
  408814:	and	x0, x0, #0xff
  408818:	cmp	x0, #0x0
  40881c:	b.eq	408848 <install_chroot_dropin+0x8c>  // b.none
  408820:	adrp	x0, 412000 <_fini+0x50>
  408824:	add	x1, x0, #0xa3
  408828:	adrp	x0, 413000 <_fini+0x1050>
  40882c:	add	x4, x0, #0x308
  408830:	mov	w3, #0x2b3                 	// #691
  408834:	mov	x2, x1
  408838:	adrp	x0, 412000 <_fini+0x50>
  40883c:	add	x1, x0, #0x7f8
  408840:	mov	w0, #0x0                   	// #0
  408844:	bl	404670 <log_assert_failed_realm@plt>
  408848:	ldr	x0, [sp, #104]
  40884c:	cmp	x0, #0x0
  408850:	cset	w0, eq  // eq = none
  408854:	and	w0, w0, #0xff
  408858:	and	x0, x0, #0xff
  40885c:	cmp	x0, #0x0
  408860:	b.eq	40888c <install_chroot_dropin+0xd0>  // b.none
  408864:	adrp	x0, 412000 <_fini+0x50>
  408868:	add	x1, x0, #0xa3
  40886c:	adrp	x0, 413000 <_fini+0x1050>
  408870:	add	x4, x0, #0x308
  408874:	mov	w3, #0x2b4                 	// #692
  408878:	mov	x2, x1
  40887c:	adrp	x0, 412000 <_fini+0x50>
  408880:	add	x1, x0, #0x808
  408884:	mov	w0, #0x0                   	// #0
  408888:	bl	404670 <log_assert_failed_realm@plt>
  40888c:	ldr	x0, [sp, #96]
  408890:	cmp	x0, #0x0
  408894:	cset	w0, eq  // eq = none
  408898:	and	w0, w0, #0xff
  40889c:	and	x0, x0, #0xff
  4088a0:	cmp	x0, #0x0
  4088a4:	b.eq	4088d0 <install_chroot_dropin+0x114>  // b.none
  4088a8:	adrp	x0, 412000 <_fini+0x50>
  4088ac:	add	x1, x0, #0xa3
  4088b0:	adrp	x0, 413000 <_fini+0x1050>
  4088b4:	add	x4, x0, #0x308
  4088b8:	mov	w3, #0x2b5                 	// #693
  4088bc:	mov	x2, x1
  4088c0:	adrp	x0, 412000 <_fini+0x50>
  4088c4:	add	x1, x0, #0x810
  4088c8:	mov	w0, #0x0                   	// #0
  4088cc:	bl	404670 <log_assert_failed_realm@plt>
  4088d0:	mov	x2, #0xffffffffffffffff    	// #-1
  4088d4:	adrp	x0, 412000 <_fini+0x50>
  4088d8:	add	x1, x0, #0x820
  4088dc:	ldr	x0, [sp, #96]
  4088e0:	bl	404980 <path_join_internal@plt>
  4088e4:	str	x0, [sp, #168]
  4088e8:	ldr	x0, [sp, #168]
  4088ec:	cmp	x0, #0x0
  4088f0:	b.ne	4088fc <install_chroot_dropin+0x140>  // b.any
  4088f4:	mov	w19, #0xfffffff4            	// #-12
  4088f8:	b	408af4 <install_chroot_dropin+0x338>
  4088fc:	mov	x3, #0x0                   	// #0
  408900:	adrp	x0, 412000 <_fini+0x50>
  408904:	add	x2, x0, #0x838
  408908:	ldr	x1, [sp, #120]
  40890c:	adrp	x0, 412000 <_fini+0x50>
  408910:	add	x0, x0, #0x850
  408914:	bl	4045d0 <strjoin_real@plt>
  408918:	str	x0, [sp, #160]
  40891c:	ldr	x0, [sp, #160]
  408920:	cmp	x0, #0x0
  408924:	b.ne	408930 <install_chroot_dropin+0x174>  // b.any
  408928:	mov	w19, #0xfffffff4            	// #-12
  40892c:	b	408af4 <install_chroot_dropin+0x338>
  408930:	ldr	x0, [sp, #104]
  408934:	add	x2, x0, #0x10
  408938:	adrp	x0, 411000 <operation_free+0xac>
  40893c:	add	x1, x0, #0xfd0
  408940:	mov	x0, x2
  408944:	bl	404b60 <endswith@plt>
  408948:	cmp	x0, #0x0
  40894c:	b.eq	4089fc <install_chroot_dropin+0x240>  // b.none
  408950:	strb	wzr, [sp, #143]
  408954:	ldr	w0, [sp, #116]
  408958:	cmp	w0, #0x1
  40895c:	b.hi	408968 <install_chroot_dropin+0x1ac>  // b.pmore
  408960:	mov	w0, #0x1                   	// #1
  408964:	strb	w0, [sp, #143]
  408968:	nop
  40896c:	ldrb	w0, [sp, #143]
  408970:	cmp	w0, #0x0
  408974:	b.eq	408984 <install_chroot_dropin+0x1c8>  // b.none
  408978:	adrp	x0, 412000 <_fini+0x50>
  40897c:	add	x19, x0, #0x870
  408980:	b	40898c <install_chroot_dropin+0x1d0>
  408984:	adrp	x0, 412000 <_fini+0x50>
  408988:	add	x19, x0, #0x880
  40898c:	ldr	x0, [sp, #120]
  408990:	bl	404960 <basename@plt>
  408994:	mov	x20, x0
  408998:	ldr	x0, [sp, #120]
  40899c:	bl	404960 <basename@plt>
  4089a0:	mov	x1, x0
  4089a4:	add	x8, sp, #0xa0
  4089a8:	str	xzr, [sp, #16]
  4089ac:	adrp	x0, 412000 <_fini+0x50>
  4089b0:	add	x0, x0, #0x8d8
  4089b4:	str	x0, [sp, #8]
  4089b8:	str	x1, [sp]
  4089bc:	adrp	x0, 412000 <_fini+0x50>
  4089c0:	add	x7, x0, #0x890
  4089c4:	mov	x6, x20
  4089c8:	adrp	x0, 412000 <_fini+0x50>
  4089cc:	add	x5, x0, #0x8b0
  4089d0:	ldr	x4, [sp, #120]
  4089d4:	mov	x3, x19
  4089d8:	adrp	x0, 412000 <_fini+0x50>
  4089dc:	add	x2, x0, #0x8c8
  4089e0:	mov	x1, #0x0                   	// #0
  4089e4:	mov	x0, x8
  4089e8:	bl	4048d0 <strextend_with_separator@plt>
  4089ec:	cmp	x0, #0x0
  4089f0:	b.ne	4089fc <install_chroot_dropin+0x240>  // b.any
  4089f4:	mov	w19, #0xfffffff4            	// #-12
  4089f8:	b	408af4 <install_chroot_dropin+0x338>
  4089fc:	ldr	x0, [sp, #168]
  408a00:	ldr	x1, [sp, #160]
  408a04:	mov	w2, #0x3                   	// #3
  408a08:	bl	4054a8 <write_string_file>
  408a0c:	str	w0, [sp, #144]
  408a10:	ldr	w0, [sp, #144]
  408a14:	cmp	w0, #0x0
  408a18:	b.ge	408ab0 <install_chroot_dropin+0x2f4>  // b.tcont
  408a1c:	mov	w0, #0x7                   	// #7
  408a20:	str	w0, [sp, #148]
  408a24:	ldr	w0, [sp, #144]
  408a28:	str	w0, [sp, #152]
  408a2c:	str	wzr, [sp, #156]
  408a30:	ldr	w0, [sp, #156]
  408a34:	bl	404e50 <log_get_max_level_realm@plt>
  408a38:	mov	w1, w0
  408a3c:	ldr	w0, [sp, #148]
  408a40:	and	w0, w0, #0x7
  408a44:	cmp	w1, w0
  408a48:	b.lt	408a98 <install_chroot_dropin+0x2dc>  // b.tstop
  408a4c:	ldr	w0, [sp, #156]
  408a50:	lsl	w1, w0, #10
  408a54:	ldr	w0, [sp, #148]
  408a58:	orr	w7, w1, w0
  408a5c:	adrp	x0, 412000 <_fini+0x50>
  408a60:	add	x1, x0, #0xa3
  408a64:	ldr	x0, [sp, #168]
  408a68:	mov	x6, x0
  408a6c:	adrp	x0, 412000 <_fini+0x50>
  408a70:	add	x5, x0, #0x8e0
  408a74:	adrp	x0, 413000 <_fini+0x1050>
  408a78:	add	x4, x0, #0x320
  408a7c:	mov	w3, #0x2cc                 	// #716
  408a80:	mov	x2, x1
  408a84:	ldr	w1, [sp, #152]
  408a88:	mov	w0, w7
  408a8c:	bl	404a80 <log_internal_realm@plt>
  408a90:	mov	w19, w0
  408a94:	b	408af4 <install_chroot_dropin+0x338>
  408a98:	ldr	w0, [sp, #152]
  408a9c:	cmp	w0, #0x0
  408aa0:	cneg	w0, w0, lt  // lt = tstop
  408aa4:	and	w0, w0, #0xff
  408aa8:	neg	w19, w0
  408aac:	b	408af4 <install_chroot_dropin+0x338>
  408ab0:	ldr	x0, [sp, #168]
  408ab4:	mov	x4, #0x0                   	// #0
  408ab8:	mov	x3, x0
  408abc:	mov	w2, #0x3                   	// #3
  408ac0:	ldr	x1, [sp, #72]
  408ac4:	ldr	x0, [sp, #80]
  408ac8:	bl	407fac <portable_changes_add>
  408acc:	ldr	x0, [sp, #88]
  408ad0:	cmp	x0, #0x0
  408ad4:	b.eq	408af0 <install_chroot_dropin+0x334>  // b.none
  408ad8:	ldr	x0, [sp, #168]
  408adc:	str	x0, [sp, #176]
  408ae0:	str	xzr, [sp, #168]
  408ae4:	ldr	x1, [sp, #176]
  408ae8:	ldr	x0, [sp, #88]
  408aec:	str	x1, [x0]
  408af0:	mov	w19, #0x0                   	// #0
  408af4:	add	x0, sp, #0xa8
  408af8:	bl	40511c <freep>
  408afc:	add	x0, sp, #0xa0
  408b00:	bl	40511c <freep>
  408b04:	mov	w1, w19
  408b08:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  408b0c:	add	x0, x0, #0x728
  408b10:	ldr	x2, [sp, #184]
  408b14:	ldr	x0, [x0]
  408b18:	eor	x0, x2, x0
  408b1c:	cmp	x0, #0x0
  408b20:	b.eq	408b28 <install_chroot_dropin+0x36c>  // b.none
  408b24:	bl	404930 <__stack_chk_fail@plt>
  408b28:	mov	w0, w1
  408b2c:	ldp	x19, x20, [sp, #48]
  408b30:	ldp	x29, x30, [sp, #32]
  408b34:	add	sp, sp, #0xc0
  408b38:	ret

0000000000408b3c <find_profile>:
  408b3c:	stp	x29, x30, [sp, #-112]!
  408b40:	mov	x29, sp
  408b44:	stp	x19, x20, [sp, #16]
  408b48:	str	x0, [sp, #56]
  408b4c:	str	x1, [sp, #48]
  408b50:	str	x2, [sp, #40]
  408b54:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  408b58:	add	x0, x0, #0x728
  408b5c:	ldr	x1, [x0]
  408b60:	str	x1, [sp, #104]
  408b64:	mov	x1, #0x0                   	// #0
  408b68:	ldr	x0, [sp, #56]
  408b6c:	cmp	x0, #0x0
  408b70:	cset	w0, eq  // eq = none
  408b74:	and	w0, w0, #0xff
  408b78:	and	x0, x0, #0xff
  408b7c:	cmp	x0, #0x0
  408b80:	b.eq	408bac <find_profile+0x70>  // b.none
  408b84:	adrp	x0, 412000 <_fini+0x50>
  408b88:	add	x1, x0, #0xa3
  408b8c:	adrp	x0, 413000 <_fini+0x1050>
  408b90:	add	x4, x0, #0x338
  408b94:	mov	w3, #0x2d9                 	// #729
  408b98:	mov	x2, x1
  408b9c:	adrp	x0, 412000 <_fini+0x50>
  408ba0:	add	x1, x0, #0xf0
  408ba4:	mov	w0, #0x0                   	// #0
  408ba8:	bl	404670 <log_assert_failed_realm@plt>
  408bac:	ldr	x0, [sp, #40]
  408bb0:	cmp	x0, #0x0
  408bb4:	cset	w0, eq  // eq = none
  408bb8:	and	w0, w0, #0xff
  408bbc:	and	x0, x0, #0xff
  408bc0:	cmp	x0, #0x0
  408bc4:	b.eq	408bf0 <find_profile+0xb4>  // b.none
  408bc8:	adrp	x0, 412000 <_fini+0x50>
  408bcc:	add	x1, x0, #0xa3
  408bd0:	adrp	x0, 413000 <_fini+0x1050>
  408bd4:	add	x4, x0, #0x338
  408bd8:	mov	w3, #0x2da                 	// #730
  408bdc:	mov	x2, x1
  408be0:	adrp	x0, 412000 <_fini+0x50>
  408be4:	add	x1, x0, #0x900
  408be8:	mov	w0, #0x0                   	// #0
  408bec:	bl	404670 <log_assert_failed_realm@plt>
  408bf0:	mov	w1, #0x2e                  	// #46
  408bf4:	ldr	x0, [sp, #48]
  408bf8:	bl	404620 <strrchr@plt>
  408bfc:	str	x0, [sp, #88]
  408c00:	ldr	x0, [sp, #88]
  408c04:	cmp	x0, #0x0
  408c08:	cset	w0, eq  // eq = none
  408c0c:	and	w0, w0, #0xff
  408c10:	and	x0, x0, #0xff
  408c14:	cmp	x0, #0x0
  408c18:	b.eq	408c44 <find_profile+0x108>  // b.none
  408c1c:	adrp	x0, 412000 <_fini+0x50>
  408c20:	add	x1, x0, #0xa3
  408c24:	adrp	x0, 413000 <_fini+0x1050>
  408c28:	add	x4, x0, #0x338
  408c2c:	mov	w3, #0x2dc                 	// #732
  408c30:	mov	x2, x1
  408c34:	adrp	x0, 412000 <_fini+0x50>
  408c38:	add	x1, x0, #0x908
  408c3c:	mov	w0, #0x0                   	// #0
  408c40:	bl	404670 <log_assert_failed_realm@plt>
  408c44:	adrp	x0, 413000 <_fini+0x1050>
  408c48:	add	x0, x0, #0x40
  408c4c:	str	x0, [sp, #80]
  408c50:	b	408d3c <find_profile+0x200>
  408c54:	ldr	x0, [sp, #88]
  408c58:	add	x1, x0, #0x1
  408c5c:	mov	x6, #0x0                   	// #0
  408c60:	adrp	x0, 412000 <_fini+0x50>
  408c64:	add	x5, x0, #0x928
  408c68:	mov	x4, x1
  408c6c:	adrp	x0, 412000 <_fini+0x50>
  408c70:	add	x3, x0, #0x930
  408c74:	ldr	x2, [sp, #56]
  408c78:	adrp	x0, 412000 <_fini+0x50>
  408c7c:	add	x1, x0, #0x930
  408c80:	ldr	x0, [sp, #80]
  408c84:	bl	4045d0 <strjoin_real@plt>
  408c88:	str	x0, [sp, #72]
  408c8c:	ldr	x0, [sp, #72]
  408c90:	cmp	x0, #0x0
  408c94:	b.ne	408ca4 <find_profile+0x168>  // b.any
  408c98:	mov	w19, #0xfffffff4            	// #-12
  408c9c:	mov	w20, #0x0                   	// #0
  408ca0:	b	408d10 <find_profile+0x1d4>
  408ca4:	ldr	x0, [sp, #72]
  408ca8:	mov	w3, #0x100                 	// #256
  408cac:	mov	w2, #0x0                   	// #0
  408cb0:	mov	x1, x0
  408cb4:	mov	w0, #0xffffff9c            	// #-100
  408cb8:	bl	404690 <faccessat@plt>
  408cbc:	cmp	w0, #0x0
  408cc0:	b.lt	408ce8 <find_profile+0x1ac>  // b.tstop
  408cc4:	ldr	x0, [sp, #72]
  408cc8:	str	x0, [sp, #96]
  408ccc:	str	xzr, [sp, #72]
  408cd0:	ldr	x1, [sp, #96]
  408cd4:	ldr	x0, [sp, #40]
  408cd8:	str	x1, [x0]
  408cdc:	mov	w19, #0x0                   	// #0
  408ce0:	mov	w20, #0x0                   	// #0
  408ce4:	b	408d10 <find_profile+0x1d4>
  408ce8:	bl	404820 <__errno_location@plt>
  408cec:	ldr	w0, [x0]
  408cf0:	cmp	w0, #0x2
  408cf4:	b.eq	408d0c <find_profile+0x1d0>  // b.none
  408cf8:	bl	404820 <__errno_location@plt>
  408cfc:	ldr	w0, [x0]
  408d00:	neg	w19, w0
  408d04:	mov	w20, #0x0                   	// #0
  408d08:	b	408d10 <find_profile+0x1d4>
  408d0c:	mov	w20, #0x1                   	// #1
  408d10:	add	x0, sp, #0x48
  408d14:	bl	40511c <freep>
  408d18:	cmp	w20, #0x1
  408d1c:	b.ne	408d5c <find_profile+0x220>  // b.any
  408d20:	ldr	x0, [sp, #80]
  408d24:	bl	404df0 <strlen@plt>
  408d28:	mov	x1, x0
  408d2c:	ldr	x0, [sp, #80]
  408d30:	add	x0, x0, x1
  408d34:	add	x0, x0, #0x1
  408d38:	str	x0, [sp, #80]
  408d3c:	ldr	x0, [sp, #80]
  408d40:	cmp	x0, #0x0
  408d44:	b.eq	408d58 <find_profile+0x21c>  // b.none
  408d48:	ldr	x0, [sp, #80]
  408d4c:	ldrb	w0, [x0]
  408d50:	cmp	w0, #0x0
  408d54:	b.ne	408c54 <find_profile+0x118>  // b.any
  408d58:	mov	w19, #0xfffffffe            	// #-2
  408d5c:	mov	w1, w19
  408d60:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  408d64:	add	x0, x0, #0x728
  408d68:	ldr	x2, [sp, #104]
  408d6c:	ldr	x0, [x0]
  408d70:	eor	x0, x2, x0
  408d74:	cmp	x0, #0x0
  408d78:	b.eq	408d80 <find_profile+0x244>  // b.none
  408d7c:	bl	404930 <__stack_chk_fail@plt>
  408d80:	mov	w0, w1
  408d84:	ldp	x19, x20, [sp, #16]
  408d88:	ldp	x29, x30, [sp], #112
  408d8c:	ret

0000000000408d90 <install_profile_dropin>:
  408d90:	sub	sp, sp, #0xe0
  408d94:	stp	x29, x30, [sp, #16]
  408d98:	add	x29, sp, #0x10
  408d9c:	stp	x19, x20, [sp, #32]
  408da0:	str	x21, [sp, #48]
  408da4:	str	x0, [sp, #120]
  408da8:	str	x1, [sp, #112]
  408dac:	str	x2, [sp, #104]
  408db0:	str	x3, [sp, #96]
  408db4:	str	w4, [sp, #92]
  408db8:	str	x5, [sp, #80]
  408dbc:	str	x6, [sp, #72]
  408dc0:	str	x7, [sp, #64]
  408dc4:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  408dc8:	add	x0, x0, #0x728
  408dcc:	ldr	x1, [x0]
  408dd0:	str	x1, [sp, #216]
  408dd4:	mov	x1, #0x0                   	// #0
  408dd8:	str	xzr, [sp, #192]
  408ddc:	str	xzr, [sp, #200]
  408de0:	ldr	x0, [sp, #120]
  408de4:	cmp	x0, #0x0
  408de8:	cset	w0, eq  // eq = none
  408dec:	and	w0, w0, #0xff
  408df0:	and	x0, x0, #0xff
  408df4:	cmp	x0, #0x0
  408df8:	b.eq	408e24 <install_profile_dropin+0x94>  // b.none
  408dfc:	adrp	x0, 412000 <_fini+0x50>
  408e00:	add	x1, x0, #0xa3
  408e04:	adrp	x0, 413000 <_fini+0x1050>
  408e08:	add	x4, x0, #0x348
  408e0c:	mov	w3, #0x2fe                 	// #766
  408e10:	mov	x2, x1
  408e14:	adrp	x0, 412000 <_fini+0x50>
  408e18:	add	x1, x0, #0x7f8
  408e1c:	mov	w0, #0x0                   	// #0
  408e20:	bl	404670 <log_assert_failed_realm@plt>
  408e24:	ldr	x0, [sp, #112]
  408e28:	cmp	x0, #0x0
  408e2c:	cset	w0, eq  // eq = none
  408e30:	and	w0, w0, #0xff
  408e34:	and	x0, x0, #0xff
  408e38:	cmp	x0, #0x0
  408e3c:	b.eq	408e68 <install_profile_dropin+0xd8>  // b.none
  408e40:	adrp	x0, 412000 <_fini+0x50>
  408e44:	add	x1, x0, #0xa3
  408e48:	adrp	x0, 413000 <_fini+0x1050>
  408e4c:	add	x4, x0, #0x348
  408e50:	mov	w3, #0x2ff                 	// #767
  408e54:	mov	x2, x1
  408e58:	adrp	x0, 412000 <_fini+0x50>
  408e5c:	add	x1, x0, #0x808
  408e60:	mov	w0, #0x0                   	// #0
  408e64:	bl	404670 <log_assert_failed_realm@plt>
  408e68:	ldr	x0, [sp, #104]
  408e6c:	cmp	x0, #0x0
  408e70:	cset	w0, eq  // eq = none
  408e74:	and	w0, w0, #0xff
  408e78:	and	x0, x0, #0xff
  408e7c:	cmp	x0, #0x0
  408e80:	b.eq	408eac <install_profile_dropin+0x11c>  // b.none
  408e84:	adrp	x0, 412000 <_fini+0x50>
  408e88:	add	x1, x0, #0xa3
  408e8c:	adrp	x0, 413000 <_fini+0x1050>
  408e90:	add	x4, x0, #0x348
  408e94:	mov	w3, #0x300                 	// #768
  408e98:	mov	x2, x1
  408e9c:	adrp	x0, 412000 <_fini+0x50>
  408ea0:	add	x1, x0, #0x810
  408ea4:	mov	w0, #0x0                   	// #0
  408ea8:	bl	404670 <log_assert_failed_realm@plt>
  408eac:	ldr	x0, [sp, #96]
  408eb0:	cmp	x0, #0x0
  408eb4:	b.ne	408ec0 <install_profile_dropin+0x130>  // b.any
  408eb8:	mov	w19, #0x0                   	// #0
  408ebc:	b	409258 <install_profile_dropin+0x4c8>
  408ec0:	ldr	x0, [sp, #112]
  408ec4:	add	x0, x0, #0x10
  408ec8:	add	x1, sp, #0xc8
  408ecc:	mov	x2, x1
  408ed0:	mov	x1, x0
  408ed4:	ldr	x0, [sp, #96]
  408ed8:	bl	408b3c <find_profile>
  408edc:	str	w0, [sp, #140]
  408ee0:	ldr	w0, [sp, #140]
  408ee4:	cmp	w0, #0x0
  408ee8:	b.ge	409014 <install_profile_dropin+0x284>  // b.tcont
  408eec:	ldr	w0, [sp, #140]
  408ef0:	cmn	w0, #0x2
  408ef4:	b.eq	408f8c <install_profile_dropin+0x1fc>  // b.none
  408ef8:	mov	w0, #0x7                   	// #7
  408efc:	str	w0, [sp, #180]
  408f00:	bl	404820 <__errno_location@plt>
  408f04:	ldr	w0, [x0]
  408f08:	str	w0, [sp, #184]
  408f0c:	str	wzr, [sp, #188]
  408f10:	ldr	w0, [sp, #188]
  408f14:	bl	404e50 <log_get_max_level_realm@plt>
  408f18:	mov	w1, w0
  408f1c:	ldr	w0, [sp, #180]
  408f20:	and	w0, w0, #0x7
  408f24:	cmp	w1, w0
  408f28:	b.lt	408f74 <install_profile_dropin+0x1e4>  // b.tstop
  408f2c:	ldr	w0, [sp, #188]
  408f30:	lsl	w1, w0, #10
  408f34:	ldr	w0, [sp, #180]
  408f38:	orr	w7, w1, w0
  408f3c:	adrp	x0, 412000 <_fini+0x50>
  408f40:	add	x1, x0, #0xa3
  408f44:	ldr	x6, [sp, #96]
  408f48:	adrp	x0, 412000 <_fini+0x50>
  408f4c:	add	x5, x0, #0x938
  408f50:	adrp	x0, 413000 <_fini+0x1050>
  408f54:	add	x4, x0, #0x360
  408f58:	mov	w3, #0x308                 	// #776
  408f5c:	mov	x2, x1
  408f60:	ldr	w1, [sp, #184]
  408f64:	mov	w0, w7
  408f68:	bl	404a80 <log_internal_realm@plt>
  408f6c:	mov	w19, w0
  408f70:	b	409258 <install_profile_dropin+0x4c8>
  408f74:	ldr	w0, [sp, #184]
  408f78:	cmp	w0, #0x0
  408f7c:	cneg	w0, w0, lt  // lt = tstop
  408f80:	and	w0, w0, #0xff
  408f84:	neg	w19, w0
  408f88:	b	409258 <install_profile_dropin+0x4c8>
  408f8c:	mov	w0, #0x7                   	// #7
  408f90:	str	w0, [sp, #168]
  408f94:	bl	404820 <__errno_location@plt>
  408f98:	ldr	w0, [x0]
  408f9c:	str	w0, [sp, #172]
  408fa0:	str	wzr, [sp, #176]
  408fa4:	ldr	w0, [sp, #176]
  408fa8:	bl	404e50 <log_get_max_level_realm@plt>
  408fac:	mov	w1, w0
  408fb0:	ldr	w0, [sp, #168]
  408fb4:	and	w0, w0, #0x7
  408fb8:	cmp	w1, w0
  408fbc:	b.lt	409004 <install_profile_dropin+0x274>  // b.tstop
  408fc0:	ldr	w0, [sp, #176]
  408fc4:	lsl	w1, w0, #10
  408fc8:	ldr	w0, [sp, #168]
  408fcc:	orr	w7, w1, w0
  408fd0:	adrp	x0, 412000 <_fini+0x50>
  408fd4:	add	x1, x0, #0xa3
  408fd8:	ldr	x6, [sp, #96]
  408fdc:	adrp	x0, 412000 <_fini+0x50>
  408fe0:	add	x5, x0, #0x960
  408fe4:	adrp	x0, 413000 <_fini+0x1050>
  408fe8:	add	x4, x0, #0x360
  408fec:	mov	w3, #0x30a                 	// #778
  408ff0:	mov	x2, x1
  408ff4:	ldr	w1, [sp, #172]
  408ff8:	mov	w0, w7
  408ffc:	bl	404a80 <log_internal_realm@plt>
  409000:	b	40900c <install_profile_dropin+0x27c>
  409004:	ldr	w0, [sp, #172]
  409008:	cmp	w0, #0x0
  40900c:	mov	w19, #0x0                   	// #0
  409010:	b	409258 <install_profile_dropin+0x4c8>
  409014:	mov	x2, #0xffffffffffffffff    	// #-1
  409018:	adrp	x0, 412000 <_fini+0x50>
  40901c:	add	x1, x0, #0x998
  409020:	ldr	x0, [sp, #104]
  409024:	bl	404980 <path_join_internal@plt>
  409028:	str	x0, [sp, #192]
  40902c:	ldr	x0, [sp, #192]
  409030:	cmp	x0, #0x0
  409034:	b.ne	409040 <install_profile_dropin+0x2b0>  // b.any
  409038:	mov	w19, #0xfffffff4            	// #-12
  40903c:	b	409258 <install_profile_dropin+0x4c8>
  409040:	ldr	w0, [sp, #92]
  409044:	and	w0, w0, #0x1
  409048:	cmp	w0, #0x0
  40904c:	b.eq	40914c <install_profile_dropin+0x3bc>  // b.none
  409050:	ldr	x0, [sp, #200]
  409054:	ldr	x1, [sp, #192]
  409058:	mov	w5, #0x1                   	// #1
  40905c:	mov	w4, #0x0                   	// #0
  409060:	mov	w3, #0x0                   	// #0
  409064:	mov	w2, #0x1a4                 	// #420
  409068:	bl	40506c <copy_file_atomic>
  40906c:	str	w0, [sp, #140]
  409070:	ldr	w0, [sp, #140]
  409074:	cmp	w0, #0x0
  409078:	b.ge	409128 <install_profile_dropin+0x398>  // b.tcont
  40907c:	mov	w0, #0x7                   	// #7
  409080:	str	w0, [sp, #156]
  409084:	ldr	w0, [sp, #140]
  409088:	str	w0, [sp, #160]
  40908c:	str	wzr, [sp, #164]
  409090:	ldr	w0, [sp, #164]
  409094:	bl	404e50 <log_get_max_level_realm@plt>
  409098:	mov	w1, w0
  40909c:	ldr	w0, [sp, #156]
  4090a0:	and	w0, w0, #0x7
  4090a4:	cmp	w1, w0
  4090a8:	b.lt	409110 <install_profile_dropin+0x380>  // b.tstop
  4090ac:	ldr	w0, [sp, #164]
  4090b0:	lsl	w1, w0, #10
  4090b4:	ldr	w0, [sp, #156]
  4090b8:	orr	w19, w1, w0
  4090bc:	adrp	x0, 412000 <_fini+0x50>
  4090c0:	add	x20, x0, #0xa3
  4090c4:	ldr	x21, [sp, #200]
  4090c8:	mov	w0, #0x7                   	// #7
  4090cc:	bl	404e40 <special_glyph@plt>
  4090d0:	mov	x1, x0
  4090d4:	ldr	x0, [sp, #192]
  4090d8:	str	x0, [sp]
  4090dc:	mov	x7, x1
  4090e0:	mov	x6, x21
  4090e4:	adrp	x0, 412000 <_fini+0x50>
  4090e8:	add	x5, x0, #0x9a8
  4090ec:	adrp	x0, 413000 <_fini+0x1050>
  4090f0:	add	x4, x0, #0x360
  4090f4:	mov	w3, #0x316                 	// #790
  4090f8:	mov	x2, x20
  4090fc:	ldr	w1, [sp, #160]
  409100:	mov	w0, w19
  409104:	bl	404a80 <log_internal_realm@plt>
  409108:	mov	w19, w0
  40910c:	b	409258 <install_profile_dropin+0x4c8>
  409110:	ldr	w0, [sp, #160]
  409114:	cmp	w0, #0x0
  409118:	cneg	w0, w0, lt  // lt = tstop
  40911c:	and	w0, w0, #0xff
  409120:	neg	w19, w0
  409124:	b	409258 <install_profile_dropin+0x4c8>
  409128:	ldr	x0, [sp, #192]
  40912c:	ldr	x1, [sp, #200]
  409130:	mov	x4, x1
  409134:	mov	x3, x0
  409138:	mov	w2, #0x0                   	// #0
  40913c:	ldr	x1, [sp, #64]
  409140:	ldr	x0, [sp, #72]
  409144:	bl	407fac <portable_changes_add>
  409148:	b	409230 <install_profile_dropin+0x4a0>
  40914c:	ldr	x0, [sp, #200]
  409150:	ldr	x1, [sp, #192]
  409154:	bl	404590 <symlink@plt>
  409158:	cmp	w0, #0x0
  40915c:	b.ge	409210 <install_profile_dropin+0x480>  // b.tcont
  409160:	mov	w0, #0x7                   	// #7
  409164:	str	w0, [sp, #144]
  409168:	bl	404820 <__errno_location@plt>
  40916c:	ldr	w0, [x0]
  409170:	str	w0, [sp, #148]
  409174:	str	wzr, [sp, #152]
  409178:	ldr	w0, [sp, #152]
  40917c:	bl	404e50 <log_get_max_level_realm@plt>
  409180:	mov	w1, w0
  409184:	ldr	w0, [sp, #144]
  409188:	and	w0, w0, #0x7
  40918c:	cmp	w1, w0
  409190:	b.lt	4091f8 <install_profile_dropin+0x468>  // b.tstop
  409194:	ldr	w0, [sp, #152]
  409198:	lsl	w1, w0, #10
  40919c:	ldr	w0, [sp, #144]
  4091a0:	orr	w19, w1, w0
  4091a4:	adrp	x0, 412000 <_fini+0x50>
  4091a8:	add	x20, x0, #0xa3
  4091ac:	ldr	x21, [sp, #200]
  4091b0:	mov	w0, #0x7                   	// #7
  4091b4:	bl	404e40 <special_glyph@plt>
  4091b8:	mov	x1, x0
  4091bc:	ldr	x0, [sp, #192]
  4091c0:	str	x0, [sp]
  4091c4:	mov	x7, x1
  4091c8:	mov	x6, x21
  4091cc:	adrp	x0, 412000 <_fini+0x50>
  4091d0:	add	x5, x0, #0x9c8
  4091d4:	adrp	x0, 413000 <_fini+0x1050>
  4091d8:	add	x4, x0, #0x360
  4091dc:	mov	w3, #0x31d                 	// #797
  4091e0:	mov	x2, x20
  4091e4:	ldr	w1, [sp, #148]
  4091e8:	mov	w0, w19
  4091ec:	bl	404a80 <log_internal_realm@plt>
  4091f0:	mov	w19, w0
  4091f4:	b	409258 <install_profile_dropin+0x4c8>
  4091f8:	ldr	w0, [sp, #148]
  4091fc:	cmp	w0, #0x0
  409200:	cneg	w0, w0, lt  // lt = tstop
  409204:	and	w0, w0, #0xff
  409208:	neg	w19, w0
  40920c:	b	409258 <install_profile_dropin+0x4c8>
  409210:	ldr	x0, [sp, #192]
  409214:	ldr	x1, [sp, #200]
  409218:	mov	x4, x1
  40921c:	mov	x3, x0
  409220:	mov	w2, #0x1                   	// #1
  409224:	ldr	x1, [sp, #64]
  409228:	ldr	x0, [sp, #72]
  40922c:	bl	407fac <portable_changes_add>
  409230:	ldr	x0, [sp, #80]
  409234:	cmp	x0, #0x0
  409238:	b.eq	409254 <install_profile_dropin+0x4c4>  // b.none
  40923c:	ldr	x0, [sp, #192]
  409240:	str	x0, [sp, #208]
  409244:	str	xzr, [sp, #192]
  409248:	ldr	x1, [sp, #208]
  40924c:	ldr	x0, [sp, #80]
  409250:	str	x1, [x0]
  409254:	mov	w19, #0x0                   	// #0
  409258:	add	x0, sp, #0xc8
  40925c:	bl	40511c <freep>
  409260:	add	x0, sp, #0xc0
  409264:	bl	40511c <freep>
  409268:	mov	w1, w19
  40926c:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  409270:	add	x0, x0, #0x728
  409274:	ldr	x2, [sp, #216]
  409278:	ldr	x0, [x0]
  40927c:	eor	x0, x2, x0
  409280:	cmp	x0, #0x0
  409284:	b.eq	40928c <install_profile_dropin+0x4fc>  // b.none
  409288:	bl	404930 <__stack_chk_fail@plt>
  40928c:	mov	w0, w1
  409290:	ldp	x19, x20, [sp, #32]
  409294:	ldr	x21, [sp, #48]
  409298:	ldp	x29, x30, [sp, #16]
  40929c:	add	sp, sp, #0xe0
  4092a0:	ret

00000000004092a4 <attached_path>:
  4092a4:	stp	x29, x30, [sp, #-48]!
  4092a8:	mov	x29, sp
  4092ac:	str	x0, [sp, #24]
  4092b0:	str	w1, [sp, #20]
  4092b4:	ldr	x0, [sp, #24]
  4092b8:	cmp	x0, #0x0
  4092bc:	cset	w0, eq  // eq = none
  4092c0:	and	w0, w0, #0xff
  4092c4:	and	x0, x0, #0xff
  4092c8:	cmp	x0, #0x0
  4092cc:	b.eq	4092f8 <attached_path+0x54>  // b.none
  4092d0:	adrp	x0, 412000 <_fini+0x50>
  4092d4:	add	x1, x0, #0xa3
  4092d8:	adrp	x0, 413000 <_fini+0x1050>
  4092dc:	add	x4, x0, #0x378
  4092e0:	mov	w3, #0x32b                 	// #811
  4092e4:	mov	x2, x1
  4092e8:	adrp	x0, 412000 <_fini+0x50>
  4092ec:	add	x1, x0, #0x9e8
  4092f0:	mov	w0, #0x0                   	// #0
  4092f4:	bl	404670 <log_assert_failed_realm@plt>
  4092f8:	ldr	w0, [sp, #20]
  4092fc:	and	w0, w0, #0x4
  409300:	cmp	w0, #0x0
  409304:	b.eq	409318 <attached_path+0x74>  // b.none
  409308:	ldr	x0, [sp, #24]
  40930c:	ldr	x0, [x0, #32]
  409310:	str	x0, [sp, #40]
  409314:	b	409324 <attached_path+0x80>
  409318:	ldr	x0, [sp, #24]
  40931c:	ldr	x0, [x0, #24]
  409320:	str	x0, [sp, #40]
  409324:	ldr	x0, [sp, #40]
  409328:	cmp	x0, #0x0
  40932c:	cset	w0, eq  // eq = none
  409330:	and	w0, w0, #0xff
  409334:	and	x0, x0, #0xff
  409338:	cmp	x0, #0x0
  40933c:	b.eq	409368 <attached_path+0xc4>  // b.none
  409340:	adrp	x0, 412000 <_fini+0x50>
  409344:	add	x1, x0, #0xa3
  409348:	adrp	x0, 413000 <_fini+0x1050>
  40934c:	add	x4, x0, #0x378
  409350:	mov	w3, #0x332                 	// #818
  409354:	mov	x2, x1
  409358:	adrp	x0, 412000 <_fini+0x50>
  40935c:	add	x1, x0, #0x128
  409360:	mov	w0, #0x0                   	// #0
  409364:	bl	404670 <log_assert_failed_realm@plt>
  409368:	ldr	x0, [sp, #40]
  40936c:	ldp	x29, x30, [sp], #48
  409370:	ret

0000000000409374 <attach_unit_file>:
  409374:	stp	x29, x30, [sp, #-288]!
  409378:	mov	x29, sp
  40937c:	stp	x19, x20, [sp, #16]
  409380:	str	x0, [x29, #88]
  409384:	str	x1, [x29, #80]
  409388:	str	w2, [x29, #76]
  40938c:	str	x3, [x29, #64]
  409390:	str	x4, [x29, #56]
  409394:	str	w5, [x29, #72]
  409398:	str	x6, [x29, #48]
  40939c:	str	x7, [x29, #40]
  4093a0:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  4093a4:	add	x0, x0, #0x728
  4093a8:	ldr	x1, [x0]
  4093ac:	str	x1, [x29, #280]
  4093b0:	mov	x1, #0x0                   	// #0
  4093b4:	str	xzr, [x29, #176]
  4093b8:	str	xzr, [x29, #184]
  4093bc:	str	xzr, [x29, #192]
  4093c0:	ldr	x0, [x29, #88]
  4093c4:	cmp	x0, #0x0
  4093c8:	cset	w0, eq  // eq = none
  4093cc:	and	w0, w0, #0xff
  4093d0:	and	x0, x0, #0xff
  4093d4:	cmp	x0, #0x0
  4093d8:	b.eq	409404 <attach_unit_file+0x90>  // b.none
  4093dc:	adrp	x0, 412000 <_fini+0x50>
  4093e0:	add	x1, x0, #0xa3
  4093e4:	adrp	x0, 413000 <_fini+0x1050>
  4093e8:	add	x4, x0, #0x388
  4093ec:	mov	w3, #0x345                 	// #837
  4093f0:	mov	x2, x1
  4093f4:	adrp	x0, 412000 <_fini+0x50>
  4093f8:	add	x1, x0, #0x9e8
  4093fc:	mov	w0, #0x0                   	// #0
  409400:	bl	404670 <log_assert_failed_realm@plt>
  409404:	ldr	x0, [x29, #80]
  409408:	cmp	x0, #0x0
  40940c:	cset	w0, eq  // eq = none
  409410:	and	w0, w0, #0xff
  409414:	and	x0, x0, #0xff
  409418:	cmp	x0, #0x0
  40941c:	b.eq	409448 <attach_unit_file+0xd4>  // b.none
  409420:	adrp	x0, 412000 <_fini+0x50>
  409424:	add	x1, x0, #0xa3
  409428:	adrp	x0, 413000 <_fini+0x1050>
  40942c:	add	x4, x0, #0x388
  409430:	mov	w3, #0x346                 	// #838
  409434:	mov	x2, x1
  409438:	adrp	x0, 412000 <_fini+0x50>
  40943c:	add	x1, x0, #0x7f8
  409440:	mov	w0, #0x0                   	// #0
  409444:	bl	404670 <log_assert_failed_realm@plt>
  409448:	ldr	x0, [x29, #64]
  40944c:	cmp	x0, #0x0
  409450:	cset	w0, eq  // eq = none
  409454:	and	w0, w0, #0xff
  409458:	and	x0, x0, #0xff
  40945c:	cmp	x0, #0x0
  409460:	b.eq	40948c <attach_unit_file+0x118>  // b.none
  409464:	adrp	x0, 412000 <_fini+0x50>
  409468:	add	x1, x0, #0xa3
  40946c:	adrp	x0, 413000 <_fini+0x1050>
  409470:	add	x4, x0, #0x388
  409474:	mov	w3, #0x347                 	// #839
  409478:	mov	x2, x1
  40947c:	adrp	x0, 412000 <_fini+0x50>
  409480:	add	x1, x0, #0x808
  409484:	mov	w0, #0x0                   	// #0
  409488:	bl	404670 <log_assert_failed_realm@plt>
  40948c:	strb	wzr, [x29, #107]
  409490:	ldr	x0, [x29, #64]
  409494:	ldrb	w0, [x0, #16]
  409498:	cmp	w0, #0x0
  40949c:	b.eq	4094a8 <attach_unit_file+0x134>  // b.none
  4094a0:	cmp	w0, #0x2f
  4094a4:	b.ne	4094b0 <attach_unit_file+0x13c>  // b.any
  4094a8:	mov	w0, #0x1                   	// #1
  4094ac:	strb	w0, [x29, #107]
  4094b0:	nop
  4094b4:	ldrb	w0, [x29, #107]
  4094b8:	and	x0, x0, #0xff
  4094bc:	cmp	x0, #0x0
  4094c0:	b.eq	4094ec <attach_unit_file+0x178>  // b.none
  4094c4:	adrp	x0, 412000 <_fini+0x50>
  4094c8:	add	x1, x0, #0xa3
  4094cc:	adrp	x0, 413000 <_fini+0x1050>
  4094d0:	add	x4, x0, #0x388
  4094d4:	mov	w3, #0x348                 	// #840
  4094d8:	mov	x2, x1
  4094dc:	adrp	x0, 412000 <_fini+0x50>
  4094e0:	add	x1, x0, #0x9f0
  4094e4:	mov	w0, #0x0                   	// #0
  4094e8:	bl	404670 <log_assert_failed_realm@plt>
  4094ec:	ldr	w1, [x29, #72]
  4094f0:	ldr	x0, [x29, #88]
  4094f4:	bl	4092a4 <attached_path>
  4094f8:	str	x0, [x29, #232]
  4094fc:	mov	w1, #0x1ed                 	// #493
  409500:	ldr	x0, [x29, #232]
  409504:	bl	404e00 <mkdir_parents@plt>
  409508:	mov	w1, #0x1ed                 	// #493
  40950c:	ldr	x0, [x29, #232]
  409510:	bl	404c70 <mkdir@plt>
  409514:	cmp	w0, #0x0
  409518:	b.ge	40953c <attach_unit_file+0x1c8>  // b.tcont
  40951c:	bl	404820 <__errno_location@plt>
  409520:	ldr	w0, [x0]
  409524:	cmp	w0, #0x11
  409528:	b.eq	409554 <attach_unit_file+0x1e0>  // b.none
  40952c:	bl	404820 <__errno_location@plt>
  409530:	ldr	w0, [x0]
  409534:	neg	w19, w0
  409538:	b	409c70 <attach_unit_file+0x8fc>
  40953c:	mov	x4, #0x0                   	// #0
  409540:	ldr	x3, [x29, #232]
  409544:	mov	w2, #0x4                   	// #4
  409548:	ldr	x1, [x29, #40]
  40954c:	ldr	x0, [x29, #48]
  409550:	bl	407fac <portable_changes_add>
  409554:	ldr	x0, [x29, #64]
  409558:	add	x0, x0, #0x10
  40955c:	str	x0, [x29, #208]
  409560:	ldr	x0, [x29, #232]
  409564:	str	x0, [x29, #240]
  409568:	b	409578 <attach_unit_file+0x204>
  40956c:	ldr	x0, [x29, #208]
  409570:	add	x0, x0, #0x1
  409574:	str	x0, [x29, #208]
  409578:	ldr	x0, [x29, #208]
  40957c:	ldrb	w0, [x0]
  409580:	cmp	w0, #0x2f
  409584:	b.ne	40959c <attach_unit_file+0x228>  // b.any
  409588:	ldr	x0, [x29, #208]
  40958c:	add	x0, x0, #0x1
  409590:	ldrb	w0, [x0]
  409594:	cmp	w0, #0x2f
  409598:	b.eq	40956c <attach_unit_file+0x1f8>  // b.none
  40959c:	ldr	x0, [x29, #240]
  4095a0:	bl	405210 <isempty>
  4095a4:	and	w0, w0, #0xff
  4095a8:	cmp	w0, #0x0
  4095ac:	b.eq	4095bc <attach_unit_file+0x248>  // b.none
  4095b0:	ldr	x0, [x29, #208]
  4095b4:	str	x0, [x29, #216]
  4095b8:	b	409710 <attach_unit_file+0x39c>
  4095bc:	ldr	x0, [x29, #240]
  4095c0:	bl	404df0 <strlen@plt>
  4095c4:	mov	x20, x0
  4095c8:	ldr	x0, [x29, #208]
  4095cc:	bl	404df0 <strlen@plt>
  4095d0:	add	x0, x20, x0
  4095d4:	add	x0, x0, #0x2
  4095d8:	str	x0, [x29, #248]
  4095dc:	ldr	x0, [x29, #248]
  4095e0:	str	x0, [x29, #256]
  4095e4:	ldr	x1, [x29, #256]
  4095e8:	mov	x0, #0x1                   	// #1
  4095ec:	bl	405140 <size_multiply_overflow>
  4095f0:	and	w0, w0, #0xff
  4095f4:	and	x0, x0, #0xff
  4095f8:	cmp	x0, #0x0
  4095fc:	b.eq	409628 <attach_unit_file+0x2b4>  // b.none
  409600:	adrp	x0, 412000 <_fini+0x50>
  409604:	add	x1, x0, #0xa3
  409608:	adrp	x0, 413000 <_fini+0x1050>
  40960c:	add	x4, x0, #0x388
  409610:	mov	w3, #0x353                 	// #851
  409614:	mov	x2, x1
  409618:	adrp	x0, 412000 <_fini+0x50>
  40961c:	add	x1, x0, #0x730
  409620:	mov	w0, #0x0                   	// #0
  409624:	bl	404670 <log_assert_failed_realm@plt>
  409628:	ldr	x0, [x29, #256]
  40962c:	cmp	x0, #0x400, lsl #12
  409630:	cset	w0, hi  // hi = pmore
  409634:	and	w0, w0, #0xff
  409638:	and	x0, x0, #0xff
  40963c:	cmp	x0, #0x0
  409640:	b.eq	40966c <attach_unit_file+0x2f8>  // b.none
  409644:	adrp	x0, 412000 <_fini+0x50>
  409648:	add	x1, x0, #0xa3
  40964c:	adrp	x0, 413000 <_fini+0x1050>
  409650:	add	x4, x0, #0x388
  409654:	mov	w3, #0x353                 	// #851
  409658:	mov	x2, x1
  40965c:	adrp	x0, 412000 <_fini+0x50>
  409660:	add	x1, x0, #0x760
  409664:	mov	w0, #0x0                   	// #0
  409668:	bl	404670 <log_assert_failed_realm@plt>
  40966c:	ldr	x0, [x29, #256]
  409670:	add	x0, x0, #0xf
  409674:	lsr	x0, x0, #4
  409678:	lsl	x0, x0, #4
  40967c:	sub	sp, sp, x0
  409680:	mov	x0, sp
  409684:	add	x0, x0, #0xf
  409688:	lsr	x0, x0, #4
  40968c:	lsl	x0, x0, #4
  409690:	str	x0, [x29, #264]
  409694:	ldr	x1, [x29, #240]
  409698:	ldr	x0, [x29, #264]
  40969c:	bl	404380 <stpcpy@plt>
  4096a0:	str	x0, [x29, #224]
  4096a4:	b	4096b4 <attach_unit_file+0x340>
  4096a8:	ldr	x0, [x29, #224]
  4096ac:	sub	x0, x0, #0x1
  4096b0:	str	x0, [x29, #224]
  4096b4:	ldr	x1, [x29, #224]
  4096b8:	ldr	x0, [x29, #264]
  4096bc:	cmp	x1, x0
  4096c0:	b.ls	4096d8 <attach_unit_file+0x364>  // b.plast
  4096c4:	ldr	x0, [x29, #224]
  4096c8:	sub	x0, x0, #0x1
  4096cc:	ldrb	w0, [x0]
  4096d0:	cmp	w0, #0x2f
  4096d4:	b.eq	4096a8 <attach_unit_file+0x334>  // b.none
  4096d8:	ldr	x0, [x29, #208]
  4096dc:	ldrb	w0, [x0]
  4096e0:	cmp	w0, #0x2f
  4096e4:	b.eq	4096fc <attach_unit_file+0x388>  // b.none
  4096e8:	ldr	x0, [x29, #224]
  4096ec:	add	x1, x0, #0x1
  4096f0:	str	x1, [x29, #224]
  4096f4:	mov	w1, #0x2f                  	// #47
  4096f8:	strb	w1, [x0]
  4096fc:	ldr	x1, [x29, #208]
  409700:	ldr	x0, [x29, #224]
  409704:	bl	404d70 <strcpy@plt>
  409708:	ldr	x0, [x29, #264]
  40970c:	str	x0, [x29, #216]
  409710:	ldr	x0, [x29, #216]
  409714:	str	x0, [x29, #272]
  409718:	mov	x2, #0x0                   	// #0
  40971c:	adrp	x0, 412000 <_fini+0x50>
  409720:	add	x1, x0, #0xa10
  409724:	ldr	x0, [x29, #272]
  409728:	bl	4045d0 <strjoin_real@plt>
  40972c:	str	x0, [x29, #192]
  409730:	ldr	x0, [x29, #192]
  409734:	cmp	x0, #0x0
  409738:	b.ne	409744 <attach_unit_file+0x3d0>  // b.any
  40973c:	mov	w19, #0xfffffff4            	// #-12
  409740:	b	409c70 <attach_unit_file+0x8fc>
  409744:	ldr	x0, [x29, #192]
  409748:	mov	w1, #0x1ed                 	// #493
  40974c:	bl	404c70 <mkdir@plt>
  409750:	cmp	w0, #0x0
  409754:	b.ge	409778 <attach_unit_file+0x404>  // b.tcont
  409758:	bl	404820 <__errno_location@plt>
  40975c:	ldr	w0, [x0]
  409760:	cmp	w0, #0x11
  409764:	b.eq	409794 <attach_unit_file+0x420>  // b.none
  409768:	bl	404820 <__errno_location@plt>
  40976c:	ldr	w0, [x0]
  409770:	neg	w19, w0
  409774:	b	409c70 <attach_unit_file+0x8fc>
  409778:	ldr	x0, [x29, #192]
  40977c:	mov	x4, #0x0                   	// #0
  409780:	mov	x3, x0
  409784:	mov	w2, #0x4                   	// #4
  409788:	ldr	x1, [x29, #40]
  40978c:	ldr	x0, [x29, #48]
  409790:	bl	407fac <portable_changes_add>
  409794:	ldr	x0, [x29, #192]
  409798:	add	x1, x29, #0xb0
  40979c:	ldr	x6, [x29, #40]
  4097a0:	ldr	x5, [x29, #48]
  4097a4:	mov	x4, x1
  4097a8:	mov	x3, x0
  4097ac:	ldr	x2, [x29, #64]
  4097b0:	ldr	w1, [x29, #76]
  4097b4:	ldr	x0, [x29, #80]
  4097b8:	bl	4087bc <install_chroot_dropin>
  4097bc:	str	w0, [x29, #112]
  4097c0:	ldr	w0, [x29, #112]
  4097c4:	cmp	w0, #0x0
  4097c8:	b.ge	4097d4 <attach_unit_file+0x460>  // b.tcont
  4097cc:	ldr	w19, [x29, #112]
  4097d0:	b	409c70 <attach_unit_file+0x8fc>
  4097d4:	ldr	x0, [x29, #192]
  4097d8:	add	x1, x29, #0xb8
  4097dc:	ldr	x7, [x29, #40]
  4097e0:	ldr	x6, [x29, #48]
  4097e4:	mov	x5, x1
  4097e8:	ldr	w4, [x29, #72]
  4097ec:	ldr	x3, [x29, #56]
  4097f0:	mov	x2, x0
  4097f4:	ldr	x1, [x29, #64]
  4097f8:	ldr	x0, [x29, #80]
  4097fc:	bl	408d90 <install_profile_dropin>
  409800:	str	w0, [x29, #112]
  409804:	ldr	w0, [x29, #112]
  409808:	cmp	w0, #0x0
  40980c:	b.ge	409818 <attach_unit_file+0x4a4>  // b.tcont
  409810:	ldr	w19, [x29, #112]
  409814:	b	409c70 <attach_unit_file+0x8fc>
  409818:	ldr	w0, [x29, #72]
  40981c:	and	w0, w0, #0x2
  409820:	cmp	w0, #0x0
  409824:	b.eq	409908 <attach_unit_file+0x594>  // b.none
  409828:	ldr	x0, [x29, #64]
  40982c:	ldr	x0, [x0, #8]
  409830:	cmp	x0, #0x0
  409834:	b.eq	409908 <attach_unit_file+0x594>  // b.none
  409838:	ldr	x0, [x29, #64]
  40983c:	ldr	x0, [x0, #8]
  409840:	ldr	x1, [x29, #272]
  409844:	bl	404590 <symlink@plt>
  409848:	cmp	w0, #0x0
  40984c:	b.ge	4098e4 <attach_unit_file+0x570>  // b.tcont
  409850:	mov	w0, #0x7                   	// #7
  409854:	str	w0, [x29, #116]
  409858:	bl	404820 <__errno_location@plt>
  40985c:	ldr	w0, [x0]
  409860:	str	w0, [x29, #120]
  409864:	str	wzr, [x29, #124]
  409868:	ldr	w0, [x29, #124]
  40986c:	bl	404e50 <log_get_max_level_realm@plt>
  409870:	mov	w1, w0
  409874:	ldr	w0, [x29, #116]
  409878:	and	w0, w0, #0x7
  40987c:	cmp	w1, w0
  409880:	b.lt	4098cc <attach_unit_file+0x558>  // b.tstop
  409884:	ldr	w0, [x29, #124]
  409888:	lsl	w1, w0, #10
  40988c:	ldr	w0, [x29, #116]
  409890:	orr	w7, w1, w0
  409894:	adrp	x0, 412000 <_fini+0x50>
  409898:	add	x1, x0, #0xa3
  40989c:	ldr	x6, [x29, #272]
  4098a0:	adrp	x0, 412000 <_fini+0x50>
  4098a4:	add	x5, x0, #0xa18
  4098a8:	adrp	x0, 413000 <_fini+0x1050>
  4098ac:	add	x4, x0, #0x3a0
  4098b0:	mov	w3, #0x36d                 	// #877
  4098b4:	mov	x2, x1
  4098b8:	ldr	w1, [x29, #120]
  4098bc:	mov	w0, w7
  4098c0:	bl	404a80 <log_internal_realm@plt>
  4098c4:	mov	w19, w0
  4098c8:	b	409c70 <attach_unit_file+0x8fc>
  4098cc:	ldr	w0, [x29, #120]
  4098d0:	cmp	w0, #0x0
  4098d4:	cneg	w0, w0, lt  // lt = tstop
  4098d8:	and	w0, w0, #0xff
  4098dc:	neg	w19, w0
  4098e0:	b	409c70 <attach_unit_file+0x8fc>
  4098e4:	ldr	x0, [x29, #64]
  4098e8:	ldr	x0, [x0, #8]
  4098ec:	mov	x4, x0
  4098f0:	ldr	x3, [x29, #272]
  4098f4:	mov	w2, #0x1                   	// #1
  4098f8:	ldr	x1, [x29, #40]
  4098fc:	ldr	x0, [x29, #48]
  409900:	bl	407fac <portable_changes_add>
  409904:	b	409c48 <attach_unit_file+0x8d4>
  409908:	str	xzr, [x29, #200]
  40990c:	mov	w0, #0xffffffff            	// #-1
  409910:	str	w0, [x29, #108]
  409914:	add	x0, x29, #0xc8
  409918:	mov	x2, x0
  40991c:	mov	w1, #0x1                   	// #1
  409920:	movk	w1, #0x8, lsl #16
  409924:	ldr	x0, [x29, #232]
  409928:	bl	404410 <open_tmpfile_linkable@plt>
  40992c:	str	w0, [x29, #108]
  409930:	ldr	w0, [x29, #108]
  409934:	cmp	w0, #0x0
  409938:	b.ge	4099d0 <attach_unit_file+0x65c>  // b.tcont
  40993c:	mov	w0, #0x7                   	// #7
  409940:	str	w0, [x29, #164]
  409944:	ldr	w0, [x29, #108]
  409948:	str	w0, [x29, #168]
  40994c:	str	wzr, [x29, #172]
  409950:	ldr	w0, [x29, #172]
  409954:	bl	404e50 <log_get_max_level_realm@plt>
  409958:	mov	w1, w0
  40995c:	ldr	w0, [x29, #164]
  409960:	and	w0, w0, #0x7
  409964:	cmp	w1, w0
  409968:	b.lt	4099b4 <attach_unit_file+0x640>  // b.tstop
  40996c:	ldr	w0, [x29, #172]
  409970:	lsl	w1, w0, #10
  409974:	ldr	w0, [x29, #164]
  409978:	orr	w7, w1, w0
  40997c:	adrp	x0, 412000 <_fini+0x50>
  409980:	add	x1, x0, #0xa3
  409984:	ldr	x6, [x29, #272]
  409988:	adrp	x0, 412000 <_fini+0x50>
  40998c:	add	x5, x0, #0xa40
  409990:	adrp	x0, 413000 <_fini+0x1050>
  409994:	add	x4, x0, #0x3a0
  409998:	mov	w3, #0x377                 	// #887
  40999c:	mov	x2, x1
  4099a0:	ldr	w1, [x29, #168]
  4099a4:	mov	w0, w7
  4099a8:	bl	404a80 <log_internal_realm@plt>
  4099ac:	mov	w19, w0
  4099b0:	b	4099c8 <attach_unit_file+0x654>
  4099b4:	ldr	w0, [x29, #168]
  4099b8:	cmp	w0, #0x0
  4099bc:	cneg	w0, w0, lt  // lt = tstop
  4099c0:	and	w0, w0, #0xff
  4099c4:	neg	w19, w0
  4099c8:	mov	w20, #0x0                   	// #0
  4099cc:	b	409c1c <attach_unit_file+0x8a8>
  4099d0:	ldr	x0, [x29, #64]
  4099d4:	ldr	w0, [x0]
  4099d8:	ldr	w1, [x29, #108]
  4099dc:	mov	w3, #0x1                   	// #1
  4099e0:	mov	x2, #0xffffffffffffffff    	// #-1
  4099e4:	bl	4050b8 <copy_bytes>
  4099e8:	str	w0, [x29, #112]
  4099ec:	ldr	w0, [x29, #112]
  4099f0:	cmp	w0, #0x0
  4099f4:	b.ge	409a8c <attach_unit_file+0x718>  // b.tcont
  4099f8:	mov	w0, #0x7                   	// #7
  4099fc:	str	w0, [x29, #152]
  409a00:	ldr	w0, [x29, #112]
  409a04:	str	w0, [x29, #156]
  409a08:	str	wzr, [x29, #160]
  409a0c:	ldr	w0, [x29, #160]
  409a10:	bl	404e50 <log_get_max_level_realm@plt>
  409a14:	mov	w1, w0
  409a18:	ldr	w0, [x29, #152]
  409a1c:	and	w0, w0, #0x7
  409a20:	cmp	w1, w0
  409a24:	b.lt	409a70 <attach_unit_file+0x6fc>  // b.tstop
  409a28:	ldr	w0, [x29, #160]
  409a2c:	lsl	w1, w0, #10
  409a30:	ldr	w0, [x29, #152]
  409a34:	orr	w7, w1, w0
  409a38:	adrp	x0, 412000 <_fini+0x50>
  409a3c:	add	x1, x0, #0xa3
  409a40:	ldr	x6, [x29, #272]
  409a44:	adrp	x0, 412000 <_fini+0x50>
  409a48:	add	x5, x0, #0xa68
  409a4c:	adrp	x0, 413000 <_fini+0x1050>
  409a50:	add	x4, x0, #0x3a0
  409a54:	mov	w3, #0x37b                 	// #891
  409a58:	mov	x2, x1
  409a5c:	ldr	w1, [x29, #156]
  409a60:	mov	w0, w7
  409a64:	bl	404a80 <log_internal_realm@plt>
  409a68:	mov	w19, w0
  409a6c:	b	409a84 <attach_unit_file+0x710>
  409a70:	ldr	w0, [x29, #156]
  409a74:	cmp	w0, #0x0
  409a78:	cneg	w0, w0, lt  // lt = tstop
  409a7c:	and	w0, w0, #0xff
  409a80:	neg	w19, w0
  409a84:	mov	w20, #0x0                   	// #0
  409a88:	b	409c1c <attach_unit_file+0x8a8>
  409a8c:	ldr	w0, [x29, #108]
  409a90:	mov	w1, #0x1a4                 	// #420
  409a94:	bl	404370 <fchmod@plt>
  409a98:	cmp	w0, #0x0
  409a9c:	b.ge	409b38 <attach_unit_file+0x7c4>  // b.tcont
  409aa0:	mov	w0, #0x7                   	// #7
  409aa4:	str	w0, [x29, #140]
  409aa8:	bl	404820 <__errno_location@plt>
  409aac:	ldr	w0, [x0]
  409ab0:	str	w0, [x29, #144]
  409ab4:	str	wzr, [x29, #148]
  409ab8:	ldr	w0, [x29, #148]
  409abc:	bl	404e50 <log_get_max_level_realm@plt>
  409ac0:	mov	w1, w0
  409ac4:	ldr	w0, [x29, #140]
  409ac8:	and	w0, w0, #0x7
  409acc:	cmp	w1, w0
  409ad0:	b.lt	409b1c <attach_unit_file+0x7a8>  // b.tstop
  409ad4:	ldr	w0, [x29, #148]
  409ad8:	lsl	w1, w0, #10
  409adc:	ldr	w0, [x29, #140]
  409ae0:	orr	w7, w1, w0
  409ae4:	adrp	x0, 412000 <_fini+0x50>
  409ae8:	add	x1, x0, #0xa3
  409aec:	ldr	x6, [x29, #272]
  409af0:	adrp	x0, 412000 <_fini+0x50>
  409af4:	add	x5, x0, #0xa90
  409af8:	adrp	x0, 413000 <_fini+0x1050>
  409afc:	add	x4, x0, #0x3a0
  409b00:	mov	w3, #0x37e                 	// #894
  409b04:	mov	x2, x1
  409b08:	ldr	w1, [x29, #144]
  409b0c:	mov	w0, w7
  409b10:	bl	404a80 <log_internal_realm@plt>
  409b14:	mov	w19, w0
  409b18:	b	409b30 <attach_unit_file+0x7bc>
  409b1c:	ldr	w0, [x29, #144]
  409b20:	cmp	w0, #0x0
  409b24:	cneg	w0, w0, lt  // lt = tstop
  409b28:	and	w0, w0, #0xff
  409b2c:	neg	w19, w0
  409b30:	mov	w20, #0x0                   	// #0
  409b34:	b	409c1c <attach_unit_file+0x8a8>
  409b38:	ldr	w0, [x29, #108]
  409b3c:	ldr	x1, [x29, #200]
  409b40:	ldr	x2, [x29, #272]
  409b44:	bl	4046e0 <link_tmpfile@plt>
  409b48:	str	w0, [x29, #112]
  409b4c:	ldr	w0, [x29, #112]
  409b50:	cmp	w0, #0x0
  409b54:	b.ge	409bec <attach_unit_file+0x878>  // b.tcont
  409b58:	mov	w0, #0x7                   	// #7
  409b5c:	str	w0, [x29, #128]
  409b60:	ldr	w0, [x29, #112]
  409b64:	str	w0, [x29, #132]
  409b68:	str	wzr, [x29, #136]
  409b6c:	ldr	w0, [x29, #136]
  409b70:	bl	404e50 <log_get_max_level_realm@plt>
  409b74:	mov	w1, w0
  409b78:	ldr	w0, [x29, #128]
  409b7c:	and	w0, w0, #0x7
  409b80:	cmp	w1, w0
  409b84:	b.lt	409bd0 <attach_unit_file+0x85c>  // b.tstop
  409b88:	ldr	w0, [x29, #136]
  409b8c:	lsl	w1, w0, #10
  409b90:	ldr	w0, [x29, #128]
  409b94:	orr	w7, w1, w0
  409b98:	adrp	x0, 412000 <_fini+0x50>
  409b9c:	add	x1, x0, #0xa3
  409ba0:	ldr	x6, [x29, #272]
  409ba4:	adrp	x0, 412000 <_fini+0x50>
  409ba8:	add	x5, x0, #0xac8
  409bac:	adrp	x0, 413000 <_fini+0x1050>
  409bb0:	add	x4, x0, #0x3a0
  409bb4:	mov	w3, #0x382                 	// #898
  409bb8:	mov	x2, x1
  409bbc:	ldr	w1, [x29, #132]
  409bc0:	mov	w0, w7
  409bc4:	bl	404a80 <log_internal_realm@plt>
  409bc8:	mov	w19, w0
  409bcc:	b	409be4 <attach_unit_file+0x870>
  409bd0:	ldr	w0, [x29, #132]
  409bd4:	cmp	w0, #0x0
  409bd8:	cneg	w0, w0, lt  // lt = tstop
  409bdc:	and	w0, w0, #0xff
  409be0:	neg	w19, w0
  409be4:	mov	w20, #0x0                   	// #0
  409be8:	b	409c1c <attach_unit_file+0x8a8>
  409bec:	ldr	x0, [x29, #200]
  409bf0:	bl	4050fc <mfree>
  409bf4:	str	x0, [x29, #200]
  409bf8:	ldr	x0, [x29, #64]
  409bfc:	ldr	x0, [x0, #8]
  409c00:	mov	x4, x0
  409c04:	ldr	x3, [x29, #272]
  409c08:	mov	w2, #0x0                   	// #0
  409c0c:	ldr	x1, [x29, #40]
  409c10:	ldr	x0, [x29, #48]
  409c14:	bl	407fac <portable_changes_add>
  409c18:	mov	w20, #0x1                   	// #1
  409c1c:	add	x0, x29, #0x6c
  409c20:	bl	40540c <closep>
  409c24:	cmp	w20, #0x1
  409c28:	b.eq	409c34 <attach_unit_file+0x8c0>  // b.none
  409c2c:	mov	w20, #0x0                   	// #0
  409c30:	b	409c38 <attach_unit_file+0x8c4>
  409c34:	mov	w20, #0x1                   	// #1
  409c38:	add	x0, x29, #0xc8
  409c3c:	bl	405614 <unlink_and_freep>
  409c40:	cmp	w20, #0x1
  409c44:	b.ne	409c70 <attach_unit_file+0x8fc>  // b.any
  409c48:	ldr	x0, [x29, #176]
  409c4c:	bl	4050fc <mfree>
  409c50:	str	x0, [x29, #176]
  409c54:	ldr	x0, [x29, #184]
  409c58:	bl	4050fc <mfree>
  409c5c:	str	x0, [x29, #184]
  409c60:	ldr	x0, [x29, #192]
  409c64:	bl	4050fc <mfree>
  409c68:	str	x0, [x29, #192]
  409c6c:	mov	w19, #0x0                   	// #0
  409c70:	add	x0, x29, #0xc0
  409c74:	bl	4055b8 <rmdir_and_freep>
  409c78:	add	x0, x29, #0xb8
  409c7c:	bl	405614 <unlink_and_freep>
  409c80:	add	x0, x29, #0xb0
  409c84:	bl	405614 <unlink_and_freep>
  409c88:	mov	w1, w19
  409c8c:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  409c90:	add	x0, x0, #0x728
  409c94:	ldr	x2, [x29, #280]
  409c98:	ldr	x0, [x0]
  409c9c:	eor	x0, x2, x0
  409ca0:	cmp	x0, #0x0
  409ca4:	b.eq	409cac <attach_unit_file+0x938>  // b.none
  409ca8:	bl	404930 <__stack_chk_fail@plt>
  409cac:	mov	w0, w1
  409cb0:	mov	sp, x29
  409cb4:	ldp	x19, x20, [sp, #16]
  409cb8:	ldp	x29, x30, [sp], #288
  409cbc:	ret

0000000000409cc0 <image_symlink>:
  409cc0:	stp	x29, x30, [sp, #-80]!
  409cc4:	mov	x29, sp
  409cc8:	str	x0, [sp, #40]
  409ccc:	str	w1, [sp, #36]
  409cd0:	str	x2, [sp, #24]
  409cd4:	str	xzr, [sp, #64]
  409cd8:	ldr	x0, [sp, #40]
  409cdc:	cmp	x0, #0x0
  409ce0:	cset	w0, eq  // eq = none
  409ce4:	and	w0, w0, #0xff
  409ce8:	and	x0, x0, #0xff
  409cec:	cmp	x0, #0x0
  409cf0:	b.eq	409d1c <image_symlink+0x5c>  // b.none
  409cf4:	adrp	x0, 412000 <_fini+0x50>
  409cf8:	add	x1, x0, #0xa3
  409cfc:	adrp	x0, 413000 <_fini+0x1050>
  409d00:	add	x4, x0, #0x3b8
  409d04:	mov	w3, #0x399                 	// #921
  409d08:	mov	x2, x1
  409d0c:	adrp	x0, 412000 <_fini+0x50>
  409d10:	add	x1, x0, #0x7f8
  409d14:	mov	w0, #0x0                   	// #0
  409d18:	bl	404670 <log_assert_failed_realm@plt>
  409d1c:	ldr	x0, [sp, #24]
  409d20:	cmp	x0, #0x0
  409d24:	cset	w0, eq  // eq = none
  409d28:	and	w0, w0, #0xff
  409d2c:	and	x0, x0, #0xff
  409d30:	cmp	x0, #0x0
  409d34:	b.eq	409d60 <image_symlink+0xa0>  // b.none
  409d38:	adrp	x0, 412000 <_fini+0x50>
  409d3c:	add	x1, x0, #0xa3
  409d40:	adrp	x0, 413000 <_fini+0x1050>
  409d44:	add	x4, x0, #0x3b8
  409d48:	mov	w3, #0x39a                 	// #922
  409d4c:	mov	x2, x1
  409d50:	adrp	x0, 412000 <_fini+0x50>
  409d54:	add	x1, x0, #0x900
  409d58:	mov	w0, #0x0                   	// #0
  409d5c:	bl	404670 <log_assert_failed_realm@plt>
  409d60:	ldr	x0, [sp, #40]
  409d64:	bl	4045a0 <last_path_component@plt>
  409d68:	str	x0, [sp, #72]
  409d6c:	ldr	w0, [sp, #36]
  409d70:	and	w0, w0, #0x4
  409d74:	cmp	w0, #0x0
  409d78:	b.eq	409d8c <image_symlink+0xcc>  // b.none
  409d7c:	adrp	x0, 412000 <_fini+0x50>
  409d80:	add	x0, x0, #0xaf0
  409d84:	str	x0, [sp, #56]
  409d88:	b	409d98 <image_symlink+0xd8>
  409d8c:	adrp	x0, 412000 <_fini+0x50>
  409d90:	add	x0, x0, #0xb00
  409d94:	str	x0, [sp, #56]
  409d98:	mov	x2, #0x0                   	// #0
  409d9c:	ldr	x1, [sp, #72]
  409da0:	ldr	x0, [sp, #56]
  409da4:	bl	4045d0 <strjoin_real@plt>
  409da8:	str	x0, [sp, #64]
  409dac:	ldr	x0, [sp, #64]
  409db0:	cmp	x0, #0x0
  409db4:	b.ne	409dc0 <image_symlink+0x100>  // b.any
  409db8:	mov	w0, #0xfffffff4            	// #-12
  409dbc:	b	409dd0 <image_symlink+0x110>
  409dc0:	ldr	x0, [sp, #24]
  409dc4:	ldr	x1, [sp, #64]
  409dc8:	str	x1, [x0]
  409dcc:	mov	w0, #0x0                   	// #0
  409dd0:	ldp	x29, x30, [sp], #80
  409dd4:	ret

0000000000409dd8 <install_image_symlink>:
  409dd8:	sub	sp, sp, #0x80
  409ddc:	stp	x29, x30, [sp, #16]
  409de0:	add	x29, sp, #0x10
  409de4:	stp	x19, x20, [sp, #32]
  409de8:	str	x0, [sp, #72]
  409dec:	str	w1, [sp, #68]
  409df0:	str	x2, [sp, #56]
  409df4:	str	x3, [sp, #48]
  409df8:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  409dfc:	add	x0, x0, #0x728
  409e00:	ldr	x1, [x0]
  409e04:	str	x1, [sp, #120]
  409e08:	mov	x1, #0x0                   	// #0
  409e0c:	str	xzr, [sp, #112]
  409e10:	ldr	x0, [sp, #72]
  409e14:	cmp	x0, #0x0
  409e18:	cset	w0, eq  // eq = none
  409e1c:	and	w0, w0, #0xff
  409e20:	and	x0, x0, #0xff
  409e24:	cmp	x0, #0x0
  409e28:	b.eq	409e54 <install_image_symlink+0x7c>  // b.none
  409e2c:	adrp	x0, 412000 <_fini+0x50>
  409e30:	add	x1, x0, #0xa3
  409e34:	adrp	x0, 413000 <_fini+0x1050>
  409e38:	add	x4, x0, #0x3c8
  409e3c:	mov	w3, #0x3b4                 	// #948
  409e40:	mov	x2, x1
  409e44:	adrp	x0, 412000 <_fini+0x50>
  409e48:	add	x1, x0, #0x7f8
  409e4c:	mov	w0, #0x0                   	// #0
  409e50:	bl	404670 <log_assert_failed_realm@plt>
  409e54:	ldr	x1, [sp, #72]
  409e58:	mov	w0, #0x1                   	// #1
  409e5c:	bl	4042e0 <image_in_search_path@plt>
  409e60:	and	w0, w0, #0xff
  409e64:	cmp	w0, #0x0
  409e68:	b.eq	409e74 <install_image_symlink+0x9c>  // b.none
  409e6c:	mov	w19, #0x0                   	// #0
  409e70:	b	40a014 <install_image_symlink+0x23c>
  409e74:	add	x0, sp, #0x70
  409e78:	mov	x2, x0
  409e7c:	ldr	w1, [sp, #68]
  409e80:	ldr	x0, [sp, #72]
  409e84:	bl	409cc0 <image_symlink>
  409e88:	str	w0, [sp, #84]
  409e8c:	ldr	w0, [sp, #84]
  409e90:	cmp	w0, #0x0
  409e94:	b.ge	409f24 <install_image_symlink+0x14c>  // b.tcont
  409e98:	mov	w0, #0x7                   	// #7
  409e9c:	str	w0, [sp, #100]
  409ea0:	ldr	w0, [sp, #84]
  409ea4:	str	w0, [sp, #104]
  409ea8:	str	wzr, [sp, #108]
  409eac:	ldr	w0, [sp, #108]
  409eb0:	bl	404e50 <log_get_max_level_realm@plt>
  409eb4:	mov	w1, w0
  409eb8:	ldr	w0, [sp, #100]
  409ebc:	and	w0, w0, #0x7
  409ec0:	cmp	w1, w0
  409ec4:	b.lt	409f0c <install_image_symlink+0x134>  // b.tstop
  409ec8:	ldr	w0, [sp, #108]
  409ecc:	lsl	w1, w0, #10
  409ed0:	ldr	w0, [sp, #100]
  409ed4:	orr	w6, w1, w0
  409ed8:	adrp	x0, 412000 <_fini+0x50>
  409edc:	add	x1, x0, #0xa3
  409ee0:	adrp	x0, 412000 <_fini+0x50>
  409ee4:	add	x5, x0, #0xb10
  409ee8:	adrp	x0, 413000 <_fini+0x1050>
  409eec:	add	x4, x0, #0x3e0
  409ef0:	mov	w3, #0x3be                 	// #958
  409ef4:	mov	x2, x1
  409ef8:	ldr	w1, [sp, #104]
  409efc:	mov	w0, w6
  409f00:	bl	404a80 <log_internal_realm@plt>
  409f04:	mov	w19, w0
  409f08:	b	40a014 <install_image_symlink+0x23c>
  409f0c:	ldr	w0, [sp, #104]
  409f10:	cmp	w0, #0x0
  409f14:	cneg	w0, w0, lt  // lt = tstop
  409f18:	and	w0, w0, #0xff
  409f1c:	neg	w19, w0
  409f20:	b	40a014 <install_image_symlink+0x23c>
  409f24:	ldr	x0, [sp, #112]
  409f28:	mov	w1, #0x1ed                 	// #493
  409f2c:	bl	404e00 <mkdir_parents@plt>
  409f30:	ldr	x0, [sp, #112]
  409f34:	mov	x1, x0
  409f38:	ldr	x0, [sp, #72]
  409f3c:	bl	404590 <symlink@plt>
  409f40:	cmp	w0, #0x0
  409f44:	b.ge	409ff4 <install_image_symlink+0x21c>  // b.tcont
  409f48:	mov	w0, #0x7                   	// #7
  409f4c:	str	w0, [sp, #88]
  409f50:	bl	404820 <__errno_location@plt>
  409f54:	ldr	w0, [x0]
  409f58:	str	w0, [sp, #92]
  409f5c:	str	wzr, [sp, #96]
  409f60:	ldr	w0, [sp, #96]
  409f64:	bl	404e50 <log_get_max_level_realm@plt>
  409f68:	mov	w1, w0
  409f6c:	ldr	w0, [sp, #88]
  409f70:	and	w0, w0, #0x7
  409f74:	cmp	w1, w0
  409f78:	b.lt	409fdc <install_image_symlink+0x204>  // b.tstop
  409f7c:	ldr	w0, [sp, #96]
  409f80:	lsl	w1, w0, #10
  409f84:	ldr	w0, [sp, #88]
  409f88:	orr	w19, w1, w0
  409f8c:	adrp	x0, 412000 <_fini+0x50>
  409f90:	add	x20, x0, #0xa3
  409f94:	mov	w0, #0x7                   	// #7
  409f98:	bl	404e40 <special_glyph@plt>
  409f9c:	mov	x1, x0
  409fa0:	ldr	x0, [sp, #112]
  409fa4:	str	x0, [sp]
  409fa8:	mov	x7, x1
  409fac:	ldr	x6, [sp, #72]
  409fb0:	adrp	x0, 412000 <_fini+0x50>
  409fb4:	add	x5, x0, #0x9c8
  409fb8:	adrp	x0, 413000 <_fini+0x1050>
  409fbc:	add	x4, x0, #0x3e0
  409fc0:	mov	w3, #0x3c3                 	// #963
  409fc4:	mov	x2, x20
  409fc8:	ldr	w1, [sp, #92]
  409fcc:	mov	w0, w19
  409fd0:	bl	404a80 <log_internal_realm@plt>
  409fd4:	mov	w19, w0
  409fd8:	b	40a014 <install_image_symlink+0x23c>
  409fdc:	ldr	w0, [sp, #92]
  409fe0:	cmp	w0, #0x0
  409fe4:	cneg	w0, w0, lt  // lt = tstop
  409fe8:	and	w0, w0, #0xff
  409fec:	neg	w19, w0
  409ff0:	b	40a014 <install_image_symlink+0x23c>
  409ff4:	ldr	x0, [sp, #112]
  409ff8:	ldr	x4, [sp, #72]
  409ffc:	mov	x3, x0
  40a000:	mov	w2, #0x1                   	// #1
  40a004:	ldr	x1, [sp, #48]
  40a008:	ldr	x0, [sp, #56]
  40a00c:	bl	407fac <portable_changes_add>
  40a010:	mov	w19, #0x0                   	// #0
  40a014:	add	x0, sp, #0x70
  40a018:	bl	40511c <freep>
  40a01c:	mov	w1, w19
  40a020:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40a024:	add	x0, x0, #0x728
  40a028:	ldr	x2, [sp, #120]
  40a02c:	ldr	x0, [x0]
  40a030:	eor	x0, x2, x0
  40a034:	cmp	x0, #0x0
  40a038:	b.eq	40a040 <install_image_symlink+0x268>  // b.none
  40a03c:	bl	404930 <__stack_chk_fail@plt>
  40a040:	mov	w0, w1
  40a044:	ldp	x19, x20, [sp, #32]
  40a048:	ldp	x29, x30, [sp, #16]
  40a04c:	add	sp, sp, #0x80
  40a050:	ret

000000000040a054 <portable_attach>:
  40a054:	stp	x29, x30, [sp, #-256]!
  40a058:	mov	x29, sp
  40a05c:	str	x19, [sp, #16]
  40a060:	str	x0, [sp, #88]
  40a064:	str	x1, [sp, #80]
  40a068:	str	x2, [sp, #72]
  40a06c:	str	x3, [sp, #64]
  40a070:	str	w4, [sp, #60]
  40a074:	str	x5, [sp, #48]
  40a078:	str	x6, [sp, #40]
  40a07c:	str	x7, [sp, #32]
  40a080:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40a084:	add	x0, x0, #0x728
  40a088:	ldr	x1, [x0]
  40a08c:	str	x1, [sp, #248]
  40a090:	mov	x1, #0x0                   	// #0
  40a094:	str	xzr, [sp, #104]
  40a098:	stp	xzr, xzr, [sp, #144]
  40a09c:	stp	xzr, xzr, [sp, #160]
  40a0a0:	stp	xzr, xzr, [sp, #176]
  40a0a4:	stp	xzr, xzr, [sp, #192]
  40a0a8:	stp	xzr, xzr, [sp, #208]
  40a0ac:	stp	xzr, xzr, [sp, #224]
  40a0b0:	str	xzr, [sp, #240]
  40a0b4:	str	xzr, [sp, #112]
  40a0b8:	ldr	x0, [sp, #80]
  40a0bc:	cmp	x0, #0x0
  40a0c0:	cset	w0, eq  // eq = none
  40a0c4:	and	w0, w0, #0xff
  40a0c8:	and	x0, x0, #0xff
  40a0cc:	cmp	x0, #0x0
  40a0d0:	b.eq	40a0fc <portable_attach+0xa8>  // b.none
  40a0d4:	adrp	x0, 412000 <_fini+0x50>
  40a0d8:	add	x1, x0, #0xa3
  40a0dc:	adrp	x0, 413000 <_fini+0x1050>
  40a0e0:	add	x4, x0, #0x3f8
  40a0e4:	mov	w3, #0x3da                 	// #986
  40a0e8:	mov	x2, x1
  40a0ec:	adrp	x0, 412000 <_fini+0x50>
  40a0f0:	add	x1, x0, #0x638
  40a0f4:	mov	w0, #0x0                   	// #0
  40a0f8:	bl	404670 <log_assert_failed_realm@plt>
  40a0fc:	add	x0, sp, #0x70
  40a100:	mov	x2, x0
  40a104:	ldr	x1, [sp, #80]
  40a108:	mov	w0, #0x1                   	// #1
  40a10c:	bl	404780 <image_find_harder@plt>
  40a110:	str	w0, [sp, #100]
  40a114:	ldr	w0, [sp, #100]
  40a118:	cmp	w0, #0x0
  40a11c:	b.ge	40a128 <portable_attach+0xd4>  // b.tcont
  40a120:	ldr	w19, [sp, #100]
  40a124:	b	40a340 <portable_attach+0x2ec>
  40a128:	ldr	x0, [sp, #112]
  40a12c:	ldr	x0, [x0, #16]
  40a130:	add	x1, sp, #0x68
  40a134:	ldr	x4, [sp, #32]
  40a138:	mov	x3, x1
  40a13c:	mov	x2, #0x0                   	// #0
  40a140:	ldr	x1, [sp, #72]
  40a144:	bl	406c50 <portable_extract_by_path>
  40a148:	str	w0, [sp, #100]
  40a14c:	ldr	w0, [sp, #100]
  40a150:	cmp	w0, #0x0
  40a154:	b.ge	40a160 <portable_attach+0x10c>  // b.tcont
  40a158:	ldr	w19, [sp, #100]
  40a15c:	b	40a340 <portable_attach+0x2ec>
  40a160:	add	x0, sp, #0x90
  40a164:	mov	x3, #0x0                   	// #0
  40a168:	mov	w2, #0x4                   	// #4
  40a16c:	mov	w1, #0x0                   	// #0
  40a170:	bl	404a60 <lookup_paths_init@plt>
  40a174:	str	w0, [sp, #100]
  40a178:	ldr	w0, [sp, #100]
  40a17c:	cmp	w0, #0x0
  40a180:	b.ge	40a18c <portable_attach+0x138>  // b.tcont
  40a184:	ldr	w19, [sp, #100]
  40a188:	b	40a340 <portable_attach+0x2ec>
  40a18c:	mov	w0, #0xfffffffe            	// #-2
  40a190:	str	w0, [sp, #128]
  40a194:	str	xzr, [sp, #136]
  40a198:	b	40a290 <portable_attach+0x23c>
  40a19c:	ldr	x0, [sp, #120]
  40a1a0:	add	x1, x0, #0x10
  40a1a4:	add	x0, sp, #0x90
  40a1a8:	mov	x2, x1
  40a1ac:	mov	x1, x0
  40a1b0:	mov	w0, #0x0                   	// #0
  40a1b4:	bl	404da0 <unit_file_exists@plt>
  40a1b8:	str	w0, [sp, #100]
  40a1bc:	ldr	w0, [sp, #100]
  40a1c0:	cmp	w0, #0x0
  40a1c4:	b.ge	40a1f0 <portable_attach+0x19c>  // b.tcont
  40a1c8:	ldr	x0, [sp, #120]
  40a1cc:	add	x0, x0, #0x10
  40a1d0:	mov	x3, x0
  40a1d4:	adrp	x0, 412000 <_fini+0x50>
  40a1d8:	add	x2, x0, #0xb40
  40a1dc:	ldr	w1, [sp, #100]
  40a1e0:	ldr	x0, [sp, #32]
  40a1e4:	bl	404440 <sd_bus_error_set_errnof@plt>
  40a1e8:	mov	w19, w0
  40a1ec:	b	40a340 <portable_attach+0x2ec>
  40a1f0:	ldr	w0, [sp, #100]
  40a1f4:	cmp	w0, #0x0
  40a1f8:	b.le	40a228 <portable_attach+0x1d4>
  40a1fc:	ldr	x0, [sp, #120]
  40a200:	add	x0, x0, #0x10
  40a204:	mov	x3, x0
  40a208:	adrp	x0, 412000 <_fini+0x50>
  40a20c:	add	x2, x0, #0xb80
  40a210:	adrp	x0, 412000 <_fini+0x50>
  40a214:	add	x1, x0, #0xbb8
  40a218:	ldr	x0, [sp, #32]
  40a21c:	bl	404910 <sd_bus_error_setf@plt>
  40a220:	mov	w19, w0
  40a224:	b	40a340 <portable_attach+0x2ec>
  40a228:	ldr	x0, [sp, #120]
  40a22c:	add	x0, x0, #0x10
  40a230:	ldr	x2, [sp, #32]
  40a234:	mov	x1, x0
  40a238:	ldr	x0, [sp, #88]
  40a23c:	bl	407944 <unit_file_is_active>
  40a240:	str	w0, [sp, #100]
  40a244:	ldr	w0, [sp, #100]
  40a248:	cmp	w0, #0x0
  40a24c:	b.ge	40a258 <portable_attach+0x204>  // b.tcont
  40a250:	ldr	w19, [sp, #100]
  40a254:	b	40a340 <portable_attach+0x2ec>
  40a258:	ldr	w0, [sp, #100]
  40a25c:	cmp	w0, #0x0
  40a260:	b.le	40a290 <portable_attach+0x23c>
  40a264:	ldr	x0, [sp, #120]
  40a268:	add	x0, x0, #0x10
  40a26c:	mov	x3, x0
  40a270:	adrp	x0, 412000 <_fini+0x50>
  40a274:	add	x2, x0, #0xbe0
  40a278:	adrp	x0, 412000 <_fini+0x50>
  40a27c:	add	x1, x0, #0xbb8
  40a280:	ldr	x0, [sp, #32]
  40a284:	bl	404910 <sd_bus_error_setf@plt>
  40a288:	mov	w19, w0
  40a28c:	b	40a340 <portable_attach+0x2ec>
  40a290:	ldr	x0, [sp, #104]
  40a294:	add	x2, sp, #0x78
  40a298:	add	x1, sp, #0x80
  40a29c:	mov	x3, #0x0                   	// #0
  40a2a0:	bl	40532c <hashmap_iterate>
  40a2a4:	and	w0, w0, #0xff
  40a2a8:	cmp	w0, #0x0
  40a2ac:	b.ne	40a19c <portable_attach+0x148>  // b.any
  40a2b0:	mov	w0, #0xfffffffe            	// #-2
  40a2b4:	str	w0, [sp, #128]
  40a2b8:	str	xzr, [sp, #136]
  40a2bc:	b	40a304 <portable_attach+0x2b0>
  40a2c0:	ldr	x0, [sp, #112]
  40a2c4:	ldr	x1, [x0, #16]
  40a2c8:	ldr	x0, [sp, #112]
  40a2cc:	ldr	w2, [x0, #4]
  40a2d0:	ldr	x3, [sp, #120]
  40a2d4:	add	x0, sp, #0x90
  40a2d8:	ldr	x7, [sp, #40]
  40a2dc:	ldr	x6, [sp, #48]
  40a2e0:	ldr	w5, [sp, #60]
  40a2e4:	ldr	x4, [sp, #64]
  40a2e8:	bl	409374 <attach_unit_file>
  40a2ec:	str	w0, [sp, #100]
  40a2f0:	ldr	w0, [sp, #100]
  40a2f4:	cmp	w0, #0x0
  40a2f8:	b.ge	40a304 <portable_attach+0x2b0>  // b.tcont
  40a2fc:	ldr	w19, [sp, #100]
  40a300:	b	40a340 <portable_attach+0x2ec>
  40a304:	ldr	x0, [sp, #104]
  40a308:	add	x2, sp, #0x78
  40a30c:	add	x1, sp, #0x80
  40a310:	mov	x3, #0x0                   	// #0
  40a314:	bl	40532c <hashmap_iterate>
  40a318:	and	w0, w0, #0xff
  40a31c:	cmp	w0, #0x0
  40a320:	b.ne	40a2c0 <portable_attach+0x26c>  // b.any
  40a324:	ldr	x0, [sp, #112]
  40a328:	ldr	x0, [x0, #16]
  40a32c:	ldr	x3, [sp, #40]
  40a330:	ldr	x2, [sp, #48]
  40a334:	ldr	w1, [sp, #60]
  40a338:	bl	409dd8 <install_image_symlink>
  40a33c:	mov	w19, #0x0                   	// #0
  40a340:	add	x0, sp, #0x70
  40a344:	bl	40567c <image_unrefp>
  40a348:	add	x0, sp, #0x90
  40a34c:	bl	4043d0 <lookup_paths_free@plt>
  40a350:	add	x0, sp, #0x68
  40a354:	bl	405364 <hashmap_freep>
  40a358:	mov	w1, w19
  40a35c:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40a360:	add	x0, x0, #0x728
  40a364:	ldr	x2, [sp, #248]
  40a368:	ldr	x0, [x0]
  40a36c:	eor	x0, x2, x0
  40a370:	cmp	x0, #0x0
  40a374:	b.eq	40a37c <portable_attach+0x328>  // b.none
  40a378:	bl	404930 <__stack_chk_fail@plt>
  40a37c:	mov	w0, w1
  40a380:	ldr	x19, [sp, #16]
  40a384:	ldp	x29, x30, [sp], #256
  40a388:	ret

000000000040a38c <marker_matches_image>:
  40a38c:	stp	x29, x30, [sp, #-64]!
  40a390:	mov	x29, sp
  40a394:	str	x0, [sp, #24]
  40a398:	str	x1, [sp, #16]
  40a39c:	ldr	x0, [sp, #24]
  40a3a0:	cmp	x0, #0x0
  40a3a4:	cset	w0, eq  // eq = none
  40a3a8:	and	w0, w0, #0xff
  40a3ac:	and	x0, x0, #0xff
  40a3b0:	cmp	x0, #0x0
  40a3b4:	b.eq	40a3e0 <marker_matches_image+0x54>  // b.none
  40a3b8:	adrp	x0, 412000 <_fini+0x50>
  40a3bc:	add	x1, x0, #0xa3
  40a3c0:	adrp	x0, 413000 <_fini+0x1050>
  40a3c4:	add	x4, x0, #0x408
  40a3c8:	mov	w3, #0x406                 	// #1030
  40a3cc:	mov	x2, x1
  40a3d0:	adrp	x0, 412000 <_fini+0x50>
  40a3d4:	add	x1, x0, #0xc10
  40a3d8:	mov	w0, #0x0                   	// #0
  40a3dc:	bl	404670 <log_assert_failed_realm@plt>
  40a3e0:	ldr	x0, [sp, #16]
  40a3e4:	cmp	x0, #0x0
  40a3e8:	cset	w0, eq  // eq = none
  40a3ec:	and	w0, w0, #0xff
  40a3f0:	and	x0, x0, #0xff
  40a3f4:	cmp	x0, #0x0
  40a3f8:	b.eq	40a424 <marker_matches_image+0x98>  // b.none
  40a3fc:	adrp	x0, 412000 <_fini+0x50>
  40a400:	add	x1, x0, #0xa3
  40a404:	adrp	x0, 413000 <_fini+0x1050>
  40a408:	add	x4, x0, #0x408
  40a40c:	mov	w3, #0x407                 	// #1031
  40a410:	mov	x2, x1
  40a414:	adrp	x0, 412000 <_fini+0x50>
  40a418:	add	x1, x0, #0x638
  40a41c:	mov	w0, #0x0                   	// #0
  40a420:	bl	404670 <log_assert_failed_realm@plt>
  40a424:	ldr	x0, [sp, #24]
  40a428:	bl	4045a0 <last_path_component@plt>
  40a42c:	str	x0, [sp, #32]
  40a430:	ldr	x0, [sp, #16]
  40a434:	bl	404880 <image_name_is_valid@plt>
  40a438:	and	w0, w0, #0xff
  40a43c:	cmp	w0, #0x0
  40a440:	b.eq	40a4c0 <marker_matches_image+0x134>  // b.none
  40a444:	ldr	x1, [sp, #16]
  40a448:	ldr	x0, [sp, #32]
  40a44c:	bl	405250 <startswith>
  40a450:	str	x0, [sp, #56]
  40a454:	ldr	x0, [sp, #56]
  40a458:	cmp	x0, #0x0
  40a45c:	b.ne	40a468 <marker_matches_image+0xdc>  // b.any
  40a460:	mov	w0, #0x0                   	// #0
  40a464:	b	40a524 <marker_matches_image+0x198>
  40a468:	adrp	x0, 412000 <_fini+0x50>
  40a46c:	add	x1, x0, #0x930
  40a470:	ldr	x0, [sp, #56]
  40a474:	bl	4047f0 <strspn@plt>
  40a478:	mov	x1, x0
  40a47c:	ldr	x0, [sp, #56]
  40a480:	add	x0, x0, x1
  40a484:	ldrb	w0, [x0]
  40a488:	cmp	w0, #0x0
  40a48c:	b.eq	40a4a8 <marker_matches_image+0x11c>  // b.none
  40a490:	adrp	x0, 412000 <_fini+0x50>
  40a494:	add	x1, x0, #0xc18
  40a498:	ldr	x0, [sp, #56]
  40a49c:	bl	404b90 <strcmp@plt>
  40a4a0:	cmp	w0, #0x0
  40a4a4:	b.ne	40a4b0 <marker_matches_image+0x124>  // b.any
  40a4a8:	mov	w0, #0x1                   	// #1
  40a4ac:	b	40a4b4 <marker_matches_image+0x128>
  40a4b0:	mov	w0, #0x0                   	// #0
  40a4b4:	and	w0, w0, #0x1
  40a4b8:	and	w0, w0, #0xff
  40a4bc:	b	40a524 <marker_matches_image+0x198>
  40a4c0:	adrp	x0, 412000 <_fini+0x50>
  40a4c4:	add	x1, x0, #0x930
  40a4c8:	ldr	x0, [sp, #32]
  40a4cc:	bl	404350 <strcspn@plt>
  40a4d0:	str	x0, [sp, #40]
  40a4d4:	ldr	x0, [sp, #16]
  40a4d8:	bl	4045a0 <last_path_component@plt>
  40a4dc:	str	x0, [sp, #48]
  40a4e0:	adrp	x0, 412000 <_fini+0x50>
  40a4e4:	add	x1, x0, #0x930
  40a4e8:	ldr	x0, [sp, #48]
  40a4ec:	bl	404350 <strcspn@plt>
  40a4f0:	mov	x1, x0
  40a4f4:	ldr	x0, [sp, #40]
  40a4f8:	cmp	x0, x1
  40a4fc:	b.eq	40a508 <marker_matches_image+0x17c>  // b.none
  40a500:	mov	w0, #0x0                   	// #0
  40a504:	b	40a524 <marker_matches_image+0x198>
  40a508:	ldr	x2, [sp, #40]
  40a50c:	ldr	x1, [sp, #48]
  40a510:	ldr	x0, [sp, #32]
  40a514:	bl	4049f0 <memcmp@plt>
  40a518:	cmp	w0, #0x0
  40a51c:	cset	w0, eq  // eq = none
  40a520:	and	w0, w0, #0xff
  40a524:	ldp	x29, x30, [sp], #64
  40a528:	ret

000000000040a52c <test_chroot_dropin>:
  40a52c:	stp	x29, x30, [sp, #-256]!
  40a530:	mov	x29, sp
  40a534:	str	x19, [sp, #16]
  40a538:	str	x0, [x29, #72]
  40a53c:	str	x1, [x29, #64]
  40a540:	str	x2, [x29, #56]
  40a544:	str	x3, [x29, #48]
  40a548:	str	x4, [x29, #40]
  40a54c:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40a550:	add	x0, x0, #0x728
  40a554:	ldr	x1, [x0]
  40a558:	str	x1, [x29, #248]
  40a55c:	mov	x1, #0x0                   	// #0
  40a560:	str	xzr, [x29, #136]
  40a564:	str	xzr, [x29, #144]
  40a568:	str	xzr, [x29, #152]
  40a56c:	mov	w0, #0xffffffff            	// #-1
  40a570:	str	w0, [x29, #88]
  40a574:	ldr	x0, [x29, #72]
  40a578:	cmp	x0, #0x0
  40a57c:	cset	w0, eq  // eq = none
  40a580:	and	w0, w0, #0xff
  40a584:	and	x0, x0, #0xff
  40a588:	cmp	x0, #0x0
  40a58c:	b.eq	40a5b8 <test_chroot_dropin+0x8c>  // b.none
  40a590:	adrp	x0, 412000 <_fini+0x50>
  40a594:	add	x1, x0, #0xa3
  40a598:	adrp	x0, 413000 <_fini+0x1050>
  40a59c:	add	x4, x0, #0x420
  40a5a0:	mov	w3, #0x436                 	// #1078
  40a5a4:	mov	x2, x1
  40a5a8:	adrp	x0, 412000 <_fini+0x50>
  40a5ac:	add	x1, x0, #0xc20
  40a5b0:	mov	w0, #0x0                   	// #0
  40a5b4:	bl	404670 <log_assert_failed_realm@plt>
  40a5b8:	ldr	x0, [x29, #64]
  40a5bc:	cmp	x0, #0x0
  40a5c0:	cset	w0, eq  // eq = none
  40a5c4:	and	w0, w0, #0xff
  40a5c8:	and	x0, x0, #0xff
  40a5cc:	cmp	x0, #0x0
  40a5d0:	b.eq	40a5fc <test_chroot_dropin+0xd0>  // b.none
  40a5d4:	adrp	x0, 412000 <_fini+0x50>
  40a5d8:	add	x1, x0, #0xa3
  40a5dc:	adrp	x0, 413000 <_fini+0x1050>
  40a5e0:	add	x4, x0, #0x420
  40a5e4:	mov	w3, #0x437                 	// #1079
  40a5e8:	mov	x2, x1
  40a5ec:	adrp	x0, 412000 <_fini+0x50>
  40a5f0:	add	x1, x0, #0x128
  40a5f4:	mov	w0, #0x0                   	// #0
  40a5f8:	bl	404670 <log_assert_failed_realm@plt>
  40a5fc:	ldr	x0, [x29, #56]
  40a600:	cmp	x0, #0x0
  40a604:	cset	w0, eq  // eq = none
  40a608:	and	w0, w0, #0xff
  40a60c:	and	x0, x0, #0xff
  40a610:	cmp	x0, #0x0
  40a614:	b.eq	40a640 <test_chroot_dropin+0x114>  // b.none
  40a618:	adrp	x0, 412000 <_fini+0x50>
  40a61c:	add	x1, x0, #0xa3
  40a620:	adrp	x0, 413000 <_fini+0x1050>
  40a624:	add	x4, x0, #0x420
  40a628:	mov	w3, #0x438                 	// #1080
  40a62c:	mov	x2, x1
  40a630:	adrp	x0, 412000 <_fini+0x50>
  40a634:	add	x1, x0, #0xc28
  40a638:	mov	w0, #0x0                   	// #0
  40a63c:	bl	404670 <log_assert_failed_realm@plt>
  40a640:	ldr	x0, [x29, #56]
  40a644:	str	x0, [x29, #232]
  40a648:	adrp	x0, 412000 <_fini+0x50>
  40a64c:	add	x0, x0, #0xc30
  40a650:	str	x0, [x29, #240]
  40a654:	str	xzr, [x29, #168]
  40a658:	str	xzr, [x29, #176]
  40a65c:	b	40a690 <test_chroot_dropin+0x164>
  40a660:	ldr	x0, [x29, #176]
  40a664:	lsl	x0, x0, #3
  40a668:	add	x1, x29, #0xe8
  40a66c:	ldr	x0, [x1, x0]
  40a670:	bl	404df0 <strlen@plt>
  40a674:	mov	x1, x0
  40a678:	ldr	x0, [x29, #168]
  40a67c:	add	x0, x0, x1
  40a680:	str	x0, [x29, #168]
  40a684:	ldr	x0, [x29, #176]
  40a688:	add	x0, x0, #0x1
  40a68c:	str	x0, [x29, #176]
  40a690:	ldr	x0, [x29, #176]
  40a694:	cmp	x0, #0x1
  40a698:	b.hi	40a6b4 <test_chroot_dropin+0x188>  // b.pmore
  40a69c:	ldr	x0, [x29, #176]
  40a6a0:	lsl	x0, x0, #3
  40a6a4:	add	x1, x29, #0xe8
  40a6a8:	ldr	x0, [x1, x0]
  40a6ac:	cmp	x0, #0x0
  40a6b0:	b.ne	40a660 <test_chroot_dropin+0x134>  // b.any
  40a6b4:	ldr	x0, [x29, #168]
  40a6b8:	add	x0, x0, #0x1
  40a6bc:	str	x0, [x29, #184]
  40a6c0:	ldr	x1, [x29, #184]
  40a6c4:	mov	x0, #0x1                   	// #1
  40a6c8:	bl	405140 <size_multiply_overflow>
  40a6cc:	and	w0, w0, #0xff
  40a6d0:	and	x0, x0, #0xff
  40a6d4:	cmp	x0, #0x0
  40a6d8:	b.eq	40a704 <test_chroot_dropin+0x1d8>  // b.none
  40a6dc:	adrp	x0, 412000 <_fini+0x50>
  40a6e0:	add	x1, x0, #0xa3
  40a6e4:	adrp	x0, 413000 <_fini+0x1050>
  40a6e8:	add	x4, x0, #0x420
  40a6ec:	mov	w3, #0x43c                 	// #1084
  40a6f0:	mov	x2, x1
  40a6f4:	adrp	x0, 412000 <_fini+0x50>
  40a6f8:	add	x1, x0, #0x730
  40a6fc:	mov	w0, #0x0                   	// #0
  40a700:	bl	404670 <log_assert_failed_realm@plt>
  40a704:	ldr	x0, [x29, #184]
  40a708:	cmp	x0, #0x400, lsl #12
  40a70c:	cset	w0, hi  // hi = pmore
  40a710:	and	w0, w0, #0xff
  40a714:	and	x0, x0, #0xff
  40a718:	cmp	x0, #0x0
  40a71c:	b.eq	40a748 <test_chroot_dropin+0x21c>  // b.none
  40a720:	adrp	x0, 412000 <_fini+0x50>
  40a724:	add	x1, x0, #0xa3
  40a728:	adrp	x0, 413000 <_fini+0x1050>
  40a72c:	add	x4, x0, #0x420
  40a730:	mov	w3, #0x43c                 	// #1084
  40a734:	mov	x2, x1
  40a738:	adrp	x0, 412000 <_fini+0x50>
  40a73c:	add	x1, x0, #0x760
  40a740:	mov	w0, #0x0                   	// #0
  40a744:	bl	404670 <log_assert_failed_realm@plt>
  40a748:	ldr	x0, [x29, #184]
  40a74c:	add	x0, x0, #0xf
  40a750:	lsr	x0, x0, #4
  40a754:	lsl	x0, x0, #4
  40a758:	sub	sp, sp, x0
  40a75c:	mov	x0, sp
  40a760:	add	x0, x0, #0xf
  40a764:	lsr	x0, x0, #4
  40a768:	lsl	x0, x0, #4
  40a76c:	str	x0, [x29, #192]
  40a770:	ldr	x0, [x29, #192]
  40a774:	str	x0, [x29, #160]
  40a778:	str	xzr, [x29, #176]
  40a77c:	b	40a7ac <test_chroot_dropin+0x280>
  40a780:	ldr	x0, [x29, #176]
  40a784:	lsl	x0, x0, #3
  40a788:	add	x1, x29, #0xe8
  40a78c:	ldr	x0, [x1, x0]
  40a790:	mov	x1, x0
  40a794:	ldr	x0, [x29, #160]
  40a798:	bl	404380 <stpcpy@plt>
  40a79c:	str	x0, [x29, #160]
  40a7a0:	ldr	x0, [x29, #176]
  40a7a4:	add	x0, x0, #0x1
  40a7a8:	str	x0, [x29, #176]
  40a7ac:	ldr	x0, [x29, #176]
  40a7b0:	cmp	x0, #0x1
  40a7b4:	b.hi	40a7d0 <test_chroot_dropin+0x2a4>  // b.pmore
  40a7b8:	ldr	x0, [x29, #176]
  40a7bc:	lsl	x0, x0, #3
  40a7c0:	add	x1, x29, #0xe8
  40a7c4:	ldr	x0, [x1, x0]
  40a7c8:	cmp	x0, #0x0
  40a7cc:	b.ne	40a780 <test_chroot_dropin+0x254>  // b.any
  40a7d0:	ldr	x0, [x29, #160]
  40a7d4:	strb	wzr, [x0]
  40a7d8:	ldr	x0, [x29, #192]
  40a7dc:	str	x0, [x29, #200]
  40a7e0:	ldr	x0, [x29, #72]
  40a7e4:	bl	404630 <dirfd@plt>
  40a7e8:	mov	w2, #0x80000               	// #524288
  40a7ec:	ldr	x1, [x29, #200]
  40a7f0:	bl	404310 <openat64@plt>
  40a7f4:	str	w0, [x29, #88]
  40a7f8:	ldr	w0, [x29, #88]
  40a7fc:	cmp	w0, #0x0
  40a800:	b.ge	40a8b4 <test_chroot_dropin+0x388>  // b.tcont
  40a804:	bl	404820 <__errno_location@plt>
  40a808:	ldr	w0, [x0]
  40a80c:	cmp	w0, #0x2
  40a810:	b.ne	40a81c <test_chroot_dropin+0x2f0>  // b.any
  40a814:	mov	w19, #0x0                   	// #0
  40a818:	b	40ab0c <test_chroot_dropin+0x5e0>
  40a81c:	mov	w0, #0x7                   	// #7
  40a820:	str	w0, [x29, #124]
  40a824:	bl	404820 <__errno_location@plt>
  40a828:	ldr	w0, [x0]
  40a82c:	str	w0, [x29, #128]
  40a830:	str	wzr, [x29, #132]
  40a834:	ldr	w0, [x29, #132]
  40a838:	bl	404e50 <log_get_max_level_realm@plt>
  40a83c:	mov	w1, w0
  40a840:	ldr	w0, [x29, #124]
  40a844:	and	w0, w0, #0x7
  40a848:	cmp	w1, w0
  40a84c:	b.lt	40a89c <test_chroot_dropin+0x370>  // b.tstop
  40a850:	ldr	w0, [x29, #132]
  40a854:	lsl	w1, w0, #10
  40a858:	ldr	w0, [x29, #124]
  40a85c:	orr	w8, w1, w0
  40a860:	adrp	x0, 412000 <_fini+0x50>
  40a864:	add	x1, x0, #0xa3
  40a868:	ldr	x7, [x29, #200]
  40a86c:	ldr	x6, [x29, #64]
  40a870:	adrp	x0, 412000 <_fini+0x50>
  40a874:	add	x5, x0, #0xc48
  40a878:	adrp	x0, 413000 <_fini+0x1050>
  40a87c:	add	x4, x0, #0x438
  40a880:	mov	w3, #0x442                 	// #1090
  40a884:	mov	x2, x1
  40a888:	ldr	w1, [x29, #128]
  40a88c:	mov	w0, w8
  40a890:	bl	404a80 <log_internal_realm@plt>
  40a894:	mov	w19, w0
  40a898:	b	40ab0c <test_chroot_dropin+0x5e0>
  40a89c:	ldr	w0, [x29, #128]
  40a8a0:	cmp	w0, #0x0
  40a8a4:	cneg	w0, w0, lt  // lt = tstop
  40a8a8:	and	w0, w0, #0xff
  40a8ac:	neg	w19, w0
  40a8b0:	b	40ab0c <test_chroot_dropin+0x5e0>
  40a8b4:	ldr	w3, [x29, #88]
  40a8b8:	add	x0, x29, #0x98
  40a8bc:	mov	x2, x0
  40a8c0:	adrp	x0, 412000 <_fini+0x50>
  40a8c4:	add	x1, x0, #0xc68
  40a8c8:	mov	w0, w3
  40a8cc:	bl	404d30 <fdopen_unlocked@plt>
  40a8d0:	str	w0, [x29, #92]
  40a8d4:	ldr	w0, [x29, #92]
  40a8d8:	cmp	w0, #0x0
  40a8dc:	b.ge	40a96c <test_chroot_dropin+0x440>  // b.tcont
  40a8e0:	mov	w0, #0x7                   	// #7
  40a8e4:	str	w0, [x29, #112]
  40a8e8:	ldr	w0, [x29, #92]
  40a8ec:	str	w0, [x29, #116]
  40a8f0:	str	wzr, [x29, #120]
  40a8f4:	ldr	w0, [x29, #120]
  40a8f8:	bl	404e50 <log_get_max_level_realm@plt>
  40a8fc:	mov	w1, w0
  40a900:	ldr	w0, [x29, #112]
  40a904:	and	w0, w0, #0x7
  40a908:	cmp	w1, w0
  40a90c:	b.lt	40a954 <test_chroot_dropin+0x428>  // b.tstop
  40a910:	ldr	w0, [x29, #120]
  40a914:	lsl	w1, w0, #10
  40a918:	ldr	w0, [x29, #112]
  40a91c:	orr	w6, w1, w0
  40a920:	adrp	x0, 412000 <_fini+0x50>
  40a924:	add	x1, x0, #0xa3
  40a928:	adrp	x0, 412000 <_fini+0x50>
  40a92c:	add	x5, x0, #0xc70
  40a930:	adrp	x0, 413000 <_fini+0x1050>
  40a934:	add	x4, x0, #0x438
  40a938:	mov	w3, #0x447                 	// #1095
  40a93c:	mov	x2, x1
  40a940:	ldr	w1, [x29, #116]
  40a944:	mov	w0, w6
  40a948:	bl	404a80 <log_internal_realm@plt>
  40a94c:	mov	w19, w0
  40a950:	b	40ab0c <test_chroot_dropin+0x5e0>
  40a954:	ldr	w0, [x29, #116]
  40a958:	cmp	w0, #0x0
  40a95c:	cneg	w0, w0, lt  // lt = tstop
  40a960:	and	w0, w0, #0xff
  40a964:	neg	w19, w0
  40a968:	b	40ab0c <test_chroot_dropin+0x5e0>
  40a96c:	ldr	w0, [x29, #88]
  40a970:	str	w0, [x29, #96]
  40a974:	mov	w0, #0xffffffff            	// #-1
  40a978:	str	w0, [x29, #88]
  40a97c:	ldr	x0, [x29, #152]
  40a980:	add	x1, x29, #0x88
  40a984:	mov	x2, x1
  40a988:	mov	x1, #0x100000              	// #1048576
  40a98c:	bl	4054d8 <read_line>
  40a990:	str	w0, [x29, #92]
  40a994:	ldr	w0, [x29, #92]
  40a998:	cmp	w0, #0x0
  40a99c:	b.ge	40aa34 <test_chroot_dropin+0x508>  // b.tcont
  40a9a0:	mov	w0, #0x7                   	// #7
  40a9a4:	str	w0, [x29, #100]
  40a9a8:	ldr	w0, [x29, #92]
  40a9ac:	str	w0, [x29, #104]
  40a9b0:	str	wzr, [x29, #108]
  40a9b4:	ldr	w0, [x29, #108]
  40a9b8:	bl	404e50 <log_get_max_level_realm@plt>
  40a9bc:	mov	w1, w0
  40a9c0:	ldr	w0, [x29, #100]
  40a9c4:	and	w0, w0, #0x7
  40a9c8:	cmp	w1, w0
  40a9cc:	b.lt	40aa1c <test_chroot_dropin+0x4f0>  // b.tstop
  40a9d0:	ldr	w0, [x29, #108]
  40a9d4:	lsl	w1, w0, #10
  40a9d8:	ldr	w0, [x29, #100]
  40a9dc:	orr	w8, w1, w0
  40a9e0:	adrp	x0, 412000 <_fini+0x50>
  40a9e4:	add	x1, x0, #0xa3
  40a9e8:	ldr	x7, [x29, #200]
  40a9ec:	ldr	x6, [x29, #64]
  40a9f0:	adrp	x0, 412000 <_fini+0x50>
  40a9f4:	add	x5, x0, #0xc98
  40a9f8:	adrp	x0, 413000 <_fini+0x1050>
  40a9fc:	add	x4, x0, #0x438
  40aa00:	mov	w3, #0x44c                 	// #1100
  40aa04:	mov	x2, x1
  40aa08:	ldr	w1, [x29, #104]
  40aa0c:	mov	w0, w8
  40aa10:	bl	404a80 <log_internal_realm@plt>
  40aa14:	mov	w19, w0
  40aa18:	b	40ab0c <test_chroot_dropin+0x5e0>
  40aa1c:	ldr	w0, [x29, #104]
  40aa20:	cmp	w0, #0x0
  40aa24:	cneg	w0, w0, lt  // lt = tstop
  40aa28:	and	w0, w0, #0xff
  40aa2c:	neg	w19, w0
  40aa30:	b	40ab0c <test_chroot_dropin+0x5e0>
  40aa34:	ldr	x2, [x29, #136]
  40aa38:	adrp	x0, 412000 <_fini+0x50>
  40aa3c:	add	x1, x0, #0x850
  40aa40:	mov	x0, x2
  40aa44:	bl	405250 <startswith>
  40aa48:	str	x0, [x29, #208]
  40aa4c:	ldr	x0, [x29, #208]
  40aa50:	cmp	x0, #0x0
  40aa54:	b.ne	40aa60 <test_chroot_dropin+0x534>  // b.any
  40aa58:	mov	w19, #0x0                   	// #0
  40aa5c:	b	40ab0c <test_chroot_dropin+0x5e0>
  40aa60:	adrp	x0, 412000 <_fini+0x50>
  40aa64:	add	x1, x0, #0xcb8
  40aa68:	ldr	x0, [x29, #208]
  40aa6c:	bl	404b60 <endswith@plt>
  40aa70:	str	x0, [x29, #216]
  40aa74:	ldr	x0, [x29, #216]
  40aa78:	cmp	x0, #0x0
  40aa7c:	b.ne	40aa88 <test_chroot_dropin+0x55c>  // b.any
  40aa80:	mov	w19, #0x0                   	// #0
  40aa84:	b	40ab0c <test_chroot_dropin+0x5e0>
  40aa88:	ldr	x1, [x29, #216]
  40aa8c:	ldr	x0, [x29, #208]
  40aa90:	sub	x0, x1, x0
  40aa94:	mov	x1, x0
  40aa98:	ldr	x0, [x29, #208]
  40aa9c:	bl	4048f0 <strndup@plt>
  40aaa0:	str	x0, [x29, #144]
  40aaa4:	ldr	x0, [x29, #144]
  40aaa8:	cmp	x0, #0x0
  40aaac:	b.ne	40aab8 <test_chroot_dropin+0x58c>  // b.any
  40aab0:	mov	w19, #0xfffffff4            	// #-12
  40aab4:	b	40ab0c <test_chroot_dropin+0x5e0>
  40aab8:	ldr	x0, [x29, #48]
  40aabc:	cmp	x0, #0x0
  40aac0:	b.ne	40aad0 <test_chroot_dropin+0x5a4>  // b.any
  40aac4:	mov	w0, #0x1                   	// #1
  40aac8:	str	w0, [x29, #92]
  40aacc:	b	40aae4 <test_chroot_dropin+0x5b8>
  40aad0:	ldr	x0, [x29, #144]
  40aad4:	ldr	x1, [x29, #48]
  40aad8:	bl	40a38c <marker_matches_image>
  40aadc:	and	w0, w0, #0xff
  40aae0:	str	w0, [x29, #92]
  40aae4:	ldr	x0, [x29, #40]
  40aae8:	cmp	x0, #0x0
  40aaec:	b.eq	40ab08 <test_chroot_dropin+0x5dc>  // b.none
  40aaf0:	ldr	x0, [x29, #144]
  40aaf4:	str	x0, [x29, #224]
  40aaf8:	str	xzr, [x29, #144]
  40aafc:	ldr	x1, [x29, #224]
  40ab00:	ldr	x0, [x29, #40]
  40ab04:	str	x1, [x0]
  40ab08:	ldr	w19, [x29, #92]
  40ab0c:	add	x0, x29, #0x58
  40ab10:	bl	40540c <closep>
  40ab14:	add	x0, x29, #0x98
  40ab18:	bl	405450 <fclosep>
  40ab1c:	add	x0, x29, #0x90
  40ab20:	bl	40511c <freep>
  40ab24:	add	x0, x29, #0x88
  40ab28:	bl	40511c <freep>
  40ab2c:	mov	w1, w19
  40ab30:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40ab34:	add	x0, x0, #0x728
  40ab38:	ldr	x2, [x29, #248]
  40ab3c:	ldr	x0, [x0]
  40ab40:	eor	x0, x2, x0
  40ab44:	cmp	x0, #0x0
  40ab48:	b.eq	40ab50 <test_chroot_dropin+0x624>  // b.none
  40ab4c:	bl	404930 <__stack_chk_fail@plt>
  40ab50:	mov	w0, w1
  40ab54:	mov	sp, x29
  40ab58:	ldr	x19, [sp, #16]
  40ab5c:	ldp	x29, x30, [sp], #256
  40ab60:	ret

000000000040ab64 <portable_detach>:
  40ab64:	sub	sp, sp, #0x240
  40ab68:	stp	x29, x30, [sp]
  40ab6c:	mov	x29, sp
  40ab70:	stp	x19, x20, [sp, #16]
  40ab74:	str	x0, [sp, #72]
  40ab78:	str	x1, [sp, #64]
  40ab7c:	str	w2, [sp, #60]
  40ab80:	str	x3, [sp, #48]
  40ab84:	str	x4, [sp, #40]
  40ab88:	str	x5, [sp, #32]
  40ab8c:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40ab90:	add	x0, x0, #0x728
  40ab94:	ldr	x1, [x0]
  40ab98:	str	x1, [sp, #568]
  40ab9c:	mov	x1, #0x0                   	// #0
  40aba0:	stp	xzr, xzr, [sp, #336]
  40aba4:	stp	xzr, xzr, [sp, #352]
  40aba8:	stp	xzr, xzr, [sp, #368]
  40abac:	stp	xzr, xzr, [sp, #384]
  40abb0:	stp	xzr, xzr, [sp, #400]
  40abb4:	stp	xzr, xzr, [sp, #416]
  40abb8:	str	xzr, [sp, #432]
  40abbc:	str	xzr, [sp, #240]
  40abc0:	str	xzr, [sp, #248]
  40abc4:	str	xzr, [sp, #256]
  40abc8:	str	wzr, [sp, #88]
  40abcc:	ldr	x0, [sp, #64]
  40abd0:	cmp	x0, #0x0
  40abd4:	cset	w0, eq  // eq = none
  40abd8:	and	w0, w0, #0xff
  40abdc:	and	x0, x0, #0xff
  40abe0:	cmp	x0, #0x0
  40abe4:	b.eq	40ac10 <portable_detach+0xac>  // b.none
  40abe8:	adrp	x0, 412000 <_fini+0x50>
  40abec:	add	x1, x0, #0xa3
  40abf0:	adrp	x0, 413000 <_fini+0x1050>
  40abf4:	add	x4, x0, #0x450
  40abf8:	mov	w3, #0x476                 	// #1142
  40abfc:	mov	x2, x1
  40ac00:	adrp	x0, 412000 <_fini+0x50>
  40ac04:	add	x1, x0, #0x638
  40ac08:	mov	w0, #0x0                   	// #0
  40ac0c:	bl	404670 <log_assert_failed_realm@plt>
  40ac10:	add	x0, sp, #0x150
  40ac14:	mov	x3, #0x0                   	// #0
  40ac18:	mov	w2, #0x4                   	// #4
  40ac1c:	mov	w1, #0x0                   	// #0
  40ac20:	bl	404a60 <lookup_paths_init@plt>
  40ac24:	str	w0, [sp, #92]
  40ac28:	ldr	w0, [sp, #92]
  40ac2c:	cmp	w0, #0x0
  40ac30:	b.ge	40ac3c <portable_detach+0xd8>  // b.tcont
  40ac34:	ldr	w19, [sp, #92]
  40ac38:	b	40baa4 <portable_detach+0xf40>
  40ac3c:	add	x0, sp, #0x150
  40ac40:	ldr	w1, [sp, #60]
  40ac44:	bl	4092a4 <attached_path>
  40ac48:	str	x0, [sp, #312]
  40ac4c:	ldr	x0, [sp, #312]
  40ac50:	bl	404be0 <opendir@plt>
  40ac54:	str	x0, [sp, #256]
  40ac58:	ldr	x0, [sp, #256]
  40ac5c:	cmp	x0, #0x0
  40ac60:	b.ne	40ad08 <portable_detach+0x1a4>  // b.any
  40ac64:	bl	404820 <__errno_location@plt>
  40ac68:	ldr	w0, [x0]
  40ac6c:	cmp	w0, #0x2
  40ac70:	b.eq	40ba00 <portable_detach+0xe9c>  // b.none
  40ac74:	mov	w0, #0x7                   	// #7
  40ac78:	str	w0, [sp, #216]
  40ac7c:	bl	404820 <__errno_location@plt>
  40ac80:	ldr	w0, [x0]
  40ac84:	str	w0, [sp, #220]
  40ac88:	str	wzr, [sp, #224]
  40ac8c:	ldr	w0, [sp, #224]
  40ac90:	bl	404e50 <log_get_max_level_realm@plt>
  40ac94:	mov	w1, w0
  40ac98:	ldr	w0, [sp, #216]
  40ac9c:	and	w0, w0, #0x7
  40aca0:	cmp	w1, w0
  40aca4:	b.lt	40acf0 <portable_detach+0x18c>  // b.tstop
  40aca8:	ldr	w0, [sp, #224]
  40acac:	lsl	w1, w0, #10
  40acb0:	ldr	w0, [sp, #216]
  40acb4:	orr	w7, w1, w0
  40acb8:	adrp	x0, 412000 <_fini+0x50>
  40acbc:	add	x1, x0, #0xa3
  40acc0:	ldr	x6, [sp, #312]
  40acc4:	adrp	x0, 412000 <_fini+0x50>
  40acc8:	add	x5, x0, #0xcc8
  40accc:	adrp	x0, 413000 <_fini+0x1050>
  40acd0:	add	x4, x0, #0x460
  40acd4:	mov	w3, #0x483                 	// #1155
  40acd8:	mov	x2, x1
  40acdc:	ldr	w1, [sp, #220]
  40ace0:	mov	w0, w7
  40ace4:	bl	404a80 <log_internal_realm@plt>
  40ace8:	mov	w19, w0
  40acec:	b	40baa4 <portable_detach+0xf40>
  40acf0:	ldr	w0, [sp, #220]
  40acf4:	cmp	w0, #0x0
  40acf8:	cneg	w0, w0, lt  // lt = tstop
  40acfc:	and	w0, w0, #0xff
  40ad00:	neg	w19, w0
  40ad04:	b	40baa4 <portable_detach+0xf40>
  40ad08:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40ad0c:	add	x0, x0, #0x750
  40ad10:	bl	4048a0 <internal_set_new@plt>
  40ad14:	str	x0, [sp, #240]
  40ad18:	ldr	x0, [sp, #240]
  40ad1c:	cmp	x0, #0x0
  40ad20:	b.ne	40ad2c <portable_detach+0x1c8>  // b.any
  40ad24:	mov	w19, #0xfffffff4            	// #-12
  40ad28:	b	40baa4 <portable_detach+0xf40>
  40ad2c:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40ad30:	add	x0, x0, #0x730
  40ad34:	bl	4048a0 <internal_set_new@plt>
  40ad38:	str	x0, [sp, #248]
  40ad3c:	ldr	x0, [sp, #248]
  40ad40:	cmp	x0, #0x0
  40ad44:	b.ne	40ad50 <portable_detach+0x1ec>  // b.any
  40ad48:	mov	w19, #0xfffffff4            	// #-12
  40ad4c:	b	40baa4 <portable_detach+0xf40>
  40ad50:	bl	404820 <__errno_location@plt>
  40ad54:	str	wzr, [x0]
  40ad58:	ldr	x0, [sp, #256]
  40ad5c:	bl	4046a0 <readdir64@plt>
  40ad60:	str	x0, [sp, #288]
  40ad64:	ldr	x0, [sp, #288]
  40ad68:	cmp	x0, #0x0
  40ad6c:	b.ne	40ae14 <portable_detach+0x2b0>  // b.any
  40ad70:	bl	404820 <__errno_location@plt>
  40ad74:	ldr	w0, [x0]
  40ad78:	cmp	w0, #0x0
  40ad7c:	b.le	40b294 <portable_detach+0x730>
  40ad80:	mov	w0, #0x7                   	// #7
  40ad84:	str	w0, [sp, #204]
  40ad88:	bl	404820 <__errno_location@plt>
  40ad8c:	ldr	w0, [x0]
  40ad90:	str	w0, [sp, #208]
  40ad94:	str	wzr, [sp, #212]
  40ad98:	ldr	w0, [sp, #212]
  40ad9c:	bl	404e50 <log_get_max_level_realm@plt>
  40ada0:	mov	w1, w0
  40ada4:	ldr	w0, [sp, #204]
  40ada8:	and	w0, w0, #0x7
  40adac:	cmp	w1, w0
  40adb0:	b.lt	40adfc <portable_detach+0x298>  // b.tstop
  40adb4:	ldr	w0, [sp, #212]
  40adb8:	lsl	w1, w0, #10
  40adbc:	ldr	w0, [sp, #204]
  40adc0:	orr	w7, w1, w0
  40adc4:	adrp	x0, 412000 <_fini+0x50>
  40adc8:	add	x1, x0, #0xa3
  40adcc:	ldr	x6, [sp, #312]
  40add0:	adrp	x0, 412000 <_fini+0x50>
  40add4:	add	x5, x0, #0xcf0
  40add8:	adrp	x0, 413000 <_fini+0x1050>
  40addc:	add	x4, x0, #0x460
  40ade0:	mov	w3, #0x48e                 	// #1166
  40ade4:	mov	x2, x1
  40ade8:	ldr	w1, [sp, #208]
  40adec:	mov	w0, w7
  40adf0:	bl	404a80 <log_internal_realm@plt>
  40adf4:	mov	w19, w0
  40adf8:	b	40baa4 <portable_detach+0xf40>
  40adfc:	ldr	w0, [sp, #208]
  40ae00:	cmp	w0, #0x0
  40ae04:	cneg	w0, w0, lt  // lt = tstop
  40ae08:	and	w0, w0, #0xff
  40ae0c:	neg	w19, w0
  40ae10:	b	40baa4 <portable_detach+0xf40>
  40ae14:	ldr	x0, [sp, #288]
  40ae18:	add	x0, x0, #0x13
  40ae1c:	bl	4044c0 <hidden_or_backup_file@plt>
  40ae20:	and	w0, w0, #0xff
  40ae24:	cmp	w0, #0x0
  40ae28:	b.ne	40b278 <portable_detach+0x714>  // b.any
  40ae2c:	str	xzr, [sp, #320]
  40ae30:	ldr	x0, [sp, #288]
  40ae34:	add	x0, x0, #0x13
  40ae38:	mov	w1, #0x7                   	// #7
  40ae3c:	bl	404e30 <unit_name_is_valid@plt>
  40ae40:	and	w0, w0, #0xff
  40ae44:	eor	w0, w0, #0x1
  40ae48:	and	w0, w0, #0xff
  40ae4c:	cmp	w0, #0x0
  40ae50:	b.eq	40ae5c <portable_detach+0x2f8>  // b.none
  40ae54:	mov	w20, #0x0                   	// #0
  40ae58:	b	40b25c <portable_detach+0x6f8>
  40ae5c:	ldr	x2, [sp, #240]
  40ae60:	ldr	x0, [sp, #288]
  40ae64:	add	x0, x0, #0x13
  40ae68:	mov	x1, x0
  40ae6c:	mov	x0, x2
  40ae70:	bl	4056d8 <set_get>
  40ae74:	cmp	x0, #0x0
  40ae78:	b.eq	40ae84 <portable_detach+0x320>  // b.none
  40ae7c:	mov	w20, #0x0                   	// #0
  40ae80:	b	40b25c <portable_detach+0x6f8>
  40ae84:	ldr	x0, [sp, #256]
  40ae88:	ldr	x1, [sp, #288]
  40ae8c:	bl	404560 <dirent_ensure_type@plt>
  40ae90:	strb	wzr, [sp, #86]
  40ae94:	ldr	x0, [sp, #288]
  40ae98:	ldrb	w0, [x0, #18]
  40ae9c:	cmp	w0, #0x8
  40aea0:	b.eq	40aeac <portable_detach+0x348>  // b.none
  40aea4:	cmp	w0, #0xa
  40aea8:	b.ne	40aeb4 <portable_detach+0x350>  // b.any
  40aeac:	mov	w0, #0x1                   	// #1
  40aeb0:	strb	w0, [sp, #86]
  40aeb4:	nop
  40aeb8:	ldrb	w0, [sp, #86]
  40aebc:	eor	w0, w0, #0x1
  40aec0:	and	w0, w0, #0xff
  40aec4:	cmp	w0, #0x0
  40aec8:	b.eq	40aed4 <portable_detach+0x370>  // b.none
  40aecc:	mov	w20, #0x0                   	// #0
  40aed0:	b	40b25c <portable_detach+0x6f8>
  40aed4:	ldr	x5, [sp, #256]
  40aed8:	ldr	x0, [sp, #288]
  40aedc:	add	x0, x0, #0x13
  40aee0:	add	x1, sp, #0x140
  40aee4:	mov	x4, x1
  40aee8:	ldr	x3, [sp, #64]
  40aeec:	mov	x2, x0
  40aef0:	ldr	x1, [sp, #312]
  40aef4:	mov	x0, x5
  40aef8:	bl	40a52c <test_chroot_dropin>
  40aefc:	str	w0, [sp, #92]
  40af00:	ldr	w0, [sp, #92]
  40af04:	cmp	w0, #0x0
  40af08:	b.ge	40af18 <portable_detach+0x3b4>  // b.tcont
  40af0c:	ldr	w19, [sp, #92]
  40af10:	mov	w20, #0x1                   	// #1
  40af14:	b	40b25c <portable_detach+0x6f8>
  40af18:	ldr	w0, [sp, #92]
  40af1c:	cmp	w0, #0x0
  40af20:	b.ne	40af2c <portable_detach+0x3c8>  // b.any
  40af24:	mov	w20, #0x0                   	// #0
  40af28:	b	40b25c <portable_detach+0x6f8>
  40af2c:	ldr	x0, [sp, #288]
  40af30:	add	x1, x0, #0x13
  40af34:	add	x2, sp, #0x118
  40af38:	add	x0, sp, #0x150
  40af3c:	mov	x3, x2
  40af40:	mov	x2, x1
  40af44:	mov	x1, x0
  40af48:	mov	w0, #0x0                   	// #0
  40af4c:	bl	4047e0 <unit_file_lookup_state@plt>
  40af50:	str	w0, [sp, #92]
  40af54:	ldr	w0, [sp, #92]
  40af58:	cmp	w0, #0x0
  40af5c:	b.ge	40affc <portable_detach+0x498>  // b.tcont
  40af60:	mov	w0, #0x7                   	// #7
  40af64:	str	w0, [sp, #108]
  40af68:	ldr	w0, [sp, #92]
  40af6c:	str	w0, [sp, #112]
  40af70:	str	wzr, [sp, #116]
  40af74:	ldr	w0, [sp, #116]
  40af78:	bl	404e50 <log_get_max_level_realm@plt>
  40af7c:	mov	w1, w0
  40af80:	ldr	w0, [sp, #108]
  40af84:	and	w0, w0, #0x7
  40af88:	cmp	w1, w0
  40af8c:	b.lt	40afe0 <portable_detach+0x47c>  // b.tstop
  40af90:	ldr	w0, [sp, #116]
  40af94:	lsl	w1, w0, #10
  40af98:	ldr	w0, [sp, #108]
  40af9c:	orr	w7, w1, w0
  40afa0:	adrp	x0, 412000 <_fini+0x50>
  40afa4:	add	x1, x0, #0xa3
  40afa8:	ldr	x0, [sp, #288]
  40afac:	add	x0, x0, #0x13
  40afb0:	mov	x6, x0
  40afb4:	adrp	x0, 412000 <_fini+0x50>
  40afb8:	add	x5, x0, #0xd18
  40afbc:	adrp	x0, 413000 <_fini+0x1050>
  40afc0:	add	x4, x0, #0x460
  40afc4:	mov	w3, #0x4a5                 	// #1189
  40afc8:	mov	x2, x1
  40afcc:	ldr	w1, [sp, #112]
  40afd0:	mov	w0, w7
  40afd4:	bl	404a80 <log_internal_realm@plt>
  40afd8:	mov	w19, w0
  40afdc:	b	40aff4 <portable_detach+0x490>
  40afe0:	ldr	w0, [sp, #112]
  40afe4:	cmp	w0, #0x0
  40afe8:	cneg	w0, w0, lt  // lt = tstop
  40afec:	and	w0, w0, #0xff
  40aff0:	neg	w19, w0
  40aff4:	mov	w20, #0x1                   	// #1
  40aff8:	b	40b25c <portable_detach+0x6f8>
  40affc:	strb	wzr, [sp, #87]
  40b000:	ldr	w0, [sp, #280]
  40b004:	cmp	w0, #0x3
  40b008:	b.gt	40b018 <portable_detach+0x4b4>
  40b00c:	cmp	w0, #0x0
  40b010:	b.gt	40b024 <portable_detach+0x4c0>
  40b014:	b	40b02c <portable_detach+0x4c8>
  40b018:	sub	w0, w0, #0x6
  40b01c:	cmp	w0, #0x1
  40b020:	b.hi	40b02c <portable_detach+0x4c8>  // b.pmore
  40b024:	mov	w0, #0x1                   	// #1
  40b028:	strb	w0, [sp, #87]
  40b02c:	nop
  40b030:	ldrb	w0, [sp, #87]
  40b034:	eor	w0, w0, #0x1
  40b038:	and	w0, w0, #0xff
  40b03c:	cmp	w0, #0x0
  40b040:	b.eq	40b080 <portable_detach+0x51c>  // b.none
  40b044:	ldr	x0, [sp, #288]
  40b048:	add	x19, x0, #0x13
  40b04c:	ldr	w0, [sp, #280]
  40b050:	bl	404850 <unit_file_state_to_string@plt>
  40b054:	mov	x4, x0
  40b058:	mov	x3, x19
  40b05c:	adrp	x0, 412000 <_fini+0x50>
  40b060:	add	x2, x0, #0xd48
  40b064:	adrp	x0, 412000 <_fini+0x50>
  40b068:	add	x1, x0, #0xbb8
  40b06c:	ldr	x0, [sp, #32]
  40b070:	bl	404910 <sd_bus_error_setf@plt>
  40b074:	mov	w19, w0
  40b078:	mov	w20, #0x1                   	// #1
  40b07c:	b	40b25c <portable_detach+0x6f8>
  40b080:	ldr	x0, [sp, #288]
  40b084:	add	x0, x0, #0x13
  40b088:	ldr	x2, [sp, #32]
  40b08c:	mov	x1, x0
  40b090:	ldr	x0, [sp, #72]
  40b094:	bl	407944 <unit_file_is_active>
  40b098:	str	w0, [sp, #92]
  40b09c:	ldr	w0, [sp, #92]
  40b0a0:	cmp	w0, #0x0
  40b0a4:	b.ge	40b0b4 <portable_detach+0x550>  // b.tcont
  40b0a8:	ldr	w19, [sp, #92]
  40b0ac:	mov	w20, #0x1                   	// #1
  40b0b0:	b	40b25c <portable_detach+0x6f8>
  40b0b4:	ldr	w0, [sp, #92]
  40b0b8:	cmp	w0, #0x0
  40b0bc:	b.le	40b0f0 <portable_detach+0x58c>
  40b0c0:	ldr	x0, [sp, #288]
  40b0c4:	add	x0, x0, #0x13
  40b0c8:	mov	x3, x0
  40b0cc:	adrp	x0, 412000 <_fini+0x50>
  40b0d0:	add	x2, x0, #0xd78
  40b0d4:	adrp	x0, 412000 <_fini+0x50>
  40b0d8:	add	x1, x0, #0xbb8
  40b0dc:	ldr	x0, [sp, #32]
  40b0e0:	bl	404910 <sd_bus_error_setf@plt>
  40b0e4:	mov	w19, w0
  40b0e8:	mov	w20, #0x1                   	// #1
  40b0ec:	b	40b25c <portable_detach+0x6f8>
  40b0f0:	ldr	x2, [sp, #240]
  40b0f4:	ldr	x0, [sp, #288]
  40b0f8:	add	x0, x0, #0x13
  40b0fc:	mov	x1, x0
  40b100:	mov	x0, x2
  40b104:	bl	4049d0 <set_put_strdup@plt>
  40b108:	str	w0, [sp, #92]
  40b10c:	ldr	w0, [sp, #92]
  40b110:	cmp	w0, #0x0
  40b114:	b.ge	40b1b4 <portable_detach+0x650>  // b.tcont
  40b118:	mov	w0, #0x7                   	// #7
  40b11c:	str	w0, [sp, #96]
  40b120:	ldr	w0, [sp, #92]
  40b124:	str	w0, [sp, #100]
  40b128:	str	wzr, [sp, #104]
  40b12c:	ldr	w0, [sp, #104]
  40b130:	bl	404e50 <log_get_max_level_realm@plt>
  40b134:	mov	w1, w0
  40b138:	ldr	w0, [sp, #96]
  40b13c:	and	w0, w0, #0x7
  40b140:	cmp	w1, w0
  40b144:	b.lt	40b198 <portable_detach+0x634>  // b.tstop
  40b148:	ldr	w0, [sp, #104]
  40b14c:	lsl	w1, w0, #10
  40b150:	ldr	w0, [sp, #96]
  40b154:	orr	w7, w1, w0
  40b158:	adrp	x0, 412000 <_fini+0x50>
  40b15c:	add	x1, x0, #0xa3
  40b160:	ldr	x0, [sp, #288]
  40b164:	add	x0, x0, #0x13
  40b168:	mov	x6, x0
  40b16c:	adrp	x0, 412000 <_fini+0x50>
  40b170:	add	x5, x0, #0xda0
  40b174:	adrp	x0, 413000 <_fini+0x1050>
  40b178:	add	x4, x0, #0x460
  40b17c:	mov	w3, #0x4b1                 	// #1201
  40b180:	mov	x2, x1
  40b184:	ldr	w1, [sp, #100]
  40b188:	mov	w0, w7
  40b18c:	bl	404a80 <log_internal_realm@plt>
  40b190:	mov	w19, w0
  40b194:	b	40b1ac <portable_detach+0x648>
  40b198:	ldr	w0, [sp, #100]
  40b19c:	cmp	w0, #0x0
  40b1a0:	cneg	w0, w0, lt  // lt = tstop
  40b1a4:	and	w0, w0, #0xff
  40b1a8:	neg	w19, w0
  40b1ac:	mov	w20, #0x1                   	// #1
  40b1b0:	b	40b25c <portable_detach+0x6f8>
  40b1b4:	ldr	x0, [sp, #320]
  40b1b8:	bl	404720 <path_is_absolute@plt>
  40b1bc:	and	w0, w0, #0xff
  40b1c0:	cmp	w0, #0x0
  40b1c4:	b.eq	40b258 <portable_detach+0x6f4>  // b.none
  40b1c8:	ldr	x0, [sp, #320]
  40b1cc:	mov	x1, x0
  40b1d0:	mov	w0, #0x1                   	// #1
  40b1d4:	bl	4042e0 <image_in_search_path@plt>
  40b1d8:	and	w0, w0, #0xff
  40b1dc:	eor	w0, w0, #0x1
  40b1e0:	and	w0, w0, #0xff
  40b1e4:	cmp	w0, #0x0
  40b1e8:	b.eq	40b258 <portable_detach+0x6f4>  // b.none
  40b1ec:	add	x2, sp, #0xf8
  40b1f0:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40b1f4:	add	x1, x0, #0x730
  40b1f8:	mov	x0, x2
  40b1fc:	bl	404360 <internal_set_ensure_allocated@plt>
  40b200:	str	w0, [sp, #92]
  40b204:	ldr	w0, [sp, #92]
  40b208:	cmp	w0, #0x0
  40b20c:	b.ge	40b21c <portable_detach+0x6b8>  // b.tcont
  40b210:	ldr	w19, [sp, #92]
  40b214:	mov	w20, #0x1                   	// #1
  40b218:	b	40b25c <portable_detach+0x6f8>
  40b21c:	ldr	x0, [sp, #248]
  40b220:	ldr	x1, [sp, #320]
  40b224:	bl	404de0 <set_put@plt>
  40b228:	str	w0, [sp, #92]
  40b22c:	ldr	w0, [sp, #92]
  40b230:	cmp	w0, #0x0
  40b234:	b.lt	40b240 <portable_detach+0x6dc>  // b.tstop
  40b238:	str	xzr, [sp, #320]
  40b23c:	b	40b258 <portable_detach+0x6f4>
  40b240:	ldr	w0, [sp, #92]
  40b244:	cmn	w0, #0x11
  40b248:	b.eq	40b258 <portable_detach+0x6f4>  // b.none
  40b24c:	ldr	w19, [sp, #92]
  40b250:	mov	w20, #0x1                   	// #1
  40b254:	b	40b25c <portable_detach+0x6f8>
  40b258:	mov	w20, #0x2                   	// #2
  40b25c:	add	x0, sp, #0x140
  40b260:	bl	40511c <freep>
  40b264:	cmp	w20, #0x0
  40b268:	b.eq	40b27c <portable_detach+0x718>  // b.none
  40b26c:	cmp	w20, #0x2
  40b270:	b.ne	40baa4 <portable_detach+0xf40>  // b.any
  40b274:	b	40b27c <portable_detach+0x718>
  40b278:	nop
  40b27c:	bl	404820 <__errno_location@plt>
  40b280:	str	wzr, [x0]
  40b284:	ldr	x0, [sp, #256]
  40b288:	bl	4046a0 <readdir64@plt>
  40b28c:	str	x0, [sp, #288]
  40b290:	b	40ad64 <portable_detach+0x200>
  40b294:	nop
  40b298:	ldr	x0, [sp, #240]
  40b29c:	bl	405718 <set_isempty>
  40b2a0:	and	w0, w0, #0xff
  40b2a4:	cmp	w0, #0x0
  40b2a8:	b.ne	40ba08 <portable_detach+0xea4>  // b.any
  40b2ac:	mov	w0, #0xfffffffe            	// #-2
  40b2b0:	str	w0, [sp, #320]
  40b2b4:	str	xzr, [sp, #328]
  40b2b8:	b	40b6ac <portable_detach+0xb48>
  40b2bc:	str	xzr, [sp, #272]
  40b2c0:	ldr	x0, [sp, #256]
  40b2c4:	bl	404630 <dirfd@plt>
  40b2c8:	mov	w3, w0
  40b2cc:	ldr	x0, [sp, #264]
  40b2d0:	mov	w2, #0x0                   	// #0
  40b2d4:	mov	x1, x0
  40b2d8:	mov	w0, w3
  40b2dc:	bl	404cb0 <unlinkat@plt>
  40b2e0:	cmp	w0, #0x0
  40b2e4:	b.ge	40b3a0 <portable_detach+0x83c>  // b.tcont
  40b2e8:	mov	w0, #0x7                   	// #7
  40b2ec:	str	w0, [sp, #168]
  40b2f0:	bl	404820 <__errno_location@plt>
  40b2f4:	ldr	w0, [x0]
  40b2f8:	str	w0, [sp, #172]
  40b2fc:	str	wzr, [sp, #176]
  40b300:	ldr	w0, [sp, #176]
  40b304:	bl	404e50 <log_get_max_level_realm@plt>
  40b308:	mov	w1, w0
  40b30c:	ldr	w0, [sp, #168]
  40b310:	and	w0, w0, #0x7
  40b314:	cmp	w1, w0
  40b318:	b.lt	40b368 <portable_detach+0x804>  // b.tstop
  40b31c:	ldr	w0, [sp, #176]
  40b320:	lsl	w1, w0, #10
  40b324:	ldr	w0, [sp, #168]
  40b328:	orr	w8, w1, w0
  40b32c:	adrp	x0, 412000 <_fini+0x50>
  40b330:	add	x1, x0, #0xa3
  40b334:	ldr	x0, [sp, #264]
  40b338:	mov	x7, x0
  40b33c:	ldr	x6, [sp, #312]
  40b340:	adrp	x0, 412000 <_fini+0x50>
  40b344:	add	x5, x0, #0xdc8
  40b348:	adrp	x0, 413000 <_fini+0x1050>
  40b34c:	add	x4, x0, #0x460
  40b350:	mov	w3, #0x4ca                 	// #1226
  40b354:	mov	x2, x1
  40b358:	ldr	w1, [sp, #172]
  40b35c:	mov	w0, w8
  40b360:	bl	404a80 <log_internal_realm@plt>
  40b364:	b	40b370 <portable_detach+0x80c>
  40b368:	ldr	w0, [sp, #172]
  40b36c:	cmp	w0, #0x0
  40b370:	bl	404820 <__errno_location@plt>
  40b374:	ldr	w0, [x0]
  40b378:	cmp	w0, #0x2
  40b37c:	b.eq	40b3c0 <portable_detach+0x85c>  // b.none
  40b380:	ldr	w0, [sp, #88]
  40b384:	cmp	w0, #0x0
  40b388:	b.lt	40b3c0 <portable_detach+0x85c>  // b.tstop
  40b38c:	bl	404820 <__errno_location@plt>
  40b390:	ldr	w0, [x0]
  40b394:	neg	w0, w0
  40b398:	str	w0, [sp, #88]
  40b39c:	b	40b3c0 <portable_detach+0x85c>
  40b3a0:	ldr	x0, [sp, #264]
  40b3a4:	mov	x5, #0x0                   	// #0
  40b3a8:	mov	x4, x0
  40b3ac:	ldr	x3, [sp, #312]
  40b3b0:	mov	w2, #0x2                   	// #2
  40b3b4:	ldr	x1, [sp, #40]
  40b3b8:	ldr	x0, [sp, #48]
  40b3bc:	bl	4081f0 <portable_changes_add_with_prefix>
  40b3c0:	adrp	x0, 412000 <_fini+0x50>
  40b3c4:	add	x0, x0, #0xdf0
  40b3c8:	str	x0, [sp, #296]
  40b3cc:	ldr	x0, [sp, #296]
  40b3d0:	str	x0, [sp, #440]
  40b3d4:	adrp	x0, 412000 <_fini+0x50>
  40b3d8:	add	x0, x0, #0xc30
  40b3dc:	str	x0, [sp, #448]
  40b3e0:	str	xzr, [sp, #456]
  40b3e4:	add	x0, sp, #0x1b8
  40b3e8:	str	x0, [sp, #304]
  40b3ec:	b	40b558 <portable_detach+0x9f4>
  40b3f0:	str	xzr, [sp, #280]
  40b3f4:	ldr	x0, [sp, #264]
  40b3f8:	mov	x2, #0x0                   	// #0
  40b3fc:	ldr	x1, [sp, #296]
  40b400:	bl	4045d0 <strjoin_real@plt>
  40b404:	str	x0, [sp, #280]
  40b408:	ldr	x0, [sp, #280]
  40b40c:	cmp	x0, #0x0
  40b410:	b.ne	40b420 <portable_detach+0x8bc>  // b.any
  40b414:	mov	w19, #0xfffffff4            	// #-12
  40b418:	mov	w20, #0x0                   	// #0
  40b41c:	b	40b524 <portable_detach+0x9c0>
  40b420:	ldr	x0, [sp, #256]
  40b424:	bl	404630 <dirfd@plt>
  40b428:	mov	w3, w0
  40b42c:	ldr	x0, [sp, #280]
  40b430:	mov	w2, #0x0                   	// #0
  40b434:	mov	x1, x0
  40b438:	mov	w0, w3
  40b43c:	bl	404cb0 <unlinkat@plt>
  40b440:	cmp	w0, #0x0
  40b444:	b.ge	40b500 <portable_detach+0x99c>  // b.tcont
  40b448:	mov	w0, #0x7                   	// #7
  40b44c:	str	w0, [sp, #192]
  40b450:	bl	404820 <__errno_location@plt>
  40b454:	ldr	w0, [x0]
  40b458:	str	w0, [sp, #196]
  40b45c:	str	wzr, [sp, #200]
  40b460:	ldr	w0, [sp, #200]
  40b464:	bl	404e50 <log_get_max_level_realm@plt>
  40b468:	mov	w1, w0
  40b46c:	ldr	w0, [sp, #192]
  40b470:	and	w0, w0, #0x7
  40b474:	cmp	w1, w0
  40b478:	b.lt	40b4c8 <portable_detach+0x964>  // b.tstop
  40b47c:	ldr	w0, [sp, #200]
  40b480:	lsl	w1, w0, #10
  40b484:	ldr	w0, [sp, #192]
  40b488:	orr	w8, w1, w0
  40b48c:	adrp	x0, 412000 <_fini+0x50>
  40b490:	add	x1, x0, #0xa3
  40b494:	ldr	x0, [sp, #280]
  40b498:	mov	x7, x0
  40b49c:	ldr	x6, [sp, #312]
  40b4a0:	adrp	x0, 412000 <_fini+0x50>
  40b4a4:	add	x5, x0, #0xe08
  40b4a8:	adrp	x0, 413000 <_fini+0x1050>
  40b4ac:	add	x4, x0, #0x460
  40b4b0:	mov	w3, #0x4d9                 	// #1241
  40b4b4:	mov	x2, x1
  40b4b8:	ldr	w1, [sp, #196]
  40b4bc:	mov	w0, w8
  40b4c0:	bl	404a80 <log_internal_realm@plt>
  40b4c4:	b	40b4d0 <portable_detach+0x96c>
  40b4c8:	ldr	w0, [sp, #196]
  40b4cc:	cmp	w0, #0x0
  40b4d0:	bl	404820 <__errno_location@plt>
  40b4d4:	ldr	w0, [x0]
  40b4d8:	cmp	w0, #0x2
  40b4dc:	b.eq	40b520 <portable_detach+0x9bc>  // b.none
  40b4e0:	ldr	w0, [sp, #88]
  40b4e4:	cmp	w0, #0x0
  40b4e8:	b.lt	40b520 <portable_detach+0x9bc>  // b.tstop
  40b4ec:	bl	404820 <__errno_location@plt>
  40b4f0:	ldr	w0, [x0]
  40b4f4:	neg	w0, w0
  40b4f8:	str	w0, [sp, #88]
  40b4fc:	b	40b520 <portable_detach+0x9bc>
  40b500:	ldr	x0, [sp, #280]
  40b504:	mov	x5, #0x0                   	// #0
  40b508:	mov	x4, x0
  40b50c:	ldr	x3, [sp, #312]
  40b510:	mov	w2, #0x2                   	// #2
  40b514:	ldr	x1, [sp, #40]
  40b518:	ldr	x0, [sp, #48]
  40b51c:	bl	4081f0 <portable_changes_add_with_prefix>
  40b520:	mov	w20, #0x1                   	// #1
  40b524:	add	x0, sp, #0x118
  40b528:	bl	40511c <freep>
  40b52c:	cmp	w20, #0x1
  40b530:	b.ne	40b550 <portable_detach+0x9ec>  // b.any
  40b534:	ldr	x0, [sp, #304]
  40b538:	add	x0, x0, #0x8
  40b53c:	str	x0, [sp, #304]
  40b540:	ldr	x0, [sp, #304]
  40b544:	ldr	x0, [x0]
  40b548:	str	x0, [sp, #296]
  40b54c:	b	40b558 <portable_detach+0x9f4>
  40b550:	mov	w20, #0x0                   	// #0
  40b554:	b	40b69c <portable_detach+0xb38>
  40b558:	ldr	x0, [sp, #296]
  40b55c:	cmp	x0, #0x0
  40b560:	b.ne	40b3f0 <portable_detach+0x88c>  // b.any
  40b564:	ldr	x3, [sp, #264]
  40b568:	mov	x2, #0x0                   	// #0
  40b56c:	adrp	x0, 412000 <_fini+0x50>
  40b570:	add	x1, x0, #0xa10
  40b574:	mov	x0, x3
  40b578:	bl	4045d0 <strjoin_real@plt>
  40b57c:	str	x0, [sp, #272]
  40b580:	ldr	x0, [sp, #272]
  40b584:	cmp	x0, #0x0
  40b588:	b.ne	40b598 <portable_detach+0xa34>  // b.any
  40b58c:	mov	w19, #0xfffffff4            	// #-12
  40b590:	mov	w20, #0x0                   	// #0
  40b594:	b	40b69c <portable_detach+0xb38>
  40b598:	ldr	x0, [sp, #256]
  40b59c:	bl	404630 <dirfd@plt>
  40b5a0:	mov	w3, w0
  40b5a4:	ldr	x0, [sp, #272]
  40b5a8:	mov	w2, #0x200                 	// #512
  40b5ac:	mov	x1, x0
  40b5b0:	mov	w0, w3
  40b5b4:	bl	404cb0 <unlinkat@plt>
  40b5b8:	cmp	w0, #0x0
  40b5bc:	b.ge	40b678 <portable_detach+0xb14>  // b.tcont
  40b5c0:	mov	w0, #0x7                   	// #7
  40b5c4:	str	w0, [sp, #180]
  40b5c8:	bl	404820 <__errno_location@plt>
  40b5cc:	ldr	w0, [x0]
  40b5d0:	str	w0, [sp, #184]
  40b5d4:	str	wzr, [sp, #188]
  40b5d8:	ldr	w0, [sp, #188]
  40b5dc:	bl	404e50 <log_get_max_level_realm@plt>
  40b5e0:	mov	w1, w0
  40b5e4:	ldr	w0, [sp, #180]
  40b5e8:	and	w0, w0, #0x7
  40b5ec:	cmp	w1, w0
  40b5f0:	b.lt	40b640 <portable_detach+0xadc>  // b.tstop
  40b5f4:	ldr	w0, [sp, #188]
  40b5f8:	lsl	w1, w0, #10
  40b5fc:	ldr	w0, [sp, #180]
  40b600:	orr	w8, w1, w0
  40b604:	adrp	x0, 412000 <_fini+0x50>
  40b608:	add	x1, x0, #0xa3
  40b60c:	ldr	x0, [sp, #272]
  40b610:	mov	x7, x0
  40b614:	ldr	x6, [sp, #312]
  40b618:	adrp	x0, 412000 <_fini+0x50>
  40b61c:	add	x5, x0, #0xe28
  40b620:	adrp	x0, 413000 <_fini+0x1050>
  40b624:	add	x4, x0, #0x460
  40b628:	mov	w3, #0x4e6                 	// #1254
  40b62c:	mov	x2, x1
  40b630:	ldr	w1, [sp, #184]
  40b634:	mov	w0, w8
  40b638:	bl	404a80 <log_internal_realm@plt>
  40b63c:	b	40b648 <portable_detach+0xae4>
  40b640:	ldr	w0, [sp, #184]
  40b644:	cmp	w0, #0x0
  40b648:	bl	404820 <__errno_location@plt>
  40b64c:	ldr	w0, [x0]
  40b650:	cmp	w0, #0x2
  40b654:	b.eq	40b698 <portable_detach+0xb34>  // b.none
  40b658:	ldr	w0, [sp, #88]
  40b65c:	cmp	w0, #0x0
  40b660:	b.lt	40b698 <portable_detach+0xb34>  // b.tstop
  40b664:	bl	404820 <__errno_location@plt>
  40b668:	ldr	w0, [x0]
  40b66c:	neg	w0, w0
  40b670:	str	w0, [sp, #88]
  40b674:	b	40b698 <portable_detach+0xb34>
  40b678:	ldr	x0, [sp, #272]
  40b67c:	mov	x5, #0x0                   	// #0
  40b680:	mov	x4, x0
  40b684:	ldr	x3, [sp, #312]
  40b688:	mov	w2, #0x2                   	// #2
  40b68c:	ldr	x1, [sp, #40]
  40b690:	ldr	x0, [sp, #48]
  40b694:	bl	4081f0 <portable_changes_add_with_prefix>
  40b698:	mov	w20, #0x1                   	// #1
  40b69c:	add	x0, sp, #0x110
  40b6a0:	bl	40511c <freep>
  40b6a4:	cmp	w20, #0x1
  40b6a8:	b.ne	40baa4 <portable_detach+0xf40>  // b.any
  40b6ac:	ldr	x0, [sp, #240]
  40b6b0:	add	x2, sp, #0x108
  40b6b4:	add	x1, sp, #0x140
  40b6b8:	bl	4047c0 <set_iterate@plt>
  40b6bc:	and	w0, w0, #0xff
  40b6c0:	cmp	w0, #0x0
  40b6c4:	b.ne	40b2bc <portable_detach+0x758>  // b.any
  40b6c8:	mov	w0, #0xfffffffe            	// #-2
  40b6cc:	str	w0, [sp, #320]
  40b6d0:	str	xzr, [sp, #328]
  40b6d4:	b	40b9b4 <portable_detach+0xe50>
  40b6d8:	str	xzr, [sp, #280]
  40b6dc:	ldr	x0, [sp, #264]
  40b6e0:	add	x1, sp, #0x118
  40b6e4:	mov	x2, x1
  40b6e8:	ldr	w1, [sp, #60]
  40b6ec:	bl	409cc0 <image_symlink>
  40b6f0:	str	w0, [sp, #92]
  40b6f4:	ldr	w0, [sp, #92]
  40b6f8:	cmp	w0, #0x0
  40b6fc:	b.ge	40b788 <portable_detach+0xc24>  // b.tcont
  40b700:	mov	w0, #0x7                   	// #7
  40b704:	str	w0, [sp, #156]
  40b708:	ldr	w0, [sp, #92]
  40b70c:	str	w0, [sp, #160]
  40b710:	str	wzr, [sp, #164]
  40b714:	ldr	w0, [sp, #164]
  40b718:	bl	404e50 <log_get_max_level_realm@plt>
  40b71c:	mov	w1, w0
  40b720:	ldr	w0, [sp, #156]
  40b724:	and	w0, w0, #0x7
  40b728:	cmp	w1, w0
  40b72c:	b.lt	40b778 <portable_detach+0xc14>  // b.tstop
  40b730:	ldr	w0, [sp, #164]
  40b734:	lsl	w1, w0, #10
  40b738:	ldr	w0, [sp, #156]
  40b73c:	orr	w7, w1, w0
  40b740:	adrp	x0, 412000 <_fini+0x50>
  40b744:	add	x1, x0, #0xa3
  40b748:	ldr	x0, [sp, #264]
  40b74c:	mov	x6, x0
  40b750:	adrp	x0, 412000 <_fini+0x50>
  40b754:	add	x5, x0, #0xe58
  40b758:	adrp	x0, 413000 <_fini+0x1050>
  40b75c:	add	x4, x0, #0x460
  40b760:	mov	w3, #0x4f5                 	// #1269
  40b764:	mov	x2, x1
  40b768:	ldr	w1, [sp, #160]
  40b76c:	mov	w0, w7
  40b770:	bl	404a80 <log_internal_realm@plt>
  40b774:	b	40b780 <portable_detach+0xc1c>
  40b778:	ldr	w0, [sp, #160]
  40b77c:	cmp	w0, #0x0
  40b780:	mov	w19, #0x0                   	// #0
  40b784:	b	40b9a0 <portable_detach+0xe3c>
  40b788:	ldr	x0, [sp, #280]
  40b78c:	add	x1, sp, #0x1b8
  40b790:	bl	411fa0 <lstat64>
  40b794:	cmp	w0, #0x0
  40b798:	b.ge	40b828 <portable_detach+0xcc4>  // b.tcont
  40b79c:	mov	w0, #0x7                   	// #7
  40b7a0:	str	w0, [sp, #144]
  40b7a4:	bl	404820 <__errno_location@plt>
  40b7a8:	ldr	w0, [x0]
  40b7ac:	str	w0, [sp, #148]
  40b7b0:	str	wzr, [sp, #152]
  40b7b4:	ldr	w0, [sp, #152]
  40b7b8:	bl	404e50 <log_get_max_level_realm@plt>
  40b7bc:	mov	w1, w0
  40b7c0:	ldr	w0, [sp, #144]
  40b7c4:	and	w0, w0, #0x7
  40b7c8:	cmp	w1, w0
  40b7cc:	b.lt	40b818 <portable_detach+0xcb4>  // b.tstop
  40b7d0:	ldr	w0, [sp, #152]
  40b7d4:	lsl	w1, w0, #10
  40b7d8:	ldr	w0, [sp, #144]
  40b7dc:	orr	w7, w1, w0
  40b7e0:	adrp	x0, 412000 <_fini+0x50>
  40b7e4:	add	x1, x0, #0xa3
  40b7e8:	ldr	x0, [sp, #280]
  40b7ec:	mov	x6, x0
  40b7f0:	adrp	x0, 412000 <_fini+0x50>
  40b7f4:	add	x5, x0, #0xe98
  40b7f8:	adrp	x0, 413000 <_fini+0x1050>
  40b7fc:	add	x4, x0, #0x460
  40b800:	mov	w3, #0x4fa                 	// #1274
  40b804:	mov	x2, x1
  40b808:	ldr	w1, [sp, #148]
  40b80c:	mov	w0, w7
  40b810:	bl	404a80 <log_internal_realm@plt>
  40b814:	b	40b820 <portable_detach+0xcbc>
  40b818:	ldr	w0, [sp, #148]
  40b81c:	cmp	w0, #0x0
  40b820:	mov	w19, #0x0                   	// #0
  40b824:	b	40b9a0 <portable_detach+0xe3c>
  40b828:	ldr	w0, [sp, #456]
  40b82c:	and	w0, w0, #0xf000
  40b830:	cmp	w0, #0xa, lsl #12
  40b834:	b.eq	40b8bc <portable_detach+0xd58>  // b.none
  40b838:	mov	w0, #0x7                   	// #7
  40b83c:	str	w0, [sp, #132]
  40b840:	str	wzr, [sp, #136]
  40b844:	str	wzr, [sp, #140]
  40b848:	ldr	w0, [sp, #140]
  40b84c:	bl	404e50 <log_get_max_level_realm@plt>
  40b850:	mov	w1, w0
  40b854:	ldr	w0, [sp, #132]
  40b858:	and	w0, w0, #0x7
  40b85c:	cmp	w1, w0
  40b860:	b.lt	40b8ac <portable_detach+0xd48>  // b.tstop
  40b864:	ldr	w0, [sp, #140]
  40b868:	lsl	w1, w0, #10
  40b86c:	ldr	w0, [sp, #132]
  40b870:	orr	w7, w1, w0
  40b874:	adrp	x0, 412000 <_fini+0x50>
  40b878:	add	x1, x0, #0xa3
  40b87c:	ldr	x0, [sp, #280]
  40b880:	mov	x6, x0
  40b884:	adrp	x0, 412000 <_fini+0x50>
  40b888:	add	x5, x0, #0xec0
  40b88c:	adrp	x0, 413000 <_fini+0x1050>
  40b890:	add	x4, x0, #0x460
  40b894:	mov	w3, #0x4ff                 	// #1279
  40b898:	mov	x2, x1
  40b89c:	ldr	w1, [sp, #136]
  40b8a0:	mov	w0, w7
  40b8a4:	bl	404a80 <log_internal_realm@plt>
  40b8a8:	b	40b8b4 <portable_detach+0xd50>
  40b8ac:	ldr	w0, [sp, #136]
  40b8b0:	cmp	w0, #0x0
  40b8b4:	mov	w19, #0x0                   	// #0
  40b8b8:	b	40b9a0 <portable_detach+0xe3c>
  40b8bc:	ldr	x0, [sp, #280]
  40b8c0:	bl	404300 <unlink@plt>
  40b8c4:	cmp	w0, #0x0
  40b8c8:	b.ge	40b980 <portable_detach+0xe1c>  // b.tcont
  40b8cc:	mov	w0, #0x7                   	// #7
  40b8d0:	str	w0, [sp, #120]
  40b8d4:	bl	404820 <__errno_location@plt>
  40b8d8:	ldr	w0, [x0]
  40b8dc:	str	w0, [sp, #124]
  40b8e0:	str	wzr, [sp, #128]
  40b8e4:	ldr	w0, [sp, #128]
  40b8e8:	bl	404e50 <log_get_max_level_realm@plt>
  40b8ec:	mov	w1, w0
  40b8f0:	ldr	w0, [sp, #120]
  40b8f4:	and	w0, w0, #0x7
  40b8f8:	cmp	w1, w0
  40b8fc:	b.lt	40b948 <portable_detach+0xde4>  // b.tstop
  40b900:	ldr	w0, [sp, #128]
  40b904:	lsl	w1, w0, #10
  40b908:	ldr	w0, [sp, #120]
  40b90c:	orr	w7, w1, w0
  40b910:	adrp	x0, 412000 <_fini+0x50>
  40b914:	add	x1, x0, #0xa3
  40b918:	ldr	x0, [sp, #280]
  40b91c:	mov	x6, x0
  40b920:	adrp	x0, 412000 <_fini+0x50>
  40b924:	add	x5, x0, #0xee8
  40b928:	adrp	x0, 413000 <_fini+0x1050>
  40b92c:	add	x4, x0, #0x460
  40b930:	mov	w3, #0x504                 	// #1284
  40b934:	mov	x2, x1
  40b938:	ldr	w1, [sp, #124]
  40b93c:	mov	w0, w7
  40b940:	bl	404a80 <log_internal_realm@plt>
  40b944:	b	40b950 <portable_detach+0xdec>
  40b948:	ldr	w0, [sp, #124]
  40b94c:	cmp	w0, #0x0
  40b950:	bl	404820 <__errno_location@plt>
  40b954:	ldr	w0, [x0]
  40b958:	cmp	w0, #0x2
  40b95c:	b.eq	40b99c <portable_detach+0xe38>  // b.none
  40b960:	ldr	w0, [sp, #88]
  40b964:	cmp	w0, #0x0
  40b968:	b.lt	40b99c <portable_detach+0xe38>  // b.tstop
  40b96c:	bl	404820 <__errno_location@plt>
  40b970:	ldr	w0, [x0]
  40b974:	neg	w0, w0
  40b978:	str	w0, [sp, #88]
  40b97c:	b	40b99c <portable_detach+0xe38>
  40b980:	ldr	x0, [sp, #280]
  40b984:	mov	x4, #0x0                   	// #0
  40b988:	mov	x3, x0
  40b98c:	mov	w2, #0x2                   	// #2
  40b990:	ldr	x1, [sp, #40]
  40b994:	ldr	x0, [sp, #48]
  40b998:	bl	407fac <portable_changes_add>
  40b99c:	mov	w19, #0x1                   	// #1
  40b9a0:	add	x0, sp, #0x118
  40b9a4:	bl	40511c <freep>
  40b9a8:	cmp	w19, #0x1
  40b9ac:	b.ne	40b9b4 <portable_detach+0xe50>  // b.any
  40b9b0:	nop
  40b9b4:	ldr	x0, [sp, #248]
  40b9b8:	add	x2, sp, #0x108
  40b9bc:	add	x1, sp, #0x140
  40b9c0:	bl	4047c0 <set_iterate@plt>
  40b9c4:	and	w0, w0, #0xff
  40b9c8:	cmp	w0, #0x0
  40b9cc:	b.ne	40b6d8 <portable_detach+0xb74>  // b.any
  40b9d0:	ldr	x0, [sp, #312]
  40b9d4:	bl	404810 <rmdir@plt>
  40b9d8:	cmp	w0, #0x0
  40b9dc:	b.lt	40b9f8 <portable_detach+0xe94>  // b.tstop
  40b9e0:	mov	x4, #0x0                   	// #0
  40b9e4:	ldr	x3, [sp, #312]
  40b9e8:	mov	w2, #0x2                   	// #2
  40b9ec:	ldr	x1, [sp, #40]
  40b9f0:	ldr	x0, [sp, #48]
  40b9f4:	bl	407fac <portable_changes_add>
  40b9f8:	ldr	w19, [sp, #88]
  40b9fc:	b	40baa4 <portable_detach+0xf40>
  40ba00:	nop
  40ba04:	b	40ba0c <portable_detach+0xea8>
  40ba08:	nop
  40ba0c:	mov	w0, #0x7                   	// #7
  40ba10:	str	w0, [sp, #228]
  40ba14:	str	wzr, [sp, #232]
  40ba18:	str	wzr, [sp, #236]
  40ba1c:	ldr	w0, [sp, #236]
  40ba20:	bl	404e50 <log_get_max_level_realm@plt>
  40ba24:	mov	w1, w0
  40ba28:	ldr	w0, [sp, #228]
  40ba2c:	and	w0, w0, #0x7
  40ba30:	cmp	w1, w0
  40ba34:	b.lt	40ba7c <portable_detach+0xf18>  // b.tstop
  40ba38:	ldr	w0, [sp, #236]
  40ba3c:	lsl	w1, w0, #10
  40ba40:	ldr	w0, [sp, #228]
  40ba44:	orr	w7, w1, w0
  40ba48:	adrp	x0, 412000 <_fini+0x50>
  40ba4c:	add	x1, x0, #0xa3
  40ba50:	ldr	x6, [sp, #64]
  40ba54:	adrp	x0, 412000 <_fini+0x50>
  40ba58:	add	x5, x0, #0xf10
  40ba5c:	adrp	x0, 413000 <_fini+0x1050>
  40ba60:	add	x4, x0, #0x460
  40ba64:	mov	w3, #0x513                 	// #1299
  40ba68:	mov	x2, x1
  40ba6c:	ldr	w1, [sp, #232]
  40ba70:	mov	w0, w7
  40ba74:	bl	404a80 <log_internal_realm@plt>
  40ba78:	b	40ba84 <portable_detach+0xf20>
  40ba7c:	ldr	w0, [sp, #232]
  40ba80:	cmp	w0, #0x0
  40ba84:	ldr	x3, [sp, #64]
  40ba88:	adrp	x0, 412000 <_fini+0x50>
  40ba8c:	add	x2, x0, #0xf10
  40ba90:	adrp	x0, 412000 <_fini+0x50>
  40ba94:	add	x1, x0, #0xf50
  40ba98:	ldr	x0, [sp, #32]
  40ba9c:	bl	404910 <sd_bus_error_setf@plt>
  40baa0:	mov	w19, w0
  40baa4:	add	x0, sp, #0x100
  40baa8:	bl	405474 <closedirp>
  40baac:	add	x0, sp, #0xf8
  40bab0:	bl	405740 <set_free_freep>
  40bab4:	add	x0, sp, #0xf0
  40bab8:	bl	405740 <set_free_freep>
  40babc:	add	x0, sp, #0x150
  40bac0:	bl	4043d0 <lookup_paths_free@plt>
  40bac4:	mov	w1, w19
  40bac8:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40bacc:	add	x0, x0, #0x728
  40bad0:	ldr	x2, [sp, #568]
  40bad4:	ldr	x0, [x0]
  40bad8:	eor	x0, x2, x0
  40badc:	cmp	x0, #0x0
  40bae0:	b.eq	40bae8 <portable_detach+0xf84>  // b.none
  40bae4:	bl	404930 <__stack_chk_fail@plt>
  40bae8:	mov	w0, w1
  40baec:	ldp	x19, x20, [sp, #16]
  40baf0:	ldp	x29, x30, [sp]
  40baf4:	add	sp, sp, #0x240
  40baf8:	ret

000000000040bafc <portable_get_state_internal>:
  40bafc:	stp	x29, x30, [sp, #-288]!
  40bb00:	mov	x29, sp
  40bb04:	str	x19, [sp, #16]
  40bb08:	str	x0, [sp, #72]
  40bb0c:	str	x1, [sp, #64]
  40bb10:	str	w2, [sp, #60]
  40bb14:	str	x3, [sp, #48]
  40bb18:	str	x4, [sp, #40]
  40bb1c:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40bb20:	add	x0, x0, #0x728
  40bb24:	ldr	x1, [x0]
  40bb28:	str	x1, [sp, #280]
  40bb2c:	mov	x1, #0x0                   	// #0
  40bb30:	stp	xzr, xzr, [sp, #176]
  40bb34:	stp	xzr, xzr, [sp, #192]
  40bb38:	stp	xzr, xzr, [sp, #208]
  40bb3c:	stp	xzr, xzr, [sp, #224]
  40bb40:	stp	xzr, xzr, [sp, #240]
  40bb44:	stp	xzr, xzr, [sp, #256]
  40bb48:	str	xzr, [sp, #272]
  40bb4c:	strb	wzr, [sp, #84]
  40bb50:	strb	wzr, [sp, #85]
  40bb54:	str	xzr, [sp, #144]
  40bb58:	str	xzr, [sp, #152]
  40bb5c:	ldr	x0, [sp, #64]
  40bb60:	cmp	x0, #0x0
  40bb64:	cset	w0, eq  // eq = none
  40bb68:	and	w0, w0, #0xff
  40bb6c:	and	x0, x0, #0xff
  40bb70:	cmp	x0, #0x0
  40bb74:	b.eq	40bba0 <portable_get_state_internal+0xa4>  // b.none
  40bb78:	adrp	x0, 412000 <_fini+0x50>
  40bb7c:	add	x1, x0, #0xa3
  40bb80:	adrp	x0, 413000 <_fini+0x1050>
  40bb84:	add	x4, x0, #0x470
  40bb88:	mov	w3, #0x526                 	// #1318
  40bb8c:	mov	x2, x1
  40bb90:	adrp	x0, 412000 <_fini+0x50>
  40bb94:	add	x1, x0, #0x638
  40bb98:	mov	w0, #0x0                   	// #0
  40bb9c:	bl	404670 <log_assert_failed_realm@plt>
  40bba0:	ldr	x0, [sp, #48]
  40bba4:	cmp	x0, #0x0
  40bba8:	cset	w0, eq  // eq = none
  40bbac:	and	w0, w0, #0xff
  40bbb0:	and	x0, x0, #0xff
  40bbb4:	cmp	x0, #0x0
  40bbb8:	b.eq	40bbe4 <portable_get_state_internal+0xe8>  // b.none
  40bbbc:	adrp	x0, 412000 <_fini+0x50>
  40bbc0:	add	x1, x0, #0xa3
  40bbc4:	adrp	x0, 413000 <_fini+0x1050>
  40bbc8:	add	x4, x0, #0x470
  40bbcc:	mov	w3, #0x527                 	// #1319
  40bbd0:	mov	x2, x1
  40bbd4:	adrp	x0, 412000 <_fini+0x50>
  40bbd8:	add	x1, x0, #0x900
  40bbdc:	mov	w0, #0x0                   	// #0
  40bbe0:	bl	404670 <log_assert_failed_realm@plt>
  40bbe4:	add	x0, sp, #0xb0
  40bbe8:	mov	x3, #0x0                   	// #0
  40bbec:	mov	w2, #0x4                   	// #4
  40bbf0:	mov	w1, #0x0                   	// #0
  40bbf4:	bl	404a60 <lookup_paths_init@plt>
  40bbf8:	str	w0, [sp, #92]
  40bbfc:	ldr	w0, [sp, #92]
  40bc00:	cmp	w0, #0x0
  40bc04:	b.ge	40bc10 <portable_get_state_internal+0x114>  // b.tcont
  40bc08:	ldr	w19, [sp, #92]
  40bc0c:	b	40c1e0 <portable_get_state_internal+0x6e4>
  40bc10:	add	x0, sp, #0xb0
  40bc14:	ldr	w1, [sp, #60]
  40bc18:	bl	4092a4 <attached_path>
  40bc1c:	str	x0, [sp, #168]
  40bc20:	ldr	x0, [sp, #168]
  40bc24:	bl	404be0 <opendir@plt>
  40bc28:	str	x0, [sp, #152]
  40bc2c:	ldr	x0, [sp, #152]
  40bc30:	cmp	x0, #0x0
  40bc34:	b.ne	40bcec <portable_get_state_internal+0x1f0>  // b.any
  40bc38:	bl	404820 <__errno_location@plt>
  40bc3c:	ldr	w0, [x0]
  40bc40:	cmp	w0, #0x2
  40bc44:	b.ne	40bc58 <portable_get_state_internal+0x15c>  // b.any
  40bc48:	ldr	x0, [sp, #48]
  40bc4c:	str	wzr, [x0]
  40bc50:	mov	w19, #0x0                   	// #0
  40bc54:	b	40c1e0 <portable_get_state_internal+0x6e4>
  40bc58:	mov	w0, #0x7                   	// #7
  40bc5c:	str	w0, [sp, #132]
  40bc60:	bl	404820 <__errno_location@plt>
  40bc64:	ldr	w0, [x0]
  40bc68:	str	w0, [sp, #136]
  40bc6c:	str	wzr, [sp, #140]
  40bc70:	ldr	w0, [sp, #140]
  40bc74:	bl	404e50 <log_get_max_level_realm@plt>
  40bc78:	mov	w1, w0
  40bc7c:	ldr	w0, [sp, #132]
  40bc80:	and	w0, w0, #0x7
  40bc84:	cmp	w1, w0
  40bc88:	b.lt	40bcd4 <portable_get_state_internal+0x1d8>  // b.tstop
  40bc8c:	ldr	w0, [sp, #140]
  40bc90:	lsl	w1, w0, #10
  40bc94:	ldr	w0, [sp, #132]
  40bc98:	orr	w7, w1, w0
  40bc9c:	adrp	x0, 412000 <_fini+0x50>
  40bca0:	add	x1, x0, #0xa3
  40bca4:	ldr	x6, [sp, #168]
  40bca8:	adrp	x0, 412000 <_fini+0x50>
  40bcac:	add	x5, x0, #0xcc8
  40bcb0:	adrp	x0, 413000 <_fini+0x1050>
  40bcb4:	add	x4, x0, #0x490
  40bcb8:	mov	w3, #0x537                 	// #1335
  40bcbc:	mov	x2, x1
  40bcc0:	ldr	w1, [sp, #136]
  40bcc4:	mov	w0, w7
  40bcc8:	bl	404a80 <log_internal_realm@plt>
  40bccc:	mov	w19, w0
  40bcd0:	b	40c1e0 <portable_get_state_internal+0x6e4>
  40bcd4:	ldr	w0, [sp, #136]
  40bcd8:	cmp	w0, #0x0
  40bcdc:	cneg	w0, w0, lt  // lt = tstop
  40bce0:	and	w0, w0, #0xff
  40bce4:	neg	w19, w0
  40bce8:	b	40c1e0 <portable_get_state_internal+0x6e4>
  40bcec:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40bcf0:	add	x0, x0, #0x750
  40bcf4:	bl	4048a0 <internal_set_new@plt>
  40bcf8:	str	x0, [sp, #144]
  40bcfc:	ldr	x0, [sp, #144]
  40bd00:	cmp	x0, #0x0
  40bd04:	b.ne	40bd10 <portable_get_state_internal+0x214>  // b.any
  40bd08:	mov	w19, #0xfffffff4            	// #-12
  40bd0c:	b	40c1e0 <portable_get_state_internal+0x6e4>
  40bd10:	bl	404820 <__errno_location@plt>
  40bd14:	str	wzr, [x0]
  40bd18:	ldr	x0, [sp, #152]
  40bd1c:	bl	4046a0 <readdir64@plt>
  40bd20:	str	x0, [sp, #160]
  40bd24:	ldr	x0, [sp, #160]
  40bd28:	cmp	x0, #0x0
  40bd2c:	b.ne	40bdd4 <portable_get_state_internal+0x2d8>  // b.any
  40bd30:	bl	404820 <__errno_location@plt>
  40bd34:	ldr	w0, [x0]
  40bd38:	cmp	w0, #0x0
  40bd3c:	b.le	40c11c <portable_get_state_internal+0x620>
  40bd40:	mov	w0, #0x7                   	// #7
  40bd44:	str	w0, [sp, #120]
  40bd48:	bl	404820 <__errno_location@plt>
  40bd4c:	ldr	w0, [x0]
  40bd50:	str	w0, [sp, #124]
  40bd54:	str	wzr, [sp, #128]
  40bd58:	ldr	w0, [sp, #128]
  40bd5c:	bl	404e50 <log_get_max_level_realm@plt>
  40bd60:	mov	w1, w0
  40bd64:	ldr	w0, [sp, #120]
  40bd68:	and	w0, w0, #0x7
  40bd6c:	cmp	w1, w0
  40bd70:	b.lt	40bdbc <portable_get_state_internal+0x2c0>  // b.tstop
  40bd74:	ldr	w0, [sp, #128]
  40bd78:	lsl	w1, w0, #10
  40bd7c:	ldr	w0, [sp, #120]
  40bd80:	orr	w7, w1, w0
  40bd84:	adrp	x0, 412000 <_fini+0x50>
  40bd88:	add	x1, x0, #0xa3
  40bd8c:	ldr	x6, [sp, #168]
  40bd90:	adrp	x0, 412000 <_fini+0x50>
  40bd94:	add	x5, x0, #0xcf0
  40bd98:	adrp	x0, 413000 <_fini+0x1050>
  40bd9c:	add	x4, x0, #0x490
  40bda0:	mov	w3, #0x53e                 	// #1342
  40bda4:	mov	x2, x1
  40bda8:	ldr	w1, [sp, #124]
  40bdac:	mov	w0, w7
  40bdb0:	bl	404a80 <log_internal_realm@plt>
  40bdb4:	mov	w19, w0
  40bdb8:	b	40c1e0 <portable_get_state_internal+0x6e4>
  40bdbc:	ldr	w0, [sp, #124]
  40bdc0:	cmp	w0, #0x0
  40bdc4:	cneg	w0, w0, lt  // lt = tstop
  40bdc8:	and	w0, w0, #0xff
  40bdcc:	neg	w19, w0
  40bdd0:	b	40c1e0 <portable_get_state_internal+0x6e4>
  40bdd4:	ldr	x0, [sp, #160]
  40bdd8:	add	x0, x0, #0x13
  40bddc:	bl	4044c0 <hidden_or_backup_file@plt>
  40bde0:	and	w0, w0, #0xff
  40bde4:	cmp	w0, #0x0
  40bde8:	b.ne	40c0e0 <portable_get_state_internal+0x5e4>  // b.any
  40bdec:	ldr	x0, [sp, #160]
  40bdf0:	add	x0, x0, #0x13
  40bdf4:	mov	w1, #0x7                   	// #7
  40bdf8:	bl	404e30 <unit_name_is_valid@plt>
  40bdfc:	and	w0, w0, #0xff
  40be00:	eor	w0, w0, #0x1
  40be04:	and	w0, w0, #0xff
  40be08:	cmp	w0, #0x0
  40be0c:	b.ne	40c0e8 <portable_get_state_internal+0x5ec>  // b.any
  40be10:	ldr	x2, [sp, #144]
  40be14:	ldr	x0, [sp, #160]
  40be18:	add	x0, x0, #0x13
  40be1c:	mov	x1, x0
  40be20:	mov	x0, x2
  40be24:	bl	4056d8 <set_get>
  40be28:	cmp	x0, #0x0
  40be2c:	b.ne	40c0f0 <portable_get_state_internal+0x5f4>  // b.any
  40be30:	ldr	x0, [sp, #152]
  40be34:	ldr	x1, [sp, #160]
  40be38:	bl	404560 <dirent_ensure_type@plt>
  40be3c:	strb	wzr, [sp, #86]
  40be40:	ldr	x0, [sp, #160]
  40be44:	ldrb	w0, [x0, #18]
  40be48:	cmp	w0, #0x8
  40be4c:	b.eq	40be58 <portable_get_state_internal+0x35c>  // b.none
  40be50:	cmp	w0, #0xa
  40be54:	b.ne	40be60 <portable_get_state_internal+0x364>  // b.any
  40be58:	mov	w0, #0x1                   	// #1
  40be5c:	strb	w0, [sp, #86]
  40be60:	nop
  40be64:	ldrb	w0, [sp, #86]
  40be68:	eor	w0, w0, #0x1
  40be6c:	and	w0, w0, #0xff
  40be70:	cmp	w0, #0x0
  40be74:	b.ne	40c0f8 <portable_get_state_internal+0x5fc>  // b.any
  40be78:	ldr	x5, [sp, #152]
  40be7c:	ldr	x0, [sp, #160]
  40be80:	add	x0, x0, #0x13
  40be84:	mov	x4, #0x0                   	// #0
  40be88:	ldr	x3, [sp, #64]
  40be8c:	mov	x2, x0
  40be90:	ldr	x1, [sp, #168]
  40be94:	mov	x0, x5
  40be98:	bl	40a52c <test_chroot_dropin>
  40be9c:	str	w0, [sp, #92]
  40bea0:	ldr	w0, [sp, #92]
  40bea4:	cmp	w0, #0x0
  40bea8:	b.ge	40beb4 <portable_get_state_internal+0x3b8>  // b.tcont
  40beac:	ldr	w19, [sp, #92]
  40beb0:	b	40c1e0 <portable_get_state_internal+0x6e4>
  40beb4:	ldr	w0, [sp, #92]
  40beb8:	cmp	w0, #0x0
  40bebc:	b.eq	40c100 <portable_get_state_internal+0x604>  // b.none
  40bec0:	ldr	x0, [sp, #160]
  40bec4:	add	x1, x0, #0x13
  40bec8:	add	x2, sp, #0x58
  40becc:	add	x0, sp, #0xb0
  40bed0:	mov	x3, x2
  40bed4:	mov	x2, x1
  40bed8:	mov	x1, x0
  40bedc:	mov	w0, #0x0                   	// #0
  40bee0:	bl	4047e0 <unit_file_lookup_state@plt>
  40bee4:	str	w0, [sp, #92]
  40bee8:	ldr	w0, [sp, #92]
  40beec:	cmp	w0, #0x0
  40bef0:	b.ge	40bf8c <portable_get_state_internal+0x490>  // b.tcont
  40bef4:	mov	w0, #0x7                   	// #7
  40bef8:	str	w0, [sp, #108]
  40befc:	ldr	w0, [sp, #92]
  40bf00:	str	w0, [sp, #112]
  40bf04:	str	wzr, [sp, #116]
  40bf08:	ldr	w0, [sp, #116]
  40bf0c:	bl	404e50 <log_get_max_level_realm@plt>
  40bf10:	mov	w1, w0
  40bf14:	ldr	w0, [sp, #108]
  40bf18:	and	w0, w0, #0x7
  40bf1c:	cmp	w1, w0
  40bf20:	b.lt	40bf74 <portable_get_state_internal+0x478>  // b.tstop
  40bf24:	ldr	w0, [sp, #116]
  40bf28:	lsl	w1, w0, #10
  40bf2c:	ldr	w0, [sp, #108]
  40bf30:	orr	w7, w1, w0
  40bf34:	adrp	x0, 412000 <_fini+0x50>
  40bf38:	add	x1, x0, #0xa3
  40bf3c:	ldr	x0, [sp, #160]
  40bf40:	add	x0, x0, #0x13
  40bf44:	mov	x6, x0
  40bf48:	adrp	x0, 412000 <_fini+0x50>
  40bf4c:	add	x5, x0, #0xd18
  40bf50:	adrp	x0, 413000 <_fini+0x1050>
  40bf54:	add	x4, x0, #0x490
  40bf58:	mov	w3, #0x554                 	// #1364
  40bf5c:	mov	x2, x1
  40bf60:	ldr	w1, [sp, #112]
  40bf64:	mov	w0, w7
  40bf68:	bl	404a80 <log_internal_realm@plt>
  40bf6c:	mov	w19, w0
  40bf70:	b	40c1e0 <portable_get_state_internal+0x6e4>
  40bf74:	ldr	w0, [sp, #112]
  40bf78:	cmp	w0, #0x0
  40bf7c:	cneg	w0, w0, lt  // lt = tstop
  40bf80:	and	w0, w0, #0xff
  40bf84:	neg	w19, w0
  40bf88:	b	40c1e0 <portable_get_state_internal+0x6e4>
  40bf8c:	strb	wzr, [sp, #87]
  40bf90:	ldr	w0, [sp, #88]
  40bf94:	cmp	w0, #0x3
  40bf98:	b.gt	40bfa8 <portable_get_state_internal+0x4ac>
  40bf9c:	cmp	w0, #0x2
  40bfa0:	b.ge	40bfb4 <portable_get_state_internal+0x4b8>  // b.tcont
  40bfa4:	b	40bfbc <portable_get_state_internal+0x4c0>
  40bfa8:	sub	w0, w0, #0x6
  40bfac:	cmp	w0, #0x1
  40bfb0:	b.hi	40bfbc <portable_get_state_internal+0x4c0>  // b.pmore
  40bfb4:	mov	w0, #0x1                   	// #1
  40bfb8:	strb	w0, [sp, #87]
  40bfbc:	nop
  40bfc0:	ldrb	w0, [sp, #87]
  40bfc4:	eor	w0, w0, #0x1
  40bfc8:	and	w0, w0, #0xff
  40bfcc:	cmp	w0, #0x0
  40bfd0:	b.eq	40bfdc <portable_get_state_internal+0x4e0>  // b.none
  40bfd4:	mov	w0, #0x1                   	// #1
  40bfd8:	strb	w0, [sp, #84]
  40bfdc:	ldr	x0, [sp, #160]
  40bfe0:	add	x0, x0, #0x13
  40bfe4:	ldr	x2, [sp, #40]
  40bfe8:	mov	x1, x0
  40bfec:	ldr	x0, [sp, #72]
  40bff0:	bl	407944 <unit_file_is_active>
  40bff4:	str	w0, [sp, #92]
  40bff8:	ldr	w0, [sp, #92]
  40bffc:	cmp	w0, #0x0
  40c000:	b.ge	40c00c <portable_get_state_internal+0x510>  // b.tcont
  40c004:	ldr	w19, [sp, #92]
  40c008:	b	40c1e0 <portable_get_state_internal+0x6e4>
  40c00c:	ldr	w0, [sp, #92]
  40c010:	cmp	w0, #0x0
  40c014:	b.le	40c020 <portable_get_state_internal+0x524>
  40c018:	mov	w0, #0x1                   	// #1
  40c01c:	strb	w0, [sp, #85]
  40c020:	ldr	x2, [sp, #144]
  40c024:	ldr	x0, [sp, #160]
  40c028:	add	x0, x0, #0x13
  40c02c:	mov	x1, x0
  40c030:	mov	x0, x2
  40c034:	bl	4049d0 <set_put_strdup@plt>
  40c038:	str	w0, [sp, #92]
  40c03c:	ldr	w0, [sp, #92]
  40c040:	cmp	w0, #0x0
  40c044:	b.ge	40c104 <portable_get_state_internal+0x608>  // b.tcont
  40c048:	mov	w0, #0x7                   	// #7
  40c04c:	str	w0, [sp, #96]
  40c050:	ldr	w0, [sp, #92]
  40c054:	str	w0, [sp, #100]
  40c058:	str	wzr, [sp, #104]
  40c05c:	ldr	w0, [sp, #104]
  40c060:	bl	404e50 <log_get_max_level_realm@plt>
  40c064:	mov	w1, w0
  40c068:	ldr	w0, [sp, #96]
  40c06c:	and	w0, w0, #0x7
  40c070:	cmp	w1, w0
  40c074:	b.lt	40c0c8 <portable_get_state_internal+0x5cc>  // b.tstop
  40c078:	ldr	w0, [sp, #104]
  40c07c:	lsl	w1, w0, #10
  40c080:	ldr	w0, [sp, #96]
  40c084:	orr	w7, w1, w0
  40c088:	adrp	x0, 412000 <_fini+0x50>
  40c08c:	add	x1, x0, #0xa3
  40c090:	ldr	x0, [sp, #160]
  40c094:	add	x0, x0, #0x13
  40c098:	mov	x6, x0
  40c09c:	adrp	x0, 412000 <_fini+0x50>
  40c0a0:	add	x5, x0, #0xda0
  40c0a4:	adrp	x0, 413000 <_fini+0x1050>
  40c0a8:	add	x4, x0, #0x490
  40c0ac:	mov	w3, #0x560                 	// #1376
  40c0b0:	mov	x2, x1
  40c0b4:	ldr	w1, [sp, #100]
  40c0b8:	mov	w0, w7
  40c0bc:	bl	404a80 <log_internal_realm@plt>
  40c0c0:	mov	w19, w0
  40c0c4:	b	40c1e0 <portable_get_state_internal+0x6e4>
  40c0c8:	ldr	w0, [sp, #100]
  40c0cc:	cmp	w0, #0x0
  40c0d0:	cneg	w0, w0, lt  // lt = tstop
  40c0d4:	and	w0, w0, #0xff
  40c0d8:	neg	w19, w0
  40c0dc:	b	40c1e0 <portable_get_state_internal+0x6e4>
  40c0e0:	nop
  40c0e4:	b	40c104 <portable_get_state_internal+0x608>
  40c0e8:	nop
  40c0ec:	b	40c104 <portable_get_state_internal+0x608>
  40c0f0:	nop
  40c0f4:	b	40c104 <portable_get_state_internal+0x608>
  40c0f8:	nop
  40c0fc:	b	40c104 <portable_get_state_internal+0x608>
  40c100:	nop
  40c104:	bl	404820 <__errno_location@plt>
  40c108:	str	wzr, [x0]
  40c10c:	ldr	x0, [sp, #152]
  40c110:	bl	4046a0 <readdir64@plt>
  40c114:	str	x0, [sp, #160]
  40c118:	b	40bd24 <portable_get_state_internal+0x228>
  40c11c:	nop
  40c120:	ldrb	w0, [sp, #85]
  40c124:	cmp	w0, #0x0
  40c128:	b.eq	40c168 <portable_get_state_internal+0x66c>  // b.none
  40c12c:	ldr	x0, [sp, #144]
  40c130:	bl	405718 <set_isempty>
  40c134:	and	w0, w0, #0xff
  40c138:	eor	w0, w0, #0x1
  40c13c:	and	w0, w0, #0xff
  40c140:	cmp	w0, #0x0
  40c144:	b.eq	40c160 <portable_get_state_internal+0x664>  // b.none
  40c148:	ldr	w0, [sp, #60]
  40c14c:	and	w0, w0, #0x4
  40c150:	cmp	w0, #0x0
  40c154:	b.eq	40c160 <portable_get_state_internal+0x664>  // b.none
  40c158:	mov	w0, #0x6                   	// #6
  40c15c:	b	40c1d4 <portable_get_state_internal+0x6d8>
  40c160:	mov	w0, #0x5                   	// #5
  40c164:	b	40c1d4 <portable_get_state_internal+0x6d8>
  40c168:	ldrb	w0, [sp, #84]
  40c16c:	cmp	w0, #0x0
  40c170:	b.eq	40c194 <portable_get_state_internal+0x698>  // b.none
  40c174:	ldr	w0, [sp, #60]
  40c178:	and	w0, w0, #0x4
  40c17c:	cmp	w0, #0x0
  40c180:	b.eq	40c18c <portable_get_state_internal+0x690>  // b.none
  40c184:	mov	w0, #0x4                   	// #4
  40c188:	b	40c1d4 <portable_get_state_internal+0x6d8>
  40c18c:	mov	w0, #0x3                   	// #3
  40c190:	b	40c1d4 <portable_get_state_internal+0x6d8>
  40c194:	ldr	x0, [sp, #144]
  40c198:	bl	405718 <set_isempty>
  40c19c:	and	w0, w0, #0xff
  40c1a0:	eor	w0, w0, #0x1
  40c1a4:	and	w0, w0, #0xff
  40c1a8:	cmp	w0, #0x0
  40c1ac:	b.eq	40c1d0 <portable_get_state_internal+0x6d4>  // b.none
  40c1b0:	ldr	w0, [sp, #60]
  40c1b4:	and	w0, w0, #0x4
  40c1b8:	cmp	w0, #0x0
  40c1bc:	b.eq	40c1c8 <portable_get_state_internal+0x6cc>  // b.none
  40c1c0:	mov	w0, #0x2                   	// #2
  40c1c4:	b	40c1d4 <portable_get_state_internal+0x6d8>
  40c1c8:	mov	w0, #0x1                   	// #1
  40c1cc:	b	40c1d4 <portable_get_state_internal+0x6d8>
  40c1d0:	mov	w0, #0x0                   	// #0
  40c1d4:	ldr	x1, [sp, #48]
  40c1d8:	str	w0, [x1]
  40c1dc:	mov	w19, #0x0                   	// #0
  40c1e0:	add	x0, sp, #0x98
  40c1e4:	bl	405474 <closedirp>
  40c1e8:	add	x0, sp, #0x90
  40c1ec:	bl	405740 <set_free_freep>
  40c1f0:	add	x0, sp, #0xb0
  40c1f4:	bl	4043d0 <lookup_paths_free@plt>
  40c1f8:	mov	w1, w19
  40c1fc:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40c200:	add	x0, x0, #0x728
  40c204:	ldr	x2, [sp, #280]
  40c208:	ldr	x0, [x0]
  40c20c:	eor	x0, x2, x0
  40c210:	cmp	x0, #0x0
  40c214:	b.eq	40c21c <portable_get_state_internal+0x720>  // b.none
  40c218:	bl	404930 <__stack_chk_fail@plt>
  40c21c:	mov	w0, w1
  40c220:	ldr	x19, [sp, #16]
  40c224:	ldp	x29, x30, [sp], #288
  40c228:	ret

000000000040c22c <portable_get_state>:
  40c22c:	stp	x29, x30, [sp, #-80]!
  40c230:	mov	x29, sp
  40c234:	str	x0, [sp, #56]
  40c238:	str	x1, [sp, #48]
  40c23c:	str	w2, [sp, #44]
  40c240:	str	x3, [sp, #32]
  40c244:	str	x4, [sp, #24]
  40c248:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40c24c:	add	x0, x0, #0x728
  40c250:	ldr	x1, [x0]
  40c254:	str	x1, [sp, #72]
  40c258:	mov	x1, #0x0                   	// #0
  40c25c:	ldr	x0, [sp, #48]
  40c260:	cmp	x0, #0x0
  40c264:	cset	w0, eq  // eq = none
  40c268:	and	w0, w0, #0xff
  40c26c:	and	x0, x0, #0xff
  40c270:	cmp	x0, #0x0
  40c274:	b.eq	40c2a0 <portable_get_state+0x74>  // b.none
  40c278:	adrp	x0, 412000 <_fini+0x50>
  40c27c:	add	x1, x0, #0xa3
  40c280:	adrp	x0, 413000 <_fini+0x1050>
  40c284:	add	x4, x0, #0x4b0
  40c288:	mov	w3, #0x574                 	// #1396
  40c28c:	mov	x2, x1
  40c290:	adrp	x0, 412000 <_fini+0x50>
  40c294:	add	x1, x0, #0x638
  40c298:	mov	w0, #0x0                   	// #0
  40c29c:	bl	404670 <log_assert_failed_realm@plt>
  40c2a0:	ldr	x0, [sp, #32]
  40c2a4:	cmp	x0, #0x0
  40c2a8:	cset	w0, eq  // eq = none
  40c2ac:	and	w0, w0, #0xff
  40c2b0:	and	x0, x0, #0xff
  40c2b4:	cmp	x0, #0x0
  40c2b8:	b.eq	40c2e4 <portable_get_state+0xb8>  // b.none
  40c2bc:	adrp	x0, 412000 <_fini+0x50>
  40c2c0:	add	x1, x0, #0xa3
  40c2c4:	adrp	x0, 413000 <_fini+0x1050>
  40c2c8:	add	x4, x0, #0x4b0
  40c2cc:	mov	w3, #0x575                 	// #1397
  40c2d0:	mov	x2, x1
  40c2d4:	adrp	x0, 412000 <_fini+0x50>
  40c2d8:	add	x1, x0, #0x900
  40c2dc:	mov	w0, #0x0                   	// #0
  40c2e0:	bl	404670 <log_assert_failed_realm@plt>
  40c2e4:	ldr	w0, [sp, #44]
  40c2e8:	and	w0, w0, #0xfffffffb
  40c2ec:	add	x1, sp, #0x40
  40c2f0:	ldr	x4, [sp, #24]
  40c2f4:	mov	x3, x1
  40c2f8:	mov	w2, w0
  40c2fc:	ldr	x1, [sp, #48]
  40c300:	ldr	x0, [sp, #56]
  40c304:	bl	40bafc <portable_get_state_internal>
  40c308:	str	w0, [sp, #68]
  40c30c:	ldr	w0, [sp, #68]
  40c310:	cmp	w0, #0x0
  40c314:	b.ge	40c320 <portable_get_state+0xf4>  // b.tcont
  40c318:	ldr	w0, [sp, #68]
  40c31c:	b	40c378 <portable_get_state+0x14c>
  40c320:	ldr	w0, [sp, #64]
  40c324:	cmp	w0, #0x0
  40c328:	b.ne	40c368 <portable_get_state+0x13c>  // b.any
  40c32c:	ldr	w0, [sp, #44]
  40c330:	orr	w0, w0, #0x4
  40c334:	add	x1, sp, #0x40
  40c338:	ldr	x4, [sp, #24]
  40c33c:	mov	x3, x1
  40c340:	mov	w2, w0
  40c344:	ldr	x1, [sp, #48]
  40c348:	ldr	x0, [sp, #56]
  40c34c:	bl	40bafc <portable_get_state_internal>
  40c350:	str	w0, [sp, #68]
  40c354:	ldr	w0, [sp, #68]
  40c358:	cmp	w0, #0x0
  40c35c:	b.ge	40c368 <portable_get_state+0x13c>  // b.tcont
  40c360:	ldr	w0, [sp, #68]
  40c364:	b	40c378 <portable_get_state+0x14c>
  40c368:	ldr	w1, [sp, #64]
  40c36c:	ldr	x0, [sp, #32]
  40c370:	str	w1, [x0]
  40c374:	mov	w0, #0x0                   	// #0
  40c378:	mov	w1, w0
  40c37c:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40c380:	add	x0, x0, #0x728
  40c384:	ldr	x2, [sp, #72]
  40c388:	ldr	x0, [x0]
  40c38c:	eor	x0, x2, x0
  40c390:	cmp	x0, #0x0
  40c394:	b.eq	40c39c <portable_get_state+0x170>  // b.none
  40c398:	bl	404930 <__stack_chk_fail@plt>
  40c39c:	mov	w0, w1
  40c3a0:	ldp	x29, x30, [sp], #80
  40c3a4:	ret

000000000040c3a8 <portable_get_profiles>:
  40c3a8:	stp	x29, x30, [sp, #-32]!
  40c3ac:	mov	x29, sp
  40c3b0:	str	x0, [sp, #24]
  40c3b4:	ldr	x0, [sp, #24]
  40c3b8:	cmp	x0, #0x0
  40c3bc:	cset	w0, eq  // eq = none
  40c3c0:	and	w0, w0, #0xff
  40c3c4:	and	x0, x0, #0xff
  40c3c8:	cmp	x0, #0x0
  40c3cc:	b.eq	40c3f8 <portable_get_profiles+0x50>  // b.none
  40c3d0:	adrp	x0, 412000 <_fini+0x50>
  40c3d4:	add	x1, x0, #0xa3
  40c3d8:	adrp	x0, 413000 <_fini+0x1050>
  40c3dc:	add	x4, x0, #0x4c8
  40c3e0:	mov	w3, #0x589                 	// #1417
  40c3e4:	mov	x2, x1
  40c3e8:	adrp	x0, 412000 <_fini+0x50>
  40c3ec:	add	x1, x0, #0x900
  40c3f0:	mov	w0, #0x0                   	// #0
  40c3f4:	bl	404670 <log_assert_failed_realm@plt>
  40c3f8:	adrp	x0, 413000 <_fini+0x1050>
  40c3fc:	add	x4, x0, #0x40
  40c400:	mov	w3, #0x1c                  	// #28
  40c404:	mov	x2, #0x0                   	// #0
  40c408:	mov	x1, #0x0                   	// #0
  40c40c:	ldr	x0, [sp, #24]
  40c410:	bl	404950 <conf_files_list_nulstr@plt>
  40c414:	ldp	x29, x30, [sp], #32
  40c418:	ret

000000000040c41c <portable_change_type_to_string>:
  40c41c:	sub	sp, sp, #0x10
  40c420:	str	w0, [sp, #12]
  40c424:	ldr	w0, [sp, #12]
  40c428:	cmp	w0, #0x0
  40c42c:	b.lt	40c43c <portable_change_type_to_string+0x20>  // b.tstop
  40c430:	ldr	w0, [sp, #12]
  40c434:	cmp	w0, #0x4
  40c438:	b.le	40c444 <portable_change_type_to_string+0x28>
  40c43c:	mov	x0, #0x0                   	// #0
  40c440:	b	40c454 <portable_change_type_to_string+0x38>
  40c444:	adrp	x0, 413000 <_fini+0x1050>
  40c448:	add	x0, x0, #0x108
  40c44c:	ldrsw	x1, [sp, #12]
  40c450:	ldr	x0, [x0, x1, lsl #3]
  40c454:	add	sp, sp, #0x10
  40c458:	ret

000000000040c45c <portable_state_to_string>:
  40c45c:	sub	sp, sp, #0x10
  40c460:	str	w0, [sp, #12]
  40c464:	ldr	w0, [sp, #12]
  40c468:	cmp	w0, #0x0
  40c46c:	b.lt	40c47c <portable_state_to_string+0x20>  // b.tstop
  40c470:	ldr	w0, [sp, #12]
  40c474:	cmp	w0, #0x6
  40c478:	b.le	40c484 <portable_state_to_string+0x28>
  40c47c:	mov	x0, #0x0                   	// #0
  40c480:	b	40c494 <portable_state_to_string+0x38>
  40c484:	adrp	x0, 413000 <_fini+0x1050>
  40c488:	add	x0, x0, #0x130
  40c48c:	ldrsw	x1, [sp, #12]
  40c490:	ldr	x0, [x0, x1, lsl #3]
  40c494:	add	sp, sp, #0x10
  40c498:	ret

000000000040c49c <freep>:
  40c49c:	stp	x29, x30, [sp, #-32]!
  40c4a0:	mov	x29, sp
  40c4a4:	str	x0, [sp, #24]
  40c4a8:	ldr	x0, [sp, #24]
  40c4ac:	ldr	x0, [x0]
  40c4b0:	bl	404cc0 <free@plt>
  40c4b4:	nop
  40c4b8:	ldp	x29, x30, [sp], #32
  40c4bc:	ret

000000000040c4c0 <sd_bus_message_unrefp>:
  40c4c0:	stp	x29, x30, [sp, #-32]!
  40c4c4:	mov	x29, sp
  40c4c8:	str	x0, [sp, #24]
  40c4cc:	ldr	x0, [sp, #24]
  40c4d0:	ldr	x0, [x0]
  40c4d4:	cmp	x0, #0x0
  40c4d8:	b.eq	40c4e8 <sd_bus_message_unrefp+0x28>  // b.none
  40c4dc:	ldr	x0, [sp, #24]
  40c4e0:	ldr	x0, [x0]
  40c4e4:	bl	4043e0 <sd_bus_message_unref@plt>
  40c4e8:	nop
  40c4ec:	ldp	x29, x30, [sp], #32
  40c4f0:	ret

000000000040c4f4 <hashmap_free>:
  40c4f4:	stp	x29, x30, [sp, #-32]!
  40c4f8:	mov	x29, sp
  40c4fc:	str	x0, [sp, #24]
  40c500:	mov	x2, #0x0                   	// #0
  40c504:	mov	x1, #0x0                   	// #0
  40c508:	ldr	x0, [sp, #24]
  40c50c:	bl	404320 <internal_hashmap_free@plt>
  40c510:	ldp	x29, x30, [sp], #32
  40c514:	ret

000000000040c518 <hashmap_iterate>:
  40c518:	stp	x29, x30, [sp, #-48]!
  40c51c:	mov	x29, sp
  40c520:	str	x0, [sp, #40]
  40c524:	str	x1, [sp, #32]
  40c528:	str	x2, [sp, #24]
  40c52c:	str	x3, [sp, #16]
  40c530:	ldr	x3, [sp, #16]
  40c534:	ldr	x2, [sp, #24]
  40c538:	ldr	x1, [sp, #32]
  40c53c:	ldr	x0, [sp, #40]
  40c540:	bl	404bf0 <internal_hashmap_iterate@plt>
  40c544:	and	w0, w0, #0xff
  40c548:	ldp	x29, x30, [sp], #48
  40c54c:	ret

000000000040c550 <hashmap_freep>:
  40c550:	stp	x29, x30, [sp, #-32]!
  40c554:	mov	x29, sp
  40c558:	str	x0, [sp, #24]
  40c55c:	ldr	x0, [sp, #24]
  40c560:	ldr	x0, [x0]
  40c564:	cmp	x0, #0x0
  40c568:	b.eq	40c578 <hashmap_freep+0x28>  // b.none
  40c56c:	ldr	x0, [sp, #24]
  40c570:	ldr	x0, [x0]
  40c574:	bl	40c4f4 <hashmap_free>
  40c578:	nop
  40c57c:	ldp	x29, x30, [sp], #32
  40c580:	ret

000000000040c584 <closep>:
  40c584:	stp	x29, x30, [sp, #-32]!
  40c588:	mov	x29, sp
  40c58c:	str	x0, [sp, #24]
  40c590:	ldr	x0, [sp, #24]
  40c594:	ldr	w0, [x0]
  40c598:	bl	4045e0 <safe_close@plt>
  40c59c:	nop
  40c5a0:	ldp	x29, x30, [sp], #32
  40c5a4:	ret

000000000040c5a8 <FILE_SIZE_VALID>:
  40c5a8:	sub	sp, sp, #0x10
  40c5ac:	str	x0, [sp, #8]
  40c5b0:	ldr	x0, [sp, #8]
  40c5b4:	mvn	x0, x0
  40c5b8:	lsr	x0, x0, #63
  40c5bc:	and	w0, w0, #0xff
  40c5c0:	add	sp, sp, #0x10
  40c5c4:	ret

000000000040c5c8 <FILE_SIZE_VALID_OR_INFINITY>:
  40c5c8:	stp	x29, x30, [sp, #-32]!
  40c5cc:	mov	x29, sp
  40c5d0:	str	x0, [sp, #24]
  40c5d4:	ldr	x0, [sp, #24]
  40c5d8:	cmn	x0, #0x1
  40c5dc:	b.ne	40c5e8 <FILE_SIZE_VALID_OR_INFINITY+0x20>  // b.any
  40c5e0:	mov	w0, #0x1                   	// #1
  40c5e4:	b	40c5f4 <FILE_SIZE_VALID_OR_INFINITY+0x2c>
  40c5e8:	ldr	x0, [sp, #24]
  40c5ec:	bl	40c5a8 <FILE_SIZE_VALID>
  40c5f0:	and	w0, w0, #0xff
  40c5f4:	ldp	x29, x30, [sp], #32
  40c5f8:	ret

000000000040c5fc <strv_freep>:
  40c5fc:	stp	x29, x30, [sp, #-32]!
  40c600:	mov	x29, sp
  40c604:	str	x0, [sp, #24]
  40c608:	ldr	x0, [sp, #24]
  40c60c:	ldr	x0, [x0]
  40c610:	cmp	x0, #0x0
  40c614:	b.eq	40c624 <strv_freep+0x28>  // b.none
  40c618:	ldr	x0, [sp, #24]
  40c61c:	ldr	x0, [x0]
  40c620:	bl	404830 <strv_free@plt>
  40c624:	nop
  40c628:	ldp	x29, x30, [sp], #32
  40c62c:	ret

000000000040c630 <property_get_pool_path>:
  40c630:	stp	x29, x30, [sp, #-80]!
  40c634:	mov	x29, sp
  40c638:	str	x0, [sp, #72]
  40c63c:	str	x1, [sp, #64]
  40c640:	str	x2, [sp, #56]
  40c644:	str	x3, [sp, #48]
  40c648:	str	x4, [sp, #40]
  40c64c:	str	x5, [sp, #32]
  40c650:	str	x6, [sp, #24]
  40c654:	ldr	x0, [sp, #72]
  40c658:	cmp	x0, #0x0
  40c65c:	cset	w0, eq  // eq = none
  40c660:	and	w0, w0, #0xff
  40c664:	and	x0, x0, #0xff
  40c668:	cmp	x0, #0x0
  40c66c:	b.eq	40c698 <property_get_pool_path+0x68>  // b.none
  40c670:	adrp	x0, 413000 <_fini+0x1050>
  40c674:	add	x1, x0, #0x4e3
  40c678:	adrp	x0, 413000 <_fini+0x1050>
  40c67c:	add	x4, x0, #0xbe8
  40c680:	mov	w3, #0x1c                  	// #28
  40c684:	mov	x2, x1
  40c688:	adrp	x0, 413000 <_fini+0x1050>
  40c68c:	add	x1, x0, #0x500
  40c690:	mov	w0, #0x0                   	// #0
  40c694:	bl	404670 <log_assert_failed_realm@plt>
  40c698:	ldr	x0, [sp, #40]
  40c69c:	cmp	x0, #0x0
  40c6a0:	cset	w0, eq  // eq = none
  40c6a4:	and	w0, w0, #0xff
  40c6a8:	and	x0, x0, #0xff
  40c6ac:	cmp	x0, #0x0
  40c6b0:	b.eq	40c6dc <property_get_pool_path+0xac>  // b.none
  40c6b4:	adrp	x0, 413000 <_fini+0x1050>
  40c6b8:	add	x1, x0, #0x4e3
  40c6bc:	adrp	x0, 413000 <_fini+0x1050>
  40c6c0:	add	x4, x0, #0xbe8
  40c6c4:	mov	w3, #0x1d                  	// #29
  40c6c8:	mov	x2, x1
  40c6cc:	adrp	x0, 413000 <_fini+0x1050>
  40c6d0:	add	x1, x0, #0x508
  40c6d4:	mov	w0, #0x0                   	// #0
  40c6d8:	bl	404670 <log_assert_failed_realm@plt>
  40c6dc:	adrp	x0, 413000 <_fini+0x1050>
  40c6e0:	add	x2, x0, #0x510
  40c6e4:	adrp	x0, 413000 <_fini+0x1050>
  40c6e8:	add	x1, x0, #0x528
  40c6ec:	ldr	x0, [sp, #40]
  40c6f0:	bl	4045b0 <sd_bus_message_append@plt>
  40c6f4:	ldp	x29, x30, [sp], #80
  40c6f8:	ret

000000000040c6fc <property_get_pool_usage>:
  40c6fc:	stp	x29, x30, [sp, #-160]!
  40c700:	mov	x29, sp
  40c704:	str	x19, [sp, #16]
  40c708:	str	x0, [sp, #88]
  40c70c:	str	x1, [sp, #80]
  40c710:	str	x2, [sp, #72]
  40c714:	str	x3, [sp, #64]
  40c718:	str	x4, [sp, #56]
  40c71c:	str	x5, [sp, #48]
  40c720:	str	x6, [sp, #40]
  40c724:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40c728:	add	x0, x0, #0x728
  40c72c:	ldr	x1, [x0]
  40c730:	str	x1, [sp, #152]
  40c734:	mov	x1, #0x0                   	// #0
  40c738:	mov	w0, #0xffffffff            	// #-1
  40c73c:	str	w0, [sp, #108]
  40c740:	mov	x0, #0xffffffffffffffff    	// #-1
  40c744:	str	x0, [sp, #112]
  40c748:	ldr	x0, [sp, #88]
  40c74c:	cmp	x0, #0x0
  40c750:	cset	w0, eq  // eq = none
  40c754:	and	w0, w0, #0xff
  40c758:	and	x0, x0, #0xff
  40c75c:	cmp	x0, #0x0
  40c760:	b.eq	40c78c <property_get_pool_usage+0x90>  // b.none
  40c764:	adrp	x0, 413000 <_fini+0x1050>
  40c768:	add	x1, x0, #0x4e3
  40c76c:	adrp	x0, 413000 <_fini+0x1050>
  40c770:	add	x4, x0, #0xc00
  40c774:	mov	w3, #0x2e                  	// #46
  40c778:	mov	x2, x1
  40c77c:	adrp	x0, 413000 <_fini+0x1050>
  40c780:	add	x1, x0, #0x500
  40c784:	mov	w0, #0x0                   	// #0
  40c788:	bl	404670 <log_assert_failed_realm@plt>
  40c78c:	ldr	x0, [sp, #56]
  40c790:	cmp	x0, #0x0
  40c794:	cset	w0, eq  // eq = none
  40c798:	and	w0, w0, #0xff
  40c79c:	and	x0, x0, #0xff
  40c7a0:	cmp	x0, #0x0
  40c7a4:	b.eq	40c7d0 <property_get_pool_usage+0xd4>  // b.none
  40c7a8:	adrp	x0, 413000 <_fini+0x1050>
  40c7ac:	add	x1, x0, #0x4e3
  40c7b0:	adrp	x0, 413000 <_fini+0x1050>
  40c7b4:	add	x4, x0, #0xc00
  40c7b8:	mov	w3, #0x2f                  	// #47
  40c7bc:	mov	x2, x1
  40c7c0:	adrp	x0, 413000 <_fini+0x1050>
  40c7c4:	add	x1, x0, #0x508
  40c7c8:	mov	w0, #0x0                   	// #0
  40c7cc:	bl	404670 <log_assert_failed_realm@plt>
  40c7d0:	mov	w1, #0x4000                	// #16384
  40c7d4:	movk	w1, #0x8, lsl #16
  40c7d8:	adrp	x0, 413000 <_fini+0x1050>
  40c7dc:	add	x0, x0, #0x510
  40c7e0:	bl	404dc0 <open64@plt>
  40c7e4:	str	w0, [sp, #108]
  40c7e8:	ldr	w0, [sp, #108]
  40c7ec:	cmp	w0, #0x0
  40c7f0:	b.lt	40c818 <property_get_pool_usage+0x11c>  // b.tstop
  40c7f4:	ldr	w0, [sp, #108]
  40c7f8:	add	x1, sp, #0x78
  40c7fc:	mov	x2, x1
  40c800:	mov	x1, #0x0                   	// #0
  40c804:	bl	404c50 <btrfs_subvol_get_subtree_quota_fd@plt>
  40c808:	cmp	w0, #0x0
  40c80c:	b.lt	40c818 <property_get_pool_usage+0x11c>  // b.tstop
  40c810:	ldr	x0, [sp, #120]
  40c814:	str	x0, [sp, #112]
  40c818:	ldr	x2, [sp, #112]
  40c81c:	adrp	x0, 413000 <_fini+0x1050>
  40c820:	add	x1, x0, #0x530
  40c824:	ldr	x0, [sp, #56]
  40c828:	bl	4045b0 <sd_bus_message_append@plt>
  40c82c:	mov	w19, w0
  40c830:	add	x0, sp, #0x6c
  40c834:	bl	40c584 <closep>
  40c838:	mov	w1, w19
  40c83c:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40c840:	add	x0, x0, #0x728
  40c844:	ldr	x2, [sp, #152]
  40c848:	ldr	x0, [x0]
  40c84c:	eor	x0, x2, x0
  40c850:	cmp	x0, #0x0
  40c854:	b.eq	40c85c <property_get_pool_usage+0x160>  // b.none
  40c858:	bl	404930 <__stack_chk_fail@plt>
  40c85c:	mov	w0, w1
  40c860:	ldr	x19, [sp, #16]
  40c864:	ldp	x29, x30, [sp], #160
  40c868:	ret

000000000040c86c <property_get_pool_limit>:
  40c86c:	stp	x29, x30, [sp, #-160]!
  40c870:	mov	x29, sp
  40c874:	str	x19, [sp, #16]
  40c878:	str	x0, [sp, #88]
  40c87c:	str	x1, [sp, #80]
  40c880:	str	x2, [sp, #72]
  40c884:	str	x3, [sp, #64]
  40c888:	str	x4, [sp, #56]
  40c88c:	str	x5, [sp, #48]
  40c890:	str	x6, [sp, #40]
  40c894:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40c898:	add	x0, x0, #0x728
  40c89c:	ldr	x1, [x0]
  40c8a0:	str	x1, [sp, #152]
  40c8a4:	mov	x1, #0x0                   	// #0
  40c8a8:	mov	w0, #0xffffffff            	// #-1
  40c8ac:	str	w0, [sp, #108]
  40c8b0:	mov	x0, #0xffffffffffffffff    	// #-1
  40c8b4:	str	x0, [sp, #112]
  40c8b8:	ldr	x0, [sp, #88]
  40c8bc:	cmp	x0, #0x0
  40c8c0:	cset	w0, eq  // eq = none
  40c8c4:	and	w0, w0, #0xff
  40c8c8:	and	x0, x0, #0xff
  40c8cc:	cmp	x0, #0x0
  40c8d0:	b.eq	40c8fc <property_get_pool_limit+0x90>  // b.none
  40c8d4:	adrp	x0, 413000 <_fini+0x1050>
  40c8d8:	add	x1, x0, #0x4e3
  40c8dc:	adrp	x0, 413000 <_fini+0x1050>
  40c8e0:	add	x4, x0, #0xc18
  40c8e4:	mov	w3, #0x48                  	// #72
  40c8e8:	mov	x2, x1
  40c8ec:	adrp	x0, 413000 <_fini+0x1050>
  40c8f0:	add	x1, x0, #0x500
  40c8f4:	mov	w0, #0x0                   	// #0
  40c8f8:	bl	404670 <log_assert_failed_realm@plt>
  40c8fc:	ldr	x0, [sp, #56]
  40c900:	cmp	x0, #0x0
  40c904:	cset	w0, eq  // eq = none
  40c908:	and	w0, w0, #0xff
  40c90c:	and	x0, x0, #0xff
  40c910:	cmp	x0, #0x0
  40c914:	b.eq	40c940 <property_get_pool_limit+0xd4>  // b.none
  40c918:	adrp	x0, 413000 <_fini+0x1050>
  40c91c:	add	x1, x0, #0x4e3
  40c920:	adrp	x0, 413000 <_fini+0x1050>
  40c924:	add	x4, x0, #0xc18
  40c928:	mov	w3, #0x49                  	// #73
  40c92c:	mov	x2, x1
  40c930:	adrp	x0, 413000 <_fini+0x1050>
  40c934:	add	x1, x0, #0x508
  40c938:	mov	w0, #0x0                   	// #0
  40c93c:	bl	404670 <log_assert_failed_realm@plt>
  40c940:	mov	w1, #0x4000                	// #16384
  40c944:	movk	w1, #0x8, lsl #16
  40c948:	adrp	x0, 413000 <_fini+0x1050>
  40c94c:	add	x0, x0, #0x510
  40c950:	bl	404dc0 <open64@plt>
  40c954:	str	w0, [sp, #108]
  40c958:	ldr	w0, [sp, #108]
  40c95c:	cmp	w0, #0x0
  40c960:	b.lt	40c988 <property_get_pool_limit+0x11c>  // b.tstop
  40c964:	ldr	w0, [sp, #108]
  40c968:	add	x1, sp, #0x78
  40c96c:	mov	x2, x1
  40c970:	mov	x1, #0x0                   	// #0
  40c974:	bl	404c50 <btrfs_subvol_get_subtree_quota_fd@plt>
  40c978:	cmp	w0, #0x0
  40c97c:	b.lt	40c988 <property_get_pool_limit+0x11c>  // b.tstop
  40c980:	ldr	x0, [sp, #136]
  40c984:	str	x0, [sp, #112]
  40c988:	ldr	x2, [sp, #112]
  40c98c:	adrp	x0, 413000 <_fini+0x1050>
  40c990:	add	x1, x0, #0x530
  40c994:	ldr	x0, [sp, #56]
  40c998:	bl	4045b0 <sd_bus_message_append@plt>
  40c99c:	mov	w19, w0
  40c9a0:	add	x0, sp, #0x6c
  40c9a4:	bl	40c584 <closep>
  40c9a8:	mov	w1, w19
  40c9ac:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40c9b0:	add	x0, x0, #0x728
  40c9b4:	ldr	x2, [sp, #152]
  40c9b8:	ldr	x0, [x0]
  40c9bc:	eor	x0, x2, x0
  40c9c0:	cmp	x0, #0x0
  40c9c4:	b.eq	40c9cc <property_get_pool_limit+0x160>  // b.none
  40c9c8:	bl	404930 <__stack_chk_fail@plt>
  40c9cc:	mov	w0, w1
  40c9d0:	ldr	x19, [sp, #16]
  40c9d4:	ldp	x29, x30, [sp], #160
  40c9d8:	ret

000000000040c9dc <property_get_profiles>:
  40c9dc:	stp	x29, x30, [sp, #-128]!
  40c9e0:	mov	x29, sp
  40c9e4:	str	x19, [sp, #16]
  40c9e8:	str	x0, [sp, #88]
  40c9ec:	str	x1, [sp, #80]
  40c9f0:	str	x2, [sp, #72]
  40c9f4:	str	x3, [sp, #64]
  40c9f8:	str	x4, [sp, #56]
  40c9fc:	str	x5, [sp, #48]
  40ca00:	str	x6, [sp, #40]
  40ca04:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40ca08:	add	x0, x0, #0x728
  40ca0c:	ldr	x1, [x0]
  40ca10:	str	x1, [sp, #120]
  40ca14:	mov	x1, #0x0                   	// #0
  40ca18:	str	xzr, [sp, #112]
  40ca1c:	ldr	x0, [sp, #88]
  40ca20:	cmp	x0, #0x0
  40ca24:	cset	w0, eq  // eq = none
  40ca28:	and	w0, w0, #0xff
  40ca2c:	and	x0, x0, #0xff
  40ca30:	cmp	x0, #0x0
  40ca34:	b.eq	40ca60 <property_get_profiles+0x84>  // b.none
  40ca38:	adrp	x0, 413000 <_fini+0x1050>
  40ca3c:	add	x1, x0, #0x4e3
  40ca40:	adrp	x0, 413000 <_fini+0x1050>
  40ca44:	add	x4, x0, #0xc30
  40ca48:	mov	w3, #0x62                  	// #98
  40ca4c:	mov	x2, x1
  40ca50:	adrp	x0, 413000 <_fini+0x1050>
  40ca54:	add	x1, x0, #0x500
  40ca58:	mov	w0, #0x0                   	// #0
  40ca5c:	bl	404670 <log_assert_failed_realm@plt>
  40ca60:	ldr	x0, [sp, #56]
  40ca64:	cmp	x0, #0x0
  40ca68:	cset	w0, eq  // eq = none
  40ca6c:	and	w0, w0, #0xff
  40ca70:	and	x0, x0, #0xff
  40ca74:	cmp	x0, #0x0
  40ca78:	b.eq	40caa4 <property_get_profiles+0xc8>  // b.none
  40ca7c:	adrp	x0, 413000 <_fini+0x1050>
  40ca80:	add	x1, x0, #0x4e3
  40ca84:	adrp	x0, 413000 <_fini+0x1050>
  40ca88:	add	x4, x0, #0xc30
  40ca8c:	mov	w3, #0x63                  	// #99
  40ca90:	mov	x2, x1
  40ca94:	adrp	x0, 413000 <_fini+0x1050>
  40ca98:	add	x1, x0, #0x508
  40ca9c:	mov	w0, #0x0                   	// #0
  40caa0:	bl	404670 <log_assert_failed_realm@plt>
  40caa4:	add	x0, sp, #0x70
  40caa8:	bl	40c3a8 <portable_get_profiles>
  40caac:	str	w0, [sp, #108]
  40cab0:	ldr	w0, [sp, #108]
  40cab4:	cmp	w0, #0x0
  40cab8:	b.ge	40cac4 <property_get_profiles+0xe8>  // b.tcont
  40cabc:	ldr	w19, [sp, #108]
  40cac0:	b	40cad8 <property_get_profiles+0xfc>
  40cac4:	ldr	x0, [sp, #112]
  40cac8:	mov	x1, x0
  40cacc:	ldr	x0, [sp, #56]
  40cad0:	bl	404c60 <sd_bus_message_append_strv@plt>
  40cad4:	mov	w19, w0
  40cad8:	add	x0, sp, #0x70
  40cadc:	bl	40c5fc <strv_freep>
  40cae0:	mov	w1, w19
  40cae4:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40cae8:	add	x0, x0, #0x728
  40caec:	ldr	x2, [sp, #120]
  40caf0:	ldr	x0, [x0]
  40caf4:	eor	x0, x2, x0
  40caf8:	cmp	x0, #0x0
  40cafc:	b.eq	40cb04 <property_get_profiles+0x128>  // b.none
  40cb00:	bl	404930 <__stack_chk_fail@plt>
  40cb04:	mov	w0, w1
  40cb08:	ldr	x19, [sp, #16]
  40cb0c:	ldp	x29, x30, [sp], #128
  40cb10:	ret

000000000040cb14 <method_get_image>:
  40cb14:	stp	x29, x30, [sp, #-112]!
  40cb18:	mov	x29, sp
  40cb1c:	str	x19, [sp, #16]
  40cb20:	str	x0, [sp, #56]
  40cb24:	str	x1, [sp, #48]
  40cb28:	str	x2, [sp, #40]
  40cb2c:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40cb30:	add	x0, x0, #0x728
  40cb34:	ldr	x1, [x0]
  40cb38:	str	x1, [sp, #104]
  40cb3c:	mov	x1, #0x0                   	// #0
  40cb40:	str	xzr, [sp, #72]
  40cb44:	ldr	x0, [sp, #48]
  40cb48:	str	x0, [sp, #96]
  40cb4c:	ldr	x0, [sp, #56]
  40cb50:	cmp	x0, #0x0
  40cb54:	cset	w0, eq  // eq = none
  40cb58:	and	w0, w0, #0xff
  40cb5c:	and	x0, x0, #0xff
  40cb60:	cmp	x0, #0x0
  40cb64:	b.eq	40cb90 <method_get_image+0x7c>  // b.none
  40cb68:	adrp	x0, 413000 <_fini+0x1050>
  40cb6c:	add	x1, x0, #0x4e3
  40cb70:	adrp	x0, 413000 <_fini+0x1050>
  40cb74:	add	x4, x0, #0xc48
  40cb78:	mov	w3, #0x73                  	// #115
  40cb7c:	mov	x2, x1
  40cb80:	adrp	x0, 413000 <_fini+0x1050>
  40cb84:	add	x1, x0, #0x538
  40cb88:	mov	w0, #0x0                   	// #0
  40cb8c:	bl	404670 <log_assert_failed_realm@plt>
  40cb90:	ldr	x0, [sp, #96]
  40cb94:	cmp	x0, #0x0
  40cb98:	cset	w0, eq  // eq = none
  40cb9c:	and	w0, w0, #0xff
  40cba0:	and	x0, x0, #0xff
  40cba4:	cmp	x0, #0x0
  40cba8:	b.eq	40cbd4 <method_get_image+0xc0>  // b.none
  40cbac:	adrp	x0, 413000 <_fini+0x1050>
  40cbb0:	add	x1, x0, #0x4e3
  40cbb4:	adrp	x0, 413000 <_fini+0x1050>
  40cbb8:	add	x4, x0, #0xc48
  40cbbc:	mov	w3, #0x74                  	// #116
  40cbc0:	mov	x2, x1
  40cbc4:	adrp	x0, 413000 <_fini+0x1050>
  40cbc8:	add	x1, x0, #0x540
  40cbcc:	mov	w0, #0x0                   	// #0
  40cbd0:	bl	404670 <log_assert_failed_realm@plt>
  40cbd4:	add	x0, sp, #0x50
  40cbd8:	mov	x2, x0
  40cbdc:	adrp	x0, 413000 <_fini+0x1050>
  40cbe0:	add	x1, x0, #0x528
  40cbe4:	ldr	x0, [sp, #56]
  40cbe8:	bl	404680 <sd_bus_message_read@plt>
  40cbec:	str	w0, [sp, #68]
  40cbf0:	ldr	w0, [sp, #68]
  40cbf4:	cmp	w0, #0x0
  40cbf8:	b.ge	40cc04 <method_get_image+0xf0>  // b.tcont
  40cbfc:	ldr	w19, [sp, #68]
  40cc00:	b	40cc88 <method_get_image+0x174>
  40cc04:	ldr	x0, [sp, #80]
  40cc08:	add	x1, sp, #0x58
  40cc0c:	ldr	x7, [sp, #40]
  40cc10:	mov	x6, x1
  40cc14:	mov	x5, #0x0                   	// #0
  40cc18:	mov	w4, #0x0                   	// #0
  40cc1c:	mov	x3, #0x0                   	// #0
  40cc20:	mov	x2, x0
  40cc24:	ldr	x1, [sp, #56]
  40cc28:	ldr	x0, [sp, #96]
  40cc2c:	bl	40f8cc <bus_image_acquire>
  40cc30:	str	w0, [sp, #68]
  40cc34:	ldr	w0, [sp, #68]
  40cc38:	cmp	w0, #0x0
  40cc3c:	b.ge	40cc48 <method_get_image+0x134>  // b.tcont
  40cc40:	ldr	w19, [sp, #68]
  40cc44:	b	40cc88 <method_get_image+0x174>
  40cc48:	ldr	x0, [sp, #88]
  40cc4c:	add	x1, sp, #0x48
  40cc50:	bl	40f7e8 <bus_image_path>
  40cc54:	str	w0, [sp, #68]
  40cc58:	ldr	w0, [sp, #68]
  40cc5c:	cmp	w0, #0x0
  40cc60:	b.ge	40cc6c <method_get_image+0x158>  // b.tcont
  40cc64:	ldr	w19, [sp, #68]
  40cc68:	b	40cc88 <method_get_image+0x174>
  40cc6c:	ldr	x0, [sp, #72]
  40cc70:	mov	x2, x0
  40cc74:	adrp	x0, 413000 <_fini+0x1050>
  40cc78:	add	x1, x0, #0x548
  40cc7c:	ldr	x0, [sp, #56]
  40cc80:	bl	404340 <sd_bus_reply_method_return@plt>
  40cc84:	mov	w19, w0
  40cc88:	add	x0, sp, #0x48
  40cc8c:	bl	40c49c <freep>
  40cc90:	mov	w1, w19
  40cc94:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40cc98:	add	x0, x0, #0x728
  40cc9c:	ldr	x2, [sp, #104]
  40cca0:	ldr	x0, [x0]
  40cca4:	eor	x0, x2, x0
  40cca8:	cmp	x0, #0x0
  40ccac:	b.eq	40ccb4 <method_get_image+0x1a0>  // b.none
  40ccb0:	bl	404930 <__stack_chk_fail@plt>
  40ccb4:	mov	w0, w1
  40ccb8:	ldr	x19, [sp, #16]
  40ccbc:	ldp	x29, x30, [sp], #112
  40ccc0:	ret

000000000040ccc4 <method_list_images>:
  40ccc4:	sub	sp, sp, #0xf0
  40ccc8:	stp	x29, x30, [sp, #16]
  40cccc:	add	x29, sp, #0x10
  40ccd0:	stp	x19, x20, [sp, #32]
  40ccd4:	stp	x21, x22, [sp, #48]
  40ccd8:	stp	x23, x24, [sp, #64]
  40ccdc:	stp	x25, x26, [sp, #80]
  40cce0:	str	x0, [sp, #120]
  40cce4:	str	x1, [sp, #112]
  40cce8:	str	x2, [sp, #104]
  40ccec:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40ccf0:	add	x0, x0, #0x728
  40ccf4:	ldr	x1, [x0]
  40ccf8:	str	x1, [sp, #232]
  40ccfc:	mov	x1, #0x0                   	// #0
  40cd00:	str	xzr, [sp, #152]
  40cd04:	str	xzr, [sp, #160]
  40cd08:	ldr	x0, [sp, #112]
  40cd0c:	str	x0, [sp, #184]
  40cd10:	ldr	x0, [sp, #120]
  40cd14:	cmp	x0, #0x0
  40cd18:	cset	w0, eq  // eq = none
  40cd1c:	and	w0, w0, #0xff
  40cd20:	and	x0, x0, #0xff
  40cd24:	cmp	x0, #0x0
  40cd28:	b.eq	40cd54 <method_list_images+0x90>  // b.none
  40cd2c:	adrp	x0, 413000 <_fini+0x1050>
  40cd30:	add	x1, x0, #0x4e3
  40cd34:	adrp	x0, 413000 <_fini+0x1050>
  40cd38:	add	x4, x0, #0xc60
  40cd3c:	mov	w3, #0x8d                  	// #141
  40cd40:	mov	x2, x1
  40cd44:	adrp	x0, 413000 <_fini+0x1050>
  40cd48:	add	x1, x0, #0x538
  40cd4c:	mov	w0, #0x0                   	// #0
  40cd50:	bl	404670 <log_assert_failed_realm@plt>
  40cd54:	ldr	x0, [sp, #184]
  40cd58:	cmp	x0, #0x0
  40cd5c:	cset	w0, eq  // eq = none
  40cd60:	and	w0, w0, #0xff
  40cd64:	and	x0, x0, #0xff
  40cd68:	cmp	x0, #0x0
  40cd6c:	b.eq	40cd98 <method_list_images+0xd4>  // b.none
  40cd70:	adrp	x0, 413000 <_fini+0x1050>
  40cd74:	add	x1, x0, #0x4e3
  40cd78:	adrp	x0, 413000 <_fini+0x1050>
  40cd7c:	add	x4, x0, #0xc60
  40cd80:	mov	w3, #0x8e                  	// #142
  40cd84:	mov	x2, x1
  40cd88:	adrp	x0, 413000 <_fini+0x1050>
  40cd8c:	add	x1, x0, #0x540
  40cd90:	mov	w0, #0x0                   	// #0
  40cd94:	bl	404670 <log_assert_failed_realm@plt>
  40cd98:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40cd9c:	add	x0, x0, #0x770
  40cda0:	bl	404920 <internal_hashmap_new@plt>
  40cda4:	str	x0, [sp, #160]
  40cda8:	ldr	x0, [sp, #160]
  40cdac:	cmp	x0, #0x0
  40cdb0:	b.ne	40cdbc <method_list_images+0xf8>  // b.any
  40cdb4:	mov	w19, #0xfffffff4            	// #-12
  40cdb8:	b	40d08c <method_list_images+0x3c8>
  40cdbc:	ldr	x0, [sp, #160]
  40cdc0:	ldr	x2, [sp, #104]
  40cdc4:	mov	x1, x0
  40cdc8:	ldr	x0, [sp, #184]
  40cdcc:	bl	4106ec <manager_image_cache_discover>
  40cdd0:	str	w0, [sp, #136]
  40cdd4:	ldr	w0, [sp, #136]
  40cdd8:	cmp	w0, #0x0
  40cddc:	b.ge	40cde8 <method_list_images+0x124>  // b.tcont
  40cde0:	ldr	w19, [sp, #136]
  40cde4:	b	40d08c <method_list_images+0x3c8>
  40cde8:	add	x0, sp, #0x98
  40cdec:	mov	x1, x0
  40cdf0:	ldr	x0, [sp, #120]
  40cdf4:	bl	4044b0 <sd_bus_message_new_method_return@plt>
  40cdf8:	str	w0, [sp, #136]
  40cdfc:	ldr	w0, [sp, #136]
  40ce00:	cmp	w0, #0x0
  40ce04:	b.ge	40ce10 <method_list_images+0x14c>  // b.tcont
  40ce08:	ldr	w19, [sp, #136]
  40ce0c:	b	40d08c <method_list_images+0x3c8>
  40ce10:	ldr	x3, [sp, #152]
  40ce14:	adrp	x0, 413000 <_fini+0x1050>
  40ce18:	add	x2, x0, #0x550
  40ce1c:	mov	w1, #0x61                  	// #97
  40ce20:	mov	x0, x3
  40ce24:	bl	4044e0 <sd_bus_message_open_container@plt>
  40ce28:	str	w0, [sp, #136]
  40ce2c:	ldr	w0, [sp, #136]
  40ce30:	cmp	w0, #0x0
  40ce34:	b.ge	40ce40 <method_list_images+0x17c>  // b.tcont
  40ce38:	ldr	w19, [sp, #136]
  40ce3c:	b	40d08c <method_list_images+0x3c8>
  40ce40:	mov	w0, #0xfffffffe            	// #-2
  40ce44:	str	w0, [sp, #192]
  40ce48:	str	xzr, [sp, #200]
  40ce4c:	b	40d034 <method_list_images+0x370>
  40ce50:	str	xzr, [sp, #208]
  40ce54:	str	xzr, [sp, #216]
  40ce58:	str	wzr, [sp, #224]
  40ce5c:	mov	w0, #0xffffffff            	// #-1
  40ce60:	str	w0, [sp, #132]
  40ce64:	str	xzr, [sp, #176]
  40ce68:	ldr	x0, [sp, #168]
  40ce6c:	add	x1, sp, #0xb0
  40ce70:	bl	40f7e8 <bus_image_path>
  40ce74:	str	w0, [sp, #136]
  40ce78:	ldr	w0, [sp, #136]
  40ce7c:	cmp	w0, #0x0
  40ce80:	b.ge	40ce90 <method_list_images+0x1cc>  // b.tcont
  40ce84:	ldr	w19, [sp, #136]
  40ce88:	mov	w20, #0x0                   	// #0
  40ce8c:	b	40d008 <method_list_images+0x344>
  40ce90:	ldr	x0, [sp, #120]
  40ce94:	bl	404610 <sd_bus_message_get_bus@plt>
  40ce98:	mov	x5, x0
  40ce9c:	ldr	x0, [sp, #168]
  40cea0:	ldr	x0, [x0, #16]
  40cea4:	add	x2, sp, #0xd0
  40cea8:	add	x1, sp, #0x84
  40ceac:	mov	x4, x2
  40ceb0:	mov	x3, x1
  40ceb4:	mov	w2, #0x0                   	// #0
  40ceb8:	mov	x1, x0
  40cebc:	mov	x0, x5
  40cec0:	bl	40c22c <portable_get_state>
  40cec4:	str	w0, [sp, #136]
  40cec8:	ldr	w0, [sp, #136]
  40cecc:	cmp	w0, #0x0
  40ced0:	b.ge	40cf68 <method_list_images+0x2a4>  // b.tcont
  40ced4:	mov	w0, #0x7                   	// #7
  40ced8:	str	w0, [sp, #140]
  40cedc:	ldr	w0, [sp, #136]
  40cee0:	str	w0, [sp, #144]
  40cee4:	str	wzr, [sp, #148]
  40cee8:	ldr	w0, [sp, #148]
  40ceec:	bl	404e50 <log_get_max_level_realm@plt>
  40cef0:	mov	w1, w0
  40cef4:	ldr	w0, [sp, #140]
  40cef8:	and	w0, w0, #0x7
  40cefc:	cmp	w1, w0
  40cf00:	b.lt	40cf60 <method_list_images+0x29c>  // b.tstop
  40cf04:	ldr	w0, [sp, #148]
  40cf08:	lsl	w1, w0, #10
  40cf0c:	ldr	w0, [sp, #140]
  40cf10:	orr	w20, w1, w0
  40cf14:	adrp	x0, 413000 <_fini+0x1050>
  40cf18:	add	x21, x0, #0x4e3
  40cf1c:	ldr	x0, [sp, #168]
  40cf20:	ldr	x22, [x0, #16]
  40cf24:	add	x0, sp, #0xd0
  40cf28:	ldr	w1, [sp, #136]
  40cf2c:	bl	4042b0 <bus_error_message@plt>
  40cf30:	mov	x7, x0
  40cf34:	mov	x6, x22
  40cf38:	adrp	x0, 413000 <_fini+0x1050>
  40cf3c:	add	x5, x0, #0x560
  40cf40:	adrp	x0, 413000 <_fini+0x1050>
  40cf44:	add	x4, x0, #0xc78
  40cf48:	mov	w3, #0xb0                  	// #176
  40cf4c:	mov	x2, x21
  40cf50:	ldr	w1, [sp, #144]
  40cf54:	mov	w0, w20
  40cf58:	bl	404a80 <log_internal_realm@plt>
  40cf5c:	b	40cf68 <method_list_images+0x2a4>
  40cf60:	ldr	w0, [sp, #144]
  40cf64:	cmp	w0, #0x0
  40cf68:	ldr	x20, [sp, #152]
  40cf6c:	ldr	x0, [sp, #168]
  40cf70:	ldr	x21, [x0, #8]
  40cf74:	ldr	x0, [sp, #168]
  40cf78:	ldr	w0, [x0, #4]
  40cf7c:	bl	404570 <image_type_to_string@plt>
  40cf80:	mov	x25, x0
  40cf84:	ldr	x0, [sp, #168]
  40cf88:	ldrb	w0, [x0, #24]
  40cf8c:	mov	w26, w0
  40cf90:	ldr	x0, [sp, #168]
  40cf94:	ldr	x22, [x0, #32]
  40cf98:	ldr	x0, [sp, #168]
  40cf9c:	ldr	x23, [x0, #40]
  40cfa0:	ldr	x0, [sp, #168]
  40cfa4:	ldr	x24, [x0, #48]
  40cfa8:	ldr	w0, [sp, #132]
  40cfac:	bl	40c45c <portable_state_to_string>
  40cfb0:	mov	x1, x0
  40cfb4:	ldr	x0, [sp, #176]
  40cfb8:	str	x0, [sp, #8]
  40cfbc:	str	x1, [sp]
  40cfc0:	mov	x7, x24
  40cfc4:	mov	x6, x23
  40cfc8:	mov	x5, x22
  40cfcc:	mov	w4, w26
  40cfd0:	mov	x3, x25
  40cfd4:	mov	x2, x21
  40cfd8:	adrp	x0, 413000 <_fini+0x1050>
  40cfdc:	add	x1, x0, #0x550
  40cfe0:	mov	x0, x20
  40cfe4:	bl	4045b0 <sd_bus_message_append@plt>
  40cfe8:	str	w0, [sp, #136]
  40cfec:	ldr	w0, [sp, #136]
  40cff0:	cmp	w0, #0x0
  40cff4:	b.ge	40d004 <method_list_images+0x340>  // b.tcont
  40cff8:	ldr	w19, [sp, #136]
  40cffc:	mov	w20, #0x0                   	// #0
  40d000:	b	40d008 <method_list_images+0x344>
  40d004:	mov	w20, #0x1                   	// #1
  40d008:	add	x0, sp, #0xb0
  40d00c:	bl	40c49c <freep>
  40d010:	cmp	w20, #0x1
  40d014:	b.eq	40d020 <method_list_images+0x35c>  // b.none
  40d018:	mov	w20, #0x0                   	// #0
  40d01c:	b	40d024 <method_list_images+0x360>
  40d020:	mov	w20, #0x1                   	// #1
  40d024:	add	x0, sp, #0xd0
  40d028:	bl	404a00 <sd_bus_error_free@plt>
  40d02c:	cmp	w20, #0x1
  40d030:	b.ne	40d08c <method_list_images+0x3c8>  // b.any
  40d034:	ldr	x0, [sp, #160]
  40d038:	add	x2, sp, #0xa8
  40d03c:	add	x1, sp, #0xc0
  40d040:	mov	x3, #0x0                   	// #0
  40d044:	bl	40c518 <hashmap_iterate>
  40d048:	and	w0, w0, #0xff
  40d04c:	cmp	w0, #0x0
  40d050:	b.ne	40ce50 <method_list_images+0x18c>  // b.any
  40d054:	ldr	x0, [sp, #152]
  40d058:	bl	404e60 <sd_bus_message_close_container@plt>
  40d05c:	str	w0, [sp, #136]
  40d060:	ldr	w0, [sp, #136]
  40d064:	cmp	w0, #0x0
  40d068:	b.ge	40d074 <method_list_images+0x3b0>  // b.tcont
  40d06c:	ldr	w19, [sp, #136]
  40d070:	b	40d08c <method_list_images+0x3c8>
  40d074:	ldr	x0, [sp, #152]
  40d078:	mov	x2, #0x0                   	// #0
  40d07c:	mov	x1, x0
  40d080:	mov	x0, #0x0                   	// #0
  40d084:	bl	404940 <sd_bus_send@plt>
  40d088:	mov	w19, w0
  40d08c:	add	x0, sp, #0xa0
  40d090:	bl	40c550 <hashmap_freep>
  40d094:	add	x0, sp, #0x98
  40d098:	bl	40c4c0 <sd_bus_message_unrefp>
  40d09c:	mov	w1, w19
  40d0a0:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40d0a4:	add	x0, x0, #0x728
  40d0a8:	ldr	x2, [sp, #232]
  40d0ac:	ldr	x0, [x0]
  40d0b0:	eor	x0, x2, x0
  40d0b4:	cmp	x0, #0x0
  40d0b8:	b.eq	40d0c0 <method_list_images+0x3fc>  // b.none
  40d0bc:	bl	404930 <__stack_chk_fail@plt>
  40d0c0:	mov	w0, w1
  40d0c4:	ldp	x19, x20, [sp, #32]
  40d0c8:	ldp	x21, x22, [sp, #48]
  40d0cc:	ldp	x23, x24, [sp, #64]
  40d0d0:	ldp	x25, x26, [sp, #80]
  40d0d4:	ldp	x29, x30, [sp, #16]
  40d0d8:	add	sp, sp, #0xf0
  40d0dc:	ret

000000000040d0e0 <redirect_method_to_image>:
  40d0e0:	stp	x29, x30, [sp, #-80]!
  40d0e4:	mov	x29, sp
  40d0e8:	str	x0, [sp, #40]
  40d0ec:	str	x1, [sp, #32]
  40d0f0:	str	x2, [sp, #24]
  40d0f4:	str	x3, [sp, #16]
  40d0f8:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40d0fc:	add	x0, x0, #0x728
  40d100:	ldr	x1, [x0]
  40d104:	str	x1, [sp, #72]
  40d108:	mov	x1, #0x0                   	// #0
  40d10c:	ldr	x0, [sp, #40]
  40d110:	cmp	x0, #0x0
  40d114:	cset	w0, eq  // eq = none
  40d118:	and	w0, w0, #0xff
  40d11c:	and	x0, x0, #0xff
  40d120:	cmp	x0, #0x0
  40d124:	b.eq	40d150 <redirect_method_to_image+0x70>  // b.none
  40d128:	adrp	x0, 413000 <_fini+0x1050>
  40d12c:	add	x1, x0, #0x4e3
  40d130:	adrp	x0, 413000 <_fini+0x1050>
  40d134:	add	x4, x0, #0xc90
  40d138:	mov	w3, #0xd0                  	// #208
  40d13c:	mov	x2, x1
  40d140:	adrp	x0, 413000 <_fini+0x1050>
  40d144:	add	x1, x0, #0x540
  40d148:	mov	w0, #0x0                   	// #0
  40d14c:	bl	404670 <log_assert_failed_realm@plt>
  40d150:	ldr	x0, [sp, #32]
  40d154:	cmp	x0, #0x0
  40d158:	cset	w0, eq  // eq = none
  40d15c:	and	w0, w0, #0xff
  40d160:	and	x0, x0, #0xff
  40d164:	cmp	x0, #0x0
  40d168:	b.eq	40d194 <redirect_method_to_image+0xb4>  // b.none
  40d16c:	adrp	x0, 413000 <_fini+0x1050>
  40d170:	add	x1, x0, #0x4e3
  40d174:	adrp	x0, 413000 <_fini+0x1050>
  40d178:	add	x4, x0, #0xc90
  40d17c:	mov	w3, #0xd1                  	// #209
  40d180:	mov	x2, x1
  40d184:	adrp	x0, 413000 <_fini+0x1050>
  40d188:	add	x1, x0, #0x538
  40d18c:	mov	w0, #0x0                   	// #0
  40d190:	bl	404670 <log_assert_failed_realm@plt>
  40d194:	ldr	x0, [sp, #16]
  40d198:	cmp	x0, #0x0
  40d19c:	cset	w0, eq  // eq = none
  40d1a0:	and	w0, w0, #0xff
  40d1a4:	and	x0, x0, #0xff
  40d1a8:	cmp	x0, #0x0
  40d1ac:	b.eq	40d1d8 <redirect_method_to_image+0xf8>  // b.none
  40d1b0:	adrp	x0, 413000 <_fini+0x1050>
  40d1b4:	add	x1, x0, #0x4e3
  40d1b8:	adrp	x0, 413000 <_fini+0x1050>
  40d1bc:	add	x4, x0, #0xc90
  40d1c0:	mov	w3, #0xd2                  	// #210
  40d1c4:	mov	x2, x1
  40d1c8:	adrp	x0, 413000 <_fini+0x1050>
  40d1cc:	add	x1, x0, #0x590
  40d1d0:	mov	w0, #0x0                   	// #0
  40d1d4:	bl	404670 <log_assert_failed_realm@plt>
  40d1d8:	add	x0, sp, #0x40
  40d1dc:	mov	x2, x0
  40d1e0:	adrp	x0, 413000 <_fini+0x1050>
  40d1e4:	add	x1, x0, #0x528
  40d1e8:	ldr	x0, [sp, #32]
  40d1ec:	bl	404680 <sd_bus_message_read@plt>
  40d1f0:	str	w0, [sp, #60]
  40d1f4:	ldr	w0, [sp, #60]
  40d1f8:	cmp	w0, #0x0
  40d1fc:	b.ge	40d208 <redirect_method_to_image+0x128>  // b.tcont
  40d200:	ldr	w0, [sp, #60]
  40d204:	b	40d228 <redirect_method_to_image+0x148>
  40d208:	ldr	x0, [sp, #64]
  40d20c:	ldr	x5, [sp, #16]
  40d210:	ldr	x4, [sp, #24]
  40d214:	mov	x3, #0x0                   	// #0
  40d218:	mov	x2, x0
  40d21c:	ldr	x1, [sp, #32]
  40d220:	ldr	x0, [sp, #40]
  40d224:	blr	x5
  40d228:	mov	w1, w0
  40d22c:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40d230:	add	x0, x0, #0x728
  40d234:	ldr	x2, [sp, #72]
  40d238:	ldr	x0, [x0]
  40d23c:	eor	x0, x2, x0
  40d240:	cmp	x0, #0x0
  40d244:	b.eq	40d24c <redirect_method_to_image+0x16c>  // b.none
  40d248:	bl	404930 <__stack_chk_fail@plt>
  40d24c:	mov	w0, w1
  40d250:	ldp	x29, x30, [sp], #80
  40d254:	ret

000000000040d258 <method_get_image_os_release>:
  40d258:	stp	x29, x30, [sp, #-48]!
  40d25c:	mov	x29, sp
  40d260:	str	x0, [sp, #40]
  40d264:	str	x1, [sp, #32]
  40d268:	str	x2, [sp, #24]
  40d26c:	adrp	x0, 40d000 <method_list_images+0x33c>
  40d270:	add	x3, x0, #0xf30
  40d274:	ldr	x2, [sp, #24]
  40d278:	ldr	x1, [sp, #40]
  40d27c:	ldr	x0, [sp, #32]
  40d280:	bl	40d0e0 <redirect_method_to_image>
  40d284:	ldp	x29, x30, [sp], #48
  40d288:	ret

000000000040d28c <method_get_image_metadata>:
  40d28c:	stp	x29, x30, [sp, #-48]!
  40d290:	mov	x29, sp
  40d294:	str	x0, [sp, #40]
  40d298:	str	x1, [sp, #32]
  40d29c:	str	x2, [sp, #24]
  40d2a0:	adrp	x0, 40e000 <bus_image_common_get_os_release+0xd0>
  40d2a4:	add	x3, x0, #0x314
  40d2a8:	ldr	x2, [sp, #24]
  40d2ac:	ldr	x1, [sp, #40]
  40d2b0:	ldr	x0, [sp, #32]
  40d2b4:	bl	40d0e0 <redirect_method_to_image>
  40d2b8:	ldp	x29, x30, [sp], #48
  40d2bc:	ret

000000000040d2c0 <method_get_image_state>:
  40d2c0:	stp	x29, x30, [sp, #-80]!
  40d2c4:	mov	x29, sp
  40d2c8:	str	x0, [sp, #40]
  40d2cc:	str	x1, [sp, #32]
  40d2d0:	str	x2, [sp, #24]
  40d2d4:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40d2d8:	add	x0, x0, #0x728
  40d2dc:	ldr	x1, [x0]
  40d2e0:	str	x1, [sp, #72]
  40d2e4:	mov	x1, #0x0                   	// #0
  40d2e8:	ldr	x0, [sp, #40]
  40d2ec:	cmp	x0, #0x0
  40d2f0:	cset	w0, eq  // eq = none
  40d2f4:	and	w0, w0, #0xff
  40d2f8:	and	x0, x0, #0xff
  40d2fc:	cmp	x0, #0x0
  40d300:	b.eq	40d32c <method_get_image_state+0x6c>  // b.none
  40d304:	adrp	x0, 413000 <_fini+0x1050>
  40d308:	add	x1, x0, #0x4e3
  40d30c:	adrp	x0, 413000 <_fini+0x1050>
  40d310:	add	x4, x0, #0xcb0
  40d314:	mov	w3, #0xe8                  	// #232
  40d318:	mov	x2, x1
  40d31c:	adrp	x0, 413000 <_fini+0x1050>
  40d320:	add	x1, x0, #0x538
  40d324:	mov	w0, #0x0                   	// #0
  40d328:	bl	404670 <log_assert_failed_realm@plt>
  40d32c:	add	x0, sp, #0x40
  40d330:	mov	x2, x0
  40d334:	adrp	x0, 413000 <_fini+0x1050>
  40d338:	add	x1, x0, #0x528
  40d33c:	ldr	x0, [sp, #40]
  40d340:	bl	404680 <sd_bus_message_read@plt>
  40d344:	str	w0, [sp, #60]
  40d348:	ldr	w0, [sp, #60]
  40d34c:	cmp	w0, #0x0
  40d350:	b.ge	40d35c <method_get_image_state+0x9c>  // b.tcont
  40d354:	ldr	w0, [sp, #60]
  40d358:	b	40d3bc <method_get_image_state+0xfc>
  40d35c:	ldr	x0, [sp, #40]
  40d360:	bl	404610 <sd_bus_message_get_bus@plt>
  40d364:	mov	x5, x0
  40d368:	ldr	x0, [sp, #64]
  40d36c:	add	x1, sp, #0x38
  40d370:	ldr	x4, [sp, #24]
  40d374:	mov	x3, x1
  40d378:	mov	w2, #0x0                   	// #0
  40d37c:	mov	x1, x0
  40d380:	mov	x0, x5
  40d384:	bl	40c22c <portable_get_state>
  40d388:	str	w0, [sp, #60]
  40d38c:	ldr	w0, [sp, #60]
  40d390:	cmp	w0, #0x0
  40d394:	b.ge	40d3a0 <method_get_image_state+0xe0>  // b.tcont
  40d398:	ldr	w0, [sp, #60]
  40d39c:	b	40d3bc <method_get_image_state+0xfc>
  40d3a0:	ldr	w0, [sp, #56]
  40d3a4:	bl	40c45c <portable_state_to_string>
  40d3a8:	mov	x2, x0
  40d3ac:	adrp	x0, 413000 <_fini+0x1050>
  40d3b0:	add	x1, x0, #0x528
  40d3b4:	ldr	x0, [sp, #40]
  40d3b8:	bl	404340 <sd_bus_reply_method_return@plt>
  40d3bc:	mov	w1, w0
  40d3c0:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40d3c4:	add	x0, x0, #0x728
  40d3c8:	ldr	x2, [sp, #72]
  40d3cc:	ldr	x0, [x0]
  40d3d0:	eor	x0, x2, x0
  40d3d4:	cmp	x0, #0x0
  40d3d8:	b.eq	40d3e0 <method_get_image_state+0x120>  // b.none
  40d3dc:	bl	404930 <__stack_chk_fail@plt>
  40d3e0:	mov	w0, w1
  40d3e4:	ldp	x29, x30, [sp], #80
  40d3e8:	ret

000000000040d3ec <method_attach_image>:
  40d3ec:	stp	x29, x30, [sp, #-48]!
  40d3f0:	mov	x29, sp
  40d3f4:	str	x0, [sp, #40]
  40d3f8:	str	x1, [sp, #32]
  40d3fc:	str	x2, [sp, #24]
  40d400:	adrp	x0, 40e000 <bus_image_common_get_os_release+0xd0>
  40d404:	add	x3, x0, #0x900
  40d408:	ldr	x2, [sp, #24]
  40d40c:	ldr	x1, [sp, #40]
  40d410:	ldr	x0, [sp, #32]
  40d414:	bl	40d0e0 <redirect_method_to_image>
  40d418:	ldp	x29, x30, [sp], #48
  40d41c:	ret

000000000040d420 <method_detach_image>:
  40d420:	stp	x29, x30, [sp, #-96]!
  40d424:	mov	x29, sp
  40d428:	str	x0, [sp, #40]
  40d42c:	str	x1, [sp, #32]
  40d430:	str	x2, [sp, #24]
  40d434:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40d438:	add	x0, x0, #0x728
  40d43c:	ldr	x1, [x0]
  40d440:	str	x1, [sp, #88]
  40d444:	mov	x1, #0x0                   	// #0
  40d448:	str	xzr, [sp, #56]
  40d44c:	ldr	x0, [sp, #32]
  40d450:	str	x0, [sp, #80]
  40d454:	str	xzr, [sp, #64]
  40d458:	ldr	x0, [sp, #40]
  40d45c:	cmp	x0, #0x0
  40d460:	cset	w0, eq  // eq = none
  40d464:	and	w0, w0, #0xff
  40d468:	and	x0, x0, #0xff
  40d46c:	cmp	x0, #0x0
  40d470:	b.eq	40d49c <method_detach_image+0x7c>  // b.none
  40d474:	adrp	x0, 413000 <_fini+0x1050>
  40d478:	add	x1, x0, #0x4e3
  40d47c:	adrp	x0, 413000 <_fini+0x1050>
  40d480:	add	x4, x0, #0xcc8
  40d484:	mov	w3, #0x105                 	// #261
  40d488:	mov	x2, x1
  40d48c:	adrp	x0, 413000 <_fini+0x1050>
  40d490:	add	x1, x0, #0x538
  40d494:	mov	w0, #0x0                   	// #0
  40d498:	bl	404670 <log_assert_failed_realm@plt>
  40d49c:	ldr	x0, [sp, #80]
  40d4a0:	cmp	x0, #0x0
  40d4a4:	cset	w0, eq  // eq = none
  40d4a8:	and	w0, w0, #0xff
  40d4ac:	and	x0, x0, #0xff
  40d4b0:	cmp	x0, #0x0
  40d4b4:	b.eq	40d4e0 <method_detach_image+0xc0>  // b.none
  40d4b8:	adrp	x0, 413000 <_fini+0x1050>
  40d4bc:	add	x1, x0, #0x4e3
  40d4c0:	adrp	x0, 413000 <_fini+0x1050>
  40d4c4:	add	x4, x0, #0xcc8
  40d4c8:	mov	w3, #0x106                 	// #262
  40d4cc:	mov	x2, x1
  40d4d0:	adrp	x0, 413000 <_fini+0x1050>
  40d4d4:	add	x1, x0, #0x540
  40d4d8:	mov	w0, #0x0                   	// #0
  40d4dc:	bl	404670 <log_assert_failed_realm@plt>
  40d4e0:	add	x1, sp, #0x30
  40d4e4:	add	x0, sp, #0x48
  40d4e8:	mov	x3, x1
  40d4ec:	mov	x2, x0
  40d4f0:	adrp	x0, 413000 <_fini+0x1050>
  40d4f4:	add	x1, x0, #0x598
  40d4f8:	ldr	x0, [sp, #40]
  40d4fc:	bl	404680 <sd_bus_message_read@plt>
  40d500:	str	w0, [sp, #52]
  40d504:	ldr	w0, [sp, #52]
  40d508:	cmp	w0, #0x0
  40d50c:	b.ge	40d518 <method_detach_image+0xf8>  // b.tcont
  40d510:	ldr	w0, [sp, #52]
  40d514:	b	40d600 <method_detach_image+0x1e0>
  40d518:	ldr	x0, [sp, #80]
  40d51c:	add	x0, x0, #0x10
  40d520:	ldr	x7, [sp, #24]
  40d524:	mov	x6, x0
  40d528:	mov	w5, #0xffffffff            	// #-1
  40d52c:	mov	w4, #0x0                   	// #0
  40d530:	mov	x3, #0x0                   	// #0
  40d534:	adrp	x0, 413000 <_fini+0x1050>
  40d538:	add	x2, x0, #0x5a0
  40d53c:	mov	w1, #0x15                  	// #21
  40d540:	ldr	x0, [sp, #40]
  40d544:	bl	404e20 <bus_verify_polkit_async@plt>
  40d548:	str	w0, [sp, #52]
  40d54c:	ldr	w0, [sp, #52]
  40d550:	cmp	w0, #0x0
  40d554:	b.ge	40d560 <method_detach_image+0x140>  // b.tcont
  40d558:	ldr	w0, [sp, #52]
  40d55c:	b	40d600 <method_detach_image+0x1e0>
  40d560:	ldr	w0, [sp, #52]
  40d564:	cmp	w0, #0x0
  40d568:	b.ne	40d574 <method_detach_image+0x154>  // b.any
  40d56c:	mov	w0, #0x1                   	// #1
  40d570:	b	40d600 <method_detach_image+0x1e0>
  40d574:	ldr	x0, [sp, #40]
  40d578:	bl	404610 <sd_bus_message_get_bus@plt>
  40d57c:	mov	x6, x0
  40d580:	ldr	x1, [sp, #72]
  40d584:	ldr	w0, [sp, #48]
  40d588:	cmp	w0, #0x0
  40d58c:	b.eq	40d598 <method_detach_image+0x178>  // b.none
  40d590:	mov	w0, #0x4                   	// #4
  40d594:	b	40d59c <method_detach_image+0x17c>
  40d598:	mov	w0, #0x0                   	// #0
  40d59c:	add	x3, sp, #0x40
  40d5a0:	add	x2, sp, #0x38
  40d5a4:	ldr	x5, [sp, #24]
  40d5a8:	mov	x4, x3
  40d5ac:	mov	x3, x2
  40d5b0:	mov	w2, w0
  40d5b4:	mov	x0, x6
  40d5b8:	bl	40ab64 <portable_detach>
  40d5bc:	str	w0, [sp, #52]
  40d5c0:	ldr	w0, [sp, #52]
  40d5c4:	cmp	w0, #0x0
  40d5c8:	b.lt	40d5ec <method_detach_image+0x1cc>  // b.tstop
  40d5cc:	ldr	x0, [sp, #56]
  40d5d0:	ldr	x1, [sp, #64]
  40d5d4:	mov	x2, x1
  40d5d8:	mov	x1, x0
  40d5dc:	ldr	x0, [sp, #40]
  40d5e0:	bl	40d8c0 <reply_portable_changes>
  40d5e4:	str	w0, [sp, #52]
  40d5e8:	b	40d5f0 <method_detach_image+0x1d0>
  40d5ec:	nop
  40d5f0:	ldr	x0, [sp, #56]
  40d5f4:	ldr	x1, [sp, #64]
  40d5f8:	bl	4086c4 <portable_changes_free>
  40d5fc:	ldr	w0, [sp, #52]
  40d600:	mov	w1, w0
  40d604:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40d608:	add	x0, x0, #0x728
  40d60c:	ldr	x2, [sp, #88]
  40d610:	ldr	x0, [x0]
  40d614:	eor	x0, x2, x0
  40d618:	cmp	x0, #0x0
  40d61c:	b.eq	40d624 <method_detach_image+0x204>  // b.none
  40d620:	bl	404930 <__stack_chk_fail@plt>
  40d624:	mov	w0, w1
  40d628:	ldp	x29, x30, [sp], #96
  40d62c:	ret

000000000040d630 <method_remove_image>:
  40d630:	stp	x29, x30, [sp, #-48]!
  40d634:	mov	x29, sp
  40d638:	str	x0, [sp, #40]
  40d63c:	str	x1, [sp, #32]
  40d640:	str	x2, [sp, #24]
  40d644:	adrp	x0, 40e000 <bus_image_common_get_os_release+0xd0>
  40d648:	add	x3, x0, #0xf14
  40d64c:	ldr	x2, [sp, #24]
  40d650:	ldr	x1, [sp, #40]
  40d654:	ldr	x0, [sp, #32]
  40d658:	bl	40d0e0 <redirect_method_to_image>
  40d65c:	ldp	x29, x30, [sp], #48
  40d660:	ret

000000000040d664 <method_mark_image_read_only>:
  40d664:	stp	x29, x30, [sp, #-48]!
  40d668:	mov	x29, sp
  40d66c:	str	x0, [sp, #40]
  40d670:	str	x1, [sp, #32]
  40d674:	str	x2, [sp, #24]
  40d678:	adrp	x0, 40f000 <bus_image_common_remove+0xec>
  40d67c:	add	x3, x0, #0x2fc
  40d680:	ldr	x2, [sp, #24]
  40d684:	ldr	x1, [sp, #40]
  40d688:	ldr	x0, [sp, #32]
  40d68c:	bl	40d0e0 <redirect_method_to_image>
  40d690:	ldp	x29, x30, [sp], #48
  40d694:	ret

000000000040d698 <method_set_image_limit>:
  40d698:	stp	x29, x30, [sp, #-48]!
  40d69c:	mov	x29, sp
  40d6a0:	str	x0, [sp, #40]
  40d6a4:	str	x1, [sp, #32]
  40d6a8:	str	x2, [sp, #24]
  40d6ac:	adrp	x0, 40f000 <bus_image_common_remove+0xec>
  40d6b0:	add	x3, x0, #0x560
  40d6b4:	ldr	x2, [sp, #24]
  40d6b8:	ldr	x1, [sp, #40]
  40d6bc:	ldr	x0, [sp, #32]
  40d6c0:	bl	40d0e0 <redirect_method_to_image>
  40d6c4:	ldp	x29, x30, [sp], #48
  40d6c8:	ret

000000000040d6cc <method_set_pool_limit>:
  40d6cc:	stp	x29, x30, [sp, #-80]!
  40d6d0:	mov	x29, sp
  40d6d4:	str	x0, [sp, #40]
  40d6d8:	str	x1, [sp, #32]
  40d6dc:	str	x2, [sp, #24]
  40d6e0:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40d6e4:	add	x0, x0, #0x728
  40d6e8:	ldr	x1, [x0]
  40d6ec:	str	x1, [sp, #72]
  40d6f0:	mov	x1, #0x0                   	// #0
  40d6f4:	ldr	x0, [sp, #32]
  40d6f8:	str	x0, [sp, #64]
  40d6fc:	ldr	x0, [sp, #40]
  40d700:	cmp	x0, #0x0
  40d704:	cset	w0, eq  // eq = none
  40d708:	and	w0, w0, #0xff
  40d70c:	and	x0, x0, #0xff
  40d710:	cmp	x0, #0x0
  40d714:	b.eq	40d740 <method_set_pool_limit+0x74>  // b.none
  40d718:	adrp	x0, 413000 <_fini+0x1050>
  40d71c:	add	x1, x0, #0x4e3
  40d720:	adrp	x0, 413000 <_fini+0x1050>
  40d724:	add	x4, x0, #0xce0
  40d728:	mov	w3, #0x140                 	// #320
  40d72c:	mov	x2, x1
  40d730:	adrp	x0, 413000 <_fini+0x1050>
  40d734:	add	x1, x0, #0x538
  40d738:	mov	w0, #0x0                   	// #0
  40d73c:	bl	404670 <log_assert_failed_realm@plt>
  40d740:	add	x0, sp, #0x38
  40d744:	mov	x2, x0
  40d748:	adrp	x0, 413000 <_fini+0x1050>
  40d74c:	add	x1, x0, #0x530
  40d750:	ldr	x0, [sp, #40]
  40d754:	bl	404680 <sd_bus_message_read@plt>
  40d758:	str	w0, [sp, #52]
  40d75c:	ldr	w0, [sp, #52]
  40d760:	cmp	w0, #0x0
  40d764:	b.ge	40d770 <method_set_pool_limit+0xa4>  // b.tcont
  40d768:	ldr	w0, [sp, #52]
  40d76c:	b	40d890 <method_set_pool_limit+0x1c4>
  40d770:	ldr	x0, [sp, #56]
  40d774:	bl	40c5c8 <FILE_SIZE_VALID_OR_INFINITY>
  40d778:	and	w0, w0, #0xff
  40d77c:	eor	w0, w0, #0x1
  40d780:	and	w0, w0, #0xff
  40d784:	cmp	w0, #0x0
  40d788:	b.eq	40d7a8 <method_set_pool_limit+0xdc>  // b.none
  40d78c:	adrp	x0, 413000 <_fini+0x1050>
  40d790:	add	x2, x0, #0x5c8
  40d794:	adrp	x0, 413000 <_fini+0x1050>
  40d798:	add	x1, x0, #0x5e0
  40d79c:	ldr	x0, [sp, #24]
  40d7a0:	bl	404910 <sd_bus_error_setf@plt>
  40d7a4:	b	40d890 <method_set_pool_limit+0x1c4>
  40d7a8:	ldr	x0, [sp, #64]
  40d7ac:	add	x0, x0, #0x10
  40d7b0:	ldr	x7, [sp, #24]
  40d7b4:	mov	x6, x0
  40d7b8:	mov	w5, #0xffffffff            	// #-1
  40d7bc:	mov	w4, #0x0                   	// #0
  40d7c0:	mov	x3, #0x0                   	// #0
  40d7c4:	adrp	x0, 413000 <_fini+0x1050>
  40d7c8:	add	x2, x0, #0x608
  40d7cc:	mov	w1, #0x15                  	// #21
  40d7d0:	ldr	x0, [sp, #40]
  40d7d4:	bl	404e20 <bus_verify_polkit_async@plt>
  40d7d8:	str	w0, [sp, #52]
  40d7dc:	ldr	w0, [sp, #52]
  40d7e0:	cmp	w0, #0x0
  40d7e4:	b.ge	40d7f0 <method_set_pool_limit+0x124>  // b.tcont
  40d7e8:	ldr	w0, [sp, #52]
  40d7ec:	b	40d890 <method_set_pool_limit+0x1c4>
  40d7f0:	ldr	w0, [sp, #52]
  40d7f4:	cmp	w0, #0x0
  40d7f8:	b.ne	40d804 <method_set_pool_limit+0x138>  // b.any
  40d7fc:	mov	w0, #0x1                   	// #1
  40d800:	b	40d890 <method_set_pool_limit+0x1c4>
  40d804:	ldr	x0, [sp, #56]
  40d808:	mov	x2, x0
  40d80c:	mov	x1, #0x0                   	// #0
  40d810:	adrp	x0, 413000 <_fini+0x1050>
  40d814:	add	x0, x0, #0x510
  40d818:	bl	4049a0 <btrfs_qgroup_set_limit@plt>
  40d81c:	ldr	x0, [sp, #56]
  40d820:	mov	x2, x0
  40d824:	mov	x1, #0x0                   	// #0
  40d828:	adrp	x0, 413000 <_fini+0x1050>
  40d82c:	add	x0, x0, #0x510
  40d830:	bl	404c80 <btrfs_subvol_set_subtree_quota_limit@plt>
  40d834:	str	w0, [sp, #52]
  40d838:	ldr	w0, [sp, #52]
  40d83c:	cmn	w0, #0x19
  40d840:	b.ne	40d860 <method_set_pool_limit+0x194>  // b.any
  40d844:	adrp	x0, 413000 <_fini+0x1050>
  40d848:	add	x2, x0, #0x630
  40d84c:	adrp	x0, 413000 <_fini+0x1050>
  40d850:	add	x1, x0, #0x658
  40d854:	ldr	x0, [sp, #24]
  40d858:	bl	404910 <sd_bus_error_setf@plt>
  40d85c:	b	40d890 <method_set_pool_limit+0x1c4>
  40d860:	ldr	w0, [sp, #52]
  40d864:	cmp	w0, #0x0
  40d868:	b.ge	40d884 <method_set_pool_limit+0x1b8>  // b.tcont
  40d86c:	adrp	x0, 413000 <_fini+0x1050>
  40d870:	add	x2, x0, #0x680
  40d874:	ldr	w1, [sp, #52]
  40d878:	ldr	x0, [sp, #24]
  40d87c:	bl	404440 <sd_bus_error_set_errnof@plt>
  40d880:	b	40d890 <method_set_pool_limit+0x1c4>
  40d884:	mov	x1, #0x0                   	// #0
  40d888:	ldr	x0, [sp, #40]
  40d88c:	bl	404340 <sd_bus_reply_method_return@plt>
  40d890:	mov	w1, w0
  40d894:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40d898:	add	x0, x0, #0x728
  40d89c:	ldr	x2, [sp, #72]
  40d8a0:	ldr	x0, [x0]
  40d8a4:	eor	x0, x2, x0
  40d8a8:	cmp	x0, #0x0
  40d8ac:	b.eq	40d8b4 <method_set_pool_limit+0x1e8>  // b.none
  40d8b0:	bl	404930 <__stack_chk_fail@plt>
  40d8b4:	mov	w0, w1
  40d8b8:	ldp	x29, x30, [sp], #80
  40d8bc:	ret

000000000040d8c0 <reply_portable_changes>:
  40d8c0:	stp	x29, x30, [sp, #-96]!
  40d8c4:	mov	x29, sp
  40d8c8:	str	x19, [sp, #16]
  40d8cc:	str	x0, [sp, #56]
  40d8d0:	str	x1, [sp, #48]
  40d8d4:	str	x2, [sp, #40]
  40d8d8:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40d8dc:	add	x0, x0, #0x728
  40d8e0:	ldr	x1, [x0]
  40d8e4:	str	x1, [sp, #88]
  40d8e8:	mov	x1, #0x0                   	// #0
  40d8ec:	str	xzr, [sp, #72]
  40d8f0:	ldr	x0, [sp, #56]
  40d8f4:	cmp	x0, #0x0
  40d8f8:	cset	w0, eq  // eq = none
  40d8fc:	and	w0, w0, #0xff
  40d900:	and	x0, x0, #0xff
  40d904:	cmp	x0, #0x0
  40d908:	b.eq	40d934 <reply_portable_changes+0x74>  // b.none
  40d90c:	adrp	x0, 413000 <_fini+0x1050>
  40d910:	add	x1, x0, #0x4e3
  40d914:	adrp	x0, 413000 <_fini+0x1050>
  40d918:	add	x4, x0, #0xcf8
  40d91c:	mov	w3, #0x17a                 	// #378
  40d920:	mov	x2, x1
  40d924:	adrp	x0, 413000 <_fini+0x1050>
  40d928:	add	x1, x0, #0x540
  40d92c:	mov	w0, #0x0                   	// #0
  40d930:	bl	404670 <log_assert_failed_realm@plt>
  40d934:	ldr	x0, [sp, #48]
  40d938:	cmp	x0, #0x0
  40d93c:	cset	w0, eq  // eq = none
  40d940:	and	w0, w0, #0xff
  40d944:	and	x0, x0, #0xff
  40d948:	cmp	x0, #0x0
  40d94c:	b.eq	40d994 <reply_portable_changes+0xd4>  // b.none
  40d950:	ldr	x0, [sp, #40]
  40d954:	cmp	x0, #0x0
  40d958:	cset	w0, ne  // ne = any
  40d95c:	and	w0, w0, #0xff
  40d960:	and	x0, x0, #0xff
  40d964:	cmp	x0, #0x0
  40d968:	b.eq	40d994 <reply_portable_changes+0xd4>  // b.none
  40d96c:	adrp	x0, 413000 <_fini+0x1050>
  40d970:	add	x1, x0, #0x4e3
  40d974:	adrp	x0, 413000 <_fini+0x1050>
  40d978:	add	x4, x0, #0xcf8
  40d97c:	mov	w3, #0x17b                 	// #379
  40d980:	mov	x2, x1
  40d984:	adrp	x0, 413000 <_fini+0x1050>
  40d988:	add	x1, x0, #0x808
  40d98c:	mov	w0, #0x0                   	// #0
  40d990:	bl	404670 <log_assert_failed_realm@plt>
  40d994:	add	x0, sp, #0x48
  40d998:	mov	x1, x0
  40d99c:	ldr	x0, [sp, #56]
  40d9a0:	bl	4044b0 <sd_bus_message_new_method_return@plt>
  40d9a4:	str	w0, [sp, #68]
  40d9a8:	ldr	w0, [sp, #68]
  40d9ac:	cmp	w0, #0x0
  40d9b0:	b.ge	40d9bc <reply_portable_changes+0xfc>  // b.tcont
  40d9b4:	ldr	w19, [sp, #68]
  40d9b8:	b	40daf4 <reply_portable_changes+0x234>
  40d9bc:	ldr	x3, [sp, #72]
  40d9c0:	adrp	x0, 413000 <_fini+0x1050>
  40d9c4:	add	x2, x0, #0x828
  40d9c8:	mov	w1, #0x61                  	// #97
  40d9cc:	mov	x0, x3
  40d9d0:	bl	4044e0 <sd_bus_message_open_container@plt>
  40d9d4:	str	w0, [sp, #68]
  40d9d8:	ldr	w0, [sp, #68]
  40d9dc:	cmp	w0, #0x0
  40d9e0:	b.ge	40d9ec <reply_portable_changes+0x12c>  // b.tcont
  40d9e4:	ldr	w19, [sp, #68]
  40d9e8:	b	40daf4 <reply_portable_changes+0x234>
  40d9ec:	str	xzr, [sp, #80]
  40d9f0:	b	40daac <reply_portable_changes+0x1ec>
  40d9f4:	ldr	x19, [sp, #72]
  40d9f8:	ldr	x1, [sp, #80]
  40d9fc:	mov	x0, x1
  40da00:	lsl	x0, x0, #1
  40da04:	add	x0, x0, x1
  40da08:	lsl	x0, x0, #3
  40da0c:	mov	x1, x0
  40da10:	ldr	x0, [sp, #48]
  40da14:	add	x0, x0, x1
  40da18:	ldr	w0, [x0]
  40da1c:	bl	40c41c <portable_change_type_to_string>
  40da20:	mov	x5, x0
  40da24:	ldr	x1, [sp, #80]
  40da28:	mov	x0, x1
  40da2c:	lsl	x0, x0, #1
  40da30:	add	x0, x0, x1
  40da34:	lsl	x0, x0, #3
  40da38:	mov	x1, x0
  40da3c:	ldr	x0, [sp, #48]
  40da40:	add	x0, x0, x1
  40da44:	ldr	x2, [x0, #8]
  40da48:	ldr	x1, [sp, #80]
  40da4c:	mov	x0, x1
  40da50:	lsl	x0, x0, #1
  40da54:	add	x0, x0, x1
  40da58:	lsl	x0, x0, #3
  40da5c:	mov	x1, x0
  40da60:	ldr	x0, [sp, #48]
  40da64:	add	x0, x0, x1
  40da68:	ldr	x0, [x0, #16]
  40da6c:	mov	x4, x0
  40da70:	mov	x3, x2
  40da74:	mov	x2, x5
  40da78:	adrp	x0, 413000 <_fini+0x1050>
  40da7c:	add	x1, x0, #0x828
  40da80:	mov	x0, x19
  40da84:	bl	4045b0 <sd_bus_message_append@plt>
  40da88:	str	w0, [sp, #68]
  40da8c:	ldr	w0, [sp, #68]
  40da90:	cmp	w0, #0x0
  40da94:	b.ge	40daa0 <reply_portable_changes+0x1e0>  // b.tcont
  40da98:	ldr	w19, [sp, #68]
  40da9c:	b	40daf4 <reply_portable_changes+0x234>
  40daa0:	ldr	x0, [sp, #80]
  40daa4:	add	x0, x0, #0x1
  40daa8:	str	x0, [sp, #80]
  40daac:	ldr	x1, [sp, #80]
  40dab0:	ldr	x0, [sp, #40]
  40dab4:	cmp	x1, x0
  40dab8:	b.cc	40d9f4 <reply_portable_changes+0x134>  // b.lo, b.ul, b.last
  40dabc:	ldr	x0, [sp, #72]
  40dac0:	bl	404e60 <sd_bus_message_close_container@plt>
  40dac4:	str	w0, [sp, #68]
  40dac8:	ldr	w0, [sp, #68]
  40dacc:	cmp	w0, #0x0
  40dad0:	b.ge	40dadc <reply_portable_changes+0x21c>  // b.tcont
  40dad4:	ldr	w19, [sp, #68]
  40dad8:	b	40daf4 <reply_portable_changes+0x234>
  40dadc:	ldr	x0, [sp, #72]
  40dae0:	mov	x2, #0x0                   	// #0
  40dae4:	mov	x1, x0
  40dae8:	mov	x0, #0x0                   	// #0
  40daec:	bl	404940 <sd_bus_send@plt>
  40daf0:	mov	w19, w0
  40daf4:	add	x0, sp, #0x48
  40daf8:	bl	40c4c0 <sd_bus_message_unrefp>
  40dafc:	mov	w1, w19
  40db00:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40db04:	add	x0, x0, #0x728
  40db08:	ldr	x2, [sp, #88]
  40db0c:	ldr	x0, [x0]
  40db10:	eor	x0, x2, x0
  40db14:	cmp	x0, #0x0
  40db18:	b.eq	40db20 <reply_portable_changes+0x260>  // b.none
  40db1c:	bl	404930 <__stack_chk_fail@plt>
  40db20:	mov	w0, w1
  40db24:	ldr	x19, [sp, #16]
  40db28:	ldp	x29, x30, [sp], #96
  40db2c:	ret

000000000040db30 <freep>:
  40db30:	stp	x29, x30, [sp, #-32]!
  40db34:	mov	x29, sp
  40db38:	str	x0, [sp, #24]
  40db3c:	ldr	x0, [sp, #24]
  40db40:	ldr	x0, [x0]
  40db44:	bl	404cc0 <free@plt>
  40db48:	nop
  40db4c:	ldp	x29, x30, [sp], #32
  40db50:	ret

000000000040db54 <sd_bus_message_unrefp>:
  40db54:	stp	x29, x30, [sp, #-32]!
  40db58:	mov	x29, sp
  40db5c:	str	x0, [sp, #24]
  40db60:	ldr	x0, [sp, #24]
  40db64:	ldr	x0, [x0]
  40db68:	cmp	x0, #0x0
  40db6c:	b.eq	40db7c <sd_bus_message_unrefp+0x28>  // b.none
  40db70:	ldr	x0, [sp, #24]
  40db74:	ldr	x0, [x0]
  40db78:	bl	4043e0 <sd_bus_message_unref@plt>
  40db7c:	nop
  40db80:	ldp	x29, x30, [sp], #32
  40db84:	ret

000000000040db88 <isempty>:
  40db88:	sub	sp, sp, #0x10
  40db8c:	str	x0, [sp, #8]
  40db90:	ldr	x0, [sp, #8]
  40db94:	cmp	x0, #0x0
  40db98:	b.eq	40dbac <isempty+0x24>  // b.none
  40db9c:	ldr	x0, [sp, #8]
  40dba0:	ldrb	w0, [x0]
  40dba4:	cmp	w0, #0x0
  40dba8:	b.ne	40dbb4 <isempty+0x2c>  // b.any
  40dbac:	mov	w0, #0x1                   	// #1
  40dbb0:	b	40dbb8 <isempty+0x30>
  40dbb4:	mov	w0, #0x0                   	// #0
  40dbb8:	and	w0, w0, #0x1
  40dbbc:	and	w0, w0, #0xff
  40dbc0:	add	sp, sp, #0x10
  40dbc4:	ret

000000000040dbc8 <hashmap_free>:
  40dbc8:	stp	x29, x30, [sp, #-32]!
  40dbcc:	mov	x29, sp
  40dbd0:	str	x0, [sp, #24]
  40dbd4:	mov	x2, #0x0                   	// #0
  40dbd8:	mov	x1, #0x0                   	// #0
  40dbdc:	ldr	x0, [sp, #24]
  40dbe0:	bl	404320 <internal_hashmap_free@plt>
  40dbe4:	ldp	x29, x30, [sp], #32
  40dbe8:	ret

000000000040dbec <hashmap_size>:
  40dbec:	stp	x29, x30, [sp, #-32]!
  40dbf0:	mov	x29, sp
  40dbf4:	str	x0, [sp, #24]
  40dbf8:	ldr	x0, [sp, #24]
  40dbfc:	bl	404a70 <internal_hashmap_size@plt>
  40dc00:	ldp	x29, x30, [sp], #32
  40dc04:	ret

000000000040dc08 <hashmap_iterate>:
  40dc08:	stp	x29, x30, [sp, #-48]!
  40dc0c:	mov	x29, sp
  40dc10:	str	x0, [sp, #40]
  40dc14:	str	x1, [sp, #32]
  40dc18:	str	x2, [sp, #24]
  40dc1c:	str	x3, [sp, #16]
  40dc20:	ldr	x3, [sp, #16]
  40dc24:	ldr	x2, [sp, #24]
  40dc28:	ldr	x1, [sp, #32]
  40dc2c:	ldr	x0, [sp, #40]
  40dc30:	bl	404bf0 <internal_hashmap_iterate@plt>
  40dc34:	and	w0, w0, #0xff
  40dc38:	ldp	x29, x30, [sp], #48
  40dc3c:	ret

000000000040dc40 <hashmap_freep>:
  40dc40:	stp	x29, x30, [sp, #-32]!
  40dc44:	mov	x29, sp
  40dc48:	str	x0, [sp, #24]
  40dc4c:	ldr	x0, [sp, #24]
  40dc50:	ldr	x0, [x0]
  40dc54:	cmp	x0, #0x0
  40dc58:	b.eq	40dc68 <hashmap_freep+0x28>  // b.none
  40dc5c:	ldr	x0, [sp, #24]
  40dc60:	ldr	x0, [x0]
  40dc64:	bl	40dbc8 <hashmap_free>
  40dc68:	nop
  40dc6c:	ldp	x29, x30, [sp], #32
  40dc70:	ret

000000000040dc74 <close_pairp>:
  40dc74:	stp	x29, x30, [sp, #-32]!
  40dc78:	mov	x29, sp
  40dc7c:	str	x0, [sp, #24]
  40dc80:	ldr	x0, [sp, #24]
  40dc84:	bl	404600 <safe_close_pair@plt>
  40dc88:	nop
  40dc8c:	ldp	x29, x30, [sp], #32
  40dc90:	ret

000000000040dc94 <fclosep>:
  40dc94:	stp	x29, x30, [sp, #-32]!
  40dc98:	mov	x29, sp
  40dc9c:	str	x0, [sp, #24]
  40dca0:	ldr	x0, [sp, #24]
  40dca4:	ldr	x0, [x0]
  40dca8:	bl	404280 <safe_fclose@plt>
  40dcac:	nop
  40dcb0:	ldp	x29, x30, [sp], #32
  40dcb4:	ret

000000000040dcb8 <read_full_stream>:
  40dcb8:	stp	x29, x30, [sp, #-48]!
  40dcbc:	mov	x29, sp
  40dcc0:	str	x0, [sp, #40]
  40dcc4:	str	x1, [sp, #32]
  40dcc8:	str	x2, [sp, #24]
  40dccc:	ldr	x4, [sp, #24]
  40dcd0:	ldr	x3, [sp, #32]
  40dcd4:	mov	w2, #0x0                   	// #0
  40dcd8:	mov	x1, #0x0                   	// #0
  40dcdc:	ldr	x0, [sp, #40]
  40dce0:	bl	404c30 <read_full_stream_full@plt>
  40dce4:	ldp	x29, x30, [sp], #48
  40dce8:	ret

000000000040dcec <FILE_SIZE_VALID>:
  40dcec:	sub	sp, sp, #0x10
  40dcf0:	str	x0, [sp, #8]
  40dcf4:	ldr	x0, [sp, #8]
  40dcf8:	mvn	x0, x0
  40dcfc:	lsr	x0, x0, #63
  40dd00:	and	w0, w0, #0xff
  40dd04:	add	sp, sp, #0x10
  40dd08:	ret

000000000040dd0c <FILE_SIZE_VALID_OR_INFINITY>:
  40dd0c:	stp	x29, x30, [sp, #-32]!
  40dd10:	mov	x29, sp
  40dd14:	str	x0, [sp, #24]
  40dd18:	ldr	x0, [sp, #24]
  40dd1c:	cmn	x0, #0x1
  40dd20:	b.ne	40dd2c <FILE_SIZE_VALID_OR_INFINITY+0x20>  // b.any
  40dd24:	mov	w0, #0x1                   	// #1
  40dd28:	b	40dd38 <FILE_SIZE_VALID_OR_INFINITY+0x2c>
  40dd2c:	ldr	x0, [sp, #24]
  40dd30:	bl	40dcec <FILE_SIZE_VALID>
  40dd34:	and	w0, w0, #0xff
  40dd38:	ldp	x29, x30, [sp], #32
  40dd3c:	ret

000000000040dd40 <strv_freep>:
  40dd40:	stp	x29, x30, [sp, #-32]!
  40dd44:	mov	x29, sp
  40dd48:	str	x0, [sp, #24]
  40dd4c:	ldr	x0, [sp, #24]
  40dd50:	ldr	x0, [x0]
  40dd54:	cmp	x0, #0x0
  40dd58:	b.eq	40dd68 <strv_freep+0x28>  // b.none
  40dd5c:	ldr	x0, [sp, #24]
  40dd60:	ldr	x0, [x0]
  40dd64:	bl	404830 <strv_free@plt>
  40dd68:	nop
  40dd6c:	ldp	x29, x30, [sp], #32
  40dd70:	ret

000000000040dd74 <image_unrefp>:
  40dd74:	stp	x29, x30, [sp, #-32]!
  40dd78:	mov	x29, sp
  40dd7c:	str	x0, [sp, #24]
  40dd80:	ldr	x0, [sp, #24]
  40dd84:	ldr	x0, [x0]
  40dd88:	cmp	x0, #0x0
  40dd8c:	b.eq	40dd9c <image_unrefp+0x28>  // b.none
  40dd90:	ldr	x0, [sp, #24]
  40dd94:	ldr	x0, [x0]
  40dd98:	bl	404270 <image_unref@plt>
  40dd9c:	nop
  40dda0:	ldp	x29, x30, [sp], #32
  40dda4:	ret

000000000040dda8 <portable_metadata_unrefp>:
  40dda8:	stp	x29, x30, [sp, #-32]!
  40ddac:	mov	x29, sp
  40ddb0:	str	x0, [sp, #24]
  40ddb4:	ldr	x0, [sp, #24]
  40ddb8:	ldr	x0, [x0]
  40ddbc:	cmp	x0, #0x0
  40ddc0:	b.eq	40ddd0 <portable_metadata_unrefp+0x28>  // b.none
  40ddc4:	ldr	x0, [sp, #24]
  40ddc8:	ldr	x0, [x0]
  40ddcc:	bl	405af0 <portable_metadata_unref>
  40ddd0:	nop
  40ddd4:	ldp	x29, x30, [sp], #32
  40ddd8:	ret

000000000040dddc <safe_fork>:
  40dddc:	stp	x29, x30, [sp, #-48]!
  40dde0:	mov	x29, sp
  40dde4:	str	x0, [sp, #40]
  40dde8:	str	w1, [sp, #36]
  40ddec:	str	x2, [sp, #24]
  40ddf0:	ldr	x4, [sp, #24]
  40ddf4:	ldr	w3, [sp, #36]
  40ddf8:	mov	x2, #0x0                   	// #0
  40ddfc:	mov	x1, #0x0                   	// #0
  40de00:	ldr	x0, [sp, #40]
  40de04:	bl	404c20 <safe_fork_full@plt>
  40de08:	ldp	x29, x30, [sp], #48
  40de0c:	ret

000000000040de10 <property_get_type>:
  40de10:	stp	x29, x30, [sp, #-96]!
  40de14:	mov	x29, sp
  40de18:	str	x0, [sp, #72]
  40de1c:	str	x1, [sp, #64]
  40de20:	str	x2, [sp, #56]
  40de24:	str	x3, [sp, #48]
  40de28:	str	x4, [sp, #40]
  40de2c:	str	x5, [sp, #32]
  40de30:	str	x6, [sp, #24]
  40de34:	ldr	x0, [sp, #32]
  40de38:	str	x0, [sp, #88]
  40de3c:	ldr	x0, [sp, #72]
  40de40:	cmp	x0, #0x0
  40de44:	cset	w0, eq  // eq = none
  40de48:	and	w0, w0, #0xff
  40de4c:	and	x0, x0, #0xff
  40de50:	cmp	x0, #0x0
  40de54:	b.eq	40de80 <property_get_type+0x70>  // b.none
  40de58:	adrp	x0, 413000 <_fini+0x1050>
  40de5c:	add	x1, x0, #0xd13
  40de60:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40de64:	add	x4, x0, #0x780
  40de68:	mov	w3, #0x1a                  	// #26
  40de6c:	mov	x2, x1
  40de70:	adrp	x0, 413000 <_fini+0x1050>
  40de74:	add	x1, x0, #0xd38
  40de78:	mov	w0, #0x0                   	// #0
  40de7c:	bl	404670 <log_assert_failed_realm@plt>
  40de80:	ldr	x0, [sp, #40]
  40de84:	cmp	x0, #0x0
  40de88:	cset	w0, eq  // eq = none
  40de8c:	and	w0, w0, #0xff
  40de90:	and	x0, x0, #0xff
  40de94:	cmp	x0, #0x0
  40de98:	b.eq	40dec4 <property_get_type+0xb4>  // b.none
  40de9c:	adrp	x0, 413000 <_fini+0x1050>
  40dea0:	add	x1, x0, #0xd13
  40dea4:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40dea8:	add	x4, x0, #0x780
  40deac:	mov	w3, #0x1a                  	// #26
  40deb0:	mov	x2, x1
  40deb4:	adrp	x0, 413000 <_fini+0x1050>
  40deb8:	add	x1, x0, #0xd40
  40debc:	mov	w0, #0x0                   	// #0
  40dec0:	bl	404670 <log_assert_failed_realm@plt>
  40dec4:	ldr	x0, [sp, #88]
  40dec8:	cmp	x0, #0x0
  40decc:	cset	w0, eq  // eq = none
  40ded0:	and	w0, w0, #0xff
  40ded4:	and	x0, x0, #0xff
  40ded8:	cmp	x0, #0x0
  40dedc:	b.eq	40df08 <property_get_type+0xf8>  // b.none
  40dee0:	adrp	x0, 413000 <_fini+0x1050>
  40dee4:	add	x1, x0, #0xd13
  40dee8:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40deec:	add	x4, x0, #0x780
  40def0:	mov	w3, #0x1a                  	// #26
  40def4:	mov	x2, x1
  40def8:	adrp	x0, 413000 <_fini+0x1050>
  40defc:	add	x1, x0, #0xd48
  40df00:	mov	w0, #0x0                   	// #0
  40df04:	bl	404670 <log_assert_failed_realm@plt>
  40df08:	ldr	x0, [sp, #88]
  40df0c:	ldr	w0, [x0]
  40df10:	bl	404570 <image_type_to_string@plt>
  40df14:	mov	x2, x0
  40df18:	adrp	x0, 413000 <_fini+0x1050>
  40df1c:	add	x1, x0, #0xd50
  40df20:	ldr	x0, [sp, #40]
  40df24:	bl	4045b0 <sd_bus_message_append@plt>
  40df28:	ldp	x29, x30, [sp], #96
  40df2c:	ret

000000000040df30 <bus_image_common_get_os_release>:
  40df30:	stp	x29, x30, [sp, #-80]!
  40df34:	mov	x29, sp
  40df38:	str	x0, [sp, #56]
  40df3c:	str	x1, [sp, #48]
  40df40:	str	x2, [sp, #40]
  40df44:	str	x3, [sp, #32]
  40df48:	str	x4, [sp, #24]
  40df4c:	ldr	x0, [sp, #40]
  40df50:	cmp	x0, #0x0
  40df54:	cset	w0, eq  // eq = none
  40df58:	and	w0, w0, #0xff
  40df5c:	and	x0, x0, #0xff
  40df60:	cmp	x0, #0x0
  40df64:	b.eq	40dfac <bus_image_common_get_os_release+0x7c>  // b.none
  40df68:	ldr	x0, [sp, #32]
  40df6c:	cmp	x0, #0x0
  40df70:	cset	w0, eq  // eq = none
  40df74:	and	w0, w0, #0xff
  40df78:	and	x0, x0, #0xff
  40df7c:	cmp	x0, #0x0
  40df80:	b.eq	40dfac <bus_image_common_get_os_release+0x7c>  // b.none
  40df84:	adrp	x0, 413000 <_fini+0x1050>
  40df88:	add	x1, x0, #0xd13
  40df8c:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40df90:	add	x4, x0, #0x798
  40df94:	mov	w3, #0x25                  	// #37
  40df98:	mov	x2, x1
  40df9c:	adrp	x0, 413000 <_fini+0x1050>
  40dfa0:	add	x1, x0, #0xd58
  40dfa4:	mov	w0, #0x0                   	// #0
  40dfa8:	bl	404670 <log_assert_failed_realm@plt>
  40dfac:	ldr	x0, [sp, #48]
  40dfb0:	cmp	x0, #0x0
  40dfb4:	cset	w0, eq  // eq = none
  40dfb8:	and	w0, w0, #0xff
  40dfbc:	and	x0, x0, #0xff
  40dfc0:	cmp	x0, #0x0
  40dfc4:	b.eq	40dff0 <bus_image_common_get_os_release+0xc0>  // b.none
  40dfc8:	adrp	x0, 413000 <_fini+0x1050>
  40dfcc:	add	x1, x0, #0xd13
  40dfd0:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40dfd4:	add	x4, x0, #0x798
  40dfd8:	mov	w3, #0x26                  	// #38
  40dfdc:	mov	x2, x1
  40dfe0:	adrp	x0, 413000 <_fini+0x1050>
  40dfe4:	add	x1, x0, #0xd70
  40dfe8:	mov	w0, #0x0                   	// #0
  40dfec:	bl	404670 <log_assert_failed_realm@plt>
  40dff0:	ldr	x0, [sp, #56]
  40dff4:	cmp	x0, #0x0
  40dff8:	b.ne	40e04c <bus_image_common_get_os_release+0x11c>  // b.any
  40dffc:	ldr	x0, [sp, #32]
  40e000:	cmp	x0, #0x0
  40e004:	cset	w0, eq  // eq = none
  40e008:	and	w0, w0, #0xff
  40e00c:	and	x0, x0, #0xff
  40e010:	cmp	x0, #0x0
  40e014:	b.eq	40e040 <bus_image_common_get_os_release+0x110>  // b.none
  40e018:	adrp	x0, 413000 <_fini+0x1050>
  40e01c:	add	x1, x0, #0xd13
  40e020:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40e024:	add	x4, x0, #0x798
  40e028:	mov	w3, #0x29                  	// #41
  40e02c:	mov	x2, x1
  40e030:	adrp	x0, 413000 <_fini+0x1050>
  40e034:	add	x1, x0, #0xd78
  40e038:	mov	w0, #0x0                   	// #0
  40e03c:	bl	404670 <log_assert_failed_realm@plt>
  40e040:	ldr	x0, [sp, #32]
  40e044:	ldr	x0, [x0, #128]
  40e048:	str	x0, [sp, #56]
  40e04c:	ldr	x1, [sp, #32]
  40e050:	add	x0, sp, #0x20
  40e054:	ldr	x7, [sp, #24]
  40e058:	mov	x6, x0
  40e05c:	adrp	x0, 413000 <_fini+0x1050>
  40e060:	add	x5, x0, #0xd80
  40e064:	mov	w4, #0x1                   	// #1
  40e068:	mov	x3, x1
  40e06c:	ldr	x2, [sp, #40]
  40e070:	ldr	x1, [sp, #48]
  40e074:	ldr	x0, [sp, #56]
  40e078:	bl	40f8cc <bus_image_acquire>
  40e07c:	str	w0, [sp, #76]
  40e080:	ldr	w0, [sp, #76]
  40e084:	cmp	w0, #0x0
  40e088:	b.ge	40e094 <bus_image_common_get_os_release+0x164>  // b.tcont
  40e08c:	ldr	w0, [sp, #76]
  40e090:	b	40e10c <bus_image_common_get_os_release+0x1dc>
  40e094:	ldr	w0, [sp, #76]
  40e098:	cmp	w0, #0x0
  40e09c:	b.ne	40e0a8 <bus_image_common_get_os_release+0x178>  // b.any
  40e0a0:	mov	w0, #0x1                   	// #1
  40e0a4:	b	40e10c <bus_image_common_get_os_release+0x1dc>
  40e0a8:	ldr	x0, [sp, #32]
  40e0ac:	ldrb	w0, [x0, #120]
  40e0b0:	ubfx	x0, x0, #0, #1
  40e0b4:	and	w0, w0, #0xff
  40e0b8:	eor	w0, w0, #0x1
  40e0bc:	and	w0, w0, #0xff
  40e0c0:	cmp	w0, #0x0
  40e0c4:	b.eq	40e0f8 <bus_image_common_get_os_release+0x1c8>  // b.none
  40e0c8:	ldr	x0, [sp, #32]
  40e0cc:	bl	404d80 <image_read_metadata@plt>
  40e0d0:	str	w0, [sp, #76]
  40e0d4:	ldr	w0, [sp, #76]
  40e0d8:	cmp	w0, #0x0
  40e0dc:	b.ge	40e0f8 <bus_image_common_get_os_release+0x1c8>  // b.tcont
  40e0e0:	adrp	x0, 413000 <_fini+0x1050>
  40e0e4:	add	x2, x0, #0xdb0
  40e0e8:	ldr	w1, [sp, #76]
  40e0ec:	ldr	x0, [sp, #24]
  40e0f0:	bl	404440 <sd_bus_error_set_errnof@plt>
  40e0f4:	b	40e10c <bus_image_common_get_os_release+0x1dc>
  40e0f8:	ldr	x0, [sp, #32]
  40e0fc:	ldr	x0, [x0, #112]
  40e100:	mov	x1, x0
  40e104:	ldr	x0, [sp, #48]
  40e108:	bl	404c90 <bus_reply_pair_array@plt>
  40e10c:	ldp	x29, x30, [sp], #80
  40e110:	ret

000000000040e114 <bus_image_method_get_os_release>:
  40e114:	stp	x29, x30, [sp, #-48]!
  40e118:	mov	x29, sp
  40e11c:	str	x0, [sp, #40]
  40e120:	str	x1, [sp, #32]
  40e124:	str	x2, [sp, #24]
  40e128:	ldr	x4, [sp, #24]
  40e12c:	ldr	x3, [sp, #32]
  40e130:	mov	x2, #0x0                   	// #0
  40e134:	ldr	x1, [sp, #40]
  40e138:	mov	x0, #0x0                   	// #0
  40e13c:	bl	40df30 <bus_image_common_get_os_release>
  40e140:	ldp	x29, x30, [sp], #48
  40e144:	ret

000000000040e148 <append_fd>:
  40e148:	stp	x29, x30, [sp, #-96]!
  40e14c:	mov	x29, sp
  40e150:	str	x19, [sp, #16]
  40e154:	str	x0, [sp, #40]
  40e158:	str	x1, [sp, #32]
  40e15c:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40e160:	add	x0, x0, #0x728
  40e164:	ldr	x1, [x0]
  40e168:	str	x1, [sp, #88]
  40e16c:	mov	x1, #0x0                   	// #0
  40e170:	str	xzr, [sp, #64]
  40e174:	str	xzr, [sp, #72]
  40e178:	ldr	x0, [sp, #40]
  40e17c:	cmp	x0, #0x0
  40e180:	cset	w0, eq  // eq = none
  40e184:	and	w0, w0, #0xff
  40e188:	and	x0, x0, #0xff
  40e18c:	cmp	x0, #0x0
  40e190:	b.eq	40e1bc <append_fd+0x74>  // b.none
  40e194:	adrp	x0, 413000 <_fini+0x1050>
  40e198:	add	x1, x0, #0xd13
  40e19c:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40e1a0:	add	x4, x0, #0x7b8
  40e1a4:	mov	w3, #0x4d                  	// #77
  40e1a8:	mov	x2, x1
  40e1ac:	adrp	x0, 413000 <_fini+0x1050>
  40e1b0:	add	x1, x0, #0xdd8
  40e1b4:	mov	w0, #0x0                   	// #0
  40e1b8:	bl	404670 <log_assert_failed_realm@plt>
  40e1bc:	ldr	x0, [sp, #32]
  40e1c0:	cmp	x0, #0x0
  40e1c4:	cset	w0, eq  // eq = none
  40e1c8:	and	w0, w0, #0xff
  40e1cc:	and	x0, x0, #0xff
  40e1d0:	cmp	x0, #0x0
  40e1d4:	b.eq	40e200 <append_fd+0xb8>  // b.none
  40e1d8:	adrp	x0, 413000 <_fini+0x1050>
  40e1dc:	add	x1, x0, #0xd13
  40e1e0:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40e1e4:	add	x4, x0, #0x7b8
  40e1e8:	mov	w3, #0x4e                  	// #78
  40e1ec:	mov	x2, x1
  40e1f0:	adrp	x0, 413000 <_fini+0x1050>
  40e1f4:	add	x1, x0, #0xde0
  40e1f8:	mov	w0, #0x0                   	// #0
  40e1fc:	bl	404670 <log_assert_failed_realm@plt>
  40e200:	ldr	x0, [sp, #32]
  40e204:	ldr	w0, [x0]
  40e208:	lsr	w0, w0, #31
  40e20c:	and	w0, w0, #0xff
  40e210:	and	x0, x0, #0xff
  40e214:	cmp	x0, #0x0
  40e218:	b.eq	40e244 <append_fd+0xfc>  // b.none
  40e21c:	adrp	x0, 413000 <_fini+0x1050>
  40e220:	add	x1, x0, #0xd13
  40e224:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40e228:	add	x4, x0, #0x7b8
  40e22c:	mov	w3, #0x4f                  	// #79
  40e230:	mov	x2, x1
  40e234:	adrp	x0, 413000 <_fini+0x1050>
  40e238:	add	x1, x0, #0xde8
  40e23c:	mov	w0, #0x0                   	// #0
  40e240:	bl	404670 <log_assert_failed_realm@plt>
  40e244:	ldr	x0, [sp, #32]
  40e248:	ldr	w2, [x0]
  40e24c:	adrp	x0, 413000 <_fini+0x1050>
  40e250:	add	x1, x0, #0xdf8
  40e254:	mov	w0, w2
  40e258:	bl	4043c0 <fdopen@plt>
  40e25c:	str	x0, [sp, #64]
  40e260:	ldr	x0, [sp, #64]
  40e264:	cmp	x0, #0x0
  40e268:	b.ne	40e27c <append_fd+0x134>  // b.any
  40e26c:	bl	404820 <__errno_location@plt>
  40e270:	ldr	w0, [x0]
  40e274:	neg	w19, w0
  40e278:	b	40e2d0 <append_fd+0x188>
  40e27c:	ldr	x0, [sp, #32]
  40e280:	mov	w1, #0xffffffff            	// #-1
  40e284:	str	w1, [x0]
  40e288:	ldr	x0, [sp, #64]
  40e28c:	add	x2, sp, #0x50
  40e290:	add	x1, sp, #0x48
  40e294:	bl	40dcb8 <read_full_stream>
  40e298:	str	w0, [sp, #60]
  40e29c:	ldr	w0, [sp, #60]
  40e2a0:	cmp	w0, #0x0
  40e2a4:	b.ge	40e2b0 <append_fd+0x168>  // b.tcont
  40e2a8:	ldr	w19, [sp, #60]
  40e2ac:	b	40e2d0 <append_fd+0x188>
  40e2b0:	ldr	x0, [sp, #72]
  40e2b4:	ldr	x1, [sp, #80]
  40e2b8:	mov	x3, x1
  40e2bc:	mov	x2, x0
  40e2c0:	mov	w1, #0x79                  	// #121
  40e2c4:	ldr	x0, [sp, #40]
  40e2c8:	bl	404500 <sd_bus_message_append_array@plt>
  40e2cc:	mov	w19, w0
  40e2d0:	add	x0, sp, #0x48
  40e2d4:	bl	40db30 <freep>
  40e2d8:	add	x0, sp, #0x40
  40e2dc:	bl	40dc94 <fclosep>
  40e2e0:	mov	w1, w19
  40e2e4:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40e2e8:	add	x0, x0, #0x728
  40e2ec:	ldr	x2, [sp, #88]
  40e2f0:	ldr	x0, [x0]
  40e2f4:	eor	x0, x2, x0
  40e2f8:	cmp	x0, #0x0
  40e2fc:	b.eq	40e304 <append_fd+0x1bc>  // b.none
  40e300:	bl	404930 <__stack_chk_fail@plt>
  40e304:	mov	w0, w1
  40e308:	ldr	x19, [sp, #16]
  40e30c:	ldp	x29, x30, [sp], #96
  40e310:	ret

000000000040e314 <bus_image_common_get_metadata>:
  40e314:	stp	x29, x30, [sp, #-144]!
  40e318:	mov	x29, sp
  40e31c:	str	x19, [sp, #16]
  40e320:	str	x0, [sp, #72]
  40e324:	str	x1, [sp, #64]
  40e328:	str	x2, [sp, #56]
  40e32c:	str	x3, [sp, #48]
  40e330:	str	x4, [sp, #40]
  40e334:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40e338:	add	x0, x0, #0x728
  40e33c:	ldr	x1, [x0]
  40e340:	str	x1, [sp, #136]
  40e344:	mov	x1, #0x0                   	// #0
  40e348:	str	xzr, [sp, #88]
  40e34c:	str	xzr, [sp, #96]
  40e350:	str	xzr, [sp, #104]
  40e354:	str	xzr, [sp, #112]
  40e358:	str	xzr, [sp, #120]
  40e35c:	ldr	x0, [sp, #56]
  40e360:	cmp	x0, #0x0
  40e364:	cset	w0, eq  // eq = none
  40e368:	and	w0, w0, #0xff
  40e36c:	and	x0, x0, #0xff
  40e370:	cmp	x0, #0x0
  40e374:	b.eq	40e3bc <bus_image_common_get_metadata+0xa8>  // b.none
  40e378:	ldr	x0, [sp, #48]
  40e37c:	cmp	x0, #0x0
  40e380:	cset	w0, eq  // eq = none
  40e384:	and	w0, w0, #0xff
  40e388:	and	x0, x0, #0xff
  40e38c:	cmp	x0, #0x0
  40e390:	b.eq	40e3bc <bus_image_common_get_metadata+0xa8>  // b.none
  40e394:	adrp	x0, 413000 <_fini+0x1050>
  40e398:	add	x1, x0, #0xd13
  40e39c:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40e3a0:	add	x4, x0, #0x7c8
  40e3a4:	mov	w3, #0x6d                  	// #109
  40e3a8:	mov	x2, x1
  40e3ac:	adrp	x0, 413000 <_fini+0x1050>
  40e3b0:	add	x1, x0, #0xd58
  40e3b4:	mov	w0, #0x0                   	// #0
  40e3b8:	bl	404670 <log_assert_failed_realm@plt>
  40e3bc:	ldr	x0, [sp, #64]
  40e3c0:	cmp	x0, #0x0
  40e3c4:	cset	w0, eq  // eq = none
  40e3c8:	and	w0, w0, #0xff
  40e3cc:	and	x0, x0, #0xff
  40e3d0:	cmp	x0, #0x0
  40e3d4:	b.eq	40e400 <bus_image_common_get_metadata+0xec>  // b.none
  40e3d8:	adrp	x0, 413000 <_fini+0x1050>
  40e3dc:	add	x1, x0, #0xd13
  40e3e0:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40e3e4:	add	x4, x0, #0x7c8
  40e3e8:	mov	w3, #0x6e                  	// #110
  40e3ec:	mov	x2, x1
  40e3f0:	adrp	x0, 413000 <_fini+0x1050>
  40e3f4:	add	x1, x0, #0xd70
  40e3f8:	mov	w0, #0x0                   	// #0
  40e3fc:	bl	404670 <log_assert_failed_realm@plt>
  40e400:	ldr	x0, [sp, #72]
  40e404:	cmp	x0, #0x0
  40e408:	b.ne	40e45c <bus_image_common_get_metadata+0x148>  // b.any
  40e40c:	ldr	x0, [sp, #48]
  40e410:	cmp	x0, #0x0
  40e414:	cset	w0, eq  // eq = none
  40e418:	and	w0, w0, #0xff
  40e41c:	and	x0, x0, #0xff
  40e420:	cmp	x0, #0x0
  40e424:	b.eq	40e450 <bus_image_common_get_metadata+0x13c>  // b.none
  40e428:	adrp	x0, 413000 <_fini+0x1050>
  40e42c:	add	x1, x0, #0xd13
  40e430:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40e434:	add	x4, x0, #0x7c8
  40e438:	mov	w3, #0x71                  	// #113
  40e43c:	mov	x2, x1
  40e440:	adrp	x0, 413000 <_fini+0x1050>
  40e444:	add	x1, x0, #0xd78
  40e448:	mov	w0, #0x0                   	// #0
  40e44c:	bl	404670 <log_assert_failed_realm@plt>
  40e450:	ldr	x0, [sp, #48]
  40e454:	ldr	x0, [x0, #128]
  40e458:	str	x0, [sp, #72]
  40e45c:	add	x0, sp, #0x78
  40e460:	mov	x1, x0
  40e464:	ldr	x0, [sp, #64]
  40e468:	bl	404290 <sd_bus_message_read_strv@plt>
  40e46c:	str	w0, [sp, #84]
  40e470:	ldr	w0, [sp, #84]
  40e474:	cmp	w0, #0x0
  40e478:	b.ge	40e484 <bus_image_common_get_metadata+0x170>  // b.tcont
  40e47c:	ldr	w19, [sp, #84]
  40e480:	b	40e724 <bus_image_common_get_metadata+0x410>
  40e484:	ldr	x1, [sp, #48]
  40e488:	add	x0, sp, #0x30
  40e48c:	ldr	x7, [sp, #40]
  40e490:	mov	x6, x0
  40e494:	adrp	x0, 413000 <_fini+0x1050>
  40e498:	add	x5, x0, #0xd80
  40e49c:	mov	w4, #0x1                   	// #1
  40e4a0:	mov	x3, x1
  40e4a4:	ldr	x2, [sp, #56]
  40e4a8:	ldr	x1, [sp, #64]
  40e4ac:	ldr	x0, [sp, #72]
  40e4b0:	bl	40f8cc <bus_image_acquire>
  40e4b4:	str	w0, [sp, #84]
  40e4b8:	ldr	w0, [sp, #84]
  40e4bc:	cmp	w0, #0x0
  40e4c0:	b.ge	40e4cc <bus_image_common_get_metadata+0x1b8>  // b.tcont
  40e4c4:	ldr	w19, [sp, #84]
  40e4c8:	b	40e724 <bus_image_common_get_metadata+0x410>
  40e4cc:	ldr	w0, [sp, #84]
  40e4d0:	cmp	w0, #0x0
  40e4d4:	b.ne	40e4e0 <bus_image_common_get_metadata+0x1cc>  // b.any
  40e4d8:	mov	w19, #0x1                   	// #1
  40e4dc:	b	40e724 <bus_image_common_get_metadata+0x410>
  40e4e0:	ldr	x0, [sp, #48]
  40e4e4:	ldr	x0, [x0, #16]
  40e4e8:	ldr	x1, [sp, #120]
  40e4ec:	add	x3, sp, #0x60
  40e4f0:	add	x2, sp, #0x58
  40e4f4:	ldr	x4, [sp, #40]
  40e4f8:	bl	407840 <portable_extract>
  40e4fc:	str	w0, [sp, #84]
  40e500:	ldr	w0, [sp, #84]
  40e504:	cmp	w0, #0x0
  40e508:	b.ge	40e514 <bus_image_common_get_metadata+0x200>  // b.tcont
  40e50c:	ldr	w19, [sp, #84]
  40e510:	b	40e724 <bus_image_common_get_metadata+0x410>
  40e514:	ldr	x0, [sp, #96]
  40e518:	add	x1, sp, #0x70
  40e51c:	bl	405b74 <portable_metadata_hashmap_to_sorted_array>
  40e520:	str	w0, [sp, #84]
  40e524:	ldr	w0, [sp, #84]
  40e528:	cmp	w0, #0x0
  40e52c:	b.ge	40e538 <bus_image_common_get_metadata+0x224>  // b.tcont
  40e530:	ldr	w19, [sp, #84]
  40e534:	b	40e724 <bus_image_common_get_metadata+0x410>
  40e538:	add	x0, sp, #0x68
  40e53c:	mov	x1, x0
  40e540:	ldr	x0, [sp, #64]
  40e544:	bl	4044b0 <sd_bus_message_new_method_return@plt>
  40e548:	str	w0, [sp, #84]
  40e54c:	ldr	w0, [sp, #84]
  40e550:	cmp	w0, #0x0
  40e554:	b.ge	40e560 <bus_image_common_get_metadata+0x24c>  // b.tcont
  40e558:	ldr	w19, [sp, #84]
  40e55c:	b	40e724 <bus_image_common_get_metadata+0x410>
  40e560:	ldr	x3, [sp, #104]
  40e564:	ldr	x0, [sp, #48]
  40e568:	ldr	x0, [x0, #16]
  40e56c:	mov	x2, x0
  40e570:	adrp	x0, 413000 <_fini+0x1050>
  40e574:	add	x1, x0, #0xd50
  40e578:	mov	x0, x3
  40e57c:	bl	4045b0 <sd_bus_message_append@plt>
  40e580:	str	w0, [sp, #84]
  40e584:	ldr	w0, [sp, #84]
  40e588:	cmp	w0, #0x0
  40e58c:	b.ge	40e598 <bus_image_common_get_metadata+0x284>  // b.tcont
  40e590:	ldr	w19, [sp, #84]
  40e594:	b	40e724 <bus_image_common_get_metadata+0x410>
  40e598:	ldr	x0, [sp, #104]
  40e59c:	ldr	x1, [sp, #88]
  40e5a0:	bl	40e148 <append_fd>
  40e5a4:	str	w0, [sp, #84]
  40e5a8:	ldr	w0, [sp, #84]
  40e5ac:	cmp	w0, #0x0
  40e5b0:	b.ge	40e5bc <bus_image_common_get_metadata+0x2a8>  // b.tcont
  40e5b4:	ldr	w19, [sp, #84]
  40e5b8:	b	40e724 <bus_image_common_get_metadata+0x410>
  40e5bc:	ldr	x3, [sp, #104]
  40e5c0:	adrp	x0, 413000 <_fini+0x1050>
  40e5c4:	add	x2, x0, #0xe00
  40e5c8:	mov	w1, #0x61                  	// #97
  40e5cc:	mov	x0, x3
  40e5d0:	bl	4044e0 <sd_bus_message_open_container@plt>
  40e5d4:	str	w0, [sp, #84]
  40e5d8:	ldr	w0, [sp, #84]
  40e5dc:	cmp	w0, #0x0
  40e5e0:	b.ge	40e5ec <bus_image_common_get_metadata+0x2d8>  // b.tcont
  40e5e4:	ldr	w19, [sp, #84]
  40e5e8:	b	40e724 <bus_image_common_get_metadata+0x410>
  40e5ec:	str	xzr, [sp, #128]
  40e5f0:	b	40e6d4 <bus_image_common_get_metadata+0x3c0>
  40e5f4:	ldr	x3, [sp, #104]
  40e5f8:	adrp	x0, 413000 <_fini+0x1050>
  40e5fc:	add	x2, x0, #0xe08
  40e600:	mov	w1, #0x65                  	// #101
  40e604:	mov	x0, x3
  40e608:	bl	4044e0 <sd_bus_message_open_container@plt>
  40e60c:	str	w0, [sp, #84]
  40e610:	ldr	w0, [sp, #84]
  40e614:	cmp	w0, #0x0
  40e618:	b.ge	40e624 <bus_image_common_get_metadata+0x310>  // b.tcont
  40e61c:	ldr	w19, [sp, #84]
  40e620:	b	40e724 <bus_image_common_get_metadata+0x410>
  40e624:	ldr	x3, [sp, #104]
  40e628:	ldr	x1, [sp, #112]
  40e62c:	ldr	x0, [sp, #128]
  40e630:	lsl	x0, x0, #3
  40e634:	add	x0, x1, x0
  40e638:	ldr	x0, [x0]
  40e63c:	add	x0, x0, #0x10
  40e640:	mov	x2, x0
  40e644:	adrp	x0, 413000 <_fini+0x1050>
  40e648:	add	x1, x0, #0xd50
  40e64c:	mov	x0, x3
  40e650:	bl	4045b0 <sd_bus_message_append@plt>
  40e654:	str	w0, [sp, #84]
  40e658:	ldr	w0, [sp, #84]
  40e65c:	cmp	w0, #0x0
  40e660:	b.ge	40e66c <bus_image_common_get_metadata+0x358>  // b.tcont
  40e664:	ldr	w19, [sp, #84]
  40e668:	b	40e724 <bus_image_common_get_metadata+0x410>
  40e66c:	ldr	x2, [sp, #104]
  40e670:	ldr	x1, [sp, #112]
  40e674:	ldr	x0, [sp, #128]
  40e678:	lsl	x0, x0, #3
  40e67c:	add	x0, x1, x0
  40e680:	ldr	x0, [x0]
  40e684:	mov	x1, x0
  40e688:	mov	x0, x2
  40e68c:	bl	40e148 <append_fd>
  40e690:	str	w0, [sp, #84]
  40e694:	ldr	w0, [sp, #84]
  40e698:	cmp	w0, #0x0
  40e69c:	b.ge	40e6a8 <bus_image_common_get_metadata+0x394>  // b.tcont
  40e6a0:	ldr	w19, [sp, #84]
  40e6a4:	b	40e724 <bus_image_common_get_metadata+0x410>
  40e6a8:	ldr	x0, [sp, #104]
  40e6ac:	bl	404e60 <sd_bus_message_close_container@plt>
  40e6b0:	str	w0, [sp, #84]
  40e6b4:	ldr	w0, [sp, #84]
  40e6b8:	cmp	w0, #0x0
  40e6bc:	b.ge	40e6c8 <bus_image_common_get_metadata+0x3b4>  // b.tcont
  40e6c0:	ldr	w19, [sp, #84]
  40e6c4:	b	40e724 <bus_image_common_get_metadata+0x410>
  40e6c8:	ldr	x0, [sp, #128]
  40e6cc:	add	x0, x0, #0x1
  40e6d0:	str	x0, [sp, #128]
  40e6d4:	ldr	x0, [sp, #96]
  40e6d8:	bl	40dbec <hashmap_size>
  40e6dc:	mov	w0, w0
  40e6e0:	ldr	x1, [sp, #128]
  40e6e4:	cmp	x1, x0
  40e6e8:	b.cc	40e5f4 <bus_image_common_get_metadata+0x2e0>  // b.lo, b.ul, b.last
  40e6ec:	ldr	x0, [sp, #104]
  40e6f0:	bl	404e60 <sd_bus_message_close_container@plt>
  40e6f4:	str	w0, [sp, #84]
  40e6f8:	ldr	w0, [sp, #84]
  40e6fc:	cmp	w0, #0x0
  40e700:	b.ge	40e70c <bus_image_common_get_metadata+0x3f8>  // b.tcont
  40e704:	ldr	w19, [sp, #84]
  40e708:	b	40e724 <bus_image_common_get_metadata+0x410>
  40e70c:	ldr	x0, [sp, #104]
  40e710:	mov	x2, #0x0                   	// #0
  40e714:	mov	x1, x0
  40e718:	mov	x0, #0x0                   	// #0
  40e71c:	bl	404940 <sd_bus_send@plt>
  40e720:	mov	w19, w0
  40e724:	add	x0, sp, #0x78
  40e728:	bl	40dd40 <strv_freep>
  40e72c:	add	x0, sp, #0x70
  40e730:	bl	40db30 <freep>
  40e734:	add	x0, sp, #0x68
  40e738:	bl	40db54 <sd_bus_message_unrefp>
  40e73c:	add	x0, sp, #0x60
  40e740:	bl	40dc40 <hashmap_freep>
  40e744:	add	x0, sp, #0x58
  40e748:	bl	40dda8 <portable_metadata_unrefp>
  40e74c:	mov	w1, w19
  40e750:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40e754:	add	x0, x0, #0x728
  40e758:	ldr	x2, [sp, #136]
  40e75c:	ldr	x0, [x0]
  40e760:	eor	x0, x2, x0
  40e764:	cmp	x0, #0x0
  40e768:	b.eq	40e770 <bus_image_common_get_metadata+0x45c>  // b.none
  40e76c:	bl	404930 <__stack_chk_fail@plt>
  40e770:	mov	w0, w1
  40e774:	ldr	x19, [sp, #16]
  40e778:	ldp	x29, x30, [sp], #144
  40e77c:	ret

000000000040e780 <bus_image_method_get_metadata>:
  40e780:	stp	x29, x30, [sp, #-48]!
  40e784:	mov	x29, sp
  40e788:	str	x0, [sp, #40]
  40e78c:	str	x1, [sp, #32]
  40e790:	str	x2, [sp, #24]
  40e794:	ldr	x4, [sp, #24]
  40e798:	ldr	x3, [sp, #32]
  40e79c:	mov	x2, #0x0                   	// #0
  40e7a0:	ldr	x1, [sp, #40]
  40e7a4:	mov	x0, #0x0                   	// #0
  40e7a8:	bl	40e314 <bus_image_common_get_metadata>
  40e7ac:	ldp	x29, x30, [sp], #48
  40e7b0:	ret

000000000040e7b4 <bus_image_method_get_state>:
  40e7b4:	stp	x29, x30, [sp, #-80]!
  40e7b8:	mov	x29, sp
  40e7bc:	str	x0, [sp, #40]
  40e7c0:	str	x1, [sp, #32]
  40e7c4:	str	x2, [sp, #24]
  40e7c8:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40e7cc:	add	x0, x0, #0x728
  40e7d0:	ldr	x1, [x0]
  40e7d4:	str	x1, [sp, #72]
  40e7d8:	mov	x1, #0x0                   	// #0
  40e7dc:	ldr	x0, [sp, #32]
  40e7e0:	str	x0, [sp, #64]
  40e7e4:	ldr	x0, [sp, #40]
  40e7e8:	cmp	x0, #0x0
  40e7ec:	cset	w0, eq  // eq = none
  40e7f0:	and	w0, w0, #0xff
  40e7f4:	and	x0, x0, #0xff
  40e7f8:	cmp	x0, #0x0
  40e7fc:	b.eq	40e828 <bus_image_method_get_state+0x74>  // b.none
  40e800:	adrp	x0, 413000 <_fini+0x1050>
  40e804:	add	x1, x0, #0xd13
  40e808:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40e80c:	add	x4, x0, #0x7e8
  40e810:	mov	w3, #0xca                  	// #202
  40e814:	mov	x2, x1
  40e818:	adrp	x0, 413000 <_fini+0x1050>
  40e81c:	add	x1, x0, #0xd70
  40e820:	mov	w0, #0x0                   	// #0
  40e824:	bl	404670 <log_assert_failed_realm@plt>
  40e828:	ldr	x0, [sp, #64]
  40e82c:	cmp	x0, #0x0
  40e830:	cset	w0, eq  // eq = none
  40e834:	and	w0, w0, #0xff
  40e838:	and	x0, x0, #0xff
  40e83c:	cmp	x0, #0x0
  40e840:	b.eq	40e86c <bus_image_method_get_state+0xb8>  // b.none
  40e844:	adrp	x0, 413000 <_fini+0x1050>
  40e848:	add	x1, x0, #0xd13
  40e84c:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40e850:	add	x4, x0, #0x7e8
  40e854:	mov	w3, #0xcb                  	// #203
  40e858:	mov	x2, x1
  40e85c:	adrp	x0, 413000 <_fini+0x1050>
  40e860:	add	x1, x0, #0xd78
  40e864:	mov	w0, #0x0                   	// #0
  40e868:	bl	404670 <log_assert_failed_realm@plt>
  40e86c:	ldr	x0, [sp, #40]
  40e870:	bl	404610 <sd_bus_message_get_bus@plt>
  40e874:	mov	x5, x0
  40e878:	ldr	x0, [sp, #64]
  40e87c:	ldr	x0, [x0, #16]
  40e880:	add	x1, sp, #0x38
  40e884:	ldr	x4, [sp, #24]
  40e888:	mov	x3, x1
  40e88c:	mov	w2, #0x0                   	// #0
  40e890:	mov	x1, x0
  40e894:	mov	x0, x5
  40e898:	bl	40c22c <portable_get_state>
  40e89c:	str	w0, [sp, #60]
  40e8a0:	ldr	w0, [sp, #60]
  40e8a4:	cmp	w0, #0x0
  40e8a8:	b.ge	40e8b4 <bus_image_method_get_state+0x100>  // b.tcont
  40e8ac:	ldr	w0, [sp, #60]
  40e8b0:	b	40e8d0 <bus_image_method_get_state+0x11c>
  40e8b4:	ldr	w0, [sp, #56]
  40e8b8:	bl	40c45c <portable_state_to_string>
  40e8bc:	mov	x2, x0
  40e8c0:	adrp	x0, 413000 <_fini+0x1050>
  40e8c4:	add	x1, x0, #0xd50
  40e8c8:	ldr	x0, [sp, #40]
  40e8cc:	bl	404340 <sd_bus_reply_method_return@plt>
  40e8d0:	mov	w1, w0
  40e8d4:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40e8d8:	add	x0, x0, #0x728
  40e8dc:	ldr	x2, [sp, #72]
  40e8e0:	ldr	x0, [x0]
  40e8e4:	eor	x0, x2, x0
  40e8e8:	cmp	x0, #0x0
  40e8ec:	b.eq	40e8f4 <bus_image_method_get_state+0x140>  // b.none
  40e8f0:	bl	404930 <__stack_chk_fail@plt>
  40e8f4:	mov	w0, w1
  40e8f8:	ldp	x29, x30, [sp], #80
  40e8fc:	ret

000000000040e900 <bus_image_common_attach>:
  40e900:	stp	x29, x30, [sp, #-144]!
  40e904:	mov	x29, sp
  40e908:	str	x19, [sp, #16]
  40e90c:	str	x0, [sp, #72]
  40e910:	str	x1, [sp, #64]
  40e914:	str	x2, [sp, #56]
  40e918:	str	x3, [sp, #48]
  40e91c:	str	x4, [sp, #40]
  40e920:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40e924:	add	x0, x0, #0x728
  40e928:	ldr	x1, [x0]
  40e92c:	str	x1, [sp, #136]
  40e930:	mov	x1, #0x0                   	// #0
  40e934:	str	xzr, [sp, #96]
  40e938:	str	xzr, [sp, #104]
  40e93c:	str	wzr, [sp, #88]
  40e940:	str	xzr, [sp, #128]
  40e944:	ldr	x0, [sp, #64]
  40e948:	cmp	x0, #0x0
  40e94c:	cset	w0, eq  // eq = none
  40e950:	and	w0, w0, #0xff
  40e954:	and	x0, x0, #0xff
  40e958:	cmp	x0, #0x0
  40e95c:	b.eq	40e988 <bus_image_common_attach+0x88>  // b.none
  40e960:	adrp	x0, 413000 <_fini+0x1050>
  40e964:	add	x1, x0, #0xd13
  40e968:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40e96c:	add	x4, x0, #0x808
  40e970:	mov	w3, #0xe7                  	// #231
  40e974:	mov	x2, x1
  40e978:	adrp	x0, 413000 <_fini+0x1050>
  40e97c:	add	x1, x0, #0xd70
  40e980:	mov	w0, #0x0                   	// #0
  40e984:	bl	404670 <log_assert_failed_realm@plt>
  40e988:	ldr	x0, [sp, #56]
  40e98c:	cmp	x0, #0x0
  40e990:	cset	w0, eq  // eq = none
  40e994:	and	w0, w0, #0xff
  40e998:	and	x0, x0, #0xff
  40e99c:	cmp	x0, #0x0
  40e9a0:	b.eq	40e9e8 <bus_image_common_attach+0xe8>  // b.none
  40e9a4:	ldr	x0, [sp, #48]
  40e9a8:	cmp	x0, #0x0
  40e9ac:	cset	w0, eq  // eq = none
  40e9b0:	and	w0, w0, #0xff
  40e9b4:	and	x0, x0, #0xff
  40e9b8:	cmp	x0, #0x0
  40e9bc:	b.eq	40e9e8 <bus_image_common_attach+0xe8>  // b.none
  40e9c0:	adrp	x0, 413000 <_fini+0x1050>
  40e9c4:	add	x1, x0, #0xd13
  40e9c8:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40e9cc:	add	x4, x0, #0x808
  40e9d0:	mov	w3, #0xe8                  	// #232
  40e9d4:	mov	x2, x1
  40e9d8:	adrp	x0, 413000 <_fini+0x1050>
  40e9dc:	add	x1, x0, #0xd58
  40e9e0:	mov	w0, #0x0                   	// #0
  40e9e4:	bl	404670 <log_assert_failed_realm@plt>
  40e9e8:	ldr	x0, [sp, #72]
  40e9ec:	cmp	x0, #0x0
  40e9f0:	b.ne	40ea44 <bus_image_common_attach+0x144>  // b.any
  40e9f4:	ldr	x0, [sp, #48]
  40e9f8:	cmp	x0, #0x0
  40e9fc:	cset	w0, eq  // eq = none
  40ea00:	and	w0, w0, #0xff
  40ea04:	and	x0, x0, #0xff
  40ea08:	cmp	x0, #0x0
  40ea0c:	b.eq	40ea38 <bus_image_common_attach+0x138>  // b.none
  40ea10:	adrp	x0, 413000 <_fini+0x1050>
  40ea14:	add	x1, x0, #0xd13
  40ea18:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40ea1c:	add	x4, x0, #0x808
  40ea20:	mov	w3, #0xeb                  	// #235
  40ea24:	mov	x2, x1
  40ea28:	adrp	x0, 413000 <_fini+0x1050>
  40ea2c:	add	x1, x0, #0xd78
  40ea30:	mov	w0, #0x0                   	// #0
  40ea34:	bl	404670 <log_assert_failed_realm@plt>
  40ea38:	ldr	x0, [sp, #48]
  40ea3c:	ldr	x0, [x0, #128]
  40ea40:	str	x0, [sp, #72]
  40ea44:	add	x0, sp, #0x60
  40ea48:	mov	x1, x0
  40ea4c:	ldr	x0, [sp, #64]
  40ea50:	bl	404290 <sd_bus_message_read_strv@plt>
  40ea54:	str	w0, [sp, #92]
  40ea58:	ldr	w0, [sp, #92]
  40ea5c:	cmp	w0, #0x0
  40ea60:	b.ge	40ea6c <bus_image_common_attach+0x16c>  // b.tcont
  40ea64:	ldr	w19, [sp, #92]
  40ea68:	b	40ec48 <bus_image_common_attach+0x348>
  40ea6c:	add	x2, sp, #0x78
  40ea70:	add	x1, sp, #0x54
  40ea74:	add	x0, sp, #0x70
  40ea78:	mov	x4, x2
  40ea7c:	mov	x3, x1
  40ea80:	mov	x2, x0
  40ea84:	adrp	x0, 413000 <_fini+0x1050>
  40ea88:	add	x1, x0, #0xe10
  40ea8c:	ldr	x0, [sp, #64]
  40ea90:	bl	404680 <sd_bus_message_read@plt>
  40ea94:	str	w0, [sp, #92]
  40ea98:	ldr	w0, [sp, #92]
  40ea9c:	cmp	w0, #0x0
  40eaa0:	b.ge	40eaac <bus_image_common_attach+0x1ac>  // b.tcont
  40eaa4:	ldr	w19, [sp, #92]
  40eaa8:	b	40ec48 <bus_image_common_attach+0x348>
  40eaac:	ldr	x2, [sp, #120]
  40eab0:	adrp	x0, 413000 <_fini+0x1050>
  40eab4:	add	x1, x0, #0xe18
  40eab8:	mov	x0, x2
  40eabc:	bl	404b90 <strcmp@plt>
  40eac0:	cmp	w0, #0x0
  40eac4:	b.ne	40ead8 <bus_image_common_attach+0x1d8>  // b.any
  40eac8:	ldr	w0, [sp, #88]
  40eacc:	orr	w0, w0, #0x2
  40ead0:	str	w0, [sp, #88]
  40ead4:	b	40eb48 <bus_image_common_attach+0x248>
  40ead8:	ldr	x2, [sp, #120]
  40eadc:	adrp	x0, 413000 <_fini+0x1050>
  40eae0:	add	x1, x0, #0xe20
  40eae4:	mov	x0, x2
  40eae8:	bl	404b90 <strcmp@plt>
  40eaec:	cmp	w0, #0x0
  40eaf0:	b.ne	40eb04 <bus_image_common_attach+0x204>  // b.any
  40eaf4:	ldr	w0, [sp, #88]
  40eaf8:	orr	w0, w0, #0x1
  40eafc:	str	w0, [sp, #88]
  40eb00:	b	40eb48 <bus_image_common_attach+0x248>
  40eb04:	ldr	x0, [sp, #120]
  40eb08:	bl	40db88 <isempty>
  40eb0c:	and	w0, w0, #0xff
  40eb10:	eor	w0, w0, #0x1
  40eb14:	and	w0, w0, #0xff
  40eb18:	cmp	w0, #0x0
  40eb1c:	b.eq	40eb48 <bus_image_common_attach+0x248>  // b.none
  40eb20:	ldr	x0, [sp, #120]
  40eb24:	mov	x3, x0
  40eb28:	adrp	x0, 413000 <_fini+0x1050>
  40eb2c:	add	x2, x0, #0xe28
  40eb30:	adrp	x0, 413000 <_fini+0x1050>
  40eb34:	add	x1, x0, #0xe40
  40eb38:	ldr	x0, [sp, #64]
  40eb3c:	bl	404640 <sd_bus_reply_method_errorf@plt>
  40eb40:	mov	w19, w0
  40eb44:	b	40ec48 <bus_image_common_attach+0x348>
  40eb48:	ldr	w0, [sp, #84]
  40eb4c:	cmp	w0, #0x0
  40eb50:	b.eq	40eb60 <bus_image_common_attach+0x260>  // b.none
  40eb54:	ldr	w0, [sp, #88]
  40eb58:	orr	w0, w0, #0x4
  40eb5c:	str	w0, [sp, #88]
  40eb60:	ldr	x1, [sp, #48]
  40eb64:	add	x0, sp, #0x30
  40eb68:	ldr	x7, [sp, #40]
  40eb6c:	mov	x6, x0
  40eb70:	adrp	x0, 413000 <_fini+0x1050>
  40eb74:	add	x5, x0, #0xe68
  40eb78:	mov	w4, #0x2                   	// #2
  40eb7c:	mov	x3, x1
  40eb80:	ldr	x2, [sp, #56]
  40eb84:	ldr	x1, [sp, #64]
  40eb88:	ldr	x0, [sp, #72]
  40eb8c:	bl	40f8cc <bus_image_acquire>
  40eb90:	str	w0, [sp, #92]
  40eb94:	ldr	w0, [sp, #92]
  40eb98:	cmp	w0, #0x0
  40eb9c:	b.ge	40eba8 <bus_image_common_attach+0x2a8>  // b.tcont
  40eba0:	ldr	w19, [sp, #92]
  40eba4:	b	40ec48 <bus_image_common_attach+0x348>
  40eba8:	ldr	w0, [sp, #92]
  40ebac:	cmp	w0, #0x0
  40ebb0:	b.ne	40ebbc <bus_image_common_attach+0x2bc>  // b.any
  40ebb4:	mov	w19, #0x1                   	// #1
  40ebb8:	b	40ec48 <bus_image_common_attach+0x348>
  40ebbc:	ldr	x0, [sp, #64]
  40ebc0:	bl	404610 <sd_bus_message_get_bus@plt>
  40ebc4:	mov	x8, x0
  40ebc8:	ldr	x0, [sp, #48]
  40ebcc:	ldr	x0, [x0, #16]
  40ebd0:	ldr	x1, [sp, #96]
  40ebd4:	ldr	x2, [sp, #112]
  40ebd8:	add	x4, sp, #0x80
  40ebdc:	add	x3, sp, #0x68
  40ebe0:	ldr	x7, [sp, #40]
  40ebe4:	mov	x6, x4
  40ebe8:	mov	x5, x3
  40ebec:	ldr	w4, [sp, #88]
  40ebf0:	mov	x3, x2
  40ebf4:	mov	x2, x1
  40ebf8:	mov	x1, x0
  40ebfc:	mov	x0, x8
  40ec00:	bl	40a054 <portable_attach>
  40ec04:	str	w0, [sp, #92]
  40ec08:	ldr	w0, [sp, #92]
  40ec0c:	cmp	w0, #0x0
  40ec10:	b.lt	40ec34 <bus_image_common_attach+0x334>  // b.tstop
  40ec14:	ldr	x0, [sp, #104]
  40ec18:	ldr	x1, [sp, #128]
  40ec1c:	mov	x2, x1
  40ec20:	mov	x1, x0
  40ec24:	ldr	x0, [sp, #64]
  40ec28:	bl	40d8c0 <reply_portable_changes>
  40ec2c:	str	w0, [sp, #92]
  40ec30:	b	40ec38 <bus_image_common_attach+0x338>
  40ec34:	nop
  40ec38:	ldr	x0, [sp, #104]
  40ec3c:	ldr	x1, [sp, #128]
  40ec40:	bl	4086c4 <portable_changes_free>
  40ec44:	ldr	w19, [sp, #92]
  40ec48:	add	x0, sp, #0x60
  40ec4c:	bl	40dd40 <strv_freep>
  40ec50:	mov	w1, w19
  40ec54:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40ec58:	add	x0, x0, #0x728
  40ec5c:	ldr	x2, [sp, #136]
  40ec60:	ldr	x0, [x0]
  40ec64:	eor	x0, x2, x0
  40ec68:	cmp	x0, #0x0
  40ec6c:	b.eq	40ec74 <bus_image_common_attach+0x374>  // b.none
  40ec70:	bl	404930 <__stack_chk_fail@plt>
  40ec74:	mov	w0, w1
  40ec78:	ldr	x19, [sp, #16]
  40ec7c:	ldp	x29, x30, [sp], #144
  40ec80:	ret

000000000040ec84 <bus_image_method_attach>:
  40ec84:	stp	x29, x30, [sp, #-48]!
  40ec88:	mov	x29, sp
  40ec8c:	str	x0, [sp, #40]
  40ec90:	str	x1, [sp, #32]
  40ec94:	str	x2, [sp, #24]
  40ec98:	ldr	x4, [sp, #24]
  40ec9c:	ldr	x3, [sp, #32]
  40eca0:	mov	x2, #0x0                   	// #0
  40eca4:	ldr	x1, [sp, #40]
  40eca8:	mov	x0, #0x0                   	// #0
  40ecac:	bl	40e900 <bus_image_common_attach>
  40ecb0:	ldp	x29, x30, [sp], #48
  40ecb4:	ret

000000000040ecb8 <bus_image_method_detach>:
  40ecb8:	stp	x29, x30, [sp, #-96]!
  40ecbc:	mov	x29, sp
  40ecc0:	str	x0, [sp, #40]
  40ecc4:	str	x1, [sp, #32]
  40ecc8:	str	x2, [sp, #24]
  40eccc:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40ecd0:	add	x0, x0, #0x728
  40ecd4:	ldr	x1, [x0]
  40ecd8:	str	x1, [sp, #88]
  40ecdc:	mov	x1, #0x0                   	// #0
  40ece0:	str	xzr, [sp, #56]
  40ece4:	ldr	x0, [sp, #32]
  40ece8:	str	x0, [sp, #72]
  40ecec:	ldr	x0, [sp, #72]
  40ecf0:	ldr	x0, [x0, #128]
  40ecf4:	str	x0, [sp, #80]
  40ecf8:	str	xzr, [sp, #64]
  40ecfc:	ldr	x0, [sp, #40]
  40ed00:	cmp	x0, #0x0
  40ed04:	cset	w0, eq  // eq = none
  40ed08:	and	w0, w0, #0xff
  40ed0c:	and	x0, x0, #0xff
  40ed10:	cmp	x0, #0x0
  40ed14:	b.eq	40ed40 <bus_image_method_detach+0x88>  // b.none
  40ed18:	adrp	x0, 413000 <_fini+0x1050>
  40ed1c:	add	x1, x0, #0xd13
  40ed20:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40ed24:	add	x4, x0, #0x820
  40ed28:	mov	w3, #0x130                 	// #304
  40ed2c:	mov	x2, x1
  40ed30:	adrp	x0, 413000 <_fini+0x1050>
  40ed34:	add	x1, x0, #0xd70
  40ed38:	mov	w0, #0x0                   	// #0
  40ed3c:	bl	404670 <log_assert_failed_realm@plt>
  40ed40:	ldr	x0, [sp, #72]
  40ed44:	cmp	x0, #0x0
  40ed48:	cset	w0, eq  // eq = none
  40ed4c:	and	w0, w0, #0xff
  40ed50:	and	x0, x0, #0xff
  40ed54:	cmp	x0, #0x0
  40ed58:	b.eq	40ed84 <bus_image_method_detach+0xcc>  // b.none
  40ed5c:	adrp	x0, 413000 <_fini+0x1050>
  40ed60:	add	x1, x0, #0xd13
  40ed64:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40ed68:	add	x4, x0, #0x820
  40ed6c:	mov	w3, #0x131                 	// #305
  40ed70:	mov	x2, x1
  40ed74:	adrp	x0, 413000 <_fini+0x1050>
  40ed78:	add	x1, x0, #0xd78
  40ed7c:	mov	w0, #0x0                   	// #0
  40ed80:	bl	404670 <log_assert_failed_realm@plt>
  40ed84:	ldr	x0, [sp, #80]
  40ed88:	cmp	x0, #0x0
  40ed8c:	cset	w0, eq  // eq = none
  40ed90:	and	w0, w0, #0xff
  40ed94:	and	x0, x0, #0xff
  40ed98:	cmp	x0, #0x0
  40ed9c:	b.eq	40edc8 <bus_image_method_detach+0x110>  // b.none
  40eda0:	adrp	x0, 413000 <_fini+0x1050>
  40eda4:	add	x1, x0, #0xd13
  40eda8:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40edac:	add	x4, x0, #0x820
  40edb0:	mov	w3, #0x132                 	// #306
  40edb4:	mov	x2, x1
  40edb8:	adrp	x0, 413000 <_fini+0x1050>
  40edbc:	add	x1, x0, #0xdd8
  40edc0:	mov	w0, #0x0                   	// #0
  40edc4:	bl	404670 <log_assert_failed_realm@plt>
  40edc8:	add	x0, sp, #0x30
  40edcc:	mov	x2, x0
  40edd0:	adrp	x0, 413000 <_fini+0x1050>
  40edd4:	add	x1, x0, #0xe90
  40edd8:	ldr	x0, [sp, #40]
  40eddc:	bl	404680 <sd_bus_message_read@plt>
  40ede0:	str	w0, [sp, #52]
  40ede4:	ldr	w0, [sp, #52]
  40ede8:	cmp	w0, #0x0
  40edec:	b.ge	40edf8 <bus_image_method_detach+0x140>  // b.tcont
  40edf0:	ldr	w0, [sp, #52]
  40edf4:	b	40eee4 <bus_image_method_detach+0x22c>
  40edf8:	ldr	x0, [sp, #80]
  40edfc:	add	x0, x0, #0x10
  40ee00:	ldr	x7, [sp, #24]
  40ee04:	mov	x6, x0
  40ee08:	mov	w5, #0xffffffff            	// #-1
  40ee0c:	mov	w4, #0x0                   	// #0
  40ee10:	mov	x3, #0x0                   	// #0
  40ee14:	adrp	x0, 413000 <_fini+0x1050>
  40ee18:	add	x2, x0, #0xe68
  40ee1c:	mov	w1, #0x15                  	// #21
  40ee20:	ldr	x0, [sp, #40]
  40ee24:	bl	404e20 <bus_verify_polkit_async@plt>
  40ee28:	str	w0, [sp, #52]
  40ee2c:	ldr	w0, [sp, #52]
  40ee30:	cmp	w0, #0x0
  40ee34:	b.ge	40ee40 <bus_image_method_detach+0x188>  // b.tcont
  40ee38:	ldr	w0, [sp, #52]
  40ee3c:	b	40eee4 <bus_image_method_detach+0x22c>
  40ee40:	ldr	w0, [sp, #52]
  40ee44:	cmp	w0, #0x0
  40ee48:	b.ne	40ee54 <bus_image_method_detach+0x19c>  // b.any
  40ee4c:	mov	w0, #0x1                   	// #1
  40ee50:	b	40eee4 <bus_image_method_detach+0x22c>
  40ee54:	ldr	x0, [sp, #40]
  40ee58:	bl	404610 <sd_bus_message_get_bus@plt>
  40ee5c:	mov	x6, x0
  40ee60:	ldr	x0, [sp, #72]
  40ee64:	ldr	x1, [x0, #16]
  40ee68:	ldr	w0, [sp, #48]
  40ee6c:	cmp	w0, #0x0
  40ee70:	b.eq	40ee7c <bus_image_method_detach+0x1c4>  // b.none
  40ee74:	mov	w0, #0x4                   	// #4
  40ee78:	b	40ee80 <bus_image_method_detach+0x1c8>
  40ee7c:	mov	w0, #0x0                   	// #0
  40ee80:	add	x3, sp, #0x40
  40ee84:	add	x2, sp, #0x38
  40ee88:	ldr	x5, [sp, #24]
  40ee8c:	mov	x4, x3
  40ee90:	mov	x3, x2
  40ee94:	mov	w2, w0
  40ee98:	mov	x0, x6
  40ee9c:	bl	40ab64 <portable_detach>
  40eea0:	str	w0, [sp, #52]
  40eea4:	ldr	w0, [sp, #52]
  40eea8:	cmp	w0, #0x0
  40eeac:	b.lt	40eed0 <bus_image_method_detach+0x218>  // b.tstop
  40eeb0:	ldr	x0, [sp, #56]
  40eeb4:	ldr	x1, [sp, #64]
  40eeb8:	mov	x2, x1
  40eebc:	mov	x1, x0
  40eec0:	ldr	x0, [sp, #40]
  40eec4:	bl	40d8c0 <reply_portable_changes>
  40eec8:	str	w0, [sp, #52]
  40eecc:	b	40eed4 <bus_image_method_detach+0x21c>
  40eed0:	nop
  40eed4:	ldr	x0, [sp, #56]
  40eed8:	ldr	x1, [sp, #64]
  40eedc:	bl	4086c4 <portable_changes_free>
  40eee0:	ldr	w0, [sp, #52]
  40eee4:	mov	w1, w0
  40eee8:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40eeec:	add	x0, x0, #0x728
  40eef0:	ldr	x2, [sp, #88]
  40eef4:	ldr	x0, [x0]
  40eef8:	eor	x0, x2, x0
  40eefc:	cmp	x0, #0x0
  40ef00:	b.eq	40ef08 <bus_image_method_detach+0x250>  // b.none
  40ef04:	bl	404930 <__stack_chk_fail@plt>
  40ef08:	mov	w0, w1
  40ef0c:	ldp	x29, x30, [sp], #96
  40ef10:	ret

000000000040ef14 <bus_image_common_remove>:
  40ef14:	stp	x29, x30, [sp, #-112]!
  40ef18:	mov	x29, sp
  40ef1c:	str	x19, [sp, #16]
  40ef20:	str	x0, [sp, #72]
  40ef24:	str	x1, [sp, #64]
  40ef28:	str	x2, [sp, #56]
  40ef2c:	str	x3, [sp, #48]
  40ef30:	str	x4, [sp, #40]
  40ef34:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40ef38:	add	x0, x0, #0x728
  40ef3c:	ldr	x1, [x0]
  40ef40:	str	x1, [sp, #104]
  40ef44:	mov	x1, #0x0                   	// #0
  40ef48:	mov	w0, #0xffffffff            	// #-1
  40ef4c:	str	w0, [sp, #96]
  40ef50:	mov	w0, #0xffffffff            	// #-1
  40ef54:	str	w0, [sp, #100]
  40ef58:	str	wzr, [sp, #84]
  40ef5c:	ldr	x0, [sp, #64]
  40ef60:	cmp	x0, #0x0
  40ef64:	cset	w0, eq  // eq = none
  40ef68:	and	w0, w0, #0xff
  40ef6c:	and	x0, x0, #0xff
  40ef70:	cmp	x0, #0x0
  40ef74:	b.eq	40efa0 <bus_image_common_remove+0x8c>  // b.none
  40ef78:	adrp	x0, 413000 <_fini+0x1050>
  40ef7c:	add	x1, x0, #0xd13
  40ef80:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40ef84:	add	x4, x0, #0x838
  40ef88:	mov	w3, #0x163                 	// #355
  40ef8c:	mov	x2, x1
  40ef90:	adrp	x0, 413000 <_fini+0x1050>
  40ef94:	add	x1, x0, #0xd70
  40ef98:	mov	w0, #0x0                   	// #0
  40ef9c:	bl	404670 <log_assert_failed_realm@plt>
  40efa0:	ldr	x0, [sp, #56]
  40efa4:	cmp	x0, #0x0
  40efa8:	cset	w0, eq  // eq = none
  40efac:	and	w0, w0, #0xff
  40efb0:	and	x0, x0, #0xff
  40efb4:	cmp	x0, #0x0
  40efb8:	b.eq	40f000 <bus_image_common_remove+0xec>  // b.none
  40efbc:	ldr	x0, [sp, #48]
  40efc0:	cmp	x0, #0x0
  40efc4:	cset	w0, eq  // eq = none
  40efc8:	and	w0, w0, #0xff
  40efcc:	and	x0, x0, #0xff
  40efd0:	cmp	x0, #0x0
  40efd4:	b.eq	40f000 <bus_image_common_remove+0xec>  // b.none
  40efd8:	adrp	x0, 413000 <_fini+0x1050>
  40efdc:	add	x1, x0, #0xd13
  40efe0:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40efe4:	add	x4, x0, #0x838
  40efe8:	mov	w3, #0x164                 	// #356
  40efec:	mov	x2, x1
  40eff0:	adrp	x0, 413000 <_fini+0x1050>
  40eff4:	add	x1, x0, #0xd58
  40eff8:	mov	w0, #0x0                   	// #0
  40effc:	bl	404670 <log_assert_failed_realm@plt>
  40f000:	ldr	x0, [sp, #72]
  40f004:	cmp	x0, #0x0
  40f008:	b.ne	40f05c <bus_image_common_remove+0x148>  // b.any
  40f00c:	ldr	x0, [sp, #48]
  40f010:	cmp	x0, #0x0
  40f014:	cset	w0, eq  // eq = none
  40f018:	and	w0, w0, #0xff
  40f01c:	and	x0, x0, #0xff
  40f020:	cmp	x0, #0x0
  40f024:	b.eq	40f050 <bus_image_common_remove+0x13c>  // b.none
  40f028:	adrp	x0, 413000 <_fini+0x1050>
  40f02c:	add	x1, x0, #0xd13
  40f030:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40f034:	add	x4, x0, #0x838
  40f038:	mov	w3, #0x167                 	// #359
  40f03c:	mov	x2, x1
  40f040:	adrp	x0, 413000 <_fini+0x1050>
  40f044:	add	x1, x0, #0xd78
  40f048:	mov	w0, #0x0                   	// #0
  40f04c:	bl	404670 <log_assert_failed_realm@plt>
  40f050:	ldr	x0, [sp, #48]
  40f054:	ldr	x0, [x0, #128]
  40f058:	str	x0, [sp, #72]
  40f05c:	ldr	x0, [sp, #72]
  40f060:	ldr	w0, [x0, #48]
  40f064:	cmp	w0, #0x3f
  40f068:	b.ls	40f08c <bus_image_common_remove+0x178>  // b.plast
  40f06c:	adrp	x0, 413000 <_fini+0x1050>
  40f070:	add	x2, x0, #0xe98
  40f074:	adrp	x0, 413000 <_fini+0x1050>
  40f078:	add	x1, x0, #0xeb8
  40f07c:	ldr	x0, [sp, #40]
  40f080:	bl	404910 <sd_bus_error_setf@plt>
  40f084:	mov	w19, w0
  40f088:	b	40f284 <bus_image_common_remove+0x370>
  40f08c:	ldr	x1, [sp, #48]
  40f090:	add	x0, sp, #0x30
  40f094:	ldr	x7, [sp, #40]
  40f098:	mov	x6, x0
  40f09c:	adrp	x0, 413000 <_fini+0x1050>
  40f0a0:	add	x5, x0, #0xee8
  40f0a4:	mov	w4, #0x2                   	// #2
  40f0a8:	mov	x3, x1
  40f0ac:	ldr	x2, [sp, #56]
  40f0b0:	ldr	x1, [sp, #64]
  40f0b4:	ldr	x0, [sp, #72]
  40f0b8:	bl	40f8cc <bus_image_acquire>
  40f0bc:	str	w0, [sp, #92]
  40f0c0:	ldr	w0, [sp, #92]
  40f0c4:	cmp	w0, #0x0
  40f0c8:	b.ge	40f0d4 <bus_image_common_remove+0x1c0>  // b.tcont
  40f0cc:	ldr	w19, [sp, #92]
  40f0d0:	b	40f284 <bus_image_common_remove+0x370>
  40f0d4:	ldr	w0, [sp, #92]
  40f0d8:	cmp	w0, #0x0
  40f0dc:	b.ne	40f0e8 <bus_image_common_remove+0x1d4>  // b.any
  40f0e0:	mov	w19, #0x1                   	// #1
  40f0e4:	b	40f284 <bus_image_common_remove+0x370>
  40f0e8:	ldr	x0, [sp, #64]
  40f0ec:	bl	404610 <sd_bus_message_get_bus@plt>
  40f0f0:	mov	x5, x0
  40f0f4:	ldr	x0, [sp, #48]
  40f0f8:	ldr	x0, [x0, #16]
  40f0fc:	add	x1, sp, #0x58
  40f100:	ldr	x4, [sp, #40]
  40f104:	mov	x3, x1
  40f108:	mov	w2, #0x0                   	// #0
  40f10c:	mov	x1, x0
  40f110:	mov	x0, x5
  40f114:	bl	40c22c <portable_get_state>
  40f118:	str	w0, [sp, #92]
  40f11c:	ldr	w0, [sp, #92]
  40f120:	cmp	w0, #0x0
  40f124:	b.ge	40f130 <bus_image_common_remove+0x21c>  // b.tcont
  40f128:	ldr	w19, [sp, #92]
  40f12c:	b	40f284 <bus_image_common_remove+0x370>
  40f130:	ldr	w0, [sp, #88]
  40f134:	cmp	w0, #0x0
  40f138:	b.eq	40f164 <bus_image_common_remove+0x250>  // b.none
  40f13c:	ldr	x0, [sp, #48]
  40f140:	ldr	x0, [x0, #16]
  40f144:	mov	x3, x0
  40f148:	adrp	x0, 413000 <_fini+0x1050>
  40f14c:	add	x2, x0, #0xf10
  40f150:	mov	w1, #0x10                  	// #16
  40f154:	ldr	x0, [sp, #40]
  40f158:	bl	404440 <sd_bus_error_set_errnof@plt>
  40f15c:	mov	w19, w0
  40f160:	b	40f284 <bus_image_common_remove+0x370>
  40f164:	add	x0, sp, #0x60
  40f168:	mov	w1, #0x800                 	// #2048
  40f16c:	movk	w1, #0x8, lsl #16
  40f170:	bl	404ac0 <pipe2@plt>
  40f174:	cmp	w0, #0x0
  40f178:	b.ge	40f19c <bus_image_common_remove+0x288>  // b.tcont
  40f17c:	bl	404820 <__errno_location@plt>
  40f180:	ldr	w1, [x0]
  40f184:	adrp	x0, 413000 <_fini+0x1050>
  40f188:	add	x2, x0, #0xf38
  40f18c:	ldr	x0, [sp, #40]
  40f190:	bl	404440 <sd_bus_error_set_errnof@plt>
  40f194:	mov	w19, w0
  40f198:	b	40f284 <bus_image_common_remove+0x370>
  40f19c:	add	x0, sp, #0x54
  40f1a0:	mov	x2, x0
  40f1a4:	mov	w1, #0x1                   	// #1
  40f1a8:	adrp	x0, 413000 <_fini+0x1050>
  40f1ac:	add	x0, x0, #0xf58
  40f1b0:	bl	40dddc <safe_fork>
  40f1b4:	str	w0, [sp, #92]
  40f1b8:	ldr	w0, [sp, #92]
  40f1bc:	cmp	w0, #0x0
  40f1c0:	b.ge	40f1e0 <bus_image_common_remove+0x2cc>  // b.tcont
  40f1c4:	ldr	w1, [sp, #92]
  40f1c8:	adrp	x0, 413000 <_fini+0x1050>
  40f1cc:	add	x2, x0, #0xf68
  40f1d0:	ldr	x0, [sp, #40]
  40f1d4:	bl	404440 <sd_bus_error_set_errnof@plt>
  40f1d8:	mov	w19, w0
  40f1dc:	b	40f284 <bus_image_common_remove+0x370>
  40f1e0:	ldr	w0, [sp, #92]
  40f1e4:	cmp	w0, #0x0
  40f1e8:	b.ne	40f230 <bus_image_common_remove+0x31c>  // b.any
  40f1ec:	ldr	w0, [sp, #96]
  40f1f0:	bl	4045e0 <safe_close@plt>
  40f1f4:	str	w0, [sp, #96]
  40f1f8:	ldr	x0, [sp, #48]
  40f1fc:	bl	404d40 <image_remove@plt>
  40f200:	str	w0, [sp, #92]
  40f204:	ldr	w0, [sp, #92]
  40f208:	cmp	w0, #0x0
  40f20c:	b.ge	40f228 <bus_image_common_remove+0x314>  // b.tcont
  40f210:	ldr	w0, [sp, #100]
  40f214:	add	x1, sp, #0x5c
  40f218:	mov	x2, #0x4                   	// #4
  40f21c:	bl	404970 <write@plt>
  40f220:	mov	w0, #0x1                   	// #1
  40f224:	bl	4046c0 <_exit@plt>
  40f228:	mov	w0, #0x0                   	// #0
  40f22c:	bl	4046c0 <_exit@plt>
  40f230:	ldr	w0, [sp, #100]
  40f234:	bl	4045e0 <safe_close@plt>
  40f238:	str	w0, [sp, #100]
  40f23c:	ldr	w0, [sp, #84]
  40f240:	ldr	w1, [sp, #96]
  40f244:	mov	x4, #0x0                   	// #0
  40f248:	mov	w3, w1
  40f24c:	ldr	x2, [sp, #64]
  40f250:	mov	w1, w0
  40f254:	ldr	x0, [sp, #72]
  40f258:	bl	410c2c <operation_new>
  40f25c:	str	w0, [sp, #92]
  40f260:	ldr	w0, [sp, #92]
  40f264:	cmp	w0, #0x0
  40f268:	b.ge	40f274 <bus_image_common_remove+0x360>  // b.tcont
  40f26c:	ldr	w19, [sp, #92]
  40f270:	b	40f284 <bus_image_common_remove+0x370>
  40f274:	str	wzr, [sp, #84]
  40f278:	mov	w0, #0xffffffff            	// #-1
  40f27c:	str	w0, [sp, #96]
  40f280:	mov	w19, #0x1                   	// #1
  40f284:	add	x0, sp, #0x54
  40f288:	bl	4046b0 <sigkill_waitp@plt>
  40f28c:	add	x0, sp, #0x60
  40f290:	bl	40dc74 <close_pairp>
  40f294:	mov	w1, w19
  40f298:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40f29c:	add	x0, x0, #0x728
  40f2a0:	ldr	x2, [sp, #104]
  40f2a4:	ldr	x0, [x0]
  40f2a8:	eor	x0, x2, x0
  40f2ac:	cmp	x0, #0x0
  40f2b0:	b.eq	40f2b8 <bus_image_common_remove+0x3a4>  // b.none
  40f2b4:	bl	404930 <__stack_chk_fail@plt>
  40f2b8:	mov	w0, w1
  40f2bc:	ldr	x19, [sp, #16]
  40f2c0:	ldp	x29, x30, [sp], #112
  40f2c4:	ret

000000000040f2c8 <bus_image_method_remove>:
  40f2c8:	stp	x29, x30, [sp, #-48]!
  40f2cc:	mov	x29, sp
  40f2d0:	str	x0, [sp, #40]
  40f2d4:	str	x1, [sp, #32]
  40f2d8:	str	x2, [sp, #24]
  40f2dc:	ldr	x4, [sp, #24]
  40f2e0:	ldr	x3, [sp, #32]
  40f2e4:	mov	x2, #0x0                   	// #0
  40f2e8:	ldr	x1, [sp, #40]
  40f2ec:	mov	x0, #0x0                   	// #0
  40f2f0:	bl	40ef14 <bus_image_common_remove>
  40f2f4:	ldp	x29, x30, [sp], #48
  40f2f8:	ret

000000000040f2fc <bus_image_common_mark_read_only>:
  40f2fc:	stp	x29, x30, [sp, #-80]!
  40f300:	mov	x29, sp
  40f304:	str	x0, [sp, #56]
  40f308:	str	x1, [sp, #48]
  40f30c:	str	x2, [sp, #40]
  40f310:	str	x3, [sp, #32]
  40f314:	str	x4, [sp, #24]
  40f318:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40f31c:	add	x0, x0, #0x728
  40f320:	ldr	x1, [x0]
  40f324:	str	x1, [sp, #72]
  40f328:	mov	x1, #0x0                   	// #0
  40f32c:	ldr	x0, [sp, #48]
  40f330:	cmp	x0, #0x0
  40f334:	cset	w0, eq  // eq = none
  40f338:	and	w0, w0, #0xff
  40f33c:	and	x0, x0, #0xff
  40f340:	cmp	x0, #0x0
  40f344:	b.eq	40f370 <bus_image_common_mark_read_only+0x74>  // b.none
  40f348:	adrp	x0, 413000 <_fini+0x1050>
  40f34c:	add	x1, x0, #0xd13
  40f350:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40f354:	add	x4, x0, #0x850
  40f358:	mov	w3, #0x1b2                 	// #434
  40f35c:	mov	x2, x1
  40f360:	adrp	x0, 413000 <_fini+0x1050>
  40f364:	add	x1, x0, #0xd70
  40f368:	mov	w0, #0x0                   	// #0
  40f36c:	bl	404670 <log_assert_failed_realm@plt>
  40f370:	ldr	x0, [sp, #40]
  40f374:	cmp	x0, #0x0
  40f378:	cset	w0, eq  // eq = none
  40f37c:	and	w0, w0, #0xff
  40f380:	and	x0, x0, #0xff
  40f384:	cmp	x0, #0x0
  40f388:	b.eq	40f3d0 <bus_image_common_mark_read_only+0xd4>  // b.none
  40f38c:	ldr	x0, [sp, #32]
  40f390:	cmp	x0, #0x0
  40f394:	cset	w0, eq  // eq = none
  40f398:	and	w0, w0, #0xff
  40f39c:	and	x0, x0, #0xff
  40f3a0:	cmp	x0, #0x0
  40f3a4:	b.eq	40f3d0 <bus_image_common_mark_read_only+0xd4>  // b.none
  40f3a8:	adrp	x0, 413000 <_fini+0x1050>
  40f3ac:	add	x1, x0, #0xd13
  40f3b0:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40f3b4:	add	x4, x0, #0x850
  40f3b8:	mov	w3, #0x1b3                 	// #435
  40f3bc:	mov	x2, x1
  40f3c0:	adrp	x0, 413000 <_fini+0x1050>
  40f3c4:	add	x1, x0, #0xd58
  40f3c8:	mov	w0, #0x0                   	// #0
  40f3cc:	bl	404670 <log_assert_failed_realm@plt>
  40f3d0:	ldr	x0, [sp, #56]
  40f3d4:	cmp	x0, #0x0
  40f3d8:	b.ne	40f42c <bus_image_common_mark_read_only+0x130>  // b.any
  40f3dc:	ldr	x0, [sp, #32]
  40f3e0:	cmp	x0, #0x0
  40f3e4:	cset	w0, eq  // eq = none
  40f3e8:	and	w0, w0, #0xff
  40f3ec:	and	x0, x0, #0xff
  40f3f0:	cmp	x0, #0x0
  40f3f4:	b.eq	40f420 <bus_image_common_mark_read_only+0x124>  // b.none
  40f3f8:	adrp	x0, 413000 <_fini+0x1050>
  40f3fc:	add	x1, x0, #0xd13
  40f400:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40f404:	add	x4, x0, #0x850
  40f408:	mov	w3, #0x1b6                 	// #438
  40f40c:	mov	x2, x1
  40f410:	adrp	x0, 413000 <_fini+0x1050>
  40f414:	add	x1, x0, #0xd78
  40f418:	mov	w0, #0x0                   	// #0
  40f41c:	bl	404670 <log_assert_failed_realm@plt>
  40f420:	ldr	x0, [sp, #32]
  40f424:	ldr	x0, [x0, #128]
  40f428:	str	x0, [sp, #56]
  40f42c:	add	x0, sp, #0x40
  40f430:	mov	x2, x0
  40f434:	adrp	x0, 413000 <_fini+0x1050>
  40f438:	add	x1, x0, #0xe90
  40f43c:	ldr	x0, [sp, #48]
  40f440:	bl	404680 <sd_bus_message_read@plt>
  40f444:	str	w0, [sp, #68]
  40f448:	ldr	w0, [sp, #68]
  40f44c:	cmp	w0, #0x0
  40f450:	b.ge	40f45c <bus_image_common_mark_read_only+0x160>  // b.tcont
  40f454:	ldr	w0, [sp, #68]
  40f458:	b	40f4fc <bus_image_common_mark_read_only+0x200>
  40f45c:	ldr	x1, [sp, #32]
  40f460:	add	x0, sp, #0x20
  40f464:	ldr	x7, [sp, #24]
  40f468:	mov	x6, x0
  40f46c:	adrp	x0, 413000 <_fini+0x1050>
  40f470:	add	x5, x0, #0xee8
  40f474:	mov	w4, #0x2                   	// #2
  40f478:	mov	x3, x1
  40f47c:	ldr	x2, [sp, #40]
  40f480:	ldr	x1, [sp, #48]
  40f484:	ldr	x0, [sp, #56]
  40f488:	bl	40f8cc <bus_image_acquire>
  40f48c:	str	w0, [sp, #68]
  40f490:	ldr	w0, [sp, #68]
  40f494:	cmp	w0, #0x0
  40f498:	b.ge	40f4a4 <bus_image_common_mark_read_only+0x1a8>  // b.tcont
  40f49c:	ldr	w0, [sp, #68]
  40f4a0:	b	40f4fc <bus_image_common_mark_read_only+0x200>
  40f4a4:	ldr	w0, [sp, #68]
  40f4a8:	cmp	w0, #0x0
  40f4ac:	b.ne	40f4b8 <bus_image_common_mark_read_only+0x1bc>  // b.any
  40f4b0:	mov	w0, #0x1                   	// #1
  40f4b4:	b	40f4fc <bus_image_common_mark_read_only+0x200>
  40f4b8:	ldr	x2, [sp, #32]
  40f4bc:	ldr	w0, [sp, #64]
  40f4c0:	cmp	w0, #0x0
  40f4c4:	cset	w0, ne  // ne = any
  40f4c8:	and	w0, w0, #0xff
  40f4cc:	mov	w1, w0
  40f4d0:	mov	x0, x2
  40f4d4:	bl	4045f0 <image_read_only@plt>
  40f4d8:	str	w0, [sp, #68]
  40f4dc:	ldr	w0, [sp, #68]
  40f4e0:	cmp	w0, #0x0
  40f4e4:	b.ge	40f4f0 <bus_image_common_mark_read_only+0x1f4>  // b.tcont
  40f4e8:	ldr	w0, [sp, #68]
  40f4ec:	b	40f4fc <bus_image_common_mark_read_only+0x200>
  40f4f0:	mov	x1, #0x0                   	// #0
  40f4f4:	ldr	x0, [sp, #48]
  40f4f8:	bl	404340 <sd_bus_reply_method_return@plt>
  40f4fc:	mov	w1, w0
  40f500:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40f504:	add	x0, x0, #0x728
  40f508:	ldr	x2, [sp, #72]
  40f50c:	ldr	x0, [x0]
  40f510:	eor	x0, x2, x0
  40f514:	cmp	x0, #0x0
  40f518:	b.eq	40f520 <bus_image_common_mark_read_only+0x224>  // b.none
  40f51c:	bl	404930 <__stack_chk_fail@plt>
  40f520:	mov	w0, w1
  40f524:	ldp	x29, x30, [sp], #80
  40f528:	ret

000000000040f52c <bus_image_method_mark_read_only>:
  40f52c:	stp	x29, x30, [sp, #-48]!
  40f530:	mov	x29, sp
  40f534:	str	x0, [sp, #40]
  40f538:	str	x1, [sp, #32]
  40f53c:	str	x2, [sp, #24]
  40f540:	ldr	x4, [sp, #24]
  40f544:	ldr	x3, [sp, #32]
  40f548:	mov	x2, #0x0                   	// #0
  40f54c:	ldr	x1, [sp, #40]
  40f550:	mov	x0, #0x0                   	// #0
  40f554:	bl	40f2fc <bus_image_common_mark_read_only>
  40f558:	ldp	x29, x30, [sp], #48
  40f55c:	ret

000000000040f560 <bus_image_common_set_limit>:
  40f560:	stp	x29, x30, [sp, #-96]!
  40f564:	mov	x29, sp
  40f568:	str	x0, [sp, #56]
  40f56c:	str	x1, [sp, #48]
  40f570:	str	x2, [sp, #40]
  40f574:	str	x3, [sp, #32]
  40f578:	str	x4, [sp, #24]
  40f57c:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40f580:	add	x0, x0, #0x728
  40f584:	ldr	x1, [x0]
  40f588:	str	x1, [sp, #88]
  40f58c:	mov	x1, #0x0                   	// #0
  40f590:	ldr	x0, [sp, #48]
  40f594:	cmp	x0, #0x0
  40f598:	cset	w0, eq  // eq = none
  40f59c:	and	w0, w0, #0xff
  40f5a0:	and	x0, x0, #0xff
  40f5a4:	cmp	x0, #0x0
  40f5a8:	b.eq	40f5d4 <bus_image_common_set_limit+0x74>  // b.none
  40f5ac:	adrp	x0, 413000 <_fini+0x1050>
  40f5b0:	add	x1, x0, #0xd13
  40f5b4:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40f5b8:	add	x4, x0, #0x870
  40f5bc:	mov	w3, #0x1e0                 	// #480
  40f5c0:	mov	x2, x1
  40f5c4:	adrp	x0, 413000 <_fini+0x1050>
  40f5c8:	add	x1, x0, #0xd70
  40f5cc:	mov	w0, #0x0                   	// #0
  40f5d0:	bl	404670 <log_assert_failed_realm@plt>
  40f5d4:	ldr	x0, [sp, #40]
  40f5d8:	cmp	x0, #0x0
  40f5dc:	cset	w0, eq  // eq = none
  40f5e0:	and	w0, w0, #0xff
  40f5e4:	and	x0, x0, #0xff
  40f5e8:	cmp	x0, #0x0
  40f5ec:	b.eq	40f634 <bus_image_common_set_limit+0xd4>  // b.none
  40f5f0:	ldr	x0, [sp, #32]
  40f5f4:	cmp	x0, #0x0
  40f5f8:	cset	w0, eq  // eq = none
  40f5fc:	and	w0, w0, #0xff
  40f600:	and	x0, x0, #0xff
  40f604:	cmp	x0, #0x0
  40f608:	b.eq	40f634 <bus_image_common_set_limit+0xd4>  // b.none
  40f60c:	adrp	x0, 413000 <_fini+0x1050>
  40f610:	add	x1, x0, #0xd13
  40f614:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40f618:	add	x4, x0, #0x870
  40f61c:	mov	w3, #0x1e1                 	// #481
  40f620:	mov	x2, x1
  40f624:	adrp	x0, 413000 <_fini+0x1050>
  40f628:	add	x1, x0, #0xd58
  40f62c:	mov	w0, #0x0                   	// #0
  40f630:	bl	404670 <log_assert_failed_realm@plt>
  40f634:	ldr	x0, [sp, #56]
  40f638:	cmp	x0, #0x0
  40f63c:	b.ne	40f690 <bus_image_common_set_limit+0x130>  // b.any
  40f640:	ldr	x0, [sp, #32]
  40f644:	cmp	x0, #0x0
  40f648:	cset	w0, eq  // eq = none
  40f64c:	and	w0, w0, #0xff
  40f650:	and	x0, x0, #0xff
  40f654:	cmp	x0, #0x0
  40f658:	b.eq	40f684 <bus_image_common_set_limit+0x124>  // b.none
  40f65c:	adrp	x0, 413000 <_fini+0x1050>
  40f660:	add	x1, x0, #0xd13
  40f664:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40f668:	add	x4, x0, #0x870
  40f66c:	mov	w3, #0x1e4                 	// #484
  40f670:	mov	x2, x1
  40f674:	adrp	x0, 413000 <_fini+0x1050>
  40f678:	add	x1, x0, #0xd78
  40f67c:	mov	w0, #0x0                   	// #0
  40f680:	bl	404670 <log_assert_failed_realm@plt>
  40f684:	ldr	x0, [sp, #32]
  40f688:	ldr	x0, [x0, #128]
  40f68c:	str	x0, [sp, #56]
  40f690:	add	x0, sp, #0x50
  40f694:	mov	x2, x0
  40f698:	adrp	x0, 413000 <_fini+0x1050>
  40f69c:	add	x1, x0, #0xf80
  40f6a0:	ldr	x0, [sp, #48]
  40f6a4:	bl	404680 <sd_bus_message_read@plt>
  40f6a8:	str	w0, [sp, #76]
  40f6ac:	ldr	w0, [sp, #76]
  40f6b0:	cmp	w0, #0x0
  40f6b4:	b.ge	40f6c0 <bus_image_common_set_limit+0x160>  // b.tcont
  40f6b8:	ldr	w0, [sp, #76]
  40f6bc:	b	40f784 <bus_image_common_set_limit+0x224>
  40f6c0:	ldr	x0, [sp, #80]
  40f6c4:	bl	40dd0c <FILE_SIZE_VALID_OR_INFINITY>
  40f6c8:	and	w0, w0, #0xff
  40f6cc:	eor	w0, w0, #0x1
  40f6d0:	and	w0, w0, #0xff
  40f6d4:	cmp	w0, #0x0
  40f6d8:	b.eq	40f6f8 <bus_image_common_set_limit+0x198>  // b.none
  40f6dc:	adrp	x0, 413000 <_fini+0x1050>
  40f6e0:	add	x2, x0, #0xf88
  40f6e4:	adrp	x0, 413000 <_fini+0x1050>
  40f6e8:	add	x1, x0, #0xe40
  40f6ec:	ldr	x0, [sp, #24]
  40f6f0:	bl	404910 <sd_bus_error_setf@plt>
  40f6f4:	b	40f784 <bus_image_common_set_limit+0x224>
  40f6f8:	ldr	x1, [sp, #32]
  40f6fc:	add	x0, sp, #0x20
  40f700:	ldr	x7, [sp, #24]
  40f704:	mov	x6, x0
  40f708:	adrp	x0, 413000 <_fini+0x1050>
  40f70c:	add	x5, x0, #0xee8
  40f710:	mov	w4, #0x2                   	// #2
  40f714:	mov	x3, x1
  40f718:	ldr	x2, [sp, #40]
  40f71c:	ldr	x1, [sp, #48]
  40f720:	ldr	x0, [sp, #56]
  40f724:	bl	40f8cc <bus_image_acquire>
  40f728:	str	w0, [sp, #76]
  40f72c:	ldr	w0, [sp, #76]
  40f730:	cmp	w0, #0x0
  40f734:	b.ge	40f740 <bus_image_common_set_limit+0x1e0>  // b.tcont
  40f738:	ldr	w0, [sp, #76]
  40f73c:	b	40f784 <bus_image_common_set_limit+0x224>
  40f740:	ldr	w0, [sp, #76]
  40f744:	cmp	w0, #0x0
  40f748:	b.ne	40f754 <bus_image_common_set_limit+0x1f4>  // b.any
  40f74c:	mov	w0, #0x1                   	// #1
  40f750:	b	40f784 <bus_image_common_set_limit+0x224>
  40f754:	ldr	x0, [sp, #32]
  40f758:	ldr	x1, [sp, #80]
  40f75c:	bl	404cd0 <image_set_limit@plt>
  40f760:	str	w0, [sp, #76]
  40f764:	ldr	w0, [sp, #76]
  40f768:	cmp	w0, #0x0
  40f76c:	b.ge	40f778 <bus_image_common_set_limit+0x218>  // b.tcont
  40f770:	ldr	w0, [sp, #76]
  40f774:	b	40f784 <bus_image_common_set_limit+0x224>
  40f778:	mov	x1, #0x0                   	// #0
  40f77c:	ldr	x0, [sp, #48]
  40f780:	bl	404340 <sd_bus_reply_method_return@plt>
  40f784:	mov	w1, w0
  40f788:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40f78c:	add	x0, x0, #0x728
  40f790:	ldr	x2, [sp, #88]
  40f794:	ldr	x0, [x0]
  40f798:	eor	x0, x2, x0
  40f79c:	cmp	x0, #0x0
  40f7a0:	b.eq	40f7a8 <bus_image_common_set_limit+0x248>  // b.none
  40f7a4:	bl	404930 <__stack_chk_fail@plt>
  40f7a8:	mov	w0, w1
  40f7ac:	ldp	x29, x30, [sp], #96
  40f7b0:	ret

000000000040f7b4 <bus_image_method_set_limit>:
  40f7b4:	stp	x29, x30, [sp, #-48]!
  40f7b8:	mov	x29, sp
  40f7bc:	str	x0, [sp, #40]
  40f7c0:	str	x1, [sp, #32]
  40f7c4:	str	x2, [sp, #24]
  40f7c8:	ldr	x4, [sp, #24]
  40f7cc:	ldr	x3, [sp, #32]
  40f7d0:	mov	x2, #0x0                   	// #0
  40f7d4:	ldr	x1, [sp, #40]
  40f7d8:	mov	x0, #0x0                   	// #0
  40f7dc:	bl	40f560 <bus_image_common_set_limit>
  40f7e0:	ldp	x29, x30, [sp], #48
  40f7e4:	ret

000000000040f7e8 <bus_image_path>:
  40f7e8:	stp	x29, x30, [sp, #-32]!
  40f7ec:	mov	x29, sp
  40f7f0:	str	x0, [sp, #24]
  40f7f4:	str	x1, [sp, #16]
  40f7f8:	ldr	x0, [sp, #24]
  40f7fc:	cmp	x0, #0x0
  40f800:	cset	w0, eq  // eq = none
  40f804:	and	w0, w0, #0xff
  40f808:	and	x0, x0, #0xff
  40f80c:	cmp	x0, #0x0
  40f810:	b.eq	40f83c <bus_image_path+0x54>  // b.none
  40f814:	adrp	x0, 413000 <_fini+0x1050>
  40f818:	add	x1, x0, #0xd13
  40f81c:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40f820:	add	x4, x0, #0x890
  40f824:	mov	w3, #0x21e                 	// #542
  40f828:	mov	x2, x1
  40f82c:	adrp	x0, 413000 <_fini+0x1050>
  40f830:	add	x1, x0, #0xd78
  40f834:	mov	w0, #0x0                   	// #0
  40f838:	bl	404670 <log_assert_failed_realm@plt>
  40f83c:	ldr	x0, [sp, #16]
  40f840:	cmp	x0, #0x0
  40f844:	cset	w0, eq  // eq = none
  40f848:	and	w0, w0, #0xff
  40f84c:	and	x0, x0, #0xff
  40f850:	cmp	x0, #0x0
  40f854:	b.eq	40f880 <bus_image_path+0x98>  // b.none
  40f858:	adrp	x0, 413000 <_fini+0x1050>
  40f85c:	add	x1, x0, #0xd13
  40f860:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40f864:	add	x4, x0, #0x890
  40f868:	mov	w3, #0x21f                 	// #543
  40f86c:	mov	x2, x1
  40f870:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40f874:	add	x1, x0, #0xc8
  40f878:	mov	w0, #0x0                   	// #0
  40f87c:	bl	404670 <log_assert_failed_realm@plt>
  40f880:	ldr	x0, [sp, #24]
  40f884:	ldrb	w0, [x0, #120]
  40f888:	ubfx	x0, x0, #1, #1
  40f88c:	and	w0, w0, #0xff
  40f890:	eor	w0, w0, #0x1
  40f894:	and	w0, w0, #0xff
  40f898:	cmp	w0, #0x0
  40f89c:	b.eq	40f8a8 <bus_image_path+0xc0>  // b.none
  40f8a0:	mov	w0, #0xffffffea            	// #-22
  40f8a4:	b	40f8c4 <bus_image_path+0xdc>
  40f8a8:	ldr	x0, [sp, #24]
  40f8ac:	ldr	x0, [x0, #8]
  40f8b0:	ldr	x2, [sp, #16]
  40f8b4:	mov	x1, x0
  40f8b8:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40f8bc:	add	x0, x0, #0xd0
  40f8c0:	bl	404ae0 <sd_bus_path_encode@plt>
  40f8c4:	ldp	x29, x30, [sp], #32
  40f8c8:	ret

000000000040f8cc <bus_image_acquire>:
  40f8cc:	stp	x29, x30, [sp, #-128]!
  40f8d0:	mov	x29, sp
  40f8d4:	str	x19, [sp, #16]
  40f8d8:	str	x0, [sp, #88]
  40f8dc:	str	x1, [sp, #80]
  40f8e0:	str	x2, [sp, #72]
  40f8e4:	str	x3, [sp, #64]
  40f8e8:	str	w4, [sp, #60]
  40f8ec:	str	x5, [sp, #48]
  40f8f0:	str	x6, [sp, #40]
  40f8f4:	str	x7, [sp, #32]
  40f8f8:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40f8fc:	add	x0, x0, #0x728
  40f900:	ldr	x1, [x0]
  40f904:	str	x1, [sp, #120]
  40f908:	mov	x1, #0x0                   	// #0
  40f90c:	str	xzr, [sp, #104]
  40f910:	ldr	x0, [sp, #88]
  40f914:	cmp	x0, #0x0
  40f918:	cset	w0, eq  // eq = none
  40f91c:	and	w0, w0, #0xff
  40f920:	and	x0, x0, #0xff
  40f924:	cmp	x0, #0x0
  40f928:	b.eq	40f954 <bus_image_acquire+0x88>  // b.none
  40f92c:	adrp	x0, 413000 <_fini+0x1050>
  40f930:	add	x1, x0, #0xd13
  40f934:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40f938:	add	x4, x0, #0x8a0
  40f93c:	mov	w3, #0x235                 	// #565
  40f940:	mov	x2, x1
  40f944:	adrp	x0, 413000 <_fini+0x1050>
  40f948:	add	x1, x0, #0xdd8
  40f94c:	mov	w0, #0x0                   	// #0
  40f950:	bl	404670 <log_assert_failed_realm@plt>
  40f954:	ldr	x0, [sp, #80]
  40f958:	cmp	x0, #0x0
  40f95c:	cset	w0, eq  // eq = none
  40f960:	and	w0, w0, #0xff
  40f964:	and	x0, x0, #0xff
  40f968:	cmp	x0, #0x0
  40f96c:	b.eq	40f998 <bus_image_acquire+0xcc>  // b.none
  40f970:	adrp	x0, 413000 <_fini+0x1050>
  40f974:	add	x1, x0, #0xd13
  40f978:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40f97c:	add	x4, x0, #0x8a0
  40f980:	mov	w3, #0x236                 	// #566
  40f984:	mov	x2, x1
  40f988:	adrp	x0, 413000 <_fini+0x1050>
  40f98c:	add	x1, x0, #0xd70
  40f990:	mov	w0, #0x0                   	// #0
  40f994:	bl	404670 <log_assert_failed_realm@plt>
  40f998:	ldr	x0, [sp, #72]
  40f99c:	cmp	x0, #0x0
  40f9a0:	cset	w0, eq  // eq = none
  40f9a4:	and	w0, w0, #0xff
  40f9a8:	and	x0, x0, #0xff
  40f9ac:	cmp	x0, #0x0
  40f9b0:	b.eq	40f9f8 <bus_image_acquire+0x12c>  // b.none
  40f9b4:	ldr	x0, [sp, #64]
  40f9b8:	cmp	x0, #0x0
  40f9bc:	cset	w0, eq  // eq = none
  40f9c0:	and	w0, w0, #0xff
  40f9c4:	and	x0, x0, #0xff
  40f9c8:	cmp	x0, #0x0
  40f9cc:	b.eq	40f9f8 <bus_image_acquire+0x12c>  // b.none
  40f9d0:	adrp	x0, 413000 <_fini+0x1050>
  40f9d4:	add	x1, x0, #0xd13
  40f9d8:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40f9dc:	add	x4, x0, #0x8a0
  40f9e0:	mov	w3, #0x237                 	// #567
  40f9e4:	mov	x2, x1
  40f9e8:	adrp	x0, 413000 <_fini+0x1050>
  40f9ec:	add	x1, x0, #0xd58
  40f9f0:	mov	w0, #0x0                   	// #0
  40f9f4:	bl	404670 <log_assert_failed_realm@plt>
  40f9f8:	ldr	w0, [sp, #60]
  40f9fc:	lsr	w0, w0, #31
  40fa00:	and	w0, w0, #0xff
  40fa04:	and	x0, x0, #0xff
  40fa08:	cmp	x0, #0x0
  40fa0c:	b.eq	40fa38 <bus_image_acquire+0x16c>  // b.none
  40fa10:	adrp	x0, 413000 <_fini+0x1050>
  40fa14:	add	x1, x0, #0xd13
  40fa18:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40fa1c:	add	x4, x0, #0x8a0
  40fa20:	mov	w3, #0x238                 	// #568
  40fa24:	mov	x2, x1
  40fa28:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40fa2c:	add	x1, x0, #0xf8
  40fa30:	mov	w0, #0x0                   	// #0
  40fa34:	bl	404670 <log_assert_failed_realm@plt>
  40fa38:	ldr	w0, [sp, #60]
  40fa3c:	cmp	w0, #0x2
  40fa40:	cset	w0, gt
  40fa44:	and	w0, w0, #0xff
  40fa48:	and	x0, x0, #0xff
  40fa4c:	cmp	x0, #0x0
  40fa50:	b.eq	40fa7c <bus_image_acquire+0x1b0>  // b.none
  40fa54:	adrp	x0, 413000 <_fini+0x1050>
  40fa58:	add	x1, x0, #0xd13
  40fa5c:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40fa60:	add	x4, x0, #0x8a0
  40fa64:	mov	w3, #0x239                 	// #569
  40fa68:	mov	x2, x1
  40fa6c:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40fa70:	add	x1, x0, #0x108
  40fa74:	mov	w0, #0x0                   	// #0
  40fa78:	bl	404670 <log_assert_failed_realm@plt>
  40fa7c:	ldr	x0, [sp, #48]
  40fa80:	cmp	x0, #0x0
  40fa84:	cset	w0, eq  // eq = none
  40fa88:	and	w0, w0, #0xff
  40fa8c:	and	x0, x0, #0xff
  40fa90:	cmp	x0, #0x0
  40fa94:	b.eq	40fadc <bus_image_acquire+0x210>  // b.none
  40fa98:	ldr	w0, [sp, #60]
  40fa9c:	cmp	w0, #0x0
  40faa0:	cset	w0, ne  // ne = any
  40faa4:	and	w0, w0, #0xff
  40faa8:	and	x0, x0, #0xff
  40faac:	cmp	x0, #0x0
  40fab0:	b.eq	40fadc <bus_image_acquire+0x210>  // b.none
  40fab4:	adrp	x0, 413000 <_fini+0x1050>
  40fab8:	add	x1, x0, #0xd13
  40fabc:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40fac0:	add	x4, x0, #0x8a0
  40fac4:	mov	w3, #0x23a                 	// #570
  40fac8:	mov	x2, x1
  40facc:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40fad0:	add	x1, x0, #0x130
  40fad4:	mov	w0, #0x0                   	// #0
  40fad8:	bl	404670 <log_assert_failed_realm@plt>
  40fadc:	ldr	x0, [sp, #40]
  40fae0:	cmp	x0, #0x0
  40fae4:	cset	w0, eq  // eq = none
  40fae8:	and	w0, w0, #0xff
  40faec:	and	x0, x0, #0xff
  40faf0:	cmp	x0, #0x0
  40faf4:	b.eq	40fb20 <bus_image_acquire+0x254>  // b.none
  40faf8:	adrp	x0, 413000 <_fini+0x1050>
  40fafc:	add	x1, x0, #0xd13
  40fb00:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40fb04:	add	x4, x0, #0x8a0
  40fb08:	mov	w3, #0x23b                 	// #571
  40fb0c:	mov	x2, x1
  40fb10:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40fb14:	add	x1, x0, #0xc8
  40fb18:	mov	w0, #0x0                   	// #0
  40fb1c:	bl	404670 <log_assert_failed_realm@plt>
  40fb20:	ldr	w0, [sp, #60]
  40fb24:	cmp	w0, #0x2
  40fb28:	b.ne	40fb8c <bus_image_acquire+0x2c0>  // b.any
  40fb2c:	ldr	x0, [sp, #88]
  40fb30:	add	x0, x0, #0x10
  40fb34:	ldr	x7, [sp, #32]
  40fb38:	mov	x6, x0
  40fb3c:	mov	w5, #0xffffffff            	// #-1
  40fb40:	mov	w4, #0x0                   	// #0
  40fb44:	mov	x3, #0x0                   	// #0
  40fb48:	ldr	x2, [sp, #48]
  40fb4c:	mov	w1, #0x15                  	// #21
  40fb50:	ldr	x0, [sp, #80]
  40fb54:	bl	404e20 <bus_verify_polkit_async@plt>
  40fb58:	str	w0, [sp, #100]
  40fb5c:	ldr	w0, [sp, #100]
  40fb60:	cmp	w0, #0x0
  40fb64:	b.ge	40fb70 <bus_image_acquire+0x2a4>  // b.tcont
  40fb68:	ldr	w19, [sp, #100]
  40fb6c:	b	40fde4 <bus_image_acquire+0x518>
  40fb70:	ldr	w0, [sp, #100]
  40fb74:	cmp	w0, #0x0
  40fb78:	b.ne	40fb8c <bus_image_acquire+0x2c0>  // b.any
  40fb7c:	ldr	x0, [sp, #40]
  40fb80:	str	xzr, [x0]
  40fb84:	mov	w19, #0x0                   	// #0
  40fb88:	b	40fde4 <bus_image_acquire+0x518>
  40fb8c:	ldr	x0, [sp, #64]
  40fb90:	cmp	x0, #0x0
  40fb94:	b.eq	40fbac <bus_image_acquire+0x2e0>  // b.none
  40fb98:	ldr	x0, [sp, #40]
  40fb9c:	ldr	x1, [sp, #64]
  40fba0:	str	x1, [x0]
  40fba4:	mov	w19, #0x1                   	// #1
  40fba8:	b	40fde4 <bus_image_acquire+0x518>
  40fbac:	ldr	x1, [sp, #72]
  40fbb0:	ldr	x0, [sp, #88]
  40fbb4:	bl	41037c <manager_image_cache_get>
  40fbb8:	str	x0, [sp, #112]
  40fbbc:	ldr	x0, [sp, #112]
  40fbc0:	cmp	x0, #0x0
  40fbc4:	b.eq	40fbdc <bus_image_acquire+0x310>  // b.none
  40fbc8:	ldr	x0, [sp, #40]
  40fbcc:	ldr	x1, [sp, #112]
  40fbd0:	str	x1, [x0]
  40fbd4:	mov	w19, #0x1                   	// #1
  40fbd8:	b	40fde4 <bus_image_acquire+0x518>
  40fbdc:	ldr	x0, [sp, #72]
  40fbe0:	bl	404880 <image_name_is_valid@plt>
  40fbe4:	and	w0, w0, #0xff
  40fbe8:	cmp	w0, #0x0
  40fbec:	b.eq	40fc38 <bus_image_acquire+0x36c>  // b.none
  40fbf0:	add	x0, sp, #0x68
  40fbf4:	mov	x2, x0
  40fbf8:	ldr	x1, [sp, #72]
  40fbfc:	mov	w0, #0x1                   	// #1
  40fc00:	bl	404330 <image_find@plt>
  40fc04:	str	w0, [sp, #100]
  40fc08:	ldr	w0, [sp, #100]
  40fc0c:	cmn	w0, #0x2
  40fc10:	b.ne	40fd68 <bus_image_acquire+0x49c>  // b.any
  40fc14:	ldr	x3, [sp, #72]
  40fc18:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40fc1c:	add	x2, x0, #0x168
  40fc20:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40fc24:	add	x1, x0, #0x180
  40fc28:	ldr	x0, [sp, #32]
  40fc2c:	bl	404910 <sd_bus_error_setf@plt>
  40fc30:	mov	w19, w0
  40fc34:	b	40fde4 <bus_image_acquire+0x518>
  40fc38:	ldr	w0, [sp, #60]
  40fc3c:	cmp	w0, #0x0
  40fc40:	b.ne	40fc68 <bus_image_acquire+0x39c>  // b.any
  40fc44:	ldr	x3, [sp, #72]
  40fc48:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40fc4c:	add	x2, x0, #0x1a8
  40fc50:	adrp	x0, 413000 <_fini+0x1050>
  40fc54:	add	x1, x0, #0xe40
  40fc58:	ldr	x0, [sp, #32]
  40fc5c:	bl	404910 <sd_bus_error_setf@plt>
  40fc60:	mov	w19, w0
  40fc64:	b	40fde4 <bus_image_acquire+0x518>
  40fc68:	ldr	x0, [sp, #72]
  40fc6c:	bl	404720 <path_is_absolute@plt>
  40fc70:	and	w0, w0, #0xff
  40fc74:	eor	w0, w0, #0x1
  40fc78:	and	w0, w0, #0xff
  40fc7c:	cmp	w0, #0x0
  40fc80:	b.eq	40fca8 <bus_image_acquire+0x3dc>  // b.none
  40fc84:	ldr	x3, [sp, #72]
  40fc88:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40fc8c:	add	x2, x0, #0x1d8
  40fc90:	adrp	x0, 413000 <_fini+0x1050>
  40fc94:	add	x1, x0, #0xe40
  40fc98:	ldr	x0, [sp, #32]
  40fc9c:	bl	404910 <sd_bus_error_setf@plt>
  40fca0:	mov	w19, w0
  40fca4:	b	40fde4 <bus_image_acquire+0x518>
  40fca8:	ldr	x0, [sp, #72]
  40fcac:	bl	404770 <path_is_normalized@plt>
  40fcb0:	and	w0, w0, #0xff
  40fcb4:	eor	w0, w0, #0x1
  40fcb8:	and	w0, w0, #0xff
  40fcbc:	cmp	w0, #0x0
  40fcc0:	b.eq	40fce8 <bus_image_acquire+0x41c>  // b.none
  40fcc4:	ldr	x3, [sp, #72]
  40fcc8:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40fccc:	add	x2, x0, #0x210
  40fcd0:	adrp	x0, 413000 <_fini+0x1050>
  40fcd4:	add	x1, x0, #0xe40
  40fcd8:	ldr	x0, [sp, #32]
  40fcdc:	bl	404910 <sd_bus_error_setf@plt>
  40fce0:	mov	w19, w0
  40fce4:	b	40fde4 <bus_image_acquire+0x518>
  40fce8:	ldr	w0, [sp, #60]
  40fcec:	cmp	w0, #0x1
  40fcf0:	b.ne	40fd54 <bus_image_acquire+0x488>  // b.any
  40fcf4:	ldr	x0, [sp, #88]
  40fcf8:	add	x0, x0, #0x10
  40fcfc:	ldr	x7, [sp, #32]
  40fd00:	mov	x6, x0
  40fd04:	mov	w5, #0xffffffff            	// #-1
  40fd08:	mov	w4, #0x0                   	// #0
  40fd0c:	mov	x3, #0x0                   	// #0
  40fd10:	ldr	x2, [sp, #48]
  40fd14:	mov	w1, #0x15                  	// #21
  40fd18:	ldr	x0, [sp, #80]
  40fd1c:	bl	404e20 <bus_verify_polkit_async@plt>
  40fd20:	str	w0, [sp, #100]
  40fd24:	ldr	w0, [sp, #100]
  40fd28:	cmp	w0, #0x0
  40fd2c:	b.ge	40fd38 <bus_image_acquire+0x46c>  // b.tcont
  40fd30:	ldr	w19, [sp, #100]
  40fd34:	b	40fde4 <bus_image_acquire+0x518>
  40fd38:	ldr	w0, [sp, #100]
  40fd3c:	cmp	w0, #0x0
  40fd40:	b.ne	40fd54 <bus_image_acquire+0x488>  // b.any
  40fd44:	ldr	x0, [sp, #40]
  40fd48:	str	xzr, [x0]
  40fd4c:	mov	w19, #0x0                   	// #0
  40fd50:	b	40fde4 <bus_image_acquire+0x518>
  40fd54:	add	x0, sp, #0x68
  40fd58:	mov	x1, x0
  40fd5c:	ldr	x0, [sp, #72]
  40fd60:	bl	404d20 <image_from_path@plt>
  40fd64:	str	w0, [sp, #100]
  40fd68:	ldr	w0, [sp, #100]
  40fd6c:	cmn	w0, #0x7c
  40fd70:	b.ne	40fd98 <bus_image_acquire+0x4cc>  // b.any
  40fd74:	ldr	x3, [sp, #72]
  40fd78:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40fd7c:	add	x2, x0, #0x238
  40fd80:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40fd84:	add	x1, x0, #0x2d0
  40fd88:	ldr	x0, [sp, #32]
  40fd8c:	bl	404910 <sd_bus_error_setf@plt>
  40fd90:	ldr	w19, [sp, #100]
  40fd94:	b	40fde4 <bus_image_acquire+0x518>
  40fd98:	ldr	w0, [sp, #100]
  40fd9c:	cmp	w0, #0x0
  40fda0:	b.ge	40fdac <bus_image_acquire+0x4e0>  // b.tcont
  40fda4:	ldr	w19, [sp, #100]
  40fda8:	b	40fde4 <bus_image_acquire+0x518>
  40fdac:	ldr	x0, [sp, #104]
  40fdb0:	mov	x1, x0
  40fdb4:	ldr	x0, [sp, #88]
  40fdb8:	bl	4105c8 <manager_image_cache_add>
  40fdbc:	str	w0, [sp, #100]
  40fdc0:	ldr	w0, [sp, #100]
  40fdc4:	cmp	w0, #0x0
  40fdc8:	b.ge	40fdd4 <bus_image_acquire+0x508>  // b.tcont
  40fdcc:	ldr	w19, [sp, #100]
  40fdd0:	b	40fde4 <bus_image_acquire+0x518>
  40fdd4:	ldr	x1, [sp, #104]
  40fdd8:	ldr	x0, [sp, #40]
  40fddc:	str	x1, [x0]
  40fde0:	mov	w19, #0x1                   	// #1
  40fde4:	add	x0, sp, #0x68
  40fde8:	bl	40dd74 <image_unrefp>
  40fdec:	mov	w1, w19
  40fdf0:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40fdf4:	add	x0, x0, #0x728
  40fdf8:	ldr	x2, [sp, #120]
  40fdfc:	ldr	x0, [x0]
  40fe00:	eor	x0, x2, x0
  40fe04:	cmp	x0, #0x0
  40fe08:	b.eq	40fe10 <bus_image_acquire+0x544>  // b.none
  40fe0c:	bl	404930 <__stack_chk_fail@plt>
  40fe10:	mov	w0, w1
  40fe14:	ldr	x19, [sp, #16]
  40fe18:	ldp	x29, x30, [sp], #128
  40fe1c:	ret

000000000040fe20 <bus_image_object_find>:
  40fe20:	stp	x29, x30, [sp, #-128]!
  40fe24:	mov	x29, sp
  40fe28:	str	x19, [sp, #16]
  40fe2c:	str	x0, [sp, #72]
  40fe30:	str	x1, [sp, #64]
  40fe34:	str	x2, [sp, #56]
  40fe38:	str	x3, [sp, #48]
  40fe3c:	str	x4, [sp, #40]
  40fe40:	str	x5, [sp, #32]
  40fe44:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  40fe48:	add	x0, x0, #0x728
  40fe4c:	ldr	x1, [x0]
  40fe50:	str	x1, [sp, #120]
  40fe54:	mov	x1, #0x0                   	// #0
  40fe58:	str	xzr, [sp, #96]
  40fe5c:	ldr	x0, [sp, #48]
  40fe60:	str	x0, [sp, #112]
  40fe64:	str	xzr, [sp, #104]
  40fe68:	ldr	x0, [sp, #72]
  40fe6c:	cmp	x0, #0x0
  40fe70:	cset	w0, eq  // eq = none
  40fe74:	and	w0, w0, #0xff
  40fe78:	and	x0, x0, #0xff
  40fe7c:	cmp	x0, #0x0
  40fe80:	b.eq	40feac <bus_image_object_find+0x8c>  // b.none
  40fe84:	adrp	x0, 413000 <_fini+0x1050>
  40fe88:	add	x1, x0, #0xd13
  40fe8c:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40fe90:	add	x4, x0, #0x8b8
  40fe94:	mov	w3, #0x2a4                 	// #676
  40fe98:	mov	x2, x1
  40fe9c:	adrp	x0, 413000 <_fini+0x1050>
  40fea0:	add	x1, x0, #0xd38
  40fea4:	mov	w0, #0x0                   	// #0
  40fea8:	bl	404670 <log_assert_failed_realm@plt>
  40feac:	ldr	x0, [sp, #64]
  40feb0:	cmp	x0, #0x0
  40feb4:	cset	w0, eq  // eq = none
  40feb8:	and	w0, w0, #0xff
  40febc:	and	x0, x0, #0xff
  40fec0:	cmp	x0, #0x0
  40fec4:	b.eq	40fef0 <bus_image_object_find+0xd0>  // b.none
  40fec8:	adrp	x0, 413000 <_fini+0x1050>
  40fecc:	add	x1, x0, #0xd13
  40fed0:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40fed4:	add	x4, x0, #0x8b8
  40fed8:	mov	w3, #0x2a5                 	// #677
  40fedc:	mov	x2, x1
  40fee0:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40fee4:	add	x1, x0, #0x2f8
  40fee8:	mov	w0, #0x0                   	// #0
  40feec:	bl	404670 <log_assert_failed_realm@plt>
  40fef0:	ldr	x0, [sp, #56]
  40fef4:	cmp	x0, #0x0
  40fef8:	cset	w0, eq  // eq = none
  40fefc:	and	w0, w0, #0xff
  40ff00:	and	x0, x0, #0xff
  40ff04:	cmp	x0, #0x0
  40ff08:	b.eq	40ff34 <bus_image_object_find+0x114>  // b.none
  40ff0c:	adrp	x0, 413000 <_fini+0x1050>
  40ff10:	add	x1, x0, #0xd13
  40ff14:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40ff18:	add	x4, x0, #0x8b8
  40ff1c:	mov	w3, #0x2a6                 	// #678
  40ff20:	mov	x2, x1
  40ff24:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40ff28:	add	x1, x0, #0x300
  40ff2c:	mov	w0, #0x0                   	// #0
  40ff30:	bl	404670 <log_assert_failed_realm@plt>
  40ff34:	ldr	x0, [sp, #40]
  40ff38:	cmp	x0, #0x0
  40ff3c:	cset	w0, eq  // eq = none
  40ff40:	and	w0, w0, #0xff
  40ff44:	and	x0, x0, #0xff
  40ff48:	cmp	x0, #0x0
  40ff4c:	b.eq	40ff78 <bus_image_object_find+0x158>  // b.none
  40ff50:	adrp	x0, 413000 <_fini+0x1050>
  40ff54:	add	x1, x0, #0xd13
  40ff58:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40ff5c:	add	x4, x0, #0x8b8
  40ff60:	mov	w3, #0x2a7                 	// #679
  40ff64:	mov	x2, x1
  40ff68:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40ff6c:	add	x1, x0, #0x310
  40ff70:	mov	w0, #0x0                   	// #0
  40ff74:	bl	404670 <log_assert_failed_realm@plt>
  40ff78:	add	x0, sp, #0x60
  40ff7c:	mov	x2, x0
  40ff80:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  40ff84:	add	x1, x0, #0xd0
  40ff88:	ldr	x0, [sp, #64]
  40ff8c:	bl	404b30 <sd_bus_path_decode@plt>
  40ff90:	str	w0, [sp, #92]
  40ff94:	ldr	w0, [sp, #92]
  40ff98:	cmp	w0, #0x0
  40ff9c:	b.ge	40ffa8 <bus_image_object_find+0x188>  // b.tcont
  40ffa0:	mov	w19, #0x0                   	// #0
  40ffa4:	b	41003c <bus_image_object_find+0x21c>
  40ffa8:	ldr	w0, [sp, #92]
  40ffac:	cmp	w0, #0x0
  40ffb0:	b.eq	410024 <bus_image_object_find+0x204>  // b.none
  40ffb4:	ldr	x0, [sp, #72]
  40ffb8:	bl	404900 <sd_bus_get_current_message@plt>
  40ffbc:	mov	x8, x0
  40ffc0:	ldr	x0, [sp, #96]
  40ffc4:	add	x1, sp, #0x68
  40ffc8:	ldr	x7, [sp, #32]
  40ffcc:	mov	x6, x1
  40ffd0:	mov	x5, #0x0                   	// #0
  40ffd4:	mov	w4, #0x0                   	// #0
  40ffd8:	mov	x3, #0x0                   	// #0
  40ffdc:	mov	x2, x0
  40ffe0:	mov	x1, x8
  40ffe4:	ldr	x0, [sp, #112]
  40ffe8:	bl	40f8cc <bus_image_acquire>
  40ffec:	str	w0, [sp, #92]
  40fff0:	ldr	w0, [sp, #92]
  40fff4:	cmn	w0, #0x2
  40fff8:	b.eq	41002c <bus_image_object_find+0x20c>  // b.none
  40fffc:	ldr	w0, [sp, #92]
  410000:	cmp	w0, #0x0
  410004:	b.ge	410010 <bus_image_object_find+0x1f0>  // b.tcont
  410008:	ldr	w19, [sp, #92]
  41000c:	b	41003c <bus_image_object_find+0x21c>
  410010:	ldr	x1, [sp, #104]
  410014:	ldr	x0, [sp, #40]
  410018:	str	x1, [x0]
  41001c:	mov	w19, #0x1                   	// #1
  410020:	b	41003c <bus_image_object_find+0x21c>
  410024:	nop
  410028:	b	410030 <bus_image_object_find+0x210>
  41002c:	nop
  410030:	ldr	x0, [sp, #40]
  410034:	str	xzr, [x0]
  410038:	mov	w19, #0x0                   	// #0
  41003c:	add	x0, sp, #0x60
  410040:	bl	40db30 <freep>
  410044:	mov	w1, w19
  410048:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  41004c:	add	x0, x0, #0x728
  410050:	ldr	x2, [sp, #120]
  410054:	ldr	x0, [x0]
  410058:	eor	x0, x2, x0
  41005c:	cmp	x0, #0x0
  410060:	b.eq	410068 <bus_image_object_find+0x248>  // b.none
  410064:	bl	404930 <__stack_chk_fail@plt>
  410068:	mov	w0, w1
  41006c:	ldr	x19, [sp, #16]
  410070:	ldp	x29, x30, [sp], #128
  410074:	ret

0000000000410078 <bus_image_node_enumerator>:
  410078:	stp	x29, x30, [sp, #-176]!
  41007c:	mov	x29, sp
  410080:	str	x19, [sp, #16]
  410084:	str	x0, [sp, #72]
  410088:	str	x1, [sp, #64]
  41008c:	str	x2, [sp, #56]
  410090:	str	x3, [sp, #48]
  410094:	str	x4, [sp, #40]
  410098:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  41009c:	add	x0, x0, #0x728
  4100a0:	ldr	x1, [x0]
  4100a4:	str	x1, [sp, #168]
  4100a8:	mov	x1, #0x0                   	// #0
  4100ac:	str	xzr, [sp, #88]
  4100b0:	str	xzr, [sp, #96]
  4100b4:	str	xzr, [sp, #104]
  4100b8:	str	xzr, [sp, #128]
  4100bc:	ldr	x0, [sp, #56]
  4100c0:	str	x0, [sp, #136]
  4100c4:	ldr	x0, [sp, #72]
  4100c8:	cmp	x0, #0x0
  4100cc:	cset	w0, eq  // eq = none
  4100d0:	and	w0, w0, #0xff
  4100d4:	and	x0, x0, #0xff
  4100d8:	cmp	x0, #0x0
  4100dc:	b.eq	410108 <bus_image_node_enumerator+0x90>  // b.none
  4100e0:	adrp	x0, 413000 <_fini+0x1050>
  4100e4:	add	x1, x0, #0xd13
  4100e8:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4100ec:	add	x4, x0, #0x8d0
  4100f0:	mov	w3, #0x2c6                 	// #710
  4100f4:	mov	x2, x1
  4100f8:	adrp	x0, 413000 <_fini+0x1050>
  4100fc:	add	x1, x0, #0xd38
  410100:	mov	w0, #0x0                   	// #0
  410104:	bl	404670 <log_assert_failed_realm@plt>
  410108:	ldr	x0, [sp, #64]
  41010c:	cmp	x0, #0x0
  410110:	cset	w0, eq  // eq = none
  410114:	and	w0, w0, #0xff
  410118:	and	x0, x0, #0xff
  41011c:	cmp	x0, #0x0
  410120:	b.eq	41014c <bus_image_node_enumerator+0xd4>  // b.none
  410124:	adrp	x0, 413000 <_fini+0x1050>
  410128:	add	x1, x0, #0xd13
  41012c:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410130:	add	x4, x0, #0x8d0
  410134:	mov	w3, #0x2c7                 	// #711
  410138:	mov	x2, x1
  41013c:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410140:	add	x1, x0, #0x2f8
  410144:	mov	w0, #0x0                   	// #0
  410148:	bl	404670 <log_assert_failed_realm@plt>
  41014c:	ldr	x0, [sp, #48]
  410150:	cmp	x0, #0x0
  410154:	cset	w0, eq  // eq = none
  410158:	and	w0, w0, #0xff
  41015c:	and	x0, x0, #0xff
  410160:	cmp	x0, #0x0
  410164:	b.eq	410190 <bus_image_node_enumerator+0x118>  // b.none
  410168:	adrp	x0, 413000 <_fini+0x1050>
  41016c:	add	x1, x0, #0xd13
  410170:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410174:	add	x4, x0, #0x8d0
  410178:	mov	w3, #0x2c8                 	// #712
  41017c:	mov	x2, x1
  410180:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410184:	add	x1, x0, #0x318
  410188:	mov	w0, #0x0                   	// #0
  41018c:	bl	404670 <log_assert_failed_realm@plt>
  410190:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  410194:	add	x0, x0, #0x770
  410198:	bl	404920 <internal_hashmap_new@plt>
  41019c:	str	x0, [sp, #88]
  4101a0:	ldr	x0, [sp, #88]
  4101a4:	cmp	x0, #0x0
  4101a8:	b.ne	4101b4 <bus_image_node_enumerator+0x13c>  // b.any
  4101ac:	mov	w19, #0xfffffff4            	// #-12
  4101b0:	b	4102b4 <bus_image_node_enumerator+0x23c>
  4101b4:	ldr	x0, [sp, #88]
  4101b8:	ldr	x2, [sp, #40]
  4101bc:	mov	x1, x0
  4101c0:	ldr	x0, [sp, #136]
  4101c4:	bl	4106ec <manager_image_cache_discover>
  4101c8:	str	w0, [sp, #84]
  4101cc:	ldr	w0, [sp, #84]
  4101d0:	cmp	w0, #0x0
  4101d4:	b.ge	4101e0 <bus_image_node_enumerator+0x168>  // b.tcont
  4101d8:	ldr	w19, [sp, #84]
  4101dc:	b	4102b4 <bus_image_node_enumerator+0x23c>
  4101e0:	mov	w0, #0xfffffffe            	// #-2
  4101e4:	str	w0, [sp, #152]
  4101e8:	str	xzr, [sp, #160]
  4101ec:	b	410278 <bus_image_node_enumerator+0x200>
  4101f0:	ldr	x0, [sp, #112]
  4101f4:	add	x1, sp, #0x78
  4101f8:	bl	40f7e8 <bus_image_path>
  4101fc:	str	w0, [sp, #84]
  410200:	ldr	w0, [sp, #84]
  410204:	cmp	w0, #0x0
  410208:	b.ge	410214 <bus_image_node_enumerator+0x19c>  // b.tcont
  41020c:	ldr	w19, [sp, #84]
  410210:	b	4102b4 <bus_image_node_enumerator+0x23c>
  410214:	ldr	x0, [sp, #128]
  410218:	add	x2, x0, #0x2
  41021c:	add	x1, sp, #0x68
  410220:	add	x0, sp, #0x60
  410224:	mov	x3, #0x8                   	// #8
  410228:	bl	4047b0 <greedy_realloc@plt>
  41022c:	cmp	x0, #0x0
  410230:	b.ne	410244 <bus_image_node_enumerator+0x1cc>  // b.any
  410234:	ldr	x0, [sp, #120]
  410238:	bl	404cc0 <free@plt>
  41023c:	mov	w19, #0xfffffff4            	// #-12
  410240:	b	4102b4 <bus_image_node_enumerator+0x23c>
  410244:	ldr	x1, [sp, #96]
  410248:	ldr	x0, [sp, #128]
  41024c:	add	x2, x0, #0x1
  410250:	str	x2, [sp, #128]
  410254:	lsl	x0, x0, #3
  410258:	add	x0, x1, x0
  41025c:	ldr	x1, [sp, #120]
  410260:	str	x1, [x0]
  410264:	ldr	x1, [sp, #96]
  410268:	ldr	x0, [sp, #128]
  41026c:	lsl	x0, x0, #3
  410270:	add	x0, x1, x0
  410274:	str	xzr, [x0]
  410278:	ldr	x0, [sp, #88]
  41027c:	add	x2, sp, #0x70
  410280:	add	x1, sp, #0x98
  410284:	mov	x3, #0x0                   	// #0
  410288:	bl	40dc08 <hashmap_iterate>
  41028c:	and	w0, w0, #0xff
  410290:	cmp	w0, #0x0
  410294:	b.ne	4101f0 <bus_image_node_enumerator+0x178>  // b.any
  410298:	ldr	x0, [sp, #96]
  41029c:	str	x0, [sp, #144]
  4102a0:	str	xzr, [sp, #96]
  4102a4:	ldr	x1, [sp, #144]
  4102a8:	ldr	x0, [sp, #48]
  4102ac:	str	x1, [x0]
  4102b0:	mov	w19, #0x1                   	// #1
  4102b4:	add	x0, sp, #0x60
  4102b8:	bl	40dd40 <strv_freep>
  4102bc:	add	x0, sp, #0x58
  4102c0:	bl	40dc40 <hashmap_freep>
  4102c4:	mov	w1, w19
  4102c8:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  4102cc:	add	x0, x0, #0x728
  4102d0:	ldr	x2, [sp, #168]
  4102d4:	ldr	x0, [x0]
  4102d8:	eor	x0, x2, x0
  4102dc:	cmp	x0, #0x0
  4102e0:	b.eq	4102e8 <bus_image_node_enumerator+0x270>  // b.none
  4102e4:	bl	404930 <__stack_chk_fail@plt>
  4102e8:	mov	w0, w1
  4102ec:	ldr	x19, [sp, #16]
  4102f0:	ldp	x29, x30, [sp], #176
  4102f4:	ret

00000000004102f8 <hashmap_get>:
  4102f8:	stp	x29, x30, [sp, #-32]!
  4102fc:	mov	x29, sp
  410300:	str	x0, [sp, #24]
  410304:	str	x1, [sp, #16]
  410308:	ldr	x1, [sp, #16]
  41030c:	ldr	x0, [sp, #24]
  410310:	bl	404800 <internal_hashmap_get@plt>
  410314:	ldp	x29, x30, [sp], #32
  410318:	ret

000000000041031c <hashmap_iterate>:
  41031c:	stp	x29, x30, [sp, #-48]!
  410320:	mov	x29, sp
  410324:	str	x0, [sp, #40]
  410328:	str	x1, [sp, #32]
  41032c:	str	x2, [sp, #24]
  410330:	str	x3, [sp, #16]
  410334:	ldr	x3, [sp, #16]
  410338:	ldr	x2, [sp, #24]
  41033c:	ldr	x1, [sp, #32]
  410340:	ldr	x0, [sp, #40]
  410344:	bl	404bf0 <internal_hashmap_iterate@plt>
  410348:	and	w0, w0, #0xff
  41034c:	ldp	x29, x30, [sp], #48
  410350:	ret

0000000000410354 <hashmap_clear>:
  410354:	stp	x29, x30, [sp, #-32]!
  410358:	mov	x29, sp
  41035c:	str	x0, [sp, #24]
  410360:	mov	x2, #0x0                   	// #0
  410364:	mov	x1, #0x0                   	// #0
  410368:	ldr	x0, [sp, #24]
  41036c:	bl	404b10 <internal_hashmap_clear@plt>
  410370:	nop
  410374:	ldp	x29, x30, [sp], #32
  410378:	ret

000000000041037c <manager_image_cache_get>:
  41037c:	stp	x29, x30, [sp, #-32]!
  410380:	mov	x29, sp
  410384:	str	x0, [sp, #24]
  410388:	str	x1, [sp, #16]
  41038c:	ldr	x0, [sp, #24]
  410390:	cmp	x0, #0x0
  410394:	cset	w0, eq  // eq = none
  410398:	and	w0, w0, #0xff
  41039c:	and	x0, x0, #0xff
  4103a0:	cmp	x0, #0x0
  4103a4:	b.eq	4103d0 <manager_image_cache_get+0x54>  // b.none
  4103a8:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4103ac:	add	x1, x0, #0x8f3
  4103b0:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4103b4:	add	x4, x0, #0x928
  4103b8:	mov	w3, #0x8                   	// #8
  4103bc:	mov	x2, x1
  4103c0:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4103c4:	add	x1, x0, #0x918
  4103c8:	mov	w0, #0x0                   	// #0
  4103cc:	bl	404670 <log_assert_failed_realm@plt>
  4103d0:	ldr	x0, [sp, #24]
  4103d4:	ldr	x0, [x0, #24]
  4103d8:	ldr	x1, [sp, #16]
  4103dc:	bl	4102f8 <hashmap_get>
  4103e0:	ldp	x29, x30, [sp], #32
  4103e4:	ret

00000000004103e8 <image_cache_flush>:
  4103e8:	stp	x29, x30, [sp, #-48]!
  4103ec:	mov	x29, sp
  4103f0:	str	x0, [sp, #24]
  4103f4:	str	x1, [sp, #16]
  4103f8:	ldr	x0, [sp, #16]
  4103fc:	str	x0, [sp, #40]
  410400:	ldr	x0, [sp, #24]
  410404:	cmp	x0, #0x0
  410408:	cset	w0, eq  // eq = none
  41040c:	and	w0, w0, #0xff
  410410:	and	x0, x0, #0xff
  410414:	cmp	x0, #0x0
  410418:	b.eq	410444 <image_cache_flush+0x5c>  // b.none
  41041c:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410420:	add	x1, x0, #0x8f3
  410424:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410428:	add	x4, x0, #0x940
  41042c:	mov	w3, #0x10                  	// #16
  410430:	mov	x2, x1
  410434:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410438:	add	x1, x0, #0x920
  41043c:	mov	w0, #0x0                   	// #0
  410440:	bl	404670 <log_assert_failed_realm@plt>
  410444:	ldr	x0, [sp, #40]
  410448:	cmp	x0, #0x0
  41044c:	cset	w0, eq  // eq = none
  410450:	and	w0, w0, #0xff
  410454:	and	x0, x0, #0xff
  410458:	cmp	x0, #0x0
  41045c:	b.eq	410488 <image_cache_flush+0xa0>  // b.none
  410460:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410464:	add	x1, x0, #0x8f3
  410468:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  41046c:	add	x4, x0, #0x940
  410470:	mov	w3, #0x11                  	// #17
  410474:	mov	x2, x1
  410478:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  41047c:	add	x1, x0, #0x918
  410480:	mov	w0, #0x0                   	// #0
  410484:	bl	404670 <log_assert_failed_realm@plt>
  410488:	ldr	x0, [sp, #40]
  41048c:	ldr	x0, [x0, #24]
  410490:	bl	410354 <hashmap_clear>
  410494:	mov	w0, #0x0                   	// #0
  410498:	ldp	x29, x30, [sp], #48
  41049c:	ret

00000000004104a0 <manager_image_cache_initialize>:
  4104a0:	stp	x29, x30, [sp, #-48]!
  4104a4:	mov	x29, sp
  4104a8:	str	x0, [sp, #24]
  4104ac:	ldr	x0, [sp, #24]
  4104b0:	cmp	x0, #0x0
  4104b4:	cset	w0, eq  // eq = none
  4104b8:	and	w0, w0, #0xff
  4104bc:	and	x0, x0, #0xff
  4104c0:	cmp	x0, #0x0
  4104c4:	b.eq	4104f0 <manager_image_cache_initialize+0x50>  // b.none
  4104c8:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4104cc:	add	x1, x0, #0x8f3
  4104d0:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4104d4:	add	x4, x0, #0x958
  4104d8:	mov	w3, #0x1a                  	// #26
  4104dc:	mov	x2, x1
  4104e0:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4104e4:	add	x1, x0, #0x918
  4104e8:	mov	w0, #0x0                   	// #0
  4104ec:	bl	404670 <log_assert_failed_realm@plt>
  4104f0:	ldr	x0, [sp, #24]
  4104f4:	add	x2, x0, #0x18
  4104f8:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  4104fc:	add	x1, x0, #0x770
  410500:	mov	x0, x2
  410504:	bl	404d10 <internal_hashmap_ensure_allocated@plt>
  410508:	str	w0, [sp, #44]
  41050c:	ldr	w0, [sp, #44]
  410510:	cmp	w0, #0x0
  410514:	b.ge	410520 <manager_image_cache_initialize+0x80>  // b.tcont
  410518:	ldr	w0, [sp, #44]
  41051c:	b	4105c0 <manager_image_cache_initialize+0x120>
  410520:	ldr	x0, [sp, #24]
  410524:	ldr	x0, [x0, #32]
  410528:	cmp	x0, #0x0
  41052c:	b.ne	410594 <manager_image_cache_initialize+0xf4>  // b.any
  410530:	ldr	x0, [sp, #24]
  410534:	ldr	x4, [x0]
  410538:	ldr	x0, [sp, #24]
  41053c:	add	x1, x0, #0x20
  410540:	ldr	x3, [sp, #24]
  410544:	adrp	x0, 410000 <bus_image_object_find+0x1e0>
  410548:	add	x2, x0, #0x3e8
  41054c:	mov	x0, x4
  410550:	bl	404860 <sd_event_add_defer@plt>
  410554:	str	w0, [sp, #44]
  410558:	ldr	w0, [sp, #44]
  41055c:	cmp	w0, #0x0
  410560:	b.ge	41056c <manager_image_cache_initialize+0xcc>  // b.tcont
  410564:	ldr	w0, [sp, #44]
  410568:	b	4105c0 <manager_image_cache_initialize+0x120>
  41056c:	ldr	x0, [sp, #24]
  410570:	ldr	x0, [x0, #32]
  410574:	mov	x1, #0x64                  	// #100
  410578:	bl	4048b0 <sd_event_source_set_priority@plt>
  41057c:	str	w0, [sp, #44]
  410580:	ldr	w0, [sp, #44]
  410584:	cmp	w0, #0x0
  410588:	b.ge	410594 <manager_image_cache_initialize+0xf4>  // b.tcont
  41058c:	ldr	w0, [sp, #44]
  410590:	b	4105c0 <manager_image_cache_initialize+0x120>
  410594:	ldr	x0, [sp, #24]
  410598:	ldr	x0, [x0, #32]
  41059c:	mov	w1, #0xffffffff            	// #-1
  4105a0:	bl	4046f0 <sd_event_source_set_enabled@plt>
  4105a4:	str	w0, [sp, #44]
  4105a8:	ldr	w0, [sp, #44]
  4105ac:	cmp	w0, #0x0
  4105b0:	b.ge	4105bc <manager_image_cache_initialize+0x11c>  // b.tcont
  4105b4:	ldr	w0, [sp, #44]
  4105b8:	b	4105c0 <manager_image_cache_initialize+0x120>
  4105bc:	mov	w0, #0x0                   	// #0
  4105c0:	ldp	x29, x30, [sp], #48
  4105c4:	ret

00000000004105c8 <manager_image_cache_add>:
  4105c8:	stp	x29, x30, [sp, #-48]!
  4105cc:	mov	x29, sp
  4105d0:	str	x0, [sp, #24]
  4105d4:	str	x1, [sp, #16]
  4105d8:	ldr	x0, [sp, #24]
  4105dc:	cmp	x0, #0x0
  4105e0:	cset	w0, eq  // eq = none
  4105e4:	and	w0, w0, #0xff
  4105e8:	and	x0, x0, #0xff
  4105ec:	cmp	x0, #0x0
  4105f0:	b.eq	41061c <manager_image_cache_add+0x54>  // b.none
  4105f4:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4105f8:	add	x1, x0, #0x8f3
  4105fc:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410600:	add	x4, x0, #0x978
  410604:	mov	w3, #0x35                  	// #53
  410608:	mov	x2, x1
  41060c:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410610:	add	x1, x0, #0x918
  410614:	mov	w0, #0x0                   	// #0
  410618:	bl	404670 <log_assert_failed_realm@plt>
  41061c:	ldr	x0, [sp, #24]
  410620:	bl	4104a0 <manager_image_cache_initialize>
  410624:	str	w0, [sp, #44]
  410628:	ldr	w0, [sp, #44]
  41062c:	cmp	w0, #0x0
  410630:	b.ge	41063c <manager_image_cache_add+0x74>  // b.tcont
  410634:	ldr	w0, [sp, #44]
  410638:	b	4106e4 <manager_image_cache_add+0x11c>
  41063c:	ldr	x0, [sp, #16]
  410640:	ldr	x1, [sp, #24]
  410644:	str	x1, [x0, #128]
  410648:	ldr	x0, [sp, #24]
  41064c:	ldr	x3, [x0, #24]
  410650:	ldr	x0, [sp, #16]
  410654:	ldr	x0, [x0, #16]
  410658:	ldr	x2, [sp, #16]
  41065c:	mov	x1, x0
  410660:	mov	x0, x3
  410664:	bl	404b20 <hashmap_put@plt>
  410668:	str	w0, [sp, #44]
  41066c:	ldr	w0, [sp, #44]
  410670:	cmp	w0, #0x0
  410674:	b.ge	410680 <manager_image_cache_add+0xb8>  // b.tcont
  410678:	ldr	w0, [sp, #44]
  41067c:	b	4106e4 <manager_image_cache_add+0x11c>
  410680:	ldr	x0, [sp, #16]
  410684:	bl	404730 <image_ref@plt>
  410688:	ldr	x0, [sp, #16]
  41068c:	ldrb	w0, [x0, #120]
  410690:	and	w0, w0, #0x2
  410694:	and	w0, w0, #0xff
  410698:	cmp	w0, #0x0
  41069c:	b.eq	4106e0 <manager_image_cache_add+0x118>  // b.none
  4106a0:	ldr	x0, [sp, #24]
  4106a4:	ldr	x3, [x0, #24]
  4106a8:	ldr	x0, [sp, #16]
  4106ac:	ldr	x0, [x0, #8]
  4106b0:	ldr	x2, [sp, #16]
  4106b4:	mov	x1, x0
  4106b8:	mov	x0, x3
  4106bc:	bl	404b20 <hashmap_put@plt>
  4106c0:	str	w0, [sp, #44]
  4106c4:	ldr	w0, [sp, #44]
  4106c8:	cmp	w0, #0x0
  4106cc:	b.ge	4106d8 <manager_image_cache_add+0x110>  // b.tcont
  4106d0:	ldr	w0, [sp, #44]
  4106d4:	b	4106e4 <manager_image_cache_add+0x11c>
  4106d8:	ldr	x0, [sp, #16]
  4106dc:	bl	404730 <image_ref@plt>
  4106e0:	mov	w0, #0x0                   	// #0
  4106e4:	ldp	x29, x30, [sp], #48
  4106e8:	ret

00000000004106ec <manager_image_cache_discover>:
  4106ec:	stp	x29, x30, [sp, #-96]!
  4106f0:	mov	x29, sp
  4106f4:	str	x0, [sp, #40]
  4106f8:	str	x1, [sp, #32]
  4106fc:	str	x2, [sp, #24]
  410700:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  410704:	add	x0, x0, #0x728
  410708:	ldr	x1, [x0]
  41070c:	str	x1, [sp, #88]
  410710:	mov	x1, #0x0                   	// #0
  410714:	ldr	x0, [sp, #40]
  410718:	cmp	x0, #0x0
  41071c:	cset	w0, eq  // eq = none
  410720:	and	w0, w0, #0xff
  410724:	and	x0, x0, #0xff
  410728:	cmp	x0, #0x0
  41072c:	b.eq	410758 <manager_image_cache_discover+0x6c>  // b.none
  410730:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410734:	add	x1, x0, #0x8f3
  410738:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  41073c:	add	x4, x0, #0x990
  410740:	mov	w3, #0x5b                  	// #91
  410744:	mov	x2, x1
  410748:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  41074c:	add	x1, x0, #0x918
  410750:	mov	w0, #0x0                   	// #0
  410754:	bl	404670 <log_assert_failed_realm@plt>
  410758:	ldr	x1, [sp, #32]
  41075c:	mov	w0, #0x1                   	// #1
  410760:	bl	404d90 <image_discover@plt>
  410764:	str	w0, [sp, #60]
  410768:	ldr	w0, [sp, #60]
  41076c:	cmp	w0, #0x0
  410770:	b.ge	41077c <manager_image_cache_discover+0x90>  // b.tcont
  410774:	ldr	w0, [sp, #60]
  410778:	b	4107c8 <manager_image_cache_discover+0xdc>
  41077c:	mov	w0, #0xfffffffe            	// #-2
  410780:	str	w0, [sp, #72]
  410784:	str	xzr, [sp, #80]
  410788:	b	41079c <manager_image_cache_discover+0xb0>
  41078c:	ldr	x0, [sp, #64]
  410790:	mov	x1, x0
  410794:	ldr	x0, [sp, #40]
  410798:	bl	4105c8 <manager_image_cache_add>
  41079c:	add	x1, sp, #0x40
  4107a0:	add	x0, sp, #0x48
  4107a4:	mov	x3, #0x0                   	// #0
  4107a8:	mov	x2, x1
  4107ac:	mov	x1, x0
  4107b0:	ldr	x0, [sp, #32]
  4107b4:	bl	41031c <hashmap_iterate>
  4107b8:	and	w0, w0, #0xff
  4107bc:	cmp	w0, #0x0
  4107c0:	b.ne	41078c <manager_image_cache_discover+0xa0>  // b.any
  4107c4:	mov	w0, #0x0                   	// #0
  4107c8:	mov	w1, w0
  4107cc:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  4107d0:	add	x0, x0, #0x728
  4107d4:	ldr	x2, [sp, #88]
  4107d8:	ldr	x0, [x0]
  4107dc:	eor	x0, x2, x0
  4107e0:	cmp	x0, #0x0
  4107e4:	b.eq	4107ec <manager_image_cache_discover+0x100>  // b.none
  4107e8:	bl	404930 <__stack_chk_fail@plt>
  4107ec:	mov	w0, w1
  4107f0:	ldp	x29, x30, [sp], #96
  4107f4:	ret

00000000004107f8 <mfree>:
  4107f8:	stp	x29, x30, [sp, #-32]!
  4107fc:	mov	x29, sp
  410800:	str	x0, [sp, #24]
  410804:	ldr	x0, [sp, #24]
  410808:	bl	404cc0 <free@plt>
  41080c:	mov	x0, #0x0                   	// #0
  410810:	ldp	x29, x30, [sp], #32
  410814:	ret

0000000000410818 <operation_done>:
  410818:	sub	sp, sp, #0xb0
  41081c:	stp	x29, x30, [sp, #16]
  410820:	add	x29, sp, #0x10
  410824:	stp	x19, x20, [sp, #32]
  410828:	str	x21, [sp, #48]
  41082c:	str	x0, [sp, #88]
  410830:	str	x1, [sp, #80]
  410834:	str	x2, [sp, #72]
  410838:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  41083c:	add	x0, x0, #0x728
  410840:	ldr	x1, [x0]
  410844:	str	x1, [sp, #168]
  410848:	mov	x1, #0x0                   	// #0
  41084c:	str	xzr, [sp, #144]
  410850:	str	xzr, [sp, #152]
  410854:	str	wzr, [sp, #160]
  410858:	ldr	x0, [sp, #72]
  41085c:	str	x0, [sp, #136]
  410860:	ldr	x0, [sp, #136]
  410864:	cmp	x0, #0x0
  410868:	cset	w0, eq  // eq = none
  41086c:	and	w0, w0, #0xff
  410870:	and	x0, x0, #0xff
  410874:	cmp	x0, #0x0
  410878:	b.eq	4108a4 <operation_done+0x8c>  // b.none
  41087c:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410880:	add	x1, x0, #0x9b3
  410884:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410888:	add	x4, x0, #0xaf8
  41088c:	mov	w3, #0xd                   	// #13
  410890:	mov	x2, x1
  410894:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410898:	add	x1, x0, #0x9d8
  41089c:	mov	w0, #0x0                   	// #0
  4108a0:	bl	404670 <log_assert_failed_realm@plt>
  4108a4:	ldr	x0, [sp, #80]
  4108a8:	cmp	x0, #0x0
  4108ac:	cset	w0, eq  // eq = none
  4108b0:	and	w0, w0, #0xff
  4108b4:	and	x0, x0, #0xff
  4108b8:	cmp	x0, #0x0
  4108bc:	b.eq	4108e8 <operation_done+0xd0>  // b.none
  4108c0:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4108c4:	add	x1, x0, #0x9b3
  4108c8:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4108cc:	add	x4, x0, #0xaf8
  4108d0:	mov	w3, #0xe                   	// #14
  4108d4:	mov	x2, x1
  4108d8:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4108dc:	add	x1, x0, #0x9e0
  4108e0:	mov	w0, #0x0                   	// #0
  4108e4:	bl	404670 <log_assert_failed_realm@plt>
  4108e8:	mov	w0, #0x7                   	// #7
  4108ec:	str	w0, [sp, #100]
  4108f0:	str	wzr, [sp, #104]
  4108f4:	str	wzr, [sp, #108]
  4108f8:	ldr	w0, [sp, #108]
  4108fc:	bl	404e50 <log_get_max_level_realm@plt>
  410900:	mov	w1, w0
  410904:	ldr	w0, [sp, #100]
  410908:	and	w0, w0, #0x7
  41090c:	cmp	w1, w0
  410910:	b.lt	410980 <operation_done+0x168>  // b.tstop
  410914:	ldr	w0, [sp, #108]
  410918:	lsl	w1, w0, #10
  41091c:	ldr	w0, [sp, #100]
  410920:	orr	w19, w1, w0
  410924:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410928:	add	x20, x0, #0x9b3
  41092c:	ldr	x0, [sp, #136]
  410930:	ldr	w21, [x0, #8]
  410934:	ldr	x0, [sp, #80]
  410938:	ldr	w0, [x0, #8]
  41093c:	bl	404b50 <sigchld_code_to_string@plt>
  410940:	mov	x1, x0
  410944:	ldr	x0, [sp, #80]
  410948:	ldr	w0, [x0, #24]
  41094c:	str	w0, [sp]
  410950:	mov	x7, x1
  410954:	mov	w6, w21
  410958:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  41095c:	add	x5, x0, #0x9e8
  410960:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410964:	add	x4, x0, #0xb08
  410968:	mov	w3, #0x10                  	// #16
  41096c:	mov	x2, x20
  410970:	ldr	w1, [sp, #104]
  410974:	mov	w0, w19
  410978:	bl	404a80 <log_internal_realm@plt>
  41097c:	b	410988 <operation_done+0x170>
  410980:	ldr	w0, [sp, #104]
  410984:	cmp	w0, #0x0
  410988:	ldr	x0, [sp, #136]
  41098c:	str	wzr, [x0, #8]
  410990:	ldr	x0, [sp, #80]
  410994:	ldr	w0, [x0, #8]
  410998:	cmp	w0, #0x1
  41099c:	b.eq	4109c4 <operation_done+0x1ac>  // b.none
  4109a0:	add	x3, sp, #0x90
  4109a4:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4109a8:	add	x2, x0, #0xa20
  4109ac:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4109b0:	add	x1, x0, #0xa38
  4109b4:	mov	x0, x3
  4109b8:	bl	404910 <sd_bus_error_setf@plt>
  4109bc:	str	w0, [sp, #96]
  4109c0:	b	410b44 <operation_done+0x32c>
  4109c4:	ldr	x0, [sp, #80]
  4109c8:	ldr	w0, [x0, #24]
  4109cc:	cmp	w0, #0x0
  4109d0:	b.ne	4109dc <operation_done+0x1c4>  // b.any
  4109d4:	str	wzr, [sp, #96]
  4109d8:	b	410a1c <operation_done+0x204>
  4109dc:	ldr	x0, [sp, #136]
  4109e0:	ldr	w0, [x0, #24]
  4109e4:	add	x1, sp, #0x60
  4109e8:	mov	x2, #0x4                   	// #4
  4109ec:	bl	404870 <read@plt>
  4109f0:	cmp	x0, #0x4
  4109f4:	b.eq	410a1c <operation_done+0x204>  // b.none
  4109f8:	add	x3, sp, #0x90
  4109fc:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410a00:	add	x2, x0, #0xa60
  410a04:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410a08:	add	x1, x0, #0xa38
  410a0c:	mov	x0, x3
  410a10:	bl	404910 <sd_bus_error_setf@plt>
  410a14:	str	w0, [sp, #96]
  410a18:	b	410b44 <operation_done+0x32c>
  410a1c:	ldr	x0, [sp, #136]
  410a20:	ldr	x0, [x0, #40]
  410a24:	cmp	x0, #0x0
  410a28:	b.eq	410a7c <operation_done+0x264>  // b.none
  410a2c:	ldr	x0, [sp, #136]
  410a30:	ldr	x3, [x0, #40]
  410a34:	ldr	w0, [sp, #96]
  410a38:	add	x1, sp, #0x90
  410a3c:	mov	x2, x1
  410a40:	mov	w1, w0
  410a44:	ldr	x0, [sp, #136]
  410a48:	blr	x3
  410a4c:	str	w0, [sp, #96]
  410a50:	ldr	w0, [sp, #96]
  410a54:	cmp	w0, #0x0
  410a58:	b.ge	410b30 <operation_done+0x318>  // b.tcont
  410a5c:	add	x0, sp, #0x90
  410a60:	bl	4042f0 <sd_bus_error_is_set@plt>
  410a64:	cmp	w0, #0x0
  410a68:	b.ne	410b40 <operation_done+0x328>  // b.any
  410a6c:	ldr	w1, [sp, #96]
  410a70:	add	x0, sp, #0x90
  410a74:	bl	404dd0 <sd_bus_error_set_errno@plt>
  410a78:	b	410b40 <operation_done+0x328>
  410a7c:	ldr	w0, [sp, #96]
  410a80:	cmp	w0, #0x0
  410a84:	b.ge	410a98 <operation_done+0x280>  // b.tcont
  410a88:	ldr	w1, [sp, #96]
  410a8c:	add	x0, sp, #0x90
  410a90:	bl	404dd0 <sd_bus_error_set_errno@plt>
  410a94:	b	410b44 <operation_done+0x32c>
  410a98:	ldr	x0, [sp, #136]
  410a9c:	ldr	x0, [x0, #16]
  410aa0:	mov	x1, #0x0                   	// #0
  410aa4:	bl	404340 <sd_bus_reply_method_return@plt>
  410aa8:	str	w0, [sp, #96]
  410aac:	ldr	w0, [sp, #96]
  410ab0:	cmp	w0, #0x0
  410ab4:	b.ge	410b30 <operation_done+0x318>  // b.tcont
  410ab8:	mov	w0, #0x3                   	// #3
  410abc:	str	w0, [sp, #112]
  410ac0:	ldr	w0, [sp, #96]
  410ac4:	str	w0, [sp, #116]
  410ac8:	str	wzr, [sp, #120]
  410acc:	ldr	w0, [sp, #120]
  410ad0:	bl	404e50 <log_get_max_level_realm@plt>
  410ad4:	mov	w1, w0
  410ad8:	ldr	w0, [sp, #112]
  410adc:	and	w0, w0, #0x7
  410ae0:	cmp	w1, w0
  410ae4:	b.lt	410b28 <operation_done+0x310>  // b.tstop
  410ae8:	ldr	w0, [sp, #120]
  410aec:	lsl	w1, w0, #10
  410af0:	ldr	w0, [sp, #112]
  410af4:	orr	w6, w1, w0
  410af8:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410afc:	add	x1, x0, #0x9b3
  410b00:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410b04:	add	x5, x0, #0xa70
  410b08:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410b0c:	add	x4, x0, #0xb08
  410b10:	mov	w3, #0x36                  	// #54
  410b14:	mov	x2, x1
  410b18:	ldr	w1, [sp, #116]
  410b1c:	mov	w0, w6
  410b20:	bl	404a80 <log_internal_realm@plt>
  410b24:	b	410b30 <operation_done+0x318>
  410b28:	ldr	w0, [sp, #116]
  410b2c:	cmp	w0, #0x0
  410b30:	ldr	x0, [sp, #136]
  410b34:	bl	410f54 <operation_free>
  410b38:	mov	w19, #0x0                   	// #0
  410b3c:	b	410be8 <operation_done+0x3d0>
  410b40:	nop
  410b44:	ldr	x0, [sp, #136]
  410b48:	ldr	x0, [x0, #16]
  410b4c:	add	x1, sp, #0x90
  410b50:	bl	404b70 <sd_bus_reply_method_error@plt>
  410b54:	str	w0, [sp, #96]
  410b58:	ldr	w0, [sp, #96]
  410b5c:	cmp	w0, #0x0
  410b60:	b.ge	410bdc <operation_done+0x3c4>  // b.tcont
  410b64:	mov	w0, #0x3                   	// #3
  410b68:	str	w0, [sp, #124]
  410b6c:	ldr	w0, [sp, #96]
  410b70:	str	w0, [sp, #128]
  410b74:	str	wzr, [sp, #132]
  410b78:	ldr	w0, [sp, #132]
  410b7c:	bl	404e50 <log_get_max_level_realm@plt>
  410b80:	mov	w1, w0
  410b84:	ldr	w0, [sp, #124]
  410b88:	and	w0, w0, #0x7
  410b8c:	cmp	w1, w0
  410b90:	b.lt	410bd4 <operation_done+0x3bc>  // b.tstop
  410b94:	ldr	w0, [sp, #132]
  410b98:	lsl	w1, w0, #10
  410b9c:	ldr	w0, [sp, #124]
  410ba0:	orr	w6, w1, w0
  410ba4:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410ba8:	add	x1, x0, #0x9b3
  410bac:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410bb0:	add	x5, x0, #0xa70
  410bb4:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410bb8:	add	x4, x0, #0xb08
  410bbc:	mov	w3, #0x3f                  	// #63
  410bc0:	mov	x2, x1
  410bc4:	ldr	w1, [sp, #128]
  410bc8:	mov	w0, w6
  410bcc:	bl	404a80 <log_internal_realm@plt>
  410bd0:	b	410bdc <operation_done+0x3c4>
  410bd4:	ldr	w0, [sp, #128]
  410bd8:	cmp	w0, #0x0
  410bdc:	ldr	x0, [sp, #136]
  410be0:	bl	410f54 <operation_free>
  410be4:	mov	w19, #0x0                   	// #0
  410be8:	add	x0, sp, #0x90
  410bec:	bl	404a00 <sd_bus_error_free@plt>
  410bf0:	mov	w1, w19
  410bf4:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  410bf8:	add	x0, x0, #0x728
  410bfc:	ldr	x2, [sp, #168]
  410c00:	ldr	x0, [x0]
  410c04:	eor	x0, x2, x0
  410c08:	cmp	x0, #0x0
  410c0c:	b.eq	410c14 <operation_done+0x3fc>  // b.none
  410c10:	bl	404930 <__stack_chk_fail@plt>
  410c14:	mov	w0, w1
  410c18:	ldp	x19, x20, [sp, #32]
  410c1c:	ldr	x21, [sp, #48]
  410c20:	ldp	x29, x30, [sp, #16]
  410c24:	add	sp, sp, #0xb0
  410c28:	ret

0000000000410c2c <operation_new>:
  410c2c:	stp	x29, x30, [sp, #-96]!
  410c30:	mov	x29, sp
  410c34:	str	x0, [sp, #40]
  410c38:	str	w1, [sp, #36]
  410c3c:	str	x2, [sp, #24]
  410c40:	str	w3, [sp, #32]
  410c44:	str	x4, [sp, #16]
  410c48:	ldr	x0, [sp, #40]
  410c4c:	cmp	x0, #0x0
  410c50:	cset	w0, eq  // eq = none
  410c54:	and	w0, w0, #0xff
  410c58:	and	x0, x0, #0xff
  410c5c:	cmp	x0, #0x0
  410c60:	b.eq	410c8c <operation_new+0x60>  // b.none
  410c64:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410c68:	add	x1, x0, #0x9b3
  410c6c:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410c70:	add	x4, x0, #0xb18
  410c74:	mov	w3, #0x49                  	// #73
  410c78:	mov	x2, x1
  410c7c:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410c80:	add	x1, x0, #0xa90
  410c84:	mov	w0, #0x0                   	// #0
  410c88:	bl	404670 <log_assert_failed_realm@plt>
  410c8c:	ldr	w0, [sp, #36]
  410c90:	cmp	w0, #0x1
  410c94:	cset	w0, le
  410c98:	and	w0, w0, #0xff
  410c9c:	and	x0, x0, #0xff
  410ca0:	cmp	x0, #0x0
  410ca4:	b.eq	410cd0 <operation_new+0xa4>  // b.none
  410ca8:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410cac:	add	x1, x0, #0x9b3
  410cb0:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410cb4:	add	x4, x0, #0xb18
  410cb8:	mov	w3, #0x4a                  	// #74
  410cbc:	mov	x2, x1
  410cc0:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410cc4:	add	x1, x0, #0xa98
  410cc8:	mov	w0, #0x0                   	// #0
  410ccc:	bl	404670 <log_assert_failed_realm@plt>
  410cd0:	ldr	x0, [sp, #24]
  410cd4:	cmp	x0, #0x0
  410cd8:	cset	w0, eq  // eq = none
  410cdc:	and	w0, w0, #0xff
  410ce0:	and	x0, x0, #0xff
  410ce4:	cmp	x0, #0x0
  410ce8:	b.eq	410d14 <operation_new+0xe8>  // b.none
  410cec:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410cf0:	add	x1, x0, #0x9b3
  410cf4:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410cf8:	add	x4, x0, #0xb18
  410cfc:	mov	w3, #0x4b                  	// #75
  410d00:	mov	x2, x1
  410d04:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410d08:	add	x1, x0, #0xaa8
  410d0c:	mov	w0, #0x0                   	// #0
  410d10:	bl	404670 <log_assert_failed_realm@plt>
  410d14:	ldr	w0, [sp, #32]
  410d18:	lsr	w0, w0, #31
  410d1c:	and	w0, w0, #0xff
  410d20:	and	x0, x0, #0xff
  410d24:	cmp	x0, #0x0
  410d28:	b.eq	410d54 <operation_new+0x128>  // b.none
  410d2c:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410d30:	add	x1, x0, #0x9b3
  410d34:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410d38:	add	x4, x0, #0xb18
  410d3c:	mov	w3, #0x4c                  	// #76
  410d40:	mov	x2, x1
  410d44:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410d48:	add	x1, x0, #0xab0
  410d4c:	mov	w0, #0x0                   	// #0
  410d50:	bl	404670 <log_assert_failed_realm@plt>
  410d54:	mov	x1, #0x40                  	// #64
  410d58:	mov	x0, #0x1                   	// #1
  410d5c:	bl	404c10 <calloc@plt>
  410d60:	str	x0, [sp, #72]
  410d64:	ldr	x0, [sp, #72]
  410d68:	cmp	x0, #0x0
  410d6c:	b.ne	410d78 <operation_new+0x14c>  // b.any
  410d70:	mov	w0, #0xfffffff4            	// #-12
  410d74:	b	410f4c <operation_new+0x320>
  410d78:	ldr	x0, [sp, #72]
  410d7c:	mov	w1, #0xffffffff            	// #-1
  410d80:	str	w1, [x0, #28]
  410d84:	ldr	x0, [sp, #40]
  410d88:	ldr	x6, [x0]
  410d8c:	ldr	x0, [sp, #72]
  410d90:	add	x1, x0, #0x20
  410d94:	ldr	x5, [sp, #72]
  410d98:	adrp	x0, 410000 <bus_image_object_find+0x1e0>
  410d9c:	add	x4, x0, #0x818
  410da0:	mov	w3, #0x4                   	// #4
  410da4:	ldr	w2, [sp, #36]
  410da8:	mov	x0, x6
  410dac:	bl	404390 <sd_event_add_child@plt>
  410db0:	str	w0, [sp, #56]
  410db4:	ldr	w0, [sp, #56]
  410db8:	cmp	w0, #0x0
  410dbc:	b.ge	410dd0 <operation_new+0x1a4>  // b.tcont
  410dc0:	ldr	x0, [sp, #72]
  410dc4:	bl	404cc0 <free@plt>
  410dc8:	ldr	w0, [sp, #56]
  410dcc:	b	410f4c <operation_new+0x320>
  410dd0:	ldr	x0, [sp, #72]
  410dd4:	ldr	w1, [sp, #36]
  410dd8:	str	w1, [x0, #8]
  410ddc:	ldr	x0, [sp, #24]
  410de0:	bl	404e10 <sd_bus_message_ref@plt>
  410de4:	mov	x1, x0
  410de8:	ldr	x0, [sp, #72]
  410dec:	str	x1, [x0, #16]
  410df0:	ldr	x0, [sp, #72]
  410df4:	ldr	w1, [sp, #32]
  410df8:	str	w1, [x0, #24]
  410dfc:	ldr	x0, [sp, #40]
  410e00:	add	x0, x0, #0x28
  410e04:	str	x0, [sp, #80]
  410e08:	ldr	x0, [sp, #72]
  410e0c:	str	x0, [sp, #88]
  410e10:	ldr	x0, [sp, #88]
  410e14:	cmp	x0, #0x0
  410e18:	cset	w0, eq  // eq = none
  410e1c:	and	w0, w0, #0xff
  410e20:	and	x0, x0, #0xff
  410e24:	cmp	x0, #0x0
  410e28:	b.eq	410e54 <operation_new+0x228>  // b.none
  410e2c:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410e30:	add	x1, x0, #0x9b3
  410e34:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410e38:	add	x4, x0, #0xb18
  410e3c:	mov	w3, #0x5e                  	// #94
  410e40:	mov	x2, x1
  410e44:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410e48:	add	x1, x0, #0xac0
  410e4c:	mov	w0, #0x0                   	// #0
  410e50:	bl	404670 <log_assert_failed_realm@plt>
  410e54:	ldr	x0, [sp, #80]
  410e58:	ldr	x1, [x0]
  410e5c:	ldr	x0, [sp, #88]
  410e60:	str	x1, [x0, #48]
  410e64:	ldr	x0, [sp, #88]
  410e68:	ldr	x0, [x0, #48]
  410e6c:	cmp	x0, #0x0
  410e70:	b.eq	410e84 <operation_new+0x258>  // b.none
  410e74:	ldr	x0, [sp, #88]
  410e78:	ldr	x0, [x0, #48]
  410e7c:	ldr	x1, [sp, #88]
  410e80:	str	x1, [x0, #56]
  410e84:	ldr	x0, [sp, #88]
  410e88:	str	xzr, [x0, #56]
  410e8c:	ldr	x0, [sp, #80]
  410e90:	ldr	x1, [sp, #88]
  410e94:	str	x1, [x0]
  410e98:	ldr	x0, [sp, #40]
  410e9c:	ldr	w0, [x0, #48]
  410ea0:	add	w1, w0, #0x1
  410ea4:	ldr	x0, [sp, #40]
  410ea8:	str	w1, [x0, #48]
  410eac:	ldr	x0, [sp, #72]
  410eb0:	ldr	x1, [sp, #40]
  410eb4:	str	x1, [x0]
  410eb8:	mov	w0, #0x7                   	// #7
  410ebc:	str	w0, [sp, #60]
  410ec0:	str	wzr, [sp, #64]
  410ec4:	str	wzr, [sp, #68]
  410ec8:	ldr	w0, [sp, #68]
  410ecc:	bl	404e50 <log_get_max_level_realm@plt>
  410ed0:	mov	w1, w0
  410ed4:	ldr	w0, [sp, #60]
  410ed8:	and	w0, w0, #0x7
  410edc:	cmp	w1, w0
  410ee0:	b.lt	410f28 <operation_new+0x2fc>  // b.tstop
  410ee4:	ldr	w0, [sp, #68]
  410ee8:	lsl	w1, w0, #10
  410eec:	ldr	w0, [sp, #60]
  410ef0:	orr	w7, w1, w0
  410ef4:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410ef8:	add	x1, x0, #0x9b3
  410efc:	ldr	w6, [sp, #36]
  410f00:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410f04:	add	x5, x0, #0xac8
  410f08:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  410f0c:	add	x4, x0, #0xb28
  410f10:	mov	w3, #0x62                  	// #98
  410f14:	mov	x2, x1
  410f18:	ldr	w1, [sp, #64]
  410f1c:	mov	w0, w7
  410f20:	bl	404a80 <log_internal_realm@plt>
  410f24:	b	410f30 <operation_new+0x304>
  410f28:	ldr	w0, [sp, #64]
  410f2c:	cmp	w0, #0x0
  410f30:	ldr	x0, [sp, #16]
  410f34:	cmp	x0, #0x0
  410f38:	b.eq	410f48 <operation_new+0x31c>  // b.none
  410f3c:	ldr	x0, [sp, #16]
  410f40:	ldr	x1, [sp, #72]
  410f44:	str	x1, [x0]
  410f48:	mov	w0, #0x0                   	// #0
  410f4c:	ldp	x29, x30, [sp], #96
  410f50:	ret

0000000000410f54 <operation_free>:
  410f54:	stp	x29, x30, [sp, #-48]!
  410f58:	mov	x29, sp
  410f5c:	str	x0, [sp, #24]
  410f60:	ldr	x0, [sp, #24]
  410f64:	cmp	x0, #0x0
  410f68:	b.ne	410f74 <operation_free+0x20>  // b.any
  410f6c:	mov	x0, #0x0                   	// #0
  410f70:	b	411108 <operation_free+0x1b4>
  410f74:	ldr	x0, [sp, #24]
  410f78:	ldr	x0, [x0, #32]
  410f7c:	bl	404580 <sd_event_source_unref@plt>
  410f80:	ldr	x0, [sp, #24]
  410f84:	ldr	w0, [x0, #24]
  410f88:	bl	4045e0 <safe_close@plt>
  410f8c:	ldr	x0, [sp, #24]
  410f90:	ldr	w0, [x0, #28]
  410f94:	bl	4045e0 <safe_close@plt>
  410f98:	ldr	x0, [sp, #24]
  410f9c:	ldr	w0, [x0, #8]
  410fa0:	cmp	w0, #0x1
  410fa4:	b.le	410fb4 <operation_free+0x60>
  410fa8:	ldr	x0, [sp, #24]
  410fac:	ldr	w0, [x0, #8]
  410fb0:	bl	404650 <sigkill_wait@plt>
  410fb4:	ldr	x0, [sp, #24]
  410fb8:	ldr	x0, [x0, #16]
  410fbc:	bl	4043e0 <sd_bus_message_unref@plt>
  410fc0:	ldr	x0, [sp, #24]
  410fc4:	ldr	x0, [x0]
  410fc8:	cmp	x0, #0x0
  410fcc:	b.eq	411100 <operation_free+0x1ac>  // b.none
  410fd0:	ldr	x0, [sp, #24]
  410fd4:	ldr	x0, [x0]
  410fd8:	add	x0, x0, #0x28
  410fdc:	str	x0, [sp, #32]
  410fe0:	ldr	x0, [sp, #24]
  410fe4:	str	x0, [sp, #40]
  410fe8:	ldr	x0, [sp, #40]
  410fec:	cmp	x0, #0x0
  410ff0:	cset	w0, eq  // eq = none
  410ff4:	and	w0, w0, #0xff
  410ff8:	and	x0, x0, #0xff
  410ffc:	cmp	x0, #0x0
  411000:	b.eq	41102c <operation_free+0xd8>  // b.none
  411004:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411008:	add	x1, x0, #0x9b3
  41100c:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411010:	add	x4, x0, #0xb38
  411014:	mov	w3, #0x7b                  	// #123
  411018:	mov	x2, x1
  41101c:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411020:	add	x1, x0, #0xac0
  411024:	mov	w0, #0x0                   	// #0
  411028:	bl	404670 <log_assert_failed_realm@plt>
  41102c:	ldr	x0, [sp, #40]
  411030:	ldr	x0, [x0, #48]
  411034:	cmp	x0, #0x0
  411038:	b.eq	411050 <operation_free+0xfc>  // b.none
  41103c:	ldr	x0, [sp, #40]
  411040:	ldr	x0, [x0, #48]
  411044:	ldr	x1, [sp, #40]
  411048:	ldr	x1, [x1, #56]
  41104c:	str	x1, [x0, #56]
  411050:	ldr	x0, [sp, #40]
  411054:	ldr	x0, [x0, #56]
  411058:	cmp	x0, #0x0
  41105c:	b.eq	411078 <operation_free+0x124>  // b.none
  411060:	ldr	x0, [sp, #40]
  411064:	ldr	x0, [x0, #56]
  411068:	ldr	x1, [sp, #40]
  41106c:	ldr	x1, [x1, #48]
  411070:	str	x1, [x0, #48]
  411074:	b	4110d4 <operation_free+0x180>
  411078:	ldr	x0, [sp, #32]
  41107c:	ldr	x0, [x0]
  411080:	ldr	x1, [sp, #40]
  411084:	cmp	x1, x0
  411088:	cset	w0, ne  // ne = any
  41108c:	and	w0, w0, #0xff
  411090:	and	x0, x0, #0xff
  411094:	cmp	x0, #0x0
  411098:	b.eq	4110c4 <operation_free+0x170>  // b.none
  41109c:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4110a0:	add	x1, x0, #0x9b3
  4110a4:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4110a8:	add	x4, x0, #0xb38
  4110ac:	mov	w3, #0x7b                  	// #123
  4110b0:	mov	x2, x1
  4110b4:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4110b8:	add	x1, x0, #0xae8
  4110bc:	mov	w0, #0x0                   	// #0
  4110c0:	bl	404670 <log_assert_failed_realm@plt>
  4110c4:	ldr	x0, [sp, #40]
  4110c8:	ldr	x1, [x0, #48]
  4110cc:	ldr	x0, [sp, #32]
  4110d0:	str	x1, [x0]
  4110d4:	ldr	x0, [sp, #40]
  4110d8:	str	xzr, [x0, #56]
  4110dc:	ldr	x0, [sp, #40]
  4110e0:	ldr	x1, [x0, #56]
  4110e4:	ldr	x0, [sp, #40]
  4110e8:	str	x1, [x0, #48]
  4110ec:	ldr	x0, [sp, #24]
  4110f0:	ldr	x0, [x0]
  4110f4:	ldr	w1, [x0, #48]
  4110f8:	sub	w1, w1, #0x1
  4110fc:	str	w1, [x0, #48]
  411100:	ldr	x0, [sp, #24]
  411104:	bl	4107f8 <mfree>
  411108:	ldp	x29, x30, [sp], #48
  41110c:	ret

0000000000411110 <ALIGN_TO>:
  411110:	sub	sp, sp, #0x10
  411114:	str	x0, [sp, #8]
  411118:	str	x1, [sp]
  41111c:	ldr	x1, [sp, #8]
  411120:	ldr	x0, [sp]
  411124:	add	x0, x1, x0
  411128:	sub	x1, x0, #0x1
  41112c:	ldr	x0, [sp]
  411130:	neg	x0, x0
  411134:	and	x0, x1, x0
  411138:	add	sp, sp, #0x10
  41113c:	ret

0000000000411140 <mfree>:
  411140:	stp	x29, x30, [sp, #-32]!
  411144:	mov	x29, sp
  411148:	str	x0, [sp, #24]
  41114c:	ldr	x0, [sp, #24]
  411150:	bl	404cc0 <free@plt>
  411154:	mov	x0, #0x0                   	// #0
  411158:	ldp	x29, x30, [sp], #32
  41115c:	ret

0000000000411160 <save_argc_argv>:
  411160:	sub	sp, sp, #0x10
  411164:	str	w0, [sp, #12]
  411168:	str	x1, [sp]
  41116c:	adrp	x0, 428000 <saved_argv@@SD_SHARED>
  411170:	add	x0, x0, #0x8
  411174:	ldr	w1, [sp, #12]
  411178:	str	w1, [x0]
  41117c:	adrp	x0, 428000 <saved_argv@@SD_SHARED>
  411180:	add	x0, x0, #0x0
  411184:	ldr	x1, [sp]
  411188:	str	x1, [x0]
  41118c:	nop
  411190:	add	sp, sp, #0x10
  411194:	ret

0000000000411198 <hashmap_free>:
  411198:	stp	x29, x30, [sp, #-32]!
  41119c:	mov	x29, sp
  4111a0:	str	x0, [sp, #24]
  4111a4:	mov	x2, #0x0                   	// #0
  4111a8:	mov	x1, #0x0                   	// #0
  4111ac:	ldr	x0, [sp, #24]
  4111b0:	bl	404320 <internal_hashmap_free@plt>
  4111b4:	ldp	x29, x30, [sp], #32
  4111b8:	ret

00000000004111bc <static_destruct>:
  4111bc:	stp	x29, x30, [sp, #-32]!
  4111c0:	mov	x29, sp
  4111c4:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4111c8:	add	x0, x0, #0xe78
  4111cc:	ldr	x0, [x0]
  4111d0:	cmp	x0, #0x0
  4111d4:	b.eq	411238 <static_destruct+0x7c>  // b.none
  4111d8:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4111dc:	add	x0, x0, #0xe78
  4111e0:	ldr	x0, [x0]
  4111e4:	mov	x1, #0x8                   	// #8
  4111e8:	bl	411110 <ALIGN_TO>
  4111ec:	str	x0, [sp, #24]
  4111f0:	b	41121c <static_destruct+0x60>
  4111f4:	ldr	x0, [sp, #24]
  4111f8:	ldr	x1, [x0, #8]
  4111fc:	ldr	x0, [sp, #24]
  411200:	ldr	x0, [x0]
  411204:	blr	x1
  411208:	ldr	x0, [sp, #24]
  41120c:	add	x0, x0, #0x10
  411210:	mov	x1, #0x8                   	// #8
  411214:	bl	411110 <ALIGN_TO>
  411218:	str	x0, [sp, #24]
  41121c:	ldr	x1, [sp, #24]
  411220:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411224:	add	x0, x0, #0xe80
  411228:	ldr	x0, [x0]
  41122c:	cmp	x1, x0
  411230:	b.cc	4111f4 <static_destruct+0x38>  // b.lo, b.ul, b.last
  411234:	b	41123c <static_destruct+0x80>
  411238:	nop
  41123c:	ldp	x29, x30, [sp], #32
  411240:	ret

0000000000411244 <manager_unrefp>:
  411244:	stp	x29, x30, [sp, #-32]!
  411248:	mov	x29, sp
  41124c:	str	x0, [sp, #24]
  411250:	ldr	x0, [sp, #24]
  411254:	ldr	x0, [x0]
  411258:	cmp	x0, #0x0
  41125c:	b.eq	41126c <manager_unrefp+0x28>  // b.none
  411260:	ldr	x0, [sp, #24]
  411264:	ldr	x0, [x0]
  411268:	bl	4113f8 <manager_unref>
  41126c:	nop
  411270:	ldp	x29, x30, [sp], #32
  411274:	ret

0000000000411278 <manager_new>:
  411278:	stp	x29, x30, [sp, #-80]!
  41127c:	mov	x29, sp
  411280:	str	x19, [sp, #16]
  411284:	str	x0, [sp, #40]
  411288:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  41128c:	add	x0, x0, #0x728
  411290:	ldr	x1, [x0]
  411294:	str	x1, [sp, #72]
  411298:	mov	x1, #0x0                   	// #0
  41129c:	str	xzr, [sp, #56]
  4112a0:	ldr	x0, [sp, #40]
  4112a4:	cmp	x0, #0x0
  4112a8:	cset	w0, eq  // eq = none
  4112ac:	and	w0, w0, #0xff
  4112b0:	and	x0, x0, #0xff
  4112b4:	cmp	x0, #0x0
  4112b8:	b.eq	4112e4 <manager_new+0x6c>  // b.none
  4112bc:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4112c0:	add	x1, x0, #0xb4b
  4112c4:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4112c8:	add	x4, x0, #0xe88
  4112cc:	mov	w3, #0x1a                  	// #26
  4112d0:	mov	x2, x1
  4112d4:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4112d8:	add	x1, x0, #0xb68
  4112dc:	mov	w0, #0x0                   	// #0
  4112e0:	bl	404670 <log_assert_failed_realm@plt>
  4112e4:	mov	x1, #0x38                  	// #56
  4112e8:	mov	x0, #0x1                   	// #1
  4112ec:	bl	404c10 <calloc@plt>
  4112f0:	str	x0, [sp, #56]
  4112f4:	ldr	x0, [sp, #56]
  4112f8:	cmp	x0, #0x0
  4112fc:	b.ne	411308 <manager_new+0x90>  // b.any
  411300:	mov	w19, #0xfffffff4            	// #-12
  411304:	b	4113bc <manager_new+0x144>
  411308:	ldr	x0, [sp, #56]
  41130c:	bl	404480 <sd_event_default@plt>
  411310:	str	w0, [sp, #52]
  411314:	ldr	w0, [sp, #52]
  411318:	cmp	w0, #0x0
  41131c:	b.ge	411328 <manager_new+0xb0>  // b.tcont
  411320:	ldr	w19, [sp, #52]
  411324:	b	4113bc <manager_new+0x144>
  411328:	ldr	x0, [sp, #56]
  41132c:	ldr	x0, [x0]
  411330:	mov	x4, #0x0                   	// #0
  411334:	mov	x3, #0x0                   	// #0
  411338:	mov	w2, #0x2                   	// #2
  41133c:	mov	x1, #0x0                   	// #0
  411340:	bl	404db0 <sd_event_add_signal@plt>
  411344:	str	w0, [sp, #52]
  411348:	ldr	w0, [sp, #52]
  41134c:	cmp	w0, #0x0
  411350:	b.ge	41135c <manager_new+0xe4>  // b.tcont
  411354:	ldr	w19, [sp, #52]
  411358:	b	4113bc <manager_new+0x144>
  41135c:	ldr	x0, [sp, #56]
  411360:	ldr	x0, [x0]
  411364:	mov	x4, #0x0                   	// #0
  411368:	mov	x3, #0x0                   	// #0
  41136c:	mov	w2, #0xf                   	// #15
  411370:	mov	x1, #0x0                   	// #0
  411374:	bl	404db0 <sd_event_add_signal@plt>
  411378:	str	w0, [sp, #52]
  41137c:	ldr	w0, [sp, #52]
  411380:	cmp	w0, #0x0
  411384:	b.ge	411390 <manager_new+0x118>  // b.tcont
  411388:	ldr	w19, [sp, #52]
  41138c:	b	4113bc <manager_new+0x144>
  411390:	ldr	x0, [sp, #56]
  411394:	ldr	x0, [x0]
  411398:	mov	w1, #0x1                   	// #1
  41139c:	bl	4043b0 <sd_event_set_watchdog@plt>
  4113a0:	ldr	x0, [sp, #56]
  4113a4:	str	x0, [sp, #64]
  4113a8:	str	xzr, [sp, #56]
  4113ac:	ldr	x1, [sp, #64]
  4113b0:	ldr	x0, [sp, #40]
  4113b4:	str	x1, [x0]
  4113b8:	mov	w19, #0x0                   	// #0
  4113bc:	add	x0, sp, #0x38
  4113c0:	bl	411244 <manager_unrefp>
  4113c4:	mov	w1, w19
  4113c8:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  4113cc:	add	x0, x0, #0x728
  4113d0:	ldr	x2, [sp, #72]
  4113d4:	ldr	x0, [x0]
  4113d8:	eor	x0, x2, x0
  4113dc:	cmp	x0, #0x0
  4113e0:	b.eq	4113e8 <manager_new+0x170>  // b.none
  4113e4:	bl	404930 <__stack_chk_fail@plt>
  4113e8:	mov	w0, w1
  4113ec:	ldr	x19, [sp, #16]
  4113f0:	ldp	x29, x30, [sp], #80
  4113f4:	ret

00000000004113f8 <manager_unref>:
  4113f8:	stp	x29, x30, [sp, #-32]!
  4113fc:	mov	x29, sp
  411400:	str	x0, [sp, #24]
  411404:	ldr	x0, [sp, #24]
  411408:	cmp	x0, #0x0
  41140c:	cset	w0, eq  // eq = none
  411410:	and	w0, w0, #0xff
  411414:	and	x0, x0, #0xff
  411418:	cmp	x0, #0x0
  41141c:	b.eq	411448 <manager_unref+0x50>  // b.none
  411420:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411424:	add	x1, x0, #0xb4b
  411428:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  41142c:	add	x4, x0, #0xe98
  411430:	mov	w3, #0x33                  	// #51
  411434:	mov	x2, x1
  411438:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  41143c:	add	x1, x0, #0xb70
  411440:	mov	w0, #0x0                   	// #0
  411444:	bl	404670 <log_assert_failed_realm@plt>
  411448:	ldr	x0, [sp, #24]
  41144c:	ldr	x0, [x0, #24]
  411450:	bl	411198 <hashmap_free>
  411454:	ldr	x0, [sp, #24]
  411458:	ldr	x0, [x0, #32]
  41145c:	bl	404580 <sd_event_source_unref@plt>
  411460:	ldr	x0, [sp, #24]
  411464:	ldr	x0, [x0, #16]
  411468:	bl	4044d0 <bus_verify_polkit_async_registry_free@plt>
  41146c:	ldr	x0, [sp, #24]
  411470:	ldr	x0, [x0, #8]
  411474:	bl	404ab0 <sd_bus_flush_close_unref@plt>
  411478:	ldr	x0, [sp, #24]
  41147c:	ldr	x0, [x0]
  411480:	bl	404d50 <sd_event_unref@plt>
  411484:	ldr	x0, [sp, #24]
  411488:	bl	411140 <mfree>
  41148c:	ldp	x29, x30, [sp], #32
  411490:	ret

0000000000411494 <manager_connect_bus>:
  411494:	stp	x29, x30, [sp, #-112]!
  411498:	mov	x29, sp
  41149c:	str	x0, [sp, #24]
  4114a0:	ldr	x0, [sp, #24]
  4114a4:	cmp	x0, #0x0
  4114a8:	cset	w0, eq  // eq = none
  4114ac:	and	w0, w0, #0xff
  4114b0:	and	x0, x0, #0xff
  4114b4:	cmp	x0, #0x0
  4114b8:	b.eq	4114e4 <manager_connect_bus+0x50>  // b.none
  4114bc:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4114c0:	add	x1, x0, #0xb4b
  4114c4:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4114c8:	add	x4, x0, #0xea8
  4114cc:	mov	w3, #0x44                  	// #68
  4114d0:	mov	x2, x1
  4114d4:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4114d8:	add	x1, x0, #0xb70
  4114dc:	mov	w0, #0x0                   	// #0
  4114e0:	bl	404670 <log_assert_failed_realm@plt>
  4114e4:	ldr	x0, [sp, #24]
  4114e8:	ldr	x0, [x0, #8]
  4114ec:	cmp	x0, #0x0
  4114f0:	cset	w0, ne  // ne = any
  4114f4:	and	w0, w0, #0xff
  4114f8:	and	x0, x0, #0xff
  4114fc:	cmp	x0, #0x0
  411500:	b.eq	41152c <manager_connect_bus+0x98>  // b.none
  411504:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411508:	add	x1, x0, #0xb4b
  41150c:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411510:	add	x4, x0, #0xea8
  411514:	mov	w3, #0x45                  	// #69
  411518:	mov	x2, x1
  41151c:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411520:	add	x1, x0, #0xb78
  411524:	mov	w0, #0x0                   	// #0
  411528:	bl	404670 <log_assert_failed_realm@plt>
  41152c:	ldr	x0, [sp, #24]
  411530:	add	x0, x0, #0x8
  411534:	bl	404aa0 <sd_bus_default_system@plt>
  411538:	str	w0, [sp, #36]
  41153c:	ldr	w0, [sp, #36]
  411540:	cmp	w0, #0x0
  411544:	b.ge	4115d0 <manager_connect_bus+0x13c>  // b.tcont
  411548:	mov	w0, #0x3                   	// #3
  41154c:	str	w0, [sp, #100]
  411550:	ldr	w0, [sp, #36]
  411554:	str	w0, [sp, #104]
  411558:	str	wzr, [sp, #108]
  41155c:	ldr	w0, [sp, #108]
  411560:	bl	404e50 <log_get_max_level_realm@plt>
  411564:	mov	w1, w0
  411568:	ldr	w0, [sp, #100]
  41156c:	and	w0, w0, #0x7
  411570:	cmp	w1, w0
  411574:	b.lt	4115b8 <manager_connect_bus+0x124>  // b.tstop
  411578:	ldr	w0, [sp, #108]
  41157c:	lsl	w1, w0, #10
  411580:	ldr	w0, [sp, #100]
  411584:	orr	w6, w1, w0
  411588:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  41158c:	add	x1, x0, #0xb4b
  411590:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411594:	add	x5, x0, #0xb80
  411598:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  41159c:	add	x4, x0, #0xec0
  4115a0:	mov	w3, #0x49                  	// #73
  4115a4:	mov	x2, x1
  4115a8:	ldr	w1, [sp, #104]
  4115ac:	mov	w0, w6
  4115b0:	bl	404a80 <log_internal_realm@plt>
  4115b4:	b	4119b4 <manager_connect_bus+0x520>
  4115b8:	ldr	w0, [sp, #104]
  4115bc:	cmp	w0, #0x0
  4115c0:	cneg	w0, w0, lt  // lt = tstop
  4115c4:	and	w0, w0, #0xff
  4115c8:	neg	w0, w0
  4115cc:	b	4119b4 <manager_connect_bus+0x520>
  4115d0:	ldr	x0, [sp, #24]
  4115d4:	ldr	x6, [x0, #8]
  4115d8:	ldr	x5, [sp, #24]
  4115dc:	adrp	x0, 413000 <_fini+0x1050>
  4115e0:	add	x4, x0, #0x830
  4115e4:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4115e8:	add	x3, x0, #0xba8
  4115ec:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4115f0:	add	x2, x0, #0xbd0
  4115f4:	mov	x1, #0x0                   	// #0
  4115f8:	mov	x0, x6
  4115fc:	bl	4048c0 <sd_bus_add_object_vtable@plt>
  411600:	str	w0, [sp, #36]
  411604:	ldr	w0, [sp, #36]
  411608:	cmp	w0, #0x0
  41160c:	b.ge	411698 <manager_connect_bus+0x204>  // b.tcont
  411610:	mov	w0, #0x3                   	// #3
  411614:	str	w0, [sp, #88]
  411618:	ldr	w0, [sp, #36]
  41161c:	str	w0, [sp, #92]
  411620:	str	wzr, [sp, #96]
  411624:	ldr	w0, [sp, #96]
  411628:	bl	404e50 <log_get_max_level_realm@plt>
  41162c:	mov	w1, w0
  411630:	ldr	w0, [sp, #88]
  411634:	and	w0, w0, #0x7
  411638:	cmp	w1, w0
  41163c:	b.lt	411680 <manager_connect_bus+0x1ec>  // b.tstop
  411640:	ldr	w0, [sp, #96]
  411644:	lsl	w1, w0, #10
  411648:	ldr	w0, [sp, #88]
  41164c:	orr	w6, w1, w0
  411650:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411654:	add	x1, x0, #0xb4b
  411658:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  41165c:	add	x5, x0, #0xbf0
  411660:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411664:	add	x4, x0, #0xec0
  411668:	mov	w3, #0x4d                  	// #77
  41166c:	mov	x2, x1
  411670:	ldr	w1, [sp, #92]
  411674:	mov	w0, w6
  411678:	bl	404a80 <log_internal_realm@plt>
  41167c:	b	4119b4 <manager_connect_bus+0x520>
  411680:	ldr	w0, [sp, #92]
  411684:	cmp	w0, #0x0
  411688:	cneg	w0, w0, lt  // lt = tstop
  41168c:	and	w0, w0, #0xff
  411690:	neg	w0, w0
  411694:	b	4119b4 <manager_connect_bus+0x520>
  411698:	ldr	x0, [sp, #24]
  41169c:	ldr	x7, [x0, #8]
  4116a0:	ldr	x6, [sp, #24]
  4116a4:	adrp	x0, 40f000 <bus_image_common_remove+0xec>
  4116a8:	add	x5, x0, #0xe20
  4116ac:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4116b0:	add	x4, x0, #0x320
  4116b4:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4116b8:	add	x3, x0, #0xc18
  4116bc:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4116c0:	add	x2, x0, #0xc38
  4116c4:	mov	x1, #0x0                   	// #0
  4116c8:	mov	x0, x7
  4116cc:	bl	404b00 <sd_bus_add_fallback_vtable@plt>
  4116d0:	str	w0, [sp, #36]
  4116d4:	ldr	w0, [sp, #36]
  4116d8:	cmp	w0, #0x0
  4116dc:	b.ge	411768 <manager_connect_bus+0x2d4>  // b.tcont
  4116e0:	mov	w0, #0x3                   	// #3
  4116e4:	str	w0, [sp, #76]
  4116e8:	ldr	w0, [sp, #36]
  4116ec:	str	w0, [sp, #80]
  4116f0:	str	wzr, [sp, #84]
  4116f4:	ldr	w0, [sp, #84]
  4116f8:	bl	404e50 <log_get_max_level_realm@plt>
  4116fc:	mov	w1, w0
  411700:	ldr	w0, [sp, #76]
  411704:	and	w0, w0, #0x7
  411708:	cmp	w1, w0
  41170c:	b.lt	411750 <manager_connect_bus+0x2bc>  // b.tstop
  411710:	ldr	w0, [sp, #84]
  411714:	lsl	w1, w0, #10
  411718:	ldr	w0, [sp, #76]
  41171c:	orr	w6, w1, w0
  411720:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411724:	add	x1, x0, #0xb4b
  411728:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  41172c:	add	x5, x0, #0xc60
  411730:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411734:	add	x4, x0, #0xec0
  411738:	mov	w3, #0x51                  	// #81
  41173c:	mov	x2, x1
  411740:	ldr	w1, [sp, #80]
  411744:	mov	w0, w6
  411748:	bl	404a80 <log_internal_realm@plt>
  41174c:	b	4119b4 <manager_connect_bus+0x520>
  411750:	ldr	w0, [sp, #80]
  411754:	cmp	w0, #0x0
  411758:	cneg	w0, w0, lt  // lt = tstop
  41175c:	and	w0, w0, #0xff
  411760:	neg	w0, w0
  411764:	b	4119b4 <manager_connect_bus+0x520>
  411768:	ldr	x0, [sp, #24]
  41176c:	ldr	x5, [x0, #8]
  411770:	ldr	x4, [sp, #24]
  411774:	adrp	x0, 410000 <bus_image_object_find+0x1e0>
  411778:	add	x3, x0, #0x78
  41177c:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411780:	add	x2, x0, #0xc38
  411784:	mov	x1, #0x0                   	// #0
  411788:	mov	x0, x5
  41178c:	bl	404ca0 <sd_bus_add_node_enumerator@plt>
  411790:	str	w0, [sp, #36]
  411794:	ldr	w0, [sp, #36]
  411798:	cmp	w0, #0x0
  41179c:	b.ge	411828 <manager_connect_bus+0x394>  // b.tcont
  4117a0:	mov	w0, #0x3                   	// #3
  4117a4:	str	w0, [sp, #64]
  4117a8:	ldr	w0, [sp, #36]
  4117ac:	str	w0, [sp, #68]
  4117b0:	str	wzr, [sp, #72]
  4117b4:	ldr	w0, [sp, #72]
  4117b8:	bl	404e50 <log_get_max_level_realm@plt>
  4117bc:	mov	w1, w0
  4117c0:	ldr	w0, [sp, #64]
  4117c4:	and	w0, w0, #0x7
  4117c8:	cmp	w1, w0
  4117cc:	b.lt	411810 <manager_connect_bus+0x37c>  // b.tstop
  4117d0:	ldr	w0, [sp, #72]
  4117d4:	lsl	w1, w0, #10
  4117d8:	ldr	w0, [sp, #64]
  4117dc:	orr	w6, w1, w0
  4117e0:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4117e4:	add	x1, x0, #0xb4b
  4117e8:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4117ec:	add	x5, x0, #0xc88
  4117f0:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4117f4:	add	x4, x0, #0xec0
  4117f8:	mov	w3, #0x55                  	// #85
  4117fc:	mov	x2, x1
  411800:	ldr	w1, [sp, #68]
  411804:	mov	w0, w6
  411808:	bl	404a80 <log_internal_realm@plt>
  41180c:	b	4119b4 <manager_connect_bus+0x520>
  411810:	ldr	w0, [sp, #68]
  411814:	cmp	w0, #0x0
  411818:	cneg	w0, w0, lt  // lt = tstop
  41181c:	and	w0, w0, #0xff
  411820:	neg	w0, w0
  411824:	b	4119b4 <manager_connect_bus+0x520>
  411828:	ldr	x0, [sp, #24]
  41182c:	ldr	x6, [x0, #8]
  411830:	mov	x5, #0x0                   	// #0
  411834:	mov	x4, #0x0                   	// #0
  411838:	mov	x3, #0x0                   	// #0
  41183c:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411840:	add	x2, x0, #0xcb0
  411844:	mov	x1, #0x0                   	// #0
  411848:	mov	x0, x6
  41184c:	bl	404400 <sd_bus_request_name_async@plt>
  411850:	str	w0, [sp, #36]
  411854:	ldr	w0, [sp, #36]
  411858:	cmp	w0, #0x0
  41185c:	b.ge	4118e8 <manager_connect_bus+0x454>  // b.tcont
  411860:	mov	w0, #0x3                   	// #3
  411864:	str	w0, [sp, #52]
  411868:	ldr	w0, [sp, #36]
  41186c:	str	w0, [sp, #56]
  411870:	str	wzr, [sp, #60]
  411874:	ldr	w0, [sp, #60]
  411878:	bl	404e50 <log_get_max_level_realm@plt>
  41187c:	mov	w1, w0
  411880:	ldr	w0, [sp, #52]
  411884:	and	w0, w0, #0x7
  411888:	cmp	w1, w0
  41188c:	b.lt	4118d0 <manager_connect_bus+0x43c>  // b.tstop
  411890:	ldr	w0, [sp, #60]
  411894:	lsl	w1, w0, #10
  411898:	ldr	w0, [sp, #52]
  41189c:	orr	w6, w1, w0
  4118a0:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4118a4:	add	x1, x0, #0xb4b
  4118a8:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4118ac:	add	x5, x0, #0xcd0
  4118b0:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4118b4:	add	x4, x0, #0xec0
  4118b8:	mov	w3, #0x59                  	// #89
  4118bc:	mov	x2, x1
  4118c0:	ldr	w1, [sp, #56]
  4118c4:	mov	w0, w6
  4118c8:	bl	404a80 <log_internal_realm@plt>
  4118cc:	b	4119b4 <manager_connect_bus+0x520>
  4118d0:	ldr	w0, [sp, #56]
  4118d4:	cmp	w0, #0x0
  4118d8:	cneg	w0, w0, lt  // lt = tstop
  4118dc:	and	w0, w0, #0xff
  4118e0:	neg	w0, w0
  4118e4:	b	4119b4 <manager_connect_bus+0x520>
  4118e8:	ldr	x0, [sp, #24]
  4118ec:	ldr	x3, [x0, #8]
  4118f0:	ldr	x0, [sp, #24]
  4118f4:	ldr	x0, [x0]
  4118f8:	mov	w2, #0x0                   	// #0
  4118fc:	mov	x1, x0
  411900:	mov	x0, x3
  411904:	bl	404710 <sd_bus_attach_event@plt>
  411908:	str	w0, [sp, #36]
  41190c:	ldr	w0, [sp, #36]
  411910:	cmp	w0, #0x0
  411914:	b.ge	4119a0 <manager_connect_bus+0x50c>  // b.tcont
  411918:	mov	w0, #0x3                   	// #3
  41191c:	str	w0, [sp, #40]
  411920:	ldr	w0, [sp, #36]
  411924:	str	w0, [sp, #44]
  411928:	str	wzr, [sp, #48]
  41192c:	ldr	w0, [sp, #48]
  411930:	bl	404e50 <log_get_max_level_realm@plt>
  411934:	mov	w1, w0
  411938:	ldr	w0, [sp, #40]
  41193c:	and	w0, w0, #0x7
  411940:	cmp	w1, w0
  411944:	b.lt	411988 <manager_connect_bus+0x4f4>  // b.tstop
  411948:	ldr	w0, [sp, #48]
  41194c:	lsl	w1, w0, #10
  411950:	ldr	w0, [sp, #40]
  411954:	orr	w6, w1, w0
  411958:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  41195c:	add	x1, x0, #0xb4b
  411960:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411964:	add	x5, x0, #0xcf0
  411968:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  41196c:	add	x4, x0, #0xec0
  411970:	mov	w3, #0x5d                  	// #93
  411974:	mov	x2, x1
  411978:	ldr	w1, [sp, #44]
  41197c:	mov	w0, w6
  411980:	bl	404a80 <log_internal_realm@plt>
  411984:	b	4119b4 <manager_connect_bus+0x520>
  411988:	ldr	w0, [sp, #44]
  41198c:	cmp	w0, #0x0
  411990:	cneg	w0, w0, lt  // lt = tstop
  411994:	and	w0, w0, #0xff
  411998:	neg	w0, w0
  41199c:	b	4119b4 <manager_connect_bus+0x520>
  4119a0:	ldr	x0, [sp, #24]
  4119a4:	ldr	x0, [x0, #8]
  4119a8:	mov	w1, #0x1                   	// #1
  4119ac:	bl	404750 <sd_bus_set_exit_on_disconnect@plt>
  4119b0:	mov	w0, #0x0                   	// #0
  4119b4:	ldp	x29, x30, [sp], #112
  4119b8:	ret

00000000004119bc <manager_startup>:
  4119bc:	stp	x29, x30, [sp, #-48]!
  4119c0:	mov	x29, sp
  4119c4:	str	x0, [sp, #24]
  4119c8:	ldr	x0, [sp, #24]
  4119cc:	cmp	x0, #0x0
  4119d0:	cset	w0, eq  // eq = none
  4119d4:	and	w0, w0, #0xff
  4119d8:	and	x0, x0, #0xff
  4119dc:	cmp	x0, #0x0
  4119e0:	b.eq	411a0c <manager_startup+0x50>  // b.none
  4119e4:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4119e8:	add	x1, x0, #0xb4b
  4119ec:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  4119f0:	add	x4, x0, #0xed8
  4119f4:	mov	w3, #0x67                  	// #103
  4119f8:	mov	x2, x1
  4119fc:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411a00:	add	x1, x0, #0xb70
  411a04:	mov	w0, #0x0                   	// #0
  411a08:	bl	404670 <log_assert_failed_realm@plt>
  411a0c:	ldr	x0, [sp, #24]
  411a10:	bl	411494 <manager_connect_bus>
  411a14:	str	w0, [sp, #44]
  411a18:	ldr	w0, [sp, #44]
  411a1c:	cmp	w0, #0x0
  411a20:	b.ge	411a2c <manager_startup+0x70>  // b.tcont
  411a24:	ldr	w0, [sp, #44]
  411a28:	b	411a30 <manager_startup+0x74>
  411a2c:	mov	w0, #0x0                   	// #0
  411a30:	ldp	x29, x30, [sp], #48
  411a34:	ret

0000000000411a38 <check_idle>:
  411a38:	sub	sp, sp, #0x20
  411a3c:	str	x0, [sp, #8]
  411a40:	ldr	x0, [sp, #8]
  411a44:	str	x0, [sp, #24]
  411a48:	ldr	x0, [sp, #24]
  411a4c:	ldr	x0, [x0, #40]
  411a50:	cmp	x0, #0x0
  411a54:	cset	w0, eq  // eq = none
  411a58:	and	w0, w0, #0xff
  411a5c:	add	sp, sp, #0x20
  411a60:	ret

0000000000411a64 <manager_run>:
  411a64:	stp	x29, x30, [sp, #-32]!
  411a68:	mov	x29, sp
  411a6c:	str	x0, [sp, #24]
  411a70:	ldr	x0, [sp, #24]
  411a74:	cmp	x0, #0x0
  411a78:	cset	w0, eq  // eq = none
  411a7c:	and	w0, w0, #0xff
  411a80:	and	x0, x0, #0xff
  411a84:	cmp	x0, #0x0
  411a88:	b.eq	411ab4 <manager_run+0x50>  // b.none
  411a8c:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411a90:	add	x1, x0, #0xb4b
  411a94:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411a98:	add	x4, x0, #0xee8
  411a9c:	mov	w3, #0x77                  	// #119
  411aa0:	mov	x2, x1
  411aa4:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411aa8:	add	x1, x0, #0xb70
  411aac:	mov	w0, #0x0                   	// #0
  411ab0:	bl	404670 <log_assert_failed_realm@plt>
  411ab4:	ldr	x0, [sp, #24]
  411ab8:	ldr	x6, [x0]
  411abc:	ldr	x0, [sp, #24]
  411ac0:	ldr	x1, [x0, #8]
  411ac4:	ldr	x5, [sp, #24]
  411ac8:	adrp	x0, 411000 <operation_free+0xac>
  411acc:	add	x4, x0, #0xa38
  411ad0:	mov	x3, #0xc380                	// #50048
  411ad4:	movk	x3, #0x1c9, lsl #16
  411ad8:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411adc:	add	x2, x0, #0xcb0
  411ae0:	mov	x0, x6
  411ae4:	bl	404490 <bus_event_loop_with_idle@plt>
  411ae8:	ldp	x29, x30, [sp], #32
  411aec:	ret

0000000000411af0 <run>:
  411af0:	stp	x29, x30, [sp, #-128]!
  411af4:	mov	x29, sp
  411af8:	stp	x19, x20, [sp, #16]
  411afc:	str	w0, [sp, #44]
  411b00:	str	x1, [sp, #32]
  411b04:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  411b08:	add	x0, x0, #0x728
  411b0c:	ldr	x1, [x0]
  411b10:	str	x1, [sp, #120]
  411b14:	mov	x1, #0x0                   	// #0
  411b18:	str	xzr, [sp, #112]
  411b1c:	bl	4045c0 <log_setup_service@plt>
  411b20:	mov	w0, #0x12                  	// #18
  411b24:	bl	404700 <umask@plt>
  411b28:	ldr	w0, [sp, #44]
  411b2c:	cmp	w0, #0x1
  411b30:	b.eq	411bc4 <run+0xd4>  // b.none
  411b34:	mov	w0, #0x3                   	// #3
  411b38:	str	w0, [sp, #100]
  411b3c:	mov	w0, #0x16                  	// #22
  411b40:	movk	w0, #0x4000, lsl #16
  411b44:	str	w0, [sp, #104]
  411b48:	str	wzr, [sp, #108]
  411b4c:	ldr	w0, [sp, #108]
  411b50:	bl	404e50 <log_get_max_level_realm@plt>
  411b54:	mov	w1, w0
  411b58:	ldr	w0, [sp, #100]
  411b5c:	and	w0, w0, #0x7
  411b60:	cmp	w1, w0
  411b64:	b.lt	411bac <run+0xbc>  // b.tstop
  411b68:	ldr	w0, [sp, #108]
  411b6c:	lsl	w1, w0, #10
  411b70:	ldr	w0, [sp, #100]
  411b74:	orr	w6, w1, w0
  411b78:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411b7c:	add	x1, x0, #0xb4b
  411b80:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411b84:	add	x5, x0, #0xd18
  411b88:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411b8c:	add	x4, x0, #0xef8
  411b90:	mov	w3, #0x8a                  	// #138
  411b94:	mov	x2, x1
  411b98:	ldr	w1, [sp, #104]
  411b9c:	mov	w0, w6
  411ba0:	bl	404a80 <log_internal_realm@plt>
  411ba4:	mov	w19, w0
  411ba8:	b	411e8c <run+0x39c>
  411bac:	ldr	w0, [sp, #104]
  411bb0:	cmp	w0, #0x0
  411bb4:	cneg	w0, w0, lt  // lt = tstop
  411bb8:	and	w0, w0, #0xff
  411bbc:	neg	w19, w0
  411bc0:	b	411e8c <run+0x39c>
  411bc4:	mov	w5, #0xffffffff            	// #-1
  411bc8:	mov	w4, #0x2                   	// #2
  411bcc:	mov	w3, #0xf                   	// #15
  411bd0:	mov	w2, #0x11                  	// #17
  411bd4:	mov	x1, #0x0                   	// #0
  411bd8:	mov	w0, #0x0                   	// #0
  411bdc:	bl	404790 <sigprocmask_many@plt>
  411be0:	lsr	w0, w0, #31
  411be4:	and	w0, w0, #0xff
  411be8:	and	x0, x0, #0xff
  411bec:	cmp	x0, #0x0
  411bf0:	b.eq	411c1c <run+0x12c>  // b.none
  411bf4:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411bf8:	add	x1, x0, #0xb4b
  411bfc:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411c00:	add	x4, x0, #0xf00
  411c04:	mov	w3, #0x8c                  	// #140
  411c08:	mov	x2, x1
  411c0c:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411c10:	add	x1, x0, #0xd40
  411c14:	mov	w0, #0x0                   	// #0
  411c18:	bl	404670 <log_assert_failed_realm@plt>
  411c1c:	add	x0, sp, #0x70
  411c20:	bl	411278 <manager_new>
  411c24:	str	w0, [sp, #48]
  411c28:	ldr	w0, [sp, #48]
  411c2c:	cmp	w0, #0x0
  411c30:	b.ge	411cc0 <run+0x1d0>  // b.tcont
  411c34:	mov	w0, #0x3                   	// #3
  411c38:	str	w0, [sp, #88]
  411c3c:	ldr	w0, [sp, #48]
  411c40:	str	w0, [sp, #92]
  411c44:	str	wzr, [sp, #96]
  411c48:	ldr	w0, [sp, #96]
  411c4c:	bl	404e50 <log_get_max_level_realm@plt>
  411c50:	mov	w1, w0
  411c54:	ldr	w0, [sp, #88]
  411c58:	and	w0, w0, #0x7
  411c5c:	cmp	w1, w0
  411c60:	b.lt	411ca8 <run+0x1b8>  // b.tstop
  411c64:	ldr	w0, [sp, #96]
  411c68:	lsl	w1, w0, #10
  411c6c:	ldr	w0, [sp, #88]
  411c70:	orr	w6, w1, w0
  411c74:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411c78:	add	x1, x0, #0xb4b
  411c7c:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411c80:	add	x5, x0, #0xd88
  411c84:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411c88:	add	x4, x0, #0xef8
  411c8c:	mov	w3, #0x90                  	// #144
  411c90:	mov	x2, x1
  411c94:	ldr	w1, [sp, #92]
  411c98:	mov	w0, w6
  411c9c:	bl	404a80 <log_internal_realm@plt>
  411ca0:	mov	w19, w0
  411ca4:	b	411e8c <run+0x39c>
  411ca8:	ldr	w0, [sp, #92]
  411cac:	cmp	w0, #0x0
  411cb0:	cneg	w0, w0, lt  // lt = tstop
  411cb4:	and	w0, w0, #0xff
  411cb8:	neg	w19, w0
  411cbc:	b	411e8c <run+0x39c>
  411cc0:	ldr	x0, [sp, #112]
  411cc4:	bl	4119bc <manager_startup>
  411cc8:	str	w0, [sp, #48]
  411ccc:	ldr	w0, [sp, #48]
  411cd0:	cmp	w0, #0x0
  411cd4:	b.ge	411d64 <run+0x274>  // b.tcont
  411cd8:	mov	w0, #0x3                   	// #3
  411cdc:	str	w0, [sp, #76]
  411ce0:	ldr	w0, [sp, #48]
  411ce4:	str	w0, [sp, #80]
  411ce8:	str	wzr, [sp, #84]
  411cec:	ldr	w0, [sp, #84]
  411cf0:	bl	404e50 <log_get_max_level_realm@plt>
  411cf4:	mov	w1, w0
  411cf8:	ldr	w0, [sp, #76]
  411cfc:	and	w0, w0, #0x7
  411d00:	cmp	w1, w0
  411d04:	b.lt	411d4c <run+0x25c>  // b.tstop
  411d08:	ldr	w0, [sp, #84]
  411d0c:	lsl	w1, w0, #10
  411d10:	ldr	w0, [sp, #76]
  411d14:	orr	w6, w1, w0
  411d18:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411d1c:	add	x1, x0, #0xb4b
  411d20:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411d24:	add	x5, x0, #0xdb0
  411d28:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411d2c:	add	x4, x0, #0xef8
  411d30:	mov	w3, #0x94                  	// #148
  411d34:	mov	x2, x1
  411d38:	ldr	w1, [sp, #80]
  411d3c:	mov	w0, w6
  411d40:	bl	404a80 <log_internal_realm@plt>
  411d44:	mov	w19, w0
  411d48:	b	411e8c <run+0x39c>
  411d4c:	ldr	w0, [sp, #80]
  411d50:	cmp	w0, #0x0
  411d54:	cneg	w0, w0, lt  // lt = tstop
  411d58:	and	w0, w0, #0xff
  411d5c:	neg	w19, w0
  411d60:	b	411e8c <run+0x39c>
  411d64:	mov	w0, #0x7                   	// #7
  411d68:	str	w0, [sp, #52]
  411d6c:	str	wzr, [sp, #56]
  411d70:	str	wzr, [sp, #60]
  411d74:	ldr	w0, [sp, #60]
  411d78:	bl	404e50 <log_get_max_level_realm@plt>
  411d7c:	mov	w1, w0
  411d80:	ldr	w0, [sp, #52]
  411d84:	and	w0, w0, #0x7
  411d88:	cmp	w1, w0
  411d8c:	b.lt	411dd8 <run+0x2e8>  // b.tstop
  411d90:	ldr	w0, [sp, #60]
  411d94:	lsl	w1, w0, #10
  411d98:	ldr	w0, [sp, #52]
  411d9c:	orr	w19, w1, w0
  411da0:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411da4:	add	x20, x0, #0xb4b
  411da8:	bl	404510 <getpid_cached@plt>
  411dac:	mov	w6, w0
  411db0:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411db4:	add	x5, x0, #0xdd8
  411db8:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411dbc:	add	x4, x0, #0xef8
  411dc0:	mov	w3, #0x96                  	// #150
  411dc4:	mov	x2, x20
  411dc8:	ldr	w1, [sp, #56]
  411dcc:	mov	w0, w19
  411dd0:	bl	404a80 <log_internal_realm@plt>
  411dd4:	b	411de0 <run+0x2f0>
  411dd8:	ldr	w0, [sp, #56]
  411ddc:	cmp	w0, #0x0
  411de0:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411de4:	add	x1, x0, #0xe00
  411de8:	mov	w0, #0x0                   	// #0
  411dec:	bl	404a40 <sd_notify@plt>
  411df0:	ldr	x0, [sp, #112]
  411df4:	bl	411a64 <manager_run>
  411df8:	str	w0, [sp, #48]
  411dfc:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411e00:	add	x1, x0, #0xe28
  411e04:	mov	w0, #0x0                   	// #0
  411e08:	bl	404a40 <sd_notify@plt>
  411e0c:	mov	w0, #0x7                   	// #7
  411e10:	str	w0, [sp, #64]
  411e14:	str	wzr, [sp, #68]
  411e18:	str	wzr, [sp, #72]
  411e1c:	ldr	w0, [sp, #72]
  411e20:	bl	404e50 <log_get_max_level_realm@plt>
  411e24:	mov	w1, w0
  411e28:	ldr	w0, [sp, #64]
  411e2c:	and	w0, w0, #0x7
  411e30:	cmp	w1, w0
  411e34:	b.lt	411e80 <run+0x390>  // b.tstop
  411e38:	ldr	w0, [sp, #72]
  411e3c:	lsl	w1, w0, #10
  411e40:	ldr	w0, [sp, #64]
  411e44:	orr	w19, w1, w0
  411e48:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411e4c:	add	x20, x0, #0xb4b
  411e50:	bl	404510 <getpid_cached@plt>
  411e54:	mov	w6, w0
  411e58:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411e5c:	add	x5, x0, #0xe50
  411e60:	adrp	x0, 414000 <__PRETTY_FUNCTION__.11484+0x308>
  411e64:	add	x4, x0, #0xef8
  411e68:	mov	w3, #0xa0                  	// #160
  411e6c:	mov	x2, x20
  411e70:	ldr	w1, [sp, #68]
  411e74:	mov	w0, w19
  411e78:	bl	404a80 <log_internal_realm@plt>
  411e7c:	b	411e88 <run+0x398>
  411e80:	ldr	w0, [sp, #68]
  411e84:	cmp	w0, #0x0
  411e88:	ldr	w19, [sp, #48]
  411e8c:	add	x0, sp, #0x70
  411e90:	bl	411244 <manager_unrefp>
  411e94:	mov	w1, w19
  411e98:	adrp	x0, 427000 <__FRAME_END__+0x1064c>
  411e9c:	add	x0, x0, #0x728
  411ea0:	ldr	x2, [sp, #120]
  411ea4:	ldr	x0, [x0]
  411ea8:	eor	x0, x2, x0
  411eac:	cmp	x0, #0x0
  411eb0:	b.eq	411eb8 <run+0x3c8>  // b.none
  411eb4:	bl	404930 <__stack_chk_fail@plt>
  411eb8:	mov	w0, w1
  411ebc:	ldp	x19, x20, [sp, #16]
  411ec0:	ldp	x29, x30, [sp], #128
  411ec4:	ret

0000000000411ec8 <main>:
  411ec8:	stp	x29, x30, [sp, #-48]!
  411ecc:	mov	x29, sp
  411ed0:	str	w0, [sp, #28]
  411ed4:	str	x1, [sp, #16]
  411ed8:	ldr	x1, [sp, #16]
  411edc:	ldr	w0, [sp, #28]
  411ee0:	bl	411160 <save_argc_argv>
  411ee4:	ldr	x1, [sp, #16]
  411ee8:	ldr	w0, [sp, #28]
  411eec:	bl	411af0 <run>
  411ef0:	str	w0, [sp, #44]
  411ef4:	bl	4049b0 <ask_password_agent_close@plt>
  411ef8:	bl	404460 <polkit_agent_close@plt>
  411efc:	bl	4049c0 <pager_close@plt>
  411f00:	bl	404d60 <mac_selinux_finish@plt>
  411f04:	bl	4111bc <static_destruct>
  411f08:	ldr	w0, [sp, #44]
  411f0c:	lsr	w0, w0, #31
  411f10:	ldp	x29, x30, [sp], #48
  411f14:	ret

0000000000411f18 <__libc_csu_init>:
  411f18:	stp	x29, x30, [sp, #-64]!
  411f1c:	mov	x29, sp
  411f20:	stp	x19, x20, [sp, #16]
  411f24:	adrp	x20, 427000 <__FRAME_END__+0x1064c>
  411f28:	add	x20, x20, #0x720
  411f2c:	stp	x21, x22, [sp, #32]
  411f30:	adrp	x21, 427000 <__FRAME_END__+0x1064c>
  411f34:	add	x21, x21, #0x718
  411f38:	sub	x20, x20, x21
  411f3c:	mov	w22, w0
  411f40:	stp	x23, x24, [sp, #48]
  411f44:	mov	x23, x1
  411f48:	mov	x24, x2
  411f4c:	bl	404230 <_init>
  411f50:	cmp	xzr, x20, asr #3
  411f54:	b.eq	411f80 <__libc_csu_init+0x68>  // b.none
  411f58:	asr	x20, x20, #3
  411f5c:	mov	x19, #0x0                   	// #0
  411f60:	ldr	x3, [x21, x19, lsl #3]
  411f64:	mov	x2, x24
  411f68:	add	x19, x19, #0x1
  411f6c:	mov	x1, x23
  411f70:	mov	w0, w22
  411f74:	blr	x3
  411f78:	cmp	x20, x19
  411f7c:	b.ne	411f60 <__libc_csu_init+0x48>  // b.any
  411f80:	ldp	x19, x20, [sp, #16]
  411f84:	ldp	x21, x22, [sp, #32]
  411f88:	ldp	x23, x24, [sp, #48]
  411f8c:	ldp	x29, x30, [sp], #64
  411f90:	ret
  411f94:	nop

0000000000411f98 <__libc_csu_fini>:
  411f98:	ret
  411f9c:	nop

0000000000411fa0 <lstat64>:
  411fa0:	mov	x2, x1
  411fa4:	mov	x1, x0
  411fa8:	mov	w0, #0x0                   	// #0
  411fac:	b	4048e0 <__lxstat64@plt>

Disassembly of section .fini:

0000000000411fb0 <_fini>:
  411fb0:	stp	x29, x30, [sp, #-16]!
  411fb4:	mov	x29, sp
  411fb8:	ldp	x29, x30, [sp], #16
  411fbc:	ret
