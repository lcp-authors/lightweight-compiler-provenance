
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//seq_gcc_-O2:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000000fc8 <_init>:
 fc8:	stp	x29, x30, [sp, #-16]!
 fcc:	mov	x29, sp
 fd0:	bl	11f0 <call_weak_fn>
 fd4:	ldp	x29, x30, [sp], #16
 fd8:	ret

Disassembly of section .plt:

0000000000000fe0 <.plt>:
     fe0:	stp	x16, x30, [sp, #-16]!
     fe4:	adrp	x16, 14000 <__FRAME_END__+0xff64>
     fe8:	ldr	x17, [x16, #4088]
     fec:	add	x16, x16, #0xff8
     ff0:	br	x17
     ff4:	nop
     ff8:	nop
     ffc:	nop

0000000000001000 <memcpy@plt>:
    1000:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1004:	ldr	x17, [x16]
    1008:	add	x16, x16, #0x0
    100c:	br	x17

0000000000001010 <all_digits@plt>:
    1010:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1014:	ldr	x17, [x16, #8]
    1018:	add	x16, x16, #0x8
    101c:	br	x17

0000000000001020 <fputs@plt>:
    1020:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1024:	ldr	x17, [x16, #16]
    1028:	add	x16, x16, #0x10
    102c:	br	x17

0000000000001030 <builtin_error@plt>:
    1030:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1034:	ldr	x17, [x16, #24]
    1038:	add	x16, x16, #0x18
    103c:	br	x17

0000000000001040 <builtin_warning@plt>:
    1040:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1044:	ldr	x17, [x16, #32]
    1048:	add	x16, x16, #0x20
    104c:	br	x17

0000000000001050 <__cxa_finalize@plt>:
    1050:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1054:	ldr	x17, [x16, #40]
    1058:	add	x16, x16, #0x28
    105c:	br	x17

0000000000001060 <sprintf@plt>:
    1060:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1064:	ldr	x17, [x16, #48]
    1068:	add	x16, x16, #0x30
    106c:	br	x17

0000000000001070 <snprintf@plt>:
    1070:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1074:	ldr	x17, [x16, #56]
    1078:	add	x16, x16, #0x38
    107c:	br	x17

0000000000001080 <locale_decpoint@plt>:
    1080:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1084:	ldr	x17, [x16, #64]
    1088:	add	x16, x16, #0x40
    108c:	br	x17

0000000000001090 <print_intseq@plt>:
    1090:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1094:	ldr	x17, [x16, #72]
    1098:	add	x16, x16, #0x48
    109c:	br	x17

00000000000010a0 <builtin_help@plt>:
    10a0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10a4:	ldr	x17, [x16, #80]
    10a8:	add	x16, x16, #0x50
    10ac:	br	x17

00000000000010b0 <xmalloc@plt>:
    10b0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10b4:	ldr	x17, [x16, #88]
    10b8:	add	x16, x16, #0x58
    10bc:	br	x17

00000000000010c0 <builtin_usage@plt>:
    10c0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10c4:	ldr	x17, [x16, #96]
    10c8:	add	x16, x16, #0x60
    10cc:	br	x17

00000000000010d0 <strerror@plt>:
    10d0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10d4:	ldr	x17, [x16, #104]
    10d8:	add	x16, x16, #0x68
    10dc:	br	x17

00000000000010e0 <__gmon_start__@plt>:
    10e0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10e4:	ldr	x17, [x16, #112]
    10e8:	add	x16, x16, #0x70
    10ec:	br	x17

00000000000010f0 <__ctype_b_loc@plt>:
    10f0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10f4:	ldr	x17, [x16, #120]
    10f8:	add	x16, x16, #0x78
    10fc:	br	x17

0000000000001100 <strtold@plt>:
    1100:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1104:	ldr	x17, [x16, #128]
    1108:	add	x16, x16, #0x80
    110c:	br	x17

0000000000001110 <print_fltseq@plt>:
    1110:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1114:	ldr	x17, [x16, #136]
    1118:	add	x16, x16, #0x88
    111c:	br	x17

0000000000001120 <free@plt>:
    1120:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1124:	ldr	x17, [x16, #144]
    1128:	add	x16, x16, #0x90
    112c:	br	x17

0000000000001130 <internal_getopt@plt>:
    1130:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1134:	ldr	x17, [x16, #152]
    1138:	add	x16, x16, #0x98
    113c:	br	x17

0000000000001140 <reset_internal_getopt@plt>:
    1140:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1144:	ldr	x17, [x16, #160]
    1148:	add	x16, x16, #0xa0
    114c:	br	x17

0000000000001150 <strspn@plt>:
    1150:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1154:	ldr	x17, [x16, #168]
    1158:	add	x16, x16, #0xa8
    115c:	br	x17

0000000000001160 <strchr@plt>:
    1160:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1164:	ldr	x17, [x16, #176]
    1168:	add	x16, x16, #0xb0
    116c:	br	x17

0000000000001170 <sh_chkwrite@plt>:
    1170:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1174:	ldr	x17, [x16, #184]
    1178:	add	x16, x16, #0xb8
    117c:	br	x17

0000000000001180 <strcpy@plt>:
    1180:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1184:	ldr	x17, [x16, #192]
    1188:	add	x16, x16, #0xc0
    118c:	br	x17

0000000000001190 <termsig_handler@plt>:
    1190:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1194:	ldr	x17, [x16, #200]
    1198:	add	x16, x16, #0xc8
    119c:	br	x17

00000000000011a0 <width_needed@plt>:
    11a0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11a4:	ldr	x17, [x16, #208]
    11a8:	add	x16, x16, #0xd0
    11ac:	br	x17

00000000000011b0 <throw_to_top_level@plt>:
    11b0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11b4:	ldr	x17, [x16, #216]
    11b8:	add	x16, x16, #0xd8
    11bc:	br	x17

00000000000011c0 <printf@plt>:
    11c0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11c4:	ldr	x17, [x16, #224]
    11c8:	add	x16, x16, #0xe0
    11cc:	br	x17

00000000000011d0 <__errno_location@plt>:
    11d0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11d4:	ldr	x17, [x16, #232]
    11d8:	add	x16, x16, #0xe8
    11dc:	br	x17

00000000000011e0 <sh_invalidnum@plt>:
    11e0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11e4:	ldr	x17, [x16, #240]
    11e8:	add	x16, x16, #0xf0
    11ec:	br	x17

Disassembly of section .text:

00000000000011f0 <call_weak_fn>:
    11f0:	adrp	x0, 14000 <__FRAME_END__+0xff64>
    11f4:	ldr	x0, [x0, #4032]
    11f8:	cbz	x0, 1200 <call_weak_fn+0x10>
    11fc:	b	10e0 <__gmon_start__@plt>
    1200:	ret
    1204:	nop

0000000000001208 <deregister_tm_clones>:
    1208:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    120c:	add	x0, x0, #0x1b0
    1210:	adrp	x1, 15000 <memcpy@GLIBC_2.17>
    1214:	add	x1, x1, #0x1b0
    1218:	cmp	x1, x0
    121c:	b.eq	1234 <deregister_tm_clones+0x2c>  // b.none
    1220:	adrp	x1, 14000 <__FRAME_END__+0xff64>
    1224:	ldr	x1, [x1, #3992]
    1228:	cbz	x1, 1234 <deregister_tm_clones+0x2c>
    122c:	mov	x16, x1
    1230:	br	x16
    1234:	ret

0000000000001238 <register_tm_clones>:
    1238:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    123c:	add	x0, x0, #0x1b0
    1240:	adrp	x1, 15000 <memcpy@GLIBC_2.17>
    1244:	add	x1, x1, #0x1b0
    1248:	sub	x1, x1, x0
    124c:	lsr	x2, x1, #63
    1250:	add	x1, x2, x1, asr #3
    1254:	cmp	xzr, x1, asr #1
    1258:	asr	x1, x1, #1
    125c:	b.eq	1274 <register_tm_clones+0x3c>  // b.none
    1260:	adrp	x2, 14000 <__FRAME_END__+0xff64>
    1264:	ldr	x2, [x2, #4064]
    1268:	cbz	x2, 1274 <register_tm_clones+0x3c>
    126c:	mov	x16, x2
    1270:	br	x16
    1274:	ret

0000000000001278 <__do_global_dtors_aux>:
    1278:	stp	x29, x30, [sp, #-32]!
    127c:	mov	x29, sp
    1280:	str	x19, [sp, #16]
    1284:	adrp	x19, 15000 <memcpy@GLIBC_2.17>
    1288:	ldrb	w0, [x19, #432]
    128c:	cbnz	w0, 12b4 <__do_global_dtors_aux+0x3c>
    1290:	adrp	x0, 14000 <__FRAME_END__+0xff64>
    1294:	ldr	x0, [x0, #4000]
    1298:	cbz	x0, 12a8 <__do_global_dtors_aux+0x30>
    129c:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    12a0:	ldr	x0, [x0, #248]
    12a4:	bl	1050 <__cxa_finalize@plt>
    12a8:	bl	1208 <deregister_tm_clones>
    12ac:	mov	w0, #0x1                   	// #1
    12b0:	strb	w0, [x19, #432]
    12b4:	ldr	x19, [sp, #16]
    12b8:	ldp	x29, x30, [sp], #32
    12bc:	ret

00000000000012c0 <frame_dummy>:
    12c0:	b	1238 <register_tm_clones>
    12c4:	nop

00000000000012c8 <getfloatmax>:
    12c8:	stp	x29, x30, [sp, #-64]!
    12cc:	mov	x29, sp
    12d0:	stp	x19, x20, [sp, #16]
    12d4:	mov	x20, x0
    12d8:	bl	11d0 <__errno_location@plt>
    12dc:	mov	x19, x0
    12e0:	add	x1, sp, #0x38
    12e4:	mov	x0, x20
    12e8:	str	wzr, [x19]
    12ec:	bl	1100 <strtold@plt>
    12f0:	ldr	x0, [sp, #56]
    12f4:	ldrb	w0, [x0]
    12f8:	cbnz	w0, 132c <getfloatmax+0x64>
    12fc:	ldr	w0, [x19]
    1300:	cmp	w0, #0x22
    1304:	b.eq	134c <getfloatmax+0x84>  // b.none
    1308:	movi	v1.2d, #0x0
    130c:	str	q0, [sp, #32]
    1310:	bl	29c8 <__eqtf2>
    1314:	ldr	q0, [sp, #32]
    1318:	cbnz	w0, 1320 <getfloatmax+0x58>
    131c:	movi	v0.2d, #0x0
    1320:	ldp	x19, x20, [sp, #16]
    1324:	ldp	x29, x30, [sp], #64
    1328:	ret
    132c:	mov	x0, x20
    1330:	str	q0, [sp, #32]
    1334:	bl	11e0 <sh_invalidnum@plt>
    1338:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    133c:	mov	w1, #0x1                   	// #1
    1340:	ldr	q0, [sp, #32]
    1344:	str	w1, [x0, #440]
    1348:	b	1308 <getfloatmax+0x40>
    134c:	str	q0, [sp, #32]
    1350:	bl	10d0 <strerror@plt>
    1354:	mov	x1, x20
    1358:	mov	x2, x0
    135c:	adrp	x0, 3000 <__multf3+0x2a8>
    1360:	add	x0, x0, #0x780
    1364:	bl	1030 <builtin_error@plt>
    1368:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    136c:	mov	w1, #0x1                   	// #1
    1370:	ldr	q0, [sp, #32]
    1374:	str	w1, [x0, #440]
    1378:	b	1308 <getfloatmax+0x40>
    137c:	nop

0000000000001380 <getprec.constprop.0>:
    1380:	stp	x29, x30, [sp, #-48]!
    1384:	adrp	x1, 15000 <memcpy@GLIBC_2.17>
    1388:	add	x1, x1, #0x1b8
    138c:	mov	x29, sp
    1390:	stp	x21, x22, [sp, #32]
    1394:	add	x0, x1, #0x8
    1398:	mov	w22, #0x0                   	// #0
    139c:	ldrb	w1, [x1, #4]
    13a0:	bl	1160 <strchr@plt>
    13a4:	cbz	x0, 13e0 <getprec.constprop.0+0x60>
    13a8:	add	x21, x0, #0x1
    13ac:	stp	x19, x20, [sp, #16]
    13b0:	mov	x20, #0x0                   	// #0
    13b4:	b	13cc <getprec.constprop.0+0x4c>
    13b8:	bl	10f0 <__ctype_b_loc@plt>
    13bc:	ubfiz	x19, x19, #1, #8
    13c0:	ldr	x0, [x0]
    13c4:	ldrh	w0, [x0, x19]
    13c8:	tbz	w0, #11, 13dc <getprec.constprop.0+0x5c>
    13cc:	ldrb	w19, [x21, x20]
    13d0:	mov	w22, w20
    13d4:	add	x20, x20, #0x1
    13d8:	cbnz	w19, 13b8 <getprec.constprop.0+0x38>
    13dc:	ldp	x19, x20, [sp, #16]
    13e0:	mov	w0, w22
    13e4:	ldp	x21, x22, [sp, #32]
    13e8:	ldp	x29, x30, [sp], #48
    13ec:	ret

00000000000013f0 <print_fltseq>:
    13f0:	stp	x29, x30, [sp, #-128]!
    13f4:	mov	x29, sp
    13f8:	str	q1, [sp, #96]
    13fc:	movi	v1.2d, #0x0
    1400:	str	q0, [sp, #64]
    1404:	str	q2, [sp, #80]
    1408:	str	q0, [sp, #112]
    140c:	ldr	q0, [sp, #80]
    1410:	stp	x21, x22, [sp, #32]
    1414:	adrp	x21, 14000 <__FRAME_END__+0xff64>
    1418:	adrp	x22, 14000 <__FRAME_END__+0xff64>
    141c:	stp	x19, x20, [sp, #16]
    1420:	adrp	x20, 3000 <__multf3+0x2a8>
    1424:	mov	w19, #0x0                   	// #0
    1428:	str	x23, [sp, #48]
    142c:	mov	x23, x0
    1430:	bl	2ad0 <__getf2>
    1434:	add	x20, x20, #0x968
    1438:	ldr	x21, [x21, #4048]
    143c:	ldr	x22, [x22, #4024]
    1440:	ldr	q0, [sp, #64]
    1444:	ldr	q1, [sp, #96]
    1448:	tbnz	w0, #31, 14e4 <print_fltseq+0xf4>
    144c:	nop
    1450:	bl	2c18 <__letf2>
    1454:	cmp	w0, #0x0
    1458:	cset	w1, le
    145c:	cbz	w1, 14f4 <print_fltseq+0x104>
    1460:	ldr	w0, [x21]
    1464:	cbnz	w0, 1538 <print_fltseq+0x148>
    1468:	ldr	w0, [x22]
    146c:	cbnz	w0, 1530 <print_fltseq+0x140>
    1470:	ldrb	w0, [x20]
    1474:	cbz	w0, 1494 <print_fltseq+0xa4>
    1478:	adrp	x1, 14000 <__FRAME_END__+0xff64>
    147c:	mov	x0, x20
    1480:	ldr	x1, [x1, #4016]
    1484:	ldr	x1, [x1]
    1488:	bl	1020 <fputs@plt>
    148c:	cmn	w0, #0x1
    1490:	b.eq	1544 <print_fltseq+0x154>  // b.none
    1494:	ldr	q0, [sp, #64]
    1498:	mov	x0, x23
    149c:	bl	11c0 <printf@plt>
    14a0:	tbnz	w0, #31, 1544 <print_fltseq+0x154>
    14a4:	adrp	x1, 15000 <memcpy@GLIBC_2.17>
    14a8:	add	w19, w19, #0x1
    14ac:	mov	w0, w19
    14b0:	ldr	x20, [x1, #480]
    14b4:	bl	3540 <__floatsitf>
    14b8:	ldr	q1, [sp, #80]
    14bc:	bl	2d58 <__multf3>
    14c0:	ldr	q1, [sp, #112]
    14c4:	bl	1ea0 <__addtf3>
    14c8:	str	q0, [sp, #64]
    14cc:	movi	v1.2d, #0x0
    14d0:	ldr	q0, [sp, #80]
    14d4:	bl	2ad0 <__getf2>
    14d8:	ldr	q0, [sp, #64]
    14dc:	ldr	q1, [sp, #96]
    14e0:	tbz	w0, #31, 1450 <print_fltseq+0x60>
    14e4:	bl	2ad0 <__getf2>
    14e8:	mvn	w1, w0
    14ec:	lsr	w1, w1, #31
    14f0:	cbnz	w1, 1460 <print_fltseq+0x70>
    14f4:	cbz	w19, 1518 <print_fltseq+0x128>
    14f8:	adrp	x1, 14000 <__FRAME_END__+0xff64>
    14fc:	adrp	x0, 3000 <__multf3+0x2a8>
    1500:	add	x0, x0, #0xc80
    1504:	ldr	x1, [x1, #4016]
    1508:	ldr	x1, [x1]
    150c:	bl	1020 <fputs@plt>
    1510:	cmn	w0, #0x1
    1514:	b.eq	1544 <print_fltseq+0x154>  // b.none
    1518:	ldp	x19, x20, [sp, #16]
    151c:	mov	w0, #0x0                   	// #0
    1520:	ldp	x21, x22, [sp, #32]
    1524:	ldr	x23, [sp, #48]
    1528:	ldp	x29, x30, [sp], #128
    152c:	b	1170 <sh_chkwrite@plt>
    1530:	bl	11b0 <throw_to_top_level@plt>
    1534:	b	1470 <print_fltseq+0x80>
    1538:	ldr	w0, [x21]
    153c:	bl	1190 <termsig_handler@plt>
    1540:	b	1468 <print_fltseq+0x78>
    1544:	ldp	x19, x20, [sp, #16]
    1548:	mov	w0, #0x1                   	// #1
    154c:	ldp	x21, x22, [sp, #32]
    1550:	ldr	x23, [sp, #48]
    1554:	ldp	x29, x30, [sp], #128
    1558:	b	1170 <sh_chkwrite@plt>
    155c:	nop

0000000000001560 <width_needed>:
    1560:	cmp	x0, #0x0
    1564:	mov	x2, #0xcccccccccccccccc    	// #-3689348814741910324
    1568:	cneg	x1, x0, lt  // lt = tstop
    156c:	lsr	x0, x0, #63
    1570:	movk	x2, #0xcccd
    1574:	nop
    1578:	umulh	x1, x1, x2
    157c:	add	w0, w0, #0x1
    1580:	cmp	xzr, x1, lsr #3
    1584:	lsr	x1, x1, #3
    1588:	b.ne	1578 <width_needed+0x18>  // b.any
    158c:	ret

0000000000001590 <print_intseq>:
    1590:	stp	x29, x30, [sp, #-128]!
    1594:	mov	x29, sp
    1598:	stp	x25, x26, [sp, #64]
    159c:	adrp	x25, 15000 <memcpy@GLIBC_2.17>
    15a0:	add	x3, x25, #0x1b8
    15a4:	stp	x19, x20, [sp, #16]
    15a8:	mov	x20, x1
    15ac:	ldr	w1, [x3, #48]
    15b0:	stp	x21, x22, [sp, #32]
    15b4:	mov	x22, x0
    15b8:	stp	x23, x24, [sp, #48]
    15bc:	mov	x24, x2
    15c0:	stp	x27, x28, [sp, #80]
    15c4:	cbnz	w1, 16cc <print_intseq+0x13c>
    15c8:	adrp	x21, 14000 <__FRAME_END__+0xff64>
    15cc:	adrp	x23, 14000 <__FRAME_END__+0xff64>
    15d0:	adrp	x28, 3000 <__multf3+0x2a8>
    15d4:	mov	x19, x22
    15d8:	ldr	x21, [x21, #4048]
    15dc:	add	x28, x28, #0x968
    15e0:	ldr	x23, [x23, #4024]
    15e4:	add	x26, sp, #0x68
    15e8:	b	1638 <print_intseq+0xa8>
    15ec:	cmp	x19, x20
    15f0:	add	x27, x25, #0x1b8
    15f4:	cset	w0, le
    15f8:	cbz	w0, 1650 <print_intseq+0xc0>
    15fc:	ldr	w0, [x21]
    1600:	cbnz	w0, 169c <print_intseq+0x10c>
    1604:	ldr	w0, [x23]
    1608:	cbnz	w0, 1694 <print_intseq+0x104>
    160c:	ldr	w3, [x27, #48]
    1610:	adrp	x0, 3000 <__multf3+0x2a8>
    1614:	add	x0, x0, #0x790
    1618:	mov	x2, x19
    161c:	cmp	w3, #0x0
    1620:	mov	x1, x28
    1624:	csel	x0, x26, x0, ne  // ne = any
    1628:	add	x19, x19, x24
    162c:	bl	11c0 <printf@plt>
    1630:	tbnz	w0, #31, 16a8 <print_intseq+0x118>
    1634:	ldr	x28, [x27, #40]
    1638:	cmp	x22, x20
    163c:	b.le	15ec <print_intseq+0x5c>
    1640:	cmp	x19, x20
    1644:	add	x27, x25, #0x1b8
    1648:	cset	w0, ge  // ge = tcont
    164c:	cbnz	w0, 15fc <print_intseq+0x6c>
    1650:	adrp	x1, 14000 <__FRAME_END__+0xff64>
    1654:	adrp	x0, 3000 <__multf3+0x2a8>
    1658:	add	x0, x0, #0xc80
    165c:	ldr	x1, [x1, #4016]
    1660:	ldr	x1, [x1]
    1664:	bl	1020 <fputs@plt>
    1668:	cmn	w0, #0x1
    166c:	b.eq	16a8 <print_intseq+0x118>  // b.none
    1670:	mov	w0, #0x0                   	// #0
    1674:	bl	1170 <sh_chkwrite@plt>
    1678:	ldp	x19, x20, [sp, #16]
    167c:	ldp	x21, x22, [sp, #32]
    1680:	ldp	x23, x24, [sp, #48]
    1684:	ldp	x25, x26, [sp, #64]
    1688:	ldp	x27, x28, [sp, #80]
    168c:	ldp	x29, x30, [sp], #128
    1690:	ret
    1694:	bl	11b0 <throw_to_top_level@plt>
    1698:	b	160c <print_intseq+0x7c>
    169c:	ldr	w0, [x21]
    16a0:	bl	1190 <termsig_handler@plt>
    16a4:	b	1604 <print_intseq+0x74>
    16a8:	mov	w0, #0x1                   	// #1
    16ac:	bl	1170 <sh_chkwrite@plt>
    16b0:	ldp	x19, x20, [sp, #16]
    16b4:	ldp	x21, x22, [sp, #32]
    16b8:	ldp	x23, x24, [sp, #48]
    16bc:	ldp	x25, x26, [sp, #64]
    16c0:	ldp	x27, x28, [sp, #80]
    16c4:	ldp	x29, x30, [sp], #128
    16c8:	ret
    16cc:	bl	11a0 <width_needed@plt>
    16d0:	mov	w19, w0
    16d4:	mov	x0, x20
    16d8:	bl	11a0 <width_needed@plt>
    16dc:	cmp	w19, w0
    16e0:	adrp	x2, 3000 <__multf3+0x2a8>
    16e4:	csel	w3, w19, w0, ge  // ge = tcont
    16e8:	add	x2, x2, #0x798
    16ec:	add	x0, sp, #0x68
    16f0:	mov	x1, #0x14                  	// #20
    16f4:	bl	1070 <snprintf@plt>
    16f8:	b	15c8 <print_intseq+0x38>
    16fc:	nop

0000000000001700 <seq_builtin>:
    1700:	stp	x29, x30, [sp, #-144]!
    1704:	adrp	x1, 3000 <__multf3+0x2a8>
    1708:	add	x1, x1, #0x7c0
    170c:	mov	x29, sp
    1710:	stp	x23, x24, [sp, #48]
    1714:	adrp	x23, 15000 <memcpy@GLIBC_2.17>
    1718:	add	x2, x23, #0x1b8
    171c:	stp	x21, x22, [sp, #32]
    1720:	adrp	x21, 14000 <__FRAME_END__+0xff64>
    1724:	adrp	x22, 3000 <__multf3+0x2a8>
    1728:	stp	x25, x26, [sp, #64]
    172c:	adrp	x25, 14000 <__FRAME_END__+0xff64>
    1730:	add	x22, x22, #0x7c8
    1734:	stp	x19, x20, [sp, #16]
    1738:	mov	x20, x0
    173c:	mov	x24, #0x0                   	// #0
    1740:	str	x1, [x2, #40]
    1744:	str	wzr, [x2, #48]
    1748:	bl	1140 <reset_internal_getopt@plt>
    174c:	ldr	x26, [x25, #4040]
    1750:	ldr	x21, [x21, #4008]
    1754:	ldr	x19, [x21]
    1758:	cbz	x19, 17b8 <seq_builtin+0xb8>
    175c:	ldr	x0, [x19, #8]
    1760:	cbz	x0, 1778 <seq_builtin+0x78>
    1764:	ldr	x0, [x0]
    1768:	cbz	x0, 1778 <seq_builtin+0x78>
    176c:	ldrb	w1, [x0]
    1770:	cmp	w1, #0x2d
    1774:	b.eq	182c <seq_builtin+0x12c>  // b.none
    1778:	mov	x1, x22
    177c:	mov	x0, x20
    1780:	bl	1130 <internal_getopt@plt>
    1784:	cmn	w0, #0x1
    1788:	b.eq	1854 <seq_builtin+0x154>  // b.none
    178c:	cmp	w0, #0x73
    1790:	b.eq	17fc <seq_builtin+0xfc>  // b.none
    1794:	b.gt	17c4 <seq_builtin+0xc4>
    1798:	cmn	w0, #0x63
    179c:	b.eq	180c <seq_builtin+0x10c>  // b.none
    17a0:	cmp	w0, #0x66
    17a4:	b.ne	17dc <seq_builtin+0xdc>  // b.any
    17a8:	ldr	x0, [x25, #4040]
    17ac:	ldr	x19, [x21]
    17b0:	ldr	x24, [x0]
    17b4:	cbnz	x19, 175c <seq_builtin+0x5c>
    17b8:	cbz	x20, 1778 <seq_builtin+0x78>
    17bc:	mov	x19, x20
    17c0:	b	175c <seq_builtin+0x5c>
    17c4:	cmp	w0, #0x77
    17c8:	b.ne	17dc <seq_builtin+0xdc>  // b.any
    17cc:	add	x0, x23, #0x1b8
    17d0:	mov	w1, #0x1                   	// #1
    17d4:	str	w1, [x0, #48]
    17d8:	b	1754 <seq_builtin+0x54>
    17dc:	bl	10c0 <builtin_usage@plt>
    17e0:	mov	w0, #0x102                 	// #258
    17e4:	ldp	x19, x20, [sp, #16]
    17e8:	ldp	x21, x22, [sp, #32]
    17ec:	ldp	x23, x24, [sp, #48]
    17f0:	ldp	x25, x26, [sp, #64]
    17f4:	ldp	x29, x30, [sp], #144
    17f8:	ret
    17fc:	add	x0, x23, #0x1b8
    1800:	ldr	x1, [x26]
    1804:	str	x1, [x0, #40]
    1808:	b	1754 <seq_builtin+0x54>
    180c:	bl	10a0 <builtin_help@plt>
    1810:	mov	w0, #0x102                 	// #258
    1814:	ldp	x19, x20, [sp, #16]
    1818:	ldp	x21, x22, [sp, #32]
    181c:	ldp	x23, x24, [sp, #48]
    1820:	ldp	x25, x26, [sp, #64]
    1824:	ldp	x29, x30, [sp], #144
    1828:	ret
    182c:	ldrb	w1, [x0, #1]
    1830:	sub	w0, w1, #0x30
    1834:	cmp	w1, #0x2e
    1838:	and	w0, w0, #0xff
    183c:	ccmp	w0, #0x9, #0x0, ne  // ne = any
    1840:	b.hi	1778 <seq_builtin+0x78>  // b.pmore
    1844:	adrp	x0, 14000 <__FRAME_END__+0xff64>
    1848:	ldr	x0, [x0, #4056]
    184c:	str	x19, [x0]
    1850:	b	1864 <seq_builtin+0x164>
    1854:	adrp	x0, 14000 <__FRAME_END__+0xff64>
    1858:	ldr	x0, [x0, #4056]
    185c:	ldr	x19, [x0]
    1860:	cbz	x19, 1a34 <seq_builtin+0x334>
    1864:	ldr	x20, [x19]
    1868:	mov	w22, #0x1                   	// #1
    186c:	cbz	x20, 1a40 <seq_builtin+0x340>
    1870:	mov	x0, x20
    1874:	add	w22, w22, #0x1
    1878:	ldr	x20, [x20]
    187c:	cbnz	x20, 1870 <seq_builtin+0x170>
    1880:	cmp	w22, #0x3
    1884:	b.gt	1a34 <seq_builtin+0x334>
    1888:	ldr	x0, [x0, #8]
    188c:	str	wzr, [x23, #440]
    1890:	ldr	x21, [x0]
    1894:	mov	x0, x21
    1898:	bl	12c8 <getfloatmax>
    189c:	ldr	w0, [x23, #440]
    18a0:	str	q0, [sp, #96]
    18a4:	cbz	w0, 18b0 <seq_builtin+0x1b0>
    18a8:	mov	w0, #0x1                   	// #1
    18ac:	b	17e4 <seq_builtin+0xe4>
    18b0:	ldr	x0, [x19, #8]
    18b4:	ldr	x20, [x0]
    18b8:	mov	x0, x20
    18bc:	bl	12c8 <getfloatmax>
    18c0:	ldr	w0, [x23, #440]
    18c4:	str	q0, [sp, #112]
    18c8:	cbnz	w0, 18a8 <seq_builtin+0x1a8>
    18cc:	cmp	w22, #0x3
    18d0:	b.ne	1a70 <seq_builtin+0x370>  // b.any
    18d4:	ldr	x0, [x19]
    18d8:	ldr	x0, [x0, #8]
    18dc:	ldr	x19, [x0]
    18e0:	mov	x0, x19
    18e4:	bl	12c8 <getfloatmax>
    18e8:	ldr	w0, [x23, #440]
    18ec:	str	q0, [sp, #128]
    18f0:	cbnz	w0, 18a8 <seq_builtin+0x1a8>
    18f4:	movi	v1.2d, #0x0
    18f8:	bl	29c8 <__eqtf2>
    18fc:	cbz	w0, 1c50 <seq_builtin+0x550>
    1900:	movi	v1.2d, #0x0
    1904:	ldr	q0, [sp, #128]
    1908:	bl	2c18 <__letf2>
    190c:	tbnz	w0, #31, 1af4 <seq_builtin+0x3f4>
    1910:	movi	v1.2d, #0x0
    1914:	ldr	q0, [sp, #128]
    1918:	bl	2ad0 <__getf2>
    191c:	cmp	w0, #0x0
    1920:	b.le	1934 <seq_builtin+0x234>
    1924:	ldr	q0, [sp, #96]
    1928:	ldr	q1, [sp, #112]
    192c:	bl	2c18 <__letf2>
    1930:	tbnz	w0, #31, 1ac4 <seq_builtin+0x3c4>
    1934:	mov	x1, #0x0                   	// #0
    1938:	cbz	x24, 1b14 <seq_builtin+0x414>
    193c:	nop
    1940:	ldrb	w0, [x24, x1]
    1944:	mov	x2, #0x1                   	// #1
    1948:	cmp	w0, #0x25
    194c:	b.eq	1974 <seq_builtin+0x274>  // b.none
    1950:	cbz	w0, 195c <seq_builtin+0x25c>
    1954:	add	x1, x1, x2
    1958:	b	1940 <seq_builtin+0x240>
    195c:	mov	x1, x24
    1960:	adrp	x0, 3000 <__multf3+0x2a8>
    1964:	add	x0, x0, #0x7f8
    1968:	bl	1030 <builtin_error@plt>
    196c:	mov	w0, #0x1                   	// #1
    1970:	b	17e4 <seq_builtin+0xe4>
    1974:	add	x22, x1, x2
    1978:	mov	x2, #0x2                   	// #2
    197c:	add	x0, x24, x22
    1980:	ldrb	w3, [x24, x22]
    1984:	cmp	w3, #0x25
    1988:	b.eq	1954 <seq_builtin+0x254>  // b.none
    198c:	adrp	x1, 3000 <__multf3+0x2a8>
    1990:	adrp	x26, 3000 <__multf3+0x2a8>
    1994:	add	x1, x1, #0x818
    1998:	add	x26, x26, #0x820
    199c:	bl	1150 <strspn@plt>
    19a0:	add	x22, x22, x0
    19a4:	add	x0, x24, x22
    19a8:	mov	x1, x26
    19ac:	bl	1150 <strspn@plt>
    19b0:	add	x25, x22, x0
    19b4:	ldrb	w0, [x24, x25]
    19b8:	cmp	w0, #0x2e
    19bc:	b.ne	19d8 <seq_builtin+0x2d8>  // b.any
    19c0:	add	x25, x25, #0x1
    19c4:	mov	x1, x26
    19c8:	add	x0, x24, x25
    19cc:	bl	1150 <strspn@plt>
    19d0:	add	x25, x25, x0
    19d4:	ldrb	w0, [x24, x25]
    19d8:	cmp	w0, #0x4c
    19dc:	cinc	x4, x25, eq  // eq = none
    19e0:	add	x22, x24, x4
    19e4:	ldrb	w2, [x24, x4]
    19e8:	cbz	w2, 1df0 <seq_builtin+0x6f0>
    19ec:	sub	w0, w2, #0x41
    19f0:	str	x27, [sp, #80]
    19f4:	and	w3, w0, #0xff
    19f8:	cmp	w3, #0x26
    19fc:	b.hi	1a18 <seq_builtin+0x318>  // b.pmore
    1a00:	mov	x0, #0x1                   	// #1
    1a04:	mov	x1, #0x71                  	// #113
    1a08:	movk	x1, #0x71, lsl #32
    1a0c:	lsl	x0, x0, x3
    1a10:	tst	x0, x1
    1a14:	b.ne	1b84 <seq_builtin+0x484>  // b.any
    1a18:	mov	x1, x24
    1a1c:	adrp	x0, 3000 <__multf3+0x2a8>
    1a20:	add	x0, x0, #0x848
    1a24:	bl	1030 <builtin_error@plt>
    1a28:	mov	w0, #0x1                   	// #1
    1a2c:	ldr	x27, [sp, #80]
    1a30:	b	17e4 <seq_builtin+0xe4>
    1a34:	bl	10c0 <builtin_usage@plt>
    1a38:	mov	w0, #0x1                   	// #1
    1a3c:	b	17e4 <seq_builtin+0xe4>
    1a40:	ldr	x0, [x19, #8]
    1a44:	adrp	x1, 3000 <__multf3+0x2a8>
    1a48:	add	x1, x1, #0xc60
    1a4c:	str	wzr, [x23, #440]
    1a50:	ldr	x21, [x0]
    1a54:	ldr	q0, [x1]
    1a58:	mov	x0, x21
    1a5c:	str	q0, [sp, #112]
    1a60:	bl	12c8 <getfloatmax>
    1a64:	ldr	w0, [x23, #440]
    1a68:	str	q0, [sp, #96]
    1a6c:	cbnz	w0, 18a8 <seq_builtin+0x1a8>
    1a70:	ldr	q0, [sp, #96]
    1a74:	ldr	q1, [sp, #112]
    1a78:	bl	2ad0 <__getf2>
    1a7c:	tbnz	w0, #31, 1a98 <seq_builtin+0x398>
    1a80:	adrp	x0, 3000 <__multf3+0x2a8>
    1a84:	add	x0, x0, #0xc60
    1a88:	mov	x19, #0x0                   	// #0
    1a8c:	ldr	q0, [x0]
    1a90:	str	q0, [sp, #128]
    1a94:	b	1924 <seq_builtin+0x224>
    1a98:	ldr	q0, [sp, #96]
    1a9c:	ldr	q1, [sp, #112]
    1aa0:	bl	2ad0 <__getf2>
    1aa4:	cmp	w0, #0x0
    1aa8:	b.gt	1b08 <seq_builtin+0x408>
    1aac:	adrp	x0, 3000 <__multf3+0x2a8>
    1ab0:	add	x0, x0, #0xc70
    1ab4:	mov	x19, #0x0                   	// #0
    1ab8:	ldr	q0, [x0]
    1abc:	str	q0, [sp, #128]
    1ac0:	b	1934 <seq_builtin+0x234>
    1ac4:	ldr	q0, [sp, #96]
    1ac8:	ldr	q1, [sp, #112]
    1acc:	bl	2ad0 <__getf2>
    1ad0:	cmp	w0, #0x0
    1ad4:	adrp	x1, 3000 <__multf3+0x2a8>
    1ad8:	add	x1, x1, #0x7b0
    1adc:	b.gt	1b08 <seq_builtin+0x408>
    1ae0:	adrp	x0, 3000 <__multf3+0x2a8>
    1ae4:	add	x0, x0, #0x7e0
    1ae8:	bl	1030 <builtin_error@plt>
    1aec:	mov	w0, #0x1                   	// #1
    1af0:	b	17e4 <seq_builtin+0xe4>
    1af4:	ldr	q0, [sp, #96]
    1af8:	ldr	q1, [sp, #112]
    1afc:	bl	2ad0 <__getf2>
    1b00:	cmp	w0, #0x0
    1b04:	b.le	1910 <seq_builtin+0x210>
    1b08:	adrp	x1, 3000 <__multf3+0x2a8>
    1b0c:	add	x1, x1, #0x7a8
    1b10:	b	1ae0 <seq_builtin+0x3e0>
    1b14:	cbz	x21, 1d78 <seq_builtin+0x678>
    1b18:	mov	x0, x21
    1b1c:	bl	1010 <all_digits@plt>
    1b20:	mov	w21, w0
    1b24:	cbz	w0, 1c9c <seq_builtin+0x59c>
    1b28:	mov	x26, #0x0                   	// #0
    1b2c:	mov	w21, #0x0                   	// #0
    1b30:	cbz	x20, 1c2c <seq_builtin+0x52c>
    1b34:	mov	x0, x20
    1b38:	bl	1010 <all_digits@plt>
    1b3c:	cbnz	w0, 1c2c <seq_builtin+0x52c>
    1b40:	bl	1080 <locale_decpoint@plt>
    1b44:	add	x1, x23, #0x1b8
    1b48:	strb	w0, [x1, #4]
    1b4c:	cbz	x26, 1c88 <seq_builtin+0x588>
    1b50:	ldr	q1, [sp, #96]
    1b54:	mov	x0, x26
    1b58:	ldr	q0, [sp, #112]
    1b5c:	ldr	q2, [sp, #128]
    1b60:	bl	1110 <print_fltseq@plt>
    1b64:	cbnz	w21, 1c20 <seq_builtin+0x520>
    1b68:	ldp	x19, x20, [sp, #16]
    1b6c:	mov	w0, #0x0                   	// #0
    1b70:	ldp	x21, x22, [sp, #32]
    1b74:	ldp	x23, x24, [sp, #48]
    1b78:	ldp	x25, x26, [sp, #64]
    1b7c:	ldp	x29, x30, [sp], #144
    1b80:	b	1170 <sh_chkwrite@plt>
    1b84:	add	x0, x4, #0x1
    1b88:	ldrb	w1, [x24, x0]
    1b8c:	mov	x2, #0x1                   	// #1
    1b90:	cmp	w1, #0x25
    1b94:	b.eq	1db4 <seq_builtin+0x6b4>  // b.none
    1b98:	cbnz	w1, 1dac <seq_builtin+0x6ac>
    1b9c:	add	x0, x0, #0x2
    1ba0:	bl	10b0 <xmalloc@plt>
    1ba4:	mov	x26, x0
    1ba8:	mov	x2, x25
    1bac:	mov	x1, x24
    1bb0:	bl	1000 <memcpy@plt>
    1bb4:	mov	w1, #0x4c                  	// #76
    1bb8:	add	x27, x23, #0x1b8
    1bbc:	strb	w1, [x26, x25]
    1bc0:	add	x0, x25, #0x1
    1bc4:	mov	x1, x22
    1bc8:	add	x0, x26, x0
    1bcc:	bl	1180 <strcpy@plt>
    1bd0:	ldr	w0, [x27, #48]
    1bd4:	cbz	w0, 1be8 <seq_builtin+0x4e8>
    1bd8:	adrp	x0, 3000 <__multf3+0x2a8>
    1bdc:	add	x0, x0, #0x898
    1be0:	bl	1040 <builtin_warning@plt>
    1be4:	str	wzr, [x27, #48]
    1be8:	cbz	x21, 1bf8 <seq_builtin+0x4f8>
    1bec:	mov	x0, x21
    1bf0:	bl	1010 <all_digits@plt>
    1bf4:	cbnz	w0, 1de4 <seq_builtin+0x6e4>
    1bf8:	bl	1080 <locale_decpoint@plt>
    1bfc:	add	x23, x23, #0x1b8
    1c00:	mov	w1, w0
    1c04:	ldr	q1, [sp, #96]
    1c08:	ldr	q0, [sp, #112]
    1c0c:	mov	x0, x26
    1c10:	ldr	q2, [sp, #128]
    1c14:	strb	w1, [x23, #4]
    1c18:	bl	1110 <print_fltseq@plt>
    1c1c:	ldr	x27, [sp, #80]
    1c20:	mov	x0, x26
    1c24:	bl	1120 <free@plt>
    1c28:	b	1b68 <seq_builtin+0x468>
    1c2c:	cbz	x19, 1c3c <seq_builtin+0x53c>
    1c30:	mov	x0, x19
    1c34:	bl	1010 <all_digits@plt>
    1c38:	cbz	w0, 1b40 <seq_builtin+0x440>
    1c3c:	cbz	x26, 1e5c <seq_builtin+0x75c>
    1c40:	add	x23, x23, #0x1b8
    1c44:	bl	1080 <locale_decpoint@plt>
    1c48:	strb	w0, [x23, #4]
    1c4c:	b	1b50 <seq_builtin+0x450>
    1c50:	ldr	q0, [sp, #96]
    1c54:	ldr	q1, [sp, #112]
    1c58:	bl	2ad0 <__getf2>
    1c5c:	cmp	w0, #0x0
    1c60:	adrp	x2, 3000 <__multf3+0x2a8>
    1c64:	add	x2, x2, #0x7a8
    1c68:	adrp	x1, 3000 <__multf3+0x2a8>
    1c6c:	add	x1, x1, #0x7b0
    1c70:	csel	x1, x2, x1, gt
    1c74:	adrp	x0, 3000 <__multf3+0x2a8>
    1c78:	add	x0, x0, #0x7d0
    1c7c:	bl	1030 <builtin_error@plt>
    1c80:	mov	w0, #0x1                   	// #1
    1c84:	b	17e4 <seq_builtin+0xe4>
    1c88:	ldr	w0, [x1, #48]
    1c8c:	cbnz	w0, 1cb0 <seq_builtin+0x5b0>
    1c90:	adrp	x26, 3000 <__multf3+0x2a8>
    1c94:	add	x26, x26, #0x7b8
    1c98:	b	1b50 <seq_builtin+0x450>
    1c9c:	bl	1080 <locale_decpoint@plt>
    1ca0:	add	x1, x23, #0x1b8
    1ca4:	ldr	w2, [x1, #48]
    1ca8:	strb	w0, [x1, #4]
    1cac:	cbz	w2, 1d90 <seq_builtin+0x690>
    1cb0:	adrp	x22, 3000 <__multf3+0x2a8>
    1cb4:	add	x22, x22, #0x7b8
    1cb8:	ldr	q0, [sp, #128]
    1cbc:	mov	x2, x22
    1cc0:	add	x20, x23, #0x1b8
    1cc4:	mov	x1, #0x1c                  	// #28
    1cc8:	add	x20, x20, #0x8
    1ccc:	mov	x0, x20
    1cd0:	bl	1070 <snprintf@plt>
    1cd4:	bl	1380 <getprec.constprop.0>
    1cd8:	mov	w19, w0
    1cdc:	ldr	q0, [sp, #112]
    1ce0:	mov	x2, x22
    1ce4:	mov	x1, #0x1c                  	// #28
    1ce8:	mov	x0, x20
    1cec:	bl	1070 <snprintf@plt>
    1cf0:	mov	w24, w0
    1cf4:	bl	1380 <getprec.constprop.0>
    1cf8:	cmp	w19, w0
    1cfc:	ldr	q0, [sp, #96]
    1d00:	mov	x2, x22
    1d04:	mov	x1, #0x1c                  	// #28
    1d08:	csel	w19, w19, w0, ge  // ge = tcont
    1d0c:	mov	w22, w0
    1d10:	mov	x0, x20
    1d14:	bl	1070 <snprintf@plt>
    1d18:	mov	w20, w0
    1d1c:	bl	1380 <getprec.constprop.0>
    1d20:	mov	w3, w0
    1d24:	sub	w1, w19, w22
    1d28:	cmp	w3, #0x0
    1d2c:	sub	w2, w19, w3
    1d30:	add	w0, w1, w24
    1d34:	ccmp	w19, #0x0, #0x0, ne  // ne = any
    1d38:	add	w2, w2, w20
    1d3c:	b.ne	1e30 <seq_builtin+0x730>  // b.any
    1d40:	sub	w2, w2, #0x1
    1d44:	cmp	w0, w2
    1d48:	csel	w2, w0, w2, ge  // ge = tcont
    1d4c:	cbz	w2, 1e08 <seq_builtin+0x708>
    1d50:	add	x0, x23, #0x1b8
    1d54:	mov	w3, w19
    1d58:	add	x0, x0, #0x8
    1d5c:	adrp	x4, 3000 <__multf3+0x2a8>
    1d60:	mov	x26, x0
    1d64:	add	x4, x4, #0x8c8
    1d68:	adrp	x1, 3000 <__multf3+0x2a8>
    1d6c:	add	x1, x1, #0x8d0
    1d70:	bl	1060 <sprintf@plt>
    1d74:	b	1b50 <seq_builtin+0x450>
    1d78:	bl	1080 <locale_decpoint@plt>
    1d7c:	mov	w21, #0x0                   	// #0
    1d80:	add	x1, x23, #0x1b8
    1d84:	ldr	w2, [x1, #48]
    1d88:	strb	w0, [x1, #4]
    1d8c:	cbnz	w2, 1cb0 <seq_builtin+0x5b0>
    1d90:	ldr	q1, [sp, #96]
    1d94:	adrp	x0, 3000 <__multf3+0x2a8>
    1d98:	ldr	q0, [sp, #112]
    1d9c:	add	x0, x0, #0x7b8
    1da0:	ldr	q2, [sp, #128]
    1da4:	bl	1110 <print_fltseq@plt>
    1da8:	b	1b68 <seq_builtin+0x468>
    1dac:	add	x0, x0, x2
    1db0:	b	1b88 <seq_builtin+0x488>
    1db4:	add	x1, x24, x0
    1db8:	mov	x2, #0x2                   	// #2
    1dbc:	ldrb	w1, [x1, #1]
    1dc0:	cmp	w1, #0x25
    1dc4:	b.eq	1dac <seq_builtin+0x6ac>  // b.none
    1dc8:	mov	x1, x24
    1dcc:	adrp	x0, 3000 <__multf3+0x2a8>
    1dd0:	add	x0, x0, #0x870
    1dd4:	bl	1030 <builtin_error@plt>
    1dd8:	mov	w0, #0x1                   	// #1
    1ddc:	ldr	x27, [sp, #80]
    1de0:	b	17e4 <seq_builtin+0xe4>
    1de4:	mov	w21, #0x1                   	// #1
    1de8:	ldr	x27, [sp, #80]
    1dec:	b	1b30 <seq_builtin+0x430>
    1df0:	mov	x1, x24
    1df4:	adrp	x0, 3000 <__multf3+0x2a8>
    1df8:	add	x0, x0, #0x830
    1dfc:	bl	1030 <builtin_error@plt>
    1e00:	mov	w0, #0x1                   	// #1
    1e04:	b	17e4 <seq_builtin+0xe4>
    1e08:	add	x23, x23, #0x1b8
    1e0c:	mov	w2, w19
    1e10:	add	x0, x23, #0x8
    1e14:	adrp	x3, 3000 <__multf3+0x2a8>
    1e18:	mov	x26, x0
    1e1c:	add	x3, x3, #0x8c8
    1e20:	adrp	x1, 3000 <__multf3+0x2a8>
    1e24:	add	x1, x1, #0x8e0
    1e28:	bl	1060 <sprintf@plt>
    1e2c:	b	1b50 <seq_builtin+0x450>
    1e30:	cmp	w19, #0x0
    1e34:	cset	w1, ne  // ne = any
    1e38:	cmp	w3, #0x0
    1e3c:	csel	w3, w1, wzr, eq  // eq = none
    1e40:	cbz	w3, 1e4c <seq_builtin+0x74c>
    1e44:	add	w2, w2, #0x1
    1e48:	mov	w1, w3
    1e4c:	cmp	w22, #0x0
    1e50:	ccmp	w1, #0x0, #0x4, eq  // eq = none
    1e54:	cinc	w0, w0, ne  // ne = any
    1e58:	b	1d44 <seq_builtin+0x644>
    1e5c:	ldr	q0, [sp, #128]
    1e60:	bl	35c0 <__fixtfdi>
    1e64:	mov	x20, x0
    1e68:	ldr	q0, [sp, #96]
    1e6c:	bl	35c0 <__fixtfdi>
    1e70:	mov	x19, x0
    1e74:	ldr	q0, [sp, #112]
    1e78:	bl	35c0 <__fixtfdi>
    1e7c:	mov	x2, x20
    1e80:	mov	x1, x19
    1e84:	ldp	x19, x20, [sp, #16]
    1e88:	ldp	x21, x22, [sp, #32]
    1e8c:	ldp	x23, x24, [sp, #48]
    1e90:	ldp	x25, x26, [sp, #64]
    1e94:	ldp	x29, x30, [sp], #144
    1e98:	b	1090 <print_intseq@plt>
    1e9c:	nop

0000000000001ea0 <__addtf3>:
    1ea0:	stp	x29, x30, [sp, #-48]!
    1ea4:	mov	x29, sp
    1ea8:	str	q0, [sp, #16]
    1eac:	str	q1, [sp, #32]
    1eb0:	ldp	x6, x1, [sp, #16]
    1eb4:	ldp	x0, x3, [sp, #32]
    1eb8:	mrs	x15, fpcr
    1ebc:	lsr	x7, x1, #63
    1ec0:	mov	x10, x0
    1ec4:	ubfiz	x4, x3, #3, #48
    1ec8:	lsr	x5, x3, #63
    1ecc:	mov	x12, x7
    1ed0:	ubfiz	x2, x1, #3, #48
    1ed4:	orr	x4, x4, x0, lsr #61
    1ed8:	ubfx	x8, x1, #48, #15
    1edc:	ubfx	x0, x3, #48, #15
    1ee0:	and	w7, w7, #0xff
    1ee4:	mov	x16, x12
    1ee8:	cmp	x12, x5
    1eec:	and	w11, w5, #0xff
    1ef0:	orr	x2, x2, x6, lsr #61
    1ef4:	mov	x1, x8
    1ef8:	lsl	x9, x6, #3
    1efc:	mov	x3, x0
    1f00:	lsl	x13, x10, #3
    1f04:	b.eq	20b0 <__addtf3+0x210>  // b.none
    1f08:	sub	w0, w8, w0
    1f0c:	cmp	w0, #0x0
    1f10:	b.le	205c <__addtf3+0x1bc>
    1f14:	cbz	x3, 2110 <__addtf3+0x270>
    1f18:	orr	x4, x4, #0x8000000000000
    1f1c:	mov	x3, #0x7fff                	// #32767
    1f20:	cmp	x1, x3
    1f24:	b.eq	2314 <__addtf3+0x474>  // b.none
    1f28:	cmp	w0, #0x74
    1f2c:	b.gt	2398 <__addtf3+0x4f8>
    1f30:	cmp	w0, #0x3f
    1f34:	b.gt	24f8 <__addtf3+0x658>
    1f38:	mov	w3, #0x40                  	// #64
    1f3c:	sub	w3, w3, w0
    1f40:	lsr	x6, x13, x0
    1f44:	lsl	x13, x13, x3
    1f48:	cmp	x13, #0x0
    1f4c:	cset	x5, ne  // ne = any
    1f50:	lsl	x3, x4, x3
    1f54:	orr	x3, x3, x6
    1f58:	lsr	x0, x4, x0
    1f5c:	orr	x3, x3, x5
    1f60:	sub	x2, x2, x0
    1f64:	subs	x9, x9, x3
    1f68:	sbc	x2, x2, xzr
    1f6c:	and	x3, x2, #0x7ffffffffffff
    1f70:	tbz	x2, #51, 2150 <__addtf3+0x2b0>
    1f74:	cbz	x3, 237c <__addtf3+0x4dc>
    1f78:	clz	x0, x3
    1f7c:	sub	w0, w0, #0xc
    1f80:	neg	w2, w0
    1f84:	lsl	x4, x3, x0
    1f88:	lsl	x3, x9, x0
    1f8c:	lsr	x9, x9, x2
    1f90:	orr	x2, x9, x4
    1f94:	cmp	x1, w0, sxtw
    1f98:	sxtw	x4, w0
    1f9c:	b.gt	235c <__addtf3+0x4bc>
    1fa0:	sub	w1, w0, w1
    1fa4:	add	w0, w1, #0x1
    1fa8:	cmp	w0, #0x3f
    1fac:	b.gt	24c0 <__addtf3+0x620>
    1fb0:	mov	w1, #0x40                  	// #64
    1fb4:	sub	w1, w1, w0
    1fb8:	lsr	x4, x3, x0
    1fbc:	lsl	x3, x3, x1
    1fc0:	cmp	x3, #0x0
    1fc4:	lsl	x9, x2, x1
    1fc8:	cset	x1, ne  // ne = any
    1fcc:	orr	x9, x9, x4
    1fd0:	lsr	x2, x2, x0
    1fd4:	orr	x9, x9, x1
    1fd8:	orr	x8, x9, x2
    1fdc:	cbz	x8, 2164 <__addtf3+0x2c4>
    1fe0:	and	x0, x9, #0x7
    1fe4:	mov	x1, #0x0                   	// #0
    1fe8:	mov	w5, #0x1                   	// #1
    1fec:	cbz	x0, 23a8 <__addtf3+0x508>
    1ff0:	and	x3, x15, #0xc00000
    1ff4:	cmp	x3, #0x400, lsl #12
    1ff8:	b.eq	22ec <__addtf3+0x44c>  // b.none
    1ffc:	cmp	x3, #0x800, lsl #12
    2000:	b.eq	22cc <__addtf3+0x42c>  // b.none
    2004:	cbz	x3, 22f8 <__addtf3+0x458>
    2008:	and	x3, x2, #0x8000000000000
    200c:	mov	w0, #0x10                  	// #16
    2010:	cbz	w5, 2018 <__addtf3+0x178>
    2014:	orr	w0, w0, #0x8
    2018:	cbz	x3, 2330 <__addtf3+0x490>
    201c:	add	x1, x1, #0x1
    2020:	mov	x3, #0x7fff                	// #32767
    2024:	cmp	x1, x3
    2028:	b.eq	2214 <__addtf3+0x374>  // b.none
    202c:	and	w1, w1, #0x7fff
    2030:	extr	x8, x2, x9, #3
    2034:	ubfx	x2, x2, #3, #48
    2038:	mov	x5, #0x0                   	// #0
    203c:	orr	w1, w1, w7, lsl #15
    2040:	bfxil	x5, x2, #0, #48
    2044:	fmov	d0, x8
    2048:	bfi	x5, x1, #48, #16
    204c:	fmov	v0.d[1], x5
    2050:	cbnz	w0, 2270 <__addtf3+0x3d0>
    2054:	ldp	x29, x30, [sp], #48
    2058:	ret
    205c:	mov	x14, x5
    2060:	b.eq	217c <__addtf3+0x2dc>  // b.none
    2064:	cbnz	x8, 2400 <__addtf3+0x560>
    2068:	orr	x1, x2, x9
    206c:	cbz	x1, 212c <__addtf3+0x28c>
    2070:	cmn	w0, #0x1
    2074:	b.eq	281c <__addtf3+0x97c>  // b.none
    2078:	mov	x1, #0x7fff                	// #32767
    207c:	mvn	w0, w0
    2080:	cmp	x3, x1
    2084:	b.ne	2414 <__addtf3+0x574>  // b.any
    2088:	orr	x0, x4, x13
    208c:	cbnz	x0, 2774 <__addtf3+0x8d4>
    2090:	mov	x16, x14
    2094:	nop
    2098:	mov	x4, #0x0                   	// #0
    209c:	fmov	d0, x4
    20a0:	lsl	x16, x16, #63
    20a4:	orr	x5, x16, #0x7fff000000000000
    20a8:	fmov	v0.d[1], x5
    20ac:	b	2054 <__addtf3+0x1b4>
    20b0:	sub	w5, w8, w0
    20b4:	cmp	w5, #0x0
    20b8:	b.le	2284 <__addtf3+0x3e4>
    20bc:	cbz	x0, 21c4 <__addtf3+0x324>
    20c0:	orr	x4, x4, #0x8000000000000
    20c4:	mov	x0, #0x7fff                	// #32767
    20c8:	cmp	x1, x0
    20cc:	b.eq	2314 <__addtf3+0x474>  // b.none
    20d0:	cmp	w5, #0x74
    20d4:	b.gt	24a8 <__addtf3+0x608>
    20d8:	cmp	w5, #0x3f
    20dc:	b.gt	25a8 <__addtf3+0x708>
    20e0:	mov	w0, #0x40                  	// #64
    20e4:	sub	w0, w0, w5
    20e8:	lsr	x6, x13, x5
    20ec:	lsl	x13, x13, x0
    20f0:	cmp	x13, #0x0
    20f4:	lsl	x0, x4, x0
    20f8:	cset	x3, ne  // ne = any
    20fc:	orr	x0, x0, x6
    2100:	lsr	x4, x4, x5
    2104:	orr	x0, x0, x3
    2108:	add	x2, x2, x4
    210c:	b	24b4 <__addtf3+0x614>
    2110:	orr	x3, x4, x13
    2114:	cbz	x3, 2484 <__addtf3+0x5e4>
    2118:	subs	w0, w0, #0x1
    211c:	b.ne	1f1c <__addtf3+0x7c>  // b.any
    2120:	subs	x9, x9, x13
    2124:	sbc	x2, x2, x4
    2128:	b	1f6c <__addtf3+0xcc>
    212c:	mov	x0, #0x7fff                	// #32767
    2130:	cmp	x3, x0
    2134:	b.eq	2868 <__addtf3+0x9c8>  // b.none
    2138:	mov	w7, w11
    213c:	mov	x2, x4
    2140:	mov	x9, x13
    2144:	mov	x1, x3
    2148:	mov	x12, x5
    214c:	nop
    2150:	orr	x8, x9, x2
    2154:	and	x0, x9, #0x7
    2158:	mov	w5, #0x0                   	// #0
    215c:	cbnz	x1, 1fec <__addtf3+0x14c>
    2160:	cbnz	x8, 1fe0 <__addtf3+0x140>
    2164:	mov	x2, #0x0                   	// #0
    2168:	mov	x1, #0x0                   	// #0
    216c:	mov	w0, #0x0                   	// #0
    2170:	and	x2, x2, #0xffffffffffff
    2174:	and	w1, w1, #0x7fff
    2178:	b	2038 <__addtf3+0x198>
    217c:	add	x5, x8, #0x1
    2180:	tst	x5, #0x7ffe
    2184:	b.ne	2454 <__addtf3+0x5b4>  // b.any
    2188:	orr	x5, x2, x9
    218c:	orr	x8, x4, x13
    2190:	cbnz	x1, 2614 <__addtf3+0x774>
    2194:	cbz	x5, 26bc <__addtf3+0x81c>
    2198:	cbz	x8, 26d0 <__addtf3+0x830>
    219c:	subs	x5, x9, x13
    21a0:	cmp	x9, x13
    21a4:	sbc	x3, x2, x4
    21a8:	tbz	x3, #51, 289c <__addtf3+0x9fc>
    21ac:	subs	x9, x13, x9
    21b0:	mov	w7, w11
    21b4:	sbc	x2, x4, x2
    21b8:	mov	x12, x14
    21bc:	orr	x8, x9, x2
    21c0:	b	1fdc <__addtf3+0x13c>
    21c4:	orr	x0, x4, x13
    21c8:	cbz	x0, 269c <__addtf3+0x7fc>
    21cc:	subs	w5, w5, #0x1
    21d0:	b.ne	20c4 <__addtf3+0x224>  // b.any
    21d4:	adds	x9, x9, x13
    21d8:	adc	x2, x4, x2
    21dc:	nop
    21e0:	tbz	x2, #51, 2150 <__addtf3+0x2b0>
    21e4:	add	x1, x1, #0x1
    21e8:	mov	x0, #0x7fff                	// #32767
    21ec:	cmp	x1, x0
    21f0:	b.eq	26dc <__addtf3+0x83c>  // b.none
    21f4:	and	x0, x9, #0x1
    21f8:	and	x3, x2, #0xfff7ffffffffffff
    21fc:	orr	x9, x0, x9, lsr #1
    2200:	mov	w5, #0x0                   	// #0
    2204:	orr	x9, x9, x2, lsl #63
    2208:	lsr	x2, x3, #1
    220c:	and	x0, x9, #0x7
    2210:	b	1fec <__addtf3+0x14c>
    2214:	and	x3, x15, #0xc00000
    2218:	cbz	x3, 2250 <__addtf3+0x3b0>
    221c:	cmp	x3, #0x400, lsl #12
    2220:	b.eq	2248 <__addtf3+0x3a8>  // b.none
    2224:	cmp	x3, #0x800, lsl #12
    2228:	csel	w12, w12, wzr, eq  // eq = none
    222c:	cbnz	w12, 2250 <__addtf3+0x3b0>
    2230:	mov	w1, #0x14                  	// #20
    2234:	mov	x2, #0x1fffffffffffffff    	// #2305843009213693951
    2238:	orr	w0, w0, w1
    223c:	mov	x8, #0xffffffffffffffff    	// #-1
    2240:	mov	x1, #0x7ffe                	// #32766
    2244:	b	2170 <__addtf3+0x2d0>
    2248:	cbnz	x12, 2230 <__addtf3+0x390>
    224c:	nop
    2250:	mov	w1, #0x14                  	// #20
    2254:	and	x16, x7, #0xff
    2258:	orr	w0, w0, w1
    225c:	mov	x4, #0x0                   	// #0
    2260:	fmov	d0, x4
    2264:	lsl	x16, x16, #63
    2268:	orr	x5, x16, #0x7fff000000000000
    226c:	fmov	v0.d[1], x5
    2270:	str	q0, [sp, #16]
    2274:	bl	36f8 <__sfp_handle_exceptions>
    2278:	ldr	q0, [sp, #16]
    227c:	ldp	x29, x30, [sp], #48
    2280:	ret
    2284:	b.eq	23c4 <__addtf3+0x524>  // b.none
    2288:	cbnz	x8, 2548 <__addtf3+0x6a8>
    228c:	orr	x0, x2, x9
    2290:	cbz	x0, 27b4 <__addtf3+0x914>
    2294:	cmn	w5, #0x1
    2298:	b.eq	2914 <__addtf3+0xa74>  // b.none
    229c:	mov	x0, #0x7fff                	// #32767
    22a0:	mvn	w5, w5
    22a4:	cmp	x3, x0
    22a8:	b.ne	255c <__addtf3+0x6bc>  // b.any
    22ac:	orr	x0, x4, x13
    22b0:	cbz	x0, 2098 <__addtf3+0x1f8>
    22b4:	lsr	x5, x4, #50
    22b8:	mov	x9, x13
    22bc:	eor	x5, x5, #0x1
    22c0:	mov	x2, x4
    22c4:	and	w5, w5, #0x1
    22c8:	b	2328 <__addtf3+0x488>
    22cc:	mov	w0, #0x10                  	// #16
    22d0:	cbz	x12, 22dc <__addtf3+0x43c>
    22d4:	adds	x9, x9, #0x8
    22d8:	cinc	x2, x2, cs  // cs = hs, nlast
    22dc:	and	x3, x2, #0x8000000000000
    22e0:	cbz	w5, 2018 <__addtf3+0x178>
    22e4:	orr	w0, w0, #0x8
    22e8:	b	2018 <__addtf3+0x178>
    22ec:	mov	w0, #0x10                  	// #16
    22f0:	cbnz	x12, 22dc <__addtf3+0x43c>
    22f4:	b	22d4 <__addtf3+0x434>
    22f8:	and	x3, x9, #0xf
    22fc:	mov	w0, #0x10                  	// #16
    2300:	cmp	x3, #0x4
    2304:	b.eq	22dc <__addtf3+0x43c>  // b.none
    2308:	adds	x9, x9, #0x4
    230c:	cinc	x2, x2, cs  // cs = hs, nlast
    2310:	b	22dc <__addtf3+0x43c>
    2314:	orr	x0, x2, x9
    2318:	cbz	x0, 2098 <__addtf3+0x1f8>
    231c:	lsr	x5, x2, #50
    2320:	eor	x5, x5, #0x1
    2324:	and	w5, w5, #0x1
    2328:	mov	w0, w5
    232c:	mov	x1, #0x7fff                	// #32767
    2330:	mov	x3, #0x7fff                	// #32767
    2334:	extr	x8, x2, x9, #3
    2338:	cmp	x1, x3
    233c:	lsr	x2, x2, #3
    2340:	b.ne	2170 <__addtf3+0x2d0>  // b.any
    2344:	orr	x1, x8, x2
    2348:	cbz	x1, 29b4 <__addtf3+0xb14>
    234c:	orr	x2, x2, #0x800000000000
    2350:	mov	w1, #0x7fff                	// #32767
    2354:	and	x2, x2, #0xffffffffffff
    2358:	b	2038 <__addtf3+0x198>
    235c:	mov	x9, x3
    2360:	and	x2, x2, #0xfff7ffffffffffff
    2364:	sub	x1, x1, x4
    2368:	orr	x8, x9, x2
    236c:	and	x0, x9, #0x7
    2370:	mov	w5, #0x0                   	// #0
    2374:	cbz	x1, 2160 <__addtf3+0x2c0>
    2378:	b	1fec <__addtf3+0x14c>
    237c:	clz	x2, x9
    2380:	add	w0, w2, #0x34
    2384:	cmp	w0, #0x3f
    2388:	b.le	1f80 <__addtf3+0xe0>
    238c:	sub	w2, w2, #0xc
    2390:	lsl	x2, x9, x2
    2394:	b	1f94 <__addtf3+0xf4>
    2398:	orr	x4, x4, x13
    239c:	cmp	x4, #0x0
    23a0:	cset	x3, ne  // ne = any
    23a4:	b	1f64 <__addtf3+0xc4>
    23a8:	and	x3, x2, #0x8000000000000
    23ac:	mov	w0, #0x0                   	// #0
    23b0:	cbz	w5, 2018 <__addtf3+0x178>
    23b4:	mov	w0, #0x0                   	// #0
    23b8:	tbz	w15, #11, 2018 <__addtf3+0x178>
    23bc:	orr	w0, w0, #0x8
    23c0:	b	2018 <__addtf3+0x178>
    23c4:	add	x0, x8, #0x1
    23c8:	tst	x0, #0x7ffe
    23cc:	b.ne	25d4 <__addtf3+0x734>  // b.any
    23d0:	orr	x0, x2, x9
    23d4:	cbnz	x8, 2790 <__addtf3+0x8f0>
    23d8:	orr	x8, x4, x13
    23dc:	cbz	x0, 27e4 <__addtf3+0x944>
    23e0:	cbz	x8, 26d0 <__addtf3+0x830>
    23e4:	adds	x9, x9, x13
    23e8:	adc	x2, x4, x2
    23ec:	tbz	x2, #51, 21bc <__addtf3+0x31c>
    23f0:	and	x2, x2, #0xfff7ffffffffffff
    23f4:	and	x0, x9, #0x7
    23f8:	mov	x1, #0x1                   	// #1
    23fc:	b	1fec <__addtf3+0x14c>
    2400:	mov	x1, #0x7fff                	// #32767
    2404:	neg	w0, w0
    2408:	orr	x2, x2, #0x8000000000000
    240c:	cmp	x3, x1
    2410:	b.eq	2088 <__addtf3+0x1e8>  // b.none
    2414:	cmp	w0, #0x74
    2418:	b.gt	2524 <__addtf3+0x684>
    241c:	cmp	w0, #0x3f
    2420:	b.gt	2740 <__addtf3+0x8a0>
    2424:	mov	w1, #0x40                  	// #64
    2428:	sub	w1, w1, w0
    242c:	lsr	x5, x9, x0
    2430:	lsl	x9, x9, x1
    2434:	cmp	x9, #0x0
    2438:	lsl	x9, x2, x1
    243c:	cset	x1, ne  // ne = any
    2440:	orr	x9, x9, x5
    2444:	lsr	x0, x2, x0
    2448:	orr	x9, x9, x1
    244c:	sub	x4, x4, x0
    2450:	b	2530 <__addtf3+0x690>
    2454:	subs	x5, x9, x13
    2458:	cmp	x9, x13
    245c:	sbc	x3, x2, x4
    2460:	tbnz	x3, #51, 25fc <__addtf3+0x75c>
    2464:	orr	x8, x5, x3
    2468:	cbnz	x8, 2728 <__addtf3+0x888>
    246c:	and	x15, x15, #0xc00000
    2470:	mov	x2, #0x0                   	// #0
    2474:	cmp	x15, #0x800, lsl #12
    2478:	mov	x1, #0x0                   	// #0
    247c:	cset	w7, eq  // eq = none
    2480:	b	2170 <__addtf3+0x2d0>
    2484:	mov	x0, #0x7fff                	// #32767
    2488:	cmp	x8, x0
    248c:	b.ne	2150 <__addtf3+0x2b0>  // b.any
    2490:	orr	x0, x2, x9
    2494:	cbnz	x0, 231c <__addtf3+0x47c>
    2498:	mov	x2, #0x0                   	// #0
    249c:	mov	x8, #0x0                   	// #0
    24a0:	mov	w0, #0x0                   	// #0
    24a4:	b	2344 <__addtf3+0x4a4>
    24a8:	orr	x4, x4, x13
    24ac:	cmp	x4, #0x0
    24b0:	cset	x0, ne  // ne = any
    24b4:	adds	x9, x0, x9
    24b8:	cinc	x2, x2, cs  // cs = hs, nlast
    24bc:	b	21e0 <__addtf3+0x340>
    24c0:	mov	w4, #0x80                  	// #128
    24c4:	sub	w4, w4, w0
    24c8:	cmp	w0, #0x40
    24cc:	sub	w9, w1, #0x3f
    24d0:	lsl	x0, x2, x4
    24d4:	orr	x0, x3, x0
    24d8:	csel	x3, x0, x3, ne  // ne = any
    24dc:	lsr	x9, x2, x9
    24e0:	cmp	x3, #0x0
    24e4:	mov	x2, #0x0                   	// #0
    24e8:	cset	x0, ne  // ne = any
    24ec:	orr	x9, x0, x9
    24f0:	mov	x8, x9
    24f4:	b	1fdc <__addtf3+0x13c>
    24f8:	mov	w5, #0x80                  	// #128
    24fc:	sub	w5, w5, w0
    2500:	subs	w0, w0, #0x40
    2504:	lsl	x5, x4, x5
    2508:	orr	x5, x13, x5
    250c:	csel	x13, x5, x13, ne  // ne = any
    2510:	lsr	x4, x4, x0
    2514:	cmp	x13, #0x0
    2518:	cset	x3, ne  // ne = any
    251c:	orr	x3, x3, x4
    2520:	b	1f64 <__addtf3+0xc4>
    2524:	orr	x2, x2, x9
    2528:	cmp	x2, #0x0
    252c:	cset	x9, ne  // ne = any
    2530:	subs	x9, x13, x9
    2534:	mov	w7, w11
    2538:	sbc	x2, x4, xzr
    253c:	mov	x1, x3
    2540:	mov	x12, x14
    2544:	b	1f6c <__addtf3+0xcc>
    2548:	mov	x0, #0x7fff                	// #32767
    254c:	neg	w5, w5
    2550:	orr	x2, x2, #0x8000000000000
    2554:	cmp	x3, x0
    2558:	b.eq	22ac <__addtf3+0x40c>  // b.none
    255c:	cmp	w5, #0x74
    2560:	b.gt	2730 <__addtf3+0x890>
    2564:	cmp	w5, #0x3f
    2568:	b.gt	27f0 <__addtf3+0x950>
    256c:	mov	w1, #0x40                  	// #64
    2570:	sub	w1, w1, w5
    2574:	lsr	x6, x9, x5
    2578:	lsl	x9, x9, x1
    257c:	cmp	x9, #0x0
    2580:	cset	x0, ne  // ne = any
    2584:	lsl	x9, x2, x1
    2588:	orr	x9, x9, x6
    258c:	lsr	x5, x2, x5
    2590:	orr	x9, x9, x0
    2594:	add	x4, x4, x5
    2598:	adds	x9, x9, x13
    259c:	mov	x1, x3
    25a0:	cinc	x2, x4, cs  // cs = hs, nlast
    25a4:	b	21e0 <__addtf3+0x340>
    25a8:	mov	w0, #0x80                  	// #128
    25ac:	sub	w0, w0, w5
    25b0:	subs	w5, w5, #0x40
    25b4:	lsl	x0, x4, x0
    25b8:	orr	x0, x13, x0
    25bc:	csel	x13, x0, x13, ne  // ne = any
    25c0:	lsr	x4, x4, x5
    25c4:	cmp	x13, #0x0
    25c8:	cset	x0, ne  // ne = any
    25cc:	orr	x0, x0, x4
    25d0:	b	24b4 <__addtf3+0x614>
    25d4:	mov	x1, #0x7fff                	// #32767
    25d8:	cmp	x0, x1
    25dc:	b.eq	2838 <__addtf3+0x998>  // b.none
    25e0:	adds	x9, x9, x13
    25e4:	mov	x1, x0
    25e8:	adc	x2, x4, x2
    25ec:	ubfx	x0, x9, #1, #3
    25f0:	extr	x9, x2, x9, #1
    25f4:	lsr	x2, x2, #1
    25f8:	b	1fec <__addtf3+0x14c>
    25fc:	cmp	x13, x9
    2600:	mov	w7, w11
    2604:	sbc	x3, x4, x2
    2608:	sub	x9, x13, x9
    260c:	mov	x12, x14
    2610:	b	1f74 <__addtf3+0xd4>
    2614:	mov	x12, #0x7fff                	// #32767
    2618:	cmp	x1, x12
    261c:	b.eq	2648 <__addtf3+0x7a8>  // b.none
    2620:	cmp	x3, x12
    2624:	b.eq	2878 <__addtf3+0x9d8>  // b.none
    2628:	cbnz	x5, 2660 <__addtf3+0x7c0>
    262c:	mov	w5, w0
    2630:	cbnz	x8, 2958 <__addtf3+0xab8>
    2634:	mov	w7, #0x0                   	// #0
    2638:	mov	x2, #0xffffffffffff        	// #281474976710655
    263c:	mov	w0, #0x1                   	// #1
    2640:	mov	x8, #0xffffffffffffffff    	// #-1
    2644:	b	234c <__addtf3+0x4ac>
    2648:	cbz	x5, 2974 <__addtf3+0xad4>
    264c:	lsr	x0, x2, #50
    2650:	cmp	x3, x1
    2654:	eor	x0, x0, #0x1
    2658:	and	w0, w0, #0x1
    265c:	b.eq	2878 <__addtf3+0x9d8>  // b.none
    2660:	cbz	x8, 2894 <__addtf3+0x9f4>
    2664:	bfi	x6, x2, #61, #3
    2668:	lsr	x3, x2, #3
    266c:	tbz	x2, #50, 2688 <__addtf3+0x7e8>
    2670:	lsr	x1, x4, #3
    2674:	tbnz	x4, #50, 2688 <__addtf3+0x7e8>
    2678:	mov	x6, x10
    267c:	mov	w7, w11
    2680:	bfi	x6, x4, #61, #3
    2684:	mov	x3, x1
    2688:	extr	x2, x3, x6, #61
    268c:	bfi	x6, x2, #61, #3
    2690:	lsr	x2, x2, #3
    2694:	mov	x8, x6
    2698:	b	2344 <__addtf3+0x4a4>
    269c:	mov	x0, #0x7fff                	// #32767
    26a0:	cmp	x8, x0
    26a4:	b.ne	2150 <__addtf3+0x2b0>  // b.any
    26a8:	orr	x0, x2, x9
    26ac:	cbz	x0, 2498 <__addtf3+0x5f8>
    26b0:	lsr	x5, x2, #50
    26b4:	eor	w5, w5, #0x1
    26b8:	b	2328 <__addtf3+0x488>
    26bc:	cbz	x8, 27d0 <__addtf3+0x930>
    26c0:	mov	w7, w11
    26c4:	mov	x2, x4
    26c8:	mov	x9, x13
    26cc:	mov	x12, x14
    26d0:	mov	x1, #0x0                   	// #0
    26d4:	mov	x3, #0x0                   	// #0
    26d8:	b	23b4 <__addtf3+0x514>
    26dc:	ands	x3, x15, #0xc00000
    26e0:	b.eq	276c <__addtf3+0x8cc>  // b.none
    26e4:	cmp	x3, #0x400, lsl #12
    26e8:	eor	w0, w7, #0x1
    26ec:	cset	w1, eq  // eq = none
    26f0:	tst	w1, w0
    26f4:	b.ne	2990 <__addtf3+0xaf0>  // b.any
    26f8:	cmp	x3, #0x800, lsl #12
    26fc:	b.eq	293c <__addtf3+0xa9c>  // b.none
    2700:	cmp	x3, #0x400, lsl #12
    2704:	mov	w0, #0x14                  	// #20
    2708:	b.ne	2218 <__addtf3+0x378>  // b.any
    270c:	mov	x2, #0xffffffffffffffff    	// #-1
    2710:	mov	x1, #0x7ffe                	// #32766
    2714:	mov	x9, x2
    2718:	mov	w5, #0x0                   	// #0
    271c:	mov	w0, #0x14                  	// #20
    2720:	cbnz	x12, 22dc <__addtf3+0x43c>
    2724:	b	22d4 <__addtf3+0x434>
    2728:	mov	x9, x5
    272c:	b	1f74 <__addtf3+0xd4>
    2730:	orr	x2, x2, x9
    2734:	cmp	x2, #0x0
    2738:	cset	x9, ne  // ne = any
    273c:	b	2598 <__addtf3+0x6f8>
    2740:	mov	w1, #0x80                  	// #128
    2744:	sub	w1, w1, w0
    2748:	subs	w0, w0, #0x40
    274c:	lsl	x1, x2, x1
    2750:	orr	x1, x9, x1
    2754:	csel	x9, x1, x9, ne  // ne = any
    2758:	lsr	x2, x2, x0
    275c:	cmp	x9, #0x0
    2760:	cset	x9, ne  // ne = any
    2764:	orr	x9, x9, x2
    2768:	b	2530 <__addtf3+0x690>
    276c:	mov	w0, #0x14                  	// #20
    2770:	b	225c <__addtf3+0x3bc>
    2774:	lsr	x5, x4, #50
    2778:	mov	w7, w11
    277c:	eor	x5, x5, #0x1
    2780:	mov	x9, x13
    2784:	and	w5, w5, #0x1
    2788:	mov	x2, x4
    278c:	b	2328 <__addtf3+0x488>
    2790:	mov	x8, #0x7fff                	// #32767
    2794:	cmp	x1, x8
    2798:	b.eq	28b8 <__addtf3+0xa18>  // b.none
    279c:	cmp	x3, x8
    27a0:	b.eq	292c <__addtf3+0xa8c>  // b.none
    27a4:	cbnz	x0, 28d0 <__addtf3+0xa30>
    27a8:	mov	x2, x4
    27ac:	mov	x9, x13
    27b0:	b	2328 <__addtf3+0x488>
    27b4:	mov	x0, #0x7fff                	// #32767
    27b8:	cmp	x3, x0
    27bc:	b.eq	2968 <__addtf3+0xac8>  // b.none
    27c0:	mov	x2, x4
    27c4:	mov	x9, x13
    27c8:	mov	x1, x3
    27cc:	b	2150 <__addtf3+0x2b0>
    27d0:	and	x15, x15, #0xc00000
    27d4:	mov	x2, #0x0                   	// #0
    27d8:	cmp	x15, #0x800, lsl #12
    27dc:	cset	w7, eq  // eq = none
    27e0:	b	2170 <__addtf3+0x2d0>
    27e4:	mov	x2, x4
    27e8:	mov	x9, x13
    27ec:	b	1fdc <__addtf3+0x13c>
    27f0:	mov	w0, #0x80                  	// #128
    27f4:	sub	w0, w0, w5
    27f8:	subs	w5, w5, #0x40
    27fc:	lsl	x0, x2, x0
    2800:	orr	x0, x9, x0
    2804:	csel	x9, x0, x9, ne  // ne = any
    2808:	lsr	x2, x2, x5
    280c:	cmp	x9, #0x0
    2810:	cset	x9, ne  // ne = any
    2814:	orr	x9, x9, x2
    2818:	b	2598 <__addtf3+0x6f8>
    281c:	cmp	x13, x9
    2820:	mov	w7, w11
    2824:	sbc	x2, x4, x2
    2828:	sub	x9, x13, x9
    282c:	mov	x1, x3
    2830:	mov	x12, x5
    2834:	b	1f6c <__addtf3+0xcc>
    2838:	ands	x3, x15, #0xc00000
    283c:	b.eq	276c <__addtf3+0x8cc>  // b.none
    2840:	cmp	x3, #0x400, lsl #12
    2844:	eor	w0, w7, #0x1
    2848:	csel	w0, w0, wzr, eq  // eq = none
    284c:	cbnz	w0, 2990 <__addtf3+0xaf0>
    2850:	cmp	x3, #0x800, lsl #12
    2854:	b.ne	2700 <__addtf3+0x860>  // b.any
    2858:	cbz	x12, 2940 <__addtf3+0xaa0>
    285c:	mov	w0, #0x14                  	// #20
    2860:	mov	x16, #0x1                   	// #1
    2864:	b	225c <__addtf3+0x3bc>
    2868:	orr	x0, x4, x13
    286c:	cbnz	x0, 2774 <__addtf3+0x8d4>
    2870:	mov	w7, w11
    2874:	b	2498 <__addtf3+0x5f8>
    2878:	cbz	x8, 2984 <__addtf3+0xae4>
    287c:	tst	x4, #0x4000000000000
    2880:	csinc	w0, w0, wzr, ne  // ne = any
    2884:	cbnz	x5, 2664 <__addtf3+0x7c4>
    2888:	mov	w7, w11
    288c:	mov	x2, x4
    2890:	mov	x9, x13
    2894:	mov	w5, w0
    2898:	b	2328 <__addtf3+0x488>
    289c:	orr	x8, x5, x3
    28a0:	cbz	x8, 27d0 <__addtf3+0x930>
    28a4:	and	x0, x5, #0x7
    28a8:	mov	x9, x5
    28ac:	mov	x2, x3
    28b0:	mov	w5, #0x1                   	// #1
    28b4:	b	1fec <__addtf3+0x14c>
    28b8:	cbz	x0, 2924 <__addtf3+0xa84>
    28bc:	lsr	x5, x2, #50
    28c0:	cmp	x3, x1
    28c4:	eor	x5, x5, #0x1
    28c8:	and	w5, w5, #0x1
    28cc:	b.eq	299c <__addtf3+0xafc>  // b.none
    28d0:	orr	x13, x4, x13
    28d4:	cbz	x13, 2328 <__addtf3+0x488>
    28d8:	bfi	x6, x2, #61, #3
    28dc:	lsr	x0, x2, #3
    28e0:	tbz	x2, #50, 28fc <__addtf3+0xa5c>
    28e4:	lsr	x1, x4, #3
    28e8:	tbnz	x4, #50, 28fc <__addtf3+0xa5c>
    28ec:	and	x6, x10, #0x1fffffffffffffff
    28f0:	mov	w7, w11
    28f4:	orr	x6, x6, x4, lsl #61
    28f8:	mov	x0, x1
    28fc:	extr	x2, x0, x6, #61
    2900:	mov	w0, w5
    2904:	bfi	x6, x2, #61, #3
    2908:	lsr	x2, x2, #3
    290c:	mov	x8, x6
    2910:	b	2344 <__addtf3+0x4a4>
    2914:	adds	x9, x9, x13
    2918:	mov	x1, x3
    291c:	adc	x2, x4, x2
    2920:	b	21e0 <__addtf3+0x340>
    2924:	cmp	x3, x1
    2928:	b.ne	27a8 <__addtf3+0x908>  // b.any
    292c:	orr	x1, x4, x13
    2930:	cbnz	x1, 29a4 <__addtf3+0xb04>
    2934:	cbz	x0, 2498 <__addtf3+0x5f8>
    2938:	b	2328 <__addtf3+0x488>
    293c:	cbnz	x16, 285c <__addtf3+0x9bc>
    2940:	mov	x2, #0xffffffffffffffff    	// #-1
    2944:	mov	w7, #0x0                   	// #0
    2948:	mov	x9, x2
    294c:	mov	x1, #0x7ffe                	// #32766
    2950:	mov	w0, #0x14                  	// #20
    2954:	b	201c <__addtf3+0x17c>
    2958:	mov	w7, w11
    295c:	mov	x2, x4
    2960:	mov	x9, x13
    2964:	b	2328 <__addtf3+0x488>
    2968:	orr	x0, x4, x13
    296c:	cbz	x0, 2498 <__addtf3+0x5f8>
    2970:	b	22b4 <__addtf3+0x414>
    2974:	cmp	x3, x1
    2978:	b.eq	2878 <__addtf3+0x9d8>  // b.none
    297c:	mov	w5, #0x0                   	// #0
    2980:	b	2630 <__addtf3+0x790>
    2984:	cbnz	x5, 2894 <__addtf3+0x9f4>
    2988:	mov	w5, w0
    298c:	b	2630 <__addtf3+0x790>
    2990:	mov	w0, #0x14                  	// #20
    2994:	mov	x16, #0x0                   	// #0
    2998:	b	225c <__addtf3+0x3bc>
    299c:	orr	x1, x4, x13
    29a0:	cbz	x1, 2328 <__addtf3+0x488>
    29a4:	tst	x4, #0x4000000000000
    29a8:	csinc	w5, w5, wzr, ne  // ne = any
    29ac:	cbnz	x0, 28d8 <__addtf3+0xa38>
    29b0:	b	27a8 <__addtf3+0x908>
    29b4:	mov	x8, #0x0                   	// #0
    29b8:	mov	w1, #0x7fff                	// #32767
    29bc:	mov	x2, #0x0                   	// #0
    29c0:	b	2038 <__addtf3+0x198>
    29c4:	nop

00000000000029c8 <__eqtf2>:
    29c8:	stp	x29, x30, [sp, #-48]!
    29cc:	mov	x29, sp
    29d0:	str	q0, [sp, #16]
    29d4:	str	q1, [sp, #32]
    29d8:	ldp	x6, x1, [sp, #16]
    29dc:	ldp	x7, x0, [sp, #32]
    29e0:	mrs	x2, fpcr
    29e4:	ubfx	x4, x1, #48, #15
    29e8:	lsr	x2, x1, #63
    29ec:	lsr	x3, x0, #63
    29f0:	ubfx	x9, x0, #0, #48
    29f4:	mov	x5, #0x7fff                	// #32767
    29f8:	mov	x10, x6
    29fc:	cmp	x4, x5
    2a00:	and	w2, w2, #0xff
    2a04:	ubfx	x1, x1, #0, #48
    2a08:	and	w3, w3, #0xff
    2a0c:	ubfx	x0, x0, #48, #15
    2a10:	b.eq	2a44 <__eqtf2+0x7c>  // b.none
    2a14:	cmp	x0, x5
    2a18:	b.eq	2a30 <__eqtf2+0x68>  // b.none
    2a1c:	cmp	x4, x0
    2a20:	mov	w0, #0x1                   	// #1
    2a24:	b.eq	2a5c <__eqtf2+0x94>  // b.none
    2a28:	ldp	x29, x30, [sp], #48
    2a2c:	ret
    2a30:	orr	x8, x9, x7
    2a34:	cbnz	x8, 2ac0 <__eqtf2+0xf8>
    2a38:	mov	w0, #0x1                   	// #1
    2a3c:	ldp	x29, x30, [sp], #48
    2a40:	ret
    2a44:	orr	x5, x1, x6
    2a48:	cbnz	x5, 2a90 <__eqtf2+0xc8>
    2a4c:	cmp	x0, x4
    2a50:	b.ne	2a38 <__eqtf2+0x70>  // b.any
    2a54:	orr	x8, x9, x7
    2a58:	cbnz	x8, 2ac0 <__eqtf2+0xf8>
    2a5c:	cmp	x1, x9
    2a60:	mov	w0, #0x1                   	// #1
    2a64:	ccmp	x6, x7, #0x0, eq  // eq = none
    2a68:	b.ne	2a28 <__eqtf2+0x60>  // b.any
    2a6c:	cmp	w2, w3
    2a70:	mov	w0, #0x0                   	// #0
    2a74:	b.eq	2a28 <__eqtf2+0x60>  // b.none
    2a78:	mov	w0, #0x1                   	// #1
    2a7c:	cbnz	x4, 2a28 <__eqtf2+0x60>
    2a80:	orr	x1, x1, x10
    2a84:	cmp	x1, #0x0
    2a88:	cset	w0, ne  // ne = any
    2a8c:	b	2a28 <__eqtf2+0x60>
    2a90:	tst	x1, #0x800000000000
    2a94:	b.ne	2aac <__eqtf2+0xe4>  // b.any
    2a98:	mov	w0, #0x1                   	// #1
    2a9c:	bl	36f8 <__sfp_handle_exceptions>
    2aa0:	mov	w0, #0x1                   	// #1
    2aa4:	ldp	x29, x30, [sp], #48
    2aa8:	ret
    2aac:	cmp	x0, x4
    2ab0:	mov	w0, #0x1                   	// #1
    2ab4:	b.ne	2a28 <__eqtf2+0x60>  // b.any
    2ab8:	orr	x8, x9, x7
    2abc:	cbz	x8, 2a28 <__eqtf2+0x60>
    2ac0:	tst	x9, #0x800000000000
    2ac4:	b.eq	2a98 <__eqtf2+0xd0>  // b.none
    2ac8:	b	2a38 <__eqtf2+0x70>
    2acc:	nop

0000000000002ad0 <__getf2>:
    2ad0:	stp	x29, x30, [sp, #-48]!
    2ad4:	mov	x29, sp
    2ad8:	str	q0, [sp, #16]
    2adc:	str	q1, [sp, #32]
    2ae0:	ldp	x8, x1, [sp, #16]
    2ae4:	ldp	x9, x0, [sp, #32]
    2ae8:	mrs	x2, fpcr
    2aec:	ubfx	x4, x1, #48, #15
    2af0:	ubfx	x10, x1, #0, #48
    2af4:	lsr	x2, x1, #63
    2af8:	mov	x7, #0x7fff                	// #32767
    2afc:	mov	x5, x8
    2b00:	cmp	x4, x7
    2b04:	ubfx	x11, x0, #0, #48
    2b08:	ubfx	x6, x0, #48, #15
    2b0c:	lsr	x1, x0, #63
    2b10:	mov	x3, x9
    2b14:	b.eq	2b50 <__getf2+0x80>  // b.none
    2b18:	cmp	x6, x7
    2b1c:	b.eq	2b60 <__getf2+0x90>  // b.none
    2b20:	cbnz	x4, 2b88 <__getf2+0xb8>
    2b24:	orr	x5, x10, x8
    2b28:	cmp	x5, #0x0
    2b2c:	cset	w0, eq  // eq = none
    2b30:	cbnz	x6, 2b3c <__getf2+0x6c>
    2b34:	orr	x3, x11, x9
    2b38:	cbz	x3, 2ba8 <__getf2+0xd8>
    2b3c:	cbz	w0, 2b6c <__getf2+0x9c>
    2b40:	cmp	x1, #0x0
    2b44:	csinv	w0, w0, wzr, ne  // ne = any
    2b48:	ldp	x29, x30, [sp], #48
    2b4c:	ret
    2b50:	orr	x0, x10, x8
    2b54:	cbnz	x0, 2bb4 <__getf2+0xe4>
    2b58:	cmp	x6, x4
    2b5c:	b.ne	2b88 <__getf2+0xb8>  // b.any
    2b60:	orr	x3, x11, x3
    2b64:	cbnz	x3, 2bb4 <__getf2+0xe4>
    2b68:	cbz	x4, 2b98 <__getf2+0xc8>
    2b6c:	cmp	x2, x1
    2b70:	b.eq	2bc8 <__getf2+0xf8>  // b.none
    2b74:	cmp	x2, #0x0
    2b78:	mov	w0, #0xffffffff            	// #-1
    2b7c:	cneg	w0, w0, eq  // eq = none
    2b80:	ldp	x29, x30, [sp], #48
    2b84:	ret
    2b88:	cbnz	x6, 2b6c <__getf2+0x9c>
    2b8c:	orr	x3, x11, x3
    2b90:	cbnz	x3, 2b6c <__getf2+0x9c>
    2b94:	b	2b74 <__getf2+0xa4>
    2b98:	orr	x5, x10, x5
    2b9c:	cmp	x5, #0x0
    2ba0:	cset	w0, eq  // eq = none
    2ba4:	b	2b3c <__getf2+0x6c>
    2ba8:	mov	w0, #0x0                   	// #0
    2bac:	cbz	x5, 2b48 <__getf2+0x78>
    2bb0:	b	2b74 <__getf2+0xa4>
    2bb4:	mov	w0, #0x1                   	// #1
    2bb8:	bl	36f8 <__sfp_handle_exceptions>
    2bbc:	mov	w0, #0xfffffffe            	// #-2
    2bc0:	ldp	x29, x30, [sp], #48
    2bc4:	ret
    2bc8:	cmp	x4, x6
    2bcc:	b.gt	2b74 <__getf2+0xa4>
    2bd0:	b.lt	2c08 <__getf2+0x138>  // b.tstop
    2bd4:	cmp	x10, x11
    2bd8:	b.hi	2b74 <__getf2+0xa4>  // b.pmore
    2bdc:	cset	w0, eq  // eq = none
    2be0:	cmp	w0, #0x0
    2be4:	ccmp	x8, x9, #0x0, ne  // ne = any
    2be8:	b.hi	2b74 <__getf2+0xa4>  // b.pmore
    2bec:	cmp	x10, x11
    2bf0:	b.cc	2c08 <__getf2+0x138>  // b.lo, b.ul, b.last
    2bf4:	cmp	w0, #0x0
    2bf8:	mov	w0, #0x0                   	// #0
    2bfc:	ccmp	x8, x9, #0x2, ne  // ne = any
    2c00:	b.cs	2b48 <__getf2+0x78>  // b.hs, b.nlast
    2c04:	nop
    2c08:	cmp	x2, #0x0
    2c0c:	mov	w0, #0x1                   	// #1
    2c10:	cneg	w0, w0, eq  // eq = none
    2c14:	b	2b48 <__getf2+0x78>

0000000000002c18 <__letf2>:
    2c18:	stp	x29, x30, [sp, #-48]!
    2c1c:	mov	x29, sp
    2c20:	str	q0, [sp, #16]
    2c24:	str	q1, [sp, #32]
    2c28:	ldp	x8, x1, [sp, #16]
    2c2c:	ldp	x9, x0, [sp, #32]
    2c30:	mrs	x2, fpcr
    2c34:	ubfx	x4, x1, #48, #15
    2c38:	ubfx	x10, x1, #0, #48
    2c3c:	lsr	x2, x1, #63
    2c40:	mov	x5, #0x7fff                	// #32767
    2c44:	mov	x6, x8
    2c48:	cmp	x4, x5
    2c4c:	ubfx	x11, x0, #0, #48
    2c50:	ubfx	x7, x0, #48, #15
    2c54:	lsr	x1, x0, #63
    2c58:	mov	x3, x9
    2c5c:	b.eq	2c94 <__letf2+0x7c>  // b.none
    2c60:	cmp	x7, x5
    2c64:	b.eq	2ca4 <__letf2+0x8c>  // b.none
    2c68:	cbnz	x4, 2cd0 <__letf2+0xb8>
    2c6c:	orr	x6, x10, x8
    2c70:	cmp	x6, #0x0
    2c74:	cset	w0, eq  // eq = none
    2c78:	cbnz	x7, 2cbc <__letf2+0xa4>
    2c7c:	orr	x3, x11, x9
    2c80:	cbnz	x3, 2cbc <__letf2+0xa4>
    2c84:	mov	w0, #0x0                   	// #0
    2c88:	cbnz	x6, 2ce4 <__letf2+0xcc>
    2c8c:	ldp	x29, x30, [sp], #48
    2c90:	ret
    2c94:	orr	x0, x10, x8
    2c98:	cbnz	x0, 2cf8 <__letf2+0xe0>
    2c9c:	cmp	x7, x4
    2ca0:	b.ne	2cd0 <__letf2+0xb8>  // b.any
    2ca4:	orr	x3, x11, x3
    2ca8:	cbnz	x3, 2cf8 <__letf2+0xe0>
    2cac:	cbnz	x4, 2cdc <__letf2+0xc4>
    2cb0:	orr	x6, x10, x6
    2cb4:	cmp	x6, #0x0
    2cb8:	cset	w0, eq  // eq = none
    2cbc:	cbz	w0, 2cdc <__letf2+0xc4>
    2cc0:	cmp	x1, #0x0
    2cc4:	csinv	w0, w0, wzr, ne  // ne = any
    2cc8:	ldp	x29, x30, [sp], #48
    2ccc:	ret
    2cd0:	cbnz	x7, 2cdc <__letf2+0xc4>
    2cd4:	orr	x3, x11, x3
    2cd8:	cbz	x3, 2ce4 <__letf2+0xcc>
    2cdc:	cmp	x2, x1
    2ce0:	b.eq	2d0c <__letf2+0xf4>  // b.none
    2ce4:	cmp	x2, #0x0
    2ce8:	mov	w0, #0xffffffff            	// #-1
    2cec:	cneg	w0, w0, eq  // eq = none
    2cf0:	ldp	x29, x30, [sp], #48
    2cf4:	ret
    2cf8:	mov	w0, #0x1                   	// #1
    2cfc:	bl	36f8 <__sfp_handle_exceptions>
    2d00:	mov	w0, #0x2                   	// #2
    2d04:	ldp	x29, x30, [sp], #48
    2d08:	ret
    2d0c:	cmp	x4, x7
    2d10:	b.gt	2ce4 <__letf2+0xcc>
    2d14:	b.lt	2d48 <__letf2+0x130>  // b.tstop
    2d18:	cmp	x10, x11
    2d1c:	b.hi	2ce4 <__letf2+0xcc>  // b.pmore
    2d20:	cset	w0, eq  // eq = none
    2d24:	cmp	w0, #0x0
    2d28:	ccmp	x8, x9, #0x0, ne  // ne = any
    2d2c:	b.hi	2ce4 <__letf2+0xcc>  // b.pmore
    2d30:	cmp	x10, x11
    2d34:	b.cc	2d48 <__letf2+0x130>  // b.lo, b.ul, b.last
    2d38:	cmp	w0, #0x0
    2d3c:	mov	w0, #0x0                   	// #0
    2d40:	ccmp	x8, x9, #0x2, ne  // ne = any
    2d44:	b.cs	2c8c <__letf2+0x74>  // b.hs, b.nlast
    2d48:	cmp	x2, #0x0
    2d4c:	mov	w0, #0x1                   	// #1
    2d50:	cneg	w0, w0, eq  // eq = none
    2d54:	b	2c8c <__letf2+0x74>

0000000000002d58 <__multf3>:
    2d58:	stp	x29, x30, [sp, #-80]!
    2d5c:	mov	x29, sp
    2d60:	str	q0, [sp, #48]
    2d64:	str	q1, [sp, #64]
    2d68:	ldp	x1, x0, [sp, #48]
    2d6c:	ldp	x6, x2, [sp, #64]
    2d70:	mrs	x11, fpcr
    2d74:	lsr	x3, x0, #63
    2d78:	ubfx	x7, x0, #0, #48
    2d7c:	and	w12, w3, #0xff
    2d80:	mov	x14, x3
    2d84:	ubfx	x3, x0, #48, #15
    2d88:	cbz	w3, 3130 <__multf3+0x3d8>
    2d8c:	mov	w4, #0x7fff                	// #32767
    2d90:	cmp	w3, w4
    2d94:	b.eq	31d4 <__multf3+0x47c>  // b.none
    2d98:	and	x3, x3, #0xffff
    2d9c:	extr	x4, x7, x1, #61
    2da0:	mov	x18, #0xffffffffffffc001    	// #-16383
    2da4:	orr	x7, x4, #0x8000000000000
    2da8:	add	x3, x3, x18
    2dac:	lsl	x5, x1, #3
    2db0:	mov	x16, #0x0                   	// #0
    2db4:	mov	x1, #0x0                   	// #0
    2db8:	mov	w0, #0x0                   	// #0
    2dbc:	lsr	x8, x2, #63
    2dc0:	ubfx	x4, x2, #0, #48
    2dc4:	and	w15, w8, #0xff
    2dc8:	mov	x13, x8
    2dcc:	ubfx	x9, x2, #48, #15
    2dd0:	cbz	w9, 3190 <__multf3+0x438>
    2dd4:	mov	w8, #0x7fff                	// #32767
    2dd8:	cmp	w9, w8
    2ddc:	b.eq	2e60 <__multf3+0x108>  // b.none
    2de0:	and	x9, x9, #0xffff
    2de4:	mov	x17, #0xffffffffffffc001    	// #-16383
    2de8:	add	x9, x9, x17
    2dec:	extr	x2, x4, x6, #61
    2df0:	add	x9, x9, x3
    2df4:	lsl	x6, x6, #3
    2df8:	orr	x4, x2, #0x8000000000000
    2dfc:	mov	x2, #0x0                   	// #0
    2e00:	eor	w8, w12, w15
    2e04:	cmp	x1, #0xa
    2e08:	and	w10, w8, #0xff
    2e0c:	add	x3, x9, #0x1
    2e10:	and	x8, x8, #0xff
    2e14:	b.le	2e98 <__multf3+0x140>
    2e18:	cmp	x1, #0xb
    2e1c:	b.eq	3530 <__multf3+0x7d8>  // b.none
    2e20:	mov	w15, w12
    2e24:	mov	x13, x14
    2e28:	mov	w10, w15
    2e2c:	cmp	x16, #0x2
    2e30:	b.eq	31f4 <__multf3+0x49c>  // b.none
    2e34:	mov	x4, x7
    2e38:	mov	x6, x5
    2e3c:	mov	x2, x16
    2e40:	mov	x8, x13
    2e44:	cmp	x2, #0x3
    2e48:	b.ne	2eb4 <__multf3+0x15c>  // b.any
    2e4c:	orr	x4, x4, #0x800000000000
    2e50:	mov	x5, x6
    2e54:	and	x4, x4, #0xffffffffffff
    2e58:	mov	w1, #0x7fff                	// #32767
    2e5c:	b	2ec8 <__multf3+0x170>
    2e60:	mov	x8, #0x7fff                	// #32767
    2e64:	orr	x2, x4, x6
    2e68:	add	x9, x3, x8
    2e6c:	cbnz	x2, 2eec <__multf3+0x194>
    2e70:	eor	w8, w12, w15
    2e74:	orr	x1, x1, #0x2
    2e78:	and	w10, w8, #0xff
    2e7c:	cmp	x1, #0xa
    2e80:	add	x3, x3, #0x8, lsl #12
    2e84:	and	x8, x8, #0xff
    2e88:	mov	x6, #0x0                   	// #0
    2e8c:	b.gt	34a4 <__multf3+0x74c>
    2e90:	mov	x4, #0x0                   	// #0
    2e94:	mov	x2, #0x2                   	// #2
    2e98:	cmp	x1, #0x2
    2e9c:	b.gt	2f14 <__multf3+0x1bc>
    2ea0:	sub	x1, x1, #0x1
    2ea4:	cmp	x1, #0x1
    2ea8:	b.hi	2f50 <__multf3+0x1f8>  // b.pmore
    2eac:	cmp	x2, #0x2
    2eb0:	b.eq	31f4 <__multf3+0x49c>  // b.none
    2eb4:	cmp	x2, #0x1
    2eb8:	b.ne	30b0 <__multf3+0x358>  // b.any
    2ebc:	mov	w1, #0x0                   	// #0
    2ec0:	mov	x4, #0x0                   	// #0
    2ec4:	mov	x5, #0x0                   	// #0
    2ec8:	mov	x3, #0x0                   	// #0
    2ecc:	orr	w1, w1, w10, lsl #15
    2ed0:	bfxil	x3, x4, #0, #48
    2ed4:	fmov	d0, x5
    2ed8:	bfi	x3, x1, #48, #16
    2edc:	fmov	v0.d[1], x3
    2ee0:	cbnz	w0, 3320 <__multf3+0x5c8>
    2ee4:	ldp	x29, x30, [sp], #80
    2ee8:	ret
    2eec:	tst	x4, #0x800000000000
    2ef0:	eor	w8, w12, w15
    2ef4:	orr	x1, x1, #0x3
    2ef8:	csinc	w0, w0, wzr, ne  // ne = any
    2efc:	and	w10, w8, #0xff
    2f00:	add	x3, x3, #0x8, lsl #12
    2f04:	cmp	x1, #0xa
    2f08:	and	x8, x8, #0xff
    2f0c:	mov	x2, #0x3                   	// #3
    2f10:	b.gt	3524 <__multf3+0x7cc>
    2f14:	mov	x12, #0x1                   	// #1
    2f18:	mov	x14, #0x530                 	// #1328
    2f1c:	lsl	x1, x12, x1
    2f20:	tst	x1, x14
    2f24:	b.ne	3124 <__multf3+0x3cc>  // b.any
    2f28:	mov	x14, #0x240                 	// #576
    2f2c:	tst	x1, x14
    2f30:	b.ne	310c <__multf3+0x3b4>  // b.any
    2f34:	mov	x12, #0x88                  	// #136
    2f38:	tst	x1, x12
    2f3c:	b.eq	2f50 <__multf3+0x1f8>  // b.none
    2f40:	mov	x7, x4
    2f44:	mov	x5, x6
    2f48:	mov	x16, x2
    2f4c:	b	2e28 <__multf3+0xd0>
    2f50:	lsr	x13, x5, #32
    2f54:	and	x12, x6, #0xffffffff
    2f58:	and	x15, x5, #0xffffffff
    2f5c:	lsr	x6, x6, #32
    2f60:	and	x18, x4, #0xffffffff
    2f64:	lsr	x2, x4, #32
    2f68:	mul	x4, x13, x12
    2f6c:	stp	x21, x22, [sp, #32]
    2f70:	lsr	x22, x7, #32
    2f74:	and	x5, x7, #0xffffffff
    2f78:	mul	x16, x12, x15
    2f7c:	madd	x7, x6, x15, x4
    2f80:	stp	x19, x20, [sp, #16]
    2f84:	mul	x1, x13, x18
    2f88:	mul	x17, x15, x18
    2f8c:	and	x30, x16, #0xffffffff
    2f90:	madd	x15, x2, x15, x1
    2f94:	add	x16, x7, x16, lsr #32
    2f98:	mul	x21, x22, x12
    2f9c:	cmp	x4, x16
    2fa0:	mul	x20, x22, x18
    2fa4:	mov	x14, #0x100000000           	// #4294967296
    2fa8:	mul	x19, x13, x6
    2fac:	add	x15, x15, x17, lsr #32
    2fb0:	mul	x12, x12, x5
    2fb4:	and	x17, x17, #0xffffffff
    2fb8:	mul	x18, x5, x18
    2fbc:	add	x4, x19, x14
    2fc0:	madd	x7, x6, x5, x21
    2fc4:	csel	x19, x4, x19, hi  // hi = pmore
    2fc8:	madd	x5, x2, x5, x20
    2fcc:	cmp	x1, x15
    2fd0:	mul	x13, x13, x2
    2fd4:	add	x17, x17, x15, lsl #32
    2fd8:	mul	x6, x6, x22
    2fdc:	add	x7, x7, x12, lsr #32
    2fe0:	add	x5, x5, x18, lsr #32
    2fe4:	add	x4, x13, x14
    2fe8:	mul	x2, x2, x22
    2fec:	csel	x13, x4, x13, hi  // hi = pmore
    2ff0:	and	x1, x18, #0xffffffff
    2ff4:	cmp	x21, x7
    2ff8:	add	x4, x6, x14
    2ffc:	add	x30, x30, x16, lsl #32
    3000:	csel	x6, x4, x6, hi  // hi = pmore
    3004:	add	x13, x13, x15, lsr #32
    3008:	cmp	x20, x5
    300c:	add	x1, x1, x5, lsl #32
    3010:	add	x16, x17, x16, lsr #32
    3014:	add	x14, x2, x14
    3018:	csel	x2, x14, x2, hi  // hi = pmore
    301c:	add	x16, x19, x16
    3020:	adds	x1, x1, x13
    3024:	and	x12, x12, #0xffffffff
    3028:	cset	x13, cs  // cs = hs, nlast
    302c:	cmp	x16, x17
    3030:	cset	x4, cc  // cc = lo, ul, last
    3034:	add	x12, x12, x7, lsl #32
    3038:	adds	x1, x1, x4
    303c:	lsr	x5, x5, #32
    3040:	cset	x4, cs  // cs = hs, nlast
    3044:	cmp	x13, #0x0
    3048:	ccmp	x4, #0x0, #0x0, eq  // eq = none
    304c:	add	x7, x6, x7, lsr #32
    3050:	cinc	x5, x5, ne  // ne = any
    3054:	adds	x6, x16, x12
    3058:	cset	x4, cs  // cs = hs, nlast
    305c:	adds	x1, x1, x7
    3060:	cset	x7, cs  // cs = hs, nlast
    3064:	adds	x4, x1, x4
    3068:	cset	x1, cs  // cs = hs, nlast
    306c:	cmp	x7, #0x0
    3070:	orr	x30, x30, x6, lsl #13
    3074:	ccmp	x1, #0x0, #0x0, eq  // eq = none
    3078:	cinc	x1, x2, ne  // ne = any
    307c:	cmp	x30, #0x0
    3080:	add	x1, x1, x5
    3084:	cset	x2, ne  // ne = any
    3088:	orr	x6, x2, x6, lsr #51
    308c:	orr	x6, x6, x4, lsl #13
    3090:	extr	x4, x1, x4, #51
    3094:	tbz	x1, #39, 33a8 <__multf3+0x650>
    3098:	ldp	x19, x20, [sp, #16]
    309c:	and	x1, x6, #0x1
    30a0:	ldp	x21, x22, [sp, #32]
    30a4:	orr	x6, x1, x6, lsr #1
    30a8:	orr	x6, x6, x4, lsl #63
    30ac:	lsr	x4, x4, #1
    30b0:	mov	x1, #0x3fff                	// #16383
    30b4:	add	x2, x3, x1
    30b8:	cmp	x2, #0x0
    30bc:	b.le	3254 <__multf3+0x4fc>
    30c0:	tst	x6, #0x7
    30c4:	b.eq	30e4 <__multf3+0x38c>  // b.none
    30c8:	and	x1, x11, #0xc00000
    30cc:	orr	w0, w0, #0x10
    30d0:	cmp	x1, #0x400, lsl #12
    30d4:	b.eq	349c <__multf3+0x744>  // b.none
    30d8:	cmp	x1, #0x800, lsl #12
    30dc:	b.eq	3444 <__multf3+0x6ec>  // b.none
    30e0:	cbz	x1, 342c <__multf3+0x6d4>
    30e4:	tbz	x4, #52, 30f0 <__multf3+0x398>
    30e8:	and	x4, x4, #0xffefffffffffffff
    30ec:	add	x2, x3, #0x4, lsl #12
    30f0:	mov	x1, #0x7ffe                	// #32766
    30f4:	cmp	x2, x1
    30f8:	b.gt	337c <__multf3+0x624>
    30fc:	and	w1, w2, #0x7fff
    3100:	extr	x5, x4, x6, #3
    3104:	ubfx	x4, x4, #3, #48
    3108:	b	2ec8 <__multf3+0x170>
    310c:	mov	w0, w12
    3110:	mov	w10, #0x0                   	// #0
    3114:	mov	x4, #0xffffffffffff        	// #281474976710655
    3118:	mov	x5, #0xffffffffffffffff    	// #-1
    311c:	mov	w1, #0x7fff                	// #32767
    3120:	b	2ec8 <__multf3+0x170>
    3124:	mov	w15, w10
    3128:	mov	x13, x8
    312c:	b	2e28 <__multf3+0xd0>
    3130:	orr	x5, x7, x1
    3134:	cbz	x5, 323c <__multf3+0x4e4>
    3138:	cbz	x7, 3358 <__multf3+0x600>
    313c:	clz	x0, x7
    3140:	sub	x4, x0, #0xf
    3144:	add	w5, w4, #0x3
    3148:	mov	w3, #0x3d                  	// #61
    314c:	sub	w3, w3, w4
    3150:	lsl	x4, x7, x5
    3154:	lsr	x3, x1, x3
    3158:	orr	x7, x3, x4
    315c:	lsl	x5, x1, x5
    3160:	lsr	x8, x2, #63
    3164:	mov	x3, #0xffffffffffffc011    	// #-16367
    3168:	ubfx	x4, x2, #0, #48
    316c:	sub	x3, x3, x0
    3170:	and	w15, w8, #0xff
    3174:	mov	x13, x8
    3178:	ubfx	x9, x2, #48, #15
    317c:	mov	x1, #0x0                   	// #0
    3180:	mov	x16, #0x0                   	// #0
    3184:	mov	w0, #0x0                   	// #0
    3188:	cbnz	w9, 2dd4 <__multf3+0x7c>
    318c:	nop
    3190:	orr	x2, x4, x6
    3194:	cbz	x2, 3204 <__multf3+0x4ac>
    3198:	cbz	x4, 3334 <__multf3+0x5dc>
    319c:	clz	x9, x4
    31a0:	sub	x2, x9, #0xf
    31a4:	add	w10, w2, #0x3
    31a8:	mov	w8, #0x3d                  	// #61
    31ac:	sub	w8, w8, w2
    31b0:	lsl	x2, x4, x10
    31b4:	lsr	x8, x6, x8
    31b8:	orr	x4, x8, x2
    31bc:	lsl	x6, x6, x10
    31c0:	sub	x9, x3, x9
    31c4:	mov	x10, #0xffffffffffffc011    	// #-16367
    31c8:	mov	x2, #0x0                   	// #0
    31cc:	add	x9, x9, x10
    31d0:	b	2e00 <__multf3+0xa8>
    31d4:	orr	x5, x7, x1
    31d8:	cbnz	x5, 321c <__multf3+0x4c4>
    31dc:	mov	x7, #0x0                   	// #0
    31e0:	mov	x1, #0x8                   	// #8
    31e4:	mov	x3, #0x7fff                	// #32767
    31e8:	mov	x16, #0x2                   	// #2
    31ec:	mov	w0, #0x0                   	// #0
    31f0:	b	2dbc <__multf3+0x64>
    31f4:	mov	w1, #0x7fff                	// #32767
    31f8:	mov	x4, #0x0                   	// #0
    31fc:	mov	x5, #0x0                   	// #0
    3200:	b	2ec8 <__multf3+0x170>
    3204:	orr	x1, x1, #0x1
    3208:	mov	x9, x3
    320c:	mov	x4, #0x0                   	// #0
    3210:	mov	x6, #0x0                   	// #0
    3214:	mov	x2, #0x1                   	// #1
    3218:	b	2e00 <__multf3+0xa8>
    321c:	lsr	x0, x7, #47
    3220:	mov	x5, x1
    3224:	eor	x0, x0, #0x1
    3228:	mov	x1, #0xc                   	// #12
    322c:	and	w0, w0, #0x1
    3230:	mov	x3, #0x7fff                	// #32767
    3234:	mov	x16, #0x3                   	// #3
    3238:	b	2dbc <__multf3+0x64>
    323c:	mov	x7, #0x0                   	// #0
    3240:	mov	x1, #0x4                   	// #4
    3244:	mov	x3, #0x0                   	// #0
    3248:	mov	x16, #0x1                   	// #1
    324c:	mov	w0, #0x0                   	// #0
    3250:	b	2dbc <__multf3+0x64>
    3254:	mov	x1, #0x1                   	// #1
    3258:	sub	x2, x1, x2
    325c:	cmp	x2, #0x74
    3260:	b.gt	32d8 <__multf3+0x580>
    3264:	cmp	x2, #0x3f
    3268:	b.le	33b8 <__multf3+0x660>
    326c:	mov	w1, #0x80                  	// #128
    3270:	sub	w1, w1, w2
    3274:	cmp	x2, #0x40
    3278:	sub	w2, w2, #0x40
    327c:	lsl	x1, x4, x1
    3280:	orr	x1, x6, x1
    3284:	csel	x6, x1, x6, ne  // ne = any
    3288:	lsr	x2, x4, x2
    328c:	cmp	x6, #0x0
    3290:	cset	x5, ne  // ne = any
    3294:	orr	x5, x5, x2
    3298:	ands	x2, x5, #0x7
    329c:	b.eq	33ec <__multf3+0x694>  // b.none
    32a0:	mov	x2, #0x0                   	// #0
    32a4:	and	x11, x11, #0xc00000
    32a8:	orr	w0, w0, #0x10
    32ac:	cmp	x11, #0x400, lsl #12
    32b0:	b.eq	34fc <__multf3+0x7a4>  // b.none
    32b4:	cmp	x11, #0x800, lsl #12
    32b8:	b.eq	3510 <__multf3+0x7b8>  // b.none
    32bc:	cbz	x11, 3454 <__multf3+0x6fc>
    32c0:	tbnz	x2, #51, 346c <__multf3+0x714>
    32c4:	ubfx	x4, x2, #3, #48
    32c8:	extr	x5, x2, x5, #3
    32cc:	orr	w0, w0, #0x8
    32d0:	mov	w1, #0x0                   	// #0
    32d4:	b	3308 <__multf3+0x5b0>
    32d8:	orr	x5, x6, x4
    32dc:	cbz	x5, 32fc <__multf3+0x5a4>
    32e0:	and	x11, x11, #0xc00000
    32e4:	orr	w0, w0, #0x10
    32e8:	cmp	x11, #0x400, lsl #12
    32ec:	sub	x5, x1, x8
    32f0:	b.eq	32fc <__multf3+0x5a4>  // b.none
    32f4:	cmp	x11, #0x800, lsl #12
    32f8:	csel	x5, x8, xzr, eq  // eq = none
    32fc:	orr	w0, w0, #0x8
    3300:	mov	w1, #0x0                   	// #0
    3304:	mov	x4, #0x0                   	// #0
    3308:	mov	x3, #0x0                   	// #0
    330c:	fmov	d0, x5
    3310:	bfxil	x3, x4, #0, #48
    3314:	bfi	x3, x1, #48, #15
    3318:	bfi	x3, x10, #63, #1
    331c:	fmov	v0.d[1], x3
    3320:	str	q0, [sp, #48]
    3324:	bl	36f8 <__sfp_handle_exceptions>
    3328:	ldr	q0, [sp, #48]
    332c:	ldp	x29, x30, [sp], #80
    3330:	ret
    3334:	clz	x9, x6
    3338:	add	x2, x9, #0x31
    333c:	add	x9, x9, #0x40
    3340:	cmp	x2, #0x3c
    3344:	b.le	31a4 <__multf3+0x44c>
    3348:	sub	w2, w2, #0x3d
    334c:	lsl	x4, x6, x2
    3350:	mov	x6, #0x0                   	// #0
    3354:	b	31c0 <__multf3+0x468>
    3358:	clz	x3, x1
    335c:	add	x4, x3, #0x31
    3360:	add	x0, x3, #0x40
    3364:	cmp	x4, #0x3c
    3368:	b.le	3144 <__multf3+0x3ec>
    336c:	sub	w4, w4, #0x3d
    3370:	mov	x5, #0x0                   	// #0
    3374:	lsl	x7, x1, x4
    3378:	b	3160 <__multf3+0x408>
    337c:	and	x5, x11, #0xc00000
    3380:	cmp	x5, #0x400, lsl #12
    3384:	b.eq	3480 <__multf3+0x728>  // b.none
    3388:	cmp	x5, #0x800, lsl #12
    338c:	b.eq	3410 <__multf3+0x6b8>  // b.none
    3390:	cbz	x5, 3404 <__multf3+0x6ac>
    3394:	mov	x4, #0xffffffffffff        	// #281474976710655
    3398:	mov	x5, #0xffffffffffffffff    	// #-1
    339c:	mov	w2, #0x14                  	// #20
    33a0:	orr	w0, w0, w2
    33a4:	b	3308 <__multf3+0x5b0>
    33a8:	mov	x3, x9
    33ac:	ldp	x19, x20, [sp, #16]
    33b0:	ldp	x21, x22, [sp, #32]
    33b4:	b	30b0 <__multf3+0x358>
    33b8:	mov	w1, #0x40                  	// #64
    33bc:	sub	w1, w1, w2
    33c0:	lsr	x3, x6, x2
    33c4:	lsl	x6, x6, x1
    33c8:	cmp	x6, #0x0
    33cc:	lsl	x5, x4, x1
    33d0:	cset	x1, ne  // ne = any
    33d4:	orr	x5, x5, x3
    33d8:	lsr	x2, x4, x2
    33dc:	orr	x5, x5, x1
    33e0:	tst	x5, #0x7
    33e4:	b.ne	32a4 <__multf3+0x54c>  // b.any
    33e8:	tbnz	x2, #51, 351c <__multf3+0x7c4>
    33ec:	ubfx	x4, x2, #3, #48
    33f0:	extr	x5, x2, x5, #3
    33f4:	mov	w1, #0x0                   	// #0
    33f8:	tbz	w11, #11, 2ec8 <__multf3+0x170>
    33fc:	orr	w0, w0, #0x8
    3400:	b	3308 <__multf3+0x5b0>
    3404:	mov	w1, #0x7fff                	// #32767
    3408:	mov	x4, #0x0                   	// #0
    340c:	b	339c <__multf3+0x644>
    3410:	cmp	x8, #0x0
    3414:	mov	w2, #0x7fff                	// #32767
    3418:	mov	x4, #0xffffffffffff        	// #281474976710655
    341c:	csel	w1, w1, w2, eq  // eq = none
    3420:	csel	x4, x4, xzr, eq  // eq = none
    3424:	csetm	x5, eq  // eq = none
    3428:	b	339c <__multf3+0x644>
    342c:	and	x1, x6, #0xf
    3430:	cmp	x1, #0x4
    3434:	b.eq	30e4 <__multf3+0x38c>  // b.none
    3438:	adds	x6, x6, #0x4
    343c:	cinc	x4, x4, cs  // cs = hs, nlast
    3440:	b	30e4 <__multf3+0x38c>
    3444:	cbz	x8, 30e4 <__multf3+0x38c>
    3448:	adds	x6, x6, #0x8
    344c:	cinc	x4, x4, cs  // cs = hs, nlast
    3450:	b	30e4 <__multf3+0x38c>
    3454:	and	x1, x5, #0xf
    3458:	cmp	x1, #0x4
    345c:	b.eq	3468 <__multf3+0x710>  // b.none
    3460:	adds	x5, x5, #0x4
    3464:	cinc	x2, x2, cs  // cs = hs, nlast
    3468:	tbz	x2, #51, 32c4 <__multf3+0x56c>
    346c:	orr	w0, w0, #0x8
    3470:	mov	w1, #0x1                   	// #1
    3474:	mov	x4, #0x0                   	// #0
    3478:	mov	x5, #0x0                   	// #0
    347c:	b	3308 <__multf3+0x5b0>
    3480:	cmp	x8, #0x0
    3484:	mov	w2, #0x7fff                	// #32767
    3488:	mov	x4, #0xffffffffffff        	// #281474976710655
    348c:	csel	w1, w1, w2, ne  // ne = any
    3490:	csel	x4, x4, xzr, ne  // ne = any
    3494:	csetm	x5, ne  // ne = any
    3498:	b	339c <__multf3+0x644>
    349c:	cbnz	x8, 30e4 <__multf3+0x38c>
    34a0:	b	3448 <__multf3+0x6f0>
    34a4:	mov	x4, #0x2                   	// #2
    34a8:	cmp	x1, #0xf
    34ac:	b.ne	34d0 <__multf3+0x778>  // b.any
    34b0:	tbz	x7, #47, 34e8 <__multf3+0x790>
    34b4:	tbnz	x2, #47, 34e8 <__multf3+0x790>
    34b8:	orr	x4, x2, #0x800000000000
    34bc:	mov	w10, w15
    34c0:	and	x4, x4, #0xffffffffffff
    34c4:	mov	x5, x6
    34c8:	mov	w1, #0x7fff                	// #32767
    34cc:	b	2ec8 <__multf3+0x170>
    34d0:	cmp	x1, #0xb
    34d4:	b.ne	2e20 <__multf3+0xc8>  // b.any
    34d8:	mov	x7, x2
    34dc:	mov	x5, x6
    34e0:	mov	x16, x4
    34e4:	b	2e28 <__multf3+0xd0>
    34e8:	orr	x4, x7, #0x800000000000
    34ec:	mov	w10, w12
    34f0:	and	x4, x4, #0xffffffffffff
    34f4:	mov	w1, #0x7fff                	// #32767
    34f8:	b	2ec8 <__multf3+0x170>
    34fc:	cbnz	x8, 3468 <__multf3+0x710>
    3500:	adds	x5, x5, #0x8
    3504:	cinc	x2, x2, cs  // cs = hs, nlast
    3508:	tbnz	x2, #51, 346c <__multf3+0x714>
    350c:	b	32c4 <__multf3+0x56c>
    3510:	cbnz	x8, 3500 <__multf3+0x7a8>
    3514:	tbnz	x2, #51, 346c <__multf3+0x714>
    3518:	b	32c4 <__multf3+0x56c>
    351c:	orr	w0, w0, #0x10
    3520:	b	346c <__multf3+0x714>
    3524:	mov	x2, x4
    3528:	mov	x4, #0x3                   	// #3
    352c:	b	34a8 <__multf3+0x750>
    3530:	mov	w10, w15
    3534:	mov	x8, x13
    3538:	b	2e44 <__multf3+0xec>
    353c:	nop

0000000000003540 <__floatsitf>:
    3540:	cmp	w0, #0x0
    3544:	cbz	w0, 3590 <__floatsitf+0x50>
    3548:	cneg	w1, w0, lt  // lt = tstop
    354c:	mov	w4, #0x403e                	// #16446
    3550:	clz	x3, x1
    3554:	mov	w2, #0x402f                	// #16431
    3558:	sub	w4, w4, w3
    355c:	lsr	w0, w0, #31
    3560:	sub	w2, w2, w4
    3564:	mov	x3, #0x0                   	// #0
    3568:	and	w4, w4, #0x7fff
    356c:	lsl	x1, x1, x2
    3570:	and	x1, x1, #0xffffffffffff
    3574:	orr	w0, w4, w0, lsl #15
    3578:	mov	x2, #0x0                   	// #0
    357c:	bfxil	x3, x1, #0, #48
    3580:	fmov	d0, x2
    3584:	bfi	x3, x0, #48, #16
    3588:	fmov	v0.d[1], x3
    358c:	ret
    3590:	mov	w4, #0x0                   	// #0
    3594:	mov	x1, #0x0                   	// #0
    3598:	mov	w0, #0x0                   	// #0
    359c:	mov	x3, #0x0                   	// #0
    35a0:	orr	w0, w4, w0, lsl #15
    35a4:	bfxil	x3, x1, #0, #48
    35a8:	mov	x2, #0x0                   	// #0
    35ac:	fmov	d0, x2
    35b0:	bfi	x3, x0, #48, #16
    35b4:	fmov	v0.d[1], x3
    35b8:	ret
    35bc:	nop

00000000000035c0 <__fixtfdi>:
    35c0:	stp	x29, x30, [sp, #-48]!
    35c4:	mov	x29, sp
    35c8:	str	x19, [sp, #16]
    35cc:	str	q0, [sp, #32]
    35d0:	ldp	x2, x0, [sp, #32]
    35d4:	mrs	x1, fpcr
    35d8:	ubfx	x19, x0, #48, #15
    35dc:	mov	x3, #0x3ffe                	// #16382
    35e0:	ubfx	x4, x0, #0, #48
    35e4:	cmp	x19, x3
    35e8:	b.gt	3610 <__fixtfdi+0x50>
    35ec:	cbnz	x19, 36b0 <__fixtfdi+0xf0>
    35f0:	orr	x2, x4, x2
    35f4:	cbz	x2, 3600 <__fixtfdi+0x40>
    35f8:	mov	w0, #0x10                  	// #16
    35fc:	bl	36f8 <__sfp_handle_exceptions>
    3600:	mov	x0, x19
    3604:	ldr	x19, [sp, #16]
    3608:	ldp	x29, x30, [sp], #48
    360c:	ret
    3610:	lsr	x1, x0, #63
    3614:	and	w3, w1, #0xff
    3618:	mov	x1, #0x403d                	// #16445
    361c:	cmp	x19, x1
    3620:	b.le	3658 <__fixtfdi+0x98>
    3624:	mov	x0, #0x403e                	// #16446
    3628:	and	x5, x3, #0xff
    362c:	cmp	x19, x0
    3630:	mov	x0, #0x7fffffffffffffff    	// #9223372036854775807
    3634:	csel	w1, w3, wzr, eq  // eq = none
    3638:	add	x19, x5, x0
    363c:	cbz	w1, 36c0 <__fixtfdi+0x100>
    3640:	extr	x4, x4, x2, #49
    3644:	cbnz	x4, 36c0 <__fixtfdi+0x100>
    3648:	cmp	xzr, x2, lsl #15
    364c:	b.eq	3600 <__fixtfdi+0x40>  // b.none
    3650:	mov	w0, #0x10                  	// #16
    3654:	b	35fc <__fixtfdi+0x3c>
    3658:	mov	x5, #0x406f                	// #16495
    365c:	sub	x1, x5, x19
    3660:	mov	x0, x19
    3664:	cmp	x1, #0x3f
    3668:	orr	x19, x4, #0x1000000000000
    366c:	b.le	36cc <__fixtfdi+0x10c>
    3670:	mov	w4, #0xffffc011            	// #-16367
    3674:	add	w4, w0, w4
    3678:	cmp	x1, #0x40
    367c:	mov	w1, #0x402f                	// #16431
    3680:	sub	w0, w1, w0
    3684:	lsl	x1, x19, x4
    3688:	orr	x1, x2, x1
    368c:	csel	x2, x1, x2, ne  // ne = any
    3690:	lsr	x19, x19, x0
    3694:	cmp	x2, #0x0
    3698:	cset	w0, ne  // ne = any
    369c:	cmp	w3, #0x0
    36a0:	cneg	x19, x19, ne  // ne = any
    36a4:	cbz	w0, 3600 <__fixtfdi+0x40>
    36a8:	mov	w0, #0x10                  	// #16
    36ac:	b	35fc <__fixtfdi+0x3c>
    36b0:	mov	x19, #0x0                   	// #0
    36b4:	mov	w0, #0x10                  	// #16
    36b8:	bl	36f8 <__sfp_handle_exceptions>
    36bc:	b	3600 <__fixtfdi+0x40>
    36c0:	mov	w0, #0x1                   	// #1
    36c4:	bl	36f8 <__sfp_handle_exceptions>
    36c8:	b	3600 <__fixtfdi+0x40>
    36cc:	mov	w6, #0xffffbfd1            	// #-16431
    36d0:	add	w4, w0, w6
    36d4:	sub	w0, w5, w0
    36d8:	lsl	x1, x2, x4
    36dc:	cmp	x1, #0x0
    36e0:	lsr	x2, x2, x0
    36e4:	cset	w0, ne  // ne = any
    36e8:	lsl	x19, x19, x4
    36ec:	orr	x19, x2, x19
    36f0:	b	369c <__fixtfdi+0xdc>
    36f4:	nop

00000000000036f8 <__sfp_handle_exceptions>:
    36f8:	tbz	w0, #0, 3708 <__sfp_handle_exceptions+0x10>
    36fc:	movi	v1.2s, #0x0
    3700:	fdiv	s0, s1, s1
    3704:	mrs	x1, fpsr
    3708:	tbz	w0, #1, 371c <__sfp_handle_exceptions+0x24>
    370c:	fmov	s1, #1.000000000000000000e+00
    3710:	movi	v2.2s, #0x0
    3714:	fdiv	s0, s1, s2
    3718:	mrs	x1, fpsr
    371c:	tbz	w0, #2, 373c <__sfp_handle_exceptions+0x44>
    3720:	mov	w2, #0xc5ae                	// #50606
    3724:	mov	w1, #0x7f7fffff            	// #2139095039
    3728:	movk	w2, #0x749d, lsl #16
    372c:	fmov	s1, w1
    3730:	fmov	s2, w2
    3734:	fadd	s0, s1, s2
    3738:	mrs	x1, fpsr
    373c:	tbz	w0, #3, 374c <__sfp_handle_exceptions+0x54>
    3740:	movi	v1.2s, #0x80, lsl #16
    3744:	fmul	s0, s1, s1
    3748:	mrs	x1, fpsr
    374c:	tbz	w0, #4, 3764 <__sfp_handle_exceptions+0x6c>
    3750:	mov	w0, #0x7f7fffff            	// #2139095039
    3754:	fmov	s2, #1.000000000000000000e+00
    3758:	fmov	s1, w0
    375c:	fsub	s0, s1, s2
    3760:	mrs	x0, fpsr
    3764:	ret

Disassembly of section .fini:

0000000000003768 <_fini>:
    3768:	stp	x29, x30, [sp, #-16]!
    376c:	mov	x29, sp
    3770:	ldp	x29, x30, [sp], #16
    3774:	ret
