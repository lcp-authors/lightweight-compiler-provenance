In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libe2p.a_clang_-O1:

feature.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_feature2string>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	str	x19, [sp, #16]
   8:	adrp	x19, 0 <e2p_feature2string>
   c:	adrp	x8, 0 <e2p_feature2string>
  10:	add	x19, x19, #0x0
  14:	add	x8, x8, #0x0
  18:	mov	x29, sp
  1c:	b	2c <e2p_feature2string+0x2c>
  20:	ldur	x19, [x8, #20]
  24:	add	x8, x8, #0x10
  28:	cbz	x19, 48 <e2p_feature2string+0x48>
  2c:	ldur	w9, [x8, #-4]
  30:	cmp	w9, w0
  34:	b.ne	20 <e2p_feature2string+0x20>  // b.any
  38:	ldr	w9, [x8]
  3c:	cmp	w9, w1
  40:	b.ne	20 <e2p_feature2string+0x20>  // b.any
  44:	b	8c <e2p_feature2string+0x8c>
  48:	cmp	w0, #0x2
  4c:	b.hi	60 <e2p_feature2string+0x60>  // b.pmore
  50:	adrp	x8, 0 <e2p_feature2string>
  54:	add	x8, x8, #0x0
  58:	ldr	w2, [x8, w0, sxtw #2]
  5c:	b	64 <e2p_feature2string+0x64>
  60:	mov	w2, #0x3f                  	// #63
  64:	lsr	w8, w1, #1
  68:	adrp	x19, 0 <e2p_feature2string>
  6c:	clz	w8, w8
  70:	mov	w9, #0x20                  	// #32
  74:	add	x19, x19, #0x0
  78:	adrp	x1, 0 <e2p_feature2string>
  7c:	sub	w3, w9, w8
  80:	add	x1, x1, #0x0
  84:	mov	x0, x19
  88:	bl	0 <sprintf>
  8c:	mov	x0, x19
  90:	ldr	x19, [sp, #16]
  94:	ldp	x29, x30, [sp], #32
  98:	ret

000000000000009c <e2p_string2feature>:
  9c:	sub	sp, sp, #0x40
  a0:	stp	x22, x21, [sp, #32]
  a4:	mov	x21, x1
  a8:	adrp	x22, 0 <e2p_feature2string>
  ac:	adrp	x1, 0 <e2p_feature2string>
  b0:	stp	x20, x19, [sp, #48]
  b4:	mov	x19, x2
  b8:	mov	x20, x0
  bc:	add	x22, x22, #0x0
  c0:	add	x1, x1, #0x0
  c4:	stp	x29, x30, [sp, #16]
  c8:	add	x29, sp, #0x10
  cc:	mov	x0, x20
  d0:	bl	0 <strcasecmp>
  d4:	cbz	w0, 104 <e2p_string2feature+0x68>
  d8:	ldr	x1, [x22, #24]
  dc:	add	x22, x22, #0x10
  e0:	cbnz	x1, cc <e2p_string2feature+0x30>
  e4:	adrp	x1, 0 <e2p_feature2string>
  e8:	add	x1, x1, #0x0
  ec:	mov	w2, #0x8                   	// #8
  f0:	mov	x0, x20
  f4:	bl	0 <strncasecmp>
  f8:	cbz	w0, 128 <e2p_string2feature+0x8c>
  fc:	mov	w0, #0x1                   	// #1
 100:	b	114 <e2p_string2feature+0x78>
 104:	ldr	w8, [x22]
 108:	str	w8, [x21]
 10c:	ldr	w8, [x22, #4]
 110:	str	w8, [x19]
 114:	ldp	x20, x19, [sp, #48]
 118:	ldp	x22, x21, [sp, #32]
 11c:	ldp	x29, x30, [sp, #16]
 120:	add	sp, sp, #0x40
 124:	ret
 128:	ldrb	w8, [x20, #8]
 12c:	mov	w0, #0x1                   	// #1
 130:	sub	w8, w8, #0x43
 134:	cmp	w8, #0x2f
 138:	b.hi	114 <e2p_string2feature+0x78>  // b.pmore
 13c:	mov	w9, #0x1                   	// #1
 140:	lsl	x9, x9, x8
 144:	tst	x9, #0x100000001
 148:	b.ne	174 <e2p_string2feature+0xd8>  // b.any
 14c:	mov	w9, #0x1                   	// #1
 150:	lsl	x9, x9, x8
 154:	tst	x9, #0x4000000040
 158:	b.ne	17c <e2p_string2feature+0xe0>  // b.any
 15c:	mov	w9, #0x1                   	// #1
 160:	lsl	x8, x9, x8
 164:	tst	x8, #0x800000008000
 168:	b.eq	114 <e2p_string2feature+0x78>  // b.none
 16c:	mov	w8, #0x2                   	// #2
 170:	b	180 <e2p_string2feature+0xe4>
 174:	mov	w8, wzr
 178:	b	180 <e2p_string2feature+0xe4>
 17c:	mov	w8, #0x1                   	// #1
 180:	str	w8, [x21]
 184:	ldrb	w8, [x20, #9]!
 188:	cbz	w8, fc <e2p_string2feature+0x60>
 18c:	add	x1, sp, #0x8
 190:	mov	w2, #0xa                   	// #10
 194:	mov	x0, x20
 198:	bl	0 <strtol>
 19c:	mov	x8, x0
 1a0:	cmp	w8, #0x1f
 1a4:	b.hi	fc <e2p_string2feature+0x60>  // b.pmore
 1a8:	ldr	x9, [sp, #8]
 1ac:	mov	w0, #0x1                   	// #1
 1b0:	ldrb	w9, [x9]
 1b4:	cbnz	w9, 114 <e2p_string2feature+0x78>
 1b8:	lsl	w8, w0, w8
 1bc:	mov	w0, wzr
 1c0:	b	110 <e2p_string2feature+0x74>

00000000000001c4 <e2p_jrnl_feature2string>:
 1c4:	stp	x29, x30, [sp, #-32]!
 1c8:	str	x19, [sp, #16]
 1cc:	adrp	x19, 0 <e2p_feature2string>
 1d0:	adrp	x8, 0 <e2p_feature2string>
 1d4:	add	x19, x19, #0x0
 1d8:	add	x8, x8, #0x0
 1dc:	mov	x29, sp
 1e0:	b	1f0 <e2p_jrnl_feature2string+0x2c>
 1e4:	ldur	x19, [x8, #20]
 1e8:	add	x8, x8, #0x10
 1ec:	cbz	x19, 20c <e2p_jrnl_feature2string+0x48>
 1f0:	ldur	w9, [x8, #-4]
 1f4:	cmp	w9, w0
 1f8:	b.ne	1e4 <e2p_jrnl_feature2string+0x20>  // b.any
 1fc:	ldr	w9, [x8]
 200:	cmp	w9, w1
 204:	b.ne	1e4 <e2p_jrnl_feature2string+0x20>  // b.any
 208:	b	250 <e2p_jrnl_feature2string+0x8c>
 20c:	cmp	w0, #0x2
 210:	b.hi	224 <e2p_jrnl_feature2string+0x60>  // b.pmore
 214:	adrp	x8, 0 <e2p_feature2string>
 218:	add	x8, x8, #0x0
 21c:	ldr	w2, [x8, w0, sxtw #2]
 220:	b	228 <e2p_jrnl_feature2string+0x64>
 224:	mov	w2, #0x3f                  	// #63
 228:	lsr	w8, w1, #1
 22c:	adrp	x19, 0 <e2p_feature2string>
 230:	clz	w8, w8
 234:	mov	w9, #0x20                  	// #32
 238:	add	x19, x19, #0x0
 23c:	adrp	x1, 0 <e2p_feature2string>
 240:	sub	w3, w9, w8
 244:	add	x1, x1, #0x0
 248:	mov	x0, x19
 24c:	bl	0 <sprintf>
 250:	mov	x0, x19
 254:	ldr	x19, [sp, #16]
 258:	ldp	x29, x30, [sp], #32
 25c:	ret

0000000000000260 <e2p_jrnl_string2feature>:
 260:	sub	sp, sp, #0x40
 264:	stp	x22, x21, [sp, #32]
 268:	mov	x21, x1
 26c:	adrp	x22, 0 <e2p_feature2string>
 270:	adrp	x1, 0 <e2p_feature2string>
 274:	stp	x20, x19, [sp, #48]
 278:	mov	x19, x2
 27c:	mov	x20, x0
 280:	add	x22, x22, #0x0
 284:	add	x1, x1, #0x0
 288:	stp	x29, x30, [sp, #16]
 28c:	add	x29, sp, #0x10
 290:	mov	x0, x20
 294:	bl	0 <strcasecmp>
 298:	cbz	w0, 2c8 <e2p_jrnl_string2feature+0x68>
 29c:	ldr	x1, [x22, #24]
 2a0:	add	x22, x22, #0x10
 2a4:	cbnz	x1, 290 <e2p_jrnl_string2feature+0x30>
 2a8:	adrp	x1, 0 <e2p_feature2string>
 2ac:	add	x1, x1, #0x0
 2b0:	mov	w2, #0x8                   	// #8
 2b4:	mov	x0, x20
 2b8:	bl	0 <strncasecmp>
 2bc:	cbz	w0, 2ec <e2p_jrnl_string2feature+0x8c>
 2c0:	mov	w0, #0x1                   	// #1
 2c4:	b	2d8 <e2p_jrnl_string2feature+0x78>
 2c8:	ldr	w8, [x22]
 2cc:	str	w8, [x21]
 2d0:	ldr	w8, [x22, #4]
 2d4:	str	w8, [x19]
 2d8:	ldp	x20, x19, [sp, #48]
 2dc:	ldp	x22, x21, [sp, #32]
 2e0:	ldp	x29, x30, [sp, #16]
 2e4:	add	sp, sp, #0x40
 2e8:	ret
 2ec:	ldrb	w8, [x20, #8]
 2f0:	mov	w0, #0x1                   	// #1
 2f4:	sub	w8, w8, #0x43
 2f8:	cmp	w8, #0x2f
 2fc:	b.hi	2d8 <e2p_jrnl_string2feature+0x78>  // b.pmore
 300:	mov	w9, #0x1                   	// #1
 304:	lsl	x9, x9, x8
 308:	tst	x9, #0x100000001
 30c:	b.ne	338 <e2p_jrnl_string2feature+0xd8>  // b.any
 310:	mov	w9, #0x1                   	// #1
 314:	lsl	x9, x9, x8
 318:	tst	x9, #0x4000000040
 31c:	b.ne	340 <e2p_jrnl_string2feature+0xe0>  // b.any
 320:	mov	w9, #0x1                   	// #1
 324:	lsl	x8, x9, x8
 328:	tst	x8, #0x800000008000
 32c:	b.eq	2d8 <e2p_jrnl_string2feature+0x78>  // b.none
 330:	mov	w8, #0x2                   	// #2
 334:	b	344 <e2p_jrnl_string2feature+0xe4>
 338:	mov	w8, wzr
 33c:	b	344 <e2p_jrnl_string2feature+0xe4>
 340:	mov	w8, #0x1                   	// #1
 344:	str	w8, [x21]
 348:	ldrb	w8, [x20, #9]!
 34c:	cbz	w8, 2c0 <e2p_jrnl_string2feature+0x60>
 350:	add	x1, sp, #0x8
 354:	mov	w2, #0xa                   	// #10
 358:	mov	x0, x20
 35c:	bl	0 <strtol>
 360:	mov	x8, x0
 364:	cmp	w8, #0x1f
 368:	b.hi	2c0 <e2p_jrnl_string2feature+0x60>  // b.pmore
 36c:	ldr	x9, [sp, #8]
 370:	mov	w0, #0x1                   	// #1
 374:	ldrb	w9, [x9]
 378:	cbnz	w9, 2d8 <e2p_jrnl_string2feature+0x78>
 37c:	lsl	w8, w0, w8
 380:	mov	w0, wzr
 384:	b	2d4 <e2p_jrnl_string2feature+0x74>

0000000000000388 <e2p_edit_feature2>:
 388:	sub	sp, sp, #0x70
 38c:	cmp	x3, #0x0
 390:	stp	x28, x27, [sp, #32]
 394:	stp	x24, x23, [sp, #64]
 398:	stp	x22, x21, [sp, #80]
 39c:	stp	x20, x19, [sp, #96]
 3a0:	mov	x20, x5
 3a4:	mov	x21, x4
 3a8:	mov	x22, x2
 3ac:	mov	x23, x1
 3b0:	mov	x24, x0
 3b4:	csel	x28, x2, x3, eq  // eq = none
 3b8:	stp	x29, x30, [sp, #16]
 3bc:	stp	x26, x25, [sp, #48]
 3c0:	add	x29, sp, #0x10
 3c4:	cbz	x4, 3cc <e2p_edit_feature2+0x44>
 3c8:	str	wzr, [x21]
 3cc:	cbz	x20, 3d4 <e2p_edit_feature2+0x4c>
 3d0:	str	wzr, [x20]
 3d4:	mov	x0, x24
 3d8:	bl	0 <strlen>
 3dc:	add	x0, x0, #0x1
 3e0:	bl	0 <malloc>
 3e4:	cbz	x0, 518 <e2p_edit_feature2+0x190>
 3e8:	mov	x1, x24
 3ec:	mov	x19, x0
 3f0:	str	x20, [sp]
 3f4:	bl	0 <strcpy>
 3f8:	adrp	x24, 0 <e2p_feature2string>
 3fc:	adrp	x25, 0 <e2p_feature2string>
 400:	add	x24, x24, #0x0
 404:	add	x25, x25, #0x0
 408:	b	420 <e2p_edit_feature2+0x98>
 40c:	str	xzr, [x23]
 410:	str	wzr, [x23, #8]
 414:	cmp	x26, #0x0
 418:	csinc	x0, xzr, x26, eq  // eq = none
 41c:	cbz	x26, 510 <e2p_edit_feature2+0x188>
 420:	ldrb	w8, [x0]
 424:	cbz	w8, 510 <e2p_edit_feature2+0x188>
 428:	bl	574 <skip_over_blanks>
 42c:	mov	x27, x0
 430:	bl	5b8 <skip_over_word>
 434:	ldrb	w8, [x0]
 438:	cbz	w8, 448 <e2p_edit_feature2+0xc0>
 43c:	mov	x26, x0
 440:	strb	wzr, [x0]
 444:	b	44c <e2p_edit_feature2+0xc4>
 448:	mov	x26, xzr
 44c:	mov	x0, x27
 450:	mov	x1, x24
 454:	bl	0 <strcasecmp>
 458:	cbz	w0, 40c <e2p_edit_feature2+0x84>
 45c:	mov	x0, x27
 460:	mov	x1, x25
 464:	bl	0 <strcasecmp>
 468:	cbz	w0, 40c <e2p_edit_feature2+0x84>
 46c:	ldrb	w8, [x27]
 470:	mov	w20, wzr
 474:	cmp	w8, #0x2b
 478:	b.eq	490 <e2p_edit_feature2+0x108>  // b.none
 47c:	cmp	w8, #0x5e
 480:	b.eq	48c <e2p_edit_feature2+0x104>  // b.none
 484:	cmp	w8, #0x2d
 488:	b.ne	494 <e2p_edit_feature2+0x10c>  // b.any
 48c:	mov	w20, #0x1                   	// #1
 490:	add	x27, x27, #0x1
 494:	add	x1, sp, #0x8
 498:	sub	x2, x29, #0x4
 49c:	mov	x0, x27
 4a0:	bl	9c <e2p_string2feature>
 4a4:	cbnz	w0, 544 <e2p_edit_feature2+0x1bc>
 4a8:	cbz	w20, 4dc <e2p_edit_feature2+0x154>
 4ac:	cbz	x28, 4c4 <e2p_edit_feature2+0x13c>
 4b0:	ldrsw	x9, [sp, #8]
 4b4:	ldur	w8, [x29, #-4]
 4b8:	ldr	w10, [x28, x9, lsl #2]
 4bc:	tst	w8, w10
 4c0:	b.eq	520 <e2p_edit_feature2+0x198>  // b.none
 4c4:	ldrsw	x8, [sp, #8]
 4c8:	ldur	w9, [x29, #-4]
 4cc:	lsl	x8, x8, #2
 4d0:	ldr	w10, [x23, x8]
 4d4:	bic	w9, w10, w9
 4d8:	b	508 <e2p_edit_feature2+0x180>
 4dc:	cbz	x22, 4f4 <e2p_edit_feature2+0x16c>
 4e0:	ldrsw	x9, [sp, #8]
 4e4:	ldur	w8, [x29, #-4]
 4e8:	ldr	w10, [x22, x9, lsl #2]
 4ec:	tst	w8, w10
 4f0:	b.eq	530 <e2p_edit_feature2+0x1a8>  // b.none
 4f4:	ldrsw	x8, [sp, #8]
 4f8:	ldur	w9, [x29, #-4]
 4fc:	lsl	x8, x8, #2
 500:	ldr	w10, [x23, x8]
 504:	orr	w9, w10, w9
 508:	str	w9, [x23, x8]
 50c:	b	414 <e2p_edit_feature2+0x8c>
 510:	mov	w20, wzr
 514:	b	548 <e2p_edit_feature2+0x1c0>
 518:	mov	w20, #0x1                   	// #1
 51c:	b	550 <e2p_edit_feature2+0x1c8>
 520:	cbz	x21, 538 <e2p_edit_feature2+0x1b0>
 524:	orr	w9, w9, #0x80
 528:	str	w9, [x21]
 52c:	b	538 <e2p_edit_feature2+0x1b0>
 530:	cbz	x21, 538 <e2p_edit_feature2+0x1b0>
 534:	str	w9, [x21]
 538:	ldr	x9, [sp]
 53c:	cbz	x9, 544 <e2p_edit_feature2+0x1bc>
 540:	str	w8, [x9]
 544:	mov	w20, #0x1                   	// #1
 548:	mov	x0, x19
 54c:	bl	0 <free>
 550:	mov	w0, w20
 554:	ldp	x20, x19, [sp, #96]
 558:	ldp	x22, x21, [sp, #80]
 55c:	ldp	x24, x23, [sp, #64]
 560:	ldp	x26, x25, [sp, #48]
 564:	ldp	x28, x27, [sp, #32]
 568:	ldp	x29, x30, [sp, #16]
 56c:	add	sp, sp, #0x70
 570:	ret

0000000000000574 <skip_over_blanks>:
 574:	stp	x29, x30, [sp, #-32]!
 578:	stp	x20, x19, [sp, #16]
 57c:	ldrb	w20, [x0]
 580:	mov	x19, x0
 584:	mov	x29, sp
 588:	cbz	w20, 5a8 <skip_over_blanks+0x34>
 58c:	bl	0 <__ctype_b_loc>
 590:	ldr	x8, [x0]
 594:	and	x9, x20, #0xff
 598:	ldrh	w9, [x8, x9, lsl #1]
 59c:	tbz	w9, #13, 5a8 <skip_over_blanks+0x34>
 5a0:	ldrb	w20, [x19, #1]!
 5a4:	cbnz	w20, 594 <skip_over_blanks+0x20>
 5a8:	mov	x0, x19
 5ac:	ldp	x20, x19, [sp, #16]
 5b0:	ldp	x29, x30, [sp], #32
 5b4:	ret

00000000000005b8 <skip_over_word>:
 5b8:	stp	x29, x30, [sp, #-32]!
 5bc:	stp	x20, x19, [sp, #16]
 5c0:	ldrb	w20, [x0]
 5c4:	mov	x19, x0
 5c8:	mov	x29, sp
 5cc:	cbz	w20, 5f8 <skip_over_word+0x40>
 5d0:	bl	0 <__ctype_b_loc>
 5d4:	ldr	x8, [x0]
 5d8:	and	w9, w20, #0xff
 5dc:	cmp	w9, #0x2c
 5e0:	b.eq	5f8 <skip_over_word+0x40>  // b.none
 5e4:	and	x9, x20, #0xff
 5e8:	ldrh	w9, [x8, x9, lsl #1]
 5ec:	tbnz	w9, #13, 5f8 <skip_over_word+0x40>
 5f0:	ldrb	w20, [x19, #1]!
 5f4:	cbnz	w20, 5d8 <skip_over_word+0x20>
 5f8:	mov	x0, x19
 5fc:	ldp	x20, x19, [sp, #16]
 600:	ldp	x29, x30, [sp], #32
 604:	ret

0000000000000608 <e2p_edit_feature>:
 608:	stp	x29, x30, [sp, #-16]!
 60c:	mov	x3, xzr
 610:	mov	x4, xzr
 614:	mov	x5, xzr
 618:	mov	x29, sp
 61c:	bl	388 <e2p_edit_feature2>
 620:	ldp	x29, x30, [sp], #16
 624:	ret

fgetflags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fgetflags>:
   0:	sub	sp, sp, #0xc0
   4:	stp	x20, x19, [sp, #176]
   8:	mov	x19, x1
   c:	add	x1, sp, #0x10
  10:	stp	x29, x30, [sp, #144]
  14:	stp	x22, x21, [sp, #160]
  18:	add	x29, sp, #0x90
  1c:	mov	x20, x0
  20:	bl	0 <lstat>
  24:	cbz	w0, 64 <fgetflags+0x64>
  28:	mov	w1, #0x800                 	// #2048
  2c:	mov	x0, x20
  30:	bl	0 <open>
  34:	cmn	w0, #0x1
  38:	b.eq	88 <fgetflags+0x88>  // b.none
  3c:	mov	w1, #0x6601                	// #26113
  40:	add	x2, sp, #0xc
  44:	movk	w1, #0x8008, lsl #16
  48:	mov	w21, w0
  4c:	bl	0 <ioctl>
  50:	mov	w20, w0
  54:	cmn	w0, #0x1
  58:	b.eq	90 <fgetflags+0x90>  // b.none
  5c:	mov	w22, wzr
  60:	b	98 <fgetflags+0x98>
  64:	ldr	w8, [sp, #32]
  68:	and	w8, w8, #0xf000
  6c:	cmp	w8, #0x8, lsl #12
  70:	b.eq	28 <fgetflags+0x28>  // b.none
  74:	cmp	w8, #0x4, lsl #12
  78:	b.eq	28 <fgetflags+0x28>  // b.none
  7c:	bl	0 <__errno_location>
  80:	mov	w8, #0x5f                  	// #95
  84:	str	w8, [x0]
  88:	mov	w20, #0xffffffff            	// #-1
  8c:	b	b4 <fgetflags+0xb4>
  90:	bl	0 <__errno_location>
  94:	ldr	w22, [x0]
  98:	ldrsw	x8, [sp, #12]
  9c:	mov	w0, w21
  a0:	str	x8, [x19]
  a4:	bl	0 <close>
  a8:	cbz	w22, b4 <fgetflags+0xb4>
  ac:	bl	0 <__errno_location>
  b0:	str	w22, [x0]
  b4:	mov	w0, w20
  b8:	ldp	x20, x19, [sp, #176]
  bc:	ldp	x22, x21, [sp, #160]
  c0:	ldp	x29, x30, [sp, #144]
  c4:	add	sp, sp, #0xc0
  c8:	ret

fsetflags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fsetflags>:
   0:	sub	sp, sp, #0xb0
   4:	stp	x20, x19, [sp, #160]
   8:	mov	x19, x1
   c:	mov	x1, sp
  10:	stp	x29, x30, [sp, #128]
  14:	str	x21, [sp, #144]
  18:	add	x29, sp, #0x80
  1c:	mov	x20, x0
  20:	bl	0 <lstat>
  24:	cbz	w0, 68 <fsetflags+0x68>
  28:	mov	w1, #0x800                 	// #2048
  2c:	mov	x0, x20
  30:	bl	0 <open>
  34:	cmn	w0, #0x1
  38:	b.eq	8c <fsetflags+0x8c>  // b.none
  3c:	mov	w1, #0x6602                	// #26114
  40:	add	x2, x29, #0x1c
  44:	movk	w1, #0x4008, lsl #16
  48:	mov	w20, w0
  4c:	str	w19, [x29, #28]
  50:	bl	0 <ioctl>
  54:	mov	w19, w0
  58:	cmn	w0, #0x1
  5c:	b.eq	94 <fsetflags+0x94>  // b.none
  60:	mov	w21, wzr
  64:	b	9c <fsetflags+0x9c>
  68:	ldr	w8, [sp, #16]
  6c:	and	w8, w8, #0xf000
  70:	cmp	w8, #0x8, lsl #12
  74:	b.eq	28 <fsetflags+0x28>  // b.none
  78:	cmp	w8, #0x4, lsl #12
  7c:	b.eq	28 <fsetflags+0x28>  // b.none
  80:	bl	0 <__errno_location>
  84:	mov	w8, #0x5f                  	// #95
  88:	str	w8, [x0]
  8c:	mov	w19, #0xffffffff            	// #-1
  90:	b	b0 <fsetflags+0xb0>
  94:	bl	0 <__errno_location>
  98:	ldr	w21, [x0]
  9c:	mov	w0, w20
  a0:	bl	0 <close>
  a4:	cbz	w21, b0 <fsetflags+0xb0>
  a8:	bl	0 <__errno_location>
  ac:	str	w21, [x0]
  b0:	mov	w0, w19
  b4:	ldp	x20, x19, [sp, #160]
  b8:	ldr	x21, [sp, #144]
  bc:	ldp	x29, x30, [sp, #128]
  c0:	add	sp, sp, #0xb0
  c4:	ret

fgetversion.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fgetversion>:
   0:	sub	sp, sp, #0x40
   4:	stp	x29, x30, [sp, #16]
   8:	stp	x20, x19, [sp, #48]
   c:	add	x29, sp, #0x10
  10:	mov	x19, x1
  14:	mov	w20, #0xffffffff            	// #-1
  18:	mov	w1, #0x800                 	// #2048
  1c:	stp	x22, x21, [sp, #32]
  20:	stur	w20, [x29, #-4]
  24:	bl	0 <open>
  28:	cmn	w0, #0x1
  2c:	b.eq	74 <fgetversion+0x74>  // b.none
  30:	mov	w1, #0x7601                	// #30209
  34:	sub	x2, x29, #0x4
  38:	movk	w1, #0x8008, lsl #16
  3c:	mov	w21, w0
  40:	bl	0 <ioctl>
  44:	mov	w20, w0
  48:	cmn	w0, #0x1
  4c:	b.eq	58 <fgetversion+0x58>  // b.none
  50:	mov	w22, wzr
  54:	b	60 <fgetversion+0x60>
  58:	bl	0 <__errno_location>
  5c:	ldr	w22, [x0]
  60:	mov	w0, w21
  64:	bl	0 <close>
  68:	cmn	w20, #0x1
  6c:	b.eq	8c <fgetversion+0x8c>  // b.none
  70:	cbz	w20, 98 <fgetversion+0x98>
  74:	mov	w0, w20
  78:	ldp	x20, x19, [sp, #48]
  7c:	ldp	x22, x21, [sp, #32]
  80:	ldp	x29, x30, [sp, #16]
  84:	add	sp, sp, #0x40
  88:	ret
  8c:	bl	0 <__errno_location>
  90:	str	w22, [x0]
  94:	cbnz	w20, 74 <fgetversion+0x74>
  98:	ldur	w8, [x29, #-4]
  9c:	str	x8, [x19]
  a0:	b	74 <fgetversion+0x74>

fsetversion.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fsetversion>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	stp	x20, x19, [sp, #32]
   8:	mov	x19, x1
   c:	mov	w1, #0x800                 	// #2048
  10:	str	x21, [sp, #16]
  14:	mov	x29, sp
  18:	bl	0 <open>
  1c:	cmn	w0, #0x1
  20:	b.eq	50 <fsetversion+0x50>  // b.none
  24:	mov	w1, #0x7602                	// #30210
  28:	add	x2, x29, #0x1c
  2c:	movk	w1, #0x4008, lsl #16
  30:	mov	w20, w0
  34:	str	w19, [x29, #28]
  38:	bl	0 <ioctl>
  3c:	mov	w19, w0
  40:	cmn	w0, #0x1
  44:	b.eq	58 <fsetversion+0x58>  // b.none
  48:	mov	w21, wzr
  4c:	b	60 <fsetversion+0x60>
  50:	mov	w19, #0xffffffff            	// #-1
  54:	b	74 <fsetversion+0x74>
  58:	bl	0 <__errno_location>
  5c:	ldr	w21, [x0]
  60:	mov	w0, w20
  64:	bl	0 <close>
  68:	cbz	w21, 74 <fsetversion+0x74>
  6c:	bl	0 <__errno_location>
  70:	str	w21, [x0]
  74:	mov	w0, w19
  78:	ldp	x20, x19, [sp, #32]
  7c:	ldr	x21, [sp, #16]
  80:	ldp	x29, x30, [sp], #48
  84:	ret

getflags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <getflags>:
   0:	sub	sp, sp, #0xb0
   4:	stp	x20, x19, [sp, #160]
   8:	mov	x19, x1
   c:	add	x1, sp, #0x10
  10:	stp	x29, x30, [sp, #144]
  14:	add	x29, sp, #0x90
  18:	mov	w20, w0
  1c:	bl	0 <fstat>
  20:	cbz	w0, 50 <getflags+0x50>
  24:	mov	w1, #0x6601                	// #26113
  28:	add	x2, sp, #0xc
  2c:	movk	w1, #0x8008, lsl #16
  30:	mov	w0, w20
  34:	bl	0 <ioctl>
  38:	ldrsw	x8, [sp, #12]
  3c:	str	x8, [x19]
  40:	ldp	x20, x19, [sp, #160]
  44:	ldp	x29, x30, [sp, #144]
  48:	add	sp, sp, #0xb0
  4c:	ret
  50:	ldr	w8, [sp, #32]
  54:	and	w8, w8, #0xf000
  58:	cmp	w8, #0x8, lsl #12
  5c:	b.eq	24 <getflags+0x24>  // b.none
  60:	cmp	w8, #0x4, lsl #12
  64:	b.eq	24 <getflags+0x24>  // b.none
  68:	bl	0 <__errno_location>
  6c:	mov	w8, #0x5f                  	// #95
  70:	str	w8, [x0]
  74:	mov	w0, #0xffffffff            	// #-1
  78:	b	40 <getflags+0x40>

getversion.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <getversion>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	str	x19, [sp, #16]
   8:	mov	x29, sp
   c:	mov	x19, x1
  10:	mov	w1, #0x7601                	// #30209
  14:	add	x2, x29, #0x1c
  18:	movk	w1, #0x8008, lsl #16
  1c:	bl	0 <ioctl>
  20:	ldrsw	x8, [x29, #28]
  24:	str	x8, [x19]
  28:	ldr	x19, [sp, #16]
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

hashstr.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_hash2string>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	str	x19, [sp, #16]
   8:	mov	x29, sp
   c:	cbz	w0, 38 <e2p_hash2string+0x38>
  10:	adrp	x8, 0 <e2p_hash2string>
  14:	mov	w2, w0
  18:	add	x8, x8, #0x0
  1c:	ldr	x19, [x8]
  20:	cbz	x19, 44 <e2p_hash2string+0x44>
  24:	ldur	w9, [x8, #-8]
  28:	add	x8, x8, #0x10
  2c:	cmp	w9, w2
  30:	b.ne	1c <e2p_hash2string+0x1c>  // b.any
  34:	b	5c <e2p_hash2string+0x5c>
  38:	adrp	x19, 0 <e2p_hash2string>
  3c:	add	x19, x19, #0x0
  40:	b	5c <e2p_hash2string+0x5c>
  44:	adrp	x19, 0 <e2p_hash2string>
  48:	add	x19, x19, #0x0
  4c:	adrp	x1, 0 <e2p_hash2string>
  50:	add	x1, x1, #0x0
  54:	mov	x0, x19
  58:	bl	0 <sprintf>
  5c:	mov	x0, x19
  60:	ldr	x19, [sp, #16]
  64:	ldp	x29, x30, [sp], #32
  68:	ret

000000000000006c <e2p_string2hash>:
  6c:	sub	sp, sp, #0x30
  70:	stp	x20, x19, [sp, #32]
  74:	adrp	x20, 0 <e2p_hash2string>
  78:	adrp	x1, 0 <e2p_hash2string>
  7c:	mov	x19, x0
  80:	add	x20, x20, #0x0
  84:	add	x1, x1, #0x0
  88:	stp	x29, x30, [sp, #16]
  8c:	add	x29, sp, #0x10
  90:	mov	x0, x19
  94:	bl	0 <strcasecmp>
  98:	cbz	w0, c8 <e2p_string2hash+0x5c>
  9c:	ldr	x1, [x20, #24]
  a0:	add	x20, x20, #0x10
  a4:	cbnz	x1, 90 <e2p_string2hash+0x24>
  a8:	adrp	x1, 0 <e2p_hash2string>
  ac:	add	x1, x1, #0x0
  b0:	mov	w2, #0x8                   	// #8
  b4:	mov	x0, x19
  b8:	bl	0 <strncasecmp>
  bc:	cbz	w0, dc <e2p_string2hash+0x70>
  c0:	mov	w0, #0xffffffff            	// #-1
  c4:	b	cc <e2p_string2hash+0x60>
  c8:	ldr	w0, [x20]
  cc:	ldp	x20, x19, [sp, #32]
  d0:	ldp	x29, x30, [sp, #16]
  d4:	add	sp, sp, #0x30
  d8:	ret
  dc:	ldrb	w8, [x19, #8]!
  e0:	cbz	w8, c0 <e2p_string2hash+0x54>
  e4:	add	x1, sp, #0x8
  e8:	mov	w2, #0xa                   	// #10
  ec:	mov	x0, x19
  f0:	bl	0 <strtol>
  f4:	cmp	w0, #0xff
  f8:	b.hi	c0 <e2p_string2hash+0x54>  // b.pmore
  fc:	ldr	x8, [sp, #8]
 100:	ldrb	w8, [x8]
 104:	cmp	w8, #0x0
 108:	csinv	w0, w0, wzr, eq  // eq = none
 10c:	b	cc <e2p_string2hash+0x60>

iod.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <iterate_on_dir>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	stp	x20, x19, [sp, #64]
   8:	mov	x20, x1
   c:	mov	w1, #0x3                   	// #3
  10:	str	x25, [sp, #16]
  14:	stp	x24, x23, [sp, #32]
  18:	stp	x22, x21, [sp, #48]
  1c:	mov	x29, sp
  20:	mov	x19, x2
  24:	mov	x21, x0
  28:	bl	0 <pathconf>
  2c:	add	w8, w0, #0x118
  30:	cmn	w0, #0x1
  34:	mov	w9, #0x126                 	// #294
  38:	csel	w25, w9, w8, eq  // eq = none
  3c:	add	w8, w25, #0x1
  40:	sxtw	x23, w8
  44:	mov	x0, x23
  48:	bl	0 <malloc>
  4c:	cbz	x0, c4 <iterate_on_dir+0xc4>
  50:	mov	w1, wzr
  54:	mov	x2, x23
  58:	mov	x22, x0
  5c:	bl	0 <memset>
  60:	mov	x0, x21
  64:	bl	0 <opendir>
  68:	cbz	x0, cc <iterate_on_dir+0xcc>
  6c:	mov	x23, x0
  70:	bl	0 <readdir>
  74:	cbz	x0, dc <iterate_on_dir+0xdc>
  78:	mov	x1, x0
  7c:	mov	w24, wzr
  80:	ldrh	w8, [x1, #16]
  84:	mov	x0, x22
  88:	cmp	w25, w8
  8c:	csel	w8, w25, w8, lt  // lt = tstop
  90:	sxtw	x2, w8
  94:	bl	0 <memcpy>
  98:	mov	x0, x21
  9c:	mov	x1, x22
  a0:	mov	x2, x19
  a4:	blr	x20
  a8:	cmp	w0, #0x0
  ac:	mov	x0, x23
  b0:	cinc	w24, w24, ne  // ne = any
  b4:	bl	0 <readdir>
  b8:	mov	x1, x0
  bc:	cbnz	x0, 80 <iterate_on_dir+0x80>
  c0:	b	e0 <iterate_on_dir+0xe0>
  c4:	mov	w24, #0xffffffff            	// #-1
  c8:	b	f0 <iterate_on_dir+0xf0>
  cc:	mov	x0, x22
  d0:	bl	0 <free>
  d4:	mov	w24, #0xffffffff            	// #-1
  d8:	b	f0 <iterate_on_dir+0xf0>
  dc:	mov	w24, wzr
  e0:	mov	x0, x22
  e4:	bl	0 <free>
  e8:	mov	x0, x23
  ec:	bl	0 <closedir>
  f0:	mov	w0, w24
  f4:	ldp	x20, x19, [sp, #64]
  f8:	ldp	x22, x21, [sp, #48]
  fc:	ldp	x24, x23, [sp, #32]
 100:	ldr	x25, [sp, #16]
 104:	ldp	x29, x30, [sp], #80
 108:	ret

ls.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <list_super2>:
       0:	sub	sp, sp, #0xa0
       4:	stp	x29, x30, [sp, #96]
       8:	stp	x24, x23, [sp, #112]
       c:	stp	x22, x21, [sp, #128]
      10:	stp	x20, x19, [sp, #144]
      14:	ldr	w8, [x0, #76]
      18:	ldr	w22, [x0, #40]
      1c:	mov	x20, x0
      20:	mov	x19, x1
      24:	add	x29, sp, #0x60
      28:	cbz	w8, 34 <list_super2+0x34>
      2c:	ldrh	w23, [x20, #88]
      30:	b	38 <list_super2+0x38>
      34:	mov	w23, #0x80                  	// #128
      38:	mov	x1, x20
      3c:	ldrb	w8, [x1, #120]!
      40:	ldur	w21, [x1, #-96]
      44:	cbz	w8, 68 <list_super2+0x68>
      48:	movi	v0.2d, #0x0
      4c:	add	x0, sp, #0x10
      50:	mov	w2, #0x10                  	// #16
      54:	stp	q0, q0, [sp, #64]
      58:	stp	q0, q0, [sp, #32]
      5c:	str	q0, [sp, #16]
      60:	bl	0 <strncpy>
      64:	b	80 <list_super2+0x80>
      68:	mov	w8, #0x656e                	// #25966
      6c:	mov	w9, #0x6e3c                	// #28220
      70:	movk	w8, #0x3e, lsl #16
      74:	movk	w9, #0x6e6f, lsl #16
      78:	stur	w8, [sp, #19]
      7c:	str	w9, [sp, #16]
      80:	adrp	x1, 0 <list_super2>
      84:	add	x1, x1, #0x0
      88:	add	x2, sp, #0x10
      8c:	mov	x0, x19
      90:	mov	w24, #0x400                 	// #1024
      94:	bl	0 <fprintf>
      98:	mov	x1, x20
      9c:	ldrb	w8, [x1, #136]!
      a0:	cbz	w8, c4 <list_super2+0xc4>
      a4:	movi	v0.2d, #0x0
      a8:	add	x0, sp, #0x10
      ac:	mov	w2, #0x40                  	// #64
      b0:	stp	q0, q0, [sp, #64]
      b4:	stp	q0, q0, [sp, #32]
      b8:	str	q0, [sp, #16]
      bc:	bl	0 <strncpy>
      c0:	b	d4 <list_super2+0xd4>
      c4:	adrp	x8, 0 <list_super2>
      c8:	add	x8, x8, #0x0
      cc:	ldr	q0, [x8]
      d0:	str	q0, [sp, #16]
      d4:	adrp	x1, 0 <list_super2>
      d8:	add	x1, x1, #0x0
      dc:	add	x2, sp, #0x10
      e0:	mov	x0, x19
      e4:	lsl	w24, w24, w21
      e8:	bl	0 <fprintf>
      ec:	add	x0, x20, #0x68
      f0:	bl	0 <e2p_uuid2str>
      f4:	adrp	x1, 0 <list_super2>
      f8:	mov	x2, x0
      fc:	add	x1, x1, #0x0
     100:	mov	x0, x19
     104:	bl	0 <fprintf>
     108:	ldrh	w2, [x20, #56]
     10c:	adrp	x1, 0 <list_super2>
     110:	add	x1, x1, #0x0
     114:	mov	x0, x19
     118:	bl	0 <fprintf>
     11c:	ldr	w2, [x20, #76]
     120:	adrp	x1, 0 <list_super2>
     124:	add	x1, x1, #0x0
     128:	mov	x0, x19
     12c:	bl	0 <fprintf>
     130:	ldr	w8, [x20, #76]
     134:	cmp	w8, #0x1
     138:	b.eq	150 <list_super2+0x150>  // b.none
     13c:	cbnz	w8, 15c <list_super2+0x15c>
     140:	adrp	x0, 0 <list_super2>
     144:	add	x0, x0, #0x0
     148:	mov	w1, #0xc                   	// #12
     14c:	b	168 <list_super2+0x168>
     150:	adrp	x0, 0 <list_super2>
     154:	add	x0, x0, #0x0
     158:	b	164 <list_super2+0x164>
     15c:	adrp	x0, 0 <list_super2>
     160:	add	x0, x0, #0x0
     164:	mov	w1, #0xb                   	// #11
     168:	mov	w2, #0x1                   	// #1
     16c:	mov	x3, x19
     170:	bl	0 <fwrite>
     174:	mov	x0, x20
     178:	mov	x1, x19
     17c:	madd	w22, w23, w22, w24
     180:	bl	b3c <print_features>
     184:	mov	x0, x20
     188:	mov	x1, x19
     18c:	bl	c20 <print_super_flags>
     190:	mov	x0, x20
     194:	mov	x1, x19
     198:	bl	d14 <print_mntopts>
     19c:	ldrb	w8, [x20, #512]
     1a0:	cbz	w8, 1b8 <list_super2+0x1b8>
     1a4:	adrp	x1, 0 <list_super2>
     1a8:	add	x2, x20, #0x200
     1ac:	add	x1, x1, #0x0
     1b0:	mov	x0, x19
     1b4:	bl	0 <fprintf>
     1b8:	adrp	x0, 0 <list_super2>
     1bc:	add	x0, x0, #0x0
     1c0:	mov	w1, #0x19                  	// #25
     1c4:	mov	w2, #0x1                   	// #1
     1c8:	mov	x3, x19
     1cc:	sub	w22, w22, #0x1
     1d0:	add	w23, w21, #0xa
     1d4:	bl	0 <fwrite>
     1d8:	ldrh	w1, [x20, #58]
     1dc:	mov	x0, x19
     1e0:	bl	0 <print_fs_state>
     1e4:	mov	w0, #0xa                   	// #10
     1e8:	mov	x1, x19
     1ec:	bl	0 <fputc>
     1f0:	adrp	x0, 0 <list_super2>
     1f4:	add	x0, x0, #0x0
     1f8:	mov	w1, #0x1a                  	// #26
     1fc:	mov	w2, #0x1                   	// #1
     200:	mov	x3, x19
     204:	bl	0 <fwrite>
     208:	ldrh	w1, [x20, #60]
     20c:	mov	x0, x19
     210:	bl	0 <print_fs_errors>
     214:	mov	w0, #0xa                   	// #10
     218:	mov	x1, x19
     21c:	bl	0 <fputc>
     220:	ldr	w0, [x20, #72]
     224:	bl	0 <e2p_os2string>
     228:	mov	x21, x0
     22c:	adrp	x1, 0 <list_super2>
     230:	add	x1, x1, #0x0
     234:	mov	x0, x19
     238:	mov	x2, x21
     23c:	bl	0 <fprintf>
     240:	mov	x0, x21
     244:	bl	0 <free>
     248:	ldr	w2, [x20]
     24c:	adrp	x1, 0 <list_super2>
     250:	add	x1, x1, #0x0
     254:	mov	x0, x19
     258:	bl	0 <fprintf>
     25c:	mov	x0, x20
     260:	bl	e00 <e2p_blocks_count>
     264:	adrp	x1, 0 <list_super2>
     268:	mov	x2, x0
     26c:	add	x1, x1, #0x0
     270:	mov	x0, x19
     274:	bl	0 <fprintf>
     278:	mov	x0, x20
     27c:	bl	e3c <e2p_r_blocks_count>
     280:	adrp	x1, 0 <list_super2>
     284:	mov	x2, x0
     288:	add	x1, x1, #0x0
     28c:	mov	x0, x19
     290:	bl	0 <fprintf>
     294:	ldr	w2, [x20, #584]
     298:	cbz	w2, 2ac <list_super2+0x2ac>
     29c:	adrp	x1, 0 <list_super2>
     2a0:	add	x1, x1, #0x0
     2a4:	mov	x0, x19
     2a8:	bl	0 <fprintf>
     2ac:	mov	x0, x20
     2b0:	lsr	w21, w22, w23
     2b4:	bl	e78 <e2p_free_blocks_count>
     2b8:	adrp	x1, 0 <list_super2>
     2bc:	mov	x2, x0
     2c0:	add	x1, x1, #0x0
     2c4:	mov	x0, x19
     2c8:	bl	0 <fprintf>
     2cc:	ldr	w2, [x20, #16]
     2d0:	adrp	x1, 0 <list_super2>
     2d4:	add	x1, x1, #0x0
     2d8:	mov	x0, x19
     2dc:	bl	0 <fprintf>
     2e0:	ldr	w2, [x20, #20]
     2e4:	adrp	x1, 0 <list_super2>
     2e8:	add	x1, x1, #0x0
     2ec:	mov	x0, x19
     2f0:	bl	0 <fprintf>
     2f4:	ldr	w8, [x20, #24]
     2f8:	mov	w22, #0x400                 	// #1024
     2fc:	adrp	x1, 0 <list_super2>
     300:	add	x1, x1, #0x0
     304:	lsl	w2, w22, w8
     308:	mov	x0, x19
     30c:	bl	0 <fprintf>
     310:	mov	x0, x20
     314:	bl	eb4 <ext2fs_has_feature_bigalloc>
     318:	ldr	w8, [x20, #28]
     31c:	adrp	x9, 0 <list_super2>
     320:	adrp	x10, 0 <list_super2>
     324:	add	x9, x9, #0x0
     328:	add	x10, x10, #0x0
     32c:	cmp	w0, #0x0
     330:	lsl	w2, w22, w8
     334:	csel	x1, x10, x9, eq  // eq = none
     338:	mov	x0, x19
     33c:	bl	0 <fprintf>
     340:	mov	x0, x20
     344:	bl	ec0 <ext2fs_has_feature_64bit>
     348:	cbz	w0, 360 <list_super2+0x360>
     34c:	ldrh	w2, [x20, #254]
     350:	adrp	x1, 0 <list_super2>
     354:	add	x1, x1, #0x0
     358:	mov	x0, x19
     35c:	bl	0 <fprintf>
     360:	ldrh	w2, [x20, #206]
     364:	cbz	w2, 378 <list_super2+0x378>
     368:	adrp	x1, 0 <list_super2>
     36c:	add	x1, x1, #0x0
     370:	mov	x0, x19
     374:	bl	0 <fprintf>
     378:	ldr	w2, [x20, #32]
     37c:	adrp	x1, 0 <list_super2>
     380:	add	x1, x1, #0x0
     384:	mov	x0, x19
     388:	bl	0 <fprintf>
     38c:	mov	x0, x20
     390:	bl	eb4 <ext2fs_has_feature_bigalloc>
     394:	ldr	w2, [x20, #36]
     398:	adrp	x8, 0 <list_super2>
     39c:	adrp	x9, 0 <list_super2>
     3a0:	add	x8, x8, #0x0
     3a4:	add	x9, x9, #0x0
     3a8:	cmp	w0, #0x0
     3ac:	csel	x1, x9, x8, eq  // eq = none
     3b0:	mov	x0, x19
     3b4:	bl	0 <fprintf>
     3b8:	ldr	w2, [x20, #40]
     3bc:	adrp	x1, 0 <list_super2>
     3c0:	add	x1, x1, #0x0
     3c4:	mov	x0, x19
     3c8:	bl	0 <fprintf>
     3cc:	adrp	x1, 0 <list_super2>
     3d0:	add	x1, x1, #0x0
     3d4:	mov	x0, x19
     3d8:	mov	w2, w21
     3dc:	bl	0 <fprintf>
     3e0:	ldrh	w2, [x20, #356]
     3e4:	cbz	w2, 3f8 <list_super2+0x3f8>
     3e8:	adrp	x1, 0 <list_super2>
     3ec:	add	x1, x1, #0x0
     3f0:	mov	x0, x19
     3f4:	bl	0 <fprintf>
     3f8:	ldr	w2, [x20, #368]
     3fc:	cbz	w2, 410 <list_super2+0x410>
     400:	adrp	x1, 0 <list_super2>
     404:	add	x1, x1, #0x0
     408:	mov	x0, x19
     40c:	bl	0 <fprintf>
     410:	ldr	w2, [x20, #260]
     414:	cbz	w2, 428 <list_super2+0x428>
     418:	adrp	x1, 0 <list_super2>
     41c:	add	x1, x1, #0x0
     420:	mov	x0, x19
     424:	bl	0 <fprintf>
     428:	ldrb	w8, [x20, #372]
     42c:	cbz	w8, 448 <list_super2+0x448>
     430:	mov	w9, #0x1                   	// #1
     434:	adrp	x1, 0 <list_super2>
     438:	lsl	w2, w9, w8
     43c:	add	x1, x1, #0x0
     440:	mov	x0, x19
     444:	bl	0 <fprintf>
     448:	ldr	w8, [x20, #264]
     44c:	cbz	w8, 470 <list_super2+0x470>
     450:	add	x0, sp, #0x8
     454:	str	x8, [sp, #8]
     458:	bl	0 <ctime>
     45c:	adrp	x1, 0 <list_super2>
     460:	mov	x2, x0
     464:	add	x1, x1, #0x0
     468:	mov	x0, x19
     46c:	bl	0 <fprintf>
     470:	ldr	w8, [x20, #44]
     474:	str	x8, [sp, #8]
     478:	cbz	w8, 48c <list_super2+0x48c>
     47c:	add	x0, sp, #0x8
     480:	bl	0 <ctime>
     484:	mov	x2, x0
     488:	b	494 <list_super2+0x494>
     48c:	adrp	x2, 0 <list_super2>
     490:	add	x2, x2, #0x0
     494:	adrp	x1, 0 <list_super2>
     498:	add	x1, x1, #0x0
     49c:	mov	x0, x19
     4a0:	bl	0 <fprintf>
     4a4:	ldr	w8, [x20, #48]
     4a8:	add	x0, sp, #0x8
     4ac:	str	x8, [sp, #8]
     4b0:	bl	0 <ctime>
     4b4:	adrp	x1, 0 <list_super2>
     4b8:	mov	x2, x0
     4bc:	add	x1, x1, #0x0
     4c0:	mov	x0, x19
     4c4:	bl	0 <fprintf>
     4c8:	ldrh	w2, [x20, #52]
     4cc:	adrp	x1, 0 <list_super2>
     4d0:	add	x1, x1, #0x0
     4d4:	mov	x0, x19
     4d8:	bl	0 <fprintf>
     4dc:	ldrsh	w2, [x20, #54]
     4e0:	adrp	x1, 0 <list_super2>
     4e4:	add	x1, x1, #0x0
     4e8:	mov	x0, x19
     4ec:	bl	0 <fprintf>
     4f0:	ldr	w8, [x20, #64]
     4f4:	add	x0, sp, #0x8
     4f8:	str	x8, [sp, #8]
     4fc:	bl	0 <ctime>
     500:	adrp	x1, 0 <list_super2>
     504:	mov	x2, x0
     508:	add	x1, x1, #0x0
     50c:	mov	x0, x19
     510:	bl	0 <fprintf>
     514:	ldr	w21, [x20, #68]
     518:	mov	w0, w21
     51c:	bl	ecc <interval_string>
     520:	adrp	x1, 0 <list_super2>
     524:	mov	x3, x0
     528:	add	x1, x1, #0x0
     52c:	mov	x0, x19
     530:	mov	w2, w21
     534:	bl	0 <fprintf>
     538:	ldr	w8, [x20, #68]
     53c:	cbz	w8, 568 <list_super2+0x568>
     540:	ldr	w9, [x20, #64]
     544:	mov	x0, sp
     548:	add	w8, w9, w8
     54c:	str	x8, [sp]
     550:	bl	0 <ctime>
     554:	adrp	x1, 0 <list_super2>
     558:	mov	x2, x0
     55c:	add	x1, x1, #0x0
     560:	mov	x0, x19
     564:	bl	0 <fprintf>
     568:	ldr	x8, [x20, #376]
     56c:	cbz	x8, 614 <list_super2+0x614>
     570:	adrp	x0, 0 <list_super2>
     574:	add	x0, x0, #0x0
     578:	mov	w1, #0x1a                  	// #26
     57c:	mov	w2, #0x1                   	// #1
     580:	mov	x3, x19
     584:	bl	0 <fwrite>
     588:	ldr	x2, [x20, #376]
     58c:	lsr	x8, x2, #13
     590:	cbnz	x8, 5a0 <list_super2+0x5a0>
     594:	adrp	x1, 0 <list_super2>
     598:	add	x1, x1, #0x0
     59c:	b	60c <list_super2+0x60c>
     5a0:	lsr	x8, x2, #23
     5a4:	cbnz	x8, 5bc <list_super2+0x5bc>
     5a8:	add	x8, x2, #0x200
     5ac:	adrp	x1, 0 <list_super2>
     5b0:	lsr	x2, x8, #10
     5b4:	add	x1, x1, #0x0
     5b8:	b	60c <list_super2+0x60c>
     5bc:	lsr	x8, x2, #33
     5c0:	cbnz	x8, 5d8 <list_super2+0x5d8>
     5c4:	add	x8, x2, #0x80, lsl #12
     5c8:	adrp	x1, 0 <list_super2>
     5cc:	lsr	x2, x8, #20
     5d0:	add	x1, x1, #0x0
     5d4:	b	60c <list_super2+0x60c>
     5d8:	lsr	x8, x2, #43
     5dc:	cbnz	x8, 5f8 <list_super2+0x5f8>
     5e0:	mov	w8, #0x20000000            	// #536870912
     5e4:	add	x8, x2, x8
     5e8:	adrp	x1, 0 <list_super2>
     5ec:	lsr	x2, x8, #30
     5f0:	add	x1, x1, #0x0
     5f4:	b	60c <list_super2+0x60c>
     5f8:	mov	x8, #0x8000000000          	// #549755813888
     5fc:	add	x8, x2, x8
     600:	adrp	x1, 0 <list_super2>
     604:	lsr	x2, x8, #40
     608:	add	x1, x1, #0x0
     60c:	mov	x0, x19
     610:	bl	0 <fprintf>
     614:	adrp	x0, 0 <list_super2>
     618:	add	x0, x0, #0x0
     61c:	mov	w1, #0x1a                  	// #26
     620:	mov	w2, #0x1                   	// #1
     624:	mov	x3, x19
     628:	bl	0 <fwrite>
     62c:	ldrh	w0, [x20, #80]
     630:	mov	x1, x19
     634:	bl	10b8 <print_user>
     638:	adrp	x0, 0 <list_super2>
     63c:	add	x0, x0, #0x0
     640:	mov	w1, #0x1a                  	// #26
     644:	mov	w2, #0x1                   	// #1
     648:	mov	x3, x19
     64c:	bl	0 <fwrite>
     650:	ldrh	w0, [x20, #82]
     654:	mov	x1, x19
     658:	bl	1128 <print_group>
     65c:	ldr	w8, [x20, #76]
     660:	cbz	w8, 6bc <list_super2+0x6bc>
     664:	ldr	w2, [x20, #84]
     668:	adrp	x1, 0 <list_super2>
     66c:	add	x1, x1, #0x0
     670:	mov	x0, x19
     674:	bl	0 <fprintf>
     678:	ldrh	w2, [x20, #88]
     67c:	adrp	x1, 0 <list_super2>
     680:	add	x1, x1, #0x0
     684:	mov	x0, x19
     688:	bl	0 <fprintf>
     68c:	ldrh	w2, [x20, #348]
     690:	cbz	w2, 6a4 <list_super2+0x6a4>
     694:	adrp	x1, 0 <list_super2>
     698:	add	x1, x1, #0x0
     69c:	mov	x0, x19
     6a0:	bl	0 <fprintf>
     6a4:	ldrh	w2, [x20, #350]
     6a8:	cbz	w2, 6bc <list_super2+0x6bc>
     6ac:	adrp	x1, 0 <list_super2>
     6b0:	add	x1, x1, #0x0
     6b4:	mov	x0, x19
     6b8:	bl	0 <fprintf>
     6bc:	add	x21, x20, #0xd0
     6c0:	mov	x0, x21
     6c4:	bl	0 <e2p_is_null_uuid>
     6c8:	cbnz	w0, 6e8 <list_super2+0x6e8>
     6cc:	mov	x0, x21
     6d0:	bl	0 <e2p_uuid2str>
     6d4:	adrp	x1, 0 <list_super2>
     6d8:	mov	x2, x0
     6dc:	add	x1, x1, #0x0
     6e0:	mov	x0, x19
     6e4:	bl	0 <fprintf>
     6e8:	ldr	w2, [x20, #224]
     6ec:	cbz	w2, 700 <list_super2+0x700>
     6f0:	adrp	x1, 0 <list_super2>
     6f4:	add	x1, x1, #0x0
     6f8:	mov	x0, x19
     6fc:	bl	0 <fprintf>
     700:	ldr	w2, [x20, #228]
     704:	cbz	w2, 718 <list_super2+0x718>
     708:	adrp	x1, 0 <list_super2>
     70c:	add	x1, x1, #0x0
     710:	mov	x0, x19
     714:	bl	0 <fprintf>
     718:	ldr	w2, [x20, #232]
     71c:	cbz	w2, 730 <list_super2+0x730>
     720:	adrp	x1, 0 <list_super2>
     724:	add	x1, x1, #0x0
     728:	mov	x0, x19
     72c:	bl	0 <fprintf>
     730:	mov	x0, x20
     734:	bl	1198 <ext2fs_has_feature_dir_index>
     738:	cbnz	w0, 744 <list_super2+0x744>
     73c:	ldrb	w8, [x20, #252]
     740:	cbz	w8, 760 <list_super2+0x760>
     744:	ldrb	w0, [x20, #252]
     748:	bl	0 <e2p_hash2string>
     74c:	adrp	x1, 0 <list_super2>
     750:	mov	x2, x0
     754:	add	x1, x1, #0x0
     758:	mov	x0, x19
     75c:	bl	0 <fprintf>
     760:	add	x21, x20, #0xec
     764:	mov	x0, x21
     768:	bl	0 <e2p_is_null_uuid>
     76c:	cbnz	w0, 78c <list_super2+0x78c>
     770:	mov	x0, x21
     774:	bl	0 <e2p_uuid2str>
     778:	adrp	x1, 0 <list_super2>
     77c:	mov	x2, x0
     780:	add	x1, x1, #0x0
     784:	mov	x0, x19
     788:	bl	0 <fprintf>
     78c:	ldrb	w8, [x20, #253]
     790:	cbz	w8, 7d0 <list_super2+0x7d0>
     794:	adrp	x0, 0 <list_super2>
     798:	add	x0, x0, #0x0
     79c:	mov	w1, #0x1a                  	// #26
     7a0:	mov	w2, #0x1                   	// #1
     7a4:	mov	x3, x19
     7a8:	bl	0 <fwrite>
     7ac:	ldrb	w2, [x20, #253]
     7b0:	cmp	w2, #0x1
     7b4:	b.ne	7dc <list_super2+0x7dc>  // b.any
     7b8:	adrp	x0, 0 <list_super2>
     7bc:	add	x0, x0, #0x0
     7c0:	mov	w1, #0xd                   	// #13
     7c4:	mov	w2, #0x1                   	// #1
     7c8:	mov	x3, x19
     7cc:	bl	0 <fwrite>
     7d0:	ldr	w8, [x20, #588]
     7d4:	cbnz	w8, 7fc <list_super2+0x7fc>
     7d8:	b	7f4 <list_super2+0x7f4>
     7dc:	adrp	x1, 0 <list_super2>
     7e0:	add	x1, x1, #0x0
     7e4:	mov	x0, x19
     7e8:	bl	0 <fprintf>
     7ec:	ldr	w8, [x20, #588]
     7f0:	cbnz	w8, 7fc <list_super2+0x7fc>
     7f4:	ldr	w8, [x20, #592]
     7f8:	cbz	w8, 850 <list_super2+0x850>
     7fc:	adrp	x0, 0 <list_super2>
     800:	add	x0, x0, #0x0
     804:	mov	w1, #0x1a                  	// #26
     808:	mov	w2, #0x1                   	// #1
     80c:	mov	x3, x19
     810:	bl	0 <fwrite>
     814:	ldr	w2, [x20, #588]
     818:	cbz	w2, 82c <list_super2+0x82c>
     81c:	adrp	x1, 0 <list_super2>
     820:	add	x1, x1, #0x0
     824:	mov	x0, x19
     828:	bl	0 <fprintf>
     82c:	ldr	w2, [x20, #592]
     830:	cbz	w2, 844 <list_super2+0x844>
     834:	adrp	x1, 0 <list_super2>
     838:	add	x1, x1, #0x0
     83c:	mov	x0, x19
     840:	bl	0 <fprintf>
     844:	mov	w0, #0xa                   	// #10
     848:	mov	x1, x19
     84c:	bl	0 <fputc>
     850:	ldr	w2, [x20, #384]
     854:	cbz	w2, 890 <list_super2+0x890>
     858:	adrp	x1, 0 <list_super2>
     85c:	add	x1, x1, #0x0
     860:	mov	x0, x19
     864:	bl	0 <fprintf>
     868:	ldr	w2, [x20, #388]
     86c:	adrp	x1, 0 <list_super2>
     870:	add	x1, x1, #0x0
     874:	mov	x0, x19
     878:	bl	0 <fprintf>
     87c:	ldr	x2, [x20, #392]
     880:	adrp	x1, 0 <list_super2>
     884:	add	x1, x1, #0x0
     888:	mov	x0, x19
     88c:	bl	0 <fprintf>
     890:	ldr	w2, [x20, #400]
     894:	cbz	w2, 8a8 <list_super2+0x8a8>
     898:	adrp	x1, 0 <list_super2>
     89c:	add	x1, x1, #0x0
     8a0:	mov	x0, x19
     8a4:	bl	0 <fprintf>
     8a8:	ldr	w2, [x20, #404]
     8ac:	cbz	w2, 8c0 <list_super2+0x8c0>
     8b0:	adrp	x1, 0 <list_super2>
     8b4:	add	x1, x1, #0x0
     8b8:	mov	x0, x19
     8bc:	bl	0 <fprintf>
     8c0:	ldr	w8, [x20, #408]
     8c4:	cbz	w8, 958 <list_super2+0x958>
     8c8:	add	x0, sp, #0x8
     8cc:	str	x8, [sp, #8]
     8d0:	bl	0 <ctime>
     8d4:	adrp	x1, 0 <list_super2>
     8d8:	mov	x2, x0
     8dc:	add	x1, x1, #0x0
     8e0:	mov	x0, x19
     8e4:	bl	0 <fprintf>
     8e8:	movi	v0.2d, #0x0
     8ec:	add	x1, x20, #0x1a8
     8f0:	add	x0, sp, #0x10
     8f4:	mov	w2, #0x20                  	// #32
     8f8:	stp	q0, q0, [sp, #16]
     8fc:	stp	q0, q0, [sp, #48]
     900:	str	q0, [sp, #80]
     904:	bl	0 <strncpy>
     908:	adrp	x1, 0 <list_super2>
     90c:	add	x1, x1, #0x0
     910:	add	x2, sp, #0x10
     914:	mov	x0, x19
     918:	bl	0 <fprintf>
     91c:	ldr	w2, [x20, #456]
     920:	adrp	x1, 0 <list_super2>
     924:	add	x1, x1, #0x0
     928:	mov	x0, x19
     92c:	bl	0 <fprintf>
     930:	ldr	w2, [x20, #412]
     934:	adrp	x1, 0 <list_super2>
     938:	add	x1, x1, #0x0
     93c:	mov	x0, x19
     940:	bl	0 <fprintf>
     944:	ldr	x2, [x20, #416]
     948:	adrp	x1, 0 <list_super2>
     94c:	add	x1, x1, #0x0
     950:	mov	x0, x19
     954:	bl	0 <fprintf>
     958:	ldr	w8, [x20, #460]
     95c:	cbz	w8, 9f0 <list_super2+0x9f0>
     960:	add	x0, sp, #0x8
     964:	str	x8, [sp, #8]
     968:	bl	0 <ctime>
     96c:	adrp	x1, 0 <list_super2>
     970:	mov	x2, x0
     974:	add	x1, x1, #0x0
     978:	mov	x0, x19
     97c:	bl	0 <fprintf>
     980:	movi	v0.2d, #0x0
     984:	add	x1, x20, #0x1e0
     988:	add	x0, sp, #0x10
     98c:	mov	w2, #0x20                  	// #32
     990:	stp	q0, q0, [sp, #16]
     994:	stp	q0, q0, [sp, #48]
     998:	str	q0, [sp, #80]
     99c:	bl	0 <strncpy>
     9a0:	adrp	x1, 0 <list_super2>
     9a4:	add	x1, x1, #0x0
     9a8:	add	x2, sp, #0x10
     9ac:	mov	x0, x19
     9b0:	bl	0 <fprintf>
     9b4:	ldr	w2, [x20, #468]
     9b8:	adrp	x1, 0 <list_super2>
     9bc:	add	x1, x1, #0x0
     9c0:	mov	x0, x19
     9c4:	bl	0 <fprintf>
     9c8:	ldr	w2, [x20, #464]
     9cc:	adrp	x1, 0 <list_super2>
     9d0:	add	x1, x1, #0x0
     9d4:	mov	x0, x19
     9d8:	bl	0 <fprintf>
     9dc:	ldr	x2, [x20, #472]
     9e0:	adrp	x1, 0 <list_super2>
     9e4:	add	x1, x1, #0x0
     9e8:	mov	x0, x19
     9ec:	bl	0 <fprintf>
     9f0:	mov	x0, x20
     9f4:	bl	11a4 <ext2fs_has_feature_mmp>
     9f8:	cbz	w0, a24 <list_super2+0xa24>
     9fc:	ldr	x2, [x20, #360]
     a00:	adrp	x1, 0 <list_super2>
     a04:	add	x1, x1, #0x0
     a08:	mov	x0, x19
     a0c:	bl	0 <fprintf>
     a10:	ldrh	w2, [x20, #358]
     a14:	adrp	x1, 0 <list_super2>
     a18:	add	x1, x1, #0x0
     a1c:	mov	x0, x19
     a20:	bl	0 <fprintf>
     a24:	adrp	x22, 0 <list_super2>
     a28:	mov	w21, wzr
     a2c:	add	x22, x22, #0x0
     a30:	b	a40 <list_super2+0xa40>
     a34:	add	w21, w21, #0x1
     a38:	cmp	w21, #0x3
     a3c:	b.eq	a74 <list_super2+0xa74>  // b.none
     a40:	mov	x0, x20
     a44:	mov	w1, w21
     a48:	bl	11b0 <quota_sb_inump>
     a4c:	ldr	w23, [x0]
     a50:	cbz	w23, a34 <list_super2+0xa34>
     a54:	mov	w0, w21
     a58:	bl	11e4 <quota_type2prefix>
     a5c:	mov	x2, x0
     a60:	mov	x0, x19
     a64:	mov	x1, x22
     a68:	mov	w3, w23
     a6c:	bl	0 <fprintf>
     a70:	b	a34 <list_super2+0xa34>
     a74:	mov	x0, x20
     a78:	bl	11f4 <ext2fs_has_feature_metadata_csum>
     a7c:	cbz	w0, ab0 <list_super2+0xab0>
     a80:	ldrb	w0, [x20, #373]
     a84:	bl	1200 <checksum_type>
     a88:	adrp	x1, 0 <list_super2>
     a8c:	mov	x2, x0
     a90:	add	x1, x1, #0x0
     a94:	mov	x0, x19
     a98:	bl	0 <fprintf>
     a9c:	ldr	w2, [x20, #1020]
     aa0:	adrp	x1, 0 <list_super2>
     aa4:	add	x1, x1, #0x0
     aa8:	mov	x0, x19
     aac:	bl	0 <fprintf>
     ab0:	add	x21, x20, #0x258
     ab4:	mov	x0, x21
     ab8:	bl	0 <e2p_is_null_uuid>
     abc:	cbnz	w0, adc <list_super2+0xadc>
     ac0:	mov	x0, x21
     ac4:	bl	0 <e2p_uuid2str>
     ac8:	adrp	x1, 0 <list_super2>
     acc:	mov	x2, x0
     ad0:	add	x1, x1, #0x0
     ad4:	mov	x0, x19
     ad8:	bl	0 <fprintf>
     adc:	mov	x0, x20
     ae0:	bl	1220 <ext2fs_has_feature_csum_seed>
     ae4:	cbz	w0, afc <list_super2+0xafc>
     ae8:	ldr	w2, [x20, #624]
     aec:	adrp	x1, 0 <list_super2>
     af0:	add	x1, x1, #0x0
     af4:	mov	x0, x19
     af8:	bl	0 <fprintf>
     afc:	mov	x0, x20
     b00:	bl	122c <ext2fs_has_feature_casefold>
     b04:	cbz	w0, b24 <list_super2+0xb24>
     b08:	ldrh	w0, [x20, #636]
     b0c:	bl	0 <e2p_encoding2str>
     b10:	adrp	x1, 0 <list_super2>
     b14:	mov	x2, x0
     b18:	add	x1, x1, #0x0
     b1c:	mov	x0, x19
     b20:	bl	0 <fprintf>
     b24:	ldp	x20, x19, [sp, #144]
     b28:	ldp	x22, x21, [sp, #128]
     b2c:	ldp	x24, x23, [sp, #112]
     b30:	ldp	x29, x30, [sp, #96]
     b34:	add	sp, sp, #0xa0
     b38:	ret

0000000000000b3c <print_features>:
     b3c:	stp	x29, x30, [sp, #-80]!
     b40:	stp	x24, x23, [sp, #32]
     b44:	stp	x20, x19, [sp, #64]
     b48:	mov	x19, x1
     b4c:	add	x23, x0, #0x5c
     b50:	adrp	x0, 0 <list_super2>
     b54:	add	x0, x0, #0x0
     b58:	mov	w1, #0x19                  	// #25
     b5c:	mov	w2, #0x1                   	// #1
     b60:	mov	x3, x19
     b64:	str	x25, [sp, #16]
     b68:	stp	x22, x21, [sp, #48]
     b6c:	mov	x29, sp
     b70:	bl	0 <fwrite>
     b74:	adrp	x21, 0 <list_super2>
     b78:	mov	w24, wzr
     b7c:	mov	w20, wzr
     b80:	add	x21, x21, #0x0
     b84:	b	b98 <print_features+0x5c>
     b88:	add	w20, w20, #0x1
     b8c:	cmp	w20, #0x3
     b90:	add	x23, x23, #0x4
     b94:	b.eq	be0 <print_features+0xa4>  // b.none
     b98:	mov	w22, #0x1                   	// #1
     b9c:	mov	w25, #0x20                  	// #32
     ba0:	b	bb0 <print_features+0x74>
     ba4:	subs	w25, w25, #0x1
     ba8:	lsl	w22, w22, #1
     bac:	b.eq	b88 <print_features+0x4c>  // b.none
     bb0:	ldr	w8, [x23]
     bb4:	tst	w8, w22
     bb8:	b.eq	ba4 <print_features+0x68>  // b.none
     bbc:	mov	w0, w20
     bc0:	mov	w1, w22
     bc4:	bl	0 <e2p_feature2string>
     bc8:	mov	x2, x0
     bcc:	mov	x0, x19
     bd0:	mov	x1, x21
     bd4:	bl	0 <fprintf>
     bd8:	add	w24, w24, #0x1
     bdc:	b	ba4 <print_features+0x68>
     be0:	cbnz	w24, bfc <print_features+0xc0>
     be4:	adrp	x0, 0 <list_super2>
     be8:	add	x0, x0, #0x0
     bec:	mov	w1, #0x7                   	// #7
     bf0:	mov	w2, #0x1                   	// #1
     bf4:	mov	x3, x19
     bf8:	bl	0 <fwrite>
     bfc:	mov	w0, #0xa                   	// #10
     c00:	mov	x1, x19
     c04:	bl	0 <fputc>
     c08:	ldp	x20, x19, [sp, #64]
     c0c:	ldp	x22, x21, [sp, #48]
     c10:	ldp	x24, x23, [sp, #32]
     c14:	ldr	x25, [sp, #16]
     c18:	ldp	x29, x30, [sp], #80
     c1c:	ret

0000000000000c20 <print_super_flags>:
     c20:	stp	x29, x30, [sp, #-48]!
     c24:	stp	x20, x19, [sp, #32]
     c28:	ldr	w8, [x0, #352]
     c2c:	str	x21, [sp, #16]
     c30:	mov	x29, sp
     c34:	cbz	w8, d04 <print_super_flags+0xe4>
     c38:	mov	x20, x0
     c3c:	mov	x19, x1
     c40:	adrp	x0, 0 <list_super2>
     c44:	add	x0, x0, #0x0
     c48:	mov	w1, #0x1a                  	// #26
     c4c:	mov	w2, #0x1                   	// #1
     c50:	mov	x3, x19
     c54:	bl	0 <fwrite>
     c58:	ldrb	w8, [x20, #352]
     c5c:	tbnz	w8, #0, c70 <print_super_flags+0x50>
     c60:	mov	w21, wzr
     c64:	ldrb	w8, [x20, #352]
     c68:	tbnz	w8, #1, c94 <print_super_flags+0x74>
     c6c:	b	cb0 <print_super_flags+0x90>
     c70:	adrp	x0, 0 <list_super2>
     c74:	add	x0, x0, #0x0
     c78:	mov	w1, #0x16                  	// #22
     c7c:	mov	w2, #0x1                   	// #1
     c80:	mov	x3, x19
     c84:	mov	w21, #0x1                   	// #1
     c88:	bl	0 <fwrite>
     c8c:	ldrb	w8, [x20, #352]
     c90:	tbz	w8, #1, cb0 <print_super_flags+0x90>
     c94:	adrp	x0, 0 <list_super2>
     c98:	add	x0, x0, #0x0
     c9c:	mov	w1, #0x18                  	// #24
     ca0:	mov	w2, #0x1                   	// #1
     ca4:	mov	x3, x19
     ca8:	bl	0 <fwrite>
     cac:	add	w21, w21, #0x1
     cb0:	ldrb	w8, [x20, #352]
     cb4:	tbnz	w8, #2, ccc <print_super_flags+0xac>
     cb8:	cbz	w21, cec <print_super_flags+0xcc>
     cbc:	mov	w0, #0xa                   	// #10
     cc0:	mov	x1, x19
     cc4:	bl	0 <fputc>
     cc8:	b	d04 <print_super_flags+0xe4>
     ccc:	adrp	x0, 0 <list_super2>
     cd0:	add	x0, x0, #0x0
     cd4:	mov	w1, #0x10                  	// #16
     cd8:	mov	w2, #0x1                   	// #1
     cdc:	mov	x3, x19
     ce0:	bl	0 <fwrite>
     ce4:	add	w21, w21, #0x1
     ce8:	cbnz	w21, cbc <print_super_flags+0x9c>
     cec:	adrp	x0, 0 <list_super2>
     cf0:	add	x0, x0, #0x0
     cf4:	mov	w1, #0x7                   	// #7
     cf8:	mov	w2, #0x1                   	// #1
     cfc:	mov	x3, x19
     d00:	bl	0 <fwrite>
     d04:	ldp	x20, x19, [sp, #32]
     d08:	ldr	x21, [sp, #16]
     d0c:	ldp	x29, x30, [sp], #48
     d10:	ret

0000000000000d14 <print_mntopts>:
     d14:	stp	x29, x30, [sp, #-64]!
     d18:	stp	x24, x23, [sp, #16]
     d1c:	stp	x22, x21, [sp, #32]
     d20:	stp	x20, x19, [sp, #48]
     d24:	ldr	w22, [x0, #256]
     d28:	mov	x19, x1
     d2c:	adrp	x0, 0 <list_super2>
     d30:	add	x0, x0, #0x0
     d34:	mov	w1, #0x19                  	// #25
     d38:	mov	w2, #0x1                   	// #1
     d3c:	mov	x3, x19
     d40:	mov	x29, sp
     d44:	bl	0 <fwrite>
     d48:	ands	w0, w22, #0x60
     d4c:	b.eq	d70 <print_mntopts+0x5c>  // b.none
     d50:	bl	0 <e2p_mntopt2string>
     d54:	adrp	x1, 0 <list_super2>
     d58:	mov	x2, x0
     d5c:	add	x1, x1, #0x0
     d60:	mov	x0, x19
     d64:	bl	0 <fprintf>
     d68:	mov	w23, #0x1                   	// #1
     d6c:	b	d74 <print_mntopts+0x60>
     d70:	mov	w23, wzr
     d74:	adrp	x21, 0 <list_super2>
     d78:	mov	w20, #0x1                   	// #1
     d7c:	mov	w24, #0x20                  	// #32
     d80:	add	x21, x21, #0x0
     d84:	b	d94 <print_mntopts+0x80>
     d88:	subs	w24, w24, #0x1
     d8c:	lsl	w20, w20, #1
     d90:	b.eq	dc4 <print_mntopts+0xb0>  // b.none
     d94:	tst	w20, #0x60
     d98:	b.ne	d88 <print_mntopts+0x74>  // b.any
     d9c:	and	w8, w20, w22
     da0:	cbz	w8, d88 <print_mntopts+0x74>
     da4:	mov	w0, w20
     da8:	bl	0 <e2p_mntopt2string>
     dac:	mov	x2, x0
     db0:	mov	x0, x19
     db4:	mov	x1, x21
     db8:	bl	0 <fprintf>
     dbc:	add	w23, w23, #0x1
     dc0:	b	d88 <print_mntopts+0x74>
     dc4:	cbnz	w23, de0 <print_mntopts+0xcc>
     dc8:	adrp	x0, 0 <list_super2>
     dcc:	add	x0, x0, #0x0
     dd0:	mov	w1, #0x7                   	// #7
     dd4:	mov	w2, #0x1                   	// #1
     dd8:	mov	x3, x19
     ddc:	bl	0 <fwrite>
     de0:	mov	w0, #0xa                   	// #10
     de4:	mov	x1, x19
     de8:	bl	0 <fputc>
     dec:	ldp	x20, x19, [sp, #48]
     df0:	ldp	x22, x21, [sp, #32]
     df4:	ldp	x24, x23, [sp, #16]
     df8:	ldp	x29, x30, [sp], #64
     dfc:	ret

0000000000000e00 <e2p_blocks_count>:
     e00:	stp	x29, x30, [sp, #-32]!
     e04:	stp	x20, x19, [sp, #16]
     e08:	ldr	w20, [x0, #4]
     e0c:	mov	x29, sp
     e10:	mov	x19, x0
     e14:	bl	ec0 <ext2fs_has_feature_64bit>
     e18:	cbz	w0, e28 <e2p_blocks_count+0x28>
     e1c:	ldr	w8, [x19, #336]
     e20:	lsl	x8, x8, #32
     e24:	b	e2c <e2p_blocks_count+0x2c>
     e28:	mov	x8, xzr
     e2c:	orr	x0, x8, x20
     e30:	ldp	x20, x19, [sp, #16]
     e34:	ldp	x29, x30, [sp], #32
     e38:	ret

0000000000000e3c <e2p_r_blocks_count>:
     e3c:	stp	x29, x30, [sp, #-32]!
     e40:	stp	x20, x19, [sp, #16]
     e44:	ldr	w20, [x0, #8]
     e48:	mov	x29, sp
     e4c:	mov	x19, x0
     e50:	bl	ec0 <ext2fs_has_feature_64bit>
     e54:	cbz	w0, e64 <e2p_r_blocks_count+0x28>
     e58:	ldr	w8, [x19, #340]
     e5c:	lsl	x8, x8, #32
     e60:	b	e68 <e2p_r_blocks_count+0x2c>
     e64:	mov	x8, xzr
     e68:	orr	x0, x8, x20
     e6c:	ldp	x20, x19, [sp, #16]
     e70:	ldp	x29, x30, [sp], #32
     e74:	ret

0000000000000e78 <e2p_free_blocks_count>:
     e78:	stp	x29, x30, [sp, #-32]!
     e7c:	stp	x20, x19, [sp, #16]
     e80:	ldr	w20, [x0, #12]
     e84:	mov	x29, sp
     e88:	mov	x19, x0
     e8c:	bl	ec0 <ext2fs_has_feature_64bit>
     e90:	cbz	w0, ea0 <e2p_free_blocks_count+0x28>
     e94:	ldr	w8, [x19, #344]
     e98:	lsl	x8, x8, #32
     e9c:	b	ea4 <e2p_free_blocks_count+0x2c>
     ea0:	mov	x8, xzr
     ea4:	orr	x0, x8, x20
     ea8:	ldp	x20, x19, [sp, #16]
     eac:	ldp	x29, x30, [sp], #32
     eb0:	ret

0000000000000eb4 <ext2fs_has_feature_bigalloc>:
     eb4:	ldr	w8, [x0, #100]
     eb8:	ubfx	w0, w8, #9, #1
     ebc:	ret

0000000000000ec0 <ext2fs_has_feature_64bit>:
     ec0:	ldr	w8, [x0, #96]
     ec4:	ubfx	w0, w8, #7, #1
     ec8:	ret

0000000000000ecc <interval_string>:
     ecc:	stp	x29, x30, [sp, #-64]!
     ed0:	adrp	x8, 0 <list_super2>
     ed4:	stp	x24, x23, [sp, #16]
     ed8:	stp	x22, x21, [sp, #32]
     edc:	stp	x20, x19, [sp, #48]
     ee0:	mov	x29, sp
     ee4:	strb	wzr, [x8]
     ee8:	cbz	w0, 1098 <interval_string+0x1cc>
     eec:	mov	w8, #0x8cff                	// #36095
     ef0:	movk	w8, #0x27, lsl #16
     ef4:	adrp	x21, 0 <list_super2>
     ef8:	adrp	x23, 0 <list_super2>
     efc:	cmp	w0, w8
     f00:	add	x21, x21, #0x0
     f04:	add	x23, x23, #0x0
     f08:	b.ls	f48 <interval_string+0x7c>  // b.plast
     f0c:	add	w8, w8, #0x1
     f10:	mov	w9, #0x7300                	// #29440
     f14:	mov	w10, #0x19ff                	// #6655
     f18:	movk	w9, #0xffd8, lsl #16
     f1c:	movk	w10, #0x4f, lsl #16
     f20:	udiv	w2, w0, w8
     f24:	cmp	w0, w10
     f28:	madd	w19, w2, w9, w0
     f2c:	adrp	x0, 0 <list_super2>
     f30:	adrp	x1, 0 <list_super2>
     f34:	csel	x3, x23, x21, hi  // hi = pmore
     f38:	add	x0, x0, #0x0
     f3c:	add	x1, x1, #0x0
     f40:	bl	0 <sprintf>
     f44:	mov	w0, w19
     f48:	mov	w8, #0x3a7f                	// #14975
     f4c:	movk	w8, #0x9, lsl #16
     f50:	adrp	x19, 0 <list_super2>
     f54:	adrp	x22, 0 <list_super2>
     f58:	cmp	w0, w8
     f5c:	add	x19, x19, #0x0
     f60:	add	x22, x22, #0x0
     f64:	b.ls	fc0 <interval_string+0xf4>  // b.plast
     f68:	ldrb	w10, [x19]
     f6c:	mov	w11, #0x74ff                	// #29951
     f70:	add	w8, w8, #0x1
     f74:	mov	w9, #0xc580                	// #50560
     f78:	movk	w11, #0x12, lsl #16
     f7c:	cmp	w10, #0x0
     f80:	adrp	x20, 0 <list_super2>
     f84:	movk	w9, #0xfff6, lsl #16
     f88:	udiv	w3, w0, w8
     f8c:	csel	x2, x21, x22, eq  // eq = none
     f90:	cmp	w0, w11
     f94:	add	x20, x20, #0x0
     f98:	adrp	x1, 0 <list_super2>
     f9c:	madd	w24, w3, w9, w0
     fa0:	csel	x4, x23, x21, hi  // hi = pmore
     fa4:	add	x1, x1, #0x0
     fa8:	mov	x0, x20
     fac:	bl	0 <sprintf>
     fb0:	mov	x0, x19
     fb4:	mov	x1, x20
     fb8:	bl	0 <strcat>
     fbc:	mov	w0, w24
     fc0:	lsr	w8, w0, #7
     fc4:	cmp	w8, #0x2a3
     fc8:	b.cc	1028 <interval_string+0x15c>  // b.lo, b.ul, b.last
     fcc:	ldrb	w10, [x19]
     fd0:	mov	w8, #0x517f                	// #20863
     fd4:	movk	w8, #0x1, lsl #16
     fd8:	mov	w9, #0xae80                	// #44672
     fdc:	lsr	w11, w0, #8
     fe0:	add	w8, w8, #0x1
     fe4:	cmp	w10, #0x0
     fe8:	adrp	x20, 0 <list_super2>
     fec:	movk	w9, #0xfffe, lsl #16
     ff0:	udiv	w3, w0, w8
     ff4:	csel	x2, x21, x22, eq  // eq = none
     ff8:	cmp	w11, #0x2a2
     ffc:	add	x20, x20, #0x0
    1000:	adrp	x1, 0 <list_super2>
    1004:	madd	w24, w3, w9, w0
    1008:	csel	x4, x23, x21, hi  // hi = pmore
    100c:	add	x1, x1, #0x0
    1010:	mov	x0, x20
    1014:	bl	0 <sprintf>
    1018:	mov	x0, x19
    101c:	mov	x1, x20
    1020:	bl	0 <strcat>
    1024:	mov	w0, w24
    1028:	adrp	x19, 0 <list_super2>
    102c:	add	x19, x19, #0x0
    1030:	cbz	w0, 10a0 <interval_string+0x1d4>
    1034:	mov	w8, #0xb3c5                	// #46021
    1038:	movk	w8, #0x91a2, lsl #16
    103c:	ldrb	w12, [x19]
    1040:	umull	x8, w0, w8
    1044:	mov	w9, #0xfffff1f0            	// #-3600
    1048:	mov	w10, #0x8889                	// #34953
    104c:	lsr	x3, x8, #43
    1050:	movk	w10, #0x8888, lsl #16
    1054:	madd	w8, w3, w9, w0
    1058:	umull	x9, w8, w10
    105c:	adrp	x20, 0 <list_super2>
    1060:	mov	w11, #0xffffffc4            	// #-60
    1064:	cmp	w12, #0x0
    1068:	lsr	x4, x9, #37
    106c:	add	x20, x20, #0x0
    1070:	adrp	x1, 0 <list_super2>
    1074:	madd	w5, w4, w11, w8
    1078:	csel	x2, x21, x22, eq  // eq = none
    107c:	add	x1, x1, #0x0
    1080:	mov	x0, x20
    1084:	bl	0 <sprintf>
    1088:	mov	x0, x19
    108c:	mov	x1, x20
    1090:	bl	0 <strcat>
    1094:	b	10a0 <interval_string+0x1d4>
    1098:	adrp	x19, 0 <list_super2>
    109c:	add	x19, x19, #0x0
    10a0:	mov	x0, x19
    10a4:	ldp	x20, x19, [sp, #48]
    10a8:	ldp	x22, x21, [sp, #32]
    10ac:	ldp	x24, x23, [sp, #16]
    10b0:	ldp	x29, x30, [sp], #64
    10b4:	ret

00000000000010b8 <print_user>:
    10b8:	stp	x29, x30, [sp, #-32]!
    10bc:	stp	x20, x19, [sp, #16]
    10c0:	mov	x19, x1
    10c4:	and	w20, w0, #0xffff
    10c8:	adrp	x1, 0 <list_super2>
    10cc:	add	x1, x1, #0x0
    10d0:	mov	x0, x19
    10d4:	mov	w2, w20
    10d8:	mov	x29, sp
    10dc:	bl	0 <fprintf>
    10e0:	mov	w0, w20
    10e4:	bl	0 <getpwuid>
    10e8:	cbz	x0, 1104 <print_user+0x4c>
    10ec:	ldr	x2, [x0]
    10f0:	adrp	x1, 0 <list_super2>
    10f4:	add	x1, x1, #0x0
    10f8:	mov	x0, x19
    10fc:	bl	0 <fprintf>
    1100:	b	111c <print_user+0x64>
    1104:	adrp	x0, 0 <list_super2>
    1108:	add	x0, x0, #0x0
    110c:	mov	w1, #0xf                   	// #15
    1110:	mov	w2, #0x1                   	// #1
    1114:	mov	x3, x19
    1118:	bl	0 <fwrite>
    111c:	ldp	x20, x19, [sp, #16]
    1120:	ldp	x29, x30, [sp], #32
    1124:	ret

0000000000001128 <print_group>:
    1128:	stp	x29, x30, [sp, #-32]!
    112c:	stp	x20, x19, [sp, #16]
    1130:	mov	x19, x1
    1134:	and	w20, w0, #0xffff
    1138:	adrp	x1, 0 <list_super2>
    113c:	add	x1, x1, #0x0
    1140:	mov	x0, x19
    1144:	mov	w2, w20
    1148:	mov	x29, sp
    114c:	bl	0 <fprintf>
    1150:	mov	w0, w20
    1154:	bl	0 <getgrgid>
    1158:	cbz	x0, 1174 <print_group+0x4c>
    115c:	ldr	x2, [x0]
    1160:	adrp	x1, 0 <list_super2>
    1164:	add	x1, x1, #0x0
    1168:	mov	x0, x19
    116c:	bl	0 <fprintf>
    1170:	b	118c <print_group+0x64>
    1174:	adrp	x0, 0 <list_super2>
    1178:	add	x0, x0, #0x0
    117c:	mov	w1, #0x10                  	// #16
    1180:	mov	w2, #0x1                   	// #1
    1184:	mov	x3, x19
    1188:	bl	0 <fwrite>
    118c:	ldp	x20, x19, [sp, #16]
    1190:	ldp	x29, x30, [sp], #32
    1194:	ret

0000000000001198 <ext2fs_has_feature_dir_index>:
    1198:	ldr	w8, [x0, #92]
    119c:	ubfx	w0, w8, #5, #1
    11a0:	ret

00000000000011a4 <ext2fs_has_feature_mmp>:
    11a4:	ldr	w8, [x0, #96]
    11a8:	ubfx	w0, w8, #8, #1
    11ac:	ret

00000000000011b0 <quota_sb_inump>:
    11b0:	cmp	w1, #0x2
    11b4:	b.eq	11cc <quota_sb_inump+0x1c>  // b.none
    11b8:	cmp	w1, #0x1
    11bc:	b.eq	11d4 <quota_sb_inump+0x24>  // b.none
    11c0:	cbnz	w1, 11dc <quota_sb_inump+0x2c>
    11c4:	add	x0, x0, #0x240
    11c8:	ret
    11cc:	add	x0, x0, #0x26c
    11d0:	ret
    11d4:	add	x0, x0, #0x244
    11d8:	ret
    11dc:	mov	x0, xzr
    11e0:	ret

00000000000011e4 <quota_type2prefix>:
    11e4:	adrp	x8, 0 <list_super2>
    11e8:	add	x8, x8, #0x0
    11ec:	ldr	x0, [x8, w0, uxtw #3]
    11f0:	ret

00000000000011f4 <ext2fs_has_feature_metadata_csum>:
    11f4:	ldr	w8, [x0, #100]
    11f8:	ubfx	w0, w8, #10, #1
    11fc:	ret

0000000000001200 <checksum_type>:
    1200:	and	w8, w0, #0xff
    1204:	adrp	x9, 0 <list_super2>
    1208:	adrp	x10, 0 <list_super2>
    120c:	add	x9, x9, #0x0
    1210:	add	x10, x10, #0x0
    1214:	cmp	w8, #0x1
    1218:	csel	x0, x10, x9, eq  // eq = none
    121c:	ret

0000000000001220 <ext2fs_has_feature_csum_seed>:
    1220:	ldr	w8, [x0, #96]
    1224:	ubfx	w0, w8, #13, #1
    1228:	ret

000000000000122c <ext2fs_has_feature_casefold>:
    122c:	ldr	w8, [x0, #96]
    1230:	ubfx	w0, w8, #17, #1
    1234:	ret

0000000000001238 <list_super>:
    1238:	stp	x29, x30, [sp, #-16]!
    123c:	adrp	x8, 0 <stdout>
    1240:	ldr	x1, [x8]
    1244:	mov	x29, sp
    1248:	bl	0 <list_super2>
    124c:	ldp	x29, x30, [sp], #16
    1250:	ret

ljs.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_list_journal_super>:
   0:	sub	sp, sp, #0x70
   4:	stp	x29, x30, [sp, #16]
   8:	stp	x20, x19, [sp, #96]
   c:	add	x29, sp, #0x10
  10:	mov	x19, x0
  14:	adrp	x0, 0 <e2p_list_journal_super>
  18:	stur	w2, [x29, #-4]
  1c:	mov	x20, x1
  20:	add	x0, x0, #0x0
  24:	mov	w1, #0x19                  	// #25
  28:	mov	w2, #0x1                   	// #1
  2c:	mov	x3, x19
  30:	stp	x28, x27, [sp, #32]
  34:	stp	x26, x25, [sp, #48]
  38:	stp	x24, x23, [sp, #64]
  3c:	stp	x22, x21, [sp, #80]
  40:	bl	0 <fwrite>
  44:	add	x26, x20, #0x24
  48:	adrp	x23, 0 <e2p_list_journal_super>
  4c:	mov	w22, wzr
  50:	mov	w27, wzr
  54:	add	x23, x23, #0x0
  58:	mov	x28, x26
  5c:	b	70 <e2p_list_journal_super+0x70>
  60:	add	w22, w22, #0x1
  64:	cmp	w22, #0x3
  68:	add	x28, x28, #0x4
  6c:	b.eq	c0 <e2p_list_journal_super+0xc0>  // b.none
  70:	ldr	w0, [x28]
  74:	bl	33c <e2p_swab32>
  78:	mov	w24, w0
  7c:	mov	w25, #0x1                   	// #1
  80:	mov	w21, #0x20                  	// #32
  84:	b	94 <e2p_list_journal_super+0x94>
  88:	subs	w21, w21, #0x1
  8c:	lsl	w25, w25, #1
  90:	b.eq	60 <e2p_list_journal_super+0x60>  // b.none
  94:	tst	w25, w24
  98:	b.eq	88 <e2p_list_journal_super+0x88>  // b.none
  9c:	mov	w0, w22
  a0:	mov	w1, w25
  a4:	bl	0 <e2p_jrnl_feature2string>
  a8:	mov	x2, x0
  ac:	mov	x0, x19
  b0:	mov	x1, x23
  b4:	bl	0 <fprintf>
  b8:	add	w27, w27, #0x1
  bc:	b	88 <e2p_list_journal_super+0x88>
  c0:	cbnz	w27, dc <e2p_list_journal_super+0xdc>
  c4:	adrp	x0, 0 <e2p_list_journal_super>
  c8:	add	x0, x0, #0x0
  cc:	mov	w1, #0x7                   	// #7
  d0:	mov	w2, #0x1                   	// #1
  d4:	mov	x3, x19
  d8:	bl	0 <fwrite>
  dc:	mov	w0, #0xa                   	// #10
  e0:	mov	x1, x19
  e4:	bl	0 <fputc>
  e8:	adrp	x0, 0 <e2p_list_journal_super>
  ec:	add	x0, x0, #0x0
  f0:	mov	w1, #0x1a                  	// #26
  f4:	mov	w2, #0x1                   	// #1
  f8:	mov	x3, x19
  fc:	bl	0 <fwrite>
 100:	ldr	w0, [x20, #12]
 104:	bl	344 <__bswap_32>
 108:	ldr	w8, [x20, #16]
 10c:	lsr	w21, w0, #10
 110:	mov	w0, w8
 114:	bl	344 <__bswap_32>
 118:	mul	w2, w0, w21
 11c:	lsr	w8, w2, #13
 120:	cbnz	w8, 130 <e2p_list_journal_super+0x130>
 124:	adrp	x1, 0 <e2p_list_journal_super>
 128:	add	x1, x1, #0x0
 12c:	b	13c <e2p_list_journal_super+0x13c>
 130:	adrp	x1, 0 <e2p_list_journal_super>
 134:	lsr	w2, w2, #10
 138:	add	x1, x1, #0x0
 13c:	mov	x0, x19
 140:	bl	0 <fprintf>
 144:	ldr	w0, [x20, #64]
 148:	ldur	w21, [x29, #-4]
 14c:	bl	344 <__bswap_32>
 150:	ldr	w8, [x20, #12]
 154:	mov	w22, w0
 158:	mov	w0, w8
 15c:	bl	344 <__bswap_32>
 160:	cmp	w0, w21
 164:	b.eq	17c <e2p_list_journal_super+0x17c>  // b.none
 168:	adrp	x1, 0 <e2p_list_journal_super>
 16c:	mov	w2, w0
 170:	add	x1, x1, #0x0
 174:	mov	x0, x19
 178:	bl	0 <fprintf>
 17c:	ldr	w0, [x20, #16]
 180:	bl	344 <__bswap_32>
 184:	adrp	x1, 0 <e2p_list_journal_super>
 188:	mov	w2, w0
 18c:	add	x1, x1, #0x0
 190:	mov	x0, x19
 194:	bl	0 <fprintf>
 198:	ldr	w0, [x20, #20]
 19c:	bl	344 <__bswap_32>
 1a0:	cmp	w0, #0x1
 1a4:	b.eq	1bc <e2p_list_journal_super+0x1bc>  // b.none
 1a8:	adrp	x1, 0 <e2p_list_journal_super>
 1ac:	mov	w2, w0
 1b0:	add	x1, x1, #0x0
 1b4:	mov	x0, x19
 1b8:	bl	0 <fprintf>
 1bc:	ldr	w0, [x20, #24]
 1c0:	bl	344 <__bswap_32>
 1c4:	ldr	w8, [x20, #28]
 1c8:	mov	w21, w0
 1cc:	mov	w0, w8
 1d0:	bl	344 <__bswap_32>
 1d4:	adrp	x1, 0 <e2p_list_journal_super>
 1d8:	mov	w3, w0
 1dc:	add	x1, x1, #0x0
 1e0:	mov	x0, x19
 1e4:	mov	w2, w21
 1e8:	bl	0 <fprintf>
 1ec:	cmp	w22, #0x1
 1f0:	b.eq	208 <e2p_list_journal_super+0x208>  // b.none
 1f4:	adrp	x1, 0 <e2p_list_journal_super>
 1f8:	add	x1, x1, #0x0
 1fc:	mov	x0, x19
 200:	mov	w2, w22
 204:	bl	0 <fprintf>
 208:	ldr	w21, [x26]
 20c:	mov	w0, #0x1                   	// #1
 210:	bl	33c <e2p_swab32>
 214:	tst	w0, w21
 218:	b.eq	234 <e2p_list_journal_super+0x234>  // b.none
 21c:	adrp	x0, 0 <e2p_list_journal_super>
 220:	add	x0, x0, #0x0
 224:	mov	w1, #0x20                  	// #32
 228:	mov	w2, #0x1                   	// #1
 22c:	mov	x3, x19
 230:	bl	0 <fwrite>
 234:	ldr	w21, [x20, #40]
 238:	mov	w0, #0x10                  	// #16
 23c:	bl	33c <e2p_swab32>
 240:	tst	w0, w21
 244:	b.ne	258 <e2p_list_journal_super+0x258>  // b.any
 248:	mov	w0, #0x8                   	// #8
 24c:	bl	33c <e2p_swab32>
 250:	tst	w0, w21
 254:	b.eq	288 <e2p_list_journal_super+0x288>  // b.none
 258:	ldrb	w0, [x20, #80]
 25c:	bl	34c <journal_checksum_type_str>
 260:	ldr	w8, [x20, #252]
 264:	mov	x21, x0
 268:	mov	w0, w8
 26c:	bl	33c <e2p_swab32>
 270:	adrp	x1, 0 <e2p_list_journal_super>
 274:	mov	w3, w0
 278:	add	x1, x1, #0x0
 27c:	mov	x0, x19
 280:	mov	x2, x21
 284:	bl	0 <fprintf>
 288:	cmp	w22, #0x1
 28c:	b.hi	2a4 <e2p_list_journal_super+0x2a4>  // b.pmore
 290:	add	x0, x20, #0x100
 294:	bl	0 <e2p_is_null_uuid>
 298:	cbnz	w0, 2fc <e2p_list_journal_super+0x2fc>
 29c:	cmp	w22, #0x1
 2a0:	b.ne	2fc <e2p_list_journal_super+0x2fc>  // b.any
 2a4:	adrp	x26, 0 <e2p_list_journal_super>
 2a8:	adrp	x27, 0 <e2p_list_journal_super>
 2ac:	mov	x23, xzr
 2b0:	mov	x25, xzr
 2b4:	add	x24, x20, #0x100
 2b8:	mov	w22, w22
 2bc:	add	x26, x26, #0x0
 2c0:	add	x27, x27, #0x0
 2c4:	cmp	x23, #0x0
 2c8:	add	x0, x24, x23
 2cc:	csel	x21, x27, x26, eq  // eq = none
 2d0:	bl	0 <e2p_uuid2str>
 2d4:	mov	x1, x0
 2d8:	mov	x0, x21
 2dc:	bl	0 <printf>
 2e0:	add	x8, x25, #0x1
 2e4:	cmp	x8, x22
 2e8:	b.cs	2fc <e2p_list_journal_super+0x2fc>  // b.hs, b.nlast
 2ec:	cmp	x25, #0x2f
 2f0:	add	x23, x23, #0x10
 2f4:	mov	x25, x8
 2f8:	b.cc	2c4 <e2p_list_journal_super+0x2c4>  // b.lo, b.ul, b.last
 2fc:	ldr	w0, [x20, #32]
 300:	cbz	w0, 31c <e2p_list_journal_super+0x31c>
 304:	bl	344 <__bswap_32>
 308:	adrp	x1, 0 <e2p_list_journal_super>
 30c:	mov	w2, w0
 310:	add	x1, x1, #0x0
 314:	mov	x0, x19
 318:	bl	0 <fprintf>
 31c:	ldp	x20, x19, [sp, #96]
 320:	ldp	x22, x21, [sp, #80]
 324:	ldp	x24, x23, [sp, #64]
 328:	ldp	x26, x25, [sp, #48]
 32c:	ldp	x28, x27, [sp, #32]
 330:	ldp	x29, x30, [sp, #16]
 334:	add	sp, sp, #0x70
 338:	ret

000000000000033c <e2p_swab32>:
 33c:	rev	w0, w0
 340:	ret

0000000000000344 <__bswap_32>:
 344:	rev	w0, w0
 348:	ret

000000000000034c <journal_checksum_type_str>:
 34c:	and	w8, w0, #0xff
 350:	adrp	x9, 0 <e2p_list_journal_super>
 354:	adrp	x10, 0 <e2p_list_journal_super>
 358:	add	x9, x9, #0x0
 35c:	add	x10, x10, #0x0
 360:	cmp	w8, #0x4
 364:	csel	x0, x10, x9, eq  // eq = none
 368:	ret

mntopts.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_mntopt2string>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	cmp	w0, #0x1
   8:	str	x19, [sp, #16]
   c:	mov	x29, sp
  10:	b.ne	20 <e2p_mntopt2string+0x20>  // b.any
  14:	adrp	x19, 0 <e2p_mntopt2string>
  18:	add	x19, x19, #0x0
  1c:	b	6c <e2p_mntopt2string+0x6c>
  20:	adrp	x8, 0 <e2p_mntopt2string>
  24:	add	x8, x8, #0x0
  28:	ldr	x19, [x8]
  2c:	cbz	x19, 44 <e2p_mntopt2string+0x44>
  30:	ldur	w9, [x8, #-8]
  34:	add	x8, x8, #0x10
  38:	cmp	w9, w0
  3c:	b.ne	28 <e2p_mntopt2string+0x28>  // b.any
  40:	b	6c <e2p_mntopt2string+0x6c>
  44:	lsr	w8, w0, #1
  48:	adrp	x19, 0 <e2p_mntopt2string>
  4c:	clz	w8, w8
  50:	mov	w9, #0x20                  	// #32
  54:	add	x19, x19, #0x0
  58:	adrp	x1, 0 <e2p_mntopt2string>
  5c:	sub	w2, w9, w8
  60:	add	x1, x1, #0x0
  64:	mov	x0, x19
  68:	bl	0 <sprintf>
  6c:	mov	x0, x19
  70:	ldr	x19, [sp, #16]
  74:	ldp	x29, x30, [sp], #32
  78:	ret

000000000000007c <e2p_string2mntopt>:
  7c:	stp	x29, x30, [sp, #-48]!
  80:	str	x21, [sp, #16]
  84:	stp	x20, x19, [sp, #32]
  88:	mov	x19, x1
  8c:	adrp	x21, 0 <e2p_mntopt2string>
  90:	adrp	x1, 0 <e2p_mntopt2string>
  94:	mov	x20, x0
  98:	add	x21, x21, #0x0
  9c:	add	x1, x1, #0x0
  a0:	mov	x29, sp
  a4:	mov	x0, x20
  a8:	bl	0 <strcasecmp>
  ac:	cbz	w0, dc <e2p_string2mntopt+0x60>
  b0:	ldr	x1, [x21, #24]
  b4:	add	x21, x21, #0x10
  b8:	cbnz	x1, a4 <e2p_string2mntopt+0x28>
  bc:	adrp	x1, 0 <e2p_mntopt2string>
  c0:	add	x1, x1, #0x0
  c4:	mov	w2, #0x7                   	// #7
  c8:	mov	x0, x20
  cc:	bl	0 <strncasecmp>
  d0:	cbz	w0, f4 <e2p_string2mntopt+0x78>
  d4:	mov	w0, #0x1                   	// #1
  d8:	b	e4 <e2p_string2mntopt+0x68>
  dc:	ldr	w8, [x21]
  e0:	str	w8, [x19]
  e4:	ldp	x20, x19, [sp, #32]
  e8:	ldr	x21, [sp, #16]
  ec:	ldp	x29, x30, [sp], #48
  f0:	ret
  f4:	ldrb	w8, [x20, #8]!
  f8:	cbz	w8, d4 <e2p_string2mntopt+0x58>
  fc:	add	x1, x29, #0x18
 100:	mov	w2, #0xa                   	// #10
 104:	mov	x0, x20
 108:	bl	0 <strtol>
 10c:	mov	x8, x0
 110:	cmp	w8, #0x1f
 114:	b.hi	d4 <e2p_string2mntopt+0x58>  // b.pmore
 118:	ldr	x9, [x29, #24]
 11c:	mov	w0, #0x1                   	// #1
 120:	ldrb	w9, [x9]
 124:	cbnz	w9, e4 <e2p_string2mntopt+0x68>
 128:	lsl	w8, w0, w8
 12c:	mov	w0, wzr
 130:	b	e0 <e2p_string2mntopt+0x64>

0000000000000134 <e2p_edit_mntopts>:
 134:	sub	sp, sp, #0x50
 138:	stp	x29, x30, [sp, #16]
 13c:	stp	x24, x23, [sp, #32]
 140:	stp	x22, x21, [sp, #48]
 144:	stp	x20, x19, [sp, #64]
 148:	add	x29, sp, #0x10
 14c:	mov	w20, w2
 150:	mov	x21, x1
 154:	mov	x22, x0
 158:	bl	0 <strlen>
 15c:	add	x0, x0, #0x1
 160:	bl	0 <malloc>
 164:	cbz	x0, 22c <e2p_edit_mntopts+0xf8>
 168:	mov	x1, x22
 16c:	mov	x19, x0
 170:	bl	0 <strcpy>
 174:	b	190 <e2p_edit_mntopts+0x5c>
 178:	ldr	w9, [x21]
 17c:	orr	w8, w9, w8
 180:	cmp	x22, #0x0
 184:	csinc	x0, xzr, x22, eq  // eq = none
 188:	str	w8, [x21]
 18c:	cbz	x22, 234 <e2p_edit_mntopts+0x100>
 190:	ldrb	w8, [x0]
 194:	cbz	w8, 234 <e2p_edit_mntopts+0x100>
 198:	bl	264 <skip_over_blanks>
 19c:	mov	x23, x0
 1a0:	bl	2a8 <skip_over_word>
 1a4:	ldrb	w8, [x0]
 1a8:	cbz	w8, 1b8 <e2p_edit_mntopts+0x84>
 1ac:	mov	x22, x0
 1b0:	strb	wzr, [x0]
 1b4:	b	1bc <e2p_edit_mntopts+0x88>
 1b8:	mov	x22, xzr
 1bc:	ldrb	w8, [x23]
 1c0:	mov	w24, wzr
 1c4:	cmp	w8, #0x2b
 1c8:	b.eq	1e0 <e2p_edit_mntopts+0xac>  // b.none
 1cc:	cmp	w8, #0x5e
 1d0:	b.eq	1dc <e2p_edit_mntopts+0xa8>  // b.none
 1d4:	cmp	w8, #0x2d
 1d8:	b.ne	1e4 <e2p_edit_mntopts+0xb0>  // b.any
 1dc:	mov	w24, #0x1                   	// #1
 1e0:	add	x23, x23, #0x1
 1e4:	sub	x1, x29, #0x4
 1e8:	mov	x0, x23
 1ec:	bl	7c <e2p_string2mntopt>
 1f0:	cbnz	w0, 23c <e2p_edit_mntopts+0x108>
 1f4:	cbz	w20, 204 <e2p_edit_mntopts+0xd0>
 1f8:	ldur	w8, [x29, #-4]
 1fc:	tst	w8, w20
 200:	b.eq	23c <e2p_edit_mntopts+0x108>  // b.none
 204:	ldur	w8, [x29, #-4]
 208:	tst	w8, #0x60
 20c:	b.eq	21c <e2p_edit_mntopts+0xe8>  // b.none
 210:	ldr	w9, [x21]
 214:	and	w9, w9, #0xffffff9f
 218:	str	w9, [x21]
 21c:	cbz	w24, 178 <e2p_edit_mntopts+0x44>
 220:	ldr	w9, [x21]
 224:	bic	w8, w9, w8
 228:	b	180 <e2p_edit_mntopts+0x4c>
 22c:	mov	w20, #0x1                   	// #1
 230:	b	248 <e2p_edit_mntopts+0x114>
 234:	mov	w20, wzr
 238:	b	240 <e2p_edit_mntopts+0x10c>
 23c:	mov	w20, #0x1                   	// #1
 240:	mov	x0, x19
 244:	bl	0 <free>
 248:	mov	w0, w20
 24c:	ldp	x20, x19, [sp, #64]
 250:	ldp	x22, x21, [sp, #48]
 254:	ldp	x24, x23, [sp, #32]
 258:	ldp	x29, x30, [sp, #16]
 25c:	add	sp, sp, #0x50
 260:	ret

0000000000000264 <skip_over_blanks>:
 264:	stp	x29, x30, [sp, #-32]!
 268:	stp	x20, x19, [sp, #16]
 26c:	ldrb	w20, [x0]
 270:	mov	x19, x0
 274:	mov	x29, sp
 278:	cbz	w20, 298 <skip_over_blanks+0x34>
 27c:	bl	0 <__ctype_b_loc>
 280:	ldr	x8, [x0]
 284:	and	x9, x20, #0xff
 288:	ldrh	w9, [x8, x9, lsl #1]
 28c:	tbz	w9, #13, 298 <skip_over_blanks+0x34>
 290:	ldrb	w20, [x19, #1]!
 294:	cbnz	w20, 284 <skip_over_blanks+0x20>
 298:	mov	x0, x19
 29c:	ldp	x20, x19, [sp, #16]
 2a0:	ldp	x29, x30, [sp], #32
 2a4:	ret

00000000000002a8 <skip_over_word>:
 2a8:	stp	x29, x30, [sp, #-32]!
 2ac:	stp	x20, x19, [sp, #16]
 2b0:	ldrb	w20, [x0]
 2b4:	mov	x19, x0
 2b8:	mov	x29, sp
 2bc:	cbz	w20, 2e8 <skip_over_word+0x40>
 2c0:	bl	0 <__ctype_b_loc>
 2c4:	ldr	x8, [x0]
 2c8:	and	w9, w20, #0xff
 2cc:	cmp	w9, #0x2c
 2d0:	b.eq	2e8 <skip_over_word+0x40>  // b.none
 2d4:	and	x9, x20, #0xff
 2d8:	ldrh	w9, [x8, x9, lsl #1]
 2dc:	tbnz	w9, #13, 2e8 <skip_over_word+0x40>
 2e0:	ldrb	w20, [x19, #1]!
 2e4:	cbnz	w20, 2c8 <skip_over_word+0x20>
 2e8:	mov	x0, x19
 2ec:	ldp	x20, x19, [sp, #16]
 2f0:	ldp	x29, x30, [sp], #32
 2f4:	ret

parse_num.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <parse_num_blocks2>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	w19, w1
  10:	add	x1, x29, #0x18
  14:	mov	w2, wzr
  18:	bl	0 <strtoull>
  1c:	ldr	x9, [x29, #24]
  20:	ldrb	w8, [x9]
  24:	cbz	w8, 7c <parse_num_blocks2+0x7c>
  28:	ldrb	w9, [x9, #1]
  2c:	cbz	w9, 38 <parse_num_blocks2+0x38>
  30:	mov	x1, xzr
  34:	b	80 <parse_num_blocks2+0x80>
  38:	sub	w9, w8, #0x47
  3c:	cmp	w9, #0x2d
  40:	mov	x1, xzr
  44:	b.hi	90 <parse_num_blocks2+0x90>  // b.pmore
  48:	adrp	x8, 0 <parse_num_blocks2>
  4c:	add	x8, x8, #0x0
  50:	adr	x10, 60 <parse_num_blocks2+0x60>
  54:	ldrb	w11, [x8, x9]
  58:	add	x10, x10, x11, lsl #2
  5c:	br	x10
  60:	lsl	x0, x0, #10
  64:	lsl	x0, x0, #10
  68:	lsl	x0, x0, #10
  6c:	tbnz	w19, #31, 78 <parse_num_blocks2+0x78>
  70:	lsr	x0, x0, x19
  74:	b	7c <parse_num_blocks2+0x7c>
  78:	lsl	x0, x0, #10
  7c:	mov	x1, x0
  80:	ldr	x19, [sp, #16]
  84:	mov	x0, x1
  88:	ldp	x29, x30, [sp], #32
  8c:	ret
  90:	cbz	w8, 7c <parse_num_blocks2+0x7c>
  94:	b	80 <parse_num_blocks2+0x80>
  98:	tbnz	w19, #31, a8 <parse_num_blocks2+0xa8>
  9c:	add	w8, w19, #0x1
  a0:	lsr	x0, x0, x8
  a4:	b	7c <parse_num_blocks2+0x7c>
  a8:	lsl	x0, x0, #9
  ac:	b	7c <parse_num_blocks2+0x7c>

00000000000000b0 <parse_num_blocks>:
  b0:	stp	x29, x30, [sp, #-16]!
  b4:	mov	x29, sp
  b8:	bl	0 <parse_num_blocks2>
  bc:	ldp	x29, x30, [sp], #16
  c0:	ret

pe.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <print_fs_errors>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	and	w8, w1, #0xffff
   8:	cmp	w8, #0x3
   c:	mov	x3, x0
  10:	mov	x29, sp
  14:	b.eq	38 <print_fs_errors+0x38>  // b.none
  18:	cmp	w8, #0x2
  1c:	b.eq	48 <print_fs_errors+0x48>  // b.none
  20:	cmp	w8, #0x1
  24:	b.ne	58 <print_fs_errors+0x58>  // b.any
  28:	adrp	x0, 0 <print_fs_errors>
  2c:	add	x0, x0, #0x0
  30:	mov	w1, #0x8                   	// #8
  34:	b	64 <print_fs_errors+0x64>
  38:	adrp	x0, 0 <print_fs_errors>
  3c:	add	x0, x0, #0x0
  40:	mov	w1, #0x5                   	// #5
  44:	b	64 <print_fs_errors+0x64>
  48:	adrp	x0, 0 <print_fs_errors>
  4c:	add	x0, x0, #0x0
  50:	mov	w1, #0x11                  	// #17
  54:	b	64 <print_fs_errors+0x64>
  58:	adrp	x0, 0 <print_fs_errors>
  5c:	add	x0, x0, #0x0
  60:	mov	w1, #0x12                  	// #18
  64:	mov	w2, #0x1                   	// #1
  68:	bl	0 <fwrite>
  6c:	ldp	x29, x30, [sp], #16
  70:	ret

pf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <print_flags>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	stp	x24, x23, [sp, #16]
   8:	stp	x22, x21, [sp, #32]
   c:	adrp	x23, 0 <print_flags>
  10:	adrp	x22, 0 <print_flags>
  14:	stp	x20, x19, [sp, #48]
  18:	mov	w20, w2
  1c:	mov	x21, x1
  20:	mov	x19, x0
  24:	mov	w8, #0x1                   	// #1
  28:	add	x23, x23, #0x0
  2c:	add	x22, x22, #0x0
  30:	mov	w24, #0x1                   	// #1
  34:	mov	x29, sp
  38:	b	50 <print_flags+0x50>
  3c:	ldur	x0, [x23, #-16]
  40:	mov	x1, x19
  44:	bl	0 <fputs>
  48:	ldr	x8, [x23], #24
  4c:	cbz	x8, 98 <print_flags+0x98>
  50:	tst	x8, x21
  54:	b.eq	68 <print_flags+0x68>  // b.none
  58:	tbz	w20, #0, 3c <print_flags+0x3c>
  5c:	cbz	w24, 7c <print_flags+0x7c>
  60:	mov	w24, wzr
  64:	b	90 <print_flags+0x90>
  68:	tbnz	w20, #0, 48 <print_flags+0x48>
  6c:	mov	w0, #0x2d                  	// #45
  70:	mov	x1, x19
  74:	bl	0 <fputc>
  78:	b	48 <print_flags+0x48>
  7c:	mov	w1, #0x2                   	// #2
  80:	mov	w2, #0x1                   	// #1
  84:	mov	x0, x22
  88:	mov	x3, x19
  8c:	bl	0 <fwrite>
  90:	ldur	x0, [x23, #-8]
  94:	b	40 <print_flags+0x40>
  98:	tbz	w20, #0, b8 <print_flags+0xb8>
  9c:	cbz	w24, b8 <print_flags+0xb8>
  a0:	adrp	x0, 0 <print_flags>
  a4:	add	x0, x0, #0x0
  a8:	mov	w1, #0x3                   	// #3
  ac:	mov	w2, #0x1                   	// #1
  b0:	mov	x3, x19
  b4:	bl	0 <fwrite>
  b8:	ldp	x20, x19, [sp, #48]
  bc:	ldp	x22, x21, [sp, #32]
  c0:	ldp	x24, x23, [sp, #16]
  c4:	ldp	x29, x30, [sp], #64
  c8:	ret

ps.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <print_fs_state>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	stp	x20, x19, [sp, #16]
   8:	mov	x19, x0
   c:	and	w20, w1, #0xffff
  10:	mov	x29, sp
  14:	tbnz	w1, #0, 28 <print_fs_state+0x28>
  18:	adrp	x0, 0 <print_fs_state>
  1c:	add	x0, x0, #0x0
  20:	mov	w1, #0xa                   	// #10
  24:	b	34 <print_fs_state+0x34>
  28:	adrp	x0, 0 <print_fs_state>
  2c:	add	x0, x0, #0x0
  30:	mov	w1, #0x6                   	// #6
  34:	mov	w2, #0x1                   	// #1
  38:	mov	x3, x19
  3c:	bl	0 <fwrite>
  40:	tbz	w20, #1, 5c <print_fs_state+0x5c>
  44:	adrp	x0, 0 <print_fs_state>
  48:	add	x0, x0, #0x0
  4c:	mov	w1, #0xc                   	// #12
  50:	mov	w2, #0x1                   	// #1
  54:	mov	x3, x19
  58:	bl	0 <fwrite>
  5c:	ldp	x20, x19, [sp, #16]
  60:	ldp	x29, x30, [sp], #32
  64:	ret

setflags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <setflags>:
   0:	sub	sp, sp, #0xb0
   4:	stp	x20, x19, [sp, #160]
   8:	mov	x20, x1
   c:	add	x1, sp, #0x10
  10:	stp	x29, x30, [sp, #144]
  14:	add	x29, sp, #0x90
  18:	mov	w19, w0
  1c:	bl	0 <fstat>
  20:	cbz	w0, 4c <setflags+0x4c>
  24:	mov	w1, #0x6602                	// #26114
  28:	add	x2, sp, #0xc
  2c:	movk	w1, #0x4008, lsl #16
  30:	mov	w0, w19
  34:	str	w20, [sp, #12]
  38:	bl	0 <ioctl>
  3c:	ldp	x20, x19, [sp, #160]
  40:	ldp	x29, x30, [sp, #144]
  44:	add	sp, sp, #0xb0
  48:	ret
  4c:	ldr	w8, [sp, #32]
  50:	and	w8, w8, #0xf000
  54:	cmp	w8, #0x4, lsl #12
  58:	b.eq	24 <setflags+0x24>  // b.none
  5c:	cmp	w8, #0x8, lsl #12
  60:	b.eq	24 <setflags+0x24>  // b.none
  64:	bl	0 <__errno_location>
  68:	mov	w8, #0x5f                  	// #95
  6c:	str	w8, [x0]
  70:	mov	w0, #0xffffffff            	// #-1
  74:	b	3c <setflags+0x3c>

setversion.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <setversion>:
   0:	sub	sp, sp, #0x20
   4:	stp	x29, x30, [sp, #16]
   8:	add	x29, sp, #0x10
   c:	stur	w1, [x29, #-4]
  10:	mov	w1, #0x7602                	// #30210
  14:	sub	x2, x29, #0x4
  18:	movk	w1, #0x4008, lsl #16
  1c:	bl	0 <ioctl>
  20:	ldp	x29, x30, [sp, #16]
  24:	add	sp, sp, #0x20
  28:	ret

uuid.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_is_null_uuid>:
   0:	mov	x8, xzr
   4:	ldrb	w9, [x0, x8]
   8:	cbnz	w9, 20 <e2p_is_null_uuid+0x20>
   c:	add	x8, x8, #0x1
  10:	cmp	w8, #0x10
  14:	b.ne	4 <e2p_is_null_uuid+0x4>  // b.any
  18:	mov	w0, #0x1                   	// #1
  1c:	ret
  20:	mov	w0, wzr
  24:	ret

0000000000000028 <e2p_uuid_to_str>:
  28:	sub	sp, sp, #0x60
  2c:	stp	x29, x30, [sp, #64]
  30:	add	x29, sp, #0x40
  34:	str	x19, [sp, #80]
  38:	mov	x19, x1
  3c:	sub	x1, x29, #0x10
  40:	bl	a8 <e2p_unpack_uuid>
  44:	ldurh	w8, [x29, #-8]
  48:	ldur	w2, [x29, #-16]
  4c:	ldurh	w3, [x29, #-12]
  50:	ldurh	w4, [x29, #-10]
  54:	ldurb	w7, [x29, #-6]
  58:	ldurb	w9, [x29, #-5]
  5c:	ldurb	w10, [x29, #-4]
  60:	ldurb	w11, [x29, #-3]
  64:	ldurb	w12, [x29, #-2]
  68:	ldurb	w13, [x29, #-1]
  6c:	adrp	x1, 0 <e2p_is_null_uuid>
  70:	lsr	w5, w8, #8
  74:	and	w6, w8, #0xff
  78:	add	x1, x1, #0x0
  7c:	mov	x0, x19
  80:	str	w13, [sp, #32]
  84:	str	w12, [sp, #24]
  88:	str	w11, [sp, #16]
  8c:	str	w10, [sp, #8]
  90:	str	w9, [sp]
  94:	bl	0 <sprintf>
  98:	ldr	x19, [sp, #80]
  9c:	ldp	x29, x30, [sp, #64]
  a0:	add	sp, sp, #0x60
  a4:	ret

00000000000000a8 <e2p_unpack_uuid>:
  a8:	ldr	w8, [x0]
  ac:	rev	w8, w8
  b0:	str	w8, [x1]
  b4:	ldrh	w8, [x0, #4]
  b8:	rev	w8, w8
  bc:	lsr	w8, w8, #16
  c0:	strh	w8, [x1, #4]
  c4:	ldrh	w8, [x0, #6]
  c8:	rev	w8, w8
  cc:	lsr	w8, w8, #16
  d0:	strh	w8, [x1, #6]
  d4:	ldrh	w8, [x0, #8]
  d8:	rev	w8, w8
  dc:	lsr	w8, w8, #16
  e0:	strh	w8, [x1, #8]
  e4:	ldrh	w8, [x0, #14]
  e8:	ldur	w9, [x0, #10]
  ec:	strh	w8, [x1, #14]
  f0:	stur	w9, [x1, #10]
  f4:	ret

00000000000000f8 <e2p_uuid2str>:
  f8:	stp	x29, x30, [sp, #-32]!
  fc:	stp	x20, x19, [sp, #16]
 100:	mov	x29, sp
 104:	mov	x20, x0
 108:	bl	0 <e2p_is_null_uuid>
 10c:	cbz	w0, 11c <e2p_uuid2str+0x24>
 110:	adrp	x19, 0 <e2p_is_null_uuid>
 114:	add	x19, x19, #0x0
 118:	b	130 <e2p_uuid2str+0x38>
 11c:	adrp	x19, 0 <e2p_is_null_uuid>
 120:	add	x19, x19, #0x0
 124:	mov	x0, x20
 128:	mov	x1, x19
 12c:	bl	28 <e2p_uuid_to_str>
 130:	mov	x0, x19
 134:	ldp	x20, x19, [sp, #16]
 138:	ldp	x29, x30, [sp], #32
 13c:	ret

ostype.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_os2string>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	cmp	w0, #0x4
   8:	str	x19, [sp, #16]
   c:	mov	x29, sp
  10:	b.hi	24 <e2p_os2string+0x24>  // b.pmore
  14:	adrp	x8, 0 <e2p_os2string>
  18:	add	x8, x8, #0x0
  1c:	ldr	x19, [x8, w0, sxtw #3]
  20:	b	2c <e2p_os2string+0x2c>
  24:	adrp	x19, 0 <e2p_os2string>
  28:	add	x19, x19, #0x0
  2c:	mov	x0, x19
  30:	bl	0 <strlen>
  34:	add	x0, x0, #0x1
  38:	bl	0 <malloc>
  3c:	cbz	x0, 48 <e2p_os2string+0x48>
  40:	mov	x1, x19
  44:	bl	0 <strcpy>
  48:	ldr	x19, [sp, #16]
  4c:	ldp	x29, x30, [sp], #32
  50:	ret

0000000000000054 <e2p_string2os>:
  54:	stp	x29, x30, [sp, #-48]!
  58:	str	x21, [sp, #16]
  5c:	adrp	x1, 0 <e2p_os2string>
  60:	adrp	x21, 0 <e2p_os2string>
  64:	stp	x20, x19, [sp, #32]
  68:	mov	x20, x0
  6c:	mov	x19, xzr
  70:	add	x1, x1, #0x0
  74:	add	x21, x21, #0x0
  78:	mov	x29, sp
  7c:	mov	x0, x20
  80:	bl	0 <strcasecmp>
  84:	cbz	w0, a0 <e2p_string2os+0x4c>
  88:	add	x8, x21, x19, lsl #3
  8c:	ldr	x1, [x8, #8]
  90:	add	x19, x19, #0x1
  94:	cmp	w19, #0x5
  98:	b.ne	7c <e2p_string2os+0x28>  // b.any
  9c:	mov	w19, #0xffffffff            	// #-1
  a0:	mov	w0, w19
  a4:	ldp	x20, x19, [sp, #32]
  a8:	ldr	x21, [sp, #16]
  ac:	ldp	x29, x30, [sp], #48
  b0:	ret

percent.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_percent>:
   0:	cbz	w0, 54 <e2p_percent+0x54>
   4:	mov	w8, #0x64                  	// #100
   8:	sdiv	w8, w8, w0
   c:	mul	w9, w8, w0
  10:	cmp	w9, #0x64
  14:	b.eq	38 <e2p_percent+0x38>  // b.none
  18:	lsr	w8, w1, #24
  1c:	cbz	w8, 40 <e2p_percent+0x40>
  20:	mov	w8, #0x851f                	// #34079
  24:	movk	w8, #0x51eb, lsl #16
  28:	umull	x8, w1, w8
  2c:	lsr	x8, x8, #37
  30:	mul	w0, w8, w0
  34:	ret
  38:	udiv	w0, w1, w8
  3c:	ret
  40:	mov	w9, #0x851f                	// #34079
  44:	mul	w8, w1, w0
  48:	movk	w9, #0x51eb, lsl #16
  4c:	umull	x8, w8, w9
  50:	lsr	x0, x8, #37
  54:	ret

crypto_mode.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_encmode2string>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	str	x19, [sp, #16]
   8:	mov	x29, sp
   c:	cbz	w0, 38 <e2p_encmode2string+0x38>
  10:	adrp	x8, 0 <e2p_encmode2string>
  14:	mov	w2, w0
  18:	add	x8, x8, #0x0
  1c:	ldr	x19, [x8]
  20:	cbz	x19, 44 <e2p_encmode2string+0x44>
  24:	ldur	w9, [x8, #-8]
  28:	add	x8, x8, #0x10
  2c:	cmp	w9, w2
  30:	b.ne	1c <e2p_encmode2string+0x1c>  // b.any
  34:	b	5c <e2p_encmode2string+0x5c>
  38:	adrp	x19, 0 <e2p_encmode2string>
  3c:	add	x19, x19, #0x0
  40:	b	5c <e2p_encmode2string+0x5c>
  44:	adrp	x19, 0 <e2p_encmode2string>
  48:	add	x19, x19, #0x0
  4c:	adrp	x1, 0 <e2p_encmode2string>
  50:	add	x1, x1, #0x0
  54:	mov	x0, x19
  58:	bl	0 <sprintf>
  5c:	mov	x0, x19
  60:	ldr	x19, [sp, #16]
  64:	ldp	x29, x30, [sp], #32
  68:	ret

000000000000006c <e2p_string2encmode>:
  6c:	sub	sp, sp, #0x30
  70:	stp	x20, x19, [sp, #32]
  74:	adrp	x20, 0 <e2p_encmode2string>
  78:	adrp	x1, 0 <e2p_encmode2string>
  7c:	mov	x19, x0
  80:	add	x20, x20, #0x0
  84:	add	x1, x1, #0x0
  88:	stp	x29, x30, [sp, #16]
  8c:	add	x29, sp, #0x10
  90:	mov	x0, x19
  94:	bl	0 <strcasecmp>
  98:	cbz	w0, c8 <e2p_string2encmode+0x5c>
  9c:	ldr	x1, [x20, #24]
  a0:	add	x20, x20, #0x10
  a4:	cbnz	x1, 90 <e2p_string2encmode+0x24>
  a8:	adrp	x1, 0 <e2p_encmode2string>
  ac:	add	x1, x1, #0x0
  b0:	mov	w2, #0x9                   	// #9
  b4:	mov	x0, x19
  b8:	bl	0 <strncasecmp>
  bc:	cbz	w0, dc <e2p_string2encmode+0x70>
  c0:	mov	w0, #0xffffffff            	// #-1
  c4:	b	cc <e2p_string2encmode+0x60>
  c8:	ldr	w0, [x20]
  cc:	ldp	x20, x19, [sp, #32]
  d0:	ldp	x29, x30, [sp, #16]
  d4:	add	sp, sp, #0x30
  d8:	ret
  dc:	ldrb	w8, [x19, #9]!
  e0:	cbz	w8, c0 <e2p_string2encmode+0x54>
  e4:	add	x1, sp, #0x8
  e8:	mov	w2, #0xa                   	// #10
  ec:	mov	x0, x19
  f0:	bl	0 <strtol>
  f4:	cmp	w0, #0xff
  f8:	b.hi	c0 <e2p_string2encmode+0x54>  // b.pmore
  fc:	ldr	x8, [sp, #8]
 100:	ldrb	w8, [x8]
 104:	cmp	w8, #0x0
 108:	csinv	w0, w0, wzr, eq  // eq = none
 10c:	b	cc <e2p_string2encmode+0x60>

fgetproject.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fgetproject>:
   0:	sub	sp, sp, #0x50
   4:	stp	x22, x21, [sp, #48]
   8:	mov	x21, x1
   c:	mov	w1, #0x800                 	// #2048
  10:	stp	x29, x30, [sp, #32]
  14:	stp	x20, x19, [sp, #64]
  18:	add	x29, sp, #0x20
  1c:	bl	0 <open>
  20:	cmn	w0, #0x1
  24:	b.eq	6c <fgetproject+0x6c>  // b.none
  28:	mov	w1, #0x581f                	// #22559
  2c:	mov	x2, sp
  30:	movk	w1, #0x801c, lsl #16
  34:	mov	w20, w0
  38:	bl	0 <ioctl>
  3c:	mov	w19, w0
  40:	cbnz	w0, 4c <fgetproject+0x4c>
  44:	ldr	w8, [sp, #12]
  48:	str	x8, [x21]
  4c:	bl	0 <__errno_location>
  50:	ldr	w22, [x0]
  54:	mov	x21, x0
  58:	mov	w0, w20
  5c:	bl	0 <close>
  60:	cbz	w22, 70 <fgetproject+0x70>
  64:	str	w22, [x21]
  68:	b	70 <fgetproject+0x70>
  6c:	mov	w19, #0xffffffff            	// #-1
  70:	mov	w0, w19
  74:	ldp	x20, x19, [sp, #64]
  78:	ldp	x22, x21, [sp, #48]
  7c:	ldp	x29, x30, [sp, #32]
  80:	add	sp, sp, #0x50
  84:	ret

fsetproject.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fsetproject>:
   0:	sub	sp, sp, #0x50
   4:	stp	x20, x19, [sp, #64]
   8:	mov	x20, x1
   c:	mov	w1, #0x800                 	// #2048
  10:	stp	x29, x30, [sp, #32]
  14:	str	x21, [sp, #48]
  18:	add	x29, sp, #0x20
  1c:	bl	0 <open>
  20:	cmn	w0, #0x1
  24:	b.eq	70 <fsetproject+0x70>  // b.none
  28:	mov	w1, #0x581f                	// #22559
  2c:	mov	x2, sp
  30:	movk	w1, #0x801c, lsl #16
  34:	mov	w19, w0
  38:	bl	0 <ioctl>
  3c:	cmn	w0, #0x1
  40:	b.eq	78 <fsetproject+0x78>  // b.none
  44:	mov	w1, #0x5820                	// #22560
  48:	mov	x2, sp
  4c:	movk	w1, #0x401c, lsl #16
  50:	mov	w0, w19
  54:	str	w20, [sp, #12]
  58:	bl	0 <ioctl>
  5c:	cmn	w0, #0x1
  60:	b.eq	78 <fsetproject+0x78>  // b.none
  64:	mov	w20, w0
  68:	mov	w21, wzr
  6c:	b	84 <fsetproject+0x84>
  70:	mov	w20, #0xffffffff            	// #-1
  74:	b	98 <fsetproject+0x98>
  78:	bl	0 <__errno_location>
  7c:	ldr	w21, [x0]
  80:	mov	w20, #0xffffffff            	// #-1
  84:	mov	w0, w19
  88:	bl	0 <close>
  8c:	cbz	w21, 98 <fsetproject+0x98>
  90:	bl	0 <__errno_location>
  94:	str	w21, [x0]
  98:	mov	w0, w20
  9c:	ldp	x20, x19, [sp, #64]
  a0:	ldr	x21, [sp, #48]
  a4:	ldp	x29, x30, [sp, #32]
  a8:	add	sp, sp, #0x50
  ac:	ret

encoding.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_str2encoding>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	str	x21, [sp, #16]
   8:	adrp	x21, 0 <e2p_str2encoding>
   c:	stp	x20, x19, [sp, #32]
  10:	mov	x19, x0
  14:	mov	x20, xzr
  18:	add	x21, x21, #0x0
  1c:	mov	x29, sp
  20:	ldr	x1, [x21, x20]
  24:	mov	x0, x19
  28:	bl	0 <strcmp>
  2c:	cbz	w0, 44 <e2p_str2encoding+0x44>
  30:	add	x20, x20, #0x10
  34:	cmp	x20, #0x20
  38:	b.ne	20 <e2p_str2encoding+0x20>  // b.any
  3c:	mov	w0, #0xffffffea            	// #-22
  40:	b	4c <e2p_str2encoding+0x4c>
  44:	add	x8, x21, x20
  48:	ldrh	w0, [x8, #8]
  4c:	ldp	x20, x19, [sp, #32]
  50:	ldr	x21, [sp, #16]
  54:	ldp	x29, x30, [sp], #48
  58:	ret

000000000000005c <e2p_encoding2str>:
  5c:	stp	x29, x30, [sp, #-32]!
  60:	adrp	x9, 0 <e2p_str2encoding>
  64:	str	x19, [sp, #16]
  68:	mov	x29, sp
  6c:	mov	w2, w0
  70:	mov	x8, xzr
  74:	add	x9, x9, #0x0
  78:	add	x10, x9, x8
  7c:	ldrh	w10, [x10, #8]
  80:	cmp	w10, w2
  84:	b.eq	b0 <e2p_encoding2str+0x54>  // b.none
  88:	add	x8, x8, #0x10
  8c:	cmp	w8, #0x20
  90:	b.ne	78 <e2p_encoding2str+0x1c>  // b.any
  94:	adrp	x19, 0 <e2p_str2encoding>
  98:	add	x19, x19, #0x0
  9c:	adrp	x1, 0 <e2p_str2encoding>
  a0:	add	x1, x1, #0x0
  a4:	mov	x0, x19
  a8:	bl	0 <sprintf>
  ac:	b	b4 <e2p_encoding2str+0x58>
  b0:	ldr	x19, [x9, x8]
  b4:	mov	x0, x19
  b8:	ldr	x19, [sp, #16]
  bc:	ldp	x29, x30, [sp], #32
  c0:	ret

00000000000000c4 <e2p_get_encoding_flags>:
  c4:	adrp	x9, 0 <e2p_str2encoding>
  c8:	mov	x8, xzr
  cc:	add	x9, x9, #0x0
  d0:	add	x10, x9, x8
  d4:	ldrh	w11, [x10, #8]
  d8:	cmp	w11, w0
  dc:	b.eq	f4 <e2p_get_encoding_flags+0x30>  // b.none
  e0:	add	x8, x8, #0x10
  e4:	cmp	w8, #0x20
  e8:	b.ne	d0 <e2p_get_encoding_flags+0xc>  // b.any
  ec:	mov	w0, wzr
  f0:	ret
  f4:	ldrh	w0, [x10, #10]
  f8:	ret

00000000000000fc <e2p_str2encoding_flags>:
  fc:	stp	x29, x30, [sp, #-64]!
 100:	mov	x8, x1
 104:	adrp	x1, 0 <e2p_str2encoding>
 108:	stp	x20, x19, [sp, #48]
 10c:	mov	w20, w0
 110:	add	x1, x1, #0x0
 114:	mov	x0, x8
 118:	stp	x24, x23, [sp, #16]
 11c:	stp	x22, x21, [sp, #32]
 120:	mov	x29, sp
 124:	mov	x19, x2
 128:	bl	0 <strtok>
 12c:	cmp	w20, #0x1
 130:	b.ne	1b0 <e2p_str2encoding_flags+0xb4>  // b.any
 134:	mov	x23, x0
 138:	cbz	x0, 1b8 <e2p_str2encoding_flags+0xbc>
 13c:	adrp	x20, 0 <e2p_str2encoding>
 140:	adrp	x21, 0 <e2p_str2encoding>
 144:	adrp	x22, 0 <e2p_str2encoding>
 148:	add	x20, x20, #0x0
 14c:	add	x21, x21, #0x0
 150:	add	x22, x22, #0x0
 154:	mov	w2, #0x2                   	// #2
 158:	mov	x0, x20
 15c:	mov	x1, x23
 160:	bl	0 <strncmp>
 164:	add	x8, x23, #0x2
 168:	cmp	w0, #0x0
 16c:	mov	w24, w0
 170:	csel	x1, x8, x23, eq  // eq = none
 174:	mov	x0, x21
 178:	bl	0 <strcmp>
 17c:	cbnz	w0, 1b0 <e2p_str2encoding_flags+0xb4>
 180:	ldrh	w8, [x19]
 184:	cmp	w24, #0x0
 188:	mov	x0, xzr
 18c:	mov	x1, x22
 190:	orr	w9, w8, #0x1
 194:	and	w8, w8, #0xfffe
 198:	csel	w8, w8, w9, eq  // eq = none
 19c:	strh	w8, [x19]
 1a0:	bl	0 <strtok>
 1a4:	mov	x23, x0
 1a8:	cbnz	x0, 154 <e2p_str2encoding_flags+0x58>
 1ac:	b	1bc <e2p_str2encoding_flags+0xc0>
 1b0:	mov	w0, #0xffffffea            	// #-22
 1b4:	b	1bc <e2p_str2encoding_flags+0xc0>
 1b8:	mov	w0, wzr
 1bc:	ldp	x20, x19, [sp, #48]
 1c0:	ldp	x22, x21, [sp, #32]
 1c4:	ldp	x24, x23, [sp, #16]
 1c8:	ldp	x29, x30, [sp], #64
 1cc:	ret
