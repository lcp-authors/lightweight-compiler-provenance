In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libz.a_clang_-O1:

adler32.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <adler32_z>:
   0:	ubfx	x8, x0, #16, #16
   4:	cmp	x2, #0x1
   8:	and	x9, x0, #0xffff
   c:	b.ne	50 <adler32_z+0x50>  // b.any
  10:	ldrb	w10, [x1]
  14:	mov	x11, #0xffffffffffff000f    	// #-65521
  18:	mov	w12, #0xfff0                	// #65520
  1c:	mov	x13, #0xffffffffffff0000    	// #-65536
  20:	add	x9, x9, x10
  24:	add	x10, x9, x11
  28:	cmp	x9, x12
  2c:	csel	x9, x10, x9, hi  // hi = pmore
  30:	add	x8, x9, x8
  34:	movk	x13, #0xf, lsl #16
  38:	lsl	x10, x8, #16
  3c:	add	x11, x10, x13
  40:	cmp	x8, x12
  44:	csel	x8, x11, x10, hi  // hi = pmore
  48:	orr	x0, x8, x9
  4c:	ret
  50:	cbz	x1, b0 <adler32_z+0xb0>
  54:	cmp	x2, #0x10
  58:	b.cs	b8 <adler32_z+0xb8>  // b.hs, b.nlast
  5c:	cbz	x2, 74 <adler32_z+0x74>
  60:	ldrb	w10, [x1], #1
  64:	subs	x2, x2, #0x1
  68:	add	x9, x9, x10
  6c:	add	x8, x9, x8
  70:	b.ne	60 <adler32_z+0x60>  // b.any
  74:	mov	x12, #0xc5cd                	// #50637
  78:	movk	x12, #0xd2f, lsl #16
  7c:	movk	x12, #0xe1, lsl #32
  80:	mov	x10, #0xffffffffffff000f    	// #-65521
  84:	mov	w11, #0xfff0                	// #65520
  88:	movk	x12, #0xf, lsl #48
  8c:	add	x10, x9, x10
  90:	cmp	x9, x11
  94:	umulh	x11, x8, x12
  98:	csel	x9, x10, x9, hi  // hi = pmore
  9c:	sub	x10, x8, x11
  a0:	add	x10, x11, x10, lsr #1
  a4:	lsr	x10, x10, #15
  a8:	mov	w11, #0xfff1                	// #65521
  ac:	b	330 <adler32_z+0x330>
  b0:	mov	w0, #0x1                   	// #1
  b4:	ret
  b8:	lsr	x10, x2, #4
  bc:	cmp	x10, #0x15b
  c0:	b.cc	1f0 <adler32_z+0x1f0>  // b.lo, b.ul, b.last
  c4:	mov	x12, #0xc5cd                	// #50637
  c8:	movk	x12, #0xd2f, lsl #16
  cc:	movk	x12, #0xe1, lsl #32
  d0:	mov	x10, #0xffffffffffffea50    	// #-5552
  d4:	mov	w11, #0x15b0                	// #5552
  d8:	movk	x12, #0xf, lsl #48
  dc:	mov	w13, #0xfff1                	// #65521
  e0:	add	x2, x2, x10
  e4:	mov	w14, #0xfffffea5            	// #-347
  e8:	mov	x15, x1
  ec:	ldrb	w16, [x15]
  f0:	ldrb	w17, [x15, #1]
  f4:	adds	w14, w14, #0x1
  f8:	add	x9, x9, x16
  fc:	ldrb	w16, [x15, #2]
 100:	add	x8, x9, x8
 104:	add	x9, x9, x17
 108:	ldrb	w17, [x15, #3]
 10c:	add	x8, x8, x9
 110:	add	x9, x9, x16
 114:	ldrb	w16, [x15, #4]
 118:	add	x8, x8, x9
 11c:	add	x9, x9, x17
 120:	ldrb	w17, [x15, #5]
 124:	add	x8, x8, x9
 128:	add	x9, x9, x16
 12c:	ldrb	w16, [x15, #6]
 130:	add	x8, x8, x9
 134:	add	x9, x9, x17
 138:	ldrb	w17, [x15, #7]
 13c:	add	x8, x8, x9
 140:	add	x9, x9, x16
 144:	ldrb	w16, [x15, #8]
 148:	add	x8, x8, x9
 14c:	add	x9, x9, x17
 150:	ldrb	w17, [x15, #9]
 154:	add	x8, x8, x9
 158:	add	x9, x9, x16
 15c:	ldrb	w16, [x15, #10]
 160:	add	x8, x8, x9
 164:	add	x9, x9, x17
 168:	ldrb	w17, [x15, #11]
 16c:	add	x8, x8, x9
 170:	add	x9, x9, x16
 174:	ldrb	w16, [x15, #12]
 178:	add	x8, x8, x9
 17c:	add	x9, x9, x17
 180:	ldrb	w17, [x15, #13]
 184:	add	x8, x8, x9
 188:	add	x9, x9, x16
 18c:	ldrb	w16, [x15, #14]
 190:	add	x8, x8, x9
 194:	add	x9, x9, x17
 198:	ldrb	w17, [x15, #15]
 19c:	add	x8, x8, x9
 1a0:	add	x9, x9, x16
 1a4:	add	x8, x8, x9
 1a8:	add	x9, x9, x17
 1ac:	add	x8, x8, x9
 1b0:	add	x15, x15, #0x10
 1b4:	b.cc	ec <adler32_z+0xec>  // b.lo, b.ul, b.last
 1b8:	umulh	x14, x9, x12
 1bc:	umulh	x15, x8, x12
 1c0:	sub	x17, x9, x14
 1c4:	sub	x18, x8, x15
 1c8:	add	x14, x14, x17, lsr #1
 1cc:	add	x15, x15, x18, lsr #1
 1d0:	lsr	x16, x2, #4
 1d4:	lsr	x14, x14, #15
 1d8:	lsr	x15, x15, #15
 1dc:	add	x1, x1, x11
 1e0:	cmp	x16, #0x15a
 1e4:	msub	x9, x14, x13, x9
 1e8:	msub	x8, x15, x13, x8
 1ec:	b.hi	e0 <adler32_z+0xe0>  // b.pmore
 1f0:	cbz	x2, 334 <adler32_z+0x334>
 1f4:	subs	x10, x2, #0x10
 1f8:	b.cc	2e0 <adler32_z+0x2e0>  // b.lo, b.ul, b.last
 1fc:	and	x12, x10, #0xfffffffffffffff0
 200:	add	x11, x12, #0x10
 204:	mov	x13, x1
 208:	ldrb	w14, [x13]
 20c:	ldrb	w15, [x13, #1]
 210:	sub	x2, x2, #0x10
 214:	cmp	x2, #0xf
 218:	add	x9, x9, x14
 21c:	ldrb	w14, [x13, #2]
 220:	add	x8, x9, x8
 224:	add	x9, x9, x15
 228:	ldrb	w15, [x13, #3]
 22c:	add	x8, x8, x9
 230:	add	x9, x9, x14
 234:	ldrb	w14, [x13, #4]
 238:	add	x8, x8, x9
 23c:	add	x9, x9, x15
 240:	ldrb	w15, [x13, #5]
 244:	add	x8, x8, x9
 248:	add	x9, x9, x14
 24c:	ldrb	w14, [x13, #6]
 250:	add	x8, x8, x9
 254:	add	x9, x9, x15
 258:	ldrb	w15, [x13, #7]
 25c:	add	x8, x8, x9
 260:	add	x9, x9, x14
 264:	ldrb	w14, [x13, #8]
 268:	add	x8, x8, x9
 26c:	add	x9, x9, x15
 270:	ldrb	w15, [x13, #9]
 274:	add	x8, x8, x9
 278:	add	x9, x9, x14
 27c:	ldrb	w14, [x13, #10]
 280:	add	x8, x8, x9
 284:	add	x9, x9, x15
 288:	ldrb	w15, [x13, #11]
 28c:	add	x8, x8, x9
 290:	add	x9, x9, x14
 294:	ldrb	w14, [x13, #12]
 298:	add	x8, x8, x9
 29c:	add	x9, x9, x15
 2a0:	ldrb	w15, [x13, #13]
 2a4:	add	x8, x8, x9
 2a8:	add	x9, x9, x14
 2ac:	ldrb	w14, [x13, #14]
 2b0:	add	x8, x8, x9
 2b4:	add	x9, x9, x15
 2b8:	add	x8, x8, x9
 2bc:	add	x9, x9, x14
 2c0:	ldrb	w14, [x13, #15]
 2c4:	add	x8, x8, x9
 2c8:	add	x13, x13, #0x10
 2cc:	add	x9, x9, x14
 2d0:	add	x8, x8, x9
 2d4:	b.hi	208 <adler32_z+0x208>  // b.pmore
 2d8:	sub	x2, x10, x12
 2dc:	add	x1, x1, x11
 2e0:	cbz	x2, 2f8 <adler32_z+0x2f8>
 2e4:	ldrb	w10, [x1], #1
 2e8:	subs	x2, x2, #0x1
 2ec:	add	x9, x9, x10
 2f0:	add	x8, x9, x8
 2f4:	b.ne	2e4 <adler32_z+0x2e4>  // b.any
 2f8:	mov	x10, #0xc5cd                	// #50637
 2fc:	movk	x10, #0xd2f, lsl #16
 300:	movk	x10, #0xe1, lsl #32
 304:	movk	x10, #0xf, lsl #48
 308:	umulh	x12, x9, x10
 30c:	umulh	x10, x8, x10
 310:	sub	x13, x9, x12
 314:	sub	x14, x8, x10
 318:	add	x12, x12, x13, lsr #1
 31c:	mov	w11, #0xfff1                	// #65521
 320:	add	x10, x10, x14, lsr #1
 324:	lsr	x12, x12, #15
 328:	lsr	x10, x10, #15
 32c:	msub	x9, x12, x11, x9
 330:	msub	x8, x10, x11, x8
 334:	orr	x0, x9, x8, lsl #16
 338:	ret

000000000000033c <adler32>:
 33c:	stp	x29, x30, [sp, #-16]!
 340:	mov	w2, w2
 344:	mov	x29, sp
 348:	bl	0 <adler32_z>
 34c:	ldp	x29, x30, [sp], #16
 350:	ret

0000000000000354 <adler32_combine>:
 354:	stp	x29, x30, [sp, #-16]!
 358:	mov	x29, sp
 35c:	bl	368 <adler32_combine_>
 360:	ldp	x29, x30, [sp], #16
 364:	ret

0000000000000368 <adler32_combine_>:
 368:	tbnz	x2, #63, 438 <adler32_combine_+0xd0>
 36c:	mov	x8, #0xe2e7                	// #58087
 370:	movk	x8, #0x8697, lsl #16
 374:	movk	x8, #0x8070, lsl #32
 378:	movk	x8, #0x8007, lsl #48
 37c:	smulh	x8, x2, x8
 380:	and	x10, x0, #0xffff
 384:	ubfx	x12, x0, #16, #16
 388:	lsr	x13, x1, #16
 38c:	add	x8, x8, x2
 390:	mov	w11, #0xfff0                	// #65520
 394:	add	x14, x10, w1, uxth
 398:	add	x12, x12, w13, uxth
 39c:	lsr	x13, x8, #63
 3a0:	lsr	x8, x8, #15
 3a4:	add	w8, w8, w13
 3a8:	add	x13, x14, x11
 3ac:	sub	x14, x14, #0x1
 3b0:	cmp	x13, x11
 3b4:	csel	x13, x14, x13, hi  // hi = pmore
 3b8:	mov	x14, #0xc5cd                	// #50637
 3bc:	mov	w9, #0xfff1                	// #65521
 3c0:	movk	x14, #0xd2f, lsl #16
 3c4:	movk	x14, #0xe1, lsl #32
 3c8:	msub	w8, w8, w9, w2
 3cc:	mov	x15, #0xffffffffffff000f    	// #-65521
 3d0:	movk	x14, #0xf, lsl #48
 3d4:	mul	x10, x8, x10
 3d8:	sub	x8, x12, x8
 3dc:	add	x12, x13, x15
 3e0:	cmp	x13, x11
 3e4:	csel	x12, x12, x13, hi  // hi = pmore
 3e8:	umulh	x13, x10, x14
 3ec:	sub	x14, x10, x13
 3f0:	add	x13, x13, x14, lsr #1
 3f4:	lsr	x13, x13, #15
 3f8:	msub	x10, x13, x9, x10
 3fc:	mov	w14, #0xffe1                	// #65505
 400:	add	x8, x8, x10
 404:	movk	w14, #0x1, lsl #16
 408:	add	x9, x8, x9
 40c:	add	x8, x8, x15
 410:	cmp	x9, x14
 414:	mov	x13, #0xffffffffffff0000    	// #-65536
 418:	csel	x8, x8, x9, hi  // hi = pmore
 41c:	movk	x13, #0xf, lsl #16
 420:	lsl	x9, x8, #16
 424:	add	x10, x9, x13
 428:	cmp	x8, x11
 42c:	csel	x8, x10, x9, hi  // hi = pmore
 430:	orr	x0, x8, x12
 434:	ret
 438:	mov	w0, #0xffffffff            	// #-1
 43c:	ret

0000000000000440 <adler32_combine64>:
 440:	stp	x29, x30, [sp, #-16]!
 444:	mov	x29, sp
 448:	bl	368 <adler32_combine_>
 44c:	ldp	x29, x30, [sp], #16
 450:	ret

crc32.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <get_crc_table>:
   0:	adrp	x0, 0 <get_crc_table>
   4:	add	x0, x0, #0x0
   8:	ret

000000000000000c <crc32_z>:
   c:	cbz	x1, 24 <crc32_z+0x18>
  10:	stp	x29, x30, [sp, #-16]!
  14:	mov	x29, sp
  18:	bl	2c <crc32_little>
  1c:	ldp	x29, x30, [sp], #16
  20:	ret
  24:	mov	x0, xzr
  28:	ret

000000000000002c <crc32_little>:
  2c:	adrp	x8, 0 <get_crc_table>
  30:	mvn	w9, w0
  34:	add	x8, x8, #0x0
  38:	cbz	x2, 60 <crc32_little+0x34>
  3c:	and	x10, x1, #0x3
  40:	cbz	x10, 60 <crc32_little+0x34>
  44:	ldrb	w10, [x1], #1
  48:	and	w11, w9, #0xff
  4c:	subs	x2, x2, #0x1
  50:	eor	w10, w11, w10
  54:	ldr	w10, [x8, w10, uxtw #2]
  58:	eor	w9, w10, w9, lsr #8
  5c:	b.ne	3c <crc32_little+0x10>  // b.any
  60:	subs	x10, x2, #0x20
  64:	b.cs	98 <crc32_little+0x6c>  // b.hs, b.nlast
  68:	subs	x10, x2, #0x4
  6c:	b.cs	260 <crc32_little+0x234>  // b.hs, b.nlast
  70:	cbz	x2, 90 <crc32_little+0x64>
  74:	ldrb	w10, [x1], #1
  78:	and	w11, w9, #0xff
  7c:	subs	x2, x2, #0x1
  80:	eor	w10, w11, w10
  84:	ldr	w10, [x8, w10, uxtw #2]
  88:	eor	w9, w10, w9, lsr #8
  8c:	b.ne	74 <crc32_little+0x48>  // b.any
  90:	mvn	w0, w9
  94:	ret
  98:	and	x12, x10, #0xffffffffffffffe0
  9c:	add	x11, x12, x1
  a0:	add	x11, x11, #0x20
  a4:	ldp	w16, w17, [x1]
  a8:	add	x13, x8, #0xc00
  ac:	add	x14, x8, #0x800
  b0:	add	x15, x8, #0x400
  b4:	eor	w9, w16, w9
  b8:	and	w16, w9, #0xff
  bc:	ubfx	w18, w9, #8, #8
  c0:	ubfx	w0, w9, #16, #8
  c4:	ldr	w16, [x13, w16, uxtw #2]
  c8:	ldr	w18, [x14, w18, uxtw #2]
  cc:	lsr	w9, w9, #24
  d0:	ldr	w0, [x15, w0, uxtw #2]
  d4:	ldr	w9, [x8, w9, uxtw #2]
  d8:	eor	w16, w18, w16
  dc:	sub	x2, x2, #0x20
  e0:	eor	w16, w16, w0
  e4:	eor	w9, w16, w9
  e8:	eor	w9, w9, w17
  ec:	and	w16, w9, #0xff
  f0:	ubfx	w17, w9, #8, #8
  f4:	ldr	w16, [x13, w16, uxtw #2]
  f8:	ldr	w17, [x14, w17, uxtw #2]
  fc:	ubfx	w18, w9, #16, #8
 100:	lsr	w9, w9, #24
 104:	ldr	w18, [x15, w18, uxtw #2]
 108:	ldr	w9, [x8, w9, uxtw #2]
 10c:	eor	w16, w17, w16
 110:	ldp	w17, w0, [x1, #8]
 114:	eor	w16, w16, w18
 118:	eor	w9, w16, w9
 11c:	cmp	x2, #0x1f
 120:	eor	w9, w9, w17
 124:	and	w16, w9, #0xff
 128:	ubfx	w17, w9, #8, #8
 12c:	ubfx	w18, w9, #16, #8
 130:	ldr	w16, [x13, w16, uxtw #2]
 134:	ldr	w17, [x14, w17, uxtw #2]
 138:	lsr	w9, w9, #24
 13c:	ldr	w18, [x15, w18, uxtw #2]
 140:	ldr	w9, [x8, w9, uxtw #2]
 144:	eor	w16, w17, w16
 148:	eor	w16, w16, w18
 14c:	eor	w9, w16, w9
 150:	eor	w9, w9, w0
 154:	and	w16, w9, #0xff
 158:	ubfx	w17, w9, #8, #8
 15c:	ldr	w16, [x13, w16, uxtw #2]
 160:	ldr	w17, [x14, w17, uxtw #2]
 164:	ubfx	w18, w9, #16, #8
 168:	lsr	w9, w9, #24
 16c:	ldr	w18, [x15, w18, uxtw #2]
 170:	ldr	w9, [x8, w9, uxtw #2]
 174:	eor	w16, w17, w16
 178:	ldp	w17, w0, [x1, #16]
 17c:	eor	w16, w16, w18
 180:	eor	w9, w16, w9
 184:	eor	w9, w9, w17
 188:	and	w16, w9, #0xff
 18c:	ubfx	w17, w9, #8, #8
 190:	ubfx	w18, w9, #16, #8
 194:	ldr	w16, [x13, w16, uxtw #2]
 198:	ldr	w17, [x14, w17, uxtw #2]
 19c:	lsr	w9, w9, #24
 1a0:	ldr	w18, [x15, w18, uxtw #2]
 1a4:	ldr	w9, [x8, w9, uxtw #2]
 1a8:	eor	w16, w17, w16
 1ac:	eor	w16, w16, w18
 1b0:	eor	w9, w16, w9
 1b4:	eor	w9, w9, w0
 1b8:	and	w16, w9, #0xff
 1bc:	ubfx	w17, w9, #8, #8
 1c0:	ldr	w16, [x13, w16, uxtw #2]
 1c4:	ldr	w17, [x14, w17, uxtw #2]
 1c8:	ubfx	w18, w9, #16, #8
 1cc:	lsr	w9, w9, #24
 1d0:	ldr	w18, [x15, w18, uxtw #2]
 1d4:	ldr	w9, [x8, w9, uxtw #2]
 1d8:	eor	w16, w17, w16
 1dc:	ldp	w17, w0, [x1, #24]
 1e0:	eor	w16, w16, w18
 1e4:	eor	w9, w16, w9
 1e8:	add	x1, x1, #0x20
 1ec:	eor	w9, w9, w17
 1f0:	and	w16, w9, #0xff
 1f4:	ubfx	w17, w9, #8, #8
 1f8:	ubfx	w18, w9, #16, #8
 1fc:	ldr	w16, [x13, w16, uxtw #2]
 200:	ldr	w17, [x14, w17, uxtw #2]
 204:	ldr	w18, [x15, w18, uxtw #2]
 208:	lsr	w9, w9, #24
 20c:	ldr	w9, [x8, w9, uxtw #2]
 210:	eor	w16, w17, w16
 214:	eor	w16, w16, w18
 218:	eor	w9, w16, w9
 21c:	eor	w9, w9, w0
 220:	and	w16, w9, #0xff
 224:	ubfx	w17, w9, #8, #8
 228:	ldr	w13, [x13, w16, uxtw #2]
 22c:	ubfx	w16, w9, #16, #8
 230:	ldr	w14, [x14, w17, uxtw #2]
 234:	lsr	w9, w9, #24
 238:	ldr	w15, [x15, w16, uxtw #2]
 23c:	ldr	w9, [x8, w9, uxtw #2]
 240:	eor	w13, w14, w13
 244:	eor	w13, w13, w15
 248:	eor	w9, w13, w9
 24c:	b.hi	a4 <crc32_little+0x78>  // b.pmore
 250:	sub	x2, x10, x12
 254:	mov	x1, x11
 258:	subs	x10, x2, #0x4
 25c:	b.cc	70 <crc32_little+0x44>  // b.lo, b.ul, b.last
 260:	lsr	x11, x10, #2
 264:	add	x11, x11, #0x1
 268:	mov	x12, x1
 26c:	ldr	w13, [x12], #4
 270:	sub	x2, x2, #0x4
 274:	cmp	x2, #0x3
 278:	eor	w9, w13, w9
 27c:	and	w13, w9, #0xff
 280:	ubfx	w14, w9, #8, #8
 284:	add	x13, x8, w13, uxtw #2
 288:	add	x14, x8, w14, uxtw #2
 28c:	ldr	w13, [x13, #3072]
 290:	ldr	w14, [x14, #2048]
 294:	eor	w13, w14, w13
 298:	ubfx	w14, w9, #16, #8
 29c:	add	x14, x8, w14, uxtw #2
 2a0:	ldr	w14, [x14, #1024]
 2a4:	lsr	w9, w9, #24
 2a8:	ldr	w9, [x8, w9, uxtw #2]
 2ac:	eor	w13, w13, w14
 2b0:	eor	w9, w13, w9
 2b4:	b.hi	26c <crc32_little+0x240>  // b.pmore
 2b8:	add	x1, x1, x11, lsl #2
 2bc:	and	x2, x10, #0x3
 2c0:	cbnz	x2, 74 <crc32_little+0x48>
 2c4:	b	90 <crc32_little+0x64>

00000000000002c8 <crc32>:
 2c8:	stp	x29, x30, [sp, #-16]!
 2cc:	mov	w2, w2
 2d0:	mov	x29, sp
 2d4:	bl	c <crc32_z>
 2d8:	ldp	x29, x30, [sp], #16
 2dc:	ret

00000000000002e0 <crc32_combine>:
 2e0:	stp	x29, x30, [sp, #-16]!
 2e4:	mov	x29, sp
 2e8:	bl	2f4 <crc32_combine_>
 2ec:	ldp	x29, x30, [sp], #16
 2f0:	ret

00000000000002f4 <crc32_combine_>:
 2f4:	stp	x29, x30, [sp, #-48]!
 2f8:	stp	x28, x21, [sp, #16]
 2fc:	stp	x20, x19, [sp, #32]
 300:	mov	x29, sp
 304:	sub	sp, sp, #0x200
 308:	cmp	x2, #0x1
 30c:	mov	x20, x0
 310:	b.lt	3bc <crc32_combine_+0xc8>  // b.tstop
 314:	mov	w10, #0x8320                	// #33568
 318:	movk	w10, #0xedb8, lsl #16
 31c:	mov	x21, x2
 320:	mov	x19, x1
 324:	mov	w8, #0x1                   	// #1
 328:	mov	w9, #0x8                   	// #8
 32c:	str	x10, [sp]
 330:	mov	x10, sp
 334:	str	x8, [x10, x9]
 338:	add	x9, x9, #0x8
 33c:	cmp	x9, #0x100
 340:	lsl	x8, x8, #1
 344:	b.ne	334 <crc32_combine_+0x40>  // b.any
 348:	add	x0, sp, #0x100
 34c:	mov	x1, sp
 350:	bl	3e8 <gf2_matrix_square>
 354:	mov	x0, sp
 358:	add	x1, sp, #0x100
 35c:	bl	3e8 <gf2_matrix_square>
 360:	b	36c <crc32_combine_+0x78>
 364:	asr	x21, x21, #2
 368:	cbz	x21, 3b8 <crc32_combine_+0xc4>
 36c:	add	x0, sp, #0x100
 370:	mov	x1, sp
 374:	bl	3e8 <gf2_matrix_square>
 378:	tbz	w21, #0, 38c <crc32_combine_+0x98>
 37c:	add	x0, sp, #0x100
 380:	mov	x1, x20
 384:	bl	430 <gf2_matrix_times>
 388:	mov	x20, x0
 38c:	cmp	x21, #0x2
 390:	b.cc	3b8 <crc32_combine_+0xc4>  // b.lo, b.ul, b.last
 394:	mov	x0, sp
 398:	add	x1, sp, #0x100
 39c:	bl	3e8 <gf2_matrix_square>
 3a0:	tbz	w21, #1, 364 <crc32_combine_+0x70>
 3a4:	mov	x0, sp
 3a8:	mov	x1, x20
 3ac:	bl	430 <gf2_matrix_times>
 3b0:	mov	x20, x0
 3b4:	b	364 <crc32_combine_+0x70>
 3b8:	eor	x20, x20, x19
 3bc:	mov	x0, x20
 3c0:	add	sp, sp, #0x200
 3c4:	ldp	x20, x19, [sp, #32]
 3c8:	ldp	x28, x21, [sp, #16]
 3cc:	ldp	x29, x30, [sp], #48
 3d0:	ret

00000000000003d4 <crc32_combine64>:
 3d4:	stp	x29, x30, [sp, #-16]!
 3d8:	mov	x29, sp
 3dc:	bl	2f4 <crc32_combine_>
 3e0:	ldp	x29, x30, [sp], #16
 3e4:	ret

00000000000003e8 <gf2_matrix_square>:
 3e8:	stp	x29, x30, [sp, #-48]!
 3ec:	str	x21, [sp, #16]
 3f0:	stp	x20, x19, [sp, #32]
 3f4:	mov	x19, x1
 3f8:	mov	x20, x0
 3fc:	mov	x21, xzr
 400:	mov	x29, sp
 404:	ldr	x1, [x19, x21]
 408:	mov	x0, x19
 40c:	bl	430 <gf2_matrix_times>
 410:	str	x0, [x20, x21]
 414:	add	x21, x21, #0x8
 418:	cmp	x21, #0x100
 41c:	b.ne	404 <gf2_matrix_square+0x1c>  // b.any
 420:	ldp	x20, x19, [sp, #32]
 424:	ldr	x21, [sp, #16]
 428:	ldp	x29, x30, [sp], #48
 42c:	ret

0000000000000430 <gf2_matrix_times>:
 430:	mov	x8, xzr
 434:	cbnz	x1, 44c <gf2_matrix_times+0x1c>
 438:	mov	x0, x8
 43c:	ret
 440:	lsr	x1, x1, #1
 444:	add	x0, x0, #0x8
 448:	cbz	x1, 438 <gf2_matrix_times+0x8>
 44c:	tbz	w1, #0, 440 <gf2_matrix_times+0x10>
 450:	ldr	x9, [x0]
 454:	eor	x8, x9, x8
 458:	b	440 <gf2_matrix_times+0x10>

deflate.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <deflateInit_>:
       0:	stp	x29, x30, [sp, #-16]!
       4:	mov	w7, w3
       8:	mov	x6, x2
       c:	mov	w2, #0x8                   	// #8
      10:	mov	w3, #0xf                   	// #15
      14:	mov	w4, #0x8                   	// #8
      18:	mov	w5, wzr
      1c:	mov	x29, sp
      20:	bl	2c <deflateInit2_>
      24:	ldp	x29, x30, [sp], #16
      28:	ret

000000000000002c <deflateInit2_>:
      2c:	stp	x29, x30, [sp, #-96]!
      30:	str	x27, [sp, #16]
      34:	stp	x26, x25, [sp, #32]
      38:	stp	x24, x23, [sp, #48]
      3c:	stp	x22, x21, [sp, #64]
      40:	stp	x20, x19, [sp, #80]
      44:	mov	x29, sp
      48:	cbz	x6, b4 <deflateInit2_+0x88>
      4c:	mov	x19, x0
      50:	cmp	w7, #0x70
      54:	mov	w0, #0xfffffffa            	// #-6
      58:	b.ne	28c <deflateInit2_+0x260>  // b.any
      5c:	ldrb	w8, [x6]
      60:	cmp	w8, #0x31
      64:	b.ne	28c <deflateInit2_+0x260>  // b.any
      68:	cbz	x19, 130 <deflateInit2_+0x104>
      6c:	ldr	x8, [x19, #64]
      70:	mov	w20, w5
      74:	mov	w22, w4
      78:	mov	w21, w2
      7c:	str	xzr, [x19, #48]
      80:	cbz	x8, bc <deflateInit2_+0x90>
      84:	ldr	x8, [x19, #72]
      88:	cbz	x8, d4 <deflateInit2_+0xa8>
      8c:	cmn	w1, #0x1
      90:	mov	w8, #0x6                   	// #6
      94:	csel	w24, w8, w1, eq  // eq = none
      98:	tbnz	w3, #31, e4 <deflateInit2_+0xb8>
      9c:	sub	w8, w3, #0x10
      a0:	cmp	w3, #0xf
      a4:	mov	w9, #0x1                   	// #1
      a8:	csel	w8, w8, w3, gt
      ac:	cinc	w26, w9, gt
      b0:	b	ec <deflateInit2_+0xc0>
      b4:	mov	w0, #0xfffffffa            	// #-6
      b8:	b	28c <deflateInit2_+0x260>
      bc:	adrp	x8, 0 <zcalloc>
      c0:	add	x8, x8, #0x0
      c4:	str	x8, [x19, #64]
      c8:	str	xzr, [x19, #80]
      cc:	ldr	x8, [x19, #72]
      d0:	cbnz	x8, 8c <deflateInit2_+0x60>
      d4:	adrp	x8, 0 <zcfree>
      d8:	add	x8, x8, #0x0
      dc:	str	x8, [x19, #72]
      e0:	b	8c <deflateInit2_+0x60>
      e4:	mov	w26, wzr
      e8:	neg	w8, w3
      ec:	cmp	w20, #0x4
      f0:	mov	w0, #0xfffffffe            	// #-2
      f4:	b.hi	28c <deflateInit2_+0x260>  // b.pmore
      f8:	cmp	w24, #0x9
      fc:	b.hi	28c <deflateInit2_+0x260>  // b.pmore
     100:	cmp	w21, #0x8
     104:	b.ne	28c <deflateInit2_+0x260>  // b.any
     108:	sub	w9, w22, #0x1
     10c:	cmp	w9, #0x8
     110:	b.hi	28c <deflateInit2_+0x260>  // b.pmore
     114:	and	w9, w8, #0xfffffff8
     118:	cmp	w9, #0x8
     11c:	b.ne	28c <deflateInit2_+0x260>  // b.any
     120:	cmp	w8, #0x8
     124:	b.ne	138 <deflateInit2_+0x10c>  // b.any
     128:	cmp	w26, #0x1
     12c:	b.eq	138 <deflateInit2_+0x10c>  // b.none
     130:	mov	w0, #0xfffffffe            	// #-2
     134:	b	28c <deflateInit2_+0x260>
     138:	ldr	x9, [x19, #64]
     13c:	ldr	x0, [x19, #80]
     140:	cmp	w8, #0x8
     144:	mov	w10, #0x9                   	// #9
     148:	mov	w1, #0x1                   	// #1
     14c:	mov	w2, #0x1740                	// #5952
     150:	csel	w27, w10, w8, eq  // eq = none
     154:	mov	w25, #0x1                   	// #1
     158:	blr	x9
     15c:	cbz	x0, 288 <deflateInit2_+0x25c>
     160:	mov	w8, #0x2a                  	// #42
     164:	str	x0, [x19, #56]
     168:	str	w8, [x0, #8]
     16c:	mov	w8, #0xaaab                	// #43691
     170:	lsl	w1, w25, w27
     174:	add	w10, w22, #0x9
     178:	movk	w8, #0xaaaa, lsl #16
     17c:	add	w9, w22, #0x7
     180:	umull	x8, w10, w8
     184:	sub	w10, w1, #0x1
     188:	str	w10, [x0, #88]
     18c:	lsl	w10, w25, w9
     190:	stp	w10, w9, [x0, #132]
     194:	sub	w9, w10, #0x1
     198:	lsr	x8, x8, #33
     19c:	str	x19, [x0]
     1a0:	str	w26, [x0, #48]
     1a4:	str	xzr, [x0, #56]
     1a8:	stp	w1, w27, [x0, #80]
     1ac:	stp	w9, w8, [x0, #140]
     1b0:	mov	x23, x0
     1b4:	ldr	x8, [x19, #64]
     1b8:	ldr	x0, [x19, #80]
     1bc:	mov	w2, #0x2                   	// #2
     1c0:	blr	x8
     1c4:	str	x0, [x23, #96]
     1c8:	ldr	x8, [x19, #64]
     1cc:	ldr	x0, [x19, #80]
     1d0:	ldr	w1, [x23, #80]
     1d4:	mov	w2, #0x2                   	// #2
     1d8:	blr	x8
     1dc:	str	x0, [x23, #112]
     1e0:	ldr	x8, [x19, #64]
     1e4:	ldr	x0, [x19, #80]
     1e8:	ldr	w1, [x23, #132]
     1ec:	mov	w2, #0x2                   	// #2
     1f0:	blr	x8
     1f4:	add	w8, w22, #0x6
     1f8:	lsl	w1, w25, w8
     1fc:	str	x0, [x23, #120]
     200:	str	xzr, [x23, #5944]
     204:	str	w1, [x23, #5896]
     208:	ldr	x8, [x19, #64]
     20c:	ldr	x0, [x19, #80]
     210:	mov	w2, #0x4                   	// #4
     214:	blr	x8
     218:	ldr	w8, [x23, #5896]
     21c:	ldr	x9, [x23, #96]
     220:	lsl	x10, x8, #2
     224:	stp	x0, x10, [x23, #16]
     228:	cbz	x9, 26c <deflateInit2_+0x240>
     22c:	ldr	x9, [x23, #112]
     230:	cbz	x9, 26c <deflateInit2_+0x240>
     234:	cbz	x0, 26c <deflateInit2_+0x240>
     238:	ldr	x9, [x23, #120]
     23c:	cbz	x9, 26c <deflateInit2_+0x240>
     240:	and	w9, w8, #0xfffffffe
     244:	add	x8, x8, x8, lsl #1
     248:	add	x9, x0, x9
     24c:	add	x8, x0, x8
     250:	mov	x0, x19
     254:	stp	w24, w20, [x23, #196]
     258:	str	x9, [x23, #5904]
     25c:	str	x8, [x23, #5888]
     260:	strb	w21, [x23, #72]
     264:	bl	344 <deflateReset>
     268:	b	28c <deflateInit2_+0x260>
     26c:	adrp	x8, 0 <z_errmsg>
     270:	ldr	x8, [x8]
     274:	mov	w9, #0x29a                 	// #666
     278:	mov	x0, x19
     27c:	str	w9, [x23, #8]
     280:	str	x8, [x19, #48]
     284:	bl	2a8 <deflateEnd>
     288:	mov	w0, #0xfffffffc            	// #-4
     28c:	ldp	x20, x19, [sp, #80]
     290:	ldp	x22, x21, [sp, #64]
     294:	ldp	x24, x23, [sp, #48]
     298:	ldp	x26, x25, [sp, #32]
     29c:	ldr	x27, [sp, #16]
     2a0:	ldp	x29, x30, [sp], #96
     2a4:	ret

00000000000002a8 <deflateEnd>:
     2a8:	stp	x29, x30, [sp, #-32]!
     2ac:	stp	x20, x19, [sp, #16]
     2b0:	mov	x29, sp
     2b4:	mov	x19, x0
     2b8:	bl	538 <deflateStateCheck>
     2bc:	cbz	w0, 2c8 <deflateEnd+0x20>
     2c0:	mov	w0, #0xfffffffe            	// #-2
     2c4:	b	338 <deflateEnd+0x90>
     2c8:	ldr	x8, [x19, #56]
     2cc:	ldr	x1, [x8, #16]
     2d0:	ldr	w20, [x8, #8]
     2d4:	cbz	x1, 2e0 <deflateEnd+0x38>
     2d8:	ldp	x8, x0, [x19, #72]
     2dc:	blr	x8
     2e0:	ldr	x8, [x19, #56]
     2e4:	ldr	x1, [x8, #120]
     2e8:	cbz	x1, 2f4 <deflateEnd+0x4c>
     2ec:	ldp	x8, x0, [x19, #72]
     2f0:	blr	x8
     2f4:	ldr	x8, [x19, #56]
     2f8:	ldr	x1, [x8, #112]
     2fc:	cbz	x1, 308 <deflateEnd+0x60>
     300:	ldp	x8, x0, [x19, #72]
     304:	blr	x8
     308:	ldr	x8, [x19, #56]
     30c:	ldr	x1, [x8, #96]
     310:	cbz	x1, 31c <deflateEnd+0x74>
     314:	ldp	x8, x0, [x19, #72]
     318:	blr	x8
     31c:	ldp	x8, x0, [x19, #72]
     320:	ldr	x1, [x19, #56]
     324:	blr	x8
     328:	cmp	w20, #0x71
     32c:	mov	w8, #0xfffffffd            	// #-3
     330:	csel	w0, w8, wzr, eq  // eq = none
     334:	str	xzr, [x19, #56]
     338:	ldp	x20, x19, [sp, #16]
     33c:	ldp	x29, x30, [sp], #32
     340:	ret

0000000000000344 <deflateReset>:
     344:	stp	x29, x30, [sp, #-32]!
     348:	stp	x20, x19, [sp, #16]
     34c:	mov	x29, sp
     350:	mov	x20, x0
     354:	bl	82c <deflateResetKeep>
     358:	mov	w19, w0
     35c:	cbnz	w0, 368 <deflateReset+0x24>
     360:	ldr	x0, [x20, #56]
     364:	bl	8d8 <lm_init>
     368:	mov	w0, w19
     36c:	ldp	x20, x19, [sp, #16]
     370:	ldp	x29, x30, [sp], #32
     374:	ret

0000000000000378 <deflateSetDictionary>:
     378:	stp	x29, x30, [sp, #-80]!
     37c:	str	x25, [sp, #16]
     380:	stp	x24, x23, [sp, #32]
     384:	stp	x22, x21, [sp, #48]
     388:	stp	x20, x19, [sp, #64]
     38c:	mov	x29, sp
     390:	mov	w22, w2
     394:	mov	x21, x1
     398:	mov	x19, x0
     39c:	bl	538 <deflateStateCheck>
     3a0:	mov	w8, w0
     3a4:	mov	w0, #0xfffffffe            	// #-2
     3a8:	cbz	x21, 3e0 <deflateSetDictionary+0x68>
     3ac:	cbnz	w8, 3e0 <deflateSetDictionary+0x68>
     3b0:	ldr	x20, [x19, #56]
     3b4:	ldr	w23, [x20, #48]
     3b8:	cmp	w23, #0x2
     3bc:	b.eq	3dc <deflateSetDictionary+0x64>  // b.none
     3c0:	cmp	w23, #0x1
     3c4:	b.ne	3d4 <deflateSetDictionary+0x5c>  // b.any
     3c8:	ldr	w8, [x20, #8]
     3cc:	cmp	w8, #0x2a
     3d0:	b.ne	3dc <deflateSetDictionary+0x64>  // b.any
     3d4:	ldr	w8, [x20, #180]
     3d8:	cbz	w8, 3f8 <deflateSetDictionary+0x80>
     3dc:	mov	w0, #0xfffffffe            	// #-2
     3e0:	ldp	x20, x19, [sp, #64]
     3e4:	ldp	x22, x21, [sp, #48]
     3e8:	ldp	x24, x23, [sp, #32]
     3ec:	ldr	x25, [sp, #16]
     3f0:	ldp	x29, x30, [sp], #80
     3f4:	ret
     3f8:	cmp	w23, #0x1
     3fc:	b.ne	414 <deflateSetDictionary+0x9c>  // b.any
     400:	ldr	x0, [x19, #96]
     404:	mov	x1, x21
     408:	mov	w2, w22
     40c:	bl	0 <adler32>
     410:	str	x0, [x19, #96]
     414:	ldr	w8, [x20, #80]
     418:	str	wzr, [x20, #48]
     41c:	cmp	w8, w22
     420:	b.hi	464 <deflateSetDictionary+0xec>  // b.pmore
     424:	cbnz	w23, 454 <deflateSetDictionary+0xdc>
     428:	ldr	w8, [x20, #132]
     42c:	ldr	x9, [x20, #120]
     430:	mov	w1, wzr
     434:	sub	w8, w8, #0x1
     438:	lsl	x2, x8, #1
     43c:	strh	wzr, [x9, x2]
     440:	ldr	x0, [x20, #120]
     444:	bl	0 <memset>
     448:	str	wzr, [x20, #172]
     44c:	str	xzr, [x20, #152]
     450:	str	wzr, [x20, #5932]
     454:	ldr	w8, [x20, #80]
     458:	sub	w9, w22, w8
     45c:	add	x21, x21, x9
     460:	mov	w22, w8
     464:	ldr	w24, [x19, #8]
     468:	ldr	x25, [x19]
     46c:	mov	x0, x20
     470:	str	w22, [x19, #8]
     474:	str	x21, [x19]
     478:	bl	5b4 <fill_window>
     47c:	ldr	w9, [x20, #180]
     480:	ldr	w8, [x20, #172]
     484:	cmp	w9, #0x3
     488:	b.cc	504 <deflateSetDictionary+0x18c>  // b.lo, b.ul, b.last
     48c:	mov	w21, #0x2                   	// #2
     490:	ldr	x10, [x20, #96]
     494:	ldp	w12, w11, [x20, #140]
     498:	ldp	x14, x13, [x20, #112]
     49c:	ldr	w15, [x20, #88]
     4a0:	sub	w9, w9, #0x2
     4a4:	ldr	w16, [x20, #128]
     4a8:	add	w17, w8, #0x2
     4ac:	ldrb	w17, [x10, w17, uxtw]
     4b0:	mov	w18, w8
     4b4:	lsl	w16, w16, w11
     4b8:	and	x18, x15, x18
     4bc:	eor	w16, w16, w17
     4c0:	and	x16, x16, x12
     4c4:	str	w16, [x20, #128]
     4c8:	lsl	x16, x16, #1
     4cc:	ldrh	w17, [x13, x16]
     4d0:	subs	w9, w9, #0x1
     4d4:	strh	w17, [x14, x18, lsl #1]
     4d8:	strh	w8, [x13, x16]
     4dc:	add	w8, w8, #0x1
     4e0:	b.ne	4a4 <deflateSetDictionary+0x12c>  // b.any
     4e4:	mov	x0, x20
     4e8:	str	w8, [x20, #172]
     4ec:	str	w21, [x20, #180]
     4f0:	bl	5b4 <fill_window>
     4f4:	ldr	w9, [x20, #180]
     4f8:	ldr	w8, [x20, #172]
     4fc:	cmp	w9, #0x2
     500:	b.hi	490 <deflateSetDictionary+0x118>  // b.pmore
     504:	mov	w0, wzr
     508:	add	w8, w8, w9
     50c:	str	w9, [x20, #5932]
     510:	mov	x9, #0x200000000           	// #8589934592
     514:	mov	w10, #0x2                   	// #2
     518:	str	x8, [x20, #152]
     51c:	stur	x9, [x20, #180]
     520:	str	w10, [x20, #160]
     524:	stp	wzr, w8, [x20, #168]
     528:	str	x25, [x19]
     52c:	str	w24, [x19, #8]
     530:	str	w23, [x20, #48]
     534:	b	3e0 <deflateSetDictionary+0x68>

0000000000000538 <deflateStateCheck>:
     538:	cbz	x0, 560 <deflateStateCheck+0x28>
     53c:	ldr	x8, [x0, #64]
     540:	cbz	x8, 560 <deflateStateCheck+0x28>
     544:	ldr	x8, [x0, #72]
     548:	cbz	x8, 560 <deflateStateCheck+0x28>
     54c:	ldr	x8, [x0, #56]
     550:	cbz	x8, 560 <deflateStateCheck+0x28>
     554:	ldr	x9, [x8]
     558:	cmp	x9, x0
     55c:	b.eq	568 <deflateStateCheck+0x30>  // b.none
     560:	mov	w0, #0x1                   	// #1
     564:	ret
     568:	ldr	w8, [x8, #8]
     56c:	sub	w9, w8, #0x39
     570:	cmp	w9, #0x38
     574:	b.hi	5a0 <deflateStateCheck+0x68>  // b.pmore
     578:	mov	w10, #0x1                   	// #1
     57c:	lsl	x9, x10, x9
     580:	mov	x10, #0x1001                	// #4097
     584:	movk	x10, #0x1, lsl #16
     588:	movk	x10, #0x4004, lsl #32
     58c:	movk	x10, #0x100, lsl #48
     590:	tst	x9, x10
     594:	b.eq	5a0 <deflateStateCheck+0x68>  // b.none
     598:	mov	w0, wzr
     59c:	ret
     5a0:	cmp	w8, #0x29a
     5a4:	b.eq	598 <deflateStateCheck+0x60>  // b.none
     5a8:	cmp	w8, #0x2a
     5ac:	b.ne	560 <deflateStateCheck+0x28>  // b.any
     5b0:	b	598 <deflateStateCheck+0x60>

00000000000005b4 <fill_window>:
     5b4:	stp	x29, x30, [sp, #-48]!
     5b8:	stp	x22, x21, [sp, #16]
     5bc:	stp	x20, x19, [sp, #32]
     5c0:	ldr	w21, [x0, #80]
     5c4:	mov	x19, x0
     5c8:	mov	x29, sp
     5cc:	sub	w22, w21, #0x106
     5d0:	ldr	w8, [x19, #104]
     5d4:	ldr	w9, [x19, #180]
     5d8:	ldr	w10, [x19, #80]
     5dc:	ldr	w11, [x19, #172]
     5e0:	sub	w8, w8, w9
     5e4:	add	w9, w22, w10
     5e8:	cmp	w11, w9
     5ec:	sub	w20, w8, w11
     5f0:	b.cc	62c <fill_window+0x78>  // b.lo, b.ul, b.last
     5f4:	ldr	x0, [x19, #96]
     5f8:	sub	w2, w21, w20
     5fc:	add	x1, x0, x21
     600:	bl	0 <memcpy>
     604:	ldp	w9, w8, [x19, #172]
     608:	ldr	x10, [x19, #152]
     60c:	mov	x0, x19
     610:	sub	w8, w8, w21
     614:	sub	w9, w9, w21
     618:	sub	x10, x10, x21
     61c:	stp	w9, w8, [x19, #172]
     620:	str	x10, [x19, #152]
     624:	bl	1724 <slide_hash>
     628:	add	w20, w20, w21
     62c:	ldr	x0, [x19]
     630:	ldr	w8, [x0, #8]
     634:	cbz	w8, 710 <fill_window+0x15c>
     638:	ldr	x8, [x19, #96]
     63c:	ldr	w9, [x19, #172]
     640:	ldr	w10, [x19, #180]
     644:	mov	w2, w20
     648:	add	x8, x8, x9
     64c:	add	x1, x8, x10
     650:	bl	3024 <read_buf>
     654:	ldr	w8, [x19, #180]
     658:	ldr	w10, [x19, #5932]
     65c:	add	w8, w8, w0
     660:	add	w9, w10, w8
     664:	cmp	w9, #0x3
     668:	str	w8, [x19, #180]
     66c:	b.cc	6fc <fill_window+0x148>  // b.lo, b.ul, b.last
     670:	ldr	w11, [x19, #172]
     674:	ldr	x9, [x19, #96]
     678:	sub	w10, w11, w10
     67c:	ldrb	w13, [x9, w10, uxtw]
     680:	add	w12, w10, #0x1
     684:	str	w13, [x19, #128]
     688:	ldrb	w14, [x9, w12, uxtw]
     68c:	ldp	w12, w11, [x19, #140]
     690:	lsl	w13, w13, w11
     694:	eor	w13, w13, w14
     698:	and	w13, w13, w12
     69c:	str	w13, [x19, #128]
     6a0:	ldr	w13, [x19, #5932]
     6a4:	cbz	w13, 6fc <fill_window+0x148>
     6a8:	ldr	w14, [x19, #128]
     6ac:	add	w15, w10, #0x2
     6b0:	ldrb	w15, [x9, w15, uxtw]
     6b4:	ldp	x17, x16, [x19, #112]
     6b8:	lsl	w14, w14, w11
     6bc:	ldr	w18, [x19, #88]
     6c0:	eor	w14, w14, w15
     6c4:	and	x14, x14, x12
     6c8:	str	w14, [x19, #128]
     6cc:	lsl	x14, x14, #1
     6d0:	sub	w13, w13, #0x1
     6d4:	ldrh	w15, [x16, x14]
     6d8:	add	w0, w13, w8
     6dc:	cmp	w0, #0x2
     6e0:	mov	w0, w10
     6e4:	and	x18, x18, x0
     6e8:	strh	w15, [x17, x18, lsl #1]
     6ec:	strh	w10, [x16, x14]
     6f0:	add	w10, w10, #0x1
     6f4:	str	w13, [x19, #5932]
     6f8:	b.hi	6a0 <fill_window+0xec>  // b.pmore
     6fc:	cmp	w8, #0x105
     700:	b.hi	710 <fill_window+0x15c>  // b.pmore
     704:	ldr	x8, [x19]
     708:	ldr	w8, [x8, #8]
     70c:	cbnz	w8, 5d0 <fill_window+0x1c>
     710:	ldr	x8, [x19, #5944]
     714:	ldr	x10, [x19, #104]
     718:	subs	x9, x10, x8
     71c:	b.ls	794 <fill_window+0x1e0>  // b.plast
     720:	ldr	w11, [x19, #172]
     724:	ldr	w12, [x19, #180]
     728:	add	x21, x12, x11
     72c:	cmp	x8, x21
     730:	b.cs	760 <fill_window+0x1ac>  // b.hs, b.nlast
     734:	ldr	x9, [x19, #96]
     738:	sub	x8, x10, x21
     73c:	cmp	x8, #0x102
     740:	mov	w10, #0x102                 	// #258
     744:	csel	x20, x8, x10, cc  // cc = lo, ul, last
     748:	add	x0, x9, x21
     74c:	mov	w1, wzr
     750:	mov	x2, x20
     754:	bl	0 <memset>
     758:	add	x8, x20, x21
     75c:	b	790 <fill_window+0x1dc>
     760:	add	x10, x21, #0x102
     764:	subs	x10, x10, x8
     768:	b.ls	794 <fill_window+0x1e0>  // b.plast
     76c:	ldr	x11, [x19, #96]
     770:	cmp	x10, x9
     774:	csel	x20, x9, x10, hi  // hi = pmore
     778:	and	x2, x20, #0xffffffff
     77c:	add	x0, x11, x8
     780:	mov	w1, wzr
     784:	bl	0 <memset>
     788:	ldr	x8, [x19, #5944]
     78c:	add	x8, x8, x20
     790:	str	x8, [x19, #5944]
     794:	ldp	x20, x19, [sp, #32]
     798:	ldp	x22, x21, [sp, #16]
     79c:	ldp	x29, x30, [sp], #48
     7a0:	ret

00000000000007a4 <deflateGetDictionary>:
     7a4:	stp	x29, x30, [sp, #-48]!
     7a8:	str	x21, [sp, #16]
     7ac:	stp	x20, x19, [sp, #32]
     7b0:	mov	x29, sp
     7b4:	mov	x19, x2
     7b8:	mov	x20, x1
     7bc:	mov	x21, x0
     7c0:	bl	538 <deflateStateCheck>
     7c4:	cbz	w0, 7d0 <deflateGetDictionary+0x2c>
     7c8:	mov	w0, #0xfffffffe            	// #-2
     7cc:	b	81c <deflateGetDictionary+0x78>
     7d0:	ldr	x8, [x21, #56]
     7d4:	ldr	w9, [x8, #172]
     7d8:	ldr	w10, [x8, #180]
     7dc:	ldr	w11, [x8, #80]
     7e0:	add	w12, w10, w9
     7e4:	cmp	w12, w11
     7e8:	csel	w21, w11, w12, hi  // hi = pmore
     7ec:	cbz	x20, 810 <deflateGetDictionary+0x6c>
     7f0:	cbz	w21, 810 <deflateGetDictionary+0x6c>
     7f4:	ldr	x8, [x8, #96]
     7f8:	mov	w2, w21
     7fc:	mov	x0, x20
     800:	add	x8, x8, x9
     804:	add	x8, x8, x10
     808:	sub	x1, x8, x2
     80c:	bl	0 <memcpy>
     810:	mov	w0, wzr
     814:	cbz	x19, 81c <deflateGetDictionary+0x78>
     818:	str	w21, [x19]
     81c:	ldp	x20, x19, [sp, #32]
     820:	ldr	x21, [sp, #16]
     824:	ldp	x29, x30, [sp], #48
     828:	ret

000000000000082c <deflateResetKeep>:
     82c:	stp	x29, x30, [sp, #-32]!
     830:	stp	x20, x19, [sp, #16]
     834:	mov	x29, sp
     838:	mov	x19, x0
     83c:	bl	538 <deflateStateCheck>
     840:	cbz	w0, 84c <deflateResetKeep+0x20>
     844:	mov	w0, #0xfffffffe            	// #-2
     848:	b	8cc <deflateResetKeep+0xa0>
     84c:	ldr	x20, [x19, #56]
     850:	mov	w8, #0x2                   	// #2
     854:	str	xzr, [x19, #16]
     858:	stp	xzr, xzr, [x19, #40]
     85c:	str	w8, [x19, #88]
     860:	ldr	x9, [x20, #16]
     864:	ldr	w8, [x20, #48]
     868:	stp	x9, xzr, [x20, #32]
     86c:	tbz	w8, #31, 878 <deflateResetKeep+0x4c>
     870:	neg	w8, w8
     874:	str	w8, [x20, #48]
     878:	ldr	w8, [x20, #48]
     87c:	mov	w9, #0x2a                  	// #42
     880:	mov	w10, #0x71                  	// #113
     884:	mov	x0, xzr
     888:	cmp	w8, #0x0
     88c:	csel	w9, w10, w9, eq  // eq = none
     890:	cmp	w8, #0x2
     894:	mov	w8, #0x39                  	// #57
     898:	csel	w8, w8, w9, eq  // eq = none
     89c:	mov	x1, xzr
     8a0:	mov	w2, wzr
     8a4:	str	w8, [x20, #8]
     8a8:	b.ne	8b4 <deflateResetKeep+0x88>  // b.any
     8ac:	bl	0 <crc32>
     8b0:	b	8b8 <deflateResetKeep+0x8c>
     8b4:	bl	0 <adler32>
     8b8:	str	x0, [x19, #96]
     8bc:	mov	x0, x20
     8c0:	str	wzr, [x20, #76]
     8c4:	bl	0 <_tr_init>
     8c8:	mov	w0, wzr
     8cc:	ldp	x20, x19, [sp, #16]
     8d0:	ldp	x29, x30, [sp], #32
     8d4:	ret

00000000000008d8 <lm_init>:
     8d8:	stp	x29, x30, [sp, #-32]!
     8dc:	ldr	w9, [x0, #132]
     8e0:	ldr	w8, [x0, #80]
     8e4:	ldr	x10, [x0, #120]
     8e8:	str	x19, [sp, #16]
     8ec:	sub	w9, w9, #0x1
     8f0:	lsl	x8, x8, #1
     8f4:	lsl	x2, x9, #1
     8f8:	str	x8, [x0, #104]
     8fc:	strh	wzr, [x10, x2]
     900:	mov	x19, x0
     904:	ldr	x0, [x0, #120]
     908:	mov	w1, wzr
     90c:	mov	x29, sp
     910:	bl	0 <memset>
     914:	ldrsw	x8, [x19, #196]
     918:	adrp	x9, 0 <deflateInit_>
     91c:	add	x9, x9, #0x0
     920:	mov	x10, #0x200000000           	// #8589934592
     924:	add	x8, x9, x8, lsl #4
     928:	stur	x10, [x19, #180]
     92c:	ldrh	w9, [x8]
     930:	ldrh	w10, [x8, #4]
     934:	mov	w11, #0x2                   	// #2
     938:	str	w11, [x19, #160]
     93c:	str	xzr, [x19, #152]
     940:	stp	w9, w10, [x19, #204]
     944:	ldrh	w9, [x8, #2]
     948:	ldrh	w8, [x8, #6]
     94c:	str	wzr, [x19, #5932]
     950:	str	xzr, [x19, #168]
     954:	str	wzr, [x19, #128]
     958:	stp	w8, w9, [x19, #188]
     95c:	ldr	x19, [sp, #16]
     960:	ldp	x29, x30, [sp], #32
     964:	ret

0000000000000968 <deflateSetHeader>:
     968:	stp	x29, x30, [sp, #-32]!
     96c:	stp	x20, x19, [sp, #16]
     970:	mov	x29, sp
     974:	mov	x19, x1
     978:	mov	x20, x0
     97c:	bl	538 <deflateStateCheck>
     980:	cbnz	w0, 9a0 <deflateSetHeader+0x38>
     984:	ldr	x8, [x20, #56]
     988:	ldr	w9, [x8, #48]
     98c:	cmp	w9, #0x2
     990:	b.ne	9a0 <deflateSetHeader+0x38>  // b.any
     994:	mov	w0, wzr
     998:	str	x19, [x8, #56]
     99c:	b	9a4 <deflateSetHeader+0x3c>
     9a0:	mov	w0, #0xfffffffe            	// #-2
     9a4:	ldp	x20, x19, [sp, #16]
     9a8:	ldp	x29, x30, [sp], #32
     9ac:	ret

00000000000009b0 <deflatePending>:
     9b0:	stp	x29, x30, [sp, #-48]!
     9b4:	str	x21, [sp, #16]
     9b8:	stp	x20, x19, [sp, #32]
     9bc:	mov	x29, sp
     9c0:	mov	x19, x2
     9c4:	mov	x21, x1
     9c8:	mov	x20, x0
     9cc:	bl	538 <deflateStateCheck>
     9d0:	cbz	w0, 9dc <deflatePending+0x2c>
     9d4:	mov	w0, #0xfffffffe            	// #-2
     9d8:	b	a00 <deflatePending+0x50>
     9dc:	cbz	x21, 9ec <deflatePending+0x3c>
     9e0:	ldr	x8, [x20, #56]
     9e4:	ldr	x8, [x8, #40]
     9e8:	str	w8, [x21]
     9ec:	mov	w0, wzr
     9f0:	cbz	x19, a00 <deflatePending+0x50>
     9f4:	ldr	x8, [x20, #56]
     9f8:	ldr	w8, [x8, #5940]
     9fc:	str	w8, [x19]
     a00:	ldp	x20, x19, [sp, #32]
     a04:	ldr	x21, [sp, #16]
     a08:	ldp	x29, x30, [sp], #48
     a0c:	ret

0000000000000a10 <deflatePrime>:
     a10:	stp	x29, x30, [sp, #-64]!
     a14:	stp	x24, x23, [sp, #16]
     a18:	stp	x22, x21, [sp, #32]
     a1c:	stp	x20, x19, [sp, #48]
     a20:	mov	x29, sp
     a24:	mov	w19, w2
     a28:	mov	w20, w1
     a2c:	mov	x21, x0
     a30:	bl	538 <deflateStateCheck>
     a34:	cbz	w0, a40 <deflatePrime+0x30>
     a38:	mov	w0, #0xfffffffe            	// #-2
     a3c:	b	ab0 <deflatePrime+0xa0>
     a40:	ldr	x21, [x21, #56]
     a44:	ldr	x8, [x21, #32]
     a48:	ldr	x9, [x21, #5904]
     a4c:	add	x8, x8, #0x2
     a50:	cmp	x9, x8
     a54:	b.cs	a60 <deflatePrime+0x50>  // b.hs, b.nlast
     a58:	mov	w0, #0xfffffffb            	// #-5
     a5c:	b	ab0 <deflatePrime+0xa0>
     a60:	mov	w22, #0x10                  	// #16
     a64:	mov	w23, #0xffffffff            	// #-1
     a68:	ldr	w8, [x21, #5940]
     a6c:	ldrh	w9, [x21, #5936]
     a70:	mov	x0, x21
     a74:	sub	w10, w22, w8
     a78:	cmp	w10, w20
     a7c:	csel	w24, w20, w10, gt
     a80:	lsl	w10, w23, w24
     a84:	bic	w10, w19, w10
     a88:	add	w11, w24, w8
     a8c:	lsl	w8, w10, w8
     a90:	orr	w8, w9, w8
     a94:	strh	w8, [x21, #5936]
     a98:	str	w11, [x21, #5940]
     a9c:	bl	0 <_tr_flush_bits>
     aa0:	subs	w20, w20, w24
     aa4:	asr	w19, w19, w24
     aa8:	b.ne	a68 <deflatePrime+0x58>  // b.any
     aac:	mov	w0, wzr
     ab0:	ldp	x20, x19, [sp, #48]
     ab4:	ldp	x22, x21, [sp, #32]
     ab8:	ldp	x24, x23, [sp, #16]
     abc:	ldp	x29, x30, [sp], #64
     ac0:	ret

0000000000000ac4 <deflateParams>:
     ac4:	stp	x29, x30, [sp, #-48]!
     ac8:	stp	x22, x21, [sp, #16]
     acc:	stp	x20, x19, [sp, #32]
     ad0:	mov	x29, sp
     ad4:	mov	w19, w2
     ad8:	mov	w20, w1
     adc:	mov	x21, x0
     ae0:	bl	538 <deflateStateCheck>
     ae4:	cbz	w0, afc <deflateParams+0x38>
     ae8:	mov	w0, #0xfffffffe            	// #-2
     aec:	ldp	x20, x19, [sp, #32]
     af0:	ldp	x22, x21, [sp, #16]
     af4:	ldp	x29, x30, [sp], #48
     af8:	ret
     afc:	cmn	w20, #0x1
     b00:	mov	w8, #0x6                   	// #6
     b04:	csel	w22, w8, w20, eq  // eq = none
     b08:	cmp	w19, #0x4
     b0c:	mov	w0, #0xfffffffe            	// #-2
     b10:	b.hi	aec <deflateParams+0x28>  // b.pmore
     b14:	cmp	w22, #0x9
     b18:	b.hi	aec <deflateParams+0x28>  // b.pmore
     b1c:	ldr	x20, [x21, #56]
     b20:	ldr	w8, [x20, #200]
     b24:	cmp	w8, w19
     b28:	b.ne	b50 <deflateParams+0x8c>  // b.any
     b2c:	ldrsw	x8, [x20, #196]
     b30:	adrp	x9, 0 <deflateInit_>
     b34:	add	x9, x9, #0x0
     b38:	add	x10, x9, w22, sxtw #4
     b3c:	add	x8, x9, x8, lsl #4
     b40:	ldr	x8, [x8, #8]
     b44:	ldr	x9, [x10, #8]
     b48:	cmp	x8, x9
     b4c:	b.eq	b8c <deflateParams+0xc8>  // b.none
     b50:	ldr	x8, [x20, #5944]
     b54:	cbz	x8, b8c <deflateParams+0xc8>
     b58:	mov	w1, #0x5                   	// #5
     b5c:	mov	x0, x21
     b60:	bl	c18 <deflate>
     b64:	cmn	w0, #0x2
     b68:	b.ne	b78 <deflateParams+0xb4>  // b.any
     b6c:	mov	w8, wzr
     b70:	cbz	w8, aec <deflateParams+0x28>
     b74:	b	b8c <deflateParams+0xc8>
     b78:	ldr	w8, [x21, #32]
     b7c:	mov	w0, #0xfffffffb            	// #-5
     b80:	cmp	w8, #0x0
     b84:	cset	w8, ne  // ne = any
     b88:	cbz	w8, aec <deflateParams+0x28>
     b8c:	ldr	w8, [x20, #196]
     b90:	cmp	w8, w22
     b94:	b.eq	c0c <deflateParams+0x148>  // b.none
     b98:	cbnz	w8, be4 <deflateParams+0x120>
     b9c:	ldr	w8, [x20, #5928]
     ba0:	cbz	w8, be4 <deflateParams+0x120>
     ba4:	cmp	w8, #0x1
     ba8:	b.ne	bb8 <deflateParams+0xf4>  // b.any
     bac:	mov	x0, x20
     bb0:	bl	1724 <slide_hash>
     bb4:	b	bc8 <deflateParams+0x104>
     bb8:	ldr	w8, [x20, #132]
     bbc:	ldr	x9, [x20, #120]
     bc0:	sub	w8, w8, #0x1
     bc4:	strh	wzr, [x9, w8, uxtw #1]
     bc8:	ldr	w8, [x20, #132]
     bcc:	ldr	x0, [x20, #120]
     bd0:	mov	w1, wzr
     bd4:	sub	w8, w8, #0x1
     bd8:	lsl	x2, x8, #1
     bdc:	bl	0 <memset>
     be0:	str	wzr, [x20, #5928]
     be4:	adrp	x8, 0 <deflateInit_>
     be8:	add	x8, x8, #0x0
     bec:	add	x8, x8, w22, sxtw #4
     bf0:	ldrh	w9, [x8]
     bf4:	ldrh	w10, [x8, #4]
     bf8:	ldrh	w11, [x8, #2]
     bfc:	ldrh	w8, [x8, #6]
     c00:	str	w22, [x20, #196]
     c04:	stp	w9, w10, [x20, #204]
     c08:	stp	w8, w11, [x20, #188]
     c0c:	mov	w0, wzr
     c10:	str	w19, [x20, #200]
     c14:	b	aec <deflateParams+0x28>

0000000000000c18 <deflate>:
     c18:	stp	x29, x30, [sp, #-80]!
     c1c:	stp	x26, x25, [sp, #16]
     c20:	stp	x24, x23, [sp, #32]
     c24:	stp	x22, x21, [sp, #48]
     c28:	stp	x20, x19, [sp, #64]
     c2c:	mov	x29, sp
     c30:	mov	w21, w1
     c34:	mov	x19, x0
     c38:	bl	538 <deflateStateCheck>
     c3c:	mov	w8, w0
     c40:	cmp	w21, #0x5
     c44:	mov	w0, #0xfffffffe            	// #-2
     c48:	b.hi	c90 <deflate+0x78>  // b.pmore
     c4c:	cbnz	w8, c90 <deflate+0x78>
     c50:	ldr	x8, [x19, #24]
     c54:	cbz	x8, c80 <deflate+0x68>
     c58:	ldr	w8, [x19, #8]
     c5c:	ldr	x20, [x19, #56]
     c60:	cbz	w8, c6c <deflate+0x54>
     c64:	ldr	x9, [x19]
     c68:	cbz	x9, c80 <deflate+0x68>
     c6c:	cmp	w21, #0x4
     c70:	b.eq	ca8 <deflate+0x90>  // b.none
     c74:	ldr	w9, [x20, #8]
     c78:	cmp	w9, #0x29a
     c7c:	b.ne	ca8 <deflate+0x90>  // b.any
     c80:	adrp	x8, 0 <z_errmsg>
     c84:	ldr	x8, [x8]
     c88:	mov	w0, #0xfffffffe            	// #-2
     c8c:	str	x8, [x19, #48]
     c90:	ldp	x20, x19, [sp, #64]
     c94:	ldp	x22, x21, [sp, #48]
     c98:	ldp	x24, x23, [sp, #32]
     c9c:	ldp	x26, x25, [sp, #16]
     ca0:	ldp	x29, x30, [sp], #80
     ca4:	ret
     ca8:	ldr	w9, [x19, #32]
     cac:	cbz	w9, f50 <deflate+0x338>
     cb0:	ldr	x10, [x20, #40]
     cb4:	ldr	w9, [x20, #76]
     cb8:	str	w21, [x20, #76]
     cbc:	cbz	x10, cd4 <deflate+0xbc>
     cc0:	mov	x0, x19
     cc4:	bl	1904 <flush_pending>
     cc8:	ldr	w8, [x19, #32]
     ccc:	cbnz	w8, cd8 <deflate+0xc0>
     cd0:	b	15d8 <deflate+0x9c0>
     cd4:	cbz	w8, f1c <deflate+0x304>
     cd8:	ldr	w8, [x20, #8]
     cdc:	cmp	w8, #0x2a
     ce0:	b.eq	cfc <deflate+0xe4>  // b.none
     ce4:	cmp	w8, #0x29a
     ce8:	b.ne	dbc <deflate+0x1a4>  // b.any
     cec:	ldr	w9, [x19, #8]
     cf0:	cbnz	w9, f50 <deflate+0x338>
     cf4:	cmp	w8, #0x2a
     cf8:	b.ne	dbc <deflate+0x1a4>  // b.any
     cfc:	ldr	w8, [x20, #200]
     d00:	ldr	w9, [x20, #84]
     d04:	mov	w10, #0xffff8800            	// #-30720
     d08:	cmp	w8, #0x1
     d0c:	add	w8, w10, w9, lsl #12
     d10:	b.gt	d20 <deflate+0x108>
     d14:	ldr	w9, [x20, #196]
     d18:	cmp	w9, #0x2
     d1c:	b.ge	fd8 <deflate+0x3c0>  // b.tcont
     d20:	mov	w9, wzr
     d24:	ldr	w10, [x20, #172]
     d28:	orr	w8, w9, w8
     d2c:	orr	w9, w8, #0x20
     d30:	mov	x0, x20
     d34:	cmp	w10, #0x0
     d38:	csel	w8, w8, w9, eq  // eq = none
     d3c:	mov	w9, #0x1085                	// #4229
     d40:	movk	w9, #0x842, lsl #16
     d44:	umull	x9, w8, w9
     d48:	lsr	x9, x9, #32
     d4c:	sub	w10, w8, w9
     d50:	add	w9, w9, w10, lsr #1
     d54:	lsr	w9, w9, #4
     d58:	sub	w9, w9, w9, lsl #5
     d5c:	add	w9, w8, w9
     d60:	orr	w8, w9, w8
     d64:	eor	w1, w8, #0x1f
     d68:	bl	19a4 <putShortMSB>
     d6c:	ldr	w8, [x20, #172]
     d70:	cbz	w8, d90 <deflate+0x178>
     d74:	ldr	x8, [x19, #96]
     d78:	mov	x0, x20
     d7c:	lsr	x1, x8, #16
     d80:	bl	19a4 <putShortMSB>
     d84:	ldrh	w1, [x19, #96]
     d88:	mov	x0, x20
     d8c:	bl	19a4 <putShortMSB>
     d90:	mov	x0, xzr
     d94:	mov	x1, xzr
     d98:	mov	w2, wzr
     d9c:	bl	0 <adler32>
     da0:	str	x0, [x19, #96]
     da4:	mov	w8, #0x71                  	// #113
     da8:	mov	x0, x19
     dac:	str	w8, [x20, #8]
     db0:	bl	1904 <flush_pending>
     db4:	ldr	x8, [x20, #40]
     db8:	cbnz	x8, 15d8 <deflate+0x9c0>
     dbc:	ldr	w8, [x20, #8]
     dc0:	cmp	w8, #0x39
     dc4:	b.ne	109c <deflate+0x484>  // b.any
     dc8:	mov	x0, xzr
     dcc:	mov	x1, xzr
     dd0:	mov	w2, wzr
     dd4:	bl	0 <crc32>
     dd8:	str	x0, [x19, #96]
     ddc:	ldr	x8, [x20, #40]
     de0:	ldr	x9, [x20, #16]
     de4:	add	x10, x8, #0x1
     de8:	str	x10, [x20, #40]
     dec:	mov	w10, #0x1f                  	// #31
     df0:	strb	w10, [x9, x8]
     df4:	ldr	x8, [x20, #40]
     df8:	ldr	x9, [x20, #16]
     dfc:	add	x10, x8, #0x1
     e00:	str	x10, [x20, #40]
     e04:	mov	w10, #0x8b                  	// #139
     e08:	strb	w10, [x9, x8]
     e0c:	ldr	x8, [x20, #40]
     e10:	ldr	x9, [x20, #16]
     e14:	add	x10, x8, #0x1
     e18:	str	x10, [x20, #40]
     e1c:	mov	w10, #0x8                   	// #8
     e20:	strb	w10, [x9, x8]
     e24:	ldr	x8, [x20, #56]
     e28:	cbz	x8, f60 <deflate+0x348>
     e2c:	ldr	w9, [x8]
     e30:	ldr	w10, [x8, #68]
     e34:	ldr	x13, [x20, #40]
     e38:	ldr	x11, [x8, #24]
     e3c:	ldr	x12, [x8, #40]
     e40:	ldr	x8, [x8, #56]
     e44:	cmp	w9, #0x0
     e48:	cset	w9, ne  // ne = any
     e4c:	cmp	w10, #0x0
     e50:	add	x10, x13, #0x1
     e54:	str	x10, [x20, #40]
     e58:	cset	w10, ne  // ne = any
     e5c:	cmp	x11, #0x0
     e60:	bfi	w9, w10, #1, #1
     e64:	cset	w10, ne  // ne = any
     e68:	cmp	x12, #0x0
     e6c:	bfi	w9, w10, #2, #1
     e70:	cset	w10, ne  // ne = any
     e74:	cmp	x8, #0x0
     e78:	ldr	x8, [x20, #16]
     e7c:	bfi	w9, w10, #3, #1
     e80:	cset	w10, ne  // ne = any
     e84:	bfi	w9, w10, #4, #1
     e88:	strb	w9, [x8, x13]
     e8c:	ldr	x8, [x20, #56]
     e90:	ldr	x9, [x20, #40]
     e94:	ldr	x10, [x20, #16]
     e98:	ldr	x8, [x8, #8]
     e9c:	add	x11, x9, #0x1
     ea0:	str	x11, [x20, #40]
     ea4:	strb	w8, [x10, x9]
     ea8:	ldr	x8, [x20, #56]
     eac:	ldr	x9, [x20, #40]
     eb0:	ldr	x10, [x20, #16]
     eb4:	ldr	x8, [x8, #8]
     eb8:	add	x11, x9, #0x1
     ebc:	str	x11, [x20, #40]
     ec0:	lsr	x8, x8, #8
     ec4:	strb	w8, [x10, x9]
     ec8:	ldr	x8, [x20, #56]
     ecc:	ldr	x9, [x20, #40]
     ed0:	ldr	x10, [x20, #16]
     ed4:	ldr	x8, [x8, #8]
     ed8:	add	x11, x9, #0x1
     edc:	str	x11, [x20, #40]
     ee0:	lsr	x8, x8, #16
     ee4:	strb	w8, [x10, x9]
     ee8:	ldr	x8, [x20, #56]
     eec:	ldr	x9, [x20, #40]
     ef0:	ldr	x10, [x20, #16]
     ef4:	ldr	x8, [x8, #8]
     ef8:	add	x11, x9, #0x1
     efc:	str	x11, [x20, #40]
     f00:	lsr	x8, x8, #24
     f04:	strb	w8, [x10, x9]
     f08:	ldr	w8, [x20, #196]
     f0c:	cmp	w8, #0x9
     f10:	b.ne	fe8 <deflate+0x3d0>  // b.any
     f14:	mov	w8, #0x2                   	// #2
     f18:	b	ffc <deflate+0x3e4>
     f1c:	cmp	w21, #0x4
     f20:	mov	w10, #0x9                   	// #9
     f24:	csel	w8, w10, wzr, gt
     f28:	cmp	w9, #0x4
     f2c:	csel	w10, w10, wzr, gt
     f30:	cmp	w21, #0x4
     f34:	b.eq	cd8 <deflate+0xc0>  // b.none
     f38:	lsl	w11, w21, #1
     f3c:	lsl	w9, w9, #1
     f40:	sub	w8, w11, w8
     f44:	sub	w9, w9, w10
     f48:	cmp	w8, w9
     f4c:	b.gt	cd8 <deflate+0xc0>
     f50:	adrp	x8, 0 <z_errmsg>
     f54:	ldr	x8, [x8]
     f58:	mov	w0, #0xfffffffb            	// #-5
     f5c:	b	c8c <deflate+0x74>
     f60:	ldr	x8, [x20, #40]
     f64:	ldr	x9, [x20, #16]
     f68:	add	x10, x8, #0x1
     f6c:	str	x10, [x20, #40]
     f70:	strb	wzr, [x9, x8]
     f74:	ldr	x8, [x20, #40]
     f78:	ldr	x9, [x20, #16]
     f7c:	add	x10, x8, #0x1
     f80:	str	x10, [x20, #40]
     f84:	strb	wzr, [x9, x8]
     f88:	ldr	x8, [x20, #40]
     f8c:	ldr	x9, [x20, #16]
     f90:	add	x10, x8, #0x1
     f94:	str	x10, [x20, #40]
     f98:	strb	wzr, [x9, x8]
     f9c:	ldr	x8, [x20, #40]
     fa0:	ldr	x9, [x20, #16]
     fa4:	add	x10, x8, #0x1
     fa8:	str	x10, [x20, #40]
     fac:	strb	wzr, [x9, x8]
     fb0:	ldr	x8, [x20, #40]
     fb4:	ldr	x9, [x20, #16]
     fb8:	add	x10, x8, #0x1
     fbc:	str	x10, [x20, #40]
     fc0:	strb	wzr, [x9, x8]
     fc4:	ldr	w8, [x20, #196]
     fc8:	cmp	w8, #0x9
     fcc:	b.ne	1474 <deflate+0x85c>  // b.any
     fd0:	mov	w8, #0x2                   	// #2
     fd4:	b	1488 <deflate+0x870>
     fd8:	cmp	w9, #0x6
     fdc:	b.ge	14d0 <deflate+0x8b8>  // b.tcont
     fe0:	mov	w9, #0x40                  	// #64
     fe4:	b	d24 <deflate+0x10c>
     fe8:	ldr	w9, [x20, #200]
     fec:	cmp	w9, #0x1
     ff0:	ccmp	w8, #0x2, #0x8, le
     ff4:	mov	w8, #0x4                   	// #4
     ff8:	csel	w8, w8, wzr, lt  // lt = tstop
     ffc:	ldr	x9, [x20, #40]
    1000:	ldr	x10, [x20, #16]
    1004:	add	x11, x9, #0x1
    1008:	str	x11, [x20, #40]
    100c:	strb	w8, [x10, x9]
    1010:	ldr	x8, [x20, #56]
    1014:	ldr	x9, [x20, #40]
    1018:	ldr	x10, [x20, #16]
    101c:	ldr	w8, [x8, #20]
    1020:	add	x11, x9, #0x1
    1024:	str	x11, [x20, #40]
    1028:	strb	w8, [x10, x9]
    102c:	ldr	x8, [x20, #56]
    1030:	ldr	x9, [x8, #24]
    1034:	cbz	x9, 1070 <deflate+0x458>
    1038:	ldr	x9, [x20, #40]
    103c:	ldr	w8, [x8, #32]
    1040:	ldr	x10, [x20, #16]
    1044:	add	x11, x9, #0x1
    1048:	str	x11, [x20, #40]
    104c:	strb	w8, [x10, x9]
    1050:	ldr	x8, [x20, #56]
    1054:	ldr	x9, [x20, #40]
    1058:	ldr	x10, [x20, #16]
    105c:	ldr	w8, [x8, #32]
    1060:	add	x11, x9, #0x1
    1064:	str	x11, [x20, #40]
    1068:	lsr	w8, w8, #8
    106c:	strb	w8, [x10, x9]
    1070:	ldr	x8, [x20, #56]
    1074:	ldr	w8, [x8, #68]
    1078:	cbz	w8, 1090 <deflate+0x478>
    107c:	ldr	x0, [x19, #96]
    1080:	ldr	x1, [x20, #16]
    1084:	ldr	w2, [x20, #40]
    1088:	bl	0 <crc32>
    108c:	str	x0, [x19, #96]
    1090:	mov	w8, #0x45                  	// #69
    1094:	str	xzr, [x20, #64]
    1098:	str	w8, [x20, #8]
    109c:	ldr	w8, [x20, #8]
    10a0:	cmp	w8, #0x45
    10a4:	b.ne	11e0 <deflate+0x5c8>  // b.any
    10a8:	ldr	x8, [x20, #56]
    10ac:	ldr	x9, [x8, #24]
    10b0:	cbz	x9, 11d8 <deflate+0x5c0>
    10b4:	ldrh	w8, [x8, #32]
    10b8:	ldr	w9, [x20, #64]
    10bc:	ldr	x23, [x20, #40]
    10c0:	mov	w25, #0xffffffff            	// #-1
    10c4:	sub	w24, w8, w9
    10c8:	b	10e0 <deflate+0x4c8>
    10cc:	mov	x23, xzr
    10d0:	sub	w24, w24, w26
    10d4:	mov	w8, #0x1                   	// #1
    10d8:	mov	w0, wzr
    10dc:	tbz	w8, #0, c90 <deflate+0x78>
    10e0:	ldr	x8, [x20, #40]
    10e4:	ldr	x9, [x20, #24]
    10e8:	add	x10, x8, w24, uxtw
    10ec:	cmp	x10, x9
    10f0:	b.ls	117c <deflate+0x564>  // b.plast
    10f4:	ldp	x10, x12, [x20, #56]
    10f8:	ldr	x11, [x20, #16]
    10fc:	sub	x26, x9, x8
    1100:	and	x22, x26, #0xffffffff
    1104:	ldr	x10, [x10, #24]
    1108:	add	x0, x11, x8
    110c:	mov	x2, x22
    1110:	add	x1, x10, x12
    1114:	bl	0 <memcpy>
    1118:	ldr	x8, [x20, #24]
    111c:	cmp	x8, x23
    1120:	str	x8, [x20, #40]
    1124:	b.ls	114c <deflate+0x534>  // b.plast
    1128:	ldr	x9, [x20, #56]
    112c:	ldr	w9, [x9, #68]
    1130:	cbz	w9, 114c <deflate+0x534>
    1134:	ldr	x9, [x20, #16]
    1138:	ldr	x0, [x19, #96]
    113c:	sub	w2, w8, w23
    1140:	add	x1, x9, x23
    1144:	bl	0 <crc32>
    1148:	str	x0, [x19, #96]
    114c:	ldr	x8, [x20, #64]
    1150:	mov	x0, x19
    1154:	add	x8, x8, x22
    1158:	str	x8, [x20, #64]
    115c:	bl	1904 <flush_pending>
    1160:	ldr	x8, [x20, #40]
    1164:	cbz	x8, 10cc <deflate+0x4b4>
    1168:	mov	w8, wzr
    116c:	str	w25, [x20, #76]
    1170:	mov	w0, wzr
    1174:	tbnz	w8, #0, 10e0 <deflate+0x4c8>
    1178:	b	c90 <deflate+0x78>
    117c:	ldp	x9, x11, [x20, #56]
    1180:	ldr	x10, [x20, #16]
    1184:	mov	w22, w24
    1188:	mov	x2, x22
    118c:	ldr	x9, [x9, #24]
    1190:	add	x0, x10, x8
    1194:	add	x1, x9, x11
    1198:	bl	0 <memcpy>
    119c:	ldr	x8, [x20, #40]
    11a0:	add	x8, x8, x22
    11a4:	cmp	x8, x23
    11a8:	str	x8, [x20, #40]
    11ac:	b.ls	11d4 <deflate+0x5bc>  // b.plast
    11b0:	ldr	x9, [x20, #56]
    11b4:	ldr	w9, [x9, #68]
    11b8:	cbz	w9, 11d4 <deflate+0x5bc>
    11bc:	ldr	x9, [x20, #16]
    11c0:	ldr	x0, [x19, #96]
    11c4:	sub	w2, w8, w23
    11c8:	add	x1, x9, x23
    11cc:	bl	0 <crc32>
    11d0:	str	x0, [x19, #96]
    11d4:	str	xzr, [x20, #64]
    11d8:	mov	w8, #0x49                  	// #73
    11dc:	str	w8, [x20, #8]
    11e0:	ldr	w8, [x20, #8]
    11e4:	cmp	w8, #0x49
    11e8:	b.ne	12b8 <deflate+0x6a0>  // b.any
    11ec:	ldr	x8, [x20, #56]
    11f0:	ldr	x8, [x8, #40]
    11f4:	cbz	x8, 12b0 <deflate+0x698>
    11f8:	ldr	x8, [x20, #40]
    11fc:	b	123c <deflate+0x624>
    1200:	mov	x0, x19
    1204:	bl	1904 <flush_pending>
    1208:	ldr	x8, [x20, #40]
    120c:	cbnz	x8, 15d8 <deflate+0x9c0>
    1210:	ldp	x9, x10, [x20, #56]
    1214:	ldr	x11, [x20, #40]
    1218:	ldr	x9, [x9, #40]
    121c:	add	x12, x10, #0x1
    1220:	str	x12, [x20, #64]
    1224:	add	x12, x11, #0x1
    1228:	ldrb	w9, [x9, x10]
    122c:	ldr	x10, [x20, #16]
    1230:	str	x12, [x20, #40]
    1234:	strb	w9, [x10, x11]
    1238:	cbz	w9, 127c <deflate+0x664>
    123c:	ldr	x9, [x20, #40]
    1240:	ldr	x10, [x20, #24]
    1244:	cmp	x9, x10
    1248:	b.ne	1210 <deflate+0x5f8>  // b.any
    124c:	cmp	x9, x8
    1250:	b.ls	1200 <deflate+0x5e8>  // b.plast
    1254:	ldr	x10, [x20, #56]
    1258:	ldr	w10, [x10, #68]
    125c:	cbz	w10, 1200 <deflate+0x5e8>
    1260:	ldr	x10, [x20, #16]
    1264:	ldr	x0, [x19, #96]
    1268:	sub	w2, w9, w8
    126c:	add	x1, x10, x8
    1270:	bl	0 <crc32>
    1274:	str	x0, [x19, #96]
    1278:	b	1200 <deflate+0x5e8>
    127c:	ldr	x9, [x20, #56]
    1280:	ldr	w9, [x9, #68]
    1284:	cbz	w9, 12ac <deflate+0x694>
    1288:	ldr	x9, [x20, #40]
    128c:	cmp	x9, x8
    1290:	b.ls	12ac <deflate+0x694>  // b.plast
    1294:	ldr	x10, [x20, #16]
    1298:	ldr	x0, [x19, #96]
    129c:	sub	w2, w9, w8
    12a0:	add	x1, x10, x8
    12a4:	bl	0 <crc32>
    12a8:	str	x0, [x19, #96]
    12ac:	str	xzr, [x20, #64]
    12b0:	mov	w8, #0x5b                  	// #91
    12b4:	str	w8, [x20, #8]
    12b8:	ldr	w8, [x20, #8]
    12bc:	cmp	w8, #0x5b
    12c0:	b.ne	138c <deflate+0x774>  // b.any
    12c4:	ldr	x8, [x20, #56]
    12c8:	ldr	x8, [x8, #56]
    12cc:	cbz	x8, 1384 <deflate+0x76c>
    12d0:	ldr	x8, [x20, #40]
    12d4:	b	1314 <deflate+0x6fc>
    12d8:	mov	x0, x19
    12dc:	bl	1904 <flush_pending>
    12e0:	ldr	x8, [x20, #40]
    12e4:	cbnz	x8, 15d8 <deflate+0x9c0>
    12e8:	ldp	x9, x10, [x20, #56]
    12ec:	ldr	x11, [x20, #40]
    12f0:	ldr	x9, [x9, #56]
    12f4:	add	x12, x10, #0x1
    12f8:	str	x12, [x20, #64]
    12fc:	add	x12, x11, #0x1
    1300:	ldrb	w9, [x9, x10]
    1304:	ldr	x10, [x20, #16]
    1308:	str	x12, [x20, #40]
    130c:	strb	w9, [x10, x11]
    1310:	cbz	w9, 1354 <deflate+0x73c>
    1314:	ldr	x9, [x20, #40]
    1318:	ldr	x10, [x20, #24]
    131c:	cmp	x9, x10
    1320:	b.ne	12e8 <deflate+0x6d0>  // b.any
    1324:	cmp	x9, x8
    1328:	b.ls	12d8 <deflate+0x6c0>  // b.plast
    132c:	ldr	x10, [x20, #56]
    1330:	ldr	w10, [x10, #68]
    1334:	cbz	w10, 12d8 <deflate+0x6c0>
    1338:	ldr	x10, [x20, #16]
    133c:	ldr	x0, [x19, #96]
    1340:	sub	w2, w9, w8
    1344:	add	x1, x10, x8
    1348:	bl	0 <crc32>
    134c:	str	x0, [x19, #96]
    1350:	b	12d8 <deflate+0x6c0>
    1354:	ldr	x9, [x20, #56]
    1358:	ldr	w9, [x9, #68]
    135c:	cbz	w9, 1384 <deflate+0x76c>
    1360:	ldr	x9, [x20, #40]
    1364:	cmp	x9, x8
    1368:	b.ls	1384 <deflate+0x76c>  // b.plast
    136c:	ldr	x10, [x20, #16]
    1370:	ldr	x0, [x19, #96]
    1374:	sub	w2, w9, w8
    1378:	add	x1, x10, x8
    137c:	bl	0 <crc32>
    1380:	str	x0, [x19, #96]
    1384:	mov	w8, #0x67                  	// #103
    1388:	str	w8, [x20, #8]
    138c:	ldr	w8, [x20, #8]
    1390:	cmp	w8, #0x67
    1394:	b.ne	1428 <deflate+0x810>  // b.any
    1398:	ldr	x8, [x20, #56]
    139c:	ldr	w8, [x8, #68]
    13a0:	cbz	w8, 1410 <deflate+0x7f8>
    13a4:	ldr	x8, [x20, #40]
    13a8:	ldr	x9, [x20, #24]
    13ac:	add	x8, x8, #0x2
    13b0:	cmp	x8, x9
    13b4:	b.ls	13c8 <deflate+0x7b0>  // b.plast
    13b8:	mov	x0, x19
    13bc:	bl	1904 <flush_pending>
    13c0:	ldr	x8, [x20, #40]
    13c4:	cbnz	x8, 15d8 <deflate+0x9c0>
    13c8:	ldr	x8, [x20, #40]
    13cc:	ldr	x9, [x19, #96]
    13d0:	ldr	x10, [x20, #16]
    13d4:	mov	x0, xzr
    13d8:	add	x11, x8, #0x1
    13dc:	str	x11, [x20, #40]
    13e0:	strb	w9, [x10, x8]
    13e4:	ldr	x8, [x19, #96]
    13e8:	ldr	x9, [x20, #40]
    13ec:	ldr	x10, [x20, #16]
    13f0:	mov	x1, xzr
    13f4:	lsr	x8, x8, #8
    13f8:	add	x11, x9, #0x1
    13fc:	mov	w2, wzr
    1400:	str	x11, [x20, #40]
    1404:	strb	w8, [x10, x9]
    1408:	bl	0 <crc32>
    140c:	str	x0, [x19, #96]
    1410:	mov	w8, #0x71                  	// #113
    1414:	mov	x0, x19
    1418:	str	w8, [x20, #8]
    141c:	bl	1904 <flush_pending>
    1420:	ldr	x8, [x20, #40]
    1424:	cbnz	x8, 15d8 <deflate+0x9c0>
    1428:	ldr	w8, [x19, #8]
    142c:	cbnz	w8, 1438 <deflate+0x820>
    1430:	ldr	w8, [x20, #180]
    1434:	cbz	w8, 1558 <deflate+0x940>
    1438:	ldrsw	x8, [x20, #196]
    143c:	cbz	w8, 1464 <deflate+0x84c>
    1440:	ldr	w9, [x20, #200]
    1444:	cmp	w9, #0x3
    1448:	b.eq	14e0 <deflate+0x8c8>  // b.none
    144c:	cmp	w9, #0x2
    1450:	b.ne	14f0 <deflate+0x8d8>  // b.any
    1454:	mov	x0, x20
    1458:	mov	w1, w21
    145c:	bl	1e70 <deflate_huff>
    1460:	b	150c <deflate+0x8f4>
    1464:	mov	x0, x20
    1468:	mov	w1, w21
    146c:	bl	19d4 <deflate_stored>
    1470:	b	150c <deflate+0x8f4>
    1474:	ldr	w9, [x20, #200]
    1478:	cmp	w9, #0x1
    147c:	ccmp	w8, #0x2, #0x8, le
    1480:	mov	w8, #0x4                   	// #4
    1484:	csel	w8, w8, wzr, lt  // lt = tstop
    1488:	ldr	x9, [x20, #40]
    148c:	ldr	x10, [x20, #16]
    1490:	mov	x0, x19
    1494:	add	x11, x9, #0x1
    1498:	str	x11, [x20, #40]
    149c:	strb	w8, [x10, x9]
    14a0:	ldr	x8, [x20, #40]
    14a4:	ldr	x10, [x20, #16]
    14a8:	mov	w9, #0x3                   	// #3
    14ac:	mov	w11, #0x71                  	// #113
    14b0:	add	x12, x8, #0x1
    14b4:	str	x12, [x20, #40]
    14b8:	strb	w9, [x10, x8]
    14bc:	str	w11, [x20, #8]
    14c0:	bl	1904 <flush_pending>
    14c4:	ldr	x8, [x20, #40]
    14c8:	cbnz	x8, 15d8 <deflate+0x9c0>
    14cc:	b	109c <deflate+0x484>
    14d0:	mov	w9, #0xc0                  	// #192
    14d4:	mov	w10, #0x80                  	// #128
    14d8:	csel	w9, w10, w9, eq  // eq = none
    14dc:	b	d24 <deflate+0x10c>
    14e0:	mov	x0, x20
    14e4:	mov	w1, w21
    14e8:	bl	201c <deflate_rle>
    14ec:	b	150c <deflate+0x8f4>
    14f0:	adrp	x9, 0 <deflateInit_>
    14f4:	add	x9, x9, #0x0
    14f8:	add	x8, x9, x8, lsl #4
    14fc:	ldr	x8, [x8, #8]
    1500:	mov	x0, x20
    1504:	mov	w1, w21
    1508:	blr	x8
    150c:	orr	w8, w0, #0x1
    1510:	cmp	w8, #0x3
    1514:	b.ne	1520 <deflate+0x908>  // b.any
    1518:	mov	w8, #0x29a                 	// #666
    151c:	str	w8, [x20, #8]
    1520:	tst	w0, #0xfffffffd
    1524:	b.eq	154c <deflate+0x934>  // b.none
    1528:	cmp	w0, #0x1
    152c:	b.ne	15c8 <deflate+0x9b0>  // b.any
    1530:	cmp	w21, #0x5
    1534:	b.eq	15b8 <deflate+0x9a0>  // b.none
    1538:	mov	x0, x20
    153c:	cmp	w21, #0x1
    1540:	b.ne	156c <deflate+0x954>  // b.any
    1544:	bl	0 <_tr_align>
    1548:	b	15b8 <deflate+0x9a0>
    154c:	ldr	w8, [x19, #32]
    1550:	cbnz	w8, 15d0 <deflate+0x9b8>
    1554:	b	15d8 <deflate+0x9c0>
    1558:	cbz	w21, 15c8 <deflate+0x9b0>
    155c:	ldr	w8, [x20, #8]
    1560:	cmp	w8, #0x29a
    1564:	b.ne	1438 <deflate+0x820>  // b.any
    1568:	b	15c8 <deflate+0x9b0>
    156c:	mov	x1, xzr
    1570:	mov	x2, xzr
    1574:	mov	w3, wzr
    1578:	bl	0 <_tr_stored_block>
    157c:	cmp	w21, #0x3
    1580:	b.ne	15b8 <deflate+0x9a0>  // b.any
    1584:	ldr	w8, [x20, #132]
    1588:	ldr	x9, [x20, #120]
    158c:	mov	w1, wzr
    1590:	sub	w8, w8, #0x1
    1594:	lsl	x2, x8, #1
    1598:	strh	wzr, [x9, x2]
    159c:	ldr	x0, [x20, #120]
    15a0:	bl	0 <memset>
    15a4:	ldr	w8, [x20, #180]
    15a8:	cbnz	w8, 15b8 <deflate+0x9a0>
    15ac:	str	wzr, [x20, #172]
    15b0:	str	xzr, [x20, #152]
    15b4:	str	wzr, [x20, #5932]
    15b8:	mov	x0, x19
    15bc:	bl	1904 <flush_pending>
    15c0:	ldr	w8, [x19, #32]
    15c4:	cbz	w8, 15d8 <deflate+0x9c0>
    15c8:	cmp	w21, #0x4
    15cc:	b.eq	15e8 <deflate+0x9d0>  // b.none
    15d0:	mov	w0, wzr
    15d4:	b	c90 <deflate+0x78>
    15d8:	mov	w8, #0xffffffff            	// #-1
    15dc:	mov	w0, wzr
    15e0:	str	w8, [x20, #76]
    15e4:	b	c90 <deflate+0x78>
    15e8:	ldr	w9, [x20, #48]
    15ec:	cmp	w9, #0x1
    15f0:	b.lt	16d8 <deflate+0xac0>  // b.tstop
    15f4:	ldr	x8, [x19, #96]
    15f8:	cmp	w9, #0x2
    15fc:	b.ne	16e0 <deflate+0xac8>  // b.any
    1600:	ldr	x9, [x20, #40]
    1604:	ldr	x10, [x20, #16]
    1608:	add	x11, x9, #0x1
    160c:	str	x11, [x20, #40]
    1610:	strb	w8, [x10, x9]
    1614:	ldr	x8, [x19, #96]
    1618:	ldr	x9, [x20, #40]
    161c:	ldr	x10, [x20, #16]
    1620:	lsr	x8, x8, #8
    1624:	add	x11, x9, #0x1
    1628:	str	x11, [x20, #40]
    162c:	strb	w8, [x10, x9]
    1630:	ldr	x8, [x19, #96]
    1634:	ldr	x9, [x20, #40]
    1638:	ldr	x10, [x20, #16]
    163c:	lsr	x8, x8, #16
    1640:	add	x11, x9, #0x1
    1644:	str	x11, [x20, #40]
    1648:	strb	w8, [x10, x9]
    164c:	ldr	x8, [x19, #96]
    1650:	ldr	x9, [x20, #40]
    1654:	ldr	x10, [x20, #16]
    1658:	lsr	x8, x8, #24
    165c:	add	x11, x9, #0x1
    1660:	str	x11, [x20, #40]
    1664:	strb	w8, [x10, x9]
    1668:	ldr	x8, [x20, #40]
    166c:	ldr	x9, [x19, #16]
    1670:	ldr	x10, [x20, #16]
    1674:	add	x11, x8, #0x1
    1678:	str	x11, [x20, #40]
    167c:	strb	w9, [x10, x8]
    1680:	ldr	x8, [x19, #16]
    1684:	ldr	x9, [x20, #40]
    1688:	ldr	x10, [x20, #16]
    168c:	lsr	x8, x8, #8
    1690:	add	x11, x9, #0x1
    1694:	str	x11, [x20, #40]
    1698:	strb	w8, [x10, x9]
    169c:	ldr	x8, [x19, #16]
    16a0:	ldr	x9, [x20, #40]
    16a4:	ldr	x10, [x20, #16]
    16a8:	lsr	x8, x8, #16
    16ac:	add	x11, x9, #0x1
    16b0:	str	x11, [x20, #40]
    16b4:	strb	w8, [x10, x9]
    16b8:	ldr	x8, [x19, #16]
    16bc:	ldr	x9, [x20, #40]
    16c0:	ldr	x10, [x20, #16]
    16c4:	lsr	x8, x8, #24
    16c8:	add	x11, x9, #0x1
    16cc:	str	x11, [x20, #40]
    16d0:	strb	w8, [x10, x9]
    16d4:	b	16f8 <deflate+0xae0>
    16d8:	mov	w0, #0x1                   	// #1
    16dc:	b	c90 <deflate+0x78>
    16e0:	lsr	x1, x8, #16
    16e4:	mov	x0, x20
    16e8:	bl	19a4 <putShortMSB>
    16ec:	ldrh	w1, [x19, #96]
    16f0:	mov	x0, x20
    16f4:	bl	19a4 <putShortMSB>
    16f8:	mov	x0, x19
    16fc:	bl	1904 <flush_pending>
    1700:	ldr	w8, [x20, #48]
    1704:	cmp	w8, #0x1
    1708:	b.lt	1714 <deflate+0xafc>  // b.tstop
    170c:	neg	w8, w8
    1710:	str	w8, [x20, #48]
    1714:	ldr	x8, [x20, #40]
    1718:	cmp	x8, #0x0
    171c:	cset	w0, eq  // eq = none
    1720:	b	c90 <deflate+0x78>

0000000000001724 <slide_hash>:
    1724:	ldr	x10, [x0, #120]
    1728:	ldr	w8, [x0, #80]
    172c:	ldr	w9, [x0, #132]
    1730:	sub	x10, x10, #0x2
    1734:	lsl	x11, x9, #1
    1738:	ldrh	w12, [x10, x11]
    173c:	sub	x9, x9, #0x1
    1740:	subs	w12, w12, w8
    1744:	csel	w12, wzr, w12, cc  // cc = lo, ul, last
    1748:	strh	w12, [x10, x11]
    174c:	cbnz	w9, 1734 <slide_hash+0x10>
    1750:	ldr	x9, [x0, #112]
    1754:	mov	x10, x8
    1758:	sub	x9, x9, #0x2
    175c:	lsl	x11, x10, #1
    1760:	ldrh	w12, [x9, x11]
    1764:	sub	x10, x10, #0x1
    1768:	subs	w12, w12, w8
    176c:	csel	w12, wzr, w12, cc  // cc = lo, ul, last
    1770:	strh	w12, [x9, x11]
    1774:	cbnz	w10, 175c <slide_hash+0x38>
    1778:	ret

000000000000177c <deflateTune>:
    177c:	stp	x29, x30, [sp, #-64]!
    1780:	str	x23, [sp, #16]
    1784:	stp	x22, x21, [sp, #32]
    1788:	stp	x20, x19, [sp, #48]
    178c:	mov	x29, sp
    1790:	mov	w19, w4
    1794:	mov	w20, w3
    1798:	mov	w21, w2
    179c:	mov	w22, w1
    17a0:	mov	x23, x0
    17a4:	bl	538 <deflateStateCheck>
    17a8:	cbz	w0, 17b4 <deflateTune+0x38>
    17ac:	mov	w0, #0xfffffffe            	// #-2
    17b0:	b	17c0 <deflateTune+0x44>
    17b4:	ldr	x8, [x23, #56]
    17b8:	stp	w22, w20, [x8, #204]
    17bc:	stp	w19, w21, [x8, #188]
    17c0:	ldp	x20, x19, [sp, #48]
    17c4:	ldp	x22, x21, [sp, #32]
    17c8:	ldr	x23, [sp, #16]
    17cc:	ldp	x29, x30, [sp], #64
    17d0:	ret

00000000000017d4 <deflateBound>:
    17d4:	stp	x29, x30, [sp, #-48]!
    17d8:	add	x8, x1, #0x7
    17dc:	add	x8, x1, x8, lsr #3
    17e0:	add	x9, x1, #0x3f
    17e4:	str	x21, [sp, #16]
    17e8:	stp	x20, x19, [sp, #32]
    17ec:	mov	x29, sp
    17f0:	mov	x19, x1
    17f4:	mov	x20, x0
    17f8:	add	x21, x8, x9, lsr #6
    17fc:	bl	538 <deflateStateCheck>
    1800:	cbz	w0, 180c <deflateBound+0x38>
    1804:	add	x0, x21, #0xb
    1808:	b	18e4 <deflateBound+0x110>
    180c:	ldr	x8, [x20, #56]
    1810:	ldr	w9, [x8, #48]
    1814:	cbz	w9, 1840 <deflateBound+0x6c>
    1818:	cmp	w9, #0x2
    181c:	b.eq	1848 <deflateBound+0x74>  // b.none
    1820:	cmp	w9, #0x1
    1824:	b.ne	18a0 <deflateBound+0xcc>  // b.any
    1828:	ldr	w9, [x8, #172]
    182c:	mov	w10, #0xa                   	// #10
    1830:	cmp	w9, #0x0
    1834:	mov	w9, #0x6                   	// #6
    1838:	csel	x9, x9, x10, eq  // eq = none
    183c:	b	18ac <deflateBound+0xd8>
    1840:	mov	x9, xzr
    1844:	b	18ac <deflateBound+0xd8>
    1848:	ldr	x9, [x8, #56]
    184c:	cbz	x9, 18a8 <deflateBound+0xd4>
    1850:	ldr	x10, [x9, #24]
    1854:	cbz	x10, 18f4 <deflateBound+0x120>
    1858:	ldr	w10, [x9, #32]
    185c:	add	w10, w10, #0x2
    1860:	add	x10, x10, #0x12
    1864:	ldr	x11, [x9, #40]
    1868:	cbz	x11, 1878 <deflateBound+0xa4>
    186c:	ldrb	w12, [x11], #1
    1870:	add	x10, x10, #0x1
    1874:	cbnz	w12, 186c <deflateBound+0x98>
    1878:	ldr	x11, [x9, #56]
    187c:	cbz	x11, 188c <deflateBound+0xb8>
    1880:	ldrb	w12, [x11], #1
    1884:	add	x10, x10, #0x1
    1888:	cbnz	w12, 1880 <deflateBound+0xac>
    188c:	ldr	w9, [x9, #68]
    1890:	add	x11, x10, #0x2
    1894:	cmp	w9, #0x0
    1898:	csel	x9, x10, x11, eq  // eq = none
    189c:	b	18ac <deflateBound+0xd8>
    18a0:	mov	w9, #0x6                   	// #6
    18a4:	b	18ac <deflateBound+0xd8>
    18a8:	mov	w9, #0x12                  	// #18
    18ac:	ldr	w10, [x8, #84]
    18b0:	cmp	w10, #0xf
    18b4:	b.ne	18dc <deflateBound+0x108>  // b.any
    18b8:	ldr	w8, [x8, #136]
    18bc:	cmp	w8, #0xf
    18c0:	b.ne	18dc <deflateBound+0x108>  // b.any
    18c4:	add	x8, x19, x19, lsr #12
    18c8:	add	x8, x8, x19, lsr #14
    18cc:	add	x8, x8, x19, lsr #25
    18d0:	add	x8, x8, x9
    18d4:	add	x0, x8, #0x7
    18d8:	b	18e4 <deflateBound+0x110>
    18dc:	add	x8, x21, #0x5
    18e0:	add	x0, x8, x9
    18e4:	ldp	x20, x19, [sp, #32]
    18e8:	ldr	x21, [sp, #16]
    18ec:	ldp	x29, x30, [sp], #48
    18f0:	ret
    18f4:	mov	w10, #0x12                  	// #18
    18f8:	ldr	x11, [x9, #40]
    18fc:	cbnz	x11, 186c <deflateBound+0x98>
    1900:	b	1878 <deflateBound+0xa4>

0000000000001904 <flush_pending>:
    1904:	stp	x29, x30, [sp, #-48]!
    1908:	stp	x22, x21, [sp, #16]
    190c:	stp	x20, x19, [sp, #32]
    1910:	ldr	x19, [x0, #56]
    1914:	mov	x20, x0
    1918:	mov	x29, sp
    191c:	mov	x0, x19
    1920:	bl	0 <_tr_flush_bits>
    1924:	ldr	w8, [x19, #40]
    1928:	ldr	w9, [x20, #32]
    192c:	cmp	w9, w8
    1930:	csel	w22, w9, w8, cc  // cc = lo, ul, last
    1934:	cbz	w22, 1994 <flush_pending+0x90>
    1938:	ldr	x0, [x20, #24]
    193c:	ldr	x1, [x19, #32]
    1940:	mov	w21, w22
    1944:	mov	x2, x21
    1948:	bl	0 <memcpy>
    194c:	ldr	x8, [x20, #24]
    1950:	add	x8, x8, x21
    1954:	str	x8, [x20, #24]
    1958:	ldr	x8, [x19, #32]
    195c:	add	x8, x8, x21
    1960:	str	x8, [x19, #32]
    1964:	ldr	x8, [x20, #40]
    1968:	ldr	w9, [x20, #32]
    196c:	add	x8, x8, x21
    1970:	sub	w9, w9, w22
    1974:	str	x8, [x20, #40]
    1978:	str	w9, [x20, #32]
    197c:	ldr	x8, [x19, #40]
    1980:	subs	x8, x8, x21
    1984:	str	x8, [x19, #40]
    1988:	b.ne	1994 <flush_pending+0x90>  // b.any
    198c:	ldr	x8, [x19, #16]
    1990:	str	x8, [x19, #32]
    1994:	ldp	x20, x19, [sp, #32]
    1998:	ldp	x22, x21, [sp, #16]
    199c:	ldp	x29, x30, [sp], #48
    19a0:	ret

00000000000019a4 <putShortMSB>:
    19a4:	ldr	x8, [x0, #40]
    19a8:	ldr	x9, [x0, #16]
    19ac:	lsr	w10, w1, #8
    19b0:	add	x11, x8, #0x1
    19b4:	str	x11, [x0, #40]
    19b8:	strb	w10, [x9, x8]
    19bc:	ldr	x8, [x0, #40]
    19c0:	ldr	x9, [x0, #16]
    19c4:	add	x10, x8, #0x1
    19c8:	str	x10, [x0, #40]
    19cc:	strb	w1, [x9, x8]
    19d0:	ret

00000000000019d4 <deflate_stored>:
    19d4:	stp	x29, x30, [sp, #-80]!
    19d8:	stp	x26, x25, [sp, #16]
    19dc:	stp	x24, x23, [sp, #32]
    19e0:	stp	x22, x21, [sp, #48]
    19e4:	stp	x20, x19, [sp, #64]
    19e8:	ldr	x9, [x0]
    19ec:	ldr	x8, [x0, #24]
    19f0:	ldr	w10, [x0, #80]
    19f4:	mov	w20, w1
    19f8:	ldr	w24, [x9, #8]
    19fc:	sub	x8, x8, #0x5
    1a00:	cmp	x8, x10
    1a04:	mov	x19, x0
    1a08:	csel	w25, w10, w8, hi  // hi = pmore
    1a0c:	mov	w26, #0xffff                	// #65535
    1a10:	mov	x29, sp
    1a14:	b	1a1c <deflate_stored+0x48>
    1a18:	cbnz	w21, 1bb4 <deflate_stored+0x1e0>
    1a1c:	ldr	x8, [x19]
    1a20:	ldr	w9, [x19, #5940]
    1a24:	ldr	w10, [x8, #32]
    1a28:	add	w9, w9, #0x2a
    1a2c:	asr	w9, w9, #3
    1a30:	subs	w9, w10, w9
    1a34:	b.cc	1bb0 <deflate_stored+0x1dc>  // b.lo, b.ul, b.last
    1a38:	ldr	w10, [x19, #172]
    1a3c:	ldr	w11, [x19, #152]
    1a40:	ldr	w8, [x8, #8]
    1a44:	sub	w23, w10, w11
    1a48:	add	x10, x23, x8
    1a4c:	add	w8, w23, w8
    1a50:	cmp	x10, x26
    1a54:	csel	w10, w8, w26, cc  // cc = lo, ul, last
    1a58:	cmp	w10, w9
    1a5c:	csel	w22, w9, w10, hi  // hi = pmore
    1a60:	cmp	w22, w25
    1a64:	b.cs	1a90 <deflate_stored+0xbc>  // b.hs, b.nlast
    1a68:	cmp	w20, #0x4
    1a6c:	cset	w9, ne  // ne = any
    1a70:	cmp	w22, #0x0
    1a74:	cset	w10, eq  // eq = none
    1a78:	cmp	w22, w8
    1a7c:	mov	w21, wzr
    1a80:	b.ne	1bb4 <deflate_stored+0x1e0>  // b.any
    1a84:	cbz	w20, 1bb4 <deflate_stored+0x1e0>
    1a88:	and	w9, w9, w10
    1a8c:	cbnz	w9, 1bb4 <deflate_stored+0x1e0>
    1a90:	cmp	w20, #0x4
    1a94:	cset	w9, eq  // eq = none
    1a98:	cmp	w22, w8
    1a9c:	cset	w8, eq  // eq = none
    1aa0:	and	w21, w9, w8
    1aa4:	mov	x0, x19
    1aa8:	mov	x1, xzr
    1aac:	mov	x2, xzr
    1ab0:	mov	w3, w21
    1ab4:	bl	0 <_tr_stored_block>
    1ab8:	ldr	x8, [x19, #16]
    1abc:	ldr	x9, [x19, #40]
    1ac0:	lsr	w10, w22, #8
    1ac4:	add	x8, x9, x8
    1ac8:	sturb	w22, [x8, #-4]
    1acc:	ldr	x8, [x19, #16]
    1ad0:	ldr	x9, [x19, #40]
    1ad4:	add	x8, x9, x8
    1ad8:	sturb	w10, [x8, #-3]
    1adc:	ldr	x8, [x19, #16]
    1ae0:	ldr	x9, [x19, #40]
    1ae4:	mvn	w10, w22
    1ae8:	add	x8, x9, x8
    1aec:	sturb	w10, [x8, #-2]
    1af0:	ldr	x8, [x19, #16]
    1af4:	ldr	x9, [x19, #40]
    1af8:	lsr	w10, w10, #8
    1afc:	add	x8, x9, x8
    1b00:	sturb	w10, [x8, #-1]
    1b04:	ldr	x0, [x19]
    1b08:	bl	1904 <flush_pending>
    1b0c:	cbz	w23, 1b6c <deflate_stored+0x198>
    1b10:	ldr	x8, [x19]
    1b14:	ldr	x9, [x19, #96]
    1b18:	ldr	x10, [x19, #152]
    1b1c:	cmp	w23, w22
    1b20:	ldr	x0, [x8, #24]
    1b24:	csel	w23, w22, w23, hi  // hi = pmore
    1b28:	add	x1, x9, x10
    1b2c:	mov	x2, x23
    1b30:	bl	0 <memcpy>
    1b34:	ldr	x8, [x19]
    1b38:	sub	w22, w22, w23
    1b3c:	ldr	x9, [x8, #24]
    1b40:	ldr	w10, [x8, #32]
    1b44:	ldr	x11, [x8, #40]
    1b48:	add	x9, x9, x23
    1b4c:	sub	w10, w10, w23
    1b50:	add	x11, x11, x23
    1b54:	str	x9, [x8, #24]
    1b58:	str	w10, [x8, #32]
    1b5c:	str	x11, [x8, #40]
    1b60:	ldr	x8, [x19, #152]
    1b64:	add	x8, x8, x23
    1b68:	str	x8, [x19, #152]
    1b6c:	cbz	w22, 1a18 <deflate_stored+0x44>
    1b70:	ldr	x0, [x19]
    1b74:	mov	w2, w22
    1b78:	ldr	x1, [x0, #24]
    1b7c:	bl	3024 <read_buf>
    1b80:	ldr	x8, [x19]
    1b84:	mov	w12, w22
    1b88:	ldr	x9, [x8, #24]
    1b8c:	ldr	w10, [x8, #32]
    1b90:	ldr	x11, [x8, #40]
    1b94:	add	x9, x9, x12
    1b98:	sub	w10, w10, w22
    1b9c:	add	x11, x11, x12
    1ba0:	str	x9, [x8, #24]
    1ba4:	str	w10, [x8, #32]
    1ba8:	str	x11, [x8, #40]
    1bac:	b	1a18 <deflate_stored+0x44>
    1bb0:	mov	w21, wzr
    1bb4:	ldr	x8, [x19]
    1bb8:	ldr	w9, [x8, #8]
    1bbc:	subs	w23, w24, w9
    1bc0:	b.eq	1c84 <deflate_stored+0x2b0>  // b.none
    1bc4:	ldr	w2, [x19, #80]
    1bc8:	cmp	w23, w2
    1bcc:	b.cs	1c40 <deflate_stored+0x26c>  // b.hs, b.nlast
    1bd0:	ldr	x9, [x19, #104]
    1bd4:	ldr	w8, [x19, #172]
    1bd8:	mov	w22, w23
    1bdc:	sub	x9, x9, x8
    1be0:	cmp	x9, x22
    1be4:	b.hi	1c14 <deflate_stored+0x240>  // b.pmore
    1be8:	ldr	x0, [x19, #96]
    1bec:	sub	w8, w8, w2
    1bf0:	str	w8, [x19, #172]
    1bf4:	add	x1, x0, x2
    1bf8:	mov	x2, x8
    1bfc:	bl	0 <memcpy>
    1c00:	ldr	w8, [x19, #5928]
    1c04:	cmp	w8, #0x1
    1c08:	b.hi	1c14 <deflate_stored+0x240>  // b.pmore
    1c0c:	add	w8, w8, #0x1
    1c10:	str	w8, [x19, #5928]
    1c14:	ldr	x8, [x19]
    1c18:	ldr	x9, [x19, #96]
    1c1c:	ldr	w10, [x19, #172]
    1c20:	mov	x2, x22
    1c24:	ldr	x8, [x8]
    1c28:	add	x0, x9, x10
    1c2c:	sub	x1, x8, x22
    1c30:	bl	0 <memcpy>
    1c34:	ldr	w8, [x19, #172]
    1c38:	add	w8, w8, w23
    1c3c:	b	1c5c <deflate_stored+0x288>
    1c40:	mov	w9, #0x2                   	// #2
    1c44:	str	w9, [x19, #5928]
    1c48:	ldr	x8, [x8]
    1c4c:	ldr	x0, [x19, #96]
    1c50:	sub	x1, x8, x2
    1c54:	bl	0 <memcpy>
    1c58:	ldr	w8, [x19, #80]
    1c5c:	ldr	w9, [x19, #80]
    1c60:	ldr	w10, [x19, #5932]
    1c64:	str	w8, [x19, #172]
    1c68:	mov	w8, w8
    1c6c:	str	x8, [x19, #152]
    1c70:	sub	w8, w9, w10
    1c74:	cmp	w23, w8
    1c78:	csel	w8, w8, w23, hi  // hi = pmore
    1c7c:	add	w8, w8, w10
    1c80:	str	w8, [x19, #5932]
    1c84:	ldr	x9, [x19, #5944]
    1c88:	ldr	w8, [x19, #172]
    1c8c:	cmp	x9, x8
    1c90:	b.cs	1c98 <deflate_stored+0x2c4>  // b.hs, b.nlast
    1c94:	str	x8, [x19, #5944]
    1c98:	cbz	w21, 1ca4 <deflate_stored+0x2d0>
    1c9c:	mov	w0, #0x3                   	// #3
    1ca0:	b	1e58 <deflate_stored+0x484>
    1ca4:	tst	w20, #0xfffffffb
    1ca8:	b.eq	1ccc <deflate_stored+0x2f8>  // b.none
    1cac:	ldr	x9, [x19]
    1cb0:	ldr	w9, [x9, #8]
    1cb4:	cbnz	w9, 1ccc <deflate_stored+0x2f8>
    1cb8:	ldr	x9, [x19, #152]
    1cbc:	cmp	x9, x8
    1cc0:	b.ne	1ccc <deflate_stored+0x2f8>  // b.any
    1cc4:	mov	w0, #0x1                   	// #1
    1cc8:	b	1e58 <deflate_stored+0x484>
    1ccc:	ldr	x9, [x19]
    1cd0:	ldr	w10, [x19, #104]
    1cd4:	mvn	w11, w8
    1cd8:	ldr	w9, [x9, #8]
    1cdc:	add	w21, w10, w11
    1ce0:	cmp	w9, w21
    1ce4:	b.ls	1d2c <deflate_stored+0x358>  // b.plast
    1ce8:	ldr	x10, [x19, #152]
    1cec:	ldr	w9, [x19, #80]
    1cf0:	subs	x10, x10, x9
    1cf4:	b.lt	1d2c <deflate_stored+0x358>  // b.tstop
    1cf8:	ldr	x0, [x19, #96]
    1cfc:	sub	w2, w8, w9
    1d00:	str	x10, [x19, #152]
    1d04:	str	w2, [x19, #172]
    1d08:	add	x1, x0, x9
    1d0c:	bl	0 <memcpy>
    1d10:	ldr	w8, [x19, #5928]
    1d14:	cmp	w8, #0x1
    1d18:	b.hi	1d24 <deflate_stored+0x350>  // b.pmore
    1d1c:	add	w8, w8, #0x1
    1d20:	str	w8, [x19, #5928]
    1d24:	ldr	w8, [x19, #80]
    1d28:	add	w21, w8, w21
    1d2c:	ldr	x0, [x19]
    1d30:	ldr	w8, [x0, #8]
    1d34:	cmp	w21, w8
    1d38:	csel	w21, w8, w21, hi  // hi = pmore
    1d3c:	cbz	w21, 1d60 <deflate_stored+0x38c>
    1d40:	ldr	x8, [x19, #96]
    1d44:	ldr	w9, [x19, #172]
    1d48:	mov	w2, w21
    1d4c:	add	x1, x8, x9
    1d50:	bl	3024 <read_buf>
    1d54:	ldr	w8, [x19, #172]
    1d58:	add	w8, w8, w21
    1d5c:	str	w8, [x19, #172]
    1d60:	ldr	x8, [x19, #5944]
    1d64:	ldr	w10, [x19, #172]
    1d68:	cmp	x8, x10
    1d6c:	b.cs	1d74 <deflate_stored+0x3a0>  // b.hs, b.nlast
    1d70:	str	x10, [x19, #5944]
    1d74:	ldr	w9, [x19, #5940]
    1d78:	ldr	x11, [x19, #24]
    1d7c:	ldr	w13, [x19, #80]
    1d80:	mov	w12, #0xffff                	// #65535
    1d84:	add	w9, w9, #0x2a
    1d88:	asr	w9, w9, #3
    1d8c:	ldr	x8, [x19, #152]
    1d90:	sub	x9, x11, x9
    1d94:	cmp	x9, x12
    1d98:	csel	w9, w9, w12, cc  // cc = lo, ul, last
    1d9c:	cmp	w13, w9
    1da0:	csel	w11, w13, w9, cc  // cc = lo, ul, last
    1da4:	sub	w10, w10, w8
    1da8:	cmp	w10, w11
    1dac:	b.cs	1de8 <deflate_stored+0x414>  // b.hs, b.nlast
    1db0:	cmp	w10, #0x0
    1db4:	cset	w11, ne  // ne = any
    1db8:	cmp	w20, #0x4
    1dbc:	mov	w21, wzr
    1dc0:	cset	w12, eq  // eq = none
    1dc4:	cbz	w20, 1e4c <deflate_stored+0x478>
    1dc8:	orr	w11, w12, w11
    1dcc:	cbz	w11, 1e4c <deflate_stored+0x478>
    1dd0:	cmp	w10, w9
    1dd4:	mov	w21, wzr
    1dd8:	b.hi	1e4c <deflate_stored+0x478>  // b.pmore
    1ddc:	ldr	x11, [x19]
    1de0:	ldr	w11, [x11, #8]
    1de4:	cbnz	w11, 1e4c <deflate_stored+0x478>
    1de8:	cmp	w10, w9
    1dec:	csel	w11, w9, w10, hi  // hi = pmore
    1df0:	cmp	w20, #0x4
    1df4:	b.ne	1e18 <deflate_stored+0x444>  // b.any
    1df8:	ldr	x12, [x19]
    1dfc:	ldr	w12, [x12, #8]
    1e00:	cmp	w12, #0x0
    1e04:	cset	w12, eq  // eq = none
    1e08:	cmp	w10, w9
    1e0c:	cset	w9, ls  // ls = plast
    1e10:	and	w21, w9, w12
    1e14:	b	1e1c <deflate_stored+0x448>
    1e18:	mov	w21, wzr
    1e1c:	ldr	x9, [x19, #96]
    1e20:	mov	w20, w11
    1e24:	mov	x0, x19
    1e28:	mov	x2, x20
    1e2c:	add	x1, x9, x8
    1e30:	mov	w3, w21
    1e34:	bl	0 <_tr_stored_block>
    1e38:	ldr	x8, [x19, #152]
    1e3c:	ldr	x0, [x19]
    1e40:	add	x8, x8, x20
    1e44:	str	x8, [x19, #152]
    1e48:	bl	1904 <flush_pending>
    1e4c:	cmp	w21, #0x0
    1e50:	mov	w8, #0x2                   	// #2
    1e54:	csel	w0, w8, wzr, ne  // ne = any
    1e58:	ldp	x20, x19, [sp, #64]
    1e5c:	ldp	x22, x21, [sp, #48]
    1e60:	ldp	x24, x23, [sp, #32]
    1e64:	ldp	x26, x25, [sp, #16]
    1e68:	ldp	x29, x30, [sp], #80
    1e6c:	ret

0000000000001e70 <deflate_huff>:
    1e70:	stp	x29, x30, [sp, #-32]!
    1e74:	stp	x20, x19, [sp, #16]
    1e78:	mov	w20, w1
    1e7c:	mov	x19, x0
    1e80:	mov	x29, sp
    1e84:	b	1ebc <deflate_huff+0x4c>
    1e88:	mov	x1, xzr
    1e8c:	mov	w8, w8
    1e90:	sub	x2, x8, x9
    1e94:	mov	x0, x19
    1e98:	mov	w3, wzr
    1e9c:	bl	0 <_tr_flush_block>
    1ea0:	ldr	w8, [x19, #172]
    1ea4:	ldr	x0, [x19]
    1ea8:	str	x8, [x19, #152]
    1eac:	bl	1904 <flush_pending>
    1eb0:	ldr	x8, [x19]
    1eb4:	ldr	w8, [x8, #32]
    1eb8:	cbz	w8, 200c <deflate_huff+0x19c>
    1ebc:	ldr	w8, [x19, #180]
    1ec0:	cbnz	w8, 1ed4 <deflate_huff+0x64>
    1ec4:	mov	x0, x19
    1ec8:	bl	5b4 <fill_window>
    1ecc:	ldr	w8, [x19, #180]
    1ed0:	cbz	w8, 1f50 <deflate_huff+0xe0>
    1ed4:	ldr	x8, [x19, #96]
    1ed8:	ldr	w9, [x19, #172]
    1edc:	ldr	x10, [x19, #5904]
    1ee0:	ldr	w11, [x19, #5900]
    1ee4:	str	wzr, [x19, #160]
    1ee8:	ldrb	w8, [x8, x9]
    1eec:	strh	wzr, [x10, x11, lsl #1]
    1ef0:	ldr	x9, [x19, #5888]
    1ef4:	add	w10, w11, #0x1
    1ef8:	str	w10, [x19, #5900]
    1efc:	add	x10, x19, x8, lsl #2
    1f00:	strb	w8, [x9, x11]
    1f04:	ldrh	w8, [x10, #212]
    1f08:	add	w8, w8, #0x1
    1f0c:	strh	w8, [x10, #212]
    1f10:	ldr	w8, [x19, #5896]
    1f14:	ldr	w9, [x19, #180]
    1f18:	ldr	w10, [x19, #172]
    1f1c:	ldr	w11, [x19, #5900]
    1f20:	sub	w12, w8, #0x1
    1f24:	sub	w9, w9, #0x1
    1f28:	add	w8, w10, #0x1
    1f2c:	cmp	w11, w12
    1f30:	str	w9, [x19, #180]
    1f34:	str	w8, [x19, #172]
    1f38:	b.ne	1ebc <deflate_huff+0x4c>  // b.any
    1f3c:	ldr	x9, [x19, #152]
    1f40:	tbnz	x9, #63, 1e88 <deflate_huff+0x18>
    1f44:	ldr	x10, [x19, #96]
    1f48:	add	x1, x10, w9, uxtw
    1f4c:	b	1e8c <deflate_huff+0x1c>
    1f50:	cbz	w20, 200c <deflate_huff+0x19c>
    1f54:	cmp	w20, #0x4
    1f58:	str	wzr, [x19, #5932]
    1f5c:	b.ne	1f74 <deflate_huff+0x104>  // b.any
    1f60:	ldr	x8, [x19, #152]
    1f64:	tbnz	x8, #63, 1f90 <deflate_huff+0x120>
    1f68:	ldr	x9, [x19, #96]
    1f6c:	add	x1, x9, w8, uxtw
    1f70:	b	1f94 <deflate_huff+0x124>
    1f74:	ldr	w8, [x19, #5900]
    1f78:	cbz	w8, 2004 <deflate_huff+0x194>
    1f7c:	ldr	x8, [x19, #152]
    1f80:	tbnz	x8, #63, 1fd0 <deflate_huff+0x160>
    1f84:	ldr	x9, [x19, #96]
    1f88:	add	x1, x9, w8, uxtw
    1f8c:	b	1fd4 <deflate_huff+0x164>
    1f90:	mov	x1, xzr
    1f94:	ldr	w9, [x19, #172]
    1f98:	mov	w3, #0x1                   	// #1
    1f9c:	mov	x0, x19
    1fa0:	sub	x2, x9, x8
    1fa4:	bl	0 <_tr_flush_block>
    1fa8:	ldr	w8, [x19, #172]
    1fac:	ldr	x0, [x19]
    1fb0:	str	x8, [x19, #152]
    1fb4:	bl	1904 <flush_pending>
    1fb8:	ldr	x8, [x19]
    1fbc:	ldr	w8, [x8, #32]
    1fc0:	cmp	w8, #0x0
    1fc4:	mov	w8, #0x2                   	// #2
    1fc8:	cinc	w0, w8, ne  // ne = any
    1fcc:	b	2010 <deflate_huff+0x1a0>
    1fd0:	mov	x1, xzr
    1fd4:	ldr	w9, [x19, #172]
    1fd8:	mov	x0, x19
    1fdc:	mov	w3, wzr
    1fe0:	sub	x2, x9, x8
    1fe4:	bl	0 <_tr_flush_block>
    1fe8:	ldr	w8, [x19, #172]
    1fec:	ldr	x0, [x19]
    1ff0:	str	x8, [x19, #152]
    1ff4:	bl	1904 <flush_pending>
    1ff8:	ldr	x8, [x19]
    1ffc:	ldr	w8, [x8, #32]
    2000:	cbz	w8, 200c <deflate_huff+0x19c>
    2004:	mov	w0, #0x1                   	// #1
    2008:	b	2010 <deflate_huff+0x1a0>
    200c:	mov	w0, wzr
    2010:	ldp	x20, x19, [sp, #16]
    2014:	ldp	x29, x30, [sp], #32
    2018:	ret

000000000000201c <deflate_rle>:
    201c:	stp	x29, x30, [sp, #-64]!
    2020:	stp	x22, x21, [sp, #32]
    2024:	adrp	x22, 0 <_length_code>
    2028:	str	x23, [sp, #16]
    202c:	stp	x20, x19, [sp, #48]
    2030:	mov	w20, w1
    2034:	mov	x19, x0
    2038:	mov	w21, #0x1                   	// #1
    203c:	add	x22, x22, #0x0
    2040:	adrp	x23, 0 <_dist_code>
    2044:	mov	x29, sp
    2048:	b	208c <deflate_rle+0x70>
    204c:	ldr	x8, [x19, #152]
    2050:	tbnz	x8, #63, 2190 <deflate_rle+0x174>
    2054:	ldr	x9, [x19, #96]
    2058:	add	x1, x9, w8, uxtw
    205c:	ldr	w9, [x19, #172]
    2060:	mov	x0, x19
    2064:	mov	w3, wzr
    2068:	sub	x2, x9, x8
    206c:	bl	0 <_tr_flush_block>
    2070:	ldr	w8, [x19, #172]
    2074:	ldr	x0, [x19]
    2078:	str	x8, [x19, #152]
    207c:	bl	1904 <flush_pending>
    2080:	ldr	x8, [x19]
    2084:	ldr	w8, [x8, #32]
    2088:	cbz	w8, 23a8 <deflate_rle+0x38c>
    208c:	ldr	w8, [x19, #180]
    2090:	cmp	w8, #0x102
    2094:	b.hi	20b4 <deflate_rle+0x98>  // b.pmore
    2098:	mov	x0, x19
    209c:	bl	5b4 <fill_window>
    20a0:	ldr	w8, [x19, #180]
    20a4:	cbnz	w20, 20b0 <deflate_rle+0x94>
    20a8:	cmp	w8, #0x103
    20ac:	b.cc	23a8 <deflate_rle+0x38c>  // b.lo, b.ul, b.last
    20b0:	cbz	w8, 22f0 <deflate_rle+0x2d4>
    20b4:	ldr	w8, [x19, #180]
    20b8:	str	wzr, [x19, #160]
    20bc:	cmp	w8, #0x3
    20c0:	b.cc	21ec <deflate_rle+0x1d0>  // b.lo, b.ul, b.last
    20c4:	ldr	w9, [x19, #172]
    20c8:	cbz	w9, 21ec <deflate_rle+0x1d0>
    20cc:	ldr	x10, [x19, #96]
    20d0:	add	x10, x10, x9
    20d4:	ldurb	w11, [x10, #-1]
    20d8:	ldrb	w9, [x10]
    20dc:	cmp	w11, w9
    20e0:	b.ne	21ec <deflate_rle+0x1d0>  // b.any
    20e4:	ldrb	w9, [x10, #1]
    20e8:	cmp	w11, w9
    20ec:	b.ne	21ec <deflate_rle+0x1d0>  // b.any
    20f0:	ldrb	w9, [x10, #2]
    20f4:	cmp	w11, w9
    20f8:	b.ne	21ec <deflate_rle+0x1d0>  // b.any
    20fc:	mov	x12, xzr
    2100:	add	x9, x10, #0x102
    2104:	add	x13, x10, x12
    2108:	ldrb	w14, [x13, #3]
    210c:	cmp	w11, w14
    2110:	b.ne	2198 <deflate_rle+0x17c>  // b.any
    2114:	ldrb	w13, [x13, #4]
    2118:	cmp	w11, w13
    211c:	b.ne	21a0 <deflate_rle+0x184>  // b.any
    2120:	add	x13, x10, x12
    2124:	ldrb	w14, [x13, #5]
    2128:	cmp	w11, w14
    212c:	b.ne	21ac <deflate_rle+0x190>  // b.any
    2130:	ldrb	w13, [x13, #6]
    2134:	cmp	w11, w13
    2138:	b.ne	21b4 <deflate_rle+0x198>  // b.any
    213c:	add	x13, x10, x12
    2140:	ldrb	w14, [x13, #7]
    2144:	cmp	w11, w14
    2148:	b.ne	21c0 <deflate_rle+0x1a4>  // b.any
    214c:	ldrb	w13, [x13, #8]
    2150:	cmp	w11, w13
    2154:	b.ne	21c8 <deflate_rle+0x1ac>  // b.any
    2158:	add	x13, x10, x12
    215c:	ldrb	w14, [x13, #9]
    2160:	cmp	w11, w14
    2164:	b.ne	21d4 <deflate_rle+0x1b8>  // b.any
    2168:	add	x14, x12, #0x2
    216c:	cmp	x14, #0xf9
    2170:	add	x12, x12, #0x8
    2174:	b.hi	2184 <deflate_rle+0x168>  // b.pmore
    2178:	ldrb	w13, [x13, #10]
    217c:	cmp	w11, w13
    2180:	b.eq	2104 <deflate_rle+0xe8>  // b.none
    2184:	add	x10, x10, x12
    2188:	add	x10, x10, #0x2
    218c:	b	21d8 <deflate_rle+0x1bc>
    2190:	mov	x1, xzr
    2194:	b	205c <deflate_rle+0x40>
    2198:	add	x10, x13, #0x3
    219c:	b	21d8 <deflate_rle+0x1bc>
    21a0:	add	x10, x10, x12
    21a4:	add	x10, x10, #0x4
    21a8:	b	21d8 <deflate_rle+0x1bc>
    21ac:	add	x10, x13, #0x5
    21b0:	b	21d8 <deflate_rle+0x1bc>
    21b4:	add	x10, x10, x12
    21b8:	add	x10, x10, #0x6
    21bc:	b	21d8 <deflate_rle+0x1bc>
    21c0:	add	x10, x13, #0x7
    21c4:	b	21d8 <deflate_rle+0x1bc>
    21c8:	add	x10, x10, x12
    21cc:	add	x10, x10, #0x8
    21d0:	b	21d8 <deflate_rle+0x1bc>
    21d4:	add	x10, x13, #0x9
    21d8:	sub	w9, w10, w9
    21dc:	add	w9, w9, #0x102
    21e0:	cmp	w9, w8
    21e4:	csel	w8, w8, w9, hi  // hi = pmore
    21e8:	str	w8, [x19, #160]
    21ec:	ldr	w8, [x19, #160]
    21f0:	subs	w8, w8, #0x3
    21f4:	b.cc	2284 <deflate_rle+0x268>  // b.lo, b.ul, b.last
    21f8:	ldr	x9, [x19, #5904]
    21fc:	ldr	w10, [x19, #5900]
    2200:	and	x11, x8, #0xff
    2204:	ldrb	w11, [x22, x11]
    2208:	mov	w12, #0x400                 	// #1024
    220c:	strh	w21, [x9, x10, lsl #1]
    2210:	add	w9, w10, #0x1
    2214:	str	w9, [x19, #5900]
    2218:	ldr	x9, [x19, #5888]
    221c:	bfi	x12, x11, #2, #8
    2220:	add	x12, x12, x19
    2224:	ldrb	w11, [x23]
    2228:	strb	w8, [x9, x10]
    222c:	ldrh	w8, [x12, #216]
    2230:	add	x9, x19, x11, lsl #2
    2234:	add	w8, w8, #0x1
    2238:	strh	w8, [x12, #216]
    223c:	ldrh	w8, [x9, #2504]
    2240:	add	w8, w8, #0x1
    2244:	strh	w8, [x9, #2504]
    2248:	ldr	w8, [x19, #160]
    224c:	ldr	w9, [x19, #180]
    2250:	ldr	w10, [x19, #172]
    2254:	ldr	w11, [x19, #5896]
    2258:	ldr	w12, [x19, #5900]
    225c:	sub	w9, w9, w8
    2260:	add	w8, w10, w8
    2264:	sub	w10, w11, #0x1
    2268:	cmp	w12, w10
    226c:	str	w9, [x19, #180]
    2270:	str	w8, [x19, #172]
    2274:	cset	w8, eq  // eq = none
    2278:	str	wzr, [x19, #160]
    227c:	cbz	w8, 208c <deflate_rle+0x70>
    2280:	b	204c <deflate_rle+0x30>
    2284:	ldr	x8, [x19, #96]
    2288:	ldr	w9, [x19, #172]
    228c:	ldr	x10, [x19, #5904]
    2290:	ldr	w11, [x19, #5900]
    2294:	ldrb	w8, [x8, x9]
    2298:	strh	wzr, [x10, x11, lsl #1]
    229c:	ldr	x9, [x19, #5888]
    22a0:	add	w10, w11, #0x1
    22a4:	str	w10, [x19, #5900]
    22a8:	add	x10, x19, x8, lsl #2
    22ac:	strb	w8, [x9, x11]
    22b0:	ldrh	w8, [x10, #212]
    22b4:	add	w8, w8, #0x1
    22b8:	strh	w8, [x10, #212]
    22bc:	ldr	w8, [x19, #5896]
    22c0:	ldr	w11, [x19, #5900]
    22c4:	ldr	w9, [x19, #180]
    22c8:	ldr	w10, [x19, #172]
    22cc:	sub	w8, w8, #0x1
    22d0:	cmp	w11, w8
    22d4:	sub	w9, w9, #0x1
    22d8:	add	w10, w10, #0x1
    22dc:	cset	w8, eq  // eq = none
    22e0:	str	w9, [x19, #180]
    22e4:	str	w10, [x19, #172]
    22e8:	cbz	w8, 208c <deflate_rle+0x70>
    22ec:	b	204c <deflate_rle+0x30>
    22f0:	cmp	w20, #0x4
    22f4:	str	wzr, [x19, #5932]
    22f8:	b.ne	2310 <deflate_rle+0x2f4>  // b.any
    22fc:	ldr	x8, [x19, #152]
    2300:	tbnz	x8, #63, 232c <deflate_rle+0x310>
    2304:	ldr	x9, [x19, #96]
    2308:	add	x1, x9, w8, uxtw
    230c:	b	2330 <deflate_rle+0x314>
    2310:	ldr	w8, [x19, #5900]
    2314:	cbz	w8, 23a0 <deflate_rle+0x384>
    2318:	ldr	x8, [x19, #152]
    231c:	tbnz	x8, #63, 236c <deflate_rle+0x350>
    2320:	ldr	x9, [x19, #96]
    2324:	add	x1, x9, w8, uxtw
    2328:	b	2370 <deflate_rle+0x354>
    232c:	mov	x1, xzr
    2330:	ldr	w9, [x19, #172]
    2334:	mov	w3, #0x1                   	// #1
    2338:	mov	x0, x19
    233c:	sub	x2, x9, x8
    2340:	bl	0 <_tr_flush_block>
    2344:	ldr	w8, [x19, #172]
    2348:	ldr	x0, [x19]
    234c:	str	x8, [x19, #152]
    2350:	bl	1904 <flush_pending>
    2354:	ldr	x8, [x19]
    2358:	ldr	w8, [x8, #32]
    235c:	cmp	w8, #0x0
    2360:	mov	w8, #0x2                   	// #2
    2364:	cinc	w0, w8, ne  // ne = any
    2368:	b	23ac <deflate_rle+0x390>
    236c:	mov	x1, xzr
    2370:	ldr	w9, [x19, #172]
    2374:	mov	x0, x19
    2378:	mov	w3, wzr
    237c:	sub	x2, x9, x8
    2380:	bl	0 <_tr_flush_block>
    2384:	ldr	w8, [x19, #172]
    2388:	ldr	x0, [x19]
    238c:	str	x8, [x19, #152]
    2390:	bl	1904 <flush_pending>
    2394:	ldr	x8, [x19]
    2398:	ldr	w8, [x8, #32]
    239c:	cbz	w8, 23a8 <deflate_rle+0x38c>
    23a0:	mov	w0, #0x1                   	// #1
    23a4:	b	23ac <deflate_rle+0x390>
    23a8:	mov	w0, wzr
    23ac:	ldp	x20, x19, [sp, #48]
    23b0:	ldp	x22, x21, [sp, #32]
    23b4:	ldr	x23, [sp, #16]
    23b8:	ldp	x29, x30, [sp], #64
    23bc:	ret

00000000000023c0 <deflateCopy>:
    23c0:	stp	x29, x30, [sp, #-48]!
    23c4:	stp	x22, x21, [sp, #16]
    23c8:	mov	x21, x0
    23cc:	mov	x0, x1
    23d0:	stp	x20, x19, [sp, #32]
    23d4:	mov	x29, sp
    23d8:	mov	x20, x1
    23dc:	bl	538 <deflateStateCheck>
    23e0:	mov	w8, w0
    23e4:	mov	w0, #0xfffffffe            	// #-2
    23e8:	cbz	x21, 2574 <deflateCopy+0x1b4>
    23ec:	cbnz	w8, 2574 <deflateCopy+0x1b4>
    23f0:	ldp	q1, q0, [x20, #64]
    23f4:	ldr	x19, [x20, #56]
    23f8:	ldr	q2, [x20, #48]
    23fc:	ldr	q3, [x20, #96]
    2400:	stp	q1, q0, [x21, #64]
    2404:	ldp	q0, q1, [x20]
    2408:	ldr	q4, [x20, #32]
    240c:	ldr	x8, [x21, #64]
    2410:	ldr	x0, [x21, #80]
    2414:	mov	w1, #0x1                   	// #1
    2418:	mov	w2, #0x1740                	// #5952
    241c:	str	q3, [x21, #96]
    2420:	stp	q0, q1, [x21]
    2424:	stp	q4, q2, [x21, #32]
    2428:	blr	x8
    242c:	cbz	x0, 2570 <deflateCopy+0x1b0>
    2430:	mov	w2, #0x1740                	// #5952
    2434:	mov	x1, x19
    2438:	mov	x20, x0
    243c:	str	x0, [x21, #56]
    2440:	bl	0 <memcpy>
    2444:	str	x21, [x20]
    2448:	ldr	x8, [x21, #64]
    244c:	ldr	x0, [x21, #80]
    2450:	ldr	w1, [x20, #80]
    2454:	mov	w2, #0x2                   	// #2
    2458:	blr	x8
    245c:	str	x0, [x20, #96]
    2460:	ldr	x8, [x21, #64]
    2464:	ldr	x0, [x21, #80]
    2468:	ldr	w1, [x20, #80]
    246c:	mov	w2, #0x2                   	// #2
    2470:	blr	x8
    2474:	str	x0, [x20, #112]
    2478:	ldr	x8, [x21, #64]
    247c:	ldr	x0, [x21, #80]
    2480:	ldr	w1, [x20, #132]
    2484:	mov	w2, #0x2                   	// #2
    2488:	blr	x8
    248c:	str	x0, [x20, #120]
    2490:	ldr	x8, [x21, #64]
    2494:	ldr	x0, [x21, #80]
    2498:	ldr	w1, [x20, #5896]
    249c:	mov	w2, #0x4                   	// #4
    24a0:	blr	x8
    24a4:	ldr	x8, [x20, #96]
    24a8:	str	x0, [x20, #16]
    24ac:	cbz	x8, 2568 <deflateCopy+0x1a8>
    24b0:	ldr	x9, [x20, #112]
    24b4:	cbz	x9, 2568 <deflateCopy+0x1a8>
    24b8:	mov	x22, x0
    24bc:	cbz	x0, 2568 <deflateCopy+0x1a8>
    24c0:	ldr	x9, [x20, #120]
    24c4:	cbz	x9, 2568 <deflateCopy+0x1a8>
    24c8:	ldr	w9, [x20, #80]
    24cc:	ldr	x1, [x19, #96]
    24d0:	mov	x0, x8
    24d4:	lsl	w2, w9, #1
    24d8:	bl	0 <memcpy>
    24dc:	ldr	w8, [x20, #80]
    24e0:	ldr	x0, [x20, #112]
    24e4:	ldr	x1, [x19, #112]
    24e8:	lsl	x2, x8, #1
    24ec:	bl	0 <memcpy>
    24f0:	ldr	w8, [x20, #132]
    24f4:	ldr	x0, [x20, #120]
    24f8:	ldr	x1, [x19, #120]
    24fc:	lsl	x2, x8, #1
    2500:	bl	0 <memcpy>
    2504:	ldr	x0, [x20, #16]
    2508:	ldr	x1, [x19, #16]
    250c:	ldr	w2, [x20, #24]
    2510:	bl	0 <memcpy>
    2514:	add	x11, x20, #0xd4
    2518:	ldr	x8, [x19, #32]
    251c:	ldr	x9, [x19, #16]
    2520:	str	x11, [x20, #2904]
    2524:	add	x11, x20, #0x9c8
    2528:	ldr	w10, [x20, #5896]
    252c:	str	x11, [x20, #2928]
    2530:	ldr	x11, [x20, #16]
    2534:	sub	x8, x8, x9
    2538:	and	x9, x10, #0xfffffffe
    253c:	add	x10, x10, x10, lsl #1
    2540:	add	x8, x11, x8
    2544:	mov	w0, wzr
    2548:	add	x9, x22, x9
    254c:	add	x10, x11, x10
    2550:	str	x8, [x20, #32]
    2554:	add	x8, x20, #0xabc
    2558:	str	x9, [x20, #5904]
    255c:	str	x10, [x20, #5888]
    2560:	str	x8, [x20, #2952]
    2564:	b	2574 <deflateCopy+0x1b4>
    2568:	mov	x0, x21
    256c:	bl	2a8 <deflateEnd>
    2570:	mov	w0, #0xfffffffc            	// #-4
    2574:	ldp	x20, x19, [sp, #32]
    2578:	ldp	x22, x21, [sp, #16]
    257c:	ldp	x29, x30, [sp], #48
    2580:	ret

0000000000002584 <deflate_fast>:
    2584:	stp	x29, x30, [sp, #-48]!
    2588:	stp	x22, x21, [sp, #16]
    258c:	adrp	x21, 0 <_length_code>
    2590:	adrp	x22, 0 <_dist_code>
    2594:	stp	x20, x19, [sp, #32]
    2598:	mov	w20, w1
    259c:	mov	x19, x0
    25a0:	add	x21, x21, #0x0
    25a4:	add	x22, x22, #0x0
    25a8:	mov	x29, sp
    25ac:	b	25f0 <deflate_fast+0x6c>
    25b0:	ldr	x8, [x19, #152]
    25b4:	tbnz	x8, #63, 2874 <deflate_fast+0x2f0>
    25b8:	ldr	x9, [x19, #96]
    25bc:	add	x1, x9, w8, uxtw
    25c0:	ldr	w9, [x19, #172]
    25c4:	mov	x0, x19
    25c8:	mov	w3, wzr
    25cc:	sub	x2, x9, x8
    25d0:	bl	0 <_tr_flush_block>
    25d4:	ldr	w8, [x19, #172]
    25d8:	ldr	x0, [x19]
    25dc:	str	x8, [x19, #152]
    25e0:	bl	1904 <flush_pending>
    25e4:	ldr	x8, [x19]
    25e8:	ldr	w8, [x8, #32]
    25ec:	cbz	w8, 293c <deflate_fast+0x3b8>
    25f0:	ldr	w8, [x19, #180]
    25f4:	cmp	w8, #0x105
    25f8:	b.hi	2618 <deflate_fast+0x94>  // b.pmore
    25fc:	mov	x0, x19
    2600:	bl	5b4 <fill_window>
    2604:	ldr	w8, [x19, #180]
    2608:	cbnz	w20, 2614 <deflate_fast+0x90>
    260c:	cmp	w8, #0x106
    2610:	b.cc	293c <deflate_fast+0x3b8>  // b.lo, b.ul, b.last
    2614:	cbz	w8, 287c <deflate_fast+0x2f8>
    2618:	ldr	w8, [x19, #180]
    261c:	cmp	w8, #0x3
    2620:	b.cc	2670 <deflate_fast+0xec>  // b.lo, b.ul, b.last
    2624:	ldr	w9, [x19, #172]
    2628:	ldr	x10, [x19, #96]
    262c:	ldr	w8, [x19, #128]
    2630:	ldp	w12, w11, [x19, #140]
    2634:	add	w13, w9, #0x2
    2638:	ldrb	w10, [x10, w13, uxtw]
    263c:	lsl	w8, w8, w11
    2640:	ldp	x13, x11, [x19, #112]
    2644:	eor	w8, w8, w10
    2648:	and	x8, x8, x12
    264c:	ldr	w10, [x19, #88]
    2650:	str	w8, [x19, #128]
    2654:	lsl	x8, x8, #1
    2658:	ldrh	w1, [x11, x8]
    265c:	and	x10, x10, x9
    2660:	strh	w1, [x13, x10, lsl #1]
    2664:	strh	w9, [x11, x8]
    2668:	cbnz	w1, 2678 <deflate_fast+0xf4>
    266c:	b	269c <deflate_fast+0x118>
    2670:	mov	w1, wzr
    2674:	cbz	w1, 269c <deflate_fast+0x118>
    2678:	ldr	w8, [x19, #172]
    267c:	ldr	w9, [x19, #80]
    2680:	sub	w8, w8, w1
    2684:	sub	w9, w9, #0x106
    2688:	cmp	w8, w9
    268c:	b.hi	269c <deflate_fast+0x118>  // b.pmore
    2690:	mov	x0, x19
    2694:	bl	2e04 <longest_match>
    2698:	str	w0, [x19, #160]
    269c:	ldr	w8, [x19, #160]
    26a0:	subs	w8, w8, #0x3
    26a4:	b.cc	27c8 <deflate_fast+0x244>  // b.lo, b.ul, b.last
    26a8:	ldp	w9, w10, [x19, #172]
    26ac:	ldr	x11, [x19, #5904]
    26b0:	ldr	w12, [x19, #5900]
    26b4:	and	x13, x8, #0xff
    26b8:	ldrb	w13, [x21, x13]
    26bc:	sub	w9, w9, w10
    26c0:	mov	w10, #0x400                 	// #1024
    26c4:	strh	w9, [x11, x12, lsl #1]
    26c8:	add	w11, w12, #0x1
    26cc:	sub	w9, w9, #0x1
    26d0:	str	w11, [x19, #5900]
    26d4:	bfi	x10, x13, #2, #8
    26d8:	ldr	x11, [x19, #5888]
    26dc:	and	w13, w9, #0xffff
    26e0:	cmp	w13, #0x100
    26e4:	ubfx	w13, w9, #7, #9
    26e8:	add	w13, w13, #0x100
    26ec:	csel	w9, w9, w13, cc  // cc = lo, ul, last
    26f0:	add	x10, x10, x19
    26f4:	and	x9, x9, #0xffff
    26f8:	strb	w8, [x11, x12]
    26fc:	ldrb	w8, [x22, x9]
    2700:	ldrh	w9, [x10, #216]
    2704:	add	x8, x19, x8, lsl #2
    2708:	add	w9, w9, #0x1
    270c:	strh	w9, [x10, #216]
    2710:	ldrh	w9, [x8, #2504]
    2714:	add	w9, w9, #0x1
    2718:	strh	w9, [x8, #2504]
    271c:	ldr	w8, [x19, #5896]
    2720:	ldr	w12, [x19, #160]
    2724:	ldr	w9, [x19, #180]
    2728:	ldr	w10, [x19, #5900]
    272c:	sub	w8, w8, #0x1
    2730:	sub	w9, w9, w12
    2734:	cmp	w10, w8
    2738:	cset	w8, eq  // eq = none
    273c:	cmp	w9, #0x3
    2740:	str	w9, [x19, #180]
    2744:	b.cc	2834 <deflate_fast+0x2b0>  // b.lo, b.ul, b.last
    2748:	ldr	w9, [x19, #192]
    274c:	cmp	w12, w9
    2750:	b.hi	2834 <deflate_fast+0x2b0>  // b.pmore
    2754:	ldr	x9, [x19, #96]
    2758:	ldp	w11, w10, [x19, #140]
    275c:	ldp	x14, x13, [x19, #112]
    2760:	ldr	w15, [x19, #88]
    2764:	sub	w12, w12, #0x1
    2768:	str	w12, [x19, #160]
    276c:	ldr	w12, [x19, #172]
    2770:	ldr	w16, [x19, #128]
    2774:	add	w17, w12, #0x1
    2778:	add	w18, w12, #0x3
    277c:	str	w17, [x19, #172]
    2780:	ldrb	w18, [x9, w18, uxtw]
    2784:	lsl	w16, w16, w10
    2788:	and	x0, x15, x17
    278c:	eor	w16, w16, w18
    2790:	and	x16, x16, x11
    2794:	str	w16, [x19, #128]
    2798:	lsl	x16, x16, #1
    279c:	ldrh	w18, [x13, x16]
    27a0:	strh	w18, [x14, x0, lsl #1]
    27a4:	strh	w17, [x13, x16]
    27a8:	ldr	w16, [x19, #160]
    27ac:	subs	w16, w16, #0x1
    27b0:	str	w16, [x19, #160]
    27b4:	b.ne	276c <deflate_fast+0x1e8>  // b.any
    27b8:	add	w9, w12, #0x2
    27bc:	str	w9, [x19, #172]
    27c0:	cbz	w8, 25f0 <deflate_fast+0x6c>
    27c4:	b	25b0 <deflate_fast+0x2c>
    27c8:	ldr	x8, [x19, #96]
    27cc:	ldr	w9, [x19, #172]
    27d0:	ldr	x10, [x19, #5904]
    27d4:	ldr	w11, [x19, #5900]
    27d8:	ldrb	w8, [x8, x9]
    27dc:	strh	wzr, [x10, x11, lsl #1]
    27e0:	ldr	x9, [x19, #5888]
    27e4:	add	w10, w11, #0x1
    27e8:	str	w10, [x19, #5900]
    27ec:	add	x10, x19, x8, lsl #2
    27f0:	strb	w8, [x9, x11]
    27f4:	ldrh	w8, [x10, #212]
    27f8:	add	w8, w8, #0x1
    27fc:	strh	w8, [x10, #212]
    2800:	ldr	w8, [x19, #5896]
    2804:	ldr	w11, [x19, #5900]
    2808:	ldr	w9, [x19, #180]
    280c:	ldr	w10, [x19, #172]
    2810:	sub	w8, w8, #0x1
    2814:	cmp	w11, w8
    2818:	sub	w9, w9, #0x1
    281c:	add	w10, w10, #0x1
    2820:	cset	w8, eq  // eq = none
    2824:	str	w9, [x19, #180]
    2828:	str	w10, [x19, #172]
    282c:	cbz	w8, 25f0 <deflate_fast+0x6c>
    2830:	b	25b0 <deflate_fast+0x2c>
    2834:	ldr	w9, [x19, #172]
    2838:	ldr	x10, [x19, #96]
    283c:	str	wzr, [x19, #160]
    2840:	add	w9, w9, w12
    2844:	str	w9, [x19, #172]
    2848:	ldrb	w11, [x10, w9, uxtw]
    284c:	add	w9, w9, #0x1
    2850:	str	w11, [x19, #128]
    2854:	ldrb	w9, [x10, w9, uxtw]
    2858:	ldp	w10, w12, [x19, #140]
    285c:	lsl	w11, w11, w12
    2860:	eor	w9, w11, w9
    2864:	and	w9, w9, w10
    2868:	str	w9, [x19, #128]
    286c:	cbz	w8, 25f0 <deflate_fast+0x6c>
    2870:	b	25b0 <deflate_fast+0x2c>
    2874:	mov	x1, xzr
    2878:	b	25c0 <deflate_fast+0x3c>
    287c:	ldr	w8, [x19, #172]
    2880:	mov	w9, #0x2                   	// #2
    2884:	cmp	w8, #0x2
    2888:	csel	w9, w8, w9, cc  // cc = lo, ul, last
    288c:	cmp	w20, #0x4
    2890:	str	w9, [x19, #5932]
    2894:	b.ne	28ac <deflate_fast+0x328>  // b.any
    2898:	ldr	x9, [x19, #152]
    289c:	tbnz	x9, #63, 28c8 <deflate_fast+0x344>
    28a0:	ldr	x10, [x19, #96]
    28a4:	add	x1, x10, w9, uxtw
    28a8:	b	28cc <deflate_fast+0x348>
    28ac:	ldr	w9, [x19, #5900]
    28b0:	cbz	w9, 2934 <deflate_fast+0x3b0>
    28b4:	ldr	x9, [x19, #152]
    28b8:	tbnz	x9, #63, 2904 <deflate_fast+0x380>
    28bc:	ldr	x10, [x19, #96]
    28c0:	add	x1, x10, w9, uxtw
    28c4:	b	2908 <deflate_fast+0x384>
    28c8:	mov	x1, xzr
    28cc:	sub	x2, x8, x9
    28d0:	mov	w3, #0x1                   	// #1
    28d4:	mov	x0, x19
    28d8:	bl	0 <_tr_flush_block>
    28dc:	ldr	w8, [x19, #172]
    28e0:	ldr	x0, [x19]
    28e4:	str	x8, [x19, #152]
    28e8:	bl	1904 <flush_pending>
    28ec:	ldr	x8, [x19]
    28f0:	ldr	w8, [x8, #32]
    28f4:	cmp	w8, #0x0
    28f8:	mov	w8, #0x2                   	// #2
    28fc:	cinc	w0, w8, ne  // ne = any
    2900:	b	2940 <deflate_fast+0x3bc>
    2904:	mov	x1, xzr
    2908:	sub	x2, x8, x9
    290c:	mov	x0, x19
    2910:	mov	w3, wzr
    2914:	bl	0 <_tr_flush_block>
    2918:	ldr	w8, [x19, #172]
    291c:	ldr	x0, [x19]
    2920:	str	x8, [x19, #152]
    2924:	bl	1904 <flush_pending>
    2928:	ldr	x8, [x19]
    292c:	ldr	w8, [x8, #32]
    2930:	cbz	w8, 293c <deflate_fast+0x3b8>
    2934:	mov	w0, #0x1                   	// #1
    2938:	b	2940 <deflate_fast+0x3bc>
    293c:	mov	w0, wzr
    2940:	ldp	x20, x19, [sp, #32]
    2944:	ldp	x22, x21, [sp, #16]
    2948:	ldp	x29, x30, [sp], #48
    294c:	ret

0000000000002950 <deflate_slow>:
    2950:	stp	x29, x30, [sp, #-64]!
    2954:	stp	x24, x23, [sp, #16]
    2958:	stp	x22, x21, [sp, #32]
    295c:	adrp	x22, 0 <_length_code>
    2960:	adrp	x23, 0 <_dist_code>
    2964:	stp	x20, x19, [sp, #48]
    2968:	mov	w20, w1
    296c:	mov	x19, x0
    2970:	mov	w21, #0x2                   	// #2
    2974:	add	x22, x22, #0x0
    2978:	add	x23, x23, #0x0
    297c:	mov	w24, #0x1                   	// #1
    2980:	mov	x29, sp
    2984:	b	29d8 <deflate_slow+0x88>
    2988:	ldr	x9, [x19, #96]
    298c:	add	x1, x9, w8, uxtw
    2990:	ldr	w9, [x19, #172]
    2994:	mov	x0, x19
    2998:	mov	w3, wzr
    299c:	sub	x2, x9, x8
    29a0:	bl	0 <_tr_flush_block>
    29a4:	ldr	w8, [x19, #172]
    29a8:	ldr	x0, [x19]
    29ac:	str	x8, [x19, #152]
    29b0:	bl	1904 <flush_pending>
    29b4:	ldr	w8, [x19, #172]
    29b8:	ldr	w9, [x19, #180]
    29bc:	ldr	x10, [x19]
    29c0:	add	w8, w8, #0x1
    29c4:	sub	w9, w9, #0x1
    29c8:	str	w8, [x19, #172]
    29cc:	str	w9, [x19, #180]
    29d0:	ldr	w8, [x10, #32]
    29d4:	cbz	w8, 2dec <deflate_slow+0x49c>
    29d8:	ldr	w8, [x19, #180]
    29dc:	cmp	w8, #0x105
    29e0:	b.hi	2a00 <deflate_slow+0xb0>  // b.pmore
    29e4:	mov	x0, x19
    29e8:	bl	5b4 <fill_window>
    29ec:	ldr	w8, [x19, #180]
    29f0:	cbnz	w20, 29fc <deflate_slow+0xac>
    29f4:	cmp	w8, #0x106
    29f8:	b.cc	2dec <deflate_slow+0x49c>  // b.lo, b.ul, b.last
    29fc:	cbz	w8, 2ce4 <deflate_slow+0x394>
    2a00:	ldr	w8, [x19, #180]
    2a04:	cmp	w8, #0x3
    2a08:	b.cc	2a54 <deflate_slow+0x104>  // b.lo, b.ul, b.last
    2a0c:	ldr	w9, [x19, #172]
    2a10:	ldr	x10, [x19, #96]
    2a14:	ldr	w8, [x19, #128]
    2a18:	ldp	w12, w11, [x19, #140]
    2a1c:	add	w13, w9, #0x2
    2a20:	ldrb	w10, [x10, w13, uxtw]
    2a24:	lsl	w8, w8, w11
    2a28:	ldp	x13, x11, [x19, #112]
    2a2c:	eor	w8, w8, w10
    2a30:	and	x8, x8, x12
    2a34:	ldr	w10, [x19, #88]
    2a38:	str	w8, [x19, #128]
    2a3c:	lsl	x8, x8, #1
    2a40:	ldrh	w1, [x11, x8]
    2a44:	and	x10, x10, x9
    2a48:	strh	w1, [x13, x10, lsl #1]
    2a4c:	strh	w9, [x11, x8]
    2a50:	b	2a58 <deflate_slow+0x108>
    2a54:	mov	w1, wzr
    2a58:	ldr	w8, [x19, #160]
    2a5c:	ldr	w9, [x19, #176]
    2a60:	str	w8, [x19, #184]
    2a64:	stp	w21, w9, [x19, #160]
    2a68:	cbz	w1, 2ad0 <deflate_slow+0x180>
    2a6c:	ldr	w9, [x19, #192]
    2a70:	cmp	w8, w9
    2a74:	b.cs	2ad0 <deflate_slow+0x180>  // b.hs, b.nlast
    2a78:	ldr	w8, [x19, #172]
    2a7c:	ldr	w9, [x19, #80]
    2a80:	sub	w8, w8, w1
    2a84:	sub	w9, w9, #0x106
    2a88:	cmp	w8, w9
    2a8c:	b.hi	2ad0 <deflate_slow+0x180>  // b.pmore
    2a90:	mov	x0, x19
    2a94:	bl	2e04 <longest_match>
    2a98:	cmp	w0, #0x5
    2a9c:	str	w0, [x19, #160]
    2aa0:	b.hi	2ad0 <deflate_slow+0x180>  // b.pmore
    2aa4:	ldr	w8, [x19, #200]
    2aa8:	cmp	w8, #0x1
    2aac:	b.ne	2ab8 <deflate_slow+0x168>  // b.any
    2ab0:	str	w21, [x19, #160]
    2ab4:	b	2ad0 <deflate_slow+0x180>
    2ab8:	cmp	w0, #0x3
    2abc:	b.ne	2ad0 <deflate_slow+0x180>  // b.any
    2ac0:	ldp	w8, w9, [x19, #172]
    2ac4:	sub	w8, w8, w9
    2ac8:	cmp	w8, #0x1, lsl #12
    2acc:	b.hi	2ab0 <deflate_slow+0x160>  // b.pmore
    2ad0:	ldr	w9, [x19, #184]
    2ad4:	subs	w8, w9, #0x3
    2ad8:	b.cc	2ae8 <deflate_slow+0x198>  // b.lo, b.ul, b.last
    2adc:	ldr	w10, [x19, #160]
    2ae0:	cmp	w10, w9
    2ae4:	b.ls	2b6c <deflate_slow+0x21c>  // b.plast
    2ae8:	ldr	w8, [x19, #168]
    2aec:	cbz	w8, 2b50 <deflate_slow+0x200>
    2af0:	ldr	w9, [x19, #172]
    2af4:	ldr	x8, [x19, #96]
    2af8:	ldr	x10, [x19, #5904]
    2afc:	ldr	w11, [x19, #5900]
    2b00:	sub	w9, w9, #0x1
    2b04:	ldrb	w8, [x8, w9, uxtw]
    2b08:	strh	wzr, [x10, x11, lsl #1]
    2b0c:	ldr	x9, [x19, #5888]
    2b10:	add	w10, w11, #0x1
    2b14:	str	w10, [x19, #5900]
    2b18:	strb	w8, [x9, x11]
    2b1c:	add	x8, x19, x8, lsl #2
    2b20:	ldrh	w9, [x8, #212]
    2b24:	add	w9, w9, #0x1
    2b28:	strh	w9, [x8, #212]
    2b2c:	ldr	w8, [x19, #5896]
    2b30:	ldr	w9, [x19, #5900]
    2b34:	sub	w8, w8, #0x1
    2b38:	cmp	w9, w8
    2b3c:	b.ne	29b4 <deflate_slow+0x64>  // b.any
    2b40:	ldr	x8, [x19, #152]
    2b44:	tbz	x8, #63, 2988 <deflate_slow+0x38>
    2b48:	mov	x1, xzr
    2b4c:	b	2990 <deflate_slow+0x40>
    2b50:	ldr	w8, [x19, #172]
    2b54:	ldr	w9, [x19, #180]
    2b58:	add	w8, w8, #0x1
    2b5c:	sub	w9, w9, #0x1
    2b60:	stp	w24, w8, [x19, #168]
    2b64:	str	w9, [x19, #180]
    2b68:	b	29d8 <deflate_slow+0x88>
    2b6c:	ldr	w11, [x19, #164]
    2b70:	ldr	w9, [x19, #172]
    2b74:	ldr	x12, [x19, #5904]
    2b78:	ldr	w13, [x19, #5900]
    2b7c:	mvn	w11, w11
    2b80:	add	w11, w11, w9
    2b84:	ldr	w10, [x19, #180]
    2b88:	strh	w11, [x12, x13, lsl #1]
    2b8c:	and	x14, x8, #0xff
    2b90:	ldr	x12, [x19, #5888]
    2b94:	ldrb	w14, [x22, x14]
    2b98:	add	w15, w13, #0x1
    2b9c:	sub	w11, w11, #0x1
    2ba0:	str	w15, [x19, #5900]
    2ba4:	strb	w8, [x12, x13]
    2ba8:	mov	w8, #0x400                 	// #1024
    2bac:	and	w12, w11, #0xffff
    2bb0:	ubfx	w13, w11, #7, #9
    2bb4:	bfi	x8, x14, #2, #8
    2bb8:	add	w13, w13, #0x100
    2bbc:	cmp	w12, #0x100
    2bc0:	add	x8, x8, x19
    2bc4:	csel	w11, w11, w13, cc  // cc = lo, ul, last
    2bc8:	and	x11, x11, #0xffff
    2bcc:	ldrh	w12, [x8, #216]
    2bd0:	ldrb	w11, [x23, x11]
    2bd4:	add	w9, w9, w10
    2bd8:	sub	w10, w9, #0x3
    2bdc:	add	w12, w12, #0x1
    2be0:	add	x11, x19, x11, lsl #2
    2be4:	strh	w12, [x8, #216]
    2be8:	ldrh	w8, [x11, #2504]
    2bec:	add	w8, w8, #0x1
    2bf0:	strh	w8, [x11, #2504]
    2bf4:	ldr	w11, [x19, #5896]
    2bf8:	ldp	w13, w12, [x19, #180]
    2bfc:	ldr	w8, [x19, #5900]
    2c00:	sub	w9, w11, #0x1
    2c04:	sub	w11, w13, w12
    2c08:	sub	w12, w12, #0x2
    2c0c:	add	w11, w11, #0x1
    2c10:	stp	w11, w12, [x19, #180]
    2c14:	b	2c28 <deflate_slow+0x2d8>
    2c18:	ldr	w12, [x19, #184]
    2c1c:	subs	w12, w12, #0x1
    2c20:	str	w12, [x19, #184]
    2c24:	b.eq	2c84 <deflate_slow+0x334>  // b.none
    2c28:	ldr	w11, [x19, #172]
    2c2c:	add	w12, w11, #0x1
    2c30:	cmp	w12, w10
    2c34:	str	w12, [x19, #172]
    2c38:	b.hi	2c18 <deflate_slow+0x2c8>  // b.pmore
    2c3c:	ldr	x14, [x19, #96]
    2c40:	ldr	w13, [x19, #128]
    2c44:	add	w15, w11, #0x3
    2c48:	ldp	w17, w16, [x19, #140]
    2c4c:	ldrb	w14, [x14, w15, uxtw]
    2c50:	ldp	x18, x15, [x19, #112]
    2c54:	lsl	w13, w13, w16
    2c58:	eor	w13, w13, w14
    2c5c:	and	x13, x13, x17
    2c60:	ldr	w16, [x19, #88]
    2c64:	str	w13, [x19, #128]
    2c68:	lsl	x13, x13, #1
    2c6c:	ldrh	w14, [x15, x13]
    2c70:	mov	w17, w12
    2c74:	and	x16, x16, x17
    2c78:	strh	w14, [x18, x16, lsl #1]
    2c7c:	strh	w12, [x15, x13]
    2c80:	b	2c18 <deflate_slow+0x2c8>
    2c84:	add	w10, w11, #0x2
    2c88:	cmp	w8, w9
    2c8c:	str	w21, [x19, #160]
    2c90:	stp	wzr, w10, [x19, #168]
    2c94:	b.ne	29d8 <deflate_slow+0x88>  // b.any
    2c98:	ldr	x8, [x19, #152]
    2c9c:	tbnz	x8, #63, 2cac <deflate_slow+0x35c>
    2ca0:	ldr	x9, [x19, #96]
    2ca4:	add	x1, x9, w8, uxtw
    2ca8:	b	2cb0 <deflate_slow+0x360>
    2cac:	mov	x1, xzr
    2cb0:	mov	w9, w10
    2cb4:	sub	x2, x9, x8
    2cb8:	mov	x0, x19
    2cbc:	mov	w3, wzr
    2cc0:	bl	0 <_tr_flush_block>
    2cc4:	ldr	w8, [x19, #172]
    2cc8:	ldr	x0, [x19]
    2ccc:	str	x8, [x19, #152]
    2cd0:	bl	1904 <flush_pending>
    2cd4:	ldr	x8, [x19]
    2cd8:	ldr	w8, [x8, #32]
    2cdc:	cbnz	w8, 29d8 <deflate_slow+0x88>
    2ce0:	b	2dec <deflate_slow+0x49c>
    2ce4:	ldr	w8, [x19, #168]
    2ce8:	cbz	w8, 2d2c <deflate_slow+0x3dc>
    2cec:	ldr	w9, [x19, #172]
    2cf0:	ldr	x8, [x19, #96]
    2cf4:	ldr	x10, [x19, #5904]
    2cf8:	ldr	w11, [x19, #5900]
    2cfc:	sub	w9, w9, #0x1
    2d00:	ldrb	w8, [x8, w9, uxtw]
    2d04:	strh	wzr, [x10, x11, lsl #1]
    2d08:	ldr	x9, [x19, #5888]
    2d0c:	add	w10, w11, #0x1
    2d10:	str	w10, [x19, #5900]
    2d14:	add	x10, x19, x8, lsl #2
    2d18:	strb	w8, [x9, x11]
    2d1c:	ldrh	w8, [x10, #212]
    2d20:	add	w8, w8, #0x1
    2d24:	strh	w8, [x10, #212]
    2d28:	str	wzr, [x19, #168]
    2d2c:	ldr	w8, [x19, #172]
    2d30:	mov	w9, #0x2                   	// #2
    2d34:	cmp	w8, #0x2
    2d38:	csel	w9, w8, w9, cc  // cc = lo, ul, last
    2d3c:	cmp	w20, #0x4
    2d40:	str	w9, [x19, #5932]
    2d44:	b.ne	2d5c <deflate_slow+0x40c>  // b.any
    2d48:	ldr	x9, [x19, #152]
    2d4c:	tbnz	x9, #63, 2d78 <deflate_slow+0x428>
    2d50:	ldr	x10, [x19, #96]
    2d54:	add	x1, x10, w9, uxtw
    2d58:	b	2d7c <deflate_slow+0x42c>
    2d5c:	ldr	w9, [x19, #5900]
    2d60:	cbz	w9, 2de4 <deflate_slow+0x494>
    2d64:	ldr	x9, [x19, #152]
    2d68:	tbnz	x9, #63, 2db4 <deflate_slow+0x464>
    2d6c:	ldr	x10, [x19, #96]
    2d70:	add	x1, x10, w9, uxtw
    2d74:	b	2db8 <deflate_slow+0x468>
    2d78:	mov	x1, xzr
    2d7c:	sub	x2, x8, x9
    2d80:	mov	w3, #0x1                   	// #1
    2d84:	mov	x0, x19
    2d88:	bl	0 <_tr_flush_block>
    2d8c:	ldr	w8, [x19, #172]
    2d90:	ldr	x0, [x19]
    2d94:	str	x8, [x19, #152]
    2d98:	bl	1904 <flush_pending>
    2d9c:	ldr	x8, [x19]
    2da0:	ldr	w8, [x8, #32]
    2da4:	cmp	w8, #0x0
    2da8:	mov	w8, #0x2                   	// #2
    2dac:	cinc	w0, w8, ne  // ne = any
    2db0:	b	2df0 <deflate_slow+0x4a0>
    2db4:	mov	x1, xzr
    2db8:	sub	x2, x8, x9
    2dbc:	mov	x0, x19
    2dc0:	mov	w3, wzr
    2dc4:	bl	0 <_tr_flush_block>
    2dc8:	ldr	w8, [x19, #172]
    2dcc:	ldr	x0, [x19]
    2dd0:	str	x8, [x19, #152]
    2dd4:	bl	1904 <flush_pending>
    2dd8:	ldr	x8, [x19]
    2ddc:	ldr	w8, [x8, #32]
    2de0:	cbz	w8, 2dec <deflate_slow+0x49c>
    2de4:	mov	w0, #0x1                   	// #1
    2de8:	b	2df0 <deflate_slow+0x4a0>
    2dec:	mov	w0, wzr
    2df0:	ldp	x20, x19, [sp, #48]
    2df4:	ldp	x22, x21, [sp, #32]
    2df8:	ldp	x24, x23, [sp, #16]
    2dfc:	ldp	x29, x30, [sp], #64
    2e00:	ret

0000000000002e04 <longest_match>:
    2e04:	stp	x22, x21, [sp, #-32]!
    2e08:	stp	x20, x19, [sp, #16]
    2e0c:	ldr	x8, [x0, #96]
    2e10:	ldr	w15, [x0, #172]
    2e14:	ldr	w14, [x0, #80]
    2e18:	ldp	w12, w17, [x0, #184]
    2e1c:	ldp	w2, w18, [x0, #204]
    2e20:	sxtw	x12, w12
    2e24:	ldr	w11, [x0, #180]
    2e28:	add	x13, x8, x15
    2e2c:	sub	w16, w14, #0x106
    2e30:	add	x5, x13, x12
    2e34:	ldr	x9, [x0, #112]
    2e38:	ldr	w10, [x0, #88]
    2e3c:	subs	w16, w15, w16
    2e40:	ldurb	w4, [x5, #-1]
    2e44:	ldrb	w5, [x5]
    2e48:	lsr	w3, w17, #2
    2e4c:	csel	w16, wzr, w16, cc  // cc = lo, ul, last
    2e50:	cmp	w12, w2
    2e54:	csel	w17, w17, w3, cc  // cc = lo, ul, last
    2e58:	cmp	w18, w11
    2e5c:	add	x14, x8, #0x5
    2e60:	add	x15, x13, #0x102
    2e64:	csel	w18, w11, w18, hi  // hi = pmore
    2e68:	mov	w2, #0x102                 	// #258
    2e6c:	mov	x3, #0x10100000000         	// #1103806595072
    2e70:	mov	w6, w1
    2e74:	add	x7, x8, x6
    2e78:	sxtw	x19, w12
    2e7c:	ldrb	w20, [x7, x19]
    2e80:	cmp	w20, w5, uxtb
    2e84:	b.ne	2ff0 <longest_match+0x1ec>  // b.any
    2e88:	add	x19, x19, x7
    2e8c:	ldurb	w19, [x19, #-1]
    2e90:	cmp	w19, w4, uxtb
    2e94:	b.ne	2ff0 <longest_match+0x1ec>  // b.any
    2e98:	ldrb	w19, [x7]
    2e9c:	ldrb	w20, [x13]
    2ea0:	cmp	w19, w20
    2ea4:	b.ne	2ff0 <longest_match+0x1ec>  // b.any
    2ea8:	ldrb	w7, [x7, #1]
    2eac:	ldrb	w19, [x13, #1]
    2eb0:	cmp	w7, w19
    2eb4:	b.ne	2ff0 <longest_match+0x1ec>  // b.any
    2eb8:	mov	x7, xzr
    2ebc:	add	x6, x14, x6
    2ec0:	add	x19, x13, x7
    2ec4:	add	x20, x6, x7
    2ec8:	ldrb	w21, [x19, #3]
    2ecc:	ldurb	w22, [x20, #-2]
    2ed0:	cmp	w21, w22
    2ed4:	b.ne	2f80 <longest_match+0x17c>  // b.any
    2ed8:	ldrb	w19, [x19, #4]
    2edc:	ldurb	w20, [x20, #-1]
    2ee0:	cmp	w19, w20
    2ee4:	b.ne	2f88 <longest_match+0x184>  // b.any
    2ee8:	add	x19, x13, x7
    2eec:	ldrb	w20, [x19, #5]
    2ef0:	ldrb	w21, [x6, x7]
    2ef4:	cmp	w20, w21
    2ef8:	b.ne	2f94 <longest_match+0x190>  // b.any
    2efc:	add	x20, x6, x7
    2f00:	ldrb	w19, [x19, #6]
    2f04:	ldrb	w21, [x20, #1]
    2f08:	cmp	w19, w21
    2f0c:	b.ne	2f9c <longest_match+0x198>  // b.any
    2f10:	add	x19, x13, x7
    2f14:	ldrb	w21, [x19, #7]
    2f18:	ldrb	w20, [x20, #2]
    2f1c:	cmp	w21, w20
    2f20:	b.ne	2fa8 <longest_match+0x1a4>  // b.any
    2f24:	add	x20, x6, x7
    2f28:	ldrb	w19, [x19, #8]
    2f2c:	ldrb	w21, [x20, #3]
    2f30:	cmp	w19, w21
    2f34:	b.ne	2fb0 <longest_match+0x1ac>  // b.any
    2f38:	add	x19, x13, x7
    2f3c:	ldrb	w21, [x19, #9]
    2f40:	ldrb	w20, [x20, #4]
    2f44:	cmp	w21, w20
    2f48:	b.ne	2fbc <longest_match+0x1b8>  // b.any
    2f4c:	add	x20, x7, #0x2
    2f50:	cmp	x20, #0xf9
    2f54:	add	x20, x7, #0x8
    2f58:	b.hi	2f74 <longest_match+0x170>  // b.pmore
    2f5c:	add	x7, x6, x7
    2f60:	ldrb	w19, [x19, #10]
    2f64:	ldrb	w7, [x7, #5]
    2f68:	cmp	w19, w7
    2f6c:	mov	x7, x20
    2f70:	b.eq	2ec0 <longest_match+0xbc>  // b.none
    2f74:	add	x6, x13, x20
    2f78:	add	x6, x6, #0x2
    2f7c:	b	2fc0 <longest_match+0x1bc>
    2f80:	add	x6, x19, #0x3
    2f84:	b	2fc0 <longest_match+0x1bc>
    2f88:	add	x6, x13, x7
    2f8c:	add	x6, x6, #0x4
    2f90:	b	2fc0 <longest_match+0x1bc>
    2f94:	add	x6, x19, #0x5
    2f98:	b	2fc0 <longest_match+0x1bc>
    2f9c:	add	x6, x13, x7
    2fa0:	add	x6, x6, #0x6
    2fa4:	b	2fc0 <longest_match+0x1bc>
    2fa8:	add	x6, x19, #0x7
    2fac:	b	2fc0 <longest_match+0x1bc>
    2fb0:	add	x6, x13, x7
    2fb4:	add	x6, x6, #0x8
    2fb8:	b	2fc0 <longest_match+0x1bc>
    2fbc:	add	x6, x19, #0x9
    2fc0:	sub	x7, x15, x6
    2fc4:	sub	x6, x2, w7, sxtw
    2fc8:	cmp	w6, w12
    2fcc:	b.le	2ff0 <longest_match+0x1ec>
    2fd0:	cmp	w6, w18
    2fd4:	str	w1, [x0, #176]
    2fd8:	b.ge	301c <longest_match+0x218>  // b.tcont
    2fdc:	sub	x12, x3, x7, lsl #32
    2fe0:	asr	x12, x12, #32
    2fe4:	ldrb	w4, [x13, x12]
    2fe8:	ldrb	w5, [x13, x6]
    2fec:	mov	w12, w6
    2ff0:	and	x1, x1, x10
    2ff4:	ldrh	w1, [x9, x1, lsl #1]
    2ff8:	cmp	w16, w1
    2ffc:	b.cs	3008 <longest_match+0x204>  // b.hs, b.nlast
    3000:	subs	w17, w17, #0x1
    3004:	b.ne	2e70 <longest_match+0x6c>  // b.any
    3008:	ldp	x20, x19, [sp, #16]
    300c:	cmp	w12, w11
    3010:	csel	w0, w11, w12, hi  // hi = pmore
    3014:	ldp	x22, x21, [sp], #32
    3018:	ret
    301c:	mov	w12, w6
    3020:	b	3008 <longest_match+0x204>

0000000000003024 <read_buf>:
    3024:	stp	x29, x30, [sp, #-48]!
    3028:	stp	x22, x21, [sp, #16]
    302c:	stp	x20, x19, [sp, #32]
    3030:	ldr	w8, [x0, #8]
    3034:	mov	x29, sp
    3038:	cmp	w8, w2
    303c:	csel	w19, w2, w8, hi  // hi = pmore
    3040:	cbz	w19, 30c0 <read_buf+0x9c>
    3044:	mov	x22, x1
    3048:	ldr	x1, [x0]
    304c:	sub	w8, w8, w19
    3050:	mov	w21, w19
    3054:	mov	x20, x0
    3058:	str	w8, [x0, #8]
    305c:	mov	x0, x22
    3060:	mov	x2, x21
    3064:	bl	0 <memcpy>
    3068:	ldr	x8, [x20, #56]
    306c:	ldr	w8, [x8, #48]
    3070:	cmp	w8, #0x2
    3074:	b.eq	3094 <read_buf+0x70>  // b.none
    3078:	cmp	w8, #0x1
    307c:	b.ne	30a8 <read_buf+0x84>  // b.any
    3080:	ldr	x0, [x20, #96]
    3084:	mov	x1, x22
    3088:	mov	w2, w19
    308c:	bl	0 <adler32>
    3090:	b	30a4 <read_buf+0x80>
    3094:	ldr	x0, [x20, #96]
    3098:	mov	x1, x22
    309c:	mov	w2, w19
    30a0:	bl	0 <crc32>
    30a4:	str	x0, [x20, #96]
    30a8:	ldr	x8, [x20]
    30ac:	ldr	x9, [x20, #16]
    30b0:	add	x8, x8, x21
    30b4:	add	x9, x9, x21
    30b8:	str	x8, [x20]
    30bc:	str	x9, [x20, #16]
    30c0:	mov	w0, w19
    30c4:	ldp	x20, x19, [sp, #32]
    30c8:	ldp	x22, x21, [sp, #16]
    30cc:	ldp	x29, x30, [sp], #48
    30d0:	ret

infback.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflateBackInit_>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	stp	x22, x21, [sp, #16]
   8:	stp	x20, x19, [sp, #32]
   c:	mov	x29, sp
  10:	cbz	x3, a4 <inflateBackInit_+0xa4>
  14:	mov	x21, x0
  18:	cmp	w4, #0x70
  1c:	mov	w0, #0xfffffffa            	// #-6
  20:	b.ne	a8 <inflateBackInit_+0xa8>  // b.any
  24:	ldrb	w8, [x3]
  28:	cmp	w8, #0x31
  2c:	b.ne	a8 <inflateBackInit_+0xa8>  // b.any
  30:	and	w8, w1, #0xfffffff8
  34:	mov	w20, w1
  38:	cmp	w8, #0x8
  3c:	mov	w0, #0xfffffffe            	// #-2
  40:	b.ne	a8 <inflateBackInit_+0xa8>  // b.any
  44:	cbz	x21, a8 <inflateBackInit_+0xa8>
  48:	mov	x19, x2
  4c:	cbz	x2, a8 <inflateBackInit_+0xa8>
  50:	ldr	x8, [x21, #64]
  54:	str	xzr, [x21, #48]
  58:	cbz	x8, b8 <inflateBackInit_+0xb8>
  5c:	ldr	x8, [x21, #72]
  60:	cbz	x8, d0 <inflateBackInit_+0xd0>
  64:	ldr	x8, [x21, #64]
  68:	ldr	x0, [x21, #80]
  6c:	mov	w1, #0x1                   	// #1
  70:	mov	w2, #0x1bf8                	// #7160
  74:	mov	w22, #0x1                   	// #1
  78:	blr	x8
  7c:	cbz	x0, e0 <inflateBackInit_+0xe0>
  80:	mov	x8, x0
  84:	mov	w0, wzr
  88:	mov	w9, #0x8000                	// #32768
  8c:	lsl	w10, w22, w20
  90:	str	x8, [x21, #56]
  94:	str	w9, [x8, #28]
  98:	stp	w20, w10, [x8, #56]
  9c:	stp	xzr, x19, [x8, #64]
  a0:	b	a8 <inflateBackInit_+0xa8>
  a4:	mov	w0, #0xfffffffa            	// #-6
  a8:	ldp	x20, x19, [sp, #32]
  ac:	ldp	x22, x21, [sp, #16]
  b0:	ldp	x29, x30, [sp], #48
  b4:	ret
  b8:	adrp	x8, 0 <zcalloc>
  bc:	add	x8, x8, #0x0
  c0:	str	x8, [x21, #64]
  c4:	str	xzr, [x21, #80]
  c8:	ldr	x8, [x21, #72]
  cc:	cbnz	x8, 64 <inflateBackInit_+0x64>
  d0:	adrp	x8, 0 <zcfree>
  d4:	add	x8, x8, #0x0
  d8:	str	x8, [x21, #72]
  dc:	b	64 <inflateBackInit_+0x64>
  e0:	mov	w0, #0xfffffffc            	// #-4
  e4:	b	a8 <inflateBackInit_+0xa8>

00000000000000e8 <inflateBack>:
  e8:	sub	sp, sp, #0xc0
  ec:	stp	x29, x30, [sp, #96]
  f0:	add	x29, sp, #0x60
  f4:	stp	x28, x27, [sp, #112]
  f8:	stp	x26, x25, [sp, #128]
  fc:	stp	x24, x23, [sp, #144]
 100:	stp	x22, x21, [sp, #160]
 104:	stp	x20, x19, [sp, #176]
 108:	stur	x2, [x29, #-16]
 10c:	cbz	x0, 14c <inflateBack+0x64>
 110:	ldr	x23, [x0, #56]
 114:	mov	x24, x0
 118:	cbz	x23, 14c <inflateBack+0x64>
 11c:	mov	w8, #0x3f3f                	// #16191
 120:	str	xzr, [x24, #48]
 124:	str	x8, [x23, #8]
 128:	str	wzr, [x23, #64]
 12c:	ldr	x8, [x24]
 130:	mov	x21, x3
 134:	mov	x25, x1
 138:	stur	x4, [x29, #-32]
 13c:	stur	x8, [x29, #-8]
 140:	cbz	x8, 154 <inflateBack+0x6c>
 144:	ldr	w20, [x24, #8]
 148:	b	158 <inflateBack+0x70>
 14c:	mov	w0, #0xfffffffe            	// #-2
 150:	b	f00 <inflateBack+0xe18>
 154:	mov	w20, wzr
 158:	add	x8, x23, #0x558
 15c:	str	x8, [sp, #48]
 160:	add	x8, x23, #0x90
 164:	ldr	x26, [x23, #72]
 168:	ldr	w28, [x23, #60]
 16c:	str	x8, [sp, #40]
 170:	add	x8, x23, #0x78
 174:	str	x8, [sp, #32]
 178:	add	x8, x23, #0x98
 17c:	str	x8, [sp, #24]
 180:	add	x8, x23, #0x318
 184:	mov	x22, xzr
 188:	mov	w27, wzr
 18c:	stur	x8, [x29, #-40]
 190:	add	x8, x23, #0x7c
 194:	str	x8, [sp, #16]
 198:	mov	w19, #0xffffc0c1            	// #-16191
 19c:	ldr	w8, [x23, #8]
 1a0:	add	w8, w8, w19
 1a4:	cmp	w8, #0x12
 1a8:	b.hi	f20 <inflateBack+0xe38>  // b.pmore
 1ac:	adrp	x11, 0 <inflateBackInit_>
 1b0:	add	x11, x11, #0x0
 1b4:	adr	x9, 1c8 <inflateBack+0xe0>
 1b8:	ldrh	w10, [x11, x8, lsl #1]
 1bc:	add	x9, x9, x10, lsl #2
 1c0:	mov	w0, #0xfffffffd            	// #-3
 1c4:	br	x9
 1c8:	ldr	w8, [x23, #12]
 1cc:	cbz	w8, 2bc <inflateBack+0x1d4>
 1d0:	and	w8, w27, #0x7
 1d4:	lsr	x22, x22, x8
 1d8:	mov	w8, #0x3f50                	// #16208
 1dc:	and	w27, w27, #0xfffffff8
 1e0:	str	w8, [x23, #8]
 1e4:	b	19c <inflateBack+0xb4>
 1e8:	and	w8, w27, #0x7
 1ec:	and	w27, w27, #0xfffffff8
 1f0:	cmp	w27, #0x1f
 1f4:	lsr	x22, x22, x8
 1f8:	b.hi	33c <inflateBack+0x254>  // b.pmore
 1fc:	mov	w8, #0x27                  	// #39
 200:	sub	w8, w8, w27
 204:	and	w8, w8, #0xfffffff8
 208:	mov	w19, w27
 20c:	add	w27, w8, w27
 210:	b	23c <inflateBack+0x154>
 214:	ldur	x8, [x29, #-8]
 218:	sub	w20, w20, #0x1
 21c:	cmp	x19, #0x18
 220:	add	x9, x8, #0x1
 224:	stur	x9, [x29, #-8]
 228:	ldrb	w8, [x8]
 22c:	lsl	x8, x8, x19
 230:	add	x19, x19, #0x8
 234:	add	x22, x8, x22
 238:	b.cs	338 <inflateBack+0x250>  // b.hs, b.nlast
 23c:	cbnz	w20, 214 <inflateBack+0x12c>
 240:	ldur	x0, [x29, #-16]
 244:	sub	x1, x29, #0x8
 248:	blr	x25
 24c:	mov	w20, w0
 250:	cbnz	w0, 214 <inflateBack+0x12c>
 254:	b	eec <inflateBack+0xe04>
 258:	cmp	w27, #0xd
 25c:	b.hi	35c <inflateBack+0x274>  // b.pmore
 260:	mov	w8, #0x15                  	// #21
 264:	sub	w8, w8, w27
 268:	and	w8, w8, #0xfffffff8
 26c:	mov	w19, w27
 270:	add	w27, w8, w27
 274:	b	2a0 <inflateBack+0x1b8>
 278:	ldur	x8, [x29, #-8]
 27c:	sub	w20, w20, #0x1
 280:	cmp	x19, #0x6
 284:	add	x9, x8, #0x1
 288:	stur	x9, [x29, #-8]
 28c:	ldrb	w8, [x8]
 290:	lsl	x8, x8, x19
 294:	add	x19, x19, #0x8
 298:	add	x22, x8, x22
 29c:	b.cs	358 <inflateBack+0x270>  // b.hs, b.nlast
 2a0:	cbnz	w20, 278 <inflateBack+0x190>
 2a4:	ldur	x0, [x29, #-16]
 2a8:	sub	x1, x29, #0x8
 2ac:	blr	x25
 2b0:	mov	w20, w0
 2b4:	cbnz	w0, 278 <inflateBack+0x190>
 2b8:	b	eec <inflateBack+0xe04>
 2bc:	cmp	w27, #0x2
 2c0:	b.hi	300 <inflateBack+0x218>  // b.pmore
 2c4:	cbnz	w20, 2dc <inflateBack+0x1f4>
 2c8:	ldur	x0, [x29, #-16]
 2cc:	sub	x1, x29, #0x8
 2d0:	blr	x25
 2d4:	mov	w20, w0
 2d8:	cbz	w0, eec <inflateBack+0xe04>
 2dc:	ldur	x8, [x29, #-8]
 2e0:	sub	w20, w20, #0x1
 2e4:	add	x9, x8, #0x1
 2e8:	stur	x9, [x29, #-8]
 2ec:	ldrb	w8, [x8]
 2f0:	mov	w9, w27
 2f4:	add	w27, w27, #0x8
 2f8:	lsl	x8, x8, x9
 2fc:	add	x22, x8, x22
 300:	adrp	x11, 0 <inflateBackInit_>
 304:	and	w8, w22, #0x1
 308:	ubfx	w9, w22, #1, #2
 30c:	add	x11, x11, #0x0
 310:	str	w8, [x23, #12]
 314:	adr	x10, 328 <inflateBack+0x240>
 318:	ldrb	w8, [x11, x9]
 31c:	add	x10, x10, x8, lsl #2
 320:	mov	w8, #0x3f41                	// #16193
 324:	br	x10
 328:	mov	x0, x23
 32c:	bl	f58 <fixedtables>
 330:	mov	w8, #0x3f48                	// #16200
 334:	b	700 <inflateBack+0x618>
 338:	mov	w19, #0xffffc0c1            	// #-16191
 33c:	lsr	x8, x22, #16
 340:	eor	x8, x8, #0xffff
 344:	cmp	x8, w22, uxth
 348:	b.eq	df8 <inflateBack+0xd10>  // b.none
 34c:	adrp	x8, 0 <inflateBackInit_>
 350:	add	x8, x8, #0x0
 354:	b	494 <inflateBack+0x3ac>
 358:	mov	w19, #0xffffc0c1            	// #-16191
 35c:	and	w9, w22, #0x1f
 360:	ubfx	w8, w22, #5, #5
 364:	ubfx	w10, w22, #10, #4
 368:	lsr	x22, x22, #14
 36c:	add	w11, w9, #0x101
 370:	add	w12, w8, #0x1
 374:	add	w10, w10, #0x4
 378:	cmp	w9, #0x1d
 37c:	sub	w27, w27, #0xe
 380:	stp	w11, w12, [x23, #132]
 384:	str	w10, [x23, #128]
 388:	b.hi	48c <inflateBack+0x3a4>  // b.pmore
 38c:	cmp	w8, #0x1e
 390:	b.cs	48c <inflateBack+0x3a4>  // b.hs, b.nlast
 394:	ldr	w8, [x23, #128]
 398:	adrp	x11, 0 <inflateBackInit_>
 39c:	add	x11, x11, #0x0
 3a0:	str	wzr, [x23, #140]
 3a4:	cbnz	w8, 460 <inflateBack+0x378>
 3a8:	ldr	w8, [x23, #140]
 3ac:	cmp	w8, #0x12
 3b0:	b.hi	3d0 <inflateBack+0x2e8>  // b.pmore
 3b4:	ldrh	w9, [x11, x8, lsl #1]
 3b8:	add	x8, x8, #0x1
 3bc:	cmp	x8, #0x13
 3c0:	add	x9, x23, x9, lsl #1
 3c4:	strh	wzr, [x9, #152]
 3c8:	b.ne	3b4 <inflateBack+0x2cc>  // b.any
 3cc:	str	w8, [x23, #140]
 3d0:	ldp	x3, x8, [sp, #40]
 3d4:	ldur	x5, [x29, #-40]
 3d8:	mov	w2, #0x13                  	// #19
 3dc:	mov	w0, wzr
 3e0:	str	x8, [x23, #144]
 3e4:	str	x8, [x23, #104]
 3e8:	mov	w8, #0x7                   	// #7
 3ec:	str	w8, [x23, #120]
 3f0:	ldp	x1, x4, [sp, #24]
 3f4:	bl	0 <inflate_table>
 3f8:	cbz	w0, 4a4 <inflateBack+0x3bc>
 3fc:	adrp	x8, 0 <inflateBackInit_>
 400:	add	x8, x8, #0x0
 404:	b	494 <inflateBack+0x3ac>
 408:	ldur	x8, [x29, #-8]
 40c:	sub	w20, w20, #0x1
 410:	add	x9, x8, #0x1
 414:	stur	x9, [x29, #-8]
 418:	ldrb	w8, [x8]
 41c:	mov	w9, w27
 420:	add	w27, w27, #0x8
 424:	lsl	x8, x8, x9
 428:	add	x22, x8, x22
 42c:	ldr	w8, [x23, #140]
 430:	and	w10, w22, #0x7
 434:	lsr	x22, x22, #3
 438:	sub	w27, w27, #0x3
 43c:	ldrh	w9, [x11, x8, lsl #1]
 440:	add	w8, w8, #0x1
 444:	str	w8, [x23, #140]
 448:	add	x8, x23, x9, lsl #1
 44c:	strh	w10, [x8, #152]
 450:	ldr	w8, [x23, #140]
 454:	ldr	w9, [x23, #128]
 458:	cmp	w8, w9
 45c:	b.cs	3a8 <inflateBack+0x2c0>  // b.hs, b.nlast
 460:	cmp	w27, #0x2
 464:	b.hi	42c <inflateBack+0x344>  // b.pmore
 468:	cbnz	w20, 408 <inflateBack+0x320>
 46c:	ldur	x0, [x29, #-16]
 470:	sub	x1, x29, #0x8
 474:	blr	x25
 478:	adrp	x11, 0 <inflateBackInit_>
 47c:	add	x11, x11, #0x0
 480:	mov	w20, w0
 484:	cbnz	w0, 408 <inflateBack+0x320>
 488:	b	eec <inflateBack+0xe04>
 48c:	adrp	x8, 0 <inflateBackInit_>
 490:	add	x8, x8, #0x0
 494:	str	x8, [x24, #48]
 498:	mov	w8, #0x3f51                	// #16209
 49c:	str	w8, [x23, #8]
 4a0:	b	19c <inflateBack+0xb4>
 4a4:	ldp	w8, w9, [x23, #132]
 4a8:	str	wzr, [x23, #140]
 4ac:	cmn	w9, w8
 4b0:	b.ne	824 <inflateBack+0x73c>  // b.any
 4b4:	ldr	w8, [x23, #8]
 4b8:	mov	w9, #0x3f51                	// #16209
 4bc:	cmp	w8, w9
 4c0:	b.eq	19c <inflateBack+0xb4>  // b.none
 4c4:	ldrh	w8, [x23, #664]
 4c8:	cbz	w8, c70 <inflateBack+0xb88>
 4cc:	ldp	x19, x8, [sp, #40]
 4d0:	ldr	w2, [x23, #132]
 4d4:	ldur	x5, [x29, #-40]
 4d8:	mov	w0, #0x1                   	// #1
 4dc:	str	x8, [x23, #144]
 4e0:	str	x8, [x23, #104]
 4e4:	mov	w8, #0x9                   	// #9
 4e8:	str	w8, [x23, #120]
 4ec:	ldp	x1, x4, [sp, #24]
 4f0:	mov	x3, x19
 4f4:	bl	0 <inflate_table>
 4f8:	cbnz	w0, ec4 <inflateBack+0xddc>
 4fc:	ldr	x8, [x23, #144]
 500:	ldp	w9, w2, [x23, #132]
 504:	ldr	x4, [sp, #16]
 508:	ldur	x5, [x29, #-40]
 50c:	str	x8, [x23, #112]
 510:	add	x8, x23, x9, lsl #1
 514:	mov	w10, #0x6                   	// #6
 518:	add	x1, x8, #0x98
 51c:	mov	w0, #0x2                   	// #2
 520:	mov	x3, x19
 524:	str	w10, [x23, #124]
 528:	bl	0 <inflate_table>
 52c:	cbnz	w0, ed0 <inflateBack+0xde8>
 530:	mov	w8, #0x3f48                	// #16200
 534:	mov	w19, #0xffffc0c1            	// #-16191
 538:	str	w8, [x23, #8]
 53c:	cmp	w28, #0x102
 540:	b.cc	5a4 <inflateBack+0x4bc>  // b.lo, b.ul, b.last
 544:	cmp	w20, #0x5
 548:	b.ls	5a4 <inflateBack+0x4bc>  // b.plast
 54c:	str	x26, [x24, #24]
 550:	str	w28, [x24, #32]
 554:	ldur	x8, [x29, #-8]
 558:	str	w20, [x24, #8]
 55c:	str	x8, [x24]
 560:	ldp	w1, w8, [x23, #60]
 564:	str	x22, [x23, #80]
 568:	str	w27, [x23, #88]
 56c:	cmp	w8, w1
 570:	b.cs	57c <inflateBack+0x494>  // b.hs, b.nlast
 574:	sub	w8, w1, w28
 578:	str	w8, [x23, #64]
 57c:	mov	x0, x24
 580:	bl	0 <inflate_fast>
 584:	ldr	x8, [x24]
 588:	ldr	x26, [x24, #24]
 58c:	ldr	w28, [x24, #32]
 590:	stur	x8, [x29, #-8]
 594:	ldr	w20, [x24, #8]
 598:	ldr	x22, [x23, #80]
 59c:	ldr	w27, [x23, #88]
 5a0:	b	19c <inflateBack+0xb4>
 5a4:	ldr	w8, [x23, #120]
 5a8:	ldr	x9, [x23, #104]
 5ac:	mov	w19, #0xffffffff            	// #-1
 5b0:	stur	x21, [x29, #-24]
 5b4:	lsl	w8, w19, w8
 5b8:	bic	w8, w22, w8
 5bc:	add	x8, x9, w8, uxtw #2
 5c0:	ldrb	w21, [x8, #1]
 5c4:	cmp	w27, w21
 5c8:	b.cs	634 <inflateBack+0x54c>  // b.hs, b.nlast
 5cc:	mov	w27, w27
 5d0:	b	614 <inflateBack+0x52c>
 5d4:	ldur	x8, [x29, #-8]
 5d8:	sub	w20, w20, #0x1
 5dc:	add	x9, x8, #0x1
 5e0:	stur	x9, [x29, #-8]
 5e4:	ldrb	w9, [x8]
 5e8:	ldr	w10, [x23, #120]
 5ec:	ldr	x8, [x23, #104]
 5f0:	lsl	x9, x9, x27
 5f4:	add	x22, x9, x22
 5f8:	lsl	w9, w19, w10
 5fc:	bic	w9, w22, w9
 600:	add	x10, x8, w9, uxtw #2
 604:	ldrb	w21, [x10, #1]
 608:	add	x27, x27, #0x8
 60c:	cmp	x27, x21
 610:	b.cs	630 <inflateBack+0x548>  // b.hs, b.nlast
 614:	cbnz	w20, 5d4 <inflateBack+0x4ec>
 618:	ldur	x0, [x29, #-16]
 61c:	sub	x1, x29, #0x8
 620:	blr	x25
 624:	mov	w20, w0
 628:	cbnz	w0, 5d4 <inflateBack+0x4ec>
 62c:	b	eec <inflateBack+0xe04>
 630:	add	x8, x8, x9, lsl #2
 634:	add	x9, x8, #0x2
 638:	ldrb	w8, [x8]
 63c:	ldrh	w19, [x9]
 640:	cbz	w8, 730 <inflateBack+0x648>
 644:	and	w9, w8, #0xf0
 648:	cbnz	w9, 730 <inflateBack+0x648>
 64c:	add	w8, w21, w8
 650:	mov	w10, #0xffffffff            	// #-1
 654:	ldr	x9, [x23, #104]
 658:	lsl	w11, w10, w8
 65c:	bic	w8, w22, w11
 660:	lsr	w8, w8, w21
 664:	add	w8, w8, w19
 668:	add	x10, x9, w8, uxtw #2
 66c:	ldrb	w10, [x10, #1]
 670:	add	w12, w21, w10
 674:	cmp	w12, w27
 678:	b.ls	718 <inflateBack+0x630>  // b.plast
 67c:	str	x24, [sp, #8]
 680:	mvn	w24, w11
 684:	b	6cc <inflateBack+0x5e4>
 688:	ldur	x8, [x29, #-8]
 68c:	sub	w20, w20, #0x1
 690:	add	x9, x8, #0x1
 694:	stur	x9, [x29, #-8]
 698:	ldrb	w8, [x8]
 69c:	ldr	x9, [x23, #104]
 6a0:	lsl	x8, x8, x27
 6a4:	add	x22, x8, x22
 6a8:	and	w8, w22, w24
 6ac:	lsr	w8, w8, w21
 6b0:	add	w8, w8, w19
 6b4:	add	x10, x9, w8, uxtw #2
 6b8:	ldrb	w10, [x10, #1]
 6bc:	add	w27, w27, #0x8
 6c0:	add	w11, w21, w10
 6c4:	cmp	w11, w27
 6c8:	b.ls	710 <inflateBack+0x628>  // b.plast
 6cc:	cbnz	w20, 688 <inflateBack+0x5a0>
 6d0:	ldur	x0, [x29, #-16]
 6d4:	sub	x1, x29, #0x8
 6d8:	blr	x25
 6dc:	mov	w20, w0
 6e0:	cbnz	w0, 688 <inflateBack+0x5a0>
 6e4:	b	ee8 <inflateBack+0xe00>
 6e8:	mov	w8, #0x3f44                	// #16196
 6ec:	b	700 <inflateBack+0x618>
 6f0:	adrp	x8, 0 <inflateBackInit_>
 6f4:	add	x8, x8, #0x0
 6f8:	str	x8, [x24, #48]
 6fc:	mov	w8, #0x3f51                	// #16209
 700:	str	w8, [x23, #8]
 704:	lsr	x22, x22, #3
 708:	sub	w27, w27, #0x3
 70c:	b	19c <inflateBack+0xb4>
 710:	ldr	x24, [sp, #8]
 714:	mov	w8, w8
 718:	add	x8, x9, x8, lsl #2
 71c:	ldrh	w19, [x8, #2]
 720:	ldrb	w8, [x8]
 724:	lsr	x22, x22, x21
 728:	sub	w27, w27, w21
 72c:	mov	w21, w10
 730:	lsr	x22, x22, x21
 734:	sub	w27, w27, w21
 738:	str	w19, [x23, #92]
 73c:	cbz	w8, 7d0 <inflateBack+0x6e8>
 740:	mov	w19, #0xffffc0c1            	// #-16191
 744:	tbnz	w8, #5, 814 <inflateBack+0x72c>
 748:	tbnz	w8, #6, b18 <inflateBack+0xa30>
 74c:	ands	w8, w8, #0xf
 750:	str	w8, [x23, #100]
 754:	b.eq	b34 <inflateBack+0xa4c>  // b.none
 758:	ldr	w8, [x23, #100]
 75c:	mov	w19, #0xffffffff            	// #-1
 760:	cmp	w27, w8
 764:	b.cc	7b4 <inflateBack+0x6cc>  // b.lo, b.ul, b.last
 768:	ldr	w9, [x23, #92]
 76c:	lsl	w10, w19, w8
 770:	bic	w10, w22, w10
 774:	lsr	x22, x22, x8
 778:	add	w9, w9, w10
 77c:	sub	w27, w27, w8
 780:	str	w9, [x23, #92]
 784:	b	b38 <inflateBack+0xa50>
 788:	ldur	x8, [x29, #-8]
 78c:	sub	w20, w20, #0x1
 790:	add	x9, x8, #0x1
 794:	stur	x9, [x29, #-8]
 798:	ldrb	w9, [x8]
 79c:	ldr	w8, [x23, #100]
 7a0:	lsl	x9, x9, x27
 7a4:	add	w27, w27, #0x8
 7a8:	cmp	w27, w8
 7ac:	add	x22, x9, x22
 7b0:	b.cs	768 <inflateBack+0x680>  // b.hs, b.nlast
 7b4:	cbnz	w20, 788 <inflateBack+0x6a0>
 7b8:	ldur	x0, [x29, #-16]
 7bc:	sub	x1, x29, #0x8
 7c0:	blr	x25
 7c4:	mov	w20, w0
 7c8:	cbnz	w0, 788 <inflateBack+0x6a0>
 7cc:	b	eec <inflateBack+0xe04>
 7d0:	ldur	x21, [x29, #-24]
 7d4:	mov	w19, #0xffffc0c1            	// #-16191
 7d8:	cbnz	w28, 7fc <inflateBack+0x714>
 7dc:	ldr	w28, [x23, #60]
 7e0:	ldr	x26, [x23, #72]
 7e4:	ldur	x0, [x29, #-32]
 7e8:	mov	w2, w28
 7ec:	mov	x1, x26
 7f0:	str	w28, [x23, #64]
 7f4:	blr	x21
 7f8:	cbnz	w0, ef0 <inflateBack+0xe08>
 7fc:	ldr	w8, [x23, #92]
 800:	sub	w28, w28, #0x1
 804:	strb	w8, [x26], #1
 808:	mov	w8, #0x3f48                	// #16200
 80c:	str	w8, [x23, #8]
 810:	b	19c <inflateBack+0xb4>
 814:	ldur	x21, [x29, #-24]
 818:	mov	w8, #0x3f3f                	// #16191
 81c:	str	w8, [x23, #8]
 820:	b	19c <inflateBack+0xb4>
 824:	str	x24, [sp, #8]
 828:	stur	x21, [x29, #-24]
 82c:	b	864 <inflateBack+0x77c>
 830:	ldr	w9, [x23, #140]
 834:	lsr	x22, x22, x21
 838:	sub	w27, w27, w21
 83c:	ldur	x21, [x29, #-24]
 840:	add	w10, w9, #0x1
 844:	add	x9, x23, x9, lsl #1
 848:	str	w10, [x23, #140]
 84c:	strh	w8, [x9, #152]
 850:	ldp	w8, w9, [x23, #132]
 854:	ldr	w10, [x23, #140]
 858:	add	w8, w9, w8
 85c:	cmp	w10, w8
 860:	b.cs	4b4 <inflateBack+0x3cc>  // b.hs, b.nlast
 864:	ldr	w8, [x23, #120]
 868:	ldr	x9, [x23, #104]
 86c:	mov	w10, #0xffffffff            	// #-1
 870:	lsl	w8, w10, w8
 874:	bic	w8, w22, w8
 878:	add	x8, x9, w8, uxtw #2
 87c:	ldrb	w21, [x8, #1]
 880:	cmp	w27, w21
 884:	b.cs	8f4 <inflateBack+0x80c>  // b.hs, b.nlast
 888:	mov	w27, w27
 88c:	b	8d4 <inflateBack+0x7ec>
 890:	ldur	x8, [x29, #-8]
 894:	sub	w20, w20, #0x1
 898:	add	x9, x8, #0x1
 89c:	stur	x9, [x29, #-8]
 8a0:	ldrb	w9, [x8]
 8a4:	ldr	w10, [x23, #120]
 8a8:	ldr	x8, [x23, #104]
 8ac:	lsl	x9, x9, x27
 8b0:	add	x22, x9, x22
 8b4:	mov	w9, #0xffffffff            	// #-1
 8b8:	lsl	w9, w9, w10
 8bc:	bic	w9, w22, w9
 8c0:	add	x10, x8, w9, uxtw #2
 8c4:	ldrb	w21, [x10, #1]
 8c8:	add	x27, x27, #0x8
 8cc:	cmp	x27, x21
 8d0:	b.cs	8f0 <inflateBack+0x808>  // b.hs, b.nlast
 8d4:	cbnz	w20, 890 <inflateBack+0x7a8>
 8d8:	ldur	x0, [x29, #-16]
 8dc:	sub	x1, x29, #0x8
 8e0:	blr	x25
 8e4:	mov	w20, w0
 8e8:	cbnz	w0, 890 <inflateBack+0x7a8>
 8ec:	b	eec <inflateBack+0xe04>
 8f0:	add	x8, x8, x9, lsl #2
 8f4:	add	x8, x8, #0x2
 8f8:	ldrh	w8, [x8]
 8fc:	cmp	w8, #0xf
 900:	b.ls	830 <inflateBack+0x748>  // b.plast
 904:	cmp	w8, #0x10
 908:	b.eq	980 <inflateBack+0x898>  // b.none
 90c:	cmp	w8, #0x11
 910:	b.ne	9ec <inflateBack+0x904>  // b.any
 914:	add	w19, w21, #0x3
 918:	cmp	w27, w19
 91c:	b.cs	a5c <inflateBack+0x974>  // b.hs, b.nlast
 920:	mvn	w8, w27
 924:	add	w8, w19, w8
 928:	add	w8, w8, #0x8
 92c:	and	w8, w8, #0xfffffff8
 930:	mov	w24, w27
 934:	add	w27, w8, w27
 938:	b	964 <inflateBack+0x87c>
 93c:	ldur	x8, [x29, #-8]
 940:	sub	w20, w20, #0x1
 944:	add	x9, x8, #0x1
 948:	stur	x9, [x29, #-8]
 94c:	ldrb	w8, [x8]
 950:	lsl	x8, x8, x24
 954:	add	x24, x24, #0x8
 958:	cmp	x24, x19
 95c:	add	x22, x8, x22
 960:	b.cs	a58 <inflateBack+0x970>  // b.hs, b.nlast
 964:	cbnz	w20, 93c <inflateBack+0x854>
 968:	ldur	x0, [x29, #-16]
 96c:	sub	x1, x29, #0x8
 970:	blr	x25
 974:	mov	w20, w0
 978:	cbnz	w0, 93c <inflateBack+0x854>
 97c:	b	ee8 <inflateBack+0xe00>
 980:	add	w19, w21, #0x2
 984:	cmp	w27, w19
 988:	b.cs	a80 <inflateBack+0x998>  // b.hs, b.nlast
 98c:	mvn	w8, w27
 990:	add	w8, w19, w8
 994:	add	w8, w8, #0x8
 998:	and	w8, w8, #0xfffffff8
 99c:	mov	w24, w27
 9a0:	add	w27, w8, w27
 9a4:	b	9d0 <inflateBack+0x8e8>
 9a8:	ldur	x8, [x29, #-8]
 9ac:	sub	w20, w20, #0x1
 9b0:	add	x9, x8, #0x1
 9b4:	stur	x9, [x29, #-8]
 9b8:	ldrb	w8, [x8]
 9bc:	lsl	x8, x8, x24
 9c0:	add	x24, x24, #0x8
 9c4:	cmp	x24, x19
 9c8:	add	x22, x8, x22
 9cc:	b.cs	a7c <inflateBack+0x994>  // b.hs, b.nlast
 9d0:	cbnz	w20, 9a8 <inflateBack+0x8c0>
 9d4:	ldur	x0, [x29, #-16]
 9d8:	sub	x1, x29, #0x8
 9dc:	blr	x25
 9e0:	mov	w20, w0
 9e4:	cbnz	w0, 9a8 <inflateBack+0x8c0>
 9e8:	b	ee8 <inflateBack+0xe00>
 9ec:	add	w19, w21, #0x7
 9f0:	cmp	w27, w19
 9f4:	b.cs	abc <inflateBack+0x9d4>  // b.hs, b.nlast
 9f8:	mvn	w8, w27
 9fc:	add	w8, w19, w8
 a00:	add	w8, w8, #0x8
 a04:	and	w8, w8, #0xfffffff8
 a08:	mov	w24, w27
 a0c:	add	w27, w8, w27
 a10:	b	a3c <inflateBack+0x954>
 a14:	ldur	x8, [x29, #-8]
 a18:	sub	w20, w20, #0x1
 a1c:	add	x9, x8, #0x1
 a20:	stur	x9, [x29, #-8]
 a24:	ldrb	w8, [x8]
 a28:	lsl	x8, x8, x24
 a2c:	add	x24, x24, #0x8
 a30:	cmp	x24, x19
 a34:	add	x22, x8, x22
 a38:	b.cs	ab8 <inflateBack+0x9d0>  // b.hs, b.nlast
 a3c:	cbnz	w20, a14 <inflateBack+0x92c>
 a40:	ldur	x0, [x29, #-16]
 a44:	sub	x1, x29, #0x8
 a48:	blr	x25
 a4c:	mov	w20, w0
 a50:	cbnz	w0, a14 <inflateBack+0x92c>
 a54:	b	ee8 <inflateBack+0xe00>
 a58:	ldr	x24, [sp, #8]
 a5c:	lsr	x9, x22, x21
 a60:	sub	w10, w27, w21
 a64:	and	w11, w9, #0x7
 a68:	mov	w8, wzr
 a6c:	lsr	x22, x9, #3
 a70:	add	w9, w11, #0x3
 a74:	sub	w27, w10, #0x3
 a78:	b	ad8 <inflateBack+0x9f0>
 a7c:	ldr	x24, [sp, #8]
 a80:	ldr	w8, [x23, #140]
 a84:	lsr	x22, x22, x21
 a88:	sub	w27, w27, w21
 a8c:	mov	w19, #0xffffc0c1            	// #-16191
 a90:	cbz	w8, ddc <inflateBack+0xcf4>
 a94:	sub	w8, w8, #0x1
 a98:	add	x8, x23, w8, uxtw #1
 a9c:	ldrh	w8, [x8, #152]
 aa0:	ldur	x21, [x29, #-24]
 aa4:	and	w9, w22, #0x3
 aa8:	add	w9, w9, #0x3
 aac:	lsr	x22, x22, #2
 ab0:	sub	w27, w27, #0x2
 ab4:	b	ae0 <inflateBack+0x9f8>
 ab8:	ldr	x24, [sp, #8]
 abc:	lsr	x9, x22, x21
 ac0:	sub	w10, w27, w21
 ac4:	and	w11, w9, #0x7f
 ac8:	mov	w8, wzr
 acc:	lsr	x22, x9, #7
 ad0:	add	w9, w11, #0xb
 ad4:	sub	w27, w10, #0x7
 ad8:	ldur	x21, [x29, #-24]
 adc:	mov	w19, #0xffffc0c1            	// #-16191
 ae0:	ldp	w12, w10, [x23, #136]
 ae4:	ldr	w11, [x23, #132]
 ae8:	add	w10, w10, w9
 aec:	add	w11, w12, w11
 af0:	cmp	w10, w11
 af4:	b.hi	dd4 <inflateBack+0xcec>  // b.pmore
 af8:	ldr	w10, [x23, #140]
 afc:	subs	w9, w9, #0x1
 b00:	add	x11, x23, w10, uxtw #1
 b04:	add	w10, w10, #0x1
 b08:	strh	w8, [x11, #152]
 b0c:	b.ne	afc <inflateBack+0xa14>  // b.any
 b10:	str	w10, [x23, #140]
 b14:	b	850 <inflateBack+0x768>
 b18:	adrp	x8, 0 <inflateBackInit_>
 b1c:	ldur	x21, [x29, #-24]
 b20:	add	x8, x8, #0x0
 b24:	str	x8, [x24, #48]
 b28:	mov	w8, #0x3f51                	// #16209
 b2c:	str	w8, [x23, #8]
 b30:	b	19c <inflateBack+0xb4>
 b34:	mov	w19, #0xffffffff            	// #-1
 b38:	ldr	w8, [x23, #124]
 b3c:	ldr	x9, [x23, #112]
 b40:	lsl	w8, w19, w8
 b44:	bic	w8, w22, w8
 b48:	add	x8, x9, w8, uxtw #2
 b4c:	ldrb	w21, [x8, #1]
 b50:	cmp	w27, w21
 b54:	b.cs	bc0 <inflateBack+0xad8>  // b.hs, b.nlast
 b58:	mov	w27, w27
 b5c:	b	ba0 <inflateBack+0xab8>
 b60:	ldur	x8, [x29, #-8]
 b64:	sub	w20, w20, #0x1
 b68:	add	x9, x8, #0x1
 b6c:	stur	x9, [x29, #-8]
 b70:	ldrb	w9, [x8]
 b74:	ldr	w10, [x23, #124]
 b78:	ldr	x8, [x23, #112]
 b7c:	lsl	x9, x9, x27
 b80:	add	x22, x9, x22
 b84:	lsl	w9, w19, w10
 b88:	bic	w9, w22, w9
 b8c:	add	x10, x8, w9, uxtw #2
 b90:	ldrb	w21, [x10, #1]
 b94:	add	x27, x27, #0x8
 b98:	cmp	x27, x21
 b9c:	b.cs	bbc <inflateBack+0xad4>  // b.hs, b.nlast
 ba0:	cbnz	w20, b60 <inflateBack+0xa78>
 ba4:	ldur	x0, [x29, #-16]
 ba8:	sub	x1, x29, #0x8
 bac:	blr	x25
 bb0:	mov	w20, w0
 bb4:	cbnz	w0, b60 <inflateBack+0xa78>
 bb8:	b	eec <inflateBack+0xe04>
 bbc:	add	x8, x8, x9, lsl #2
 bc0:	add	x9, x8, #0x2
 bc4:	ldrb	w10, [x8]
 bc8:	ldrh	w19, [x9]
 bcc:	tst	w10, #0xf0
 bd0:	b.ne	c9c <inflateBack+0xbb4>  // b.any
 bd4:	add	w9, w21, w10
 bd8:	mov	w10, #0xffffffff            	// #-1
 bdc:	ldr	x8, [x23, #112]
 be0:	lsl	w11, w10, w9
 be4:	bic	w9, w22, w11
 be8:	lsr	w9, w9, w21
 bec:	add	w10, w9, w19
 bf0:	add	x9, x8, w10, uxtw #2
 bf4:	ldrb	w9, [x9, #1]
 bf8:	add	w12, w21, w9
 bfc:	cmp	w12, w27
 c00:	b.ls	c84 <inflateBack+0xb9c>  // b.plast
 c04:	str	x24, [sp, #8]
 c08:	mvn	w24, w11
 c0c:	b	c54 <inflateBack+0xb6c>
 c10:	ldur	x8, [x29, #-8]
 c14:	sub	w20, w20, #0x1
 c18:	add	x9, x8, #0x1
 c1c:	stur	x9, [x29, #-8]
 c20:	ldrb	w8, [x8]
 c24:	lsl	x8, x8, x27
 c28:	add	x22, x8, x22
 c2c:	ldr	x8, [x23, #112]
 c30:	and	w9, w22, w24
 c34:	lsr	w9, w9, w21
 c38:	add	w10, w9, w19
 c3c:	add	x9, x8, w10, uxtw #2
 c40:	ldrb	w9, [x9, #1]
 c44:	add	w27, w27, #0x8
 c48:	add	w11, w21, w9
 c4c:	cmp	w11, w27
 c50:	b.ls	c7c <inflateBack+0xb94>  // b.plast
 c54:	cbnz	w20, c10 <inflateBack+0xb28>
 c58:	ldur	x0, [x29, #-16]
 c5c:	sub	x1, x29, #0x8
 c60:	blr	x25
 c64:	mov	w20, w0
 c68:	cbnz	w0, c10 <inflateBack+0xb28>
 c6c:	b	ee8 <inflateBack+0xe00>
 c70:	adrp	x8, 0 <inflateBackInit_>
 c74:	add	x8, x8, #0x0
 c78:	b	494 <inflateBack+0x3ac>
 c7c:	ldr	x24, [sp, #8]
 c80:	mov	w10, w10
 c84:	add	x8, x8, x10, lsl #2
 c88:	ldrh	w19, [x8, #2]
 c8c:	ldrb	w10, [x8]
 c90:	lsr	x22, x22, x21
 c94:	sub	w27, w27, w21
 c98:	mov	w21, w9
 c9c:	lsr	x22, x22, x21
 ca0:	sub	w27, w27, w21
 ca4:	tbnz	w10, #6, ea8 <inflateBack+0xdc0>
 ca8:	ands	w8, w10, #0xf
 cac:	stp	w19, w8, [x23, #96]
 cb0:	ldur	x21, [x29, #-24]
 cb4:	b.eq	d34 <inflateBack+0xc4c>  // b.none
 cb8:	ldr	w8, [x23, #100]
 cbc:	mov	w19, #0xffffc0c1            	// #-16191
 cc0:	cmp	w27, w8
 cc4:	b.cc	d18 <inflateBack+0xc30>  // b.lo, b.ul, b.last
 cc8:	ldr	w9, [x23, #96]
 ccc:	mov	w10, #0xffffffff            	// #-1
 cd0:	lsl	w10, w10, w8
 cd4:	bic	w10, w22, w10
 cd8:	lsr	x22, x22, x8
 cdc:	add	w9, w9, w10
 ce0:	sub	w27, w27, w8
 ce4:	str	w9, [x23, #96]
 ce8:	b	d38 <inflateBack+0xc50>
 cec:	ldur	x8, [x29, #-8]
 cf0:	sub	w20, w20, #0x1
 cf4:	add	x9, x8, #0x1
 cf8:	stur	x9, [x29, #-8]
 cfc:	ldrb	w9, [x8]
 d00:	ldr	w8, [x23, #100]
 d04:	lsl	x9, x9, x27
 d08:	add	w27, w27, #0x8
 d0c:	cmp	w27, w8
 d10:	add	x22, x9, x22
 d14:	b.cs	cc8 <inflateBack+0xbe0>  // b.hs, b.nlast
 d18:	cbnz	w20, cec <inflateBack+0xc04>
 d1c:	ldur	x0, [x29, #-16]
 d20:	sub	x1, x29, #0x8
 d24:	blr	x25
 d28:	mov	w20, w0
 d2c:	cbnz	w0, cec <inflateBack+0xc04>
 d30:	b	eec <inflateBack+0xe04>
 d34:	mov	w19, #0xffffc0c1            	// #-16191
 d38:	ldp	w8, w9, [x23, #60]
 d3c:	ldr	w10, [x23, #96]
 d40:	cmp	w9, w8
 d44:	csel	w9, w28, wzr, cc  // cc = lo, ul, last
 d48:	sub	w8, w8, w9
 d4c:	cmp	w10, w8
 d50:	b.ls	d60 <inflateBack+0xc78>  // b.plast
 d54:	adrp	x8, 0 <inflateBackInit_>
 d58:	add	x8, x8, #0x0
 d5c:	b	494 <inflateBack+0x3ac>
 d60:	cbnz	w28, d84 <inflateBack+0xc9c>
 d64:	ldr	w28, [x23, #60]
 d68:	ldr	x26, [x23, #72]
 d6c:	ldur	x0, [x29, #-32]
 d70:	mov	w2, w28
 d74:	mov	x1, x26
 d78:	str	w28, [x23, #64]
 d7c:	blr	x21
 d80:	cbnz	w0, ef0 <inflateBack+0xe08>
 d84:	ldr	w8, [x23, #60]
 d88:	ldp	w10, w9, [x23, #92]
 d8c:	sub	w8, w8, w9
 d90:	cmp	w28, w8
 d94:	csel	w11, w8, wzr, hi  // hi = pmore
 d98:	csneg	x9, x8, x9, hi  // hi = pmore
 d9c:	sub	w8, w28, w11
 da0:	cmp	w8, w10
 da4:	csel	w8, w10, w8, hi  // hi = pmore
 da8:	sub	w10, w10, w8
 dac:	str	w10, [x23, #92]
 db0:	mov	w10, w8
 db4:	ldrb	w11, [x26, x9]
 db8:	subs	w10, w10, #0x1
 dbc:	strb	w11, [x26], #1
 dc0:	b.ne	db4 <inflateBack+0xccc>  // b.any
 dc4:	ldr	w9, [x23, #92]
 dc8:	sub	w28, w28, w8
 dcc:	cbnz	w9, d60 <inflateBack+0xc78>
 dd0:	b	19c <inflateBack+0xb4>
 dd4:	adrp	x8, 0 <inflateBackInit_>
 dd8:	b	de4 <inflateBack+0xcfc>
 ddc:	adrp	x8, 0 <inflateBackInit_>
 de0:	ldur	x21, [x29, #-24]
 de4:	add	x8, x8, #0x0
 de8:	str	x8, [x24, #48]
 dec:	mov	w8, #0x3f51                	// #16209
 df0:	str	w8, [x23, #8]
 df4:	b	4b4 <inflateBack+0x3cc>
 df8:	ands	w19, w22, #0xffff
 dfc:	str	w19, [x23, #92]
 e00:	b.eq	e94 <inflateBack+0xdac>  // b.none
 e04:	ldur	x22, [x29, #-32]
 e08:	b	e54 <inflateBack+0xd6c>
 e0c:	cmp	w19, w20
 e10:	ldur	x1, [x29, #-8]
 e14:	csel	w8, w20, w19, hi  // hi = pmore
 e18:	cmp	w8, w28
 e1c:	csel	w27, w28, w8, hi  // hi = pmore
 e20:	mov	x0, x26
 e24:	mov	x2, x27
 e28:	bl	0 <memcpy>
 e2c:	ldur	x8, [x29, #-8]
 e30:	sub	w20, w20, w27
 e34:	sub	w28, w28, w27
 e38:	add	x26, x26, x27
 e3c:	add	x8, x8, x27
 e40:	stur	x8, [x29, #-8]
 e44:	ldr	w8, [x23, #92]
 e48:	subs	w19, w8, w27
 e4c:	str	w19, [x23, #92]
 e50:	b.eq	e94 <inflateBack+0xdac>  // b.none
 e54:	cbnz	w20, e6c <inflateBack+0xd84>
 e58:	ldur	x0, [x29, #-16]
 e5c:	sub	x1, x29, #0x8
 e60:	blr	x25
 e64:	mov	w20, w0
 e68:	cbz	w0, eec <inflateBack+0xe04>
 e6c:	cbnz	w28, e0c <inflateBack+0xd24>
 e70:	ldr	w28, [x23, #60]
 e74:	ldr	x26, [x23, #72]
 e78:	mov	x0, x22
 e7c:	mov	w2, w28
 e80:	mov	x1, x26
 e84:	str	w28, [x23, #64]
 e88:	blr	x21
 e8c:	cbz	w0, e0c <inflateBack+0xd24>
 e90:	b	ef0 <inflateBack+0xe08>
 e94:	mov	w8, #0x3f3f                	// #16191
 e98:	mov	x22, xzr
 e9c:	mov	w27, wzr
 ea0:	str	w8, [x23, #8]
 ea4:	b	198 <inflateBack+0xb0>
 ea8:	adrp	x8, 0 <inflateBackInit_>
 eac:	ldur	x21, [x29, #-24]
 eb0:	add	x8, x8, #0x0
 eb4:	str	x8, [x24, #48]
 eb8:	mov	w8, #0x3f51                	// #16209
 ebc:	str	w8, [x23, #8]
 ec0:	b	198 <inflateBack+0xb0>
 ec4:	adrp	x8, 0 <inflateBackInit_>
 ec8:	add	x8, x8, #0x0
 ecc:	b	ed8 <inflateBack+0xdf0>
 ed0:	adrp	x8, 0 <inflateBackInit_>
 ed4:	add	x8, x8, #0x0
 ed8:	str	x8, [x24, #48]
 edc:	mov	w8, #0x3f51                	// #16209
 ee0:	str	w8, [x23, #8]
 ee4:	b	198 <inflateBack+0xb0>
 ee8:	ldr	x24, [sp, #8]
 eec:	stur	xzr, [x29, #-8]
 ef0:	mov	w0, #0xfffffffb            	// #-5
 ef4:	ldur	x8, [x29, #-8]
 ef8:	str	w20, [x24, #8]
 efc:	str	x8, [x24]
 f00:	ldp	x20, x19, [sp, #176]
 f04:	ldp	x22, x21, [sp, #160]
 f08:	ldp	x24, x23, [sp, #144]
 f0c:	ldp	x26, x25, [sp, #128]
 f10:	ldp	x28, x27, [sp, #112]
 f14:	ldp	x29, x30, [sp, #96]
 f18:	add	sp, sp, #0xc0
 f1c:	ret
 f20:	mov	w0, #0xfffffffe            	// #-2
 f24:	b	ef4 <inflateBack+0xe0c>
 f28:	ldr	w8, [x23, #60]
 f2c:	subs	w2, w8, w28
 f30:	b.ls	f50 <inflateBack+0xe68>  // b.plast
 f34:	ldr	x1, [x23, #72]
 f38:	ldur	x0, [x29, #-32]
 f3c:	blr	x21
 f40:	cmp	w0, #0x0
 f44:	mov	w8, #0xfffffffb            	// #-5
 f48:	csinc	w0, w8, wzr, ne  // ne = any
 f4c:	b	ef4 <inflateBack+0xe0c>
 f50:	mov	w0, #0x1                   	// #1
 f54:	b	ef4 <inflateBack+0xe0c>

0000000000000f58 <fixedtables>:
 f58:	adrp	x8, 0 <inflateBackInit_>
 f5c:	mov	x9, #0x9                   	// #9
 f60:	adrp	x10, 0 <inflateBackInit_>
 f64:	add	x8, x8, #0x0
 f68:	movk	x9, #0x5, lsl #32
 f6c:	add	x10, x10, #0x0
 f70:	stp	x10, x9, [x0, #112]
 f74:	str	x8, [x0, #104]
 f78:	ret

0000000000000f7c <inflateBackEnd>:
 f7c:	stp	x29, x30, [sp, #-32]!
 f80:	str	x19, [sp, #16]
 f84:	mov	x29, sp
 f88:	cbz	x0, fb4 <inflateBackEnd+0x38>
 f8c:	ldr	x1, [x0, #56]
 f90:	mov	x19, x0
 f94:	cbz	x1, fb4 <inflateBackEnd+0x38>
 f98:	ldr	x8, [x19, #72]
 f9c:	cbz	x8, fb4 <inflateBackEnd+0x38>
 fa0:	ldr	x0, [x19, #80]
 fa4:	blr	x8
 fa8:	mov	w0, wzr
 fac:	str	xzr, [x19, #56]
 fb0:	b	fb8 <inflateBackEnd+0x3c>
 fb4:	mov	w0, #0xfffffffe            	// #-2
 fb8:	ldr	x19, [sp, #16]
 fbc:	ldp	x29, x30, [sp], #32
 fc0:	ret

inffast.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflate_fast>:
   0:	stp	x28, x27, [sp, #-80]!
   4:	stp	x26, x25, [sp, #16]
   8:	stp	x24, x23, [sp, #32]
   c:	stp	x22, x21, [sp, #48]
  10:	stp	x20, x19, [sp, #64]
  14:	ldr	x8, [x0, #56]
  18:	ldr	w12, [x0, #32]
  1c:	ldr	w11, [x0, #8]
  20:	ldr	x9, [x0, #24]
  24:	ldp	w19, w20, [x8, #120]
  28:	ldr	x10, [x0]
  2c:	sub	w15, w1, w12
  30:	ldp	w18, w1, [x8, #60]
  34:	ldr	w2, [x8, #68]
  38:	mov	w16, #0xffffffff            	// #-1
  3c:	sub	w13, w11, #0x5
  40:	ldp	x3, x11, [x8, #72]
  44:	ldr	w14, [x8, #88]
  48:	ldp	x4, x5, [x8, #104]
  4c:	sub	x6, x9, x15
  50:	lsl	w15, w16, w19
  54:	adrp	x17, 0 <inflate_fast>
  58:	sub	w7, w12, #0x101
  5c:	lsl	w20, w16, w20
  60:	mvn	w19, w15
  64:	adrp	x15, 0 <inflate_fast>
  68:	add	x17, x17, #0x0
  6c:	add	x12, x10, x13
  70:	add	x13, x9, x7
  74:	add	w7, w2, w18
  78:	mvn	w20, w20
  7c:	add	x15, x15, #0x0
  80:	cmp	w14, #0xe
  84:	b.hi	ac <inflate_fast+0xac>  // b.pmore
  88:	ldrb	w21, [x10]
  8c:	ldrb	w22, [x10, #1]
  90:	add	w23, w14, #0x8
  94:	add	x10, x10, #0x2
  98:	lsl	x21, x21, x14
  9c:	lsl	x22, x22, x23
  a0:	add	x11, x21, x11
  a4:	add	x11, x11, x22
  a8:	add	w14, w14, #0x10
  ac:	and	x21, x11, x19
  b0:	add	x21, x4, x21, lsl #2
  b4:	ldrb	w23, [x21, #1]
  b8:	ldrb	w22, [x21]
  bc:	ldrh	w21, [x21, #2]
  c0:	lsr	x11, x11, x23
  c4:	sub	w14, w14, w23
  c8:	cbz	w22, ec <inflate_fast+0xec>
  cc:	and	w23, w22, #0xff
  d0:	tbnz	w22, #4, 104 <inflate_fast+0x104>
  d4:	tbnz	w23, #6, 410 <inflate_fast+0x410>
  d8:	lsl	w22, w16, w23
  dc:	mvn	w22, w22
  e0:	and	x22, x11, x22
  e4:	add	x21, x22, w21, uxth
  e8:	b	b0 <inflate_fast+0xb0>
  ec:	strb	w21, [x9], #1
  f0:	cmp	x9, x13
  f4:	b.cs	438 <inflate_fast+0x438>  // b.hs, b.nlast
  f8:	cmp	x10, x12
  fc:	b.cc	80 <inflate_fast+0x80>  // b.lo, b.ul, b.last
 100:	b	438 <inflate_fast+0x438>
 104:	ands	w22, w23, #0xf
 108:	and	w21, w21, #0xffff
 10c:	b.eq	13c <inflate_fast+0x13c>  // b.none
 110:	cmp	w14, w22
 114:	b.cs	128 <inflate_fast+0x128>  // b.hs, b.nlast
 118:	ldrb	w23, [x10], #1
 11c:	lsl	x23, x23, x14
 120:	add	x11, x23, x11
 124:	add	w14, w14, #0x8
 128:	lsl	w23, w16, w22
 12c:	bic	w23, w11, w23
 130:	lsr	x11, x11, x22
 134:	add	w21, w23, w21
 138:	sub	w14, w14, w22
 13c:	cmp	w14, #0xe
 140:	b.hi	168 <inflate_fast+0x168>  // b.pmore
 144:	ldrb	w22, [x10]
 148:	ldrb	w23, [x10, #1]
 14c:	add	w24, w14, #0x8
 150:	add	x10, x10, #0x2
 154:	lsl	x22, x22, x14
 158:	lsl	x23, x23, x24
 15c:	add	x11, x22, x11
 160:	add	x11, x11, x23
 164:	add	w14, w14, #0x10
 168:	and	x22, x11, x20
 16c:	add	x22, x5, x22, lsl #2
 170:	ldrb	w24, [x22, #1]
 174:	ldrb	w23, [x22]
 178:	ldrh	w22, [x22, #2]
 17c:	lsr	x11, x11, x24
 180:	sub	w14, w14, w24
 184:	tbnz	w23, #4, 1a0 <inflate_fast+0x1a0>
 188:	tbnz	w23, #6, 428 <inflate_fast+0x428>
 18c:	lsl	w23, w16, w23
 190:	mvn	w23, w23
 194:	and	x23, x11, x23
 198:	add	x22, x23, w22, uxth
 19c:	b	16c <inflate_fast+0x16c>
 1a0:	and	w23, w23, #0xf
 1a4:	cmp	w14, w23
 1a8:	b.cs	1e0 <inflate_fast+0x1e0>  // b.hs, b.nlast
 1ac:	mov	x24, x10
 1b0:	ldrb	w26, [x24], #1
 1b4:	add	w25, w14, #0x8
 1b8:	cmp	w25, w23
 1bc:	lsl	x26, x26, x14
 1c0:	add	x11, x26, x11
 1c4:	b.cs	1e8 <inflate_fast+0x1e8>  // b.hs, b.nlast
 1c8:	ldrb	w24, [x10, #1]
 1cc:	add	x10, x10, #0x2
 1d0:	lsl	x24, x24, x25
 1d4:	add	x11, x24, x11
 1d8:	add	w25, w14, #0x10
 1dc:	b	1ec <inflate_fast+0x1ec>
 1e0:	mov	w25, w14
 1e4:	b	1ec <inflate_fast+0x1ec>
 1e8:	mov	x10, x24
 1ec:	lsl	w14, w16, w23
 1f0:	bic	w14, w11, w14
 1f4:	add	w22, w14, w22
 1f8:	sub	w14, w9, w6
 1fc:	lsr	x11, x11, x23
 200:	subs	w24, w22, w14
 204:	sub	w14, w25, w23
 208:	b.ls	28c <inflate_fast+0x28c>  // b.plast
 20c:	cmp	w24, w1
 210:	b.ls	21c <inflate_fast+0x21c>  // b.plast
 214:	ldr	w23, [x8, #7144]
 218:	cbnz	w23, 42c <inflate_fast+0x42c>
 21c:	cbz	w2, 314 <inflate_fast+0x314>
 220:	cmp	w2, w24
 224:	b.cs	338 <inflate_fast+0x338>  // b.hs, b.nlast
 228:	sub	w23, w24, w2
 22c:	subs	w23, w21, w23
 230:	sub	w25, w7, w24
 234:	b.ls	388 <inflate_fast+0x388>  // b.plast
 238:	ldrb	w21, [x3, x25]
 23c:	sub	w24, w24, #0x1
 240:	cmp	w2, w24
 244:	add	x25, x25, #0x1
 248:	strb	w21, [x9], #1
 24c:	b.ne	238 <inflate_fast+0x238>  // b.any
 250:	cmp	w23, w2
 254:	b.ls	3fc <inflate_fast+0x3fc>  // b.plast
 258:	mov	x24, xzr
 25c:	ldrb	w21, [x3, x24]
 260:	strb	w21, [x9, x24]
 264:	add	x24, x24, #0x1
 268:	cmp	w2, w24
 26c:	b.ne	25c <inflate_fast+0x25c>  // b.any
 270:	sub	x22, x9, w22, uxtw
 274:	sub	w21, w23, w2
 278:	add	x23, x22, x24
 27c:	add	x9, x9, x24
 280:	cmp	w21, #0x3
 284:	b.cs	394 <inflate_fast+0x394>  // b.hs, b.nlast
 288:	b	3d0 <inflate_fast+0x3d0>
 28c:	mov	w24, w22
 290:	neg	x22, x24
 294:	sub	x24, x9, x24
 298:	mov	x23, xzr
 29c:	add	x24, x24, #0x1
 2a0:	mov	w25, w21
 2a4:	add	x26, x24, x23
 2a8:	ldurb	w27, [x26, #-1]
 2ac:	add	x28, x9, x23
 2b0:	sub	w25, w25, #0x3
 2b4:	cmp	w25, #0x2
 2b8:	strb	w27, [x28]
 2bc:	ldrb	w27, [x26]
 2c0:	add	x23, x23, #0x3
 2c4:	strb	w27, [x28, #1]
 2c8:	ldrb	w26, [x26, #1]
 2cc:	strb	w26, [x28, #2]
 2d0:	b.hi	2a4 <inflate_fast+0x2a4>  // b.pmore
 2d4:	cmp	w21, w23
 2d8:	add	x24, x9, x23
 2dc:	b.ne	2e8 <inflate_fast+0x2e8>  // b.any
 2e0:	mov	x9, x24
 2e4:	b	f0 <inflate_fast+0xf0>
 2e8:	add	x25, x9, x22
 2ec:	add	x25, x25, x23
 2f0:	add	x25, x25, #0x1
 2f4:	ldurb	w25, [x25, #-1]
 2f8:	mov	w21, w21
 2fc:	sub	x21, x21, #0x1
 300:	cmp	w21, w23
 304:	strb	w25, [x24]
 308:	b.ne	36c <inflate_fast+0x36c>  // b.any
 30c:	add	x9, x24, #0x1
 310:	b	f0 <inflate_fast+0xf0>
 314:	sub	w23, w18, w24
 318:	subs	w25, w21, w24
 31c:	add	x23, x3, x23
 320:	b.ls	38c <inflate_fast+0x38c>  // b.plast
 324:	ldrb	w21, [x23], #1
 328:	subs	w24, w24, #0x1
 32c:	strb	w21, [x9], #1
 330:	b.ne	324 <inflate_fast+0x324>  // b.any
 334:	b	358 <inflate_fast+0x358>
 338:	sub	w23, w2, w24
 33c:	subs	w25, w21, w24
 340:	add	x23, x3, x23
 344:	b.ls	38c <inflate_fast+0x38c>  // b.plast
 348:	ldrb	w21, [x23], #1
 34c:	subs	w24, w24, #0x1
 350:	strb	w21, [x9], #1
 354:	b.ne	348 <inflate_fast+0x348>  // b.any
 358:	sub	x23, x9, w22, uxtw
 35c:	mov	w21, w25
 360:	cmp	w21, #0x3
 364:	b.cs	394 <inflate_fast+0x394>  // b.hs, b.nlast
 368:	b	3d0 <inflate_fast+0x3d0>
 36c:	add	x21, x9, x22
 370:	add	x21, x21, x23
 374:	ldrb	w21, [x21, #1]
 378:	add	x9, x9, x23
 37c:	add	x9, x9, #0x2
 380:	strb	w21, [x24, #1]
 384:	b	f0 <inflate_fast+0xf0>
 388:	add	x23, x3, x25
 38c:	cmp	w21, #0x3
 390:	b.cc	3d0 <inflate_fast+0x3d0>  // b.lo, b.ul, b.last
 394:	ldrb	w22, [x23]
 398:	add	x24, x9, #0x3
 39c:	sub	w21, w21, #0x3
 3a0:	cmp	w21, #0x2
 3a4:	strb	w22, [x9]
 3a8:	ldrb	w22, [x23, #1]
 3ac:	strb	w22, [x9, #1]
 3b0:	add	x22, x23, #0x3
 3b4:	ldrb	w23, [x23, #2]
 3b8:	strb	w23, [x9, #2]
 3bc:	mov	x23, x22
 3c0:	mov	x9, x24
 3c4:	b.hi	394 <inflate_fast+0x394>  // b.pmore
 3c8:	mov	x9, x24
 3cc:	mov	x23, x22
 3d0:	cbz	w21, f0 <inflate_fast+0xf0>
 3d4:	ldrb	w24, [x23]
 3d8:	mov	x22, x9
 3dc:	cmp	w21, #0x1
 3e0:	strb	w24, [x22], #1
 3e4:	b.eq	3f4 <inflate_fast+0x3f4>  // b.none
 3e8:	ldrb	w21, [x23, #1]
 3ec:	add	x22, x9, #0x2
 3f0:	strb	w21, [x9, #1]
 3f4:	mov	x9, x22
 3f8:	b	f0 <inflate_fast+0xf0>
 3fc:	mov	w21, w23
 400:	mov	x23, x3
 404:	cmp	w21, #0x3
 408:	b.cs	394 <inflate_fast+0x394>  // b.hs, b.nlast
 40c:	b	3d0 <inflate_fast+0x3d0>
 410:	tbnz	w23, #5, 420 <inflate_fast+0x420>
 414:	adrp	x15, 0 <inflate_fast>
 418:	add	x15, x15, #0x0
 41c:	b	42c <inflate_fast+0x42c>
 420:	mov	w15, #0x3f3f                	// #16191
 424:	b	434 <inflate_fast+0x434>
 428:	mov	x15, x17
 42c:	str	x15, [x0, #48]
 430:	mov	w15, #0x3f51                	// #16209
 434:	str	w15, [x8, #8]
 438:	lsr	w15, w14, #3
 43c:	and	w14, w14, #0x7
 440:	str	x9, [x0, #24]
 444:	sub	w9, w13, w9
 448:	mov	w13, #0xffffffff            	// #-1
 44c:	sub	x10, x10, x15
 450:	lsl	w13, w13, w14
 454:	add	w9, w9, #0x101
 458:	mvn	w13, w13
 45c:	str	x10, [x0]
 460:	sub	w10, w12, w10
 464:	str	w9, [x0, #32]
 468:	and	x9, x11, x13
 46c:	add	w10, w10, #0x5
 470:	str	w10, [x0, #8]
 474:	str	x9, [x8, #80]
 478:	str	w14, [x8, #88]
 47c:	ldp	x20, x19, [sp, #64]
 480:	ldp	x22, x21, [sp, #48]
 484:	ldp	x24, x23, [sp, #32]
 488:	ldp	x26, x25, [sp, #16]
 48c:	ldp	x28, x27, [sp], #80
 490:	ret

inflate.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflateResetKeep>:
       0:	stp	x29, x30, [sp, #-32]!
       4:	str	x19, [sp, #16]
       8:	mov	x29, sp
       c:	mov	x19, x0
      10:	bl	84 <inflateStateCheck>
      14:	cbz	w0, 20 <inflateResetKeep+0x20>
      18:	mov	w0, #0xfffffffe            	// #-2
      1c:	b	78 <inflateResetKeep+0x78>
      20:	ldr	x8, [x19, #56]
      24:	str	xzr, [x8, #40]
      28:	str	xzr, [x19, #16]
      2c:	stp	xzr, xzr, [x19, #40]
      30:	ldr	w9, [x8, #16]
      34:	cbz	w9, 40 <inflateResetKeep+0x40>
      38:	and	x9, x9, #0x1
      3c:	str	x9, [x19, #96]
      40:	mov	w0, wzr
      44:	mov	w9, #0x3f34                	// #16180
      48:	mov	w10, #0x8000                	// #32768
      4c:	add	x11, x8, #0x558
      50:	mov	x12, #0xffffffff00000001    	// #-4294967295
      54:	str	wzr, [x8, #20]
      58:	str	xzr, [x8, #48]
      5c:	str	xzr, [x8, #80]
      60:	str	wzr, [x8, #88]
      64:	str	x9, [x8, #8]
      68:	str	w10, [x8, #28]
      6c:	str	x11, [x8, #144]
      70:	stp	x11, x11, [x8, #104]
      74:	str	x12, [x8, #7144]
      78:	ldr	x19, [sp, #16]
      7c:	ldp	x29, x30, [sp], #32
      80:	ret

0000000000000084 <inflateStateCheck>:
      84:	cbz	x0, ac <inflateStateCheck+0x28>
      88:	ldr	x8, [x0, #64]
      8c:	cbz	x8, ac <inflateStateCheck+0x28>
      90:	ldr	x8, [x0, #72]
      94:	cbz	x8, ac <inflateStateCheck+0x28>
      98:	ldr	x8, [x0, #56]
      9c:	cbz	x8, ac <inflateStateCheck+0x28>
      a0:	ldr	x9, [x8]
      a4:	cmp	x9, x0
      a8:	b.eq	b4 <inflateStateCheck+0x30>  // b.none
      ac:	mov	w0, #0x1                   	// #1
      b0:	ret
      b4:	ldr	w8, [x8, #8]
      b8:	mov	w9, #0xffffc0cc            	// #-16180
      bc:	add	w8, w8, w9
      c0:	cmp	w8, #0x1f
      c4:	cset	w0, hi  // hi = pmore
      c8:	ret

00000000000000cc <inflateReset>:
      cc:	stp	x29, x30, [sp, #-32]!
      d0:	str	x19, [sp, #16]
      d4:	mov	x29, sp
      d8:	mov	x19, x0
      dc:	bl	84 <inflateStateCheck>
      e0:	cbz	w0, ec <inflateReset+0x20>
      e4:	mov	w0, #0xfffffffe            	// #-2
      e8:	b	100 <inflateReset+0x34>
      ec:	ldr	x8, [x19, #56]
      f0:	mov	x0, x19
      f4:	stur	xzr, [x8, #60]
      f8:	str	wzr, [x8, #68]
      fc:	bl	0 <inflateResetKeep>
     100:	ldr	x19, [sp, #16]
     104:	ldp	x29, x30, [sp], #32
     108:	ret

000000000000010c <inflateReset2>:
     10c:	stp	x29, x30, [sp, #-48]!
     110:	stp	x22, x21, [sp, #16]
     114:	stp	x20, x19, [sp, #32]
     118:	mov	x29, sp
     11c:	mov	w20, w1
     120:	mov	x19, x0
     124:	bl	84 <inflateStateCheck>
     128:	cbnz	w0, 168 <inflateReset2+0x5c>
     12c:	ldr	x21, [x19, #56]
     130:	tbnz	w20, #31, 150 <inflateReset2+0x44>
     134:	asr	w8, w20, #4
     138:	and	w9, w20, #0xf
     13c:	cmp	w20, #0x30
     140:	add	w22, w8, #0x5
     144:	csel	w20, w9, w20, lt  // lt = tstop
     148:	cbnz	w20, 15c <inflateReset2+0x50>
     14c:	b	17c <inflateReset2+0x70>
     150:	mov	w22, wzr
     154:	neg	w20, w20
     158:	cbz	w20, 17c <inflateReset2+0x70>
     15c:	and	w8, w20, #0xfffffff8
     160:	cmp	w8, #0x8
     164:	b.eq	17c <inflateReset2+0x70>  // b.none
     168:	mov	w0, #0xfffffffe            	// #-2
     16c:	ldp	x20, x19, [sp, #32]
     170:	ldp	x22, x21, [sp, #16]
     174:	ldp	x29, x30, [sp], #48
     178:	ret
     17c:	ldr	x1, [x21, #72]
     180:	cbz	x1, 19c <inflateReset2+0x90>
     184:	ldr	w8, [x21, #56]
     188:	cmp	w8, w20
     18c:	b.eq	19c <inflateReset2+0x90>  // b.none
     190:	ldp	x8, x0, [x19, #72]
     194:	blr	x8
     198:	str	xzr, [x21, #72]
     19c:	mov	x0, x19
     1a0:	str	w22, [x21, #16]
     1a4:	str	w20, [x21, #56]
     1a8:	bl	cc <inflateReset>
     1ac:	b	16c <inflateReset2+0x60>

00000000000001b0 <inflateInit2_>:
     1b0:	stp	x29, x30, [sp, #-48]!
     1b4:	stp	x22, x21, [sp, #16]
     1b8:	stp	x20, x19, [sp, #32]
     1bc:	mov	x29, sp
     1c0:	cbz	x2, 254 <inflateInit2_+0xa4>
     1c4:	cmp	w3, #0x70
     1c8:	mov	w21, #0xfffffffa            	// #-6
     1cc:	b.ne	290 <inflateInit2_+0xe0>  // b.any
     1d0:	ldrb	w8, [x2]
     1d4:	cmp	w8, #0x31
     1d8:	b.ne	290 <inflateInit2_+0xe0>  // b.any
     1dc:	mov	x19, x0
     1e0:	cbz	x0, 25c <inflateInit2_+0xac>
     1e4:	ldr	x8, [x19, #64]
     1e8:	mov	w20, w1
     1ec:	str	xzr, [x19, #48]
     1f0:	cbz	x8, 264 <inflateInit2_+0xb4>
     1f4:	ldr	x8, [x19, #72]
     1f8:	cbz	x8, 27c <inflateInit2_+0xcc>
     1fc:	ldr	x8, [x19, #64]
     200:	ldr	x0, [x19, #80]
     204:	mov	w1, #0x1                   	// #1
     208:	mov	w2, #0x1bf8                	// #7160
     20c:	blr	x8
     210:	cbz	x0, 28c <inflateInit2_+0xdc>
     214:	mov	w8, #0x3f34                	// #16180
     218:	mov	x22, x0
     21c:	str	x0, [x19, #56]
     220:	str	x19, [x0]
     224:	str	xzr, [x0, #72]
     228:	str	w8, [x0, #8]
     22c:	mov	x0, x19
     230:	mov	w1, w20
     234:	bl	10c <inflateReset2>
     238:	mov	w21, w0
     23c:	cbz	w0, 290 <inflateInit2_+0xe0>
     240:	ldp	x8, x0, [x19, #72]
     244:	mov	x1, x22
     248:	blr	x8
     24c:	str	xzr, [x19, #56]
     250:	b	290 <inflateInit2_+0xe0>
     254:	mov	w21, #0xfffffffa            	// #-6
     258:	b	290 <inflateInit2_+0xe0>
     25c:	mov	w21, #0xfffffffe            	// #-2
     260:	b	290 <inflateInit2_+0xe0>
     264:	adrp	x8, 0 <zcalloc>
     268:	add	x8, x8, #0x0
     26c:	str	x8, [x19, #64]
     270:	str	xzr, [x19, #80]
     274:	ldr	x8, [x19, #72]
     278:	cbnz	x8, 1fc <inflateInit2_+0x4c>
     27c:	adrp	x8, 0 <zcfree>
     280:	add	x8, x8, #0x0
     284:	str	x8, [x19, #72]
     288:	b	1fc <inflateInit2_+0x4c>
     28c:	mov	w21, #0xfffffffc            	// #-4
     290:	mov	w0, w21
     294:	ldp	x20, x19, [sp, #32]
     298:	ldp	x22, x21, [sp, #16]
     29c:	ldp	x29, x30, [sp], #48
     2a0:	ret

00000000000002a4 <inflateInit_>:
     2a4:	stp	x29, x30, [sp, #-16]!
     2a8:	mov	w3, w2
     2ac:	mov	x2, x1
     2b0:	mov	w1, #0xf                   	// #15
     2b4:	mov	x29, sp
     2b8:	bl	1b0 <inflateInit2_>
     2bc:	ldp	x29, x30, [sp], #16
     2c0:	ret

00000000000002c4 <inflatePrime>:
     2c4:	stp	x29, x30, [sp, #-48]!
     2c8:	str	x21, [sp, #16]
     2cc:	stp	x20, x19, [sp, #32]
     2d0:	mov	x29, sp
     2d4:	mov	w19, w2
     2d8:	mov	w20, w1
     2dc:	mov	x21, x0
     2e0:	bl	84 <inflateStateCheck>
     2e4:	cbz	w0, 2fc <inflatePrime+0x38>
     2e8:	mov	w0, #0xfffffffe            	// #-2
     2ec:	ldp	x20, x19, [sp, #32]
     2f0:	ldr	x21, [sp, #16]
     2f4:	ldp	x29, x30, [sp], #48
     2f8:	ret
     2fc:	ldr	x8, [x21, #56]
     300:	tbnz	w20, #31, 344 <inflatePrime+0x80>
     304:	cmp	w20, #0x10
     308:	b.gt	2e8 <inflatePrime+0x24>
     30c:	ldr	w10, [x8, #88]
     310:	add	w9, w10, w20
     314:	cmp	w9, #0x20
     318:	b.hi	2e8 <inflatePrime+0x24>  // b.pmore
     31c:	mov	x11, #0xffffffffffffffff    	// #-1
     320:	ldr	x12, [x8, #80]
     324:	lsl	x11, x11, x20
     328:	bic	w11, w19, w11
     32c:	lsl	w10, w11, w10
     330:	mov	w0, wzr
     334:	add	x10, x12, x10
     338:	str	x10, [x8, #80]
     33c:	str	w9, [x8, #88]
     340:	b	2ec <inflatePrime+0x28>
     344:	mov	w0, wzr
     348:	str	xzr, [x8, #80]
     34c:	str	wzr, [x8, #88]
     350:	b	2ec <inflatePrime+0x28>

0000000000000354 <inflate>:
     354:	sub	sp, sp, #0xc0
     358:	stp	x29, x30, [sp, #96]
     35c:	stp	x28, x27, [sp, #112]
     360:	stp	x26, x25, [sp, #128]
     364:	stp	x24, x23, [sp, #144]
     368:	stp	x22, x21, [sp, #160]
     36c:	stp	x20, x19, [sp, #176]
     370:	add	x29, sp, #0x60
     374:	mov	w24, w1
     378:	mov	x19, x0
     37c:	bl	84 <inflateStateCheck>
     380:	cbz	w0, 3a8 <inflate+0x54>
     384:	mov	w0, #0xfffffffe            	// #-2
     388:	ldp	x20, x19, [sp, #176]
     38c:	ldp	x22, x21, [sp, #160]
     390:	ldp	x24, x23, [sp, #144]
     394:	ldp	x26, x25, [sp, #128]
     398:	ldp	x28, x27, [sp, #112]
     39c:	ldp	x29, x30, [sp, #96]
     3a0:	add	sp, sp, #0xc0
     3a4:	ret
     3a8:	ldr	x22, [x19, #24]
     3ac:	cbz	x22, 384 <inflate+0x30>
     3b0:	ldr	x23, [x19]
     3b4:	cbz	x23, 19e8 <inflate+0x1694>
     3b8:	ldr	x21, [x19, #56]
     3bc:	mov	w9, #0x3f3f                	// #16191
     3c0:	mov	x1, x21
     3c4:	ldr	w8, [x1, #8]!
     3c8:	cmp	w8, w9
     3cc:	b.ne	3d8 <inflate+0x84>  // b.any
     3d0:	mov	w8, #0x3f40                	// #16192
     3d4:	str	w8, [x1]
     3d8:	ldr	w8, [x19, #8]
     3dc:	add	x9, x21, #0x558
     3e0:	ldr	w18, [x19, #32]
     3e4:	ldr	x25, [x21, #80]
     3e8:	ldr	w20, [x21, #88]
     3ec:	str	x9, [sp, #40]
     3f0:	add	x9, x21, #0x78
     3f4:	str	x9, [sp, #32]
     3f8:	add	x9, x21, #0x98
     3fc:	str	x9, [sp, #24]
     400:	add	x9, x21, #0x7c
     404:	adrp	x4, 0 <inflateResetKeep>
     408:	add	x3, x21, #0x90
     40c:	add	x26, x21, #0x318
     410:	str	x9, [sp, #8]
     414:	sub	w9, w24, #0x5
     418:	mov	w0, #0xffffc0cc            	// #-16180
     41c:	add	x4, x4, #0x0
     420:	mov	w27, w8
     424:	stur	wzr, [x29, #-28]
     428:	str	w9, [sp, #48]
     42c:	stur	w8, [x29, #-44]
     430:	stur	w18, [x29, #-8]
     434:	stp	x26, x3, [x29, #-24]
     438:	ldr	w8, [x1]
     43c:	add	w8, w8, w0
     440:	cmp	w8, #0x1e
     444:	b.hi	384 <inflate+0x30>  // b.pmore
     448:	adr	x9, 460 <inflate+0x10c>
     44c:	ldrh	w10, [x4, x8, lsl #1]
     450:	add	x9, x9, x10, lsl #2
     454:	mov	w28, #0xfffffffd            	// #-3
     458:	mov	w8, #0x1                   	// #1
     45c:	br	x9
     460:	ldr	w8, [x21, #16]
     464:	cbz	w8, bf0 <inflate+0x89c>
     468:	cmp	w20, #0xf
     46c:	b.hi	498 <inflate+0x144>  // b.pmore
     470:	mov	w9, w20
     474:	cbz	w27, 19f4 <inflate+0x16a0>
     478:	ldrb	w10, [x23], #1
     47c:	add	x20, x9, #0x8
     480:	sub	w27, w27, #0x1
     484:	cmp	x9, #0x8
     488:	lsl	x10, x10, x9
     48c:	add	x25, x10, x25
     490:	mov	x9, x20
     494:	b.cc	474 <inflate+0x120>  // b.lo, b.ul, b.last
     498:	tbz	w8, #1, c38 <inflate+0x8e4>
     49c:	mov	w9, #0x8b1f                	// #35615
     4a0:	cmp	x25, x9
     4a4:	b.ne	c38 <inflate+0x8e4>  // b.any
     4a8:	ldr	w8, [x21, #56]
     4ac:	mov	x26, x1
     4b0:	mov	w28, w18
     4b4:	cbnz	w8, 4c0 <inflate+0x16c>
     4b8:	mov	w8, #0xf                   	// #15
     4bc:	str	w8, [x21, #56]
     4c0:	mov	x0, xzr
     4c4:	mov	x1, xzr
     4c8:	mov	w2, wzr
     4cc:	bl	0 <crc32>
     4d0:	mov	w8, #0x8b1f                	// #35615
     4d4:	sub	x1, x29, #0x4
     4d8:	mov	w2, #0x2                   	// #2
     4dc:	str	x0, [x21, #32]
     4e0:	sturh	w8, [x29, #-4]
     4e4:	bl	0 <crc32>
     4e8:	mov	x25, xzr
     4ec:	mov	w20, wzr
     4f0:	str	x0, [x21, #32]
     4f4:	mov	w8, #0x3f35                	// #16181
     4f8:	b	11dc <inflate+0xe88>
     4fc:	cmp	w20, #0xf
     500:	b.hi	52c <inflate+0x1d8>  // b.pmore
     504:	mov	w8, w20
     508:	cbz	w27, 1a00 <inflate+0x16ac>
     50c:	ldrb	w9, [x23], #1
     510:	add	x20, x8, #0x8
     514:	sub	w27, w27, #0x1
     518:	cmp	x8, #0x8
     51c:	lsl	x9, x9, x8
     520:	add	x25, x9, x25
     524:	mov	x8, x20
     528:	b.cc	508 <inflate+0x1b4>  // b.lo, b.ul, b.last
     52c:	and	w8, w25, #0xff
     530:	cmp	w8, #0x8
     534:	str	w25, [x21, #24]
     538:	b.ne	1340 <inflate+0xfec>  // b.any
     53c:	tst	w25, #0xe000
     540:	b.eq	c94 <inflate+0x940>  // b.none
     544:	adrp	x8, 0 <inflateResetKeep>
     548:	add	x8, x8, #0x0
     54c:	b	18ec <inflate+0x1598>
     550:	cmp	w20, #0x1f
     554:	b.hi	57c <inflate+0x228>  // b.pmore
     558:	mov	w20, w20
     55c:	cbz	w27, 1a04 <inflate+0x16b0>
     560:	ldrb	w8, [x23], #1
     564:	sub	w27, w27, #0x1
     568:	cmp	x20, #0x18
     56c:	lsl	x8, x8, x20
     570:	add	x20, x20, #0x8
     574:	add	x25, x8, x25
     578:	b.cc	55c <inflate+0x208>  // b.lo, b.ul, b.last
     57c:	lsr	x8, x25, #8
     580:	lsl	w9, w25, #8
     584:	and	x8, x8, #0xff00
     588:	and	x9, x9, #0xff0000
     58c:	bfxil	x8, x25, #24, #8
     590:	lsl	w10, w25, #24
     594:	orr	x8, x8, x9
     598:	mov	w20, wzr
     59c:	mov	w11, #0x3f3e                	// #16190
     5a0:	orr	x8, x8, x10
     5a4:	mov	x25, xzr
     5a8:	str	x8, [x21, #32]
     5ac:	str	x8, [x19, #96]
     5b0:	str	w11, [x21, #8]
     5b4:	ldr	w8, [x21, #20]
     5b8:	cbz	w8, 1a50 <inflate+0x16fc>
     5bc:	mov	x0, xzr
     5c0:	mov	x28, x1
     5c4:	mov	x1, xzr
     5c8:	mov	w2, wzr
     5cc:	mov	w26, w24
     5d0:	mov	w24, w18
     5d4:	bl	0 <adler32>
     5d8:	mov	w18, w24
     5dc:	mov	w24, w26
     5e0:	ldp	x26, x3, [x29, #-24]
     5e4:	adrp	x4, 0 <inflateResetKeep>
     5e8:	add	x4, x4, #0x0
     5ec:	mov	x1, x28
     5f0:	str	x0, [x21, #32]
     5f4:	str	x0, [x19, #96]
     5f8:	mov	w0, #0xffffc0cc            	// #-16180
     5fc:	mov	w8, #0x3f3f                	// #16191
     600:	str	w8, [x21, #8]
     604:	ldr	w8, [sp, #48]
     608:	cmp	w8, #0x2
     60c:	b.cc	1a34 <inflate+0x16e0>  // b.lo, b.ul, b.last
     610:	ldr	w8, [x21, #12]
     614:	cbz	w8, 630 <inflate+0x2dc>
     618:	and	w8, w20, #0x7
     61c:	lsr	x25, x25, x8
     620:	mov	w8, #0x3f4e                	// #16206
     624:	and	w20, w20, #0xfffffff8
     628:	str	w8, [x1]
     62c:	b	438 <inflate+0xe4>
     630:	cmp	w20, #0x2
     634:	b.hi	654 <inflate+0x300>  // b.pmore
     638:	cbz	w27, 1a04 <inflate+0x16b0>
     63c:	ldrb	w8, [x23], #1
     640:	add	w9, w20, #0x8
     644:	sub	w27, w27, #0x1
     648:	lsl	x8, x8, x20
     64c:	add	x25, x8, x25
     650:	mov	w20, w9
     654:	adrp	x11, 0 <inflateResetKeep>
     658:	and	w9, w25, #0x1
     65c:	ubfx	w10, w25, #1, #2
     660:	add	x11, x11, #0x0
     664:	str	w9, [x21, #12]
     668:	adr	x9, 680 <inflate+0x32c>
     66c:	ldrh	w12, [x11, x10, lsl #1]
     670:	add	x9, x9, x12, lsl #2
     674:	mov	w8, #0x3f41                	// #16193
     678:	lsr	x25, x25, #3
     67c:	br	x9
     680:	mov	x0, x21
     684:	mov	w26, w24
     688:	mov	w24, w18
     68c:	mov	x28, x1
     690:	bl	1bfc <fixedtables>
     694:	mov	w18, w24
     698:	mov	w24, w26
     69c:	ldp	x26, x3, [x29, #-24]
     6a0:	adrp	x4, 0 <inflateResetKeep>
     6a4:	add	x4, x4, #0x0
     6a8:	mov	w0, #0xffffc0cc            	// #-16180
     6ac:	mov	x1, x28
     6b0:	mov	w8, #0x3f47                	// #16199
     6b4:	cmp	w24, #0x6
     6b8:	str	w8, [x21, #8]
     6bc:	b.ne	c30 <inflate+0x8dc>  // b.any
     6c0:	b	1bf0 <inflate+0x189c>
     6c4:	and	w8, w20, #0x7
     6c8:	and	w20, w20, #0xfffffff8
     6cc:	cmp	w20, #0x1f
     6d0:	lsr	x25, x25, x8
     6d4:	b.hi	700 <inflate+0x3ac>  // b.pmore
     6d8:	mov	w8, w20
     6dc:	cbz	w27, 1a00 <inflate+0x16ac>
     6e0:	ldrb	w9, [x23], #1
     6e4:	add	x20, x8, #0x8
     6e8:	sub	w27, w27, #0x1
     6ec:	cmp	x8, #0x18
     6f0:	lsl	x9, x9, x8
     6f4:	add	x25, x9, x25
     6f8:	mov	x8, x20
     6fc:	b.cc	6dc <inflate+0x388>  // b.lo, b.ul, b.last
     700:	lsr	x8, x25, #16
     704:	eor	x8, x8, #0xffff
     708:	cmp	x8, w25, uxth
     70c:	b.ne	bfc <inflate+0x8a8>  // b.any
     710:	mov	w20, wzr
     714:	and	w8, w25, #0xffff
     718:	mov	w9, #0x3f42                	// #16194
     71c:	cmp	w24, #0x6
     720:	mov	x25, xzr
     724:	str	w8, [x21, #92]
     728:	str	w9, [x21, #8]
     72c:	b.eq	1a34 <inflate+0x16e0>  // b.none
     730:	mov	w8, #0x3f43                	// #16195
     734:	str	w8, [x1]
     738:	ldr	w8, [x21, #92]
     73c:	cbz	w8, 9b8 <inflate+0x664>
     740:	cmp	w8, w27
     744:	csel	w8, w27, w8, hi  // hi = pmore
     748:	cmp	w8, w18
     74c:	mov	w26, w24
     750:	csel	w24, w18, w8, hi  // hi = pmore
     754:	str	x19, [sp, #16]
     758:	stur	x1, [x29, #-40]
     75c:	cbz	w24, 1a70 <inflate+0x171c>
     760:	mov	w28, w24
     764:	mov	x0, x22
     768:	mov	x1, x23
     76c:	mov	x2, x28
     770:	mov	w19, w18
     774:	bl	0 <memcpy>
     778:	ldr	w8, [x21, #92]
     77c:	mov	w18, w19
     780:	sub	w27, w27, w24
     784:	sub	w18, w19, w24
     788:	sub	w8, w8, w24
     78c:	str	w8, [x21, #92]
     790:	mov	w24, w26
     794:	ldur	x1, [x29, #-40]
     798:	ldr	x19, [sp, #16]
     79c:	ldp	x26, x3, [x29, #-24]
     7a0:	adrp	x4, 0 <inflateResetKeep>
     7a4:	add	x4, x4, #0x0
     7a8:	mov	w0, #0xffffc0cc            	// #-16180
     7ac:	add	x23, x23, x28
     7b0:	add	x22, x22, x28
     7b4:	b	438 <inflate+0xe4>
     7b8:	cmp	w20, #0xd
     7bc:	b.hi	7e8 <inflate+0x494>  // b.pmore
     7c0:	mov	w8, w20
     7c4:	cbz	w27, 1a00 <inflate+0x16ac>
     7c8:	ldrb	w9, [x23], #1
     7cc:	add	x20, x8, #0x8
     7d0:	sub	w27, w27, #0x1
     7d4:	cmp	x8, #0x6
     7d8:	lsl	x9, x9, x8
     7dc:	add	x25, x9, x25
     7e0:	mov	x8, x20
     7e4:	b.cc	7c4 <inflate+0x470>  // b.lo, b.ul, b.last
     7e8:	and	w9, w25, #0x1f
     7ec:	ubfx	w8, w25, #5, #5
     7f0:	ubfx	w10, w25, #10, #4
     7f4:	lsr	x25, x25, #14
     7f8:	add	w11, w9, #0x101
     7fc:	add	w12, w8, #0x1
     800:	add	w10, w10, #0x4
     804:	cmp	w9, #0x1d
     808:	sub	w20, w20, #0xe
     80c:	stp	w11, w12, [x21, #132]
     810:	str	w10, [x21, #128]
     814:	b.hi	c08 <inflate+0x8b4>  // b.pmore
     818:	cmp	w8, #0x1e
     81c:	b.cs	c08 <inflate+0x8b4>  // b.hs, b.nlast
     820:	mov	w8, #0x3f45                	// #16197
     824:	str	wzr, [x21, #140]
     828:	str	w8, [x21, #8]
     82c:	ldr	w9, [x21, #140]
     830:	ldr	w8, [x21, #128]
     834:	cmp	w9, w8
     838:	adrp	x8, 0 <inflateResetKeep>
     83c:	add	x8, x8, #0x0
     840:	b.cc	8f4 <inflate+0x5a0>  // b.lo, b.ul, b.last
     844:	ldr	w9, [x21, #140]
     848:	mov	x26, x1
     84c:	mov	w28, w18
     850:	cmp	w9, #0x12
     854:	b.hi	874 <inflate+0x520>  // b.pmore
     858:	ldrh	w10, [x8, x9, lsl #1]
     85c:	add	x9, x9, #0x1
     860:	cmp	x9, #0x13
     864:	add	x10, x21, x10, lsl #1
     868:	strh	wzr, [x10, #152]
     86c:	b.ne	858 <inflate+0x504>  // b.any
     870:	str	w9, [x21, #140]
     874:	ldp	x4, x8, [sp, #32]
     878:	ldr	x1, [sp, #24]
     87c:	ldur	x5, [x29, #-24]
     880:	mov	w2, #0x13                  	// #19
     884:	str	x8, [x21, #144]
     888:	str	x8, [x21, #104]
     88c:	mov	w8, #0x7                   	// #7
     890:	mov	w0, wzr
     894:	str	w8, [x21, #120]
     898:	bl	0 <inflate_table>
     89c:	cbz	w0, 9c4 <inflate+0x670>
     8a0:	adrp	x8, 0 <inflateResetKeep>
     8a4:	add	x8, x8, #0x0
     8a8:	mov	w9, #0x3f51                	// #16209
     8ac:	stur	w0, [x29, #-28]
     8b0:	str	x8, [x19, #48]
     8b4:	mov	x1, x26
     8b8:	str	w9, [x26]
     8bc:	mov	w18, w28
     8c0:	b	11e8 <inflate+0xe94>
     8c4:	ldrh	w10, [x8, w9, uxtw #1]
     8c8:	add	w9, w9, #0x1
     8cc:	and	w11, w25, #0x7
     8d0:	str	w9, [x21, #140]
     8d4:	add	x9, x21, x10, lsl #1
     8d8:	strh	w11, [x9, #152]
     8dc:	ldr	w9, [x21, #140]
     8e0:	ldr	w10, [x21, #128]
     8e4:	lsr	x25, x25, #3
     8e8:	sub	w20, w20, #0x3
     8ec:	cmp	w9, w10
     8f0:	b.cs	844 <inflate+0x4f0>  // b.hs, b.nlast
     8f4:	cmp	w20, #0x2
     8f8:	b.hi	8c4 <inflate+0x570>  // b.pmore
     8fc:	cbz	w27, 1a04 <inflate+0x16b0>
     900:	ldrb	w10, [x23], #1
     904:	add	w11, w20, #0x8
     908:	sub	w27, w27, #0x1
     90c:	lsl	x10, x10, x20
     910:	add	x25, x10, x25
     914:	mov	w20, w11
     918:	b	8c4 <inflate+0x570>
     91c:	cbz	w18, 1a34 <inflate+0x16e0>
     920:	ldr	w8, [x21, #92]
     924:	mov	w9, #0x3f48                	// #16200
     928:	sub	w18, w18, #0x1
     92c:	strb	w8, [x22], #1
     930:	str	w9, [x21, #8]
     934:	b	438 <inflate+0xe4>
     938:	ldr	w8, [x21, #16]
     93c:	cbz	w8, 127c <inflate+0xf28>
     940:	cmp	w20, #0x1f
     944:	b.hi	970 <inflate+0x61c>  // b.pmore
     948:	mov	w9, w20
     94c:	cbz	w27, 19f4 <inflate+0x16a0>
     950:	ldrb	w10, [x23], #1
     954:	add	x20, x9, #0x8
     958:	sub	w27, w27, #0x1
     95c:	cmp	x9, #0x18
     960:	lsl	x10, x10, x9
     964:	add	x25, x10, x25
     968:	mov	x9, x20
     96c:	b.cc	94c <inflate+0x5f8>  // b.lo, b.ul, b.last
     970:	ldur	w10, [x29, #-8]
     974:	ldr	x9, [x19, #40]
     978:	subs	w2, w10, w18
     97c:	add	x9, x9, x2
     980:	str	x9, [x19, #40]
     984:	ldr	x9, [x21, #40]
     988:	add	x9, x9, x2
     98c:	str	x9, [x21, #40]
     990:	b.eq	122c <inflate+0xed8>  // b.none
     994:	tbz	w8, #2, 122c <inflate+0xed8>
     998:	ldr	w8, [x21, #24]
     99c:	ldr	x0, [x21, #32]
     9a0:	mov	x26, x1
     9a4:	mov	w28, w18
     9a8:	sub	x1, x22, x2
     9ac:	cbz	w8, 1208 <inflate+0xeb4>
     9b0:	bl	0 <crc32>
     9b4:	b	120c <inflate+0xeb8>
     9b8:	mov	w8, #0x3f3f                	// #16191
     9bc:	str	w8, [x1]
     9c0:	b	438 <inflate+0xe4>
     9c4:	mov	w8, #0x3f46                	// #16198
     9c8:	str	wzr, [x21, #140]
     9cc:	str	w8, [x21, #8]
     9d0:	mov	x1, x26
     9d4:	ldp	x26, x3, [x29, #-24]
     9d8:	adrp	x4, 0 <inflateResetKeep>
     9dc:	mov	w18, w28
     9e0:	mov	w0, #0xffffc0cc            	// #-16180
     9e4:	add	x4, x4, #0x0
     9e8:	stur	wzr, [x29, #-28]
     9ec:	ldp	w2, w8, [x21, #132]
     9f0:	ldr	w10, [x21, #140]
     9f4:	add	w11, w8, w2
     9f8:	cmp	w10, w11
     9fc:	b.cs	1360 <inflate+0x100c>  // b.hs, b.nlast
     a00:	ldr	w9, [x21, #120]
     a04:	ldr	x8, [x21, #104]
     a08:	mov	w12, #0xffffffff            	// #-1
     a0c:	lsl	w9, w12, w9
     a10:	mvn	w9, w9
     a14:	and	w12, w9, w25
     a18:	add	x13, x8, w12, uxtw #2
     a1c:	ldrb	w12, [x13, #1]
     a20:	cmp	w20, w12
     a24:	b.cs	a7c <inflate+0x728>  // b.hs, b.nlast
     a28:	mov	w13, w20
     a2c:	add	w20, w20, w27, lsl #3
     a30:	add	x14, x23, w27, uxtw
     a34:	cbz	w27, 1a18 <inflate+0x16c4>
     a38:	ldrb	w12, [x23], #1
     a3c:	ldr	w16, [x21, #120]
     a40:	ldr	x15, [x21, #104]
     a44:	mov	w17, #0xffffffff            	// #-1
     a48:	lsl	x12, x12, x13
     a4c:	add	x25, x12, x25
     a50:	lsl	w12, w17, w16
     a54:	bic	w12, w25, w12
     a58:	add	x15, x15, w12, uxtw #2
     a5c:	ldrb	w12, [x15, #1]
     a60:	add	x13, x13, #0x8
     a64:	sub	w27, w27, #0x1
     a68:	cmp	x13, x12
     a6c:	b.cc	a34 <inflate+0x6e0>  // b.lo, b.ul, b.last
     a70:	add	x14, x15, #0x2
     a74:	mov	w20, w13
     a78:	b	a80 <inflate+0x72c>
     a7c:	add	x14, x13, #0x2
     a80:	ldrh	w13, [x14]
     a84:	cmp	w13, #0xf
     a88:	b.hi	aa8 <inflate+0x754>  // b.pmore
     a8c:	add	w11, w10, #0x1
     a90:	add	x10, x21, w10, uxtw #1
     a94:	lsr	x25, x25, x12
     a98:	sub	w20, w20, w12
     a9c:	str	w11, [x21, #140]
     aa0:	strh	w13, [x10, #152]
     aa4:	b	bd8 <inflate+0x884>
     aa8:	cmp	w13, #0x10
     aac:	b.eq	b08 <inflate+0x7b4>  // b.none
     ab0:	cmp	w13, #0x11
     ab4:	b.ne	b64 <inflate+0x810>  // b.any
     ab8:	add	w13, w12, #0x3
     abc:	cmp	w20, w13
     ac0:	b.cs	ae8 <inflate+0x794>  // b.hs, b.nlast
     ac4:	mov	w20, w20
     ac8:	cbz	w27, 1a04 <inflate+0x16b0>
     acc:	ldrb	w14, [x23], #1
     ad0:	sub	w27, w27, #0x1
     ad4:	lsl	x14, x14, x20
     ad8:	add	x20, x20, #0x8
     adc:	cmp	x20, x13
     ae0:	add	x25, x14, x25
     ae4:	b.cc	ac8 <inflate+0x774>  // b.lo, b.ul, b.last
     ae8:	lsr	x14, x25, x12
     aec:	sub	w15, w20, w12
     af0:	and	w12, w14, #0x7
     af4:	mov	w13, wzr
     af8:	lsr	x25, x14, #3
     afc:	add	w12, w12, #0x3
     b00:	sub	w20, w15, #0x3
     b04:	b	bb0 <inflate+0x85c>
     b08:	add	w13, w12, #0x2
     b0c:	cmp	w20, w13
     b10:	b.cs	b38 <inflate+0x7e4>  // b.hs, b.nlast
     b14:	mov	w20, w20
     b18:	cbz	w27, 1a04 <inflate+0x16b0>
     b1c:	ldrb	w14, [x23], #1
     b20:	sub	w27, w27, #0x1
     b24:	lsl	x14, x14, x20
     b28:	add	x20, x20, #0x8
     b2c:	cmp	x20, x13
     b30:	add	x25, x14, x25
     b34:	b.cc	b18 <inflate+0x7c4>  // b.lo, b.ul, b.last
     b38:	lsr	x25, x25, x12
     b3c:	sub	w20, w20, w12
     b40:	cbz	w10, 134c <inflate+0xff8>
     b44:	sub	w12, w10, #0x1
     b48:	add	x12, x21, w12, uxtw #1
     b4c:	ldrh	w13, [x12, #152]
     b50:	and	w12, w25, #0x3
     b54:	add	w12, w12, #0x3
     b58:	lsr	x25, x25, #2
     b5c:	sub	w20, w20, #0x2
     b60:	b	bb0 <inflate+0x85c>
     b64:	add	w13, w12, #0x7
     b68:	cmp	w20, w13
     b6c:	b.cs	b94 <inflate+0x840>  // b.hs, b.nlast
     b70:	mov	w20, w20
     b74:	cbz	w27, 1a04 <inflate+0x16b0>
     b78:	ldrb	w14, [x23], #1
     b7c:	sub	w27, w27, #0x1
     b80:	lsl	x14, x14, x20
     b84:	add	x20, x20, #0x8
     b88:	cmp	x20, x13
     b8c:	add	x25, x14, x25
     b90:	b.cc	b74 <inflate+0x820>  // b.lo, b.ul, b.last
     b94:	lsr	x14, x25, x12
     b98:	sub	w15, w20, w12
     b9c:	and	w12, w14, #0x7f
     ba0:	mov	w13, wzr
     ba4:	lsr	x25, x14, #7
     ba8:	add	w12, w12, #0xb
     bac:	sub	w20, w15, #0x7
     bb0:	add	w10, w12, w10
     bb4:	cmp	w10, w11
     bb8:	b.hi	134c <inflate+0xff8>  // b.pmore
     bbc:	ldr	w10, [x21, #140]
     bc0:	subs	w12, w12, #0x1
     bc4:	add	x11, x21, w10, uxtw #1
     bc8:	add	w10, w10, #0x1
     bcc:	strh	w13, [x11, #152]
     bd0:	b.ne	bc0 <inflate+0x86c>  // b.any
     bd4:	str	w10, [x21, #140]
     bd8:	ldp	w2, w11, [x21, #132]
     bdc:	ldr	w10, [x21, #140]
     be0:	add	w11, w11, w2
     be4:	cmp	w10, w11
     be8:	b.cc	a14 <inflate+0x6c0>  // b.lo, b.ul, b.last
     bec:	b	1360 <inflate+0x100c>
     bf0:	mov	w8, #0x3f40                	// #16192
     bf4:	str	w8, [x1]
     bf8:	b	438 <inflate+0xe4>
     bfc:	adrp	x8, 0 <inflateResetKeep>
     c00:	add	x8, x8, #0x0
     c04:	b	18ec <inflate+0x1598>
     c08:	adrp	x8, 0 <inflateResetKeep>
     c0c:	add	x8, x8, #0x0
     c10:	b	18ec <inflate+0x1598>
     c14:	mov	w8, #0x3f44                	// #16196
     c18:	b	c2c <inflate+0x8d8>
     c1c:	adrp	x8, 0 <inflateResetKeep>
     c20:	add	x8, x8, #0x0
     c24:	str	x8, [x19, #48]
     c28:	mov	w8, #0x3f51                	// #16209
     c2c:	str	w8, [x1]
     c30:	sub	w20, w20, #0x3
     c34:	b	438 <inflate+0xe4>
     c38:	ldr	x9, [x21, #48]
     c3c:	str	wzr, [x21, #24]
     c40:	cbz	x9, c4c <inflate+0x8f8>
     c44:	mov	w10, #0xffffffff            	// #-1
     c48:	str	w10, [x9, #72]
     c4c:	tbz	w8, #0, c88 <inflate+0x934>
     c50:	mov	x9, #0x7bdf                	// #31711
     c54:	lsl	w8, w25, #8
     c58:	movk	x9, #0xbdef, lsl #16
     c5c:	movk	x9, #0xdef7, lsl #32
     c60:	and	x8, x8, #0xff00
     c64:	movk	x9, #0xef7b, lsl #48
     c68:	add	x8, x8, x25, lsr #8
     c6c:	mul	x8, x8, x9
     c70:	mov	x9, #0x4211                	// #16913
     c74:	movk	x9, #0x2108, lsl #16
     c78:	movk	x9, #0x1084, lsl #32
     c7c:	movk	x9, #0x842, lsl #48
     c80:	cmp	x8, x9
     c84:	b.cc	12f8 <inflate+0xfa4>  // b.lo, b.ul, b.last
     c88:	adrp	x8, 0 <inflateResetKeep>
     c8c:	add	x8, x8, #0x0
     c90:	b	18ec <inflate+0x1598>
     c94:	ldr	x8, [x21, #48]
     c98:	cbz	x8, ca8 <inflate+0x954>
     c9c:	mov	w9, w25
     ca0:	ubfx	w9, w25, #8, #1
     ca4:	str	w9, [x8]
     ca8:	tbz	w25, #9, cec <inflate+0x998>
     cac:	ldrb	w8, [x21, #16]
     cb0:	tbz	w8, #2, cec <inflate+0x998>
     cb4:	sturh	w25, [x29, #-4]
     cb8:	ldr	x0, [x21, #32]
     cbc:	mov	x25, x1
     cc0:	sub	x1, x29, #0x4
     cc4:	mov	w2, #0x2                   	// #2
     cc8:	mov	w20, w18
     ccc:	bl	0 <crc32>
     cd0:	ldur	x3, [x29, #-16]
     cd4:	adrp	x4, 0 <inflateResetKeep>
     cd8:	add	x4, x4, #0x0
     cdc:	mov	x1, x25
     ce0:	mov	w18, w20
     ce4:	str	x0, [x21, #32]
     ce8:	mov	w0, #0xffffc0cc            	// #-16180
     cec:	mov	x25, xzr
     cf0:	mov	w20, wzr
     cf4:	mov	w8, #0x3f36                	// #16182
     cf8:	str	w8, [x1]
     cfc:	cmp	w20, #0x1f
     d00:	b.hi	d28 <inflate+0x9d4>  // b.pmore
     d04:	mov	w20, w20
     d08:	cbz	w27, 1a04 <inflate+0x16b0>
     d0c:	ldrb	w8, [x23], #1
     d10:	sub	w27, w27, #0x1
     d14:	cmp	x20, #0x18
     d18:	lsl	x8, x8, x20
     d1c:	add	x20, x20, #0x8
     d20:	add	x25, x8, x25
     d24:	b.cc	d08 <inflate+0x9b4>  // b.lo, b.ul, b.last
     d28:	ldr	x8, [x21, #48]
     d2c:	cbz	x8, d34 <inflate+0x9e0>
     d30:	str	x25, [x8, #8]
     d34:	ldrb	w8, [x21, #25]
     d38:	tbz	w8, #1, d7c <inflate+0xa28>
     d3c:	ldrb	w8, [x21, #16]
     d40:	tbz	w8, #2, d7c <inflate+0xa28>
     d44:	stur	w25, [x29, #-4]
     d48:	ldr	x0, [x21, #32]
     d4c:	mov	x25, x1
     d50:	sub	x1, x29, #0x4
     d54:	mov	w2, #0x4                   	// #4
     d58:	mov	w20, w18
     d5c:	bl	0 <crc32>
     d60:	ldur	x3, [x29, #-16]
     d64:	adrp	x4, 0 <inflateResetKeep>
     d68:	add	x4, x4, #0x0
     d6c:	mov	x1, x25
     d70:	mov	w18, w20
     d74:	str	x0, [x21, #32]
     d78:	mov	w0, #0xffffc0cc            	// #-16180
     d7c:	mov	x25, xzr
     d80:	mov	w20, wzr
     d84:	mov	w8, #0x3f37                	// #16183
     d88:	str	w8, [x1]
     d8c:	cmp	w20, #0xf
     d90:	b.hi	db8 <inflate+0xa64>  // b.pmore
     d94:	mov	w20, w20
     d98:	cbz	w27, 1a04 <inflate+0x16b0>
     d9c:	ldrb	w8, [x23], #1
     da0:	sub	w27, w27, #0x1
     da4:	cmp	x20, #0x8
     da8:	lsl	x8, x8, x20
     dac:	add	x20, x20, #0x8
     db0:	add	x25, x8, x25
     db4:	b.cc	d98 <inflate+0xa44>  // b.lo, b.ul, b.last
     db8:	ldr	x8, [x21, #48]
     dbc:	cbz	x8, dd0 <inflate+0xa7c>
     dc0:	mov	w9, w25
     dc4:	and	w9, w25, #0xff
     dc8:	lsr	x10, x25, #8
     dcc:	stp	w9, w10, [x8, #16]
     dd0:	ldrb	w8, [x21, #25]
     dd4:	tbz	w8, #1, e18 <inflate+0xac4>
     dd8:	ldrb	w8, [x21, #16]
     ddc:	tbz	w8, #2, e18 <inflate+0xac4>
     de0:	sturh	w25, [x29, #-4]
     de4:	ldr	x0, [x21, #32]
     de8:	mov	x25, x1
     dec:	sub	x1, x29, #0x4
     df0:	mov	w2, #0x2                   	// #2
     df4:	mov	w20, w18
     df8:	bl	0 <crc32>
     dfc:	ldur	x3, [x29, #-16]
     e00:	adrp	x4, 0 <inflateResetKeep>
     e04:	add	x4, x4, #0x0
     e08:	mov	x1, x25
     e0c:	mov	w18, w20
     e10:	str	x0, [x21, #32]
     e14:	mov	w0, #0xffffc0cc            	// #-16180
     e18:	mov	x25, xzr
     e1c:	mov	w20, wzr
     e20:	mov	w8, #0x3f38                	// #16184
     e24:	str	w8, [x1]
     e28:	ldr	w8, [x21, #24]
     e2c:	tbnz	w8, #10, e40 <inflate+0xaec>
     e30:	ldr	x8, [x21, #48]
     e34:	cbz	x8, ed4 <inflate+0xb80>
     e38:	str	xzr, [x8, #24]
     e3c:	b	ed4 <inflate+0xb80>
     e40:	cmp	w20, #0xf
     e44:	b.hi	e6c <inflate+0xb18>  // b.pmore
     e48:	mov	w20, w20
     e4c:	cbz	w27, 1a04 <inflate+0x16b0>
     e50:	ldrb	w9, [x23], #1
     e54:	sub	w27, w27, #0x1
     e58:	cmp	x20, #0x8
     e5c:	lsl	x9, x9, x20
     e60:	add	x20, x20, #0x8
     e64:	add	x25, x9, x25
     e68:	b.cc	e4c <inflate+0xaf8>  // b.lo, b.ul, b.last
     e6c:	ldr	x9, [x21, #48]
     e70:	str	w25, [x21, #92]
     e74:	cbz	x9, e7c <inflate+0xb28>
     e78:	str	w25, [x9, #32]
     e7c:	tbz	w8, #9, e88 <inflate+0xb34>
     e80:	ldrb	w8, [x21, #16]
     e84:	tbnz	w8, #2, e94 <inflate+0xb40>
     e88:	mov	x25, xzr
     e8c:	mov	w20, wzr
     e90:	b	ed4 <inflate+0xb80>
     e94:	sturh	w25, [x29, #-4]
     e98:	ldr	x0, [x21, #32]
     e9c:	mov	x25, x1
     ea0:	sub	x1, x29, #0x4
     ea4:	mov	w2, #0x2                   	// #2
     ea8:	mov	w20, w18
     eac:	bl	0 <crc32>
     eb0:	ldur	x3, [x29, #-16]
     eb4:	adrp	x4, 0 <inflateResetKeep>
     eb8:	add	x4, x4, #0x0
     ebc:	mov	x1, x25
     ec0:	mov	w18, w20
     ec4:	mov	x25, xzr
     ec8:	mov	w20, wzr
     ecc:	str	x0, [x21, #32]
     ed0:	mov	w0, #0xffffc0cc            	// #-16180
     ed4:	mov	w8, #0x3f39                	// #16185
     ed8:	str	w8, [x1]
     edc:	ldrb	w8, [x21, #25]
     ee0:	tbz	w8, #2, fb8 <inflate+0xc64>
     ee4:	ldr	w8, [x21, #92]
     ee8:	cmp	w8, w27
     eec:	csel	w28, w27, w8, hi  // hi = pmore
     ef0:	cbz	w28, fb0 <inflate+0xc5c>
     ef4:	ldr	x9, [x21, #48]
     ef8:	cbz	x9, f50 <inflate+0xbfc>
     efc:	ldr	x10, [x9, #24]
     f00:	cbz	x10, f50 <inflate+0xbfc>
     f04:	ldp	w11, w9, [x9, #32]
     f08:	stur	x1, [x29, #-40]
     f0c:	mov	x1, x23
     f10:	mov	w26, w24
     f14:	sub	w8, w11, w8
     f18:	add	x0, x10, x8
     f1c:	add	w10, w8, w28
     f20:	sub	w8, w9, w8
     f24:	cmp	w10, w9
     f28:	csel	w2, w8, w28, hi  // hi = pmore
     f2c:	mov	w24, w18
     f30:	bl	0 <memcpy>
     f34:	ldur	x1, [x29, #-40]
     f38:	mov	w18, w24
     f3c:	mov	w24, w26
     f40:	ldp	x26, x3, [x29, #-24]
     f44:	adrp	x4, 0 <inflateResetKeep>
     f48:	add	x4, x4, #0x0
     f4c:	mov	w0, #0xffffc0cc            	// #-16180
     f50:	ldrb	w8, [x21, #25]
     f54:	tbz	w8, #1, f9c <inflate+0xc48>
     f58:	ldrb	w8, [x21, #16]
     f5c:	tbz	w8, #2, f9c <inflate+0xc48>
     f60:	ldr	x0, [x21, #32]
     f64:	stur	x1, [x29, #-40]
     f68:	mov	x1, x23
     f6c:	mov	w2, w28
     f70:	mov	w26, w24
     f74:	mov	w24, w18
     f78:	bl	0 <crc32>
     f7c:	ldur	x1, [x29, #-40]
     f80:	mov	w18, w24
     f84:	mov	w24, w26
     f88:	ldp	x26, x3, [x29, #-24]
     f8c:	adrp	x4, 0 <inflateResetKeep>
     f90:	add	x4, x4, #0x0
     f94:	str	x0, [x21, #32]
     f98:	mov	w0, #0xffffc0cc            	// #-16180
     f9c:	ldr	w8, [x21, #92]
     fa0:	sub	w27, w27, w28
     fa4:	add	x23, x23, w28, uxtw
     fa8:	sub	w8, w8, w28
     fac:	str	w8, [x21, #92]
     fb0:	ldr	w8, [x21, #92]
     fb4:	cbnz	w8, 1a34 <inflate+0x16e0>
     fb8:	mov	w8, #0x3f3a                	// #16186
     fbc:	str	wzr, [x21, #92]
     fc0:	str	w8, [x21, #8]
     fc4:	ldrb	w8, [x21, #25]
     fc8:	tbnz	w8, #3, fdc <inflate+0xc88>
     fcc:	ldr	x8, [x21, #48]
     fd0:	cbz	x8, 1080 <inflate+0xd2c>
     fd4:	str	xzr, [x8, #40]
     fd8:	b	1080 <inflate+0xd2c>
     fdc:	cbz	w27, 1a34 <inflate+0x16e0>
     fe0:	mov	x28, xzr
     fe4:	stur	x1, [x29, #-40]
     fe8:	str	w24, [sp, #16]
     fec:	ldr	x9, [x21, #48]
     ff0:	ldrb	w24, [x23, x28]
     ff4:	add	x28, x28, #0x1
     ff8:	cbz	x9, 1020 <inflate+0xccc>
     ffc:	ldr	x8, [x9, #40]
    1000:	cbz	x8, 1020 <inflate+0xccc>
    1004:	ldr	w10, [x21, #92]
    1008:	ldr	w9, [x9, #48]
    100c:	cmp	w10, w9
    1010:	b.cs	1020 <inflate+0xccc>  // b.hs, b.nlast
    1014:	add	w9, w10, #0x1
    1018:	str	w9, [x21, #92]
    101c:	strb	w24, [x8, x10]
    1020:	cbz	w24, 102c <inflate+0xcd8>
    1024:	cmp	w27, w28
    1028:	b.hi	fec <inflate+0xc98>  // b.pmore
    102c:	ldrb	w8, [x21, #25]
    1030:	tbz	w8, #1, 1068 <inflate+0xd14>
    1034:	ldrb	w8, [x21, #16]
    1038:	tbz	w8, #2, 1068 <inflate+0xd14>
    103c:	ldr	x0, [x21, #32]
    1040:	mov	x1, x23
    1044:	mov	w2, w28
    1048:	mov	w26, w18
    104c:	bl	0 <crc32>
    1050:	mov	w18, w26
    1054:	ldp	x26, x3, [x29, #-24]
    1058:	adrp	x4, 0 <inflateResetKeep>
    105c:	add	x4, x4, #0x0
    1060:	str	x0, [x21, #32]
    1064:	mov	w0, #0xffffc0cc            	// #-16180
    1068:	add	x23, x23, x28
    106c:	cbnz	w24, 1a3c <inflate+0x16e8>
    1070:	ldr	w24, [sp, #16]
    1074:	ldur	x1, [x29, #-40]
    1078:	mov	w8, w27
    107c:	sub	x27, x8, x28
    1080:	mov	w8, #0x3f3b                	// #16187
    1084:	str	wzr, [x21, #92]
    1088:	str	w8, [x21, #8]
    108c:	ldrb	w8, [x21, #25]
    1090:	tbnz	w8, #4, 10a4 <inflate+0xd50>
    1094:	ldr	x8, [x21, #48]
    1098:	cbz	x8, 1148 <inflate+0xdf4>
    109c:	str	xzr, [x8, #56]
    10a0:	b	1148 <inflate+0xdf4>
    10a4:	cbz	w27, 1a34 <inflate+0x16e0>
    10a8:	mov	x28, xzr
    10ac:	stur	x1, [x29, #-40]
    10b0:	str	w24, [sp, #16]
    10b4:	ldr	x9, [x21, #48]
    10b8:	ldrb	w24, [x23, x28]
    10bc:	add	x28, x28, #0x1
    10c0:	cbz	x9, 10e8 <inflate+0xd94>
    10c4:	ldr	x8, [x9, #56]
    10c8:	cbz	x8, 10e8 <inflate+0xd94>
    10cc:	ldr	w10, [x21, #92]
    10d0:	ldr	w9, [x9, #64]
    10d4:	cmp	w10, w9
    10d8:	b.cs	10e8 <inflate+0xd94>  // b.hs, b.nlast
    10dc:	add	w9, w10, #0x1
    10e0:	str	w9, [x21, #92]
    10e4:	strb	w24, [x8, x10]
    10e8:	cbz	w24, 10f4 <inflate+0xda0>
    10ec:	cmp	w27, w28
    10f0:	b.hi	10b4 <inflate+0xd60>  // b.pmore
    10f4:	ldrb	w8, [x21, #25]
    10f8:	tbz	w8, #1, 1130 <inflate+0xddc>
    10fc:	ldrb	w8, [x21, #16]
    1100:	tbz	w8, #2, 1130 <inflate+0xddc>
    1104:	ldr	x0, [x21, #32]
    1108:	mov	x1, x23
    110c:	mov	w2, w28
    1110:	mov	w26, w18
    1114:	bl	0 <crc32>
    1118:	mov	w18, w26
    111c:	ldp	x26, x3, [x29, #-24]
    1120:	adrp	x4, 0 <inflateResetKeep>
    1124:	add	x4, x4, #0x0
    1128:	str	x0, [x21, #32]
    112c:	mov	w0, #0xffffc0cc            	// #-16180
    1130:	add	x23, x23, x28
    1134:	cbnz	w24, 1a3c <inflate+0x16e8>
    1138:	ldr	w24, [sp, #16]
    113c:	ldur	x1, [x29, #-40]
    1140:	mov	w8, w27
    1144:	sub	x27, x8, x28
    1148:	mov	w8, #0x3f3c                	// #16188
    114c:	str	w8, [x1]
    1150:	ldr	w8, [x21, #24]
    1154:	tbz	w8, #9, 11a4 <inflate+0xe50>
    1158:	cmp	w20, #0xf
    115c:	b.hi	1188 <inflate+0xe34>  // b.pmore
    1160:	mov	w9, w20
    1164:	cbz	w27, 19f4 <inflate+0x16a0>
    1168:	ldrb	w10, [x23], #1
    116c:	add	x20, x9, #0x8
    1170:	sub	w27, w27, #0x1
    1174:	cmp	x9, #0x8
    1178:	lsl	x10, x10, x9
    117c:	add	x25, x10, x25
    1180:	mov	x9, x20
    1184:	b.cc	1164 <inflate+0xe10>  // b.lo, b.ul, b.last
    1188:	ldrb	w9, [x21, #16]
    118c:	tbz	w9, #2, 119c <inflate+0xe48>
    1190:	ldrh	w9, [x21, #32]
    1194:	cmp	x25, x9
    1198:	b.ne	11fc <inflate+0xea8>  // b.any
    119c:	mov	x25, xzr
    11a0:	mov	w20, wzr
    11a4:	ldr	x9, [x21, #48]
    11a8:	mov	x26, x1
    11ac:	mov	w28, w18
    11b0:	cbz	x9, 11c0 <inflate+0xe6c>
    11b4:	ubfx	w8, w8, #9, #1
    11b8:	mov	w10, #0x1                   	// #1
    11bc:	stp	w8, w10, [x9, #68]
    11c0:	mov	x0, xzr
    11c4:	mov	x1, xzr
    11c8:	mov	w2, wzr
    11cc:	bl	0 <crc32>
    11d0:	mov	w8, #0x3f3f                	// #16191
    11d4:	str	x0, [x21, #32]
    11d8:	str	x0, [x19, #96]
    11dc:	mov	w18, w28
    11e0:	mov	x1, x26
    11e4:	str	w8, [x21, #8]
    11e8:	ldp	x26, x3, [x29, #-24]
    11ec:	adrp	x4, 0 <inflateResetKeep>
    11f0:	mov	w0, #0xffffc0cc            	// #-16180
    11f4:	add	x4, x4, #0x0
    11f8:	b	438 <inflate+0xe4>
    11fc:	adrp	x8, 0 <inflateResetKeep>
    1200:	add	x8, x8, #0x0
    1204:	b	18ec <inflate+0x1598>
    1208:	bl	0 <adler32>
    120c:	str	x0, [x21, #32]
    1210:	str	x0, [x19, #96]
    1214:	mov	x1, x26
    1218:	ldp	x26, x3, [x29, #-24]
    121c:	adrp	x4, 0 <inflateResetKeep>
    1220:	mov	w18, w28
    1224:	mov	w0, #0xffffc0cc            	// #-16180
    1228:	add	x4, x4, #0x0
    122c:	ldrb	w8, [x21, #16]
    1230:	tbz	w8, #2, 1270 <inflate+0xf1c>
    1234:	ldr	w9, [x21, #24]
    1238:	mov	x8, x25
    123c:	cbnz	w9, 1264 <inflate+0xf10>
    1240:	lsr	x8, x25, #8
    1244:	lsl	w10, w25, #8
    1248:	and	x8, x8, #0xff00
    124c:	mov	w9, w25
    1250:	and	x10, x10, #0xff0000
    1254:	bfxil	x8, x25, #24, #8
    1258:	orr	x8, x8, x10
    125c:	lsl	w9, w25, #24
    1260:	orr	x8, x8, x9
    1264:	ldr	x9, [x21, #32]
    1268:	cmp	x8, x9
    126c:	b.ne	12dc <inflate+0xf88>  // b.any
    1270:	mov	x25, xzr
    1274:	mov	w20, wzr
    1278:	stur	w18, [x29, #-8]
    127c:	mov	w8, #0x3f4f                	// #16207
    1280:	str	w8, [x1]
    1284:	ldr	w8, [x21, #16]
    1288:	cbz	w8, 1be0 <inflate+0x188c>
    128c:	ldr	w8, [x21, #24]
    1290:	cbz	w8, 1be0 <inflate+0x188c>
    1294:	cmp	w20, #0x1f
    1298:	b.hi	12c4 <inflate+0xf70>  // b.pmore
    129c:	mov	w8, w20
    12a0:	cbz	w27, 1a00 <inflate+0x16ac>
    12a4:	ldrb	w9, [x23], #1
    12a8:	add	x20, x8, #0x8
    12ac:	sub	w27, w27, #0x1
    12b0:	cmp	x8, #0x18
    12b4:	lsl	x9, x9, x8
    12b8:	add	x25, x9, x25
    12bc:	mov	x8, x20
    12c0:	b.cc	12a0 <inflate+0xf4c>  // b.lo, b.ul, b.last
    12c4:	ldr	w8, [x21, #40]
    12c8:	cmp	x25, x8
    12cc:	b.eq	1bd8 <inflate+0x1884>  // b.none
    12d0:	adrp	x8, 0 <inflateResetKeep>
    12d4:	add	x8, x8, #0x0
    12d8:	b	18ec <inflate+0x1598>
    12dc:	adrp	x8, 0 <inflateResetKeep>
    12e0:	add	x8, x8, #0x0
    12e4:	mov	w9, #0x3f51                	// #16209
    12e8:	str	x8, [x19, #48]
    12ec:	str	w9, [x1]
    12f0:	stur	w18, [x29, #-8]
    12f4:	b	438 <inflate+0xe4>
    12f8:	and	x8, x25, #0xf
    12fc:	cmp	x8, #0x8
    1300:	b.ne	1340 <inflate+0xfec>  // b.any
    1304:	ldr	w10, [x21, #56]
    1308:	ubfx	x8, x25, #4, #4
    130c:	add	w9, w8, #0x8
    1310:	cbnz	w10, 1318 <inflate+0xfc4>
    1314:	str	w9, [x21, #56]
    1318:	cmp	w8, #0x7
    131c:	b.hi	132c <inflate+0xfd8>  // b.pmore
    1320:	ldr	w10, [x21, #56]
    1324:	cmp	w9, w10
    1328:	b.ls	1984 <inflate+0x1630>  // b.plast
    132c:	adrp	x8, 0 <inflateResetKeep>
    1330:	lsr	x25, x25, #4
    1334:	sub	w20, w20, #0x4
    1338:	add	x8, x8, #0x0
    133c:	b	18ec <inflate+0x1598>
    1340:	adrp	x8, 0 <inflateResetKeep>
    1344:	add	x8, x8, #0x0
    1348:	b	18ec <inflate+0x1598>
    134c:	adrp	x8, 0 <inflateResetKeep>
    1350:	add	x8, x8, #0x0
    1354:	mov	w9, #0x3f51                	// #16209
    1358:	str	x8, [x19, #48]
    135c:	str	w9, [x1]
    1360:	ldr	w8, [x1]
    1364:	mov	w9, #0x3f51                	// #16209
    1368:	cmp	w8, w9
    136c:	b.eq	438 <inflate+0xe4>  // b.none
    1370:	ldrh	w8, [x21, #664]
    1374:	cbz	w8, 13d4 <inflate+0x1080>
    1378:	ldp	x4, x8, [sp, #32]
    137c:	stur	x1, [x29, #-40]
    1380:	ldr	x1, [sp, #24]
    1384:	mov	w0, #0x1                   	// #1
    1388:	str	x8, [x21, #144]
    138c:	str	x8, [x21, #104]
    1390:	mov	w8, #0x9                   	// #9
    1394:	mov	x5, x26
    1398:	str	w18, [sp, #16]
    139c:	str	w8, [x21, #120]
    13a0:	mov	x28, x3
    13a4:	bl	0 <inflate_table>
    13a8:	cbz	w0, 13e0 <inflate+0x108c>
    13ac:	ldur	x1, [x29, #-40]
    13b0:	ldr	w18, [sp, #16]
    13b4:	adrp	x8, 0 <inflateResetKeep>
    13b8:	add	x8, x8, #0x0
    13bc:	mov	w9, #0x3f51                	// #16209
    13c0:	stur	w0, [x29, #-28]
    13c4:	str	x8, [x19, #48]
    13c8:	str	w9, [x1]
    13cc:	mov	x3, x28
    13d0:	b	11ec <inflate+0xe98>
    13d4:	adrp	x8, 0 <inflateResetKeep>
    13d8:	add	x8, x8, #0x0
    13dc:	b	18ec <inflate+0x1598>
    13e0:	ldr	x8, [x21, #144]
    13e4:	ldp	w10, w2, [x21, #132]
    13e8:	ldr	x4, [sp, #8]
    13ec:	mov	w9, #0x6                   	// #6
    13f0:	str	x8, [x21, #112]
    13f4:	add	x8, x21, x10, lsl #1
    13f8:	add	x1, x8, #0x98
    13fc:	mov	w0, #0x2                   	// #2
    1400:	mov	x3, x28
    1404:	mov	x5, x26
    1408:	str	w9, [x21, #124]
    140c:	bl	0 <inflate_table>
    1410:	cbz	w0, 1438 <inflate+0x10e4>
    1414:	ldur	x1, [x29, #-40]
    1418:	ldr	w18, [sp, #16]
    141c:	adrp	x8, 0 <inflateResetKeep>
    1420:	add	x8, x8, #0x0
    1424:	mov	w9, #0x3f51                	// #16209
    1428:	stur	w0, [x29, #-28]
    142c:	str	x8, [x19, #48]
    1430:	str	w9, [x1]
    1434:	b	11e8 <inflate+0xe94>
    1438:	ldur	x1, [x29, #-40]
    143c:	mov	w9, #0x3f47                	// #16199
    1440:	ldr	w18, [sp, #16]
    1444:	adrp	x4, 0 <inflateResetKeep>
    1448:	str	w9, [x1]
    144c:	ldp	x26, x3, [x29, #-24]
    1450:	mov	w8, wzr
    1454:	cmp	w24, #0x6
    1458:	mov	w0, #0xffffc0cc            	// #-16180
    145c:	add	x4, x4, #0x0
    1460:	stur	wzr, [x29, #-28]
    1464:	b.eq	1a80 <inflate+0x172c>  // b.none
    1468:	mov	w8, #0x3f48                	// #16200
    146c:	str	w8, [x1]
    1470:	cmp	w18, #0x102
    1474:	b.cc	14f0 <inflate+0x119c>  // b.lo, b.ul, b.last
    1478:	cmp	w27, #0x6
    147c:	b.cc	14f0 <inflate+0x119c>  // b.lo, b.ul, b.last
    1480:	str	x22, [x19, #24]
    1484:	str	w18, [x19, #32]
    1488:	str	x23, [x19]
    148c:	str	w27, [x19, #8]
    1490:	str	w20, [x21, #88]
    1494:	mov	x20, x1
    1498:	ldur	w1, [x29, #-8]
    149c:	mov	x0, x19
    14a0:	str	x25, [x21, #80]
    14a4:	bl	0 <inflate_fast>
    14a8:	ldr	w8, [x21, #8]
    14ac:	ldur	x3, [x29, #-16]
    14b0:	mov	x1, x20
    14b4:	ldr	x22, [x19, #24]
    14b8:	ldr	w18, [x19, #32]
    14bc:	ldr	x23, [x19]
    14c0:	ldr	w27, [x19, #8]
    14c4:	ldr	x25, [x21, #80]
    14c8:	ldr	w20, [x21, #88]
    14cc:	adrp	x4, 0 <inflateResetKeep>
    14d0:	mov	w9, #0x3f3f                	// #16191
    14d4:	add	x4, x4, #0x0
    14d8:	mov	w0, #0xffffc0cc            	// #-16180
    14dc:	cmp	w8, w9
    14e0:	b.ne	438 <inflate+0xe4>  // b.any
    14e4:	mov	w8, #0xffffffff            	// #-1
    14e8:	str	w8, [x21, #7148]
    14ec:	b	438 <inflate+0xe4>
    14f0:	ldr	w8, [x21, #120]
    14f4:	ldr	x9, [x21, #104]
    14f8:	mov	w10, #0xffffffff            	// #-1
    14fc:	str	wzr, [x21, #7148]
    1500:	lsl	w8, w10, w8
    1504:	bic	w8, w25, w8
    1508:	add	x10, x9, w8, uxtw #2
    150c:	ldrb	w8, [x10, #1]
    1510:	cmp	w20, w8
    1514:	b.cs	156c <inflate+0x1218>  // b.hs, b.nlast
    1518:	mov	w11, w20
    151c:	add	w20, w20, w27, lsl #3
    1520:	add	x12, x23, w27, uxtw
    1524:	cbz	w27, 1a0c <inflate+0x16b8>
    1528:	ldrb	w8, [x23], #1
    152c:	ldr	w10, [x21, #120]
    1530:	ldr	x9, [x21, #104]
    1534:	mov	w13, #0xffffffff            	// #-1
    1538:	lsl	x8, x8, x11
    153c:	add	x25, x8, x25
    1540:	lsl	w8, w13, w10
    1544:	bic	w8, w25, w8
    1548:	add	x10, x9, w8, uxtw #2
    154c:	ldrb	w8, [x10, #1]
    1550:	add	x11, x11, #0x8
    1554:	sub	w27, w27, #0x1
    1558:	cmp	x11, x8
    155c:	b.cc	1524 <inflate+0x11d0>  // b.lo, b.ul, b.last
    1560:	add	x12, x10, #0x2
    1564:	mov	w20, w11
    1568:	b	1570 <inflate+0x121c>
    156c:	add	x12, x10, #0x2
    1570:	ldrb	w11, [x10]
    1574:	ldrh	w10, [x12]
    1578:	cbz	w11, 161c <inflate+0x12c8>
    157c:	and	w12, w11, #0xf0
    1580:	cbnz	w12, 161c <inflate+0x12c8>
    1584:	add	w11, w8, w11
    1588:	mov	w12, #0xffffffff            	// #-1
    158c:	lsl	w11, w12, w11
    1590:	bic	w12, w25, w11
    1594:	lsr	w12, w12, w8
    1598:	add	w13, w12, w10
    159c:	add	x12, x9, w13, uxtw #2
    15a0:	ldrb	w12, [x12, #1]
    15a4:	add	w14, w8, w12
    15a8:	cmp	w14, w20
    15ac:	b.ls	1600 <inflate+0x12ac>  // b.plast
    15b0:	mvn	w13, w11
    15b4:	mov	w11, w20
    15b8:	add	w20, w20, w27, lsl #3
    15bc:	add	x14, x23, w27, uxtw
    15c0:	cbz	w27, 1a18 <inflate+0x16c4>
    15c4:	ldrb	w12, [x23], #1
    15c8:	sub	w27, w27, #0x1
    15cc:	lsl	x12, x12, x11
    15d0:	add	x25, x12, x25
    15d4:	and	w12, w25, w13
    15d8:	lsr	w12, w12, w8
    15dc:	add	w15, w12, w10
    15e0:	add	x12, x9, w15, uxtw #2
    15e4:	ldrb	w12, [x12, #1]
    15e8:	add	x11, x11, #0x8
    15ec:	add	x16, x8, x12
    15f0:	cmp	x11, x16
    15f4:	b.cc	15c0 <inflate+0x126c>  // b.lo, b.ul, b.last
    15f8:	mov	w13, w15
    15fc:	mov	w20, w11
    1600:	add	x9, x9, x13, lsl #2
    1604:	ldrh	w10, [x9, #2]
    1608:	ldrb	w11, [x9]
    160c:	lsr	x25, x25, x8
    1610:	sub	w20, w20, w8
    1614:	str	w8, [x21, #7148]
    1618:	mov	w8, w12
    161c:	ldr	w9, [x21, #7148]
    1620:	lsr	x25, x25, x8
    1624:	sub	w20, w20, w8
    1628:	str	w10, [x21, #92]
    162c:	add	w8, w9, w8
    1630:	str	w8, [x21, #7148]
    1634:	cbz	w11, 1958 <inflate+0x1604>
    1638:	tbnz	w11, #5, 1964 <inflate+0x1610>
    163c:	tbnz	w11, #6, 1978 <inflate+0x1624>
    1640:	and	w8, w11, #0xf
    1644:	mov	w9, #0x3f49                	// #16201
    1648:	str	w8, [x21, #100]
    164c:	str	w9, [x21, #8]
    1650:	ldr	w8, [x21, #100]
    1654:	cbz	w8, 16b4 <inflate+0x1360>
    1658:	cmp	w20, w8
    165c:	b.cs	1688 <inflate+0x1334>  // b.hs, b.nlast
    1660:	add	w9, w20, w27, lsl #3
    1664:	add	x10, x23, w27, uxtw
    1668:	cbz	w27, 1a24 <inflate+0x16d0>
    166c:	ldrb	w11, [x23], #1
    1670:	sub	w27, w27, #0x1
    1674:	lsl	x11, x11, x20
    1678:	add	w20, w20, #0x8
    167c:	cmp	w20, w8
    1680:	add	x25, x11, x25
    1684:	b.cc	1668 <inflate+0x1314>  // b.lo, b.ul, b.last
    1688:	ldr	w10, [x21, #92]
    168c:	ldr	w11, [x21, #7148]
    1690:	mov	w9, #0xffffffff            	// #-1
    1694:	lsl	w9, w9, w8
    1698:	bic	w9, w25, w9
    169c:	sub	w20, w20, w8
    16a0:	lsr	x25, x25, x8
    16a4:	add	w9, w10, w9
    16a8:	add	w8, w11, w8
    16ac:	str	w9, [x21, #92]
    16b0:	str	w8, [x21, #7148]
    16b4:	ldr	w8, [x21, #92]
    16b8:	mov	w9, #0x3f4a                	// #16202
    16bc:	str	w9, [x21, #8]
    16c0:	str	w8, [x21, #7152]
    16c4:	ldr	w8, [x21, #124]
    16c8:	ldr	x9, [x21, #112]
    16cc:	mov	w10, #0xffffffff            	// #-1
    16d0:	lsl	w8, w10, w8
    16d4:	bic	w8, w25, w8
    16d8:	add	x10, x9, w8, uxtw #2
    16dc:	ldrb	w8, [x10, #1]
    16e0:	cmp	w20, w8
    16e4:	b.cs	173c <inflate+0x13e8>  // b.hs, b.nlast
    16e8:	mov	w11, w20
    16ec:	add	w20, w20, w27, lsl #3
    16f0:	add	x12, x23, w27, uxtw
    16f4:	cbz	w27, 1a0c <inflate+0x16b8>
    16f8:	ldrb	w8, [x23], #1
    16fc:	ldr	w10, [x21, #124]
    1700:	ldr	x9, [x21, #112]
    1704:	mov	w13, #0xffffffff            	// #-1
    1708:	lsl	x8, x8, x11
    170c:	add	x25, x8, x25
    1710:	lsl	w8, w13, w10
    1714:	bic	w8, w25, w8
    1718:	add	x10, x9, w8, uxtw #2
    171c:	ldrb	w8, [x10, #1]
    1720:	add	x11, x11, #0x8
    1724:	sub	w27, w27, #0x1
    1728:	cmp	x11, x8
    172c:	b.cc	16f4 <inflate+0x13a0>  // b.lo, b.ul, b.last
    1730:	add	x13, x10, #0x2
    1734:	mov	w20, w11
    1738:	b	1740 <inflate+0x13ec>
    173c:	add	x13, x10, #0x2
    1740:	ldrb	w12, [x10]
    1744:	ldrh	w10, [x13]
    1748:	tst	w12, #0xf0
    174c:	b.ne	17f0 <inflate+0x149c>  // b.any
    1750:	add	w11, w8, w12
    1754:	mov	w12, #0xffffffff            	// #-1
    1758:	lsl	w12, w12, w11
    175c:	bic	w11, w25, w12
    1760:	lsr	w11, w11, w8
    1764:	add	w13, w11, w10
    1768:	add	x11, x9, w13, uxtw #2
    176c:	ldrb	w11, [x11, #1]
    1770:	add	w14, w8, w11
    1774:	cmp	w14, w20
    1778:	b.ls	17cc <inflate+0x1478>  // b.plast
    177c:	mvn	w13, w12
    1780:	mov	w12, w20
    1784:	add	w20, w20, w27, lsl #3
    1788:	add	x14, x23, w27, uxtw
    178c:	cbz	w27, 1a18 <inflate+0x16c4>
    1790:	ldrb	w11, [x23], #1
    1794:	sub	w27, w27, #0x1
    1798:	lsl	x11, x11, x12
    179c:	add	x25, x11, x25
    17a0:	and	w11, w25, w13
    17a4:	lsr	w11, w11, w8
    17a8:	add	w15, w11, w10
    17ac:	add	x11, x9, w15, uxtw #2
    17b0:	ldrb	w11, [x11, #1]
    17b4:	add	x12, x12, #0x8
    17b8:	add	x16, x8, x11
    17bc:	cmp	x12, x16
    17c0:	b.cc	178c <inflate+0x1438>  // b.lo, b.ul, b.last
    17c4:	mov	w13, w15
    17c8:	mov	w20, w12
    17cc:	add	x9, x9, x13, lsl #2
    17d0:	ldr	w13, [x21, #7148]
    17d4:	ldrh	w10, [x9, #2]
    17d8:	ldrb	w12, [x9]
    17dc:	lsr	x25, x25, x8
    17e0:	sub	w20, w20, w8
    17e4:	add	w8, w13, w8
    17e8:	str	w8, [x21, #7148]
    17ec:	mov	w8, w11
    17f0:	ldr	w9, [x21, #7148]
    17f4:	lsr	x25, x25, x8
    17f8:	sub	w20, w20, w8
    17fc:	add	w8, w9, w8
    1800:	str	w8, [x21, #7148]
    1804:	tbnz	w12, #6, 18e4 <inflate+0x1590>
    1808:	and	w8, w12, #0xf
    180c:	mov	w9, #0x3f4b                	// #16203
    1810:	stp	w10, w8, [x21, #96]
    1814:	str	w9, [x21, #8]
    1818:	ldr	w8, [x21, #100]
    181c:	cbz	w8, 187c <inflate+0x1528>
    1820:	cmp	w20, w8
    1824:	b.cs	1850 <inflate+0x14fc>  // b.hs, b.nlast
    1828:	add	w9, w20, w27, lsl #3
    182c:	add	x10, x23, w27, uxtw
    1830:	cbz	w27, 1a24 <inflate+0x16d0>
    1834:	ldrb	w11, [x23], #1
    1838:	sub	w27, w27, #0x1
    183c:	lsl	x11, x11, x20
    1840:	add	w20, w20, #0x8
    1844:	cmp	w20, w8
    1848:	add	x25, x11, x25
    184c:	b.cc	1830 <inflate+0x14dc>  // b.lo, b.ul, b.last
    1850:	ldr	w10, [x21, #96]
    1854:	ldr	w11, [x21, #7148]
    1858:	mov	w9, #0xffffffff            	// #-1
    185c:	lsl	w9, w9, w8
    1860:	bic	w9, w25, w9
    1864:	sub	w20, w20, w8
    1868:	lsr	x25, x25, x8
    186c:	add	w9, w10, w9
    1870:	add	w8, w11, w8
    1874:	str	w9, [x21, #96]
    1878:	str	w8, [x21, #7148]
    187c:	mov	w8, #0x3f4c                	// #16204
    1880:	str	w8, [x1]
    1884:	cbz	w18, 1a34 <inflate+0x16e0>
    1888:	ldur	w9, [x29, #-8]
    188c:	ldr	w8, [x21, #96]
    1890:	sub	w9, w9, w18
    1894:	cmp	w8, w9
    1898:	b.ls	18c0 <inflate+0x156c>  // b.plast
    189c:	ldr	w10, [x21, #64]
    18a0:	sub	w8, w8, w9
    18a4:	cmp	w8, w10
    18a8:	b.ls	18cc <inflate+0x1578>  // b.plast
    18ac:	ldr	w9, [x21, #7144]
    18b0:	cbz	w9, 18cc <inflate+0x1578>
    18b4:	adrp	x8, 0 <inflateResetKeep>
    18b8:	add	x8, x8, #0x0
    18bc:	b	18ec <inflate+0x1598>
    18c0:	ldr	w9, [x21, #92]
    18c4:	sub	x8, x22, x8
    18c8:	b	1918 <inflate+0x15c4>
    18cc:	ldr	w10, [x21, #68]
    18d0:	subs	w9, w8, w10
    18d4:	b.ls	18fc <inflate+0x15a8>  // b.plast
    18d8:	ldr	w8, [x21, #60]
    18dc:	sub	w10, w8, w9
    18e0:	b	1904 <inflate+0x15b0>
    18e4:	adrp	x8, 0 <inflateResetKeep>
    18e8:	add	x8, x8, #0x0
    18ec:	mov	w9, #0x3f51                	// #16209
    18f0:	str	x8, [x19, #48]
    18f4:	str	w9, [x1]
    18f8:	b	438 <inflate+0xe4>
    18fc:	sub	w10, w10, w8
    1900:	mov	w9, w8
    1904:	ldr	w11, [x21, #92]
    1908:	ldr	x8, [x21, #72]
    190c:	cmp	w9, w11
    1910:	add	x8, x8, w10, uxtw
    1914:	csel	w9, w11, w9, hi  // hi = pmore
    1918:	ldr	w10, [x21, #92]
    191c:	cmp	w9, w18
    1920:	csel	w9, w18, w9, hi  // hi = pmore
    1924:	sub	w10, w10, w9
    1928:	str	w10, [x21, #92]
    192c:	mov	w10, w9
    1930:	ldrb	w11, [x8], #1
    1934:	subs	w10, w10, #0x1
    1938:	strb	w11, [x22], #1
    193c:	b.ne	1930 <inflate+0x15dc>  // b.any
    1940:	ldr	w8, [x21, #92]
    1944:	sub	w18, w18, w9
    1948:	cbnz	w8, 438 <inflate+0xe4>
    194c:	mov	w8, #0x3f48                	// #16200
    1950:	str	w8, [x1]
    1954:	b	438 <inflate+0xe4>
    1958:	mov	w8, #0x3f4d                	// #16205
    195c:	str	w8, [x1]
    1960:	b	438 <inflate+0xe4>
    1964:	mov	w8, #0xffffffff            	// #-1
    1968:	mov	w9, #0x3f3f                	// #16191
    196c:	str	w8, [x21, #7148]
    1970:	str	w9, [x21, #8]
    1974:	b	438 <inflate+0xe4>
    1978:	adrp	x8, 0 <inflateResetKeep>
    197c:	add	x8, x8, #0x0
    1980:	b	18ec <inflate+0x1598>
    1984:	mov	w9, #0x100                 	// #256
    1988:	lsl	w8, w9, w8
    198c:	mov	x0, xzr
    1990:	mov	x26, x1
    1994:	mov	x1, xzr
    1998:	mov	w2, wzr
    199c:	str	w8, [x21, #28]
    19a0:	mov	w20, w18
    19a4:	bl	0 <adler32>
    19a8:	mov	x1, x26
    19ac:	ldp	x26, x3, [x29, #-24]
    19b0:	tst	x25, #0x2000
    19b4:	mov	w8, #0x3f3d                	// #16189
    19b8:	mov	w9, #0x3f3f                	// #16191
    19bc:	adrp	x4, 0 <inflateResetKeep>
    19c0:	csel	w8, w9, w8, eq  // eq = none
    19c4:	add	x4, x4, #0x0
    19c8:	mov	w18, w20
    19cc:	mov	w20, wzr
    19d0:	str	x0, [x21, #32]
    19d4:	str	x0, [x19, #96]
    19d8:	mov	w0, #0xffffc0cc            	// #-16180
    19dc:	str	w8, [x21, #8]
    19e0:	mov	x25, xzr
    19e4:	b	438 <inflate+0xe4>
    19e8:	ldr	w8, [x19, #8]
    19ec:	cbnz	w8, 384 <inflate+0x30>
    19f0:	b	3b8 <inflate+0x64>
    19f4:	ldur	w28, [x29, #-28]
    19f8:	mov	w20, w9
    19fc:	b	1a84 <inflate+0x1730>
    1a00:	mov	w20, w8
    1a04:	ldur	w28, [x29, #-28]
    1a08:	b	1a84 <inflate+0x1730>
    1a0c:	ldur	w28, [x29, #-28]
    1a10:	mov	x23, x12
    1a14:	b	1a84 <inflate+0x1730>
    1a18:	ldur	w28, [x29, #-28]
    1a1c:	mov	x23, x14
    1a20:	b	1a84 <inflate+0x1730>
    1a24:	ldur	w28, [x29, #-28]
    1a28:	mov	x23, x10
    1a2c:	mov	w20, w9
    1a30:	b	1a84 <inflate+0x1730>
    1a34:	ldur	w8, [x29, #-28]
    1a38:	b	1a80 <inflate+0x172c>
    1a3c:	ldur	w8, [x29, #-28]
    1a40:	ldr	w24, [sp, #16]
    1a44:	ldur	x1, [x29, #-40]
    1a48:	sub	w27, w27, w28
    1a4c:	b	1a80 <inflate+0x172c>
    1a50:	str	x22, [x19, #24]
    1a54:	str	w18, [x19, #32]
    1a58:	str	x23, [x19]
    1a5c:	str	w27, [x19, #8]
    1a60:	str	x25, [x21, #80]
    1a64:	str	w20, [x21, #88]
    1a68:	mov	w0, #0x2                   	// #2
    1a6c:	b	388 <inflate+0x34>
    1a70:	ldur	w8, [x29, #-28]
    1a74:	ldur	x1, [x29, #-40]
    1a78:	ldr	x19, [sp, #16]
    1a7c:	mov	w24, w26
    1a80:	mov	w28, w8
    1a84:	str	x22, [x19, #24]
    1a88:	str	w18, [x19, #32]
    1a8c:	str	x23, [x19]
    1a90:	str	w27, [x19, #8]
    1a94:	ldr	w8, [x21, #60]
    1a98:	str	x25, [x21, #80]
    1a9c:	str	w20, [x21, #88]
    1aa0:	cbz	w8, 1ad4 <inflate+0x1780>
    1aa4:	ldur	w8, [x29, #-8]
    1aa8:	mov	x0, x19
    1aac:	mov	x20, x1
    1ab0:	mov	x1, x22
    1ab4:	sub	w2, w8, w18
    1ab8:	bl	1c20 <updatewindow>
    1abc:	cbz	w0, 1b04 <inflate+0x17b0>
    1ac0:	mov	w8, #0x3f52                	// #16210
    1ac4:	mov	x9, x20
    1ac8:	str	w8, [x20]
    1acc:	mov	w0, #0xfffffffc            	// #-4
    1ad0:	b	388 <inflate+0x34>
    1ad4:	ldur	w8, [x29, #-8]
    1ad8:	cmp	w8, w18
    1adc:	b.eq	1b04 <inflate+0x17b0>  // b.none
    1ae0:	ldr	w8, [x1]
    1ae4:	mov	w9, #0x3f50                	// #16208
    1ae8:	cmp	w8, w9
    1aec:	b.hi	1b04 <inflate+0x17b0>  // b.pmore
    1af0:	cmp	w24, #0x4
    1af4:	b.ne	1aa4 <inflate+0x1750>  // b.any
    1af8:	mov	w9, #0x3f4d                	// #16205
    1afc:	cmp	w8, w9
    1b00:	b.ls	1aa4 <inflate+0x1750>  // b.plast
    1b04:	ldr	w8, [x19, #8]
    1b08:	ldur	w12, [x29, #-44]
    1b0c:	ldr	w9, [x19, #32]
    1b10:	ldr	x10, [x19, #16]
    1b14:	ldr	x11, [x19, #40]
    1b18:	sub	w20, w12, w8
    1b1c:	ldur	w8, [x29, #-8]
    1b20:	subs	w22, w8, w9
    1b24:	add	x8, x10, x20
    1b28:	add	x9, x11, x22
    1b2c:	str	x8, [x19, #16]
    1b30:	str	x9, [x19, #40]
    1b34:	ldr	x8, [x21, #40]
    1b38:	add	x8, x8, x22
    1b3c:	str	x8, [x21, #40]
    1b40:	b.eq	1b78 <inflate+0x1824>  // b.none
    1b44:	ldr	w8, [x21, #16]
    1b48:	tbz	w8, #2, 1b78 <inflate+0x1824>
    1b4c:	ldr	x9, [x19, #24]
    1b50:	ldr	w8, [x21, #24]
    1b54:	ldr	x0, [x21, #32]
    1b58:	mov	w2, w22
    1b5c:	sub	x1, x9, x22
    1b60:	cbz	w8, 1b6c <inflate+0x1818>
    1b64:	bl	0 <crc32>
    1b68:	b	1b70 <inflate+0x181c>
    1b6c:	bl	0 <adler32>
    1b70:	str	x0, [x21, #32]
    1b74:	str	x0, [x19, #96]
    1b78:	ldp	w10, w9, [x21, #8]
    1b7c:	ldr	w8, [x21, #88]
    1b80:	mov	w12, #0x3f3f                	// #16191
    1b84:	orr	w11, w22, w20
    1b88:	cmp	w9, #0x0
    1b8c:	cset	w9, ne  // ne = any
    1b90:	cmp	w10, w12
    1b94:	mov	w12, #0x3f42                	// #16194
    1b98:	add	w8, w8, w9, lsl #6
    1b9c:	cset	w9, eq  // eq = none
    1ba0:	cmp	w10, w12
    1ba4:	mov	w12, #0x3f47                	// #16199
    1ba8:	add	w8, w8, w9, lsl #7
    1bac:	mov	w9, #0x100                 	// #256
    1bb0:	ccmp	w10, w12, #0x4, ne  // ne = any
    1bb4:	csel	w9, w9, wzr, eq  // eq = none
    1bb8:	cmp	w11, #0x0
    1bbc:	add	w8, w8, w9
    1bc0:	ccmp	w24, #0x4, #0x4, ne  // ne = any
    1bc4:	str	w8, [x19, #88]
    1bc8:	ccmp	w28, #0x0, #0x0, eq  // eq = none
    1bcc:	mov	w8, #0xfffffffb            	// #-5
    1bd0:	csel	w0, w8, w28, eq  // eq = none
    1bd4:	b	388 <inflate+0x34>
    1bd8:	mov	x25, xzr
    1bdc:	mov	w20, wzr
    1be0:	mov	w8, #0x3f50                	// #16208
    1be4:	str	w8, [x1]
    1be8:	mov	w28, #0x1                   	// #1
    1bec:	b	1a84 <inflate+0x1730>
    1bf0:	ldur	w28, [x29, #-28]
    1bf4:	sub	w20, w20, #0x3
    1bf8:	b	1a84 <inflate+0x1730>

0000000000001bfc <fixedtables>:
    1bfc:	adrp	x8, 0 <inflateResetKeep>
    1c00:	mov	x9, #0x9                   	// #9
    1c04:	adrp	x10, 0 <inflateResetKeep>
    1c08:	add	x8, x8, #0x0
    1c0c:	movk	x9, #0x5, lsl #32
    1c10:	add	x10, x10, #0x0
    1c14:	stp	x10, x9, [x0, #112]
    1c18:	str	x8, [x0, #104]
    1c1c:	ret

0000000000001c20 <updatewindow>:
    1c20:	stp	x29, x30, [sp, #-64]!
    1c24:	stp	x22, x21, [sp, #32]
    1c28:	stp	x20, x19, [sp, #48]
    1c2c:	str	x23, [sp, #16]
    1c30:	ldr	x23, [x0, #56]
    1c34:	mov	w20, w2
    1c38:	mov	x19, x1
    1c3c:	mov	x29, sp
    1c40:	ldr	x8, [x23, #72]
    1c44:	cbnz	x8, 1c6c <updatewindow+0x4c>
    1c48:	ldr	w9, [x23, #56]
    1c4c:	ldr	x8, [x0, #64]
    1c50:	ldr	x0, [x0, #80]
    1c54:	mov	w21, #0x1                   	// #1
    1c58:	lsl	w1, w21, w9
    1c5c:	mov	w2, #0x1                   	// #1
    1c60:	blr	x8
    1c64:	str	x0, [x23, #72]
    1c68:	cbz	x0, 1cfc <updatewindow+0xdc>
    1c6c:	ldr	w8, [x23, #60]
    1c70:	cbnz	w8, 1c88 <updatewindow+0x68>
    1c74:	ldr	w8, [x23, #56]
    1c78:	mov	w9, #0x1                   	// #1
    1c7c:	str	xzr, [x23, #64]
    1c80:	lsl	w8, w9, w8
    1c84:	str	w8, [x23, #60]
    1c88:	ldr	w2, [x23, #60]
    1c8c:	cmp	w2, w20
    1c90:	b.ls	1ce0 <updatewindow+0xc0>  // b.plast
    1c94:	ldr	w8, [x23, #68]
    1c98:	ldr	x9, [x23, #72]
    1c9c:	sub	x1, x19, w20, uxtw
    1ca0:	sub	w10, w2, w8
    1ca4:	cmp	w10, w20
    1ca8:	csel	w22, w20, w10, hi  // hi = pmore
    1cac:	add	x0, x9, x8
    1cb0:	mov	x2, x22
    1cb4:	bl	0 <memcpy>
    1cb8:	subs	w20, w20, w22
    1cbc:	b.eq	1d14 <updatewindow+0xf4>  // b.none
    1cc0:	ldr	x0, [x23, #72]
    1cc4:	mov	w2, w20
    1cc8:	sub	x1, x19, x2
    1ccc:	bl	0 <memcpy>
    1cd0:	ldr	w8, [x23, #60]
    1cd4:	mov	w21, wzr
    1cd8:	str	w20, [x23, #68]
    1cdc:	b	1cf8 <updatewindow+0xd8>
    1ce0:	ldr	x0, [x23, #72]
    1ce4:	sub	x1, x19, x2
    1ce8:	bl	0 <memcpy>
    1cec:	ldr	w8, [x23, #60]
    1cf0:	mov	w21, wzr
    1cf4:	str	wzr, [x23, #68]
    1cf8:	str	w8, [x23, #64]
    1cfc:	mov	w0, w21
    1d00:	ldp	x20, x19, [sp, #48]
    1d04:	ldp	x22, x21, [sp, #32]
    1d08:	ldr	x23, [sp, #16]
    1d0c:	ldp	x29, x30, [sp], #64
    1d10:	ret
    1d14:	ldp	w8, w9, [x23, #64]
    1d18:	ldr	w10, [x23, #60]
    1d1c:	mov	w21, wzr
    1d20:	add	w9, w9, w22
    1d24:	cmp	w9, w10
    1d28:	csel	w9, wzr, w9, eq  // eq = none
    1d2c:	cmp	w8, w10
    1d30:	str	w9, [x23, #68]
    1d34:	b.cs	1cfc <updatewindow+0xdc>  // b.hs, b.nlast
    1d38:	mov	w21, wzr
    1d3c:	add	w8, w8, w22
    1d40:	b	1cf8 <updatewindow+0xd8>

0000000000001d44 <inflateEnd>:
    1d44:	stp	x29, x30, [sp, #-32]!
    1d48:	str	x19, [sp, #16]
    1d4c:	mov	x29, sp
    1d50:	mov	x19, x0
    1d54:	bl	84 <inflateStateCheck>
    1d58:	cbz	w0, 1d64 <inflateEnd+0x20>
    1d5c:	mov	w0, #0xfffffffe            	// #-2
    1d60:	b	1d8c <inflateEnd+0x48>
    1d64:	ldr	x8, [x19, #56]
    1d68:	ldr	x1, [x8, #72]
    1d6c:	cbz	x1, 1d78 <inflateEnd+0x34>
    1d70:	ldp	x8, x0, [x19, #72]
    1d74:	blr	x8
    1d78:	ldp	x8, x0, [x19, #72]
    1d7c:	ldr	x1, [x19, #56]
    1d80:	blr	x8
    1d84:	mov	w0, wzr
    1d88:	str	xzr, [x19, #56]
    1d8c:	ldr	x19, [sp, #16]
    1d90:	ldp	x29, x30, [sp], #32
    1d94:	ret

0000000000001d98 <inflateGetDictionary>:
    1d98:	stp	x29, x30, [sp, #-48]!
    1d9c:	str	x21, [sp, #16]
    1da0:	stp	x20, x19, [sp, #32]
    1da4:	mov	x29, sp
    1da8:	mov	x19, x2
    1dac:	mov	x20, x1
    1db0:	mov	x21, x0
    1db4:	bl	84 <inflateStateCheck>
    1db8:	cbz	w0, 1dc4 <inflateGetDictionary+0x2c>
    1dbc:	mov	w0, #0xfffffffe            	// #-2
    1dc0:	b	1e10 <inflateGetDictionary+0x78>
    1dc4:	ldr	x21, [x21, #56]
    1dc8:	cbz	x20, 1e00 <inflateGetDictionary+0x68>
    1dcc:	ldr	w8, [x21, #64]
    1dd0:	cbz	w8, 1e00 <inflateGetDictionary+0x68>
    1dd4:	ldr	x9, [x21, #72]
    1dd8:	ldr	w10, [x21, #68]
    1ddc:	mov	x0, x20
    1de0:	add	x1, x9, x10
    1de4:	sub	w2, w8, w10
    1de8:	bl	0 <memcpy>
    1dec:	ldp	w8, w2, [x21, #64]
    1df0:	ldr	x1, [x21, #72]
    1df4:	add	x8, x20, x8
    1df8:	sub	x0, x8, x2
    1dfc:	bl	0 <memcpy>
    1e00:	mov	w0, wzr
    1e04:	cbz	x19, 1e10 <inflateGetDictionary+0x78>
    1e08:	ldr	w8, [x21, #64]
    1e0c:	str	w8, [x19]
    1e10:	ldp	x20, x19, [sp, #32]
    1e14:	ldr	x21, [sp, #16]
    1e18:	ldp	x29, x30, [sp], #48
    1e1c:	ret

0000000000001e20 <inflateSetDictionary>:
    1e20:	stp	x29, x30, [sp, #-48]!
    1e24:	stp	x22, x21, [sp, #16]
    1e28:	stp	x20, x19, [sp, #32]
    1e2c:	mov	x29, sp
    1e30:	mov	w19, w2
    1e34:	mov	x21, x1
    1e38:	mov	x20, x0
    1e3c:	bl	84 <inflateStateCheck>
    1e40:	cbz	w0, 1e58 <inflateSetDictionary+0x38>
    1e44:	mov	w0, #0xfffffffe            	// #-2
    1e48:	ldp	x20, x19, [sp, #32]
    1e4c:	ldp	x22, x21, [sp, #16]
    1e50:	ldp	x29, x30, [sp], #48
    1e54:	ret
    1e58:	ldr	x22, [x20, #56]
    1e5c:	ldr	w8, [x22, #16]
    1e60:	cbz	w8, 1e74 <inflateSetDictionary+0x54>
    1e64:	ldr	w8, [x22, #8]
    1e68:	mov	w9, #0x3f3e                	// #16190
    1e6c:	cmp	w8, w9
    1e70:	b.ne	1e44 <inflateSetDictionary+0x24>  // b.any
    1e74:	ldr	w8, [x22, #8]
    1e78:	mov	w9, #0x3f3e                	// #16190
    1e7c:	cmp	w8, w9
    1e80:	b.ne	1eac <inflateSetDictionary+0x8c>  // b.any
    1e84:	mov	x0, xzr
    1e88:	mov	x1, xzr
    1e8c:	mov	w2, wzr
    1e90:	bl	0 <adler32>
    1e94:	mov	x1, x21
    1e98:	mov	w2, w19
    1e9c:	bl	0 <adler32>
    1ea0:	ldr	x8, [x22, #32]
    1ea4:	cmp	x0, x8
    1ea8:	b.ne	1ed0 <inflateSetDictionary+0xb0>  // b.any
    1eac:	add	x1, x21, w19, uxtw
    1eb0:	mov	x0, x20
    1eb4:	mov	w2, w19
    1eb8:	bl	1c20 <updatewindow>
    1ebc:	cbz	w0, 1ed8 <inflateSetDictionary+0xb8>
    1ec0:	mov	w8, #0x3f52                	// #16210
    1ec4:	str	w8, [x22, #8]
    1ec8:	mov	w0, #0xfffffffc            	// #-4
    1ecc:	b	1e48 <inflateSetDictionary+0x28>
    1ed0:	mov	w0, #0xfffffffd            	// #-3
    1ed4:	b	1e48 <inflateSetDictionary+0x28>
    1ed8:	mov	w8, #0x1                   	// #1
    1edc:	str	w8, [x22, #20]
    1ee0:	b	1e48 <inflateSetDictionary+0x28>

0000000000001ee4 <inflateGetHeader>:
    1ee4:	stp	x29, x30, [sp, #-32]!
    1ee8:	stp	x20, x19, [sp, #16]
    1eec:	mov	x29, sp
    1ef0:	mov	x19, x1
    1ef4:	mov	x20, x0
    1ef8:	bl	84 <inflateStateCheck>
    1efc:	cbnz	w0, 1f0c <inflateGetHeader+0x28>
    1f00:	ldr	x8, [x20, #56]
    1f04:	ldrb	w9, [x8, #16]
    1f08:	tbnz	w9, #1, 1f14 <inflateGetHeader+0x30>
    1f0c:	mov	w0, #0xfffffffe            	// #-2
    1f10:	b	1f20 <inflateGetHeader+0x3c>
    1f14:	mov	w0, wzr
    1f18:	str	x19, [x8, #48]
    1f1c:	str	wzr, [x19, #72]
    1f20:	ldp	x20, x19, [sp, #16]
    1f24:	ldp	x29, x30, [sp], #32
    1f28:	ret

0000000000001f2c <inflateSync>:
    1f2c:	sub	sp, sp, #0x40
    1f30:	stp	x29, x30, [sp, #16]
    1f34:	stp	x22, x21, [sp, #32]
    1f38:	stp	x20, x19, [sp, #48]
    1f3c:	add	x29, sp, #0x10
    1f40:	mov	x19, x0
    1f44:	bl	84 <inflateStateCheck>
    1f48:	cbz	w0, 1f64 <inflateSync+0x38>
    1f4c:	mov	w0, #0xfffffffe            	// #-2
    1f50:	ldp	x20, x19, [sp, #48]
    1f54:	ldp	x22, x21, [sp, #32]
    1f58:	ldp	x29, x30, [sp, #16]
    1f5c:	add	sp, sp, #0x40
    1f60:	ret
    1f64:	ldr	w8, [x19, #8]
    1f68:	ldr	x20, [x19, #56]
    1f6c:	cbnz	w8, 1f84 <inflateSync+0x58>
    1f70:	ldr	w8, [x20, #88]
    1f74:	cmp	w8, #0x8
    1f78:	b.cs	1f84 <inflateSync+0x58>  // b.hs, b.nlast
    1f7c:	mov	w0, #0xfffffffb            	// #-5
    1f80:	b	1f50 <inflateSync+0x24>
    1f84:	ldr	w9, [x20, #8]
    1f88:	mov	w8, #0x3f53                	// #16211
    1f8c:	cmp	w9, w8
    1f90:	b.eq	2000 <inflateSync+0xd4>  // b.none
    1f94:	ldr	w9, [x20, #88]
    1f98:	ldr	x10, [x20, #80]
    1f9c:	str	w8, [x20, #8]
    1fa0:	and	x8, x9, #0x7
    1fa4:	ands	w11, w9, #0xfffffff8
    1fa8:	lsl	x8, x10, x8
    1fac:	str	x8, [x20, #80]
    1fb0:	str	w11, [x20, #88]
    1fb4:	b.eq	1fec <inflateSync+0xc0>  // b.none
    1fb8:	ldr	x8, [x20, #80]
    1fbc:	and	w9, w9, #0xfffffff8
    1fc0:	mov	x2, xzr
    1fc4:	neg	w9, w9
    1fc8:	sub	x10, x29, #0x4
    1fcc:	strb	w8, [x10, x2]
    1fd0:	add	x2, x2, #0x1
    1fd4:	adds	w9, w9, #0x8
    1fd8:	lsr	x8, x8, #8
    1fdc:	b.ne	1fcc <inflateSync+0xa0>  // b.any
    1fe0:	str	x8, [x20, #80]
    1fe4:	str	wzr, [x20, #88]
    1fe8:	b	1ff0 <inflateSync+0xc4>
    1fec:	mov	w2, wzr
    1ff0:	mov	x0, x20
    1ff4:	str	wzr, [x0, #140]!
    1ff8:	sub	x1, x29, #0x4
    1ffc:	bl	2070 <syncsearch>
    2000:	ldr	x1, [x19]
    2004:	ldr	w2, [x19, #8]
    2008:	add	x0, x20, #0x8c
    200c:	bl	2070 <syncsearch>
    2010:	ldr	w8, [x19, #8]
    2014:	ldr	x9, [x19]
    2018:	ldr	x10, [x19, #16]
    201c:	mov	w11, w0
    2020:	sub	w8, w8, w0
    2024:	add	x9, x9, x11
    2028:	add	x21, x10, x11
    202c:	str	w8, [x19, #8]
    2030:	str	x9, [x19]
    2034:	str	x21, [x19, #16]
    2038:	ldr	w8, [x20, #140]
    203c:	cmp	w8, #0x4
    2040:	b.ne	2068 <inflateSync+0x13c>  // b.any
    2044:	ldr	x22, [x19, #40]
    2048:	mov	x0, x19
    204c:	bl	cc <inflateReset>
    2050:	mov	w0, wzr
    2054:	mov	w8, #0x3f3f                	// #16191
    2058:	str	x21, [x19, #16]
    205c:	str	x22, [x19, #40]
    2060:	str	w8, [x20, #8]
    2064:	b	1f50 <inflateSync+0x24>
    2068:	mov	w0, #0xfffffffd            	// #-3
    206c:	b	1f50 <inflateSync+0x24>

0000000000002070 <syncsearch>:
    2070:	ldr	w9, [x0]
    2074:	mov	w8, wzr
    2078:	cmp	w9, #0x3
    207c:	b.hi	20c8 <syncsearch+0x58>  // b.pmore
    2080:	cbz	w2, 20c8 <syncsearch+0x58>
    2084:	mov	x8, xzr
    2088:	mov	w10, w2
    208c:	mov	w11, #0xff                  	// #255
    2090:	mov	w12, #0x4                   	// #4
    2094:	ldrb	w13, [x1, x8]
    2098:	cmp	w9, #0x2
    209c:	sub	w14, w12, w9
    20a0:	csel	w15, wzr, w11, cc  // cc = lo, ul, last
    20a4:	cmp	w13, #0x0
    20a8:	csel	w14, w14, wzr, eq  // eq = none
    20ac:	cmp	w15, w13
    20b0:	csinc	w9, w14, w9, ne  // ne = any
    20b4:	cmp	w9, #0x3
    20b8:	add	x8, x8, #0x1
    20bc:	b.hi	20c8 <syncsearch+0x58>  // b.pmore
    20c0:	cmp	x8, x10
    20c4:	b.cc	2094 <syncsearch+0x24>  // b.lo, b.ul, b.last
    20c8:	str	w9, [x0]
    20cc:	mov	w0, w8
    20d0:	ret

00000000000020d4 <inflateSyncPoint>:
    20d4:	stp	x29, x30, [sp, #-32]!
    20d8:	str	x19, [sp, #16]
    20dc:	mov	x29, sp
    20e0:	mov	x19, x0
    20e4:	bl	84 <inflateStateCheck>
    20e8:	cbz	w0, 20f4 <inflateSyncPoint+0x20>
    20ec:	mov	w0, #0xfffffffe            	// #-2
    20f0:	b	211c <inflateSyncPoint+0x48>
    20f4:	ldr	x8, [x19, #56]
    20f8:	mov	w10, #0x3f41                	// #16193
    20fc:	ldr	w9, [x8, #8]
    2100:	cmp	w9, w10
    2104:	b.ne	2118 <inflateSyncPoint+0x44>  // b.any
    2108:	ldr	w8, [x8, #88]
    210c:	cmp	w8, #0x0
    2110:	cset	w0, eq  // eq = none
    2114:	b	211c <inflateSyncPoint+0x48>
    2118:	mov	w0, wzr
    211c:	ldr	x19, [sp, #16]
    2120:	ldp	x29, x30, [sp], #32
    2124:	ret

0000000000002128 <inflateCopy>:
    2128:	stp	x29, x30, [sp, #-64]!
    212c:	stp	x20, x19, [sp, #48]
    2130:	mov	x19, x0
    2134:	mov	x0, x1
    2138:	str	x23, [sp, #16]
    213c:	stp	x22, x21, [sp, #32]
    2140:	mov	x29, sp
    2144:	mov	x23, x1
    2148:	bl	84 <inflateStateCheck>
    214c:	mov	w8, w0
    2150:	mov	w0, #0xfffffffe            	// #-2
    2154:	cbz	x19, 2268 <inflateCopy+0x140>
    2158:	cbnz	w8, 2268 <inflateCopy+0x140>
    215c:	ldp	x21, x8, [x23, #56]
    2160:	ldr	x0, [x23, #80]
    2164:	mov	w1, #0x1                   	// #1
    2168:	mov	w2, #0x1bf8                	// #7160
    216c:	blr	x8
    2170:	cbz	x0, 21b0 <inflateCopy+0x88>
    2174:	ldr	x8, [x21, #72]
    2178:	mov	x20, x0
    217c:	cbz	x8, 21b8 <inflateCopy+0x90>
    2180:	ldr	w9, [x21, #56]
    2184:	ldr	x8, [x23, #64]
    2188:	ldr	x0, [x23, #80]
    218c:	mov	w10, #0x1                   	// #1
    2190:	lsl	w1, w10, w9
    2194:	mov	w2, #0x1                   	// #1
    2198:	blr	x8
    219c:	mov	x22, x0
    21a0:	cbnz	x0, 21bc <inflateCopy+0x94>
    21a4:	ldp	x8, x0, [x23, #72]
    21a8:	mov	x1, x20
    21ac:	blr	x8
    21b0:	mov	w0, #0xfffffffc            	// #-4
    21b4:	b	2268 <inflateCopy+0x140>
    21b8:	mov	x22, xzr
    21bc:	ldp	q1, q0, [x23, #16]
    21c0:	ldr	q2, [x23]
    21c4:	mov	w2, #0x1bf8                	// #7160
    21c8:	mov	x0, x20
    21cc:	stp	q1, q0, [x19, #16]
    21d0:	str	q2, [x19]
    21d4:	ldp	q1, q0, [x23, #80]
    21d8:	ldp	q3, q2, [x23, #48]
    21dc:	mov	x1, x21
    21e0:	stp	q1, q0, [x19, #80]
    21e4:	stp	q3, q2, [x19, #48]
    21e8:	bl	0 <memcpy>
    21ec:	str	x19, [x20]
    21f0:	ldr	x10, [x21, #104]
    21f4:	add	x8, x21, #0x558
    21f8:	subs	x9, x10, x8
    21fc:	b.cc	222c <inflateCopy+0x104>  // b.lo, b.ul, b.last
    2200:	mov	w11, #0x1be4                	// #7140
    2204:	add	x11, x21, x11
    2208:	cmp	x10, x11
    220c:	b.hi	222c <inflateCopy+0x104>  // b.pmore
    2210:	add	x10, x20, #0x558
    2214:	add	x9, x10, x9
    2218:	str	x9, [x20, #104]
    221c:	ldr	x9, [x21, #112]
    2220:	sub	x9, x9, x8
    2224:	add	x9, x10, x9
    2228:	str	x9, [x20, #112]
    222c:	ldr	x9, [x21, #144]
    2230:	sub	x8, x9, x8
    2234:	add	x8, x20, x8
    2238:	add	x8, x8, #0x558
    223c:	str	x8, [x20, #144]
    2240:	cbz	x22, 225c <inflateCopy+0x134>
    2244:	ldr	w8, [x21, #56]
    2248:	ldr	x1, [x21, #72]
    224c:	mov	w9, #0x1                   	// #1
    2250:	mov	x0, x22
    2254:	lsl	w2, w9, w8
    2258:	bl	0 <memcpy>
    225c:	mov	w0, wzr
    2260:	str	x22, [x20, #72]
    2264:	str	x20, [x19, #56]
    2268:	ldp	x20, x19, [sp, #48]
    226c:	ldp	x22, x21, [sp, #32]
    2270:	ldr	x23, [sp, #16]
    2274:	ldp	x29, x30, [sp], #64
    2278:	ret

000000000000227c <inflateUndermine>:
    227c:	stp	x29, x30, [sp, #-32]!
    2280:	str	x19, [sp, #16]
    2284:	mov	x29, sp
    2288:	mov	x19, x0
    228c:	bl	84 <inflateStateCheck>
    2290:	cbz	w0, 229c <inflateUndermine+0x20>
    2294:	mov	w0, #0xfffffffe            	// #-2
    2298:	b	22ac <inflateUndermine+0x30>
    229c:	ldr	x8, [x19, #56]
    22a0:	mov	w9, #0x1                   	// #1
    22a4:	mov	w0, #0xfffffffd            	// #-3
    22a8:	str	w9, [x8, #7144]
    22ac:	ldr	x19, [sp, #16]
    22b0:	ldp	x29, x30, [sp], #32
    22b4:	ret

00000000000022b8 <inflateValidate>:
    22b8:	stp	x29, x30, [sp, #-32]!
    22bc:	stp	x20, x19, [sp, #16]
    22c0:	mov	x29, sp
    22c4:	mov	w19, w1
    22c8:	mov	x20, x0
    22cc:	bl	84 <inflateStateCheck>
    22d0:	cbz	w0, 22dc <inflateValidate+0x24>
    22d4:	mov	w0, #0xfffffffe            	// #-2
    22d8:	b	22f8 <inflateValidate+0x40>
    22dc:	ldr	x8, [x20, #56]
    22e0:	cmp	w19, #0x0
    22e4:	ldr	w9, [x8, #16]
    22e8:	and	w10, w9, #0xfffffffb
    22ec:	orr	w9, w9, #0x4
    22f0:	csel	w9, w10, w9, eq  // eq = none
    22f4:	str	w9, [x8, #16]
    22f8:	ldp	x20, x19, [sp, #16]
    22fc:	ldp	x29, x30, [sp], #32
    2300:	ret

0000000000002304 <inflateMark>:
    2304:	stp	x29, x30, [sp, #-32]!
    2308:	str	x19, [sp, #16]
    230c:	mov	x29, sp
    2310:	mov	x19, x0
    2314:	bl	84 <inflateStateCheck>
    2318:	cbz	w0, 2324 <inflateMark+0x20>
    231c:	mov	x0, #0xffffffffffff0000    	// #-65536
    2320:	b	236c <inflateMark+0x68>
    2324:	ldr	x9, [x19, #56]
    2328:	mov	w11, #0x3f4c                	// #16204
    232c:	ldr	w10, [x9, #8]
    2330:	ldrsw	x8, [x9, #7148]
    2334:	cmp	w10, w11
    2338:	lsl	x8, x8, #16
    233c:	b.eq	2354 <inflateMark+0x50>  // b.none
    2340:	mov	w11, #0x3f43                	// #16195
    2344:	cmp	w10, w11
    2348:	b.ne	2364 <inflateMark+0x60>  // b.any
    234c:	ldr	w9, [x9, #92]
    2350:	b	2368 <inflateMark+0x64>
    2354:	ldr	w10, [x9, #7152]
    2358:	ldr	w9, [x9, #92]
    235c:	sub	w9, w10, w9
    2360:	b	2368 <inflateMark+0x64>
    2364:	mov	w9, wzr
    2368:	add	x0, x8, w9, uxtw
    236c:	ldr	x19, [sp, #16]
    2370:	ldp	x29, x30, [sp], #32
    2374:	ret

0000000000002378 <inflateCodesUsed>:
    2378:	stp	x29, x30, [sp, #-32]!
    237c:	str	x19, [sp, #16]
    2380:	mov	x29, sp
    2384:	mov	x19, x0
    2388:	bl	84 <inflateStateCheck>
    238c:	cbz	w0, 2398 <inflateCodesUsed+0x20>
    2390:	mov	x0, #0xffffffffffffffff    	// #-1
    2394:	b	23ac <inflateCodesUsed+0x34>
    2398:	ldr	x8, [x19, #56]
    239c:	ldr	x9, [x8, #144]
    23a0:	sub	x8, x9, x8
    23a4:	sub	x8, x8, #0x558
    23a8:	asr	x0, x8, #2
    23ac:	ldr	x19, [sp, #16]
    23b0:	ldp	x29, x30, [sp], #32
    23b4:	ret

inftrees.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflate_table>:
   0:	sub	sp, sp, #0x90
   4:	movi	v0.2d, #0x0
   8:	stp	x28, x27, [sp, #64]
   c:	stp	x26, x25, [sp, #80]
  10:	stp	x24, x23, [sp, #96]
  14:	stp	x22, x21, [sp, #112]
  18:	stp	x20, x19, [sp, #128]
  1c:	stp	q0, q0, [sp, #32]
  20:	cbz	w2, 4c <inflate_table+0x4c>
  24:	mov	w8, w2
  28:	add	x9, sp, #0x20
  2c:	mov	x10, x1
  30:	ldrh	w11, [x10], #2
  34:	subs	x8, x8, #0x1
  38:	lsl	x11, x11, #1
  3c:	ldrh	w12, [x9, x11]
  40:	add	w12, w12, #0x1
  44:	strh	w12, [x9, x11]
  48:	b.ne	30 <inflate_table+0x30>  // b.any
  4c:	ldrh	w9, [sp, #62]
  50:	ldr	w8, [x4]
  54:	cbz	w9, 64 <inflate_table+0x64>
  58:	mov	w9, wzr
  5c:	mov	w10, #0xf                   	// #15
  60:	b	88 <inflate_table+0x88>
  64:	mov	w10, #0xe                   	// #14
  68:	add	x11, sp, #0x20
  6c:	cmp	w10, #0x0
  70:	cset	w9, eq  // eq = none
  74:	cbz	w10, 88 <inflate_table+0x88>
  78:	ldrh	w12, [x11, w10, uxtw #1]
  7c:	sub	w10, w10, #0x1
  80:	cbz	w12, 6c <inflate_table+0x6c>
  84:	add	w10, w10, #0x1
  88:	cmp	w8, w10
  8c:	csel	w8, w10, w8, hi  // hi = pmore
  90:	tbz	w9, #0, c8 <inflate_table+0xc8>
  94:	ldr	x9, [x3]
  98:	mov	w10, #0x140                 	// #320
  9c:	mov	w8, wzr
  a0:	add	x11, x9, #0x4
  a4:	str	x11, [x3]
  a8:	str	w10, [x9]
  ac:	ldr	x9, [x3]
  b0:	mov	w11, #0x1                   	// #1
  b4:	add	x12, x9, #0x4
  b8:	str	x12, [x3]
  bc:	str	w10, [x9]
  c0:	str	w11, [x4]
  c4:	b	230 <inflate_table+0x230>
  c8:	mov	w9, w10
  cc:	mov	w10, #0x1                   	// #1
  d0:	cmp	w9, #0x2
  d4:	b.cc	f4 <inflate_table+0xf4>  // b.lo, b.ul, b.last
  d8:	add	x11, sp, #0x20
  dc:	ldrh	w12, [x11, x10, lsl #1]
  e0:	cbnz	w12, f4 <inflate_table+0xf4>
  e4:	add	x10, x10, #0x1
  e8:	cmp	w9, w10
  ec:	b.ne	dc <inflate_table+0xdc>  // b.any
  f0:	mov	w10, w9
  f4:	cmp	w8, w10
  f8:	mov	w12, #0x1                   	// #1
  fc:	mov	w13, #0x2                   	// #2
 100:	csel	w11, w10, w8, cc  // cc = lo, ul, last
 104:	add	x8, sp, #0x20
 108:	ldrh	w14, [x8, x13]
 10c:	lsl	w12, w12, #1
 110:	subs	w12, w12, w14
 114:	b.mi	1b0 <inflate_table+0x1b0>  // b.first
 118:	add	x13, x13, #0x2
 11c:	cmp	w13, #0x20
 120:	b.ne	108 <inflate_table+0x108>  // b.any
 124:	cmp	w12, #0x1
 128:	b.lt	13c <inflate_table+0x13c>  // b.tstop
 12c:	mov	w8, #0xffffffff            	// #-1
 130:	cbz	w0, 230 <inflate_table+0x230>
 134:	cmp	w9, #0x1
 138:	b.ne	230 <inflate_table+0x230>  // b.any
 13c:	add	x13, sp, #0x20
 140:	mov	x14, sp
 144:	mov	x8, xzr
 148:	mov	w12, wzr
 14c:	orr	x13, x13, #0x2
 150:	add	x14, x14, #0x4
 154:	strh	wzr, [sp, #2]
 158:	ldrh	w15, [x13, x8]
 15c:	add	w12, w15, w12
 160:	strh	w12, [x14, x8]
 164:	add	x8, x8, #0x2
 168:	cmp	x8, #0x1c
 16c:	b.ne	158 <inflate_table+0x158>  // b.any
 170:	cbz	w2, 1b8 <inflate_table+0x1b8>
 174:	mov	x8, xzr
 178:	mov	w12, w2
 17c:	mov	x13, sp
 180:	b	190 <inflate_table+0x190>
 184:	add	x8, x8, #0x1
 188:	cmp	x12, x8
 18c:	b.eq	1b8 <inflate_table+0x1b8>  // b.none
 190:	ldrh	w14, [x1, x8, lsl #1]
 194:	cbz	x14, 184 <inflate_table+0x184>
 198:	lsl	x14, x14, #1
 19c:	ldrh	w15, [x13, x14]
 1a0:	add	w16, w15, #0x1
 1a4:	strh	w16, [x13, x14]
 1a8:	strh	w8, [x5, x15, lsl #1]
 1ac:	b	184 <inflate_table+0x184>
 1b0:	mov	w8, #0xffffffff            	// #-1
 1b4:	b	230 <inflate_table+0x230>
 1b8:	cbz	w0, 1dc <inflate_table+0x1dc>
 1bc:	cmp	w0, #0x1
 1c0:	b.ne	1ec <inflate_table+0x1ec>  // b.any
 1c4:	adrp	x13, 0 <inflate_table>
 1c8:	adrp	x14, 0 <inflate_table>
 1cc:	mov	w12, #0x101                 	// #257
 1d0:	add	x13, x13, #0x0
 1d4:	add	x14, x14, #0x0
 1d8:	b	200 <inflate_table+0x200>
 1dc:	mov	w12, #0x14                  	// #20
 1e0:	mov	x14, x5
 1e4:	mov	x13, x5
 1e8:	b	200 <inflate_table+0x200>
 1ec:	adrp	x13, 0 <inflate_table>
 1f0:	adrp	x14, 0 <inflate_table>
 1f4:	mov	w12, wzr
 1f8:	add	x13, x13, #0x0
 1fc:	add	x14, x14, #0x0
 200:	cmp	w0, #0x1
 204:	mov	w15, #0x1                   	// #1
 208:	b.ne	218 <inflate_table+0x218>  // b.any
 20c:	cmp	w11, #0x9
 210:	mov	w8, #0x1                   	// #1
 214:	b.hi	230 <inflate_table+0x230>  // b.pmore
 218:	cmp	w0, #0x2
 21c:	mov	w16, #0x1                   	// #1
 220:	b.ne	250 <inflate_table+0x250>  // b.any
 224:	cmp	w11, #0x9
 228:	mov	w8, #0x1                   	// #1
 22c:	b.ls	250 <inflate_table+0x250>  // b.plast
 230:	ldp	x20, x19, [sp, #128]
 234:	ldp	x22, x21, [sp, #112]
 238:	ldp	x24, x23, [sp, #96]
 23c:	ldp	x26, x25, [sp, #80]
 240:	ldp	x28, x27, [sp, #64]
 244:	mov	w0, w8
 248:	add	sp, sp, #0x90
 24c:	ret
 250:	ldr	x17, [x3]
 254:	lsl	w15, w15, w11
 258:	mov	w18, wzr
 25c:	mov	w6, wzr
 260:	mov	w2, wzr
 264:	sub	w7, w15, #0x1
 268:	mov	w8, #0xffffffff            	// #-1
 26c:	add	x19, sp, #0x20
 270:	mov	w20, w11
 274:	ldrh	w23, [x5, w18, uxtw #1]
 278:	sub	w22, w10, w6
 27c:	add	w21, w23, #0x1
 280:	cmp	w21, w12
 284:	b.cs	290 <inflate_table+0x290>  // b.hs, b.nlast
 288:	mov	w24, wzr
 28c:	b	2b4 <inflate_table+0x2b4>
 290:	cmp	w12, w23
 294:	b.ls	2a4 <inflate_table+0x2a4>  // b.plast
 298:	mov	w23, wzr
 29c:	mov	w24, #0x60                  	// #96
 2a0:	b	2b4 <inflate_table+0x2b4>
 2a4:	sub	w21, w23, w12
 2a8:	lsl	x21, x21, #1
 2ac:	ldrb	w24, [x13, x21]
 2b0:	ldrh	w23, [x14, x21]
 2b4:	lsl	w25, w16, w22
 2b8:	lsl	w21, w16, w20
 2bc:	lsr	w26, w2, w6
 2c0:	sub	w26, w26, w25
 2c4:	mov	w27, w21
 2c8:	add	w28, w26, w27
 2cc:	subs	w27, w27, w25
 2d0:	add	x28, x17, w28, uxtw #2
 2d4:	strb	w24, [x28]
 2d8:	strb	w22, [x28, #1]
 2dc:	strh	w23, [x28, #2]
 2e0:	b.ne	2c8 <inflate_table+0x2c8>  // b.any
 2e4:	sub	w23, w10, #0x1
 2e8:	lsl	w24, w16, w23
 2ec:	mov	w23, w24
 2f0:	tst	w24, w2
 2f4:	lsr	w24, w24, #1
 2f8:	b.ne	2ec <inflate_table+0x2ec>  // b.any
 2fc:	sub	w24, w23, #0x1
 300:	mov	w25, w10
 304:	and	w2, w24, w2
 308:	lsl	x24, x25, #1
 30c:	ldrh	w25, [x19, x24]
 310:	add	w2, w2, w23
 314:	cmp	w23, #0x0
 318:	csel	w2, wzr, w2, eq  // eq = none
 31c:	sub	w23, w25, #0x1
 320:	add	w18, w18, #0x1
 324:	tst	w23, #0xffff
 328:	strh	w23, [x19, x24]
 32c:	b.eq	33c <inflate_table+0x33c>  // b.none
 330:	cmp	w10, w11
 334:	b.ls	274 <inflate_table+0x274>  // b.plast
 338:	b	354 <inflate_table+0x354>
 33c:	cmp	w10, w9
 340:	b.eq	40c <inflate_table+0x40c>  // b.none
 344:	ldrh	w10, [x5, w18, uxtw #1]
 348:	ldrh	w10, [x1, x10, lsl #1]
 34c:	cmp	w10, w11
 350:	b.ls	274 <inflate_table+0x274>  // b.plast
 354:	and	w22, w2, w7
 358:	cmp	w22, w8
 35c:	b.eq	274 <inflate_table+0x274>  // b.none
 360:	cmp	w6, #0x0
 364:	csel	w6, w11, w6, eq  // eq = none
 368:	cmp	w10, w9
 36c:	sub	w20, w10, w6
 370:	b.cs	3a8 <inflate_table+0x3a8>  // b.hs, b.nlast
 374:	lsl	w23, w16, w20
 378:	sub	w20, w9, w6
 37c:	mov	w8, w10
 380:	ldrh	w24, [x19, x8, lsl #1]
 384:	sub	w23, w23, w24
 388:	cmp	w23, #0x1
 38c:	b.lt	3a4 <inflate_table+0x3a4>  // b.tstop
 390:	add	x8, x8, #0x1
 394:	cmp	w8, w9
 398:	lsl	w23, w23, #1
 39c:	b.cc	380 <inflate_table+0x380>  // b.lo, b.ul, b.last
 3a0:	b	3a8 <inflate_table+0x3a8>
 3a4:	sub	w20, w8, w6
 3a8:	mov	w8, #0x1                   	// #1
 3ac:	cmp	w0, #0x2
 3b0:	lsl	w24, w8, w20
 3b4:	cset	w23, eq  // eq = none
 3b8:	cmp	w0, #0x1
 3bc:	add	w15, w24, w15
 3c0:	cset	w25, eq  // eq = none
 3c4:	cmp	w15, #0x354
 3c8:	cset	w24, hi  // hi = pmore
 3cc:	cmp	w15, #0x250
 3d0:	and	w25, w25, w24
 3d4:	cset	w24, hi  // hi = pmore
 3d8:	tbnz	w25, #0, 230 <inflate_table+0x230>
 3dc:	and	w23, w23, w24
 3e0:	tbnz	w23, #0, 230 <inflate_table+0x230>
 3e4:	ldr	x8, [x3]
 3e8:	add	x17, x17, w21, uxtw #2
 3ec:	add	x21, x8, w22, uxtw #2
 3f0:	sub	w8, w17, w8
 3f4:	lsr	w8, w8, #2
 3f8:	strb	w20, [x21]
 3fc:	strb	w11, [x21, #1]
 400:	strh	w8, [x21, #2]
 404:	mov	w8, w22
 408:	b	274 <inflate_table+0x274>
 40c:	cbz	w2, 424 <inflate_table+0x424>
 410:	add	x8, x17, w2, uxtw #2
 414:	mov	w9, #0x40                  	// #64
 418:	strb	w9, [x8]
 41c:	strb	w22, [x8, #1]
 420:	strh	wzr, [x8, #2]
 424:	ldr	x9, [x3]
 428:	mov	w8, wzr
 42c:	add	x9, x9, w15, uxtw #2
 430:	str	x9, [x3]
 434:	b	c0 <inflate_table+0xc0>

trees.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_tr_init>:
       0:	stp	x29, x30, [sp, #-16]!
       4:	adrp	x9, 0 <_tr_init>
       8:	adrp	x11, 0 <_tr_init>
       c:	adrp	x13, 0 <_tr_init>
      10:	add	x8, x0, #0xd4
      14:	add	x9, x9, #0x0
      18:	add	x10, x0, #0x9c8
      1c:	add	x11, x11, #0x0
      20:	add	x12, x0, #0xabc
      24:	add	x13, x13, #0x0
      28:	mov	x29, sp
      2c:	strh	wzr, [x0, #5936]
      30:	str	x8, [x0, #2904]
      34:	str	x9, [x0, #2920]
      38:	str	x10, [x0, #2928]
      3c:	str	x11, [x0, #2944]
      40:	str	x12, [x0, #2952]
      44:	str	x13, [x0, #2968]
      48:	str	wzr, [x0, #5940]
      4c:	bl	58 <init_block>
      50:	ldp	x29, x30, [sp], #16
      54:	ret

0000000000000058 <init_block>:
      58:	mov	w8, #0xd4                  	// #212
      5c:	strh	wzr, [x0, x8]
      60:	add	x8, x8, #0x4
      64:	cmp	x8, #0x54c
      68:	b.ne	5c <init_block+0x4>  // b.any
      6c:	mov	x8, xzr
      70:	add	x9, x0, #0x9c8
      74:	strh	wzr, [x9, x8]
      78:	add	x8, x8, #0x4
      7c:	cmp	x8, #0x78
      80:	b.ne	74 <init_block+0x1c>  // b.any
      84:	mov	x8, xzr
      88:	add	x9, x0, #0xabc
      8c:	strh	wzr, [x9, x8]
      90:	add	x8, x8, #0x4
      94:	cmp	x8, #0x4c
      98:	b.ne	8c <init_block+0x34>  // b.any
      9c:	mov	w8, #0x1                   	// #1
      a0:	movi	v0.2d, #0x0
      a4:	mov	w9, #0x1718                	// #5912
      a8:	str	wzr, [x0, #5900]
      ac:	strh	w8, [x0, #1236]
      b0:	str	q0, [x0, x9]
      b4:	str	wzr, [x0, #5928]
      b8:	ret

00000000000000bc <_tr_stored_block>:
      bc:	stp	x29, x30, [sp, #-48]!
      c0:	stp	x20, x19, [sp, #32]
      c4:	ldr	w10, [x0, #5940]
      c8:	ldrh	w9, [x0, #5936]
      cc:	and	w8, w3, #0xffff
      d0:	str	x21, [sp, #16]
      d4:	lsl	w11, w8, w10
      d8:	mov	x19, x2
      dc:	mov	x21, x1
      e0:	mov	x20, x0
      e4:	orr	w9, w9, w11
      e8:	cmp	w10, #0xe
      ec:	mov	x29, sp
      f0:	strh	w9, [x0, #5936]
      f4:	b.lt	148 <_tr_stored_block+0x8c>  // b.tstop
      f8:	ldr	x10, [x20, #40]
      fc:	ldr	x11, [x20, #16]
     100:	add	x12, x10, #0x1
     104:	str	x12, [x20, #40]
     108:	mov	w12, #0x1730                	// #5936
     10c:	strb	w9, [x11, x10]
     110:	add	x12, x20, x12
     114:	ldr	x9, [x20, #40]
     118:	ldrb	w10, [x12, #1]
     11c:	ldr	x11, [x20, #16]
     120:	add	x12, x9, #0x1
     124:	str	x12, [x20, #40]
     128:	strb	w10, [x11, x9]
     12c:	ldr	w9, [x20, #5940]
     130:	mov	w10, #0x10                  	// #16
     134:	sub	w10, w10, w9
     138:	lsr	w8, w8, w10
     13c:	strh	w8, [x20, #5936]
     140:	sub	w8, w9, #0xd
     144:	b	14c <_tr_stored_block+0x90>
     148:	add	w8, w10, #0x3
     14c:	mov	x0, x20
     150:	str	w8, [x20, #5940]
     154:	bl	1e8 <bi_windup>
     158:	ldr	x8, [x20, #40]
     15c:	ldr	x9, [x20, #16]
     160:	mov	x1, x21
     164:	mov	x2, x19
     168:	add	x10, x8, #0x1
     16c:	str	x10, [x20, #40]
     170:	strb	w19, [x9, x8]
     174:	ldr	x8, [x20, #40]
     178:	ldr	x9, [x20, #16]
     17c:	ubfx	x10, x19, #8, #24
     180:	add	x11, x8, #0x1
     184:	str	x11, [x20, #40]
     188:	strb	w10, [x9, x8]
     18c:	ldr	x8, [x20, #40]
     190:	ldr	x9, [x20, #16]
     194:	mvn	w10, w19
     198:	add	x11, x8, #0x1
     19c:	str	x11, [x20, #40]
     1a0:	strb	w10, [x9, x8]
     1a4:	ldr	x8, [x20, #40]
     1a8:	ldr	x9, [x20, #16]
     1ac:	lsr	w10, w10, #8
     1b0:	add	x11, x8, #0x1
     1b4:	str	x11, [x20, #40]
     1b8:	strb	w10, [x9, x8]
     1bc:	ldr	x8, [x20, #16]
     1c0:	ldr	x9, [x20, #40]
     1c4:	add	x0, x8, x9
     1c8:	bl	0 <memcpy>
     1cc:	ldr	x8, [x20, #40]
     1d0:	ldr	x21, [sp, #16]
     1d4:	add	x8, x8, x19
     1d8:	str	x8, [x20, #40]
     1dc:	ldp	x20, x19, [sp, #32]
     1e0:	ldp	x29, x30, [sp], #48
     1e4:	ret

00000000000001e8 <bi_windup>:
     1e8:	ldr	w8, [x0, #5940]
     1ec:	cmp	w8, #0x9
     1f0:	b.lt	224 <bi_windup+0x3c>  // b.tstop
     1f4:	mov	w8, #0x1730                	// #5936
     1f8:	ldr	x10, [x0, #40]
     1fc:	add	x8, x0, x8
     200:	ldr	x9, [x0, #16]
     204:	ldrb	w11, [x8]
     208:	add	x12, x10, #0x1
     20c:	str	x12, [x0, #40]
     210:	strb	w11, [x9, x10]
     214:	ldr	x9, [x0, #40]
     218:	ldr	x10, [x0, #16]
     21c:	ldrb	w8, [x8, #1]
     220:	b	23c <bi_windup+0x54>
     224:	cmp	w8, #0x1
     228:	b.lt	24c <bi_windup+0x64>  // b.tstop
     22c:	mov	w8, #0x1730                	// #5936
     230:	ldr	x9, [x0, #40]
     234:	ldr	x10, [x0, #16]
     238:	ldrb	w8, [x0, x8]
     23c:	add	x11, x9, #0x1
     240:	add	x9, x10, x9
     244:	str	x11, [x0, #40]
     248:	strb	w8, [x9]
     24c:	strh	wzr, [x0, #5936]
     250:	str	wzr, [x0, #5940]
     254:	ret

0000000000000258 <_tr_flush_bits>:
     258:	stp	x29, x30, [sp, #-16]!
     25c:	mov	x29, sp
     260:	bl	26c <bi_flush>
     264:	ldp	x29, x30, [sp], #16
     268:	ret

000000000000026c <bi_flush>:
     26c:	ldr	w8, [x0, #5940]
     270:	cmp	w8, #0x10
     274:	b.ne	2bc <bi_flush+0x50>  // b.any
     278:	mov	w9, #0x1730                	// #5936
     27c:	ldr	x11, [x0, #40]
     280:	add	x9, x0, x9
     284:	ldr	x10, [x0, #16]
     288:	ldrb	w12, [x9]
     28c:	add	x13, x11, #0x1
     290:	str	x13, [x0, #40]
     294:	mov	w8, wzr
     298:	strb	w12, [x10, x11]
     29c:	ldr	x10, [x0, #40]
     2a0:	ldrb	w9, [x9, #1]
     2a4:	ldr	x11, [x0, #16]
     2a8:	add	x12, x10, #0x1
     2ac:	str	x12, [x0, #40]
     2b0:	strb	w9, [x11, x10]
     2b4:	strh	wzr, [x0, #5936]
     2b8:	b	2f4 <bi_flush+0x88>
     2bc:	cmp	w8, #0x8
     2c0:	b.lt	2f8 <bi_flush+0x8c>  // b.tstop
     2c4:	mov	w8, #0x1730                	// #5936
     2c8:	ldr	x10, [x0, #40]
     2cc:	add	x8, x0, x8
     2d0:	ldr	x9, [x0, #16]
     2d4:	ldrb	w11, [x8]
     2d8:	add	x12, x10, #0x1
     2dc:	str	x12, [x0, #40]
     2e0:	strb	w11, [x9, x10]
     2e4:	ldrb	w8, [x8, #1]
     2e8:	ldr	w9, [x0, #5940]
     2ec:	strh	w8, [x0, #5936]
     2f0:	sub	w8, w9, #0x8
     2f4:	str	w8, [x0, #5940]
     2f8:	ret

00000000000002fc <_tr_align>:
     2fc:	stp	x29, x30, [sp, #-16]!
     300:	ldr	w10, [x0, #5940]
     304:	ldrh	w9, [x0, #5936]
     308:	mov	w8, #0x2                   	// #2
     30c:	mov	x29, sp
     310:	lsl	w11, w8, w10
     314:	orr	w9, w9, w11
     318:	cmp	w10, #0xe
     31c:	strh	w9, [x0, #5936]
     320:	b.lt	374 <_tr_align+0x78>  // b.tstop
     324:	ldr	x10, [x0, #40]
     328:	ldr	x11, [x0, #16]
     32c:	add	x12, x10, #0x1
     330:	str	x12, [x0, #40]
     334:	mov	w12, #0x1730                	// #5936
     338:	strb	w9, [x11, x10]
     33c:	add	x12, x0, x12
     340:	ldr	x9, [x0, #40]
     344:	ldrb	w10, [x12, #1]
     348:	ldr	x11, [x0, #16]
     34c:	add	x12, x9, #0x1
     350:	str	x12, [x0, #40]
     354:	strb	w10, [x11, x9]
     358:	ldr	w9, [x0, #5940]
     35c:	mov	w10, #0x10                  	// #16
     360:	sub	w10, w10, w9
     364:	lsr	w8, w8, w10
     368:	strh	w8, [x0, #5936]
     36c:	sub	w8, w9, #0xd
     370:	b	378 <_tr_align+0x7c>
     374:	add	w8, w10, #0x3
     378:	cmp	w8, #0xa
     37c:	str	w8, [x0, #5940]
     380:	b.lt	3cc <_tr_align+0xd0>  // b.tstop
     384:	mov	w8, #0x1730                	// #5936
     388:	ldr	x10, [x0, #40]
     38c:	add	x8, x0, x8
     390:	ldr	x9, [x0, #16]
     394:	ldrb	w11, [x8]
     398:	add	x12, x10, #0x1
     39c:	str	x12, [x0, #40]
     3a0:	strb	w11, [x9, x10]
     3a4:	ldr	x9, [x0, #40]
     3a8:	ldrb	w8, [x8, #1]
     3ac:	ldr	x10, [x0, #16]
     3b0:	add	x11, x9, #0x1
     3b4:	str	x11, [x0, #40]
     3b8:	strb	w8, [x10, x9]
     3bc:	ldr	w8, [x0, #5940]
     3c0:	strh	wzr, [x0, #5936]
     3c4:	sub	w8, w8, #0x9
     3c8:	b	3d0 <_tr_align+0xd4>
     3cc:	add	w8, w8, #0x7
     3d0:	str	w8, [x0, #5940]
     3d4:	bl	26c <bi_flush>
     3d8:	ldp	x29, x30, [sp], #16
     3dc:	ret

00000000000003e0 <_tr_flush_block>:
     3e0:	stp	x29, x30, [sp, #-64]!
     3e4:	stp	x22, x21, [sp, #32]
     3e8:	stp	x20, x19, [sp, #48]
     3ec:	ldr	w8, [x0, #196]
     3f0:	mov	w20, w3
     3f4:	mov	x21, x2
     3f8:	mov	x19, x0
     3fc:	cmp	w8, #0x1
     400:	mov	x22, x1
     404:	str	x23, [sp, #16]
     408:	mov	x29, sp
     40c:	b.lt	478 <_tr_flush_block+0x98>  // b.tstop
     410:	ldr	x23, [x19]
     414:	ldr	w8, [x23, #88]
     418:	cmp	w8, #0x2
     41c:	b.ne	42c <_tr_flush_block+0x4c>  // b.any
     420:	mov	x0, x19
     424:	bl	618 <detect_data_type>
     428:	str	w0, [x23, #88]
     42c:	add	x1, x19, #0xb58
     430:	mov	x0, x19
     434:	bl	694 <build_tree>
     438:	add	x1, x19, #0xb70
     43c:	mov	x0, x19
     440:	bl	694 <build_tree>
     444:	mov	x0, x19
     448:	bl	904 <build_bl_tree>
     44c:	ldr	x8, [x19, #5912]
     450:	ldr	x9, [x19, #5920]
     454:	add	w3, w0, #0x1
     458:	add	x8, x8, #0xa
     45c:	add	x9, x9, #0xa
     460:	lsr	x8, x8, #3
     464:	lsr	x9, x9, #3
     468:	cmp	x9, x8
     46c:	csel	x10, x8, x9, hi  // hi = pmore
     470:	cbnz	x22, 488 <_tr_flush_block+0xa8>
     474:	b	4ac <_tr_flush_block+0xcc>
     478:	add	x9, x21, #0x5
     47c:	mov	w3, #0x1                   	// #1
     480:	mov	x10, x9
     484:	cbz	x22, 4ac <_tr_flush_block+0xcc>
     488:	add	x8, x21, #0x4
     48c:	cmp	x8, x10
     490:	b.hi	4ac <_tr_flush_block+0xcc>  // b.pmore
     494:	mov	x0, x19
     498:	mov	x1, x22
     49c:	mov	x2, x21
     4a0:	mov	w3, w20
     4a4:	bl	bc <_tr_stored_block>
     4a8:	b	5f0 <_tr_flush_block+0x210>
     4ac:	ldr	w8, [x19, #5940]
     4b0:	cmp	x9, x10
     4b4:	b.eq	534 <_tr_flush_block+0x154>  // b.none
     4b8:	ldr	w9, [x19, #200]
     4bc:	cmp	w9, #0x4
     4c0:	b.eq	534 <_tr_flush_block+0x154>  // b.none
     4c4:	ldrh	w10, [x19, #5936]
     4c8:	add	w9, w20, #0x4
     4cc:	and	w9, w9, #0xffff
     4d0:	lsl	w11, w9, w8
     4d4:	orr	w10, w10, w11
     4d8:	cmp	w8, #0xe
     4dc:	strh	w10, [x19, #5936]
     4e0:	b.lt	5a4 <_tr_flush_block+0x1c4>  // b.tstop
     4e4:	ldr	x8, [x19, #40]
     4e8:	ldr	x11, [x19, #16]
     4ec:	add	x12, x8, #0x1
     4f0:	str	x12, [x19, #40]
     4f4:	mov	w12, #0x1730                	// #5936
     4f8:	strb	w10, [x11, x8]
     4fc:	add	x12, x19, x12
     500:	ldr	x8, [x19, #40]
     504:	ldrb	w10, [x12, #1]
     508:	ldr	x11, [x19, #16]
     50c:	add	x12, x8, #0x1
     510:	str	x12, [x19, #40]
     514:	strb	w10, [x11, x8]
     518:	ldr	w8, [x19, #5940]
     51c:	mov	w10, #0x10                  	// #16
     520:	sub	w10, w10, w8
     524:	lsr	w9, w9, w10
     528:	strh	w9, [x19, #5936]
     52c:	sub	w8, w8, #0xd
     530:	b	5a8 <_tr_flush_block+0x1c8>
     534:	ldrh	w10, [x19, #5936]
     538:	add	w9, w20, #0x2
     53c:	and	w9, w9, #0xffff
     540:	lsl	w11, w9, w8
     544:	orr	w10, w10, w11
     548:	cmp	w8, #0xe
     54c:	strh	w10, [x19, #5936]
     550:	b.lt	5d0 <_tr_flush_block+0x1f0>  // b.tstop
     554:	ldr	x8, [x19, #40]
     558:	ldr	x11, [x19, #16]
     55c:	add	x12, x8, #0x1
     560:	str	x12, [x19, #40]
     564:	mov	w12, #0x1730                	// #5936
     568:	strb	w10, [x11, x8]
     56c:	add	x12, x19, x12
     570:	ldr	x8, [x19, #40]
     574:	ldrb	w10, [x12, #1]
     578:	ldr	x11, [x19, #16]
     57c:	add	x12, x8, #0x1
     580:	str	x12, [x19, #40]
     584:	strb	w10, [x11, x8]
     588:	ldr	w8, [x19, #5940]
     58c:	mov	w10, #0x10                  	// #16
     590:	sub	w10, w10, w8
     594:	lsr	w9, w9, w10
     598:	strh	w9, [x19, #5936]
     59c:	sub	w8, w8, #0xd
     5a0:	b	5d4 <_tr_flush_block+0x1f4>
     5a4:	add	w8, w8, #0x3
     5a8:	ldr	w9, [x19, #2912]
     5ac:	ldr	w10, [x19, #2936]
     5b0:	mov	x0, x19
     5b4:	str	w8, [x19, #5940]
     5b8:	add	w1, w9, #0x1
     5bc:	add	w2, w10, #0x1
     5c0:	bl	d4c <send_all_trees>
     5c4:	add	x1, x19, #0xd4
     5c8:	add	x2, x19, #0x9c8
     5cc:	b	5e8 <_tr_flush_block+0x208>
     5d0:	add	w8, w8, #0x3
     5d4:	adrp	x1, 0 <_tr_init>
     5d8:	adrp	x2, 0 <_tr_init>
     5dc:	str	w8, [x19, #5940]
     5e0:	add	x1, x1, #0x0
     5e4:	add	x2, x2, #0x0
     5e8:	mov	x0, x19
     5ec:	bl	98c <compress_block>
     5f0:	mov	x0, x19
     5f4:	bl	58 <init_block>
     5f8:	cbz	w20, 604 <_tr_flush_block+0x224>
     5fc:	mov	x0, x19
     600:	bl	1e8 <bi_windup>
     604:	ldp	x20, x19, [sp, #48]
     608:	ldp	x22, x21, [sp, #32]
     60c:	ldr	x23, [sp, #16]
     610:	ldp	x29, x30, [sp], #64
     614:	ret

0000000000000618 <detect_data_type>:
     618:	mov	w10, #0xc07f                	// #49279
     61c:	mov	x8, xzr
     620:	add	x9, x0, #0xd4
     624:	movk	w10, #0xf3ff, lsl #16
     628:	b	63c <detect_data_type+0x24>
     62c:	add	x8, x8, #0x4
     630:	cmp	x8, #0x80
     634:	lsr	x10, x10, #1
     638:	b.eq	650 <detect_data_type+0x38>  // b.none
     63c:	tbz	w10, #0, 62c <detect_data_type+0x14>
     640:	ldrh	w11, [x9, x8]
     644:	cbz	w11, 62c <detect_data_type+0x14>
     648:	mov	w0, wzr
     64c:	ret
     650:	ldrh	w8, [x0, #248]
     654:	cbnz	w8, 668 <detect_data_type+0x50>
     658:	ldrh	w8, [x0, #252]
     65c:	cbnz	w8, 668 <detect_data_type+0x50>
     660:	ldrh	w8, [x0, #264]
     664:	cbz	w8, 670 <detect_data_type+0x58>
     668:	mov	w0, #0x1                   	// #1
     66c:	ret
     670:	mov	x8, xzr
     674:	add	x9, x0, #0x154
     678:	ldrh	w10, [x9, x8]
     67c:	cbnz	w10, 668 <detect_data_type+0x50>
     680:	add	x8, x8, #0x4
     684:	cmp	x8, #0x380
     688:	mov	w0, wzr
     68c:	b.ne	678 <detect_data_type+0x60>  // b.any
     690:	b	66c <detect_data_type+0x54>

0000000000000694 <build_tree>:
     694:	stp	x29, x30, [sp, #-96]!
     698:	stp	x28, x27, [sp, #16]
     69c:	stp	x26, x25, [sp, #32]
     6a0:	stp	x24, x23, [sp, #48]
     6a4:	stp	x22, x21, [sp, #64]
     6a8:	stp	x20, x19, [sp, #80]
     6ac:	ldr	x8, [x1, #16]
     6b0:	ldr	x20, [x1]
     6b4:	mov	x21, x1
     6b8:	mov	x19, x0
     6bc:	ldr	w24, [x8, #20]
     6c0:	ldr	x8, [x8]
     6c4:	mov	w9, #0x14b4                	// #5300
     6c8:	mov	x10, #0x23d00000000         	// #2461016260608
     6cc:	cmp	w24, #0x1
     6d0:	mov	x29, sp
     6d4:	str	x10, [x0, x9]
     6d8:	b.lt	730 <build_tree+0x9c>  // b.tstop
     6dc:	mov	w9, #0x14bc                	// #5308
     6e0:	mov	x10, xzr
     6e4:	add	x11, x20, #0x2
     6e8:	add	x12, x19, x9
     6ec:	mov	w9, #0xffffffff            	// #-1
     6f0:	b	708 <build_tree+0x74>
     6f4:	strh	wzr, [x11]
     6f8:	add	x10, x10, #0x1
     6fc:	cmp	x24, x10
     700:	add	x11, x11, #0x4
     704:	b.eq	734 <build_tree+0xa0>  // b.none
     708:	ldurh	w13, [x11, #-2]
     70c:	cbz	w13, 6f4 <build_tree+0x60>
     710:	ldrsw	x9, [x19, #5300]
     714:	add	x9, x9, #0x1
     718:	str	w9, [x19, #5300]
     71c:	add	x9, x19, x9, lsl #2
     720:	str	w10, [x9, #3008]
     724:	strb	wzr, [x12, x10]
     728:	mov	w9, w10
     72c:	b	6f8 <build_tree+0x64>
     730:	mov	w9, #0xffffffff            	// #-1
     734:	ldr	w12, [x19, #5300]
     738:	cmp	w12, #0x1
     73c:	b.gt	7b8 <build_tree+0x124>
     740:	mov	w10, #0x1                   	// #1
     744:	mov	w11, #0x14bc                	// #5308
     748:	b	75c <build_tree+0xc8>
     74c:	ldr	w12, [x19, #5300]
     750:	mov	w9, w22
     754:	cmp	w12, #0x2
     758:	b.ge	7bc <build_tree+0x128>  // b.tcont
     75c:	sxtw	x12, w12
     760:	cmp	w9, #0x2
     764:	add	x12, x12, #0x1
     768:	csinc	w13, wzr, w9, ge  // ge = tcont
     76c:	str	w12, [x19, #5300]
     770:	add	x12, x19, x12, lsl #2
     774:	str	w13, [x12, #3008]
     778:	sxtw	x12, w13
     77c:	sbfiz	x13, x13, #2, #32
     780:	strh	w10, [x20, x13]
     784:	add	x13, x19, x12
     788:	strb	wzr, [x13, x11]
     78c:	ldr	x13, [x19, #5912]
     790:	cinc	w22, w9, lt  // lt = tstop
     794:	sub	x9, x13, #0x1
     798:	str	x9, [x19, #5912]
     79c:	cbz	x8, 74c <build_tree+0xb8>
     7a0:	add	x9, x8, x12, lsl #2
     7a4:	ldrh	w9, [x9, #2]
     7a8:	ldr	x12, [x19, #5920]
     7ac:	sub	x9, x12, x9
     7b0:	str	x9, [x19, #5920]
     7b4:	b	74c <build_tree+0xb8>
     7b8:	mov	w22, w9
     7bc:	cmp	w12, #0x2
     7c0:	str	w22, [x21, #8]
     7c4:	b.lt	7ec <build_tree+0x158>  // b.tstop
     7c8:	cmp	w12, #0x0
     7cc:	cinc	w8, w12, lt  // lt = tstop
     7d0:	asr	w23, w8, #1
     7d4:	mov	x0, x19
     7d8:	mov	x1, x20
     7dc:	mov	w2, w23
     7e0:	bl	104c <pqdownheap>
     7e4:	subs	w23, w23, #0x1
     7e8:	b.gt	7d4 <build_tree+0x140>
     7ec:	sxtw	x26, w24
     7f0:	mov	w23, #0x14bc                	// #5308
     7f4:	lsl	x24, x26, #2
     7f8:	add	x25, x19, x23
     7fc:	ldrsw	x8, [x19, #5300]
     800:	add	x27, x19, #0xbc0
     804:	ldrsw	x28, [x19, #3012]
     808:	mov	w2, #0x1                   	// #1
     80c:	sub	w9, w8, #0x1
     810:	str	w9, [x19, #5300]
     814:	ldr	w8, [x27, x8, lsl #2]
     818:	mov	x0, x19
     81c:	mov	x1, x20
     820:	str	w8, [x19, #3012]
     824:	bl	104c <pqdownheap>
     828:	ldrsw	x8, [x19, #5304]
     82c:	ldrsw	x9, [x19, #3012]
     830:	add	x10, x20, x28, lsl #2
     834:	mov	w2, #0x1                   	// #1
     838:	sub	x8, x8, #0x1
     83c:	str	w8, [x19, #5304]
     840:	str	w28, [x27, x8, lsl #2]
     844:	ldrsw	x8, [x19, #5304]
     848:	add	x11, x20, x9, lsl #2
     84c:	mov	x0, x19
     850:	mov	x1, x20
     854:	sub	x8, x8, #0x1
     858:	str	w8, [x19, #5304]
     85c:	str	w9, [x27, x8, lsl #2]
     860:	ldrh	w8, [x10]
     864:	ldrh	w12, [x11]
     868:	add	x27, x26, #0x1
     86c:	add	w8, w12, w8
     870:	add	x12, x19, x23
     874:	strh	w8, [x20, x24]
     878:	ldrb	w8, [x12, x28]
     87c:	ldrb	w9, [x12, x9]
     880:	cmp	w8, w9
     884:	csel	w8, w9, w8, cc  // cc = lo, ul, last
     888:	add	w8, w8, #0x1
     88c:	strb	w8, [x25, x26]
     890:	strh	w26, [x11, #2]
     894:	strh	w26, [x10, #2]
     898:	str	w26, [x19, #3012]
     89c:	bl	104c <pqdownheap>
     8a0:	ldr	w8, [x19, #5300]
     8a4:	add	x24, x24, #0x4
     8a8:	mov	x26, x27
     8ac:	cmp	w8, #0x1
     8b0:	b.gt	7fc <build_tree+0x168>
     8b4:	ldrsw	x8, [x19, #5304]
     8b8:	ldr	w9, [x19, #3012]
     8bc:	mov	x0, x19
     8c0:	mov	x1, x21
     8c4:	sub	x8, x8, #0x1
     8c8:	add	x10, x19, x8, lsl #2
     8cc:	str	w8, [x19, #5304]
     8d0:	str	w9, [x10, #3008]
     8d4:	bl	1144 <gen_bitlen>
     8d8:	add	x2, x19, #0xba0
     8dc:	mov	x0, x20
     8e0:	mov	w1, w22
     8e4:	bl	130c <gen_codes>
     8e8:	ldp	x20, x19, [sp, #80]
     8ec:	ldp	x22, x21, [sp, #64]
     8f0:	ldp	x24, x23, [sp, #48]
     8f4:	ldp	x26, x25, [sp, #32]
     8f8:	ldp	x28, x27, [sp, #16]
     8fc:	ldp	x29, x30, [sp], #96
     900:	ret

0000000000000904 <build_bl_tree>:
     904:	stp	x29, x30, [sp, #-32]!
     908:	ldr	w2, [x0, #2912]
     90c:	add	x1, x0, #0xd4
     910:	str	x19, [sp, #16]
     914:	mov	x29, sp
     918:	mov	x19, x0
     91c:	bl	13d0 <scan_tree>
     920:	ldr	w2, [x19, #2936]
     924:	add	x1, x19, #0x9c8
     928:	mov	x0, x19
     92c:	bl	13d0 <scan_tree>
     930:	add	x1, x19, #0xb88
     934:	mov	x0, x19
     938:	bl	694 <build_tree>
     93c:	adrp	x8, 0 <_tr_init>
     940:	mov	w0, #0x12                  	// #18
     944:	add	x8, x8, #0x0
     948:	ldrb	w9, [x8, x0]
     94c:	add	x9, x19, x9, lsl #2
     950:	ldrh	w9, [x9, #2750]
     954:	cbnz	w9, 968 <build_bl_tree+0x64>
     958:	cmp	x0, #0x3
     95c:	sub	x0, x0, #0x1
     960:	b.hi	948 <build_bl_tree+0x44>  // b.pmore
     964:	mov	w0, #0x2                   	// #2
     968:	ldr	x8, [x19, #5912]
     96c:	sxtw	x9, w0
     970:	add	x9, x9, w0, sxtw #1
     974:	add	x8, x9, x8
     978:	add	x8, x8, #0x11
     97c:	str	x8, [x19, #5912]
     980:	ldr	x19, [sp, #16]
     984:	ldp	x29, x30, [sp], #32
     988:	ret

000000000000098c <compress_block>:
     98c:	str	x21, [sp, #-32]!
     990:	stp	x20, x19, [sp, #16]
     994:	ldr	w8, [x0, #5900]
     998:	cbz	w8, cbc <compress_block+0x330>
     99c:	mov	w10, #0x1730                	// #5936
     9a0:	adrp	x11, 200 <bi_windup+0x18>
     9a4:	adrp	x12, 0 <_tr_init>
     9a8:	adrp	x13, 0 <_tr_init>
     9ac:	adrp	x14, 0 <_tr_init>
     9b0:	adrp	x15, 0 <_tr_init>
     9b4:	adrp	x17, 0 <_tr_init>
     9b8:	mov	x8, xzr
     9bc:	mov	w9, #0x10                  	// #16
     9c0:	add	x11, x11, #0x0
     9c4:	add	x12, x12, #0x0
     9c8:	add	x13, x13, #0x0
     9cc:	add	x14, x14, #0x0
     9d0:	add	x15, x15, #0x0
     9d4:	add	x16, x0, x10
     9d8:	add	x17, x17, #0x0
     9dc:	b	9f4 <compress_block+0x68>
     9e0:	add	w18, w4, w18
     9e4:	str	w18, [x0, #5940]
     9e8:	ldr	w18, [x0, #5900]
     9ec:	cmp	x8, x18
     9f0:	b.cs	cbc <compress_block+0x330>  // b.hs, b.nlast
     9f4:	ldr	x18, [x0, #5904]
     9f8:	ldr	x3, [x0, #5888]
     9fc:	ldrh	w18, [x18, x8, lsl #1]
     a00:	ldrb	w3, [x3, x8]
     a04:	add	x8, x8, #0x1
     a08:	cbz	w18, a90 <compress_block+0x104>
     a0c:	ldrb	w4, [x11, x3]
     a10:	mov	w5, #0x400                 	// #1024
     a14:	ldr	w19, [x0, #5940]
     a18:	ldrh	w7, [x0, #5936]
     a1c:	bfi	x5, x4, #2, #8
     a20:	add	x6, x5, x1
     a24:	ldrh	w5, [x6, #6]
     a28:	ldrh	w6, [x6, #4]
     a2c:	sub	w20, w9, w5
     a30:	lsl	w21, w6, w19
     a34:	orr	w7, w7, w21
     a38:	cmp	w19, w20
     a3c:	strh	w7, [x0, #5936]
     a40:	b.le	b04 <compress_block+0x178>
     a44:	ldr	x19, [x0, #40]
     a48:	ldr	x20, [x0, #16]
     a4c:	add	x21, x19, #0x1
     a50:	str	x21, [x0, #40]
     a54:	strb	w7, [x20, x19]
     a58:	add	x21, x0, x10
     a5c:	ldr	x7, [x0, #40]
     a60:	ldrb	w19, [x21, #1]
     a64:	ldr	x20, [x0, #16]
     a68:	add	x21, x7, #0x1
     a6c:	str	x21, [x0, #40]
     a70:	strb	w19, [x20, x7]
     a74:	ldr	w7, [x0, #5940]
     a78:	sub	w19, w9, w7
     a7c:	add	w5, w5, w7
     a80:	lsr	w6, w6, w19
     a84:	strh	w6, [x0, #5936]
     a88:	sub	w5, w5, #0x10
     a8c:	b	b08 <compress_block+0x17c>
     a90:	add	x3, x1, x3, lsl #2
     a94:	ldr	w4, [x0, #5940]
     a98:	ldrh	w18, [x3, #2]
     a9c:	ldrh	w3, [x3]
     aa0:	ldrh	w5, [x0, #5936]
     aa4:	sub	w6, w9, w18
     aa8:	lsl	w7, w3, w4
     aac:	orr	w5, w5, w7
     ab0:	cmp	w4, w6
     ab4:	strh	w5, [x0, #5936]
     ab8:	b.le	9e0 <compress_block+0x54>
     abc:	ldr	x4, [x0, #40]
     ac0:	ldr	x6, [x0, #16]
     ac4:	add	x7, x4, #0x1
     ac8:	str	x7, [x0, #40]
     acc:	strb	w5, [x6, x4]
     ad0:	ldr	x4, [x0, #40]
     ad4:	ldrb	w5, [x16, #1]
     ad8:	ldr	x6, [x0, #16]
     adc:	add	x7, x4, #0x1
     ae0:	str	x7, [x0, #40]
     ae4:	strb	w5, [x6, x4]
     ae8:	ldr	w4, [x0, #5940]
     aec:	sub	w5, w9, w4
     af0:	add	w18, w18, w4
     af4:	lsr	w3, w3, w5
     af8:	sub	w18, w18, #0x10
     afc:	strh	w3, [x0, #5936]
     b00:	b	9e4 <compress_block+0x58>
     b04:	add	w5, w19, w5
     b08:	sub	x6, x4, #0x8
     b0c:	cmp	x6, #0x13
     b10:	str	w5, [x0, #5940]
     b14:	b.hi	b98 <compress_block+0x20c>  // b.pmore
     b18:	ldr	w6, [x13, x4, lsl #2]
     b1c:	ldr	w4, [x12, x4, lsl #2]
     b20:	ldrh	w7, [x0, #5936]
     b24:	sub	w3, w3, w6
     b28:	and	w3, w3, #0xffff
     b2c:	sub	w19, w9, w4
     b30:	lsl	w6, w3, w5
     b34:	orr	w6, w7, w6
     b38:	cmp	w5, w19
     b3c:	strh	w6, [x0, #5936]
     b40:	b.le	b90 <compress_block+0x204>
     b44:	ldr	x5, [x0, #40]
     b48:	ldr	x7, [x0, #16]
     b4c:	add	x19, x5, #0x1
     b50:	str	x19, [x0, #40]
     b54:	strb	w6, [x7, x5]
     b58:	add	x19, x0, x10
     b5c:	ldr	x5, [x0, #40]
     b60:	ldrb	w6, [x19, #1]
     b64:	ldr	x7, [x0, #16]
     b68:	add	x19, x5, #0x1
     b6c:	str	x19, [x0, #40]
     b70:	strb	w6, [x7, x5]
     b74:	ldr	w5, [x0, #5940]
     b78:	sub	w6, w9, w5
     b7c:	add	w4, w4, w5
     b80:	lsr	w3, w3, w6
     b84:	strh	w3, [x0, #5936]
     b88:	sub	w3, w4, #0x10
     b8c:	b	b94 <compress_block+0x208>
     b90:	add	w3, w4, w5
     b94:	str	w3, [x0, #5940]
     b98:	sub	w18, w18, #0x1
     b9c:	lsr	w3, w18, #7
     ba0:	cmp	w18, #0x100
     ba4:	add	w3, w3, #0x100
     ba8:	csel	w3, w18, w3, cc  // cc = lo, ul, last
     bac:	ldrb	w3, [x14, w3, uxtw]
     bb0:	ldr	w7, [x0, #5940]
     bb4:	ldrh	w6, [x0, #5936]
     bb8:	add	x5, x2, x3, lsl #2
     bbc:	ldrh	w4, [x5, #2]
     bc0:	ldrh	w5, [x5]
     bc4:	sub	w19, w9, w4
     bc8:	lsl	w20, w5, w7
     bcc:	orr	w6, w6, w20
     bd0:	cmp	w7, w19
     bd4:	strh	w6, [x0, #5936]
     bd8:	b.le	c28 <compress_block+0x29c>
     bdc:	ldr	x7, [x0, #40]
     be0:	ldr	x19, [x0, #16]
     be4:	add	x20, x7, #0x1
     be8:	str	x20, [x0, #40]
     bec:	strb	w6, [x19, x7]
     bf0:	add	x20, x0, x10
     bf4:	ldr	x6, [x0, #40]
     bf8:	ldrb	w7, [x20, #1]
     bfc:	ldr	x19, [x0, #16]
     c00:	add	x20, x6, #0x1
     c04:	str	x20, [x0, #40]
     c08:	strb	w7, [x19, x6]
     c0c:	ldr	w6, [x0, #5940]
     c10:	sub	w7, w9, w6
     c14:	add	w4, w4, w6
     c18:	lsr	w5, w5, w7
     c1c:	strh	w5, [x0, #5936]
     c20:	sub	w4, w4, #0x10
     c24:	b	c2c <compress_block+0x2a0>
     c28:	add	w4, w7, w4
     c2c:	sub	x5, x3, #0x4
     c30:	cmp	x5, #0x19
     c34:	str	w4, [x0, #5940]
     c38:	b.hi	9e8 <compress_block+0x5c>  // b.pmore
     c3c:	ldr	w5, [x17, x3, lsl #2]
     c40:	ldr	w3, [x15, x3, lsl #2]
     c44:	ldrh	w6, [x0, #5936]
     c48:	sub	w18, w18, w5
     c4c:	and	w18, w18, #0xffff
     c50:	sub	w7, w9, w3
     c54:	lsl	w5, w18, w4
     c58:	orr	w5, w6, w5
     c5c:	cmp	w4, w7
     c60:	strh	w5, [x0, #5936]
     c64:	b.le	cb4 <compress_block+0x328>
     c68:	ldr	x4, [x0, #40]
     c6c:	ldr	x6, [x0, #16]
     c70:	add	x7, x4, #0x1
     c74:	str	x7, [x0, #40]
     c78:	strb	w5, [x6, x4]
     c7c:	add	x7, x0, x10
     c80:	ldr	x4, [x0, #40]
     c84:	ldrb	w5, [x7, #1]
     c88:	ldr	x6, [x0, #16]
     c8c:	add	x7, x4, #0x1
     c90:	str	x7, [x0, #40]
     c94:	strb	w5, [x6, x4]
     c98:	ldr	w4, [x0, #5940]
     c9c:	sub	w5, w9, w4
     ca0:	add	w3, w3, w4
     ca4:	lsr	w18, w18, w5
     ca8:	strh	w18, [x0, #5936]
     cac:	sub	w18, w3, #0x10
     cb0:	b	9e4 <compress_block+0x58>
     cb4:	add	w18, w3, w4
     cb8:	b	9e4 <compress_block+0x58>
     cbc:	ldrh	w8, [x1, #1026]
     cc0:	ldr	w11, [x0, #5940]
     cc4:	ldrh	w9, [x1, #1024]
     cc8:	ldrh	w12, [x0, #5936]
     ccc:	mov	w10, #0x10                  	// #16
     cd0:	sub	w13, w10, w8
     cd4:	lsl	w14, w9, w11
     cd8:	orr	w12, w12, w14
     cdc:	cmp	w11, w13
     ce0:	strh	w12, [x0, #5936]
     ce4:	b.le	d38 <compress_block+0x3ac>
     ce8:	ldr	x11, [x0, #40]
     cec:	ldr	x13, [x0, #16]
     cf0:	add	x14, x11, #0x1
     cf4:	str	x14, [x0, #40]
     cf8:	mov	w14, #0x1730                	// #5936
     cfc:	strb	w12, [x13, x11]
     d00:	add	x14, x0, x14
     d04:	ldr	x11, [x0, #40]
     d08:	ldrb	w12, [x14, #1]
     d0c:	ldr	x13, [x0, #16]
     d10:	add	x14, x11, #0x1
     d14:	str	x14, [x0, #40]
     d18:	strb	w12, [x13, x11]
     d1c:	ldr	w11, [x0, #5940]
     d20:	sub	w10, w10, w11
     d24:	add	w8, w8, w11
     d28:	lsr	w9, w9, w10
     d2c:	strh	w9, [x0, #5936]
     d30:	sub	w8, w8, #0x10
     d34:	b	d3c <compress_block+0x3b0>
     d38:	add	w8, w11, w8
     d3c:	str	w8, [x0, #5940]
     d40:	ldp	x20, x19, [sp, #16]
     d44:	ldr	x21, [sp], #32
     d48:	ret

0000000000000d4c <send_all_trees>:
     d4c:	stp	x29, x30, [sp, #-32]!
     d50:	stp	x20, x19, [sp, #16]
     d54:	ldr	w9, [x0, #5940]
     d58:	mov	w8, #0xfeff                	// #65279
     d5c:	ldrh	w10, [x0, #5936]
     d60:	add	w8, w1, w8
     d64:	and	w8, w8, #0xffff
     d68:	lsl	w11, w8, w9
     d6c:	mov	x19, x0
     d70:	orr	w10, w10, w11
     d74:	cmp	w9, #0xc
     d78:	mov	x29, sp
     d7c:	strh	w10, [x0, #5936]
     d80:	b.lt	dd4 <send_all_trees+0x88>  // b.tstop
     d84:	ldr	x9, [x19, #40]
     d88:	ldr	x11, [x19, #16]
     d8c:	add	x12, x9, #0x1
     d90:	str	x12, [x19, #40]
     d94:	mov	w12, #0x1730                	// #5936
     d98:	strb	w10, [x11, x9]
     d9c:	add	x12, x19, x12
     da0:	ldr	x9, [x19, #40]
     da4:	ldrb	w10, [x12, #1]
     da8:	ldr	x11, [x19, #16]
     dac:	add	x12, x9, #0x1
     db0:	str	x12, [x19, #40]
     db4:	strb	w10, [x11, x9]
     db8:	ldr	w9, [x19, #5940]
     dbc:	mov	w10, #0x10                  	// #16
     dc0:	sub	w10, w10, w9
     dc4:	lsr	w8, w8, w10
     dc8:	strh	w8, [x19, #5936]
     dcc:	sub	w9, w9, #0xb
     dd0:	b	dd8 <send_all_trees+0x8c>
     dd4:	add	w9, w9, #0x5
     dd8:	ldrh	w10, [x19, #5936]
     ddc:	sub	w20, w2, #0x1
     de0:	and	w8, w20, #0xffff
     de4:	lsl	w11, w8, w9
     de8:	orr	w10, w10, w11
     dec:	cmp	w9, #0xc
     df0:	str	w9, [x19, #5940]
     df4:	strh	w10, [x19, #5936]
     df8:	b.lt	e4c <send_all_trees+0x100>  // b.tstop
     dfc:	ldr	x9, [x19, #40]
     e00:	ldr	x11, [x19, #16]
     e04:	add	x12, x9, #0x1
     e08:	str	x12, [x19, #40]
     e0c:	mov	w12, #0x1730                	// #5936
     e10:	strb	w10, [x11, x9]
     e14:	add	x12, x19, x12
     e18:	ldr	x9, [x19, #40]
     e1c:	ldrb	w10, [x12, #1]
     e20:	ldr	x11, [x19, #16]
     e24:	add	x12, x9, #0x1
     e28:	str	x12, [x19, #40]
     e2c:	strb	w10, [x11, x9]
     e30:	ldr	w9, [x19, #5940]
     e34:	mov	w10, #0x10                  	// #16
     e38:	sub	w10, w10, w9
     e3c:	lsr	w8, w8, w10
     e40:	strh	w8, [x19, #5936]
     e44:	sub	w9, w9, #0xb
     e48:	b	e50 <send_all_trees+0x104>
     e4c:	add	w9, w9, #0x5
     e50:	mov	w8, #0xfffc                	// #65532
     e54:	ldrh	w10, [x19, #5936]
     e58:	add	w8, w3, w8
     e5c:	and	w8, w8, #0xffff
     e60:	lsl	w11, w8, w9
     e64:	orr	w10, w10, w11
     e68:	cmp	w9, #0xd
     e6c:	str	w9, [x19, #5940]
     e70:	strh	w10, [x19, #5936]
     e74:	b.lt	ec8 <send_all_trees+0x17c>  // b.tstop
     e78:	ldr	x9, [x19, #40]
     e7c:	ldr	x11, [x19, #16]
     e80:	add	x12, x9, #0x1
     e84:	str	x12, [x19, #40]
     e88:	mov	w12, #0x1730                	// #5936
     e8c:	strb	w10, [x11, x9]
     e90:	add	x12, x19, x12
     e94:	ldr	x9, [x19, #40]
     e98:	ldrb	w10, [x12, #1]
     e9c:	ldr	x11, [x19, #16]
     ea0:	add	x12, x9, #0x1
     ea4:	str	x12, [x19, #40]
     ea8:	strb	w10, [x11, x9]
     eac:	ldr	w9, [x19, #5940]
     eb0:	mov	w10, #0x10                  	// #16
     eb4:	sub	w10, w10, w9
     eb8:	lsr	w8, w8, w10
     ebc:	strh	w8, [x19, #5936]
     ec0:	sub	w8, w9, #0xc
     ec4:	b	ecc <send_all_trees+0x180>
     ec8:	add	w8, w9, #0x4
     ecc:	cmp	w3, #0x1
     ed0:	str	w8, [x19, #5940]
     ed4:	b.lt	f74 <send_all_trees+0x228>  // b.tstop
     ed8:	adrp	x9, 0 <_tr_init>
     edc:	mov	w10, #0x1730                	// #5936
     ee0:	mov	w8, w3
     ee4:	add	x9, x9, #0x0
     ee8:	add	x10, x19, x10
     eec:	mov	w11, #0x10                  	// #16
     ef0:	b	f08 <send_all_trees+0x1bc>
     ef4:	add	w12, w13, #0x3
     ef8:	subs	x8, x8, #0x1
     efc:	add	x9, x9, #0x1
     f00:	str	w12, [x19, #5940]
     f04:	b.eq	f74 <send_all_trees+0x228>  // b.none
     f08:	ldrb	w12, [x9]
     f0c:	ldr	w13, [x19, #5940]
     f10:	ldrh	w14, [x19, #5936]
     f14:	add	x12, x19, x12, lsl #2
     f18:	ldrh	w12, [x12, #2750]
     f1c:	cmp	w13, #0xe
     f20:	lsl	w15, w12, w13
     f24:	orr	w14, w14, w15
     f28:	strh	w14, [x19, #5936]
     f2c:	b.lt	ef4 <send_all_trees+0x1a8>  // b.tstop
     f30:	ldr	x13, [x19, #40]
     f34:	ldr	x15, [x19, #16]
     f38:	add	x16, x13, #0x1
     f3c:	str	x16, [x19, #40]
     f40:	strb	w14, [x15, x13]
     f44:	ldr	x13, [x19, #40]
     f48:	ldrb	w14, [x10, #1]
     f4c:	ldr	x15, [x19, #16]
     f50:	add	x16, x13, #0x1
     f54:	str	x16, [x19, #40]
     f58:	strb	w14, [x15, x13]
     f5c:	ldr	w13, [x19, #5940]
     f60:	sub	w14, w11, w13
     f64:	lsr	w12, w12, w14
     f68:	strh	w12, [x19, #5936]
     f6c:	sub	w12, w13, #0xd
     f70:	b	ef8 <send_all_trees+0x1ac>
     f74:	add	x8, x19, #0xd4
     f78:	sub	w2, w1, #0x1
     f7c:	mov	x0, x19
     f80:	mov	x1, x8
     f84:	bl	14e4 <send_tree>
     f88:	add	x1, x19, #0x9c8
     f8c:	mov	x0, x19
     f90:	mov	w2, w20
     f94:	bl	14e4 <send_tree>
     f98:	ldp	x20, x19, [sp, #16]
     f9c:	ldp	x29, x30, [sp], #32
     fa0:	ret

0000000000000fa4 <_tr_tally>:
     fa4:	ldr	x8, [x0, #5904]
     fa8:	ldr	w9, [x0, #5900]
     fac:	strh	w1, [x8, x9, lsl #1]
     fb0:	ldr	x8, [x0, #5888]
     fb4:	add	w10, w9, #0x1
     fb8:	str	w10, [x0, #5900]
     fbc:	strb	w2, [x8, x9]
     fc0:	cbz	w1, 1020 <_tr_tally+0x7c>
     fc4:	ldr	w8, [x0, #5928]
     fc8:	adrp	x10, 200 <bi_windup+0x18>
     fcc:	add	x10, x10, #0x0
     fd0:	ldrb	w10, [x10, w2, uxtw]
     fd4:	sub	w9, w1, #0x1
     fd8:	lsr	w11, w9, #7
     fdc:	add	w8, w8, #0x1
     fe0:	cmp	w9, #0x100
     fe4:	add	w11, w11, #0x100
     fe8:	str	w8, [x0, #5928]
     fec:	mov	w8, #0x400                 	// #1024
     ff0:	csel	w9, w9, w11, cc  // cc = lo, ul, last
     ff4:	adrp	x11, 0 <_tr_init>
     ff8:	bfi	x8, x10, #2, #8
     ffc:	add	x11, x11, #0x0
    1000:	add	x8, x8, x0
    1004:	ldrb	w9, [x11, w9, uxtw]
    1008:	ldrh	w10, [x8, #216]
    100c:	add	x9, x0, x9, lsl #2
    1010:	add	w10, w10, #0x1
    1014:	strh	w10, [x8, #216]
    1018:	add	x8, x9, #0x9c8
    101c:	b	1028 <_tr_tally+0x84>
    1020:	add	x8, x0, w2, uxtw #2
    1024:	add	x8, x8, #0xd4
    1028:	ldrh	w9, [x8]
    102c:	add	w9, w9, #0x1
    1030:	strh	w9, [x8]
    1034:	ldr	w8, [x0, #5896]
    1038:	ldr	w9, [x0, #5900]
    103c:	sub	w8, w8, #0x1
    1040:	cmp	w9, w8
    1044:	cset	w0, eq  // eq = none
    1048:	ret

000000000000104c <pqdownheap>:
    104c:	ldr	w15, [x0, #5300]
    1050:	add	x8, x0, w2, sxtw #2
    1054:	ldr	w8, [x8, #3008]
    1058:	lsl	w13, w2, #1
    105c:	cmp	w13, w15
    1060:	b.le	1074 <pqdownheap+0x28>
    1064:	mov	w14, w2
    1068:	add	x9, x0, w14, sxtw #2
    106c:	str	w8, [x9, #3008]
    1070:	ret
    1074:	sxtw	x10, w8
    1078:	mov	w11, #0x14bc                	// #5308
    107c:	mov	w9, #0x14bc                	// #5308
    1080:	add	x12, x0, x10
    1084:	add	x10, x1, x10, lsl #2
    1088:	add	x11, x12, x11
    108c:	add	x12, x0, x9
    1090:	b	10b0 <pqdownheap+0x64>
    1094:	add	x15, x0, w2, sxtw #2
    1098:	str	w13, [x15, #3008]
    109c:	ldr	w15, [x0, #5300]
    10a0:	lsl	w13, w14, #1
    10a4:	mov	w2, w14
    10a8:	cmp	w13, w15
    10ac:	b.gt	1068 <pqdownheap+0x1c>
    10b0:	cmp	w13, w15
    10b4:	b.ge	1104 <pqdownheap+0xb8>  // b.tcont
    10b8:	sxtw	x14, w13
    10bc:	add	x16, x0, #0xbc0
    10c0:	orr	x15, x14, #0x1
    10c4:	ldrsw	x14, [x16, w13, sxtw #2]
    10c8:	ldrsw	x16, [x16, x15, lsl #2]
    10cc:	lsl	x17, x14, #2
    10d0:	lsl	x18, x16, #2
    10d4:	ldrh	w18, [x1, x18]
    10d8:	ldrh	w17, [x1, x17]
    10dc:	cmp	w18, w17
    10e0:	b.cc	10fc <pqdownheap+0xb0>  // b.lo, b.ul, b.last
    10e4:	b.ne	1104 <pqdownheap+0xb8>  // b.any
    10e8:	ldrb	w16, [x12, x16]
    10ec:	ldrb	w14, [x12, x14]
    10f0:	cmp	w16, w14
    10f4:	mov	w14, w13
    10f8:	b.hi	1108 <pqdownheap+0xbc>  // b.pmore
    10fc:	mov	w14, w15
    1100:	b	1108 <pqdownheap+0xbc>
    1104:	mov	w14, w13
    1108:	add	x13, x0, w14, sxtw #2
    110c:	ldr	w13, [x13, #3008]
    1110:	ldrh	w15, [x10]
    1114:	sbfiz	x16, x13, #2, #32
    1118:	ldrh	w16, [x1, x16]
    111c:	cmp	w15, w16
    1120:	b.cc	1064 <pqdownheap+0x18>  // b.lo, b.ul, b.last
    1124:	b.ne	1094 <pqdownheap+0x48>  // b.any
    1128:	sxtw	x15, w13
    112c:	add	x15, x0, x15
    1130:	ldrb	w16, [x11]
    1134:	ldrb	w15, [x15, x9]
    1138:	cmp	w16, w15
    113c:	b.hi	1094 <pqdownheap+0x48>  // b.pmore
    1140:	b	1064 <pqdownheap+0x18>

0000000000001144 <gen_bitlen>:
    1144:	ldr	x10, [x1, #16]
    1148:	ldrsw	x11, [x0, #5304]
    114c:	movi	v0.2d, #0x0
    1150:	ldr	x8, [x1]
    1154:	ldr	w9, [x1, #8]
    1158:	ldp	x13, x14, [x10]
    115c:	ldr	w15, [x10, #16]
    1160:	ldrsw	x10, [x10, #24]
    1164:	str	q0, [x0, #2992]
    1168:	str	q0, [x0, #2976]
    116c:	add	x11, x0, x11, lsl #2
    1170:	ldrsw	x11, [x11, #3008]
    1174:	add	x11, x8, x11, lsl #2
    1178:	strh	wzr, [x11, #2]
    117c:	ldrsw	x11, [x0, #5304]
    1180:	cmp	w11, #0x23b
    1184:	b.gt	1238 <gen_bitlen+0xf4>
    1188:	add	x16, x0, x11, lsl #2
    118c:	mov	w12, wzr
    1190:	add	x16, x16, #0xbc4
    1194:	add	w11, w11, #0x1
    1198:	b	11ac <gen_bitlen+0x68>
    119c:	add	w11, w11, #0x1
    11a0:	cmp	w11, #0x23d
    11a4:	add	x16, x16, #0x4
    11a8:	b.eq	1240 <gen_bitlen+0xfc>  // b.none
    11ac:	ldrsw	x17, [x16]
    11b0:	add	x1, x8, x17, lsl #2
    11b4:	ldrh	w18, [x1, #2]
    11b8:	add	x18, x8, x18, lsl #2
    11bc:	ldrh	w18, [x18, #2]
    11c0:	cmp	w10, w18
    11c4:	csinc	w18, w10, w18, le
    11c8:	cinc	w12, w12, le
    11cc:	cmp	w17, w9
    11d0:	strh	w18, [x1, #2]
    11d4:	b.gt	119c <gen_bitlen+0x58>
    11d8:	add	x1, x0, w18, sxtw #1
    11dc:	ldrh	w2, [x1, #2976]
    11e0:	cmp	w17, w15
    11e4:	add	w2, w2, #0x1
    11e8:	strh	w2, [x1, #2976]
    11ec:	b.ge	11f8 <gen_bitlen+0xb4>  // b.tcont
    11f0:	mov	w1, wzr
    11f4:	b	1200 <gen_bitlen+0xbc>
    11f8:	sub	w1, w17, w15
    11fc:	ldr	w1, [x14, w1, sxtw #2]
    1200:	lsl	x2, x17, #2
    1204:	ldrh	w2, [x8, x2]
    1208:	ldr	x3, [x0, #5912]
    120c:	add	w18, w1, w18
    1210:	madd	x18, x2, x18, x3
    1214:	str	x18, [x0, #5912]
    1218:	cbz	x13, 119c <gen_bitlen+0x58>
    121c:	add	x17, x13, x17, lsl #2
    1220:	ldrh	w17, [x17, #2]
    1224:	ldr	x18, [x0, #5920]
    1228:	add	w17, w1, w17
    122c:	madd	x17, x17, x2, x18
    1230:	str	x17, [x0, #5920]
    1234:	b	119c <gen_bitlen+0x58>
    1238:	mov	w12, wzr
    123c:	add	w11, w11, #0x1
    1240:	cbz	w12, 1308 <gen_bitlen+0x1c4>
    1244:	add	x13, x0, x10, lsl #1
    1248:	mov	x14, #0x100000000           	// #4294967296
    124c:	add	x13, x13, #0xba0
    1250:	add	x14, x14, x10, lsl #32
    1254:	mov	x15, #0xffffffff00000000    	// #-4294967296
    1258:	mov	x16, x13
    125c:	mov	x17, x14
    1260:	ldrh	w18, [x16, #-2]!
    1264:	add	x17, x17, x15
    1268:	cbz	w18, 1260 <gen_bitlen+0x11c>
    126c:	sub	w18, w18, #0x1
    1270:	add	x17, x0, x17, asr #31
    1274:	strh	w18, [x16]
    1278:	ldrh	w16, [x17, #2976]
    127c:	subs	w12, w12, #0x2
    1280:	add	w16, w16, #0x2
    1284:	strh	w16, [x17, #2976]
    1288:	ldrh	w16, [x13]
    128c:	sub	w16, w16, #0x1
    1290:	strh	w16, [x13]
    1294:	b.gt	1258 <gen_bitlen+0x114>
    1298:	cbz	w10, 1308 <gen_bitlen+0x1c4>
    129c:	add	x12, x0, #0xbbc
    12a0:	b	12ac <gen_bitlen+0x168>
    12a4:	sub	x10, x10, #0x1
    12a8:	cbz	w10, 1308 <gen_bitlen+0x1c4>
    12ac:	add	x13, x0, x10, lsl #1
    12b0:	ldrh	w13, [x13, #2976]
    12b4:	mov	x14, xzr
    12b8:	add	x16, x12, w11, sxtw #2
    12bc:	cbz	w13, 12a4 <gen_bitlen+0x160>
    12c0:	ldrsw	x15, [x16, x14, lsl #2]
    12c4:	sub	x14, x14, #0x1
    12c8:	cmp	w15, w9
    12cc:	b.gt	12bc <gen_bitlen+0x178>
    12d0:	add	x16, x8, x15, lsl #2
    12d4:	ldrh	w17, [x16, #2]!
    12d8:	add	x11, x14, w11, uxtw
    12dc:	cmp	w10, w17
    12e0:	b.eq	1300 <gen_bitlen+0x1bc>  // b.none
    12e4:	lsl	x14, x15, #2
    12e8:	ldr	x15, [x0, #5912]
    12ec:	ldrh	w14, [x8, x14]
    12f0:	sub	x17, x10, x17
    12f4:	madd	x14, x17, x14, x15
    12f8:	str	x14, [x0, #5912]
    12fc:	strh	w10, [x16]
    1300:	sub	w13, w13, #0x1
    1304:	b	12b4 <gen_bitlen+0x170>
    1308:	ret

000000000000130c <gen_codes>:
    130c:	sub	sp, sp, #0x50
    1310:	mov	x10, sp
    1314:	mov	x8, xzr
    1318:	mov	w9, wzr
    131c:	orr	x10, x10, #0x2
    1320:	stp	x29, x30, [sp, #32]
    1324:	str	x21, [sp, #48]
    1328:	stp	x20, x19, [sp, #64]
    132c:	add	x29, sp, #0x20
    1330:	ldrh	w11, [x2, x8]
    1334:	add	w9, w9, w11
    1338:	lsl	w9, w9, #1
    133c:	strh	w9, [x10, x8]
    1340:	add	x8, x8, #0x2
    1344:	cmp	x8, #0x1e
    1348:	b.ne	1330 <gen_codes+0x24>  // b.any
    134c:	tbnz	w1, #31, 1390 <gen_codes+0x84>
    1350:	add	w19, w1, #0x1
    1354:	add	x20, x0, #0x2
    1358:	mov	x21, sp
    135c:	b	136c <gen_codes+0x60>
    1360:	subs	x19, x19, #0x1
    1364:	add	x20, x20, #0x4
    1368:	b.eq	1390 <gen_codes+0x84>  // b.none
    136c:	ldrh	w1, [x20]
    1370:	cbz	w1, 1360 <gen_codes+0x54>
    1374:	lsl	x8, x1, #1
    1378:	ldrh	w0, [x21, x8]
    137c:	add	w9, w0, #0x1
    1380:	strh	w9, [x21, x8]
    1384:	bl	13a4 <bi_reverse>
    1388:	sturh	w0, [x20, #-2]
    138c:	b	1360 <gen_codes+0x54>
    1390:	ldp	x20, x19, [sp, #64]
    1394:	ldr	x21, [sp, #48]
    1398:	ldp	x29, x30, [sp, #32]
    139c:	add	sp, sp, #0x50
    13a0:	ret

00000000000013a4 <bi_reverse>:
    13a4:	mov	w9, wzr
    13a8:	add	w8, w1, #0x1
    13ac:	and	w10, w0, #0x1
    13b0:	sub	w8, w8, #0x1
    13b4:	orr	w10, w9, w10
    13b8:	lsr	w0, w0, #1
    13bc:	cmp	w8, #0x1
    13c0:	lsl	w9, w10, #1
    13c4:	b.gt	13ac <bi_reverse+0x8>
    13c8:	and	w0, w10, #0x7fffffff
    13cc:	ret

00000000000013d0 <scan_tree>:
    13d0:	ldrh	w8, [x1, #2]
    13d4:	add	x9, x1, w2, sxtw #2
    13d8:	mov	w10, #0xffff                	// #65535
    13dc:	strh	w10, [x9, #6]
    13e0:	tbnz	w2, #31, 14e0 <scan_tree+0x110>
    13e4:	cmp	w8, #0x0
    13e8:	mov	w9, #0x3                   	// #3
    13ec:	mov	w15, #0x7                   	// #7
    13f0:	mov	w16, #0x8a                  	// #138
    13f4:	mov	w3, wzr
    13f8:	add	x10, x0, #0xafc
    13fc:	add	x11, x0, #0xb04
    1400:	add	x12, x0, #0xb00
    1404:	add	w13, w2, #0x1
    1408:	add	x14, x1, #0x6
    140c:	mov	w2, #0xffffffff            	// #-1
    1410:	cinc	w17, w9, ne  // ne = any
    1414:	csel	w18, w16, w15, eq  // eq = none
    1418:	mov	w15, #0x6                   	// #6
    141c:	b	1438 <scan_tree+0x68>
    1420:	mov	w16, w2
    1424:	subs	x13, x13, #0x1
    1428:	add	x14, x14, #0x4
    142c:	mov	w3, w1
    1430:	mov	w2, w16
    1434:	b.eq	14e0 <scan_tree+0x110>  // b.none
    1438:	mov	w16, w8
    143c:	ldrh	w8, [x14]
    1440:	add	w1, w3, #0x1
    1444:	cmp	w1, w18
    1448:	b.ge	1454 <scan_tree+0x84>  // b.tcont
    144c:	cmp	w16, w8
    1450:	b.eq	1420 <scan_tree+0x50>  // b.none
    1454:	cmp	w1, w17
    1458:	b.ge	1470 <scan_tree+0xa0>  // b.tcont
    145c:	add	x17, x0, w16, uxtw #2
    1460:	ldrh	w2, [x17, #2748]
    1464:	add	x18, x17, #0xabc
    1468:	add	w17, w2, w1
    146c:	b	14b8 <scan_tree+0xe8>
    1470:	cbz	w16, 1498 <scan_tree+0xc8>
    1474:	cmp	w16, w2
    1478:	b.eq	148c <scan_tree+0xbc>  // b.none
    147c:	add	x17, x0, w16, uxtw #2
    1480:	ldrh	w18, [x17, #2748]
    1484:	add	w18, w18, #0x1
    1488:	strh	w18, [x17, #2748]
    148c:	ldrh	w17, [x10]
    1490:	mov	x18, x10
    1494:	b	14b4 <scan_tree+0xe4>
    1498:	cmp	w3, #0x9
    149c:	b.gt	14ac <scan_tree+0xdc>
    14a0:	ldrh	w17, [x12]
    14a4:	mov	x18, x12
    14a8:	b	14b4 <scan_tree+0xe4>
    14ac:	ldrh	w17, [x11]
    14b0:	mov	x18, x11
    14b4:	add	w17, w17, #0x1
    14b8:	mov	w1, wzr
    14bc:	strh	w17, [x18]
    14c0:	cbz	w8, 14d4 <scan_tree+0x104>
    14c4:	cmp	w16, w8
    14c8:	cinc	w18, w15, ne  // ne = any
    14cc:	cinc	w17, w9, ne  // ne = any
    14d0:	b	1424 <scan_tree+0x54>
    14d4:	mov	w17, #0x3                   	// #3
    14d8:	mov	w18, #0x8a                  	// #138
    14dc:	b	1424 <scan_tree+0x54>
    14e0:	ret

00000000000014e4 <send_tree>:
    14e4:	stp	x22, x21, [sp, #-32]!
    14e8:	stp	x20, x19, [sp, #16]
    14ec:	tbnz	w2, #31, 198c <send_tree+0x4a8>
    14f0:	ldrh	w9, [x1, #2]
    14f4:	mov	w18, #0x7                   	// #7
    14f8:	mov	w4, #0x8a                  	// #138
    14fc:	mov	w10, #0x3                   	// #3
    1500:	mov	w13, #0x1730                	// #5936
    1504:	cmp	w9, #0x0
    1508:	mov	x8, xzr
    150c:	mov	w3, wzr
    1510:	add	w11, w2, #0x1
    1514:	mov	w7, #0xffffffff            	// #-1
    1518:	mov	w12, #0x10                  	// #16
    151c:	mov	w14, #0x6                   	// #6
    1520:	mov	w15, #0xfffe                	// #65534
    1524:	mov	w16, #0xfff6                	// #65526
    1528:	add	x17, x0, x13
    152c:	csel	w6, w4, w18, eq  // eq = none
    1530:	cinc	w5, w10, ne  // ne = any
    1534:	mov	w18, #0xfffd                	// #65533
    1538:	b	1550 <send_tree+0x6c>
    153c:	mov	w2, w7
    1540:	cmp	x8, x11
    1544:	mov	w7, w2
    1548:	mov	w3, w4
    154c:	b.eq	198c <send_tree+0x4a8>  // b.none
    1550:	add	x8, x8, #0x1
    1554:	mov	w2, w9
    1558:	add	x9, x1, x8, lsl #2
    155c:	ldrh	w9, [x9, #2]
    1560:	add	w4, w3, #0x1
    1564:	cmp	w4, w6
    1568:	b.ge	1574 <send_tree+0x90>  // b.tcont
    156c:	cmp	w2, w9
    1570:	b.eq	153c <send_tree+0x58>  // b.none
    1574:	cmp	w4, w5
    1578:	b.ge	160c <send_tree+0x128>  // b.tcont
    157c:	add	x5, x0, w2, uxtw #2
    1580:	add	x3, x5, #0xabe
    1584:	add	x5, x5, #0xabc
    1588:	b	159c <send_tree+0xb8>
    158c:	add	w6, w19, w6
    1590:	subs	w4, w4, #0x1
    1594:	str	w6, [x0, #5940]
    1598:	b.eq	18e0 <send_tree+0x3fc>  // b.none
    159c:	ldrh	w6, [x3]
    15a0:	ldr	w19, [x0, #5940]
    15a4:	ldrh	w7, [x5]
    15a8:	ldrh	w20, [x0, #5936]
    15ac:	sub	w21, w12, w6
    15b0:	cmp	w19, w21
    15b4:	lsl	w22, w7, w19
    15b8:	orr	w20, w20, w22
    15bc:	strh	w20, [x0, #5936]
    15c0:	b.le	158c <send_tree+0xa8>
    15c4:	ldr	x19, [x0, #40]
    15c8:	ldr	x21, [x0, #16]
    15cc:	add	x22, x19, #0x1
    15d0:	str	x22, [x0, #40]
    15d4:	strb	w20, [x21, x19]
    15d8:	ldr	x19, [x0, #40]
    15dc:	ldrb	w20, [x17, #1]
    15e0:	ldr	x21, [x0, #16]
    15e4:	add	x22, x19, #0x1
    15e8:	str	x22, [x0, #40]
    15ec:	strb	w20, [x21, x19]
    15f0:	ldr	w19, [x0, #5940]
    15f4:	sub	w20, w12, w19
    15f8:	add	w6, w6, w19
    15fc:	lsr	w7, w7, w20
    1600:	strh	w7, [x0, #5936]
    1604:	sub	w6, w6, #0x10
    1608:	b	1590 <send_tree+0xac>
    160c:	cbz	w2, 1690 <send_tree+0x1ac>
    1610:	cmp	w2, w7
    1614:	b.eq	178c <send_tree+0x2a8>  // b.none
    1618:	add	x5, x0, w2, uxtw #2
    161c:	ldr	w7, [x0, #5940]
    1620:	ldrh	w4, [x5, #2750]
    1624:	ldrh	w5, [x5, #2748]
    1628:	ldrh	w6, [x0, #5936]
    162c:	sub	w19, w12, w4
    1630:	lsl	w20, w5, w7
    1634:	orr	w6, w6, w20
    1638:	cmp	w7, w19
    163c:	strh	w6, [x0, #5936]
    1640:	b.le	1780 <send_tree+0x29c>
    1644:	ldr	x7, [x0, #40]
    1648:	ldr	x19, [x0, #16]
    164c:	add	x20, x7, #0x1
    1650:	str	x20, [x0, #40]
    1654:	strb	w6, [x19, x7]
    1658:	add	x20, x0, x13
    165c:	ldr	x6, [x0, #40]
    1660:	ldrb	w7, [x20, #1]
    1664:	ldr	x19, [x0, #16]
    1668:	add	x20, x6, #0x1
    166c:	str	x20, [x0, #40]
    1670:	strb	w7, [x19, x6]
    1674:	ldr	w6, [x0, #5940]
    1678:	sub	w7, w12, w6
    167c:	add	w4, w4, w6
    1680:	lsr	w5, w5, w7
    1684:	strh	w5, [x0, #5936]
    1688:	sub	w4, w4, #0x10
    168c:	b	1784 <send_tree+0x2a0>
    1690:	cmp	w3, #0x9
    1694:	b.gt	170c <send_tree+0x228>
    1698:	ldrh	w4, [x0, #2818]
    169c:	ldr	w7, [x0, #5940]
    16a0:	ldrh	w5, [x0, #2816]
    16a4:	ldrh	w6, [x0, #5936]
    16a8:	sub	w19, w12, w4
    16ac:	cmp	w7, w19
    16b0:	lsl	w20, w5, w7
    16b4:	orr	w6, w6, w20
    16b8:	strh	w6, [x0, #5936]
    16bc:	b.le	1870 <send_tree+0x38c>
    16c0:	ldr	x7, [x0, #40]
    16c4:	ldr	x19, [x0, #16]
    16c8:	add	x20, x7, #0x1
    16cc:	str	x20, [x0, #40]
    16d0:	strb	w6, [x19, x7]
    16d4:	add	x20, x0, x13
    16d8:	ldr	x6, [x0, #40]
    16dc:	ldrb	w7, [x20, #1]
    16e0:	ldr	x19, [x0, #16]
    16e4:	add	x20, x6, #0x1
    16e8:	str	x20, [x0, #40]
    16ec:	strb	w7, [x19, x6]
    16f0:	ldr	w6, [x0, #5940]
    16f4:	sub	w7, w12, w6
    16f8:	add	w4, w4, w6
    16fc:	lsr	w5, w5, w7
    1700:	strh	w5, [x0, #5936]
    1704:	sub	w4, w4, #0x10
    1708:	b	1874 <send_tree+0x390>
    170c:	ldrh	w4, [x0, #2822]
    1710:	ldr	w7, [x0, #5940]
    1714:	ldrh	w5, [x0, #2820]
    1718:	ldrh	w6, [x0, #5936]
    171c:	sub	w19, w12, w4
    1720:	cmp	w7, w19
    1724:	lsl	w20, w5, w7
    1728:	orr	w6, w6, w20
    172c:	strh	w6, [x0, #5936]
    1730:	b.le	18f8 <send_tree+0x414>
    1734:	ldr	x7, [x0, #40]
    1738:	ldr	x19, [x0, #16]
    173c:	add	x20, x7, #0x1
    1740:	str	x20, [x0, #40]
    1744:	strb	w6, [x19, x7]
    1748:	add	x20, x0, x13
    174c:	ldr	x6, [x0, #40]
    1750:	ldrb	w7, [x20, #1]
    1754:	ldr	x19, [x0, #16]
    1758:	add	x20, x6, #0x1
    175c:	str	x20, [x0, #40]
    1760:	strb	w7, [x19, x6]
    1764:	ldr	w6, [x0, #5940]
    1768:	sub	w7, w12, w6
    176c:	add	w4, w4, w6
    1770:	lsr	w5, w5, w7
    1774:	strh	w5, [x0, #5936]
    1778:	sub	w4, w4, #0x10
    177c:	b	18fc <send_tree+0x418>
    1780:	add	w4, w7, w4
    1784:	str	w4, [x0, #5940]
    1788:	mov	w4, w3
    178c:	ldrh	w3, [x0, #2814]
    1790:	ldr	w7, [x0, #5940]
    1794:	ldrh	w5, [x0, #2812]
    1798:	ldrh	w6, [x0, #5936]
    179c:	sub	w19, w12, w3
    17a0:	cmp	w7, w19
    17a4:	lsl	w20, w5, w7
    17a8:	orr	w6, w6, w20
    17ac:	strh	w6, [x0, #5936]
    17b0:	b.le	1800 <send_tree+0x31c>
    17b4:	ldr	x7, [x0, #40]
    17b8:	ldr	x19, [x0, #16]
    17bc:	add	x20, x7, #0x1
    17c0:	str	x20, [x0, #40]
    17c4:	strb	w6, [x19, x7]
    17c8:	add	x20, x0, x13
    17cc:	ldr	x6, [x0, #40]
    17d0:	ldrb	w7, [x20, #1]
    17d4:	ldr	x19, [x0, #16]
    17d8:	add	x20, x6, #0x1
    17dc:	str	x20, [x0, #40]
    17e0:	strb	w7, [x19, x6]
    17e4:	ldr	w6, [x0, #5940]
    17e8:	sub	w7, w12, w6
    17ec:	add	w3, w3, w6
    17f0:	lsr	w5, w5, w7
    17f4:	strh	w5, [x0, #5936]
    17f8:	sub	w5, w3, #0x10
    17fc:	b	1804 <send_tree+0x320>
    1800:	add	w5, w7, w3
    1804:	ldrh	w6, [x0, #5936]
    1808:	add	w3, w4, w18
    180c:	and	w3, w3, #0xffff
    1810:	lsl	w4, w3, w5
    1814:	orr	w4, w6, w4
    1818:	cmp	w5, #0xf
    181c:	str	w5, [x0, #5940]
    1820:	strh	w4, [x0, #5936]
    1824:	b.lt	1868 <send_tree+0x384>  // b.tstop
    1828:	ldr	x5, [x0, #40]
    182c:	ldr	x6, [x0, #16]
    1830:	add	x7, x5, #0x1
    1834:	str	x7, [x0, #40]
    1838:	strb	w4, [x6, x5]
    183c:	add	x7, x0, x13
    1840:	ldr	x4, [x0, #40]
    1844:	ldrb	w5, [x7, #1]
    1848:	ldr	x6, [x0, #16]
    184c:	add	x7, x4, #0x1
    1850:	str	x7, [x0, #40]
    1854:	strb	w5, [x6, x4]
    1858:	ldr	w4, [x0, #5940]
    185c:	sub	w5, w12, w4
    1860:	sub	w4, w4, #0xe
    1864:	b	18d4 <send_tree+0x3f0>
    1868:	add	w3, w5, #0x2
    186c:	b	1974 <send_tree+0x490>
    1870:	add	w4, w7, w4
    1874:	ldrh	w5, [x0, #5936]
    1878:	add	w3, w3, w15
    187c:	and	w3, w3, #0xffff
    1880:	lsl	w6, w3, w4
    1884:	orr	w5, w5, w6
    1888:	cmp	w4, #0xe
    188c:	str	w4, [x0, #5940]
    1890:	strh	w5, [x0, #5936]
    1894:	b.lt	1968 <send_tree+0x484>  // b.tstop
    1898:	ldr	x4, [x0, #40]
    189c:	ldr	x6, [x0, #16]
    18a0:	add	x7, x4, #0x1
    18a4:	str	x7, [x0, #40]
    18a8:	strb	w5, [x6, x4]
    18ac:	add	x7, x0, x13
    18b0:	ldr	x4, [x0, #40]
    18b4:	ldrb	w5, [x7, #1]
    18b8:	ldr	x6, [x0, #16]
    18bc:	add	x7, x4, #0x1
    18c0:	str	x7, [x0, #40]
    18c4:	strb	w5, [x6, x4]
    18c8:	ldr	w4, [x0, #5940]
    18cc:	sub	w5, w12, w4
    18d0:	sub	w4, w4, #0xd
    18d4:	lsr	w3, w3, w5
    18d8:	strh	w3, [x0, #5936]
    18dc:	str	w4, [x0, #5940]
    18e0:	mov	w4, wzr
    18e4:	cbz	w9, 1980 <send_tree+0x49c>
    18e8:	cmp	w2, w9
    18ec:	cinc	w5, w10, ne  // ne = any
    18f0:	cinc	w6, w14, ne  // ne = any
    18f4:	b	1540 <send_tree+0x5c>
    18f8:	add	w4, w7, w4
    18fc:	ldrh	w5, [x0, #5936]
    1900:	add	w3, w3, w16
    1904:	and	w3, w3, #0xffff
    1908:	lsl	w6, w3, w4
    190c:	orr	w5, w5, w6
    1910:	cmp	w4, #0xa
    1914:	str	w4, [x0, #5940]
    1918:	strh	w5, [x0, #5936]
    191c:	b.lt	1970 <send_tree+0x48c>  // b.tstop
    1920:	ldr	x4, [x0, #40]
    1924:	ldr	x6, [x0, #16]
    1928:	add	x7, x4, #0x1
    192c:	str	x7, [x0, #40]
    1930:	strb	w5, [x6, x4]
    1934:	add	x7, x0, x13
    1938:	ldr	x4, [x0, #40]
    193c:	ldrb	w5, [x7, #1]
    1940:	ldr	x6, [x0, #16]
    1944:	add	x7, x4, #0x1
    1948:	str	x7, [x0, #40]
    194c:	strb	w5, [x6, x4]
    1950:	ldr	w4, [x0, #5940]
    1954:	sub	w5, w12, w4
    1958:	lsr	w3, w3, w5
    195c:	strh	w3, [x0, #5936]
    1960:	sub	w3, w4, #0x9
    1964:	b	1974 <send_tree+0x490>
    1968:	add	w3, w4, #0x3
    196c:	b	1974 <send_tree+0x490>
    1970:	add	w3, w4, #0x7
    1974:	str	w3, [x0, #5940]
    1978:	mov	w4, wzr
    197c:	cbnz	w9, 18e8 <send_tree+0x404>
    1980:	mov	w6, #0x8a                  	// #138
    1984:	mov	w5, #0x3                   	// #3
    1988:	b	1540 <send_tree+0x5c>
    198c:	ldp	x20, x19, [sp, #16]
    1990:	ldp	x22, x21, [sp], #32
    1994:	ret

zutil.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <zlibVersion>:
   0:	adrp	x0, 0 <zlibVersion>
   4:	add	x0, x0, #0x0
   8:	ret

000000000000000c <zlibCompileFlags>:
   c:	mov	w0, #0xa9                  	// #169
  10:	ret

0000000000000014 <zError>:
  14:	mov	w8, #0x2                   	// #2
  18:	adrp	x9, 0 <zlibVersion>
  1c:	sub	x8, x8, w0, sxtw
  20:	add	x9, x9, #0x0
  24:	ldr	x0, [x9, x8, lsl #3]
  28:	ret

000000000000002c <zcalloc>:
  2c:	stp	x29, x30, [sp, #-16]!
  30:	mul	w0, w2, w1
  34:	mov	x29, sp
  38:	bl	0 <malloc>
  3c:	ldp	x29, x30, [sp], #16
  40:	ret

0000000000000044 <zcfree>:
  44:	stp	x29, x30, [sp, #-16]!
  48:	mov	x0, x1
  4c:	mov	x29, sp
  50:	bl	0 <free>
  54:	ldp	x29, x30, [sp], #16
  58:	ret

compress.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <compress2>:
   0:	sub	sp, sp, #0xb0
   4:	stp	x29, x30, [sp, #112]
   8:	stp	x22, x21, [sp, #144]
   c:	stp	x20, x19, [sp, #160]
  10:	str	x23, [sp, #128]
  14:	ldr	x23, [x1]
  18:	mov	x21, x2
  1c:	adrp	x2, 0 <compress2>
  20:	mov	x20, x3
  24:	mov	x19, x1
  28:	mov	x22, x0
  2c:	str	xzr, [x1]
  30:	add	x2, x2, #0x0
  34:	mov	x0, sp
  38:	mov	w3, #0x70                  	// #112
  3c:	mov	w1, w4
  40:	add	x29, sp, #0x70
  44:	stp	xzr, xzr, [sp, #64]
  48:	str	xzr, [sp, #80]
  4c:	bl	0 <deflateInit_>
  50:	cbnz	w0, e0 <compress2+0xe0>
  54:	str	x22, [sp, #24]
  58:	mov	w22, #0xffffffff            	// #-1
  5c:	str	wzr, [sp, #32]
  60:	str	x21, [sp]
  64:	str	wzr, [sp, #8]
  68:	b	84 <compress2+0x84>
  6c:	cmp	x20, #0x0
  70:	cset	w8, eq  // eq = none
  74:	lsl	w1, w8, #2
  78:	mov	x0, sp
  7c:	bl	0 <deflate>
  80:	cbnz	w0, c4 <compress2+0xc4>
  84:	ldr	w8, [sp, #32]
  88:	cbz	w8, 98 <compress2+0x98>
  8c:	ldr	w8, [sp, #8]
  90:	cbnz	w8, 6c <compress2+0x6c>
  94:	b	b0 <compress2+0xb0>
  98:	cmp	x23, x22
  9c:	csel	x8, x23, x22, cc  // cc = lo, ul, last
  a0:	sub	x23, x23, x8
  a4:	str	w8, [sp, #32]
  a8:	ldr	w8, [sp, #8]
  ac:	cbnz	w8, 6c <compress2+0x6c>
  b0:	cmp	x20, x22
  b4:	csel	x8, x20, x22, cc  // cc = lo, ul, last
  b8:	sub	x20, x20, x8
  bc:	str	w8, [sp, #8]
  c0:	b	6c <compress2+0x6c>
  c4:	ldr	x8, [sp, #40]
  c8:	mov	w21, w0
  cc:	mov	x0, sp
  d0:	str	x8, [x19]
  d4:	bl	0 <deflateEnd>
  d8:	cmp	w21, #0x1
  dc:	csel	w0, wzr, w21, eq  // eq = none
  e0:	ldp	x20, x19, [sp, #160]
  e4:	ldp	x22, x21, [sp, #144]
  e8:	ldr	x23, [sp, #128]
  ec:	ldp	x29, x30, [sp, #112]
  f0:	add	sp, sp, #0xb0
  f4:	ret

00000000000000f8 <compress>:
  f8:	stp	x29, x30, [sp, #-16]!
  fc:	mov	w4, #0xffffffff            	// #-1
 100:	mov	x29, sp
 104:	bl	0 <compress2>
 108:	ldp	x29, x30, [sp], #16
 10c:	ret

0000000000000110 <compressBound>:
 110:	add	x8, x0, x0, lsr #12
 114:	add	x8, x8, x0, lsr #14
 118:	add	x8, x8, x0, lsr #25
 11c:	add	x0, x8, #0xd
 120:	ret

uncompr.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <uncompress2>:
   0:	sub	sp, sp, #0xc0
   4:	stp	x29, x30, [sp, #112]
   8:	stp	x24, x23, [sp, #144]
   c:	stp	x22, x21, [sp, #160]
  10:	stp	x20, x19, [sp, #176]
  14:	ldr	x23, [x1]
  18:	ldr	x24, [x3]
  1c:	mov	x20, x3
  20:	mov	x19, x1
  24:	str	x25, [sp, #128]
  28:	add	x29, sp, #0x70
  2c:	cbz	x23, 3c <uncompress2+0x3c>
  30:	mov	x21, x0
  34:	str	xzr, [x19]
  38:	b	44 <uncompress2+0x44>
  3c:	add	x21, x29, #0x1c
  40:	mov	w23, #0x1                   	// #1
  44:	adrp	x1, 0 <uncompress2>
  48:	str	x2, [sp]
  4c:	add	x1, x1, #0x0
  50:	mov	x0, sp
  54:	mov	w2, #0x70                  	// #112
  58:	str	wzr, [sp, #8]
  5c:	stp	xzr, xzr, [sp, #72]
  60:	str	xzr, [sp, #64]
  64:	bl	0 <inflateInit_>
  68:	mov	w22, w0
  6c:	cbz	w0, 90 <uncompress2+0x90>
  70:	mov	w0, w22
  74:	ldp	x20, x19, [sp, #176]
  78:	ldp	x22, x21, [sp, #160]
  7c:	ldp	x24, x23, [sp, #144]
  80:	ldr	x25, [sp, #128]
  84:	ldp	x29, x30, [sp, #112]
  88:	add	sp, sp, #0xc0
  8c:	ret
  90:	mov	w25, #0xffffffff            	// #-1
  94:	str	x21, [sp, #24]
  98:	str	wzr, [sp, #32]
  9c:	b	b0 <uncompress2+0xb0>
  a0:	mov	x0, sp
  a4:	mov	w1, wzr
  a8:	bl	0 <inflate>
  ac:	cbnz	w0, f0 <uncompress2+0xf0>
  b0:	ldr	w8, [sp, #32]
  b4:	cbz	w8, c4 <uncompress2+0xc4>
  b8:	ldr	w8, [sp, #8]
  bc:	cbnz	w8, a0 <uncompress2+0xa0>
  c0:	b	dc <uncompress2+0xdc>
  c4:	cmp	x23, x25
  c8:	csel	x8, x23, x25, cc  // cc = lo, ul, last
  cc:	sub	x23, x23, x8
  d0:	str	w8, [sp, #32]
  d4:	ldr	w8, [sp, #8]
  d8:	cbnz	w8, a0 <uncompress2+0xa0>
  dc:	cmp	x24, x25
  e0:	csel	x8, x24, x25, cc  // cc = lo, ul, last
  e4:	sub	x24, x24, x8
  e8:	str	w8, [sp, #8]
  ec:	b	a0 <uncompress2+0xa0>
  f0:	ldr	w8, [sp, #8]
  f4:	ldr	x9, [x20]
  f8:	mov	w22, w0
  fc:	add	x8, x24, x8
 100:	sub	x8, x9, x8
 104:	str	x8, [x20]
 108:	ldr	x8, [sp, #40]
 10c:	add	x9, x29, #0x1c
 110:	cmp	x21, x9
 114:	b.eq	120 <uncompress2+0x120>  // b.none
 118:	str	x8, [x19]
 11c:	b	130 <uncompress2+0x130>
 120:	cmp	x8, #0x0
 124:	mov	w8, #0xfffffffb            	// #-5
 128:	ccmp	w22, w8, #0x0, ne  // ne = any
 12c:	csinc	x23, x23, xzr, ne  // ne = any
 130:	mov	x0, sp
 134:	bl	0 <inflateEnd>
 138:	cmp	w22, #0x2
 13c:	b.eq	15c <uncompress2+0x15c>  // b.none
 140:	cmp	w22, #0x1
 144:	b.eq	164 <uncompress2+0x164>  // b.none
 148:	cmn	w22, #0x5
 14c:	b.ne	70 <uncompress2+0x70>  // b.any
 150:	ldr	w8, [sp, #32]
 154:	cmn	x23, x8
 158:	b.eq	70 <uncompress2+0x70>  // b.none
 15c:	mov	w22, #0xfffffffd            	// #-3
 160:	b	70 <uncompress2+0x70>
 164:	mov	w22, wzr
 168:	b	70 <uncompress2+0x70>

000000000000016c <uncompress>:
 16c:	sub	sp, sp, #0x20
 170:	str	x3, [sp, #8]
 174:	add	x3, sp, #0x8
 178:	stp	x29, x30, [sp, #16]
 17c:	add	x29, sp, #0x10
 180:	bl	0 <uncompress2>
 184:	ldp	x29, x30, [sp, #16]
 188:	add	sp, sp, #0x20
 18c:	ret

gzclose.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gzclose>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	cbz	x0, 28 <gzclose+0x28>
   c:	ldr	w8, [x0, #24]
  10:	mov	w9, #0x1c4f                	// #7247
  14:	cmp	w8, w9
  18:	b.ne	34 <gzclose+0x34>  // b.any
  1c:	bl	0 <gzclose_r>
  20:	ldp	x29, x30, [sp], #16
  24:	ret
  28:	mov	w0, #0xfffffffe            	// #-2
  2c:	ldp	x29, x30, [sp], #16
  30:	ret
  34:	bl	0 <gzclose_w>
  38:	ldp	x29, x30, [sp], #16
  3c:	ret

gzlib.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gzopen>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x2, x1
   8:	mov	w1, #0xffffffff            	// #-1
   c:	mov	x29, sp
  10:	bl	1c <gz_open>
  14:	ldp	x29, x30, [sp], #16
  18:	ret

000000000000001c <gz_open>:
  1c:	stp	x29, x30, [sp, #-80]!
  20:	stp	x26, x25, [sp, #16]
  24:	stp	x24, x23, [sp, #32]
  28:	stp	x22, x21, [sp, #48]
  2c:	stp	x20, x19, [sp, #64]
  30:	mov	x29, sp
  34:	cbz	x0, 274 <gz_open+0x258>
  38:	mov	x21, x0
  3c:	mov	w0, #0xe8                  	// #232
  40:	mov	x22, x2
  44:	mov	w20, w1
  48:	bl	0 <malloc>
  4c:	mov	x19, x0
  50:	cbz	x0, 278 <gz_open+0x25c>
  54:	mov	x8, #0x200000000000        	// #35184372088832
  58:	mov	w9, #0xffffffff            	// #-1
  5c:	str	xzr, [x19, #112]
  60:	str	wzr, [x19, #24]
  64:	str	x8, [x19, #40]
  68:	str	x9, [x19, #88]
  6c:	str	wzr, [x19, #64]
  70:	ldrb	w16, [x22]
  74:	cbz	w16, 138 <gz_open+0x11c>
  78:	adrp	x9, 0 <gzopen>
  7c:	mov	w24, wzr
  80:	mov	w25, wzr
  84:	add	x8, x22, #0x1
  88:	add	x9, x9, #0x0
  8c:	mov	w10, #0x4                   	// #4
  90:	mov	w11, #0x3                   	// #3
  94:	mov	w12, #0x1                   	// #1
  98:	mov	w13, #0x2                   	// #2
  9c:	mov	w14, #0x1c4f                	// #7247
  a0:	mov	w15, #0x79b1                	// #31153
  a4:	b	b8 <gz_open+0x9c>
  a8:	sub	w16, w16, #0x30
  ac:	str	w16, [x19, #88]
  b0:	ldrb	w16, [x8], #1
  b4:	cbz	w16, 140 <gz_open+0x124>
  b8:	sub	w17, w16, #0x30
  bc:	and	w17, w17, #0xff
  c0:	and	w16, w16, #0xff
  c4:	cmp	w17, #0x9
  c8:	b.ls	a8 <gz_open+0x8c>  // b.plast
  cc:	sub	w16, w16, #0x2b
  d0:	cmp	w16, #0x4d
  d4:	b.hi	b0 <gz_open+0x94>  // b.pmore
  d8:	adr	x17, b0 <gz_open+0x94>
  dc:	ldrb	w18, [x9, x16]
  e0:	add	x17, x17, x18, lsl #2
  e4:	br	x17
  e8:	str	w10, [x19, #92]
  ec:	b	b0 <gz_open+0x94>
  f0:	str	w11, [x19, #92]
  f4:	b	b0 <gz_open+0x94>
  f8:	str	w12, [x19, #64]
  fc:	b	b0 <gz_open+0x94>
 100:	str	w12, [x19, #24]
 104:	b	b0 <gz_open+0x94>
 108:	mov	w25, #0x1                   	// #1
 10c:	b	b0 <gz_open+0x94>
 110:	str	w12, [x19, #92]
 114:	b	b0 <gz_open+0x94>
 118:	str	w13, [x19, #92]
 11c:	b	b0 <gz_open+0x94>
 120:	str	w14, [x19, #24]
 124:	b	b0 <gz_open+0x94>
 128:	str	w15, [x19, #24]
 12c:	b	b0 <gz_open+0x94>
 130:	mov	w24, #0x1                   	// #1
 134:	b	b0 <gz_open+0x94>
 138:	mov	w25, wzr
 13c:	mov	w24, wzr
 140:	ldr	w26, [x19, #24]
 144:	mov	w8, #0x1c4f                	// #7247
 148:	cmp	w26, w8
 14c:	b.eq	158 <gz_open+0x13c>  // b.none
 150:	cbz	w26, 26c <gz_open+0x250>
 154:	b	168 <gz_open+0x14c>
 158:	ldr	w8, [x19, #64]
 15c:	cbnz	w8, 26c <gz_open+0x250>
 160:	mov	w8, #0x1                   	// #1
 164:	str	w8, [x19, #64]
 168:	mov	x0, x21
 16c:	bl	0 <strlen>
 170:	add	x23, x0, #0x1
 174:	mov	x0, x23
 178:	bl	0 <malloc>
 17c:	str	x0, [x19, #32]
 180:	cbz	x0, 26c <gz_open+0x250>
 184:	adrp	x2, 0 <gzopen>
 188:	add	x2, x2, #0x0
 18c:	mov	x1, x23
 190:	mov	x3, x21
 194:	mov	x22, x0
 198:	bl	0 <snprintf>
 19c:	cmp	w25, #0x0
 1a0:	mov	w9, #0x1c4f                	// #7247
 1a4:	cset	w8, ne  // ne = any
 1a8:	cmp	w26, w9
 1ac:	b.ne	1bc <gz_open+0x1a0>  // b.any
 1b0:	mov	w9, wzr
 1b4:	tbz	w20, #31, 200 <gz_open+0x1e4>
 1b8:	b	1e8 <gz_open+0x1cc>
 1bc:	cmp	w24, #0x0
 1c0:	mov	w9, #0xc1                  	// #193
 1c4:	mov	w10, #0x41                  	// #65
 1c8:	mov	w11, #0x79b1                	// #31153
 1cc:	mov	w12, #0x400                 	// #1024
 1d0:	csel	w9, w10, w9, eq  // eq = none
 1d4:	cmp	w26, w11
 1d8:	mov	w10, #0x200                 	// #512
 1dc:	csel	w10, w10, w12, eq  // eq = none
 1e0:	orr	w9, w10, w9
 1e4:	tbz	w20, #31, 200 <gz_open+0x1e4>
 1e8:	lsl	w8, w8, #19
 1ec:	orr	w1, w9, w8
 1f0:	mov	w2, #0x1b6                 	// #438
 1f4:	mov	x0, x21
 1f8:	bl	0 <open>
 1fc:	mov	w20, w0
 200:	cmn	w20, #0x1
 204:	str	w20, [x19, #28]
 208:	b.eq	264 <gz_open+0x248>  // b.none
 20c:	cmp	w26, #0x1
 210:	b.ne	22c <gz_open+0x210>  // b.any
 214:	mov	w2, #0x2                   	// #2
 218:	mov	w0, w20
 21c:	mov	x1, xzr
 220:	bl	0 <lseek64>
 224:	mov	w8, #0x79b1                	// #31153
 228:	str	w8, [x19, #24]
 22c:	ldr	w8, [x19, #24]
 230:	mov	w9, #0x1c4f                	// #7247
 234:	cmp	w8, w9
 238:	b.ne	258 <gz_open+0x23c>  // b.any
 23c:	mov	w2, #0x1                   	// #1
 240:	mov	w0, w20
 244:	mov	x1, xzr
 248:	bl	0 <lseek64>
 24c:	cmn	x0, #0x1
 250:	csel	x8, xzr, x0, eq  // eq = none
 254:	str	x8, [x19, #72]
 258:	mov	x0, x19
 25c:	bl	3f0 <gz_reset>
 260:	b	278 <gz_open+0x25c>
 264:	mov	x0, x22
 268:	bl	0 <free>
 26c:	mov	x0, x19
 270:	bl	0 <free>
 274:	mov	x19, xzr
 278:	mov	x0, x19
 27c:	ldp	x20, x19, [sp, #64]
 280:	ldp	x22, x21, [sp, #48]
 284:	ldp	x24, x23, [sp, #32]
 288:	ldp	x26, x25, [sp, #16]
 28c:	ldp	x29, x30, [sp], #80
 290:	ret

0000000000000294 <gzopen64>:
 294:	stp	x29, x30, [sp, #-16]!
 298:	mov	x2, x1
 29c:	mov	w1, #0xffffffff            	// #-1
 2a0:	mov	x29, sp
 2a4:	bl	1c <gz_open>
 2a8:	ldp	x29, x30, [sp], #16
 2ac:	ret

00000000000002b0 <gzdopen>:
 2b0:	stp	x29, x30, [sp, #-48]!
 2b4:	cmn	w0, #0x1
 2b8:	str	x21, [sp, #16]
 2bc:	stp	x20, x19, [sp, #32]
 2c0:	mov	x29, sp
 2c4:	b.eq	314 <gzdopen+0x64>  // b.none
 2c8:	mov	w19, w0
 2cc:	mov	w0, #0x13                  	// #19
 2d0:	mov	x20, x1
 2d4:	bl	0 <malloc>
 2d8:	cbz	x0, 314 <gzdopen+0x64>
 2dc:	adrp	x2, 0 <gzopen>
 2e0:	add	x2, x2, #0x0
 2e4:	mov	w1, #0x13                  	// #19
 2e8:	mov	w3, w19
 2ec:	mov	x21, x0
 2f0:	bl	0 <snprintf>
 2f4:	mov	x0, x21
 2f8:	mov	w1, w19
 2fc:	mov	x2, x20
 300:	bl	1c <gz_open>
 304:	mov	x19, x0
 308:	mov	x0, x21
 30c:	bl	0 <free>
 310:	b	318 <gzdopen+0x68>
 314:	mov	x19, xzr
 318:	mov	x0, x19
 31c:	ldp	x20, x19, [sp, #32]
 320:	ldr	x21, [sp, #16]
 324:	ldp	x29, x30, [sp], #48
 328:	ret

000000000000032c <gzbuffer>:
 32c:	cbz	x0, 37c <gzbuffer+0x50>
 330:	ldr	w9, [x0, #24]
 334:	mov	w10, #0x79b1                	// #31153
 338:	mov	x8, x0
 33c:	cmp	w9, w10
 340:	b.eq	350 <gzbuffer+0x24>  // b.none
 344:	mov	w10, #0x1c4f                	// #7247
 348:	cmp	w9, w10
 34c:	b.ne	37c <gzbuffer+0x50>  // b.any
 350:	cmp	w1, w1, lsl #1
 354:	mov	w0, #0xffffffff            	// #-1
 358:	b.hi	378 <gzbuffer+0x4c>  // b.pmore
 35c:	ldr	w9, [x8, #40]
 360:	cbnz	w9, 378 <gzbuffer+0x4c>
 364:	cmp	w1, #0x2
 368:	mov	w9, #0x2                   	// #2
 36c:	mov	w0, wzr
 370:	csel	w9, w1, w9, hi  // hi = pmore
 374:	str	w9, [x8, #44]
 378:	ret
 37c:	mov	w0, #0xffffffff            	// #-1
 380:	ret

0000000000000384 <gzrewind>:
 384:	stp	x29, x30, [sp, #-32]!
 388:	str	x19, [sp, #16]
 38c:	mov	x29, sp
 390:	cbz	x0, 3e0 <gzrewind+0x5c>
 394:	ldr	w8, [x0, #24]
 398:	mov	w9, #0x1c4f                	// #7247
 39c:	mov	x19, x0
 3a0:	cmp	w8, w9
 3a4:	b.ne	3e0 <gzrewind+0x5c>  // b.any
 3a8:	ldr	w8, [x19, #108]
 3ac:	cbz	w8, 3b8 <gzrewind+0x34>
 3b0:	cmn	w8, #0x5
 3b4:	b.ne	3e0 <gzrewind+0x5c>  // b.any
 3b8:	ldr	w0, [x19, #28]
 3bc:	ldr	x1, [x19, #72]
 3c0:	mov	w2, wzr
 3c4:	bl	0 <lseek64>
 3c8:	cmn	x0, #0x1
 3cc:	b.eq	3e4 <gzrewind+0x60>  // b.none
 3d0:	mov	x0, x19
 3d4:	bl	3f0 <gz_reset>
 3d8:	mov	w0, wzr
 3dc:	b	3e4 <gzrewind+0x60>
 3e0:	mov	w0, #0xffffffff            	// #-1
 3e4:	ldr	x19, [sp, #16]
 3e8:	ldp	x29, x30, [sp], #32
 3ec:	ret

00000000000003f0 <gz_reset>:
 3f0:	stp	x29, x30, [sp, #-32]!
 3f4:	ldr	w8, [x0, #24]
 3f8:	mov	w9, #0x1c4f                	// #7247
 3fc:	str	x19, [sp, #16]
 400:	mov	x19, x0
 404:	cmp	w8, w9
 408:	mov	x29, sp
 40c:	str	wzr, [x0]
 410:	b.ne	41c <gz_reset+0x2c>  // b.any
 414:	str	xzr, [x19, #80]
 418:	str	wzr, [x19, #68]
 41c:	mov	x0, x19
 420:	mov	w1, wzr
 424:	mov	x2, xzr
 428:	str	wzr, [x19, #104]
 42c:	bl	5b8 <gz_error>
 430:	str	xzr, [x19, #16]
 434:	str	wzr, [x19, #128]
 438:	ldr	x19, [sp, #16]
 43c:	ldp	x29, x30, [sp], #32
 440:	ret

0000000000000444 <gzseek64>:
 444:	stp	x29, x30, [sp, #-32]!
 448:	stp	x20, x19, [sp, #16]
 44c:	mov	x29, sp
 450:	cbz	x0, 490 <gzseek64+0x4c>
 454:	ldr	w8, [x0, #24]
 458:	mov	w9, #0x79b1                	// #31153
 45c:	mov	x19, x1
 460:	mov	x20, x0
 464:	cmp	w8, w9
 468:	b.eq	478 <gzseek64+0x34>  // b.none
 46c:	mov	w9, #0x1c4f                	// #7247
 470:	cmp	w8, w9
 474:	b.ne	490 <gzseek64+0x4c>  // b.any
 478:	ldr	w9, [x20, #108]
 47c:	cbz	w9, 488 <gzseek64+0x44>
 480:	cmn	w9, #0x5
 484:	b.ne	490 <gzseek64+0x4c>  // b.any
 488:	cmp	w2, #0x1
 48c:	b.ls	4a0 <gzseek64+0x5c>  // b.plast
 490:	mov	x0, #0xffffffffffffffff    	// #-1
 494:	ldp	x20, x19, [sp, #16]
 498:	ldp	x29, x30, [sp], #32
 49c:	ret
 4a0:	cbz	w2, 4b8 <gzseek64+0x74>
 4a4:	ldr	w9, [x20, #104]
 4a8:	cbz	w9, 4c0 <gzseek64+0x7c>
 4ac:	ldr	x9, [x20, #96]
 4b0:	add	x19, x9, x19
 4b4:	b	4c0 <gzseek64+0x7c>
 4b8:	ldr	x9, [x20, #16]
 4bc:	sub	x19, x19, x9
 4c0:	mov	w9, #0x1c4f                	// #7247
 4c4:	cmp	w8, w9
 4c8:	str	wzr, [x20, #104]
 4cc:	b.ne	534 <gzseek64+0xf0>  // b.any
 4d0:	ldr	w9, [x20, #68]
 4d4:	cmp	w9, #0x1
 4d8:	b.ne	534 <gzseek64+0xf0>  // b.any
 4dc:	ldr	x9, [x20, #16]
 4e0:	cmn	x9, x19
 4e4:	b.mi	534 <gzseek64+0xf0>  // b.first
 4e8:	ldr	w8, [x20]
 4ec:	ldr	w0, [x20, #28]
 4f0:	mov	w2, #0x1                   	// #1
 4f4:	sub	x1, x19, x8
 4f8:	bl	0 <lseek64>
 4fc:	cmn	x0, #0x1
 500:	b.eq	494 <gzseek64+0x50>  // b.none
 504:	mov	x0, x20
 508:	mov	w1, wzr
 50c:	mov	x2, xzr
 510:	str	wzr, [x20]
 514:	str	xzr, [x20, #80]
 518:	str	wzr, [x20, #104]
 51c:	bl	5b8 <gz_error>
 520:	ldr	x8, [x20, #16]
 524:	str	wzr, [x20, #128]
 528:	add	x0, x8, x19
 52c:	str	x0, [x20, #16]
 530:	b	494 <gzseek64+0x50>
 534:	tbnz	x19, #63, 58c <gzseek64+0x148>
 538:	ldr	w8, [x20, #24]
 53c:	mov	w9, #0x1c4f                	// #7247
 540:	cmp	w8, w9
 544:	b.ne	570 <gzseek64+0x12c>  // b.any
 548:	ldr	w8, [x20]
 54c:	ldp	x9, x10, [x20, #8]
 550:	cmp	x19, x8
 554:	csel	w11, w19, w8, lt  // lt = tstop
 558:	sub	w8, w8, w11
 55c:	add	x9, x9, x11
 560:	add	x10, x10, x11
 564:	sub	x19, x19, x11
 568:	str	w8, [x20]
 56c:	stp	x9, x10, [x20, #8]
 570:	cbz	x19, 580 <gzseek64+0x13c>
 574:	mov	w8, #0x1                   	// #1
 578:	str	w8, [x20, #104]
 57c:	str	x19, [x20, #96]
 580:	ldr	x8, [x20, #16]
 584:	add	x0, x8, x19
 588:	b	494 <gzseek64+0x50>
 58c:	mov	w9, #0x1c4f                	// #7247
 590:	cmp	w8, w9
 594:	b.ne	490 <gzseek64+0x4c>  // b.any
 598:	ldr	x8, [x20, #16]
 59c:	adds	x19, x8, x19
 5a0:	b.mi	490 <gzseek64+0x4c>  // b.first
 5a4:	mov	x0, x20
 5a8:	bl	384 <gzrewind>
 5ac:	cmn	w0, #0x1
 5b0:	b.ne	538 <gzseek64+0xf4>  // b.any
 5b4:	b	490 <gzseek64+0x4c>

00000000000005b8 <gz_error>:
 5b8:	stp	x29, x30, [sp, #-48]!
 5bc:	stp	x22, x21, [sp, #16]
 5c0:	stp	x20, x19, [sp, #32]
 5c4:	mov	x20, x0
 5c8:	ldr	x0, [x0, #112]
 5cc:	mov	x19, x2
 5d0:	mov	w21, w1
 5d4:	mov	x29, sp
 5d8:	cbz	x0, 5f0 <gz_error+0x38>
 5dc:	ldr	w8, [x20, #108]
 5e0:	cmn	w8, #0x4
 5e4:	b.eq	5ec <gz_error+0x34>  // b.none
 5e8:	bl	0 <free>
 5ec:	str	xzr, [x20, #112]
 5f0:	cmn	w21, #0x5
 5f4:	b.eq	600 <gz_error+0x48>  // b.none
 5f8:	cbz	w21, 600 <gz_error+0x48>
 5fc:	str	wzr, [x20]
 600:	cmn	w21, #0x4
 604:	str	w21, [x20, #108]
 608:	b.eq	688 <gz_error+0xd0>  // b.none
 60c:	cbz	x19, 688 <gz_error+0xd0>
 610:	ldr	x21, [x20, #32]
 614:	mov	x0, x21
 618:	bl	0 <strlen>
 61c:	mov	x22, x0
 620:	mov	x0, x19
 624:	bl	0 <strlen>
 628:	add	x8, x22, x0
 62c:	add	x0, x8, #0x3
 630:	bl	0 <malloc>
 634:	str	x0, [x20, #112]
 638:	cbz	x0, 680 <gz_error+0xc8>
 63c:	mov	x22, x0
 640:	mov	x0, x21
 644:	bl	0 <strlen>
 648:	mov	x20, x0
 64c:	mov	x0, x19
 650:	bl	0 <strlen>
 654:	add	x8, x20, x0
 658:	adrp	x2, 0 <gzopen>
 65c:	adrp	x4, 0 <gzopen>
 660:	add	x1, x8, #0x3
 664:	add	x2, x2, #0x0
 668:	add	x4, x4, #0x0
 66c:	mov	x0, x22
 670:	mov	x3, x21
 674:	mov	x5, x19
 678:	bl	0 <snprintf>
 67c:	b	688 <gz_error+0xd0>
 680:	mov	w8, #0xfffffffc            	// #-4
 684:	str	w8, [x20, #108]
 688:	ldp	x20, x19, [sp, #32]
 68c:	ldp	x22, x21, [sp, #16]
 690:	ldp	x29, x30, [sp], #48
 694:	ret

0000000000000698 <gzseek>:
 698:	stp	x29, x30, [sp, #-16]!
 69c:	mov	x29, sp
 6a0:	bl	444 <gzseek64>
 6a4:	ldp	x29, x30, [sp], #16
 6a8:	ret

00000000000006ac <gztell64>:
 6ac:	cbz	x0, 6e4 <gztell64+0x38>
 6b0:	ldr	w8, [x0, #24]
 6b4:	mov	w9, #0x79b1                	// #31153
 6b8:	cmp	w8, w9
 6bc:	b.eq	6cc <gztell64+0x20>  // b.none
 6c0:	mov	w9, #0x1c4f                	// #7247
 6c4:	cmp	w8, w9
 6c8:	b.ne	6e4 <gztell64+0x38>  // b.any
 6cc:	ldr	w9, [x0, #104]
 6d0:	ldr	x8, [x0, #16]
 6d4:	cbz	w9, 6ec <gztell64+0x40>
 6d8:	ldr	x9, [x0, #96]
 6dc:	add	x0, x9, x8
 6e0:	ret
 6e4:	mov	x0, #0xffffffffffffffff    	// #-1
 6e8:	ret
 6ec:	add	x0, xzr, x8
 6f0:	ret

00000000000006f4 <gztell>:
 6f4:	stp	x29, x30, [sp, #-16]!
 6f8:	mov	x29, sp
 6fc:	bl	6ac <gztell64>
 700:	ldp	x29, x30, [sp], #16
 704:	ret

0000000000000708 <gzoffset64>:
 708:	stp	x29, x30, [sp, #-32]!
 70c:	str	x19, [sp, #16]
 710:	mov	x29, sp
 714:	cbz	x0, 76c <gzoffset64+0x64>
 718:	ldr	w8, [x0, #24]
 71c:	mov	w9, #0x79b1                	// #31153
 720:	mov	x19, x0
 724:	cmp	w8, w9
 728:	b.eq	738 <gzoffset64+0x30>  // b.none
 72c:	mov	w9, #0x1c4f                	// #7247
 730:	cmp	w8, w9
 734:	b.ne	76c <gzoffset64+0x64>  // b.any
 738:	ldr	w0, [x19, #28]
 73c:	mov	w2, #0x1                   	// #1
 740:	mov	x1, xzr
 744:	bl	0 <lseek64>
 748:	cmn	x0, #0x1
 74c:	b.eq	770 <gzoffset64+0x68>  // b.none
 750:	ldr	w8, [x19, #24]
 754:	mov	w9, #0x1c4f                	// #7247
 758:	cmp	w8, w9
 75c:	b.ne	770 <gzoffset64+0x68>  // b.any
 760:	ldr	w8, [x19, #128]
 764:	sub	x0, x0, x8
 768:	b	770 <gzoffset64+0x68>
 76c:	mov	x0, #0xffffffffffffffff    	// #-1
 770:	ldr	x19, [sp, #16]
 774:	ldp	x29, x30, [sp], #32
 778:	ret

000000000000077c <gzoffset>:
 77c:	stp	x29, x30, [sp, #-16]!
 780:	mov	x29, sp
 784:	bl	708 <gzoffset64>
 788:	ldp	x29, x30, [sp], #16
 78c:	ret

0000000000000790 <gzeof>:
 790:	cbz	x0, 7a8 <gzeof+0x18>
 794:	ldr	w8, [x0, #24]
 798:	mov	w9, #0x1c4f                	// #7247
 79c:	cmp	w8, w9
 7a0:	b.ne	7ac <gzeof+0x1c>  // b.any
 7a4:	ldr	w0, [x0, #84]
 7a8:	ret
 7ac:	mov	w0, wzr
 7b0:	ret

00000000000007b4 <gzerror>:
 7b4:	cbz	x0, 814 <gzerror+0x60>
 7b8:	ldr	w8, [x0, #24]
 7bc:	mov	w9, #0x79b1                	// #31153
 7c0:	cmp	w8, w9
 7c4:	b.eq	7d4 <gzerror+0x20>  // b.none
 7c8:	mov	w9, #0x1c4f                	// #7247
 7cc:	cmp	w8, w9
 7d0:	b.ne	7f8 <gzerror+0x44>  // b.any
 7d4:	cbz	x1, 7e0 <gzerror+0x2c>
 7d8:	ldr	w8, [x0, #108]
 7dc:	str	w8, [x1]
 7e0:	ldr	w8, [x0, #108]
 7e4:	cmn	w8, #0x4
 7e8:	b.ne	800 <gzerror+0x4c>  // b.any
 7ec:	adrp	x0, 0 <gzopen>
 7f0:	add	x0, x0, #0x0
 7f4:	ret
 7f8:	mov	x0, xzr
 7fc:	ret
 800:	ldr	x8, [x0, #112]
 804:	adrp	x9, 0 <gzopen>
 808:	add	x9, x9, #0x0
 80c:	cmp	x8, #0x0
 810:	csel	x0, x9, x8, eq  // eq = none
 814:	ret

0000000000000818 <gzclearerr>:
 818:	stp	x29, x30, [sp, #-16]!
 81c:	mov	x29, sp
 820:	cbz	x0, 850 <gzclearerr+0x38>
 824:	ldr	w8, [x0, #24]
 828:	mov	w9, #0x79b1                	// #31153
 82c:	cmp	w8, w9
 830:	b.eq	844 <gzclearerr+0x2c>  // b.none
 834:	mov	w9, #0x1c4f                	// #7247
 838:	cmp	w8, w9
 83c:	b.ne	850 <gzclearerr+0x38>  // b.any
 840:	str	xzr, [x0, #80]
 844:	mov	w1, wzr
 848:	mov	x2, xzr
 84c:	bl	5b8 <gz_error>
 850:	ldp	x29, x30, [sp], #16
 854:	ret

gzread.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gzread>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	str	x19, [sp, #16]
   8:	mov	x29, sp
   c:	cbz	x0, 70 <gzread+0x70>
  10:	ldr	w8, [x0, #24]
  14:	mov	w9, #0x1c4f                	// #7247
  18:	mov	x19, x0
  1c:	cmp	w8, w9
  20:	b.ne	70 <gzread+0x70>  // b.any
  24:	ldr	w8, [x19, #108]
  28:	cbz	w8, 34 <gzread+0x34>
  2c:	cmn	w8, #0x5
  30:	b.ne	70 <gzread+0x70>  // b.any
  34:	tbnz	w2, #31, 5c <gzread+0x5c>
  38:	mov	w2, w2
  3c:	mov	x0, x19
  40:	bl	80 <gz_read>
  44:	cbnz	w0, 74 <gzread+0x74>
  48:	ldr	w8, [x19, #108]
  4c:	cbz	w8, 74 <gzread+0x74>
  50:	cmn	w8, #0x5
  54:	b.eq	74 <gzread+0x74>  // b.none
  58:	b	70 <gzread+0x70>
  5c:	adrp	x2, 0 <gzread>
  60:	add	x2, x2, #0x0
  64:	mov	w1, #0xfffffffe            	// #-2
  68:	mov	x0, x19
  6c:	bl	0 <gz_error>
  70:	mov	w0, #0xffffffff            	// #-1
  74:	ldr	x19, [sp, #16]
  78:	ldp	x29, x30, [sp], #32
  7c:	ret

0000000000000080 <gz_read>:
  80:	stp	x29, x30, [sp, #-64]!
  84:	str	x23, [sp, #16]
  88:	stp	x22, x21, [sp, #32]
  8c:	stp	x20, x19, [sp, #48]
  90:	mov	x29, sp
  94:	cbz	x2, 1c4 <gz_read+0x144>
  98:	ldr	w8, [x0, #104]
  9c:	mov	x20, x2
  a0:	mov	x21, x1
  a4:	mov	x19, x0
  a8:	cbz	w8, c4 <gz_read+0x44>
  ac:	ldr	x1, [x19, #96]
  b0:	mov	x0, x19
  b4:	str	wzr, [x19, #104]
  b8:	bl	450 <gz_skip>
  bc:	cmn	w0, #0x1
  c0:	b.eq	1c4 <gz_read+0x144>  // b.none
  c4:	mov	x22, xzr
  c8:	mov	w23, #0xffffffff            	// #-1
  cc:	b	e4 <gz_read+0x64>
  d0:	mov	x0, x19
  d4:	bl	61c <gz_fetch>
  d8:	cmn	w0, #0x1
  dc:	b.eq	1c4 <gz_read+0x144>  // b.none
  e0:	cbz	x20, 1c8 <gz_read+0x148>
  e4:	cmp	x20, x23
  e8:	csinv	w2, w20, wzr, cc  // cc = lo, ul, last
  ec:	str	w2, [x29, #28]
  f0:	ldr	w8, [x19]
  f4:	cbz	w8, 154 <gz_read+0xd4>
  f8:	cmp	w8, w2
  fc:	b.cs	104 <gz_read+0x84>  // b.hs, b.nlast
 100:	str	w8, [x29, #28]
 104:	ldr	x1, [x19, #8]
 108:	ldr	w2, [x29, #28]
 10c:	mov	x0, x21
 110:	bl	0 <memcpy>
 114:	ldr	w8, [x29, #28]
 118:	ldr	x9, [x19, #8]
 11c:	ldr	w10, [x19]
 120:	add	x9, x9, x8
 124:	str	x9, [x19, #8]
 128:	sub	w8, w10, w8
 12c:	str	w8, [x19]
 130:	ldr	w8, [x29, #28]
 134:	ldr	x9, [x19, #16]
 138:	sub	x20, x20, x8
 13c:	add	x21, x21, x8
 140:	add	x22, x22, x8
 144:	add	x8, x9, x8
 148:	str	x8, [x19, #16]
 14c:	cbnz	x20, e4 <gz_read+0x64>
 150:	b	1c8 <gz_read+0x148>
 154:	ldr	w8, [x19, #80]
 158:	cbz	w8, 164 <gz_read+0xe4>
 15c:	ldr	w8, [x19, #128]
 160:	cbz	w8, 1e0 <gz_read+0x160>
 164:	ldr	w8, [x19, #68]
 168:	cbz	w8, d0 <gz_read+0x50>
 16c:	ldr	w9, [x19, #40]
 170:	cmp	w2, w9, lsl #1
 174:	b.cc	d0 <gz_read+0x50>  // b.lo, b.ul, b.last
 178:	cmp	w8, #0x1
 17c:	b.ne	19c <gz_read+0x11c>  // b.any
 180:	add	x3, x29, #0x1c
 184:	mov	x0, x19
 188:	mov	x1, x21
 18c:	bl	948 <gz_load>
 190:	cmn	w0, #0x1
 194:	b.ne	130 <gz_read+0xb0>  // b.any
 198:	b	1c4 <gz_read+0x144>
 19c:	mov	x0, x19
 1a0:	str	w2, [x19, #152]
 1a4:	str	x21, [x19, #144]
 1a8:	bl	a00 <gz_decomp>
 1ac:	cmn	w0, #0x1
 1b0:	b.eq	1c4 <gz_read+0x144>  // b.none
 1b4:	ldr	w9, [x19]
 1b8:	mov	w8, wzr
 1bc:	str	w9, [x29, #28]
 1c0:	b	12c <gz_read+0xac>
 1c4:	mov	x22, xzr
 1c8:	mov	x0, x22
 1cc:	ldp	x20, x19, [sp, #48]
 1d0:	ldp	x22, x21, [sp, #32]
 1d4:	ldr	x23, [sp, #16]
 1d8:	ldp	x29, x30, [sp], #64
 1dc:	ret
 1e0:	mov	w8, #0x1                   	// #1
 1e4:	str	w8, [x19, #84]
 1e8:	b	1c8 <gz_read+0x148>

00000000000001ec <gzfread>:
 1ec:	stp	x29, x30, [sp, #-32]!
 1f0:	str	x19, [sp, #16]
 1f4:	mov	x29, sp
 1f8:	cbz	x3, 268 <gzfread+0x7c>
 1fc:	ldr	w8, [x3, #24]
 200:	mov	w9, #0x1c4f                	// #7247
 204:	cmp	w8, w9
 208:	b.ne	268 <gzfread+0x7c>  // b.any
 20c:	ldr	w8, [x3, #108]
 210:	mov	x19, x1
 214:	mov	x1, x0
 218:	cbz	w8, 224 <gzfread+0x38>
 21c:	cmn	w8, #0x5
 220:	b.ne	268 <gzfread+0x7c>  // b.any
 224:	umulh	x8, x19, x2
 228:	cmp	xzr, x8
 22c:	cset	w8, ne  // ne = any
 230:	cbz	x19, 250 <gzfread+0x64>
 234:	cbz	w8, 250 <gzfread+0x64>
 238:	adrp	x2, 0 <gzread>
 23c:	add	x2, x2, #0x0
 240:	mov	w1, #0xfffffffe            	// #-2
 244:	mov	x0, x3
 248:	bl	0 <gz_error>
 24c:	b	268 <gzfread+0x7c>
 250:	mul	x2, x19, x2
 254:	cbz	x2, 268 <gzfread+0x7c>
 258:	mov	x0, x3
 25c:	bl	80 <gz_read>
 260:	udiv	x0, x0, x19
 264:	b	26c <gzfread+0x80>
 268:	mov	x0, xzr
 26c:	ldr	x19, [sp, #16]
 270:	ldp	x29, x30, [sp], #32
 274:	ret

0000000000000278 <gzgetc>:
 278:	sub	sp, sp, #0x20
 27c:	stp	x29, x30, [sp, #16]
 280:	add	x29, sp, #0x10
 284:	cbz	x0, 2d0 <gzgetc+0x58>
 288:	ldr	w8, [x0, #24]
 28c:	mov	w9, #0x1c4f                	// #7247
 290:	cmp	w8, w9
 294:	b.ne	2d0 <gzgetc+0x58>  // b.any
 298:	ldr	w8, [x0, #108]
 29c:	cbz	w8, 2a8 <gzgetc+0x30>
 2a0:	cmn	w8, #0x5
 2a4:	b.ne	2d0 <gzgetc+0x58>  // b.any
 2a8:	ldr	w8, [x0]
 2ac:	cbz	w8, 2e0 <gzgetc+0x68>
 2b0:	ldp	x10, x9, [x0, #8]
 2b4:	sub	w8, w8, #0x1
 2b8:	str	w8, [x0]
 2bc:	add	x8, x9, #0x1
 2c0:	add	x9, x10, #0x1
 2c4:	stp	x9, x8, [x0, #8]
 2c8:	ldrb	w0, [x10]
 2cc:	b	2d4 <gzgetc+0x5c>
 2d0:	mov	w0, #0xffffffff            	// #-1
 2d4:	ldp	x29, x30, [sp, #16]
 2d8:	add	sp, sp, #0x20
 2dc:	ret
 2e0:	sub	x1, x29, #0x4
 2e4:	mov	w2, #0x1                   	// #1
 2e8:	bl	80 <gz_read>
 2ec:	ldurb	w8, [x29, #-4]
 2f0:	cmp	w0, #0x1
 2f4:	csinv	w0, w8, wzr, ge  // ge = tcont
 2f8:	b	2d4 <gzgetc+0x5c>

00000000000002fc <gzgetc_>:
 2fc:	stp	x29, x30, [sp, #-16]!
 300:	mov	x29, sp
 304:	bl	278 <gzgetc>
 308:	ldp	x29, x30, [sp], #16
 30c:	ret

0000000000000310 <gzungetc>:
 310:	stp	x29, x30, [sp, #-32]!
 314:	stp	x20, x19, [sp, #16]
 318:	mov	x29, sp
 31c:	cbz	x1, 3a8 <gzungetc+0x98>
 320:	ldr	w8, [x1, #24]
 324:	mov	w9, #0x1c4f                	// #7247
 328:	mov	x19, x1
 32c:	cmp	w8, w9
 330:	b.ne	3a8 <gzungetc+0x98>  // b.any
 334:	ldr	w8, [x19, #108]
 338:	mov	w20, w0
 33c:	cbz	w8, 348 <gzungetc+0x38>
 340:	cmn	w8, #0x5
 344:	b.ne	3a8 <gzungetc+0x98>  // b.any
 348:	ldr	w8, [x19, #104]
 34c:	cbz	w8, 378 <gzungetc+0x68>
 350:	ldr	x1, [x19, #96]
 354:	mov	x0, x19
 358:	str	wzr, [x19, #104]
 35c:	bl	450 <gz_skip>
 360:	mov	w8, w0
 364:	mov	w0, #0xffffffff            	// #-1
 368:	tbnz	w20, #31, 3ac <gzungetc+0x9c>
 36c:	cmn	w8, #0x1
 370:	b.ne	37c <gzungetc+0x6c>  // b.any
 374:	b	3ac <gzungetc+0x9c>
 378:	tbnz	w20, #31, 3a8 <gzungetc+0x98>
 37c:	ldr	w8, [x19]
 380:	cbz	w8, 3b8 <gzungetc+0xa8>
 384:	ldr	w9, [x19, #40]
 388:	lsl	w10, w9, #1
 38c:	cmp	w8, w10
 390:	b.ne	3e0 <gzungetc+0xd0>  // b.any
 394:	adrp	x2, 0 <gzread>
 398:	add	x2, x2, #0x0
 39c:	mov	w1, #0xfffffffd            	// #-3
 3a0:	mov	x0, x19
 3a4:	bl	0 <gz_error>
 3a8:	mov	w0, #0xffffffff            	// #-1
 3ac:	ldp	x20, x19, [sp, #16]
 3b0:	ldp	x29, x30, [sp], #32
 3b4:	ret
 3b8:	ldr	w8, [x19, #40]
 3bc:	ldr	x9, [x19, #56]
 3c0:	mov	w10, #0x1                   	// #1
 3c4:	str	w10, [x19]
 3c8:	lsl	w8, w8, #1
 3cc:	add	x8, x9, x8
 3d0:	sub	x9, x8, #0x1
 3d4:	str	x9, [x19, #8]
 3d8:	sturb	w20, [x8, #-1]
 3dc:	b	438 <gzungetc+0x128>
 3e0:	ldr	x9, [x19, #8]
 3e4:	ldr	x11, [x19, #56]
 3e8:	cmp	x9, x11
 3ec:	b.ne	41c <gzungetc+0x10c>  // b.any
 3f0:	ldr	x12, [x19, #56]
 3f4:	add	x9, x11, x8
 3f8:	add	x8, x11, w10, uxtw
 3fc:	cmp	x9, x12
 400:	b.ls	418 <gzungetc+0x108>  // b.plast
 404:	ldrb	w10, [x9, #-1]!
 408:	strb	w10, [x8, #-1]!
 40c:	ldr	x10, [x19, #56]
 410:	cmp	x9, x10
 414:	b.hi	404 <gzungetc+0xf4>  // b.pmore
 418:	str	x8, [x19, #8]
 41c:	ldr	w8, [x19]
 420:	ldr	x9, [x19, #8]
 424:	add	w8, w8, #0x1
 428:	sub	x10, x9, #0x1
 42c:	str	w8, [x19]
 430:	str	x10, [x19, #8]
 434:	sturb	w20, [x9, #-1]
 438:	ldr	x8, [x19, #16]
 43c:	mov	w0, w20
 440:	str	wzr, [x19, #84]
 444:	sub	x8, x8, #0x1
 448:	str	x8, [x19, #16]
 44c:	b	3ac <gzungetc+0x9c>

0000000000000450 <gz_skip>:
 450:	stp	x29, x30, [sp, #-32]!
 454:	stp	x20, x19, [sp, #16]
 458:	mov	x29, sp
 45c:	cbz	x1, 4c0 <gz_skip+0x70>
 460:	mov	x19, x1
 464:	mov	x20, x0
 468:	b	494 <gz_skip+0x44>
 46c:	ldp	x9, x10, [x20, #8]
 470:	cmp	x19, x8
 474:	csel	w11, w19, w8, lt  // lt = tstop
 478:	sub	w8, w8, w11
 47c:	str	w8, [x20]
 480:	add	x8, x9, x11
 484:	add	x9, x10, x11
 488:	stp	x8, x9, [x20, #8]
 48c:	sub	x19, x19, x11
 490:	cbz	x19, 4c0 <gz_skip+0x70>
 494:	ldr	w8, [x20]
 498:	cbnz	w8, 46c <gz_skip+0x1c>
 49c:	ldr	w8, [x20, #80]
 4a0:	cbz	w8, 4ac <gz_skip+0x5c>
 4a4:	ldr	w8, [x20, #128]
 4a8:	cbz	w8, 4c0 <gz_skip+0x70>
 4ac:	mov	x0, x20
 4b0:	bl	61c <gz_fetch>
 4b4:	cmn	w0, #0x1
 4b8:	b.ne	490 <gz_skip+0x40>  // b.any
 4bc:	b	4c4 <gz_skip+0x74>
 4c0:	mov	w0, wzr
 4c4:	ldp	x20, x19, [sp, #16]
 4c8:	ldp	x29, x30, [sp], #32
 4cc:	ret

00000000000004d0 <gzgets>:
 4d0:	stp	x29, x30, [sp, #-80]!
 4d4:	stp	x20, x19, [sp, #64]
 4d8:	mov	x20, x0
 4dc:	mov	x0, xzr
 4e0:	str	x25, [sp, #16]
 4e4:	stp	x24, x23, [sp, #32]
 4e8:	stp	x22, x21, [sp, #48]
 4ec:	mov	x29, sp
 4f0:	cbz	x20, 604 <gzgets+0x134>
 4f4:	mov	x19, x1
 4f8:	cbz	x1, 604 <gzgets+0x134>
 4fc:	mov	w21, w2
 500:	cmp	w2, #0x1
 504:	b.lt	604 <gzgets+0x134>  // b.tstop
 508:	ldr	w8, [x20, #24]
 50c:	mov	w9, #0x1c4f                	// #7247
 510:	cmp	w8, w9
 514:	b.ne	600 <gzgets+0x130>  // b.any
 518:	ldr	w8, [x20, #108]
 51c:	cbz	w8, 528 <gzgets+0x58>
 520:	cmn	w8, #0x5
 524:	b.ne	600 <gzgets+0x130>  // b.any
 528:	ldr	w8, [x20, #104]
 52c:	cbz	w8, 548 <gzgets+0x78>
 530:	ldr	x1, [x20, #96]
 534:	mov	x0, x20
 538:	str	wzr, [x20, #104]
 53c:	bl	450 <gz_skip>
 540:	cmn	w0, #0x1
 544:	b.eq	600 <gzgets+0x130>  // b.none
 548:	subs	w25, w21, #0x1
 54c:	mov	x21, x19
 550:	b.eq	5ec <gzgets+0x11c>  // b.none
 554:	mov	x21, x19
 558:	ldr	w8, [x20]
 55c:	cbnz	w8, 570 <gzgets+0xa0>
 560:	mov	x0, x20
 564:	bl	61c <gz_fetch>
 568:	cmn	w0, #0x1
 56c:	b.eq	600 <gzgets+0x130>  // b.none
 570:	ldr	w8, [x20]
 574:	cbz	w8, 5e4 <gzgets+0x114>
 578:	ldr	x23, [x20, #8]
 57c:	cmp	w8, w25
 580:	csel	w22, w25, w8, hi  // hi = pmore
 584:	mov	w1, #0xa                   	// #10
 588:	mov	x0, x23
 58c:	mov	x2, x22
 590:	bl	0 <memchr>
 594:	mov	x24, x0
 598:	sub	w8, w24, w23
 59c:	cmp	x0, #0x0
 5a0:	csinc	w22, w22, w8, eq  // eq = none
 5a4:	mov	x0, x21
 5a8:	mov	x1, x23
 5ac:	mov	x2, x22
 5b0:	bl	0 <memcpy>
 5b4:	ldr	w8, [x20]
 5b8:	ldp	x9, x10, [x20, #8]
 5bc:	add	x21, x21, x22
 5c0:	sub	w8, w8, w22
 5c4:	add	x9, x9, x22
 5c8:	add	x10, x10, x22
 5cc:	str	w8, [x20]
 5d0:	stp	x9, x10, [x20, #8]
 5d4:	cbnz	x24, 5ec <gzgets+0x11c>
 5d8:	sub	w25, w25, w22
 5dc:	cbnz	w25, 558 <gzgets+0x88>
 5e0:	b	5ec <gzgets+0x11c>
 5e4:	mov	w8, #0x1                   	// #1
 5e8:	str	w8, [x20, #84]
 5ec:	cmp	x21, x19
 5f0:	b.eq	600 <gzgets+0x130>  // b.none
 5f4:	mov	x0, x19
 5f8:	strb	wzr, [x21]
 5fc:	b	604 <gzgets+0x134>
 600:	mov	x0, xzr
 604:	ldp	x20, x19, [sp, #64]
 608:	ldp	x22, x21, [sp, #48]
 60c:	ldp	x24, x23, [sp, #32]
 610:	ldr	x25, [sp, #16]
 614:	ldp	x29, x30, [sp], #80
 618:	ret

000000000000061c <gz_fetch>:
 61c:	stp	x29, x30, [sp, #-32]!
 620:	str	x19, [sp, #16]
 624:	mov	x19, x0
 628:	mov	x29, sp
 62c:	ldr	w8, [x19, #68]
 630:	cbz	w8, 648 <gz_fetch+0x2c>
 634:	cmp	w8, #0x2
 638:	b.eq	664 <gz_fetch+0x48>  // b.none
 63c:	cmp	w8, #0x1
 640:	b.ne	688 <gz_fetch+0x6c>  // b.any
 644:	b	6a8 <gz_fetch+0x8c>
 648:	mov	x0, x19
 64c:	bl	72c <gz_look>
 650:	cmn	w0, #0x1
 654:	b.eq	6d4 <gz_fetch+0xb8>  // b.none
 658:	ldr	w8, [x19, #68]
 65c:	cbnz	w8, 688 <gz_fetch+0x6c>
 660:	b	6a0 <gz_fetch+0x84>
 664:	ldr	w8, [x19, #40]
 668:	ldr	x9, [x19, #56]
 66c:	mov	x0, x19
 670:	lsl	w8, w8, #1
 674:	str	w8, [x19, #152]
 678:	str	x9, [x19, #144]
 67c:	bl	a00 <gz_decomp>
 680:	cmn	w0, #0x1
 684:	b.eq	6d4 <gz_fetch+0xb8>  // b.none
 688:	ldr	w8, [x19]
 68c:	cbnz	w8, 6a0 <gz_fetch+0x84>
 690:	ldr	w8, [x19, #80]
 694:	cbz	w8, 62c <gz_fetch+0x10>
 698:	ldr	w8, [x19, #128]
 69c:	cbnz	w8, 62c <gz_fetch+0x10>
 6a0:	mov	w0, wzr
 6a4:	b	6d4 <gz_fetch+0xb8>
 6a8:	ldr	w8, [x19, #40]
 6ac:	ldr	x1, [x19, #56]
 6b0:	mov	x0, x19
 6b4:	mov	x3, x19
 6b8:	lsl	w2, w8, #1
 6bc:	bl	948 <gz_load>
 6c0:	cmn	w0, #0x1
 6c4:	b.eq	6d4 <gz_fetch+0xb8>  // b.none
 6c8:	ldr	x8, [x19, #56]
 6cc:	mov	w0, wzr
 6d0:	str	x8, [x19, #8]
 6d4:	ldr	x19, [sp, #16]
 6d8:	ldp	x29, x30, [sp], #32
 6dc:	ret

00000000000006e0 <gzdirect>:
 6e0:	cbz	x0, 728 <gzdirect+0x48>
 6e4:	stp	x29, x30, [sp, #-32]!
 6e8:	ldr	w8, [x0, #24]
 6ec:	mov	w9, #0x1c4f                	// #7247
 6f0:	str	x19, [sp, #16]
 6f4:	mov	x19, x0
 6f8:	cmp	w8, w9
 6fc:	mov	x29, sp
 700:	b.ne	71c <gzdirect+0x3c>  // b.any
 704:	ldr	w8, [x19, #68]
 708:	cbnz	w8, 71c <gzdirect+0x3c>
 70c:	ldr	w8, [x19]
 710:	cbnz	w8, 71c <gzdirect+0x3c>
 714:	mov	x0, x19
 718:	bl	72c <gz_look>
 71c:	ldr	w0, [x19, #64]
 720:	ldr	x19, [sp, #16]
 724:	ldp	x29, x30, [sp], #32
 728:	ret

000000000000072c <gz_look>:
 72c:	stp	x29, x30, [sp, #-48]!
 730:	stp	x22, x21, [sp, #16]
 734:	stp	x20, x19, [sp, #32]
 738:	ldr	w8, [x0, #40]
 73c:	mov	x19, x0
 740:	add	x20, x0, #0x78
 744:	mov	x29, sp
 748:	cbz	w8, 7e4 <gz_look+0xb8>
 74c:	ldr	w8, [x19, #128]
 750:	cmp	w8, #0x1
 754:	b.hi	770 <gz_look+0x44>  // b.pmore
 758:	mov	x0, x19
 75c:	bl	b24 <gz_avail>
 760:	cmn	w0, #0x1
 764:	b.eq	898 <gz_look+0x16c>  // b.none
 768:	ldr	w8, [x19, #128]
 76c:	cbz	w8, 894 <gz_look+0x168>
 770:	ldr	w2, [x19, #128]
 774:	cmp	w2, #0x2
 778:	b.cc	7ac <gz_look+0x80>  // b.lo, b.ul, b.last
 77c:	ldr	x8, [x20]
 780:	ldrb	w9, [x8]
 784:	cmp	w9, #0x1f
 788:	b.ne	7ac <gz_look+0x80>  // b.any
 78c:	ldrb	w8, [x8, #1]
 790:	cmp	w8, #0x8b
 794:	b.ne	7ac <gz_look+0x80>  // b.any
 798:	mov	x0, x20
 79c:	bl	0 <inflateReset>
 7a0:	mov	w0, wzr
 7a4:	mov	x8, #0x200000000           	// #8589934592
 7a8:	b	7dc <gz_look+0xb0>
 7ac:	ldr	w8, [x19, #64]
 7b0:	cbz	w8, 87c <gz_look+0x150>
 7b4:	ldr	x0, [x19, #56]
 7b8:	str	x0, [x19, #8]
 7bc:	cbz	w2, 7d4 <gz_look+0xa8>
 7c0:	ldr	x1, [x19, #120]
 7c4:	bl	0 <memcpy>
 7c8:	ldr	w8, [x19, #128]
 7cc:	str	wzr, [x19, #128]
 7d0:	str	w8, [x19]
 7d4:	mov	w0, wzr
 7d8:	mov	x8, #0x100000001           	// #4294967297
 7dc:	str	x8, [x19, #64]
 7e0:	b	898 <gz_look+0x16c>
 7e4:	ldr	w21, [x19, #44]
 7e8:	mov	x0, x21
 7ec:	bl	0 <malloc>
 7f0:	mov	x22, x0
 7f4:	str	x0, [x19, #48]
 7f8:	lsl	w0, w21, #1
 7fc:	bl	0 <malloc>
 800:	str	x0, [x19, #56]
 804:	cbz	x22, 854 <gz_look+0x128>
 808:	cbz	x0, 854 <gz_look+0x128>
 80c:	adrp	x2, 0 <gzread>
 810:	add	x2, x2, #0x0
 814:	mov	w1, #0x1f                  	// #31
 818:	mov	w3, #0x70                  	// #112
 81c:	mov	x0, x20
 820:	str	w21, [x19, #40]
 824:	str	wzr, [x19, #128]
 828:	str	xzr, [x19, #120]
 82c:	stp	xzr, xzr, [x19, #192]
 830:	str	xzr, [x19, #184]
 834:	bl	0 <inflateInit2_>
 838:	cbz	w0, 74c <gz_look+0x20>
 83c:	ldr	x0, [x19, #56]
 840:	bl	0 <free>
 844:	ldr	x0, [x19, #48]
 848:	bl	0 <free>
 84c:	str	wzr, [x19, #40]
 850:	b	860 <gz_look+0x134>
 854:	bl	0 <free>
 858:	ldr	x0, [x19, #48]
 85c:	bl	0 <free>
 860:	adrp	x2, 0 <gzread>
 864:	add	x2, x2, #0x0
 868:	mov	w1, #0xfffffffc            	// #-4
 86c:	mov	x0, x19
 870:	bl	0 <gz_error>
 874:	mov	w0, #0xffffffff            	// #-1
 878:	b	898 <gz_look+0x16c>
 87c:	mov	w8, #0x1                   	// #1
 880:	mov	w0, wzr
 884:	str	wzr, [x19, #128]
 888:	str	w8, [x19, #80]
 88c:	str	wzr, [x19]
 890:	b	898 <gz_look+0x16c>
 894:	mov	w0, wzr
 898:	ldp	x20, x19, [sp, #32]
 89c:	ldp	x22, x21, [sp, #16]
 8a0:	ldp	x29, x30, [sp], #48
 8a4:	ret

00000000000008a8 <gzclose_r>:
 8a8:	stp	x29, x30, [sp, #-48]!
 8ac:	str	x21, [sp, #16]
 8b0:	stp	x20, x19, [sp, #32]
 8b4:	mov	x29, sp
 8b8:	cbz	x0, 934 <gzclose_r+0x8c>
 8bc:	ldr	w8, [x0, #24]
 8c0:	mov	w9, #0x1c4f                	// #7247
 8c4:	mov	x19, x0
 8c8:	cmp	w8, w9
 8cc:	b.ne	934 <gzclose_r+0x8c>  // b.any
 8d0:	ldr	w8, [x19, #40]
 8d4:	cbz	w8, 8f0 <gzclose_r+0x48>
 8d8:	add	x0, x19, #0x78
 8dc:	bl	0 <inflateEnd>
 8e0:	ldr	x0, [x19, #56]
 8e4:	bl	0 <free>
 8e8:	ldr	x0, [x19, #48]
 8ec:	bl	0 <free>
 8f0:	ldr	w8, [x19, #108]
 8f4:	mov	x0, x19
 8f8:	mov	w1, wzr
 8fc:	mov	x2, xzr
 900:	cmn	w8, #0x5
 904:	csel	w21, w8, wzr, eq  // eq = none
 908:	bl	0 <gz_error>
 90c:	ldr	x0, [x19, #32]
 910:	bl	0 <free>
 914:	ldr	w0, [x19, #28]
 918:	bl	0 <close>
 91c:	mov	w20, w0
 920:	mov	x0, x19
 924:	bl	0 <free>
 928:	cmp	w20, #0x0
 92c:	csinv	w0, w21, wzr, eq  // eq = none
 930:	b	938 <gzclose_r+0x90>
 934:	mov	w0, #0xfffffffe            	// #-2
 938:	ldp	x20, x19, [sp, #32]
 93c:	ldr	x21, [sp, #16]
 940:	ldp	x29, x30, [sp], #48
 944:	ret

0000000000000948 <gz_load>:
 948:	stp	x29, x30, [sp, #-64]!
 94c:	str	x23, [sp, #16]
 950:	stp	x22, x21, [sp, #32]
 954:	stp	x20, x19, [sp, #48]
 958:	mov	x20, x3
 95c:	mov	w21, w2
 960:	mov	x22, x1
 964:	mov	x19, x0
 968:	mov	w23, #0x40000000            	// #1073741824
 96c:	mov	x29, sp
 970:	str	wzr, [x3]
 974:	ldr	w8, [x20]
 978:	ldr	w0, [x19, #28]
 97c:	sub	w9, w21, w8
 980:	lsr	w10, w9, #30
 984:	cmp	w10, #0x0
 988:	csel	w2, w9, w23, eq  // eq = none
 98c:	add	x1, x22, x8
 990:	bl	0 <read>
 994:	cmp	w0, #0x1
 998:	b.lt	9b0 <gz_load+0x68>  // b.tstop
 99c:	ldr	w8, [x20]
 9a0:	add	w8, w8, w0
 9a4:	cmp	w8, w21
 9a8:	str	w8, [x20]
 9ac:	b.cc	974 <gz_load+0x2c>  // b.lo, b.ul, b.last
 9b0:	tbnz	w0, #31, 9c8 <gz_load+0x80>
 9b4:	mov	w20, wzr
 9b8:	cbnz	w0, 9e8 <gz_load+0xa0>
 9bc:	mov	w8, #0x1                   	// #1
 9c0:	str	w8, [x19, #80]
 9c4:	b	9e8 <gz_load+0xa0>
 9c8:	bl	0 <__errno_location>
 9cc:	ldr	w0, [x0]
 9d0:	bl	0 <strerror>
 9d4:	mov	x2, x0
 9d8:	mov	w1, #0xffffffff            	// #-1
 9dc:	mov	x0, x19
 9e0:	mov	w20, #0xffffffff            	// #-1
 9e4:	bl	0 <gz_error>
 9e8:	mov	w0, w20
 9ec:	ldp	x20, x19, [sp, #48]
 9f0:	ldp	x22, x21, [sp, #32]
 9f4:	ldr	x23, [sp, #16]
 9f8:	ldp	x29, x30, [sp], #64
 9fc:	ret

0000000000000a00 <gz_decomp>:
 a00:	stp	x29, x30, [sp, #-64]!
 a04:	stp	x22, x21, [sp, #32]
 a08:	stp	x20, x19, [sp, #48]
 a0c:	ldr	w22, [x0, #152]
 a10:	str	x23, [sp, #16]
 a14:	adrp	x23, 0 <gzread>
 a18:	mov	x19, x0
 a1c:	mov	w20, wzr
 a20:	add	x21, x0, #0x78
 a24:	add	x23, x23, #0x0
 a28:	mov	x29, sp
 a2c:	ldr	w8, [x19, #128]
 a30:	cbnz	w8, a44 <gz_decomp+0x44>
 a34:	mov	x0, x19
 a38:	bl	b24 <gz_avail>
 a3c:	cmn	w0, #0x1
 a40:	b.eq	b10 <gz_decomp+0x110>  // b.none
 a44:	ldr	w8, [x19, #128]
 a48:	cbz	w8, a8c <gz_decomp+0x8c>
 a4c:	mov	x0, x21
 a50:	mov	w1, wzr
 a54:	bl	0 <inflate>
 a58:	add	w8, w0, #0x4
 a5c:	mov	w20, w0
 a60:	cmp	w8, #0x6
 a64:	b.hi	a78 <gz_decomp+0x78>  // b.pmore
 a68:	adr	x9, a78 <gz_decomp+0x78>
 a6c:	ldrb	w10, [x23, x8]
 a70:	add	x9, x9, x10, lsl #2
 a74:	br	x9
 a78:	cmp	w20, #0x1
 a7c:	b.eq	aa0 <gz_decomp+0xa0>  // b.none
 a80:	ldr	w8, [x19, #152]
 a84:	cbnz	w8, a2c <gz_decomp+0x2c>
 a88:	b	aa0 <gz_decomp+0xa0>
 a8c:	adrp	x2, 0 <gzread>
 a90:	add	x2, x2, #0x0
 a94:	mov	w1, #0xfffffffb            	// #-5
 a98:	mov	x0, x19
 a9c:	bl	0 <gz_error>
 aa0:	ldr	w8, [x19, #152]
 aa4:	ldr	x9, [x19, #144]
 aa8:	cmp	w20, #0x1
 aac:	mov	w0, wzr
 ab0:	sub	w8, w22, w8
 ab4:	str	w8, [x19]
 ab8:	sub	x8, x9, x8
 abc:	str	x8, [x19, #8]
 ac0:	b.ne	b10 <gz_decomp+0x110>  // b.any
 ac4:	str	wzr, [x19, #68]
 ac8:	b	b10 <gz_decomp+0x110>
 acc:	adrp	x2, 0 <gzread>
 ad0:	add	x2, x2, #0x0
 ad4:	mov	w1, #0xfffffffe            	// #-2
 ad8:	b	b04 <gz_decomp+0x104>
 adc:	adrp	x2, 0 <gzread>
 ae0:	add	x2, x2, #0x0
 ae4:	mov	w1, #0xfffffffc            	// #-4
 ae8:	b	b04 <gz_decomp+0x104>
 aec:	ldr	x8, [x19, #168]
 af0:	adrp	x9, 0 <gzread>
 af4:	add	x9, x9, #0x0
 af8:	mov	w1, #0xfffffffd            	// #-3
 afc:	cmp	x8, #0x0
 b00:	csel	x2, x9, x8, eq  // eq = none
 b04:	mov	x0, x19
 b08:	bl	0 <gz_error>
 b0c:	mov	w0, #0xffffffff            	// #-1
 b10:	ldp	x20, x19, [sp, #48]
 b14:	ldp	x22, x21, [sp, #32]
 b18:	ldr	x23, [sp, #16]
 b1c:	ldp	x29, x30, [sp], #64
 b20:	ret

0000000000000b24 <gz_avail>:
 b24:	stp	x29, x30, [sp, #-32]!
 b28:	ldr	w8, [x0, #108]
 b2c:	str	x19, [sp, #16]
 b30:	mov	x19, x0
 b34:	mov	x29, sp
 b38:	cbz	w8, b44 <gz_avail+0x20>
 b3c:	cmn	w8, #0x5
 b40:	b.ne	b54 <gz_avail+0x30>  // b.any
 b44:	ldr	w8, [x19, #80]
 b48:	cbz	w8, b5c <gz_avail+0x38>
 b4c:	mov	w0, wzr
 b50:	b	bc0 <gz_avail+0x9c>
 b54:	mov	w0, #0xffffffff            	// #-1
 b58:	b	bc0 <gz_avail+0x9c>
 b5c:	ldr	w8, [x19, #128]
 b60:	cbz	w8, b7c <gz_avail+0x58>
 b64:	ldr	x9, [x19, #48]
 b68:	ldr	x10, [x19, #120]
 b6c:	ldrb	w11, [x10], #1
 b70:	subs	w8, w8, #0x1
 b74:	strb	w11, [x9], #1
 b78:	b.ne	b6c <gz_avail+0x48>  // b.any
 b7c:	ldr	x8, [x19, #48]
 b80:	ldr	w9, [x19, #128]
 b84:	ldr	w10, [x19, #40]
 b88:	add	x3, x29, #0x1c
 b8c:	mov	x0, x19
 b90:	add	x1, x8, x9
 b94:	sub	w2, w10, w9
 b98:	bl	948 <gz_load>
 b9c:	cmn	w0, #0x1
 ba0:	b.eq	bc0 <gz_avail+0x9c>  // b.none
 ba4:	ldr	w8, [x29, #28]
 ba8:	ldr	w9, [x19, #128]
 bac:	ldr	x10, [x19, #48]
 bb0:	mov	w0, wzr
 bb4:	add	w8, w9, w8
 bb8:	str	w8, [x19, #128]
 bbc:	str	x10, [x19, #120]
 bc0:	ldr	x19, [sp, #16]
 bc4:	ldp	x29, x30, [sp], #32
 bc8:	ret

gzwrite.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gzwrite>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	cbz	x0, 28 <gzwrite+0x28>
   c:	ldr	w8, [x0, #24]
  10:	mov	w9, #0x79b1                	// #31153
  14:	cmp	w8, w9
  18:	b.ne	24 <gzwrite+0x24>  // b.any
  1c:	ldr	w8, [x0, #108]
  20:	cbz	w8, 30 <gzwrite+0x30>
  24:	mov	w0, wzr
  28:	ldp	x29, x30, [sp], #16
  2c:	ret
  30:	tbnz	w2, #31, 44 <gzwrite+0x44>
  34:	mov	w2, w2
  38:	bl	58 <gz_write>
  3c:	ldp	x29, x30, [sp], #16
  40:	ret
  44:	adrp	x2, 0 <gzwrite>
  48:	add	x2, x2, #0x0
  4c:	mov	w1, #0xfffffffd            	// #-3
  50:	bl	0 <gz_error>
  54:	b	24 <gzwrite+0x24>

0000000000000058 <gz_write>:
  58:	stp	x29, x30, [sp, #-64]!
  5c:	stp	x20, x19, [sp, #48]
  60:	mov	x19, x2
  64:	str	x23, [sp, #16]
  68:	stp	x22, x21, [sp, #32]
  6c:	mov	x29, sp
  70:	cbz	x2, 1ac <gz_write+0x154>
  74:	ldr	w8, [x0, #40]
  78:	mov	x21, x1
  7c:	mov	x20, x0
  80:	cbnz	w8, 94 <gz_write+0x3c>
  84:	mov	x0, x20
  88:	bl	5a4 <gz_init>
  8c:	cmn	w0, #0x1
  90:	b.eq	1a8 <gz_write+0x150>  // b.none
  94:	ldr	w8, [x20, #104]
  98:	cbz	w8, b4 <gz_write+0x5c>
  9c:	ldr	x1, [x20, #96]
  a0:	mov	x0, x20
  a4:	str	wzr, [x20, #104]
  a8:	bl	328 <gz_zero>
  ac:	cmn	w0, #0x1
  b0:	b.eq	1a8 <gz_write+0x150>  // b.none
  b4:	ldr	w8, [x20, #40]
  b8:	cmp	x8, x19
  bc:	b.ls	140 <gz_write+0xe8>  // b.plast
  c0:	mov	x23, x19
  c4:	ldr	w8, [x20, #128]
  c8:	cbnz	w8, d4 <gz_write+0x7c>
  cc:	ldr	x9, [x20, #48]
  d0:	str	x9, [x20, #120]
  d4:	ldr	x9, [x20, #120]
  d8:	ldr	x10, [x20, #48]
  dc:	ldr	w11, [x20, #40]
  e0:	mov	x1, x21
  e4:	add	x8, x9, x8
  e8:	sub	x8, x8, x10
  ec:	sub	w9, w11, w8
  f0:	cmp	x23, x9
  f4:	csel	w22, w23, w9, cc  // cc = lo, ul, last
  f8:	add	x0, x10, w8, uxtw
  fc:	mov	x2, x22
 100:	bl	0 <memcpy>
 104:	ldr	w8, [x20, #128]
 108:	ldr	x9, [x20, #16]
 10c:	subs	x23, x23, x22
 110:	add	w8, w22, w8
 114:	add	x9, x9, x22
 118:	str	w8, [x20, #128]
 11c:	str	x9, [x20, #16]
 120:	b.eq	1ac <gz_write+0x154>  // b.none
 124:	mov	x0, x20
 128:	mov	w1, wzr
 12c:	add	x21, x21, x22
 130:	bl	68c <gz_comp>
 134:	cmn	w0, #0x1
 138:	b.ne	c4 <gz_write+0x6c>  // b.any
 13c:	b	1a8 <gz_write+0x150>
 140:	ldr	w8, [x20, #128]
 144:	cbz	w8, 15c <gz_write+0x104>
 148:	mov	x0, x20
 14c:	mov	w1, wzr
 150:	bl	68c <gz_comp>
 154:	cmn	w0, #0x1
 158:	b.eq	1a8 <gz_write+0x150>  // b.none
 15c:	str	x21, [x20, #120]
 160:	mov	w21, #0xffffffff            	// #-1
 164:	mov	x22, x19
 168:	ldr	x8, [x20, #16]
 16c:	cmp	x22, x21
 170:	csel	x23, x22, x21, cc  // cc = lo, ul, last
 174:	mov	x0, x20
 178:	add	x8, x8, x23
 17c:	mov	w1, wzr
 180:	str	w23, [x20, #128]
 184:	str	x8, [x20, #16]
 188:	bl	68c <gz_comp>
 18c:	cmn	w0, #0x1
 190:	csel	x8, xzr, x23, eq  // eq = none
 194:	cmn	w0, #0x1
 198:	b.eq	1a8 <gz_write+0x150>  // b.none
 19c:	sub	x22, x22, x8
 1a0:	cbnz	x22, 168 <gz_write+0x110>
 1a4:	b	1ac <gz_write+0x154>
 1a8:	mov	x19, xzr
 1ac:	mov	x0, x19
 1b0:	ldp	x20, x19, [sp, #48]
 1b4:	ldp	x22, x21, [sp, #32]
 1b8:	ldr	x23, [sp, #16]
 1bc:	ldp	x29, x30, [sp], #64
 1c0:	ret

00000000000001c4 <gzfwrite>:
 1c4:	stp	x29, x30, [sp, #-32]!
 1c8:	str	x19, [sp, #16]
 1cc:	mov	x29, sp
 1d0:	cbz	x3, 1ec <gzfwrite+0x28>
 1d4:	ldr	w8, [x3, #24]
 1d8:	mov	w9, #0x79b1                	// #31153
 1dc:	cmp	w8, w9
 1e0:	b.ne	1ec <gzfwrite+0x28>  // b.any
 1e4:	ldr	w8, [x3, #108]
 1e8:	cbz	w8, 1fc <gzfwrite+0x38>
 1ec:	mov	x0, xzr
 1f0:	ldr	x19, [sp, #16]
 1f4:	ldp	x29, x30, [sp], #32
 1f8:	ret
 1fc:	mov	x19, x1
 200:	umulh	x8, x19, x2
 204:	cmp	xzr, x8
 208:	mov	x1, x0
 20c:	cset	w8, ne  // ne = any
 210:	cbz	x19, 230 <gzfwrite+0x6c>
 214:	cbz	w8, 230 <gzfwrite+0x6c>
 218:	adrp	x2, 0 <gzwrite>
 21c:	add	x2, x2, #0x0
 220:	mov	w1, #0xfffffffe            	// #-2
 224:	mov	x0, x3
 228:	bl	0 <gz_error>
 22c:	b	1ec <gzfwrite+0x28>
 230:	mul	x2, x19, x2
 234:	cbz	x2, 1ec <gzfwrite+0x28>
 238:	mov	x0, x3
 23c:	bl	58 <gz_write>
 240:	udiv	x0, x0, x19
 244:	b	1f0 <gzfwrite+0x2c>

0000000000000248 <gzputc>:
 248:	sub	sp, sp, #0x30
 24c:	stp	x29, x30, [sp, #16]
 250:	stp	x20, x19, [sp, #32]
 254:	add	x29, sp, #0x10
 258:	cbz	x0, 278 <gzputc+0x30>
 25c:	ldr	w8, [x0, #24]
 260:	mov	w9, #0x79b1                	// #31153
 264:	mov	x20, x0
 268:	cmp	w8, w9
 26c:	b.ne	278 <gzputc+0x30>  // b.any
 270:	ldr	w8, [x20, #108]
 274:	cbz	w8, 28c <gzputc+0x44>
 278:	mov	w0, #0xffffffff            	// #-1
 27c:	ldp	x20, x19, [sp, #32]
 280:	ldp	x29, x30, [sp, #16]
 284:	add	sp, sp, #0x30
 288:	ret
 28c:	ldr	w8, [x20, #104]
 290:	mov	w19, w1
 294:	cbz	w8, 2b0 <gzputc+0x68>
 298:	ldr	x1, [x20, #96]
 29c:	mov	x0, x20
 2a0:	str	wzr, [x20, #104]
 2a4:	bl	328 <gz_zero>
 2a8:	cmn	w0, #0x1
 2ac:	b.eq	27c <gzputc+0x34>  // b.none
 2b0:	ldr	w8, [x20, #40]
 2b4:	cbz	w8, 304 <gzputc+0xbc>
 2b8:	ldr	w9, [x20, #128]
 2bc:	cbnz	w9, 2c8 <gzputc+0x80>
 2c0:	ldr	x10, [x20, #48]
 2c4:	str	x10, [x20, #120]
 2c8:	ldr	x11, [x20, #120]
 2cc:	ldr	x10, [x20, #48]
 2d0:	add	x9, x11, x9
 2d4:	sub	x9, x9, x10
 2d8:	cmp	w8, w9
 2dc:	b.ls	304 <gzputc+0xbc>  // b.plast
 2e0:	strb	w19, [x10, w9, uxtw]
 2e4:	ldr	w8, [x20, #128]
 2e8:	ldr	x9, [x20, #16]
 2ec:	and	w0, w19, #0xff
 2f0:	add	w8, w8, #0x1
 2f4:	add	x9, x9, #0x1
 2f8:	str	w8, [x20, #128]
 2fc:	str	x9, [x20, #16]
 300:	b	27c <gzputc+0x34>
 304:	sub	x1, x29, #0x4
 308:	mov	w2, #0x1                   	// #1
 30c:	mov	x0, x20
 310:	sturb	w19, [x29, #-4]
 314:	bl	58 <gz_write>
 318:	and	w8, w19, #0xff
 31c:	cmp	x0, #0x1
 320:	csinv	w0, w8, wzr, eq  // eq = none
 324:	b	27c <gzputc+0x34>

0000000000000328 <gz_zero>:
 328:	stp	x29, x30, [sp, #-48]!
 32c:	stp	x22, x21, [sp, #16]
 330:	stp	x20, x19, [sp, #32]
 334:	ldr	w8, [x0, #128]
 338:	mov	x19, x0
 33c:	mov	x20, x1
 340:	mov	x29, sp
 344:	cbz	w8, 35c <gz_zero+0x34>
 348:	mov	x0, x19
 34c:	mov	w1, wzr
 350:	bl	68c <gz_comp>
 354:	cmn	w0, #0x1
 358:	b.eq	3c4 <gz_zero+0x9c>  // b.none
 35c:	cbz	x20, 3c0 <gz_zero+0x98>
 360:	mov	w21, #0x1                   	// #1
 364:	ldr	w8, [x19, #40]
 368:	cmp	x20, x8
 36c:	csel	w22, w20, w8, lt  // lt = tstop
 370:	cbz	w21, 388 <gz_zero+0x60>
 374:	ldr	x0, [x19, #48]
 378:	mov	w2, w22
 37c:	mov	w1, wzr
 380:	bl	0 <memset>
 384:	mov	w21, wzr
 388:	ldr	x8, [x19, #48]
 38c:	ldr	x9, [x19, #16]
 390:	str	w22, [x19, #128]
 394:	mov	w22, w22
 398:	str	x8, [x19, #120]
 39c:	add	x8, x9, x22
 3a0:	mov	x0, x19
 3a4:	mov	w1, wzr
 3a8:	str	x8, [x19, #16]
 3ac:	bl	68c <gz_comp>
 3b0:	cmn	w0, #0x1
 3b4:	b.eq	3c4 <gz_zero+0x9c>  // b.none
 3b8:	sub	x20, x20, x22
 3bc:	cbnz	x20, 364 <gz_zero+0x3c>
 3c0:	mov	w0, wzr
 3c4:	ldp	x20, x19, [sp, #32]
 3c8:	ldp	x22, x21, [sp, #16]
 3cc:	ldp	x29, x30, [sp], #48
 3d0:	ret

00000000000003d4 <gzputs>:
 3d4:	stp	x29, x30, [sp, #-48]!
 3d8:	str	x21, [sp, #16]
 3dc:	stp	x20, x19, [sp, #32]
 3e0:	mov	x29, sp
 3e4:	cbz	x0, 404 <gzputs+0x30>
 3e8:	ldr	w8, [x0, #24]
 3ec:	mov	w9, #0x79b1                	// #31153
 3f0:	mov	x20, x0
 3f4:	cmp	w8, w9
 3f8:	b.ne	404 <gzputs+0x30>  // b.any
 3fc:	ldr	w8, [x20, #108]
 400:	cbz	w8, 418 <gzputs+0x44>
 404:	mov	w0, #0xffffffff            	// #-1
 408:	ldp	x20, x19, [sp, #32]
 40c:	ldr	x21, [sp, #16]
 410:	ldp	x29, x30, [sp], #48
 414:	ret
 418:	mov	x0, x1
 41c:	mov	x19, x1
 420:	bl	0 <strlen>
 424:	mov	x21, x0
 428:	mov	x0, x20
 42c:	mov	x1, x19
 430:	mov	x2, x21
 434:	bl	58 <gz_write>
 438:	cmp	w0, #0x0
 43c:	ccmp	x21, #0x0, #0x4, eq  // eq = none
 440:	csinv	w0, w0, wzr, eq  // eq = none
 444:	b	408 <gzputs+0x34>

0000000000000448 <gzvprintf>:
 448:	sub	sp, sp, #0x50
 44c:	stp	x29, x30, [sp, #32]
 450:	stp	x22, x21, [sp, #48]
 454:	stp	x20, x19, [sp, #64]
 458:	add	x29, sp, #0x20
 45c:	cbz	x0, 47c <gzvprintf+0x34>
 460:	ldr	w8, [x0, #24]
 464:	mov	w9, #0x79b1                	// #31153
 468:	mov	x19, x0
 46c:	cmp	w8, w9
 470:	b.ne	47c <gzvprintf+0x34>  // b.any
 474:	ldr	w8, [x19, #108]
 478:	cbz	w8, 498 <gzvprintf+0x50>
 47c:	mov	w20, #0xfffffffe            	// #-2
 480:	mov	w0, w20
 484:	ldp	x20, x19, [sp, #64]
 488:	ldp	x22, x21, [sp, #48]
 48c:	ldp	x29, x30, [sp, #32]
 490:	add	sp, sp, #0x50
 494:	ret
 498:	ldr	w8, [x19, #40]
 49c:	mov	x21, x2
 4a0:	mov	x20, x1
 4a4:	cbnz	w8, 4b8 <gzvprintf+0x70>
 4a8:	mov	x0, x19
 4ac:	bl	5a4 <gz_init>
 4b0:	cmn	w0, #0x1
 4b4:	b.eq	59c <gzvprintf+0x154>  // b.none
 4b8:	ldr	w8, [x19, #104]
 4bc:	cbz	w8, 4d8 <gzvprintf+0x90>
 4c0:	ldr	x1, [x19, #96]
 4c4:	mov	x0, x19
 4c8:	str	wzr, [x19, #104]
 4cc:	bl	328 <gz_zero>
 4d0:	cmn	w0, #0x1
 4d4:	b.eq	59c <gzvprintf+0x154>  // b.none
 4d8:	ldr	w8, [x19, #128]
 4dc:	cbnz	w8, 4e8 <gzvprintf+0xa0>
 4e0:	ldr	x9, [x19, #48]
 4e4:	str	x9, [x19, #120]
 4e8:	ldr	x9, [x19, #120]
 4ec:	ldr	w10, [x19, #40]
 4f0:	mov	x3, sp
 4f4:	mov	x2, x20
 4f8:	add	x22, x9, x8
 4fc:	sub	w8, w10, #0x1
 500:	strb	wzr, [x22, w8, uxtw]
 504:	ldp	q1, q0, [x21]
 508:	ldr	w1, [x19, #40]
 50c:	mov	x0, x22
 510:	stp	q1, q0, [sp]
 514:	bl	0 <vsnprintf>
 518:	mov	w20, w0
 51c:	cbz	w0, 480 <gzvprintf+0x38>
 520:	ldr	w8, [x19, #40]
 524:	cmp	w20, w8
 528:	b.cs	538 <gzvprintf+0xf0>  // b.hs, b.nlast
 52c:	sub	w9, w8, #0x1
 530:	ldrb	w9, [x22, w9, uxtw]
 534:	cbz	w9, 540 <gzvprintf+0xf8>
 538:	mov	w20, wzr
 53c:	b	480 <gzvprintf+0x38>
 540:	ldr	w9, [x19, #128]
 544:	ldr	x10, [x19, #16]
 548:	add	w9, w9, w20
 54c:	add	x10, x10, w20, sxtw
 550:	subs	w21, w9, w8
 554:	str	w9, [x19, #128]
 558:	str	x10, [x19, #16]
 55c:	b.cc	480 <gzvprintf+0x38>  // b.lo, b.ul, b.last
 560:	mov	x0, x19
 564:	mov	w1, wzr
 568:	str	w8, [x19, #128]
 56c:	bl	68c <gz_comp>
 570:	cmn	w0, #0x1
 574:	b.eq	59c <gzvprintf+0x154>  // b.none
 578:	ldr	x0, [x19, #48]
 57c:	ldr	w8, [x19, #40]
 580:	mov	w2, w21
 584:	add	x1, x0, x8
 588:	bl	0 <memcpy>
 58c:	ldr	x8, [x19, #48]
 590:	str	w21, [x19, #128]
 594:	str	x8, [x19, #120]
 598:	b	480 <gzvprintf+0x38>
 59c:	ldr	w20, [x19, #108]
 5a0:	b	480 <gzvprintf+0x38>

00000000000005a4 <gz_init>:
 5a4:	stp	x29, x30, [sp, #-48]!
 5a8:	stp	x20, x19, [sp, #32]
 5ac:	str	x21, [sp, #16]
 5b0:	ldr	w21, [x0, #44]
 5b4:	mov	x19, x0
 5b8:	mov	x29, sp
 5bc:	lsl	w0, w21, #1
 5c0:	bl	0 <malloc>
 5c4:	str	x0, [x19, #48]
 5c8:	cbz	x0, 65c <gz_init+0xb8>
 5cc:	ldr	w8, [x19, #64]
 5d0:	cbz	w8, 5fc <gz_init+0x58>
 5d4:	ldr	w8, [x19, #44]
 5d8:	ldr	w9, [x19, #64]
 5dc:	mov	w0, wzr
 5e0:	str	w8, [x19, #40]
 5e4:	cbnz	w9, 674 <gz_init+0xd0>
 5e8:	ldr	x9, [x19, #56]
 5ec:	str	w8, [x19, #152]
 5f0:	str	x9, [x19, #144]
 5f4:	str	x9, [x19, #8]
 5f8:	b	674 <gz_init+0xd0>
 5fc:	mov	x20, x0
 600:	mov	x0, x21
 604:	bl	0 <malloc>
 608:	str	x0, [x19, #56]
 60c:	cbz	x0, 654 <gz_init+0xb0>
 610:	ldp	w1, w5, [x19, #88]
 614:	add	x20, x19, #0x78
 618:	adrp	x6, 0 <gzwrite>
 61c:	add	x6, x6, #0x0
 620:	mov	w2, #0x8                   	// #8
 624:	mov	w3, #0x1f                  	// #31
 628:	mov	w4, #0x8                   	// #8
 62c:	mov	w7, #0x70                  	// #112
 630:	mov	x0, x20
 634:	stp	xzr, xzr, [x19, #184]
 638:	str	xzr, [x19, #200]
 63c:	bl	0 <deflateInit2_>
 640:	cbz	w0, 684 <gz_init+0xe0>
 644:	ldr	x0, [x19, #56]
 648:	bl	0 <free>
 64c:	ldr	x0, [x19, #48]
 650:	b	658 <gz_init+0xb4>
 654:	mov	x0, x20
 658:	bl	0 <free>
 65c:	adrp	x2, 0 <gzwrite>
 660:	add	x2, x2, #0x0
 664:	mov	w1, #0xfffffffc            	// #-4
 668:	mov	x0, x19
 66c:	bl	0 <gz_error>
 670:	mov	w0, #0xffffffff            	// #-1
 674:	ldp	x20, x19, [sp, #32]
 678:	ldr	x21, [sp, #16]
 67c:	ldp	x29, x30, [sp], #48
 680:	ret
 684:	str	xzr, [x20]
 688:	b	5d4 <gz_init+0x30>

000000000000068c <gz_comp>:
 68c:	stp	x29, x30, [sp, #-64]!
 690:	stp	x22, x21, [sp, #32]
 694:	stp	x20, x19, [sp, #48]
 698:	ldr	w8, [x0, #40]
 69c:	mov	x19, x0
 6a0:	mov	w20, w1
 6a4:	str	x23, [sp, #16]
 6a8:	mov	x29, sp
 6ac:	cbnz	w8, 6c0 <gz_comp+0x34>
 6b0:	mov	x0, x19
 6b4:	bl	5a4 <gz_init>
 6b8:	cmn	w0, #0x1
 6bc:	b.eq	814 <gz_comp+0x188>  // b.none
 6c0:	ldr	w8, [x19, #64]
 6c4:	cbz	w8, 714 <gz_comp+0x88>
 6c8:	ldr	w8, [x19, #128]
 6cc:	cbz	w8, 70c <gz_comp+0x80>
 6d0:	mov	w20, #0x40000000            	// #1073741824
 6d4:	ldr	w0, [x19, #28]
 6d8:	ldr	x1, [x19, #120]
 6dc:	lsr	w9, w8, #30
 6e0:	cmp	w9, #0x0
 6e4:	csel	w2, w8, w20, eq  // eq = none
 6e8:	bl	0 <write>
 6ec:	tbnz	w0, #31, 7dc <gz_comp+0x150>
 6f0:	ldr	w8, [x19, #128]
 6f4:	ldr	x9, [x19, #120]
 6f8:	subs	w8, w8, w0
 6fc:	add	x9, x9, w0, sxtw
 700:	str	w8, [x19, #128]
 704:	str	x9, [x19, #120]
 708:	b.ne	6d4 <gz_comp+0x48>  // b.any
 70c:	mov	w20, wzr
 710:	b	818 <gz_comp+0x18c>
 714:	mov	w0, wzr
 718:	add	x21, x19, #0x78
 71c:	mov	w22, #0x40000000            	// #1073741824
 720:	ldr	w8, [x19, #152]
 724:	cbz	w8, 744 <gz_comp+0xb8>
 728:	cmp	w20, #0x4
 72c:	cset	w8, ne  // ne = any
 730:	cmp	w0, #0x1
 734:	cset	w9, eq  // eq = none
 738:	cbz	w20, 7a4 <gz_comp+0x118>
 73c:	orr	w8, w8, w9
 740:	cbz	w8, 7a4 <gz_comp+0x118>
 744:	ldr	x8, [x19, #144]
 748:	ldr	x1, [x19, #8]
 74c:	cmp	x8, x1
 750:	b.ls	788 <gz_comp+0xfc>  // b.plast
 754:	sub	x8, x8, x1
 758:	ldr	w0, [x19, #28]
 75c:	cmp	x8, x22
 760:	csel	x8, x8, x22, lt  // lt = tstop
 764:	and	x2, x8, #0xffffffff
 768:	bl	0 <write>
 76c:	tbnz	w0, #31, 7dc <gz_comp+0x150>
 770:	ldr	x9, [x19, #8]
 774:	ldr	x8, [x19, #144]
 778:	add	x1, x9, w0, sxtw
 77c:	cmp	x8, x1
 780:	str	x1, [x19, #8]
 784:	b.hi	754 <gz_comp+0xc8>  // b.pmore
 788:	ldr	w8, [x19, #152]
 78c:	cbnz	w8, 7a4 <gz_comp+0x118>
 790:	ldr	w8, [x19, #40]
 794:	ldr	x9, [x19, #56]
 798:	str	w8, [x19, #152]
 79c:	str	x9, [x19, #144]
 7a0:	str	x9, [x19, #8]
 7a4:	ldr	w23, [x19, #152]
 7a8:	mov	x0, x21
 7ac:	mov	w1, w20
 7b0:	bl	0 <deflate>
 7b4:	cmn	w0, #0x2
 7b8:	b.eq	800 <gz_comp+0x174>  // b.none
 7bc:	ldr	w8, [x19, #152]
 7c0:	cmp	w23, w8
 7c4:	b.ne	720 <gz_comp+0x94>  // b.any
 7c8:	cmp	w20, #0x4
 7cc:	b.ne	70c <gz_comp+0x80>  // b.any
 7d0:	mov	x0, x21
 7d4:	bl	0 <deflateReset>
 7d8:	b	70c <gz_comp+0x80>
 7dc:	bl	0 <__errno_location>
 7e0:	ldr	w0, [x0]
 7e4:	bl	0 <strerror>
 7e8:	mov	x2, x0
 7ec:	mov	w1, #0xffffffff            	// #-1
 7f0:	mov	x0, x19
 7f4:	mov	w20, #0xffffffff            	// #-1
 7f8:	bl	0 <gz_error>
 7fc:	b	818 <gz_comp+0x18c>
 800:	adrp	x2, 0 <gzwrite>
 804:	add	x2, x2, #0x0
 808:	mov	w1, #0xfffffffe            	// #-2
 80c:	mov	x0, x19
 810:	bl	0 <gz_error>
 814:	mov	w20, #0xffffffff            	// #-1
 818:	mov	w0, w20
 81c:	ldp	x20, x19, [sp, #48]
 820:	ldp	x22, x21, [sp, #32]
 824:	ldr	x23, [sp, #16]
 828:	ldp	x29, x30, [sp], #64
 82c:	ret

0000000000000830 <gzprintf>:
 830:	sub	sp, sp, #0x100
 834:	stp	x29, x30, [sp, #240]
 838:	add	x29, sp, #0xf0
 83c:	mov	x8, #0xffffffffffffffd0    	// #-48
 840:	mov	x9, sp
 844:	sub	x10, x29, #0x70
 848:	movk	x8, #0xff80, lsl #32
 84c:	add	x11, x29, #0x10
 850:	add	x9, x9, #0x80
 854:	add	x10, x10, #0x30
 858:	stp	x9, x8, [x29, #-16]
 85c:	stp	x11, x10, [x29, #-32]
 860:	stp	x2, x3, [x29, #-112]
 864:	stp	x4, x5, [x29, #-96]
 868:	stp	x6, x7, [x29, #-80]
 86c:	stp	q1, q2, [sp, #16]
 870:	str	q0, [sp]
 874:	ldp	q0, q1, [x29, #-32]
 878:	sub	x2, x29, #0x40
 87c:	stp	q3, q4, [sp, #48]
 880:	stp	q5, q6, [sp, #80]
 884:	str	q7, [sp, #112]
 888:	stp	q0, q1, [x29, #-64]
 88c:	bl	448 <gzvprintf>
 890:	ldp	x29, x30, [sp, #240]
 894:	add	sp, sp, #0x100
 898:	ret

000000000000089c <gzflush>:
 89c:	stp	x29, x30, [sp, #-32]!
 8a0:	stp	x20, x19, [sp, #16]
 8a4:	mov	x29, sp
 8a8:	cbz	x0, 90c <gzflush+0x70>
 8ac:	ldr	w8, [x0, #24]
 8b0:	mov	w9, #0x79b1                	// #31153
 8b4:	mov	x19, x0
 8b8:	cmp	w8, w9
 8bc:	b.ne	90c <gzflush+0x70>  // b.any
 8c0:	mov	w20, w1
 8c4:	cmp	w1, #0x4
 8c8:	mov	w0, #0xfffffffe            	// #-2
 8cc:	b.hi	910 <gzflush+0x74>  // b.pmore
 8d0:	ldr	w8, [x19, #108]
 8d4:	cbnz	w8, 910 <gzflush+0x74>
 8d8:	ldr	w8, [x19, #104]
 8dc:	cbz	w8, 8f8 <gzflush+0x5c>
 8e0:	ldr	x1, [x19, #96]
 8e4:	mov	x0, x19
 8e8:	str	wzr, [x19, #104]
 8ec:	bl	328 <gz_zero>
 8f0:	cmn	w0, #0x1
 8f4:	b.eq	904 <gzflush+0x68>  // b.none
 8f8:	mov	x0, x19
 8fc:	mov	w1, w20
 900:	bl	68c <gz_comp>
 904:	ldr	w0, [x19, #108]
 908:	b	910 <gzflush+0x74>
 90c:	mov	w0, #0xfffffffe            	// #-2
 910:	ldp	x20, x19, [sp, #16]
 914:	ldp	x29, x30, [sp], #32
 918:	ret

000000000000091c <gzsetparams>:
 91c:	stp	x29, x30, [sp, #-48]!
 920:	str	x21, [sp, #16]
 924:	stp	x20, x19, [sp, #32]
 928:	mov	x29, sp
 92c:	cbz	x0, 94c <gzsetparams+0x30>
 930:	ldr	w8, [x0, #24]
 934:	mov	w9, #0x79b1                	// #31153
 938:	mov	x19, x0
 93c:	cmp	w8, w9
 940:	b.ne	94c <gzsetparams+0x30>  // b.any
 944:	ldr	w8, [x19, #108]
 948:	cbz	w8, 960 <gzsetparams+0x44>
 94c:	mov	w0, #0xfffffffe            	// #-2
 950:	ldp	x20, x19, [sp, #32]
 954:	ldr	x21, [sp, #16]
 958:	ldp	x29, x30, [sp], #48
 95c:	ret
 960:	ldr	w8, [x19, #88]
 964:	mov	w20, w2
 968:	mov	w21, w1
 96c:	cmp	w8, w1
 970:	b.ne	988 <gzsetparams+0x6c>  // b.any
 974:	ldr	w8, [x19, #92]
 978:	cmp	w8, w20
 97c:	b.ne	988 <gzsetparams+0x6c>  // b.any
 980:	mov	w0, wzr
 984:	b	950 <gzsetparams+0x34>
 988:	ldr	w8, [x19, #104]
 98c:	cbz	w8, 9a8 <gzsetparams+0x8c>
 990:	ldr	x1, [x19, #96]
 994:	mov	x0, x19
 998:	str	wzr, [x19, #104]
 99c:	bl	328 <gz_zero>
 9a0:	cmn	w0, #0x1
 9a4:	b.eq	9e8 <gzsetparams+0xcc>  // b.none
 9a8:	ldr	w8, [x19, #40]
 9ac:	cbz	w8, 9dc <gzsetparams+0xc0>
 9b0:	ldr	w8, [x19, #128]
 9b4:	cbz	w8, 9cc <gzsetparams+0xb0>
 9b8:	mov	w1, #0x5                   	// #5
 9bc:	mov	x0, x19
 9c0:	bl	68c <gz_comp>
 9c4:	cmn	w0, #0x1
 9c8:	b.eq	9e8 <gzsetparams+0xcc>  // b.none
 9cc:	add	x0, x19, #0x78
 9d0:	mov	w1, w21
 9d4:	mov	w2, w20
 9d8:	bl	0 <deflateParams>
 9dc:	mov	w0, wzr
 9e0:	stp	w21, w20, [x19, #88]
 9e4:	b	950 <gzsetparams+0x34>
 9e8:	ldr	w0, [x19, #108]
 9ec:	b	950 <gzsetparams+0x34>

00000000000009f0 <gzclose_w>:
 9f0:	stp	x29, x30, [sp, #-32]!
 9f4:	stp	x20, x19, [sp, #16]
 9f8:	mov	x29, sp
 9fc:	cbz	x0, a40 <gzclose_w+0x50>
 a00:	ldr	w8, [x0, #24]
 a04:	mov	w9, #0x79b1                	// #31153
 a08:	mov	x19, x0
 a0c:	cmp	w8, w9
 a10:	b.ne	a40 <gzclose_w+0x50>  // b.any
 a14:	ldr	w8, [x19, #104]
 a18:	cbz	w8, a48 <gzclose_w+0x58>
 a1c:	ldr	x1, [x19, #96]
 a20:	mov	x0, x19
 a24:	str	wzr, [x19, #104]
 a28:	bl	328 <gz_zero>
 a2c:	cmn	w0, #0x1
 a30:	mov	w20, wzr
 a34:	b.ne	a4c <gzclose_w+0x5c>  // b.any
 a38:	ldr	w20, [x19, #108]
 a3c:	b	a4c <gzclose_w+0x5c>
 a40:	mov	w20, #0xfffffffe            	// #-2
 a44:	b	abc <gzclose_w+0xcc>
 a48:	mov	w20, wzr
 a4c:	mov	w1, #0x4                   	// #4
 a50:	mov	x0, x19
 a54:	bl	68c <gz_comp>
 a58:	cmn	w0, #0x1
 a5c:	b.ne	a64 <gzclose_w+0x74>  // b.any
 a60:	ldr	w20, [x19, #108]
 a64:	ldr	w8, [x19, #40]
 a68:	cbz	w8, a8c <gzclose_w+0x9c>
 a6c:	ldr	w8, [x19, #64]
 a70:	cbnz	w8, a84 <gzclose_w+0x94>
 a74:	add	x0, x19, #0x78
 a78:	bl	0 <deflateEnd>
 a7c:	ldr	x0, [x19, #56]
 a80:	bl	0 <free>
 a84:	ldr	x0, [x19, #48]
 a88:	bl	0 <free>
 a8c:	mov	x0, x19
 a90:	mov	w1, wzr
 a94:	mov	x2, xzr
 a98:	bl	0 <gz_error>
 a9c:	ldr	x0, [x19, #32]
 aa0:	bl	0 <free>
 aa4:	ldr	w0, [x19, #28]
 aa8:	bl	0 <close>
 aac:	cmn	w0, #0x1
 ab0:	mov	x0, x19
 ab4:	csinv	w20, w20, wzr, ne  // ne = any
 ab8:	bl	0 <free>
 abc:	mov	w0, w20
 ac0:	ldp	x20, x19, [sp, #16]
 ac4:	ldp	x29, x30, [sp], #32
 ac8:	ret
