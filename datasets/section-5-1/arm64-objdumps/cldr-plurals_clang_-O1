
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//cldr-plurals_clang_-O1:     file format elf64-littleaarch64


Disassembly of section .init:

00000000004012b0 <_init>:
  4012b0:	stp	x29, x30, [sp, #-16]!
  4012b4:	mov	x29, sp
  4012b8:	bl	401670 <call_weak_fn>
  4012bc:	ldp	x29, x30, [sp], #16
  4012c0:	ret

Disassembly of section .plt:

00000000004012d0 <.plt>:
  4012d0:	stp	x16, x30, [sp, #-16]!
  4012d4:	adrp	x16, 414000 <__FRAME_END__+0xf50c>
  4012d8:	ldr	x17, [x16, #4088]
  4012dc:	add	x16, x16, #0xff8
  4012e0:	br	x17
  4012e4:	nop
  4012e8:	nop
  4012ec:	nop

00000000004012f0 <memcpy@plt>:
  4012f0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4012f4:	ldr	x17, [x16]
  4012f8:	add	x16, x16, #0x0
  4012fc:	br	x17

0000000000401300 <strlen@plt>:
  401300:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401304:	ldr	x17, [x16, #8]
  401308:	add	x16, x16, #0x8
  40130c:	br	x17

0000000000401310 <exit@plt>:
  401310:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401314:	ldr	x17, [x16, #16]
  401318:	add	x16, x16, #0x10
  40131c:	br	x17

0000000000401320 <error@plt>:
  401320:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401324:	ldr	x17, [x16, #24]
  401328:	add	x16, x16, #0x18
  40132c:	br	x17

0000000000401330 <set_program_name@plt>:
  401330:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401334:	ldr	x17, [x16, #32]
  401338:	add	x16, x16, #0x20
  40133c:	br	x17

0000000000401340 <xmlHasProp@plt>:
  401340:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401344:	ldr	x17, [x16, #40]
  401348:	add	x16, x16, #0x28
  40134c:	br	x17

0000000000401350 <sprintf@plt>:
  401350:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401354:	ldr	x17, [x16, #48]
  401358:	add	x16, x16, #0x30
  40135c:	br	x17

0000000000401360 <xmlFreeDoc@plt>:
  401360:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401364:	ldr	x17, [x16, #56]
  401368:	add	x16, x16, #0x38
  40136c:	br	x17

0000000000401370 <__cxa_atexit@plt>:
  401370:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401374:	ldr	x17, [x16, #64]
  401378:	add	x16, x16, #0x40
  40137c:	br	x17

0000000000401380 <fputc@plt>:
  401380:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401384:	ldr	x17, [x16, #72]
  401388:	add	x16, x16, #0x48
  40138c:	br	x17

0000000000401390 <fileno@plt>:
  401390:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401394:	ldr	x17, [x16, #80]
  401398:	add	x16, x16, #0x50
  40139c:	br	x17

00000000004013a0 <fclose@plt>:
  4013a0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4013a4:	ldr	x17, [x16, #88]
  4013a8:	add	x16, x16, #0x58
  4013ac:	br	x17

00000000004013b0 <fopen@plt>:
  4013b0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4013b4:	ldr	x17, [x16, #96]
  4013b8:	add	x16, x16, #0x60
  4013bc:	br	x17

00000000004013c0 <malloc@plt>:
  4013c0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4013c4:	ldr	x17, [x16, #104]
  4013c8:	add	x16, x16, #0x68
  4013cc:	br	x17

00000000004013d0 <xrealloc@plt>:
  4013d0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4013d4:	ldr	x17, [x16, #112]
  4013d8:	add	x16, x16, #0x70
  4013dc:	br	x17

00000000004013e0 <xmlGetProp@plt>:
  4013e0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4013e4:	ldr	x17, [x16, #120]
  4013e8:	add	x16, x16, #0x78
  4013ec:	br	x17

00000000004013f0 <xmlCheckVersion@plt>:
  4013f0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4013f4:	ldr	x17, [x16, #128]
  4013f8:	add	x16, x16, #0x80
  4013fc:	br	x17

0000000000401400 <strncmp@plt>:
  401400:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401404:	ldr	x17, [x16, #136]
  401408:	add	x16, x16, #0x88
  40140c:	br	x17

0000000000401410 <bindtextdomain@plt>:
  401410:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401414:	ldr	x17, [x16, #144]
  401418:	add	x16, x16, #0x90
  40141c:	br	x17

0000000000401420 <__libc_start_main@plt>:
  401420:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401424:	ldr	x17, [x16, #152]
  401428:	add	x16, x16, #0x98
  40142c:	br	x17

0000000000401430 <memset@plt>:
  401430:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401434:	ldr	x17, [x16, #160]
  401438:	add	x16, x16, #0xa0
  40143c:	br	x17

0000000000401440 <xmalloc@plt>:
  401440:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401444:	ldr	x17, [x16, #168]
  401448:	add	x16, x16, #0xa8
  40144c:	br	x17

0000000000401450 <xstrdup@plt>:
  401450:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401454:	ldr	x17, [x16, #176]
  401458:	add	x16, x16, #0xb0
  40145c:	br	x17

0000000000401460 <xmlStrlen@plt>:
  401460:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401464:	ldr	x17, [x16, #184]
  401468:	add	x16, x16, #0xb8
  40146c:	br	x17

0000000000401470 <close_stdout@plt>:
  401470:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401474:	ldr	x17, [x16, #192]
  401478:	add	x16, x16, #0xc0
  40147c:	br	x17

0000000000401480 <xmlNodeGetContent@plt>:
  401480:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401484:	ldr	x17, [x16, #200]
  401488:	add	x16, x16, #0xc8
  40148c:	br	x17

0000000000401490 <xmlReadFd@plt>:
  401490:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401494:	ldr	x17, [x16, #208]
  401498:	add	x16, x16, #0xd0
  40149c:	br	x17

00000000004014a0 <strrchr@plt>:
  4014a0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4014a4:	ldr	x17, [x16, #216]
  4014a8:	add	x16, x16, #0xd8
  4014ac:	br	x17

00000000004014b0 <__gmon_start__@plt>:
  4014b0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4014b4:	ldr	x17, [x16, #224]
  4014b8:	add	x16, x16, #0xe0
  4014bc:	br	x17

00000000004014c0 <abort@plt>:
  4014c0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4014c4:	ldr	x17, [x16, #232]
  4014c8:	add	x16, x16, #0xe8
  4014cc:	br	x17

00000000004014d0 <u8_mbtouc_aux@plt>:
  4014d0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4014d4:	ldr	x17, [x16, #240]
  4014d8:	add	x16, x16, #0xf0
  4014dc:	br	x17

00000000004014e0 <puts@plt>:
  4014e0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4014e4:	ldr	x17, [x16, #248]
  4014e8:	add	x16, x16, #0xf8
  4014ec:	br	x17

00000000004014f0 <textdomain@plt>:
  4014f0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4014f4:	ldr	x17, [x16, #256]
  4014f8:	add	x16, x16, #0x100
  4014fc:	br	x17

0000000000401500 <getopt_long@plt>:
  401500:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401504:	ldr	x17, [x16, #264]
  401508:	add	x16, x16, #0x108
  40150c:	br	x17

0000000000401510 <strcmp@plt>:
  401510:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401514:	ldr	x17, [x16, #272]
  401518:	add	x16, x16, #0x110
  40151c:	br	x17

0000000000401520 <basename@plt>:
  401520:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401524:	ldr	x17, [x16, #280]
  401528:	add	x16, x16, #0x118
  40152c:	br	x17

0000000000401530 <getline@plt>:
  401530:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401534:	ldr	x17, [x16, #288]
  401538:	add	x16, x16, #0x120
  40153c:	br	x17

0000000000401540 <proper_name@plt>:
  401540:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401544:	ldr	x17, [x16, #296]
  401548:	add	x16, x16, #0x128
  40154c:	br	x17

0000000000401550 <free@plt>:
  401550:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401554:	ldr	x17, [x16, #304]
  401558:	add	x16, x16, #0x130
  40155c:	br	x17

0000000000401560 <fwrite@plt>:
  401560:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401564:	ldr	x17, [x16, #312]
  401568:	add	x16, x16, #0x138
  40156c:	br	x17

0000000000401570 <xmlGetLineNo@plt>:
  401570:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401574:	ldr	x17, [x16, #320]
  401578:	add	x16, x16, #0x140
  40157c:	br	x17

0000000000401580 <c_isspace@plt>:
  401580:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401584:	ldr	x17, [x16, #328]
  401588:	add	x16, x16, #0x148
  40158c:	br	x17

0000000000401590 <dcgettext@plt>:
  401590:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401594:	ldr	x17, [x16, #336]
  401598:	add	x16, x16, #0x150
  40159c:	br	x17

00000000004015a0 <xmlStrncmp@plt>:
  4015a0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4015a4:	ldr	x17, [x16, #344]
  4015a8:	add	x16, x16, #0x158
  4015ac:	br	x17

00000000004015b0 <printf@plt>:
  4015b0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4015b4:	ldr	x17, [x16, #352]
  4015b8:	add	x16, x16, #0x160
  4015bc:	br	x17

00000000004015c0 <xmlStrEqual@plt>:
  4015c0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4015c4:	ldr	x17, [x16, #360]
  4015c8:	add	x16, x16, #0x168
  4015cc:	br	x17

00000000004015d0 <xmlDocGetRootElement@plt>:
  4015d0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4015d4:	ldr	x17, [x16, #368]
  4015d8:	add	x16, x16, #0x170
  4015dc:	br	x17

00000000004015e0 <putchar@plt>:
  4015e0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4015e4:	ldr	x17, [x16, #376]
  4015e8:	add	x16, x16, #0x178
  4015ec:	br	x17

00000000004015f0 <error_at_line@plt>:
  4015f0:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  4015f4:	ldr	x17, [x16, #384]
  4015f8:	add	x16, x16, #0x180
  4015fc:	br	x17

0000000000401600 <fprintf@plt>:
  401600:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401604:	ldr	x17, [x16, #392]
  401608:	add	x16, x16, #0x188
  40160c:	br	x17

0000000000401610 <setlocale@plt>:
  401610:	adrp	x16, 415000 <memcpy@GLIBC_2.17>
  401614:	ldr	x17, [x16, #400]
  401618:	add	x16, x16, #0x190
  40161c:	br	x17

Disassembly of section .text:

0000000000401620 <_start>:
  401620:	mov	x29, #0x0                   	// #0
  401624:	mov	x30, #0x0                   	// #0
  401628:	mov	x5, x0
  40162c:	ldr	x1, [sp]
  401630:	add	x2, sp, #0x8
  401634:	mov	x6, sp
  401638:	movz	x0, #0x0, lsl #48
  40163c:	movk	x0, #0x0, lsl #32
  401640:	movk	x0, #0x40, lsl #16
  401644:	movk	x0, #0x358c
  401648:	movz	x3, #0x0, lsl #48
  40164c:	movk	x3, #0x0, lsl #32
  401650:	movk	x3, #0x40, lsl #16
  401654:	movk	x3, #0x3ed8
  401658:	movz	x4, #0x0, lsl #48
  40165c:	movk	x4, #0x0, lsl #32
  401660:	movk	x4, #0x40, lsl #16
  401664:	movk	x4, #0x3f58
  401668:	bl	401420 <__libc_start_main@plt>
  40166c:	bl	4014c0 <abort@plt>

0000000000401670 <call_weak_fn>:
  401670:	adrp	x0, 414000 <__FRAME_END__+0xf50c>
  401674:	ldr	x0, [x0, #4064]
  401678:	cbz	x0, 401680 <call_weak_fn+0x10>
  40167c:	b	4014b0 <__gmon_start__@plt>
  401680:	ret
  401684:	nop

0000000000401688 <deregister_tm_clones>:
  401688:	adrp	x0, 415000 <memcpy@GLIBC_2.17>
  40168c:	add	x0, x0, #0x1a8
  401690:	adrp	x1, 415000 <memcpy@GLIBC_2.17>
  401694:	add	x1, x1, #0x1a8
  401698:	cmp	x1, x0
  40169c:	b.eq	4016b4 <deregister_tm_clones+0x2c>  // b.none
  4016a0:	adrp	x1, 403000 <print_condition_negation>
  4016a4:	ldr	x1, [x1, #3976]
  4016a8:	cbz	x1, 4016b4 <deregister_tm_clones+0x2c>
  4016ac:	mov	x16, x1
  4016b0:	br	x16
  4016b4:	ret

00000000004016b8 <register_tm_clones>:
  4016b8:	adrp	x0, 415000 <memcpy@GLIBC_2.17>
  4016bc:	add	x0, x0, #0x1a8
  4016c0:	adrp	x1, 415000 <memcpy@GLIBC_2.17>
  4016c4:	add	x1, x1, #0x1a8
  4016c8:	sub	x1, x1, x0
  4016cc:	lsr	x2, x1, #63
  4016d0:	add	x1, x2, x1, asr #3
  4016d4:	cmp	xzr, x1, asr #1
  4016d8:	asr	x1, x1, #1
  4016dc:	b.eq	4016f4 <register_tm_clones+0x3c>  // b.none
  4016e0:	adrp	x2, 403000 <print_condition_negation>
  4016e4:	ldr	x2, [x2, #3984]
  4016e8:	cbz	x2, 4016f4 <register_tm_clones+0x3c>
  4016ec:	mov	x16, x2
  4016f0:	br	x16
  4016f4:	ret

00000000004016f8 <__do_global_dtors_aux>:
  4016f8:	stp	x29, x30, [sp, #-32]!
  4016fc:	mov	x29, sp
  401700:	str	x19, [sp, #16]
  401704:	adrp	x19, 415000 <memcpy@GLIBC_2.17>
  401708:	ldrb	w0, [x19, #488]
  40170c:	cbnz	w0, 40171c <__do_global_dtors_aux+0x24>
  401710:	bl	401688 <deregister_tm_clones>
  401714:	mov	w0, #0x1                   	// #1
  401718:	strb	w0, [x19, #488]
  40171c:	ldr	x19, [sp, #16]
  401720:	ldp	x29, x30, [sp], #32
  401724:	ret

0000000000401728 <frame_dummy>:
  401728:	b	4016b8 <register_tm_clones>

000000000040172c <yyparse>:
  40172c:	stp	x29, x30, [sp, #-96]!
  401730:	stp	x28, x27, [sp, #16]
  401734:	stp	x26, x25, [sp, #32]
  401738:	stp	x24, x23, [sp, #48]
  40173c:	stp	x22, x21, [sp, #64]
  401740:	stp	x20, x19, [sp, #80]
  401744:	mov	x29, sp
  401748:	sub	sp, sp, #0x800
  40174c:	mov	x28, #0x8490                	// #33936
  401750:	movk	x28, #0x952, lsl #16
  401754:	adrp	x23, 403000 <print_condition_negation>
  401758:	movk	x28, #0xf65c, lsl #32
  40175c:	add	x8, sp, #0x20
  401760:	mov	w27, wzr
  401764:	stur	xzr, [x29, #-16]
  401768:	mov	w21, #0xfffffffe            	// #-2
  40176c:	add	x19, sp, #0x20
  401770:	mov	w25, #0xc8                  	// #200
  401774:	add	x23, x23, #0xfca
  401778:	movk	x28, #0xc, lsl #48
  40177c:	stp	x0, x8, [sp, #16]
  401780:	add	x26, sp, #0x660
  401784:	add	x20, sp, #0x660
  401788:	b	40179c <yyparse+0x70>
  40178c:	adrp	x9, 404000 <yytranslate+0x2>
  401790:	add	x9, x9, #0x202
  401794:	ldrsb	w27, [x9, x8]
  401798:	add	x26, x26, #0x2
  40179c:	add	x8, x20, x25, lsl #1
  4017a0:	sub	x8, x8, #0x2
  4017a4:	cmp	x8, x26
  4017a8:	strh	w27, [x26]
  4017ac:	b.hi	401898 <yyparse+0x16c>  // b.pmore
  4017b0:	lsr	x8, x25, #4
  4017b4:	cmp	x8, #0x270
  4017b8:	b.ls	4017c4 <yyparse+0x98>  // b.plast
  4017bc:	mov	w8, #0x4                   	// #4
  4017c0:	b	401894 <yyparse+0x168>
  4017c4:	sub	x8, x26, x20
  4017c8:	ubfx	x10, x25, #3, #60
  4017cc:	lsl	x9, x25, #1
  4017d0:	asr	x22, x8, #1
  4017d4:	cmp	x10, #0x271
  4017d8:	mov	w8, #0x2710                	// #10000
  4017dc:	csel	x25, x9, x8, cc  // cc = lo, ul, last
  4017e0:	mov	w8, #0xa                   	// #10
  4017e4:	orr	x9, xzr, #0x7
  4017e8:	madd	x0, x25, x8, x9
  4017ec:	bl	4013c0 <malloc@plt>
  4017f0:	cbz	x0, 4019b0 <yyparse+0x284>
  4017f4:	str	w21, [sp, #8]
  4017f8:	mov	x21, x23
  4017fc:	add	x23, x22, #0x1
  401800:	lsl	x2, x23, #1
  401804:	mov	x1, x20
  401808:	mov	x24, x0
  40180c:	bl	4012f0 <memcpy@plt>
  401810:	lsl	x8, x25, #1
  401814:	add	x8, x8, #0x7
  401818:	ldr	x1, [sp, #24]
  40181c:	and	x8, x8, #0xfffffffffffffff8
  401820:	mov	x28, x25
  401824:	add	x25, x24, x8
  401828:	lsl	x2, x23, #3
  40182c:	mov	x0, x25
  401830:	bl	4012f0 <memcpy@plt>
  401834:	add	x8, sp, #0x660
  401838:	cmp	x20, x8
  40183c:	b.eq	401848 <yyparse+0x11c>  // b.none
  401840:	mov	x0, x20
  401844:	bl	401550 <free@plt>
  401848:	str	x25, [sp, #24]
  40184c:	mov	x23, x21
  401850:	ldr	w21, [sp, #8]
  401854:	mov	x25, x28
  401858:	mov	x28, #0x8490                	// #33936
  40185c:	movk	x28, #0x952, lsl #16
  401860:	movk	x28, #0xf65c, lsl #32
  401864:	mov	w8, wzr
  401868:	mov	x20, x24
  40186c:	movk	x28, #0xc, lsl #48
  401870:	cbnz	w8, 401894 <yyparse+0x168>
  401874:	ldr	x8, [sp, #24]
  401878:	add	x26, x20, x22, lsl #1
  40187c:	add	x19, x8, x22, lsl #3
  401880:	add	x8, x20, x25, lsl #1
  401884:	sub	x8, x8, #0x2
  401888:	cmp	x8, x26
  40188c:	mov	w8, #0x9                   	// #9
  401890:	csel	w8, wzr, w8, hi  // hi = pmore
  401894:	cbnz	w8, 401bec <yyparse+0x4c0>
  401898:	cmp	w27, #0x7
  40189c:	b.eq	401b84 <yyparse+0x458>  // b.none
  4018a0:	lsr	x8, x28, x27
  4018a4:	sxtw	x22, w27
  4018a8:	tbnz	w8, #0, 401948 <yyparse+0x21c>
  4018ac:	cmn	w21, #0x2
  4018b0:	b.ne	4018c4 <yyparse+0x198>  // b.any
  4018b4:	ldr	x1, [sp, #16]
  4018b8:	sub	x0, x29, #0x10
  4018bc:	bl	401cd4 <yylex>
  4018c0:	mov	w21, w0
  4018c4:	ldrsb	x8, [x23, x22]
  4018c8:	cmp	w21, #0x1
  4018cc:	b.lt	4018e8 <yyparse+0x1bc>  // b.tstop
  4018d0:	cmp	w21, #0x10c
  4018d4:	b.hi	4018f4 <yyparse+0x1c8>  // b.pmore
  4018d8:	adrp	x9, 403000 <print_condition_negation>
  4018dc:	add	x9, x9, #0xffe
  4018e0:	ldrb	w9, [x9, w21, sxtw]
  4018e4:	b	4018f8 <yyparse+0x1cc>
  4018e8:	mov	w9, wzr
  4018ec:	mov	w21, wzr
  4018f0:	b	4018f8 <yyparse+0x1cc>
  4018f4:	mov	w9, #0x2                   	// #2
  4018f8:	add	x8, x9, x8
  4018fc:	cmp	w8, #0x37
  401900:	b.hi	401948 <yyparse+0x21c>  // b.pmore
  401904:	adrp	x10, 404000 <yytranslate+0x2>
  401908:	add	x10, x10, #0x10b
  40190c:	ldrsb	w10, [x10, x8]
  401910:	cmp	w9, w10
  401914:	b.ne	401948 <yyparse+0x21c>  // b.any
  401918:	adrp	x9, 404000 <yytranslate+0x2>
  40191c:	add	x9, x9, #0x143
  401920:	ldrb	w27, [x9, x8]
  401924:	mov	x9, #0x80000000            	// #2147483648
  401928:	movk	x9, #0x9efc, lsl #32
  40192c:	movk	x9, #0x7e, lsl #48
  401930:	lsr	x8, x9, x8
  401934:	tbnz	w8, #0, 4019d0 <yyparse+0x2a4>
  401938:	ldur	x8, [x29, #-16]
  40193c:	mov	w21, #0xfffffffe            	// #-2
  401940:	str	x8, [x19, #8]!
  401944:	b	401798 <yyparse+0x6c>
  401948:	mov	x8, #0x3000300030003       	// #844437815230467
  40194c:	movk	x8, #0x34f
  401950:	movk	x8, #0xf681, lsl #16
  401954:	lsr	x8, x8, x22
  401958:	tbnz	w8, #0, 401b94 <yyparse+0x468>
  40195c:	adrp	x8, 404000 <yytranslate+0x2>
  401960:	add	x8, x8, #0x17b
  401964:	ldrb	w8, [x8, x22]
  401968:	adrp	x9, 404000 <yytranslate+0x2>
  40196c:	sxtw	x22, w8
  401970:	add	x9, x9, #0x1af
  401974:	ldrb	w27, [x9, x22]
  401978:	mov	w9, #0x1                   	// #1
  40197c:	sub	w8, w8, #0x4
  401980:	cmp	w8, #0x1c
  401984:	sub	x9, x9, x27
  401988:	ldr	x24, [x19, x9, lsl #3]
  40198c:	b.hi	401b24 <yyparse+0x3f8>  // b.pmore
  401990:	adrp	x11, 403000 <print_condition_negation>
  401994:	add	x11, x11, #0xf98
  401998:	adr	x9, 4019a8 <yyparse+0x27c>
  40199c:	ldrb	w10, [x11, x8]
  4019a0:	add	x9, x9, x10, lsl #2
  4019a4:	br	x9
  4019a8:	ldr	x24, [x19]
  4019ac:	b	401b24 <yyparse+0x3f8>
  4019b0:	mov	w8, #0x4                   	// #4
  4019b4:	cbnz	w8, 401894 <yyparse+0x168>
  4019b8:	b	401874 <yyparse+0x148>
  4019bc:	ldur	x0, [x19, #-16]
  4019c0:	bl	401550 <free@plt>
  4019c4:	ldr	x0, [x19]
  4019c8:	bl	401550 <free@plt>
  4019cc:	b	401b24 <yyparse+0x3f8>
  4019d0:	neg	w8, w27
  4019d4:	b	401968 <yyparse+0x23c>
  4019d8:	ldur	x0, [x19, #-24]
  4019dc:	ldur	x1, [x19, #-8]
  4019e0:	str	x25, [sp, #8]
  4019e4:	mov	w28, w21
  4019e8:	mov	x21, x23
  4019ec:	bl	4020a8 <new_rule>
  4019f0:	ldr	x8, [sp, #16]
  4019f4:	mov	x25, x0
  4019f8:	ldr	x23, [x8, #16]
  4019fc:	ldp	x9, x8, [x23, #8]
  401a00:	cmp	x9, x8
  401a04:	b.ne	401a24 <yyparse+0x2f8>  // b.any
  401a08:	ldr	x0, [x23]
  401a0c:	mov	w9, #0x1                   	// #1
  401a10:	bfi	x9, x8, #1, #63
  401a14:	lsl	x1, x9, #3
  401a18:	str	x9, [x23, #16]
  401a1c:	bl	4013d0 <xrealloc@plt>
  401a20:	str	x0, [x23]
  401a24:	ldp	x9, x8, [x23]
  401a28:	add	x10, x8, #0x1
  401a2c:	str	x10, [x23, #8]
  401a30:	str	x25, [x9, x8, lsl #3]
  401a34:	mov	x23, x21
  401a38:	mov	w21, w28
  401a3c:	ldr	x25, [sp, #8]
  401a40:	mov	x28, #0x8490                	// #33936
  401a44:	movk	x28, #0x952, lsl #16
  401a48:	movk	x28, #0xf65c, lsl #32
  401a4c:	movk	x28, #0xc, lsl #48
  401a50:	b	401b24 <yyparse+0x3f8>
  401a54:	ldur	x1, [x19, #-16]
  401a58:	ldr	x2, [x19]
  401a5c:	mov	w0, #0x1                   	// #1
  401a60:	b	401a88 <yyparse+0x35c>
  401a64:	ldr	x0, [x19]
  401a68:	bl	402110 <new_leaf_condition>
  401a6c:	b	401b20 <yyparse+0x3f4>
  401a70:	ldr	x0, [x19]
  401a74:	ldur	x24, [x19, #-16]
  401a78:	bl	402110 <new_leaf_condition>
  401a7c:	mov	x2, x0
  401a80:	mov	w0, wzr
  401a84:	mov	x1, x24
  401a88:	bl	4020d4 <new_branch_condition>
  401a8c:	b	401b20 <yyparse+0x3f4>
  401a90:	ldur	x0, [x19, #-16]
  401a94:	ldr	x2, [x19]
  401a98:	mov	w1, wzr
  401a9c:	b	401aac <yyparse+0x380>
  401aa0:	ldur	x0, [x19, #-16]
  401aa4:	ldr	x2, [x19]
  401aa8:	mov	w1, #0x1                   	// #1
  401aac:	bl	402140 <new_relation>
  401ab0:	b	401b20 <yyparse+0x3f4>
  401ab4:	ldr	w0, [x19]
  401ab8:	mov	w1, wzr
  401abc:	b	401acc <yyparse+0x3a0>
  401ac0:	ldr	x8, [x19]
  401ac4:	ldur	w0, [x19, #-16]
  401ac8:	ldr	w1, [x8, #8]
  401acc:	bl	402180 <new_expression>
  401ad0:	b	401b20 <yyparse+0x3f4>
  401ad4:	mov	w0, #0x18                  	// #24
  401ad8:	bl	401440 <xmalloc@plt>
  401adc:	stp	xzr, xzr, [x0, #8]
  401ae0:	str	xzr, [x0]
  401ae4:	ldr	x1, [x19]
  401ae8:	mov	x24, x0
  401aec:	bl	4021ac <add_range>
  401af0:	b	401b24 <yyparse+0x3f8>
  401af4:	ldur	x24, [x19, #-16]
  401af8:	ldr	x1, [x19]
  401afc:	mov	x0, x24
  401b00:	bl	4021ac <add_range>
  401b04:	b	401b24 <yyparse+0x3f8>
  401b08:	ldr	x0, [x19]
  401b0c:	mov	x1, x0
  401b10:	b	401b1c <yyparse+0x3f0>
  401b14:	ldur	x0, [x19, #-16]
  401b18:	ldr	x1, [x19]
  401b1c:	bl	402208 <new_range>
  401b20:	mov	x24, x0
  401b24:	adrp	x8, 404000 <yytranslate+0x2>
  401b28:	add	x8, x8, #0x1d0
  401b2c:	ldrb	w8, [x8, x22]
  401b30:	sub	x19, x19, x27, lsl #3
  401b34:	adrp	x9, 404000 <yytranslate+0x2>
  401b38:	sub	x26, x26, x27, lsl #1
  401b3c:	str	x24, [x19, #8]!
  401b40:	sub	x8, x8, #0x15
  401b44:	add	x9, x9, #0x1f1
  401b48:	ldrsb	x9, [x9, x8]
  401b4c:	ldrsh	x10, [x26]
  401b50:	add	x9, x10, x9
  401b54:	cmp	w9, #0x37
  401b58:	b.hi	40178c <yyparse+0x60>  // b.pmore
  401b5c:	adrp	x11, 404000 <yytranslate+0x2>
  401b60:	add	x11, x11, #0x10b
  401b64:	ldrsb	w11, [x11, x9]
  401b68:	and	w10, w10, #0xffff
  401b6c:	cmp	w10, w11, uxth
  401b70:	b.ne	40178c <yyparse+0x60>  // b.any
  401b74:	adrp	x8, 404000 <yytranslate+0x2>
  401b78:	add	x8, x8, #0x143
  401b7c:	ldrb	w27, [x8, x9]
  401b80:	b	401798 <yyparse+0x6c>
  401b84:	mov	w22, wzr
  401b88:	cmn	w21, #0x2
  401b8c:	b.ne	401c08 <yyparse+0x4dc>  // b.any
  401b90:	b	401c34 <yyparse+0x508>
  401b94:	adrp	x0, 404000 <yytranslate+0x2>
  401b98:	adrp	x1, 404000 <yytranslate+0x2>
  401b9c:	add	x0, x0, #0x247
  401ba0:	add	x1, x1, #0x255
  401ba4:	mov	w2, #0x5                   	// #5
  401ba8:	bl	401590 <dcgettext@plt>
  401bac:	bl	402234 <yyerror>
  401bb0:	cmp	x26, x20
  401bb4:	b.eq	401bfc <yyparse+0x4d0>  // b.none
  401bb8:	adrp	x23, 404000 <yytranslate+0x2>
  401bbc:	adrp	x22, 404000 <yytranslate+0x2>
  401bc0:	add	x23, x23, #0x213
  401bc4:	add	x22, x22, #0x262
  401bc8:	ldrb	w1, [x23, w27, sxtw]
  401bcc:	mov	x0, x22
  401bd0:	mov	x2, x19
  401bd4:	bl	402260 <yydestruct>
  401bd8:	ldrsh	w27, [x26, #-2]!
  401bdc:	sub	x19, x19, #0x8
  401be0:	cmp	x20, x26
  401be4:	b.ne	401bc8 <yyparse+0x49c>  // b.any
  401be8:	b	401bfc <yyparse+0x4d0>
  401bec:	cmp	w8, #0x4
  401bf0:	b.eq	401ca4 <yyparse+0x578>  // b.none
  401bf4:	cmp	w8, #0x9
  401bf8:	b.ne	401cd0 <yyparse+0x5a4>  // b.any
  401bfc:	mov	w22, #0x1                   	// #1
  401c00:	cmn	w21, #0x2
  401c04:	b.eq	401c34 <yyparse+0x508>  // b.none
  401c08:	cmp	w21, #0x10c
  401c0c:	b.hi	401c20 <yyparse+0x4f4>  // b.pmore
  401c10:	adrp	x8, 403000 <print_condition_negation>
  401c14:	add	x8, x8, #0xffe
  401c18:	ldrb	w1, [x8, w21, sxtw]
  401c1c:	b	401c24 <yyparse+0x4f8>
  401c20:	mov	w1, #0x2                   	// #2
  401c24:	adrp	x0, 404000 <yytranslate+0x2>
  401c28:	add	x0, x0, #0x282
  401c2c:	sub	x2, x29, #0x10
  401c30:	bl	402260 <yydestruct>
  401c34:	cmp	x26, x20
  401c38:	b.eq	401c6c <yyparse+0x540>  // b.none
  401c3c:	adrp	x23, 404000 <yytranslate+0x2>
  401c40:	adrp	x21, 404000 <yytranslate+0x2>
  401c44:	add	x23, x23, #0x213
  401c48:	add	x21, x21, #0x2a0
  401c4c:	ldrsh	x8, [x26], #-2
  401c50:	mov	x0, x21
  401c54:	mov	x2, x19
  401c58:	ldrb	w1, [x23, x8]
  401c5c:	bl	402260 <yydestruct>
  401c60:	cmp	x20, x26
  401c64:	sub	x19, x19, #0x8
  401c68:	b.ne	401c4c <yyparse+0x520>  // b.any
  401c6c:	add	x8, sp, #0x660
  401c70:	cmp	x20, x8
  401c74:	b.eq	401c80 <yyparse+0x554>  // b.none
  401c78:	mov	x0, x20
  401c7c:	bl	401550 <free@plt>
  401c80:	mov	w0, w22
  401c84:	add	sp, sp, #0x800
  401c88:	ldp	x20, x19, [sp, #80]
  401c8c:	ldp	x22, x21, [sp, #64]
  401c90:	ldp	x24, x23, [sp, #48]
  401c94:	ldp	x26, x25, [sp, #32]
  401c98:	ldp	x28, x27, [sp, #16]
  401c9c:	ldp	x29, x30, [sp], #96
  401ca0:	ret
  401ca4:	adrp	x0, 404000 <yytranslate+0x2>
  401ca8:	adrp	x1, 404000 <yytranslate+0x2>
  401cac:	add	x0, x0, #0x247
  401cb0:	add	x1, x1, #0x271
  401cb4:	mov	w2, #0x5                   	// #5
  401cb8:	bl	401590 <dcgettext@plt>
  401cbc:	bl	402234 <yyerror>
  401cc0:	mov	w22, #0x2                   	// #2
  401cc4:	cmn	w21, #0x2
  401cc8:	b.eq	401c34 <yyparse+0x508>  // b.none
  401ccc:	b	401c08 <yyparse+0x4dc>
  401cd0:	b	401c80 <yyparse+0x554>

0000000000401cd4 <yylex>:
  401cd4:	sub	sp, sp, #0x60
  401cd8:	stp	x29, x30, [sp, #16]
  401cdc:	stp	x26, x25, [sp, #32]
  401ce0:	stp	x24, x23, [sp, #48]
  401ce4:	stp	x22, x21, [sp, #64]
  401ce8:	stp	x20, x19, [sp, #80]
  401cec:	ldr	x21, [x1]
  401cf0:	mov	x19, x1
  401cf4:	mov	x20, x0
  401cf8:	add	x29, sp, #0x10
  401cfc:	b	401d04 <yylex+0x30>
  401d00:	add	x21, x21, #0x1
  401d04:	ldrb	w8, [x21]
  401d08:	cmp	w8, #0x9
  401d0c:	b.eq	401d00 <yylex+0x2c>  // b.none
  401d10:	cmp	w8, #0x20
  401d14:	b.eq	401d00 <yylex+0x2c>  // b.none
  401d18:	cbnz	w8, 401d28 <yylex+0x54>
  401d1c:	mov	w22, wzr
  401d20:	str	x21, [x19]
  401d24:	b	401e48 <yylex+0x174>
  401d28:	ldr	x8, [x19, #8]
  401d2c:	sub	x0, x29, #0x4
  401d30:	mov	x1, x21
  401d34:	sub	x2, x8, x21
  401d38:	bl	4022dc <u8_mbtouc>
  401d3c:	ldur	w8, [x29, #-4]
  401d40:	mov	w9, #0x2026                	// #8230
  401d44:	cmp	w8, w9
  401d48:	b.ne	401d54 <yylex+0x80>  // b.any
  401d4c:	add	x8, x21, w0, sxtw
  401d50:	b	401e40 <yylex+0x16c>
  401d54:	adrp	x0, 404000 <yytranslate+0x2>
  401d58:	add	x0, x0, #0x2b1
  401d5c:	mov	w2, #0x3                   	// #3
  401d60:	mov	x1, x21
  401d64:	bl	401400 <strncmp@plt>
  401d68:	cbz	w0, 401e3c <yylex+0x168>
  401d6c:	adrp	x0, 404000 <yytranslate+0x2>
  401d70:	add	x0, x0, #0x2b2
  401d74:	mov	w2, #0x2                   	// #2
  401d78:	mov	x1, x21
  401d7c:	bl	401400 <strncmp@plt>
  401d80:	cbz	w0, 401e68 <yylex+0x194>
  401d84:	adrp	x0, 404000 <yytranslate+0x2>
  401d88:	add	x0, x0, #0x2b5
  401d8c:	mov	w2, #0x5                   	// #5
  401d90:	mov	x1, x21
  401d94:	bl	401400 <strncmp@plt>
  401d98:	cbz	w0, 401e78 <yylex+0x1a4>
  401d9c:	adrp	x0, 404000 <yytranslate+0x2>
  401da0:	add	x0, x0, #0x2bb
  401da4:	mov	w2, #0x8                   	// #8
  401da8:	mov	x1, x21
  401dac:	bl	401400 <strncmp@plt>
  401db0:	cbz	w0, 401e88 <yylex+0x1b4>
  401db4:	adrp	x0, 404000 <yytranslate+0x2>
  401db8:	add	x0, x0, #0x2c4
  401dbc:	mov	w2, #0x8                   	// #8
  401dc0:	mov	x1, x21
  401dc4:	bl	401400 <strncmp@plt>
  401dc8:	cbz	w0, 401f08 <yylex+0x234>
  401dcc:	mov	x23, x21
  401dd0:	ldrb	w22, [x23], #1
  401dd4:	sub	w8, w22, #0x61
  401dd8:	cmp	w8, #0x1a
  401ddc:	b.cs	401f54 <yylex+0x280>  // b.hs, b.nlast
  401de0:	mov	x25, xzr
  401de4:	adrp	x24, 415000 <memcpy@GLIBC_2.17>
  401de8:	adrp	x23, 415000 <memcpy@GLIBC_2.17>
  401dec:	b	401e10 <yylex+0x13c>
  401df0:	ldr	x0, [x23, #496]
  401df4:	strb	w22, [x0, x25]
  401df8:	ldrb	w22, [x26, #1]
  401dfc:	add	x26, x25, #0x1
  401e00:	mov	x25, x26
  401e04:	sub	w8, w22, #0x61
  401e08:	cmp	w8, #0x1a
  401e0c:	b.cs	401e98 <yylex+0x1c4>  // b.hs, b.nlast
  401e10:	ldr	x8, [x24, #504]
  401e14:	add	x26, x21, x25
  401e18:	cmp	x25, x8
  401e1c:	b.cc	401df0 <yylex+0x11c>  // b.lo, b.ul, b.last
  401e20:	ldr	x0, [x23, #496]
  401e24:	lsl	x8, x8, #1
  401e28:	add	x1, x8, #0xa
  401e2c:	str	x1, [x24, #504]
  401e30:	bl	4013d0 <xrealloc@plt>
  401e34:	str	x0, [x23, #496]
  401e38:	b	401df0 <yylex+0x11c>
  401e3c:	add	x8, x21, #0x3
  401e40:	str	x8, [x19]
  401e44:	mov	w22, #0x105                 	// #261
  401e48:	mov	w0, w22
  401e4c:	ldp	x20, x19, [sp, #80]
  401e50:	ldp	x22, x21, [sp, #64]
  401e54:	ldp	x24, x23, [sp, #48]
  401e58:	ldp	x26, x25, [sp, #32]
  401e5c:	ldp	x29, x30, [sp, #16]
  401e60:	add	sp, sp, #0x60
  401e64:	ret
  401e68:	add	x8, x21, #0x2
  401e6c:	str	x8, [x19]
  401e70:	mov	w22, #0x104                 	// #260
  401e74:	b	401e48 <yylex+0x174>
  401e78:	add	x8, x21, #0x5
  401e7c:	str	x8, [x19]
  401e80:	mov	w22, #0x106                 	// #262
  401e84:	b	401e48 <yylex+0x174>
  401e88:	add	x8, x21, #0x8
  401e8c:	str	x8, [x19]
  401e90:	mov	w22, #0x107                 	// #263
  401e94:	b	401e48 <yylex+0x174>
  401e98:	ldr	x8, [x24, #504]
  401e9c:	cmp	x26, x8
  401ea0:	b.cc	401eb8 <yylex+0x1e4>  // b.lo, b.ul, b.last
  401ea4:	lsl	x8, x8, #1
  401ea8:	add	x1, x8, #0xa
  401eac:	str	x1, [x24, #504]
  401eb0:	bl	4013d0 <xrealloc@plt>
  401eb4:	str	x0, [x23, #496]
  401eb8:	ldr	x22, [x23, #496]
  401ebc:	add	x23, x21, x26
  401ec0:	cmp	x26, #0x1
  401ec4:	strb	wzr, [x22, x26]
  401ec8:	b.ne	401f18 <yylex+0x244>  // b.any
  401ecc:	ldrb	w8, [x22]
  401ed0:	sub	w8, w8, #0x66
  401ed4:	cmp	w8, #0x11
  401ed8:	b.hi	401f18 <yylex+0x244>  // b.pmore
  401edc:	mov	w9, #0x1                   	// #1
  401ee0:	lsl	w8, w9, w8
  401ee4:	mov	w9, #0x4109                	// #16649
  401ee8:	movk	w9, #0x3, lsl #16
  401eec:	tst	w8, w9
  401ef0:	b.eq	401f18 <yylex+0x244>  // b.none
  401ef4:	str	x23, [x19]
  401ef8:	ldrb	w8, [x22]
  401efc:	mov	w22, #0x10c                 	// #268
  401f00:	str	w8, [x20]
  401f04:	b	401e48 <yylex+0x174>
  401f08:	add	x8, x21, #0x8
  401f0c:	str	x8, [x19]
  401f10:	mov	w22, #0x108                 	// #264
  401f14:	b	401e48 <yylex+0x174>
  401f18:	adrp	x1, 404000 <yytranslate+0x2>
  401f1c:	add	x1, x1, #0x2cd
  401f20:	mov	x0, x22
  401f24:	bl	401510 <strcmp@plt>
  401f28:	cbz	w0, 402038 <yylex+0x364>
  401f2c:	adrp	x1, 404000 <yytranslate+0x2>
  401f30:	add	x1, x1, #0x25f
  401f34:	mov	x0, x22
  401f38:	bl	401510 <strcmp@plt>
  401f3c:	cbz	w0, 402044 <yylex+0x370>
  401f40:	mov	x0, x22
  401f44:	bl	401450 <xstrdup@plt>
  401f48:	mov	w22, #0x109                 	// #265
  401f4c:	str	x0, [x20]
  401f50:	b	4020a0 <yylex+0x3cc>
  401f54:	sub	w8, w22, #0x30
  401f58:	cmp	w8, #0xa
  401f5c:	b.cs	402050 <yylex+0x37c>  // b.hs, b.nlast
  401f60:	ldrb	w8, [x23]
  401f64:	sub	x21, x22, #0x30
  401f68:	sub	w9, w8, #0x30
  401f6c:	cmp	w9, #0x9
  401f70:	b.hi	401f94 <yylex+0x2c0>  // b.pmore
  401f74:	mov	w9, #0xa                   	// #10
  401f78:	mul	x10, x21, x9
  401f7c:	add	x10, x10, w8, uxtb
  401f80:	ldrb	w8, [x23, #1]!
  401f84:	sub	x21, x10, #0x30
  401f88:	sub	w11, w8, #0x30
  401f8c:	cmp	w11, #0xa
  401f90:	b.cc	401f78 <yylex+0x2a4>  // b.lo, b.ul, b.last
  401f94:	mov	w0, #0x18                  	// #24
  401f98:	bl	401440 <xmalloc@plt>
  401f9c:	str	x0, [x20]
  401fa0:	ldrb	w8, [x23]
  401fa4:	cmp	w8, #0x2e
  401fa8:	b.ne	402020 <yylex+0x34c>  // b.any
  401fac:	ldrb	w8, [x23, #1]
  401fb0:	sub	w8, w8, #0x30
  401fb4:	cmp	w8, #0x9
  401fb8:	b.hi	402020 <yylex+0x34c>  // b.pmore
  401fbc:	mov	x10, x23
  401fc0:	ldrb	w9, [x10, #1]!
  401fc4:	ucvtf	d0, x21
  401fc8:	sub	w8, w9, #0x30
  401fcc:	cmp	w8, #0x9
  401fd0:	b.hi	402078 <yylex+0x3a4>  // b.pmore
  401fd4:	mov	x8, xzr
  401fd8:	mov	w10, #0xa                   	// #10
  401fdc:	and	w9, w9, #0xff
  401fe0:	add	x11, x23, x8
  401fe4:	sub	w12, w9, #0x30
  401fe8:	ldrb	w9, [x11, #2]
  401fec:	scvtf	d1, w10
  401ff0:	scvtf	d2, w12
  401ff4:	add	w10, w10, w10, lsl #2
  401ff8:	fdiv	d1, d2, d1
  401ffc:	sub	w11, w9, #0x30
  402000:	fadd	d0, d0, d1
  402004:	lsl	w10, w10, #1
  402008:	cmp	w11, #0xa
  40200c:	add	x8, x8, #0x1
  402010:	b.cc	401fdc <yylex+0x308>  // b.lo, b.ul, b.last
  402014:	add	x9, x23, x8
  402018:	add	x23, x9, #0x1
  40201c:	b	402080 <yylex+0x3ac>
  402020:	ldr	x8, [x20]
  402024:	mov	w22, #0x10a                 	// #266
  402028:	str	wzr, [x8]
  40202c:	ldr	x8, [x20]
  402030:	str	w21, [x8, #8]
  402034:	b	4020a0 <yylex+0x3cc>
  402038:	str	x23, [x19]
  40203c:	mov	w22, #0x102                 	// #258
  402040:	b	401e48 <yylex+0x174>
  402044:	str	x23, [x19]
  402048:	mov	w22, #0x103                 	// #259
  40204c:	b	401e48 <yylex+0x174>
  402050:	cmp	w22, #0x21
  402054:	b.ne	4020a0 <yylex+0x3cc>  // b.any
  402058:	ldrb	w8, [x21, #1]
  40205c:	add	x9, x21, #0x2
  402060:	mov	w10, #0x100                 	// #256
  402064:	mov	w11, #0x21                  	// #33
  402068:	cmp	w8, #0x3d
  40206c:	csel	x23, x9, x23, eq  // eq = none
  402070:	csel	w22, w11, w10, eq  // eq = none
  402074:	b	4020a0 <yylex+0x3cc>
  402078:	mov	w8, wzr
  40207c:	mov	x23, x10
  402080:	ldr	x9, [x20]
  402084:	mov	w10, #0x1                   	// #1
  402088:	mov	w22, #0x10b                 	// #267
  40208c:	str	w10, [x9]
  402090:	ldr	x9, [x20]
  402094:	str	d0, [x9, #8]
  402098:	ldr	x9, [x20]
  40209c:	str	w8, [x9, #16]
  4020a0:	str	x23, [x19]
  4020a4:	b	401e48 <yylex+0x174>

00000000004020a8 <new_rule>:
  4020a8:	stp	x29, x30, [sp, #-32]!
  4020ac:	stp	x20, x19, [sp, #16]
  4020b0:	mov	x20, x0
  4020b4:	mov	w0, #0x10                  	// #16
  4020b8:	mov	x29, sp
  4020bc:	mov	x19, x1
  4020c0:	bl	401440 <xmalloc@plt>
  4020c4:	stp	x20, x19, [x0]
  4020c8:	ldp	x20, x19, [sp, #16]
  4020cc:	ldp	x29, x30, [sp], #32
  4020d0:	ret

00000000004020d4 <new_branch_condition>:
  4020d4:	stp	x29, x30, [sp, #-48]!
  4020d8:	str	x21, [sp, #16]
  4020dc:	mov	w21, w0
  4020e0:	mov	w0, #0x18                  	// #24
  4020e4:	stp	x20, x19, [sp, #32]
  4020e8:	mov	x29, sp
  4020ec:	mov	x19, x2
  4020f0:	mov	x20, x1
  4020f4:	bl	401440 <xmalloc@plt>
  4020f8:	str	w21, [x0]
  4020fc:	stp	x20, x19, [x0, #8]
  402100:	ldp	x20, x19, [sp, #32]
  402104:	ldr	x21, [sp, #16]
  402108:	ldp	x29, x30, [sp], #48
  40210c:	ret

0000000000402110 <new_leaf_condition>:
  402110:	stp	x29, x30, [sp, #-32]!
  402114:	str	x19, [sp, #16]
  402118:	mov	x19, x0
  40211c:	mov	w0, #0x18                  	// #24
  402120:	mov	x29, sp
  402124:	bl	401440 <xmalloc@plt>
  402128:	str	x19, [x0, #8]
  40212c:	ldr	x19, [sp, #16]
  402130:	mov	w8, #0x2                   	// #2
  402134:	str	w8, [x0]
  402138:	ldp	x29, x30, [sp], #32
  40213c:	ret

0000000000402140 <new_relation>:
  402140:	stp	x29, x30, [sp, #-48]!
  402144:	str	x21, [sp, #16]
  402148:	mov	x21, x0
  40214c:	mov	w0, #0x18                  	// #24
  402150:	stp	x20, x19, [sp, #32]
  402154:	mov	x29, sp
  402158:	mov	x19, x2
  40215c:	mov	w20, w1
  402160:	bl	401440 <xmalloc@plt>
  402164:	str	x21, [x0]
  402168:	str	w20, [x0, #8]
  40216c:	str	x19, [x0, #16]
  402170:	ldp	x20, x19, [sp, #32]
  402174:	ldr	x21, [sp, #16]
  402178:	ldp	x29, x30, [sp], #48
  40217c:	ret

0000000000402180 <new_expression>:
  402180:	stp	x29, x30, [sp, #-32]!
  402184:	stp	x20, x19, [sp, #16]
  402188:	mov	w20, w0
  40218c:	mov	w0, #0x8                   	// #8
  402190:	mov	x29, sp
  402194:	mov	w19, w1
  402198:	bl	401440 <xmalloc@plt>
  40219c:	stp	w20, w19, [x0]
  4021a0:	ldp	x20, x19, [sp, #16]
  4021a4:	ldp	x29, x30, [sp], #32
  4021a8:	ret

00000000004021ac <add_range>:
  4021ac:	stp	x29, x30, [sp, #-32]!
  4021b0:	stp	x20, x19, [sp, #16]
  4021b4:	ldp	x9, x8, [x0, #8]
  4021b8:	mov	x19, x0
  4021bc:	mov	x20, x1
  4021c0:	mov	x29, sp
  4021c4:	cmp	x9, x8
  4021c8:	b.ne	4021e8 <add_range+0x3c>  // b.any
  4021cc:	ldr	x0, [x19]
  4021d0:	mov	w9, #0x1                   	// #1
  4021d4:	bfi	x9, x8, #1, #63
  4021d8:	lsl	x1, x9, #3
  4021dc:	str	x9, [x19, #16]
  4021e0:	bl	4013d0 <xrealloc@plt>
  4021e4:	str	x0, [x19]
  4021e8:	ldp	x9, x8, [x19]
  4021ec:	mov	x0, x19
  4021f0:	add	x10, x8, #0x1
  4021f4:	str	x10, [x19, #8]
  4021f8:	str	x20, [x9, x8, lsl #3]
  4021fc:	ldp	x20, x19, [sp, #16]
  402200:	ldp	x29, x30, [sp], #32
  402204:	ret

0000000000402208 <new_range>:
  402208:	stp	x29, x30, [sp, #-32]!
  40220c:	stp	x20, x19, [sp, #16]
  402210:	mov	x20, x0
  402214:	mov	w0, #0x10                  	// #16
  402218:	mov	x29, sp
  40221c:	mov	x19, x1
  402220:	bl	401440 <xmalloc@plt>
  402224:	stp	x20, x19, [x0]
  402228:	ldp	x20, x19, [sp, #16]
  40222c:	ldp	x29, x30, [sp], #32
  402230:	ret

0000000000402234 <yyerror>:
  402234:	stp	x29, x30, [sp, #-16]!
  402238:	adrp	x8, 415000 <memcpy@GLIBC_2.17>
  40223c:	ldr	x8, [x8, #432]
  402240:	adrp	x1, 404000 <yytranslate+0x2>
  402244:	mov	x2, x0
  402248:	add	x1, x1, #0x3d8
  40224c:	mov	x0, x8
  402250:	mov	x29, sp
  402254:	bl	401600 <fprintf@plt>
  402258:	ldp	x29, x30, [sp], #16
  40225c:	ret

0000000000402260 <yydestruct>:
  402260:	stp	x29, x30, [sp, #-16]!
  402264:	sub	w8, w1, #0xa
  402268:	cmp	w8, #0x14
  40226c:	mov	x29, sp
  402270:	b.hi	4022b4 <yydestruct+0x54>  // b.pmore
  402274:	adrp	x9, 403000 <print_condition_negation>
  402278:	add	x9, x9, #0xfb5
  40227c:	adr	x10, 40228c <yydestruct+0x2c>
  402280:	ldrb	w11, [x9, x8]
  402284:	add	x10, x10, x11, lsl #2
  402288:	br	x10
  40228c:	ldr	x0, [x2]
  402290:	bl	401550 <free@plt>
  402294:	ldp	x29, x30, [sp], #16
  402298:	ret
  40229c:	ldr	x0, [x2]
  4022a0:	bl	402394 <cldr_plural_condition_free>
  4022a4:	ldp	x29, x30, [sp], #16
  4022a8:	ret
  4022ac:	ldr	x0, [x2]
  4022b0:	bl	40230c <cldr_plural_range_free>
  4022b4:	ldp	x29, x30, [sp], #16
  4022b8:	ret
  4022bc:	ldr	x0, [x2]
  4022c0:	bl	4023e4 <cldr_plural_relation_free>
  4022c4:	ldp	x29, x30, [sp], #16
  4022c8:	ret
  4022cc:	ldr	x0, [x2]
  4022d0:	bl	40234c <cldr_plural_range_list_free>
  4022d4:	ldp	x29, x30, [sp], #16
  4022d8:	ret

00000000004022dc <u8_mbtouc>:
  4022dc:	stp	x29, x30, [sp, #-16]!
  4022e0:	ldrsb	w8, [x1]
  4022e4:	mov	x29, sp
  4022e8:	tbnz	w8, #31, 402300 <u8_mbtouc+0x24>
  4022ec:	and	w8, w8, #0xff
  4022f0:	str	w8, [x0]
  4022f4:	mov	w0, #0x1                   	// #1
  4022f8:	ldp	x29, x30, [sp], #16
  4022fc:	ret
  402300:	bl	4014d0 <u8_mbtouc_aux@plt>
  402304:	ldp	x29, x30, [sp], #16
  402308:	ret

000000000040230c <cldr_plural_range_free>:
  40230c:	stp	x29, x30, [sp, #-32]!
  402310:	str	x19, [sp, #16]
  402314:	mov	x19, x0
  402318:	ldr	x0, [x0]
  40231c:	ldr	x8, [x19, #8]
  402320:	mov	x29, sp
  402324:	cmp	x0, x8
  402328:	b.eq	402330 <cldr_plural_range_free+0x24>  // b.none
  40232c:	bl	401550 <free@plt>
  402330:	ldr	x0, [x19, #8]
  402334:	bl	401550 <free@plt>
  402338:	mov	x0, x19
  40233c:	bl	401550 <free@plt>
  402340:	ldr	x19, [sp, #16]
  402344:	ldp	x29, x30, [sp], #32
  402348:	ret

000000000040234c <cldr_plural_range_list_free>:
  40234c:	stp	x29, x30, [sp, #-32]!
  402350:	str	x19, [sp, #16]
  402354:	mov	x19, x0
  402358:	ldp	x0, x9, [x0]
  40235c:	mov	x29, sp
  402360:	sub	x8, x9, #0x1
  402364:	str	x8, [x19, #8]
  402368:	cbz	x9, 40237c <cldr_plural_range_list_free+0x30>
  40236c:	ldr	x0, [x0, x8, lsl #3]
  402370:	bl	40230c <cldr_plural_range_free>
  402374:	ldp	x0, x9, [x19]
  402378:	b	402360 <cldr_plural_range_list_free+0x14>
  40237c:	bl	401550 <free@plt>
  402380:	mov	x0, x19
  402384:	bl	401550 <free@plt>
  402388:	ldr	x19, [sp, #16]
  40238c:	ldp	x29, x30, [sp], #32
  402390:	ret

0000000000402394 <cldr_plural_condition_free>:
  402394:	stp	x29, x30, [sp, #-32]!
  402398:	ldr	w8, [x0]
  40239c:	str	x19, [sp, #16]
  4023a0:	mov	x19, x0
  4023a4:	mov	x29, sp
  4023a8:	cmp	w8, #0x2
  4023ac:	b.cs	4023c4 <cldr_plural_condition_free+0x30>  // b.hs, b.nlast
  4023b0:	ldr	x0, [x19, #8]
  4023b4:	bl	402394 <cldr_plural_condition_free>
  4023b8:	ldr	x0, [x19, #16]
  4023bc:	bl	402394 <cldr_plural_condition_free>
  4023c0:	b	4023d0 <cldr_plural_condition_free+0x3c>
  4023c4:	b.ne	4023d0 <cldr_plural_condition_free+0x3c>  // b.any
  4023c8:	ldr	x0, [x19, #8]
  4023cc:	bl	4023e4 <cldr_plural_relation_free>
  4023d0:	mov	x0, x19
  4023d4:	bl	401550 <free@plt>
  4023d8:	ldr	x19, [sp, #16]
  4023dc:	ldp	x29, x30, [sp], #32
  4023e0:	ret

00000000004023e4 <cldr_plural_relation_free>:
  4023e4:	stp	x29, x30, [sp, #-32]!
  4023e8:	str	x19, [sp, #16]
  4023ec:	mov	x19, x0
  4023f0:	ldr	x0, [x0]
  4023f4:	mov	x29, sp
  4023f8:	bl	401550 <free@plt>
  4023fc:	ldr	x0, [x19, #16]
  402400:	bl	40234c <cldr_plural_range_list_free>
  402404:	mov	x0, x19
  402408:	bl	401550 <free@plt>
  40240c:	ldr	x19, [sp, #16]
  402410:	ldp	x29, x30, [sp], #32
  402414:	ret

0000000000402418 <cldr_plural_rule_list_free>:
  402418:	stp	x29, x30, [sp, #-32]!
  40241c:	str	x19, [sp, #16]
  402420:	mov	x19, x0
  402424:	ldp	x0, x9, [x0]
  402428:	mov	x29, sp
  40242c:	sub	x8, x9, #0x1
  402430:	str	x8, [x19, #8]
  402434:	cbz	x9, 402448 <cldr_plural_rule_list_free+0x30>
  402438:	ldr	x0, [x0, x8, lsl #3]
  40243c:	bl	402460 <cldr_plural_rule_free>
  402440:	ldp	x0, x9, [x19]
  402444:	b	40242c <cldr_plural_rule_list_free+0x14>
  402448:	bl	401550 <free@plt>
  40244c:	mov	x0, x19
  402450:	bl	401550 <free@plt>
  402454:	ldr	x19, [sp, #16]
  402458:	ldp	x29, x30, [sp], #32
  40245c:	ret

0000000000402460 <cldr_plural_rule_free>:
  402460:	stp	x29, x30, [sp, #-32]!
  402464:	str	x19, [sp, #16]
  402468:	mov	x19, x0
  40246c:	ldr	x0, [x0]
  402470:	mov	x29, sp
  402474:	bl	401550 <free@plt>
  402478:	ldr	x0, [x19, #8]
  40247c:	bl	402394 <cldr_plural_condition_free>
  402480:	mov	x0, x19
  402484:	bl	401550 <free@plt>
  402488:	ldr	x19, [sp, #16]
  40248c:	ldp	x29, x30, [sp], #32
  402490:	ret

0000000000402494 <cldr_plural_parse>:
  402494:	sub	sp, sp, #0x40
  402498:	stp	x29, x30, [sp, #32]
  40249c:	str	x19, [sp, #48]
  4024a0:	add	x29, sp, #0x20
  4024a4:	mov	x19, x0
  4024a8:	stp	xzr, xzr, [sp, #16]
  4024ac:	str	x0, [sp, #8]
  4024b0:	bl	401300 <strlen@plt>
  4024b4:	add	x8, x19, x0
  4024b8:	mov	w0, #0x18                  	// #24
  4024bc:	str	x8, [sp, #16]
  4024c0:	bl	401440 <xmalloc@plt>
  4024c4:	str	x0, [sp, #24]
  4024c8:	stp	xzr, xzr, [x0, #8]
  4024cc:	str	xzr, [x0]
  4024d0:	add	x0, sp, #0x8
  4024d4:	bl	40172c <yyparse>
  4024d8:	ldr	x8, [sp, #24]
  4024dc:	ldr	x19, [sp, #48]
  4024e0:	ldp	x29, x30, [sp, #32]
  4024e4:	cmp	w0, #0x0
  4024e8:	csel	x0, x8, xzr, eq  // eq = none
  4024ec:	add	sp, sp, #0x40
  4024f0:	ret

00000000004024f4 <cldr_plural_rule_list_print>:
  4024f4:	stp	x29, x30, [sp, #-96]!
  4024f8:	stp	x28, x27, [sp, #16]
  4024fc:	stp	x26, x25, [sp, #32]
  402500:	stp	x24, x23, [sp, #48]
  402504:	stp	x22, x21, [sp, #64]
  402508:	stp	x20, x19, [sp, #80]
  40250c:	ldr	x23, [x0, #8]
  402510:	mov	x20, x0
  402514:	mov	x19, x1
  402518:	mov	x29, sp
  40251c:	cbz	x23, 402544 <cldr_plural_rule_list_print+0x50>
  402520:	mov	x21, xzr
  402524:	ldr	x8, [x20]
  402528:	ldr	x8, [x8, x21, lsl #3]
  40252c:	ldr	x0, [x8, #8]
  402530:	bl	4028a8 <eval_condition>
  402534:	ldr	x23, [x20, #8]
  402538:	add	x21, x21, #0x1
  40253c:	cmp	x21, x23
  402540:	b.cc	402524 <cldr_plural_rule_list_print+0x30>  // b.lo, b.ul, b.last
  402544:	cbz	x23, 40258c <cldr_plural_rule_list_print+0x98>
  402548:	ldr	x25, [x20]
  40254c:	mov	w24, wzr
  402550:	ldr	x8, [x25], #8
  402554:	ldr	x21, [x8, #8]
  402558:	mov	x0, x21
  40255c:	bl	402a1c <find_largest_modulus>
  402560:	mov	w22, w0
  402564:	mov	x0, x21
  402568:	bl	402a80 <find_largest_number>
  40256c:	cmp	w22, w0
  402570:	ccmp	w22, w24, #0x4, ge  // ge = tcont
  402574:	csel	w24, w22, w24, gt
  402578:	subs	x23, x23, #0x1
  40257c:	b.ne	402550 <cldr_plural_rule_list_print+0x5c>  // b.any
  402580:	cmp	w24, #0x1
  402584:	b.ge	402598 <cldr_plural_rule_list_print+0xa4>  // b.tcont
  402588:	b	402684 <cldr_plural_rule_list_print+0x190>
  40258c:	mov	w24, wzr
  402590:	cmp	w24, #0x1
  402594:	b.lt	402684 <cldr_plural_rule_list_print+0x190>  // b.tstop
  402598:	mov	w25, w24
  40259c:	sxtw	x22, w25
  4025a0:	mov	x0, x22
  4025a4:	bl	401440 <xmalloc@plt>
  4025a8:	mov	w1, wzr
  4025ac:	mov	x2, x22
  4025b0:	mov	x21, x0
  4025b4:	bl	401430 <memset@plt>
  4025b8:	ldr	x8, [x20, #8]
  4025bc:	cbz	x8, 402654 <cldr_plural_rule_list_print+0x160>
  4025c0:	ldr	x26, [x20]
  4025c4:	mov	x24, xzr
  4025c8:	mov	w27, #0x1                   	// #1
  4025cc:	cmp	w25, #0x1
  4025d0:	b.lt	40260c <cldr_plural_rule_list_print+0x118>  // b.tstop
  4025d4:	ldr	x8, [x26, x24, lsl #3]
  4025d8:	mov	x28, xzr
  4025dc:	ldr	x22, [x8, #8]
  4025e0:	b	4025f0 <cldr_plural_rule_list_print+0xfc>
  4025e4:	cmp	x25, x23
  4025e8:	mov	x28, x23
  4025ec:	b.eq	40260c <cldr_plural_rule_list_print+0x118>  // b.none
  4025f0:	add	x23, x28, #0x1
  4025f4:	mov	x0, x22
  4025f8:	mov	w1, w23
  4025fc:	bl	402b60 <apply_condition>
  402600:	tbz	w0, #0, 4025e4 <cldr_plural_rule_list_print+0xf0>
  402604:	strb	w27, [x21, x28]
  402608:	b	4025e4 <cldr_plural_rule_list_print+0xf0>
  40260c:	cmp	w25, #0x1
  402610:	b.lt	402634 <cldr_plural_rule_list_print+0x140>  // b.tstop
  402614:	mov	x8, xzr
  402618:	ldrb	w9, [x21, x8]
  40261c:	cbz	w9, 402638 <cldr_plural_rule_list_print+0x144>
  402620:	add	x8, x8, #0x1
  402624:	cmp	x25, x8
  402628:	b.ne	402618 <cldr_plural_rule_list_print+0x124>  // b.any
  40262c:	mov	w8, w25
  402630:	b	402638 <cldr_plural_rule_list_print+0x144>
  402634:	mov	w8, wzr
  402638:	cmp	w8, w25
  40263c:	b.eq	402658 <cldr_plural_rule_list_print+0x164>  // b.none
  402640:	ldr	x8, [x20, #8]
  402644:	add	x24, x24, #0x1
  402648:	cmp	x24, x8
  40264c:	b.cc	4025cc <cldr_plural_rule_list_print+0xd8>  // b.lo, b.ul, b.last
  402650:	b	402658 <cldr_plural_rule_list_print+0x164>
  402654:	mov	x24, xzr
  402658:	mov	x0, x21
  40265c:	bl	401550 <free@plt>
  402660:	ldr	x8, [x20, #8]
  402664:	cmp	x24, x8
  402668:	b.cs	402684 <cldr_plural_rule_list_print+0x190>  // b.hs, b.nlast
  40266c:	ldr	x9, [x20]
  402670:	sub	x8, x8, #0x1
  402674:	str	x8, [x20, #8]
  402678:	ldr	x0, [x9, x8, lsl #3]
  40267c:	bl	402460 <cldr_plural_rule_free>
  402680:	b	402660 <cldr_plural_rule_list_print+0x16c>
  402684:	ldr	x8, [x20, #8]
  402688:	cbz	x8, 4026d4 <cldr_plural_rule_list_print+0x1e0>
  40268c:	ldp	x10, x8, [x20]
  402690:	mov	x9, xzr
  402694:	mov	w21, #0x1                   	// #1
  402698:	ldr	x11, [x10, x9, lsl #3]
  40269c:	add	x9, x9, #0x1
  4026a0:	ldr	x11, [x11, #8]
  4026a4:	ldr	w11, [x11]
  4026a8:	sub	w11, w11, #0x3
  4026ac:	cmp	w11, #0x1
  4026b0:	cinc	x21, x21, hi  // hi = pmore
  4026b4:	cmp	x9, x8
  4026b8:	b.cc	402698 <cldr_plural_rule_list_print+0x1a4>  // b.lo, b.ul, b.last
  4026bc:	cmp	x21, #0x1
  4026c0:	b.ne	4026e0 <cldr_plural_rule_list_print+0x1ec>  // b.any
  4026c4:	adrp	x0, 404000 <yytranslate+0x2>
  4026c8:	add	x0, x0, #0x2d1
  4026cc:	mov	w1, #0x16                  	// #22
  4026d0:	b	402880 <cldr_plural_rule_list_print+0x38c>
  4026d4:	mov	w21, #0x1                   	// #1
  4026d8:	cmp	x21, #0x1
  4026dc:	b.eq	4026c4 <cldr_plural_rule_list_print+0x1d0>  // b.none
  4026e0:	cmp	x21, #0x2
  4026e4:	b.ne	40275c <cldr_plural_rule_list_print+0x268>  // b.any
  4026e8:	cbz	x8, 402720 <cldr_plural_rule_list_print+0x22c>
  4026ec:	ldr	x10, [x20]
  4026f0:	mov	x9, xzr
  4026f4:	ldr	x11, [x10, x9, lsl #3]
  4026f8:	ldr	x11, [x11, #8]
  4026fc:	ldr	w11, [x11]
  402700:	sub	w11, w11, #0x3
  402704:	cmp	w11, #0x1
  402708:	b.hi	402724 <cldr_plural_rule_list_print+0x230>  // b.pmore
  40270c:	add	x9, x9, #0x1
  402710:	cmp	x8, x9
  402714:	b.ne	4026f4 <cldr_plural_rule_list_print+0x200>  // b.any
  402718:	mov	x9, x8
  40271c:	b	402724 <cldr_plural_rule_list_print+0x230>
  402720:	mov	x9, xzr
  402724:	ldr	x8, [x20]
  402728:	adrp	x24, 404000 <yytranslate+0x2>
  40272c:	mov	x23, xzr
  402730:	add	x24, x24, #0x398
  402734:	ldr	x8, [x8, x9, lsl #3]
  402738:	ldr	x22, [x8, #8]
  40273c:	ldr	x8, [x24, x23]
  402740:	mov	x0, x22
  402744:	mov	x1, x19
  402748:	blr	x8
  40274c:	tbnz	w0, #0, 40288c <cldr_plural_rule_list_print+0x398>
  402750:	add	x23, x23, #0x8
  402754:	cmp	x23, #0x10
  402758:	b.ne	40273c <cldr_plural_rule_list_print+0x248>  // b.any
  40275c:	adrp	x1, 404000 <yytranslate+0x2>
  402760:	add	x1, x1, #0x2e8
  402764:	mov	x0, x19
  402768:	mov	x2, x21
  40276c:	bl	401600 <fprintf@plt>
  402770:	ldr	x8, [x20, #8]
  402774:	cbz	x8, 402850 <cldr_plural_rule_list_print+0x35c>
  402778:	adrp	x23, 404000 <yytranslate+0x2>
  40277c:	mov	x24, xzr
  402780:	mov	x22, xzr
  402784:	mov	x25, #0xffffffffffffffff    	// #-1
  402788:	mov	w26, #0x1                   	// #1
  40278c:	add	x23, x23, #0x2ff
  402790:	b	4027ac <cldr_plural_rule_list_print+0x2b8>
  402794:	ldr	x8, [x20, #8]
  402798:	add	x24, x24, #0x1
  40279c:	sub	x25, x25, #0x1
  4027a0:	add	x26, x26, #0x1
  4027a4:	cmp	x24, x8
  4027a8:	b.cs	402854 <cldr_plural_rule_list_print+0x360>  // b.hs, b.nlast
  4027ac:	ldr	x8, [x20]
  4027b0:	cmp	x21, #0x2
  4027b4:	cset	w2, eq  // eq = none
  4027b8:	mov	w1, #0x4                   	// #4
  4027bc:	ldr	x8, [x8, x24, lsl #3]
  4027c0:	mov	x3, x19
  4027c4:	ldr	x0, [x8, #8]
  4027c8:	bl	402c74 <print_condition>
  4027cc:	tbz	w0, #0, 402794 <cldr_plural_rule_list_print+0x2a0>
  4027d0:	ldr	x8, [x20, #8]
  4027d4:	cmp	x8, #0x2
  4027d8:	b.cc	402794 <cldr_plural_rule_list_print+0x2a0>  // b.lo, b.ul, b.last
  4027dc:	add	x9, x24, #0x1
  4027e0:	cmp	x9, x8
  4027e4:	b.cs	402820 <cldr_plural_rule_list_print+0x32c>  // b.hs, b.nlast
  4027e8:	ldr	x11, [x20]
  4027ec:	mov	w9, wzr
  4027f0:	add	x10, x8, x25
  4027f4:	add	x11, x11, x26, lsl #3
  4027f8:	ldr	x12, [x11], #8
  4027fc:	ldr	x12, [x12, #8]
  402800:	ldr	w12, [x12]
  402804:	sub	w12, w12, #0x3
  402808:	cmp	w12, #0x1
  40280c:	cset	w12, hi  // hi = pmore
  402810:	subs	x10, x10, #0x1
  402814:	orr	w9, w9, w12
  402818:	b.ne	4027f8 <cldr_plural_rule_list_print+0x304>  // b.any
  40281c:	b	402824 <cldr_plural_rule_list_print+0x330>
  402820:	mov	w9, wzr
  402824:	sub	x8, x8, #0x1
  402828:	cmp	x24, x8
  40282c:	b.cs	402794 <cldr_plural_rule_list_print+0x2a0>  // b.hs, b.nlast
  402830:	tbz	w9, #0, 402794 <cldr_plural_rule_list_print+0x2a0>
  402834:	mov	x0, x19
  402838:	mov	x1, x23
  40283c:	mov	x2, x22
  402840:	add	x27, x22, #0x1
  402844:	bl	401600 <fprintf@plt>
  402848:	mov	x22, x27
  40284c:	b	402794 <cldr_plural_rule_list_print+0x2a0>
  402850:	mov	x22, xzr
  402854:	cmp	x8, #0x2
  402858:	b.cc	402874 <cldr_plural_rule_list_print+0x380>  // b.lo, b.ul, b.last
  40285c:	adrp	x1, 404000 <yytranslate+0x2>
  402860:	add	x3, x22, #0x1
  402864:	add	x1, x1, #0x309
  402868:	mov	x0, x19
  40286c:	mov	x2, x22
  402870:	bl	401600 <fprintf@plt>
  402874:	adrp	x0, 404000 <yytranslate+0x2>
  402878:	add	x0, x0, #0x331
  40287c:	mov	w1, #0x3                   	// #3
  402880:	mov	w2, #0x1                   	// #1
  402884:	mov	x3, x19
  402888:	bl	401560 <fwrite@plt>
  40288c:	ldp	x20, x19, [sp, #80]
  402890:	ldp	x22, x21, [sp, #64]
  402894:	ldp	x24, x23, [sp, #48]
  402898:	ldp	x26, x25, [sp, #32]
  40289c:	ldp	x28, x27, [sp, #16]
  4028a0:	ldp	x29, x30, [sp], #96
  4028a4:	ret

00000000004028a8 <eval_condition>:
  4028a8:	stp	x29, x30, [sp, #-48]!
  4028ac:	stp	x22, x21, [sp, #16]
  4028b0:	stp	x20, x19, [sp, #32]
  4028b4:	ldr	w8, [x0]
  4028b8:	mov	x19, x0
  4028bc:	mov	x29, sp
  4028c0:	cmp	w8, #0x1
  4028c4:	b.eq	402924 <eval_condition+0x7c>  // b.none
  4028c8:	cbnz	w8, 402970 <eval_condition+0xc8>
  4028cc:	mov	x22, x19
  4028d0:	ldr	x0, [x22, #8]!
  4028d4:	bl	4028a8 <eval_condition>
  4028d8:	ldr	x0, [x22, #8]
  4028dc:	bl	4028a8 <eval_condition>
  4028e0:	ldr	x20, [x22]
  4028e4:	ldr	w8, [x20]
  4028e8:	cmp	w8, #0x4
  4028ec:	b.eq	4029a8 <eval_condition+0x100>  // b.none
  4028f0:	ldr	x0, [x19, #16]
  4028f4:	ldr	w9, [x0]
  4028f8:	cmp	w9, #0x4
  4028fc:	b.eq	4029a8 <eval_condition+0x100>  // b.none
  402900:	cmp	w8, #0x3
  402904:	b.ne	402910 <eval_condition+0x68>  // b.any
  402908:	cmp	w9, #0x3
  40290c:	b.eq	402958 <eval_condition+0xb0>  // b.none
  402910:	cmp	w8, #0x3
  402914:	b.eq	4029d8 <eval_condition+0x130>  // b.none
  402918:	cmp	w9, #0x3
  40291c:	b.ne	4029c0 <eval_condition+0x118>  // b.any
  402920:	b	4029f8 <eval_condition+0x150>
  402924:	mov	x22, x19
  402928:	ldr	x0, [x22, #8]!
  40292c:	bl	4028a8 <eval_condition>
  402930:	ldr	x0, [x22, #8]
  402934:	bl	4028a8 <eval_condition>
  402938:	ldr	x20, [x22]
  40293c:	ldr	w8, [x20]
  402940:	cmp	w8, #0x3
  402944:	b.eq	402958 <eval_condition+0xb0>  // b.none
  402948:	ldr	x0, [x19, #16]
  40294c:	ldr	w9, [x0]
  402950:	cmp	w9, #0x3
  402954:	b.ne	402998 <eval_condition+0xf0>  // b.any
  402958:	mov	x0, x20
  40295c:	bl	402394 <cldr_plural_condition_free>
  402960:	ldr	x0, [x19, #16]
  402964:	bl	402394 <cldr_plural_condition_free>
  402968:	mov	w8, #0x3                   	// #3
  40296c:	b	4029bc <eval_condition+0x114>
  402970:	ldr	x0, [x19, #8]
  402974:	bl	402e0c <eval_relation>
  402978:	sub	w8, w0, #0x3
  40297c:	cmp	w8, #0x1
  402980:	b.hi	4029c0 <eval_condition+0x118>  // b.pmore
  402984:	mov	w20, w0
  402988:	ldr	x0, [x19, #8]
  40298c:	bl	4023e4 <cldr_plural_relation_free>
  402990:	str	w20, [x19]
  402994:	b	4029c0 <eval_condition+0x118>
  402998:	cmp	w8, #0x4
  40299c:	b.ne	4029d0 <eval_condition+0x128>  // b.any
  4029a0:	cmp	w9, #0x4
  4029a4:	b.ne	4029d0 <eval_condition+0x128>  // b.any
  4029a8:	mov	x0, x20
  4029ac:	bl	402394 <cldr_plural_condition_free>
  4029b0:	ldr	x0, [x19, #16]
  4029b4:	bl	402394 <cldr_plural_condition_free>
  4029b8:	mov	w8, #0x4                   	// #4
  4029bc:	str	w8, [x19]
  4029c0:	ldp	x20, x19, [sp, #32]
  4029c4:	ldp	x22, x21, [sp, #16]
  4029c8:	ldp	x29, x30, [sp], #48
  4029cc:	ret
  4029d0:	cmp	w8, #0x4
  4029d4:	b.ne	4029f0 <eval_condition+0x148>  // b.any
  4029d8:	ldr	x21, [x19, #16]
  4029dc:	mov	x0, x20
  4029e0:	bl	402394 <cldr_plural_condition_free>
  4029e4:	ldr	x8, [x19, #16]
  4029e8:	mov	x0, x21
  4029ec:	b	402a04 <eval_condition+0x15c>
  4029f0:	cmp	w9, #0x4
  4029f4:	b.ne	4029c0 <eval_condition+0x118>  // b.any
  4029f8:	bl	402394 <cldr_plural_condition_free>
  4029fc:	ldr	x8, [x19, #8]
  402a00:	mov	x0, x20
  402a04:	ldr	w9, [x8]
  402a08:	str	w9, [x19]
  402a0c:	ldur	q0, [x8, #8]
  402a10:	str	q0, [x22]
  402a14:	bl	401550 <free@plt>
  402a18:	b	4029c0 <eval_condition+0x118>

0000000000402a1c <find_largest_modulus>:
  402a1c:	stp	x29, x30, [sp, #-32]!
  402a20:	ldr	w8, [x0]
  402a24:	str	x19, [sp, #16]
  402a28:	mov	x19, x0
  402a2c:	mov	x29, sp
  402a30:	cmp	w8, #0x2
  402a34:	b.cs	402a5c <find_largest_modulus+0x40>  // b.hs, b.nlast
  402a38:	ldr	x0, [x19, #8]
  402a3c:	bl	402a1c <find_largest_modulus>
  402a40:	ldr	x8, [x19, #16]
  402a44:	mov	w19, w0
  402a48:	mov	x0, x8
  402a4c:	bl	402a1c <find_largest_modulus>
  402a50:	cmp	w19, w0
  402a54:	csel	w0, w19, w0, gt
  402a58:	b	402a74 <find_largest_modulus+0x58>
  402a5c:	b.ne	402a70 <find_largest_modulus+0x54>  // b.any
  402a60:	ldr	x8, [x19, #8]
  402a64:	ldr	x8, [x8]
  402a68:	ldr	w0, [x8, #4]
  402a6c:	b	402a74 <find_largest_modulus+0x58>
  402a70:	mov	w0, wzr
  402a74:	ldr	x19, [sp, #16]
  402a78:	ldp	x29, x30, [sp], #32
  402a7c:	ret

0000000000402a80 <find_largest_number>:
  402a80:	stp	x29, x30, [sp, #-32]!
  402a84:	ldr	w8, [x0]
  402a88:	str	x19, [sp, #16]
  402a8c:	mov	x19, x0
  402a90:	mov	x29, sp
  402a94:	cmp	w8, #0x2
  402a98:	b.cs	402ac0 <find_largest_number+0x40>  // b.hs, b.nlast
  402a9c:	ldr	x0, [x19, #8]
  402aa0:	bl	402a80 <find_largest_number>
  402aa4:	ldr	x8, [x19, #16]
  402aa8:	mov	w19, w0
  402aac:	mov	x0, x8
  402ab0:	bl	402a80 <find_largest_number>
  402ab4:	cmp	w19, w0
  402ab8:	csel	w0, w19, w0, gt
  402abc:	b	402b54 <find_largest_number+0xd4>
  402ac0:	b.ne	402b50 <find_largest_number+0xd0>  // b.any
  402ac4:	ldr	x8, [x19, #8]
  402ac8:	ldr	x12, [x8, #16]
  402acc:	ldr	x8, [x12, #8]
  402ad0:	cbz	x8, 402b50 <find_largest_number+0xd0>
  402ad4:	ldr	x9, [x19, #8]
  402ad8:	mov	x8, xzr
  402adc:	mov	w11, wzr
  402ae0:	ldr	x9, [x9, #16]
  402ae4:	ldr	x10, [x9, #8]
  402ae8:	b	402b04 <find_largest_number+0x84>
  402aec:	mov	w0, w11
  402af0:	add	x8, x8, #0x1
  402af4:	cmp	x8, x10
  402af8:	mov	x12, x9
  402afc:	mov	w11, w0
  402b00:	b.cs	402b54 <find_largest_number+0xd4>  // b.hs, b.nlast
  402b04:	ldr	x12, [x12]
  402b08:	ldr	x12, [x12, x8, lsl #3]
  402b0c:	ldr	x12, [x12, #8]
  402b10:	ldr	w13, [x12]
  402b14:	cmp	w13, #0x1
  402b18:	b.eq	402b34 <find_largest_number+0xb4>  // b.none
  402b1c:	cbnz	w13, 402aec <find_largest_number+0x6c>
  402b20:	ldr	w0, [x12, #8]
  402b24:	cmp	w0, w11
  402b28:	b.gt	402af0 <find_largest_number+0x70>
  402b2c:	cmp	w13, #0x1
  402b30:	b.ne	402aec <find_largest_number+0x6c>  // b.any
  402b34:	ldr	d0, [x12, #8]
  402b38:	scvtf	d1, w11
  402b3c:	mov	w0, w11
  402b40:	fcmp	d0, d1
  402b44:	b.le	402af0 <find_largest_number+0x70>
  402b48:	fcvtzs	w0, d0
  402b4c:	b	402af0 <find_largest_number+0x70>
  402b50:	mov	w0, wzr
  402b54:	ldr	x19, [sp, #16]
  402b58:	ldp	x29, x30, [sp], #32
  402b5c:	ret

0000000000402b60 <apply_condition>:
  402b60:	stp	x29, x30, [sp, #-32]!
  402b64:	stp	x20, x19, [sp, #16]
  402b68:	ldr	w8, [x0]
  402b6c:	mov	x20, x0
  402b70:	mov	w19, w1
  402b74:	mov	x29, sp
  402b78:	cmp	w8, #0x2
  402b7c:	b.eq	402ba4 <apply_condition+0x44>  // b.none
  402b80:	cmp	w8, #0x1
  402b84:	b.eq	402c30 <apply_condition+0xd0>  // b.none
  402b88:	cbnz	w8, 402b9c <apply_condition+0x3c>
  402b8c:	ldr	x0, [x20, #8]
  402b90:	mov	w1, w19
  402b94:	bl	402b60 <apply_condition>
  402b98:	tbnz	w0, #0, 402c48 <apply_condition+0xe8>
  402b9c:	mov	w0, wzr
  402ba0:	b	402c64 <apply_condition+0x104>
  402ba4:	ldr	x8, [x20, #8]
  402ba8:	ldr	x9, [x8]
  402bac:	ldr	w9, [x9, #4]
  402bb0:	cmp	w9, #0x1
  402bb4:	b.lt	402bc0 <apply_condition+0x60>  // b.tstop
  402bb8:	sdiv	w10, w19, w9
  402bbc:	msub	w19, w10, w9, w19
  402bc0:	ldr	x10, [x8, #16]
  402bc4:	ldr	x9, [x10, #8]
  402bc8:	cbz	x9, 402c58 <apply_condition+0xf8>
  402bcc:	mov	x9, xzr
  402bd0:	b	402bf0 <apply_condition+0x90>
  402bd4:	mov	w10, #0x1                   	// #1
  402bd8:	tbz	w10, #0, 402c64 <apply_condition+0x104>
  402bdc:	ldr	x10, [x8, #16]
  402be0:	add	x9, x9, #0x1
  402be4:	ldr	x11, [x10, #8]
  402be8:	cmp	x9, x11
  402bec:	b.cs	402c58 <apply_condition+0xf8>  // b.hs, b.nlast
  402bf0:	ldr	x10, [x10]
  402bf4:	ldr	x10, [x10, x9, lsl #3]
  402bf8:	ldr	x11, [x10]
  402bfc:	ldr	w11, [x11, #8]
  402c00:	cmp	w11, w19
  402c04:	b.gt	402bd4 <apply_condition+0x74>
  402c08:	ldr	x10, [x10, #8]
  402c0c:	ldr	w10, [x10, #8]
  402c10:	cmp	w19, w10
  402c14:	b.gt	402bd4 <apply_condition+0x74>
  402c18:	ldr	w11, [x8, #8]
  402c1c:	mov	w10, wzr
  402c20:	cmp	w11, #0x0
  402c24:	cset	w0, eq  // eq = none
  402c28:	tbnz	w10, #0, 402bdc <apply_condition+0x7c>
  402c2c:	b	402c64 <apply_condition+0x104>
  402c30:	ldr	x0, [x20, #8]
  402c34:	mov	w1, w19
  402c38:	bl	402b60 <apply_condition>
  402c3c:	tbz	w0, #0, 402c48 <apply_condition+0xe8>
  402c40:	mov	w0, #0x1                   	// #1
  402c44:	b	402c64 <apply_condition+0x104>
  402c48:	ldr	x0, [x20, #16]
  402c4c:	mov	w1, w19
  402c50:	bl	402b60 <apply_condition>
  402c54:	b	402c64 <apply_condition+0x104>
  402c58:	ldr	w8, [x8, #8]
  402c5c:	cmp	w8, #0x0
  402c60:	cset	w0, ne  // ne = any
  402c64:	ldp	x20, x19, [sp, #16]
  402c68:	and	w0, w0, #0x1
  402c6c:	ldp	x29, x30, [sp], #32
  402c70:	ret

0000000000402c74 <print_condition>:
  402c74:	stp	x29, x30, [sp, #-48]!
  402c78:	stp	x20, x19, [sp, #32]
  402c7c:	ldr	w8, [x0]
  402c80:	mov	x19, x3
  402c84:	mov	x20, x0
  402c88:	str	x21, [sp, #16]
  402c8c:	cmp	w8, #0x2
  402c90:	mov	x29, sp
  402c94:	b.eq	402cf4 <print_condition+0x80>  // b.none
  402c98:	cmp	w8, #0x1
  402c9c:	b.eq	402d0c <print_condition+0x98>  // b.none
  402ca0:	cbnz	w8, 402d4c <print_condition+0xd8>
  402ca4:	cmp	w1, #0x1
  402ca8:	b.ne	402d54 <print_condition+0xe0>  // b.any
  402cac:	mov	w0, #0x28                  	// #40
  402cb0:	mov	x1, x19
  402cb4:	bl	401380 <fputc@plt>
  402cb8:	ldr	x0, [x20, #8]
  402cbc:	mov	w1, wzr
  402cc0:	mov	w2, wzr
  402cc4:	mov	x3, x19
  402cc8:	bl	402c74 <print_condition>
  402ccc:	adrp	x0, 404000 <yytranslate+0x2>
  402cd0:	add	x0, x0, #0x353
  402cd4:	mov	w1, #0x4                   	// #4
  402cd8:	mov	w2, #0x1                   	// #1
  402cdc:	mov	x3, x19
  402ce0:	mov	w21, #0x1                   	// #1
  402ce4:	bl	401560 <fwrite@plt>
  402ce8:	ldr	x0, [x20, #16]
  402cec:	mov	w1, wzr
  402cf0:	b	402de0 <print_condition+0x16c>
  402cf4:	ldr	x0, [x20, #8]
  402cf8:	and	w2, w2, #0x1
  402cfc:	mov	x3, x19
  402d00:	bl	403154 <print_relation>
  402d04:	mov	w21, #0x1                   	// #1
  402d08:	b	402df8 <print_condition+0x184>
  402d0c:	cbz	w1, 402d9c <print_condition+0x128>
  402d10:	ldr	x0, [x20, #8]
  402d14:	mov	w1, #0x1                   	// #1
  402d18:	mov	w2, wzr
  402d1c:	mov	x3, x19
  402d20:	mov	w21, #0x1                   	// #1
  402d24:	bl	402c74 <print_condition>
  402d28:	adrp	x0, 404000 <yytranslate+0x2>
  402d2c:	add	x0, x0, #0x358
  402d30:	mov	w1, #0x4                   	// #4
  402d34:	mov	w2, #0x1                   	// #1
  402d38:	mov	x3, x19
  402d3c:	bl	401560 <fwrite@plt>
  402d40:	ldr	x0, [x20, #16]
  402d44:	mov	w1, #0x1                   	// #1
  402d48:	b	402d8c <print_condition+0x118>
  402d4c:	mov	w21, wzr
  402d50:	b	402df8 <print_condition+0x184>
  402d54:	ldr	x0, [x20, #8]
  402d58:	mov	w1, wzr
  402d5c:	mov	w2, wzr
  402d60:	mov	x3, x19
  402d64:	bl	402c74 <print_condition>
  402d68:	adrp	x0, 404000 <yytranslate+0x2>
  402d6c:	add	x0, x0, #0x353
  402d70:	mov	w1, #0x4                   	// #4
  402d74:	mov	w2, #0x1                   	// #1
  402d78:	mov	x3, x19
  402d7c:	mov	w21, #0x1                   	// #1
  402d80:	bl	401560 <fwrite@plt>
  402d84:	ldr	x0, [x20, #16]
  402d88:	mov	w1, wzr
  402d8c:	mov	w2, wzr
  402d90:	mov	x3, x19
  402d94:	bl	402c74 <print_condition>
  402d98:	b	402df8 <print_condition+0x184>
  402d9c:	mov	w0, #0x28                  	// #40
  402da0:	mov	x1, x19
  402da4:	bl	401380 <fputc@plt>
  402da8:	ldr	x0, [x20, #8]
  402dac:	mov	w1, #0x1                   	// #1
  402db0:	mov	w2, wzr
  402db4:	mov	x3, x19
  402db8:	mov	w21, #0x1                   	// #1
  402dbc:	bl	402c74 <print_condition>
  402dc0:	adrp	x0, 404000 <yytranslate+0x2>
  402dc4:	add	x0, x0, #0x358
  402dc8:	mov	w1, #0x4                   	// #4
  402dcc:	mov	w2, #0x1                   	// #1
  402dd0:	mov	x3, x19
  402dd4:	bl	401560 <fwrite@plt>
  402dd8:	ldr	x0, [x20, #16]
  402ddc:	mov	w1, #0x1                   	// #1
  402de0:	mov	w2, wzr
  402de4:	mov	x3, x19
  402de8:	bl	402c74 <print_condition>
  402dec:	mov	w0, #0x29                  	// #41
  402df0:	mov	x1, x19
  402df4:	bl	401380 <fputc@plt>
  402df8:	mov	w0, w21
  402dfc:	ldp	x20, x19, [sp, #32]
  402e00:	ldr	x21, [sp, #16]
  402e04:	ldp	x29, x30, [sp], #48
  402e08:	ret

0000000000402e0c <eval_relation>:
  402e0c:	ldr	x8, [x0]
  402e10:	ldr	w8, [x8]
  402e14:	sub	w9, w8, #0x66
  402e18:	cmp	w9, #0x11
  402e1c:	mov	w8, #0x2                   	// #2
  402e20:	b.hi	402fdc <eval_relation+0x1d0>  // b.pmore
  402e24:	mov	w10, #0x1                   	// #1
  402e28:	lsl	w9, w10, w9
  402e2c:	mov	w10, #0x4001                	// #16385
  402e30:	movk	w10, #0x3, lsl #16
  402e34:	tst	w9, w10
  402e38:	b.eq	402f48 <eval_relation+0x13c>  // b.none
  402e3c:	ldr	x10, [x0, #16]
  402e40:	ldr	x8, [x10, #8]
  402e44:	cbz	x8, 402fd8 <eval_relation+0x1cc>
  402e48:	ldr	w8, [x0, #8]
  402e4c:	mov	x9, xzr
  402e50:	b	402e74 <eval_relation+0x68>
  402e54:	ldr	d0, [x10, #8]
  402e58:	fcmp	d0, #0.0
  402e5c:	b.eq	402ff8 <eval_relation+0x1ec>  // b.none
  402e60:	ldr	x10, [x0, #16]
  402e64:	add	x9, x9, #0x1
  402e68:	ldr	x11, [x10, #8]
  402e6c:	cmp	x9, x11
  402e70:	b.cs	402fd8 <eval_relation+0x1cc>  // b.hs, b.nlast
  402e74:	ldr	x10, [x10]
  402e78:	cmp	w8, #0x1
  402e7c:	ldr	x10, [x10, x9, lsl #3]
  402e80:	b.eq	402ef0 <eval_relation+0xe4>  // b.none
  402e84:	cbnz	w8, 402e60 <eval_relation+0x54>
  402e88:	ldr	x11, [x10]
  402e8c:	ldr	w12, [x11]
  402e90:	cmp	w12, #0x1
  402e94:	b.eq	402eac <eval_relation+0xa0>  // b.none
  402e98:	cbnz	w12, 402ff8 <eval_relation+0x1ec>
  402e9c:	ldr	w13, [x11, #8]
  402ea0:	cbz	w13, 402eb8 <eval_relation+0xac>
  402ea4:	cmp	w12, #0x1
  402ea8:	b.ne	402ff8 <eval_relation+0x1ec>  // b.any
  402eac:	ldr	d0, [x11, #8]
  402eb0:	fcmp	d0, #0.0
  402eb4:	b.ne	402ff8 <eval_relation+0x1ec>  // b.any
  402eb8:	ldr	x11, [x10, #8]
  402ebc:	ldr	w12, [x11]
  402ec0:	cmp	w12, #0x1
  402ec4:	b.eq	402edc <eval_relation+0xd0>  // b.none
  402ec8:	cbnz	w12, 402ff8 <eval_relation+0x1ec>
  402ecc:	ldr	w13, [x11, #8]
  402ed0:	cbz	w13, 402ee8 <eval_relation+0xdc>
  402ed4:	cmp	w12, #0x1
  402ed8:	b.ne	402ff8 <eval_relation+0x1ec>  // b.any
  402edc:	ldr	d0, [x11, #8]
  402ee0:	fcmp	d0, #0.0
  402ee4:	b.ne	402ff8 <eval_relation+0x1ec>  // b.any
  402ee8:	cmp	w8, #0x1
  402eec:	b.ne	402e60 <eval_relation+0x54>  // b.any
  402ef0:	ldr	x11, [x10]
  402ef4:	ldr	w12, [x11]
  402ef8:	cmp	w12, #0x1
  402efc:	b.eq	402f14 <eval_relation+0x108>  // b.none
  402f00:	cbnz	w12, 402f20 <eval_relation+0x114>
  402f04:	ldr	w13, [x11, #8]
  402f08:	cbz	w13, 402ff8 <eval_relation+0x1ec>
  402f0c:	cmp	w12, #0x1
  402f10:	b.ne	402f20 <eval_relation+0x114>  // b.any
  402f14:	ldr	d0, [x11, #8]
  402f18:	fcmp	d0, #0.0
  402f1c:	b.eq	402ff8 <eval_relation+0x1ec>  // b.none
  402f20:	ldr	x10, [x10, #8]
  402f24:	ldr	w11, [x10]
  402f28:	cmp	w11, #0x1
  402f2c:	b.eq	402e54 <eval_relation+0x48>  // b.none
  402f30:	cbnz	w11, 402e60 <eval_relation+0x54>
  402f34:	ldr	w12, [x10, #8]
  402f38:	cbz	w12, 402ff8 <eval_relation+0x1ec>
  402f3c:	cmp	w11, #0x1
  402f40:	b.eq	402e54 <eval_relation+0x48>  // b.none
  402f44:	b	402e60 <eval_relation+0x54>
  402f48:	mov	w10, #0x108                 	// #264
  402f4c:	tst	w9, w10
  402f50:	b.eq	402fdc <eval_relation+0x1d0>  // b.none
  402f54:	ldr	x9, [x0, #16]
  402f58:	ldr	x8, [x9, #8]
  402f5c:	cbz	x8, 402fe4 <eval_relation+0x1d8>
  402f60:	mov	x8, xzr
  402f64:	b	402f7c <eval_relation+0x170>
  402f68:	ldr	x9, [x0, #16]
  402f6c:	add	x8, x8, #0x1
  402f70:	ldr	x10, [x9, #8]
  402f74:	cmp	x8, x10
  402f78:	b.cs	402fe4 <eval_relation+0x1d8>  // b.hs, b.nlast
  402f7c:	ldr	x9, [x9]
  402f80:	ldr	x9, [x9, x8, lsl #3]
  402f84:	ldr	x10, [x9]
  402f88:	ldr	w11, [x10]
  402f8c:	cmp	w11, #0x1
  402f90:	b.ne	402fb4 <eval_relation+0x1a8>  // b.any
  402f94:	ldr	d0, [x10, #8]
  402f98:	str	wzr, [x10]
  402f9c:	fcvtzs	w11, d0
  402fa0:	scvtf	d1, w11
  402fa4:	fcmp	d0, d1
  402fa8:	cset	w12, ne  // ne = any
  402fac:	add	w11, w12, w11
  402fb0:	str	w11, [x10, #8]
  402fb4:	ldr	x9, [x9, #8]
  402fb8:	ldr	w10, [x9]
  402fbc:	cmp	w10, #0x1
  402fc0:	b.ne	402f68 <eval_relation+0x15c>  // b.any
  402fc4:	ldr	d0, [x9, #8]
  402fc8:	str	wzr, [x9]
  402fcc:	fcvtzs	w10, d0
  402fd0:	str	w10, [x9, #8]
  402fd4:	b	402f68 <eval_relation+0x15c>
  402fd8:	mov	w8, #0x3                   	// #3
  402fdc:	mov	w0, w8
  402fe0:	ret
  402fe4:	ldr	x8, [x0]
  402fe8:	mov	w9, #0x69                  	// #105
  402fec:	mov	w0, #0x2                   	// #2
  402ff0:	str	w9, [x8]
  402ff4:	ret
  402ff8:	mov	w0, #0x4                   	// #4
  402ffc:	ret

0000000000403000 <print_condition_negation>:
  403000:	stp	x29, x30, [sp, #-16]!
  403004:	ldr	w8, [x0]
  403008:	mov	x29, sp
  40300c:	cmp	w8, #0x2
  403010:	b.ne	403044 <print_condition_negation+0x44>  // b.any
  403014:	ldr	x8, [x0, #8]
  403018:	ldr	w9, [x8, #8]
  40301c:	cbnz	w9, 403044 <print_condition_negation+0x44>
  403020:	ldr	x8, [x8, #16]
  403024:	ldr	x9, [x8, #8]
  403028:	cmp	x9, #0x1
  40302c:	b.ne	403044 <print_condition_negation+0x44>  // b.any
  403030:	ldr	x8, [x8]
  403034:	ldr	x9, [x8]
  403038:	ldp	x8, x9, [x9]
  40303c:	cmp	x8, x9
  403040:	b.eq	403050 <print_condition_negation+0x50>  // b.none
  403044:	mov	w0, wzr
  403048:	ldp	x29, x30, [sp], #16
  40304c:	ret
  403050:	ldr	w2, [x8, #8]
  403054:	adrp	x8, 404000 <yytranslate+0x2>
  403058:	add	x8, x8, #0x316
  40305c:	mov	x0, x1
  403060:	mov	x1, x8
  403064:	bl	401600 <fprintf@plt>
  403068:	mov	w0, #0x1                   	// #1
  40306c:	ldp	x29, x30, [sp], #16
  403070:	ret

0000000000403074 <print_condition_greater>:
  403074:	stp	x29, x30, [sp, #-16]!
  403078:	ldr	w8, [x0]
  40307c:	mov	x29, sp
  403080:	cmp	w8, #0x2
  403084:	b.ne	403148 <print_condition_greater+0xd4>  // b.any
  403088:	ldr	x11, [x0, #8]
  40308c:	ldr	w8, [x11, #8]
  403090:	cbnz	w8, 403148 <print_condition_greater+0xd4>
  403094:	ldr	x8, [x11, #16]
  403098:	ldr	x10, [x8, #8]
  40309c:	cbz	x10, 40313c <print_condition_greater+0xc8>
  4030a0:	mov	x9, xzr
  4030a4:	mov	w12, #0xffffffff            	// #-1
  4030a8:	ldr	x13, [x8]
  4030ac:	ldr	x13, [x13, x9, lsl #3]
  4030b0:	ldr	x14, [x13]
  4030b4:	ldr	w15, [x14]
  4030b8:	cbnz	w15, 4030e4 <print_condition_greater+0x70>
  4030bc:	ldr	x13, [x13, #8]
  4030c0:	ldr	w15, [x13]
  4030c4:	cbnz	w15, 4030e4 <print_condition_greater+0x70>
  4030c8:	ldr	w14, [x14, #8]
  4030cc:	add	w15, w12, #0x1
  4030d0:	cmp	w14, w15
  4030d4:	b.ne	4030e4 <print_condition_greater+0x70>  // b.any
  4030d8:	ldr	w12, [x13, #8]
  4030dc:	mov	w13, #0x1                   	// #1
  4030e0:	b	4030e8 <print_condition_greater+0x74>
  4030e4:	mov	w13, wzr
  4030e8:	cbz	w13, 403100 <print_condition_greater+0x8c>
  4030ec:	ldr	x8, [x11, #16]
  4030f0:	add	x9, x9, #0x1
  4030f4:	ldr	x10, [x8, #8]
  4030f8:	cmp	x9, x10
  4030fc:	b.cc	4030a8 <print_condition_greater+0x34>  // b.lo, b.ul, b.last
  403100:	cmp	x9, x10
  403104:	b.ne	403148 <print_condition_greater+0xd4>  // b.any
  403108:	ldr	x8, [x8]
  40310c:	mov	x0, x1
  403110:	add	x8, x8, x9, lsl #3
  403114:	ldur	x8, [x8, #-8]
  403118:	ldr	x8, [x8, #8]
  40311c:	ldr	w2, [x8, #8]
  403120:	adrp	x8, 404000 <yytranslate+0x2>
  403124:	add	x8, x8, #0x335
  403128:	mov	x1, x8
  40312c:	bl	401600 <fprintf@plt>
  403130:	mov	w0, #0x1                   	// #1
  403134:	ldp	x29, x30, [sp], #16
  403138:	ret
  40313c:	mov	x9, xzr
  403140:	cmp	x9, x10
  403144:	b.eq	403108 <print_condition_greater+0x94>  // b.none
  403148:	mov	w0, wzr
  40314c:	ldp	x29, x30, [sp], #16
  403150:	ret

0000000000403154 <print_relation>:
  403154:	stp	x29, x30, [sp, #-96]!
  403158:	stp	x28, x27, [sp, #16]
  40315c:	stp	x26, x25, [sp, #32]
  403160:	stp	x24, x23, [sp, #48]
  403164:	stp	x22, x21, [sp, #64]
  403168:	stp	x20, x19, [sp, #80]
  40316c:	ldr	w8, [x0, #8]
  403170:	mov	x19, x3
  403174:	mov	w21, w2
  403178:	mov	x22, x0
  40317c:	mov	w20, w1
  403180:	mov	x29, sp
  403184:	cbz	w8, 40334c <print_relation+0x1f8>
  403188:	cmp	w20, #0x1
  40318c:	b.ne	4031ac <print_relation+0x58>  // b.any
  403190:	ldr	x8, [x22, #16]
  403194:	ldr	x8, [x8, #8]
  403198:	cmp	x8, #0x2
  40319c:	b.cc	4031ac <print_relation+0x58>  // b.lo, b.ul, b.last
  4031a0:	mov	w0, #0x28                  	// #40
  4031a4:	mov	x1, x19
  4031a8:	bl	401380 <fputc@plt>
  4031ac:	ldr	x8, [x22, #16]
  4031b0:	ldr	x9, [x8, #8]
  4031b4:	cbz	x9, 403340 <print_relation+0x1ec>
  4031b8:	adrp	x28, 404000 <yytranslate+0x2>
  4031bc:	adrp	x24, 404000 <yytranslate+0x2>
  4031c0:	adrp	x23, 404000 <yytranslate+0x2>
  4031c4:	adrp	x26, 404000 <yytranslate+0x2>
  4031c8:	mov	x27, xzr
  4031cc:	add	x28, x28, #0x37a
  4031d0:	add	x24, x24, #0x373
  4031d4:	add	x23, x23, #0x37f
  4031d8:	add	x26, x26, #0x353
  4031dc:	b	403200 <print_relation+0xac>
  4031e0:	mov	w0, #0x29                  	// #41
  4031e4:	mov	x1, x19
  4031e8:	bl	401380 <fputc@plt>
  4031ec:	ldr	x8, [x22, #16]
  4031f0:	add	x27, x27, #0x1
  4031f4:	ldr	x9, [x8, #8]
  4031f8:	cmp	x27, x9
  4031fc:	b.cs	403340 <print_relation+0x1ec>  // b.hs, b.nlast
  403200:	ldr	x8, [x8]
  403204:	ldr	x25, [x8, x27, lsl #3]
  403208:	cbz	x27, 403220 <print_relation+0xcc>
  40320c:	mov	w1, #0x4                   	// #4
  403210:	mov	w2, #0x1                   	// #1
  403214:	mov	x0, x26
  403218:	mov	x3, x19
  40321c:	bl	401560 <fwrite@plt>
  403220:	ldp	x8, x9, [x25]
  403224:	ldr	w8, [x8, #8]
  403228:	ldr	w9, [x9, #8]
  40322c:	cmp	w8, w9
  403230:	b.ne	40325c <print_relation+0x108>  // b.any
  403234:	ldr	x0, [x22]
  403238:	and	w1, w21, #0x1
  40323c:	mov	x2, x19
  403240:	bl	40353c <print_expression>
  403244:	tbz	w21, #0, 4032fc <print_relation+0x1a8>
  403248:	ldr	x8, [x22, #16]
  40324c:	ldr	x8, [x8, #8]
  403250:	cmp	x8, #0x1
  403254:	cset	w8, eq  // eq = none
  403258:	b	403300 <print_relation+0x1ac>
  40325c:	cbz	w8, 403318 <print_relation+0x1c4>
  403260:	cbz	w20, 403274 <print_relation+0x120>
  403264:	ldr	x8, [x22, #16]
  403268:	ldr	x8, [x8, #8]
  40326c:	cmp	x8, #0x2
  403270:	b.cc	403280 <print_relation+0x12c>  // b.lo, b.ul, b.last
  403274:	mov	w0, #0x28                  	// #40
  403278:	mov	x1, x19
  40327c:	bl	401380 <fputc@plt>
  403280:	ldr	x0, [x22]
  403284:	mov	w1, wzr
  403288:	mov	x2, x19
  40328c:	bl	40353c <print_expression>
  403290:	ldr	x8, [x25]
  403294:	adrp	x1, 404000 <yytranslate+0x2>
  403298:	mov	x0, x19
  40329c:	add	x1, x1, #0x383
  4032a0:	ldr	w2, [x8, #8]
  4032a4:	bl	401600 <fprintf@plt>
  4032a8:	adrp	x0, 404000 <yytranslate+0x2>
  4032ac:	mov	w1, #0x4                   	// #4
  4032b0:	mov	w2, #0x1                   	// #1
  4032b4:	add	x0, x0, #0x358
  4032b8:	mov	x3, x19
  4032bc:	bl	401560 <fwrite@plt>
  4032c0:	ldr	x0, [x22]
  4032c4:	mov	w1, wzr
  4032c8:	mov	x2, x19
  4032cc:	bl	40353c <print_expression>
  4032d0:	ldr	x8, [x25, #8]
  4032d4:	mov	x0, x19
  4032d8:	mov	x1, x23
  4032dc:	ldr	w2, [x8, #8]
  4032e0:	bl	401600 <fprintf@plt>
  4032e4:	cbz	w20, 4031e0 <print_relation+0x8c>
  4032e8:	ldr	x8, [x22, #16]
  4032ec:	ldr	x8, [x8, #8]
  4032f0:	cmp	x8, #0x2
  4032f4:	b.cc	4031ec <print_relation+0x98>  // b.lo, b.ul, b.last
  4032f8:	b	4031e0 <print_relation+0x8c>
  4032fc:	mov	w8, wzr
  403300:	ldr	x9, [x25]
  403304:	cmp	w8, #0x0
  403308:	csel	x1, x24, x28, ne  // ne = any
  40330c:	mov	x0, x19
  403310:	ldr	w2, [x9, #8]
  403314:	b	403338 <print_relation+0x1e4>
  403318:	ldr	x0, [x22]
  40331c:	mov	w1, wzr
  403320:	mov	x2, x19
  403324:	bl	40353c <print_expression>
  403328:	ldr	x8, [x25, #8]
  40332c:	mov	x0, x19
  403330:	mov	x1, x23
  403334:	ldr	w2, [x8, #8]
  403338:	bl	401600 <fprintf@plt>
  40333c:	b	4031ec <print_relation+0x98>
  403340:	cmp	w20, #0x1
  403344:	b.eq	40350c <print_relation+0x3b8>  // b.none
  403348:	b	403520 <print_relation+0x3cc>
  40334c:	cbnz	w20, 40336c <print_relation+0x218>
  403350:	ldr	x8, [x22, #16]
  403354:	ldr	x8, [x8, #8]
  403358:	cmp	x8, #0x2
  40335c:	b.cc	40336c <print_relation+0x218>  // b.lo, b.ul, b.last
  403360:	mov	w0, #0x28                  	// #40
  403364:	mov	x1, x19
  403368:	bl	401380 <fputc@plt>
  40336c:	ldr	x8, [x22, #16]
  403370:	ldr	x9, [x8, #8]
  403374:	cbz	x9, 403508 <print_relation+0x3b4>
  403378:	adrp	x28, 404000 <yytranslate+0x2>
  40337c:	adrp	x24, 404000 <yytranslate+0x2>
  403380:	adrp	x23, 404000 <yytranslate+0x2>
  403384:	adrp	x26, 404000 <yytranslate+0x2>
  403388:	mov	x27, xzr
  40338c:	add	x28, x28, #0x364
  403390:	add	x24, x24, #0x35d
  403394:	add	x23, x23, #0x369
  403398:	add	x26, x26, #0x358
  40339c:	b	4033c0 <print_relation+0x26c>
  4033a0:	mov	w0, #0x29                  	// #41
  4033a4:	mov	x1, x19
  4033a8:	bl	401380 <fputc@plt>
  4033ac:	ldr	x8, [x22, #16]
  4033b0:	add	x27, x27, #0x1
  4033b4:	ldr	x9, [x8, #8]
  4033b8:	cmp	x27, x9
  4033bc:	b.cs	403508 <print_relation+0x3b4>  // b.hs, b.nlast
  4033c0:	ldr	x8, [x8]
  4033c4:	ldr	x25, [x8, x27, lsl #3]
  4033c8:	cbz	x27, 4033e0 <print_relation+0x28c>
  4033cc:	mov	w1, #0x4                   	// #4
  4033d0:	mov	w2, #0x1                   	// #1
  4033d4:	mov	x0, x26
  4033d8:	mov	x3, x19
  4033dc:	bl	401560 <fwrite@plt>
  4033e0:	ldp	x8, x9, [x25]
  4033e4:	ldr	w8, [x8, #8]
  4033e8:	ldr	w9, [x9, #8]
  4033ec:	cmp	w8, w9
  4033f0:	b.ne	40341c <print_relation+0x2c8>  // b.any
  4033f4:	ldr	x0, [x22]
  4033f8:	and	w1, w21, #0x1
  4033fc:	mov	x2, x19
  403400:	bl	40353c <print_expression>
  403404:	tbz	w21, #0, 4034c4 <print_relation+0x370>
  403408:	ldr	x8, [x22, #16]
  40340c:	ldr	x8, [x8, #8]
  403410:	cmp	x8, #0x1
  403414:	cset	w8, eq  // eq = none
  403418:	b	4034c8 <print_relation+0x374>
  40341c:	cbz	w8, 4034e0 <print_relation+0x38c>
  403420:	cmp	w20, #0x1
  403424:	b.eq	403438 <print_relation+0x2e4>  // b.none
  403428:	ldr	x8, [x22, #16]
  40342c:	ldr	x8, [x8, #8]
  403430:	cmp	x8, #0x2
  403434:	b.cc	403444 <print_relation+0x2f0>  // b.lo, b.ul, b.last
  403438:	mov	w0, #0x28                  	// #40
  40343c:	mov	x1, x19
  403440:	bl	401380 <fputc@plt>
  403444:	ldr	x0, [x22]
  403448:	mov	w1, wzr
  40344c:	mov	x2, x19
  403450:	bl	40353c <print_expression>
  403454:	ldr	x8, [x25]
  403458:	adrp	x1, 404000 <yytranslate+0x2>
  40345c:	mov	x0, x19
  403460:	add	x1, x1, #0x36e
  403464:	ldr	w2, [x8, #8]
  403468:	bl	401600 <fprintf@plt>
  40346c:	adrp	x0, 404000 <yytranslate+0x2>
  403470:	mov	w1, #0x4                   	// #4
  403474:	mov	w2, #0x1                   	// #1
  403478:	add	x0, x0, #0x353
  40347c:	mov	x3, x19
  403480:	bl	401560 <fwrite@plt>
  403484:	ldr	x0, [x22]
  403488:	mov	w1, wzr
  40348c:	mov	x2, x19
  403490:	bl	40353c <print_expression>
  403494:	ldr	x8, [x25, #8]
  403498:	mov	x0, x19
  40349c:	mov	x1, x23
  4034a0:	ldr	w2, [x8, #8]
  4034a4:	bl	401600 <fprintf@plt>
  4034a8:	cmp	w20, #0x1
  4034ac:	b.eq	4033a0 <print_relation+0x24c>  // b.none
  4034b0:	ldr	x8, [x22, #16]
  4034b4:	ldr	x8, [x8, #8]
  4034b8:	cmp	x8, #0x2
  4034bc:	b.cc	4033ac <print_relation+0x258>  // b.lo, b.ul, b.last
  4034c0:	b	4033a0 <print_relation+0x24c>
  4034c4:	mov	w8, wzr
  4034c8:	ldr	x9, [x25]
  4034cc:	cmp	w8, #0x0
  4034d0:	csel	x1, x24, x28, ne  // ne = any
  4034d4:	mov	x0, x19
  4034d8:	ldr	w2, [x9, #8]
  4034dc:	b	403500 <print_relation+0x3ac>
  4034e0:	ldr	x0, [x22]
  4034e4:	mov	w1, wzr
  4034e8:	mov	x2, x19
  4034ec:	bl	40353c <print_expression>
  4034f0:	ldr	x8, [x25, #8]
  4034f4:	mov	x0, x19
  4034f8:	mov	x1, x23
  4034fc:	ldr	w2, [x8, #8]
  403500:	bl	401600 <fprintf@plt>
  403504:	b	4033ac <print_relation+0x258>
  403508:	cbnz	w20, 403520 <print_relation+0x3cc>
  40350c:	cmp	x9, #0x2
  403510:	b.cc	403520 <print_relation+0x3cc>  // b.lo, b.ul, b.last
  403514:	mov	w0, #0x29                  	// #41
  403518:	mov	x1, x19
  40351c:	bl	401380 <fputc@plt>
  403520:	ldp	x20, x19, [sp, #80]
  403524:	ldp	x22, x21, [sp, #64]
  403528:	ldp	x24, x23, [sp, #48]
  40352c:	ldp	x26, x25, [sp, #32]
  403530:	ldp	x28, x27, [sp, #16]
  403534:	ldp	x29, x30, [sp], #96
  403538:	ret

000000000040353c <print_expression>:
  40353c:	stp	x29, x30, [sp, #-16]!
  403540:	ldr	w8, [x0, #4]
  403544:	mov	x29, sp
  403548:	cbz	w8, 403578 <print_expression+0x3c>
  40354c:	adrp	x9, 404000 <yytranslate+0x2>
  403550:	adrp	x10, 404000 <yytranslate+0x2>
  403554:	add	x9, x9, #0x38f
  403558:	add	x10, x10, #0x387
  40355c:	tst	w1, #0x1
  403560:	csel	x1, x10, x9, ne  // ne = any
  403564:	mov	x0, x2
  403568:	mov	w2, w8
  40356c:	bl	401600 <fprintf@plt>
  403570:	ldp	x29, x30, [sp], #16
  403574:	ret
  403578:	mov	w0, #0x6e                  	// #110
  40357c:	mov	x1, x2
  403580:	bl	401380 <fputc@plt>
  403584:	ldp	x29, x30, [sp], #16
  403588:	ret

000000000040358c <main>:
  40358c:	sub	sp, sp, #0x60
  403590:	stp	x29, x30, [sp, #16]
  403594:	stp	x24, x23, [sp, #48]
  403598:	stp	x22, x21, [sp, #64]
  40359c:	stp	x20, x19, [sp, #80]
  4035a0:	ldr	x8, [x1]
  4035a4:	mov	w20, w0
  4035a8:	str	x25, [sp, #32]
  4035ac:	add	x29, sp, #0x10
  4035b0:	mov	x0, x8
  4035b4:	mov	x19, x1
  4035b8:	bl	401330 <set_program_name@plt>
  4035bc:	adrp	x1, 404000 <yytranslate+0x2>
  4035c0:	add	x1, x1, #0x5bb
  4035c4:	mov	w0, #0x6                   	// #6
  4035c8:	bl	401610 <setlocale@plt>
  4035cc:	adrp	x21, 404000 <yytranslate+0x2>
  4035d0:	adrp	x22, 404000 <yytranslate+0x2>
  4035d4:	add	x21, x21, #0x3a8
  4035d8:	add	x22, x22, #0x3b6
  4035dc:	mov	x0, x21
  4035e0:	mov	x1, x22
  4035e4:	bl	401410 <bindtextdomain@plt>
  4035e8:	adrp	x0, 404000 <yytranslate+0x2>
  4035ec:	add	x0, x0, #0x247
  4035f0:	mov	x1, x22
  4035f4:	bl	401410 <bindtextdomain@plt>
  4035f8:	mov	x0, x21
  4035fc:	bl	4014f0 <textdomain@plt>
  403600:	adrp	x0, 401000 <_init-0x2b0>
  403604:	add	x0, x0, #0x470
  403608:	bl	403f60 <atexit>
  40360c:	adrp	x21, 404000 <yytranslate+0x2>
  403610:	adrp	x22, 404000 <yytranslate+0x2>
  403614:	mov	w25, wzr
  403618:	mov	w24, wzr
  40361c:	mov	w23, wzr
  403620:	add	x21, x21, #0x3c8
  403624:	add	x22, x22, #0x958
  403628:	mov	w0, w20
  40362c:	mov	x1, x19
  403630:	mov	x2, x21
  403634:	mov	x3, x22
  403638:	mov	x4, xzr
  40363c:	bl	401500 <getopt_long@plt>
  403640:	cmp	w0, #0x55
  403644:	b.le	403660 <main+0xd4>
  403648:	cmp	w0, #0x56
  40364c:	b.eq	403670 <main+0xe4>  // b.none
  403650:	cmp	w0, #0x63
  403654:	b.ne	403678 <main+0xec>  // b.any
  403658:	mov	w23, #0x1                   	// #1
  40365c:	b	403628 <main+0x9c>
  403660:	cmn	w0, #0x1
  403664:	b.eq	403688 <main+0xfc>  // b.none
  403668:	cbz	w0, 403628 <main+0x9c>
  40366c:	b	403880 <main+0x2f4>
  403670:	mov	w24, #0x1                   	// #1
  403674:	b	403628 <main+0x9c>
  403678:	cmp	w0, #0x68
  40367c:	b.ne	403880 <main+0x2f4>  // b.any
  403680:	mov	w25, #0x1                   	// #1
  403684:	b	403628 <main+0x9c>
  403688:	tbnz	w24, #0, 403888 <main+0x2fc>
  40368c:	tbnz	w25, #0, 403914 <main+0x388>
  403690:	adrp	x21, 415000 <memcpy@GLIBC_2.17>
  403694:	ldrsw	x8, [x21, #440]
  403698:	add	w9, w8, #0x2
  40369c:	cmp	w9, w20
  4036a0:	b.ne	403724 <main+0x198>  // b.any
  4036a4:	ldr	x20, [x19, x8, lsl #3]
  4036a8:	add	w8, w8, #0x1
  4036ac:	ldr	x19, [x19, w8, sxtw #3]
  4036b0:	mov	w0, #0x51ad                	// #20909
  4036b4:	bl	4013f0 <xmlCheckVersion@plt>
  4036b8:	adrp	x1, 404000 <yytranslate+0x2>
  4036bc:	add	x1, x1, #0x55d
  4036c0:	mov	x0, x19
  4036c4:	bl	4013b0 <fopen@plt>
  4036c8:	mov	x21, x0
  4036cc:	cbnz	x0, 4036f4 <main+0x168>
  4036d0:	adrp	x1, 404000 <yytranslate+0x2>
  4036d4:	add	x1, x1, #0x504
  4036d8:	mov	w2, #0x5                   	// #5
  4036dc:	bl	401590 <dcgettext@plt>
  4036e0:	mov	x2, x0
  4036e4:	mov	w0, #0x1                   	// #1
  4036e8:	mov	w1, wzr
  4036ec:	mov	x3, x19
  4036f0:	bl	401320 <error@plt>
  4036f4:	mov	x0, x21
  4036f8:	mov	x1, x19
  4036fc:	mov	x2, x20
  403700:	bl	403a50 <extract_rules>
  403704:	mov	x19, x0
  403708:	mov	x0, x21
  40370c:	bl	4013a0 <fclose@plt>
  403710:	cbz	x19, 4037e4 <main+0x258>
  403714:	mov	x0, x19
  403718:	tbz	w23, #0, 403814 <main+0x288>
  40371c:	bl	4014e0 <puts@plt>
  403720:	b	403858 <main+0x2cc>
  403724:	cmp	w8, w20
  403728:	b.ne	4037ac <main+0x220>  // b.any
  40372c:	adrp	x20, 415000 <memcpy@GLIBC_2.17>
  403730:	ldr	x2, [x20, #456]
  403734:	add	x0, x29, #0x18
  403738:	add	x1, sp, #0x8
  40373c:	str	xzr, [x29, #24]
  403740:	str	xzr, [sp, #8]
  403744:	bl	401530 <getline@plt>
  403748:	tbnz	w0, #31, 4037dc <main+0x250>
  40374c:	adrp	x21, 415000 <memcpy@GLIBC_2.17>
  403750:	b	403768 <main+0x1dc>
  403754:	ldr	x2, [x20, #456]
  403758:	add	x0, x29, #0x18
  40375c:	add	x1, sp, #0x8
  403760:	bl	401530 <getline@plt>
  403764:	tbnz	w0, #31, 4037dc <main+0x250>
  403768:	cbz	w0, 403788 <main+0x1fc>
  40376c:	ldr	x8, [x29, #24]
  403770:	sub	w9, w0, #0x1
  403774:	sxtw	x9, w9
  403778:	ldrb	w10, [x8, x9]
  40377c:	cmp	w10, #0xa
  403780:	b.ne	403788 <main+0x1fc>  // b.any
  403784:	strb	wzr, [x8, x9]
  403788:	ldr	x0, [x29, #24]
  40378c:	bl	402494 <cldr_plural_parse>
  403790:	cbz	x0, 403754 <main+0x1c8>
  403794:	ldr	x1, [x21, #448]
  403798:	mov	x19, x0
  40379c:	bl	4024f4 <cldr_plural_rule_list_print>
  4037a0:	mov	x0, x19
  4037a4:	bl	402418 <cldr_plural_rule_list_free>
  4037a8:	b	403754 <main+0x1c8>
  4037ac:	adrp	x1, 404000 <yytranslate+0x2>
  4037b0:	add	x1, x1, #0x549
  4037b4:	mov	w2, #0x5                   	// #5
  4037b8:	mov	x0, xzr
  4037bc:	bl	401590 <dcgettext@plt>
  4037c0:	ldrsw	x8, [x21, #440]
  4037c4:	mov	x2, x0
  4037c8:	mov	w0, #0x1                   	// #1
  4037cc:	mov	w1, wzr
  4037d0:	ldr	x3, [x19, x8, lsl #3]
  4037d4:	bl	401320 <error@plt>
  4037d8:	b	403860 <main+0x2d4>
  4037dc:	ldr	x0, [x29, #24]
  4037e0:	b	40385c <main+0x2d0>
  4037e4:	adrp	x1, 404000 <yytranslate+0x2>
  4037e8:	add	x1, x1, #0x516
  4037ec:	mov	w2, #0x5                   	// #5
  4037f0:	mov	x0, xzr
  4037f4:	bl	401590 <dcgettext@plt>
  4037f8:	mov	x2, x0
  4037fc:	mov	w0, #0x1                   	// #1
  403800:	mov	w1, wzr
  403804:	mov	x3, x20
  403808:	bl	401320 <error@plt>
  40380c:	mov	x0, x19
  403810:	tbnz	w23, #0, 40371c <main+0x190>
  403814:	bl	402494 <cldr_plural_parse>
  403818:	mov	x20, x0
  40381c:	cbnz	x0, 403840 <main+0x2b4>
  403820:	adrp	x1, 404000 <yytranslate+0x2>
  403824:	add	x1, x1, #0x532
  403828:	mov	w2, #0x5                   	// #5
  40382c:	bl	401590 <dcgettext@plt>
  403830:	mov	x2, x0
  403834:	mov	w0, #0x1                   	// #1
  403838:	mov	w1, wzr
  40383c:	bl	401320 <error@plt>
  403840:	adrp	x8, 415000 <memcpy@GLIBC_2.17>
  403844:	ldr	x1, [x8, #448]
  403848:	mov	x0, x20
  40384c:	bl	4024f4 <cldr_plural_rule_list_print>
  403850:	mov	x0, x20
  403854:	bl	402418 <cldr_plural_rule_list_free>
  403858:	mov	x0, x19
  40385c:	bl	401550 <free@plt>
  403860:	ldp	x20, x19, [sp, #80]
  403864:	ldp	x22, x21, [sp, #64]
  403868:	ldp	x24, x23, [sp, #48]
  40386c:	ldr	x25, [sp, #32]
  403870:	ldp	x29, x30, [sp, #16]
  403874:	mov	w0, wzr
  403878:	add	sp, sp, #0x60
  40387c:	ret
  403880:	mov	w0, #0x1                   	// #1
  403884:	bl	40391c <usage>
  403888:	adrp	x8, 415000 <memcpy@GLIBC_2.17>
  40388c:	ldr	x0, [x8, #464]
  403890:	bl	401520 <basename@plt>
  403894:	mov	x1, x0
  403898:	adrp	x0, 404000 <yytranslate+0x2>
  40389c:	adrp	x2, 404000 <yytranslate+0x2>
  4038a0:	adrp	x3, 404000 <yytranslate+0x2>
  4038a4:	add	x0, x0, #0x3cc
  4038a8:	add	x2, x2, #0x3a8
  4038ac:	add	x3, x3, #0x3dc
  4038b0:	bl	4015b0 <printf@plt>
  4038b4:	adrp	x1, 404000 <yytranslate+0x2>
  4038b8:	add	x1, x1, #0x3e3
  4038bc:	mov	w2, #0x5                   	// #5
  4038c0:	mov	x0, xzr
  4038c4:	bl	401590 <dcgettext@plt>
  4038c8:	adrp	x1, 404000 <yytranslate+0x2>
  4038cc:	adrp	x2, 404000 <yytranslate+0x2>
  4038d0:	add	x1, x1, #0x4bd
  4038d4:	add	x2, x2, #0x4c7
  4038d8:	bl	4015b0 <printf@plt>
  4038dc:	adrp	x1, 404000 <yytranslate+0x2>
  4038e0:	add	x1, x1, #0x4e9
  4038e4:	mov	w2, #0x5                   	// #5
  4038e8:	mov	x0, xzr
  4038ec:	bl	401590 <dcgettext@plt>
  4038f0:	mov	x19, x0
  4038f4:	adrp	x0, 404000 <yytranslate+0x2>
  4038f8:	add	x0, x0, #0x4f9
  4038fc:	bl	401540 <proper_name@plt>
  403900:	mov	x1, x0
  403904:	mov	x0, x19
  403908:	bl	4015b0 <printf@plt>
  40390c:	mov	w0, wzr
  403910:	bl	401310 <exit@plt>
  403914:	mov	w0, wzr
  403918:	bl	40391c <usage>

000000000040391c <usage>:
  40391c:	stp	x29, x30, [sp, #-32]!
  403920:	stp	x20, x19, [sp, #16]
  403924:	mov	w19, w0
  403928:	mov	x29, sp
  40392c:	cbnz	w0, 403a18 <usage+0xfc>
  403930:	adrp	x1, 404000 <yytranslate+0x2>
  403934:	add	x1, x1, #0x593
  403938:	mov	w2, #0x5                   	// #5
  40393c:	mov	x0, xzr
  403940:	bl	401590 <dcgettext@plt>
  403944:	adrp	x8, 415000 <memcpy@GLIBC_2.17>
  403948:	ldr	x1, [x8, #464]
  40394c:	bl	4015b0 <printf@plt>
  403950:	mov	w0, #0xa                   	// #10
  403954:	bl	4015e0 <putchar@plt>
  403958:	adrp	x1, 404000 <yytranslate+0x2>
  40395c:	add	x1, x1, #0x5bc
  403960:	mov	w2, #0x5                   	// #5
  403964:	mov	x0, xzr
  403968:	bl	401590 <dcgettext@plt>
  40396c:	bl	4015b0 <printf@plt>
  403970:	mov	w0, #0xa                   	// #10
  403974:	bl	4015e0 <putchar@plt>
  403978:	adrp	x1, 404000 <yytranslate+0x2>
  40397c:	add	x1, x1, #0x6c5
  403980:	mov	w2, #0x5                   	// #5
  403984:	mov	x0, xzr
  403988:	bl	401590 <dcgettext@plt>
  40398c:	bl	4015b0 <printf@plt>
  403990:	mov	w0, #0xa                   	// #10
  403994:	bl	4015e0 <putchar@plt>
  403998:	adrp	x1, 404000 <yytranslate+0x2>
  40399c:	add	x1, x1, #0x731
  4039a0:	mov	w2, #0x5                   	// #5
  4039a4:	mov	x0, xzr
  4039a8:	bl	401590 <dcgettext@plt>
  4039ac:	bl	4015b0 <printf@plt>
  4039b0:	adrp	x1, 404000 <yytranslate+0x2>
  4039b4:	add	x1, x1, #0x776
  4039b8:	mov	w2, #0x5                   	// #5
  4039bc:	mov	x0, xzr
  4039c0:	bl	401590 <dcgettext@plt>
  4039c4:	bl	4015b0 <printf@plt>
  4039c8:	adrp	x1, 404000 <yytranslate+0x2>
  4039cc:	add	x1, x1, #0x7b0
  4039d0:	mov	w2, #0x5                   	// #5
  4039d4:	mov	x0, xzr
  4039d8:	bl	401590 <dcgettext@plt>
  4039dc:	bl	4015b0 <printf@plt>
  4039e0:	mov	w0, #0xa                   	// #10
  4039e4:	bl	4015e0 <putchar@plt>
  4039e8:	adrp	x1, 404000 <yytranslate+0x2>
  4039ec:	add	x1, x1, #0x7f3
  4039f0:	mov	w2, #0x5                   	// #5
  4039f4:	mov	x0, xzr
  4039f8:	bl	401590 <dcgettext@plt>
  4039fc:	adrp	x1, 404000 <yytranslate+0x2>
  403a00:	adrp	x2, 404000 <yytranslate+0x2>
  403a04:	add	x1, x1, #0x830
  403a08:	add	x2, x2, #0x85a
  403a0c:	bl	4015b0 <printf@plt>
  403a10:	mov	w0, w19
  403a14:	bl	401310 <exit@plt>
  403a18:	adrp	x8, 415000 <memcpy@GLIBC_2.17>
  403a1c:	ldr	x20, [x8, #432]
  403a20:	adrp	x1, 404000 <yytranslate+0x2>
  403a24:	add	x1, x1, #0x56c
  403a28:	mov	w2, #0x5                   	// #5
  403a2c:	mov	x0, xzr
  403a30:	bl	401590 <dcgettext@plt>
  403a34:	adrp	x8, 415000 <memcpy@GLIBC_2.17>
  403a38:	ldr	x2, [x8, #464]
  403a3c:	mov	x1, x0
  403a40:	mov	x0, x20
  403a44:	bl	401600 <fprintf@plt>
  403a48:	mov	w0, w19
  403a4c:	bl	401310 <exit@plt>

0000000000403a50 <extract_rules>:
  403a50:	sub	sp, sp, #0x90
  403a54:	stp	x29, x30, [sp, #48]
  403a58:	stp	x28, x27, [sp, #64]
  403a5c:	stp	x26, x25, [sp, #80]
  403a60:	stp	x24, x23, [sp, #96]
  403a64:	stp	x22, x21, [sp, #112]
  403a68:	stp	x20, x19, [sp, #128]
  403a6c:	add	x29, sp, #0x30
  403a70:	mov	x21, x2
  403a74:	mov	x20, x1
  403a78:	bl	401390 <fileno@plt>
  403a7c:	mov	w3, #0x940                 	// #2368
  403a80:	mov	x1, x20
  403a84:	mov	x2, xzr
  403a88:	bl	401490 <xmlReadFd@plt>
  403a8c:	mov	x19, x0
  403a90:	cbnz	x0, 403ab8 <extract_rules+0x68>
  403a94:	adrp	x1, 404000 <yytranslate+0x2>
  403a98:	add	x1, x1, #0x86e
  403a9c:	mov	w2, #0x5                   	// #5
  403aa0:	bl	401590 <dcgettext@plt>
  403aa4:	mov	x2, x0
  403aa8:	mov	w0, #0x1                   	// #1
  403aac:	mov	w1, wzr
  403ab0:	mov	x3, x20
  403ab4:	bl	401320 <error@plt>
  403ab8:	mov	x0, x19
  403abc:	bl	4015d0 <xmlDocGetRootElement@plt>
  403ac0:	mov	x22, x0
  403ac4:	cbz	x0, 403b48 <extract_rules+0xf8>
  403ac8:	ldr	x0, [x22, #16]
  403acc:	adrp	x1, 404000 <yytranslate+0x2>
  403ad0:	add	x1, x1, #0x88d
  403ad4:	bl	4015c0 <xmlStrEqual@plt>
  403ad8:	cbz	w0, 403b48 <extract_rules+0xf8>
  403adc:	ldr	x23, [x22, #24]
  403ae0:	cbz	x23, 403b8c <extract_rules+0x13c>
  403ae4:	adrp	x22, 404000 <yytranslate+0x2>
  403ae8:	add	x22, x22, #0x8bc
  403aec:	b	403af8 <extract_rules+0xa8>
  403af0:	ldr	x23, [x23, #48]
  403af4:	cbz	x23, 403b8c <extract_rules+0x13c>
  403af8:	ldr	w8, [x23, #8]
  403afc:	cmp	w8, #0x1
  403b00:	b.ne	403af0 <extract_rules+0xa0>  // b.any
  403b04:	ldr	x0, [x23, #16]
  403b08:	mov	x1, x22
  403b0c:	bl	4015c0 <xmlStrEqual@plt>
  403b10:	cbz	w0, 403af0 <extract_rules+0xa0>
  403b14:	mov	x0, x21
  403b18:	bl	401300 <strlen@plt>
  403b1c:	ldr	x23, [x23, #24]
  403b20:	cbz	x23, 403eb4 <extract_rules+0x464>
  403b24:	adrp	x26, 404000 <yytranslate+0x2>
  403b28:	adrp	x25, 404000 <yytranslate+0x2>
  403b2c:	mov	x24, x0
  403b30:	mov	x22, xzr
  403b34:	add	x26, x26, #0x8f5
  403b38:	add	x25, x25, #0x901
  403b3c:	stp	xzr, xzr, [x29, #-16]
  403b40:	str	x20, [sp, #8]
  403b44:	b	403c18 <extract_rules+0x1c8>
  403b48:	mov	x0, x22
  403b4c:	bl	401570 <xmlGetLineNo@plt>
  403b50:	adrp	x1, 404000 <yytranslate+0x2>
  403b54:	mov	x21, x0
  403b58:	add	x1, x1, #0x89e
  403b5c:	mov	w2, #0x5                   	// #5
  403b60:	mov	x0, xzr
  403b64:	bl	401590 <dcgettext@plt>
  403b68:	adrp	x5, 404000 <yytranslate+0x2>
  403b6c:	mov	x4, x0
  403b70:	add	x5, x5, #0x88d
  403b74:	mov	w0, wzr
  403b78:	mov	w1, wzr
  403b7c:	mov	x2, x20
  403b80:	mov	w3, w21
  403b84:	bl	4015f0 <error_at_line@plt>
  403b88:	b	403bc0 <extract_rules+0x170>
  403b8c:	adrp	x1, 404000 <yytranslate+0x2>
  403b90:	add	x1, x1, #0x8c4
  403b94:	mov	w2, #0x5                   	// #5
  403b98:	mov	x0, xzr
  403b9c:	bl	401590 <dcgettext@plt>
  403ba0:	adrp	x3, 404000 <yytranslate+0x2>
  403ba4:	adrp	x4, 404000 <yytranslate+0x2>
  403ba8:	mov	x2, x0
  403bac:	add	x3, x3, #0x88d
  403bb0:	add	x4, x4, #0x8bc
  403bb4:	mov	w0, wzr
  403bb8:	mov	w1, wzr
  403bbc:	bl	401320 <error@plt>
  403bc0:	mov	x22, xzr
  403bc4:	mov	x0, x19
  403bc8:	bl	401360 <xmlFreeDoc@plt>
  403bcc:	mov	x0, x22
  403bd0:	ldp	x20, x19, [sp, #128]
  403bd4:	ldp	x22, x21, [sp, #112]
  403bd8:	ldp	x24, x23, [sp, #96]
  403bdc:	ldp	x26, x25, [sp, #80]
  403be0:	ldp	x28, x27, [sp, #64]
  403be4:	ldp	x29, x30, [sp, #48]
  403be8:	add	sp, sp, #0x90
  403bec:	ret
  403bf0:	adrp	x8, 415000 <memcpy@GLIBC_2.17>
  403bf4:	ldr	x8, [x8, #480]
  403bf8:	mov	x0, x28
  403bfc:	blr	x8
  403c00:	adrp	x26, 404000 <yytranslate+0x2>
  403c04:	adrp	x25, 404000 <yytranslate+0x2>
  403c08:	add	x26, x26, #0x8f5
  403c0c:	add	x25, x25, #0x901
  403c10:	ldr	x23, [x23, #48]
  403c14:	cbz	x23, 403eb8 <extract_rules+0x468>
  403c18:	ldr	w8, [x23, #8]
  403c1c:	cmp	w8, #0x1
  403c20:	b.ne	403c10 <extract_rules+0x1c0>  // b.any
  403c24:	ldr	x0, [x23, #16]
  403c28:	mov	x1, x26
  403c2c:	bl	4015c0 <xmlStrEqual@plt>
  403c30:	cbz	w0, 403c10 <extract_rules+0x1c0>
  403c34:	mov	x0, x23
  403c38:	mov	x1, x25
  403c3c:	bl	401340 <xmlHasProp@plt>
  403c40:	cbz	x0, 403cc4 <extract_rules+0x274>
  403c44:	mov	x0, x23
  403c48:	mov	x1, x25
  403c4c:	bl	4013e0 <xmlGetProp@plt>
  403c50:	ldrb	w8, [x0]
  403c54:	mov	x28, x0
  403c58:	cbz	w8, 403bf0 <extract_rules+0x1a0>
  403c5c:	mov	x26, x28
  403c60:	b	403c70 <extract_rules+0x220>
  403c64:	ldrb	w8, [x25]
  403c68:	mov	x26, x25
  403c6c:	cbz	w8, 403bf0 <extract_rules+0x1a0>
  403c70:	mov	x25, x26
  403c74:	ldrb	w0, [x26], #1
  403c78:	bl	401580 <c_isspace@plt>
  403c7c:	tbnz	w0, #0, 403c70 <extract_rules+0x220>
  403c80:	mov	x0, x25
  403c84:	mov	x1, x21
  403c88:	mov	w2, w24
  403c8c:	bl	4015a0 <xmlStrncmp@plt>
  403c90:	cbnz	w0, 403ca4 <extract_rules+0x254>
  403c94:	ldrb	w0, [x25, x24]
  403c98:	cbz	w0, 403d10 <extract_rules+0x2c0>
  403c9c:	bl	401580 <c_isspace@plt>
  403ca0:	tbnz	w0, #0, 403d10 <extract_rules+0x2c0>
  403ca4:	ldrb	w8, [x25]
  403ca8:	cbz	w8, 403c64 <extract_rules+0x214>
  403cac:	and	w0, w8, #0xff
  403cb0:	bl	401580 <c_isspace@plt>
  403cb4:	tbnz	w0, #0, 403c64 <extract_rules+0x214>
  403cb8:	ldrb	w8, [x25, #1]!
  403cbc:	cbnz	w8, 403cac <extract_rules+0x25c>
  403cc0:	b	403c64 <extract_rules+0x214>
  403cc4:	mov	x0, x23
  403cc8:	bl	401570 <xmlGetLineNo@plt>
  403ccc:	adrp	x1, 404000 <yytranslate+0x2>
  403cd0:	mov	x25, x0
  403cd4:	mov	w2, #0x5                   	// #5
  403cd8:	mov	x0, xzr
  403cdc:	add	x1, x1, #0x909
  403ce0:	bl	401590 <dcgettext@plt>
  403ce4:	mov	w3, w25
  403ce8:	adrp	x25, 404000 <yytranslate+0x2>
  403cec:	add	x25, x25, #0x901
  403cf0:	mov	x4, x0
  403cf4:	mov	w0, wzr
  403cf8:	mov	w1, wzr
  403cfc:	mov	x2, x20
  403d00:	mov	x5, x26
  403d04:	mov	x6, x25
  403d08:	bl	4015f0 <error_at_line@plt>
  403d0c:	b	403c10 <extract_rules+0x1c0>
  403d10:	adrp	x8, 415000 <memcpy@GLIBC_2.17>
  403d14:	ldr	x8, [x8, #480]
  403d18:	mov	x0, x28
  403d1c:	blr	x8
  403d20:	ldr	x28, [x23, #24]
  403d24:	adrp	x26, 404000 <yytranslate+0x2>
  403d28:	adrp	x25, 404000 <yytranslate+0x2>
  403d2c:	add	x26, x26, #0x8f5
  403d30:	add	x25, x25, #0x901
  403d34:	cbz	x28, 403c10 <extract_rules+0x1c0>
  403d38:	ldr	w8, [x28, #8]
  403d3c:	cmp	w8, #0x1
  403d40:	b.ne	403de8 <extract_rules+0x398>  // b.any
  403d44:	ldr	x0, [x28, #16]
  403d48:	adrp	x1, 404000 <yytranslate+0x2>
  403d4c:	add	x1, x1, #0x937
  403d50:	bl	4015c0 <xmlStrEqual@plt>
  403d54:	cbz	w0, 403de8 <extract_rules+0x398>
  403d58:	adrp	x25, 404000 <yytranslate+0x2>
  403d5c:	add	x25, x25, #0x942
  403d60:	mov	x0, x28
  403d64:	mov	x1, x25
  403d68:	bl	401340 <xmlHasProp@plt>
  403d6c:	cbz	x0, 403df0 <extract_rules+0x3a0>
  403d70:	mov	x0, x28
  403d74:	mov	x1, x25
  403d78:	str	x22, [sp, #16]
  403d7c:	bl	4013e0 <xmlGetProp@plt>
  403d80:	mov	x25, x0
  403d84:	mov	x0, x28
  403d88:	bl	401480 <xmlNodeGetContent@plt>
  403d8c:	mov	x26, x0
  403d90:	mov	x0, x25
  403d94:	bl	401460 <xmlStrlen@plt>
  403d98:	ldur	x27, [x29, #-16]
  403d9c:	mov	w22, w0
  403da0:	mov	x0, x26
  403da4:	bl	401460 <xmlStrlen@plt>
  403da8:	ldur	x20, [x29, #-8]
  403dac:	add	x8, x20, w22, sxtw
  403db0:	add	x9, x8, w0, sxtw
  403db4:	add	x8, x9, #0x5
  403db8:	cmp	x8, x27
  403dbc:	add	x9, x9, #0x4
  403dc0:	str	x9, [sp, #24]
  403dc4:	b.ls	403e48 <extract_rules+0x3f8>  // b.plast
  403dc8:	ldr	x0, [sp, #16]
  403dcc:	lsl	x9, x27, #1
  403dd0:	cmp	x9, x8
  403dd4:	csel	x1, x8, x9, cc  // cc = lo, ul, last
  403dd8:	mov	x27, x1
  403ddc:	bl	4013d0 <xrealloc@plt>
  403de0:	mov	x22, x0
  403de4:	b	403e4c <extract_rules+0x3fc>
  403de8:	mov	w8, wzr
  403dec:	b	403ea4 <extract_rules+0x454>
  403df0:	mov	x0, x28
  403df4:	bl	401570 <xmlGetLineNo@plt>
  403df8:	adrp	x1, 404000 <yytranslate+0x2>
  403dfc:	mov	x27, x25
  403e00:	mov	x25, x0
  403e04:	mov	w2, #0x5                   	// #5
  403e08:	mov	x0, xzr
  403e0c:	add	x1, x1, #0x909
  403e10:	bl	401590 <dcgettext@plt>
  403e14:	adrp	x5, 404000 <yytranslate+0x2>
  403e18:	mov	x4, x0
  403e1c:	mov	w0, wzr
  403e20:	mov	w1, wzr
  403e24:	mov	x2, x20
  403e28:	mov	w3, w25
  403e2c:	add	x5, x5, #0x937
  403e30:	mov	x6, x27
  403e34:	bl	4015f0 <error_at_line@plt>
  403e38:	adrp	x25, 404000 <yytranslate+0x2>
  403e3c:	mov	w8, #0x1                   	// #1
  403e40:	add	x25, x25, #0x901
  403e44:	b	403ea4 <extract_rules+0x454>
  403e48:	ldr	x22, [sp, #16]
  403e4c:	adrp	x1, 404000 <yytranslate+0x2>
  403e50:	add	x0, x22, x20
  403e54:	add	x1, x1, #0x948
  403e58:	mov	x2, x25
  403e5c:	mov	x3, x26
  403e60:	stur	x27, [x29, #-16]
  403e64:	bl	401350 <sprintf@plt>
  403e68:	adrp	x20, 415000 <memcpy@GLIBC_2.17>
  403e6c:	ldr	x8, [x20, #480]
  403e70:	mov	x0, x25
  403e74:	blr	x8
  403e78:	ldr	x8, [x20, #480]
  403e7c:	mov	x0, x26
  403e80:	blr	x8
  403e84:	ldr	x9, [sp, #24]
  403e88:	ldr	x20, [sp, #8]
  403e8c:	adrp	x26, 404000 <yytranslate+0x2>
  403e90:	adrp	x25, 404000 <yytranslate+0x2>
  403e94:	mov	w8, wzr
  403e98:	add	x26, x26, #0x8f5
  403e9c:	add	x25, x25, #0x901
  403ea0:	stur	x9, [x29, #-8]
  403ea4:	cbnz	w8, 403c10 <extract_rules+0x1c0>
  403ea8:	ldr	x28, [x28, #48]
  403eac:	cbnz	x28, 403d38 <extract_rules+0x2e8>
  403eb0:	b	403c10 <extract_rules+0x1c0>
  403eb4:	mov	x22, xzr
  403eb8:	cbz	x22, 403bc4 <extract_rules+0x174>
  403ebc:	mov	w1, #0x3b                  	// #59
  403ec0:	mov	x0, x22
  403ec4:	bl	4014a0 <strrchr@plt>
  403ec8:	cbz	x0, 403bc4 <extract_rules+0x174>
  403ecc:	strb	wzr, [x0]
  403ed0:	b	403bc4 <extract_rules+0x174>
  403ed4:	nop

0000000000403ed8 <__libc_csu_init>:
  403ed8:	stp	x29, x30, [sp, #-64]!
  403edc:	mov	x29, sp
  403ee0:	stp	x19, x20, [sp, #16]
  403ee4:	adrp	x20, 414000 <__FRAME_END__+0xf50c>
  403ee8:	add	x20, x20, #0xd80
  403eec:	stp	x21, x22, [sp, #32]
  403ef0:	adrp	x21, 414000 <__FRAME_END__+0xf50c>
  403ef4:	add	x21, x21, #0xd78
  403ef8:	sub	x20, x20, x21
  403efc:	mov	w22, w0
  403f00:	stp	x23, x24, [sp, #48]
  403f04:	mov	x23, x1
  403f08:	mov	x24, x2
  403f0c:	bl	4012b0 <_init>
  403f10:	cmp	xzr, x20, asr #3
  403f14:	b.eq	403f40 <__libc_csu_init+0x68>  // b.none
  403f18:	asr	x20, x20, #3
  403f1c:	mov	x19, #0x0                   	// #0
  403f20:	ldr	x3, [x21, x19, lsl #3]
  403f24:	mov	x2, x24
  403f28:	add	x19, x19, #0x1
  403f2c:	mov	x1, x23
  403f30:	mov	w0, w22
  403f34:	blr	x3
  403f38:	cmp	x20, x19
  403f3c:	b.ne	403f20 <__libc_csu_init+0x48>  // b.any
  403f40:	ldp	x19, x20, [sp, #16]
  403f44:	ldp	x21, x22, [sp, #32]
  403f48:	ldp	x23, x24, [sp, #48]
  403f4c:	ldp	x29, x30, [sp], #64
  403f50:	ret
  403f54:	nop

0000000000403f58 <__libc_csu_fini>:
  403f58:	ret
  403f5c:	nop

0000000000403f60 <atexit>:
  403f60:	adrp	x2, 415000 <memcpy@GLIBC_2.17>
  403f64:	mov	x1, #0x0                   	// #0
  403f68:	ldr	x2, [x2, #416]
  403f6c:	b	401370 <__cxa_atexit@plt>

Disassembly of section .fini:

0000000000403f70 <_fini>:
  403f70:	stp	x29, x30, [sp, #-16]!
  403f74:	mov	x29, sp
  403f78:	ldp	x29, x30, [sp], #16
  403f7c:	ret
