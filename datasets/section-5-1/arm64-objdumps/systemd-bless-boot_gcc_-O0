
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//systemd-bless-boot_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000401620 <_init>:
  401620:	stp	x29, x30, [sp, #-16]!
  401624:	mov	x29, sp
  401628:	bl	401a10 <call_weak_fn>
  40162c:	ldp	x29, x30, [sp], #16
  401630:	ret

Disassembly of section .plt:

0000000000401640 <.plt>:
  401640:	stp	x16, x30, [sp, #-16]!
  401644:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401648:	ldr	x17, [x16, #3640]
  40164c:	add	x16, x16, #0xe38
  401650:	br	x17
  401654:	nop
  401658:	nop
  40165c:	nop

0000000000401660 <__libc_start_main@plt>:
  401660:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401664:	ldr	x17, [x16, #3648]
  401668:	add	x16, x16, #0xe40
  40166c:	br	x17

0000000000401670 <safe_atollu@plt>:
  401670:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401674:	ldr	x17, [x16, #3656]
  401678:	add	x16, x16, #0xe48
  40167c:	br	x17

0000000000401680 <efi_get_variable_string@plt>:
  401680:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401684:	ldr	x17, [x16, #3664]
  401688:	add	x16, x16, #0xe50
  40168c:	br	x17

0000000000401690 <__gmon_start__@plt>:
  401690:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401694:	ldr	x17, [x16, #3672]
  401698:	add	x16, x16, #0xe58
  40169c:	br	x17

00000000004016a0 <polkit_agent_close@plt>:
  4016a0:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  4016a4:	ldr	x17, [x16, #3680]
  4016a8:	add	x16, x16, #0xe60
  4016ac:	br	x17

00000000004016b0 <log_parse_environment_realm@plt>:
  4016b0:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  4016b4:	ldr	x17, [x16, #3688]
  4016b8:	add	x16, x16, #0xe68
  4016bc:	br	x17

00000000004016c0 <strnlen@plt>:
  4016c0:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  4016c4:	ldr	x17, [x16, #3696]
  4016c8:	add	x16, x16, #0xe70
  4016cc:	br	x17

00000000004016d0 <dispatch_verb@plt>:
  4016d0:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  4016d4:	ldr	x17, [x16, #3704]
  4016d8:	add	x16, x16, #0xe78
  4016dc:	br	x17

00000000004016e0 <memcpy@plt>:
  4016e0:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  4016e4:	ldr	x17, [x16, #3712]
  4016e8:	add	x16, x16, #0xe80
  4016ec:	br	x17

00000000004016f0 <last_path_component@plt>:
  4016f0:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  4016f4:	ldr	x17, [x16, #3720]
  4016f8:	add	x16, x16, #0xe88
  4016fc:	br	x17

0000000000401700 <strjoin_real@plt>:
  401700:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401704:	ldr	x17, [x16, #3728]
  401708:	add	x16, x16, #0xe90
  40170c:	br	x17

0000000000401710 <safe_close@plt>:
  401710:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401714:	ldr	x17, [x16, #3736]
  401718:	add	x16, x16, #0xe98
  40171c:	br	x17

0000000000401720 <strrchr@plt>:
  401720:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401724:	ldr	x17, [x16, #3744]
  401728:	add	x16, x16, #0xea0
  40172c:	br	x17

0000000000401730 <log_assert_failed_realm@plt>:
  401730:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401734:	ldr	x17, [x16, #3752]
  401738:	add	x16, x16, #0xea8
  40173c:	br	x17

0000000000401740 <faccessat@plt>:
  401740:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401744:	ldr	x17, [x16, #3760]
  401748:	add	x16, x16, #0xeb0
  40174c:	br	x17

0000000000401750 <getopt_long@plt>:
  401750:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401754:	ldr	x17, [x16, #3768]
  401758:	add	x16, x16, #0xeb8
  40175c:	br	x17

0000000000401760 <dirname_malloc@plt>:
  401760:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401764:	ldr	x17, [x16, #3776]
  401768:	add	x16, x16, #0xec0
  40176c:	br	x17

0000000000401770 <log_assert_failed_unreachable_realm@plt>:
  401770:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401774:	ldr	x17, [x16, #3784]
  401778:	add	x16, x16, #0xec8
  40177c:	br	x17

0000000000401780 <path_is_absolute@plt>:
  401780:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401784:	ldr	x17, [x16, #3792]
  401788:	add	x16, x16, #0xed0
  40178c:	br	x17

0000000000401790 <rename_noreplace@plt>:
  401790:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401794:	ldr	x17, [x16, #3800]
  401798:	add	x16, x16, #0xed8
  40179c:	br	x17

00000000004017a0 <is_efi_boot@plt>:
  4017a0:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  4017a4:	ldr	x17, [x16, #3808]
  4017a8:	add	x16, x16, #0xee0
  4017ac:	br	x17

00000000004017b0 <path_is_normalized@plt>:
  4017b0:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  4017b4:	ldr	x17, [x16, #3816]
  4017b8:	add	x16, x16, #0xee8
  4017bc:	br	x17

00000000004017c0 <abort@plt>:
  4017c0:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  4017c4:	ldr	x17, [x16, #3824]
  4017c8:	add	x16, x16, #0xef0
  4017cc:	br	x17

00000000004017d0 <strv_new_internal@plt>:
  4017d0:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  4017d4:	ldr	x17, [x16, #3832]
  4017d8:	add	x16, x16, #0xef8
  4017dc:	br	x17

00000000004017e0 <strspn@plt>:
  4017e0:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  4017e4:	ldr	x17, [x16, #3840]
  4017e8:	add	x16, x16, #0xf00
  4017ec:	br	x17

00000000004017f0 <efi_tilt_backslashes@plt>:
  4017f0:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  4017f4:	ldr	x17, [x16, #3848]
  4017f8:	add	x16, x16, #0xf08
  4017fc:	br	x17

0000000000401800 <__errno_location@plt>:
  401800:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401804:	ldr	x17, [x16, #3856]
  401808:	add	x16, x16, #0xf10
  40180c:	br	x17

0000000000401810 <strv_free@plt>:
  401810:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401814:	ldr	x17, [x16, #3864]
  401818:	add	x16, x16, #0xf18
  40181c:	br	x17

0000000000401820 <find_xbootldr_and_warn@plt>:
  401820:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401824:	ldr	x17, [x16, #3872]
  401828:	add	x16, x16, #0xf20
  40182c:	br	x17

0000000000401830 <strv_extend@plt>:
  401830:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401834:	ldr	x17, [x16, #3880]
  401838:	add	x16, x16, #0xf28
  40183c:	br	x17

0000000000401840 <strndup@plt>:
  401840:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401844:	ldr	x17, [x16, #3888]
  401848:	add	x16, x16, #0xf30
  40184c:	br	x17

0000000000401850 <terminal_urlify_man@plt>:
  401850:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401854:	ldr	x17, [x16, #3896]
  401858:	add	x16, x16, #0xf38
  40185c:	br	x17

0000000000401860 <__stack_chk_fail@plt>:
  401860:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401864:	ldr	x17, [x16, #3904]
  401868:	add	x16, x16, #0xf40
  40186c:	br	x17

0000000000401870 <ask_password_agent_close@plt>:
  401870:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401874:	ldr	x17, [x16, #3912]
  401878:	add	x16, x16, #0xf48
  40187c:	br	x17

0000000000401880 <version@plt>:
  401880:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401884:	ldr	x17, [x16, #3920]
  401888:	add	x16, x16, #0xf50
  40188c:	br	x17

0000000000401890 <pager_close@plt>:
  401890:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401894:	ldr	x17, [x16, #3928]
  401898:	add	x16, x16, #0xf58
  40189c:	br	x17

00000000004018a0 <log_internal_realm@plt>:
  4018a0:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  4018a4:	ldr	x17, [x16, #3936]
  4018a8:	add	x16, x16, #0xf60
  4018ac:	br	x17

00000000004018b0 <strv_join_prefix@plt>:
  4018b0:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  4018b4:	ldr	x17, [x16, #3944]
  4018b8:	add	x16, x16, #0xf68
  4018bc:	br	x17

00000000004018c0 <detect_container@plt>:
  4018c0:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  4018c4:	ldr	x17, [x16, #3952]
  4018c8:	add	x16, x16, #0xf70
  4018cc:	br	x17

00000000004018d0 <strcmp@plt>:
  4018d0:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  4018d4:	ldr	x17, [x16, #3960]
  4018d8:	add	x16, x16, #0xf78
  4018dc:	br	x17

00000000004018e0 <strdup@plt>:
  4018e0:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  4018e4:	ldr	x17, [x16, #3968]
  4018e8:	add	x16, x16, #0xf80
  4018ec:	br	x17

00000000004018f0 <asprintf@plt>:
  4018f0:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  4018f4:	ldr	x17, [x16, #3976]
  4018f8:	add	x16, x16, #0xf88
  4018fc:	br	x17

0000000000401900 <colors_enabled@plt>:
  401900:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401904:	ldr	x17, [x16, #3984]
  401908:	add	x16, x16, #0xf90
  40190c:	br	x17

0000000000401910 <free@plt>:
  401910:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401914:	ldr	x17, [x16, #3992]
  401918:	add	x16, x16, #0xf98
  40191c:	br	x17

0000000000401920 <puts@plt>:
  401920:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401924:	ldr	x17, [x16, #4000]
  401928:	add	x16, x16, #0xfa0
  40192c:	br	x17

0000000000401930 <fsync_path_at@plt>:
  401930:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401934:	ldr	x17, [x16, #4008]
  401938:	add	x16, x16, #0xfa8
  40193c:	br	x17

0000000000401940 <mac_selinux_finish@plt>:
  401940:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401944:	ldr	x17, [x16, #4016]
  401948:	add	x16, x16, #0xfb0
  40194c:	br	x17

0000000000401950 <syncfs@plt>:
  401950:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401954:	ldr	x17, [x16, #4024]
  401958:	add	x16, x16, #0xfb8
  40195c:	br	x17

0000000000401960 <printf@plt>:
  401960:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401964:	ldr	x17, [x16, #4032]
  401968:	add	x16, x16, #0xfc0
  40196c:	br	x17

0000000000401970 <open64@plt>:
  401970:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401974:	ldr	x17, [x16, #4040]
  401978:	add	x16, x16, #0xfc8
  40197c:	br	x17

0000000000401980 <find_esp_and_warn@plt>:
  401980:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401984:	ldr	x17, [x16, #4048]
  401988:	add	x16, x16, #0xfd0
  40198c:	br	x17

0000000000401990 <log_open@plt>:
  401990:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  401994:	ldr	x17, [x16, #4056]
  401998:	add	x16, x16, #0xfd8
  40199c:	br	x17

00000000004019a0 <log_oom_internal@plt>:
  4019a0:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  4019a4:	ldr	x17, [x16, #4064]
  4019a8:	add	x16, x16, #0xfe0
  4019ac:	br	x17

00000000004019b0 <log_get_max_level_realm@plt>:
  4019b0:	adrp	x16, 415000 <__FRAME_END__+0xf740>
  4019b4:	ldr	x17, [x16, #4072]
  4019b8:	add	x16, x16, #0xfe8
  4019bc:	br	x17

Disassembly of section .text:

00000000004019c0 <_start>:
  4019c0:	mov	x29, #0x0                   	// #0
  4019c4:	mov	x30, #0x0                   	// #0
  4019c8:	mov	x5, x0
  4019cc:	ldr	x1, [sp]
  4019d0:	add	x2, sp, #0x8
  4019d4:	mov	x6, sp
  4019d8:	movz	x0, #0x0, lsl #48
  4019dc:	movk	x0, #0x0, lsl #32
  4019e0:	movk	x0, #0x40, lsl #16
  4019e4:	movk	x0, #0x46a4
  4019e8:	movz	x3, #0x0, lsl #48
  4019ec:	movk	x3, #0x0, lsl #32
  4019f0:	movk	x3, #0x40, lsl #16
  4019f4:	movk	x3, #0x46f8
  4019f8:	movz	x4, #0x0, lsl #48
  4019fc:	movk	x4, #0x0, lsl #32
  401a00:	movk	x4, #0x40, lsl #16
  401a04:	movk	x4, #0x4778
  401a08:	bl	401660 <__libc_start_main@plt>
  401a0c:	bl	4017c0 <abort@plt>

0000000000401a10 <call_weak_fn>:
  401a10:	adrp	x0, 415000 <__FRAME_END__+0xf740>
  401a14:	ldr	x0, [x0, #4088]
  401a18:	cbz	x0, 401a20 <call_weak_fn+0x10>
  401a1c:	b	401690 <__gmon_start__@plt>
  401a20:	ret

0000000000401a24 <deregister_tm_clones>:
  401a24:	stp	x29, x30, [sp, #-32]!
  401a28:	mov	x29, sp
  401a2c:	adrp	x0, 416000 <saved_argv@@SD_SHARED>
  401a30:	add	x0, x0, #0x0
  401a34:	str	x0, [sp, #24]
  401a38:	ldr	x0, [sp, #24]
  401a3c:	str	x0, [sp, #24]
  401a40:	ldr	x1, [sp, #24]
  401a44:	adrp	x0, 416000 <saved_argv@@SD_SHARED>
  401a48:	add	x0, x0, #0x0
  401a4c:	cmp	x1, x0
  401a50:	b.eq	401a8c <deregister_tm_clones+0x68>  // b.none
  401a54:	adrp	x0, 404000 <verb_set+0x600>
  401a58:	add	x0, x0, #0x790
  401a5c:	ldr	x0, [x0]
  401a60:	str	x0, [sp, #16]
  401a64:	ldr	x0, [sp, #16]
  401a68:	str	x0, [sp, #16]
  401a6c:	ldr	x0, [sp, #16]
  401a70:	cmp	x0, #0x0
  401a74:	b.eq	401a90 <deregister_tm_clones+0x6c>  // b.none
  401a78:	ldr	x1, [sp, #16]
  401a7c:	adrp	x0, 416000 <saved_argv@@SD_SHARED>
  401a80:	add	x0, x0, #0x0
  401a84:	blr	x1
  401a88:	b	401a90 <deregister_tm_clones+0x6c>
  401a8c:	nop
  401a90:	ldp	x29, x30, [sp], #32
  401a94:	ret

0000000000401a98 <register_tm_clones>:
  401a98:	stp	x29, x30, [sp, #-48]!
  401a9c:	mov	x29, sp
  401aa0:	adrp	x0, 416000 <saved_argv@@SD_SHARED>
  401aa4:	add	x0, x0, #0x0
  401aa8:	str	x0, [sp, #40]
  401aac:	ldr	x0, [sp, #40]
  401ab0:	str	x0, [sp, #40]
  401ab4:	ldr	x1, [sp, #40]
  401ab8:	adrp	x0, 416000 <saved_argv@@SD_SHARED>
  401abc:	add	x0, x0, #0x0
  401ac0:	sub	x0, x1, x0
  401ac4:	asr	x0, x0, #3
  401ac8:	lsr	x1, x0, #63
  401acc:	add	x0, x1, x0
  401ad0:	asr	x0, x0, #1
  401ad4:	str	x0, [sp, #32]
  401ad8:	ldr	x0, [sp, #32]
  401adc:	cmp	x0, #0x0
  401ae0:	b.eq	401b20 <register_tm_clones+0x88>  // b.none
  401ae4:	adrp	x0, 404000 <verb_set+0x600>
  401ae8:	add	x0, x0, #0x798
  401aec:	ldr	x0, [x0]
  401af0:	str	x0, [sp, #24]
  401af4:	ldr	x0, [sp, #24]
  401af8:	str	x0, [sp, #24]
  401afc:	ldr	x0, [sp, #24]
  401b00:	cmp	x0, #0x0
  401b04:	b.eq	401b24 <register_tm_clones+0x8c>  // b.none
  401b08:	ldr	x2, [sp, #24]
  401b0c:	ldr	x1, [sp, #32]
  401b10:	adrp	x0, 416000 <saved_argv@@SD_SHARED>
  401b14:	add	x0, x0, #0x0
  401b18:	blr	x2
  401b1c:	b	401b24 <register_tm_clones+0x8c>
  401b20:	nop
  401b24:	ldp	x29, x30, [sp], #48
  401b28:	ret

0000000000401b2c <__do_global_dtors_aux>:
  401b2c:	stp	x29, x30, [sp, #-16]!
  401b30:	mov	x29, sp
  401b34:	adrp	x0, 416000 <saved_argv@@SD_SHARED>
  401b38:	add	x0, x0, #0x20
  401b3c:	ldrb	w0, [x0]
  401b40:	and	x0, x0, #0xff
  401b44:	cmp	x0, #0x0
  401b48:	b.ne	401b64 <__do_global_dtors_aux+0x38>  // b.any
  401b4c:	bl	401a24 <deregister_tm_clones>
  401b50:	adrp	x0, 416000 <saved_argv@@SD_SHARED>
  401b54:	add	x0, x0, #0x20
  401b58:	mov	w1, #0x1                   	// #1
  401b5c:	strb	w1, [x0]
  401b60:	b	401b68 <__do_global_dtors_aux+0x3c>
  401b64:	nop
  401b68:	ldp	x29, x30, [sp], #16
  401b6c:	ret

0000000000401b70 <frame_dummy>:
  401b70:	stp	x29, x30, [sp, #-16]!
  401b74:	mov	x29, sp
  401b78:	bl	401a98 <register_tm_clones>
  401b7c:	nop
  401b80:	ldp	x29, x30, [sp], #16
  401b84:	ret

0000000000401b88 <ALIGN_TO>:
  401b88:	sub	sp, sp, #0x10
  401b8c:	str	x0, [sp, #8]
  401b90:	str	x1, [sp]
  401b94:	ldr	x1, [sp, #8]
  401b98:	ldr	x0, [sp]
  401b9c:	add	x0, x1, x0
  401ba0:	sub	x1, x0, #0x1
  401ba4:	ldr	x0, [sp]
  401ba8:	neg	x0, x0
  401bac:	and	x0, x1, x0
  401bb0:	add	sp, sp, #0x10
  401bb4:	ret

0000000000401bb8 <freep>:
  401bb8:	stp	x29, x30, [sp, #-32]!
  401bbc:	mov	x29, sp
  401bc0:	str	x0, [sp, #24]
  401bc4:	ldr	x0, [sp, #24]
  401bc8:	ldr	x0, [x0]
  401bcc:	bl	401910 <free@plt>
  401bd0:	nop
  401bd4:	ldp	x29, x30, [sp], #32
  401bd8:	ret

0000000000401bdc <closep>:
  401bdc:	stp	x29, x30, [sp, #-32]!
  401be0:	mov	x29, sp
  401be4:	str	x0, [sp, #24]
  401be8:	ldr	x0, [sp, #24]
  401bec:	ldr	w0, [x0]
  401bf0:	bl	401710 <safe_close@plt>
  401bf4:	nop
  401bf8:	ldp	x29, x30, [sp], #32
  401bfc:	ret

0000000000401c00 <save_argc_argv>:
  401c00:	sub	sp, sp, #0x10
  401c04:	str	w0, [sp, #12]
  401c08:	str	x1, [sp]
  401c0c:	adrp	x0, 416000 <saved_argv@@SD_SHARED>
  401c10:	add	x0, x0, #0x10
  401c14:	ldr	w1, [sp, #12]
  401c18:	str	w1, [x0]
  401c1c:	adrp	x0, 416000 <saved_argv@@SD_SHARED>
  401c20:	add	x0, x0, #0x0
  401c24:	ldr	x1, [sp]
  401c28:	str	x1, [x0]
  401c2c:	nop
  401c30:	add	sp, sp, #0x10
  401c34:	ret

0000000000401c38 <static_destruct>:
  401c38:	stp	x29, x30, [sp, #-32]!
  401c3c:	mov	x29, sp
  401c40:	adrp	x0, 405000 <_fini+0x884>
  401c44:	add	x0, x0, #0x180
  401c48:	ldr	x0, [x0]
  401c4c:	cmp	x0, #0x0
  401c50:	b.eq	401cb4 <static_destruct+0x7c>  // b.none
  401c54:	adrp	x0, 405000 <_fini+0x884>
  401c58:	add	x0, x0, #0x180
  401c5c:	ldr	x0, [x0]
  401c60:	mov	x1, #0x8                   	// #8
  401c64:	bl	401b88 <ALIGN_TO>
  401c68:	str	x0, [sp, #24]
  401c6c:	b	401c98 <static_destruct+0x60>
  401c70:	ldr	x0, [sp, #24]
  401c74:	ldr	x1, [x0, #8]
  401c78:	ldr	x0, [sp, #24]
  401c7c:	ldr	x0, [x0]
  401c80:	blr	x1
  401c84:	ldr	x0, [sp, #24]
  401c88:	add	x0, x0, #0x10
  401c8c:	mov	x1, #0x8                   	// #8
  401c90:	bl	401b88 <ALIGN_TO>
  401c94:	str	x0, [sp, #24]
  401c98:	ldr	x1, [sp, #24]
  401c9c:	adrp	x0, 405000 <_fini+0x884>
  401ca0:	add	x0, x0, #0x188
  401ca4:	ldr	x0, [x0]
  401ca8:	cmp	x1, x0
  401cac:	b.cc	401c70 <static_destruct+0x38>  // b.lo, b.ul, b.last
  401cb0:	b	401cb8 <static_destruct+0x80>
  401cb4:	nop
  401cb8:	ldp	x29, x30, [sp], #32
  401cbc:	ret

0000000000401cc0 <safe_atou64>:
  401cc0:	stp	x29, x30, [sp, #-32]!
  401cc4:	mov	x29, sp
  401cc8:	str	x0, [sp, #24]
  401ccc:	str	x1, [sp, #16]
  401cd0:	ldr	x1, [sp, #16]
  401cd4:	ldr	x0, [sp, #24]
  401cd8:	bl	401670 <safe_atollu@plt>
  401cdc:	ldp	x29, x30, [sp], #32
  401ce0:	ret

0000000000401ce4 <strv_freep>:
  401ce4:	stp	x29, x30, [sp, #-32]!
  401ce8:	mov	x29, sp
  401cec:	str	x0, [sp, #24]
  401cf0:	ldr	x0, [sp, #24]
  401cf4:	ldr	x0, [x0]
  401cf8:	cmp	x0, #0x0
  401cfc:	b.eq	401d0c <strv_freep+0x28>  // b.none
  401d00:	ldr	x0, [sp, #24]
  401d04:	ldr	x0, [x0]
  401d08:	bl	401810 <strv_free@plt>
  401d0c:	nop
  401d10:	ldp	x29, x30, [sp], #32
  401d14:	ret

0000000000401d18 <strv_isempty>:
  401d18:	sub	sp, sp, #0x10
  401d1c:	str	x0, [sp, #8]
  401d20:	ldr	x0, [sp, #8]
  401d24:	cmp	x0, #0x0
  401d28:	b.eq	401d3c <strv_isempty+0x24>  // b.none
  401d2c:	ldr	x0, [sp, #8]
  401d30:	ldr	x0, [x0]
  401d34:	cmp	x0, #0x0
  401d38:	b.ne	401d44 <strv_isempty+0x2c>  // b.any
  401d3c:	mov	w0, #0x1                   	// #1
  401d40:	b	401d48 <strv_isempty+0x30>
  401d44:	mov	w0, #0x0                   	// #0
  401d48:	and	w0, w0, #0x1
  401d4c:	and	w0, w0, #0xff
  401d50:	add	sp, sp, #0x10
  401d54:	ret

0000000000401d58 <strv_join>:
  401d58:	stp	x29, x30, [sp, #-32]!
  401d5c:	mov	x29, sp
  401d60:	str	x0, [sp, #24]
  401d64:	str	x1, [sp, #16]
  401d68:	mov	x2, #0x0                   	// #0
  401d6c:	ldr	x1, [sp, #16]
  401d70:	ldr	x0, [sp, #24]
  401d74:	bl	4018b0 <strv_join_prefix@plt>
  401d78:	ldp	x29, x30, [sp], #32
  401d7c:	ret

0000000000401d80 <ansi_normal>:
  401d80:	stp	x29, x30, [sp, #-16]!
  401d84:	mov	x29, sp
  401d88:	bl	401900 <colors_enabled@plt>
  401d8c:	and	w0, w0, #0xff
  401d90:	cmp	w0, #0x0
  401d94:	b.eq	401da4 <ansi_normal+0x24>  // b.none
  401d98:	adrp	x0, 404000 <verb_set+0x600>
  401d9c:	add	x0, x0, #0x7a0
  401da0:	b	401dac <ansi_normal+0x2c>
  401da4:	adrp	x0, 404000 <verb_set+0x600>
  401da8:	add	x0, x0, #0x7a8
  401dac:	ldp	x29, x30, [sp], #16
  401db0:	ret

0000000000401db4 <ansi_highlight>:
  401db4:	stp	x29, x30, [sp, #-16]!
  401db8:	mov	x29, sp
  401dbc:	bl	401900 <colors_enabled@plt>
  401dc0:	and	w0, w0, #0xff
  401dc4:	cmp	w0, #0x0
  401dc8:	b.eq	401dd8 <ansi_highlight+0x24>  // b.none
  401dcc:	adrp	x0, 404000 <verb_set+0x600>
  401dd0:	add	x0, x0, #0x7b0
  401dd4:	b	401de0 <ansi_highlight+0x2c>
  401dd8:	adrp	x0, 404000 <verb_set+0x600>
  401ddc:	add	x0, x0, #0x7a8
  401de0:	ldp	x29, x30, [sp], #16
  401de4:	ret

0000000000401de8 <__unique_prefix_static_destructor_wrapper0>:
  401de8:	stp	x29, x30, [sp, #-48]!
  401dec:	mov	x29, sp
  401df0:	str	x0, [sp, #24]
  401df4:	ldr	x0, [sp, #24]
  401df8:	str	x0, [sp, #40]
  401dfc:	ldr	x0, [sp, #40]
  401e00:	bl	401ce4 <strv_freep>
  401e04:	nop
  401e08:	ldp	x29, x30, [sp], #48
  401e0c:	ret

0000000000401e10 <help>:
  401e10:	stp	x29, x30, [sp, #-96]!
  401e14:	mov	x29, sp
  401e18:	stp	x19, x20, [sp, #16]
  401e1c:	str	w0, [sp, #60]
  401e20:	str	x1, [sp, #48]
  401e24:	str	x2, [sp, #40]
  401e28:	adrp	x0, 415000 <__FRAME_END__+0xf740>
  401e2c:	add	x0, x0, #0xbf0
  401e30:	ldr	x1, [x0]
  401e34:	str	x1, [sp, #88]
  401e38:	mov	x1, #0x0                   	// #0
  401e3c:	str	xzr, [sp, #80]
  401e40:	add	x0, sp, #0x50
  401e44:	mov	x2, x0
  401e48:	adrp	x0, 404000 <verb_set+0x600>
  401e4c:	add	x1, x0, #0x7c0
  401e50:	adrp	x0, 404000 <verb_set+0x600>
  401e54:	add	x0, x0, #0x7c8
  401e58:	bl	401850 <terminal_urlify_man@plt>
  401e5c:	str	w0, [sp, #76]
  401e60:	ldr	w0, [sp, #76]
  401e64:	cmp	w0, #0x0
  401e68:	b.ge	401e90 <help+0x80>  // b.tcont
  401e6c:	adrp	x0, 404000 <verb_set+0x600>
  401e70:	add	x1, x0, #0x7eb
  401e74:	adrp	x0, 405000 <_fini+0x884>
  401e78:	add	x3, x0, #0x190
  401e7c:	mov	w2, #0x20                  	// #32
  401e80:	mov	w0, #0x0                   	// #0
  401e84:	bl	4019a0 <log_oom_internal@plt>
  401e88:	mov	w19, w0
  401e8c:	b	401ed0 <help+0xc0>
  401e90:	adrp	x0, 416000 <saved_argv@@SD_SHARED>
  401e94:	add	x0, x0, #0x8
  401e98:	ldr	x19, [x0]
  401e9c:	bl	401db4 <ansi_highlight>
  401ea0:	mov	x20, x0
  401ea4:	bl	401d80 <ansi_normal>
  401ea8:	mov	x1, x0
  401eac:	ldr	x0, [sp, #80]
  401eb0:	mov	x4, x0
  401eb4:	mov	x3, x1
  401eb8:	mov	x2, x20
  401ebc:	mov	x1, x19
  401ec0:	adrp	x0, 404000 <verb_set+0x600>
  401ec4:	add	x0, x0, #0x808
  401ec8:	bl	401960 <printf@plt>
  401ecc:	mov	w19, #0x0                   	// #0
  401ed0:	add	x0, sp, #0x50
  401ed4:	bl	401bb8 <freep>
  401ed8:	mov	w1, w19
  401edc:	adrp	x0, 415000 <__FRAME_END__+0xf740>
  401ee0:	add	x0, x0, #0xbf0
  401ee4:	ldr	x2, [sp, #88]
  401ee8:	ldr	x0, [x0]
  401eec:	eor	x0, x2, x0
  401ef0:	cmp	x0, #0x0
  401ef4:	b.eq	401efc <help+0xec>  // b.none
  401ef8:	bl	401860 <__stack_chk_fail@plt>
  401efc:	mov	w0, w1
  401f00:	ldp	x19, x20, [sp, #16]
  401f04:	ldp	x29, x30, [sp], #96
  401f08:	ret

0000000000401f0c <parse_argv>:
  401f0c:	stp	x29, x30, [sp, #-48]!
  401f10:	mov	x29, sp
  401f14:	str	w0, [sp, #28]
  401f18:	str	x1, [sp, #16]
  401f1c:	ldr	w0, [sp, #28]
  401f20:	lsr	w0, w0, #31
  401f24:	and	w0, w0, #0xff
  401f28:	and	x0, x0, #0xff
  401f2c:	cmp	x0, #0x0
  401f30:	b.eq	401f5c <parse_argv+0x50>  // b.none
  401f34:	adrp	x0, 404000 <verb_set+0x600>
  401f38:	add	x1, x0, #0x7eb
  401f3c:	adrp	x0, 405000 <_fini+0x884>
  401f40:	add	x4, x0, #0x198
  401f44:	mov	w3, #0x45                  	// #69
  401f48:	mov	x2, x1
  401f4c:	adrp	x0, 404000 <verb_set+0x600>
  401f50:	add	x1, x0, #0x9a0
  401f54:	mov	w0, #0x0                   	// #0
  401f58:	bl	401730 <log_assert_failed_realm@plt>
  401f5c:	ldr	x0, [sp, #16]
  401f60:	cmp	x0, #0x0
  401f64:	cset	w0, eq  // eq = none
  401f68:	and	w0, w0, #0xff
  401f6c:	and	x0, x0, #0xff
  401f70:	cmp	x0, #0x0
  401f74:	b.eq	402084 <parse_argv+0x178>  // b.none
  401f78:	adrp	x0, 404000 <verb_set+0x600>
  401f7c:	add	x1, x0, #0x7eb
  401f80:	adrp	x0, 405000 <_fini+0x884>
  401f84:	add	x4, x0, #0x198
  401f88:	mov	w3, #0x46                  	// #70
  401f8c:	mov	x2, x1
  401f90:	adrp	x0, 404000 <verb_set+0x600>
  401f94:	add	x1, x0, #0x9b0
  401f98:	mov	w0, #0x0                   	// #0
  401f9c:	bl	401730 <log_assert_failed_realm@plt>
  401fa0:	ldr	w0, [sp, #40]
  401fa4:	cmp	w0, #0x101
  401fa8:	b.eq	402000 <parse_argv+0xf4>  // b.none
  401fac:	ldr	w0, [sp, #40]
  401fb0:	cmp	w0, #0x101
  401fb4:	b.gt	40205c <parse_argv+0x150>
  401fb8:	ldr	w0, [sp, #40]
  401fbc:	cmp	w0, #0x100
  401fc0:	b.eq	402008 <parse_argv+0xfc>  // b.none
  401fc4:	ldr	w0, [sp, #40]
  401fc8:	cmp	w0, #0x100
  401fcc:	b.gt	40205c <parse_argv+0x150>
  401fd0:	ldr	w0, [sp, #40]
  401fd4:	cmp	w0, #0x3f
  401fd8:	b.eq	402054 <parse_argv+0x148>  // b.none
  401fdc:	ldr	w0, [sp, #40]
  401fe0:	cmp	w0, #0x68
  401fe4:	b.ne	40205c <parse_argv+0x150>  // b.any
  401fe8:	mov	x2, #0x0                   	// #0
  401fec:	mov	x1, #0x0                   	// #0
  401ff0:	mov	w0, #0x0                   	// #0
  401ff4:	bl	401e10 <help>
  401ff8:	mov	w0, #0x0                   	// #0
  401ffc:	b	4020b8 <parse_argv+0x1ac>
  402000:	bl	401880 <version@plt>
  402004:	b	4020b8 <parse_argv+0x1ac>
  402008:	adrp	x0, 416000 <saved_argv@@SD_SHARED>
  40200c:	add	x0, x0, #0x18
  402010:	ldr	x0, [x0]
  402014:	mov	x1, x0
  402018:	adrp	x0, 416000 <saved_argv@@SD_SHARED>
  40201c:	add	x0, x0, #0x28
  402020:	bl	401830 <strv_extend@plt>
  402024:	str	w0, [sp, #44]
  402028:	ldr	w0, [sp, #44]
  40202c:	cmp	w0, #0x0
  402030:	b.ge	402084 <parse_argv+0x178>  // b.tcont
  402034:	adrp	x0, 404000 <verb_set+0x600>
  402038:	add	x1, x0, #0x7eb
  40203c:	adrp	x0, 405000 <_fini+0x884>
  402040:	add	x3, x0, #0x1a8
  402044:	mov	w2, #0x55                  	// #85
  402048:	mov	w0, #0x0                   	// #0
  40204c:	bl	4019a0 <log_oom_internal@plt>
  402050:	b	4020b8 <parse_argv+0x1ac>
  402054:	mov	w0, #0xffffffea            	// #-22
  402058:	b	4020b8 <parse_argv+0x1ac>
  40205c:	adrp	x0, 404000 <verb_set+0x600>
  402060:	add	x1, x0, #0x7eb
  402064:	adrp	x0, 405000 <_fini+0x884>
  402068:	add	x4, x0, #0x198
  40206c:	mov	w3, #0x5c                  	// #92
  402070:	mov	x2, x1
  402074:	adrp	x0, 404000 <verb_set+0x600>
  402078:	add	x1, x0, #0x9b8
  40207c:	mov	w0, #0x0                   	// #0
  402080:	bl	401770 <log_assert_failed_unreachable_realm@plt>
  402084:	mov	x4, #0x0                   	// #0
  402088:	adrp	x0, 405000 <_fini+0x884>
  40208c:	add	x3, x0, #0x1b8
  402090:	adrp	x0, 404000 <verb_set+0x600>
  402094:	add	x2, x0, #0x9c8
  402098:	ldr	x1, [sp, #16]
  40209c:	ldr	w0, [sp, #28]
  4020a0:	bl	401750 <getopt_long@plt>
  4020a4:	str	w0, [sp, #40]
  4020a8:	ldr	w0, [sp, #40]
  4020ac:	cmp	w0, #0x0
  4020b0:	b.ge	401fa0 <parse_argv+0x94>  // b.tcont
  4020b4:	mov	w0, #0x1                   	// #1
  4020b8:	ldp	x29, x30, [sp], #48
  4020bc:	ret

00000000004020c0 <acquire_path>:
  4020c0:	stp	x29, x30, [sp, #-112]!
  4020c4:	mov	x29, sp
  4020c8:	str	x19, [sp, #16]
  4020cc:	adrp	x0, 415000 <__FRAME_END__+0xf740>
  4020d0:	add	x0, x0, #0xbf0
  4020d4:	ldr	x1, [x0]
  4020d8:	str	x1, [sp, #104]
  4020dc:	mov	x1, #0x0                   	// #0
  4020e0:	str	xzr, [sp, #72]
  4020e4:	str	xzr, [sp, #80]
  4020e8:	adrp	x0, 416000 <saved_argv@@SD_SHARED>
  4020ec:	add	x0, x0, #0x28
  4020f0:	ldr	x0, [x0]
  4020f4:	bl	401d18 <strv_isempty>
  4020f8:	and	w0, w0, #0xff
  4020fc:	eor	w0, w0, #0x1
  402100:	and	w0, w0, #0xff
  402104:	cmp	w0, #0x0
  402108:	b.eq	402114 <acquire_path+0x54>  // b.none
  40210c:	mov	w19, #0x0                   	// #0
  402110:	b	402390 <acquire_path+0x2d0>
  402114:	add	x0, sp, #0x48
  402118:	mov	x6, #0x0                   	// #0
  40211c:	mov	x5, #0x0                   	// #0
  402120:	mov	x4, #0x0                   	// #0
  402124:	mov	x3, #0x0                   	// #0
  402128:	mov	x2, x0
  40212c:	mov	w1, #0x0                   	// #0
  402130:	mov	x0, #0x0                   	// #0
  402134:	bl	401980 <find_esp_and_warn@plt>
  402138:	str	w0, [sp, #44]
  40213c:	ldr	w0, [sp, #44]
  402140:	cmp	w0, #0x0
  402144:	b.ge	40215c <acquire_path+0x9c>  // b.tcont
  402148:	ldr	w0, [sp, #44]
  40214c:	cmn	w0, #0x7e
  402150:	b.eq	40215c <acquire_path+0x9c>  // b.none
  402154:	ldr	w19, [sp, #44]
  402158:	b	402390 <acquire_path+0x2d0>
  40215c:	add	x0, sp, #0x50
  402160:	mov	x3, #0x0                   	// #0
  402164:	mov	x2, x0
  402168:	mov	w1, #0x0                   	// #0
  40216c:	mov	x0, #0x0                   	// #0
  402170:	bl	401820 <find_xbootldr_and_warn@plt>
  402174:	str	w0, [sp, #44]
  402178:	ldr	w0, [sp, #44]
  40217c:	cmp	w0, #0x0
  402180:	b.ge	402198 <acquire_path+0xd8>  // b.tcont
  402184:	ldr	w0, [sp, #44]
  402188:	cmn	w0, #0x7e
  40218c:	b.eq	402198 <acquire_path+0xd8>  // b.none
  402190:	ldr	w19, [sp, #44]
  402194:	b	402390 <acquire_path+0x2d0>
  402198:	ldr	x0, [sp, #72]
  40219c:	cmp	x0, #0x0
  4021a0:	b.ne	402240 <acquire_path+0x180>  // b.any
  4021a4:	ldr	x0, [sp, #80]
  4021a8:	cmp	x0, #0x0
  4021ac:	b.ne	402240 <acquire_path+0x180>  // b.any
  4021b0:	mov	w0, #0x3                   	// #3
  4021b4:	str	w0, [sp, #48]
  4021b8:	mov	w0, #0x2                   	// #2
  4021bc:	movk	w0, #0x4000, lsl #16
  4021c0:	str	w0, [sp, #52]
  4021c4:	str	wzr, [sp, #56]
  4021c8:	ldr	w0, [sp, #56]
  4021cc:	bl	4019b0 <log_get_max_level_realm@plt>
  4021d0:	mov	w1, w0
  4021d4:	ldr	w0, [sp, #48]
  4021d8:	and	w0, w0, #0x7
  4021dc:	cmp	w1, w0
  4021e0:	b.lt	402228 <acquire_path+0x168>  // b.tstop
  4021e4:	ldr	w0, [sp, #56]
  4021e8:	lsl	w1, w0, #10
  4021ec:	ldr	w0, [sp, #48]
  4021f0:	orr	w6, w1, w0
  4021f4:	adrp	x0, 404000 <verb_set+0x600>
  4021f8:	add	x1, x0, #0x7eb
  4021fc:	adrp	x0, 404000 <verb_set+0x600>
  402200:	add	x5, x0, #0x9d0
  402204:	adrp	x0, 405000 <_fini+0x884>
  402208:	add	x4, x0, #0x238
  40220c:	mov	w3, #0x73                  	// #115
  402210:	mov	x2, x1
  402214:	ldr	w1, [sp, #52]
  402218:	mov	w0, w6
  40221c:	bl	4018a0 <log_internal_realm@plt>
  402220:	mov	w19, w0
  402224:	b	402390 <acquire_path+0x2d0>
  402228:	ldr	w0, [sp, #52]
  40222c:	cmp	w0, #0x0
  402230:	cneg	w0, w0, lt  // lt = tstop
  402234:	and	w0, w0, #0xff
  402238:	neg	w19, w0
  40223c:	b	402390 <acquire_path+0x2d0>
  402240:	ldr	x0, [sp, #72]
  402244:	cmp	x0, #0x0
  402248:	b.eq	402264 <acquire_path+0x1a4>  // b.none
  40224c:	ldr	x0, [sp, #72]
  402250:	ldr	x1, [sp, #80]
  402254:	mov	x2, #0x0                   	// #0
  402258:	bl	4017d0 <strv_new_internal@plt>
  40225c:	str	x0, [sp, #96]
  402260:	b	402274 <acquire_path+0x1b4>
  402264:	ldr	x0, [sp, #80]
  402268:	mov	x1, #0x0                   	// #0
  40226c:	bl	4017d0 <strv_new_internal@plt>
  402270:	str	x0, [sp, #96]
  402274:	ldr	x0, [sp, #96]
  402278:	cmp	x0, #0x0
  40227c:	b.ne	4022a4 <acquire_path+0x1e4>  // b.any
  402280:	adrp	x0, 404000 <verb_set+0x600>
  402284:	add	x1, x0, #0x7eb
  402288:	adrp	x0, 405000 <_fini+0x884>
  40228c:	add	x3, x0, #0x238
  402290:	mov	w2, #0x7c                  	// #124
  402294:	mov	w0, #0x0                   	// #0
  402298:	bl	4019a0 <log_oom_internal@plt>
  40229c:	mov	w19, w0
  4022a0:	b	402390 <acquire_path+0x2d0>
  4022a4:	adrp	x0, 416000 <saved_argv@@SD_SHARED>
  4022a8:	add	x0, x0, #0x28
  4022ac:	ldr	x0, [x0]
  4022b0:	bl	401810 <strv_free@plt>
  4022b4:	adrp	x0, 416000 <saved_argv@@SD_SHARED>
  4022b8:	add	x0, x0, #0x28
  4022bc:	ldr	x1, [sp, #96]
  4022c0:	str	x1, [x0]
  4022c4:	str	xzr, [sp, #96]
  4022c8:	mov	w0, #0x0                   	// #0
  4022cc:	bl	4019b0 <log_get_max_level_realm@plt>
  4022d0:	cmp	w0, #0x6
  4022d4:	cset	w0, gt
  4022d8:	and	w0, w0, #0xff
  4022dc:	and	x0, x0, #0xff
  4022e0:	cmp	x0, #0x0
  4022e4:	b.eq	40238c <acquire_path+0x2cc>  // b.none
  4022e8:	adrp	x0, 416000 <saved_argv@@SD_SHARED>
  4022ec:	add	x0, x0, #0x28
  4022f0:	ldr	x2, [x0]
  4022f4:	adrp	x0, 404000 <verb_set+0x600>
  4022f8:	add	x1, x0, #0xa58
  4022fc:	mov	x0, x2
  402300:	bl	401d58 <strv_join>
  402304:	str	x0, [sp, #88]
  402308:	mov	w0, #0x7                   	// #7
  40230c:	str	w0, [sp, #60]
  402310:	str	wzr, [sp, #64]
  402314:	str	wzr, [sp, #68]
  402318:	ldr	w0, [sp, #68]
  40231c:	bl	4019b0 <log_get_max_level_realm@plt>
  402320:	mov	w1, w0
  402324:	ldr	w0, [sp, #60]
  402328:	and	w0, w0, #0x7
  40232c:	cmp	w1, w0
  402330:	b.lt	40237c <acquire_path+0x2bc>  // b.tstop
  402334:	ldr	w0, [sp, #68]
  402338:	lsl	w1, w0, #10
  40233c:	ldr	w0, [sp, #60]
  402340:	orr	w7, w1, w0
  402344:	adrp	x0, 404000 <verb_set+0x600>
  402348:	add	x1, x0, #0x7eb
  40234c:	ldr	x0, [sp, #88]
  402350:	mov	x6, x0
  402354:	adrp	x0, 404000 <verb_set+0x600>
  402358:	add	x5, x0, #0xa60
  40235c:	adrp	x0, 405000 <_fini+0x884>
  402360:	add	x4, x0, #0x238
  402364:	mov	w3, #0x84                  	// #132
  402368:	mov	x2, x1
  40236c:	ldr	w1, [sp, #64]
  402370:	mov	w0, w7
  402374:	bl	4018a0 <log_internal_realm@plt>
  402378:	b	402384 <acquire_path+0x2c4>
  40237c:	ldr	w0, [sp, #64]
  402380:	cmp	w0, #0x0
  402384:	add	x0, sp, #0x58
  402388:	bl	401bb8 <freep>
  40238c:	mov	w19, #0x0                   	// #0
  402390:	add	x0, sp, #0x50
  402394:	bl	401bb8 <freep>
  402398:	add	x0, sp, #0x48
  40239c:	bl	401bb8 <freep>
  4023a0:	mov	w1, w19
  4023a4:	adrp	x0, 415000 <__FRAME_END__+0xf740>
  4023a8:	add	x0, x0, #0xbf0
  4023ac:	ldr	x2, [sp, #104]
  4023b0:	ldr	x0, [x0]
  4023b4:	eor	x0, x2, x0
  4023b8:	cmp	x0, #0x0
  4023bc:	b.eq	4023c4 <acquire_path+0x304>  // b.none
  4023c0:	bl	401860 <__stack_chk_fail@plt>
  4023c4:	mov	w0, w1
  4023c8:	ldr	x19, [sp, #16]
  4023cc:	ldp	x29, x30, [sp], #112
  4023d0:	ret

00000000004023d4 <parse_counter>:
  4023d4:	stp	x29, x30, [sp, #-208]!
  4023d8:	mov	x29, sp
  4023dc:	str	x0, [x29, #40]
  4023e0:	str	x1, [x29, #32]
  4023e4:	str	x2, [x29, #24]
  4023e8:	str	x3, [x29, #16]
  4023ec:	adrp	x0, 415000 <__FRAME_END__+0xf740>
  4023f0:	add	x0, x0, #0xbf0
  4023f4:	ldr	x1, [x0]
  4023f8:	str	x1, [x29, #200]
  4023fc:	mov	x1, #0x0                   	// #0
  402400:	ldr	x0, [x29, #40]
  402404:	cmp	x0, #0x0
  402408:	cset	w0, eq  // eq = none
  40240c:	and	w0, w0, #0xff
  402410:	and	x0, x0, #0xff
  402414:	cmp	x0, #0x0
  402418:	b.eq	402444 <parse_counter+0x70>  // b.none
  40241c:	adrp	x0, 404000 <verb_set+0x600>
  402420:	add	x1, x0, #0x7eb
  402424:	adrp	x0, 405000 <_fini+0x884>
  402428:	add	x4, x0, #0x248
  40242c:	mov	w3, #0x95                  	// #149
  402430:	mov	x2, x1
  402434:	adrp	x0, 404000 <verb_set+0x600>
  402438:	add	x1, x0, #0xa90
  40243c:	mov	w0, #0x0                   	// #0
  402440:	bl	401730 <log_assert_failed_realm@plt>
  402444:	ldr	x0, [x29, #32]
  402448:	cmp	x0, #0x0
  40244c:	cset	w0, eq  // eq = none
  402450:	and	w0, w0, #0xff
  402454:	and	x0, x0, #0xff
  402458:	cmp	x0, #0x0
  40245c:	b.eq	402488 <parse_counter+0xb4>  // b.none
  402460:	adrp	x0, 404000 <verb_set+0x600>
  402464:	add	x1, x0, #0x7eb
  402468:	adrp	x0, 405000 <_fini+0x884>
  40246c:	add	x4, x0, #0x248
  402470:	mov	w3, #0x96                  	// #150
  402474:	mov	x2, x1
  402478:	adrp	x0, 404000 <verb_set+0x600>
  40247c:	add	x1, x0, #0xa98
  402480:	mov	w0, #0x0                   	// #0
  402484:	bl	401730 <log_assert_failed_realm@plt>
  402488:	ldr	x0, [x29, #32]
  40248c:	ldr	x0, [x0]
  402490:	str	x0, [x29, #128]
  402494:	ldr	x0, [x29, #128]
  402498:	cmp	x0, #0x0
  40249c:	cset	w0, eq  // eq = none
  4024a0:	and	w0, w0, #0xff
  4024a4:	and	x0, x0, #0xff
  4024a8:	cmp	x0, #0x0
  4024ac:	b.eq	4024d8 <parse_counter+0x104>  // b.none
  4024b0:	adrp	x0, 404000 <verb_set+0x600>
  4024b4:	add	x1, x0, #0x7eb
  4024b8:	adrp	x0, 405000 <_fini+0x884>
  4024bc:	add	x4, x0, #0x248
  4024c0:	mov	w3, #0x99                  	// #153
  4024c4:	mov	x2, x1
  4024c8:	adrp	x0, 404000 <verb_set+0x600>
  4024cc:	add	x1, x0, #0xaa0
  4024d0:	mov	w0, #0x0                   	// #0
  4024d4:	bl	401730 <log_assert_failed_realm@plt>
  4024d8:	ldr	x0, [x29, #128]
  4024dc:	ldrb	w0, [x0]
  4024e0:	cmp	w0, #0x2b
  4024e4:	cset	w0, ne  // ne = any
  4024e8:	and	w0, w0, #0xff
  4024ec:	and	x0, x0, #0xff
  4024f0:	cmp	x0, #0x0
  4024f4:	b.eq	402520 <parse_counter+0x14c>  // b.none
  4024f8:	adrp	x0, 404000 <verb_set+0x600>
  4024fc:	add	x1, x0, #0x7eb
  402500:	adrp	x0, 405000 <_fini+0x884>
  402504:	add	x4, x0, #0x248
  402508:	mov	w3, #0x9a                  	// #154
  40250c:	mov	x2, x1
  402510:	adrp	x0, 404000 <verb_set+0x600>
  402514:	add	x1, x0, #0xaa8
  402518:	mov	w0, #0x0                   	// #0
  40251c:	bl	401730 <log_assert_failed_realm@plt>
  402520:	ldr	x0, [x29, #128]
  402524:	add	x0, x0, #0x1
  402528:	str	x0, [x29, #128]
  40252c:	adrp	x0, 404000 <verb_set+0x600>
  402530:	add	x1, x0, #0xab8
  402534:	ldr	x0, [x29, #128]
  402538:	bl	4017e0 <strspn@plt>
  40253c:	str	x0, [x29, #136]
  402540:	ldr	x0, [x29, #136]
  402544:	cmp	x0, #0x0
  402548:	b.ne	4025dc <parse_counter+0x208>  // b.any
  40254c:	mov	w0, #0x3                   	// #3
  402550:	str	w0, [x29, #100]
  402554:	mov	w0, #0x16                  	// #22
  402558:	movk	w0, #0x4000, lsl #16
  40255c:	str	w0, [x29, #104]
  402560:	str	wzr, [x29, #108]
  402564:	ldr	w0, [x29, #108]
  402568:	bl	4019b0 <log_get_max_level_realm@plt>
  40256c:	mov	w1, w0
  402570:	ldr	w0, [x29, #100]
  402574:	and	w0, w0, #0x7
  402578:	cmp	w1, w0
  40257c:	b.lt	4025c4 <parse_counter+0x1f0>  // b.tstop
  402580:	ldr	w0, [x29, #108]
  402584:	lsl	w1, w0, #10
  402588:	ldr	w0, [x29, #100]
  40258c:	orr	w7, w1, w0
  402590:	adrp	x0, 404000 <verb_set+0x600>
  402594:	add	x1, x0, #0x7eb
  402598:	ldr	x6, [x29, #40]
  40259c:	adrp	x0, 404000 <verb_set+0x600>
  4025a0:	add	x5, x0, #0xac8
  4025a4:	adrp	x0, 405000 <_fini+0x884>
  4025a8:	add	x4, x0, #0x258
  4025ac:	mov	w3, #0xa0                  	// #160
  4025b0:	mov	x2, x1
  4025b4:	ldr	w1, [x29, #104]
  4025b8:	mov	w0, w7
  4025bc:	bl	4018a0 <log_internal_realm@plt>
  4025c0:	b	4029b8 <parse_counter+0x5e4>
  4025c4:	ldr	w0, [x29, #104]
  4025c8:	cmp	w0, #0x0
  4025cc:	cneg	w0, w0, lt  // lt = tstop
  4025d0:	and	w0, w0, #0xff
  4025d4:	neg	w0, w0
  4025d8:	b	4029b8 <parse_counter+0x5e4>
  4025dc:	ldr	x0, [x29, #128]
  4025e0:	str	x0, [x29, #144]
  4025e4:	ldr	x1, [x29, #136]
  4025e8:	ldr	x0, [x29, #144]
  4025ec:	bl	4016c0 <strnlen@plt>
  4025f0:	str	x0, [x29, #152]
  4025f4:	ldr	x0, [x29, #152]
  4025f8:	add	x0, x0, #0x1
  4025fc:	add	x0, x0, #0xf
  402600:	lsr	x0, x0, #4
  402604:	lsl	x0, x0, #4
  402608:	sub	sp, sp, x0
  40260c:	mov	x0, sp
  402610:	add	x0, x0, #0xf
  402614:	lsr	x0, x0, #4
  402618:	lsl	x0, x0, #4
  40261c:	str	x0, [x29, #160]
  402620:	ldr	x1, [x29, #160]
  402624:	ldr	x0, [x29, #152]
  402628:	add	x0, x1, x0
  40262c:	strb	wzr, [x0]
  402630:	ldr	x2, [x29, #152]
  402634:	ldr	x1, [x29, #144]
  402638:	ldr	x0, [x29, #160]
  40263c:	bl	4016e0 <memcpy@plt>
  402640:	str	x0, [x29, #168]
  402644:	add	x0, x29, #0x70
  402648:	mov	x1, x0
  40264c:	ldr	x0, [x29, #168]
  402650:	bl	401cc0 <safe_atou64>
  402654:	str	w0, [x29, #48]
  402658:	ldr	w0, [x29, #48]
  40265c:	cmp	w0, #0x0
  402660:	b.ge	4026f0 <parse_counter+0x31c>  // b.tcont
  402664:	mov	w0, #0x3                   	// #3
  402668:	str	w0, [x29, #88]
  40266c:	ldr	w0, [x29, #48]
  402670:	str	w0, [x29, #92]
  402674:	str	wzr, [x29, #96]
  402678:	ldr	w0, [x29, #96]
  40267c:	bl	4019b0 <log_get_max_level_realm@plt>
  402680:	mov	w1, w0
  402684:	ldr	w0, [x29, #88]
  402688:	and	w0, w0, #0x7
  40268c:	cmp	w1, w0
  402690:	b.lt	4026d8 <parse_counter+0x304>  // b.tstop
  402694:	ldr	w0, [x29, #96]
  402698:	lsl	w1, w0, #10
  40269c:	ldr	w0, [x29, #88]
  4026a0:	orr	w7, w1, w0
  4026a4:	adrp	x0, 404000 <verb_set+0x600>
  4026a8:	add	x1, x0, #0x7eb
  4026ac:	ldr	x6, [x29, #40]
  4026b0:	adrp	x0, 404000 <verb_set+0x600>
  4026b4:	add	x5, x0, #0xb10
  4026b8:	adrp	x0, 405000 <_fini+0x884>
  4026bc:	add	x4, x0, #0x258
  4026c0:	mov	w3, #0xa7                  	// #167
  4026c4:	mov	x2, x1
  4026c8:	ldr	w1, [x29, #92]
  4026cc:	mov	w0, w7
  4026d0:	bl	4018a0 <log_internal_realm@plt>
  4026d4:	b	4029b8 <parse_counter+0x5e4>
  4026d8:	ldr	w0, [x29, #92]
  4026dc:	cmp	w0, #0x0
  4026e0:	cneg	w0, w0, lt  // lt = tstop
  4026e4:	and	w0, w0, #0xff
  4026e8:	neg	w0, w0
  4026ec:	b	4029b8 <parse_counter+0x5e4>
  4026f0:	ldr	x1, [x29, #128]
  4026f4:	ldr	x0, [x29, #136]
  4026f8:	add	x0, x1, x0
  4026fc:	str	x0, [x29, #128]
  402700:	ldr	x0, [x29, #128]
  402704:	ldrb	w0, [x0]
  402708:	cmp	w0, #0x2d
  40270c:	b.ne	4028f4 <parse_counter+0x520>  // b.any
  402710:	ldr	x0, [x29, #128]
  402714:	add	x0, x0, #0x1
  402718:	str	x0, [x29, #128]
  40271c:	adrp	x0, 404000 <verb_set+0x600>
  402720:	add	x1, x0, #0xab8
  402724:	ldr	x0, [x29, #128]
  402728:	bl	4017e0 <strspn@plt>
  40272c:	str	x0, [x29, #136]
  402730:	ldr	x0, [x29, #136]
  402734:	cmp	x0, #0x0
  402738:	b.ne	4027cc <parse_counter+0x3f8>  // b.any
  40273c:	mov	w0, #0x3                   	// #3
  402740:	str	w0, [x29, #64]
  402744:	mov	w0, #0x16                  	// #22
  402748:	movk	w0, #0x4000, lsl #16
  40274c:	str	w0, [x29, #68]
  402750:	str	wzr, [x29, #72]
  402754:	ldr	w0, [x29, #72]
  402758:	bl	4019b0 <log_get_max_level_realm@plt>
  40275c:	mov	w1, w0
  402760:	ldr	w0, [x29, #64]
  402764:	and	w0, w0, #0x7
  402768:	cmp	w1, w0
  40276c:	b.lt	4027b4 <parse_counter+0x3e0>  // b.tstop
  402770:	ldr	w0, [x29, #72]
  402774:	lsl	w1, w0, #10
  402778:	ldr	w0, [x29, #64]
  40277c:	orr	w7, w1, w0
  402780:	adrp	x0, 404000 <verb_set+0x600>
  402784:	add	x1, x0, #0x7eb
  402788:	ldr	x6, [x29, #40]
  40278c:	adrp	x0, 404000 <verb_set+0x600>
  402790:	add	x5, x0, #0xb58
  402794:	adrp	x0, 405000 <_fini+0x884>
  402798:	add	x4, x0, #0x258
  40279c:	mov	w3, #0xb0                  	// #176
  4027a0:	mov	x2, x1
  4027a4:	ldr	w1, [x29, #68]
  4027a8:	mov	w0, w7
  4027ac:	bl	4018a0 <log_internal_realm@plt>
  4027b0:	b	4029b8 <parse_counter+0x5e4>
  4027b4:	ldr	w0, [x29, #68]
  4027b8:	cmp	w0, #0x0
  4027bc:	cneg	w0, w0, lt  // lt = tstop
  4027c0:	and	w0, w0, #0xff
  4027c4:	neg	w0, w0
  4027c8:	b	4029b8 <parse_counter+0x5e4>
  4027cc:	ldr	x0, [x29, #128]
  4027d0:	str	x0, [x29, #176]
  4027d4:	ldr	x1, [x29, #136]
  4027d8:	ldr	x0, [x29, #176]
  4027dc:	bl	4016c0 <strnlen@plt>
  4027e0:	str	x0, [x29, #184]
  4027e4:	ldr	x0, [x29, #184]
  4027e8:	add	x0, x0, #0x1
  4027ec:	add	x0, x0, #0xf
  4027f0:	lsr	x0, x0, #4
  4027f4:	lsl	x0, x0, #4
  4027f8:	sub	sp, sp, x0
  4027fc:	mov	x0, sp
  402800:	add	x0, x0, #0xf
  402804:	lsr	x0, x0, #4
  402808:	lsl	x0, x0, #4
  40280c:	str	x0, [x29, #192]
  402810:	ldr	x1, [x29, #192]
  402814:	ldr	x0, [x29, #184]
  402818:	add	x0, x1, x0
  40281c:	strb	wzr, [x0]
  402820:	ldr	x2, [x29, #184]
  402824:	ldr	x1, [x29, #176]
  402828:	ldr	x0, [x29, #192]
  40282c:	bl	4016e0 <memcpy@plt>
  402830:	str	x0, [x29, #168]
  402834:	add	x0, x29, #0x78
  402838:	mov	x1, x0
  40283c:	ldr	x0, [x29, #168]
  402840:	bl	401cc0 <safe_atou64>
  402844:	str	w0, [x29, #48]
  402848:	ldr	w0, [x29, #48]
  40284c:	cmp	w0, #0x0
  402850:	b.ge	4028e0 <parse_counter+0x50c>  // b.tcont
  402854:	mov	w0, #0x3                   	// #3
  402858:	str	w0, [x29, #52]
  40285c:	ldr	w0, [x29, #48]
  402860:	str	w0, [x29, #56]
  402864:	str	wzr, [x29, #60]
  402868:	ldr	w0, [x29, #60]
  40286c:	bl	4019b0 <log_get_max_level_realm@plt>
  402870:	mov	w1, w0
  402874:	ldr	w0, [x29, #52]
  402878:	and	w0, w0, #0x7
  40287c:	cmp	w1, w0
  402880:	b.lt	4028c8 <parse_counter+0x4f4>  // b.tstop
  402884:	ldr	w0, [x29, #60]
  402888:	lsl	w1, w0, #10
  40288c:	ldr	w0, [x29, #52]
  402890:	orr	w7, w1, w0
  402894:	adrp	x0, 404000 <verb_set+0x600>
  402898:	add	x1, x0, #0x7eb
  40289c:	ldr	x6, [x29, #40]
  4028a0:	adrp	x0, 404000 <verb_set+0x600>
  4028a4:	add	x5, x0, #0xba0
  4028a8:	adrp	x0, 405000 <_fini+0x884>
  4028ac:	add	x4, x0, #0x258
  4028b0:	mov	w3, #0xb7                  	// #183
  4028b4:	mov	x2, x1
  4028b8:	ldr	w1, [x29, #56]
  4028bc:	mov	w0, w7
  4028c0:	bl	4018a0 <log_internal_realm@plt>
  4028c4:	b	4029b8 <parse_counter+0x5e4>
  4028c8:	ldr	w0, [x29, #56]
  4028cc:	cmp	w0, #0x0
  4028d0:	cneg	w0, w0, lt  // lt = tstop
  4028d4:	and	w0, w0, #0xff
  4028d8:	neg	w0, w0
  4028dc:	b	4029b8 <parse_counter+0x5e4>
  4028e0:	ldr	x1, [x29, #128]
  4028e4:	ldr	x0, [x29, #136]
  4028e8:	add	x0, x1, x0
  4028ec:	str	x0, [x29, #128]
  4028f0:	b	4028f8 <parse_counter+0x524>
  4028f4:	str	xzr, [x29, #120]
  4028f8:	ldr	x0, [x29, #120]
  4028fc:	cmp	x0, #0x0
  402900:	b.ne	402978 <parse_counter+0x5a4>  // b.any
  402904:	mov	w0, #0x4                   	// #4
  402908:	str	w0, [x29, #76]
  40290c:	str	wzr, [x29, #80]
  402910:	str	wzr, [x29, #84]
  402914:	ldr	w0, [x29, #84]
  402918:	bl	4019b0 <log_get_max_level_realm@plt>
  40291c:	mov	w1, w0
  402920:	ldr	w0, [x29, #76]
  402924:	and	w0, w0, #0x7
  402928:	cmp	w1, w0
  40292c:	b.lt	402970 <parse_counter+0x59c>  // b.tstop
  402930:	ldr	w0, [x29, #84]
  402934:	lsl	w1, w0, #10
  402938:	ldr	w0, [x29, #76]
  40293c:	orr	w6, w1, w0
  402940:	adrp	x0, 404000 <verb_set+0x600>
  402944:	add	x1, x0, #0x7eb
  402948:	adrp	x0, 404000 <verb_set+0x600>
  40294c:	add	x5, x0, #0xbe8
  402950:	adrp	x0, 405000 <_fini+0x884>
  402954:	add	x4, x0, #0x258
  402958:	mov	w3, #0xbe                  	// #190
  40295c:	mov	x2, x1
  402960:	ldr	w1, [x29, #80]
  402964:	mov	w0, w6
  402968:	bl	4018a0 <log_internal_realm@plt>
  40296c:	b	402978 <parse_counter+0x5a4>
  402970:	ldr	w0, [x29, #80]
  402974:	cmp	w0, #0x0
  402978:	ldr	x0, [x29, #32]
  40297c:	ldr	x1, [x29, #128]
  402980:	str	x1, [x0]
  402984:	ldr	x0, [x29, #24]
  402988:	cmp	x0, #0x0
  40298c:	b.eq	40299c <parse_counter+0x5c8>  // b.none
  402990:	ldr	x1, [x29, #112]
  402994:	ldr	x0, [x29, #24]
  402998:	str	x1, [x0]
  40299c:	ldr	x0, [x29, #16]
  4029a0:	cmp	x0, #0x0
  4029a4:	b.eq	4029b4 <parse_counter+0x5e0>  // b.none
  4029a8:	ldr	x1, [x29, #120]
  4029ac:	ldr	x0, [x29, #16]
  4029b0:	str	x1, [x0]
  4029b4:	mov	w0, #0x0                   	// #0
  4029b8:	mov	w1, w0
  4029bc:	adrp	x0, 415000 <__FRAME_END__+0xf740>
  4029c0:	add	x0, x0, #0xbf0
  4029c4:	ldr	x2, [x29, #200]
  4029c8:	ldr	x0, [x0]
  4029cc:	eor	x0, x2, x0
  4029d0:	cmp	x0, #0x0
  4029d4:	b.eq	4029dc <parse_counter+0x608>  // b.none
  4029d8:	bl	401860 <__stack_chk_fail@plt>
  4029dc:	mov	w0, w1
  4029e0:	mov	sp, x29
  4029e4:	ldp	x29, x30, [sp], #208
  4029e8:	ret

00000000004029ec <acquire_boot_count_path>:
  4029ec:	stp	x29, x30, [sp, #-224]!
  4029f0:	mov	x29, sp
  4029f4:	str	x19, [sp, #16]
  4029f8:	str	x0, [sp, #72]
  4029fc:	str	x1, [sp, #64]
  402a00:	str	x2, [sp, #56]
  402a04:	str	x3, [sp, #48]
  402a08:	str	x4, [sp, #40]
  402a0c:	adrp	x0, 415000 <__FRAME_END__+0xf740>
  402a10:	add	x0, x0, #0xbf0
  402a14:	ldr	x1, [x0]
  402a18:	str	x1, [sp, #216]
  402a1c:	mov	x1, #0x0                   	// #0
  402a20:	str	xzr, [sp, #136]
  402a24:	str	xzr, [sp, #144]
  402a28:	str	xzr, [sp, #152]
  402a2c:	add	x1, sp, #0x88
  402a30:	adrp	x0, 405000 <_fini+0x884>
  402a34:	add	x0, x0, #0x268
  402a38:	mov	x3, x1
  402a3c:	adrp	x1, 404000 <verb_set+0x600>
  402a40:	add	x2, x1, #0xc88
  402a44:	ldp	x0, x1, [x0]
  402a48:	bl	401680 <efi_get_variable_string@plt>
  402a4c:	str	w0, [sp, #84]
  402a50:	ldr	w0, [sp, #84]
  402a54:	cmn	w0, #0x2
  402a58:	b.ne	402a64 <acquire_boot_count_path+0x78>  // b.any
  402a5c:	mov	w19, #0xffffffcf            	// #-49
  402a60:	b	402e90 <acquire_boot_count_path+0x4a4>
  402a64:	ldr	w0, [sp, #84]
  402a68:	cmp	w0, #0x0
  402a6c:	b.ge	402afc <acquire_boot_count_path+0x110>  // b.tcont
  402a70:	mov	w0, #0x3                   	// #3
  402a74:	str	w0, [sp, #124]
  402a78:	ldr	w0, [sp, #84]
  402a7c:	str	w0, [sp, #128]
  402a80:	str	wzr, [sp, #132]
  402a84:	ldr	w0, [sp, #132]
  402a88:	bl	4019b0 <log_get_max_level_realm@plt>
  402a8c:	mov	w1, w0
  402a90:	ldr	w0, [sp, #124]
  402a94:	and	w0, w0, #0x7
  402a98:	cmp	w1, w0
  402a9c:	b.lt	402ae4 <acquire_boot_count_path+0xf8>  // b.tstop
  402aa0:	ldr	w0, [sp, #132]
  402aa4:	lsl	w1, w0, #10
  402aa8:	ldr	w0, [sp, #124]
  402aac:	orr	w6, w1, w0
  402ab0:	adrp	x0, 404000 <verb_set+0x600>
  402ab4:	add	x1, x0, #0x7eb
  402ab8:	adrp	x0, 404000 <verb_set+0x600>
  402abc:	add	x5, x0, #0xca0
  402ac0:	adrp	x0, 405000 <_fini+0x884>
  402ac4:	add	x4, x0, #0x278
  402ac8:	mov	w3, #0xdb                  	// #219
  402acc:	mov	x2, x1
  402ad0:	ldr	w1, [sp, #128]
  402ad4:	mov	w0, w6
  402ad8:	bl	4018a0 <log_internal_realm@plt>
  402adc:	mov	w19, w0
  402ae0:	b	402e90 <acquire_boot_count_path+0x4a4>
  402ae4:	ldr	w0, [sp, #128]
  402ae8:	cmp	w0, #0x0
  402aec:	cneg	w0, w0, lt  // lt = tstop
  402af0:	and	w0, w0, #0xff
  402af4:	neg	w19, w0
  402af8:	b	402e90 <acquire_boot_count_path+0x4a4>
  402afc:	ldr	x0, [sp, #136]
  402b00:	bl	4017f0 <efi_tilt_backslashes@plt>
  402b04:	ldr	x0, [sp, #136]
  402b08:	bl	4017b0 <path_is_normalized@plt>
  402b0c:	and	w0, w0, #0xff
  402b10:	eor	w0, w0, #0x1
  402b14:	and	w0, w0, #0xff
  402b18:	cmp	w0, #0x0
  402b1c:	b.eq	402bb8 <acquire_boot_count_path+0x1cc>  // b.none
  402b20:	mov	w0, #0x3                   	// #3
  402b24:	str	w0, [sp, #112]
  402b28:	mov	w0, #0x16                  	// #22
  402b2c:	movk	w0, #0x4000, lsl #16
  402b30:	str	w0, [sp, #116]
  402b34:	str	wzr, [sp, #120]
  402b38:	ldr	w0, [sp, #120]
  402b3c:	bl	4019b0 <log_get_max_level_realm@plt>
  402b40:	mov	w1, w0
  402b44:	ldr	w0, [sp, #112]
  402b48:	and	w0, w0, #0x7
  402b4c:	cmp	w1, w0
  402b50:	b.lt	402ba0 <acquire_boot_count_path+0x1b4>  // b.tstop
  402b54:	ldr	w0, [sp, #120]
  402b58:	lsl	w1, w0, #10
  402b5c:	ldr	w0, [sp, #112]
  402b60:	orr	w7, w1, w0
  402b64:	adrp	x0, 404000 <verb_set+0x600>
  402b68:	add	x1, x0, #0x7eb
  402b6c:	ldr	x0, [sp, #136]
  402b70:	mov	x6, x0
  402b74:	adrp	x0, 404000 <verb_set+0x600>
  402b78:	add	x5, x0, #0xcd8
  402b7c:	adrp	x0, 405000 <_fini+0x884>
  402b80:	add	x4, x0, #0x278
  402b84:	mov	w3, #0xe0                  	// #224
  402b88:	mov	x2, x1
  402b8c:	ldr	w1, [sp, #116]
  402b90:	mov	w0, w7
  402b94:	bl	4018a0 <log_internal_realm@plt>
  402b98:	mov	w19, w0
  402b9c:	b	402e90 <acquire_boot_count_path+0x4a4>
  402ba0:	ldr	w0, [sp, #116]
  402ba4:	cmp	w0, #0x0
  402ba8:	cneg	w0, w0, lt  // lt = tstop
  402bac:	and	w0, w0, #0xff
  402bb0:	neg	w19, w0
  402bb4:	b	402e90 <acquire_boot_count_path+0x4a4>
  402bb8:	ldr	x0, [sp, #136]
  402bbc:	bl	401780 <path_is_absolute@plt>
  402bc0:	and	w0, w0, #0xff
  402bc4:	eor	w0, w0, #0x1
  402bc8:	and	w0, w0, #0xff
  402bcc:	cmp	w0, #0x0
  402bd0:	b.eq	402c6c <acquire_boot_count_path+0x280>  // b.none
  402bd4:	mov	w0, #0x3                   	// #3
  402bd8:	str	w0, [sp, #100]
  402bdc:	mov	w0, #0x16                  	// #22
  402be0:	movk	w0, #0x4000, lsl #16
  402be4:	str	w0, [sp, #104]
  402be8:	str	wzr, [sp, #108]
  402bec:	ldr	w0, [sp, #108]
  402bf0:	bl	4019b0 <log_get_max_level_realm@plt>
  402bf4:	mov	w1, w0
  402bf8:	ldr	w0, [sp, #100]
  402bfc:	and	w0, w0, #0x7
  402c00:	cmp	w1, w0
  402c04:	b.lt	402c54 <acquire_boot_count_path+0x268>  // b.tstop
  402c08:	ldr	w0, [sp, #108]
  402c0c:	lsl	w1, w0, #10
  402c10:	ldr	w0, [sp, #100]
  402c14:	orr	w7, w1, w0
  402c18:	adrp	x0, 404000 <verb_set+0x600>
  402c1c:	add	x1, x0, #0x7eb
  402c20:	ldr	x0, [sp, #136]
  402c24:	mov	x6, x0
  402c28:	adrp	x0, 404000 <verb_set+0x600>
  402c2c:	add	x5, x0, #0xd20
  402c30:	adrp	x0, 405000 <_fini+0x884>
  402c34:	add	x4, x0, #0x278
  402c38:	mov	w3, #0xe5                  	// #229
  402c3c:	mov	x2, x1
  402c40:	ldr	w1, [sp, #104]
  402c44:	mov	w0, w7
  402c48:	bl	4018a0 <log_internal_realm@plt>
  402c4c:	mov	w19, w0
  402c50:	b	402e90 <acquire_boot_count_path+0x4a4>
  402c54:	ldr	w0, [sp, #104]
  402c58:	cmp	w0, #0x0
  402c5c:	cneg	w0, w0, lt  // lt = tstop
  402c60:	and	w0, w0, #0xff
  402c64:	neg	w19, w0
  402c68:	b	402e90 <acquire_boot_count_path+0x4a4>
  402c6c:	ldr	x0, [sp, #136]
  402c70:	bl	4016f0 <last_path_component@plt>
  402c74:	str	x0, [sp, #184]
  402c78:	mov	w1, #0x2b                  	// #43
  402c7c:	ldr	x0, [sp, #184]
  402c80:	bl	401720 <strrchr@plt>
  402c84:	str	x0, [sp, #160]
  402c88:	ldr	x0, [sp, #160]
  402c8c:	cmp	x0, #0x0
  402c90:	b.ne	402d2c <acquire_boot_count_path+0x340>  // b.any
  402c94:	mov	w0, #0x3                   	// #3
  402c98:	str	w0, [sp, #88]
  402c9c:	mov	w0, #0x16                  	// #22
  402ca0:	movk	w0, #0x4000, lsl #16
  402ca4:	str	w0, [sp, #92]
  402ca8:	str	wzr, [sp, #96]
  402cac:	ldr	w0, [sp, #96]
  402cb0:	bl	4019b0 <log_get_max_level_realm@plt>
  402cb4:	mov	w1, w0
  402cb8:	ldr	w0, [sp, #88]
  402cbc:	and	w0, w0, #0x7
  402cc0:	cmp	w1, w0
  402cc4:	b.lt	402d14 <acquire_boot_count_path+0x328>  // b.tstop
  402cc8:	ldr	w0, [sp, #96]
  402ccc:	lsl	w1, w0, #10
  402cd0:	ldr	w0, [sp, #88]
  402cd4:	orr	w7, w1, w0
  402cd8:	adrp	x0, 404000 <verb_set+0x600>
  402cdc:	add	x1, x0, #0x7eb
  402ce0:	ldr	x0, [sp, #136]
  402ce4:	mov	x6, x0
  402ce8:	adrp	x0, 404000 <verb_set+0x600>
  402cec:	add	x5, x0, #0xd68
  402cf0:	adrp	x0, 405000 <_fini+0x884>
  402cf4:	add	x4, x0, #0x278
  402cf8:	mov	w3, #0xec                  	// #236
  402cfc:	mov	x2, x1
  402d00:	ldr	w1, [sp, #92]
  402d04:	mov	w0, w7
  402d08:	bl	4018a0 <log_internal_realm@plt>
  402d0c:	mov	w19, w0
  402d10:	b	402e90 <acquire_boot_count_path+0x4a4>
  402d14:	ldr	w0, [sp, #92]
  402d18:	cmp	w0, #0x0
  402d1c:	cneg	w0, w0, lt  // lt = tstop
  402d20:	and	w0, w0, #0xff
  402d24:	neg	w19, w0
  402d28:	b	402e90 <acquire_boot_count_path+0x4a4>
  402d2c:	ldr	x0, [sp, #64]
  402d30:	cmp	x0, #0x0
  402d34:	b.eq	402d88 <acquire_boot_count_path+0x39c>  // b.none
  402d38:	ldr	x2, [sp, #136]
  402d3c:	ldr	x1, [sp, #160]
  402d40:	ldr	x0, [sp, #136]
  402d44:	sub	x0, x1, x0
  402d48:	mov	x1, x0
  402d4c:	mov	x0, x2
  402d50:	bl	401840 <strndup@plt>
  402d54:	str	x0, [sp, #144]
  402d58:	ldr	x0, [sp, #144]
  402d5c:	cmp	x0, #0x0
  402d60:	b.ne	402d88 <acquire_boot_count_path+0x39c>  // b.any
  402d64:	adrp	x0, 404000 <verb_set+0x600>
  402d68:	add	x1, x0, #0x7eb
  402d6c:	adrp	x0, 405000 <_fini+0x884>
  402d70:	add	x3, x0, #0x278
  402d74:	mov	w2, #0xf3                  	// #243
  402d78:	mov	w0, #0x0                   	// #0
  402d7c:	bl	4019a0 <log_oom_internal@plt>
  402d80:	mov	w19, w0
  402d84:	b	402e90 <acquire_boot_count_path+0x4a4>
  402d88:	ldr	x0, [sp, #136]
  402d8c:	add	x3, sp, #0xb0
  402d90:	add	x2, sp, #0xa8
  402d94:	add	x1, sp, #0xa0
  402d98:	bl	4023d4 <parse_counter>
  402d9c:	str	w0, [sp, #84]
  402da0:	ldr	w0, [sp, #84]
  402da4:	cmp	w0, #0x0
  402da8:	b.ge	402db4 <acquire_boot_count_path+0x3c8>  // b.tcont
  402dac:	ldr	w19, [sp, #84]
  402db0:	b	402e90 <acquire_boot_count_path+0x4a4>
  402db4:	ldr	x0, [sp, #40]
  402db8:	cmp	x0, #0x0
  402dbc:	b.eq	402e14 <acquire_boot_count_path+0x428>  // b.none
  402dc0:	ldr	x0, [sp, #160]
  402dc4:	bl	4018e0 <strdup@plt>
  402dc8:	str	x0, [sp, #152]
  402dcc:	ldr	x0, [sp, #152]
  402dd0:	cmp	x0, #0x0
  402dd4:	b.ne	402dfc <acquire_boot_count_path+0x410>  // b.any
  402dd8:	adrp	x0, 404000 <verb_set+0x600>
  402ddc:	add	x1, x0, #0x7eb
  402de0:	adrp	x0, 405000 <_fini+0x884>
  402de4:	add	x3, x0, #0x278
  402de8:	mov	w2, #0xfd                  	// #253
  402dec:	mov	w0, #0x0                   	// #0
  402df0:	bl	4019a0 <log_oom_internal@plt>
  402df4:	mov	w19, w0
  402df8:	b	402e90 <acquire_boot_count_path+0x4a4>
  402dfc:	ldr	x0, [sp, #152]
  402e00:	str	x0, [sp, #192]
  402e04:	str	xzr, [sp, #152]
  402e08:	ldr	x1, [sp, #192]
  402e0c:	ldr	x0, [sp, #40]
  402e10:	str	x1, [x0]
  402e14:	ldr	x0, [sp, #72]
  402e18:	cmp	x0, #0x0
  402e1c:	b.eq	402e38 <acquire_boot_count_path+0x44c>  // b.none
  402e20:	ldr	x0, [sp, #136]
  402e24:	str	x0, [sp, #200]
  402e28:	str	xzr, [sp, #136]
  402e2c:	ldr	x1, [sp, #200]
  402e30:	ldr	x0, [sp, #72]
  402e34:	str	x1, [x0]
  402e38:	ldr	x0, [sp, #64]
  402e3c:	cmp	x0, #0x0
  402e40:	b.eq	402e5c <acquire_boot_count_path+0x470>  // b.none
  402e44:	ldr	x0, [sp, #144]
  402e48:	str	x0, [sp, #208]
  402e4c:	str	xzr, [sp, #144]
  402e50:	ldr	x1, [sp, #208]
  402e54:	ldr	x0, [sp, #64]
  402e58:	str	x1, [x0]
  402e5c:	ldr	x0, [sp, #56]
  402e60:	cmp	x0, #0x0
  402e64:	b.eq	402e74 <acquire_boot_count_path+0x488>  // b.none
  402e68:	ldr	x1, [sp, #168]
  402e6c:	ldr	x0, [sp, #56]
  402e70:	str	x1, [x0]
  402e74:	ldr	x0, [sp, #48]
  402e78:	cmp	x0, #0x0
  402e7c:	b.eq	402e8c <acquire_boot_count_path+0x4a0>  // b.none
  402e80:	ldr	x1, [sp, #176]
  402e84:	ldr	x0, [sp, #48]
  402e88:	str	x1, [x0]
  402e8c:	mov	w19, #0x0                   	// #0
  402e90:	add	x0, sp, #0x98
  402e94:	bl	401bb8 <freep>
  402e98:	add	x0, sp, #0x90
  402e9c:	bl	401bb8 <freep>
  402ea0:	add	x0, sp, #0x88
  402ea4:	bl	401bb8 <freep>
  402ea8:	mov	w1, w19
  402eac:	adrp	x0, 415000 <__FRAME_END__+0xf740>
  402eb0:	add	x0, x0, #0xbf0
  402eb4:	ldr	x2, [sp, #216]
  402eb8:	ldr	x0, [x0]
  402ebc:	eor	x0, x2, x0
  402ec0:	cmp	x0, #0x0
  402ec4:	b.eq	402ecc <acquire_boot_count_path+0x4e0>  // b.none
  402ec8:	bl	401860 <__stack_chk_fail@plt>
  402ecc:	mov	w0, w1
  402ed0:	ldr	x19, [sp, #16]
  402ed4:	ldp	x29, x30, [sp], #224
  402ed8:	ret

0000000000402edc <make_good>:
  402edc:	stp	x29, x30, [sp, #-96]!
  402ee0:	mov	x29, sp
  402ee4:	str	x19, [sp, #16]
  402ee8:	str	x0, [sp, #56]
  402eec:	str	x1, [sp, #48]
  402ef0:	str	x2, [sp, #40]
  402ef4:	adrp	x0, 415000 <__FRAME_END__+0xf740>
  402ef8:	add	x0, x0, #0xbf0
  402efc:	ldr	x1, [x0]
  402f00:	str	x1, [sp, #88]
  402f04:	mov	x1, #0x0                   	// #0
  402f08:	str	xzr, [sp, #72]
  402f0c:	ldr	x0, [sp, #56]
  402f10:	cmp	x0, #0x0
  402f14:	cset	w0, eq  // eq = none
  402f18:	and	w0, w0, #0xff
  402f1c:	and	x0, x0, #0xff
  402f20:	cmp	x0, #0x0
  402f24:	b.eq	402f50 <make_good+0x74>  // b.none
  402f28:	adrp	x0, 404000 <verb_set+0x600>
  402f2c:	add	x1, x0, #0x7eb
  402f30:	adrp	x0, 405000 <_fini+0x884>
  402f34:	add	x4, x0, #0x290
  402f38:	mov	w3, #0x111                 	// #273
  402f3c:	mov	x2, x1
  402f40:	adrp	x0, 404000 <verb_set+0x600>
  402f44:	add	x1, x0, #0xdb8
  402f48:	mov	w0, #0x0                   	// #0
  402f4c:	bl	401730 <log_assert_failed_realm@plt>
  402f50:	ldr	x0, [sp, #48]
  402f54:	cmp	x0, #0x0
  402f58:	cset	w0, eq  // eq = none
  402f5c:	and	w0, w0, #0xff
  402f60:	and	x0, x0, #0xff
  402f64:	cmp	x0, #0x0
  402f68:	b.eq	402f94 <make_good+0xb8>  // b.none
  402f6c:	adrp	x0, 404000 <verb_set+0x600>
  402f70:	add	x1, x0, #0x7eb
  402f74:	adrp	x0, 405000 <_fini+0x884>
  402f78:	add	x4, x0, #0x290
  402f7c:	mov	w3, #0x112                 	// #274
  402f80:	mov	x2, x1
  402f84:	adrp	x0, 404000 <verb_set+0x600>
  402f88:	add	x1, x0, #0xdc0
  402f8c:	mov	w0, #0x0                   	// #0
  402f90:	bl	401730 <log_assert_failed_realm@plt>
  402f94:	ldr	x0, [sp, #40]
  402f98:	cmp	x0, #0x0
  402f9c:	cset	w0, eq  // eq = none
  402fa0:	and	w0, w0, #0xff
  402fa4:	and	x0, x0, #0xff
  402fa8:	cmp	x0, #0x0
  402fac:	b.eq	402fd8 <make_good+0xfc>  // b.none
  402fb0:	adrp	x0, 404000 <verb_set+0x600>
  402fb4:	add	x1, x0, #0x7eb
  402fb8:	adrp	x0, 405000 <_fini+0x884>
  402fbc:	add	x4, x0, #0x290
  402fc0:	mov	w3, #0x113                 	// #275
  402fc4:	mov	x2, x1
  402fc8:	adrp	x0, 404000 <verb_set+0x600>
  402fcc:	add	x1, x0, #0xdc8
  402fd0:	mov	w0, #0x0                   	// #0
  402fd4:	bl	401730 <log_assert_failed_realm@plt>
  402fd8:	mov	x2, #0x0                   	// #0
  402fdc:	ldr	x1, [sp, #48]
  402fe0:	ldr	x0, [sp, #56]
  402fe4:	bl	401700 <strjoin_real@plt>
  402fe8:	str	x0, [sp, #72]
  402fec:	ldr	x0, [sp, #72]
  402ff0:	cmp	x0, #0x0
  402ff4:	b.ne	403000 <make_good+0x124>  // b.any
  402ff8:	mov	w19, #0xfffffff4            	// #-12
  402ffc:	b	40301c <make_good+0x140>
  403000:	ldr	x0, [sp, #72]
  403004:	str	x0, [sp, #80]
  403008:	str	xzr, [sp, #72]
  40300c:	ldr	x1, [sp, #80]
  403010:	ldr	x0, [sp, #40]
  403014:	str	x1, [x0]
  403018:	mov	w19, #0x0                   	// #0
  40301c:	add	x0, sp, #0x48
  403020:	bl	401bb8 <freep>
  403024:	mov	w1, w19
  403028:	adrp	x0, 415000 <__FRAME_END__+0xf740>
  40302c:	add	x0, x0, #0xbf0
  403030:	ldr	x2, [sp, #88]
  403034:	ldr	x0, [x0]
  403038:	eor	x0, x2, x0
  40303c:	cmp	x0, #0x0
  403040:	b.eq	403048 <make_good+0x16c>  // b.none
  403044:	bl	401860 <__stack_chk_fail@plt>
  403048:	mov	w0, w1
  40304c:	ldr	x19, [sp, #16]
  403050:	ldp	x29, x30, [sp], #96
  403054:	ret

0000000000403058 <make_bad>:
  403058:	stp	x29, x30, [sp, #-96]!
  40305c:	mov	x29, sp
  403060:	str	x19, [sp, #16]
  403064:	str	x0, [sp, #56]
  403068:	str	x1, [sp, #48]
  40306c:	str	x2, [sp, #40]
  403070:	str	x3, [sp, #32]
  403074:	adrp	x0, 415000 <__FRAME_END__+0xf740>
  403078:	add	x0, x0, #0xbf0
  40307c:	ldr	x1, [x0]
  403080:	str	x1, [sp, #88]
  403084:	mov	x1, #0x0                   	// #0
  403088:	str	xzr, [sp, #72]
  40308c:	ldr	x0, [sp, #56]
  403090:	cmp	x0, #0x0
  403094:	cset	w0, eq  // eq = none
  403098:	and	w0, w0, #0xff
  40309c:	and	x0, x0, #0xff
  4030a0:	cmp	x0, #0x0
  4030a4:	b.eq	4030d0 <make_bad+0x78>  // b.none
  4030a8:	adrp	x0, 404000 <verb_set+0x600>
  4030ac:	add	x1, x0, #0x7eb
  4030b0:	adrp	x0, 405000 <_fini+0x884>
  4030b4:	add	x4, x0, #0x2a0
  4030b8:	mov	w3, #0x124                 	// #292
  4030bc:	mov	x2, x1
  4030c0:	adrp	x0, 404000 <verb_set+0x600>
  4030c4:	add	x1, x0, #0xdb8
  4030c8:	mov	w0, #0x0                   	// #0
  4030cc:	bl	401730 <log_assert_failed_realm@plt>
  4030d0:	ldr	x0, [sp, #40]
  4030d4:	cmp	x0, #0x0
  4030d8:	cset	w0, eq  // eq = none
  4030dc:	and	w0, w0, #0xff
  4030e0:	and	x0, x0, #0xff
  4030e4:	cmp	x0, #0x0
  4030e8:	b.eq	403114 <make_bad+0xbc>  // b.none
  4030ec:	adrp	x0, 404000 <verb_set+0x600>
  4030f0:	add	x1, x0, #0x7eb
  4030f4:	adrp	x0, 405000 <_fini+0x884>
  4030f8:	add	x4, x0, #0x2a0
  4030fc:	mov	w3, #0x125                 	// #293
  403100:	mov	x2, x1
  403104:	adrp	x0, 404000 <verb_set+0x600>
  403108:	add	x1, x0, #0xdc0
  40310c:	mov	w0, #0x0                   	// #0
  403110:	bl	401730 <log_assert_failed_realm@plt>
  403114:	ldr	x0, [sp, #32]
  403118:	cmp	x0, #0x0
  40311c:	cset	w0, eq  // eq = none
  403120:	and	w0, w0, #0xff
  403124:	and	x0, x0, #0xff
  403128:	cmp	x0, #0x0
  40312c:	b.eq	403158 <make_bad+0x100>  // b.none
  403130:	adrp	x0, 404000 <verb_set+0x600>
  403134:	add	x1, x0, #0x7eb
  403138:	adrp	x0, 405000 <_fini+0x884>
  40313c:	add	x4, x0, #0x2a0
  403140:	mov	w3, #0x126                 	// #294
  403144:	mov	x2, x1
  403148:	adrp	x0, 404000 <verb_set+0x600>
  40314c:	add	x1, x0, #0xdc8
  403150:	mov	w0, #0x0                   	// #0
  403154:	bl	401730 <log_assert_failed_realm@plt>
  403158:	ldr	x0, [sp, #48]
  40315c:	cmp	x0, #0x0
  403160:	b.ne	403194 <make_bad+0x13c>  // b.any
  403164:	mov	x3, #0x0                   	// #0
  403168:	ldr	x2, [sp, #40]
  40316c:	adrp	x0, 404000 <verb_set+0x600>
  403170:	add	x1, x0, #0xdd0
  403174:	ldr	x0, [sp, #56]
  403178:	bl	401700 <strjoin_real@plt>
  40317c:	str	x0, [sp, #72]
  403180:	ldr	x0, [sp, #72]
  403184:	cmp	x0, #0x0
  403188:	b.ne	4031c4 <make_bad+0x16c>  // b.any
  40318c:	mov	w19, #0xfffffff4            	// #-12
  403190:	b	4031e0 <make_bad+0x188>
  403194:	add	x5, sp, #0x48
  403198:	ldr	x4, [sp, #40]
  40319c:	ldr	x3, [sp, #48]
  4031a0:	ldr	x2, [sp, #56]
  4031a4:	adrp	x0, 404000 <verb_set+0x600>
  4031a8:	add	x1, x0, #0xdd8
  4031ac:	mov	x0, x5
  4031b0:	bl	4018f0 <asprintf@plt>
  4031b4:	cmp	w0, #0x0
  4031b8:	b.ge	4031c4 <make_bad+0x16c>  // b.tcont
  4031bc:	mov	w19, #0xfffffff4            	// #-12
  4031c0:	b	4031e0 <make_bad+0x188>
  4031c4:	ldr	x0, [sp, #72]
  4031c8:	str	x0, [sp, #80]
  4031cc:	str	xzr, [sp, #72]
  4031d0:	ldr	x1, [sp, #80]
  4031d4:	ldr	x0, [sp, #32]
  4031d8:	str	x1, [x0]
  4031dc:	mov	w19, #0x0                   	// #0
  4031e0:	add	x0, sp, #0x48
  4031e4:	bl	401bb8 <freep>
  4031e8:	mov	w1, w19
  4031ec:	adrp	x0, 415000 <__FRAME_END__+0xf740>
  4031f0:	add	x0, x0, #0xbf0
  4031f4:	ldr	x2, [sp, #88]
  4031f8:	ldr	x0, [x0]
  4031fc:	eor	x0, x2, x0
  403200:	cmp	x0, #0x0
  403204:	b.eq	40320c <make_bad+0x1b4>  // b.none
  403208:	bl	401860 <__stack_chk_fail@plt>
  40320c:	mov	w0, w1
  403210:	ldr	x19, [sp, #16]
  403214:	ldp	x29, x30, [sp], #96
  403218:	ret

000000000040321c <skip_slash>:
  40321c:	stp	x29, x30, [sp, #-32]!
  403220:	mov	x29, sp
  403224:	str	x0, [sp, #24]
  403228:	ldr	x0, [sp, #24]
  40322c:	cmp	x0, #0x0
  403230:	cset	w0, eq  // eq = none
  403234:	and	w0, w0, #0xff
  403238:	and	x0, x0, #0xff
  40323c:	cmp	x0, #0x0
  403240:	b.eq	40326c <skip_slash+0x50>  // b.none
  403244:	adrp	x0, 404000 <verb_set+0x600>
  403248:	add	x1, x0, #0x7eb
  40324c:	adrp	x0, 405000 <_fini+0x884>
  403250:	add	x4, x0, #0x2b0
  403254:	mov	w3, #0x139                 	// #313
  403258:	mov	x2, x1
  40325c:	adrp	x0, 404000 <verb_set+0x600>
  403260:	add	x1, x0, #0xa90
  403264:	mov	w0, #0x0                   	// #0
  403268:	bl	401730 <log_assert_failed_realm@plt>
  40326c:	ldr	x0, [sp, #24]
  403270:	ldrb	w0, [x0]
  403274:	cmp	w0, #0x2f
  403278:	cset	w0, ne  // ne = any
  40327c:	and	w0, w0, #0xff
  403280:	and	x0, x0, #0xff
  403284:	cmp	x0, #0x0
  403288:	b.eq	4032b4 <skip_slash+0x98>  // b.none
  40328c:	adrp	x0, 404000 <verb_set+0x600>
  403290:	add	x1, x0, #0x7eb
  403294:	adrp	x0, 405000 <_fini+0x884>
  403298:	add	x4, x0, #0x2b0
  40329c:	mov	w3, #0x13a                 	// #314
  4032a0:	mov	x2, x1
  4032a4:	adrp	x0, 404000 <verb_set+0x600>
  4032a8:	add	x1, x0, #0xde8
  4032ac:	mov	w0, #0x0                   	// #0
  4032b0:	bl	401730 <log_assert_failed_realm@plt>
  4032b4:	ldr	x0, [sp, #24]
  4032b8:	add	x0, x0, #0x1
  4032bc:	ldp	x29, x30, [sp], #32
  4032c0:	ret

00000000004032c4 <verb_status>:
  4032c4:	sub	sp, sp, #0x100
  4032c8:	stp	x29, x30, [sp, #16]
  4032cc:	add	x29, sp, #0x10
  4032d0:	stp	x19, x20, [sp, #32]
  4032d4:	str	w0, [sp, #76]
  4032d8:	str	x1, [sp, #64]
  4032dc:	str	x2, [sp, #56]
  4032e0:	adrp	x0, 415000 <__FRAME_END__+0xf740>
  4032e4:	add	x0, x0, #0xbf0
  4032e8:	ldr	x1, [x0]
  4032ec:	str	x1, [sp, #248]
  4032f0:	mov	x1, #0x0                   	// #0
  4032f4:	str	xzr, [sp, #184]
  4032f8:	str	xzr, [sp, #192]
  4032fc:	str	xzr, [sp, #200]
  403300:	str	xzr, [sp, #208]
  403304:	str	xzr, [sp, #216]
  403308:	add	x4, sp, #0xc8
  40330c:	add	x3, sp, #0xe8
  403310:	add	x2, sp, #0xe0
  403314:	add	x1, sp, #0xc0
  403318:	add	x0, sp, #0xb8
  40331c:	bl	4029ec <acquire_boot_count_path>
  403320:	str	w0, [sp, #96]
  403324:	ldr	w0, [sp, #96]
  403328:	cmn	w0, #0x31
  40332c:	b.ne	403344 <verb_status+0x80>  // b.any
  403330:	adrp	x0, 404000 <verb_set+0x600>
  403334:	add	x0, x0, #0xdf8
  403338:	bl	401920 <puts@plt>
  40333c:	mov	w19, #0x0                   	// #0
  403340:	b	4039a0 <verb_status+0x6dc>
  403344:	ldr	w0, [sp, #96]
  403348:	cmp	w0, #0x0
  40334c:	b.ge	403358 <verb_status+0x94>  // b.tcont
  403350:	ldr	w19, [sp, #96]
  403354:	b	4039a0 <verb_status+0x6dc>
  403358:	bl	4020c0 <acquire_path>
  40335c:	str	w0, [sp, #96]
  403360:	ldr	w0, [sp, #96]
  403364:	cmp	w0, #0x0
  403368:	b.ge	403374 <verb_status+0xb0>  // b.tcont
  40336c:	ldr	w19, [sp, #96]
  403370:	b	4039a0 <verb_status+0x6dc>
  403374:	ldr	x0, [sp, #192]
  403378:	ldr	x1, [sp, #200]
  40337c:	add	x2, sp, #0xd0
  403380:	bl	402edc <make_good>
  403384:	str	w0, [sp, #96]
  403388:	ldr	w0, [sp, #96]
  40338c:	cmp	w0, #0x0
  403390:	b.ge	4033b8 <verb_status+0xf4>  // b.tcont
  403394:	adrp	x0, 404000 <verb_set+0x600>
  403398:	add	x1, x0, #0x7eb
  40339c:	adrp	x0, 405000 <_fini+0x884>
  4033a0:	add	x3, x0, #0x2c0
  4033a4:	mov	w2, #0x153                 	// #339
  4033a8:	mov	w0, #0x0                   	// #0
  4033ac:	bl	4019a0 <log_oom_internal@plt>
  4033b0:	mov	w19, w0
  4033b4:	b	4039a0 <verb_status+0x6dc>
  4033b8:	ldr	x0, [sp, #192]
  4033bc:	ldr	x1, [sp, #232]
  4033c0:	ldr	x2, [sp, #200]
  4033c4:	add	x3, sp, #0xd8
  4033c8:	bl	403058 <make_bad>
  4033cc:	str	w0, [sp, #96]
  4033d0:	ldr	w0, [sp, #96]
  4033d4:	cmp	w0, #0x0
  4033d8:	b.ge	403400 <verb_status+0x13c>  // b.tcont
  4033dc:	adrp	x0, 404000 <verb_set+0x600>
  4033e0:	add	x1, x0, #0x7eb
  4033e4:	adrp	x0, 405000 <_fini+0x884>
  4033e8:	add	x3, x0, #0x2c0
  4033ec:	mov	w2, #0x157                 	// #343
  4033f0:	mov	w0, #0x0                   	// #0
  4033f4:	bl	4019a0 <log_oom_internal@plt>
  4033f8:	mov	w19, w0
  4033fc:	b	4039a0 <verb_status+0x6dc>
  403400:	mov	w0, #0x7                   	// #7
  403404:	str	w0, [sp, #100]
  403408:	str	wzr, [sp, #104]
  40340c:	str	wzr, [sp, #108]
  403410:	ldr	w0, [sp, #108]
  403414:	bl	4019b0 <log_get_max_level_realm@plt>
  403418:	mov	w1, w0
  40341c:	ldr	w0, [sp, #100]
  403420:	and	w0, w0, #0x7
  403424:	cmp	w1, w0
  403428:	b.lt	403484 <verb_status+0x1c0>  // b.tstop
  40342c:	ldr	w0, [sp, #108]
  403430:	lsl	w1, w0, #10
  403434:	ldr	w0, [sp, #100]
  403438:	orr	w8, w1, w0
  40343c:	adrp	x0, 404000 <verb_set+0x600>
  403440:	add	x1, x0, #0x7eb
  403444:	ldr	x2, [sp, #184]
  403448:	ldr	x3, [sp, #208]
  40344c:	ldr	x0, [sp, #216]
  403450:	str	x0, [sp]
  403454:	mov	x7, x3
  403458:	mov	x6, x2
  40345c:	adrp	x0, 404000 <verb_set+0x600>
  403460:	add	x5, x0, #0xe00
  403464:	adrp	x0, 405000 <_fini+0x884>
  403468:	add	x4, x0, #0x2c0
  40346c:	mov	w3, #0x159                 	// #345
  403470:	mov	x2, x1
  403474:	ldr	w1, [sp, #104]
  403478:	mov	w0, w8
  40347c:	bl	4018a0 <log_internal_realm@plt>
  403480:	b	40348c <verb_status+0x1c8>
  403484:	ldr	w0, [sp, #104]
  403488:	cmp	w0, #0x0
  40348c:	mov	w0, #0x7                   	// #7
  403490:	str	w0, [sp, #112]
  403494:	str	wzr, [sp, #116]
  403498:	str	wzr, [sp, #120]
  40349c:	ldr	w0, [sp, #120]
  4034a0:	bl	4019b0 <log_get_max_level_realm@plt>
  4034a4:	mov	w1, w0
  4034a8:	ldr	w0, [sp, #112]
  4034ac:	and	w0, w0, #0x7
  4034b0:	cmp	w1, w0
  4034b4:	b.lt	403508 <verb_status+0x244>  // b.tstop
  4034b8:	ldr	w0, [sp, #120]
  4034bc:	lsl	w1, w0, #10
  4034c0:	ldr	w0, [sp, #112]
  4034c4:	orr	w8, w1, w0
  4034c8:	adrp	x0, 404000 <verb_set+0x600>
  4034cc:	add	x1, x0, #0x7eb
  4034d0:	ldr	x0, [sp, #224]
  4034d4:	ldr	x2, [sp, #232]
  4034d8:	mov	x7, x2
  4034dc:	mov	x6, x0
  4034e0:	adrp	x0, 404000 <verb_set+0x600>
  4034e4:	add	x5, x0, #0xe58
  4034e8:	adrp	x0, 405000 <_fini+0x884>
  4034ec:	add	x4, x0, #0x2c0
  4034f0:	mov	w3, #0x160                 	// #352
  4034f4:	mov	x2, x1
  4034f8:	ldr	w1, [sp, #116]
  4034fc:	mov	w0, w8
  403500:	bl	4018a0 <log_internal_realm@plt>
  403504:	b	403510 <verb_status+0x24c>
  403508:	ldr	w0, [sp, #116]
  40350c:	cmp	w0, #0x0
  403510:	adrp	x0, 416000 <saved_argv@@SD_SHARED>
  403514:	add	x0, x0, #0x28
  403518:	ldr	x0, [x0]
  40351c:	str	x0, [sp, #240]
  403520:	b	4038f4 <verb_status+0x630>
  403524:	mov	w0, #0xffffffff            	// #-1
  403528:	str	w0, [sp, #92]
  40352c:	ldr	x0, [sp, #240]
  403530:	ldr	x0, [x0]
  403534:	mov	w1, #0x4000                	// #16384
  403538:	movk	w1, #0x8, lsl #16
  40353c:	bl	401970 <open64@plt>
  403540:	str	w0, [sp, #92]
  403544:	ldr	w0, [sp, #92]
  403548:	cmp	w0, #0x0
  40354c:	b.ge	403608 <verb_status+0x344>  // b.tcont
  403550:	bl	401800 <__errno_location@plt>
  403554:	ldr	w0, [x0]
  403558:	cmp	w0, #0x2
  40355c:	b.ne	403568 <verb_status+0x2a4>  // b.any
  403560:	mov	w20, #0x0                   	// #0
  403564:	b	4038d0 <verb_status+0x60c>
  403568:	mov	w0, #0x3                   	// #3
  40356c:	str	w0, [sp, #160]
  403570:	bl	401800 <__errno_location@plt>
  403574:	ldr	w0, [x0]
  403578:	str	w0, [sp, #164]
  40357c:	str	wzr, [sp, #168]
  403580:	ldr	w0, [sp, #168]
  403584:	bl	4019b0 <log_get_max_level_realm@plt>
  403588:	mov	w1, w0
  40358c:	ldr	w0, [sp, #160]
  403590:	and	w0, w0, #0x7
  403594:	cmp	w1, w0
  403598:	b.lt	4035ec <verb_status+0x328>  // b.tstop
  40359c:	ldr	w0, [sp, #168]
  4035a0:	lsl	w1, w0, #10
  4035a4:	ldr	w0, [sp, #160]
  4035a8:	orr	w7, w1, w0
  4035ac:	adrp	x0, 404000 <verb_set+0x600>
  4035b0:	add	x1, x0, #0x7eb
  4035b4:	ldr	x0, [sp, #240]
  4035b8:	ldr	x0, [x0]
  4035bc:	mov	x6, x0
  4035c0:	adrp	x0, 404000 <verb_set+0x600>
  4035c4:	add	x5, x0, #0xe80
  4035c8:	adrp	x0, 405000 <_fini+0x884>
  4035cc:	add	x4, x0, #0x2c0
  4035d0:	mov	w3, #0x16c                 	// #364
  4035d4:	mov	x2, x1
  4035d8:	ldr	w1, [sp, #164]
  4035dc:	mov	w0, w7
  4035e0:	bl	4018a0 <log_internal_realm@plt>
  4035e4:	mov	w19, w0
  4035e8:	b	403600 <verb_status+0x33c>
  4035ec:	ldr	w0, [sp, #164]
  4035f0:	cmp	w0, #0x0
  4035f4:	cneg	w0, w0, lt  // lt = tstop
  4035f8:	and	w0, w0, #0xff
  4035fc:	neg	w19, w0
  403600:	mov	w20, #0x1                   	// #1
  403604:	b	4038d0 <verb_status+0x60c>
  403608:	ldr	w20, [sp, #92]
  40360c:	ldr	x0, [sp, #184]
  403610:	bl	40321c <skip_slash>
  403614:	mov	w3, #0x0                   	// #0
  403618:	mov	w2, #0x0                   	// #0
  40361c:	mov	x1, x0
  403620:	mov	w0, w20
  403624:	bl	401740 <faccessat@plt>
  403628:	cmp	w0, #0x0
  40362c:	b.lt	403648 <verb_status+0x384>  // b.tstop
  403630:	adrp	x0, 404000 <verb_set+0x600>
  403634:	add	x0, x0, #0xea8
  403638:	bl	401920 <puts@plt>
  40363c:	mov	w19, #0x0                   	// #0
  403640:	mov	w20, #0x1                   	// #1
  403644:	b	4038d0 <verb_status+0x60c>
  403648:	bl	401800 <__errno_location@plt>
  40364c:	ldr	w0, [x0]
  403650:	cmp	w0, #0x2
  403654:	b.eq	4036f4 <verb_status+0x430>  // b.none
  403658:	mov	w0, #0x3                   	// #3
  40365c:	str	w0, [sp, #148]
  403660:	bl	401800 <__errno_location@plt>
  403664:	ldr	w0, [x0]
  403668:	str	w0, [sp, #152]
  40366c:	str	wzr, [sp, #156]
  403670:	ldr	w0, [sp, #156]
  403674:	bl	4019b0 <log_get_max_level_realm@plt>
  403678:	mov	w1, w0
  40367c:	ldr	w0, [sp, #148]
  403680:	and	w0, w0, #0x7
  403684:	cmp	w1, w0
  403688:	b.lt	4036d8 <verb_status+0x414>  // b.tstop
  40368c:	ldr	w0, [sp, #156]
  403690:	lsl	w1, w0, #10
  403694:	ldr	w0, [sp, #148]
  403698:	orr	w7, w1, w0
  40369c:	adrp	x0, 404000 <verb_set+0x600>
  4036a0:	add	x1, x0, #0x7eb
  4036a4:	ldr	x0, [sp, #184]
  4036a8:	mov	x6, x0
  4036ac:	adrp	x0, 404000 <verb_set+0x600>
  4036b0:	add	x5, x0, #0xeb8
  4036b4:	adrp	x0, 405000 <_fini+0x884>
  4036b8:	add	x4, x0, #0x2c0
  4036bc:	mov	w3, #0x174                 	// #372
  4036c0:	mov	x2, x1
  4036c4:	ldr	w1, [sp, #152]
  4036c8:	mov	w0, w7
  4036cc:	bl	4018a0 <log_internal_realm@plt>
  4036d0:	mov	w19, w0
  4036d4:	b	4036ec <verb_status+0x428>
  4036d8:	ldr	w0, [sp, #152]
  4036dc:	cmp	w0, #0x0
  4036e0:	cneg	w0, w0, lt  // lt = tstop
  4036e4:	and	w0, w0, #0xff
  4036e8:	neg	w19, w0
  4036ec:	mov	w20, #0x1                   	// #1
  4036f0:	b	4038d0 <verb_status+0x60c>
  4036f4:	ldr	w20, [sp, #92]
  4036f8:	ldr	x0, [sp, #208]
  4036fc:	bl	40321c <skip_slash>
  403700:	mov	w3, #0x0                   	// #0
  403704:	mov	w2, #0x0                   	// #0
  403708:	mov	x1, x0
  40370c:	mov	w0, w20
  403710:	bl	401740 <faccessat@plt>
  403714:	cmp	w0, #0x0
  403718:	b.lt	403734 <verb_status+0x470>  // b.tstop
  40371c:	adrp	x0, 404000 <verb_set+0x600>
  403720:	add	x0, x0, #0xee0
  403724:	bl	401920 <puts@plt>
  403728:	mov	w19, #0x0                   	// #0
  40372c:	mov	w20, #0x1                   	// #1
  403730:	b	4038d0 <verb_status+0x60c>
  403734:	bl	401800 <__errno_location@plt>
  403738:	ldr	w0, [x0]
  40373c:	cmp	w0, #0x2
  403740:	b.eq	4037e0 <verb_status+0x51c>  // b.none
  403744:	mov	w0, #0x3                   	// #3
  403748:	str	w0, [sp, #136]
  40374c:	bl	401800 <__errno_location@plt>
  403750:	ldr	w0, [x0]
  403754:	str	w0, [sp, #140]
  403758:	str	wzr, [sp, #144]
  40375c:	ldr	w0, [sp, #144]
  403760:	bl	4019b0 <log_get_max_level_realm@plt>
  403764:	mov	w1, w0
  403768:	ldr	w0, [sp, #136]
  40376c:	and	w0, w0, #0x7
  403770:	cmp	w1, w0
  403774:	b.lt	4037c4 <verb_status+0x500>  // b.tstop
  403778:	ldr	w0, [sp, #144]
  40377c:	lsl	w1, w0, #10
  403780:	ldr	w0, [sp, #136]
  403784:	orr	w7, w1, w0
  403788:	adrp	x0, 404000 <verb_set+0x600>
  40378c:	add	x1, x0, #0x7eb
  403790:	ldr	x0, [sp, #208]
  403794:	mov	x6, x0
  403798:	adrp	x0, 404000 <verb_set+0x600>
  40379c:	add	x5, x0, #0xeb8
  4037a0:	adrp	x0, 405000 <_fini+0x884>
  4037a4:	add	x4, x0, #0x2c0
  4037a8:	mov	w3, #0x17c                 	// #380
  4037ac:	mov	x2, x1
  4037b0:	ldr	w1, [sp, #140]
  4037b4:	mov	w0, w7
  4037b8:	bl	4018a0 <log_internal_realm@plt>
  4037bc:	mov	w19, w0
  4037c0:	b	4037d8 <verb_status+0x514>
  4037c4:	ldr	w0, [sp, #140]
  4037c8:	cmp	w0, #0x0
  4037cc:	cneg	w0, w0, lt  // lt = tstop
  4037d0:	and	w0, w0, #0xff
  4037d4:	neg	w19, w0
  4037d8:	mov	w20, #0x1                   	// #1
  4037dc:	b	4038d0 <verb_status+0x60c>
  4037e0:	ldr	w20, [sp, #92]
  4037e4:	ldr	x0, [sp, #216]
  4037e8:	bl	40321c <skip_slash>
  4037ec:	mov	w3, #0x0                   	// #0
  4037f0:	mov	w2, #0x0                   	// #0
  4037f4:	mov	x1, x0
  4037f8:	mov	w0, w20
  4037fc:	bl	401740 <faccessat@plt>
  403800:	cmp	w0, #0x0
  403804:	b.lt	403820 <verb_status+0x55c>  // b.tstop
  403808:	adrp	x0, 404000 <verb_set+0x600>
  40380c:	add	x0, x0, #0xee8
  403810:	bl	401920 <puts@plt>
  403814:	mov	w19, #0x0                   	// #0
  403818:	mov	w20, #0x1                   	// #1
  40381c:	b	4038d0 <verb_status+0x60c>
  403820:	bl	401800 <__errno_location@plt>
  403824:	ldr	w0, [x0]
  403828:	cmp	w0, #0x2
  40382c:	b.eq	4038cc <verb_status+0x608>  // b.none
  403830:	mov	w0, #0x3                   	// #3
  403834:	str	w0, [sp, #124]
  403838:	bl	401800 <__errno_location@plt>
  40383c:	ldr	w0, [x0]
  403840:	str	w0, [sp, #128]
  403844:	str	wzr, [sp, #132]
  403848:	ldr	w0, [sp, #132]
  40384c:	bl	4019b0 <log_get_max_level_realm@plt>
  403850:	mov	w1, w0
  403854:	ldr	w0, [sp, #124]
  403858:	and	w0, w0, #0x7
  40385c:	cmp	w1, w0
  403860:	b.lt	4038b0 <verb_status+0x5ec>  // b.tstop
  403864:	ldr	w0, [sp, #132]
  403868:	lsl	w1, w0, #10
  40386c:	ldr	w0, [sp, #124]
  403870:	orr	w7, w1, w0
  403874:	adrp	x0, 404000 <verb_set+0x600>
  403878:	add	x1, x0, #0x7eb
  40387c:	ldr	x0, [sp, #216]
  403880:	mov	x6, x0
  403884:	adrp	x0, 404000 <verb_set+0x600>
  403888:	add	x5, x0, #0xeb8
  40388c:	adrp	x0, 405000 <_fini+0x884>
  403890:	add	x4, x0, #0x2c0
  403894:	mov	w3, #0x183                 	// #387
  403898:	mov	x2, x1
  40389c:	ldr	w1, [sp, #128]
  4038a0:	mov	w0, w7
  4038a4:	bl	4018a0 <log_internal_realm@plt>
  4038a8:	mov	w19, w0
  4038ac:	b	4038c4 <verb_status+0x600>
  4038b0:	ldr	w0, [sp, #128]
  4038b4:	cmp	w0, #0x0
  4038b8:	cneg	w0, w0, lt  // lt = tstop
  4038bc:	and	w0, w0, #0xff
  4038c0:	neg	w19, w0
  4038c4:	mov	w20, #0x1                   	// #1
  4038c8:	b	4038d0 <verb_status+0x60c>
  4038cc:	mov	w20, #0x2                   	// #2
  4038d0:	add	x0, sp, #0x5c
  4038d4:	bl	401bdc <closep>
  4038d8:	cmp	w20, #0x0
  4038dc:	b.eq	4038e8 <verb_status+0x624>  // b.none
  4038e0:	cmp	w20, #0x2
  4038e4:	b.ne	4039a0 <verb_status+0x6dc>  // b.any
  4038e8:	ldr	x0, [sp, #240]
  4038ec:	add	x0, x0, #0x8
  4038f0:	str	x0, [sp, #240]
  4038f4:	ldr	x0, [sp, #240]
  4038f8:	cmp	x0, #0x0
  4038fc:	b.eq	403910 <verb_status+0x64c>  // b.none
  403900:	ldr	x0, [sp, #240]
  403904:	ldr	x0, [x0]
  403908:	cmp	x0, #0x0
  40390c:	b.ne	403524 <verb_status+0x260>  // b.any
  403910:	mov	w0, #0x3                   	// #3
  403914:	str	w0, [sp, #172]
  403918:	mov	w0, #0x10                  	// #16
  40391c:	movk	w0, #0x4000, lsl #16
  403920:	str	w0, [sp, #176]
  403924:	str	wzr, [sp, #180]
  403928:	ldr	w0, [sp, #180]
  40392c:	bl	4019b0 <log_get_max_level_realm@plt>
  403930:	mov	w1, w0
  403934:	ldr	w0, [sp, #172]
  403938:	and	w0, w0, #0x7
  40393c:	cmp	w1, w0
  403940:	b.lt	403988 <verb_status+0x6c4>  // b.tstop
  403944:	ldr	w0, [sp, #180]
  403948:	lsl	w1, w0, #10
  40394c:	ldr	w0, [sp, #172]
  403950:	orr	w6, w1, w0
  403954:	adrp	x0, 404000 <verb_set+0x600>
  403958:	add	x1, x0, #0x7eb
  40395c:	adrp	x0, 404000 <verb_set+0x600>
  403960:	add	x5, x0, #0xef0
  403964:	adrp	x0, 405000 <_fini+0x884>
  403968:	add	x4, x0, #0x2c0
  40396c:	mov	w3, #0x188                 	// #392
  403970:	mov	x2, x1
  403974:	ldr	w1, [sp, #176]
  403978:	mov	w0, w6
  40397c:	bl	4018a0 <log_internal_realm@plt>
  403980:	mov	w19, w0
  403984:	b	40399c <verb_status+0x6d8>
  403988:	ldr	w0, [sp, #176]
  40398c:	cmp	w0, #0x0
  403990:	cneg	w0, w0, lt  // lt = tstop
  403994:	and	w0, w0, #0xff
  403998:	neg	w19, w0
  40399c:	nop
  4039a0:	add	x0, sp, #0xd8
  4039a4:	bl	401bb8 <freep>
  4039a8:	add	x0, sp, #0xd0
  4039ac:	bl	401bb8 <freep>
  4039b0:	add	x0, sp, #0xc8
  4039b4:	bl	401bb8 <freep>
  4039b8:	add	x0, sp, #0xc0
  4039bc:	bl	401bb8 <freep>
  4039c0:	add	x0, sp, #0xb8
  4039c4:	bl	401bb8 <freep>
  4039c8:	mov	w1, w19
  4039cc:	adrp	x0, 415000 <__FRAME_END__+0xf740>
  4039d0:	add	x0, x0, #0xbf0
  4039d4:	ldr	x2, [sp, #248]
  4039d8:	ldr	x0, [x0]
  4039dc:	eor	x0, x2, x0
  4039e0:	cmp	x0, #0x0
  4039e4:	b.eq	4039ec <verb_status+0x728>  // b.none
  4039e8:	bl	401860 <__stack_chk_fail@plt>
  4039ec:	mov	w0, w1
  4039f0:	ldp	x19, x20, [sp, #32]
  4039f4:	ldp	x29, x30, [sp, #16]
  4039f8:	add	sp, sp, #0x100
  4039fc:	ret

0000000000403a00 <verb_set>:
  403a00:	stp	x29, x30, [sp, #-336]!
  403a04:	mov	x29, sp
  403a08:	stp	x19, x20, [sp, #16]
  403a0c:	stp	x21, x22, [sp, #32]
  403a10:	str	w0, [sp, #76]
  403a14:	str	x1, [sp, #64]
  403a18:	str	x2, [sp, #56]
  403a1c:	adrp	x0, 415000 <__FRAME_END__+0xf740>
  403a20:	add	x0, x0, #0xbf0
  403a24:	ldr	x1, [x0]
  403a28:	str	x1, [sp, #328]
  403a2c:	mov	x1, #0x0                   	// #0
  403a30:	str	xzr, [sp, #240]
  403a34:	str	xzr, [sp, #248]
  403a38:	str	xzr, [sp, #256]
  403a3c:	str	xzr, [sp, #264]
  403a40:	str	xzr, [sp, #272]
  403a44:	str	xzr, [sp, #280]
  403a48:	add	x3, sp, #0x100
  403a4c:	add	x2, sp, #0x120
  403a50:	add	x1, sp, #0xf8
  403a54:	add	x0, sp, #0xf0
  403a58:	mov	x4, x3
  403a5c:	mov	x3, x2
  403a60:	mov	x2, #0x0                   	// #0
  403a64:	bl	4029ec <acquire_boot_count_path>
  403a68:	str	w0, [sp, #92]
  403a6c:	ldr	w0, [sp, #92]
  403a70:	cmn	w0, #0x31
  403a74:	b.ne	403b04 <verb_set+0x104>  // b.any
  403a78:	mov	w0, #0x3                   	// #3
  403a7c:	str	w0, [sp, #228]
  403a80:	ldr	w0, [sp, #92]
  403a84:	str	w0, [sp, #232]
  403a88:	str	wzr, [sp, #236]
  403a8c:	ldr	w0, [sp, #236]
  403a90:	bl	4019b0 <log_get_max_level_realm@plt>
  403a94:	mov	w1, w0
  403a98:	ldr	w0, [sp, #228]
  403a9c:	and	w0, w0, #0x7
  403aa0:	cmp	w1, w0
  403aa4:	b.lt	403aec <verb_set+0xec>  // b.tstop
  403aa8:	ldr	w0, [sp, #236]
  403aac:	lsl	w1, w0, #10
  403ab0:	ldr	w0, [sp, #228]
  403ab4:	orr	w6, w1, w0
  403ab8:	adrp	x0, 404000 <verb_set+0x600>
  403abc:	add	x1, x0, #0x7eb
  403ac0:	adrp	x0, 404000 <verb_set+0x600>
  403ac4:	add	x5, x0, #0xf18
  403ac8:	adrp	x0, 405000 <_fini+0x884>
  403acc:	add	x4, x0, #0x2d0
  403ad0:	mov	w3, #0x194                 	// #404
  403ad4:	mov	x2, x1
  403ad8:	ldr	w1, [sp, #232]
  403adc:	mov	w0, w6
  403ae0:	bl	4018a0 <log_internal_realm@plt>
  403ae4:	mov	w19, w0
  403ae8:	b	4044a0 <verb_set+0xaa0>
  403aec:	ldr	w0, [sp, #232]
  403af0:	cmp	w0, #0x0
  403af4:	cneg	w0, w0, lt  // lt = tstop
  403af8:	and	w0, w0, #0xff
  403afc:	neg	w19, w0
  403b00:	b	4044a0 <verb_set+0xaa0>
  403b04:	ldr	w0, [sp, #92]
  403b08:	cmp	w0, #0x0
  403b0c:	b.ge	403b18 <verb_set+0x118>  // b.tcont
  403b10:	ldr	w19, [sp, #92]
  403b14:	b	4044a0 <verb_set+0xaa0>
  403b18:	bl	4020c0 <acquire_path>
  403b1c:	str	w0, [sp, #92]
  403b20:	ldr	w0, [sp, #92]
  403b24:	cmp	w0, #0x0
  403b28:	b.ge	403b34 <verb_set+0x134>  // b.tcont
  403b2c:	ldr	w19, [sp, #92]
  403b30:	b	4044a0 <verb_set+0xaa0>
  403b34:	ldr	x0, [sp, #248]
  403b38:	ldr	x1, [sp, #256]
  403b3c:	add	x2, sp, #0x108
  403b40:	bl	402edc <make_good>
  403b44:	str	w0, [sp, #92]
  403b48:	ldr	w0, [sp, #92]
  403b4c:	cmp	w0, #0x0
  403b50:	b.ge	403b78 <verb_set+0x178>  // b.tcont
  403b54:	adrp	x0, 404000 <verb_set+0x600>
  403b58:	add	x1, x0, #0x7eb
  403b5c:	adrp	x0, 405000 <_fini+0x884>
  403b60:	add	x3, x0, #0x2d0
  403b64:	mov	w2, #0x19e                 	// #414
  403b68:	mov	w0, #0x0                   	// #0
  403b6c:	bl	4019a0 <log_oom_internal@plt>
  403b70:	mov	w19, w0
  403b74:	b	4044a0 <verb_set+0xaa0>
  403b78:	ldr	x0, [sp, #248]
  403b7c:	ldr	x1, [sp, #288]
  403b80:	ldr	x2, [sp, #256]
  403b84:	add	x3, sp, #0x110
  403b88:	bl	403058 <make_bad>
  403b8c:	str	w0, [sp, #92]
  403b90:	ldr	w0, [sp, #92]
  403b94:	cmp	w0, #0x0
  403b98:	b.ge	403bc0 <verb_set+0x1c0>  // b.tcont
  403b9c:	adrp	x0, 404000 <verb_set+0x600>
  403ba0:	add	x1, x0, #0x7eb
  403ba4:	adrp	x0, 405000 <_fini+0x884>
  403ba8:	add	x3, x0, #0x2d0
  403bac:	mov	w2, #0x1a2                 	// #418
  403bb0:	mov	w0, #0x0                   	// #0
  403bb4:	bl	4019a0 <log_oom_internal@plt>
  403bb8:	mov	w19, w0
  403bbc:	b	4044a0 <verb_set+0xaa0>
  403bc0:	ldr	x0, [sp, #64]
  403bc4:	ldr	x2, [x0]
  403bc8:	adrp	x0, 404000 <verb_set+0x600>
  403bcc:	add	x1, x0, #0xee0
  403bd0:	mov	x0, x2
  403bd4:	bl	4018d0 <strcmp@plt>
  403bd8:	cmp	w0, #0x0
  403bdc:	b.ne	403bfc <verb_set+0x1fc>  // b.any
  403be0:	ldr	x0, [sp, #264]
  403be4:	str	x0, [sp, #296]
  403be8:	ldr	x0, [sp, #240]
  403bec:	str	x0, [sp, #304]
  403bf0:	ldr	x0, [sp, #272]
  403bf4:	str	x0, [sp, #312]
  403bf8:	b	403ca8 <verb_set+0x2a8>
  403bfc:	ldr	x0, [sp, #64]
  403c00:	ldr	x2, [x0]
  403c04:	adrp	x0, 404000 <verb_set+0x600>
  403c08:	add	x1, x0, #0xee8
  403c0c:	mov	x0, x2
  403c10:	bl	4018d0 <strcmp@plt>
  403c14:	cmp	w0, #0x0
  403c18:	b.ne	403c38 <verb_set+0x238>  // b.any
  403c1c:	ldr	x0, [sp, #272]
  403c20:	str	x0, [sp, #296]
  403c24:	ldr	x0, [sp, #240]
  403c28:	str	x0, [sp, #304]
  403c2c:	ldr	x0, [sp, #264]
  403c30:	str	x0, [sp, #312]
  403c34:	b	403ca8 <verb_set+0x2a8>
  403c38:	ldr	x0, [sp, #64]
  403c3c:	ldr	x2, [x0]
  403c40:	adrp	x0, 404000 <verb_set+0x600>
  403c44:	add	x1, x0, #0xea8
  403c48:	mov	x0, x2
  403c4c:	bl	4018d0 <strcmp@plt>
  403c50:	cmp	w0, #0x0
  403c54:	cset	w0, ne  // ne = any
  403c58:	and	w0, w0, #0xff
  403c5c:	and	x0, x0, #0xff
  403c60:	cmp	x0, #0x0
  403c64:	b.eq	403c90 <verb_set+0x290>  // b.none
  403c68:	adrp	x0, 404000 <verb_set+0x600>
  403c6c:	add	x1, x0, #0x7eb
  403c70:	adrp	x0, 405000 <_fini+0x884>
  403c74:	add	x4, x0, #0x2e0
  403c78:	mov	w3, #0x1ae                 	// #430
  403c7c:	mov	x2, x1
  403c80:	adrp	x0, 404000 <verb_set+0x600>
  403c84:	add	x1, x0, #0xf48
  403c88:	mov	w0, #0x0                   	// #0
  403c8c:	bl	401730 <log_assert_failed_realm@plt>
  403c90:	ldr	x0, [sp, #240]
  403c94:	str	x0, [sp, #296]
  403c98:	ldr	x0, [sp, #264]
  403c9c:	str	x0, [sp, #304]
  403ca0:	ldr	x0, [sp, #272]
  403ca4:	str	x0, [sp, #312]
  403ca8:	adrp	x0, 416000 <saved_argv@@SD_SHARED>
  403cac:	add	x0, x0, #0x28
  403cb0:	ldr	x0, [x0]
  403cb4:	str	x0, [sp, #320]
  403cb8:	b	404384 <verb_set+0x984>
  403cbc:	mov	w0, #0xffffffff            	// #-1
  403cc0:	str	w0, [sp, #88]
  403cc4:	ldr	x0, [sp, #320]
  403cc8:	ldr	x0, [x0]
  403ccc:	mov	w1, #0x4000                	// #16384
  403cd0:	movk	w1, #0x8, lsl #16
  403cd4:	bl	401970 <open64@plt>
  403cd8:	str	w0, [sp, #88]
  403cdc:	ldr	w0, [sp, #88]
  403ce0:	cmp	w0, #0x0
  403ce4:	b.ge	403d88 <verb_set+0x388>  // b.tcont
  403ce8:	mov	w0, #0x3                   	// #3
  403cec:	str	w0, [sp, #192]
  403cf0:	bl	401800 <__errno_location@plt>
  403cf4:	ldr	w0, [x0]
  403cf8:	str	w0, [sp, #196]
  403cfc:	str	wzr, [sp, #200]
  403d00:	ldr	w0, [sp, #200]
  403d04:	bl	4019b0 <log_get_max_level_realm@plt>
  403d08:	mov	w1, w0
  403d0c:	ldr	w0, [sp, #192]
  403d10:	and	w0, w0, #0x7
  403d14:	cmp	w1, w0
  403d18:	b.lt	403d6c <verb_set+0x36c>  // b.tstop
  403d1c:	ldr	w0, [sp, #200]
  403d20:	lsl	w1, w0, #10
  403d24:	ldr	w0, [sp, #192]
  403d28:	orr	w7, w1, w0
  403d2c:	adrp	x0, 404000 <verb_set+0x600>
  403d30:	add	x1, x0, #0x7eb
  403d34:	ldr	x0, [sp, #320]
  403d38:	ldr	x0, [x0]
  403d3c:	mov	x6, x0
  403d40:	adrp	x0, 404000 <verb_set+0x600>
  403d44:	add	x5, x0, #0xe80
  403d48:	adrp	x0, 405000 <_fini+0x884>
  403d4c:	add	x4, x0, #0x2d0
  403d50:	mov	w3, #0x1b9                 	// #441
  403d54:	mov	x2, x1
  403d58:	ldr	w1, [sp, #196]
  403d5c:	mov	w0, w7
  403d60:	bl	4018a0 <log_internal_realm@plt>
  403d64:	mov	w19, w0
  403d68:	b	403d80 <verb_set+0x380>
  403d6c:	ldr	w0, [sp, #196]
  403d70:	cmp	w0, #0x0
  403d74:	cneg	w0, w0, lt  // lt = tstop
  403d78:	and	w0, w0, #0xff
  403d7c:	neg	w19, w0
  403d80:	mov	w20, #0x0                   	// #0
  403d84:	b	404350 <verb_set+0x950>
  403d88:	ldr	w20, [sp, #88]
  403d8c:	ldr	x0, [sp, #304]
  403d90:	bl	40321c <skip_slash>
  403d94:	mov	x22, x0
  403d98:	ldr	w21, [sp, #88]
  403d9c:	ldr	x0, [sp, #296]
  403da0:	bl	40321c <skip_slash>
  403da4:	mov	x3, x0
  403da8:	mov	w2, w21
  403dac:	mov	x1, x22
  403db0:	mov	w0, w20
  403db4:	bl	401790 <rename_noreplace@plt>
  403db8:	str	w0, [sp, #92]
  403dbc:	ldr	w0, [sp, #92]
  403dc0:	cmn	w0, #0x11
  403dc4:	b.ne	403dd0 <verb_set+0x3d0>  // b.any
  403dc8:	mov	w20, #0x1                   	// #1
  403dcc:	b	404350 <verb_set+0x950>
  403dd0:	ldr	w0, [sp, #92]
  403dd4:	cmn	w0, #0x2
  403dd8:	b.ne	404034 <verb_set+0x634>  // b.any
  403ddc:	ldr	w20, [sp, #88]
  403de0:	ldr	x0, [sp, #312]
  403de4:	bl	40321c <skip_slash>
  403de8:	mov	x22, x0
  403dec:	ldr	w21, [sp, #88]
  403df0:	ldr	x0, [sp, #296]
  403df4:	bl	40321c <skip_slash>
  403df8:	mov	x3, x0
  403dfc:	mov	w2, w21
  403e00:	mov	x1, x22
  403e04:	mov	w0, w20
  403e08:	bl	401790 <rename_noreplace@plt>
  403e0c:	str	w0, [sp, #92]
  403e10:	ldr	w0, [sp, #92]
  403e14:	cmn	w0, #0x11
  403e18:	b.ne	403e24 <verb_set+0x424>  // b.any
  403e1c:	mov	w20, #0x1                   	// #1
  403e20:	b	404350 <verb_set+0x950>
  403e24:	ldr	w0, [sp, #92]
  403e28:	cmn	w0, #0x2
  403e2c:	b.ne	403f10 <verb_set+0x510>  // b.any
  403e30:	ldr	w20, [sp, #88]
  403e34:	ldr	x0, [sp, #296]
  403e38:	bl	40321c <skip_slash>
  403e3c:	mov	w3, #0x0                   	// #0
  403e40:	mov	w2, #0x0                   	// #0
  403e44:	mov	x1, x0
  403e48:	mov	w0, w20
  403e4c:	bl	401740 <faccessat@plt>
  403e50:	cmp	w0, #0x0
  403e54:	b.lt	403e60 <verb_set+0x460>  // b.tstop
  403e58:	mov	w20, #0x1                   	// #1
  403e5c:	b	404350 <verb_set+0x950>
  403e60:	bl	401800 <__errno_location@plt>
  403e64:	ldr	w0, [x0]
  403e68:	cmp	w0, #0x2
  403e6c:	b.eq	403f08 <verb_set+0x508>  // b.none
  403e70:	mov	w0, #0x3                   	// #3
  403e74:	str	w0, [sp, #144]
  403e78:	bl	401800 <__errno_location@plt>
  403e7c:	ldr	w0, [x0]
  403e80:	str	w0, [sp, #148]
  403e84:	str	wzr, [sp, #152]
  403e88:	ldr	w0, [sp, #152]
  403e8c:	bl	4019b0 <log_get_max_level_realm@plt>
  403e90:	mov	w1, w0
  403e94:	ldr	w0, [sp, #144]
  403e98:	and	w0, w0, #0x7
  403e9c:	cmp	w1, w0
  403ea0:	b.lt	403eec <verb_set+0x4ec>  // b.tstop
  403ea4:	ldr	w0, [sp, #152]
  403ea8:	lsl	w1, w0, #10
  403eac:	ldr	w0, [sp, #144]
  403eb0:	orr	w7, w1, w0
  403eb4:	adrp	x0, 404000 <verb_set+0x600>
  403eb8:	add	x1, x0, #0x7eb
  403ebc:	ldr	x6, [sp, #296]
  403ec0:	adrp	x0, 404000 <verb_set+0x600>
  403ec4:	add	x5, x0, #0xf68
  403ec8:	adrp	x0, 405000 <_fini+0x884>
  403ecc:	add	x4, x0, #0x2d0
  403ed0:	mov	w3, #0x1c9                 	// #457
  403ed4:	mov	x2, x1
  403ed8:	ldr	w1, [sp, #148]
  403edc:	mov	w0, w7
  403ee0:	bl	4018a0 <log_internal_realm@plt>
  403ee4:	mov	w19, w0
  403ee8:	b	403f00 <verb_set+0x500>
  403eec:	ldr	w0, [sp, #148]
  403ef0:	cmp	w0, #0x0
  403ef4:	cneg	w0, w0, lt  // lt = tstop
  403ef8:	and	w0, w0, #0xff
  403efc:	neg	w19, w0
  403f00:	mov	w20, #0x0                   	// #0
  403f04:	b	404350 <verb_set+0x950>
  403f08:	mov	w20, #0x2                   	// #2
  403f0c:	b	404350 <verb_set+0x950>
  403f10:	ldr	w0, [sp, #92]
  403f14:	cmp	w0, #0x0
  403f18:	b.ge	403fb4 <verb_set+0x5b4>  // b.tcont
  403f1c:	mov	w0, #0x3                   	// #3
  403f20:	str	w0, [sp, #132]
  403f24:	ldr	w0, [sp, #92]
  403f28:	str	w0, [sp, #136]
  403f2c:	str	wzr, [sp, #140]
  403f30:	ldr	w0, [sp, #140]
  403f34:	bl	4019b0 <log_get_max_level_realm@plt>
  403f38:	mov	w1, w0
  403f3c:	ldr	w0, [sp, #132]
  403f40:	and	w0, w0, #0x7
  403f44:	cmp	w1, w0
  403f48:	b.lt	403f98 <verb_set+0x598>  // b.tstop
  403f4c:	ldr	w0, [sp, #140]
  403f50:	lsl	w1, w0, #10
  403f54:	ldr	w0, [sp, #132]
  403f58:	orr	w8, w1, w0
  403f5c:	adrp	x0, 404000 <verb_set+0x600>
  403f60:	add	x1, x0, #0x7eb
  403f64:	ldr	x7, [sp, #296]
  403f68:	ldr	x6, [sp, #312]
  403f6c:	adrp	x0, 404000 <verb_set+0x600>
  403f70:	add	x5, x0, #0xf98
  403f74:	adrp	x0, 405000 <_fini+0x884>
  403f78:	add	x4, x0, #0x2d0
  403f7c:	mov	w3, #0x1ce                 	// #462
  403f80:	mov	x2, x1
  403f84:	ldr	w1, [sp, #136]
  403f88:	mov	w0, w8
  403f8c:	bl	4018a0 <log_internal_realm@plt>
  403f90:	mov	w19, w0
  403f94:	b	403fac <verb_set+0x5ac>
  403f98:	ldr	w0, [sp, #136]
  403f9c:	cmp	w0, #0x0
  403fa0:	cneg	w0, w0, lt  // lt = tstop
  403fa4:	and	w0, w0, #0xff
  403fa8:	neg	w19, w0
  403fac:	mov	w20, #0x0                   	// #0
  403fb0:	b	404350 <verb_set+0x950>
  403fb4:	mov	w0, #0x7                   	// #7
  403fb8:	str	w0, [sp, #120]
  403fbc:	str	wzr, [sp, #124]
  403fc0:	str	wzr, [sp, #128]
  403fc4:	ldr	w0, [sp, #128]
  403fc8:	bl	4019b0 <log_get_max_level_realm@plt>
  403fcc:	mov	w1, w0
  403fd0:	ldr	w0, [sp, #120]
  403fd4:	and	w0, w0, #0x7
  403fd8:	cmp	w1, w0
  403fdc:	b.lt	404028 <verb_set+0x628>  // b.tstop
  403fe0:	ldr	w0, [sp, #128]
  403fe4:	lsl	w1, w0, #10
  403fe8:	ldr	w0, [sp, #120]
  403fec:	orr	w8, w1, w0
  403ff0:	adrp	x0, 404000 <verb_set+0x600>
  403ff4:	add	x1, x0, #0x7eb
  403ff8:	ldr	x7, [sp, #296]
  403ffc:	ldr	x6, [sp, #312]
  404000:	adrp	x0, 404000 <verb_set+0x600>
  404004:	add	x5, x0, #0xfc0
  404008:	adrp	x0, 405000 <_fini+0x884>
  40400c:	add	x4, x0, #0x2d0
  404010:	mov	w3, #0x1d0                 	// #464
  404014:	mov	x2, x1
  404018:	ldr	w1, [sp, #124]
  40401c:	mov	w0, w8
  404020:	bl	4018a0 <log_internal_realm@plt>
  404024:	b	404154 <verb_set+0x754>
  404028:	ldr	w0, [sp, #124]
  40402c:	cmp	w0, #0x0
  404030:	b	404154 <verb_set+0x754>
  404034:	ldr	w0, [sp, #92]
  404038:	cmp	w0, #0x0
  40403c:	b.ge	4040d8 <verb_set+0x6d8>  // b.tcont
  404040:	mov	w0, #0x3                   	// #3
  404044:	str	w0, [sp, #108]
  404048:	ldr	w0, [sp, #92]
  40404c:	str	w0, [sp, #112]
  404050:	str	wzr, [sp, #116]
  404054:	ldr	w0, [sp, #116]
  404058:	bl	4019b0 <log_get_max_level_realm@plt>
  40405c:	mov	w1, w0
  404060:	ldr	w0, [sp, #108]
  404064:	and	w0, w0, #0x7
  404068:	cmp	w1, w0
  40406c:	b.lt	4040bc <verb_set+0x6bc>  // b.tstop
  404070:	ldr	w0, [sp, #116]
  404074:	lsl	w1, w0, #10
  404078:	ldr	w0, [sp, #108]
  40407c:	orr	w8, w1, w0
  404080:	adrp	x0, 404000 <verb_set+0x600>
  404084:	add	x1, x0, #0x7eb
  404088:	ldr	x7, [sp, #296]
  40408c:	ldr	x6, [sp, #304]
  404090:	adrp	x0, 404000 <verb_set+0x600>
  404094:	add	x5, x0, #0xf98
  404098:	adrp	x0, 405000 <_fini+0x884>
  40409c:	add	x4, x0, #0x2d0
  4040a0:	mov	w3, #0x1d3                 	// #467
  4040a4:	mov	x2, x1
  4040a8:	ldr	w1, [sp, #112]
  4040ac:	mov	w0, w8
  4040b0:	bl	4018a0 <log_internal_realm@plt>
  4040b4:	mov	w19, w0
  4040b8:	b	4040d0 <verb_set+0x6d0>
  4040bc:	ldr	w0, [sp, #112]
  4040c0:	cmp	w0, #0x0
  4040c4:	cneg	w0, w0, lt  // lt = tstop
  4040c8:	and	w0, w0, #0xff
  4040cc:	neg	w19, w0
  4040d0:	mov	w20, #0x0                   	// #0
  4040d4:	b	404350 <verb_set+0x950>
  4040d8:	mov	w0, #0x7                   	// #7
  4040dc:	str	w0, [sp, #96]
  4040e0:	str	wzr, [sp, #100]
  4040e4:	str	wzr, [sp, #104]
  4040e8:	ldr	w0, [sp, #104]
  4040ec:	bl	4019b0 <log_get_max_level_realm@plt>
  4040f0:	mov	w1, w0
  4040f4:	ldr	w0, [sp, #96]
  4040f8:	and	w0, w0, #0x7
  4040fc:	cmp	w1, w0
  404100:	b.lt	40414c <verb_set+0x74c>  // b.tstop
  404104:	ldr	w0, [sp, #104]
  404108:	lsl	w1, w0, #10
  40410c:	ldr	w0, [sp, #96]
  404110:	orr	w8, w1, w0
  404114:	adrp	x0, 404000 <verb_set+0x600>
  404118:	add	x1, x0, #0x7eb
  40411c:	ldr	x7, [sp, #296]
  404120:	ldr	x6, [sp, #304]
  404124:	adrp	x0, 404000 <verb_set+0x600>
  404128:	add	x5, x0, #0xfc0
  40412c:	adrp	x0, 405000 <_fini+0x884>
  404130:	add	x4, x0, #0x2d0
  404134:	mov	w3, #0x1d5                 	// #469
  404138:	mov	x2, x1
  40413c:	ldr	w1, [sp, #100]
  404140:	mov	w0, w8
  404144:	bl	4018a0 <log_internal_realm@plt>
  404148:	b	404154 <verb_set+0x754>
  40414c:	ldr	w0, [sp, #100]
  404150:	cmp	w0, #0x0
  404154:	ldr	x0, [sp, #296]
  404158:	bl	401760 <dirname_malloc@plt>
  40415c:	str	x0, [sp, #280]
  404160:	ldr	x0, [sp, #280]
  404164:	cmp	x0, #0x0
  404168:	b.ne	404194 <verb_set+0x794>  // b.any
  40416c:	adrp	x0, 404000 <verb_set+0x600>
  404170:	add	x1, x0, #0x7eb
  404174:	adrp	x0, 405000 <_fini+0x884>
  404178:	add	x3, x0, #0x2d0
  40417c:	mov	w2, #0x1da                 	// #474
  404180:	mov	w0, #0x0                   	// #0
  404184:	bl	4019a0 <log_oom_internal@plt>
  404188:	mov	w19, w0
  40418c:	mov	w20, #0x0                   	// #0
  404190:	b	404350 <verb_set+0x950>
  404194:	ldr	w20, [sp, #88]
  404198:	ldr	x0, [sp, #280]
  40419c:	bl	40321c <skip_slash>
  4041a0:	mov	x1, x0
  4041a4:	mov	w0, w20
  4041a8:	bl	401930 <fsync_path_at@plt>
  4041ac:	str	w0, [sp, #92]
  4041b0:	ldr	w0, [sp, #92]
  4041b4:	cmp	w0, #0x0
  4041b8:	b.ge	404238 <verb_set+0x838>  // b.tcont
  4041bc:	mov	w0, #0x7                   	// #7
  4041c0:	str	w0, [sp, #156]
  4041c4:	bl	401800 <__errno_location@plt>
  4041c8:	ldr	w0, [x0]
  4041cc:	str	w0, [sp, #160]
  4041d0:	str	wzr, [sp, #164]
  4041d4:	ldr	w0, [sp, #164]
  4041d8:	bl	4019b0 <log_get_max_level_realm@plt>
  4041dc:	mov	w1, w0
  4041e0:	ldr	w0, [sp, #156]
  4041e4:	and	w0, w0, #0x7
  4041e8:	cmp	w1, w0
  4041ec:	b.lt	404230 <verb_set+0x830>  // b.tstop
  4041f0:	ldr	w0, [sp, #164]
  4041f4:	lsl	w1, w0, #10
  4041f8:	ldr	w0, [sp, #156]
  4041fc:	orr	w6, w1, w0
  404200:	adrp	x0, 404000 <verb_set+0x600>
  404204:	add	x1, x0, #0x7eb
  404208:	adrp	x0, 404000 <verb_set+0x600>
  40420c:	add	x5, x0, #0xfe8
  404210:	adrp	x0, 405000 <_fini+0x884>
  404214:	add	x4, x0, #0x2d0
  404218:	mov	w3, #0x1de                 	// #478
  40421c:	mov	x2, x1
  404220:	ldr	w1, [sp, #160]
  404224:	mov	w0, w6
  404228:	bl	4018a0 <log_internal_realm@plt>
  40422c:	b	404238 <verb_set+0x838>
  404230:	ldr	w0, [sp, #160]
  404234:	cmp	w0, #0x0
  404238:	ldr	w0, [sp, #88]
  40423c:	bl	401950 <syncfs@plt>
  404240:	cmp	w0, #0x0
  404244:	b.ge	4042c4 <verb_set+0x8c4>  // b.tcont
  404248:	mov	w0, #0x7                   	// #7
  40424c:	str	w0, [sp, #168]
  404250:	bl	401800 <__errno_location@plt>
  404254:	ldr	w0, [x0]
  404258:	str	w0, [sp, #172]
  40425c:	str	wzr, [sp, #176]
  404260:	ldr	w0, [sp, #176]
  404264:	bl	4019b0 <log_get_max_level_realm@plt>
  404268:	mov	w1, w0
  40426c:	ldr	w0, [sp, #168]
  404270:	and	w0, w0, #0x7
  404274:	cmp	w1, w0
  404278:	b.lt	4042bc <verb_set+0x8bc>  // b.tstop
  40427c:	ldr	w0, [sp, #176]
  404280:	lsl	w1, w0, #10
  404284:	ldr	w0, [sp, #168]
  404288:	orr	w6, w1, w0
  40428c:	adrp	x0, 404000 <verb_set+0x600>
  404290:	add	x1, x0, #0x7eb
  404294:	adrp	x0, 405000 <_fini+0x884>
  404298:	add	x5, x0, #0x20
  40429c:	adrp	x0, 405000 <_fini+0x884>
  4042a0:	add	x4, x0, #0x2d0
  4042a4:	mov	w3, #0x1e2                 	// #482
  4042a8:	mov	x2, x1
  4042ac:	ldr	w1, [sp, #172]
  4042b0:	mov	w0, w6
  4042b4:	bl	4018a0 <log_internal_realm@plt>
  4042b8:	b	4042c4 <verb_set+0x8c4>
  4042bc:	ldr	w0, [sp, #172]
  4042c0:	cmp	w0, #0x0
  4042c4:	mov	w0, #0x6                   	// #6
  4042c8:	str	w0, [sp, #180]
  4042cc:	str	wzr, [sp, #184]
  4042d0:	str	wzr, [sp, #188]
  4042d4:	ldr	w0, [sp, #188]
  4042d8:	bl	4019b0 <log_get_max_level_realm@plt>
  4042dc:	mov	w1, w0
  4042e0:	ldr	w0, [sp, #180]
  4042e4:	and	w0, w0, #0x7
  4042e8:	cmp	w1, w0
  4042ec:	b.lt	404344 <verb_set+0x944>  // b.tstop
  4042f0:	ldr	w0, [sp, #188]
  4042f4:	lsl	w1, w0, #10
  4042f8:	ldr	w0, [sp, #180]
  4042fc:	orr	w8, w1, w0
  404300:	adrp	x0, 404000 <verb_set+0x600>
  404304:	add	x1, x0, #0x7eb
  404308:	ldr	x0, [sp, #64]
  40430c:	ldr	x0, [x0]
  404310:	ldr	x2, [sp, #288]
  404314:	mov	x7, x2
  404318:	mov	x6, x0
  40431c:	adrp	x0, 405000 <_fini+0x884>
  404320:	add	x5, x0, #0x58
  404324:	adrp	x0, 405000 <_fini+0x884>
  404328:	add	x4, x0, #0x2d0
  40432c:	mov	w3, #0x1e4                 	// #484
  404330:	mov	x2, x1
  404334:	ldr	w1, [sp, #184]
  404338:	mov	w0, w8
  40433c:	bl	4018a0 <log_internal_realm@plt>
  404340:	b	40434c <verb_set+0x94c>
  404344:	ldr	w0, [sp, #184]
  404348:	cmp	w0, #0x0
  40434c:	mov	w20, #0x3                   	// #3
  404350:	add	x0, sp, #0x58
  404354:	bl	401bdc <closep>
  404358:	cmp	w20, #0x3
  40435c:	b.eq	404378 <verb_set+0x978>  // b.none
  404360:	cmp	w20, #0x3
  404364:	b.gt	404378 <verb_set+0x978>
  404368:	cmp	w20, #0x0
  40436c:	b.eq	4044a0 <verb_set+0xaa0>  // b.none
  404370:	cmp	w20, #0x1
  404374:	b.eq	404428 <verb_set+0xa28>  // b.none
  404378:	ldr	x0, [sp, #320]
  40437c:	add	x0, x0, #0x8
  404380:	str	x0, [sp, #320]
  404384:	ldr	x0, [sp, #320]
  404388:	cmp	x0, #0x0
  40438c:	b.eq	4043a0 <verb_set+0x9a0>  // b.none
  404390:	ldr	x0, [sp, #320]
  404394:	ldr	x0, [x0]
  404398:	cmp	x0, #0x0
  40439c:	b.ne	403cbc <verb_set+0x2bc>  // b.any
  4043a0:	mov	w0, #0x3                   	// #3
  4043a4:	str	w0, [sp, #216]
  4043a8:	mov	w0, #0x10                  	// #16
  4043ac:	movk	w0, #0x4000, lsl #16
  4043b0:	str	w0, [sp, #220]
  4043b4:	str	wzr, [sp, #224]
  4043b8:	ldr	w0, [sp, #224]
  4043bc:	bl	4019b0 <log_get_max_level_realm@plt>
  4043c0:	mov	w1, w0
  4043c4:	ldr	w0, [sp, #216]
  4043c8:	and	w0, w0, #0x7
  4043cc:	cmp	w1, w0
  4043d0:	b.lt	404418 <verb_set+0xa18>  // b.tstop
  4043d4:	ldr	w0, [sp, #224]
  4043d8:	lsl	w1, w0, #10
  4043dc:	ldr	w0, [sp, #216]
  4043e0:	orr	w7, w1, w0
  4043e4:	adrp	x0, 404000 <verb_set+0x600>
  4043e8:	add	x1, x0, #0x7eb
  4043ec:	ldr	x6, [sp, #296]
  4043f0:	adrp	x0, 405000 <_fini+0x884>
  4043f4:	add	x5, x0, #0x90
  4043f8:	adrp	x0, 405000 <_fini+0x884>
  4043fc:	add	x4, x0, #0x2d0
  404400:	mov	w3, #0x1e7                 	// #487
  404404:	mov	x2, x1
  404408:	ldr	w1, [sp, #220]
  40440c:	mov	w0, w7
  404410:	bl	4018a0 <log_internal_realm@plt>
  404414:	b	404420 <verb_set+0xa20>
  404418:	ldr	w0, [sp, #220]
  40441c:	cmp	w0, #0x0
  404420:	mov	w19, #0x1                   	// #1
  404424:	b	4044a0 <verb_set+0xaa0>
  404428:	mov	w0, #0x7                   	// #7
  40442c:	str	w0, [sp, #204]
  404430:	str	wzr, [sp, #208]
  404434:	str	wzr, [sp, #212]
  404438:	ldr	w0, [sp, #212]
  40443c:	bl	4019b0 <log_get_max_level_realm@plt>
  404440:	mov	w1, w0
  404444:	ldr	w0, [sp, #204]
  404448:	and	w0, w0, #0x7
  40444c:	cmp	w1, w0
  404450:	b.lt	404494 <verb_set+0xa94>  // b.tstop
  404454:	ldr	w0, [sp, #212]
  404458:	lsl	w1, w0, #10
  40445c:	ldr	w0, [sp, #204]
  404460:	orr	w6, w1, w0
  404464:	adrp	x0, 404000 <verb_set+0x600>
  404468:	add	x1, x0, #0x7eb
  40446c:	adrp	x0, 405000 <_fini+0x884>
  404470:	add	x5, x0, #0xc8
  404474:	adrp	x0, 405000 <_fini+0x884>
  404478:	add	x4, x0, #0x2d0
  40447c:	mov	w3, #0x1eb                 	// #491
  404480:	mov	x2, x1
  404484:	ldr	w1, [sp, #208]
  404488:	mov	w0, w6
  40448c:	bl	4018a0 <log_internal_realm@plt>
  404490:	b	40449c <verb_set+0xa9c>
  404494:	ldr	w0, [sp, #208]
  404498:	cmp	w0, #0x0
  40449c:	mov	w19, #0x0                   	// #0
  4044a0:	add	x0, sp, #0x118
  4044a4:	bl	401bb8 <freep>
  4044a8:	add	x0, sp, #0x110
  4044ac:	bl	401bb8 <freep>
  4044b0:	add	x0, sp, #0x108
  4044b4:	bl	401bb8 <freep>
  4044b8:	add	x0, sp, #0x100
  4044bc:	bl	401bb8 <freep>
  4044c0:	add	x0, sp, #0xf8
  4044c4:	bl	401bb8 <freep>
  4044c8:	add	x0, sp, #0xf0
  4044cc:	bl	401bb8 <freep>
  4044d0:	mov	w1, w19
  4044d4:	adrp	x0, 415000 <__FRAME_END__+0xf740>
  4044d8:	add	x0, x0, #0xbf0
  4044dc:	ldr	x2, [sp, #328]
  4044e0:	ldr	x0, [x0]
  4044e4:	eor	x0, x2, x0
  4044e8:	cmp	x0, #0x0
  4044ec:	b.eq	4044f4 <verb_set+0xaf4>  // b.none
  4044f0:	bl	401860 <__stack_chk_fail@plt>
  4044f4:	mov	w0, w1
  4044f8:	ldp	x19, x20, [sp, #16]
  4044fc:	ldp	x21, x22, [sp, #32]
  404500:	ldp	x29, x30, [sp], #336
  404504:	ret

0000000000404508 <run>:
  404508:	stp	x29, x30, [sp, #-64]!
  40450c:	mov	x29, sp
  404510:	str	w0, [sp, #28]
  404514:	str	x1, [sp, #16]
  404518:	mov	w0, #0x0                   	// #0
  40451c:	bl	4016b0 <log_parse_environment_realm@plt>
  404520:	bl	401990 <log_open@plt>
  404524:	ldr	x1, [sp, #16]
  404528:	ldr	w0, [sp, #28]
  40452c:	bl	401f0c <parse_argv>
  404530:	str	w0, [sp, #36]
  404534:	ldr	w0, [sp, #36]
  404538:	cmp	w0, #0x0
  40453c:	b.gt	404548 <run+0x40>
  404540:	ldr	w0, [sp, #36]
  404544:	b	40469c <run+0x194>
  404548:	bl	4018c0 <detect_container@plt>
  40454c:	cmp	w0, #0x0
  404550:	b.le	4045e0 <run+0xd8>
  404554:	mov	w0, #0x3                   	// #3
  404558:	str	w0, [sp, #52]
  40455c:	mov	w0, #0x5f                  	// #95
  404560:	movk	w0, #0x4000, lsl #16
  404564:	str	w0, [sp, #56]
  404568:	str	wzr, [sp, #60]
  40456c:	ldr	w0, [sp, #60]
  404570:	bl	4019b0 <log_get_max_level_realm@plt>
  404574:	mov	w1, w0
  404578:	ldr	w0, [sp, #52]
  40457c:	and	w0, w0, #0x7
  404580:	cmp	w1, w0
  404584:	b.lt	4045c8 <run+0xc0>  // b.tstop
  404588:	ldr	w0, [sp, #60]
  40458c:	lsl	w1, w0, #10
  404590:	ldr	w0, [sp, #52]
  404594:	orr	w6, w1, w0
  404598:	adrp	x0, 404000 <verb_set+0x600>
  40459c:	add	x1, x0, #0x7eb
  4045a0:	adrp	x0, 405000 <_fini+0x884>
  4045a4:	add	x5, x0, #0x100
  4045a8:	adrp	x0, 405000 <_fini+0x884>
  4045ac:	add	x4, x0, #0x2f0
  4045b0:	mov	w3, #0x203                 	// #515
  4045b4:	mov	x2, x1
  4045b8:	ldr	w1, [sp, #56]
  4045bc:	mov	w0, w6
  4045c0:	bl	4018a0 <log_internal_realm@plt>
  4045c4:	b	40469c <run+0x194>
  4045c8:	ldr	w0, [sp, #56]
  4045cc:	cmp	w0, #0x0
  4045d0:	cneg	w0, w0, lt  // lt = tstop
  4045d4:	and	w0, w0, #0xff
  4045d8:	neg	w0, w0
  4045dc:	b	40469c <run+0x194>
  4045e0:	bl	4017a0 <is_efi_boot@plt>
  4045e4:	and	w0, w0, #0xff
  4045e8:	eor	w0, w0, #0x1
  4045ec:	and	w0, w0, #0xff
  4045f0:	cmp	w0, #0x0
  4045f4:	b.eq	404684 <run+0x17c>  // b.none
  4045f8:	mov	w0, #0x3                   	// #3
  4045fc:	str	w0, [sp, #40]
  404600:	mov	w0, #0x5f                  	// #95
  404604:	movk	w0, #0x4000, lsl #16
  404608:	str	w0, [sp, #44]
  40460c:	str	wzr, [sp, #48]
  404610:	ldr	w0, [sp, #48]
  404614:	bl	4019b0 <log_get_max_level_realm@plt>
  404618:	mov	w1, w0
  40461c:	ldr	w0, [sp, #40]
  404620:	and	w0, w0, #0x7
  404624:	cmp	w1, w0
  404628:	b.lt	40466c <run+0x164>  // b.tstop
  40462c:	ldr	w0, [sp, #48]
  404630:	lsl	w1, w0, #10
  404634:	ldr	w0, [sp, #40]
  404638:	orr	w6, w1, w0
  40463c:	adrp	x0, 404000 <verb_set+0x600>
  404640:	add	x1, x0, #0x7eb
  404644:	adrp	x0, 405000 <_fini+0x884>
  404648:	add	x5, x0, #0x130
  40464c:	adrp	x0, 405000 <_fini+0x884>
  404650:	add	x4, x0, #0x2f0
  404654:	mov	w3, #0x207                 	// #519
  404658:	mov	x2, x1
  40465c:	ldr	w1, [sp, #44]
  404660:	mov	w0, w6
  404664:	bl	4018a0 <log_internal_realm@plt>
  404668:	b	40469c <run+0x194>
  40466c:	ldr	w0, [sp, #44]
  404670:	cmp	w0, #0x0
  404674:	cneg	w0, w0, lt  // lt = tstop
  404678:	and	w0, w0, #0xff
  40467c:	neg	w0, w0
  404680:	b	40469c <run+0x194>
  404684:	mov	x3, #0x0                   	// #0
  404688:	adrp	x0, 405000 <_fini+0x884>
  40468c:	add	x2, x0, #0x2f8
  404690:	ldr	x1, [sp, #16]
  404694:	ldr	w0, [sp, #28]
  404698:	bl	4016d0 <dispatch_verb@plt>
  40469c:	ldp	x29, x30, [sp], #64
  4046a0:	ret

00000000004046a4 <main>:
  4046a4:	stp	x29, x30, [sp, #-48]!
  4046a8:	mov	x29, sp
  4046ac:	str	w0, [sp, #28]
  4046b0:	str	x1, [sp, #16]
  4046b4:	ldr	x1, [sp, #16]
  4046b8:	ldr	w0, [sp, #28]
  4046bc:	bl	401c00 <save_argc_argv>
  4046c0:	ldr	x1, [sp, #16]
  4046c4:	ldr	w0, [sp, #28]
  4046c8:	bl	404508 <run>
  4046cc:	str	w0, [sp, #44]
  4046d0:	bl	401870 <ask_password_agent_close@plt>
  4046d4:	bl	4016a0 <polkit_agent_close@plt>
  4046d8:	bl	401890 <pager_close@plt>
  4046dc:	bl	401940 <mac_selinux_finish@plt>
  4046e0:	bl	401c38 <static_destruct>
  4046e4:	ldr	w0, [sp, #44]
  4046e8:	lsr	w0, w0, #31
  4046ec:	ldp	x29, x30, [sp], #48
  4046f0:	ret
  4046f4:	nop

00000000004046f8 <__libc_csu_init>:
  4046f8:	stp	x29, x30, [sp, #-64]!
  4046fc:	mov	x29, sp
  404700:	stp	x19, x20, [sp, #16]
  404704:	adrp	x20, 415000 <__FRAME_END__+0xf740>
  404708:	add	x20, x20, #0xbe8
  40470c:	stp	x21, x22, [sp, #32]
  404710:	adrp	x21, 415000 <__FRAME_END__+0xf740>
  404714:	add	x21, x21, #0xbe0
  404718:	sub	x20, x20, x21
  40471c:	mov	w22, w0
  404720:	stp	x23, x24, [sp, #48]
  404724:	mov	x23, x1
  404728:	mov	x24, x2
  40472c:	bl	401620 <_init>
  404730:	cmp	xzr, x20, asr #3
  404734:	b.eq	404760 <__libc_csu_init+0x68>  // b.none
  404738:	asr	x20, x20, #3
  40473c:	mov	x19, #0x0                   	// #0
  404740:	ldr	x3, [x21, x19, lsl #3]
  404744:	mov	x2, x24
  404748:	add	x19, x19, #0x1
  40474c:	mov	x1, x23
  404750:	mov	w0, w22
  404754:	blr	x3
  404758:	cmp	x20, x19
  40475c:	b.ne	404740 <__libc_csu_init+0x48>  // b.any
  404760:	ldp	x19, x20, [sp, #16]
  404764:	ldp	x21, x22, [sp, #32]
  404768:	ldp	x23, x24, [sp, #48]
  40476c:	ldp	x29, x30, [sp], #64
  404770:	ret
  404774:	nop

0000000000404778 <__libc_csu_fini>:
  404778:	ret

Disassembly of section .fini:

000000000040477c <_fini>:
  40477c:	stp	x29, x30, [sp, #-16]!
  404780:	mov	x29, sp
  404784:	ldp	x29, x30, [sp], #16
  404788:	ret
