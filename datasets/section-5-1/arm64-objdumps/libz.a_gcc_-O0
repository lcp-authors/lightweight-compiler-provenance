In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libz.a_gcc_-O0:

adler32.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <adler32_z>:
   0:	sub	sp, sp, #0x30
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	str	x2, [sp, #8]
  10:	ldr	x0, [sp, #24]
  14:	lsr	x0, x0, #16
  18:	and	x0, x0, #0xffff
  1c:	str	x0, [sp, #40]
  20:	ldr	x0, [sp, #24]
  24:	and	x0, x0, #0xffff
  28:	str	x0, [sp, #24]
  2c:	ldr	x0, [sp, #8]
  30:	cmp	x0, #0x1
  34:	b.ne	b4 <adler32_z+0xb4>  // b.any
  38:	ldr	x0, [sp, #16]
  3c:	ldrb	w0, [x0]
  40:	and	x0, x0, #0xff
  44:	ldr	x1, [sp, #24]
  48:	add	x0, x1, x0
  4c:	str	x0, [sp, #24]
  50:	ldr	x1, [sp, #24]
  54:	mov	x0, #0xfff0                	// #65520
  58:	cmp	x1, x0
  5c:	b.ls	70 <adler32_z+0x70>  // b.plast
  60:	ldr	x1, [sp, #24]
  64:	mov	x0, #0xffffffffffff000f    	// #-65521
  68:	add	x0, x1, x0
  6c:	str	x0, [sp, #24]
  70:	ldr	x1, [sp, #40]
  74:	ldr	x0, [sp, #24]
  78:	add	x0, x1, x0
  7c:	str	x0, [sp, #40]
  80:	ldr	x1, [sp, #40]
  84:	mov	x0, #0xfff0                	// #65520
  88:	cmp	x1, x0
  8c:	b.ls	a0 <adler32_z+0xa0>  // b.plast
  90:	ldr	x1, [sp, #40]
  94:	mov	x0, #0xffffffffffff000f    	// #-65521
  98:	add	x0, x1, x0
  9c:	str	x0, [sp, #40]
  a0:	ldr	x0, [sp, #40]
  a4:	lsl	x1, x0, #16
  a8:	ldr	x0, [sp, #24]
  ac:	orr	x0, x1, x0
  b0:	b	8f4 <adler32_z+0x8f4>
  b4:	ldr	x0, [sp, #16]
  b8:	cmp	x0, #0x0
  bc:	b.ne	c8 <adler32_z+0xc8>  // b.any
  c0:	mov	x0, #0x1                   	// #1
  c4:	b	8f4 <adler32_z+0x8f4>
  c8:	ldr	x0, [sp, #8]
  cc:	cmp	x0, #0xf
  d0:	b.hi	514 <adler32_z+0x514>  // b.pmore
  d4:	b	108 <adler32_z+0x108>
  d8:	ldr	x0, [sp, #16]
  dc:	add	x1, x0, #0x1
  e0:	str	x1, [sp, #16]
  e4:	ldrb	w0, [x0]
  e8:	and	x0, x0, #0xff
  ec:	ldr	x1, [sp, #24]
  f0:	add	x0, x1, x0
  f4:	str	x0, [sp, #24]
  f8:	ldr	x1, [sp, #40]
  fc:	ldr	x0, [sp, #24]
 100:	add	x0, x1, x0
 104:	str	x0, [sp, #40]
 108:	ldr	x0, [sp, #8]
 10c:	sub	x1, x0, #0x1
 110:	str	x1, [sp, #8]
 114:	cmp	x0, #0x0
 118:	b.ne	d8 <adler32_z+0xd8>  // b.any
 11c:	ldr	x1, [sp, #24]
 120:	mov	x0, #0xfff0                	// #65520
 124:	cmp	x1, x0
 128:	b.ls	13c <adler32_z+0x13c>  // b.plast
 12c:	ldr	x1, [sp, #24]
 130:	mov	x0, #0xffffffffffff000f    	// #-65521
 134:	add	x0, x1, x0
 138:	str	x0, [sp, #24]
 13c:	ldr	x1, [sp, #40]
 140:	mov	x0, #0xc5cd                	// #50637
 144:	movk	x0, #0xd2f, lsl #16
 148:	movk	x0, #0xe1, lsl #32
 14c:	movk	x0, #0xf, lsl #48
 150:	umulh	x0, x1, x0
 154:	sub	x2, x1, x0
 158:	lsr	x2, x2, #1
 15c:	add	x0, x0, x2
 160:	lsr	x2, x0, #15
 164:	mov	x0, x2
 168:	lsl	x0, x0, #12
 16c:	sub	x0, x0, x2
 170:	lsl	x0, x0, #4
 174:	add	x0, x0, x2
 178:	sub	x0, x1, x0
 17c:	str	x0, [sp, #40]
 180:	ldr	x0, [sp, #40]
 184:	lsl	x1, x0, #16
 188:	ldr	x0, [sp, #24]
 18c:	orr	x0, x1, x0
 190:	b	8f4 <adler32_z+0x8f4>
 194:	ldr	x1, [sp, #8]
 198:	mov	x0, #0xffffffffffffea50    	// #-5552
 19c:	add	x0, x1, x0
 1a0:	str	x0, [sp, #8]
 1a4:	mov	w0, #0x15b                 	// #347
 1a8:	str	w0, [sp, #36]
 1ac:	ldr	x0, [sp, #16]
 1b0:	ldrb	w0, [x0]
 1b4:	and	x0, x0, #0xff
 1b8:	ldr	x1, [sp, #24]
 1bc:	add	x0, x1, x0
 1c0:	str	x0, [sp, #24]
 1c4:	ldr	x1, [sp, #40]
 1c8:	ldr	x0, [sp, #24]
 1cc:	add	x0, x1, x0
 1d0:	str	x0, [sp, #40]
 1d4:	ldr	x0, [sp, #16]
 1d8:	add	x0, x0, #0x1
 1dc:	ldrb	w0, [x0]
 1e0:	and	x0, x0, #0xff
 1e4:	ldr	x1, [sp, #24]
 1e8:	add	x0, x1, x0
 1ec:	str	x0, [sp, #24]
 1f0:	ldr	x1, [sp, #40]
 1f4:	ldr	x0, [sp, #24]
 1f8:	add	x0, x1, x0
 1fc:	str	x0, [sp, #40]
 200:	ldr	x0, [sp, #16]
 204:	add	x0, x0, #0x2
 208:	ldrb	w0, [x0]
 20c:	and	x0, x0, #0xff
 210:	ldr	x1, [sp, #24]
 214:	add	x0, x1, x0
 218:	str	x0, [sp, #24]
 21c:	ldr	x1, [sp, #40]
 220:	ldr	x0, [sp, #24]
 224:	add	x0, x1, x0
 228:	str	x0, [sp, #40]
 22c:	ldr	x0, [sp, #16]
 230:	add	x0, x0, #0x3
 234:	ldrb	w0, [x0]
 238:	and	x0, x0, #0xff
 23c:	ldr	x1, [sp, #24]
 240:	add	x0, x1, x0
 244:	str	x0, [sp, #24]
 248:	ldr	x1, [sp, #40]
 24c:	ldr	x0, [sp, #24]
 250:	add	x0, x1, x0
 254:	str	x0, [sp, #40]
 258:	ldr	x0, [sp, #16]
 25c:	add	x0, x0, #0x4
 260:	ldrb	w0, [x0]
 264:	and	x0, x0, #0xff
 268:	ldr	x1, [sp, #24]
 26c:	add	x0, x1, x0
 270:	str	x0, [sp, #24]
 274:	ldr	x1, [sp, #40]
 278:	ldr	x0, [sp, #24]
 27c:	add	x0, x1, x0
 280:	str	x0, [sp, #40]
 284:	ldr	x0, [sp, #16]
 288:	add	x0, x0, #0x5
 28c:	ldrb	w0, [x0]
 290:	and	x0, x0, #0xff
 294:	ldr	x1, [sp, #24]
 298:	add	x0, x1, x0
 29c:	str	x0, [sp, #24]
 2a0:	ldr	x1, [sp, #40]
 2a4:	ldr	x0, [sp, #24]
 2a8:	add	x0, x1, x0
 2ac:	str	x0, [sp, #40]
 2b0:	ldr	x0, [sp, #16]
 2b4:	add	x0, x0, #0x6
 2b8:	ldrb	w0, [x0]
 2bc:	and	x0, x0, #0xff
 2c0:	ldr	x1, [sp, #24]
 2c4:	add	x0, x1, x0
 2c8:	str	x0, [sp, #24]
 2cc:	ldr	x1, [sp, #40]
 2d0:	ldr	x0, [sp, #24]
 2d4:	add	x0, x1, x0
 2d8:	str	x0, [sp, #40]
 2dc:	ldr	x0, [sp, #16]
 2e0:	add	x0, x0, #0x7
 2e4:	ldrb	w0, [x0]
 2e8:	and	x0, x0, #0xff
 2ec:	ldr	x1, [sp, #24]
 2f0:	add	x0, x1, x0
 2f4:	str	x0, [sp, #24]
 2f8:	ldr	x1, [sp, #40]
 2fc:	ldr	x0, [sp, #24]
 300:	add	x0, x1, x0
 304:	str	x0, [sp, #40]
 308:	ldr	x0, [sp, #16]
 30c:	add	x0, x0, #0x8
 310:	ldrb	w0, [x0]
 314:	and	x0, x0, #0xff
 318:	ldr	x1, [sp, #24]
 31c:	add	x0, x1, x0
 320:	str	x0, [sp, #24]
 324:	ldr	x1, [sp, #40]
 328:	ldr	x0, [sp, #24]
 32c:	add	x0, x1, x0
 330:	str	x0, [sp, #40]
 334:	ldr	x0, [sp, #16]
 338:	add	x0, x0, #0x9
 33c:	ldrb	w0, [x0]
 340:	and	x0, x0, #0xff
 344:	ldr	x1, [sp, #24]
 348:	add	x0, x1, x0
 34c:	str	x0, [sp, #24]
 350:	ldr	x1, [sp, #40]
 354:	ldr	x0, [sp, #24]
 358:	add	x0, x1, x0
 35c:	str	x0, [sp, #40]
 360:	ldr	x0, [sp, #16]
 364:	add	x0, x0, #0xa
 368:	ldrb	w0, [x0]
 36c:	and	x0, x0, #0xff
 370:	ldr	x1, [sp, #24]
 374:	add	x0, x1, x0
 378:	str	x0, [sp, #24]
 37c:	ldr	x1, [sp, #40]
 380:	ldr	x0, [sp, #24]
 384:	add	x0, x1, x0
 388:	str	x0, [sp, #40]
 38c:	ldr	x0, [sp, #16]
 390:	add	x0, x0, #0xb
 394:	ldrb	w0, [x0]
 398:	and	x0, x0, #0xff
 39c:	ldr	x1, [sp, #24]
 3a0:	add	x0, x1, x0
 3a4:	str	x0, [sp, #24]
 3a8:	ldr	x1, [sp, #40]
 3ac:	ldr	x0, [sp, #24]
 3b0:	add	x0, x1, x0
 3b4:	str	x0, [sp, #40]
 3b8:	ldr	x0, [sp, #16]
 3bc:	add	x0, x0, #0xc
 3c0:	ldrb	w0, [x0]
 3c4:	and	x0, x0, #0xff
 3c8:	ldr	x1, [sp, #24]
 3cc:	add	x0, x1, x0
 3d0:	str	x0, [sp, #24]
 3d4:	ldr	x1, [sp, #40]
 3d8:	ldr	x0, [sp, #24]
 3dc:	add	x0, x1, x0
 3e0:	str	x0, [sp, #40]
 3e4:	ldr	x0, [sp, #16]
 3e8:	add	x0, x0, #0xd
 3ec:	ldrb	w0, [x0]
 3f0:	and	x0, x0, #0xff
 3f4:	ldr	x1, [sp, #24]
 3f8:	add	x0, x1, x0
 3fc:	str	x0, [sp, #24]
 400:	ldr	x1, [sp, #40]
 404:	ldr	x0, [sp, #24]
 408:	add	x0, x1, x0
 40c:	str	x0, [sp, #40]
 410:	ldr	x0, [sp, #16]
 414:	add	x0, x0, #0xe
 418:	ldrb	w0, [x0]
 41c:	and	x0, x0, #0xff
 420:	ldr	x1, [sp, #24]
 424:	add	x0, x1, x0
 428:	str	x0, [sp, #24]
 42c:	ldr	x1, [sp, #40]
 430:	ldr	x0, [sp, #24]
 434:	add	x0, x1, x0
 438:	str	x0, [sp, #40]
 43c:	ldr	x0, [sp, #16]
 440:	add	x0, x0, #0xf
 444:	ldrb	w0, [x0]
 448:	and	x0, x0, #0xff
 44c:	ldr	x1, [sp, #24]
 450:	add	x0, x1, x0
 454:	str	x0, [sp, #24]
 458:	ldr	x1, [sp, #40]
 45c:	ldr	x0, [sp, #24]
 460:	add	x0, x1, x0
 464:	str	x0, [sp, #40]
 468:	ldr	x0, [sp, #16]
 46c:	add	x0, x0, #0x10
 470:	str	x0, [sp, #16]
 474:	ldr	w0, [sp, #36]
 478:	sub	w0, w0, #0x1
 47c:	str	w0, [sp, #36]
 480:	ldr	w0, [sp, #36]
 484:	cmp	w0, #0x0
 488:	b.ne	1ac <adler32_z+0x1ac>  // b.any
 48c:	ldr	x1, [sp, #24]
 490:	mov	x0, #0xc5cd                	// #50637
 494:	movk	x0, #0xd2f, lsl #16
 498:	movk	x0, #0xe1, lsl #32
 49c:	movk	x0, #0xf, lsl #48
 4a0:	umulh	x0, x1, x0
 4a4:	sub	x2, x1, x0
 4a8:	lsr	x2, x2, #1
 4ac:	add	x0, x0, x2
 4b0:	lsr	x2, x0, #15
 4b4:	mov	x0, x2
 4b8:	lsl	x0, x0, #12
 4bc:	sub	x0, x0, x2
 4c0:	lsl	x0, x0, #4
 4c4:	add	x0, x0, x2
 4c8:	sub	x0, x1, x0
 4cc:	str	x0, [sp, #24]
 4d0:	ldr	x1, [sp, #40]
 4d4:	mov	x0, #0xc5cd                	// #50637
 4d8:	movk	x0, #0xd2f, lsl #16
 4dc:	movk	x0, #0xe1, lsl #32
 4e0:	movk	x0, #0xf, lsl #48
 4e4:	umulh	x0, x1, x0
 4e8:	sub	x2, x1, x0
 4ec:	lsr	x2, x2, #1
 4f0:	add	x0, x0, x2
 4f4:	lsr	x2, x0, #15
 4f8:	mov	x0, x2
 4fc:	lsl	x0, x0, #12
 500:	sub	x0, x0, x2
 504:	lsl	x0, x0, #4
 508:	add	x0, x0, x2
 50c:	sub	x0, x1, x0
 510:	str	x0, [sp, #40]
 514:	ldr	x1, [sp, #8]
 518:	mov	x0, #0x15af                	// #5551
 51c:	cmp	x1, x0
 520:	b.hi	194 <adler32_z+0x194>  // b.pmore
 524:	ldr	x0, [sp, #8]
 528:	cmp	x0, #0x0
 52c:	b.eq	8e4 <adler32_z+0x8e4>  // b.none
 530:	b	808 <adler32_z+0x808>
 534:	ldr	x0, [sp, #8]
 538:	sub	x0, x0, #0x10
 53c:	str	x0, [sp, #8]
 540:	ldr	x0, [sp, #16]
 544:	ldrb	w0, [x0]
 548:	and	x0, x0, #0xff
 54c:	ldr	x1, [sp, #24]
 550:	add	x0, x1, x0
 554:	str	x0, [sp, #24]
 558:	ldr	x1, [sp, #40]
 55c:	ldr	x0, [sp, #24]
 560:	add	x0, x1, x0
 564:	str	x0, [sp, #40]
 568:	ldr	x0, [sp, #16]
 56c:	add	x0, x0, #0x1
 570:	ldrb	w0, [x0]
 574:	and	x0, x0, #0xff
 578:	ldr	x1, [sp, #24]
 57c:	add	x0, x1, x0
 580:	str	x0, [sp, #24]
 584:	ldr	x1, [sp, #40]
 588:	ldr	x0, [sp, #24]
 58c:	add	x0, x1, x0
 590:	str	x0, [sp, #40]
 594:	ldr	x0, [sp, #16]
 598:	add	x0, x0, #0x2
 59c:	ldrb	w0, [x0]
 5a0:	and	x0, x0, #0xff
 5a4:	ldr	x1, [sp, #24]
 5a8:	add	x0, x1, x0
 5ac:	str	x0, [sp, #24]
 5b0:	ldr	x1, [sp, #40]
 5b4:	ldr	x0, [sp, #24]
 5b8:	add	x0, x1, x0
 5bc:	str	x0, [sp, #40]
 5c0:	ldr	x0, [sp, #16]
 5c4:	add	x0, x0, #0x3
 5c8:	ldrb	w0, [x0]
 5cc:	and	x0, x0, #0xff
 5d0:	ldr	x1, [sp, #24]
 5d4:	add	x0, x1, x0
 5d8:	str	x0, [sp, #24]
 5dc:	ldr	x1, [sp, #40]
 5e0:	ldr	x0, [sp, #24]
 5e4:	add	x0, x1, x0
 5e8:	str	x0, [sp, #40]
 5ec:	ldr	x0, [sp, #16]
 5f0:	add	x0, x0, #0x4
 5f4:	ldrb	w0, [x0]
 5f8:	and	x0, x0, #0xff
 5fc:	ldr	x1, [sp, #24]
 600:	add	x0, x1, x0
 604:	str	x0, [sp, #24]
 608:	ldr	x1, [sp, #40]
 60c:	ldr	x0, [sp, #24]
 610:	add	x0, x1, x0
 614:	str	x0, [sp, #40]
 618:	ldr	x0, [sp, #16]
 61c:	add	x0, x0, #0x5
 620:	ldrb	w0, [x0]
 624:	and	x0, x0, #0xff
 628:	ldr	x1, [sp, #24]
 62c:	add	x0, x1, x0
 630:	str	x0, [sp, #24]
 634:	ldr	x1, [sp, #40]
 638:	ldr	x0, [sp, #24]
 63c:	add	x0, x1, x0
 640:	str	x0, [sp, #40]
 644:	ldr	x0, [sp, #16]
 648:	add	x0, x0, #0x6
 64c:	ldrb	w0, [x0]
 650:	and	x0, x0, #0xff
 654:	ldr	x1, [sp, #24]
 658:	add	x0, x1, x0
 65c:	str	x0, [sp, #24]
 660:	ldr	x1, [sp, #40]
 664:	ldr	x0, [sp, #24]
 668:	add	x0, x1, x0
 66c:	str	x0, [sp, #40]
 670:	ldr	x0, [sp, #16]
 674:	add	x0, x0, #0x7
 678:	ldrb	w0, [x0]
 67c:	and	x0, x0, #0xff
 680:	ldr	x1, [sp, #24]
 684:	add	x0, x1, x0
 688:	str	x0, [sp, #24]
 68c:	ldr	x1, [sp, #40]
 690:	ldr	x0, [sp, #24]
 694:	add	x0, x1, x0
 698:	str	x0, [sp, #40]
 69c:	ldr	x0, [sp, #16]
 6a0:	add	x0, x0, #0x8
 6a4:	ldrb	w0, [x0]
 6a8:	and	x0, x0, #0xff
 6ac:	ldr	x1, [sp, #24]
 6b0:	add	x0, x1, x0
 6b4:	str	x0, [sp, #24]
 6b8:	ldr	x1, [sp, #40]
 6bc:	ldr	x0, [sp, #24]
 6c0:	add	x0, x1, x0
 6c4:	str	x0, [sp, #40]
 6c8:	ldr	x0, [sp, #16]
 6cc:	add	x0, x0, #0x9
 6d0:	ldrb	w0, [x0]
 6d4:	and	x0, x0, #0xff
 6d8:	ldr	x1, [sp, #24]
 6dc:	add	x0, x1, x0
 6e0:	str	x0, [sp, #24]
 6e4:	ldr	x1, [sp, #40]
 6e8:	ldr	x0, [sp, #24]
 6ec:	add	x0, x1, x0
 6f0:	str	x0, [sp, #40]
 6f4:	ldr	x0, [sp, #16]
 6f8:	add	x0, x0, #0xa
 6fc:	ldrb	w0, [x0]
 700:	and	x0, x0, #0xff
 704:	ldr	x1, [sp, #24]
 708:	add	x0, x1, x0
 70c:	str	x0, [sp, #24]
 710:	ldr	x1, [sp, #40]
 714:	ldr	x0, [sp, #24]
 718:	add	x0, x1, x0
 71c:	str	x0, [sp, #40]
 720:	ldr	x0, [sp, #16]
 724:	add	x0, x0, #0xb
 728:	ldrb	w0, [x0]
 72c:	and	x0, x0, #0xff
 730:	ldr	x1, [sp, #24]
 734:	add	x0, x1, x0
 738:	str	x0, [sp, #24]
 73c:	ldr	x1, [sp, #40]
 740:	ldr	x0, [sp, #24]
 744:	add	x0, x1, x0
 748:	str	x0, [sp, #40]
 74c:	ldr	x0, [sp, #16]
 750:	add	x0, x0, #0xc
 754:	ldrb	w0, [x0]
 758:	and	x0, x0, #0xff
 75c:	ldr	x1, [sp, #24]
 760:	add	x0, x1, x0
 764:	str	x0, [sp, #24]
 768:	ldr	x1, [sp, #40]
 76c:	ldr	x0, [sp, #24]
 770:	add	x0, x1, x0
 774:	str	x0, [sp, #40]
 778:	ldr	x0, [sp, #16]
 77c:	add	x0, x0, #0xd
 780:	ldrb	w0, [x0]
 784:	and	x0, x0, #0xff
 788:	ldr	x1, [sp, #24]
 78c:	add	x0, x1, x0
 790:	str	x0, [sp, #24]
 794:	ldr	x1, [sp, #40]
 798:	ldr	x0, [sp, #24]
 79c:	add	x0, x1, x0
 7a0:	str	x0, [sp, #40]
 7a4:	ldr	x0, [sp, #16]
 7a8:	add	x0, x0, #0xe
 7ac:	ldrb	w0, [x0]
 7b0:	and	x0, x0, #0xff
 7b4:	ldr	x1, [sp, #24]
 7b8:	add	x0, x1, x0
 7bc:	str	x0, [sp, #24]
 7c0:	ldr	x1, [sp, #40]
 7c4:	ldr	x0, [sp, #24]
 7c8:	add	x0, x1, x0
 7cc:	str	x0, [sp, #40]
 7d0:	ldr	x0, [sp, #16]
 7d4:	add	x0, x0, #0xf
 7d8:	ldrb	w0, [x0]
 7dc:	and	x0, x0, #0xff
 7e0:	ldr	x1, [sp, #24]
 7e4:	add	x0, x1, x0
 7e8:	str	x0, [sp, #24]
 7ec:	ldr	x1, [sp, #40]
 7f0:	ldr	x0, [sp, #24]
 7f4:	add	x0, x1, x0
 7f8:	str	x0, [sp, #40]
 7fc:	ldr	x0, [sp, #16]
 800:	add	x0, x0, #0x10
 804:	str	x0, [sp, #16]
 808:	ldr	x0, [sp, #8]
 80c:	cmp	x0, #0xf
 810:	b.hi	534 <adler32_z+0x534>  // b.pmore
 814:	b	848 <adler32_z+0x848>
 818:	ldr	x0, [sp, #16]
 81c:	add	x1, x0, #0x1
 820:	str	x1, [sp, #16]
 824:	ldrb	w0, [x0]
 828:	and	x0, x0, #0xff
 82c:	ldr	x1, [sp, #24]
 830:	add	x0, x1, x0
 834:	str	x0, [sp, #24]
 838:	ldr	x1, [sp, #40]
 83c:	ldr	x0, [sp, #24]
 840:	add	x0, x1, x0
 844:	str	x0, [sp, #40]
 848:	ldr	x0, [sp, #8]
 84c:	sub	x1, x0, #0x1
 850:	str	x1, [sp, #8]
 854:	cmp	x0, #0x0
 858:	b.ne	818 <adler32_z+0x818>  // b.any
 85c:	ldr	x1, [sp, #24]
 860:	mov	x0, #0xc5cd                	// #50637
 864:	movk	x0, #0xd2f, lsl #16
 868:	movk	x0, #0xe1, lsl #32
 86c:	movk	x0, #0xf, lsl #48
 870:	umulh	x0, x1, x0
 874:	sub	x2, x1, x0
 878:	lsr	x2, x2, #1
 87c:	add	x0, x0, x2
 880:	lsr	x2, x0, #15
 884:	mov	x0, x2
 888:	lsl	x0, x0, #12
 88c:	sub	x0, x0, x2
 890:	lsl	x0, x0, #4
 894:	add	x0, x0, x2
 898:	sub	x0, x1, x0
 89c:	str	x0, [sp, #24]
 8a0:	ldr	x1, [sp, #40]
 8a4:	mov	x0, #0xc5cd                	// #50637
 8a8:	movk	x0, #0xd2f, lsl #16
 8ac:	movk	x0, #0xe1, lsl #32
 8b0:	movk	x0, #0xf, lsl #48
 8b4:	umulh	x0, x1, x0
 8b8:	sub	x2, x1, x0
 8bc:	lsr	x2, x2, #1
 8c0:	add	x0, x0, x2
 8c4:	lsr	x2, x0, #15
 8c8:	mov	x0, x2
 8cc:	lsl	x0, x0, #12
 8d0:	sub	x0, x0, x2
 8d4:	lsl	x0, x0, #4
 8d8:	add	x0, x0, x2
 8dc:	sub	x0, x1, x0
 8e0:	str	x0, [sp, #40]
 8e4:	ldr	x0, [sp, #40]
 8e8:	lsl	x1, x0, #16
 8ec:	ldr	x0, [sp, #24]
 8f0:	orr	x0, x1, x0
 8f4:	add	sp, sp, #0x30
 8f8:	ret

00000000000008fc <adler32>:
 8fc:	stp	x29, x30, [sp, #-48]!
 900:	mov	x29, sp
 904:	str	x0, [sp, #40]
 908:	str	x1, [sp, #32]
 90c:	str	w2, [sp, #28]
 910:	ldr	w0, [sp, #28]
 914:	mov	x2, x0
 918:	ldr	x1, [sp, #32]
 91c:	ldr	x0, [sp, #40]
 920:	bl	0 <adler32_z>
 924:	ldp	x29, x30, [sp], #48
 928:	ret

000000000000092c <adler32_combine_>:
 92c:	sub	sp, sp, #0x40
 930:	str	x0, [sp, #24]
 934:	str	x1, [sp, #16]
 938:	str	x2, [sp, #8]
 93c:	ldr	x0, [sp, #8]
 940:	cmp	x0, #0x0
 944:	b.ge	950 <adler32_combine_+0x24>  // b.tcont
 948:	mov	x0, #0xffffffff            	// #4294967295
 94c:	b	ae8 <adler32_combine_+0x1bc>
 950:	ldr	x1, [sp, #8]
 954:	mov	x0, #0xe2e7                	// #58087
 958:	movk	x0, #0x8697, lsl #16
 95c:	movk	x0, #0x8070, lsl #32
 960:	movk	x0, #0x8007, lsl #48
 964:	smulh	x0, x1, x0
 968:	add	x0, x0, x1
 96c:	asr	x2, x0, #15
 970:	asr	x0, x1, #63
 974:	sub	x2, x2, x0
 978:	mov	x0, x2
 97c:	lsl	x0, x0, #12
 980:	sub	x0, x0, x2
 984:	lsl	x0, x0, #4
 988:	add	x0, x0, x2
 98c:	sub	x0, x1, x0
 990:	str	x0, [sp, #8]
 994:	ldr	x0, [sp, #8]
 998:	str	w0, [sp, #44]
 99c:	ldr	x0, [sp, #24]
 9a0:	and	x0, x0, #0xffff
 9a4:	str	x0, [sp, #56]
 9a8:	ldr	w0, [sp, #44]
 9ac:	ldr	x1, [sp, #56]
 9b0:	mul	x0, x1, x0
 9b4:	str	x0, [sp, #48]
 9b8:	ldr	x1, [sp, #48]
 9bc:	mov	x0, #0xc5cd                	// #50637
 9c0:	movk	x0, #0xd2f, lsl #16
 9c4:	movk	x0, #0xe1, lsl #32
 9c8:	movk	x0, #0xf, lsl #48
 9cc:	umulh	x0, x1, x0
 9d0:	sub	x2, x1, x0
 9d4:	lsr	x2, x2, #1
 9d8:	add	x0, x0, x2
 9dc:	lsr	x2, x0, #15
 9e0:	mov	x0, x2
 9e4:	lsl	x0, x0, #12
 9e8:	sub	x0, x0, x2
 9ec:	lsl	x0, x0, #4
 9f0:	add	x0, x0, x2
 9f4:	sub	x0, x1, x0
 9f8:	str	x0, [sp, #48]
 9fc:	ldr	x0, [sp, #16]
 a00:	and	x1, x0, #0xffff
 a04:	ldr	x0, [sp, #56]
 a08:	add	x1, x1, x0
 a0c:	mov	x0, #0xfff0                	// #65520
 a10:	add	x0, x1, x0
 a14:	str	x0, [sp, #56]
 a18:	ldr	x0, [sp, #24]
 a1c:	lsr	x0, x0, #16
 a20:	and	x1, x0, #0xffff
 a24:	ldr	x0, [sp, #16]
 a28:	lsr	x0, x0, #16
 a2c:	and	x0, x0, #0xffff
 a30:	add	x1, x1, x0
 a34:	ldr	w0, [sp, #44]
 a38:	sub	x1, x1, x0
 a3c:	ldr	x0, [sp, #48]
 a40:	add	x1, x1, x0
 a44:	mov	x0, #0xfff1                	// #65521
 a48:	add	x0, x1, x0
 a4c:	str	x0, [sp, #48]
 a50:	ldr	x1, [sp, #56]
 a54:	mov	x0, #0xfff0                	// #65520
 a58:	cmp	x1, x0
 a5c:	b.ls	a70 <adler32_combine_+0x144>  // b.plast
 a60:	ldr	x1, [sp, #56]
 a64:	mov	x0, #0xffffffffffff000f    	// #-65521
 a68:	add	x0, x1, x0
 a6c:	str	x0, [sp, #56]
 a70:	ldr	x1, [sp, #56]
 a74:	mov	x0, #0xfff0                	// #65520
 a78:	cmp	x1, x0
 a7c:	b.ls	a90 <adler32_combine_+0x164>  // b.plast
 a80:	ldr	x1, [sp, #56]
 a84:	mov	x0, #0xffffffffffff000f    	// #-65521
 a88:	add	x0, x1, x0
 a8c:	str	x0, [sp, #56]
 a90:	ldr	x1, [sp, #48]
 a94:	mov	x0, #0xffe1                	// #65505
 a98:	movk	x0, #0x1, lsl #16
 a9c:	cmp	x1, x0
 aa0:	b.ls	ab8 <adler32_combine_+0x18c>  // b.plast
 aa4:	ldr	x1, [sp, #48]
 aa8:	mov	x0, #0xffffffffffff001e    	// #-65506
 aac:	movk	x0, #0xfffe, lsl #16
 ab0:	add	x0, x1, x0
 ab4:	str	x0, [sp, #48]
 ab8:	ldr	x1, [sp, #48]
 abc:	mov	x0, #0xfff0                	// #65520
 ac0:	cmp	x1, x0
 ac4:	b.ls	ad8 <adler32_combine_+0x1ac>  // b.plast
 ac8:	ldr	x1, [sp, #48]
 acc:	mov	x0, #0xffffffffffff000f    	// #-65521
 ad0:	add	x0, x1, x0
 ad4:	str	x0, [sp, #48]
 ad8:	ldr	x0, [sp, #48]
 adc:	lsl	x1, x0, #16
 ae0:	ldr	x0, [sp, #56]
 ae4:	orr	x0, x1, x0
 ae8:	add	sp, sp, #0x40
 aec:	ret

0000000000000af0 <adler32_combine>:
 af0:	stp	x29, x30, [sp, #-48]!
 af4:	mov	x29, sp
 af8:	str	x0, [sp, #40]
 afc:	str	x1, [sp, #32]
 b00:	str	x2, [sp, #24]
 b04:	ldr	x2, [sp, #24]
 b08:	ldr	x1, [sp, #32]
 b0c:	ldr	x0, [sp, #40]
 b10:	bl	92c <adler32_combine_>
 b14:	ldp	x29, x30, [sp], #48
 b18:	ret

0000000000000b1c <adler32_combine64>:
 b1c:	stp	x29, x30, [sp, #-48]!
 b20:	mov	x29, sp
 b24:	str	x0, [sp, #40]
 b28:	str	x1, [sp, #32]
 b2c:	str	x2, [sp, #24]
 b30:	ldr	x2, [sp, #24]
 b34:	ldr	x1, [sp, #32]
 b38:	ldr	x0, [sp, #40]
 b3c:	bl	92c <adler32_combine_>
 b40:	ldp	x29, x30, [sp], #48
 b44:	ret

crc32.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <get_crc_table>:
   0:	adrp	x0, 0 <get_crc_table>
   4:	add	x0, x0, #0x0
   8:	ret

000000000000000c <crc32_z>:
   c:	stp	x29, x30, [sp, #-64]!
  10:	mov	x29, sp
  14:	str	x0, [sp, #40]
  18:	str	x1, [sp, #32]
  1c:	str	x2, [sp, #24]
  20:	ldr	x0, [sp, #32]
  24:	cmp	x0, #0x0
  28:	b.ne	34 <crc32_z+0x28>  // b.any
  2c:	mov	x0, #0x0                   	// #0
  30:	b	70 <crc32_z+0x64>
  34:	mov	w0, #0x1                   	// #1
  38:	str	w0, [sp, #60]
  3c:	add	x0, sp, #0x3c
  40:	ldrb	w0, [x0]
  44:	cmp	w0, #0x0
  48:	b.eq	60 <crc32_z+0x54>  // b.none
  4c:	ldr	x2, [sp, #24]
  50:	ldr	x1, [sp, #32]
  54:	ldr	x0, [sp, #40]
  58:	bl	a8 <crc32_little>
  5c:	b	70 <crc32_z+0x64>
  60:	ldr	x2, [sp, #24]
  64:	ldr	x1, [sp, #32]
  68:	ldr	x0, [sp, #40]
  6c:	bl	644 <crc32_big>
  70:	ldp	x29, x30, [sp], #64
  74:	ret

0000000000000078 <crc32>:
  78:	stp	x29, x30, [sp, #-48]!
  7c:	mov	x29, sp
  80:	str	x0, [sp, #40]
  84:	str	x1, [sp, #32]
  88:	str	w2, [sp, #28]
  8c:	ldr	w0, [sp, #28]
  90:	mov	x2, x0
  94:	ldr	x1, [sp, #32]
  98:	ldr	x0, [sp, #40]
  9c:	bl	c <crc32_z>
  a0:	ldp	x29, x30, [sp], #48
  a4:	ret

00000000000000a8 <crc32_little>:
  a8:	stp	x19, x20, [sp, #-48]!
  ac:	str	x0, [sp, #40]
  b0:	str	x1, [sp, #32]
  b4:	str	x2, [sp, #24]
  b8:	ldr	x0, [sp, #40]
  bc:	mov	w19, w0
  c0:	mvn	w19, w19
  c4:	b	104 <crc32_little+0x5c>
  c8:	ldr	x0, [sp, #32]
  cc:	add	x1, x0, #0x1
  d0:	str	x1, [sp, #32]
  d4:	ldrb	w0, [x0]
  d8:	eor	w0, w19, w0
  dc:	and	w1, w0, #0xff
  e0:	adrp	x0, 0 <get_crc_table>
  e4:	add	x0, x0, #0x0
  e8:	mov	w1, w1
  ec:	ldr	w1, [x0, x1, lsl #2]
  f0:	lsr	w0, w19, #8
  f4:	eor	w19, w1, w0
  f8:	ldr	x0, [sp, #24]
  fc:	sub	x0, x0, #0x1
 100:	str	x0, [sp, #24]
 104:	ldr	x0, [sp, #24]
 108:	cmp	x0, #0x0
 10c:	b.eq	120 <crc32_little+0x78>  // b.none
 110:	ldr	x0, [sp, #32]
 114:	and	x0, x0, #0x3
 118:	cmp	x0, #0x0
 11c:	b.ne	c8 <crc32_little+0x20>  // b.any
 120:	ldr	x20, [sp, #32]
 124:	b	534 <crc32_little+0x48c>
 128:	mov	x0, x20
 12c:	add	x20, x0, #0x4
 130:	ldr	w0, [x0]
 134:	eor	w19, w19, w0
 138:	and	w1, w19, #0xff
 13c:	adrp	x0, 0 <get_crc_table>
 140:	add	x0, x0, #0x0
 144:	mov	w1, w1
 148:	add	x1, x1, #0x300
 14c:	ldr	w1, [x0, x1, lsl #2]
 150:	lsr	w0, w19, #8
 154:	and	w2, w0, #0xff
 158:	adrp	x0, 0 <get_crc_table>
 15c:	add	x0, x0, #0x0
 160:	mov	w2, w2
 164:	add	x2, x2, #0x200
 168:	ldr	w0, [x0, x2, lsl #2]
 16c:	eor	w1, w1, w0
 170:	lsr	w0, w19, #16
 174:	and	w2, w0, #0xff
 178:	adrp	x0, 0 <get_crc_table>
 17c:	add	x0, x0, #0x0
 180:	mov	w2, w2
 184:	add	x2, x2, #0x100
 188:	ldr	w0, [x0, x2, lsl #2]
 18c:	eor	w1, w1, w0
 190:	lsr	w2, w19, #24
 194:	adrp	x0, 0 <get_crc_table>
 198:	add	x0, x0, #0x0
 19c:	mov	w2, w2
 1a0:	ldr	w0, [x0, x2, lsl #2]
 1a4:	eor	w19, w1, w0
 1a8:	mov	x0, x20
 1ac:	add	x20, x0, #0x4
 1b0:	ldr	w0, [x0]
 1b4:	eor	w19, w19, w0
 1b8:	and	w1, w19, #0xff
 1bc:	adrp	x0, 0 <get_crc_table>
 1c0:	add	x0, x0, #0x0
 1c4:	mov	w1, w1
 1c8:	add	x1, x1, #0x300
 1cc:	ldr	w1, [x0, x1, lsl #2]
 1d0:	lsr	w0, w19, #8
 1d4:	and	w2, w0, #0xff
 1d8:	adrp	x0, 0 <get_crc_table>
 1dc:	add	x0, x0, #0x0
 1e0:	mov	w2, w2
 1e4:	add	x2, x2, #0x200
 1e8:	ldr	w0, [x0, x2, lsl #2]
 1ec:	eor	w1, w1, w0
 1f0:	lsr	w0, w19, #16
 1f4:	and	w2, w0, #0xff
 1f8:	adrp	x0, 0 <get_crc_table>
 1fc:	add	x0, x0, #0x0
 200:	mov	w2, w2
 204:	add	x2, x2, #0x100
 208:	ldr	w0, [x0, x2, lsl #2]
 20c:	eor	w1, w1, w0
 210:	lsr	w2, w19, #24
 214:	adrp	x0, 0 <get_crc_table>
 218:	add	x0, x0, #0x0
 21c:	mov	w2, w2
 220:	ldr	w0, [x0, x2, lsl #2]
 224:	eor	w19, w1, w0
 228:	mov	x0, x20
 22c:	add	x20, x0, #0x4
 230:	ldr	w0, [x0]
 234:	eor	w19, w19, w0
 238:	and	w1, w19, #0xff
 23c:	adrp	x0, 0 <get_crc_table>
 240:	add	x0, x0, #0x0
 244:	mov	w1, w1
 248:	add	x1, x1, #0x300
 24c:	ldr	w1, [x0, x1, lsl #2]
 250:	lsr	w0, w19, #8
 254:	and	w2, w0, #0xff
 258:	adrp	x0, 0 <get_crc_table>
 25c:	add	x0, x0, #0x0
 260:	mov	w2, w2
 264:	add	x2, x2, #0x200
 268:	ldr	w0, [x0, x2, lsl #2]
 26c:	eor	w1, w1, w0
 270:	lsr	w0, w19, #16
 274:	and	w2, w0, #0xff
 278:	adrp	x0, 0 <get_crc_table>
 27c:	add	x0, x0, #0x0
 280:	mov	w2, w2
 284:	add	x2, x2, #0x100
 288:	ldr	w0, [x0, x2, lsl #2]
 28c:	eor	w1, w1, w0
 290:	lsr	w2, w19, #24
 294:	adrp	x0, 0 <get_crc_table>
 298:	add	x0, x0, #0x0
 29c:	mov	w2, w2
 2a0:	ldr	w0, [x0, x2, lsl #2]
 2a4:	eor	w19, w1, w0
 2a8:	mov	x0, x20
 2ac:	add	x20, x0, #0x4
 2b0:	ldr	w0, [x0]
 2b4:	eor	w19, w19, w0
 2b8:	and	w1, w19, #0xff
 2bc:	adrp	x0, 0 <get_crc_table>
 2c0:	add	x0, x0, #0x0
 2c4:	mov	w1, w1
 2c8:	add	x1, x1, #0x300
 2cc:	ldr	w1, [x0, x1, lsl #2]
 2d0:	lsr	w0, w19, #8
 2d4:	and	w2, w0, #0xff
 2d8:	adrp	x0, 0 <get_crc_table>
 2dc:	add	x0, x0, #0x0
 2e0:	mov	w2, w2
 2e4:	add	x2, x2, #0x200
 2e8:	ldr	w0, [x0, x2, lsl #2]
 2ec:	eor	w1, w1, w0
 2f0:	lsr	w0, w19, #16
 2f4:	and	w2, w0, #0xff
 2f8:	adrp	x0, 0 <get_crc_table>
 2fc:	add	x0, x0, #0x0
 300:	mov	w2, w2
 304:	add	x2, x2, #0x100
 308:	ldr	w0, [x0, x2, lsl #2]
 30c:	eor	w1, w1, w0
 310:	lsr	w2, w19, #24
 314:	adrp	x0, 0 <get_crc_table>
 318:	add	x0, x0, #0x0
 31c:	mov	w2, w2
 320:	ldr	w0, [x0, x2, lsl #2]
 324:	eor	w19, w1, w0
 328:	mov	x0, x20
 32c:	add	x20, x0, #0x4
 330:	ldr	w0, [x0]
 334:	eor	w19, w19, w0
 338:	and	w1, w19, #0xff
 33c:	adrp	x0, 0 <get_crc_table>
 340:	add	x0, x0, #0x0
 344:	mov	w1, w1
 348:	add	x1, x1, #0x300
 34c:	ldr	w1, [x0, x1, lsl #2]
 350:	lsr	w0, w19, #8
 354:	and	w2, w0, #0xff
 358:	adrp	x0, 0 <get_crc_table>
 35c:	add	x0, x0, #0x0
 360:	mov	w2, w2
 364:	add	x2, x2, #0x200
 368:	ldr	w0, [x0, x2, lsl #2]
 36c:	eor	w1, w1, w0
 370:	lsr	w0, w19, #16
 374:	and	w2, w0, #0xff
 378:	adrp	x0, 0 <get_crc_table>
 37c:	add	x0, x0, #0x0
 380:	mov	w2, w2
 384:	add	x2, x2, #0x100
 388:	ldr	w0, [x0, x2, lsl #2]
 38c:	eor	w1, w1, w0
 390:	lsr	w2, w19, #24
 394:	adrp	x0, 0 <get_crc_table>
 398:	add	x0, x0, #0x0
 39c:	mov	w2, w2
 3a0:	ldr	w0, [x0, x2, lsl #2]
 3a4:	eor	w19, w1, w0
 3a8:	mov	x0, x20
 3ac:	add	x20, x0, #0x4
 3b0:	ldr	w0, [x0]
 3b4:	eor	w19, w19, w0
 3b8:	and	w1, w19, #0xff
 3bc:	adrp	x0, 0 <get_crc_table>
 3c0:	add	x0, x0, #0x0
 3c4:	mov	w1, w1
 3c8:	add	x1, x1, #0x300
 3cc:	ldr	w1, [x0, x1, lsl #2]
 3d0:	lsr	w0, w19, #8
 3d4:	and	w2, w0, #0xff
 3d8:	adrp	x0, 0 <get_crc_table>
 3dc:	add	x0, x0, #0x0
 3e0:	mov	w2, w2
 3e4:	add	x2, x2, #0x200
 3e8:	ldr	w0, [x0, x2, lsl #2]
 3ec:	eor	w1, w1, w0
 3f0:	lsr	w0, w19, #16
 3f4:	and	w2, w0, #0xff
 3f8:	adrp	x0, 0 <get_crc_table>
 3fc:	add	x0, x0, #0x0
 400:	mov	w2, w2
 404:	add	x2, x2, #0x100
 408:	ldr	w0, [x0, x2, lsl #2]
 40c:	eor	w1, w1, w0
 410:	lsr	w2, w19, #24
 414:	adrp	x0, 0 <get_crc_table>
 418:	add	x0, x0, #0x0
 41c:	mov	w2, w2
 420:	ldr	w0, [x0, x2, lsl #2]
 424:	eor	w19, w1, w0
 428:	mov	x0, x20
 42c:	add	x20, x0, #0x4
 430:	ldr	w0, [x0]
 434:	eor	w19, w19, w0
 438:	and	w1, w19, #0xff
 43c:	adrp	x0, 0 <get_crc_table>
 440:	add	x0, x0, #0x0
 444:	mov	w1, w1
 448:	add	x1, x1, #0x300
 44c:	ldr	w1, [x0, x1, lsl #2]
 450:	lsr	w0, w19, #8
 454:	and	w2, w0, #0xff
 458:	adrp	x0, 0 <get_crc_table>
 45c:	add	x0, x0, #0x0
 460:	mov	w2, w2
 464:	add	x2, x2, #0x200
 468:	ldr	w0, [x0, x2, lsl #2]
 46c:	eor	w1, w1, w0
 470:	lsr	w0, w19, #16
 474:	and	w2, w0, #0xff
 478:	adrp	x0, 0 <get_crc_table>
 47c:	add	x0, x0, #0x0
 480:	mov	w2, w2
 484:	add	x2, x2, #0x100
 488:	ldr	w0, [x0, x2, lsl #2]
 48c:	eor	w1, w1, w0
 490:	lsr	w2, w19, #24
 494:	adrp	x0, 0 <get_crc_table>
 498:	add	x0, x0, #0x0
 49c:	mov	w2, w2
 4a0:	ldr	w0, [x0, x2, lsl #2]
 4a4:	eor	w19, w1, w0
 4a8:	mov	x0, x20
 4ac:	add	x20, x0, #0x4
 4b0:	ldr	w0, [x0]
 4b4:	eor	w19, w19, w0
 4b8:	and	w1, w19, #0xff
 4bc:	adrp	x0, 0 <get_crc_table>
 4c0:	add	x0, x0, #0x0
 4c4:	mov	w1, w1
 4c8:	add	x1, x1, #0x300
 4cc:	ldr	w1, [x0, x1, lsl #2]
 4d0:	lsr	w0, w19, #8
 4d4:	and	w2, w0, #0xff
 4d8:	adrp	x0, 0 <get_crc_table>
 4dc:	add	x0, x0, #0x0
 4e0:	mov	w2, w2
 4e4:	add	x2, x2, #0x200
 4e8:	ldr	w0, [x0, x2, lsl #2]
 4ec:	eor	w1, w1, w0
 4f0:	lsr	w0, w19, #16
 4f4:	and	w2, w0, #0xff
 4f8:	adrp	x0, 0 <get_crc_table>
 4fc:	add	x0, x0, #0x0
 500:	mov	w2, w2
 504:	add	x2, x2, #0x100
 508:	ldr	w0, [x0, x2, lsl #2]
 50c:	eor	w1, w1, w0
 510:	lsr	w2, w19, #24
 514:	adrp	x0, 0 <get_crc_table>
 518:	add	x0, x0, #0x0
 51c:	mov	w2, w2
 520:	ldr	w0, [x0, x2, lsl #2]
 524:	eor	w19, w1, w0
 528:	ldr	x0, [sp, #24]
 52c:	sub	x0, x0, #0x20
 530:	str	x0, [sp, #24]
 534:	ldr	x0, [sp, #24]
 538:	cmp	x0, #0x1f
 53c:	b.hi	128 <crc32_little+0x80>  // b.pmore
 540:	b	5d0 <crc32_little+0x528>
 544:	mov	x0, x20
 548:	add	x20, x0, #0x4
 54c:	ldr	w0, [x0]
 550:	eor	w19, w19, w0
 554:	and	w1, w19, #0xff
 558:	adrp	x0, 0 <get_crc_table>
 55c:	add	x0, x0, #0x0
 560:	mov	w1, w1
 564:	add	x1, x1, #0x300
 568:	ldr	w1, [x0, x1, lsl #2]
 56c:	lsr	w0, w19, #8
 570:	and	w2, w0, #0xff
 574:	adrp	x0, 0 <get_crc_table>
 578:	add	x0, x0, #0x0
 57c:	mov	w2, w2
 580:	add	x2, x2, #0x200
 584:	ldr	w0, [x0, x2, lsl #2]
 588:	eor	w1, w1, w0
 58c:	lsr	w0, w19, #16
 590:	and	w2, w0, #0xff
 594:	adrp	x0, 0 <get_crc_table>
 598:	add	x0, x0, #0x0
 59c:	mov	w2, w2
 5a0:	add	x2, x2, #0x100
 5a4:	ldr	w0, [x0, x2, lsl #2]
 5a8:	eor	w1, w1, w0
 5ac:	lsr	w2, w19, #24
 5b0:	adrp	x0, 0 <get_crc_table>
 5b4:	add	x0, x0, #0x0
 5b8:	mov	w2, w2
 5bc:	ldr	w0, [x0, x2, lsl #2]
 5c0:	eor	w19, w1, w0
 5c4:	ldr	x0, [sp, #24]
 5c8:	sub	x0, x0, #0x4
 5cc:	str	x0, [sp, #24]
 5d0:	ldr	x0, [sp, #24]
 5d4:	cmp	x0, #0x3
 5d8:	b.hi	544 <crc32_little+0x49c>  // b.pmore
 5dc:	str	x20, [sp, #32]
 5e0:	ldr	x0, [sp, #24]
 5e4:	cmp	x0, #0x0
 5e8:	b.eq	634 <crc32_little+0x58c>  // b.none
 5ec:	ldr	x0, [sp, #32]
 5f0:	add	x1, x0, #0x1
 5f4:	str	x1, [sp, #32]
 5f8:	ldrb	w0, [x0]
 5fc:	eor	w0, w19, w0
 600:	and	w1, w0, #0xff
 604:	adrp	x0, 0 <get_crc_table>
 608:	add	x0, x0, #0x0
 60c:	mov	w1, w1
 610:	ldr	w1, [x0, x1, lsl #2]
 614:	lsr	w0, w19, #8
 618:	eor	w19, w1, w0
 61c:	ldr	x0, [sp, #24]
 620:	sub	x0, x0, #0x1
 624:	str	x0, [sp, #24]
 628:	ldr	x0, [sp, #24]
 62c:	cmp	x0, #0x0
 630:	b.ne	5ec <crc32_little+0x544>  // b.any
 634:	mvn	w19, w19
 638:	mov	w0, w19
 63c:	ldp	x19, x20, [sp], #48
 640:	ret

0000000000000644 <crc32_big>:
 644:	stp	x19, x20, [sp, #-48]!
 648:	str	x0, [sp, #40]
 64c:	str	x1, [sp, #32]
 650:	str	x2, [sp, #24]
 654:	ldr	x0, [sp, #40]
 658:	lsr	w1, w0, #24
 65c:	ldr	x0, [sp, #40]
 660:	lsr	w0, w0, #8
 664:	and	w0, w0, #0xff00
 668:	add	w1, w1, w0
 66c:	ldr	x0, [sp, #40]
 670:	lsl	w0, w0, #8
 674:	and	w0, w0, #0xff0000
 678:	add	w1, w1, w0
 67c:	ldr	x0, [sp, #40]
 680:	lsl	w0, w0, #24
 684:	add	w19, w1, w0
 688:	mvn	w19, w19
 68c:	b	6d0 <crc32_big+0x8c>
 690:	lsr	w1, w19, #24
 694:	ldr	x0, [sp, #32]
 698:	add	x2, x0, #0x1
 69c:	str	x2, [sp, #32]
 6a0:	ldrb	w0, [x0]
 6a4:	eor	w1, w1, w0
 6a8:	adrp	x0, 0 <get_crc_table>
 6ac:	add	x0, x0, #0x0
 6b0:	mov	w1, w1
 6b4:	add	x1, x1, #0x400
 6b8:	ldr	w1, [x0, x1, lsl #2]
 6bc:	lsl	w0, w19, #8
 6c0:	eor	w19, w1, w0
 6c4:	ldr	x0, [sp, #24]
 6c8:	sub	x0, x0, #0x1
 6cc:	str	x0, [sp, #24]
 6d0:	ldr	x0, [sp, #24]
 6d4:	cmp	x0, #0x0
 6d8:	b.eq	6ec <crc32_big+0xa8>  // b.none
 6dc:	ldr	x0, [sp, #32]
 6e0:	and	x0, x0, #0x3
 6e4:	cmp	x0, #0x0
 6e8:	b.ne	690 <crc32_big+0x4c>  // b.any
 6ec:	ldr	x20, [sp, #32]
 6f0:	b	b20 <crc32_big+0x4dc>
 6f4:	mov	x0, x20
 6f8:	add	x20, x0, #0x4
 6fc:	ldr	w0, [x0]
 700:	eor	w19, w19, w0
 704:	and	w1, w19, #0xff
 708:	adrp	x0, 0 <get_crc_table>
 70c:	add	x0, x0, #0x0
 710:	mov	w1, w1
 714:	add	x1, x1, #0x400
 718:	ldr	w1, [x0, x1, lsl #2]
 71c:	lsr	w0, w19, #8
 720:	and	w2, w0, #0xff
 724:	adrp	x0, 0 <get_crc_table>
 728:	add	x0, x0, #0x0
 72c:	mov	w2, w2
 730:	add	x2, x2, #0x500
 734:	ldr	w0, [x0, x2, lsl #2]
 738:	eor	w1, w1, w0
 73c:	lsr	w0, w19, #16
 740:	and	w2, w0, #0xff
 744:	adrp	x0, 0 <get_crc_table>
 748:	add	x0, x0, #0x0
 74c:	mov	w2, w2
 750:	add	x2, x2, #0x600
 754:	ldr	w0, [x0, x2, lsl #2]
 758:	eor	w1, w1, w0
 75c:	lsr	w2, w19, #24
 760:	adrp	x0, 0 <get_crc_table>
 764:	add	x0, x0, #0x0
 768:	mov	w2, w2
 76c:	add	x2, x2, #0x700
 770:	ldr	w0, [x0, x2, lsl #2]
 774:	eor	w19, w1, w0
 778:	mov	x0, x20
 77c:	add	x20, x0, #0x4
 780:	ldr	w0, [x0]
 784:	eor	w19, w19, w0
 788:	and	w1, w19, #0xff
 78c:	adrp	x0, 0 <get_crc_table>
 790:	add	x0, x0, #0x0
 794:	mov	w1, w1
 798:	add	x1, x1, #0x400
 79c:	ldr	w1, [x0, x1, lsl #2]
 7a0:	lsr	w0, w19, #8
 7a4:	and	w2, w0, #0xff
 7a8:	adrp	x0, 0 <get_crc_table>
 7ac:	add	x0, x0, #0x0
 7b0:	mov	w2, w2
 7b4:	add	x2, x2, #0x500
 7b8:	ldr	w0, [x0, x2, lsl #2]
 7bc:	eor	w1, w1, w0
 7c0:	lsr	w0, w19, #16
 7c4:	and	w2, w0, #0xff
 7c8:	adrp	x0, 0 <get_crc_table>
 7cc:	add	x0, x0, #0x0
 7d0:	mov	w2, w2
 7d4:	add	x2, x2, #0x600
 7d8:	ldr	w0, [x0, x2, lsl #2]
 7dc:	eor	w1, w1, w0
 7e0:	lsr	w2, w19, #24
 7e4:	adrp	x0, 0 <get_crc_table>
 7e8:	add	x0, x0, #0x0
 7ec:	mov	w2, w2
 7f0:	add	x2, x2, #0x700
 7f4:	ldr	w0, [x0, x2, lsl #2]
 7f8:	eor	w19, w1, w0
 7fc:	mov	x0, x20
 800:	add	x20, x0, #0x4
 804:	ldr	w0, [x0]
 808:	eor	w19, w19, w0
 80c:	and	w1, w19, #0xff
 810:	adrp	x0, 0 <get_crc_table>
 814:	add	x0, x0, #0x0
 818:	mov	w1, w1
 81c:	add	x1, x1, #0x400
 820:	ldr	w1, [x0, x1, lsl #2]
 824:	lsr	w0, w19, #8
 828:	and	w2, w0, #0xff
 82c:	adrp	x0, 0 <get_crc_table>
 830:	add	x0, x0, #0x0
 834:	mov	w2, w2
 838:	add	x2, x2, #0x500
 83c:	ldr	w0, [x0, x2, lsl #2]
 840:	eor	w1, w1, w0
 844:	lsr	w0, w19, #16
 848:	and	w2, w0, #0xff
 84c:	adrp	x0, 0 <get_crc_table>
 850:	add	x0, x0, #0x0
 854:	mov	w2, w2
 858:	add	x2, x2, #0x600
 85c:	ldr	w0, [x0, x2, lsl #2]
 860:	eor	w1, w1, w0
 864:	lsr	w2, w19, #24
 868:	adrp	x0, 0 <get_crc_table>
 86c:	add	x0, x0, #0x0
 870:	mov	w2, w2
 874:	add	x2, x2, #0x700
 878:	ldr	w0, [x0, x2, lsl #2]
 87c:	eor	w19, w1, w0
 880:	mov	x0, x20
 884:	add	x20, x0, #0x4
 888:	ldr	w0, [x0]
 88c:	eor	w19, w19, w0
 890:	and	w1, w19, #0xff
 894:	adrp	x0, 0 <get_crc_table>
 898:	add	x0, x0, #0x0
 89c:	mov	w1, w1
 8a0:	add	x1, x1, #0x400
 8a4:	ldr	w1, [x0, x1, lsl #2]
 8a8:	lsr	w0, w19, #8
 8ac:	and	w2, w0, #0xff
 8b0:	adrp	x0, 0 <get_crc_table>
 8b4:	add	x0, x0, #0x0
 8b8:	mov	w2, w2
 8bc:	add	x2, x2, #0x500
 8c0:	ldr	w0, [x0, x2, lsl #2]
 8c4:	eor	w1, w1, w0
 8c8:	lsr	w0, w19, #16
 8cc:	and	w2, w0, #0xff
 8d0:	adrp	x0, 0 <get_crc_table>
 8d4:	add	x0, x0, #0x0
 8d8:	mov	w2, w2
 8dc:	add	x2, x2, #0x600
 8e0:	ldr	w0, [x0, x2, lsl #2]
 8e4:	eor	w1, w1, w0
 8e8:	lsr	w2, w19, #24
 8ec:	adrp	x0, 0 <get_crc_table>
 8f0:	add	x0, x0, #0x0
 8f4:	mov	w2, w2
 8f8:	add	x2, x2, #0x700
 8fc:	ldr	w0, [x0, x2, lsl #2]
 900:	eor	w19, w1, w0
 904:	mov	x0, x20
 908:	add	x20, x0, #0x4
 90c:	ldr	w0, [x0]
 910:	eor	w19, w19, w0
 914:	and	w1, w19, #0xff
 918:	adrp	x0, 0 <get_crc_table>
 91c:	add	x0, x0, #0x0
 920:	mov	w1, w1
 924:	add	x1, x1, #0x400
 928:	ldr	w1, [x0, x1, lsl #2]
 92c:	lsr	w0, w19, #8
 930:	and	w2, w0, #0xff
 934:	adrp	x0, 0 <get_crc_table>
 938:	add	x0, x0, #0x0
 93c:	mov	w2, w2
 940:	add	x2, x2, #0x500
 944:	ldr	w0, [x0, x2, lsl #2]
 948:	eor	w1, w1, w0
 94c:	lsr	w0, w19, #16
 950:	and	w2, w0, #0xff
 954:	adrp	x0, 0 <get_crc_table>
 958:	add	x0, x0, #0x0
 95c:	mov	w2, w2
 960:	add	x2, x2, #0x600
 964:	ldr	w0, [x0, x2, lsl #2]
 968:	eor	w1, w1, w0
 96c:	lsr	w2, w19, #24
 970:	adrp	x0, 0 <get_crc_table>
 974:	add	x0, x0, #0x0
 978:	mov	w2, w2
 97c:	add	x2, x2, #0x700
 980:	ldr	w0, [x0, x2, lsl #2]
 984:	eor	w19, w1, w0
 988:	mov	x0, x20
 98c:	add	x20, x0, #0x4
 990:	ldr	w0, [x0]
 994:	eor	w19, w19, w0
 998:	and	w1, w19, #0xff
 99c:	adrp	x0, 0 <get_crc_table>
 9a0:	add	x0, x0, #0x0
 9a4:	mov	w1, w1
 9a8:	add	x1, x1, #0x400
 9ac:	ldr	w1, [x0, x1, lsl #2]
 9b0:	lsr	w0, w19, #8
 9b4:	and	w2, w0, #0xff
 9b8:	adrp	x0, 0 <get_crc_table>
 9bc:	add	x0, x0, #0x0
 9c0:	mov	w2, w2
 9c4:	add	x2, x2, #0x500
 9c8:	ldr	w0, [x0, x2, lsl #2]
 9cc:	eor	w1, w1, w0
 9d0:	lsr	w0, w19, #16
 9d4:	and	w2, w0, #0xff
 9d8:	adrp	x0, 0 <get_crc_table>
 9dc:	add	x0, x0, #0x0
 9e0:	mov	w2, w2
 9e4:	add	x2, x2, #0x600
 9e8:	ldr	w0, [x0, x2, lsl #2]
 9ec:	eor	w1, w1, w0
 9f0:	lsr	w2, w19, #24
 9f4:	adrp	x0, 0 <get_crc_table>
 9f8:	add	x0, x0, #0x0
 9fc:	mov	w2, w2
 a00:	add	x2, x2, #0x700
 a04:	ldr	w0, [x0, x2, lsl #2]
 a08:	eor	w19, w1, w0
 a0c:	mov	x0, x20
 a10:	add	x20, x0, #0x4
 a14:	ldr	w0, [x0]
 a18:	eor	w19, w19, w0
 a1c:	and	w1, w19, #0xff
 a20:	adrp	x0, 0 <get_crc_table>
 a24:	add	x0, x0, #0x0
 a28:	mov	w1, w1
 a2c:	add	x1, x1, #0x400
 a30:	ldr	w1, [x0, x1, lsl #2]
 a34:	lsr	w0, w19, #8
 a38:	and	w2, w0, #0xff
 a3c:	adrp	x0, 0 <get_crc_table>
 a40:	add	x0, x0, #0x0
 a44:	mov	w2, w2
 a48:	add	x2, x2, #0x500
 a4c:	ldr	w0, [x0, x2, lsl #2]
 a50:	eor	w1, w1, w0
 a54:	lsr	w0, w19, #16
 a58:	and	w2, w0, #0xff
 a5c:	adrp	x0, 0 <get_crc_table>
 a60:	add	x0, x0, #0x0
 a64:	mov	w2, w2
 a68:	add	x2, x2, #0x600
 a6c:	ldr	w0, [x0, x2, lsl #2]
 a70:	eor	w1, w1, w0
 a74:	lsr	w2, w19, #24
 a78:	adrp	x0, 0 <get_crc_table>
 a7c:	add	x0, x0, #0x0
 a80:	mov	w2, w2
 a84:	add	x2, x2, #0x700
 a88:	ldr	w0, [x0, x2, lsl #2]
 a8c:	eor	w19, w1, w0
 a90:	mov	x0, x20
 a94:	add	x20, x0, #0x4
 a98:	ldr	w0, [x0]
 a9c:	eor	w19, w19, w0
 aa0:	and	w1, w19, #0xff
 aa4:	adrp	x0, 0 <get_crc_table>
 aa8:	add	x0, x0, #0x0
 aac:	mov	w1, w1
 ab0:	add	x1, x1, #0x400
 ab4:	ldr	w1, [x0, x1, lsl #2]
 ab8:	lsr	w0, w19, #8
 abc:	and	w2, w0, #0xff
 ac0:	adrp	x0, 0 <get_crc_table>
 ac4:	add	x0, x0, #0x0
 ac8:	mov	w2, w2
 acc:	add	x2, x2, #0x500
 ad0:	ldr	w0, [x0, x2, lsl #2]
 ad4:	eor	w1, w1, w0
 ad8:	lsr	w0, w19, #16
 adc:	and	w2, w0, #0xff
 ae0:	adrp	x0, 0 <get_crc_table>
 ae4:	add	x0, x0, #0x0
 ae8:	mov	w2, w2
 aec:	add	x2, x2, #0x600
 af0:	ldr	w0, [x0, x2, lsl #2]
 af4:	eor	w1, w1, w0
 af8:	lsr	w2, w19, #24
 afc:	adrp	x0, 0 <get_crc_table>
 b00:	add	x0, x0, #0x0
 b04:	mov	w2, w2
 b08:	add	x2, x2, #0x700
 b0c:	ldr	w0, [x0, x2, lsl #2]
 b10:	eor	w19, w1, w0
 b14:	ldr	x0, [sp, #24]
 b18:	sub	x0, x0, #0x20
 b1c:	str	x0, [sp, #24]
 b20:	ldr	x0, [sp, #24]
 b24:	cmp	x0, #0x1f
 b28:	b.hi	6f4 <crc32_big+0xb0>  // b.pmore
 b2c:	b	bc0 <crc32_big+0x57c>
 b30:	mov	x0, x20
 b34:	add	x20, x0, #0x4
 b38:	ldr	w0, [x0]
 b3c:	eor	w19, w19, w0
 b40:	and	w1, w19, #0xff
 b44:	adrp	x0, 0 <get_crc_table>
 b48:	add	x0, x0, #0x0
 b4c:	mov	w1, w1
 b50:	add	x1, x1, #0x400
 b54:	ldr	w1, [x0, x1, lsl #2]
 b58:	lsr	w0, w19, #8
 b5c:	and	w2, w0, #0xff
 b60:	adrp	x0, 0 <get_crc_table>
 b64:	add	x0, x0, #0x0
 b68:	mov	w2, w2
 b6c:	add	x2, x2, #0x500
 b70:	ldr	w0, [x0, x2, lsl #2]
 b74:	eor	w1, w1, w0
 b78:	lsr	w0, w19, #16
 b7c:	and	w2, w0, #0xff
 b80:	adrp	x0, 0 <get_crc_table>
 b84:	add	x0, x0, #0x0
 b88:	mov	w2, w2
 b8c:	add	x2, x2, #0x600
 b90:	ldr	w0, [x0, x2, lsl #2]
 b94:	eor	w1, w1, w0
 b98:	lsr	w2, w19, #24
 b9c:	adrp	x0, 0 <get_crc_table>
 ba0:	add	x0, x0, #0x0
 ba4:	mov	w2, w2
 ba8:	add	x2, x2, #0x700
 bac:	ldr	w0, [x0, x2, lsl #2]
 bb0:	eor	w19, w1, w0
 bb4:	ldr	x0, [sp, #24]
 bb8:	sub	x0, x0, #0x4
 bbc:	str	x0, [sp, #24]
 bc0:	ldr	x0, [sp, #24]
 bc4:	cmp	x0, #0x3
 bc8:	b.hi	b30 <crc32_big+0x4ec>  // b.pmore
 bcc:	str	x20, [sp, #32]
 bd0:	ldr	x0, [sp, #24]
 bd4:	cmp	x0, #0x0
 bd8:	b.eq	c28 <crc32_big+0x5e4>  // b.none
 bdc:	lsr	w1, w19, #24
 be0:	ldr	x0, [sp, #32]
 be4:	add	x2, x0, #0x1
 be8:	str	x2, [sp, #32]
 bec:	ldrb	w0, [x0]
 bf0:	eor	w1, w1, w0
 bf4:	adrp	x0, 0 <get_crc_table>
 bf8:	add	x0, x0, #0x0
 bfc:	mov	w1, w1
 c00:	add	x1, x1, #0x400
 c04:	ldr	w1, [x0, x1, lsl #2]
 c08:	lsl	w0, w19, #8
 c0c:	eor	w19, w1, w0
 c10:	ldr	x0, [sp, #24]
 c14:	sub	x0, x0, #0x1
 c18:	str	x0, [sp, #24]
 c1c:	ldr	x0, [sp, #24]
 c20:	cmp	x0, #0x0
 c24:	b.ne	bdc <crc32_big+0x598>  // b.any
 c28:	mvn	w19, w19
 c2c:	lsr	w1, w19, #24
 c30:	lsr	w0, w19, #8
 c34:	and	w0, w0, #0xff00
 c38:	add	w1, w1, w0
 c3c:	lsl	w0, w19, #8
 c40:	and	w0, w0, #0xff0000
 c44:	add	w1, w1, w0
 c48:	lsl	w0, w19, #24
 c4c:	add	w0, w1, w0
 c50:	mov	w0, w0
 c54:	ldp	x19, x20, [sp], #48
 c58:	ret

0000000000000c5c <gf2_matrix_times>:
 c5c:	sub	sp, sp, #0x20
 c60:	str	x0, [sp, #8]
 c64:	str	x1, [sp]
 c68:	str	xzr, [sp, #24]
 c6c:	b	cac <gf2_matrix_times+0x50>
 c70:	ldr	x0, [sp]
 c74:	and	x0, x0, #0x1
 c78:	cmp	x0, #0x0
 c7c:	b.eq	c94 <gf2_matrix_times+0x38>  // b.none
 c80:	ldr	x0, [sp, #8]
 c84:	ldr	x0, [x0]
 c88:	ldr	x1, [sp, #24]
 c8c:	eor	x0, x1, x0
 c90:	str	x0, [sp, #24]
 c94:	ldr	x0, [sp]
 c98:	lsr	x0, x0, #1
 c9c:	str	x0, [sp]
 ca0:	ldr	x0, [sp, #8]
 ca4:	add	x0, x0, #0x8
 ca8:	str	x0, [sp, #8]
 cac:	ldr	x0, [sp]
 cb0:	cmp	x0, #0x0
 cb4:	b.ne	c70 <gf2_matrix_times+0x14>  // b.any
 cb8:	ldr	x0, [sp, #24]
 cbc:	add	sp, sp, #0x20
 cc0:	ret

0000000000000cc4 <gf2_matrix_square>:
 cc4:	stp	x29, x30, [sp, #-64]!
 cc8:	mov	x29, sp
 ccc:	str	x19, [sp, #16]
 cd0:	str	x0, [sp, #40]
 cd4:	str	x1, [sp, #32]
 cd8:	str	wzr, [sp, #60]
 cdc:	b	d20 <gf2_matrix_square+0x5c>
 ce0:	ldrsw	x0, [sp, #60]
 ce4:	lsl	x0, x0, #3
 ce8:	ldr	x1, [sp, #32]
 cec:	add	x0, x1, x0
 cf0:	ldr	x2, [x0]
 cf4:	ldrsw	x0, [sp, #60]
 cf8:	lsl	x0, x0, #3
 cfc:	ldr	x1, [sp, #40]
 d00:	add	x19, x1, x0
 d04:	mov	x1, x2
 d08:	ldr	x0, [sp, #32]
 d0c:	bl	c5c <gf2_matrix_times>
 d10:	str	x0, [x19]
 d14:	ldr	w0, [sp, #60]
 d18:	add	w0, w0, #0x1
 d1c:	str	w0, [sp, #60]
 d20:	ldr	w0, [sp, #60]
 d24:	cmp	w0, #0x1f
 d28:	b.le	ce0 <gf2_matrix_square+0x1c>
 d2c:	nop
 d30:	nop
 d34:	ldr	x19, [sp, #16]
 d38:	ldp	x29, x30, [sp], #64
 d3c:	ret

0000000000000d40 <crc32_combine_>:
 d40:	sub	sp, sp, #0x240
 d44:	stp	x29, x30, [sp]
 d48:	mov	x29, sp
 d4c:	str	x0, [sp, #40]
 d50:	str	x1, [sp, #32]
 d54:	str	x2, [sp, #24]
 d58:	ldr	x0, [sp, #24]
 d5c:	cmp	x0, #0x0
 d60:	b.gt	d6c <crc32_combine_+0x2c>
 d64:	ldr	x0, [sp, #40]
 d68:	b	e80 <crc32_combine_+0x140>
 d6c:	mov	x0, #0x8320                	// #33568
 d70:	movk	x0, #0xedb8, lsl #16
 d74:	str	x0, [sp, #48]
 d78:	mov	x0, #0x1                   	// #1
 d7c:	str	x0, [sp, #560]
 d80:	mov	w0, #0x1                   	// #1
 d84:	str	w0, [sp, #572]
 d88:	b	db8 <crc32_combine_+0x78>
 d8c:	ldrsw	x0, [sp, #572]
 d90:	lsl	x0, x0, #3
 d94:	add	x1, sp, #0x30
 d98:	ldr	x2, [sp, #560]
 d9c:	str	x2, [x1, x0]
 da0:	ldr	x0, [sp, #560]
 da4:	lsl	x0, x0, #1
 da8:	str	x0, [sp, #560]
 dac:	ldr	w0, [sp, #572]
 db0:	add	w0, w0, #0x1
 db4:	str	w0, [sp, #572]
 db8:	ldr	w0, [sp, #572]
 dbc:	cmp	w0, #0x1f
 dc0:	b.le	d8c <crc32_combine_+0x4c>
 dc4:	add	x1, sp, #0x30
 dc8:	add	x0, sp, #0x130
 dcc:	bl	cc4 <gf2_matrix_square>
 dd0:	add	x1, sp, #0x130
 dd4:	add	x0, sp, #0x30
 dd8:	bl	cc4 <gf2_matrix_square>
 ddc:	add	x1, sp, #0x30
 de0:	add	x0, sp, #0x130
 de4:	bl	cc4 <gf2_matrix_square>
 de8:	ldr	x0, [sp, #24]
 dec:	and	x0, x0, #0x1
 df0:	cmp	x0, #0x0
 df4:	b.eq	e08 <crc32_combine_+0xc8>  // b.none
 df8:	add	x0, sp, #0x130
 dfc:	ldr	x1, [sp, #40]
 e00:	bl	c5c <gf2_matrix_times>
 e04:	str	x0, [sp, #40]
 e08:	ldr	x0, [sp, #24]
 e0c:	asr	x0, x0, #1
 e10:	str	x0, [sp, #24]
 e14:	ldr	x0, [sp, #24]
 e18:	cmp	x0, #0x0
 e1c:	b.eq	e68 <crc32_combine_+0x128>  // b.none
 e20:	add	x1, sp, #0x130
 e24:	add	x0, sp, #0x30
 e28:	bl	cc4 <gf2_matrix_square>
 e2c:	ldr	x0, [sp, #24]
 e30:	and	x0, x0, #0x1
 e34:	cmp	x0, #0x0
 e38:	b.eq	e4c <crc32_combine_+0x10c>  // b.none
 e3c:	add	x0, sp, #0x30
 e40:	ldr	x1, [sp, #40]
 e44:	bl	c5c <gf2_matrix_times>
 e48:	str	x0, [sp, #40]
 e4c:	ldr	x0, [sp, #24]
 e50:	asr	x0, x0, #1
 e54:	str	x0, [sp, #24]
 e58:	ldr	x0, [sp, #24]
 e5c:	cmp	x0, #0x0
 e60:	b.ne	ddc <crc32_combine_+0x9c>  // b.any
 e64:	b	e6c <crc32_combine_+0x12c>
 e68:	nop
 e6c:	ldr	x1, [sp, #40]
 e70:	ldr	x0, [sp, #32]
 e74:	eor	x0, x1, x0
 e78:	str	x0, [sp, #40]
 e7c:	ldr	x0, [sp, #40]
 e80:	ldp	x29, x30, [sp]
 e84:	add	sp, sp, #0x240
 e88:	ret

0000000000000e8c <crc32_combine>:
 e8c:	stp	x29, x30, [sp, #-48]!
 e90:	mov	x29, sp
 e94:	str	x0, [sp, #40]
 e98:	str	x1, [sp, #32]
 e9c:	str	x2, [sp, #24]
 ea0:	ldr	x2, [sp, #24]
 ea4:	ldr	x1, [sp, #32]
 ea8:	ldr	x0, [sp, #40]
 eac:	bl	d40 <crc32_combine_>
 eb0:	ldp	x29, x30, [sp], #48
 eb4:	ret

0000000000000eb8 <crc32_combine64>:
 eb8:	stp	x29, x30, [sp, #-48]!
 ebc:	mov	x29, sp
 ec0:	str	x0, [sp, #40]
 ec4:	str	x1, [sp, #32]
 ec8:	str	x2, [sp, #24]
 ecc:	ldr	x2, [sp, #24]
 ed0:	ldr	x1, [sp, #32]
 ed4:	ldr	x0, [sp, #40]
 ed8:	bl	d40 <crc32_combine_>
 edc:	ldp	x29, x30, [sp], #48
 ee0:	ret

deflate.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <slide_hash>:
       0:	sub	sp, sp, #0x30
       4:	str	x0, [sp, #8]
       8:	ldr	x0, [sp, #8]
       c:	ldr	w0, [x0, #80]
      10:	str	w0, [sp, #28]
      14:	ldr	x0, [sp, #8]
      18:	ldr	w0, [x0, #132]
      1c:	str	w0, [sp, #44]
      20:	ldr	x0, [sp, #8]
      24:	ldr	x1, [x0, #120]
      28:	ldr	w0, [sp, #44]
      2c:	lsl	x0, x0, #1
      30:	add	x0, x1, x0
      34:	str	x0, [sp, #32]
      38:	ldr	x0, [sp, #32]
      3c:	sub	x0, x0, #0x2
      40:	str	x0, [sp, #32]
      44:	ldr	x0, [sp, #32]
      48:	ldrh	w0, [x0]
      4c:	str	w0, [sp, #24]
      50:	ldr	w1, [sp, #24]
      54:	ldr	w0, [sp, #28]
      58:	cmp	w1, w0
      5c:	b.cc	74 <slide_hash+0x74>  // b.lo, b.ul, b.last
      60:	ldr	w1, [sp, #24]
      64:	ldr	w0, [sp, #28]
      68:	sub	w0, w1, w0
      6c:	and	w1, w0, #0xffff
      70:	b	78 <slide_hash+0x78>
      74:	mov	w1, #0x0                   	// #0
      78:	ldr	x0, [sp, #32]
      7c:	strh	w1, [x0]
      80:	ldr	w0, [sp, #44]
      84:	sub	w0, w0, #0x1
      88:	str	w0, [sp, #44]
      8c:	ldr	w0, [sp, #44]
      90:	cmp	w0, #0x0
      94:	b.ne	38 <slide_hash+0x38>  // b.any
      98:	ldr	w0, [sp, #28]
      9c:	str	w0, [sp, #44]
      a0:	ldr	x0, [sp, #8]
      a4:	ldr	x1, [x0, #112]
      a8:	ldr	w0, [sp, #44]
      ac:	lsl	x0, x0, #1
      b0:	add	x0, x1, x0
      b4:	str	x0, [sp, #32]
      b8:	ldr	x0, [sp, #32]
      bc:	sub	x0, x0, #0x2
      c0:	str	x0, [sp, #32]
      c4:	ldr	x0, [sp, #32]
      c8:	ldrh	w0, [x0]
      cc:	str	w0, [sp, #24]
      d0:	ldr	w1, [sp, #24]
      d4:	ldr	w0, [sp, #28]
      d8:	cmp	w1, w0
      dc:	b.cc	f4 <slide_hash+0xf4>  // b.lo, b.ul, b.last
      e0:	ldr	w1, [sp, #24]
      e4:	ldr	w0, [sp, #28]
      e8:	sub	w0, w1, w0
      ec:	and	w1, w0, #0xffff
      f0:	b	f8 <slide_hash+0xf8>
      f4:	mov	w1, #0x0                   	// #0
      f8:	ldr	x0, [sp, #32]
      fc:	strh	w1, [x0]
     100:	ldr	w0, [sp, #44]
     104:	sub	w0, w0, #0x1
     108:	str	w0, [sp, #44]
     10c:	ldr	w0, [sp, #44]
     110:	cmp	w0, #0x0
     114:	b.ne	b8 <slide_hash+0xb8>  // b.any
     118:	nop
     11c:	nop
     120:	add	sp, sp, #0x30
     124:	ret

0000000000000128 <deflateInit_>:
     128:	stp	x29, x30, [sp, #-48]!
     12c:	mov	x29, sp
     130:	str	x0, [sp, #40]
     134:	str	w1, [sp, #36]
     138:	str	x2, [sp, #24]
     13c:	str	w3, [sp, #32]
     140:	ldr	w7, [sp, #32]
     144:	ldr	x6, [sp, #24]
     148:	mov	w5, #0x0                   	// #0
     14c:	mov	w4, #0x8                   	// #8
     150:	mov	w3, #0xf                   	// #15
     154:	mov	w2, #0x8                   	// #8
     158:	ldr	w1, [sp, #36]
     15c:	ldr	x0, [sp, #40]
     160:	bl	16c <deflateInit2_>
     164:	ldp	x29, x30, [sp], #48
     168:	ret

000000000000016c <deflateInit2_>:
     16c:	stp	x29, x30, [sp, #-96]!
     170:	mov	x29, sp
     174:	str	x0, [sp, #56]
     178:	str	w1, [sp, #52]
     17c:	str	w2, [sp, #48]
     180:	str	w3, [sp, #44]
     184:	str	w4, [sp, #40]
     188:	str	w5, [sp, #36]
     18c:	str	x6, [sp, #24]
     190:	str	w7, [sp, #32]
     194:	mov	w0, #0x1                   	// #1
     198:	str	w0, [sp, #92]
     19c:	ldr	x0, [sp, #24]
     1a0:	cmp	x0, #0x0
     1a4:	b.eq	1d0 <deflateInit2_+0x64>  // b.none
     1a8:	ldr	x0, [sp, #24]
     1ac:	ldrb	w1, [x0]
     1b0:	adrp	x0, 0 <slide_hash>
     1b4:	add	x0, x0, #0x0
     1b8:	ldrb	w0, [x0]
     1bc:	cmp	w1, w0
     1c0:	b.ne	1d0 <deflateInit2_+0x64>  // b.any
     1c4:	ldr	w0, [sp, #32]
     1c8:	cmp	w0, #0x70
     1cc:	b.eq	1d8 <deflateInit2_+0x6c>  // b.none
     1d0:	mov	w0, #0xfffffffa            	// #-6
     1d4:	b	640 <deflateInit2_+0x4d4>
     1d8:	ldr	x0, [sp, #56]
     1dc:	cmp	x0, #0x0
     1e0:	b.ne	1ec <deflateInit2_+0x80>  // b.any
     1e4:	mov	w0, #0xfffffffe            	// #-2
     1e8:	b	640 <deflateInit2_+0x4d4>
     1ec:	ldr	x0, [sp, #56]
     1f0:	str	xzr, [x0, #48]
     1f4:	ldr	x0, [sp, #56]
     1f8:	ldr	x0, [x0, #64]
     1fc:	cmp	x0, #0x0
     200:	b.ne	21c <deflateInit2_+0xb0>  // b.any
     204:	ldr	x0, [sp, #56]
     208:	adrp	x1, 0 <zcalloc>
     20c:	add	x1, x1, #0x0
     210:	str	x1, [x0, #64]
     214:	ldr	x0, [sp, #56]
     218:	str	xzr, [x0, #80]
     21c:	ldr	x0, [sp, #56]
     220:	ldr	x0, [x0, #72]
     224:	cmp	x0, #0x0
     228:	b.ne	23c <deflateInit2_+0xd0>  // b.any
     22c:	ldr	x0, [sp, #56]
     230:	adrp	x1, 0 <zcfree>
     234:	add	x1, x1, #0x0
     238:	str	x1, [x0, #72]
     23c:	ldr	w0, [sp, #52]
     240:	cmn	w0, #0x1
     244:	b.ne	250 <deflateInit2_+0xe4>  // b.any
     248:	mov	w0, #0x6                   	// #6
     24c:	str	w0, [sp, #52]
     250:	ldr	w0, [sp, #44]
     254:	cmp	w0, #0x0
     258:	b.ge	270 <deflateInit2_+0x104>  // b.tcont
     25c:	str	wzr, [sp, #92]
     260:	ldr	w0, [sp, #44]
     264:	neg	w0, w0
     268:	str	w0, [sp, #44]
     26c:	b	290 <deflateInit2_+0x124>
     270:	ldr	w0, [sp, #44]
     274:	cmp	w0, #0xf
     278:	b.le	290 <deflateInit2_+0x124>
     27c:	mov	w0, #0x2                   	// #2
     280:	str	w0, [sp, #92]
     284:	ldr	w0, [sp, #44]
     288:	sub	w0, w0, #0x10
     28c:	str	w0, [sp, #44]
     290:	ldr	w0, [sp, #40]
     294:	cmp	w0, #0x0
     298:	b.le	314 <deflateInit2_+0x1a8>
     29c:	ldr	w0, [sp, #40]
     2a0:	cmp	w0, #0x9
     2a4:	b.gt	314 <deflateInit2_+0x1a8>
     2a8:	ldr	w0, [sp, #48]
     2ac:	cmp	w0, #0x8
     2b0:	b.ne	314 <deflateInit2_+0x1a8>  // b.any
     2b4:	ldr	w0, [sp, #44]
     2b8:	cmp	w0, #0x7
     2bc:	b.le	314 <deflateInit2_+0x1a8>
     2c0:	ldr	w0, [sp, #44]
     2c4:	cmp	w0, #0xf
     2c8:	b.gt	314 <deflateInit2_+0x1a8>
     2cc:	ldr	w0, [sp, #52]
     2d0:	cmp	w0, #0x0
     2d4:	b.lt	314 <deflateInit2_+0x1a8>  // b.tstop
     2d8:	ldr	w0, [sp, #52]
     2dc:	cmp	w0, #0x9
     2e0:	b.gt	314 <deflateInit2_+0x1a8>
     2e4:	ldr	w0, [sp, #36]
     2e8:	cmp	w0, #0x0
     2ec:	b.lt	314 <deflateInit2_+0x1a8>  // b.tstop
     2f0:	ldr	w0, [sp, #36]
     2f4:	cmp	w0, #0x4
     2f8:	b.gt	314 <deflateInit2_+0x1a8>
     2fc:	ldr	w0, [sp, #44]
     300:	cmp	w0, #0x8
     304:	b.ne	31c <deflateInit2_+0x1b0>  // b.any
     308:	ldr	w0, [sp, #92]
     30c:	cmp	w0, #0x1
     310:	b.eq	31c <deflateInit2_+0x1b0>  // b.none
     314:	mov	w0, #0xfffffffe            	// #-2
     318:	b	640 <deflateInit2_+0x4d4>
     31c:	ldr	w0, [sp, #44]
     320:	cmp	w0, #0x8
     324:	b.ne	330 <deflateInit2_+0x1c4>  // b.any
     328:	mov	w0, #0x9                   	// #9
     32c:	str	w0, [sp, #44]
     330:	ldr	x0, [sp, #56]
     334:	ldr	x3, [x0, #64]
     338:	ldr	x0, [sp, #56]
     33c:	ldr	x0, [x0, #80]
     340:	mov	w2, #0x1740                	// #5952
     344:	mov	w1, #0x1                   	// #1
     348:	blr	x3
     34c:	str	x0, [sp, #80]
     350:	ldr	x0, [sp, #80]
     354:	cmp	x0, #0x0
     358:	b.ne	364 <deflateInit2_+0x1f8>  // b.any
     35c:	mov	w0, #0xfffffffc            	// #-4
     360:	b	640 <deflateInit2_+0x4d4>
     364:	ldr	x0, [sp, #56]
     368:	ldr	x1, [sp, #80]
     36c:	str	x1, [x0, #56]
     370:	ldr	x0, [sp, #80]
     374:	ldr	x1, [sp, #56]
     378:	str	x1, [x0]
     37c:	ldr	x0, [sp, #80]
     380:	mov	w1, #0x2a                  	// #42
     384:	str	w1, [x0, #8]
     388:	ldr	x0, [sp, #80]
     38c:	ldr	w1, [sp, #92]
     390:	str	w1, [x0, #48]
     394:	ldr	x0, [sp, #80]
     398:	str	xzr, [x0, #56]
     39c:	ldr	w1, [sp, #44]
     3a0:	ldr	x0, [sp, #80]
     3a4:	str	w1, [x0, #84]
     3a8:	ldr	x0, [sp, #80]
     3ac:	ldr	w0, [x0, #84]
     3b0:	mov	w1, #0x1                   	// #1
     3b4:	lsl	w0, w1, w0
     3b8:	mov	w1, w0
     3bc:	ldr	x0, [sp, #80]
     3c0:	str	w1, [x0, #80]
     3c4:	ldr	x0, [sp, #80]
     3c8:	ldr	w0, [x0, #80]
     3cc:	sub	w1, w0, #0x1
     3d0:	ldr	x0, [sp, #80]
     3d4:	str	w1, [x0, #88]
     3d8:	ldr	w0, [sp, #40]
     3dc:	add	w1, w0, #0x7
     3e0:	ldr	x0, [sp, #80]
     3e4:	str	w1, [x0, #136]
     3e8:	ldr	x0, [sp, #80]
     3ec:	ldr	w0, [x0, #136]
     3f0:	mov	w1, #0x1                   	// #1
     3f4:	lsl	w0, w1, w0
     3f8:	mov	w1, w0
     3fc:	ldr	x0, [sp, #80]
     400:	str	w1, [x0, #132]
     404:	ldr	x0, [sp, #80]
     408:	ldr	w0, [x0, #132]
     40c:	sub	w1, w0, #0x1
     410:	ldr	x0, [sp, #80]
     414:	str	w1, [x0, #140]
     418:	ldr	x0, [sp, #80]
     41c:	ldr	w0, [x0, #136]
     420:	add	w1, w0, #0x2
     424:	mov	w0, #0xaaab                	// #43691
     428:	movk	w0, #0xaaaa, lsl #16
     42c:	umull	x0, w1, w0
     430:	lsr	x0, x0, #32
     434:	lsr	w1, w0, #1
     438:	ldr	x0, [sp, #80]
     43c:	str	w1, [x0, #144]
     440:	ldr	x0, [sp, #56]
     444:	ldr	x3, [x0, #64]
     448:	ldr	x0, [sp, #56]
     44c:	ldr	x4, [x0, #80]
     450:	ldr	x0, [sp, #80]
     454:	ldr	w0, [x0, #80]
     458:	mov	w2, #0x2                   	// #2
     45c:	mov	w1, w0
     460:	mov	x0, x4
     464:	blr	x3
     468:	mov	x1, x0
     46c:	ldr	x0, [sp, #80]
     470:	str	x1, [x0, #96]
     474:	ldr	x0, [sp, #56]
     478:	ldr	x3, [x0, #64]
     47c:	ldr	x0, [sp, #56]
     480:	ldr	x4, [x0, #80]
     484:	ldr	x0, [sp, #80]
     488:	ldr	w0, [x0, #80]
     48c:	mov	w2, #0x2                   	// #2
     490:	mov	w1, w0
     494:	mov	x0, x4
     498:	blr	x3
     49c:	mov	x1, x0
     4a0:	ldr	x0, [sp, #80]
     4a4:	str	x1, [x0, #112]
     4a8:	ldr	x0, [sp, #56]
     4ac:	ldr	x3, [x0, #64]
     4b0:	ldr	x0, [sp, #56]
     4b4:	ldr	x4, [x0, #80]
     4b8:	ldr	x0, [sp, #80]
     4bc:	ldr	w0, [x0, #132]
     4c0:	mov	w2, #0x2                   	// #2
     4c4:	mov	w1, w0
     4c8:	mov	x0, x4
     4cc:	blr	x3
     4d0:	mov	x1, x0
     4d4:	ldr	x0, [sp, #80]
     4d8:	str	x1, [x0, #120]
     4dc:	ldr	x0, [sp, #80]
     4e0:	str	xzr, [x0, #5944]
     4e4:	ldr	w0, [sp, #40]
     4e8:	add	w0, w0, #0x6
     4ec:	mov	w1, #0x1                   	// #1
     4f0:	lsl	w0, w1, w0
     4f4:	mov	w1, w0
     4f8:	ldr	x0, [sp, #80]
     4fc:	str	w1, [x0, #5896]
     500:	ldr	x0, [sp, #56]
     504:	ldr	x3, [x0, #64]
     508:	ldr	x0, [sp, #56]
     50c:	ldr	x4, [x0, #80]
     510:	ldr	x0, [sp, #80]
     514:	ldr	w0, [x0, #5896]
     518:	mov	w2, #0x4                   	// #4
     51c:	mov	w1, w0
     520:	mov	x0, x4
     524:	blr	x3
     528:	str	x0, [sp, #72]
     52c:	ldr	x0, [sp, #80]
     530:	ldr	x1, [sp, #72]
     534:	str	x1, [x0, #16]
     538:	ldr	x0, [sp, #80]
     53c:	ldr	w0, [x0, #5896]
     540:	mov	w0, w0
     544:	lsl	x1, x0, #2
     548:	ldr	x0, [sp, #80]
     54c:	str	x1, [x0, #24]
     550:	ldr	x0, [sp, #80]
     554:	ldr	x0, [x0, #96]
     558:	cmp	x0, #0x0
     55c:	b.eq	590 <deflateInit2_+0x424>  // b.none
     560:	ldr	x0, [sp, #80]
     564:	ldr	x0, [x0, #112]
     568:	cmp	x0, #0x0
     56c:	b.eq	590 <deflateInit2_+0x424>  // b.none
     570:	ldr	x0, [sp, #80]
     574:	ldr	x0, [x0, #120]
     578:	cmp	x0, #0x0
     57c:	b.eq	590 <deflateInit2_+0x424>  // b.none
     580:	ldr	x0, [sp, #80]
     584:	ldr	x0, [x0, #16]
     588:	cmp	x0, #0x0
     58c:	b.ne	5c0 <deflateInit2_+0x454>  // b.any
     590:	ldr	x0, [sp, #80]
     594:	mov	w1, #0x29a                 	// #666
     598:	str	w1, [x0, #8]
     59c:	adrp	x0, 0 <z_errmsg>
     5a0:	add	x0, x0, #0x0
     5a4:	ldr	x1, [x0, #48]
     5a8:	ldr	x0, [sp, #56]
     5ac:	str	x1, [x0, #48]
     5b0:	ldr	x0, [sp, #56]
     5b4:	bl	2a68 <deflateEnd>
     5b8:	mov	w0, #0xfffffffc            	// #-4
     5bc:	b	640 <deflateInit2_+0x4d4>
     5c0:	ldr	x0, [sp, #80]
     5c4:	ldr	w0, [x0, #5896]
     5c8:	lsr	w0, w0, #1
     5cc:	mov	w0, w0
     5d0:	lsl	x0, x0, #1
     5d4:	ldr	x1, [sp, #72]
     5d8:	add	x1, x1, x0
     5dc:	ldr	x0, [sp, #80]
     5e0:	str	x1, [x0, #5904]
     5e4:	ldr	x0, [sp, #80]
     5e8:	ldr	x2, [x0, #16]
     5ec:	ldr	x0, [sp, #80]
     5f0:	ldr	w0, [x0, #5896]
     5f4:	mov	w1, w0
     5f8:	mov	x0, x1
     5fc:	lsl	x0, x0, #1
     600:	add	x0, x0, x1
     604:	add	x1, x2, x0
     608:	ldr	x0, [sp, #80]
     60c:	str	x1, [x0, #5888]
     610:	ldr	x0, [sp, #80]
     614:	ldr	w1, [sp, #52]
     618:	str	w1, [x0, #196]
     61c:	ldr	x0, [sp, #80]
     620:	ldr	w1, [sp, #36]
     624:	str	w1, [x0, #200]
     628:	ldr	w0, [sp, #48]
     62c:	and	w1, w0, #0xff
     630:	ldr	x0, [sp, #80]
     634:	strb	w1, [x0, #72]
     638:	ldr	x0, [sp, #56]
     63c:	bl	cd8 <deflateReset>
     640:	ldp	x29, x30, [sp], #96
     644:	ret

0000000000000648 <deflateStateCheck>:
     648:	sub	sp, sp, #0x20
     64c:	str	x0, [sp, #8]
     650:	ldr	x0, [sp, #8]
     654:	cmp	x0, #0x0
     658:	b.eq	67c <deflateStateCheck+0x34>  // b.none
     65c:	ldr	x0, [sp, #8]
     660:	ldr	x0, [x0, #64]
     664:	cmp	x0, #0x0
     668:	b.eq	67c <deflateStateCheck+0x34>  // b.none
     66c:	ldr	x0, [sp, #8]
     670:	ldr	x0, [x0, #72]
     674:	cmp	x0, #0x0
     678:	b.ne	684 <deflateStateCheck+0x3c>  // b.any
     67c:	mov	w0, #0x1                   	// #1
     680:	b	73c <deflateStateCheck+0xf4>
     684:	ldr	x0, [sp, #8]
     688:	ldr	x0, [x0, #56]
     68c:	str	x0, [sp, #24]
     690:	ldr	x0, [sp, #24]
     694:	cmp	x0, #0x0
     698:	b.eq	730 <deflateStateCheck+0xe8>  // b.none
     69c:	ldr	x0, [sp, #24]
     6a0:	ldr	x0, [x0]
     6a4:	ldr	x1, [sp, #8]
     6a8:	cmp	x1, x0
     6ac:	b.ne	730 <deflateStateCheck+0xe8>  // b.any
     6b0:	ldr	x0, [sp, #24]
     6b4:	ldr	w0, [x0, #8]
     6b8:	cmp	w0, #0x2a
     6bc:	b.eq	738 <deflateStateCheck+0xf0>  // b.none
     6c0:	ldr	x0, [sp, #24]
     6c4:	ldr	w0, [x0, #8]
     6c8:	cmp	w0, #0x39
     6cc:	b.eq	738 <deflateStateCheck+0xf0>  // b.none
     6d0:	ldr	x0, [sp, #24]
     6d4:	ldr	w0, [x0, #8]
     6d8:	cmp	w0, #0x45
     6dc:	b.eq	738 <deflateStateCheck+0xf0>  // b.none
     6e0:	ldr	x0, [sp, #24]
     6e4:	ldr	w0, [x0, #8]
     6e8:	cmp	w0, #0x49
     6ec:	b.eq	738 <deflateStateCheck+0xf0>  // b.none
     6f0:	ldr	x0, [sp, #24]
     6f4:	ldr	w0, [x0, #8]
     6f8:	cmp	w0, #0x5b
     6fc:	b.eq	738 <deflateStateCheck+0xf0>  // b.none
     700:	ldr	x0, [sp, #24]
     704:	ldr	w0, [x0, #8]
     708:	cmp	w0, #0x67
     70c:	b.eq	738 <deflateStateCheck+0xf0>  // b.none
     710:	ldr	x0, [sp, #24]
     714:	ldr	w0, [x0, #8]
     718:	cmp	w0, #0x71
     71c:	b.eq	738 <deflateStateCheck+0xf0>  // b.none
     720:	ldr	x0, [sp, #24]
     724:	ldr	w0, [x0, #8]
     728:	cmp	w0, #0x29a
     72c:	b.eq	738 <deflateStateCheck+0xf0>  // b.none
     730:	mov	w0, #0x1                   	// #1
     734:	b	73c <deflateStateCheck+0xf4>
     738:	mov	w0, #0x0                   	// #0
     73c:	add	sp, sp, #0x20
     740:	ret

0000000000000744 <deflateSetDictionary>:
     744:	stp	x29, x30, [sp, #-80]!
     748:	mov	x29, sp
     74c:	str	x0, [sp, #40]
     750:	str	x1, [sp, #32]
     754:	str	w2, [sp, #28]
     758:	ldr	x0, [sp, #40]
     75c:	bl	648 <deflateStateCheck>
     760:	cmp	w0, #0x0
     764:	b.ne	774 <deflateSetDictionary+0x30>  // b.any
     768:	ldr	x0, [sp, #32]
     76c:	cmp	x0, #0x0
     770:	b.ne	77c <deflateSetDictionary+0x38>  // b.any
     774:	mov	w0, #0xfffffffe            	// #-2
     778:	b	ab4 <deflateSetDictionary+0x370>
     77c:	ldr	x0, [sp, #40]
     780:	ldr	x0, [x0, #56]
     784:	str	x0, [sp, #64]
     788:	ldr	x0, [sp, #64]
     78c:	ldr	w0, [x0, #48]
     790:	str	w0, [sp, #60]
     794:	ldr	w0, [sp, #60]
     798:	cmp	w0, #0x2
     79c:	b.eq	7cc <deflateSetDictionary+0x88>  // b.none
     7a0:	ldr	w0, [sp, #60]
     7a4:	cmp	w0, #0x1
     7a8:	b.ne	7bc <deflateSetDictionary+0x78>  // b.any
     7ac:	ldr	x0, [sp, #64]
     7b0:	ldr	w0, [x0, #8]
     7b4:	cmp	w0, #0x2a
     7b8:	b.ne	7cc <deflateSetDictionary+0x88>  // b.any
     7bc:	ldr	x0, [sp, #64]
     7c0:	ldr	w0, [x0, #180]
     7c4:	cmp	w0, #0x0
     7c8:	b.eq	7d4 <deflateSetDictionary+0x90>  // b.none
     7cc:	mov	w0, #0xfffffffe            	// #-2
     7d0:	b	ab4 <deflateSetDictionary+0x370>
     7d4:	ldr	w0, [sp, #60]
     7d8:	cmp	w0, #0x1
     7dc:	b.ne	800 <deflateSetDictionary+0xbc>  // b.any
     7e0:	ldr	x0, [sp, #40]
     7e4:	ldr	x0, [x0, #96]
     7e8:	ldr	w2, [sp, #28]
     7ec:	ldr	x1, [sp, #32]
     7f0:	bl	0 <adler32>
     7f4:	mov	x1, x0
     7f8:	ldr	x0, [sp, #40]
     7fc:	str	x1, [x0, #96]
     800:	ldr	x0, [sp, #64]
     804:	str	wzr, [x0, #48]
     808:	ldr	x0, [sp, #64]
     80c:	ldr	w0, [x0, #80]
     810:	ldr	w1, [sp, #28]
     814:	cmp	w1, w0
     818:	b.cc	8bc <deflateSetDictionary+0x178>  // b.lo, b.ul, b.last
     81c:	ldr	w0, [sp, #60]
     820:	cmp	w0, #0x0
     824:	b.ne	890 <deflateSetDictionary+0x14c>  // b.any
     828:	ldr	x0, [sp, #64]
     82c:	ldr	x1, [x0, #120]
     830:	ldr	x0, [sp, #64]
     834:	ldr	w0, [x0, #132]
     838:	sub	w0, w0, #0x1
     83c:	mov	w0, w0
     840:	lsl	x0, x0, #1
     844:	add	x0, x1, x0
     848:	strh	wzr, [x0]
     84c:	ldr	x0, [sp, #64]
     850:	ldr	x3, [x0, #120]
     854:	ldr	x0, [sp, #64]
     858:	ldr	w0, [x0, #132]
     85c:	sub	w0, w0, #0x1
     860:	mov	w0, w0
     864:	lsl	x0, x0, #1
     868:	mov	x2, x0
     86c:	mov	w1, #0x0                   	// #0
     870:	mov	x0, x3
     874:	bl	0 <memset>
     878:	ldr	x0, [sp, #64]
     87c:	str	wzr, [x0, #172]
     880:	ldr	x0, [sp, #64]
     884:	str	xzr, [x0, #152]
     888:	ldr	x0, [sp, #64]
     88c:	str	wzr, [x0, #5932]
     890:	ldr	x0, [sp, #64]
     894:	ldr	w0, [x0, #80]
     898:	ldr	w1, [sp, #28]
     89c:	sub	w0, w1, w0
     8a0:	mov	w0, w0
     8a4:	ldr	x1, [sp, #32]
     8a8:	add	x0, x1, x0
     8ac:	str	x0, [sp, #32]
     8b0:	ldr	x0, [sp, #64]
     8b4:	ldr	w0, [x0, #80]
     8b8:	str	w0, [sp, #28]
     8bc:	ldr	x0, [sp, #40]
     8c0:	ldr	w0, [x0, #8]
     8c4:	str	w0, [sp, #56]
     8c8:	ldr	x0, [sp, #40]
     8cc:	ldr	x0, [x0]
     8d0:	str	x0, [sp, #48]
     8d4:	ldr	x0, [sp, #40]
     8d8:	ldr	w1, [sp, #28]
     8dc:	str	w1, [x0, #8]
     8e0:	ldr	x0, [sp, #40]
     8e4:	ldr	x1, [sp, #32]
     8e8:	str	x1, [x0]
     8ec:	ldr	x0, [sp, #64]
     8f0:	bl	34ec <fill_window>
     8f4:	b	a10 <deflateSetDictionary+0x2cc>
     8f8:	ldr	x0, [sp, #64]
     8fc:	ldr	w0, [x0, #172]
     900:	str	w0, [sp, #76]
     904:	ldr	x0, [sp, #64]
     908:	ldr	w0, [x0, #180]
     90c:	sub	w0, w0, #0x2
     910:	str	w0, [sp, #72]
     914:	ldr	x0, [sp, #64]
     918:	ldr	w1, [x0, #128]
     91c:	ldr	x0, [sp, #64]
     920:	ldr	w0, [x0, #144]
     924:	lsl	w0, w1, w0
     928:	ldr	x1, [sp, #64]
     92c:	ldr	x2, [x1, #96]
     930:	ldr	w1, [sp, #76]
     934:	add	w1, w1, #0x2
     938:	mov	w1, w1
     93c:	add	x1, x2, x1
     940:	ldrb	w1, [x1]
     944:	eor	w1, w0, w1
     948:	ldr	x0, [sp, #64]
     94c:	ldr	w0, [x0, #140]
     950:	and	w1, w1, w0
     954:	ldr	x0, [sp, #64]
     958:	str	w1, [x0, #128]
     95c:	ldr	x0, [sp, #64]
     960:	ldr	x1, [x0, #120]
     964:	ldr	x0, [sp, #64]
     968:	ldr	w0, [x0, #128]
     96c:	mov	w0, w0
     970:	lsl	x0, x0, #1
     974:	add	x1, x1, x0
     978:	ldr	x0, [sp, #64]
     97c:	ldr	x2, [x0, #112]
     980:	ldr	x0, [sp, #64]
     984:	ldr	w3, [x0, #88]
     988:	ldr	w0, [sp, #76]
     98c:	and	w0, w3, w0
     990:	mov	w0, w0
     994:	lsl	x0, x0, #1
     998:	add	x0, x2, x0
     99c:	ldrh	w1, [x1]
     9a0:	strh	w1, [x0]
     9a4:	ldr	x0, [sp, #64]
     9a8:	ldr	x1, [x0, #120]
     9ac:	ldr	x0, [sp, #64]
     9b0:	ldr	w0, [x0, #128]
     9b4:	mov	w0, w0
     9b8:	lsl	x0, x0, #1
     9bc:	add	x0, x1, x0
     9c0:	ldr	w1, [sp, #76]
     9c4:	and	w1, w1, #0xffff
     9c8:	strh	w1, [x0]
     9cc:	ldr	w0, [sp, #76]
     9d0:	add	w0, w0, #0x1
     9d4:	str	w0, [sp, #76]
     9d8:	ldr	w0, [sp, #72]
     9dc:	sub	w0, w0, #0x1
     9e0:	str	w0, [sp, #72]
     9e4:	ldr	w0, [sp, #72]
     9e8:	cmp	w0, #0x0
     9ec:	b.ne	914 <deflateSetDictionary+0x1d0>  // b.any
     9f0:	ldr	x0, [sp, #64]
     9f4:	ldr	w1, [sp, #76]
     9f8:	str	w1, [x0, #172]
     9fc:	ldr	x0, [sp, #64]
     a00:	mov	w1, #0x2                   	// #2
     a04:	str	w1, [x0, #180]
     a08:	ldr	x0, [sp, #64]
     a0c:	bl	34ec <fill_window>
     a10:	ldr	x0, [sp, #64]
     a14:	ldr	w0, [x0, #180]
     a18:	cmp	w0, #0x2
     a1c:	b.hi	8f8 <deflateSetDictionary+0x1b4>  // b.pmore
     a20:	ldr	x0, [sp, #64]
     a24:	ldr	w1, [x0, #172]
     a28:	ldr	x0, [sp, #64]
     a2c:	ldr	w0, [x0, #180]
     a30:	add	w1, w1, w0
     a34:	ldr	x0, [sp, #64]
     a38:	str	w1, [x0, #172]
     a3c:	ldr	x0, [sp, #64]
     a40:	ldr	w0, [x0, #172]
     a44:	mov	w1, w0
     a48:	ldr	x0, [sp, #64]
     a4c:	str	x1, [x0, #152]
     a50:	ldr	x0, [sp, #64]
     a54:	ldr	w1, [x0, #180]
     a58:	ldr	x0, [sp, #64]
     a5c:	str	w1, [x0, #5932]
     a60:	ldr	x0, [sp, #64]
     a64:	str	wzr, [x0, #180]
     a68:	ldr	x0, [sp, #64]
     a6c:	mov	w1, #0x2                   	// #2
     a70:	str	w1, [x0, #184]
     a74:	ldr	x0, [sp, #64]
     a78:	ldr	w1, [x0, #184]
     a7c:	ldr	x0, [sp, #64]
     a80:	str	w1, [x0, #160]
     a84:	ldr	x0, [sp, #64]
     a88:	str	wzr, [x0, #168]
     a8c:	ldr	x0, [sp, #40]
     a90:	ldr	x1, [sp, #48]
     a94:	str	x1, [x0]
     a98:	ldr	x0, [sp, #40]
     a9c:	ldr	w1, [sp, #56]
     aa0:	str	w1, [x0, #8]
     aa4:	ldr	x0, [sp, #64]
     aa8:	ldr	w1, [sp, #60]
     aac:	str	w1, [x0, #48]
     ab0:	mov	w0, #0x0                   	// #0
     ab4:	ldp	x29, x30, [sp], #80
     ab8:	ret

0000000000000abc <deflateGetDictionary>:
     abc:	stp	x29, x30, [sp, #-64]!
     ac0:	mov	x29, sp
     ac4:	str	x0, [sp, #40]
     ac8:	str	x1, [sp, #32]
     acc:	str	x2, [sp, #24]
     ad0:	ldr	x0, [sp, #40]
     ad4:	bl	648 <deflateStateCheck>
     ad8:	cmp	w0, #0x0
     adc:	b.eq	ae8 <deflateGetDictionary+0x2c>  // b.none
     ae0:	mov	w0, #0xfffffffe            	// #-2
     ae4:	b	ba4 <deflateGetDictionary+0xe8>
     ae8:	ldr	x0, [sp, #40]
     aec:	ldr	x0, [x0, #56]
     af0:	str	x0, [sp, #48]
     af4:	ldr	x0, [sp, #48]
     af8:	ldr	w1, [x0, #172]
     afc:	ldr	x0, [sp, #48]
     b00:	ldr	w0, [x0, #180]
     b04:	add	w0, w1, w0
     b08:	str	w0, [sp, #60]
     b0c:	ldr	x0, [sp, #48]
     b10:	ldr	w0, [x0, #80]
     b14:	ldr	w1, [sp, #60]
     b18:	cmp	w1, w0
     b1c:	b.ls	b2c <deflateGetDictionary+0x70>  // b.plast
     b20:	ldr	x0, [sp, #48]
     b24:	ldr	w0, [x0, #80]
     b28:	str	w0, [sp, #60]
     b2c:	ldr	x0, [sp, #32]
     b30:	cmp	x0, #0x0
     b34:	b.eq	b88 <deflateGetDictionary+0xcc>  // b.none
     b38:	ldr	w0, [sp, #60]
     b3c:	cmp	w0, #0x0
     b40:	b.eq	b88 <deflateGetDictionary+0xcc>  // b.none
     b44:	ldr	x0, [sp, #48]
     b48:	ldr	x1, [x0, #96]
     b4c:	ldr	x0, [sp, #48]
     b50:	ldr	w0, [x0, #172]
     b54:	mov	w2, w0
     b58:	ldr	x0, [sp, #48]
     b5c:	ldr	w0, [x0, #180]
     b60:	mov	w0, w0
     b64:	add	x2, x2, x0
     b68:	ldr	w0, [sp, #60]
     b6c:	sub	x0, x2, x0
     b70:	add	x0, x1, x0
     b74:	ldr	w1, [sp, #60]
     b78:	mov	x2, x1
     b7c:	mov	x1, x0
     b80:	ldr	x0, [sp, #32]
     b84:	bl	0 <memcpy>
     b88:	ldr	x0, [sp, #24]
     b8c:	cmp	x0, #0x0
     b90:	b.eq	ba0 <deflateGetDictionary+0xe4>  // b.none
     b94:	ldr	x0, [sp, #24]
     b98:	ldr	w1, [sp, #60]
     b9c:	str	w1, [x0]
     ba0:	mov	w0, #0x0                   	// #0
     ba4:	ldp	x29, x30, [sp], #64
     ba8:	ret

0000000000000bac <deflateResetKeep>:
     bac:	stp	x29, x30, [sp, #-48]!
     bb0:	mov	x29, sp
     bb4:	str	x0, [sp, #24]
     bb8:	ldr	x0, [sp, #24]
     bbc:	bl	648 <deflateStateCheck>
     bc0:	cmp	w0, #0x0
     bc4:	b.eq	bd0 <deflateResetKeep+0x24>  // b.none
     bc8:	mov	w0, #0xfffffffe            	// #-2
     bcc:	b	cd0 <deflateResetKeep+0x124>
     bd0:	ldr	x0, [sp, #24]
     bd4:	str	xzr, [x0, #40]
     bd8:	ldr	x0, [sp, #24]
     bdc:	ldr	x1, [x0, #40]
     be0:	ldr	x0, [sp, #24]
     be4:	str	x1, [x0, #16]
     be8:	ldr	x0, [sp, #24]
     bec:	str	xzr, [x0, #48]
     bf0:	ldr	x0, [sp, #24]
     bf4:	mov	w1, #0x2                   	// #2
     bf8:	str	w1, [x0, #88]
     bfc:	ldr	x0, [sp, #24]
     c00:	ldr	x0, [x0, #56]
     c04:	str	x0, [sp, #40]
     c08:	ldr	x0, [sp, #40]
     c0c:	str	xzr, [x0, #40]
     c10:	ldr	x0, [sp, #40]
     c14:	ldr	x1, [x0, #16]
     c18:	ldr	x0, [sp, #40]
     c1c:	str	x1, [x0, #32]
     c20:	ldr	x0, [sp, #40]
     c24:	ldr	w0, [x0, #48]
     c28:	cmp	w0, #0x0
     c2c:	b.ge	c44 <deflateResetKeep+0x98>  // b.tcont
     c30:	ldr	x0, [sp, #40]
     c34:	ldr	w0, [x0, #48]
     c38:	neg	w1, w0
     c3c:	ldr	x0, [sp, #40]
     c40:	str	w1, [x0, #48]
     c44:	ldr	x0, [sp, #40]
     c48:	ldr	w0, [x0, #48]
     c4c:	cmp	w0, #0x2
     c50:	b.eq	c74 <deflateResetKeep+0xc8>  // b.none
     c54:	ldr	x0, [sp, #40]
     c58:	ldr	w0, [x0, #48]
     c5c:	cmp	w0, #0x0
     c60:	b.eq	c6c <deflateResetKeep+0xc0>  // b.none
     c64:	mov	w0, #0x2a                  	// #42
     c68:	b	c78 <deflateResetKeep+0xcc>
     c6c:	mov	w0, #0x71                  	// #113
     c70:	b	c78 <deflateResetKeep+0xcc>
     c74:	mov	w0, #0x39                  	// #57
     c78:	ldr	x1, [sp, #40]
     c7c:	str	w0, [x1, #8]
     c80:	ldr	x0, [sp, #40]
     c84:	ldr	w0, [x0, #48]
     c88:	cmp	w0, #0x2
     c8c:	b.ne	ca4 <deflateResetKeep+0xf8>  // b.any
     c90:	mov	w2, #0x0                   	// #0
     c94:	mov	x1, #0x0                   	// #0
     c98:	mov	x0, #0x0                   	// #0
     c9c:	bl	0 <crc32>
     ca0:	b	cb4 <deflateResetKeep+0x108>
     ca4:	mov	w2, #0x0                   	// #0
     ca8:	mov	x1, #0x0                   	// #0
     cac:	mov	x0, #0x0                   	// #0
     cb0:	bl	0 <adler32>
     cb4:	ldr	x1, [sp, #24]
     cb8:	str	x0, [x1, #96]
     cbc:	ldr	x0, [sp, #40]
     cc0:	str	wzr, [x0, #76]
     cc4:	ldr	x0, [sp, #40]
     cc8:	bl	0 <_tr_init>
     ccc:	mov	w0, #0x0                   	// #0
     cd0:	ldp	x29, x30, [sp], #48
     cd4:	ret

0000000000000cd8 <deflateReset>:
     cd8:	stp	x29, x30, [sp, #-48]!
     cdc:	mov	x29, sp
     ce0:	str	x0, [sp, #24]
     ce4:	ldr	x0, [sp, #24]
     ce8:	bl	bac <deflateResetKeep>
     cec:	str	w0, [sp, #44]
     cf0:	ldr	w0, [sp, #44]
     cf4:	cmp	w0, #0x0
     cf8:	b.ne	d08 <deflateReset+0x30>  // b.any
     cfc:	ldr	x0, [sp, #24]
     d00:	ldr	x0, [x0, #56]
     d04:	bl	3030 <lm_init>
     d08:	ldr	w0, [sp, #44]
     d0c:	ldp	x29, x30, [sp], #48
     d10:	ret

0000000000000d14 <deflateSetHeader>:
     d14:	stp	x29, x30, [sp, #-32]!
     d18:	mov	x29, sp
     d1c:	str	x0, [sp, #24]
     d20:	str	x1, [sp, #16]
     d24:	ldr	x0, [sp, #24]
     d28:	bl	648 <deflateStateCheck>
     d2c:	cmp	w0, #0x0
     d30:	b.ne	d48 <deflateSetHeader+0x34>  // b.any
     d34:	ldr	x0, [sp, #24]
     d38:	ldr	x0, [x0, #56]
     d3c:	ldr	w0, [x0, #48]
     d40:	cmp	w0, #0x2
     d44:	b.eq	d50 <deflateSetHeader+0x3c>  // b.none
     d48:	mov	w0, #0xfffffffe            	// #-2
     d4c:	b	d64 <deflateSetHeader+0x50>
     d50:	ldr	x0, [sp, #24]
     d54:	ldr	x0, [x0, #56]
     d58:	ldr	x1, [sp, #16]
     d5c:	str	x1, [x0, #56]
     d60:	mov	w0, #0x0                   	// #0
     d64:	ldp	x29, x30, [sp], #32
     d68:	ret

0000000000000d6c <deflatePending>:
     d6c:	stp	x29, x30, [sp, #-48]!
     d70:	mov	x29, sp
     d74:	str	x0, [sp, #40]
     d78:	str	x1, [sp, #32]
     d7c:	str	x2, [sp, #24]
     d80:	ldr	x0, [sp, #40]
     d84:	bl	648 <deflateStateCheck>
     d88:	cmp	w0, #0x0
     d8c:	b.eq	d98 <deflatePending+0x2c>  // b.none
     d90:	mov	w0, #0xfffffffe            	// #-2
     d94:	b	de0 <deflatePending+0x74>
     d98:	ldr	x0, [sp, #32]
     d9c:	cmp	x0, #0x0
     da0:	b.eq	dbc <deflatePending+0x50>  // b.none
     da4:	ldr	x0, [sp, #40]
     da8:	ldr	x0, [x0, #56]
     dac:	ldr	x0, [x0, #40]
     db0:	mov	w1, w0
     db4:	ldr	x0, [sp, #32]
     db8:	str	w1, [x0]
     dbc:	ldr	x0, [sp, #24]
     dc0:	cmp	x0, #0x0
     dc4:	b.eq	ddc <deflatePending+0x70>  // b.none
     dc8:	ldr	x0, [sp, #40]
     dcc:	ldr	x0, [x0, #56]
     dd0:	ldr	w1, [x0, #5940]
     dd4:	ldr	x0, [sp, #24]
     dd8:	str	w1, [x0]
     ddc:	mov	w0, #0x0                   	// #0
     de0:	ldp	x29, x30, [sp], #48
     de4:	ret

0000000000000de8 <deflatePrime>:
     de8:	stp	x29, x30, [sp, #-48]!
     dec:	mov	x29, sp
     df0:	str	x0, [sp, #24]
     df4:	str	w1, [sp, #20]
     df8:	str	w2, [sp, #16]
     dfc:	ldr	x0, [sp, #24]
     e00:	bl	648 <deflateStateCheck>
     e04:	cmp	w0, #0x0
     e08:	b.eq	e14 <deflatePrime+0x2c>  // b.none
     e0c:	mov	w0, #0xfffffffe            	// #-2
     e10:	b	f00 <deflatePrime+0x118>
     e14:	ldr	x0, [sp, #24]
     e18:	ldr	x0, [x0, #56]
     e1c:	str	x0, [sp, #32]
     e20:	ldr	x0, [sp, #32]
     e24:	ldr	x1, [x0, #5904]
     e28:	ldr	x0, [sp, #32]
     e2c:	ldr	x0, [x0, #32]
     e30:	add	x0, x0, #0x2
     e34:	cmp	x1, x0
     e38:	b.cs	e44 <deflatePrime+0x5c>  // b.hs, b.nlast
     e3c:	mov	w0, #0xfffffffb            	// #-5
     e40:	b	f00 <deflatePrime+0x118>
     e44:	ldr	x0, [sp, #32]
     e48:	ldr	w0, [x0, #5940]
     e4c:	mov	w1, #0x10                  	// #16
     e50:	sub	w0, w1, w0
     e54:	str	w0, [sp, #44]
     e58:	ldr	w1, [sp, #44]
     e5c:	ldr	w0, [sp, #20]
     e60:	cmp	w1, w0
     e64:	b.le	e70 <deflatePrime+0x88>
     e68:	ldr	w0, [sp, #20]
     e6c:	str	w0, [sp, #44]
     e70:	ldr	x0, [sp, #32]
     e74:	ldrh	w1, [x0, #5936]
     e78:	ldr	w0, [sp, #44]
     e7c:	mov	w2, #0x1                   	// #1
     e80:	lsl	w0, w2, w0
     e84:	sub	w2, w0, #0x1
     e88:	ldr	w0, [sp, #16]
     e8c:	and	w2, w2, w0
     e90:	ldr	x0, [sp, #32]
     e94:	ldr	w0, [x0, #5940]
     e98:	lsl	w0, w2, w0
     e9c:	and	w0, w0, #0xffff
     ea0:	orr	w0, w1, w0
     ea4:	and	w1, w0, #0xffff
     ea8:	ldr	x0, [sp, #32]
     eac:	strh	w1, [x0, #5936]
     eb0:	ldr	x0, [sp, #32]
     eb4:	ldr	w1, [x0, #5940]
     eb8:	ldr	w0, [sp, #44]
     ebc:	add	w1, w1, w0
     ec0:	ldr	x0, [sp, #32]
     ec4:	str	w1, [x0, #5940]
     ec8:	ldr	x0, [sp, #32]
     ecc:	bl	0 <_tr_flush_bits>
     ed0:	ldr	w0, [sp, #44]
     ed4:	ldr	w1, [sp, #16]
     ed8:	asr	w0, w1, w0
     edc:	str	w0, [sp, #16]
     ee0:	ldr	w1, [sp, #20]
     ee4:	ldr	w0, [sp, #44]
     ee8:	sub	w0, w1, w0
     eec:	str	w0, [sp, #20]
     ef0:	ldr	w0, [sp, #20]
     ef4:	cmp	w0, #0x0
     ef8:	b.ne	e44 <deflatePrime+0x5c>  // b.any
     efc:	mov	w0, #0x0                   	// #0
     f00:	ldp	x29, x30, [sp], #48
     f04:	ret

0000000000000f08 <deflateParams>:
     f08:	stp	x29, x30, [sp, #-64]!
     f0c:	mov	x29, sp
     f10:	str	x0, [sp, #24]
     f14:	str	w1, [sp, #20]
     f18:	str	w2, [sp, #16]
     f1c:	ldr	x0, [sp, #24]
     f20:	bl	648 <deflateStateCheck>
     f24:	cmp	w0, #0x0
     f28:	b.eq	f34 <deflateParams+0x2c>  // b.none
     f2c:	mov	w0, #0xfffffffe            	// #-2
     f30:	b	1188 <deflateParams+0x280>
     f34:	ldr	x0, [sp, #24]
     f38:	ldr	x0, [x0, #56]
     f3c:	str	x0, [sp, #56]
     f40:	ldr	w0, [sp, #20]
     f44:	cmn	w0, #0x1
     f48:	b.ne	f54 <deflateParams+0x4c>  // b.any
     f4c:	mov	w0, #0x6                   	// #6
     f50:	str	w0, [sp, #20]
     f54:	ldr	w0, [sp, #20]
     f58:	cmp	w0, #0x0
     f5c:	b.lt	f84 <deflateParams+0x7c>  // b.tstop
     f60:	ldr	w0, [sp, #20]
     f64:	cmp	w0, #0x9
     f68:	b.gt	f84 <deflateParams+0x7c>
     f6c:	ldr	w0, [sp, #16]
     f70:	cmp	w0, #0x0
     f74:	b.lt	f84 <deflateParams+0x7c>  // b.tstop
     f78:	ldr	w0, [sp, #16]
     f7c:	cmp	w0, #0x4
     f80:	b.le	f8c <deflateParams+0x84>
     f84:	mov	w0, #0xfffffffe            	// #-2
     f88:	b	1188 <deflateParams+0x280>
     f8c:	ldr	x0, [sp, #56]
     f90:	ldr	w2, [x0, #196]
     f94:	adrp	x0, 0 <slide_hash>
     f98:	add	x1, x0, #0x0
     f9c:	sxtw	x0, w2
     fa0:	lsl	x0, x0, #4
     fa4:	add	x0, x1, x0
     fa8:	ldr	x0, [x0, #8]
     fac:	str	x0, [sp, #48]
     fb0:	ldr	x0, [sp, #56]
     fb4:	ldr	w0, [x0, #200]
     fb8:	ldr	w1, [sp, #16]
     fbc:	cmp	w1, w0
     fc0:	b.ne	fe8 <deflateParams+0xe0>  // b.any
     fc4:	adrp	x0, 0 <slide_hash>
     fc8:	add	x1, x0, #0x0
     fcc:	ldrsw	x0, [sp, #20]
     fd0:	lsl	x0, x0, #4
     fd4:	add	x0, x1, x0
     fd8:	ldr	x0, [x0, #8]
     fdc:	ldr	x1, [sp, #48]
     fe0:	cmp	x1, x0
     fe4:	b.eq	1034 <deflateParams+0x12c>  // b.none
     fe8:	ldr	x0, [sp, #56]
     fec:	ldr	x0, [x0, #5944]
     ff0:	cmp	x0, #0x0
     ff4:	b.eq	1034 <deflateParams+0x12c>  // b.none
     ff8:	mov	w1, #0x5                   	// #5
     ffc:	ldr	x0, [sp, #24]
    1000:	bl	15cc <deflate>
    1004:	str	w0, [sp, #44]
    1008:	ldr	w0, [sp, #44]
    100c:	cmn	w0, #0x2
    1010:	b.ne	101c <deflateParams+0x114>  // b.any
    1014:	ldr	w0, [sp, #44]
    1018:	b	1188 <deflateParams+0x280>
    101c:	ldr	x0, [sp, #24]
    1020:	ldr	w0, [x0, #32]
    1024:	cmp	w0, #0x0
    1028:	b.ne	1034 <deflateParams+0x12c>  // b.any
    102c:	mov	w0, #0xfffffffb            	// #-5
    1030:	b	1188 <deflateParams+0x280>
    1034:	ldr	x0, [sp, #56]
    1038:	ldr	w0, [x0, #196]
    103c:	ldr	w1, [sp, #20]
    1040:	cmp	w1, w0
    1044:	b.eq	1178 <deflateParams+0x270>  // b.none
    1048:	ldr	x0, [sp, #56]
    104c:	ldr	w0, [x0, #196]
    1050:	cmp	w0, #0x0
    1054:	b.ne	10dc <deflateParams+0x1d4>  // b.any
    1058:	ldr	x0, [sp, #56]
    105c:	ldr	w0, [x0, #5928]
    1060:	cmp	w0, #0x0
    1064:	b.eq	10dc <deflateParams+0x1d4>  // b.none
    1068:	ldr	x0, [sp, #56]
    106c:	ldr	w0, [x0, #5928]
    1070:	cmp	w0, #0x1
    1074:	b.ne	1084 <deflateParams+0x17c>  // b.any
    1078:	ldr	x0, [sp, #56]
    107c:	bl	0 <slide_hash>
    1080:	b	10a8 <deflateParams+0x1a0>
    1084:	ldr	x0, [sp, #56]
    1088:	ldr	x1, [x0, #120]
    108c:	ldr	x0, [sp, #56]
    1090:	ldr	w0, [x0, #132]
    1094:	sub	w0, w0, #0x1
    1098:	mov	w0, w0
    109c:	lsl	x0, x0, #1
    10a0:	add	x0, x1, x0
    10a4:	strh	wzr, [x0]
    10a8:	ldr	x0, [sp, #56]
    10ac:	ldr	x3, [x0, #120]
    10b0:	ldr	x0, [sp, #56]
    10b4:	ldr	w0, [x0, #132]
    10b8:	sub	w0, w0, #0x1
    10bc:	mov	w0, w0
    10c0:	lsl	x0, x0, #1
    10c4:	mov	x2, x0
    10c8:	mov	w1, #0x0                   	// #0
    10cc:	mov	x0, x3
    10d0:	bl	0 <memset>
    10d4:	ldr	x0, [sp, #56]
    10d8:	str	wzr, [x0, #5928]
    10dc:	ldr	x0, [sp, #56]
    10e0:	ldr	w1, [sp, #20]
    10e4:	str	w1, [x0, #196]
    10e8:	adrp	x0, 0 <slide_hash>
    10ec:	add	x1, x0, #0x0
    10f0:	ldrsw	x0, [sp, #20]
    10f4:	lsl	x0, x0, #4
    10f8:	add	x0, x1, x0
    10fc:	ldrh	w0, [x0, #2]
    1100:	mov	w1, w0
    1104:	ldr	x0, [sp, #56]
    1108:	str	w1, [x0, #192]
    110c:	adrp	x0, 0 <slide_hash>
    1110:	add	x1, x0, #0x0
    1114:	ldrsw	x0, [sp, #20]
    1118:	lsl	x0, x0, #4
    111c:	add	x0, x1, x0
    1120:	ldrh	w0, [x0]
    1124:	mov	w1, w0
    1128:	ldr	x0, [sp, #56]
    112c:	str	w1, [x0, #204]
    1130:	adrp	x0, 0 <slide_hash>
    1134:	add	x1, x0, #0x0
    1138:	ldrsw	x0, [sp, #20]
    113c:	lsl	x0, x0, #4
    1140:	add	x0, x1, x0
    1144:	ldrh	w0, [x0, #4]
    1148:	mov	w1, w0
    114c:	ldr	x0, [sp, #56]
    1150:	str	w1, [x0, #208]
    1154:	adrp	x0, 0 <slide_hash>
    1158:	add	x1, x0, #0x0
    115c:	ldrsw	x0, [sp, #20]
    1160:	lsl	x0, x0, #4
    1164:	add	x0, x1, x0
    1168:	ldrh	w0, [x0, #6]
    116c:	mov	w1, w0
    1170:	ldr	x0, [sp, #56]
    1174:	str	w1, [x0, #188]
    1178:	ldr	x0, [sp, #56]
    117c:	ldr	w1, [sp, #16]
    1180:	str	w1, [x0, #200]
    1184:	mov	w0, #0x0                   	// #0
    1188:	ldp	x29, x30, [sp], #64
    118c:	ret

0000000000001190 <deflateTune>:
    1190:	stp	x29, x30, [sp, #-64]!
    1194:	mov	x29, sp
    1198:	str	x0, [sp, #40]
    119c:	str	w1, [sp, #36]
    11a0:	str	w2, [sp, #32]
    11a4:	str	w3, [sp, #28]
    11a8:	str	w4, [sp, #24]
    11ac:	ldr	x0, [sp, #40]
    11b0:	bl	648 <deflateStateCheck>
    11b4:	cmp	w0, #0x0
    11b8:	b.eq	11c4 <deflateTune+0x34>  // b.none
    11bc:	mov	w0, #0xfffffffe            	// #-2
    11c0:	b	1204 <deflateTune+0x74>
    11c4:	ldr	x0, [sp, #40]
    11c8:	ldr	x0, [x0, #56]
    11cc:	str	x0, [sp, #56]
    11d0:	ldr	w1, [sp, #36]
    11d4:	ldr	x0, [sp, #56]
    11d8:	str	w1, [x0, #204]
    11dc:	ldr	w1, [sp, #32]
    11e0:	ldr	x0, [sp, #56]
    11e4:	str	w1, [x0, #192]
    11e8:	ldr	x0, [sp, #56]
    11ec:	ldr	w1, [sp, #28]
    11f0:	str	w1, [x0, #208]
    11f4:	ldr	w1, [sp, #24]
    11f8:	ldr	x0, [sp, #56]
    11fc:	str	w1, [x0, #188]
    1200:	mov	w0, #0x0                   	// #0
    1204:	ldp	x29, x30, [sp], #64
    1208:	ret

000000000000120c <deflateBound>:
    120c:	stp	x29, x30, [sp, #-64]!
    1210:	mov	x29, sp
    1214:	str	x0, [sp, #24]
    1218:	str	x1, [sp, #16]
    121c:	ldr	x0, [sp, #16]
    1220:	add	x0, x0, #0x7
    1224:	lsr	x1, x0, #3
    1228:	ldr	x0, [sp, #16]
    122c:	add	x1, x1, x0
    1230:	ldr	x0, [sp, #16]
    1234:	add	x0, x0, #0x3f
    1238:	lsr	x0, x0, #6
    123c:	add	x0, x1, x0
    1240:	add	x0, x0, #0x5
    1244:	str	x0, [sp, #40]
    1248:	ldr	x0, [sp, #24]
    124c:	bl	648 <deflateStateCheck>
    1250:	cmp	w0, #0x0
    1254:	b.eq	1264 <deflateBound+0x58>  // b.none
    1258:	ldr	x0, [sp, #40]
    125c:	add	x0, x0, #0x6
    1260:	b	142c <deflateBound+0x220>
    1264:	ldr	x0, [sp, #24]
    1268:	ldr	x0, [x0, #56]
    126c:	str	x0, [sp, #32]
    1270:	ldr	x0, [sp, #32]
    1274:	ldr	w0, [x0, #48]
    1278:	cmp	w0, #0x2
    127c:	b.eq	12c8 <deflateBound+0xbc>  // b.none
    1280:	cmp	w0, #0x2
    1284:	b.gt	13b8 <deflateBound+0x1ac>
    1288:	cmp	w0, #0x0
    128c:	b.eq	129c <deflateBound+0x90>  // b.none
    1290:	cmp	w0, #0x1
    1294:	b.eq	12a4 <deflateBound+0x98>  // b.none
    1298:	b	13b8 <deflateBound+0x1ac>
    129c:	str	xzr, [sp, #56]
    12a0:	b	13c8 <deflateBound+0x1bc>
    12a4:	ldr	x0, [sp, #32]
    12a8:	ldr	w0, [x0, #172]
    12ac:	cmp	w0, #0x0
    12b0:	b.eq	12bc <deflateBound+0xb0>  // b.none
    12b4:	mov	x0, #0xa                   	// #10
    12b8:	b	12c0 <deflateBound+0xb4>
    12bc:	mov	x0, #0x6                   	// #6
    12c0:	str	x0, [sp, #56]
    12c4:	b	13c8 <deflateBound+0x1bc>
    12c8:	mov	x0, #0x12                  	// #18
    12cc:	str	x0, [sp, #56]
    12d0:	ldr	x0, [sp, #32]
    12d4:	ldr	x0, [x0, #56]
    12d8:	cmp	x0, #0x0
    12dc:	b.eq	13c4 <deflateBound+0x1b8>  // b.none
    12e0:	ldr	x0, [sp, #32]
    12e4:	ldr	x0, [x0, #56]
    12e8:	ldr	x0, [x0, #24]
    12ec:	cmp	x0, #0x0
    12f0:	b.eq	1314 <deflateBound+0x108>  // b.none
    12f4:	ldr	x0, [sp, #32]
    12f8:	ldr	x0, [x0, #56]
    12fc:	ldr	w0, [x0, #32]
    1300:	add	w0, w0, #0x2
    1304:	mov	w0, w0
    1308:	ldr	x1, [sp, #56]
    130c:	add	x0, x1, x0
    1310:	str	x0, [sp, #56]
    1314:	ldr	x0, [sp, #32]
    1318:	ldr	x0, [x0, #56]
    131c:	ldr	x0, [x0, #40]
    1320:	str	x0, [sp, #48]
    1324:	ldr	x0, [sp, #48]
    1328:	cmp	x0, #0x0
    132c:	b.eq	1354 <deflateBound+0x148>  // b.none
    1330:	ldr	x0, [sp, #56]
    1334:	add	x0, x0, #0x1
    1338:	str	x0, [sp, #56]
    133c:	ldr	x0, [sp, #48]
    1340:	add	x1, x0, #0x1
    1344:	str	x1, [sp, #48]
    1348:	ldrb	w0, [x0]
    134c:	cmp	w0, #0x0
    1350:	b.ne	1330 <deflateBound+0x124>  // b.any
    1354:	ldr	x0, [sp, #32]
    1358:	ldr	x0, [x0, #56]
    135c:	ldr	x0, [x0, #56]
    1360:	str	x0, [sp, #48]
    1364:	ldr	x0, [sp, #48]
    1368:	cmp	x0, #0x0
    136c:	b.eq	1394 <deflateBound+0x188>  // b.none
    1370:	ldr	x0, [sp, #56]
    1374:	add	x0, x0, #0x1
    1378:	str	x0, [sp, #56]
    137c:	ldr	x0, [sp, #48]
    1380:	add	x1, x0, #0x1
    1384:	str	x1, [sp, #48]
    1388:	ldrb	w0, [x0]
    138c:	cmp	w0, #0x0
    1390:	b.ne	1370 <deflateBound+0x164>  // b.any
    1394:	ldr	x0, [sp, #32]
    1398:	ldr	x0, [x0, #56]
    139c:	ldr	w0, [x0, #68]
    13a0:	cmp	w0, #0x0
    13a4:	b.eq	13c4 <deflateBound+0x1b8>  // b.none
    13a8:	ldr	x0, [sp, #56]
    13ac:	add	x0, x0, #0x2
    13b0:	str	x0, [sp, #56]
    13b4:	b	13c4 <deflateBound+0x1b8>
    13b8:	mov	x0, #0x6                   	// #6
    13bc:	str	x0, [sp, #56]
    13c0:	b	13c8 <deflateBound+0x1bc>
    13c4:	nop
    13c8:	ldr	x0, [sp, #32]
    13cc:	ldr	w0, [x0, #84]
    13d0:	cmp	w0, #0xf
    13d4:	b.ne	13e8 <deflateBound+0x1dc>  // b.any
    13d8:	ldr	x0, [sp, #32]
    13dc:	ldr	w0, [x0, #136]
    13e0:	cmp	w0, #0xf
    13e4:	b.eq	13f8 <deflateBound+0x1ec>  // b.none
    13e8:	ldr	x1, [sp, #40]
    13ec:	ldr	x0, [sp, #56]
    13f0:	add	x0, x1, x0
    13f4:	b	142c <deflateBound+0x220>
    13f8:	ldr	x0, [sp, #16]
    13fc:	lsr	x1, x0, #12
    1400:	ldr	x0, [sp, #16]
    1404:	add	x1, x1, x0
    1408:	ldr	x0, [sp, #16]
    140c:	lsr	x0, x0, #14
    1410:	add	x1, x1, x0
    1414:	ldr	x0, [sp, #16]
    1418:	lsr	x0, x0, #25
    141c:	add	x1, x1, x0
    1420:	ldr	x0, [sp, #56]
    1424:	add	x0, x1, x0
    1428:	add	x0, x0, #0x7
    142c:	ldp	x29, x30, [sp], #64
    1430:	ret

0000000000001434 <putShortMSB>:
    1434:	sub	sp, sp, #0x10
    1438:	str	x0, [sp, #8]
    143c:	str	w1, [sp, #4]
    1440:	ldr	w0, [sp, #4]
    1444:	lsr	w4, w0, #8
    1448:	ldr	x0, [sp, #8]
    144c:	ldr	x1, [x0, #16]
    1450:	ldr	x0, [sp, #8]
    1454:	ldr	x0, [x0, #40]
    1458:	add	x3, x0, #0x1
    145c:	ldr	x2, [sp, #8]
    1460:	str	x3, [x2, #40]
    1464:	add	x0, x1, x0
    1468:	and	w1, w4, #0xff
    146c:	strb	w1, [x0]
    1470:	ldr	x0, [sp, #8]
    1474:	ldr	x1, [x0, #16]
    1478:	ldr	x0, [sp, #8]
    147c:	ldr	x0, [x0, #40]
    1480:	add	x3, x0, #0x1
    1484:	ldr	x2, [sp, #8]
    1488:	str	x3, [x2, #40]
    148c:	add	x0, x1, x0
    1490:	ldr	w1, [sp, #4]
    1494:	and	w1, w1, #0xff
    1498:	strb	w1, [x0]
    149c:	nop
    14a0:	add	sp, sp, #0x10
    14a4:	ret

00000000000014a8 <flush_pending>:
    14a8:	stp	x29, x30, [sp, #-48]!
    14ac:	mov	x29, sp
    14b0:	str	x0, [sp, #24]
    14b4:	ldr	x0, [sp, #24]
    14b8:	ldr	x0, [x0, #56]
    14bc:	str	x0, [sp, #32]
    14c0:	ldr	x0, [sp, #32]
    14c4:	bl	0 <_tr_flush_bits>
    14c8:	ldr	x0, [sp, #32]
    14cc:	ldr	x0, [x0, #40]
    14d0:	str	w0, [sp, #44]
    14d4:	ldr	x0, [sp, #24]
    14d8:	ldr	w0, [x0, #32]
    14dc:	ldr	w1, [sp, #44]
    14e0:	cmp	w1, w0
    14e4:	b.ls	14f4 <flush_pending+0x4c>  // b.plast
    14e8:	ldr	x0, [sp, #24]
    14ec:	ldr	w0, [x0, #32]
    14f0:	str	w0, [sp, #44]
    14f4:	ldr	w0, [sp, #44]
    14f8:	cmp	w0, #0x0
    14fc:	b.eq	15c0 <flush_pending+0x118>  // b.none
    1500:	ldr	x0, [sp, #24]
    1504:	ldr	x3, [x0, #24]
    1508:	ldr	x0, [sp, #32]
    150c:	ldr	x0, [x0, #32]
    1510:	ldr	w1, [sp, #44]
    1514:	mov	x2, x1
    1518:	mov	x1, x0
    151c:	mov	x0, x3
    1520:	bl	0 <memcpy>
    1524:	ldr	x0, [sp, #24]
    1528:	ldr	x1, [x0, #24]
    152c:	ldr	w0, [sp, #44]
    1530:	add	x1, x1, x0
    1534:	ldr	x0, [sp, #24]
    1538:	str	x1, [x0, #24]
    153c:	ldr	x0, [sp, #32]
    1540:	ldr	x1, [x0, #32]
    1544:	ldr	w0, [sp, #44]
    1548:	add	x1, x1, x0
    154c:	ldr	x0, [sp, #32]
    1550:	str	x1, [x0, #32]
    1554:	ldr	x0, [sp, #24]
    1558:	ldr	x1, [x0, #40]
    155c:	ldr	w0, [sp, #44]
    1560:	add	x1, x1, x0
    1564:	ldr	x0, [sp, #24]
    1568:	str	x1, [x0, #40]
    156c:	ldr	x0, [sp, #24]
    1570:	ldr	w1, [x0, #32]
    1574:	ldr	w0, [sp, #44]
    1578:	sub	w1, w1, w0
    157c:	ldr	x0, [sp, #24]
    1580:	str	w1, [x0, #32]
    1584:	ldr	x0, [sp, #32]
    1588:	ldr	x1, [x0, #40]
    158c:	ldr	w0, [sp, #44]
    1590:	sub	x1, x1, x0
    1594:	ldr	x0, [sp, #32]
    1598:	str	x1, [x0, #40]
    159c:	ldr	x0, [sp, #32]
    15a0:	ldr	x0, [x0, #40]
    15a4:	cmp	x0, #0x0
    15a8:	b.ne	15c4 <flush_pending+0x11c>  // b.any
    15ac:	ldr	x0, [sp, #32]
    15b0:	ldr	x1, [x0, #16]
    15b4:	ldr	x0, [sp, #32]
    15b8:	str	x1, [x0, #32]
    15bc:	b	15c4 <flush_pending+0x11c>
    15c0:	nop
    15c4:	ldp	x29, x30, [sp], #48
    15c8:	ret

00000000000015cc <deflate>:
    15cc:	stp	x29, x30, [sp, #-112]!
    15d0:	mov	x29, sp
    15d4:	str	x0, [sp, #24]
    15d8:	str	w1, [sp, #20]
    15dc:	ldr	x0, [sp, #24]
    15e0:	bl	648 <deflateStateCheck>
    15e4:	cmp	w0, #0x0
    15e8:	b.ne	1604 <deflate+0x38>  // b.any
    15ec:	ldr	w0, [sp, #20]
    15f0:	cmp	w0, #0x5
    15f4:	b.gt	1604 <deflate+0x38>
    15f8:	ldr	w0, [sp, #20]
    15fc:	cmp	w0, #0x0
    1600:	b.ge	160c <deflate+0x40>  // b.tcont
    1604:	mov	w0, #0xfffffffe            	// #-2
    1608:	b	2a60 <deflate+0x1494>
    160c:	ldr	x0, [sp, #24]
    1610:	ldr	x0, [x0, #56]
    1614:	str	x0, [sp, #64]
    1618:	ldr	x0, [sp, #24]
    161c:	ldr	x0, [x0, #24]
    1620:	cmp	x0, #0x0
    1624:	b.eq	1664 <deflate+0x98>  // b.none
    1628:	ldr	x0, [sp, #24]
    162c:	ldr	w0, [x0, #8]
    1630:	cmp	w0, #0x0
    1634:	b.eq	1648 <deflate+0x7c>  // b.none
    1638:	ldr	x0, [sp, #24]
    163c:	ldr	x0, [x0]
    1640:	cmp	x0, #0x0
    1644:	b.eq	1664 <deflate+0x98>  // b.none
    1648:	ldr	x0, [sp, #64]
    164c:	ldr	w0, [x0, #8]
    1650:	cmp	w0, #0x29a
    1654:	b.ne	1680 <deflate+0xb4>  // b.any
    1658:	ldr	w0, [sp, #20]
    165c:	cmp	w0, #0x4
    1660:	b.eq	1680 <deflate+0xb4>  // b.none
    1664:	adrp	x0, 0 <z_errmsg>
    1668:	add	x0, x0, #0x0
    166c:	ldr	x1, [x0, #32]
    1670:	ldr	x0, [sp, #24]
    1674:	str	x1, [x0, #48]
    1678:	mov	w0, #0xfffffffe            	// #-2
    167c:	b	2a60 <deflate+0x1494>
    1680:	ldr	x0, [sp, #24]
    1684:	ldr	w0, [x0, #32]
    1688:	cmp	w0, #0x0
    168c:	b.ne	16ac <deflate+0xe0>  // b.any
    1690:	adrp	x0, 0 <z_errmsg>
    1694:	add	x0, x0, #0x0
    1698:	ldr	x1, [x0, #56]
    169c:	ldr	x0, [sp, #24]
    16a0:	str	x1, [x0, #48]
    16a4:	mov	w0, #0xfffffffb            	// #-5
    16a8:	b	2a60 <deflate+0x1494>
    16ac:	ldr	x0, [sp, #64]
    16b0:	ldr	w0, [x0, #76]
    16b4:	str	w0, [sp, #60]
    16b8:	ldr	x0, [sp, #64]
    16bc:	ldr	w1, [sp, #20]
    16c0:	str	w1, [x0, #76]
    16c4:	ldr	x0, [sp, #64]
    16c8:	ldr	x0, [x0, #40]
    16cc:	cmp	x0, #0x0
    16d0:	b.eq	1700 <deflate+0x134>  // b.none
    16d4:	ldr	x0, [sp, #24]
    16d8:	bl	14a8 <flush_pending>
    16dc:	ldr	x0, [sp, #24]
    16e0:	ldr	w0, [x0, #32]
    16e4:	cmp	w0, #0x0
    16e8:	b.ne	1788 <deflate+0x1bc>  // b.any
    16ec:	ldr	x0, [sp, #64]
    16f0:	mov	w1, #0xffffffff            	// #-1
    16f4:	str	w1, [x0, #76]
    16f8:	mov	w0, #0x0                   	// #0
    16fc:	b	2a60 <deflate+0x1494>
    1700:	ldr	x0, [sp, #24]
    1704:	ldr	w0, [x0, #8]
    1708:	cmp	w0, #0x0
    170c:	b.ne	1788 <deflate+0x1bc>  // b.any
    1710:	ldr	w0, [sp, #20]
    1714:	lsl	w1, w0, #1
    1718:	ldr	w0, [sp, #20]
    171c:	cmp	w0, #0x4
    1720:	b.le	172c <deflate+0x160>
    1724:	mov	w0, #0x9                   	// #9
    1728:	b	1730 <deflate+0x164>
    172c:	mov	w0, #0x0                   	// #0
    1730:	sub	w1, w1, w0
    1734:	ldr	w0, [sp, #60]
    1738:	lsl	w2, w0, #1
    173c:	ldr	w0, [sp, #60]
    1740:	cmp	w0, #0x4
    1744:	b.le	1750 <deflate+0x184>
    1748:	mov	w0, #0x9                   	// #9
    174c:	b	1754 <deflate+0x188>
    1750:	mov	w0, #0x0                   	// #0
    1754:	sub	w0, w2, w0
    1758:	cmp	w1, w0
    175c:	b.gt	1788 <deflate+0x1bc>
    1760:	ldr	w0, [sp, #20]
    1764:	cmp	w0, #0x4
    1768:	b.eq	1788 <deflate+0x1bc>  // b.none
    176c:	adrp	x0, 0 <z_errmsg>
    1770:	add	x0, x0, #0x0
    1774:	ldr	x1, [x0, #56]
    1778:	ldr	x0, [sp, #24]
    177c:	str	x1, [x0, #48]
    1780:	mov	w0, #0xfffffffb            	// #-5
    1784:	b	2a60 <deflate+0x1494>
    1788:	ldr	x0, [sp, #64]
    178c:	ldr	w0, [x0, #8]
    1790:	cmp	w0, #0x29a
    1794:	b.ne	17c4 <deflate+0x1f8>  // b.any
    1798:	ldr	x0, [sp, #24]
    179c:	ldr	w0, [x0, #8]
    17a0:	cmp	w0, #0x0
    17a4:	b.eq	17c4 <deflate+0x1f8>  // b.none
    17a8:	adrp	x0, 0 <z_errmsg>
    17ac:	add	x0, x0, #0x0
    17b0:	ldr	x1, [x0, #56]
    17b4:	ldr	x0, [sp, #24]
    17b8:	str	x1, [x0, #48]
    17bc:	mov	w0, #0xfffffffb            	// #-5
    17c0:	b	2a60 <deflate+0x1494>
    17c4:	ldr	x0, [sp, #64]
    17c8:	ldr	w0, [x0, #8]
    17cc:	cmp	w0, #0x2a
    17d0:	b.ne	196c <deflate+0x3a0>  // b.any
    17d4:	ldr	x0, [sp, #64]
    17d8:	ldr	w0, [x0, #84]
    17dc:	sub	w0, w0, #0x8
    17e0:	lsl	w0, w0, #4
    17e4:	add	w0, w0, #0x8
    17e8:	lsl	w0, w0, #8
    17ec:	str	w0, [sp, #108]
    17f0:	ldr	x0, [sp, #64]
    17f4:	ldr	w0, [x0, #200]
    17f8:	cmp	w0, #0x1
    17fc:	b.gt	1810 <deflate+0x244>
    1800:	ldr	x0, [sp, #64]
    1804:	ldr	w0, [x0, #196]
    1808:	cmp	w0, #0x1
    180c:	b.gt	1818 <deflate+0x24c>
    1810:	str	wzr, [sp, #104]
    1814:	b	1858 <deflate+0x28c>
    1818:	ldr	x0, [sp, #64]
    181c:	ldr	w0, [x0, #196]
    1820:	cmp	w0, #0x5
    1824:	b.gt	1834 <deflate+0x268>
    1828:	mov	w0, #0x1                   	// #1
    182c:	str	w0, [sp, #104]
    1830:	b	1858 <deflate+0x28c>
    1834:	ldr	x0, [sp, #64]
    1838:	ldr	w0, [x0, #196]
    183c:	cmp	w0, #0x6
    1840:	b.ne	1850 <deflate+0x284>  // b.any
    1844:	mov	w0, #0x2                   	// #2
    1848:	str	w0, [sp, #104]
    184c:	b	1858 <deflate+0x28c>
    1850:	mov	w0, #0x3                   	// #3
    1854:	str	w0, [sp, #104]
    1858:	ldr	w0, [sp, #104]
    185c:	lsl	w0, w0, #6
    1860:	ldr	w1, [sp, #108]
    1864:	orr	w0, w1, w0
    1868:	str	w0, [sp, #108]
    186c:	ldr	x0, [sp, #64]
    1870:	ldr	w0, [x0, #172]
    1874:	cmp	w0, #0x0
    1878:	b.eq	1888 <deflate+0x2bc>  // b.none
    187c:	ldr	w0, [sp, #108]
    1880:	orr	w0, w0, #0x20
    1884:	str	w0, [sp, #108]
    1888:	ldr	w2, [sp, #108]
    188c:	mov	w0, #0x1085                	// #4229
    1890:	movk	w0, #0x842, lsl #16
    1894:	umull	x0, w2, w0
    1898:	lsr	x0, x0, #32
    189c:	sub	w1, w2, w0
    18a0:	lsr	w1, w1, #1
    18a4:	add	w0, w1, w0
    18a8:	lsr	w1, w0, #4
    18ac:	mov	w0, w1
    18b0:	lsl	w0, w0, #5
    18b4:	sub	w0, w0, w1
    18b8:	sub	w1, w2, w0
    18bc:	ldr	w0, [sp, #108]
    18c0:	sub	w0, w0, w1
    18c4:	add	w0, w0, #0x1f
    18c8:	str	w0, [sp, #108]
    18cc:	ldr	w1, [sp, #108]
    18d0:	ldr	x0, [sp, #64]
    18d4:	bl	1434 <putShortMSB>
    18d8:	ldr	x0, [sp, #64]
    18dc:	ldr	w0, [x0, #172]
    18e0:	cmp	w0, #0x0
    18e4:	b.eq	1918 <deflate+0x34c>  // b.none
    18e8:	ldr	x0, [sp, #24]
    18ec:	ldr	x0, [x0, #96]
    18f0:	lsr	x0, x0, #16
    18f4:	mov	w1, w0
    18f8:	ldr	x0, [sp, #64]
    18fc:	bl	1434 <putShortMSB>
    1900:	ldr	x0, [sp, #24]
    1904:	ldr	x0, [x0, #96]
    1908:	and	w0, w0, #0xffff
    190c:	mov	w1, w0
    1910:	ldr	x0, [sp, #64]
    1914:	bl	1434 <putShortMSB>
    1918:	mov	w2, #0x0                   	// #0
    191c:	mov	x1, #0x0                   	// #0
    1920:	mov	x0, #0x0                   	// #0
    1924:	bl	0 <adler32>
    1928:	mov	x1, x0
    192c:	ldr	x0, [sp, #24]
    1930:	str	x1, [x0, #96]
    1934:	ldr	x0, [sp, #64]
    1938:	mov	w1, #0x71                  	// #113
    193c:	str	w1, [x0, #8]
    1940:	ldr	x0, [sp, #24]
    1944:	bl	14a8 <flush_pending>
    1948:	ldr	x0, [sp, #64]
    194c:	ldr	x0, [x0, #40]
    1950:	cmp	x0, #0x0
    1954:	b.eq	196c <deflate+0x3a0>  // b.none
    1958:	ldr	x0, [sp, #64]
    195c:	mov	w1, #0xffffffff            	// #-1
    1960:	str	w1, [x0, #76]
    1964:	mov	w0, #0x0                   	// #0
    1968:	b	2a60 <deflate+0x1494>
    196c:	ldr	x0, [sp, #64]
    1970:	ldr	w0, [x0, #8]
    1974:	cmp	w0, #0x39
    1978:	b.ne	1ed0 <deflate+0x904>  // b.any
    197c:	mov	w2, #0x0                   	// #0
    1980:	mov	x1, #0x0                   	// #0
    1984:	mov	x0, #0x0                   	// #0
    1988:	bl	0 <crc32>
    198c:	mov	x1, x0
    1990:	ldr	x0, [sp, #24]
    1994:	str	x1, [x0, #96]
    1998:	ldr	x0, [sp, #64]
    199c:	ldr	x1, [x0, #16]
    19a0:	ldr	x0, [sp, #64]
    19a4:	ldr	x0, [x0, #40]
    19a8:	add	x3, x0, #0x1
    19ac:	ldr	x2, [sp, #64]
    19b0:	str	x3, [x2, #40]
    19b4:	add	x0, x1, x0
    19b8:	mov	w1, #0x1f                  	// #31
    19bc:	strb	w1, [x0]
    19c0:	ldr	x0, [sp, #64]
    19c4:	ldr	x1, [x0, #16]
    19c8:	ldr	x0, [sp, #64]
    19cc:	ldr	x0, [x0, #40]
    19d0:	add	x3, x0, #0x1
    19d4:	ldr	x2, [sp, #64]
    19d8:	str	x3, [x2, #40]
    19dc:	add	x0, x1, x0
    19e0:	mov	w1, #0xffffff8b            	// #-117
    19e4:	strb	w1, [x0]
    19e8:	ldr	x0, [sp, #64]
    19ec:	ldr	x1, [x0, #16]
    19f0:	ldr	x0, [sp, #64]
    19f4:	ldr	x0, [x0, #40]
    19f8:	add	x3, x0, #0x1
    19fc:	ldr	x2, [sp, #64]
    1a00:	str	x3, [x2, #40]
    1a04:	add	x0, x1, x0
    1a08:	mov	w1, #0x8                   	// #8
    1a0c:	strb	w1, [x0]
    1a10:	ldr	x0, [sp, #64]
    1a14:	ldr	x0, [x0, #56]
    1a18:	cmp	x0, #0x0
    1a1c:	b.ne	1b9c <deflate+0x5d0>  // b.any
    1a20:	ldr	x0, [sp, #64]
    1a24:	ldr	x1, [x0, #16]
    1a28:	ldr	x0, [sp, #64]
    1a2c:	ldr	x0, [x0, #40]
    1a30:	add	x3, x0, #0x1
    1a34:	ldr	x2, [sp, #64]
    1a38:	str	x3, [x2, #40]
    1a3c:	add	x0, x1, x0
    1a40:	strb	wzr, [x0]
    1a44:	ldr	x0, [sp, #64]
    1a48:	ldr	x1, [x0, #16]
    1a4c:	ldr	x0, [sp, #64]
    1a50:	ldr	x0, [x0, #40]
    1a54:	add	x3, x0, #0x1
    1a58:	ldr	x2, [sp, #64]
    1a5c:	str	x3, [x2, #40]
    1a60:	add	x0, x1, x0
    1a64:	strb	wzr, [x0]
    1a68:	ldr	x0, [sp, #64]
    1a6c:	ldr	x1, [x0, #16]
    1a70:	ldr	x0, [sp, #64]
    1a74:	ldr	x0, [x0, #40]
    1a78:	add	x3, x0, #0x1
    1a7c:	ldr	x2, [sp, #64]
    1a80:	str	x3, [x2, #40]
    1a84:	add	x0, x1, x0
    1a88:	strb	wzr, [x0]
    1a8c:	ldr	x0, [sp, #64]
    1a90:	ldr	x1, [x0, #16]
    1a94:	ldr	x0, [sp, #64]
    1a98:	ldr	x0, [x0, #40]
    1a9c:	add	x3, x0, #0x1
    1aa0:	ldr	x2, [sp, #64]
    1aa4:	str	x3, [x2, #40]
    1aa8:	add	x0, x1, x0
    1aac:	strb	wzr, [x0]
    1ab0:	ldr	x0, [sp, #64]
    1ab4:	ldr	x1, [x0, #16]
    1ab8:	ldr	x0, [sp, #64]
    1abc:	ldr	x0, [x0, #40]
    1ac0:	add	x3, x0, #0x1
    1ac4:	ldr	x2, [sp, #64]
    1ac8:	str	x3, [x2, #40]
    1acc:	add	x0, x1, x0
    1ad0:	strb	wzr, [x0]
    1ad4:	ldr	x0, [sp, #64]
    1ad8:	ldr	w0, [x0, #196]
    1adc:	cmp	w0, #0x9
    1ae0:	b.eq	1b14 <deflate+0x548>  // b.none
    1ae4:	ldr	x0, [sp, #64]
    1ae8:	ldr	w0, [x0, #200]
    1aec:	cmp	w0, #0x1
    1af0:	b.gt	1b04 <deflate+0x538>
    1af4:	ldr	x0, [sp, #64]
    1af8:	ldr	w0, [x0, #196]
    1afc:	cmp	w0, #0x1
    1b00:	b.gt	1b0c <deflate+0x540>
    1b04:	mov	w0, #0x4                   	// #4
    1b08:	b	1b18 <deflate+0x54c>
    1b0c:	mov	w0, #0x0                   	// #0
    1b10:	b	1b18 <deflate+0x54c>
    1b14:	mov	w0, #0x2                   	// #2
    1b18:	ldr	x1, [sp, #64]
    1b1c:	ldr	x2, [x1, #16]
    1b20:	ldr	x1, [sp, #64]
    1b24:	ldr	x1, [x1, #40]
    1b28:	add	x4, x1, #0x1
    1b2c:	ldr	x3, [sp, #64]
    1b30:	str	x4, [x3, #40]
    1b34:	add	x1, x2, x1
    1b38:	strb	w0, [x1]
    1b3c:	ldr	x0, [sp, #64]
    1b40:	ldr	x1, [x0, #16]
    1b44:	ldr	x0, [sp, #64]
    1b48:	ldr	x0, [x0, #40]
    1b4c:	add	x3, x0, #0x1
    1b50:	ldr	x2, [sp, #64]
    1b54:	str	x3, [x2, #40]
    1b58:	add	x0, x1, x0
    1b5c:	mov	w1, #0x3                   	// #3
    1b60:	strb	w1, [x0]
    1b64:	ldr	x0, [sp, #64]
    1b68:	mov	w1, #0x71                  	// #113
    1b6c:	str	w1, [x0, #8]
    1b70:	ldr	x0, [sp, #24]
    1b74:	bl	14a8 <flush_pending>
    1b78:	ldr	x0, [sp, #64]
    1b7c:	ldr	x0, [x0, #40]
    1b80:	cmp	x0, #0x0
    1b84:	b.eq	1ed0 <deflate+0x904>  // b.none
    1b88:	ldr	x0, [sp, #64]
    1b8c:	mov	w1, #0xffffffff            	// #-1
    1b90:	str	w1, [x0, #76]
    1b94:	mov	w0, #0x0                   	// #0
    1b98:	b	2a60 <deflate+0x1494>
    1b9c:	ldr	x0, [sp, #64]
    1ba0:	ldr	x0, [x0, #56]
    1ba4:	ldr	w0, [x0]
    1ba8:	cmp	w0, #0x0
    1bac:	b.eq	1bb8 <deflate+0x5ec>  // b.none
    1bb0:	mov	w1, #0x1                   	// #1
    1bb4:	b	1bbc <deflate+0x5f0>
    1bb8:	mov	w1, #0x0                   	// #0
    1bbc:	ldr	x0, [sp, #64]
    1bc0:	ldr	x0, [x0, #56]
    1bc4:	ldr	w0, [x0, #68]
    1bc8:	cmp	w0, #0x0
    1bcc:	b.eq	1bd8 <deflate+0x60c>  // b.none
    1bd0:	mov	w0, #0x2                   	// #2
    1bd4:	b	1bdc <deflate+0x610>
    1bd8:	mov	w0, #0x0                   	// #0
    1bdc:	add	w0, w1, w0
    1be0:	and	w1, w0, #0xff
    1be4:	ldr	x0, [sp, #64]
    1be8:	ldr	x0, [x0, #56]
    1bec:	ldr	x0, [x0, #24]
    1bf0:	cmp	x0, #0x0
    1bf4:	b.ne	1c00 <deflate+0x634>  // b.any
    1bf8:	mov	w0, #0x0                   	// #0
    1bfc:	b	1c04 <deflate+0x638>
    1c00:	mov	w0, #0x4                   	// #4
    1c04:	add	w0, w0, w1
    1c08:	and	w1, w0, #0xff
    1c0c:	ldr	x0, [sp, #64]
    1c10:	ldr	x0, [x0, #56]
    1c14:	ldr	x0, [x0, #40]
    1c18:	cmp	x0, #0x0
    1c1c:	b.ne	1c28 <deflate+0x65c>  // b.any
    1c20:	mov	w0, #0x0                   	// #0
    1c24:	b	1c2c <deflate+0x660>
    1c28:	mov	w0, #0x8                   	// #8
    1c2c:	add	w0, w0, w1
    1c30:	and	w2, w0, #0xff
    1c34:	ldr	x0, [sp, #64]
    1c38:	ldr	x0, [x0, #56]
    1c3c:	ldr	x0, [x0, #56]
    1c40:	cmp	x0, #0x0
    1c44:	b.ne	1c50 <deflate+0x684>  // b.any
    1c48:	mov	w1, #0x0                   	// #0
    1c4c:	b	1c54 <deflate+0x688>
    1c50:	mov	w1, #0x10                  	// #16
    1c54:	ldr	x0, [sp, #64]
    1c58:	ldr	x3, [x0, #16]
    1c5c:	ldr	x0, [sp, #64]
    1c60:	ldr	x0, [x0, #40]
    1c64:	add	x5, x0, #0x1
    1c68:	ldr	x4, [sp, #64]
    1c6c:	str	x5, [x4, #40]
    1c70:	add	x0, x3, x0
    1c74:	add	w1, w1, w2
    1c78:	and	w1, w1, #0xff
    1c7c:	strb	w1, [x0]
    1c80:	ldr	x0, [sp, #64]
    1c84:	ldr	x0, [x0, #56]
    1c88:	ldr	x4, [x0, #8]
    1c8c:	ldr	x0, [sp, #64]
    1c90:	ldr	x1, [x0, #16]
    1c94:	ldr	x0, [sp, #64]
    1c98:	ldr	x0, [x0, #40]
    1c9c:	add	x3, x0, #0x1
    1ca0:	ldr	x2, [sp, #64]
    1ca4:	str	x3, [x2, #40]
    1ca8:	add	x0, x1, x0
    1cac:	and	w1, w4, #0xff
    1cb0:	strb	w1, [x0]
    1cb4:	ldr	x0, [sp, #64]
    1cb8:	ldr	x0, [x0, #56]
    1cbc:	ldr	x0, [x0, #8]
    1cc0:	lsr	x4, x0, #8
    1cc4:	ldr	x0, [sp, #64]
    1cc8:	ldr	x1, [x0, #16]
    1ccc:	ldr	x0, [sp, #64]
    1cd0:	ldr	x0, [x0, #40]
    1cd4:	add	x3, x0, #0x1
    1cd8:	ldr	x2, [sp, #64]
    1cdc:	str	x3, [x2, #40]
    1ce0:	add	x0, x1, x0
    1ce4:	and	w1, w4, #0xff
    1ce8:	strb	w1, [x0]
    1cec:	ldr	x0, [sp, #64]
    1cf0:	ldr	x0, [x0, #56]
    1cf4:	ldr	x0, [x0, #8]
    1cf8:	lsr	x4, x0, #16
    1cfc:	ldr	x0, [sp, #64]
    1d00:	ldr	x1, [x0, #16]
    1d04:	ldr	x0, [sp, #64]
    1d08:	ldr	x0, [x0, #40]
    1d0c:	add	x3, x0, #0x1
    1d10:	ldr	x2, [sp, #64]
    1d14:	str	x3, [x2, #40]
    1d18:	add	x0, x1, x0
    1d1c:	and	w1, w4, #0xff
    1d20:	strb	w1, [x0]
    1d24:	ldr	x0, [sp, #64]
    1d28:	ldr	x0, [x0, #56]
    1d2c:	ldr	x0, [x0, #8]
    1d30:	lsr	x4, x0, #24
    1d34:	ldr	x0, [sp, #64]
    1d38:	ldr	x1, [x0, #16]
    1d3c:	ldr	x0, [sp, #64]
    1d40:	ldr	x0, [x0, #40]
    1d44:	add	x3, x0, #0x1
    1d48:	ldr	x2, [sp, #64]
    1d4c:	str	x3, [x2, #40]
    1d50:	add	x0, x1, x0
    1d54:	and	w1, w4, #0xff
    1d58:	strb	w1, [x0]
    1d5c:	ldr	x0, [sp, #64]
    1d60:	ldr	w0, [x0, #196]
    1d64:	cmp	w0, #0x9
    1d68:	b.eq	1d9c <deflate+0x7d0>  // b.none
    1d6c:	ldr	x0, [sp, #64]
    1d70:	ldr	w0, [x0, #200]
    1d74:	cmp	w0, #0x1
    1d78:	b.gt	1d8c <deflate+0x7c0>
    1d7c:	ldr	x0, [sp, #64]
    1d80:	ldr	w0, [x0, #196]
    1d84:	cmp	w0, #0x1
    1d88:	b.gt	1d94 <deflate+0x7c8>
    1d8c:	mov	w0, #0x4                   	// #4
    1d90:	b	1da0 <deflate+0x7d4>
    1d94:	mov	w0, #0x0                   	// #0
    1d98:	b	1da0 <deflate+0x7d4>
    1d9c:	mov	w0, #0x2                   	// #2
    1da0:	ldr	x1, [sp, #64]
    1da4:	ldr	x2, [x1, #16]
    1da8:	ldr	x1, [sp, #64]
    1dac:	ldr	x1, [x1, #40]
    1db0:	add	x4, x1, #0x1
    1db4:	ldr	x3, [sp, #64]
    1db8:	str	x4, [x3, #40]
    1dbc:	add	x1, x2, x1
    1dc0:	strb	w0, [x1]
    1dc4:	ldr	x0, [sp, #64]
    1dc8:	ldr	x0, [x0, #56]
    1dcc:	ldr	w4, [x0, #20]
    1dd0:	ldr	x0, [sp, #64]
    1dd4:	ldr	x1, [x0, #16]
    1dd8:	ldr	x0, [sp, #64]
    1ddc:	ldr	x0, [x0, #40]
    1de0:	add	x3, x0, #0x1
    1de4:	ldr	x2, [sp, #64]
    1de8:	str	x3, [x2, #40]
    1dec:	add	x0, x1, x0
    1df0:	and	w1, w4, #0xff
    1df4:	strb	w1, [x0]
    1df8:	ldr	x0, [sp, #64]
    1dfc:	ldr	x0, [x0, #56]
    1e00:	ldr	x0, [x0, #24]
    1e04:	cmp	x0, #0x0
    1e08:	b.eq	1e78 <deflate+0x8ac>  // b.none
    1e0c:	ldr	x0, [sp, #64]
    1e10:	ldr	x0, [x0, #56]
    1e14:	ldr	w4, [x0, #32]
    1e18:	ldr	x0, [sp, #64]
    1e1c:	ldr	x1, [x0, #16]
    1e20:	ldr	x0, [sp, #64]
    1e24:	ldr	x0, [x0, #40]
    1e28:	add	x3, x0, #0x1
    1e2c:	ldr	x2, [sp, #64]
    1e30:	str	x3, [x2, #40]
    1e34:	add	x0, x1, x0
    1e38:	and	w1, w4, #0xff
    1e3c:	strb	w1, [x0]
    1e40:	ldr	x0, [sp, #64]
    1e44:	ldr	x0, [x0, #56]
    1e48:	ldr	w0, [x0, #32]
    1e4c:	lsr	w4, w0, #8
    1e50:	ldr	x0, [sp, #64]
    1e54:	ldr	x1, [x0, #16]
    1e58:	ldr	x0, [sp, #64]
    1e5c:	ldr	x0, [x0, #40]
    1e60:	add	x3, x0, #0x1
    1e64:	ldr	x2, [sp, #64]
    1e68:	str	x3, [x2, #40]
    1e6c:	add	x0, x1, x0
    1e70:	and	w1, w4, #0xff
    1e74:	strb	w1, [x0]
    1e78:	ldr	x0, [sp, #64]
    1e7c:	ldr	x0, [x0, #56]
    1e80:	ldr	w0, [x0, #68]
    1e84:	cmp	w0, #0x0
    1e88:	b.eq	1ebc <deflate+0x8f0>  // b.none
    1e8c:	ldr	x0, [sp, #24]
    1e90:	ldr	x3, [x0, #96]
    1e94:	ldr	x0, [sp, #64]
    1e98:	ldr	x1, [x0, #16]
    1e9c:	ldr	x0, [sp, #64]
    1ea0:	ldr	x0, [x0, #40]
    1ea4:	mov	w2, w0
    1ea8:	mov	x0, x3
    1eac:	bl	0 <crc32>
    1eb0:	mov	x1, x0
    1eb4:	ldr	x0, [sp, #24]
    1eb8:	str	x1, [x0, #96]
    1ebc:	ldr	x0, [sp, #64]
    1ec0:	str	xzr, [x0, #64]
    1ec4:	ldr	x0, [sp, #64]
    1ec8:	mov	w1, #0x45                  	// #69
    1ecc:	str	w1, [x0, #8]
    1ed0:	ldr	x0, [sp, #64]
    1ed4:	ldr	w0, [x0, #8]
    1ed8:	cmp	w0, #0x45
    1edc:	b.ne	214c <deflate+0xb80>  // b.any
    1ee0:	ldr	x0, [sp, #64]
    1ee4:	ldr	x0, [x0, #56]
    1ee8:	ldr	x0, [x0, #24]
    1eec:	cmp	x0, #0x0
    1ef0:	b.eq	2140 <deflate+0xb74>  // b.none
    1ef4:	ldr	x0, [sp, #64]
    1ef8:	ldr	x0, [x0, #40]
    1efc:	str	x0, [sp, #96]
    1f00:	ldr	x0, [sp, #64]
    1f04:	ldr	x0, [x0, #56]
    1f08:	ldr	w0, [x0, #32]
    1f0c:	and	w0, w0, #0xffff
    1f10:	ldr	x1, [sp, #64]
    1f14:	ldr	x1, [x1, #64]
    1f18:	sub	w0, w0, w1
    1f1c:	str	w0, [sp, #92]
    1f20:	b	2054 <deflate+0xa88>
    1f24:	ldr	x0, [sp, #64]
    1f28:	ldr	x0, [x0, #24]
    1f2c:	mov	w1, w0
    1f30:	ldr	x0, [sp, #64]
    1f34:	ldr	x0, [x0, #40]
    1f38:	sub	w0, w1, w0
    1f3c:	str	w0, [sp, #56]
    1f40:	ldr	x0, [sp, #64]
    1f44:	ldr	x1, [x0, #16]
    1f48:	ldr	x0, [sp, #64]
    1f4c:	ldr	x0, [x0, #40]
    1f50:	add	x3, x1, x0
    1f54:	ldr	x0, [sp, #64]
    1f58:	ldr	x0, [x0, #56]
    1f5c:	ldr	x1, [x0, #24]
    1f60:	ldr	x0, [sp, #64]
    1f64:	ldr	x0, [x0, #64]
    1f68:	add	x0, x1, x0
    1f6c:	ldr	w1, [sp, #56]
    1f70:	mov	x2, x1
    1f74:	mov	x1, x0
    1f78:	mov	x0, x3
    1f7c:	bl	0 <memcpy>
    1f80:	ldr	x0, [sp, #64]
    1f84:	ldr	x1, [x0, #24]
    1f88:	ldr	x0, [sp, #64]
    1f8c:	str	x1, [x0, #40]
    1f90:	ldr	x0, [sp, #64]
    1f94:	ldr	x0, [x0, #56]
    1f98:	ldr	w0, [x0, #68]
    1f9c:	cmp	w0, #0x0
    1fa0:	b.eq	1ffc <deflate+0xa30>  // b.none
    1fa4:	ldr	x0, [sp, #64]
    1fa8:	ldr	x0, [x0, #40]
    1fac:	ldr	x1, [sp, #96]
    1fb0:	cmp	x1, x0
    1fb4:	b.cs	1ffc <deflate+0xa30>  // b.hs, b.nlast
    1fb8:	ldr	x0, [sp, #24]
    1fbc:	ldr	x3, [x0, #96]
    1fc0:	ldr	x0, [sp, #64]
    1fc4:	ldr	x1, [x0, #16]
    1fc8:	ldr	x0, [sp, #96]
    1fcc:	add	x1, x1, x0
    1fd0:	ldr	x0, [sp, #64]
    1fd4:	ldr	x0, [x0, #40]
    1fd8:	mov	w2, w0
    1fdc:	ldr	x0, [sp, #96]
    1fe0:	sub	w0, w2, w0
    1fe4:	mov	w2, w0
    1fe8:	mov	x0, x3
    1fec:	bl	0 <crc32>
    1ff0:	mov	x1, x0
    1ff4:	ldr	x0, [sp, #24]
    1ff8:	str	x1, [x0, #96]
    1ffc:	ldr	x0, [sp, #64]
    2000:	ldr	x1, [x0, #64]
    2004:	ldr	w0, [sp, #56]
    2008:	add	x1, x1, x0
    200c:	ldr	x0, [sp, #64]
    2010:	str	x1, [x0, #64]
    2014:	ldr	x0, [sp, #24]
    2018:	bl	14a8 <flush_pending>
    201c:	ldr	x0, [sp, #64]
    2020:	ldr	x0, [x0, #40]
    2024:	cmp	x0, #0x0
    2028:	b.eq	2040 <deflate+0xa74>  // b.none
    202c:	ldr	x0, [sp, #64]
    2030:	mov	w1, #0xffffffff            	// #-1
    2034:	str	w1, [x0, #76]
    2038:	mov	w0, #0x0                   	// #0
    203c:	b	2a60 <deflate+0x1494>
    2040:	str	xzr, [sp, #96]
    2044:	ldr	w1, [sp, #92]
    2048:	ldr	w0, [sp, #56]
    204c:	sub	w0, w1, w0
    2050:	str	w0, [sp, #92]
    2054:	ldr	x0, [sp, #64]
    2058:	ldr	x1, [x0, #40]
    205c:	ldr	w0, [sp, #92]
    2060:	add	x1, x1, x0
    2064:	ldr	x0, [sp, #64]
    2068:	ldr	x0, [x0, #24]
    206c:	cmp	x1, x0
    2070:	b.hi	1f24 <deflate+0x958>  // b.pmore
    2074:	ldr	x0, [sp, #64]
    2078:	ldr	x1, [x0, #16]
    207c:	ldr	x0, [sp, #64]
    2080:	ldr	x0, [x0, #40]
    2084:	add	x3, x1, x0
    2088:	ldr	x0, [sp, #64]
    208c:	ldr	x0, [x0, #56]
    2090:	ldr	x1, [x0, #24]
    2094:	ldr	x0, [sp, #64]
    2098:	ldr	x0, [x0, #64]
    209c:	add	x0, x1, x0
    20a0:	ldr	w1, [sp, #92]
    20a4:	mov	x2, x1
    20a8:	mov	x1, x0
    20ac:	mov	x0, x3
    20b0:	bl	0 <memcpy>
    20b4:	ldr	x0, [sp, #64]
    20b8:	ldr	x1, [x0, #40]
    20bc:	ldr	w0, [sp, #92]
    20c0:	add	x1, x1, x0
    20c4:	ldr	x0, [sp, #64]
    20c8:	str	x1, [x0, #40]
    20cc:	ldr	x0, [sp, #64]
    20d0:	ldr	x0, [x0, #56]
    20d4:	ldr	w0, [x0, #68]
    20d8:	cmp	w0, #0x0
    20dc:	b.eq	2138 <deflate+0xb6c>  // b.none
    20e0:	ldr	x0, [sp, #64]
    20e4:	ldr	x0, [x0, #40]
    20e8:	ldr	x1, [sp, #96]
    20ec:	cmp	x1, x0
    20f0:	b.cs	2138 <deflate+0xb6c>  // b.hs, b.nlast
    20f4:	ldr	x0, [sp, #24]
    20f8:	ldr	x3, [x0, #96]
    20fc:	ldr	x0, [sp, #64]
    2100:	ldr	x1, [x0, #16]
    2104:	ldr	x0, [sp, #96]
    2108:	add	x1, x1, x0
    210c:	ldr	x0, [sp, #64]
    2110:	ldr	x0, [x0, #40]
    2114:	mov	w2, w0
    2118:	ldr	x0, [sp, #96]
    211c:	sub	w0, w2, w0
    2120:	mov	w2, w0
    2124:	mov	x0, x3
    2128:	bl	0 <crc32>
    212c:	mov	x1, x0
    2130:	ldr	x0, [sp, #24]
    2134:	str	x1, [x0, #96]
    2138:	ldr	x0, [sp, #64]
    213c:	str	xzr, [x0, #64]
    2140:	ldr	x0, [sp, #64]
    2144:	mov	w1, #0x49                  	// #73
    2148:	str	w1, [x0, #8]
    214c:	ldr	x0, [sp, #64]
    2150:	ldr	w0, [x0, #8]
    2154:	cmp	w0, #0x49
    2158:	b.ne	2314 <deflate+0xd48>  // b.any
    215c:	ldr	x0, [sp, #64]
    2160:	ldr	x0, [x0, #56]
    2164:	ldr	x0, [x0, #40]
    2168:	cmp	x0, #0x0
    216c:	b.eq	2308 <deflate+0xd3c>  // b.none
    2170:	ldr	x0, [sp, #64]
    2174:	ldr	x0, [x0, #40]
    2178:	str	x0, [sp, #80]
    217c:	ldr	x0, [sp, #64]
    2180:	ldr	x1, [x0, #40]
    2184:	ldr	x0, [sp, #64]
    2188:	ldr	x0, [x0, #24]
    218c:	cmp	x1, x0
    2190:	b.ne	2230 <deflate+0xc64>  // b.any
    2194:	ldr	x0, [sp, #64]
    2198:	ldr	x0, [x0, #56]
    219c:	ldr	w0, [x0, #68]
    21a0:	cmp	w0, #0x0
    21a4:	b.eq	2200 <deflate+0xc34>  // b.none
    21a8:	ldr	x0, [sp, #64]
    21ac:	ldr	x0, [x0, #40]
    21b0:	ldr	x1, [sp, #80]
    21b4:	cmp	x1, x0
    21b8:	b.cs	2200 <deflate+0xc34>  // b.hs, b.nlast
    21bc:	ldr	x0, [sp, #24]
    21c0:	ldr	x3, [x0, #96]
    21c4:	ldr	x0, [sp, #64]
    21c8:	ldr	x1, [x0, #16]
    21cc:	ldr	x0, [sp, #80]
    21d0:	add	x1, x1, x0
    21d4:	ldr	x0, [sp, #64]
    21d8:	ldr	x0, [x0, #40]
    21dc:	mov	w2, w0
    21e0:	ldr	x0, [sp, #80]
    21e4:	sub	w0, w2, w0
    21e8:	mov	w2, w0
    21ec:	mov	x0, x3
    21f0:	bl	0 <crc32>
    21f4:	mov	x1, x0
    21f8:	ldr	x0, [sp, #24]
    21fc:	str	x1, [x0, #96]
    2200:	ldr	x0, [sp, #24]
    2204:	bl	14a8 <flush_pending>
    2208:	ldr	x0, [sp, #64]
    220c:	ldr	x0, [x0, #40]
    2210:	cmp	x0, #0x0
    2214:	b.eq	222c <deflate+0xc60>  // b.none
    2218:	ldr	x0, [sp, #64]
    221c:	mov	w1, #0xffffffff            	// #-1
    2220:	str	w1, [x0, #76]
    2224:	mov	w0, #0x0                   	// #0
    2228:	b	2a60 <deflate+0x1494>
    222c:	str	xzr, [sp, #80]
    2230:	ldr	x0, [sp, #64]
    2234:	ldr	x0, [x0, #56]
    2238:	ldr	x1, [x0, #40]
    223c:	ldr	x0, [sp, #64]
    2240:	ldr	x0, [x0, #64]
    2244:	add	x3, x0, #0x1
    2248:	ldr	x2, [sp, #64]
    224c:	str	x3, [x2, #64]
    2250:	add	x0, x1, x0
    2254:	ldrb	w0, [x0]
    2258:	str	w0, [sp, #52]
    225c:	ldr	x0, [sp, #64]
    2260:	ldr	x1, [x0, #16]
    2264:	ldr	x0, [sp, #64]
    2268:	ldr	x0, [x0, #40]
    226c:	add	x3, x0, #0x1
    2270:	ldr	x2, [sp, #64]
    2274:	str	x3, [x2, #40]
    2278:	add	x0, x1, x0
    227c:	ldr	w1, [sp, #52]
    2280:	and	w1, w1, #0xff
    2284:	strb	w1, [x0]
    2288:	ldr	w0, [sp, #52]
    228c:	cmp	w0, #0x0
    2290:	b.ne	217c <deflate+0xbb0>  // b.any
    2294:	ldr	x0, [sp, #64]
    2298:	ldr	x0, [x0, #56]
    229c:	ldr	w0, [x0, #68]
    22a0:	cmp	w0, #0x0
    22a4:	b.eq	2300 <deflate+0xd34>  // b.none
    22a8:	ldr	x0, [sp, #64]
    22ac:	ldr	x0, [x0, #40]
    22b0:	ldr	x1, [sp, #80]
    22b4:	cmp	x1, x0
    22b8:	b.cs	2300 <deflate+0xd34>  // b.hs, b.nlast
    22bc:	ldr	x0, [sp, #24]
    22c0:	ldr	x3, [x0, #96]
    22c4:	ldr	x0, [sp, #64]
    22c8:	ldr	x1, [x0, #16]
    22cc:	ldr	x0, [sp, #80]
    22d0:	add	x1, x1, x0
    22d4:	ldr	x0, [sp, #64]
    22d8:	ldr	x0, [x0, #40]
    22dc:	mov	w2, w0
    22e0:	ldr	x0, [sp, #80]
    22e4:	sub	w0, w2, w0
    22e8:	mov	w2, w0
    22ec:	mov	x0, x3
    22f0:	bl	0 <crc32>
    22f4:	mov	x1, x0
    22f8:	ldr	x0, [sp, #24]
    22fc:	str	x1, [x0, #96]
    2300:	ldr	x0, [sp, #64]
    2304:	str	xzr, [x0, #64]
    2308:	ldr	x0, [sp, #64]
    230c:	mov	w1, #0x5b                  	// #91
    2310:	str	w1, [x0, #8]
    2314:	ldr	x0, [sp, #64]
    2318:	ldr	w0, [x0, #8]
    231c:	cmp	w0, #0x5b
    2320:	b.ne	24d4 <deflate+0xf08>  // b.any
    2324:	ldr	x0, [sp, #64]
    2328:	ldr	x0, [x0, #56]
    232c:	ldr	x0, [x0, #56]
    2330:	cmp	x0, #0x0
    2334:	b.eq	24c8 <deflate+0xefc>  // b.none
    2338:	ldr	x0, [sp, #64]
    233c:	ldr	x0, [x0, #40]
    2340:	str	x0, [sp, #72]
    2344:	ldr	x0, [sp, #64]
    2348:	ldr	x1, [x0, #40]
    234c:	ldr	x0, [sp, #64]
    2350:	ldr	x0, [x0, #24]
    2354:	cmp	x1, x0
    2358:	b.ne	23f8 <deflate+0xe2c>  // b.any
    235c:	ldr	x0, [sp, #64]
    2360:	ldr	x0, [x0, #56]
    2364:	ldr	w0, [x0, #68]
    2368:	cmp	w0, #0x0
    236c:	b.eq	23c8 <deflate+0xdfc>  // b.none
    2370:	ldr	x0, [sp, #64]
    2374:	ldr	x0, [x0, #40]
    2378:	ldr	x1, [sp, #72]
    237c:	cmp	x1, x0
    2380:	b.cs	23c8 <deflate+0xdfc>  // b.hs, b.nlast
    2384:	ldr	x0, [sp, #24]
    2388:	ldr	x3, [x0, #96]
    238c:	ldr	x0, [sp, #64]
    2390:	ldr	x1, [x0, #16]
    2394:	ldr	x0, [sp, #72]
    2398:	add	x1, x1, x0
    239c:	ldr	x0, [sp, #64]
    23a0:	ldr	x0, [x0, #40]
    23a4:	mov	w2, w0
    23a8:	ldr	x0, [sp, #72]
    23ac:	sub	w0, w2, w0
    23b0:	mov	w2, w0
    23b4:	mov	x0, x3
    23b8:	bl	0 <crc32>
    23bc:	mov	x1, x0
    23c0:	ldr	x0, [sp, #24]
    23c4:	str	x1, [x0, #96]
    23c8:	ldr	x0, [sp, #24]
    23cc:	bl	14a8 <flush_pending>
    23d0:	ldr	x0, [sp, #64]
    23d4:	ldr	x0, [x0, #40]
    23d8:	cmp	x0, #0x0
    23dc:	b.eq	23f4 <deflate+0xe28>  // b.none
    23e0:	ldr	x0, [sp, #64]
    23e4:	mov	w1, #0xffffffff            	// #-1
    23e8:	str	w1, [x0, #76]
    23ec:	mov	w0, #0x0                   	// #0
    23f0:	b	2a60 <deflate+0x1494>
    23f4:	str	xzr, [sp, #72]
    23f8:	ldr	x0, [sp, #64]
    23fc:	ldr	x0, [x0, #56]
    2400:	ldr	x1, [x0, #56]
    2404:	ldr	x0, [sp, #64]
    2408:	ldr	x0, [x0, #64]
    240c:	add	x3, x0, #0x1
    2410:	ldr	x2, [sp, #64]
    2414:	str	x3, [x2, #64]
    2418:	add	x0, x1, x0
    241c:	ldrb	w0, [x0]
    2420:	str	w0, [sp, #48]
    2424:	ldr	x0, [sp, #64]
    2428:	ldr	x1, [x0, #16]
    242c:	ldr	x0, [sp, #64]
    2430:	ldr	x0, [x0, #40]
    2434:	add	x3, x0, #0x1
    2438:	ldr	x2, [sp, #64]
    243c:	str	x3, [x2, #40]
    2440:	add	x0, x1, x0
    2444:	ldr	w1, [sp, #48]
    2448:	and	w1, w1, #0xff
    244c:	strb	w1, [x0]
    2450:	ldr	w0, [sp, #48]
    2454:	cmp	w0, #0x0
    2458:	b.ne	2344 <deflate+0xd78>  // b.any
    245c:	ldr	x0, [sp, #64]
    2460:	ldr	x0, [x0, #56]
    2464:	ldr	w0, [x0, #68]
    2468:	cmp	w0, #0x0
    246c:	b.eq	24c8 <deflate+0xefc>  // b.none
    2470:	ldr	x0, [sp, #64]
    2474:	ldr	x0, [x0, #40]
    2478:	ldr	x1, [sp, #72]
    247c:	cmp	x1, x0
    2480:	b.cs	24c8 <deflate+0xefc>  // b.hs, b.nlast
    2484:	ldr	x0, [sp, #24]
    2488:	ldr	x3, [x0, #96]
    248c:	ldr	x0, [sp, #64]
    2490:	ldr	x1, [x0, #16]
    2494:	ldr	x0, [sp, #72]
    2498:	add	x1, x1, x0
    249c:	ldr	x0, [sp, #64]
    24a0:	ldr	x0, [x0, #40]
    24a4:	mov	w2, w0
    24a8:	ldr	x0, [sp, #72]
    24ac:	sub	w0, w2, w0
    24b0:	mov	w2, w0
    24b4:	mov	x0, x3
    24b8:	bl	0 <crc32>
    24bc:	mov	x1, x0
    24c0:	ldr	x0, [sp, #24]
    24c4:	str	x1, [x0, #96]
    24c8:	ldr	x0, [sp, #64]
    24cc:	mov	w1, #0x67                  	// #103
    24d0:	str	w1, [x0, #8]
    24d4:	ldr	x0, [sp, #64]
    24d8:	ldr	w0, [x0, #8]
    24dc:	cmp	w0, #0x67
    24e0:	b.ne	25f8 <deflate+0x102c>  // b.any
    24e4:	ldr	x0, [sp, #64]
    24e8:	ldr	x0, [x0, #56]
    24ec:	ldr	w0, [x0, #68]
    24f0:	cmp	w0, #0x0
    24f4:	b.eq	25c0 <deflate+0xff4>  // b.none
    24f8:	ldr	x0, [sp, #64]
    24fc:	ldr	x0, [x0, #40]
    2500:	add	x1, x0, #0x2
    2504:	ldr	x0, [sp, #64]
    2508:	ldr	x0, [x0, #24]
    250c:	cmp	x1, x0
    2510:	b.ls	2540 <deflate+0xf74>  // b.plast
    2514:	ldr	x0, [sp, #24]
    2518:	bl	14a8 <flush_pending>
    251c:	ldr	x0, [sp, #64]
    2520:	ldr	x0, [x0, #40]
    2524:	cmp	x0, #0x0
    2528:	b.eq	2540 <deflate+0xf74>  // b.none
    252c:	ldr	x0, [sp, #64]
    2530:	mov	w1, #0xffffffff            	// #-1
    2534:	str	w1, [x0, #76]
    2538:	mov	w0, #0x0                   	// #0
    253c:	b	2a60 <deflate+0x1494>
    2540:	ldr	x0, [sp, #24]
    2544:	ldr	x4, [x0, #96]
    2548:	ldr	x0, [sp, #64]
    254c:	ldr	x1, [x0, #16]
    2550:	ldr	x0, [sp, #64]
    2554:	ldr	x0, [x0, #40]
    2558:	add	x3, x0, #0x1
    255c:	ldr	x2, [sp, #64]
    2560:	str	x3, [x2, #40]
    2564:	add	x0, x1, x0
    2568:	and	w1, w4, #0xff
    256c:	strb	w1, [x0]
    2570:	ldr	x0, [sp, #24]
    2574:	ldr	x0, [x0, #96]
    2578:	lsr	x4, x0, #8
    257c:	ldr	x0, [sp, #64]
    2580:	ldr	x1, [x0, #16]
    2584:	ldr	x0, [sp, #64]
    2588:	ldr	x0, [x0, #40]
    258c:	add	x3, x0, #0x1
    2590:	ldr	x2, [sp, #64]
    2594:	str	x3, [x2, #40]
    2598:	add	x0, x1, x0
    259c:	and	w1, w4, #0xff
    25a0:	strb	w1, [x0]
    25a4:	mov	w2, #0x0                   	// #0
    25a8:	mov	x1, #0x0                   	// #0
    25ac:	mov	x0, #0x0                   	// #0
    25b0:	bl	0 <crc32>
    25b4:	mov	x1, x0
    25b8:	ldr	x0, [sp, #24]
    25bc:	str	x1, [x0, #96]
    25c0:	ldr	x0, [sp, #64]
    25c4:	mov	w1, #0x71                  	// #113
    25c8:	str	w1, [x0, #8]
    25cc:	ldr	x0, [sp, #24]
    25d0:	bl	14a8 <flush_pending>
    25d4:	ldr	x0, [sp, #64]
    25d8:	ldr	x0, [x0, #40]
    25dc:	cmp	x0, #0x0
    25e0:	b.eq	25f8 <deflate+0x102c>  // b.none
    25e4:	ldr	x0, [sp, #64]
    25e8:	mov	w1, #0xffffffff            	// #-1
    25ec:	str	w1, [x0, #76]
    25f0:	mov	w0, #0x0                   	// #0
    25f4:	b	2a60 <deflate+0x1494>
    25f8:	ldr	x0, [sp, #24]
    25fc:	ldr	w0, [x0, #8]
    2600:	cmp	w0, #0x0
    2604:	b.ne	2634 <deflate+0x1068>  // b.any
    2608:	ldr	x0, [sp, #64]
    260c:	ldr	w0, [x0, #180]
    2610:	cmp	w0, #0x0
    2614:	b.ne	2634 <deflate+0x1068>  // b.any
    2618:	ldr	w0, [sp, #20]
    261c:	cmp	w0, #0x0
    2620:	b.eq	2818 <deflate+0x124c>  // b.none
    2624:	ldr	x0, [sp, #64]
    2628:	ldr	w0, [x0, #8]
    262c:	cmp	w0, #0x29a
    2630:	b.eq	2818 <deflate+0x124c>  // b.none
    2634:	ldr	x0, [sp, #64]
    2638:	ldr	w0, [x0, #196]
    263c:	cmp	w0, #0x0
    2640:	b.ne	2654 <deflate+0x1088>  // b.any
    2644:	ldr	w1, [sp, #20]
    2648:	ldr	x0, [sp, #64]
    264c:	bl	3994 <deflate_stored>
    2650:	b	26c0 <deflate+0x10f4>
    2654:	ldr	x0, [sp, #64]
    2658:	ldr	w0, [x0, #200]
    265c:	cmp	w0, #0x2
    2660:	b.ne	2674 <deflate+0x10a8>  // b.any
    2664:	ldr	w1, [sp, #20]
    2668:	ldr	x0, [sp, #64]
    266c:	bl	5d64 <deflate_huff>
    2670:	b	26c0 <deflate+0x10f4>
    2674:	ldr	x0, [sp, #64]
    2678:	ldr	w0, [x0, #200]
    267c:	cmp	w0, #0x3
    2680:	b.ne	2694 <deflate+0x10c8>  // b.any
    2684:	ldr	w1, [sp, #20]
    2688:	ldr	x0, [sp, #64]
    268c:	bl	55dc <deflate_rle>
    2690:	b	26c0 <deflate+0x10f4>
    2694:	ldr	x0, [sp, #64]
    2698:	ldr	w2, [x0, #196]
    269c:	adrp	x0, 0 <slide_hash>
    26a0:	add	x1, x0, #0x0
    26a4:	sxtw	x0, w2
    26a8:	lsl	x0, x0, #4
    26ac:	add	x0, x1, x0
    26b0:	ldr	x2, [x0, #8]
    26b4:	ldr	w1, [sp, #20]
    26b8:	ldr	x0, [sp, #64]
    26bc:	blr	x2
    26c0:	str	w0, [sp, #44]
    26c4:	ldr	w0, [sp, #44]
    26c8:	cmp	w0, #0x2
    26cc:	b.eq	26dc <deflate+0x1110>  // b.none
    26d0:	ldr	w0, [sp, #44]
    26d4:	cmp	w0, #0x3
    26d8:	b.ne	26e8 <deflate+0x111c>  // b.any
    26dc:	ldr	x0, [sp, #64]
    26e0:	mov	w1, #0x29a                 	// #666
    26e4:	str	w1, [x0, #8]
    26e8:	ldr	w0, [sp, #44]
    26ec:	cmp	w0, #0x0
    26f0:	b.eq	2700 <deflate+0x1134>  // b.none
    26f4:	ldr	w0, [sp, #44]
    26f8:	cmp	w0, #0x2
    26fc:	b.ne	2724 <deflate+0x1158>  // b.any
    2700:	ldr	x0, [sp, #24]
    2704:	ldr	w0, [x0, #32]
    2708:	cmp	w0, #0x0
    270c:	b.ne	271c <deflate+0x1150>  // b.any
    2710:	ldr	x0, [sp, #64]
    2714:	mov	w1, #0xffffffff            	// #-1
    2718:	str	w1, [x0, #76]
    271c:	mov	w0, #0x0                   	// #0
    2720:	b	2a60 <deflate+0x1494>
    2724:	ldr	w0, [sp, #44]
    2728:	cmp	w0, #0x1
    272c:	b.ne	2818 <deflate+0x124c>  // b.any
    2730:	ldr	w0, [sp, #20]
    2734:	cmp	w0, #0x1
    2738:	b.ne	2748 <deflate+0x117c>  // b.any
    273c:	ldr	x0, [sp, #64]
    2740:	bl	0 <_tr_align>
    2744:	b	27ec <deflate+0x1220>
    2748:	ldr	w0, [sp, #20]
    274c:	cmp	w0, #0x5
    2750:	b.eq	27ec <deflate+0x1220>  // b.none
    2754:	mov	w3, #0x0                   	// #0
    2758:	mov	x2, #0x0                   	// #0
    275c:	mov	x1, #0x0                   	// #0
    2760:	ldr	x0, [sp, #64]
    2764:	bl	0 <_tr_stored_block>
    2768:	ldr	w0, [sp, #20]
    276c:	cmp	w0, #0x3
    2770:	b.ne	27ec <deflate+0x1220>  // b.any
    2774:	ldr	x0, [sp, #64]
    2778:	ldr	x1, [x0, #120]
    277c:	ldr	x0, [sp, #64]
    2780:	ldr	w0, [x0, #132]
    2784:	sub	w0, w0, #0x1
    2788:	mov	w0, w0
    278c:	lsl	x0, x0, #1
    2790:	add	x0, x1, x0
    2794:	strh	wzr, [x0]
    2798:	ldr	x0, [sp, #64]
    279c:	ldr	x3, [x0, #120]
    27a0:	ldr	x0, [sp, #64]
    27a4:	ldr	w0, [x0, #132]
    27a8:	sub	w0, w0, #0x1
    27ac:	mov	w0, w0
    27b0:	lsl	x0, x0, #1
    27b4:	mov	x2, x0
    27b8:	mov	w1, #0x0                   	// #0
    27bc:	mov	x0, x3
    27c0:	bl	0 <memset>
    27c4:	ldr	x0, [sp, #64]
    27c8:	ldr	w0, [x0, #180]
    27cc:	cmp	w0, #0x0
    27d0:	b.ne	27ec <deflate+0x1220>  // b.any
    27d4:	ldr	x0, [sp, #64]
    27d8:	str	wzr, [x0, #172]
    27dc:	ldr	x0, [sp, #64]
    27e0:	str	xzr, [x0, #152]
    27e4:	ldr	x0, [sp, #64]
    27e8:	str	wzr, [x0, #5932]
    27ec:	ldr	x0, [sp, #24]
    27f0:	bl	14a8 <flush_pending>
    27f4:	ldr	x0, [sp, #24]
    27f8:	ldr	w0, [x0, #32]
    27fc:	cmp	w0, #0x0
    2800:	b.ne	2818 <deflate+0x124c>  // b.any
    2804:	ldr	x0, [sp, #64]
    2808:	mov	w1, #0xffffffff            	// #-1
    280c:	str	w1, [x0, #76]
    2810:	mov	w0, #0x0                   	// #0
    2814:	b	2a60 <deflate+0x1494>
    2818:	ldr	w0, [sp, #20]
    281c:	cmp	w0, #0x4
    2820:	b.eq	282c <deflate+0x1260>  // b.none
    2824:	mov	w0, #0x0                   	// #0
    2828:	b	2a60 <deflate+0x1494>
    282c:	ldr	x0, [sp, #64]
    2830:	ldr	w0, [x0, #48]
    2834:	cmp	w0, #0x0
    2838:	b.gt	2844 <deflate+0x1278>
    283c:	mov	w0, #0x1                   	// #1
    2840:	b	2a60 <deflate+0x1494>
    2844:	ldr	x0, [sp, #64]
    2848:	ldr	w0, [x0, #48]
    284c:	cmp	w0, #0x2
    2850:	b.ne	29f0 <deflate+0x1424>  // b.any
    2854:	ldr	x0, [sp, #24]
    2858:	ldr	x4, [x0, #96]
    285c:	ldr	x0, [sp, #64]
    2860:	ldr	x1, [x0, #16]
    2864:	ldr	x0, [sp, #64]
    2868:	ldr	x0, [x0, #40]
    286c:	add	x3, x0, #0x1
    2870:	ldr	x2, [sp, #64]
    2874:	str	x3, [x2, #40]
    2878:	add	x0, x1, x0
    287c:	and	w1, w4, #0xff
    2880:	strb	w1, [x0]
    2884:	ldr	x0, [sp, #24]
    2888:	ldr	x0, [x0, #96]
    288c:	lsr	x4, x0, #8
    2890:	ldr	x0, [sp, #64]
    2894:	ldr	x1, [x0, #16]
    2898:	ldr	x0, [sp, #64]
    289c:	ldr	x0, [x0, #40]
    28a0:	add	x3, x0, #0x1
    28a4:	ldr	x2, [sp, #64]
    28a8:	str	x3, [x2, #40]
    28ac:	add	x0, x1, x0
    28b0:	and	w1, w4, #0xff
    28b4:	strb	w1, [x0]
    28b8:	ldr	x0, [sp, #24]
    28bc:	ldr	x0, [x0, #96]
    28c0:	lsr	x4, x0, #16
    28c4:	ldr	x0, [sp, #64]
    28c8:	ldr	x1, [x0, #16]
    28cc:	ldr	x0, [sp, #64]
    28d0:	ldr	x0, [x0, #40]
    28d4:	add	x3, x0, #0x1
    28d8:	ldr	x2, [sp, #64]
    28dc:	str	x3, [x2, #40]
    28e0:	add	x0, x1, x0
    28e4:	and	w1, w4, #0xff
    28e8:	strb	w1, [x0]
    28ec:	ldr	x0, [sp, #24]
    28f0:	ldr	x0, [x0, #96]
    28f4:	lsr	x4, x0, #24
    28f8:	ldr	x0, [sp, #64]
    28fc:	ldr	x1, [x0, #16]
    2900:	ldr	x0, [sp, #64]
    2904:	ldr	x0, [x0, #40]
    2908:	add	x3, x0, #0x1
    290c:	ldr	x2, [sp, #64]
    2910:	str	x3, [x2, #40]
    2914:	add	x0, x1, x0
    2918:	and	w1, w4, #0xff
    291c:	strb	w1, [x0]
    2920:	ldr	x0, [sp, #24]
    2924:	ldr	x4, [x0, #16]
    2928:	ldr	x0, [sp, #64]
    292c:	ldr	x1, [x0, #16]
    2930:	ldr	x0, [sp, #64]
    2934:	ldr	x0, [x0, #40]
    2938:	add	x3, x0, #0x1
    293c:	ldr	x2, [sp, #64]
    2940:	str	x3, [x2, #40]
    2944:	add	x0, x1, x0
    2948:	and	w1, w4, #0xff
    294c:	strb	w1, [x0]
    2950:	ldr	x0, [sp, #24]
    2954:	ldr	x0, [x0, #16]
    2958:	lsr	x4, x0, #8
    295c:	ldr	x0, [sp, #64]
    2960:	ldr	x1, [x0, #16]
    2964:	ldr	x0, [sp, #64]
    2968:	ldr	x0, [x0, #40]
    296c:	add	x3, x0, #0x1
    2970:	ldr	x2, [sp, #64]
    2974:	str	x3, [x2, #40]
    2978:	add	x0, x1, x0
    297c:	and	w1, w4, #0xff
    2980:	strb	w1, [x0]
    2984:	ldr	x0, [sp, #24]
    2988:	ldr	x0, [x0, #16]
    298c:	lsr	x4, x0, #16
    2990:	ldr	x0, [sp, #64]
    2994:	ldr	x1, [x0, #16]
    2998:	ldr	x0, [sp, #64]
    299c:	ldr	x0, [x0, #40]
    29a0:	add	x3, x0, #0x1
    29a4:	ldr	x2, [sp, #64]
    29a8:	str	x3, [x2, #40]
    29ac:	add	x0, x1, x0
    29b0:	and	w1, w4, #0xff
    29b4:	strb	w1, [x0]
    29b8:	ldr	x0, [sp, #24]
    29bc:	ldr	x0, [x0, #16]
    29c0:	lsr	x4, x0, #24
    29c4:	ldr	x0, [sp, #64]
    29c8:	ldr	x1, [x0, #16]
    29cc:	ldr	x0, [sp, #64]
    29d0:	ldr	x0, [x0, #40]
    29d4:	add	x3, x0, #0x1
    29d8:	ldr	x2, [sp, #64]
    29dc:	str	x3, [x2, #40]
    29e0:	add	x0, x1, x0
    29e4:	and	w1, w4, #0xff
    29e8:	strb	w1, [x0]
    29ec:	b	2a20 <deflate+0x1454>
    29f0:	ldr	x0, [sp, #24]
    29f4:	ldr	x0, [x0, #96]
    29f8:	lsr	x0, x0, #16
    29fc:	mov	w1, w0
    2a00:	ldr	x0, [sp, #64]
    2a04:	bl	1434 <putShortMSB>
    2a08:	ldr	x0, [sp, #24]
    2a0c:	ldr	x0, [x0, #96]
    2a10:	and	w0, w0, #0xffff
    2a14:	mov	w1, w0
    2a18:	ldr	x0, [sp, #64]
    2a1c:	bl	1434 <putShortMSB>
    2a20:	ldr	x0, [sp, #24]
    2a24:	bl	14a8 <flush_pending>
    2a28:	ldr	x0, [sp, #64]
    2a2c:	ldr	w0, [x0, #48]
    2a30:	cmp	w0, #0x0
    2a34:	b.le	2a4c <deflate+0x1480>
    2a38:	ldr	x0, [sp, #64]
    2a3c:	ldr	w0, [x0, #48]
    2a40:	neg	w1, w0
    2a44:	ldr	x0, [sp, #64]
    2a48:	str	w1, [x0, #48]
    2a4c:	ldr	x0, [sp, #64]
    2a50:	ldr	x0, [x0, #40]
    2a54:	cmp	x0, #0x0
    2a58:	cset	w0, eq  // eq = none
    2a5c:	and	w0, w0, #0xff
    2a60:	ldp	x29, x30, [sp], #112
    2a64:	ret

0000000000002a68 <deflateEnd>:
    2a68:	stp	x29, x30, [sp, #-48]!
    2a6c:	mov	x29, sp
    2a70:	str	x0, [sp, #24]
    2a74:	ldr	x0, [sp, #24]
    2a78:	bl	648 <deflateStateCheck>
    2a7c:	cmp	w0, #0x0
    2a80:	b.eq	2a8c <deflateEnd+0x24>  // b.none
    2a84:	mov	w0, #0xfffffffe            	// #-2
    2a88:	b	2bd0 <deflateEnd+0x168>
    2a8c:	ldr	x0, [sp, #24]
    2a90:	ldr	x0, [x0, #56]
    2a94:	ldr	w0, [x0, #8]
    2a98:	str	w0, [sp, #44]
    2a9c:	ldr	x0, [sp, #24]
    2aa0:	ldr	x0, [x0, #56]
    2aa4:	ldr	x0, [x0, #16]
    2aa8:	cmp	x0, #0x0
    2aac:	b.eq	2ad8 <deflateEnd+0x70>  // b.none
    2ab0:	ldr	x0, [sp, #24]
    2ab4:	ldr	x2, [x0, #72]
    2ab8:	ldr	x0, [sp, #24]
    2abc:	ldr	x3, [x0, #80]
    2ac0:	ldr	x0, [sp, #24]
    2ac4:	ldr	x0, [x0, #56]
    2ac8:	ldr	x0, [x0, #16]
    2acc:	mov	x1, x0
    2ad0:	mov	x0, x3
    2ad4:	blr	x2
    2ad8:	ldr	x0, [sp, #24]
    2adc:	ldr	x0, [x0, #56]
    2ae0:	ldr	x0, [x0, #120]
    2ae4:	cmp	x0, #0x0
    2ae8:	b.eq	2b14 <deflateEnd+0xac>  // b.none
    2aec:	ldr	x0, [sp, #24]
    2af0:	ldr	x2, [x0, #72]
    2af4:	ldr	x0, [sp, #24]
    2af8:	ldr	x3, [x0, #80]
    2afc:	ldr	x0, [sp, #24]
    2b00:	ldr	x0, [x0, #56]
    2b04:	ldr	x0, [x0, #120]
    2b08:	mov	x1, x0
    2b0c:	mov	x0, x3
    2b10:	blr	x2
    2b14:	ldr	x0, [sp, #24]
    2b18:	ldr	x0, [x0, #56]
    2b1c:	ldr	x0, [x0, #112]
    2b20:	cmp	x0, #0x0
    2b24:	b.eq	2b50 <deflateEnd+0xe8>  // b.none
    2b28:	ldr	x0, [sp, #24]
    2b2c:	ldr	x2, [x0, #72]
    2b30:	ldr	x0, [sp, #24]
    2b34:	ldr	x3, [x0, #80]
    2b38:	ldr	x0, [sp, #24]
    2b3c:	ldr	x0, [x0, #56]
    2b40:	ldr	x0, [x0, #112]
    2b44:	mov	x1, x0
    2b48:	mov	x0, x3
    2b4c:	blr	x2
    2b50:	ldr	x0, [sp, #24]
    2b54:	ldr	x0, [x0, #56]
    2b58:	ldr	x0, [x0, #96]
    2b5c:	cmp	x0, #0x0
    2b60:	b.eq	2b8c <deflateEnd+0x124>  // b.none
    2b64:	ldr	x0, [sp, #24]
    2b68:	ldr	x2, [x0, #72]
    2b6c:	ldr	x0, [sp, #24]
    2b70:	ldr	x3, [x0, #80]
    2b74:	ldr	x0, [sp, #24]
    2b78:	ldr	x0, [x0, #56]
    2b7c:	ldr	x0, [x0, #96]
    2b80:	mov	x1, x0
    2b84:	mov	x0, x3
    2b88:	blr	x2
    2b8c:	ldr	x0, [sp, #24]
    2b90:	ldr	x2, [x0, #72]
    2b94:	ldr	x0, [sp, #24]
    2b98:	ldr	x3, [x0, #80]
    2b9c:	ldr	x0, [sp, #24]
    2ba0:	ldr	x0, [x0, #56]
    2ba4:	mov	x1, x0
    2ba8:	mov	x0, x3
    2bac:	blr	x2
    2bb0:	ldr	x0, [sp, #24]
    2bb4:	str	xzr, [x0, #56]
    2bb8:	ldr	w0, [sp, #44]
    2bbc:	cmp	w0, #0x71
    2bc0:	b.ne	2bcc <deflateEnd+0x164>  // b.any
    2bc4:	mov	w0, #0xfffffffd            	// #-3
    2bc8:	b	2bd0 <deflateEnd+0x168>
    2bcc:	mov	w0, #0x0                   	// #0
    2bd0:	ldp	x29, x30, [sp], #48
    2bd4:	ret

0000000000002bd8 <deflateCopy>:
    2bd8:	stp	x29, x30, [sp, #-64]!
    2bdc:	mov	x29, sp
    2be0:	str	x0, [sp, #24]
    2be4:	str	x1, [sp, #16]
    2be8:	ldr	x0, [sp, #16]
    2bec:	bl	648 <deflateStateCheck>
    2bf0:	cmp	w0, #0x0
    2bf4:	b.ne	2c04 <deflateCopy+0x2c>  // b.any
    2bf8:	ldr	x0, [sp, #24]
    2bfc:	cmp	x0, #0x0
    2c00:	b.ne	2c0c <deflateCopy+0x34>  // b.any
    2c04:	mov	w0, #0xfffffffe            	// #-2
    2c08:	b	2f00 <deflateCopy+0x328>
    2c0c:	ldr	x0, [sp, #16]
    2c10:	ldr	x0, [x0, #56]
    2c14:	str	x0, [sp, #56]
    2c18:	mov	x2, #0x70                  	// #112
    2c1c:	ldr	x1, [sp, #16]
    2c20:	ldr	x0, [sp, #24]
    2c24:	bl	0 <memcpy>
    2c28:	ldr	x0, [sp, #24]
    2c2c:	ldr	x3, [x0, #64]
    2c30:	ldr	x0, [sp, #24]
    2c34:	ldr	x0, [x0, #80]
    2c38:	mov	w2, #0x1740                	// #5952
    2c3c:	mov	w1, #0x1                   	// #1
    2c40:	blr	x3
    2c44:	str	x0, [sp, #48]
    2c48:	ldr	x0, [sp, #48]
    2c4c:	cmp	x0, #0x0
    2c50:	b.ne	2c5c <deflateCopy+0x84>  // b.any
    2c54:	mov	w0, #0xfffffffc            	// #-4
    2c58:	b	2f00 <deflateCopy+0x328>
    2c5c:	ldr	x0, [sp, #24]
    2c60:	ldr	x1, [sp, #48]
    2c64:	str	x1, [x0, #56]
    2c68:	mov	x2, #0x1740                	// #5952
    2c6c:	ldr	x1, [sp, #56]
    2c70:	ldr	x0, [sp, #48]
    2c74:	bl	0 <memcpy>
    2c78:	ldr	x0, [sp, #48]
    2c7c:	ldr	x1, [sp, #24]
    2c80:	str	x1, [x0]
    2c84:	ldr	x0, [sp, #24]
    2c88:	ldr	x3, [x0, #64]
    2c8c:	ldr	x0, [sp, #24]
    2c90:	ldr	x4, [x0, #80]
    2c94:	ldr	x0, [sp, #48]
    2c98:	ldr	w0, [x0, #80]
    2c9c:	mov	w2, #0x2                   	// #2
    2ca0:	mov	w1, w0
    2ca4:	mov	x0, x4
    2ca8:	blr	x3
    2cac:	mov	x1, x0
    2cb0:	ldr	x0, [sp, #48]
    2cb4:	str	x1, [x0, #96]
    2cb8:	ldr	x0, [sp, #24]
    2cbc:	ldr	x3, [x0, #64]
    2cc0:	ldr	x0, [sp, #24]
    2cc4:	ldr	x4, [x0, #80]
    2cc8:	ldr	x0, [sp, #48]
    2ccc:	ldr	w0, [x0, #80]
    2cd0:	mov	w2, #0x2                   	// #2
    2cd4:	mov	w1, w0
    2cd8:	mov	x0, x4
    2cdc:	blr	x3
    2ce0:	mov	x1, x0
    2ce4:	ldr	x0, [sp, #48]
    2ce8:	str	x1, [x0, #112]
    2cec:	ldr	x0, [sp, #24]
    2cf0:	ldr	x3, [x0, #64]
    2cf4:	ldr	x0, [sp, #24]
    2cf8:	ldr	x4, [x0, #80]
    2cfc:	ldr	x0, [sp, #48]
    2d00:	ldr	w0, [x0, #132]
    2d04:	mov	w2, #0x2                   	// #2
    2d08:	mov	w1, w0
    2d0c:	mov	x0, x4
    2d10:	blr	x3
    2d14:	mov	x1, x0
    2d18:	ldr	x0, [sp, #48]
    2d1c:	str	x1, [x0, #120]
    2d20:	ldr	x0, [sp, #24]
    2d24:	ldr	x3, [x0, #64]
    2d28:	ldr	x0, [sp, #24]
    2d2c:	ldr	x4, [x0, #80]
    2d30:	ldr	x0, [sp, #48]
    2d34:	ldr	w0, [x0, #5896]
    2d38:	mov	w2, #0x4                   	// #4
    2d3c:	mov	w1, w0
    2d40:	mov	x0, x4
    2d44:	blr	x3
    2d48:	str	x0, [sp, #40]
    2d4c:	ldr	x0, [sp, #48]
    2d50:	ldr	x1, [sp, #40]
    2d54:	str	x1, [x0, #16]
    2d58:	ldr	x0, [sp, #48]
    2d5c:	ldr	x0, [x0, #96]
    2d60:	cmp	x0, #0x0
    2d64:	b.eq	2d98 <deflateCopy+0x1c0>  // b.none
    2d68:	ldr	x0, [sp, #48]
    2d6c:	ldr	x0, [x0, #112]
    2d70:	cmp	x0, #0x0
    2d74:	b.eq	2d98 <deflateCopy+0x1c0>  // b.none
    2d78:	ldr	x0, [sp, #48]
    2d7c:	ldr	x0, [x0, #120]
    2d80:	cmp	x0, #0x0
    2d84:	b.eq	2d98 <deflateCopy+0x1c0>  // b.none
    2d88:	ldr	x0, [sp, #48]
    2d8c:	ldr	x0, [x0, #16]
    2d90:	cmp	x0, #0x0
    2d94:	b.ne	2da8 <deflateCopy+0x1d0>  // b.any
    2d98:	ldr	x0, [sp, #24]
    2d9c:	bl	2a68 <deflateEnd>
    2da0:	mov	w0, #0xfffffffc            	// #-4
    2da4:	b	2f00 <deflateCopy+0x328>
    2da8:	ldr	x0, [sp, #48]
    2dac:	ldr	x3, [x0, #96]
    2db0:	ldr	x0, [sp, #56]
    2db4:	ldr	x1, [x0, #96]
    2db8:	ldr	x0, [sp, #48]
    2dbc:	ldr	w0, [x0, #80]
    2dc0:	lsl	w0, w0, #1
    2dc4:	mov	w0, w0
    2dc8:	mov	x2, x0
    2dcc:	mov	x0, x3
    2dd0:	bl	0 <memcpy>
    2dd4:	ldr	x0, [sp, #48]
    2dd8:	ldr	x3, [x0, #112]
    2ddc:	ldr	x0, [sp, #56]
    2de0:	ldr	x1, [x0, #112]
    2de4:	ldr	x0, [sp, #48]
    2de8:	ldr	w0, [x0, #80]
    2dec:	mov	w0, w0
    2df0:	lsl	x0, x0, #1
    2df4:	mov	x2, x0
    2df8:	mov	x0, x3
    2dfc:	bl	0 <memcpy>
    2e00:	ldr	x0, [sp, #48]
    2e04:	ldr	x3, [x0, #120]
    2e08:	ldr	x0, [sp, #56]
    2e0c:	ldr	x1, [x0, #120]
    2e10:	ldr	x0, [sp, #48]
    2e14:	ldr	w0, [x0, #132]
    2e18:	mov	w0, w0
    2e1c:	lsl	x0, x0, #1
    2e20:	mov	x2, x0
    2e24:	mov	x0, x3
    2e28:	bl	0 <memcpy>
    2e2c:	ldr	x0, [sp, #48]
    2e30:	ldr	x3, [x0, #16]
    2e34:	ldr	x0, [sp, #56]
    2e38:	ldr	x1, [x0, #16]
    2e3c:	ldr	x0, [sp, #48]
    2e40:	ldr	x0, [x0, #24]
    2e44:	mov	w0, w0
    2e48:	mov	x2, x0
    2e4c:	mov	x0, x3
    2e50:	bl	0 <memcpy>
    2e54:	ldr	x0, [sp, #48]
    2e58:	ldr	x0, [x0, #16]
    2e5c:	ldr	x1, [sp, #56]
    2e60:	ldr	x2, [x1, #32]
    2e64:	ldr	x1, [sp, #56]
    2e68:	ldr	x1, [x1, #16]
    2e6c:	sub	x1, x2, x1
    2e70:	add	x1, x0, x1
    2e74:	ldr	x0, [sp, #48]
    2e78:	str	x1, [x0, #32]
    2e7c:	ldr	x0, [sp, #48]
    2e80:	ldr	w0, [x0, #5896]
    2e84:	lsr	w0, w0, #1
    2e88:	mov	w0, w0
    2e8c:	lsl	x0, x0, #1
    2e90:	ldr	x1, [sp, #40]
    2e94:	add	x1, x1, x0
    2e98:	ldr	x0, [sp, #48]
    2e9c:	str	x1, [x0, #5904]
    2ea0:	ldr	x0, [sp, #48]
    2ea4:	ldr	x2, [x0, #16]
    2ea8:	ldr	x0, [sp, #48]
    2eac:	ldr	w0, [x0, #5896]
    2eb0:	mov	w1, w0
    2eb4:	mov	x0, x1
    2eb8:	lsl	x0, x0, #1
    2ebc:	add	x0, x0, x1
    2ec0:	add	x1, x2, x0
    2ec4:	ldr	x0, [sp, #48]
    2ec8:	str	x1, [x0, #5888]
    2ecc:	ldr	x0, [sp, #48]
    2ed0:	add	x1, x0, #0xd4
    2ed4:	ldr	x0, [sp, #48]
    2ed8:	str	x1, [x0, #2904]
    2edc:	ldr	x0, [sp, #48]
    2ee0:	add	x1, x0, #0x9c8
    2ee4:	ldr	x0, [sp, #48]
    2ee8:	str	x1, [x0, #2928]
    2eec:	ldr	x0, [sp, #48]
    2ef0:	add	x1, x0, #0xabc
    2ef4:	ldr	x0, [sp, #48]
    2ef8:	str	x1, [x0, #2952]
    2efc:	mov	w0, #0x0                   	// #0
    2f00:	ldp	x29, x30, [sp], #64
    2f04:	ret

0000000000002f08 <read_buf>:
    2f08:	stp	x29, x30, [sp, #-64]!
    2f0c:	mov	x29, sp
    2f10:	str	x0, [sp, #40]
    2f14:	str	x1, [sp, #32]
    2f18:	str	w2, [sp, #28]
    2f1c:	ldr	x0, [sp, #40]
    2f20:	ldr	w0, [x0, #8]
    2f24:	str	w0, [sp, #60]
    2f28:	ldr	w1, [sp, #60]
    2f2c:	ldr	w0, [sp, #28]
    2f30:	cmp	w1, w0
    2f34:	b.ls	2f40 <read_buf+0x38>  // b.plast
    2f38:	ldr	w0, [sp, #28]
    2f3c:	str	w0, [sp, #60]
    2f40:	ldr	w0, [sp, #60]
    2f44:	cmp	w0, #0x0
    2f48:	b.ne	2f54 <read_buf+0x4c>  // b.any
    2f4c:	mov	w0, #0x0                   	// #0
    2f50:	b	3028 <read_buf+0x120>
    2f54:	ldr	x0, [sp, #40]
    2f58:	ldr	w1, [x0, #8]
    2f5c:	ldr	w0, [sp, #60]
    2f60:	sub	w1, w1, w0
    2f64:	ldr	x0, [sp, #40]
    2f68:	str	w1, [x0, #8]
    2f6c:	ldr	x0, [sp, #40]
    2f70:	ldr	x0, [x0]
    2f74:	ldr	w1, [sp, #60]
    2f78:	mov	x2, x1
    2f7c:	mov	x1, x0
    2f80:	ldr	x0, [sp, #32]
    2f84:	bl	0 <memcpy>
    2f88:	ldr	x0, [sp, #40]
    2f8c:	ldr	x0, [x0, #56]
    2f90:	ldr	w0, [x0, #48]
    2f94:	cmp	w0, #0x1
    2f98:	b.ne	2fc0 <read_buf+0xb8>  // b.any
    2f9c:	ldr	x0, [sp, #40]
    2fa0:	ldr	x0, [x0, #96]
    2fa4:	ldr	w2, [sp, #60]
    2fa8:	ldr	x1, [sp, #32]
    2fac:	bl	0 <adler32>
    2fb0:	mov	x1, x0
    2fb4:	ldr	x0, [sp, #40]
    2fb8:	str	x1, [x0, #96]
    2fbc:	b	2ff4 <read_buf+0xec>
    2fc0:	ldr	x0, [sp, #40]
    2fc4:	ldr	x0, [x0, #56]
    2fc8:	ldr	w0, [x0, #48]
    2fcc:	cmp	w0, #0x2
    2fd0:	b.ne	2ff4 <read_buf+0xec>  // b.any
    2fd4:	ldr	x0, [sp, #40]
    2fd8:	ldr	x0, [x0, #96]
    2fdc:	ldr	w2, [sp, #60]
    2fe0:	ldr	x1, [sp, #32]
    2fe4:	bl	0 <crc32>
    2fe8:	mov	x1, x0
    2fec:	ldr	x0, [sp, #40]
    2ff0:	str	x1, [x0, #96]
    2ff4:	ldr	x0, [sp, #40]
    2ff8:	ldr	x1, [x0]
    2ffc:	ldr	w0, [sp, #60]
    3000:	add	x1, x1, x0
    3004:	ldr	x0, [sp, #40]
    3008:	str	x1, [x0]
    300c:	ldr	x0, [sp, #40]
    3010:	ldr	x1, [x0, #16]
    3014:	ldr	w0, [sp, #60]
    3018:	add	x1, x1, x0
    301c:	ldr	x0, [sp, #40]
    3020:	str	x1, [x0, #16]
    3024:	ldr	w0, [sp, #60]
    3028:	ldp	x29, x30, [sp], #64
    302c:	ret

0000000000003030 <lm_init>:
    3030:	stp	x29, x30, [sp, #-32]!
    3034:	mov	x29, sp
    3038:	str	x0, [sp, #24]
    303c:	ldr	x0, [sp, #24]
    3040:	ldr	w0, [x0, #80]
    3044:	mov	w0, w0
    3048:	lsl	x1, x0, #1
    304c:	ldr	x0, [sp, #24]
    3050:	str	x1, [x0, #104]
    3054:	ldr	x0, [sp, #24]
    3058:	ldr	x1, [x0, #120]
    305c:	ldr	x0, [sp, #24]
    3060:	ldr	w0, [x0, #132]
    3064:	sub	w0, w0, #0x1
    3068:	mov	w0, w0
    306c:	lsl	x0, x0, #1
    3070:	add	x0, x1, x0
    3074:	strh	wzr, [x0]
    3078:	ldr	x0, [sp, #24]
    307c:	ldr	x3, [x0, #120]
    3080:	ldr	x0, [sp, #24]
    3084:	ldr	w0, [x0, #132]
    3088:	sub	w0, w0, #0x1
    308c:	mov	w0, w0
    3090:	lsl	x0, x0, #1
    3094:	mov	x2, x0
    3098:	mov	w1, #0x0                   	// #0
    309c:	mov	x0, x3
    30a0:	bl	0 <memset>
    30a4:	ldr	x0, [sp, #24]
    30a8:	ldr	w2, [x0, #196]
    30ac:	adrp	x0, 0 <slide_hash>
    30b0:	add	x1, x0, #0x0
    30b4:	sxtw	x0, w2
    30b8:	lsl	x0, x0, #4
    30bc:	add	x0, x1, x0
    30c0:	ldrh	w0, [x0, #2]
    30c4:	mov	w1, w0
    30c8:	ldr	x0, [sp, #24]
    30cc:	str	w1, [x0, #192]
    30d0:	ldr	x0, [sp, #24]
    30d4:	ldr	w2, [x0, #196]
    30d8:	adrp	x0, 0 <slide_hash>
    30dc:	add	x1, x0, #0x0
    30e0:	sxtw	x0, w2
    30e4:	lsl	x0, x0, #4
    30e8:	add	x0, x1, x0
    30ec:	ldrh	w0, [x0]
    30f0:	mov	w1, w0
    30f4:	ldr	x0, [sp, #24]
    30f8:	str	w1, [x0, #204]
    30fc:	ldr	x0, [sp, #24]
    3100:	ldr	w2, [x0, #196]
    3104:	adrp	x0, 0 <slide_hash>
    3108:	add	x1, x0, #0x0
    310c:	sxtw	x0, w2
    3110:	lsl	x0, x0, #4
    3114:	add	x0, x1, x0
    3118:	ldrh	w0, [x0, #4]
    311c:	mov	w1, w0
    3120:	ldr	x0, [sp, #24]
    3124:	str	w1, [x0, #208]
    3128:	ldr	x0, [sp, #24]
    312c:	ldr	w2, [x0, #196]
    3130:	adrp	x0, 0 <slide_hash>
    3134:	add	x1, x0, #0x0
    3138:	sxtw	x0, w2
    313c:	lsl	x0, x0, #4
    3140:	add	x0, x1, x0
    3144:	ldrh	w0, [x0, #6]
    3148:	mov	w1, w0
    314c:	ldr	x0, [sp, #24]
    3150:	str	w1, [x0, #188]
    3154:	ldr	x0, [sp, #24]
    3158:	str	wzr, [x0, #172]
    315c:	ldr	x0, [sp, #24]
    3160:	str	xzr, [x0, #152]
    3164:	ldr	x0, [sp, #24]
    3168:	str	wzr, [x0, #180]
    316c:	ldr	x0, [sp, #24]
    3170:	str	wzr, [x0, #5932]
    3174:	ldr	x0, [sp, #24]
    3178:	mov	w1, #0x2                   	// #2
    317c:	str	w1, [x0, #184]
    3180:	ldr	x0, [sp, #24]
    3184:	ldr	w1, [x0, #184]
    3188:	ldr	x0, [sp, #24]
    318c:	str	w1, [x0, #160]
    3190:	ldr	x0, [sp, #24]
    3194:	str	wzr, [x0, #168]
    3198:	ldr	x0, [sp, #24]
    319c:	str	wzr, [x0, #128]
    31a0:	nop
    31a4:	ldp	x29, x30, [sp], #32
    31a8:	ret

00000000000031ac <longest_match>:
    31ac:	stp	x19, x20, [sp, #-96]!
    31b0:	stp	x21, x22, [sp, #16]
    31b4:	str	x23, [sp, #32]
    31b8:	str	x0, [sp, #56]
    31bc:	str	w1, [sp, #52]
    31c0:	ldr	x0, [sp, #56]
    31c4:	ldr	w0, [x0, #188]
    31c8:	str	w0, [sp, #92]
    31cc:	ldr	x0, [sp, #56]
    31d0:	ldr	x1, [x0, #96]
    31d4:	ldr	x0, [sp, #56]
    31d8:	ldr	w0, [x0, #172]
    31dc:	mov	w0, w0
    31e0:	add	x19, x1, x0
    31e4:	ldr	x0, [sp, #56]
    31e8:	ldr	w0, [x0, #184]
    31ec:	str	w0, [sp, #88]
    31f0:	ldr	x0, [sp, #56]
    31f4:	ldr	w0, [x0, #208]
    31f8:	str	w0, [sp, #84]
    31fc:	ldr	x0, [sp, #56]
    3200:	ldr	w1, [x0, #172]
    3204:	ldr	x0, [sp, #56]
    3208:	ldr	w0, [x0, #80]
    320c:	sub	w0, w0, #0x106
    3210:	cmp	w1, w0
    3214:	b.ls	3234 <longest_match+0x88>  // b.plast
    3218:	ldr	x0, [sp, #56]
    321c:	ldr	w1, [x0, #172]
    3220:	ldr	x0, [sp, #56]
    3224:	ldr	w0, [x0, #80]
    3228:	sub	w0, w1, w0
    322c:	add	w0, w0, #0x106
    3230:	b	3238 <longest_match+0x8c>
    3234:	mov	w0, #0x0                   	// #0
    3238:	str	w0, [sp, #80]
    323c:	ldr	x0, [sp, #56]
    3240:	ldr	x0, [x0, #112]
    3244:	str	x0, [sp, #72]
    3248:	ldr	x0, [sp, #56]
    324c:	ldr	w0, [x0, #88]
    3250:	str	w0, [sp, #68]
    3254:	ldr	x0, [sp, #56]
    3258:	ldr	x1, [x0, #96]
    325c:	ldr	x0, [sp, #56]
    3260:	ldr	w0, [x0, #172]
    3264:	mov	w0, w0
    3268:	add	x0, x0, #0x102
    326c:	add	x21, x1, x0
    3270:	ldrsw	x0, [sp, #88]
    3274:	sub	x0, x0, #0x1
    3278:	add	x0, x19, x0
    327c:	ldrb	w22, [x0]
    3280:	ldrsw	x0, [sp, #88]
    3284:	add	x0, x19, x0
    3288:	ldrb	w23, [x0]
    328c:	ldr	x0, [sp, #56]
    3290:	ldr	w1, [x0, #184]
    3294:	ldr	x0, [sp, #56]
    3298:	ldr	w0, [x0, #204]
    329c:	cmp	w1, w0
    32a0:	b.cc	32b0 <longest_match+0x104>  // b.lo, b.ul, b.last
    32a4:	ldr	w0, [sp, #92]
    32a8:	lsr	w0, w0, #2
    32ac:	str	w0, [sp, #92]
    32b0:	ldr	x0, [sp, #56]
    32b4:	ldr	w1, [x0, #180]
    32b8:	ldr	w0, [sp, #84]
    32bc:	cmp	w1, w0
    32c0:	b.cs	32d0 <longest_match+0x124>  // b.hs, b.nlast
    32c4:	ldr	x0, [sp, #56]
    32c8:	ldr	w0, [x0, #180]
    32cc:	str	w0, [sp, #84]
    32d0:	ldr	x0, [sp, #56]
    32d4:	ldr	x1, [x0, #96]
    32d8:	ldr	w0, [sp, #52]
    32dc:	add	x20, x1, x0
    32e0:	ldrsw	x0, [sp, #88]
    32e4:	add	x0, x20, x0
    32e8:	ldrb	w0, [x0]
    32ec:	cmp	w23, w0
    32f0:	b.ne	3460 <longest_match+0x2b4>  // b.any
    32f4:	ldrsw	x0, [sp, #88]
    32f8:	sub	x0, x0, #0x1
    32fc:	add	x0, x20, x0
    3300:	ldrb	w0, [x0]
    3304:	cmp	w22, w0
    3308:	b.ne	3460 <longest_match+0x2b4>  // b.any
    330c:	ldrb	w1, [x20]
    3310:	ldrb	w0, [x19]
    3314:	cmp	w1, w0
    3318:	b.ne	3460 <longest_match+0x2b4>  // b.any
    331c:	add	x20, x20, #0x1
    3320:	ldrb	w1, [x20]
    3324:	add	x0, x19, #0x1
    3328:	ldrb	w0, [x0]
    332c:	cmp	w1, w0
    3330:	b.ne	3460 <longest_match+0x2b4>  // b.any
    3334:	add	x19, x19, #0x2
    3338:	add	x20, x20, #0x1
    333c:	add	x19, x19, #0x1
    3340:	ldrb	w1, [x19]
    3344:	add	x20, x20, #0x1
    3348:	ldrb	w0, [x20]
    334c:	cmp	w1, w0
    3350:	b.ne	3404 <longest_match+0x258>  // b.any
    3354:	add	x19, x19, #0x1
    3358:	ldrb	w1, [x19]
    335c:	add	x20, x20, #0x1
    3360:	ldrb	w0, [x20]
    3364:	cmp	w1, w0
    3368:	b.ne	3404 <longest_match+0x258>  // b.any
    336c:	add	x19, x19, #0x1
    3370:	ldrb	w1, [x19]
    3374:	add	x20, x20, #0x1
    3378:	ldrb	w0, [x20]
    337c:	cmp	w1, w0
    3380:	b.ne	3404 <longest_match+0x258>  // b.any
    3384:	add	x19, x19, #0x1
    3388:	ldrb	w1, [x19]
    338c:	add	x20, x20, #0x1
    3390:	ldrb	w0, [x20]
    3394:	cmp	w1, w0
    3398:	b.ne	3404 <longest_match+0x258>  // b.any
    339c:	add	x19, x19, #0x1
    33a0:	ldrb	w1, [x19]
    33a4:	add	x20, x20, #0x1
    33a8:	ldrb	w0, [x20]
    33ac:	cmp	w1, w0
    33b0:	b.ne	3404 <longest_match+0x258>  // b.any
    33b4:	add	x19, x19, #0x1
    33b8:	ldrb	w1, [x19]
    33bc:	add	x20, x20, #0x1
    33c0:	ldrb	w0, [x20]
    33c4:	cmp	w1, w0
    33c8:	b.ne	3404 <longest_match+0x258>  // b.any
    33cc:	add	x19, x19, #0x1
    33d0:	ldrb	w1, [x19]
    33d4:	add	x20, x20, #0x1
    33d8:	ldrb	w0, [x20]
    33dc:	cmp	w1, w0
    33e0:	b.ne	3404 <longest_match+0x258>  // b.any
    33e4:	add	x19, x19, #0x1
    33e8:	ldrb	w1, [x19]
    33ec:	add	x20, x20, #0x1
    33f0:	ldrb	w0, [x20]
    33f4:	cmp	w1, w0
    33f8:	b.ne	3404 <longest_match+0x258>  // b.any
    33fc:	cmp	x19, x21
    3400:	b.cc	333c <longest_match+0x190>  // b.lo, b.ul, b.last
    3404:	sub	x0, x21, x19
    3408:	mov	w1, w0
    340c:	mov	w0, #0x102                 	// #258
    3410:	sub	w20, w0, w1
    3414:	sub	x19, x21, #0x102
    3418:	ldr	w0, [sp, #88]
    341c:	cmp	w20, w0
    3420:	b.le	3464 <longest_match+0x2b8>
    3424:	ldr	x0, [sp, #56]
    3428:	ldr	w1, [sp, #52]
    342c:	str	w1, [x0, #176]
    3430:	str	w20, [sp, #88]
    3434:	ldr	w0, [sp, #84]
    3438:	cmp	w20, w0
    343c:	b.ge	34b4 <longest_match+0x308>  // b.tcont
    3440:	ldrsw	x0, [sp, #88]
    3444:	sub	x0, x0, #0x1
    3448:	add	x0, x19, x0
    344c:	ldrb	w22, [x0]
    3450:	ldrsw	x0, [sp, #88]
    3454:	add	x0, x19, x0
    3458:	ldrb	w23, [x0]
    345c:	b	3464 <longest_match+0x2b8>
    3460:	nop
    3464:	ldr	w1, [sp, #52]
    3468:	ldr	w0, [sp, #68]
    346c:	and	w0, w1, w0
    3470:	mov	w0, w0
    3474:	lsl	x0, x0, #1
    3478:	ldr	x1, [sp, #72]
    347c:	add	x0, x1, x0
    3480:	ldrh	w0, [x0]
    3484:	str	w0, [sp, #52]
    3488:	ldr	w1, [sp, #52]
    348c:	ldr	w0, [sp, #80]
    3490:	cmp	w1, w0
    3494:	b.ls	34b8 <longest_match+0x30c>  // b.plast
    3498:	ldr	w0, [sp, #92]
    349c:	sub	w0, w0, #0x1
    34a0:	str	w0, [sp, #92]
    34a4:	ldr	w0, [sp, #92]
    34a8:	cmp	w0, #0x0
    34ac:	b.ne	32d0 <longest_match+0x124>  // b.any
    34b0:	b	34b8 <longest_match+0x30c>
    34b4:	nop
    34b8:	ldr	x0, [sp, #56]
    34bc:	ldr	w1, [x0, #180]
    34c0:	ldr	w0, [sp, #88]
    34c4:	cmp	w1, w0
    34c8:	b.cc	34d4 <longest_match+0x328>  // b.lo, b.ul, b.last
    34cc:	ldr	w0, [sp, #88]
    34d0:	b	34dc <longest_match+0x330>
    34d4:	ldr	x0, [sp, #56]
    34d8:	ldr	w0, [x0, #180]
    34dc:	ldp	x21, x22, [sp, #16]
    34e0:	ldr	x23, [sp, #32]
    34e4:	ldp	x19, x20, [sp], #96
    34e8:	ret

00000000000034ec <fill_window>:
    34ec:	stp	x29, x30, [sp, #-64]!
    34f0:	mov	x29, sp
    34f4:	str	x0, [sp, #24]
    34f8:	ldr	x0, [sp, #24]
    34fc:	ldr	w0, [x0, #80]
    3500:	str	w0, [sp, #44]
    3504:	ldr	x0, [sp, #24]
    3508:	ldr	x0, [x0, #104]
    350c:	mov	w1, w0
    3510:	ldr	x0, [sp, #24]
    3514:	ldr	w0, [x0, #180]
    3518:	sub	w1, w1, w0
    351c:	ldr	x0, [sp, #24]
    3520:	ldr	w0, [x0, #172]
    3524:	sub	w0, w1, w0
    3528:	str	w0, [sp, #56]
    352c:	ldr	x0, [sp, #24]
    3530:	ldr	w1, [x0, #172]
    3534:	ldr	x0, [sp, #24]
    3538:	ldr	w2, [x0, #80]
    353c:	ldr	w0, [sp, #44]
    3540:	add	w0, w2, w0
    3544:	sub	w0, w0, #0x106
    3548:	cmp	w1, w0
    354c:	b.cc	35e8 <fill_window+0xfc>  // b.lo, b.ul, b.last
    3550:	ldr	x0, [sp, #24]
    3554:	ldr	x3, [x0, #96]
    3558:	ldr	x0, [sp, #24]
    355c:	ldr	x1, [x0, #96]
    3560:	ldr	w0, [sp, #44]
    3564:	add	x4, x1, x0
    3568:	ldr	w1, [sp, #44]
    356c:	ldr	w0, [sp, #56]
    3570:	sub	w0, w1, w0
    3574:	mov	w0, w0
    3578:	mov	x2, x0
    357c:	mov	x1, x4
    3580:	mov	x0, x3
    3584:	bl	0 <memcpy>
    3588:	ldr	x0, [sp, #24]
    358c:	ldr	w1, [x0, #176]
    3590:	ldr	w0, [sp, #44]
    3594:	sub	w1, w1, w0
    3598:	ldr	x0, [sp, #24]
    359c:	str	w1, [x0, #176]
    35a0:	ldr	x0, [sp, #24]
    35a4:	ldr	w1, [x0, #172]
    35a8:	ldr	w0, [sp, #44]
    35ac:	sub	w1, w1, w0
    35b0:	ldr	x0, [sp, #24]
    35b4:	str	w1, [x0, #172]
    35b8:	ldr	x0, [sp, #24]
    35bc:	ldr	x1, [x0, #152]
    35c0:	ldr	w0, [sp, #44]
    35c4:	sub	x1, x1, x0
    35c8:	ldr	x0, [sp, #24]
    35cc:	str	x1, [x0, #152]
    35d0:	ldr	x0, [sp, #24]
    35d4:	bl	0 <slide_hash>
    35d8:	ldr	w1, [sp, #56]
    35dc:	ldr	w0, [sp, #44]
    35e0:	add	w0, w1, w0
    35e4:	str	w0, [sp, #56]
    35e8:	ldr	x0, [sp, #24]
    35ec:	ldr	x0, [x0]
    35f0:	ldr	w0, [x0, #8]
    35f4:	cmp	w0, #0x0
    35f8:	b.eq	382c <fill_window+0x340>  // b.none
    35fc:	ldr	x0, [sp, #24]
    3600:	ldr	x3, [x0]
    3604:	ldr	x0, [sp, #24]
    3608:	ldr	x1, [x0, #96]
    360c:	ldr	x0, [sp, #24]
    3610:	ldr	w0, [x0, #172]
    3614:	mov	w2, w0
    3618:	ldr	x0, [sp, #24]
    361c:	ldr	w0, [x0, #180]
    3620:	mov	w0, w0
    3624:	add	x0, x2, x0
    3628:	add	x0, x1, x0
    362c:	ldr	w2, [sp, #56]
    3630:	mov	x1, x0
    3634:	mov	x0, x3
    3638:	bl	2f08 <read_buf>
    363c:	str	w0, [sp, #40]
    3640:	ldr	x0, [sp, #24]
    3644:	ldr	w1, [x0, #180]
    3648:	ldr	w0, [sp, #40]
    364c:	add	w1, w1, w0
    3650:	ldr	x0, [sp, #24]
    3654:	str	w1, [x0, #180]
    3658:	ldr	x0, [sp, #24]
    365c:	ldr	w1, [x0, #180]
    3660:	ldr	x0, [sp, #24]
    3664:	ldr	w0, [x0, #5932]
    3668:	add	w0, w1, w0
    366c:	cmp	w0, #0x2
    3670:	b.ls	3804 <fill_window+0x318>  // b.plast
    3674:	ldr	x0, [sp, #24]
    3678:	ldr	w1, [x0, #172]
    367c:	ldr	x0, [sp, #24]
    3680:	ldr	w0, [x0, #5932]
    3684:	sub	w0, w1, w0
    3688:	str	w0, [sp, #60]
    368c:	ldr	x0, [sp, #24]
    3690:	ldr	x1, [x0, #96]
    3694:	ldr	w0, [sp, #60]
    3698:	add	x0, x1, x0
    369c:	ldrb	w0, [x0]
    36a0:	mov	w1, w0
    36a4:	ldr	x0, [sp, #24]
    36a8:	str	w1, [x0, #128]
    36ac:	ldr	x0, [sp, #24]
    36b0:	ldr	w1, [x0, #128]
    36b4:	ldr	x0, [sp, #24]
    36b8:	ldr	w0, [x0, #144]
    36bc:	lsl	w0, w1, w0
    36c0:	ldr	x1, [sp, #24]
    36c4:	ldr	x2, [x1, #96]
    36c8:	ldr	w1, [sp, #60]
    36cc:	add	w1, w1, #0x1
    36d0:	mov	w1, w1
    36d4:	add	x1, x2, x1
    36d8:	ldrb	w1, [x1]
    36dc:	eor	w1, w0, w1
    36e0:	ldr	x0, [sp, #24]
    36e4:	ldr	w0, [x0, #140]
    36e8:	and	w1, w1, w0
    36ec:	ldr	x0, [sp, #24]
    36f0:	str	w1, [x0, #128]
    36f4:	b	37ec <fill_window+0x300>
    36f8:	ldr	x0, [sp, #24]
    36fc:	ldr	w1, [x0, #128]
    3700:	ldr	x0, [sp, #24]
    3704:	ldr	w0, [x0, #144]
    3708:	lsl	w0, w1, w0
    370c:	ldr	x1, [sp, #24]
    3710:	ldr	x2, [x1, #96]
    3714:	ldr	w1, [sp, #60]
    3718:	add	w1, w1, #0x2
    371c:	mov	w1, w1
    3720:	add	x1, x2, x1
    3724:	ldrb	w1, [x1]
    3728:	eor	w1, w0, w1
    372c:	ldr	x0, [sp, #24]
    3730:	ldr	w0, [x0, #140]
    3734:	and	w1, w1, w0
    3738:	ldr	x0, [sp, #24]
    373c:	str	w1, [x0, #128]
    3740:	ldr	x0, [sp, #24]
    3744:	ldr	x1, [x0, #120]
    3748:	ldr	x0, [sp, #24]
    374c:	ldr	w0, [x0, #128]
    3750:	mov	w0, w0
    3754:	lsl	x0, x0, #1
    3758:	add	x1, x1, x0
    375c:	ldr	x0, [sp, #24]
    3760:	ldr	x2, [x0, #112]
    3764:	ldr	x0, [sp, #24]
    3768:	ldr	w3, [x0, #88]
    376c:	ldr	w0, [sp, #60]
    3770:	and	w0, w3, w0
    3774:	mov	w0, w0
    3778:	lsl	x0, x0, #1
    377c:	add	x0, x2, x0
    3780:	ldrh	w1, [x1]
    3784:	strh	w1, [x0]
    3788:	ldr	x0, [sp, #24]
    378c:	ldr	x1, [x0, #120]
    3790:	ldr	x0, [sp, #24]
    3794:	ldr	w0, [x0, #128]
    3798:	mov	w0, w0
    379c:	lsl	x0, x0, #1
    37a0:	add	x0, x1, x0
    37a4:	ldr	w1, [sp, #60]
    37a8:	and	w1, w1, #0xffff
    37ac:	strh	w1, [x0]
    37b0:	ldr	w0, [sp, #60]
    37b4:	add	w0, w0, #0x1
    37b8:	str	w0, [sp, #60]
    37bc:	ldr	x0, [sp, #24]
    37c0:	ldr	w0, [x0, #5932]
    37c4:	sub	w1, w0, #0x1
    37c8:	ldr	x0, [sp, #24]
    37cc:	str	w1, [x0, #5932]
    37d0:	ldr	x0, [sp, #24]
    37d4:	ldr	w1, [x0, #180]
    37d8:	ldr	x0, [sp, #24]
    37dc:	ldr	w0, [x0, #5932]
    37e0:	add	w0, w1, w0
    37e4:	cmp	w0, #0x2
    37e8:	b.ls	3800 <fill_window+0x314>  // b.plast
    37ec:	ldr	x0, [sp, #24]
    37f0:	ldr	w0, [x0, #5932]
    37f4:	cmp	w0, #0x0
    37f8:	b.ne	36f8 <fill_window+0x20c>  // b.any
    37fc:	b	3804 <fill_window+0x318>
    3800:	nop
    3804:	ldr	x0, [sp, #24]
    3808:	ldr	w0, [x0, #180]
    380c:	cmp	w0, #0x105
    3810:	b.hi	3830 <fill_window+0x344>  // b.pmore
    3814:	ldr	x0, [sp, #24]
    3818:	ldr	x0, [x0]
    381c:	ldr	w0, [x0, #8]
    3820:	cmp	w0, #0x0
    3824:	b.ne	3504 <fill_window+0x18>  // b.any
    3828:	b	3830 <fill_window+0x344>
    382c:	nop
    3830:	ldr	x0, [sp, #24]
    3834:	ldr	x1, [x0, #5944]
    3838:	ldr	x0, [sp, #24]
    383c:	ldr	x0, [x0, #104]
    3840:	cmp	x1, x0
    3844:	b.cs	3988 <fill_window+0x49c>  // b.hs, b.nlast
    3848:	ldr	x0, [sp, #24]
    384c:	ldr	w0, [x0, #172]
    3850:	mov	w1, w0
    3854:	ldr	x0, [sp, #24]
    3858:	ldr	w0, [x0, #180]
    385c:	mov	w0, w0
    3860:	add	x0, x1, x0
    3864:	str	x0, [sp, #32]
    3868:	ldr	x0, [sp, #24]
    386c:	ldr	x0, [x0, #5944]
    3870:	ldr	x1, [sp, #32]
    3874:	cmp	x1, x0
    3878:	b.ls	38e0 <fill_window+0x3f4>  // b.plast
    387c:	ldr	x0, [sp, #24]
    3880:	ldr	x1, [x0, #104]
    3884:	ldr	x0, [sp, #32]
    3888:	sub	x0, x1, x0
    388c:	str	x0, [sp, #48]
    3890:	ldr	x0, [sp, #48]
    3894:	cmp	x0, #0x102
    3898:	b.ls	38a4 <fill_window+0x3b8>  // b.plast
    389c:	mov	x0, #0x102                 	// #258
    38a0:	str	x0, [sp, #48]
    38a4:	ldr	x0, [sp, #24]
    38a8:	ldr	x1, [x0, #96]
    38ac:	ldr	x0, [sp, #32]
    38b0:	add	x0, x1, x0
    38b4:	ldr	x1, [sp, #48]
    38b8:	mov	w1, w1
    38bc:	mov	x2, x1
    38c0:	mov	w1, #0x0                   	// #0
    38c4:	bl	0 <memset>
    38c8:	ldr	x1, [sp, #32]
    38cc:	ldr	x0, [sp, #48]
    38d0:	add	x1, x1, x0
    38d4:	ldr	x0, [sp, #24]
    38d8:	str	x1, [x0, #5944]
    38dc:	b	3988 <fill_window+0x49c>
    38e0:	ldr	x0, [sp, #24]
    38e4:	ldr	x1, [x0, #5944]
    38e8:	ldr	x0, [sp, #32]
    38ec:	add	x0, x0, #0x102
    38f0:	cmp	x1, x0
    38f4:	b.cs	3988 <fill_window+0x49c>  // b.hs, b.nlast
    38f8:	ldr	x0, [sp, #24]
    38fc:	ldr	x0, [x0, #5944]
    3900:	ldr	x1, [sp, #32]
    3904:	sub	x0, x1, x0
    3908:	add	x0, x0, #0x102
    390c:	str	x0, [sp, #48]
    3910:	ldr	x0, [sp, #24]
    3914:	ldr	x1, [x0, #104]
    3918:	ldr	x0, [sp, #24]
    391c:	ldr	x0, [x0, #5944]
    3920:	sub	x0, x1, x0
    3924:	ldr	x1, [sp, #48]
    3928:	cmp	x1, x0
    392c:	b.ls	3948 <fill_window+0x45c>  // b.plast
    3930:	ldr	x0, [sp, #24]
    3934:	ldr	x1, [x0, #104]
    3938:	ldr	x0, [sp, #24]
    393c:	ldr	x0, [x0, #5944]
    3940:	sub	x0, x1, x0
    3944:	str	x0, [sp, #48]
    3948:	ldr	x0, [sp, #24]
    394c:	ldr	x1, [x0, #96]
    3950:	ldr	x0, [sp, #24]
    3954:	ldr	x0, [x0, #5944]
    3958:	add	x0, x1, x0
    395c:	ldr	x1, [sp, #48]
    3960:	mov	w1, w1
    3964:	mov	x2, x1
    3968:	mov	w1, #0x0                   	// #0
    396c:	bl	0 <memset>
    3970:	ldr	x0, [sp, #24]
    3974:	ldr	x1, [x0, #5944]
    3978:	ldr	x0, [sp, #48]
    397c:	add	x1, x1, x0
    3980:	ldr	x0, [sp, #24]
    3984:	str	x1, [x0, #5944]
    3988:	nop
    398c:	ldp	x29, x30, [sp], #64
    3990:	ret

0000000000003994 <deflate_stored>:
    3994:	stp	x29, x30, [sp, #-64]!
    3998:	mov	x29, sp
    399c:	str	x0, [sp, #24]
    39a0:	str	w1, [sp, #20]
    39a4:	ldr	x0, [sp, #24]
    39a8:	ldr	x0, [x0, #24]
    39ac:	sub	x1, x0, #0x5
    39b0:	ldr	x0, [sp, #24]
    39b4:	ldr	w0, [x0, #80]
    39b8:	mov	w0, w0
    39bc:	cmp	x1, x0
    39c0:	csel	x0, x1, x0, ls  // ls = plast
    39c4:	str	w0, [sp, #44]
    39c8:	str	wzr, [sp, #48]
    39cc:	ldr	x0, [sp, #24]
    39d0:	ldr	x0, [x0]
    39d4:	ldr	w0, [x0, #8]
    39d8:	str	w0, [sp, #40]
    39dc:	mov	w0, #0xffff                	// #65535
    39e0:	str	w0, [sp, #60]
    39e4:	ldr	x0, [sp, #24]
    39e8:	ldr	w0, [x0, #5940]
    39ec:	add	w0, w0, #0x2a
    39f0:	asr	w0, w0, #3
    39f4:	str	w0, [sp, #52]
    39f8:	ldr	x0, [sp, #24]
    39fc:	ldr	x0, [x0]
    3a00:	ldr	w0, [x0, #32]
    3a04:	ldr	w1, [sp, #52]
    3a08:	cmp	w1, w0
    3a0c:	b.hi	3d6c <deflate_stored+0x3d8>  // b.pmore
    3a10:	ldr	x0, [sp, #24]
    3a14:	ldr	x0, [x0]
    3a18:	ldr	w1, [x0, #32]
    3a1c:	ldr	w0, [sp, #52]
    3a20:	sub	w0, w1, w0
    3a24:	str	w0, [sp, #52]
    3a28:	ldr	x0, [sp, #24]
    3a2c:	ldr	w0, [x0, #172]
    3a30:	ldr	x1, [sp, #24]
    3a34:	ldr	x1, [x1, #152]
    3a38:	sub	w0, w0, w1
    3a3c:	str	w0, [sp, #56]
    3a40:	ldr	w1, [sp, #60]
    3a44:	ldr	w2, [sp, #56]
    3a48:	ldr	x0, [sp, #24]
    3a4c:	ldr	x0, [x0]
    3a50:	ldr	w0, [x0, #8]
    3a54:	mov	w0, w0
    3a58:	add	x0, x2, x0
    3a5c:	cmp	x1, x0
    3a60:	b.ls	3a7c <deflate_stored+0xe8>  // b.plast
    3a64:	ldr	x0, [sp, #24]
    3a68:	ldr	x0, [x0]
    3a6c:	ldr	w0, [x0, #8]
    3a70:	ldr	w1, [sp, #56]
    3a74:	add	w0, w1, w0
    3a78:	str	w0, [sp, #60]
    3a7c:	ldr	w1, [sp, #60]
    3a80:	ldr	w0, [sp, #52]
    3a84:	cmp	w1, w0
    3a88:	b.ls	3a94 <deflate_stored+0x100>  // b.plast
    3a8c:	ldr	w0, [sp, #52]
    3a90:	str	w0, [sp, #60]
    3a94:	ldr	w1, [sp, #60]
    3a98:	ldr	w0, [sp, #44]
    3a9c:	cmp	w1, w0
    3aa0:	b.cs	3ae8 <deflate_stored+0x154>  // b.hs, b.nlast
    3aa4:	ldr	w0, [sp, #60]
    3aa8:	cmp	w0, #0x0
    3aac:	b.ne	3abc <deflate_stored+0x128>  // b.any
    3ab0:	ldr	w0, [sp, #20]
    3ab4:	cmp	w0, #0x4
    3ab8:	b.ne	3d70 <deflate_stored+0x3dc>  // b.any
    3abc:	ldr	w0, [sp, #20]
    3ac0:	cmp	w0, #0x0
    3ac4:	b.eq	3d70 <deflate_stored+0x3dc>  // b.none
    3ac8:	ldr	x0, [sp, #24]
    3acc:	ldr	x0, [x0]
    3ad0:	ldr	w1, [x0, #8]
    3ad4:	ldr	w0, [sp, #56]
    3ad8:	add	w0, w1, w0
    3adc:	ldr	w1, [sp, #60]
    3ae0:	cmp	w1, w0
    3ae4:	b.ne	3d70 <deflate_stored+0x3dc>  // b.any
    3ae8:	ldr	w0, [sp, #20]
    3aec:	cmp	w0, #0x4
    3af0:	b.ne	3b1c <deflate_stored+0x188>  // b.any
    3af4:	ldr	x0, [sp, #24]
    3af8:	ldr	x0, [x0]
    3afc:	ldr	w1, [x0, #8]
    3b00:	ldr	w0, [sp, #56]
    3b04:	add	w0, w1, w0
    3b08:	ldr	w1, [sp, #60]
    3b0c:	cmp	w1, w0
    3b10:	b.ne	3b1c <deflate_stored+0x188>  // b.any
    3b14:	mov	w0, #0x1                   	// #1
    3b18:	b	3b20 <deflate_stored+0x18c>
    3b1c:	mov	w0, #0x0                   	// #0
    3b20:	str	w0, [sp, #48]
    3b24:	ldr	w0, [sp, #48]
    3b28:	mov	w3, w0
    3b2c:	mov	x2, #0x0                   	// #0
    3b30:	mov	x1, #0x0                   	// #0
    3b34:	ldr	x0, [sp, #24]
    3b38:	bl	0 <_tr_stored_block>
    3b3c:	ldr	x0, [sp, #24]
    3b40:	ldr	x1, [x0, #16]
    3b44:	ldr	x0, [sp, #24]
    3b48:	ldr	x0, [x0, #40]
    3b4c:	sub	x0, x0, #0x4
    3b50:	add	x0, x1, x0
    3b54:	ldr	w1, [sp, #60]
    3b58:	and	w1, w1, #0xff
    3b5c:	strb	w1, [x0]
    3b60:	ldr	w0, [sp, #60]
    3b64:	lsr	w2, w0, #8
    3b68:	ldr	x0, [sp, #24]
    3b6c:	ldr	x1, [x0, #16]
    3b70:	ldr	x0, [sp, #24]
    3b74:	ldr	x0, [x0, #40]
    3b78:	sub	x0, x0, #0x3
    3b7c:	add	x0, x1, x0
    3b80:	and	w1, w2, #0xff
    3b84:	strb	w1, [x0]
    3b88:	ldr	w0, [sp, #60]
    3b8c:	and	w1, w0, #0xff
    3b90:	ldr	x0, [sp, #24]
    3b94:	ldr	x2, [x0, #16]
    3b98:	ldr	x0, [sp, #24]
    3b9c:	ldr	x0, [x0, #40]
    3ba0:	sub	x0, x0, #0x2
    3ba4:	add	x0, x2, x0
    3ba8:	mvn	w1, w1
    3bac:	and	w1, w1, #0xff
    3bb0:	strb	w1, [x0]
    3bb4:	ldr	w0, [sp, #60]
    3bb8:	mvn	w0, w0
    3bbc:	lsr	w2, w0, #8
    3bc0:	ldr	x0, [sp, #24]
    3bc4:	ldr	x1, [x0, #16]
    3bc8:	ldr	x0, [sp, #24]
    3bcc:	ldr	x0, [x0, #40]
    3bd0:	sub	x0, x0, #0x1
    3bd4:	add	x0, x1, x0
    3bd8:	and	w1, w2, #0xff
    3bdc:	strb	w1, [x0]
    3be0:	ldr	x0, [sp, #24]
    3be4:	ldr	x0, [x0]
    3be8:	bl	14a8 <flush_pending>
    3bec:	ldr	w0, [sp, #56]
    3bf0:	cmp	w0, #0x0
    3bf4:	b.eq	3ccc <deflate_stored+0x338>  // b.none
    3bf8:	ldr	w1, [sp, #56]
    3bfc:	ldr	w0, [sp, #60]
    3c00:	cmp	w1, w0
    3c04:	b.ls	3c10 <deflate_stored+0x27c>  // b.plast
    3c08:	ldr	w0, [sp, #60]
    3c0c:	str	w0, [sp, #56]
    3c10:	ldr	x0, [sp, #24]
    3c14:	ldr	x0, [x0]
    3c18:	ldr	x3, [x0, #24]
    3c1c:	ldr	x0, [sp, #24]
    3c20:	ldr	x0, [x0, #96]
    3c24:	ldr	x1, [sp, #24]
    3c28:	ldr	x1, [x1, #152]
    3c2c:	add	x0, x0, x1
    3c30:	ldr	w1, [sp, #56]
    3c34:	mov	x2, x1
    3c38:	mov	x1, x0
    3c3c:	mov	x0, x3
    3c40:	bl	0 <memcpy>
    3c44:	ldr	x0, [sp, #24]
    3c48:	ldr	x0, [x0]
    3c4c:	ldr	x2, [x0, #24]
    3c50:	ldr	w1, [sp, #56]
    3c54:	ldr	x0, [sp, #24]
    3c58:	ldr	x0, [x0]
    3c5c:	add	x1, x2, x1
    3c60:	str	x1, [x0, #24]
    3c64:	ldr	x0, [sp, #24]
    3c68:	ldr	x0, [x0]
    3c6c:	ldr	w2, [x0, #32]
    3c70:	ldr	x0, [sp, #24]
    3c74:	ldr	x0, [x0]
    3c78:	ldr	w1, [sp, #56]
    3c7c:	sub	w1, w2, w1
    3c80:	str	w1, [x0, #32]
    3c84:	ldr	x0, [sp, #24]
    3c88:	ldr	x0, [x0]
    3c8c:	ldr	x2, [x0, #40]
    3c90:	ldr	w1, [sp, #56]
    3c94:	ldr	x0, [sp, #24]
    3c98:	ldr	x0, [x0]
    3c9c:	add	x1, x2, x1
    3ca0:	str	x1, [x0, #40]
    3ca4:	ldr	x0, [sp, #24]
    3ca8:	ldr	x1, [x0, #152]
    3cac:	ldr	w0, [sp, #56]
    3cb0:	add	x1, x1, x0
    3cb4:	ldr	x0, [sp, #24]
    3cb8:	str	x1, [x0, #152]
    3cbc:	ldr	w1, [sp, #60]
    3cc0:	ldr	w0, [sp, #56]
    3cc4:	sub	w0, w1, w0
    3cc8:	str	w0, [sp, #60]
    3ccc:	ldr	w0, [sp, #60]
    3cd0:	cmp	w0, #0x0
    3cd4:	b.eq	3d5c <deflate_stored+0x3c8>  // b.none
    3cd8:	ldr	x0, [sp, #24]
    3cdc:	ldr	x3, [x0]
    3ce0:	ldr	x0, [sp, #24]
    3ce4:	ldr	x0, [x0]
    3ce8:	ldr	x0, [x0, #24]
    3cec:	ldr	w2, [sp, #60]
    3cf0:	mov	x1, x0
    3cf4:	mov	x0, x3
    3cf8:	bl	2f08 <read_buf>
    3cfc:	ldr	x0, [sp, #24]
    3d00:	ldr	x0, [x0]
    3d04:	ldr	x2, [x0, #24]
    3d08:	ldr	w1, [sp, #60]
    3d0c:	ldr	x0, [sp, #24]
    3d10:	ldr	x0, [x0]
    3d14:	add	x1, x2, x1
    3d18:	str	x1, [x0, #24]
    3d1c:	ldr	x0, [sp, #24]
    3d20:	ldr	x0, [x0]
    3d24:	ldr	w2, [x0, #32]
    3d28:	ldr	x0, [sp, #24]
    3d2c:	ldr	x0, [x0]
    3d30:	ldr	w1, [sp, #60]
    3d34:	sub	w1, w2, w1
    3d38:	str	w1, [x0, #32]
    3d3c:	ldr	x0, [sp, #24]
    3d40:	ldr	x0, [x0]
    3d44:	ldr	x2, [x0, #40]
    3d48:	ldr	w1, [sp, #60]
    3d4c:	ldr	x0, [sp, #24]
    3d50:	ldr	x0, [x0]
    3d54:	add	x1, x2, x1
    3d58:	str	x1, [x0, #40]
    3d5c:	ldr	w0, [sp, #48]
    3d60:	cmp	w0, #0x0
    3d64:	b.eq	39dc <deflate_stored+0x48>  // b.none
    3d68:	b	3d70 <deflate_stored+0x3dc>
    3d6c:	nop
    3d70:	ldr	x0, [sp, #24]
    3d74:	ldr	x0, [x0]
    3d78:	ldr	w0, [x0, #8]
    3d7c:	ldr	w1, [sp, #40]
    3d80:	sub	w0, w1, w0
    3d84:	str	w0, [sp, #40]
    3d88:	ldr	w0, [sp, #40]
    3d8c:	cmp	w0, #0x0
    3d90:	b.eq	3f4c <deflate_stored+0x5b8>  // b.none
    3d94:	ldr	x0, [sp, #24]
    3d98:	ldr	w0, [x0, #80]
    3d9c:	ldr	w1, [sp, #40]
    3da0:	cmp	w1, w0
    3da4:	b.cc	3e08 <deflate_stored+0x474>  // b.lo, b.ul, b.last
    3da8:	ldr	x0, [sp, #24]
    3dac:	mov	w1, #0x2                   	// #2
    3db0:	str	w1, [x0, #5928]
    3db4:	ldr	x0, [sp, #24]
    3db8:	ldr	x3, [x0, #96]
    3dbc:	ldr	x0, [sp, #24]
    3dc0:	ldr	x0, [x0]
    3dc4:	ldr	x1, [x0]
    3dc8:	ldr	x0, [sp, #24]
    3dcc:	ldr	w0, [x0, #80]
    3dd0:	mov	w0, w0
    3dd4:	neg	x0, x0
    3dd8:	add	x1, x1, x0
    3ddc:	ldr	x0, [sp, #24]
    3de0:	ldr	w0, [x0, #80]
    3de4:	mov	w0, w0
    3de8:	mov	x2, x0
    3dec:	mov	x0, x3
    3df0:	bl	0 <memcpy>
    3df4:	ldr	x0, [sp, #24]
    3df8:	ldr	w1, [x0, #80]
    3dfc:	ldr	x0, [sp, #24]
    3e00:	str	w1, [x0, #172]
    3e04:	b	3f00 <deflate_stored+0x56c>
    3e08:	ldr	x0, [sp, #24]
    3e0c:	ldr	x1, [x0, #104]
    3e10:	ldr	x0, [sp, #24]
    3e14:	ldr	w0, [x0, #172]
    3e18:	mov	w0, w0
    3e1c:	sub	x1, x1, x0
    3e20:	ldr	w0, [sp, #40]
    3e24:	cmp	x1, x0
    3e28:	b.hi	3ea4 <deflate_stored+0x510>  // b.pmore
    3e2c:	ldr	x0, [sp, #24]
    3e30:	ldr	w1, [x0, #172]
    3e34:	ldr	x0, [sp, #24]
    3e38:	ldr	w0, [x0, #80]
    3e3c:	sub	w1, w1, w0
    3e40:	ldr	x0, [sp, #24]
    3e44:	str	w1, [x0, #172]
    3e48:	ldr	x0, [sp, #24]
    3e4c:	ldr	x3, [x0, #96]
    3e50:	ldr	x0, [sp, #24]
    3e54:	ldr	x1, [x0, #96]
    3e58:	ldr	x0, [sp, #24]
    3e5c:	ldr	w0, [x0, #80]
    3e60:	mov	w0, w0
    3e64:	add	x1, x1, x0
    3e68:	ldr	x0, [sp, #24]
    3e6c:	ldr	w0, [x0, #172]
    3e70:	mov	w0, w0
    3e74:	mov	x2, x0
    3e78:	mov	x0, x3
    3e7c:	bl	0 <memcpy>
    3e80:	ldr	x0, [sp, #24]
    3e84:	ldr	w0, [x0, #5928]
    3e88:	cmp	w0, #0x1
    3e8c:	b.hi	3ea4 <deflate_stored+0x510>  // b.pmore
    3e90:	ldr	x0, [sp, #24]
    3e94:	ldr	w0, [x0, #5928]
    3e98:	add	w1, w0, #0x1
    3e9c:	ldr	x0, [sp, #24]
    3ea0:	str	w1, [x0, #5928]
    3ea4:	ldr	x0, [sp, #24]
    3ea8:	ldr	x1, [x0, #96]
    3eac:	ldr	x0, [sp, #24]
    3eb0:	ldr	w0, [x0, #172]
    3eb4:	mov	w0, w0
    3eb8:	add	x3, x1, x0
    3ebc:	ldr	x0, [sp, #24]
    3ec0:	ldr	x0, [x0]
    3ec4:	ldr	x1, [x0]
    3ec8:	ldr	w0, [sp, #40]
    3ecc:	neg	x0, x0
    3ed0:	add	x0, x1, x0
    3ed4:	ldr	w1, [sp, #40]
    3ed8:	mov	x2, x1
    3edc:	mov	x1, x0
    3ee0:	mov	x0, x3
    3ee4:	bl	0 <memcpy>
    3ee8:	ldr	x0, [sp, #24]
    3eec:	ldr	w1, [x0, #172]
    3ef0:	ldr	w0, [sp, #40]
    3ef4:	add	w1, w1, w0
    3ef8:	ldr	x0, [sp, #24]
    3efc:	str	w1, [x0, #172]
    3f00:	ldr	x0, [sp, #24]
    3f04:	ldr	w0, [x0, #172]
    3f08:	mov	w1, w0
    3f0c:	ldr	x0, [sp, #24]
    3f10:	str	x1, [x0, #152]
    3f14:	ldr	x0, [sp, #24]
    3f18:	ldr	w1, [x0, #5932]
    3f1c:	ldr	x0, [sp, #24]
    3f20:	ldr	w2, [x0, #80]
    3f24:	ldr	x0, [sp, #24]
    3f28:	ldr	w0, [x0, #5932]
    3f2c:	sub	w0, w2, w0
    3f30:	ldr	w3, [sp, #40]
    3f34:	ldr	w2, [sp, #40]
    3f38:	cmp	w3, w0
    3f3c:	csel	w0, w2, w0, ls  // ls = plast
    3f40:	add	w1, w1, w0
    3f44:	ldr	x0, [sp, #24]
    3f48:	str	w1, [x0, #5932]
    3f4c:	ldr	x0, [sp, #24]
    3f50:	ldr	x1, [x0, #5944]
    3f54:	ldr	x0, [sp, #24]
    3f58:	ldr	w0, [x0, #172]
    3f5c:	mov	w0, w0
    3f60:	cmp	x1, x0
    3f64:	b.cs	3f7c <deflate_stored+0x5e8>  // b.hs, b.nlast
    3f68:	ldr	x0, [sp, #24]
    3f6c:	ldr	w0, [x0, #172]
    3f70:	mov	w1, w0
    3f74:	ldr	x0, [sp, #24]
    3f78:	str	x1, [x0, #5944]
    3f7c:	ldr	w0, [sp, #48]
    3f80:	cmp	w0, #0x0
    3f84:	b.eq	3f90 <deflate_stored+0x5fc>  // b.none
    3f88:	mov	w0, #0x3                   	// #3
    3f8c:	b	4314 <deflate_stored+0x980>
    3f90:	ldr	w0, [sp, #20]
    3f94:	cmp	w0, #0x0
    3f98:	b.eq	3fe0 <deflate_stored+0x64c>  // b.none
    3f9c:	ldr	w0, [sp, #20]
    3fa0:	cmp	w0, #0x4
    3fa4:	b.eq	3fe0 <deflate_stored+0x64c>  // b.none
    3fa8:	ldr	x0, [sp, #24]
    3fac:	ldr	x0, [x0]
    3fb0:	ldr	w0, [x0, #8]
    3fb4:	cmp	w0, #0x0
    3fb8:	b.ne	3fe0 <deflate_stored+0x64c>  // b.any
    3fbc:	ldr	x0, [sp, #24]
    3fc0:	ldr	w0, [x0, #172]
    3fc4:	mov	w1, w0
    3fc8:	ldr	x0, [sp, #24]
    3fcc:	ldr	x0, [x0, #152]
    3fd0:	cmp	x1, x0
    3fd4:	b.ne	3fe0 <deflate_stored+0x64c>  // b.any
    3fd8:	mov	w0, #0x1                   	// #1
    3fdc:	b	4314 <deflate_stored+0x980>
    3fe0:	ldr	x0, [sp, #24]
    3fe4:	ldr	x0, [x0, #104]
    3fe8:	mov	w1, w0
    3fec:	ldr	x0, [sp, #24]
    3ff0:	ldr	w0, [x0, #172]
    3ff4:	sub	w0, w1, w0
    3ff8:	sub	w0, w0, #0x1
    3ffc:	str	w0, [sp, #52]
    4000:	ldr	x0, [sp, #24]
    4004:	ldr	x0, [x0]
    4008:	ldr	w0, [x0, #8]
    400c:	ldr	w1, [sp, #52]
    4010:	cmp	w1, w0
    4014:	b.cs	40e0 <deflate_stored+0x74c>  // b.hs, b.nlast
    4018:	ldr	x0, [sp, #24]
    401c:	ldr	x1, [x0, #152]
    4020:	ldr	x0, [sp, #24]
    4024:	ldr	w0, [x0, #80]
    4028:	mov	w0, w0
    402c:	cmp	x1, x0
    4030:	b.lt	40e0 <deflate_stored+0x74c>  // b.tstop
    4034:	ldr	x0, [sp, #24]
    4038:	ldr	x1, [x0, #152]
    403c:	ldr	x0, [sp, #24]
    4040:	ldr	w0, [x0, #80]
    4044:	mov	w0, w0
    4048:	sub	x1, x1, x0
    404c:	ldr	x0, [sp, #24]
    4050:	str	x1, [x0, #152]
    4054:	ldr	x0, [sp, #24]
    4058:	ldr	w1, [x0, #172]
    405c:	ldr	x0, [sp, #24]
    4060:	ldr	w0, [x0, #80]
    4064:	sub	w1, w1, w0
    4068:	ldr	x0, [sp, #24]
    406c:	str	w1, [x0, #172]
    4070:	ldr	x0, [sp, #24]
    4074:	ldr	x3, [x0, #96]
    4078:	ldr	x0, [sp, #24]
    407c:	ldr	x1, [x0, #96]
    4080:	ldr	x0, [sp, #24]
    4084:	ldr	w0, [x0, #80]
    4088:	mov	w0, w0
    408c:	add	x1, x1, x0
    4090:	ldr	x0, [sp, #24]
    4094:	ldr	w0, [x0, #172]
    4098:	mov	w0, w0
    409c:	mov	x2, x0
    40a0:	mov	x0, x3
    40a4:	bl	0 <memcpy>
    40a8:	ldr	x0, [sp, #24]
    40ac:	ldr	w0, [x0, #5928]
    40b0:	cmp	w0, #0x1
    40b4:	b.hi	40cc <deflate_stored+0x738>  // b.pmore
    40b8:	ldr	x0, [sp, #24]
    40bc:	ldr	w0, [x0, #5928]
    40c0:	add	w1, w0, #0x1
    40c4:	ldr	x0, [sp, #24]
    40c8:	str	w1, [x0, #5928]
    40cc:	ldr	x0, [sp, #24]
    40d0:	ldr	w0, [x0, #80]
    40d4:	ldr	w1, [sp, #52]
    40d8:	add	w0, w1, w0
    40dc:	str	w0, [sp, #52]
    40e0:	ldr	x0, [sp, #24]
    40e4:	ldr	x0, [x0]
    40e8:	ldr	w0, [x0, #8]
    40ec:	ldr	w1, [sp, #52]
    40f0:	cmp	w1, w0
    40f4:	b.ls	4108 <deflate_stored+0x774>  // b.plast
    40f8:	ldr	x0, [sp, #24]
    40fc:	ldr	x0, [x0]
    4100:	ldr	w0, [x0, #8]
    4104:	str	w0, [sp, #52]
    4108:	ldr	w0, [sp, #52]
    410c:	cmp	w0, #0x0
    4110:	b.eq	415c <deflate_stored+0x7c8>  // b.none
    4114:	ldr	x0, [sp, #24]
    4118:	ldr	x3, [x0]
    411c:	ldr	x0, [sp, #24]
    4120:	ldr	x1, [x0, #96]
    4124:	ldr	x0, [sp, #24]
    4128:	ldr	w0, [x0, #172]
    412c:	mov	w0, w0
    4130:	add	x0, x1, x0
    4134:	ldr	w2, [sp, #52]
    4138:	mov	x1, x0
    413c:	mov	x0, x3
    4140:	bl	2f08 <read_buf>
    4144:	ldr	x0, [sp, #24]
    4148:	ldr	w1, [x0, #172]
    414c:	ldr	w0, [sp, #52]
    4150:	add	w1, w1, w0
    4154:	ldr	x0, [sp, #24]
    4158:	str	w1, [x0, #172]
    415c:	ldr	x0, [sp, #24]
    4160:	ldr	x1, [x0, #5944]
    4164:	ldr	x0, [sp, #24]
    4168:	ldr	w0, [x0, #172]
    416c:	mov	w0, w0
    4170:	cmp	x1, x0
    4174:	b.cs	418c <deflate_stored+0x7f8>  // b.hs, b.nlast
    4178:	ldr	x0, [sp, #24]
    417c:	ldr	w0, [x0, #172]
    4180:	mov	w1, w0
    4184:	ldr	x0, [sp, #24]
    4188:	str	x1, [x0, #5944]
    418c:	ldr	x0, [sp, #24]
    4190:	ldr	w0, [x0, #5940]
    4194:	add	w0, w0, #0x2a
    4198:	asr	w0, w0, #3
    419c:	str	w0, [sp, #52]
    41a0:	ldr	x0, [sp, #24]
    41a4:	ldr	x1, [x0, #24]
    41a8:	ldr	w0, [sp, #52]
    41ac:	sub	x0, x1, x0
    41b0:	mov	x2, #0xffff                	// #65535
    41b4:	mov	x1, #0xffff                	// #65535
    41b8:	cmp	x0, x2
    41bc:	csel	x0, x0, x1, ls  // ls = plast
    41c0:	str	w0, [sp, #52]
    41c4:	ldr	x0, [sp, #24]
    41c8:	ldr	w0, [x0, #80]
    41cc:	ldr	w2, [sp, #52]
    41d0:	ldr	w1, [sp, #52]
    41d4:	cmp	w2, w0
    41d8:	csel	w0, w1, w0, ls  // ls = plast
    41dc:	str	w0, [sp, #44]
    41e0:	ldr	x0, [sp, #24]
    41e4:	ldr	w0, [x0, #172]
    41e8:	ldr	x1, [sp, #24]
    41ec:	ldr	x1, [x1, #152]
    41f0:	sub	w0, w0, w1
    41f4:	str	w0, [sp, #56]
    41f8:	ldr	w1, [sp, #56]
    41fc:	ldr	w0, [sp, #44]
    4200:	cmp	w1, w0
    4204:	b.cs	4250 <deflate_stored+0x8bc>  // b.hs, b.nlast
    4208:	ldr	w0, [sp, #56]
    420c:	cmp	w0, #0x0
    4210:	b.ne	4220 <deflate_stored+0x88c>  // b.any
    4214:	ldr	w0, [sp, #20]
    4218:	cmp	w0, #0x4
    421c:	b.ne	42fc <deflate_stored+0x968>  // b.any
    4220:	ldr	w0, [sp, #20]
    4224:	cmp	w0, #0x0
    4228:	b.eq	42fc <deflate_stored+0x968>  // b.none
    422c:	ldr	x0, [sp, #24]
    4230:	ldr	x0, [x0]
    4234:	ldr	w0, [x0, #8]
    4238:	cmp	w0, #0x0
    423c:	b.ne	42fc <deflate_stored+0x968>  // b.any
    4240:	ldr	w1, [sp, #56]
    4244:	ldr	w0, [sp, #52]
    4248:	cmp	w1, w0
    424c:	b.hi	42fc <deflate_stored+0x968>  // b.pmore
    4250:	ldr	w0, [sp, #52]
    4254:	ldr	w2, [sp, #56]
    4258:	ldr	w1, [sp, #56]
    425c:	cmp	w2, w0
    4260:	csel	w0, w1, w0, ls  // ls = plast
    4264:	str	w0, [sp, #60]
    4268:	ldr	w0, [sp, #20]
    426c:	cmp	w0, #0x4
    4270:	b.ne	42a0 <deflate_stored+0x90c>  // b.any
    4274:	ldr	x0, [sp, #24]
    4278:	ldr	x0, [x0]
    427c:	ldr	w0, [x0, #8]
    4280:	cmp	w0, #0x0
    4284:	b.ne	42a0 <deflate_stored+0x90c>  // b.any
    4288:	ldr	w1, [sp, #60]
    428c:	ldr	w0, [sp, #56]
    4290:	cmp	w1, w0
    4294:	b.ne	42a0 <deflate_stored+0x90c>  // b.any
    4298:	mov	w0, #0x1                   	// #1
    429c:	b	42a4 <deflate_stored+0x910>
    42a0:	mov	w0, #0x0                   	// #0
    42a4:	str	w0, [sp, #48]
    42a8:	ldr	x0, [sp, #24]
    42ac:	ldr	x0, [x0, #96]
    42b0:	ldr	x1, [sp, #24]
    42b4:	ldr	x1, [x1, #152]
    42b8:	add	x0, x0, x1
    42bc:	ldr	w1, [sp, #60]
    42c0:	ldr	w2, [sp, #48]
    42c4:	mov	w3, w2
    42c8:	mov	x2, x1
    42cc:	mov	x1, x0
    42d0:	ldr	x0, [sp, #24]
    42d4:	bl	0 <_tr_stored_block>
    42d8:	ldr	x0, [sp, #24]
    42dc:	ldr	x1, [x0, #152]
    42e0:	ldr	w0, [sp, #60]
    42e4:	add	x1, x1, x0
    42e8:	ldr	x0, [sp, #24]
    42ec:	str	x1, [x0, #152]
    42f0:	ldr	x0, [sp, #24]
    42f4:	ldr	x0, [x0]
    42f8:	bl	14a8 <flush_pending>
    42fc:	ldr	w0, [sp, #48]
    4300:	cmp	w0, #0x0
    4304:	b.eq	4310 <deflate_stored+0x97c>  // b.none
    4308:	mov	w0, #0x2                   	// #2
    430c:	b	4314 <deflate_stored+0x980>
    4310:	mov	w0, #0x0                   	// #0
    4314:	ldp	x29, x30, [sp], #64
    4318:	ret

000000000000431c <deflate_fast>:
    431c:	stp	x29, x30, [sp, #-48]!
    4320:	mov	x29, sp
    4324:	str	x0, [sp, #24]
    4328:	str	w1, [sp, #20]
    432c:	ldr	x0, [sp, #24]
    4330:	ldr	w0, [x0, #180]
    4334:	cmp	w0, #0x105
    4338:	b.hi	4378 <deflate_fast+0x5c>  // b.pmore
    433c:	ldr	x0, [sp, #24]
    4340:	bl	34ec <fill_window>
    4344:	ldr	x0, [sp, #24]
    4348:	ldr	w0, [x0, #180]
    434c:	cmp	w0, #0x105
    4350:	b.hi	4368 <deflate_fast+0x4c>  // b.pmore
    4354:	ldr	w0, [sp, #20]
    4358:	cmp	w0, #0x0
    435c:	b.ne	4368 <deflate_fast+0x4c>  // b.any
    4360:	mov	w0, #0x0                   	// #0
    4364:	b	4b64 <deflate_fast+0x848>
    4368:	ldr	x0, [sp, #24]
    436c:	ldr	w0, [x0, #180]
    4370:	cmp	w0, #0x0
    4374:	b.eq	49ec <deflate_fast+0x6d0>  // b.none
    4378:	str	wzr, [sp, #44]
    437c:	ldr	x0, [sp, #24]
    4380:	ldr	w0, [x0, #180]
    4384:	cmp	w0, #0x2
    4388:	b.ls	4458 <deflate_fast+0x13c>  // b.plast
    438c:	ldr	x0, [sp, #24]
    4390:	ldr	w1, [x0, #128]
    4394:	ldr	x0, [sp, #24]
    4398:	ldr	w0, [x0, #144]
    439c:	lsl	w0, w1, w0
    43a0:	ldr	x1, [sp, #24]
    43a4:	ldr	x2, [x1, #96]
    43a8:	ldr	x1, [sp, #24]
    43ac:	ldr	w1, [x1, #172]
    43b0:	add	w1, w1, #0x2
    43b4:	mov	w1, w1
    43b8:	add	x1, x2, x1
    43bc:	ldrb	w1, [x1]
    43c0:	eor	w1, w0, w1
    43c4:	ldr	x0, [sp, #24]
    43c8:	ldr	w0, [x0, #140]
    43cc:	and	w1, w1, w0
    43d0:	ldr	x0, [sp, #24]
    43d4:	str	w1, [x0, #128]
    43d8:	ldr	x0, [sp, #24]
    43dc:	ldr	x1, [x0, #120]
    43e0:	ldr	x0, [sp, #24]
    43e4:	ldr	w0, [x0, #128]
    43e8:	mov	w0, w0
    43ec:	lsl	x0, x0, #1
    43f0:	add	x1, x1, x0
    43f4:	ldr	x0, [sp, #24]
    43f8:	ldr	x2, [x0, #112]
    43fc:	ldr	x0, [sp, #24]
    4400:	ldr	w3, [x0, #172]
    4404:	ldr	x0, [sp, #24]
    4408:	ldr	w0, [x0, #88]
    440c:	and	w0, w3, w0
    4410:	mov	w0, w0
    4414:	lsl	x0, x0, #1
    4418:	add	x0, x2, x0
    441c:	ldrh	w1, [x1]
    4420:	strh	w1, [x0]
    4424:	ldrh	w0, [x0]
    4428:	str	w0, [sp, #44]
    442c:	ldr	x0, [sp, #24]
    4430:	ldr	w2, [x0, #172]
    4434:	ldr	x0, [sp, #24]
    4438:	ldr	x1, [x0, #120]
    443c:	ldr	x0, [sp, #24]
    4440:	ldr	w0, [x0, #128]
    4444:	mov	w0, w0
    4448:	lsl	x0, x0, #1
    444c:	add	x0, x1, x0
    4450:	and	w1, w2, #0xffff
    4454:	strh	w1, [x0]
    4458:	ldr	w0, [sp, #44]
    445c:	cmp	w0, #0x0
    4460:	b.eq	44a0 <deflate_fast+0x184>  // b.none
    4464:	ldr	x0, [sp, #24]
    4468:	ldr	w1, [x0, #172]
    446c:	ldr	w0, [sp, #44]
    4470:	sub	w1, w1, w0
    4474:	ldr	x0, [sp, #24]
    4478:	ldr	w0, [x0, #80]
    447c:	sub	w0, w0, #0x106
    4480:	cmp	w1, w0
    4484:	b.hi	44a0 <deflate_fast+0x184>  // b.pmore
    4488:	ldr	w1, [sp, #44]
    448c:	ldr	x0, [sp, #24]
    4490:	bl	31ac <longest_match>
    4494:	mov	w1, w0
    4498:	ldr	x0, [sp, #24]
    449c:	str	w1, [x0, #160]
    44a0:	ldr	x0, [sp, #24]
    44a4:	ldr	w0, [x0, #160]
    44a8:	cmp	w0, #0x2
    44ac:	b.ls	4850 <deflate_fast+0x534>  // b.plast
    44b0:	ldr	x0, [sp, #24]
    44b4:	ldr	w0, [x0, #160]
    44b8:	and	w0, w0, #0xff
    44bc:	sub	w0, w0, #0x3
    44c0:	strb	w0, [sp, #38]
    44c4:	ldr	x0, [sp, #24]
    44c8:	ldr	w0, [x0, #172]
    44cc:	and	w1, w0, #0xffff
    44d0:	ldr	x0, [sp, #24]
    44d4:	ldr	w0, [x0, #176]
    44d8:	and	w0, w0, #0xffff
    44dc:	sub	w0, w1, w0
    44e0:	strh	w0, [sp, #36]
    44e4:	ldr	x0, [sp, #24]
    44e8:	ldr	x1, [x0, #5904]
    44ec:	ldr	x0, [sp, #24]
    44f0:	ldr	w0, [x0, #5900]
    44f4:	mov	w0, w0
    44f8:	lsl	x0, x0, #1
    44fc:	add	x0, x1, x0
    4500:	ldrh	w1, [sp, #36]
    4504:	strh	w1, [x0]
    4508:	ldr	x0, [sp, #24]
    450c:	ldr	x1, [x0, #5888]
    4510:	ldr	x0, [sp, #24]
    4514:	ldr	w0, [x0, #5900]
    4518:	add	w3, w0, #0x1
    451c:	ldr	x2, [sp, #24]
    4520:	str	w3, [x2, #5900]
    4524:	mov	w0, w0
    4528:	add	x0, x1, x0
    452c:	ldrb	w1, [sp, #38]
    4530:	strb	w1, [x0]
    4534:	ldrh	w0, [sp, #36]
    4538:	sub	w0, w0, #0x1
    453c:	strh	w0, [sp, #36]
    4540:	ldrb	w2, [sp, #38]
    4544:	adrp	x0, 0 <_length_code>
    4548:	add	x1, x0, #0x0
    454c:	sxtw	x0, w2
    4550:	ldrb	w0, [x1, x0]
    4554:	add	w2, w0, #0x101
    4558:	ldr	x1, [sp, #24]
    455c:	sxtw	x0, w2
    4560:	add	x0, x0, #0x34
    4564:	lsl	x0, x0, #2
    4568:	add	x0, x1, x0
    456c:	ldrh	w0, [x0, #4]
    4570:	add	w0, w0, #0x1
    4574:	and	w3, w0, #0xffff
    4578:	ldr	x1, [sp, #24]
    457c:	sxtw	x0, w2
    4580:	add	x0, x0, #0x34
    4584:	lsl	x0, x0, #2
    4588:	add	x0, x1, x0
    458c:	mov	w1, w3
    4590:	strh	w1, [x0, #4]
    4594:	ldrh	w0, [sp, #36]
    4598:	cmp	w0, #0xff
    459c:	b.hi	45bc <deflate_fast+0x2a0>  // b.pmore
    45a0:	ldrh	w2, [sp, #36]
    45a4:	adrp	x0, 0 <_dist_code>
    45a8:	add	x1, x0, #0x0
    45ac:	sxtw	x0, w2
    45b0:	ldrb	w0, [x1, x0]
    45b4:	mov	w2, w0
    45b8:	b	45e0 <deflate_fast+0x2c4>
    45bc:	ldrh	w0, [sp, #36]
    45c0:	lsr	w0, w0, #7
    45c4:	and	w0, w0, #0xffff
    45c8:	add	w2, w0, #0x100
    45cc:	adrp	x0, 0 <_dist_code>
    45d0:	add	x1, x0, #0x0
    45d4:	sxtw	x0, w2
    45d8:	ldrb	w0, [x1, x0]
    45dc:	mov	w2, w0
    45e0:	ldr	x1, [sp, #24]
    45e4:	sxtw	x0, w2
    45e8:	add	x0, x0, #0x270
    45ec:	lsl	x0, x0, #2
    45f0:	add	x0, x1, x0
    45f4:	ldrh	w0, [x0, #8]
    45f8:	add	w0, w0, #0x1
    45fc:	and	w3, w0, #0xffff
    4600:	ldr	x1, [sp, #24]
    4604:	sxtw	x0, w2
    4608:	add	x0, x0, #0x270
    460c:	lsl	x0, x0, #2
    4610:	add	x0, x1, x0
    4614:	mov	w1, w3
    4618:	strh	w1, [x0, #8]
    461c:	ldr	x0, [sp, #24]
    4620:	ldr	w1, [x0, #5900]
    4624:	ldr	x0, [sp, #24]
    4628:	ldr	w0, [x0, #5896]
    462c:	sub	w0, w0, #0x1
    4630:	cmp	w1, w0
    4634:	cset	w0, eq  // eq = none
    4638:	and	w0, w0, #0xff
    463c:	str	w0, [sp, #40]
    4640:	ldr	x0, [sp, #24]
    4644:	ldr	w1, [x0, #180]
    4648:	ldr	x0, [sp, #24]
    464c:	ldr	w0, [x0, #160]
    4650:	sub	w1, w1, w0
    4654:	ldr	x0, [sp, #24]
    4658:	str	w1, [x0, #180]
    465c:	ldr	x0, [sp, #24]
    4660:	ldr	w1, [x0, #160]
    4664:	ldr	x0, [sp, #24]
    4668:	ldr	w0, [x0, #192]
    466c:	cmp	w1, w0
    4670:	b.hi	47b4 <deflate_fast+0x498>  // b.pmore
    4674:	ldr	x0, [sp, #24]
    4678:	ldr	w0, [x0, #180]
    467c:	cmp	w0, #0x2
    4680:	b.ls	47b4 <deflate_fast+0x498>  // b.plast
    4684:	ldr	x0, [sp, #24]
    4688:	ldr	w0, [x0, #160]
    468c:	sub	w1, w0, #0x1
    4690:	ldr	x0, [sp, #24]
    4694:	str	w1, [x0, #160]
    4698:	ldr	x0, [sp, #24]
    469c:	ldr	w0, [x0, #172]
    46a0:	add	w1, w0, #0x1
    46a4:	ldr	x0, [sp, #24]
    46a8:	str	w1, [x0, #172]
    46ac:	ldr	x0, [sp, #24]
    46b0:	ldr	w1, [x0, #128]
    46b4:	ldr	x0, [sp, #24]
    46b8:	ldr	w0, [x0, #144]
    46bc:	lsl	w0, w1, w0
    46c0:	ldr	x1, [sp, #24]
    46c4:	ldr	x2, [x1, #96]
    46c8:	ldr	x1, [sp, #24]
    46cc:	ldr	w1, [x1, #172]
    46d0:	add	w1, w1, #0x2
    46d4:	mov	w1, w1
    46d8:	add	x1, x2, x1
    46dc:	ldrb	w1, [x1]
    46e0:	eor	w1, w0, w1
    46e4:	ldr	x0, [sp, #24]
    46e8:	ldr	w0, [x0, #140]
    46ec:	and	w1, w1, w0
    46f0:	ldr	x0, [sp, #24]
    46f4:	str	w1, [x0, #128]
    46f8:	ldr	x0, [sp, #24]
    46fc:	ldr	x1, [x0, #120]
    4700:	ldr	x0, [sp, #24]
    4704:	ldr	w0, [x0, #128]
    4708:	mov	w0, w0
    470c:	lsl	x0, x0, #1
    4710:	add	x1, x1, x0
    4714:	ldr	x0, [sp, #24]
    4718:	ldr	x2, [x0, #112]
    471c:	ldr	x0, [sp, #24]
    4720:	ldr	w3, [x0, #172]
    4724:	ldr	x0, [sp, #24]
    4728:	ldr	w0, [x0, #88]
    472c:	and	w0, w3, w0
    4730:	mov	w0, w0
    4734:	lsl	x0, x0, #1
    4738:	add	x0, x2, x0
    473c:	ldrh	w1, [x1]
    4740:	strh	w1, [x0]
    4744:	ldrh	w0, [x0]
    4748:	str	w0, [sp, #44]
    474c:	ldr	x0, [sp, #24]
    4750:	ldr	w2, [x0, #172]
    4754:	ldr	x0, [sp, #24]
    4758:	ldr	x1, [x0, #120]
    475c:	ldr	x0, [sp, #24]
    4760:	ldr	w0, [x0, #128]
    4764:	mov	w0, w0
    4768:	lsl	x0, x0, #1
    476c:	add	x0, x1, x0
    4770:	and	w1, w2, #0xffff
    4774:	strh	w1, [x0]
    4778:	ldr	x0, [sp, #24]
    477c:	ldr	w0, [x0, #160]
    4780:	sub	w1, w0, #0x1
    4784:	ldr	x0, [sp, #24]
    4788:	str	w1, [x0, #160]
    478c:	ldr	x0, [sp, #24]
    4790:	ldr	w0, [x0, #160]
    4794:	cmp	w0, #0x0
    4798:	b.ne	4698 <deflate_fast+0x37c>  // b.any
    479c:	ldr	x0, [sp, #24]
    47a0:	ldr	w0, [x0, #172]
    47a4:	add	w1, w0, #0x1
    47a8:	ldr	x0, [sp, #24]
    47ac:	str	w1, [x0, #172]
    47b0:	b	4948 <deflate_fast+0x62c>
    47b4:	ldr	x0, [sp, #24]
    47b8:	ldr	w1, [x0, #172]
    47bc:	ldr	x0, [sp, #24]
    47c0:	ldr	w0, [x0, #160]
    47c4:	add	w1, w1, w0
    47c8:	ldr	x0, [sp, #24]
    47cc:	str	w1, [x0, #172]
    47d0:	ldr	x0, [sp, #24]
    47d4:	str	wzr, [x0, #160]
    47d8:	ldr	x0, [sp, #24]
    47dc:	ldr	x1, [x0, #96]
    47e0:	ldr	x0, [sp, #24]
    47e4:	ldr	w0, [x0, #172]
    47e8:	mov	w0, w0
    47ec:	add	x0, x1, x0
    47f0:	ldrb	w0, [x0]
    47f4:	mov	w1, w0
    47f8:	ldr	x0, [sp, #24]
    47fc:	str	w1, [x0, #128]
    4800:	ldr	x0, [sp, #24]
    4804:	ldr	w1, [x0, #128]
    4808:	ldr	x0, [sp, #24]
    480c:	ldr	w0, [x0, #144]
    4810:	lsl	w0, w1, w0
    4814:	ldr	x1, [sp, #24]
    4818:	ldr	x2, [x1, #96]
    481c:	ldr	x1, [sp, #24]
    4820:	ldr	w1, [x1, #172]
    4824:	add	w1, w1, #0x1
    4828:	mov	w1, w1
    482c:	add	x1, x2, x1
    4830:	ldrb	w1, [x1]
    4834:	eor	w1, w0, w1
    4838:	ldr	x0, [sp, #24]
    483c:	ldr	w0, [x0, #140]
    4840:	and	w1, w1, w0
    4844:	ldr	x0, [sp, #24]
    4848:	str	w1, [x0, #128]
    484c:	b	4948 <deflate_fast+0x62c>
    4850:	ldr	x0, [sp, #24]
    4854:	ldr	x1, [x0, #96]
    4858:	ldr	x0, [sp, #24]
    485c:	ldr	w0, [x0, #172]
    4860:	mov	w0, w0
    4864:	add	x0, x1, x0
    4868:	ldrb	w0, [x0]
    486c:	strb	w0, [sp, #39]
    4870:	ldr	x0, [sp, #24]
    4874:	ldr	x1, [x0, #5904]
    4878:	ldr	x0, [sp, #24]
    487c:	ldr	w0, [x0, #5900]
    4880:	mov	w0, w0
    4884:	lsl	x0, x0, #1
    4888:	add	x0, x1, x0
    488c:	strh	wzr, [x0]
    4890:	ldr	x0, [sp, #24]
    4894:	ldr	x1, [x0, #5888]
    4898:	ldr	x0, [sp, #24]
    489c:	ldr	w0, [x0, #5900]
    48a0:	add	w3, w0, #0x1
    48a4:	ldr	x2, [sp, #24]
    48a8:	str	w3, [x2, #5900]
    48ac:	mov	w0, w0
    48b0:	add	x0, x1, x0
    48b4:	ldrb	w1, [sp, #39]
    48b8:	strb	w1, [x0]
    48bc:	ldrb	w2, [sp, #39]
    48c0:	ldr	x1, [sp, #24]
    48c4:	sxtw	x0, w2
    48c8:	add	x0, x0, #0x34
    48cc:	lsl	x0, x0, #2
    48d0:	add	x0, x1, x0
    48d4:	ldrh	w0, [x0, #4]
    48d8:	add	w0, w0, #0x1
    48dc:	and	w3, w0, #0xffff
    48e0:	ldr	x1, [sp, #24]
    48e4:	sxtw	x0, w2
    48e8:	add	x0, x0, #0x34
    48ec:	lsl	x0, x0, #2
    48f0:	add	x0, x1, x0
    48f4:	mov	w1, w3
    48f8:	strh	w1, [x0, #4]
    48fc:	ldr	x0, [sp, #24]
    4900:	ldr	w1, [x0, #5900]
    4904:	ldr	x0, [sp, #24]
    4908:	ldr	w0, [x0, #5896]
    490c:	sub	w0, w0, #0x1
    4910:	cmp	w1, w0
    4914:	cset	w0, eq  // eq = none
    4918:	and	w0, w0, #0xff
    491c:	str	w0, [sp, #40]
    4920:	ldr	x0, [sp, #24]
    4924:	ldr	w0, [x0, #180]
    4928:	sub	w1, w0, #0x1
    492c:	ldr	x0, [sp, #24]
    4930:	str	w1, [x0, #180]
    4934:	ldr	x0, [sp, #24]
    4938:	ldr	w0, [x0, #172]
    493c:	add	w1, w0, #0x1
    4940:	ldr	x0, [sp, #24]
    4944:	str	w1, [x0, #172]
    4948:	ldr	w0, [sp, #40]
    494c:	cmp	w0, #0x0
    4950:	b.eq	432c <deflate_fast+0x10>  // b.none
    4954:	ldr	x0, [sp, #24]
    4958:	ldr	x0, [x0, #152]
    495c:	cmp	x0, #0x0
    4960:	b.lt	4980 <deflate_fast+0x664>  // b.tstop
    4964:	ldr	x0, [sp, #24]
    4968:	ldr	x1, [x0, #96]
    496c:	ldr	x0, [sp, #24]
    4970:	ldr	x0, [x0, #152]
    4974:	mov	w0, w0
    4978:	add	x0, x1, x0
    497c:	b	4984 <deflate_fast+0x668>
    4980:	mov	x0, #0x0                   	// #0
    4984:	ldr	x1, [sp, #24]
    4988:	ldr	w1, [x1, #172]
    498c:	mov	w2, w1
    4990:	ldr	x1, [sp, #24]
    4994:	ldr	x1, [x1, #152]
    4998:	sub	x1, x2, x1
    499c:	mov	w3, #0x0                   	// #0
    49a0:	mov	x2, x1
    49a4:	mov	x1, x0
    49a8:	ldr	x0, [sp, #24]
    49ac:	bl	0 <_tr_flush_block>
    49b0:	ldr	x0, [sp, #24]
    49b4:	ldr	w0, [x0, #172]
    49b8:	mov	w1, w0
    49bc:	ldr	x0, [sp, #24]
    49c0:	str	x1, [x0, #152]
    49c4:	ldr	x0, [sp, #24]
    49c8:	ldr	x0, [x0]
    49cc:	bl	14a8 <flush_pending>
    49d0:	ldr	x0, [sp, #24]
    49d4:	ldr	x0, [x0]
    49d8:	ldr	w0, [x0, #32]
    49dc:	cmp	w0, #0x0
    49e0:	b.ne	432c <deflate_fast+0x10>  // b.any
    49e4:	mov	w0, #0x0                   	// #0
    49e8:	b	4b64 <deflate_fast+0x848>
    49ec:	nop
    49f0:	ldr	x0, [sp, #24]
    49f4:	ldr	w0, [x0, #172]
    49f8:	mov	w1, #0x2                   	// #2
    49fc:	cmp	w0, #0x2
    4a00:	csel	w1, w0, w1, ls  // ls = plast
    4a04:	ldr	x0, [sp, #24]
    4a08:	str	w1, [x0, #5932]
    4a0c:	ldr	w0, [sp, #20]
    4a10:	cmp	w0, #0x4
    4a14:	b.ne	4ab8 <deflate_fast+0x79c>  // b.any
    4a18:	ldr	x0, [sp, #24]
    4a1c:	ldr	x0, [x0, #152]
    4a20:	cmp	x0, #0x0
    4a24:	b.lt	4a44 <deflate_fast+0x728>  // b.tstop
    4a28:	ldr	x0, [sp, #24]
    4a2c:	ldr	x1, [x0, #96]
    4a30:	ldr	x0, [sp, #24]
    4a34:	ldr	x0, [x0, #152]
    4a38:	mov	w0, w0
    4a3c:	add	x0, x1, x0
    4a40:	b	4a48 <deflate_fast+0x72c>
    4a44:	mov	x0, #0x0                   	// #0
    4a48:	ldr	x1, [sp, #24]
    4a4c:	ldr	w1, [x1, #172]
    4a50:	mov	w2, w1
    4a54:	ldr	x1, [sp, #24]
    4a58:	ldr	x1, [x1, #152]
    4a5c:	sub	x1, x2, x1
    4a60:	mov	w3, #0x1                   	// #1
    4a64:	mov	x2, x1
    4a68:	mov	x1, x0
    4a6c:	ldr	x0, [sp, #24]
    4a70:	bl	0 <_tr_flush_block>
    4a74:	ldr	x0, [sp, #24]
    4a78:	ldr	w0, [x0, #172]
    4a7c:	mov	w1, w0
    4a80:	ldr	x0, [sp, #24]
    4a84:	str	x1, [x0, #152]
    4a88:	ldr	x0, [sp, #24]
    4a8c:	ldr	x0, [x0]
    4a90:	bl	14a8 <flush_pending>
    4a94:	ldr	x0, [sp, #24]
    4a98:	ldr	x0, [x0]
    4a9c:	ldr	w0, [x0, #32]
    4aa0:	cmp	w0, #0x0
    4aa4:	b.ne	4ab0 <deflate_fast+0x794>  // b.any
    4aa8:	mov	w0, #0x2                   	// #2
    4aac:	b	4b64 <deflate_fast+0x848>
    4ab0:	mov	w0, #0x3                   	// #3
    4ab4:	b	4b64 <deflate_fast+0x848>
    4ab8:	ldr	x0, [sp, #24]
    4abc:	ldr	w0, [x0, #5900]
    4ac0:	cmp	w0, #0x0
    4ac4:	b.eq	4b60 <deflate_fast+0x844>  // b.none
    4ac8:	ldr	x0, [sp, #24]
    4acc:	ldr	x0, [x0, #152]
    4ad0:	cmp	x0, #0x0
    4ad4:	b.lt	4af4 <deflate_fast+0x7d8>  // b.tstop
    4ad8:	ldr	x0, [sp, #24]
    4adc:	ldr	x1, [x0, #96]
    4ae0:	ldr	x0, [sp, #24]
    4ae4:	ldr	x0, [x0, #152]
    4ae8:	mov	w0, w0
    4aec:	add	x0, x1, x0
    4af0:	b	4af8 <deflate_fast+0x7dc>
    4af4:	mov	x0, #0x0                   	// #0
    4af8:	ldr	x1, [sp, #24]
    4afc:	ldr	w1, [x1, #172]
    4b00:	mov	w2, w1
    4b04:	ldr	x1, [sp, #24]
    4b08:	ldr	x1, [x1, #152]
    4b0c:	sub	x1, x2, x1
    4b10:	mov	w3, #0x0                   	// #0
    4b14:	mov	x2, x1
    4b18:	mov	x1, x0
    4b1c:	ldr	x0, [sp, #24]
    4b20:	bl	0 <_tr_flush_block>
    4b24:	ldr	x0, [sp, #24]
    4b28:	ldr	w0, [x0, #172]
    4b2c:	mov	w1, w0
    4b30:	ldr	x0, [sp, #24]
    4b34:	str	x1, [x0, #152]
    4b38:	ldr	x0, [sp, #24]
    4b3c:	ldr	x0, [x0]
    4b40:	bl	14a8 <flush_pending>
    4b44:	ldr	x0, [sp, #24]
    4b48:	ldr	x0, [x0]
    4b4c:	ldr	w0, [x0, #32]
    4b50:	cmp	w0, #0x0
    4b54:	b.ne	4b60 <deflate_fast+0x844>  // b.any
    4b58:	mov	w0, #0x0                   	// #0
    4b5c:	b	4b64 <deflate_fast+0x848>
    4b60:	mov	w0, #0x1                   	// #1
    4b64:	ldp	x29, x30, [sp], #48
    4b68:	ret

0000000000004b6c <deflate_slow>:
    4b6c:	stp	x29, x30, [sp, #-64]!
    4b70:	mov	x29, sp
    4b74:	str	x0, [sp, #24]
    4b78:	str	w1, [sp, #20]
    4b7c:	ldr	x0, [sp, #24]
    4b80:	ldr	w0, [x0, #180]
    4b84:	cmp	w0, #0x105
    4b88:	b.hi	4bc8 <deflate_slow+0x5c>  // b.pmore
    4b8c:	ldr	x0, [sp, #24]
    4b90:	bl	34ec <fill_window>
    4b94:	ldr	x0, [sp, #24]
    4b98:	ldr	w0, [x0, #180]
    4b9c:	cmp	w0, #0x105
    4ba0:	b.hi	4bb8 <deflate_slow+0x4c>  // b.pmore
    4ba4:	ldr	w0, [sp, #20]
    4ba8:	cmp	w0, #0x0
    4bac:	b.ne	4bb8 <deflate_slow+0x4c>  // b.any
    4bb0:	mov	w0, #0x0                   	// #0
    4bb4:	b	55d4 <deflate_slow+0xa68>
    4bb8:	ldr	x0, [sp, #24]
    4bbc:	ldr	w0, [x0, #180]
    4bc0:	cmp	w0, #0x0
    4bc4:	b.eq	5370 <deflate_slow+0x804>  // b.none
    4bc8:	str	wzr, [sp, #60]
    4bcc:	ldr	x0, [sp, #24]
    4bd0:	ldr	w0, [x0, #180]
    4bd4:	cmp	w0, #0x2
    4bd8:	b.ls	4ca8 <deflate_slow+0x13c>  // b.plast
    4bdc:	ldr	x0, [sp, #24]
    4be0:	ldr	w1, [x0, #128]
    4be4:	ldr	x0, [sp, #24]
    4be8:	ldr	w0, [x0, #144]
    4bec:	lsl	w0, w1, w0
    4bf0:	ldr	x1, [sp, #24]
    4bf4:	ldr	x2, [x1, #96]
    4bf8:	ldr	x1, [sp, #24]
    4bfc:	ldr	w1, [x1, #172]
    4c00:	add	w1, w1, #0x2
    4c04:	mov	w1, w1
    4c08:	add	x1, x2, x1
    4c0c:	ldrb	w1, [x1]
    4c10:	eor	w1, w0, w1
    4c14:	ldr	x0, [sp, #24]
    4c18:	ldr	w0, [x0, #140]
    4c1c:	and	w1, w1, w0
    4c20:	ldr	x0, [sp, #24]
    4c24:	str	w1, [x0, #128]
    4c28:	ldr	x0, [sp, #24]
    4c2c:	ldr	x1, [x0, #120]
    4c30:	ldr	x0, [sp, #24]
    4c34:	ldr	w0, [x0, #128]
    4c38:	mov	w0, w0
    4c3c:	lsl	x0, x0, #1
    4c40:	add	x1, x1, x0
    4c44:	ldr	x0, [sp, #24]
    4c48:	ldr	x2, [x0, #112]
    4c4c:	ldr	x0, [sp, #24]
    4c50:	ldr	w3, [x0, #172]
    4c54:	ldr	x0, [sp, #24]
    4c58:	ldr	w0, [x0, #88]
    4c5c:	and	w0, w3, w0
    4c60:	mov	w0, w0
    4c64:	lsl	x0, x0, #1
    4c68:	add	x0, x2, x0
    4c6c:	ldrh	w1, [x1]
    4c70:	strh	w1, [x0]
    4c74:	ldrh	w0, [x0]
    4c78:	str	w0, [sp, #60]
    4c7c:	ldr	x0, [sp, #24]
    4c80:	ldr	w2, [x0, #172]
    4c84:	ldr	x0, [sp, #24]
    4c88:	ldr	x1, [x0, #120]
    4c8c:	ldr	x0, [sp, #24]
    4c90:	ldr	w0, [x0, #128]
    4c94:	mov	w0, w0
    4c98:	lsl	x0, x0, #1
    4c9c:	add	x0, x1, x0
    4ca0:	and	w1, w2, #0xffff
    4ca4:	strh	w1, [x0]
    4ca8:	ldr	x0, [sp, #24]
    4cac:	ldr	w1, [x0, #160]
    4cb0:	ldr	x0, [sp, #24]
    4cb4:	str	w1, [x0, #184]
    4cb8:	ldr	x0, [sp, #24]
    4cbc:	ldr	w1, [x0, #176]
    4cc0:	ldr	x0, [sp, #24]
    4cc4:	str	w1, [x0, #164]
    4cc8:	ldr	x0, [sp, #24]
    4ccc:	mov	w1, #0x2                   	// #2
    4cd0:	str	w1, [x0, #160]
    4cd4:	ldr	w0, [sp, #60]
    4cd8:	cmp	w0, #0x0
    4cdc:	b.eq	4d8c <deflate_slow+0x220>  // b.none
    4ce0:	ldr	x0, [sp, #24]
    4ce4:	ldr	w1, [x0, #184]
    4ce8:	ldr	x0, [sp, #24]
    4cec:	ldr	w0, [x0, #192]
    4cf0:	cmp	w1, w0
    4cf4:	b.cs	4d8c <deflate_slow+0x220>  // b.hs, b.nlast
    4cf8:	ldr	x0, [sp, #24]
    4cfc:	ldr	w1, [x0, #172]
    4d00:	ldr	w0, [sp, #60]
    4d04:	sub	w1, w1, w0
    4d08:	ldr	x0, [sp, #24]
    4d0c:	ldr	w0, [x0, #80]
    4d10:	sub	w0, w0, #0x106
    4d14:	cmp	w1, w0
    4d18:	b.hi	4d8c <deflate_slow+0x220>  // b.pmore
    4d1c:	ldr	w1, [sp, #60]
    4d20:	ldr	x0, [sp, #24]
    4d24:	bl	31ac <longest_match>
    4d28:	mov	w1, w0
    4d2c:	ldr	x0, [sp, #24]
    4d30:	str	w1, [x0, #160]
    4d34:	ldr	x0, [sp, #24]
    4d38:	ldr	w0, [x0, #160]
    4d3c:	cmp	w0, #0x5
    4d40:	b.hi	4d8c <deflate_slow+0x220>  // b.pmore
    4d44:	ldr	x0, [sp, #24]
    4d48:	ldr	w0, [x0, #200]
    4d4c:	cmp	w0, #0x1
    4d50:	b.eq	4d80 <deflate_slow+0x214>  // b.none
    4d54:	ldr	x0, [sp, #24]
    4d58:	ldr	w0, [x0, #160]
    4d5c:	cmp	w0, #0x3
    4d60:	b.ne	4d8c <deflate_slow+0x220>  // b.any
    4d64:	ldr	x0, [sp, #24]
    4d68:	ldr	w1, [x0, #172]
    4d6c:	ldr	x0, [sp, #24]
    4d70:	ldr	w0, [x0, #176]
    4d74:	sub	w0, w1, w0
    4d78:	cmp	w0, #0x1, lsl #12
    4d7c:	b.ls	4d8c <deflate_slow+0x220>  // b.plast
    4d80:	ldr	x0, [sp, #24]
    4d84:	mov	w1, #0x2                   	// #2
    4d88:	str	w1, [x0, #160]
    4d8c:	ldr	x0, [sp, #24]
    4d90:	ldr	w0, [x0, #184]
    4d94:	cmp	w0, #0x2
    4d98:	b.ls	5180 <deflate_slow+0x614>  // b.plast
    4d9c:	ldr	x0, [sp, #24]
    4da0:	ldr	w1, [x0, #160]
    4da4:	ldr	x0, [sp, #24]
    4da8:	ldr	w0, [x0, #184]
    4dac:	cmp	w1, w0
    4db0:	b.hi	5180 <deflate_slow+0x614>  // b.pmore
    4db4:	ldr	x0, [sp, #24]
    4db8:	ldr	w1, [x0, #172]
    4dbc:	ldr	x0, [sp, #24]
    4dc0:	ldr	w0, [x0, #180]
    4dc4:	add	w0, w1, w0
    4dc8:	sub	w0, w0, #0x3
    4dcc:	str	w0, [sp, #48]
    4dd0:	ldr	x0, [sp, #24]
    4dd4:	ldr	w0, [x0, #184]
    4dd8:	and	w0, w0, #0xff
    4ddc:	sub	w0, w0, #0x3
    4de0:	strb	w0, [sp, #47]
    4de4:	ldr	x0, [sp, #24]
    4de8:	ldr	w0, [x0, #172]
    4dec:	and	w1, w0, #0xffff
    4df0:	ldr	x0, [sp, #24]
    4df4:	ldr	w0, [x0, #164]
    4df8:	and	w0, w0, #0xffff
    4dfc:	sub	w0, w1, w0
    4e00:	and	w0, w0, #0xffff
    4e04:	sub	w0, w0, #0x1
    4e08:	strh	w0, [sp, #44]
    4e0c:	ldr	x0, [sp, #24]
    4e10:	ldr	x1, [x0, #5904]
    4e14:	ldr	x0, [sp, #24]
    4e18:	ldr	w0, [x0, #5900]
    4e1c:	mov	w0, w0
    4e20:	lsl	x0, x0, #1
    4e24:	add	x0, x1, x0
    4e28:	ldrh	w1, [sp, #44]
    4e2c:	strh	w1, [x0]
    4e30:	ldr	x0, [sp, #24]
    4e34:	ldr	x1, [x0, #5888]
    4e38:	ldr	x0, [sp, #24]
    4e3c:	ldr	w0, [x0, #5900]
    4e40:	add	w3, w0, #0x1
    4e44:	ldr	x2, [sp, #24]
    4e48:	str	w3, [x2, #5900]
    4e4c:	mov	w0, w0
    4e50:	add	x0, x1, x0
    4e54:	ldrb	w1, [sp, #47]
    4e58:	strb	w1, [x0]
    4e5c:	ldrh	w0, [sp, #44]
    4e60:	sub	w0, w0, #0x1
    4e64:	strh	w0, [sp, #44]
    4e68:	ldrb	w2, [sp, #47]
    4e6c:	adrp	x0, 0 <_length_code>
    4e70:	add	x1, x0, #0x0
    4e74:	sxtw	x0, w2
    4e78:	ldrb	w0, [x1, x0]
    4e7c:	add	w2, w0, #0x101
    4e80:	ldr	x1, [sp, #24]
    4e84:	sxtw	x0, w2
    4e88:	add	x0, x0, #0x34
    4e8c:	lsl	x0, x0, #2
    4e90:	add	x0, x1, x0
    4e94:	ldrh	w0, [x0, #4]
    4e98:	add	w0, w0, #0x1
    4e9c:	and	w3, w0, #0xffff
    4ea0:	ldr	x1, [sp, #24]
    4ea4:	sxtw	x0, w2
    4ea8:	add	x0, x0, #0x34
    4eac:	lsl	x0, x0, #2
    4eb0:	add	x0, x1, x0
    4eb4:	mov	w1, w3
    4eb8:	strh	w1, [x0, #4]
    4ebc:	ldrh	w0, [sp, #44]
    4ec0:	cmp	w0, #0xff
    4ec4:	b.hi	4ee4 <deflate_slow+0x378>  // b.pmore
    4ec8:	ldrh	w2, [sp, #44]
    4ecc:	adrp	x0, 0 <_dist_code>
    4ed0:	add	x1, x0, #0x0
    4ed4:	sxtw	x0, w2
    4ed8:	ldrb	w0, [x1, x0]
    4edc:	mov	w2, w0
    4ee0:	b	4f08 <deflate_slow+0x39c>
    4ee4:	ldrh	w0, [sp, #44]
    4ee8:	lsr	w0, w0, #7
    4eec:	and	w0, w0, #0xffff
    4ef0:	add	w2, w0, #0x100
    4ef4:	adrp	x0, 0 <_dist_code>
    4ef8:	add	x1, x0, #0x0
    4efc:	sxtw	x0, w2
    4f00:	ldrb	w0, [x1, x0]
    4f04:	mov	w2, w0
    4f08:	ldr	x1, [sp, #24]
    4f0c:	sxtw	x0, w2
    4f10:	add	x0, x0, #0x270
    4f14:	lsl	x0, x0, #2
    4f18:	add	x0, x1, x0
    4f1c:	ldrh	w0, [x0, #8]
    4f20:	add	w0, w0, #0x1
    4f24:	and	w3, w0, #0xffff
    4f28:	ldr	x1, [sp, #24]
    4f2c:	sxtw	x0, w2
    4f30:	add	x0, x0, #0x270
    4f34:	lsl	x0, x0, #2
    4f38:	add	x0, x1, x0
    4f3c:	mov	w1, w3
    4f40:	strh	w1, [x0, #8]
    4f44:	ldr	x0, [sp, #24]
    4f48:	ldr	w1, [x0, #5900]
    4f4c:	ldr	x0, [sp, #24]
    4f50:	ldr	w0, [x0, #5896]
    4f54:	sub	w0, w0, #0x1
    4f58:	cmp	w1, w0
    4f5c:	cset	w0, eq  // eq = none
    4f60:	and	w0, w0, #0xff
    4f64:	str	w0, [sp, #52]
    4f68:	ldr	x0, [sp, #24]
    4f6c:	ldr	w1, [x0, #180]
    4f70:	ldr	x0, [sp, #24]
    4f74:	ldr	w0, [x0, #184]
    4f78:	sub	w0, w1, w0
    4f7c:	add	w1, w0, #0x1
    4f80:	ldr	x0, [sp, #24]
    4f84:	str	w1, [x0, #180]
    4f88:	ldr	x0, [sp, #24]
    4f8c:	ldr	w0, [x0, #184]
    4f90:	sub	w1, w0, #0x2
    4f94:	ldr	x0, [sp, #24]
    4f98:	str	w1, [x0, #184]
    4f9c:	ldr	x0, [sp, #24]
    4fa0:	ldr	w0, [x0, #172]
    4fa4:	add	w1, w0, #0x1
    4fa8:	ldr	x0, [sp, #24]
    4fac:	str	w1, [x0, #172]
    4fb0:	ldr	x0, [sp, #24]
    4fb4:	ldr	w0, [x0, #172]
    4fb8:	ldr	w1, [sp, #48]
    4fbc:	cmp	w1, w0
    4fc0:	b.cc	5090 <deflate_slow+0x524>  // b.lo, b.ul, b.last
    4fc4:	ldr	x0, [sp, #24]
    4fc8:	ldr	w1, [x0, #128]
    4fcc:	ldr	x0, [sp, #24]
    4fd0:	ldr	w0, [x0, #144]
    4fd4:	lsl	w0, w1, w0
    4fd8:	ldr	x1, [sp, #24]
    4fdc:	ldr	x2, [x1, #96]
    4fe0:	ldr	x1, [sp, #24]
    4fe4:	ldr	w1, [x1, #172]
    4fe8:	add	w1, w1, #0x2
    4fec:	mov	w1, w1
    4ff0:	add	x1, x2, x1
    4ff4:	ldrb	w1, [x1]
    4ff8:	eor	w1, w0, w1
    4ffc:	ldr	x0, [sp, #24]
    5000:	ldr	w0, [x0, #140]
    5004:	and	w1, w1, w0
    5008:	ldr	x0, [sp, #24]
    500c:	str	w1, [x0, #128]
    5010:	ldr	x0, [sp, #24]
    5014:	ldr	x1, [x0, #120]
    5018:	ldr	x0, [sp, #24]
    501c:	ldr	w0, [x0, #128]
    5020:	mov	w0, w0
    5024:	lsl	x0, x0, #1
    5028:	add	x1, x1, x0
    502c:	ldr	x0, [sp, #24]
    5030:	ldr	x2, [x0, #112]
    5034:	ldr	x0, [sp, #24]
    5038:	ldr	w3, [x0, #172]
    503c:	ldr	x0, [sp, #24]
    5040:	ldr	w0, [x0, #88]
    5044:	and	w0, w3, w0
    5048:	mov	w0, w0
    504c:	lsl	x0, x0, #1
    5050:	add	x0, x2, x0
    5054:	ldrh	w1, [x1]
    5058:	strh	w1, [x0]
    505c:	ldrh	w0, [x0]
    5060:	str	w0, [sp, #60]
    5064:	ldr	x0, [sp, #24]
    5068:	ldr	w2, [x0, #172]
    506c:	ldr	x0, [sp, #24]
    5070:	ldr	x1, [x0, #120]
    5074:	ldr	x0, [sp, #24]
    5078:	ldr	w0, [x0, #128]
    507c:	mov	w0, w0
    5080:	lsl	x0, x0, #1
    5084:	add	x0, x1, x0
    5088:	and	w1, w2, #0xffff
    508c:	strh	w1, [x0]
    5090:	ldr	x0, [sp, #24]
    5094:	ldr	w0, [x0, #184]
    5098:	sub	w1, w0, #0x1
    509c:	ldr	x0, [sp, #24]
    50a0:	str	w1, [x0, #184]
    50a4:	ldr	x0, [sp, #24]
    50a8:	ldr	w0, [x0, #184]
    50ac:	cmp	w0, #0x0
    50b0:	b.ne	4f9c <deflate_slow+0x430>  // b.any
    50b4:	ldr	x0, [sp, #24]
    50b8:	str	wzr, [x0, #168]
    50bc:	ldr	x0, [sp, #24]
    50c0:	mov	w1, #0x2                   	// #2
    50c4:	str	w1, [x0, #160]
    50c8:	ldr	x0, [sp, #24]
    50cc:	ldr	w0, [x0, #172]
    50d0:	add	w1, w0, #0x1
    50d4:	ldr	x0, [sp, #24]
    50d8:	str	w1, [x0, #172]
    50dc:	ldr	w0, [sp, #52]
    50e0:	cmp	w0, #0x0
    50e4:	b.eq	5368 <deflate_slow+0x7fc>  // b.none
    50e8:	ldr	x0, [sp, #24]
    50ec:	ldr	x0, [x0, #152]
    50f0:	cmp	x0, #0x0
    50f4:	b.lt	5114 <deflate_slow+0x5a8>  // b.tstop
    50f8:	ldr	x0, [sp, #24]
    50fc:	ldr	x1, [x0, #96]
    5100:	ldr	x0, [sp, #24]
    5104:	ldr	x0, [x0, #152]
    5108:	mov	w0, w0
    510c:	add	x0, x1, x0
    5110:	b	5118 <deflate_slow+0x5ac>
    5114:	mov	x0, #0x0                   	// #0
    5118:	ldr	x1, [sp, #24]
    511c:	ldr	w1, [x1, #172]
    5120:	mov	w2, w1
    5124:	ldr	x1, [sp, #24]
    5128:	ldr	x1, [x1, #152]
    512c:	sub	x1, x2, x1
    5130:	mov	w3, #0x0                   	// #0
    5134:	mov	x2, x1
    5138:	mov	x1, x0
    513c:	ldr	x0, [sp, #24]
    5140:	bl	0 <_tr_flush_block>
    5144:	ldr	x0, [sp, #24]
    5148:	ldr	w0, [x0, #172]
    514c:	mov	w1, w0
    5150:	ldr	x0, [sp, #24]
    5154:	str	x1, [x0, #152]
    5158:	ldr	x0, [sp, #24]
    515c:	ldr	x0, [x0]
    5160:	bl	14a8 <flush_pending>
    5164:	ldr	x0, [sp, #24]
    5168:	ldr	x0, [x0]
    516c:	ldr	w0, [x0, #32]
    5170:	cmp	w0, #0x0
    5174:	b.ne	5368 <deflate_slow+0x7fc>  // b.any
    5178:	mov	w0, #0x0                   	// #0
    517c:	b	55d4 <deflate_slow+0xa68>
    5180:	ldr	x0, [sp, #24]
    5184:	ldr	w0, [x0, #168]
    5188:	cmp	w0, #0x0
    518c:	b.eq	5330 <deflate_slow+0x7c4>  // b.none
    5190:	ldr	x0, [sp, #24]
    5194:	ldr	x1, [x0, #96]
    5198:	ldr	x0, [sp, #24]
    519c:	ldr	w0, [x0, #172]
    51a0:	sub	w0, w0, #0x1
    51a4:	mov	w0, w0
    51a8:	add	x0, x1, x0
    51ac:	ldrb	w0, [x0]
    51b0:	strb	w0, [sp, #43]
    51b4:	ldr	x0, [sp, #24]
    51b8:	ldr	x1, [x0, #5904]
    51bc:	ldr	x0, [sp, #24]
    51c0:	ldr	w0, [x0, #5900]
    51c4:	mov	w0, w0
    51c8:	lsl	x0, x0, #1
    51cc:	add	x0, x1, x0
    51d0:	strh	wzr, [x0]
    51d4:	ldr	x0, [sp, #24]
    51d8:	ldr	x1, [x0, #5888]
    51dc:	ldr	x0, [sp, #24]
    51e0:	ldr	w0, [x0, #5900]
    51e4:	add	w3, w0, #0x1
    51e8:	ldr	x2, [sp, #24]
    51ec:	str	w3, [x2, #5900]
    51f0:	mov	w0, w0
    51f4:	add	x0, x1, x0
    51f8:	ldrb	w1, [sp, #43]
    51fc:	strb	w1, [x0]
    5200:	ldrb	w2, [sp, #43]
    5204:	ldr	x1, [sp, #24]
    5208:	sxtw	x0, w2
    520c:	add	x0, x0, #0x34
    5210:	lsl	x0, x0, #2
    5214:	add	x0, x1, x0
    5218:	ldrh	w0, [x0, #4]
    521c:	add	w0, w0, #0x1
    5220:	and	w3, w0, #0xffff
    5224:	ldr	x1, [sp, #24]
    5228:	sxtw	x0, w2
    522c:	add	x0, x0, #0x34
    5230:	lsl	x0, x0, #2
    5234:	add	x0, x1, x0
    5238:	mov	w1, w3
    523c:	strh	w1, [x0, #4]
    5240:	ldr	x0, [sp, #24]
    5244:	ldr	w1, [x0, #5900]
    5248:	ldr	x0, [sp, #24]
    524c:	ldr	w0, [x0, #5896]
    5250:	sub	w0, w0, #0x1
    5254:	cmp	w1, w0
    5258:	cset	w0, eq  // eq = none
    525c:	and	w0, w0, #0xff
    5260:	str	w0, [sp, #52]
    5264:	ldr	w0, [sp, #52]
    5268:	cmp	w0, #0x0
    526c:	b.eq	52ec <deflate_slow+0x780>  // b.none
    5270:	ldr	x0, [sp, #24]
    5274:	ldr	x0, [x0, #152]
    5278:	cmp	x0, #0x0
    527c:	b.lt	529c <deflate_slow+0x730>  // b.tstop
    5280:	ldr	x0, [sp, #24]
    5284:	ldr	x1, [x0, #96]
    5288:	ldr	x0, [sp, #24]
    528c:	ldr	x0, [x0, #152]
    5290:	mov	w0, w0
    5294:	add	x0, x1, x0
    5298:	b	52a0 <deflate_slow+0x734>
    529c:	mov	x0, #0x0                   	// #0
    52a0:	ldr	x1, [sp, #24]
    52a4:	ldr	w1, [x1, #172]
    52a8:	mov	w2, w1
    52ac:	ldr	x1, [sp, #24]
    52b0:	ldr	x1, [x1, #152]
    52b4:	sub	x1, x2, x1
    52b8:	mov	w3, #0x0                   	// #0
    52bc:	mov	x2, x1
    52c0:	mov	x1, x0
    52c4:	ldr	x0, [sp, #24]
    52c8:	bl	0 <_tr_flush_block>
    52cc:	ldr	x0, [sp, #24]
    52d0:	ldr	w0, [x0, #172]
    52d4:	mov	w1, w0
    52d8:	ldr	x0, [sp, #24]
    52dc:	str	x1, [x0, #152]
    52e0:	ldr	x0, [sp, #24]
    52e4:	ldr	x0, [x0]
    52e8:	bl	14a8 <flush_pending>
    52ec:	ldr	x0, [sp, #24]
    52f0:	ldr	w0, [x0, #172]
    52f4:	add	w1, w0, #0x1
    52f8:	ldr	x0, [sp, #24]
    52fc:	str	w1, [x0, #172]
    5300:	ldr	x0, [sp, #24]
    5304:	ldr	w0, [x0, #180]
    5308:	sub	w1, w0, #0x1
    530c:	ldr	x0, [sp, #24]
    5310:	str	w1, [x0, #180]
    5314:	ldr	x0, [sp, #24]
    5318:	ldr	x0, [x0]
    531c:	ldr	w0, [x0, #32]
    5320:	cmp	w0, #0x0
    5324:	b.ne	4b7c <deflate_slow+0x10>  // b.any
    5328:	mov	w0, #0x0                   	// #0
    532c:	b	55d4 <deflate_slow+0xa68>
    5330:	ldr	x0, [sp, #24]
    5334:	mov	w1, #0x1                   	// #1
    5338:	str	w1, [x0, #168]
    533c:	ldr	x0, [sp, #24]
    5340:	ldr	w0, [x0, #172]
    5344:	add	w1, w0, #0x1
    5348:	ldr	x0, [sp, #24]
    534c:	str	w1, [x0, #172]
    5350:	ldr	x0, [sp, #24]
    5354:	ldr	w0, [x0, #180]
    5358:	sub	w1, w0, #0x1
    535c:	ldr	x0, [sp, #24]
    5360:	str	w1, [x0, #180]
    5364:	b	4b7c <deflate_slow+0x10>
    5368:	nop
    536c:	b	4b7c <deflate_slow+0x10>
    5370:	nop
    5374:	ldr	x0, [sp, #24]
    5378:	ldr	w0, [x0, #168]
    537c:	cmp	w0, #0x0
    5380:	b.eq	5460 <deflate_slow+0x8f4>  // b.none
    5384:	ldr	x0, [sp, #24]
    5388:	ldr	x1, [x0, #96]
    538c:	ldr	x0, [sp, #24]
    5390:	ldr	w0, [x0, #172]
    5394:	sub	w0, w0, #0x1
    5398:	mov	w0, w0
    539c:	add	x0, x1, x0
    53a0:	ldrb	w0, [x0]
    53a4:	strb	w0, [sp, #59]
    53a8:	ldr	x0, [sp, #24]
    53ac:	ldr	x1, [x0, #5904]
    53b0:	ldr	x0, [sp, #24]
    53b4:	ldr	w0, [x0, #5900]
    53b8:	mov	w0, w0
    53bc:	lsl	x0, x0, #1
    53c0:	add	x0, x1, x0
    53c4:	strh	wzr, [x0]
    53c8:	ldr	x0, [sp, #24]
    53cc:	ldr	x1, [x0, #5888]
    53d0:	ldr	x0, [sp, #24]
    53d4:	ldr	w0, [x0, #5900]
    53d8:	add	w3, w0, #0x1
    53dc:	ldr	x2, [sp, #24]
    53e0:	str	w3, [x2, #5900]
    53e4:	mov	w0, w0
    53e8:	add	x0, x1, x0
    53ec:	ldrb	w1, [sp, #59]
    53f0:	strb	w1, [x0]
    53f4:	ldrb	w2, [sp, #59]
    53f8:	ldr	x1, [sp, #24]
    53fc:	sxtw	x0, w2
    5400:	add	x0, x0, #0x34
    5404:	lsl	x0, x0, #2
    5408:	add	x0, x1, x0
    540c:	ldrh	w0, [x0, #4]
    5410:	add	w0, w0, #0x1
    5414:	and	w3, w0, #0xffff
    5418:	ldr	x1, [sp, #24]
    541c:	sxtw	x0, w2
    5420:	add	x0, x0, #0x34
    5424:	lsl	x0, x0, #2
    5428:	add	x0, x1, x0
    542c:	mov	w1, w3
    5430:	strh	w1, [x0, #4]
    5434:	ldr	x0, [sp, #24]
    5438:	ldr	w1, [x0, #5900]
    543c:	ldr	x0, [sp, #24]
    5440:	ldr	w0, [x0, #5896]
    5444:	sub	w0, w0, #0x1
    5448:	cmp	w1, w0
    544c:	cset	w0, eq  // eq = none
    5450:	and	w0, w0, #0xff
    5454:	str	w0, [sp, #52]
    5458:	ldr	x0, [sp, #24]
    545c:	str	wzr, [x0, #168]
    5460:	ldr	x0, [sp, #24]
    5464:	ldr	w0, [x0, #172]
    5468:	mov	w1, #0x2                   	// #2
    546c:	cmp	w0, #0x2
    5470:	csel	w1, w0, w1, ls  // ls = plast
    5474:	ldr	x0, [sp, #24]
    5478:	str	w1, [x0, #5932]
    547c:	ldr	w0, [sp, #20]
    5480:	cmp	w0, #0x4
    5484:	b.ne	5528 <deflate_slow+0x9bc>  // b.any
    5488:	ldr	x0, [sp, #24]
    548c:	ldr	x0, [x0, #152]
    5490:	cmp	x0, #0x0
    5494:	b.lt	54b4 <deflate_slow+0x948>  // b.tstop
    5498:	ldr	x0, [sp, #24]
    549c:	ldr	x1, [x0, #96]
    54a0:	ldr	x0, [sp, #24]
    54a4:	ldr	x0, [x0, #152]
    54a8:	mov	w0, w0
    54ac:	add	x0, x1, x0
    54b0:	b	54b8 <deflate_slow+0x94c>
    54b4:	mov	x0, #0x0                   	// #0
    54b8:	ldr	x1, [sp, #24]
    54bc:	ldr	w1, [x1, #172]
    54c0:	mov	w2, w1
    54c4:	ldr	x1, [sp, #24]
    54c8:	ldr	x1, [x1, #152]
    54cc:	sub	x1, x2, x1
    54d0:	mov	w3, #0x1                   	// #1
    54d4:	mov	x2, x1
    54d8:	mov	x1, x0
    54dc:	ldr	x0, [sp, #24]
    54e0:	bl	0 <_tr_flush_block>
    54e4:	ldr	x0, [sp, #24]
    54e8:	ldr	w0, [x0, #172]
    54ec:	mov	w1, w0
    54f0:	ldr	x0, [sp, #24]
    54f4:	str	x1, [x0, #152]
    54f8:	ldr	x0, [sp, #24]
    54fc:	ldr	x0, [x0]
    5500:	bl	14a8 <flush_pending>
    5504:	ldr	x0, [sp, #24]
    5508:	ldr	x0, [x0]
    550c:	ldr	w0, [x0, #32]
    5510:	cmp	w0, #0x0
    5514:	b.ne	5520 <deflate_slow+0x9b4>  // b.any
    5518:	mov	w0, #0x2                   	// #2
    551c:	b	55d4 <deflate_slow+0xa68>
    5520:	mov	w0, #0x3                   	// #3
    5524:	b	55d4 <deflate_slow+0xa68>
    5528:	ldr	x0, [sp, #24]
    552c:	ldr	w0, [x0, #5900]
    5530:	cmp	w0, #0x0
    5534:	b.eq	55d0 <deflate_slow+0xa64>  // b.none
    5538:	ldr	x0, [sp, #24]
    553c:	ldr	x0, [x0, #152]
    5540:	cmp	x0, #0x0
    5544:	b.lt	5564 <deflate_slow+0x9f8>  // b.tstop
    5548:	ldr	x0, [sp, #24]
    554c:	ldr	x1, [x0, #96]
    5550:	ldr	x0, [sp, #24]
    5554:	ldr	x0, [x0, #152]
    5558:	mov	w0, w0
    555c:	add	x0, x1, x0
    5560:	b	5568 <deflate_slow+0x9fc>
    5564:	mov	x0, #0x0                   	// #0
    5568:	ldr	x1, [sp, #24]
    556c:	ldr	w1, [x1, #172]
    5570:	mov	w2, w1
    5574:	ldr	x1, [sp, #24]
    5578:	ldr	x1, [x1, #152]
    557c:	sub	x1, x2, x1
    5580:	mov	w3, #0x0                   	// #0
    5584:	mov	x2, x1
    5588:	mov	x1, x0
    558c:	ldr	x0, [sp, #24]
    5590:	bl	0 <_tr_flush_block>
    5594:	ldr	x0, [sp, #24]
    5598:	ldr	w0, [x0, #172]
    559c:	mov	w1, w0
    55a0:	ldr	x0, [sp, #24]
    55a4:	str	x1, [x0, #152]
    55a8:	ldr	x0, [sp, #24]
    55ac:	ldr	x0, [x0]
    55b0:	bl	14a8 <flush_pending>
    55b4:	ldr	x0, [sp, #24]
    55b8:	ldr	x0, [x0]
    55bc:	ldr	w0, [x0, #32]
    55c0:	cmp	w0, #0x0
    55c4:	b.ne	55d0 <deflate_slow+0xa64>  // b.any
    55c8:	mov	w0, #0x0                   	// #0
    55cc:	b	55d4 <deflate_slow+0xa68>
    55d0:	mov	w0, #0x1                   	// #1
    55d4:	ldp	x29, x30, [sp], #64
    55d8:	ret

00000000000055dc <deflate_rle>:
    55dc:	stp	x29, x30, [sp, #-80]!
    55e0:	mov	x29, sp
    55e4:	str	x0, [sp, #24]
    55e8:	str	w1, [sp, #20]
    55ec:	ldr	x0, [sp, #24]
    55f0:	ldr	w0, [x0, #180]
    55f4:	cmp	w0, #0x102
    55f8:	b.hi	5638 <deflate_rle+0x5c>  // b.pmore
    55fc:	ldr	x0, [sp, #24]
    5600:	bl	34ec <fill_window>
    5604:	ldr	x0, [sp, #24]
    5608:	ldr	w0, [x0, #180]
    560c:	cmp	w0, #0x102
    5610:	b.hi	5628 <deflate_rle+0x4c>  // b.pmore
    5614:	ldr	w0, [sp, #20]
    5618:	cmp	w0, #0x0
    561c:	b.ne	5628 <deflate_rle+0x4c>  // b.any
    5620:	mov	w0, #0x0                   	// #0
    5624:	b	5d5c <deflate_rle+0x780>
    5628:	ldr	x0, [sp, #24]
    562c:	ldr	w0, [x0, #180]
    5630:	cmp	w0, #0x0
    5634:	b.eq	5bf8 <deflate_rle+0x61c>  // b.none
    5638:	ldr	x0, [sp, #24]
    563c:	str	wzr, [x0, #160]
    5640:	ldr	x0, [sp, #24]
    5644:	ldr	w0, [x0, #180]
    5648:	cmp	w0, #0x2
    564c:	b.ls	5890 <deflate_rle+0x2b4>  // b.plast
    5650:	ldr	x0, [sp, #24]
    5654:	ldr	w0, [x0, #172]
    5658:	cmp	w0, #0x0
    565c:	b.eq	5890 <deflate_rle+0x2b4>  // b.none
    5660:	ldr	x0, [sp, #24]
    5664:	ldr	x1, [x0, #96]
    5668:	ldr	x0, [sp, #24]
    566c:	ldr	w0, [x0, #172]
    5670:	mov	w0, w0
    5674:	sub	x0, x0, #0x1
    5678:	add	x0, x1, x0
    567c:	str	x0, [sp, #64]
    5680:	ldr	x0, [sp, #64]
    5684:	ldrb	w0, [x0]
    5688:	str	w0, [sp, #60]
    568c:	ldr	x0, [sp, #64]
    5690:	add	x0, x0, #0x1
    5694:	str	x0, [sp, #64]
    5698:	ldr	x0, [sp, #64]
    569c:	ldrb	w0, [x0]
    56a0:	mov	w1, w0
    56a4:	ldr	w0, [sp, #60]
    56a8:	cmp	w0, w1
    56ac:	b.ne	5890 <deflate_rle+0x2b4>  // b.any
    56b0:	ldr	x0, [sp, #64]
    56b4:	add	x0, x0, #0x1
    56b8:	str	x0, [sp, #64]
    56bc:	ldr	x0, [sp, #64]
    56c0:	ldrb	w0, [x0]
    56c4:	mov	w1, w0
    56c8:	ldr	w0, [sp, #60]
    56cc:	cmp	w0, w1
    56d0:	b.ne	5890 <deflate_rle+0x2b4>  // b.any
    56d4:	ldr	x0, [sp, #64]
    56d8:	add	x0, x0, #0x1
    56dc:	str	x0, [sp, #64]
    56e0:	ldr	x0, [sp, #64]
    56e4:	ldrb	w0, [x0]
    56e8:	mov	w1, w0
    56ec:	ldr	w0, [sp, #60]
    56f0:	cmp	w0, w1
    56f4:	b.ne	5890 <deflate_rle+0x2b4>  // b.any
    56f8:	ldr	x0, [sp, #24]
    56fc:	ldr	x1, [x0, #96]
    5700:	ldr	x0, [sp, #24]
    5704:	ldr	w0, [x0, #172]
    5708:	mov	w0, w0
    570c:	add	x0, x0, #0x102
    5710:	add	x0, x1, x0
    5714:	str	x0, [sp, #48]
    5718:	ldr	x0, [sp, #64]
    571c:	add	x0, x0, #0x1
    5720:	str	x0, [sp, #64]
    5724:	ldr	x0, [sp, #64]
    5728:	ldrb	w0, [x0]
    572c:	mov	w1, w0
    5730:	ldr	w0, [sp, #60]
    5734:	cmp	w0, w1
    5738:	b.ne	5848 <deflate_rle+0x26c>  // b.any
    573c:	ldr	x0, [sp, #64]
    5740:	add	x0, x0, #0x1
    5744:	str	x0, [sp, #64]
    5748:	ldr	x0, [sp, #64]
    574c:	ldrb	w0, [x0]
    5750:	mov	w1, w0
    5754:	ldr	w0, [sp, #60]
    5758:	cmp	w0, w1
    575c:	b.ne	5848 <deflate_rle+0x26c>  // b.any
    5760:	ldr	x0, [sp, #64]
    5764:	add	x0, x0, #0x1
    5768:	str	x0, [sp, #64]
    576c:	ldr	x0, [sp, #64]
    5770:	ldrb	w0, [x0]
    5774:	mov	w1, w0
    5778:	ldr	w0, [sp, #60]
    577c:	cmp	w0, w1
    5780:	b.ne	5848 <deflate_rle+0x26c>  // b.any
    5784:	ldr	x0, [sp, #64]
    5788:	add	x0, x0, #0x1
    578c:	str	x0, [sp, #64]
    5790:	ldr	x0, [sp, #64]
    5794:	ldrb	w0, [x0]
    5798:	mov	w1, w0
    579c:	ldr	w0, [sp, #60]
    57a0:	cmp	w0, w1
    57a4:	b.ne	5848 <deflate_rle+0x26c>  // b.any
    57a8:	ldr	x0, [sp, #64]
    57ac:	add	x0, x0, #0x1
    57b0:	str	x0, [sp, #64]
    57b4:	ldr	x0, [sp, #64]
    57b8:	ldrb	w0, [x0]
    57bc:	mov	w1, w0
    57c0:	ldr	w0, [sp, #60]
    57c4:	cmp	w0, w1
    57c8:	b.ne	5848 <deflate_rle+0x26c>  // b.any
    57cc:	ldr	x0, [sp, #64]
    57d0:	add	x0, x0, #0x1
    57d4:	str	x0, [sp, #64]
    57d8:	ldr	x0, [sp, #64]
    57dc:	ldrb	w0, [x0]
    57e0:	mov	w1, w0
    57e4:	ldr	w0, [sp, #60]
    57e8:	cmp	w0, w1
    57ec:	b.ne	5848 <deflate_rle+0x26c>  // b.any
    57f0:	ldr	x0, [sp, #64]
    57f4:	add	x0, x0, #0x1
    57f8:	str	x0, [sp, #64]
    57fc:	ldr	x0, [sp, #64]
    5800:	ldrb	w0, [x0]
    5804:	mov	w1, w0
    5808:	ldr	w0, [sp, #60]
    580c:	cmp	w0, w1
    5810:	b.ne	5848 <deflate_rle+0x26c>  // b.any
    5814:	ldr	x0, [sp, #64]
    5818:	add	x0, x0, #0x1
    581c:	str	x0, [sp, #64]
    5820:	ldr	x0, [sp, #64]
    5824:	ldrb	w0, [x0]
    5828:	mov	w1, w0
    582c:	ldr	w0, [sp, #60]
    5830:	cmp	w0, w1
    5834:	b.ne	5848 <deflate_rle+0x26c>  // b.any
    5838:	ldr	x1, [sp, #64]
    583c:	ldr	x0, [sp, #48]
    5840:	cmp	x1, x0
    5844:	b.cc	5718 <deflate_rle+0x13c>  // b.lo, b.ul, b.last
    5848:	ldr	x1, [sp, #48]
    584c:	ldr	x0, [sp, #64]
    5850:	sub	x0, x1, x0
    5854:	mov	w1, w0
    5858:	mov	w0, #0x102                 	// #258
    585c:	sub	w1, w0, w1
    5860:	ldr	x0, [sp, #24]
    5864:	str	w1, [x0, #160]
    5868:	ldr	x0, [sp, #24]
    586c:	ldr	w1, [x0, #160]
    5870:	ldr	x0, [sp, #24]
    5874:	ldr	w0, [x0, #180]
    5878:	cmp	w1, w0
    587c:	b.ls	5890 <deflate_rle+0x2b4>  // b.plast
    5880:	ldr	x0, [sp, #24]
    5884:	ldr	w1, [x0, #180]
    5888:	ldr	x0, [sp, #24]
    588c:	str	w1, [x0, #160]
    5890:	ldr	x0, [sp, #24]
    5894:	ldr	w0, [x0, #160]
    5898:	cmp	w0, #0x2
    589c:	b.ls	5a5c <deflate_rle+0x480>  // b.plast
    58a0:	ldr	x0, [sp, #24]
    58a4:	ldr	w0, [x0, #160]
    58a8:	and	w0, w0, #0xff
    58ac:	sub	w0, w0, #0x3
    58b0:	strb	w0, [sp, #46]
    58b4:	mov	w0, #0x1                   	// #1
    58b8:	strh	w0, [sp, #44]
    58bc:	ldr	x0, [sp, #24]
    58c0:	ldr	x1, [x0, #5904]
    58c4:	ldr	x0, [sp, #24]
    58c8:	ldr	w0, [x0, #5900]
    58cc:	mov	w0, w0
    58d0:	lsl	x0, x0, #1
    58d4:	add	x0, x1, x0
    58d8:	ldrh	w1, [sp, #44]
    58dc:	strh	w1, [x0]
    58e0:	ldr	x0, [sp, #24]
    58e4:	ldr	x1, [x0, #5888]
    58e8:	ldr	x0, [sp, #24]
    58ec:	ldr	w0, [x0, #5900]
    58f0:	add	w3, w0, #0x1
    58f4:	ldr	x2, [sp, #24]
    58f8:	str	w3, [x2, #5900]
    58fc:	mov	w0, w0
    5900:	add	x0, x1, x0
    5904:	ldrb	w1, [sp, #46]
    5908:	strb	w1, [x0]
    590c:	ldrh	w0, [sp, #44]
    5910:	sub	w0, w0, #0x1
    5914:	strh	w0, [sp, #44]
    5918:	ldrb	w2, [sp, #46]
    591c:	adrp	x0, 0 <_length_code>
    5920:	add	x1, x0, #0x0
    5924:	sxtw	x0, w2
    5928:	ldrb	w0, [x1, x0]
    592c:	add	w2, w0, #0x101
    5930:	ldr	x1, [sp, #24]
    5934:	sxtw	x0, w2
    5938:	add	x0, x0, #0x34
    593c:	lsl	x0, x0, #2
    5940:	add	x0, x1, x0
    5944:	ldrh	w0, [x0, #4]
    5948:	add	w0, w0, #0x1
    594c:	and	w3, w0, #0xffff
    5950:	ldr	x1, [sp, #24]
    5954:	sxtw	x0, w2
    5958:	add	x0, x0, #0x34
    595c:	lsl	x0, x0, #2
    5960:	add	x0, x1, x0
    5964:	mov	w1, w3
    5968:	strh	w1, [x0, #4]
    596c:	ldrh	w0, [sp, #44]
    5970:	cmp	w0, #0xff
    5974:	b.hi	5994 <deflate_rle+0x3b8>  // b.pmore
    5978:	ldrh	w2, [sp, #44]
    597c:	adrp	x0, 0 <_dist_code>
    5980:	add	x1, x0, #0x0
    5984:	sxtw	x0, w2
    5988:	ldrb	w0, [x1, x0]
    598c:	mov	w2, w0
    5990:	b	59b8 <deflate_rle+0x3dc>
    5994:	ldrh	w0, [sp, #44]
    5998:	lsr	w0, w0, #7
    599c:	and	w0, w0, #0xffff
    59a0:	add	w2, w0, #0x100
    59a4:	adrp	x0, 0 <_dist_code>
    59a8:	add	x1, x0, #0x0
    59ac:	sxtw	x0, w2
    59b0:	ldrb	w0, [x1, x0]
    59b4:	mov	w2, w0
    59b8:	ldr	x1, [sp, #24]
    59bc:	sxtw	x0, w2
    59c0:	add	x0, x0, #0x270
    59c4:	lsl	x0, x0, #2
    59c8:	add	x0, x1, x0
    59cc:	ldrh	w0, [x0, #8]
    59d0:	add	w0, w0, #0x1
    59d4:	and	w3, w0, #0xffff
    59d8:	ldr	x1, [sp, #24]
    59dc:	sxtw	x0, w2
    59e0:	add	x0, x0, #0x270
    59e4:	lsl	x0, x0, #2
    59e8:	add	x0, x1, x0
    59ec:	mov	w1, w3
    59f0:	strh	w1, [x0, #8]
    59f4:	ldr	x0, [sp, #24]
    59f8:	ldr	w1, [x0, #5900]
    59fc:	ldr	x0, [sp, #24]
    5a00:	ldr	w0, [x0, #5896]
    5a04:	sub	w0, w0, #0x1
    5a08:	cmp	w1, w0
    5a0c:	cset	w0, eq  // eq = none
    5a10:	and	w0, w0, #0xff
    5a14:	str	w0, [sp, #76]
    5a18:	ldr	x0, [sp, #24]
    5a1c:	ldr	w1, [x0, #180]
    5a20:	ldr	x0, [sp, #24]
    5a24:	ldr	w0, [x0, #160]
    5a28:	sub	w1, w1, w0
    5a2c:	ldr	x0, [sp, #24]
    5a30:	str	w1, [x0, #180]
    5a34:	ldr	x0, [sp, #24]
    5a38:	ldr	w1, [x0, #172]
    5a3c:	ldr	x0, [sp, #24]
    5a40:	ldr	w0, [x0, #160]
    5a44:	add	w1, w1, w0
    5a48:	ldr	x0, [sp, #24]
    5a4c:	str	w1, [x0, #172]
    5a50:	ldr	x0, [sp, #24]
    5a54:	str	wzr, [x0, #160]
    5a58:	b	5b54 <deflate_rle+0x578>
    5a5c:	ldr	x0, [sp, #24]
    5a60:	ldr	x1, [x0, #96]
    5a64:	ldr	x0, [sp, #24]
    5a68:	ldr	w0, [x0, #172]
    5a6c:	mov	w0, w0
    5a70:	add	x0, x1, x0
    5a74:	ldrb	w0, [x0]
    5a78:	strb	w0, [sp, #47]
    5a7c:	ldr	x0, [sp, #24]
    5a80:	ldr	x1, [x0, #5904]
    5a84:	ldr	x0, [sp, #24]
    5a88:	ldr	w0, [x0, #5900]
    5a8c:	mov	w0, w0
    5a90:	lsl	x0, x0, #1
    5a94:	add	x0, x1, x0
    5a98:	strh	wzr, [x0]
    5a9c:	ldr	x0, [sp, #24]
    5aa0:	ldr	x1, [x0, #5888]
    5aa4:	ldr	x0, [sp, #24]
    5aa8:	ldr	w0, [x0, #5900]
    5aac:	add	w3, w0, #0x1
    5ab0:	ldr	x2, [sp, #24]
    5ab4:	str	w3, [x2, #5900]
    5ab8:	mov	w0, w0
    5abc:	add	x0, x1, x0
    5ac0:	ldrb	w1, [sp, #47]
    5ac4:	strb	w1, [x0]
    5ac8:	ldrb	w2, [sp, #47]
    5acc:	ldr	x1, [sp, #24]
    5ad0:	sxtw	x0, w2
    5ad4:	add	x0, x0, #0x34
    5ad8:	lsl	x0, x0, #2
    5adc:	add	x0, x1, x0
    5ae0:	ldrh	w0, [x0, #4]
    5ae4:	add	w0, w0, #0x1
    5ae8:	and	w3, w0, #0xffff
    5aec:	ldr	x1, [sp, #24]
    5af0:	sxtw	x0, w2
    5af4:	add	x0, x0, #0x34
    5af8:	lsl	x0, x0, #2
    5afc:	add	x0, x1, x0
    5b00:	mov	w1, w3
    5b04:	strh	w1, [x0, #4]
    5b08:	ldr	x0, [sp, #24]
    5b0c:	ldr	w1, [x0, #5900]
    5b10:	ldr	x0, [sp, #24]
    5b14:	ldr	w0, [x0, #5896]
    5b18:	sub	w0, w0, #0x1
    5b1c:	cmp	w1, w0
    5b20:	cset	w0, eq  // eq = none
    5b24:	and	w0, w0, #0xff
    5b28:	str	w0, [sp, #76]
    5b2c:	ldr	x0, [sp, #24]
    5b30:	ldr	w0, [x0, #180]
    5b34:	sub	w1, w0, #0x1
    5b38:	ldr	x0, [sp, #24]
    5b3c:	str	w1, [x0, #180]
    5b40:	ldr	x0, [sp, #24]
    5b44:	ldr	w0, [x0, #172]
    5b48:	add	w1, w0, #0x1
    5b4c:	ldr	x0, [sp, #24]
    5b50:	str	w1, [x0, #172]
    5b54:	ldr	w0, [sp, #76]
    5b58:	cmp	w0, #0x0
    5b5c:	b.eq	55ec <deflate_rle+0x10>  // b.none
    5b60:	ldr	x0, [sp, #24]
    5b64:	ldr	x0, [x0, #152]
    5b68:	cmp	x0, #0x0
    5b6c:	b.lt	5b8c <deflate_rle+0x5b0>  // b.tstop
    5b70:	ldr	x0, [sp, #24]
    5b74:	ldr	x1, [x0, #96]
    5b78:	ldr	x0, [sp, #24]
    5b7c:	ldr	x0, [x0, #152]
    5b80:	mov	w0, w0
    5b84:	add	x0, x1, x0
    5b88:	b	5b90 <deflate_rle+0x5b4>
    5b8c:	mov	x0, #0x0                   	// #0
    5b90:	ldr	x1, [sp, #24]
    5b94:	ldr	w1, [x1, #172]
    5b98:	mov	w2, w1
    5b9c:	ldr	x1, [sp, #24]
    5ba0:	ldr	x1, [x1, #152]
    5ba4:	sub	x1, x2, x1
    5ba8:	mov	w3, #0x0                   	// #0
    5bac:	mov	x2, x1
    5bb0:	mov	x1, x0
    5bb4:	ldr	x0, [sp, #24]
    5bb8:	bl	0 <_tr_flush_block>
    5bbc:	ldr	x0, [sp, #24]
    5bc0:	ldr	w0, [x0, #172]
    5bc4:	mov	w1, w0
    5bc8:	ldr	x0, [sp, #24]
    5bcc:	str	x1, [x0, #152]
    5bd0:	ldr	x0, [sp, #24]
    5bd4:	ldr	x0, [x0]
    5bd8:	bl	14a8 <flush_pending>
    5bdc:	ldr	x0, [sp, #24]
    5be0:	ldr	x0, [x0]
    5be4:	ldr	w0, [x0, #32]
    5be8:	cmp	w0, #0x0
    5bec:	b.ne	55ec <deflate_rle+0x10>  // b.any
    5bf0:	mov	w0, #0x0                   	// #0
    5bf4:	b	5d5c <deflate_rle+0x780>
    5bf8:	nop
    5bfc:	ldr	x0, [sp, #24]
    5c00:	str	wzr, [x0, #5932]
    5c04:	ldr	w0, [sp, #20]
    5c08:	cmp	w0, #0x4
    5c0c:	b.ne	5cb0 <deflate_rle+0x6d4>  // b.any
    5c10:	ldr	x0, [sp, #24]
    5c14:	ldr	x0, [x0, #152]
    5c18:	cmp	x0, #0x0
    5c1c:	b.lt	5c3c <deflate_rle+0x660>  // b.tstop
    5c20:	ldr	x0, [sp, #24]
    5c24:	ldr	x1, [x0, #96]
    5c28:	ldr	x0, [sp, #24]
    5c2c:	ldr	x0, [x0, #152]
    5c30:	mov	w0, w0
    5c34:	add	x0, x1, x0
    5c38:	b	5c40 <deflate_rle+0x664>
    5c3c:	mov	x0, #0x0                   	// #0
    5c40:	ldr	x1, [sp, #24]
    5c44:	ldr	w1, [x1, #172]
    5c48:	mov	w2, w1
    5c4c:	ldr	x1, [sp, #24]
    5c50:	ldr	x1, [x1, #152]
    5c54:	sub	x1, x2, x1
    5c58:	mov	w3, #0x1                   	// #1
    5c5c:	mov	x2, x1
    5c60:	mov	x1, x0
    5c64:	ldr	x0, [sp, #24]
    5c68:	bl	0 <_tr_flush_block>
    5c6c:	ldr	x0, [sp, #24]
    5c70:	ldr	w0, [x0, #172]
    5c74:	mov	w1, w0
    5c78:	ldr	x0, [sp, #24]
    5c7c:	str	x1, [x0, #152]
    5c80:	ldr	x0, [sp, #24]
    5c84:	ldr	x0, [x0]
    5c88:	bl	14a8 <flush_pending>
    5c8c:	ldr	x0, [sp, #24]
    5c90:	ldr	x0, [x0]
    5c94:	ldr	w0, [x0, #32]
    5c98:	cmp	w0, #0x0
    5c9c:	b.ne	5ca8 <deflate_rle+0x6cc>  // b.any
    5ca0:	mov	w0, #0x2                   	// #2
    5ca4:	b	5d5c <deflate_rle+0x780>
    5ca8:	mov	w0, #0x3                   	// #3
    5cac:	b	5d5c <deflate_rle+0x780>
    5cb0:	ldr	x0, [sp, #24]
    5cb4:	ldr	w0, [x0, #5900]
    5cb8:	cmp	w0, #0x0
    5cbc:	b.eq	5d58 <deflate_rle+0x77c>  // b.none
    5cc0:	ldr	x0, [sp, #24]
    5cc4:	ldr	x0, [x0, #152]
    5cc8:	cmp	x0, #0x0
    5ccc:	b.lt	5cec <deflate_rle+0x710>  // b.tstop
    5cd0:	ldr	x0, [sp, #24]
    5cd4:	ldr	x1, [x0, #96]
    5cd8:	ldr	x0, [sp, #24]
    5cdc:	ldr	x0, [x0, #152]
    5ce0:	mov	w0, w0
    5ce4:	add	x0, x1, x0
    5ce8:	b	5cf0 <deflate_rle+0x714>
    5cec:	mov	x0, #0x0                   	// #0
    5cf0:	ldr	x1, [sp, #24]
    5cf4:	ldr	w1, [x1, #172]
    5cf8:	mov	w2, w1
    5cfc:	ldr	x1, [sp, #24]
    5d00:	ldr	x1, [x1, #152]
    5d04:	sub	x1, x2, x1
    5d08:	mov	w3, #0x0                   	// #0
    5d0c:	mov	x2, x1
    5d10:	mov	x1, x0
    5d14:	ldr	x0, [sp, #24]
    5d18:	bl	0 <_tr_flush_block>
    5d1c:	ldr	x0, [sp, #24]
    5d20:	ldr	w0, [x0, #172]
    5d24:	mov	w1, w0
    5d28:	ldr	x0, [sp, #24]
    5d2c:	str	x1, [x0, #152]
    5d30:	ldr	x0, [sp, #24]
    5d34:	ldr	x0, [x0]
    5d38:	bl	14a8 <flush_pending>
    5d3c:	ldr	x0, [sp, #24]
    5d40:	ldr	x0, [x0]
    5d44:	ldr	w0, [x0, #32]
    5d48:	cmp	w0, #0x0
    5d4c:	b.ne	5d58 <deflate_rle+0x77c>  // b.any
    5d50:	mov	w0, #0x0                   	// #0
    5d54:	b	5d5c <deflate_rle+0x780>
    5d58:	mov	w0, #0x1                   	// #1
    5d5c:	ldp	x29, x30, [sp], #80
    5d60:	ret

0000000000005d64 <deflate_huff>:
    5d64:	stp	x29, x30, [sp, #-48]!
    5d68:	mov	x29, sp
    5d6c:	str	x0, [sp, #24]
    5d70:	str	w1, [sp, #20]
    5d74:	ldr	x0, [sp, #24]
    5d78:	ldr	w0, [x0, #180]
    5d7c:	cmp	w0, #0x0
    5d80:	b.ne	5db0 <deflate_huff+0x4c>  // b.any
    5d84:	ldr	x0, [sp, #24]
    5d88:	bl	34ec <fill_window>
    5d8c:	ldr	x0, [sp, #24]
    5d90:	ldr	w0, [x0, #180]
    5d94:	cmp	w0, #0x0
    5d98:	b.ne	5db0 <deflate_huff+0x4c>  // b.any
    5d9c:	ldr	w0, [sp, #20]
    5da0:	cmp	w0, #0x0
    5da4:	b.ne	5f54 <deflate_huff+0x1f0>  // b.any
    5da8:	mov	w0, #0x0                   	// #0
    5dac:	b	60b8 <deflate_huff+0x354>
    5db0:	ldr	x0, [sp, #24]
    5db4:	str	wzr, [x0, #160]
    5db8:	ldr	x0, [sp, #24]
    5dbc:	ldr	x1, [x0, #96]
    5dc0:	ldr	x0, [sp, #24]
    5dc4:	ldr	w0, [x0, #172]
    5dc8:	mov	w0, w0
    5dcc:	add	x0, x1, x0
    5dd0:	ldrb	w0, [x0]
    5dd4:	strb	w0, [sp, #47]
    5dd8:	ldr	x0, [sp, #24]
    5ddc:	ldr	x1, [x0, #5904]
    5de0:	ldr	x0, [sp, #24]
    5de4:	ldr	w0, [x0, #5900]
    5de8:	mov	w0, w0
    5dec:	lsl	x0, x0, #1
    5df0:	add	x0, x1, x0
    5df4:	strh	wzr, [x0]
    5df8:	ldr	x0, [sp, #24]
    5dfc:	ldr	x1, [x0, #5888]
    5e00:	ldr	x0, [sp, #24]
    5e04:	ldr	w0, [x0, #5900]
    5e08:	add	w3, w0, #0x1
    5e0c:	ldr	x2, [sp, #24]
    5e10:	str	w3, [x2, #5900]
    5e14:	mov	w0, w0
    5e18:	add	x0, x1, x0
    5e1c:	ldrb	w1, [sp, #47]
    5e20:	strb	w1, [x0]
    5e24:	ldrb	w2, [sp, #47]
    5e28:	ldr	x1, [sp, #24]
    5e2c:	sxtw	x0, w2
    5e30:	add	x0, x0, #0x34
    5e34:	lsl	x0, x0, #2
    5e38:	add	x0, x1, x0
    5e3c:	ldrh	w0, [x0, #4]
    5e40:	add	w0, w0, #0x1
    5e44:	and	w3, w0, #0xffff
    5e48:	ldr	x1, [sp, #24]
    5e4c:	sxtw	x0, w2
    5e50:	add	x0, x0, #0x34
    5e54:	lsl	x0, x0, #2
    5e58:	add	x0, x1, x0
    5e5c:	mov	w1, w3
    5e60:	strh	w1, [x0, #4]
    5e64:	ldr	x0, [sp, #24]
    5e68:	ldr	w1, [x0, #5900]
    5e6c:	ldr	x0, [sp, #24]
    5e70:	ldr	w0, [x0, #5896]
    5e74:	sub	w0, w0, #0x1
    5e78:	cmp	w1, w0
    5e7c:	cset	w0, eq  // eq = none
    5e80:	and	w0, w0, #0xff
    5e84:	str	w0, [sp, #40]
    5e88:	ldr	x0, [sp, #24]
    5e8c:	ldr	w0, [x0, #180]
    5e90:	sub	w1, w0, #0x1
    5e94:	ldr	x0, [sp, #24]
    5e98:	str	w1, [x0, #180]
    5e9c:	ldr	x0, [sp, #24]
    5ea0:	ldr	w0, [x0, #172]
    5ea4:	add	w1, w0, #0x1
    5ea8:	ldr	x0, [sp, #24]
    5eac:	str	w1, [x0, #172]
    5eb0:	ldr	w0, [sp, #40]
    5eb4:	cmp	w0, #0x0
    5eb8:	b.eq	5d74 <deflate_huff+0x10>  // b.none
    5ebc:	ldr	x0, [sp, #24]
    5ec0:	ldr	x0, [x0, #152]
    5ec4:	cmp	x0, #0x0
    5ec8:	b.lt	5ee8 <deflate_huff+0x184>  // b.tstop
    5ecc:	ldr	x0, [sp, #24]
    5ed0:	ldr	x1, [x0, #96]
    5ed4:	ldr	x0, [sp, #24]
    5ed8:	ldr	x0, [x0, #152]
    5edc:	mov	w0, w0
    5ee0:	add	x0, x1, x0
    5ee4:	b	5eec <deflate_huff+0x188>
    5ee8:	mov	x0, #0x0                   	// #0
    5eec:	ldr	x1, [sp, #24]
    5ef0:	ldr	w1, [x1, #172]
    5ef4:	mov	w2, w1
    5ef8:	ldr	x1, [sp, #24]
    5efc:	ldr	x1, [x1, #152]
    5f00:	sub	x1, x2, x1
    5f04:	mov	w3, #0x0                   	// #0
    5f08:	mov	x2, x1
    5f0c:	mov	x1, x0
    5f10:	ldr	x0, [sp, #24]
    5f14:	bl	0 <_tr_flush_block>
    5f18:	ldr	x0, [sp, #24]
    5f1c:	ldr	w0, [x0, #172]
    5f20:	mov	w1, w0
    5f24:	ldr	x0, [sp, #24]
    5f28:	str	x1, [x0, #152]
    5f2c:	ldr	x0, [sp, #24]
    5f30:	ldr	x0, [x0]
    5f34:	bl	14a8 <flush_pending>
    5f38:	ldr	x0, [sp, #24]
    5f3c:	ldr	x0, [x0]
    5f40:	ldr	w0, [x0, #32]
    5f44:	cmp	w0, #0x0
    5f48:	b.ne	5d74 <deflate_huff+0x10>  // b.any
    5f4c:	mov	w0, #0x0                   	// #0
    5f50:	b	60b8 <deflate_huff+0x354>
    5f54:	nop
    5f58:	ldr	x0, [sp, #24]
    5f5c:	str	wzr, [x0, #5932]
    5f60:	ldr	w0, [sp, #20]
    5f64:	cmp	w0, #0x4
    5f68:	b.ne	600c <deflate_huff+0x2a8>  // b.any
    5f6c:	ldr	x0, [sp, #24]
    5f70:	ldr	x0, [x0, #152]
    5f74:	cmp	x0, #0x0
    5f78:	b.lt	5f98 <deflate_huff+0x234>  // b.tstop
    5f7c:	ldr	x0, [sp, #24]
    5f80:	ldr	x1, [x0, #96]
    5f84:	ldr	x0, [sp, #24]
    5f88:	ldr	x0, [x0, #152]
    5f8c:	mov	w0, w0
    5f90:	add	x0, x1, x0
    5f94:	b	5f9c <deflate_huff+0x238>
    5f98:	mov	x0, #0x0                   	// #0
    5f9c:	ldr	x1, [sp, #24]
    5fa0:	ldr	w1, [x1, #172]
    5fa4:	mov	w2, w1
    5fa8:	ldr	x1, [sp, #24]
    5fac:	ldr	x1, [x1, #152]
    5fb0:	sub	x1, x2, x1
    5fb4:	mov	w3, #0x1                   	// #1
    5fb8:	mov	x2, x1
    5fbc:	mov	x1, x0
    5fc0:	ldr	x0, [sp, #24]
    5fc4:	bl	0 <_tr_flush_block>
    5fc8:	ldr	x0, [sp, #24]
    5fcc:	ldr	w0, [x0, #172]
    5fd0:	mov	w1, w0
    5fd4:	ldr	x0, [sp, #24]
    5fd8:	str	x1, [x0, #152]
    5fdc:	ldr	x0, [sp, #24]
    5fe0:	ldr	x0, [x0]
    5fe4:	bl	14a8 <flush_pending>
    5fe8:	ldr	x0, [sp, #24]
    5fec:	ldr	x0, [x0]
    5ff0:	ldr	w0, [x0, #32]
    5ff4:	cmp	w0, #0x0
    5ff8:	b.ne	6004 <deflate_huff+0x2a0>  // b.any
    5ffc:	mov	w0, #0x2                   	// #2
    6000:	b	60b8 <deflate_huff+0x354>
    6004:	mov	w0, #0x3                   	// #3
    6008:	b	60b8 <deflate_huff+0x354>
    600c:	ldr	x0, [sp, #24]
    6010:	ldr	w0, [x0, #5900]
    6014:	cmp	w0, #0x0
    6018:	b.eq	60b4 <deflate_huff+0x350>  // b.none
    601c:	ldr	x0, [sp, #24]
    6020:	ldr	x0, [x0, #152]
    6024:	cmp	x0, #0x0
    6028:	b.lt	6048 <deflate_huff+0x2e4>  // b.tstop
    602c:	ldr	x0, [sp, #24]
    6030:	ldr	x1, [x0, #96]
    6034:	ldr	x0, [sp, #24]
    6038:	ldr	x0, [x0, #152]
    603c:	mov	w0, w0
    6040:	add	x0, x1, x0
    6044:	b	604c <deflate_huff+0x2e8>
    6048:	mov	x0, #0x0                   	// #0
    604c:	ldr	x1, [sp, #24]
    6050:	ldr	w1, [x1, #172]
    6054:	mov	w2, w1
    6058:	ldr	x1, [sp, #24]
    605c:	ldr	x1, [x1, #152]
    6060:	sub	x1, x2, x1
    6064:	mov	w3, #0x0                   	// #0
    6068:	mov	x2, x1
    606c:	mov	x1, x0
    6070:	ldr	x0, [sp, #24]
    6074:	bl	0 <_tr_flush_block>
    6078:	ldr	x0, [sp, #24]
    607c:	ldr	w0, [x0, #172]
    6080:	mov	w1, w0
    6084:	ldr	x0, [sp, #24]
    6088:	str	x1, [x0, #152]
    608c:	ldr	x0, [sp, #24]
    6090:	ldr	x0, [x0]
    6094:	bl	14a8 <flush_pending>
    6098:	ldr	x0, [sp, #24]
    609c:	ldr	x0, [x0]
    60a0:	ldr	w0, [x0, #32]
    60a4:	cmp	w0, #0x0
    60a8:	b.ne	60b4 <deflate_huff+0x350>  // b.any
    60ac:	mov	w0, #0x0                   	// #0
    60b0:	b	60b8 <deflate_huff+0x354>
    60b4:	mov	w0, #0x1                   	// #1
    60b8:	ldp	x29, x30, [sp], #48
    60bc:	ret

infback.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflateBackInit_>:
       0:	stp	x29, x30, [sp, #-64]!
       4:	mov	x29, sp
       8:	str	x0, [sp, #40]
       c:	str	w1, [sp, #36]
      10:	str	x2, [sp, #24]
      14:	str	x3, [sp, #16]
      18:	str	w4, [sp, #32]
      1c:	ldr	x0, [sp, #16]
      20:	cmp	x0, #0x0
      24:	b.eq	48 <inflateBackInit_+0x48>  // b.none
      28:	ldr	x0, [sp, #16]
      2c:	ldrb	w1, [x0]
      30:	mov	w0, #0x31                  	// #49
      34:	cmp	w1, w0
      38:	b.ne	48 <inflateBackInit_+0x48>  // b.any
      3c:	ldr	w0, [sp, #32]
      40:	cmp	w0, #0x70
      44:	b.eq	50 <inflateBackInit_+0x50>  // b.none
      48:	mov	w0, #0xfffffffa            	// #-6
      4c:	b	164 <inflateBackInit_+0x164>
      50:	ldr	x0, [sp, #40]
      54:	cmp	x0, #0x0
      58:	b.eq	80 <inflateBackInit_+0x80>  // b.none
      5c:	ldr	x0, [sp, #24]
      60:	cmp	x0, #0x0
      64:	b.eq	80 <inflateBackInit_+0x80>  // b.none
      68:	ldr	w0, [sp, #36]
      6c:	cmp	w0, #0x7
      70:	b.le	80 <inflateBackInit_+0x80>
      74:	ldr	w0, [sp, #36]
      78:	cmp	w0, #0xf
      7c:	b.le	88 <inflateBackInit_+0x88>
      80:	mov	w0, #0xfffffffe            	// #-2
      84:	b	164 <inflateBackInit_+0x164>
      88:	ldr	x0, [sp, #40]
      8c:	str	xzr, [x0, #48]
      90:	ldr	x0, [sp, #40]
      94:	ldr	x0, [x0, #64]
      98:	cmp	x0, #0x0
      9c:	b.ne	b8 <inflateBackInit_+0xb8>  // b.any
      a0:	ldr	x0, [sp, #40]
      a4:	adrp	x1, 0 <zcalloc>
      a8:	add	x1, x1, #0x0
      ac:	str	x1, [x0, #64]
      b0:	ldr	x0, [sp, #40]
      b4:	str	xzr, [x0, #80]
      b8:	ldr	x0, [sp, #40]
      bc:	ldr	x0, [x0, #72]
      c0:	cmp	x0, #0x0
      c4:	b.ne	d8 <inflateBackInit_+0xd8>  // b.any
      c8:	ldr	x0, [sp, #40]
      cc:	adrp	x1, 0 <zcfree>
      d0:	add	x1, x1, #0x0
      d4:	str	x1, [x0, #72]
      d8:	ldr	x0, [sp, #40]
      dc:	ldr	x3, [x0, #64]
      e0:	ldr	x0, [sp, #40]
      e4:	ldr	x0, [x0, #80]
      e8:	mov	w2, #0x1bf8                	// #7160
      ec:	mov	w1, #0x1                   	// #1
      f0:	blr	x3
      f4:	str	x0, [sp, #56]
      f8:	ldr	x0, [sp, #56]
      fc:	cmp	x0, #0x0
     100:	b.ne	10c <inflateBackInit_+0x10c>  // b.any
     104:	mov	w0, #0xfffffffc            	// #-4
     108:	b	164 <inflateBackInit_+0x164>
     10c:	ldr	x0, [sp, #40]
     110:	ldr	x1, [sp, #56]
     114:	str	x1, [x0, #56]
     118:	ldr	x0, [sp, #56]
     11c:	mov	w1, #0x8000                	// #32768
     120:	str	w1, [x0, #28]
     124:	ldr	w1, [sp, #36]
     128:	ldr	x0, [sp, #56]
     12c:	str	w1, [x0, #56]
     130:	ldr	w0, [sp, #36]
     134:	mov	w1, #0x1                   	// #1
     138:	lsl	w1, w1, w0
     13c:	ldr	x0, [sp, #56]
     140:	str	w1, [x0, #60]
     144:	ldr	x0, [sp, #56]
     148:	ldr	x1, [sp, #24]
     14c:	str	x1, [x0, #72]
     150:	ldr	x0, [sp, #56]
     154:	str	wzr, [x0, #68]
     158:	ldr	x0, [sp, #56]
     15c:	str	wzr, [x0, #64]
     160:	mov	w0, #0x0                   	// #0
     164:	ldp	x29, x30, [sp], #64
     168:	ret

000000000000016c <fixedtables>:
     16c:	sub	sp, sp, #0x10
     170:	str	x0, [sp, #8]
     174:	ldr	x0, [sp, #8]
     178:	adrp	x1, 0 <inflateBackInit_>
     17c:	add	x1, x1, #0x0
     180:	str	x1, [x0, #104]
     184:	ldr	x0, [sp, #8]
     188:	mov	w1, #0x9                   	// #9
     18c:	str	w1, [x0, #120]
     190:	ldr	x0, [sp, #8]
     194:	adrp	x1, 0 <inflateBackInit_>
     198:	add	x1, x1, #0x0
     19c:	str	x1, [x0, #112]
     1a0:	ldr	x0, [sp, #8]
     1a4:	mov	w1, #0x5                   	// #5
     1a8:	str	w1, [x0, #124]
     1ac:	nop
     1b0:	add	sp, sp, #0x10
     1b4:	ret

00000000000001b8 <inflateBack>:
     1b8:	stp	x29, x30, [sp, #-144]!
     1bc:	mov	x29, sp
     1c0:	str	x0, [sp, #56]
     1c4:	str	x1, [sp, #48]
     1c8:	str	x2, [sp, #40]
     1cc:	str	x3, [sp, #32]
     1d0:	str	x4, [sp, #24]
     1d4:	ldr	x0, [sp, #56]
     1d8:	cmp	x0, #0x0
     1dc:	b.eq	1f0 <inflateBack+0x38>  // b.none
     1e0:	ldr	x0, [sp, #56]
     1e4:	ldr	x0, [x0, #56]
     1e8:	cmp	x0, #0x0
     1ec:	b.ne	1f8 <inflateBack+0x40>  // b.any
     1f0:	mov	w0, #0xfffffffe            	// #-2
     1f4:	b	1c4c <inflateBack+0x1a94>
     1f8:	ldr	x0, [sp, #56]
     1fc:	ldr	x0, [x0, #56]
     200:	str	x0, [sp, #88]
     204:	ldr	x0, [sp, #56]
     208:	str	xzr, [x0, #48]
     20c:	ldr	x0, [sp, #88]
     210:	mov	w1, #0x3f3f                	// #16191
     214:	str	w1, [x0, #8]
     218:	ldr	x0, [sp, #88]
     21c:	str	wzr, [x0, #12]
     220:	ldr	x0, [sp, #88]
     224:	str	wzr, [x0, #64]
     228:	ldr	x0, [sp, #56]
     22c:	ldr	x0, [x0]
     230:	str	x0, [sp, #80]
     234:	ldr	x0, [sp, #80]
     238:	cmp	x0, #0x0
     23c:	b.eq	24c <inflateBack+0x94>  // b.none
     240:	ldr	x0, [sp, #56]
     244:	ldr	w0, [x0, #8]
     248:	b	250 <inflateBack+0x98>
     24c:	mov	w0, #0x0                   	// #0
     250:	str	w0, [sp, #132]
     254:	str	xzr, [sp, #120]
     258:	str	wzr, [sp, #116]
     25c:	ldr	x0, [sp, #88]
     260:	ldr	x0, [x0, #72]
     264:	str	x0, [sp, #136]
     268:	ldr	x0, [sp, #88]
     26c:	ldr	w0, [x0, #60]
     270:	str	w0, [sp, #128]
     274:	ldr	x0, [sp, #88]
     278:	ldr	w0, [x0, #8]
     27c:	mov	w1, #0x3f51                	// #16209
     280:	cmp	w0, w1
     284:	b.eq	1c0c <inflateBack+0x1a54>  // b.none
     288:	mov	w1, #0x3f51                	// #16209
     28c:	cmp	w0, w1
     290:	b.hi	1c18 <inflateBack+0x1a60>  // b.pmore
     294:	mov	w1, #0x3f50                	// #16208
     298:	cmp	w0, w1
     29c:	b.eq	1bb0 <inflateBack+0x19f8>  // b.none
     2a0:	mov	w1, #0x3f50                	// #16208
     2a4:	cmp	w0, w1
     2a8:	b.hi	1c18 <inflateBack+0x1a60>  // b.pmore
     2ac:	mov	w1, #0x3f48                	// #16200
     2b0:	cmp	w0, w1
     2b4:	b.eq	1114 <inflateBack+0xf5c>  // b.none
     2b8:	mov	w1, #0x3f48                	// #16200
     2bc:	cmp	w0, w1
     2c0:	b.hi	1c18 <inflateBack+0x1a60>  // b.pmore
     2c4:	mov	w1, #0x3f44                	// #16196
     2c8:	cmp	w0, w1
     2cc:	b.eq	784 <inflateBack+0x5cc>  // b.none
     2d0:	mov	w1, #0x3f44                	// #16196
     2d4:	cmp	w0, w1
     2d8:	b.hi	1c18 <inflateBack+0x1a60>  // b.pmore
     2dc:	mov	w1, #0x3f3f                	// #16191
     2e0:	cmp	w0, w1
     2e4:	b.eq	2f8 <inflateBack+0x140>  // b.none
     2e8:	mov	w1, #0x3f41                	// #16193
     2ec:	cmp	w0, w1
     2f0:	b.eq	498 <inflateBack+0x2e0>  // b.none
     2f4:	b	1c18 <inflateBack+0x1a60>
     2f8:	ldr	x0, [sp, #88]
     2fc:	ldr	w0, [x0, #12]
     300:	cmp	w0, #0x0
     304:	b.eq	3b8 <inflateBack+0x200>  // b.none
     308:	ldr	w0, [sp, #116]
     30c:	and	w0, w0, #0x7
     310:	ldr	x1, [sp, #120]
     314:	lsr	x0, x1, x0
     318:	str	x0, [sp, #120]
     31c:	ldr	w0, [sp, #116]
     320:	and	w0, w0, #0xfffffff8
     324:	str	w0, [sp, #116]
     328:	ldr	x0, [sp, #88]
     32c:	mov	w1, #0x3f50                	// #16208
     330:	str	w1, [x0, #8]
     334:	b	1c28 <inflateBack+0x1a70>
     338:	ldr	w0, [sp, #132]
     33c:	cmp	w0, #0x0
     340:	b.ne	378 <inflateBack+0x1c0>  // b.any
     344:	add	x0, sp, #0x50
     348:	ldr	x2, [sp, #48]
     34c:	mov	x1, x0
     350:	ldr	x0, [sp, #40]
     354:	blr	x2
     358:	str	w0, [sp, #132]
     35c:	ldr	w0, [sp, #132]
     360:	cmp	w0, #0x0
     364:	b.ne	378 <inflateBack+0x1c0>  // b.any
     368:	str	xzr, [sp, #80]
     36c:	mov	w0, #0xfffffffb            	// #-5
     370:	str	w0, [sp, #96]
     374:	b	1c30 <inflateBack+0x1a78>
     378:	ldr	w0, [sp, #132]
     37c:	sub	w0, w0, #0x1
     380:	str	w0, [sp, #132]
     384:	ldr	x0, [sp, #80]
     388:	add	x1, x0, #0x1
     38c:	str	x1, [sp, #80]
     390:	ldrb	w0, [x0]
     394:	and	x1, x0, #0xff
     398:	ldr	w0, [sp, #116]
     39c:	lsl	x0, x1, x0
     3a0:	ldr	x1, [sp, #120]
     3a4:	add	x0, x1, x0
     3a8:	str	x0, [sp, #120]
     3ac:	ldr	w0, [sp, #116]
     3b0:	add	w0, w0, #0x8
     3b4:	str	w0, [sp, #116]
     3b8:	ldr	w0, [sp, #116]
     3bc:	cmp	w0, #0x2
     3c0:	b.ls	338 <inflateBack+0x180>  // b.plast
     3c4:	ldr	x0, [sp, #120]
     3c8:	and	w1, w0, #0x1
     3cc:	ldr	x0, [sp, #88]
     3d0:	str	w1, [x0, #12]
     3d4:	ldr	x0, [sp, #120]
     3d8:	lsr	x0, x0, #1
     3dc:	str	x0, [sp, #120]
     3e0:	ldr	w0, [sp, #116]
     3e4:	sub	w0, w0, #0x1
     3e8:	str	w0, [sp, #116]
     3ec:	ldr	x0, [sp, #120]
     3f0:	and	w0, w0, #0x3
     3f4:	cmp	w0, #0x3
     3f8:	b.eq	460 <inflateBack+0x2a8>  // b.none
     3fc:	cmp	w0, #0x3
     400:	b.hi	47c <inflateBack+0x2c4>  // b.pmore
     404:	cmp	w0, #0x2
     408:	b.eq	450 <inflateBack+0x298>  // b.none
     40c:	cmp	w0, #0x2
     410:	b.hi	47c <inflateBack+0x2c4>  // b.pmore
     414:	cmp	w0, #0x0
     418:	b.eq	428 <inflateBack+0x270>  // b.none
     41c:	cmp	w0, #0x1
     420:	b.eq	438 <inflateBack+0x280>  // b.none
     424:	b	47c <inflateBack+0x2c4>
     428:	ldr	x0, [sp, #88]
     42c:	mov	w1, #0x3f41                	// #16193
     430:	str	w1, [x0, #8]
     434:	b	47c <inflateBack+0x2c4>
     438:	ldr	x0, [sp, #88]
     43c:	bl	16c <fixedtables>
     440:	ldr	x0, [sp, #88]
     444:	mov	w1, #0x3f48                	// #16200
     448:	str	w1, [x0, #8]
     44c:	b	47c <inflateBack+0x2c4>
     450:	ldr	x0, [sp, #88]
     454:	mov	w1, #0x3f44                	// #16196
     458:	str	w1, [x0, #8]
     45c:	b	47c <inflateBack+0x2c4>
     460:	ldr	x0, [sp, #56]
     464:	adrp	x1, 0 <inflateBackInit_>
     468:	add	x1, x1, #0x0
     46c:	str	x1, [x0, #48]
     470:	ldr	x0, [sp, #88]
     474:	mov	w1, #0x3f51                	// #16209
     478:	str	w1, [x0, #8]
     47c:	ldr	x0, [sp, #120]
     480:	lsr	x0, x0, #2
     484:	str	x0, [sp, #120]
     488:	ldr	w0, [sp, #116]
     48c:	sub	w0, w0, #0x2
     490:	str	w0, [sp, #116]
     494:	b	1c28 <inflateBack+0x1a70>
     498:	ldr	w0, [sp, #116]
     49c:	and	w0, w0, #0x7
     4a0:	ldr	x1, [sp, #120]
     4a4:	lsr	x0, x1, x0
     4a8:	str	x0, [sp, #120]
     4ac:	ldr	w0, [sp, #116]
     4b0:	and	w0, w0, #0xfffffff8
     4b4:	str	w0, [sp, #116]
     4b8:	b	53c <inflateBack+0x384>
     4bc:	ldr	w0, [sp, #132]
     4c0:	cmp	w0, #0x0
     4c4:	b.ne	4fc <inflateBack+0x344>  // b.any
     4c8:	add	x0, sp, #0x50
     4cc:	ldr	x2, [sp, #48]
     4d0:	mov	x1, x0
     4d4:	ldr	x0, [sp, #40]
     4d8:	blr	x2
     4dc:	str	w0, [sp, #132]
     4e0:	ldr	w0, [sp, #132]
     4e4:	cmp	w0, #0x0
     4e8:	b.ne	4fc <inflateBack+0x344>  // b.any
     4ec:	str	xzr, [sp, #80]
     4f0:	mov	w0, #0xfffffffb            	// #-5
     4f4:	str	w0, [sp, #96]
     4f8:	b	1c30 <inflateBack+0x1a78>
     4fc:	ldr	w0, [sp, #132]
     500:	sub	w0, w0, #0x1
     504:	str	w0, [sp, #132]
     508:	ldr	x0, [sp, #80]
     50c:	add	x1, x0, #0x1
     510:	str	x1, [sp, #80]
     514:	ldrb	w0, [x0]
     518:	and	x1, x0, #0xff
     51c:	ldr	w0, [sp, #116]
     520:	lsl	x0, x1, x0
     524:	ldr	x1, [sp, #120]
     528:	add	x0, x1, x0
     52c:	str	x0, [sp, #120]
     530:	ldr	w0, [sp, #116]
     534:	add	w0, w0, #0x8
     538:	str	w0, [sp, #116]
     53c:	ldr	w0, [sp, #116]
     540:	cmp	w0, #0x1f
     544:	b.ls	4bc <inflateBack+0x304>  // b.plast
     548:	ldr	x0, [sp, #120]
     54c:	and	x1, x0, #0xffff
     550:	ldr	x0, [sp, #120]
     554:	lsr	x0, x0, #16
     558:	eor	x0, x0, #0xffff
     55c:	cmp	x1, x0
     560:	b.eq	584 <inflateBack+0x3cc>  // b.none
     564:	ldr	x0, [sp, #56]
     568:	adrp	x1, 0 <inflateBackInit_>
     56c:	add	x1, x1, #0x0
     570:	str	x1, [x0, #48]
     574:	ldr	x0, [sp, #88]
     578:	mov	w1, #0x3f51                	// #16209
     57c:	str	w1, [x0, #8]
     580:	b	1c28 <inflateBack+0x1a70>
     584:	ldr	x0, [sp, #120]
     588:	and	w1, w0, #0xffff
     58c:	ldr	x0, [sp, #88]
     590:	str	w1, [x0, #92]
     594:	str	xzr, [sp, #120]
     598:	str	wzr, [sp, #116]
     59c:	b	6e4 <inflateBack+0x52c>
     5a0:	ldr	x0, [sp, #88]
     5a4:	ldr	w0, [x0, #92]
     5a8:	str	w0, [sp, #112]
     5ac:	ldr	w0, [sp, #132]
     5b0:	cmp	w0, #0x0
     5b4:	b.ne	5ec <inflateBack+0x434>  // b.any
     5b8:	add	x0, sp, #0x50
     5bc:	ldr	x2, [sp, #48]
     5c0:	mov	x1, x0
     5c4:	ldr	x0, [sp, #40]
     5c8:	blr	x2
     5cc:	str	w0, [sp, #132]
     5d0:	ldr	w0, [sp, #132]
     5d4:	cmp	w0, #0x0
     5d8:	b.ne	5ec <inflateBack+0x434>  // b.any
     5dc:	str	xzr, [sp, #80]
     5e0:	mov	w0, #0xfffffffb            	// #-5
     5e4:	str	w0, [sp, #96]
     5e8:	b	1c30 <inflateBack+0x1a78>
     5ec:	ldr	w0, [sp, #128]
     5f0:	cmp	w0, #0x0
     5f4:	b.ne	644 <inflateBack+0x48c>  // b.any
     5f8:	ldr	x0, [sp, #88]
     5fc:	ldr	x0, [x0, #72]
     600:	str	x0, [sp, #136]
     604:	ldr	x0, [sp, #88]
     608:	ldr	w0, [x0, #60]
     60c:	str	w0, [sp, #128]
     610:	ldr	x0, [sp, #88]
     614:	ldr	w1, [sp, #128]
     618:	str	w1, [x0, #64]
     61c:	ldr	x3, [sp, #32]
     620:	ldr	w2, [sp, #128]
     624:	ldr	x1, [sp, #136]
     628:	ldr	x0, [sp, #24]
     62c:	blr	x3
     630:	cmp	w0, #0x0
     634:	b.eq	644 <inflateBack+0x48c>  // b.none
     638:	mov	w0, #0xfffffffb            	// #-5
     63c:	str	w0, [sp, #96]
     640:	b	1c30 <inflateBack+0x1a78>
     644:	ldr	w1, [sp, #112]
     648:	ldr	w0, [sp, #132]
     64c:	cmp	w1, w0
     650:	b.ls	65c <inflateBack+0x4a4>  // b.plast
     654:	ldr	w0, [sp, #132]
     658:	str	w0, [sp, #112]
     65c:	ldr	w1, [sp, #112]
     660:	ldr	w0, [sp, #128]
     664:	cmp	w1, w0
     668:	b.ls	674 <inflateBack+0x4bc>  // b.plast
     66c:	ldr	w0, [sp, #128]
     670:	str	w0, [sp, #112]
     674:	ldr	x0, [sp, #80]
     678:	ldr	w1, [sp, #112]
     67c:	mov	x2, x1
     680:	mov	x1, x0
     684:	ldr	x0, [sp, #136]
     688:	bl	0 <memcpy>
     68c:	ldr	w1, [sp, #132]
     690:	ldr	w0, [sp, #112]
     694:	sub	w0, w1, w0
     698:	str	w0, [sp, #132]
     69c:	ldr	x1, [sp, #80]
     6a0:	ldr	w0, [sp, #112]
     6a4:	add	x0, x1, x0
     6a8:	str	x0, [sp, #80]
     6ac:	ldr	w1, [sp, #128]
     6b0:	ldr	w0, [sp, #112]
     6b4:	sub	w0, w1, w0
     6b8:	str	w0, [sp, #128]
     6bc:	ldr	w0, [sp, #112]
     6c0:	ldr	x1, [sp, #136]
     6c4:	add	x0, x1, x0
     6c8:	str	x0, [sp, #136]
     6cc:	ldr	x0, [sp, #88]
     6d0:	ldr	w1, [x0, #92]
     6d4:	ldr	w0, [sp, #112]
     6d8:	sub	w1, w1, w0
     6dc:	ldr	x0, [sp, #88]
     6e0:	str	w1, [x0, #92]
     6e4:	ldr	x0, [sp, #88]
     6e8:	ldr	w0, [x0, #92]
     6ec:	cmp	w0, #0x0
     6f0:	b.ne	5a0 <inflateBack+0x3e8>  // b.any
     6f4:	ldr	x0, [sp, #88]
     6f8:	mov	w1, #0x3f3f                	// #16191
     6fc:	str	w1, [x0, #8]
     700:	b	1c28 <inflateBack+0x1a70>
     704:	ldr	w0, [sp, #132]
     708:	cmp	w0, #0x0
     70c:	b.ne	744 <inflateBack+0x58c>  // b.any
     710:	add	x0, sp, #0x50
     714:	ldr	x2, [sp, #48]
     718:	mov	x1, x0
     71c:	ldr	x0, [sp, #40]
     720:	blr	x2
     724:	str	w0, [sp, #132]
     728:	ldr	w0, [sp, #132]
     72c:	cmp	w0, #0x0
     730:	b.ne	744 <inflateBack+0x58c>  // b.any
     734:	str	xzr, [sp, #80]
     738:	mov	w0, #0xfffffffb            	// #-5
     73c:	str	w0, [sp, #96]
     740:	b	1c30 <inflateBack+0x1a78>
     744:	ldr	w0, [sp, #132]
     748:	sub	w0, w0, #0x1
     74c:	str	w0, [sp, #132]
     750:	ldr	x0, [sp, #80]
     754:	add	x1, x0, #0x1
     758:	str	x1, [sp, #80]
     75c:	ldrb	w0, [x0]
     760:	and	x1, x0, #0xff
     764:	ldr	w0, [sp, #116]
     768:	lsl	x0, x1, x0
     76c:	ldr	x1, [sp, #120]
     770:	add	x0, x1, x0
     774:	str	x0, [sp, #120]
     778:	ldr	w0, [sp, #116]
     77c:	add	w0, w0, #0x8
     780:	str	w0, [sp, #116]
     784:	ldr	w0, [sp, #116]
     788:	cmp	w0, #0xd
     78c:	b.ls	704 <inflateBack+0x54c>  // b.plast
     790:	ldr	x0, [sp, #120]
     794:	and	w0, w0, #0x1f
     798:	add	w1, w0, #0x101
     79c:	ldr	x0, [sp, #88]
     7a0:	str	w1, [x0, #132]
     7a4:	ldr	x0, [sp, #120]
     7a8:	lsr	x0, x0, #5
     7ac:	str	x0, [sp, #120]
     7b0:	ldr	w0, [sp, #116]
     7b4:	sub	w0, w0, #0x5
     7b8:	str	w0, [sp, #116]
     7bc:	ldr	x0, [sp, #120]
     7c0:	and	w0, w0, #0x1f
     7c4:	add	w1, w0, #0x1
     7c8:	ldr	x0, [sp, #88]
     7cc:	str	w1, [x0, #136]
     7d0:	ldr	x0, [sp, #120]
     7d4:	lsr	x0, x0, #5
     7d8:	str	x0, [sp, #120]
     7dc:	ldr	w0, [sp, #116]
     7e0:	sub	w0, w0, #0x5
     7e4:	str	w0, [sp, #116]
     7e8:	ldr	x0, [sp, #120]
     7ec:	and	w0, w0, #0xf
     7f0:	add	w1, w0, #0x4
     7f4:	ldr	x0, [sp, #88]
     7f8:	str	w1, [x0, #128]
     7fc:	ldr	x0, [sp, #120]
     800:	lsr	x0, x0, #4
     804:	str	x0, [sp, #120]
     808:	ldr	w0, [sp, #116]
     80c:	sub	w0, w0, #0x4
     810:	str	w0, [sp, #116]
     814:	ldr	x0, [sp, #88]
     818:	ldr	w0, [x0, #132]
     81c:	cmp	w0, #0x11e
     820:	b.hi	834 <inflateBack+0x67c>  // b.pmore
     824:	ldr	x0, [sp, #88]
     828:	ldr	w0, [x0, #136]
     82c:	cmp	w0, #0x1e
     830:	b.ls	854 <inflateBack+0x69c>  // b.plast
     834:	ldr	x0, [sp, #56]
     838:	adrp	x1, 0 <inflateBackInit_>
     83c:	add	x1, x1, #0x0
     840:	str	x1, [x0, #48]
     844:	ldr	x0, [sp, #88]
     848:	mov	w1, #0x3f51                	// #16209
     84c:	str	w1, [x0, #8]
     850:	b	1c28 <inflateBack+0x1a70>
     854:	ldr	x0, [sp, #88]
     858:	str	wzr, [x0, #140]
     85c:	b	958 <inflateBack+0x7a0>
     860:	ldr	w0, [sp, #132]
     864:	cmp	w0, #0x0
     868:	b.ne	8a0 <inflateBack+0x6e8>  // b.any
     86c:	add	x0, sp, #0x50
     870:	ldr	x2, [sp, #48]
     874:	mov	x1, x0
     878:	ldr	x0, [sp, #40]
     87c:	blr	x2
     880:	str	w0, [sp, #132]
     884:	ldr	w0, [sp, #132]
     888:	cmp	w0, #0x0
     88c:	b.ne	8a0 <inflateBack+0x6e8>  // b.any
     890:	str	xzr, [sp, #80]
     894:	mov	w0, #0xfffffffb            	// #-5
     898:	str	w0, [sp, #96]
     89c:	b	1c30 <inflateBack+0x1a78>
     8a0:	ldr	w0, [sp, #132]
     8a4:	sub	w0, w0, #0x1
     8a8:	str	w0, [sp, #132]
     8ac:	ldr	x0, [sp, #80]
     8b0:	add	x1, x0, #0x1
     8b4:	str	x1, [sp, #80]
     8b8:	ldrb	w0, [x0]
     8bc:	and	x1, x0, #0xff
     8c0:	ldr	w0, [sp, #116]
     8c4:	lsl	x0, x1, x0
     8c8:	ldr	x1, [sp, #120]
     8cc:	add	x0, x1, x0
     8d0:	str	x0, [sp, #120]
     8d4:	ldr	w0, [sp, #116]
     8d8:	add	w0, w0, #0x8
     8dc:	str	w0, [sp, #116]
     8e0:	ldr	w0, [sp, #116]
     8e4:	cmp	w0, #0x2
     8e8:	b.ls	860 <inflateBack+0x6a8>  // b.plast
     8ec:	ldr	x0, [sp, #120]
     8f0:	and	w1, w0, #0xffff
     8f4:	ldr	x0, [sp, #88]
     8f8:	ldr	w0, [x0, #140]
     8fc:	add	w3, w0, #0x1
     900:	ldr	x2, [sp, #88]
     904:	str	w3, [x2, #140]
     908:	adrp	x2, 0 <inflateBackInit_>
     90c:	add	x2, x2, #0x0
     910:	mov	w0, w0
     914:	ldrh	w0, [x2, x0, lsl #1]
     918:	mov	w3, w0
     91c:	and	w0, w1, #0x7
     920:	and	w2, w0, #0xffff
     924:	ldr	x1, [sp, #88]
     928:	sxtw	x0, w3
     92c:	add	x0, x0, #0x48
     930:	lsl	x0, x0, #1
     934:	add	x0, x1, x0
     938:	mov	w1, w2
     93c:	strh	w1, [x0, #8]
     940:	ldr	x0, [sp, #120]
     944:	lsr	x0, x0, #3
     948:	str	x0, [sp, #120]
     94c:	ldr	w0, [sp, #116]
     950:	sub	w0, w0, #0x3
     954:	str	w0, [sp, #116]
     958:	ldr	x0, [sp, #88]
     95c:	ldr	w1, [x0, #140]
     960:	ldr	x0, [sp, #88]
     964:	ldr	w0, [x0, #128]
     968:	cmp	w1, w0
     96c:	b.cc	8e0 <inflateBack+0x728>  // b.lo, b.ul, b.last
     970:	b	9b0 <inflateBack+0x7f8>
     974:	ldr	x0, [sp, #88]
     978:	ldr	w0, [x0, #140]
     97c:	add	w2, w0, #0x1
     980:	ldr	x1, [sp, #88]
     984:	str	w2, [x1, #140]
     988:	adrp	x1, 0 <inflateBackInit_>
     98c:	add	x1, x1, #0x0
     990:	mov	w0, w0
     994:	ldrh	w0, [x1, x0, lsl #1]
     998:	ldr	x1, [sp, #88]
     99c:	sxtw	x0, w0
     9a0:	add	x0, x0, #0x48
     9a4:	lsl	x0, x0, #1
     9a8:	add	x0, x1, x0
     9ac:	strh	wzr, [x0, #8]
     9b0:	ldr	x0, [sp, #88]
     9b4:	ldr	w0, [x0, #140]
     9b8:	cmp	w0, #0x12
     9bc:	b.ls	974 <inflateBack+0x7bc>  // b.plast
     9c0:	ldr	x0, [sp, #88]
     9c4:	add	x1, x0, #0x558
     9c8:	ldr	x0, [sp, #88]
     9cc:	str	x1, [x0, #144]
     9d0:	ldr	x0, [sp, #88]
     9d4:	ldr	x1, [x0, #144]
     9d8:	ldr	x0, [sp, #88]
     9dc:	str	x1, [x0, #104]
     9e0:	ldr	x0, [sp, #88]
     9e4:	mov	w1, #0x7                   	// #7
     9e8:	str	w1, [x0, #120]
     9ec:	ldr	x0, [sp, #88]
     9f0:	add	x1, x0, #0x98
     9f4:	ldr	x0, [sp, #88]
     9f8:	add	x2, x0, #0x90
     9fc:	ldr	x0, [sp, #88]
     a00:	add	x3, x0, #0x78
     a04:	ldr	x0, [sp, #88]
     a08:	add	x0, x0, #0x318
     a0c:	mov	x5, x0
     a10:	mov	x4, x3
     a14:	mov	x3, x2
     a18:	mov	w2, #0x13                  	// #19
     a1c:	mov	w0, #0x0                   	// #0
     a20:	bl	0 <inflate_table>
     a24:	str	w0, [sp, #96]
     a28:	ldr	w0, [sp, #96]
     a2c:	cmp	w0, #0x0
     a30:	b.eq	a54 <inflateBack+0x89c>  // b.none
     a34:	ldr	x0, [sp, #56]
     a38:	adrp	x1, 0 <inflateBackInit_>
     a3c:	add	x1, x1, #0x0
     a40:	str	x1, [x0, #48]
     a44:	ldr	x0, [sp, #88]
     a48:	mov	w1, #0x3f51                	// #16209
     a4c:	str	w1, [x0, #8]
     a50:	b	1c28 <inflateBack+0x1a70>
     a54:	ldr	x0, [sp, #88]
     a58:	str	wzr, [x0, #140]
     a5c:	b	f7c <inflateBack+0xdc4>
     a60:	ldr	x0, [sp, #88]
     a64:	ldr	x1, [x0, #104]
     a68:	ldr	x0, [sp, #120]
     a6c:	mov	w3, w0
     a70:	ldr	x0, [sp, #88]
     a74:	ldr	w0, [x0, #120]
     a78:	mov	w2, #0xffffffff            	// #-1
     a7c:	lsl	w0, w2, w0
     a80:	mvn	w0, w0
     a84:	and	w0, w3, w0
     a88:	mov	w0, w0
     a8c:	lsl	x0, x0, #2
     a90:	add	x0, x1, x0
     a94:	ldr	w0, [x0]
     a98:	str	w0, [sp, #72]
     a9c:	ldrb	w0, [sp, #73]
     aa0:	mov	w1, w0
     aa4:	ldr	w0, [sp, #116]
     aa8:	cmp	w0, w1
     aac:	b.cs	b34 <inflateBack+0x97c>  // b.hs, b.nlast
     ab0:	ldr	w0, [sp, #132]
     ab4:	cmp	w0, #0x0
     ab8:	b.ne	af0 <inflateBack+0x938>  // b.any
     abc:	add	x0, sp, #0x50
     ac0:	ldr	x2, [sp, #48]
     ac4:	mov	x1, x0
     ac8:	ldr	x0, [sp, #40]
     acc:	blr	x2
     ad0:	str	w0, [sp, #132]
     ad4:	ldr	w0, [sp, #132]
     ad8:	cmp	w0, #0x0
     adc:	b.ne	af0 <inflateBack+0x938>  // b.any
     ae0:	str	xzr, [sp, #80]
     ae4:	mov	w0, #0xfffffffb            	// #-5
     ae8:	str	w0, [sp, #96]
     aec:	b	1c30 <inflateBack+0x1a78>
     af0:	ldr	w0, [sp, #132]
     af4:	sub	w0, w0, #0x1
     af8:	str	w0, [sp, #132]
     afc:	ldr	x0, [sp, #80]
     b00:	add	x1, x0, #0x1
     b04:	str	x1, [sp, #80]
     b08:	ldrb	w0, [x0]
     b0c:	and	x1, x0, #0xff
     b10:	ldr	w0, [sp, #116]
     b14:	lsl	x0, x1, x0
     b18:	ldr	x1, [sp, #120]
     b1c:	add	x0, x1, x0
     b20:	str	x0, [sp, #120]
     b24:	ldr	w0, [sp, #116]
     b28:	add	w0, w0, #0x8
     b2c:	str	w0, [sp, #116]
     b30:	b	a60 <inflateBack+0x8a8>
     b34:	nop
     b38:	ldrh	w0, [sp, #74]
     b3c:	cmp	w0, #0xf
     b40:	b.hi	ba4 <inflateBack+0x9ec>  // b.pmore
     b44:	ldrb	w0, [sp, #73]
     b48:	mov	w1, w0
     b4c:	ldr	x0, [sp, #120]
     b50:	lsr	x0, x0, x1
     b54:	str	x0, [sp, #120]
     b58:	ldrb	w0, [sp, #73]
     b5c:	mov	w1, w0
     b60:	ldr	w0, [sp, #116]
     b64:	sub	w0, w0, w1
     b68:	str	w0, [sp, #116]
     b6c:	ldr	x0, [sp, #88]
     b70:	ldr	w0, [x0, #140]
     b74:	add	w2, w0, #0x1
     b78:	ldr	x1, [sp, #88]
     b7c:	str	w2, [x1, #140]
     b80:	ldrh	w2, [sp, #74]
     b84:	ldr	x1, [sp, #88]
     b88:	mov	w0, w0
     b8c:	add	x0, x0, #0x48
     b90:	lsl	x0, x0, #1
     b94:	add	x0, x1, x0
     b98:	mov	w1, w2
     b9c:	strh	w1, [x0, #8]
     ba0:	b	f7c <inflateBack+0xdc4>
     ba4:	ldrh	w0, [sp, #74]
     ba8:	cmp	w0, #0x10
     bac:	b.ne	cf8 <inflateBack+0xb40>  // b.any
     bb0:	b	c34 <inflateBack+0xa7c>
     bb4:	ldr	w0, [sp, #132]
     bb8:	cmp	w0, #0x0
     bbc:	b.ne	bf4 <inflateBack+0xa3c>  // b.any
     bc0:	add	x0, sp, #0x50
     bc4:	ldr	x2, [sp, #48]
     bc8:	mov	x1, x0
     bcc:	ldr	x0, [sp, #40]
     bd0:	blr	x2
     bd4:	str	w0, [sp, #132]
     bd8:	ldr	w0, [sp, #132]
     bdc:	cmp	w0, #0x0
     be0:	b.ne	bf4 <inflateBack+0xa3c>  // b.any
     be4:	str	xzr, [sp, #80]
     be8:	mov	w0, #0xfffffffb            	// #-5
     bec:	str	w0, [sp, #96]
     bf0:	b	1c30 <inflateBack+0x1a78>
     bf4:	ldr	w0, [sp, #132]
     bf8:	sub	w0, w0, #0x1
     bfc:	str	w0, [sp, #132]
     c00:	ldr	x0, [sp, #80]
     c04:	add	x1, x0, #0x1
     c08:	str	x1, [sp, #80]
     c0c:	ldrb	w0, [x0]
     c10:	and	x1, x0, #0xff
     c14:	ldr	w0, [sp, #116]
     c18:	lsl	x0, x1, x0
     c1c:	ldr	x1, [sp, #120]
     c20:	add	x0, x1, x0
     c24:	str	x0, [sp, #120]
     c28:	ldr	w0, [sp, #116]
     c2c:	add	w0, w0, #0x8
     c30:	str	w0, [sp, #116]
     c34:	ldrb	w0, [sp, #73]
     c38:	add	w0, w0, #0x2
     c3c:	mov	w1, w0
     c40:	ldr	w0, [sp, #116]
     c44:	cmp	w0, w1
     c48:	b.cc	bb4 <inflateBack+0x9fc>  // b.lo, b.ul, b.last
     c4c:	ldrb	w0, [sp, #73]
     c50:	mov	w1, w0
     c54:	ldr	x0, [sp, #120]
     c58:	lsr	x0, x0, x1
     c5c:	str	x0, [sp, #120]
     c60:	ldrb	w0, [sp, #73]
     c64:	mov	w1, w0
     c68:	ldr	w0, [sp, #116]
     c6c:	sub	w0, w0, w1
     c70:	str	w0, [sp, #116]
     c74:	ldr	x0, [sp, #88]
     c78:	ldr	w0, [x0, #140]
     c7c:	cmp	w0, #0x0
     c80:	b.ne	ca4 <inflateBack+0xaec>  // b.any
     c84:	ldr	x0, [sp, #56]
     c88:	adrp	x1, 0 <inflateBackInit_>
     c8c:	add	x1, x1, #0x0
     c90:	str	x1, [x0, #48]
     c94:	ldr	x0, [sp, #88]
     c98:	mov	w1, #0x3f51                	// #16209
     c9c:	str	w1, [x0, #8]
     ca0:	b	fa0 <inflateBack+0xde8>
     ca4:	ldr	x0, [sp, #88]
     ca8:	ldr	w0, [x0, #140]
     cac:	sub	w0, w0, #0x1
     cb0:	ldr	x1, [sp, #88]
     cb4:	mov	w0, w0
     cb8:	add	x0, x0, #0x48
     cbc:	lsl	x0, x0, #1
     cc0:	add	x0, x1, x0
     cc4:	ldrh	w0, [x0, #8]
     cc8:	str	w0, [sp, #100]
     ccc:	ldr	x0, [sp, #120]
     cd0:	and	w0, w0, #0x3
     cd4:	add	w0, w0, #0x3
     cd8:	str	w0, [sp, #112]
     cdc:	ldr	x0, [sp, #120]
     ce0:	lsr	x0, x0, #2
     ce4:	str	x0, [sp, #120]
     ce8:	ldr	w0, [sp, #116]
     cec:	sub	w0, w0, #0x2
     cf0:	str	w0, [sp, #116]
     cf4:	b	ee4 <inflateBack+0xd2c>
     cf8:	ldrh	w0, [sp, #74]
     cfc:	cmp	w0, #0x11
     d00:	b.ne	e78 <inflateBack+0xcc0>  // b.any
     d04:	b	d88 <inflateBack+0xbd0>
     d08:	ldr	w0, [sp, #132]
     d0c:	cmp	w0, #0x0
     d10:	b.ne	d48 <inflateBack+0xb90>  // b.any
     d14:	add	x0, sp, #0x50
     d18:	ldr	x2, [sp, #48]
     d1c:	mov	x1, x0
     d20:	ldr	x0, [sp, #40]
     d24:	blr	x2
     d28:	str	w0, [sp, #132]
     d2c:	ldr	w0, [sp, #132]
     d30:	cmp	w0, #0x0
     d34:	b.ne	d48 <inflateBack+0xb90>  // b.any
     d38:	str	xzr, [sp, #80]
     d3c:	mov	w0, #0xfffffffb            	// #-5
     d40:	str	w0, [sp, #96]
     d44:	b	1c30 <inflateBack+0x1a78>
     d48:	ldr	w0, [sp, #132]
     d4c:	sub	w0, w0, #0x1
     d50:	str	w0, [sp, #132]
     d54:	ldr	x0, [sp, #80]
     d58:	add	x1, x0, #0x1
     d5c:	str	x1, [sp, #80]
     d60:	ldrb	w0, [x0]
     d64:	and	x1, x0, #0xff
     d68:	ldr	w0, [sp, #116]
     d6c:	lsl	x0, x1, x0
     d70:	ldr	x1, [sp, #120]
     d74:	add	x0, x1, x0
     d78:	str	x0, [sp, #120]
     d7c:	ldr	w0, [sp, #116]
     d80:	add	w0, w0, #0x8
     d84:	str	w0, [sp, #116]
     d88:	ldrb	w0, [sp, #73]
     d8c:	add	w0, w0, #0x3
     d90:	mov	w1, w0
     d94:	ldr	w0, [sp, #116]
     d98:	cmp	w0, w1
     d9c:	b.cc	d08 <inflateBack+0xb50>  // b.lo, b.ul, b.last
     da0:	ldrb	w0, [sp, #73]
     da4:	mov	w1, w0
     da8:	ldr	x0, [sp, #120]
     dac:	lsr	x0, x0, x1
     db0:	str	x0, [sp, #120]
     db4:	ldrb	w0, [sp, #73]
     db8:	mov	w1, w0
     dbc:	ldr	w0, [sp, #116]
     dc0:	sub	w0, w0, w1
     dc4:	str	w0, [sp, #116]
     dc8:	str	wzr, [sp, #100]
     dcc:	ldr	x0, [sp, #120]
     dd0:	and	w0, w0, #0x7
     dd4:	add	w0, w0, #0x3
     dd8:	str	w0, [sp, #112]
     ddc:	ldr	x0, [sp, #120]
     de0:	lsr	x0, x0, #3
     de4:	str	x0, [sp, #120]
     de8:	ldr	w0, [sp, #116]
     dec:	sub	w0, w0, #0x3
     df0:	str	w0, [sp, #116]
     df4:	b	ee4 <inflateBack+0xd2c>
     df8:	ldr	w0, [sp, #132]
     dfc:	cmp	w0, #0x0
     e00:	b.ne	e38 <inflateBack+0xc80>  // b.any
     e04:	add	x0, sp, #0x50
     e08:	ldr	x2, [sp, #48]
     e0c:	mov	x1, x0
     e10:	ldr	x0, [sp, #40]
     e14:	blr	x2
     e18:	str	w0, [sp, #132]
     e1c:	ldr	w0, [sp, #132]
     e20:	cmp	w0, #0x0
     e24:	b.ne	e38 <inflateBack+0xc80>  // b.any
     e28:	str	xzr, [sp, #80]
     e2c:	mov	w0, #0xfffffffb            	// #-5
     e30:	str	w0, [sp, #96]
     e34:	b	1c30 <inflateBack+0x1a78>
     e38:	ldr	w0, [sp, #132]
     e3c:	sub	w0, w0, #0x1
     e40:	str	w0, [sp, #132]
     e44:	ldr	x0, [sp, #80]
     e48:	add	x1, x0, #0x1
     e4c:	str	x1, [sp, #80]
     e50:	ldrb	w0, [x0]
     e54:	and	x1, x0, #0xff
     e58:	ldr	w0, [sp, #116]
     e5c:	lsl	x0, x1, x0
     e60:	ldr	x1, [sp, #120]
     e64:	add	x0, x1, x0
     e68:	str	x0, [sp, #120]
     e6c:	ldr	w0, [sp, #116]
     e70:	add	w0, w0, #0x8
     e74:	str	w0, [sp, #116]
     e78:	ldrb	w0, [sp, #73]
     e7c:	add	w0, w0, #0x7
     e80:	mov	w1, w0
     e84:	ldr	w0, [sp, #116]
     e88:	cmp	w0, w1
     e8c:	b.cc	df8 <inflateBack+0xc40>  // b.lo, b.ul, b.last
     e90:	ldrb	w0, [sp, #73]
     e94:	mov	w1, w0
     e98:	ldr	x0, [sp, #120]
     e9c:	lsr	x0, x0, x1
     ea0:	str	x0, [sp, #120]
     ea4:	ldrb	w0, [sp, #73]
     ea8:	mov	w1, w0
     eac:	ldr	w0, [sp, #116]
     eb0:	sub	w0, w0, w1
     eb4:	str	w0, [sp, #116]
     eb8:	str	wzr, [sp, #100]
     ebc:	ldr	x0, [sp, #120]
     ec0:	and	w0, w0, #0x7f
     ec4:	add	w0, w0, #0xb
     ec8:	str	w0, [sp, #112]
     ecc:	ldr	x0, [sp, #120]
     ed0:	lsr	x0, x0, #7
     ed4:	str	x0, [sp, #120]
     ed8:	ldr	w0, [sp, #116]
     edc:	sub	w0, w0, #0x7
     ee0:	str	w0, [sp, #116]
     ee4:	ldr	x0, [sp, #88]
     ee8:	ldr	w1, [x0, #140]
     eec:	ldr	w0, [sp, #112]
     ef0:	add	w1, w1, w0
     ef4:	ldr	x0, [sp, #88]
     ef8:	ldr	w2, [x0, #132]
     efc:	ldr	x0, [sp, #88]
     f00:	ldr	w0, [x0, #136]
     f04:	add	w0, w2, w0
     f08:	cmp	w1, w0
     f0c:	b.ls	f68 <inflateBack+0xdb0>  // b.plast
     f10:	ldr	x0, [sp, #56]
     f14:	adrp	x1, 0 <inflateBackInit_>
     f18:	add	x1, x1, #0x0
     f1c:	str	x1, [x0, #48]
     f20:	ldr	x0, [sp, #88]
     f24:	mov	w1, #0x3f51                	// #16209
     f28:	str	w1, [x0, #8]
     f2c:	b	fa0 <inflateBack+0xde8>
     f30:	ldr	x0, [sp, #88]
     f34:	ldr	w0, [x0, #140]
     f38:	add	w2, w0, #0x1
     f3c:	ldr	x1, [sp, #88]
     f40:	str	w2, [x1, #140]
     f44:	ldr	w1, [sp, #100]
     f48:	and	w2, w1, #0xffff
     f4c:	ldr	x1, [sp, #88]
     f50:	mov	w0, w0
     f54:	add	x0, x0, #0x48
     f58:	lsl	x0, x0, #1
     f5c:	add	x0, x1, x0
     f60:	mov	w1, w2
     f64:	strh	w1, [x0, #8]
     f68:	ldr	w0, [sp, #112]
     f6c:	sub	w1, w0, #0x1
     f70:	str	w1, [sp, #112]
     f74:	cmp	w0, #0x0
     f78:	b.ne	f30 <inflateBack+0xd78>  // b.any
     f7c:	ldr	x0, [sp, #88]
     f80:	ldr	w1, [x0, #140]
     f84:	ldr	x0, [sp, #88]
     f88:	ldr	w2, [x0, #132]
     f8c:	ldr	x0, [sp, #88]
     f90:	ldr	w0, [x0, #136]
     f94:	add	w0, w2, w0
     f98:	cmp	w1, w0
     f9c:	b.cc	a60 <inflateBack+0x8a8>  // b.lo, b.ul, b.last
     fa0:	ldr	x0, [sp, #88]
     fa4:	ldr	w1, [x0, #8]
     fa8:	mov	w0, #0x3f51                	// #16209
     fac:	cmp	w1, w0
     fb0:	b.eq	1c24 <inflateBack+0x1a6c>  // b.none
     fb4:	ldr	x0, [sp, #88]
     fb8:	ldrh	w0, [x0, #664]
     fbc:	cmp	w0, #0x0
     fc0:	b.ne	fe4 <inflateBack+0xe2c>  // b.any
     fc4:	ldr	x0, [sp, #56]
     fc8:	adrp	x1, 0 <inflateBackInit_>
     fcc:	add	x1, x1, #0x0
     fd0:	str	x1, [x0, #48]
     fd4:	ldr	x0, [sp, #88]
     fd8:	mov	w1, #0x3f51                	// #16209
     fdc:	str	w1, [x0, #8]
     fe0:	b	1c28 <inflateBack+0x1a70>
     fe4:	ldr	x0, [sp, #88]
     fe8:	add	x1, x0, #0x558
     fec:	ldr	x0, [sp, #88]
     ff0:	str	x1, [x0, #144]
     ff4:	ldr	x0, [sp, #88]
     ff8:	ldr	x1, [x0, #144]
     ffc:	ldr	x0, [sp, #88]
    1000:	str	x1, [x0, #104]
    1004:	ldr	x0, [sp, #88]
    1008:	mov	w1, #0x9                   	// #9
    100c:	str	w1, [x0, #120]
    1010:	ldr	x0, [sp, #88]
    1014:	add	x1, x0, #0x98
    1018:	ldr	x0, [sp, #88]
    101c:	ldr	w2, [x0, #132]
    1020:	ldr	x0, [sp, #88]
    1024:	add	x3, x0, #0x90
    1028:	ldr	x0, [sp, #88]
    102c:	add	x4, x0, #0x78
    1030:	ldr	x0, [sp, #88]
    1034:	add	x0, x0, #0x318
    1038:	mov	x5, x0
    103c:	mov	w0, #0x1                   	// #1
    1040:	bl	0 <inflate_table>
    1044:	str	w0, [sp, #96]
    1048:	ldr	w0, [sp, #96]
    104c:	cmp	w0, #0x0
    1050:	b.eq	1074 <inflateBack+0xebc>  // b.none
    1054:	ldr	x0, [sp, #56]
    1058:	adrp	x1, 0 <inflateBackInit_>
    105c:	add	x1, x1, #0x0
    1060:	str	x1, [x0, #48]
    1064:	ldr	x0, [sp, #88]
    1068:	mov	w1, #0x3f51                	// #16209
    106c:	str	w1, [x0, #8]
    1070:	b	1c28 <inflateBack+0x1a70>
    1074:	ldr	x0, [sp, #88]
    1078:	ldr	x1, [x0, #144]
    107c:	ldr	x0, [sp, #88]
    1080:	str	x1, [x0, #112]
    1084:	ldr	x0, [sp, #88]
    1088:	mov	w1, #0x6                   	// #6
    108c:	str	w1, [x0, #124]
    1090:	ldr	x0, [sp, #88]
    1094:	add	x1, x0, #0x98
    1098:	ldr	x0, [sp, #88]
    109c:	ldr	w0, [x0, #132]
    10a0:	mov	w0, w0
    10a4:	lsl	x0, x0, #1
    10a8:	add	x1, x1, x0
    10ac:	ldr	x0, [sp, #88]
    10b0:	ldr	w2, [x0, #136]
    10b4:	ldr	x0, [sp, #88]
    10b8:	add	x3, x0, #0x90
    10bc:	ldr	x0, [sp, #88]
    10c0:	add	x4, x0, #0x7c
    10c4:	ldr	x0, [sp, #88]
    10c8:	add	x0, x0, #0x318
    10cc:	mov	x5, x0
    10d0:	mov	w0, #0x2                   	// #2
    10d4:	bl	0 <inflate_table>
    10d8:	str	w0, [sp, #96]
    10dc:	ldr	w0, [sp, #96]
    10e0:	cmp	w0, #0x0
    10e4:	b.eq	1108 <inflateBack+0xf50>  // b.none
    10e8:	ldr	x0, [sp, #56]
    10ec:	adrp	x1, 0 <inflateBackInit_>
    10f0:	add	x1, x1, #0x0
    10f4:	str	x1, [x0, #48]
    10f8:	ldr	x0, [sp, #88]
    10fc:	mov	w1, #0x3f51                	// #16209
    1100:	str	w1, [x0, #8]
    1104:	b	1c28 <inflateBack+0x1a70>
    1108:	ldr	x0, [sp, #88]
    110c:	mov	w1, #0x3f48                	// #16200
    1110:	str	w1, [x0, #8]
    1114:	ldr	w0, [sp, #132]
    1118:	cmp	w0, #0x5
    111c:	b.ls	1204 <inflateBack+0x104c>  // b.plast
    1120:	ldr	w0, [sp, #128]
    1124:	cmp	w0, #0x101
    1128:	b.ls	1204 <inflateBack+0x104c>  // b.plast
    112c:	ldr	x0, [sp, #56]
    1130:	ldr	x1, [sp, #136]
    1134:	str	x1, [x0, #24]
    1138:	ldr	x0, [sp, #56]
    113c:	ldr	w1, [sp, #128]
    1140:	str	w1, [x0, #32]
    1144:	ldr	x1, [sp, #80]
    1148:	ldr	x0, [sp, #56]
    114c:	str	x1, [x0]
    1150:	ldr	x0, [sp, #56]
    1154:	ldr	w1, [sp, #132]
    1158:	str	w1, [x0, #8]
    115c:	ldr	x0, [sp, #88]
    1160:	ldr	x1, [sp, #120]
    1164:	str	x1, [x0, #80]
    1168:	ldr	x0, [sp, #88]
    116c:	ldr	w1, [sp, #116]
    1170:	str	w1, [x0, #88]
    1174:	ldr	x0, [sp, #88]
    1178:	ldr	w1, [x0, #64]
    117c:	ldr	x0, [sp, #88]
    1180:	ldr	w0, [x0, #60]
    1184:	cmp	w1, w0
    1188:	b.cs	11a4 <inflateBack+0xfec>  // b.hs, b.nlast
    118c:	ldr	x0, [sp, #88]
    1190:	ldr	w1, [x0, #60]
    1194:	ldr	w0, [sp, #128]
    1198:	sub	w1, w1, w0
    119c:	ldr	x0, [sp, #88]
    11a0:	str	w1, [x0, #64]
    11a4:	ldr	x0, [sp, #88]
    11a8:	ldr	w0, [x0, #60]
    11ac:	mov	w1, w0
    11b0:	ldr	x0, [sp, #56]
    11b4:	bl	0 <inflate_fast>
    11b8:	ldr	x0, [sp, #56]
    11bc:	ldr	x0, [x0, #24]
    11c0:	str	x0, [sp, #136]
    11c4:	ldr	x0, [sp, #56]
    11c8:	ldr	w0, [x0, #32]
    11cc:	str	w0, [sp, #128]
    11d0:	ldr	x0, [sp, #56]
    11d4:	ldr	x0, [x0]
    11d8:	str	x0, [sp, #80]
    11dc:	ldr	x0, [sp, #56]
    11e0:	ldr	w0, [x0, #8]
    11e4:	str	w0, [sp, #132]
    11e8:	ldr	x0, [sp, #88]
    11ec:	ldr	x0, [x0, #80]
    11f0:	str	x0, [sp, #120]
    11f4:	ldr	x0, [sp, #88]
    11f8:	ldr	w0, [x0, #88]
    11fc:	str	w0, [sp, #116]
    1200:	b	1c28 <inflateBack+0x1a70>
    1204:	ldr	x0, [sp, #88]
    1208:	ldr	x1, [x0, #104]
    120c:	ldr	x0, [sp, #120]
    1210:	mov	w3, w0
    1214:	ldr	x0, [sp, #88]
    1218:	ldr	w0, [x0, #120]
    121c:	mov	w2, #0xffffffff            	// #-1
    1220:	lsl	w0, w2, w0
    1224:	mvn	w0, w0
    1228:	and	w0, w3, w0
    122c:	mov	w0, w0
    1230:	lsl	x0, x0, #2
    1234:	add	x0, x1, x0
    1238:	ldr	w0, [x0]
    123c:	str	w0, [sp, #72]
    1240:	ldrb	w0, [sp, #73]
    1244:	mov	w1, w0
    1248:	ldr	w0, [sp, #116]
    124c:	cmp	w0, w1
    1250:	b.cs	12d8 <inflateBack+0x1120>  // b.hs, b.nlast
    1254:	ldr	w0, [sp, #132]
    1258:	cmp	w0, #0x0
    125c:	b.ne	1294 <inflateBack+0x10dc>  // b.any
    1260:	add	x0, sp, #0x50
    1264:	ldr	x2, [sp, #48]
    1268:	mov	x1, x0
    126c:	ldr	x0, [sp, #40]
    1270:	blr	x2
    1274:	str	w0, [sp, #132]
    1278:	ldr	w0, [sp, #132]
    127c:	cmp	w0, #0x0
    1280:	b.ne	1294 <inflateBack+0x10dc>  // b.any
    1284:	str	xzr, [sp, #80]
    1288:	mov	w0, #0xfffffffb            	// #-5
    128c:	str	w0, [sp, #96]
    1290:	b	1c30 <inflateBack+0x1a78>
    1294:	ldr	w0, [sp, #132]
    1298:	sub	w0, w0, #0x1
    129c:	str	w0, [sp, #132]
    12a0:	ldr	x0, [sp, #80]
    12a4:	add	x1, x0, #0x1
    12a8:	str	x1, [sp, #80]
    12ac:	ldrb	w0, [x0]
    12b0:	and	x1, x0, #0xff
    12b4:	ldr	w0, [sp, #116]
    12b8:	lsl	x0, x1, x0
    12bc:	ldr	x1, [sp, #120]
    12c0:	add	x0, x1, x0
    12c4:	str	x0, [sp, #120]
    12c8:	ldr	w0, [sp, #116]
    12cc:	add	w0, w0, #0x8
    12d0:	str	w0, [sp, #116]
    12d4:	b	1204 <inflateBack+0x104c>
    12d8:	nop
    12dc:	ldrb	w0, [sp, #72]
    12e0:	cmp	w0, #0x0
    12e4:	b.eq	1428 <inflateBack+0x1270>  // b.none
    12e8:	ldrb	w0, [sp, #72]
    12ec:	and	w0, w0, #0xf0
    12f0:	cmp	w0, #0x0
    12f4:	b.ne	1428 <inflateBack+0x1270>  // b.any
    12f8:	ldr	w0, [sp, #72]
    12fc:	str	w0, [sp, #64]
    1300:	ldr	x0, [sp, #88]
    1304:	ldr	x1, [x0, #104]
    1308:	ldrh	w0, [sp, #66]
    130c:	mov	w3, w0
    1310:	ldr	x0, [sp, #120]
    1314:	mov	w4, w0
    1318:	ldrb	w0, [sp, #65]
    131c:	mov	w2, w0
    1320:	ldrb	w0, [sp, #64]
    1324:	add	w0, w2, w0
    1328:	mov	w2, #0xffffffff            	// #-1
    132c:	lsl	w0, w2, w0
    1330:	mvn	w0, w0
    1334:	and	w0, w4, w0
    1338:	ldrb	w2, [sp, #65]
    133c:	lsr	w0, w0, w2
    1340:	add	w0, w3, w0
    1344:	mov	w0, w0
    1348:	lsl	x0, x0, #2
    134c:	add	x0, x1, x0
    1350:	ldr	w0, [x0]
    1354:	str	w0, [sp, #72]
    1358:	ldrb	w0, [sp, #65]
    135c:	mov	w1, w0
    1360:	ldrb	w0, [sp, #73]
    1364:	add	w0, w1, w0
    1368:	mov	w1, w0
    136c:	ldr	w0, [sp, #116]
    1370:	cmp	w0, w1
    1374:	b.cs	13fc <inflateBack+0x1244>  // b.hs, b.nlast
    1378:	ldr	w0, [sp, #132]
    137c:	cmp	w0, #0x0
    1380:	b.ne	13b8 <inflateBack+0x1200>  // b.any
    1384:	add	x0, sp, #0x50
    1388:	ldr	x2, [sp, #48]
    138c:	mov	x1, x0
    1390:	ldr	x0, [sp, #40]
    1394:	blr	x2
    1398:	str	w0, [sp, #132]
    139c:	ldr	w0, [sp, #132]
    13a0:	cmp	w0, #0x0
    13a4:	b.ne	13b8 <inflateBack+0x1200>  // b.any
    13a8:	str	xzr, [sp, #80]
    13ac:	mov	w0, #0xfffffffb            	// #-5
    13b0:	str	w0, [sp, #96]
    13b4:	b	1c30 <inflateBack+0x1a78>
    13b8:	ldr	w0, [sp, #132]
    13bc:	sub	w0, w0, #0x1
    13c0:	str	w0, [sp, #132]
    13c4:	ldr	x0, [sp, #80]
    13c8:	add	x1, x0, #0x1
    13cc:	str	x1, [sp, #80]
    13d0:	ldrb	w0, [x0]
    13d4:	and	x1, x0, #0xff
    13d8:	ldr	w0, [sp, #116]
    13dc:	lsl	x0, x1, x0
    13e0:	ldr	x1, [sp, #120]
    13e4:	add	x0, x1, x0
    13e8:	str	x0, [sp, #120]
    13ec:	ldr	w0, [sp, #116]
    13f0:	add	w0, w0, #0x8
    13f4:	str	w0, [sp, #116]
    13f8:	b	1300 <inflateBack+0x1148>
    13fc:	nop
    1400:	ldrb	w0, [sp, #65]
    1404:	mov	w1, w0
    1408:	ldr	x0, [sp, #120]
    140c:	lsr	x0, x0, x1
    1410:	str	x0, [sp, #120]
    1414:	ldrb	w0, [sp, #65]
    1418:	mov	w1, w0
    141c:	ldr	w0, [sp, #116]
    1420:	sub	w0, w0, w1
    1424:	str	w0, [sp, #116]
    1428:	ldrb	w0, [sp, #73]
    142c:	mov	w1, w0
    1430:	ldr	x0, [sp, #120]
    1434:	lsr	x0, x0, x1
    1438:	str	x0, [sp, #120]
    143c:	ldrb	w0, [sp, #73]
    1440:	mov	w1, w0
    1444:	ldr	w0, [sp, #116]
    1448:	sub	w0, w0, w1
    144c:	str	w0, [sp, #116]
    1450:	ldrh	w0, [sp, #74]
    1454:	mov	w1, w0
    1458:	ldr	x0, [sp, #88]
    145c:	str	w1, [x0, #92]
    1460:	ldrb	w0, [sp, #72]
    1464:	cmp	w0, #0x0
    1468:	b.ne	14fc <inflateBack+0x1344>  // b.any
    146c:	ldr	w0, [sp, #128]
    1470:	cmp	w0, #0x0
    1474:	b.ne	14c4 <inflateBack+0x130c>  // b.any
    1478:	ldr	x0, [sp, #88]
    147c:	ldr	x0, [x0, #72]
    1480:	str	x0, [sp, #136]
    1484:	ldr	x0, [sp, #88]
    1488:	ldr	w0, [x0, #60]
    148c:	str	w0, [sp, #128]
    1490:	ldr	x0, [sp, #88]
    1494:	ldr	w1, [sp, #128]
    1498:	str	w1, [x0, #64]
    149c:	ldr	x3, [sp, #32]
    14a0:	ldr	w2, [sp, #128]
    14a4:	ldr	x1, [sp, #136]
    14a8:	ldr	x0, [sp, #24]
    14ac:	blr	x3
    14b0:	cmp	w0, #0x0
    14b4:	b.eq	14c4 <inflateBack+0x130c>  // b.none
    14b8:	mov	w0, #0xfffffffb            	// #-5
    14bc:	str	w0, [sp, #96]
    14c0:	b	1c30 <inflateBack+0x1a78>
    14c4:	ldr	x0, [sp, #88]
    14c8:	ldr	w2, [x0, #92]
    14cc:	ldr	x0, [sp, #136]
    14d0:	add	x1, x0, #0x1
    14d4:	str	x1, [sp, #136]
    14d8:	and	w1, w2, #0xff
    14dc:	strb	w1, [x0]
    14e0:	ldr	w0, [sp, #128]
    14e4:	sub	w0, w0, #0x1
    14e8:	str	w0, [sp, #128]
    14ec:	ldr	x0, [sp, #88]
    14f0:	mov	w1, #0x3f48                	// #16200
    14f4:	str	w1, [x0, #8]
    14f8:	b	1c28 <inflateBack+0x1a70>
    14fc:	ldrb	w0, [sp, #72]
    1500:	and	w0, w0, #0x20
    1504:	cmp	w0, #0x0
    1508:	b.eq	151c <inflateBack+0x1364>  // b.none
    150c:	ldr	x0, [sp, #88]
    1510:	mov	w1, #0x3f3f                	// #16191
    1514:	str	w1, [x0, #8]
    1518:	b	1c28 <inflateBack+0x1a70>
    151c:	ldrb	w0, [sp, #72]
    1520:	and	w0, w0, #0x40
    1524:	cmp	w0, #0x0
    1528:	b.eq	154c <inflateBack+0x1394>  // b.none
    152c:	ldr	x0, [sp, #56]
    1530:	adrp	x1, 0 <inflateBackInit_>
    1534:	add	x1, x1, #0x0
    1538:	str	x1, [x0, #48]
    153c:	ldr	x0, [sp, #88]
    1540:	mov	w1, #0x3f51                	// #16209
    1544:	str	w1, [x0, #8]
    1548:	b	1c28 <inflateBack+0x1a70>
    154c:	ldrb	w0, [sp, #72]
    1550:	and	w1, w0, #0xf
    1554:	ldr	x0, [sp, #88]
    1558:	str	w1, [x0, #100]
    155c:	ldr	x0, [sp, #88]
    1560:	ldr	w0, [x0, #100]
    1564:	cmp	w0, #0x0
    1568:	b.eq	1660 <inflateBack+0x14a8>  // b.none
    156c:	b	15f0 <inflateBack+0x1438>
    1570:	ldr	w0, [sp, #132]
    1574:	cmp	w0, #0x0
    1578:	b.ne	15b0 <inflateBack+0x13f8>  // b.any
    157c:	add	x0, sp, #0x50
    1580:	ldr	x2, [sp, #48]
    1584:	mov	x1, x0
    1588:	ldr	x0, [sp, #40]
    158c:	blr	x2
    1590:	str	w0, [sp, #132]
    1594:	ldr	w0, [sp, #132]
    1598:	cmp	w0, #0x0
    159c:	b.ne	15b0 <inflateBack+0x13f8>  // b.any
    15a0:	str	xzr, [sp, #80]
    15a4:	mov	w0, #0xfffffffb            	// #-5
    15a8:	str	w0, [sp, #96]
    15ac:	b	1c30 <inflateBack+0x1a78>
    15b0:	ldr	w0, [sp, #132]
    15b4:	sub	w0, w0, #0x1
    15b8:	str	w0, [sp, #132]
    15bc:	ldr	x0, [sp, #80]
    15c0:	add	x1, x0, #0x1
    15c4:	str	x1, [sp, #80]
    15c8:	ldrb	w0, [x0]
    15cc:	and	x1, x0, #0xff
    15d0:	ldr	w0, [sp, #116]
    15d4:	lsl	x0, x1, x0
    15d8:	ldr	x1, [sp, #120]
    15dc:	add	x0, x1, x0
    15e0:	str	x0, [sp, #120]
    15e4:	ldr	w0, [sp, #116]
    15e8:	add	w0, w0, #0x8
    15ec:	str	w0, [sp, #116]
    15f0:	ldr	x0, [sp, #88]
    15f4:	ldr	w0, [x0, #100]
    15f8:	ldr	w1, [sp, #116]
    15fc:	cmp	w1, w0
    1600:	b.cc	1570 <inflateBack+0x13b8>  // b.lo, b.ul, b.last
    1604:	ldr	x0, [sp, #88]
    1608:	ldr	w1, [x0, #92]
    160c:	ldr	x0, [sp, #120]
    1610:	mov	w3, w0
    1614:	ldr	x0, [sp, #88]
    1618:	ldr	w0, [x0, #100]
    161c:	mov	w2, #0xffffffff            	// #-1
    1620:	lsl	w0, w2, w0
    1624:	mvn	w0, w0
    1628:	and	w0, w3, w0
    162c:	add	w1, w1, w0
    1630:	ldr	x0, [sp, #88]
    1634:	str	w1, [x0, #92]
    1638:	ldr	x0, [sp, #88]
    163c:	ldr	w0, [x0, #100]
    1640:	ldr	x1, [sp, #120]
    1644:	lsr	x0, x1, x0
    1648:	str	x0, [sp, #120]
    164c:	ldr	x0, [sp, #88]
    1650:	ldr	w0, [x0, #100]
    1654:	ldr	w1, [sp, #116]
    1658:	sub	w0, w1, w0
    165c:	str	w0, [sp, #116]
    1660:	ldr	x0, [sp, #88]
    1664:	ldr	x1, [x0, #112]
    1668:	ldr	x0, [sp, #120]
    166c:	mov	w3, w0
    1670:	ldr	x0, [sp, #88]
    1674:	ldr	w0, [x0, #124]
    1678:	mov	w2, #0xffffffff            	// #-1
    167c:	lsl	w0, w2, w0
    1680:	mvn	w0, w0
    1684:	and	w0, w3, w0
    1688:	mov	w0, w0
    168c:	lsl	x0, x0, #2
    1690:	add	x0, x1, x0
    1694:	ldr	w0, [x0]
    1698:	str	w0, [sp, #72]
    169c:	ldrb	w0, [sp, #73]
    16a0:	mov	w1, w0
    16a4:	ldr	w0, [sp, #116]
    16a8:	cmp	w0, w1
    16ac:	b.cs	1734 <inflateBack+0x157c>  // b.hs, b.nlast
    16b0:	ldr	w0, [sp, #132]
    16b4:	cmp	w0, #0x0
    16b8:	b.ne	16f0 <inflateBack+0x1538>  // b.any
    16bc:	add	x0, sp, #0x50
    16c0:	ldr	x2, [sp, #48]
    16c4:	mov	x1, x0
    16c8:	ldr	x0, [sp, #40]
    16cc:	blr	x2
    16d0:	str	w0, [sp, #132]
    16d4:	ldr	w0, [sp, #132]
    16d8:	cmp	w0, #0x0
    16dc:	b.ne	16f0 <inflateBack+0x1538>  // b.any
    16e0:	str	xzr, [sp, #80]
    16e4:	mov	w0, #0xfffffffb            	// #-5
    16e8:	str	w0, [sp, #96]
    16ec:	b	1c30 <inflateBack+0x1a78>
    16f0:	ldr	w0, [sp, #132]
    16f4:	sub	w0, w0, #0x1
    16f8:	str	w0, [sp, #132]
    16fc:	ldr	x0, [sp, #80]
    1700:	add	x1, x0, #0x1
    1704:	str	x1, [sp, #80]
    1708:	ldrb	w0, [x0]
    170c:	and	x1, x0, #0xff
    1710:	ldr	w0, [sp, #116]
    1714:	lsl	x0, x1, x0
    1718:	ldr	x1, [sp, #120]
    171c:	add	x0, x1, x0
    1720:	str	x0, [sp, #120]
    1724:	ldr	w0, [sp, #116]
    1728:	add	w0, w0, #0x8
    172c:	str	w0, [sp, #116]
    1730:	b	1660 <inflateBack+0x14a8>
    1734:	nop
    1738:	ldrb	w0, [sp, #72]
    173c:	and	w0, w0, #0xf0
    1740:	cmp	w0, #0x0
    1744:	b.ne	1878 <inflateBack+0x16c0>  // b.any
    1748:	ldr	w0, [sp, #72]
    174c:	str	w0, [sp, #64]
    1750:	ldr	x0, [sp, #88]
    1754:	ldr	x1, [x0, #112]
    1758:	ldrh	w0, [sp, #66]
    175c:	mov	w3, w0
    1760:	ldr	x0, [sp, #120]
    1764:	mov	w4, w0
    1768:	ldrb	w0, [sp, #65]
    176c:	mov	w2, w0
    1770:	ldrb	w0, [sp, #64]
    1774:	add	w0, w2, w0
    1778:	mov	w2, #0xffffffff            	// #-1
    177c:	lsl	w0, w2, w0
    1780:	mvn	w0, w0
    1784:	and	w0, w4, w0
    1788:	ldrb	w2, [sp, #65]
    178c:	lsr	w0, w0, w2
    1790:	add	w0, w3, w0
    1794:	mov	w0, w0
    1798:	lsl	x0, x0, #2
    179c:	add	x0, x1, x0
    17a0:	ldr	w0, [x0]
    17a4:	str	w0, [sp, #72]
    17a8:	ldrb	w0, [sp, #65]
    17ac:	mov	w1, w0
    17b0:	ldrb	w0, [sp, #73]
    17b4:	add	w0, w1, w0
    17b8:	mov	w1, w0
    17bc:	ldr	w0, [sp, #116]
    17c0:	cmp	w0, w1
    17c4:	b.cs	184c <inflateBack+0x1694>  // b.hs, b.nlast
    17c8:	ldr	w0, [sp, #132]
    17cc:	cmp	w0, #0x0
    17d0:	b.ne	1808 <inflateBack+0x1650>  // b.any
    17d4:	add	x0, sp, #0x50
    17d8:	ldr	x2, [sp, #48]
    17dc:	mov	x1, x0
    17e0:	ldr	x0, [sp, #40]
    17e4:	blr	x2
    17e8:	str	w0, [sp, #132]
    17ec:	ldr	w0, [sp, #132]
    17f0:	cmp	w0, #0x0
    17f4:	b.ne	1808 <inflateBack+0x1650>  // b.any
    17f8:	str	xzr, [sp, #80]
    17fc:	mov	w0, #0xfffffffb            	// #-5
    1800:	str	w0, [sp, #96]
    1804:	b	1c30 <inflateBack+0x1a78>
    1808:	ldr	w0, [sp, #132]
    180c:	sub	w0, w0, #0x1
    1810:	str	w0, [sp, #132]
    1814:	ldr	x0, [sp, #80]
    1818:	add	x1, x0, #0x1
    181c:	str	x1, [sp, #80]
    1820:	ldrb	w0, [x0]
    1824:	and	x1, x0, #0xff
    1828:	ldr	w0, [sp, #116]
    182c:	lsl	x0, x1, x0
    1830:	ldr	x1, [sp, #120]
    1834:	add	x0, x1, x0
    1838:	str	x0, [sp, #120]
    183c:	ldr	w0, [sp, #116]
    1840:	add	w0, w0, #0x8
    1844:	str	w0, [sp, #116]
    1848:	b	1750 <inflateBack+0x1598>
    184c:	nop
    1850:	ldrb	w0, [sp, #65]
    1854:	mov	w1, w0
    1858:	ldr	x0, [sp, #120]
    185c:	lsr	x0, x0, x1
    1860:	str	x0, [sp, #120]
    1864:	ldrb	w0, [sp, #65]
    1868:	mov	w1, w0
    186c:	ldr	w0, [sp, #116]
    1870:	sub	w0, w0, w1
    1874:	str	w0, [sp, #116]
    1878:	ldrb	w0, [sp, #73]
    187c:	mov	w1, w0
    1880:	ldr	x0, [sp, #120]
    1884:	lsr	x0, x0, x1
    1888:	str	x0, [sp, #120]
    188c:	ldrb	w0, [sp, #73]
    1890:	mov	w1, w0
    1894:	ldr	w0, [sp, #116]
    1898:	sub	w0, w0, w1
    189c:	str	w0, [sp, #116]
    18a0:	ldrb	w0, [sp, #72]
    18a4:	and	w0, w0, #0x40
    18a8:	cmp	w0, #0x0
    18ac:	b.eq	18d0 <inflateBack+0x1718>  // b.none
    18b0:	ldr	x0, [sp, #56]
    18b4:	adrp	x1, 0 <inflateBackInit_>
    18b8:	add	x1, x1, #0x0
    18bc:	str	x1, [x0, #48]
    18c0:	ldr	x0, [sp, #88]
    18c4:	mov	w1, #0x3f51                	// #16209
    18c8:	str	w1, [x0, #8]
    18cc:	b	1c28 <inflateBack+0x1a70>
    18d0:	ldrh	w0, [sp, #74]
    18d4:	mov	w1, w0
    18d8:	ldr	x0, [sp, #88]
    18dc:	str	w1, [x0, #96]
    18e0:	ldrb	w0, [sp, #72]
    18e4:	and	w1, w0, #0xf
    18e8:	ldr	x0, [sp, #88]
    18ec:	str	w1, [x0, #100]
    18f0:	ldr	x0, [sp, #88]
    18f4:	ldr	w0, [x0, #100]
    18f8:	cmp	w0, #0x0
    18fc:	b.eq	19f4 <inflateBack+0x183c>  // b.none
    1900:	b	1984 <inflateBack+0x17cc>
    1904:	ldr	w0, [sp, #132]
    1908:	cmp	w0, #0x0
    190c:	b.ne	1944 <inflateBack+0x178c>  // b.any
    1910:	add	x0, sp, #0x50
    1914:	ldr	x2, [sp, #48]
    1918:	mov	x1, x0
    191c:	ldr	x0, [sp, #40]
    1920:	blr	x2
    1924:	str	w0, [sp, #132]
    1928:	ldr	w0, [sp, #132]
    192c:	cmp	w0, #0x0
    1930:	b.ne	1944 <inflateBack+0x178c>  // b.any
    1934:	str	xzr, [sp, #80]
    1938:	mov	w0, #0xfffffffb            	// #-5
    193c:	str	w0, [sp, #96]
    1940:	b	1c30 <inflateBack+0x1a78>
    1944:	ldr	w0, [sp, #132]
    1948:	sub	w0, w0, #0x1
    194c:	str	w0, [sp, #132]
    1950:	ldr	x0, [sp, #80]
    1954:	add	x1, x0, #0x1
    1958:	str	x1, [sp, #80]
    195c:	ldrb	w0, [x0]
    1960:	and	x1, x0, #0xff
    1964:	ldr	w0, [sp, #116]
    1968:	lsl	x0, x1, x0
    196c:	ldr	x1, [sp, #120]
    1970:	add	x0, x1, x0
    1974:	str	x0, [sp, #120]
    1978:	ldr	w0, [sp, #116]
    197c:	add	w0, w0, #0x8
    1980:	str	w0, [sp, #116]
    1984:	ldr	x0, [sp, #88]
    1988:	ldr	w0, [x0, #100]
    198c:	ldr	w1, [sp, #116]
    1990:	cmp	w1, w0
    1994:	b.cc	1904 <inflateBack+0x174c>  // b.lo, b.ul, b.last
    1998:	ldr	x0, [sp, #88]
    199c:	ldr	w1, [x0, #96]
    19a0:	ldr	x0, [sp, #120]
    19a4:	mov	w3, w0
    19a8:	ldr	x0, [sp, #88]
    19ac:	ldr	w0, [x0, #100]
    19b0:	mov	w2, #0xffffffff            	// #-1
    19b4:	lsl	w0, w2, w0
    19b8:	mvn	w0, w0
    19bc:	and	w0, w3, w0
    19c0:	add	w1, w1, w0
    19c4:	ldr	x0, [sp, #88]
    19c8:	str	w1, [x0, #96]
    19cc:	ldr	x0, [sp, #88]
    19d0:	ldr	w0, [x0, #100]
    19d4:	ldr	x1, [sp, #120]
    19d8:	lsr	x0, x1, x0
    19dc:	str	x0, [sp, #120]
    19e0:	ldr	x0, [sp, #88]
    19e4:	ldr	w0, [x0, #100]
    19e8:	ldr	w1, [sp, #116]
    19ec:	sub	w0, w1, w0
    19f0:	str	w0, [sp, #116]
    19f4:	ldr	x0, [sp, #88]
    19f8:	ldr	w1, [x0, #96]
    19fc:	ldr	x0, [sp, #88]
    1a00:	ldr	w2, [x0, #60]
    1a04:	ldr	x0, [sp, #88]
    1a08:	ldr	w3, [x0, #64]
    1a0c:	ldr	x0, [sp, #88]
    1a10:	ldr	w0, [x0, #60]
    1a14:	cmp	w3, w0
    1a18:	b.cs	1a24 <inflateBack+0x186c>  // b.hs, b.nlast
    1a1c:	ldr	w0, [sp, #128]
    1a20:	b	1a28 <inflateBack+0x1870>
    1a24:	mov	w0, #0x0                   	// #0
    1a28:	sub	w0, w2, w0
    1a2c:	cmp	w1, w0
    1a30:	b.ls	1a54 <inflateBack+0x189c>  // b.plast
    1a34:	ldr	x0, [sp, #56]
    1a38:	adrp	x1, 0 <inflateBackInit_>
    1a3c:	add	x1, x1, #0x0
    1a40:	str	x1, [x0, #48]
    1a44:	ldr	x0, [sp, #88]
    1a48:	mov	w1, #0x3f51                	// #16209
    1a4c:	str	w1, [x0, #8]
    1a50:	b	1c28 <inflateBack+0x1a70>
    1a54:	ldr	w0, [sp, #128]
    1a58:	cmp	w0, #0x0
    1a5c:	b.ne	1aac <inflateBack+0x18f4>  // b.any
    1a60:	ldr	x0, [sp, #88]
    1a64:	ldr	x0, [x0, #72]
    1a68:	str	x0, [sp, #136]
    1a6c:	ldr	x0, [sp, #88]
    1a70:	ldr	w0, [x0, #60]
    1a74:	str	w0, [sp, #128]
    1a78:	ldr	x0, [sp, #88]
    1a7c:	ldr	w1, [sp, #128]
    1a80:	str	w1, [x0, #64]
    1a84:	ldr	x3, [sp, #32]
    1a88:	ldr	w2, [sp, #128]
    1a8c:	ldr	x1, [sp, #136]
    1a90:	ldr	x0, [sp, #24]
    1a94:	blr	x3
    1a98:	cmp	w0, #0x0
    1a9c:	b.eq	1aac <inflateBack+0x18f4>  // b.none
    1aa0:	mov	w0, #0xfffffffb            	// #-5
    1aa4:	str	w0, [sp, #96]
    1aa8:	b	1c30 <inflateBack+0x1a78>
    1aac:	ldr	x0, [sp, #88]
    1ab0:	ldr	w1, [x0, #60]
    1ab4:	ldr	x0, [sp, #88]
    1ab8:	ldr	w0, [x0, #96]
    1abc:	sub	w0, w1, w0
    1ac0:	str	w0, [sp, #112]
    1ac4:	ldr	w1, [sp, #112]
    1ac8:	ldr	w0, [sp, #128]
    1acc:	cmp	w1, w0
    1ad0:	b.cs	1af8 <inflateBack+0x1940>  // b.hs, b.nlast
    1ad4:	ldr	w0, [sp, #112]
    1ad8:	ldr	x1, [sp, #136]
    1adc:	add	x0, x1, x0
    1ae0:	str	x0, [sp, #104]
    1ae4:	ldr	w1, [sp, #128]
    1ae8:	ldr	w0, [sp, #112]
    1aec:	sub	w0, w1, w0
    1af0:	str	w0, [sp, #112]
    1af4:	b	1b1c <inflateBack+0x1964>
    1af8:	ldr	x0, [sp, #88]
    1afc:	ldr	w0, [x0, #96]
    1b00:	mov	w0, w0
    1b04:	neg	x0, x0
    1b08:	ldr	x1, [sp, #136]
    1b0c:	add	x0, x1, x0
    1b10:	str	x0, [sp, #104]
    1b14:	ldr	w0, [sp, #128]
    1b18:	str	w0, [sp, #112]
    1b1c:	ldr	x0, [sp, #88]
    1b20:	ldr	w0, [x0, #92]
    1b24:	ldr	w1, [sp, #112]
    1b28:	cmp	w1, w0
    1b2c:	b.ls	1b3c <inflateBack+0x1984>  // b.plast
    1b30:	ldr	x0, [sp, #88]
    1b34:	ldr	w0, [x0, #92]
    1b38:	str	w0, [sp, #112]
    1b3c:	ldr	x0, [sp, #88]
    1b40:	ldr	w1, [x0, #92]
    1b44:	ldr	w0, [sp, #112]
    1b48:	sub	w1, w1, w0
    1b4c:	ldr	x0, [sp, #88]
    1b50:	str	w1, [x0, #92]
    1b54:	ldr	w1, [sp, #128]
    1b58:	ldr	w0, [sp, #112]
    1b5c:	sub	w0, w1, w0
    1b60:	str	w0, [sp, #128]
    1b64:	ldr	x1, [sp, #104]
    1b68:	add	x0, x1, #0x1
    1b6c:	str	x0, [sp, #104]
    1b70:	ldr	x0, [sp, #136]
    1b74:	add	x2, x0, #0x1
    1b78:	str	x2, [sp, #136]
    1b7c:	ldrb	w1, [x1]
    1b80:	strb	w1, [x0]
    1b84:	ldr	w0, [sp, #112]
    1b88:	sub	w0, w0, #0x1
    1b8c:	str	w0, [sp, #112]
    1b90:	ldr	w0, [sp, #112]
    1b94:	cmp	w0, #0x0
    1b98:	b.ne	1b64 <inflateBack+0x19ac>  // b.any
    1b9c:	ldr	x0, [sp, #88]
    1ba0:	ldr	w0, [x0, #92]
    1ba4:	cmp	w0, #0x0
    1ba8:	b.ne	1a54 <inflateBack+0x189c>  // b.any
    1bac:	b	1c28 <inflateBack+0x1a70>
    1bb0:	mov	w0, #0x1                   	// #1
    1bb4:	str	w0, [sp, #96]
    1bb8:	ldr	x0, [sp, #88]
    1bbc:	ldr	w0, [x0, #60]
    1bc0:	ldr	w1, [sp, #128]
    1bc4:	cmp	w1, w0
    1bc8:	b.cs	1c2c <inflateBack+0x1a74>  // b.hs, b.nlast
    1bcc:	ldr	x0, [sp, #88]
    1bd0:	ldr	x4, [x0, #72]
    1bd4:	ldr	x0, [sp, #88]
    1bd8:	ldr	w1, [x0, #60]
    1bdc:	ldr	w0, [sp, #128]
    1be0:	sub	w0, w1, w0
    1be4:	ldr	x3, [sp, #32]
    1be8:	mov	w2, w0
    1bec:	mov	x1, x4
    1bf0:	ldr	x0, [sp, #24]
    1bf4:	blr	x3
    1bf8:	cmp	w0, #0x0
    1bfc:	b.eq	1c2c <inflateBack+0x1a74>  // b.none
    1c00:	mov	w0, #0xfffffffb            	// #-5
    1c04:	str	w0, [sp, #96]
    1c08:	b	1c2c <inflateBack+0x1a74>
    1c0c:	mov	w0, #0xfffffffd            	// #-3
    1c10:	str	w0, [sp, #96]
    1c14:	b	1c30 <inflateBack+0x1a78>
    1c18:	mov	w0, #0xfffffffe            	// #-2
    1c1c:	str	w0, [sp, #96]
    1c20:	b	1c30 <inflateBack+0x1a78>
    1c24:	nop
    1c28:	b	274 <inflateBack+0xbc>
    1c2c:	nop
    1c30:	ldr	x1, [sp, #80]
    1c34:	ldr	x0, [sp, #56]
    1c38:	str	x1, [x0]
    1c3c:	ldr	x0, [sp, #56]
    1c40:	ldr	w1, [sp, #132]
    1c44:	str	w1, [x0, #8]
    1c48:	ldr	w0, [sp, #96]
    1c4c:	ldp	x29, x30, [sp], #144
    1c50:	ret

0000000000001c54 <inflateBackEnd>:
    1c54:	stp	x29, x30, [sp, #-32]!
    1c58:	mov	x29, sp
    1c5c:	str	x0, [sp, #24]
    1c60:	ldr	x0, [sp, #24]
    1c64:	cmp	x0, #0x0
    1c68:	b.eq	1c8c <inflateBackEnd+0x38>  // b.none
    1c6c:	ldr	x0, [sp, #24]
    1c70:	ldr	x0, [x0, #56]
    1c74:	cmp	x0, #0x0
    1c78:	b.eq	1c8c <inflateBackEnd+0x38>  // b.none
    1c7c:	ldr	x0, [sp, #24]
    1c80:	ldr	x0, [x0, #72]
    1c84:	cmp	x0, #0x0
    1c88:	b.ne	1c94 <inflateBackEnd+0x40>  // b.any
    1c8c:	mov	w0, #0xfffffffe            	// #-2
    1c90:	b	1cc4 <inflateBackEnd+0x70>
    1c94:	ldr	x0, [sp, #24]
    1c98:	ldr	x2, [x0, #72]
    1c9c:	ldr	x0, [sp, #24]
    1ca0:	ldr	x3, [x0, #80]
    1ca4:	ldr	x0, [sp, #24]
    1ca8:	ldr	x0, [x0, #56]
    1cac:	mov	x1, x0
    1cb0:	mov	x0, x3
    1cb4:	blr	x2
    1cb8:	ldr	x0, [sp, #24]
    1cbc:	str	xzr, [x0, #56]
    1cc0:	mov	w0, #0x0                   	// #0
    1cc4:	ldp	x29, x30, [sp], #32
    1cc8:	ret

inffast.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflate_fast>:
   0:	sub	sp, sp, #0xa0
   4:	str	x0, [sp, #8]
   8:	str	w1, [sp, #4]
   c:	ldr	x0, [sp, #8]
  10:	ldr	x0, [x0, #56]
  14:	str	x0, [sp, #104]
  18:	ldr	x0, [sp, #8]
  1c:	ldr	x0, [x0]
  20:	str	x0, [sp, #152]
  24:	ldr	x0, [sp, #8]
  28:	ldr	w0, [x0, #8]
  2c:	sub	w0, w0, #0x5
  30:	mov	w0, w0
  34:	ldr	x1, [sp, #152]
  38:	add	x0, x1, x0
  3c:	str	x0, [sp, #96]
  40:	ldr	x0, [sp, #8]
  44:	ldr	x0, [x0, #24]
  48:	str	x0, [sp, #144]
  4c:	ldr	x0, [sp, #8]
  50:	ldr	w0, [x0, #32]
  54:	ldr	w1, [sp, #4]
  58:	sub	w0, w1, w0
  5c:	mov	w0, w0
  60:	neg	x0, x0
  64:	ldr	x1, [sp, #144]
  68:	add	x0, x1, x0
  6c:	str	x0, [sp, #88]
  70:	ldr	x0, [sp, #8]
  74:	ldr	w0, [x0, #32]
  78:	sub	w0, w0, #0x101
  7c:	mov	w0, w0
  80:	ldr	x1, [sp, #144]
  84:	add	x0, x1, x0
  88:	str	x0, [sp, #80]
  8c:	ldr	x0, [sp, #104]
  90:	ldr	w0, [x0, #60]
  94:	str	w0, [sp, #76]
  98:	ldr	x0, [sp, #104]
  9c:	ldr	w0, [x0, #64]
  a0:	str	w0, [sp, #72]
  a4:	ldr	x0, [sp, #104]
  a8:	ldr	w0, [x0, #68]
  ac:	str	w0, [sp, #68]
  b0:	ldr	x0, [sp, #104]
  b4:	ldr	x0, [x0, #72]
  b8:	str	x0, [sp, #56]
  bc:	ldr	x0, [sp, #104]
  c0:	ldr	x0, [x0, #80]
  c4:	str	x0, [sp, #136]
  c8:	ldr	x0, [sp, #104]
  cc:	ldr	w0, [x0, #88]
  d0:	str	w0, [sp, #132]
  d4:	ldr	x0, [sp, #104]
  d8:	ldr	x0, [x0, #104]
  dc:	str	x0, [sp, #48]
  e0:	ldr	x0, [sp, #104]
  e4:	ldr	x0, [x0, #112]
  e8:	str	x0, [sp, #40]
  ec:	ldr	x0, [sp, #104]
  f0:	ldr	w0, [x0, #120]
  f4:	mov	w1, #0x1                   	// #1
  f8:	lsl	w0, w1, w0
  fc:	sub	w0, w0, #0x1
 100:	str	w0, [sp, #36]
 104:	ldr	x0, [sp, #104]
 108:	ldr	w0, [x0, #124]
 10c:	mov	w1, #0x1                   	// #1
 110:	lsl	w0, w1, w0
 114:	sub	w0, w0, #0x1
 118:	str	w0, [sp, #32]
 11c:	ldr	w0, [sp, #132]
 120:	cmp	w0, #0xe
 124:	b.hi	190 <inflate_fast+0x190>  // b.pmore
 128:	ldr	x0, [sp, #152]
 12c:	add	x1, x0, #0x1
 130:	str	x1, [sp, #152]
 134:	ldrb	w0, [x0]
 138:	and	x1, x0, #0xff
 13c:	ldr	w0, [sp, #132]
 140:	lsl	x0, x1, x0
 144:	ldr	x1, [sp, #136]
 148:	add	x0, x1, x0
 14c:	str	x0, [sp, #136]
 150:	ldr	w0, [sp, #132]
 154:	add	w0, w0, #0x8
 158:	str	w0, [sp, #132]
 15c:	ldr	x0, [sp, #152]
 160:	add	x1, x0, #0x1
 164:	str	x1, [sp, #152]
 168:	ldrb	w0, [x0]
 16c:	and	x1, x0, #0xff
 170:	ldr	w0, [sp, #132]
 174:	lsl	x0, x1, x0
 178:	ldr	x1, [sp, #136]
 17c:	add	x0, x1, x0
 180:	str	x0, [sp, #136]
 184:	ldr	w0, [sp, #132]
 188:	add	w0, w0, #0x8
 18c:	str	w0, [sp, #132]
 190:	ldr	w1, [sp, #36]
 194:	ldr	x0, [sp, #136]
 198:	and	x0, x1, x0
 19c:	lsl	x0, x0, #2
 1a0:	ldr	x1, [sp, #48]
 1a4:	add	x0, x1, x0
 1a8:	ldr	w0, [x0]
 1ac:	str	w0, [sp, #24]
 1b0:	ldrb	w0, [sp, #25]
 1b4:	str	w0, [sp, #128]
 1b8:	ldr	w0, [sp, #128]
 1bc:	ldr	x1, [sp, #136]
 1c0:	lsr	x0, x1, x0
 1c4:	str	x0, [sp, #136]
 1c8:	ldr	w1, [sp, #132]
 1cc:	ldr	w0, [sp, #128]
 1d0:	sub	w0, w1, w0
 1d4:	str	w0, [sp, #132]
 1d8:	ldrb	w0, [sp, #24]
 1dc:	str	w0, [sp, #128]
 1e0:	ldr	w0, [sp, #128]
 1e4:	cmp	w0, #0x0
 1e8:	b.ne	208 <inflate_fast+0x208>  // b.any
 1ec:	ldrh	w2, [sp, #26]
 1f0:	ldr	x0, [sp, #144]
 1f4:	add	x1, x0, #0x1
 1f8:	str	x1, [sp, #144]
 1fc:	and	w1, w2, #0xff
 200:	strb	w1, [x0]
 204:	b	9f0 <inflate_fast+0x9f0>
 208:	ldr	w0, [sp, #128]
 20c:	and	w0, w0, #0x10
 210:	cmp	w0, #0x0
 214:	b.eq	960 <inflate_fast+0x960>  // b.none
 218:	ldrh	w0, [sp, #26]
 21c:	str	w0, [sp, #124]
 220:	ldr	w0, [sp, #128]
 224:	and	w0, w0, #0xf
 228:	str	w0, [sp, #128]
 22c:	ldr	w0, [sp, #128]
 230:	cmp	w0, #0x0
 234:	b.eq	2c4 <inflate_fast+0x2c4>  // b.none
 238:	ldr	w1, [sp, #132]
 23c:	ldr	w0, [sp, #128]
 240:	cmp	w1, w0
 244:	b.cs	27c <inflate_fast+0x27c>  // b.hs, b.nlast
 248:	ldr	x0, [sp, #152]
 24c:	add	x1, x0, #0x1
 250:	str	x1, [sp, #152]
 254:	ldrb	w0, [x0]
 258:	and	x1, x0, #0xff
 25c:	ldr	w0, [sp, #132]
 260:	lsl	x0, x1, x0
 264:	ldr	x1, [sp, #136]
 268:	add	x0, x1, x0
 26c:	str	x0, [sp, #136]
 270:	ldr	w0, [sp, #132]
 274:	add	w0, w0, #0x8
 278:	str	w0, [sp, #132]
 27c:	ldr	x0, [sp, #136]
 280:	mov	w2, w0
 284:	ldr	w0, [sp, #128]
 288:	mov	w1, #0xffffffff            	// #-1
 28c:	lsl	w0, w1, w0
 290:	mvn	w0, w0
 294:	and	w0, w2, w0
 298:	ldr	w1, [sp, #124]
 29c:	add	w0, w1, w0
 2a0:	str	w0, [sp, #124]
 2a4:	ldr	w0, [sp, #128]
 2a8:	ldr	x1, [sp, #136]
 2ac:	lsr	x0, x1, x0
 2b0:	str	x0, [sp, #136]
 2b4:	ldr	w1, [sp, #132]
 2b8:	ldr	w0, [sp, #128]
 2bc:	sub	w0, w1, w0
 2c0:	str	w0, [sp, #132]
 2c4:	ldr	w0, [sp, #132]
 2c8:	cmp	w0, #0xe
 2cc:	b.hi	338 <inflate_fast+0x338>  // b.pmore
 2d0:	ldr	x0, [sp, #152]
 2d4:	add	x1, x0, #0x1
 2d8:	str	x1, [sp, #152]
 2dc:	ldrb	w0, [x0]
 2e0:	and	x1, x0, #0xff
 2e4:	ldr	w0, [sp, #132]
 2e8:	lsl	x0, x1, x0
 2ec:	ldr	x1, [sp, #136]
 2f0:	add	x0, x1, x0
 2f4:	str	x0, [sp, #136]
 2f8:	ldr	w0, [sp, #132]
 2fc:	add	w0, w0, #0x8
 300:	str	w0, [sp, #132]
 304:	ldr	x0, [sp, #152]
 308:	add	x1, x0, #0x1
 30c:	str	x1, [sp, #152]
 310:	ldrb	w0, [x0]
 314:	and	x1, x0, #0xff
 318:	ldr	w0, [sp, #132]
 31c:	lsl	x0, x1, x0
 320:	ldr	x1, [sp, #136]
 324:	add	x0, x1, x0
 328:	str	x0, [sp, #136]
 32c:	ldr	w0, [sp, #132]
 330:	add	w0, w0, #0x8
 334:	str	w0, [sp, #132]
 338:	ldr	w1, [sp, #32]
 33c:	ldr	x0, [sp, #136]
 340:	and	x0, x1, x0
 344:	lsl	x0, x0, #2
 348:	ldr	x1, [sp, #40]
 34c:	add	x0, x1, x0
 350:	ldr	w0, [x0]
 354:	str	w0, [sp, #24]
 358:	ldrb	w0, [sp, #25]
 35c:	str	w0, [sp, #128]
 360:	ldr	w0, [sp, #128]
 364:	ldr	x1, [sp, #136]
 368:	lsr	x0, x1, x0
 36c:	str	x0, [sp, #136]
 370:	ldr	w1, [sp, #132]
 374:	ldr	w0, [sp, #128]
 378:	sub	w0, w1, w0
 37c:	str	w0, [sp, #132]
 380:	ldrb	w0, [sp, #24]
 384:	str	w0, [sp, #128]
 388:	ldr	w0, [sp, #128]
 38c:	and	w0, w0, #0x10
 390:	cmp	w0, #0x0
 394:	b.eq	8f0 <inflate_fast+0x8f0>  // b.none
 398:	ldrh	w0, [sp, #26]
 39c:	str	w0, [sp, #28]
 3a0:	ldr	w0, [sp, #128]
 3a4:	and	w0, w0, #0xf
 3a8:	str	w0, [sp, #128]
 3ac:	ldr	w1, [sp, #132]
 3b0:	ldr	w0, [sp, #128]
 3b4:	cmp	w1, w0
 3b8:	b.cs	434 <inflate_fast+0x434>  // b.hs, b.nlast
 3bc:	ldr	x0, [sp, #152]
 3c0:	add	x1, x0, #0x1
 3c4:	str	x1, [sp, #152]
 3c8:	ldrb	w0, [x0]
 3cc:	and	x1, x0, #0xff
 3d0:	ldr	w0, [sp, #132]
 3d4:	lsl	x0, x1, x0
 3d8:	ldr	x1, [sp, #136]
 3dc:	add	x0, x1, x0
 3e0:	str	x0, [sp, #136]
 3e4:	ldr	w0, [sp, #132]
 3e8:	add	w0, w0, #0x8
 3ec:	str	w0, [sp, #132]
 3f0:	ldr	w1, [sp, #132]
 3f4:	ldr	w0, [sp, #128]
 3f8:	cmp	w1, w0
 3fc:	b.cs	434 <inflate_fast+0x434>  // b.hs, b.nlast
 400:	ldr	x0, [sp, #152]
 404:	add	x1, x0, #0x1
 408:	str	x1, [sp, #152]
 40c:	ldrb	w0, [x0]
 410:	and	x1, x0, #0xff
 414:	ldr	w0, [sp, #132]
 418:	lsl	x0, x1, x0
 41c:	ldr	x1, [sp, #136]
 420:	add	x0, x1, x0
 424:	str	x0, [sp, #136]
 428:	ldr	w0, [sp, #132]
 42c:	add	w0, w0, #0x8
 430:	str	w0, [sp, #132]
 434:	ldr	x0, [sp, #136]
 438:	mov	w2, w0
 43c:	ldr	w0, [sp, #128]
 440:	mov	w1, #0xffffffff            	// #-1
 444:	lsl	w0, w1, w0
 448:	mvn	w0, w0
 44c:	and	w0, w2, w0
 450:	ldr	w1, [sp, #28]
 454:	add	w0, w1, w0
 458:	str	w0, [sp, #28]
 45c:	ldr	w0, [sp, #128]
 460:	ldr	x1, [sp, #136]
 464:	lsr	x0, x1, x0
 468:	str	x0, [sp, #136]
 46c:	ldr	w1, [sp, #132]
 470:	ldr	w0, [sp, #128]
 474:	sub	w0, w1, w0
 478:	str	w0, [sp, #132]
 47c:	ldr	x1, [sp, #144]
 480:	ldr	x0, [sp, #88]
 484:	sub	x0, x1, x0
 488:	str	w0, [sp, #128]
 48c:	ldr	w1, [sp, #28]
 490:	ldr	w0, [sp, #128]
 494:	cmp	w1, w0
 498:	b.ls	808 <inflate_fast+0x808>  // b.plast
 49c:	ldr	w1, [sp, #28]
 4a0:	ldr	w0, [sp, #128]
 4a4:	sub	w0, w1, w0
 4a8:	str	w0, [sp, #128]
 4ac:	ldr	w1, [sp, #128]
 4b0:	ldr	w0, [sp, #72]
 4b4:	cmp	w1, w0
 4b8:	b.ls	4ec <inflate_fast+0x4ec>  // b.plast
 4bc:	ldr	x0, [sp, #104]
 4c0:	ldr	w0, [x0, #7144]
 4c4:	cmp	w0, #0x0
 4c8:	b.eq	4ec <inflate_fast+0x4ec>  // b.none
 4cc:	ldr	x0, [sp, #8]
 4d0:	adrp	x1, 0 <inflate_fast>
 4d4:	add	x1, x1, #0x0
 4d8:	str	x1, [x0, #48]
 4dc:	ldr	x0, [sp, #104]
 4e0:	mov	w1, #0x3f51                	// #16209
 4e4:	str	w1, [x0, #8]
 4e8:	b	a10 <inflate_fast+0xa10>
 4ec:	ldr	x0, [sp, #56]
 4f0:	str	x0, [sp, #112]
 4f4:	ldr	w0, [sp, #68]
 4f8:	cmp	w0, #0x0
 4fc:	b.ne	58c <inflate_fast+0x58c>  // b.any
 500:	ldr	w1, [sp, #76]
 504:	ldr	w0, [sp, #128]
 508:	sub	w0, w1, w0
 50c:	mov	w0, w0
 510:	ldr	x1, [sp, #112]
 514:	add	x0, x1, x0
 518:	str	x0, [sp, #112]
 51c:	ldr	w1, [sp, #128]
 520:	ldr	w0, [sp, #124]
 524:	cmp	w1, w0
 528:	b.cs	7a0 <inflate_fast+0x7a0>  // b.hs, b.nlast
 52c:	ldr	w1, [sp, #124]
 530:	ldr	w0, [sp, #128]
 534:	sub	w0, w1, w0
 538:	str	w0, [sp, #124]
 53c:	ldr	x1, [sp, #112]
 540:	add	x0, x1, #0x1
 544:	str	x0, [sp, #112]
 548:	ldr	x0, [sp, #144]
 54c:	add	x2, x0, #0x1
 550:	str	x2, [sp, #144]
 554:	ldrb	w1, [x1]
 558:	strb	w1, [x0]
 55c:	ldr	w0, [sp, #128]
 560:	sub	w0, w0, #0x1
 564:	str	w0, [sp, #128]
 568:	ldr	w0, [sp, #128]
 56c:	cmp	w0, #0x0
 570:	b.ne	53c <inflate_fast+0x53c>  // b.any
 574:	ldr	w0, [sp, #28]
 578:	neg	x0, x0
 57c:	ldr	x1, [sp, #144]
 580:	add	x0, x1, x0
 584:	str	x0, [sp, #112]
 588:	b	7a0 <inflate_fast+0x7a0>
 58c:	ldr	w1, [sp, #68]
 590:	ldr	w0, [sp, #128]
 594:	cmp	w1, w0
 598:	b.cs	6a8 <inflate_fast+0x6a8>  // b.hs, b.nlast
 59c:	ldr	w1, [sp, #76]
 5a0:	ldr	w0, [sp, #68]
 5a4:	add	w1, w1, w0
 5a8:	ldr	w0, [sp, #128]
 5ac:	sub	w0, w1, w0
 5b0:	mov	w0, w0
 5b4:	ldr	x1, [sp, #112]
 5b8:	add	x0, x1, x0
 5bc:	str	x0, [sp, #112]
 5c0:	ldr	w1, [sp, #128]
 5c4:	ldr	w0, [sp, #68]
 5c8:	sub	w0, w1, w0
 5cc:	str	w0, [sp, #128]
 5d0:	ldr	w1, [sp, #128]
 5d4:	ldr	w0, [sp, #124]
 5d8:	cmp	w1, w0
 5dc:	b.cs	7a0 <inflate_fast+0x7a0>  // b.hs, b.nlast
 5e0:	ldr	w1, [sp, #124]
 5e4:	ldr	w0, [sp, #128]
 5e8:	sub	w0, w1, w0
 5ec:	str	w0, [sp, #124]
 5f0:	ldr	x1, [sp, #112]
 5f4:	add	x0, x1, #0x1
 5f8:	str	x0, [sp, #112]
 5fc:	ldr	x0, [sp, #144]
 600:	add	x2, x0, #0x1
 604:	str	x2, [sp, #144]
 608:	ldrb	w1, [x1]
 60c:	strb	w1, [x0]
 610:	ldr	w0, [sp, #128]
 614:	sub	w0, w0, #0x1
 618:	str	w0, [sp, #128]
 61c:	ldr	w0, [sp, #128]
 620:	cmp	w0, #0x0
 624:	b.ne	5f0 <inflate_fast+0x5f0>  // b.any
 628:	ldr	x0, [sp, #56]
 62c:	str	x0, [sp, #112]
 630:	ldr	w1, [sp, #68]
 634:	ldr	w0, [sp, #124]
 638:	cmp	w1, w0
 63c:	b.cs	7a0 <inflate_fast+0x7a0>  // b.hs, b.nlast
 640:	ldr	w0, [sp, #68]
 644:	str	w0, [sp, #128]
 648:	ldr	w1, [sp, #124]
 64c:	ldr	w0, [sp, #128]
 650:	sub	w0, w1, w0
 654:	str	w0, [sp, #124]
 658:	ldr	x1, [sp, #112]
 65c:	add	x0, x1, #0x1
 660:	str	x0, [sp, #112]
 664:	ldr	x0, [sp, #144]
 668:	add	x2, x0, #0x1
 66c:	str	x2, [sp, #144]
 670:	ldrb	w1, [x1]
 674:	strb	w1, [x0]
 678:	ldr	w0, [sp, #128]
 67c:	sub	w0, w0, #0x1
 680:	str	w0, [sp, #128]
 684:	ldr	w0, [sp, #128]
 688:	cmp	w0, #0x0
 68c:	b.ne	658 <inflate_fast+0x658>  // b.any
 690:	ldr	w0, [sp, #28]
 694:	neg	x0, x0
 698:	ldr	x1, [sp, #144]
 69c:	add	x0, x1, x0
 6a0:	str	x0, [sp, #112]
 6a4:	b	7a0 <inflate_fast+0x7a0>
 6a8:	ldr	w1, [sp, #68]
 6ac:	ldr	w0, [sp, #128]
 6b0:	sub	w0, w1, w0
 6b4:	mov	w0, w0
 6b8:	ldr	x1, [sp, #112]
 6bc:	add	x0, x1, x0
 6c0:	str	x0, [sp, #112]
 6c4:	ldr	w1, [sp, #128]
 6c8:	ldr	w0, [sp, #124]
 6cc:	cmp	w1, w0
 6d0:	b.cs	7a0 <inflate_fast+0x7a0>  // b.hs, b.nlast
 6d4:	ldr	w1, [sp, #124]
 6d8:	ldr	w0, [sp, #128]
 6dc:	sub	w0, w1, w0
 6e0:	str	w0, [sp, #124]
 6e4:	ldr	x1, [sp, #112]
 6e8:	add	x0, x1, #0x1
 6ec:	str	x0, [sp, #112]
 6f0:	ldr	x0, [sp, #144]
 6f4:	add	x2, x0, #0x1
 6f8:	str	x2, [sp, #144]
 6fc:	ldrb	w1, [x1]
 700:	strb	w1, [x0]
 704:	ldr	w0, [sp, #128]
 708:	sub	w0, w0, #0x1
 70c:	str	w0, [sp, #128]
 710:	ldr	w0, [sp, #128]
 714:	cmp	w0, #0x0
 718:	b.ne	6e4 <inflate_fast+0x6e4>  // b.any
 71c:	ldr	w0, [sp, #28]
 720:	neg	x0, x0
 724:	ldr	x1, [sp, #144]
 728:	add	x0, x1, x0
 72c:	str	x0, [sp, #112]
 730:	b	7a0 <inflate_fast+0x7a0>
 734:	ldr	x1, [sp, #112]
 738:	add	x0, x1, #0x1
 73c:	str	x0, [sp, #112]
 740:	ldr	x0, [sp, #144]
 744:	add	x2, x0, #0x1
 748:	str	x2, [sp, #144]
 74c:	ldrb	w1, [x1]
 750:	strb	w1, [x0]
 754:	ldr	x1, [sp, #112]
 758:	add	x0, x1, #0x1
 75c:	str	x0, [sp, #112]
 760:	ldr	x0, [sp, #144]
 764:	add	x2, x0, #0x1
 768:	str	x2, [sp, #144]
 76c:	ldrb	w1, [x1]
 770:	strb	w1, [x0]
 774:	ldr	x1, [sp, #112]
 778:	add	x0, x1, #0x1
 77c:	str	x0, [sp, #112]
 780:	ldr	x0, [sp, #144]
 784:	add	x2, x0, #0x1
 788:	str	x2, [sp, #144]
 78c:	ldrb	w1, [x1]
 790:	strb	w1, [x0]
 794:	ldr	w0, [sp, #124]
 798:	sub	w0, w0, #0x3
 79c:	str	w0, [sp, #124]
 7a0:	ldr	w0, [sp, #124]
 7a4:	cmp	w0, #0x2
 7a8:	b.hi	734 <inflate_fast+0x734>  // b.pmore
 7ac:	ldr	w0, [sp, #124]
 7b0:	cmp	w0, #0x0
 7b4:	b.eq	9f0 <inflate_fast+0x9f0>  // b.none
 7b8:	ldr	x1, [sp, #112]
 7bc:	add	x0, x1, #0x1
 7c0:	str	x0, [sp, #112]
 7c4:	ldr	x0, [sp, #144]
 7c8:	add	x2, x0, #0x1
 7cc:	str	x2, [sp, #144]
 7d0:	ldrb	w1, [x1]
 7d4:	strb	w1, [x0]
 7d8:	ldr	w0, [sp, #124]
 7dc:	cmp	w0, #0x1
 7e0:	b.ls	9f0 <inflate_fast+0x9f0>  // b.plast
 7e4:	ldr	x1, [sp, #112]
 7e8:	add	x0, x1, #0x1
 7ec:	str	x0, [sp, #112]
 7f0:	ldr	x0, [sp, #144]
 7f4:	add	x2, x0, #0x1
 7f8:	str	x2, [sp, #144]
 7fc:	ldrb	w1, [x1]
 800:	strb	w1, [x0]
 804:	b	9f0 <inflate_fast+0x9f0>
 808:	ldr	w0, [sp, #28]
 80c:	neg	x0, x0
 810:	ldr	x1, [sp, #144]
 814:	add	x0, x1, x0
 818:	str	x0, [sp, #112]
 81c:	ldr	x1, [sp, #112]
 820:	add	x0, x1, #0x1
 824:	str	x0, [sp, #112]
 828:	ldr	x0, [sp, #144]
 82c:	add	x2, x0, #0x1
 830:	str	x2, [sp, #144]
 834:	ldrb	w1, [x1]
 838:	strb	w1, [x0]
 83c:	ldr	x1, [sp, #112]
 840:	add	x0, x1, #0x1
 844:	str	x0, [sp, #112]
 848:	ldr	x0, [sp, #144]
 84c:	add	x2, x0, #0x1
 850:	str	x2, [sp, #144]
 854:	ldrb	w1, [x1]
 858:	strb	w1, [x0]
 85c:	ldr	x1, [sp, #112]
 860:	add	x0, x1, #0x1
 864:	str	x0, [sp, #112]
 868:	ldr	x0, [sp, #144]
 86c:	add	x2, x0, #0x1
 870:	str	x2, [sp, #144]
 874:	ldrb	w1, [x1]
 878:	strb	w1, [x0]
 87c:	ldr	w0, [sp, #124]
 880:	sub	w0, w0, #0x3
 884:	str	w0, [sp, #124]
 888:	ldr	w0, [sp, #124]
 88c:	cmp	w0, #0x2
 890:	b.hi	81c <inflate_fast+0x81c>  // b.pmore
 894:	ldr	w0, [sp, #124]
 898:	cmp	w0, #0x0
 89c:	b.eq	9f0 <inflate_fast+0x9f0>  // b.none
 8a0:	ldr	x1, [sp, #112]
 8a4:	add	x0, x1, #0x1
 8a8:	str	x0, [sp, #112]
 8ac:	ldr	x0, [sp, #144]
 8b0:	add	x2, x0, #0x1
 8b4:	str	x2, [sp, #144]
 8b8:	ldrb	w1, [x1]
 8bc:	strb	w1, [x0]
 8c0:	ldr	w0, [sp, #124]
 8c4:	cmp	w0, #0x1
 8c8:	b.ls	9f0 <inflate_fast+0x9f0>  // b.plast
 8cc:	ldr	x1, [sp, #112]
 8d0:	add	x0, x1, #0x1
 8d4:	str	x0, [sp, #112]
 8d8:	ldr	x0, [sp, #144]
 8dc:	add	x2, x0, #0x1
 8e0:	str	x2, [sp, #144]
 8e4:	ldrb	w1, [x1]
 8e8:	strb	w1, [x0]
 8ec:	b	9f0 <inflate_fast+0x9f0>
 8f0:	ldr	w0, [sp, #128]
 8f4:	and	w0, w0, #0x40
 8f8:	cmp	w0, #0x0
 8fc:	b.ne	940 <inflate_fast+0x940>  // b.any
 900:	ldrh	w0, [sp, #26]
 904:	and	x1, x0, #0xffff
 908:	ldr	w0, [sp, #128]
 90c:	mov	w2, #0x1                   	// #1
 910:	lsl	w0, w2, w0
 914:	sub	w0, w0, #0x1
 918:	mov	w2, w0
 91c:	ldr	x0, [sp, #136]
 920:	and	x0, x2, x0
 924:	add	x0, x1, x0
 928:	lsl	x0, x0, #2
 92c:	ldr	x1, [sp, #40]
 930:	add	x0, x1, x0
 934:	ldr	w0, [x0]
 938:	str	w0, [sp, #24]
 93c:	b	358 <inflate_fast+0x358>
 940:	ldr	x0, [sp, #8]
 944:	adrp	x1, 0 <inflate_fast>
 948:	add	x1, x1, #0x0
 94c:	str	x1, [x0, #48]
 950:	ldr	x0, [sp, #104]
 954:	mov	w1, #0x3f51                	// #16209
 958:	str	w1, [x0, #8]
 95c:	b	a10 <inflate_fast+0xa10>
 960:	ldr	w0, [sp, #128]
 964:	and	w0, w0, #0x40
 968:	cmp	w0, #0x0
 96c:	b.ne	9b0 <inflate_fast+0x9b0>  // b.any
 970:	ldrh	w0, [sp, #26]
 974:	and	x1, x0, #0xffff
 978:	ldr	w0, [sp, #128]
 97c:	mov	w2, #0x1                   	// #1
 980:	lsl	w0, w2, w0
 984:	sub	w0, w0, #0x1
 988:	mov	w2, w0
 98c:	ldr	x0, [sp, #136]
 990:	and	x0, x2, x0
 994:	add	x0, x1, x0
 998:	lsl	x0, x0, #2
 99c:	ldr	x1, [sp, #48]
 9a0:	add	x0, x1, x0
 9a4:	ldr	w0, [x0]
 9a8:	str	w0, [sp, #24]
 9ac:	b	1b0 <inflate_fast+0x1b0>
 9b0:	ldr	w0, [sp, #128]
 9b4:	and	w0, w0, #0x20
 9b8:	cmp	w0, #0x0
 9bc:	b.eq	9d0 <inflate_fast+0x9d0>  // b.none
 9c0:	ldr	x0, [sp, #104]
 9c4:	mov	w1, #0x3f3f                	// #16191
 9c8:	str	w1, [x0, #8]
 9cc:	b	a10 <inflate_fast+0xa10>
 9d0:	ldr	x0, [sp, #8]
 9d4:	adrp	x1, 0 <inflate_fast>
 9d8:	add	x1, x1, #0x0
 9dc:	str	x1, [x0, #48]
 9e0:	ldr	x0, [sp, #104]
 9e4:	mov	w1, #0x3f51                	// #16209
 9e8:	str	w1, [x0, #8]
 9ec:	b	a10 <inflate_fast+0xa10>
 9f0:	ldr	x1, [sp, #152]
 9f4:	ldr	x0, [sp, #96]
 9f8:	cmp	x1, x0
 9fc:	b.cs	a10 <inflate_fast+0xa10>  // b.hs, b.nlast
 a00:	ldr	x1, [sp, #144]
 a04:	ldr	x0, [sp, #80]
 a08:	cmp	x1, x0
 a0c:	b.cc	11c <inflate_fast+0x11c>  // b.lo, b.ul, b.last
 a10:	ldr	w0, [sp, #132]
 a14:	lsr	w0, w0, #3
 a18:	str	w0, [sp, #124]
 a1c:	ldr	w0, [sp, #124]
 a20:	neg	x0, x0
 a24:	ldr	x1, [sp, #152]
 a28:	add	x0, x1, x0
 a2c:	str	x0, [sp, #152]
 a30:	ldr	w0, [sp, #124]
 a34:	lsl	w0, w0, #3
 a38:	ldr	w1, [sp, #132]
 a3c:	sub	w0, w1, w0
 a40:	str	w0, [sp, #132]
 a44:	ldr	w0, [sp, #132]
 a48:	mov	w1, #0x1                   	// #1
 a4c:	lsl	w0, w1, w0
 a50:	sub	w0, w0, #0x1
 a54:	mov	w0, w0
 a58:	ldr	x1, [sp, #136]
 a5c:	and	x0, x1, x0
 a60:	str	x0, [sp, #136]
 a64:	ldr	x0, [sp, #8]
 a68:	ldr	x1, [sp, #152]
 a6c:	str	x1, [x0]
 a70:	ldr	x0, [sp, #8]
 a74:	ldr	x1, [sp, #144]
 a78:	str	x1, [x0, #24]
 a7c:	ldr	x1, [sp, #152]
 a80:	ldr	x0, [sp, #96]
 a84:	cmp	x1, x0
 a88:	b.cs	aa0 <inflate_fast+0xaa0>  // b.hs, b.nlast
 a8c:	ldr	x1, [sp, #96]
 a90:	ldr	x0, [sp, #152]
 a94:	sub	x0, x1, x0
 a98:	add	w0, w0, #0x5
 a9c:	b	ab8 <inflate_fast+0xab8>
 aa0:	ldr	x1, [sp, #152]
 aa4:	ldr	x0, [sp, #96]
 aa8:	sub	x0, x1, x0
 aac:	mov	w1, w0
 ab0:	mov	w0, #0x5                   	// #5
 ab4:	sub	w0, w0, w1
 ab8:	ldr	x1, [sp, #8]
 abc:	str	w0, [x1, #8]
 ac0:	ldr	x1, [sp, #144]
 ac4:	ldr	x0, [sp, #80]
 ac8:	cmp	x1, x0
 acc:	b.cs	ae4 <inflate_fast+0xae4>  // b.hs, b.nlast
 ad0:	ldr	x1, [sp, #80]
 ad4:	ldr	x0, [sp, #144]
 ad8:	sub	x0, x1, x0
 adc:	add	w0, w0, #0x101
 ae0:	b	afc <inflate_fast+0xafc>
 ae4:	ldr	x1, [sp, #144]
 ae8:	ldr	x0, [sp, #80]
 aec:	sub	x0, x1, x0
 af0:	mov	w1, w0
 af4:	mov	w0, #0x101                 	// #257
 af8:	sub	w0, w0, w1
 afc:	ldr	x1, [sp, #8]
 b00:	str	w0, [x1, #32]
 b04:	ldr	x0, [sp, #104]
 b08:	ldr	x1, [sp, #136]
 b0c:	str	x1, [x0, #80]
 b10:	ldr	x0, [sp, #104]
 b14:	ldr	w1, [sp, #132]
 b18:	str	w1, [x0, #88]
 b1c:	nop
 b20:	add	sp, sp, #0xa0
 b24:	ret

inflate.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflateStateCheck>:
       0:	sub	sp, sp, #0x20
       4:	str	x0, [sp, #8]
       8:	ldr	x0, [sp, #8]
       c:	cmp	x0, #0x0
      10:	b.eq	34 <inflateStateCheck+0x34>  // b.none
      14:	ldr	x0, [sp, #8]
      18:	ldr	x0, [x0, #64]
      1c:	cmp	x0, #0x0
      20:	b.eq	34 <inflateStateCheck+0x34>  // b.none
      24:	ldr	x0, [sp, #8]
      28:	ldr	x0, [x0, #72]
      2c:	cmp	x0, #0x0
      30:	b.ne	3c <inflateStateCheck+0x3c>  // b.any
      34:	mov	w0, #0x1                   	// #1
      38:	b	9c <inflateStateCheck+0x9c>
      3c:	ldr	x0, [sp, #8]
      40:	ldr	x0, [x0, #56]
      44:	str	x0, [sp, #24]
      48:	ldr	x0, [sp, #24]
      4c:	cmp	x0, #0x0
      50:	b.eq	90 <inflateStateCheck+0x90>  // b.none
      54:	ldr	x0, [sp, #24]
      58:	ldr	x0, [x0]
      5c:	ldr	x1, [sp, #8]
      60:	cmp	x1, x0
      64:	b.ne	90 <inflateStateCheck+0x90>  // b.any
      68:	ldr	x0, [sp, #24]
      6c:	ldr	w1, [x0, #8]
      70:	mov	w0, #0x3f33                	// #16179
      74:	cmp	w1, w0
      78:	b.ls	90 <inflateStateCheck+0x90>  // b.plast
      7c:	ldr	x0, [sp, #24]
      80:	ldr	w1, [x0, #8]
      84:	mov	w0, #0x3f53                	// #16211
      88:	cmp	w1, w0
      8c:	b.ls	98 <inflateStateCheck+0x98>  // b.plast
      90:	mov	w0, #0x1                   	// #1
      94:	b	9c <inflateStateCheck+0x9c>
      98:	mov	w0, #0x0                   	// #0
      9c:	add	sp, sp, #0x20
      a0:	ret

00000000000000a4 <inflateResetKeep>:
      a4:	stp	x29, x30, [sp, #-48]!
      a8:	mov	x29, sp
      ac:	str	x0, [sp, #24]
      b0:	ldr	x0, [sp, #24]
      b4:	bl	0 <inflateStateCheck>
      b8:	cmp	w0, #0x0
      bc:	b.eq	c8 <inflateResetKeep+0x24>  // b.none
      c0:	mov	w0, #0xfffffffe            	// #-2
      c4:	b	1b8 <inflateResetKeep+0x114>
      c8:	ldr	x0, [sp, #24]
      cc:	ldr	x0, [x0, #56]
      d0:	str	x0, [sp, #40]
      d4:	ldr	x0, [sp, #40]
      d8:	str	xzr, [x0, #40]
      dc:	ldr	x0, [sp, #40]
      e0:	ldr	x1, [x0, #40]
      e4:	ldr	x0, [sp, #24]
      e8:	str	x1, [x0, #40]
      ec:	ldr	x0, [sp, #24]
      f0:	ldr	x1, [x0, #40]
      f4:	ldr	x0, [sp, #24]
      f8:	str	x1, [x0, #16]
      fc:	ldr	x0, [sp, #24]
     100:	str	xzr, [x0, #48]
     104:	ldr	x0, [sp, #40]
     108:	ldr	w0, [x0, #16]
     10c:	cmp	w0, #0x0
     110:	b.eq	12c <inflateResetKeep+0x88>  // b.none
     114:	ldr	x0, [sp, #40]
     118:	ldr	w0, [x0, #16]
     11c:	mov	w0, w0
     120:	and	x1, x0, #0x1
     124:	ldr	x0, [sp, #24]
     128:	str	x1, [x0, #96]
     12c:	ldr	x0, [sp, #40]
     130:	mov	w1, #0x3f34                	// #16180
     134:	str	w1, [x0, #8]
     138:	ldr	x0, [sp, #40]
     13c:	str	wzr, [x0, #12]
     140:	ldr	x0, [sp, #40]
     144:	str	wzr, [x0, #20]
     148:	ldr	x0, [sp, #40]
     14c:	mov	w1, #0x8000                	// #32768
     150:	str	w1, [x0, #28]
     154:	ldr	x0, [sp, #40]
     158:	str	xzr, [x0, #48]
     15c:	ldr	x0, [sp, #40]
     160:	str	xzr, [x0, #80]
     164:	ldr	x0, [sp, #40]
     168:	str	wzr, [x0, #88]
     16c:	ldr	x0, [sp, #40]
     170:	add	x1, x0, #0x558
     174:	ldr	x0, [sp, #40]
     178:	str	x1, [x0, #144]
     17c:	ldr	x0, [sp, #40]
     180:	ldr	x1, [x0, #144]
     184:	ldr	x0, [sp, #40]
     188:	str	x1, [x0, #112]
     18c:	ldr	x0, [sp, #40]
     190:	ldr	x1, [x0, #112]
     194:	ldr	x0, [sp, #40]
     198:	str	x1, [x0, #104]
     19c:	ldr	x0, [sp, #40]
     1a0:	mov	w1, #0x1                   	// #1
     1a4:	str	w1, [x0, #7144]
     1a8:	ldr	x0, [sp, #40]
     1ac:	mov	w1, #0xffffffff            	// #-1
     1b0:	str	w1, [x0, #7148]
     1b4:	mov	w0, #0x0                   	// #0
     1b8:	ldp	x29, x30, [sp], #48
     1bc:	ret

00000000000001c0 <inflateReset>:
     1c0:	stp	x29, x30, [sp, #-48]!
     1c4:	mov	x29, sp
     1c8:	str	x0, [sp, #24]
     1cc:	ldr	x0, [sp, #24]
     1d0:	bl	0 <inflateStateCheck>
     1d4:	cmp	w0, #0x0
     1d8:	b.eq	1e4 <inflateReset+0x24>  // b.none
     1dc:	mov	w0, #0xfffffffe            	// #-2
     1e0:	b	210 <inflateReset+0x50>
     1e4:	ldr	x0, [sp, #24]
     1e8:	ldr	x0, [x0, #56]
     1ec:	str	x0, [sp, #40]
     1f0:	ldr	x0, [sp, #40]
     1f4:	str	wzr, [x0, #60]
     1f8:	ldr	x0, [sp, #40]
     1fc:	str	wzr, [x0, #64]
     200:	ldr	x0, [sp, #40]
     204:	str	wzr, [x0, #68]
     208:	ldr	x0, [sp, #24]
     20c:	bl	a4 <inflateResetKeep>
     210:	ldp	x29, x30, [sp], #48
     214:	ret

0000000000000218 <inflateReset2>:
     218:	stp	x29, x30, [sp, #-48]!
     21c:	mov	x29, sp
     220:	str	x0, [sp, #24]
     224:	str	w1, [sp, #20]
     228:	ldr	x0, [sp, #24]
     22c:	bl	0 <inflateStateCheck>
     230:	cmp	w0, #0x0
     234:	b.eq	240 <inflateReset2+0x28>  // b.none
     238:	mov	w0, #0xfffffffe            	// #-2
     23c:	b	330 <inflateReset2+0x118>
     240:	ldr	x0, [sp, #24]
     244:	ldr	x0, [x0, #56]
     248:	str	x0, [sp, #32]
     24c:	ldr	w0, [sp, #20]
     250:	cmp	w0, #0x0
     254:	b.ge	26c <inflateReset2+0x54>  // b.tcont
     258:	str	wzr, [sp, #44]
     25c:	ldr	w0, [sp, #20]
     260:	neg	w0, w0
     264:	str	w0, [sp, #20]
     268:	b	294 <inflateReset2+0x7c>
     26c:	ldr	w0, [sp, #20]
     270:	asr	w0, w0, #4
     274:	add	w0, w0, #0x5
     278:	str	w0, [sp, #44]
     27c:	ldr	w0, [sp, #20]
     280:	cmp	w0, #0x2f
     284:	b.gt	294 <inflateReset2+0x7c>
     288:	ldr	w0, [sp, #20]
     28c:	and	w0, w0, #0xf
     290:	str	w0, [sp, #20]
     294:	ldr	w0, [sp, #20]
     298:	cmp	w0, #0x0
     29c:	b.eq	2c0 <inflateReset2+0xa8>  // b.none
     2a0:	ldr	w0, [sp, #20]
     2a4:	cmp	w0, #0x7
     2a8:	b.le	2b8 <inflateReset2+0xa0>
     2ac:	ldr	w0, [sp, #20]
     2b0:	cmp	w0, #0xf
     2b4:	b.le	2c0 <inflateReset2+0xa8>
     2b8:	mov	w0, #0xfffffffe            	// #-2
     2bc:	b	330 <inflateReset2+0x118>
     2c0:	ldr	x0, [sp, #32]
     2c4:	ldr	x0, [x0, #72]
     2c8:	cmp	x0, #0x0
     2cc:	b.eq	310 <inflateReset2+0xf8>  // b.none
     2d0:	ldr	x0, [sp, #32]
     2d4:	ldr	w1, [x0, #56]
     2d8:	ldr	w0, [sp, #20]
     2dc:	cmp	w1, w0
     2e0:	b.eq	310 <inflateReset2+0xf8>  // b.none
     2e4:	ldr	x0, [sp, #24]
     2e8:	ldr	x2, [x0, #72]
     2ec:	ldr	x0, [sp, #24]
     2f0:	ldr	x3, [x0, #80]
     2f4:	ldr	x0, [sp, #32]
     2f8:	ldr	x0, [x0, #72]
     2fc:	mov	x1, x0
     300:	mov	x0, x3
     304:	blr	x2
     308:	ldr	x0, [sp, #32]
     30c:	str	xzr, [x0, #72]
     310:	ldr	x0, [sp, #32]
     314:	ldr	w1, [sp, #44]
     318:	str	w1, [x0, #16]
     31c:	ldr	w1, [sp, #20]
     320:	ldr	x0, [sp, #32]
     324:	str	w1, [x0, #56]
     328:	ldr	x0, [sp, #24]
     32c:	bl	1c0 <inflateReset>
     330:	ldp	x29, x30, [sp], #48
     334:	ret

0000000000000338 <inflateInit2_>:
     338:	stp	x29, x30, [sp, #-64]!
     33c:	mov	x29, sp
     340:	str	x0, [sp, #40]
     344:	str	w1, [sp, #36]
     348:	str	x2, [sp, #24]
     34c:	str	w3, [sp, #32]
     350:	ldr	x0, [sp, #24]
     354:	cmp	x0, #0x0
     358:	b.eq	37c <inflateInit2_+0x44>  // b.none
     35c:	ldr	x0, [sp, #24]
     360:	ldrb	w1, [x0]
     364:	mov	w0, #0x31                  	// #49
     368:	cmp	w1, w0
     36c:	b.ne	37c <inflateInit2_+0x44>  // b.any
     370:	ldr	w0, [sp, #32]
     374:	cmp	w0, #0x70
     378:	b.eq	384 <inflateInit2_+0x4c>  // b.none
     37c:	mov	w0, #0xfffffffa            	// #-6
     380:	b	488 <inflateInit2_+0x150>
     384:	ldr	x0, [sp, #40]
     388:	cmp	x0, #0x0
     38c:	b.ne	398 <inflateInit2_+0x60>  // b.any
     390:	mov	w0, #0xfffffffe            	// #-2
     394:	b	488 <inflateInit2_+0x150>
     398:	ldr	x0, [sp, #40]
     39c:	str	xzr, [x0, #48]
     3a0:	ldr	x0, [sp, #40]
     3a4:	ldr	x0, [x0, #64]
     3a8:	cmp	x0, #0x0
     3ac:	b.ne	3c8 <inflateInit2_+0x90>  // b.any
     3b0:	ldr	x0, [sp, #40]
     3b4:	adrp	x1, 0 <zcalloc>
     3b8:	add	x1, x1, #0x0
     3bc:	str	x1, [x0, #64]
     3c0:	ldr	x0, [sp, #40]
     3c4:	str	xzr, [x0, #80]
     3c8:	ldr	x0, [sp, #40]
     3cc:	ldr	x0, [x0, #72]
     3d0:	cmp	x0, #0x0
     3d4:	b.ne	3e8 <inflateInit2_+0xb0>  // b.any
     3d8:	ldr	x0, [sp, #40]
     3dc:	adrp	x1, 0 <zcfree>
     3e0:	add	x1, x1, #0x0
     3e4:	str	x1, [x0, #72]
     3e8:	ldr	x0, [sp, #40]
     3ec:	ldr	x3, [x0, #64]
     3f0:	ldr	x0, [sp, #40]
     3f4:	ldr	x0, [x0, #80]
     3f8:	mov	w2, #0x1bf8                	// #7160
     3fc:	mov	w1, #0x1                   	// #1
     400:	blr	x3
     404:	str	x0, [sp, #56]
     408:	ldr	x0, [sp, #56]
     40c:	cmp	x0, #0x0
     410:	b.ne	41c <inflateInit2_+0xe4>  // b.any
     414:	mov	w0, #0xfffffffc            	// #-4
     418:	b	488 <inflateInit2_+0x150>
     41c:	ldr	x0, [sp, #40]
     420:	ldr	x1, [sp, #56]
     424:	str	x1, [x0, #56]
     428:	ldr	x0, [sp, #56]
     42c:	ldr	x1, [sp, #40]
     430:	str	x1, [x0]
     434:	ldr	x0, [sp, #56]
     438:	str	xzr, [x0, #72]
     43c:	ldr	x0, [sp, #56]
     440:	mov	w1, #0x3f34                	// #16180
     444:	str	w1, [x0, #8]
     448:	ldr	w1, [sp, #36]
     44c:	ldr	x0, [sp, #40]
     450:	bl	218 <inflateReset2>
     454:	str	w0, [sp, #52]
     458:	ldr	w0, [sp, #52]
     45c:	cmp	w0, #0x0
     460:	b.eq	484 <inflateInit2_+0x14c>  // b.none
     464:	ldr	x0, [sp, #40]
     468:	ldr	x2, [x0, #72]
     46c:	ldr	x0, [sp, #40]
     470:	ldr	x0, [x0, #80]
     474:	ldr	x1, [sp, #56]
     478:	blr	x2
     47c:	ldr	x0, [sp, #40]
     480:	str	xzr, [x0, #56]
     484:	ldr	w0, [sp, #52]
     488:	ldp	x29, x30, [sp], #64
     48c:	ret

0000000000000490 <inflateInit_>:
     490:	stp	x29, x30, [sp, #-48]!
     494:	mov	x29, sp
     498:	str	x0, [sp, #40]
     49c:	str	x1, [sp, #32]
     4a0:	str	w2, [sp, #28]
     4a4:	ldr	w3, [sp, #28]
     4a8:	ldr	x2, [sp, #32]
     4ac:	mov	w1, #0xf                   	// #15
     4b0:	ldr	x0, [sp, #40]
     4b4:	bl	338 <inflateInit2_>
     4b8:	ldp	x29, x30, [sp], #48
     4bc:	ret

00000000000004c0 <inflatePrime>:
     4c0:	stp	x29, x30, [sp, #-48]!
     4c4:	mov	x29, sp
     4c8:	str	x0, [sp, #24]
     4cc:	str	w1, [sp, #20]
     4d0:	str	w2, [sp, #16]
     4d4:	ldr	x0, [sp, #24]
     4d8:	bl	0 <inflateStateCheck>
     4dc:	cmp	w0, #0x0
     4e0:	b.eq	4ec <inflatePrime+0x2c>  // b.none
     4e4:	mov	w0, #0xfffffffe            	// #-2
     4e8:	b	5ac <inflatePrime+0xec>
     4ec:	ldr	x0, [sp, #24]
     4f0:	ldr	x0, [x0, #56]
     4f4:	str	x0, [sp, #40]
     4f8:	ldr	w0, [sp, #20]
     4fc:	cmp	w0, #0x0
     500:	b.ge	51c <inflatePrime+0x5c>  // b.tcont
     504:	ldr	x0, [sp, #40]
     508:	str	xzr, [x0, #80]
     50c:	ldr	x0, [sp, #40]
     510:	str	wzr, [x0, #88]
     514:	mov	w0, #0x0                   	// #0
     518:	b	5ac <inflatePrime+0xec>
     51c:	ldr	w0, [sp, #20]
     520:	cmp	w0, #0x10
     524:	b.gt	540 <inflatePrime+0x80>
     528:	ldr	x0, [sp, #40]
     52c:	ldr	w1, [x0, #88]
     530:	ldr	w0, [sp, #20]
     534:	add	w0, w1, w0
     538:	cmp	w0, #0x20
     53c:	b.ls	548 <inflatePrime+0x88>  // b.plast
     540:	mov	w0, #0xfffffffe            	// #-2
     544:	b	5ac <inflatePrime+0xec>
     548:	ldr	w0, [sp, #20]
     54c:	mov	x1, #0x1                   	// #1
     550:	lsl	x0, x1, x0
     554:	sub	w0, w0, #0x1
     558:	mov	w1, w0
     55c:	ldr	w0, [sp, #16]
     560:	and	w0, w0, w1
     564:	str	w0, [sp, #16]
     568:	ldr	x0, [sp, #40]
     56c:	ldr	x1, [x0, #80]
     570:	ldr	w2, [sp, #16]
     574:	ldr	x0, [sp, #40]
     578:	ldr	w0, [x0, #88]
     57c:	lsl	w0, w2, w0
     580:	mov	w0, w0
     584:	add	x1, x1, x0
     588:	ldr	x0, [sp, #40]
     58c:	str	x1, [x0, #80]
     590:	ldr	x0, [sp, #40]
     594:	ldr	w1, [x0, #88]
     598:	ldr	w0, [sp, #20]
     59c:	add	w1, w1, w0
     5a0:	ldr	x0, [sp, #40]
     5a4:	str	w1, [x0, #88]
     5a8:	mov	w0, #0x0                   	// #0
     5ac:	ldp	x29, x30, [sp], #48
     5b0:	ret

00000000000005b4 <fixedtables>:
     5b4:	sub	sp, sp, #0x10
     5b8:	str	x0, [sp, #8]
     5bc:	ldr	x0, [sp, #8]
     5c0:	adrp	x1, 0 <inflateStateCheck>
     5c4:	add	x1, x1, #0x0
     5c8:	str	x1, [x0, #104]
     5cc:	ldr	x0, [sp, #8]
     5d0:	mov	w1, #0x9                   	// #9
     5d4:	str	w1, [x0, #120]
     5d8:	ldr	x0, [sp, #8]
     5dc:	adrp	x1, 0 <inflateStateCheck>
     5e0:	add	x1, x1, #0x0
     5e4:	str	x1, [x0, #112]
     5e8:	ldr	x0, [sp, #8]
     5ec:	mov	w1, #0x5                   	// #5
     5f0:	str	w1, [x0, #124]
     5f4:	nop
     5f8:	add	sp, sp, #0x10
     5fc:	ret

0000000000000600 <updatewindow>:
     600:	stp	x29, x30, [sp, #-64]!
     604:	mov	x29, sp
     608:	str	x0, [sp, #40]
     60c:	str	x1, [sp, #32]
     610:	str	w2, [sp, #28]
     614:	ldr	x0, [sp, #40]
     618:	ldr	x0, [x0, #56]
     61c:	str	x0, [sp, #48]
     620:	ldr	x0, [sp, #48]
     624:	ldr	x0, [x0, #72]
     628:	cmp	x0, #0x0
     62c:	b.ne	684 <updatewindow+0x84>  // b.any
     630:	ldr	x0, [sp, #40]
     634:	ldr	x3, [x0, #64]
     638:	ldr	x0, [sp, #40]
     63c:	ldr	x4, [x0, #80]
     640:	ldr	x0, [sp, #48]
     644:	ldr	w0, [x0, #56]
     648:	mov	w1, #0x1                   	// #1
     64c:	lsl	w0, w1, w0
     650:	mov	w2, #0x1                   	// #1
     654:	mov	w1, w0
     658:	mov	x0, x4
     65c:	blr	x3
     660:	mov	x1, x0
     664:	ldr	x0, [sp, #48]
     668:	str	x1, [x0, #72]
     66c:	ldr	x0, [sp, #48]
     670:	ldr	x0, [x0, #72]
     674:	cmp	x0, #0x0
     678:	b.ne	684 <updatewindow+0x84>  // b.any
     67c:	mov	w0, #0x1                   	// #1
     680:	b	864 <updatewindow+0x264>
     684:	ldr	x0, [sp, #48]
     688:	ldr	w0, [x0, #60]
     68c:	cmp	w0, #0x0
     690:	b.ne	6bc <updatewindow+0xbc>  // b.any
     694:	ldr	x0, [sp, #48]
     698:	ldr	w0, [x0, #56]
     69c:	mov	w1, #0x1                   	// #1
     6a0:	lsl	w1, w1, w0
     6a4:	ldr	x0, [sp, #48]
     6a8:	str	w1, [x0, #60]
     6ac:	ldr	x0, [sp, #48]
     6b0:	str	wzr, [x0, #68]
     6b4:	ldr	x0, [sp, #48]
     6b8:	str	wzr, [x0, #64]
     6bc:	ldr	x0, [sp, #48]
     6c0:	ldr	w0, [x0, #60]
     6c4:	ldr	w1, [sp, #28]
     6c8:	cmp	w1, w0
     6cc:	b.cc	724 <updatewindow+0x124>  // b.lo, b.ul, b.last
     6d0:	ldr	x0, [sp, #48]
     6d4:	ldr	x3, [x0, #72]
     6d8:	ldr	x0, [sp, #48]
     6dc:	ldr	w0, [x0, #60]
     6e0:	mov	w0, w0
     6e4:	neg	x0, x0
     6e8:	ldr	x1, [sp, #32]
     6ec:	add	x1, x1, x0
     6f0:	ldr	x0, [sp, #48]
     6f4:	ldr	w0, [x0, #60]
     6f8:	mov	w0, w0
     6fc:	mov	x2, x0
     700:	mov	x0, x3
     704:	bl	0 <memcpy>
     708:	ldr	x0, [sp, #48]
     70c:	str	wzr, [x0, #68]
     710:	ldr	x0, [sp, #48]
     714:	ldr	w1, [x0, #60]
     718:	ldr	x0, [sp, #48]
     71c:	str	w1, [x0, #64]
     720:	b	860 <updatewindow+0x260>
     724:	ldr	x0, [sp, #48]
     728:	ldr	w1, [x0, #60]
     72c:	ldr	x0, [sp, #48]
     730:	ldr	w0, [x0, #68]
     734:	sub	w0, w1, w0
     738:	str	w0, [sp, #60]
     73c:	ldr	w1, [sp, #60]
     740:	ldr	w0, [sp, #28]
     744:	cmp	w1, w0
     748:	b.ls	754 <updatewindow+0x154>  // b.plast
     74c:	ldr	w0, [sp, #28]
     750:	str	w0, [sp, #60]
     754:	ldr	x0, [sp, #48]
     758:	ldr	x1, [x0, #72]
     75c:	ldr	x0, [sp, #48]
     760:	ldr	w0, [x0, #68]
     764:	mov	w0, w0
     768:	add	x3, x1, x0
     76c:	ldr	w0, [sp, #28]
     770:	neg	x0, x0
     774:	ldr	x1, [sp, #32]
     778:	add	x0, x1, x0
     77c:	ldr	w1, [sp, #60]
     780:	mov	x2, x1
     784:	mov	x1, x0
     788:	mov	x0, x3
     78c:	bl	0 <memcpy>
     790:	ldr	w1, [sp, #28]
     794:	ldr	w0, [sp, #60]
     798:	sub	w0, w1, w0
     79c:	str	w0, [sp, #28]
     7a0:	ldr	w0, [sp, #28]
     7a4:	cmp	w0, #0x0
     7a8:	b.eq	7f8 <updatewindow+0x1f8>  // b.none
     7ac:	ldr	x0, [sp, #48]
     7b0:	ldr	x3, [x0, #72]
     7b4:	ldr	w0, [sp, #28]
     7b8:	neg	x0, x0
     7bc:	ldr	x1, [sp, #32]
     7c0:	add	x0, x1, x0
     7c4:	ldr	w1, [sp, #28]
     7c8:	mov	x2, x1
     7cc:	mov	x1, x0
     7d0:	mov	x0, x3
     7d4:	bl	0 <memcpy>
     7d8:	ldr	x0, [sp, #48]
     7dc:	ldr	w1, [sp, #28]
     7e0:	str	w1, [x0, #68]
     7e4:	ldr	x0, [sp, #48]
     7e8:	ldr	w1, [x0, #60]
     7ec:	ldr	x0, [sp, #48]
     7f0:	str	w1, [x0, #64]
     7f4:	b	860 <updatewindow+0x260>
     7f8:	ldr	x0, [sp, #48]
     7fc:	ldr	w1, [x0, #68]
     800:	ldr	w0, [sp, #60]
     804:	add	w1, w1, w0
     808:	ldr	x0, [sp, #48]
     80c:	str	w1, [x0, #68]
     810:	ldr	x0, [sp, #48]
     814:	ldr	w1, [x0, #68]
     818:	ldr	x0, [sp, #48]
     81c:	ldr	w0, [x0, #60]
     820:	cmp	w1, w0
     824:	b.ne	830 <updatewindow+0x230>  // b.any
     828:	ldr	x0, [sp, #48]
     82c:	str	wzr, [x0, #68]
     830:	ldr	x0, [sp, #48]
     834:	ldr	w1, [x0, #64]
     838:	ldr	x0, [sp, #48]
     83c:	ldr	w0, [x0, #60]
     840:	cmp	w1, w0
     844:	b.cs	860 <updatewindow+0x260>  // b.hs, b.nlast
     848:	ldr	x0, [sp, #48]
     84c:	ldr	w1, [x0, #64]
     850:	ldr	w0, [sp, #60]
     854:	add	w1, w1, w0
     858:	ldr	x0, [sp, #48]
     85c:	str	w1, [x0, #64]
     860:	mov	w0, #0x0                   	// #0
     864:	ldp	x29, x30, [sp], #64
     868:	ret

000000000000086c <inflate>:
     86c:	stp	x29, x30, [sp, #-128]!
     870:	mov	x29, sp
     874:	str	x0, [sp, #24]
     878:	str	w1, [sp, #20]
     87c:	ldr	x0, [sp, #24]
     880:	bl	0 <inflateStateCheck>
     884:	cmp	w0, #0x0
     888:	b.ne	8bc <inflate+0x50>  // b.any
     88c:	ldr	x0, [sp, #24]
     890:	ldr	x0, [x0, #24]
     894:	cmp	x0, #0x0
     898:	b.eq	8bc <inflate+0x50>  // b.none
     89c:	ldr	x0, [sp, #24]
     8a0:	ldr	x0, [x0]
     8a4:	cmp	x0, #0x0
     8a8:	b.ne	8c4 <inflate+0x58>  // b.any
     8ac:	ldr	x0, [sp, #24]
     8b0:	ldr	w0, [x0, #8]
     8b4:	cmp	w0, #0x0
     8b8:	b.eq	8c4 <inflate+0x58>  // b.none
     8bc:	mov	w0, #0xfffffffe            	// #-2
     8c0:	b	35d0 <inflate+0x2d64>
     8c4:	ldr	x0, [sp, #24]
     8c8:	ldr	x0, [x0, #56]
     8cc:	str	x0, [sp, #56]
     8d0:	ldr	x0, [sp, #56]
     8d4:	ldr	w1, [x0, #8]
     8d8:	mov	w0, #0x3f3f                	// #16191
     8dc:	cmp	w1, w0
     8e0:	b.ne	8f0 <inflate+0x84>  // b.any
     8e4:	ldr	x0, [sp, #56]
     8e8:	mov	w1, #0x3f40                	// #16192
     8ec:	str	w1, [x0, #8]
     8f0:	ldr	x0, [sp, #24]
     8f4:	ldr	x0, [x0, #24]
     8f8:	str	x0, [sp, #112]
     8fc:	ldr	x0, [sp, #24]
     900:	ldr	w0, [x0, #32]
     904:	str	w0, [sp, #104]
     908:	ldr	x0, [sp, #24]
     90c:	ldr	x0, [x0]
     910:	str	x0, [sp, #120]
     914:	ldr	x0, [sp, #24]
     918:	ldr	w0, [x0, #8]
     91c:	str	w0, [sp, #108]
     920:	ldr	x0, [sp, #56]
     924:	ldr	x0, [x0, #80]
     928:	str	x0, [sp, #96]
     92c:	ldr	x0, [sp, #56]
     930:	ldr	w0, [x0, #88]
     934:	str	w0, [sp, #92]
     938:	ldr	w0, [sp, #108]
     93c:	str	w0, [sp, #52]
     940:	ldr	w0, [sp, #104]
     944:	str	w0, [sp, #88]
     948:	str	wzr, [sp, #64]
     94c:	ldr	x0, [sp, #56]
     950:	ldr	w1, [x0, #8]
     954:	mov	w0, #0xffffc0cc            	// #-16180
     958:	add	w0, w1, w0
     95c:	cmp	w0, #0x1e
     960:	b.hi	31f0 <inflate+0x2984>  // b.pmore
     964:	adrp	x1, 0 <inflateStateCheck>
     968:	add	x1, x1, #0x0
     96c:	ldr	w0, [x1, w0, uxtw #2]
     970:	adr	x1, 97c <inflate+0x110>
     974:	add	x0, x1, w0, sxtw #2
     978:	br	x0
     97c:	ldr	x0, [sp, #56]
     980:	ldr	w0, [x0, #16]
     984:	cmp	w0, #0x0
     988:	b.ne	9e8 <inflate+0x17c>  // b.any
     98c:	ldr	x0, [sp, #56]
     990:	mov	w1, #0x3f40                	// #16192
     994:	str	w1, [x0, #8]
     998:	b	320c <inflate+0x29a0>
     99c:	ldr	w0, [sp, #108]
     9a0:	cmp	w0, #0x0
     9a4:	b.eq	3210 <inflate+0x29a4>  // b.none
     9a8:	ldr	w0, [sp, #108]
     9ac:	sub	w0, w0, #0x1
     9b0:	str	w0, [sp, #108]
     9b4:	ldr	x0, [sp, #120]
     9b8:	add	x1, x0, #0x1
     9bc:	str	x1, [sp, #120]
     9c0:	ldrb	w0, [x0]
     9c4:	and	x1, x0, #0xff
     9c8:	ldr	w0, [sp, #92]
     9cc:	lsl	x0, x1, x0
     9d0:	ldr	x1, [sp, #96]
     9d4:	add	x0, x1, x0
     9d8:	str	x0, [sp, #96]
     9dc:	ldr	w0, [sp, #92]
     9e0:	add	w0, w0, #0x8
     9e4:	str	w0, [sp, #92]
     9e8:	ldr	w0, [sp, #92]
     9ec:	cmp	w0, #0xf
     9f0:	b.ls	99c <inflate+0x130>  // b.plast
     9f4:	ldr	x0, [sp, #56]
     9f8:	ldr	w0, [x0, #16]
     9fc:	and	w0, w0, #0x2
     a00:	cmp	w0, #0x0
     a04:	b.eq	aa4 <inflate+0x238>  // b.none
     a08:	ldr	x1, [sp, #96]
     a0c:	mov	x0, #0x8b1f                	// #35615
     a10:	cmp	x1, x0
     a14:	b.ne	aa4 <inflate+0x238>  // b.any
     a18:	ldr	x0, [sp, #56]
     a1c:	ldr	w0, [x0, #56]
     a20:	cmp	w0, #0x0
     a24:	b.ne	a34 <inflate+0x1c8>  // b.any
     a28:	ldr	x0, [sp, #56]
     a2c:	mov	w1, #0xf                   	// #15
     a30:	str	w1, [x0, #56]
     a34:	mov	w2, #0x0                   	// #0
     a38:	mov	x1, #0x0                   	// #0
     a3c:	mov	x0, #0x0                   	// #0
     a40:	bl	0 <crc32>
     a44:	mov	x1, x0
     a48:	ldr	x0, [sp, #56]
     a4c:	str	x1, [x0, #32]
     a50:	ldr	x0, [sp, #96]
     a54:	and	w0, w0, #0xff
     a58:	strb	w0, [sp, #32]
     a5c:	ldr	x0, [sp, #96]
     a60:	lsr	x0, x0, #8
     a64:	and	w0, w0, #0xff
     a68:	strb	w0, [sp, #33]
     a6c:	ldr	x0, [sp, #56]
     a70:	ldr	x0, [x0, #32]
     a74:	add	x1, sp, #0x20
     a78:	mov	w2, #0x2                   	// #2
     a7c:	bl	0 <crc32>
     a80:	mov	x1, x0
     a84:	ldr	x0, [sp, #56]
     a88:	str	x1, [x0, #32]
     a8c:	str	xzr, [sp, #96]
     a90:	str	wzr, [sp, #92]
     a94:	ldr	x0, [sp, #56]
     a98:	mov	w1, #0x3f35                	// #16181
     a9c:	str	w1, [x0, #8]
     aa0:	b	320c <inflate+0x29a0>
     aa4:	ldr	x0, [sp, #56]
     aa8:	str	wzr, [x0, #24]
     aac:	ldr	x0, [sp, #56]
     ab0:	ldr	x0, [x0, #48]
     ab4:	cmp	x0, #0x0
     ab8:	b.eq	acc <inflate+0x260>  // b.none
     abc:	ldr	x0, [sp, #56]
     ac0:	ldr	x0, [x0, #48]
     ac4:	mov	w1, #0xffffffff            	// #-1
     ac8:	str	w1, [x0, #72]
     acc:	ldr	x0, [sp, #56]
     ad0:	ldr	w0, [x0, #16]
     ad4:	and	w0, w0, #0x1
     ad8:	cmp	w0, #0x0
     adc:	b.eq	b38 <inflate+0x2cc>  // b.none
     ae0:	ldr	x0, [sp, #96]
     ae4:	lsl	w0, w0, #8
     ae8:	mov	w0, w0
     aec:	and	x1, x0, #0xffff
     af0:	ldr	x0, [sp, #96]
     af4:	lsr	x0, x0, #8
     af8:	add	x2, x1, x0
     afc:	mov	x0, #0x4211                	// #16913
     b00:	movk	x0, #0x2108, lsl #16
     b04:	movk	x0, #0x1084, lsl #32
     b08:	movk	x0, #0x842, lsl #48
     b0c:	umulh	x0, x2, x0
     b10:	sub	x1, x2, x0
     b14:	lsr	x1, x1, #1
     b18:	add	x0, x0, x1
     b1c:	lsr	x1, x0, #4
     b20:	mov	x0, x1
     b24:	lsl	x0, x0, #5
     b28:	sub	x0, x0, x1
     b2c:	sub	x1, x2, x0
     b30:	cmp	x1, #0x0
     b34:	b.eq	b58 <inflate+0x2ec>  // b.none
     b38:	ldr	x0, [sp, #24]
     b3c:	adrp	x1, 0 <inflateStateCheck>
     b40:	add	x1, x1, #0x0
     b44:	str	x1, [x0, #48]
     b48:	ldr	x0, [sp, #56]
     b4c:	mov	w1, #0x3f51                	// #16209
     b50:	str	w1, [x0, #8]
     b54:	b	320c <inflate+0x29a0>
     b58:	ldr	x0, [sp, #96]
     b5c:	and	w0, w0, #0xf
     b60:	cmp	w0, #0x8
     b64:	b.eq	b88 <inflate+0x31c>  // b.none
     b68:	ldr	x0, [sp, #24]
     b6c:	adrp	x1, 0 <inflateStateCheck>
     b70:	add	x1, x1, #0x0
     b74:	str	x1, [x0, #48]
     b78:	ldr	x0, [sp, #56]
     b7c:	mov	w1, #0x3f51                	// #16209
     b80:	str	w1, [x0, #8]
     b84:	b	320c <inflate+0x29a0>
     b88:	ldr	x0, [sp, #96]
     b8c:	lsr	x0, x0, #4
     b90:	str	x0, [sp, #96]
     b94:	ldr	w0, [sp, #92]
     b98:	sub	w0, w0, #0x4
     b9c:	str	w0, [sp, #92]
     ba0:	ldr	x0, [sp, #96]
     ba4:	and	w0, w0, #0xf
     ba8:	add	w0, w0, #0x8
     bac:	str	w0, [sp, #68]
     bb0:	ldr	x0, [sp, #56]
     bb4:	ldr	w0, [x0, #56]
     bb8:	cmp	w0, #0x0
     bbc:	b.ne	bcc <inflate+0x360>  // b.any
     bc0:	ldr	x0, [sp, #56]
     bc4:	ldr	w1, [sp, #68]
     bc8:	str	w1, [x0, #56]
     bcc:	ldr	w0, [sp, #68]
     bd0:	cmp	w0, #0xf
     bd4:	b.hi	bec <inflate+0x380>  // b.pmore
     bd8:	ldr	x0, [sp, #56]
     bdc:	ldr	w0, [x0, #56]
     be0:	ldr	w1, [sp, #68]
     be4:	cmp	w1, w0
     be8:	b.ls	c0c <inflate+0x3a0>  // b.plast
     bec:	ldr	x0, [sp, #24]
     bf0:	adrp	x1, 0 <inflateStateCheck>
     bf4:	add	x1, x1, #0x0
     bf8:	str	x1, [x0, #48]
     bfc:	ldr	x0, [sp, #56]
     c00:	mov	w1, #0x3f51                	// #16209
     c04:	str	w1, [x0, #8]
     c08:	b	320c <inflate+0x29a0>
     c0c:	ldr	w0, [sp, #68]
     c10:	mov	w1, #0x1                   	// #1
     c14:	lsl	w1, w1, w0
     c18:	ldr	x0, [sp, #56]
     c1c:	str	w1, [x0, #28]
     c20:	mov	w2, #0x0                   	// #0
     c24:	mov	x1, #0x0                   	// #0
     c28:	mov	x0, #0x0                   	// #0
     c2c:	bl	0 <adler32>
     c30:	mov	x1, x0
     c34:	ldr	x0, [sp, #56]
     c38:	str	x1, [x0, #32]
     c3c:	ldr	x0, [sp, #56]
     c40:	ldr	x1, [x0, #32]
     c44:	ldr	x0, [sp, #24]
     c48:	str	x1, [x0, #96]
     c4c:	ldr	x0, [sp, #96]
     c50:	and	x0, x0, #0x200
     c54:	cmp	x0, #0x0
     c58:	b.eq	c64 <inflate+0x3f8>  // b.none
     c5c:	mov	w0, #0x3f3d                	// #16189
     c60:	b	c68 <inflate+0x3fc>
     c64:	mov	w0, #0x3f3f                	// #16191
     c68:	ldr	x1, [sp, #56]
     c6c:	str	w0, [x1, #8]
     c70:	str	xzr, [sp, #96]
     c74:	str	wzr, [sp, #92]
     c78:	b	320c <inflate+0x29a0>
     c7c:	ldr	w0, [sp, #108]
     c80:	cmp	w0, #0x0
     c84:	b.eq	3218 <inflate+0x29ac>  // b.none
     c88:	ldr	w0, [sp, #108]
     c8c:	sub	w0, w0, #0x1
     c90:	str	w0, [sp, #108]
     c94:	ldr	x0, [sp, #120]
     c98:	add	x1, x0, #0x1
     c9c:	str	x1, [sp, #120]
     ca0:	ldrb	w0, [x0]
     ca4:	and	x1, x0, #0xff
     ca8:	ldr	w0, [sp, #92]
     cac:	lsl	x0, x1, x0
     cb0:	ldr	x1, [sp, #96]
     cb4:	add	x0, x1, x0
     cb8:	str	x0, [sp, #96]
     cbc:	ldr	w0, [sp, #92]
     cc0:	add	w0, w0, #0x8
     cc4:	str	w0, [sp, #92]
     cc8:	ldr	w0, [sp, #92]
     ccc:	cmp	w0, #0xf
     cd0:	b.ls	c7c <inflate+0x410>  // b.plast
     cd4:	ldr	x0, [sp, #96]
     cd8:	mov	w1, w0
     cdc:	ldr	x0, [sp, #56]
     ce0:	str	w1, [x0, #24]
     ce4:	ldr	x0, [sp, #56]
     ce8:	ldr	w0, [x0, #24]
     cec:	and	w0, w0, #0xff
     cf0:	cmp	w0, #0x8
     cf4:	b.eq	d18 <inflate+0x4ac>  // b.none
     cf8:	ldr	x0, [sp, #24]
     cfc:	adrp	x1, 0 <inflateStateCheck>
     d00:	add	x1, x1, #0x0
     d04:	str	x1, [x0, #48]
     d08:	ldr	x0, [sp, #56]
     d0c:	mov	w1, #0x3f51                	// #16209
     d10:	str	w1, [x0, #8]
     d14:	b	320c <inflate+0x29a0>
     d18:	ldr	x0, [sp, #56]
     d1c:	ldr	w0, [x0, #24]
     d20:	and	w0, w0, #0xe000
     d24:	cmp	w0, #0x0
     d28:	b.eq	d4c <inflate+0x4e0>  // b.none
     d2c:	ldr	x0, [sp, #24]
     d30:	adrp	x1, 0 <inflateStateCheck>
     d34:	add	x1, x1, #0x0
     d38:	str	x1, [x0, #48]
     d3c:	ldr	x0, [sp, #56]
     d40:	mov	w1, #0x3f51                	// #16209
     d44:	str	w1, [x0, #8]
     d48:	b	320c <inflate+0x29a0>
     d4c:	ldr	x0, [sp, #56]
     d50:	ldr	x0, [x0, #48]
     d54:	cmp	x0, #0x0
     d58:	b.eq	d78 <inflate+0x50c>  // b.none
     d5c:	ldr	x0, [sp, #96]
     d60:	lsr	x0, x0, #8
     d64:	mov	w1, w0
     d68:	ldr	x0, [sp, #56]
     d6c:	ldr	x0, [x0, #48]
     d70:	and	w1, w1, #0x1
     d74:	str	w1, [x0]
     d78:	ldr	x0, [sp, #56]
     d7c:	ldr	w0, [x0, #24]
     d80:	and	w0, w0, #0x200
     d84:	cmp	w0, #0x0
     d88:	b.eq	ddc <inflate+0x570>  // b.none
     d8c:	ldr	x0, [sp, #56]
     d90:	ldr	w0, [x0, #16]
     d94:	and	w0, w0, #0x4
     d98:	cmp	w0, #0x0
     d9c:	b.eq	ddc <inflate+0x570>  // b.none
     da0:	ldr	x0, [sp, #96]
     da4:	and	w0, w0, #0xff
     da8:	strb	w0, [sp, #32]
     dac:	ldr	x0, [sp, #96]
     db0:	lsr	x0, x0, #8
     db4:	and	w0, w0, #0xff
     db8:	strb	w0, [sp, #33]
     dbc:	ldr	x0, [sp, #56]
     dc0:	ldr	x0, [x0, #32]
     dc4:	add	x1, sp, #0x20
     dc8:	mov	w2, #0x2                   	// #2
     dcc:	bl	0 <crc32>
     dd0:	mov	x1, x0
     dd4:	ldr	x0, [sp, #56]
     dd8:	str	x1, [x0, #32]
     ddc:	str	xzr, [sp, #96]
     de0:	str	wzr, [sp, #92]
     de4:	ldr	x0, [sp, #56]
     de8:	mov	w1, #0x3f36                	// #16182
     dec:	str	w1, [x0, #8]
     df0:	b	e40 <inflate+0x5d4>
     df4:	ldr	w0, [sp, #108]
     df8:	cmp	w0, #0x0
     dfc:	b.eq	3220 <inflate+0x29b4>  // b.none
     e00:	ldr	w0, [sp, #108]
     e04:	sub	w0, w0, #0x1
     e08:	str	w0, [sp, #108]
     e0c:	ldr	x0, [sp, #120]
     e10:	add	x1, x0, #0x1
     e14:	str	x1, [sp, #120]
     e18:	ldrb	w0, [x0]
     e1c:	and	x1, x0, #0xff
     e20:	ldr	w0, [sp, #92]
     e24:	lsl	x0, x1, x0
     e28:	ldr	x1, [sp, #96]
     e2c:	add	x0, x1, x0
     e30:	str	x0, [sp, #96]
     e34:	ldr	w0, [sp, #92]
     e38:	add	w0, w0, #0x8
     e3c:	str	w0, [sp, #92]
     e40:	ldr	w0, [sp, #92]
     e44:	cmp	w0, #0x1f
     e48:	b.ls	df4 <inflate+0x588>  // b.plast
     e4c:	ldr	x0, [sp, #56]
     e50:	ldr	x0, [x0, #48]
     e54:	cmp	x0, #0x0
     e58:	b.eq	e6c <inflate+0x600>  // b.none
     e5c:	ldr	x0, [sp, #56]
     e60:	ldr	x0, [x0, #48]
     e64:	ldr	x1, [sp, #96]
     e68:	str	x1, [x0, #8]
     e6c:	ldr	x0, [sp, #56]
     e70:	ldr	w0, [x0, #24]
     e74:	and	w0, w0, #0x200
     e78:	cmp	w0, #0x0
     e7c:	b.eq	ef0 <inflate+0x684>  // b.none
     e80:	ldr	x0, [sp, #56]
     e84:	ldr	w0, [x0, #16]
     e88:	and	w0, w0, #0x4
     e8c:	cmp	w0, #0x0
     e90:	b.eq	ef0 <inflate+0x684>  // b.none
     e94:	ldr	x0, [sp, #96]
     e98:	and	w0, w0, #0xff
     e9c:	strb	w0, [sp, #32]
     ea0:	ldr	x0, [sp, #96]
     ea4:	lsr	x0, x0, #8
     ea8:	and	w0, w0, #0xff
     eac:	strb	w0, [sp, #33]
     eb0:	ldr	x0, [sp, #96]
     eb4:	lsr	x0, x0, #16
     eb8:	and	w0, w0, #0xff
     ebc:	strb	w0, [sp, #34]
     ec0:	ldr	x0, [sp, #96]
     ec4:	lsr	x0, x0, #24
     ec8:	and	w0, w0, #0xff
     ecc:	strb	w0, [sp, #35]
     ed0:	ldr	x0, [sp, #56]
     ed4:	ldr	x0, [x0, #32]
     ed8:	add	x1, sp, #0x20
     edc:	mov	w2, #0x4                   	// #4
     ee0:	bl	0 <crc32>
     ee4:	mov	x1, x0
     ee8:	ldr	x0, [sp, #56]
     eec:	str	x1, [x0, #32]
     ef0:	str	xzr, [sp, #96]
     ef4:	str	wzr, [sp, #92]
     ef8:	ldr	x0, [sp, #56]
     efc:	mov	w1, #0x3f37                	// #16183
     f00:	str	w1, [x0, #8]
     f04:	b	f54 <inflate+0x6e8>
     f08:	ldr	w0, [sp, #108]
     f0c:	cmp	w0, #0x0
     f10:	b.eq	3228 <inflate+0x29bc>  // b.none
     f14:	ldr	w0, [sp, #108]
     f18:	sub	w0, w0, #0x1
     f1c:	str	w0, [sp, #108]
     f20:	ldr	x0, [sp, #120]
     f24:	add	x1, x0, #0x1
     f28:	str	x1, [sp, #120]
     f2c:	ldrb	w0, [x0]
     f30:	and	x1, x0, #0xff
     f34:	ldr	w0, [sp, #92]
     f38:	lsl	x0, x1, x0
     f3c:	ldr	x1, [sp, #96]
     f40:	add	x0, x1, x0
     f44:	str	x0, [sp, #96]
     f48:	ldr	w0, [sp, #92]
     f4c:	add	w0, w0, #0x8
     f50:	str	w0, [sp, #92]
     f54:	ldr	w0, [sp, #92]
     f58:	cmp	w0, #0xf
     f5c:	b.ls	f08 <inflate+0x69c>  // b.plast
     f60:	ldr	x0, [sp, #56]
     f64:	ldr	x0, [x0, #48]
     f68:	cmp	x0, #0x0
     f6c:	b.eq	f9c <inflate+0x730>  // b.none
     f70:	ldr	x0, [sp, #96]
     f74:	mov	w1, w0
     f78:	ldr	x0, [sp, #56]
     f7c:	ldr	x0, [x0, #48]
     f80:	and	w1, w1, #0xff
     f84:	str	w1, [x0, #16]
     f88:	ldr	x0, [sp, #96]
     f8c:	lsr	x1, x0, #8
     f90:	ldr	x0, [sp, #56]
     f94:	ldr	x0, [x0, #48]
     f98:	str	w1, [x0, #20]
     f9c:	ldr	x0, [sp, #56]
     fa0:	ldr	w0, [x0, #24]
     fa4:	and	w0, w0, #0x200
     fa8:	cmp	w0, #0x0
     fac:	b.eq	1000 <inflate+0x794>  // b.none
     fb0:	ldr	x0, [sp, #56]
     fb4:	ldr	w0, [x0, #16]
     fb8:	and	w0, w0, #0x4
     fbc:	cmp	w0, #0x0
     fc0:	b.eq	1000 <inflate+0x794>  // b.none
     fc4:	ldr	x0, [sp, #96]
     fc8:	and	w0, w0, #0xff
     fcc:	strb	w0, [sp, #32]
     fd0:	ldr	x0, [sp, #96]
     fd4:	lsr	x0, x0, #8
     fd8:	and	w0, w0, #0xff
     fdc:	strb	w0, [sp, #33]
     fe0:	ldr	x0, [sp, #56]
     fe4:	ldr	x0, [x0, #32]
     fe8:	add	x1, sp, #0x20
     fec:	mov	w2, #0x2                   	// #2
     ff0:	bl	0 <crc32>
     ff4:	mov	x1, x0
     ff8:	ldr	x0, [sp, #56]
     ffc:	str	x1, [x0, #32]
    1000:	str	xzr, [sp, #96]
    1004:	str	wzr, [sp, #92]
    1008:	ldr	x0, [sp, #56]
    100c:	mov	w1, #0x3f38                	// #16184
    1010:	str	w1, [x0, #8]
    1014:	ldr	x0, [sp, #56]
    1018:	ldr	w0, [x0, #24]
    101c:	and	w0, w0, #0x400
    1020:	cmp	w0, #0x0
    1024:	b.eq	1124 <inflate+0x8b8>  // b.none
    1028:	b	1078 <inflate+0x80c>
    102c:	ldr	w0, [sp, #108]
    1030:	cmp	w0, #0x0
    1034:	b.eq	3230 <inflate+0x29c4>  // b.none
    1038:	ldr	w0, [sp, #108]
    103c:	sub	w0, w0, #0x1
    1040:	str	w0, [sp, #108]
    1044:	ldr	x0, [sp, #120]
    1048:	add	x1, x0, #0x1
    104c:	str	x1, [sp, #120]
    1050:	ldrb	w0, [x0]
    1054:	and	x1, x0, #0xff
    1058:	ldr	w0, [sp, #92]
    105c:	lsl	x0, x1, x0
    1060:	ldr	x1, [sp, #96]
    1064:	add	x0, x1, x0
    1068:	str	x0, [sp, #96]
    106c:	ldr	w0, [sp, #92]
    1070:	add	w0, w0, #0x8
    1074:	str	w0, [sp, #92]
    1078:	ldr	w0, [sp, #92]
    107c:	cmp	w0, #0xf
    1080:	b.ls	102c <inflate+0x7c0>  // b.plast
    1084:	ldr	x0, [sp, #96]
    1088:	mov	w1, w0
    108c:	ldr	x0, [sp, #56]
    1090:	str	w1, [x0, #92]
    1094:	ldr	x0, [sp, #56]
    1098:	ldr	x0, [x0, #48]
    109c:	cmp	x0, #0x0
    10a0:	b.eq	10b4 <inflate+0x848>  // b.none
    10a4:	ldr	x0, [sp, #56]
    10a8:	ldr	x0, [x0, #48]
    10ac:	ldr	x1, [sp, #96]
    10b0:	str	w1, [x0, #32]
    10b4:	ldr	x0, [sp, #56]
    10b8:	ldr	w0, [x0, #24]
    10bc:	and	w0, w0, #0x200
    10c0:	cmp	w0, #0x0
    10c4:	b.eq	1118 <inflate+0x8ac>  // b.none
    10c8:	ldr	x0, [sp, #56]
    10cc:	ldr	w0, [x0, #16]
    10d0:	and	w0, w0, #0x4
    10d4:	cmp	w0, #0x0
    10d8:	b.eq	1118 <inflate+0x8ac>  // b.none
    10dc:	ldr	x0, [sp, #96]
    10e0:	and	w0, w0, #0xff
    10e4:	strb	w0, [sp, #32]
    10e8:	ldr	x0, [sp, #96]
    10ec:	lsr	x0, x0, #8
    10f0:	and	w0, w0, #0xff
    10f4:	strb	w0, [sp, #33]
    10f8:	ldr	x0, [sp, #56]
    10fc:	ldr	x0, [x0, #32]
    1100:	add	x1, sp, #0x20
    1104:	mov	w2, #0x2                   	// #2
    1108:	bl	0 <crc32>
    110c:	mov	x1, x0
    1110:	ldr	x0, [sp, #56]
    1114:	str	x1, [x0, #32]
    1118:	str	xzr, [sp, #96]
    111c:	str	wzr, [sp, #92]
    1120:	b	1140 <inflate+0x8d4>
    1124:	ldr	x0, [sp, #56]
    1128:	ldr	x0, [x0, #48]
    112c:	cmp	x0, #0x0
    1130:	b.eq	1140 <inflate+0x8d4>  // b.none
    1134:	ldr	x0, [sp, #56]
    1138:	ldr	x0, [x0, #48]
    113c:	str	xzr, [x0, #24]
    1140:	ldr	x0, [sp, #56]
    1144:	mov	w1, #0x3f39                	// #16185
    1148:	str	w1, [x0, #8]
    114c:	ldr	x0, [sp, #56]
    1150:	ldr	w0, [x0, #24]
    1154:	and	w0, w0, #0x400
    1158:	cmp	w0, #0x0
    115c:	b.eq	12c4 <inflate+0xa58>  // b.none
    1160:	ldr	x0, [sp, #56]
    1164:	ldr	w0, [x0, #92]
    1168:	str	w0, [sp, #84]
    116c:	ldr	w1, [sp, #84]
    1170:	ldr	w0, [sp, #108]
    1174:	cmp	w1, w0
    1178:	b.ls	1184 <inflate+0x918>  // b.plast
    117c:	ldr	w0, [sp, #108]
    1180:	str	w0, [sp, #84]
    1184:	ldr	w0, [sp, #84]
    1188:	cmp	w0, #0x0
    118c:	b.eq	12b4 <inflate+0xa48>  // b.none
    1190:	ldr	x0, [sp, #56]
    1194:	ldr	x0, [x0, #48]
    1198:	cmp	x0, #0x0
    119c:	b.eq	1234 <inflate+0x9c8>  // b.none
    11a0:	ldr	x0, [sp, #56]
    11a4:	ldr	x0, [x0, #48]
    11a8:	ldr	x0, [x0, #24]
    11ac:	cmp	x0, #0x0
    11b0:	b.eq	1234 <inflate+0x9c8>  // b.none
    11b4:	ldr	x0, [sp, #56]
    11b8:	ldr	x0, [x0, #48]
    11bc:	ldr	w1, [x0, #32]
    11c0:	ldr	x0, [sp, #56]
    11c4:	ldr	w0, [x0, #92]
    11c8:	sub	w0, w1, w0
    11cc:	str	w0, [sp, #68]
    11d0:	ldr	x0, [sp, #56]
    11d4:	ldr	x0, [x0, #48]
    11d8:	ldr	x1, [x0, #24]
    11dc:	ldr	w0, [sp, #68]
    11e0:	add	x3, x1, x0
    11e4:	ldr	w1, [sp, #68]
    11e8:	ldr	w0, [sp, #84]
    11ec:	add	w1, w1, w0
    11f0:	ldr	x0, [sp, #56]
    11f4:	ldr	x0, [x0, #48]
    11f8:	ldr	w0, [x0, #36]
    11fc:	cmp	w1, w0
    1200:	b.ls	1220 <inflate+0x9b4>  // b.plast
    1204:	ldr	x0, [sp, #56]
    1208:	ldr	x0, [x0, #48]
    120c:	ldr	w1, [x0, #36]
    1210:	ldr	w0, [sp, #68]
    1214:	sub	w0, w1, w0
    1218:	mov	w0, w0
    121c:	b	1224 <inflate+0x9b8>
    1220:	ldr	w0, [sp, #84]
    1224:	mov	x2, x0
    1228:	ldr	x1, [sp, #120]
    122c:	mov	x0, x3
    1230:	bl	0 <memcpy>
    1234:	ldr	x0, [sp, #56]
    1238:	ldr	w0, [x0, #24]
    123c:	and	w0, w0, #0x200
    1240:	cmp	w0, #0x0
    1244:	b.eq	127c <inflate+0xa10>  // b.none
    1248:	ldr	x0, [sp, #56]
    124c:	ldr	w0, [x0, #16]
    1250:	and	w0, w0, #0x4
    1254:	cmp	w0, #0x0
    1258:	b.eq	127c <inflate+0xa10>  // b.none
    125c:	ldr	x0, [sp, #56]
    1260:	ldr	x0, [x0, #32]
    1264:	ldr	w2, [sp, #84]
    1268:	ldr	x1, [sp, #120]
    126c:	bl	0 <crc32>
    1270:	mov	x1, x0
    1274:	ldr	x0, [sp, #56]
    1278:	str	x1, [x0, #32]
    127c:	ldr	w1, [sp, #108]
    1280:	ldr	w0, [sp, #84]
    1284:	sub	w0, w1, w0
    1288:	str	w0, [sp, #108]
    128c:	ldr	w0, [sp, #84]
    1290:	ldr	x1, [sp, #120]
    1294:	add	x0, x1, x0
    1298:	str	x0, [sp, #120]
    129c:	ldr	x0, [sp, #56]
    12a0:	ldr	w1, [x0, #92]
    12a4:	ldr	w0, [sp, #84]
    12a8:	sub	w1, w1, w0
    12ac:	ldr	x0, [sp, #56]
    12b0:	str	w1, [x0, #92]
    12b4:	ldr	x0, [sp, #56]
    12b8:	ldr	w0, [x0, #92]
    12bc:	cmp	w0, #0x0
    12c0:	b.ne	3238 <inflate+0x29cc>  // b.any
    12c4:	ldr	x0, [sp, #56]
    12c8:	str	wzr, [x0, #92]
    12cc:	ldr	x0, [sp, #56]
    12d0:	mov	w1, #0x3f3a                	// #16186
    12d4:	str	w1, [x0, #8]
    12d8:	ldr	x0, [sp, #56]
    12dc:	ldr	w0, [x0, #24]
    12e0:	and	w0, w0, #0x800
    12e4:	cmp	w0, #0x0
    12e8:	b.eq	1424 <inflate+0xbb8>  // b.none
    12ec:	ldr	w0, [sp, #108]
    12f0:	cmp	w0, #0x0
    12f4:	b.eq	3240 <inflate+0x29d4>  // b.none
    12f8:	str	wzr, [sp, #84]
    12fc:	ldr	w0, [sp, #84]
    1300:	add	w1, w0, #0x1
    1304:	str	w1, [sp, #84]
    1308:	mov	w0, w0
    130c:	ldr	x1, [sp, #120]
    1310:	add	x0, x1, x0
    1314:	ldrb	w0, [x0]
    1318:	str	w0, [sp, #68]
    131c:	ldr	x0, [sp, #56]
    1320:	ldr	x0, [x0, #48]
    1324:	cmp	x0, #0x0
    1328:	b.eq	1390 <inflate+0xb24>  // b.none
    132c:	ldr	x0, [sp, #56]
    1330:	ldr	x0, [x0, #48]
    1334:	ldr	x0, [x0, #40]
    1338:	cmp	x0, #0x0
    133c:	b.eq	1390 <inflate+0xb24>  // b.none
    1340:	ldr	x0, [sp, #56]
    1344:	ldr	w1, [x0, #92]
    1348:	ldr	x0, [sp, #56]
    134c:	ldr	x0, [x0, #48]
    1350:	ldr	w0, [x0, #48]
    1354:	cmp	w1, w0
    1358:	b.cs	1390 <inflate+0xb24>  // b.hs, b.nlast
    135c:	ldr	x0, [sp, #56]
    1360:	ldr	x0, [x0, #48]
    1364:	ldr	x1, [x0, #40]
    1368:	ldr	x0, [sp, #56]
    136c:	ldr	w0, [x0, #92]
    1370:	add	w3, w0, #0x1
    1374:	ldr	x2, [sp, #56]
    1378:	str	w3, [x2, #92]
    137c:	mov	w0, w0
    1380:	add	x0, x1, x0
    1384:	ldr	w1, [sp, #68]
    1388:	and	w1, w1, #0xff
    138c:	strb	w1, [x0]
    1390:	ldr	w0, [sp, #68]
    1394:	cmp	w0, #0x0
    1398:	b.eq	13ac <inflate+0xb40>  // b.none
    139c:	ldr	w1, [sp, #84]
    13a0:	ldr	w0, [sp, #108]
    13a4:	cmp	w1, w0
    13a8:	b.cc	12fc <inflate+0xa90>  // b.lo, b.ul, b.last
    13ac:	ldr	x0, [sp, #56]
    13b0:	ldr	w0, [x0, #24]
    13b4:	and	w0, w0, #0x200
    13b8:	cmp	w0, #0x0
    13bc:	b.eq	13f4 <inflate+0xb88>  // b.none
    13c0:	ldr	x0, [sp, #56]
    13c4:	ldr	w0, [x0, #16]
    13c8:	and	w0, w0, #0x4
    13cc:	cmp	w0, #0x0
    13d0:	b.eq	13f4 <inflate+0xb88>  // b.none
    13d4:	ldr	x0, [sp, #56]
    13d8:	ldr	x0, [x0, #32]
    13dc:	ldr	w2, [sp, #84]
    13e0:	ldr	x1, [sp, #120]
    13e4:	bl	0 <crc32>
    13e8:	mov	x1, x0
    13ec:	ldr	x0, [sp, #56]
    13f0:	str	x1, [x0, #32]
    13f4:	ldr	w1, [sp, #108]
    13f8:	ldr	w0, [sp, #84]
    13fc:	sub	w0, w1, w0
    1400:	str	w0, [sp, #108]
    1404:	ldr	w0, [sp, #84]
    1408:	ldr	x1, [sp, #120]
    140c:	add	x0, x1, x0
    1410:	str	x0, [sp, #120]
    1414:	ldr	w0, [sp, #68]
    1418:	cmp	w0, #0x0
    141c:	b.eq	1440 <inflate+0xbd4>  // b.none
    1420:	b	330c <inflate+0x2aa0>
    1424:	ldr	x0, [sp, #56]
    1428:	ldr	x0, [x0, #48]
    142c:	cmp	x0, #0x0
    1430:	b.eq	1440 <inflate+0xbd4>  // b.none
    1434:	ldr	x0, [sp, #56]
    1438:	ldr	x0, [x0, #48]
    143c:	str	xzr, [x0, #40]
    1440:	ldr	x0, [sp, #56]
    1444:	str	wzr, [x0, #92]
    1448:	ldr	x0, [sp, #56]
    144c:	mov	w1, #0x3f3b                	// #16187
    1450:	str	w1, [x0, #8]
    1454:	ldr	x0, [sp, #56]
    1458:	ldr	w0, [x0, #24]
    145c:	and	w0, w0, #0x1000
    1460:	cmp	w0, #0x0
    1464:	b.eq	15a0 <inflate+0xd34>  // b.none
    1468:	ldr	w0, [sp, #108]
    146c:	cmp	w0, #0x0
    1470:	b.eq	3248 <inflate+0x29dc>  // b.none
    1474:	str	wzr, [sp, #84]
    1478:	ldr	w0, [sp, #84]
    147c:	add	w1, w0, #0x1
    1480:	str	w1, [sp, #84]
    1484:	mov	w0, w0
    1488:	ldr	x1, [sp, #120]
    148c:	add	x0, x1, x0
    1490:	ldrb	w0, [x0]
    1494:	str	w0, [sp, #68]
    1498:	ldr	x0, [sp, #56]
    149c:	ldr	x0, [x0, #48]
    14a0:	cmp	x0, #0x0
    14a4:	b.eq	150c <inflate+0xca0>  // b.none
    14a8:	ldr	x0, [sp, #56]
    14ac:	ldr	x0, [x0, #48]
    14b0:	ldr	x0, [x0, #56]
    14b4:	cmp	x0, #0x0
    14b8:	b.eq	150c <inflate+0xca0>  // b.none
    14bc:	ldr	x0, [sp, #56]
    14c0:	ldr	w1, [x0, #92]
    14c4:	ldr	x0, [sp, #56]
    14c8:	ldr	x0, [x0, #48]
    14cc:	ldr	w0, [x0, #64]
    14d0:	cmp	w1, w0
    14d4:	b.cs	150c <inflate+0xca0>  // b.hs, b.nlast
    14d8:	ldr	x0, [sp, #56]
    14dc:	ldr	x0, [x0, #48]
    14e0:	ldr	x1, [x0, #56]
    14e4:	ldr	x0, [sp, #56]
    14e8:	ldr	w0, [x0, #92]
    14ec:	add	w3, w0, #0x1
    14f0:	ldr	x2, [sp, #56]
    14f4:	str	w3, [x2, #92]
    14f8:	mov	w0, w0
    14fc:	add	x0, x1, x0
    1500:	ldr	w1, [sp, #68]
    1504:	and	w1, w1, #0xff
    1508:	strb	w1, [x0]
    150c:	ldr	w0, [sp, #68]
    1510:	cmp	w0, #0x0
    1514:	b.eq	1528 <inflate+0xcbc>  // b.none
    1518:	ldr	w1, [sp, #84]
    151c:	ldr	w0, [sp, #108]
    1520:	cmp	w1, w0
    1524:	b.cc	1478 <inflate+0xc0c>  // b.lo, b.ul, b.last
    1528:	ldr	x0, [sp, #56]
    152c:	ldr	w0, [x0, #24]
    1530:	and	w0, w0, #0x200
    1534:	cmp	w0, #0x0
    1538:	b.eq	1570 <inflate+0xd04>  // b.none
    153c:	ldr	x0, [sp, #56]
    1540:	ldr	w0, [x0, #16]
    1544:	and	w0, w0, #0x4
    1548:	cmp	w0, #0x0
    154c:	b.eq	1570 <inflate+0xd04>  // b.none
    1550:	ldr	x0, [sp, #56]
    1554:	ldr	x0, [x0, #32]
    1558:	ldr	w2, [sp, #84]
    155c:	ldr	x1, [sp, #120]
    1560:	bl	0 <crc32>
    1564:	mov	x1, x0
    1568:	ldr	x0, [sp, #56]
    156c:	str	x1, [x0, #32]
    1570:	ldr	w1, [sp, #108]
    1574:	ldr	w0, [sp, #84]
    1578:	sub	w0, w1, w0
    157c:	str	w0, [sp, #108]
    1580:	ldr	w0, [sp, #84]
    1584:	ldr	x1, [sp, #120]
    1588:	add	x0, x1, x0
    158c:	str	x0, [sp, #120]
    1590:	ldr	w0, [sp, #68]
    1594:	cmp	w0, #0x0
    1598:	b.eq	15bc <inflate+0xd50>  // b.none
    159c:	b	330c <inflate+0x2aa0>
    15a0:	ldr	x0, [sp, #56]
    15a4:	ldr	x0, [x0, #48]
    15a8:	cmp	x0, #0x0
    15ac:	b.eq	15bc <inflate+0xd50>  // b.none
    15b0:	ldr	x0, [sp, #56]
    15b4:	ldr	x0, [x0, #48]
    15b8:	str	xzr, [x0, #56]
    15bc:	ldr	x0, [sp, #56]
    15c0:	mov	w1, #0x3f3c                	// #16188
    15c4:	str	w1, [x0, #8]
    15c8:	ldr	x0, [sp, #56]
    15cc:	ldr	w0, [x0, #24]
    15d0:	and	w0, w0, #0x200
    15d4:	cmp	w0, #0x0
    15d8:	b.eq	168c <inflate+0xe20>  // b.none
    15dc:	b	162c <inflate+0xdc0>
    15e0:	ldr	w0, [sp, #108]
    15e4:	cmp	w0, #0x0
    15e8:	b.eq	3250 <inflate+0x29e4>  // b.none
    15ec:	ldr	w0, [sp, #108]
    15f0:	sub	w0, w0, #0x1
    15f4:	str	w0, [sp, #108]
    15f8:	ldr	x0, [sp, #120]
    15fc:	add	x1, x0, #0x1
    1600:	str	x1, [sp, #120]
    1604:	ldrb	w0, [x0]
    1608:	and	x1, x0, #0xff
    160c:	ldr	w0, [sp, #92]
    1610:	lsl	x0, x1, x0
    1614:	ldr	x1, [sp, #96]
    1618:	add	x0, x1, x0
    161c:	str	x0, [sp, #96]
    1620:	ldr	w0, [sp, #92]
    1624:	add	w0, w0, #0x8
    1628:	str	w0, [sp, #92]
    162c:	ldr	w0, [sp, #92]
    1630:	cmp	w0, #0xf
    1634:	b.ls	15e0 <inflate+0xd74>  // b.plast
    1638:	ldr	x0, [sp, #56]
    163c:	ldr	w0, [x0, #16]
    1640:	and	w0, w0, #0x4
    1644:	cmp	w0, #0x0
    1648:	b.eq	1684 <inflate+0xe18>  // b.none
    164c:	ldr	x0, [sp, #56]
    1650:	ldr	x0, [x0, #32]
    1654:	and	x0, x0, #0xffff
    1658:	ldr	x1, [sp, #96]
    165c:	cmp	x1, x0
    1660:	b.eq	1684 <inflate+0xe18>  // b.none
    1664:	ldr	x0, [sp, #24]
    1668:	adrp	x1, 0 <inflateStateCheck>
    166c:	add	x1, x1, #0x0
    1670:	str	x1, [x0, #48]
    1674:	ldr	x0, [sp, #56]
    1678:	mov	w1, #0x3f51                	// #16209
    167c:	str	w1, [x0, #8]
    1680:	b	320c <inflate+0x29a0>
    1684:	str	xzr, [sp, #96]
    1688:	str	wzr, [sp, #92]
    168c:	ldr	x0, [sp, #56]
    1690:	ldr	x0, [x0, #48]
    1694:	cmp	x0, #0x0
    1698:	b.eq	16c8 <inflate+0xe5c>  // b.none
    169c:	ldr	x0, [sp, #56]
    16a0:	ldr	w0, [x0, #24]
    16a4:	asr	w1, w0, #9
    16a8:	ldr	x0, [sp, #56]
    16ac:	ldr	x0, [x0, #48]
    16b0:	and	w1, w1, #0x1
    16b4:	str	w1, [x0, #68]
    16b8:	ldr	x0, [sp, #56]
    16bc:	ldr	x0, [x0, #48]
    16c0:	mov	w1, #0x1                   	// #1
    16c4:	str	w1, [x0, #72]
    16c8:	mov	w2, #0x0                   	// #0
    16cc:	mov	x1, #0x0                   	// #0
    16d0:	mov	x0, #0x0                   	// #0
    16d4:	bl	0 <crc32>
    16d8:	mov	x1, x0
    16dc:	ldr	x0, [sp, #56]
    16e0:	str	x1, [x0, #32]
    16e4:	ldr	x0, [sp, #56]
    16e8:	ldr	x1, [x0, #32]
    16ec:	ldr	x0, [sp, #24]
    16f0:	str	x1, [x0, #96]
    16f4:	ldr	x0, [sp, #56]
    16f8:	mov	w1, #0x3f3f                	// #16191
    16fc:	str	w1, [x0, #8]
    1700:	b	320c <inflate+0x29a0>
    1704:	ldr	w0, [sp, #108]
    1708:	cmp	w0, #0x0
    170c:	b.eq	3258 <inflate+0x29ec>  // b.none
    1710:	ldr	w0, [sp, #108]
    1714:	sub	w0, w0, #0x1
    1718:	str	w0, [sp, #108]
    171c:	ldr	x0, [sp, #120]
    1720:	add	x1, x0, #0x1
    1724:	str	x1, [sp, #120]
    1728:	ldrb	w0, [x0]
    172c:	and	x1, x0, #0xff
    1730:	ldr	w0, [sp, #92]
    1734:	lsl	x0, x1, x0
    1738:	ldr	x1, [sp, #96]
    173c:	add	x0, x1, x0
    1740:	str	x0, [sp, #96]
    1744:	ldr	w0, [sp, #92]
    1748:	add	w0, w0, #0x8
    174c:	str	w0, [sp, #92]
    1750:	ldr	w0, [sp, #92]
    1754:	cmp	w0, #0x1f
    1758:	b.ls	1704 <inflate+0xe98>  // b.plast
    175c:	ldr	x0, [sp, #96]
    1760:	lsr	x0, x0, #24
    1764:	and	x1, x0, #0xff
    1768:	ldr	x0, [sp, #96]
    176c:	lsr	x0, x0, #8
    1770:	and	x0, x0, #0xff00
    1774:	orr	x1, x1, x0
    1778:	ldr	x0, [sp, #96]
    177c:	lsl	x0, x0, #8
    1780:	and	x0, x0, #0xff0000
    1784:	add	x1, x1, x0
    1788:	ldr	x0, [sp, #96]
    178c:	lsl	x0, x0, #24
    1790:	and	x0, x0, #0xffffffff
    1794:	add	x1, x1, x0
    1798:	ldr	x0, [sp, #56]
    179c:	str	x1, [x0, #32]
    17a0:	ldr	x0, [sp, #56]
    17a4:	ldr	x1, [x0, #32]
    17a8:	ldr	x0, [sp, #24]
    17ac:	str	x1, [x0, #96]
    17b0:	str	xzr, [sp, #96]
    17b4:	str	wzr, [sp, #92]
    17b8:	ldr	x0, [sp, #56]
    17bc:	mov	w1, #0x3f3e                	// #16190
    17c0:	str	w1, [x0, #8]
    17c4:	ldr	x0, [sp, #56]
    17c8:	ldr	w0, [x0, #20]
    17cc:	cmp	w0, #0x0
    17d0:	b.ne	1824 <inflate+0xfb8>  // b.any
    17d4:	ldr	x0, [sp, #24]
    17d8:	ldr	x1, [sp, #112]
    17dc:	str	x1, [x0, #24]
    17e0:	ldr	x0, [sp, #24]
    17e4:	ldr	w1, [sp, #104]
    17e8:	str	w1, [x0, #32]
    17ec:	ldr	x0, [sp, #24]
    17f0:	ldr	x1, [sp, #120]
    17f4:	str	x1, [x0]
    17f8:	ldr	x0, [sp, #24]
    17fc:	ldr	w1, [sp, #108]
    1800:	str	w1, [x0, #8]
    1804:	ldr	x0, [sp, #56]
    1808:	ldr	x1, [sp, #96]
    180c:	str	x1, [x0, #80]
    1810:	ldr	x0, [sp, #56]
    1814:	ldr	w1, [sp, #92]
    1818:	str	w1, [x0, #88]
    181c:	mov	w0, #0x2                   	// #2
    1820:	b	35d0 <inflate+0x2d64>
    1824:	mov	w2, #0x0                   	// #0
    1828:	mov	x1, #0x0                   	// #0
    182c:	mov	x0, #0x0                   	// #0
    1830:	bl	0 <adler32>
    1834:	mov	x1, x0
    1838:	ldr	x0, [sp, #56]
    183c:	str	x1, [x0, #32]
    1840:	ldr	x0, [sp, #56]
    1844:	ldr	x1, [x0, #32]
    1848:	ldr	x0, [sp, #24]
    184c:	str	x1, [x0, #96]
    1850:	ldr	x0, [sp, #56]
    1854:	mov	w1, #0x3f3f                	// #16191
    1858:	str	w1, [x0, #8]
    185c:	ldr	w0, [sp, #20]
    1860:	cmp	w0, #0x5
    1864:	b.eq	3260 <inflate+0x29f4>  // b.none
    1868:	ldr	w0, [sp, #20]
    186c:	cmp	w0, #0x6
    1870:	b.eq	3260 <inflate+0x29f4>  // b.none
    1874:	ldr	x0, [sp, #56]
    1878:	ldr	w0, [x0, #12]
    187c:	cmp	w0, #0x0
    1880:	b.eq	1900 <inflate+0x1094>  // b.none
    1884:	ldr	w0, [sp, #92]
    1888:	and	w0, w0, #0x7
    188c:	ldr	x1, [sp, #96]
    1890:	lsr	x0, x1, x0
    1894:	str	x0, [sp, #96]
    1898:	ldr	w0, [sp, #92]
    189c:	and	w0, w0, #0xfffffff8
    18a0:	str	w0, [sp, #92]
    18a4:	ldr	x0, [sp, #56]
    18a8:	mov	w1, #0x3f4e                	// #16206
    18ac:	str	w1, [x0, #8]
    18b0:	b	320c <inflate+0x29a0>
    18b4:	ldr	w0, [sp, #108]
    18b8:	cmp	w0, #0x0
    18bc:	b.eq	3268 <inflate+0x29fc>  // b.none
    18c0:	ldr	w0, [sp, #108]
    18c4:	sub	w0, w0, #0x1
    18c8:	str	w0, [sp, #108]
    18cc:	ldr	x0, [sp, #120]
    18d0:	add	x1, x0, #0x1
    18d4:	str	x1, [sp, #120]
    18d8:	ldrb	w0, [x0]
    18dc:	and	x1, x0, #0xff
    18e0:	ldr	w0, [sp, #92]
    18e4:	lsl	x0, x1, x0
    18e8:	ldr	x1, [sp, #96]
    18ec:	add	x0, x1, x0
    18f0:	str	x0, [sp, #96]
    18f4:	ldr	w0, [sp, #92]
    18f8:	add	w0, w0, #0x8
    18fc:	str	w0, [sp, #92]
    1900:	ldr	w0, [sp, #92]
    1904:	cmp	w0, #0x2
    1908:	b.ls	18b4 <inflate+0x1048>  // b.plast
    190c:	ldr	x0, [sp, #96]
    1910:	and	w1, w0, #0x1
    1914:	ldr	x0, [sp, #56]
    1918:	str	w1, [x0, #12]
    191c:	ldr	x0, [sp, #96]
    1920:	lsr	x0, x0, #1
    1924:	str	x0, [sp, #96]
    1928:	ldr	w0, [sp, #92]
    192c:	sub	w0, w0, #0x1
    1930:	str	w0, [sp, #92]
    1934:	ldr	x0, [sp, #96]
    1938:	and	w0, w0, #0x3
    193c:	cmp	w0, #0x3
    1940:	b.eq	19cc <inflate+0x1160>  // b.none
    1944:	cmp	w0, #0x3
    1948:	b.hi	19f0 <inflate+0x1184>  // b.pmore
    194c:	cmp	w0, #0x2
    1950:	b.eq	19bc <inflate+0x1150>  // b.none
    1954:	cmp	w0, #0x2
    1958:	b.hi	19f0 <inflate+0x1184>  // b.pmore
    195c:	cmp	w0, #0x0
    1960:	b.eq	1970 <inflate+0x1104>  // b.none
    1964:	cmp	w0, #0x1
    1968:	b.eq	1980 <inflate+0x1114>  // b.none
    196c:	b	19f0 <inflate+0x1184>
    1970:	ldr	x0, [sp, #56]
    1974:	mov	w1, #0x3f41                	// #16193
    1978:	str	w1, [x0, #8]
    197c:	b	19f0 <inflate+0x1184>
    1980:	ldr	x0, [sp, #56]
    1984:	bl	5b4 <fixedtables>
    1988:	ldr	x0, [sp, #56]
    198c:	mov	w1, #0x3f47                	// #16199
    1990:	str	w1, [x0, #8]
    1994:	ldr	w0, [sp, #20]
    1998:	cmp	w0, #0x6
    199c:	b.ne	19ec <inflate+0x1180>  // b.any
    19a0:	ldr	x0, [sp, #96]
    19a4:	lsr	x0, x0, #2
    19a8:	str	x0, [sp, #96]
    19ac:	ldr	w0, [sp, #92]
    19b0:	sub	w0, w0, #0x2
    19b4:	str	w0, [sp, #92]
    19b8:	b	330c <inflate+0x2aa0>
    19bc:	ldr	x0, [sp, #56]
    19c0:	mov	w1, #0x3f44                	// #16196
    19c4:	str	w1, [x0, #8]
    19c8:	b	19f0 <inflate+0x1184>
    19cc:	ldr	x0, [sp, #24]
    19d0:	adrp	x1, 0 <inflateStateCheck>
    19d4:	add	x1, x1, #0x0
    19d8:	str	x1, [x0, #48]
    19dc:	ldr	x0, [sp, #56]
    19e0:	mov	w1, #0x3f51                	// #16209
    19e4:	str	w1, [x0, #8]
    19e8:	b	19f0 <inflate+0x1184>
    19ec:	nop
    19f0:	ldr	x0, [sp, #96]
    19f4:	lsr	x0, x0, #2
    19f8:	str	x0, [sp, #96]
    19fc:	ldr	w0, [sp, #92]
    1a00:	sub	w0, w0, #0x2
    1a04:	str	w0, [sp, #92]
    1a08:	b	320c <inflate+0x29a0>
    1a0c:	ldr	w0, [sp, #92]
    1a10:	and	w0, w0, #0x7
    1a14:	ldr	x1, [sp, #96]
    1a18:	lsr	x0, x1, x0
    1a1c:	str	x0, [sp, #96]
    1a20:	ldr	w0, [sp, #92]
    1a24:	and	w0, w0, #0xfffffff8
    1a28:	str	w0, [sp, #92]
    1a2c:	b	1a7c <inflate+0x1210>
    1a30:	ldr	w0, [sp, #108]
    1a34:	cmp	w0, #0x0
    1a38:	b.eq	3270 <inflate+0x2a04>  // b.none
    1a3c:	ldr	w0, [sp, #108]
    1a40:	sub	w0, w0, #0x1
    1a44:	str	w0, [sp, #108]
    1a48:	ldr	x0, [sp, #120]
    1a4c:	add	x1, x0, #0x1
    1a50:	str	x1, [sp, #120]
    1a54:	ldrb	w0, [x0]
    1a58:	and	x1, x0, #0xff
    1a5c:	ldr	w0, [sp, #92]
    1a60:	lsl	x0, x1, x0
    1a64:	ldr	x1, [sp, #96]
    1a68:	add	x0, x1, x0
    1a6c:	str	x0, [sp, #96]
    1a70:	ldr	w0, [sp, #92]
    1a74:	add	w0, w0, #0x8
    1a78:	str	w0, [sp, #92]
    1a7c:	ldr	w0, [sp, #92]
    1a80:	cmp	w0, #0x1f
    1a84:	b.ls	1a30 <inflate+0x11c4>  // b.plast
    1a88:	ldr	x0, [sp, #96]
    1a8c:	and	x1, x0, #0xffff
    1a90:	ldr	x0, [sp, #96]
    1a94:	lsr	x0, x0, #16
    1a98:	eor	x0, x0, #0xffff
    1a9c:	cmp	x1, x0
    1aa0:	b.eq	1ac4 <inflate+0x1258>  // b.none
    1aa4:	ldr	x0, [sp, #24]
    1aa8:	adrp	x1, 0 <inflateStateCheck>
    1aac:	add	x1, x1, #0x0
    1ab0:	str	x1, [x0, #48]
    1ab4:	ldr	x0, [sp, #56]
    1ab8:	mov	w1, #0x3f51                	// #16209
    1abc:	str	w1, [x0, #8]
    1ac0:	b	320c <inflate+0x29a0>
    1ac4:	ldr	x0, [sp, #96]
    1ac8:	and	w1, w0, #0xffff
    1acc:	ldr	x0, [sp, #56]
    1ad0:	str	w1, [x0, #92]
    1ad4:	str	xzr, [sp, #96]
    1ad8:	str	wzr, [sp, #92]
    1adc:	ldr	x0, [sp, #56]
    1ae0:	mov	w1, #0x3f42                	// #16194
    1ae4:	str	w1, [x0, #8]
    1ae8:	ldr	w0, [sp, #20]
    1aec:	cmp	w0, #0x6
    1af0:	b.eq	3278 <inflate+0x2a0c>  // b.none
    1af4:	ldr	x0, [sp, #56]
    1af8:	mov	w1, #0x3f43                	// #16195
    1afc:	str	w1, [x0, #8]
    1b00:	ldr	x0, [sp, #56]
    1b04:	ldr	w0, [x0, #92]
    1b08:	str	w0, [sp, #84]
    1b0c:	ldr	w0, [sp, #84]
    1b10:	cmp	w0, #0x0
    1b14:	b.eq	1bc4 <inflate+0x1358>  // b.none
    1b18:	ldr	w1, [sp, #84]
    1b1c:	ldr	w0, [sp, #108]
    1b20:	cmp	w1, w0
    1b24:	b.ls	1b30 <inflate+0x12c4>  // b.plast
    1b28:	ldr	w0, [sp, #108]
    1b2c:	str	w0, [sp, #84]
    1b30:	ldr	w1, [sp, #84]
    1b34:	ldr	w0, [sp, #104]
    1b38:	cmp	w1, w0
    1b3c:	b.ls	1b48 <inflate+0x12dc>  // b.plast
    1b40:	ldr	w0, [sp, #104]
    1b44:	str	w0, [sp, #84]
    1b48:	ldr	w0, [sp, #84]
    1b4c:	cmp	w0, #0x0
    1b50:	b.eq	3280 <inflate+0x2a14>  // b.none
    1b54:	ldr	w0, [sp, #84]
    1b58:	mov	x2, x0
    1b5c:	ldr	x1, [sp, #120]
    1b60:	ldr	x0, [sp, #112]
    1b64:	bl	0 <memcpy>
    1b68:	ldr	w1, [sp, #108]
    1b6c:	ldr	w0, [sp, #84]
    1b70:	sub	w0, w1, w0
    1b74:	str	w0, [sp, #108]
    1b78:	ldr	w0, [sp, #84]
    1b7c:	ldr	x1, [sp, #120]
    1b80:	add	x0, x1, x0
    1b84:	str	x0, [sp, #120]
    1b88:	ldr	w1, [sp, #104]
    1b8c:	ldr	w0, [sp, #84]
    1b90:	sub	w0, w1, w0
    1b94:	str	w0, [sp, #104]
    1b98:	ldr	w0, [sp, #84]
    1b9c:	ldr	x1, [sp, #112]
    1ba0:	add	x0, x1, x0
    1ba4:	str	x0, [sp, #112]
    1ba8:	ldr	x0, [sp, #56]
    1bac:	ldr	w1, [x0, #92]
    1bb0:	ldr	w0, [sp, #84]
    1bb4:	sub	w1, w1, w0
    1bb8:	ldr	x0, [sp, #56]
    1bbc:	str	w1, [x0, #92]
    1bc0:	b	320c <inflate+0x29a0>
    1bc4:	ldr	x0, [sp, #56]
    1bc8:	mov	w1, #0x3f3f                	// #16191
    1bcc:	str	w1, [x0, #8]
    1bd0:	b	320c <inflate+0x29a0>
    1bd4:	ldr	w0, [sp, #108]
    1bd8:	cmp	w0, #0x0
    1bdc:	b.eq	3288 <inflate+0x2a1c>  // b.none
    1be0:	ldr	w0, [sp, #108]
    1be4:	sub	w0, w0, #0x1
    1be8:	str	w0, [sp, #108]
    1bec:	ldr	x0, [sp, #120]
    1bf0:	add	x1, x0, #0x1
    1bf4:	str	x1, [sp, #120]
    1bf8:	ldrb	w0, [x0]
    1bfc:	and	x1, x0, #0xff
    1c00:	ldr	w0, [sp, #92]
    1c04:	lsl	x0, x1, x0
    1c08:	ldr	x1, [sp, #96]
    1c0c:	add	x0, x1, x0
    1c10:	str	x0, [sp, #96]
    1c14:	ldr	w0, [sp, #92]
    1c18:	add	w0, w0, #0x8
    1c1c:	str	w0, [sp, #92]
    1c20:	ldr	w0, [sp, #92]
    1c24:	cmp	w0, #0xd
    1c28:	b.ls	1bd4 <inflate+0x1368>  // b.plast
    1c2c:	ldr	x0, [sp, #96]
    1c30:	and	w0, w0, #0x1f
    1c34:	add	w1, w0, #0x101
    1c38:	ldr	x0, [sp, #56]
    1c3c:	str	w1, [x0, #132]
    1c40:	ldr	x0, [sp, #96]
    1c44:	lsr	x0, x0, #5
    1c48:	str	x0, [sp, #96]
    1c4c:	ldr	w0, [sp, #92]
    1c50:	sub	w0, w0, #0x5
    1c54:	str	w0, [sp, #92]
    1c58:	ldr	x0, [sp, #96]
    1c5c:	and	w0, w0, #0x1f
    1c60:	add	w1, w0, #0x1
    1c64:	ldr	x0, [sp, #56]
    1c68:	str	w1, [x0, #136]
    1c6c:	ldr	x0, [sp, #96]
    1c70:	lsr	x0, x0, #5
    1c74:	str	x0, [sp, #96]
    1c78:	ldr	w0, [sp, #92]
    1c7c:	sub	w0, w0, #0x5
    1c80:	str	w0, [sp, #92]
    1c84:	ldr	x0, [sp, #96]
    1c88:	and	w0, w0, #0xf
    1c8c:	add	w1, w0, #0x4
    1c90:	ldr	x0, [sp, #56]
    1c94:	str	w1, [x0, #128]
    1c98:	ldr	x0, [sp, #96]
    1c9c:	lsr	x0, x0, #4
    1ca0:	str	x0, [sp, #96]
    1ca4:	ldr	w0, [sp, #92]
    1ca8:	sub	w0, w0, #0x4
    1cac:	str	w0, [sp, #92]
    1cb0:	ldr	x0, [sp, #56]
    1cb4:	ldr	w0, [x0, #132]
    1cb8:	cmp	w0, #0x11e
    1cbc:	b.hi	1cd0 <inflate+0x1464>  // b.pmore
    1cc0:	ldr	x0, [sp, #56]
    1cc4:	ldr	w0, [x0, #136]
    1cc8:	cmp	w0, #0x1e
    1ccc:	b.ls	1cf0 <inflate+0x1484>  // b.plast
    1cd0:	ldr	x0, [sp, #24]
    1cd4:	adrp	x1, 0 <inflateStateCheck>
    1cd8:	add	x1, x1, #0x0
    1cdc:	str	x1, [x0, #48]
    1ce0:	ldr	x0, [sp, #56]
    1ce4:	mov	w1, #0x3f51                	// #16209
    1ce8:	str	w1, [x0, #8]
    1cec:	b	320c <inflate+0x29a0>
    1cf0:	ldr	x0, [sp, #56]
    1cf4:	str	wzr, [x0, #140]
    1cf8:	ldr	x0, [sp, #56]
    1cfc:	mov	w1, #0x3f45                	// #16197
    1d00:	str	w1, [x0, #8]
    1d04:	b	1dcc <inflate+0x1560>
    1d08:	ldr	w0, [sp, #108]
    1d0c:	cmp	w0, #0x0
    1d10:	b.eq	3290 <inflate+0x2a24>  // b.none
    1d14:	ldr	w0, [sp, #108]
    1d18:	sub	w0, w0, #0x1
    1d1c:	str	w0, [sp, #108]
    1d20:	ldr	x0, [sp, #120]
    1d24:	add	x1, x0, #0x1
    1d28:	str	x1, [sp, #120]
    1d2c:	ldrb	w0, [x0]
    1d30:	and	x1, x0, #0xff
    1d34:	ldr	w0, [sp, #92]
    1d38:	lsl	x0, x1, x0
    1d3c:	ldr	x1, [sp, #96]
    1d40:	add	x0, x1, x0
    1d44:	str	x0, [sp, #96]
    1d48:	ldr	w0, [sp, #92]
    1d4c:	add	w0, w0, #0x8
    1d50:	str	w0, [sp, #92]
    1d54:	ldr	w0, [sp, #92]
    1d58:	cmp	w0, #0x2
    1d5c:	b.ls	1d08 <inflate+0x149c>  // b.plast
    1d60:	ldr	x0, [sp, #96]
    1d64:	and	w1, w0, #0xffff
    1d68:	ldr	x0, [sp, #56]
    1d6c:	ldr	w0, [x0, #140]
    1d70:	add	w3, w0, #0x1
    1d74:	ldr	x2, [sp, #56]
    1d78:	str	w3, [x2, #140]
    1d7c:	adrp	x2, 0 <inflateStateCheck>
    1d80:	add	x2, x2, #0x0
    1d84:	mov	w0, w0
    1d88:	ldrh	w0, [x2, x0, lsl #1]
    1d8c:	mov	w3, w0
    1d90:	and	w0, w1, #0x7
    1d94:	and	w2, w0, #0xffff
    1d98:	ldr	x1, [sp, #56]
    1d9c:	sxtw	x0, w3
    1da0:	add	x0, x0, #0x48
    1da4:	lsl	x0, x0, #1
    1da8:	add	x0, x1, x0
    1dac:	mov	w1, w2
    1db0:	strh	w1, [x0, #8]
    1db4:	ldr	x0, [sp, #96]
    1db8:	lsr	x0, x0, #3
    1dbc:	str	x0, [sp, #96]
    1dc0:	ldr	w0, [sp, #92]
    1dc4:	sub	w0, w0, #0x3
    1dc8:	str	w0, [sp, #92]
    1dcc:	ldr	x0, [sp, #56]
    1dd0:	ldr	w1, [x0, #140]
    1dd4:	ldr	x0, [sp, #56]
    1dd8:	ldr	w0, [x0, #128]
    1ddc:	cmp	w1, w0
    1de0:	b.cc	1d54 <inflate+0x14e8>  // b.lo, b.ul, b.last
    1de4:	b	1e24 <inflate+0x15b8>
    1de8:	ldr	x0, [sp, #56]
    1dec:	ldr	w0, [x0, #140]
    1df0:	add	w2, w0, #0x1
    1df4:	ldr	x1, [sp, #56]
    1df8:	str	w2, [x1, #140]
    1dfc:	adrp	x1, 0 <inflateStateCheck>
    1e00:	add	x1, x1, #0x0
    1e04:	mov	w0, w0
    1e08:	ldrh	w0, [x1, x0, lsl #1]
    1e0c:	ldr	x1, [sp, #56]
    1e10:	sxtw	x0, w0
    1e14:	add	x0, x0, #0x48
    1e18:	lsl	x0, x0, #1
    1e1c:	add	x0, x1, x0
    1e20:	strh	wzr, [x0, #8]
    1e24:	ldr	x0, [sp, #56]
    1e28:	ldr	w0, [x0, #140]
    1e2c:	cmp	w0, #0x12
    1e30:	b.ls	1de8 <inflate+0x157c>  // b.plast
    1e34:	ldr	x0, [sp, #56]
    1e38:	add	x1, x0, #0x558
    1e3c:	ldr	x0, [sp, #56]
    1e40:	str	x1, [x0, #144]
    1e44:	ldr	x0, [sp, #56]
    1e48:	ldr	x1, [x0, #144]
    1e4c:	ldr	x0, [sp, #56]
    1e50:	str	x1, [x0, #104]
    1e54:	ldr	x0, [sp, #56]
    1e58:	mov	w1, #0x7                   	// #7
    1e5c:	str	w1, [x0, #120]
    1e60:	ldr	x0, [sp, #56]
    1e64:	add	x1, x0, #0x98
    1e68:	ldr	x0, [sp, #56]
    1e6c:	add	x2, x0, #0x90
    1e70:	ldr	x0, [sp, #56]
    1e74:	add	x3, x0, #0x78
    1e78:	ldr	x0, [sp, #56]
    1e7c:	add	x0, x0, #0x318
    1e80:	mov	x5, x0
    1e84:	mov	x4, x3
    1e88:	mov	x3, x2
    1e8c:	mov	w2, #0x13                  	// #19
    1e90:	mov	w0, #0x0                   	// #0
    1e94:	bl	0 <inflate_table>
    1e98:	str	w0, [sp, #64]
    1e9c:	ldr	w0, [sp, #64]
    1ea0:	cmp	w0, #0x0
    1ea4:	b.eq	1ec8 <inflate+0x165c>  // b.none
    1ea8:	ldr	x0, [sp, #24]
    1eac:	adrp	x1, 0 <inflateStateCheck>
    1eb0:	add	x1, x1, #0x0
    1eb4:	str	x1, [x0, #48]
    1eb8:	ldr	x0, [sp, #56]
    1ebc:	mov	w1, #0x3f51                	// #16209
    1ec0:	str	w1, [x0, #8]
    1ec4:	b	320c <inflate+0x29a0>
    1ec8:	ldr	x0, [sp, #56]
    1ecc:	str	wzr, [x0, #140]
    1ed0:	ldr	x0, [sp, #56]
    1ed4:	mov	w1, #0x3f46                	// #16198
    1ed8:	str	w1, [x0, #8]
    1edc:	b	232c <inflate+0x1ac0>
    1ee0:	ldr	x0, [sp, #56]
    1ee4:	ldr	x1, [x0, #104]
    1ee8:	ldr	x0, [sp, #96]
    1eec:	mov	w3, w0
    1ef0:	ldr	x0, [sp, #56]
    1ef4:	ldr	w0, [x0, #120]
    1ef8:	mov	w2, #0xffffffff            	// #-1
    1efc:	lsl	w0, w2, w0
    1f00:	mvn	w0, w0
    1f04:	and	w0, w3, w0
    1f08:	mov	w0, w0
    1f0c:	lsl	x0, x0, #2
    1f10:	add	x0, x1, x0
    1f14:	ldr	w0, [x0]
    1f18:	str	w0, [sp, #48]
    1f1c:	ldrb	w0, [sp, #49]
    1f20:	mov	w1, w0
    1f24:	ldr	w0, [sp, #92]
    1f28:	cmp	w0, w1
    1f2c:	b.cs	1f80 <inflate+0x1714>  // b.hs, b.nlast
    1f30:	ldr	w0, [sp, #108]
    1f34:	cmp	w0, #0x0
    1f38:	b.eq	3298 <inflate+0x2a2c>  // b.none
    1f3c:	ldr	w0, [sp, #108]
    1f40:	sub	w0, w0, #0x1
    1f44:	str	w0, [sp, #108]
    1f48:	ldr	x0, [sp, #120]
    1f4c:	add	x1, x0, #0x1
    1f50:	str	x1, [sp, #120]
    1f54:	ldrb	w0, [x0]
    1f58:	and	x1, x0, #0xff
    1f5c:	ldr	w0, [sp, #92]
    1f60:	lsl	x0, x1, x0
    1f64:	ldr	x1, [sp, #96]
    1f68:	add	x0, x1, x0
    1f6c:	str	x0, [sp, #96]
    1f70:	ldr	w0, [sp, #92]
    1f74:	add	w0, w0, #0x8
    1f78:	str	w0, [sp, #92]
    1f7c:	b	1ee0 <inflate+0x1674>
    1f80:	nop
    1f84:	ldrh	w0, [sp, #50]
    1f88:	cmp	w0, #0xf
    1f8c:	b.hi	1ff0 <inflate+0x1784>  // b.pmore
    1f90:	ldrb	w0, [sp, #49]
    1f94:	mov	w1, w0
    1f98:	ldr	x0, [sp, #96]
    1f9c:	lsr	x0, x0, x1
    1fa0:	str	x0, [sp, #96]
    1fa4:	ldrb	w0, [sp, #49]
    1fa8:	mov	w1, w0
    1fac:	ldr	w0, [sp, #92]
    1fb0:	sub	w0, w0, w1
    1fb4:	str	w0, [sp, #92]
    1fb8:	ldr	x0, [sp, #56]
    1fbc:	ldr	w0, [x0, #140]
    1fc0:	add	w2, w0, #0x1
    1fc4:	ldr	x1, [sp, #56]
    1fc8:	str	w2, [x1, #140]
    1fcc:	ldrh	w2, [sp, #50]
    1fd0:	ldr	x1, [sp, #56]
    1fd4:	mov	w0, w0
    1fd8:	add	x0, x0, #0x48
    1fdc:	lsl	x0, x0, #1
    1fe0:	add	x0, x1, x0
    1fe4:	mov	w1, w2
    1fe8:	strh	w1, [x0, #8]
    1fec:	b	232c <inflate+0x1ac0>
    1ff0:	ldrh	w0, [sp, #50]
    1ff4:	cmp	w0, #0x10
    1ff8:	b.ne	2110 <inflate+0x18a4>  // b.any
    1ffc:	b	204c <inflate+0x17e0>
    2000:	ldr	w0, [sp, #108]
    2004:	cmp	w0, #0x0
    2008:	b.eq	32a0 <inflate+0x2a34>  // b.none
    200c:	ldr	w0, [sp, #108]
    2010:	sub	w0, w0, #0x1
    2014:	str	w0, [sp, #108]
    2018:	ldr	x0, [sp, #120]
    201c:	add	x1, x0, #0x1
    2020:	str	x1, [sp, #120]
    2024:	ldrb	w0, [x0]
    2028:	and	x1, x0, #0xff
    202c:	ldr	w0, [sp, #92]
    2030:	lsl	x0, x1, x0
    2034:	ldr	x1, [sp, #96]
    2038:	add	x0, x1, x0
    203c:	str	x0, [sp, #96]
    2040:	ldr	w0, [sp, #92]
    2044:	add	w0, w0, #0x8
    2048:	str	w0, [sp, #92]
    204c:	ldrb	w0, [sp, #49]
    2050:	add	w0, w0, #0x2
    2054:	mov	w1, w0
    2058:	ldr	w0, [sp, #92]
    205c:	cmp	w0, w1
    2060:	b.cc	2000 <inflate+0x1794>  // b.lo, b.ul, b.last
    2064:	ldrb	w0, [sp, #49]
    2068:	mov	w1, w0
    206c:	ldr	x0, [sp, #96]
    2070:	lsr	x0, x0, x1
    2074:	str	x0, [sp, #96]
    2078:	ldrb	w0, [sp, #49]
    207c:	mov	w1, w0
    2080:	ldr	w0, [sp, #92]
    2084:	sub	w0, w0, w1
    2088:	str	w0, [sp, #92]
    208c:	ldr	x0, [sp, #56]
    2090:	ldr	w0, [x0, #140]
    2094:	cmp	w0, #0x0
    2098:	b.ne	20bc <inflate+0x1850>  // b.any
    209c:	ldr	x0, [sp, #24]
    20a0:	adrp	x1, 0 <inflateStateCheck>
    20a4:	add	x1, x1, #0x0
    20a8:	str	x1, [x0, #48]
    20ac:	ldr	x0, [sp, #56]
    20b0:	mov	w1, #0x3f51                	// #16209
    20b4:	str	w1, [x0, #8]
    20b8:	b	2350 <inflate+0x1ae4>
    20bc:	ldr	x0, [sp, #56]
    20c0:	ldr	w0, [x0, #140]
    20c4:	sub	w0, w0, #0x1
    20c8:	ldr	x1, [sp, #56]
    20cc:	mov	w0, w0
    20d0:	add	x0, x0, #0x48
    20d4:	lsl	x0, x0, #1
    20d8:	add	x0, x1, x0
    20dc:	ldrh	w0, [x0, #8]
    20e0:	str	w0, [sp, #68]
    20e4:	ldr	x0, [sp, #96]
    20e8:	and	w0, w0, #0x3
    20ec:	add	w0, w0, #0x3
    20f0:	str	w0, [sp, #84]
    20f4:	ldr	x0, [sp, #96]
    20f8:	lsr	x0, x0, #2
    20fc:	str	x0, [sp, #96]
    2100:	ldr	w0, [sp, #92]
    2104:	sub	w0, w0, #0x2
    2108:	str	w0, [sp, #92]
    210c:	b	2294 <inflate+0x1a28>
    2110:	ldrh	w0, [sp, #50]
    2114:	cmp	w0, #0x11
    2118:	b.ne	2228 <inflate+0x19bc>  // b.any
    211c:	b	216c <inflate+0x1900>
    2120:	ldr	w0, [sp, #108]
    2124:	cmp	w0, #0x0
    2128:	b.eq	32a8 <inflate+0x2a3c>  // b.none
    212c:	ldr	w0, [sp, #108]
    2130:	sub	w0, w0, #0x1
    2134:	str	w0, [sp, #108]
    2138:	ldr	x0, [sp, #120]
    213c:	add	x1, x0, #0x1
    2140:	str	x1, [sp, #120]
    2144:	ldrb	w0, [x0]
    2148:	and	x1, x0, #0xff
    214c:	ldr	w0, [sp, #92]
    2150:	lsl	x0, x1, x0
    2154:	ldr	x1, [sp, #96]
    2158:	add	x0, x1, x0
    215c:	str	x0, [sp, #96]
    2160:	ldr	w0, [sp, #92]
    2164:	add	w0, w0, #0x8
    2168:	str	w0, [sp, #92]
    216c:	ldrb	w0, [sp, #49]
    2170:	add	w0, w0, #0x3
    2174:	mov	w1, w0
    2178:	ldr	w0, [sp, #92]
    217c:	cmp	w0, w1
    2180:	b.cc	2120 <inflate+0x18b4>  // b.lo, b.ul, b.last
    2184:	ldrb	w0, [sp, #49]
    2188:	mov	w1, w0
    218c:	ldr	x0, [sp, #96]
    2190:	lsr	x0, x0, x1
    2194:	str	x0, [sp, #96]
    2198:	ldrb	w0, [sp, #49]
    219c:	mov	w1, w0
    21a0:	ldr	w0, [sp, #92]
    21a4:	sub	w0, w0, w1
    21a8:	str	w0, [sp, #92]
    21ac:	str	wzr, [sp, #68]
    21b0:	ldr	x0, [sp, #96]
    21b4:	and	w0, w0, #0x7
    21b8:	add	w0, w0, #0x3
    21bc:	str	w0, [sp, #84]
    21c0:	ldr	x0, [sp, #96]
    21c4:	lsr	x0, x0, #3
    21c8:	str	x0, [sp, #96]
    21cc:	ldr	w0, [sp, #92]
    21d0:	sub	w0, w0, #0x3
    21d4:	str	w0, [sp, #92]
    21d8:	b	2294 <inflate+0x1a28>
    21dc:	ldr	w0, [sp, #108]
    21e0:	cmp	w0, #0x0
    21e4:	b.eq	32b0 <inflate+0x2a44>  // b.none
    21e8:	ldr	w0, [sp, #108]
    21ec:	sub	w0, w0, #0x1
    21f0:	str	w0, [sp, #108]
    21f4:	ldr	x0, [sp, #120]
    21f8:	add	x1, x0, #0x1
    21fc:	str	x1, [sp, #120]
    2200:	ldrb	w0, [x0]
    2204:	and	x1, x0, #0xff
    2208:	ldr	w0, [sp, #92]
    220c:	lsl	x0, x1, x0
    2210:	ldr	x1, [sp, #96]
    2214:	add	x0, x1, x0
    2218:	str	x0, [sp, #96]
    221c:	ldr	w0, [sp, #92]
    2220:	add	w0, w0, #0x8
    2224:	str	w0, [sp, #92]
    2228:	ldrb	w0, [sp, #49]
    222c:	add	w0, w0, #0x7
    2230:	mov	w1, w0
    2234:	ldr	w0, [sp, #92]
    2238:	cmp	w0, w1
    223c:	b.cc	21dc <inflate+0x1970>  // b.lo, b.ul, b.last
    2240:	ldrb	w0, [sp, #49]
    2244:	mov	w1, w0
    2248:	ldr	x0, [sp, #96]
    224c:	lsr	x0, x0, x1
    2250:	str	x0, [sp, #96]
    2254:	ldrb	w0, [sp, #49]
    2258:	mov	w1, w0
    225c:	ldr	w0, [sp, #92]
    2260:	sub	w0, w0, w1
    2264:	str	w0, [sp, #92]
    2268:	str	wzr, [sp, #68]
    226c:	ldr	x0, [sp, #96]
    2270:	and	w0, w0, #0x7f
    2274:	add	w0, w0, #0xb
    2278:	str	w0, [sp, #84]
    227c:	ldr	x0, [sp, #96]
    2280:	lsr	x0, x0, #7
    2284:	str	x0, [sp, #96]
    2288:	ldr	w0, [sp, #92]
    228c:	sub	w0, w0, #0x7
    2290:	str	w0, [sp, #92]
    2294:	ldr	x0, [sp, #56]
    2298:	ldr	w1, [x0, #140]
    229c:	ldr	w0, [sp, #84]
    22a0:	add	w1, w1, w0
    22a4:	ldr	x0, [sp, #56]
    22a8:	ldr	w2, [x0, #132]
    22ac:	ldr	x0, [sp, #56]
    22b0:	ldr	w0, [x0, #136]
    22b4:	add	w0, w2, w0
    22b8:	cmp	w1, w0
    22bc:	b.ls	2318 <inflate+0x1aac>  // b.plast
    22c0:	ldr	x0, [sp, #24]
    22c4:	adrp	x1, 0 <inflateStateCheck>
    22c8:	add	x1, x1, #0x0
    22cc:	str	x1, [x0, #48]
    22d0:	ldr	x0, [sp, #56]
    22d4:	mov	w1, #0x3f51                	// #16209
    22d8:	str	w1, [x0, #8]
    22dc:	b	2350 <inflate+0x1ae4>
    22e0:	ldr	x0, [sp, #56]
    22e4:	ldr	w0, [x0, #140]
    22e8:	add	w2, w0, #0x1
    22ec:	ldr	x1, [sp, #56]
    22f0:	str	w2, [x1, #140]
    22f4:	ldr	w1, [sp, #68]
    22f8:	and	w2, w1, #0xffff
    22fc:	ldr	x1, [sp, #56]
    2300:	mov	w0, w0
    2304:	add	x0, x0, #0x48
    2308:	lsl	x0, x0, #1
    230c:	add	x0, x1, x0
    2310:	mov	w1, w2
    2314:	strh	w1, [x0, #8]
    2318:	ldr	w0, [sp, #84]
    231c:	sub	w1, w0, #0x1
    2320:	str	w1, [sp, #84]
    2324:	cmp	w0, #0x0
    2328:	b.ne	22e0 <inflate+0x1a74>  // b.any
    232c:	ldr	x0, [sp, #56]
    2330:	ldr	w1, [x0, #140]
    2334:	ldr	x0, [sp, #56]
    2338:	ldr	w2, [x0, #132]
    233c:	ldr	x0, [sp, #56]
    2340:	ldr	w0, [x0, #136]
    2344:	add	w0, w2, w0
    2348:	cmp	w1, w0
    234c:	b.cc	1ee0 <inflate+0x1674>  // b.lo, b.ul, b.last
    2350:	ldr	x0, [sp, #56]
    2354:	ldr	w1, [x0, #8]
    2358:	mov	w0, #0x3f51                	// #16209
    235c:	cmp	w1, w0
    2360:	b.eq	31f8 <inflate+0x298c>  // b.none
    2364:	ldr	x0, [sp, #56]
    2368:	ldrh	w0, [x0, #664]
    236c:	cmp	w0, #0x0
    2370:	b.ne	2394 <inflate+0x1b28>  // b.any
    2374:	ldr	x0, [sp, #24]
    2378:	adrp	x1, 0 <inflateStateCheck>
    237c:	add	x1, x1, #0x0
    2380:	str	x1, [x0, #48]
    2384:	ldr	x0, [sp, #56]
    2388:	mov	w1, #0x3f51                	// #16209
    238c:	str	w1, [x0, #8]
    2390:	b	320c <inflate+0x29a0>
    2394:	ldr	x0, [sp, #56]
    2398:	add	x1, x0, #0x558
    239c:	ldr	x0, [sp, #56]
    23a0:	str	x1, [x0, #144]
    23a4:	ldr	x0, [sp, #56]
    23a8:	ldr	x1, [x0, #144]
    23ac:	ldr	x0, [sp, #56]
    23b0:	str	x1, [x0, #104]
    23b4:	ldr	x0, [sp, #56]
    23b8:	mov	w1, #0x9                   	// #9
    23bc:	str	w1, [x0, #120]
    23c0:	ldr	x0, [sp, #56]
    23c4:	add	x1, x0, #0x98
    23c8:	ldr	x0, [sp, #56]
    23cc:	ldr	w2, [x0, #132]
    23d0:	ldr	x0, [sp, #56]
    23d4:	add	x3, x0, #0x90
    23d8:	ldr	x0, [sp, #56]
    23dc:	add	x4, x0, #0x78
    23e0:	ldr	x0, [sp, #56]
    23e4:	add	x0, x0, #0x318
    23e8:	mov	x5, x0
    23ec:	mov	w0, #0x1                   	// #1
    23f0:	bl	0 <inflate_table>
    23f4:	str	w0, [sp, #64]
    23f8:	ldr	w0, [sp, #64]
    23fc:	cmp	w0, #0x0
    2400:	b.eq	2424 <inflate+0x1bb8>  // b.none
    2404:	ldr	x0, [sp, #24]
    2408:	adrp	x1, 0 <inflateStateCheck>
    240c:	add	x1, x1, #0x0
    2410:	str	x1, [x0, #48]
    2414:	ldr	x0, [sp, #56]
    2418:	mov	w1, #0x3f51                	// #16209
    241c:	str	w1, [x0, #8]
    2420:	b	320c <inflate+0x29a0>
    2424:	ldr	x0, [sp, #56]
    2428:	ldr	x1, [x0, #144]
    242c:	ldr	x0, [sp, #56]
    2430:	str	x1, [x0, #112]
    2434:	ldr	x0, [sp, #56]
    2438:	mov	w1, #0x6                   	// #6
    243c:	str	w1, [x0, #124]
    2440:	ldr	x0, [sp, #56]
    2444:	add	x1, x0, #0x98
    2448:	ldr	x0, [sp, #56]
    244c:	ldr	w0, [x0, #132]
    2450:	mov	w0, w0
    2454:	lsl	x0, x0, #1
    2458:	add	x1, x1, x0
    245c:	ldr	x0, [sp, #56]
    2460:	ldr	w2, [x0, #136]
    2464:	ldr	x0, [sp, #56]
    2468:	add	x3, x0, #0x90
    246c:	ldr	x0, [sp, #56]
    2470:	add	x4, x0, #0x7c
    2474:	ldr	x0, [sp, #56]
    2478:	add	x0, x0, #0x318
    247c:	mov	x5, x0
    2480:	mov	w0, #0x2                   	// #2
    2484:	bl	0 <inflate_table>
    2488:	str	w0, [sp, #64]
    248c:	ldr	w0, [sp, #64]
    2490:	cmp	w0, #0x0
    2494:	b.eq	24b8 <inflate+0x1c4c>  // b.none
    2498:	ldr	x0, [sp, #24]
    249c:	adrp	x1, 0 <inflateStateCheck>
    24a0:	add	x1, x1, #0x0
    24a4:	str	x1, [x0, #48]
    24a8:	ldr	x0, [sp, #56]
    24ac:	mov	w1, #0x3f51                	// #16209
    24b0:	str	w1, [x0, #8]
    24b4:	b	320c <inflate+0x29a0>
    24b8:	ldr	x0, [sp, #56]
    24bc:	mov	w1, #0x3f47                	// #16199
    24c0:	str	w1, [x0, #8]
    24c4:	ldr	w0, [sp, #20]
    24c8:	cmp	w0, #0x6
    24cc:	b.eq	32b8 <inflate+0x2a4c>  // b.none
    24d0:	ldr	x0, [sp, #56]
    24d4:	mov	w1, #0x3f48                	// #16200
    24d8:	str	w1, [x0, #8]
    24dc:	ldr	w0, [sp, #108]
    24e0:	cmp	w0, #0x5
    24e4:	b.ls	25b4 <inflate+0x1d48>  // b.plast
    24e8:	ldr	w0, [sp, #104]
    24ec:	cmp	w0, #0x101
    24f0:	b.ls	25b4 <inflate+0x1d48>  // b.plast
    24f4:	ldr	x0, [sp, #24]
    24f8:	ldr	x1, [sp, #112]
    24fc:	str	x1, [x0, #24]
    2500:	ldr	x0, [sp, #24]
    2504:	ldr	w1, [sp, #104]
    2508:	str	w1, [x0, #32]
    250c:	ldr	x0, [sp, #24]
    2510:	ldr	x1, [sp, #120]
    2514:	str	x1, [x0]
    2518:	ldr	x0, [sp, #24]
    251c:	ldr	w1, [sp, #108]
    2520:	str	w1, [x0, #8]
    2524:	ldr	x0, [sp, #56]
    2528:	ldr	x1, [sp, #96]
    252c:	str	x1, [x0, #80]
    2530:	ldr	x0, [sp, #56]
    2534:	ldr	w1, [sp, #92]
    2538:	str	w1, [x0, #88]
    253c:	ldr	w1, [sp, #88]
    2540:	ldr	x0, [sp, #24]
    2544:	bl	0 <inflate_fast>
    2548:	ldr	x0, [sp, #24]
    254c:	ldr	x0, [x0, #24]
    2550:	str	x0, [sp, #112]
    2554:	ldr	x0, [sp, #24]
    2558:	ldr	w0, [x0, #32]
    255c:	str	w0, [sp, #104]
    2560:	ldr	x0, [sp, #24]
    2564:	ldr	x0, [x0]
    2568:	str	x0, [sp, #120]
    256c:	ldr	x0, [sp, #24]
    2570:	ldr	w0, [x0, #8]
    2574:	str	w0, [sp, #108]
    2578:	ldr	x0, [sp, #56]
    257c:	ldr	x0, [x0, #80]
    2580:	str	x0, [sp, #96]
    2584:	ldr	x0, [sp, #56]
    2588:	ldr	w0, [x0, #88]
    258c:	str	w0, [sp, #92]
    2590:	ldr	x0, [sp, #56]
    2594:	ldr	w1, [x0, #8]
    2598:	mov	w0, #0x3f3f                	// #16191
    259c:	cmp	w1, w0
    25a0:	b.ne	3200 <inflate+0x2994>  // b.any
    25a4:	ldr	x0, [sp, #56]
    25a8:	mov	w1, #0xffffffff            	// #-1
    25ac:	str	w1, [x0, #7148]
    25b0:	b	3200 <inflate+0x2994>
    25b4:	ldr	x0, [sp, #56]
    25b8:	str	wzr, [x0, #7148]
    25bc:	ldr	x0, [sp, #56]
    25c0:	ldr	x1, [x0, #104]
    25c4:	ldr	x0, [sp, #96]
    25c8:	mov	w3, w0
    25cc:	ldr	x0, [sp, #56]
    25d0:	ldr	w0, [x0, #120]
    25d4:	mov	w2, #0xffffffff            	// #-1
    25d8:	lsl	w0, w2, w0
    25dc:	mvn	w0, w0
    25e0:	and	w0, w3, w0
    25e4:	mov	w0, w0
    25e8:	lsl	x0, x0, #2
    25ec:	add	x0, x1, x0
    25f0:	ldr	w0, [x0]
    25f4:	str	w0, [sp, #48]
    25f8:	ldrb	w0, [sp, #49]
    25fc:	mov	w1, w0
    2600:	ldr	w0, [sp, #92]
    2604:	cmp	w0, w1
    2608:	b.cs	265c <inflate+0x1df0>  // b.hs, b.nlast
    260c:	ldr	w0, [sp, #108]
    2610:	cmp	w0, #0x0
    2614:	b.eq	32c0 <inflate+0x2a54>  // b.none
    2618:	ldr	w0, [sp, #108]
    261c:	sub	w0, w0, #0x1
    2620:	str	w0, [sp, #108]
    2624:	ldr	x0, [sp, #120]
    2628:	add	x1, x0, #0x1
    262c:	str	x1, [sp, #120]
    2630:	ldrb	w0, [x0]
    2634:	and	x1, x0, #0xff
    2638:	ldr	w0, [sp, #92]
    263c:	lsl	x0, x1, x0
    2640:	ldr	x1, [sp, #96]
    2644:	add	x0, x1, x0
    2648:	str	x0, [sp, #96]
    264c:	ldr	w0, [sp, #92]
    2650:	add	w0, w0, #0x8
    2654:	str	w0, [sp, #92]
    2658:	b	25bc <inflate+0x1d50>
    265c:	nop
    2660:	ldrb	w0, [sp, #48]
    2664:	cmp	w0, #0x0
    2668:	b.eq	2790 <inflate+0x1f24>  // b.none
    266c:	ldrb	w0, [sp, #48]
    2670:	and	w0, w0, #0xf0
    2674:	cmp	w0, #0x0
    2678:	b.ne	2790 <inflate+0x1f24>  // b.any
    267c:	ldr	w0, [sp, #48]
    2680:	str	w0, [sp, #40]
    2684:	ldr	x0, [sp, #56]
    2688:	ldr	x1, [x0, #104]
    268c:	ldrh	w0, [sp, #42]
    2690:	mov	w3, w0
    2694:	ldr	x0, [sp, #96]
    2698:	mov	w4, w0
    269c:	ldrb	w0, [sp, #41]
    26a0:	mov	w2, w0
    26a4:	ldrb	w0, [sp, #40]
    26a8:	add	w0, w2, w0
    26ac:	mov	w2, #0xffffffff            	// #-1
    26b0:	lsl	w0, w2, w0
    26b4:	mvn	w0, w0
    26b8:	and	w0, w4, w0
    26bc:	ldrb	w2, [sp, #41]
    26c0:	lsr	w0, w0, w2
    26c4:	add	w0, w3, w0
    26c8:	mov	w0, w0
    26cc:	lsl	x0, x0, #2
    26d0:	add	x0, x1, x0
    26d4:	ldr	w0, [x0]
    26d8:	str	w0, [sp, #48]
    26dc:	ldrb	w0, [sp, #41]
    26e0:	mov	w1, w0
    26e4:	ldrb	w0, [sp, #49]
    26e8:	add	w0, w1, w0
    26ec:	mov	w1, w0
    26f0:	ldr	w0, [sp, #92]
    26f4:	cmp	w0, w1
    26f8:	b.cs	274c <inflate+0x1ee0>  // b.hs, b.nlast
    26fc:	ldr	w0, [sp, #108]
    2700:	cmp	w0, #0x0
    2704:	b.eq	32c8 <inflate+0x2a5c>  // b.none
    2708:	ldr	w0, [sp, #108]
    270c:	sub	w0, w0, #0x1
    2710:	str	w0, [sp, #108]
    2714:	ldr	x0, [sp, #120]
    2718:	add	x1, x0, #0x1
    271c:	str	x1, [sp, #120]
    2720:	ldrb	w0, [x0]
    2724:	and	x1, x0, #0xff
    2728:	ldr	w0, [sp, #92]
    272c:	lsl	x0, x1, x0
    2730:	ldr	x1, [sp, #96]
    2734:	add	x0, x1, x0
    2738:	str	x0, [sp, #96]
    273c:	ldr	w0, [sp, #92]
    2740:	add	w0, w0, #0x8
    2744:	str	w0, [sp, #92]
    2748:	b	2684 <inflate+0x1e18>
    274c:	nop
    2750:	ldrb	w0, [sp, #41]
    2754:	mov	w1, w0
    2758:	ldr	x0, [sp, #96]
    275c:	lsr	x0, x0, x1
    2760:	str	x0, [sp, #96]
    2764:	ldrb	w0, [sp, #41]
    2768:	mov	w1, w0
    276c:	ldr	w0, [sp, #92]
    2770:	sub	w0, w0, w1
    2774:	str	w0, [sp, #92]
    2778:	ldr	x0, [sp, #56]
    277c:	ldr	w0, [x0, #7148]
    2780:	ldrb	w1, [sp, #41]
    2784:	add	w1, w0, w1
    2788:	ldr	x0, [sp, #56]
    278c:	str	w1, [x0, #7148]
    2790:	ldrb	w0, [sp, #49]
    2794:	mov	w1, w0
    2798:	ldr	x0, [sp, #96]
    279c:	lsr	x0, x0, x1
    27a0:	str	x0, [sp, #96]
    27a4:	ldrb	w0, [sp, #49]
    27a8:	mov	w1, w0
    27ac:	ldr	w0, [sp, #92]
    27b0:	sub	w0, w0, w1
    27b4:	str	w0, [sp, #92]
    27b8:	ldr	x0, [sp, #56]
    27bc:	ldr	w0, [x0, #7148]
    27c0:	ldrb	w1, [sp, #49]
    27c4:	add	w1, w0, w1
    27c8:	ldr	x0, [sp, #56]
    27cc:	str	w1, [x0, #7148]
    27d0:	ldrh	w0, [sp, #50]
    27d4:	mov	w1, w0
    27d8:	ldr	x0, [sp, #56]
    27dc:	str	w1, [x0, #92]
    27e0:	ldrb	w0, [sp, #48]
    27e4:	cmp	w0, #0x0
    27e8:	b.ne	27fc <inflate+0x1f90>  // b.any
    27ec:	ldr	x0, [sp, #56]
    27f0:	mov	w1, #0x3f4d                	// #16205
    27f4:	str	w1, [x0, #8]
    27f8:	b	320c <inflate+0x29a0>
    27fc:	ldrb	w0, [sp, #48]
    2800:	and	w0, w0, #0x20
    2804:	cmp	w0, #0x0
    2808:	b.eq	2828 <inflate+0x1fbc>  // b.none
    280c:	ldr	x0, [sp, #56]
    2810:	mov	w1, #0xffffffff            	// #-1
    2814:	str	w1, [x0, #7148]
    2818:	ldr	x0, [sp, #56]
    281c:	mov	w1, #0x3f3f                	// #16191
    2820:	str	w1, [x0, #8]
    2824:	b	320c <inflate+0x29a0>
    2828:	ldrb	w0, [sp, #48]
    282c:	and	w0, w0, #0x40
    2830:	cmp	w0, #0x0
    2834:	b.eq	2858 <inflate+0x1fec>  // b.none
    2838:	ldr	x0, [sp, #24]
    283c:	adrp	x1, 0 <inflateStateCheck>
    2840:	add	x1, x1, #0x0
    2844:	str	x1, [x0, #48]
    2848:	ldr	x0, [sp, #56]
    284c:	mov	w1, #0x3f51                	// #16209
    2850:	str	w1, [x0, #8]
    2854:	b	320c <inflate+0x29a0>
    2858:	ldrb	w0, [sp, #48]
    285c:	and	w1, w0, #0xf
    2860:	ldr	x0, [sp, #56]
    2864:	str	w1, [x0, #100]
    2868:	ldr	x0, [sp, #56]
    286c:	mov	w1, #0x3f49                	// #16201
    2870:	str	w1, [x0, #8]
    2874:	ldr	x0, [sp, #56]
    2878:	ldr	w0, [x0, #100]
    287c:	cmp	w0, #0x0
    2880:	b.eq	2968 <inflate+0x20fc>  // b.none
    2884:	b	28d4 <inflate+0x2068>
    2888:	ldr	w0, [sp, #108]
    288c:	cmp	w0, #0x0
    2890:	b.eq	32d0 <inflate+0x2a64>  // b.none
    2894:	ldr	w0, [sp, #108]
    2898:	sub	w0, w0, #0x1
    289c:	str	w0, [sp, #108]
    28a0:	ldr	x0, [sp, #120]
    28a4:	add	x1, x0, #0x1
    28a8:	str	x1, [sp, #120]
    28ac:	ldrb	w0, [x0]
    28b0:	and	x1, x0, #0xff
    28b4:	ldr	w0, [sp, #92]
    28b8:	lsl	x0, x1, x0
    28bc:	ldr	x1, [sp, #96]
    28c0:	add	x0, x1, x0
    28c4:	str	x0, [sp, #96]
    28c8:	ldr	w0, [sp, #92]
    28cc:	add	w0, w0, #0x8
    28d0:	str	w0, [sp, #92]
    28d4:	ldr	x0, [sp, #56]
    28d8:	ldr	w0, [x0, #100]
    28dc:	ldr	w1, [sp, #92]
    28e0:	cmp	w1, w0
    28e4:	b.cc	2888 <inflate+0x201c>  // b.lo, b.ul, b.last
    28e8:	ldr	x0, [sp, #56]
    28ec:	ldr	w1, [x0, #92]
    28f0:	ldr	x0, [sp, #96]
    28f4:	mov	w3, w0
    28f8:	ldr	x0, [sp, #56]
    28fc:	ldr	w0, [x0, #100]
    2900:	mov	w2, #0xffffffff            	// #-1
    2904:	lsl	w0, w2, w0
    2908:	mvn	w0, w0
    290c:	and	w0, w3, w0
    2910:	add	w1, w1, w0
    2914:	ldr	x0, [sp, #56]
    2918:	str	w1, [x0, #92]
    291c:	ldr	x0, [sp, #56]
    2920:	ldr	w0, [x0, #100]
    2924:	ldr	x1, [sp, #96]
    2928:	lsr	x0, x1, x0
    292c:	str	x0, [sp, #96]
    2930:	ldr	x0, [sp, #56]
    2934:	ldr	w0, [x0, #100]
    2938:	ldr	w1, [sp, #92]
    293c:	sub	w0, w1, w0
    2940:	str	w0, [sp, #92]
    2944:	ldr	x0, [sp, #56]
    2948:	ldr	w0, [x0, #7148]
    294c:	mov	w1, w0
    2950:	ldr	x0, [sp, #56]
    2954:	ldr	w0, [x0, #100]
    2958:	add	w0, w1, w0
    295c:	mov	w1, w0
    2960:	ldr	x0, [sp, #56]
    2964:	str	w1, [x0, #7148]
    2968:	ldr	x0, [sp, #56]
    296c:	ldr	w1, [x0, #92]
    2970:	ldr	x0, [sp, #56]
    2974:	str	w1, [x0, #7152]
    2978:	ldr	x0, [sp, #56]
    297c:	mov	w1, #0x3f4a                	// #16202
    2980:	str	w1, [x0, #8]
    2984:	ldr	x0, [sp, #56]
    2988:	ldr	x1, [x0, #112]
    298c:	ldr	x0, [sp, #96]
    2990:	mov	w3, w0
    2994:	ldr	x0, [sp, #56]
    2998:	ldr	w0, [x0, #124]
    299c:	mov	w2, #0xffffffff            	// #-1
    29a0:	lsl	w0, w2, w0
    29a4:	mvn	w0, w0
    29a8:	and	w0, w3, w0
    29ac:	mov	w0, w0
    29b0:	lsl	x0, x0, #2
    29b4:	add	x0, x1, x0
    29b8:	ldr	w0, [x0]
    29bc:	str	w0, [sp, #48]
    29c0:	ldrb	w0, [sp, #49]
    29c4:	mov	w1, w0
    29c8:	ldr	w0, [sp, #92]
    29cc:	cmp	w0, w1
    29d0:	b.cs	2a24 <inflate+0x21b8>  // b.hs, b.nlast
    29d4:	ldr	w0, [sp, #108]
    29d8:	cmp	w0, #0x0
    29dc:	b.eq	32d8 <inflate+0x2a6c>  // b.none
    29e0:	ldr	w0, [sp, #108]
    29e4:	sub	w0, w0, #0x1
    29e8:	str	w0, [sp, #108]
    29ec:	ldr	x0, [sp, #120]
    29f0:	add	x1, x0, #0x1
    29f4:	str	x1, [sp, #120]
    29f8:	ldrb	w0, [x0]
    29fc:	and	x1, x0, #0xff
    2a00:	ldr	w0, [sp, #92]
    2a04:	lsl	x0, x1, x0
    2a08:	ldr	x1, [sp, #96]
    2a0c:	add	x0, x1, x0
    2a10:	str	x0, [sp, #96]
    2a14:	ldr	w0, [sp, #92]
    2a18:	add	w0, w0, #0x8
    2a1c:	str	w0, [sp, #92]
    2a20:	b	2984 <inflate+0x2118>
    2a24:	nop
    2a28:	ldrb	w0, [sp, #48]
    2a2c:	and	w0, w0, #0xf0
    2a30:	cmp	w0, #0x0
    2a34:	b.ne	2b4c <inflate+0x22e0>  // b.any
    2a38:	ldr	w0, [sp, #48]
    2a3c:	str	w0, [sp, #40]
    2a40:	ldr	x0, [sp, #56]
    2a44:	ldr	x1, [x0, #112]
    2a48:	ldrh	w0, [sp, #42]
    2a4c:	mov	w3, w0
    2a50:	ldr	x0, [sp, #96]
    2a54:	mov	w4, w0
    2a58:	ldrb	w0, [sp, #41]
    2a5c:	mov	w2, w0
    2a60:	ldrb	w0, [sp, #40]
    2a64:	add	w0, w2, w0
    2a68:	mov	w2, #0xffffffff            	// #-1
    2a6c:	lsl	w0, w2, w0
    2a70:	mvn	w0, w0
    2a74:	and	w0, w4, w0
    2a78:	ldrb	w2, [sp, #41]
    2a7c:	lsr	w0, w0, w2
    2a80:	add	w0, w3, w0
    2a84:	mov	w0, w0
    2a88:	lsl	x0, x0, #2
    2a8c:	add	x0, x1, x0
    2a90:	ldr	w0, [x0]
    2a94:	str	w0, [sp, #48]
    2a98:	ldrb	w0, [sp, #41]
    2a9c:	mov	w1, w0
    2aa0:	ldrb	w0, [sp, #49]
    2aa4:	add	w0, w1, w0
    2aa8:	mov	w1, w0
    2aac:	ldr	w0, [sp, #92]
    2ab0:	cmp	w0, w1
    2ab4:	b.cs	2b08 <inflate+0x229c>  // b.hs, b.nlast
    2ab8:	ldr	w0, [sp, #108]
    2abc:	cmp	w0, #0x0
    2ac0:	b.eq	32e0 <inflate+0x2a74>  // b.none
    2ac4:	ldr	w0, [sp, #108]
    2ac8:	sub	w0, w0, #0x1
    2acc:	str	w0, [sp, #108]
    2ad0:	ldr	x0, [sp, #120]
    2ad4:	add	x1, x0, #0x1
    2ad8:	str	x1, [sp, #120]
    2adc:	ldrb	w0, [x0]
    2ae0:	and	x1, x0, #0xff
    2ae4:	ldr	w0, [sp, #92]
    2ae8:	lsl	x0, x1, x0
    2aec:	ldr	x1, [sp, #96]
    2af0:	add	x0, x1, x0
    2af4:	str	x0, [sp, #96]
    2af8:	ldr	w0, [sp, #92]
    2afc:	add	w0, w0, #0x8
    2b00:	str	w0, [sp, #92]
    2b04:	b	2a40 <inflate+0x21d4>
    2b08:	nop
    2b0c:	ldrb	w0, [sp, #41]
    2b10:	mov	w1, w0
    2b14:	ldr	x0, [sp, #96]
    2b18:	lsr	x0, x0, x1
    2b1c:	str	x0, [sp, #96]
    2b20:	ldrb	w0, [sp, #41]
    2b24:	mov	w1, w0
    2b28:	ldr	w0, [sp, #92]
    2b2c:	sub	w0, w0, w1
    2b30:	str	w0, [sp, #92]
    2b34:	ldr	x0, [sp, #56]
    2b38:	ldr	w0, [x0, #7148]
    2b3c:	ldrb	w1, [sp, #41]
    2b40:	add	w1, w0, w1
    2b44:	ldr	x0, [sp, #56]
    2b48:	str	w1, [x0, #7148]
    2b4c:	ldrb	w0, [sp, #49]
    2b50:	mov	w1, w0
    2b54:	ldr	x0, [sp, #96]
    2b58:	lsr	x0, x0, x1
    2b5c:	str	x0, [sp, #96]
    2b60:	ldrb	w0, [sp, #49]
    2b64:	mov	w1, w0
    2b68:	ldr	w0, [sp, #92]
    2b6c:	sub	w0, w0, w1
    2b70:	str	w0, [sp, #92]
    2b74:	ldr	x0, [sp, #56]
    2b78:	ldr	w0, [x0, #7148]
    2b7c:	ldrb	w1, [sp, #49]
    2b80:	add	w1, w0, w1
    2b84:	ldr	x0, [sp, #56]
    2b88:	str	w1, [x0, #7148]
    2b8c:	ldrb	w0, [sp, #48]
    2b90:	and	w0, w0, #0x40
    2b94:	cmp	w0, #0x0
    2b98:	b.eq	2bbc <inflate+0x2350>  // b.none
    2b9c:	ldr	x0, [sp, #24]
    2ba0:	adrp	x1, 0 <inflateStateCheck>
    2ba4:	add	x1, x1, #0x0
    2ba8:	str	x1, [x0, #48]
    2bac:	ldr	x0, [sp, #56]
    2bb0:	mov	w1, #0x3f51                	// #16209
    2bb4:	str	w1, [x0, #8]
    2bb8:	b	320c <inflate+0x29a0>
    2bbc:	ldrh	w0, [sp, #50]
    2bc0:	mov	w1, w0
    2bc4:	ldr	x0, [sp, #56]
    2bc8:	str	w1, [x0, #96]
    2bcc:	ldrb	w0, [sp, #48]
    2bd0:	and	w1, w0, #0xf
    2bd4:	ldr	x0, [sp, #56]
    2bd8:	str	w1, [x0, #100]
    2bdc:	ldr	x0, [sp, #56]
    2be0:	mov	w1, #0x3f4b                	// #16203
    2be4:	str	w1, [x0, #8]
    2be8:	ldr	x0, [sp, #56]
    2bec:	ldr	w0, [x0, #100]
    2bf0:	cmp	w0, #0x0
    2bf4:	b.eq	2cdc <inflate+0x2470>  // b.none
    2bf8:	b	2c48 <inflate+0x23dc>
    2bfc:	ldr	w0, [sp, #108]
    2c00:	cmp	w0, #0x0
    2c04:	b.eq	32e8 <inflate+0x2a7c>  // b.none
    2c08:	ldr	w0, [sp, #108]
    2c0c:	sub	w0, w0, #0x1
    2c10:	str	w0, [sp, #108]
    2c14:	ldr	x0, [sp, #120]
    2c18:	add	x1, x0, #0x1
    2c1c:	str	x1, [sp, #120]
    2c20:	ldrb	w0, [x0]
    2c24:	and	x1, x0, #0xff
    2c28:	ldr	w0, [sp, #92]
    2c2c:	lsl	x0, x1, x0
    2c30:	ldr	x1, [sp, #96]
    2c34:	add	x0, x1, x0
    2c38:	str	x0, [sp, #96]
    2c3c:	ldr	w0, [sp, #92]
    2c40:	add	w0, w0, #0x8
    2c44:	str	w0, [sp, #92]
    2c48:	ldr	x0, [sp, #56]
    2c4c:	ldr	w0, [x0, #100]
    2c50:	ldr	w1, [sp, #92]
    2c54:	cmp	w1, w0
    2c58:	b.cc	2bfc <inflate+0x2390>  // b.lo, b.ul, b.last
    2c5c:	ldr	x0, [sp, #56]
    2c60:	ldr	w1, [x0, #96]
    2c64:	ldr	x0, [sp, #96]
    2c68:	mov	w3, w0
    2c6c:	ldr	x0, [sp, #56]
    2c70:	ldr	w0, [x0, #100]
    2c74:	mov	w2, #0xffffffff            	// #-1
    2c78:	lsl	w0, w2, w0
    2c7c:	mvn	w0, w0
    2c80:	and	w0, w3, w0
    2c84:	add	w1, w1, w0
    2c88:	ldr	x0, [sp, #56]
    2c8c:	str	w1, [x0, #96]
    2c90:	ldr	x0, [sp, #56]
    2c94:	ldr	w0, [x0, #100]
    2c98:	ldr	x1, [sp, #96]
    2c9c:	lsr	x0, x1, x0
    2ca0:	str	x0, [sp, #96]
    2ca4:	ldr	x0, [sp, #56]
    2ca8:	ldr	w0, [x0, #100]
    2cac:	ldr	w1, [sp, #92]
    2cb0:	sub	w0, w1, w0
    2cb4:	str	w0, [sp, #92]
    2cb8:	ldr	x0, [sp, #56]
    2cbc:	ldr	w0, [x0, #7148]
    2cc0:	mov	w1, w0
    2cc4:	ldr	x0, [sp, #56]
    2cc8:	ldr	w0, [x0, #100]
    2ccc:	add	w0, w1, w0
    2cd0:	mov	w1, w0
    2cd4:	ldr	x0, [sp, #56]
    2cd8:	str	w1, [x0, #7148]
    2cdc:	ldr	x0, [sp, #56]
    2ce0:	mov	w1, #0x3f4c                	// #16204
    2ce4:	str	w1, [x0, #8]
    2ce8:	ldr	w0, [sp, #104]
    2cec:	cmp	w0, #0x0
    2cf0:	b.eq	32f0 <inflate+0x2a84>  // b.none
    2cf4:	ldr	w1, [sp, #88]
    2cf8:	ldr	w0, [sp, #104]
    2cfc:	sub	w0, w1, w0
    2d00:	str	w0, [sp, #84]
    2d04:	ldr	x0, [sp, #56]
    2d08:	ldr	w0, [x0, #96]
    2d0c:	ldr	w1, [sp, #84]
    2d10:	cmp	w1, w0
    2d14:	b.cs	2e08 <inflate+0x259c>  // b.hs, b.nlast
    2d18:	ldr	x0, [sp, #56]
    2d1c:	ldr	w1, [x0, #96]
    2d20:	ldr	w0, [sp, #84]
    2d24:	sub	w0, w1, w0
    2d28:	str	w0, [sp, #84]
    2d2c:	ldr	x0, [sp, #56]
    2d30:	ldr	w0, [x0, #64]
    2d34:	ldr	w1, [sp, #84]
    2d38:	cmp	w1, w0
    2d3c:	b.ls	2d70 <inflate+0x2504>  // b.plast
    2d40:	ldr	x0, [sp, #56]
    2d44:	ldr	w0, [x0, #7144]
    2d48:	cmp	w0, #0x0
    2d4c:	b.eq	2d70 <inflate+0x2504>  // b.none
    2d50:	ldr	x0, [sp, #24]
    2d54:	adrp	x1, 0 <inflateStateCheck>
    2d58:	add	x1, x1, #0x0
    2d5c:	str	x1, [x0, #48]
    2d60:	ldr	x0, [sp, #56]
    2d64:	mov	w1, #0x3f51                	// #16209
    2d68:	str	w1, [x0, #8]
    2d6c:	b	320c <inflate+0x29a0>
    2d70:	ldr	x0, [sp, #56]
    2d74:	ldr	w0, [x0, #68]
    2d78:	ldr	w1, [sp, #84]
    2d7c:	cmp	w1, w0
    2d80:	b.ls	2dc0 <inflate+0x2554>  // b.plast
    2d84:	ldr	x0, [sp, #56]
    2d88:	ldr	w0, [x0, #68]
    2d8c:	ldr	w1, [sp, #84]
    2d90:	sub	w0, w1, w0
    2d94:	str	w0, [sp, #84]
    2d98:	ldr	x0, [sp, #56]
    2d9c:	ldr	x1, [x0, #72]
    2da0:	ldr	x0, [sp, #56]
    2da4:	ldr	w2, [x0, #60]
    2da8:	ldr	w0, [sp, #84]
    2dac:	sub	w0, w2, w0
    2db0:	mov	w0, w0
    2db4:	add	x0, x1, x0
    2db8:	str	x0, [sp, #72]
    2dbc:	b	2de4 <inflate+0x2578>
    2dc0:	ldr	x0, [sp, #56]
    2dc4:	ldr	x1, [x0, #72]
    2dc8:	ldr	x0, [sp, #56]
    2dcc:	ldr	w2, [x0, #68]
    2dd0:	ldr	w0, [sp, #84]
    2dd4:	sub	w0, w2, w0
    2dd8:	mov	w0, w0
    2ddc:	add	x0, x1, x0
    2de0:	str	x0, [sp, #72]
    2de4:	ldr	x0, [sp, #56]
    2de8:	ldr	w0, [x0, #92]
    2dec:	ldr	w1, [sp, #84]
    2df0:	cmp	w1, w0
    2df4:	b.ls	2e30 <inflate+0x25c4>  // b.plast
    2df8:	ldr	x0, [sp, #56]
    2dfc:	ldr	w0, [x0, #92]
    2e00:	str	w0, [sp, #84]
    2e04:	b	2e30 <inflate+0x25c4>
    2e08:	ldr	x0, [sp, #56]
    2e0c:	ldr	w0, [x0, #96]
    2e10:	mov	w0, w0
    2e14:	neg	x0, x0
    2e18:	ldr	x1, [sp, #112]
    2e1c:	add	x0, x1, x0
    2e20:	str	x0, [sp, #72]
    2e24:	ldr	x0, [sp, #56]
    2e28:	ldr	w0, [x0, #92]
    2e2c:	str	w0, [sp, #84]
    2e30:	ldr	w1, [sp, #84]
    2e34:	ldr	w0, [sp, #104]
    2e38:	cmp	w1, w0
    2e3c:	b.ls	2e48 <inflate+0x25dc>  // b.plast
    2e40:	ldr	w0, [sp, #104]
    2e44:	str	w0, [sp, #84]
    2e48:	ldr	w1, [sp, #104]
    2e4c:	ldr	w0, [sp, #84]
    2e50:	sub	w0, w1, w0
    2e54:	str	w0, [sp, #104]
    2e58:	ldr	x0, [sp, #56]
    2e5c:	ldr	w1, [x0, #92]
    2e60:	ldr	w0, [sp, #84]
    2e64:	sub	w1, w1, w0
    2e68:	ldr	x0, [sp, #56]
    2e6c:	str	w1, [x0, #92]
    2e70:	ldr	x1, [sp, #72]
    2e74:	add	x0, x1, #0x1
    2e78:	str	x0, [sp, #72]
    2e7c:	ldr	x0, [sp, #112]
    2e80:	add	x2, x0, #0x1
    2e84:	str	x2, [sp, #112]
    2e88:	ldrb	w1, [x1]
    2e8c:	strb	w1, [x0]
    2e90:	ldr	w0, [sp, #84]
    2e94:	sub	w0, w0, #0x1
    2e98:	str	w0, [sp, #84]
    2e9c:	ldr	w0, [sp, #84]
    2ea0:	cmp	w0, #0x0
    2ea4:	b.ne	2e70 <inflate+0x2604>  // b.any
    2ea8:	ldr	x0, [sp, #56]
    2eac:	ldr	w0, [x0, #92]
    2eb0:	cmp	w0, #0x0
    2eb4:	b.ne	3208 <inflate+0x299c>  // b.any
    2eb8:	ldr	x0, [sp, #56]
    2ebc:	mov	w1, #0x3f48                	// #16200
    2ec0:	str	w1, [x0, #8]
    2ec4:	b	3208 <inflate+0x299c>
    2ec8:	ldr	w0, [sp, #104]
    2ecc:	cmp	w0, #0x0
    2ed0:	b.eq	32f8 <inflate+0x2a8c>  // b.none
    2ed4:	ldr	x0, [sp, #56]
    2ed8:	ldr	w2, [x0, #92]
    2edc:	ldr	x0, [sp, #112]
    2ee0:	add	x1, x0, #0x1
    2ee4:	str	x1, [sp, #112]
    2ee8:	and	w1, w2, #0xff
    2eec:	strb	w1, [x0]
    2ef0:	ldr	w0, [sp, #104]
    2ef4:	sub	w0, w0, #0x1
    2ef8:	str	w0, [sp, #104]
    2efc:	ldr	x0, [sp, #56]
    2f00:	mov	w1, #0x3f48                	// #16200
    2f04:	str	w1, [x0, #8]
    2f08:	b	320c <inflate+0x29a0>
    2f0c:	ldr	x0, [sp, #56]
    2f10:	ldr	w0, [x0, #16]
    2f14:	cmp	w0, #0x0
    2f18:	b.eq	30fc <inflate+0x2890>  // b.none
    2f1c:	b	2f6c <inflate+0x2700>
    2f20:	ldr	w0, [sp, #108]
    2f24:	cmp	w0, #0x0
    2f28:	b.eq	3300 <inflate+0x2a94>  // b.none
    2f2c:	ldr	w0, [sp, #108]
    2f30:	sub	w0, w0, #0x1
    2f34:	str	w0, [sp, #108]
    2f38:	ldr	x0, [sp, #120]
    2f3c:	add	x1, x0, #0x1
    2f40:	str	x1, [sp, #120]
    2f44:	ldrb	w0, [x0]
    2f48:	and	x1, x0, #0xff
    2f4c:	ldr	w0, [sp, #92]
    2f50:	lsl	x0, x1, x0
    2f54:	ldr	x1, [sp, #96]
    2f58:	add	x0, x1, x0
    2f5c:	str	x0, [sp, #96]
    2f60:	ldr	w0, [sp, #92]
    2f64:	add	w0, w0, #0x8
    2f68:	str	w0, [sp, #92]
    2f6c:	ldr	w0, [sp, #92]
    2f70:	cmp	w0, #0x1f
    2f74:	b.ls	2f20 <inflate+0x26b4>  // b.plast
    2f78:	ldr	w1, [sp, #88]
    2f7c:	ldr	w0, [sp, #104]
    2f80:	sub	w0, w1, w0
    2f84:	str	w0, [sp, #88]
    2f88:	ldr	x0, [sp, #24]
    2f8c:	ldr	x1, [x0, #40]
    2f90:	ldr	w0, [sp, #88]
    2f94:	add	x1, x1, x0
    2f98:	ldr	x0, [sp, #24]
    2f9c:	str	x1, [x0, #40]
    2fa0:	ldr	x0, [sp, #56]
    2fa4:	ldr	x1, [x0, #40]
    2fa8:	ldr	w0, [sp, #88]
    2fac:	add	x1, x1, x0
    2fb0:	ldr	x0, [sp, #56]
    2fb4:	str	x1, [x0, #40]
    2fb8:	ldr	x0, [sp, #56]
    2fbc:	ldr	w0, [x0, #16]
    2fc0:	and	w0, w0, #0x4
    2fc4:	cmp	w0, #0x0
    2fc8:	b.eq	3054 <inflate+0x27e8>  // b.none
    2fcc:	ldr	w0, [sp, #88]
    2fd0:	cmp	w0, #0x0
    2fd4:	b.eq	3054 <inflate+0x27e8>  // b.none
    2fd8:	ldr	x0, [sp, #56]
    2fdc:	ldr	w0, [x0, #24]
    2fe0:	cmp	w0, #0x0
    2fe4:	b.eq	3014 <inflate+0x27a8>  // b.none
    2fe8:	ldr	x0, [sp, #56]
    2fec:	ldr	x3, [x0, #32]
    2ff0:	ldr	w0, [sp, #88]
    2ff4:	neg	x0, x0
    2ff8:	ldr	x1, [sp, #112]
    2ffc:	add	x0, x1, x0
    3000:	ldr	w2, [sp, #88]
    3004:	mov	x1, x0
    3008:	mov	x0, x3
    300c:	bl	0 <crc32>
    3010:	b	303c <inflate+0x27d0>
    3014:	ldr	x0, [sp, #56]
    3018:	ldr	x3, [x0, #32]
    301c:	ldr	w0, [sp, #88]
    3020:	neg	x0, x0
    3024:	ldr	x1, [sp, #112]
    3028:	add	x0, x1, x0
    302c:	ldr	w2, [sp, #88]
    3030:	mov	x1, x0
    3034:	mov	x0, x3
    3038:	bl	0 <adler32>
    303c:	ldr	x1, [sp, #56]
    3040:	str	x0, [x1, #32]
    3044:	ldr	x0, [sp, #56]
    3048:	ldr	x1, [x0, #32]
    304c:	ldr	x0, [sp, #24]
    3050:	str	x1, [x0, #96]
    3054:	ldr	w0, [sp, #104]
    3058:	str	w0, [sp, #88]
    305c:	ldr	x0, [sp, #56]
    3060:	ldr	w0, [x0, #16]
    3064:	and	w0, w0, #0x4
    3068:	cmp	w0, #0x0
    306c:	b.eq	30f4 <inflate+0x2888>  // b.none
    3070:	ldr	x0, [sp, #56]
    3074:	ldr	w0, [x0, #24]
    3078:	cmp	w0, #0x0
    307c:	b.ne	30c0 <inflate+0x2854>  // b.any
    3080:	ldr	x0, [sp, #96]
    3084:	lsr	x0, x0, #24
    3088:	and	x1, x0, #0xff
    308c:	ldr	x0, [sp, #96]
    3090:	lsr	x0, x0, #8
    3094:	and	x0, x0, #0xff00
    3098:	orr	x1, x1, x0
    309c:	ldr	x0, [sp, #96]
    30a0:	lsl	x0, x0, #8
    30a4:	and	x0, x0, #0xff0000
    30a8:	add	x1, x1, x0
    30ac:	ldr	x0, [sp, #96]
    30b0:	lsl	x0, x0, #24
    30b4:	and	x0, x0, #0xffffffff
    30b8:	add	x0, x1, x0
    30bc:	b	30c4 <inflate+0x2858>
    30c0:	ldr	x0, [sp, #96]
    30c4:	ldr	x1, [sp, #56]
    30c8:	ldr	x1, [x1, #32]
    30cc:	cmp	x0, x1
    30d0:	b.eq	30f4 <inflate+0x2888>  // b.none
    30d4:	ldr	x0, [sp, #24]
    30d8:	adrp	x1, 0 <inflateStateCheck>
    30dc:	add	x1, x1, #0x0
    30e0:	str	x1, [x0, #48]
    30e4:	ldr	x0, [sp, #56]
    30e8:	mov	w1, #0x3f51                	// #16209
    30ec:	str	w1, [x0, #8]
    30f0:	b	320c <inflate+0x29a0>
    30f4:	str	xzr, [sp, #96]
    30f8:	str	wzr, [sp, #92]
    30fc:	ldr	x0, [sp, #56]
    3100:	mov	w1, #0x3f4f                	// #16207
    3104:	str	w1, [x0, #8]
    3108:	ldr	x0, [sp, #56]
    310c:	ldr	w0, [x0, #16]
    3110:	cmp	w0, #0x0
    3114:	b.eq	31c4 <inflate+0x2958>  // b.none
    3118:	ldr	x0, [sp, #56]
    311c:	ldr	w0, [x0, #24]
    3120:	cmp	w0, #0x0
    3124:	b.eq	31c4 <inflate+0x2958>  // b.none
    3128:	b	3178 <inflate+0x290c>
    312c:	ldr	w0, [sp, #108]
    3130:	cmp	w0, #0x0
    3134:	b.eq	3308 <inflate+0x2a9c>  // b.none
    3138:	ldr	w0, [sp, #108]
    313c:	sub	w0, w0, #0x1
    3140:	str	w0, [sp, #108]
    3144:	ldr	x0, [sp, #120]
    3148:	add	x1, x0, #0x1
    314c:	str	x1, [sp, #120]
    3150:	ldrb	w0, [x0]
    3154:	and	x1, x0, #0xff
    3158:	ldr	w0, [sp, #92]
    315c:	lsl	x0, x1, x0
    3160:	ldr	x1, [sp, #96]
    3164:	add	x0, x1, x0
    3168:	str	x0, [sp, #96]
    316c:	ldr	w0, [sp, #92]
    3170:	add	w0, w0, #0x8
    3174:	str	w0, [sp, #92]
    3178:	ldr	w0, [sp, #92]
    317c:	cmp	w0, #0x1f
    3180:	b.ls	312c <inflate+0x28c0>  // b.plast
    3184:	ldr	x0, [sp, #56]
    3188:	ldr	x0, [x0, #40]
    318c:	and	x0, x0, #0xffffffff
    3190:	ldr	x1, [sp, #96]
    3194:	cmp	x1, x0
    3198:	b.eq	31bc <inflate+0x2950>  // b.none
    319c:	ldr	x0, [sp, #24]
    31a0:	adrp	x1, 0 <inflateStateCheck>
    31a4:	add	x1, x1, #0x0
    31a8:	str	x1, [x0, #48]
    31ac:	ldr	x0, [sp, #56]
    31b0:	mov	w1, #0x3f51                	// #16209
    31b4:	str	w1, [x0, #8]
    31b8:	b	320c <inflate+0x29a0>
    31bc:	str	xzr, [sp, #96]
    31c0:	str	wzr, [sp, #92]
    31c4:	ldr	x0, [sp, #56]
    31c8:	mov	w1, #0x3f50                	// #16208
    31cc:	str	w1, [x0, #8]
    31d0:	mov	w0, #0x1                   	// #1
    31d4:	str	w0, [sp, #64]
    31d8:	b	330c <inflate+0x2aa0>
    31dc:	mov	w0, #0xfffffffd            	// #-3
    31e0:	str	w0, [sp, #64]
    31e4:	b	330c <inflate+0x2aa0>
    31e8:	mov	w0, #0xfffffffc            	// #-4
    31ec:	b	35d0 <inflate+0x2d64>
    31f0:	mov	w0, #0xfffffffe            	// #-2
    31f4:	b	35d0 <inflate+0x2d64>
    31f8:	nop
    31fc:	b	94c <inflate+0xe0>
    3200:	nop
    3204:	b	94c <inflate+0xe0>
    3208:	nop
    320c:	b	94c <inflate+0xe0>
    3210:	nop
    3214:	b	330c <inflate+0x2aa0>
    3218:	nop
    321c:	b	330c <inflate+0x2aa0>
    3220:	nop
    3224:	b	330c <inflate+0x2aa0>
    3228:	nop
    322c:	b	330c <inflate+0x2aa0>
    3230:	nop
    3234:	b	330c <inflate+0x2aa0>
    3238:	nop
    323c:	b	330c <inflate+0x2aa0>
    3240:	nop
    3244:	b	330c <inflate+0x2aa0>
    3248:	nop
    324c:	b	330c <inflate+0x2aa0>
    3250:	nop
    3254:	b	330c <inflate+0x2aa0>
    3258:	nop
    325c:	b	330c <inflate+0x2aa0>
    3260:	nop
    3264:	b	330c <inflate+0x2aa0>
    3268:	nop
    326c:	b	330c <inflate+0x2aa0>
    3270:	nop
    3274:	b	330c <inflate+0x2aa0>
    3278:	nop
    327c:	b	330c <inflate+0x2aa0>
    3280:	nop
    3284:	b	330c <inflate+0x2aa0>
    3288:	nop
    328c:	b	330c <inflate+0x2aa0>
    3290:	nop
    3294:	b	330c <inflate+0x2aa0>
    3298:	nop
    329c:	b	330c <inflate+0x2aa0>
    32a0:	nop
    32a4:	b	330c <inflate+0x2aa0>
    32a8:	nop
    32ac:	b	330c <inflate+0x2aa0>
    32b0:	nop
    32b4:	b	330c <inflate+0x2aa0>
    32b8:	nop
    32bc:	b	330c <inflate+0x2aa0>
    32c0:	nop
    32c4:	b	330c <inflate+0x2aa0>
    32c8:	nop
    32cc:	b	330c <inflate+0x2aa0>
    32d0:	nop
    32d4:	b	330c <inflate+0x2aa0>
    32d8:	nop
    32dc:	b	330c <inflate+0x2aa0>
    32e0:	nop
    32e4:	b	330c <inflate+0x2aa0>
    32e8:	nop
    32ec:	b	330c <inflate+0x2aa0>
    32f0:	nop
    32f4:	b	330c <inflate+0x2aa0>
    32f8:	nop
    32fc:	b	330c <inflate+0x2aa0>
    3300:	nop
    3304:	b	330c <inflate+0x2aa0>
    3308:	nop
    330c:	ldr	x0, [sp, #24]
    3310:	ldr	x1, [sp, #112]
    3314:	str	x1, [x0, #24]
    3318:	ldr	x0, [sp, #24]
    331c:	ldr	w1, [sp, #104]
    3320:	str	w1, [x0, #32]
    3324:	ldr	x0, [sp, #24]
    3328:	ldr	x1, [sp, #120]
    332c:	str	x1, [x0]
    3330:	ldr	x0, [sp, #24]
    3334:	ldr	w1, [sp, #108]
    3338:	str	w1, [x0, #8]
    333c:	ldr	x0, [sp, #56]
    3340:	ldr	x1, [sp, #96]
    3344:	str	x1, [x0, #80]
    3348:	ldr	x0, [sp, #56]
    334c:	ldr	w1, [sp, #92]
    3350:	str	w1, [x0, #88]
    3354:	ldr	x0, [sp, #56]
    3358:	ldr	w0, [x0, #60]
    335c:	cmp	w0, #0x0
    3360:	b.ne	33ac <inflate+0x2b40>  // b.any
    3364:	ldr	x0, [sp, #24]
    3368:	ldr	w0, [x0, #32]
    336c:	ldr	w1, [sp, #88]
    3370:	cmp	w1, w0
    3374:	b.eq	33f0 <inflate+0x2b84>  // b.none
    3378:	ldr	x0, [sp, #56]
    337c:	ldr	w1, [x0, #8]
    3380:	mov	w0, #0x3f50                	// #16208
    3384:	cmp	w1, w0
    3388:	b.hi	33f0 <inflate+0x2b84>  // b.pmore
    338c:	ldr	x0, [sp, #56]
    3390:	ldr	w1, [x0, #8]
    3394:	mov	w0, #0x3f4d                	// #16205
    3398:	cmp	w1, w0
    339c:	b.ls	33ac <inflate+0x2b40>  // b.plast
    33a0:	ldr	w0, [sp, #20]
    33a4:	cmp	w0, #0x4
    33a8:	b.eq	33f0 <inflate+0x2b84>  // b.none
    33ac:	ldr	x0, [sp, #24]
    33b0:	ldr	x3, [x0, #24]
    33b4:	ldr	x0, [sp, #24]
    33b8:	ldr	w0, [x0, #32]
    33bc:	ldr	w1, [sp, #88]
    33c0:	sub	w0, w1, w0
    33c4:	mov	w2, w0
    33c8:	mov	x1, x3
    33cc:	ldr	x0, [sp, #24]
    33d0:	bl	600 <updatewindow>
    33d4:	cmp	w0, #0x0
    33d8:	b.eq	33f0 <inflate+0x2b84>  // b.none
    33dc:	ldr	x0, [sp, #56]
    33e0:	mov	w1, #0x3f52                	// #16210
    33e4:	str	w1, [x0, #8]
    33e8:	mov	w0, #0xfffffffc            	// #-4
    33ec:	b	35d0 <inflate+0x2d64>
    33f0:	ldr	x0, [sp, #24]
    33f4:	ldr	w0, [x0, #8]
    33f8:	ldr	w1, [sp, #52]
    33fc:	sub	w0, w1, w0
    3400:	str	w0, [sp, #52]
    3404:	ldr	x0, [sp, #24]
    3408:	ldr	w0, [x0, #32]
    340c:	ldr	w1, [sp, #88]
    3410:	sub	w0, w1, w0
    3414:	str	w0, [sp, #88]
    3418:	ldr	x0, [sp, #24]
    341c:	ldr	x1, [x0, #16]
    3420:	ldr	w0, [sp, #52]
    3424:	add	x1, x1, x0
    3428:	ldr	x0, [sp, #24]
    342c:	str	x1, [x0, #16]
    3430:	ldr	x0, [sp, #24]
    3434:	ldr	x1, [x0, #40]
    3438:	ldr	w0, [sp, #88]
    343c:	add	x1, x1, x0
    3440:	ldr	x0, [sp, #24]
    3444:	str	x1, [x0, #40]
    3448:	ldr	x0, [sp, #56]
    344c:	ldr	x1, [x0, #40]
    3450:	ldr	w0, [sp, #88]
    3454:	add	x1, x1, x0
    3458:	ldr	x0, [sp, #56]
    345c:	str	x1, [x0, #40]
    3460:	ldr	x0, [sp, #56]
    3464:	ldr	w0, [x0, #16]
    3468:	and	w0, w0, #0x4
    346c:	cmp	w0, #0x0
    3470:	b.eq	3504 <inflate+0x2c98>  // b.none
    3474:	ldr	w0, [sp, #88]
    3478:	cmp	w0, #0x0
    347c:	b.eq	3504 <inflate+0x2c98>  // b.none
    3480:	ldr	x0, [sp, #56]
    3484:	ldr	w0, [x0, #24]
    3488:	cmp	w0, #0x0
    348c:	b.eq	34c0 <inflate+0x2c54>  // b.none
    3490:	ldr	x0, [sp, #56]
    3494:	ldr	x3, [x0, #32]
    3498:	ldr	x0, [sp, #24]
    349c:	ldr	x1, [x0, #24]
    34a0:	ldr	w0, [sp, #88]
    34a4:	neg	x0, x0
    34a8:	add	x0, x1, x0
    34ac:	ldr	w2, [sp, #88]
    34b0:	mov	x1, x0
    34b4:	mov	x0, x3
    34b8:	bl	0 <crc32>
    34bc:	b	34ec <inflate+0x2c80>
    34c0:	ldr	x0, [sp, #56]
    34c4:	ldr	x3, [x0, #32]
    34c8:	ldr	x0, [sp, #24]
    34cc:	ldr	x1, [x0, #24]
    34d0:	ldr	w0, [sp, #88]
    34d4:	neg	x0, x0
    34d8:	add	x0, x1, x0
    34dc:	ldr	w2, [sp, #88]
    34e0:	mov	x1, x0
    34e4:	mov	x0, x3
    34e8:	bl	0 <adler32>
    34ec:	ldr	x1, [sp, #56]
    34f0:	str	x0, [x1, #32]
    34f4:	ldr	x0, [sp, #56]
    34f8:	ldr	x1, [x0, #32]
    34fc:	ldr	x0, [sp, #24]
    3500:	str	x1, [x0, #96]
    3504:	ldr	x0, [sp, #56]
    3508:	ldr	w0, [x0, #88]
    350c:	mov	w1, w0
    3510:	ldr	x0, [sp, #56]
    3514:	ldr	w0, [x0, #12]
    3518:	cmp	w0, #0x0
    351c:	b.eq	3528 <inflate+0x2cbc>  // b.none
    3520:	mov	w0, #0x40                  	// #64
    3524:	b	352c <inflate+0x2cc0>
    3528:	mov	w0, #0x0                   	// #0
    352c:	add	w1, w0, w1
    3530:	ldr	x0, [sp, #56]
    3534:	ldr	w2, [x0, #8]
    3538:	mov	w0, #0x3f3f                	// #16191
    353c:	cmp	w2, w0
    3540:	b.ne	354c <inflate+0x2ce0>  // b.any
    3544:	mov	w0, #0x80                  	// #128
    3548:	b	3550 <inflate+0x2ce4>
    354c:	mov	w0, #0x0                   	// #0
    3550:	add	w1, w0, w1
    3554:	ldr	x0, [sp, #56]
    3558:	ldr	w2, [x0, #8]
    355c:	mov	w0, #0x3f47                	// #16199
    3560:	cmp	w2, w0
    3564:	b.eq	357c <inflate+0x2d10>  // b.none
    3568:	ldr	x0, [sp, #56]
    356c:	ldr	w2, [x0, #8]
    3570:	mov	w0, #0x3f42                	// #16194
    3574:	cmp	w2, w0
    3578:	b.ne	3584 <inflate+0x2d18>  // b.any
    357c:	mov	w0, #0x100                 	// #256
    3580:	b	3588 <inflate+0x2d1c>
    3584:	mov	w0, #0x0                   	// #0
    3588:	add	w1, w0, w1
    358c:	ldr	x0, [sp, #24]
    3590:	str	w1, [x0, #88]
    3594:	ldr	w0, [sp, #52]
    3598:	cmp	w0, #0x0
    359c:	b.ne	35ac <inflate+0x2d40>  // b.any
    35a0:	ldr	w0, [sp, #88]
    35a4:	cmp	w0, #0x0
    35a8:	b.eq	35b8 <inflate+0x2d4c>  // b.none
    35ac:	ldr	w0, [sp, #20]
    35b0:	cmp	w0, #0x4
    35b4:	b.ne	35cc <inflate+0x2d60>  // b.any
    35b8:	ldr	w0, [sp, #64]
    35bc:	cmp	w0, #0x0
    35c0:	b.ne	35cc <inflate+0x2d60>  // b.any
    35c4:	mov	w0, #0xfffffffb            	// #-5
    35c8:	str	w0, [sp, #64]
    35cc:	ldr	w0, [sp, #64]
    35d0:	ldp	x29, x30, [sp], #128
    35d4:	ret

00000000000035d8 <inflateEnd>:
    35d8:	stp	x29, x30, [sp, #-48]!
    35dc:	mov	x29, sp
    35e0:	str	x0, [sp, #24]
    35e4:	ldr	x0, [sp, #24]
    35e8:	bl	0 <inflateStateCheck>
    35ec:	cmp	w0, #0x0
    35f0:	b.eq	35fc <inflateEnd+0x24>  // b.none
    35f4:	mov	w0, #0xfffffffe            	// #-2
    35f8:	b	366c <inflateEnd+0x94>
    35fc:	ldr	x0, [sp, #24]
    3600:	ldr	x0, [x0, #56]
    3604:	str	x0, [sp, #40]
    3608:	ldr	x0, [sp, #40]
    360c:	ldr	x0, [x0, #72]
    3610:	cmp	x0, #0x0
    3614:	b.eq	363c <inflateEnd+0x64>  // b.none
    3618:	ldr	x0, [sp, #24]
    361c:	ldr	x2, [x0, #72]
    3620:	ldr	x0, [sp, #24]
    3624:	ldr	x3, [x0, #80]
    3628:	ldr	x0, [sp, #40]
    362c:	ldr	x0, [x0, #72]
    3630:	mov	x1, x0
    3634:	mov	x0, x3
    3638:	blr	x2
    363c:	ldr	x0, [sp, #24]
    3640:	ldr	x2, [x0, #72]
    3644:	ldr	x0, [sp, #24]
    3648:	ldr	x3, [x0, #80]
    364c:	ldr	x0, [sp, #24]
    3650:	ldr	x0, [x0, #56]
    3654:	mov	x1, x0
    3658:	mov	x0, x3
    365c:	blr	x2
    3660:	ldr	x0, [sp, #24]
    3664:	str	xzr, [x0, #56]
    3668:	mov	w0, #0x0                   	// #0
    366c:	ldp	x29, x30, [sp], #48
    3670:	ret

0000000000003674 <inflateGetDictionary>:
    3674:	stp	x29, x30, [sp, #-64]!
    3678:	mov	x29, sp
    367c:	str	x0, [sp, #40]
    3680:	str	x1, [sp, #32]
    3684:	str	x2, [sp, #24]
    3688:	ldr	x0, [sp, #40]
    368c:	bl	0 <inflateStateCheck>
    3690:	cmp	w0, #0x0
    3694:	b.eq	36a0 <inflateGetDictionary+0x2c>  // b.none
    3698:	mov	w0, #0xfffffffe            	// #-2
    369c:	b	376c <inflateGetDictionary+0xf8>
    36a0:	ldr	x0, [sp, #40]
    36a4:	ldr	x0, [x0, #56]
    36a8:	str	x0, [sp, #56]
    36ac:	ldr	x0, [sp, #56]
    36b0:	ldr	w0, [x0, #64]
    36b4:	cmp	w0, #0x0
    36b8:	b.eq	374c <inflateGetDictionary+0xd8>  // b.none
    36bc:	ldr	x0, [sp, #32]
    36c0:	cmp	x0, #0x0
    36c4:	b.eq	374c <inflateGetDictionary+0xd8>  // b.none
    36c8:	ldr	x0, [sp, #56]
    36cc:	ldr	x1, [x0, #72]
    36d0:	ldr	x0, [sp, #56]
    36d4:	ldr	w0, [x0, #68]
    36d8:	mov	w0, w0
    36dc:	add	x3, x1, x0
    36e0:	ldr	x0, [sp, #56]
    36e4:	ldr	w1, [x0, #64]
    36e8:	ldr	x0, [sp, #56]
    36ec:	ldr	w0, [x0, #68]
    36f0:	sub	w0, w1, w0
    36f4:	mov	w0, w0
    36f8:	mov	x2, x0
    36fc:	mov	x1, x3
    3700:	ldr	x0, [sp, #32]
    3704:	bl	0 <memcpy>
    3708:	ldr	x0, [sp, #56]
    370c:	ldr	w0, [x0, #64]
    3710:	mov	w1, w0
    3714:	ldr	x0, [sp, #56]
    3718:	ldr	w0, [x0, #68]
    371c:	mov	w0, w0
    3720:	sub	x0, x1, x0
    3724:	ldr	x1, [sp, #32]
    3728:	add	x3, x1, x0
    372c:	ldr	x0, [sp, #56]
    3730:	ldr	x1, [x0, #72]
    3734:	ldr	x0, [sp, #56]
    3738:	ldr	w0, [x0, #68]
    373c:	mov	w0, w0
    3740:	mov	x2, x0
    3744:	mov	x0, x3
    3748:	bl	0 <memcpy>
    374c:	ldr	x0, [sp, #24]
    3750:	cmp	x0, #0x0
    3754:	b.eq	3768 <inflateGetDictionary+0xf4>  // b.none
    3758:	ldr	x0, [sp, #56]
    375c:	ldr	w1, [x0, #64]
    3760:	ldr	x0, [sp, #24]
    3764:	str	w1, [x0]
    3768:	mov	w0, #0x0                   	// #0
    376c:	ldp	x29, x30, [sp], #64
    3770:	ret

0000000000003774 <inflateSetDictionary>:
    3774:	stp	x29, x30, [sp, #-80]!
    3778:	mov	x29, sp
    377c:	str	x0, [sp, #40]
    3780:	str	x1, [sp, #32]
    3784:	str	w2, [sp, #28]
    3788:	ldr	x0, [sp, #40]
    378c:	bl	0 <inflateStateCheck>
    3790:	cmp	w0, #0x0
    3794:	b.eq	37a0 <inflateSetDictionary+0x2c>  // b.none
    3798:	mov	w0, #0xfffffffe            	// #-2
    379c:	b	3880 <inflateSetDictionary+0x10c>
    37a0:	ldr	x0, [sp, #40]
    37a4:	ldr	x0, [x0, #56]
    37a8:	str	x0, [sp, #72]
    37ac:	ldr	x0, [sp, #72]
    37b0:	ldr	w0, [x0, #16]
    37b4:	cmp	w0, #0x0
    37b8:	b.eq	37d8 <inflateSetDictionary+0x64>  // b.none
    37bc:	ldr	x0, [sp, #72]
    37c0:	ldr	w1, [x0, #8]
    37c4:	mov	w0, #0x3f3e                	// #16190
    37c8:	cmp	w1, w0
    37cc:	b.eq	37d8 <inflateSetDictionary+0x64>  // b.none
    37d0:	mov	w0, #0xfffffffe            	// #-2
    37d4:	b	3880 <inflateSetDictionary+0x10c>
    37d8:	ldr	x0, [sp, #72]
    37dc:	ldr	w1, [x0, #8]
    37e0:	mov	w0, #0x3f3e                	// #16190
    37e4:	cmp	w1, w0
    37e8:	b.ne	3830 <inflateSetDictionary+0xbc>  // b.any
    37ec:	mov	w2, #0x0                   	// #0
    37f0:	mov	x1, #0x0                   	// #0
    37f4:	mov	x0, #0x0                   	// #0
    37f8:	bl	0 <adler32>
    37fc:	str	x0, [sp, #64]
    3800:	ldr	w2, [sp, #28]
    3804:	ldr	x1, [sp, #32]
    3808:	ldr	x0, [sp, #64]
    380c:	bl	0 <adler32>
    3810:	str	x0, [sp, #64]
    3814:	ldr	x0, [sp, #72]
    3818:	ldr	x0, [x0, #32]
    381c:	ldr	x1, [sp, #64]
    3820:	cmp	x1, x0
    3824:	b.eq	3830 <inflateSetDictionary+0xbc>  // b.none
    3828:	mov	w0, #0xfffffffd            	// #-3
    382c:	b	3880 <inflateSetDictionary+0x10c>
    3830:	ldr	w0, [sp, #28]
    3834:	ldr	x1, [sp, #32]
    3838:	add	x0, x1, x0
    383c:	ldr	w2, [sp, #28]
    3840:	mov	x1, x0
    3844:	ldr	x0, [sp, #40]
    3848:	bl	600 <updatewindow>
    384c:	str	w0, [sp, #60]
    3850:	ldr	w0, [sp, #60]
    3854:	cmp	w0, #0x0
    3858:	b.eq	3870 <inflateSetDictionary+0xfc>  // b.none
    385c:	ldr	x0, [sp, #72]
    3860:	mov	w1, #0x3f52                	// #16210
    3864:	str	w1, [x0, #8]
    3868:	mov	w0, #0xfffffffc            	// #-4
    386c:	b	3880 <inflateSetDictionary+0x10c>
    3870:	ldr	x0, [sp, #72]
    3874:	mov	w1, #0x1                   	// #1
    3878:	str	w1, [x0, #20]
    387c:	mov	w0, #0x0                   	// #0
    3880:	ldp	x29, x30, [sp], #80
    3884:	ret

0000000000003888 <inflateGetHeader>:
    3888:	stp	x29, x30, [sp, #-48]!
    388c:	mov	x29, sp
    3890:	str	x0, [sp, #24]
    3894:	str	x1, [sp, #16]
    3898:	ldr	x0, [sp, #24]
    389c:	bl	0 <inflateStateCheck>
    38a0:	cmp	w0, #0x0
    38a4:	b.eq	38b0 <inflateGetHeader+0x28>  // b.none
    38a8:	mov	w0, #0xfffffffe            	// #-2
    38ac:	b	38f0 <inflateGetHeader+0x68>
    38b0:	ldr	x0, [sp, #24]
    38b4:	ldr	x0, [x0, #56]
    38b8:	str	x0, [sp, #40]
    38bc:	ldr	x0, [sp, #40]
    38c0:	ldr	w0, [x0, #16]
    38c4:	and	w0, w0, #0x2
    38c8:	cmp	w0, #0x0
    38cc:	b.ne	38d8 <inflateGetHeader+0x50>  // b.any
    38d0:	mov	w0, #0xfffffffe            	// #-2
    38d4:	b	38f0 <inflateGetHeader+0x68>
    38d8:	ldr	x0, [sp, #40]
    38dc:	ldr	x1, [sp, #16]
    38e0:	str	x1, [x0, #48]
    38e4:	ldr	x0, [sp, #16]
    38e8:	str	wzr, [x0, #72]
    38ec:	mov	w0, #0x0                   	// #0
    38f0:	ldp	x29, x30, [sp], #48
    38f4:	ret

00000000000038f8 <syncsearch>:
    38f8:	sub	sp, sp, #0x30
    38fc:	str	x0, [sp, #24]
    3900:	str	x1, [sp, #16]
    3904:	str	w2, [sp, #12]
    3908:	ldr	x0, [sp, #24]
    390c:	ldr	w0, [x0]
    3910:	str	w0, [sp, #44]
    3914:	str	wzr, [sp, #40]
    3918:	b	399c <syncsearch+0xa4>
    391c:	ldr	w0, [sp, #40]
    3920:	ldr	x1, [sp, #16]
    3924:	add	x0, x1, x0
    3928:	ldrb	w0, [x0]
    392c:	mov	w1, w0
    3930:	ldr	w0, [sp, #44]
    3934:	cmp	w0, #0x1
    3938:	b.hi	3944 <syncsearch+0x4c>  // b.pmore
    393c:	mov	w0, #0x0                   	// #0
    3940:	b	3948 <syncsearch+0x50>
    3944:	mov	w0, #0xff                  	// #255
    3948:	cmp	w0, w1
    394c:	b.ne	3960 <syncsearch+0x68>  // b.any
    3950:	ldr	w0, [sp, #44]
    3954:	add	w0, w0, #0x1
    3958:	str	w0, [sp, #44]
    395c:	b	3990 <syncsearch+0x98>
    3960:	ldr	w0, [sp, #40]
    3964:	ldr	x1, [sp, #16]
    3968:	add	x0, x1, x0
    396c:	ldrb	w0, [x0]
    3970:	cmp	w0, #0x0
    3974:	b.eq	3980 <syncsearch+0x88>  // b.none
    3978:	str	wzr, [sp, #44]
    397c:	b	3990 <syncsearch+0x98>
    3980:	mov	w1, #0x4                   	// #4
    3984:	ldr	w0, [sp, #44]
    3988:	sub	w0, w1, w0
    398c:	str	w0, [sp, #44]
    3990:	ldr	w0, [sp, #40]
    3994:	add	w0, w0, #0x1
    3998:	str	w0, [sp, #40]
    399c:	ldr	w1, [sp, #40]
    39a0:	ldr	w0, [sp, #12]
    39a4:	cmp	w1, w0
    39a8:	b.cs	39b8 <syncsearch+0xc0>  // b.hs, b.nlast
    39ac:	ldr	w0, [sp, #44]
    39b0:	cmp	w0, #0x3
    39b4:	b.ls	391c <syncsearch+0x24>  // b.plast
    39b8:	ldr	x0, [sp, #24]
    39bc:	ldr	w1, [sp, #44]
    39c0:	str	w1, [x0]
    39c4:	ldr	w0, [sp, #40]
    39c8:	add	sp, sp, #0x30
    39cc:	ret

00000000000039d0 <inflateSync>:
    39d0:	stp	x29, x30, [sp, #-80]!
    39d4:	mov	x29, sp
    39d8:	str	x0, [sp, #24]
    39dc:	ldr	x0, [sp, #24]
    39e0:	bl	0 <inflateStateCheck>
    39e4:	cmp	w0, #0x0
    39e8:	b.eq	39f4 <inflateSync+0x24>  // b.none
    39ec:	mov	w0, #0xfffffffe            	// #-2
    39f0:	b	3bcc <inflateSync+0x1fc>
    39f4:	ldr	x0, [sp, #24]
    39f8:	ldr	x0, [x0, #56]
    39fc:	str	x0, [sp, #64]
    3a00:	ldr	x0, [sp, #24]
    3a04:	ldr	w0, [x0, #8]
    3a08:	cmp	w0, #0x0
    3a0c:	b.ne	3a28 <inflateSync+0x58>  // b.any
    3a10:	ldr	x0, [sp, #64]
    3a14:	ldr	w0, [x0, #88]
    3a18:	cmp	w0, #0x7
    3a1c:	b.hi	3a28 <inflateSync+0x58>  // b.pmore
    3a20:	mov	w0, #0xfffffffb            	// #-5
    3a24:	b	3bcc <inflateSync+0x1fc>
    3a28:	ldr	x0, [sp, #64]
    3a2c:	ldr	w1, [x0, #8]
    3a30:	mov	w0, #0x3f53                	// #16211
    3a34:	cmp	w1, w0
    3a38:	b.eq	3afc <inflateSync+0x12c>  // b.none
    3a3c:	ldr	x0, [sp, #64]
    3a40:	mov	w1, #0x3f53                	// #16211
    3a44:	str	w1, [x0, #8]
    3a48:	ldr	x0, [sp, #64]
    3a4c:	ldr	x1, [x0, #80]
    3a50:	ldr	x0, [sp, #64]
    3a54:	ldr	w0, [x0, #88]
    3a58:	and	w0, w0, #0x7
    3a5c:	lsl	x1, x1, x0
    3a60:	ldr	x0, [sp, #64]
    3a64:	str	x1, [x0, #80]
    3a68:	ldr	x0, [sp, #64]
    3a6c:	ldr	w0, [x0, #88]
    3a70:	and	w1, w0, #0xfffffff8
    3a74:	ldr	x0, [sp, #64]
    3a78:	str	w1, [x0, #88]
    3a7c:	str	wzr, [sp, #76]
    3a80:	b	3ad0 <inflateSync+0x100>
    3a84:	ldr	x0, [sp, #64]
    3a88:	ldr	x2, [x0, #80]
    3a8c:	ldr	w0, [sp, #76]
    3a90:	add	w1, w0, #0x1
    3a94:	str	w1, [sp, #76]
    3a98:	and	w2, w2, #0xff
    3a9c:	mov	w0, w0
    3aa0:	add	x1, sp, #0x28
    3aa4:	strb	w2, [x1, x0]
    3aa8:	ldr	x0, [sp, #64]
    3aac:	ldr	x0, [x0, #80]
    3ab0:	lsr	x1, x0, #8
    3ab4:	ldr	x0, [sp, #64]
    3ab8:	str	x1, [x0, #80]
    3abc:	ldr	x0, [sp, #64]
    3ac0:	ldr	w0, [x0, #88]
    3ac4:	sub	w1, w0, #0x8
    3ac8:	ldr	x0, [sp, #64]
    3acc:	str	w1, [x0, #88]
    3ad0:	ldr	x0, [sp, #64]
    3ad4:	ldr	w0, [x0, #88]
    3ad8:	cmp	w0, #0x7
    3adc:	b.hi	3a84 <inflateSync+0xb4>  // b.pmore
    3ae0:	ldr	x0, [sp, #64]
    3ae4:	str	wzr, [x0, #140]
    3ae8:	ldr	x0, [sp, #64]
    3aec:	add	x0, x0, #0x8c
    3af0:	add	x1, sp, #0x28
    3af4:	ldr	w2, [sp, #76]
    3af8:	bl	38f8 <syncsearch>
    3afc:	ldr	x0, [sp, #64]
    3b00:	add	x3, x0, #0x8c
    3b04:	ldr	x0, [sp, #24]
    3b08:	ldr	x1, [x0]
    3b0c:	ldr	x0, [sp, #24]
    3b10:	ldr	w0, [x0, #8]
    3b14:	mov	w2, w0
    3b18:	mov	x0, x3
    3b1c:	bl	38f8 <syncsearch>
    3b20:	str	w0, [sp, #76]
    3b24:	ldr	x0, [sp, #24]
    3b28:	ldr	w1, [x0, #8]
    3b2c:	ldr	w0, [sp, #76]
    3b30:	sub	w1, w1, w0
    3b34:	ldr	x0, [sp, #24]
    3b38:	str	w1, [x0, #8]
    3b3c:	ldr	x0, [sp, #24]
    3b40:	ldr	x1, [x0]
    3b44:	ldr	w0, [sp, #76]
    3b48:	add	x1, x1, x0
    3b4c:	ldr	x0, [sp, #24]
    3b50:	str	x1, [x0]
    3b54:	ldr	x0, [sp, #24]
    3b58:	ldr	x1, [x0, #16]
    3b5c:	ldr	w0, [sp, #76]
    3b60:	add	x1, x1, x0
    3b64:	ldr	x0, [sp, #24]
    3b68:	str	x1, [x0, #16]
    3b6c:	ldr	x0, [sp, #64]
    3b70:	ldr	w0, [x0, #140]
    3b74:	cmp	w0, #0x4
    3b78:	b.eq	3b84 <inflateSync+0x1b4>  // b.none
    3b7c:	mov	w0, #0xfffffffd            	// #-3
    3b80:	b	3bcc <inflateSync+0x1fc>
    3b84:	ldr	x0, [sp, #24]
    3b88:	ldr	x0, [x0, #16]
    3b8c:	str	x0, [sp, #56]
    3b90:	ldr	x0, [sp, #24]
    3b94:	ldr	x0, [x0, #40]
    3b98:	str	x0, [sp, #48]
    3b9c:	ldr	x0, [sp, #24]
    3ba0:	bl	1c0 <inflateReset>
    3ba4:	ldr	x0, [sp, #24]
    3ba8:	ldr	x1, [sp, #56]
    3bac:	str	x1, [x0, #16]
    3bb0:	ldr	x0, [sp, #24]
    3bb4:	ldr	x1, [sp, #48]
    3bb8:	str	x1, [x0, #40]
    3bbc:	ldr	x0, [sp, #64]
    3bc0:	mov	w1, #0x3f3f                	// #16191
    3bc4:	str	w1, [x0, #8]
    3bc8:	mov	w0, #0x0                   	// #0
    3bcc:	ldp	x29, x30, [sp], #80
    3bd0:	ret

0000000000003bd4 <inflateSyncPoint>:
    3bd4:	stp	x29, x30, [sp, #-48]!
    3bd8:	mov	x29, sp
    3bdc:	str	x0, [sp, #24]
    3be0:	ldr	x0, [sp, #24]
    3be4:	bl	0 <inflateStateCheck>
    3be8:	cmp	w0, #0x0
    3bec:	b.eq	3bf8 <inflateSyncPoint+0x24>  // b.none
    3bf0:	mov	w0, #0xfffffffe            	// #-2
    3bf4:	b	3c34 <inflateSyncPoint+0x60>
    3bf8:	ldr	x0, [sp, #24]
    3bfc:	ldr	x0, [x0, #56]
    3c00:	str	x0, [sp, #40]
    3c04:	ldr	x0, [sp, #40]
    3c08:	ldr	w1, [x0, #8]
    3c0c:	mov	w0, #0x3f41                	// #16193
    3c10:	cmp	w1, w0
    3c14:	b.ne	3c30 <inflateSyncPoint+0x5c>  // b.any
    3c18:	ldr	x0, [sp, #40]
    3c1c:	ldr	w0, [x0, #88]
    3c20:	cmp	w0, #0x0
    3c24:	b.ne	3c30 <inflateSyncPoint+0x5c>  // b.any
    3c28:	mov	w0, #0x1                   	// #1
    3c2c:	b	3c34 <inflateSyncPoint+0x60>
    3c30:	mov	w0, #0x0                   	// #0
    3c34:	ldp	x29, x30, [sp], #48
    3c38:	ret

0000000000003c3c <inflateCopy>:
    3c3c:	stp	x29, x30, [sp, #-64]!
    3c40:	mov	x29, sp
    3c44:	str	x0, [sp, #24]
    3c48:	str	x1, [sp, #16]
    3c4c:	ldr	x0, [sp, #16]
    3c50:	bl	0 <inflateStateCheck>
    3c54:	cmp	w0, #0x0
    3c58:	b.ne	3c68 <inflateCopy+0x2c>  // b.any
    3c5c:	ldr	x0, [sp, #24]
    3c60:	cmp	x0, #0x0
    3c64:	b.ne	3c70 <inflateCopy+0x34>  // b.any
    3c68:	mov	w0, #0xfffffffe            	// #-2
    3c6c:	b	3e58 <inflateCopy+0x21c>
    3c70:	ldr	x0, [sp, #16]
    3c74:	ldr	x0, [x0, #56]
    3c78:	str	x0, [sp, #48]
    3c7c:	ldr	x0, [sp, #16]
    3c80:	ldr	x3, [x0, #64]
    3c84:	ldr	x0, [sp, #16]
    3c88:	ldr	x0, [x0, #80]
    3c8c:	mov	w2, #0x1bf8                	// #7160
    3c90:	mov	w1, #0x1                   	// #1
    3c94:	blr	x3
    3c98:	str	x0, [sp, #40]
    3c9c:	ldr	x0, [sp, #40]
    3ca0:	cmp	x0, #0x0
    3ca4:	b.ne	3cb0 <inflateCopy+0x74>  // b.any
    3ca8:	mov	w0, #0xfffffffc            	// #-4
    3cac:	b	3e58 <inflateCopy+0x21c>
    3cb0:	str	xzr, [sp, #56]
    3cb4:	ldr	x0, [sp, #48]
    3cb8:	ldr	x0, [x0, #72]
    3cbc:	cmp	x0, #0x0
    3cc0:	b.eq	3d24 <inflateCopy+0xe8>  // b.none
    3cc4:	ldr	x0, [sp, #16]
    3cc8:	ldr	x3, [x0, #64]
    3ccc:	ldr	x0, [sp, #16]
    3cd0:	ldr	x4, [x0, #80]
    3cd4:	ldr	x0, [sp, #48]
    3cd8:	ldr	w0, [x0, #56]
    3cdc:	mov	w1, #0x1                   	// #1
    3ce0:	lsl	w0, w1, w0
    3ce4:	mov	w2, #0x1                   	// #1
    3ce8:	mov	w1, w0
    3cec:	mov	x0, x4
    3cf0:	blr	x3
    3cf4:	str	x0, [sp, #56]
    3cf8:	ldr	x0, [sp, #56]
    3cfc:	cmp	x0, #0x0
    3d00:	b.ne	3d24 <inflateCopy+0xe8>  // b.any
    3d04:	ldr	x0, [sp, #16]
    3d08:	ldr	x2, [x0, #72]
    3d0c:	ldr	x0, [sp, #16]
    3d10:	ldr	x0, [x0, #80]
    3d14:	ldr	x1, [sp, #40]
    3d18:	blr	x2
    3d1c:	mov	w0, #0xfffffffc            	// #-4
    3d20:	b	3e58 <inflateCopy+0x21c>
    3d24:	mov	x2, #0x70                  	// #112
    3d28:	ldr	x1, [sp, #16]
    3d2c:	ldr	x0, [sp, #24]
    3d30:	bl	0 <memcpy>
    3d34:	mov	x2, #0x1bf8                	// #7160
    3d38:	ldr	x1, [sp, #48]
    3d3c:	ldr	x0, [sp, #40]
    3d40:	bl	0 <memcpy>
    3d44:	ldr	x0, [sp, #40]
    3d48:	ldr	x1, [sp, #24]
    3d4c:	str	x1, [x0]
    3d50:	ldr	x0, [sp, #48]
    3d54:	ldr	x1, [x0, #104]
    3d58:	ldr	x0, [sp, #48]
    3d5c:	add	x0, x0, #0x558
    3d60:	cmp	x1, x0
    3d64:	b.cc	3dd8 <inflateCopy+0x19c>  // b.lo, b.ul, b.last
    3d68:	ldr	x0, [sp, #48]
    3d6c:	ldr	x1, [x0, #104]
    3d70:	ldr	x0, [sp, #48]
    3d74:	add	x2, x0, #0x558
    3d78:	mov	x0, #0x168c                	// #5772
    3d7c:	add	x0, x2, x0
    3d80:	cmp	x1, x0
    3d84:	b.hi	3dd8 <inflateCopy+0x19c>  // b.pmore
    3d88:	ldr	x0, [sp, #40]
    3d8c:	add	x0, x0, #0x558
    3d90:	ldr	x1, [sp, #48]
    3d94:	ldr	x2, [x1, #104]
    3d98:	ldr	x1, [sp, #48]
    3d9c:	add	x1, x1, #0x558
    3da0:	sub	x1, x2, x1
    3da4:	add	x1, x0, x1
    3da8:	ldr	x0, [sp, #40]
    3dac:	str	x1, [x0, #104]
    3db0:	ldr	x0, [sp, #40]
    3db4:	add	x0, x0, #0x558
    3db8:	ldr	x1, [sp, #48]
    3dbc:	ldr	x2, [x1, #112]
    3dc0:	ldr	x1, [sp, #48]
    3dc4:	add	x1, x1, #0x558
    3dc8:	sub	x1, x2, x1
    3dcc:	add	x1, x0, x1
    3dd0:	ldr	x0, [sp, #40]
    3dd4:	str	x1, [x0, #112]
    3dd8:	ldr	x0, [sp, #40]
    3ddc:	add	x0, x0, #0x558
    3de0:	ldr	x1, [sp, #48]
    3de4:	ldr	x2, [x1, #144]
    3de8:	ldr	x1, [sp, #48]
    3dec:	add	x1, x1, #0x558
    3df0:	sub	x1, x2, x1
    3df4:	add	x1, x0, x1
    3df8:	ldr	x0, [sp, #40]
    3dfc:	str	x1, [x0, #144]
    3e00:	ldr	x0, [sp, #56]
    3e04:	cmp	x0, #0x0
    3e08:	b.eq	3e3c <inflateCopy+0x200>  // b.none
    3e0c:	ldr	x0, [sp, #48]
    3e10:	ldr	w0, [x0, #56]
    3e14:	mov	w1, #0x1                   	// #1
    3e18:	lsl	w0, w1, w0
    3e1c:	str	w0, [sp, #36]
    3e20:	ldr	x0, [sp, #48]
    3e24:	ldr	x0, [x0, #72]
    3e28:	ldr	w1, [sp, #36]
    3e2c:	mov	x2, x1
    3e30:	mov	x1, x0
    3e34:	ldr	x0, [sp, #56]
    3e38:	bl	0 <memcpy>
    3e3c:	ldr	x0, [sp, #40]
    3e40:	ldr	x1, [sp, #56]
    3e44:	str	x1, [x0, #72]
    3e48:	ldr	x0, [sp, #24]
    3e4c:	ldr	x1, [sp, #40]
    3e50:	str	x1, [x0, #56]
    3e54:	mov	w0, #0x0                   	// #0
    3e58:	ldp	x29, x30, [sp], #64
    3e5c:	ret

0000000000003e60 <inflateUndermine>:
    3e60:	stp	x29, x30, [sp, #-48]!
    3e64:	mov	x29, sp
    3e68:	str	x0, [sp, #24]
    3e6c:	str	w1, [sp, #20]
    3e70:	ldr	x0, [sp, #24]
    3e74:	bl	0 <inflateStateCheck>
    3e78:	cmp	w0, #0x0
    3e7c:	b.eq	3e88 <inflateUndermine+0x28>  // b.none
    3e80:	mov	w0, #0xfffffffe            	// #-2
    3e84:	b	3ea4 <inflateUndermine+0x44>
    3e88:	ldr	x0, [sp, #24]
    3e8c:	ldr	x0, [x0, #56]
    3e90:	str	x0, [sp, #40]
    3e94:	ldr	x0, [sp, #40]
    3e98:	mov	w1, #0x1                   	// #1
    3e9c:	str	w1, [x0, #7144]
    3ea0:	mov	w0, #0xfffffffd            	// #-3
    3ea4:	ldp	x29, x30, [sp], #48
    3ea8:	ret

0000000000003eac <inflateValidate>:
    3eac:	stp	x29, x30, [sp, #-48]!
    3eb0:	mov	x29, sp
    3eb4:	str	x0, [sp, #24]
    3eb8:	str	w1, [sp, #20]
    3ebc:	ldr	x0, [sp, #24]
    3ec0:	bl	0 <inflateStateCheck>
    3ec4:	cmp	w0, #0x0
    3ec8:	b.eq	3ed4 <inflateValidate+0x28>  // b.none
    3ecc:	mov	w0, #0xfffffffe            	// #-2
    3ed0:	b	3f1c <inflateValidate+0x70>
    3ed4:	ldr	x0, [sp, #24]
    3ed8:	ldr	x0, [x0, #56]
    3edc:	str	x0, [sp, #40]
    3ee0:	ldr	w0, [sp, #20]
    3ee4:	cmp	w0, #0x0
    3ee8:	b.eq	3f04 <inflateValidate+0x58>  // b.none
    3eec:	ldr	x0, [sp, #40]
    3ef0:	ldr	w0, [x0, #16]
    3ef4:	orr	w1, w0, #0x4
    3ef8:	ldr	x0, [sp, #40]
    3efc:	str	w1, [x0, #16]
    3f00:	b	3f18 <inflateValidate+0x6c>
    3f04:	ldr	x0, [sp, #40]
    3f08:	ldr	w0, [x0, #16]
    3f0c:	and	w1, w0, #0xfffffffb
    3f10:	ldr	x0, [sp, #40]
    3f14:	str	w1, [x0, #16]
    3f18:	mov	w0, #0x0                   	// #0
    3f1c:	ldp	x29, x30, [sp], #48
    3f20:	ret

0000000000003f24 <inflateMark>:
    3f24:	stp	x29, x30, [sp, #-48]!
    3f28:	mov	x29, sp
    3f2c:	str	x0, [sp, #24]
    3f30:	ldr	x0, [sp, #24]
    3f34:	bl	0 <inflateStateCheck>
    3f38:	cmp	w0, #0x0
    3f3c:	b.eq	3f48 <inflateMark+0x24>  // b.none
    3f40:	mov	x0, #0xffffffffffff0000    	// #-65536
    3f44:	b	3fc4 <inflateMark+0xa0>
    3f48:	ldr	x0, [sp, #24]
    3f4c:	ldr	x0, [x0, #56]
    3f50:	str	x0, [sp, #40]
    3f54:	ldr	x0, [sp, #40]
    3f58:	ldr	w0, [x0, #7148]
    3f5c:	sxtw	x0, w0
    3f60:	lsl	x0, x0, #16
    3f64:	mov	x2, x0
    3f68:	ldr	x0, [sp, #40]
    3f6c:	ldr	w1, [x0, #8]
    3f70:	mov	w0, #0x3f43                	// #16195
    3f74:	cmp	w1, w0
    3f78:	b.ne	3f8c <inflateMark+0x68>  // b.any
    3f7c:	ldr	x0, [sp, #40]
    3f80:	ldr	w0, [x0, #92]
    3f84:	mov	w0, w0
    3f88:	b	3fc0 <inflateMark+0x9c>
    3f8c:	ldr	x0, [sp, #40]
    3f90:	ldr	w1, [x0, #8]
    3f94:	mov	w0, #0x3f4c                	// #16204
    3f98:	cmp	w1, w0
    3f9c:	b.ne	3fbc <inflateMark+0x98>  // b.any
    3fa0:	ldr	x0, [sp, #40]
    3fa4:	ldr	w1, [x0, #7152]
    3fa8:	ldr	x0, [sp, #40]
    3fac:	ldr	w0, [x0, #92]
    3fb0:	sub	w0, w1, w0
    3fb4:	mov	w0, w0
    3fb8:	b	3fc0 <inflateMark+0x9c>
    3fbc:	mov	x0, #0x0                   	// #0
    3fc0:	add	x0, x0, x2
    3fc4:	ldp	x29, x30, [sp], #48
    3fc8:	ret

0000000000003fcc <inflateCodesUsed>:
    3fcc:	stp	x29, x30, [sp, #-48]!
    3fd0:	mov	x29, sp
    3fd4:	str	x0, [sp, #24]
    3fd8:	ldr	x0, [sp, #24]
    3fdc:	bl	0 <inflateStateCheck>
    3fe0:	cmp	w0, #0x0
    3fe4:	b.eq	3ff0 <inflateCodesUsed+0x24>  // b.none
    3fe8:	mov	x0, #0xffffffffffffffff    	// #-1
    3fec:	b	4014 <inflateCodesUsed+0x48>
    3ff0:	ldr	x0, [sp, #24]
    3ff4:	ldr	x0, [x0, #56]
    3ff8:	str	x0, [sp, #40]
    3ffc:	ldr	x0, [sp, #40]
    4000:	ldr	x1, [x0, #144]
    4004:	ldr	x0, [sp, #40]
    4008:	add	x0, x0, #0x558
    400c:	sub	x0, x1, x0
    4010:	asr	x0, x0, #2
    4014:	ldp	x29, x30, [sp], #48
    4018:	ret

inftrees.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflate_table>:
   0:	sub	sp, sp, #0xd0
   4:	str	w0, [sp, #44]
   8:	str	x1, [sp, #32]
   c:	str	w2, [sp, #40]
  10:	str	x3, [sp, #24]
  14:	str	x4, [sp, #16]
  18:	str	x5, [sp, #8]
  1c:	str	wzr, [sp, #204]
  20:	b	40 <inflate_table+0x40>
  24:	ldr	w0, [sp, #204]
  28:	lsl	x0, x0, #1
  2c:	add	x1, sp, #0x50
  30:	strh	wzr, [x1, x0]
  34:	ldr	w0, [sp, #204]
  38:	add	w0, w0, #0x1
  3c:	str	w0, [sp, #204]
  40:	ldr	w0, [sp, #204]
  44:	cmp	w0, #0xf
  48:	b.ls	24 <inflate_table+0x24>  // b.plast
  4c:	str	wzr, [sp, #200]
  50:	b	a0 <inflate_table+0xa0>
  54:	ldr	w0, [sp, #200]
  58:	lsl	x0, x0, #1
  5c:	ldr	x1, [sp, #32]
  60:	add	x0, x1, x0
  64:	ldrh	w0, [x0]
  68:	mov	w3, w0
  6c:	sxtw	x0, w3
  70:	lsl	x0, x0, #1
  74:	add	x1, sp, #0x50
  78:	ldrh	w0, [x1, x0]
  7c:	add	w0, w0, #0x1
  80:	and	w2, w0, #0xffff
  84:	sxtw	x0, w3
  88:	lsl	x0, x0, #1
  8c:	add	x1, sp, #0x50
  90:	strh	w2, [x1, x0]
  94:	ldr	w0, [sp, #200]
  98:	add	w0, w0, #0x1
  9c:	str	w0, [sp, #200]
  a0:	ldr	w1, [sp, #200]
  a4:	ldr	w0, [sp, #40]
  a8:	cmp	w1, w0
  ac:	b.cc	54 <inflate_table+0x54>  // b.lo, b.ul, b.last
  b0:	ldr	x0, [sp, #16]
  b4:	ldr	w0, [x0]
  b8:	str	w0, [sp, #188]
  bc:	mov	w0, #0xf                   	// #15
  c0:	str	w0, [sp, #192]
  c4:	b	ec <inflate_table+0xec>
  c8:	ldr	w0, [sp, #192]
  cc:	lsl	x0, x0, #1
  d0:	add	x1, sp, #0x50
  d4:	ldrh	w0, [x1, x0]
  d8:	cmp	w0, #0x0
  dc:	b.ne	fc <inflate_table+0xfc>  // b.any
  e0:	ldr	w0, [sp, #192]
  e4:	sub	w0, w0, #0x1
  e8:	str	w0, [sp, #192]
  ec:	ldr	w0, [sp, #192]
  f0:	cmp	w0, #0x0
  f4:	b.ne	c8 <inflate_table+0xc8>  // b.any
  f8:	b	100 <inflate_table+0x100>
  fc:	nop
 100:	ldr	w1, [sp, #188]
 104:	ldr	w0, [sp, #192]
 108:	cmp	w1, w0
 10c:	b.ls	118 <inflate_table+0x118>  // b.plast
 110:	ldr	w0, [sp, #192]
 114:	str	w0, [sp, #188]
 118:	ldr	w0, [sp, #192]
 11c:	cmp	w0, #0x0
 120:	b.ne	184 <inflate_table+0x184>  // b.any
 124:	mov	w0, #0x40                  	// #64
 128:	strb	w0, [sp, #112]
 12c:	mov	w0, #0x1                   	// #1
 130:	strb	w0, [sp, #113]
 134:	strh	wzr, [sp, #114]
 138:	ldr	x0, [sp, #24]
 13c:	ldr	x0, [x0]
 140:	add	x2, x0, #0x4
 144:	ldr	x1, [sp, #24]
 148:	str	x2, [x1]
 14c:	ldr	w1, [sp, #112]
 150:	str	w1, [x0]
 154:	ldr	x0, [sp, #24]
 158:	ldr	x0, [x0]
 15c:	add	x2, x0, #0x4
 160:	ldr	x1, [sp, #24]
 164:	str	x2, [x1]
 168:	ldr	w1, [sp, #112]
 16c:	str	w1, [x0]
 170:	ldr	x0, [sp, #16]
 174:	mov	w1, #0x1                   	// #1
 178:	str	w1, [x0]
 17c:	mov	w0, #0x0                   	// #0
 180:	b	92c <inflate_table+0x92c>
 184:	mov	w0, #0x1                   	// #1
 188:	str	w0, [sp, #196]
 18c:	b	1b4 <inflate_table+0x1b4>
 190:	ldr	w0, [sp, #196]
 194:	lsl	x0, x0, #1
 198:	add	x1, sp, #0x50
 19c:	ldrh	w0, [x1, x0]
 1a0:	cmp	w0, #0x0
 1a4:	b.ne	1c8 <inflate_table+0x1c8>  // b.any
 1a8:	ldr	w0, [sp, #196]
 1ac:	add	w0, w0, #0x1
 1b0:	str	w0, [sp, #196]
 1b4:	ldr	w1, [sp, #196]
 1b8:	ldr	w0, [sp, #192]
 1bc:	cmp	w1, w0
 1c0:	b.cc	190 <inflate_table+0x190>  // b.lo, b.ul, b.last
 1c4:	b	1cc <inflate_table+0x1cc>
 1c8:	nop
 1cc:	ldr	w1, [sp, #188]
 1d0:	ldr	w0, [sp, #196]
 1d4:	cmp	w1, w0
 1d8:	b.cs	1e4 <inflate_table+0x1e4>  // b.hs, b.nlast
 1dc:	ldr	w0, [sp, #196]
 1e0:	str	w0, [sp, #188]
 1e4:	mov	w0, #0x1                   	// #1
 1e8:	str	w0, [sp, #176]
 1ec:	mov	w0, #0x1                   	// #1
 1f0:	str	w0, [sp, #204]
 1f4:	b	244 <inflate_table+0x244>
 1f8:	ldr	w0, [sp, #176]
 1fc:	lsl	w0, w0, #1
 200:	str	w0, [sp, #176]
 204:	ldr	w0, [sp, #204]
 208:	lsl	x0, x0, #1
 20c:	add	x1, sp, #0x50
 210:	ldrh	w0, [x1, x0]
 214:	mov	w1, w0
 218:	ldr	w0, [sp, #176]
 21c:	sub	w0, w0, w1
 220:	str	w0, [sp, #176]
 224:	ldr	w0, [sp, #176]
 228:	cmp	w0, #0x0
 22c:	b.ge	238 <inflate_table+0x238>  // b.tcont
 230:	mov	w0, #0xffffffff            	// #-1
 234:	b	92c <inflate_table+0x92c>
 238:	ldr	w0, [sp, #204]
 23c:	add	w0, w0, #0x1
 240:	str	w0, [sp, #204]
 244:	ldr	w0, [sp, #204]
 248:	cmp	w0, #0xf
 24c:	b.ls	1f8 <inflate_table+0x1f8>  // b.plast
 250:	ldr	w0, [sp, #176]
 254:	cmp	w0, #0x0
 258:	b.le	27c <inflate_table+0x27c>
 25c:	ldr	w0, [sp, #44]
 260:	cmp	w0, #0x0
 264:	b.eq	274 <inflate_table+0x274>  // b.none
 268:	ldr	w0, [sp, #192]
 26c:	cmp	w0, #0x1
 270:	b.eq	27c <inflate_table+0x27c>  // b.none
 274:	mov	w0, #0xffffffff            	// #-1
 278:	b	92c <inflate_table+0x92c>
 27c:	strh	wzr, [sp, #50]
 280:	mov	w0, #0x1                   	// #1
 284:	str	w0, [sp, #204]
 288:	b	2d8 <inflate_table+0x2d8>
 28c:	ldr	w0, [sp, #204]
 290:	lsl	x0, x0, #1
 294:	add	x1, sp, #0x30
 298:	ldrh	w1, [x1, x0]
 29c:	ldr	w0, [sp, #204]
 2a0:	lsl	x0, x0, #1
 2a4:	add	x2, sp, #0x50
 2a8:	ldrh	w0, [x2, x0]
 2ac:	ldr	w2, [sp, #204]
 2b0:	add	w3, w2, #0x1
 2b4:	add	w0, w1, w0
 2b8:	and	w2, w0, #0xffff
 2bc:	mov	w0, w3
 2c0:	lsl	x0, x0, #1
 2c4:	add	x1, sp, #0x30
 2c8:	strh	w2, [x1, x0]
 2cc:	ldr	w0, [sp, #204]
 2d0:	add	w0, w0, #0x1
 2d4:	str	w0, [sp, #204]
 2d8:	ldr	w0, [sp, #204]
 2dc:	cmp	w0, #0xe
 2e0:	b.ls	28c <inflate_table+0x28c>  // b.plast
 2e4:	str	wzr, [sp, #200]
 2e8:	b	370 <inflate_table+0x370>
 2ec:	ldr	w0, [sp, #200]
 2f0:	lsl	x0, x0, #1
 2f4:	ldr	x1, [sp, #32]
 2f8:	add	x0, x1, x0
 2fc:	ldrh	w0, [x0]
 300:	cmp	w0, #0x0
 304:	b.eq	364 <inflate_table+0x364>  // b.none
 308:	ldr	w0, [sp, #200]
 30c:	lsl	x0, x0, #1
 310:	ldr	x1, [sp, #32]
 314:	add	x0, x1, x0
 318:	ldrh	w0, [x0]
 31c:	mov	w2, w0
 320:	sxtw	x0, w2
 324:	lsl	x0, x0, #1
 328:	add	x1, sp, #0x30
 32c:	ldrh	w0, [x1, x0]
 330:	add	w1, w0, #0x1
 334:	and	w3, w1, #0xffff
 338:	sxtw	x1, w2
 33c:	lsl	x1, x1, #1
 340:	add	x2, sp, #0x30
 344:	strh	w3, [x2, x1]
 348:	and	x0, x0, #0xffff
 34c:	lsl	x0, x0, #1
 350:	ldr	x1, [sp, #8]
 354:	add	x0, x1, x0
 358:	ldr	w1, [sp, #200]
 35c:	and	w1, w1, #0xffff
 360:	strh	w1, [x0]
 364:	ldr	w0, [sp, #200]
 368:	add	w0, w0, #0x1
 36c:	str	w0, [sp, #200]
 370:	ldr	w1, [sp, #200]
 374:	ldr	w0, [sp, #40]
 378:	cmp	w1, w0
 37c:	b.cc	2ec <inflate_table+0x2ec>  // b.lo, b.ul, b.last
 380:	ldr	w0, [sp, #44]
 384:	cmp	w0, #0x0
 388:	b.eq	39c <inflate_table+0x39c>  // b.none
 38c:	ldr	w0, [sp, #44]
 390:	cmp	w0, #0x1
 394:	b.eq	3b8 <inflate_table+0x3b8>  // b.none
 398:	b	3dc <inflate_table+0x3dc>
 39c:	ldr	x0, [sp, #8]
 3a0:	str	x0, [sp, #128]
 3a4:	ldr	x0, [sp, #128]
 3a8:	str	x0, [sp, #136]
 3ac:	mov	w0, #0x14                  	// #20
 3b0:	str	w0, [sp, #124]
 3b4:	b	3f8 <inflate_table+0x3f8>
 3b8:	adrp	x0, 0 <inflate_table>
 3bc:	add	x0, x0, #0x0
 3c0:	str	x0, [sp, #136]
 3c4:	adrp	x0, 0 <inflate_table>
 3c8:	add	x0, x0, #0x0
 3cc:	str	x0, [sp, #128]
 3d0:	mov	w0, #0x101                 	// #257
 3d4:	str	w0, [sp, #124]
 3d8:	b	3f8 <inflate_table+0x3f8>
 3dc:	adrp	x0, 0 <inflate_table>
 3e0:	add	x0, x0, #0x0
 3e4:	str	x0, [sp, #136]
 3e8:	adrp	x0, 0 <inflate_table>
 3ec:	add	x0, x0, #0x0
 3f0:	str	x0, [sp, #128]
 3f4:	str	wzr, [sp, #124]
 3f8:	str	wzr, [sp, #168]
 3fc:	str	wzr, [sp, #200]
 400:	ldr	w0, [sp, #196]
 404:	str	w0, [sp, #204]
 408:	ldr	x0, [sp, #24]
 40c:	ldr	x0, [x0]
 410:	str	x0, [sp, #144]
 414:	ldr	w0, [sp, #188]
 418:	str	w0, [sp, #184]
 41c:	str	wzr, [sp, #180]
 420:	mov	w0, #0xffffffff            	// #-1
 424:	str	w0, [sp, #156]
 428:	ldr	w0, [sp, #188]
 42c:	mov	w1, #0x1                   	// #1
 430:	lsl	w0, w1, w0
 434:	str	w0, [sp, #172]
 438:	ldr	w0, [sp, #172]
 43c:	sub	w0, w0, #0x1
 440:	str	w0, [sp, #120]
 444:	ldr	w0, [sp, #44]
 448:	cmp	w0, #0x1
 44c:	b.ne	45c <inflate_table+0x45c>  // b.any
 450:	ldr	w0, [sp, #172]
 454:	cmp	w0, #0x354
 458:	b.hi	474 <inflate_table+0x474>  // b.pmore
 45c:	ldr	w0, [sp, #44]
 460:	cmp	w0, #0x2
 464:	b.ne	47c <inflate_table+0x47c>  // b.any
 468:	ldr	w0, [sp, #172]
 46c:	cmp	w0, #0x250
 470:	b.ls	47c <inflate_table+0x47c>  // b.plast
 474:	mov	w0, #0x1                   	// #1
 478:	b	92c <inflate_table+0x92c>
 47c:	ldr	w0, [sp, #204]
 480:	and	w1, w0, #0xff
 484:	ldr	w0, [sp, #180]
 488:	and	w0, w0, #0xff
 48c:	sub	w0, w1, w0
 490:	and	w0, w0, #0xff
 494:	strb	w0, [sp, #113]
 498:	ldr	w0, [sp, #200]
 49c:	lsl	x0, x0, #1
 4a0:	ldr	x1, [sp, #8]
 4a4:	add	x0, x1, x0
 4a8:	ldrh	w0, [x0]
 4ac:	add	w0, w0, #0x1
 4b0:	ldr	w1, [sp, #124]
 4b4:	cmp	w1, w0
 4b8:	b.ls	4dc <inflate_table+0x4dc>  // b.plast
 4bc:	strb	wzr, [sp, #112]
 4c0:	ldr	w0, [sp, #200]
 4c4:	lsl	x0, x0, #1
 4c8:	ldr	x1, [sp, #8]
 4cc:	add	x0, x1, x0
 4d0:	ldrh	w0, [x0]
 4d4:	strh	w0, [sp, #114]
 4d8:	b	584 <inflate_table+0x584>
 4dc:	ldr	w0, [sp, #200]
 4e0:	lsl	x0, x0, #1
 4e4:	ldr	x1, [sp, #8]
 4e8:	add	x0, x1, x0
 4ec:	ldrh	w0, [x0]
 4f0:	mov	w1, w0
 4f4:	ldr	w0, [sp, #124]
 4f8:	cmp	w0, w1
 4fc:	b.hi	578 <inflate_table+0x578>  // b.pmore
 500:	ldr	w0, [sp, #200]
 504:	lsl	x0, x0, #1
 508:	ldr	x1, [sp, #8]
 50c:	add	x0, x1, x0
 510:	ldrh	w0, [x0]
 514:	mov	w1, w0
 518:	ldr	w0, [sp, #124]
 51c:	sub	w0, w1, w0
 520:	mov	w0, w0
 524:	lsl	x0, x0, #1
 528:	ldr	x1, [sp, #128]
 52c:	add	x0, x1, x0
 530:	ldrh	w0, [x0]
 534:	and	w0, w0, #0xff
 538:	strb	w0, [sp, #112]
 53c:	ldr	w0, [sp, #200]
 540:	lsl	x0, x0, #1
 544:	ldr	x1, [sp, #8]
 548:	add	x0, x1, x0
 54c:	ldrh	w0, [x0]
 550:	mov	w1, w0
 554:	ldr	w0, [sp, #124]
 558:	sub	w0, w1, w0
 55c:	mov	w0, w0
 560:	lsl	x0, x0, #1
 564:	ldr	x1, [sp, #136]
 568:	add	x0, x1, x0
 56c:	ldrh	w0, [x0]
 570:	strh	w0, [sp, #114]
 574:	b	584 <inflate_table+0x584>
 578:	mov	w0, #0x60                  	// #96
 57c:	strb	w0, [sp, #112]
 580:	strh	wzr, [sp, #114]
 584:	ldr	w1, [sp, #204]
 588:	ldr	w0, [sp, #180]
 58c:	sub	w0, w1, w0
 590:	mov	w1, #0x1                   	// #1
 594:	lsl	w0, w1, w0
 598:	str	w0, [sp, #164]
 59c:	ldr	w0, [sp, #184]
 5a0:	mov	w1, #0x1                   	// #1
 5a4:	lsl	w0, w1, w0
 5a8:	str	w0, [sp, #160]
 5ac:	ldr	w0, [sp, #160]
 5b0:	str	w0, [sp, #196]
 5b4:	ldr	w1, [sp, #160]
 5b8:	ldr	w0, [sp, #164]
 5bc:	sub	w0, w1, w0
 5c0:	str	w0, [sp, #160]
 5c4:	ldr	w0, [sp, #180]
 5c8:	ldr	w1, [sp, #168]
 5cc:	lsr	w1, w1, w0
 5d0:	ldr	w0, [sp, #160]
 5d4:	add	w0, w1, w0
 5d8:	mov	w0, w0
 5dc:	lsl	x0, x0, #2
 5e0:	ldr	x1, [sp, #144]
 5e4:	add	x0, x1, x0
 5e8:	ldr	w1, [sp, #112]
 5ec:	str	w1, [x0]
 5f0:	ldr	w0, [sp, #160]
 5f4:	cmp	w0, #0x0
 5f8:	b.ne	5b4 <inflate_table+0x5b4>  // b.any
 5fc:	ldr	w0, [sp, #204]
 600:	sub	w0, w0, #0x1
 604:	mov	w1, #0x1                   	// #1
 608:	lsl	w0, w1, w0
 60c:	str	w0, [sp, #164]
 610:	b	620 <inflate_table+0x620>
 614:	ldr	w0, [sp, #164]
 618:	lsr	w0, w0, #1
 61c:	str	w0, [sp, #164]
 620:	ldr	w1, [sp, #168]
 624:	ldr	w0, [sp, #164]
 628:	and	w0, w1, w0
 62c:	cmp	w0, #0x0
 630:	b.ne	614 <inflate_table+0x614>  // b.any
 634:	ldr	w0, [sp, #164]
 638:	cmp	w0, #0x0
 63c:	b.eq	668 <inflate_table+0x668>  // b.none
 640:	ldr	w0, [sp, #164]
 644:	sub	w0, w0, #0x1
 648:	ldr	w1, [sp, #168]
 64c:	and	w0, w1, w0
 650:	str	w0, [sp, #168]
 654:	ldr	w1, [sp, #168]
 658:	ldr	w0, [sp, #164]
 65c:	add	w0, w1, w0
 660:	str	w0, [sp, #168]
 664:	b	66c <inflate_table+0x66c>
 668:	str	wzr, [sp, #168]
 66c:	ldr	w0, [sp, #200]
 670:	add	w0, w0, #0x1
 674:	str	w0, [sp, #200]
 678:	ldr	w0, [sp, #204]
 67c:	lsl	x0, x0, #1
 680:	add	x1, sp, #0x50
 684:	ldrh	w0, [x1, x0]
 688:	sub	w0, w0, #0x1
 68c:	and	w2, w0, #0xffff
 690:	ldr	w0, [sp, #204]
 694:	lsl	x0, x0, #1
 698:	add	x1, sp, #0x50
 69c:	strh	w2, [x1, x0]
 6a0:	ldr	w0, [sp, #204]
 6a4:	lsl	x0, x0, #1
 6a8:	add	x1, sp, #0x50
 6ac:	ldrh	w0, [x1, x0]
 6b0:	cmp	w0, #0x0
 6b4:	b.ne	6f4 <inflate_table+0x6f4>  // b.any
 6b8:	ldr	w1, [sp, #204]
 6bc:	ldr	w0, [sp, #192]
 6c0:	cmp	w1, w0
 6c4:	b.eq	8b0 <inflate_table+0x8b0>  // b.none
 6c8:	ldr	w0, [sp, #200]
 6cc:	lsl	x0, x0, #1
 6d0:	ldr	x1, [sp, #8]
 6d4:	add	x0, x1, x0
 6d8:	ldrh	w0, [x0]
 6dc:	and	x0, x0, #0xffff
 6e0:	lsl	x0, x0, #1
 6e4:	ldr	x1, [sp, #32]
 6e8:	add	x0, x1, x0
 6ec:	ldrh	w0, [x0]
 6f0:	str	w0, [sp, #204]
 6f4:	ldr	w1, [sp, #204]
 6f8:	ldr	w0, [sp, #188]
 6fc:	cmp	w1, w0
 700:	b.ls	47c <inflate_table+0x47c>  // b.plast
 704:	ldr	w1, [sp, #168]
 708:	ldr	w0, [sp, #120]
 70c:	and	w0, w1, w0
 710:	ldr	w1, [sp, #156]
 714:	cmp	w1, w0
 718:	b.eq	47c <inflate_table+0x47c>  // b.none
 71c:	ldr	w0, [sp, #180]
 720:	cmp	w0, #0x0
 724:	b.ne	730 <inflate_table+0x730>  // b.any
 728:	ldr	w0, [sp, #188]
 72c:	str	w0, [sp, #180]
 730:	ldr	w0, [sp, #196]
 734:	lsl	x0, x0, #2
 738:	ldr	x1, [sp, #144]
 73c:	add	x0, x1, x0
 740:	str	x0, [sp, #144]
 744:	ldr	w1, [sp, #204]
 748:	ldr	w0, [sp, #180]
 74c:	sub	w0, w1, w0
 750:	str	w0, [sp, #184]
 754:	ldr	w0, [sp, #184]
 758:	mov	w1, #0x1                   	// #1
 75c:	lsl	w0, w1, w0
 760:	str	w0, [sp, #176]
 764:	b	7b8 <inflate_table+0x7b8>
 768:	ldr	w1, [sp, #184]
 76c:	ldr	w0, [sp, #180]
 770:	add	w0, w1, w0
 774:	mov	w0, w0
 778:	lsl	x0, x0, #1
 77c:	add	x1, sp, #0x50
 780:	ldrh	w0, [x1, x0]
 784:	mov	w1, w0
 788:	ldr	w0, [sp, #176]
 78c:	sub	w0, w0, w1
 790:	str	w0, [sp, #176]
 794:	ldr	w0, [sp, #176]
 798:	cmp	w0, #0x0
 79c:	b.le	7d4 <inflate_table+0x7d4>
 7a0:	ldr	w0, [sp, #184]
 7a4:	add	w0, w0, #0x1
 7a8:	str	w0, [sp, #184]
 7ac:	ldr	w0, [sp, #176]
 7b0:	lsl	w0, w0, #1
 7b4:	str	w0, [sp, #176]
 7b8:	ldr	w1, [sp, #184]
 7bc:	ldr	w0, [sp, #180]
 7c0:	add	w0, w1, w0
 7c4:	ldr	w1, [sp, #192]
 7c8:	cmp	w1, w0
 7cc:	b.hi	768 <inflate_table+0x768>  // b.pmore
 7d0:	b	7d8 <inflate_table+0x7d8>
 7d4:	nop
 7d8:	ldr	w0, [sp, #184]
 7dc:	mov	w1, #0x1                   	// #1
 7e0:	lsl	w0, w1, w0
 7e4:	ldr	w1, [sp, #172]
 7e8:	add	w0, w1, w0
 7ec:	str	w0, [sp, #172]
 7f0:	ldr	w0, [sp, #44]
 7f4:	cmp	w0, #0x1
 7f8:	b.ne	808 <inflate_table+0x808>  // b.any
 7fc:	ldr	w0, [sp, #172]
 800:	cmp	w0, #0x354
 804:	b.hi	820 <inflate_table+0x820>  // b.pmore
 808:	ldr	w0, [sp, #44]
 80c:	cmp	w0, #0x2
 810:	b.ne	828 <inflate_table+0x828>  // b.any
 814:	ldr	w0, [sp, #172]
 818:	cmp	w0, #0x250
 81c:	b.ls	828 <inflate_table+0x828>  // b.plast
 820:	mov	w0, #0x1                   	// #1
 824:	b	92c <inflate_table+0x92c>
 828:	ldr	w1, [sp, #168]
 82c:	ldr	w0, [sp, #120]
 830:	and	w0, w1, w0
 834:	str	w0, [sp, #156]
 838:	ldr	x0, [sp, #24]
 83c:	ldr	x1, [x0]
 840:	ldr	w0, [sp, #156]
 844:	lsl	x0, x0, #2
 848:	add	x0, x1, x0
 84c:	ldr	w1, [sp, #184]
 850:	and	w1, w1, #0xff
 854:	strb	w1, [x0]
 858:	ldr	x0, [sp, #24]
 85c:	ldr	x1, [x0]
 860:	ldr	w0, [sp, #156]
 864:	lsl	x0, x0, #2
 868:	add	x0, x1, x0
 86c:	ldr	w1, [sp, #188]
 870:	and	w1, w1, #0xff
 874:	strb	w1, [x0, #1]
 878:	ldr	x0, [sp, #24]
 87c:	ldr	x0, [x0]
 880:	ldr	x1, [sp, #144]
 884:	sub	x0, x1, x0
 888:	asr	x0, x0, #2
 88c:	mov	x2, x0
 890:	ldr	x0, [sp, #24]
 894:	ldr	x1, [x0]
 898:	ldr	w0, [sp, #156]
 89c:	lsl	x0, x0, #2
 8a0:	add	x0, x1, x0
 8a4:	and	w1, w2, #0xffff
 8a8:	strh	w1, [x0, #2]
 8ac:	b	47c <inflate_table+0x47c>
 8b0:	nop
 8b4:	ldr	w0, [sp, #168]
 8b8:	cmp	w0, #0x0
 8bc:	b.eq	900 <inflate_table+0x900>  // b.none
 8c0:	mov	w0, #0x40                  	// #64
 8c4:	strb	w0, [sp, #112]
 8c8:	ldr	w0, [sp, #204]
 8cc:	and	w1, w0, #0xff
 8d0:	ldr	w0, [sp, #180]
 8d4:	and	w0, w0, #0xff
 8d8:	sub	w0, w1, w0
 8dc:	and	w0, w0, #0xff
 8e0:	strb	w0, [sp, #113]
 8e4:	strh	wzr, [sp, #114]
 8e8:	ldr	w0, [sp, #168]
 8ec:	lsl	x0, x0, #2
 8f0:	ldr	x1, [sp, #144]
 8f4:	add	x0, x1, x0
 8f8:	ldr	w1, [sp, #112]
 8fc:	str	w1, [x0]
 900:	ldr	x0, [sp, #24]
 904:	ldr	x1, [x0]
 908:	ldr	w0, [sp, #172]
 90c:	lsl	x0, x0, #2
 910:	add	x1, x1, x0
 914:	ldr	x0, [sp, #24]
 918:	str	x1, [x0]
 91c:	ldr	x0, [sp, #16]
 920:	ldr	w1, [sp, #188]
 924:	str	w1, [x0]
 928:	mov	w0, #0x0                   	// #0
 92c:	add	sp, sp, #0xd0
 930:	ret

trees.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <tr_static_init>:
       0:	nop
       4:	ret

0000000000000008 <_tr_init>:
       8:	stp	x29, x30, [sp, #-32]!
       c:	mov	x29, sp
      10:	str	x0, [sp, #24]
      14:	bl	0 <tr_static_init>
      18:	ldr	x0, [sp, #24]
      1c:	add	x1, x0, #0xd4
      20:	ldr	x0, [sp, #24]
      24:	str	x1, [x0, #2904]
      28:	ldr	x0, [sp, #24]
      2c:	adrp	x1, 0 <tr_static_init>
      30:	add	x1, x1, #0x0
      34:	str	x1, [x0, #2920]
      38:	ldr	x0, [sp, #24]
      3c:	add	x1, x0, #0x9c8
      40:	ldr	x0, [sp, #24]
      44:	str	x1, [x0, #2928]
      48:	ldr	x0, [sp, #24]
      4c:	adrp	x1, 0 <tr_static_init>
      50:	add	x1, x1, #0x0
      54:	str	x1, [x0, #2944]
      58:	ldr	x0, [sp, #24]
      5c:	add	x1, x0, #0xabc
      60:	ldr	x0, [sp, #24]
      64:	str	x1, [x0, #2952]
      68:	ldr	x0, [sp, #24]
      6c:	adrp	x1, 0 <tr_static_init>
      70:	add	x1, x1, #0x0
      74:	str	x1, [x0, #2968]
      78:	ldr	x0, [sp, #24]
      7c:	strh	wzr, [x0, #5936]
      80:	ldr	x0, [sp, #24]
      84:	str	wzr, [x0, #5940]
      88:	ldr	x0, [sp, #24]
      8c:	bl	9c <init_block>
      90:	nop
      94:	ldp	x29, x30, [sp], #32
      98:	ret

000000000000009c <init_block>:
      9c:	sub	sp, sp, #0x20
      a0:	str	x0, [sp, #8]
      a4:	str	wzr, [sp, #28]
      a8:	b	d0 <init_block+0x34>
      ac:	ldr	x1, [sp, #8]
      b0:	ldrsw	x0, [sp, #28]
      b4:	add	x0, x0, #0x34
      b8:	lsl	x0, x0, #2
      bc:	add	x0, x1, x0
      c0:	strh	wzr, [x0, #4]
      c4:	ldr	w0, [sp, #28]
      c8:	add	w0, w0, #0x1
      cc:	str	w0, [sp, #28]
      d0:	ldr	w0, [sp, #28]
      d4:	cmp	w0, #0x11d
      d8:	b.le	ac <init_block+0x10>
      dc:	str	wzr, [sp, #28]
      e0:	b	108 <init_block+0x6c>
      e4:	ldr	x1, [sp, #8]
      e8:	ldrsw	x0, [sp, #28]
      ec:	add	x0, x0, #0x270
      f0:	lsl	x0, x0, #2
      f4:	add	x0, x1, x0
      f8:	strh	wzr, [x0, #8]
      fc:	ldr	w0, [sp, #28]
     100:	add	w0, w0, #0x1
     104:	str	w0, [sp, #28]
     108:	ldr	w0, [sp, #28]
     10c:	cmp	w0, #0x1d
     110:	b.le	e4 <init_block+0x48>
     114:	str	wzr, [sp, #28]
     118:	b	140 <init_block+0xa4>
     11c:	ldr	x1, [sp, #8]
     120:	ldrsw	x0, [sp, #28]
     124:	add	x0, x0, #0x2ac
     128:	lsl	x0, x0, #2
     12c:	add	x0, x1, x0
     130:	strh	wzr, [x0, #12]
     134:	ldr	w0, [sp, #28]
     138:	add	w0, w0, #0x1
     13c:	str	w0, [sp, #28]
     140:	ldr	w0, [sp, #28]
     144:	cmp	w0, #0x12
     148:	b.le	11c <init_block+0x80>
     14c:	ldr	x0, [sp, #8]
     150:	mov	w1, #0x1                   	// #1
     154:	strh	w1, [x0, #1236]
     158:	ldr	x0, [sp, #8]
     15c:	str	xzr, [x0, #5920]
     160:	ldr	x0, [sp, #8]
     164:	ldr	x1, [x0, #5920]
     168:	ldr	x0, [sp, #8]
     16c:	str	x1, [x0, #5912]
     170:	ldr	x0, [sp, #8]
     174:	str	wzr, [x0, #5928]
     178:	ldr	x0, [sp, #8]
     17c:	ldr	w1, [x0, #5928]
     180:	ldr	x0, [sp, #8]
     184:	str	w1, [x0, #5900]
     188:	nop
     18c:	add	sp, sp, #0x20
     190:	ret

0000000000000194 <pqdownheap>:
     194:	sub	sp, sp, #0x30
     198:	str	x0, [sp, #24]
     19c:	str	x1, [sp, #16]
     1a0:	str	w2, [sp, #12]
     1a4:	ldr	x0, [sp, #24]
     1a8:	ldrsw	x1, [sp, #12]
     1ac:	add	x1, x1, #0x2f0
     1b0:	ldr	w0, [x0, x1, lsl #2]
     1b4:	str	w0, [sp, #40]
     1b8:	ldr	w0, [sp, #12]
     1bc:	lsl	w0, w0, #1
     1c0:	str	w0, [sp, #44]
     1c4:	b	3e4 <pqdownheap+0x250>
     1c8:	ldr	x0, [sp, #24]
     1cc:	ldr	w0, [x0, #5300]
     1d0:	ldr	w1, [sp, #44]
     1d4:	cmp	w1, w0
     1d8:	b.ge	2f0 <pqdownheap+0x15c>  // b.tcont
     1dc:	ldr	w0, [sp, #44]
     1e0:	add	w1, w0, #0x1
     1e4:	ldr	x0, [sp, #24]
     1e8:	sxtw	x1, w1
     1ec:	add	x1, x1, #0x2f0
     1f0:	ldr	w0, [x0, x1, lsl #2]
     1f4:	sxtw	x0, w0
     1f8:	lsl	x0, x0, #2
     1fc:	ldr	x1, [sp, #16]
     200:	add	x0, x1, x0
     204:	ldrh	w1, [x0]
     208:	ldr	x0, [sp, #24]
     20c:	ldrsw	x2, [sp, #44]
     210:	add	x2, x2, #0x2f0
     214:	ldr	w0, [x0, x2, lsl #2]
     218:	sxtw	x0, w0
     21c:	lsl	x0, x0, #2
     220:	ldr	x2, [sp, #16]
     224:	add	x0, x2, x0
     228:	ldrh	w0, [x0]
     22c:	cmp	w1, w0
     230:	b.cc	2e4 <pqdownheap+0x150>  // b.lo, b.ul, b.last
     234:	ldr	w0, [sp, #44]
     238:	add	w1, w0, #0x1
     23c:	ldr	x0, [sp, #24]
     240:	sxtw	x1, w1
     244:	add	x1, x1, #0x2f0
     248:	ldr	w0, [x0, x1, lsl #2]
     24c:	sxtw	x0, w0
     250:	lsl	x0, x0, #2
     254:	ldr	x1, [sp, #16]
     258:	add	x0, x1, x0
     25c:	ldrh	w1, [x0]
     260:	ldr	x0, [sp, #24]
     264:	ldrsw	x2, [sp, #44]
     268:	add	x2, x2, #0x2f0
     26c:	ldr	w0, [x0, x2, lsl #2]
     270:	sxtw	x0, w0
     274:	lsl	x0, x0, #2
     278:	ldr	x2, [sp, #16]
     27c:	add	x0, x2, x0
     280:	ldrh	w0, [x0]
     284:	cmp	w1, w0
     288:	b.ne	2f0 <pqdownheap+0x15c>  // b.any
     28c:	ldr	w0, [sp, #44]
     290:	add	w1, w0, #0x1
     294:	ldr	x0, [sp, #24]
     298:	sxtw	x1, w1
     29c:	add	x1, x1, #0x2f0
     2a0:	ldr	w0, [x0, x1, lsl #2]
     2a4:	ldr	x1, [sp, #24]
     2a8:	sxtw	x0, w0
     2ac:	add	x0, x1, x0
     2b0:	add	x0, x0, #0x1, lsl #12
     2b4:	ldrb	w1, [x0, #1212]
     2b8:	ldr	x0, [sp, #24]
     2bc:	ldrsw	x2, [sp, #44]
     2c0:	add	x2, x2, #0x2f0
     2c4:	ldr	w0, [x0, x2, lsl #2]
     2c8:	ldr	x2, [sp, #24]
     2cc:	sxtw	x0, w0
     2d0:	add	x0, x2, x0
     2d4:	add	x0, x0, #0x1, lsl #12
     2d8:	ldrb	w0, [x0, #1212]
     2dc:	cmp	w1, w0
     2e0:	b.hi	2f0 <pqdownheap+0x15c>  // b.pmore
     2e4:	ldr	w0, [sp, #44]
     2e8:	add	w0, w0, #0x1
     2ec:	str	w0, [sp, #44]
     2f0:	ldrsw	x0, [sp, #40]
     2f4:	lsl	x0, x0, #2
     2f8:	ldr	x1, [sp, #16]
     2fc:	add	x0, x1, x0
     300:	ldrh	w1, [x0]
     304:	ldr	x0, [sp, #24]
     308:	ldrsw	x2, [sp, #44]
     30c:	add	x2, x2, #0x2f0
     310:	ldr	w0, [x0, x2, lsl #2]
     314:	sxtw	x0, w0
     318:	lsl	x0, x0, #2
     31c:	ldr	x2, [sp, #16]
     320:	add	x0, x2, x0
     324:	ldrh	w0, [x0]
     328:	cmp	w1, w0
     32c:	b.cc	3f8 <pqdownheap+0x264>  // b.lo, b.ul, b.last
     330:	ldrsw	x0, [sp, #40]
     334:	lsl	x0, x0, #2
     338:	ldr	x1, [sp, #16]
     33c:	add	x0, x1, x0
     340:	ldrh	w1, [x0]
     344:	ldr	x0, [sp, #24]
     348:	ldrsw	x2, [sp, #44]
     34c:	add	x2, x2, #0x2f0
     350:	ldr	w0, [x0, x2, lsl #2]
     354:	sxtw	x0, w0
     358:	lsl	x0, x0, #2
     35c:	ldr	x2, [sp, #16]
     360:	add	x0, x2, x0
     364:	ldrh	w0, [x0]
     368:	cmp	w1, w0
     36c:	b.ne	3b0 <pqdownheap+0x21c>  // b.any
     370:	ldr	x1, [sp, #24]
     374:	ldrsw	x0, [sp, #40]
     378:	add	x0, x1, x0
     37c:	add	x0, x0, #0x1, lsl #12
     380:	ldrb	w1, [x0, #1212]
     384:	ldr	x0, [sp, #24]
     388:	ldrsw	x2, [sp, #44]
     38c:	add	x2, x2, #0x2f0
     390:	ldr	w0, [x0, x2, lsl #2]
     394:	ldr	x2, [sp, #24]
     398:	sxtw	x0, w0
     39c:	add	x0, x2, x0
     3a0:	add	x0, x0, #0x1, lsl #12
     3a4:	ldrb	w0, [x0, #1212]
     3a8:	cmp	w1, w0
     3ac:	b.ls	3f8 <pqdownheap+0x264>  // b.plast
     3b0:	ldr	x0, [sp, #24]
     3b4:	ldrsw	x1, [sp, #44]
     3b8:	add	x1, x1, #0x2f0
     3bc:	ldr	w2, [x0, x1, lsl #2]
     3c0:	ldr	x0, [sp, #24]
     3c4:	ldrsw	x1, [sp, #12]
     3c8:	add	x1, x1, #0x2f0
     3cc:	str	w2, [x0, x1, lsl #2]
     3d0:	ldr	w0, [sp, #44]
     3d4:	str	w0, [sp, #12]
     3d8:	ldr	w0, [sp, #44]
     3dc:	lsl	w0, w0, #1
     3e0:	str	w0, [sp, #44]
     3e4:	ldr	x0, [sp, #24]
     3e8:	ldr	w0, [x0, #5300]
     3ec:	ldr	w1, [sp, #44]
     3f0:	cmp	w1, w0
     3f4:	b.le	1c8 <pqdownheap+0x34>
     3f8:	ldr	x0, [sp, #24]
     3fc:	ldrsw	x1, [sp, #12]
     400:	add	x1, x1, #0x2f0
     404:	ldr	w2, [sp, #40]
     408:	str	w2, [x0, x1, lsl #2]
     40c:	nop
     410:	add	sp, sp, #0x30
     414:	ret

0000000000000418 <gen_bitlen>:
     418:	sub	sp, sp, #0x60
     41c:	str	x0, [sp, #8]
     420:	str	x1, [sp]
     424:	ldr	x0, [sp]
     428:	ldr	x0, [x0]
     42c:	str	x0, [sp, #64]
     430:	ldr	x0, [sp]
     434:	ldr	w0, [x0, #8]
     438:	str	w0, [sp, #60]
     43c:	ldr	x0, [sp]
     440:	ldr	x0, [x0, #16]
     444:	ldr	x0, [x0]
     448:	str	x0, [sp, #48]
     44c:	ldr	x0, [sp]
     450:	ldr	x0, [x0, #16]
     454:	ldr	x0, [x0, #8]
     458:	str	x0, [sp, #40]
     45c:	ldr	x0, [sp]
     460:	ldr	x0, [x0, #16]
     464:	ldr	w0, [x0, #16]
     468:	str	w0, [sp, #36]
     46c:	ldr	x0, [sp]
     470:	ldr	x0, [x0, #16]
     474:	ldr	w0, [x0, #24]
     478:	str	w0, [sp, #32]
     47c:	str	wzr, [sp, #76]
     480:	str	wzr, [sp, #84]
     484:	b	4a4 <gen_bitlen+0x8c>
     488:	ldr	x0, [sp, #8]
     48c:	ldrsw	x1, [sp, #84]
     490:	add	x1, x1, #0x5d0
     494:	strh	wzr, [x0, x1, lsl #1]
     498:	ldr	w0, [sp, #84]
     49c:	add	w0, w0, #0x1
     4a0:	str	w0, [sp, #84]
     4a4:	ldr	w0, [sp, #84]
     4a8:	cmp	w0, #0xf
     4ac:	b.le	488 <gen_bitlen+0x70>
     4b0:	ldr	x0, [sp, #8]
     4b4:	ldr	w1, [x0, #5304]
     4b8:	ldr	x0, [sp, #8]
     4bc:	sxtw	x1, w1
     4c0:	add	x1, x1, #0x2f0
     4c4:	ldr	w0, [x0, x1, lsl #2]
     4c8:	sxtw	x0, w0
     4cc:	lsl	x0, x0, #2
     4d0:	ldr	x1, [sp, #64]
     4d4:	add	x0, x1, x0
     4d8:	strh	wzr, [x0, #2]
     4dc:	ldr	x0, [sp, #8]
     4e0:	ldr	w0, [x0, #5304]
     4e4:	add	w0, w0, #0x1
     4e8:	str	w0, [sp, #92]
     4ec:	b	688 <gen_bitlen+0x270>
     4f0:	ldr	x0, [sp, #8]
     4f4:	ldrsw	x1, [sp, #92]
     4f8:	add	x1, x1, #0x2f0
     4fc:	ldr	w0, [x0, x1, lsl #2]
     500:	str	w0, [sp, #88]
     504:	ldrsw	x0, [sp, #88]
     508:	lsl	x0, x0, #2
     50c:	ldr	x1, [sp, #64]
     510:	add	x0, x1, x0
     514:	ldrh	w0, [x0, #2]
     518:	and	x0, x0, #0xffff
     51c:	lsl	x0, x0, #2
     520:	ldr	x1, [sp, #64]
     524:	add	x0, x1, x0
     528:	ldrh	w0, [x0, #2]
     52c:	add	w0, w0, #0x1
     530:	str	w0, [sp, #84]
     534:	ldr	w1, [sp, #84]
     538:	ldr	w0, [sp, #32]
     53c:	cmp	w1, w0
     540:	b.le	558 <gen_bitlen+0x140>
     544:	ldr	w0, [sp, #32]
     548:	str	w0, [sp, #84]
     54c:	ldr	w0, [sp, #76]
     550:	add	w0, w0, #0x1
     554:	str	w0, [sp, #76]
     558:	ldrsw	x0, [sp, #88]
     55c:	lsl	x0, x0, #2
     560:	ldr	x1, [sp, #64]
     564:	add	x0, x1, x0
     568:	ldr	w1, [sp, #84]
     56c:	and	w1, w1, #0xffff
     570:	strh	w1, [x0, #2]
     574:	ldr	w1, [sp, #88]
     578:	ldr	w0, [sp, #60]
     57c:	cmp	w1, w0
     580:	b.gt	678 <gen_bitlen+0x260>
     584:	ldr	x0, [sp, #8]
     588:	ldrsw	x1, [sp, #84]
     58c:	add	x1, x1, #0x5d0
     590:	ldrh	w0, [x0, x1, lsl #1]
     594:	add	w0, w0, #0x1
     598:	and	w2, w0, #0xffff
     59c:	ldr	x0, [sp, #8]
     5a0:	ldrsw	x1, [sp, #84]
     5a4:	add	x1, x1, #0x5d0
     5a8:	strh	w2, [x0, x1, lsl #1]
     5ac:	str	wzr, [sp, #80]
     5b0:	ldr	w1, [sp, #88]
     5b4:	ldr	w0, [sp, #36]
     5b8:	cmp	w1, w0
     5bc:	b.lt	5e4 <gen_bitlen+0x1cc>  // b.tstop
     5c0:	ldr	w1, [sp, #88]
     5c4:	ldr	w0, [sp, #36]
     5c8:	sub	w0, w1, w0
     5cc:	sxtw	x0, w0
     5d0:	lsl	x0, x0, #2
     5d4:	ldr	x1, [sp, #40]
     5d8:	add	x0, x1, x0
     5dc:	ldr	w0, [x0]
     5e0:	str	w0, [sp, #80]
     5e4:	ldrsw	x0, [sp, #88]
     5e8:	lsl	x0, x0, #2
     5ec:	ldr	x1, [sp, #64]
     5f0:	add	x0, x1, x0
     5f4:	ldrh	w0, [x0]
     5f8:	strh	w0, [sp, #26]
     5fc:	ldr	x0, [sp, #8]
     600:	ldr	x1, [x0, #5912]
     604:	ldrh	w2, [sp, #26]
     608:	ldr	w3, [sp, #84]
     60c:	ldr	w0, [sp, #80]
     610:	add	w0, w3, w0
     614:	mov	w0, w0
     618:	mul	x0, x2, x0
     61c:	add	x1, x1, x0
     620:	ldr	x0, [sp, #8]
     624:	str	x1, [x0, #5912]
     628:	ldr	x0, [sp, #48]
     62c:	cmp	x0, #0x0
     630:	b.eq	67c <gen_bitlen+0x264>  // b.none
     634:	ldr	x0, [sp, #8]
     638:	ldr	x1, [x0, #5920]
     63c:	ldrh	w2, [sp, #26]
     640:	ldrsw	x0, [sp, #88]
     644:	lsl	x0, x0, #2
     648:	ldr	x3, [sp, #48]
     64c:	add	x0, x3, x0
     650:	ldrh	w0, [x0, #2]
     654:	mov	w3, w0
     658:	ldr	w0, [sp, #80]
     65c:	add	w0, w3, w0
     660:	mov	w0, w0
     664:	mul	x0, x2, x0
     668:	add	x1, x1, x0
     66c:	ldr	x0, [sp, #8]
     670:	str	x1, [x0, #5920]
     674:	b	67c <gen_bitlen+0x264>
     678:	nop
     67c:	ldr	w0, [sp, #92]
     680:	add	w0, w0, #0x1
     684:	str	w0, [sp, #92]
     688:	ldr	w0, [sp, #92]
     68c:	cmp	w0, #0x23c
     690:	b.le	4f0 <gen_bitlen+0xd8>
     694:	ldr	w0, [sp, #76]
     698:	cmp	w0, #0x0
     69c:	b.eq	890 <gen_bitlen+0x478>  // b.none
     6a0:	ldr	w0, [sp, #32]
     6a4:	sub	w0, w0, #0x1
     6a8:	str	w0, [sp, #84]
     6ac:	b	6bc <gen_bitlen+0x2a4>
     6b0:	ldr	w0, [sp, #84]
     6b4:	sub	w0, w0, #0x1
     6b8:	str	w0, [sp, #84]
     6bc:	ldr	x0, [sp, #8]
     6c0:	ldrsw	x1, [sp, #84]
     6c4:	add	x1, x1, #0x5d0
     6c8:	ldrh	w0, [x0, x1, lsl #1]
     6cc:	cmp	w0, #0x0
     6d0:	b.eq	6b0 <gen_bitlen+0x298>  // b.none
     6d4:	ldr	x0, [sp, #8]
     6d8:	ldrsw	x1, [sp, #84]
     6dc:	add	x1, x1, #0x5d0
     6e0:	ldrh	w0, [x0, x1, lsl #1]
     6e4:	sub	w0, w0, #0x1
     6e8:	and	w2, w0, #0xffff
     6ec:	ldr	x0, [sp, #8]
     6f0:	ldrsw	x1, [sp, #84]
     6f4:	add	x1, x1, #0x5d0
     6f8:	strh	w2, [x0, x1, lsl #1]
     6fc:	ldr	w0, [sp, #84]
     700:	add	w1, w0, #0x1
     704:	ldr	x0, [sp, #8]
     708:	sxtw	x1, w1
     70c:	add	x1, x1, #0x5d0
     710:	ldrh	w0, [x0, x1, lsl #1]
     714:	ldr	w1, [sp, #84]
     718:	add	w1, w1, #0x1
     71c:	add	w0, w0, #0x2
     720:	and	w2, w0, #0xffff
     724:	ldr	x0, [sp, #8]
     728:	sxtw	x1, w1
     72c:	add	x1, x1, #0x5d0
     730:	strh	w2, [x0, x1, lsl #1]
     734:	ldr	x0, [sp, #8]
     738:	ldrsw	x1, [sp, #32]
     73c:	add	x1, x1, #0x5d0
     740:	ldrh	w0, [x0, x1, lsl #1]
     744:	sub	w0, w0, #0x1
     748:	and	w2, w0, #0xffff
     74c:	ldr	x0, [sp, #8]
     750:	ldrsw	x1, [sp, #32]
     754:	add	x1, x1, #0x5d0
     758:	strh	w2, [x0, x1, lsl #1]
     75c:	ldr	w0, [sp, #76]
     760:	sub	w0, w0, #0x2
     764:	str	w0, [sp, #76]
     768:	ldr	w0, [sp, #76]
     76c:	cmp	w0, #0x0
     770:	b.gt	6a0 <gen_bitlen+0x288>
     774:	ldr	w0, [sp, #32]
     778:	str	w0, [sp, #84]
     77c:	b	880 <gen_bitlen+0x468>
     780:	ldr	x0, [sp, #8]
     784:	ldrsw	x1, [sp, #84]
     788:	add	x1, x1, #0x5d0
     78c:	ldrh	w0, [x0, x1, lsl #1]
     790:	str	w0, [sp, #88]
     794:	b	868 <gen_bitlen+0x450>
     798:	ldr	w0, [sp, #92]
     79c:	sub	w0, w0, #0x1
     7a0:	str	w0, [sp, #92]
     7a4:	ldr	x0, [sp, #8]
     7a8:	ldrsw	x1, [sp, #92]
     7ac:	add	x1, x1, #0x2f0
     7b0:	ldr	w0, [x0, x1, lsl #2]
     7b4:	str	w0, [sp, #28]
     7b8:	ldr	w1, [sp, #28]
     7bc:	ldr	w0, [sp, #60]
     7c0:	cmp	w1, w0
     7c4:	b.le	7cc <gen_bitlen+0x3b4>
     7c8:	b	868 <gen_bitlen+0x450>
     7cc:	ldrsw	x0, [sp, #28]
     7d0:	lsl	x0, x0, #2
     7d4:	ldr	x1, [sp, #64]
     7d8:	add	x0, x1, x0
     7dc:	ldrh	w0, [x0, #2]
     7e0:	mov	w1, w0
     7e4:	ldr	w0, [sp, #84]
     7e8:	cmp	w1, w0
     7ec:	b.eq	85c <gen_bitlen+0x444>  // b.none
     7f0:	ldr	x0, [sp, #8]
     7f4:	ldr	x1, [x0, #5912]
     7f8:	ldrsw	x2, [sp, #84]
     7fc:	ldrsw	x0, [sp, #28]
     800:	lsl	x0, x0, #2
     804:	ldr	x3, [sp, #64]
     808:	add	x0, x3, x0
     80c:	ldrh	w0, [x0, #2]
     810:	and	x0, x0, #0xffff
     814:	sub	x2, x2, x0
     818:	ldrsw	x0, [sp, #28]
     81c:	lsl	x0, x0, #2
     820:	ldr	x3, [sp, #64]
     824:	add	x0, x3, x0
     828:	ldrh	w0, [x0]
     82c:	and	x0, x0, #0xffff
     830:	mul	x0, x2, x0
     834:	add	x1, x1, x0
     838:	ldr	x0, [sp, #8]
     83c:	str	x1, [x0, #5912]
     840:	ldrsw	x0, [sp, #28]
     844:	lsl	x0, x0, #2
     848:	ldr	x1, [sp, #64]
     84c:	add	x0, x1, x0
     850:	ldr	w1, [sp, #84]
     854:	and	w1, w1, #0xffff
     858:	strh	w1, [x0, #2]
     85c:	ldr	w0, [sp, #88]
     860:	sub	w0, w0, #0x1
     864:	str	w0, [sp, #88]
     868:	ldr	w0, [sp, #88]
     86c:	cmp	w0, #0x0
     870:	b.ne	798 <gen_bitlen+0x380>  // b.any
     874:	ldr	w0, [sp, #84]
     878:	sub	w0, w0, #0x1
     87c:	str	w0, [sp, #84]
     880:	ldr	w0, [sp, #84]
     884:	cmp	w0, #0x0
     888:	b.ne	780 <gen_bitlen+0x368>  // b.any
     88c:	b	894 <gen_bitlen+0x47c>
     890:	nop
     894:	add	sp, sp, #0x60
     898:	ret

000000000000089c <gen_codes>:
     89c:	stp	x29, x30, [sp, #-96]!
     8a0:	mov	x29, sp
     8a4:	str	x0, [sp, #40]
     8a8:	str	w1, [sp, #36]
     8ac:	str	x2, [sp, #24]
     8b0:	str	wzr, [sp, #92]
     8b4:	mov	w0, #0x1                   	// #1
     8b8:	str	w0, [sp, #88]
     8bc:	b	910 <gen_codes+0x74>
     8c0:	ldrsw	x0, [sp, #88]
     8c4:	lsl	x0, x0, #1
     8c8:	sub	x0, x0, #0x2
     8cc:	ldr	x1, [sp, #24]
     8d0:	add	x0, x1, x0
     8d4:	ldrh	w0, [x0]
     8d8:	mov	w1, w0
     8dc:	ldr	w0, [sp, #92]
     8e0:	add	w0, w1, w0
     8e4:	lsl	w0, w0, #1
     8e8:	str	w0, [sp, #92]
     8ec:	ldr	w0, [sp, #92]
     8f0:	and	w2, w0, #0xffff
     8f4:	ldrsw	x0, [sp, #88]
     8f8:	lsl	x0, x0, #1
     8fc:	add	x1, sp, #0x30
     900:	strh	w2, [x1, x0]
     904:	ldr	w0, [sp, #88]
     908:	add	w0, w0, #0x1
     90c:	str	w0, [sp, #88]
     910:	ldr	w0, [sp, #88]
     914:	cmp	w0, #0xf
     918:	b.le	8c0 <gen_codes+0x24>
     91c:	str	wzr, [sp, #84]
     920:	b	9a8 <gen_codes+0x10c>
     924:	ldrsw	x0, [sp, #84]
     928:	lsl	x0, x0, #2
     92c:	ldr	x1, [sp, #40]
     930:	add	x0, x1, x0
     934:	ldrh	w0, [x0, #2]
     938:	str	w0, [sp, #80]
     93c:	ldr	w0, [sp, #80]
     940:	cmp	w0, #0x0
     944:	b.eq	998 <gen_codes+0xfc>  // b.none
     948:	ldrsw	x0, [sp, #80]
     94c:	lsl	x0, x0, #1
     950:	add	x1, sp, #0x30
     954:	ldrh	w0, [x1, x0]
     958:	add	w1, w0, #0x1
     95c:	and	w3, w1, #0xffff
     960:	ldrsw	x1, [sp, #80]
     964:	lsl	x1, x1, #1
     968:	add	x2, sp, #0x30
     96c:	strh	w3, [x2, x1]
     970:	ldr	w1, [sp, #80]
     974:	bl	3e38 <bi_reverse>
     978:	mov	w2, w0
     97c:	ldrsw	x0, [sp, #84]
     980:	lsl	x0, x0, #2
     984:	ldr	x1, [sp, #40]
     988:	add	x0, x1, x0
     98c:	and	w1, w2, #0xffff
     990:	strh	w1, [x0]
     994:	b	99c <gen_codes+0x100>
     998:	nop
     99c:	ldr	w0, [sp, #84]
     9a0:	add	w0, w0, #0x1
     9a4:	str	w0, [sp, #84]
     9a8:	ldr	w1, [sp, #84]
     9ac:	ldr	w0, [sp, #36]
     9b0:	cmp	w1, w0
     9b4:	b.le	924 <gen_codes+0x88>
     9b8:	nop
     9bc:	nop
     9c0:	ldp	x29, x30, [sp], #96
     9c4:	ret

00000000000009c8 <build_tree>:
     9c8:	stp	x29, x30, [sp, #-80]!
     9cc:	mov	x29, sp
     9d0:	str	x0, [sp, #24]
     9d4:	str	x1, [sp, #16]
     9d8:	ldr	x0, [sp, #16]
     9dc:	ldr	x0, [x0]
     9e0:	str	x0, [sp, #56]
     9e4:	ldr	x0, [sp, #16]
     9e8:	ldr	x0, [x0, #16]
     9ec:	ldr	x0, [x0]
     9f0:	str	x0, [sp, #48]
     9f4:	ldr	x0, [sp, #16]
     9f8:	ldr	x0, [x0, #16]
     9fc:	ldr	w0, [x0, #20]
     a00:	str	w0, [sp, #44]
     a04:	mov	w0, #0xffffffff            	// #-1
     a08:	str	w0, [sp, #72]
     a0c:	ldr	x0, [sp, #24]
     a10:	str	wzr, [x0, #5300]
     a14:	ldr	x0, [sp, #24]
     a18:	mov	w1, #0x23d                 	// #573
     a1c:	str	w1, [x0, #5304]
     a20:	str	wzr, [sp, #76]
     a24:	b	ab4 <build_tree+0xec>
     a28:	ldrsw	x0, [sp, #76]
     a2c:	lsl	x0, x0, #2
     a30:	ldr	x1, [sp, #56]
     a34:	add	x0, x1, x0
     a38:	ldrh	w0, [x0]
     a3c:	cmp	w0, #0x0
     a40:	b.eq	a94 <build_tree+0xcc>  // b.none
     a44:	ldr	w0, [sp, #76]
     a48:	str	w0, [sp, #72]
     a4c:	ldr	x0, [sp, #24]
     a50:	ldr	w0, [x0, #5300]
     a54:	add	w1, w0, #0x1
     a58:	ldr	x0, [sp, #24]
     a5c:	str	w1, [x0, #5300]
     a60:	ldr	x0, [sp, #24]
     a64:	ldr	w1, [x0, #5300]
     a68:	ldr	x0, [sp, #24]
     a6c:	sxtw	x1, w1
     a70:	add	x1, x1, #0x2f0
     a74:	ldr	w2, [sp, #72]
     a78:	str	w2, [x0, x1, lsl #2]
     a7c:	ldr	x1, [sp, #24]
     a80:	ldrsw	x0, [sp, #76]
     a84:	add	x0, x1, x0
     a88:	add	x0, x0, #0x1, lsl #12
     a8c:	strb	wzr, [x0, #1212]
     a90:	b	aa8 <build_tree+0xe0>
     a94:	ldrsw	x0, [sp, #76]
     a98:	lsl	x0, x0, #2
     a9c:	ldr	x1, [sp, #56]
     aa0:	add	x0, x1, x0
     aa4:	strh	wzr, [x0, #2]
     aa8:	ldr	w0, [sp, #76]
     aac:	add	w0, w0, #0x1
     ab0:	str	w0, [sp, #76]
     ab4:	ldr	w1, [sp, #76]
     ab8:	ldr	w0, [sp, #44]
     abc:	cmp	w1, w0
     ac0:	b.lt	a28 <build_tree+0x60>  // b.tstop
     ac4:	b	ba4 <build_tree+0x1dc>
     ac8:	ldr	w0, [sp, #72]
     acc:	cmp	w0, #0x1
     ad0:	b.gt	ae8 <build_tree+0x120>
     ad4:	ldr	w0, [sp, #72]
     ad8:	add	w0, w0, #0x1
     adc:	str	w0, [sp, #72]
     ae0:	ldr	w0, [sp, #72]
     ae4:	b	aec <build_tree+0x124>
     ae8:	mov	w0, #0x0                   	// #0
     aec:	ldr	x1, [sp, #24]
     af0:	ldr	w1, [x1, #5300]
     af4:	add	w2, w1, #0x1
     af8:	ldr	x1, [sp, #24]
     afc:	str	w2, [x1, #5300]
     b00:	ldr	x1, [sp, #24]
     b04:	ldr	w3, [x1, #5300]
     b08:	ldr	x1, [sp, #24]
     b0c:	sxtw	x2, w3
     b10:	add	x2, x2, #0x2f0
     b14:	str	w0, [x1, x2, lsl #2]
     b18:	ldr	x0, [sp, #24]
     b1c:	sxtw	x1, w3
     b20:	add	x1, x1, #0x2f0
     b24:	ldr	w0, [x0, x1, lsl #2]
     b28:	str	w0, [sp, #68]
     b2c:	ldrsw	x0, [sp, #68]
     b30:	lsl	x0, x0, #2
     b34:	ldr	x1, [sp, #56]
     b38:	add	x0, x1, x0
     b3c:	mov	w1, #0x1                   	// #1
     b40:	strh	w1, [x0]
     b44:	ldr	x1, [sp, #24]
     b48:	ldrsw	x0, [sp, #68]
     b4c:	add	x0, x1, x0
     b50:	add	x0, x0, #0x1, lsl #12
     b54:	strb	wzr, [x0, #1212]
     b58:	ldr	x0, [sp, #24]
     b5c:	ldr	x0, [x0, #5912]
     b60:	sub	x1, x0, #0x1
     b64:	ldr	x0, [sp, #24]
     b68:	str	x1, [x0, #5912]
     b6c:	ldr	x0, [sp, #48]
     b70:	cmp	x0, #0x0
     b74:	b.eq	ba4 <build_tree+0x1dc>  // b.none
     b78:	ldr	x0, [sp, #24]
     b7c:	ldr	x1, [x0, #5920]
     b80:	ldrsw	x0, [sp, #68]
     b84:	lsl	x0, x0, #2
     b88:	ldr	x2, [sp, #48]
     b8c:	add	x0, x2, x0
     b90:	ldrh	w0, [x0, #2]
     b94:	and	x0, x0, #0xffff
     b98:	sub	x1, x1, x0
     b9c:	ldr	x0, [sp, #24]
     ba0:	str	x1, [x0, #5920]
     ba4:	ldr	x0, [sp, #24]
     ba8:	ldr	w0, [x0, #5300]
     bac:	cmp	w0, #0x1
     bb0:	b.le	ac8 <build_tree+0x100>
     bb4:	ldr	x0, [sp, #16]
     bb8:	ldr	w1, [sp, #72]
     bbc:	str	w1, [x0, #8]
     bc0:	ldr	x0, [sp, #24]
     bc4:	ldr	w0, [x0, #5300]
     bc8:	lsr	w1, w0, #31
     bcc:	add	w0, w1, w0
     bd0:	asr	w0, w0, #1
     bd4:	str	w0, [sp, #76]
     bd8:	b	bf8 <build_tree+0x230>
     bdc:	ldr	w2, [sp, #76]
     be0:	ldr	x1, [sp, #56]
     be4:	ldr	x0, [sp, #24]
     be8:	bl	194 <pqdownheap>
     bec:	ldr	w0, [sp, #76]
     bf0:	sub	w0, w0, #0x1
     bf4:	str	w0, [sp, #76]
     bf8:	ldr	w0, [sp, #76]
     bfc:	cmp	w0, #0x0
     c00:	b.gt	bdc <build_tree+0x214>
     c04:	ldr	w0, [sp, #44]
     c08:	str	w0, [sp, #68]
     c0c:	ldr	x0, [sp, #24]
     c10:	ldr	w0, [x0, #3012]
     c14:	str	w0, [sp, #76]
     c18:	ldr	x0, [sp, #24]
     c1c:	ldr	w0, [x0, #5300]
     c20:	sub	w2, w0, #0x1
     c24:	ldr	x1, [sp, #24]
     c28:	str	w2, [x1, #5300]
     c2c:	ldr	x1, [sp, #24]
     c30:	sxtw	x0, w0
     c34:	add	x0, x0, #0x2f0
     c38:	ldr	w1, [x1, x0, lsl #2]
     c3c:	ldr	x0, [sp, #24]
     c40:	str	w1, [x0, #3012]
     c44:	mov	w2, #0x1                   	// #1
     c48:	ldr	x1, [sp, #56]
     c4c:	ldr	x0, [sp, #24]
     c50:	bl	194 <pqdownheap>
     c54:	ldr	x0, [sp, #24]
     c58:	ldr	w0, [x0, #3012]
     c5c:	str	w0, [sp, #40]
     c60:	ldr	x0, [sp, #24]
     c64:	ldr	w0, [x0, #5304]
     c68:	sub	w1, w0, #0x1
     c6c:	ldr	x0, [sp, #24]
     c70:	str	w1, [x0, #5304]
     c74:	ldr	x0, [sp, #24]
     c78:	ldr	w1, [x0, #5304]
     c7c:	ldr	x0, [sp, #24]
     c80:	sxtw	x1, w1
     c84:	add	x1, x1, #0x2f0
     c88:	ldr	w2, [sp, #76]
     c8c:	str	w2, [x0, x1, lsl #2]
     c90:	ldr	x0, [sp, #24]
     c94:	ldr	w0, [x0, #5304]
     c98:	sub	w1, w0, #0x1
     c9c:	ldr	x0, [sp, #24]
     ca0:	str	w1, [x0, #5304]
     ca4:	ldr	x0, [sp, #24]
     ca8:	ldr	w1, [x0, #5304]
     cac:	ldr	x0, [sp, #24]
     cb0:	sxtw	x1, w1
     cb4:	add	x1, x1, #0x2f0
     cb8:	ldr	w2, [sp, #40]
     cbc:	str	w2, [x0, x1, lsl #2]
     cc0:	ldrsw	x0, [sp, #76]
     cc4:	lsl	x0, x0, #2
     cc8:	ldr	x1, [sp, #56]
     ccc:	add	x0, x1, x0
     cd0:	ldrh	w2, [x0]
     cd4:	ldrsw	x0, [sp, #40]
     cd8:	lsl	x0, x0, #2
     cdc:	ldr	x1, [sp, #56]
     ce0:	add	x0, x1, x0
     ce4:	ldrh	w1, [x0]
     ce8:	ldrsw	x0, [sp, #68]
     cec:	lsl	x0, x0, #2
     cf0:	ldr	x3, [sp, #56]
     cf4:	add	x0, x3, x0
     cf8:	add	w1, w2, w1
     cfc:	and	w1, w1, #0xffff
     d00:	strh	w1, [x0]
     d04:	ldr	x1, [sp, #24]
     d08:	ldrsw	x0, [sp, #76]
     d0c:	add	x0, x1, x0
     d10:	add	x0, x0, #0x1, lsl #12
     d14:	ldrb	w1, [x0, #1212]
     d18:	ldr	x2, [sp, #24]
     d1c:	ldrsw	x0, [sp, #40]
     d20:	add	x0, x2, x0
     d24:	add	x0, x0, #0x1, lsl #12
     d28:	ldrb	w0, [x0, #1212]
     d2c:	cmp	w1, w0
     d30:	b.cc	d54 <build_tree+0x38c>  // b.lo, b.ul, b.last
     d34:	ldr	x1, [sp, #24]
     d38:	ldrsw	x0, [sp, #76]
     d3c:	add	x0, x1, x0
     d40:	add	x0, x0, #0x1, lsl #12
     d44:	ldrb	w0, [x0, #1212]
     d48:	add	w0, w0, #0x1
     d4c:	and	w0, w0, #0xff
     d50:	b	d70 <build_tree+0x3a8>
     d54:	ldr	x1, [sp, #24]
     d58:	ldrsw	x0, [sp, #40]
     d5c:	add	x0, x1, x0
     d60:	add	x0, x0, #0x1, lsl #12
     d64:	ldrb	w0, [x0, #1212]
     d68:	add	w0, w0, #0x1
     d6c:	and	w0, w0, #0xff
     d70:	ldr	x2, [sp, #24]
     d74:	ldrsw	x1, [sp, #68]
     d78:	add	x1, x2, x1
     d7c:	add	x1, x1, #0x1, lsl #12
     d80:	strb	w0, [x1, #1212]
     d84:	ldrsw	x0, [sp, #40]
     d88:	lsl	x0, x0, #2
     d8c:	ldr	x1, [sp, #56]
     d90:	add	x0, x1, x0
     d94:	ldr	w1, [sp, #68]
     d98:	and	w1, w1, #0xffff
     d9c:	strh	w1, [x0, #2]
     da0:	ldrsw	x1, [sp, #76]
     da4:	lsl	x1, x1, #2
     da8:	ldr	x2, [sp, #56]
     dac:	add	x1, x2, x1
     db0:	ldrh	w0, [x0, #2]
     db4:	strh	w0, [x1, #2]
     db8:	ldr	w0, [sp, #68]
     dbc:	add	w1, w0, #0x1
     dc0:	str	w1, [sp, #68]
     dc4:	ldr	x1, [sp, #24]
     dc8:	str	w0, [x1, #3012]
     dcc:	mov	w2, #0x1                   	// #1
     dd0:	ldr	x1, [sp, #56]
     dd4:	ldr	x0, [sp, #24]
     dd8:	bl	194 <pqdownheap>
     ddc:	ldr	x0, [sp, #24]
     de0:	ldr	w0, [x0, #5300]
     de4:	cmp	w0, #0x1
     de8:	b.gt	c0c <build_tree+0x244>
     dec:	ldr	x0, [sp, #24]
     df0:	ldr	w0, [x0, #5304]
     df4:	sub	w1, w0, #0x1
     df8:	ldr	x0, [sp, #24]
     dfc:	str	w1, [x0, #5304]
     e00:	ldr	x0, [sp, #24]
     e04:	ldr	w1, [x0, #5304]
     e08:	ldr	x0, [sp, #24]
     e0c:	ldr	w2, [x0, #3012]
     e10:	ldr	x0, [sp, #24]
     e14:	sxtw	x1, w1
     e18:	add	x1, x1, #0x2f0
     e1c:	str	w2, [x0, x1, lsl #2]
     e20:	ldr	x1, [sp, #16]
     e24:	ldr	x0, [sp, #24]
     e28:	bl	418 <gen_bitlen>
     e2c:	ldr	x0, [sp, #24]
     e30:	add	x0, x0, #0xba0
     e34:	mov	x2, x0
     e38:	ldr	w1, [sp, #72]
     e3c:	ldr	x0, [sp, #56]
     e40:	bl	89c <gen_codes>
     e44:	nop
     e48:	ldp	x29, x30, [sp], #80
     e4c:	ret

0000000000000e50 <scan_tree>:
     e50:	sub	sp, sp, #0x40
     e54:	str	x0, [sp, #24]
     e58:	str	x1, [sp, #16]
     e5c:	str	w2, [sp, #12]
     e60:	mov	w0, #0xffffffff            	// #-1
     e64:	str	w0, [sp, #56]
     e68:	ldr	x0, [sp, #16]
     e6c:	ldrh	w0, [x0, #2]
     e70:	str	w0, [sp, #52]
     e74:	str	wzr, [sp, #48]
     e78:	mov	w0, #0x7                   	// #7
     e7c:	str	w0, [sp, #44]
     e80:	mov	w0, #0x4                   	// #4
     e84:	str	w0, [sp, #40]
     e88:	ldr	w0, [sp, #52]
     e8c:	cmp	w0, #0x0
     e90:	b.ne	ea4 <scan_tree+0x54>  // b.any
     e94:	mov	w0, #0x8a                  	// #138
     e98:	str	w0, [sp, #44]
     e9c:	mov	w0, #0x3                   	// #3
     ea0:	str	w0, [sp, #40]
     ea4:	ldrsw	x0, [sp, #12]
     ea8:	add	x0, x0, #0x1
     eac:	lsl	x0, x0, #2
     eb0:	ldr	x1, [sp, #16]
     eb4:	add	x0, x1, x0
     eb8:	mov	w1, #0xffffffff            	// #-1
     ebc:	strh	w1, [x0, #2]
     ec0:	str	wzr, [sp, #60]
     ec4:	b	1098 <scan_tree+0x248>
     ec8:	ldr	w0, [sp, #52]
     ecc:	str	w0, [sp, #36]
     ed0:	ldrsw	x0, [sp, #60]
     ed4:	add	x0, x0, #0x1
     ed8:	lsl	x0, x0, #2
     edc:	ldr	x1, [sp, #16]
     ee0:	add	x0, x1, x0
     ee4:	ldrh	w0, [x0, #2]
     ee8:	str	w0, [sp, #52]
     eec:	ldr	w0, [sp, #48]
     ef0:	add	w0, w0, #0x1
     ef4:	str	w0, [sp, #48]
     ef8:	ldr	w1, [sp, #48]
     efc:	ldr	w0, [sp, #44]
     f00:	cmp	w1, w0
     f04:	b.ge	f18 <scan_tree+0xc8>  // b.tcont
     f08:	ldr	w1, [sp, #36]
     f0c:	ldr	w0, [sp, #52]
     f10:	cmp	w1, w0
     f14:	b.eq	1088 <scan_tree+0x238>  // b.none
     f18:	ldr	w1, [sp, #48]
     f1c:	ldr	w0, [sp, #40]
     f20:	cmp	w1, w0
     f24:	b.ge	f70 <scan_tree+0x120>  // b.tcont
     f28:	ldr	x1, [sp, #24]
     f2c:	ldrsw	x0, [sp, #36]
     f30:	add	x0, x0, #0x2ac
     f34:	lsl	x0, x0, #2
     f38:	add	x0, x1, x0
     f3c:	ldrh	w1, [x0, #12]
     f40:	ldr	w0, [sp, #48]
     f44:	and	w0, w0, #0xffff
     f48:	add	w0, w1, w0
     f4c:	and	w2, w0, #0xffff
     f50:	ldr	x1, [sp, #24]
     f54:	ldrsw	x0, [sp, #36]
     f58:	add	x0, x0, #0x2ac
     f5c:	lsl	x0, x0, #2
     f60:	add	x0, x1, x0
     f64:	mov	w1, w2
     f68:	strh	w1, [x0, #12]
     f6c:	b	1024 <scan_tree+0x1d4>
     f70:	ldr	w0, [sp, #36]
     f74:	cmp	w0, #0x0
     f78:	b.eq	fe4 <scan_tree+0x194>  // b.none
     f7c:	ldr	w1, [sp, #36]
     f80:	ldr	w0, [sp, #56]
     f84:	cmp	w1, w0
     f88:	b.eq	fc8 <scan_tree+0x178>  // b.none
     f8c:	ldr	x1, [sp, #24]
     f90:	ldrsw	x0, [sp, #36]
     f94:	add	x0, x0, #0x2ac
     f98:	lsl	x0, x0, #2
     f9c:	add	x0, x1, x0
     fa0:	ldrh	w0, [x0, #12]
     fa4:	add	w0, w0, #0x1
     fa8:	and	w2, w0, #0xffff
     fac:	ldr	x1, [sp, #24]
     fb0:	ldrsw	x0, [sp, #36]
     fb4:	add	x0, x0, #0x2ac
     fb8:	lsl	x0, x0, #2
     fbc:	add	x0, x1, x0
     fc0:	mov	w1, w2
     fc4:	strh	w1, [x0, #12]
     fc8:	ldr	x0, [sp, #24]
     fcc:	ldrh	w0, [x0, #2812]
     fd0:	add	w0, w0, #0x1
     fd4:	and	w1, w0, #0xffff
     fd8:	ldr	x0, [sp, #24]
     fdc:	strh	w1, [x0, #2812]
     fe0:	b	1024 <scan_tree+0x1d4>
     fe4:	ldr	w0, [sp, #48]
     fe8:	cmp	w0, #0xa
     fec:	b.gt	100c <scan_tree+0x1bc>
     ff0:	ldr	x0, [sp, #24]
     ff4:	ldrh	w0, [x0, #2816]
     ff8:	add	w0, w0, #0x1
     ffc:	and	w1, w0, #0xffff
    1000:	ldr	x0, [sp, #24]
    1004:	strh	w1, [x0, #2816]
    1008:	b	1024 <scan_tree+0x1d4>
    100c:	ldr	x0, [sp, #24]
    1010:	ldrh	w0, [x0, #2820]
    1014:	add	w0, w0, #0x1
    1018:	and	w1, w0, #0xffff
    101c:	ldr	x0, [sp, #24]
    1020:	strh	w1, [x0, #2820]
    1024:	str	wzr, [sp, #48]
    1028:	ldr	w0, [sp, #36]
    102c:	str	w0, [sp, #56]
    1030:	ldr	w0, [sp, #52]
    1034:	cmp	w0, #0x0
    1038:	b.ne	1050 <scan_tree+0x200>  // b.any
    103c:	mov	w0, #0x8a                  	// #138
    1040:	str	w0, [sp, #44]
    1044:	mov	w0, #0x3                   	// #3
    1048:	str	w0, [sp, #40]
    104c:	b	108c <scan_tree+0x23c>
    1050:	ldr	w1, [sp, #36]
    1054:	ldr	w0, [sp, #52]
    1058:	cmp	w1, w0
    105c:	b.ne	1074 <scan_tree+0x224>  // b.any
    1060:	mov	w0, #0x6                   	// #6
    1064:	str	w0, [sp, #44]
    1068:	mov	w0, #0x3                   	// #3
    106c:	str	w0, [sp, #40]
    1070:	b	108c <scan_tree+0x23c>
    1074:	mov	w0, #0x7                   	// #7
    1078:	str	w0, [sp, #44]
    107c:	mov	w0, #0x4                   	// #4
    1080:	str	w0, [sp, #40]
    1084:	b	108c <scan_tree+0x23c>
    1088:	nop
    108c:	ldr	w0, [sp, #60]
    1090:	add	w0, w0, #0x1
    1094:	str	w0, [sp, #60]
    1098:	ldr	w1, [sp, #60]
    109c:	ldr	w0, [sp, #12]
    10a0:	cmp	w1, w0
    10a4:	b.le	ec8 <scan_tree+0x78>
    10a8:	nop
    10ac:	nop
    10b0:	add	sp, sp, #0x40
    10b4:	ret

00000000000010b8 <send_tree>:
    10b8:	sub	sp, sp, #0x80
    10bc:	str	x0, [sp, #24]
    10c0:	str	x1, [sp, #16]
    10c4:	str	w2, [sp, #12]
    10c8:	mov	w0, #0xffffffff            	// #-1
    10cc:	str	w0, [sp, #120]
    10d0:	ldr	x0, [sp, #16]
    10d4:	ldrh	w0, [x0, #2]
    10d8:	str	w0, [sp, #116]
    10dc:	str	wzr, [sp, #112]
    10e0:	mov	w0, #0x7                   	// #7
    10e4:	str	w0, [sp, #108]
    10e8:	mov	w0, #0x4                   	// #4
    10ec:	str	w0, [sp, #104]
    10f0:	ldr	w0, [sp, #116]
    10f4:	cmp	w0, #0x0
    10f8:	b.ne	110c <send_tree+0x54>  // b.any
    10fc:	mov	w0, #0x8a                  	// #138
    1100:	str	w0, [sp, #108]
    1104:	mov	w0, #0x3                   	// #3
    1108:	str	w0, [sp, #104]
    110c:	str	wzr, [sp, #124]
    1110:	b	1e6c <send_tree+0xdb4>
    1114:	ldr	w0, [sp, #116]
    1118:	str	w0, [sp, #100]
    111c:	ldrsw	x0, [sp, #124]
    1120:	add	x0, x0, #0x1
    1124:	lsl	x0, x0, #2
    1128:	ldr	x1, [sp, #16]
    112c:	add	x0, x1, x0
    1130:	ldrh	w0, [x0, #2]
    1134:	str	w0, [sp, #116]
    1138:	ldr	w0, [sp, #112]
    113c:	add	w0, w0, #0x1
    1140:	str	w0, [sp, #112]
    1144:	ldr	w1, [sp, #112]
    1148:	ldr	w0, [sp, #108]
    114c:	cmp	w1, w0
    1150:	b.ge	1164 <send_tree+0xac>  // b.tcont
    1154:	ldr	w1, [sp, #100]
    1158:	ldr	w0, [sp, #116]
    115c:	cmp	w1, w0
    1160:	b.eq	1e5c <send_tree+0xda4>  // b.none
    1164:	ldr	w1, [sp, #112]
    1168:	ldr	w0, [sp, #104]
    116c:	cmp	w1, w0
    1170:	b.ge	1338 <send_tree+0x280>  // b.tcont
    1174:	ldr	x1, [sp, #24]
    1178:	ldrsw	x0, [sp, #100]
    117c:	add	x0, x0, #0x2ac
    1180:	lsl	x0, x0, #2
    1184:	add	x0, x1, x0
    1188:	ldrh	w0, [x0, #14]
    118c:	str	w0, [sp, #40]
    1190:	ldr	x0, [sp, #24]
    1194:	ldr	w1, [x0, #5940]
    1198:	mov	w2, #0x10                  	// #16
    119c:	ldr	w0, [sp, #40]
    11a0:	sub	w0, w2, w0
    11a4:	cmp	w1, w0
    11a8:	b.le	12b8 <send_tree+0x200>
    11ac:	ldr	x1, [sp, #24]
    11b0:	ldrsw	x0, [sp, #100]
    11b4:	add	x0, x0, #0x2ac
    11b8:	lsl	x0, x0, #2
    11bc:	add	x0, x1, x0
    11c0:	ldrh	w0, [x0, #12]
    11c4:	str	w0, [sp, #36]
    11c8:	ldr	x0, [sp, #24]
    11cc:	ldrh	w0, [x0, #5936]
    11d0:	sxth	w1, w0
    11d4:	ldr	w0, [sp, #36]
    11d8:	and	w0, w0, #0xffff
    11dc:	mov	w2, w0
    11e0:	ldr	x0, [sp, #24]
    11e4:	ldr	w0, [x0, #5940]
    11e8:	lsl	w0, w2, w0
    11ec:	sxth	w0, w0
    11f0:	orr	w0, w1, w0
    11f4:	sxth	w0, w0
    11f8:	and	w1, w0, #0xffff
    11fc:	ldr	x0, [sp, #24]
    1200:	strh	w1, [x0, #5936]
    1204:	ldr	x0, [sp, #24]
    1208:	ldrh	w4, [x0, #5936]
    120c:	ldr	x0, [sp, #24]
    1210:	ldr	x1, [x0, #16]
    1214:	ldr	x0, [sp, #24]
    1218:	ldr	x0, [x0, #40]
    121c:	add	x3, x0, #0x1
    1220:	ldr	x2, [sp, #24]
    1224:	str	x3, [x2, #40]
    1228:	add	x0, x1, x0
    122c:	and	w1, w4, #0xff
    1230:	strb	w1, [x0]
    1234:	ldr	x0, [sp, #24]
    1238:	ldrh	w0, [x0, #5936]
    123c:	lsr	w0, w0, #8
    1240:	and	w4, w0, #0xffff
    1244:	ldr	x0, [sp, #24]
    1248:	ldr	x1, [x0, #16]
    124c:	ldr	x0, [sp, #24]
    1250:	ldr	x0, [x0, #40]
    1254:	add	x3, x0, #0x1
    1258:	ldr	x2, [sp, #24]
    125c:	str	x3, [x2, #40]
    1260:	add	x0, x1, x0
    1264:	and	w1, w4, #0xff
    1268:	strb	w1, [x0]
    126c:	ldr	w0, [sp, #36]
    1270:	and	w0, w0, #0xffff
    1274:	mov	w2, w0
    1278:	ldr	x0, [sp, #24]
    127c:	ldr	w0, [x0, #5940]
    1280:	mov	w1, #0x10                  	// #16
    1284:	sub	w0, w1, w0
    1288:	asr	w0, w2, w0
    128c:	and	w1, w0, #0xffff
    1290:	ldr	x0, [sp, #24]
    1294:	strh	w1, [x0, #5936]
    1298:	ldr	x0, [sp, #24]
    129c:	ldr	w1, [x0, #5940]
    12a0:	ldr	w0, [sp, #40]
    12a4:	sub	w0, w0, #0x10
    12a8:	add	w1, w1, w0
    12ac:	ldr	x0, [sp, #24]
    12b0:	str	w1, [x0, #5940]
    12b4:	b	131c <send_tree+0x264>
    12b8:	ldr	x0, [sp, #24]
    12bc:	ldrh	w0, [x0, #5936]
    12c0:	sxth	w1, w0
    12c4:	ldr	x2, [sp, #24]
    12c8:	ldrsw	x0, [sp, #100]
    12cc:	add	x0, x0, #0x2ac
    12d0:	lsl	x0, x0, #2
    12d4:	add	x0, x2, x0
    12d8:	ldrh	w0, [x0, #12]
    12dc:	mov	w2, w0
    12e0:	ldr	x0, [sp, #24]
    12e4:	ldr	w0, [x0, #5940]
    12e8:	lsl	w0, w2, w0
    12ec:	sxth	w0, w0
    12f0:	orr	w0, w1, w0
    12f4:	sxth	w0, w0
    12f8:	and	w1, w0, #0xffff
    12fc:	ldr	x0, [sp, #24]
    1300:	strh	w1, [x0, #5936]
    1304:	ldr	x0, [sp, #24]
    1308:	ldr	w1, [x0, #5940]
    130c:	ldr	w0, [sp, #40]
    1310:	add	w1, w1, w0
    1314:	ldr	x0, [sp, #24]
    1318:	str	w1, [x0, #5940]
    131c:	ldr	w0, [sp, #112]
    1320:	sub	w0, w0, #0x1
    1324:	str	w0, [sp, #112]
    1328:	ldr	w0, [sp, #112]
    132c:	cmp	w0, #0x0
    1330:	b.ne	1174 <send_tree+0xbc>  // b.any
    1334:	b	1df8 <send_tree+0xd40>
    1338:	ldr	w0, [sp, #100]
    133c:	cmp	w0, #0x0
    1340:	b.eq	1800 <send_tree+0x748>  // b.none
    1344:	ldr	w1, [sp, #100]
    1348:	ldr	w0, [sp, #120]
    134c:	cmp	w1, w0
    1350:	b.eq	1508 <send_tree+0x450>  // b.none
    1354:	ldr	x1, [sp, #24]
    1358:	ldrsw	x0, [sp, #100]
    135c:	add	x0, x0, #0x2ac
    1360:	lsl	x0, x0, #2
    1364:	add	x0, x1, x0
    1368:	ldrh	w0, [x0, #14]
    136c:	str	w0, [sp, #64]
    1370:	ldr	x0, [sp, #24]
    1374:	ldr	w1, [x0, #5940]
    1378:	mov	w2, #0x10                  	// #16
    137c:	ldr	w0, [sp, #64]
    1380:	sub	w0, w2, w0
    1384:	cmp	w1, w0
    1388:	b.le	1498 <send_tree+0x3e0>
    138c:	ldr	x1, [sp, #24]
    1390:	ldrsw	x0, [sp, #100]
    1394:	add	x0, x0, #0x2ac
    1398:	lsl	x0, x0, #2
    139c:	add	x0, x1, x0
    13a0:	ldrh	w0, [x0, #12]
    13a4:	str	w0, [sp, #60]
    13a8:	ldr	x0, [sp, #24]
    13ac:	ldrh	w0, [x0, #5936]
    13b0:	sxth	w1, w0
    13b4:	ldr	w0, [sp, #60]
    13b8:	and	w0, w0, #0xffff
    13bc:	mov	w2, w0
    13c0:	ldr	x0, [sp, #24]
    13c4:	ldr	w0, [x0, #5940]
    13c8:	lsl	w0, w2, w0
    13cc:	sxth	w0, w0
    13d0:	orr	w0, w1, w0
    13d4:	sxth	w0, w0
    13d8:	and	w1, w0, #0xffff
    13dc:	ldr	x0, [sp, #24]
    13e0:	strh	w1, [x0, #5936]
    13e4:	ldr	x0, [sp, #24]
    13e8:	ldrh	w4, [x0, #5936]
    13ec:	ldr	x0, [sp, #24]
    13f0:	ldr	x1, [x0, #16]
    13f4:	ldr	x0, [sp, #24]
    13f8:	ldr	x0, [x0, #40]
    13fc:	add	x3, x0, #0x1
    1400:	ldr	x2, [sp, #24]
    1404:	str	x3, [x2, #40]
    1408:	add	x0, x1, x0
    140c:	and	w1, w4, #0xff
    1410:	strb	w1, [x0]
    1414:	ldr	x0, [sp, #24]
    1418:	ldrh	w0, [x0, #5936]
    141c:	lsr	w0, w0, #8
    1420:	and	w4, w0, #0xffff
    1424:	ldr	x0, [sp, #24]
    1428:	ldr	x1, [x0, #16]
    142c:	ldr	x0, [sp, #24]
    1430:	ldr	x0, [x0, #40]
    1434:	add	x3, x0, #0x1
    1438:	ldr	x2, [sp, #24]
    143c:	str	x3, [x2, #40]
    1440:	add	x0, x1, x0
    1444:	and	w1, w4, #0xff
    1448:	strb	w1, [x0]
    144c:	ldr	w0, [sp, #60]
    1450:	and	w0, w0, #0xffff
    1454:	mov	w2, w0
    1458:	ldr	x0, [sp, #24]
    145c:	ldr	w0, [x0, #5940]
    1460:	mov	w1, #0x10                  	// #16
    1464:	sub	w0, w1, w0
    1468:	asr	w0, w2, w0
    146c:	and	w1, w0, #0xffff
    1470:	ldr	x0, [sp, #24]
    1474:	strh	w1, [x0, #5936]
    1478:	ldr	x0, [sp, #24]
    147c:	ldr	w1, [x0, #5940]
    1480:	ldr	w0, [sp, #64]
    1484:	sub	w0, w0, #0x10
    1488:	add	w1, w1, w0
    148c:	ldr	x0, [sp, #24]
    1490:	str	w1, [x0, #5940]
    1494:	b	14fc <send_tree+0x444>
    1498:	ldr	x0, [sp, #24]
    149c:	ldrh	w0, [x0, #5936]
    14a0:	sxth	w1, w0
    14a4:	ldr	x2, [sp, #24]
    14a8:	ldrsw	x0, [sp, #100]
    14ac:	add	x0, x0, #0x2ac
    14b0:	lsl	x0, x0, #2
    14b4:	add	x0, x2, x0
    14b8:	ldrh	w0, [x0, #12]
    14bc:	mov	w2, w0
    14c0:	ldr	x0, [sp, #24]
    14c4:	ldr	w0, [x0, #5940]
    14c8:	lsl	w0, w2, w0
    14cc:	sxth	w0, w0
    14d0:	orr	w0, w1, w0
    14d4:	sxth	w0, w0
    14d8:	and	w1, w0, #0xffff
    14dc:	ldr	x0, [sp, #24]
    14e0:	strh	w1, [x0, #5936]
    14e4:	ldr	x0, [sp, #24]
    14e8:	ldr	w1, [x0, #5940]
    14ec:	ldr	w0, [sp, #64]
    14f0:	add	w1, w1, w0
    14f4:	ldr	x0, [sp, #24]
    14f8:	str	w1, [x0, #5940]
    14fc:	ldr	w0, [sp, #112]
    1500:	sub	w0, w0, #0x1
    1504:	str	w0, [sp, #112]
    1508:	ldr	x0, [sp, #24]
    150c:	ldrh	w0, [x0, #2814]
    1510:	str	w0, [sp, #56]
    1514:	ldr	x0, [sp, #24]
    1518:	ldr	w1, [x0, #5940]
    151c:	mov	w2, #0x10                  	// #16
    1520:	ldr	w0, [sp, #56]
    1524:	sub	w0, w2, w0
    1528:	cmp	w1, w0
    152c:	b.le	162c <send_tree+0x574>
    1530:	ldr	x0, [sp, #24]
    1534:	ldrh	w0, [x0, #2812]
    1538:	str	w0, [sp, #52]
    153c:	ldr	x0, [sp, #24]
    1540:	ldrh	w0, [x0, #5936]
    1544:	sxth	w1, w0
    1548:	ldr	w0, [sp, #52]
    154c:	and	w0, w0, #0xffff
    1550:	mov	w2, w0
    1554:	ldr	x0, [sp, #24]
    1558:	ldr	w0, [x0, #5940]
    155c:	lsl	w0, w2, w0
    1560:	sxth	w0, w0
    1564:	orr	w0, w1, w0
    1568:	sxth	w0, w0
    156c:	and	w1, w0, #0xffff
    1570:	ldr	x0, [sp, #24]
    1574:	strh	w1, [x0, #5936]
    1578:	ldr	x0, [sp, #24]
    157c:	ldrh	w4, [x0, #5936]
    1580:	ldr	x0, [sp, #24]
    1584:	ldr	x1, [x0, #16]
    1588:	ldr	x0, [sp, #24]
    158c:	ldr	x0, [x0, #40]
    1590:	add	x3, x0, #0x1
    1594:	ldr	x2, [sp, #24]
    1598:	str	x3, [x2, #40]
    159c:	add	x0, x1, x0
    15a0:	and	w1, w4, #0xff
    15a4:	strb	w1, [x0]
    15a8:	ldr	x0, [sp, #24]
    15ac:	ldrh	w0, [x0, #5936]
    15b0:	lsr	w0, w0, #8
    15b4:	and	w4, w0, #0xffff
    15b8:	ldr	x0, [sp, #24]
    15bc:	ldr	x1, [x0, #16]
    15c0:	ldr	x0, [sp, #24]
    15c4:	ldr	x0, [x0, #40]
    15c8:	add	x3, x0, #0x1
    15cc:	ldr	x2, [sp, #24]
    15d0:	str	x3, [x2, #40]
    15d4:	add	x0, x1, x0
    15d8:	and	w1, w4, #0xff
    15dc:	strb	w1, [x0]
    15e0:	ldr	w0, [sp, #52]
    15e4:	and	w0, w0, #0xffff
    15e8:	mov	w2, w0
    15ec:	ldr	x0, [sp, #24]
    15f0:	ldr	w0, [x0, #5940]
    15f4:	mov	w1, #0x10                  	// #16
    15f8:	sub	w0, w1, w0
    15fc:	asr	w0, w2, w0
    1600:	and	w1, w0, #0xffff
    1604:	ldr	x0, [sp, #24]
    1608:	strh	w1, [x0, #5936]
    160c:	ldr	x0, [sp, #24]
    1610:	ldr	w1, [x0, #5940]
    1614:	ldr	w0, [sp, #56]
    1618:	sub	w0, w0, #0x10
    161c:	add	w1, w1, w0
    1620:	ldr	x0, [sp, #24]
    1624:	str	w1, [x0, #5940]
    1628:	b	1680 <send_tree+0x5c8>
    162c:	ldr	x0, [sp, #24]
    1630:	ldrh	w0, [x0, #5936]
    1634:	sxth	w1, w0
    1638:	ldr	x0, [sp, #24]
    163c:	ldrh	w0, [x0, #2812]
    1640:	mov	w2, w0
    1644:	ldr	x0, [sp, #24]
    1648:	ldr	w0, [x0, #5940]
    164c:	lsl	w0, w2, w0
    1650:	sxth	w0, w0
    1654:	orr	w0, w1, w0
    1658:	sxth	w0, w0
    165c:	and	w1, w0, #0xffff
    1660:	ldr	x0, [sp, #24]
    1664:	strh	w1, [x0, #5936]
    1668:	ldr	x0, [sp, #24]
    166c:	ldr	w1, [x0, #5940]
    1670:	ldr	w0, [sp, #56]
    1674:	add	w1, w1, w0
    1678:	ldr	x0, [sp, #24]
    167c:	str	w1, [x0, #5940]
    1680:	mov	w0, #0x2                   	// #2
    1684:	str	w0, [sp, #48]
    1688:	ldr	x0, [sp, #24]
    168c:	ldr	w1, [x0, #5940]
    1690:	mov	w2, #0x10                  	// #16
    1694:	ldr	w0, [sp, #48]
    1698:	sub	w0, w2, w0
    169c:	cmp	w1, w0
    16a0:	b.le	17a0 <send_tree+0x6e8>
    16a4:	ldr	w0, [sp, #112]
    16a8:	sub	w0, w0, #0x3
    16ac:	str	w0, [sp, #44]
    16b0:	ldr	x0, [sp, #24]
    16b4:	ldrh	w0, [x0, #5936]
    16b8:	sxth	w1, w0
    16bc:	ldr	w0, [sp, #44]
    16c0:	and	w0, w0, #0xffff
    16c4:	mov	w2, w0
    16c8:	ldr	x0, [sp, #24]
    16cc:	ldr	w0, [x0, #5940]
    16d0:	lsl	w0, w2, w0
    16d4:	sxth	w0, w0
    16d8:	orr	w0, w1, w0
    16dc:	sxth	w0, w0
    16e0:	and	w1, w0, #0xffff
    16e4:	ldr	x0, [sp, #24]
    16e8:	strh	w1, [x0, #5936]
    16ec:	ldr	x0, [sp, #24]
    16f0:	ldrh	w4, [x0, #5936]
    16f4:	ldr	x0, [sp, #24]
    16f8:	ldr	x1, [x0, #16]
    16fc:	ldr	x0, [sp, #24]
    1700:	ldr	x0, [x0, #40]
    1704:	add	x3, x0, #0x1
    1708:	ldr	x2, [sp, #24]
    170c:	str	x3, [x2, #40]
    1710:	add	x0, x1, x0
    1714:	and	w1, w4, #0xff
    1718:	strb	w1, [x0]
    171c:	ldr	x0, [sp, #24]
    1720:	ldrh	w0, [x0, #5936]
    1724:	lsr	w0, w0, #8
    1728:	and	w4, w0, #0xffff
    172c:	ldr	x0, [sp, #24]
    1730:	ldr	x1, [x0, #16]
    1734:	ldr	x0, [sp, #24]
    1738:	ldr	x0, [x0, #40]
    173c:	add	x3, x0, #0x1
    1740:	ldr	x2, [sp, #24]
    1744:	str	x3, [x2, #40]
    1748:	add	x0, x1, x0
    174c:	and	w1, w4, #0xff
    1750:	strb	w1, [x0]
    1754:	ldr	w0, [sp, #44]
    1758:	and	w0, w0, #0xffff
    175c:	mov	w2, w0
    1760:	ldr	x0, [sp, #24]
    1764:	ldr	w0, [x0, #5940]
    1768:	mov	w1, #0x10                  	// #16
    176c:	sub	w0, w1, w0
    1770:	asr	w0, w2, w0
    1774:	and	w1, w0, #0xffff
    1778:	ldr	x0, [sp, #24]
    177c:	strh	w1, [x0, #5936]
    1780:	ldr	x0, [sp, #24]
    1784:	ldr	w1, [x0, #5940]
    1788:	ldr	w0, [sp, #48]
    178c:	sub	w0, w0, #0x10
    1790:	add	w1, w1, w0
    1794:	ldr	x0, [sp, #24]
    1798:	str	w1, [x0, #5940]
    179c:	b	1df8 <send_tree+0xd40>
    17a0:	ldr	x0, [sp, #24]
    17a4:	ldrh	w0, [x0, #5936]
    17a8:	sxth	w1, w0
    17ac:	ldr	w0, [sp, #112]
    17b0:	and	w0, w0, #0xffff
    17b4:	sub	w0, w0, #0x3
    17b8:	and	w0, w0, #0xffff
    17bc:	mov	w2, w0
    17c0:	ldr	x0, [sp, #24]
    17c4:	ldr	w0, [x0, #5940]
    17c8:	lsl	w0, w2, w0
    17cc:	sxth	w0, w0
    17d0:	orr	w0, w1, w0
    17d4:	sxth	w0, w0
    17d8:	and	w1, w0, #0xffff
    17dc:	ldr	x0, [sp, #24]
    17e0:	strh	w1, [x0, #5936]
    17e4:	ldr	x0, [sp, #24]
    17e8:	ldr	w1, [x0, #5940]
    17ec:	ldr	w0, [sp, #48]
    17f0:	add	w1, w1, w0
    17f4:	ldr	x0, [sp, #24]
    17f8:	str	w1, [x0, #5940]
    17fc:	b	1df8 <send_tree+0xd40>
    1800:	ldr	w0, [sp, #112]
    1804:	cmp	w0, #0xa
    1808:	b.gt	1b04 <send_tree+0xa4c>
    180c:	ldr	x0, [sp, #24]
    1810:	ldrh	w0, [x0, #2818]
    1814:	str	w0, [sp, #80]
    1818:	ldr	x0, [sp, #24]
    181c:	ldr	w1, [x0, #5940]
    1820:	mov	w2, #0x10                  	// #16
    1824:	ldr	w0, [sp, #80]
    1828:	sub	w0, w2, w0
    182c:	cmp	w1, w0
    1830:	b.le	1930 <send_tree+0x878>
    1834:	ldr	x0, [sp, #24]
    1838:	ldrh	w0, [x0, #2816]
    183c:	str	w0, [sp, #76]
    1840:	ldr	x0, [sp, #24]
    1844:	ldrh	w0, [x0, #5936]
    1848:	sxth	w1, w0
    184c:	ldr	w0, [sp, #76]
    1850:	and	w0, w0, #0xffff
    1854:	mov	w2, w0
    1858:	ldr	x0, [sp, #24]
    185c:	ldr	w0, [x0, #5940]
    1860:	lsl	w0, w2, w0
    1864:	sxth	w0, w0
    1868:	orr	w0, w1, w0
    186c:	sxth	w0, w0
    1870:	and	w1, w0, #0xffff
    1874:	ldr	x0, [sp, #24]
    1878:	strh	w1, [x0, #5936]
    187c:	ldr	x0, [sp, #24]
    1880:	ldrh	w4, [x0, #5936]
    1884:	ldr	x0, [sp, #24]
    1888:	ldr	x1, [x0, #16]
    188c:	ldr	x0, [sp, #24]
    1890:	ldr	x0, [x0, #40]
    1894:	add	x3, x0, #0x1
    1898:	ldr	x2, [sp, #24]
    189c:	str	x3, [x2, #40]
    18a0:	add	x0, x1, x0
    18a4:	and	w1, w4, #0xff
    18a8:	strb	w1, [x0]
    18ac:	ldr	x0, [sp, #24]
    18b0:	ldrh	w0, [x0, #5936]
    18b4:	lsr	w0, w0, #8
    18b8:	and	w4, w0, #0xffff
    18bc:	ldr	x0, [sp, #24]
    18c0:	ldr	x1, [x0, #16]
    18c4:	ldr	x0, [sp, #24]
    18c8:	ldr	x0, [x0, #40]
    18cc:	add	x3, x0, #0x1
    18d0:	ldr	x2, [sp, #24]
    18d4:	str	x3, [x2, #40]
    18d8:	add	x0, x1, x0
    18dc:	and	w1, w4, #0xff
    18e0:	strb	w1, [x0]
    18e4:	ldr	w0, [sp, #76]
    18e8:	and	w0, w0, #0xffff
    18ec:	mov	w2, w0
    18f0:	ldr	x0, [sp, #24]
    18f4:	ldr	w0, [x0, #5940]
    18f8:	mov	w1, #0x10                  	// #16
    18fc:	sub	w0, w1, w0
    1900:	asr	w0, w2, w0
    1904:	and	w1, w0, #0xffff
    1908:	ldr	x0, [sp, #24]
    190c:	strh	w1, [x0, #5936]
    1910:	ldr	x0, [sp, #24]
    1914:	ldr	w1, [x0, #5940]
    1918:	ldr	w0, [sp, #80]
    191c:	sub	w0, w0, #0x10
    1920:	add	w1, w1, w0
    1924:	ldr	x0, [sp, #24]
    1928:	str	w1, [x0, #5940]
    192c:	b	1984 <send_tree+0x8cc>
    1930:	ldr	x0, [sp, #24]
    1934:	ldrh	w0, [x0, #5936]
    1938:	sxth	w1, w0
    193c:	ldr	x0, [sp, #24]
    1940:	ldrh	w0, [x0, #2816]
    1944:	mov	w2, w0
    1948:	ldr	x0, [sp, #24]
    194c:	ldr	w0, [x0, #5940]
    1950:	lsl	w0, w2, w0
    1954:	sxth	w0, w0
    1958:	orr	w0, w1, w0
    195c:	sxth	w0, w0
    1960:	and	w1, w0, #0xffff
    1964:	ldr	x0, [sp, #24]
    1968:	strh	w1, [x0, #5936]
    196c:	ldr	x0, [sp, #24]
    1970:	ldr	w1, [x0, #5940]
    1974:	ldr	w0, [sp, #80]
    1978:	add	w1, w1, w0
    197c:	ldr	x0, [sp, #24]
    1980:	str	w1, [x0, #5940]
    1984:	mov	w0, #0x3                   	// #3
    1988:	str	w0, [sp, #72]
    198c:	ldr	x0, [sp, #24]
    1990:	ldr	w1, [x0, #5940]
    1994:	mov	w2, #0x10                  	// #16
    1998:	ldr	w0, [sp, #72]
    199c:	sub	w0, w2, w0
    19a0:	cmp	w1, w0
    19a4:	b.le	1aa4 <send_tree+0x9ec>
    19a8:	ldr	w0, [sp, #112]
    19ac:	sub	w0, w0, #0x3
    19b0:	str	w0, [sp, #68]
    19b4:	ldr	x0, [sp, #24]
    19b8:	ldrh	w0, [x0, #5936]
    19bc:	sxth	w1, w0
    19c0:	ldr	w0, [sp, #68]
    19c4:	and	w0, w0, #0xffff
    19c8:	mov	w2, w0
    19cc:	ldr	x0, [sp, #24]
    19d0:	ldr	w0, [x0, #5940]
    19d4:	lsl	w0, w2, w0
    19d8:	sxth	w0, w0
    19dc:	orr	w0, w1, w0
    19e0:	sxth	w0, w0
    19e4:	and	w1, w0, #0xffff
    19e8:	ldr	x0, [sp, #24]
    19ec:	strh	w1, [x0, #5936]
    19f0:	ldr	x0, [sp, #24]
    19f4:	ldrh	w4, [x0, #5936]
    19f8:	ldr	x0, [sp, #24]
    19fc:	ldr	x1, [x0, #16]
    1a00:	ldr	x0, [sp, #24]
    1a04:	ldr	x0, [x0, #40]
    1a08:	add	x3, x0, #0x1
    1a0c:	ldr	x2, [sp, #24]
    1a10:	str	x3, [x2, #40]
    1a14:	add	x0, x1, x0
    1a18:	and	w1, w4, #0xff
    1a1c:	strb	w1, [x0]
    1a20:	ldr	x0, [sp, #24]
    1a24:	ldrh	w0, [x0, #5936]
    1a28:	lsr	w0, w0, #8
    1a2c:	and	w4, w0, #0xffff
    1a30:	ldr	x0, [sp, #24]
    1a34:	ldr	x1, [x0, #16]
    1a38:	ldr	x0, [sp, #24]
    1a3c:	ldr	x0, [x0, #40]
    1a40:	add	x3, x0, #0x1
    1a44:	ldr	x2, [sp, #24]
    1a48:	str	x3, [x2, #40]
    1a4c:	add	x0, x1, x0
    1a50:	and	w1, w4, #0xff
    1a54:	strb	w1, [x0]
    1a58:	ldr	w0, [sp, #68]
    1a5c:	and	w0, w0, #0xffff
    1a60:	mov	w2, w0
    1a64:	ldr	x0, [sp, #24]
    1a68:	ldr	w0, [x0, #5940]
    1a6c:	mov	w1, #0x10                  	// #16
    1a70:	sub	w0, w1, w0
    1a74:	asr	w0, w2, w0
    1a78:	and	w1, w0, #0xffff
    1a7c:	ldr	x0, [sp, #24]
    1a80:	strh	w1, [x0, #5936]
    1a84:	ldr	x0, [sp, #24]
    1a88:	ldr	w1, [x0, #5940]
    1a8c:	ldr	w0, [sp, #72]
    1a90:	sub	w0, w0, #0x10
    1a94:	add	w1, w1, w0
    1a98:	ldr	x0, [sp, #24]
    1a9c:	str	w1, [x0, #5940]
    1aa0:	b	1df8 <send_tree+0xd40>
    1aa4:	ldr	x0, [sp, #24]
    1aa8:	ldrh	w0, [x0, #5936]
    1aac:	sxth	w1, w0
    1ab0:	ldr	w0, [sp, #112]
    1ab4:	and	w0, w0, #0xffff
    1ab8:	sub	w0, w0, #0x3
    1abc:	and	w0, w0, #0xffff
    1ac0:	mov	w2, w0
    1ac4:	ldr	x0, [sp, #24]
    1ac8:	ldr	w0, [x0, #5940]
    1acc:	lsl	w0, w2, w0
    1ad0:	sxth	w0, w0
    1ad4:	orr	w0, w1, w0
    1ad8:	sxth	w0, w0
    1adc:	and	w1, w0, #0xffff
    1ae0:	ldr	x0, [sp, #24]
    1ae4:	strh	w1, [x0, #5936]
    1ae8:	ldr	x0, [sp, #24]
    1aec:	ldr	w1, [x0, #5940]
    1af0:	ldr	w0, [sp, #72]
    1af4:	add	w1, w1, w0
    1af8:	ldr	x0, [sp, #24]
    1afc:	str	w1, [x0, #5940]
    1b00:	b	1df8 <send_tree+0xd40>
    1b04:	ldr	x0, [sp, #24]
    1b08:	ldrh	w0, [x0, #2822]
    1b0c:	str	w0, [sp, #96]
    1b10:	ldr	x0, [sp, #24]
    1b14:	ldr	w1, [x0, #5940]
    1b18:	mov	w2, #0x10                  	// #16
    1b1c:	ldr	w0, [sp, #96]
    1b20:	sub	w0, w2, w0
    1b24:	cmp	w1, w0
    1b28:	b.le	1c28 <send_tree+0xb70>
    1b2c:	ldr	x0, [sp, #24]
    1b30:	ldrh	w0, [x0, #2820]
    1b34:	str	w0, [sp, #92]
    1b38:	ldr	x0, [sp, #24]
    1b3c:	ldrh	w0, [x0, #5936]
    1b40:	sxth	w1, w0
    1b44:	ldr	w0, [sp, #92]
    1b48:	and	w0, w0, #0xffff
    1b4c:	mov	w2, w0
    1b50:	ldr	x0, [sp, #24]
    1b54:	ldr	w0, [x0, #5940]
    1b58:	lsl	w0, w2, w0
    1b5c:	sxth	w0, w0
    1b60:	orr	w0, w1, w0
    1b64:	sxth	w0, w0
    1b68:	and	w1, w0, #0xffff
    1b6c:	ldr	x0, [sp, #24]
    1b70:	strh	w1, [x0, #5936]
    1b74:	ldr	x0, [sp, #24]
    1b78:	ldrh	w4, [x0, #5936]
    1b7c:	ldr	x0, [sp, #24]
    1b80:	ldr	x1, [x0, #16]
    1b84:	ldr	x0, [sp, #24]
    1b88:	ldr	x0, [x0, #40]
    1b8c:	add	x3, x0, #0x1
    1b90:	ldr	x2, [sp, #24]
    1b94:	str	x3, [x2, #40]
    1b98:	add	x0, x1, x0
    1b9c:	and	w1, w4, #0xff
    1ba0:	strb	w1, [x0]
    1ba4:	ldr	x0, [sp, #24]
    1ba8:	ldrh	w0, [x0, #5936]
    1bac:	lsr	w0, w0, #8
    1bb0:	and	w4, w0, #0xffff
    1bb4:	ldr	x0, [sp, #24]
    1bb8:	ldr	x1, [x0, #16]
    1bbc:	ldr	x0, [sp, #24]
    1bc0:	ldr	x0, [x0, #40]
    1bc4:	add	x3, x0, #0x1
    1bc8:	ldr	x2, [sp, #24]
    1bcc:	str	x3, [x2, #40]
    1bd0:	add	x0, x1, x0
    1bd4:	and	w1, w4, #0xff
    1bd8:	strb	w1, [x0]
    1bdc:	ldr	w0, [sp, #92]
    1be0:	and	w0, w0, #0xffff
    1be4:	mov	w2, w0
    1be8:	ldr	x0, [sp, #24]
    1bec:	ldr	w0, [x0, #5940]
    1bf0:	mov	w1, #0x10                  	// #16
    1bf4:	sub	w0, w1, w0
    1bf8:	asr	w0, w2, w0
    1bfc:	and	w1, w0, #0xffff
    1c00:	ldr	x0, [sp, #24]
    1c04:	strh	w1, [x0, #5936]
    1c08:	ldr	x0, [sp, #24]
    1c0c:	ldr	w1, [x0, #5940]
    1c10:	ldr	w0, [sp, #96]
    1c14:	sub	w0, w0, #0x10
    1c18:	add	w1, w1, w0
    1c1c:	ldr	x0, [sp, #24]
    1c20:	str	w1, [x0, #5940]
    1c24:	b	1c7c <send_tree+0xbc4>
    1c28:	ldr	x0, [sp, #24]
    1c2c:	ldrh	w0, [x0, #5936]
    1c30:	sxth	w1, w0
    1c34:	ldr	x0, [sp, #24]
    1c38:	ldrh	w0, [x0, #2820]
    1c3c:	mov	w2, w0
    1c40:	ldr	x0, [sp, #24]
    1c44:	ldr	w0, [x0, #5940]
    1c48:	lsl	w0, w2, w0
    1c4c:	sxth	w0, w0
    1c50:	orr	w0, w1, w0
    1c54:	sxth	w0, w0
    1c58:	and	w1, w0, #0xffff
    1c5c:	ldr	x0, [sp, #24]
    1c60:	strh	w1, [x0, #5936]
    1c64:	ldr	x0, [sp, #24]
    1c68:	ldr	w1, [x0, #5940]
    1c6c:	ldr	w0, [sp, #96]
    1c70:	add	w1, w1, w0
    1c74:	ldr	x0, [sp, #24]
    1c78:	str	w1, [x0, #5940]
    1c7c:	mov	w0, #0x7                   	// #7
    1c80:	str	w0, [sp, #88]
    1c84:	ldr	x0, [sp, #24]
    1c88:	ldr	w1, [x0, #5940]
    1c8c:	mov	w2, #0x10                  	// #16
    1c90:	ldr	w0, [sp, #88]
    1c94:	sub	w0, w2, w0
    1c98:	cmp	w1, w0
    1c9c:	b.le	1d9c <send_tree+0xce4>
    1ca0:	ldr	w0, [sp, #112]
    1ca4:	sub	w0, w0, #0xb
    1ca8:	str	w0, [sp, #84]
    1cac:	ldr	x0, [sp, #24]
    1cb0:	ldrh	w0, [x0, #5936]
    1cb4:	sxth	w1, w0
    1cb8:	ldr	w0, [sp, #84]
    1cbc:	and	w0, w0, #0xffff
    1cc0:	mov	w2, w0
    1cc4:	ldr	x0, [sp, #24]
    1cc8:	ldr	w0, [x0, #5940]
    1ccc:	lsl	w0, w2, w0
    1cd0:	sxth	w0, w0
    1cd4:	orr	w0, w1, w0
    1cd8:	sxth	w0, w0
    1cdc:	and	w1, w0, #0xffff
    1ce0:	ldr	x0, [sp, #24]
    1ce4:	strh	w1, [x0, #5936]
    1ce8:	ldr	x0, [sp, #24]
    1cec:	ldrh	w4, [x0, #5936]
    1cf0:	ldr	x0, [sp, #24]
    1cf4:	ldr	x1, [x0, #16]
    1cf8:	ldr	x0, [sp, #24]
    1cfc:	ldr	x0, [x0, #40]
    1d00:	add	x3, x0, #0x1
    1d04:	ldr	x2, [sp, #24]
    1d08:	str	x3, [x2, #40]
    1d0c:	add	x0, x1, x0
    1d10:	and	w1, w4, #0xff
    1d14:	strb	w1, [x0]
    1d18:	ldr	x0, [sp, #24]
    1d1c:	ldrh	w0, [x0, #5936]
    1d20:	lsr	w0, w0, #8
    1d24:	and	w4, w0, #0xffff
    1d28:	ldr	x0, [sp, #24]
    1d2c:	ldr	x1, [x0, #16]
    1d30:	ldr	x0, [sp, #24]
    1d34:	ldr	x0, [x0, #40]
    1d38:	add	x3, x0, #0x1
    1d3c:	ldr	x2, [sp, #24]
    1d40:	str	x3, [x2, #40]
    1d44:	add	x0, x1, x0
    1d48:	and	w1, w4, #0xff
    1d4c:	strb	w1, [x0]
    1d50:	ldr	w0, [sp, #84]
    1d54:	and	w0, w0, #0xffff
    1d58:	mov	w2, w0
    1d5c:	ldr	x0, [sp, #24]
    1d60:	ldr	w0, [x0, #5940]
    1d64:	mov	w1, #0x10                  	// #16
    1d68:	sub	w0, w1, w0
    1d6c:	asr	w0, w2, w0
    1d70:	and	w1, w0, #0xffff
    1d74:	ldr	x0, [sp, #24]
    1d78:	strh	w1, [x0, #5936]
    1d7c:	ldr	x0, [sp, #24]
    1d80:	ldr	w1, [x0, #5940]
    1d84:	ldr	w0, [sp, #88]
    1d88:	sub	w0, w0, #0x10
    1d8c:	add	w1, w1, w0
    1d90:	ldr	x0, [sp, #24]
    1d94:	str	w1, [x0, #5940]
    1d98:	b	1df8 <send_tree+0xd40>
    1d9c:	ldr	x0, [sp, #24]
    1da0:	ldrh	w0, [x0, #5936]
    1da4:	sxth	w1, w0
    1da8:	ldr	w0, [sp, #112]
    1dac:	and	w0, w0, #0xffff
    1db0:	sub	w0, w0, #0xb
    1db4:	and	w0, w0, #0xffff
    1db8:	mov	w2, w0
    1dbc:	ldr	x0, [sp, #24]
    1dc0:	ldr	w0, [x0, #5940]
    1dc4:	lsl	w0, w2, w0
    1dc8:	sxth	w0, w0
    1dcc:	orr	w0, w1, w0
    1dd0:	sxth	w0, w0
    1dd4:	and	w1, w0, #0xffff
    1dd8:	ldr	x0, [sp, #24]
    1ddc:	strh	w1, [x0, #5936]
    1de0:	ldr	x0, [sp, #24]
    1de4:	ldr	w1, [x0, #5940]
    1de8:	ldr	w0, [sp, #88]
    1dec:	add	w1, w1, w0
    1df0:	ldr	x0, [sp, #24]
    1df4:	str	w1, [x0, #5940]
    1df8:	str	wzr, [sp, #112]
    1dfc:	ldr	w0, [sp, #100]
    1e00:	str	w0, [sp, #120]
    1e04:	ldr	w0, [sp, #116]
    1e08:	cmp	w0, #0x0
    1e0c:	b.ne	1e24 <send_tree+0xd6c>  // b.any
    1e10:	mov	w0, #0x8a                  	// #138
    1e14:	str	w0, [sp, #108]
    1e18:	mov	w0, #0x3                   	// #3
    1e1c:	str	w0, [sp, #104]
    1e20:	b	1e60 <send_tree+0xda8>
    1e24:	ldr	w1, [sp, #100]
    1e28:	ldr	w0, [sp, #116]
    1e2c:	cmp	w1, w0
    1e30:	b.ne	1e48 <send_tree+0xd90>  // b.any
    1e34:	mov	w0, #0x6                   	// #6
    1e38:	str	w0, [sp, #108]
    1e3c:	mov	w0, #0x3                   	// #3
    1e40:	str	w0, [sp, #104]
    1e44:	b	1e60 <send_tree+0xda8>
    1e48:	mov	w0, #0x7                   	// #7
    1e4c:	str	w0, [sp, #108]
    1e50:	mov	w0, #0x4                   	// #4
    1e54:	str	w0, [sp, #104]
    1e58:	b	1e60 <send_tree+0xda8>
    1e5c:	nop
    1e60:	ldr	w0, [sp, #124]
    1e64:	add	w0, w0, #0x1
    1e68:	str	w0, [sp, #124]
    1e6c:	ldr	w1, [sp, #124]
    1e70:	ldr	w0, [sp, #12]
    1e74:	cmp	w1, w0
    1e78:	b.le	1114 <send_tree+0x5c>
    1e7c:	nop
    1e80:	nop
    1e84:	add	sp, sp, #0x80
    1e88:	ret

0000000000001e8c <build_bl_tree>:
    1e8c:	stp	x29, x30, [sp, #-48]!
    1e90:	mov	x29, sp
    1e94:	str	x0, [sp, #24]
    1e98:	ldr	x0, [sp, #24]
    1e9c:	add	x1, x0, #0xd4
    1ea0:	ldr	x0, [sp, #24]
    1ea4:	ldr	w0, [x0, #2912]
    1ea8:	mov	w2, w0
    1eac:	ldr	x0, [sp, #24]
    1eb0:	bl	e50 <scan_tree>
    1eb4:	ldr	x0, [sp, #24]
    1eb8:	add	x1, x0, #0x9c8
    1ebc:	ldr	x0, [sp, #24]
    1ec0:	ldr	w0, [x0, #2936]
    1ec4:	mov	w2, w0
    1ec8:	ldr	x0, [sp, #24]
    1ecc:	bl	e50 <scan_tree>
    1ed0:	ldr	x0, [sp, #24]
    1ed4:	add	x0, x0, #0xb88
    1ed8:	mov	x1, x0
    1edc:	ldr	x0, [sp, #24]
    1ee0:	bl	9c8 <build_tree>
    1ee4:	mov	w0, #0x12                  	// #18
    1ee8:	str	w0, [sp, #44]
    1eec:	b	1f2c <build_bl_tree+0xa0>
    1ef0:	adrp	x0, 0 <tr_static_init>
    1ef4:	add	x1, x0, #0x0
    1ef8:	ldrsw	x0, [sp, #44]
    1efc:	ldrb	w0, [x1, x0]
    1f00:	ldr	x1, [sp, #24]
    1f04:	sxtw	x0, w0
    1f08:	add	x0, x0, #0x2ac
    1f0c:	lsl	x0, x0, #2
    1f10:	add	x0, x1, x0
    1f14:	ldrh	w0, [x0, #14]
    1f18:	cmp	w0, #0x0
    1f1c:	b.ne	1f3c <build_bl_tree+0xb0>  // b.any
    1f20:	ldr	w0, [sp, #44]
    1f24:	sub	w0, w0, #0x1
    1f28:	str	w0, [sp, #44]
    1f2c:	ldr	w0, [sp, #44]
    1f30:	cmp	w0, #0x2
    1f34:	b.gt	1ef0 <build_bl_tree+0x64>
    1f38:	b	1f40 <build_bl_tree+0xb4>
    1f3c:	nop
    1f40:	ldr	x0, [sp, #24]
    1f44:	ldr	x2, [x0, #5912]
    1f48:	ldrsw	x0, [sp, #44]
    1f4c:	add	x1, x0, #0x1
    1f50:	mov	x0, x1
    1f54:	lsl	x0, x0, #1
    1f58:	add	x0, x0, x1
    1f5c:	add	x0, x2, x0
    1f60:	add	x1, x0, #0xe
    1f64:	ldr	x0, [sp, #24]
    1f68:	str	x1, [x0, #5912]
    1f6c:	ldr	w0, [sp, #44]
    1f70:	ldp	x29, x30, [sp], #48
    1f74:	ret

0000000000001f78 <send_all_trees>:
    1f78:	stp	x29, x30, [sp, #-96]!
    1f7c:	mov	x29, sp
    1f80:	str	x0, [sp, #40]
    1f84:	str	w1, [sp, #36]
    1f88:	str	w2, [sp, #32]
    1f8c:	str	w3, [sp, #28]
    1f90:	mov	w0, #0x5                   	// #5
    1f94:	str	w0, [sp, #88]
    1f98:	ldr	x0, [sp, #40]
    1f9c:	ldr	w1, [x0, #5940]
    1fa0:	mov	w2, #0x10                  	// #16
    1fa4:	ldr	w0, [sp, #88]
    1fa8:	sub	w0, w2, w0
    1fac:	cmp	w1, w0
    1fb0:	b.le	20b0 <send_all_trees+0x138>
    1fb4:	ldr	w0, [sp, #36]
    1fb8:	sub	w0, w0, #0x101
    1fbc:	str	w0, [sp, #84]
    1fc0:	ldr	x0, [sp, #40]
    1fc4:	ldrh	w0, [x0, #5936]
    1fc8:	sxth	w1, w0
    1fcc:	ldr	w0, [sp, #84]
    1fd0:	and	w0, w0, #0xffff
    1fd4:	mov	w2, w0
    1fd8:	ldr	x0, [sp, #40]
    1fdc:	ldr	w0, [x0, #5940]
    1fe0:	lsl	w0, w2, w0
    1fe4:	sxth	w0, w0
    1fe8:	orr	w0, w1, w0
    1fec:	sxth	w0, w0
    1ff0:	and	w1, w0, #0xffff
    1ff4:	ldr	x0, [sp, #40]
    1ff8:	strh	w1, [x0, #5936]
    1ffc:	ldr	x0, [sp, #40]
    2000:	ldrh	w4, [x0, #5936]
    2004:	ldr	x0, [sp, #40]
    2008:	ldr	x1, [x0, #16]
    200c:	ldr	x0, [sp, #40]
    2010:	ldr	x0, [x0, #40]
    2014:	add	x3, x0, #0x1
    2018:	ldr	x2, [sp, #40]
    201c:	str	x3, [x2, #40]
    2020:	add	x0, x1, x0
    2024:	and	w1, w4, #0xff
    2028:	strb	w1, [x0]
    202c:	ldr	x0, [sp, #40]
    2030:	ldrh	w0, [x0, #5936]
    2034:	lsr	w0, w0, #8
    2038:	and	w4, w0, #0xffff
    203c:	ldr	x0, [sp, #40]
    2040:	ldr	x1, [x0, #16]
    2044:	ldr	x0, [sp, #40]
    2048:	ldr	x0, [x0, #40]
    204c:	add	x3, x0, #0x1
    2050:	ldr	x2, [sp, #40]
    2054:	str	x3, [x2, #40]
    2058:	add	x0, x1, x0
    205c:	and	w1, w4, #0xff
    2060:	strb	w1, [x0]
    2064:	ldr	w0, [sp, #84]
    2068:	and	w0, w0, #0xffff
    206c:	mov	w2, w0
    2070:	ldr	x0, [sp, #40]
    2074:	ldr	w0, [x0, #5940]
    2078:	mov	w1, #0x10                  	// #16
    207c:	sub	w0, w1, w0
    2080:	asr	w0, w2, w0
    2084:	and	w1, w0, #0xffff
    2088:	ldr	x0, [sp, #40]
    208c:	strh	w1, [x0, #5936]
    2090:	ldr	x0, [sp, #40]
    2094:	ldr	w1, [x0, #5940]
    2098:	ldr	w0, [sp, #88]
    209c:	sub	w0, w0, #0x10
    20a0:	add	w1, w1, w0
    20a4:	ldr	x0, [sp, #40]
    20a8:	str	w1, [x0, #5940]
    20ac:	b	210c <send_all_trees+0x194>
    20b0:	ldr	x0, [sp, #40]
    20b4:	ldrh	w0, [x0, #5936]
    20b8:	sxth	w1, w0
    20bc:	ldr	w0, [sp, #36]
    20c0:	and	w0, w0, #0xffff
    20c4:	sub	w0, w0, #0x101
    20c8:	and	w0, w0, #0xffff
    20cc:	mov	w2, w0
    20d0:	ldr	x0, [sp, #40]
    20d4:	ldr	w0, [x0, #5940]
    20d8:	lsl	w0, w2, w0
    20dc:	sxth	w0, w0
    20e0:	orr	w0, w1, w0
    20e4:	sxth	w0, w0
    20e8:	and	w1, w0, #0xffff
    20ec:	ldr	x0, [sp, #40]
    20f0:	strh	w1, [x0, #5936]
    20f4:	ldr	x0, [sp, #40]
    20f8:	ldr	w1, [x0, #5940]
    20fc:	ldr	w0, [sp, #88]
    2100:	add	w1, w1, w0
    2104:	ldr	x0, [sp, #40]
    2108:	str	w1, [x0, #5940]
    210c:	mov	w0, #0x5                   	// #5
    2110:	str	w0, [sp, #80]
    2114:	ldr	x0, [sp, #40]
    2118:	ldr	w1, [x0, #5940]
    211c:	mov	w2, #0x10                  	// #16
    2120:	ldr	w0, [sp, #80]
    2124:	sub	w0, w2, w0
    2128:	cmp	w1, w0
    212c:	b.le	222c <send_all_trees+0x2b4>
    2130:	ldr	w0, [sp, #32]
    2134:	sub	w0, w0, #0x1
    2138:	str	w0, [sp, #76]
    213c:	ldr	x0, [sp, #40]
    2140:	ldrh	w0, [x0, #5936]
    2144:	sxth	w1, w0
    2148:	ldr	w0, [sp, #76]
    214c:	and	w0, w0, #0xffff
    2150:	mov	w2, w0
    2154:	ldr	x0, [sp, #40]
    2158:	ldr	w0, [x0, #5940]
    215c:	lsl	w0, w2, w0
    2160:	sxth	w0, w0
    2164:	orr	w0, w1, w0
    2168:	sxth	w0, w0
    216c:	and	w1, w0, #0xffff
    2170:	ldr	x0, [sp, #40]
    2174:	strh	w1, [x0, #5936]
    2178:	ldr	x0, [sp, #40]
    217c:	ldrh	w4, [x0, #5936]
    2180:	ldr	x0, [sp, #40]
    2184:	ldr	x1, [x0, #16]
    2188:	ldr	x0, [sp, #40]
    218c:	ldr	x0, [x0, #40]
    2190:	add	x3, x0, #0x1
    2194:	ldr	x2, [sp, #40]
    2198:	str	x3, [x2, #40]
    219c:	add	x0, x1, x0
    21a0:	and	w1, w4, #0xff
    21a4:	strb	w1, [x0]
    21a8:	ldr	x0, [sp, #40]
    21ac:	ldrh	w0, [x0, #5936]
    21b0:	lsr	w0, w0, #8
    21b4:	and	w4, w0, #0xffff
    21b8:	ldr	x0, [sp, #40]
    21bc:	ldr	x1, [x0, #16]
    21c0:	ldr	x0, [sp, #40]
    21c4:	ldr	x0, [x0, #40]
    21c8:	add	x3, x0, #0x1
    21cc:	ldr	x2, [sp, #40]
    21d0:	str	x3, [x2, #40]
    21d4:	add	x0, x1, x0
    21d8:	and	w1, w4, #0xff
    21dc:	strb	w1, [x0]
    21e0:	ldr	w0, [sp, #76]
    21e4:	and	w0, w0, #0xffff
    21e8:	mov	w2, w0
    21ec:	ldr	x0, [sp, #40]
    21f0:	ldr	w0, [x0, #5940]
    21f4:	mov	w1, #0x10                  	// #16
    21f8:	sub	w0, w1, w0
    21fc:	asr	w0, w2, w0
    2200:	and	w1, w0, #0xffff
    2204:	ldr	x0, [sp, #40]
    2208:	strh	w1, [x0, #5936]
    220c:	ldr	x0, [sp, #40]
    2210:	ldr	w1, [x0, #5940]
    2214:	ldr	w0, [sp, #80]
    2218:	sub	w0, w0, #0x10
    221c:	add	w1, w1, w0
    2220:	ldr	x0, [sp, #40]
    2224:	str	w1, [x0, #5940]
    2228:	b	2288 <send_all_trees+0x310>
    222c:	ldr	x0, [sp, #40]
    2230:	ldrh	w0, [x0, #5936]
    2234:	sxth	w1, w0
    2238:	ldr	w0, [sp, #32]
    223c:	and	w0, w0, #0xffff
    2240:	sub	w0, w0, #0x1
    2244:	and	w0, w0, #0xffff
    2248:	mov	w2, w0
    224c:	ldr	x0, [sp, #40]
    2250:	ldr	w0, [x0, #5940]
    2254:	lsl	w0, w2, w0
    2258:	sxth	w0, w0
    225c:	orr	w0, w1, w0
    2260:	sxth	w0, w0
    2264:	and	w1, w0, #0xffff
    2268:	ldr	x0, [sp, #40]
    226c:	strh	w1, [x0, #5936]
    2270:	ldr	x0, [sp, #40]
    2274:	ldr	w1, [x0, #5940]
    2278:	ldr	w0, [sp, #80]
    227c:	add	w1, w1, w0
    2280:	ldr	x0, [sp, #40]
    2284:	str	w1, [x0, #5940]
    2288:	mov	w0, #0x4                   	// #4
    228c:	str	w0, [sp, #72]
    2290:	ldr	x0, [sp, #40]
    2294:	ldr	w1, [x0, #5940]
    2298:	mov	w2, #0x10                  	// #16
    229c:	ldr	w0, [sp, #72]
    22a0:	sub	w0, w2, w0
    22a4:	cmp	w1, w0
    22a8:	b.le	23a8 <send_all_trees+0x430>
    22ac:	ldr	w0, [sp, #28]
    22b0:	sub	w0, w0, #0x4
    22b4:	str	w0, [sp, #68]
    22b8:	ldr	x0, [sp, #40]
    22bc:	ldrh	w0, [x0, #5936]
    22c0:	sxth	w1, w0
    22c4:	ldr	w0, [sp, #68]
    22c8:	and	w0, w0, #0xffff
    22cc:	mov	w2, w0
    22d0:	ldr	x0, [sp, #40]
    22d4:	ldr	w0, [x0, #5940]
    22d8:	lsl	w0, w2, w0
    22dc:	sxth	w0, w0
    22e0:	orr	w0, w1, w0
    22e4:	sxth	w0, w0
    22e8:	and	w1, w0, #0xffff
    22ec:	ldr	x0, [sp, #40]
    22f0:	strh	w1, [x0, #5936]
    22f4:	ldr	x0, [sp, #40]
    22f8:	ldrh	w4, [x0, #5936]
    22fc:	ldr	x0, [sp, #40]
    2300:	ldr	x1, [x0, #16]
    2304:	ldr	x0, [sp, #40]
    2308:	ldr	x0, [x0, #40]
    230c:	add	x3, x0, #0x1
    2310:	ldr	x2, [sp, #40]
    2314:	str	x3, [x2, #40]
    2318:	add	x0, x1, x0
    231c:	and	w1, w4, #0xff
    2320:	strb	w1, [x0]
    2324:	ldr	x0, [sp, #40]
    2328:	ldrh	w0, [x0, #5936]
    232c:	lsr	w0, w0, #8
    2330:	and	w4, w0, #0xffff
    2334:	ldr	x0, [sp, #40]
    2338:	ldr	x1, [x0, #16]
    233c:	ldr	x0, [sp, #40]
    2340:	ldr	x0, [x0, #40]
    2344:	add	x3, x0, #0x1
    2348:	ldr	x2, [sp, #40]
    234c:	str	x3, [x2, #40]
    2350:	add	x0, x1, x0
    2354:	and	w1, w4, #0xff
    2358:	strb	w1, [x0]
    235c:	ldr	w0, [sp, #68]
    2360:	and	w0, w0, #0xffff
    2364:	mov	w2, w0
    2368:	ldr	x0, [sp, #40]
    236c:	ldr	w0, [x0, #5940]
    2370:	mov	w1, #0x10                  	// #16
    2374:	sub	w0, w1, w0
    2378:	asr	w0, w2, w0
    237c:	and	w1, w0, #0xffff
    2380:	ldr	x0, [sp, #40]
    2384:	strh	w1, [x0, #5936]
    2388:	ldr	x0, [sp, #40]
    238c:	ldr	w1, [x0, #5940]
    2390:	ldr	w0, [sp, #72]
    2394:	sub	w0, w0, #0x10
    2398:	add	w1, w1, w0
    239c:	ldr	x0, [sp, #40]
    23a0:	str	w1, [x0, #5940]
    23a4:	b	2404 <send_all_trees+0x48c>
    23a8:	ldr	x0, [sp, #40]
    23ac:	ldrh	w0, [x0, #5936]
    23b0:	sxth	w1, w0
    23b4:	ldr	w0, [sp, #28]
    23b8:	and	w0, w0, #0xffff
    23bc:	sub	w0, w0, #0x4
    23c0:	and	w0, w0, #0xffff
    23c4:	mov	w2, w0
    23c8:	ldr	x0, [sp, #40]
    23cc:	ldr	w0, [x0, #5940]
    23d0:	lsl	w0, w2, w0
    23d4:	sxth	w0, w0
    23d8:	orr	w0, w1, w0
    23dc:	sxth	w0, w0
    23e0:	and	w1, w0, #0xffff
    23e4:	ldr	x0, [sp, #40]
    23e8:	strh	w1, [x0, #5936]
    23ec:	ldr	x0, [sp, #40]
    23f0:	ldr	w1, [x0, #5940]
    23f4:	ldr	w0, [sp, #72]
    23f8:	add	w1, w1, w0
    23fc:	ldr	x0, [sp, #40]
    2400:	str	w1, [x0, #5940]
    2404:	str	wzr, [sp, #92]
    2408:	b	25cc <send_all_trees+0x654>
    240c:	mov	w0, #0x3                   	// #3
    2410:	str	w0, [sp, #64]
    2414:	ldr	x0, [sp, #40]
    2418:	ldr	w1, [x0, #5940]
    241c:	mov	w2, #0x10                  	// #16
    2420:	ldr	w0, [sp, #64]
    2424:	sub	w0, w2, w0
    2428:	cmp	w1, w0
    242c:	b.le	254c <send_all_trees+0x5d4>
    2430:	adrp	x0, 0 <tr_static_init>
    2434:	add	x1, x0, #0x0
    2438:	ldrsw	x0, [sp, #92]
    243c:	ldrb	w0, [x1, x0]
    2440:	ldr	x1, [sp, #40]
    2444:	sxtw	x0, w0
    2448:	add	x0, x0, #0x2ac
    244c:	lsl	x0, x0, #2
    2450:	add	x0, x1, x0
    2454:	ldrh	w0, [x0, #14]
    2458:	str	w0, [sp, #60]
    245c:	ldr	x0, [sp, #40]
    2460:	ldrh	w0, [x0, #5936]
    2464:	sxth	w1, w0
    2468:	ldr	w0, [sp, #60]
    246c:	and	w0, w0, #0xffff
    2470:	mov	w2, w0
    2474:	ldr	x0, [sp, #40]
    2478:	ldr	w0, [x0, #5940]
    247c:	lsl	w0, w2, w0
    2480:	sxth	w0, w0
    2484:	orr	w0, w1, w0
    2488:	sxth	w0, w0
    248c:	and	w1, w0, #0xffff
    2490:	ldr	x0, [sp, #40]
    2494:	strh	w1, [x0, #5936]
    2498:	ldr	x0, [sp, #40]
    249c:	ldrh	w4, [x0, #5936]
    24a0:	ldr	x0, [sp, #40]
    24a4:	ldr	x1, [x0, #16]
    24a8:	ldr	x0, [sp, #40]
    24ac:	ldr	x0, [x0, #40]
    24b0:	add	x3, x0, #0x1
    24b4:	ldr	x2, [sp, #40]
    24b8:	str	x3, [x2, #40]
    24bc:	add	x0, x1, x0
    24c0:	and	w1, w4, #0xff
    24c4:	strb	w1, [x0]
    24c8:	ldr	x0, [sp, #40]
    24cc:	ldrh	w0, [x0, #5936]
    24d0:	lsr	w0, w0, #8
    24d4:	and	w4, w0, #0xffff
    24d8:	ldr	x0, [sp, #40]
    24dc:	ldr	x1, [x0, #16]
    24e0:	ldr	x0, [sp, #40]
    24e4:	ldr	x0, [x0, #40]
    24e8:	add	x3, x0, #0x1
    24ec:	ldr	x2, [sp, #40]
    24f0:	str	x3, [x2, #40]
    24f4:	add	x0, x1, x0
    24f8:	and	w1, w4, #0xff
    24fc:	strb	w1, [x0]
    2500:	ldr	w0, [sp, #60]
    2504:	and	w0, w0, #0xffff
    2508:	mov	w2, w0
    250c:	ldr	x0, [sp, #40]
    2510:	ldr	w0, [x0, #5940]
    2514:	mov	w1, #0x10                  	// #16
    2518:	sub	w0, w1, w0
    251c:	asr	w0, w2, w0
    2520:	and	w1, w0, #0xffff
    2524:	ldr	x0, [sp, #40]
    2528:	strh	w1, [x0, #5936]
    252c:	ldr	x0, [sp, #40]
    2530:	ldr	w1, [x0, #5940]
    2534:	ldr	w0, [sp, #64]
    2538:	sub	w0, w0, #0x10
    253c:	add	w1, w1, w0
    2540:	ldr	x0, [sp, #40]
    2544:	str	w1, [x0, #5940]
    2548:	b	25c0 <send_all_trees+0x648>
    254c:	ldr	x0, [sp, #40]
    2550:	ldrh	w0, [x0, #5936]
    2554:	sxth	w1, w0
    2558:	adrp	x0, 0 <tr_static_init>
    255c:	add	x2, x0, #0x0
    2560:	ldrsw	x0, [sp, #92]
    2564:	ldrb	w0, [x2, x0]
    2568:	ldr	x2, [sp, #40]
    256c:	sxtw	x0, w0
    2570:	add	x0, x0, #0x2ac
    2574:	lsl	x0, x0, #2
    2578:	add	x0, x2, x0
    257c:	ldrh	w0, [x0, #14]
    2580:	mov	w2, w0
    2584:	ldr	x0, [sp, #40]
    2588:	ldr	w0, [x0, #5940]
    258c:	lsl	w0, w2, w0
    2590:	sxth	w0, w0
    2594:	orr	w0, w1, w0
    2598:	sxth	w0, w0
    259c:	and	w1, w0, #0xffff
    25a0:	ldr	x0, [sp, #40]
    25a4:	strh	w1, [x0, #5936]
    25a8:	ldr	x0, [sp, #40]
    25ac:	ldr	w1, [x0, #5940]
    25b0:	ldr	w0, [sp, #64]
    25b4:	add	w1, w1, w0
    25b8:	ldr	x0, [sp, #40]
    25bc:	str	w1, [x0, #5940]
    25c0:	ldr	w0, [sp, #92]
    25c4:	add	w0, w0, #0x1
    25c8:	str	w0, [sp, #92]
    25cc:	ldr	w1, [sp, #92]
    25d0:	ldr	w0, [sp, #28]
    25d4:	cmp	w1, w0
    25d8:	b.lt	240c <send_all_trees+0x494>  // b.tstop
    25dc:	ldr	x0, [sp, #40]
    25e0:	add	x1, x0, #0xd4
    25e4:	ldr	w0, [sp, #36]
    25e8:	sub	w0, w0, #0x1
    25ec:	mov	w2, w0
    25f0:	ldr	x0, [sp, #40]
    25f4:	bl	10b8 <send_tree>
    25f8:	ldr	x0, [sp, #40]
    25fc:	add	x1, x0, #0x9c8
    2600:	ldr	w0, [sp, #32]
    2604:	sub	w0, w0, #0x1
    2608:	mov	w2, w0
    260c:	ldr	x0, [sp, #40]
    2610:	bl	10b8 <send_tree>
    2614:	nop
    2618:	ldp	x29, x30, [sp], #96
    261c:	ret

0000000000002620 <_tr_stored_block>:
    2620:	stp	x29, x30, [sp, #-64]!
    2624:	mov	x29, sp
    2628:	str	x0, [sp, #40]
    262c:	str	x1, [sp, #32]
    2630:	str	x2, [sp, #24]
    2634:	str	w3, [sp, #20]
    2638:	mov	w0, #0x3                   	// #3
    263c:	str	w0, [sp, #60]
    2640:	ldr	x0, [sp, #40]
    2644:	ldr	w1, [x0, #5940]
    2648:	mov	w2, #0x10                  	// #16
    264c:	ldr	w0, [sp, #60]
    2650:	sub	w0, w2, w0
    2654:	cmp	w1, w0
    2658:	b.le	2754 <_tr_stored_block+0x134>
    265c:	ldr	w0, [sp, #20]
    2660:	str	w0, [sp, #56]
    2664:	ldr	x0, [sp, #40]
    2668:	ldrh	w0, [x0, #5936]
    266c:	sxth	w1, w0
    2670:	ldr	w0, [sp, #56]
    2674:	and	w0, w0, #0xffff
    2678:	mov	w2, w0
    267c:	ldr	x0, [sp, #40]
    2680:	ldr	w0, [x0, #5940]
    2684:	lsl	w0, w2, w0
    2688:	sxth	w0, w0
    268c:	orr	w0, w1, w0
    2690:	sxth	w0, w0
    2694:	and	w1, w0, #0xffff
    2698:	ldr	x0, [sp, #40]
    269c:	strh	w1, [x0, #5936]
    26a0:	ldr	x0, [sp, #40]
    26a4:	ldrh	w4, [x0, #5936]
    26a8:	ldr	x0, [sp, #40]
    26ac:	ldr	x1, [x0, #16]
    26b0:	ldr	x0, [sp, #40]
    26b4:	ldr	x0, [x0, #40]
    26b8:	add	x3, x0, #0x1
    26bc:	ldr	x2, [sp, #40]
    26c0:	str	x3, [x2, #40]
    26c4:	add	x0, x1, x0
    26c8:	and	w1, w4, #0xff
    26cc:	strb	w1, [x0]
    26d0:	ldr	x0, [sp, #40]
    26d4:	ldrh	w0, [x0, #5936]
    26d8:	lsr	w0, w0, #8
    26dc:	and	w4, w0, #0xffff
    26e0:	ldr	x0, [sp, #40]
    26e4:	ldr	x1, [x0, #16]
    26e8:	ldr	x0, [sp, #40]
    26ec:	ldr	x0, [x0, #40]
    26f0:	add	x3, x0, #0x1
    26f4:	ldr	x2, [sp, #40]
    26f8:	str	x3, [x2, #40]
    26fc:	add	x0, x1, x0
    2700:	and	w1, w4, #0xff
    2704:	strb	w1, [x0]
    2708:	ldr	w0, [sp, #56]
    270c:	and	w0, w0, #0xffff
    2710:	mov	w2, w0
    2714:	ldr	x0, [sp, #40]
    2718:	ldr	w0, [x0, #5940]
    271c:	mov	w1, #0x10                  	// #16
    2720:	sub	w0, w1, w0
    2724:	asr	w0, w2, w0
    2728:	and	w1, w0, #0xffff
    272c:	ldr	x0, [sp, #40]
    2730:	strh	w1, [x0, #5936]
    2734:	ldr	x0, [sp, #40]
    2738:	ldr	w1, [x0, #5940]
    273c:	ldr	w0, [sp, #60]
    2740:	sub	w0, w0, #0x10
    2744:	add	w1, w1, w0
    2748:	ldr	x0, [sp, #40]
    274c:	str	w1, [x0, #5940]
    2750:	b	27a8 <_tr_stored_block+0x188>
    2754:	ldr	x0, [sp, #40]
    2758:	ldrh	w0, [x0, #5936]
    275c:	sxth	w1, w0
    2760:	ldr	w0, [sp, #20]
    2764:	and	w0, w0, #0xffff
    2768:	mov	w2, w0
    276c:	ldr	x0, [sp, #40]
    2770:	ldr	w0, [x0, #5940]
    2774:	lsl	w0, w2, w0
    2778:	sxth	w0, w0
    277c:	orr	w0, w1, w0
    2780:	sxth	w0, w0
    2784:	and	w1, w0, #0xffff
    2788:	ldr	x0, [sp, #40]
    278c:	strh	w1, [x0, #5936]
    2790:	ldr	x0, [sp, #40]
    2794:	ldr	w1, [x0, #5940]
    2798:	ldr	w0, [sp, #60]
    279c:	add	w1, w1, w0
    27a0:	ldr	x0, [sp, #40]
    27a4:	str	w1, [x0, #5940]
    27a8:	ldr	x0, [sp, #40]
    27ac:	bl	3f94 <bi_windup>
    27b0:	ldr	x0, [sp, #40]
    27b4:	ldr	x1, [x0, #16]
    27b8:	ldr	x0, [sp, #40]
    27bc:	ldr	x0, [x0, #40]
    27c0:	add	x3, x0, #0x1
    27c4:	ldr	x2, [sp, #40]
    27c8:	str	x3, [x2, #40]
    27cc:	add	x0, x1, x0
    27d0:	ldr	x1, [sp, #24]
    27d4:	and	w1, w1, #0xff
    27d8:	strb	w1, [x0]
    27dc:	ldr	x0, [sp, #24]
    27e0:	and	w0, w0, #0xffff
    27e4:	lsr	w0, w0, #8
    27e8:	and	w4, w0, #0xffff
    27ec:	ldr	x0, [sp, #40]
    27f0:	ldr	x1, [x0, #16]
    27f4:	ldr	x0, [sp, #40]
    27f8:	ldr	x0, [x0, #40]
    27fc:	add	x3, x0, #0x1
    2800:	ldr	x2, [sp, #40]
    2804:	str	x3, [x2, #40]
    2808:	add	x0, x1, x0
    280c:	and	w1, w4, #0xff
    2810:	strb	w1, [x0]
    2814:	ldr	x0, [sp, #24]
    2818:	and	w1, w0, #0xff
    281c:	ldr	x0, [sp, #40]
    2820:	ldr	x2, [x0, #16]
    2824:	ldr	x0, [sp, #40]
    2828:	ldr	x0, [x0, #40]
    282c:	add	x4, x0, #0x1
    2830:	ldr	x3, [sp, #40]
    2834:	str	x4, [x3, #40]
    2838:	add	x0, x2, x0
    283c:	mvn	w1, w1
    2840:	and	w1, w1, #0xff
    2844:	strb	w1, [x0]
    2848:	ldr	x0, [sp, #24]
    284c:	and	w0, w0, #0xffff
    2850:	mvn	w0, w0
    2854:	and	w0, w0, #0xffff
    2858:	lsr	w0, w0, #8
    285c:	and	w4, w0, #0xffff
    2860:	ldr	x0, [sp, #40]
    2864:	ldr	x1, [x0, #16]
    2868:	ldr	x0, [sp, #40]
    286c:	ldr	x0, [x0, #40]
    2870:	add	x3, x0, #0x1
    2874:	ldr	x2, [sp, #40]
    2878:	str	x3, [x2, #40]
    287c:	add	x0, x1, x0
    2880:	and	w1, w4, #0xff
    2884:	strb	w1, [x0]
    2888:	ldr	x0, [sp, #40]
    288c:	ldr	x1, [x0, #16]
    2890:	ldr	x0, [sp, #40]
    2894:	ldr	x0, [x0, #40]
    2898:	add	x0, x1, x0
    289c:	ldr	x2, [sp, #24]
    28a0:	ldr	x1, [sp, #32]
    28a4:	bl	0 <memcpy>
    28a8:	ldr	x0, [sp, #40]
    28ac:	ldr	x1, [x0, #40]
    28b0:	ldr	x0, [sp, #24]
    28b4:	add	x1, x1, x0
    28b8:	ldr	x0, [sp, #40]
    28bc:	str	x1, [x0, #40]
    28c0:	nop
    28c4:	ldp	x29, x30, [sp], #64
    28c8:	ret

00000000000028cc <_tr_flush_bits>:
    28cc:	stp	x29, x30, [sp, #-32]!
    28d0:	mov	x29, sp
    28d4:	str	x0, [sp, #24]
    28d8:	ldr	x0, [sp, #24]
    28dc:	bl	3e88 <bi_flush>
    28e0:	nop
    28e4:	ldp	x29, x30, [sp], #32
    28e8:	ret

00000000000028ec <_tr_align>:
    28ec:	stp	x29, x30, [sp, #-48]!
    28f0:	mov	x29, sp
    28f4:	str	x0, [sp, #24]
    28f8:	mov	w0, #0x3                   	// #3
    28fc:	str	w0, [sp, #44]
    2900:	ldr	x0, [sp, #24]
    2904:	ldr	w1, [x0, #5940]
    2908:	mov	w2, #0x10                  	// #16
    290c:	ldr	w0, [sp, #44]
    2910:	sub	w0, w2, w0
    2914:	cmp	w1, w0
    2918:	b.le	2a14 <_tr_align+0x128>
    291c:	mov	w0, #0x2                   	// #2
    2920:	str	w0, [sp, #40]
    2924:	ldr	x0, [sp, #24]
    2928:	ldrh	w0, [x0, #5936]
    292c:	sxth	w1, w0
    2930:	ldr	w0, [sp, #40]
    2934:	and	w0, w0, #0xffff
    2938:	mov	w2, w0
    293c:	ldr	x0, [sp, #24]
    2940:	ldr	w0, [x0, #5940]
    2944:	lsl	w0, w2, w0
    2948:	sxth	w0, w0
    294c:	orr	w0, w1, w0
    2950:	sxth	w0, w0
    2954:	and	w1, w0, #0xffff
    2958:	ldr	x0, [sp, #24]
    295c:	strh	w1, [x0, #5936]
    2960:	ldr	x0, [sp, #24]
    2964:	ldrh	w4, [x0, #5936]
    2968:	ldr	x0, [sp, #24]
    296c:	ldr	x1, [x0, #16]
    2970:	ldr	x0, [sp, #24]
    2974:	ldr	x0, [x0, #40]
    2978:	add	x3, x0, #0x1
    297c:	ldr	x2, [sp, #24]
    2980:	str	x3, [x2, #40]
    2984:	add	x0, x1, x0
    2988:	and	w1, w4, #0xff
    298c:	strb	w1, [x0]
    2990:	ldr	x0, [sp, #24]
    2994:	ldrh	w0, [x0, #5936]
    2998:	lsr	w0, w0, #8
    299c:	and	w4, w0, #0xffff
    29a0:	ldr	x0, [sp, #24]
    29a4:	ldr	x1, [x0, #16]
    29a8:	ldr	x0, [sp, #24]
    29ac:	ldr	x0, [x0, #40]
    29b0:	add	x3, x0, #0x1
    29b4:	ldr	x2, [sp, #24]
    29b8:	str	x3, [x2, #40]
    29bc:	add	x0, x1, x0
    29c0:	and	w1, w4, #0xff
    29c4:	strb	w1, [x0]
    29c8:	ldr	w0, [sp, #40]
    29cc:	and	w0, w0, #0xffff
    29d0:	mov	w2, w0
    29d4:	ldr	x0, [sp, #24]
    29d8:	ldr	w0, [x0, #5940]
    29dc:	mov	w1, #0x10                  	// #16
    29e0:	sub	w0, w1, w0
    29e4:	asr	w0, w2, w0
    29e8:	and	w1, w0, #0xffff
    29ec:	ldr	x0, [sp, #24]
    29f0:	strh	w1, [x0, #5936]
    29f4:	ldr	x0, [sp, #24]
    29f8:	ldr	w1, [x0, #5940]
    29fc:	ldr	w0, [sp, #44]
    2a00:	sub	w0, w0, #0x10
    2a04:	add	w1, w1, w0
    2a08:	ldr	x0, [sp, #24]
    2a0c:	str	w1, [x0, #5940]
    2a10:	b	2a60 <_tr_align+0x174>
    2a14:	ldr	x0, [sp, #24]
    2a18:	ldrh	w0, [x0, #5936]
    2a1c:	sxth	w1, w0
    2a20:	ldr	x0, [sp, #24]
    2a24:	ldr	w0, [x0, #5940]
    2a28:	mov	w2, #0x2                   	// #2
    2a2c:	lsl	w0, w2, w0
    2a30:	sxth	w0, w0
    2a34:	orr	w0, w1, w0
    2a38:	sxth	w0, w0
    2a3c:	and	w1, w0, #0xffff
    2a40:	ldr	x0, [sp, #24]
    2a44:	strh	w1, [x0, #5936]
    2a48:	ldr	x0, [sp, #24]
    2a4c:	ldr	w1, [x0, #5940]
    2a50:	ldr	w0, [sp, #44]
    2a54:	add	w1, w1, w0
    2a58:	ldr	x0, [sp, #24]
    2a5c:	str	w1, [x0, #5940]
    2a60:	mov	w0, #0x7                   	// #7
    2a64:	str	w0, [sp, #36]
    2a68:	ldr	x0, [sp, #24]
    2a6c:	ldr	w1, [x0, #5940]
    2a70:	mov	w2, #0x10                  	// #16
    2a74:	ldr	w0, [sp, #36]
    2a78:	sub	w0, w2, w0
    2a7c:	cmp	w1, w0
    2a80:	b.le	2b7c <_tr_align+0x290>
    2a84:	mov	w0, #0x0                   	// #0
    2a88:	str	w0, [sp, #32]
    2a8c:	ldr	x0, [sp, #24]
    2a90:	ldrh	w0, [x0, #5936]
    2a94:	sxth	w1, w0
    2a98:	ldr	w0, [sp, #32]
    2a9c:	and	w0, w0, #0xffff
    2aa0:	mov	w2, w0
    2aa4:	ldr	x0, [sp, #24]
    2aa8:	ldr	w0, [x0, #5940]
    2aac:	lsl	w0, w2, w0
    2ab0:	sxth	w0, w0
    2ab4:	orr	w0, w1, w0
    2ab8:	sxth	w0, w0
    2abc:	and	w1, w0, #0xffff
    2ac0:	ldr	x0, [sp, #24]
    2ac4:	strh	w1, [x0, #5936]
    2ac8:	ldr	x0, [sp, #24]
    2acc:	ldrh	w4, [x0, #5936]
    2ad0:	ldr	x0, [sp, #24]
    2ad4:	ldr	x1, [x0, #16]
    2ad8:	ldr	x0, [sp, #24]
    2adc:	ldr	x0, [x0, #40]
    2ae0:	add	x3, x0, #0x1
    2ae4:	ldr	x2, [sp, #24]
    2ae8:	str	x3, [x2, #40]
    2aec:	add	x0, x1, x0
    2af0:	and	w1, w4, #0xff
    2af4:	strb	w1, [x0]
    2af8:	ldr	x0, [sp, #24]
    2afc:	ldrh	w0, [x0, #5936]
    2b00:	lsr	w0, w0, #8
    2b04:	and	w4, w0, #0xffff
    2b08:	ldr	x0, [sp, #24]
    2b0c:	ldr	x1, [x0, #16]
    2b10:	ldr	x0, [sp, #24]
    2b14:	ldr	x0, [x0, #40]
    2b18:	add	x3, x0, #0x1
    2b1c:	ldr	x2, [sp, #24]
    2b20:	str	x3, [x2, #40]
    2b24:	add	x0, x1, x0
    2b28:	and	w1, w4, #0xff
    2b2c:	strb	w1, [x0]
    2b30:	ldr	w0, [sp, #32]
    2b34:	and	w0, w0, #0xffff
    2b38:	mov	w2, w0
    2b3c:	ldr	x0, [sp, #24]
    2b40:	ldr	w0, [x0, #5940]
    2b44:	mov	w1, #0x10                  	// #16
    2b48:	sub	w0, w1, w0
    2b4c:	asr	w0, w2, w0
    2b50:	and	w1, w0, #0xffff
    2b54:	ldr	x0, [sp, #24]
    2b58:	strh	w1, [x0, #5936]
    2b5c:	ldr	x0, [sp, #24]
    2b60:	ldr	w1, [x0, #5940]
    2b64:	ldr	w0, [sp, #36]
    2b68:	sub	w0, w0, #0x10
    2b6c:	add	w1, w1, w0
    2b70:	ldr	x0, [sp, #24]
    2b74:	str	w1, [x0, #5940]
    2b78:	b	2bcc <_tr_align+0x2e0>
    2b7c:	ldr	x0, [sp, #24]
    2b80:	ldrh	w0, [x0, #5936]
    2b84:	sxth	w1, w0
    2b88:	mov	w0, #0x0                   	// #0
    2b8c:	mov	w2, w0
    2b90:	ldr	x0, [sp, #24]
    2b94:	ldr	w0, [x0, #5940]
    2b98:	lsl	w0, w2, w0
    2b9c:	sxth	w0, w0
    2ba0:	orr	w0, w1, w0
    2ba4:	sxth	w0, w0
    2ba8:	and	w1, w0, #0xffff
    2bac:	ldr	x0, [sp, #24]
    2bb0:	strh	w1, [x0, #5936]
    2bb4:	ldr	x0, [sp, #24]
    2bb8:	ldr	w1, [x0, #5940]
    2bbc:	ldr	w0, [sp, #36]
    2bc0:	add	w1, w1, w0
    2bc4:	ldr	x0, [sp, #24]
    2bc8:	str	w1, [x0, #5940]
    2bcc:	ldr	x0, [sp, #24]
    2bd0:	bl	3e88 <bi_flush>
    2bd4:	nop
    2bd8:	ldp	x29, x30, [sp], #48
    2bdc:	ret

0000000000002be0 <_tr_flush_block>:
    2be0:	stp	x29, x30, [sp, #-112]!
    2be4:	mov	x29, sp
    2be8:	str	x19, [sp, #16]
    2bec:	str	x0, [sp, #56]
    2bf0:	str	x1, [sp, #48]
    2bf4:	str	x2, [sp, #40]
    2bf8:	str	w3, [sp, #36]
    2bfc:	str	wzr, [sp, #92]
    2c00:	ldr	x0, [sp, #56]
    2c04:	ldr	w0, [x0, #196]
    2c08:	cmp	w0, #0x0
    2c0c:	b.le	2cb0 <_tr_flush_block+0xd0>
    2c10:	ldr	x0, [sp, #56]
    2c14:	ldr	x0, [x0]
    2c18:	ldr	w0, [x0, #88]
    2c1c:	cmp	w0, #0x2
    2c20:	b.ne	2c38 <_tr_flush_block+0x58>  // b.any
    2c24:	ldr	x0, [sp, #56]
    2c28:	ldr	x19, [x0]
    2c2c:	ldr	x0, [sp, #56]
    2c30:	bl	3d30 <detect_data_type>
    2c34:	str	w0, [x19, #88]
    2c38:	ldr	x0, [sp, #56]
    2c3c:	add	x0, x0, #0xb58
    2c40:	mov	x1, x0
    2c44:	ldr	x0, [sp, #56]
    2c48:	bl	9c8 <build_tree>
    2c4c:	ldr	x0, [sp, #56]
    2c50:	add	x0, x0, #0xb70
    2c54:	mov	x1, x0
    2c58:	ldr	x0, [sp, #56]
    2c5c:	bl	9c8 <build_tree>
    2c60:	ldr	x0, [sp, #56]
    2c64:	bl	1e8c <build_bl_tree>
    2c68:	str	w0, [sp, #92]
    2c6c:	ldr	x0, [sp, #56]
    2c70:	ldr	x0, [x0, #5912]
    2c74:	add	x0, x0, #0xa
    2c78:	lsr	x0, x0, #3
    2c7c:	str	x0, [sp, #104]
    2c80:	ldr	x0, [sp, #56]
    2c84:	ldr	x0, [x0, #5920]
    2c88:	add	x0, x0, #0xa
    2c8c:	lsr	x0, x0, #3
    2c90:	str	x0, [sp, #96]
    2c94:	ldr	x1, [sp, #96]
    2c98:	ldr	x0, [sp, #104]
    2c9c:	cmp	x1, x0
    2ca0:	b.hi	2cc4 <_tr_flush_block+0xe4>  // b.pmore
    2ca4:	ldr	x0, [sp, #96]
    2ca8:	str	x0, [sp, #104]
    2cac:	b	2cc4 <_tr_flush_block+0xe4>
    2cb0:	ldr	x0, [sp, #40]
    2cb4:	add	x0, x0, #0x5
    2cb8:	str	x0, [sp, #96]
    2cbc:	ldr	x0, [sp, #96]
    2cc0:	str	x0, [sp, #104]
    2cc4:	ldr	x0, [sp, #40]
    2cc8:	add	x0, x0, #0x4
    2ccc:	ldr	x1, [sp, #104]
    2cd0:	cmp	x1, x0
    2cd4:	b.cc	2cfc <_tr_flush_block+0x11c>  // b.lo, b.ul, b.last
    2cd8:	ldr	x0, [sp, #48]
    2cdc:	cmp	x0, #0x0
    2ce0:	b.eq	2cfc <_tr_flush_block+0x11c>  // b.none
    2ce4:	ldr	w3, [sp, #36]
    2ce8:	ldr	x2, [sp, #40]
    2cec:	ldr	x1, [sp, #48]
    2cf0:	ldr	x0, [sp, #56]
    2cf4:	bl	2620 <_tr_stored_block>
    2cf8:	b	3078 <_tr_flush_block+0x498>
    2cfc:	ldr	x0, [sp, #56]
    2d00:	ldr	w0, [x0, #200]
    2d04:	cmp	w0, #0x4
    2d08:	b.eq	2d1c <_tr_flush_block+0x13c>  // b.none
    2d0c:	ldr	x1, [sp, #96]
    2d10:	ldr	x0, [sp, #104]
    2d14:	cmp	x1, x0
    2d18:	b.ne	2eb4 <_tr_flush_block+0x2d4>  // b.any
    2d1c:	mov	w0, #0x3                   	// #3
    2d20:	str	w0, [sp, #80]
    2d24:	ldr	x0, [sp, #56]
    2d28:	ldr	w1, [x0, #5940]
    2d2c:	mov	w2, #0x10                  	// #16
    2d30:	ldr	w0, [sp, #80]
    2d34:	sub	w0, w2, w0
    2d38:	cmp	w1, w0
    2d3c:	b.le	2e3c <_tr_flush_block+0x25c>
    2d40:	ldr	w0, [sp, #36]
    2d44:	add	w0, w0, #0x2
    2d48:	str	w0, [sp, #76]
    2d4c:	ldr	x0, [sp, #56]
    2d50:	ldrh	w0, [x0, #5936]
    2d54:	sxth	w1, w0
    2d58:	ldr	w0, [sp, #76]
    2d5c:	and	w0, w0, #0xffff
    2d60:	mov	w2, w0
    2d64:	ldr	x0, [sp, #56]
    2d68:	ldr	w0, [x0, #5940]
    2d6c:	lsl	w0, w2, w0
    2d70:	sxth	w0, w0
    2d74:	orr	w0, w1, w0
    2d78:	sxth	w0, w0
    2d7c:	and	w1, w0, #0xffff
    2d80:	ldr	x0, [sp, #56]
    2d84:	strh	w1, [x0, #5936]
    2d88:	ldr	x0, [sp, #56]
    2d8c:	ldrh	w4, [x0, #5936]
    2d90:	ldr	x0, [sp, #56]
    2d94:	ldr	x1, [x0, #16]
    2d98:	ldr	x0, [sp, #56]
    2d9c:	ldr	x0, [x0, #40]
    2da0:	add	x3, x0, #0x1
    2da4:	ldr	x2, [sp, #56]
    2da8:	str	x3, [x2, #40]
    2dac:	add	x0, x1, x0
    2db0:	and	w1, w4, #0xff
    2db4:	strb	w1, [x0]
    2db8:	ldr	x0, [sp, #56]
    2dbc:	ldrh	w0, [x0, #5936]
    2dc0:	lsr	w0, w0, #8
    2dc4:	and	w4, w0, #0xffff
    2dc8:	ldr	x0, [sp, #56]
    2dcc:	ldr	x1, [x0, #16]
    2dd0:	ldr	x0, [sp, #56]
    2dd4:	ldr	x0, [x0, #40]
    2dd8:	add	x3, x0, #0x1
    2ddc:	ldr	x2, [sp, #56]
    2de0:	str	x3, [x2, #40]
    2de4:	add	x0, x1, x0
    2de8:	and	w1, w4, #0xff
    2dec:	strb	w1, [x0]
    2df0:	ldr	w0, [sp, #76]
    2df4:	and	w0, w0, #0xffff
    2df8:	mov	w2, w0
    2dfc:	ldr	x0, [sp, #56]
    2e00:	ldr	w0, [x0, #5940]
    2e04:	mov	w1, #0x10                  	// #16
    2e08:	sub	w0, w1, w0
    2e0c:	asr	w0, w2, w0
    2e10:	and	w1, w0, #0xffff
    2e14:	ldr	x0, [sp, #56]
    2e18:	strh	w1, [x0, #5936]
    2e1c:	ldr	x0, [sp, #56]
    2e20:	ldr	w1, [x0, #5940]
    2e24:	ldr	w0, [sp, #80]
    2e28:	sub	w0, w0, #0x10
    2e2c:	add	w1, w1, w0
    2e30:	ldr	x0, [sp, #56]
    2e34:	str	w1, [x0, #5940]
    2e38:	b	2e98 <_tr_flush_block+0x2b8>
    2e3c:	ldr	x0, [sp, #56]
    2e40:	ldrh	w0, [x0, #5936]
    2e44:	sxth	w1, w0
    2e48:	ldr	w0, [sp, #36]
    2e4c:	and	w0, w0, #0xffff
    2e50:	add	w0, w0, #0x2
    2e54:	and	w0, w0, #0xffff
    2e58:	mov	w2, w0
    2e5c:	ldr	x0, [sp, #56]
    2e60:	ldr	w0, [x0, #5940]
    2e64:	lsl	w0, w2, w0
    2e68:	sxth	w0, w0
    2e6c:	orr	w0, w1, w0
    2e70:	sxth	w0, w0
    2e74:	and	w1, w0, #0xffff
    2e78:	ldr	x0, [sp, #56]
    2e7c:	strh	w1, [x0, #5936]
    2e80:	ldr	x0, [sp, #56]
    2e84:	ldr	w1, [x0, #5940]
    2e88:	ldr	w0, [sp, #80]
    2e8c:	add	w1, w1, w0
    2e90:	ldr	x0, [sp, #56]
    2e94:	str	w1, [x0, #5940]
    2e98:	adrp	x0, 0 <tr_static_init>
    2e9c:	add	x2, x0, #0x0
    2ea0:	adrp	x0, 0 <tr_static_init>
    2ea4:	add	x1, x0, #0x0
    2ea8:	ldr	x0, [sp, #56]
    2eac:	bl	3270 <compress_block>
    2eb0:	b	3078 <_tr_flush_block+0x498>
    2eb4:	mov	w0, #0x3                   	// #3
    2eb8:	str	w0, [sp, #88]
    2ebc:	ldr	x0, [sp, #56]
    2ec0:	ldr	w1, [x0, #5940]
    2ec4:	mov	w2, #0x10                  	// #16
    2ec8:	ldr	w0, [sp, #88]
    2ecc:	sub	w0, w2, w0
    2ed0:	cmp	w1, w0
    2ed4:	b.le	2fd4 <_tr_flush_block+0x3f4>
    2ed8:	ldr	w0, [sp, #36]
    2edc:	add	w0, w0, #0x4
    2ee0:	str	w0, [sp, #84]
    2ee4:	ldr	x0, [sp, #56]
    2ee8:	ldrh	w0, [x0, #5936]
    2eec:	sxth	w1, w0
    2ef0:	ldr	w0, [sp, #84]
    2ef4:	and	w0, w0, #0xffff
    2ef8:	mov	w2, w0
    2efc:	ldr	x0, [sp, #56]
    2f00:	ldr	w0, [x0, #5940]
    2f04:	lsl	w0, w2, w0
    2f08:	sxth	w0, w0
    2f0c:	orr	w0, w1, w0
    2f10:	sxth	w0, w0
    2f14:	and	w1, w0, #0xffff
    2f18:	ldr	x0, [sp, #56]
    2f1c:	strh	w1, [x0, #5936]
    2f20:	ldr	x0, [sp, #56]
    2f24:	ldrh	w4, [x0, #5936]
    2f28:	ldr	x0, [sp, #56]
    2f2c:	ldr	x1, [x0, #16]
    2f30:	ldr	x0, [sp, #56]
    2f34:	ldr	x0, [x0, #40]
    2f38:	add	x3, x0, #0x1
    2f3c:	ldr	x2, [sp, #56]
    2f40:	str	x3, [x2, #40]
    2f44:	add	x0, x1, x0
    2f48:	and	w1, w4, #0xff
    2f4c:	strb	w1, [x0]
    2f50:	ldr	x0, [sp, #56]
    2f54:	ldrh	w0, [x0, #5936]
    2f58:	lsr	w0, w0, #8
    2f5c:	and	w4, w0, #0xffff
    2f60:	ldr	x0, [sp, #56]
    2f64:	ldr	x1, [x0, #16]
    2f68:	ldr	x0, [sp, #56]
    2f6c:	ldr	x0, [x0, #40]
    2f70:	add	x3, x0, #0x1
    2f74:	ldr	x2, [sp, #56]
    2f78:	str	x3, [x2, #40]
    2f7c:	add	x0, x1, x0
    2f80:	and	w1, w4, #0xff
    2f84:	strb	w1, [x0]
    2f88:	ldr	w0, [sp, #84]
    2f8c:	and	w0, w0, #0xffff
    2f90:	mov	w2, w0
    2f94:	ldr	x0, [sp, #56]
    2f98:	ldr	w0, [x0, #5940]
    2f9c:	mov	w1, #0x10                  	// #16
    2fa0:	sub	w0, w1, w0
    2fa4:	asr	w0, w2, w0
    2fa8:	and	w1, w0, #0xffff
    2fac:	ldr	x0, [sp, #56]
    2fb0:	strh	w1, [x0, #5936]
    2fb4:	ldr	x0, [sp, #56]
    2fb8:	ldr	w1, [x0, #5940]
    2fbc:	ldr	w0, [sp, #88]
    2fc0:	sub	w0, w0, #0x10
    2fc4:	add	w1, w1, w0
    2fc8:	ldr	x0, [sp, #56]
    2fcc:	str	w1, [x0, #5940]
    2fd0:	b	3030 <_tr_flush_block+0x450>
    2fd4:	ldr	x0, [sp, #56]
    2fd8:	ldrh	w0, [x0, #5936]
    2fdc:	sxth	w1, w0
    2fe0:	ldr	w0, [sp, #36]
    2fe4:	and	w0, w0, #0xffff
    2fe8:	add	w0, w0, #0x4
    2fec:	and	w0, w0, #0xffff
    2ff0:	mov	w2, w0
    2ff4:	ldr	x0, [sp, #56]
    2ff8:	ldr	w0, [x0, #5940]
    2ffc:	lsl	w0, w2, w0
    3000:	sxth	w0, w0
    3004:	orr	w0, w1, w0
    3008:	sxth	w0, w0
    300c:	and	w1, w0, #0xffff
    3010:	ldr	x0, [sp, #56]
    3014:	strh	w1, [x0, #5936]
    3018:	ldr	x0, [sp, #56]
    301c:	ldr	w1, [x0, #5940]
    3020:	ldr	w0, [sp, #88]
    3024:	add	w1, w1, w0
    3028:	ldr	x0, [sp, #56]
    302c:	str	w1, [x0, #5940]
    3030:	ldr	x0, [sp, #56]
    3034:	ldr	w0, [x0, #2912]
    3038:	add	w1, w0, #0x1
    303c:	ldr	x0, [sp, #56]
    3040:	ldr	w0, [x0, #2936]
    3044:	add	w2, w0, #0x1
    3048:	ldr	w0, [sp, #92]
    304c:	add	w0, w0, #0x1
    3050:	mov	w3, w0
    3054:	ldr	x0, [sp, #56]
    3058:	bl	1f78 <send_all_trees>
    305c:	ldr	x0, [sp, #56]
    3060:	add	x1, x0, #0xd4
    3064:	ldr	x0, [sp, #56]
    3068:	add	x0, x0, #0x9c8
    306c:	mov	x2, x0
    3070:	ldr	x0, [sp, #56]
    3074:	bl	3270 <compress_block>
    3078:	ldr	x0, [sp, #56]
    307c:	bl	9c <init_block>
    3080:	ldr	w0, [sp, #36]
    3084:	cmp	w0, #0x0
    3088:	b.eq	3094 <_tr_flush_block+0x4b4>  // b.none
    308c:	ldr	x0, [sp, #56]
    3090:	bl	3f94 <bi_windup>
    3094:	nop
    3098:	ldr	x19, [sp, #16]
    309c:	ldp	x29, x30, [sp], #112
    30a0:	ret

00000000000030a4 <_tr_tally>:
    30a4:	sub	sp, sp, #0x10
    30a8:	str	x0, [sp, #8]
    30ac:	str	w1, [sp, #4]
    30b0:	str	w2, [sp]
    30b4:	ldr	x0, [sp, #8]
    30b8:	ldr	x1, [x0, #5904]
    30bc:	ldr	x0, [sp, #8]
    30c0:	ldr	w0, [x0, #5900]
    30c4:	mov	w0, w0
    30c8:	lsl	x0, x0, #1
    30cc:	add	x0, x1, x0
    30d0:	ldr	w1, [sp, #4]
    30d4:	and	w1, w1, #0xffff
    30d8:	strh	w1, [x0]
    30dc:	ldr	x0, [sp, #8]
    30e0:	ldr	x1, [x0, #5888]
    30e4:	ldr	x0, [sp, #8]
    30e8:	ldr	w0, [x0, #5900]
    30ec:	add	w3, w0, #0x1
    30f0:	ldr	x2, [sp, #8]
    30f4:	str	w3, [x2, #5900]
    30f8:	mov	w0, w0
    30fc:	add	x0, x1, x0
    3100:	ldr	w1, [sp]
    3104:	and	w1, w1, #0xff
    3108:	strb	w1, [x0]
    310c:	ldr	w0, [sp, #4]
    3110:	cmp	w0, #0x0
    3114:	b.ne	3158 <_tr_tally+0xb4>  // b.any
    3118:	ldr	x1, [sp, #8]
    311c:	ldr	w0, [sp]
    3120:	add	x0, x0, #0x34
    3124:	lsl	x0, x0, #2
    3128:	add	x0, x1, x0
    312c:	ldrh	w0, [x0, #4]
    3130:	add	w0, w0, #0x1
    3134:	and	w2, w0, #0xffff
    3138:	ldr	x1, [sp, #8]
    313c:	ldr	w0, [sp]
    3140:	add	x0, x0, #0x34
    3144:	lsl	x0, x0, #2
    3148:	add	x0, x1, x0
    314c:	mov	w1, w2
    3150:	strh	w1, [x0, #4]
    3154:	b	3248 <_tr_tally+0x1a4>
    3158:	ldr	x0, [sp, #8]
    315c:	ldr	w0, [x0, #5928]
    3160:	add	w1, w0, #0x1
    3164:	ldr	x0, [sp, #8]
    3168:	str	w1, [x0, #5928]
    316c:	ldr	w0, [sp, #4]
    3170:	sub	w0, w0, #0x1
    3174:	str	w0, [sp, #4]
    3178:	adrp	x0, 850 <gen_bitlen+0x438>
    317c:	add	x1, x0, #0x0
    3180:	ldr	w0, [sp]
    3184:	ldrb	w0, [x1, x0]
    3188:	add	w2, w0, #0x101
    318c:	ldr	x1, [sp, #8]
    3190:	sxtw	x0, w2
    3194:	add	x0, x0, #0x34
    3198:	lsl	x0, x0, #2
    319c:	add	x0, x1, x0
    31a0:	ldrh	w0, [x0, #4]
    31a4:	add	w0, w0, #0x1
    31a8:	and	w3, w0, #0xffff
    31ac:	ldr	x1, [sp, #8]
    31b0:	sxtw	x0, w2
    31b4:	add	x0, x0, #0x34
    31b8:	lsl	x0, x0, #2
    31bc:	add	x0, x1, x0
    31c0:	mov	w1, w3
    31c4:	strh	w1, [x0, #4]
    31c8:	ldr	w0, [sp, #4]
    31cc:	cmp	w0, #0xff
    31d0:	b.hi	31ec <_tr_tally+0x148>  // b.pmore
    31d4:	adrp	x0, 650 <gen_bitlen+0x238>
    31d8:	add	x1, x0, #0x0
    31dc:	ldr	w0, [sp, #4]
    31e0:	ldrb	w0, [x1, x0]
    31e4:	mov	w2, w0
    31e8:	b	320c <_tr_tally+0x168>
    31ec:	ldr	w0, [sp, #4]
    31f0:	lsr	w0, w0, #7
    31f4:	add	w2, w0, #0x100
    31f8:	adrp	x0, 650 <gen_bitlen+0x238>
    31fc:	add	x1, x0, #0x0
    3200:	mov	w0, w2
    3204:	ldrb	w0, [x1, x0]
    3208:	mov	w2, w0
    320c:	ldr	x1, [sp, #8]
    3210:	sxtw	x0, w2
    3214:	add	x0, x0, #0x270
    3218:	lsl	x0, x0, #2
    321c:	add	x0, x1, x0
    3220:	ldrh	w0, [x0, #8]
    3224:	add	w0, w0, #0x1
    3228:	and	w3, w0, #0xffff
    322c:	ldr	x1, [sp, #8]
    3230:	sxtw	x0, w2
    3234:	add	x0, x0, #0x270
    3238:	lsl	x0, x0, #2
    323c:	add	x0, x1, x0
    3240:	mov	w1, w3
    3244:	strh	w1, [x0, #8]
    3248:	ldr	x0, [sp, #8]
    324c:	ldr	w1, [x0, #5900]
    3250:	ldr	x0, [sp, #8]
    3254:	ldr	w0, [x0, #5896]
    3258:	sub	w0, w0, #0x1
    325c:	cmp	w1, w0
    3260:	cset	w0, eq  // eq = none
    3264:	and	w0, w0, #0xff
    3268:	add	sp, sp, #0x10
    326c:	ret

0000000000003270 <compress_block>:
    3270:	sub	sp, sp, #0x70
    3274:	str	x0, [sp, #24]
    3278:	str	x1, [sp, #16]
    327c:	str	x2, [sp, #8]
    3280:	str	wzr, [sp, #108]
    3284:	ldr	x0, [sp, #24]
    3288:	ldr	w0, [x0, #5900]
    328c:	cmp	w0, #0x0
    3290:	b.eq	3ba0 <compress_block+0x930>  // b.none
    3294:	ldr	x0, [sp, #24]
    3298:	ldr	x1, [x0, #5904]
    329c:	ldr	w0, [sp, #108]
    32a0:	lsl	x0, x0, #1
    32a4:	add	x0, x1, x0
    32a8:	ldrh	w0, [x0]
    32ac:	str	w0, [sp, #104]
    32b0:	ldr	x0, [sp, #24]
    32b4:	ldr	x1, [x0, #5888]
    32b8:	ldr	w0, [sp, #108]
    32bc:	add	w2, w0, #0x1
    32c0:	str	w2, [sp, #108]
    32c4:	mov	w0, w0
    32c8:	add	x0, x1, x0
    32cc:	ldrb	w0, [x0]
    32d0:	str	w0, [sp, #100]
    32d4:	ldr	w0, [sp, #104]
    32d8:	cmp	w0, #0x0
    32dc:	b.ne	3480 <compress_block+0x210>  // b.any
    32e0:	ldrsw	x0, [sp, #100]
    32e4:	lsl	x0, x0, #2
    32e8:	ldr	x1, [sp, #16]
    32ec:	add	x0, x1, x0
    32f0:	ldrh	w0, [x0, #2]
    32f4:	str	w0, [sp, #56]
    32f8:	ldr	x0, [sp, #24]
    32fc:	ldr	w1, [x0, #5940]
    3300:	mov	w2, #0x10                  	// #16
    3304:	ldr	w0, [sp, #56]
    3308:	sub	w0, w2, w0
    330c:	cmp	w1, w0
    3310:	b.le	341c <compress_block+0x1ac>
    3314:	ldrsw	x0, [sp, #100]
    3318:	lsl	x0, x0, #2
    331c:	ldr	x1, [sp, #16]
    3320:	add	x0, x1, x0
    3324:	ldrh	w0, [x0]
    3328:	str	w0, [sp, #52]
    332c:	ldr	x0, [sp, #24]
    3330:	ldrh	w0, [x0, #5936]
    3334:	sxth	w1, w0
    3338:	ldr	w0, [sp, #52]
    333c:	and	w0, w0, #0xffff
    3340:	mov	w2, w0
    3344:	ldr	x0, [sp, #24]
    3348:	ldr	w0, [x0, #5940]
    334c:	lsl	w0, w2, w0
    3350:	sxth	w0, w0
    3354:	orr	w0, w1, w0
    3358:	sxth	w0, w0
    335c:	and	w1, w0, #0xffff
    3360:	ldr	x0, [sp, #24]
    3364:	strh	w1, [x0, #5936]
    3368:	ldr	x0, [sp, #24]
    336c:	ldrh	w4, [x0, #5936]
    3370:	ldr	x0, [sp, #24]
    3374:	ldr	x1, [x0, #16]
    3378:	ldr	x0, [sp, #24]
    337c:	ldr	x0, [x0, #40]
    3380:	add	x3, x0, #0x1
    3384:	ldr	x2, [sp, #24]
    3388:	str	x3, [x2, #40]
    338c:	add	x0, x1, x0
    3390:	and	w1, w4, #0xff
    3394:	strb	w1, [x0]
    3398:	ldr	x0, [sp, #24]
    339c:	ldrh	w0, [x0, #5936]
    33a0:	lsr	w0, w0, #8
    33a4:	and	w4, w0, #0xffff
    33a8:	ldr	x0, [sp, #24]
    33ac:	ldr	x1, [x0, #16]
    33b0:	ldr	x0, [sp, #24]
    33b4:	ldr	x0, [x0, #40]
    33b8:	add	x3, x0, #0x1
    33bc:	ldr	x2, [sp, #24]
    33c0:	str	x3, [x2, #40]
    33c4:	add	x0, x1, x0
    33c8:	and	w1, w4, #0xff
    33cc:	strb	w1, [x0]
    33d0:	ldr	w0, [sp, #52]
    33d4:	and	w0, w0, #0xffff
    33d8:	mov	w2, w0
    33dc:	ldr	x0, [sp, #24]
    33e0:	ldr	w0, [x0, #5940]
    33e4:	mov	w1, #0x10                  	// #16
    33e8:	sub	w0, w1, w0
    33ec:	asr	w0, w2, w0
    33f0:	and	w1, w0, #0xffff
    33f4:	ldr	x0, [sp, #24]
    33f8:	strh	w1, [x0, #5936]
    33fc:	ldr	x0, [sp, #24]
    3400:	ldr	w1, [x0, #5940]
    3404:	ldr	w0, [sp, #56]
    3408:	sub	w0, w0, #0x10
    340c:	add	w1, w1, w0
    3410:	ldr	x0, [sp, #24]
    3414:	str	w1, [x0, #5940]
    3418:	b	3b8c <compress_block+0x91c>
    341c:	ldr	x0, [sp, #24]
    3420:	ldrh	w0, [x0, #5936]
    3424:	sxth	w1, w0
    3428:	ldrsw	x0, [sp, #100]
    342c:	lsl	x0, x0, #2
    3430:	ldr	x2, [sp, #16]
    3434:	add	x0, x2, x0
    3438:	ldrh	w0, [x0]
    343c:	mov	w2, w0
    3440:	ldr	x0, [sp, #24]
    3444:	ldr	w0, [x0, #5940]
    3448:	lsl	w0, w2, w0
    344c:	sxth	w0, w0
    3450:	orr	w0, w1, w0
    3454:	sxth	w0, w0
    3458:	and	w1, w0, #0xffff
    345c:	ldr	x0, [sp, #24]
    3460:	strh	w1, [x0, #5936]
    3464:	ldr	x0, [sp, #24]
    3468:	ldr	w1, [x0, #5940]
    346c:	ldr	w0, [sp, #56]
    3470:	add	w1, w1, w0
    3474:	ldr	x0, [sp, #24]
    3478:	str	w1, [x0, #5940]
    347c:	b	3b8c <compress_block+0x91c>
    3480:	adrp	x0, 850 <gen_bitlen+0x438>
    3484:	add	x1, x0, #0x0
    3488:	ldrsw	x0, [sp, #100]
    348c:	ldrb	w0, [x1, x0]
    3490:	str	w0, [sp, #96]
    3494:	ldr	w0, [sp, #96]
    3498:	add	w0, w0, #0x101
    349c:	mov	w0, w0
    34a0:	lsl	x0, x0, #2
    34a4:	ldr	x1, [sp, #16]
    34a8:	add	x0, x1, x0
    34ac:	ldrh	w0, [x0, #2]
    34b0:	str	w0, [sp, #92]
    34b4:	ldr	x0, [sp, #24]
    34b8:	ldr	w1, [x0, #5940]
    34bc:	mov	w2, #0x10                  	// #16
    34c0:	ldr	w0, [sp, #92]
    34c4:	sub	w0, w2, w0
    34c8:	cmp	w1, w0
    34cc:	b.le	35e0 <compress_block+0x370>
    34d0:	ldr	w0, [sp, #96]
    34d4:	add	w0, w0, #0x101
    34d8:	mov	w0, w0
    34dc:	lsl	x0, x0, #2
    34e0:	ldr	x1, [sp, #16]
    34e4:	add	x0, x1, x0
    34e8:	ldrh	w0, [x0]
    34ec:	str	w0, [sp, #88]
    34f0:	ldr	x0, [sp, #24]
    34f4:	ldrh	w0, [x0, #5936]
    34f8:	sxth	w1, w0
    34fc:	ldr	w0, [sp, #88]
    3500:	and	w0, w0, #0xffff
    3504:	mov	w2, w0
    3508:	ldr	x0, [sp, #24]
    350c:	ldr	w0, [x0, #5940]
    3510:	lsl	w0, w2, w0
    3514:	sxth	w0, w0
    3518:	orr	w0, w1, w0
    351c:	sxth	w0, w0
    3520:	and	w1, w0, #0xffff
    3524:	ldr	x0, [sp, #24]
    3528:	strh	w1, [x0, #5936]
    352c:	ldr	x0, [sp, #24]
    3530:	ldrh	w4, [x0, #5936]
    3534:	ldr	x0, [sp, #24]
    3538:	ldr	x1, [x0, #16]
    353c:	ldr	x0, [sp, #24]
    3540:	ldr	x0, [x0, #40]
    3544:	add	x3, x0, #0x1
    3548:	ldr	x2, [sp, #24]
    354c:	str	x3, [x2, #40]
    3550:	add	x0, x1, x0
    3554:	and	w1, w4, #0xff
    3558:	strb	w1, [x0]
    355c:	ldr	x0, [sp, #24]
    3560:	ldrh	w0, [x0, #5936]
    3564:	lsr	w0, w0, #8
    3568:	and	w4, w0, #0xffff
    356c:	ldr	x0, [sp, #24]
    3570:	ldr	x1, [x0, #16]
    3574:	ldr	x0, [sp, #24]
    3578:	ldr	x0, [x0, #40]
    357c:	add	x3, x0, #0x1
    3580:	ldr	x2, [sp, #24]
    3584:	str	x3, [x2, #40]
    3588:	add	x0, x1, x0
    358c:	and	w1, w4, #0xff
    3590:	strb	w1, [x0]
    3594:	ldr	w0, [sp, #88]
    3598:	and	w0, w0, #0xffff
    359c:	mov	w2, w0
    35a0:	ldr	x0, [sp, #24]
    35a4:	ldr	w0, [x0, #5940]
    35a8:	mov	w1, #0x10                  	// #16
    35ac:	sub	w0, w1, w0
    35b0:	asr	w0, w2, w0
    35b4:	and	w1, w0, #0xffff
    35b8:	ldr	x0, [sp, #24]
    35bc:	strh	w1, [x0, #5936]
    35c0:	ldr	x0, [sp, #24]
    35c4:	ldr	w1, [x0, #5940]
    35c8:	ldr	w0, [sp, #92]
    35cc:	sub	w0, w0, #0x10
    35d0:	add	w1, w1, w0
    35d4:	ldr	x0, [sp, #24]
    35d8:	str	w1, [x0, #5940]
    35dc:	b	3648 <compress_block+0x3d8>
    35e0:	ldr	x0, [sp, #24]
    35e4:	ldrh	w0, [x0, #5936]
    35e8:	sxth	w1, w0
    35ec:	ldr	w0, [sp, #96]
    35f0:	add	w0, w0, #0x101
    35f4:	mov	w0, w0
    35f8:	lsl	x0, x0, #2
    35fc:	ldr	x2, [sp, #16]
    3600:	add	x0, x2, x0
    3604:	ldrh	w0, [x0]
    3608:	mov	w2, w0
    360c:	ldr	x0, [sp, #24]
    3610:	ldr	w0, [x0, #5940]
    3614:	lsl	w0, w2, w0
    3618:	sxth	w0, w0
    361c:	orr	w0, w1, w0
    3620:	sxth	w0, w0
    3624:	and	w1, w0, #0xffff
    3628:	ldr	x0, [sp, #24]
    362c:	strh	w1, [x0, #5936]
    3630:	ldr	x0, [sp, #24]
    3634:	ldr	w1, [x0, #5940]
    3638:	ldr	w0, [sp, #92]
    363c:	add	w1, w1, w0
    3640:	ldr	x0, [sp, #24]
    3644:	str	w1, [x0, #5940]
    3648:	adrp	x0, 0 <tr_static_init>
    364c:	add	x0, x0, #0x0
    3650:	ldr	w1, [sp, #96]
    3654:	ldr	w0, [x0, x1, lsl #2]
    3658:	str	w0, [sp, #84]
    365c:	ldr	w0, [sp, #84]
    3660:	cmp	w0, #0x0
    3664:	b.eq	37f4 <compress_block+0x584>  // b.none
    3668:	adrp	x0, 0 <tr_static_init>
    366c:	add	x0, x0, #0x0
    3670:	ldr	w1, [sp, #96]
    3674:	ldr	w0, [x0, x1, lsl #2]
    3678:	ldr	w1, [sp, #100]
    367c:	sub	w0, w1, w0
    3680:	str	w0, [sp, #100]
    3684:	ldr	w0, [sp, #84]
    3688:	str	w0, [sp, #80]
    368c:	ldr	x0, [sp, #24]
    3690:	ldr	w1, [x0, #5940]
    3694:	mov	w2, #0x10                  	// #16
    3698:	ldr	w0, [sp, #80]
    369c:	sub	w0, w2, w0
    36a0:	cmp	w1, w0
    36a4:	b.le	37a0 <compress_block+0x530>
    36a8:	ldr	w0, [sp, #100]
    36ac:	str	w0, [sp, #76]
    36b0:	ldr	x0, [sp, #24]
    36b4:	ldrh	w0, [x0, #5936]
    36b8:	sxth	w1, w0
    36bc:	ldr	w0, [sp, #76]
    36c0:	and	w0, w0, #0xffff
    36c4:	mov	w2, w0
    36c8:	ldr	x0, [sp, #24]
    36cc:	ldr	w0, [x0, #5940]
    36d0:	lsl	w0, w2, w0
    36d4:	sxth	w0, w0
    36d8:	orr	w0, w1, w0
    36dc:	sxth	w0, w0
    36e0:	and	w1, w0, #0xffff
    36e4:	ldr	x0, [sp, #24]
    36e8:	strh	w1, [x0, #5936]
    36ec:	ldr	x0, [sp, #24]
    36f0:	ldrh	w4, [x0, #5936]
    36f4:	ldr	x0, [sp, #24]
    36f8:	ldr	x1, [x0, #16]
    36fc:	ldr	x0, [sp, #24]
    3700:	ldr	x0, [x0, #40]
    3704:	add	x3, x0, #0x1
    3708:	ldr	x2, [sp, #24]
    370c:	str	x3, [x2, #40]
    3710:	add	x0, x1, x0
    3714:	and	w1, w4, #0xff
    3718:	strb	w1, [x0]
    371c:	ldr	x0, [sp, #24]
    3720:	ldrh	w0, [x0, #5936]
    3724:	lsr	w0, w0, #8
    3728:	and	w4, w0, #0xffff
    372c:	ldr	x0, [sp, #24]
    3730:	ldr	x1, [x0, #16]
    3734:	ldr	x0, [sp, #24]
    3738:	ldr	x0, [x0, #40]
    373c:	add	x3, x0, #0x1
    3740:	ldr	x2, [sp, #24]
    3744:	str	x3, [x2, #40]
    3748:	add	x0, x1, x0
    374c:	and	w1, w4, #0xff
    3750:	strb	w1, [x0]
    3754:	ldr	w0, [sp, #76]
    3758:	and	w0, w0, #0xffff
    375c:	mov	w2, w0
    3760:	ldr	x0, [sp, #24]
    3764:	ldr	w0, [x0, #5940]
    3768:	mov	w1, #0x10                  	// #16
    376c:	sub	w0, w1, w0
    3770:	asr	w0, w2, w0
    3774:	and	w1, w0, #0xffff
    3778:	ldr	x0, [sp, #24]
    377c:	strh	w1, [x0, #5936]
    3780:	ldr	x0, [sp, #24]
    3784:	ldr	w1, [x0, #5940]
    3788:	ldr	w0, [sp, #80]
    378c:	sub	w0, w0, #0x10
    3790:	add	w1, w1, w0
    3794:	ldr	x0, [sp, #24]
    3798:	str	w1, [x0, #5940]
    379c:	b	37f4 <compress_block+0x584>
    37a0:	ldr	x0, [sp, #24]
    37a4:	ldrh	w0, [x0, #5936]
    37a8:	sxth	w1, w0
    37ac:	ldr	w0, [sp, #100]
    37b0:	and	w0, w0, #0xffff
    37b4:	mov	w2, w0
    37b8:	ldr	x0, [sp, #24]
    37bc:	ldr	w0, [x0, #5940]
    37c0:	lsl	w0, w2, w0
    37c4:	sxth	w0, w0
    37c8:	orr	w0, w1, w0
    37cc:	sxth	w0, w0
    37d0:	and	w1, w0, #0xffff
    37d4:	ldr	x0, [sp, #24]
    37d8:	strh	w1, [x0, #5936]
    37dc:	ldr	x0, [sp, #24]
    37e0:	ldr	w1, [x0, #5940]
    37e4:	ldr	w0, [sp, #80]
    37e8:	add	w1, w1, w0
    37ec:	ldr	x0, [sp, #24]
    37f0:	str	w1, [x0, #5940]
    37f4:	ldr	w0, [sp, #104]
    37f8:	sub	w0, w0, #0x1
    37fc:	str	w0, [sp, #104]
    3800:	ldr	w0, [sp, #104]
    3804:	cmp	w0, #0xff
    3808:	b.hi	3820 <compress_block+0x5b0>  // b.pmore
    380c:	adrp	x0, 650 <gen_bitlen+0x238>
    3810:	add	x1, x0, #0x0
    3814:	ldr	w0, [sp, #104]
    3818:	ldrb	w0, [x1, x0]
    381c:	b	383c <compress_block+0x5cc>
    3820:	ldr	w0, [sp, #104]
    3824:	lsr	w0, w0, #7
    3828:	add	w2, w0, #0x100
    382c:	adrp	x0, 650 <gen_bitlen+0x238>
    3830:	add	x1, x0, #0x0
    3834:	mov	w0, w2
    3838:	ldrb	w0, [x1, x0]
    383c:	str	w0, [sp, #96]
    3840:	ldr	w0, [sp, #96]
    3844:	lsl	x0, x0, #2
    3848:	ldr	x1, [sp, #8]
    384c:	add	x0, x1, x0
    3850:	ldrh	w0, [x0, #2]
    3854:	str	w0, [sp, #72]
    3858:	ldr	x0, [sp, #24]
    385c:	ldr	w1, [x0, #5940]
    3860:	mov	w2, #0x10                  	// #16
    3864:	ldr	w0, [sp, #72]
    3868:	sub	w0, w2, w0
    386c:	cmp	w1, w0
    3870:	b.le	397c <compress_block+0x70c>
    3874:	ldr	w0, [sp, #96]
    3878:	lsl	x0, x0, #2
    387c:	ldr	x1, [sp, #8]
    3880:	add	x0, x1, x0
    3884:	ldrh	w0, [x0]
    3888:	str	w0, [sp, #68]
    388c:	ldr	x0, [sp, #24]
    3890:	ldrh	w0, [x0, #5936]
    3894:	sxth	w1, w0
    3898:	ldr	w0, [sp, #68]
    389c:	and	w0, w0, #0xffff
    38a0:	mov	w2, w0
    38a4:	ldr	x0, [sp, #24]
    38a8:	ldr	w0, [x0, #5940]
    38ac:	lsl	w0, w2, w0
    38b0:	sxth	w0, w0
    38b4:	orr	w0, w1, w0
    38b8:	sxth	w0, w0
    38bc:	and	w1, w0, #0xffff
    38c0:	ldr	x0, [sp, #24]
    38c4:	strh	w1, [x0, #5936]
    38c8:	ldr	x0, [sp, #24]
    38cc:	ldrh	w4, [x0, #5936]
    38d0:	ldr	x0, [sp, #24]
    38d4:	ldr	x1, [x0, #16]
    38d8:	ldr	x0, [sp, #24]
    38dc:	ldr	x0, [x0, #40]
    38e0:	add	x3, x0, #0x1
    38e4:	ldr	x2, [sp, #24]
    38e8:	str	x3, [x2, #40]
    38ec:	add	x0, x1, x0
    38f0:	and	w1, w4, #0xff
    38f4:	strb	w1, [x0]
    38f8:	ldr	x0, [sp, #24]
    38fc:	ldrh	w0, [x0, #5936]
    3900:	lsr	w0, w0, #8
    3904:	and	w4, w0, #0xffff
    3908:	ldr	x0, [sp, #24]
    390c:	ldr	x1, [x0, #16]
    3910:	ldr	x0, [sp, #24]
    3914:	ldr	x0, [x0, #40]
    3918:	add	x3, x0, #0x1
    391c:	ldr	x2, [sp, #24]
    3920:	str	x3, [x2, #40]
    3924:	add	x0, x1, x0
    3928:	and	w1, w4, #0xff
    392c:	strb	w1, [x0]
    3930:	ldr	w0, [sp, #68]
    3934:	and	w0, w0, #0xffff
    3938:	mov	w2, w0
    393c:	ldr	x0, [sp, #24]
    3940:	ldr	w0, [x0, #5940]
    3944:	mov	w1, #0x10                  	// #16
    3948:	sub	w0, w1, w0
    394c:	asr	w0, w2, w0
    3950:	and	w1, w0, #0xffff
    3954:	ldr	x0, [sp, #24]
    3958:	strh	w1, [x0, #5936]
    395c:	ldr	x0, [sp, #24]
    3960:	ldr	w1, [x0, #5940]
    3964:	ldr	w0, [sp, #72]
    3968:	sub	w0, w0, #0x10
    396c:	add	w1, w1, w0
    3970:	ldr	x0, [sp, #24]
    3974:	str	w1, [x0, #5940]
    3978:	b	39dc <compress_block+0x76c>
    397c:	ldr	x0, [sp, #24]
    3980:	ldrh	w0, [x0, #5936]
    3984:	sxth	w1, w0
    3988:	ldr	w0, [sp, #96]
    398c:	lsl	x0, x0, #2
    3990:	ldr	x2, [sp, #8]
    3994:	add	x0, x2, x0
    3998:	ldrh	w0, [x0]
    399c:	mov	w2, w0
    39a0:	ldr	x0, [sp, #24]
    39a4:	ldr	w0, [x0, #5940]
    39a8:	lsl	w0, w2, w0
    39ac:	sxth	w0, w0
    39b0:	orr	w0, w1, w0
    39b4:	sxth	w0, w0
    39b8:	and	w1, w0, #0xffff
    39bc:	ldr	x0, [sp, #24]
    39c0:	strh	w1, [x0, #5936]
    39c4:	ldr	x0, [sp, #24]
    39c8:	ldr	w1, [x0, #5940]
    39cc:	ldr	w0, [sp, #72]
    39d0:	add	w1, w1, w0
    39d4:	ldr	x0, [sp, #24]
    39d8:	str	w1, [x0, #5940]
    39dc:	adrp	x0, 0 <tr_static_init>
    39e0:	add	x0, x0, #0x0
    39e4:	ldr	w1, [sp, #96]
    39e8:	ldr	w0, [x0, x1, lsl #2]
    39ec:	str	w0, [sp, #84]
    39f0:	ldr	w0, [sp, #84]
    39f4:	cmp	w0, #0x0
    39f8:	b.eq	3b8c <compress_block+0x91c>  // b.none
    39fc:	adrp	x0, 0 <tr_static_init>
    3a00:	add	x0, x0, #0x0
    3a04:	ldr	w1, [sp, #96]
    3a08:	ldr	w0, [x0, x1, lsl #2]
    3a0c:	mov	w1, w0
    3a10:	ldr	w0, [sp, #104]
    3a14:	sub	w0, w0, w1
    3a18:	str	w0, [sp, #104]
    3a1c:	ldr	w0, [sp, #84]
    3a20:	str	w0, [sp, #64]
    3a24:	ldr	x0, [sp, #24]
    3a28:	ldr	w1, [x0, #5940]
    3a2c:	mov	w2, #0x10                  	// #16
    3a30:	ldr	w0, [sp, #64]
    3a34:	sub	w0, w2, w0
    3a38:	cmp	w1, w0
    3a3c:	b.le	3b38 <compress_block+0x8c8>
    3a40:	ldr	w0, [sp, #104]
    3a44:	str	w0, [sp, #60]
    3a48:	ldr	x0, [sp, #24]
    3a4c:	ldrh	w0, [x0, #5936]
    3a50:	sxth	w1, w0
    3a54:	ldr	w0, [sp, #60]
    3a58:	and	w0, w0, #0xffff
    3a5c:	mov	w2, w0
    3a60:	ldr	x0, [sp, #24]
    3a64:	ldr	w0, [x0, #5940]
    3a68:	lsl	w0, w2, w0
    3a6c:	sxth	w0, w0
    3a70:	orr	w0, w1, w0
    3a74:	sxth	w0, w0
    3a78:	and	w1, w0, #0xffff
    3a7c:	ldr	x0, [sp, #24]
    3a80:	strh	w1, [x0, #5936]
    3a84:	ldr	x0, [sp, #24]
    3a88:	ldrh	w4, [x0, #5936]
    3a8c:	ldr	x0, [sp, #24]
    3a90:	ldr	x1, [x0, #16]
    3a94:	ldr	x0, [sp, #24]
    3a98:	ldr	x0, [x0, #40]
    3a9c:	add	x3, x0, #0x1
    3aa0:	ldr	x2, [sp, #24]
    3aa4:	str	x3, [x2, #40]
    3aa8:	add	x0, x1, x0
    3aac:	and	w1, w4, #0xff
    3ab0:	strb	w1, [x0]
    3ab4:	ldr	x0, [sp, #24]
    3ab8:	ldrh	w0, [x0, #5936]
    3abc:	lsr	w0, w0, #8
    3ac0:	and	w4, w0, #0xffff
    3ac4:	ldr	x0, [sp, #24]
    3ac8:	ldr	x1, [x0, #16]
    3acc:	ldr	x0, [sp, #24]
    3ad0:	ldr	x0, [x0, #40]
    3ad4:	add	x3, x0, #0x1
    3ad8:	ldr	x2, [sp, #24]
    3adc:	str	x3, [x2, #40]
    3ae0:	add	x0, x1, x0
    3ae4:	and	w1, w4, #0xff
    3ae8:	strb	w1, [x0]
    3aec:	ldr	w0, [sp, #60]
    3af0:	and	w0, w0, #0xffff
    3af4:	mov	w2, w0
    3af8:	ldr	x0, [sp, #24]
    3afc:	ldr	w0, [x0, #5940]
    3b00:	mov	w1, #0x10                  	// #16
    3b04:	sub	w0, w1, w0
    3b08:	asr	w0, w2, w0
    3b0c:	and	w1, w0, #0xffff
    3b10:	ldr	x0, [sp, #24]
    3b14:	strh	w1, [x0, #5936]
    3b18:	ldr	x0, [sp, #24]
    3b1c:	ldr	w1, [x0, #5940]
    3b20:	ldr	w0, [sp, #64]
    3b24:	sub	w0, w0, #0x10
    3b28:	add	w1, w1, w0
    3b2c:	ldr	x0, [sp, #24]
    3b30:	str	w1, [x0, #5940]
    3b34:	b	3b8c <compress_block+0x91c>
    3b38:	ldr	x0, [sp, #24]
    3b3c:	ldrh	w0, [x0, #5936]
    3b40:	sxth	w1, w0
    3b44:	ldr	w0, [sp, #104]
    3b48:	and	w0, w0, #0xffff
    3b4c:	mov	w2, w0
    3b50:	ldr	x0, [sp, #24]
    3b54:	ldr	w0, [x0, #5940]
    3b58:	lsl	w0, w2, w0
    3b5c:	sxth	w0, w0
    3b60:	orr	w0, w1, w0
    3b64:	sxth	w0, w0
    3b68:	and	w1, w0, #0xffff
    3b6c:	ldr	x0, [sp, #24]
    3b70:	strh	w1, [x0, #5936]
    3b74:	ldr	x0, [sp, #24]
    3b78:	ldr	w1, [x0, #5940]
    3b7c:	ldr	w0, [sp, #64]
    3b80:	add	w1, w1, w0
    3b84:	ldr	x0, [sp, #24]
    3b88:	str	w1, [x0, #5940]
    3b8c:	ldr	x0, [sp, #24]
    3b90:	ldr	w0, [x0, #5900]
    3b94:	ldr	w1, [sp, #108]
    3b98:	cmp	w1, w0
    3b9c:	b.cc	3294 <compress_block+0x24>  // b.lo, b.ul, b.last
    3ba0:	ldr	x0, [sp, #16]
    3ba4:	add	x0, x0, #0x400
    3ba8:	ldrh	w0, [x0, #2]
    3bac:	str	w0, [sp, #48]
    3bb0:	ldr	x0, [sp, #24]
    3bb4:	ldr	w1, [x0, #5940]
    3bb8:	mov	w2, #0x10                  	// #16
    3bbc:	ldr	w0, [sp, #48]
    3bc0:	sub	w0, w2, w0
    3bc4:	cmp	w1, w0
    3bc8:	b.le	3ccc <compress_block+0xa5c>
    3bcc:	ldr	x0, [sp, #16]
    3bd0:	add	x0, x0, #0x400
    3bd4:	ldrh	w0, [x0]
    3bd8:	str	w0, [sp, #44]
    3bdc:	ldr	x0, [sp, #24]
    3be0:	ldrh	w0, [x0, #5936]
    3be4:	sxth	w1, w0
    3be8:	ldr	w0, [sp, #44]
    3bec:	and	w0, w0, #0xffff
    3bf0:	mov	w2, w0
    3bf4:	ldr	x0, [sp, #24]
    3bf8:	ldr	w0, [x0, #5940]
    3bfc:	lsl	w0, w2, w0
    3c00:	sxth	w0, w0
    3c04:	orr	w0, w1, w0
    3c08:	sxth	w0, w0
    3c0c:	and	w1, w0, #0xffff
    3c10:	ldr	x0, [sp, #24]
    3c14:	strh	w1, [x0, #5936]
    3c18:	ldr	x0, [sp, #24]
    3c1c:	ldrh	w4, [x0, #5936]
    3c20:	ldr	x0, [sp, #24]
    3c24:	ldr	x1, [x0, #16]
    3c28:	ldr	x0, [sp, #24]
    3c2c:	ldr	x0, [x0, #40]
    3c30:	add	x3, x0, #0x1
    3c34:	ldr	x2, [sp, #24]
    3c38:	str	x3, [x2, #40]
    3c3c:	add	x0, x1, x0
    3c40:	and	w1, w4, #0xff
    3c44:	strb	w1, [x0]
    3c48:	ldr	x0, [sp, #24]
    3c4c:	ldrh	w0, [x0, #5936]
    3c50:	lsr	w0, w0, #8
    3c54:	and	w4, w0, #0xffff
    3c58:	ldr	x0, [sp, #24]
    3c5c:	ldr	x1, [x0, #16]
    3c60:	ldr	x0, [sp, #24]
    3c64:	ldr	x0, [x0, #40]
    3c68:	add	x3, x0, #0x1
    3c6c:	ldr	x2, [sp, #24]
    3c70:	str	x3, [x2, #40]
    3c74:	add	x0, x1, x0
    3c78:	and	w1, w4, #0xff
    3c7c:	strb	w1, [x0]
    3c80:	ldr	w0, [sp, #44]
    3c84:	and	w0, w0, #0xffff
    3c88:	mov	w2, w0
    3c8c:	ldr	x0, [sp, #24]
    3c90:	ldr	w0, [x0, #5940]
    3c94:	mov	w1, #0x10                  	// #16
    3c98:	sub	w0, w1, w0
    3c9c:	asr	w0, w2, w0
    3ca0:	and	w1, w0, #0xffff
    3ca4:	ldr	x0, [sp, #24]
    3ca8:	strh	w1, [x0, #5936]
    3cac:	ldr	x0, [sp, #24]
    3cb0:	ldr	w1, [x0, #5940]
    3cb4:	ldr	w0, [sp, #48]
    3cb8:	sub	w0, w0, #0x10
    3cbc:	add	w1, w1, w0
    3cc0:	ldr	x0, [sp, #24]
    3cc4:	str	w1, [x0, #5940]
    3cc8:	b	3d24 <compress_block+0xab4>
    3ccc:	ldr	x0, [sp, #24]
    3cd0:	ldrh	w0, [x0, #5936]
    3cd4:	sxth	w1, w0
    3cd8:	ldr	x0, [sp, #16]
    3cdc:	add	x0, x0, #0x400
    3ce0:	ldrh	w0, [x0]
    3ce4:	mov	w2, w0
    3ce8:	ldr	x0, [sp, #24]
    3cec:	ldr	w0, [x0, #5940]
    3cf0:	lsl	w0, w2, w0
    3cf4:	sxth	w0, w0
    3cf8:	orr	w0, w1, w0
    3cfc:	sxth	w0, w0
    3d00:	and	w1, w0, #0xffff
    3d04:	ldr	x0, [sp, #24]
    3d08:	strh	w1, [x0, #5936]
    3d0c:	ldr	x0, [sp, #24]
    3d10:	ldr	w1, [x0, #5940]
    3d14:	ldr	w0, [sp, #48]
    3d18:	add	w1, w1, w0
    3d1c:	ldr	x0, [sp, #24]
    3d20:	str	w1, [x0, #5940]
    3d24:	nop
    3d28:	add	sp, sp, #0x70
    3d2c:	ret

0000000000003d30 <detect_data_type>:
    3d30:	sub	sp, sp, #0x20
    3d34:	str	x0, [sp, #8]
    3d38:	mov	x0, #0xc07f                	// #49279
    3d3c:	movk	x0, #0xf3ff, lsl #16
    3d40:	str	x0, [sp, #24]
    3d44:	str	wzr, [sp, #20]
    3d48:	b	3d9c <detect_data_type+0x6c>
    3d4c:	ldr	x0, [sp, #24]
    3d50:	and	x0, x0, #0x1
    3d54:	cmp	x0, #0x0
    3d58:	b.eq	3d84 <detect_data_type+0x54>  // b.none
    3d5c:	ldr	x1, [sp, #8]
    3d60:	ldrsw	x0, [sp, #20]
    3d64:	add	x0, x0, #0x34
    3d68:	lsl	x0, x0, #2
    3d6c:	add	x0, x1, x0
    3d70:	ldrh	w0, [x0, #4]
    3d74:	cmp	w0, #0x0
    3d78:	b.eq	3d84 <detect_data_type+0x54>  // b.none
    3d7c:	mov	w0, #0x0                   	// #0
    3d80:	b	3e30 <detect_data_type+0x100>
    3d84:	ldr	w0, [sp, #20]
    3d88:	add	w0, w0, #0x1
    3d8c:	str	w0, [sp, #20]
    3d90:	ldr	x0, [sp, #24]
    3d94:	lsr	x0, x0, #1
    3d98:	str	x0, [sp, #24]
    3d9c:	ldr	w0, [sp, #20]
    3da0:	cmp	w0, #0x1f
    3da4:	b.le	3d4c <detect_data_type+0x1c>
    3da8:	ldr	x0, [sp, #8]
    3dac:	ldrh	w0, [x0, #248]
    3db0:	cmp	w0, #0x0
    3db4:	b.ne	3dd8 <detect_data_type+0xa8>  // b.any
    3db8:	ldr	x0, [sp, #8]
    3dbc:	ldrh	w0, [x0, #252]
    3dc0:	cmp	w0, #0x0
    3dc4:	b.ne	3dd8 <detect_data_type+0xa8>  // b.any
    3dc8:	ldr	x0, [sp, #8]
    3dcc:	ldrh	w0, [x0, #264]
    3dd0:	cmp	w0, #0x0
    3dd4:	b.eq	3de0 <detect_data_type+0xb0>  // b.none
    3dd8:	mov	w0, #0x1                   	// #1
    3ddc:	b	3e30 <detect_data_type+0x100>
    3de0:	mov	w0, #0x20                  	// #32
    3de4:	str	w0, [sp, #20]
    3de8:	b	3e20 <detect_data_type+0xf0>
    3dec:	ldr	x1, [sp, #8]
    3df0:	ldrsw	x0, [sp, #20]
    3df4:	add	x0, x0, #0x34
    3df8:	lsl	x0, x0, #2
    3dfc:	add	x0, x1, x0
    3e00:	ldrh	w0, [x0, #4]
    3e04:	cmp	w0, #0x0
    3e08:	b.eq	3e14 <detect_data_type+0xe4>  // b.none
    3e0c:	mov	w0, #0x1                   	// #1
    3e10:	b	3e30 <detect_data_type+0x100>
    3e14:	ldr	w0, [sp, #20]
    3e18:	add	w0, w0, #0x1
    3e1c:	str	w0, [sp, #20]
    3e20:	ldr	w0, [sp, #20]
    3e24:	cmp	w0, #0xff
    3e28:	b.le	3dec <detect_data_type+0xbc>
    3e2c:	mov	w0, #0x0                   	// #0
    3e30:	add	sp, sp, #0x20
    3e34:	ret

0000000000003e38 <bi_reverse>:
    3e38:	str	x19, [sp, #-32]!
    3e3c:	str	w0, [sp, #28]
    3e40:	str	w1, [sp, #24]
    3e44:	mov	w19, #0x0                   	// #0
    3e48:	ldr	w0, [sp, #28]
    3e4c:	and	w0, w0, #0x1
    3e50:	orr	w19, w19, w0
    3e54:	ldr	w0, [sp, #28]
    3e58:	lsr	w0, w0, #1
    3e5c:	str	w0, [sp, #28]
    3e60:	lsl	w19, w19, #1
    3e64:	ldr	w0, [sp, #24]
    3e68:	sub	w0, w0, #0x1
    3e6c:	str	w0, [sp, #24]
    3e70:	ldr	w0, [sp, #24]
    3e74:	cmp	w0, #0x0
    3e78:	b.gt	3e48 <bi_reverse+0x10>
    3e7c:	lsr	w0, w19, #1
    3e80:	ldr	x19, [sp], #32
    3e84:	ret

0000000000003e88 <bi_flush>:
    3e88:	sub	sp, sp, #0x10
    3e8c:	str	x0, [sp, #8]
    3e90:	ldr	x0, [sp, #8]
    3e94:	ldr	w0, [x0, #5940]
    3e98:	cmp	w0, #0x10
    3e9c:	b.ne	3f1c <bi_flush+0x94>  // b.any
    3ea0:	ldr	x0, [sp, #8]
    3ea4:	ldrh	w4, [x0, #5936]
    3ea8:	ldr	x0, [sp, #8]
    3eac:	ldr	x1, [x0, #16]
    3eb0:	ldr	x0, [sp, #8]
    3eb4:	ldr	x0, [x0, #40]
    3eb8:	add	x3, x0, #0x1
    3ebc:	ldr	x2, [sp, #8]
    3ec0:	str	x3, [x2, #40]
    3ec4:	add	x0, x1, x0
    3ec8:	and	w1, w4, #0xff
    3ecc:	strb	w1, [x0]
    3ed0:	ldr	x0, [sp, #8]
    3ed4:	ldrh	w0, [x0, #5936]
    3ed8:	lsr	w0, w0, #8
    3edc:	and	w4, w0, #0xffff
    3ee0:	ldr	x0, [sp, #8]
    3ee4:	ldr	x1, [x0, #16]
    3ee8:	ldr	x0, [sp, #8]
    3eec:	ldr	x0, [x0, #40]
    3ef0:	add	x3, x0, #0x1
    3ef4:	ldr	x2, [sp, #8]
    3ef8:	str	x3, [x2, #40]
    3efc:	add	x0, x1, x0
    3f00:	and	w1, w4, #0xff
    3f04:	strb	w1, [x0]
    3f08:	ldr	x0, [sp, #8]
    3f0c:	strh	wzr, [x0, #5936]
    3f10:	ldr	x0, [sp, #8]
    3f14:	str	wzr, [x0, #5940]
    3f18:	b	3f88 <bi_flush+0x100>
    3f1c:	ldr	x0, [sp, #8]
    3f20:	ldr	w0, [x0, #5940]
    3f24:	cmp	w0, #0x7
    3f28:	b.le	3f88 <bi_flush+0x100>
    3f2c:	ldr	x0, [sp, #8]
    3f30:	ldrh	w4, [x0, #5936]
    3f34:	ldr	x0, [sp, #8]
    3f38:	ldr	x1, [x0, #16]
    3f3c:	ldr	x0, [sp, #8]
    3f40:	ldr	x0, [x0, #40]
    3f44:	add	x3, x0, #0x1
    3f48:	ldr	x2, [sp, #8]
    3f4c:	str	x3, [x2, #40]
    3f50:	add	x0, x1, x0
    3f54:	and	w1, w4, #0xff
    3f58:	strb	w1, [x0]
    3f5c:	ldr	x0, [sp, #8]
    3f60:	ldrh	w0, [x0, #5936]
    3f64:	lsr	w0, w0, #8
    3f68:	and	w1, w0, #0xffff
    3f6c:	ldr	x0, [sp, #8]
    3f70:	strh	w1, [x0, #5936]
    3f74:	ldr	x0, [sp, #8]
    3f78:	ldr	w0, [x0, #5940]
    3f7c:	sub	w1, w0, #0x8
    3f80:	ldr	x0, [sp, #8]
    3f84:	str	w1, [x0, #5940]
    3f88:	nop
    3f8c:	add	sp, sp, #0x10
    3f90:	ret

0000000000003f94 <bi_windup>:
    3f94:	sub	sp, sp, #0x10
    3f98:	str	x0, [sp, #8]
    3f9c:	ldr	x0, [sp, #8]
    3fa0:	ldr	w0, [x0, #5940]
    3fa4:	cmp	w0, #0x8
    3fa8:	b.le	4018 <bi_windup+0x84>
    3fac:	ldr	x0, [sp, #8]
    3fb0:	ldrh	w4, [x0, #5936]
    3fb4:	ldr	x0, [sp, #8]
    3fb8:	ldr	x1, [x0, #16]
    3fbc:	ldr	x0, [sp, #8]
    3fc0:	ldr	x0, [x0, #40]
    3fc4:	add	x3, x0, #0x1
    3fc8:	ldr	x2, [sp, #8]
    3fcc:	str	x3, [x2, #40]
    3fd0:	add	x0, x1, x0
    3fd4:	and	w1, w4, #0xff
    3fd8:	strb	w1, [x0]
    3fdc:	ldr	x0, [sp, #8]
    3fe0:	ldrh	w0, [x0, #5936]
    3fe4:	lsr	w0, w0, #8
    3fe8:	and	w4, w0, #0xffff
    3fec:	ldr	x0, [sp, #8]
    3ff0:	ldr	x1, [x0, #16]
    3ff4:	ldr	x0, [sp, #8]
    3ff8:	ldr	x0, [x0, #40]
    3ffc:	add	x3, x0, #0x1
    4000:	ldr	x2, [sp, #8]
    4004:	str	x3, [x2, #40]
    4008:	add	x0, x1, x0
    400c:	and	w1, w4, #0xff
    4010:	strb	w1, [x0]
    4014:	b	4058 <bi_windup+0xc4>
    4018:	ldr	x0, [sp, #8]
    401c:	ldr	w0, [x0, #5940]
    4020:	cmp	w0, #0x0
    4024:	b.le	4058 <bi_windup+0xc4>
    4028:	ldr	x0, [sp, #8]
    402c:	ldrh	w4, [x0, #5936]
    4030:	ldr	x0, [sp, #8]
    4034:	ldr	x1, [x0, #16]
    4038:	ldr	x0, [sp, #8]
    403c:	ldr	x0, [x0, #40]
    4040:	add	x3, x0, #0x1
    4044:	ldr	x2, [sp, #8]
    4048:	str	x3, [x2, #40]
    404c:	add	x0, x1, x0
    4050:	and	w1, w4, #0xff
    4054:	strb	w1, [x0]
    4058:	ldr	x0, [sp, #8]
    405c:	strh	wzr, [x0, #5936]
    4060:	ldr	x0, [sp, #8]
    4064:	str	wzr, [x0, #5940]
    4068:	nop
    406c:	add	sp, sp, #0x10
    4070:	ret

zutil.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <zlibVersion>:
   0:	adrp	x0, 0 <zlibVersion>
   4:	add	x0, x0, #0x0
   8:	ret

000000000000000c <zlibCompileFlags>:
   c:	sub	sp, sp, #0x10
  10:	str	xzr, [sp, #8]
  14:	ldr	x0, [sp, #8]
  18:	add	x0, x0, #0x1
  1c:	str	x0, [sp, #8]
  20:	nop
  24:	ldr	x0, [sp, #8]
  28:	add	x0, x0, #0x8
  2c:	str	x0, [sp, #8]
  30:	nop
  34:	ldr	x0, [sp, #8]
  38:	add	x0, x0, #0x20
  3c:	str	x0, [sp, #8]
  40:	nop
  44:	ldr	x0, [sp, #8]
  48:	add	x0, x0, #0x80
  4c:	str	x0, [sp, #8]
  50:	nop
  54:	ldr	x0, [sp, #8]
  58:	add	sp, sp, #0x10
  5c:	ret

0000000000000060 <zError>:
  60:	sub	sp, sp, #0x10
  64:	str	w0, [sp, #12]
  68:	mov	w1, #0x2                   	// #2
  6c:	ldr	w0, [sp, #12]
  70:	sub	w1, w1, w0
  74:	adrp	x0, 98 <zcalloc+0xc>
  78:	add	x0, x0, #0x0
  7c:	sxtw	x1, w1
  80:	ldr	x0, [x0, x1, lsl #3]
  84:	add	sp, sp, #0x10
  88:	ret

000000000000008c <zcalloc>:
  8c:	stp	x29, x30, [sp, #-32]!
  90:	mov	x29, sp
  94:	str	x0, [sp, #24]
  98:	str	w1, [sp, #20]
  9c:	str	w2, [sp, #16]
  a0:	ldr	w1, [sp, #20]
  a4:	ldr	w0, [sp, #16]
  a8:	mul	w0, w1, w0
  ac:	mov	w0, w0
  b0:	bl	0 <malloc>
  b4:	ldp	x29, x30, [sp], #32
  b8:	ret

00000000000000bc <zcfree>:
  bc:	stp	x29, x30, [sp, #-32]!
  c0:	mov	x29, sp
  c4:	str	x0, [sp, #24]
  c8:	str	x1, [sp, #16]
  cc:	ldr	x0, [sp, #16]
  d0:	bl	0 <free>
  d4:	nop
  d8:	ldp	x29, x30, [sp], #32
  dc:	ret

compress.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <compress2>:
   0:	stp	x29, x30, [sp, #-192]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #56]
   c:	str	x1, [sp, #48]
  10:	str	x2, [sp, #40]
  14:	str	x3, [sp, #32]
  18:	str	w4, [sp, #28]
  1c:	mov	w0, #0xffffffff            	// #-1
  20:	str	w0, [sp, #180]
  24:	ldr	x0, [sp, #48]
  28:	ldr	x0, [x0]
  2c:	str	x0, [sp, #184]
  30:	ldr	x0, [sp, #48]
  34:	str	xzr, [x0]
  38:	str	xzr, [sp, #128]
  3c:	str	xzr, [sp, #136]
  40:	str	xzr, [sp, #144]
  44:	add	x4, sp, #0x40
  48:	mov	w3, #0x70                  	// #112
  4c:	adrp	x0, 0 <compress2>
  50:	add	x2, x0, #0x0
  54:	ldr	w1, [sp, #28]
  58:	mov	x0, x4
  5c:	bl	0 <deflateInit_>
  60:	str	w0, [sp, #176]
  64:	ldr	w0, [sp, #176]
  68:	cmp	w0, #0x0
  6c:	b.eq	78 <compress2+0x78>  // b.none
  70:	ldr	w0, [sp, #176]
  74:	b	174 <compress2+0x174>
  78:	ldr	x0, [sp, #56]
  7c:	str	x0, [sp, #88]
  80:	str	wzr, [sp, #96]
  84:	ldr	x0, [sp, #40]
  88:	str	x0, [sp, #64]
  8c:	str	wzr, [sp, #72]
  90:	ldr	w0, [sp, #96]
  94:	cmp	w0, #0x0
  98:	b.ne	d0 <compress2+0xd0>  // b.any
  9c:	ldr	w0, [sp, #180]
  a0:	ldr	x1, [sp, #184]
  a4:	cmp	x1, x0
  a8:	b.hi	b4 <compress2+0xb4>  // b.pmore
  ac:	ldr	x0, [sp, #184]
  b0:	b	b8 <compress2+0xb8>
  b4:	ldr	w0, [sp, #180]
  b8:	str	w0, [sp, #96]
  bc:	ldr	w0, [sp, #96]
  c0:	mov	w0, w0
  c4:	ldr	x1, [sp, #184]
  c8:	sub	x0, x1, x0
  cc:	str	x0, [sp, #184]
  d0:	ldr	w0, [sp, #72]
  d4:	cmp	w0, #0x0
  d8:	b.ne	110 <compress2+0x110>  // b.any
  dc:	ldr	w0, [sp, #180]
  e0:	ldr	x1, [sp, #32]
  e4:	cmp	x1, x0
  e8:	b.hi	f4 <compress2+0xf4>  // b.pmore
  ec:	ldr	x0, [sp, #32]
  f0:	b	f8 <compress2+0xf8>
  f4:	ldr	w0, [sp, #180]
  f8:	str	w0, [sp, #72]
  fc:	ldr	w0, [sp, #72]
 100:	mov	w0, w0
 104:	ldr	x1, [sp, #32]
 108:	sub	x0, x1, x0
 10c:	str	x0, [sp, #32]
 110:	ldr	x0, [sp, #32]
 114:	cmp	x0, #0x0
 118:	b.eq	124 <compress2+0x124>  // b.none
 11c:	mov	w0, #0x0                   	// #0
 120:	b	128 <compress2+0x128>
 124:	mov	w0, #0x4                   	// #4
 128:	add	x2, sp, #0x40
 12c:	mov	w1, w0
 130:	mov	x0, x2
 134:	bl	0 <deflate>
 138:	str	w0, [sp, #176]
 13c:	ldr	w0, [sp, #176]
 140:	cmp	w0, #0x0
 144:	b.eq	90 <compress2+0x90>  // b.none
 148:	ldr	x1, [sp, #104]
 14c:	ldr	x0, [sp, #48]
 150:	str	x1, [x0]
 154:	add	x0, sp, #0x40
 158:	bl	0 <deflateEnd>
 15c:	ldr	w0, [sp, #176]
 160:	cmp	w0, #0x1
 164:	b.eq	170 <compress2+0x170>  // b.none
 168:	ldr	w0, [sp, #176]
 16c:	b	174 <compress2+0x174>
 170:	mov	w0, #0x0                   	// #0
 174:	ldp	x29, x30, [sp], #192
 178:	ret

000000000000017c <compress>:
 17c:	stp	x29, x30, [sp, #-48]!
 180:	mov	x29, sp
 184:	str	x0, [sp, #40]
 188:	str	x1, [sp, #32]
 18c:	str	x2, [sp, #24]
 190:	str	x3, [sp, #16]
 194:	mov	w4, #0xffffffff            	// #-1
 198:	ldr	x3, [sp, #16]
 19c:	ldr	x2, [sp, #24]
 1a0:	ldr	x1, [sp, #32]
 1a4:	ldr	x0, [sp, #40]
 1a8:	bl	0 <compress2>
 1ac:	ldp	x29, x30, [sp], #48
 1b0:	ret

00000000000001b4 <compressBound>:
 1b4:	sub	sp, sp, #0x10
 1b8:	str	x0, [sp, #8]
 1bc:	ldr	x0, [sp, #8]
 1c0:	lsr	x1, x0, #12
 1c4:	ldr	x0, [sp, #8]
 1c8:	add	x1, x1, x0
 1cc:	ldr	x0, [sp, #8]
 1d0:	lsr	x0, x0, #14
 1d4:	add	x1, x1, x0
 1d8:	ldr	x0, [sp, #8]
 1dc:	lsr	x0, x0, #25
 1e0:	add	x0, x1, x0
 1e4:	add	x0, x0, #0xd
 1e8:	add	sp, sp, #0x10
 1ec:	ret

uncompr.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <uncompress2>:
   0:	stp	x29, x30, [sp, #-192]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	x2, [sp, #24]
  14:	str	x3, [sp, #16]
  18:	mov	w0, #0xffffffff            	// #-1
  1c:	str	w0, [sp, #172]
  20:	ldr	x0, [sp, #16]
  24:	ldr	x0, [x0]
  28:	str	x0, [sp, #184]
  2c:	ldr	x0, [sp, #32]
  30:	ldr	x0, [x0]
  34:	cmp	x0, #0x0
  38:	b.eq	54 <uncompress2+0x54>  // b.none
  3c:	ldr	x0, [sp, #32]
  40:	ldr	x0, [x0]
  44:	str	x0, [sp, #176]
  48:	ldr	x0, [sp, #32]
  4c:	str	xzr, [x0]
  50:	b	64 <uncompress2+0x64>
  54:	mov	x0, #0x1                   	// #1
  58:	str	x0, [sp, #176]
  5c:	add	x0, sp, #0x30
  60:	str	x0, [sp, #40]
  64:	ldr	x0, [sp, #24]
  68:	str	x0, [sp, #56]
  6c:	str	wzr, [sp, #64]
  70:	str	xzr, [sp, #120]
  74:	str	xzr, [sp, #128]
  78:	str	xzr, [sp, #136]
  7c:	add	x3, sp, #0x38
  80:	mov	w2, #0x70                  	// #112
  84:	adrp	x0, 0 <uncompress2>
  88:	add	x1, x0, #0x0
  8c:	mov	x0, x3
  90:	bl	0 <inflateInit_>
  94:	str	w0, [sp, #168]
  98:	ldr	w0, [sp, #168]
  9c:	cmp	w0, #0x0
  a0:	b.eq	ac <uncompress2+0xac>  // b.none
  a4:	ldr	w0, [sp, #168]
  a8:	b	218 <uncompress2+0x218>
  ac:	ldr	x0, [sp, #40]
  b0:	str	x0, [sp, #80]
  b4:	str	wzr, [sp, #88]
  b8:	ldr	w0, [sp, #88]
  bc:	cmp	w0, #0x0
  c0:	b.ne	f8 <uncompress2+0xf8>  // b.any
  c4:	ldr	w0, [sp, #172]
  c8:	ldr	x1, [sp, #176]
  cc:	cmp	x1, x0
  d0:	b.hi	dc <uncompress2+0xdc>  // b.pmore
  d4:	ldr	x0, [sp, #176]
  d8:	b	e0 <uncompress2+0xe0>
  dc:	ldr	w0, [sp, #172]
  e0:	str	w0, [sp, #88]
  e4:	ldr	w0, [sp, #88]
  e8:	mov	w0, w0
  ec:	ldr	x1, [sp, #176]
  f0:	sub	x0, x1, x0
  f4:	str	x0, [sp, #176]
  f8:	ldr	w0, [sp, #64]
  fc:	cmp	w0, #0x0
 100:	b.ne	138 <uncompress2+0x138>  // b.any
 104:	ldr	w0, [sp, #172]
 108:	ldr	x1, [sp, #184]
 10c:	cmp	x1, x0
 110:	b.hi	11c <uncompress2+0x11c>  // b.pmore
 114:	ldr	x0, [sp, #184]
 118:	b	120 <uncompress2+0x120>
 11c:	ldr	w0, [sp, #172]
 120:	str	w0, [sp, #64]
 124:	ldr	w0, [sp, #64]
 128:	mov	w0, w0
 12c:	ldr	x1, [sp, #184]
 130:	sub	x0, x1, x0
 134:	str	x0, [sp, #184]
 138:	add	x0, sp, #0x38
 13c:	mov	w1, #0x0                   	// #0
 140:	bl	0 <inflate>
 144:	str	w0, [sp, #168]
 148:	ldr	w0, [sp, #168]
 14c:	cmp	w0, #0x0
 150:	b.eq	b8 <uncompress2+0xb8>  // b.none
 154:	ldr	x0, [sp, #16]
 158:	ldr	x1, [x0]
 15c:	ldr	w0, [sp, #64]
 160:	mov	w2, w0
 164:	ldr	x0, [sp, #184]
 168:	add	x0, x2, x0
 16c:	sub	x1, x1, x0
 170:	ldr	x0, [sp, #16]
 174:	str	x1, [x0]
 178:	add	x0, sp, #0x30
 17c:	ldr	x1, [sp, #40]
 180:	cmp	x1, x0
 184:	b.eq	198 <uncompress2+0x198>  // b.none
 188:	ldr	x1, [sp, #96]
 18c:	ldr	x0, [sp, #32]
 190:	str	x1, [x0]
 194:	b	1b8 <uncompress2+0x1b8>
 198:	ldr	x0, [sp, #96]
 19c:	cmp	x0, #0x0
 1a0:	b.eq	1b8 <uncompress2+0x1b8>  // b.none
 1a4:	ldr	w0, [sp, #168]
 1a8:	cmn	w0, #0x5
 1ac:	b.ne	1b8 <uncompress2+0x1b8>  // b.any
 1b0:	mov	x0, #0x1                   	// #1
 1b4:	str	x0, [sp, #176]
 1b8:	add	x0, sp, #0x38
 1bc:	bl	0 <inflateEnd>
 1c0:	ldr	w0, [sp, #168]
 1c4:	cmp	w0, #0x1
 1c8:	b.eq	214 <uncompress2+0x214>  // b.none
 1cc:	ldr	w0, [sp, #168]
 1d0:	cmp	w0, #0x2
 1d4:	b.eq	20c <uncompress2+0x20c>  // b.none
 1d8:	ldr	w0, [sp, #168]
 1dc:	cmn	w0, #0x5
 1e0:	b.ne	1fc <uncompress2+0x1fc>  // b.any
 1e4:	ldr	w0, [sp, #88]
 1e8:	mov	w1, w0
 1ec:	ldr	x0, [sp, #176]
 1f0:	add	x0, x1, x0
 1f4:	cmp	x0, #0x0
 1f8:	b.ne	204 <uncompress2+0x204>  // b.any
 1fc:	ldr	w0, [sp, #168]
 200:	b	218 <uncompress2+0x218>
 204:	mov	w0, #0xfffffffd            	// #-3
 208:	b	218 <uncompress2+0x218>
 20c:	mov	w0, #0xfffffffd            	// #-3
 210:	b	218 <uncompress2+0x218>
 214:	mov	w0, #0x0                   	// #0
 218:	ldp	x29, x30, [sp], #192
 21c:	ret

0000000000000220 <uncompress>:
 220:	stp	x29, x30, [sp, #-48]!
 224:	mov	x29, sp
 228:	str	x0, [sp, #40]
 22c:	str	x1, [sp, #32]
 230:	str	x2, [sp, #24]
 234:	str	x3, [sp, #16]
 238:	add	x0, sp, #0x10
 23c:	mov	x3, x0
 240:	ldr	x2, [sp, #24]
 244:	ldr	x1, [sp, #32]
 248:	ldr	x0, [sp, #40]
 24c:	bl	0 <uncompress2>
 250:	ldp	x29, x30, [sp], #48
 254:	ret

gzclose.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gzclose>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	cmp	x0, #0x0
  14:	b.ne	20 <gzclose+0x20>  // b.any
  18:	mov	w0, #0xfffffffe            	// #-2
  1c:	b	54 <gzclose+0x54>
  20:	ldr	x0, [sp, #24]
  24:	str	x0, [sp, #40]
  28:	ldr	x0, [sp, #40]
  2c:	ldr	w1, [x0, #24]
  30:	mov	w0, #0x1c4f                	// #7247
  34:	cmp	w1, w0
  38:	b.ne	48 <gzclose+0x48>  // b.any
  3c:	ldr	x0, [sp, #24]
  40:	bl	0 <gzclose_r>
  44:	b	50 <gzclose+0x50>
  48:	ldr	x0, [sp, #24]
  4c:	bl	0 <gzclose_w>
  50:	nop
  54:	ldp	x29, x30, [sp], #48
  58:	ret

gzlib.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gz_reset>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	str	wzr, [x0]
  14:	ldr	x0, [sp, #24]
  18:	ldr	w1, [x0, #24]
  1c:	mov	w0, #0x1c4f                	// #7247
  20:	cmp	w1, w0
  24:	b.ne	40 <gz_reset+0x40>  // b.any
  28:	ldr	x0, [sp, #24]
  2c:	str	wzr, [x0, #80]
  30:	ldr	x0, [sp, #24]
  34:	str	wzr, [x0, #84]
  38:	ldr	x0, [sp, #24]
  3c:	str	wzr, [x0, #68]
  40:	ldr	x0, [sp, #24]
  44:	str	wzr, [x0, #104]
  48:	mov	x2, #0x0                   	// #0
  4c:	mov	w1, #0x0                   	// #0
  50:	ldr	x0, [sp, #24]
  54:	bl	db8 <gz_error>
  58:	ldr	x0, [sp, #24]
  5c:	str	xzr, [x0, #16]
  60:	ldr	x0, [sp, #24]
  64:	str	wzr, [x0, #128]
  68:	nop
  6c:	ldp	x29, x30, [sp], #32
  70:	ret

0000000000000074 <gz_open>:
  74:	stp	x29, x30, [sp, #-80]!
  78:	mov	x29, sp
  7c:	str	x0, [sp, #40]
  80:	str	w1, [sp, #36]
  84:	str	x2, [sp, #24]
  88:	str	wzr, [sp, #76]
  8c:	str	wzr, [sp, #72]
  90:	ldr	x0, [sp, #40]
  94:	cmp	x0, #0x0
  98:	b.ne	a4 <gz_open+0x30>  // b.any
  9c:	mov	x0, #0x0                   	// #0
  a0:	b	4e4 <gz_open+0x470>
  a4:	mov	x0, #0xe8                  	// #232
  a8:	bl	0 <malloc>
  ac:	str	x0, [sp, #64]
  b0:	ldr	x0, [sp, #64]
  b4:	cmp	x0, #0x0
  b8:	b.ne	c4 <gz_open+0x50>  // b.any
  bc:	mov	x0, #0x0                   	// #0
  c0:	b	4e4 <gz_open+0x470>
  c4:	ldr	x0, [sp, #64]
  c8:	str	wzr, [x0, #40]
  cc:	ldr	x0, [sp, #64]
  d0:	mov	w1, #0x2000                	// #8192
  d4:	str	w1, [x0, #44]
  d8:	ldr	x0, [sp, #64]
  dc:	str	xzr, [x0, #112]
  e0:	ldr	x0, [sp, #64]
  e4:	str	wzr, [x0, #24]
  e8:	ldr	x0, [sp, #64]
  ec:	mov	w1, #0xffffffff            	// #-1
  f0:	str	w1, [x0, #88]
  f4:	ldr	x0, [sp, #64]
  f8:	str	wzr, [x0, #92]
  fc:	ldr	x0, [sp, #64]
 100:	str	wzr, [x0, #64]
 104:	b	2b4 <gz_open+0x240>
 108:	ldr	x0, [sp, #24]
 10c:	ldrb	w0, [x0]
 110:	cmp	w0, #0x2f
 114:	b.ls	140 <gz_open+0xcc>  // b.plast
 118:	ldr	x0, [sp, #24]
 11c:	ldrb	w0, [x0]
 120:	cmp	w0, #0x39
 124:	b.hi	140 <gz_open+0xcc>  // b.pmore
 128:	ldr	x0, [sp, #24]
 12c:	ldrb	w0, [x0]
 130:	sub	w1, w0, #0x30
 134:	ldr	x0, [sp, #64]
 138:	str	w1, [x0, #88]
 13c:	b	2a8 <gz_open+0x234>
 140:	ldr	x0, [sp, #24]
 144:	ldrb	w0, [x0]
 148:	cmp	w0, #0x78
 14c:	b.eq	248 <gz_open+0x1d4>  // b.none
 150:	cmp	w0, #0x78
 154:	b.gt	2a8 <gz_open+0x234>
 158:	cmp	w0, #0x77
 15c:	b.eq	20c <gz_open+0x198>  // b.none
 160:	cmp	w0, #0x77
 164:	b.gt	2a8 <gz_open+0x234>
 168:	cmp	w0, #0x72
 16c:	b.eq	1fc <gz_open+0x188>  // b.none
 170:	cmp	w0, #0x72
 174:	b.gt	2a8 <gz_open+0x234>
 178:	cmp	w0, #0x68
 17c:	b.eq	264 <gz_open+0x1f0>  // b.none
 180:	cmp	w0, #0x68
 184:	b.gt	2a8 <gz_open+0x234>
 188:	cmp	w0, #0x66
 18c:	b.eq	254 <gz_open+0x1e0>  // b.none
 190:	cmp	w0, #0x66
 194:	b.gt	2a8 <gz_open+0x234>
 198:	cmp	w0, #0x65
 19c:	b.eq	23c <gz_open+0x1c8>  // b.none
 1a0:	cmp	w0, #0x65
 1a4:	b.gt	2a8 <gz_open+0x234>
 1a8:	cmp	w0, #0x62
 1ac:	b.eq	2a4 <gz_open+0x230>  // b.none
 1b0:	cmp	w0, #0x62
 1b4:	b.gt	2a8 <gz_open+0x234>
 1b8:	cmp	w0, #0x61
 1bc:	b.eq	21c <gz_open+0x1a8>  // b.none
 1c0:	cmp	w0, #0x61
 1c4:	b.gt	2a8 <gz_open+0x234>
 1c8:	cmp	w0, #0x54
 1cc:	b.eq	294 <gz_open+0x220>  // b.none
 1d0:	cmp	w0, #0x54
 1d4:	b.gt	2a8 <gz_open+0x234>
 1d8:	cmp	w0, #0x52
 1dc:	b.eq	274 <gz_open+0x200>  // b.none
 1e0:	cmp	w0, #0x52
 1e4:	b.gt	2a8 <gz_open+0x234>
 1e8:	cmp	w0, #0x2b
 1ec:	b.eq	22c <gz_open+0x1b8>  // b.none
 1f0:	cmp	w0, #0x46
 1f4:	b.eq	284 <gz_open+0x210>  // b.none
 1f8:	b	2a8 <gz_open+0x234>
 1fc:	ldr	x0, [sp, #64]
 200:	mov	w1, #0x1c4f                	// #7247
 204:	str	w1, [x0, #24]
 208:	b	2a8 <gz_open+0x234>
 20c:	ldr	x0, [sp, #64]
 210:	mov	w1, #0x79b1                	// #31153
 214:	str	w1, [x0, #24]
 218:	b	2a8 <gz_open+0x234>
 21c:	ldr	x0, [sp, #64]
 220:	mov	w1, #0x1                   	// #1
 224:	str	w1, [x0, #24]
 228:	b	2a8 <gz_open+0x234>
 22c:	ldr	x0, [sp, #64]
 230:	bl	0 <free>
 234:	mov	x0, #0x0                   	// #0
 238:	b	4e4 <gz_open+0x470>
 23c:	mov	w0, #0x1                   	// #1
 240:	str	w0, [sp, #76]
 244:	b	2a8 <gz_open+0x234>
 248:	mov	w0, #0x1                   	// #1
 24c:	str	w0, [sp, #72]
 250:	b	2a8 <gz_open+0x234>
 254:	ldr	x0, [sp, #64]
 258:	mov	w1, #0x1                   	// #1
 25c:	str	w1, [x0, #92]
 260:	b	2a8 <gz_open+0x234>
 264:	ldr	x0, [sp, #64]
 268:	mov	w1, #0x2                   	// #2
 26c:	str	w1, [x0, #92]
 270:	b	2a8 <gz_open+0x234>
 274:	ldr	x0, [sp, #64]
 278:	mov	w1, #0x3                   	// #3
 27c:	str	w1, [x0, #92]
 280:	b	2a8 <gz_open+0x234>
 284:	ldr	x0, [sp, #64]
 288:	mov	w1, #0x4                   	// #4
 28c:	str	w1, [x0, #92]
 290:	b	2a8 <gz_open+0x234>
 294:	ldr	x0, [sp, #64]
 298:	mov	w1, #0x1                   	// #1
 29c:	str	w1, [x0, #64]
 2a0:	b	2a8 <gz_open+0x234>
 2a4:	nop
 2a8:	ldr	x0, [sp, #24]
 2ac:	add	x0, x0, #0x1
 2b0:	str	x0, [sp, #24]
 2b4:	ldr	x0, [sp, #24]
 2b8:	ldrb	w0, [x0]
 2bc:	cmp	w0, #0x0
 2c0:	b.ne	108 <gz_open+0x94>  // b.any
 2c4:	ldr	x0, [sp, #64]
 2c8:	ldr	w0, [x0, #24]
 2cc:	cmp	w0, #0x0
 2d0:	b.ne	2e4 <gz_open+0x270>  // b.any
 2d4:	ldr	x0, [sp, #64]
 2d8:	bl	0 <free>
 2dc:	mov	x0, #0x0                   	// #0
 2e0:	b	4e4 <gz_open+0x470>
 2e4:	ldr	x0, [sp, #64]
 2e8:	ldr	w1, [x0, #24]
 2ec:	mov	w0, #0x1c4f                	// #7247
 2f0:	cmp	w1, w0
 2f4:	b.ne	324 <gz_open+0x2b0>  // b.any
 2f8:	ldr	x0, [sp, #64]
 2fc:	ldr	w0, [x0, #64]
 300:	cmp	w0, #0x0
 304:	b.eq	318 <gz_open+0x2a4>  // b.none
 308:	ldr	x0, [sp, #64]
 30c:	bl	0 <free>
 310:	mov	x0, #0x0                   	// #0
 314:	b	4e4 <gz_open+0x470>
 318:	ldr	x0, [sp, #64]
 31c:	mov	w1, #0x1                   	// #1
 320:	str	w1, [x0, #64]
 324:	ldr	x0, [sp, #40]
 328:	bl	0 <strlen>
 32c:	str	x0, [sp, #56]
 330:	ldr	x0, [sp, #56]
 334:	add	x0, x0, #0x1
 338:	bl	0 <malloc>
 33c:	mov	x1, x0
 340:	ldr	x0, [sp, #64]
 344:	str	x1, [x0, #32]
 348:	ldr	x0, [sp, #64]
 34c:	ldr	x0, [x0, #32]
 350:	cmp	x0, #0x0
 354:	b.ne	368 <gz_open+0x2f4>  // b.any
 358:	ldr	x0, [sp, #64]
 35c:	bl	0 <free>
 360:	mov	x0, #0x0                   	// #0
 364:	b	4e4 <gz_open+0x470>
 368:	ldr	x0, [sp, #64]
 36c:	ldr	x4, [x0, #32]
 370:	ldr	x0, [sp, #56]
 374:	add	x1, x0, #0x1
 378:	ldr	x3, [sp, #40]
 37c:	adrp	x0, 0 <gz_reset>
 380:	add	x2, x0, #0x0
 384:	mov	x0, x4
 388:	bl	0 <snprintf>
 38c:	ldr	w0, [sp, #76]
 390:	cmp	w0, #0x0
 394:	b.eq	3a0 <gz_open+0x32c>  // b.none
 398:	mov	w2, #0x80000               	// #524288
 39c:	b	3a4 <gz_open+0x330>
 3a0:	mov	w2, #0x0                   	// #0
 3a4:	ldr	x0, [sp, #64]
 3a8:	ldr	w1, [x0, #24]
 3ac:	mov	w0, #0x1c4f                	// #7247
 3b0:	cmp	w1, w0
 3b4:	b.eq	3f8 <gz_open+0x384>  // b.none
 3b8:	ldr	w0, [sp, #72]
 3bc:	cmp	w0, #0x0
 3c0:	b.eq	3cc <gz_open+0x358>  // b.none
 3c4:	mov	w1, #0xc1                  	// #193
 3c8:	b	3d0 <gz_open+0x35c>
 3cc:	mov	w1, #0x41                  	// #65
 3d0:	ldr	x0, [sp, #64]
 3d4:	ldr	w3, [x0, #24]
 3d8:	mov	w0, #0x79b1                	// #31153
 3dc:	cmp	w3, w0
 3e0:	b.ne	3ec <gz_open+0x378>  // b.any
 3e4:	mov	w0, #0x200                 	// #512
 3e8:	b	3f0 <gz_open+0x37c>
 3ec:	mov	w0, #0x400                 	// #1024
 3f0:	orr	w0, w1, w0
 3f4:	b	3fc <gz_open+0x388>
 3f8:	mov	w0, #0x0                   	// #0
 3fc:	orr	w0, w2, w0
 400:	str	w0, [sp, #52]
 404:	ldr	w0, [sp, #36]
 408:	cmp	w0, #0x0
 40c:	b.ge	424 <gz_open+0x3b0>  // b.tcont
 410:	mov	w2, #0x1b6                 	// #438
 414:	ldr	w1, [sp, #52]
 418:	ldr	x0, [sp, #40]
 41c:	bl	0 <open>
 420:	b	428 <gz_open+0x3b4>
 424:	ldr	w0, [sp, #36]
 428:	ldr	x1, [sp, #64]
 42c:	str	w0, [x1, #28]
 430:	ldr	x0, [sp, #64]
 434:	ldr	w0, [x0, #28]
 438:	cmn	w0, #0x1
 43c:	b.ne	45c <gz_open+0x3e8>  // b.any
 440:	ldr	x0, [sp, #64]
 444:	ldr	x0, [x0, #32]
 448:	bl	0 <free>
 44c:	ldr	x0, [sp, #64]
 450:	bl	0 <free>
 454:	mov	x0, #0x0                   	// #0
 458:	b	4e4 <gz_open+0x470>
 45c:	ldr	x0, [sp, #64]
 460:	ldr	w0, [x0, #24]
 464:	cmp	w0, #0x1
 468:	b.ne	48c <gz_open+0x418>  // b.any
 46c:	ldr	x0, [sp, #64]
 470:	ldr	w0, [x0, #28]
 474:	mov	w2, #0x2                   	// #2
 478:	mov	x1, #0x0                   	// #0
 47c:	bl	0 <lseek64>
 480:	ldr	x0, [sp, #64]
 484:	mov	w1, #0x79b1                	// #31153
 488:	str	w1, [x0, #24]
 48c:	ldr	x0, [sp, #64]
 490:	ldr	w1, [x0, #24]
 494:	mov	w0, #0x1c4f                	// #7247
 498:	cmp	w1, w0
 49c:	b.ne	4d8 <gz_open+0x464>  // b.any
 4a0:	ldr	x0, [sp, #64]
 4a4:	ldr	w0, [x0, #28]
 4a8:	mov	w2, #0x1                   	// #1
 4ac:	mov	x1, #0x0                   	// #0
 4b0:	bl	0 <lseek64>
 4b4:	mov	x1, x0
 4b8:	ldr	x0, [sp, #64]
 4bc:	str	x1, [x0, #72]
 4c0:	ldr	x0, [sp, #64]
 4c4:	ldr	x0, [x0, #72]
 4c8:	cmn	x0, #0x1
 4cc:	b.ne	4d8 <gz_open+0x464>  // b.any
 4d0:	ldr	x0, [sp, #64]
 4d4:	str	xzr, [x0, #72]
 4d8:	ldr	x0, [sp, #64]
 4dc:	bl	0 <gz_reset>
 4e0:	ldr	x0, [sp, #64]
 4e4:	ldp	x29, x30, [sp], #80
 4e8:	ret

00000000000004ec <gzopen>:
 4ec:	stp	x29, x30, [sp, #-32]!
 4f0:	mov	x29, sp
 4f4:	str	x0, [sp, #24]
 4f8:	str	x1, [sp, #16]
 4fc:	ldr	x2, [sp, #16]
 500:	mov	w1, #0xffffffff            	// #-1
 504:	ldr	x0, [sp, #24]
 508:	bl	74 <gz_open>
 50c:	ldp	x29, x30, [sp], #32
 510:	ret

0000000000000514 <gzopen64>:
 514:	stp	x29, x30, [sp, #-32]!
 518:	mov	x29, sp
 51c:	str	x0, [sp, #24]
 520:	str	x1, [sp, #16]
 524:	ldr	x2, [sp, #16]
 528:	mov	w1, #0xffffffff            	// #-1
 52c:	ldr	x0, [sp, #24]
 530:	bl	74 <gz_open>
 534:	ldp	x29, x30, [sp], #32
 538:	ret

000000000000053c <gzdopen>:
 53c:	stp	x29, x30, [sp, #-48]!
 540:	mov	x29, sp
 544:	str	w0, [sp, #28]
 548:	str	x1, [sp, #16]
 54c:	ldr	w0, [sp, #28]
 550:	cmn	w0, #0x1
 554:	b.eq	570 <gzdopen+0x34>  // b.none
 558:	mov	x0, #0x13                  	// #19
 55c:	bl	0 <malloc>
 560:	str	x0, [sp, #40]
 564:	ldr	x0, [sp, #40]
 568:	cmp	x0, #0x0
 56c:	b.ne	578 <gzdopen+0x3c>  // b.any
 570:	mov	x0, #0x0                   	// #0
 574:	b	5b0 <gzdopen+0x74>
 578:	ldr	w3, [sp, #28]
 57c:	adrp	x0, 0 <gz_reset>
 580:	add	x2, x0, #0x0
 584:	mov	x1, #0x13                  	// #19
 588:	ldr	x0, [sp, #40]
 58c:	bl	0 <snprintf>
 590:	ldr	x2, [sp, #16]
 594:	ldr	w1, [sp, #28]
 598:	ldr	x0, [sp, #40]
 59c:	bl	74 <gz_open>
 5a0:	str	x0, [sp, #32]
 5a4:	ldr	x0, [sp, #40]
 5a8:	bl	0 <free>
 5ac:	ldr	x0, [sp, #32]
 5b0:	ldp	x29, x30, [sp], #48
 5b4:	ret

00000000000005b8 <gzbuffer>:
 5b8:	sub	sp, sp, #0x20
 5bc:	str	x0, [sp, #8]
 5c0:	str	w1, [sp, #4]
 5c4:	ldr	x0, [sp, #8]
 5c8:	cmp	x0, #0x0
 5cc:	b.ne	5d8 <gzbuffer+0x20>  // b.any
 5d0:	mov	w0, #0xffffffff            	// #-1
 5d4:	b	668 <gzbuffer+0xb0>
 5d8:	ldr	x0, [sp, #8]
 5dc:	str	x0, [sp, #24]
 5e0:	ldr	x0, [sp, #24]
 5e4:	ldr	w1, [x0, #24]
 5e8:	mov	w0, #0x1c4f                	// #7247
 5ec:	cmp	w1, w0
 5f0:	b.eq	610 <gzbuffer+0x58>  // b.none
 5f4:	ldr	x0, [sp, #24]
 5f8:	ldr	w1, [x0, #24]
 5fc:	mov	w0, #0x79b1                	// #31153
 600:	cmp	w1, w0
 604:	b.eq	610 <gzbuffer+0x58>  // b.none
 608:	mov	w0, #0xffffffff            	// #-1
 60c:	b	668 <gzbuffer+0xb0>
 610:	ldr	x0, [sp, #24]
 614:	ldr	w0, [x0, #40]
 618:	cmp	w0, #0x0
 61c:	b.eq	628 <gzbuffer+0x70>  // b.none
 620:	mov	w0, #0xffffffff            	// #-1
 624:	b	668 <gzbuffer+0xb0>
 628:	ldr	w0, [sp, #4]
 62c:	lsl	w0, w0, #1
 630:	ldr	w1, [sp, #4]
 634:	cmp	w1, w0
 638:	b.ls	644 <gzbuffer+0x8c>  // b.plast
 63c:	mov	w0, #0xffffffff            	// #-1
 640:	b	668 <gzbuffer+0xb0>
 644:	ldr	w0, [sp, #4]
 648:	cmp	w0, #0x1
 64c:	b.hi	658 <gzbuffer+0xa0>  // b.pmore
 650:	mov	w0, #0x2                   	// #2
 654:	str	w0, [sp, #4]
 658:	ldr	x0, [sp, #24]
 65c:	ldr	w1, [sp, #4]
 660:	str	w1, [x0, #44]
 664:	mov	w0, #0x0                   	// #0
 668:	add	sp, sp, #0x20
 66c:	ret

0000000000000670 <gzrewind>:
 670:	stp	x29, x30, [sp, #-48]!
 674:	mov	x29, sp
 678:	str	x0, [sp, #24]
 67c:	ldr	x0, [sp, #24]
 680:	cmp	x0, #0x0
 684:	b.ne	690 <gzrewind+0x20>  // b.any
 688:	mov	w0, #0xffffffff            	// #-1
 68c:	b	710 <gzrewind+0xa0>
 690:	ldr	x0, [sp, #24]
 694:	str	x0, [sp, #40]
 698:	ldr	x0, [sp, #40]
 69c:	ldr	w1, [x0, #24]
 6a0:	mov	w0, #0x1c4f                	// #7247
 6a4:	cmp	w1, w0
 6a8:	b.ne	6cc <gzrewind+0x5c>  // b.any
 6ac:	ldr	x0, [sp, #40]
 6b0:	ldr	w0, [x0, #108]
 6b4:	cmp	w0, #0x0
 6b8:	b.eq	6d4 <gzrewind+0x64>  // b.none
 6bc:	ldr	x0, [sp, #40]
 6c0:	ldr	w0, [x0, #108]
 6c4:	cmn	w0, #0x5
 6c8:	b.eq	6d4 <gzrewind+0x64>  // b.none
 6cc:	mov	w0, #0xffffffff            	// #-1
 6d0:	b	710 <gzrewind+0xa0>
 6d4:	ldr	x0, [sp, #40]
 6d8:	ldr	w3, [x0, #28]
 6dc:	ldr	x0, [sp, #40]
 6e0:	ldr	x0, [x0, #72]
 6e4:	mov	w2, #0x0                   	// #0
 6e8:	mov	x1, x0
 6ec:	mov	w0, w3
 6f0:	bl	0 <lseek64>
 6f4:	cmn	x0, #0x1
 6f8:	b.ne	704 <gzrewind+0x94>  // b.any
 6fc:	mov	w0, #0xffffffff            	// #-1
 700:	b	710 <gzrewind+0xa0>
 704:	ldr	x0, [sp, #40]
 708:	bl	0 <gz_reset>
 70c:	mov	w0, #0x0                   	// #0
 710:	ldp	x29, x30, [sp], #48
 714:	ret

0000000000000718 <gzseek64>:
 718:	stp	x29, x30, [sp, #-80]!
 71c:	mov	x29, sp
 720:	str	x0, [sp, #40]
 724:	str	x1, [sp, #32]
 728:	str	w2, [sp, #28]
 72c:	ldr	x0, [sp, #40]
 730:	cmp	x0, #0x0
 734:	b.ne	740 <gzseek64+0x28>  // b.any
 738:	mov	x0, #0xffffffffffffffff    	// #-1
 73c:	b	a20 <gzseek64+0x308>
 740:	ldr	x0, [sp, #40]
 744:	str	x0, [sp, #72]
 748:	ldr	x0, [sp, #72]
 74c:	ldr	w1, [x0, #24]
 750:	mov	w0, #0x1c4f                	// #7247
 754:	cmp	w1, w0
 758:	b.eq	778 <gzseek64+0x60>  // b.none
 75c:	ldr	x0, [sp, #72]
 760:	ldr	w1, [x0, #24]
 764:	mov	w0, #0x79b1                	// #31153
 768:	cmp	w1, w0
 76c:	b.eq	778 <gzseek64+0x60>  // b.none
 770:	mov	x0, #0xffffffffffffffff    	// #-1
 774:	b	a20 <gzseek64+0x308>
 778:	ldr	x0, [sp, #72]
 77c:	ldr	w0, [x0, #108]
 780:	cmp	w0, #0x0
 784:	b.eq	7a0 <gzseek64+0x88>  // b.none
 788:	ldr	x0, [sp, #72]
 78c:	ldr	w0, [x0, #108]
 790:	cmn	w0, #0x5
 794:	b.eq	7a0 <gzseek64+0x88>  // b.none
 798:	mov	x0, #0xffffffffffffffff    	// #-1
 79c:	b	a20 <gzseek64+0x308>
 7a0:	ldr	w0, [sp, #28]
 7a4:	cmp	w0, #0x0
 7a8:	b.eq	7c0 <gzseek64+0xa8>  // b.none
 7ac:	ldr	w0, [sp, #28]
 7b0:	cmp	w0, #0x1
 7b4:	b.eq	7c0 <gzseek64+0xa8>  // b.none
 7b8:	mov	x0, #0xffffffffffffffff    	// #-1
 7bc:	b	a20 <gzseek64+0x308>
 7c0:	ldr	w0, [sp, #28]
 7c4:	cmp	w0, #0x0
 7c8:	b.ne	7e4 <gzseek64+0xcc>  // b.any
 7cc:	ldr	x0, [sp, #72]
 7d0:	ldr	x0, [x0, #16]
 7d4:	ldr	x1, [sp, #32]
 7d8:	sub	x0, x1, x0
 7dc:	str	x0, [sp, #32]
 7e0:	b	808 <gzseek64+0xf0>
 7e4:	ldr	x0, [sp, #72]
 7e8:	ldr	w0, [x0, #104]
 7ec:	cmp	w0, #0x0
 7f0:	b.eq	808 <gzseek64+0xf0>  // b.none
 7f4:	ldr	x0, [sp, #72]
 7f8:	ldr	x0, [x0, #96]
 7fc:	ldr	x1, [sp, #32]
 800:	add	x0, x1, x0
 804:	str	x0, [sp, #32]
 808:	ldr	x0, [sp, #72]
 80c:	str	wzr, [x0, #104]
 810:	ldr	x0, [sp, #72]
 814:	ldr	w1, [x0, #24]
 818:	mov	w0, #0x1c4f                	// #7247
 81c:	cmp	w1, w0
 820:	b.ne	8ec <gzseek64+0x1d4>  // b.any
 824:	ldr	x0, [sp, #72]
 828:	ldr	w0, [x0, #68]
 82c:	cmp	w0, #0x1
 830:	b.ne	8ec <gzseek64+0x1d4>  // b.any
 834:	ldr	x0, [sp, #72]
 838:	ldr	x1, [x0, #16]
 83c:	ldr	x0, [sp, #32]
 840:	add	x0, x1, x0
 844:	cmp	x0, #0x0
 848:	b.lt	8ec <gzseek64+0x1d4>  // b.tstop
 84c:	ldr	x0, [sp, #72]
 850:	ldr	w3, [x0, #28]
 854:	ldr	x0, [sp, #72]
 858:	ldr	w0, [x0]
 85c:	mov	w0, w0
 860:	ldr	x1, [sp, #32]
 864:	sub	x0, x1, x0
 868:	mov	w2, #0x1                   	// #1
 86c:	mov	x1, x0
 870:	mov	w0, w3
 874:	bl	0 <lseek64>
 878:	str	x0, [sp, #64]
 87c:	ldr	x0, [sp, #64]
 880:	cmn	x0, #0x1
 884:	b.ne	890 <gzseek64+0x178>  // b.any
 888:	mov	x0, #0xffffffffffffffff    	// #-1
 88c:	b	a20 <gzseek64+0x308>
 890:	ldr	x0, [sp, #72]
 894:	str	wzr, [x0]
 898:	ldr	x0, [sp, #72]
 89c:	str	wzr, [x0, #80]
 8a0:	ldr	x0, [sp, #72]
 8a4:	str	wzr, [x0, #84]
 8a8:	ldr	x0, [sp, #72]
 8ac:	str	wzr, [x0, #104]
 8b0:	mov	x2, #0x0                   	// #0
 8b4:	mov	w1, #0x0                   	// #0
 8b8:	ldr	x0, [sp, #72]
 8bc:	bl	db8 <gz_error>
 8c0:	ldr	x0, [sp, #72]
 8c4:	str	wzr, [x0, #128]
 8c8:	ldr	x0, [sp, #72]
 8cc:	ldr	x1, [x0, #16]
 8d0:	ldr	x0, [sp, #32]
 8d4:	add	x1, x1, x0
 8d8:	ldr	x0, [sp, #72]
 8dc:	str	x1, [x0, #16]
 8e0:	ldr	x0, [sp, #72]
 8e4:	ldr	x0, [x0, #16]
 8e8:	b	a20 <gzseek64+0x308>
 8ec:	ldr	x0, [sp, #32]
 8f0:	cmp	x0, #0x0
 8f4:	b.ge	954 <gzseek64+0x23c>  // b.tcont
 8f8:	ldr	x0, [sp, #72]
 8fc:	ldr	w1, [x0, #24]
 900:	mov	w0, #0x1c4f                	// #7247
 904:	cmp	w1, w0
 908:	b.eq	914 <gzseek64+0x1fc>  // b.none
 90c:	mov	x0, #0xffffffffffffffff    	// #-1
 910:	b	a20 <gzseek64+0x308>
 914:	ldr	x0, [sp, #72]
 918:	ldr	x0, [x0, #16]
 91c:	ldr	x1, [sp, #32]
 920:	add	x0, x1, x0
 924:	str	x0, [sp, #32]
 928:	ldr	x0, [sp, #32]
 92c:	cmp	x0, #0x0
 930:	b.ge	93c <gzseek64+0x224>  // b.tcont
 934:	mov	x0, #0xffffffffffffffff    	// #-1
 938:	b	a20 <gzseek64+0x308>
 93c:	ldr	x0, [sp, #40]
 940:	bl	670 <gzrewind>
 944:	cmn	w0, #0x1
 948:	b.ne	954 <gzseek64+0x23c>  // b.any
 94c:	mov	x0, #0xffffffffffffffff    	// #-1
 950:	b	a20 <gzseek64+0x308>
 954:	ldr	x0, [sp, #72]
 958:	ldr	w1, [x0, #24]
 95c:	mov	w0, #0x1c4f                	// #7247
 960:	cmp	w1, w0
 964:	b.ne	9ec <gzseek64+0x2d4>  // b.any
 968:	ldr	x0, [sp, #72]
 96c:	ldr	w0, [x0]
 970:	mov	w0, w0
 974:	ldr	x1, [sp, #32]
 978:	cmp	x1, x0
 97c:	b.ge	988 <gzseek64+0x270>  // b.tcont
 980:	ldr	x0, [sp, #32]
 984:	b	990 <gzseek64+0x278>
 988:	ldr	x0, [sp, #72]
 98c:	ldr	w0, [x0]
 990:	str	w0, [sp, #60]
 994:	ldr	x0, [sp, #72]
 998:	ldr	w1, [x0]
 99c:	ldr	w0, [sp, #60]
 9a0:	sub	w1, w1, w0
 9a4:	ldr	x0, [sp, #72]
 9a8:	str	w1, [x0]
 9ac:	ldr	x0, [sp, #72]
 9b0:	ldr	x1, [x0, #8]
 9b4:	ldr	w0, [sp, #60]
 9b8:	add	x1, x1, x0
 9bc:	ldr	x0, [sp, #72]
 9c0:	str	x1, [x0, #8]
 9c4:	ldr	x0, [sp, #72]
 9c8:	ldr	x1, [x0, #16]
 9cc:	ldr	w0, [sp, #60]
 9d0:	add	x1, x1, x0
 9d4:	ldr	x0, [sp, #72]
 9d8:	str	x1, [x0, #16]
 9dc:	ldr	w0, [sp, #60]
 9e0:	ldr	x1, [sp, #32]
 9e4:	sub	x0, x1, x0
 9e8:	str	x0, [sp, #32]
 9ec:	ldr	x0, [sp, #32]
 9f0:	cmp	x0, #0x0
 9f4:	b.eq	a10 <gzseek64+0x2f8>  // b.none
 9f8:	ldr	x0, [sp, #72]
 9fc:	mov	w1, #0x1                   	// #1
 a00:	str	w1, [x0, #104]
 a04:	ldr	x0, [sp, #72]
 a08:	ldr	x1, [sp, #32]
 a0c:	str	x1, [x0, #96]
 a10:	ldr	x0, [sp, #72]
 a14:	ldr	x1, [x0, #16]
 a18:	ldr	x0, [sp, #32]
 a1c:	add	x0, x1, x0
 a20:	ldp	x29, x30, [sp], #80
 a24:	ret

0000000000000a28 <gzseek>:
 a28:	stp	x29, x30, [sp, #-64]!
 a2c:	mov	x29, sp
 a30:	str	x0, [sp, #40]
 a34:	str	x1, [sp, #32]
 a38:	str	w2, [sp, #28]
 a3c:	ldr	w2, [sp, #28]
 a40:	ldr	x1, [sp, #32]
 a44:	ldr	x0, [sp, #40]
 a48:	bl	718 <gzseek64>
 a4c:	str	x0, [sp, #56]
 a50:	ldr	x0, [sp, #56]
 a54:	ldp	x29, x30, [sp], #64
 a58:	ret

0000000000000a5c <gztell64>:
 a5c:	sub	sp, sp, #0x20
 a60:	str	x0, [sp, #8]
 a64:	ldr	x0, [sp, #8]
 a68:	cmp	x0, #0x0
 a6c:	b.ne	a78 <gztell64+0x1c>  // b.any
 a70:	mov	x0, #0xffffffffffffffff    	// #-1
 a74:	b	adc <gztell64+0x80>
 a78:	ldr	x0, [sp, #8]
 a7c:	str	x0, [sp, #24]
 a80:	ldr	x0, [sp, #24]
 a84:	ldr	w1, [x0, #24]
 a88:	mov	w0, #0x1c4f                	// #7247
 a8c:	cmp	w1, w0
 a90:	b.eq	ab0 <gztell64+0x54>  // b.none
 a94:	ldr	x0, [sp, #24]
 a98:	ldr	w1, [x0, #24]
 a9c:	mov	w0, #0x79b1                	// #31153
 aa0:	cmp	w1, w0
 aa4:	b.eq	ab0 <gztell64+0x54>  // b.none
 aa8:	mov	x0, #0xffffffffffffffff    	// #-1
 aac:	b	adc <gztell64+0x80>
 ab0:	ldr	x0, [sp, #24]
 ab4:	ldr	x1, [x0, #16]
 ab8:	ldr	x0, [sp, #24]
 abc:	ldr	w0, [x0, #104]
 ac0:	cmp	w0, #0x0
 ac4:	b.eq	ad4 <gztell64+0x78>  // b.none
 ac8:	ldr	x0, [sp, #24]
 acc:	ldr	x0, [x0, #96]
 ad0:	b	ad8 <gztell64+0x7c>
 ad4:	mov	x0, #0x0                   	// #0
 ad8:	add	x0, x0, x1
 adc:	add	sp, sp, #0x20
 ae0:	ret

0000000000000ae4 <gztell>:
 ae4:	stp	x29, x30, [sp, #-48]!
 ae8:	mov	x29, sp
 aec:	str	x0, [sp, #24]
 af0:	ldr	x0, [sp, #24]
 af4:	bl	a5c <gztell64>
 af8:	str	x0, [sp, #40]
 afc:	ldr	x0, [sp, #40]
 b00:	ldp	x29, x30, [sp], #48
 b04:	ret

0000000000000b08 <gzoffset64>:
 b08:	stp	x29, x30, [sp, #-48]!
 b0c:	mov	x29, sp
 b10:	str	x0, [sp, #24]
 b14:	ldr	x0, [sp, #24]
 b18:	cmp	x0, #0x0
 b1c:	b.ne	b28 <gzoffset64+0x20>  // b.any
 b20:	mov	x0, #0xffffffffffffffff    	// #-1
 b24:	b	bbc <gzoffset64+0xb4>
 b28:	ldr	x0, [sp, #24]
 b2c:	str	x0, [sp, #32]
 b30:	ldr	x0, [sp, #32]
 b34:	ldr	w1, [x0, #24]
 b38:	mov	w0, #0x1c4f                	// #7247
 b3c:	cmp	w1, w0
 b40:	b.eq	b60 <gzoffset64+0x58>  // b.none
 b44:	ldr	x0, [sp, #32]
 b48:	ldr	w1, [x0, #24]
 b4c:	mov	w0, #0x79b1                	// #31153
 b50:	cmp	w1, w0
 b54:	b.eq	b60 <gzoffset64+0x58>  // b.none
 b58:	mov	x0, #0xffffffffffffffff    	// #-1
 b5c:	b	bbc <gzoffset64+0xb4>
 b60:	ldr	x0, [sp, #32]
 b64:	ldr	w0, [x0, #28]
 b68:	mov	w2, #0x1                   	// #1
 b6c:	mov	x1, #0x0                   	// #0
 b70:	bl	0 <lseek64>
 b74:	str	x0, [sp, #40]
 b78:	ldr	x0, [sp, #40]
 b7c:	cmn	x0, #0x1
 b80:	b.ne	b8c <gzoffset64+0x84>  // b.any
 b84:	mov	x0, #0xffffffffffffffff    	// #-1
 b88:	b	bbc <gzoffset64+0xb4>
 b8c:	ldr	x0, [sp, #32]
 b90:	ldr	w1, [x0, #24]
 b94:	mov	w0, #0x1c4f                	// #7247
 b98:	cmp	w1, w0
 b9c:	b.ne	bb8 <gzoffset64+0xb0>  // b.any
 ba0:	ldr	x0, [sp, #32]
 ba4:	ldr	w0, [x0, #128]
 ba8:	mov	w0, w0
 bac:	ldr	x1, [sp, #40]
 bb0:	sub	x0, x1, x0
 bb4:	str	x0, [sp, #40]
 bb8:	ldr	x0, [sp, #40]
 bbc:	ldp	x29, x30, [sp], #48
 bc0:	ret

0000000000000bc4 <gzoffset>:
 bc4:	stp	x29, x30, [sp, #-48]!
 bc8:	mov	x29, sp
 bcc:	str	x0, [sp, #24]
 bd0:	ldr	x0, [sp, #24]
 bd4:	bl	b08 <gzoffset64>
 bd8:	str	x0, [sp, #40]
 bdc:	ldr	x0, [sp, #40]
 be0:	ldp	x29, x30, [sp], #48
 be4:	ret

0000000000000be8 <gzeof>:
 be8:	sub	sp, sp, #0x20
 bec:	str	x0, [sp, #8]
 bf0:	ldr	x0, [sp, #8]
 bf4:	cmp	x0, #0x0
 bf8:	b.ne	c04 <gzeof+0x1c>  // b.any
 bfc:	mov	w0, #0x0                   	// #0
 c00:	b	c60 <gzeof+0x78>
 c04:	ldr	x0, [sp, #8]
 c08:	str	x0, [sp, #24]
 c0c:	ldr	x0, [sp, #24]
 c10:	ldr	w1, [x0, #24]
 c14:	mov	w0, #0x1c4f                	// #7247
 c18:	cmp	w1, w0
 c1c:	b.eq	c3c <gzeof+0x54>  // b.none
 c20:	ldr	x0, [sp, #24]
 c24:	ldr	w1, [x0, #24]
 c28:	mov	w0, #0x79b1                	// #31153
 c2c:	cmp	w1, w0
 c30:	b.eq	c3c <gzeof+0x54>  // b.none
 c34:	mov	w0, #0x0                   	// #0
 c38:	b	c60 <gzeof+0x78>
 c3c:	ldr	x0, [sp, #24]
 c40:	ldr	w1, [x0, #24]
 c44:	mov	w0, #0x1c4f                	// #7247
 c48:	cmp	w1, w0
 c4c:	b.ne	c5c <gzeof+0x74>  // b.any
 c50:	ldr	x0, [sp, #24]
 c54:	ldr	w0, [x0, #84]
 c58:	b	c60 <gzeof+0x78>
 c5c:	mov	w0, #0x0                   	// #0
 c60:	add	sp, sp, #0x20
 c64:	ret

0000000000000c68 <gzerror>:
 c68:	sub	sp, sp, #0x20
 c6c:	str	x0, [sp, #8]
 c70:	str	x1, [sp]
 c74:	ldr	x0, [sp, #8]
 c78:	cmp	x0, #0x0
 c7c:	b.ne	c88 <gzerror+0x20>  // b.any
 c80:	mov	x0, #0x0                   	// #0
 c84:	b	d1c <gzerror+0xb4>
 c88:	ldr	x0, [sp, #8]
 c8c:	str	x0, [sp, #24]
 c90:	ldr	x0, [sp, #24]
 c94:	ldr	w1, [x0, #24]
 c98:	mov	w0, #0x1c4f                	// #7247
 c9c:	cmp	w1, w0
 ca0:	b.eq	cc0 <gzerror+0x58>  // b.none
 ca4:	ldr	x0, [sp, #24]
 ca8:	ldr	w1, [x0, #24]
 cac:	mov	w0, #0x79b1                	// #31153
 cb0:	cmp	w1, w0
 cb4:	b.eq	cc0 <gzerror+0x58>  // b.none
 cb8:	mov	x0, #0x0                   	// #0
 cbc:	b	d1c <gzerror+0xb4>
 cc0:	ldr	x0, [sp]
 cc4:	cmp	x0, #0x0
 cc8:	b.eq	cdc <gzerror+0x74>  // b.none
 ccc:	ldr	x0, [sp, #24]
 cd0:	ldr	w1, [x0, #108]
 cd4:	ldr	x0, [sp]
 cd8:	str	w1, [x0]
 cdc:	ldr	x0, [sp, #24]
 ce0:	ldr	w0, [x0, #108]
 ce4:	cmn	w0, #0x4
 ce8:	b.eq	d14 <gzerror+0xac>  // b.none
 cec:	ldr	x0, [sp, #24]
 cf0:	ldr	x0, [x0, #112]
 cf4:	cmp	x0, #0x0
 cf8:	b.eq	d08 <gzerror+0xa0>  // b.none
 cfc:	ldr	x0, [sp, #24]
 d00:	ldr	x0, [x0, #112]
 d04:	b	d1c <gzerror+0xb4>
 d08:	adrp	x0, 0 <gz_reset>
 d0c:	add	x0, x0, #0x0
 d10:	b	d1c <gzerror+0xb4>
 d14:	adrp	x0, 0 <gz_reset>
 d18:	add	x0, x0, #0x0
 d1c:	add	sp, sp, #0x20
 d20:	ret

0000000000000d24 <gzclearerr>:
 d24:	stp	x29, x30, [sp, #-48]!
 d28:	mov	x29, sp
 d2c:	str	x0, [sp, #24]
 d30:	ldr	x0, [sp, #24]
 d34:	cmp	x0, #0x0
 d38:	b.eq	da4 <gzclearerr+0x80>  // b.none
 d3c:	ldr	x0, [sp, #24]
 d40:	str	x0, [sp, #40]
 d44:	ldr	x0, [sp, #40]
 d48:	ldr	w1, [x0, #24]
 d4c:	mov	w0, #0x1c4f                	// #7247
 d50:	cmp	w1, w0
 d54:	b.eq	d6c <gzclearerr+0x48>  // b.none
 d58:	ldr	x0, [sp, #40]
 d5c:	ldr	w1, [x0, #24]
 d60:	mov	w0, #0x79b1                	// #31153
 d64:	cmp	w1, w0
 d68:	b.ne	dac <gzclearerr+0x88>  // b.any
 d6c:	ldr	x0, [sp, #40]
 d70:	ldr	w1, [x0, #24]
 d74:	mov	w0, #0x1c4f                	// #7247
 d78:	cmp	w1, w0
 d7c:	b.ne	d90 <gzclearerr+0x6c>  // b.any
 d80:	ldr	x0, [sp, #40]
 d84:	str	wzr, [x0, #80]
 d88:	ldr	x0, [sp, #40]
 d8c:	str	wzr, [x0, #84]
 d90:	mov	x2, #0x0                   	// #0
 d94:	mov	w1, #0x0                   	// #0
 d98:	ldr	x0, [sp, #40]
 d9c:	bl	db8 <gz_error>
 da0:	b	db0 <gzclearerr+0x8c>
 da4:	nop
 da8:	b	db0 <gzclearerr+0x8c>
 dac:	nop
 db0:	ldp	x29, x30, [sp], #48
 db4:	ret

0000000000000db8 <gz_error>:
 db8:	stp	x29, x30, [sp, #-64]!
 dbc:	mov	x29, sp
 dc0:	stp	x19, x20, [sp, #16]
 dc4:	str	x0, [sp, #56]
 dc8:	str	w1, [sp, #52]
 dcc:	str	x2, [sp, #40]
 dd0:	ldr	x0, [sp, #56]
 dd4:	ldr	x0, [x0, #112]
 dd8:	cmp	x0, #0x0
 ddc:	b.eq	e04 <gz_error+0x4c>  // b.none
 de0:	ldr	x0, [sp, #56]
 de4:	ldr	w0, [x0, #108]
 de8:	cmn	w0, #0x4
 dec:	b.eq	dfc <gz_error+0x44>  // b.none
 df0:	ldr	x0, [sp, #56]
 df4:	ldr	x0, [x0, #112]
 df8:	bl	0 <free>
 dfc:	ldr	x0, [sp, #56]
 e00:	str	xzr, [x0, #112]
 e04:	ldr	w0, [sp, #52]
 e08:	cmp	w0, #0x0
 e0c:	b.eq	e24 <gz_error+0x6c>  // b.none
 e10:	ldr	w0, [sp, #52]
 e14:	cmn	w0, #0x5
 e18:	b.eq	e24 <gz_error+0x6c>  // b.none
 e1c:	ldr	x0, [sp, #56]
 e20:	str	wzr, [x0]
 e24:	ldr	x0, [sp, #56]
 e28:	ldr	w1, [sp, #52]
 e2c:	str	w1, [x0, #108]
 e30:	ldr	x0, [sp, #40]
 e34:	cmp	x0, #0x0
 e38:	b.eq	eec <gz_error+0x134>  // b.none
 e3c:	ldr	w0, [sp, #52]
 e40:	cmn	w0, #0x4
 e44:	b.eq	ef4 <gz_error+0x13c>  // b.none
 e48:	ldr	x0, [sp, #56]
 e4c:	ldr	x0, [x0, #32]
 e50:	bl	0 <strlen>
 e54:	mov	x19, x0
 e58:	ldr	x0, [sp, #40]
 e5c:	bl	0 <strlen>
 e60:	add	x0, x19, x0
 e64:	add	x0, x0, #0x3
 e68:	bl	0 <malloc>
 e6c:	mov	x1, x0
 e70:	ldr	x0, [sp, #56]
 e74:	str	x1, [x0, #112]
 e78:	ldr	x0, [sp, #56]
 e7c:	ldr	x0, [x0, #112]
 e80:	cmp	x0, #0x0
 e84:	b.ne	e98 <gz_error+0xe0>  // b.any
 e88:	ldr	x0, [sp, #56]
 e8c:	mov	w1, #0xfffffffc            	// #-4
 e90:	str	w1, [x0, #108]
 e94:	b	ef8 <gz_error+0x140>
 e98:	ldr	x0, [sp, #56]
 e9c:	ldr	x19, [x0, #112]
 ea0:	ldr	x0, [sp, #56]
 ea4:	ldr	x0, [x0, #32]
 ea8:	bl	0 <strlen>
 eac:	mov	x20, x0
 eb0:	ldr	x0, [sp, #40]
 eb4:	bl	0 <strlen>
 eb8:	add	x0, x20, x0
 ebc:	add	x1, x0, #0x3
 ec0:	ldr	x0, [sp, #56]
 ec4:	ldr	x2, [x0, #32]
 ec8:	ldr	x5, [sp, #40]
 ecc:	adrp	x0, 0 <gz_reset>
 ed0:	add	x4, x0, #0x0
 ed4:	mov	x3, x2
 ed8:	adrp	x0, 0 <gz_reset>
 edc:	add	x2, x0, #0x0
 ee0:	mov	x0, x19
 ee4:	bl	0 <snprintf>
 ee8:	b	ef8 <gz_error+0x140>
 eec:	nop
 ef0:	b	ef8 <gz_error+0x140>
 ef4:	nop
 ef8:	ldp	x19, x20, [sp, #16]
 efc:	ldp	x29, x30, [sp], #64
 f00:	ret

gzread.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gz_load>:
       0:	stp	x29, x30, [sp, #-64]!
       4:	mov	x29, sp
       8:	str	x0, [sp, #40]
       c:	str	x1, [sp, #32]
      10:	str	w2, [sp, #28]
      14:	str	x3, [sp, #16]
      18:	mov	w0, #0x40000000            	// #1073741824
      1c:	str	w0, [sp, #56]
      20:	ldr	x0, [sp, #16]
      24:	str	wzr, [x0]
      28:	ldr	x0, [sp, #16]
      2c:	ldr	w0, [x0]
      30:	ldr	w1, [sp, #28]
      34:	sub	w0, w1, w0
      38:	str	w0, [sp, #60]
      3c:	ldr	w1, [sp, #60]
      40:	ldr	w0, [sp, #56]
      44:	cmp	w1, w0
      48:	b.ls	54 <gz_load+0x54>  // b.plast
      4c:	ldr	w0, [sp, #56]
      50:	str	w0, [sp, #60]
      54:	ldr	x0, [sp, #40]
      58:	ldr	w3, [x0, #28]
      5c:	ldr	x0, [sp, #16]
      60:	ldr	w0, [x0]
      64:	mov	w0, w0
      68:	ldr	x1, [sp, #32]
      6c:	add	x0, x1, x0
      70:	ldr	w1, [sp, #60]
      74:	mov	x2, x1
      78:	mov	x1, x0
      7c:	mov	w0, w3
      80:	bl	0 <read>
      84:	str	w0, [sp, #52]
      88:	ldr	w0, [sp, #52]
      8c:	cmp	w0, #0x0
      90:	b.le	c4 <gz_load+0xc4>
      94:	ldr	x0, [sp, #16]
      98:	ldr	w1, [x0]
      9c:	ldr	w0, [sp, #52]
      a0:	add	w1, w1, w0
      a4:	ldr	x0, [sp, #16]
      a8:	str	w1, [x0]
      ac:	ldr	x0, [sp, #16]
      b0:	ldr	w0, [x0]
      b4:	ldr	w1, [sp, #28]
      b8:	cmp	w1, w0
      bc:	b.hi	28 <gz_load+0x28>  // b.pmore
      c0:	b	c8 <gz_load+0xc8>
      c4:	nop
      c8:	ldr	w0, [sp, #52]
      cc:	cmp	w0, #0x0
      d0:	b.ge	f8 <gz_load+0xf8>  // b.tcont
      d4:	bl	0 <__errno_location>
      d8:	ldr	w0, [x0]
      dc:	bl	0 <strerror>
      e0:	mov	x2, x0
      e4:	mov	w1, #0xffffffff            	// #-1
      e8:	ldr	x0, [sp, #40]
      ec:	bl	0 <gz_error>
      f0:	mov	w0, #0xffffffff            	// #-1
      f4:	b	114 <gz_load+0x114>
      f8:	ldr	w0, [sp, #52]
      fc:	cmp	w0, #0x0
     100:	b.ne	110 <gz_load+0x110>  // b.any
     104:	ldr	x0, [sp, #40]
     108:	mov	w1, #0x1                   	// #1
     10c:	str	w1, [x0, #80]
     110:	mov	w0, #0x0                   	// #0
     114:	ldp	x29, x30, [sp], #64
     118:	ret

000000000000011c <gz_avail>:
     11c:	stp	x29, x30, [sp, #-80]!
     120:	mov	x29, sp
     124:	str	x0, [sp, #24]
     128:	ldr	x0, [sp, #24]
     12c:	add	x0, x0, #0x78
     130:	str	x0, [sp, #48]
     134:	ldr	x0, [sp, #24]
     138:	ldr	w0, [x0, #108]
     13c:	cmp	w0, #0x0
     140:	b.eq	15c <gz_avail+0x40>  // b.none
     144:	ldr	x0, [sp, #24]
     148:	ldr	w0, [x0, #108]
     14c:	cmn	w0, #0x5
     150:	b.eq	15c <gz_avail+0x40>  // b.none
     154:	mov	w0, #0xffffffff            	// #-1
     158:	b	258 <gz_avail+0x13c>
     15c:	ldr	x0, [sp, #24]
     160:	ldr	w0, [x0, #80]
     164:	cmp	w0, #0x0
     168:	b.ne	254 <gz_avail+0x138>  // b.any
     16c:	ldr	x0, [sp, #48]
     170:	ldr	w0, [x0, #8]
     174:	cmp	w0, #0x0
     178:	b.eq	1d8 <gz_avail+0xbc>  // b.none
     17c:	ldr	x0, [sp, #24]
     180:	ldr	x0, [x0, #48]
     184:	str	x0, [sp, #72]
     188:	ldr	x0, [sp, #48]
     18c:	ldr	x0, [x0]
     190:	str	x0, [sp, #64]
     194:	ldr	x0, [sp, #48]
     198:	ldr	w0, [x0, #8]
     19c:	str	w0, [sp, #60]
     1a0:	ldr	x1, [sp, #64]
     1a4:	add	x0, x1, #0x1
     1a8:	str	x0, [sp, #64]
     1ac:	ldr	x0, [sp, #72]
     1b0:	add	x2, x0, #0x1
     1b4:	str	x2, [sp, #72]
     1b8:	ldrb	w1, [x1]
     1bc:	strb	w1, [x0]
     1c0:	ldr	w0, [sp, #60]
     1c4:	sub	w0, w0, #0x1
     1c8:	str	w0, [sp, #60]
     1cc:	ldr	w0, [sp, #60]
     1d0:	cmp	w0, #0x0
     1d4:	b.ne	1a0 <gz_avail+0x84>  // b.any
     1d8:	ldr	x0, [sp, #24]
     1dc:	ldr	x1, [x0, #48]
     1e0:	ldr	x0, [sp, #48]
     1e4:	ldr	w0, [x0, #8]
     1e8:	mov	w0, w0
     1ec:	add	x4, x1, x0
     1f0:	ldr	x0, [sp, #24]
     1f4:	ldr	w1, [x0, #40]
     1f8:	ldr	x0, [sp, #48]
     1fc:	ldr	w0, [x0, #8]
     200:	sub	w0, w1, w0
     204:	add	x1, sp, #0x2c
     208:	mov	x3, x1
     20c:	mov	w2, w0
     210:	mov	x1, x4
     214:	ldr	x0, [sp, #24]
     218:	bl	0 <gz_load>
     21c:	cmn	w0, #0x1
     220:	b.ne	22c <gz_avail+0x110>  // b.any
     224:	mov	w0, #0xffffffff            	// #-1
     228:	b	258 <gz_avail+0x13c>
     22c:	ldr	x0, [sp, #48]
     230:	ldr	w1, [x0, #8]
     234:	ldr	w0, [sp, #44]
     238:	add	w1, w1, w0
     23c:	ldr	x0, [sp, #48]
     240:	str	w1, [x0, #8]
     244:	ldr	x0, [sp, #24]
     248:	ldr	x1, [x0, #48]
     24c:	ldr	x0, [sp, #48]
     250:	str	x1, [x0]
     254:	mov	w0, #0x0                   	// #0
     258:	ldp	x29, x30, [sp], #80
     25c:	ret

0000000000000260 <gz_look>:
     260:	stp	x29, x30, [sp, #-48]!
     264:	mov	x29, sp
     268:	str	x0, [sp, #24]
     26c:	ldr	x0, [sp, #24]
     270:	add	x0, x0, #0x78
     274:	str	x0, [sp, #40]
     278:	ldr	x0, [sp, #24]
     27c:	ldr	w0, [x0, #40]
     280:	cmp	w0, #0x0
     284:	b.ne	3b4 <gz_look+0x154>  // b.any
     288:	ldr	x0, [sp, #24]
     28c:	ldr	w0, [x0, #44]
     290:	mov	w0, w0
     294:	bl	0 <malloc>
     298:	mov	x1, x0
     29c:	ldr	x0, [sp, #24]
     2a0:	str	x1, [x0, #48]
     2a4:	ldr	x0, [sp, #24]
     2a8:	ldr	w0, [x0, #44]
     2ac:	lsl	w0, w0, #1
     2b0:	mov	w0, w0
     2b4:	bl	0 <malloc>
     2b8:	mov	x1, x0
     2bc:	ldr	x0, [sp, #24]
     2c0:	str	x1, [x0, #56]
     2c4:	ldr	x0, [sp, #24]
     2c8:	ldr	x0, [x0, #48]
     2cc:	cmp	x0, #0x0
     2d0:	b.eq	2e4 <gz_look+0x84>  // b.none
     2d4:	ldr	x0, [sp, #24]
     2d8:	ldr	x0, [x0, #56]
     2dc:	cmp	x0, #0x0
     2e0:	b.ne	318 <gz_look+0xb8>  // b.any
     2e4:	ldr	x0, [sp, #24]
     2e8:	ldr	x0, [x0, #56]
     2ec:	bl	0 <free>
     2f0:	ldr	x0, [sp, #24]
     2f4:	ldr	x0, [x0, #48]
     2f8:	bl	0 <free>
     2fc:	adrp	x0, 0 <gz_load>
     300:	add	x2, x0, #0x0
     304:	mov	w1, #0xfffffffc            	// #-4
     308:	ldr	x0, [sp, #24]
     30c:	bl	0 <gz_error>
     310:	mov	w0, #0xffffffff            	// #-1
     314:	b	504 <gz_look+0x2a4>
     318:	ldr	x0, [sp, #24]
     31c:	ldr	w1, [x0, #44]
     320:	ldr	x0, [sp, #24]
     324:	str	w1, [x0, #40]
     328:	ldr	x0, [sp, #24]
     32c:	str	xzr, [x0, #184]
     330:	ldr	x0, [sp, #24]
     334:	str	xzr, [x0, #192]
     338:	ldr	x0, [sp, #24]
     33c:	str	xzr, [x0, #200]
     340:	ldr	x0, [sp, #24]
     344:	str	wzr, [x0, #128]
     348:	ldr	x0, [sp, #24]
     34c:	str	xzr, [x0, #120]
     350:	ldr	x0, [sp, #24]
     354:	add	x4, x0, #0x78
     358:	mov	w3, #0x70                  	// #112
     35c:	adrp	x0, 0 <gz_load>
     360:	add	x2, x0, #0x0
     364:	mov	w1, #0x1f                  	// #31
     368:	mov	x0, x4
     36c:	bl	0 <inflateInit2_>
     370:	cmp	w0, #0x0
     374:	b.eq	3b4 <gz_look+0x154>  // b.none
     378:	ldr	x0, [sp, #24]
     37c:	ldr	x0, [x0, #56]
     380:	bl	0 <free>
     384:	ldr	x0, [sp, #24]
     388:	ldr	x0, [x0, #48]
     38c:	bl	0 <free>
     390:	ldr	x0, [sp, #24]
     394:	str	wzr, [x0, #40]
     398:	adrp	x0, 0 <gz_load>
     39c:	add	x2, x0, #0x0
     3a0:	mov	w1, #0xfffffffc            	// #-4
     3a4:	ldr	x0, [sp, #24]
     3a8:	bl	0 <gz_error>
     3ac:	mov	w0, #0xffffffff            	// #-1
     3b0:	b	504 <gz_look+0x2a4>
     3b4:	ldr	x0, [sp, #40]
     3b8:	ldr	w0, [x0, #8]
     3bc:	cmp	w0, #0x1
     3c0:	b.hi	3f4 <gz_look+0x194>  // b.pmore
     3c4:	ldr	x0, [sp, #24]
     3c8:	bl	11c <gz_avail>
     3cc:	cmn	w0, #0x1
     3d0:	b.ne	3dc <gz_look+0x17c>  // b.any
     3d4:	mov	w0, #0xffffffff            	// #-1
     3d8:	b	504 <gz_look+0x2a4>
     3dc:	ldr	x0, [sp, #40]
     3e0:	ldr	w0, [x0, #8]
     3e4:	cmp	w0, #0x0
     3e8:	b.ne	3f4 <gz_look+0x194>  // b.any
     3ec:	mov	w0, #0x0                   	// #0
     3f0:	b	504 <gz_look+0x2a4>
     3f4:	ldr	x0, [sp, #40]
     3f8:	ldr	w0, [x0, #8]
     3fc:	cmp	w0, #0x1
     400:	b.ls	454 <gz_look+0x1f4>  // b.plast
     404:	ldr	x0, [sp, #40]
     408:	ldr	x0, [x0]
     40c:	ldrb	w0, [x0]
     410:	cmp	w0, #0x1f
     414:	b.ne	454 <gz_look+0x1f4>  // b.any
     418:	ldr	x0, [sp, #40]
     41c:	ldr	x0, [x0]
     420:	add	x0, x0, #0x1
     424:	ldrb	w0, [x0]
     428:	cmp	w0, #0x8b
     42c:	b.ne	454 <gz_look+0x1f4>  // b.any
     430:	ldr	x0, [sp, #40]
     434:	bl	0 <inflateReset>
     438:	ldr	x0, [sp, #24]
     43c:	mov	w1, #0x2                   	// #2
     440:	str	w1, [x0, #68]
     444:	ldr	x0, [sp, #24]
     448:	str	wzr, [x0, #64]
     44c:	mov	w0, #0x0                   	// #0
     450:	b	504 <gz_look+0x2a4>
     454:	ldr	x0, [sp, #24]
     458:	ldr	w0, [x0, #64]
     45c:	cmp	w0, #0x0
     460:	b.ne	488 <gz_look+0x228>  // b.any
     464:	ldr	x0, [sp, #40]
     468:	str	wzr, [x0, #8]
     46c:	ldr	x0, [sp, #24]
     470:	mov	w1, #0x1                   	// #1
     474:	str	w1, [x0, #80]
     478:	ldr	x0, [sp, #24]
     47c:	str	wzr, [x0]
     480:	mov	w0, #0x0                   	// #0
     484:	b	504 <gz_look+0x2a4>
     488:	ldr	x0, [sp, #24]
     48c:	ldr	x1, [x0, #56]
     490:	ldr	x0, [sp, #24]
     494:	str	x1, [x0, #8]
     498:	ldr	x0, [sp, #40]
     49c:	ldr	w0, [x0, #8]
     4a0:	cmp	w0, #0x0
     4a4:	b.eq	4e8 <gz_look+0x288>  // b.none
     4a8:	ldr	x0, [sp, #24]
     4ac:	ldr	x3, [x0, #8]
     4b0:	ldr	x0, [sp, #40]
     4b4:	ldr	x1, [x0]
     4b8:	ldr	x0, [sp, #40]
     4bc:	ldr	w0, [x0, #8]
     4c0:	mov	w0, w0
     4c4:	mov	x2, x0
     4c8:	mov	x0, x3
     4cc:	bl	0 <memcpy>
     4d0:	ldr	x0, [sp, #40]
     4d4:	ldr	w1, [x0, #8]
     4d8:	ldr	x0, [sp, #24]
     4dc:	str	w1, [x0]
     4e0:	ldr	x0, [sp, #40]
     4e4:	str	wzr, [x0, #8]
     4e8:	ldr	x0, [sp, #24]
     4ec:	mov	w1, #0x1                   	// #1
     4f0:	str	w1, [x0, #68]
     4f4:	ldr	x0, [sp, #24]
     4f8:	mov	w1, #0x1                   	// #1
     4fc:	str	w1, [x0, #64]
     500:	mov	w0, #0x0                   	// #0
     504:	ldp	x29, x30, [sp], #48
     508:	ret

000000000000050c <gz_decomp>:
     50c:	stp	x29, x30, [sp, #-64]!
     510:	mov	x29, sp
     514:	str	x0, [sp, #24]
     518:	str	wzr, [sp, #60]
     51c:	ldr	x0, [sp, #24]
     520:	add	x0, x0, #0x78
     524:	str	x0, [sp, #48]
     528:	ldr	x0, [sp, #48]
     52c:	ldr	w0, [x0, #32]
     530:	str	w0, [sp, #44]
     534:	ldr	x0, [sp, #48]
     538:	ldr	w0, [x0, #8]
     53c:	cmp	w0, #0x0
     540:	b.ne	55c <gz_decomp+0x50>  // b.any
     544:	ldr	x0, [sp, #24]
     548:	bl	11c <gz_avail>
     54c:	cmn	w0, #0x1
     550:	b.ne	55c <gz_decomp+0x50>  // b.any
     554:	mov	w0, #0xffffffff            	// #-1
     558:	b	6a8 <gz_decomp+0x19c>
     55c:	ldr	x0, [sp, #48]
     560:	ldr	w0, [x0, #8]
     564:	cmp	w0, #0x0
     568:	b.ne	584 <gz_decomp+0x78>  // b.any
     56c:	adrp	x0, 0 <gz_load>
     570:	add	x2, x0, #0x0
     574:	mov	w1, #0xfffffffb            	// #-5
     578:	ldr	x0, [sp, #24]
     57c:	bl	0 <gz_error>
     580:	b	654 <gz_decomp+0x148>
     584:	mov	w1, #0x0                   	// #0
     588:	ldr	x0, [sp, #48]
     58c:	bl	0 <inflate>
     590:	str	w0, [sp, #60]
     594:	ldr	w0, [sp, #60]
     598:	cmn	w0, #0x2
     59c:	b.eq	5ac <gz_decomp+0xa0>  // b.none
     5a0:	ldr	w0, [sp, #60]
     5a4:	cmp	w0, #0x2
     5a8:	b.ne	5c8 <gz_decomp+0xbc>  // b.any
     5ac:	adrp	x0, 0 <gz_load>
     5b0:	add	x2, x0, #0x0
     5b4:	mov	w1, #0xfffffffe            	// #-2
     5b8:	ldr	x0, [sp, #24]
     5bc:	bl	0 <gz_error>
     5c0:	mov	w0, #0xffffffff            	// #-1
     5c4:	b	6a8 <gz_decomp+0x19c>
     5c8:	ldr	w0, [sp, #60]
     5cc:	cmn	w0, #0x4
     5d0:	b.ne	5f0 <gz_decomp+0xe4>  // b.any
     5d4:	adrp	x0, 0 <gz_load>
     5d8:	add	x2, x0, #0x0
     5dc:	mov	w1, #0xfffffffc            	// #-4
     5e0:	ldr	x0, [sp, #24]
     5e4:	bl	0 <gz_error>
     5e8:	mov	w0, #0xffffffff            	// #-1
     5ec:	b	6a8 <gz_decomp+0x19c>
     5f0:	ldr	w0, [sp, #60]
     5f4:	cmn	w0, #0x3
     5f8:	b.ne	638 <gz_decomp+0x12c>  // b.any
     5fc:	ldr	x0, [sp, #48]
     600:	ldr	x0, [x0, #48]
     604:	cmp	x0, #0x0
     608:	b.eq	618 <gz_decomp+0x10c>  // b.none
     60c:	ldr	x0, [sp, #48]
     610:	ldr	x0, [x0, #48]
     614:	b	620 <gz_decomp+0x114>
     618:	adrp	x0, 0 <gz_load>
     61c:	add	x0, x0, #0x0
     620:	mov	x2, x0
     624:	mov	w1, #0xfffffffd            	// #-3
     628:	ldr	x0, [sp, #24]
     62c:	bl	0 <gz_error>
     630:	mov	w0, #0xffffffff            	// #-1
     634:	b	6a8 <gz_decomp+0x19c>
     638:	ldr	x0, [sp, #48]
     63c:	ldr	w0, [x0, #32]
     640:	cmp	w0, #0x0
     644:	b.eq	654 <gz_decomp+0x148>  // b.none
     648:	ldr	w0, [sp, #60]
     64c:	cmp	w0, #0x1
     650:	b.ne	534 <gz_decomp+0x28>  // b.any
     654:	ldr	x0, [sp, #48]
     658:	ldr	w0, [x0, #32]
     65c:	ldr	w1, [sp, #44]
     660:	sub	w1, w1, w0
     664:	ldr	x0, [sp, #24]
     668:	str	w1, [x0]
     66c:	ldr	x0, [sp, #48]
     670:	ldr	x1, [x0, #24]
     674:	ldr	x0, [sp, #24]
     678:	ldr	w0, [x0]
     67c:	mov	w0, w0
     680:	neg	x0, x0
     684:	add	x1, x1, x0
     688:	ldr	x0, [sp, #24]
     68c:	str	x1, [x0, #8]
     690:	ldr	w0, [sp, #60]
     694:	cmp	w0, #0x1
     698:	b.ne	6a4 <gz_decomp+0x198>  // b.any
     69c:	ldr	x0, [sp, #24]
     6a0:	str	wzr, [x0, #68]
     6a4:	mov	w0, #0x0                   	// #0
     6a8:	ldp	x29, x30, [sp], #64
     6ac:	ret

00000000000006b0 <gz_fetch>:
     6b0:	stp	x29, x30, [sp, #-48]!
     6b4:	mov	x29, sp
     6b8:	str	x0, [sp, #24]
     6bc:	ldr	x0, [sp, #24]
     6c0:	add	x0, x0, #0x78
     6c4:	str	x0, [sp, #40]
     6c8:	ldr	x0, [sp, #24]
     6cc:	ldr	w0, [x0, #68]
     6d0:	cmp	w0, #0x2
     6d4:	b.eq	774 <gz_fetch+0xc4>  // b.none
     6d8:	cmp	w0, #0x2
     6dc:	b.gt	7b4 <gz_fetch+0x104>
     6e0:	cmp	w0, #0x0
     6e4:	b.eq	6f4 <gz_fetch+0x44>  // b.none
     6e8:	cmp	w0, #0x1
     6ec:	b.eq	724 <gz_fetch+0x74>  // b.none
     6f0:	b	7b4 <gz_fetch+0x104>
     6f4:	ldr	x0, [sp, #24]
     6f8:	bl	260 <gz_look>
     6fc:	cmn	w0, #0x1
     700:	b.ne	70c <gz_fetch+0x5c>  // b.any
     704:	mov	w0, #0xffffffff            	// #-1
     708:	b	7e8 <gz_fetch+0x138>
     70c:	ldr	x0, [sp, #24]
     710:	ldr	w0, [x0, #68]
     714:	cmp	w0, #0x0
     718:	b.ne	7b0 <gz_fetch+0x100>  // b.any
     71c:	mov	w0, #0x0                   	// #0
     720:	b	7e8 <gz_fetch+0x138>
     724:	ldr	x0, [sp, #24]
     728:	ldr	x1, [x0, #56]
     72c:	ldr	x0, [sp, #24]
     730:	ldr	w0, [x0, #40]
     734:	lsl	w0, w0, #1
     738:	ldr	x2, [sp, #24]
     73c:	mov	x3, x2
     740:	mov	w2, w0
     744:	ldr	x0, [sp, #24]
     748:	bl	0 <gz_load>
     74c:	cmn	w0, #0x1
     750:	b.ne	75c <gz_fetch+0xac>  // b.any
     754:	mov	w0, #0xffffffff            	// #-1
     758:	b	7e8 <gz_fetch+0x138>
     75c:	ldr	x0, [sp, #24]
     760:	ldr	x1, [x0, #56]
     764:	ldr	x0, [sp, #24]
     768:	str	x1, [x0, #8]
     76c:	mov	w0, #0x0                   	// #0
     770:	b	7e8 <gz_fetch+0x138>
     774:	ldr	x0, [sp, #24]
     778:	ldr	w0, [x0, #40]
     77c:	lsl	w1, w0, #1
     780:	ldr	x0, [sp, #40]
     784:	str	w1, [x0, #32]
     788:	ldr	x0, [sp, #24]
     78c:	ldr	x1, [x0, #56]
     790:	ldr	x0, [sp, #40]
     794:	str	x1, [x0, #24]
     798:	ldr	x0, [sp, #24]
     79c:	bl	50c <gz_decomp>
     7a0:	cmn	w0, #0x1
     7a4:	b.ne	7b4 <gz_fetch+0x104>  // b.any
     7a8:	mov	w0, #0xffffffff            	// #-1
     7ac:	b	7e8 <gz_fetch+0x138>
     7b0:	nop
     7b4:	ldr	x0, [sp, #24]
     7b8:	ldr	w0, [x0]
     7bc:	cmp	w0, #0x0
     7c0:	b.ne	7e4 <gz_fetch+0x134>  // b.any
     7c4:	ldr	x0, [sp, #24]
     7c8:	ldr	w0, [x0, #80]
     7cc:	cmp	w0, #0x0
     7d0:	b.eq	6c8 <gz_fetch+0x18>  // b.none
     7d4:	ldr	x0, [sp, #40]
     7d8:	ldr	w0, [x0, #8]
     7dc:	cmp	w0, #0x0
     7e0:	b.ne	6c8 <gz_fetch+0x18>  // b.any
     7e4:	mov	w0, #0x0                   	// #0
     7e8:	ldp	x29, x30, [sp], #48
     7ec:	ret

00000000000007f0 <gz_skip>:
     7f0:	stp	x29, x30, [sp, #-48]!
     7f4:	mov	x29, sp
     7f8:	str	x0, [sp, #24]
     7fc:	str	x1, [sp, #16]
     800:	b	8d4 <gz_skip+0xe4>
     804:	ldr	x0, [sp, #24]
     808:	ldr	w0, [x0]
     80c:	cmp	w0, #0x0
     810:	b.eq	89c <gz_skip+0xac>  // b.none
     814:	ldr	x0, [sp, #24]
     818:	ldr	w0, [x0]
     81c:	mov	w0, w0
     820:	ldr	x1, [sp, #16]
     824:	cmp	x1, x0
     828:	b.ge	834 <gz_skip+0x44>  // b.tcont
     82c:	ldr	x0, [sp, #16]
     830:	b	83c <gz_skip+0x4c>
     834:	ldr	x0, [sp, #24]
     838:	ldr	w0, [x0]
     83c:	str	w0, [sp, #44]
     840:	ldr	x0, [sp, #24]
     844:	ldr	w1, [x0]
     848:	ldr	w0, [sp, #44]
     84c:	sub	w1, w1, w0
     850:	ldr	x0, [sp, #24]
     854:	str	w1, [x0]
     858:	ldr	x0, [sp, #24]
     85c:	ldr	x1, [x0, #8]
     860:	ldr	w0, [sp, #44]
     864:	add	x1, x1, x0
     868:	ldr	x0, [sp, #24]
     86c:	str	x1, [x0, #8]
     870:	ldr	x0, [sp, #24]
     874:	ldr	x1, [x0, #16]
     878:	ldr	w0, [sp, #44]
     87c:	add	x1, x1, x0
     880:	ldr	x0, [sp, #24]
     884:	str	x1, [x0, #16]
     888:	ldr	w0, [sp, #44]
     88c:	ldr	x1, [sp, #16]
     890:	sub	x0, x1, x0
     894:	str	x0, [sp, #16]
     898:	b	8d4 <gz_skip+0xe4>
     89c:	ldr	x0, [sp, #24]
     8a0:	ldr	w0, [x0, #80]
     8a4:	cmp	w0, #0x0
     8a8:	b.eq	8bc <gz_skip+0xcc>  // b.none
     8ac:	ldr	x0, [sp, #24]
     8b0:	ldr	w0, [x0, #128]
     8b4:	cmp	w0, #0x0
     8b8:	b.eq	8e0 <gz_skip+0xf0>  // b.none
     8bc:	ldr	x0, [sp, #24]
     8c0:	bl	6b0 <gz_fetch>
     8c4:	cmn	w0, #0x1
     8c8:	b.ne	8d4 <gz_skip+0xe4>  // b.any
     8cc:	mov	w0, #0xffffffff            	// #-1
     8d0:	b	8e4 <gz_skip+0xf4>
     8d4:	ldr	x0, [sp, #16]
     8d8:	cmp	x0, #0x0
     8dc:	b.ne	804 <gz_skip+0x14>  // b.any
     8e0:	mov	w0, #0x0                   	// #0
     8e4:	ldp	x29, x30, [sp], #48
     8e8:	ret

00000000000008ec <gz_read>:
     8ec:	stp	x29, x30, [sp, #-64]!
     8f0:	mov	x29, sp
     8f4:	str	x0, [sp, #40]
     8f8:	str	x1, [sp, #32]
     8fc:	str	x2, [sp, #24]
     900:	ldr	x0, [sp, #24]
     904:	cmp	x0, #0x0
     908:	b.ne	914 <gz_read+0x28>  // b.any
     90c:	mov	x0, #0x0                   	// #0
     910:	b	b60 <gz_read+0x274>
     914:	ldr	x0, [sp, #40]
     918:	ldr	w0, [x0, #104]
     91c:	cmp	w0, #0x0
     920:	b.eq	950 <gz_read+0x64>  // b.none
     924:	ldr	x0, [sp, #40]
     928:	str	wzr, [x0, #104]
     92c:	ldr	x0, [sp, #40]
     930:	ldr	x0, [x0, #96]
     934:	mov	x1, x0
     938:	ldr	x0, [sp, #40]
     93c:	bl	7f0 <gz_skip>
     940:	cmn	w0, #0x1
     944:	b.ne	950 <gz_read+0x64>  // b.any
     948:	mov	x0, #0x0                   	// #0
     94c:	b	b60 <gz_read+0x274>
     950:	str	xzr, [sp, #56]
     954:	mov	w0, #0xffffffff            	// #-1
     958:	str	w0, [sp, #52]
     95c:	ldr	w0, [sp, #52]
     960:	mov	w0, w0
     964:	ldr	x1, [sp, #24]
     968:	cmp	x1, x0
     96c:	b.cs	978 <gz_read+0x8c>  // b.hs, b.nlast
     970:	ldr	x0, [sp, #24]
     974:	str	w0, [sp, #52]
     978:	ldr	x0, [sp, #40]
     97c:	ldr	w0, [x0]
     980:	cmp	w0, #0x0
     984:	b.eq	a00 <gz_read+0x114>  // b.none
     988:	ldr	x0, [sp, #40]
     98c:	ldr	w1, [x0]
     990:	ldr	w0, [sp, #52]
     994:	cmp	w1, w0
     998:	b.cs	9a8 <gz_read+0xbc>  // b.hs, b.nlast
     99c:	ldr	x0, [sp, #40]
     9a0:	ldr	w0, [x0]
     9a4:	str	w0, [sp, #52]
     9a8:	ldr	x0, [sp, #40]
     9ac:	ldr	x0, [x0, #8]
     9b0:	ldr	w1, [sp, #52]
     9b4:	mov	w1, w1
     9b8:	mov	x2, x1
     9bc:	mov	x1, x0
     9c0:	ldr	x0, [sp, #32]
     9c4:	bl	0 <memcpy>
     9c8:	ldr	x0, [sp, #40]
     9cc:	ldr	x1, [x0, #8]
     9d0:	ldr	w0, [sp, #52]
     9d4:	mov	w0, w0
     9d8:	add	x1, x1, x0
     9dc:	ldr	x0, [sp, #40]
     9e0:	str	x1, [x0, #8]
     9e4:	ldr	x0, [sp, #40]
     9e8:	ldr	w1, [x0]
     9ec:	ldr	w0, [sp, #52]
     9f0:	sub	w1, w1, w0
     9f4:	ldr	x0, [sp, #40]
     9f8:	str	w1, [x0]
     9fc:	b	af0 <gz_read+0x204>
     a00:	ldr	x0, [sp, #40]
     a04:	ldr	w0, [x0, #80]
     a08:	cmp	w0, #0x0
     a0c:	b.eq	a30 <gz_read+0x144>  // b.none
     a10:	ldr	x0, [sp, #40]
     a14:	ldr	w0, [x0, #128]
     a18:	cmp	w0, #0x0
     a1c:	b.ne	a30 <gz_read+0x144>  // b.any
     a20:	ldr	x0, [sp, #40]
     a24:	mov	w1, #0x1                   	// #1
     a28:	str	w1, [x0, #84]
     a2c:	b	b5c <gz_read+0x270>
     a30:	ldr	x0, [sp, #40]
     a34:	ldr	w0, [x0, #68]
     a38:	cmp	w0, #0x0
     a3c:	b.eq	a58 <gz_read+0x16c>  // b.none
     a40:	ldr	x0, [sp, #40]
     a44:	ldr	w0, [x0, #40]
     a48:	lsl	w1, w0, #1
     a4c:	ldr	w0, [sp, #52]
     a50:	cmp	w1, w0
     a54:	b.ls	a70 <gz_read+0x184>  // b.plast
     a58:	ldr	x0, [sp, #40]
     a5c:	bl	6b0 <gz_fetch>
     a60:	cmn	w0, #0x1
     a64:	b.ne	b4c <gz_read+0x260>  // b.any
     a68:	mov	x0, #0x0                   	// #0
     a6c:	b	b60 <gz_read+0x274>
     a70:	ldr	x0, [sp, #40]
     a74:	ldr	w0, [x0, #68]
     a78:	cmp	w0, #0x1
     a7c:	b.ne	aac <gz_read+0x1c0>  // b.any
     a80:	ldr	w0, [sp, #52]
     a84:	add	x1, sp, #0x34
     a88:	mov	x3, x1
     a8c:	mov	w2, w0
     a90:	ldr	x1, [sp, #32]
     a94:	ldr	x0, [sp, #40]
     a98:	bl	0 <gz_load>
     a9c:	cmn	w0, #0x1
     aa0:	b.ne	af0 <gz_read+0x204>  // b.any
     aa4:	mov	x0, #0x0                   	// #0
     aa8:	b	b60 <gz_read+0x274>
     aac:	ldr	w1, [sp, #52]
     ab0:	ldr	x0, [sp, #40]
     ab4:	str	w1, [x0, #152]
     ab8:	ldr	x0, [sp, #40]
     abc:	ldr	x1, [sp, #32]
     ac0:	str	x1, [x0, #144]
     ac4:	ldr	x0, [sp, #40]
     ac8:	bl	50c <gz_decomp>
     acc:	cmn	w0, #0x1
     ad0:	b.ne	adc <gz_read+0x1f0>  // b.any
     ad4:	mov	x0, #0x0                   	// #0
     ad8:	b	b60 <gz_read+0x274>
     adc:	ldr	x0, [sp, #40]
     ae0:	ldr	w0, [x0]
     ae4:	str	w0, [sp, #52]
     ae8:	ldr	x0, [sp, #40]
     aec:	str	wzr, [x0]
     af0:	ldr	w0, [sp, #52]
     af4:	mov	w0, w0
     af8:	ldr	x1, [sp, #24]
     afc:	sub	x0, x1, x0
     b00:	str	x0, [sp, #24]
     b04:	ldr	w0, [sp, #52]
     b08:	mov	w0, w0
     b0c:	ldr	x1, [sp, #32]
     b10:	add	x0, x1, x0
     b14:	str	x0, [sp, #32]
     b18:	ldr	w0, [sp, #52]
     b1c:	mov	w0, w0
     b20:	ldr	x1, [sp, #56]
     b24:	add	x0, x1, x0
     b28:	str	x0, [sp, #56]
     b2c:	ldr	x0, [sp, #40]
     b30:	ldr	x1, [x0, #16]
     b34:	ldr	w0, [sp, #52]
     b38:	mov	w0, w0
     b3c:	add	x1, x1, x0
     b40:	ldr	x0, [sp, #40]
     b44:	str	x1, [x0, #16]
     b48:	b	b50 <gz_read+0x264>
     b4c:	nop
     b50:	ldr	x0, [sp, #24]
     b54:	cmp	x0, #0x0
     b58:	b.ne	954 <gz_read+0x68>  // b.any
     b5c:	ldr	x0, [sp, #56]
     b60:	ldp	x29, x30, [sp], #64
     b64:	ret

0000000000000b68 <gzread>:
     b68:	stp	x29, x30, [sp, #-64]!
     b6c:	mov	x29, sp
     b70:	str	x0, [sp, #40]
     b74:	str	x1, [sp, #32]
     b78:	str	w2, [sp, #28]
     b7c:	ldr	x0, [sp, #40]
     b80:	cmp	x0, #0x0
     b84:	b.ne	b90 <gzread+0x28>  // b.any
     b88:	mov	w0, #0xffffffff            	// #-1
     b8c:	b	c4c <gzread+0xe4>
     b90:	ldr	x0, [sp, #40]
     b94:	str	x0, [sp, #56]
     b98:	ldr	x0, [sp, #56]
     b9c:	ldr	w1, [x0, #24]
     ba0:	mov	w0, #0x1c4f                	// #7247
     ba4:	cmp	w1, w0
     ba8:	b.ne	bcc <gzread+0x64>  // b.any
     bac:	ldr	x0, [sp, #56]
     bb0:	ldr	w0, [x0, #108]
     bb4:	cmp	w0, #0x0
     bb8:	b.eq	bd4 <gzread+0x6c>  // b.none
     bbc:	ldr	x0, [sp, #56]
     bc0:	ldr	w0, [x0, #108]
     bc4:	cmn	w0, #0x5
     bc8:	b.eq	bd4 <gzread+0x6c>  // b.none
     bcc:	mov	w0, #0xffffffff            	// #-1
     bd0:	b	c4c <gzread+0xe4>
     bd4:	ldr	w0, [sp, #28]
     bd8:	cmp	w0, #0x0
     bdc:	b.ge	bfc <gzread+0x94>  // b.tcont
     be0:	adrp	x0, 0 <gz_load>
     be4:	add	x2, x0, #0x0
     be8:	mov	w1, #0xfffffffe            	// #-2
     bec:	ldr	x0, [sp, #56]
     bf0:	bl	0 <gz_error>
     bf4:	mov	w0, #0xffffffff            	// #-1
     bf8:	b	c4c <gzread+0xe4>
     bfc:	ldr	w0, [sp, #28]
     c00:	mov	x2, x0
     c04:	ldr	x1, [sp, #32]
     c08:	ldr	x0, [sp, #56]
     c0c:	bl	8ec <gz_read>
     c10:	str	w0, [sp, #28]
     c14:	ldr	w0, [sp, #28]
     c18:	cmp	w0, #0x0
     c1c:	b.ne	c48 <gzread+0xe0>  // b.any
     c20:	ldr	x0, [sp, #56]
     c24:	ldr	w0, [x0, #108]
     c28:	cmp	w0, #0x0
     c2c:	b.eq	c48 <gzread+0xe0>  // b.none
     c30:	ldr	x0, [sp, #56]
     c34:	ldr	w0, [x0, #108]
     c38:	cmn	w0, #0x5
     c3c:	b.eq	c48 <gzread+0xe0>  // b.none
     c40:	mov	w0, #0xffffffff            	// #-1
     c44:	b	c4c <gzread+0xe4>
     c48:	ldr	w0, [sp, #28]
     c4c:	ldp	x29, x30, [sp], #64
     c50:	ret

0000000000000c54 <gzfread>:
     c54:	stp	x29, x30, [sp, #-64]!
     c58:	mov	x29, sp
     c5c:	str	x0, [sp, #40]
     c60:	str	x1, [sp, #32]
     c64:	str	x2, [sp, #24]
     c68:	str	x3, [sp, #16]
     c6c:	ldr	x0, [sp, #16]
     c70:	cmp	x0, #0x0
     c74:	b.ne	c80 <gzfread+0x2c>  // b.any
     c78:	mov	x0, #0x0                   	// #0
     c7c:	b	d44 <gzfread+0xf0>
     c80:	ldr	x0, [sp, #16]
     c84:	str	x0, [sp, #56]
     c88:	ldr	x0, [sp, #56]
     c8c:	ldr	w1, [x0, #24]
     c90:	mov	w0, #0x1c4f                	// #7247
     c94:	cmp	w1, w0
     c98:	b.ne	cbc <gzfread+0x68>  // b.any
     c9c:	ldr	x0, [sp, #56]
     ca0:	ldr	w0, [x0, #108]
     ca4:	cmp	w0, #0x0
     ca8:	b.eq	cc4 <gzfread+0x70>  // b.none
     cac:	ldr	x0, [sp, #56]
     cb0:	ldr	w0, [x0, #108]
     cb4:	cmn	w0, #0x5
     cb8:	b.eq	cc4 <gzfread+0x70>  // b.none
     cbc:	mov	x0, #0x0                   	// #0
     cc0:	b	d44 <gzfread+0xf0>
     cc4:	ldr	x1, [sp, #24]
     cc8:	ldr	x0, [sp, #32]
     ccc:	mul	x0, x1, x0
     cd0:	str	x0, [sp, #48]
     cd4:	ldr	x0, [sp, #32]
     cd8:	cmp	x0, #0x0
     cdc:	b.eq	d14 <gzfread+0xc0>  // b.none
     ce0:	ldr	x1, [sp, #48]
     ce4:	ldr	x0, [sp, #32]
     ce8:	udiv	x0, x1, x0
     cec:	ldr	x1, [sp, #24]
     cf0:	cmp	x1, x0
     cf4:	b.eq	d14 <gzfread+0xc0>  // b.none
     cf8:	adrp	x0, 0 <gz_load>
     cfc:	add	x2, x0, #0x0
     d00:	mov	w1, #0xfffffffe            	// #-2
     d04:	ldr	x0, [sp, #56]
     d08:	bl	0 <gz_error>
     d0c:	mov	x0, #0x0                   	// #0
     d10:	b	d44 <gzfread+0xf0>
     d14:	ldr	x0, [sp, #48]
     d18:	cmp	x0, #0x0
     d1c:	b.eq	d40 <gzfread+0xec>  // b.none
     d20:	ldr	x2, [sp, #48]
     d24:	ldr	x1, [sp, #40]
     d28:	ldr	x0, [sp, #56]
     d2c:	bl	8ec <gz_read>
     d30:	mov	x1, x0
     d34:	ldr	x0, [sp, #32]
     d38:	udiv	x0, x1, x0
     d3c:	b	d44 <gzfread+0xf0>
     d40:	mov	x0, #0x0                   	// #0
     d44:	ldp	x29, x30, [sp], #64
     d48:	ret

0000000000000d4c <gzgetc>:
     d4c:	stp	x29, x30, [sp, #-48]!
     d50:	mov	x29, sp
     d54:	str	x0, [sp, #24]
     d58:	ldr	x0, [sp, #24]
     d5c:	cmp	x0, #0x0
     d60:	b.ne	d6c <gzgetc+0x20>  // b.any
     d64:	mov	w0, #0xffffffff            	// #-1
     d68:	b	e34 <gzgetc+0xe8>
     d6c:	ldr	x0, [sp, #24]
     d70:	str	x0, [sp, #40]
     d74:	ldr	x0, [sp, #40]
     d78:	ldr	w1, [x0, #24]
     d7c:	mov	w0, #0x1c4f                	// #7247
     d80:	cmp	w1, w0
     d84:	b.ne	da8 <gzgetc+0x5c>  // b.any
     d88:	ldr	x0, [sp, #40]
     d8c:	ldr	w0, [x0, #108]
     d90:	cmp	w0, #0x0
     d94:	b.eq	db0 <gzgetc+0x64>  // b.none
     d98:	ldr	x0, [sp, #40]
     d9c:	ldr	w0, [x0, #108]
     da0:	cmn	w0, #0x5
     da4:	b.eq	db0 <gzgetc+0x64>  // b.none
     da8:	mov	w0, #0xffffffff            	// #-1
     dac:	b	e34 <gzgetc+0xe8>
     db0:	ldr	x0, [sp, #40]
     db4:	ldr	w0, [x0]
     db8:	cmp	w0, #0x0
     dbc:	b.eq	e04 <gzgetc+0xb8>  // b.none
     dc0:	ldr	x0, [sp, #40]
     dc4:	ldr	w0, [x0]
     dc8:	sub	w1, w0, #0x1
     dcc:	ldr	x0, [sp, #40]
     dd0:	str	w1, [x0]
     dd4:	ldr	x0, [sp, #40]
     dd8:	ldr	x0, [x0, #16]
     ddc:	add	x1, x0, #0x1
     de0:	ldr	x0, [sp, #40]
     de4:	str	x1, [x0, #16]
     de8:	ldr	x0, [sp, #40]
     dec:	ldr	x0, [x0, #8]
     df0:	add	x2, x0, #0x1
     df4:	ldr	x1, [sp, #40]
     df8:	str	x2, [x1, #8]
     dfc:	ldrb	w0, [x0]
     e00:	b	e34 <gzgetc+0xe8>
     e04:	add	x0, sp, #0x20
     e08:	mov	x2, #0x1                   	// #1
     e0c:	mov	x1, x0
     e10:	ldr	x0, [sp, #40]
     e14:	bl	8ec <gz_read>
     e18:	str	w0, [sp, #36]
     e1c:	ldr	w0, [sp, #36]
     e20:	cmp	w0, #0x0
     e24:	b.le	e30 <gzgetc+0xe4>
     e28:	ldrb	w0, [sp, #32]
     e2c:	b	e34 <gzgetc+0xe8>
     e30:	mov	w0, #0xffffffff            	// #-1
     e34:	ldp	x29, x30, [sp], #48
     e38:	ret

0000000000000e3c <gzgetc_>:
     e3c:	stp	x29, x30, [sp, #-32]!
     e40:	mov	x29, sp
     e44:	str	x0, [sp, #24]
     e48:	ldr	x0, [sp, #24]
     e4c:	bl	d4c <gzgetc>
     e50:	ldp	x29, x30, [sp], #32
     e54:	ret

0000000000000e58 <gzungetc>:
     e58:	stp	x29, x30, [sp, #-64]!
     e5c:	mov	x29, sp
     e60:	str	w0, [sp, #28]
     e64:	str	x1, [sp, #16]
     e68:	ldr	x0, [sp, #16]
     e6c:	cmp	x0, #0x0
     e70:	b.ne	e7c <gzungetc+0x24>  // b.any
     e74:	mov	w0, #0xffffffff            	// #-1
     e78:	b	10c0 <gzungetc+0x268>
     e7c:	ldr	x0, [sp, #16]
     e80:	str	x0, [sp, #40]
     e84:	ldr	x0, [sp, #40]
     e88:	ldr	w1, [x0, #24]
     e8c:	mov	w0, #0x1c4f                	// #7247
     e90:	cmp	w1, w0
     e94:	b.ne	eb8 <gzungetc+0x60>  // b.any
     e98:	ldr	x0, [sp, #40]
     e9c:	ldr	w0, [x0, #108]
     ea0:	cmp	w0, #0x0
     ea4:	b.eq	ec0 <gzungetc+0x68>  // b.none
     ea8:	ldr	x0, [sp, #40]
     eac:	ldr	w0, [x0, #108]
     eb0:	cmn	w0, #0x5
     eb4:	b.eq	ec0 <gzungetc+0x68>  // b.none
     eb8:	mov	w0, #0xffffffff            	// #-1
     ebc:	b	10c0 <gzungetc+0x268>
     ec0:	ldr	x0, [sp, #40]
     ec4:	ldr	w0, [x0, #104]
     ec8:	cmp	w0, #0x0
     ecc:	b.eq	efc <gzungetc+0xa4>  // b.none
     ed0:	ldr	x0, [sp, #40]
     ed4:	str	wzr, [x0, #104]
     ed8:	ldr	x0, [sp, #40]
     edc:	ldr	x0, [x0, #96]
     ee0:	mov	x1, x0
     ee4:	ldr	x0, [sp, #40]
     ee8:	bl	7f0 <gz_skip>
     eec:	cmn	w0, #0x1
     ef0:	b.ne	efc <gzungetc+0xa4>  // b.any
     ef4:	mov	w0, #0xffffffff            	// #-1
     ef8:	b	10c0 <gzungetc+0x268>
     efc:	ldr	w0, [sp, #28]
     f00:	cmp	w0, #0x0
     f04:	b.ge	f10 <gzungetc+0xb8>  // b.tcont
     f08:	mov	w0, #0xffffffff            	// #-1
     f0c:	b	10c0 <gzungetc+0x268>
     f10:	ldr	x0, [sp, #40]
     f14:	ldr	w0, [x0]
     f18:	cmp	w0, #0x0
     f1c:	b.ne	f8c <gzungetc+0x134>  // b.any
     f20:	ldr	x0, [sp, #40]
     f24:	mov	w1, #0x1                   	// #1
     f28:	str	w1, [x0]
     f2c:	ldr	x0, [sp, #40]
     f30:	ldr	x1, [x0, #56]
     f34:	ldr	x0, [sp, #40]
     f38:	ldr	w0, [x0, #40]
     f3c:	lsl	w0, w0, #1
     f40:	mov	w0, w0
     f44:	sub	x0, x0, #0x1
     f48:	add	x1, x1, x0
     f4c:	ldr	x0, [sp, #40]
     f50:	str	x1, [x0, #8]
     f54:	ldr	x0, [sp, #40]
     f58:	ldr	x0, [x0, #8]
     f5c:	ldr	w1, [sp, #28]
     f60:	and	w1, w1, #0xff
     f64:	strb	w1, [x0]
     f68:	ldr	x0, [sp, #40]
     f6c:	ldr	x0, [x0, #16]
     f70:	sub	x1, x0, #0x1
     f74:	ldr	x0, [sp, #40]
     f78:	str	x1, [x0, #16]
     f7c:	ldr	x0, [sp, #40]
     f80:	str	wzr, [x0, #84]
     f84:	ldr	w0, [sp, #28]
     f88:	b	10c0 <gzungetc+0x268>
     f8c:	ldr	x0, [sp, #40]
     f90:	ldr	w1, [x0]
     f94:	ldr	x0, [sp, #40]
     f98:	ldr	w0, [x0, #40]
     f9c:	lsl	w0, w0, #1
     fa0:	cmp	w1, w0
     fa4:	b.ne	fc4 <gzungetc+0x16c>  // b.any
     fa8:	adrp	x0, 0 <gz_load>
     fac:	add	x2, x0, #0x0
     fb0:	mov	w1, #0xfffffffd            	// #-3
     fb4:	ldr	x0, [sp, #40]
     fb8:	bl	0 <gz_error>
     fbc:	mov	w0, #0xffffffff            	// #-1
     fc0:	b	10c0 <gzungetc+0x268>
     fc4:	ldr	x0, [sp, #40]
     fc8:	ldr	x1, [x0, #8]
     fcc:	ldr	x0, [sp, #40]
     fd0:	ldr	x0, [x0, #56]
     fd4:	cmp	x1, x0
     fd8:	b.ne	1064 <gzungetc+0x20c>  // b.any
     fdc:	ldr	x0, [sp, #40]
     fe0:	ldr	x1, [x0, #56]
     fe4:	ldr	x0, [sp, #40]
     fe8:	ldr	w0, [x0]
     fec:	mov	w0, w0
     ff0:	add	x0, x1, x0
     ff4:	str	x0, [sp, #56]
     ff8:	ldr	x0, [sp, #40]
     ffc:	ldr	x1, [x0, #56]
    1000:	ldr	x0, [sp, #40]
    1004:	ldr	w0, [x0, #40]
    1008:	lsl	w0, w0, #1
    100c:	mov	w0, w0
    1010:	add	x0, x1, x0
    1014:	str	x0, [sp, #48]
    1018:	b	1044 <gzungetc+0x1ec>
    101c:	ldr	x0, [sp, #56]
    1020:	sub	x0, x0, #0x1
    1024:	str	x0, [sp, #56]
    1028:	ldr	x0, [sp, #48]
    102c:	sub	x0, x0, #0x1
    1030:	str	x0, [sp, #48]
    1034:	ldr	x0, [sp, #56]
    1038:	ldrb	w1, [x0]
    103c:	ldr	x0, [sp, #48]
    1040:	strb	w1, [x0]
    1044:	ldr	x0, [sp, #40]
    1048:	ldr	x0, [x0, #56]
    104c:	ldr	x1, [sp, #56]
    1050:	cmp	x1, x0
    1054:	b.hi	101c <gzungetc+0x1c4>  // b.pmore
    1058:	ldr	x0, [sp, #40]
    105c:	ldr	x1, [sp, #48]
    1060:	str	x1, [x0, #8]
    1064:	ldr	x0, [sp, #40]
    1068:	ldr	w0, [x0]
    106c:	add	w1, w0, #0x1
    1070:	ldr	x0, [sp, #40]
    1074:	str	w1, [x0]
    1078:	ldr	x0, [sp, #40]
    107c:	ldr	x0, [x0, #8]
    1080:	sub	x1, x0, #0x1
    1084:	ldr	x0, [sp, #40]
    1088:	str	x1, [x0, #8]
    108c:	ldr	x0, [sp, #40]
    1090:	ldr	x0, [x0, #8]
    1094:	ldr	w1, [sp, #28]
    1098:	and	w1, w1, #0xff
    109c:	strb	w1, [x0]
    10a0:	ldr	x0, [sp, #40]
    10a4:	ldr	x0, [x0, #16]
    10a8:	sub	x1, x0, #0x1
    10ac:	ldr	x0, [sp, #40]
    10b0:	str	x1, [x0, #16]
    10b4:	ldr	x0, [sp, #40]
    10b8:	str	wzr, [x0, #84]
    10bc:	ldr	w0, [sp, #28]
    10c0:	ldp	x29, x30, [sp], #64
    10c4:	ret

00000000000010c8 <gzgets>:
    10c8:	stp	x29, x30, [sp, #-80]!
    10cc:	mov	x29, sp
    10d0:	str	x0, [sp, #40]
    10d4:	str	x1, [sp, #32]
    10d8:	str	w2, [sp, #28]
    10dc:	ldr	x0, [sp, #40]
    10e0:	cmp	x0, #0x0
    10e4:	b.eq	1100 <gzgets+0x38>  // b.none
    10e8:	ldr	x0, [sp, #32]
    10ec:	cmp	x0, #0x0
    10f0:	b.eq	1100 <gzgets+0x38>  // b.none
    10f4:	ldr	w0, [sp, #28]
    10f8:	cmp	w0, #0x0
    10fc:	b.gt	1108 <gzgets+0x40>
    1100:	mov	x0, #0x0                   	// #0
    1104:	b	130c <gzgets+0x244>
    1108:	ldr	x0, [sp, #40]
    110c:	str	x0, [sp, #64]
    1110:	ldr	x0, [sp, #64]
    1114:	ldr	w1, [x0, #24]
    1118:	mov	w0, #0x1c4f                	// #7247
    111c:	cmp	w1, w0
    1120:	b.ne	1144 <gzgets+0x7c>  // b.any
    1124:	ldr	x0, [sp, #64]
    1128:	ldr	w0, [x0, #108]
    112c:	cmp	w0, #0x0
    1130:	b.eq	114c <gzgets+0x84>  // b.none
    1134:	ldr	x0, [sp, #64]
    1138:	ldr	w0, [x0, #108]
    113c:	cmn	w0, #0x5
    1140:	b.eq	114c <gzgets+0x84>  // b.none
    1144:	mov	x0, #0x0                   	// #0
    1148:	b	130c <gzgets+0x244>
    114c:	ldr	x0, [sp, #64]
    1150:	ldr	w0, [x0, #104]
    1154:	cmp	w0, #0x0
    1158:	b.eq	1188 <gzgets+0xc0>  // b.none
    115c:	ldr	x0, [sp, #64]
    1160:	str	wzr, [x0, #104]
    1164:	ldr	x0, [sp, #64]
    1168:	ldr	x0, [x0, #96]
    116c:	mov	x1, x0
    1170:	ldr	x0, [sp, #64]
    1174:	bl	7f0 <gz_skip>
    1178:	cmn	w0, #0x1
    117c:	b.ne	1188 <gzgets+0xc0>  // b.any
    1180:	mov	x0, #0x0                   	// #0
    1184:	b	130c <gzgets+0x244>
    1188:	ldr	x0, [sp, #32]
    118c:	str	x0, [sp, #56]
    1190:	ldr	w0, [sp, #28]
    1194:	sub	w0, w0, #0x1
    1198:	str	w0, [sp, #76]
    119c:	ldr	w0, [sp, #76]
    11a0:	cmp	w0, #0x0
    11a4:	b.eq	12e8 <gzgets+0x220>  // b.none
    11a8:	ldr	x0, [sp, #64]
    11ac:	ldr	w0, [x0]
    11b0:	cmp	w0, #0x0
    11b4:	b.ne	11d0 <gzgets+0x108>  // b.any
    11b8:	ldr	x0, [sp, #64]
    11bc:	bl	6b0 <gz_fetch>
    11c0:	cmn	w0, #0x1
    11c4:	b.ne	11d0 <gzgets+0x108>  // b.any
    11c8:	mov	x0, #0x0                   	// #0
    11cc:	b	130c <gzgets+0x244>
    11d0:	ldr	x0, [sp, #64]
    11d4:	ldr	w0, [x0]
    11d8:	cmp	w0, #0x0
    11dc:	b.ne	11f0 <gzgets+0x128>  // b.any
    11e0:	ldr	x0, [sp, #64]
    11e4:	mov	w1, #0x1                   	// #1
    11e8:	str	w1, [x0, #84]
    11ec:	b	12e8 <gzgets+0x220>
    11f0:	ldr	x0, [sp, #64]
    11f4:	ldr	w0, [x0]
    11f8:	ldr	w2, [sp, #76]
    11fc:	ldr	w1, [sp, #76]
    1200:	cmp	w2, w0
    1204:	csel	w0, w1, w0, ls  // ls = plast
    1208:	str	w0, [sp, #72]
    120c:	ldr	x0, [sp, #64]
    1210:	ldr	x0, [x0, #8]
    1214:	ldr	w1, [sp, #72]
    1218:	mov	x2, x1
    121c:	mov	w1, #0xa                   	// #10
    1220:	bl	0 <memchr>
    1224:	str	x0, [sp, #48]
    1228:	ldr	x0, [sp, #48]
    122c:	cmp	x0, #0x0
    1230:	b.eq	124c <gzgets+0x184>  // b.none
    1234:	ldr	x0, [sp, #64]
    1238:	ldr	x0, [x0, #8]
    123c:	ldr	x1, [sp, #48]
    1240:	sub	x0, x1, x0
    1244:	add	w0, w0, #0x1
    1248:	str	w0, [sp, #72]
    124c:	ldr	x0, [sp, #64]
    1250:	ldr	x0, [x0, #8]
    1254:	ldr	w1, [sp, #72]
    1258:	mov	x2, x1
    125c:	mov	x1, x0
    1260:	ldr	x0, [sp, #32]
    1264:	bl	0 <memcpy>
    1268:	ldr	x0, [sp, #64]
    126c:	ldr	w1, [x0]
    1270:	ldr	w0, [sp, #72]
    1274:	sub	w1, w1, w0
    1278:	ldr	x0, [sp, #64]
    127c:	str	w1, [x0]
    1280:	ldr	x0, [sp, #64]
    1284:	ldr	x1, [x0, #8]
    1288:	ldr	w0, [sp, #72]
    128c:	add	x1, x1, x0
    1290:	ldr	x0, [sp, #64]
    1294:	str	x1, [x0, #8]
    1298:	ldr	x0, [sp, #64]
    129c:	ldr	x1, [x0, #16]
    12a0:	ldr	w0, [sp, #72]
    12a4:	add	x1, x1, x0
    12a8:	ldr	x0, [sp, #64]
    12ac:	str	x1, [x0, #16]
    12b0:	ldr	w1, [sp, #76]
    12b4:	ldr	w0, [sp, #72]
    12b8:	sub	w0, w1, w0
    12bc:	str	w0, [sp, #76]
    12c0:	ldr	w0, [sp, #72]
    12c4:	ldr	x1, [sp, #32]
    12c8:	add	x0, x1, x0
    12cc:	str	x0, [sp, #32]
    12d0:	ldr	w0, [sp, #76]
    12d4:	cmp	w0, #0x0
    12d8:	b.eq	12e8 <gzgets+0x220>  // b.none
    12dc:	ldr	x0, [sp, #48]
    12e0:	cmp	x0, #0x0
    12e4:	b.eq	11a8 <gzgets+0xe0>  // b.none
    12e8:	ldr	x1, [sp, #32]
    12ec:	ldr	x0, [sp, #56]
    12f0:	cmp	x1, x0
    12f4:	b.ne	1300 <gzgets+0x238>  // b.any
    12f8:	mov	x0, #0x0                   	// #0
    12fc:	b	130c <gzgets+0x244>
    1300:	ldr	x0, [sp, #32]
    1304:	strb	wzr, [x0]
    1308:	ldr	x0, [sp, #56]
    130c:	ldp	x29, x30, [sp], #80
    1310:	ret

0000000000001314 <gzdirect>:
    1314:	stp	x29, x30, [sp, #-48]!
    1318:	mov	x29, sp
    131c:	str	x0, [sp, #24]
    1320:	ldr	x0, [sp, #24]
    1324:	cmp	x0, #0x0
    1328:	b.ne	1334 <gzdirect+0x20>  // b.any
    132c:	mov	w0, #0x0                   	// #0
    1330:	b	1380 <gzdirect+0x6c>
    1334:	ldr	x0, [sp, #24]
    1338:	str	x0, [sp, #40]
    133c:	ldr	x0, [sp, #40]
    1340:	ldr	w1, [x0, #24]
    1344:	mov	w0, #0x1c4f                	// #7247
    1348:	cmp	w1, w0
    134c:	b.ne	1378 <gzdirect+0x64>  // b.any
    1350:	ldr	x0, [sp, #40]
    1354:	ldr	w0, [x0, #68]
    1358:	cmp	w0, #0x0
    135c:	b.ne	1378 <gzdirect+0x64>  // b.any
    1360:	ldr	x0, [sp, #40]
    1364:	ldr	w0, [x0]
    1368:	cmp	w0, #0x0
    136c:	b.ne	1378 <gzdirect+0x64>  // b.any
    1370:	ldr	x0, [sp, #40]
    1374:	bl	260 <gz_look>
    1378:	ldr	x0, [sp, #40]
    137c:	ldr	w0, [x0, #64]
    1380:	ldp	x29, x30, [sp], #48
    1384:	ret

0000000000001388 <gzclose_r>:
    1388:	stp	x29, x30, [sp, #-48]!
    138c:	mov	x29, sp
    1390:	str	x0, [sp, #24]
    1394:	ldr	x0, [sp, #24]
    1398:	cmp	x0, #0x0
    139c:	b.ne	13a8 <gzclose_r+0x20>  // b.any
    13a0:	mov	w0, #0xfffffffe            	// #-2
    13a4:	b	146c <gzclose_r+0xe4>
    13a8:	ldr	x0, [sp, #24]
    13ac:	str	x0, [sp, #40]
    13b0:	ldr	x0, [sp, #40]
    13b4:	ldr	w1, [x0, #24]
    13b8:	mov	w0, #0x1c4f                	// #7247
    13bc:	cmp	w1, w0
    13c0:	b.eq	13cc <gzclose_r+0x44>  // b.none
    13c4:	mov	w0, #0xfffffffe            	// #-2
    13c8:	b	146c <gzclose_r+0xe4>
    13cc:	ldr	x0, [sp, #40]
    13d0:	ldr	w0, [x0, #40]
    13d4:	cmp	w0, #0x0
    13d8:	b.eq	1400 <gzclose_r+0x78>  // b.none
    13dc:	ldr	x0, [sp, #40]
    13e0:	add	x0, x0, #0x78
    13e4:	bl	0 <inflateEnd>
    13e8:	ldr	x0, [sp, #40]
    13ec:	ldr	x0, [x0, #56]
    13f0:	bl	0 <free>
    13f4:	ldr	x0, [sp, #40]
    13f8:	ldr	x0, [x0, #48]
    13fc:	bl	0 <free>
    1400:	ldr	x0, [sp, #40]
    1404:	ldr	w0, [x0, #108]
    1408:	cmn	w0, #0x5
    140c:	b.ne	1418 <gzclose_r+0x90>  // b.any
    1410:	mov	w0, #0xfffffffb            	// #-5
    1414:	b	141c <gzclose_r+0x94>
    1418:	mov	w0, #0x0                   	// #0
    141c:	str	w0, [sp, #36]
    1420:	mov	x2, #0x0                   	// #0
    1424:	mov	w1, #0x0                   	// #0
    1428:	ldr	x0, [sp, #40]
    142c:	bl	0 <gz_error>
    1430:	ldr	x0, [sp, #40]
    1434:	ldr	x0, [x0, #32]
    1438:	bl	0 <free>
    143c:	ldr	x0, [sp, #40]
    1440:	ldr	w0, [x0, #28]
    1444:	bl	0 <close>
    1448:	str	w0, [sp, #32]
    144c:	ldr	x0, [sp, #40]
    1450:	bl	0 <free>
    1454:	ldr	w0, [sp, #32]
    1458:	cmp	w0, #0x0
    145c:	b.ne	1468 <gzclose_r+0xe0>  // b.any
    1460:	ldr	w0, [sp, #36]
    1464:	b	146c <gzclose_r+0xe4>
    1468:	mov	w0, #0xffffffff            	// #-1
    146c:	ldp	x29, x30, [sp], #48
    1470:	ret

gzwrite.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gz_init>:
       0:	stp	x29, x30, [sp, #-48]!
       4:	mov	x29, sp
       8:	str	x0, [sp, #24]
       c:	ldr	x0, [sp, #24]
      10:	add	x0, x0, #0x78
      14:	str	x0, [sp, #40]
      18:	ldr	x0, [sp, #24]
      1c:	ldr	w0, [x0, #44]
      20:	lsl	w0, w0, #1
      24:	mov	w0, w0
      28:	bl	0 <malloc>
      2c:	mov	x1, x0
      30:	ldr	x0, [sp, #24]
      34:	str	x1, [x0, #48]
      38:	ldr	x0, [sp, #24]
      3c:	ldr	x0, [x0, #48]
      40:	cmp	x0, #0x0
      44:	b.ne	64 <gz_init+0x64>  // b.any
      48:	adrp	x0, 0 <gz_init>
      4c:	add	x2, x0, #0x0
      50:	mov	w1, #0xfffffffc            	// #-4
      54:	ldr	x0, [sp, #24]
      58:	bl	0 <gz_error>
      5c:	mov	w0, #0xffffffff            	// #-1
      60:	b	1b4 <gz_init+0x1b4>
      64:	ldr	x0, [sp, #24]
      68:	ldr	w0, [x0, #64]
      6c:	cmp	w0, #0x0
      70:	b.ne	160 <gz_init+0x160>  // b.any
      74:	ldr	x0, [sp, #24]
      78:	ldr	w0, [x0, #44]
      7c:	mov	w0, w0
      80:	bl	0 <malloc>
      84:	mov	x1, x0
      88:	ldr	x0, [sp, #24]
      8c:	str	x1, [x0, #56]
      90:	ldr	x0, [sp, #24]
      94:	ldr	x0, [x0, #56]
      98:	cmp	x0, #0x0
      9c:	b.ne	c8 <gz_init+0xc8>  // b.any
      a0:	ldr	x0, [sp, #24]
      a4:	ldr	x0, [x0, #48]
      a8:	bl	0 <free>
      ac:	adrp	x0, 0 <gz_init>
      b0:	add	x2, x0, #0x0
      b4:	mov	w1, #0xfffffffc            	// #-4
      b8:	ldr	x0, [sp, #24]
      bc:	bl	0 <gz_error>
      c0:	mov	w0, #0xffffffff            	// #-1
      c4:	b	1b4 <gz_init+0x1b4>
      c8:	ldr	x0, [sp, #40]
      cc:	str	xzr, [x0, #64]
      d0:	ldr	x0, [sp, #40]
      d4:	str	xzr, [x0, #72]
      d8:	ldr	x0, [sp, #40]
      dc:	str	xzr, [x0, #80]
      e0:	ldr	x0, [sp, #24]
      e4:	ldr	w1, [x0, #88]
      e8:	ldr	x0, [sp, #24]
      ec:	ldr	w2, [x0, #92]
      f0:	mov	w7, #0x70                  	// #112
      f4:	adrp	x0, 0 <gz_init>
      f8:	add	x6, x0, #0x0
      fc:	mov	w5, w2
     100:	mov	w4, #0x8                   	// #8
     104:	mov	w3, #0x1f                  	// #31
     108:	mov	w2, #0x8                   	// #8
     10c:	ldr	x0, [sp, #40]
     110:	bl	0 <deflateInit2_>
     114:	str	w0, [sp, #36]
     118:	ldr	w0, [sp, #36]
     11c:	cmp	w0, #0x0
     120:	b.eq	158 <gz_init+0x158>  // b.none
     124:	ldr	x0, [sp, #24]
     128:	ldr	x0, [x0, #56]
     12c:	bl	0 <free>
     130:	ldr	x0, [sp, #24]
     134:	ldr	x0, [x0, #48]
     138:	bl	0 <free>
     13c:	adrp	x0, 0 <gz_init>
     140:	add	x2, x0, #0x0
     144:	mov	w1, #0xfffffffc            	// #-4
     148:	ldr	x0, [sp, #24]
     14c:	bl	0 <gz_error>
     150:	mov	w0, #0xffffffff            	// #-1
     154:	b	1b4 <gz_init+0x1b4>
     158:	ldr	x0, [sp, #40]
     15c:	str	xzr, [x0]
     160:	ldr	x0, [sp, #24]
     164:	ldr	w1, [x0, #44]
     168:	ldr	x0, [sp, #24]
     16c:	str	w1, [x0, #40]
     170:	ldr	x0, [sp, #24]
     174:	ldr	w0, [x0, #64]
     178:	cmp	w0, #0x0
     17c:	b.ne	1b0 <gz_init+0x1b0>  // b.any
     180:	ldr	x0, [sp, #24]
     184:	ldr	w1, [x0, #40]
     188:	ldr	x0, [sp, #40]
     18c:	str	w1, [x0, #32]
     190:	ldr	x0, [sp, #24]
     194:	ldr	x1, [x0, #56]
     198:	ldr	x0, [sp, #40]
     19c:	str	x1, [x0, #24]
     1a0:	ldr	x0, [sp, #40]
     1a4:	ldr	x1, [x0, #24]
     1a8:	ldr	x0, [sp, #24]
     1ac:	str	x1, [x0, #8]
     1b0:	mov	w0, #0x0                   	// #0
     1b4:	ldp	x29, x30, [sp], #48
     1b8:	ret

00000000000001bc <gz_comp>:
     1bc:	stp	x29, x30, [sp, #-64]!
     1c0:	mov	x29, sp
     1c4:	str	x0, [sp, #24]
     1c8:	str	w1, [sp, #20]
     1cc:	mov	w0, #0x40000000            	// #1073741824
     1d0:	str	w0, [sp, #56]
     1d4:	ldr	x0, [sp, #24]
     1d8:	add	x0, x0, #0x78
     1dc:	str	x0, [sp, #48]
     1e0:	ldr	x0, [sp, #24]
     1e4:	ldr	w0, [x0, #40]
     1e8:	cmp	w0, #0x0
     1ec:	b.ne	208 <gz_comp+0x4c>  // b.any
     1f0:	ldr	x0, [sp, #24]
     1f4:	bl	0 <gz_init>
     1f8:	cmn	w0, #0x1
     1fc:	b.ne	208 <gz_comp+0x4c>  // b.any
     200:	mov	w0, #0xffffffff            	// #-1
     204:	b	49c <gz_comp+0x2e0>
     208:	ldr	x0, [sp, #24]
     20c:	ldr	w0, [x0, #64]
     210:	cmp	w0, #0x0
     214:	b.eq	2d8 <gz_comp+0x11c>  // b.none
     218:	b	2c0 <gz_comp+0x104>
     21c:	ldr	x0, [sp, #48]
     220:	ldr	w0, [x0, #8]
     224:	ldr	w2, [sp, #56]
     228:	ldr	w1, [sp, #56]
     22c:	cmp	w2, w0
     230:	csel	w0, w1, w0, ls  // ls = plast
     234:	str	w0, [sp, #44]
     238:	ldr	x0, [sp, #24]
     23c:	ldr	w3, [x0, #28]
     240:	ldr	x0, [sp, #48]
     244:	ldr	x0, [x0]
     248:	ldr	w1, [sp, #44]
     24c:	mov	x2, x1
     250:	mov	x1, x0
     254:	mov	w0, w3
     258:	bl	0 <write>
     25c:	str	w0, [sp, #40]
     260:	ldr	w0, [sp, #40]
     264:	cmp	w0, #0x0
     268:	b.ge	290 <gz_comp+0xd4>  // b.tcont
     26c:	bl	0 <__errno_location>
     270:	ldr	w0, [x0]
     274:	bl	0 <strerror>
     278:	mov	x2, x0
     27c:	mov	w1, #0xffffffff            	// #-1
     280:	ldr	x0, [sp, #24]
     284:	bl	0 <gz_error>
     288:	mov	w0, #0xffffffff            	// #-1
     28c:	b	49c <gz_comp+0x2e0>
     290:	ldr	x0, [sp, #48]
     294:	ldr	w1, [x0, #8]
     298:	ldr	w0, [sp, #40]
     29c:	sub	w1, w1, w0
     2a0:	ldr	x0, [sp, #48]
     2a4:	str	w1, [x0, #8]
     2a8:	ldr	x0, [sp, #48]
     2ac:	ldr	x1, [x0]
     2b0:	ldrsw	x0, [sp, #40]
     2b4:	add	x1, x1, x0
     2b8:	ldr	x0, [sp, #48]
     2bc:	str	x1, [x0]
     2c0:	ldr	x0, [sp, #48]
     2c4:	ldr	w0, [x0, #8]
     2c8:	cmp	w0, #0x0
     2cc:	b.ne	21c <gz_comp+0x60>  // b.any
     2d0:	mov	w0, #0x0                   	// #0
     2d4:	b	49c <gz_comp+0x2e0>
     2d8:	str	wzr, [sp, #60]
     2dc:	ldr	x0, [sp, #48]
     2e0:	ldr	w0, [x0, #32]
     2e4:	cmp	w0, #0x0
     2e8:	b.eq	3c8 <gz_comp+0x20c>  // b.none
     2ec:	ldr	w0, [sp, #20]
     2f0:	cmp	w0, #0x0
     2f4:	b.eq	420 <gz_comp+0x264>  // b.none
     2f8:	ldr	w0, [sp, #20]
     2fc:	cmp	w0, #0x4
     300:	b.ne	3c8 <gz_comp+0x20c>  // b.any
     304:	ldr	w0, [sp, #60]
     308:	cmp	w0, #0x1
     30c:	b.ne	420 <gz_comp+0x264>  // b.any
     310:	b	3c8 <gz_comp+0x20c>
     314:	ldr	x0, [sp, #48]
     318:	ldr	x1, [x0, #24]
     31c:	ldr	x0, [sp, #24]
     320:	ldr	x0, [x0, #8]
     324:	sub	x1, x1, x0
     328:	ldr	w0, [sp, #56]
     32c:	sxtw	x0, w0
     330:	cmp	x1, x0
     334:	b.gt	350 <gz_comp+0x194>
     338:	ldr	x0, [sp, #48]
     33c:	ldr	x1, [x0, #24]
     340:	ldr	x0, [sp, #24]
     344:	ldr	x0, [x0, #8]
     348:	sub	x0, x1, x0
     34c:	b	354 <gz_comp+0x198>
     350:	ldr	w0, [sp, #56]
     354:	str	w0, [sp, #44]
     358:	ldr	x0, [sp, #24]
     35c:	ldr	w3, [x0, #28]
     360:	ldr	x0, [sp, #24]
     364:	ldr	x0, [x0, #8]
     368:	ldr	w1, [sp, #44]
     36c:	mov	x2, x1
     370:	mov	x1, x0
     374:	mov	w0, w3
     378:	bl	0 <write>
     37c:	str	w0, [sp, #40]
     380:	ldr	w0, [sp, #40]
     384:	cmp	w0, #0x0
     388:	b.ge	3b0 <gz_comp+0x1f4>  // b.tcont
     38c:	bl	0 <__errno_location>
     390:	ldr	w0, [x0]
     394:	bl	0 <strerror>
     398:	mov	x2, x0
     39c:	mov	w1, #0xffffffff            	// #-1
     3a0:	ldr	x0, [sp, #24]
     3a4:	bl	0 <gz_error>
     3a8:	mov	w0, #0xffffffff            	// #-1
     3ac:	b	49c <gz_comp+0x2e0>
     3b0:	ldr	x0, [sp, #24]
     3b4:	ldr	x1, [x0, #8]
     3b8:	ldrsw	x0, [sp, #40]
     3bc:	add	x1, x1, x0
     3c0:	ldr	x0, [sp, #24]
     3c4:	str	x1, [x0, #8]
     3c8:	ldr	x0, [sp, #48]
     3cc:	ldr	x1, [x0, #24]
     3d0:	ldr	x0, [sp, #24]
     3d4:	ldr	x0, [x0, #8]
     3d8:	cmp	x1, x0
     3dc:	b.hi	314 <gz_comp+0x158>  // b.pmore
     3e0:	ldr	x0, [sp, #48]
     3e4:	ldr	w0, [x0, #32]
     3e8:	cmp	w0, #0x0
     3ec:	b.ne	420 <gz_comp+0x264>  // b.any
     3f0:	ldr	x0, [sp, #24]
     3f4:	ldr	w1, [x0, #40]
     3f8:	ldr	x0, [sp, #48]
     3fc:	str	w1, [x0, #32]
     400:	ldr	x0, [sp, #24]
     404:	ldr	x1, [x0, #56]
     408:	ldr	x0, [sp, #48]
     40c:	str	x1, [x0, #24]
     410:	ldr	x0, [sp, #24]
     414:	ldr	x1, [x0, #56]
     418:	ldr	x0, [sp, #24]
     41c:	str	x1, [x0, #8]
     420:	ldr	x0, [sp, #48]
     424:	ldr	w0, [x0, #32]
     428:	str	w0, [sp, #36]
     42c:	ldr	w1, [sp, #20]
     430:	ldr	x0, [sp, #48]
     434:	bl	0 <deflate>
     438:	str	w0, [sp, #60]
     43c:	ldr	w0, [sp, #60]
     440:	cmn	w0, #0x2
     444:	b.ne	464 <gz_comp+0x2a8>  // b.any
     448:	adrp	x0, 0 <gz_init>
     44c:	add	x2, x0, #0x0
     450:	mov	w1, #0xfffffffe            	// #-2
     454:	ldr	x0, [sp, #24]
     458:	bl	0 <gz_error>
     45c:	mov	w0, #0xffffffff            	// #-1
     460:	b	49c <gz_comp+0x2e0>
     464:	ldr	x0, [sp, #48]
     468:	ldr	w0, [x0, #32]
     46c:	ldr	w1, [sp, #36]
     470:	sub	w0, w1, w0
     474:	str	w0, [sp, #36]
     478:	ldr	w0, [sp, #36]
     47c:	cmp	w0, #0x0
     480:	b.ne	2dc <gz_comp+0x120>  // b.any
     484:	ldr	w0, [sp, #20]
     488:	cmp	w0, #0x4
     48c:	b.ne	498 <gz_comp+0x2dc>  // b.any
     490:	ldr	x0, [sp, #48]
     494:	bl	0 <deflateReset>
     498:	mov	w0, #0x0                   	// #0
     49c:	ldp	x29, x30, [sp], #64
     4a0:	ret

00000000000004a4 <gz_zero>:
     4a4:	stp	x29, x30, [sp, #-64]!
     4a8:	mov	x29, sp
     4ac:	str	x0, [sp, #24]
     4b0:	str	x1, [sp, #16]
     4b4:	ldr	x0, [sp, #24]
     4b8:	add	x0, x0, #0x78
     4bc:	str	x0, [sp, #48]
     4c0:	ldr	x0, [sp, #48]
     4c4:	ldr	w0, [x0, #8]
     4c8:	cmp	w0, #0x0
     4cc:	b.eq	4ec <gz_zero+0x48>  // b.none
     4d0:	mov	w1, #0x0                   	// #0
     4d4:	ldr	x0, [sp, #24]
     4d8:	bl	1bc <gz_comp>
     4dc:	cmn	w0, #0x1
     4e0:	b.ne	4ec <gz_zero+0x48>  // b.any
     4e4:	mov	w0, #0xffffffff            	// #-1
     4e8:	b	5bc <gz_zero+0x118>
     4ec:	mov	w0, #0x1                   	// #1
     4f0:	str	w0, [sp, #60]
     4f4:	b	5ac <gz_zero+0x108>
     4f8:	ldr	x0, [sp, #24]
     4fc:	ldr	w0, [x0, #40]
     500:	mov	w0, w0
     504:	ldr	x1, [sp, #16]
     508:	cmp	x1, x0
     50c:	b.ge	518 <gz_zero+0x74>  // b.tcont
     510:	ldr	x0, [sp, #16]
     514:	b	520 <gz_zero+0x7c>
     518:	ldr	x0, [sp, #24]
     51c:	ldr	w0, [x0, #40]
     520:	str	w0, [sp, #44]
     524:	ldr	w0, [sp, #60]
     528:	cmp	w0, #0x0
     52c:	b.eq	54c <gz_zero+0xa8>  // b.none
     530:	ldr	x0, [sp, #24]
     534:	ldr	x0, [x0, #48]
     538:	ldr	w1, [sp, #44]
     53c:	mov	x2, x1
     540:	mov	w1, #0x0                   	// #0
     544:	bl	0 <memset>
     548:	str	wzr, [sp, #60]
     54c:	ldr	x0, [sp, #48]
     550:	ldr	w1, [sp, #44]
     554:	str	w1, [x0, #8]
     558:	ldr	x0, [sp, #24]
     55c:	ldr	x1, [x0, #48]
     560:	ldr	x0, [sp, #48]
     564:	str	x1, [x0]
     568:	ldr	x0, [sp, #24]
     56c:	ldr	x1, [x0, #16]
     570:	ldr	w0, [sp, #44]
     574:	add	x1, x1, x0
     578:	ldr	x0, [sp, #24]
     57c:	str	x1, [x0, #16]
     580:	mov	w1, #0x0                   	// #0
     584:	ldr	x0, [sp, #24]
     588:	bl	1bc <gz_comp>
     58c:	cmn	w0, #0x1
     590:	b.ne	59c <gz_zero+0xf8>  // b.any
     594:	mov	w0, #0xffffffff            	// #-1
     598:	b	5bc <gz_zero+0x118>
     59c:	ldr	w0, [sp, #44]
     5a0:	ldr	x1, [sp, #16]
     5a4:	sub	x0, x1, x0
     5a8:	str	x0, [sp, #16]
     5ac:	ldr	x0, [sp, #16]
     5b0:	cmp	x0, #0x0
     5b4:	b.ne	4f8 <gz_zero+0x54>  // b.any
     5b8:	mov	w0, #0x0                   	// #0
     5bc:	ldp	x29, x30, [sp], #64
     5c0:	ret

00000000000005c4 <gz_write>:
     5c4:	stp	x29, x30, [sp, #-80]!
     5c8:	mov	x29, sp
     5cc:	str	x0, [sp, #40]
     5d0:	str	x1, [sp, #32]
     5d4:	str	x2, [sp, #24]
     5d8:	ldr	x0, [sp, #24]
     5dc:	str	x0, [sp, #64]
     5e0:	ldr	x0, [sp, #24]
     5e4:	cmp	x0, #0x0
     5e8:	b.ne	5f4 <gz_write+0x30>  // b.any
     5ec:	mov	x0, #0x0                   	// #0
     5f0:	b	844 <gz_write+0x280>
     5f4:	ldr	x0, [sp, #40]
     5f8:	ldr	w0, [x0, #40]
     5fc:	cmp	w0, #0x0
     600:	b.ne	61c <gz_write+0x58>  // b.any
     604:	ldr	x0, [sp, #40]
     608:	bl	0 <gz_init>
     60c:	cmn	w0, #0x1
     610:	b.ne	61c <gz_write+0x58>  // b.any
     614:	mov	x0, #0x0                   	// #0
     618:	b	844 <gz_write+0x280>
     61c:	ldr	x0, [sp, #40]
     620:	ldr	w0, [x0, #104]
     624:	cmp	w0, #0x0
     628:	b.eq	658 <gz_write+0x94>  // b.none
     62c:	ldr	x0, [sp, #40]
     630:	str	wzr, [x0, #104]
     634:	ldr	x0, [sp, #40]
     638:	ldr	x0, [x0, #96]
     63c:	mov	x1, x0
     640:	ldr	x0, [sp, #40]
     644:	bl	4a4 <gz_zero>
     648:	cmn	w0, #0x1
     64c:	b.ne	658 <gz_write+0x94>  // b.any
     650:	mov	x0, #0x0                   	// #0
     654:	b	844 <gz_write+0x280>
     658:	ldr	x0, [sp, #40]
     65c:	ldr	w0, [x0, #40]
     660:	mov	w0, w0
     664:	ldr	x1, [sp, #24]
     668:	cmp	x1, x0
     66c:	b.cs	78c <gz_write+0x1c8>  // b.hs, b.nlast
     670:	ldr	x0, [sp, #40]
     674:	ldr	w0, [x0, #128]
     678:	cmp	w0, #0x0
     67c:	b.ne	690 <gz_write+0xcc>  // b.any
     680:	ldr	x0, [sp, #40]
     684:	ldr	x1, [x0, #48]
     688:	ldr	x0, [sp, #40]
     68c:	str	x1, [x0, #120]
     690:	ldr	x0, [sp, #40]
     694:	ldr	x1, [x0, #120]
     698:	ldr	x0, [sp, #40]
     69c:	ldr	w0, [x0, #128]
     6a0:	mov	w0, w0
     6a4:	add	x1, x1, x0
     6a8:	ldr	x0, [sp, #40]
     6ac:	ldr	x0, [x0, #48]
     6b0:	sub	x0, x1, x0
     6b4:	str	w0, [sp, #60]
     6b8:	ldr	x0, [sp, #40]
     6bc:	ldr	w1, [x0, #40]
     6c0:	ldr	w0, [sp, #60]
     6c4:	sub	w0, w1, w0
     6c8:	str	w0, [sp, #76]
     6cc:	ldr	w0, [sp, #76]
     6d0:	ldr	x1, [sp, #24]
     6d4:	cmp	x1, x0
     6d8:	b.cs	6e4 <gz_write+0x120>  // b.hs, b.nlast
     6dc:	ldr	x0, [sp, #24]
     6e0:	str	w0, [sp, #76]
     6e4:	ldr	x0, [sp, #40]
     6e8:	ldr	x1, [x0, #48]
     6ec:	ldr	w0, [sp, #60]
     6f0:	add	x0, x1, x0
     6f4:	ldr	w1, [sp, #76]
     6f8:	mov	x2, x1
     6fc:	ldr	x1, [sp, #32]
     700:	bl	0 <memcpy>
     704:	ldr	x0, [sp, #40]
     708:	ldr	w1, [x0, #128]
     70c:	ldr	w0, [sp, #76]
     710:	add	w1, w1, w0
     714:	ldr	x0, [sp, #40]
     718:	str	w1, [x0, #128]
     71c:	ldr	x0, [sp, #40]
     720:	ldr	x1, [x0, #16]
     724:	ldr	w0, [sp, #76]
     728:	add	x1, x1, x0
     72c:	ldr	x0, [sp, #40]
     730:	str	x1, [x0, #16]
     734:	ldr	w0, [sp, #76]
     738:	ldr	x1, [sp, #32]
     73c:	add	x0, x1, x0
     740:	str	x0, [sp, #32]
     744:	ldr	w0, [sp, #76]
     748:	ldr	x1, [sp, #24]
     74c:	sub	x0, x1, x0
     750:	str	x0, [sp, #24]
     754:	ldr	x0, [sp, #24]
     758:	cmp	x0, #0x0
     75c:	b.eq	77c <gz_write+0x1b8>  // b.none
     760:	mov	w1, #0x0                   	// #0
     764:	ldr	x0, [sp, #40]
     768:	bl	1bc <gz_comp>
     76c:	cmn	w0, #0x1
     770:	b.ne	77c <gz_write+0x1b8>  // b.any
     774:	mov	x0, #0x0                   	// #0
     778:	b	844 <gz_write+0x280>
     77c:	ldr	x0, [sp, #24]
     780:	cmp	x0, #0x0
     784:	b.ne	670 <gz_write+0xac>  // b.any
     788:	b	840 <gz_write+0x27c>
     78c:	ldr	x0, [sp, #40]
     790:	ldr	w0, [x0, #128]
     794:	cmp	w0, #0x0
     798:	b.eq	7b8 <gz_write+0x1f4>  // b.none
     79c:	mov	w1, #0x0                   	// #0
     7a0:	ldr	x0, [sp, #40]
     7a4:	bl	1bc <gz_comp>
     7a8:	cmn	w0, #0x1
     7ac:	b.ne	7b8 <gz_write+0x1f4>  // b.any
     7b0:	mov	x0, #0x0                   	// #0
     7b4:	b	844 <gz_write+0x280>
     7b8:	ldr	x0, [sp, #40]
     7bc:	ldr	x1, [sp, #32]
     7c0:	str	x1, [x0, #120]
     7c4:	mov	w0, #0xffffffff            	// #-1
     7c8:	str	w0, [sp, #72]
     7cc:	ldr	w0, [sp, #72]
     7d0:	ldr	x1, [sp, #24]
     7d4:	cmp	x1, x0
     7d8:	b.cs	7e4 <gz_write+0x220>  // b.hs, b.nlast
     7dc:	ldr	x0, [sp, #24]
     7e0:	str	w0, [sp, #72]
     7e4:	ldr	x0, [sp, #40]
     7e8:	ldr	w1, [sp, #72]
     7ec:	str	w1, [x0, #128]
     7f0:	ldr	x0, [sp, #40]
     7f4:	ldr	x1, [x0, #16]
     7f8:	ldr	w0, [sp, #72]
     7fc:	add	x1, x1, x0
     800:	ldr	x0, [sp, #40]
     804:	str	x1, [x0, #16]
     808:	mov	w1, #0x0                   	// #0
     80c:	ldr	x0, [sp, #40]
     810:	bl	1bc <gz_comp>
     814:	cmn	w0, #0x1
     818:	b.ne	824 <gz_write+0x260>  // b.any
     81c:	mov	x0, #0x0                   	// #0
     820:	b	844 <gz_write+0x280>
     824:	ldr	w0, [sp, #72]
     828:	ldr	x1, [sp, #24]
     82c:	sub	x0, x1, x0
     830:	str	x0, [sp, #24]
     834:	ldr	x0, [sp, #24]
     838:	cmp	x0, #0x0
     83c:	b.ne	7c4 <gz_write+0x200>  // b.any
     840:	ldr	x0, [sp, #64]
     844:	ldp	x29, x30, [sp], #80
     848:	ret

000000000000084c <gzwrite>:
     84c:	stp	x29, x30, [sp, #-64]!
     850:	mov	x29, sp
     854:	str	x0, [sp, #40]
     858:	str	x1, [sp, #32]
     85c:	str	w2, [sp, #28]
     860:	ldr	x0, [sp, #40]
     864:	cmp	x0, #0x0
     868:	b.ne	874 <gzwrite+0x28>  // b.any
     86c:	mov	w0, #0x0                   	// #0
     870:	b	8e4 <gzwrite+0x98>
     874:	ldr	x0, [sp, #40]
     878:	str	x0, [sp, #56]
     87c:	ldr	x0, [sp, #56]
     880:	ldr	w1, [x0, #24]
     884:	mov	w0, #0x79b1                	// #31153
     888:	cmp	w1, w0
     88c:	b.ne	8a0 <gzwrite+0x54>  // b.any
     890:	ldr	x0, [sp, #56]
     894:	ldr	w0, [x0, #108]
     898:	cmp	w0, #0x0
     89c:	b.eq	8a8 <gzwrite+0x5c>  // b.none
     8a0:	mov	w0, #0x0                   	// #0
     8a4:	b	8e4 <gzwrite+0x98>
     8a8:	ldr	w0, [sp, #28]
     8ac:	cmp	w0, #0x0
     8b0:	b.ge	8d0 <gzwrite+0x84>  // b.tcont
     8b4:	adrp	x0, 0 <gz_init>
     8b8:	add	x2, x0, #0x0
     8bc:	mov	w1, #0xfffffffd            	// #-3
     8c0:	ldr	x0, [sp, #56]
     8c4:	bl	0 <gz_error>
     8c8:	mov	w0, #0x0                   	// #0
     8cc:	b	8e4 <gzwrite+0x98>
     8d0:	ldr	w0, [sp, #28]
     8d4:	mov	x2, x0
     8d8:	ldr	x1, [sp, #32]
     8dc:	ldr	x0, [sp, #56]
     8e0:	bl	5c4 <gz_write>
     8e4:	ldp	x29, x30, [sp], #64
     8e8:	ret

00000000000008ec <gzfwrite>:
     8ec:	stp	x29, x30, [sp, #-64]!
     8f0:	mov	x29, sp
     8f4:	str	x0, [sp, #40]
     8f8:	str	x1, [sp, #32]
     8fc:	str	x2, [sp, #24]
     900:	str	x3, [sp, #16]
     904:	ldr	x0, [sp, #16]
     908:	cmp	x0, #0x0
     90c:	b.ne	918 <gzfwrite+0x2c>  // b.any
     910:	mov	x0, #0x0                   	// #0
     914:	b	9cc <gzfwrite+0xe0>
     918:	ldr	x0, [sp, #16]
     91c:	str	x0, [sp, #56]
     920:	ldr	x0, [sp, #56]
     924:	ldr	w1, [x0, #24]
     928:	mov	w0, #0x79b1                	// #31153
     92c:	cmp	w1, w0
     930:	b.ne	944 <gzfwrite+0x58>  // b.any
     934:	ldr	x0, [sp, #56]
     938:	ldr	w0, [x0, #108]
     93c:	cmp	w0, #0x0
     940:	b.eq	94c <gzfwrite+0x60>  // b.none
     944:	mov	x0, #0x0                   	// #0
     948:	b	9cc <gzfwrite+0xe0>
     94c:	ldr	x1, [sp, #24]
     950:	ldr	x0, [sp, #32]
     954:	mul	x0, x1, x0
     958:	str	x0, [sp, #48]
     95c:	ldr	x0, [sp, #32]
     960:	cmp	x0, #0x0
     964:	b.eq	99c <gzfwrite+0xb0>  // b.none
     968:	ldr	x1, [sp, #48]
     96c:	ldr	x0, [sp, #32]
     970:	udiv	x0, x1, x0
     974:	ldr	x1, [sp, #24]
     978:	cmp	x1, x0
     97c:	b.eq	99c <gzfwrite+0xb0>  // b.none
     980:	adrp	x0, 0 <gz_init>
     984:	add	x2, x0, #0x0
     988:	mov	w1, #0xfffffffe            	// #-2
     98c:	ldr	x0, [sp, #56]
     990:	bl	0 <gz_error>
     994:	mov	x0, #0x0                   	// #0
     998:	b	9cc <gzfwrite+0xe0>
     99c:	ldr	x0, [sp, #48]
     9a0:	cmp	x0, #0x0
     9a4:	b.eq	9c8 <gzfwrite+0xdc>  // b.none
     9a8:	ldr	x2, [sp, #48]
     9ac:	ldr	x1, [sp, #40]
     9b0:	ldr	x0, [sp, #56]
     9b4:	bl	5c4 <gz_write>
     9b8:	mov	x1, x0
     9bc:	ldr	x0, [sp, #32]
     9c0:	udiv	x0, x1, x0
     9c4:	b	9cc <gzfwrite+0xe0>
     9c8:	mov	x0, #0x0                   	// #0
     9cc:	ldp	x29, x30, [sp], #64
     9d0:	ret

00000000000009d4 <gzputc>:
     9d4:	stp	x29, x30, [sp, #-64]!
     9d8:	mov	x29, sp
     9dc:	str	x0, [sp, #24]
     9e0:	str	w1, [sp, #20]
     9e4:	ldr	x0, [sp, #24]
     9e8:	cmp	x0, #0x0
     9ec:	b.ne	9f8 <gzputc+0x24>  // b.any
     9f0:	mov	w0, #0xffffffff            	// #-1
     9f4:	b	b68 <gzputc+0x194>
     9f8:	ldr	x0, [sp, #24]
     9fc:	str	x0, [sp, #56]
     a00:	ldr	x0, [sp, #56]
     a04:	add	x0, x0, #0x78
     a08:	str	x0, [sp, #48]
     a0c:	ldr	x0, [sp, #56]
     a10:	ldr	w1, [x0, #24]
     a14:	mov	w0, #0x79b1                	// #31153
     a18:	cmp	w1, w0
     a1c:	b.ne	a30 <gzputc+0x5c>  // b.any
     a20:	ldr	x0, [sp, #56]
     a24:	ldr	w0, [x0, #108]
     a28:	cmp	w0, #0x0
     a2c:	b.eq	a38 <gzputc+0x64>  // b.none
     a30:	mov	w0, #0xffffffff            	// #-1
     a34:	b	b68 <gzputc+0x194>
     a38:	ldr	x0, [sp, #56]
     a3c:	ldr	w0, [x0, #104]
     a40:	cmp	w0, #0x0
     a44:	b.eq	a74 <gzputc+0xa0>  // b.none
     a48:	ldr	x0, [sp, #56]
     a4c:	str	wzr, [x0, #104]
     a50:	ldr	x0, [sp, #56]
     a54:	ldr	x0, [x0, #96]
     a58:	mov	x1, x0
     a5c:	ldr	x0, [sp, #56]
     a60:	bl	4a4 <gz_zero>
     a64:	cmn	w0, #0x1
     a68:	b.ne	a74 <gzputc+0xa0>  // b.any
     a6c:	mov	w0, #0xffffffff            	// #-1
     a70:	b	b68 <gzputc+0x194>
     a74:	ldr	x0, [sp, #56]
     a78:	ldr	w0, [x0, #40]
     a7c:	cmp	w0, #0x0
     a80:	b.eq	b30 <gzputc+0x15c>  // b.none
     a84:	ldr	x0, [sp, #48]
     a88:	ldr	w0, [x0, #8]
     a8c:	cmp	w0, #0x0
     a90:	b.ne	aa4 <gzputc+0xd0>  // b.any
     a94:	ldr	x0, [sp, #56]
     a98:	ldr	x1, [x0, #48]
     a9c:	ldr	x0, [sp, #48]
     aa0:	str	x1, [x0]
     aa4:	ldr	x0, [sp, #48]
     aa8:	ldr	x1, [x0]
     aac:	ldr	x0, [sp, #48]
     ab0:	ldr	w0, [x0, #8]
     ab4:	mov	w0, w0
     ab8:	add	x1, x1, x0
     abc:	ldr	x0, [sp, #56]
     ac0:	ldr	x0, [x0, #48]
     ac4:	sub	x0, x1, x0
     ac8:	str	w0, [sp, #44]
     acc:	ldr	x0, [sp, #56]
     ad0:	ldr	w0, [x0, #40]
     ad4:	ldr	w1, [sp, #44]
     ad8:	cmp	w1, w0
     adc:	b.cs	b30 <gzputc+0x15c>  // b.hs, b.nlast
     ae0:	ldr	x0, [sp, #56]
     ae4:	ldr	x1, [x0, #48]
     ae8:	ldr	w0, [sp, #44]
     aec:	add	x0, x1, x0
     af0:	ldr	w1, [sp, #20]
     af4:	and	w1, w1, #0xff
     af8:	strb	w1, [x0]
     afc:	ldr	x0, [sp, #48]
     b00:	ldr	w0, [x0, #8]
     b04:	add	w1, w0, #0x1
     b08:	ldr	x0, [sp, #48]
     b0c:	str	w1, [x0, #8]
     b10:	ldr	x0, [sp, #56]
     b14:	ldr	x0, [x0, #16]
     b18:	add	x1, x0, #0x1
     b1c:	ldr	x0, [sp, #56]
     b20:	str	x1, [x0, #16]
     b24:	ldr	w0, [sp, #20]
     b28:	and	w0, w0, #0xff
     b2c:	b	b68 <gzputc+0x194>
     b30:	ldr	w0, [sp, #20]
     b34:	and	w0, w0, #0xff
     b38:	strb	w0, [sp, #40]
     b3c:	add	x0, sp, #0x28
     b40:	mov	x2, #0x1                   	// #1
     b44:	mov	x1, x0
     b48:	ldr	x0, [sp, #56]
     b4c:	bl	5c4 <gz_write>
     b50:	cmp	x0, #0x1
     b54:	b.eq	b60 <gzputc+0x18c>  // b.none
     b58:	mov	w0, #0xffffffff            	// #-1
     b5c:	b	b68 <gzputc+0x194>
     b60:	ldr	w0, [sp, #20]
     b64:	and	w0, w0, #0xff
     b68:	ldp	x29, x30, [sp], #64
     b6c:	ret

0000000000000b70 <gzputs>:
     b70:	stp	x29, x30, [sp, #-64]!
     b74:	mov	x29, sp
     b78:	str	x0, [sp, #24]
     b7c:	str	x1, [sp, #16]
     b80:	ldr	x0, [sp, #24]
     b84:	cmp	x0, #0x0
     b88:	b.ne	b94 <gzputs+0x24>  // b.any
     b8c:	mov	w0, #0xffffffff            	// #-1
     b90:	b	c0c <gzputs+0x9c>
     b94:	ldr	x0, [sp, #24]
     b98:	str	x0, [sp, #56]
     b9c:	ldr	x0, [sp, #56]
     ba0:	ldr	w1, [x0, #24]
     ba4:	mov	w0, #0x79b1                	// #31153
     ba8:	cmp	w1, w0
     bac:	b.ne	bc0 <gzputs+0x50>  // b.any
     bb0:	ldr	x0, [sp, #56]
     bb4:	ldr	w0, [x0, #108]
     bb8:	cmp	w0, #0x0
     bbc:	b.eq	bc8 <gzputs+0x58>  // b.none
     bc0:	mov	w0, #0xffffffff            	// #-1
     bc4:	b	c0c <gzputs+0x9c>
     bc8:	ldr	x0, [sp, #16]
     bcc:	bl	0 <strlen>
     bd0:	str	x0, [sp, #48]
     bd4:	ldr	x2, [sp, #48]
     bd8:	ldr	x1, [sp, #16]
     bdc:	ldr	x0, [sp, #56]
     be0:	bl	5c4 <gz_write>
     be4:	str	w0, [sp, #44]
     be8:	ldr	w0, [sp, #44]
     bec:	cmp	w0, #0x0
     bf0:	b.ne	c00 <gzputs+0x90>  // b.any
     bf4:	ldr	x0, [sp, #48]
     bf8:	cmp	x0, #0x0
     bfc:	b.ne	c08 <gzputs+0x98>  // b.any
     c00:	ldr	w0, [sp, #44]
     c04:	b	c0c <gzputs+0x9c>
     c08:	mov	w0, #0xffffffff            	// #-1
     c0c:	ldp	x29, x30, [sp], #64
     c10:	ret

0000000000000c14 <gzvprintf>:
     c14:	stp	x29, x30, [sp, #-112]!
     c18:	mov	x29, sp
     c1c:	str	x19, [sp, #16]
     c20:	str	x0, [sp, #72]
     c24:	str	x1, [sp, #64]
     c28:	mov	x19, x2
     c2c:	ldr	x0, [sp, #72]
     c30:	cmp	x0, #0x0
     c34:	b.ne	c40 <gzvprintf+0x2c>  // b.any
     c38:	mov	w0, #0xfffffffe            	// #-2
     c3c:	b	eb4 <gzvprintf+0x2a0>
     c40:	ldr	x0, [sp, #72]
     c44:	str	x0, [sp, #104]
     c48:	ldr	x0, [sp, #104]
     c4c:	add	x0, x0, #0x78
     c50:	str	x0, [sp, #96]
     c54:	ldr	x0, [sp, #104]
     c58:	ldr	w1, [x0, #24]
     c5c:	mov	w0, #0x79b1                	// #31153
     c60:	cmp	w1, w0
     c64:	b.ne	c78 <gzvprintf+0x64>  // b.any
     c68:	ldr	x0, [sp, #104]
     c6c:	ldr	w0, [x0, #108]
     c70:	cmp	w0, #0x0
     c74:	b.eq	c80 <gzvprintf+0x6c>  // b.none
     c78:	mov	w0, #0xfffffffe            	// #-2
     c7c:	b	eb4 <gzvprintf+0x2a0>
     c80:	ldr	x0, [sp, #104]
     c84:	ldr	w0, [x0, #40]
     c88:	cmp	w0, #0x0
     c8c:	b.ne	cac <gzvprintf+0x98>  // b.any
     c90:	ldr	x0, [sp, #104]
     c94:	bl	0 <gz_init>
     c98:	cmn	w0, #0x1
     c9c:	b.ne	cac <gzvprintf+0x98>  // b.any
     ca0:	ldr	x0, [sp, #104]
     ca4:	ldr	w0, [x0, #108]
     ca8:	b	eb4 <gzvprintf+0x2a0>
     cac:	ldr	x0, [sp, #104]
     cb0:	ldr	w0, [x0, #104]
     cb4:	cmp	w0, #0x0
     cb8:	b.eq	cec <gzvprintf+0xd8>  // b.none
     cbc:	ldr	x0, [sp, #104]
     cc0:	str	wzr, [x0, #104]
     cc4:	ldr	x0, [sp, #104]
     cc8:	ldr	x0, [x0, #96]
     ccc:	mov	x1, x0
     cd0:	ldr	x0, [sp, #104]
     cd4:	bl	4a4 <gz_zero>
     cd8:	cmn	w0, #0x1
     cdc:	b.ne	cec <gzvprintf+0xd8>  // b.any
     ce0:	ldr	x0, [sp, #104]
     ce4:	ldr	w0, [x0, #108]
     ce8:	b	eb4 <gzvprintf+0x2a0>
     cec:	ldr	x0, [sp, #96]
     cf0:	ldr	w0, [x0, #8]
     cf4:	cmp	w0, #0x0
     cf8:	b.ne	d0c <gzvprintf+0xf8>  // b.any
     cfc:	ldr	x0, [sp, #104]
     d00:	ldr	x1, [x0, #48]
     d04:	ldr	x0, [sp, #96]
     d08:	str	x1, [x0]
     d0c:	ldr	x0, [sp, #96]
     d10:	ldr	x1, [x0]
     d14:	ldr	x0, [sp, #96]
     d18:	ldr	w0, [x0, #8]
     d1c:	mov	w0, w0
     d20:	add	x0, x1, x0
     d24:	str	x0, [sp, #88]
     d28:	ldr	x0, [sp, #104]
     d2c:	ldr	w0, [x0, #40]
     d30:	sub	w0, w0, #0x1
     d34:	mov	w0, w0
     d38:	ldr	x1, [sp, #88]
     d3c:	add	x0, x1, x0
     d40:	strb	wzr, [x0]
     d44:	ldr	x0, [sp, #104]
     d48:	ldr	w0, [x0, #40]
     d4c:	mov	w4, w0
     d50:	add	x2, sp, #0x20
     d54:	mov	x3, x19
     d58:	ldp	x0, x1, [x3]
     d5c:	stp	x0, x1, [x2]
     d60:	ldp	x0, x1, [x3, #16]
     d64:	stp	x0, x1, [x2, #16]
     d68:	add	x0, sp, #0x20
     d6c:	mov	x3, x0
     d70:	ldr	x2, [sp, #64]
     d74:	mov	x1, x4
     d78:	ldr	x0, [sp, #88]
     d7c:	bl	0 <vsnprintf>
     d80:	str	w0, [sp, #84]
     d84:	ldr	w0, [sp, #84]
     d88:	cmp	w0, #0x0
     d8c:	b.eq	dc8 <gzvprintf+0x1b4>  // b.none
     d90:	ldr	x0, [sp, #104]
     d94:	ldr	w1, [x0, #40]
     d98:	ldr	w0, [sp, #84]
     d9c:	cmp	w1, w0
     da0:	b.ls	dc8 <gzvprintf+0x1b4>  // b.plast
     da4:	ldr	x0, [sp, #104]
     da8:	ldr	w0, [x0, #40]
     dac:	sub	w0, w0, #0x1
     db0:	mov	w0, w0
     db4:	ldr	x1, [sp, #88]
     db8:	add	x0, x1, x0
     dbc:	ldrb	w0, [x0]
     dc0:	cmp	w0, #0x0
     dc4:	b.eq	dd0 <gzvprintf+0x1bc>  // b.none
     dc8:	mov	w0, #0x0                   	// #0
     dcc:	b	eb4 <gzvprintf+0x2a0>
     dd0:	ldr	x0, [sp, #96]
     dd4:	ldr	w1, [x0, #8]
     dd8:	ldr	w0, [sp, #84]
     ddc:	add	w1, w1, w0
     de0:	ldr	x0, [sp, #96]
     de4:	str	w1, [x0, #8]
     de8:	ldr	x0, [sp, #104]
     dec:	ldr	x1, [x0, #16]
     df0:	ldrsw	x0, [sp, #84]
     df4:	add	x1, x1, x0
     df8:	ldr	x0, [sp, #104]
     dfc:	str	x1, [x0, #16]
     e00:	ldr	x0, [sp, #96]
     e04:	ldr	w1, [x0, #8]
     e08:	ldr	x0, [sp, #104]
     e0c:	ldr	w0, [x0, #40]
     e10:	cmp	w1, w0
     e14:	b.cc	eb0 <gzvprintf+0x29c>  // b.lo, b.ul, b.last
     e18:	ldr	x0, [sp, #96]
     e1c:	ldr	w1, [x0, #8]
     e20:	ldr	x0, [sp, #104]
     e24:	ldr	w0, [x0, #40]
     e28:	sub	w0, w1, w0
     e2c:	str	w0, [sp, #80]
     e30:	ldr	x0, [sp, #104]
     e34:	ldr	w1, [x0, #40]
     e38:	ldr	x0, [sp, #96]
     e3c:	str	w1, [x0, #8]
     e40:	mov	w1, #0x0                   	// #0
     e44:	ldr	x0, [sp, #104]
     e48:	bl	1bc <gz_comp>
     e4c:	cmn	w0, #0x1
     e50:	b.ne	e60 <gzvprintf+0x24c>  // b.any
     e54:	ldr	x0, [sp, #104]
     e58:	ldr	w0, [x0, #108]
     e5c:	b	eb4 <gzvprintf+0x2a0>
     e60:	ldr	x0, [sp, #104]
     e64:	ldr	x3, [x0, #48]
     e68:	ldr	x0, [sp, #104]
     e6c:	ldr	x1, [x0, #48]
     e70:	ldr	x0, [sp, #104]
     e74:	ldr	w0, [x0, #40]
     e78:	mov	w0, w0
     e7c:	add	x0, x1, x0
     e80:	ldr	w1, [sp, #80]
     e84:	mov	x2, x1
     e88:	mov	x1, x0
     e8c:	mov	x0, x3
     e90:	bl	0 <memcpy>
     e94:	ldr	x0, [sp, #104]
     e98:	ldr	x1, [x0, #48]
     e9c:	ldr	x0, [sp, #96]
     ea0:	str	x1, [x0]
     ea4:	ldr	x0, [sp, #96]
     ea8:	ldr	w1, [sp, #80]
     eac:	str	w1, [x0, #8]
     eb0:	ldr	w0, [sp, #84]
     eb4:	ldr	x19, [sp, #16]
     eb8:	ldp	x29, x30, [sp], #112
     ebc:	ret

0000000000000ec0 <gzprintf>:
     ec0:	stp	x29, x30, [sp, #-288]!
     ec4:	mov	x29, sp
     ec8:	str	x0, [sp, #56]
     ecc:	str	x1, [sp, #48]
     ed0:	str	x2, [sp, #240]
     ed4:	str	x3, [sp, #248]
     ed8:	str	x4, [sp, #256]
     edc:	str	x5, [sp, #264]
     ee0:	str	x6, [sp, #272]
     ee4:	str	x7, [sp, #280]
     ee8:	str	q0, [sp, #112]
     eec:	str	q1, [sp, #128]
     ef0:	str	q2, [sp, #144]
     ef4:	str	q3, [sp, #160]
     ef8:	str	q4, [sp, #176]
     efc:	str	q5, [sp, #192]
     f00:	str	q6, [sp, #208]
     f04:	str	q7, [sp, #224]
     f08:	add	x0, sp, #0x120
     f0c:	str	x0, [sp, #72]
     f10:	add	x0, sp, #0x120
     f14:	str	x0, [sp, #80]
     f18:	add	x0, sp, #0xf0
     f1c:	str	x0, [sp, #88]
     f20:	mov	w0, #0xffffffd0            	// #-48
     f24:	str	w0, [sp, #96]
     f28:	mov	w0, #0xffffff80            	// #-128
     f2c:	str	w0, [sp, #100]
     f30:	add	x2, sp, #0x10
     f34:	add	x3, sp, #0x48
     f38:	ldp	x0, x1, [x3]
     f3c:	stp	x0, x1, [x2]
     f40:	ldp	x0, x1, [x3, #16]
     f44:	stp	x0, x1, [x2, #16]
     f48:	add	x0, sp, #0x10
     f4c:	mov	x2, x0
     f50:	ldr	x1, [sp, #48]
     f54:	ldr	x0, [sp, #56]
     f58:	bl	c14 <gzvprintf>
     f5c:	str	w0, [sp, #108]
     f60:	ldr	w0, [sp, #108]
     f64:	ldp	x29, x30, [sp], #288
     f68:	ret

0000000000000f6c <gzflush>:
     f6c:	stp	x29, x30, [sp, #-48]!
     f70:	mov	x29, sp
     f74:	str	x0, [sp, #24]
     f78:	str	w1, [sp, #20]
     f7c:	ldr	x0, [sp, #24]
     f80:	cmp	x0, #0x0
     f84:	b.ne	f90 <gzflush+0x24>  // b.any
     f88:	mov	w0, #0xfffffffe            	// #-2
     f8c:	b	1038 <gzflush+0xcc>
     f90:	ldr	x0, [sp, #24]
     f94:	str	x0, [sp, #40]
     f98:	ldr	x0, [sp, #40]
     f9c:	ldr	w1, [x0, #24]
     fa0:	mov	w0, #0x79b1                	// #31153
     fa4:	cmp	w1, w0
     fa8:	b.ne	fbc <gzflush+0x50>  // b.any
     fac:	ldr	x0, [sp, #40]
     fb0:	ldr	w0, [x0, #108]
     fb4:	cmp	w0, #0x0
     fb8:	b.eq	fc4 <gzflush+0x58>  // b.none
     fbc:	mov	w0, #0xfffffffe            	// #-2
     fc0:	b	1038 <gzflush+0xcc>
     fc4:	ldr	w0, [sp, #20]
     fc8:	cmp	w0, #0x0
     fcc:	b.lt	fdc <gzflush+0x70>  // b.tstop
     fd0:	ldr	w0, [sp, #20]
     fd4:	cmp	w0, #0x4
     fd8:	b.le	fe4 <gzflush+0x78>
     fdc:	mov	w0, #0xfffffffe            	// #-2
     fe0:	b	1038 <gzflush+0xcc>
     fe4:	ldr	x0, [sp, #40]
     fe8:	ldr	w0, [x0, #104]
     fec:	cmp	w0, #0x0
     ff0:	b.eq	1024 <gzflush+0xb8>  // b.none
     ff4:	ldr	x0, [sp, #40]
     ff8:	str	wzr, [x0, #104]
     ffc:	ldr	x0, [sp, #40]
    1000:	ldr	x0, [x0, #96]
    1004:	mov	x1, x0
    1008:	ldr	x0, [sp, #40]
    100c:	bl	4a4 <gz_zero>
    1010:	cmn	w0, #0x1
    1014:	b.ne	1024 <gzflush+0xb8>  // b.any
    1018:	ldr	x0, [sp, #40]
    101c:	ldr	w0, [x0, #108]
    1020:	b	1038 <gzflush+0xcc>
    1024:	ldr	w1, [sp, #20]
    1028:	ldr	x0, [sp, #40]
    102c:	bl	1bc <gz_comp>
    1030:	ldr	x0, [sp, #40]
    1034:	ldr	w0, [x0, #108]
    1038:	ldp	x29, x30, [sp], #48
    103c:	ret

0000000000001040 <gzsetparams>:
    1040:	stp	x29, x30, [sp, #-48]!
    1044:	mov	x29, sp
    1048:	str	x0, [sp, #24]
    104c:	str	w1, [sp, #20]
    1050:	str	w2, [sp, #16]
    1054:	ldr	x0, [sp, #24]
    1058:	cmp	x0, #0x0
    105c:	b.ne	1068 <gzsetparams+0x28>  // b.any
    1060:	mov	w0, #0xfffffffe            	// #-2
    1064:	b	1184 <gzsetparams+0x144>
    1068:	ldr	x0, [sp, #24]
    106c:	str	x0, [sp, #40]
    1070:	ldr	x0, [sp, #40]
    1074:	add	x0, x0, #0x78
    1078:	str	x0, [sp, #32]
    107c:	ldr	x0, [sp, #40]
    1080:	ldr	w1, [x0, #24]
    1084:	mov	w0, #0x79b1                	// #31153
    1088:	cmp	w1, w0
    108c:	b.ne	10a0 <gzsetparams+0x60>  // b.any
    1090:	ldr	x0, [sp, #40]
    1094:	ldr	w0, [x0, #108]
    1098:	cmp	w0, #0x0
    109c:	b.eq	10a8 <gzsetparams+0x68>  // b.none
    10a0:	mov	w0, #0xfffffffe            	// #-2
    10a4:	b	1184 <gzsetparams+0x144>
    10a8:	ldr	x0, [sp, #40]
    10ac:	ldr	w0, [x0, #88]
    10b0:	ldr	w1, [sp, #20]
    10b4:	cmp	w1, w0
    10b8:	b.ne	10d8 <gzsetparams+0x98>  // b.any
    10bc:	ldr	x0, [sp, #40]
    10c0:	ldr	w0, [x0, #92]
    10c4:	ldr	w1, [sp, #16]
    10c8:	cmp	w1, w0
    10cc:	b.ne	10d8 <gzsetparams+0x98>  // b.any
    10d0:	mov	w0, #0x0                   	// #0
    10d4:	b	1184 <gzsetparams+0x144>
    10d8:	ldr	x0, [sp, #40]
    10dc:	ldr	w0, [x0, #104]
    10e0:	cmp	w0, #0x0
    10e4:	b.eq	1118 <gzsetparams+0xd8>  // b.none
    10e8:	ldr	x0, [sp, #40]
    10ec:	str	wzr, [x0, #104]
    10f0:	ldr	x0, [sp, #40]
    10f4:	ldr	x0, [x0, #96]
    10f8:	mov	x1, x0
    10fc:	ldr	x0, [sp, #40]
    1100:	bl	4a4 <gz_zero>
    1104:	cmn	w0, #0x1
    1108:	b.ne	1118 <gzsetparams+0xd8>  // b.any
    110c:	ldr	x0, [sp, #40]
    1110:	ldr	w0, [x0, #108]
    1114:	b	1184 <gzsetparams+0x144>
    1118:	ldr	x0, [sp, #40]
    111c:	ldr	w0, [x0, #40]
    1120:	cmp	w0, #0x0
    1124:	b.eq	1168 <gzsetparams+0x128>  // b.none
    1128:	ldr	x0, [sp, #32]
    112c:	ldr	w0, [x0, #8]
    1130:	cmp	w0, #0x0
    1134:	b.eq	1158 <gzsetparams+0x118>  // b.none
    1138:	mov	w1, #0x5                   	// #5
    113c:	ldr	x0, [sp, #40]
    1140:	bl	1bc <gz_comp>
    1144:	cmn	w0, #0x1
    1148:	b.ne	1158 <gzsetparams+0x118>  // b.any
    114c:	ldr	x0, [sp, #40]
    1150:	ldr	w0, [x0, #108]
    1154:	b	1184 <gzsetparams+0x144>
    1158:	ldr	w2, [sp, #16]
    115c:	ldr	w1, [sp, #20]
    1160:	ldr	x0, [sp, #32]
    1164:	bl	0 <deflateParams>
    1168:	ldr	x0, [sp, #40]
    116c:	ldr	w1, [sp, #20]
    1170:	str	w1, [x0, #88]
    1174:	ldr	x0, [sp, #40]
    1178:	ldr	w1, [sp, #16]
    117c:	str	w1, [x0, #92]
    1180:	mov	w0, #0x0                   	// #0
    1184:	ldp	x29, x30, [sp], #48
    1188:	ret

000000000000118c <gzclose_w>:
    118c:	stp	x29, x30, [sp, #-48]!
    1190:	mov	x29, sp
    1194:	str	x0, [sp, #24]
    1198:	str	wzr, [sp, #44]
    119c:	ldr	x0, [sp, #24]
    11a0:	cmp	x0, #0x0
    11a4:	b.ne	11b0 <gzclose_w+0x24>  // b.any
    11a8:	mov	w0, #0xfffffffe            	// #-2
    11ac:	b	12bc <gzclose_w+0x130>
    11b0:	ldr	x0, [sp, #24]
    11b4:	str	x0, [sp, #32]
    11b8:	ldr	x0, [sp, #32]
    11bc:	ldr	w1, [x0, #24]
    11c0:	mov	w0, #0x79b1                	// #31153
    11c4:	cmp	w1, w0
    11c8:	b.eq	11d4 <gzclose_w+0x48>  // b.none
    11cc:	mov	w0, #0xfffffffe            	// #-2
    11d0:	b	12bc <gzclose_w+0x130>
    11d4:	ldr	x0, [sp, #32]
    11d8:	ldr	w0, [x0, #104]
    11dc:	cmp	w0, #0x0
    11e0:	b.eq	1214 <gzclose_w+0x88>  // b.none
    11e4:	ldr	x0, [sp, #32]
    11e8:	str	wzr, [x0, #104]
    11ec:	ldr	x0, [sp, #32]
    11f0:	ldr	x0, [x0, #96]
    11f4:	mov	x1, x0
    11f8:	ldr	x0, [sp, #32]
    11fc:	bl	4a4 <gz_zero>
    1200:	cmn	w0, #0x1
    1204:	b.ne	1214 <gzclose_w+0x88>  // b.any
    1208:	ldr	x0, [sp, #32]
    120c:	ldr	w0, [x0, #108]
    1210:	str	w0, [sp, #44]
    1214:	mov	w1, #0x4                   	// #4
    1218:	ldr	x0, [sp, #32]
    121c:	bl	1bc <gz_comp>
    1220:	cmn	w0, #0x1
    1224:	b.ne	1234 <gzclose_w+0xa8>  // b.any
    1228:	ldr	x0, [sp, #32]
    122c:	ldr	w0, [x0, #108]
    1230:	str	w0, [sp, #44]
    1234:	ldr	x0, [sp, #32]
    1238:	ldr	w0, [x0, #40]
    123c:	cmp	w0, #0x0
    1240:	b.eq	1278 <gzclose_w+0xec>  // b.none
    1244:	ldr	x0, [sp, #32]
    1248:	ldr	w0, [x0, #64]
    124c:	cmp	w0, #0x0
    1250:	b.ne	126c <gzclose_w+0xe0>  // b.any
    1254:	ldr	x0, [sp, #32]
    1258:	add	x0, x0, #0x78
    125c:	bl	0 <deflateEnd>
    1260:	ldr	x0, [sp, #32]
    1264:	ldr	x0, [x0, #56]
    1268:	bl	0 <free>
    126c:	ldr	x0, [sp, #32]
    1270:	ldr	x0, [x0, #48]
    1274:	bl	0 <free>
    1278:	mov	x2, #0x0                   	// #0
    127c:	mov	w1, #0x0                   	// #0
    1280:	ldr	x0, [sp, #32]
    1284:	bl	0 <gz_error>
    1288:	ldr	x0, [sp, #32]
    128c:	ldr	x0, [x0, #32]
    1290:	bl	0 <free>
    1294:	ldr	x0, [sp, #32]
    1298:	ldr	w0, [x0, #28]
    129c:	bl	0 <close>
    12a0:	cmn	w0, #0x1
    12a4:	b.ne	12b0 <gzclose_w+0x124>  // b.any
    12a8:	mov	w0, #0xffffffff            	// #-1
    12ac:	str	w0, [sp, #44]
    12b0:	ldr	x0, [sp, #32]
    12b4:	bl	0 <free>
    12b8:	ldr	w0, [sp, #44]
    12bc:	ldp	x29, x30, [sp], #48
    12c0:	ret
