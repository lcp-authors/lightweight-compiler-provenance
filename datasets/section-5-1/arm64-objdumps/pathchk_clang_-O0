
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//pathchk_clang_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000000980 <_init>:
 980:	stp	x29, x30, [sp, #-16]!
 984:	mov	x29, sp
 988:	bl	ac0 <call_weak_fn>
 98c:	ldp	x29, x30, [sp], #16
 990:	ret

Disassembly of section .plt:

00000000000009a0 <.plt>:
 9a0:	stp	x16, x30, [sp, #-16]!
 9a4:	adrp	x16, 11000 <__FRAME_END__+0xfadc>
 9a8:	ldr	x17, [x16, #4088]
 9ac:	add	x16, x16, #0xff8
 9b0:	br	x17
 9b4:	nop
 9b8:	nop
 9bc:	nop

00000000000009c0 <strlen@plt>:
 9c0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 9c4:	ldr	x17, [x16]
 9c8:	add	x16, x16, #0x0
 9cc:	br	x17

00000000000009d0 <builtin_error@plt>:
 9d0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 9d4:	ldr	x17, [x16, #8]
 9d8:	add	x16, x16, #0x8
 9dc:	br	x17

00000000000009e0 <__cxa_finalize@plt>:
 9e0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 9e4:	ldr	x17, [x16, #16]
 9e8:	add	x16, x16, #0x10
 9ec:	br	x17

00000000000009f0 <builtin_help@plt>:
 9f0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 9f4:	ldr	x17, [x16, #24]
 9f8:	add	x16, x16, #0x18
 9fc:	br	x17

0000000000000a00 <xmalloc@plt>:
 a00:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a04:	ldr	x17, [x16, #32]
 a08:	add	x16, x16, #0x20
 a0c:	br	x17

0000000000000a10 <builtin_usage@plt>:
 a10:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a14:	ldr	x17, [x16, #40]
 a18:	add	x16, x16, #0x28
 a1c:	br	x17

0000000000000a20 <strerror@plt>:
 a20:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a24:	ldr	x17, [x16, #48]
 a28:	add	x16, x16, #0x30
 a2c:	br	x17

0000000000000a30 <__gmon_start__@plt>:
 a30:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a34:	ldr	x17, [x16, #56]
 a38:	add	x16, x16, #0x38
 a3c:	br	x17

0000000000000a40 <access@plt>:
 a40:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a44:	ldr	x17, [x16, #64]
 a48:	add	x16, x16, #0x40
 a4c:	br	x17

0000000000000a50 <free@plt>:
 a50:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a54:	ldr	x17, [x16, #72]
 a58:	add	x16, x16, #0x48
 a5c:	br	x17

0000000000000a60 <internal_getopt@plt>:
 a60:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a64:	ldr	x17, [x16, #80]
 a68:	add	x16, x16, #0x50
 a6c:	br	x17

0000000000000a70 <reset_internal_getopt@plt>:
 a70:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a74:	ldr	x17, [x16, #88]
 a78:	add	x16, x16, #0x58
 a7c:	br	x17

0000000000000a80 <strchr@plt>:
 a80:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a84:	ldr	x17, [x16, #96]
 a88:	add	x16, x16, #0x60
 a8c:	br	x17

0000000000000a90 <strcpy@plt>:
 a90:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a94:	ldr	x17, [x16, #104]
 a98:	add	x16, x16, #0x68
 a9c:	br	x17

0000000000000aa0 <__errno_location@plt>:
 aa0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 aa4:	ldr	x17, [x16, #112]
 aa8:	add	x16, x16, #0x70
 aac:	br	x17

0000000000000ab0 <__xstat@plt>:
 ab0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 ab4:	ldr	x17, [x16, #120]
 ab8:	add	x16, x16, #0x78
 abc:	br	x17

Disassembly of section .text:

0000000000000ac0 <call_weak_fn>:
     ac0:	adrp	x0, 11000 <__FRAME_END__+0xfadc>
     ac4:	ldr	x0, [x0, #4048]
     ac8:	cbz	x0, ad0 <call_weak_fn+0x10>
     acc:	b	a30 <__gmon_start__@plt>
     ad0:	ret
     ad4:	nop

0000000000000ad8 <deregister_tm_clones>:
     ad8:	adrp	x0, 12000 <strlen@GLIBC_2.17>
     adc:	add	x0, x0, #0xf0
     ae0:	adrp	x1, 12000 <strlen@GLIBC_2.17>
     ae4:	add	x1, x1, #0xf0
     ae8:	cmp	x1, x0
     aec:	b.eq	b04 <deregister_tm_clones+0x2c>  // b.none
     af0:	adrp	x1, 11000 <__FRAME_END__+0xfadc>
     af4:	ldr	x1, [x1, #4032]
     af8:	cbz	x1, b04 <deregister_tm_clones+0x2c>
     afc:	mov	x16, x1
     b00:	br	x16
     b04:	ret

0000000000000b08 <register_tm_clones>:
     b08:	adrp	x0, 12000 <strlen@GLIBC_2.17>
     b0c:	add	x0, x0, #0xf0
     b10:	adrp	x1, 12000 <strlen@GLIBC_2.17>
     b14:	add	x1, x1, #0xf0
     b18:	sub	x1, x1, x0
     b1c:	lsr	x2, x1, #63
     b20:	add	x1, x2, x1, asr #3
     b24:	cmp	xzr, x1, asr #1
     b28:	asr	x1, x1, #1
     b2c:	b.eq	b44 <register_tm_clones+0x3c>  // b.none
     b30:	adrp	x2, 11000 <__FRAME_END__+0xfadc>
     b34:	ldr	x2, [x2, #4064]
     b38:	cbz	x2, b44 <register_tm_clones+0x3c>
     b3c:	mov	x16, x2
     b40:	br	x16
     b44:	ret

0000000000000b48 <__do_global_dtors_aux>:
     b48:	stp	x29, x30, [sp, #-32]!
     b4c:	mov	x29, sp
     b50:	str	x19, [sp, #16]
     b54:	adrp	x19, 12000 <strlen@GLIBC_2.17>
     b58:	ldrb	w0, [x19, #240]
     b5c:	cbnz	w0, b84 <__do_global_dtors_aux+0x3c>
     b60:	adrp	x0, 11000 <__FRAME_END__+0xfadc>
     b64:	ldr	x0, [x0, #4040]
     b68:	cbz	x0, b78 <__do_global_dtors_aux+0x30>
     b6c:	adrp	x0, 12000 <strlen@GLIBC_2.17>
     b70:	ldr	x0, [x0, #128]
     b74:	bl	9e0 <__cxa_finalize@plt>
     b78:	bl	ad8 <deregister_tm_clones>
     b7c:	mov	w0, #0x1                   	// #1
     b80:	strb	w0, [x19, #240]
     b84:	ldr	x19, [sp, #16]
     b88:	ldp	x29, x30, [sp], #32
     b8c:	ret

0000000000000b90 <frame_dummy>:
     b90:	b	b08 <register_tm_clones>

0000000000000b94 <pathchk_builtin>:
     b94:	sub	sp, sp, #0x30
     b98:	stp	x29, x30, [sp, #32]
     b9c:	add	x29, sp, #0x20
     ba0:	str	x0, [sp, #16]
     ba4:	bl	a70 <reset_internal_getopt@plt>
     ba8:	ldr	x0, [sp, #16]
     bac:	adrp	x1, 1000 <dir_ok+0x1c>
     bb0:	add	x1, x1, #0x148
     bb4:	bl	a60 <internal_getopt@plt>
     bb8:	str	w0, [sp, #4]
     bbc:	mov	w8, #0xffffffff            	// #-1
     bc0:	cmp	w0, w8
     bc4:	b.eq	c28 <pathchk_builtin+0x94>  // b.none
     bc8:	ldr	w8, [sp, #4]
     bcc:	mov	w9, #0xffffff9d            	// #-99
     bd0:	cmp	w8, w9
     bd4:	str	w8, [sp]
     bd8:	b.eq	c04 <pathchk_builtin+0x70>  // b.none
     bdc:	b	be0 <pathchk_builtin+0x4c>
     be0:	ldr	w8, [sp]
     be4:	cmp	w8, #0x70
     be8:	cset	w9, eq  // eq = none
     bec:	eor	w9, w9, #0x1
     bf0:	tbnz	w9, #0, c14 <pathchk_builtin+0x80>
     bf4:	b	bf8 <pathchk_builtin+0x64>
     bf8:	mov	w8, #0x1                   	// #1
     bfc:	str	w8, [sp, #8]
     c00:	b	c24 <pathchk_builtin+0x90>
     c04:	bl	9f0 <builtin_help@plt>
     c08:	mov	w8, #0x102                 	// #258
     c0c:	stur	w8, [x29, #-4]
     c10:	b	ca4 <pathchk_builtin+0x110>
     c14:	bl	a10 <builtin_usage@plt>
     c18:	mov	w8, #0x102                 	// #258
     c1c:	stur	w8, [x29, #-4]
     c20:	b	ca4 <pathchk_builtin+0x110>
     c24:	b	ba8 <pathchk_builtin+0x14>
     c28:	adrp	x8, 11000 <__FRAME_END__+0xfadc>
     c2c:	ldr	x8, [x8, #4056]
     c30:	ldr	x8, [x8]
     c34:	str	x8, [sp, #16]
     c38:	ldr	x8, [sp, #16]
     c3c:	cbnz	x8, c50 <pathchk_builtin+0xbc>
     c40:	bl	a10 <builtin_usage@plt>
     c44:	mov	w8, #0x102                 	// #258
     c48:	stur	w8, [x29, #-4]
     c4c:	b	ca4 <pathchk_builtin+0x110>
     c50:	str	wzr, [sp, #12]
     c54:	ldr	x8, [sp, #16]
     c58:	cbz	x8, c8c <pathchk_builtin+0xf8>
     c5c:	ldr	x8, [sp, #16]
     c60:	ldr	x8, [x8, #8]
     c64:	ldr	x0, [x8]
     c68:	ldr	w1, [sp, #8]
     c6c:	bl	cb4 <validate_path>
     c70:	ldr	w9, [sp, #12]
     c74:	orr	w9, w9, w0
     c78:	str	w9, [sp, #12]
     c7c:	ldr	x8, [sp, #16]
     c80:	ldr	x8, [x8]
     c84:	str	x8, [sp, #16]
     c88:	b	c54 <pathchk_builtin+0xc0>
     c8c:	ldr	w8, [sp, #12]
     c90:	mov	w9, wzr
     c94:	mov	w10, #0x1                   	// #1
     c98:	cmp	w8, #0x0
     c9c:	csel	w8, w10, w9, ne  // ne = any
     ca0:	stur	w8, [x29, #-4]
     ca4:	ldur	w0, [x29, #-4]
     ca8:	ldp	x29, x30, [sp, #32]
     cac:	add	sp, sp, #0x30
     cb0:	ret

0000000000000cb4 <validate_path>:
     cb4:	sub	sp, sp, #0x60
     cb8:	stp	x29, x30, [sp, #80]
     cbc:	add	x29, sp, #0x50
     cc0:	stur	x0, [x29, #-16]
     cc4:	stur	w1, [x29, #-20]
     cc8:	ldur	w8, [x29, #-20]
     ccc:	cbz	w8, ce8 <validate_path+0x34>
     cd0:	ldur	x0, [x29, #-16]
     cd4:	bl	f28 <portable_chars_only>
     cd8:	cbnz	w0, ce8 <validate_path+0x34>
     cdc:	mov	w8, #0x1                   	// #1
     ce0:	stur	w8, [x29, #-4]
     ce4:	b	f18 <validate_path+0x264>
     ce8:	ldur	x8, [x29, #-16]
     cec:	ldrb	w9, [x8]
     cf0:	cbnz	w9, cfc <validate_path+0x48>
     cf4:	stur	wzr, [x29, #-4]
     cf8:	b	f18 <validate_path+0x264>
     cfc:	ldur	x8, [x29, #-16]
     d00:	ldrb	w9, [x8]
     d04:	adrp	x8, 1000 <dir_ok+0x1c>
     d08:	add	x8, x8, #0x290
     d0c:	adrp	x10, 1000 <dir_ok+0x1c>
     d10:	add	x10, x10, #0x292
     d14:	cmp	w9, #0x2f
     d18:	csel	x0, x10, x8, eq  // eq = none
     d1c:	bl	fb0 <xstrdup>
     d20:	str	x0, [sp, #32]
     d24:	ldur	x8, [x29, #-16]
     d28:	str	x8, [sp, #40]
     d2c:	stur	wzr, [x29, #-28]
     d30:	ldr	x8, [sp, #40]
     d34:	ldrb	w9, [x8]
     d38:	cmp	w9, #0x2f
     d3c:	b.ne	d50 <validate_path+0x9c>  // b.any
     d40:	ldr	x8, [sp, #40]
     d44:	add	x8, x8, #0x1
     d48:	str	x8, [sp, #40]
     d4c:	b	d30 <validate_path+0x7c>
     d50:	ldr	x8, [sp, #40]
     d54:	str	x8, [sp, #16]
     d58:	ldr	x0, [sp, #40]
     d5c:	mov	w1, #0x2f                  	// #47
     d60:	bl	a80 <strchr@plt>
     d64:	str	x0, [sp, #40]
     d68:	ldr	x8, [sp, #40]
     d6c:	cbz	x8, d80 <validate_path+0xcc>
     d70:	ldr	x8, [sp, #40]
     d74:	mov	w9, #0x0                   	// #0
     d78:	strb	w9, [x8]
     d7c:	b	d9c <validate_path+0xe8>
     d80:	mov	w8, #0x1                   	// #1
     d84:	stur	w8, [x29, #-28]
     d88:	ldr	x0, [sp, #16]
     d8c:	mov	w8, wzr
     d90:	mov	w1, w8
     d94:	bl	a80 <strchr@plt>
     d98:	str	x0, [sp, #40]
     d9c:	ldur	w8, [x29, #-28]
     da0:	cbnz	w8, dcc <validate_path+0x118>
     da4:	ldur	x0, [x29, #-16]
     da8:	bl	fe4 <dir_ok>
     dac:	stur	w0, [x29, #-32]
     db0:	ldur	w8, [x29, #-32]
     db4:	cbnz	w8, dcc <validate_path+0x118>
     db8:	ldr	x0, [sp, #32]
     dbc:	bl	a50 <free@plt>
     dc0:	mov	w8, #0x1                   	// #1
     dc4:	stur	w8, [x29, #-4]
     dc8:	b	f18 <validate_path+0x264>
     dcc:	ldr	x8, [sp, #40]
     dd0:	ldr	x9, [sp, #16]
     dd4:	subs	x8, x8, x9
     dd8:	str	w8, [sp, #24]
     ddc:	ldur	w8, [x29, #-20]
     de0:	mov	w10, #0xff                  	// #255
     de4:	mov	w11, #0xe                   	// #14
     de8:	cmp	w8, #0x0
     dec:	csel	w8, w11, w10, ne  // ne = any
     df0:	str	w8, [sp, #28]
     df4:	ldr	w8, [sp, #28]
     df8:	cmp	w8, #0x0
     dfc:	cset	w8, ge  // ge = tcont
     e00:	tbnz	w8, #0, e0c <validate_path+0x158>
     e04:	mov	w8, #0xe                   	// #14
     e08:	str	w8, [sp, #28]
     e0c:	ldr	w8, [sp, #24]
     e10:	ldr	w9, [sp, #28]
     e14:	cmp	w8, w9
     e18:	b.le	e48 <validate_path+0x194>
     e1c:	ldr	x1, [sp, #16]
     e20:	ldr	w2, [sp, #24]
     e24:	ldr	w3, [sp, #28]
     e28:	adrp	x0, 1000 <dir_ok+0x1c>
     e2c:	add	x0, x0, #0x294
     e30:	bl	9d0 <builtin_error@plt>
     e34:	ldr	x0, [sp, #32]
     e38:	bl	a50 <free@plt>
     e3c:	mov	w8, #0x1                   	// #1
     e40:	stur	w8, [x29, #-4]
     e44:	b	f18 <validate_path+0x264>
     e48:	ldur	w8, [x29, #-28]
     e4c:	cbz	w8, e54 <validate_path+0x1a0>
     e50:	b	e8c <validate_path+0x1d8>
     e54:	ldur	w8, [x29, #-32]
     e58:	cmp	w8, #0x1
     e5c:	b.ne	e74 <validate_path+0x1c0>  // b.any
     e60:	ldr	x0, [sp, #32]
     e64:	bl	a50 <free@plt>
     e68:	ldur	x0, [x29, #-16]
     e6c:	bl	fb0 <xstrdup>
     e70:	str	x0, [sp, #32]
     e74:	ldr	x8, [sp, #40]
     e78:	add	x9, x8, #0x1
     e7c:	str	x9, [sp, #40]
     e80:	mov	w10, #0x2f                  	// #47
     e84:	strb	w10, [x8]
     e88:	b	d30 <validate_path+0x7c>
     e8c:	ldur	w8, [x29, #-20]
     e90:	mov	w9, #0x1000                	// #4096
     e94:	mov	w10, #0x100                 	// #256
     e98:	cmp	w8, #0x0
     e9c:	csel	w8, w10, w9, ne  // ne = any
     ea0:	stur	w8, [x29, #-24]
     ea4:	ldur	w8, [x29, #-24]
     ea8:	cmp	w8, #0x0
     eac:	cset	w8, ge  // ge = tcont
     eb0:	tbnz	w8, #0, ebc <validate_path+0x208>
     eb4:	mov	w8, #0x100                 	// #256
     eb8:	stur	w8, [x29, #-24]
     ebc:	ldr	x0, [sp, #32]
     ec0:	bl	a50 <free@plt>
     ec4:	ldur	x0, [x29, #-16]
     ec8:	bl	9c0 <strlen@plt>
     ecc:	ldursw	x8, [x29, #-24]
     ed0:	cmp	x0, x8
     ed4:	b.ls	f14 <validate_path+0x260>  // b.plast
     ed8:	ldur	x1, [x29, #-16]
     edc:	ldur	x0, [x29, #-16]
     ee0:	str	x1, [sp, #8]
     ee4:	bl	9c0 <strlen@plt>
     ee8:	ldur	w3, [x29, #-24]
     eec:	adrp	x8, 1000 <dir_ok+0x1c>
     ef0:	add	x8, x8, #0x2c1
     ef4:	str	x0, [sp]
     ef8:	mov	x0, x8
     efc:	ldr	x1, [sp, #8]
     f00:	ldr	x2, [sp]
     f04:	bl	9d0 <builtin_error@plt>
     f08:	mov	w9, #0x1                   	// #1
     f0c:	stur	w9, [x29, #-4]
     f10:	b	f18 <validate_path+0x264>
     f14:	stur	wzr, [x29, #-4]
     f18:	ldur	w0, [x29, #-4]
     f1c:	ldp	x29, x30, [sp, #80]
     f20:	add	sp, sp, #0x60
     f24:	ret

0000000000000f28 <portable_chars_only>:
     f28:	sub	sp, sp, #0x30
     f2c:	stp	x29, x30, [sp, #32]
     f30:	add	x29, sp, #0x20
     f34:	str	x0, [sp, #16]
     f38:	ldr	x8, [sp, #16]
     f3c:	str	x8, [sp, #8]
     f40:	ldr	x8, [sp, #8]
     f44:	ldrb	w9, [x8]
     f48:	cbz	w9, f98 <portable_chars_only+0x70>
     f4c:	ldr	x8, [sp, #8]
     f50:	ldrb	w9, [x8]
     f54:	mov	w8, w9
     f58:	adrp	x10, 1000 <dir_ok+0x1c>
     f5c:	add	x10, x10, #0x35d
     f60:	ldrb	w9, [x10, x8]
     f64:	cbnz	w9, f88 <portable_chars_only+0x60>
     f68:	ldr	x1, [sp, #16]
     f6c:	ldr	x8, [sp, #8]
     f70:	ldrb	w2, [x8]
     f74:	adrp	x0, 1000 <dir_ok+0x1c>
     f78:	add	x0, x0, #0x2ef
     f7c:	bl	9d0 <builtin_error@plt>
     f80:	stur	wzr, [x29, #-4]
     f84:	b	fa0 <portable_chars_only+0x78>
     f88:	ldr	x8, [sp, #8]
     f8c:	add	x8, x8, #0x1
     f90:	str	x8, [sp, #8]
     f94:	b	f40 <portable_chars_only+0x18>
     f98:	mov	w8, #0x1                   	// #1
     f9c:	stur	w8, [x29, #-4]
     fa0:	ldur	w0, [x29, #-4]
     fa4:	ldp	x29, x30, [sp, #32]
     fa8:	add	sp, sp, #0x30
     fac:	ret

0000000000000fb0 <xstrdup>:
     fb0:	sub	sp, sp, #0x20
     fb4:	stp	x29, x30, [sp, #16]
     fb8:	add	x29, sp, #0x10
     fbc:	str	x0, [sp, #8]
     fc0:	ldr	x0, [sp, #8]
     fc4:	bl	9c0 <strlen@plt>
     fc8:	add	x0, x0, #0x1
     fcc:	bl	a00 <xmalloc@plt>
     fd0:	ldr	x1, [sp, #8]
     fd4:	bl	a90 <strcpy@plt>
     fd8:	ldp	x29, x30, [sp, #16]
     fdc:	add	sp, sp, #0x20
     fe0:	ret

0000000000000fe4 <dir_ok>:
     fe4:	sub	sp, sp, #0xb0
     fe8:	stp	x29, x30, [sp, #160]
     fec:	add	x29, sp, #0xa0
     ff0:	add	x1, sp, #0x10
     ff4:	stur	x0, [x29, #-16]
     ff8:	ldur	x0, [x29, #-16]
     ffc:	bl	10bc <safe_stat>
    1000:	cbz	w0, 1010 <dir_ok+0x2c>
    1004:	mov	w8, #0x2                   	// #2
    1008:	stur	w8, [x29, #-4]
    100c:	b	10ac <dir_ok+0xc8>
    1010:	ldr	w8, [sp, #32]
    1014:	and	w8, w8, #0xf000
    1018:	cmp	w8, #0x4, lsl #12
    101c:	b.eq	1038 <dir_ok+0x54>  // b.none
    1020:	ldur	x1, [x29, #-16]
    1024:	adrp	x0, 1000 <dir_ok+0x1c>
    1028:	add	x0, x0, #0x31d
    102c:	bl	9d0 <builtin_error@plt>
    1030:	stur	wzr, [x29, #-4]
    1034:	b	10ac <dir_ok+0xc8>
    1038:	ldur	x0, [x29, #-16]
    103c:	mov	w1, #0x1                   	// #1
    1040:	bl	a40 <access@plt>
    1044:	cbz	w0, 10a4 <dir_ok+0xc0>
    1048:	bl	aa0 <__errno_location@plt>
    104c:	ldr	w8, [x0]
    1050:	cmp	w8, #0xd
    1054:	b.ne	106c <dir_ok+0x88>  // b.any
    1058:	ldur	x1, [x29, #-16]
    105c:	adrp	x0, 1000 <dir_ok+0x1c>
    1060:	add	x0, x0, #0x335
    1064:	bl	9d0 <builtin_error@plt>
    1068:	b	109c <dir_ok+0xb8>
    106c:	ldur	x1, [x29, #-16]
    1070:	str	x1, [sp, #8]
    1074:	bl	aa0 <__errno_location@plt>
    1078:	ldr	w0, [x0]
    107c:	bl	a20 <strerror@plt>
    1080:	adrp	x8, 1000 <dir_ok+0x1c>
    1084:	add	x8, x8, #0x356
    1088:	str	x0, [sp]
    108c:	mov	x0, x8
    1090:	ldr	x1, [sp, #8]
    1094:	ldr	x2, [sp]
    1098:	bl	9d0 <builtin_error@plt>
    109c:	stur	wzr, [x29, #-4]
    10a0:	b	10ac <dir_ok+0xc8>
    10a4:	mov	w8, #0x1                   	// #1
    10a8:	stur	w8, [x29, #-4]
    10ac:	ldur	w0, [x29, #-4]
    10b0:	ldp	x29, x30, [sp, #160]
    10b4:	add	sp, sp, #0xb0
    10b8:	ret

00000000000010bc <safe_stat>:
    10bc:	sub	sp, sp, #0x30
    10c0:	stp	x29, x30, [sp, #32]
    10c4:	add	x29, sp, #0x20
    10c8:	stur	x0, [x29, #-8]
    10cc:	str	x1, [sp, #16]
    10d0:	ldur	x0, [x29, #-8]
    10d4:	ldr	x1, [sp, #16]
    10d8:	bl	1128 <__stat>
    10dc:	str	w0, [sp, #12]
    10e0:	ldr	w8, [sp, #12]
    10e4:	cmp	w8, #0x0
    10e8:	cset	w8, ge  // ge = tcont
    10ec:	mov	w9, #0x0                   	// #0
    10f0:	str	w9, [sp, #8]
    10f4:	tbnz	w8, #0, 110c <safe_stat+0x50>
    10f8:	bl	aa0 <__errno_location@plt>
    10fc:	ldr	w8, [x0]
    1100:	cmp	w8, #0x4
    1104:	cset	w8, eq  // eq = none
    1108:	str	w8, [sp, #8]
    110c:	ldr	w8, [sp, #8]
    1110:	tbnz	w8, #0, 10d0 <safe_stat+0x14>
    1114:	ldr	w0, [sp, #12]
    1118:	ldp	x29, x30, [sp, #32]
    111c:	add	sp, sp, #0x30
    1120:	ret
    1124:	nop

0000000000001128 <__stat>:
    1128:	mov	x2, x1
    112c:	mov	x1, x0
    1130:	mov	w0, #0x0                   	// #0
    1134:	b	ab0 <__xstat@plt>

Disassembly of section .fini:

0000000000001138 <_fini>:
    1138:	stp	x29, x30, [sp, #-16]!
    113c:	mov	x29, sp
    1140:	ldp	x29, x30, [sp], #16
    1144:	ret
