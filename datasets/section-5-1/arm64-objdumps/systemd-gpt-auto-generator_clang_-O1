
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//systemd-gpt-auto-generator_clang_-O1:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000212dc8 <_start>:
  212dc8:	mov	x29, #0x0                   	// #0
  212dcc:	mov	x30, #0x0                   	// #0
  212dd0:	mov	x5, x0
  212dd4:	ldr	x1, [sp]
  212dd8:	add	x2, sp, #0x8
  212ddc:	mov	x6, sp
  212de0:	movz	x0, #0x0, lsl #48
  212de4:	movk	x0, #0x0, lsl #32
  212de8:	movk	x0, #0x21, lsl #16
  212dec:	movk	x0, #0x2f18
  212df0:	movz	x3, #0x0, lsl #48
  212df4:	movk	x3, #0x0, lsl #32
  212df8:	movk	x3, #0x21, lsl #16
  212dfc:	movk	x3, #0x5b20
  212e00:	movz	x4, #0x0, lsl #48
  212e04:	movk	x4, #0x0, lsl #32
  212e08:	movk	x4, #0x21, lsl #16
  212e0c:	movk	x4, #0x5ba0
  212e10:	bl	215bf0 <__libc_start_main@plt>
  212e14:	bl	215c00 <abort@plt>

0000000000212e18 <call_weak_fn>:
  212e18:	adrp	x0, 226000 <_DYNAMIC>
  212e1c:	ldr	x0, [x0, #464]
  212e20:	cbz	x0, 212e28 <call_weak_fn+0x10>
  212e24:	b	215c10 <__gmon_start__@plt>
  212e28:	ret

0000000000212e2c <deregister_tm_clones>:
  212e2c:	adrp	x0, 236000 <_DYNAMIC+0x10000>
  212e30:	add	x0, x0, #0x400
  212e34:	adrp	x1, 236000 <_DYNAMIC+0x10000>
  212e38:	add	x1, x1, #0x400
  212e3c:	cmp	x0, x1
  212e40:	b.eq	212e74 <deregister_tm_clones+0x48>  // b.none
  212e44:	stp	x29, x30, [sp, #-32]!
  212e48:	mov	x29, sp
  212e4c:	adrp	x0, 201000 <__FRAME_END__-0x1cd0>
  212e50:	ldr	x0, [x0, #2168]
  212e54:	str	x0, [sp, #24]
  212e58:	mov	x1, x0
  212e5c:	cbz	x1, 212e6c <deregister_tm_clones+0x40>
  212e60:	adrp	x0, 236000 <_DYNAMIC+0x10000>
  212e64:	add	x0, x0, #0x400
  212e68:	blr	x1
  212e6c:	ldp	x29, x30, [sp], #32
  212e70:	ret
  212e74:	ret

0000000000212e78 <register_tm_clones>:
  212e78:	adrp	x0, 236000 <_DYNAMIC+0x10000>
  212e7c:	add	x0, x0, #0x400
  212e80:	adrp	x1, 236000 <_DYNAMIC+0x10000>
  212e84:	add	x1, x1, #0x400
  212e88:	sub	x0, x0, x1
  212e8c:	lsr	x1, x0, #63
  212e90:	add	x0, x1, x0, asr #3
  212e94:	cmp	xzr, x0, asr #1
  212e98:	b.eq	212ed0 <register_tm_clones+0x58>  // b.none
  212e9c:	stp	x29, x30, [sp, #-32]!
  212ea0:	mov	x29, sp
  212ea4:	asr	x1, x0, #1
  212ea8:	adrp	x0, 201000 <__FRAME_END__-0x1cd0>
  212eac:	ldr	x0, [x0, #2176]
  212eb0:	str	x0, [sp, #24]
  212eb4:	mov	x2, x0
  212eb8:	cbz	x2, 212ec8 <register_tm_clones+0x50>
  212ebc:	adrp	x0, 236000 <_DYNAMIC+0x10000>
  212ec0:	add	x0, x0, #0x400
  212ec4:	blr	x2
  212ec8:	ldp	x29, x30, [sp], #32
  212ecc:	ret
  212ed0:	ret

0000000000212ed4 <__do_global_dtors_aux>:
  212ed4:	adrp	x0, 236000 <_DYNAMIC+0x10000>
  212ed8:	ldrb	w0, [x0, #1040]
  212edc:	cbnz	w0, 212f00 <__do_global_dtors_aux+0x2c>
  212ee0:	stp	x29, x30, [sp, #-16]!
  212ee4:	mov	x29, sp
  212ee8:	bl	212e2c <deregister_tm_clones>
  212eec:	adrp	x0, 236000 <_DYNAMIC+0x10000>
  212ef0:	mov	w1, #0x1                   	// #1
  212ef4:	strb	w1, [x0, #1040]
  212ef8:	ldp	x29, x30, [sp], #16
  212efc:	ret
  212f00:	ret

0000000000212f04 <frame_dummy>:
  212f04:	stp	x29, x30, [sp, #-16]!
  212f08:	mov	x29, sp
  212f0c:	bl	212e78 <register_tm_clones>
  212f10:	ldp	x29, x30, [sp], #16
  212f14:	ret

0000000000212f18 <main>:
  212f18:	stp	x29, x30, [sp, #-32]!
  212f1c:	stp	x20, x19, [sp, #16]
  212f20:	mov	x29, sp
  212f24:	mov	x19, x1
  212f28:	mov	w20, w0
  212f2c:	bl	212fd0 <save_argc_argv>
  212f30:	bl	215c20 <log_setup_generator@plt>
  212f34:	cmp	w20, #0x2
  212f38:	b.lt	212f84 <main+0x6c>  // b.tstop
  212f3c:	cmp	w20, #0x4
  212f40:	b.eq	212f84 <main+0x6c>  // b.none
  212f44:	mov	w0, wzr
  212f48:	bl	215c30 <log_get_max_level_realm@plt>
  212f4c:	cmp	w0, #0x3
  212f50:	b.lt	212fc0 <main+0xa8>  // b.tstop
  212f54:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  212f58:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  212f5c:	adrp	x5, 202000 <__FRAME_END__-0xcd0>
  212f60:	mov	w1, #0x16                  	// #22
  212f64:	add	x2, x2, #0xb08
  212f68:	add	x4, x4, #0x709
  212f6c:	add	x5, x5, #0x46a
  212f70:	mov	w0, #0x3                   	// #3
  212f74:	movk	w1, #0x4000, lsl #16
  212f78:	mov	w3, #0x333                 	// #819
  212f7c:	bl	215c40 <log_internal_realm@plt>
  212f80:	b	212fc4 <main+0xac>
  212f84:	cmp	w20, #0x2
  212f88:	b.lt	212f94 <main+0x7c>  // b.tstop
  212f8c:	ldr	x0, [x19, #24]
  212f90:	b	212f9c <main+0x84>
  212f94:	adrp	x0, 202000 <__FRAME_END__-0xcd0>
  212f98:	add	x0, x0, #0x894
  212f9c:	bl	212fe4 <run>
  212fa0:	mov	w19, w0
  212fa4:	bl	215c50 <ask_password_agent_close@plt>
  212fa8:	bl	215c60 <polkit_agent_close@plt>
  212fac:	bl	215c70 <pager_close@plt>
  212fb0:	bl	215c80 <mac_selinux_finish@plt>
  212fb4:	bl	213140 <static_destruct>
  212fb8:	lsr	w0, w19, #31
  212fbc:	b	212fc4 <main+0xac>
  212fc0:	mov	w0, #0xffffffea            	// #-22
  212fc4:	ldp	x20, x19, [sp, #16]
  212fc8:	ldp	x29, x30, [sp], #32
  212fcc:	ret

0000000000212fd0 <save_argc_argv>:
  212fd0:	adrp	x8, 236000 <_DYNAMIC+0x10000>
  212fd4:	adrp	x9, 236000 <_DYNAMIC+0x10000>
  212fd8:	str	w0, [x8, #1056]
  212fdc:	str	x1, [x9, #1064]
  212fe0:	ret

0000000000212fe4 <run>:
  212fe4:	stp	x29, x30, [sp, #-32]!
  212fe8:	adrp	x8, 236000 <_DYNAMIC+0x10000>
  212fec:	str	x19, [sp, #16]
  212ff0:	mov	x29, sp
  212ff4:	str	x0, [x8, #1048]
  212ff8:	cbz	x0, 213120 <run+0x13c>
  212ffc:	bl	215c90 <detect_container@plt>
  213000:	cmp	w0, #0x1
  213004:	b.lt	21304c <run+0x68>  // b.tstop
  213008:	mov	w0, wzr
  21300c:	bl	215c30 <log_get_max_level_realm@plt>
  213010:	cmp	w0, #0x7
  213014:	mov	w19, wzr
  213018:	b.lt	213110 <run+0x12c>  // b.tstop
  21301c:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  213020:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  213024:	adrp	x5, 201000 <__FRAME_END__-0x1cd0>
  213028:	add	x2, x2, #0xb08
  21302c:	add	x4, x4, #0x829
  213030:	add	x5, x5, #0xe98
  213034:	mov	w0, #0x7                   	// #7
  213038:	mov	w3, #0x31a                 	// #794
  21303c:	mov	w1, wzr
  213040:	bl	215c40 <log_internal_realm@plt>
  213044:	mov	w19, wzr
  213048:	b	213110 <run+0x12c>
  21304c:	adrp	x0, 213000 <run+0x1c>
  213050:	add	x0, x0, #0x1a0
  213054:	mov	x1, xzr
  213058:	mov	w2, wzr
  21305c:	bl	215ca0 <proc_cmdline_parse@plt>
  213060:	mov	w19, w0
  213064:	tbz	w0, #31, 2130a0 <run+0xbc>
  213068:	mov	w0, wzr
  21306c:	bl	215c30 <log_get_max_level_realm@plt>
  213070:	cmp	w0, #0x4
  213074:	b.lt	2130a0 <run+0xbc>  // b.tstop
  213078:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  21307c:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  213080:	adrp	x5, 201000 <__FRAME_END__-0x1cd0>
  213084:	add	x2, x2, #0xb08
  213088:	add	x4, x4, #0x829
  21308c:	add	x5, x5, #0xad7
  213090:	mov	w0, #0x4                   	// #4
  213094:	mov	w3, #0x320                 	// #800
  213098:	mov	w1, w19
  21309c:	bl	215c40 <log_internal_realm@plt>
  2130a0:	adrp	x8, 236000 <_DYNAMIC+0x10000>
  2130a4:	ldrb	w8, [x8, #1024]
  2130a8:	cbz	w8, 2130d8 <run+0xf4>
  2130ac:	adrp	x8, 236000 <_DYNAMIC+0x10000>
  2130b0:	ldrb	w8, [x8, #1028]
  2130b4:	cbz	w8, 2130c0 <run+0xdc>
  2130b8:	bl	21333c <add_root_mount>
  2130bc:	mov	w19, w0
  2130c0:	bl	215cb0 <in_initrd@plt>
  2130c4:	tbnz	w0, #0, 213110 <run+0x12c>
  2130c8:	bl	2134d8 <add_mounts>
  2130cc:	cmp	w19, #0x0
  2130d0:	csel	w0, w0, w19, ge  // ge = tcont
  2130d4:	b	213114 <run+0x130>
  2130d8:	mov	w0, wzr
  2130dc:	bl	215c30 <log_get_max_level_realm@plt>
  2130e0:	cmp	w0, #0x7
  2130e4:	mov	w19, wzr
  2130e8:	b.lt	213110 <run+0x12c>  // b.tstop
  2130ec:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  2130f0:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  2130f4:	adrp	x5, 202000 <__FRAME_END__-0xcd0>
  2130f8:	add	x2, x2, #0xb08
  2130fc:	add	x4, x4, #0x829
  213100:	add	x5, x5, #0x93b
  213104:	mov	w0, #0x7                   	// #7
  213108:	mov	w3, #0x323                 	// #803
  21310c:	b	21303c <run+0x58>
  213110:	mov	w0, w19
  213114:	ldr	x19, [sp, #16]
  213118:	ldp	x29, x30, [sp], #32
  21311c:	ret
  213120:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  213124:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  213128:	adrp	x4, 201000 <__FRAME_END__-0x1cd0>
  21312c:	add	x1, x1, #0x888
  213130:	add	x2, x2, #0xb08
  213134:	add	x4, x4, #0xf56
  213138:	mov	w3, #0x317                 	// #791
  21313c:	bl	215cc0 <log_assert_failed_realm@plt>

0000000000213140 <static_destruct>:
  213140:	stp	x29, x30, [sp, #-32]!
  213144:	stp	x20, x19, [sp, #16]
  213148:	adrp	x8, 226000 <_DYNAMIC>
  21314c:	ldr	x8, [x8, #472]
  213150:	mov	x29, sp
  213154:	cbz	x8, 213194 <static_destruct+0x54>
  213158:	adrp	x0, 226000 <_DYNAMIC>
  21315c:	ldr	x0, [x0, #472]
  213160:	bl	215b10 <ALIGN_TO>
  213164:	adrp	x20, 226000 <_DYNAMIC>
  213168:	ldr	x20, [x20, #480]
  21316c:	cmp	x0, x20
  213170:	b.cs	213194 <static_destruct+0x54>  // b.hs, b.nlast
  213174:	mov	x19, x0
  213178:	ldp	x0, x8, [x19]
  21317c:	blr	x8
  213180:	add	x0, x19, #0x10
  213184:	bl	215b10 <ALIGN_TO>
  213188:	mov	x19, x0
  21318c:	cmp	x0, x20
  213190:	b.cc	213178 <static_destruct+0x38>  // b.lo, b.ul, b.last
  213194:	ldp	x20, x19, [sp, #16]
  213198:	ldp	x29, x30, [sp], #32
  21319c:	ret

00000000002131a0 <parse_proc_cmdline_item>:
  2131a0:	stp	x29, x30, [sp, #-32]!
  2131a4:	stp	x20, x19, [sp, #16]
  2131a8:	mov	x29, sp
  2131ac:	cbz	x0, 21331c <parse_proc_cmdline_item+0x17c>
  2131b0:	mov	x19, x1
  2131b4:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  2131b8:	add	x1, x1, #0x82d
  2131bc:	mov	x20, x0
  2131c0:	bl	215cd0 <proc_cmdline_key_streq@plt>
  2131c4:	tbnz	w0, #0, 2131dc <parse_proc_cmdline_item+0x3c>
  2131c8:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  2131cc:	add	x1, x1, #0x89d
  2131d0:	mov	x0, x20
  2131d4:	bl	215cd0 <proc_cmdline_key_streq@plt>
  2131d8:	tbz	w0, #0, 21324c <parse_proc_cmdline_item+0xac>
  2131dc:	cbz	x19, 213204 <parse_proc_cmdline_item+0x64>
  2131e0:	mov	x0, x19
  2131e4:	bl	215ce0 <parse_boolean@plt>
  2131e8:	mov	w20, w0
  2131ec:	tbnz	w20, #31, 21320c <parse_proc_cmdline_item+0x6c>
  2131f0:	cmp	w20, #0x0
  2131f4:	cset	w8, ne  // ne = any
  2131f8:	adrp	x9, 236000 <_DYNAMIC+0x10000>
  2131fc:	strb	w8, [x9, #1024]
  213200:	b	21330c <parse_proc_cmdline_item+0x16c>
  213204:	mov	w20, #0x1                   	// #1
  213208:	tbz	w20, #31, 2131f0 <parse_proc_cmdline_item+0x50>
  21320c:	mov	w0, wzr
  213210:	bl	215c30 <log_get_max_level_realm@plt>
  213214:	cmp	w0, #0x4
  213218:	b.lt	21330c <parse_proc_cmdline_item+0x16c>  // b.tstop
  21321c:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  213220:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  213224:	adrp	x5, 202000 <__FRAME_END__-0xcd0>
  213228:	add	x2, x2, #0xb08
  21322c:	add	x4, x4, #0x3a2
  213230:	add	x5, x5, #0x8d
  213234:	mov	w0, #0x4                   	// #4
  213238:	mov	w3, #0x296                 	// #662
  21323c:	mov	w1, w20
  213240:	mov	x6, x19
  213244:	bl	215c40 <log_internal_realm@plt>
  213248:	b	21330c <parse_proc_cmdline_item+0x16c>
  21324c:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  213250:	add	x1, x1, #0x70e
  213254:	mov	x0, x20
  213258:	bl	215cd0 <proc_cmdline_key_streq@plt>
  21325c:	tbz	w0, #0, 213294 <parse_proc_cmdline_item+0xf4>
  213260:	mov	x0, x20
  213264:	mov	x1, x19
  213268:	bl	213738 <proc_cmdline_value_missing>
  21326c:	tbnz	w0, #0, 21330c <parse_proc_cmdline_item+0x16c>
  213270:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  213274:	add	x1, x1, #0x767
  213278:	mov	x0, x19
  21327c:	bl	215cf0 <strcmp@plt>
  213280:	cmp	w0, #0x0
  213284:	cset	w8, eq  // eq = none
  213288:	adrp	x9, 236000 <_DYNAMIC+0x10000>
  21328c:	strb	w8, [x9, #1028]
  213290:	b	21330c <parse_proc_cmdline_item+0x16c>
  213294:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  213298:	add	x1, x1, #0x496
  21329c:	mov	x0, x20
  2132a0:	bl	215cd0 <proc_cmdline_key_streq@plt>
  2132a4:	tbz	w0, #0, 2132c4 <parse_proc_cmdline_item+0x124>
  2132a8:	mov	x0, x20
  2132ac:	mov	x1, x19
  2132b0:	bl	213738 <proc_cmdline_value_missing>
  2132b4:	tbnz	w0, #0, 21330c <parse_proc_cmdline_item+0x16c>
  2132b8:	adrp	x8, 236000 <_DYNAMIC+0x10000>
  2132bc:	strb	wzr, [x8, #1028]
  2132c0:	b	21330c <parse_proc_cmdline_item+0x16c>
  2132c4:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  2132c8:	add	x1, x1, #0xe30
  2132cc:	mov	x0, x20
  2132d0:	bl	215cd0 <proc_cmdline_key_streq@plt>
  2132d4:	cbnz	x19, 2132ec <parse_proc_cmdline_item+0x14c>
  2132d8:	tbz	w0, #0, 2132ec <parse_proc_cmdline_item+0x14c>
  2132dc:	adrp	x8, 236000 <_DYNAMIC+0x10000>
  2132e0:	mov	w9, #0x1                   	// #1
  2132e4:	str	w9, [x8, #1032]
  2132e8:	b	21330c <parse_proc_cmdline_item+0x16c>
  2132ec:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  2132f0:	add	x1, x1, #0x49f
  2132f4:	mov	x0, x20
  2132f8:	bl	215cd0 <proc_cmdline_key_streq@plt>
  2132fc:	cbnz	x19, 21330c <parse_proc_cmdline_item+0x16c>
  213300:	tbz	w0, #0, 21330c <parse_proc_cmdline_item+0x16c>
  213304:	adrp	x8, 236000 <_DYNAMIC+0x10000>
  213308:	str	wzr, [x8, #1032]
  21330c:	ldp	x20, x19, [sp, #16]
  213310:	mov	w0, wzr
  213314:	ldp	x29, x30, [sp], #32
  213318:	ret
  21331c:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  213320:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  213324:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  213328:	add	x1, x1, #0xb66
  21332c:	add	x2, x2, #0xb08
  213330:	add	x4, x4, #0x4d
  213334:	mov	w3, #0x28f                 	// #655
  213338:	bl	215cc0 <log_assert_failed_realm@plt>

000000000021333c <add_root_mount>:
  21333c:	stp	x29, x30, [sp, #-32]!
  213340:	stp	x20, x19, [sp, #16]
  213344:	mov	x29, sp
  213348:	bl	215d00 <is_efi_boot@plt>
  21334c:	tbz	w0, #0, 213398 <add_root_mount+0x5c>
  213350:	mov	x0, xzr
  213354:	bl	215d10 <efi_loader_get_device_part_uuid@plt>
  213358:	cmn	w0, #0x2
  21335c:	b.ne	2133dc <add_root_mount+0xa0>  // b.any
  213360:	mov	w0, wzr
  213364:	bl	215c30 <log_get_max_level_realm@plt>
  213368:	cmp	w0, #0x7
  21336c:	mov	w0, wzr
  213370:	b.lt	2134cc <add_root_mount+0x190>  // b.tstop
  213374:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  213378:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  21337c:	adrp	x5, 202000 <__FRAME_END__-0xcd0>
  213380:	add	x2, x2, #0xb08
  213384:	add	x4, x4, #0xa57
  213388:	add	x5, x5, #0xc22
  21338c:	mov	w0, #0x7                   	// #7
  213390:	mov	w3, #0x2cb                 	// #715
  213394:	b	2133cc <add_root_mount+0x90>
  213398:	mov	w0, wzr
  21339c:	bl	215c30 <log_get_max_level_realm@plt>
  2133a0:	cmp	w0, #0x7
  2133a4:	mov	w0, wzr
  2133a8:	b.lt	2134cc <add_root_mount+0x190>  // b.tstop
  2133ac:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  2133b0:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  2133b4:	adrp	x5, 202000 <__FRAME_END__-0xcd0>
  2133b8:	add	x2, x2, #0xb08
  2133bc:	add	x4, x4, #0xa57
  2133c0:	add	x5, x5, #0xb34
  2133c4:	mov	w0, #0x7                   	// #7
  2133c8:	mov	w3, #0x2c5                 	// #709
  2133cc:	mov	w1, wzr
  2133d0:	bl	215c40 <log_internal_realm@plt>
  2133d4:	mov	w0, wzr
  2133d8:	b	2134cc <add_root_mount+0x190>
  2133dc:	mov	w19, w0
  2133e0:	tbnz	w0, #31, 213484 <add_root_mount+0x148>
  2133e4:	bl	215cb0 <in_initrd@plt>
  2133e8:	tbz	w0, #0, 21340c <add_root_mount+0xd0>
  2133ec:	adrp	x8, 236000 <_DYNAMIC+0x10000>
  2133f0:	ldr	x0, [x8, #1048]
  2133f4:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  2133f8:	add	x1, x1, #0xc0
  2133fc:	bl	215d20 <generator_write_initrd_root_device_deps@plt>
  213400:	tbnz	w0, #31, 2133d4 <add_root_mount+0x98>
  213404:	bl	2137a0 <add_root_cryptsetup>
  213408:	tbnz	w0, #31, 2134cc <add_root_mount+0x190>
  21340c:	bl	215cb0 <in_initrd@plt>
  213410:	adrp	x9, 236000 <_DYNAMIC+0x10000>
  213414:	ldr	w9, [x9, #1032]
  213418:	adrp	x8, 201000 <__FRAME_END__-0x1cd0>
  21341c:	adrp	x10, 202000 <__FRAME_END__-0xcd0>
  213420:	add	x8, x8, #0x94d
  213424:	add	x10, x10, #0x4a2
  213428:	tst	w0, #0x1
  21342c:	csel	x19, x10, x8, ne  // ne = any
  213430:	cmp	w9, #0x0
  213434:	cset	w20, gt
  213438:	bl	215cb0 <in_initrd@plt>
  21343c:	adrp	x8, 201000 <__FRAME_END__-0x1cd0>
  213440:	adrp	x9, 202000 <__FRAME_END__-0xcd0>
  213444:	add	x8, x8, #0xc6c
  213448:	add	x9, x9, #0x859
  21344c:	tst	w0, #0x1
  213450:	adrp	x0, 202000 <__FRAME_END__-0xcd0>
  213454:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  213458:	adrp	x6, 201000 <__FRAME_END__-0x1cd0>
  21345c:	csel	x7, x9, x8, ne  // ne = any
  213460:	add	x0, x0, #0x70e
  213464:	add	x1, x1, #0xc0
  213468:	add	x6, x6, #0xa63
  21346c:	mov	x2, x19
  213470:	mov	x3, xzr
  213474:	mov	w4, w20
  213478:	mov	x5, xzr
  21347c:	bl	2137d0 <add_mount>
  213480:	b	2134cc <add_root_mount+0x190>
  213484:	mov	w0, wzr
  213488:	bl	215c30 <log_get_max_level_realm@plt>
  21348c:	cmp	w0, #0x3
  213490:	b.lt	2134c0 <add_root_mount+0x184>  // b.tstop
  213494:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  213498:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  21349c:	adrp	x5, 201000 <__FRAME_END__-0x1cd0>
  2134a0:	add	x2, x2, #0xb08
  2134a4:	add	x4, x4, #0xa57
  2134a8:	add	x5, x5, #0xb6a
  2134ac:	mov	w0, #0x3                   	// #3
  2134b0:	mov	w3, #0x2ce                 	// #718
  2134b4:	mov	w1, w19
  2134b8:	bl	215c40 <log_internal_realm@plt>
  2134bc:	b	2134cc <add_root_mount+0x190>
  2134c0:	mov	w8, wzr
  2134c4:	neg	w9, w19
  2134c8:	sub	w0, w8, w9, uxtb
  2134cc:	ldp	x20, x19, [sp, #16]
  2134d0:	ldp	x29, x30, [sp], #32
  2134d4:	ret

00000000002134d8 <add_mounts>:
  2134d8:	sub	sp, sp, #0x40
  2134dc:	stp	x29, x30, [sp, #32]
  2134e0:	add	x29, sp, #0x20
  2134e4:	adrp	x0, 201000 <__FRAME_END__-0x1cd0>
  2134e8:	add	x0, x0, #0x94d
  2134ec:	sub	x1, x29, #0x8
  2134f0:	stp	x20, x19, [sp, #48]
  2134f4:	bl	215d30 <get_block_device_harder@plt>
  2134f8:	mov	w19, w0
  2134fc:	tbnz	w0, #31, 213510 <add_mounts+0x38>
  213500:	cbz	w19, 213550 <add_mounts+0x78>
  213504:	ldur	x0, [x29, #-8]
  213508:	bl	2143b4 <enumerate_partitions>
  21350c:	b	213548 <add_mounts+0x70>
  213510:	mov	w0, wzr
  213514:	bl	215c30 <log_get_max_level_realm@plt>
  213518:	cmp	w0, #0x3
  21351c:	b.lt	213600 <add_mounts+0x128>  // b.tstop
  213520:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  213524:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  213528:	adrp	x5, 201000 <__FRAME_END__-0x1cd0>
  21352c:	add	x2, x2, #0xb08
  213530:	add	x4, x4, #0x879
  213534:	add	x5, x5, #0xca2
  213538:	mov	w0, #0x3                   	// #3
  21353c:	mov	w3, #0x2f5                 	// #757
  213540:	mov	w1, w19
  213544:	bl	215c40 <log_internal_realm@plt>
  213548:	mov	w19, w0
  21354c:	b	21360c <add_mounts+0x134>
  213550:	adrp	x0, 202000 <__FRAME_END__-0xcd0>
  213554:	add	x0, x0, #0xbc9
  213558:	sub	x1, x29, #0x8
  21355c:	bl	215d30 <get_block_device_harder@plt>
  213560:	mov	w19, w0
  213564:	tbnz	w0, #31, 2135cc <add_mounts+0xf4>
  213568:	cbnz	w19, 213504 <add_mounts+0x2c>
  21356c:	adrp	x0, 202000 <__FRAME_END__-0xcd0>
  213570:	add	x0, x0, #0xd3
  213574:	add	x1, sp, #0x10
  213578:	str	xzr, [sp, #16]
  21357c:	bl	215d40 <readlink_malloc@plt>
  213580:	cmn	w0, #0x2
  213584:	b.ne	213620 <add_mounts+0x148>  // b.any
  213588:	mov	w0, wzr
  21358c:	bl	215c30 <log_get_max_level_realm@plt>
  213590:	cmp	w0, #0x7
  213594:	b.lt	2135c0 <add_mounts+0xe8>  // b.tstop
  213598:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  21359c:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  2135a0:	adrp	x5, 202000 <__FRAME_END__-0xcd0>
  2135a4:	add	x2, x2, #0xb08
  2135a8:	add	x4, x4, #0x879
  2135ac:	add	x5, x5, #0x1f5
  2135b0:	mov	w0, #0x7                   	// #7
  2135b4:	mov	w3, #0x303                 	// #771
  2135b8:	mov	w1, wzr
  2135bc:	bl	215c40 <log_internal_realm@plt>
  2135c0:	mov	w20, wzr
  2135c4:	mov	w19, wzr
  2135c8:	b	213728 <add_mounts+0x250>
  2135cc:	mov	w0, wzr
  2135d0:	bl	215c30 <log_get_max_level_realm@plt>
  2135d4:	cmp	w0, #0x3
  2135d8:	b.lt	213600 <add_mounts+0x128>  // b.tstop
  2135dc:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  2135e0:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  2135e4:	adrp	x5, 201000 <__FRAME_END__-0x1cd0>
  2135e8:	add	x2, x2, #0xb08
  2135ec:	add	x4, x4, #0x879
  2135f0:	add	x5, x5, #0xcdb
  2135f4:	mov	w0, #0x3                   	// #3
  2135f8:	mov	w3, #0x2f9                 	// #761
  2135fc:	b	213540 <add_mounts+0x68>
  213600:	mov	w8, wzr
  213604:	neg	w9, w19
  213608:	sub	w19, w8, w9, uxtb
  21360c:	mov	w0, w19
  213610:	ldp	x20, x19, [sp, #48]
  213614:	ldp	x29, x30, [sp, #32]
  213618:	add	sp, sp, #0x40
  21361c:	ret
  213620:	mov	w19, w0
  213624:	tbnz	w0, #31, 213654 <add_mounts+0x17c>
  213628:	ldr	x0, [sp, #16]
  21362c:	add	x1, sp, #0xc
  213630:	sub	x2, x29, #0x8
  213634:	bl	215d50 <device_path_parse_major_minor@plt>
  213638:	tbnz	w0, #31, 21368c <add_mounts+0x1b4>
  21363c:	ldr	w8, [sp, #12]
  213640:	and	w8, w8, #0xf000
  213644:	cmp	w8, #0x6, lsl #12
  213648:	b.ne	2136d8 <add_mounts+0x200>  // b.any
  21364c:	mov	w20, #0x1                   	// #1
  213650:	b	213728 <add_mounts+0x250>
  213654:	mov	w0, wzr
  213658:	bl	215c30 <log_get_max_level_realm@plt>
  21365c:	cmp	w0, #0x3
  213660:	b.lt	2136c8 <add_mounts+0x1f0>  // b.tstop
  213664:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  213668:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  21366c:	adrp	x5, 201000 <__FRAME_END__-0x1cd0>
  213670:	add	x2, x2, #0xb08
  213674:	add	x4, x4, #0x879
  213678:	add	x5, x5, #0x9f8
  21367c:	mov	w0, #0x3                   	// #3
  213680:	mov	w3, #0x307                 	// #775
  213684:	mov	w1, w19
  213688:	b	213710 <add_mounts+0x238>
  21368c:	mov	w19, w0
  213690:	mov	w0, wzr
  213694:	bl	215c30 <log_get_max_level_realm@plt>
  213698:	cmp	w0, #0x3
  21369c:	b.lt	2136c8 <add_mounts+0x1f0>  // b.tstop
  2136a0:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  2136a4:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  2136a8:	adrp	x5, 201000 <__FRAME_END__-0x1cd0>
  2136ac:	add	x2, x2, #0xb08
  2136b0:	add	x4, x4, #0x879
  2136b4:	add	x5, x5, #0xb98
  2136b8:	mov	w0, #0x3                   	// #3
  2136bc:	mov	w3, #0x30b                 	// #779
  2136c0:	mov	w1, w19
  2136c4:	b	213710 <add_mounts+0x238>
  2136c8:	mov	w20, wzr
  2136cc:	neg	w8, w19
  2136d0:	sub	w19, w20, w8, uxtb
  2136d4:	b	213728 <add_mounts+0x250>
  2136d8:	mov	w0, wzr
  2136dc:	bl	215c30 <log_get_max_level_realm@plt>
  2136e0:	cmp	w0, #0x3
  2136e4:	b.lt	213720 <add_mounts+0x248>  // b.tstop
  2136e8:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  2136ec:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  2136f0:	adrp	x5, 202000 <__FRAME_END__-0xcd0>
  2136f4:	mov	w1, #0xf                   	// #15
  2136f8:	add	x2, x2, #0xb08
  2136fc:	add	x4, x4, #0x879
  213700:	add	x5, x5, #0x333
  213704:	mov	w0, #0x3                   	// #3
  213708:	movk	w1, #0x4000, lsl #16
  21370c:	mov	w3, #0x30d                 	// #781
  213710:	bl	215c40 <log_internal_realm@plt>
  213714:	mov	w19, w0
  213718:	mov	w20, wzr
  21371c:	b	213728 <add_mounts+0x250>
  213720:	mov	w20, wzr
  213724:	mov	w19, #0xfffffff1            	// #-15
  213728:	add	x0, sp, #0x10
  21372c:	bl	2142bc <freep>
  213730:	cbnz	w20, 213504 <add_mounts+0x2c>
  213734:	b	21360c <add_mounts+0x134>

0000000000213738 <proc_cmdline_value_missing>:
  213738:	stp	x29, x30, [sp, #-32]!
  21373c:	str	x19, [sp, #16]
  213740:	mov	x29, sp
  213744:	cbz	x1, 213750 <proc_cmdline_value_missing+0x18>
  213748:	mov	w0, wzr
  21374c:	b	213794 <proc_cmdline_value_missing+0x5c>
  213750:	mov	x19, x0
  213754:	mov	w0, wzr
  213758:	bl	215c30 <log_get_max_level_realm@plt>
  21375c:	cmp	w0, #0x4
  213760:	b.lt	213790 <proc_cmdline_value_missing+0x58>  // b.tstop
  213764:	adrp	x2, 201000 <__FRAME_END__-0x1cd0>
  213768:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  21376c:	adrp	x5, 202000 <__FRAME_END__-0xcd0>
  213770:	add	x2, x2, #0xf8b
  213774:	add	x4, x4, #0x83e
  213778:	add	x5, x5, #0x3f3
  21377c:	mov	w0, #0x4                   	// #4
  213780:	mov	w3, #0x21                  	// #33
  213784:	mov	w1, wzr
  213788:	mov	x6, x19
  21378c:	bl	215c40 <log_internal_realm@plt>
  213790:	mov	w0, #0x1                   	// #1
  213794:	ldr	x19, [sp, #16]
  213798:	ldp	x29, x30, [sp], #32
  21379c:	ret

00000000002137a0 <add_root_cryptsetup>:
  2137a0:	stp	x29, x30, [sp, #-16]!
  2137a4:	adrp	x0, 202000 <__FRAME_END__-0xcd0>
  2137a8:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  2137ac:	add	x0, x0, #0x70e
  2137b0:	add	x1, x1, #0xa66
  2137b4:	mov	w2, #0x1                   	// #1
  2137b8:	mov	w3, wzr
  2137bc:	mov	x4, xzr
  2137c0:	mov	x29, sp
  2137c4:	bl	213bd8 <add_cryptsetup>
  2137c8:	ldp	x29, x30, [sp], #16
  2137cc:	ret

00000000002137d0 <add_mount>:
  2137d0:	sub	sp, sp, #0x90
  2137d4:	stp	x29, x30, [sp, #48]
  2137d8:	add	x29, sp, #0x30
  2137dc:	stp	x28, x27, [sp, #64]
  2137e0:	stp	x26, x25, [sp, #80]
  2137e4:	stp	x24, x23, [sp, #96]
  2137e8:	stp	x22, x21, [sp, #112]
  2137ec:	stp	x20, x19, [sp, #128]
  2137f0:	stp	xzr, xzr, [x29, #-16]
  2137f4:	stp	xzr, xzr, [sp, #16]
  2137f8:	cbz	x0, 213b4c <add_mount+0x37c>
  2137fc:	mov	x24, x1
  213800:	cbz	x1, 213b6c <add_mount+0x39c>
  213804:	mov	x22, x2
  213808:	cbz	x2, 213b90 <add_mount+0x3c0>
  21380c:	mov	x25, x6
  213810:	cbz	x6, 213bb4 <add_mount+0x3e4>
  213814:	mov	x26, x0
  213818:	mov	w0, wzr
  21381c:	mov	x19, x7
  213820:	mov	x20, x5
  213824:	mov	w21, w4
  213828:	mov	x23, x3
  21382c:	bl	215c30 <log_get_max_level_realm@plt>
  213830:	cmp	w0, #0x7
  213834:	b.lt	213878 <add_mount+0xa8>  // b.tstop
  213838:	mov	x0, x23
  21383c:	bl	21434c <strna>
  213840:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  213844:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  213848:	adrp	x5, 202000 <__FRAME_END__-0xcd0>
  21384c:	mov	x8, x0
  213850:	add	x2, x2, #0xb08
  213854:	add	x4, x4, #0x86f
  213858:	add	x5, x5, #0x713
  21385c:	mov	w0, #0x7                   	// #7
  213860:	mov	w3, #0xa5                  	// #165
  213864:	mov	w1, wzr
  213868:	mov	x6, x22
  21386c:	mov	x7, x24
  213870:	str	x8, [sp]
  213874:	bl	215c40 <log_internal_realm@plt>
  213878:	mov	x0, x23
  21387c:	bl	214360 <streq_ptr>
  213880:	tbz	w0, #0, 2138a8 <add_mount+0xd8>
  213884:	and	w2, w21, #0x1
  213888:	sub	x4, x29, #0x10
  21388c:	mov	w3, #0x1                   	// #1
  213890:	mov	x0, x26
  213894:	mov	x1, x24
  213898:	bl	213bd8 <add_cryptsetup>
  21389c:	tbnz	w0, #31, 213aec <add_mount+0x31c>
  2138a0:	ldur	x24, [x29, #-16]
  2138a4:	mov	x23, xzr
  2138a8:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  2138ac:	add	x1, x1, #0x74e
  2138b0:	sub	x2, x29, #0x8
  2138b4:	mov	x0, x22
  2138b8:	bl	215d60 <unit_name_from_path@plt>
  2138bc:	tbnz	w0, #31, 2139a8 <add_mount+0x1d8>
  2138c0:	adrp	x28, 236000 <_DYNAMIC+0x10000>
  2138c4:	ldr	x0, [x28, #1048]
  2138c8:	bl	214384 <empty_to_root>
  2138cc:	ldur	x1, [x29, #-8]
  2138d0:	mov	x2, #0xffffffffffffffff    	// #-1
  2138d4:	bl	215d70 <path_join_internal@plt>
  2138d8:	str	x0, [sp, #24]
  2138dc:	cbz	x0, 2139e8 <add_mount+0x218>
  2138e0:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  2138e4:	add	x1, x1, #0x94e
  2138e8:	mov	x26, x0
  2138ec:	bl	215d80 <fopen64@plt>
  2138f0:	str	x0, [sp, #16]
  2138f4:	cbz	x0, 213a14 <add_mount+0x244>
  2138f8:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  2138fc:	add	x1, x1, #0x78f
  213900:	mov	x2, x25
  213904:	mov	x27, x0
  213908:	bl	215d90 <fprintf@plt>
  21390c:	cbz	x19, 213924 <add_mount+0x154>
  213910:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  213914:	add	x1, x1, #0xc61
  213918:	mov	x0, x27
  21391c:	mov	x2, x19
  213920:	bl	215d90 <fprintf@plt>
  213924:	ldr	x1, [x28, #1048]
  213928:	mov	x0, x27
  21392c:	mov	x2, x24
  213930:	mov	x3, x22
  213934:	mov	x4, x23
  213938:	mov	x25, x28
  21393c:	bl	215da0 <generator_write_fsck_deps@plt>
  213940:	tbnz	w0, #31, 213aec <add_mount+0x31c>
  213944:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  213948:	add	x1, x1, #0x318
  21394c:	mov	x0, x27
  213950:	mov	x2, x24
  213954:	mov	x3, x22
  213958:	bl	215d90 <fprintf@plt>
  21395c:	cbz	x23, 213974 <add_mount+0x1a4>
  213960:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  213964:	add	x1, x1, #0xb15
  213968:	mov	x0, x27
  21396c:	mov	x2, x23
  213970:	bl	215d90 <fprintf@plt>
  213974:	adrp	x8, 202000 <__FRAME_END__-0xcd0>
  213978:	adrp	x9, 201000 <__FRAME_END__-0x1cd0>
  21397c:	add	x8, x8, #0x49f
  213980:	add	x9, x9, #0xe30
  213984:	tst	w21, #0x1
  213988:	csel	x3, x9, x8, ne  // ne = any
  21398c:	cbz	x20, 213a6c <add_mount+0x29c>
  213990:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  213994:	add	x1, x1, #0xef7
  213998:	mov	x0, x27
  21399c:	mov	x2, x20
  2139a0:	bl	215d90 <fprintf@plt>
  2139a4:	b	213a80 <add_mount+0x2b0>
  2139a8:	mov	w26, w0
  2139ac:	mov	w0, wzr
  2139b0:	bl	215c30 <log_get_max_level_realm@plt>
  2139b4:	cmp	w0, #0x3
  2139b8:	b.lt	213a04 <add_mount+0x234>  // b.tstop
  2139bc:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  2139c0:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  2139c4:	adrp	x5, 201000 <__FRAME_END__-0x1cd0>
  2139c8:	add	x2, x2, #0xb08
  2139cc:	add	x4, x4, #0x86f
  2139d0:	add	x5, x5, #0xc40
  2139d4:	mov	w0, #0x3                   	// #3
  2139d8:	mov	w3, #0xb3                  	// #179
  2139dc:	mov	w1, w26
  2139e0:	bl	215c40 <log_internal_realm@plt>
  2139e4:	b	213aec <add_mount+0x31c>
  2139e8:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  2139ec:	adrp	x3, 202000 <__FRAME_END__-0xcd0>
  2139f0:	add	x1, x1, #0xb08
  2139f4:	add	x3, x3, #0x86f
  2139f8:	mov	w2, #0xb7                  	// #183
  2139fc:	bl	215db0 <log_oom_internal@plt>
  213a00:	b	213aec <add_mount+0x31c>
  213a04:	mov	w8, wzr
  213a08:	neg	w9, w26
  213a0c:	sub	w28, w8, w9, uxtb
  213a10:	b	213af0 <add_mount+0x320>
  213a14:	bl	215dc0 <__errno_location@plt>
  213a18:	ldr	w19, [x0]
  213a1c:	mov	w0, wzr
  213a20:	bl	215c30 <log_get_max_level_realm@plt>
  213a24:	cmp	w0, #0x3
  213a28:	b.lt	213a58 <add_mount+0x288>  // b.tstop
  213a2c:	ldur	x6, [x29, #-8]
  213a30:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  213a34:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  213a38:	adrp	x5, 202000 <__FRAME_END__-0xcd0>
  213a3c:	add	x2, x2, #0xb08
  213a40:	add	x4, x4, #0x86f
  213a44:	add	x5, x5, #0x952
  213a48:	mov	w0, #0x3                   	// #3
  213a4c:	mov	w3, #0xbb                  	// #187
  213a50:	mov	w1, w19
  213a54:	b	213ae8 <add_mount+0x318>
  213a58:	cmp	w19, #0x0
  213a5c:	mov	w8, wzr
  213a60:	cneg	w9, w19, mi  // mi = first
  213a64:	sub	w28, w8, w9, uxtb
  213a68:	b	213af0 <add_mount+0x320>
  213a6c:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  213a70:	add	x1, x1, #0x9eb
  213a74:	mov	x0, x27
  213a78:	mov	x2, x3
  213a7c:	bl	215d90 <fprintf@plt>
  213a80:	mov	x0, x27
  213a84:	bl	215dd0 <fflush_and_check@plt>
  213a88:	tbnz	w0, #31, 213aac <add_mount+0x2dc>
  213a8c:	cbz	x19, 213b34 <add_mount+0x364>
  213a90:	ldr	x0, [x25, #1048]
  213a94:	ldur	x3, [x29, #-8]
  213a98:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  213a9c:	add	x2, x2, #0xb8e
  213aa0:	mov	x1, x19
  213aa4:	bl	215de0 <generator_add_symlink@plt>
  213aa8:	b	213aec <add_mount+0x31c>
  213aac:	mov	w20, w0
  213ab0:	mov	w0, wzr
  213ab4:	bl	215c30 <log_get_max_level_realm@plt>
  213ab8:	cmp	w0, #0x3
  213abc:	b.lt	213b3c <add_mount+0x36c>  // b.tstop
  213ac0:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  213ac4:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  213ac8:	adrp	x5, 201000 <__FRAME_END__-0x1cd0>
  213acc:	add	x2, x2, #0xb08
  213ad0:	add	x4, x4, #0x86f
  213ad4:	add	x5, x5, #0x9d7
  213ad8:	mov	w0, #0x3                   	// #3
  213adc:	mov	w3, #0xdc                  	// #220
  213ae0:	mov	w1, w20
  213ae4:	mov	x6, x26
  213ae8:	bl	215c40 <log_internal_realm@plt>
  213aec:	mov	w28, w0
  213af0:	add	x0, sp, #0x10
  213af4:	bl	2142d4 <fclosep>
  213af8:	add	x0, sp, #0x18
  213afc:	bl	2142bc <freep>
  213b00:	sub	x0, x29, #0x10
  213b04:	bl	2142bc <freep>
  213b08:	sub	x0, x29, #0x8
  213b0c:	bl	2142bc <freep>
  213b10:	mov	w0, w28
  213b14:	ldp	x20, x19, [sp, #128]
  213b18:	ldp	x22, x21, [sp, #112]
  213b1c:	ldp	x24, x23, [sp, #96]
  213b20:	ldp	x26, x25, [sp, #80]
  213b24:	ldp	x28, x27, [sp, #64]
  213b28:	ldp	x29, x30, [sp, #48]
  213b2c:	add	sp, sp, #0x90
  213b30:	ret
  213b34:	mov	w28, wzr
  213b38:	b	213af0 <add_mount+0x320>
  213b3c:	mov	w8, wzr
  213b40:	neg	w9, w20
  213b44:	sub	w28, w8, w9, uxtb
  213b48:	b	213af0 <add_mount+0x320>
  213b4c:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  213b50:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  213b54:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  213b58:	add	x1, x1, #0xc7c
  213b5c:	add	x2, x2, #0xb08
  213b60:	add	x4, x4, #0x974
  213b64:	mov	w3, #0xa0                  	// #160
  213b68:	bl	215cc0 <log_assert_failed_realm@plt>
  213b6c:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  213b70:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  213b74:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  213b78:	add	x1, x1, #0xc3b
  213b7c:	add	x2, x2, #0xb08
  213b80:	add	x4, x4, #0x974
  213b84:	mov	w3, #0xa1                  	// #161
  213b88:	mov	w0, wzr
  213b8c:	bl	215cc0 <log_assert_failed_realm@plt>
  213b90:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  213b94:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  213b98:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  213b9c:	add	x1, x1, #0xb97
  213ba0:	add	x2, x2, #0xb08
  213ba4:	add	x4, x4, #0x974
  213ba8:	mov	w3, #0xa2                  	// #162
  213bac:	mov	w0, wzr
  213bb0:	bl	215cc0 <log_assert_failed_realm@plt>
  213bb4:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  213bb8:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  213bbc:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  213bc0:	add	x1, x1, #0xfaa
  213bc4:	add	x2, x2, #0xb08
  213bc8:	add	x4, x4, #0x974
  213bcc:	mov	w3, #0xa3                  	// #163
  213bd0:	mov	w0, wzr
  213bd4:	bl	215cc0 <log_assert_failed_realm@plt>

0000000000213bd8 <add_cryptsetup>:
  213bd8:	stp	x29, x30, [sp, #-96]!
  213bdc:	str	x27, [sp, #16]
  213be0:	stp	x26, x25, [sp, #32]
  213be4:	stp	x24, x23, [sp, #48]
  213be8:	stp	x22, x21, [sp, #64]
  213bec:	stp	x20, x19, [sp, #80]
  213bf0:	mov	x29, sp
  213bf4:	sub	sp, sp, #0x50
  213bf8:	str	xzr, [x29, #24]
  213bfc:	stp	xzr, xzr, [x29, #-16]
  213c00:	stp	xzr, xzr, [x29, #-32]
  213c04:	stur	xzr, [x29, #-40]
  213c08:	cbz	x0, 2141e8 <add_cryptsetup+0x610>
  213c0c:	mov	x24, x1
  213c10:	cbz	x1, 214208 <add_cryptsetup+0x630>
  213c14:	adrp	x22, 202000 <__FRAME_END__-0xcd0>
  213c18:	add	x22, x22, #0x1c9
  213c1c:	mov	w21, w2
  213c20:	mov	x20, x0
  213c24:	sub	x2, x29, #0x10
  213c28:	mov	x0, x24
  213c2c:	mov	x1, x22
  213c30:	mov	x19, x4
  213c34:	mov	w23, w3
  213c38:	bl	215d60 <unit_name_from_path@plt>
  213c3c:	tbnz	w0, #31, 213cd0 <add_cryptsetup+0xf8>
  213c40:	mov	x0, x20
  213c44:	bl	215df0 <unit_name_escape@plt>
  213c48:	str	x0, [x29, #24]
  213c4c:	cbz	x0, 213d08 <add_cryptsetup+0x130>
  213c50:	mov	x1, x0
  213c54:	adrp	x0, 202000 <__FRAME_END__-0xcd0>
  213c58:	adrp	x2, 201000 <__FRAME_END__-0x1cd0>
  213c5c:	add	x0, x0, #0x770
  213c60:	add	x2, x2, #0xda3
  213c64:	sub	x3, x29, #0x8
  213c68:	bl	215e00 <unit_name_build@plt>
  213c6c:	tbnz	w0, #31, 213d20 <add_cryptsetup+0x148>
  213c70:	mov	x0, x20
  213c74:	bl	2142ec <specifier_escape>
  213c78:	stur	x0, [x29, #-24]
  213c7c:	cbz	x0, 213d70 <add_cryptsetup+0x198>
  213c80:	mov	x0, x24
  213c84:	bl	2142ec <specifier_escape>
  213c88:	stur	x0, [x29, #-32]
  213c8c:	cbz	x0, 213d88 <add_cryptsetup+0x1b0>
  213c90:	adrp	x27, 236000 <_DYNAMIC+0x10000>
  213c94:	ldur	x8, [x29, #-8]
  213c98:	ldr	x26, [x27, #1048]
  213c9c:	mov	x25, x8
  213ca0:	ldrb	w8, [x8]
  213ca4:	cmp	w8, #0x2f
  213ca8:	b.ne	213cbc <add_cryptsetup+0xe4>  // b.any
  213cac:	mov	x8, x25
  213cb0:	ldrb	w9, [x8, #1]!
  213cb4:	cmp	w9, #0x2f
  213cb8:	b.eq	213c9c <add_cryptsetup+0xc4>  // b.none
  213cbc:	mov	x0, x26
  213cc0:	bl	214310 <isempty>
  213cc4:	tbz	w0, #0, 213df8 <add_cryptsetup+0x220>
  213cc8:	mov	x24, x25
  213ccc:	b	213e84 <add_cryptsetup+0x2ac>
  213cd0:	mov	w25, w0
  213cd4:	mov	w0, wzr
  213cd8:	bl	215c30 <log_get_max_level_realm@plt>
  213cdc:	cmp	w0, #0x3
  213ce0:	b.lt	213d60 <add_cryptsetup+0x188>  // b.tstop
  213ce4:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  213ce8:	adrp	x4, 201000 <__FRAME_END__-0x1cd0>
  213cec:	adrp	x5, 201000 <__FRAME_END__-0x1cd0>
  213cf0:	add	x2, x2, #0xb08
  213cf4:	add	x4, x4, #0xeb1
  213cf8:	add	x5, x5, #0xc40
  213cfc:	mov	w0, #0x3                   	// #3
  213d00:	mov	w3, #0x35                  	// #53
  213d04:	b	213d54 <add_cryptsetup+0x17c>
  213d08:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  213d0c:	adrp	x3, 201000 <__FRAME_END__-0x1cd0>
  213d10:	add	x1, x1, #0xb08
  213d14:	add	x3, x3, #0xeb1
  213d18:	mov	w2, #0x39                  	// #57
  213d1c:	b	213d9c <add_cryptsetup+0x1c4>
  213d20:	mov	w25, w0
  213d24:	mov	w0, wzr
  213d28:	bl	215c30 <log_get_max_level_realm@plt>
  213d2c:	cmp	w0, #0x3
  213d30:	b.lt	213d60 <add_cryptsetup+0x188>  // b.tstop
  213d34:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  213d38:	adrp	x4, 201000 <__FRAME_END__-0x1cd0>
  213d3c:	adrp	x5, 201000 <__FRAME_END__-0x1cd0>
  213d40:	add	x2, x2, #0xb08
  213d44:	add	x4, x4, #0xeb1
  213d48:	add	x5, x5, #0xc40
  213d4c:	mov	w0, #0x3                   	// #3
  213d50:	mov	w3, #0x3d                  	// #61
  213d54:	mov	w1, w25
  213d58:	bl	215c40 <log_internal_realm@plt>
  213d5c:	b	213da0 <add_cryptsetup+0x1c8>
  213d60:	mov	w8, wzr
  213d64:	neg	w9, w25
  213d68:	sub	w21, w8, w9, uxtb
  213d6c:	b	213da4 <add_cryptsetup+0x1cc>
  213d70:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  213d74:	adrp	x3, 201000 <__FRAME_END__-0x1cd0>
  213d78:	add	x1, x1, #0xb08
  213d7c:	add	x3, x3, #0xeb1
  213d80:	mov	w2, #0x41                  	// #65
  213d84:	b	213d9c <add_cryptsetup+0x1c4>
  213d88:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  213d8c:	adrp	x3, 201000 <__FRAME_END__-0x1cd0>
  213d90:	add	x1, x1, #0xb08
  213d94:	add	x3, x3, #0xeb1
  213d98:	mov	w2, #0x45                  	// #69
  213d9c:	bl	215db0 <log_oom_internal@plt>
  213da0:	mov	w21, w0
  213da4:	sub	x0, x29, #0x28
  213da8:	bl	2142d4 <fclosep>
  213dac:	sub	x0, x29, #0x20
  213db0:	bl	2142bc <freep>
  213db4:	sub	x0, x29, #0x18
  213db8:	bl	2142bc <freep>
  213dbc:	sub	x0, x29, #0x10
  213dc0:	bl	2142bc <freep>
  213dc4:	sub	x0, x29, #0x8
  213dc8:	bl	2142bc <freep>
  213dcc:	add	x0, x29, #0x18
  213dd0:	bl	2142bc <freep>
  213dd4:	mov	w0, w21
  213dd8:	mov	sp, x29
  213ddc:	ldp	x20, x19, [sp, #80]
  213de0:	ldp	x22, x21, [sp, #64]
  213de4:	ldp	x24, x23, [sp, #48]
  213de8:	ldp	x26, x25, [sp, #32]
  213dec:	ldr	x27, [sp, #16]
  213df0:	ldp	x29, x30, [sp], #96
  213df4:	ret
  213df8:	mov	x0, x26
  213dfc:	bl	215e10 <strlen@plt>
  213e00:	mov	x24, x0
  213e04:	mov	x0, x25
  213e08:	bl	215e10 <strlen@plt>
  213e0c:	add	x8, x24, x0
  213e10:	add	x24, x8, #0x2
  213e14:	mov	x0, x24
  213e18:	bl	21432c <size_multiply_overflow>
  213e1c:	tbnz	w0, #0, 21422c <add_cryptsetup+0x654>
  213e20:	cmp	x24, #0x400, lsl #12
  213e24:	b.hi	214238 <add_cryptsetup+0x660>  // b.pmore
  213e28:	add	x9, x24, #0xf
  213e2c:	mov	x8, sp
  213e30:	and	x9, x9, #0xfffffffffffffff0
  213e34:	sub	x24, x8, x9
  213e38:	mov	sp, x24
  213e3c:	mov	x0, x24
  213e40:	mov	x1, x26
  213e44:	bl	215e20 <stpcpy@plt>
  213e48:	mov	x8, x0
  213e4c:	mov	x0, x8
  213e50:	cmp	x8, x24
  213e54:	b.ls	213e68 <add_cryptsetup+0x290>  // b.plast
  213e58:	mov	x8, x0
  213e5c:	ldrb	w9, [x8, #-1]!
  213e60:	cmp	w9, #0x2f
  213e64:	b.eq	213e4c <add_cryptsetup+0x274>  // b.none
  213e68:	ldrb	w8, [x25]
  213e6c:	cmp	w8, #0x2f
  213e70:	b.eq	213e7c <add_cryptsetup+0x2a4>  // b.none
  213e74:	mov	w8, #0x2f                  	// #47
  213e78:	strb	w8, [x0], #1
  213e7c:	mov	x1, x25
  213e80:	bl	215e30 <strcpy@plt>
  213e84:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  213e88:	add	x1, x1, #0x94e
  213e8c:	mov	x0, x24
  213e90:	bl	215d80 <fopen64@plt>
  213e94:	stur	x0, [x29, #-40]
  213e98:	cbz	x0, 213fd4 <add_cryptsetup+0x3fc>
  213e9c:	ldp	x4, x2, [x29, #-24]
  213ea0:	ldur	x5, [x29, #-32]
  213ea4:	adrp	x8, 201000 <__FRAME_END__-0x1cd0>
  213ea8:	adrp	x9, 202000 <__FRAME_END__-0xcd0>
  213eac:	add	x8, x8, #0xa72
  213eb0:	add	x9, x9, #0xa7e
  213eb4:	tst	w21, #0x1
  213eb8:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  213ebc:	csel	x6, x9, x8, ne  // ne = any
  213ec0:	add	x1, x1, #0x4ab
  213ec4:	mov	x3, x2
  213ec8:	mov	x7, x4
  213ecc:	mov	x25, x0
  213ed0:	bl	215d90 <fprintf@plt>
  213ed4:	mov	x0, x25
  213ed8:	bl	215dd0 <fflush_and_check@plt>
  213edc:	tbnz	w0, #31, 214014 <add_cryptsetup+0x43c>
  213ee0:	ldr	x0, [x27, #1048]
  213ee4:	ldp	x1, x3, [x29, #-16]
  213ee8:	adrp	x2, 201000 <__FRAME_END__-0x1cd0>
  213eec:	add	x2, x2, #0xfa4
  213ef0:	bl	215de0 <generator_add_symlink@plt>
  213ef4:	tbnz	w0, #31, 213da0 <add_cryptsetup+0x1c8>
  213ef8:	tbz	w23, #0, 214088 <add_cryptsetup+0x4b0>
  213efc:	ldr	x0, [x27, #1048]
  213f00:	ldur	x3, [x29, #-8]
  213f04:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  213f08:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  213f0c:	add	x1, x1, #0x96e
  213f10:	add	x2, x2, #0xb8e
  213f14:	bl	215de0 <generator_add_symlink@plt>
  213f18:	tbnz	w0, #31, 21407c <add_cryptsetup+0x4a4>
  213f1c:	ldr	x8, [x29, #24]
  213f20:	adrp	x9, 201000 <__FRAME_END__-0x1cd0>
  213f24:	mov	x23, xzr
  213f28:	mov	x21, xzr
  213f2c:	add	x9, x9, #0xb09
  213f30:	stp	x8, x22, [x29, #-64]
  213f34:	sub	x22, x29, #0x48
  213f38:	stur	x9, [x29, #-72]
  213f3c:	ldr	x0, [x22, x23]
  213f40:	cbz	x0, 213f58 <add_cryptsetup+0x380>
  213f44:	bl	215e10 <strlen@plt>
  213f48:	add	x23, x23, #0x8
  213f4c:	cmp	x23, #0x18
  213f50:	add	x21, x0, x21
  213f54:	b.ne	213f3c <add_cryptsetup+0x364>  // b.any
  213f58:	add	x21, x21, #0x1
  213f5c:	mov	x0, x21
  213f60:	bl	21432c <size_multiply_overflow>
  213f64:	tbnz	w0, #0, 21428c <add_cryptsetup+0x6b4>
  213f68:	cmp	x21, #0x400, lsl #12
  213f6c:	b.hi	214298 <add_cryptsetup+0x6c0>  // b.pmore
  213f70:	add	x9, x21, #0xf
  213f74:	mov	x8, sp
  213f78:	and	x9, x9, #0xfffffffffffffff0
  213f7c:	sub	x21, x8, x9
  213f80:	mov	sp, x21
  213f84:	mov	x22, xzr
  213f88:	sub	x23, x29, #0x48
  213f8c:	mov	x0, x21
  213f90:	ldr	x1, [x23, x22]
  213f94:	cbz	x1, 213fa8 <add_cryptsetup+0x3d0>
  213f98:	bl	215e20 <stpcpy@plt>
  213f9c:	add	x22, x22, #0x8
  213fa0:	cmp	x22, #0x18
  213fa4:	b.ne	213f90 <add_cryptsetup+0x3b8>  // b.any
  213fa8:	strb	wzr, [x0]
  213fac:	ldr	x0, [x27, #1048]
  213fb0:	ldur	x3, [x29, #-8]
  213fb4:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  213fb8:	add	x2, x2, #0xb8e
  213fbc:	mov	x1, x21
  213fc0:	bl	215de0 <generator_add_symlink@plt>
  213fc4:	mvn	w8, w0
  213fc8:	mov	w21, w0
  213fcc:	lsr	w8, w8, #31
  213fd0:	b	214084 <add_cryptsetup+0x4ac>
  213fd4:	bl	215dc0 <__errno_location@plt>
  213fd8:	ldr	w19, [x0]
  213fdc:	mov	w0, wzr
  213fe0:	bl	215c30 <log_get_max_level_realm@plt>
  213fe4:	cmp	w0, #0x3
  213fe8:	b.lt	214058 <add_cryptsetup+0x480>  // b.tstop
  213fec:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  213ff0:	adrp	x4, 201000 <__FRAME_END__-0x1cd0>
  213ff4:	adrp	x5, 202000 <__FRAME_END__-0xcd0>
  213ff8:	add	x2, x2, #0xb08
  213ffc:	add	x4, x4, #0xeb1
  214000:	add	x5, x5, #0x952
  214004:	mov	w0, #0x3                   	// #3
  214008:	mov	w3, #0x4a                  	// #74
  21400c:	mov	w1, w19
  214010:	b	21404c <add_cryptsetup+0x474>
  214014:	mov	w21, w0
  214018:	mov	w0, wzr
  21401c:	bl	215c30 <log_get_max_level_realm@plt>
  214020:	cmp	w0, #0x3
  214024:	b.lt	21406c <add_cryptsetup+0x494>  // b.tstop
  214028:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  21402c:	adrp	x4, 201000 <__FRAME_END__-0x1cd0>
  214030:	adrp	x5, 202000 <__FRAME_END__-0xcd0>
  214034:	add	x2, x2, #0xb08
  214038:	add	x4, x4, #0xeb1
  21403c:	add	x5, x5, #0x732
  214040:	mov	w0, #0x3                   	// #3
  214044:	mov	w3, #0x64                  	// #100
  214048:	mov	w1, w21
  21404c:	mov	x6, x24
  214050:	bl	215c40 <log_internal_realm@plt>
  214054:	b	213da0 <add_cryptsetup+0x1c8>
  214058:	cmp	w19, #0x0
  21405c:	mov	w8, wzr
  214060:	cneg	w9, w19, mi  // mi = first
  214064:	sub	w21, w8, w9, uxtb
  214068:	b	213da4 <add_cryptsetup+0x1cc>
  21406c:	mov	w8, wzr
  214070:	neg	w9, w21
  214074:	sub	w21, w8, w9, uxtb
  214078:	b	213da4 <add_cryptsetup+0x1cc>
  21407c:	mov	w21, w0
  214080:	mov	w8, wzr
  214084:	cbz	w8, 213da4 <add_cryptsetup+0x1cc>
  214088:	ldr	x8, [x27, #1048]
  21408c:	ldr	x10, [x29, #24]
  214090:	adrp	x9, 201000 <__FRAME_END__-0x1cd0>
  214094:	adrp	x11, 202000 <__FRAME_END__-0xcd0>
  214098:	mov	x23, xzr
  21409c:	mov	x22, xzr
  2140a0:	add	x9, x9, #0xdac
  2140a4:	add	x11, x11, #0x1d1
  2140a8:	sub	x24, x29, #0x48
  2140ac:	stp	x8, x9, [x29, #-72]
  2140b0:	stp	x10, x11, [x29, #-56]
  2140b4:	ldr	x0, [x24, x23]
  2140b8:	cbz	x0, 2140d0 <add_cryptsetup+0x4f8>
  2140bc:	bl	215e10 <strlen@plt>
  2140c0:	add	x23, x23, #0x8
  2140c4:	cmp	x23, #0x20
  2140c8:	add	x22, x0, x22
  2140cc:	b.ne	2140b4 <add_cryptsetup+0x4dc>  // b.any
  2140d0:	add	x22, x22, #0x1
  2140d4:	mov	x0, x22
  2140d8:	bl	21432c <size_multiply_overflow>
  2140dc:	tbnz	w0, #0, 21425c <add_cryptsetup+0x684>
  2140e0:	cmp	x22, #0x400, lsl #12
  2140e4:	b.hi	214268 <add_cryptsetup+0x690>  // b.pmore
  2140e8:	add	x9, x22, #0xf
  2140ec:	mov	x8, sp
  2140f0:	and	x9, x9, #0xfffffffffffffff0
  2140f4:	sub	x22, x8, x9
  2140f8:	mov	sp, x22
  2140fc:	mov	x23, xzr
  214100:	sub	x24, x29, #0x48
  214104:	mov	x0, x22
  214108:	ldr	x1, [x24, x23]
  21410c:	cbz	x1, 214120 <add_cryptsetup+0x548>
  214110:	bl	215e20 <stpcpy@plt>
  214114:	add	x23, x23, #0x8
  214118:	cmp	x23, #0x20
  21411c:	b.ne	214108 <add_cryptsetup+0x530>  // b.any
  214120:	strb	wzr, [x0]
  214124:	mov	w1, #0x1ed                 	// #493
  214128:	mov	x0, x22
  21412c:	bl	215e40 <mkdir_parents_label@plt>
  214130:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  214134:	add	x1, x1, #0x8bc
  214138:	mov	w2, #0x1                   	// #1
  21413c:	mov	x0, x22
  214140:	bl	214334 <write_string_file>
  214144:	tbnz	w0, #31, 214170 <add_cryptsetup+0x598>
  214148:	cbz	x19, 2141e0 <add_cryptsetup+0x608>
  21414c:	adrp	x0, 202000 <__FRAME_END__-0xcd0>
  214150:	add	x0, x0, #0x783
  214154:	mov	x2, #0xffffffffffffffff    	// #-1
  214158:	mov	x1, x20
  21415c:	bl	215d70 <path_join_internal@plt>
  214160:	cbz	x0, 2141bc <add_cryptsetup+0x5e4>
  214164:	mov	w8, #0x1                   	// #1
  214168:	str	x0, [x19]
  21416c:	b	2141dc <add_cryptsetup+0x604>
  214170:	mov	w22, w0
  214174:	mov	w0, wzr
  214178:	bl	215c30 <log_get_max_level_realm@plt>
  21417c:	cmp	w0, #0x3
  214180:	b.lt	2141ac <add_cryptsetup+0x5d4>  // b.tstop
  214184:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  214188:	adrp	x4, 201000 <__FRAME_END__-0x1cd0>
  21418c:	adrp	x5, 201000 <__FRAME_END__-0x1cd0>
  214190:	add	x2, x2, #0xb08
  214194:	add	x4, x4, #0xeb1
  214198:	add	x5, x5, #0xc7f
  21419c:	mov	w0, #0x3                   	// #3
  2141a0:	mov	w3, #0x7f                  	// #127
  2141a4:	mov	w1, w22
  2141a8:	b	213d58 <add_cryptsetup+0x180>
  2141ac:	mov	w8, wzr
  2141b0:	neg	w9, w22
  2141b4:	sub	w21, w8, w9, uxtb
  2141b8:	b	213da4 <add_cryptsetup+0x1cc>
  2141bc:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  2141c0:	adrp	x3, 201000 <__FRAME_END__-0x1cd0>
  2141c4:	add	x1, x1, #0xb08
  2141c8:	add	x3, x3, #0xeb1
  2141cc:	mov	w2, #0x86                  	// #134
  2141d0:	bl	215db0 <log_oom_internal@plt>
  2141d4:	mov	w21, w0
  2141d8:	mov	w8, wzr
  2141dc:	cbz	w8, 213da4 <add_cryptsetup+0x1cc>
  2141e0:	mov	w21, wzr
  2141e4:	b	213da4 <add_cryptsetup+0x1cc>
  2141e8:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  2141ec:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  2141f0:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  2141f4:	add	x1, x1, #0xc7c
  2141f8:	add	x2, x2, #0xb08
  2141fc:	add	x4, x4, #0x183
  214200:	mov	w3, #0x30                  	// #48
  214204:	bl	215cc0 <log_assert_failed_realm@plt>
  214208:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  21420c:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  214210:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  214214:	add	x1, x1, #0xc3b
  214218:	add	x2, x2, #0xb08
  21421c:	add	x4, x4, #0x183
  214220:	mov	w3, #0x31                  	// #49
  214224:	mov	w0, wzr
  214228:	bl	215cc0 <log_assert_failed_realm@plt>
  21422c:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  214230:	add	x1, x1, #0xec0
  214234:	b	214240 <add_cryptsetup+0x668>
  214238:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  21423c:	add	x1, x1, #0x94f
  214240:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  214244:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  214248:	add	x2, x2, #0xb08
  21424c:	add	x4, x4, #0x183
  214250:	mov	w3, #0x47                  	// #71
  214254:	mov	w0, wzr
  214258:	bl	215cc0 <log_assert_failed_realm@plt>
  21425c:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  214260:	add	x1, x1, #0xec0
  214264:	b	214270 <add_cryptsetup+0x698>
  214268:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  21426c:	add	x1, x1, #0x94f
  214270:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  214274:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  214278:	add	x2, x2, #0xb08
  21427c:	add	x4, x4, #0x183
  214280:	mov	w3, #0x77                  	// #119
  214284:	mov	w0, wzr
  214288:	bl	215cc0 <log_assert_failed_realm@plt>
  21428c:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  214290:	add	x1, x1, #0xec0
  214294:	b	2142a0 <add_cryptsetup+0x6c8>
  214298:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  21429c:	add	x1, x1, #0x94f
  2142a0:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  2142a4:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  2142a8:	add	x2, x2, #0xb08
  2142ac:	add	x4, x4, #0x183
  2142b0:	mov	w3, #0x71                  	// #113
  2142b4:	mov	w0, wzr
  2142b8:	bl	215cc0 <log_assert_failed_realm@plt>

00000000002142bc <freep>:
  2142bc:	stp	x29, x30, [sp, #-16]!
  2142c0:	ldr	x0, [x0]
  2142c4:	mov	x29, sp
  2142c8:	bl	215e50 <free@plt>
  2142cc:	ldp	x29, x30, [sp], #16
  2142d0:	ret

00000000002142d4 <fclosep>:
  2142d4:	stp	x29, x30, [sp, #-16]!
  2142d8:	ldr	x0, [x0]
  2142dc:	mov	x29, sp
  2142e0:	bl	215e60 <safe_fclose@plt>
  2142e4:	ldp	x29, x30, [sp], #16
  2142e8:	ret

00000000002142ec <specifier_escape>:
  2142ec:	stp	x29, x30, [sp, #-16]!
  2142f0:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  2142f4:	adrp	x2, 201000 <__FRAME_END__-0x1cd0>
  2142f8:	add	x1, x1, #0xc49
  2142fc:	add	x2, x2, #0xb90
  214300:	mov	x29, sp
  214304:	bl	215e70 <strreplace@plt>
  214308:	ldp	x29, x30, [sp], #16
  21430c:	ret

0000000000214310 <isempty>:
  214310:	cbz	x0, 214324 <isempty+0x14>
  214314:	ldrb	w8, [x0]
  214318:	cmp	w8, #0x0
  21431c:	cset	w0, eq  // eq = none
  214320:	ret
  214324:	mov	w0, #0x1                   	// #1
  214328:	ret

000000000021432c <size_multiply_overflow>:
  21432c:	mov	w0, wzr
  214330:	ret

0000000000214334 <write_string_file>:
  214334:	stp	x29, x30, [sp, #-16]!
  214338:	mov	x3, xzr
  21433c:	mov	x29, sp
  214340:	bl	215e80 <write_string_file_ts@plt>
  214344:	ldp	x29, x30, [sp], #16
  214348:	ret

000000000021434c <strna>:
  21434c:	adrp	x8, 202000 <__FRAME_END__-0xcd0>
  214350:	add	x8, x8, #0x6be
  214354:	cmp	x0, #0x0
  214358:	csel	x0, x8, x0, eq  // eq = none
  21435c:	ret

0000000000214360 <streq_ptr>:
  214360:	stp	x29, x30, [sp, #-16]!
  214364:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  214368:	add	x1, x1, #0xeeb
  21436c:	mov	x29, sp
  214370:	bl	215e90 <strcmp_ptr@plt>
  214374:	cmp	w0, #0x0
  214378:	cset	w0, eq  // eq = none
  21437c:	ldp	x29, x30, [sp], #16
  214380:	ret

0000000000214384 <empty_to_root>:
  214384:	stp	x29, x30, [sp, #-32]!
  214388:	str	x19, [sp, #16]
  21438c:	mov	x29, sp
  214390:	mov	x19, x0
  214394:	bl	214310 <isempty>
  214398:	adrp	x8, 201000 <__FRAME_END__-0x1cd0>
  21439c:	add	x8, x8, #0x94d
  2143a0:	tst	w0, #0x1
  2143a4:	csel	x0, x8, x19, ne  // ne = any
  2143a8:	ldr	x19, [sp, #16]
  2143ac:	ldp	x29, x30, [sp], #32
  2143b0:	ret

00000000002143b4 <enumerate_partitions>:
  2143b4:	sub	sp, sp, #0x30
  2143b8:	stp	x29, x30, [sp, #16]
  2143bc:	add	x29, sp, #0x10
  2143c0:	mov	w8, #0xffffffff            	// #-1
  2143c4:	add	x1, x29, #0x1c
  2143c8:	str	x19, [sp, #32]
  2143cc:	str	w8, [x29, #28]
  2143d0:	str	xzr, [sp, #8]
  2143d4:	bl	2145d8 <open_parent_devno>
  2143d8:	cmp	w0, #0x1
  2143dc:	b.lt	214444 <enumerate_partitions+0x90>  // b.tstop
  2143e0:	ldr	w0, [x29, #28]
  2143e4:	add	x4, sp, #0x8
  2143e8:	mov	w3, #0x210                 	// #528
  2143ec:	mov	x1, xzr
  2143f0:	mov	x2, xzr
  2143f4:	bl	215ea0 <dissect_image@plt>
  2143f8:	cmn	w0, #0x41
  2143fc:	b.ne	21444c <enumerate_partitions+0x98>  // b.any
  214400:	mov	w0, wzr
  214404:	bl	215c30 <log_get_max_level_realm@plt>
  214408:	cmp	w0, #0x7
  21440c:	mov	w19, wzr
  214410:	b.lt	214580 <enumerate_partitions+0x1cc>  // b.tstop
  214414:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  214418:	adrp	x4, 201000 <__FRAME_END__-0x1cd0>
  21441c:	adrp	x5, 202000 <__FRAME_END__-0xcd0>
  214420:	add	x2, x2, #0xb08
  214424:	add	x4, x4, #0xbc4
  214428:	add	x5, x5, #0xbce
  21442c:	mov	w0, #0x7                   	// #7
  214430:	mov	w1, #0xffffffbf            	// #-65
  214434:	mov	w3, #0x25f                 	// #607
  214438:	bl	215c40 <log_internal_realm@plt>
  21443c:	mov	w19, wzr
  214440:	b	214580 <enumerate_partitions+0x1cc>
  214444:	mov	w19, w0
  214448:	b	214580 <enumerate_partitions+0x1cc>
  21444c:	mov	w19, w0
  214450:	tbnz	w0, #31, 214534 <enumerate_partitions+0x180>
  214454:	ldr	x8, [sp, #8]
  214458:	ldrb	w9, [x8, #392]
  21445c:	tbz	w9, #0, 214470 <enumerate_partitions+0xbc>
  214460:	ldr	x0, [x8, #432]
  214464:	bl	214ad4 <add_swap>
  214468:	cmp	w0, #0x0
  21446c:	csel	w19, w0, w19, lt  // lt = tstop
  214470:	ldr	x8, [sp, #8]
  214474:	ldrb	w9, [x8, #328]
  214478:	tbz	w9, #0, 21448c <enumerate_partitions+0xd8>
  21447c:	add	x0, x8, #0x148
  214480:	bl	214da4 <add_xbootldr>
  214484:	cmp	w0, #0x0
  214488:	csel	w19, w0, w19, lt  // lt = tstop
  21448c:	ldr	x8, [sp, #8]
  214490:	ldrb	w9, [x8, #264]
  214494:	tbz	w9, #0, 2144b0 <enumerate_partitions+0xfc>
  214498:	ldrb	w9, [x8, #328]
  21449c:	add	x0, x8, #0x108
  2144a0:	and	w1, w9, #0x1
  2144a4:	bl	214f08 <add_esp>
  2144a8:	cmp	w0, #0x0
  2144ac:	csel	w19, w0, w19, lt  // lt = tstop
  2144b0:	ldr	x8, [sp, #8]
  2144b4:	ldrb	w9, [x8, #136]
  2144b8:	tbz	w9, #0, 2144e4 <enumerate_partitions+0x130>
  2144bc:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  2144c0:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  2144c4:	adrp	x3, 201000 <__FRAME_END__-0x1cd0>
  2144c8:	add	x0, x8, #0x88
  2144cc:	add	x1, x1, #0xb93
  2144d0:	add	x2, x2, #0xbfb
  2144d4:	add	x3, x3, #0xb1e
  2144d8:	bl	215278 <add_partition_mount>
  2144dc:	cmp	w0, #0x0
  2144e0:	csel	w19, w0, w19, lt  // lt = tstop
  2144e4:	ldr	x8, [sp, #8]
  2144e8:	ldrb	w9, [x8, #200]
  2144ec:	tbz	w9, #0, 214518 <enumerate_partitions+0x164>
  2144f0:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  2144f4:	adrp	x2, 201000 <__FRAME_END__-0x1cd0>
  2144f8:	adrp	x3, 201000 <__FRAME_END__-0x1cd0>
  2144fc:	add	x0, x8, #0xc8
  214500:	add	x1, x1, #0xc01
  214504:	add	x2, x2, #0x90d
  214508:	add	x3, x3, #0xb2d
  21450c:	bl	215278 <add_partition_mount>
  214510:	cmp	w0, #0x0
  214514:	csel	w19, w0, w19, lt  // lt = tstop
  214518:	ldr	x0, [sp, #8]
  21451c:	ldrb	w8, [x0, #8]!
  214520:	tbz	w8, #0, 214580 <enumerate_partitions+0x1cc>
  214524:	bl	215308 <add_root_rw>
  214528:	cmp	w0, #0x0
  21452c:	csel	w19, w0, w19, lt  // lt = tstop
  214530:	b	214580 <enumerate_partitions+0x1cc>
  214534:	mov	w0, wzr
  214538:	bl	215c30 <log_get_max_level_realm@plt>
  21453c:	cmp	w0, #0x3
  214540:	b.lt	214574 <enumerate_partitions+0x1c0>  // b.tstop
  214544:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  214548:	adrp	x4, 201000 <__FRAME_END__-0x1cd0>
  21454c:	adrp	x5, 202000 <__FRAME_END__-0xcd0>
  214550:	add	x2, x2, #0xb08
  214554:	add	x4, x4, #0xbc4
  214558:	add	x5, x5, #0xc4b
  21455c:	mov	w0, #0x3                   	// #3
  214560:	mov	w3, #0x263                 	// #611
  214564:	mov	w1, w19
  214568:	bl	215c40 <log_internal_realm@plt>
  21456c:	mov	w19, w0
  214570:	b	214580 <enumerate_partitions+0x1cc>
  214574:	mov	w8, wzr
  214578:	neg	w9, w19
  21457c:	sub	w19, w8, w9, uxtb
  214580:	add	x0, sp, #0x8
  214584:	bl	2145bc <dissected_image_unrefp>
  214588:	add	x0, x29, #0x1c
  21458c:	bl	2145a4 <closep>
  214590:	mov	w0, w19
  214594:	ldr	x19, [sp, #32]
  214598:	ldp	x29, x30, [sp, #16]
  21459c:	add	sp, sp, #0x30
  2145a0:	ret

00000000002145a4 <closep>:
  2145a4:	stp	x29, x30, [sp, #-16]!
  2145a8:	ldr	w0, [x0]
  2145ac:	mov	x29, sp
  2145b0:	bl	215eb0 <safe_close@plt>
  2145b4:	ldp	x29, x30, [sp], #16
  2145b8:	ret

00000000002145bc <dissected_image_unrefp>:
  2145bc:	stp	x29, x30, [sp, #-16]!
  2145c0:	ldr	x0, [x0]
  2145c4:	mov	x29, sp
  2145c8:	cbz	x0, 2145d0 <dissected_image_unrefp+0x14>
  2145cc:	bl	215ec0 <dissected_image_unref@plt>
  2145d0:	ldp	x29, x30, [sp], #16
  2145d4:	ret

00000000002145d8 <open_parent_devno>:
  2145d8:	sub	sp, sp, #0x90
  2145dc:	stp	x29, x30, [sp, #80]
  2145e0:	add	x29, sp, #0x50
  2145e4:	str	x23, [sp, #96]
  2145e8:	stp	x22, x21, [sp, #112]
  2145ec:	stp	x20, x19, [sp, #128]
  2145f0:	str	xzr, [x29, #24]
  2145f4:	cbz	x1, 214ab0 <open_parent_devno+0x4d8>
  2145f8:	mov	x20, x0
  2145fc:	mov	x19, x1
  214600:	add	x0, x29, #0x18
  214604:	mov	w1, #0x62                  	// #98
  214608:	mov	x2, x20
  21460c:	bl	215ed0 <sd_device_new_from_devnum@plt>
  214610:	tbnz	w0, #31, 2146c4 <open_parent_devno+0xec>
  214614:	ldr	x0, [x29, #24]
  214618:	sub	x1, x29, #0x8
  21461c:	bl	215ee0 <sd_device_get_devname@plt>
  214620:	tbz	w0, #31, 214634 <open_parent_devno+0x5c>
  214624:	ldr	x0, [x29, #24]
  214628:	sub	x1, x29, #0x8
  21462c:	bl	215ef0 <sd_device_get_syspath@plt>
  214630:	tbnz	w0, #31, 214804 <open_parent_devno+0x22c>
  214634:	ldr	x0, [x29, #24]
  214638:	sub	x1, x29, #0x20
  21463c:	bl	215f00 <sd_device_get_parent@plt>
  214640:	tbnz	w0, #31, 214708 <open_parent_devno+0x130>
  214644:	ldur	x0, [x29, #-32]
  214648:	sub	x1, x29, #0x10
  21464c:	bl	215f10 <sd_device_get_devtype@plt>
  214650:	tbnz	w0, #31, 214774 <open_parent_devno+0x19c>
  214654:	ldur	x0, [x29, #-16]
  214658:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  21465c:	add	x1, x1, #0xc61
  214660:	bl	215cf0 <strcmp@plt>
  214664:	cbz	w0, 214888 <open_parent_devno+0x2b0>
  214668:	ldur	x19, [x29, #-32]
  21466c:	stur	xzr, [x29, #-24]
  214670:	cbz	x19, 214684 <open_parent_devno+0xac>
  214674:	mov	w0, wzr
  214678:	bl	215c30 <log_get_max_level_realm@plt>
  21467c:	cmp	w0, #0x7
  214680:	b.ge	214a50 <open_parent_devno+0x478>  // b.tcont
  214684:	ldur	x6, [x29, #-24]
  214688:	adrp	x8, 202000 <__FRAME_END__-0xcd0>
  21468c:	add	x8, x8, #0x35e
  214690:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  214694:	cmp	x6, #0x0
  214698:	csel	x5, xzr, x8, eq  // eq = none
  21469c:	adrp	x8, 202000 <__FRAME_END__-0xcd0>
  2146a0:	add	x8, x8, #0xb9d
  2146a4:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  2146a8:	add	x2, x2, #0xb08
  2146ac:	add	x4, x4, #0x755
  2146b0:	stp	xzr, x8, [sp]
  2146b4:	mov	w0, #0x7                   	// #7
  2146b8:	mov	w3, #0x239                 	// #569
  2146bc:	mov	w1, wzr
  2146c0:	b	2147d4 <open_parent_devno+0x1fc>
  2146c4:	mov	w21, w0
  2146c8:	mov	w0, wzr
  2146cc:	bl	215c30 <log_get_max_level_realm@plt>
  2146d0:	cmp	w0, #0x7
  2146d4:	b.lt	214764 <open_parent_devno+0x18c>  // b.tstop
  2146d8:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  2146dc:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  2146e0:	adrp	x5, 202000 <__FRAME_END__-0xcd0>
  2146e4:	add	x2, x2, #0xb08
  2146e8:	add	x4, x4, #0x755
  2146ec:	add	x5, x5, #0xa7f
  2146f0:	mov	w0, #0x7                   	// #7
  2146f4:	mov	w3, #0x220                 	// #544
  2146f8:	mov	w1, w21
  2146fc:	bl	215c40 <log_internal_realm@plt>
  214700:	mov	w19, w0
  214704:	b	2147e0 <open_parent_devno+0x208>
  214708:	ldr	x19, [x29, #24]
  21470c:	mov	w20, w0
  214710:	stur	xzr, [x29, #-16]
  214714:	cbz	x19, 214728 <open_parent_devno+0x150>
  214718:	mov	w0, wzr
  21471c:	bl	215c30 <log_get_max_level_realm@plt>
  214720:	cmp	w0, #0x7
  214724:	b.ge	214a40 <open_parent_devno+0x468>  // b.tcont
  214728:	ldur	x6, [x29, #-16]
  21472c:	adrp	x8, 202000 <__FRAME_END__-0xcd0>
  214730:	add	x8, x8, #0x35e
  214734:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  214738:	cmp	x6, #0x0
  21473c:	csel	x5, xzr, x8, eq  // eq = none
  214740:	adrp	x8, 201000 <__FRAME_END__-0x1cd0>
  214744:	add	x8, x8, #0xd38
  214748:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  21474c:	add	x2, x2, #0xb08
  214750:	add	x4, x4, #0x755
  214754:	str	x8, [sp, #8]
  214758:	mov	w0, #0x7                   	// #7
  21475c:	mov	w3, #0x22c                 	// #556
  214760:	b	2147cc <open_parent_devno+0x1f4>
  214764:	mov	w8, wzr
  214768:	neg	w9, w21
  21476c:	sub	w19, w8, w9, uxtb
  214770:	b	2147e0 <open_parent_devno+0x208>
  214774:	ldur	x19, [x29, #-32]
  214778:	mov	w20, w0
  21477c:	stur	xzr, [x29, #-24]
  214780:	cbz	x19, 214794 <open_parent_devno+0x1bc>
  214784:	mov	w0, wzr
  214788:	bl	215c30 <log_get_max_level_realm@plt>
  21478c:	cmp	w0, #0x7
  214790:	b.ge	214a60 <open_parent_devno+0x488>  // b.tcont
  214794:	ldur	x6, [x29, #-24]
  214798:	adrp	x8, 202000 <__FRAME_END__-0xcd0>
  21479c:	add	x8, x8, #0x35e
  2147a0:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  2147a4:	cmp	x6, #0x0
  2147a8:	csel	x5, xzr, x8, eq  // eq = none
  2147ac:	adrp	x8, 201000 <__FRAME_END__-0x1cd0>
  2147b0:	add	x8, x8, #0xa2e
  2147b4:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  2147b8:	add	x2, x2, #0xb08
  2147bc:	add	x4, x4, #0x755
  2147c0:	str	x8, [sp, #8]
  2147c4:	mov	w0, #0x7                   	// #7
  2147c8:	mov	w3, #0x233                 	// #563
  2147cc:	mov	w1, w20
  2147d0:	str	xzr, [sp]
  2147d4:	mov	x7, xzr
  2147d8:	bl	215f20 <log_object_internal@plt>
  2147dc:	mov	w19, wzr
  2147e0:	add	x0, x29, #0x18
  2147e4:	bl	21555c <sd_device_unrefp>
  2147e8:	mov	w0, w19
  2147ec:	ldp	x20, x19, [sp, #128]
  2147f0:	ldp	x22, x21, [sp, #112]
  2147f4:	ldr	x23, [sp, #96]
  2147f8:	ldp	x29, x30, [sp, #80]
  2147fc:	add	sp, sp, #0x90
  214800:	ret
  214804:	ldr	x19, [x29, #24]
  214808:	mov	w21, w0
  21480c:	stur	xzr, [x29, #-16]
  214810:	cbz	x19, 214824 <open_parent_devno+0x24c>
  214814:	mov	w0, wzr
  214818:	bl	215c30 <log_get_max_level_realm@plt>
  21481c:	cmp	w0, #0x7
  214820:	b.ge	214a70 <open_parent_devno+0x498>  // b.tcont
  214824:	ldur	x19, [x29, #-16]
  214828:	adrp	x8, 202000 <__FRAME_END__-0xcd0>
  21482c:	add	x8, x8, #0x35e
  214830:	mov	x0, x20
  214834:	cmp	x19, #0x0
  214838:	csel	x22, xzr, x8, eq  // eq = none
  21483c:	bl	215f30 <gnu_dev_major@plt>
  214840:	mov	w23, w0
  214844:	mov	x0, x20
  214848:	bl	215f40 <gnu_dev_minor@plt>
  21484c:	adrp	x8, 201000 <__FRAME_END__-0x1cd0>
  214850:	add	x8, x8, #0xbd9
  214854:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  214858:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  21485c:	str	w0, [sp, #24]
  214860:	str	w23, [sp, #16]
  214864:	add	x2, x2, #0xb08
  214868:	add	x4, x4, #0x755
  21486c:	stp	xzr, x8, [sp]
  214870:	mov	w0, #0x7                   	// #7
  214874:	mov	w3, #0x225                 	// #549
  214878:	mov	w1, w21
  21487c:	mov	x5, x22
  214880:	mov	x6, x19
  214884:	b	2147d4 <open_parent_devno+0x1fc>
  214888:	ldur	x0, [x29, #-32]
  21488c:	sub	x1, x29, #0x18
  214890:	bl	215ee0 <sd_device_get_devname@plt>
  214894:	tbnz	w0, #31, 214930 <open_parent_devno+0x358>
  214898:	ldr	x20, [x29, #24]
  21489c:	str	xzr, [sp, #40]
  2148a0:	cbz	x20, 2148b4 <open_parent_devno+0x2dc>
  2148a4:	mov	w0, wzr
  2148a8:	bl	215c30 <log_get_max_level_realm@plt>
  2148ac:	cmp	w0, #0x7
  2148b0:	b.ge	214a80 <open_parent_devno+0x4a8>  // b.tcont
  2148b4:	ldr	x6, [sp, #40]
  2148b8:	ldur	x8, [x29, #-24]
  2148bc:	adrp	x21, 202000 <__FRAME_END__-0xcd0>
  2148c0:	add	x21, x21, #0x35e
  2148c4:	cmp	x6, #0x0
  2148c8:	str	x8, [sp, #16]
  2148cc:	adrp	x8, 201000 <__FRAME_END__-0x1cd0>
  2148d0:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  2148d4:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  2148d8:	csel	x5, xzr, x21, eq  // eq = none
  2148dc:	add	x8, x8, #0xb43
  2148e0:	add	x2, x2, #0xb08
  2148e4:	add	x4, x4, #0x755
  2148e8:	mov	w0, #0x7                   	// #7
  2148ec:	mov	w3, #0x244                 	// #580
  2148f0:	mov	w1, wzr
  2148f4:	mov	x7, xzr
  2148f8:	stp	xzr, x8, [sp]
  2148fc:	bl	215f20 <log_object_internal@plt>
  214900:	ldur	x0, [x29, #-32]
  214904:	add	x1, sp, #0x28
  214908:	bl	215f50 <sd_device_get_devnum@plt>
  21490c:	tbnz	w0, #31, 21498c <open_parent_devno+0x3b4>
  214910:	ldur	x0, [x29, #-24]
  214914:	mov	w1, #0x100                 	// #256
  214918:	movk	w1, #0x8, lsl #16
  21491c:	bl	215f60 <open64@plt>
  214920:	tbnz	w0, #31, 2149e0 <open_parent_devno+0x408>
  214924:	str	w0, [x19]
  214928:	mov	w19, #0x1                   	// #1
  21492c:	b	2147e0 <open_parent_devno+0x208>
  214930:	ldur	x19, [x29, #-32]
  214934:	mov	w20, w0
  214938:	str	xzr, [sp, #40]
  21493c:	cbz	x19, 214950 <open_parent_devno+0x378>
  214940:	mov	w0, wzr
  214944:	bl	215c30 <log_get_max_level_realm@plt>
  214948:	cmp	w0, #0x7
  21494c:	b.ge	214a90 <open_parent_devno+0x4b8>  // b.tcont
  214950:	ldr	x6, [sp, #40]
  214954:	adrp	x8, 202000 <__FRAME_END__-0xcd0>
  214958:	add	x8, x8, #0x35e
  21495c:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  214960:	cmp	x6, #0x0
  214964:	csel	x5, xzr, x8, eq  // eq = none
  214968:	adrp	x8, 202000 <__FRAME_END__-0xcd0>
  21496c:	add	x8, x8, #0x432
  214970:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  214974:	add	x2, x2, #0xb08
  214978:	add	x4, x4, #0x755
  21497c:	str	x8, [sp, #8]
  214980:	mov	w0, #0x7                   	// #7
  214984:	mov	w3, #0x240                 	// #576
  214988:	b	2147cc <open_parent_devno+0x1f4>
  21498c:	ldur	x19, [x29, #-32]
  214990:	mov	w20, w0
  214994:	str	xzr, [sp, #32]
  214998:	cbz	x19, 2149ac <open_parent_devno+0x3d4>
  21499c:	mov	w0, wzr
  2149a0:	bl	215c30 <log_get_max_level_realm@plt>
  2149a4:	cmp	w0, #0x7
  2149a8:	b.ge	214aa0 <open_parent_devno+0x4c8>  // b.tcont
  2149ac:	ldr	x6, [sp, #32]
  2149b0:	adrp	x8, 202000 <__FRAME_END__-0xcd0>
  2149b4:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  2149b8:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  2149bc:	cmp	x6, #0x0
  2149c0:	csel	x5, xzr, x21, eq  // eq = none
  2149c4:	add	x8, x8, #0x237
  2149c8:	add	x2, x2, #0xb08
  2149cc:	add	x4, x4, #0x755
  2149d0:	mov	w0, #0x7                   	// #7
  2149d4:	mov	w3, #0x248                 	// #584
  2149d8:	str	x8, [sp, #8]
  2149dc:	b	2147cc <open_parent_devno+0x1f4>
  2149e0:	bl	215dc0 <__errno_location@plt>
  2149e4:	ldr	w19, [x0]
  2149e8:	mov	w0, wzr
  2149ec:	bl	215c30 <log_get_max_level_realm@plt>
  2149f0:	cmp	w0, #0x3
  2149f4:	b.lt	214a2c <open_parent_devno+0x454>  // b.tstop
  2149f8:	ldur	x6, [x29, #-24]
  2149fc:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  214a00:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  214a04:	adrp	x5, 201000 <__FRAME_END__-0x1cd0>
  214a08:	add	x2, x2, #0xb08
  214a0c:	add	x4, x4, #0x755
  214a10:	add	x5, x5, #0x912
  214a14:	mov	w0, #0x3                   	// #3
  214a18:	mov	w3, #0x24e                 	// #590
  214a1c:	mov	w1, w19
  214a20:	bl	215c40 <log_internal_realm@plt>
  214a24:	mov	w19, w0
  214a28:	b	2147e0 <open_parent_devno+0x208>
  214a2c:	cmp	w19, #0x0
  214a30:	mov	w8, wzr
  214a34:	cneg	w9, w19, mi  // mi = first
  214a38:	sub	w19, w8, w9, uxtb
  214a3c:	b	2147e0 <open_parent_devno+0x208>
  214a40:	sub	x1, x29, #0x10
  214a44:	mov	x0, x19
  214a48:	bl	215f70 <sd_device_get_sysname@plt>
  214a4c:	b	214728 <open_parent_devno+0x150>
  214a50:	sub	x1, x29, #0x18
  214a54:	mov	x0, x19
  214a58:	bl	215f70 <sd_device_get_sysname@plt>
  214a5c:	b	214684 <open_parent_devno+0xac>
  214a60:	sub	x1, x29, #0x18
  214a64:	mov	x0, x19
  214a68:	bl	215f70 <sd_device_get_sysname@plt>
  214a6c:	b	214794 <open_parent_devno+0x1bc>
  214a70:	sub	x1, x29, #0x10
  214a74:	mov	x0, x19
  214a78:	bl	215f70 <sd_device_get_sysname@plt>
  214a7c:	b	214824 <open_parent_devno+0x24c>
  214a80:	add	x1, sp, #0x28
  214a84:	mov	x0, x20
  214a88:	bl	215f70 <sd_device_get_sysname@plt>
  214a8c:	b	2148b4 <open_parent_devno+0x2dc>
  214a90:	add	x1, sp, #0x28
  214a94:	mov	x0, x19
  214a98:	bl	215f70 <sd_device_get_sysname@plt>
  214a9c:	b	214950 <open_parent_devno+0x378>
  214aa0:	add	x1, sp, #0x20
  214aa4:	mov	x0, x19
  214aa8:	bl	215f70 <sd_device_get_sysname@plt>
  214aac:	b	2149ac <open_parent_devno+0x3d4>
  214ab0:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  214ab4:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  214ab8:	adrp	x4, 201000 <__FRAME_END__-0x1cd0>
  214abc:	add	x1, x1, #0x35a
  214ac0:	add	x2, x2, #0xb08
  214ac4:	add	x4, x4, #0xd14
  214ac8:	mov	w3, #0x21c                 	// #540
  214acc:	mov	w0, wzr
  214ad0:	bl	215cc0 <log_assert_failed_realm@plt>

0000000000214ad4 <add_swap>:
  214ad4:	sub	sp, sp, #0x50
  214ad8:	stp	x29, x30, [sp, #32]
  214adc:	add	x29, sp, #0x20
  214ae0:	stp	x22, x21, [sp, #48]
  214ae4:	stp	x20, x19, [sp, #64]
  214ae8:	stur	xzr, [x29, #-8]
  214aec:	stp	xzr, xzr, [sp, #8]
  214af0:	cbz	x0, 214d84 <add_swap+0x2b0>
  214af4:	mov	x19, x0
  214af8:	adrp	x0, 202000 <__FRAME_END__-0xcd0>
  214afc:	add	x0, x0, #0x6c2
  214b00:	bl	215f80 <fstab_has_fstype@plt>
  214b04:	mov	w20, w0
  214b08:	tbnz	w0, #31, 214b50 <add_swap+0x7c>
  214b0c:	mov	w0, wzr
  214b10:	bl	215c30 <log_get_max_level_realm@plt>
  214b14:	cmp	w0, #0x7
  214b18:	cbz	w20, 214b90 <add_swap+0xbc>
  214b1c:	b.lt	214c50 <add_swap+0x17c>  // b.tstop
  214b20:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  214b24:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  214b28:	adrp	x5, 202000 <__FRAME_END__-0xcd0>
  214b2c:	add	x2, x2, #0xb08
  214b30:	add	x4, x4, #0xbc0
  214b34:	add	x5, x5, #0xa99
  214b38:	mov	w0, #0x7                   	// #7
  214b3c:	mov	w3, #0x121                 	// #289
  214b40:	mov	w1, wzr
  214b44:	bl	215c40 <log_internal_realm@plt>
  214b48:	mov	w19, wzr
  214b4c:	b	214c9c <add_swap+0x1c8>
  214b50:	mov	w0, wzr
  214b54:	bl	215c30 <log_get_max_level_realm@plt>
  214b58:	cmp	w0, #0x3
  214b5c:	b.lt	214c90 <add_swap+0x1bc>  // b.tstop
  214b60:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  214b64:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  214b68:	adrp	x5, 202000 <__FRAME_END__-0xcd0>
  214b6c:	add	x2, x2, #0xb08
  214b70:	add	x4, x4, #0xbc0
  214b74:	add	x5, x5, #0x80f
  214b78:	mov	w0, #0x3                   	// #3
  214b7c:	mov	w3, #0x11f                 	// #287
  214b80:	mov	w1, w20
  214b84:	bl	215c40 <log_internal_realm@plt>
  214b88:	mov	w19, w0
  214b8c:	b	214c9c <add_swap+0x1c8>
  214b90:	b.lt	214bc0 <add_swap+0xec>  // b.tstop
  214b94:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  214b98:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  214b9c:	adrp	x5, 202000 <__FRAME_END__-0xcd0>
  214ba0:	add	x2, x2, #0xb08
  214ba4:	add	x4, x4, #0xbc0
  214ba8:	add	x5, x5, #0x884
  214bac:	mov	w0, #0x7                   	// #7
  214bb0:	mov	w3, #0x125                 	// #293
  214bb4:	mov	w1, wzr
  214bb8:	mov	x6, x19
  214bbc:	bl	215c40 <log_internal_realm@plt>
  214bc0:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  214bc4:	add	x1, x1, #0x899
  214bc8:	sub	x2, x29, #0x8
  214bcc:	mov	x0, x19
  214bd0:	bl	215d60 <unit_name_from_path@plt>
  214bd4:	tbnz	w0, #31, 214c58 <add_swap+0x184>
  214bd8:	adrp	x22, 236000 <_DYNAMIC+0x10000>
  214bdc:	ldr	x0, [x22, #1048]
  214be0:	bl	214384 <empty_to_root>
  214be4:	ldur	x1, [x29, #-8]
  214be8:	mov	x2, #0xffffffffffffffff    	// #-1
  214bec:	bl	215d70 <path_join_internal@plt>
  214bf0:	str	x0, [sp, #16]
  214bf4:	cbz	x0, 214ccc <add_swap+0x1f8>
  214bf8:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  214bfc:	add	x1, x1, #0x94e
  214c00:	mov	x20, x0
  214c04:	bl	215d80 <fopen64@plt>
  214c08:	str	x0, [sp, #8]
  214c0c:	cbz	x0, 214ce8 <add_swap+0x214>
  214c10:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  214c14:	add	x1, x1, #0x89f
  214c18:	mov	x2, x19
  214c1c:	mov	x21, x0
  214c20:	bl	215d90 <fprintf@plt>
  214c24:	mov	x0, x21
  214c28:	bl	215dd0 <fflush_and_check@plt>
  214c2c:	tbnz	w0, #31, 214d24 <add_swap+0x250>
  214c30:	ldr	x0, [x22, #1048]
  214c34:	ldur	x3, [x29, #-8]
  214c38:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  214c3c:	adrp	x2, 201000 <__FRAME_END__-0x1cd0>
  214c40:	add	x1, x1, #0x980
  214c44:	add	x2, x2, #0xfa4
  214c48:	bl	215de0 <generator_add_symlink@plt>
  214c4c:	b	214b88 <add_swap+0xb4>
  214c50:	mov	w19, wzr
  214c54:	b	214c9c <add_swap+0x1c8>
  214c58:	mov	w20, w0
  214c5c:	mov	w0, wzr
  214c60:	bl	215c30 <log_get_max_level_realm@plt>
  214c64:	cmp	w0, #0x3
  214c68:	b.lt	214c90 <add_swap+0x1bc>  // b.tstop
  214c6c:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  214c70:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  214c74:	adrp	x5, 201000 <__FRAME_END__-0x1cd0>
  214c78:	add	x2, x2, #0xb08
  214c7c:	add	x4, x4, #0xbc0
  214c80:	add	x5, x5, #0xc40
  214c84:	mov	w0, #0x3                   	// #3
  214c88:	mov	w3, #0x129                 	// #297
  214c8c:	b	214b80 <add_swap+0xac>
  214c90:	mov	w8, wzr
  214c94:	neg	w9, w20
  214c98:	sub	w19, w8, w9, uxtb
  214c9c:	add	x0, sp, #0x8
  214ca0:	bl	2142d4 <fclosep>
  214ca4:	add	x0, sp, #0x10
  214ca8:	bl	2142bc <freep>
  214cac:	sub	x0, x29, #0x8
  214cb0:	bl	2142bc <freep>
  214cb4:	mov	w0, w19
  214cb8:	ldp	x20, x19, [sp, #64]
  214cbc:	ldp	x22, x21, [sp, #48]
  214cc0:	ldp	x29, x30, [sp, #32]
  214cc4:	add	sp, sp, #0x50
  214cc8:	ret
  214ccc:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  214cd0:	adrp	x3, 202000 <__FRAME_END__-0xcd0>
  214cd4:	add	x1, x1, #0xb08
  214cd8:	add	x3, x3, #0xbc0
  214cdc:	mov	w2, #0x12d                 	// #301
  214ce0:	bl	215db0 <log_oom_internal@plt>
  214ce4:	b	214b88 <add_swap+0xb4>
  214ce8:	bl	215dc0 <__errno_location@plt>
  214cec:	ldr	w19, [x0]
  214cf0:	mov	w0, wzr
  214cf4:	bl	215c30 <log_get_max_level_realm@plt>
  214cf8:	cmp	w0, #0x3
  214cfc:	b.lt	214d68 <add_swap+0x294>  // b.tstop
  214d00:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  214d04:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  214d08:	adrp	x5, 202000 <__FRAME_END__-0xcd0>
  214d0c:	add	x2, x2, #0xb08
  214d10:	add	x4, x4, #0xbc0
  214d14:	add	x5, x5, #0x952
  214d18:	mov	w0, #0x3                   	// #3
  214d1c:	mov	w3, #0x131                 	// #305
  214d20:	b	214d58 <add_swap+0x284>
  214d24:	mov	w19, w0
  214d28:	mov	w0, wzr
  214d2c:	bl	215c30 <log_get_max_level_realm@plt>
  214d30:	cmp	w0, #0x3
  214d34:	b.lt	214d78 <add_swap+0x2a4>  // b.tstop
  214d38:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  214d3c:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  214d40:	adrp	x5, 201000 <__FRAME_END__-0x1cd0>
  214d44:	add	x2, x2, #0xb08
  214d48:	add	x4, x4, #0xbc0
  214d4c:	add	x5, x5, #0x9d7
  214d50:	mov	w0, #0x3                   	// #3
  214d54:	mov	w3, #0x13e                 	// #318
  214d58:	mov	w1, w19
  214d5c:	mov	x6, x20
  214d60:	bl	215c40 <log_internal_realm@plt>
  214d64:	b	214b88 <add_swap+0xb4>
  214d68:	cmp	w19, #0x0
  214d6c:	mov	w8, wzr
  214d70:	cneg	w9, w19, mi  // mi = first
  214d74:	b	214c98 <add_swap+0x1c4>
  214d78:	mov	w8, wzr
  214d7c:	neg	w9, w19
  214d80:	b	214c98 <add_swap+0x1c4>
  214d84:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  214d88:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  214d8c:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  214d90:	add	x1, x1, #0xb5d
  214d94:	add	x2, x2, #0xb08
  214d98:	add	x4, x4, #0x3ba
  214d9c:	mov	w3, #0x11a                 	// #282
  214da0:	bl	215cc0 <log_assert_failed_realm@plt>

0000000000214da4 <add_xbootldr>:
  214da4:	stp	x29, x30, [sp, #-32]!
  214da8:	stp	x20, x19, [sp, #16]
  214dac:	mov	x29, sp
  214db0:	cbz	x0, 214ee8 <add_xbootldr+0x144>
  214db4:	mov	x19, x0
  214db8:	bl	215cb0 <in_initrd@plt>
  214dbc:	tbz	w0, #0, 214df8 <add_xbootldr+0x54>
  214dc0:	mov	w0, wzr
  214dc4:	bl	215c30 <log_get_max_level_realm@plt>
  214dc8:	cmp	w0, #0x7
  214dcc:	mov	w0, wzr
  214dd0:	b.lt	214edc <add_xbootldr+0x138>  // b.tstop
  214dd4:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  214dd8:	adrp	x4, 201000 <__FRAME_END__-0x1cd0>
  214ddc:	adrp	x5, 201000 <__FRAME_END__-0x1cd0>
  214de0:	add	x2, x2, #0xb08
  214de4:	add	x4, x4, #0xd5f
  214de8:	add	x5, x5, #0xf06
  214dec:	mov	w0, #0x7                   	// #7
  214df0:	mov	w3, #0x186                 	// #390
  214df4:	b	214e44 <add_xbootldr+0xa0>
  214df8:	adrp	x0, 201000 <__FRAME_END__-0x1cd0>
  214dfc:	add	x0, x0, #0xfb6
  214e00:	bl	215f90 <fstab_is_mount_point@plt>
  214e04:	mov	w20, w0
  214e08:	tbnz	w0, #31, 214e54 <add_xbootldr+0xb0>
  214e0c:	cbz	w20, 214e90 <add_xbootldr+0xec>
  214e10:	mov	w0, wzr
  214e14:	bl	215c30 <log_get_max_level_realm@plt>
  214e18:	cmp	w0, #0x7
  214e1c:	mov	w0, wzr
  214e20:	b.lt	214edc <add_xbootldr+0x138>  // b.tstop
  214e24:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  214e28:	adrp	x4, 201000 <__FRAME_END__-0x1cd0>
  214e2c:	adrp	x5, 201000 <__FRAME_END__-0x1cd0>
  214e30:	add	x2, x2, #0xb08
  214e34:	add	x4, x4, #0xd5f
  214e38:	add	x5, x5, #0xd6c
  214e3c:	mov	w0, #0x7                   	// #7
  214e40:	mov	w3, #0x18e                 	// #398
  214e44:	mov	w1, wzr
  214e48:	bl	215c40 <log_internal_realm@plt>
  214e4c:	mov	w0, wzr
  214e50:	b	214edc <add_xbootldr+0x138>
  214e54:	mov	w0, wzr
  214e58:	bl	215c30 <log_get_max_level_realm@plt>
  214e5c:	cmp	w0, #0x3
  214e60:	b.lt	214eac <add_xbootldr+0x108>  // b.tstop
  214e64:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  214e68:	adrp	x4, 201000 <__FRAME_END__-0x1cd0>
  214e6c:	adrp	x5, 202000 <__FRAME_END__-0xcd0>
  214e70:	add	x2, x2, #0xb08
  214e74:	add	x4, x4, #0xd5f
  214e78:	add	x5, x5, #0x80f
  214e7c:	mov	w0, #0x3                   	// #3
  214e80:	mov	w3, #0x18c                 	// #396
  214e84:	mov	w1, w20
  214e88:	bl	215c40 <log_internal_realm@plt>
  214e8c:	b	214edc <add_xbootldr+0x138>
  214e90:	adrp	x0, 201000 <__FRAME_END__-0x1cd0>
  214e94:	add	x0, x0, #0xfb6
  214e98:	bl	215578 <path_is_busy>
  214e9c:	tbnz	w0, #31, 214edc <add_xbootldr+0x138>
  214ea0:	cbz	w0, 214ebc <add_xbootldr+0x118>
  214ea4:	mov	w0, wzr
  214ea8:	b	214edc <add_xbootldr+0x138>
  214eac:	mov	w8, wzr
  214eb0:	neg	w9, w20
  214eb4:	sub	w0, w8, w9, uxtb
  214eb8:	b	214edc <add_xbootldr+0x138>
  214ebc:	ldp	x3, x1, [x19, #32]
  214ec0:	adrp	x0, 202000 <__FRAME_END__-0xcd0>
  214ec4:	adrp	x2, 201000 <__FRAME_END__-0x1cd0>
  214ec8:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  214ecc:	add	x0, x0, #0xb89
  214ed0:	add	x2, x2, #0xfb6
  214ed4:	add	x4, x4, #0x366
  214ed8:	bl	215694 <add_automount>
  214edc:	ldp	x20, x19, [sp, #16]
  214ee0:	ldp	x29, x30, [sp], #32
  214ee4:	ret
  214ee8:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  214eec:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  214ef0:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  214ef4:	add	x1, x1, #0x468
  214ef8:	add	x2, x2, #0xb08
  214efc:	add	x4, x4, #0xb62
  214f00:	mov	w3, #0x183                 	// #387
  214f04:	bl	215cc0 <log_assert_failed_realm@plt>

0000000000214f08 <add_esp>:
  214f08:	sub	sp, sp, #0x40
  214f0c:	stp	x29, x30, [sp, #16]
  214f10:	stp	x22, x21, [sp, #32]
  214f14:	stp	x20, x19, [sp, #48]
  214f18:	add	x29, sp, #0x10
  214f1c:	cbz	x0, 215258 <add_esp+0x350>
  214f20:	mov	w21, w1
  214f24:	mov	x19, x0
  214f28:	bl	215cb0 <in_initrd@plt>
  214f2c:	tbz	w0, #0, 214f74 <add_esp+0x6c>
  214f30:	mov	w0, wzr
  214f34:	bl	215c30 <log_get_max_level_realm@plt>
  214f38:	cmp	w0, #0x7
  214f3c:	mov	w0, wzr
  214f40:	b.lt	21518c <add_esp+0x284>  // b.tstop
  214f44:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  214f48:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  214f4c:	adrp	x5, 202000 <__FRAME_END__-0xcd0>
  214f50:	add	x2, x2, #0xb08
  214f54:	add	x4, x4, #0x9f7
  214f58:	add	x5, x5, #0xc05
  214f5c:	mov	w0, #0x7                   	// #7
  214f60:	mov	w3, #0x1aa                 	// #426
  214f64:	mov	w1, wzr
  214f68:	bl	215c40 <log_internal_realm@plt>
  214f6c:	mov	w0, wzr
  214f70:	b	21518c <add_esp+0x284>
  214f74:	adrp	x20, 201000 <__FRAME_END__-0x1cd0>
  214f78:	add	x20, x20, #0xa5e
  214f7c:	mov	x0, x20
  214f80:	mov	w1, wzr
  214f84:	bl	215fa0 <access@plt>
  214f88:	tbnz	w0, #31, 215008 <add_esp+0x100>
  214f8c:	mov	x8, xzr
  214f90:	mov	x9, xzr
  214f94:	cmp	x9, #0x0
  214f98:	adrp	x10, 201000 <__FRAME_END__-0x1cd0>
  214f9c:	csel	x20, x20, x9, eq  // eq = none
  214fa0:	add	x10, x10, #0x928
  214fa4:	cmp	x8, #0x0
  214fa8:	mov	x0, x20
  214fac:	csel	x21, x10, x8, eq  // eq = none
  214fb0:	bl	215f90 <fstab_is_mount_point@plt>
  214fb4:	mov	w22, w0
  214fb8:	tbnz	w0, #31, 215030 <add_esp+0x128>
  214fbc:	cbz	w22, 215064 <add_esp+0x15c>
  214fc0:	mov	w0, wzr
  214fc4:	bl	215c30 <log_get_max_level_realm@plt>
  214fc8:	cmp	w0, #0x7
  214fcc:	mov	w0, wzr
  214fd0:	b.lt	21518c <add_esp+0x284>  // b.tstop
  214fd4:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  214fd8:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  214fdc:	adrp	x5, 201000 <__FRAME_END__-0x1cd0>
  214fe0:	add	x2, x2, #0xb08
  214fe4:	add	x4, x4, #0x9f7
  214fe8:	add	x5, x5, #0x92c
  214fec:	mov	w0, #0x7                   	// #7
  214ff0:	mov	w3, #0x1c4                 	// #452
  214ff4:	mov	w1, wzr
  214ff8:	mov	x6, x20
  214ffc:	bl	215c40 <log_internal_realm@plt>
  215000:	mov	w0, wzr
  215004:	b	21518c <add_esp+0x284>
  215008:	bl	215dc0 <__errno_location@plt>
  21500c:	ldr	w22, [x0]
  215010:	cmp	w22, #0x2
  215014:	b.ne	21507c <add_esp+0x174>  // b.any
  215018:	tbnz	w21, #0, 214f8c <add_esp+0x84>
  21501c:	adrp	x9, 201000 <__FRAME_END__-0x1cd0>
  215020:	adrp	x8, 202000 <__FRAME_END__-0xcd0>
  215024:	add	x9, x9, #0xfb6
  215028:	add	x8, x8, #0xb89
  21502c:	b	214f94 <add_esp+0x8c>
  215030:	mov	w0, wzr
  215034:	bl	215c30 <log_get_max_level_realm@plt>
  215038:	cmp	w0, #0x3
  21503c:	b.lt	2150b8 <add_esp+0x1b0>  // b.tstop
  215040:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  215044:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  215048:	adrp	x5, 202000 <__FRAME_END__-0xcd0>
  21504c:	add	x2, x2, #0xb08
  215050:	add	x4, x4, #0x9f7
  215054:	add	x5, x5, #0x80f
  215058:	mov	w0, #0x3                   	// #3
  21505c:	mov	w3, #0x1c2                 	// #450
  215060:	b	2150ac <add_esp+0x1a4>
  215064:	mov	x0, x20
  215068:	bl	215578 <path_is_busy>
  21506c:	tbnz	w0, #31, 21518c <add_esp+0x284>
  215070:	cbz	w0, 2150dc <add_esp+0x1d4>
  215074:	mov	w0, wzr
  215078:	b	21518c <add_esp+0x284>
  21507c:	mov	w0, wzr
  215080:	bl	215c30 <log_get_max_level_realm@plt>
  215084:	cmp	w0, #0x3
  215088:	b.lt	2150c8 <add_esp+0x1c0>  // b.tstop
  21508c:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  215090:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  215094:	adrp	x5, 202000 <__FRAME_END__-0xcd0>
  215098:	add	x2, x2, #0xb08
  21509c:	add	x4, x4, #0x9f7
  2150a0:	add	x5, x5, #0xee
  2150a4:	mov	w0, #0x3                   	// #3
  2150a8:	mov	w3, #0x1b2                 	// #434
  2150ac:	mov	w1, w22
  2150b0:	bl	215c40 <log_internal_realm@plt>
  2150b4:	b	21518c <add_esp+0x284>
  2150b8:	mov	w8, wzr
  2150bc:	neg	w9, w22
  2150c0:	sub	w0, w8, w9, uxtb
  2150c4:	b	21518c <add_esp+0x284>
  2150c8:	cmp	w22, #0x0
  2150cc:	mov	w8, wzr
  2150d0:	cneg	w9, w22, mi  // mi = first
  2150d4:	sub	w0, w8, w9, uxtb
  2150d8:	b	21518c <add_esp+0x284>
  2150dc:	bl	215d00 <is_efi_boot@plt>
  2150e0:	tbz	w0, #0, 21513c <add_esp+0x234>
  2150e4:	mov	x0, sp
  2150e8:	bl	215d10 <efi_loader_get_device_part_uuid@plt>
  2150ec:	cmn	w0, #0x2
  2150f0:	b.ne	2151a0 <add_esp+0x298>  // b.any
  2150f4:	mov	w0, wzr
  2150f8:	bl	215c30 <log_get_max_level_realm@plt>
  2150fc:	cmp	w0, #0x7
  215100:	b.lt	21512c <add_esp+0x224>  // b.tstop
  215104:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  215108:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  21510c:	adrp	x5, 202000 <__FRAME_END__-0xcd0>
  215110:	add	x2, x2, #0xb08
  215114:	add	x4, x4, #0x9f7
  215118:	add	x5, x5, #0x3d5
  21511c:	mov	w0, #0x7                   	// #7
  215120:	mov	w3, #0x1d5                 	// #469
  215124:	mov	w1, wzr
  215128:	bl	215c40 <log_internal_realm@plt>
  21512c:	mov	w0, wzr
  215130:	mov	w8, wzr
  215134:	tbnz	wzr, #0, 215174 <add_esp+0x26c>
  215138:	b	21518c <add_esp+0x284>
  21513c:	mov	w0, wzr
  215140:	bl	215c30 <log_get_max_level_realm@plt>
  215144:	cmp	w0, #0x7
  215148:	b.lt	215174 <add_esp+0x26c>  // b.tstop
  21514c:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  215150:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  215154:	adrp	x5, 201000 <__FRAME_END__-0x1cd0>
  215158:	add	x2, x2, #0xb08
  21515c:	add	x4, x4, #0x9f7
  215160:	add	x5, x5, #0xc16
  215164:	mov	w0, #0x7                   	// #7
  215168:	mov	w3, #0x1e0                 	// #480
  21516c:	mov	w1, wzr
  215170:	bl	215c40 <log_internal_realm@plt>
  215174:	ldp	x3, x1, [x19, #32]
  215178:	adrp	x4, 201000 <__FRAME_END__-0x1cd0>
  21517c:	add	x4, x4, #0xa87
  215180:	mov	x0, x21
  215184:	mov	x2, x20
  215188:	bl	215694 <add_automount>
  21518c:	ldp	x20, x19, [sp, #48]
  215190:	ldp	x22, x21, [sp, #32]
  215194:	ldp	x29, x30, [sp, #16]
  215198:	add	sp, sp, #0x40
  21519c:	ret
  2151a0:	mov	w22, w0
  2151a4:	tbnz	w0, #31, 2151c4 <add_esp+0x2bc>
  2151a8:	ldp	x0, x1, [x19, #16]
  2151ac:	ldp	x2, x3, [sp]
  2151b0:	bl	215aec <sd_id128_equal>
  2151b4:	cbz	w0, 215208 <add_esp+0x300>
  2151b8:	mov	w8, #0x1                   	// #1
  2151bc:	tbnz	w8, #0, 215174 <add_esp+0x26c>
  2151c0:	b	21518c <add_esp+0x284>
  2151c4:	mov	w0, wzr
  2151c8:	bl	215c30 <log_get_max_level_realm@plt>
  2151cc:	cmp	w0, #0x3
  2151d0:	b.lt	215244 <add_esp+0x33c>  // b.tstop
  2151d4:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  2151d8:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  2151dc:	adrp	x5, 201000 <__FRAME_END__-0x1cd0>
  2151e0:	add	x2, x2, #0xb08
  2151e4:	add	x4, x4, #0x9f7
  2151e8:	add	x5, x5, #0xb6a
  2151ec:	mov	w0, #0x3                   	// #3
  2151f0:	mov	w3, #0x1d9                 	// #473
  2151f4:	mov	w1, w22
  2151f8:	bl	215c40 <log_internal_realm@plt>
  2151fc:	mov	w8, wzr
  215200:	tbnz	wzr, #0, 215174 <add_esp+0x26c>
  215204:	b	21518c <add_esp+0x284>
  215208:	bl	215c30 <log_get_max_level_realm@plt>
  21520c:	cmp	w0, #0x7
  215210:	b.lt	21512c <add_esp+0x224>  // b.tstop
  215214:	ldr	x6, [x19, #40]
  215218:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  21521c:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  215220:	adrp	x5, 202000 <__FRAME_END__-0xcd0>
  215224:	add	x2, x2, #0xb08
  215228:	add	x4, x4, #0x9f7
  21522c:	add	x5, x5, #0xabc
  215230:	mov	w0, #0x7                   	// #7
  215234:	mov	w3, #0x1dc                 	// #476
  215238:	mov	w1, wzr
  21523c:	bl	215c40 <log_internal_realm@plt>
  215240:	b	21512c <add_esp+0x224>
  215244:	mov	w8, wzr
  215248:	neg	w9, w22
  21524c:	sub	w0, w8, w9, uxtb
  215250:	tbnz	wzr, #0, 215174 <add_esp+0x26c>
  215254:	b	21518c <add_esp+0x284>
  215258:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  21525c:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  215260:	adrp	x4, 201000 <__FRAME_END__-0x1cd0>
  215264:	add	x1, x1, #0x468
  215268:	add	x2, x2, #0xb08
  21526c:	add	x4, x4, #0x9ae
  215270:	mov	w3, #0x1a7                 	// #423
  215274:	bl	215cc0 <log_assert_failed_realm@plt>

0000000000215278 <add_partition_mount>:
  215278:	stp	x29, x30, [sp, #-48]!
  21527c:	stp	x22, x21, [sp, #16]
  215280:	stp	x20, x19, [sp, #32]
  215284:	mov	x29, sp
  215288:	cbz	x0, 2152e8 <add_partition_mount+0x70>
  21528c:	mov	x22, x0
  215290:	mov	x0, x2
  215294:	mov	x19, x3
  215298:	mov	x20, x2
  21529c:	mov	x21, x1
  2152a0:	bl	215578 <path_is_busy>
  2152a4:	cbz	w0, 2152b0 <add_partition_mount+0x38>
  2152a8:	and	w0, w0, w0, asr #31
  2152ac:	b	2152d8 <add_partition_mount+0x60>
  2152b0:	ldrb	w8, [x22]
  2152b4:	ldp	x3, x1, [x22, #32]
  2152b8:	adrp	x7, 201000 <__FRAME_END__-0x1cd0>
  2152bc:	add	x7, x7, #0xc6c
  2152c0:	ubfx	w4, w8, #1, #1
  2152c4:	mov	x0, x21
  2152c8:	mov	x2, x20
  2152cc:	mov	x5, xzr
  2152d0:	mov	x6, x19
  2152d4:	bl	2137d0 <add_mount>
  2152d8:	ldp	x20, x19, [sp, #32]
  2152dc:	ldp	x22, x21, [sp, #16]
  2152e0:	ldp	x29, x30, [sp], #48
  2152e4:	ret
  2152e8:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  2152ec:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  2152f0:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  2152f4:	add	x1, x1, #0x468
  2152f8:	add	x2, x2, #0xb08
  2152fc:	add	x4, x4, #0x9ff
  215300:	mov	w3, #0x104                 	// #260
  215304:	bl	215cc0 <log_assert_failed_realm@plt>

0000000000215308 <add_root_rw>:
  215308:	stp	x29, x30, [sp, #-48]!
  21530c:	str	x21, [sp, #16]
  215310:	stp	x20, x19, [sp, #32]
  215314:	mov	x29, sp
  215318:	sub	sp, sp, #0x10
  21531c:	cbz	x0, 21550c <add_root_rw+0x204>
  215320:	mov	x19, x0
  215324:	bl	215cb0 <in_initrd@plt>
  215328:	tbz	w0, #0, 215364 <add_root_rw+0x5c>
  21532c:	mov	w0, wzr
  215330:	bl	215c30 <log_get_max_level_realm@plt>
  215334:	cmp	w0, #0x7
  215338:	mov	w0, wzr
  21533c:	b.lt	2153f0 <add_root_rw+0xe8>  // b.tstop
  215340:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  215344:	adrp	x4, 201000 <__FRAME_END__-0x1cd0>
  215348:	adrp	x5, 202000 <__FRAME_END__-0xcd0>
  21534c:	add	x2, x2, #0xb08
  215350:	add	x4, x4, #0xb5a
  215354:	add	x5, x5, #0x6c7
  215358:	mov	w0, #0x7                   	// #7
  21535c:	mov	w3, #0x1f8                 	// #504
  215360:	b	2153e4 <add_root_rw+0xdc>
  215364:	adrp	x8, 236000 <_DYNAMIC+0x10000>
  215368:	ldr	w8, [x8, #1032]
  21536c:	tbnz	w8, #31, 2153a8 <add_root_rw+0xa0>
  215370:	mov	w0, wzr
  215374:	bl	215c30 <log_get_max_level_realm@plt>
  215378:	cmp	w0, #0x7
  21537c:	mov	w0, wzr
  215380:	b.lt	2153f0 <add_root_rw+0xe8>  // b.tstop
  215384:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  215388:	adrp	x4, 201000 <__FRAME_END__-0x1cd0>
  21538c:	adrp	x5, 202000 <__FRAME_END__-0xcd0>
  215390:	add	x2, x2, #0xb08
  215394:	add	x4, x4, #0xb5a
  215398:	add	x5, x5, #0x11a
  21539c:	mov	w0, #0x7                   	// #7
  2153a0:	mov	w3, #0x1fd                 	// #509
  2153a4:	b	2153e4 <add_root_rw+0xdc>
  2153a8:	ldrb	w8, [x19]
  2153ac:	tbnz	w8, #1, 215404 <add_root_rw+0xfc>
  2153b0:	mov	w0, wzr
  2153b4:	bl	215c30 <log_get_max_level_realm@plt>
  2153b8:	cmp	w0, #0x7
  2153bc:	mov	w0, wzr
  2153c0:	b.lt	2153f0 <add_root_rw+0xe8>  // b.tstop
  2153c4:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  2153c8:	adrp	x4, 201000 <__FRAME_END__-0x1cd0>
  2153cc:	adrp	x5, 201000 <__FRAME_END__-0x1cd0>
  2153d0:	add	x2, x2, #0xb08
  2153d4:	add	x4, x4, #0xb5a
  2153d8:	add	x5, x5, #0xfde
  2153dc:	mov	w0, #0x7                   	// #7
  2153e0:	mov	w3, #0x202                 	// #514
  2153e4:	mov	w1, wzr
  2153e8:	bl	215c40 <log_internal_realm@plt>
  2153ec:	mov	w0, wzr
  2153f0:	mov	sp, x29
  2153f4:	ldp	x20, x19, [sp, #32]
  2153f8:	ldr	x21, [sp, #16]
  2153fc:	ldp	x29, x30, [sp], #48
  215400:	ret
  215404:	adrp	x21, 236000 <_DYNAMIC+0x10000>
  215408:	ldr	x0, [x21, #1048]
  21540c:	bl	215fb0 <generator_enable_remount_fs_service@plt>
  215410:	ldr	x8, [x21, #1048]
  215414:	adrp	x9, 201000 <__FRAME_END__-0x1cd0>
  215418:	mov	x20, xzr
  21541c:	mov	x19, xzr
  215420:	add	x9, x9, #0xaa6
  215424:	sub	x21, x29, #0x10
  215428:	stp	x8, x9, [x29, #-16]
  21542c:	ldr	x0, [x21, x20]
  215430:	cbz	x0, 215448 <add_root_rw+0x140>
  215434:	bl	215e10 <strlen@plt>
  215438:	add	x20, x20, #0x8
  21543c:	cmp	x20, #0x10
  215440:	add	x19, x0, x19
  215444:	b.ne	21542c <add_root_rw+0x124>  // b.any
  215448:	add	x19, x19, #0x1
  21544c:	mov	x0, x19
  215450:	bl	21432c <size_multiply_overflow>
  215454:	tbnz	w0, #0, 21552c <add_root_rw+0x224>
  215458:	cmp	x19, #0x400, lsl #12
  21545c:	b.hi	215538 <add_root_rw+0x230>  // b.pmore
  215460:	add	x9, x19, #0xf
  215464:	mov	x8, sp
  215468:	and	x9, x9, #0xfffffffffffffff0
  21546c:	sub	x19, x8, x9
  215470:	mov	sp, x19
  215474:	mov	x20, xzr
  215478:	sub	x21, x29, #0x10
  21547c:	mov	x0, x19
  215480:	ldr	x1, [x21, x20]
  215484:	cbz	x1, 215498 <add_root_rw+0x190>
  215488:	bl	215e20 <stpcpy@plt>
  21548c:	add	x20, x20, #0x8
  215490:	cmp	x20, #0x10
  215494:	b.ne	215480 <add_root_rw+0x178>  // b.any
  215498:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  21549c:	strb	wzr, [x0]
  2154a0:	add	x1, x1, #0xe33
  2154a4:	mov	w2, #0xc1                  	// #193
  2154a8:	mov	x0, x19
  2154ac:	bl	214334 <write_string_file>
  2154b0:	mov	w20, w0
  2154b4:	mov	w0, wzr
  2154b8:	tbz	w20, #31, 2153f0 <add_root_rw+0xe8>
  2154bc:	mov	w0, wzr
  2154c0:	bl	215c30 <log_get_max_level_realm@plt>
  2154c4:	cmp	w0, #0x3
  2154c8:	b.lt	2154fc <add_root_rw+0x1f4>  // b.tstop
  2154cc:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  2154d0:	adrp	x4, 201000 <__FRAME_END__-0x1cd0>
  2154d4:	adrp	x5, 201000 <__FRAME_END__-0x1cd0>
  2154d8:	add	x2, x2, #0xb08
  2154dc:	add	x4, x4, #0xb5a
  2154e0:	add	x5, x5, #0xf32
  2154e4:	mov	w0, #0x3                   	// #3
  2154e8:	mov	w3, #0x210                 	// #528
  2154ec:	mov	w1, w20
  2154f0:	mov	x6, x19
  2154f4:	bl	215c40 <log_internal_realm@plt>
  2154f8:	b	2153f0 <add_root_rw+0xe8>
  2154fc:	mov	w8, wzr
  215500:	neg	w9, w20
  215504:	sub	w0, w8, w9, uxtb
  215508:	b	2153f0 <add_root_rw+0xe8>
  21550c:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  215510:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  215514:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  215518:	add	x1, x1, #0x468
  21551c:	add	x2, x2, #0xb08
  215520:	add	x4, x4, #0x37c
  215524:	mov	w3, #0x1f5                 	// #501
  215528:	bl	215cc0 <log_assert_failed_realm@plt>
  21552c:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  215530:	add	x1, x1, #0xec0
  215534:	b	215540 <add_root_rw+0x238>
  215538:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  21553c:	add	x1, x1, #0x94f
  215540:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  215544:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  215548:	add	x2, x2, #0xb08
  21554c:	add	x4, x4, #0x37c
  215550:	mov	w3, #0x208                 	// #520
  215554:	mov	w0, wzr
  215558:	bl	215cc0 <log_assert_failed_realm@plt>

000000000021555c <sd_device_unrefp>:
  21555c:	stp	x29, x30, [sp, #-16]!
  215560:	ldr	x0, [x0]
  215564:	mov	x29, sp
  215568:	cbz	x0, 215570 <sd_device_unrefp+0x14>
  21556c:	bl	215fc0 <sd_device_unref@plt>
  215570:	ldp	x29, x30, [sp], #16
  215574:	ret

0000000000215578 <path_is_busy>:
  215578:	stp	x29, x30, [sp, #-32]!
  21557c:	mov	w2, #0x400                 	// #1024
  215580:	mov	x1, xzr
  215584:	stp	x20, x19, [sp, #16]
  215588:	mov	x29, sp
  21558c:	mov	x19, x0
  215590:	bl	215fd0 <path_is_mount_point@plt>
  215594:	mov	w20, w0
  215598:	cmp	w0, #0x0
  21559c:	mov	w0, wzr
  2155a0:	b.gt	215688 <path_is_busy+0x110>
  2155a4:	cmn	w20, #0x2
  2155a8:	b.eq	215688 <path_is_busy+0x110>  // b.none
  2155ac:	tbnz	w20, #31, 215608 <path_is_busy+0x90>
  2155b0:	mov	x0, x19
  2155b4:	bl	215ad0 <dir_is_empty>
  2155b8:	mov	w20, w0
  2155bc:	tbnz	w0, #31, 21563c <path_is_busy+0xc4>
  2155c0:	mov	w0, wzr
  2155c4:	cbnz	w20, 215688 <path_is_busy+0x110>
  2155c8:	bl	215c30 <log_get_max_level_realm@plt>
  2155cc:	cmp	w0, #0x7
  2155d0:	b.lt	215600 <path_is_busy+0x88>  // b.tstop
  2155d4:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  2155d8:	adrp	x4, 201000 <__FRAME_END__-0x1cd0>
  2155dc:	adrp	x5, 201000 <__FRAME_END__-0x1cd0>
  2155e0:	add	x2, x2, #0xb08
  2155e4:	add	x4, x4, #0xc09
  2155e8:	add	x5, x5, #0xfbc
  2155ec:	mov	w0, #0x7                   	// #7
  2155f0:	mov	w3, #0xf9                  	// #249
  2155f4:	mov	w1, wzr
  2155f8:	mov	x6, x19
  2155fc:	bl	215c40 <log_internal_realm@plt>
  215600:	mov	w0, #0x1                   	// #1
  215604:	b	215688 <path_is_busy+0x110>
  215608:	mov	w0, wzr
  21560c:	bl	215c30 <log_get_max_level_realm@plt>
  215610:	cmp	w0, #0x4
  215614:	b.lt	21567c <path_is_busy+0x104>  // b.tstop
  215618:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  21561c:	adrp	x4, 201000 <__FRAME_END__-0x1cd0>
  215620:	adrp	x5, 202000 <__FRAME_END__-0xcd0>
  215624:	add	x2, x2, #0xb08
  215628:	add	x4, x4, #0xc09
  21562c:	add	x5, x5, #0xc66
  215630:	mov	w0, #0x4                   	// #4
  215634:	mov	w3, #0xf0                  	// #240
  215638:	b	21566c <path_is_busy+0xf4>
  21563c:	mov	w0, wzr
  215640:	bl	215c30 <log_get_max_level_realm@plt>
  215644:	cmp	w0, #0x4
  215648:	b.lt	21567c <path_is_busy+0x104>  // b.tstop
  21564c:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  215650:	adrp	x4, 201000 <__FRAME_END__-0x1cd0>
  215654:	adrp	x5, 201000 <__FRAME_END__-0x1cd0>
  215658:	add	x2, x2, #0xb08
  21565c:	add	x4, x4, #0xc09
  215660:	add	x5, x5, #0x98c
  215664:	mov	w0, #0x4                   	// #4
  215668:	mov	w3, #0xf5                  	// #245
  21566c:	mov	w1, w20
  215670:	mov	x6, x19
  215674:	bl	215c40 <log_internal_realm@plt>
  215678:	b	215688 <path_is_busy+0x110>
  21567c:	mov	w8, wzr
  215680:	neg	w9, w20
  215684:	sub	w0, w8, w9, uxtb
  215688:	ldp	x20, x19, [sp, #16]
  21568c:	ldp	x29, x30, [sp], #32
  215690:	ret

0000000000215694 <add_automount>:
  215694:	stp	x29, x30, [sp, #-80]!
  215698:	stp	x26, x25, [sp, #16]
  21569c:	stp	x24, x23, [sp, #32]
  2156a0:	stp	x22, x21, [sp, #48]
  2156a4:	stp	x20, x19, [sp, #64]
  2156a8:	mov	x29, sp
  2156ac:	sub	sp, sp, #0x30
  2156b0:	stp	xzr, xzr, [x29, #-16]
  2156b4:	cbz	x0, 215a08 <add_automount+0x374>
  2156b8:	mov	x20, x2
  2156bc:	cbz	x2, 215a28 <add_automount+0x394>
  2156c0:	mov	x19, x4
  2156c4:	cbz	x4, 215a4c <add_automount+0x3b8>
  2156c8:	adrp	x8, 201000 <__FRAME_END__-0x1cd0>
  2156cc:	adrp	x9, 201000 <__FRAME_END__-0x1cd0>
  2156d0:	adrp	x10, 201000 <__FRAME_END__-0x1cd0>
  2156d4:	mov	x21, x3
  2156d8:	mov	x22, x1
  2156dc:	mov	x23, x0
  2156e0:	mov	x25, xzr
  2156e4:	mov	x24, xzr
  2156e8:	add	x8, x8, #0x8b1
  2156ec:	add	x9, x9, #0xe2e
  2156f0:	add	x10, x10, #0xb53
  2156f4:	sub	x26, x29, #0x28
  2156f8:	stp	x8, x9, [x29, #-40]
  2156fc:	stur	x10, [x29, #-24]
  215700:	ldr	x0, [x26, x25]
  215704:	cbz	x0, 21571c <add_automount+0x88>
  215708:	bl	215e10 <strlen@plt>
  21570c:	add	x25, x25, #0x8
  215710:	cmp	x25, #0x18
  215714:	add	x24, x0, x24
  215718:	b.ne	215700 <add_automount+0x6c>  // b.any
  21571c:	add	x24, x24, #0x1
  215720:	mov	x0, x24
  215724:	bl	21432c <size_multiply_overflow>
  215728:	tbnz	w0, #0, 215a70 <add_automount+0x3dc>
  21572c:	cmp	x24, #0x400, lsl #12
  215730:	b.hi	215a7c <add_automount+0x3e8>  // b.pmore
  215734:	add	x9, x24, #0xf
  215738:	mov	x8, sp
  21573c:	and	x9, x9, #0xfffffffffffffff0
  215740:	sub	x24, x8, x9
  215744:	mov	sp, x24
  215748:	mov	x25, xzr
  21574c:	sub	x26, x29, #0x28
  215750:	mov	x0, x24
  215754:	ldr	x1, [x26, x25]
  215758:	cbz	x1, 21576c <add_automount+0xd8>
  21575c:	bl	215e20 <stpcpy@plt>
  215760:	add	x25, x25, #0x8
  215764:	cmp	x25, #0x18
  215768:	b.ne	215754 <add_automount+0xc0>  // b.any
  21576c:	strb	wzr, [x0]
  215770:	mov	w4, #0x1                   	// #1
  215774:	mov	x0, x23
  215778:	mov	x1, x22
  21577c:	mov	x2, x20
  215780:	mov	x3, x21
  215784:	mov	x5, x24
  215788:	mov	x6, x19
  21578c:	mov	x7, xzr
  215790:	bl	2137d0 <add_mount>
  215794:	tbnz	w0, #31, 2159b0 <add_automount+0x31c>
  215798:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  21579c:	add	x1, x1, #0xa7c
  2157a0:	sub	x2, x29, #0x8
  2157a4:	mov	x0, x20
  2157a8:	bl	215d60 <unit_name_from_path@plt>
  2157ac:	tbnz	w0, #31, 2157f0 <add_automount+0x15c>
  2157b0:	adrp	x24, 236000 <_DYNAMIC+0x10000>
  2157b4:	ldur	x8, [x29, #-8]
  2157b8:	ldr	x23, [x24, #1048]
  2157bc:	mov	x22, x8
  2157c0:	ldrb	w8, [x8]
  2157c4:	cmp	w8, #0x2f
  2157c8:	b.ne	2157dc <add_automount+0x148>  // b.any
  2157cc:	mov	x8, x22
  2157d0:	ldrb	w9, [x8, #1]!
  2157d4:	cmp	w9, #0x2f
  2157d8:	b.eq	2157bc <add_automount+0x128>  // b.none
  2157dc:	mov	x0, x23
  2157e0:	bl	214310 <isempty>
  2157e4:	tbz	w0, #0, 215830 <add_automount+0x19c>
  2157e8:	mov	x21, x22
  2157ec:	b	2158bc <add_automount+0x228>
  2157f0:	mov	w21, w0
  2157f4:	mov	w0, wzr
  2157f8:	bl	215c30 <log_get_max_level_realm@plt>
  2157fc:	cmp	w0, #0x3
  215800:	b.lt	215960 <add_automount+0x2cc>  // b.tstop
  215804:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  215808:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  21580c:	adrp	x5, 201000 <__FRAME_END__-0x1cd0>
  215810:	add	x2, x2, #0xb08
  215814:	add	x4, x4, #0x724
  215818:	add	x5, x5, #0xc40
  21581c:	mov	w0, #0x3                   	// #3
  215820:	mov	w3, #0x166                 	// #358
  215824:	mov	w1, w21
  215828:	bl	215c40 <log_internal_realm@plt>
  21582c:	b	2159b0 <add_automount+0x31c>
  215830:	mov	x0, x23
  215834:	bl	215e10 <strlen@plt>
  215838:	mov	x21, x0
  21583c:	mov	x0, x22
  215840:	bl	215e10 <strlen@plt>
  215844:	add	x8, x21, x0
  215848:	add	x21, x8, #0x2
  21584c:	mov	x0, x21
  215850:	bl	21432c <size_multiply_overflow>
  215854:	tbnz	w0, #0, 215aa0 <add_automount+0x40c>
  215858:	cmp	x21, #0x400, lsl #12
  21585c:	b.hi	215aac <add_automount+0x418>  // b.pmore
  215860:	add	x9, x21, #0xf
  215864:	mov	x8, sp
  215868:	and	x9, x9, #0xfffffffffffffff0
  21586c:	sub	x21, x8, x9
  215870:	mov	sp, x21
  215874:	mov	x0, x21
  215878:	mov	x1, x23
  21587c:	bl	215e20 <stpcpy@plt>
  215880:	mov	x8, x0
  215884:	mov	x0, x8
  215888:	cmp	x8, x21
  21588c:	b.ls	2158a0 <add_automount+0x20c>  // b.plast
  215890:	mov	x8, x0
  215894:	ldrb	w9, [x8, #-1]!
  215898:	cmp	w9, #0x2f
  21589c:	b.eq	215884 <add_automount+0x1f0>  // b.none
  2158a0:	ldrb	w8, [x22]
  2158a4:	cmp	w8, #0x2f
  2158a8:	b.eq	2158b4 <add_automount+0x220>  // b.none
  2158ac:	mov	w8, #0x2f                  	// #47
  2158b0:	strb	w8, [x0], #1
  2158b4:	mov	x1, x22
  2158b8:	bl	215e30 <strcpy@plt>
  2158bc:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  2158c0:	add	x1, x1, #0x94e
  2158c4:	mov	x0, x21
  2158c8:	bl	215d80 <fopen64@plt>
  2158cc:	stur	x0, [x29, #-16]
  2158d0:	cbz	x0, 21591c <add_automount+0x288>
  2158d4:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  2158d8:	add	x1, x1, #0x270
  2158dc:	mov	w4, #0x78                  	// #120
  2158e0:	mov	x2, x19
  2158e4:	mov	x3, x20
  2158e8:	mov	x22, x0
  2158ec:	bl	215d90 <fprintf@plt>
  2158f0:	mov	x0, x22
  2158f4:	bl	215dd0 <fflush_and_check@plt>
  2158f8:	tbnz	w0, #31, 215970 <add_automount+0x2dc>
  2158fc:	ldr	x0, [x24, #1048]
  215900:	ldur	x3, [x29, #-8]
  215904:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  215908:	adrp	x2, 201000 <__FRAME_END__-0x1cd0>
  21590c:	add	x1, x1, #0xc6c
  215910:	add	x2, x2, #0xfa4
  215914:	bl	215de0 <generator_add_symlink@plt>
  215918:	b	2159b0 <add_automount+0x31c>
  21591c:	bl	215dc0 <__errno_location@plt>
  215920:	ldr	w19, [x0]
  215924:	mov	w0, wzr
  215928:	bl	215c30 <log_get_max_level_realm@plt>
  21592c:	cmp	w0, #0x3
  215930:	b.lt	2159e4 <add_automount+0x350>  // b.tstop
  215934:	ldur	x6, [x29, #-8]
  215938:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  21593c:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  215940:	adrp	x5, 202000 <__FRAME_END__-0xcd0>
  215944:	add	x2, x2, #0xb08
  215948:	add	x4, x4, #0x724
  21594c:	add	x5, x5, #0x952
  215950:	mov	w0, #0x3                   	// #3
  215954:	mov	w3, #0x16b                 	// #363
  215958:	mov	w1, w19
  21595c:	b	2159ac <add_automount+0x318>
  215960:	mov	w8, wzr
  215964:	neg	w9, w21
  215968:	sub	w21, w8, w9, uxtb
  21596c:	b	2159b4 <add_automount+0x320>
  215970:	mov	w19, w0
  215974:	mov	w0, wzr
  215978:	bl	215c30 <log_get_max_level_realm@plt>
  21597c:	cmp	w0, #0x3
  215980:	b.lt	2159f8 <add_automount+0x364>  // b.tstop
  215984:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  215988:	adrp	x4, 202000 <__FRAME_END__-0xcd0>
  21598c:	adrp	x5, 201000 <__FRAME_END__-0x1cd0>
  215990:	add	x2, x2, #0xb08
  215994:	add	x4, x4, #0x724
  215998:	add	x5, x5, #0x9d7
  21599c:	mov	w0, #0x3                   	// #3
  2159a0:	mov	w3, #0x17b                 	// #379
  2159a4:	mov	w1, w19
  2159a8:	mov	x6, x21
  2159ac:	bl	215c40 <log_internal_realm@plt>
  2159b0:	mov	w21, w0
  2159b4:	sub	x0, x29, #0x10
  2159b8:	bl	2142d4 <fclosep>
  2159bc:	sub	x0, x29, #0x8
  2159c0:	bl	2142bc <freep>
  2159c4:	mov	w0, w21
  2159c8:	mov	sp, x29
  2159cc:	ldp	x20, x19, [sp, #64]
  2159d0:	ldp	x22, x21, [sp, #48]
  2159d4:	ldp	x24, x23, [sp, #32]
  2159d8:	ldp	x26, x25, [sp, #16]
  2159dc:	ldp	x29, x30, [sp], #80
  2159e0:	ret
  2159e4:	cmp	w19, #0x0
  2159e8:	mov	w8, wzr
  2159ec:	cneg	w9, w19, mi  // mi = first
  2159f0:	sub	w21, w8, w9, uxtb
  2159f4:	b	2159b4 <add_automount+0x320>
  2159f8:	mov	w8, wzr
  2159fc:	neg	w9, w19
  215a00:	sub	w21, w8, w9, uxtb
  215a04:	b	2159b4 <add_automount+0x320>
  215a08:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  215a0c:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  215a10:	adrp	x4, 201000 <__FRAME_END__-0x1cd0>
  215a14:	add	x1, x1, #0xc7c
  215a18:	add	x2, x2, #0xb08
  215a1c:	add	x4, x4, #0xdb9
  215a20:	mov	w3, #0x152                 	// #338
  215a24:	bl	215cc0 <log_assert_failed_realm@plt>
  215a28:	adrp	x1, 202000 <__FRAME_END__-0xcd0>
  215a2c:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  215a30:	adrp	x4, 201000 <__FRAME_END__-0x1cd0>
  215a34:	add	x1, x1, #0xb97
  215a38:	add	x2, x2, #0xb08
  215a3c:	add	x4, x4, #0xdb9
  215a40:	mov	w3, #0x153                 	// #339
  215a44:	mov	w0, wzr
  215a48:	bl	215cc0 <log_assert_failed_realm@plt>
  215a4c:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  215a50:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  215a54:	adrp	x4, 201000 <__FRAME_END__-0x1cd0>
  215a58:	add	x1, x1, #0xfaa
  215a5c:	add	x2, x2, #0xb08
  215a60:	add	x4, x4, #0xdb9
  215a64:	mov	w3, #0x154                 	// #340
  215a68:	mov	w0, wzr
  215a6c:	bl	215cc0 <log_assert_failed_realm@plt>
  215a70:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  215a74:	add	x1, x1, #0xec0
  215a78:	b	215a84 <add_automount+0x3f0>
  215a7c:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  215a80:	add	x1, x1, #0x94f
  215a84:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  215a88:	adrp	x4, 201000 <__FRAME_END__-0x1cd0>
  215a8c:	add	x2, x2, #0xb08
  215a90:	add	x4, x4, #0xdb9
  215a94:	mov	w3, #0x157                 	// #343
  215a98:	mov	w0, wzr
  215a9c:	bl	215cc0 <log_assert_failed_realm@plt>
  215aa0:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  215aa4:	add	x1, x1, #0xec0
  215aa8:	b	215ab4 <add_automount+0x420>
  215aac:	adrp	x1, 201000 <__FRAME_END__-0x1cd0>
  215ab0:	add	x1, x1, #0x94f
  215ab4:	adrp	x2, 202000 <__FRAME_END__-0xcd0>
  215ab8:	adrp	x4, 201000 <__FRAME_END__-0x1cd0>
  215abc:	add	x2, x2, #0xb08
  215ac0:	add	x4, x4, #0xdb9
  215ac4:	mov	w3, #0x168                 	// #360
  215ac8:	mov	w0, wzr
  215acc:	bl	215cc0 <log_assert_failed_realm@plt>

0000000000215ad0 <dir_is_empty>:
  215ad0:	stp	x29, x30, [sp, #-16]!
  215ad4:	mov	x1, x0
  215ad8:	mov	w0, #0xffffff9c            	// #-100
  215adc:	mov	x29, sp
  215ae0:	bl	215fe0 <dir_is_empty_at@plt>
  215ae4:	ldp	x29, x30, [sp], #16
  215ae8:	ret

0000000000215aec <sd_id128_equal>:
  215aec:	sub	sp, sp, #0x20
  215af0:	eor	x8, x0, x2
  215af4:	eor	x9, x1, x3
  215af8:	orr	x8, x8, x9
  215afc:	cmp	x8, #0x0
  215b00:	stp	x0, x1, [sp, #16]
  215b04:	cset	w0, eq  // eq = none
  215b08:	stp	x2, x3, [sp], #32
  215b0c:	ret

0000000000215b10 <ALIGN_TO>:
  215b10:	add	x8, x0, #0x7
  215b14:	and	x0, x8, #0xfffffffffffffff8
  215b18:	ret
  215b1c:	udf	#0

0000000000215b20 <__libc_csu_init>:
  215b20:	stp	x29, x30, [sp, #-64]!
  215b24:	mov	x29, sp
  215b28:	stp	x19, x20, [sp, #16]
  215b2c:	adrp	x20, 226000 <_DYNAMIC>
  215b30:	add	x20, x20, #0x0
  215b34:	stp	x21, x22, [sp, #32]
  215b38:	adrp	x21, 225000 <dir_is_empty_at@plt+0xf020>
  215b3c:	add	x21, x21, #0xff8
  215b40:	sub	x20, x20, x21
  215b44:	mov	w22, w0
  215b48:	stp	x23, x24, [sp, #48]
  215b4c:	mov	x23, x1
  215b50:	mov	x24, x2
  215b54:	bl	215ba4 <_init>
  215b58:	cmp	xzr, x20, asr #3
  215b5c:	b.eq	215b88 <__libc_csu_init+0x68>  // b.none
  215b60:	asr	x20, x20, #3
  215b64:	mov	x19, #0x0                   	// #0
  215b68:	ldr	x3, [x21, x19, lsl #3]
  215b6c:	mov	x2, x24
  215b70:	add	x19, x19, #0x1
  215b74:	mov	x1, x23
  215b78:	mov	w0, w22
  215b7c:	blr	x3
  215b80:	cmp	x20, x19
  215b84:	b.ne	215b68 <__libc_csu_init+0x48>  // b.any
  215b88:	ldp	x19, x20, [sp, #16]
  215b8c:	ldp	x21, x22, [sp, #32]
  215b90:	ldp	x23, x24, [sp, #48]
  215b94:	ldp	x29, x30, [sp], #64
  215b98:	ret
  215b9c:	nop

0000000000215ba0 <__libc_csu_fini>:
  215ba0:	ret

Disassembly of section .init:

0000000000215ba4 <_init>:
  215ba4:	stp	x29, x30, [sp, #-16]!
  215ba8:	mov	x29, sp
  215bac:	bl	212e18 <call_weak_fn>
  215bb0:	ldp	x29, x30, [sp], #16
  215bb4:	ret

Disassembly of section .fini:

0000000000215bb8 <_fini>:
  215bb8:	stp	x29, x30, [sp, #-16]!
  215bbc:	mov	x29, sp
  215bc0:	ldp	x29, x30, [sp], #16
  215bc4:	ret

Disassembly of section .plt:

0000000000215bd0 <__libc_start_main@plt-0x20>:
  215bd0:	stp	x16, x30, [sp, #-16]!
  215bd4:	adrp	x16, 226000 <_DYNAMIC>
  215bd8:	ldr	x17, [x16, #504]
  215bdc:	add	x16, x16, #0x1f8
  215be0:	br	x17
  215be4:	nop
  215be8:	nop
  215bec:	nop

0000000000215bf0 <__libc_start_main@plt>:
  215bf0:	adrp	x16, 226000 <_DYNAMIC>
  215bf4:	ldr	x17, [x16, #512]
  215bf8:	add	x16, x16, #0x200
  215bfc:	br	x17

0000000000215c00 <abort@plt>:
  215c00:	adrp	x16, 226000 <_DYNAMIC>
  215c04:	ldr	x17, [x16, #520]
  215c08:	add	x16, x16, #0x208
  215c0c:	br	x17

0000000000215c10 <__gmon_start__@plt>:
  215c10:	adrp	x16, 226000 <_DYNAMIC>
  215c14:	ldr	x17, [x16, #528]
  215c18:	add	x16, x16, #0x210
  215c1c:	br	x17

0000000000215c20 <log_setup_generator@plt>:
  215c20:	adrp	x16, 226000 <_DYNAMIC>
  215c24:	ldr	x17, [x16, #536]
  215c28:	add	x16, x16, #0x218
  215c2c:	br	x17

0000000000215c30 <log_get_max_level_realm@plt>:
  215c30:	adrp	x16, 226000 <_DYNAMIC>
  215c34:	ldr	x17, [x16, #544]
  215c38:	add	x16, x16, #0x220
  215c3c:	br	x17

0000000000215c40 <log_internal_realm@plt>:
  215c40:	adrp	x16, 226000 <_DYNAMIC>
  215c44:	ldr	x17, [x16, #552]
  215c48:	add	x16, x16, #0x228
  215c4c:	br	x17

0000000000215c50 <ask_password_agent_close@plt>:
  215c50:	adrp	x16, 226000 <_DYNAMIC>
  215c54:	ldr	x17, [x16, #560]
  215c58:	add	x16, x16, #0x230
  215c5c:	br	x17

0000000000215c60 <polkit_agent_close@plt>:
  215c60:	adrp	x16, 226000 <_DYNAMIC>
  215c64:	ldr	x17, [x16, #568]
  215c68:	add	x16, x16, #0x238
  215c6c:	br	x17

0000000000215c70 <pager_close@plt>:
  215c70:	adrp	x16, 226000 <_DYNAMIC>
  215c74:	ldr	x17, [x16, #576]
  215c78:	add	x16, x16, #0x240
  215c7c:	br	x17

0000000000215c80 <mac_selinux_finish@plt>:
  215c80:	adrp	x16, 226000 <_DYNAMIC>
  215c84:	ldr	x17, [x16, #584]
  215c88:	add	x16, x16, #0x248
  215c8c:	br	x17

0000000000215c90 <detect_container@plt>:
  215c90:	adrp	x16, 226000 <_DYNAMIC>
  215c94:	ldr	x17, [x16, #592]
  215c98:	add	x16, x16, #0x250
  215c9c:	br	x17

0000000000215ca0 <proc_cmdline_parse@plt>:
  215ca0:	adrp	x16, 226000 <_DYNAMIC>
  215ca4:	ldr	x17, [x16, #600]
  215ca8:	add	x16, x16, #0x258
  215cac:	br	x17

0000000000215cb0 <in_initrd@plt>:
  215cb0:	adrp	x16, 226000 <_DYNAMIC>
  215cb4:	ldr	x17, [x16, #608]
  215cb8:	add	x16, x16, #0x260
  215cbc:	br	x17

0000000000215cc0 <log_assert_failed_realm@plt>:
  215cc0:	adrp	x16, 226000 <_DYNAMIC>
  215cc4:	ldr	x17, [x16, #616]
  215cc8:	add	x16, x16, #0x268
  215ccc:	br	x17

0000000000215cd0 <proc_cmdline_key_streq@plt>:
  215cd0:	adrp	x16, 226000 <_DYNAMIC>
  215cd4:	ldr	x17, [x16, #624]
  215cd8:	add	x16, x16, #0x270
  215cdc:	br	x17

0000000000215ce0 <parse_boolean@plt>:
  215ce0:	adrp	x16, 226000 <_DYNAMIC>
  215ce4:	ldr	x17, [x16, #632]
  215ce8:	add	x16, x16, #0x278
  215cec:	br	x17

0000000000215cf0 <strcmp@plt>:
  215cf0:	adrp	x16, 226000 <_DYNAMIC>
  215cf4:	ldr	x17, [x16, #640]
  215cf8:	add	x16, x16, #0x280
  215cfc:	br	x17

0000000000215d00 <is_efi_boot@plt>:
  215d00:	adrp	x16, 226000 <_DYNAMIC>
  215d04:	ldr	x17, [x16, #648]
  215d08:	add	x16, x16, #0x288
  215d0c:	br	x17

0000000000215d10 <efi_loader_get_device_part_uuid@plt>:
  215d10:	adrp	x16, 226000 <_DYNAMIC>
  215d14:	ldr	x17, [x16, #656]
  215d18:	add	x16, x16, #0x290
  215d1c:	br	x17

0000000000215d20 <generator_write_initrd_root_device_deps@plt>:
  215d20:	adrp	x16, 226000 <_DYNAMIC>
  215d24:	ldr	x17, [x16, #664]
  215d28:	add	x16, x16, #0x298
  215d2c:	br	x17

0000000000215d30 <get_block_device_harder@plt>:
  215d30:	adrp	x16, 226000 <_DYNAMIC>
  215d34:	ldr	x17, [x16, #672]
  215d38:	add	x16, x16, #0x2a0
  215d3c:	br	x17

0000000000215d40 <readlink_malloc@plt>:
  215d40:	adrp	x16, 226000 <_DYNAMIC>
  215d44:	ldr	x17, [x16, #680]
  215d48:	add	x16, x16, #0x2a8
  215d4c:	br	x17

0000000000215d50 <device_path_parse_major_minor@plt>:
  215d50:	adrp	x16, 226000 <_DYNAMIC>
  215d54:	ldr	x17, [x16, #688]
  215d58:	add	x16, x16, #0x2b0
  215d5c:	br	x17

0000000000215d60 <unit_name_from_path@plt>:
  215d60:	adrp	x16, 226000 <_DYNAMIC>
  215d64:	ldr	x17, [x16, #696]
  215d68:	add	x16, x16, #0x2b8
  215d6c:	br	x17

0000000000215d70 <path_join_internal@plt>:
  215d70:	adrp	x16, 226000 <_DYNAMIC>
  215d74:	ldr	x17, [x16, #704]
  215d78:	add	x16, x16, #0x2c0
  215d7c:	br	x17

0000000000215d80 <fopen64@plt>:
  215d80:	adrp	x16, 226000 <_DYNAMIC>
  215d84:	ldr	x17, [x16, #712]
  215d88:	add	x16, x16, #0x2c8
  215d8c:	br	x17

0000000000215d90 <fprintf@plt>:
  215d90:	adrp	x16, 226000 <_DYNAMIC>
  215d94:	ldr	x17, [x16, #720]
  215d98:	add	x16, x16, #0x2d0
  215d9c:	br	x17

0000000000215da0 <generator_write_fsck_deps@plt>:
  215da0:	adrp	x16, 226000 <_DYNAMIC>
  215da4:	ldr	x17, [x16, #728]
  215da8:	add	x16, x16, #0x2d8
  215dac:	br	x17

0000000000215db0 <log_oom_internal@plt>:
  215db0:	adrp	x16, 226000 <_DYNAMIC>
  215db4:	ldr	x17, [x16, #736]
  215db8:	add	x16, x16, #0x2e0
  215dbc:	br	x17

0000000000215dc0 <__errno_location@plt>:
  215dc0:	adrp	x16, 226000 <_DYNAMIC>
  215dc4:	ldr	x17, [x16, #744]
  215dc8:	add	x16, x16, #0x2e8
  215dcc:	br	x17

0000000000215dd0 <fflush_and_check@plt>:
  215dd0:	adrp	x16, 226000 <_DYNAMIC>
  215dd4:	ldr	x17, [x16, #752]
  215dd8:	add	x16, x16, #0x2f0
  215ddc:	br	x17

0000000000215de0 <generator_add_symlink@plt>:
  215de0:	adrp	x16, 226000 <_DYNAMIC>
  215de4:	ldr	x17, [x16, #760]
  215de8:	add	x16, x16, #0x2f8
  215dec:	br	x17

0000000000215df0 <unit_name_escape@plt>:
  215df0:	adrp	x16, 226000 <_DYNAMIC>
  215df4:	ldr	x17, [x16, #768]
  215df8:	add	x16, x16, #0x300
  215dfc:	br	x17

0000000000215e00 <unit_name_build@plt>:
  215e00:	adrp	x16, 226000 <_DYNAMIC>
  215e04:	ldr	x17, [x16, #776]
  215e08:	add	x16, x16, #0x308
  215e0c:	br	x17

0000000000215e10 <strlen@plt>:
  215e10:	adrp	x16, 226000 <_DYNAMIC>
  215e14:	ldr	x17, [x16, #784]
  215e18:	add	x16, x16, #0x310
  215e1c:	br	x17

0000000000215e20 <stpcpy@plt>:
  215e20:	adrp	x16, 226000 <_DYNAMIC>
  215e24:	ldr	x17, [x16, #792]
  215e28:	add	x16, x16, #0x318
  215e2c:	br	x17

0000000000215e30 <strcpy@plt>:
  215e30:	adrp	x16, 226000 <_DYNAMIC>
  215e34:	ldr	x17, [x16, #800]
  215e38:	add	x16, x16, #0x320
  215e3c:	br	x17

0000000000215e40 <mkdir_parents_label@plt>:
  215e40:	adrp	x16, 226000 <_DYNAMIC>
  215e44:	ldr	x17, [x16, #808]
  215e48:	add	x16, x16, #0x328
  215e4c:	br	x17

0000000000215e50 <free@plt>:
  215e50:	adrp	x16, 226000 <_DYNAMIC>
  215e54:	ldr	x17, [x16, #816]
  215e58:	add	x16, x16, #0x330
  215e5c:	br	x17

0000000000215e60 <safe_fclose@plt>:
  215e60:	adrp	x16, 226000 <_DYNAMIC>
  215e64:	ldr	x17, [x16, #824]
  215e68:	add	x16, x16, #0x338
  215e6c:	br	x17

0000000000215e70 <strreplace@plt>:
  215e70:	adrp	x16, 226000 <_DYNAMIC>
  215e74:	ldr	x17, [x16, #832]
  215e78:	add	x16, x16, #0x340
  215e7c:	br	x17

0000000000215e80 <write_string_file_ts@plt>:
  215e80:	adrp	x16, 226000 <_DYNAMIC>
  215e84:	ldr	x17, [x16, #840]
  215e88:	add	x16, x16, #0x348
  215e8c:	br	x17

0000000000215e90 <strcmp_ptr@plt>:
  215e90:	adrp	x16, 226000 <_DYNAMIC>
  215e94:	ldr	x17, [x16, #848]
  215e98:	add	x16, x16, #0x350
  215e9c:	br	x17

0000000000215ea0 <dissect_image@plt>:
  215ea0:	adrp	x16, 226000 <_DYNAMIC>
  215ea4:	ldr	x17, [x16, #856]
  215ea8:	add	x16, x16, #0x358
  215eac:	br	x17

0000000000215eb0 <safe_close@plt>:
  215eb0:	adrp	x16, 226000 <_DYNAMIC>
  215eb4:	ldr	x17, [x16, #864]
  215eb8:	add	x16, x16, #0x360
  215ebc:	br	x17

0000000000215ec0 <dissected_image_unref@plt>:
  215ec0:	adrp	x16, 226000 <_DYNAMIC>
  215ec4:	ldr	x17, [x16, #872]
  215ec8:	add	x16, x16, #0x368
  215ecc:	br	x17

0000000000215ed0 <sd_device_new_from_devnum@plt>:
  215ed0:	adrp	x16, 226000 <_DYNAMIC>
  215ed4:	ldr	x17, [x16, #880]
  215ed8:	add	x16, x16, #0x370
  215edc:	br	x17

0000000000215ee0 <sd_device_get_devname@plt>:
  215ee0:	adrp	x16, 226000 <_DYNAMIC>
  215ee4:	ldr	x17, [x16, #888]
  215ee8:	add	x16, x16, #0x378
  215eec:	br	x17

0000000000215ef0 <sd_device_get_syspath@plt>:
  215ef0:	adrp	x16, 226000 <_DYNAMIC>
  215ef4:	ldr	x17, [x16, #896]
  215ef8:	add	x16, x16, #0x380
  215efc:	br	x17

0000000000215f00 <sd_device_get_parent@plt>:
  215f00:	adrp	x16, 226000 <_DYNAMIC>
  215f04:	ldr	x17, [x16, #904]
  215f08:	add	x16, x16, #0x388
  215f0c:	br	x17

0000000000215f10 <sd_device_get_devtype@plt>:
  215f10:	adrp	x16, 226000 <_DYNAMIC>
  215f14:	ldr	x17, [x16, #912]
  215f18:	add	x16, x16, #0x390
  215f1c:	br	x17

0000000000215f20 <log_object_internal@plt>:
  215f20:	adrp	x16, 226000 <_DYNAMIC>
  215f24:	ldr	x17, [x16, #920]
  215f28:	add	x16, x16, #0x398
  215f2c:	br	x17

0000000000215f30 <gnu_dev_major@plt>:
  215f30:	adrp	x16, 226000 <_DYNAMIC>
  215f34:	ldr	x17, [x16, #928]
  215f38:	add	x16, x16, #0x3a0
  215f3c:	br	x17

0000000000215f40 <gnu_dev_minor@plt>:
  215f40:	adrp	x16, 226000 <_DYNAMIC>
  215f44:	ldr	x17, [x16, #936]
  215f48:	add	x16, x16, #0x3a8
  215f4c:	br	x17

0000000000215f50 <sd_device_get_devnum@plt>:
  215f50:	adrp	x16, 226000 <_DYNAMIC>
  215f54:	ldr	x17, [x16, #944]
  215f58:	add	x16, x16, #0x3b0
  215f5c:	br	x17

0000000000215f60 <open64@plt>:
  215f60:	adrp	x16, 226000 <_DYNAMIC>
  215f64:	ldr	x17, [x16, #952]
  215f68:	add	x16, x16, #0x3b8
  215f6c:	br	x17

0000000000215f70 <sd_device_get_sysname@plt>:
  215f70:	adrp	x16, 226000 <_DYNAMIC>
  215f74:	ldr	x17, [x16, #960]
  215f78:	add	x16, x16, #0x3c0
  215f7c:	br	x17

0000000000215f80 <fstab_has_fstype@plt>:
  215f80:	adrp	x16, 226000 <_DYNAMIC>
  215f84:	ldr	x17, [x16, #968]
  215f88:	add	x16, x16, #0x3c8
  215f8c:	br	x17

0000000000215f90 <fstab_is_mount_point@plt>:
  215f90:	adrp	x16, 226000 <_DYNAMIC>
  215f94:	ldr	x17, [x16, #976]
  215f98:	add	x16, x16, #0x3d0
  215f9c:	br	x17

0000000000215fa0 <access@plt>:
  215fa0:	adrp	x16, 226000 <_DYNAMIC>
  215fa4:	ldr	x17, [x16, #984]
  215fa8:	add	x16, x16, #0x3d8
  215fac:	br	x17

0000000000215fb0 <generator_enable_remount_fs_service@plt>:
  215fb0:	adrp	x16, 226000 <_DYNAMIC>
  215fb4:	ldr	x17, [x16, #992]
  215fb8:	add	x16, x16, #0x3e0
  215fbc:	br	x17

0000000000215fc0 <sd_device_unref@plt>:
  215fc0:	adrp	x16, 226000 <_DYNAMIC>
  215fc4:	ldr	x17, [x16, #1000]
  215fc8:	add	x16, x16, #0x3e8
  215fcc:	br	x17

0000000000215fd0 <path_is_mount_point@plt>:
  215fd0:	adrp	x16, 226000 <_DYNAMIC>
  215fd4:	ldr	x17, [x16, #1008]
  215fd8:	add	x16, x16, #0x3f0
  215fdc:	br	x17

0000000000215fe0 <dir_is_empty_at@plt>:
  215fe0:	adrp	x16, 226000 <_DYNAMIC>
  215fe4:	ldr	x17, [x16, #1016]
  215fe8:	add	x16, x16, #0x3f8
  215fec:	br	x17
