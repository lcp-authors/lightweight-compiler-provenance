In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libe2p.a_gcc_-O1:

feature.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_feature2string>:
   0:	mov	w4, w0
   4:	adrp	x0, 0 <e2p_feature2string>
   8:	ldr	x0, [x0]
   c:	cbz	x0, 44 <e2p_feature2string+0x44>
  10:	adrp	x2, 0 <e2p_feature2string>
  14:	add	x2, x2, #0x0
  18:	b	28 <e2p_feature2string+0x28>
  1c:	add	x2, x2, #0x10
  20:	ldr	x0, [x2, #8]
  24:	cbz	x0, 44 <e2p_feature2string+0x44>
  28:	ldr	w3, [x2]
  2c:	cmp	w3, w4
  30:	b.ne	1c <e2p_feature2string+0x1c>  // b.any
  34:	ldr	w3, [x2, #4]
  38:	cmp	w3, w1
  3c:	b.ne	1c <e2p_feature2string+0x1c>  // b.any
  40:	ret
  44:	stp	x29, x30, [sp, #-32]!
  48:	mov	x29, sp
  4c:	str	x19, [sp, #16]
  50:	mov	w2, #0x49                  	// #73
  54:	cmp	w4, #0x1
  58:	b.eq	78 <e2p_feature2string+0x78>  // b.none
  5c:	mov	w2, #0x52                  	// #82
  60:	cmp	w4, #0x2
  64:	b.eq	78 <e2p_feature2string+0x78>  // b.none
  68:	cmp	w4, #0x0
  6c:	mov	w2, #0x3f                  	// #63
  70:	mov	w0, #0x43                  	// #67
  74:	csel	w2, w2, w0, ne  // ne = any
  78:	lsr	w0, w1, #1
  7c:	cmp	wzr, w1, lsr #1
  80:	b.eq	bc <e2p_feature2string+0xbc>  // b.none
  84:	mov	w3, #0x0                   	// #0
  88:	add	w3, w3, #0x1
  8c:	lsr	w0, w0, #1
  90:	cbnz	w0, 88 <e2p_feature2string+0x88>
  94:	adrp	x0, 0 <e2p_feature2string>
  98:	add	x19, x0, #0x0
  9c:	adrp	x1, 0 <e2p_feature2string>
  a0:	add	x1, x1, #0x0
  a4:	mov	x0, x19
  a8:	bl	0 <sprintf>
  ac:	mov	x0, x19
  b0:	ldr	x19, [sp, #16]
  b4:	ldp	x29, x30, [sp], #32
  b8:	ret
  bc:	mov	w3, #0x0                   	// #0
  c0:	b	94 <e2p_feature2string+0x94>

00000000000000c4 <e2p_string2feature>:
  c4:	stp	x29, x30, [sp, #-80]!
  c8:	mov	x29, sp
  cc:	stp	x19, x20, [sp, #16]
  d0:	stp	x21, x22, [sp, #32]
  d4:	str	x23, [sp, #48]
  d8:	mov	x21, x0
  dc:	mov	x22, x1
  e0:	mov	x23, x2
  e4:	adrp	x0, 0 <e2p_feature2string>
  e8:	ldr	x1, [x0]
  ec:	cbz	x1, 114 <e2p_string2feature+0x50>
  f0:	adrp	x20, 0 <e2p_feature2string>
  f4:	add	x20, x20, #0x0
  f8:	mov	x0, x21
  fc:	bl	0 <strcasecmp>
 100:	mov	w19, w0
 104:	cbz	w0, 178 <e2p_string2feature+0xb4>
 108:	add	x20, x20, #0x10
 10c:	ldr	x1, [x20, #8]
 110:	cbnz	x1, f8 <e2p_string2feature+0x34>
 114:	mov	x2, #0x8                   	// #8
 118:	adrp	x1, 0 <e2p_feature2string>
 11c:	add	x1, x1, #0x0
 120:	mov	x0, x21
 124:	bl	0 <strncasecmp>
 128:	mov	w19, w0
 12c:	cbnz	w0, 1ec <e2p_string2feature+0x128>
 130:	ldrb	w3, [x21, #8]
 134:	sub	w3, w3, #0x43
 138:	and	w0, w3, #0xff
 13c:	cmp	w0, #0x2f
 140:	b.hi	1f4 <e2p_string2feature+0x130>  // b.pmore
 144:	mov	x3, #0x1                   	// #1
 148:	lsl	x3, x3, x0
 14c:	tst	x3, #0x800000008000
 150:	b.ne	1ac <e2p_string2feature+0xe8>  // b.any
 154:	tst	x3, #0x4000000040
 158:	b.ne	1a0 <e2p_string2feature+0xdc>  // b.any
 15c:	tst	x3, #0x100000001
 160:	b.eq	1fc <e2p_string2feature+0x138>  // b.none
 164:	str	wzr, [x22]
 168:	ldrb	w0, [x21, #9]
 16c:	cbnz	w0, 1b8 <e2p_string2feature+0xf4>
 170:	mov	w19, #0x1                   	// #1
 174:	b	188 <e2p_string2feature+0xc4>
 178:	ldr	w0, [x20]
 17c:	str	w0, [x22]
 180:	ldr	w0, [x20, #4]
 184:	str	w0, [x23]
 188:	mov	w0, w19
 18c:	ldp	x19, x20, [sp, #16]
 190:	ldp	x21, x22, [sp, #32]
 194:	ldr	x23, [sp, #48]
 198:	ldp	x29, x30, [sp], #80
 19c:	ret
 1a0:	mov	w0, #0x1                   	// #1
 1a4:	str	w0, [x22]
 1a8:	b	168 <e2p_string2feature+0xa4>
 1ac:	mov	w0, #0x2                   	// #2
 1b0:	str	w0, [x22]
 1b4:	b	168 <e2p_string2feature+0xa4>
 1b8:	mov	w2, #0xa                   	// #10
 1bc:	add	x1, sp, #0x48
 1c0:	add	x0, x21, #0x9
 1c4:	bl	0 <strtol>
 1c8:	cmp	w0, #0x1f
 1cc:	b.hi	204 <e2p_string2feature+0x140>  // b.pmore
 1d0:	ldr	x1, [sp, #72]
 1d4:	ldrb	w1, [x1]
 1d8:	cbnz	w1, 20c <e2p_string2feature+0x148>
 1dc:	mov	w1, #0x1                   	// #1
 1e0:	lsl	w0, w1, w0
 1e4:	str	w0, [x23]
 1e8:	b	188 <e2p_string2feature+0xc4>
 1ec:	mov	w19, #0x1                   	// #1
 1f0:	b	188 <e2p_string2feature+0xc4>
 1f4:	mov	w19, #0x1                   	// #1
 1f8:	b	188 <e2p_string2feature+0xc4>
 1fc:	mov	w19, #0x1                   	// #1
 200:	b	188 <e2p_string2feature+0xc4>
 204:	mov	w19, #0x1                   	// #1
 208:	b	188 <e2p_string2feature+0xc4>
 20c:	mov	w19, #0x1                   	// #1
 210:	b	188 <e2p_string2feature+0xc4>

0000000000000214 <e2p_jrnl_feature2string>:
 214:	mov	w4, w0
 218:	adrp	x0, 0 <e2p_feature2string>
 21c:	ldr	x0, [x0]
 220:	cbz	x0, 25c <e2p_jrnl_feature2string+0x48>
 224:	adrp	x2, 0 <e2p_feature2string>
 228:	add	x2, x2, #0x0
 22c:	add	x2, x2, #0x2c0
 230:	b	240 <e2p_jrnl_feature2string+0x2c>
 234:	add	x2, x2, #0x10
 238:	ldr	x0, [x2, #8]
 23c:	cbz	x0, 25c <e2p_jrnl_feature2string+0x48>
 240:	ldr	w3, [x2]
 244:	cmp	w3, w4
 248:	b.ne	234 <e2p_jrnl_feature2string+0x20>  // b.any
 24c:	ldr	w3, [x2, #4]
 250:	cmp	w3, w1
 254:	b.ne	234 <e2p_jrnl_feature2string+0x20>  // b.any
 258:	ret
 25c:	stp	x29, x30, [sp, #-32]!
 260:	mov	x29, sp
 264:	str	x19, [sp, #16]
 268:	mov	w2, #0x49                  	// #73
 26c:	cmp	w4, #0x1
 270:	b.eq	290 <e2p_jrnl_feature2string+0x7c>  // b.none
 274:	mov	w2, #0x52                  	// #82
 278:	cmp	w4, #0x2
 27c:	b.eq	290 <e2p_jrnl_feature2string+0x7c>  // b.none
 280:	cmp	w4, #0x0
 284:	mov	w2, #0x3f                  	// #63
 288:	mov	w0, #0x43                  	// #67
 28c:	csel	w2, w2, w0, ne  // ne = any
 290:	lsr	w0, w1, #1
 294:	cmp	wzr, w1, lsr #1
 298:	b.eq	2d8 <e2p_jrnl_feature2string+0xc4>  // b.none
 29c:	mov	w3, #0x0                   	// #0
 2a0:	add	w3, w3, #0x1
 2a4:	lsr	w0, w0, #1
 2a8:	cbnz	w0, 2a0 <e2p_jrnl_feature2string+0x8c>
 2ac:	adrp	x0, 0 <e2p_feature2string>
 2b0:	add	x0, x0, #0x0
 2b4:	add	x19, x0, #0x18
 2b8:	adrp	x1, 0 <e2p_feature2string>
 2bc:	add	x1, x1, #0x0
 2c0:	mov	x0, x19
 2c4:	bl	0 <sprintf>
 2c8:	mov	x0, x19
 2cc:	ldr	x19, [sp, #16]
 2d0:	ldp	x29, x30, [sp], #32
 2d4:	ret
 2d8:	mov	w3, #0x0                   	// #0
 2dc:	b	2ac <e2p_jrnl_feature2string+0x98>

00000000000002e0 <e2p_jrnl_string2feature>:
 2e0:	stp	x29, x30, [sp, #-80]!
 2e4:	mov	x29, sp
 2e8:	stp	x19, x20, [sp, #16]
 2ec:	stp	x21, x22, [sp, #32]
 2f0:	str	x23, [sp, #48]
 2f4:	mov	x21, x0
 2f8:	mov	x22, x1
 2fc:	mov	x23, x2
 300:	adrp	x0, 0 <e2p_feature2string>
 304:	ldr	x1, [x0]
 308:	cbz	x1, 334 <e2p_jrnl_string2feature+0x54>
 30c:	adrp	x20, 0 <e2p_feature2string>
 310:	add	x20, x20, #0x0
 314:	add	x20, x20, #0x2c0
 318:	mov	x0, x21
 31c:	bl	0 <strcasecmp>
 320:	mov	w19, w0
 324:	cbz	w0, 398 <e2p_jrnl_string2feature+0xb8>
 328:	add	x20, x20, #0x10
 32c:	ldr	x1, [x20, #8]
 330:	cbnz	x1, 318 <e2p_jrnl_string2feature+0x38>
 334:	mov	x2, #0x8                   	// #8
 338:	adrp	x1, 0 <e2p_feature2string>
 33c:	add	x1, x1, #0x0
 340:	mov	x0, x21
 344:	bl	0 <strncasecmp>
 348:	mov	w19, w0
 34c:	cbnz	w0, 40c <e2p_jrnl_string2feature+0x12c>
 350:	ldrb	w3, [x21, #8]
 354:	sub	w3, w3, #0x43
 358:	and	w0, w3, #0xff
 35c:	cmp	w0, #0x2f
 360:	b.hi	414 <e2p_jrnl_string2feature+0x134>  // b.pmore
 364:	mov	x3, #0x1                   	// #1
 368:	lsl	x3, x3, x0
 36c:	tst	x3, #0x800000008000
 370:	b.ne	3cc <e2p_jrnl_string2feature+0xec>  // b.any
 374:	tst	x3, #0x4000000040
 378:	b.ne	3c0 <e2p_jrnl_string2feature+0xe0>  // b.any
 37c:	tst	x3, #0x100000001
 380:	b.eq	41c <e2p_jrnl_string2feature+0x13c>  // b.none
 384:	str	wzr, [x22]
 388:	ldrb	w0, [x21, #9]
 38c:	cbnz	w0, 3d8 <e2p_jrnl_string2feature+0xf8>
 390:	mov	w19, #0x1                   	// #1
 394:	b	3a8 <e2p_jrnl_string2feature+0xc8>
 398:	ldr	w0, [x20]
 39c:	str	w0, [x22]
 3a0:	ldr	w0, [x20, #4]
 3a4:	str	w0, [x23]
 3a8:	mov	w0, w19
 3ac:	ldp	x19, x20, [sp, #16]
 3b0:	ldp	x21, x22, [sp, #32]
 3b4:	ldr	x23, [sp, #48]
 3b8:	ldp	x29, x30, [sp], #80
 3bc:	ret
 3c0:	mov	w0, #0x1                   	// #1
 3c4:	str	w0, [x22]
 3c8:	b	388 <e2p_jrnl_string2feature+0xa8>
 3cc:	mov	w0, #0x2                   	// #2
 3d0:	str	w0, [x22]
 3d4:	b	388 <e2p_jrnl_string2feature+0xa8>
 3d8:	mov	w2, #0xa                   	// #10
 3dc:	add	x1, sp, #0x48
 3e0:	add	x0, x21, #0x9
 3e4:	bl	0 <strtol>
 3e8:	cmp	w0, #0x1f
 3ec:	b.hi	424 <e2p_jrnl_string2feature+0x144>  // b.pmore
 3f0:	ldr	x1, [sp, #72]
 3f4:	ldrb	w1, [x1]
 3f8:	cbnz	w1, 42c <e2p_jrnl_string2feature+0x14c>
 3fc:	mov	w1, #0x1                   	// #1
 400:	lsl	w0, w1, w0
 404:	str	w0, [x23]
 408:	b	3a8 <e2p_jrnl_string2feature+0xc8>
 40c:	mov	w19, #0x1                   	// #1
 410:	b	3a8 <e2p_jrnl_string2feature+0xc8>
 414:	mov	w19, #0x1                   	// #1
 418:	b	3a8 <e2p_jrnl_string2feature+0xc8>
 41c:	mov	w19, #0x1                   	// #1
 420:	b	3a8 <e2p_jrnl_string2feature+0xc8>
 424:	mov	w19, #0x1                   	// #1
 428:	b	3a8 <e2p_jrnl_string2feature+0xc8>
 42c:	mov	w19, #0x1                   	// #1
 430:	b	3a8 <e2p_jrnl_string2feature+0xc8>

0000000000000434 <e2p_edit_feature2>:
 434:	stp	x29, x30, [sp, #-128]!
 438:	mov	x29, sp
 43c:	stp	x19, x20, [sp, #16]
 440:	stp	x21, x22, [sp, #32]
 444:	stp	x23, x24, [sp, #48]
 448:	stp	x25, x26, [sp, #64]
 44c:	stp	x27, x28, [sp, #80]
 450:	mov	x19, x0
 454:	mov	x21, x1
 458:	mov	x26, x2
 45c:	mov	x28, x4
 460:	str	x5, [sp, #104]
 464:	cmp	x3, #0x0
 468:	csel	x24, x3, x2, ne  // ne = any
 46c:	cbz	x4, 474 <e2p_edit_feature2+0x40>
 470:	str	wzr, [x4]
 474:	ldr	x0, [sp, #104]
 478:	cbz	x0, 480 <e2p_edit_feature2+0x4c>
 47c:	str	wzr, [x0]
 480:	mov	x0, x19
 484:	bl	0 <strlen>
 488:	add	x0, x0, #0x1
 48c:	bl	0 <malloc>
 490:	mov	x27, x0
 494:	cbz	x0, 68c <e2p_edit_feature2+0x258>
 498:	mov	x1, x19
 49c:	bl	0 <strcpy>
 4a0:	mov	x19, x27
 4a4:	adrp	x22, 0 <e2p_feature2string>
 4a8:	add	x22, x22, #0x0
 4ac:	adrp	x23, 0 <e2p_feature2string>
 4b0:	add	x23, x23, #0x0
 4b4:	b	590 <e2p_edit_feature2+0x15c>
 4b8:	ldrb	w0, [x19]
 4bc:	mov	x20, x19
 4c0:	cbz	w0, 5b4 <e2p_edit_feature2+0x180>
 4c4:	and	x1, x0, #0xff
 4c8:	ldrh	w1, [x2, x1, lsl #1]
 4cc:	and	w1, w1, #0x2000
 4d0:	cmp	w0, #0x2c
 4d4:	ccmp	w1, #0x0, #0x0, ne  // ne = any
 4d8:	b.ne	4e8 <e2p_edit_feature2+0xb4>  // b.any
 4dc:	ldrb	w0, [x20, #1]!
 4e0:	cbnz	w0, 4c4 <e2p_edit_feature2+0x90>
 4e4:	b	5b4 <e2p_edit_feature2+0x180>
 4e8:	cbz	w0, 574 <e2p_edit_feature2+0x140>
 4ec:	strb	wzr, [x20]
 4f0:	mov	x1, x22
 4f4:	mov	x0, x19
 4f8:	bl	0 <strcasecmp>
 4fc:	cbz	w0, 57c <e2p_edit_feature2+0x148>
 500:	mov	x1, x23
 504:	mov	x0, x19
 508:	bl	0 <strcasecmp>
 50c:	cbz	w0, 57c <e2p_edit_feature2+0x148>
 510:	ldrb	w0, [x19]
 514:	cmp	w0, #0x2d
 518:	b.eq	5bc <e2p_edit_feature2+0x188>  // b.none
 51c:	cmp	w0, #0x5e
 520:	b.eq	5c4 <e2p_edit_feature2+0x190>  // b.none
 524:	mov	w25, #0x0                   	// #0
 528:	cmp	w0, #0x2b
 52c:	b.eq	5c8 <e2p_edit_feature2+0x194>  // b.none
 530:	add	x2, sp, #0x7c
 534:	add	x1, sp, #0x78
 538:	mov	x0, x19
 53c:	bl	c4 <e2p_string2feature>
 540:	cbnz	w0, 660 <e2p_edit_feature2+0x22c>
 544:	cbz	x26, 55c <e2p_edit_feature2+0x128>
 548:	ldr	w1, [sp, #120]
 54c:	ldr	w0, [sp, #124]
 550:	ldr	w2, [x26, w1, sxtw #2]
 554:	tst	w0, w2
 558:	b.eq	62c <e2p_edit_feature2+0x1f8>  // b.none
 55c:	ldrsw	x1, [sp, #120]
 560:	ldr	w0, [x21, x1, lsl #2]
 564:	ldr	w2, [sp, #124]
 568:	orr	w0, w0, w2
 56c:	str	w0, [x21, x1, lsl #2]
 570:	b	588 <e2p_edit_feature2+0x154>
 574:	mov	x20, #0x0                   	// #0
 578:	b	4f0 <e2p_edit_feature2+0xbc>
 57c:	str	wzr, [x21]
 580:	str	wzr, [x21, #4]
 584:	str	wzr, [x21, #8]
 588:	cbz	x20, 650 <e2p_edit_feature2+0x21c>
 58c:	add	x19, x20, #0x1
 590:	ldrb	w20, [x19]
 594:	cbz	w20, 658 <e2p_edit_feature2+0x224>
 598:	bl	0 <__ctype_b_loc>
 59c:	ldr	x2, [x0]
 5a0:	and	x20, x20, #0xff
 5a4:	ldrh	w0, [x2, x20, lsl #1]
 5a8:	tbz	w0, #13, 4b8 <e2p_edit_feature2+0x84>
 5ac:	ldrb	w20, [x19, #1]!
 5b0:	cbnz	w20, 5a0 <e2p_edit_feature2+0x16c>
 5b4:	mov	x20, #0x0                   	// #0
 5b8:	b	4f0 <e2p_edit_feature2+0xbc>
 5bc:	mov	w25, #0x1                   	// #1
 5c0:	b	5c8 <e2p_edit_feature2+0x194>
 5c4:	mov	w25, #0x1                   	// #1
 5c8:	add	x2, sp, #0x7c
 5cc:	add	x1, sp, #0x78
 5d0:	add	x0, x19, #0x1
 5d4:	bl	c4 <e2p_string2feature>
 5d8:	cbnz	w0, 648 <e2p_edit_feature2+0x214>
 5dc:	cbz	w25, 544 <e2p_edit_feature2+0x110>
 5e0:	cbz	x24, 5f8 <e2p_edit_feature2+0x1c4>
 5e4:	ldr	w0, [sp, #120]
 5e8:	ldr	w1, [sp, #124]
 5ec:	ldr	w2, [x24, w0, sxtw #2]
 5f0:	tst	w1, w2
 5f4:	b.eq	610 <e2p_edit_feature2+0x1dc>  // b.none
 5f8:	ldrsw	x1, [sp, #120]
 5fc:	ldr	w2, [x21, x1, lsl #2]
 600:	ldr	w0, [sp, #124]
 604:	bic	w0, w2, w0
 608:	str	w0, [x21, x1, lsl #2]
 60c:	b	588 <e2p_edit_feature2+0x154>
 610:	cbz	x28, 61c <e2p_edit_feature2+0x1e8>
 614:	orr	w0, w0, #0x80
 618:	str	w0, [x28]
 61c:	ldr	x0, [sp, #104]
 620:	cbz	x0, 664 <e2p_edit_feature2+0x230>
 624:	str	w1, [x0]
 628:	b	664 <e2p_edit_feature2+0x230>
 62c:	cbz	x28, 634 <e2p_edit_feature2+0x200>
 630:	str	w1, [x28]
 634:	mov	w25, #0x1                   	// #1
 638:	ldr	x1, [sp, #104]
 63c:	cbz	x1, 664 <e2p_edit_feature2+0x230>
 640:	str	w0, [x1]
 644:	b	664 <e2p_edit_feature2+0x230>
 648:	mov	w25, #0x1                   	// #1
 64c:	b	664 <e2p_edit_feature2+0x230>
 650:	mov	w25, #0x0                   	// #0
 654:	b	664 <e2p_edit_feature2+0x230>
 658:	mov	w25, #0x0                   	// #0
 65c:	b	664 <e2p_edit_feature2+0x230>
 660:	mov	w25, #0x1                   	// #1
 664:	mov	x0, x27
 668:	bl	0 <free>
 66c:	mov	w0, w25
 670:	ldp	x19, x20, [sp, #16]
 674:	ldp	x21, x22, [sp, #32]
 678:	ldp	x23, x24, [sp, #48]
 67c:	ldp	x25, x26, [sp, #64]
 680:	ldp	x27, x28, [sp, #80]
 684:	ldp	x29, x30, [sp], #128
 688:	ret
 68c:	mov	w25, #0x1                   	// #1
 690:	b	66c <e2p_edit_feature2+0x238>

0000000000000694 <e2p_edit_feature>:
 694:	stp	x29, x30, [sp, #-16]!
 698:	mov	x29, sp
 69c:	mov	x5, #0x0                   	// #0
 6a0:	mov	x4, #0x0                   	// #0
 6a4:	mov	x3, #0x0                   	// #0
 6a8:	bl	434 <e2p_edit_feature2>
 6ac:	ldp	x29, x30, [sp], #16
 6b0:	ret

fgetflags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fgetflags>:
   0:	stp	x29, x30, [sp, #-208]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	mov	x19, x0
  14:	mov	x21, x1
  18:	add	x2, sp, #0x50
  1c:	mov	x1, x0
  20:	mov	w0, #0x0                   	// #0
  24:	bl	0 <__lxstat>
  28:	cbnz	w0, 40 <fgetflags+0x40>
  2c:	ldr	w0, [sp, #96]
  30:	and	w0, w0, #0xf000
  34:	sub	w0, w0, #0x4, lsl #12
  38:	tst	w0, #0xffffbfff
  3c:	b.ne	98 <fgetflags+0x98>  // b.any
  40:	mov	w1, #0x800                 	// #2048
  44:	mov	x0, x19
  48:	bl	0 <open>
  4c:	mov	w19, w0
  50:	cmn	w0, #0x1
  54:	b.eq	dc <fgetflags+0xdc>  // b.none
  58:	add	x2, sp, #0x4c
  5c:	mov	x1, #0x6601                	// #26113
  60:	movk	x1, #0x8008, lsl #16
  64:	bl	0 <ioctl>
  68:	mov	w20, w0
  6c:	cmn	w0, #0x1
  70:	b.eq	ac <fgetflags+0xac>  // b.none
  74:	ldrsw	x0, [sp, #76]
  78:	str	x0, [x21]
  7c:	mov	w0, w19
  80:	bl	0 <close>
  84:	mov	w0, w20
  88:	ldp	x19, x20, [sp, #16]
  8c:	ldp	x21, x22, [sp, #32]
  90:	ldp	x29, x30, [sp], #208
  94:	ret
  98:	bl	0 <__errno_location>
  9c:	mov	w1, #0x5f                  	// #95
  a0:	str	w1, [x0]
  a4:	mov	w20, #0xffffffff            	// #-1
  a8:	b	84 <fgetflags+0x84>
  ac:	str	x23, [sp, #48]
  b0:	bl	0 <__errno_location>
  b4:	mov	x22, x0
  b8:	ldr	w23, [x0]
  bc:	ldrsw	x0, [sp, #76]
  c0:	str	x0, [x21]
  c4:	mov	w0, w19
  c8:	bl	0 <close>
  cc:	cbz	w23, e4 <fgetflags+0xe4>
  d0:	str	w23, [x22]
  d4:	ldr	x23, [sp, #48]
  d8:	b	84 <fgetflags+0x84>
  dc:	mov	w20, w0
  e0:	b	84 <fgetflags+0x84>
  e4:	ldr	x23, [sp, #48]
  e8:	b	84 <fgetflags+0x84>

fsetflags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fsetflags>:
   0:	stp	x29, x30, [sp, #-192]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x1
  14:	add	x2, sp, #0x38
  18:	mov	x1, x0
  1c:	mov	w0, #0x0                   	// #0
  20:	bl	0 <__lxstat>
  24:	cbnz	w0, 3c <fsetflags+0x3c>
  28:	ldr	w0, [sp, #72]
  2c:	and	w0, w0, #0xf000
  30:	sub	w0, w0, #0x4, lsl #12
  34:	tst	w0, #0xffffbfff
  38:	b.ne	8c <fsetflags+0x8c>  // b.any
  3c:	mov	w1, #0x800                 	// #2048
  40:	mov	x0, x19
  44:	bl	0 <open>
  48:	mov	w19, w0
  4c:	cmn	w0, #0x1
  50:	b.eq	c8 <fsetflags+0xc8>  // b.none
  54:	str	w20, [sp, #188]
  58:	add	x2, sp, #0xbc
  5c:	mov	x1, #0x6602                	// #26114
  60:	movk	x1, #0x4008, lsl #16
  64:	bl	0 <ioctl>
  68:	mov	w20, w0
  6c:	cmn	w0, #0x1
  70:	b.eq	a0 <fsetflags+0xa0>  // b.none
  74:	mov	w0, w19
  78:	bl	0 <close>
  7c:	mov	w0, w20
  80:	ldp	x19, x20, [sp, #16]
  84:	ldp	x29, x30, [sp], #192
  88:	ret
  8c:	bl	0 <__errno_location>
  90:	mov	w1, #0x5f                  	// #95
  94:	str	w1, [x0]
  98:	mov	w20, #0xffffffff            	// #-1
  9c:	b	7c <fsetflags+0x7c>
  a0:	stp	x21, x22, [sp, #32]
  a4:	bl	0 <__errno_location>
  a8:	mov	x21, x0
  ac:	ldr	w22, [x0]
  b0:	mov	w0, w19
  b4:	bl	0 <close>
  b8:	cbz	w22, d0 <fsetflags+0xd0>
  bc:	str	w22, [x21]
  c0:	ldp	x21, x22, [sp, #32]
  c4:	b	7c <fsetflags+0x7c>
  c8:	mov	w20, w0
  cc:	b	7c <fsetflags+0x7c>
  d0:	ldp	x21, x22, [sp, #32]
  d4:	b	7c <fsetflags+0x7c>

fgetversion.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fgetversion>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	mov	x21, x1
  14:	mov	w1, #0xffffffff            	// #-1
  18:	str	w1, [sp, #60]
  1c:	mov	w1, #0x800                 	// #2048
  20:	bl	0 <open>
  24:	mov	w19, w0
  28:	cmn	w0, #0x1
  2c:	b.eq	90 <fgetversion+0x90>  // b.none
  30:	add	x2, sp, #0x3c
  34:	mov	x1, #0x7601                	// #30209
  38:	movk	x1, #0x8008, lsl #16
  3c:	bl	0 <ioctl>
  40:	mov	w20, w0
  44:	cmn	w0, #0x1
  48:	b.eq	74 <fgetversion+0x74>  // b.none
  4c:	mov	w0, w19
  50:	bl	0 <close>
  54:	cbnz	w20, 60 <fgetversion+0x60>
  58:	ldr	w0, [sp, #60]
  5c:	str	x0, [x21]
  60:	mov	w0, w20
  64:	ldp	x19, x20, [sp, #16]
  68:	ldp	x21, x22, [sp, #32]
  6c:	ldp	x29, x30, [sp], #64
  70:	ret
  74:	bl	0 <__errno_location>
  78:	mov	x21, x0
  7c:	ldr	w22, [x0]
  80:	mov	w0, w19
  84:	bl	0 <close>
  88:	str	w22, [x21]
  8c:	b	60 <fgetversion+0x60>
  90:	mov	w20, w0
  94:	b	60 <fgetversion+0x60>

fsetversion.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fsetversion>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x1
  10:	mov	w1, #0x800                 	// #2048
  14:	bl	0 <open>
  18:	mov	w19, w0
  1c:	cmn	w0, #0x1
  20:	b.eq	84 <fsetversion+0x84>  // b.none
  24:	str	w20, [sp, #60]
  28:	add	x2, sp, #0x3c
  2c:	mov	x1, #0x7602                	// #30210
  30:	movk	x1, #0x4008, lsl #16
  34:	bl	0 <ioctl>
  38:	mov	w20, w0
  3c:	cmn	w0, #0x1
  40:	b.eq	5c <fsetversion+0x5c>  // b.none
  44:	mov	w0, w19
  48:	bl	0 <close>
  4c:	mov	w0, w20
  50:	ldp	x19, x20, [sp, #16]
  54:	ldp	x29, x30, [sp], #64
  58:	ret
  5c:	stp	x21, x22, [sp, #32]
  60:	bl	0 <__errno_location>
  64:	mov	x21, x0
  68:	ldr	w22, [x0]
  6c:	mov	w0, w19
  70:	bl	0 <close>
  74:	cbz	w22, 8c <fsetversion+0x8c>
  78:	str	w22, [x21]
  7c:	ldp	x21, x22, [sp, #32]
  80:	b	4c <fsetversion+0x4c>
  84:	mov	w20, w0
  88:	b	4c <fsetversion+0x4c>
  8c:	ldp	x21, x22, [sp, #32]
  90:	b	4c <fsetversion+0x4c>

getflags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <getflags>:
   0:	stp	x29, x30, [sp, #-176]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	w19, w0
  10:	mov	x20, x1
  14:	add	x2, sp, #0x30
  18:	mov	w1, w0
  1c:	mov	w0, #0x0                   	// #0
  20:	bl	0 <__fxstat>
  24:	cbnz	w0, 3c <getflags+0x3c>
  28:	ldr	w0, [sp, #64]
  2c:	and	w0, w0, #0xf000
  30:	sub	w0, w0, #0x4, lsl #12
  34:	tst	w0, #0xffffbfff
  38:	b.ne	64 <getflags+0x64>  // b.any
  3c:	add	x2, sp, #0x2c
  40:	mov	x1, #0x6601                	// #26113
  44:	movk	x1, #0x8008, lsl #16
  48:	mov	w0, w19
  4c:	bl	0 <ioctl>
  50:	ldrsw	x1, [sp, #44]
  54:	str	x1, [x20]
  58:	ldp	x19, x20, [sp, #16]
  5c:	ldp	x29, x30, [sp], #176
  60:	ret
  64:	bl	0 <__errno_location>
  68:	mov	w1, #0x5f                  	// #95
  6c:	str	w1, [x0]
  70:	mov	w0, #0xffffffff            	// #-1
  74:	b	58 <getflags+0x58>

getversion.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <getversion>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x1
  10:	add	x2, sp, #0x2c
  14:	mov	x1, #0x7601                	// #30209
  18:	movk	x1, #0x8008, lsl #16
  1c:	bl	0 <ioctl>
  20:	ldrsw	x1, [sp, #44]
  24:	str	x1, [x19]
  28:	ldr	x19, [sp, #16]
  2c:	ldp	x29, x30, [sp], #48
  30:	ret

hashstr.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_hash2string>:
   0:	mov	w2, w0
   4:	adrp	x0, 0 <e2p_hash2string>
   8:	ldr	x0, [x0]
   c:	cbz	x0, 30 <e2p_hash2string+0x30>
  10:	adrp	x1, 0 <e2p_hash2string>
  14:	add	x1, x1, #0x0
  18:	ldr	w3, [x1]
  1c:	cmp	w3, w2
  20:	b.eq	64 <e2p_hash2string+0x64>  // b.none
  24:	add	x1, x1, #0x10
  28:	ldr	x0, [x1, #8]
  2c:	cbnz	x0, 18 <e2p_hash2string+0x18>
  30:	stp	x29, x30, [sp, #-32]!
  34:	mov	x29, sp
  38:	str	x19, [sp, #16]
  3c:	adrp	x19, 0 <e2p_hash2string>
  40:	add	x19, x19, #0x0
  44:	adrp	x1, 0 <e2p_hash2string>
  48:	add	x1, x1, #0x0
  4c:	mov	x0, x19
  50:	bl	0 <sprintf>
  54:	mov	x0, x19
  58:	ldr	x19, [sp, #16]
  5c:	ldp	x29, x30, [sp], #32
  60:	ret
  64:	ret

0000000000000068 <e2p_string2hash>:
  68:	stp	x29, x30, [sp, #-48]!
  6c:	mov	x29, sp
  70:	stp	x19, x20, [sp, #16]
  74:	mov	x20, x0
  78:	adrp	x0, 0 <e2p_hash2string>
  7c:	ldr	x1, [x0]
  80:	cbz	x1, a4 <e2p_string2hash+0x3c>
  84:	adrp	x19, 0 <e2p_hash2string>
  88:	add	x19, x19, #0x0
  8c:	mov	x0, x20
  90:	bl	0 <strcasecmp>
  94:	cbz	w0, f8 <e2p_string2hash+0x90>
  98:	add	x19, x19, #0x10
  9c:	ldr	x1, [x19, #8]
  a0:	cbnz	x1, 8c <e2p_string2hash+0x24>
  a4:	mov	x2, #0x8                   	// #8
  a8:	adrp	x1, 0 <e2p_hash2string>
  ac:	add	x1, x1, #0x0
  b0:	mov	x0, x20
  b4:	bl	0 <strncasecmp>
  b8:	cbnz	w0, 100 <e2p_string2hash+0x98>
  bc:	ldrb	w0, [x20, #8]
  c0:	cbz	w0, 108 <e2p_string2hash+0xa0>
  c4:	mov	w2, #0xa                   	// #10
  c8:	add	x1, sp, #0x28
  cc:	add	x0, x20, #0x8
  d0:	bl	0 <strtol>
  d4:	cmp	w0, #0xff
  d8:	b.hi	110 <e2p_string2hash+0xa8>  // b.pmore
  dc:	ldr	x1, [sp, #40]
  e0:	ldrb	w1, [x1]
  e4:	cmp	w1, #0x0
  e8:	csinv	w0, w0, wzr, eq  // eq = none
  ec:	ldp	x19, x20, [sp, #16]
  f0:	ldp	x29, x30, [sp], #48
  f4:	ret
  f8:	ldr	w0, [x19]
  fc:	b	ec <e2p_string2hash+0x84>
 100:	mov	w0, #0xffffffff            	// #-1
 104:	b	ec <e2p_string2hash+0x84>
 108:	mov	w0, #0xffffffff            	// #-1
 10c:	b	ec <e2p_string2hash+0x84>
 110:	mov	w0, #0xffffffff            	// #-1
 114:	b	ec <e2p_string2hash+0x84>

iod.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <iterate_on_dir>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	stp	x23, x24, [sp, #48]
  14:	str	x25, [sp, #64]
  18:	mov	x23, x0
  1c:	mov	x24, x1
  20:	mov	x25, x2
  24:	mov	w1, #0x3                   	// #3
  28:	bl	0 <pathconf>
  2c:	cmn	w0, #0x1
  30:	mov	w20, #0xe                   	// #14
  34:	csel	w20, w0, w20, ne  // ne = any
  38:	add	w21, w20, #0x118
  3c:	add	w20, w20, #0x119
  40:	sxtw	x20, w20
  44:	mov	x0, x20
  48:	bl	0 <malloc>
  4c:	cbz	x0, f4 <iterate_on_dir+0xf4>
  50:	mov	x19, x0
  54:	mov	x2, x20
  58:	mov	w1, #0x0                   	// #0
  5c:	bl	0 <memset>
  60:	mov	x0, x23
  64:	bl	0 <opendir>
  68:	mov	x22, x0
  6c:	mov	w20, #0x0                   	// #0
  70:	cbz	x0, b8 <iterate_on_dir+0xb8>
  74:	mov	x0, x22
  78:	bl	0 <readdir>
  7c:	mov	x1, x0
  80:	cbz	x0, c8 <iterate_on_dir+0xc8>
  84:	ldrh	w2, [x1, #16]
  88:	cmp	w21, w2
  8c:	csel	w2, w21, w2, le
  90:	sxtw	x2, w2
  94:	mov	x0, x19
  98:	bl	0 <memcpy>
  9c:	mov	x2, x25
  a0:	mov	x1, x19
  a4:	mov	x0, x23
  a8:	blr	x24
  ac:	cmp	w0, #0x0
  b0:	cinc	w20, w20, ne  // ne = any
  b4:	b	74 <iterate_on_dir+0x74>
  b8:	mov	x0, x19
  bc:	bl	0 <free>
  c0:	mov	w20, #0xffffffff            	// #-1
  c4:	b	d8 <iterate_on_dir+0xd8>
  c8:	mov	x0, x19
  cc:	bl	0 <free>
  d0:	mov	x0, x22
  d4:	bl	0 <closedir>
  d8:	mov	w0, w20
  dc:	ldp	x19, x20, [sp, #16]
  e0:	ldp	x21, x22, [sp, #32]
  e4:	ldp	x23, x24, [sp, #48]
  e8:	ldr	x25, [sp, #64]
  ec:	ldp	x29, x30, [sp], #80
  f0:	ret
  f4:	mov	w20, #0xffffffff            	// #-1
  f8:	b	d8 <iterate_on_dir+0xd8>

ls.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <list_super2>:
       0:	stp	x29, x30, [sp, #-192]!
       4:	mov	x29, sp
       8:	stp	x19, x20, [sp, #16]
       c:	stp	x21, x22, [sp, #32]
      10:	stp	x23, x24, [sp, #48]
      14:	stp	x25, x26, [sp, #64]
      18:	stp	x27, x28, [sp, #80]
      1c:	mov	x19, x0
      20:	mov	x20, x1
      24:	ldr	w26, [x0, #40]
      28:	ldr	w0, [x0, #76]
      2c:	mov	w2, #0x80                  	// #128
      30:	cbz	w0, 38 <list_super2+0x38>
      34:	ldrh	w2, [x19, #88]
      38:	ldr	w1, [x19, #24]
      3c:	mov	w0, #0x400                 	// #1024
      40:	lsl	w0, w0, w1
      44:	sub	w0, w0, #0x1
      48:	madd	w26, w26, w2, w0
      4c:	add	w1, w1, #0xa
      50:	lsr	w26, w26, w1
      54:	ldrb	w0, [x19, #120]
      58:	cbz	w0, 170 <list_super2+0x170>
      5c:	stp	xzr, xzr, [sp, #112]
      60:	stp	xzr, xzr, [sp, #128]
      64:	stp	xzr, xzr, [sp, #144]
      68:	stp	xzr, xzr, [sp, #160]
      6c:	stp	xzr, xzr, [sp, #176]
      70:	mov	x2, #0x10                  	// #16
      74:	add	x1, x19, #0x78
      78:	add	x0, sp, #0x70
      7c:	bl	0 <strncpy>
      80:	add	x2, sp, #0x70
      84:	adrp	x1, 0 <list_super2>
      88:	add	x1, x1, #0x0
      8c:	mov	x0, x20
      90:	bl	0 <fprintf>
      94:	ldrb	w0, [x19, #136]
      98:	cbz	w0, 18c <list_super2+0x18c>
      9c:	stp	xzr, xzr, [sp, #112]
      a0:	stp	xzr, xzr, [sp, #128]
      a4:	stp	xzr, xzr, [sp, #144]
      a8:	stp	xzr, xzr, [sp, #160]
      ac:	stp	xzr, xzr, [sp, #176]
      b0:	mov	x2, #0x40                  	// #64
      b4:	add	x1, x19, #0x88
      b8:	add	x0, sp, #0x70
      bc:	bl	0 <strncpy>
      c0:	add	x2, sp, #0x70
      c4:	adrp	x1, 0 <list_super2>
      c8:	add	x1, x1, #0x0
      cc:	mov	x0, x20
      d0:	bl	0 <fprintf>
      d4:	add	x0, x19, #0x68
      d8:	bl	0 <e2p_uuid2str>
      dc:	mov	x2, x0
      e0:	adrp	x1, 0 <list_super2>
      e4:	add	x1, x1, #0x0
      e8:	mov	x0, x20
      ec:	bl	0 <fprintf>
      f0:	ldrh	w2, [x19, #56]
      f4:	adrp	x1, 0 <list_super2>
      f8:	add	x1, x1, #0x0
      fc:	mov	x0, x20
     100:	bl	0 <fprintf>
     104:	ldr	w2, [x19, #76]
     108:	adrp	x1, 0 <list_super2>
     10c:	add	x1, x1, #0x0
     110:	mov	x0, x20
     114:	bl	0 <fprintf>
     118:	ldr	w0, [x19, #76]
     11c:	cbz	w0, 1a0 <list_super2+0x1a0>
     120:	cmp	w0, #0x1
     124:	b.eq	1bc <list_super2+0x1bc>  // b.none
     128:	mov	x3, x20
     12c:	mov	x2, #0xb                   	// #11
     130:	mov	x1, #0x1                   	// #1
     134:	adrp	x0, 0 <list_super2>
     138:	add	x0, x0, #0x0
     13c:	bl	0 <fwrite>
     140:	mov	x3, x20
     144:	mov	x2, #0x19                  	// #25
     148:	mov	x1, #0x1                   	// #1
     14c:	adrp	x0, 0 <list_super2>
     150:	add	x0, x0, #0x0
     154:	bl	0 <fwrite>
     158:	mov	x23, #0x0                   	// #0
     15c:	mov	w24, #0x0                   	// #0
     160:	add	x28, x19, #0x5c
     164:	adrp	x25, 0 <list_super2>
     168:	add	x25, x25, #0x0
     16c:	b	220 <list_super2+0x220>
     170:	adrp	x0, 0 <list_super2>
     174:	add	x0, x0, #0x0
     178:	ldr	w1, [x0]
     17c:	str	w1, [sp, #112]
     180:	ldur	w0, [x0, #3]
     184:	stur	w0, [sp, #115]
     188:	b	80 <list_super2+0x80>
     18c:	adrp	x0, 0 <list_super2>
     190:	add	x0, x0, #0x0
     194:	ldp	x0, x1, [x0]
     198:	stp	x0, x1, [sp, #112]
     19c:	b	c0 <list_super2+0xc0>
     1a0:	mov	x3, x20
     1a4:	mov	x2, #0xc                   	// #12
     1a8:	mov	x1, #0x1                   	// #1
     1ac:	adrp	x0, 0 <list_super2>
     1b0:	add	x0, x0, #0x0
     1b4:	bl	0 <fwrite>
     1b8:	b	140 <list_super2+0x140>
     1bc:	mov	x3, x20
     1c0:	mov	x2, #0xb                   	// #11
     1c4:	mov	x1, #0x1                   	// #1
     1c8:	adrp	x0, 0 <list_super2>
     1cc:	add	x0, x0, #0x0
     1d0:	bl	0 <fwrite>
     1d4:	b	140 <list_super2+0x140>
     1d8:	mov	w1, w21
     1dc:	mov	w0, w27
     1e0:	bl	0 <e2p_feature2string>
     1e4:	mov	x2, x0
     1e8:	mov	x1, x25
     1ec:	mov	x0, x20
     1f0:	bl	0 <fprintf>
     1f4:	add	w24, w24, #0x1
     1f8:	lsl	w21, w21, #1
     1fc:	subs	w22, w22, #0x1
     200:	b.eq	214 <list_super2+0x214>  // b.none
     204:	ldr	w0, [x28, x23, lsl #2]
     208:	tst	w21, w0
     20c:	b.eq	1f8 <list_super2+0x1f8>  // b.none
     210:	b	1d8 <list_super2+0x1d8>
     214:	add	x23, x23, #0x1
     218:	cmp	x23, #0x3
     21c:	b.eq	230 <list_super2+0x230>  // b.none
     220:	mov	w27, w23
     224:	mov	w22, #0x20                  	// #32
     228:	mov	w21, #0x1                   	// #1
     22c:	b	204 <list_super2+0x204>
     230:	cbz	w24, 284 <list_super2+0x284>
     234:	mov	x1, x20
     238:	mov	w0, #0xa                   	// #10
     23c:	bl	0 <fputc>
     240:	ldr	w0, [x19, #352]
     244:	cbnz	w0, 2a0 <list_super2+0x2a0>
     248:	ldr	w24, [x19, #256]
     24c:	mov	x3, x20
     250:	mov	x2, #0x19                  	// #25
     254:	mov	x1, #0x1                   	// #1
     258:	adrp	x0, 0 <list_super2>
     25c:	add	x0, x0, #0x0
     260:	bl	0 <fwrite>
     264:	mov	w23, #0x0                   	// #0
     268:	ands	w0, w24, #0x60
     26c:	b.ne	358 <list_super2+0x358>  // b.any
     270:	mov	w22, #0x20                  	// #32
     274:	mov	w21, #0x1                   	// #1
     278:	adrp	x25, 0 <list_super2>
     27c:	add	x25, x25, #0x0
     280:	b	3a0 <list_super2+0x3a0>
     284:	mov	x3, x20
     288:	mov	x2, #0x7                   	// #7
     28c:	mov	x1, #0x1                   	// #1
     290:	adrp	x0, 0 <list_super2>
     294:	add	x0, x0, #0x0
     298:	bl	0 <fwrite>
     29c:	b	234 <list_super2+0x234>
     2a0:	mov	x3, x20
     2a4:	mov	x2, #0x1a                  	// #26
     2a8:	mov	x1, #0x1                   	// #1
     2ac:	adrp	x0, 0 <list_super2>
     2b0:	add	x0, x0, #0x0
     2b4:	bl	0 <fwrite>
     2b8:	ldr	w0, [x19, #352]
     2bc:	mov	w1, #0x0                   	// #0
     2c0:	tbnz	w0, #0, 2f0 <list_super2+0x2f0>
     2c4:	ldr	w0, [x19, #352]
     2c8:	tbnz	w0, #1, 310 <list_super2+0x310>
     2cc:	tbnz	w0, #2, 330 <list_super2+0x330>
     2d0:	cbnz	w1, 348 <list_super2+0x348>
     2d4:	mov	x3, x20
     2d8:	mov	x2, #0x7                   	// #7
     2dc:	mov	x1, #0x1                   	// #1
     2e0:	adrp	x0, 0 <list_super2>
     2e4:	add	x0, x0, #0x0
     2e8:	bl	0 <fwrite>
     2ec:	b	248 <list_super2+0x248>
     2f0:	mov	x3, x20
     2f4:	mov	x2, #0x16                  	// #22
     2f8:	mov	x1, #0x1                   	// #1
     2fc:	adrp	x0, 0 <list_super2>
     300:	add	x0, x0, #0x0
     304:	bl	0 <fwrite>
     308:	mov	w1, #0x1                   	// #1
     30c:	b	2c4 <list_super2+0x2c4>
     310:	mov	x3, x20
     314:	mov	x2, #0x18                  	// #24
     318:	mov	x1, #0x1                   	// #1
     31c:	adrp	x0, 0 <list_super2>
     320:	add	x0, x0, #0x0
     324:	bl	0 <fwrite>
     328:	ldr	w0, [x19, #352]
     32c:	tbz	w0, #2, 348 <list_super2+0x348>
     330:	mov	x3, x20
     334:	mov	x2, #0x10                  	// #16
     338:	mov	x1, #0x1                   	// #1
     33c:	adrp	x0, 0 <list_super2>
     340:	add	x0, x0, #0x0
     344:	bl	0 <fwrite>
     348:	mov	x1, x20
     34c:	mov	w0, #0xa                   	// #10
     350:	bl	0 <fputc>
     354:	b	248 <list_super2+0x248>
     358:	bl	0 <e2p_mntopt2string>
     35c:	mov	x2, x0
     360:	adrp	x1, 0 <list_super2>
     364:	add	x1, x1, #0x0
     368:	mov	x0, x20
     36c:	bl	0 <fprintf>
     370:	mov	w23, #0x1                   	// #1
     374:	b	270 <list_super2+0x270>
     378:	mov	w0, w21
     37c:	bl	0 <e2p_mntopt2string>
     380:	mov	x2, x0
     384:	mov	x1, x25
     388:	mov	x0, x20
     38c:	bl	0 <fprintf>
     390:	add	w23, w23, #0x1
     394:	lsl	w21, w21, #1
     398:	subs	w22, w22, #0x1
     39c:	b.eq	3b4 <list_super2+0x3b4>  // b.none
     3a0:	tst	w21, #0x60
     3a4:	b.ne	394 <list_super2+0x394>  // b.any
     3a8:	tst	w21, w24
     3ac:	b.eq	394 <list_super2+0x394>  // b.none
     3b0:	b	378 <list_super2+0x378>
     3b4:	cbz	w23, 878 <list_super2+0x878>
     3b8:	mov	x1, x20
     3bc:	mov	w0, #0xa                   	// #10
     3c0:	bl	0 <fputc>
     3c4:	ldrb	w0, [x19, #512]
     3c8:	cbnz	w0, 894 <list_super2+0x894>
     3cc:	mov	x3, x20
     3d0:	mov	x2, #0x19                  	// #25
     3d4:	mov	x1, #0x1                   	// #1
     3d8:	adrp	x0, 0 <list_super2>
     3dc:	add	x0, x0, #0x0
     3e0:	bl	0 <fwrite>
     3e4:	ldrh	w1, [x19, #58]
     3e8:	mov	x0, x20
     3ec:	bl	0 <print_fs_state>
     3f0:	mov	x1, x20
     3f4:	mov	w0, #0xa                   	// #10
     3f8:	bl	0 <fputc>
     3fc:	mov	x3, x20
     400:	mov	x2, #0x1a                  	// #26
     404:	mov	x1, #0x1                   	// #1
     408:	adrp	x0, 0 <list_super2>
     40c:	add	x0, x0, #0x0
     410:	bl	0 <fwrite>
     414:	ldrh	w1, [x19, #60]
     418:	mov	x0, x20
     41c:	bl	0 <print_fs_errors>
     420:	mov	x1, x20
     424:	mov	w0, #0xa                   	// #10
     428:	bl	0 <fputc>
     42c:	ldr	w0, [x19, #72]
     430:	bl	0 <e2p_os2string>
     434:	mov	x21, x0
     438:	mov	x2, x0
     43c:	adrp	x1, 0 <list_super2>
     440:	add	x1, x1, #0x0
     444:	mov	x0, x20
     448:	bl	0 <fprintf>
     44c:	mov	x0, x21
     450:	bl	0 <free>
     454:	ldr	w2, [x19]
     458:	adrp	x1, 0 <list_super2>
     45c:	add	x1, x1, #0x0
     460:	mov	x0, x20
     464:	bl	0 <fprintf>
     468:	ldr	w2, [x19, #4]
     46c:	ldr	w1, [x19, #96]
     470:	mov	x0, #0x0                   	// #0
     474:	tbz	w1, #7, 480 <list_super2+0x480>
     478:	ldr	w0, [x19, #336]
     47c:	lsl	x0, x0, #32
     480:	orr	x2, x2, x0
     484:	adrp	x1, 0 <list_super2>
     488:	add	x1, x1, #0x0
     48c:	mov	x0, x20
     490:	bl	0 <fprintf>
     494:	ldr	w2, [x19, #8]
     498:	ldr	w1, [x19, #96]
     49c:	mov	x0, #0x0                   	// #0
     4a0:	tbz	w1, #7, 4ac <list_super2+0x4ac>
     4a4:	ldr	w0, [x19, #340]
     4a8:	lsl	x0, x0, #32
     4ac:	orr	x2, x2, x0
     4b0:	adrp	x1, 0 <list_super2>
     4b4:	add	x1, x1, #0x0
     4b8:	mov	x0, x20
     4bc:	bl	0 <fprintf>
     4c0:	ldr	w2, [x19, #584]
     4c4:	cbnz	w2, 8ac <list_super2+0x8ac>
     4c8:	ldr	w2, [x19, #12]
     4cc:	ldr	w1, [x19, #96]
     4d0:	mov	x0, #0x0                   	// #0
     4d4:	tbz	w1, #7, 4e0 <list_super2+0x4e0>
     4d8:	ldr	w0, [x19, #344]
     4dc:	lsl	x0, x0, #32
     4e0:	orr	x2, x2, x0
     4e4:	adrp	x1, 0 <list_super2>
     4e8:	add	x1, x1, #0x0
     4ec:	mov	x0, x20
     4f0:	bl	0 <fprintf>
     4f4:	ldr	w2, [x19, #16]
     4f8:	adrp	x1, 0 <list_super2>
     4fc:	add	x1, x1, #0x0
     500:	mov	x0, x20
     504:	bl	0 <fprintf>
     508:	ldr	w2, [x19, #20]
     50c:	adrp	x1, 0 <list_super2>
     510:	add	x1, x1, #0x0
     514:	mov	x0, x20
     518:	bl	0 <fprintf>
     51c:	ldr	w0, [x19, #24]
     520:	mov	w2, #0x400                 	// #1024
     524:	lsl	w2, w2, w0
     528:	adrp	x1, 0 <list_super2>
     52c:	add	x1, x1, #0x0
     530:	mov	x0, x20
     534:	bl	0 <fprintf>
     538:	ldr	w0, [x19, #100]
     53c:	tbz	w0, #9, 8c0 <list_super2+0x8c0>
     540:	ldr	w0, [x19, #28]
     544:	mov	w2, #0x400                 	// #1024
     548:	lsl	w2, w2, w0
     54c:	adrp	x1, 0 <list_super2>
     550:	add	x1, x1, #0x0
     554:	mov	x0, x20
     558:	bl	0 <fprintf>
     55c:	ldr	w0, [x19, #96]
     560:	tbnz	w0, #7, 8e0 <list_super2+0x8e0>
     564:	ldrh	w2, [x19, #206]
     568:	cbnz	w2, 8f8 <list_super2+0x8f8>
     56c:	ldr	w2, [x19, #32]
     570:	adrp	x1, 0 <list_super2>
     574:	add	x1, x1, #0x0
     578:	mov	x0, x20
     57c:	bl	0 <fprintf>
     580:	ldr	w0, [x19, #100]
     584:	tbz	w0, #9, 90c <list_super2+0x90c>
     588:	ldr	w2, [x19, #36]
     58c:	adrp	x1, 0 <list_super2>
     590:	add	x1, x1, #0x0
     594:	mov	x0, x20
     598:	bl	0 <fprintf>
     59c:	ldr	w2, [x19, #40]
     5a0:	adrp	x1, 0 <list_super2>
     5a4:	add	x1, x1, #0x0
     5a8:	mov	x0, x20
     5ac:	bl	0 <fprintf>
     5b0:	mov	w2, w26
     5b4:	adrp	x1, 0 <list_super2>
     5b8:	add	x1, x1, #0x0
     5bc:	mov	x0, x20
     5c0:	bl	0 <fprintf>
     5c4:	ldrh	w2, [x19, #356]
     5c8:	cbnz	w2, 924 <list_super2+0x924>
     5cc:	ldr	w2, [x19, #368]
     5d0:	cbnz	w2, 938 <list_super2+0x938>
     5d4:	ldr	w2, [x19, #260]
     5d8:	cbnz	w2, 94c <list_super2+0x94c>
     5dc:	ldrb	w0, [x19, #372]
     5e0:	cbnz	w0, 960 <list_super2+0x960>
     5e4:	ldr	w0, [x19, #264]
     5e8:	cbnz	w0, 97c <list_super2+0x97c>
     5ec:	ldr	w0, [x19, #44]
     5f0:	mov	w1, w0
     5f4:	str	x1, [sp, #104]
     5f8:	adrp	x2, 0 <list_super2>
     5fc:	add	x2, x2, #0x0
     600:	cbnz	w0, 9a4 <list_super2+0x9a4>
     604:	adrp	x1, 0 <list_super2>
     608:	add	x1, x1, #0x0
     60c:	mov	x0, x20
     610:	bl	0 <fprintf>
     614:	ldr	w0, [x19, #48]
     618:	str	x0, [sp, #104]
     61c:	add	x0, sp, #0x68
     620:	bl	0 <ctime>
     624:	mov	x2, x0
     628:	adrp	x1, 0 <list_super2>
     62c:	add	x1, x1, #0x0
     630:	mov	x0, x20
     634:	bl	0 <fprintf>
     638:	ldrh	w2, [x19, #52]
     63c:	adrp	x1, 0 <list_super2>
     640:	add	x1, x1, #0x0
     644:	mov	x0, x20
     648:	bl	0 <fprintf>
     64c:	ldrsh	w2, [x19, #54]
     650:	adrp	x1, 0 <list_super2>
     654:	add	x1, x1, #0x0
     658:	mov	x0, x20
     65c:	bl	0 <fprintf>
     660:	ldr	w0, [x19, #64]
     664:	str	x0, [sp, #104]
     668:	add	x0, sp, #0x68
     66c:	bl	0 <ctime>
     670:	mov	x2, x0
     674:	adrp	x1, 0 <list_super2>
     678:	add	x1, x1, #0x0
     67c:	mov	x0, x20
     680:	bl	0 <fprintf>
     684:	ldr	w21, [x19, #68]
     688:	adrp	x0, 0 <list_super2>
     68c:	strb	wzr, [x0]
     690:	cbz	w21, 9c0 <list_super2+0x9c0>
     694:	mov	w0, #0x8cff                	// #36095
     698:	movk	w0, #0x27, lsl #16
     69c:	cmp	w21, w0
     6a0:	b.ls	11b4 <list_super2+0x11b4>  // b.plast
     6a4:	mov	w2, #0x49a1                	// #18849
     6a8:	movk	w2, #0xcf20, lsl #16
     6ac:	umull	x2, w21, w2
     6b0:	lsr	x2, x2, #53
     6b4:	mov	w22, #0x8d00                	// #36096
     6b8:	movk	w22, #0x27, lsl #16
     6bc:	msub	w22, w2, w22, w21
     6c0:	adrp	x0, 0 <list_super2>
     6c4:	add	x0, x0, #0x0
     6c8:	adrp	x3, 0 <list_super2>
     6cc:	add	x3, x3, #0x0
     6d0:	cmp	w2, #0x1
     6d4:	csel	x3, x3, x0, gt
     6d8:	adrp	x1, 0 <list_super2>
     6dc:	add	x1, x1, #0x0
     6e0:	adrp	x0, 0 <list_super2>
     6e4:	add	x0, x0, #0x0
     6e8:	bl	0 <sprintf>
     6ec:	mov	w0, #0x3a7f                	// #14975
     6f0:	movk	w0, #0x9, lsl #16
     6f4:	cmp	w22, w0
     6f8:	b.ls	768 <list_super2+0x768>  // b.plast
     6fc:	mov	w3, #0xde4d                	// #56909
     700:	movk	w3, #0x6ef5, lsl #16
     704:	umull	x3, w22, w3
     708:	lsr	x3, x3, #50
     70c:	add	w0, w0, #0x1
     710:	msub	w22, w3, w0, w22
     714:	adrp	x0, 0 <list_super2>
     718:	ldrb	w0, [x0]
     71c:	cbz	w0, 9b4 <list_super2+0x9b4>
     720:	adrp	x2, 0 <list_super2>
     724:	add	x2, x2, #0x0
     728:	adrp	x0, 0 <list_super2>
     72c:	add	x0, x0, #0x0
     730:	adrp	x4, 0 <list_super2>
     734:	add	x4, x4, #0x0
     738:	cmp	w3, #0x1
     73c:	adrp	x23, 0 <list_super2>
     740:	add	x23, x23, #0x0
     744:	add	x24, x23, #0x100
     748:	csel	x4, x4, x0, gt
     74c:	adrp	x1, 0 <list_super2>
     750:	add	x1, x1, #0x0
     754:	mov	x0, x24
     758:	bl	0 <sprintf>
     75c:	mov	x1, x24
     760:	mov	x0, x23
     764:	bl	0 <strcat>
     768:	mov	w0, #0x517f                	// #20863
     76c:	movk	w0, #0x1, lsl #16
     770:	cmp	w22, w0
     774:	b.ls	7f0 <list_super2+0x7f0>  // b.plast
     778:	mov	w3, #0x4507                	// #17671
     77c:	movk	w3, #0xc22e, lsl #16
     780:	umull	x3, w22, w3
     784:	lsr	x3, x3, #48
     788:	add	w0, w0, #0x1
     78c:	msub	w22, w3, w0, w22
     790:	adrp	x0, 0 <list_super2>
     794:	ldrb	w1, [x0]
     798:	adrp	x0, 0 <list_super2>
     79c:	add	x0, x0, #0x0
     7a0:	adrp	x2, 0 <list_super2>
     7a4:	add	x2, x2, #0x0
     7a8:	cmp	w1, #0x0
     7ac:	csel	x2, x2, x0, ne  // ne = any
     7b0:	adrp	x0, 0 <list_super2>
     7b4:	add	x0, x0, #0x0
     7b8:	adrp	x4, 0 <list_super2>
     7bc:	add	x4, x4, #0x0
     7c0:	cmp	w3, #0x1
     7c4:	adrp	x23, 0 <list_super2>
     7c8:	add	x23, x23, #0x0
     7cc:	add	x24, x23, #0x100
     7d0:	csel	x4, x4, x0, gt
     7d4:	adrp	x1, 0 <list_super2>
     7d8:	add	x1, x1, #0x0
     7dc:	mov	x0, x24
     7e0:	bl	0 <sprintf>
     7e4:	mov	x1, x24
     7e8:	mov	x0, x23
     7ec:	bl	0 <strcat>
     7f0:	cbz	w22, b90 <list_super2+0xb90>
     7f4:	mov	w3, #0xb3c5                	// #46021
     7f8:	movk	w3, #0x91a2, lsl #16
     7fc:	umull	x3, w22, w3
     800:	lsr	x3, x3, #43
     804:	mov	w5, #0xe10                 	// #3600
     808:	msub	w5, w3, w5, w22
     80c:	mov	w4, #0x8889                	// #34953
     810:	movk	w4, #0x8888, lsl #16
     814:	umull	x4, w5, w4
     818:	lsr	x4, x4, #37
     81c:	lsl	w1, w4, #4
     820:	sub	w1, w1, w4
     824:	adrp	x0, 0 <list_super2>
     828:	ldrb	w6, [x0]
     82c:	adrp	x0, 0 <list_super2>
     830:	add	x0, x0, #0x0
     834:	adrp	x2, 0 <list_super2>
     838:	add	x2, x2, #0x0
     83c:	cmp	w6, #0x0
     840:	adrp	x22, 0 <list_super2>
     844:	add	x22, x22, #0x0
     848:	add	x23, x22, #0x100
     84c:	sub	w5, w5, w1, lsl #2
     850:	csel	x2, x2, x0, ne  // ne = any
     854:	adrp	x1, 0 <list_super2>
     858:	add	x1, x1, #0x0
     85c:	mov	x0, x23
     860:	bl	0 <sprintf>
     864:	mov	x1, x23
     868:	mov	x0, x22
     86c:	bl	0 <strcat>
     870:	mov	x3, x22
     874:	b	9c8 <list_super2+0x9c8>
     878:	mov	x3, x20
     87c:	mov	x2, #0x7                   	// #7
     880:	mov	x1, #0x1                   	// #1
     884:	adrp	x0, 0 <list_super2>
     888:	add	x0, x0, #0x0
     88c:	bl	0 <fwrite>
     890:	b	3b8 <list_super2+0x3b8>
     894:	add	x2, x19, #0x200
     898:	adrp	x1, 0 <list_super2>
     89c:	add	x1, x1, #0x0
     8a0:	mov	x0, x20
     8a4:	bl	0 <fprintf>
     8a8:	b	3cc <list_super2+0x3cc>
     8ac:	adrp	x1, 0 <list_super2>
     8b0:	add	x1, x1, #0x0
     8b4:	mov	x0, x20
     8b8:	bl	0 <fprintf>
     8bc:	b	4c8 <list_super2+0x4c8>
     8c0:	ldr	w0, [x19, #28]
     8c4:	mov	w2, #0x400                 	// #1024
     8c8:	lsl	w2, w2, w0
     8cc:	adrp	x1, 0 <list_super2>
     8d0:	add	x1, x1, #0x0
     8d4:	mov	x0, x20
     8d8:	bl	0 <fprintf>
     8dc:	b	55c <list_super2+0x55c>
     8e0:	ldrh	w2, [x19, #254]
     8e4:	adrp	x1, 0 <list_super2>
     8e8:	add	x1, x1, #0x0
     8ec:	mov	x0, x20
     8f0:	bl	0 <fprintf>
     8f4:	b	564 <list_super2+0x564>
     8f8:	adrp	x1, 0 <list_super2>
     8fc:	add	x1, x1, #0x0
     900:	mov	x0, x20
     904:	bl	0 <fprintf>
     908:	b	56c <list_super2+0x56c>
     90c:	ldr	w2, [x19, #36]
     910:	adrp	x1, 0 <list_super2>
     914:	add	x1, x1, #0x0
     918:	mov	x0, x20
     91c:	bl	0 <fprintf>
     920:	b	59c <list_super2+0x59c>
     924:	adrp	x1, 0 <list_super2>
     928:	add	x1, x1, #0x0
     92c:	mov	x0, x20
     930:	bl	0 <fprintf>
     934:	b	5cc <list_super2+0x5cc>
     938:	adrp	x1, 0 <list_super2>
     93c:	add	x1, x1, #0x0
     940:	mov	x0, x20
     944:	bl	0 <fprintf>
     948:	b	5d4 <list_super2+0x5d4>
     94c:	adrp	x1, 0 <list_super2>
     950:	add	x1, x1, #0x0
     954:	mov	x0, x20
     958:	bl	0 <fprintf>
     95c:	b	5dc <list_super2+0x5dc>
     960:	mov	w2, #0x1                   	// #1
     964:	lsl	w2, w2, w0
     968:	adrp	x1, 0 <list_super2>
     96c:	add	x1, x1, #0x0
     970:	mov	x0, x20
     974:	bl	0 <fprintf>
     978:	b	5e4 <list_super2+0x5e4>
     97c:	mov	w0, w0
     980:	str	x0, [sp, #104]
     984:	add	x0, sp, #0x68
     988:	bl	0 <ctime>
     98c:	mov	x2, x0
     990:	adrp	x1, 0 <list_super2>
     994:	add	x1, x1, #0x0
     998:	mov	x0, x20
     99c:	bl	0 <fprintf>
     9a0:	b	5ec <list_super2+0x5ec>
     9a4:	add	x0, sp, #0x68
     9a8:	bl	0 <ctime>
     9ac:	mov	x2, x0
     9b0:	b	604 <list_super2+0x604>
     9b4:	adrp	x2, 0 <list_super2>
     9b8:	add	x2, x2, #0x0
     9bc:	b	728 <list_super2+0x728>
     9c0:	adrp	x3, 0 <list_super2>
     9c4:	add	x3, x3, #0x0
     9c8:	mov	w2, w21
     9cc:	adrp	x1, 0 <list_super2>
     9d0:	add	x1, x1, #0x0
     9d4:	mov	x0, x20
     9d8:	bl	0 <fprintf>
     9dc:	ldr	w0, [x19, #68]
     9e0:	cbnz	w0, b9c <list_super2+0xb9c>
     9e4:	ldr	x0, [x19, #376]
     9e8:	cbnz	x0, bc8 <list_super2+0xbc8>
     9ec:	mov	x3, x20
     9f0:	mov	x2, #0x1a                  	// #26
     9f4:	mov	x1, #0x1                   	// #1
     9f8:	adrp	x0, 0 <list_super2>
     9fc:	add	x0, x0, #0x0
     a00:	bl	0 <fwrite>
     a04:	ldrh	w21, [x19, #80]
     a08:	mov	w2, w21
     a0c:	adrp	x1, 0 <list_super2>
     a10:	add	x1, x1, #0x0
     a14:	mov	x0, x20
     a18:	bl	0 <fprintf>
     a1c:	mov	w0, w21
     a20:	bl	0 <getpwuid>
     a24:	cbz	x0, ca0 <list_super2+0xca0>
     a28:	ldr	x2, [x0]
     a2c:	adrp	x1, 0 <list_super2>
     a30:	add	x1, x1, #0x0
     a34:	mov	x0, x20
     a38:	bl	0 <fprintf>
     a3c:	mov	x3, x20
     a40:	mov	x2, #0x1a                  	// #26
     a44:	mov	x1, #0x1                   	// #1
     a48:	adrp	x0, 0 <list_super2>
     a4c:	add	x0, x0, #0x0
     a50:	bl	0 <fwrite>
     a54:	ldrh	w21, [x19, #82]
     a58:	mov	w2, w21
     a5c:	adrp	x1, 0 <list_super2>
     a60:	add	x1, x1, #0x0
     a64:	mov	x0, x20
     a68:	bl	0 <fprintf>
     a6c:	mov	w0, w21
     a70:	bl	0 <getgrgid>
     a74:	cbz	x0, cbc <list_super2+0xcbc>
     a78:	ldr	x2, [x0]
     a7c:	adrp	x1, 0 <list_super2>
     a80:	add	x1, x1, #0x0
     a84:	mov	x0, x20
     a88:	bl	0 <fprintf>
     a8c:	ldr	w0, [x19, #76]
     a90:	cbnz	w0, cd8 <list_super2+0xcd8>
     a94:	add	x21, x19, #0xd0
     a98:	mov	x0, x21
     a9c:	bl	0 <e2p_is_null_uuid>
     aa0:	cbz	w0, d38 <list_super2+0xd38>
     aa4:	ldr	w2, [x19, #224]
     aa8:	cbnz	w2, d58 <list_super2+0xd58>
     aac:	ldr	w2, [x19, #228]
     ab0:	cbnz	w2, d6c <list_super2+0xd6c>
     ab4:	ldr	w2, [x19, #232]
     ab8:	cbnz	w2, d80 <list_super2+0xd80>
     abc:	ldr	w0, [x19, #92]
     ac0:	tbnz	w0, #5, acc <list_super2+0xacc>
     ac4:	ldrb	w0, [x19, #252]
     ac8:	cbz	w0, ae8 <list_super2+0xae8>
     acc:	ldrb	w0, [x19, #252]
     ad0:	bl	0 <e2p_hash2string>
     ad4:	mov	x2, x0
     ad8:	adrp	x1, 0 <list_super2>
     adc:	add	x1, x1, #0x0
     ae0:	mov	x0, x20
     ae4:	bl	0 <fprintf>
     ae8:	add	x21, x19, #0xec
     aec:	mov	x0, x21
     af0:	bl	0 <e2p_is_null_uuid>
     af4:	cbz	w0, d94 <list_super2+0xd94>
     af8:	ldrb	w0, [x19, #253]
     afc:	cbnz	w0, db4 <list_super2+0xdb4>
     b00:	ldr	w0, [x19, #588]
     b04:	cbnz	w0, b10 <list_super2+0xb10>
     b08:	ldr	w0, [x19, #592]
     b0c:	cbz	w0, b44 <list_super2+0xb44>
     b10:	mov	x3, x20
     b14:	mov	x2, #0x1a                  	// #26
     b18:	mov	x1, #0x1                   	// #1
     b1c:	adrp	x0, 0 <list_super2>
     b20:	add	x0, x0, #0x0
     b24:	bl	0 <fwrite>
     b28:	ldr	w2, [x19, #588]
     b2c:	cbnz	w2, e08 <list_super2+0xe08>
     b30:	ldr	w2, [x19, #592]
     b34:	cbnz	w2, e1c <list_super2+0xe1c>
     b38:	mov	x1, x20
     b3c:	mov	w0, #0xa                   	// #10
     b40:	bl	0 <fputc>
     b44:	ldr	w2, [x19, #384]
     b48:	cbnz	w2, e30 <list_super2+0xe30>
     b4c:	ldr	w2, [x19, #400]
     b50:	cbnz	w2, e6c <list_super2+0xe6c>
     b54:	ldr	w2, [x19, #404]
     b58:	cbnz	w2, e80 <list_super2+0xe80>
     b5c:	ldr	w0, [x19, #408]
     b60:	cbnz	w0, e94 <list_super2+0xe94>
     b64:	ldr	w0, [x19, #460]
     b68:	cbnz	w0, f30 <list_super2+0xf30>
     b6c:	ldr	w0, [x19, #96]
     b70:	tbnz	w0, #8, fcc <list_super2+0xfcc>
     b74:	mov	w21, #0x1                   	// #1
     b78:	adrp	x22, 0 <list_super2>
     b7c:	add	x22, x22, #0x0
     b80:	add	x24, x19, #0x244
     b84:	adrp	x23, 0 <list_super2>
     b88:	add	x23, x23, #0x0
     b8c:	b	1040 <list_super2+0x1040>
     b90:	adrp	x3, 0 <list_super2>
     b94:	add	x3, x3, #0x0
     b98:	b	9c8 <list_super2+0x9c8>
     b9c:	ldr	w1, [x19, #64]
     ba0:	add	w0, w0, w1
     ba4:	str	x0, [sp, #96]
     ba8:	add	x0, sp, #0x60
     bac:	bl	0 <ctime>
     bb0:	mov	x2, x0
     bb4:	adrp	x1, 0 <list_super2>
     bb8:	add	x1, x1, #0x0
     bbc:	mov	x0, x20
     bc0:	bl	0 <fprintf>
     bc4:	b	9e4 <list_super2+0x9e4>
     bc8:	mov	x3, x20
     bcc:	mov	x2, #0x1a                  	// #26
     bd0:	mov	x1, #0x1                   	// #1
     bd4:	adrp	x0, 0 <list_super2>
     bd8:	add	x0, x0, #0x0
     bdc:	bl	0 <fwrite>
     be0:	ldr	x2, [x19, #376]
     be4:	mov	x0, #0x1fff                	// #8191
     be8:	cmp	x2, x0
     bec:	b.ls	c34 <list_super2+0xc34>  // b.plast
     bf0:	mov	x0, #0x7fffff              	// #8388607
     bf4:	cmp	x2, x0
     bf8:	b.ls	c48 <list_super2+0xc48>  // b.plast
     bfc:	mov	x0, #0x1ffffffff           	// #8589934591
     c00:	cmp	x2, x0
     c04:	b.ls	c64 <list_super2+0xc64>  // b.plast
     c08:	mov	x0, #0x7ffffffffff         	// #8796093022207
     c0c:	cmp	x2, x0
     c10:	b.hi	c80 <list_super2+0xc80>  // b.pmore
     c14:	mov	x0, #0x20000000            	// #536870912
     c18:	add	x2, x2, x0
     c1c:	lsr	x2, x2, #30
     c20:	adrp	x1, 0 <list_super2>
     c24:	add	x1, x1, #0x0
     c28:	mov	x0, x20
     c2c:	bl	0 <fprintf>
     c30:	b	9ec <list_super2+0x9ec>
     c34:	adrp	x1, 0 <list_super2>
     c38:	add	x1, x1, #0x0
     c3c:	mov	x0, x20
     c40:	bl	0 <fprintf>
     c44:	b	9ec <list_super2+0x9ec>
     c48:	add	x2, x2, #0x200
     c4c:	lsr	x2, x2, #10
     c50:	adrp	x1, 0 <list_super2>
     c54:	add	x1, x1, #0x0
     c58:	mov	x0, x20
     c5c:	bl	0 <fprintf>
     c60:	b	9ec <list_super2+0x9ec>
     c64:	add	x2, x2, #0x80, lsl #12
     c68:	lsr	x2, x2, #20
     c6c:	adrp	x1, 0 <list_super2>
     c70:	add	x1, x1, #0x0
     c74:	mov	x0, x20
     c78:	bl	0 <fprintf>
     c7c:	b	9ec <list_super2+0x9ec>
     c80:	mov	x0, #0x8000000000          	// #549755813888
     c84:	add	x2, x2, x0
     c88:	lsr	x2, x2, #40
     c8c:	adrp	x1, 0 <list_super2>
     c90:	add	x1, x1, #0x0
     c94:	mov	x0, x20
     c98:	bl	0 <fprintf>
     c9c:	b	9ec <list_super2+0x9ec>
     ca0:	mov	x3, x20
     ca4:	mov	x2, #0xf                   	// #15
     ca8:	mov	x1, #0x1                   	// #1
     cac:	adrp	x0, 0 <list_super2>
     cb0:	add	x0, x0, #0x0
     cb4:	bl	0 <fwrite>
     cb8:	b	a3c <list_super2+0xa3c>
     cbc:	mov	x3, x20
     cc0:	mov	x2, #0x10                  	// #16
     cc4:	mov	x1, #0x1                   	// #1
     cc8:	adrp	x0, 0 <list_super2>
     ccc:	add	x0, x0, #0x0
     cd0:	bl	0 <fwrite>
     cd4:	b	a8c <list_super2+0xa8c>
     cd8:	ldr	w2, [x19, #84]
     cdc:	adrp	x1, 0 <list_super2>
     ce0:	add	x1, x1, #0x0
     ce4:	mov	x0, x20
     ce8:	bl	0 <fprintf>
     cec:	ldrh	w2, [x19, #88]
     cf0:	adrp	x1, 0 <list_super2>
     cf4:	add	x1, x1, #0x0
     cf8:	mov	x0, x20
     cfc:	bl	0 <fprintf>
     d00:	ldrh	w2, [x19, #348]
     d04:	cbnz	w2, d24 <list_super2+0xd24>
     d08:	ldrh	w2, [x19, #350]
     d0c:	cbz	w2, a94 <list_super2+0xa94>
     d10:	adrp	x1, 0 <list_super2>
     d14:	add	x1, x1, #0x0
     d18:	mov	x0, x20
     d1c:	bl	0 <fprintf>
     d20:	b	a94 <list_super2+0xa94>
     d24:	adrp	x1, 0 <list_super2>
     d28:	add	x1, x1, #0x0
     d2c:	mov	x0, x20
     d30:	bl	0 <fprintf>
     d34:	b	d08 <list_super2+0xd08>
     d38:	mov	x0, x21
     d3c:	bl	0 <e2p_uuid2str>
     d40:	mov	x2, x0
     d44:	adrp	x1, 0 <list_super2>
     d48:	add	x1, x1, #0x0
     d4c:	mov	x0, x20
     d50:	bl	0 <fprintf>
     d54:	b	aa4 <list_super2+0xaa4>
     d58:	adrp	x1, 0 <list_super2>
     d5c:	add	x1, x1, #0x0
     d60:	mov	x0, x20
     d64:	bl	0 <fprintf>
     d68:	b	aac <list_super2+0xaac>
     d6c:	adrp	x1, 0 <list_super2>
     d70:	add	x1, x1, #0x0
     d74:	mov	x0, x20
     d78:	bl	0 <fprintf>
     d7c:	b	ab4 <list_super2+0xab4>
     d80:	adrp	x1, 0 <list_super2>
     d84:	add	x1, x1, #0x0
     d88:	mov	x0, x20
     d8c:	bl	0 <fprintf>
     d90:	b	abc <list_super2+0xabc>
     d94:	mov	x0, x21
     d98:	bl	0 <e2p_uuid2str>
     d9c:	mov	x2, x0
     da0:	adrp	x1, 0 <list_super2>
     da4:	add	x1, x1, #0x0
     da8:	mov	x0, x20
     dac:	bl	0 <fprintf>
     db0:	b	af8 <list_super2+0xaf8>
     db4:	mov	x3, x20
     db8:	mov	x2, #0x1a                  	// #26
     dbc:	mov	x1, #0x1                   	// #1
     dc0:	adrp	x0, 0 <list_super2>
     dc4:	add	x0, x0, #0x0
     dc8:	bl	0 <fwrite>
     dcc:	ldrb	w2, [x19, #253]
     dd0:	cmp	w2, #0x1
     dd4:	b.eq	dec <list_super2+0xdec>  // b.none
     dd8:	adrp	x1, 0 <list_super2>
     ddc:	add	x1, x1, #0x0
     de0:	mov	x0, x20
     de4:	bl	0 <fprintf>
     de8:	b	b00 <list_super2+0xb00>
     dec:	mov	x3, x20
     df0:	mov	x2, #0xd                   	// #13
     df4:	mov	x1, #0x1                   	// #1
     df8:	adrp	x0, 0 <list_super2>
     dfc:	add	x0, x0, #0x0
     e00:	bl	0 <fwrite>
     e04:	b	b00 <list_super2+0xb00>
     e08:	adrp	x1, 0 <list_super2>
     e0c:	add	x1, x1, #0x0
     e10:	mov	x0, x20
     e14:	bl	0 <fprintf>
     e18:	b	b30 <list_super2+0xb30>
     e1c:	adrp	x1, 0 <list_super2>
     e20:	add	x1, x1, #0x0
     e24:	mov	x0, x20
     e28:	bl	0 <fprintf>
     e2c:	b	b38 <list_super2+0xb38>
     e30:	adrp	x1, 0 <list_super2>
     e34:	add	x1, x1, #0x0
     e38:	mov	x0, x20
     e3c:	bl	0 <fprintf>
     e40:	ldr	w2, [x19, #388]
     e44:	adrp	x1, 0 <list_super2>
     e48:	add	x1, x1, #0x0
     e4c:	mov	x0, x20
     e50:	bl	0 <fprintf>
     e54:	ldr	x2, [x19, #392]
     e58:	adrp	x1, 0 <list_super2>
     e5c:	add	x1, x1, #0x0
     e60:	mov	x0, x20
     e64:	bl	0 <fprintf>
     e68:	b	b4c <list_super2+0xb4c>
     e6c:	adrp	x1, 0 <list_super2>
     e70:	add	x1, x1, #0x0
     e74:	mov	x0, x20
     e78:	bl	0 <fprintf>
     e7c:	b	b54 <list_super2+0xb54>
     e80:	adrp	x1, 0 <list_super2>
     e84:	add	x1, x1, #0x0
     e88:	mov	x0, x20
     e8c:	bl	0 <fprintf>
     e90:	b	b5c <list_super2+0xb5c>
     e94:	mov	w0, w0
     e98:	str	x0, [sp, #104]
     e9c:	add	x0, sp, #0x68
     ea0:	bl	0 <ctime>
     ea4:	mov	x2, x0
     ea8:	adrp	x1, 0 <list_super2>
     eac:	add	x1, x1, #0x0
     eb0:	mov	x0, x20
     eb4:	bl	0 <fprintf>
     eb8:	stp	xzr, xzr, [sp, #112]
     ebc:	stp	xzr, xzr, [sp, #128]
     ec0:	stp	xzr, xzr, [sp, #144]
     ec4:	stp	xzr, xzr, [sp, #160]
     ec8:	stp	xzr, xzr, [sp, #176]
     ecc:	mov	x2, #0x20                  	// #32
     ed0:	add	x1, x19, #0x1a8
     ed4:	add	x0, sp, #0x70
     ed8:	bl	0 <strncpy>
     edc:	add	x2, sp, #0x70
     ee0:	adrp	x1, 0 <list_super2>
     ee4:	add	x1, x1, #0x0
     ee8:	mov	x0, x20
     eec:	bl	0 <fprintf>
     ef0:	ldr	w2, [x19, #456]
     ef4:	adrp	x1, 0 <list_super2>
     ef8:	add	x1, x1, #0x0
     efc:	mov	x0, x20
     f00:	bl	0 <fprintf>
     f04:	ldr	w2, [x19, #412]
     f08:	adrp	x1, 0 <list_super2>
     f0c:	add	x1, x1, #0x0
     f10:	mov	x0, x20
     f14:	bl	0 <fprintf>
     f18:	ldr	x2, [x19, #416]
     f1c:	adrp	x1, 0 <list_super2>
     f20:	add	x1, x1, #0x0
     f24:	mov	x0, x20
     f28:	bl	0 <fprintf>
     f2c:	b	b64 <list_super2+0xb64>
     f30:	mov	w0, w0
     f34:	str	x0, [sp, #104]
     f38:	add	x0, sp, #0x68
     f3c:	bl	0 <ctime>
     f40:	mov	x2, x0
     f44:	adrp	x1, 0 <list_super2>
     f48:	add	x1, x1, #0x0
     f4c:	mov	x0, x20
     f50:	bl	0 <fprintf>
     f54:	stp	xzr, xzr, [sp, #112]
     f58:	stp	xzr, xzr, [sp, #128]
     f5c:	stp	xzr, xzr, [sp, #144]
     f60:	stp	xzr, xzr, [sp, #160]
     f64:	stp	xzr, xzr, [sp, #176]
     f68:	mov	x2, #0x20                  	// #32
     f6c:	add	x1, x19, #0x1e0
     f70:	add	x0, sp, #0x70
     f74:	bl	0 <strncpy>
     f78:	add	x2, sp, #0x70
     f7c:	adrp	x1, 0 <list_super2>
     f80:	add	x1, x1, #0x0
     f84:	mov	x0, x20
     f88:	bl	0 <fprintf>
     f8c:	ldr	w2, [x19, #468]
     f90:	adrp	x1, 0 <list_super2>
     f94:	add	x1, x1, #0x0
     f98:	mov	x0, x20
     f9c:	bl	0 <fprintf>
     fa0:	ldr	w2, [x19, #464]
     fa4:	adrp	x1, 0 <list_super2>
     fa8:	add	x1, x1, #0x0
     fac:	mov	x0, x20
     fb0:	bl	0 <fprintf>
     fb4:	ldr	x2, [x19, #472]
     fb8:	adrp	x1, 0 <list_super2>
     fbc:	add	x1, x1, #0x0
     fc0:	mov	x0, x20
     fc4:	bl	0 <fprintf>
     fc8:	b	b6c <list_super2+0xb6c>
     fcc:	ldr	x2, [x19, #360]
     fd0:	adrp	x1, 0 <list_super2>
     fd4:	add	x1, x1, #0x0
     fd8:	mov	x0, x20
     fdc:	bl	0 <fprintf>
     fe0:	ldrh	w2, [x19, #358]
     fe4:	adrp	x1, 0 <list_super2>
     fe8:	add	x1, x1, #0x0
     fec:	mov	x0, x20
     ff0:	bl	0 <fprintf>
     ff4:	b	b74 <list_super2+0xb74>
     ff8:	ldr	w1, [x19, #576]
     ffc:	cbz	w1, 103c <list_super2+0x103c>
    1000:	adrp	x1, 0 <list_super2>
    1004:	add	x1, x1, #0x0
    1008:	ldr	x2, [x1, w0, uxtw #3]
    100c:	cmp	w0, #0x2
    1010:	b.eq	1094 <list_super2+0x1094>  // b.none
    1014:	b.hi	10a4 <list_super2+0x10a4>  // b.pmore
    1018:	add	x0, x19, #0x240
    101c:	adrp	x2, 0 <list_super2>
    1020:	add	x2, x2, #0x0
    1024:	ldr	w3, [x0]
    1028:	mov	x1, x22
    102c:	mov	x0, x20
    1030:	bl	0 <fprintf>
    1034:	cmp	w21, #0x2
    1038:	b.hi	10ac <list_super2+0x10ac>  // b.pmore
    103c:	add	w21, w21, #0x1
    1040:	sub	w0, w21, #0x1
    1044:	cmp	w21, #0x2
    1048:	b.eq	1078 <list_super2+0x1078>  // b.none
    104c:	cmp	w0, #0x2
    1050:	b.eq	108c <list_super2+0x108c>  // b.none
    1054:	cbz	w0, ff8 <list_super2+0xff8>
    1058:	mov	x1, #0x0                   	// #0
    105c:	ldr	w1, [x1]
    1060:	cbz	w1, 1034 <list_super2+0x1034>
    1064:	adrp	x1, 0 <list_super2>
    1068:	add	x1, x1, #0x0
    106c:	ldr	x2, [x1, w0, uxtw #3]
    1070:	mov	x0, #0x0                   	// #0
    1074:	b	1024 <list_super2+0x1024>
    1078:	ldr	w0, [x19, #580]
    107c:	cbz	w0, 103c <list_super2+0x103c>
    1080:	mov	x0, x24
    1084:	mov	x2, x23
    1088:	b	1024 <list_super2+0x1024>
    108c:	ldr	w0, [x19, #620]
    1090:	cbz	w0, 10ac <list_super2+0x10ac>
    1094:	add	x0, x19, #0x26c
    1098:	adrp	x2, 0 <list_super2>
    109c:	add	x2, x2, #0x0
    10a0:	b	1024 <list_super2+0x1024>
    10a4:	mov	x0, #0x0                   	// #0
    10a8:	b	1024 <list_super2+0x1024>
    10ac:	ldr	w0, [x19, #100]
    10b0:	tbnz	w0, #10, 10f0 <list_super2+0x10f0>
    10b4:	add	x21, x19, #0x258
    10b8:	mov	x0, x21
    10bc:	bl	0 <e2p_is_null_uuid>
    10c0:	cbz	w0, 1134 <list_super2+0x1134>
    10c4:	ldr	w0, [x19, #96]
    10c8:	tbnz	w0, #13, 1154 <list_super2+0x1154>
    10cc:	ldr	w0, [x19, #96]
    10d0:	tbnz	w0, #17, 116c <list_super2+0x116c>
    10d4:	ldp	x19, x20, [sp, #16]
    10d8:	ldp	x21, x22, [sp, #32]
    10dc:	ldp	x23, x24, [sp, #48]
    10e0:	ldp	x25, x26, [sp, #64]
    10e4:	ldp	x27, x28, [sp, #80]
    10e8:	ldp	x29, x30, [sp], #192
    10ec:	ret
    10f0:	ldrb	w1, [x19, #373]
    10f4:	adrp	x0, 0 <list_super2>
    10f8:	add	x0, x0, #0x0
    10fc:	adrp	x2, 0 <list_super2>
    1100:	add	x2, x2, #0x0
    1104:	cmp	w1, #0x1
    1108:	csel	x2, x2, x0, eq  // eq = none
    110c:	adrp	x1, 0 <list_super2>
    1110:	add	x1, x1, #0x0
    1114:	mov	x0, x20
    1118:	bl	0 <fprintf>
    111c:	ldr	w2, [x19, #1020]
    1120:	adrp	x1, 0 <list_super2>
    1124:	add	x1, x1, #0x0
    1128:	mov	x0, x20
    112c:	bl	0 <fprintf>
    1130:	b	10b4 <list_super2+0x10b4>
    1134:	mov	x0, x21
    1138:	bl	0 <e2p_uuid2str>
    113c:	mov	x2, x0
    1140:	adrp	x1, 0 <list_super2>
    1144:	add	x1, x1, #0x0
    1148:	mov	x0, x20
    114c:	bl	0 <fprintf>
    1150:	b	10c4 <list_super2+0x10c4>
    1154:	ldr	w2, [x19, #624]
    1158:	adrp	x1, 0 <list_super2>
    115c:	add	x1, x1, #0x0
    1160:	mov	x0, x20
    1164:	bl	0 <fprintf>
    1168:	b	10cc <list_super2+0x10cc>
    116c:	ldrh	w0, [x19, #636]
    1170:	bl	0 <e2p_encoding2str>
    1174:	mov	x2, x0
    1178:	adrp	x1, 0 <list_super2>
    117c:	add	x1, x1, #0x0
    1180:	mov	x0, x20
    1184:	bl	0 <fprintf>
    1188:	b	10d4 <list_super2+0x10d4>
    118c:	mov	w3, #0xde4d                	// #56909
    1190:	movk	w3, #0x6ef5, lsl #16
    1194:	umull	x3, w21, w3
    1198:	lsr	x3, x3, #50
    119c:	mov	w22, #0x3a80                	// #14976
    11a0:	movk	w22, #0x9, lsl #16
    11a4:	msub	w22, w3, w22, w21
    11a8:	adrp	x2, 0 <list_super2>
    11ac:	add	x2, x2, #0x0
    11b0:	b	728 <list_super2+0x728>
    11b4:	mov	w0, #0x3a7f                	// #14975
    11b8:	movk	w0, #0x9, lsl #16
    11bc:	cmp	w21, w0
    11c0:	b.hi	118c <list_super2+0x118c>  // b.pmore
    11c4:	mov	w0, #0x517f                	// #20863
    11c8:	movk	w0, #0x1, lsl #16
    11cc:	mov	w22, w21
    11d0:	cmp	w21, w0
    11d4:	b.ls	7f0 <list_super2+0x7f0>  // b.plast
    11d8:	mov	w3, #0x4507                	// #17671
    11dc:	movk	w3, #0xc22e, lsl #16
    11e0:	umull	x3, w21, w3
    11e4:	lsr	x3, x3, #48
    11e8:	mov	w22, #0x5180                	// #20864
    11ec:	movk	w22, #0x1, lsl #16
    11f0:	msub	w22, w3, w22, w21
    11f4:	adrp	x2, 0 <list_super2>
    11f8:	add	x2, x2, #0x0
    11fc:	b	7b0 <list_super2+0x7b0>

0000000000001200 <list_super>:
    1200:	stp	x29, x30, [sp, #-16]!
    1204:	mov	x29, sp
    1208:	adrp	x1, 0 <stdout>
    120c:	ldr	x1, [x1]
    1210:	bl	0 <list_super2>
    1214:	ldp	x29, x30, [sp], #16
    1218:	ret

ljs.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_list_journal_super>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	stp	x23, x24, [sp, #48]
  14:	stp	x25, x26, [sp, #64]
  18:	stp	x27, x28, [sp, #80]
  1c:	mov	x24, x0
  20:	mov	x26, x1
  24:	mov	w27, w2
  28:	mov	x3, x0
  2c:	mov	x2, #0x19                  	// #25
  30:	mov	x1, #0x1                   	// #1
  34:	adrp	x0, 0 <e2p_list_journal_super>
  38:	add	x0, x0, #0x0
  3c:	bl	0 <fwrite>
  40:	mov	x23, #0x0                   	// #0
  44:	mov	w22, #0x0                   	// #0
  48:	add	x28, x26, #0x24
  4c:	adrp	x25, 0 <e2p_list_journal_super>
  50:	add	x25, x25, #0x0
  54:	b	9c <e2p_list_journal_super+0x9c>
  58:	mov	w1, w20
  5c:	mov	w0, w23
  60:	bl	0 <e2p_jrnl_feature2string>
  64:	mov	x2, x0
  68:	mov	x1, x25
  6c:	mov	x0, x24
  70:	bl	0 <fprintf>
  74:	add	w22, w22, #0x1
  78:	lsl	w20, w20, #1
  7c:	subs	w19, w19, #0x1
  80:	b.eq	90 <e2p_list_journal_super+0x90>  // b.none
  84:	tst	w21, w20
  88:	b.eq	78 <e2p_list_journal_super+0x78>  // b.none
  8c:	b	58 <e2p_list_journal_super+0x58>
  90:	add	x23, x23, #0x1
  94:	cmp	x23, #0x3
  98:	b.eq	cc <e2p_list_journal_super+0xcc>  // b.none
  9c:	ldr	w0, [x28, x23, lsl #2]
  a0:	lsr	w21, w0, #8
  a4:	and	w21, w21, #0xff00
  a8:	lsl	w1, w0, #8
  ac:	and	w1, w1, #0xff0000
  b0:	orr	w21, w21, w1
  b4:	lsl	w1, w0, #24
  b8:	orr	w0, w1, w0, lsr #24
  bc:	orr	w21, w21, w0
  c0:	mov	w19, #0x20                  	// #32
  c4:	mov	w20, #0x1                   	// #1
  c8:	b	84 <e2p_list_journal_super+0x84>
  cc:	cbz	w22, 218 <e2p_list_journal_super+0x218>
  d0:	mov	x1, x24
  d4:	mov	w0, #0xa                   	// #10
  d8:	bl	0 <fputc>
  dc:	mov	x3, x24
  e0:	mov	x2, #0x1a                  	// #26
  e4:	mov	x1, #0x1                   	// #1
  e8:	adrp	x0, 0 <e2p_list_journal_super>
  ec:	add	x0, x0, #0x0
  f0:	bl	0 <fwrite>
  f4:	ldr	w2, [x26, #12]
  f8:	rev	w2, w2
  fc:	ldr	w0, [x26, #16]
 100:	rev	w0, w0
 104:	lsr	w2, w2, #10
 108:	mul	w2, w2, w0
 10c:	mov	w0, #0x1fff                	// #8191
 110:	cmp	w2, w0
 114:	b.hi	234 <e2p_list_journal_super+0x234>  // b.pmore
 118:	adrp	x1, 0 <e2p_list_journal_super>
 11c:	add	x1, x1, #0x0
 120:	mov	x0, x24
 124:	bl	0 <fprintf>
 128:	ldr	w21, [x26, #64]
 12c:	rev	w21, w21
 130:	ldr	w2, [x26, #12]
 134:	rev	w2, w2
 138:	cmp	w2, w27
 13c:	b.ne	24c <e2p_list_journal_super+0x24c>  // b.any
 140:	ldr	w2, [x26, #16]
 144:	rev	w2, w2
 148:	adrp	x1, 0 <e2p_list_journal_super>
 14c:	add	x1, x1, #0x0
 150:	mov	x0, x24
 154:	bl	0 <fprintf>
 158:	ldr	w2, [x26, #20]
 15c:	rev	w2, w2
 160:	cmp	w2, #0x1
 164:	b.ne	260 <e2p_list_journal_super+0x260>  // b.any
 168:	ldr	w2, [x26, #24]
 16c:	ldr	w3, [x26, #28]
 170:	rev	w3, w3
 174:	rev	w2, w2
 178:	adrp	x1, 0 <e2p_list_journal_super>
 17c:	add	x1, x1, #0x0
 180:	mov	x0, x24
 184:	bl	0 <fprintf>
 188:	cmp	w21, #0x1
 18c:	b.ne	274 <e2p_list_journal_super+0x274>  // b.any
 190:	ldr	w0, [x26, #36]
 194:	tbnz	w0, #24, 28c <e2p_list_journal_super+0x28c>
 198:	ldr	w0, [x26, #40]
 19c:	tst	w0, #0x18000000
 1a0:	b.eq	1f4 <e2p_list_journal_super+0x1f4>  // b.none
 1a4:	ldrb	w0, [x26, #80]
 1a8:	adrp	x1, 0 <e2p_list_journal_super>
 1ac:	add	x1, x1, #0x0
 1b0:	adrp	x2, 0 <e2p_list_journal_super>
 1b4:	add	x2, x2, #0x0
 1b8:	cmp	w0, #0x4
 1bc:	ldr	w0, [x26, #252]
 1c0:	lsr	w3, w0, #8
 1c4:	and	w3, w3, #0xff00
 1c8:	lsl	w4, w0, #8
 1cc:	and	w4, w4, #0xff0000
 1d0:	orr	w3, w3, w4
 1d4:	lsl	w4, w0, #24
 1d8:	orr	w0, w4, w0, lsr #24
 1dc:	orr	w3, w3, w0
 1e0:	csel	x2, x2, x1, eq  // eq = none
 1e4:	adrp	x1, 0 <e2p_list_journal_super>
 1e8:	add	x1, x1, #0x0
 1ec:	mov	x0, x24
 1f0:	bl	0 <fprintf>
 1f4:	cmp	w21, #0x1
 1f8:	b.ls	2a8 <e2p_list_journal_super+0x2a8>  // b.plast
 1fc:	adrp	x20, 0 <e2p_list_journal_super>
 200:	add	x20, x20, #0x0
 204:	cbz	w21, 2ec <e2p_list_journal_super+0x2ec>
 208:	mov	x23, x20
 20c:	adrp	x22, 0 <e2p_list_journal_super>
 210:	add	x22, x22, #0x0
 214:	b	2c0 <e2p_list_journal_super+0x2c0>
 218:	mov	x3, x24
 21c:	mov	x2, #0x7                   	// #7
 220:	mov	x1, #0x1                   	// #1
 224:	adrp	x0, 0 <e2p_list_journal_super>
 228:	add	x0, x0, #0x0
 22c:	bl	0 <fwrite>
 230:	b	d0 <e2p_list_journal_super+0xd0>
 234:	lsr	w2, w2, #10
 238:	adrp	x1, 0 <e2p_list_journal_super>
 23c:	add	x1, x1, #0x0
 240:	mov	x0, x24
 244:	bl	0 <fprintf>
 248:	b	128 <e2p_list_journal_super+0x128>
 24c:	adrp	x1, 0 <e2p_list_journal_super>
 250:	add	x1, x1, #0x0
 254:	mov	x0, x24
 258:	bl	0 <fprintf>
 25c:	b	140 <e2p_list_journal_super+0x140>
 260:	adrp	x1, 0 <e2p_list_journal_super>
 264:	add	x1, x1, #0x0
 268:	mov	x0, x24
 26c:	bl	0 <fprintf>
 270:	b	168 <e2p_list_journal_super+0x168>
 274:	mov	w2, w21
 278:	adrp	x1, 0 <e2p_list_journal_super>
 27c:	add	x1, x1, #0x0
 280:	mov	x0, x24
 284:	bl	0 <fprintf>
 288:	b	190 <e2p_list_journal_super+0x190>
 28c:	mov	x3, x24
 290:	mov	x2, #0x20                  	// #32
 294:	mov	x1, #0x1                   	// #1
 298:	adrp	x0, 0 <e2p_list_journal_super>
 29c:	add	x0, x0, #0x0
 2a0:	bl	0 <fwrite>
 2a4:	b	198 <e2p_list_journal_super+0x198>
 2a8:	add	x0, x26, #0x100
 2ac:	bl	0 <e2p_is_null_uuid>
 2b0:	cbnz	w0, 2ec <e2p_list_journal_super+0x2ec>
 2b4:	b	1fc <e2p_list_journal_super+0x1fc>
 2b8:	cmp	w19, #0x0
 2bc:	csel	x20, x22, x23, ne  // ne = any
 2c0:	lsl	w0, w19, #4
 2c4:	add	x0, x0, #0x100
 2c8:	add	x0, x26, x0
 2cc:	bl	0 <e2p_uuid2str>
 2d0:	mov	x1, x0
 2d4:	mov	x0, x20
 2d8:	bl	0 <printf>
 2dc:	add	w19, w19, #0x1
 2e0:	cmp	w19, #0x2f
 2e4:	ccmp	w21, w19, #0x0, ls  // ls = plast
 2e8:	b.hi	2b8 <e2p_list_journal_super+0x2b8>  // b.pmore
 2ec:	ldr	w2, [x26, #32]
 2f0:	cbnz	w2, 310 <e2p_list_journal_super+0x310>
 2f4:	ldp	x19, x20, [sp, #16]
 2f8:	ldp	x21, x22, [sp, #32]
 2fc:	ldp	x23, x24, [sp, #48]
 300:	ldp	x25, x26, [sp, #64]
 304:	ldp	x27, x28, [sp, #80]
 308:	ldp	x29, x30, [sp], #96
 30c:	ret
 310:	rev	w2, w2
 314:	adrp	x1, 0 <e2p_list_journal_super>
 318:	add	x1, x1, #0x0
 31c:	mov	x0, x24
 320:	bl	0 <fprintf>
 324:	b	2f4 <e2p_list_journal_super+0x2f4>

mntopts.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_mntopt2string>:
   0:	mov	w3, w0
   4:	adrp	x0, 0 <e2p_mntopt2string>
   8:	ldr	x0, [x0]
   c:	cbz	x0, 30 <e2p_mntopt2string+0x30>
  10:	adrp	x1, 0 <e2p_mntopt2string>
  14:	add	x1, x1, #0x0
  18:	ldr	w2, [x1]
  1c:	cmp	w2, w3
  20:	b.eq	88 <e2p_mntopt2string+0x88>  // b.none
  24:	add	x1, x1, #0x10
  28:	ldr	x0, [x1, #8]
  2c:	cbnz	x0, 18 <e2p_mntopt2string+0x18>
  30:	stp	x29, x30, [sp, #-32]!
  34:	mov	x29, sp
  38:	str	x19, [sp, #16]
  3c:	lsr	w1, w3, #1
  40:	cmp	wzr, w3, lsr #1
  44:	b.eq	80 <e2p_mntopt2string+0x80>  // b.none
  48:	mov	w2, #0x0                   	// #0
  4c:	add	w2, w2, #0x1
  50:	lsr	w1, w1, #1
  54:	cbnz	w1, 4c <e2p_mntopt2string+0x4c>
  58:	adrp	x0, 0 <e2p_mntopt2string>
  5c:	add	x19, x0, #0x0
  60:	adrp	x1, 0 <e2p_mntopt2string>
  64:	add	x1, x1, #0x0
  68:	mov	x0, x19
  6c:	bl	0 <sprintf>
  70:	mov	x0, x19
  74:	ldr	x19, [sp, #16]
  78:	ldp	x29, x30, [sp], #32
  7c:	ret
  80:	mov	w2, #0x0                   	// #0
  84:	b	58 <e2p_mntopt2string+0x58>
  88:	ret

000000000000008c <e2p_string2mntopt>:
  8c:	stp	x29, x30, [sp, #-64]!
  90:	mov	x29, sp
  94:	stp	x19, x20, [sp, #16]
  98:	stp	x21, x22, [sp, #32]
  9c:	mov	x21, x0
  a0:	mov	x22, x1
  a4:	adrp	x2, 0 <e2p_mntopt2string>
  a8:	ldr	x1, [x2]
  ac:	cbz	x1, d4 <e2p_string2mntopt+0x48>
  b0:	adrp	x20, 0 <e2p_mntopt2string>
  b4:	add	x20, x20, #0x0
  b8:	mov	x0, x21
  bc:	bl	0 <strcasecmp>
  c0:	mov	w19, w0
  c4:	cbz	w0, 100 <e2p_string2mntopt+0x74>
  c8:	add	x20, x20, #0x10
  cc:	ldr	x1, [x20, #8]
  d0:	cbnz	x1, b8 <e2p_string2mntopt+0x2c>
  d4:	mov	x2, #0x7                   	// #7
  d8:	adrp	x1, 0 <e2p_mntopt2string>
  dc:	add	x1, x1, #0x0
  e0:	mov	x0, x21
  e4:	bl	0 <strncasecmp>
  e8:	mov	w19, w0
  ec:	cbnz	w0, 150 <e2p_string2mntopt+0xc4>
  f0:	ldrb	w0, [x21, #8]
  f4:	cbnz	w0, 11c <e2p_string2mntopt+0x90>
  f8:	mov	w19, #0x1                   	// #1
  fc:	b	108 <e2p_string2mntopt+0x7c>
 100:	ldr	w0, [x20]
 104:	str	w0, [x22]
 108:	mov	w0, w19
 10c:	ldp	x19, x20, [sp, #16]
 110:	ldp	x21, x22, [sp, #32]
 114:	ldp	x29, x30, [sp], #64
 118:	ret
 11c:	mov	w2, #0xa                   	// #10
 120:	add	x1, sp, #0x38
 124:	add	x0, x21, #0x8
 128:	bl	0 <strtol>
 12c:	cmp	w0, #0x1f
 130:	b.hi	158 <e2p_string2mntopt+0xcc>  // b.pmore
 134:	ldr	x1, [sp, #56]
 138:	ldrb	w1, [x1]
 13c:	cbnz	w1, 160 <e2p_string2mntopt+0xd4>
 140:	mov	w1, #0x1                   	// #1
 144:	lsl	w0, w1, w0
 148:	str	w0, [x22]
 14c:	b	108 <e2p_string2mntopt+0x7c>
 150:	mov	w19, #0x1                   	// #1
 154:	b	108 <e2p_string2mntopt+0x7c>
 158:	mov	w19, #0x1                   	// #1
 15c:	b	108 <e2p_string2mntopt+0x7c>
 160:	mov	w19, #0x1                   	// #1
 164:	b	108 <e2p_string2mntopt+0x7c>

0000000000000168 <e2p_edit_mntopts>:
 168:	stp	x29, x30, [sp, #-96]!
 16c:	mov	x29, sp
 170:	stp	x19, x20, [sp, #16]
 174:	stp	x21, x22, [sp, #32]
 178:	mov	x19, x0
 17c:	mov	x21, x1
 180:	mov	w22, w2
 184:	bl	0 <strlen>
 188:	add	x0, x0, #0x1
 18c:	bl	0 <malloc>
 190:	cbz	x0, 2fc <e2p_edit_mntopts+0x194>
 194:	stp	x23, x24, [sp, #48]
 198:	stp	x25, x26, [sp, #64]
 19c:	mov	x24, x0
 1a0:	mov	x1, x19
 1a4:	bl	0 <strcpy>
 1a8:	mov	x19, x24
 1ac:	mov	w25, #0x1                   	// #1
 1b0:	mov	w23, #0x0                   	// #0
 1b4:	b	274 <e2p_edit_mntopts+0x10c>
 1b8:	ldrb	w3, [x19]
 1bc:	mov	x20, x19
 1c0:	cbz	w3, 1e8 <e2p_edit_mntopts+0x80>
 1c4:	and	x0, x3, #0xff
 1c8:	ldrh	w0, [x1, x0, lsl #1]
 1cc:	and	w0, w0, #0x2000
 1d0:	cmp	w3, #0x2c
 1d4:	ccmp	w0, #0x0, #0x0, ne  // ne = any
 1d8:	b.ne	1f4 <e2p_edit_mntopts+0x8c>  // b.any
 1dc:	ldrb	w3, [x20, #1]!
 1e0:	cbnz	w3, 1c4 <e2p_edit_mntopts+0x5c>
 1e4:	b	298 <e2p_edit_mntopts+0x130>
 1e8:	mov	x20, #0x0                   	// #0
 1ec:	mov	w26, w23
 1f0:	b	220 <e2p_edit_mntopts+0xb8>
 1f4:	cbz	w3, 2a0 <e2p_edit_mntopts+0x138>
 1f8:	strb	wzr, [x20]
 1fc:	ldrb	w0, [x19]
 200:	cmp	w0, #0x2d
 204:	b.eq	2a8 <e2p_edit_mntopts+0x140>  // b.none
 208:	cmp	w0, #0x5e
 20c:	b.eq	2b0 <e2p_edit_mntopts+0x148>  // b.none
 210:	mov	w26, w23
 214:	cmp	w0, #0x2b
 218:	b.ne	220 <e2p_edit_mntopts+0xb8>  // b.any
 21c:	add	x19, x19, #0x1
 220:	add	x1, sp, #0x5c
 224:	mov	x0, x19
 228:	bl	8c <e2p_string2mntopt>
 22c:	mov	w19, w0
 230:	cbnz	w0, 2c4 <e2p_edit_mntopts+0x15c>
 234:	cbz	w22, 244 <e2p_edit_mntopts+0xdc>
 238:	ldr	w0, [sp, #92]
 23c:	tst	w22, w0
 240:	b.eq	2cc <e2p_edit_mntopts+0x164>  // b.none
 244:	ldr	w1, [sp, #92]
 248:	tst	w1, #0x60
 24c:	b.eq	25c <e2p_edit_mntopts+0xf4>  // b.none
 250:	ldr	w0, [x21]
 254:	and	w0, w0, #0xffffff9f
 258:	str	w0, [x21]
 25c:	cbz	w26, 2b8 <e2p_edit_mntopts+0x150>
 260:	ldr	w0, [x21]
 264:	bic	w1, w0, w1
 268:	str	w1, [x21]
 26c:	cbz	x20, 2d8 <e2p_edit_mntopts+0x170>
 270:	add	x19, x20, #0x1
 274:	ldrb	w20, [x19]
 278:	cbz	w20, 2d4 <e2p_edit_mntopts+0x16c>
 27c:	bl	0 <__ctype_b_loc>
 280:	ldr	x1, [x0]
 284:	and	x20, x20, #0xff
 288:	ldrh	w0, [x1, x20, lsl #1]
 28c:	tbz	w0, #13, 1b8 <e2p_edit_mntopts+0x50>
 290:	ldrb	w20, [x19, #1]!
 294:	cbnz	w20, 284 <e2p_edit_mntopts+0x11c>
 298:	mov	x20, #0x0                   	// #0
 29c:	b	1fc <e2p_edit_mntopts+0x94>
 2a0:	mov	x20, #0x0                   	// #0
 2a4:	b	1fc <e2p_edit_mntopts+0x94>
 2a8:	mov	w26, w25
 2ac:	b	21c <e2p_edit_mntopts+0xb4>
 2b0:	mov	w26, w25
 2b4:	b	21c <e2p_edit_mntopts+0xb4>
 2b8:	ldr	w0, [x21]
 2bc:	orr	w1, w1, w0
 2c0:	b	268 <e2p_edit_mntopts+0x100>
 2c4:	mov	w19, #0x1                   	// #1
 2c8:	b	2d8 <e2p_edit_mntopts+0x170>
 2cc:	mov	w19, #0x1                   	// #1
 2d0:	b	2d8 <e2p_edit_mntopts+0x170>
 2d4:	mov	w19, #0x0                   	// #0
 2d8:	mov	x0, x24
 2dc:	bl	0 <free>
 2e0:	ldp	x23, x24, [sp, #48]
 2e4:	ldp	x25, x26, [sp, #64]
 2e8:	mov	w0, w19
 2ec:	ldp	x19, x20, [sp, #16]
 2f0:	ldp	x21, x22, [sp, #32]
 2f4:	ldp	x29, x30, [sp], #96
 2f8:	ret
 2fc:	mov	w19, #0x1                   	// #1
 300:	b	2e8 <e2p_edit_mntopts+0x180>

parse_num.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <parse_num_blocks2>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	w19, w1
  10:	mov	w2, #0x0                   	// #0
  14:	add	x1, sp, #0x28
  18:	bl	0 <strtoull>
  1c:	ldr	x1, [sp, #40]
  20:	ldrb	w2, [x1]
  24:	cbz	w2, c4 <parse_num_blocks2+0xc4>
  28:	ldrb	w1, [x1, #1]
  2c:	cbnz	w1, f0 <parse_num_blocks2+0xf0>
  30:	cmp	w2, #0x67
  34:	b.eq	88 <parse_num_blocks2+0x88>  // b.none
  38:	b.ls	58 <parse_num_blocks2+0x58>  // b.plast
  3c:	cmp	w2, #0x73
  40:	b.eq	d8 <parse_num_blocks2+0xd8>  // b.none
  44:	b.ls	a0 <parse_num_blocks2+0xa0>  // b.plast
  48:	cmp	w2, #0x74
  4c:	b.eq	6c <parse_num_blocks2+0x6c>  // b.none
  50:	mov	x0, #0x0                   	// #0
  54:	b	c4 <parse_num_blocks2+0xc4>
  58:	cmp	w2, #0x4d
  5c:	b.eq	b0 <parse_num_blocks2+0xb0>  // b.none
  60:	b.ls	74 <parse_num_blocks2+0x74>  // b.plast
  64:	cmp	w2, #0x54
  68:	b.ne	98 <parse_num_blocks2+0x98>  // b.any
  6c:	lsl	x0, x0, #10
  70:	b	88 <parse_num_blocks2+0x88>
  74:	cmp	w2, #0x4b
  78:	b.eq	b4 <parse_num_blocks2+0xb4>  // b.none
  7c:	b.hi	f8 <parse_num_blocks2+0xf8>  // b.pmore
  80:	cmp	w2, #0x47
  84:	b.ne	90 <parse_num_blocks2+0x90>  // b.any
  88:	lsl	x0, x0, #10
  8c:	b	b0 <parse_num_blocks2+0xb0>
  90:	mov	x0, #0x0                   	// #0
  94:	b	c4 <parse_num_blocks2+0xc4>
  98:	mov	x0, #0x0                   	// #0
  9c:	b	c4 <parse_num_blocks2+0xc4>
  a0:	cmp	w2, #0x6b
  a4:	b.eq	b4 <parse_num_blocks2+0xb4>  // b.none
  a8:	cmp	w2, #0x6d
  ac:	b.ne	d0 <parse_num_blocks2+0xd0>  // b.any
  b0:	lsl	x0, x0, #10
  b4:	lsl	x1, x0, #10
  b8:	lsr	x0, x0, x19
  bc:	cmp	w19, #0x0
  c0:	csel	x0, x0, x1, ge  // ge = tcont
  c4:	ldr	x19, [sp, #16]
  c8:	ldp	x29, x30, [sp], #48
  cc:	ret
  d0:	mov	x0, #0x0                   	// #0
  d4:	b	c4 <parse_num_blocks2+0xc4>
  d8:	lsl	x1, x0, #9
  dc:	add	w2, w19, #0x1
  e0:	lsr	x0, x0, x2
  e4:	cmp	w19, #0x0
  e8:	csel	x0, x0, x1, ge  // ge = tcont
  ec:	b	c4 <parse_num_blocks2+0xc4>
  f0:	mov	x0, #0x0                   	// #0
  f4:	b	c4 <parse_num_blocks2+0xc4>
  f8:	mov	x0, #0x0                   	// #0
  fc:	b	c4 <parse_num_blocks2+0xc4>

0000000000000100 <parse_num_blocks>:
 100:	stp	x29, x30, [sp, #-16]!
 104:	mov	x29, sp
 108:	bl	0 <parse_num_blocks2>
 10c:	ldp	x29, x30, [sp], #16
 110:	ret

pe.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <print_fs_errors>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	mov	x3, x0
   c:	and	w1, w1, #0xffff
  10:	cmp	w1, #0x2
  14:	b.eq	5c <print_fs_errors+0x5c>  // b.none
  18:	cmp	w1, #0x3
  1c:	b.eq	74 <print_fs_errors+0x74>  // b.none
  20:	cmp	w1, #0x1
  24:	b.eq	40 <print_fs_errors+0x40>  // b.none
  28:	mov	x2, #0x12                  	// #18
  2c:	mov	x1, #0x1                   	// #1
  30:	adrp	x0, 0 <print_fs_errors>
  34:	add	x0, x0, #0x0
  38:	bl	0 <fwrite>
  3c:	b	54 <print_fs_errors+0x54>
  40:	mov	x2, #0x8                   	// #8
  44:	mov	x1, #0x1                   	// #1
  48:	adrp	x0, 0 <print_fs_errors>
  4c:	add	x0, x0, #0x0
  50:	bl	0 <fwrite>
  54:	ldp	x29, x30, [sp], #16
  58:	ret
  5c:	mov	x2, #0x11                  	// #17
  60:	mov	x1, #0x1                   	// #1
  64:	adrp	x0, 0 <print_fs_errors>
  68:	add	x0, x0, #0x0
  6c:	bl	0 <fwrite>
  70:	b	54 <print_fs_errors+0x54>
  74:	mov	x2, #0x5                   	// #5
  78:	mov	x1, #0x1                   	// #1
  7c:	adrp	x0, 0 <print_fs_errors>
  80:	add	x0, x0, #0x0
  84:	bl	0 <fwrite>
  88:	b	54 <print_fs_errors+0x54>

pf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <print_flags>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	stp	x23, x24, [sp, #48]
  14:	mov	x22, x0
  18:	and	w20, w2, #0x1
  1c:	adrp	x0, 0 <print_flags>
  20:	ldr	x3, [x0]
  24:	cbz	x3, e0 <print_flags+0xe0>
  28:	stp	x25, x26, [sp, #64]
  2c:	str	x27, [sp, #80]
  30:	mov	x21, x1
  34:	mov	w23, #0x1                   	// #1
  38:	add	x19, x0, #0x0
  3c:	mov	w26, #0x2d                  	// #45
  40:	mov	w24, #0x0                   	// #0
  44:	adrp	x25, 0 <print_flags>
  48:	add	x25, x25, #0x0
  4c:	mov	x27, #0x2                   	// #2
  50:	b	6c <print_flags+0x6c>
  54:	mov	x1, x22
  58:	ldr	x0, [x19, #16]
  5c:	bl	0 <fputs>
  60:	mov	w23, w24
  64:	ldr	x3, [x19, #24]!
  68:	cbz	x3, b8 <print_flags+0xb8>
  6c:	tst	x21, x3
  70:	b.eq	a4 <print_flags+0xa4>  // b.none
  74:	cbz	w20, 94 <print_flags+0x94>
  78:	cbnz	w23, 54 <print_flags+0x54>
  7c:	mov	x3, x22
  80:	mov	x2, x27
  84:	mov	x1, #0x1                   	// #1
  88:	mov	x0, x25
  8c:	bl	0 <fwrite>
  90:	b	54 <print_flags+0x54>
  94:	mov	x1, x22
  98:	ldr	x0, [x19, #8]
  9c:	bl	0 <fputs>
  a0:	b	64 <print_flags+0x64>
  a4:	cbnz	w20, 64 <print_flags+0x64>
  a8:	mov	x1, x22
  ac:	mov	w0, w26
  b0:	bl	0 <fputc>
  b4:	b	64 <print_flags+0x64>
  b8:	ldp	x25, x26, [sp, #64]
  bc:	ldr	x27, [sp, #80]
  c0:	cmp	w20, #0x0
  c4:	ccmp	w23, #0x0, #0x4, ne  // ne = any
  c8:	b.ne	e8 <print_flags+0xe8>  // b.any
  cc:	ldp	x19, x20, [sp, #16]
  d0:	ldp	x21, x22, [sp, #32]
  d4:	ldp	x23, x24, [sp, #48]
  d8:	ldp	x29, x30, [sp], #96
  dc:	ret
  e0:	mov	w23, #0x1                   	// #1
  e4:	b	c0 <print_flags+0xc0>
  e8:	mov	x3, x22
  ec:	mov	x2, #0x3                   	// #3
  f0:	mov	x1, #0x1                   	// #1
  f4:	adrp	x0, 0 <print_flags>
  f8:	add	x0, x0, #0x0
  fc:	bl	0 <fwrite>
 100:	b	cc <print_flags+0xcc>

ps.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <print_fs_state>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	and	w20, w1, #0xffff
  14:	tst	w1, #0x1
  18:	b.eq	44 <print_fs_state+0x44>  // b.none
  1c:	mov	x3, x0
  20:	mov	x2, #0x6                   	// #6
  24:	mov	x1, #0x1                   	// #1
  28:	adrp	x0, 0 <print_fs_state>
  2c:	add	x0, x0, #0x0
  30:	bl	0 <fwrite>
  34:	tbnz	w20, #1, 60 <print_fs_state+0x60>
  38:	ldp	x19, x20, [sp, #16]
  3c:	ldp	x29, x30, [sp], #32
  40:	ret
  44:	mov	x3, x0
  48:	mov	x2, #0xa                   	// #10
  4c:	mov	x1, #0x1                   	// #1
  50:	adrp	x0, 0 <print_fs_state>
  54:	add	x0, x0, #0x0
  58:	bl	0 <fwrite>
  5c:	b	34 <print_fs_state+0x34>
  60:	mov	x3, x19
  64:	mov	x2, #0xc                   	// #12
  68:	mov	x1, #0x1                   	// #1
  6c:	adrp	x0, 0 <print_fs_state>
  70:	add	x0, x0, #0x0
  74:	bl	0 <fwrite>
  78:	b	38 <print_fs_state+0x38>

setflags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <setflags>:
   0:	stp	x29, x30, [sp, #-176]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	w19, w0
  10:	mov	x20, x1
  14:	add	x2, sp, #0x30
  18:	mov	w1, w0
  1c:	mov	w0, #0x0                   	// #0
  20:	bl	0 <__fxstat>
  24:	cbnz	w0, 3c <setflags+0x3c>
  28:	ldr	w0, [sp, #64]
  2c:	and	w0, w0, #0xf000
  30:	sub	w0, w0, #0x4, lsl #12
  34:	tst	w0, #0xffffbfff
  38:	b.ne	60 <setflags+0x60>  // b.any
  3c:	str	w20, [sp, #44]
  40:	add	x2, sp, #0x2c
  44:	mov	x1, #0x6602                	// #26114
  48:	movk	x1, #0x4008, lsl #16
  4c:	mov	w0, w19
  50:	bl	0 <ioctl>
  54:	ldp	x19, x20, [sp, #16]
  58:	ldp	x29, x30, [sp], #176
  5c:	ret
  60:	bl	0 <__errno_location>
  64:	mov	w1, #0x5f                  	// #95
  68:	str	w1, [x0]
  6c:	mov	w0, #0xffffffff            	// #-1
  70:	b	54 <setflags+0x54>

setversion.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <setversion>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	w1, [sp, #28]
   c:	add	x2, sp, #0x1c
  10:	mov	x1, #0x7602                	// #30210
  14:	movk	x1, #0x4008, lsl #16
  18:	bl	0 <ioctl>
  1c:	ldp	x29, x30, [sp], #32
  20:	ret

uuid.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_is_null_uuid>:
   0:	add	x2, x0, #0x10
   4:	ldrb	w1, [x0], #1
   8:	cbnz	w1, 1c <e2p_is_null_uuid+0x1c>
   c:	cmp	x0, x2
  10:	b.ne	4 <e2p_is_null_uuid+0x4>  // b.any
  14:	mov	w0, #0x1                   	// #1
  18:	ret
  1c:	mov	w0, #0x0                   	// #0
  20:	b	18 <e2p_is_null_uuid+0x18>

0000000000000024 <e2p_uuid_to_str>:
  24:	sub	sp, sp, #0x40
  28:	stp	x29, x30, [sp, #48]
  2c:	add	x29, sp, #0x30
  30:	mov	x5, x0
  34:	mov	x0, x1
  38:	ldrb	w1, [x5]
  3c:	ldrb	w2, [x5, #1]
  40:	orr	w1, w2, w1, lsl #8
  44:	ldrb	w2, [x5, #2]
  48:	orr	w1, w2, w1, lsl #8
  4c:	ldrb	w8, [x5, #4]
  50:	ldrb	w9, [x5, #6]
  54:	ldrb	w4, [x5, #7]
  58:	ldrb	w3, [x5, #5]
  5c:	ldrb	w2, [x5, #3]
  60:	ldrb	w6, [x5, #15]
  64:	str	w6, [sp, #32]
  68:	ldrb	w6, [x5, #14]
  6c:	str	w6, [sp, #24]
  70:	ldrb	w6, [x5, #13]
  74:	str	w6, [sp, #16]
  78:	ldrb	w6, [x5, #12]
  7c:	str	w6, [sp, #8]
  80:	ldrb	w6, [x5, #11]
  84:	str	w6, [sp]
  88:	ldrb	w7, [x5, #10]
  8c:	ldrb	w6, [x5, #9]
  90:	ldrb	w5, [x5, #8]
  94:	orr	w4, w4, w9, lsl #8
  98:	orr	w3, w3, w8, lsl #8
  9c:	orr	w2, w2, w1, lsl #8
  a0:	adrp	x1, 0 <e2p_is_null_uuid>
  a4:	add	x1, x1, #0x0
  a8:	bl	0 <sprintf>
  ac:	ldp	x29, x30, [sp, #48]
  b0:	add	sp, sp, #0x40
  b4:	ret

00000000000000b8 <e2p_uuid2str>:
  b8:	stp	x29, x30, [sp, #-32]!
  bc:	mov	x29, sp
  c0:	stp	x19, x20, [sp, #16]
  c4:	mov	x20, x0
  c8:	bl	0 <e2p_is_null_uuid>
  cc:	cbz	w0, e4 <e2p_uuid2str+0x2c>
  d0:	adrp	x0, 0 <e2p_is_null_uuid>
  d4:	add	x0, x0, #0x0
  d8:	ldp	x19, x20, [sp, #16]
  dc:	ldp	x29, x30, [sp], #32
  e0:	ret
  e4:	adrp	x19, 0 <e2p_is_null_uuid>
  e8:	add	x19, x19, #0x0
  ec:	mov	x1, x19
  f0:	mov	x0, x20
  f4:	bl	24 <e2p_uuid_to_str>
  f8:	mov	x0, x19
  fc:	b	d8 <e2p_uuid2str+0x20>

ostype.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_os2string>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	cmp	w0, #0x4
  10:	b.hi	50 <e2p_os2string+0x50>  // b.pmore
  14:	adrp	x1, 0 <e2p_os2string>
  18:	add	x1, x1, #0x0
  1c:	ldr	x20, [x1, w0, sxtw #3]
  20:	mov	x0, x20
  24:	bl	0 <strlen>
  28:	add	x0, x0, #0x1
  2c:	bl	0 <malloc>
  30:	mov	x19, x0
  34:	cbz	x0, 40 <e2p_os2string+0x40>
  38:	mov	x1, x20
  3c:	bl	0 <strcpy>
  40:	mov	x0, x19
  44:	ldp	x19, x20, [sp, #16]
  48:	ldp	x29, x30, [sp], #32
  4c:	ret
  50:	adrp	x20, 0 <e2p_os2string>
  54:	add	x20, x20, #0x0
  58:	b	20 <e2p_os2string+0x20>

000000000000005c <e2p_string2os>:
  5c:	stp	x29, x30, [sp, #-48]!
  60:	mov	x29, sp
  64:	stp	x19, x20, [sp, #16]
  68:	stp	x21, x22, [sp, #32]
  6c:	mov	x20, x0
  70:	adrp	x0, 0 <e2p_os2string>
  74:	ldr	x1, [x0]
  78:	cbz	x1, b8 <e2p_string2os+0x5c>
  7c:	mov	x19, #0x0                   	// #0
  80:	add	x21, x0, #0x0
  84:	mov	w22, w19
  88:	mov	x0, x20
  8c:	bl	0 <strcasecmp>
  90:	cbz	w0, a4 <e2p_string2os+0x48>
  94:	add	x19, x19, #0x1
  98:	ldr	x1, [x21, x19, lsl #3]
  9c:	cbnz	x1, 84 <e2p_string2os+0x28>
  a0:	mov	w22, #0xffffffff            	// #-1
  a4:	mov	w0, w22
  a8:	ldp	x19, x20, [sp, #16]
  ac:	ldp	x21, x22, [sp, #32]
  b0:	ldp	x29, x30, [sp], #48
  b4:	ret
  b8:	mov	w22, #0xffffffff            	// #-1
  bc:	b	a4 <e2p_string2os+0x48>

percent.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_percent>:
   0:	cbz	w0, 58 <e2p_percent+0x58>
   4:	mov	w3, #0x64                  	// #100
   8:	sdiv	w2, w3, w0
   c:	msub	w2, w2, w0, w3
  10:	cbz	w2, 34 <e2p_percent+0x34>
  14:	tst	w1, #0xff000000
  18:	b.ne	40 <e2p_percent+0x40>  // b.any
  1c:	mul	w0, w0, w1
  20:	mov	w1, #0x851f                	// #34079
  24:	movk	w1, #0x51eb, lsl #16
  28:	umull	x0, w0, w1
  2c:	lsr	x0, x0, #37
  30:	b	5c <e2p_percent+0x5c>
  34:	sdiv	w0, w3, w0
  38:	udiv	w0, w1, w0
  3c:	b	5c <e2p_percent+0x5c>
  40:	mov	w2, #0x851f                	// #34079
  44:	movk	w2, #0x51eb, lsl #16
  48:	umull	x1, w1, w2
  4c:	lsr	x1, x1, #37
  50:	mul	w0, w1, w0
  54:	b	5c <e2p_percent+0x5c>
  58:	mov	w0, #0x0                   	// #0
  5c:	ret

crypto_mode.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_encmode2string>:
   0:	mov	w2, w0
   4:	adrp	x0, 0 <e2p_encmode2string>
   8:	ldr	x0, [x0]
   c:	cbz	x0, 30 <e2p_encmode2string+0x30>
  10:	adrp	x1, 0 <e2p_encmode2string>
  14:	add	x1, x1, #0x0
  18:	ldr	w3, [x1]
  1c:	cmp	w3, w2
  20:	b.eq	64 <e2p_encmode2string+0x64>  // b.none
  24:	add	x1, x1, #0x10
  28:	ldr	x0, [x1, #8]
  2c:	cbnz	x0, 18 <e2p_encmode2string+0x18>
  30:	stp	x29, x30, [sp, #-32]!
  34:	mov	x29, sp
  38:	str	x19, [sp, #16]
  3c:	adrp	x19, 0 <e2p_encmode2string>
  40:	add	x19, x19, #0x0
  44:	adrp	x1, 0 <e2p_encmode2string>
  48:	add	x1, x1, #0x0
  4c:	mov	x0, x19
  50:	bl	0 <sprintf>
  54:	mov	x0, x19
  58:	ldr	x19, [sp, #16]
  5c:	ldp	x29, x30, [sp], #32
  60:	ret
  64:	ret

0000000000000068 <e2p_string2encmode>:
  68:	stp	x29, x30, [sp, #-48]!
  6c:	mov	x29, sp
  70:	stp	x19, x20, [sp, #16]
  74:	mov	x20, x0
  78:	adrp	x0, 0 <e2p_encmode2string>
  7c:	ldr	x1, [x0]
  80:	cbz	x1, a4 <e2p_string2encmode+0x3c>
  84:	adrp	x19, 0 <e2p_encmode2string>
  88:	add	x19, x19, #0x0
  8c:	mov	x0, x20
  90:	bl	0 <strcasecmp>
  94:	cbz	w0, f8 <e2p_string2encmode+0x90>
  98:	add	x19, x19, #0x10
  9c:	ldr	x1, [x19, #8]
  a0:	cbnz	x1, 8c <e2p_string2encmode+0x24>
  a4:	mov	x2, #0x9                   	// #9
  a8:	adrp	x1, 0 <e2p_encmode2string>
  ac:	add	x1, x1, #0x0
  b0:	mov	x0, x20
  b4:	bl	0 <strncasecmp>
  b8:	cbnz	w0, 100 <e2p_string2encmode+0x98>
  bc:	ldrb	w0, [x20, #9]
  c0:	cbz	w0, 108 <e2p_string2encmode+0xa0>
  c4:	mov	w2, #0xa                   	// #10
  c8:	add	x1, sp, #0x28
  cc:	add	x0, x20, #0x9
  d0:	bl	0 <strtol>
  d4:	cmp	w0, #0xff
  d8:	b.hi	110 <e2p_string2encmode+0xa8>  // b.pmore
  dc:	ldr	x1, [sp, #40]
  e0:	ldrb	w1, [x1]
  e4:	cmp	w1, #0x0
  e8:	csinv	w0, w0, wzr, eq  // eq = none
  ec:	ldp	x19, x20, [sp, #16]
  f0:	ldp	x29, x30, [sp], #48
  f4:	ret
  f8:	ldr	w0, [x19]
  fc:	b	ec <e2p_string2encmode+0x84>
 100:	mov	w0, #0xffffffff            	// #-1
 104:	b	ec <e2p_string2encmode+0x84>
 108:	mov	w0, #0xffffffff            	// #-1
 10c:	b	ec <e2p_string2encmode+0x84>
 110:	mov	w0, #0xffffffff            	// #-1
 114:	b	ec <e2p_string2encmode+0x84>

fgetproject.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fgetproject>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	mov	x21, x1
  14:	mov	w1, #0x800                 	// #2048
  18:	bl	0 <open>
  1c:	mov	w19, w0
  20:	cmn	w0, #0x1
  24:	b.eq	78 <fgetproject+0x78>  // b.none
  28:	add	x2, sp, #0x30
  2c:	mov	x1, #0x581f                	// #22559
  30:	movk	x1, #0x801c, lsl #16
  34:	bl	0 <ioctl>
  38:	mov	w20, w0
  3c:	cbnz	w0, 48 <fgetproject+0x48>
  40:	ldr	w0, [sp, #60]
  44:	str	x0, [x21]
  48:	bl	0 <__errno_location>
  4c:	mov	x21, x0
  50:	ldr	w22, [x0]
  54:	mov	w0, w19
  58:	bl	0 <close>
  5c:	cbz	w22, 64 <fgetproject+0x64>
  60:	str	w22, [x21]
  64:	mov	w0, w20
  68:	ldp	x19, x20, [sp, #16]
  6c:	ldp	x21, x22, [sp, #32]
  70:	ldp	x29, x30, [sp], #80
  74:	ret
  78:	mov	w20, w0
  7c:	b	64 <fgetproject+0x64>

fsetproject.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fsetproject>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x1
  10:	mov	w1, #0x800                 	// #2048
  14:	bl	0 <open>
  18:	mov	w19, w0
  1c:	cmn	w0, #0x1
  20:	b.eq	a8 <fsetproject+0xa8>  // b.none
  24:	add	x2, sp, #0x20
  28:	mov	x1, #0x581f                	// #22559
  2c:	movk	x1, #0x801c, lsl #16
  30:	bl	0 <ioctl>
  34:	cmn	w0, #0x1
  38:	b.eq	6c <fsetproject+0x6c>  // b.none
  3c:	str	w20, [sp, #44]
  40:	add	x2, sp, #0x20
  44:	mov	x1, #0x5820                	// #22560
  48:	movk	x1, #0x401c, lsl #16
  4c:	mov	w0, w19
  50:	bl	0 <ioctl>
  54:	mov	w20, w0
  58:	cmn	w0, #0x1
  5c:	b.eq	9c <fsetproject+0x9c>  // b.none
  60:	mov	w0, w19
  64:	bl	0 <close>
  68:	b	8c <fsetproject+0x8c>
  6c:	bl	0 <__errno_location>
  70:	ldr	w20, [x0]
  74:	mov	w0, w19
  78:	bl	0 <close>
  7c:	cbz	w20, b0 <fsetproject+0xb0>
  80:	bl	0 <__errno_location>
  84:	str	w20, [x0]
  88:	mov	w20, #0xffffffff            	// #-1
  8c:	mov	w0, w20
  90:	ldp	x19, x20, [sp, #16]
  94:	ldp	x29, x30, [sp], #64
  98:	ret
  9c:	bl	0 <__errno_location>
  a0:	ldr	w20, [x0]
  a4:	b	74 <fsetproject+0x74>
  a8:	mov	w20, w0
  ac:	b	8c <fsetproject+0x8c>
  b0:	mov	w20, #0xffffffff            	// #-1
  b4:	b	8c <fsetproject+0x8c>

encoding.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_str2encoding>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	adrp	x1, 0 <e2p_str2encoding>
  14:	add	x1, x1, #0x0
  18:	bl	0 <strcmp>
  1c:	cbz	w0, 50 <e2p_str2encoding+0x50>
  20:	adrp	x1, 0 <e2p_str2encoding>
  24:	add	x1, x1, #0x0
  28:	mov	x0, x19
  2c:	bl	0 <strcmp>
  30:	mov	w1, w0
  34:	mov	w0, #0xffffffea            	// #-22
  38:	cbz	w1, 48 <e2p_str2encoding+0x48>
  3c:	ldr	x19, [sp, #16]
  40:	ldp	x29, x30, [sp], #32
  44:	ret
  48:	mov	w0, #0x1                   	// #1
  4c:	b	54 <e2p_str2encoding+0x54>
  50:	mov	w0, #0x0                   	// #0
  54:	mov	w0, w0
  58:	adrp	x1, 0 <e2p_str2encoding>
  5c:	add	x1, x1, #0x0
  60:	add	x0, x1, x0, lsl #4
  64:	ldrh	w0, [x0, #8]
  68:	b	3c <e2p_str2encoding+0x3c>

000000000000006c <e2p_encoding2str>:
  6c:	cmp	w0, #0x1
  70:	b.eq	ac <e2p_encoding2str+0x40>  // b.none
  74:	stp	x29, x30, [sp, #-32]!
  78:	mov	x29, sp
  7c:	str	x19, [sp, #16]
  80:	mov	w2, w0
  84:	adrp	x19, 0 <e2p_str2encoding>
  88:	add	x19, x19, #0x0
  8c:	adrp	x1, 0 <e2p_str2encoding>
  90:	add	x1, x1, #0x0
  94:	mov	x0, x19
  98:	bl	0 <sprintf>
  9c:	mov	x0, x19
  a0:	ldr	x19, [sp, #16]
  a4:	ldp	x29, x30, [sp], #32
  a8:	ret
  ac:	adrp	x0, 0 <e2p_str2encoding>
  b0:	add	x0, x0, #0x0
  b4:	ret

00000000000000b8 <e2p_get_encoding_flags>:
  b8:	mov	w0, #0x0                   	// #0
  bc:	ret

00000000000000c0 <e2p_str2encoding_flags>:
  c0:	stp	x29, x30, [sp, #-64]!
  c4:	mov	x29, sp
  c8:	stp	x19, x20, [sp, #16]
  cc:	stp	x21, x22, [sp, #32]
  d0:	mov	w20, w0
  d4:	mov	x0, x1
  d8:	mov	x22, x2
  dc:	adrp	x1, 0 <e2p_str2encoding>
  e0:	add	x1, x1, #0x0
  e4:	bl	0 <strtok>
  e8:	cmp	w20, #0x1
  ec:	b.ne	184 <e2p_str2encoding_flags+0xc4>  // b.any
  f0:	mov	x19, x0
  f4:	cbz	x0, 17c <e2p_str2encoding_flags+0xbc>
  f8:	str	x23, [sp, #48]
  fc:	adrp	x20, 0 <e2p_str2encoding>
 100:	add	x20, x20, #0x0
 104:	adrp	x21, 0 <e2p_str2encoding>
 108:	add	x21, x21, #0x0
 10c:	adrp	x0, 0 <e2p_str2encoding>
 110:	add	x23, x0, #0x0
 114:	mov	x2, #0x2                   	// #2
 118:	mov	x1, x19
 11c:	mov	x0, x20
 120:	bl	0 <strncmp>
 124:	cbnz	w0, 18c <e2p_str2encoding_flags+0xcc>
 128:	add	x1, x19, #0x2
 12c:	mov	x0, x21
 130:	bl	0 <strcmp>
 134:	cbz	w0, 144 <e2p_str2encoding_flags+0x84>
 138:	mov	w0, #0xffffffea            	// #-22
 13c:	ldr	x23, [sp, #48]
 140:	b	1a4 <e2p_str2encoding_flags+0xe4>
 144:	ldrh	w0, [x22]
 148:	and	w0, w0, #0xfffe
 14c:	strh	w0, [x22]
 150:	mov	x1, x23
 154:	mov	x0, #0x0                   	// #0
 158:	bl	0 <strtok>
 15c:	mov	x19, x0
 160:	cbnz	x0, 114 <e2p_str2encoding_flags+0x54>
 164:	mov	w0, #0x0                   	// #0
 168:	ldr	x23, [sp, #48]
 16c:	b	1a4 <e2p_str2encoding_flags+0xe4>
 170:	ldrh	w0, [x22]
 174:	orr	w0, w0, #0x1
 178:	b	14c <e2p_str2encoding_flags+0x8c>
 17c:	mov	w0, #0x0                   	// #0
 180:	b	1a4 <e2p_str2encoding_flags+0xe4>
 184:	mov	w0, #0xffffffea            	// #-22
 188:	b	1a4 <e2p_str2encoding_flags+0xe4>
 18c:	mov	x1, x19
 190:	mov	x0, x21
 194:	bl	0 <strcmp>
 198:	cbz	w0, 170 <e2p_str2encoding_flags+0xb0>
 19c:	mov	w0, #0xffffffea            	// #-22
 1a0:	ldr	x23, [sp, #48]
 1a4:	ldp	x19, x20, [sp, #16]
 1a8:	ldp	x21, x22, [sp, #32]
 1ac:	ldp	x29, x30, [sp], #64
 1b0:	ret
