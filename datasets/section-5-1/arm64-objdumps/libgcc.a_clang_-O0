In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libgcc.a_clang_-O0:

_muldi3.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__multi3>:
   0:	sub	sp, sp, #0xa0
   4:	stp	x0, x1, [sp, #16]
   8:	stp	x2, x3, [sp]
   c:	ldp	x0, x1, [sp, #16]
  10:	stp	x0, x1, [sp, #80]
  14:	ldp	x0, x1, [sp]
  18:	stp	x0, x1, [sp, #64]
  1c:	ldr	x0, [sp, #80]
  20:	and	x0, x0, #0xffffffff
  24:	str	x0, [sp, #144]
  28:	ldr	x0, [sp, #80]
  2c:	lsr	x0, x0, #32
  30:	str	x0, [sp, #136]
  34:	ldr	x0, [sp, #64]
  38:	and	x0, x0, #0xffffffff
  3c:	str	x0, [sp, #128]
  40:	ldr	x0, [sp, #64]
  44:	lsr	x0, x0, #32
  48:	str	x0, [sp, #120]
  4c:	ldr	x1, [sp, #144]
  50:	ldr	x0, [sp, #128]
  54:	mul	x0, x1, x0
  58:	str	x0, [sp, #112]
  5c:	ldr	x1, [sp, #144]
  60:	ldr	x0, [sp, #120]
  64:	mul	x0, x1, x0
  68:	str	x0, [sp, #104]
  6c:	ldr	x1, [sp, #136]
  70:	ldr	x0, [sp, #128]
  74:	mul	x0, x1, x0
  78:	str	x0, [sp, #96]
  7c:	ldr	x1, [sp, #136]
  80:	ldr	x0, [sp, #120]
  84:	mul	x0, x1, x0
  88:	str	x0, [sp, #152]
  8c:	ldr	x0, [sp, #112]
  90:	lsr	x0, x0, #32
  94:	ldr	x1, [sp, #104]
  98:	add	x0, x1, x0
  9c:	str	x0, [sp, #104]
  a0:	ldr	x1, [sp, #104]
  a4:	ldr	x0, [sp, #96]
  a8:	add	x0, x1, x0
  ac:	str	x0, [sp, #104]
  b0:	ldr	x1, [sp, #104]
  b4:	ldr	x0, [sp, #96]
  b8:	cmp	x1, x0
  bc:	b.cs	d0 <__multi3+0xd0>  // b.hs, b.nlast
  c0:	ldr	x1, [sp, #152]
  c4:	mov	x0, #0x100000000           	// #4294967296
  c8:	add	x0, x1, x0
  cc:	str	x0, [sp, #152]
  d0:	ldr	x0, [sp, #104]
  d4:	lsr	x1, x0, #32
  d8:	ldr	x0, [sp, #152]
  dc:	add	x0, x1, x0
  e0:	str	x0, [sp, #40]
  e4:	ldr	x0, [sp, #104]
  e8:	and	x0, x0, #0xffffffff
  ec:	lsl	x1, x0, #32
  f0:	ldr	x0, [sp, #112]
  f4:	and	x0, x0, #0xffffffff
  f8:	add	x0, x1, x0
  fc:	str	x0, [sp, #32]
 100:	ldp	x0, x1, [sp, #32]
 104:	stp	x0, x1, [sp, #48]
 108:	ldr	x0, [sp, #56]
 10c:	mov	x2, x0
 110:	ldr	x0, [sp, #80]
 114:	mov	x1, x0
 118:	ldr	x0, [sp, #72]
 11c:	mul	x1, x1, x0
 120:	ldr	x0, [sp, #88]
 124:	mov	x3, x0
 128:	ldr	x0, [sp, #64]
 12c:	mul	x0, x3, x0
 130:	add	x0, x1, x0
 134:	add	x0, x2, x0
 138:	str	x0, [sp, #56]
 13c:	ldp	x0, x1, [sp, #48]
 140:	add	sp, sp, #0xa0
 144:	ret

_negdi2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__negti2>:
   0:	sub	sp, sp, #0x30
   4:	stp	x0, x1, [sp]
   8:	ldp	x0, x1, [sp]
   c:	stp	x0, x1, [sp, #32]
  10:	ldr	x0, [sp, #32]
  14:	neg	x0, x0
  18:	str	x0, [sp, #16]
  1c:	ldr	x0, [sp, #40]
  20:	neg	x1, x0
  24:	ldr	x0, [sp, #32]
  28:	cmp	x0, #0x0
  2c:	cset	w0, ne  // ne = any
  30:	and	w0, w0, #0xff
  34:	and	x0, x0, #0xff
  38:	sub	x0, x1, x0
  3c:	str	x0, [sp, #24]
  40:	ldp	x0, x1, [sp, #16]
  44:	add	sp, sp, #0x30
  48:	ret

_lshrdi3.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__lshrti3>:
   0:	sub	sp, sp, #0x50
   4:	stp	x0, x1, [sp, #16]
   8:	str	x2, [sp, #8]
   c:	ldr	x0, [sp, #8]
  10:	cmp	x0, #0x0
  14:	b.ne	20 <__lshrti3+0x20>  // b.any
  18:	ldp	x0, x1, [sp, #16]
  1c:	b	ac <__lshrti3+0xac>
  20:	ldp	x0, x1, [sp, #16]
  24:	stp	x0, x1, [sp, #48]
  28:	mov	x1, #0x40                  	// #64
  2c:	ldr	x0, [sp, #8]
  30:	sub	x0, x1, x0
  34:	str	x0, [sp, #72]
  38:	ldr	x0, [sp, #72]
  3c:	cmp	x0, #0x0
  40:	b.gt	64 <__lshrti3+0x64>
  44:	str	xzr, [sp, #40]
  48:	ldr	x0, [sp, #56]
  4c:	mov	x1, x0
  50:	ldr	x0, [sp, #72]
  54:	neg	w0, w0
  58:	lsr	x0, x1, x0
  5c:	str	x0, [sp, #32]
  60:	b	a8 <__lshrti3+0xa8>
  64:	ldr	x0, [sp, #56]
  68:	mov	x1, x0
  6c:	ldr	x0, [sp, #72]
  70:	lsl	x0, x1, x0
  74:	str	x0, [sp, #64]
  78:	ldr	x0, [sp, #56]
  7c:	mov	x1, x0
  80:	ldr	x0, [sp, #8]
  84:	lsr	x0, x1, x0
  88:	str	x0, [sp, #40]
  8c:	ldr	x0, [sp, #48]
  90:	mov	x1, x0
  94:	ldr	x0, [sp, #8]
  98:	lsr	x1, x1, x0
  9c:	ldr	x0, [sp, #64]
  a0:	orr	x0, x1, x0
  a4:	str	x0, [sp, #32]
  a8:	ldp	x0, x1, [sp, #32]
  ac:	add	sp, sp, #0x50
  b0:	ret

_ashldi3.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__ashlti3>:
   0:	sub	sp, sp, #0x50
   4:	stp	x0, x1, [sp, #16]
   8:	str	x2, [sp, #8]
   c:	ldr	x0, [sp, #8]
  10:	cmp	x0, #0x0
  14:	b.ne	20 <__ashlti3+0x20>  // b.any
  18:	ldp	x0, x1, [sp, #16]
  1c:	b	ac <__ashlti3+0xac>
  20:	ldp	x0, x1, [sp, #16]
  24:	stp	x0, x1, [sp, #48]
  28:	mov	x1, #0x40                  	// #64
  2c:	ldr	x0, [sp, #8]
  30:	sub	x0, x1, x0
  34:	str	x0, [sp, #72]
  38:	ldr	x0, [sp, #72]
  3c:	cmp	x0, #0x0
  40:	b.gt	64 <__ashlti3+0x64>
  44:	str	xzr, [sp, #32]
  48:	ldr	x0, [sp, #48]
  4c:	mov	x1, x0
  50:	ldr	x0, [sp, #72]
  54:	neg	w0, w0
  58:	lsl	x0, x1, x0
  5c:	str	x0, [sp, #40]
  60:	b	a8 <__ashlti3+0xa8>
  64:	ldr	x0, [sp, #48]
  68:	mov	x1, x0
  6c:	ldr	x0, [sp, #72]
  70:	lsr	x0, x1, x0
  74:	str	x0, [sp, #64]
  78:	ldr	x0, [sp, #48]
  7c:	mov	x1, x0
  80:	ldr	x0, [sp, #8]
  84:	lsl	x0, x1, x0
  88:	str	x0, [sp, #32]
  8c:	ldr	x0, [sp, #56]
  90:	mov	x1, x0
  94:	ldr	x0, [sp, #8]
  98:	lsl	x1, x1, x0
  9c:	ldr	x0, [sp, #64]
  a0:	orr	x0, x1, x0
  a4:	str	x0, [sp, #40]
  a8:	ldp	x0, x1, [sp, #32]
  ac:	add	sp, sp, #0x50
  b0:	ret

_ashrdi3.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__ashrti3>:
   0:	sub	sp, sp, #0x50
   4:	stp	x0, x1, [sp, #16]
   8:	str	x2, [sp, #8]
   c:	ldr	x0, [sp, #8]
  10:	cmp	x0, #0x0
  14:	b.ne	20 <__ashrti3+0x20>  // b.any
  18:	ldp	x0, x1, [sp, #16]
  1c:	b	ac <__ashrti3+0xac>
  20:	ldp	x0, x1, [sp, #16]
  24:	stp	x0, x1, [sp, #48]
  28:	mov	x1, #0x40                  	// #64
  2c:	ldr	x0, [sp, #8]
  30:	sub	x0, x1, x0
  34:	str	x0, [sp, #72]
  38:	ldr	x0, [sp, #72]
  3c:	cmp	x0, #0x0
  40:	b.gt	68 <__ashrti3+0x68>
  44:	ldr	x0, [sp, #56]
  48:	asr	x0, x0, #63
  4c:	str	x0, [sp, #40]
  50:	ldr	x1, [sp, #56]
  54:	ldr	x0, [sp, #72]
  58:	neg	w0, w0
  5c:	asr	x0, x1, x0
  60:	str	x0, [sp, #32]
  64:	b	a8 <__ashrti3+0xa8>
  68:	ldr	x0, [sp, #56]
  6c:	mov	x1, x0
  70:	ldr	x0, [sp, #72]
  74:	lsl	x0, x1, x0
  78:	str	x0, [sp, #64]
  7c:	ldr	x0, [sp, #56]
  80:	ldr	x1, [sp, #8]
  84:	asr	x0, x0, x1
  88:	str	x0, [sp, #40]
  8c:	ldr	x0, [sp, #48]
  90:	mov	x1, x0
  94:	ldr	x0, [sp, #8]
  98:	lsr	x1, x1, x0
  9c:	ldr	x0, [sp, #64]
  a0:	orr	x0, x1, x0
  a4:	str	x0, [sp, #32]
  a8:	ldp	x0, x1, [sp, #32]
  ac:	add	sp, sp, #0x50
  b0:	ret

_cmpdi2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__cmpti2>:
   0:	sub	sp, sp, #0x40
   4:	stp	x0, x1, [sp, #16]
   8:	stp	x2, x3, [sp]
   c:	ldp	x0, x1, [sp, #16]
  10:	stp	x0, x1, [sp, #48]
  14:	ldp	x0, x1, [sp]
  18:	stp	x0, x1, [sp, #32]
  1c:	ldr	x1, [sp, #56]
  20:	ldr	x0, [sp, #40]
  24:	cmp	x1, x0
  28:	b.ge	34 <__cmpti2+0x34>  // b.tcont
  2c:	mov	w0, #0x0                   	// #0
  30:	b	88 <__cmpti2+0x88>
  34:	ldr	x1, [sp, #56]
  38:	ldr	x0, [sp, #40]
  3c:	cmp	x1, x0
  40:	b.le	4c <__cmpti2+0x4c>
  44:	mov	w0, #0x2                   	// #2
  48:	b	88 <__cmpti2+0x88>
  4c:	ldr	x0, [sp, #48]
  50:	mov	x1, x0
  54:	ldr	x0, [sp, #32]
  58:	cmp	x1, x0
  5c:	b.cs	68 <__cmpti2+0x68>  // b.hs, b.nlast
  60:	mov	w0, #0x0                   	// #0
  64:	b	88 <__cmpti2+0x88>
  68:	ldr	x0, [sp, #48]
  6c:	mov	x1, x0
  70:	ldr	x0, [sp, #32]
  74:	cmp	x1, x0
  78:	b.ls	84 <__cmpti2+0x84>  // b.plast
  7c:	mov	w0, #0x2                   	// #2
  80:	b	88 <__cmpti2+0x88>
  84:	mov	w0, #0x1                   	// #1
  88:	add	sp, sp, #0x40
  8c:	ret

_ucmpdi2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__ucmpti2>:
   0:	sub	sp, sp, #0x40
   4:	stp	x0, x1, [sp, #16]
   8:	stp	x2, x3, [sp]
   c:	ldp	x0, x1, [sp, #16]
  10:	stp	x0, x1, [sp, #48]
  14:	ldp	x0, x1, [sp]
  18:	stp	x0, x1, [sp, #32]
  1c:	ldr	x0, [sp, #56]
  20:	mov	x1, x0
  24:	ldr	x0, [sp, #40]
  28:	cmp	x1, x0
  2c:	b.cs	38 <__ucmpti2+0x38>  // b.hs, b.nlast
  30:	mov	w0, #0x0                   	// #0
  34:	b	90 <__ucmpti2+0x90>
  38:	ldr	x0, [sp, #56]
  3c:	mov	x1, x0
  40:	ldr	x0, [sp, #40]
  44:	cmp	x1, x0
  48:	b.ls	54 <__ucmpti2+0x54>  // b.plast
  4c:	mov	w0, #0x2                   	// #2
  50:	b	90 <__ucmpti2+0x90>
  54:	ldr	x0, [sp, #48]
  58:	mov	x1, x0
  5c:	ldr	x0, [sp, #32]
  60:	cmp	x1, x0
  64:	b.cs	70 <__ucmpti2+0x70>  // b.hs, b.nlast
  68:	mov	w0, #0x0                   	// #0
  6c:	b	90 <__ucmpti2+0x90>
  70:	ldr	x0, [sp, #48]
  74:	mov	x1, x0
  78:	ldr	x0, [sp, #32]
  7c:	cmp	x1, x0
  80:	b.ls	8c <__ucmpti2+0x8c>  // b.plast
  84:	mov	w0, #0x2                   	// #2
  88:	b	90 <__ucmpti2+0x90>
  8c:	mov	w0, #0x1                   	// #1
  90:	add	sp, sp, #0x40
  94:	ret

_clear_cache.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__clear_cache>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x1, [sp, #16]
  14:	ldr	x0, [sp, #24]
  18:	bl	0 <__aarch64_sync_cache_range>
  1c:	nop
  20:	ldp	x29, x30, [sp], #32
  24:	ret

_trampoline.o:     file format elf64-littleaarch64


__main.o:     file format elf64-littleaarch64


_absvsi2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__absvdi2>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	str	x0, [sp, #40]
  14:	ldr	x0, [sp, #24]
  18:	cmp	x0, #0x0
  1c:	b.ge	2c <__absvdi2+0x2c>  // b.tcont
  20:	ldr	x0, [sp, #24]
  24:	neg	x0, x0
  28:	str	x0, [sp, #40]
  2c:	ldr	x0, [sp, #40]
  30:	cmp	x0, #0x0
  34:	b.ge	3c <__absvdi2+0x3c>  // b.tcont
  38:	bl	0 <abort>
  3c:	ldr	x0, [sp, #40]
  40:	ldp	x29, x30, [sp], #48
  44:	ret

0000000000000048 <__absvsi2>:
  48:	stp	x29, x30, [sp, #-48]!
  4c:	mov	x29, sp
  50:	str	w0, [sp, #28]
  54:	ldr	w0, [sp, #28]
  58:	str	w0, [sp, #44]
  5c:	ldr	w0, [sp, #28]
  60:	cmp	w0, #0x0
  64:	b.ge	74 <__absvsi2+0x2c>  // b.tcont
  68:	ldr	w0, [sp, #28]
  6c:	neg	w0, w0
  70:	str	w0, [sp, #44]
  74:	ldr	w0, [sp, #44]
  78:	cmp	w0, #0x0
  7c:	b.ge	84 <__absvsi2+0x3c>  // b.tcont
  80:	bl	0 <abort>
  84:	ldr	w0, [sp, #44]
  88:	ldp	x29, x30, [sp], #48
  8c:	ret

_absvdi2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__absvti2>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x0, x1, [sp, #16]
   c:	ldp	x0, x1, [sp, #16]
  10:	stp	x0, x1, [sp, #32]
  14:	ldr	x0, [sp, #24]
  18:	cmp	x0, #0x0
  1c:	b.ge	38 <__absvti2+0x38>  // b.tcont
  20:	ldp	x0, x1, [sp, #16]
  24:	negs	x4, x0
  28:	ngc	x0, x1
  2c:	mov	x2, x4
  30:	mov	x3, x0
  34:	stp	x2, x3, [sp, #32]
  38:	ldr	x0, [sp, #40]
  3c:	cmp	x0, #0x0
  40:	b.ge	48 <__absvti2+0x48>  // b.tcont
  44:	bl	0 <abort>
  48:	ldp	x0, x1, [sp, #32]
  4c:	ldp	x29, x30, [sp], #48
  50:	ret

_addvsi3.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__addvdi3>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x1, [sp, #24]
  14:	ldr	x0, [sp, #16]
  18:	add	x0, x1, x0
  1c:	str	x0, [sp, #40]
  20:	ldr	x0, [sp, #16]
  24:	cmp	x0, #0x0
  28:	b.lt	44 <__addvdi3+0x44>  // b.tstop
  2c:	ldr	x1, [sp, #40]
  30:	ldr	x0, [sp, #24]
  34:	cmp	x1, x0
  38:	cset	w0, lt  // lt = tstop
  3c:	and	w0, w0, #0xff
  40:	b	58 <__addvdi3+0x58>
  44:	ldr	x1, [sp, #40]
  48:	ldr	x0, [sp, #24]
  4c:	cmp	x1, x0
  50:	cset	w0, gt
  54:	and	w0, w0, #0xff
  58:	cmp	w0, #0x0
  5c:	b.eq	64 <__addvdi3+0x64>  // b.none
  60:	bl	0 <abort>
  64:	ldr	x0, [sp, #40]
  68:	ldp	x29, x30, [sp], #48
  6c:	ret

0000000000000070 <__addvsi3>:
  70:	stp	x29, x30, [sp, #-48]!
  74:	mov	x29, sp
  78:	str	w0, [sp, #28]
  7c:	str	w1, [sp, #24]
  80:	ldr	w1, [sp, #28]
  84:	ldr	w0, [sp, #24]
  88:	add	w0, w1, w0
  8c:	str	w0, [sp, #44]
  90:	ldr	w0, [sp, #24]
  94:	cmp	w0, #0x0
  98:	b.lt	b4 <__addvsi3+0x44>  // b.tstop
  9c:	ldr	w1, [sp, #44]
  a0:	ldr	w0, [sp, #28]
  a4:	cmp	w1, w0
  a8:	cset	w0, lt  // lt = tstop
  ac:	and	w0, w0, #0xff
  b0:	b	c8 <__addvsi3+0x58>
  b4:	ldr	w1, [sp, #44]
  b8:	ldr	w0, [sp, #28]
  bc:	cmp	w1, w0
  c0:	cset	w0, gt
  c4:	and	w0, w0, #0xff
  c8:	cmp	w0, #0x0
  cc:	b.eq	d4 <__addvsi3+0x64>  // b.none
  d0:	bl	0 <abort>
  d4:	ldr	w0, [sp, #44]
  d8:	ldp	x29, x30, [sp], #48
  dc:	ret

_addvdi3.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__addvti3>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x0, x1, [sp, #32]
   c:	stp	x2, x3, [sp, #16]
  10:	ldp	x0, x1, [sp, #32]
  14:	ldp	x2, x3, [sp, #16]
  18:	mov	x6, x2
  1c:	adds	x6, x0, x6
  20:	mov	x2, x3
  24:	adc	x0, x1, x2
  28:	mov	x4, x6
  2c:	mov	x5, x0
  30:	stp	x4, x5, [sp, #48]
  34:	ldr	x0, [sp, #24]
  38:	cmp	x0, #0x0
  3c:	b.lt	80 <__addvti3+0x80>  // b.tstop
  40:	mov	w2, #0x1                   	// #1
  44:	ldr	x1, [sp, #40]
  48:	ldr	x0, [sp, #56]
  4c:	cmp	x1, x0
  50:	b.gt	78 <__addvti3+0x78>
  54:	ldr	x1, [sp, #40]
  58:	ldr	x0, [sp, #56]
  5c:	cmp	x1, x0
  60:	b.ne	74 <__addvti3+0x74>  // b.any
  64:	ldr	x1, [sp, #32]
  68:	ldr	x0, [sp, #48]
  6c:	cmp	x1, x0
  70:	b.hi	78 <__addvti3+0x78>  // b.pmore
  74:	mov	w2, #0x0                   	// #0
  78:	and	w0, w2, #0xff
  7c:	b	bc <__addvti3+0xbc>
  80:	mov	w2, #0x1                   	// #1
  84:	ldr	x1, [sp, #56]
  88:	ldr	x0, [sp, #40]
  8c:	cmp	x1, x0
  90:	b.gt	b8 <__addvti3+0xb8>
  94:	ldr	x1, [sp, #56]
  98:	ldr	x0, [sp, #40]
  9c:	cmp	x1, x0
  a0:	b.ne	b4 <__addvti3+0xb4>  // b.any
  a4:	ldr	x1, [sp, #48]
  a8:	ldr	x0, [sp, #32]
  ac:	cmp	x1, x0
  b0:	b.hi	b8 <__addvti3+0xb8>  // b.pmore
  b4:	mov	w2, #0x0                   	// #0
  b8:	and	w0, w2, #0xff
  bc:	cmp	w0, #0x0
  c0:	b.eq	c8 <__addvti3+0xc8>  // b.none
  c4:	bl	0 <abort>
  c8:	ldp	x0, x1, [sp, #48]
  cc:	ldp	x29, x30, [sp], #64
  d0:	ret

_subvsi3.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__subvdi3>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x1, [sp, #24]
  14:	ldr	x0, [sp, #16]
  18:	sub	x0, x1, x0
  1c:	str	x0, [sp, #40]
  20:	ldr	x0, [sp, #16]
  24:	cmp	x0, #0x0
  28:	b.lt	44 <__subvdi3+0x44>  // b.tstop
  2c:	ldr	x1, [sp, #40]
  30:	ldr	x0, [sp, #24]
  34:	cmp	x1, x0
  38:	cset	w0, gt
  3c:	and	w0, w0, #0xff
  40:	b	58 <__subvdi3+0x58>
  44:	ldr	x1, [sp, #40]
  48:	ldr	x0, [sp, #24]
  4c:	cmp	x1, x0
  50:	cset	w0, lt  // lt = tstop
  54:	and	w0, w0, #0xff
  58:	cmp	w0, #0x0
  5c:	b.eq	64 <__subvdi3+0x64>  // b.none
  60:	bl	0 <abort>
  64:	ldr	x0, [sp, #40]
  68:	ldp	x29, x30, [sp], #48
  6c:	ret

0000000000000070 <__subvsi3>:
  70:	stp	x29, x30, [sp, #-48]!
  74:	mov	x29, sp
  78:	str	w0, [sp, #28]
  7c:	str	w1, [sp, #24]
  80:	ldr	w1, [sp, #28]
  84:	ldr	w0, [sp, #24]
  88:	sub	w0, w1, w0
  8c:	str	w0, [sp, #44]
  90:	ldr	w0, [sp, #24]
  94:	cmp	w0, #0x0
  98:	b.lt	b4 <__subvsi3+0x44>  // b.tstop
  9c:	ldr	w1, [sp, #44]
  a0:	ldr	w0, [sp, #28]
  a4:	cmp	w1, w0
  a8:	cset	w0, gt
  ac:	and	w0, w0, #0xff
  b0:	b	c8 <__subvsi3+0x58>
  b4:	ldr	w1, [sp, #44]
  b8:	ldr	w0, [sp, #28]
  bc:	cmp	w1, w0
  c0:	cset	w0, lt  // lt = tstop
  c4:	and	w0, w0, #0xff
  c8:	cmp	w0, #0x0
  cc:	b.eq	d4 <__subvsi3+0x64>  // b.none
  d0:	bl	0 <abort>
  d4:	ldr	w0, [sp, #44]
  d8:	ldp	x29, x30, [sp], #48
  dc:	ret

_subvdi3.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__subvti3>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x0, x1, [sp, #32]
   c:	stp	x2, x3, [sp, #16]
  10:	ldp	x2, x3, [sp, #32]
  14:	ldp	x0, x1, [sp, #16]
  18:	subs	x6, x2, x0
  1c:	sbc	x0, x3, x1
  20:	mov	x4, x6
  24:	mov	x5, x0
  28:	stp	x4, x5, [sp, #48]
  2c:	ldr	x0, [sp, #24]
  30:	cmp	x0, #0x0
  34:	b.lt	78 <__subvti3+0x78>  // b.tstop
  38:	mov	w2, #0x1                   	// #1
  3c:	ldr	x1, [sp, #56]
  40:	ldr	x0, [sp, #40]
  44:	cmp	x1, x0
  48:	b.gt	70 <__subvti3+0x70>
  4c:	ldr	x1, [sp, #56]
  50:	ldr	x0, [sp, #40]
  54:	cmp	x1, x0
  58:	b.ne	6c <__subvti3+0x6c>  // b.any
  5c:	ldr	x1, [sp, #48]
  60:	ldr	x0, [sp, #32]
  64:	cmp	x1, x0
  68:	b.hi	70 <__subvti3+0x70>  // b.pmore
  6c:	mov	w2, #0x0                   	// #0
  70:	and	w0, w2, #0xff
  74:	b	b4 <__subvti3+0xb4>
  78:	mov	w2, #0x1                   	// #1
  7c:	ldr	x1, [sp, #40]
  80:	ldr	x0, [sp, #56]
  84:	cmp	x1, x0
  88:	b.gt	b0 <__subvti3+0xb0>
  8c:	ldr	x1, [sp, #40]
  90:	ldr	x0, [sp, #56]
  94:	cmp	x1, x0
  98:	b.ne	ac <__subvti3+0xac>  // b.any
  9c:	ldr	x1, [sp, #32]
  a0:	ldr	x0, [sp, #48]
  a4:	cmp	x1, x0
  a8:	b.hi	b0 <__subvti3+0xb0>  // b.pmore
  ac:	mov	w2, #0x0                   	// #0
  b0:	and	w0, w2, #0xff
  b4:	cmp	w0, #0x0
  b8:	b.eq	c0 <__subvti3+0xc0>  // b.none
  bc:	bl	0 <abort>
  c0:	ldp	x0, x1, [sp, #48]
  c4:	ldp	x29, x30, [sp], #64
  c8:	ret

_mulvsi3.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__mulvdi3>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x0, [sp, #24]
  14:	mov	x4, x0
  18:	asr	x0, x0, #63
  1c:	mov	x5, x0
  20:	ldr	x0, [sp, #16]
  24:	mov	x2, x0
  28:	asr	x0, x0, #63
  2c:	mov	x3, x0
  30:	mul	x1, x4, x2
  34:	umulh	x0, x4, x2
  38:	madd	x0, x5, x2, x0
  3c:	madd	x0, x4, x3, x0
  40:	mov	x8, x1
  44:	mov	x9, x0
  48:	stp	x8, x9, [sp, #32]
  4c:	ldr	x0, [sp, #40]
  50:	mov	x6, x0
  54:	ldr	x0, [sp, #40]
  58:	asr	x7, x0, #63
  5c:	mov	x1, x6
  60:	ldr	x0, [sp, #32]
  64:	asr	x0, x0, #63
  68:	cmp	x1, x0
  6c:	b.eq	74 <__mulvdi3+0x74>  // b.none
  70:	bl	0 <abort>
  74:	ldr	x0, [sp, #32]
  78:	ldp	x29, x30, [sp], #48
  7c:	ret

0000000000000080 <__mulvsi3>:
  80:	stp	x29, x30, [sp, #-48]!
  84:	mov	x29, sp
  88:	str	w0, [sp, #28]
  8c:	str	w1, [sp, #24]
  90:	ldrsw	x1, [sp, #28]
  94:	ldrsw	x0, [sp, #24]
  98:	mul	x0, x1, x0
  9c:	str	x0, [sp, #40]
  a0:	ldr	x0, [sp, #40]
  a4:	asr	x0, x0, #32
  a8:	mov	w1, w0
  ac:	ldr	x0, [sp, #40]
  b0:	asr	w0, w0, #31
  b4:	cmp	w1, w0
  b8:	b.eq	c0 <__mulvsi3+0x40>  // b.none
  bc:	bl	0 <abort>
  c0:	ldr	x0, [sp, #40]
  c4:	ldp	x29, x30, [sp], #48
  c8:	ret

_mulvdi3.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__mulvti3>:
   0:	sub	sp, sp, #0x270
   4:	stp	x29, x30, [sp]
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	stp	x21, x22, [sp, #32]
  14:	stp	x23, x24, [sp, #48]
  18:	stp	x25, x26, [sp, #64]
  1c:	str	x27, [sp, #80]
  20:	stp	x0, x1, [sp, #448]
  24:	stp	x2, x3, [sp, #432]
  28:	ldp	x0, x1, [sp, #448]
  2c:	add	x2, sp, #0x200
  30:	stp	x0, x1, [x2, #80]
  34:	ldp	x0, x1, [sp, #432]
  38:	add	x2, sp, #0x200
  3c:	stp	x0, x1, [x2, #64]
  40:	ldr	x1, [sp, #600]
  44:	ldr	x0, [sp, #592]
  48:	asr	x0, x0, #63
  4c:	cmp	x1, x0
  50:	cset	w0, eq  // eq = none
  54:	and	w0, w0, #0xff
  58:	and	x0, x0, #0xff
  5c:	cmp	x0, #0x0
  60:	b.eq	204 <__mulvti3+0x204>  // b.none
  64:	ldr	x1, [sp, #584]
  68:	ldr	x0, [sp, #576]
  6c:	asr	x0, x0, #63
  70:	cmp	x1, x0
  74:	cset	w0, eq  // eq = none
  78:	and	w0, w0, #0xff
  7c:	and	x0, x0, #0xff
  80:	cmp	x0, #0x0
  84:	b.eq	c4 <__mulvti3+0xc4>  // b.none
  88:	ldr	x0, [sp, #592]
  8c:	mov	x16, x0
  90:	asr	x0, x0, #63
  94:	mov	x17, x0
  98:	ldr	x0, [sp, #576]
  9c:	mov	x14, x0
  a0:	asr	x0, x0, #63
  a4:	mov	x15, x0
  a8:	mul	x1, x16, x14
  ac:	umulh	x0, x16, x14
  b0:	madd	x0, x17, x14, x0
  b4:	madd	x0, x16, x15, x0
  b8:	mov	x4, x1
  bc:	mov	x5, x0
  c0:	b	62c <__mulvti3+0x62c>
  c4:	ldr	x0, [sp, #592]
  c8:	mov	x12, x0
  cc:	mov	x13, #0x0                   	// #0
  d0:	ldr	x0, [sp, #576]
  d4:	mov	x10, x0
  d8:	mov	x11, #0x0                   	// #0
  dc:	mul	x1, x12, x10
  e0:	umulh	x0, x12, x10
  e4:	madd	x0, x13, x10, x0
  e8:	madd	x0, x12, x11, x0
  ec:	str	x1, [sp, #96]
  f0:	str	x0, [sp, #104]
  f4:	ldp	x0, x1, [sp, #96]
  f8:	add	x2, sp, #0x200
  fc:	stp	x0, x1, [x2, #48]
 100:	ldr	x0, [sp, #592]
 104:	mov	x8, x0
 108:	mov	x9, #0x0                   	// #0
 10c:	ldr	x0, [sp, #584]
 110:	mov	x6, x0
 114:	mov	x7, #0x0                   	// #0
 118:	mul	x1, x8, x6
 11c:	umulh	x0, x8, x6
 120:	madd	x0, x9, x6, x0
 124:	madd	x0, x8, x7, x0
 128:	str	x1, [sp, #112]
 12c:	str	x0, [sp, #120]
 130:	ldp	x0, x1, [sp, #112]
 134:	add	x2, sp, #0x200
 138:	stp	x0, x1, [x2, #32]
 13c:	ldr	x0, [sp, #584]
 140:	cmp	x0, #0x0
 144:	b.ge	158 <__mulvti3+0x158>  // b.tcont
 148:	ldr	x1, [sp, #552]
 14c:	ldr	x0, [sp, #592]
 150:	sub	x0, x1, x0
 154:	str	x0, [sp, #552]
 158:	ldr	x0, [sp, #592]
 15c:	cmp	x0, #0x0
 160:	b.ge	190 <__mulvti3+0x190>  // b.tcont
 164:	add	x0, sp, #0x200
 168:	ldp	x2, x3, [x0, #32]
 16c:	add	x0, sp, #0x200
 170:	ldp	x0, x1, [x0, #64]
 174:	subs	x4, x2, x0
 178:	sbc	x0, x3, x1
 17c:	str	x4, [sp, #128]
 180:	str	x0, [sp, #136]
 184:	ldp	x0, x1, [sp, #128]
 188:	add	x2, sp, #0x200
 18c:	stp	x0, x1, [x2, #32]
 190:	add	x0, sp, #0x200
 194:	ldp	x0, x1, [x0, #32]
 198:	ldr	x2, [sp, #568]
 19c:	str	x2, [sp, #144]
 1a0:	str	xzr, [sp, #152]
 1a4:	ldp	x4, x5, [sp, #144]
 1a8:	mov	x2, x4
 1ac:	adds	x2, x0, x2
 1b0:	mov	x3, x5
 1b4:	adc	x0, x1, x3
 1b8:	str	x2, [sp, #160]
 1bc:	str	x0, [sp, #168]
 1c0:	ldp	x0, x1, [sp, #160]
 1c4:	add	x2, sp, #0x200
 1c8:	stp	x0, x1, [x2, #32]
 1cc:	ldr	x1, [sp, #552]
 1d0:	ldr	x0, [sp, #544]
 1d4:	asr	x0, x0, #63
 1d8:	cmp	x1, x0
 1dc:	cset	w0, eq  // eq = none
 1e0:	and	w0, w0, #0xff
 1e4:	and	x0, x0, #0xff
 1e8:	cmp	x0, #0x0
 1ec:	b.eq	628 <__mulvti3+0x628>  // b.none
 1f0:	ldr	x0, [sp, #544]
 1f4:	str	x0, [sp, #568]
 1f8:	add	x0, sp, #0x200
 1fc:	ldp	x4, x5, [x0, #48]
 200:	b	62c <__mulvti3+0x62c>
 204:	ldr	x1, [sp, #584]
 208:	ldr	x0, [sp, #576]
 20c:	asr	x0, x0, #63
 210:	cmp	x1, x0
 214:	cset	w0, eq  // eq = none
 218:	and	w0, w0, #0xff
 21c:	and	x0, x0, #0xff
 220:	cmp	x0, #0x0
 224:	b.eq	3b0 <__mulvti3+0x3b0>  // b.none
 228:	ldr	x0, [sp, #592]
 22c:	str	x0, [sp, #176]
 230:	str	xzr, [sp, #184]
 234:	ldr	x0, [sp, #576]
 238:	str	x0, [sp, #192]
 23c:	str	xzr, [sp, #200]
 240:	ldp	x4, x5, [sp, #176]
 244:	mov	x0, x4
 248:	ldp	x2, x3, [sp, #192]
 24c:	mov	x1, x2
 250:	mul	x1, x0, x1
 254:	mov	x0, x4
 258:	mov	x6, x2
 25c:	umulh	x0, x0, x6
 260:	mov	x6, x5
 264:	mov	x7, x2
 268:	madd	x0, x6, x7, x0
 26c:	mov	x2, x3
 270:	madd	x0, x4, x2, x0
 274:	str	x1, [sp, #208]
 278:	str	x0, [sp, #216]
 27c:	ldp	x0, x1, [sp, #208]
 280:	add	x2, sp, #0x200
 284:	stp	x0, x1, [x2, #16]
 288:	ldr	x0, [sp, #600]
 28c:	str	x0, [sp, #224]
 290:	str	xzr, [sp, #232]
 294:	ldr	x0, [sp, #576]
 298:	str	x0, [sp, #240]
 29c:	str	xzr, [sp, #248]
 2a0:	ldp	x4, x5, [sp, #224]
 2a4:	mov	x0, x4
 2a8:	ldp	x2, x3, [sp, #240]
 2ac:	mov	x1, x2
 2b0:	mul	x1, x0, x1
 2b4:	mov	x0, x4
 2b8:	mov	x6, x2
 2bc:	umulh	x0, x0, x6
 2c0:	mov	x6, x5
 2c4:	mov	x7, x2
 2c8:	madd	x0, x6, x7, x0
 2cc:	mov	x2, x3
 2d0:	madd	x0, x4, x2, x0
 2d4:	str	x1, [sp, #256]
 2d8:	str	x0, [sp, #264]
 2dc:	ldp	x0, x1, [sp, #256]
 2e0:	add	x2, sp, #0x200
 2e4:	stp	x0, x1, [x2]
 2e8:	ldr	x0, [sp, #600]
 2ec:	cmp	x0, #0x0
 2f0:	b.ge	304 <__mulvti3+0x304>  // b.tcont
 2f4:	ldr	x1, [sp, #520]
 2f8:	ldr	x0, [sp, #576]
 2fc:	sub	x0, x1, x0
 300:	str	x0, [sp, #520]
 304:	ldr	x0, [sp, #576]
 308:	cmp	x0, #0x0
 30c:	b.ge	33c <__mulvti3+0x33c>  // b.tcont
 310:	add	x0, sp, #0x200
 314:	ldp	x2, x3, [x0]
 318:	add	x0, sp, #0x200
 31c:	ldp	x0, x1, [x0, #80]
 320:	subs	x4, x2, x0
 324:	sbc	x0, x3, x1
 328:	str	x4, [sp, #272]
 32c:	str	x0, [sp, #280]
 330:	ldp	x0, x1, [sp, #272]
 334:	add	x2, sp, #0x200
 338:	stp	x0, x1, [x2]
 33c:	add	x0, sp, #0x200
 340:	ldp	x0, x1, [x0]
 344:	ldr	x2, [sp, #536]
 348:	str	x2, [sp, #288]
 34c:	str	xzr, [sp, #296]
 350:	ldp	x4, x5, [sp, #288]
 354:	mov	x2, x4
 358:	adds	x2, x0, x2
 35c:	mov	x3, x5
 360:	adc	x0, x1, x3
 364:	str	x2, [sp, #304]
 368:	str	x0, [sp, #312]
 36c:	ldp	x0, x1, [sp, #304]
 370:	add	x2, sp, #0x200
 374:	stp	x0, x1, [x2]
 378:	ldr	x1, [sp, #520]
 37c:	ldr	x0, [sp, #512]
 380:	asr	x0, x0, #63
 384:	cmp	x1, x0
 388:	cset	w0, eq  // eq = none
 38c:	and	w0, w0, #0xff
 390:	and	x0, x0, #0xff
 394:	cmp	x0, #0x0
 398:	b.eq	628 <__mulvti3+0x628>  // b.none
 39c:	ldr	x0, [sp, #512]
 3a0:	str	x0, [sp, #536]
 3a4:	add	x0, sp, #0x200
 3a8:	ldp	x4, x5, [x0, #16]
 3ac:	b	62c <__mulvti3+0x62c>
 3b0:	ldr	x0, [sp, #600]
 3b4:	cmp	x0, #0x0
 3b8:	b.lt	4f8 <__mulvti3+0x4f8>  // b.tstop
 3bc:	ldr	x0, [sp, #584]
 3c0:	cmp	x0, #0x0
 3c4:	b.lt	468 <__mulvti3+0x468>  // b.tstop
 3c8:	ldr	x0, [sp, #600]
 3cc:	cmp	x0, #0x0
 3d0:	b.ne	628 <__mulvti3+0x628>  // b.any
 3d4:	ldr	x0, [sp, #584]
 3d8:	cmp	x0, #0x0
 3dc:	b.ne	628 <__mulvti3+0x628>  // b.any
 3e0:	ldr	x0, [sp, #592]
 3e4:	str	x0, [sp, #320]
 3e8:	str	xzr, [sp, #328]
 3ec:	ldr	x0, [sp, #576]
 3f0:	str	x0, [sp, #336]
 3f4:	str	xzr, [sp, #344]
 3f8:	ldp	x4, x5, [sp, #320]
 3fc:	mov	x0, x4
 400:	ldp	x2, x3, [sp, #336]
 404:	mov	x1, x2
 408:	mul	x1, x0, x1
 40c:	mov	x0, x4
 410:	mov	x6, x2
 414:	umulh	x0, x0, x6
 418:	mov	x6, x5
 41c:	mov	x7, x2
 420:	madd	x0, x6, x7, x0
 424:	mov	x2, x3
 428:	madd	x0, x4, x2, x0
 42c:	str	x1, [sp, #352]
 430:	str	x0, [sp, #360]
 434:	ldp	x0, x1, [sp, #352]
 438:	add	x2, sp, #0x200
 43c:	stp	x0, x1, [x2, #96]
 440:	ldr	x0, [sp, #616]
 444:	mvn	x0, x0
 448:	lsr	x0, x0, #63
 44c:	and	w0, w0, #0xff
 450:	and	x0, x0, #0xff
 454:	cmp	x0, #0x0
 458:	b.eq	628 <__mulvti3+0x628>  // b.none
 45c:	add	x0, sp, #0x200
 460:	ldp	x4, x5, [x0, #96]
 464:	b	62c <__mulvti3+0x62c>
 468:	ldr	x0, [sp, #600]
 46c:	cmp	x0, #0x0
 470:	b.ne	628 <__mulvti3+0x628>  // b.any
 474:	ldr	x0, [sp, #584]
 478:	cmn	x0, #0x1
 47c:	b.ne	628 <__mulvti3+0x628>  // b.any
 480:	ldr	x0, [sp, #592]
 484:	str	x0, [sp, #368]
 488:	str	xzr, [sp, #376]
 48c:	ldr	x0, [sp, #576]
 490:	mov	x26, x0
 494:	mov	x27, #0x0                   	// #0
 498:	ldp	x2, x3, [sp, #368]
 49c:	mov	x0, x2
 4a0:	mul	x1, x0, x26
 4a4:	mov	x0, x2
 4a8:	umulh	x0, x0, x26
 4ac:	mov	x4, x3
 4b0:	madd	x0, x4, x26, x0
 4b4:	madd	x0, x2, x27, x0
 4b8:	str	x1, [sp, #384]
 4bc:	str	x0, [sp, #392]
 4c0:	ldp	x0, x1, [sp, #384]
 4c4:	stp	x0, x1, [sp, #496]
 4c8:	ldr	x1, [sp, #504]
 4cc:	ldr	x0, [sp, #592]
 4d0:	sub	x0, x1, x0
 4d4:	str	x0, [sp, #504]
 4d8:	ldr	x0, [sp, #504]
 4dc:	lsr	x0, x0, #63
 4e0:	and	w0, w0, #0xff
 4e4:	and	x0, x0, #0xff
 4e8:	cmp	x0, #0x0
 4ec:	b.eq	628 <__mulvti3+0x628>  // b.none
 4f0:	ldp	x4, x5, [sp, #496]
 4f4:	b	62c <__mulvti3+0x62c>
 4f8:	ldr	x0, [sp, #584]
 4fc:	cmp	x0, #0x0
 500:	b.lt	584 <__mulvti3+0x584>  // b.tstop
 504:	ldr	x0, [sp, #600]
 508:	cmn	x0, #0x1
 50c:	b.ne	628 <__mulvti3+0x628>  // b.any
 510:	ldr	x0, [sp, #584]
 514:	cmp	x0, #0x0
 518:	b.ne	628 <__mulvti3+0x628>  // b.any
 51c:	ldr	x0, [sp, #592]
 520:	mov	x24, x0
 524:	mov	x25, #0x0                   	// #0
 528:	ldr	x0, [sp, #576]
 52c:	mov	x22, x0
 530:	mov	x23, #0x0                   	// #0
 534:	mul	x1, x24, x22
 538:	umulh	x0, x24, x22
 53c:	madd	x0, x25, x22, x0
 540:	madd	x0, x24, x23, x0
 544:	str	x1, [sp, #400]
 548:	str	x0, [sp, #408]
 54c:	ldp	x0, x1, [sp, #400]
 550:	stp	x0, x1, [sp, #480]
 554:	ldr	x1, [sp, #488]
 558:	ldr	x0, [sp, #576]
 55c:	sub	x0, x1, x0
 560:	str	x0, [sp, #488]
 564:	ldr	x0, [sp, #488]
 568:	lsr	x0, x0, #63
 56c:	and	w0, w0, #0xff
 570:	and	x0, x0, #0xff
 574:	cmp	x0, #0x0
 578:	b.eq	628 <__mulvti3+0x628>  // b.none
 57c:	ldp	x4, x5, [sp, #480]
 580:	b	62c <__mulvti3+0x62c>
 584:	ldr	x1, [sp, #600]
 588:	ldr	x0, [sp, #584]
 58c:	and	x0, x1, x0
 590:	cmn	x0, #0x1
 594:	b.ne	628 <__mulvti3+0x628>  // b.any
 598:	ldr	x1, [sp, #592]
 59c:	ldr	x0, [sp, #576]
 5a0:	orr	x0, x1, x0
 5a4:	cmp	x0, #0x0
 5a8:	b.eq	628 <__mulvti3+0x628>  // b.none
 5ac:	ldr	x0, [sp, #592]
 5b0:	mov	x20, x0
 5b4:	mov	x21, #0x0                   	// #0
 5b8:	ldr	x0, [sp, #576]
 5bc:	mov	x18, x0
 5c0:	mov	x19, #0x0                   	// #0
 5c4:	mul	x1, x20, x18
 5c8:	umulh	x0, x20, x18
 5cc:	madd	x0, x21, x18, x0
 5d0:	madd	x0, x20, x19, x0
 5d4:	str	x1, [sp, #416]
 5d8:	str	x0, [sp, #424]
 5dc:	ldp	x0, x1, [sp, #416]
 5e0:	stp	x0, x1, [sp, #464]
 5e4:	ldr	x1, [sp, #472]
 5e8:	ldr	x0, [sp, #592]
 5ec:	sub	x0, x1, x0
 5f0:	str	x0, [sp, #472]
 5f4:	ldr	x1, [sp, #472]
 5f8:	ldr	x0, [sp, #576]
 5fc:	sub	x0, x1, x0
 600:	str	x0, [sp, #472]
 604:	ldr	x0, [sp, #472]
 608:	mvn	x0, x0
 60c:	lsr	x0, x0, #63
 610:	and	w0, w0, #0xff
 614:	and	x0, x0, #0xff
 618:	cmp	x0, #0x0
 61c:	b.eq	628 <__mulvti3+0x628>  // b.none
 620:	ldp	x4, x5, [sp, #464]
 624:	b	62c <__mulvti3+0x62c>
 628:	bl	0 <abort>
 62c:	mov	x0, x4
 630:	mov	x1, x5
 634:	ldp	x19, x20, [sp, #16]
 638:	ldp	x21, x22, [sp, #32]
 63c:	ldp	x23, x24, [sp, #48]
 640:	ldp	x25, x26, [sp, #64]
 644:	ldr	x27, [sp, #80]
 648:	ldp	x29, x30, [sp]
 64c:	add	sp, sp, #0x270
 650:	ret

_negvsi2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__negvdi2>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	neg	x0, x0
  14:	str	x0, [sp, #40]
  18:	ldr	x0, [sp, #24]
  1c:	cmp	x0, #0x0
  20:	b.lt	38 <__negvdi2+0x38>  // b.tstop
  24:	ldr	x0, [sp, #40]
  28:	cmp	x0, #0x0
  2c:	cset	w0, gt
  30:	and	w0, w0, #0xff
  34:	b	44 <__negvdi2+0x44>
  38:	ldr	x0, [sp, #40]
  3c:	lsr	x0, x0, #63
  40:	and	w0, w0, #0xff
  44:	cmp	w0, #0x0
  48:	b.eq	50 <__negvdi2+0x50>  // b.none
  4c:	bl	0 <abort>
  50:	ldr	x0, [sp, #40]
  54:	ldp	x29, x30, [sp], #48
  58:	ret

000000000000005c <__negvsi2>:
  5c:	stp	x29, x30, [sp, #-48]!
  60:	mov	x29, sp
  64:	str	w0, [sp, #28]
  68:	ldr	w0, [sp, #28]
  6c:	neg	w0, w0
  70:	str	w0, [sp, #44]
  74:	ldr	w0, [sp, #28]
  78:	cmp	w0, #0x0
  7c:	b.lt	94 <__negvsi2+0x38>  // b.tstop
  80:	ldr	w0, [sp, #44]
  84:	cmp	w0, #0x0
  88:	cset	w0, gt
  8c:	and	w0, w0, #0xff
  90:	b	a0 <__negvsi2+0x44>
  94:	ldr	w0, [sp, #44]
  98:	lsr	w0, w0, #31
  9c:	and	w0, w0, #0xff
  a0:	cmp	w0, #0x0
  a4:	b.eq	ac <__negvsi2+0x50>  // b.none
  a8:	bl	0 <abort>
  ac:	ldr	w0, [sp, #44]
  b0:	ldp	x29, x30, [sp], #48
  b4:	ret

_negvdi2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__negvti2>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x0, x1, [sp, #16]
   c:	ldp	x0, x1, [sp, #16]
  10:	negs	x10, x0
  14:	ngc	x0, x1
  18:	mov	x8, x10
  1c:	mov	x9, x0
  20:	stp	x8, x9, [sp, #32]
  24:	ldr	x0, [sp, #24]
  28:	cmp	x0, #0x0
  2c:	b.lt	68 <__negvti2+0x68>  // b.tstop
  30:	ldr	x0, [sp, #40]
  34:	asr	x2, x0, #63
  38:	ldr	x0, [sp, #40]
  3c:	asr	x3, x0, #63
  40:	ldp	x0, x1, [sp, #32]
  44:	subs	x8, x2, x0
  48:	sbc	x0, x3, x1
  4c:	mov	x6, x8
  50:	mov	x7, x0
  54:	lsr	x4, x7, #63
  58:	mov	x5, #0x0                   	// #0
  5c:	mov	w0, w4
  60:	and	w0, w0, #0xff
  64:	b	74 <__negvti2+0x74>
  68:	ldr	x0, [sp, #40]
  6c:	lsr	x0, x0, #63
  70:	and	w0, w0, #0xff
  74:	cmp	w0, #0x0
  78:	b.eq	80 <__negvti2+0x80>  // b.none
  7c:	bl	0 <abort>
  80:	ldp	x0, x1, [sp, #32]
  84:	ldp	x29, x30, [sp], #48
  88:	ret

_ctors.o:     file format elf64-littleaarch64


_ffssi2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__ffsdi2>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	cmp	x0, #0x0
  10:	b.ne	1c <__ffsdi2+0x1c>  // b.any
  14:	mov	w0, #0x0                   	// #0
  18:	b	38 <__ffsdi2+0x38>
  1c:	ldr	x0, [sp, #8]
  20:	rbit	x0, x0
  24:	clz	x0, x0
  28:	sxtw	x0, w0
  2c:	str	x0, [sp, #24]
  30:	ldr	x0, [sp, #24]
  34:	add	w0, w0, #0x1
  38:	add	sp, sp, #0x20
  3c:	ret

_ffsdi2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__ffsti2>:
   0:	sub	sp, sp, #0x40
   4:	stp	x0, x1, [sp]
   8:	ldp	x0, x1, [sp]
   c:	stp	x0, x1, [sp, #16]
  10:	ldr	x0, [sp, #16]
  14:	cmp	x0, #0x0
  18:	b.eq	2c <__ffsti2+0x2c>  // b.none
  1c:	ldr	x0, [sp, #16]
  20:	str	x0, [sp, #56]
  24:	str	xzr, [sp, #48]
  28:	b	54 <__ffsti2+0x54>
  2c:	ldr	x0, [sp, #24]
  30:	cmp	x0, #0x0
  34:	b.eq	4c <__ffsti2+0x4c>  // b.none
  38:	ldr	x0, [sp, #24]
  3c:	str	x0, [sp, #56]
  40:	mov	x0, #0x40                  	// #64
  44:	str	x0, [sp, #48]
  48:	b	54 <__ffsti2+0x54>
  4c:	mov	w0, #0x0                   	// #0
  50:	b	7c <__ffsti2+0x7c>
  54:	ldr	x0, [sp, #56]
  58:	rbit	x0, x0
  5c:	clz	x0, x0
  60:	sxtw	x0, w0
  64:	str	x0, [sp, #40]
  68:	ldr	x0, [sp, #40]
  6c:	mov	w1, w0
  70:	ldr	x0, [sp, #48]
  74:	add	w0, w1, w0
  78:	add	w0, w0, #0x1
  7c:	add	sp, sp, #0x40
  80:	ret

_clz.o:     file format elf64-littleaarch64


_clzsi2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__clzdi2>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	clz	x0, x0
  10:	sxtw	x0, w0
  14:	str	x0, [sp, #24]
  18:	ldr	x0, [sp, #24]
  1c:	add	sp, sp, #0x20
  20:	ret

_clzdi2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__clzti2>:
   0:	sub	sp, sp, #0x40
   4:	stp	x0, x1, [sp]
   8:	ldp	x0, x1, [sp]
   c:	stp	x0, x1, [sp, #16]
  10:	ldr	x0, [sp, #24]
  14:	cmp	x0, #0x0
  18:	b.eq	2c <__clzti2+0x2c>  // b.none
  1c:	ldr	x0, [sp, #24]
  20:	str	x0, [sp, #56]
  24:	str	xzr, [sp, #48]
  28:	b	3c <__clzti2+0x3c>
  2c:	ldr	x0, [sp, #16]
  30:	str	x0, [sp, #56]
  34:	mov	x0, #0x40                  	// #64
  38:	str	x0, [sp, #48]
  3c:	ldr	x0, [sp, #56]
  40:	clz	x0, x0
  44:	sxtw	x0, w0
  48:	str	x0, [sp, #40]
  4c:	ldr	x0, [sp, #40]
  50:	mov	w1, w0
  54:	ldr	x0, [sp, #48]
  58:	add	w0, w1, w0
  5c:	add	sp, sp, #0x40
  60:	ret

_ctzsi2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__ctzdi2>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	rbit	x0, x0
  10:	clz	x0, x0
  14:	sxtw	x0, w0
  18:	str	x0, [sp, #24]
  1c:	ldr	x0, [sp, #24]
  20:	add	sp, sp, #0x20
  24:	ret

_ctzdi2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__ctzti2>:
   0:	sub	sp, sp, #0x40
   4:	stp	x0, x1, [sp]
   8:	ldp	x0, x1, [sp]
   c:	stp	x0, x1, [sp, #16]
  10:	ldr	x0, [sp, #16]
  14:	cmp	x0, #0x0
  18:	b.eq	2c <__ctzti2+0x2c>  // b.none
  1c:	ldr	x0, [sp, #16]
  20:	str	x0, [sp, #56]
  24:	str	xzr, [sp, #48]
  28:	b	3c <__ctzti2+0x3c>
  2c:	ldr	x0, [sp, #24]
  30:	str	x0, [sp, #56]
  34:	mov	x0, #0x40                  	// #64
  38:	str	x0, [sp, #48]
  3c:	ldr	x0, [sp, #56]
  40:	rbit	x0, x0
  44:	clz	x0, x0
  48:	sxtw	x0, w0
  4c:	str	x0, [sp, #40]
  50:	ldr	x0, [sp, #40]
  54:	mov	w1, w0
  58:	ldr	x0, [sp, #48]
  5c:	add	w0, w1, w0
  60:	add	sp, sp, #0x40
  64:	ret

_popcount_tab.o:     file format elf64-littleaarch64


_popcountsi2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__popcountdi2>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	lsr	x0, x0, #1
  10:	and	x0, x0, #0x5555555555555555
  14:	ldr	x1, [sp, #8]
  18:	sub	x0, x1, x0
  1c:	str	x0, [sp, #8]
  20:	ldr	x0, [sp, #8]
  24:	and	x1, x0, #0x3333333333333333
  28:	ldr	x0, [sp, #8]
  2c:	lsr	x0, x0, #2
  30:	and	x0, x0, #0x3333333333333333
  34:	add	x0, x1, x0
  38:	str	x0, [sp, #8]
  3c:	ldr	x0, [sp, #8]
  40:	lsr	x1, x0, #4
  44:	ldr	x0, [sp, #8]
  48:	add	x0, x1, x0
  4c:	and	x0, x0, #0xf0f0f0f0f0f0f0f
  50:	str	x0, [sp, #8]
  54:	ldr	x1, [sp, #8]
  58:	mov	x0, #0x101010101010101     	// #72340172838076673
  5c:	mul	x0, x1, x0
  60:	lsr	x0, x0, #56
  64:	add	sp, sp, #0x10
  68:	ret

_popcountdi2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__popcountti2>:
   0:	sub	sp, sp, #0x30
   4:	stp	x0, x1, [sp]
   8:	ldp	x0, x1, [sp]
   c:	stp	x0, x1, [sp, #16]
  10:	ldr	x0, [sp, #16]
  14:	str	x0, [sp, #40]
  18:	ldr	x0, [sp, #24]
  1c:	str	x0, [sp, #32]
  20:	ldr	x0, [sp, #40]
  24:	lsr	x0, x0, #1
  28:	and	x0, x0, #0x5555555555555555
  2c:	ldr	x1, [sp, #40]
  30:	sub	x0, x1, x0
  34:	str	x0, [sp, #40]
  38:	ldr	x0, [sp, #32]
  3c:	lsr	x0, x0, #1
  40:	and	x0, x0, #0x5555555555555555
  44:	ldr	x1, [sp, #32]
  48:	sub	x0, x1, x0
  4c:	str	x0, [sp, #32]
  50:	ldr	x0, [sp, #40]
  54:	and	x1, x0, #0x3333333333333333
  58:	ldr	x0, [sp, #40]
  5c:	lsr	x0, x0, #2
  60:	and	x0, x0, #0x3333333333333333
  64:	add	x0, x1, x0
  68:	str	x0, [sp, #40]
  6c:	ldr	x0, [sp, #32]
  70:	and	x1, x0, #0x3333333333333333
  74:	ldr	x0, [sp, #32]
  78:	lsr	x0, x0, #2
  7c:	and	x0, x0, #0x3333333333333333
  80:	add	x0, x1, x0
  84:	str	x0, [sp, #32]
  88:	ldr	x0, [sp, #40]
  8c:	lsr	x1, x0, #4
  90:	ldr	x0, [sp, #40]
  94:	add	x0, x1, x0
  98:	and	x0, x0, #0xf0f0f0f0f0f0f0f
  9c:	str	x0, [sp, #40]
  a0:	ldr	x0, [sp, #32]
  a4:	lsr	x1, x0, #4
  a8:	ldr	x0, [sp, #32]
  ac:	add	x0, x1, x0
  b0:	and	x0, x0, #0xf0f0f0f0f0f0f0f
  b4:	str	x0, [sp, #32]
  b8:	ldr	x1, [sp, #40]
  bc:	ldr	x0, [sp, #32]
  c0:	add	x0, x1, x0
  c4:	str	x0, [sp, #40]
  c8:	ldr	x1, [sp, #40]
  cc:	mov	x0, #0x101010101010101     	// #72340172838076673
  d0:	mul	x0, x1, x0
  d4:	lsr	x0, x0, #56
  d8:	add	sp, sp, #0x30
  dc:	ret

_paritysi2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__paritydi2>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	lsr	x0, x0, #32
  10:	ldr	x1, [sp, #8]
  14:	eor	x0, x1, x0
  18:	str	x0, [sp, #8]
  1c:	ldr	x0, [sp, #8]
  20:	lsr	x0, x0, #16
  24:	ldr	x1, [sp, #8]
  28:	eor	x0, x1, x0
  2c:	str	x0, [sp, #8]
  30:	ldr	x0, [sp, #8]
  34:	lsr	x0, x0, #8
  38:	ldr	x1, [sp, #8]
  3c:	eor	x0, x1, x0
  40:	str	x0, [sp, #8]
  44:	ldr	x0, [sp, #8]
  48:	lsr	x0, x0, #4
  4c:	ldr	x1, [sp, #8]
  50:	eor	x0, x1, x0
  54:	str	x0, [sp, #8]
  58:	ldr	x0, [sp, #8]
  5c:	and	x0, x0, #0xf
  60:	str	x0, [sp, #8]
  64:	ldr	x0, [sp, #8]
  68:	mov	w1, w0
  6c:	mov	w0, #0x6996                	// #27030
  70:	asr	w0, w0, w1
  74:	and	w0, w0, #0x1
  78:	add	sp, sp, #0x10
  7c:	ret

_paritydi2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__parityti2>:
   0:	sub	sp, sp, #0x30
   4:	stp	x0, x1, [sp]
   8:	ldp	x0, x1, [sp]
   c:	stp	x0, x1, [sp, #16]
  10:	ldr	x1, [sp, #16]
  14:	ldr	x0, [sp, #24]
  18:	eor	x0, x1, x0
  1c:	str	x0, [sp, #40]
  20:	ldr	x0, [sp, #40]
  24:	lsr	x0, x0, #32
  28:	ldr	x1, [sp, #40]
  2c:	eor	x0, x1, x0
  30:	str	x0, [sp, #40]
  34:	ldr	x0, [sp, #40]
  38:	lsr	x0, x0, #16
  3c:	ldr	x1, [sp, #40]
  40:	eor	x0, x1, x0
  44:	str	x0, [sp, #40]
  48:	ldr	x0, [sp, #40]
  4c:	lsr	x0, x0, #8
  50:	ldr	x1, [sp, #40]
  54:	eor	x0, x1, x0
  58:	str	x0, [sp, #40]
  5c:	ldr	x0, [sp, #40]
  60:	lsr	x0, x0, #4
  64:	ldr	x1, [sp, #40]
  68:	eor	x0, x1, x0
  6c:	str	x0, [sp, #40]
  70:	ldr	x0, [sp, #40]
  74:	and	x0, x0, #0xf
  78:	str	x0, [sp, #40]
  7c:	ldr	x0, [sp, #40]
  80:	mov	w1, w0
  84:	mov	w0, #0x6996                	// #27030
  88:	asr	w0, w0, w1
  8c:	and	w0, w0, #0x1
  90:	add	sp, sp, #0x30
  94:	ret

_powisf2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__powisf2>:
   0:	sub	sp, sp, #0x20
   4:	str	s0, [sp, #12]
   8:	str	w0, [sp, #8]
   c:	ldr	w0, [sp, #8]
  10:	cmp	w0, #0x0
  14:	cneg	w0, w0, lt  // lt = tstop
  18:	str	w0, [sp, #28]
  1c:	ldr	w0, [sp, #28]
  20:	and	w0, w0, #0x1
  24:	cmp	w0, #0x0
  28:	b.eq	34 <__powisf2+0x34>  // b.none
  2c:	ldr	s0, [sp, #12]
  30:	b	38 <__powisf2+0x38>
  34:	fmov	s0, #1.000000000000000000e+00
  38:	str	s0, [sp, #24]
  3c:	b	6c <__powisf2+0x6c>
  40:	ldr	s0, [sp, #12]
  44:	fmul	s0, s0, s0
  48:	str	s0, [sp, #12]
  4c:	ldr	w0, [sp, #28]
  50:	and	w0, w0, #0x1
  54:	cmp	w0, #0x0
  58:	b.eq	6c <__powisf2+0x6c>  // b.none
  5c:	ldr	s1, [sp, #24]
  60:	ldr	s0, [sp, #12]
  64:	fmul	s0, s1, s0
  68:	str	s0, [sp, #24]
  6c:	ldr	w0, [sp, #28]
  70:	lsr	w0, w0, #1
  74:	str	w0, [sp, #28]
  78:	ldr	w0, [sp, #28]
  7c:	cmp	w0, #0x0
  80:	b.ne	40 <__powisf2+0x40>  // b.any
  84:	ldr	w0, [sp, #8]
  88:	cmp	w0, #0x0
  8c:	b.ge	a0 <__powisf2+0xa0>  // b.tcont
  90:	ldr	s0, [sp, #24]
  94:	fmov	s1, #1.000000000000000000e+00
  98:	fdiv	s0, s1, s0
  9c:	b	a4 <__powisf2+0xa4>
  a0:	ldr	s0, [sp, #24]
  a4:	add	sp, sp, #0x20
  a8:	ret

_powidf2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__powidf2>:
   0:	sub	sp, sp, #0x20
   4:	str	d0, [sp, #8]
   8:	str	w0, [sp, #4]
   c:	ldr	w0, [sp, #4]
  10:	cmp	w0, #0x0
  14:	cneg	w0, w0, lt  // lt = tstop
  18:	str	w0, [sp, #28]
  1c:	ldr	w0, [sp, #28]
  20:	and	w0, w0, #0x1
  24:	cmp	w0, #0x0
  28:	b.eq	34 <__powidf2+0x34>  // b.none
  2c:	ldr	d0, [sp, #8]
  30:	b	38 <__powidf2+0x38>
  34:	fmov	d0, #1.000000000000000000e+00
  38:	str	d0, [sp, #16]
  3c:	b	6c <__powidf2+0x6c>
  40:	ldr	d0, [sp, #8]
  44:	fmul	d0, d0, d0
  48:	str	d0, [sp, #8]
  4c:	ldr	w0, [sp, #28]
  50:	and	w0, w0, #0x1
  54:	cmp	w0, #0x0
  58:	b.eq	6c <__powidf2+0x6c>  // b.none
  5c:	ldr	d1, [sp, #16]
  60:	ldr	d0, [sp, #8]
  64:	fmul	d0, d1, d0
  68:	str	d0, [sp, #16]
  6c:	ldr	w0, [sp, #28]
  70:	lsr	w0, w0, #1
  74:	str	w0, [sp, #28]
  78:	ldr	w0, [sp, #28]
  7c:	cmp	w0, #0x0
  80:	b.ne	40 <__powidf2+0x40>  // b.any
  84:	ldr	w0, [sp, #4]
  88:	cmp	w0, #0x0
  8c:	b.ge	a0 <__powidf2+0xa0>  // b.tcont
  90:	ldr	d0, [sp, #16]
  94:	fmov	d1, #1.000000000000000000e+00
  98:	fdiv	d0, d1, d0
  9c:	b	a4 <__powidf2+0xa4>
  a0:	ldr	d0, [sp, #16]
  a4:	add	sp, sp, #0x20
  a8:	ret

_powixf2.o:     file format elf64-littleaarch64


_powitf2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__powitf2>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	str	q0, [sp, #32]
   c:	str	w0, [sp, #28]
  10:	ldr	w0, [sp, #28]
  14:	cmp	w0, #0x0
  18:	cneg	w0, w0, lt  // lt = tstop
  1c:	str	w0, [sp, #76]
  20:	ldr	w0, [sp, #76]
  24:	and	w0, w0, #0x1
  28:	cmp	w0, #0x0
  2c:	b.eq	38 <__powitf2+0x38>  // b.none
  30:	ldr	q0, [sp, #32]
  34:	b	44 <__powitf2+0x44>
  38:	adrp	x0, 0 <__powitf2>
  3c:	add	x0, x0, #0x0
  40:	ldr	q0, [x0]
  44:	str	q0, [sp, #48]
  48:	b	7c <__powitf2+0x7c>
  4c:	ldr	q1, [sp, #32]
  50:	ldr	q0, [sp, #32]
  54:	bl	0 <__multf3>
  58:	str	q0, [sp, #32]
  5c:	ldr	w0, [sp, #76]
  60:	and	w0, w0, #0x1
  64:	cmp	w0, #0x0
  68:	b.eq	7c <__powitf2+0x7c>  // b.none
  6c:	ldr	q1, [sp, #32]
  70:	ldr	q0, [sp, #48]
  74:	bl	0 <__multf3>
  78:	str	q0, [sp, #48]
  7c:	ldr	w0, [sp, #76]
  80:	lsr	w0, w0, #1
  84:	str	w0, [sp, #76]
  88:	ldr	w0, [sp, #76]
  8c:	cmp	w0, #0x0
  90:	b.ne	4c <__powitf2+0x4c>  // b.any
  94:	ldr	w0, [sp, #28]
  98:	cmp	w0, #0x0
  9c:	b.ge	b8 <__powitf2+0xb8>  // b.tcont
  a0:	ldr	q1, [sp, #48]
  a4:	adrp	x0, 0 <__powitf2>
  a8:	add	x0, x0, #0x0
  ac:	ldr	q0, [x0]
  b0:	bl	0 <__divtf3>
  b4:	b	bc <__powitf2+0xbc>
  b8:	ldr	q0, [sp, #48]
  bc:	ldp	x29, x30, [sp], #80
  c0:	ret

_mulhc3.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__mulhc3>:
   0:	sub	sp, sp, #0x30
   4:	str	h0, [sp, #14]
   8:	str	h1, [sp, #12]
   c:	str	h2, [sp, #10]
  10:	str	h3, [sp, #8]
  14:	ldr	h0, [sp, #14]
  18:	fcvt	s1, h0
  1c:	ldr	h0, [sp, #10]
  20:	fcvt	s0, h0
  24:	fmul	s0, s1, s0
  28:	fcvt	h0, s0
  2c:	str	h0, [sp, #36]
  30:	ldr	h0, [sp, #12]
  34:	fcvt	s1, h0
  38:	ldr	h0, [sp, #8]
  3c:	fcvt	s0, h0
  40:	fmul	s0, s1, s0
  44:	fcvt	h0, s0
  48:	str	h0, [sp, #34]
  4c:	ldr	h0, [sp, #14]
  50:	fcvt	s1, h0
  54:	ldr	h0, [sp, #8]
  58:	fcvt	s0, h0
  5c:	fmul	s0, s1, s0
  60:	fcvt	h0, s0
  64:	str	h0, [sp, #32]
  68:	ldr	h0, [sp, #12]
  6c:	fcvt	s1, h0
  70:	ldr	h0, [sp, #10]
  74:	fcvt	s0, h0
  78:	fmul	s0, s1, s0
  7c:	fcvt	h0, s0
  80:	str	h0, [sp, #30]
  84:	ldr	h0, [sp, #36]
  88:	fcvt	s1, h0
  8c:	ldr	h0, [sp, #34]
  90:	fcvt	s0, h0
  94:	fsub	s0, s1, s0
  98:	fcvt	h0, s0
  9c:	str	h0, [sp, #42]
  a0:	ldr	h0, [sp, #32]
  a4:	fcvt	s1, h0
  a8:	ldr	h0, [sp, #30]
  ac:	fcvt	s0, h0
  b0:	fadd	s0, s1, s0
  b4:	fcvt	h0, s0
  b8:	str	h0, [sp, #40]
  bc:	ldr	h0, [sp, #42]
  c0:	fcvt	s1, h0
  c4:	ldr	h0, [sp, #42]
  c8:	fcvt	s0, h0
  cc:	fcmp	s1, s0
  d0:	b.vc	678 <__mulhc3+0x678>
  d4:	ldr	h0, [sp, #40]
  d8:	fcvt	s1, h0
  dc:	ldr	h0, [sp, #40]
  e0:	fcvt	s0, h0
  e4:	fcmp	s1, s0
  e8:	b.vc	678 <__mulhc3+0x678>
  ec:	strb	wzr, [sp, #39]
  f0:	ldr	h0, [sp, #14]
  f4:	fcvt	s0, h0
  f8:	fabs	s0, s0
  fc:	fcvt	h0, s0
 100:	fcvt	s1, h0
 104:	mvni	v0.4h, #0x84, lsl #8
 108:	fcvt	s0, h0
 10c:	fcmp	s1, s0
 110:	cset	w0, le
 114:	and	w0, w0, #0xff
 118:	eor	w0, w0, #0x1
 11c:	and	w0, w0, #0xff
 120:	cmp	w0, #0x0
 124:	b.ne	160 <__mulhc3+0x160>  // b.any
 128:	ldr	h0, [sp, #12]
 12c:	fcvt	s0, h0
 130:	fabs	s0, s0
 134:	fcvt	h0, s0
 138:	fcvt	s1, h0
 13c:	mvni	v0.4h, #0x84, lsl #8
 140:	fcvt	s0, h0
 144:	fcmp	s1, s0
 148:	cset	w0, le
 14c:	and	w0, w0, #0xff
 150:	eor	w0, w0, #0x1
 154:	and	w0, w0, #0xff
 158:	cmp	w0, #0x0
 15c:	b.eq	280 <__mulhc3+0x280>  // b.none
 160:	ldr	h0, [sp, #14]
 164:	fcvt	s0, h0
 168:	fabs	s0, s0
 16c:	fcvt	h0, s0
 170:	fcvt	s1, h0
 174:	mvni	v0.4h, #0x84, lsl #8
 178:	fcvt	s0, h0
 17c:	fcmp	s1, s0
 180:	cset	w0, le
 184:	and	w0, w0, #0xff
 188:	eor	w0, w0, #0x1
 18c:	and	w0, w0, #0xff
 190:	scvtf	d0, w0
 194:	fcvt	h0, d0
 198:	ldrh	w0, [sp, #14]
 19c:	and	w0, w0, #0xffff8000
 1a0:	umov	w1, v0.h[0]
 1a4:	and	w1, w1, #0x7fff
 1a8:	orr	w0, w1, w0
 1ac:	dup	v0.4h, w0
 1b0:	str	h0, [sp, #14]
 1b4:	ldr	h0, [sp, #12]
 1b8:	fcvt	s0, h0
 1bc:	fabs	s0, s0
 1c0:	fcvt	h0, s0
 1c4:	fcvt	s1, h0
 1c8:	mvni	v0.4h, #0x84, lsl #8
 1cc:	fcvt	s0, h0
 1d0:	fcmp	s1, s0
 1d4:	cset	w0, le
 1d8:	and	w0, w0, #0xff
 1dc:	eor	w0, w0, #0x1
 1e0:	and	w0, w0, #0xff
 1e4:	scvtf	d0, w0
 1e8:	fcvt	h0, d0
 1ec:	ldrh	w0, [sp, #12]
 1f0:	and	w0, w0, #0xffff8000
 1f4:	umov	w1, v0.h[0]
 1f8:	and	w1, w1, #0x7fff
 1fc:	orr	w0, w1, w0
 200:	dup	v0.4h, w0
 204:	str	h0, [sp, #12]
 208:	ldr	h0, [sp, #10]
 20c:	fcvt	s1, h0
 210:	ldr	h0, [sp, #10]
 214:	fcvt	s0, h0
 218:	fcmp	s1, s0
 21c:	b.vc	240 <__mulhc3+0x240>
 220:	ldrh	w0, [sp, #10]
 224:	and	w0, w0, #0xffff8000
 228:	strh	wzr, [sp, #10]
 22c:	and	w0, w0, #0xffff
 230:	cmp	w0, #0x0
 234:	b.eq	240 <__mulhc3+0x240>  // b.none
 238:	movi	v0.4h, #0x80, lsl #8
 23c:	str	h0, [sp, #10]
 240:	ldr	h0, [sp, #8]
 244:	fcvt	s1, h0
 248:	ldr	h0, [sp, #8]
 24c:	fcvt	s0, h0
 250:	fcmp	s1, s0
 254:	b.vc	278 <__mulhc3+0x278>
 258:	ldrh	w0, [sp, #8]
 25c:	and	w0, w0, #0xffff8000
 260:	strh	wzr, [sp, #8]
 264:	and	w0, w0, #0xffff
 268:	cmp	w0, #0x0
 26c:	b.eq	278 <__mulhc3+0x278>  // b.none
 270:	movi	v0.4h, #0x80, lsl #8
 274:	str	h0, [sp, #8]
 278:	mov	w0, #0x1                   	// #1
 27c:	strb	w0, [sp, #39]
 280:	ldr	h0, [sp, #10]
 284:	fcvt	s0, h0
 288:	fabs	s0, s0
 28c:	fcvt	h0, s0
 290:	fcvt	s1, h0
 294:	mvni	v0.4h, #0x84, lsl #8
 298:	fcvt	s0, h0
 29c:	fcmp	s1, s0
 2a0:	cset	w0, le
 2a4:	and	w0, w0, #0xff
 2a8:	eor	w0, w0, #0x1
 2ac:	and	w0, w0, #0xff
 2b0:	cmp	w0, #0x0
 2b4:	b.ne	2f0 <__mulhc3+0x2f0>  // b.any
 2b8:	ldr	h0, [sp, #8]
 2bc:	fcvt	s0, h0
 2c0:	fabs	s0, s0
 2c4:	fcvt	h0, s0
 2c8:	fcvt	s1, h0
 2cc:	mvni	v0.4h, #0x84, lsl #8
 2d0:	fcvt	s0, h0
 2d4:	fcmp	s1, s0
 2d8:	cset	w0, le
 2dc:	and	w0, w0, #0xff
 2e0:	eor	w0, w0, #0x1
 2e4:	and	w0, w0, #0xff
 2e8:	cmp	w0, #0x0
 2ec:	b.eq	410 <__mulhc3+0x410>  // b.none
 2f0:	ldr	h0, [sp, #10]
 2f4:	fcvt	s0, h0
 2f8:	fabs	s0, s0
 2fc:	fcvt	h0, s0
 300:	fcvt	s1, h0
 304:	mvni	v0.4h, #0x84, lsl #8
 308:	fcvt	s0, h0
 30c:	fcmp	s1, s0
 310:	cset	w0, le
 314:	and	w0, w0, #0xff
 318:	eor	w0, w0, #0x1
 31c:	and	w0, w0, #0xff
 320:	scvtf	d0, w0
 324:	fcvt	h0, d0
 328:	ldrh	w0, [sp, #10]
 32c:	and	w0, w0, #0xffff8000
 330:	umov	w1, v0.h[0]
 334:	and	w1, w1, #0x7fff
 338:	orr	w0, w1, w0
 33c:	dup	v0.4h, w0
 340:	str	h0, [sp, #10]
 344:	ldr	h0, [sp, #8]
 348:	fcvt	s0, h0
 34c:	fabs	s0, s0
 350:	fcvt	h0, s0
 354:	fcvt	s1, h0
 358:	mvni	v0.4h, #0x84, lsl #8
 35c:	fcvt	s0, h0
 360:	fcmp	s1, s0
 364:	cset	w0, le
 368:	and	w0, w0, #0xff
 36c:	eor	w0, w0, #0x1
 370:	and	w0, w0, #0xff
 374:	scvtf	d0, w0
 378:	fcvt	h0, d0
 37c:	ldrh	w0, [sp, #8]
 380:	and	w0, w0, #0xffff8000
 384:	umov	w1, v0.h[0]
 388:	and	w1, w1, #0x7fff
 38c:	orr	w0, w1, w0
 390:	dup	v0.4h, w0
 394:	str	h0, [sp, #8]
 398:	ldr	h0, [sp, #14]
 39c:	fcvt	s1, h0
 3a0:	ldr	h0, [sp, #14]
 3a4:	fcvt	s0, h0
 3a8:	fcmp	s1, s0
 3ac:	b.vc	3d0 <__mulhc3+0x3d0>
 3b0:	ldrh	w0, [sp, #14]
 3b4:	and	w0, w0, #0xffff8000
 3b8:	strh	wzr, [sp, #14]
 3bc:	and	w0, w0, #0xffff
 3c0:	cmp	w0, #0x0
 3c4:	b.eq	3d0 <__mulhc3+0x3d0>  // b.none
 3c8:	movi	v0.4h, #0x80, lsl #8
 3cc:	str	h0, [sp, #14]
 3d0:	ldr	h0, [sp, #12]
 3d4:	fcvt	s1, h0
 3d8:	ldr	h0, [sp, #12]
 3dc:	fcvt	s0, h0
 3e0:	fcmp	s1, s0
 3e4:	b.vc	408 <__mulhc3+0x408>
 3e8:	ldrh	w0, [sp, #12]
 3ec:	and	w0, w0, #0xffff8000
 3f0:	strh	wzr, [sp, #12]
 3f4:	and	w0, w0, #0xffff
 3f8:	cmp	w0, #0x0
 3fc:	b.eq	408 <__mulhc3+0x408>  // b.none
 400:	movi	v0.4h, #0x80, lsl #8
 404:	str	h0, [sp, #12]
 408:	mov	w0, #0x1                   	// #1
 40c:	strb	w0, [sp, #39]
 410:	ldrb	w0, [sp, #39]
 414:	eor	w0, w0, #0x1
 418:	and	w0, w0, #0xff
 41c:	cmp	w0, #0x0
 420:	b.eq	5ec <__mulhc3+0x5ec>  // b.none
 424:	ldr	h0, [sp, #36]
 428:	fcvt	s0, h0
 42c:	fabs	s0, s0
 430:	fcvt	h0, s0
 434:	fcvt	s1, h0
 438:	mvni	v0.4h, #0x84, lsl #8
 43c:	fcvt	s0, h0
 440:	fcmp	s1, s0
 444:	cset	w0, le
 448:	and	w0, w0, #0xff
 44c:	eor	w0, w0, #0x1
 450:	and	w0, w0, #0xff
 454:	cmp	w0, #0x0
 458:	b.ne	504 <__mulhc3+0x504>  // b.any
 45c:	ldr	h0, [sp, #34]
 460:	fcvt	s0, h0
 464:	fabs	s0, s0
 468:	fcvt	h0, s0
 46c:	fcvt	s1, h0
 470:	mvni	v0.4h, #0x84, lsl #8
 474:	fcvt	s0, h0
 478:	fcmp	s1, s0
 47c:	cset	w0, le
 480:	and	w0, w0, #0xff
 484:	eor	w0, w0, #0x1
 488:	and	w0, w0, #0xff
 48c:	cmp	w0, #0x0
 490:	b.ne	504 <__mulhc3+0x504>  // b.any
 494:	ldr	h0, [sp, #32]
 498:	fcvt	s0, h0
 49c:	fabs	s0, s0
 4a0:	fcvt	h0, s0
 4a4:	fcvt	s1, h0
 4a8:	mvni	v0.4h, #0x84, lsl #8
 4ac:	fcvt	s0, h0
 4b0:	fcmp	s1, s0
 4b4:	cset	w0, le
 4b8:	and	w0, w0, #0xff
 4bc:	eor	w0, w0, #0x1
 4c0:	and	w0, w0, #0xff
 4c4:	cmp	w0, #0x0
 4c8:	b.ne	504 <__mulhc3+0x504>  // b.any
 4cc:	ldr	h0, [sp, #30]
 4d0:	fcvt	s0, h0
 4d4:	fabs	s0, s0
 4d8:	fcvt	h0, s0
 4dc:	fcvt	s1, h0
 4e0:	mvni	v0.4h, #0x84, lsl #8
 4e4:	fcvt	s0, h0
 4e8:	fcmp	s1, s0
 4ec:	cset	w0, le
 4f0:	and	w0, w0, #0xff
 4f4:	eor	w0, w0, #0x1
 4f8:	and	w0, w0, #0xff
 4fc:	cmp	w0, #0x0
 500:	b.eq	5ec <__mulhc3+0x5ec>  // b.none
 504:	ldr	h0, [sp, #14]
 508:	fcvt	s1, h0
 50c:	ldr	h0, [sp, #14]
 510:	fcvt	s0, h0
 514:	fcmp	s1, s0
 518:	b.vc	53c <__mulhc3+0x53c>
 51c:	ldrh	w0, [sp, #14]
 520:	and	w0, w0, #0xffff8000
 524:	strh	wzr, [sp, #14]
 528:	and	w0, w0, #0xffff
 52c:	cmp	w0, #0x0
 530:	b.eq	53c <__mulhc3+0x53c>  // b.none
 534:	movi	v0.4h, #0x80, lsl #8
 538:	str	h0, [sp, #14]
 53c:	ldr	h0, [sp, #12]
 540:	fcvt	s1, h0
 544:	ldr	h0, [sp, #12]
 548:	fcvt	s0, h0
 54c:	fcmp	s1, s0
 550:	b.vc	574 <__mulhc3+0x574>
 554:	ldrh	w0, [sp, #12]
 558:	and	w0, w0, #0xffff8000
 55c:	strh	wzr, [sp, #12]
 560:	and	w0, w0, #0xffff
 564:	cmp	w0, #0x0
 568:	b.eq	574 <__mulhc3+0x574>  // b.none
 56c:	movi	v0.4h, #0x80, lsl #8
 570:	str	h0, [sp, #12]
 574:	ldr	h0, [sp, #10]
 578:	fcvt	s1, h0
 57c:	ldr	h0, [sp, #10]
 580:	fcvt	s0, h0
 584:	fcmp	s1, s0
 588:	b.vc	5ac <__mulhc3+0x5ac>
 58c:	ldrh	w0, [sp, #10]
 590:	and	w0, w0, #0xffff8000
 594:	strh	wzr, [sp, #10]
 598:	and	w0, w0, #0xffff
 59c:	cmp	w0, #0x0
 5a0:	b.eq	5ac <__mulhc3+0x5ac>  // b.none
 5a4:	movi	v0.4h, #0x80, lsl #8
 5a8:	str	h0, [sp, #10]
 5ac:	ldr	h0, [sp, #8]
 5b0:	fcvt	s1, h0
 5b4:	ldr	h0, [sp, #8]
 5b8:	fcvt	s0, h0
 5bc:	fcmp	s1, s0
 5c0:	b.vc	5e4 <__mulhc3+0x5e4>
 5c4:	ldrh	w0, [sp, #8]
 5c8:	and	w0, w0, #0xffff8000
 5cc:	strh	wzr, [sp, #8]
 5d0:	and	w0, w0, #0xffff
 5d4:	cmp	w0, #0x0
 5d8:	b.eq	5e4 <__mulhc3+0x5e4>  // b.none
 5dc:	movi	v0.4h, #0x80, lsl #8
 5e0:	str	h0, [sp, #8]
 5e4:	mov	w0, #0x1                   	// #1
 5e8:	strb	w0, [sp, #39]
 5ec:	ldrb	w0, [sp, #39]
 5f0:	cmp	w0, #0x0
 5f4:	b.eq	678 <__mulhc3+0x678>  // b.none
 5f8:	ldr	h0, [sp, #14]
 5fc:	fcvt	s1, h0
 600:	ldr	h0, [sp, #10]
 604:	fcvt	s0, h0
 608:	fmul	s1, s1, s0
 60c:	ldr	h0, [sp, #12]
 610:	fcvt	s2, h0
 614:	ldr	h0, [sp, #8]
 618:	fcvt	s0, h0
 61c:	fmul	s0, s2, s0
 620:	fsub	s0, s1, s0
 624:	mov	w0, #0x7f800000            	// #2139095040
 628:	fmov	s1, w0
 62c:	fmul	s0, s0, s1
 630:	fcvt	h0, s0
 634:	str	h0, [sp, #42]
 638:	ldr	h0, [sp, #14]
 63c:	fcvt	s1, h0
 640:	ldr	h0, [sp, #8]
 644:	fcvt	s0, h0
 648:	fmul	s1, s1, s0
 64c:	ldr	h0, [sp, #12]
 650:	fcvt	s2, h0
 654:	ldr	h0, [sp, #10]
 658:	fcvt	s0, h0
 65c:	fmul	s0, s2, s0
 660:	fadd	s0, s1, s0
 664:	mov	w0, #0x7f800000            	// #2139095040
 668:	fmov	s1, w0
 66c:	fmul	s0, s0, s1
 670:	fcvt	h0, s0
 674:	str	h0, [sp, #40]
 678:	ldr	h0, [sp, #46]
 67c:	ldr	h1, [sp, #42]
 680:	str	h1, [sp, #26]
 684:	str	h0, [sp, #28]
 688:	ldr	h0, [sp, #42]
 68c:	str	h0, [sp, #44]
 690:	ldr	h0, [sp, #40]
 694:	ldr	h1, [sp, #44]
 698:	str	h1, [sp, #26]
 69c:	str	h0, [sp, #28]
 6a0:	ldr	h1, [sp, #44]
 6a4:	ldr	h0, [sp, #40]
 6a8:	mov	v2.h[0], v1.h[0]
 6ac:	mov	v1.h[0], v0.h[0]
 6b0:	mov	v0.h[0], v2.h[0]
 6b4:	add	sp, sp, #0x30
 6b8:	ret

_mulsc3.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__mulsc3>:
   0:	sub	sp, sp, #0x40
   4:	str	s0, [sp, #12]
   8:	str	s1, [sp, #8]
   c:	str	s2, [sp, #4]
  10:	str	s3, [sp]
  14:	ldr	s1, [sp, #12]
  18:	ldr	s0, [sp, #4]
  1c:	fmul	s0, s1, s0
  20:	str	s0, [sp, #40]
  24:	ldr	s1, [sp, #8]
  28:	ldr	s0, [sp]
  2c:	fmul	s0, s1, s0
  30:	str	s0, [sp, #36]
  34:	ldr	s1, [sp, #12]
  38:	ldr	s0, [sp]
  3c:	fmul	s0, s1, s0
  40:	str	s0, [sp, #32]
  44:	ldr	s1, [sp, #8]
  48:	ldr	s0, [sp, #4]
  4c:	fmul	s0, s1, s0
  50:	str	s0, [sp, #28]
  54:	ldr	s1, [sp, #40]
  58:	ldr	s0, [sp, #36]
  5c:	fsub	s0, s1, s0
  60:	str	s0, [sp, #52]
  64:	ldr	s1, [sp, #32]
  68:	ldr	s0, [sp, #28]
  6c:	fadd	s0, s1, s0
  70:	str	s0, [sp, #48]
  74:	ldr	s1, [sp, #52]
  78:	ldr	s0, [sp, #52]
  7c:	fcmp	s1, s0
  80:	b.vc	498 <__mulsc3+0x498>
  84:	ldr	s1, [sp, #48]
  88:	ldr	s0, [sp, #48]
  8c:	fcmp	s1, s0
  90:	b.vc	498 <__mulsc3+0x498>
  94:	strb	wzr, [sp, #47]
  98:	ldr	s0, [sp, #12]
  9c:	fabs	s0, s0
  a0:	mov	w0, #0x7f7fffff            	// #2139095039
  a4:	fmov	s1, w0
  a8:	fcmp	s0, s1
  ac:	cset	w0, le
  b0:	and	w0, w0, #0xff
  b4:	eor	w0, w0, #0x1
  b8:	and	w0, w0, #0xff
  bc:	cmp	w0, #0x0
  c0:	b.ne	f0 <__mulsc3+0xf0>  // b.any
  c4:	ldr	s0, [sp, #8]
  c8:	fabs	s0, s0
  cc:	mov	w0, #0x7f7fffff            	// #2139095039
  d0:	fmov	s1, w0
  d4:	fcmp	s0, s1
  d8:	cset	w0, le
  dc:	and	w0, w0, #0xff
  e0:	eor	w0, w0, #0x1
  e4:	and	w0, w0, #0xff
  e8:	cmp	w0, #0x0
  ec:	b.eq	1b8 <__mulsc3+0x1b8>  // b.none
  f0:	ldr	s0, [sp, #12]
  f4:	fabs	s0, s0
  f8:	mov	w0, #0x7f7fffff            	// #2139095039
  fc:	fmov	s1, w0
 100:	fcmp	s0, s1
 104:	cset	w0, le
 108:	and	w0, w0, #0xff
 10c:	eor	w0, w0, #0x1
 110:	and	w0, w0, #0xff
 114:	fmov	s0, w0
 118:	scvtf	s0, s0
 11c:	ldr	s1, [sp, #12]
 120:	movi	v2.2s, #0x80, lsl #24
 124:	bit	v0.8b, v1.8b, v2.8b
 128:	str	s0, [sp, #12]
 12c:	ldr	s0, [sp, #8]
 130:	fabs	s0, s0
 134:	mov	w0, #0x7f7fffff            	// #2139095039
 138:	fmov	s1, w0
 13c:	fcmp	s0, s1
 140:	cset	w0, le
 144:	and	w0, w0, #0xff
 148:	eor	w0, w0, #0x1
 14c:	and	w0, w0, #0xff
 150:	fmov	s0, w0
 154:	scvtf	s0, s0
 158:	ldr	s1, [sp, #8]
 15c:	movi	v2.2s, #0x80, lsl #24
 160:	bit	v0.8b, v1.8b, v2.8b
 164:	str	s0, [sp, #8]
 168:	ldr	s1, [sp, #4]
 16c:	ldr	s0, [sp, #4]
 170:	fcmp	s1, s0
 174:	b.vc	18c <__mulsc3+0x18c>
 178:	movi	v2.2s, #0x0
 17c:	ldr	s0, [sp, #4]
 180:	movi	v1.2s, #0x80, lsl #24
 184:	bif	v0.8b, v2.8b, v1.8b
 188:	str	s0, [sp, #4]
 18c:	ldr	s1, [sp]
 190:	ldr	s0, [sp]
 194:	fcmp	s1, s0
 198:	b.vc	1b0 <__mulsc3+0x1b0>
 19c:	movi	v2.2s, #0x0
 1a0:	ldr	s0, [sp]
 1a4:	movi	v1.2s, #0x80, lsl #24
 1a8:	bif	v0.8b, v2.8b, v1.8b
 1ac:	str	s0, [sp]
 1b0:	mov	w0, #0x1                   	// #1
 1b4:	strb	w0, [sp, #47]
 1b8:	ldr	s0, [sp, #4]
 1bc:	fabs	s0, s0
 1c0:	mov	w0, #0x7f7fffff            	// #2139095039
 1c4:	fmov	s1, w0
 1c8:	fcmp	s0, s1
 1cc:	cset	w0, le
 1d0:	and	w0, w0, #0xff
 1d4:	eor	w0, w0, #0x1
 1d8:	and	w0, w0, #0xff
 1dc:	cmp	w0, #0x0
 1e0:	b.ne	210 <__mulsc3+0x210>  // b.any
 1e4:	ldr	s0, [sp]
 1e8:	fabs	s0, s0
 1ec:	mov	w0, #0x7f7fffff            	// #2139095039
 1f0:	fmov	s1, w0
 1f4:	fcmp	s0, s1
 1f8:	cset	w0, le
 1fc:	and	w0, w0, #0xff
 200:	eor	w0, w0, #0x1
 204:	and	w0, w0, #0xff
 208:	cmp	w0, #0x0
 20c:	b.eq	2d8 <__mulsc3+0x2d8>  // b.none
 210:	ldr	s0, [sp, #4]
 214:	fabs	s0, s0
 218:	mov	w0, #0x7f7fffff            	// #2139095039
 21c:	fmov	s1, w0
 220:	fcmp	s0, s1
 224:	cset	w0, le
 228:	and	w0, w0, #0xff
 22c:	eor	w0, w0, #0x1
 230:	and	w0, w0, #0xff
 234:	fmov	s0, w0
 238:	scvtf	s0, s0
 23c:	ldr	s1, [sp, #4]
 240:	movi	v2.2s, #0x80, lsl #24
 244:	bit	v0.8b, v1.8b, v2.8b
 248:	str	s0, [sp, #4]
 24c:	ldr	s0, [sp]
 250:	fabs	s0, s0
 254:	mov	w0, #0x7f7fffff            	// #2139095039
 258:	fmov	s1, w0
 25c:	fcmp	s0, s1
 260:	cset	w0, le
 264:	and	w0, w0, #0xff
 268:	eor	w0, w0, #0x1
 26c:	and	w0, w0, #0xff
 270:	fmov	s0, w0
 274:	scvtf	s0, s0
 278:	ldr	s1, [sp]
 27c:	movi	v2.2s, #0x80, lsl #24
 280:	bit	v0.8b, v1.8b, v2.8b
 284:	str	s0, [sp]
 288:	ldr	s1, [sp, #12]
 28c:	ldr	s0, [sp, #12]
 290:	fcmp	s1, s0
 294:	b.vc	2ac <__mulsc3+0x2ac>
 298:	movi	v2.2s, #0x0
 29c:	ldr	s0, [sp, #12]
 2a0:	movi	v1.2s, #0x80, lsl #24
 2a4:	bif	v0.8b, v2.8b, v1.8b
 2a8:	str	s0, [sp, #12]
 2ac:	ldr	s1, [sp, #8]
 2b0:	ldr	s0, [sp, #8]
 2b4:	fcmp	s1, s0
 2b8:	b.vc	2d0 <__mulsc3+0x2d0>
 2bc:	movi	v2.2s, #0x0
 2c0:	ldr	s0, [sp, #8]
 2c4:	movi	v1.2s, #0x80, lsl #24
 2c8:	bif	v0.8b, v2.8b, v1.8b
 2cc:	str	s0, [sp, #8]
 2d0:	mov	w0, #0x1                   	// #1
 2d4:	strb	w0, [sp, #47]
 2d8:	ldrb	w0, [sp, #47]
 2dc:	eor	w0, w0, #0x1
 2e0:	and	w0, w0, #0xff
 2e4:	cmp	w0, #0x0
 2e8:	b.eq	434 <__mulsc3+0x434>  // b.none
 2ec:	ldr	s0, [sp, #40]
 2f0:	fabs	s0, s0
 2f4:	mov	w0, #0x7f7fffff            	// #2139095039
 2f8:	fmov	s1, w0
 2fc:	fcmp	s0, s1
 300:	cset	w0, le
 304:	and	w0, w0, #0xff
 308:	eor	w0, w0, #0x1
 30c:	and	w0, w0, #0xff
 310:	cmp	w0, #0x0
 314:	b.ne	39c <__mulsc3+0x39c>  // b.any
 318:	ldr	s0, [sp, #36]
 31c:	fabs	s0, s0
 320:	mov	w0, #0x7f7fffff            	// #2139095039
 324:	fmov	s1, w0
 328:	fcmp	s0, s1
 32c:	cset	w0, le
 330:	and	w0, w0, #0xff
 334:	eor	w0, w0, #0x1
 338:	and	w0, w0, #0xff
 33c:	cmp	w0, #0x0
 340:	b.ne	39c <__mulsc3+0x39c>  // b.any
 344:	ldr	s0, [sp, #32]
 348:	fabs	s0, s0
 34c:	mov	w0, #0x7f7fffff            	// #2139095039
 350:	fmov	s1, w0
 354:	fcmp	s0, s1
 358:	cset	w0, le
 35c:	and	w0, w0, #0xff
 360:	eor	w0, w0, #0x1
 364:	and	w0, w0, #0xff
 368:	cmp	w0, #0x0
 36c:	b.ne	39c <__mulsc3+0x39c>  // b.any
 370:	ldr	s0, [sp, #28]
 374:	fabs	s0, s0
 378:	mov	w0, #0x7f7fffff            	// #2139095039
 37c:	fmov	s1, w0
 380:	fcmp	s0, s1
 384:	cset	w0, le
 388:	and	w0, w0, #0xff
 38c:	eor	w0, w0, #0x1
 390:	and	w0, w0, #0xff
 394:	cmp	w0, #0x0
 398:	b.eq	434 <__mulsc3+0x434>  // b.none
 39c:	ldr	s1, [sp, #12]
 3a0:	ldr	s0, [sp, #12]
 3a4:	fcmp	s1, s0
 3a8:	b.vc	3c0 <__mulsc3+0x3c0>
 3ac:	movi	v2.2s, #0x0
 3b0:	ldr	s0, [sp, #12]
 3b4:	movi	v1.2s, #0x80, lsl #24
 3b8:	bif	v0.8b, v2.8b, v1.8b
 3bc:	str	s0, [sp, #12]
 3c0:	ldr	s1, [sp, #8]
 3c4:	ldr	s0, [sp, #8]
 3c8:	fcmp	s1, s0
 3cc:	b.vc	3e4 <__mulsc3+0x3e4>
 3d0:	movi	v2.2s, #0x0
 3d4:	ldr	s0, [sp, #8]
 3d8:	movi	v1.2s, #0x80, lsl #24
 3dc:	bif	v0.8b, v2.8b, v1.8b
 3e0:	str	s0, [sp, #8]
 3e4:	ldr	s1, [sp, #4]
 3e8:	ldr	s0, [sp, #4]
 3ec:	fcmp	s1, s0
 3f0:	b.vc	408 <__mulsc3+0x408>
 3f4:	movi	v2.2s, #0x0
 3f8:	ldr	s0, [sp, #4]
 3fc:	movi	v1.2s, #0x80, lsl #24
 400:	bif	v0.8b, v2.8b, v1.8b
 404:	str	s0, [sp, #4]
 408:	ldr	s1, [sp]
 40c:	ldr	s0, [sp]
 410:	fcmp	s1, s0
 414:	b.vc	42c <__mulsc3+0x42c>
 418:	movi	v2.2s, #0x0
 41c:	ldr	s0, [sp]
 420:	movi	v1.2s, #0x80, lsl #24
 424:	bif	v0.8b, v2.8b, v1.8b
 428:	str	s0, [sp]
 42c:	mov	w0, #0x1                   	// #1
 430:	strb	w0, [sp, #47]
 434:	ldrb	w0, [sp, #47]
 438:	cmp	w0, #0x0
 43c:	b.eq	498 <__mulsc3+0x498>  // b.none
 440:	ldr	s1, [sp, #12]
 444:	ldr	s0, [sp, #4]
 448:	fmul	s1, s1, s0
 44c:	ldr	s2, [sp, #8]
 450:	ldr	s0, [sp]
 454:	fmul	s0, s2, s0
 458:	fsub	s0, s1, s0
 45c:	mov	w0, #0x7f800000            	// #2139095040
 460:	fmov	s1, w0
 464:	fmul	s0, s0, s1
 468:	str	s0, [sp, #52]
 46c:	ldr	s1, [sp, #12]
 470:	ldr	s0, [sp]
 474:	fmul	s1, s1, s0
 478:	ldr	s2, [sp, #8]
 47c:	ldr	s0, [sp, #4]
 480:	fmul	s0, s2, s0
 484:	fadd	s0, s1, s0
 488:	mov	w0, #0x7f800000            	// #2139095040
 48c:	fmov	s1, w0
 490:	fmul	s0, s0, s1
 494:	str	s0, [sp, #48]
 498:	ldr	s0, [sp, #60]
 49c:	ldr	s1, [sp, #52]
 4a0:	str	s1, [sp, #20]
 4a4:	str	s0, [sp, #24]
 4a8:	ldr	s0, [sp, #52]
 4ac:	str	s0, [sp, #56]
 4b0:	ldr	s0, [sp, #48]
 4b4:	ldr	s1, [sp, #56]
 4b8:	str	s1, [sp, #20]
 4bc:	str	s0, [sp, #24]
 4c0:	ldr	s1, [sp, #56]
 4c4:	ldr	s0, [sp, #48]
 4c8:	fmov	s2, s1
 4cc:	fmov	s1, s0
 4d0:	fmov	s0, s2
 4d4:	add	sp, sp, #0x40
 4d8:	ret

_muldc3.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__muldc3>:
   0:	sub	sp, sp, #0x80
   4:	str	d0, [sp, #24]
   8:	str	d1, [sp, #16]
   c:	str	d2, [sp, #8]
  10:	str	d3, [sp]
  14:	ldr	d1, [sp, #24]
  18:	ldr	d0, [sp, #8]
  1c:	fmul	d0, d1, d0
  20:	str	d0, [sp, #80]
  24:	ldr	d1, [sp, #16]
  28:	ldr	d0, [sp]
  2c:	fmul	d0, d1, d0
  30:	str	d0, [sp, #72]
  34:	ldr	d1, [sp, #24]
  38:	ldr	d0, [sp]
  3c:	fmul	d0, d1, d0
  40:	str	d0, [sp, #64]
  44:	ldr	d1, [sp, #16]
  48:	ldr	d0, [sp, #8]
  4c:	fmul	d0, d1, d0
  50:	str	d0, [sp, #56]
  54:	ldr	d1, [sp, #80]
  58:	ldr	d0, [sp, #72]
  5c:	fsub	d0, d1, d0
  60:	str	d0, [sp, #104]
  64:	ldr	d1, [sp, #64]
  68:	ldr	d0, [sp, #56]
  6c:	fadd	d0, d1, d0
  70:	str	d0, [sp, #96]
  74:	ldr	d1, [sp, #104]
  78:	ldr	d0, [sp, #104]
  7c:	fcmp	d1, d0
  80:	b.vc	4b8 <__muldc3+0x4b8>
  84:	ldr	d1, [sp, #96]
  88:	ldr	d0, [sp, #96]
  8c:	fcmp	d1, d0
  90:	b.vc	4b8 <__muldc3+0x4b8>
  94:	strb	wzr, [sp, #95]
  98:	ldr	d0, [sp, #24]
  9c:	fabs	d0, d0
  a0:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
  a4:	fmov	d1, x0
  a8:	fcmp	d0, d1
  ac:	cset	w0, le
  b0:	and	w0, w0, #0xff
  b4:	eor	w0, w0, #0x1
  b8:	and	w0, w0, #0xff
  bc:	cmp	w0, #0x0
  c0:	b.ne	f0 <__muldc3+0xf0>  // b.any
  c4:	ldr	d0, [sp, #16]
  c8:	fabs	d0, d0
  cc:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
  d0:	fmov	d1, x0
  d4:	fcmp	d0, d1
  d8:	cset	w0, le
  dc:	and	w0, w0, #0xff
  e0:	eor	w0, w0, #0x1
  e4:	and	w0, w0, #0xff
  e8:	cmp	w0, #0x0
  ec:	b.eq	1c0 <__muldc3+0x1c0>  // b.none
  f0:	ldr	d0, [sp, #24]
  f4:	fabs	d0, d0
  f8:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
  fc:	fmov	d1, x0
 100:	fcmp	d0, d1
 104:	cset	w0, le
 108:	and	w0, w0, #0xff
 10c:	eor	w0, w0, #0x1
 110:	and	w0, w0, #0xff
 114:	scvtf	d0, w0
 118:	ldr	d1, [sp, #24]
 11c:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 120:	fmov	d2, x0
 124:	bit	v0.8b, v1.8b, v2.8b
 128:	str	d0, [sp, #24]
 12c:	ldr	d0, [sp, #16]
 130:	fabs	d0, d0
 134:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 138:	fmov	d1, x0
 13c:	fcmp	d0, d1
 140:	cset	w0, le
 144:	and	w0, w0, #0xff
 148:	eor	w0, w0, #0x1
 14c:	and	w0, w0, #0xff
 150:	scvtf	d0, w0
 154:	ldr	d1, [sp, #16]
 158:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 15c:	fmov	d2, x0
 160:	bit	v0.8b, v1.8b, v2.8b
 164:	str	d0, [sp, #16]
 168:	ldr	d1, [sp, #8]
 16c:	ldr	d0, [sp, #8]
 170:	fcmp	d1, d0
 174:	b.vc	190 <__muldc3+0x190>
 178:	movi	d1, #0x0
 17c:	ldr	d0, [sp, #8]
 180:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 184:	fmov	d2, x0
 188:	bif	v0.8b, v1.8b, v2.8b
 18c:	str	d0, [sp, #8]
 190:	ldr	d1, [sp]
 194:	ldr	d0, [sp]
 198:	fcmp	d1, d0
 19c:	b.vc	1b8 <__muldc3+0x1b8>
 1a0:	movi	d1, #0x0
 1a4:	ldr	d0, [sp]
 1a8:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 1ac:	fmov	d2, x0
 1b0:	bif	v0.8b, v1.8b, v2.8b
 1b4:	str	d0, [sp]
 1b8:	mov	w0, #0x1                   	// #1
 1bc:	strb	w0, [sp, #95]
 1c0:	ldr	d0, [sp, #8]
 1c4:	fabs	d0, d0
 1c8:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 1cc:	fmov	d1, x0
 1d0:	fcmp	d0, d1
 1d4:	cset	w0, le
 1d8:	and	w0, w0, #0xff
 1dc:	eor	w0, w0, #0x1
 1e0:	and	w0, w0, #0xff
 1e4:	cmp	w0, #0x0
 1e8:	b.ne	218 <__muldc3+0x218>  // b.any
 1ec:	ldr	d0, [sp]
 1f0:	fabs	d0, d0
 1f4:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 1f8:	fmov	d1, x0
 1fc:	fcmp	d0, d1
 200:	cset	w0, le
 204:	and	w0, w0, #0xff
 208:	eor	w0, w0, #0x1
 20c:	and	w0, w0, #0xff
 210:	cmp	w0, #0x0
 214:	b.eq	2e8 <__muldc3+0x2e8>  // b.none
 218:	ldr	d0, [sp, #8]
 21c:	fabs	d0, d0
 220:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 224:	fmov	d1, x0
 228:	fcmp	d0, d1
 22c:	cset	w0, le
 230:	and	w0, w0, #0xff
 234:	eor	w0, w0, #0x1
 238:	and	w0, w0, #0xff
 23c:	scvtf	d0, w0
 240:	ldr	d1, [sp, #8]
 244:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 248:	fmov	d2, x0
 24c:	bit	v0.8b, v1.8b, v2.8b
 250:	str	d0, [sp, #8]
 254:	ldr	d0, [sp]
 258:	fabs	d0, d0
 25c:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 260:	fmov	d1, x0
 264:	fcmp	d0, d1
 268:	cset	w0, le
 26c:	and	w0, w0, #0xff
 270:	eor	w0, w0, #0x1
 274:	and	w0, w0, #0xff
 278:	scvtf	d0, w0
 27c:	ldr	d1, [sp]
 280:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 284:	fmov	d2, x0
 288:	bit	v0.8b, v1.8b, v2.8b
 28c:	str	d0, [sp]
 290:	ldr	d1, [sp, #24]
 294:	ldr	d0, [sp, #24]
 298:	fcmp	d1, d0
 29c:	b.vc	2b8 <__muldc3+0x2b8>
 2a0:	movi	d1, #0x0
 2a4:	ldr	d0, [sp, #24]
 2a8:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 2ac:	fmov	d2, x0
 2b0:	bif	v0.8b, v1.8b, v2.8b
 2b4:	str	d0, [sp, #24]
 2b8:	ldr	d1, [sp, #16]
 2bc:	ldr	d0, [sp, #16]
 2c0:	fcmp	d1, d0
 2c4:	b.vc	2e0 <__muldc3+0x2e0>
 2c8:	movi	d1, #0x0
 2cc:	ldr	d0, [sp, #16]
 2d0:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 2d4:	fmov	d2, x0
 2d8:	bif	v0.8b, v1.8b, v2.8b
 2dc:	str	d0, [sp, #16]
 2e0:	mov	w0, #0x1                   	// #1
 2e4:	strb	w0, [sp, #95]
 2e8:	ldrb	w0, [sp, #95]
 2ec:	eor	w0, w0, #0x1
 2f0:	and	w0, w0, #0xff
 2f4:	cmp	w0, #0x0
 2f8:	b.eq	454 <__muldc3+0x454>  // b.none
 2fc:	ldr	d0, [sp, #80]
 300:	fabs	d0, d0
 304:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 308:	fmov	d1, x0
 30c:	fcmp	d0, d1
 310:	cset	w0, le
 314:	and	w0, w0, #0xff
 318:	eor	w0, w0, #0x1
 31c:	and	w0, w0, #0xff
 320:	cmp	w0, #0x0
 324:	b.ne	3ac <__muldc3+0x3ac>  // b.any
 328:	ldr	d0, [sp, #72]
 32c:	fabs	d0, d0
 330:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 334:	fmov	d1, x0
 338:	fcmp	d0, d1
 33c:	cset	w0, le
 340:	and	w0, w0, #0xff
 344:	eor	w0, w0, #0x1
 348:	and	w0, w0, #0xff
 34c:	cmp	w0, #0x0
 350:	b.ne	3ac <__muldc3+0x3ac>  // b.any
 354:	ldr	d0, [sp, #64]
 358:	fabs	d0, d0
 35c:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 360:	fmov	d1, x0
 364:	fcmp	d0, d1
 368:	cset	w0, le
 36c:	and	w0, w0, #0xff
 370:	eor	w0, w0, #0x1
 374:	and	w0, w0, #0xff
 378:	cmp	w0, #0x0
 37c:	b.ne	3ac <__muldc3+0x3ac>  // b.any
 380:	ldr	d0, [sp, #56]
 384:	fabs	d0, d0
 388:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 38c:	fmov	d1, x0
 390:	fcmp	d0, d1
 394:	cset	w0, le
 398:	and	w0, w0, #0xff
 39c:	eor	w0, w0, #0x1
 3a0:	and	w0, w0, #0xff
 3a4:	cmp	w0, #0x0
 3a8:	b.eq	454 <__muldc3+0x454>  // b.none
 3ac:	ldr	d1, [sp, #24]
 3b0:	ldr	d0, [sp, #24]
 3b4:	fcmp	d1, d0
 3b8:	b.vc	3d4 <__muldc3+0x3d4>
 3bc:	movi	d1, #0x0
 3c0:	ldr	d0, [sp, #24]
 3c4:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 3c8:	fmov	d2, x0
 3cc:	bif	v0.8b, v1.8b, v2.8b
 3d0:	str	d0, [sp, #24]
 3d4:	ldr	d1, [sp, #16]
 3d8:	ldr	d0, [sp, #16]
 3dc:	fcmp	d1, d0
 3e0:	b.vc	3fc <__muldc3+0x3fc>
 3e4:	movi	d1, #0x0
 3e8:	ldr	d0, [sp, #16]
 3ec:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 3f0:	fmov	d2, x0
 3f4:	bif	v0.8b, v1.8b, v2.8b
 3f8:	str	d0, [sp, #16]
 3fc:	ldr	d1, [sp, #8]
 400:	ldr	d0, [sp, #8]
 404:	fcmp	d1, d0
 408:	b.vc	424 <__muldc3+0x424>
 40c:	movi	d1, #0x0
 410:	ldr	d0, [sp, #8]
 414:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 418:	fmov	d2, x0
 41c:	bif	v0.8b, v1.8b, v2.8b
 420:	str	d0, [sp, #8]
 424:	ldr	d1, [sp]
 428:	ldr	d0, [sp]
 42c:	fcmp	d1, d0
 430:	b.vc	44c <__muldc3+0x44c>
 434:	movi	d1, #0x0
 438:	ldr	d0, [sp]
 43c:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 440:	fmov	d2, x0
 444:	bif	v0.8b, v1.8b, v2.8b
 448:	str	d0, [sp]
 44c:	mov	w0, #0x1                   	// #1
 450:	strb	w0, [sp, #95]
 454:	ldrb	w0, [sp, #95]
 458:	cmp	w0, #0x0
 45c:	b.eq	4b8 <__muldc3+0x4b8>  // b.none
 460:	ldr	d1, [sp, #24]
 464:	ldr	d0, [sp, #8]
 468:	fmul	d1, d1, d0
 46c:	ldr	d2, [sp, #16]
 470:	ldr	d0, [sp]
 474:	fmul	d0, d2, d0
 478:	fsub	d0, d1, d0
 47c:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
 480:	fmov	d1, x0
 484:	fmul	d0, d0, d1
 488:	str	d0, [sp, #104]
 48c:	ldr	d1, [sp, #24]
 490:	ldr	d0, [sp]
 494:	fmul	d1, d1, d0
 498:	ldr	d2, [sp, #16]
 49c:	ldr	d0, [sp, #8]
 4a0:	fmul	d0, d2, d0
 4a4:	fadd	d0, d1, d0
 4a8:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
 4ac:	fmov	d1, x0
 4b0:	fmul	d0, d0, d1
 4b4:	str	d0, [sp, #96]
 4b8:	ldr	d0, [sp, #120]
 4bc:	ldr	d1, [sp, #104]
 4c0:	str	d1, [sp, #40]
 4c4:	str	d0, [sp, #48]
 4c8:	ldr	d0, [sp, #104]
 4cc:	str	d0, [sp, #112]
 4d0:	ldr	d0, [sp, #96]
 4d4:	ldr	d1, [sp, #112]
 4d8:	str	d1, [sp, #40]
 4dc:	str	d0, [sp, #48]
 4e0:	ldr	d1, [sp, #112]
 4e4:	ldr	d0, [sp, #96]
 4e8:	fmov	d2, d1
 4ec:	fmov	d1, d0
 4f0:	fmov	d0, d2
 4f4:	add	sp, sp, #0x80
 4f8:	ret

_mulxc3.o:     file format elf64-littleaarch64


_multc3.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__multc3>:
   0:	stp	x29, x30, [sp, #-464]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	str	q0, [sp, #272]
  10:	str	q1, [sp, #256]
  14:	str	q2, [sp, #240]
  18:	str	q3, [sp, #224]
  1c:	ldr	q1, [sp, #240]
  20:	ldr	q0, [sp, #272]
  24:	bl	0 <__multf3>
  28:	str	q0, [sp, #368]
  2c:	ldr	q1, [sp, #224]
  30:	ldr	q0, [sp, #256]
  34:	bl	0 <__multf3>
  38:	str	q0, [sp, #352]
  3c:	ldr	q1, [sp, #224]
  40:	ldr	q0, [sp, #272]
  44:	bl	0 <__multf3>
  48:	str	q0, [sp, #336]
  4c:	ldr	q1, [sp, #240]
  50:	ldr	q0, [sp, #256]
  54:	bl	0 <__multf3>
  58:	str	q0, [sp, #320]
  5c:	ldr	q1, [sp, #352]
  60:	ldr	q0, [sp, #368]
  64:	bl	0 <__subtf3>
  68:	str	q0, [sp, #416]
  6c:	ldr	q1, [sp, #320]
  70:	ldr	q0, [sp, #336]
  74:	bl	0 <__addtf3>
  78:	str	q0, [sp, #400]
  7c:	ldr	q1, [sp, #416]
  80:	ldr	q0, [sp, #416]
  84:	bl	0 <__unordtf2>
  88:	cmp	w0, #0x0
  8c:	b.eq	878 <__multc3+0x878>  // b.none
  90:	ldr	q1, [sp, #400]
  94:	ldr	q0, [sp, #400]
  98:	bl	0 <__unordtf2>
  9c:	cmp	w0, #0x0
  a0:	b.eq	878 <__multc3+0x878>  // b.none
  a4:	strb	wzr, [sp, #399]
  a8:	ldr	x0, [sp, #272]
  ac:	str	x0, [sp, #32]
  b0:	ldr	x0, [sp, #280]
  b4:	and	x0, x0, #0x7fffffffffffffff
  b8:	str	x0, [sp, #40]
  bc:	mov	w19, #0x1                   	// #1
  c0:	adrp	x0, 0 <__multc3>
  c4:	add	x0, x0, #0x0
  c8:	ldr	q1, [x0]
  cc:	ldr	q0, [sp, #32]
  d0:	bl	0 <__unordtf2>
  d4:	cmp	w0, #0x0
  d8:	b.ne	fc <__multc3+0xfc>  // b.any
  dc:	adrp	x0, 0 <__multc3>
  e0:	add	x0, x0, #0x0
  e4:	ldr	q1, [x0]
  e8:	ldr	q0, [sp, #32]
  ec:	bl	0 <__letf2>
  f0:	cmp	w0, #0x0
  f4:	b.le	fc <__multc3+0xfc>
  f8:	mov	w19, #0x0                   	// #0
  fc:	and	w0, w19, #0xff
 100:	eor	w0, w0, #0x1
 104:	and	w0, w0, #0xff
 108:	cmp	w0, #0x0
 10c:	b.ne	178 <__multc3+0x178>  // b.any
 110:	ldr	x0, [sp, #256]
 114:	str	x0, [sp, #48]
 118:	ldr	x0, [sp, #264]
 11c:	and	x0, x0, #0x7fffffffffffffff
 120:	str	x0, [sp, #56]
 124:	mov	w19, #0x1                   	// #1
 128:	adrp	x0, 0 <__multc3>
 12c:	add	x0, x0, #0x0
 130:	ldr	q1, [x0]
 134:	ldr	q0, [sp, #48]
 138:	bl	0 <__unordtf2>
 13c:	cmp	w0, #0x0
 140:	b.ne	164 <__multc3+0x164>  // b.any
 144:	adrp	x0, 0 <__multc3>
 148:	add	x0, x0, #0x0
 14c:	ldr	q1, [x0]
 150:	ldr	q0, [sp, #48]
 154:	bl	0 <__letf2>
 158:	cmp	w0, #0x0
 15c:	b.le	164 <__multc3+0x164>
 160:	mov	w19, #0x0                   	// #0
 164:	and	w0, w19, #0xff
 168:	eor	w0, w0, #0x1
 16c:	and	w0, w0, #0xff
 170:	cmp	w0, #0x0
 174:	b.eq	300 <__multc3+0x300>  // b.none
 178:	ldr	x0, [sp, #272]
 17c:	str	x0, [sp, #64]
 180:	ldr	x0, [sp, #280]
 184:	and	x0, x0, #0x7fffffffffffffff
 188:	str	x0, [sp, #72]
 18c:	mov	w19, #0x1                   	// #1
 190:	adrp	x0, 0 <__multc3>
 194:	add	x0, x0, #0x0
 198:	ldr	q1, [x0]
 19c:	ldr	q0, [sp, #64]
 1a0:	bl	0 <__unordtf2>
 1a4:	cmp	w0, #0x0
 1a8:	b.ne	1cc <__multc3+0x1cc>  // b.any
 1ac:	adrp	x0, 0 <__multc3>
 1b0:	add	x0, x0, #0x0
 1b4:	ldr	q1, [x0]
 1b8:	ldr	q0, [sp, #64]
 1bc:	bl	0 <__letf2>
 1c0:	cmp	w0, #0x0
 1c4:	b.le	1cc <__multc3+0x1cc>
 1c8:	mov	w19, #0x0                   	// #0
 1cc:	and	w0, w19, #0xff
 1d0:	eor	w0, w0, #0x1
 1d4:	and	w0, w0, #0xff
 1d8:	bl	0 <__floatsitf>
 1dc:	str	q0, [sp, #32]
 1e0:	ldr	x0, [sp, #32]
 1e4:	str	x0, [sp, #272]
 1e8:	ldr	x0, [sp, #40]
 1ec:	and	x1, x0, #0x7fffffffffffffff
 1f0:	ldr	x0, [sp, #280]
 1f4:	and	x0, x0, #0x8000000000000000
 1f8:	orr	x0, x1, x0
 1fc:	str	x0, [sp, #280]
 200:	ldr	x0, [sp, #256]
 204:	str	x0, [sp, #80]
 208:	ldr	x0, [sp, #264]
 20c:	and	x0, x0, #0x7fffffffffffffff
 210:	str	x0, [sp, #88]
 214:	mov	w19, #0x1                   	// #1
 218:	adrp	x0, 0 <__multc3>
 21c:	add	x0, x0, #0x0
 220:	ldr	q1, [x0]
 224:	ldr	q0, [sp, #80]
 228:	bl	0 <__unordtf2>
 22c:	cmp	w0, #0x0
 230:	b.ne	254 <__multc3+0x254>  // b.any
 234:	adrp	x0, 0 <__multc3>
 238:	add	x0, x0, #0x0
 23c:	ldr	q1, [x0]
 240:	ldr	q0, [sp, #80]
 244:	bl	0 <__letf2>
 248:	cmp	w0, #0x0
 24c:	b.le	254 <__multc3+0x254>
 250:	mov	w19, #0x0                   	// #0
 254:	and	w0, w19, #0xff
 258:	eor	w0, w0, #0x1
 25c:	and	w0, w0, #0xff
 260:	bl	0 <__floatsitf>
 264:	str	q0, [sp, #32]
 268:	ldr	x0, [sp, #32]
 26c:	str	x0, [sp, #256]
 270:	ldr	x0, [sp, #40]
 274:	and	x1, x0, #0x7fffffffffffffff
 278:	ldr	x0, [sp, #264]
 27c:	and	x0, x0, #0x8000000000000000
 280:	orr	x0, x1, x0
 284:	str	x0, [sp, #264]
 288:	ldr	q1, [sp, #240]
 28c:	ldr	q0, [sp, #240]
 290:	bl	0 <__unordtf2>
 294:	cmp	w0, #0x0
 298:	b.eq	2c0 <__multc3+0x2c0>  // b.none
 29c:	ldr	x0, [sp, #248]
 2a0:	and	x0, x0, #0x8000000000000000
 2a4:	stp	xzr, xzr, [sp, #240]
 2a8:	cmp	x0, #0x0
 2ac:	b.eq	2c0 <__multc3+0x2c0>  // b.none
 2b0:	adrp	x0, 0 <__multc3>
 2b4:	add	x0, x0, #0x0
 2b8:	ldr	q0, [x0]
 2bc:	str	q0, [sp, #240]
 2c0:	ldr	q1, [sp, #224]
 2c4:	ldr	q0, [sp, #224]
 2c8:	bl	0 <__unordtf2>
 2cc:	cmp	w0, #0x0
 2d0:	b.eq	2f8 <__multc3+0x2f8>  // b.none
 2d4:	ldr	x0, [sp, #232]
 2d8:	and	x0, x0, #0x8000000000000000
 2dc:	stp	xzr, xzr, [sp, #224]
 2e0:	cmp	x0, #0x0
 2e4:	b.eq	2f8 <__multc3+0x2f8>  // b.none
 2e8:	adrp	x0, 0 <__multc3>
 2ec:	add	x0, x0, #0x0
 2f0:	ldr	q0, [x0]
 2f4:	str	q0, [sp, #224]
 2f8:	mov	w0, #0x1                   	// #1
 2fc:	strb	w0, [sp, #399]
 300:	ldr	x0, [sp, #240]
 304:	str	x0, [sp, #96]
 308:	ldr	x0, [sp, #248]
 30c:	and	x0, x0, #0x7fffffffffffffff
 310:	str	x0, [sp, #104]
 314:	mov	w19, #0x1                   	// #1
 318:	adrp	x0, 0 <__multc3>
 31c:	add	x0, x0, #0x0
 320:	ldr	q1, [x0]
 324:	ldr	q0, [sp, #96]
 328:	bl	0 <__unordtf2>
 32c:	cmp	w0, #0x0
 330:	b.ne	354 <__multc3+0x354>  // b.any
 334:	adrp	x0, 0 <__multc3>
 338:	add	x0, x0, #0x0
 33c:	ldr	q1, [x0]
 340:	ldr	q0, [sp, #96]
 344:	bl	0 <__letf2>
 348:	cmp	w0, #0x0
 34c:	b.le	354 <__multc3+0x354>
 350:	mov	w19, #0x0                   	// #0
 354:	and	w0, w19, #0xff
 358:	eor	w0, w0, #0x1
 35c:	and	w0, w0, #0xff
 360:	cmp	w0, #0x0
 364:	b.ne	3d0 <__multc3+0x3d0>  // b.any
 368:	ldr	x0, [sp, #224]
 36c:	str	x0, [sp, #112]
 370:	ldr	x0, [sp, #232]
 374:	and	x0, x0, #0x7fffffffffffffff
 378:	str	x0, [sp, #120]
 37c:	mov	w19, #0x1                   	// #1
 380:	adrp	x0, 0 <__multc3>
 384:	add	x0, x0, #0x0
 388:	ldr	q1, [x0]
 38c:	ldr	q0, [sp, #112]
 390:	bl	0 <__unordtf2>
 394:	cmp	w0, #0x0
 398:	b.ne	3bc <__multc3+0x3bc>  // b.any
 39c:	adrp	x0, 0 <__multc3>
 3a0:	add	x0, x0, #0x0
 3a4:	ldr	q1, [x0]
 3a8:	ldr	q0, [sp, #112]
 3ac:	bl	0 <__letf2>
 3b0:	cmp	w0, #0x0
 3b4:	b.le	3bc <__multc3+0x3bc>
 3b8:	mov	w19, #0x0                   	// #0
 3bc:	and	w0, w19, #0xff
 3c0:	eor	w0, w0, #0x1
 3c4:	and	w0, w0, #0xff
 3c8:	cmp	w0, #0x0
 3cc:	b.eq	558 <__multc3+0x558>  // b.none
 3d0:	ldr	x0, [sp, #240]
 3d4:	str	x0, [sp, #128]
 3d8:	ldr	x0, [sp, #248]
 3dc:	and	x0, x0, #0x7fffffffffffffff
 3e0:	str	x0, [sp, #136]
 3e4:	mov	w19, #0x1                   	// #1
 3e8:	adrp	x0, 0 <__multc3>
 3ec:	add	x0, x0, #0x0
 3f0:	ldr	q1, [x0]
 3f4:	ldr	q0, [sp, #128]
 3f8:	bl	0 <__unordtf2>
 3fc:	cmp	w0, #0x0
 400:	b.ne	424 <__multc3+0x424>  // b.any
 404:	adrp	x0, 0 <__multc3>
 408:	add	x0, x0, #0x0
 40c:	ldr	q1, [x0]
 410:	ldr	q0, [sp, #128]
 414:	bl	0 <__letf2>
 418:	cmp	w0, #0x0
 41c:	b.le	424 <__multc3+0x424>
 420:	mov	w19, #0x0                   	// #0
 424:	and	w0, w19, #0xff
 428:	eor	w0, w0, #0x1
 42c:	and	w0, w0, #0xff
 430:	bl	0 <__floatsitf>
 434:	str	q0, [sp, #32]
 438:	ldr	x0, [sp, #32]
 43c:	str	x0, [sp, #240]
 440:	ldr	x0, [sp, #40]
 444:	and	x1, x0, #0x7fffffffffffffff
 448:	ldr	x0, [sp, #248]
 44c:	and	x0, x0, #0x8000000000000000
 450:	orr	x0, x1, x0
 454:	str	x0, [sp, #248]
 458:	ldr	x0, [sp, #224]
 45c:	str	x0, [sp, #144]
 460:	ldr	x0, [sp, #232]
 464:	and	x0, x0, #0x7fffffffffffffff
 468:	str	x0, [sp, #152]
 46c:	mov	w19, #0x1                   	// #1
 470:	adrp	x0, 0 <__multc3>
 474:	add	x0, x0, #0x0
 478:	ldr	q1, [x0]
 47c:	ldr	q0, [sp, #144]
 480:	bl	0 <__unordtf2>
 484:	cmp	w0, #0x0
 488:	b.ne	4ac <__multc3+0x4ac>  // b.any
 48c:	adrp	x0, 0 <__multc3>
 490:	add	x0, x0, #0x0
 494:	ldr	q1, [x0]
 498:	ldr	q0, [sp, #144]
 49c:	bl	0 <__letf2>
 4a0:	cmp	w0, #0x0
 4a4:	b.le	4ac <__multc3+0x4ac>
 4a8:	mov	w19, #0x0                   	// #0
 4ac:	and	w0, w19, #0xff
 4b0:	eor	w0, w0, #0x1
 4b4:	and	w0, w0, #0xff
 4b8:	bl	0 <__floatsitf>
 4bc:	str	q0, [sp, #32]
 4c0:	ldr	x0, [sp, #32]
 4c4:	str	x0, [sp, #224]
 4c8:	ldr	x0, [sp, #40]
 4cc:	and	x1, x0, #0x7fffffffffffffff
 4d0:	ldr	x0, [sp, #232]
 4d4:	and	x0, x0, #0x8000000000000000
 4d8:	orr	x0, x1, x0
 4dc:	str	x0, [sp, #232]
 4e0:	ldr	q1, [sp, #272]
 4e4:	ldr	q0, [sp, #272]
 4e8:	bl	0 <__unordtf2>
 4ec:	cmp	w0, #0x0
 4f0:	b.eq	518 <__multc3+0x518>  // b.none
 4f4:	ldr	x0, [sp, #280]
 4f8:	and	x0, x0, #0x8000000000000000
 4fc:	stp	xzr, xzr, [sp, #272]
 500:	cmp	x0, #0x0
 504:	b.eq	518 <__multc3+0x518>  // b.none
 508:	adrp	x0, 0 <__multc3>
 50c:	add	x0, x0, #0x0
 510:	ldr	q0, [x0]
 514:	str	q0, [sp, #272]
 518:	ldr	q1, [sp, #256]
 51c:	ldr	q0, [sp, #256]
 520:	bl	0 <__unordtf2>
 524:	cmp	w0, #0x0
 528:	b.eq	550 <__multc3+0x550>  // b.none
 52c:	ldr	x0, [sp, #264]
 530:	and	x0, x0, #0x8000000000000000
 534:	stp	xzr, xzr, [sp, #256]
 538:	cmp	x0, #0x0
 53c:	b.eq	550 <__multc3+0x550>  // b.none
 540:	adrp	x0, 0 <__multc3>
 544:	add	x0, x0, #0x0
 548:	ldr	q0, [x0]
 54c:	str	q0, [sp, #256]
 550:	mov	w0, #0x1                   	// #1
 554:	strb	w0, [sp, #399]
 558:	ldrb	w0, [sp, #399]
 55c:	eor	w0, w0, #0x1
 560:	and	w0, w0, #0xff
 564:	cmp	w0, #0x0
 568:	b.eq	7f4 <__multc3+0x7f4>  // b.none
 56c:	ldr	x0, [sp, #368]
 570:	str	x0, [sp, #160]
 574:	ldr	x0, [sp, #376]
 578:	and	x0, x0, #0x7fffffffffffffff
 57c:	str	x0, [sp, #168]
 580:	mov	w19, #0x1                   	// #1
 584:	adrp	x0, 0 <__multc3>
 588:	add	x0, x0, #0x0
 58c:	ldr	q1, [x0]
 590:	ldr	q0, [sp, #160]
 594:	bl	0 <__unordtf2>
 598:	cmp	w0, #0x0
 59c:	b.ne	5c0 <__multc3+0x5c0>  // b.any
 5a0:	adrp	x0, 0 <__multc3>
 5a4:	add	x0, x0, #0x0
 5a8:	ldr	q1, [x0]
 5ac:	ldr	q0, [sp, #160]
 5b0:	bl	0 <__letf2>
 5b4:	cmp	w0, #0x0
 5b8:	b.le	5c0 <__multc3+0x5c0>
 5bc:	mov	w19, #0x0                   	// #0
 5c0:	and	w0, w19, #0xff
 5c4:	eor	w0, w0, #0x1
 5c8:	and	w0, w0, #0xff
 5cc:	cmp	w0, #0x0
 5d0:	b.ne	70c <__multc3+0x70c>  // b.any
 5d4:	ldr	x0, [sp, #352]
 5d8:	str	x0, [sp, #176]
 5dc:	ldr	x0, [sp, #360]
 5e0:	and	x0, x0, #0x7fffffffffffffff
 5e4:	str	x0, [sp, #184]
 5e8:	mov	w19, #0x1                   	// #1
 5ec:	adrp	x0, 0 <__multc3>
 5f0:	add	x0, x0, #0x0
 5f4:	ldr	q1, [x0]
 5f8:	ldr	q0, [sp, #176]
 5fc:	bl	0 <__unordtf2>
 600:	cmp	w0, #0x0
 604:	b.ne	628 <__multc3+0x628>  // b.any
 608:	adrp	x0, 0 <__multc3>
 60c:	add	x0, x0, #0x0
 610:	ldr	q1, [x0]
 614:	ldr	q0, [sp, #176]
 618:	bl	0 <__letf2>
 61c:	cmp	w0, #0x0
 620:	b.le	628 <__multc3+0x628>
 624:	mov	w19, #0x0                   	// #0
 628:	and	w0, w19, #0xff
 62c:	eor	w0, w0, #0x1
 630:	and	w0, w0, #0xff
 634:	cmp	w0, #0x0
 638:	b.ne	70c <__multc3+0x70c>  // b.any
 63c:	ldr	x0, [sp, #336]
 640:	str	x0, [sp, #192]
 644:	ldr	x0, [sp, #344]
 648:	and	x0, x0, #0x7fffffffffffffff
 64c:	str	x0, [sp, #200]
 650:	mov	w19, #0x1                   	// #1
 654:	adrp	x0, 0 <__multc3>
 658:	add	x0, x0, #0x0
 65c:	ldr	q1, [x0]
 660:	ldr	q0, [sp, #192]
 664:	bl	0 <__unordtf2>
 668:	cmp	w0, #0x0
 66c:	b.ne	690 <__multc3+0x690>  // b.any
 670:	adrp	x0, 0 <__multc3>
 674:	add	x0, x0, #0x0
 678:	ldr	q1, [x0]
 67c:	ldr	q0, [sp, #192]
 680:	bl	0 <__letf2>
 684:	cmp	w0, #0x0
 688:	b.le	690 <__multc3+0x690>
 68c:	mov	w19, #0x0                   	// #0
 690:	and	w0, w19, #0xff
 694:	eor	w0, w0, #0x1
 698:	and	w0, w0, #0xff
 69c:	cmp	w0, #0x0
 6a0:	b.ne	70c <__multc3+0x70c>  // b.any
 6a4:	ldr	x0, [sp, #320]
 6a8:	str	x0, [sp, #208]
 6ac:	ldr	x0, [sp, #328]
 6b0:	and	x0, x0, #0x7fffffffffffffff
 6b4:	str	x0, [sp, #216]
 6b8:	mov	w19, #0x1                   	// #1
 6bc:	adrp	x0, 0 <__multc3>
 6c0:	add	x0, x0, #0x0
 6c4:	ldr	q1, [x0]
 6c8:	ldr	q0, [sp, #208]
 6cc:	bl	0 <__unordtf2>
 6d0:	cmp	w0, #0x0
 6d4:	b.ne	6f8 <__multc3+0x6f8>  // b.any
 6d8:	adrp	x0, 0 <__multc3>
 6dc:	add	x0, x0, #0x0
 6e0:	ldr	q1, [x0]
 6e4:	ldr	q0, [sp, #208]
 6e8:	bl	0 <__letf2>
 6ec:	cmp	w0, #0x0
 6f0:	b.le	6f8 <__multc3+0x6f8>
 6f4:	mov	w19, #0x0                   	// #0
 6f8:	and	w0, w19, #0xff
 6fc:	eor	w0, w0, #0x1
 700:	and	w0, w0, #0xff
 704:	cmp	w0, #0x0
 708:	b.eq	7f4 <__multc3+0x7f4>  // b.none
 70c:	ldr	q1, [sp, #272]
 710:	ldr	q0, [sp, #272]
 714:	bl	0 <__unordtf2>
 718:	cmp	w0, #0x0
 71c:	b.eq	744 <__multc3+0x744>  // b.none
 720:	ldr	x0, [sp, #280]
 724:	and	x0, x0, #0x8000000000000000
 728:	stp	xzr, xzr, [sp, #272]
 72c:	cmp	x0, #0x0
 730:	b.eq	744 <__multc3+0x744>  // b.none
 734:	adrp	x0, 0 <__multc3>
 738:	add	x0, x0, #0x0
 73c:	ldr	q0, [x0]
 740:	str	q0, [sp, #272]
 744:	ldr	q1, [sp, #256]
 748:	ldr	q0, [sp, #256]
 74c:	bl	0 <__unordtf2>
 750:	cmp	w0, #0x0
 754:	b.eq	77c <__multc3+0x77c>  // b.none
 758:	ldr	x0, [sp, #264]
 75c:	and	x0, x0, #0x8000000000000000
 760:	stp	xzr, xzr, [sp, #256]
 764:	cmp	x0, #0x0
 768:	b.eq	77c <__multc3+0x77c>  // b.none
 76c:	adrp	x0, 0 <__multc3>
 770:	add	x0, x0, #0x0
 774:	ldr	q0, [x0]
 778:	str	q0, [sp, #256]
 77c:	ldr	q1, [sp, #240]
 780:	ldr	q0, [sp, #240]
 784:	bl	0 <__unordtf2>
 788:	cmp	w0, #0x0
 78c:	b.eq	7b4 <__multc3+0x7b4>  // b.none
 790:	ldr	x0, [sp, #248]
 794:	and	x0, x0, #0x8000000000000000
 798:	stp	xzr, xzr, [sp, #240]
 79c:	cmp	x0, #0x0
 7a0:	b.eq	7b4 <__multc3+0x7b4>  // b.none
 7a4:	adrp	x0, 0 <__multc3>
 7a8:	add	x0, x0, #0x0
 7ac:	ldr	q0, [x0]
 7b0:	str	q0, [sp, #240]
 7b4:	ldr	q1, [sp, #224]
 7b8:	ldr	q0, [sp, #224]
 7bc:	bl	0 <__unordtf2>
 7c0:	cmp	w0, #0x0
 7c4:	b.eq	7ec <__multc3+0x7ec>  // b.none
 7c8:	ldr	x0, [sp, #232]
 7cc:	and	x0, x0, #0x8000000000000000
 7d0:	stp	xzr, xzr, [sp, #224]
 7d4:	cmp	x0, #0x0
 7d8:	b.eq	7ec <__multc3+0x7ec>  // b.none
 7dc:	adrp	x0, 0 <__multc3>
 7e0:	add	x0, x0, #0x0
 7e4:	ldr	q0, [x0]
 7e8:	str	q0, [sp, #224]
 7ec:	mov	w0, #0x1                   	// #1
 7f0:	strb	w0, [sp, #399]
 7f4:	ldrb	w0, [sp, #399]
 7f8:	cmp	w0, #0x0
 7fc:	b.eq	878 <__multc3+0x878>  // b.none
 800:	ldr	q1, [sp, #240]
 804:	ldr	q0, [sp, #272]
 808:	bl	0 <__multf3>
 80c:	str	q0, [sp, #32]
 810:	ldr	q1, [sp, #224]
 814:	ldr	q0, [sp, #256]
 818:	bl	0 <__multf3>
 81c:	mov	v1.16b, v0.16b
 820:	ldr	q0, [sp, #32]
 824:	bl	0 <__subtf3>
 828:	adrp	x0, 0 <__multc3>
 82c:	add	x0, x0, #0x0
 830:	ldr	q1, [x0]
 834:	bl	0 <__multf3>
 838:	str	q0, [sp, #416]
 83c:	ldr	q1, [sp, #224]
 840:	ldr	q0, [sp, #272]
 844:	bl	0 <__multf3>
 848:	str	q0, [sp, #32]
 84c:	ldr	q1, [sp, #240]
 850:	ldr	q0, [sp, #256]
 854:	bl	0 <__multf3>
 858:	mov	v1.16b, v0.16b
 85c:	ldr	q0, [sp, #32]
 860:	bl	0 <__addtf3>
 864:	adrp	x0, 0 <__multc3>
 868:	add	x0, x0, #0x0
 86c:	ldr	q1, [x0]
 870:	bl	0 <__multf3>
 874:	str	q0, [sp, #400]
 878:	ldr	q0, [sp, #448]
 87c:	ldr	q2, [sp, #416]
 880:	str	q2, [sp, #288]
 884:	str	q0, [sp, #304]
 888:	ldr	q0, [sp, #416]
 88c:	str	q0, [sp, #432]
 890:	ldr	q0, [sp, #400]
 894:	ldr	q2, [sp, #432]
 898:	str	q2, [sp, #288]
 89c:	str	q0, [sp, #304]
 8a0:	ldr	q2, [sp, #432]
 8a4:	ldr	q0, [sp, #400]
 8a8:	mov	v4.16b, v2.16b
 8ac:	mov	v2.16b, v0.16b
 8b0:	mov	v0.16b, v4.16b
 8b4:	mov	v1.16b, v2.16b
 8b8:	ldr	x19, [sp, #16]
 8bc:	ldp	x29, x30, [sp], #464
 8c0:	ret

_divhc3.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__divhc3>:
   0:	sub	sp, sp, #0x20
   4:	str	h0, [sp, #14]
   8:	str	h1, [sp, #12]
   c:	str	h2, [sp, #10]
  10:	str	h3, [sp, #8]
  14:	ldr	h0, [sp, #10]
  18:	fcvt	s0, h0
  1c:	fabs	s0, s0
  20:	fcvt	h1, s0
  24:	ldr	h0, [sp, #8]
  28:	fcvt	s0, h0
  2c:	fabs	s0, s0
  30:	fcvt	h0, s0
  34:	fcvt	s1, h1
  38:	fcvt	s0, h0
  3c:	fcmpe	s1, s0
  40:	b.pl	f4 <__divhc3+0xf4>  // b.nfrst
  44:	ldr	h0, [sp, #10]
  48:	fcvt	s1, h0
  4c:	ldr	h0, [sp, #8]
  50:	fcvt	s0, h0
  54:	fdiv	s0, s1, s0
  58:	fcvt	h0, s0
  5c:	str	h0, [sp, #22]
  60:	ldr	h0, [sp, #10]
  64:	fcvt	s1, h0
  68:	ldr	h0, [sp, #22]
  6c:	fcvt	s0, h0
  70:	fmul	s1, s1, s0
  74:	ldr	h0, [sp, #8]
  78:	fcvt	s0, h0
  7c:	fadd	s0, s1, s0
  80:	fcvt	h0, s0
  84:	str	h0, [sp, #20]
  88:	ldr	h0, [sp, #14]
  8c:	fcvt	s1, h0
  90:	ldr	h0, [sp, #22]
  94:	fcvt	s0, h0
  98:	fmul	s1, s1, s0
  9c:	ldr	h0, [sp, #12]
  a0:	fcvt	s0, h0
  a4:	fadd	s1, s1, s0
  a8:	ldr	h0, [sp, #20]
  ac:	fcvt	s0, h0
  b0:	fdiv	s0, s1, s0
  b4:	fcvt	h0, s0
  b8:	str	h0, [sp, #26]
  bc:	ldr	h0, [sp, #12]
  c0:	fcvt	s1, h0
  c4:	ldr	h0, [sp, #22]
  c8:	fcvt	s0, h0
  cc:	fmul	s1, s1, s0
  d0:	ldr	h0, [sp, #14]
  d4:	fcvt	s0, h0
  d8:	fsub	s1, s1, s0
  dc:	ldr	h0, [sp, #20]
  e0:	fcvt	s0, h0
  e4:	fdiv	s0, s1, s0
  e8:	fcvt	h0, s0
  ec:	str	h0, [sp, #24]
  f0:	b	1a0 <__divhc3+0x1a0>
  f4:	ldr	h0, [sp, #8]
  f8:	fcvt	s1, h0
  fc:	ldr	h0, [sp, #10]
 100:	fcvt	s0, h0
 104:	fdiv	s0, s1, s0
 108:	fcvt	h0, s0
 10c:	str	h0, [sp, #22]
 110:	ldr	h0, [sp, #8]
 114:	fcvt	s1, h0
 118:	ldr	h0, [sp, #22]
 11c:	fcvt	s0, h0
 120:	fmul	s1, s1, s0
 124:	ldr	h0, [sp, #10]
 128:	fcvt	s0, h0
 12c:	fadd	s0, s1, s0
 130:	fcvt	h0, s0
 134:	str	h0, [sp, #20]
 138:	ldr	h0, [sp, #12]
 13c:	fcvt	s1, h0
 140:	ldr	h0, [sp, #22]
 144:	fcvt	s0, h0
 148:	fmul	s1, s1, s0
 14c:	ldr	h0, [sp, #14]
 150:	fcvt	s0, h0
 154:	fadd	s1, s1, s0
 158:	ldr	h0, [sp, #20]
 15c:	fcvt	s0, h0
 160:	fdiv	s0, s1, s0
 164:	fcvt	h0, s0
 168:	str	h0, [sp, #26]
 16c:	ldr	h0, [sp, #12]
 170:	fcvt	s1, h0
 174:	ldr	h0, [sp, #14]
 178:	fcvt	s2, h0
 17c:	ldr	h0, [sp, #22]
 180:	fcvt	s0, h0
 184:	fmul	s0, s2, s0
 188:	fsub	s1, s1, s0
 18c:	ldr	h0, [sp, #20]
 190:	fcvt	s0, h0
 194:	fdiv	s0, s1, s0
 198:	fcvt	h0, s0
 19c:	str	h0, [sp, #24]
 1a0:	ldr	h0, [sp, #26]
 1a4:	fcvt	s1, h0
 1a8:	ldr	h0, [sp, #26]
 1ac:	fcvt	s0, h0
 1b0:	fcmp	s1, s0
 1b4:	b.vc	6a0 <__divhc3+0x6a0>
 1b8:	ldr	h0, [sp, #24]
 1bc:	fcvt	s1, h0
 1c0:	ldr	h0, [sp, #24]
 1c4:	fcvt	s0, h0
 1c8:	fcmp	s1, s0
 1cc:	b.vc	6a0 <__divhc3+0x6a0>
 1d0:	ldr	h0, [sp, #10]
 1d4:	fcvt	s0, h0
 1d8:	fcmp	s0, #0.0
 1dc:	b.ne	28c <__divhc3+0x28c>  // b.any
 1e0:	ldr	h0, [sp, #8]
 1e4:	fcvt	s0, h0
 1e8:	fcmp	s0, #0.0
 1ec:	b.ne	28c <__divhc3+0x28c>  // b.any
 1f0:	ldr	h0, [sp, #14]
 1f4:	fcvt	s1, h0
 1f8:	ldr	h0, [sp, #14]
 1fc:	fcvt	s0, h0
 200:	fcmp	s1, s0
 204:	b.vc	220 <__divhc3+0x220>
 208:	ldr	h0, [sp, #12]
 20c:	fcvt	s1, h0
 210:	ldr	h0, [sp, #12]
 214:	fcvt	s0, h0
 218:	fcmp	s1, s0
 21c:	b.vs	28c <__divhc3+0x28c>
 220:	ldrh	w0, [sp, #10]
 224:	and	w0, w0, #0xffff8000
 228:	movi	v0.4h, #0x7c, lsl #8
 22c:	and	w0, w0, #0xffff
 230:	cmp	w0, #0x0
 234:	b.eq	23c <__divhc3+0x23c>  // b.none
 238:	movi	v0.4h, #0xfc, lsl #8
 23c:	fcvt	s1, h0
 240:	ldr	h0, [sp, #14]
 244:	fcvt	s0, h0
 248:	fmul	s0, s1, s0
 24c:	fcvt	h0, s0
 250:	str	h0, [sp, #26]
 254:	ldrh	w0, [sp, #10]
 258:	and	w0, w0, #0xffff8000
 25c:	movi	v0.4h, #0x7c, lsl #8
 260:	and	w0, w0, #0xffff
 264:	cmp	w0, #0x0
 268:	b.eq	270 <__divhc3+0x270>  // b.none
 26c:	movi	v0.4h, #0xfc, lsl #8
 270:	fcvt	s1, h0
 274:	ldr	h0, [sp, #12]
 278:	fcvt	s0, h0
 27c:	fmul	s0, s1, s0
 280:	fcvt	h0, s0
 284:	str	h0, [sp, #24]
 288:	b	6a0 <__divhc3+0x6a0>
 28c:	ldr	h0, [sp, #14]
 290:	fcvt	s0, h0
 294:	fabs	s0, s0
 298:	fcvt	h0, s0
 29c:	fcvt	s1, h0
 2a0:	mvni	v0.4h, #0x84, lsl #8
 2a4:	fcvt	s0, h0
 2a8:	fcmp	s1, s0
 2ac:	cset	w0, le
 2b0:	and	w0, w0, #0xff
 2b4:	eor	w0, w0, #0x1
 2b8:	and	w0, w0, #0xff
 2bc:	cmp	w0, #0x0
 2c0:	b.ne	2fc <__divhc3+0x2fc>  // b.any
 2c4:	ldr	h0, [sp, #12]
 2c8:	fcvt	s0, h0
 2cc:	fabs	s0, s0
 2d0:	fcvt	h0, s0
 2d4:	fcvt	s1, h0
 2d8:	mvni	v0.4h, #0x84, lsl #8
 2dc:	fcvt	s0, h0
 2e0:	fcmp	s1, s0
 2e4:	cset	w0, le
 2e8:	and	w0, w0, #0xff
 2ec:	eor	w0, w0, #0x1
 2f0:	and	w0, w0, #0xff
 2f4:	cmp	w0, #0x0
 2f8:	b.eq	498 <__divhc3+0x498>  // b.none
 2fc:	ldr	h0, [sp, #10]
 300:	fcvt	s0, h0
 304:	fabs	s0, s0
 308:	fcvt	h0, s0
 30c:	fcvt	s1, h0
 310:	mvni	v0.4h, #0x84, lsl #8
 314:	fcvt	s0, h0
 318:	fcmp	s1, s0
 31c:	cset	w0, hi  // hi = pmore
 320:	and	w0, w0, #0xff
 324:	eor	w0, w0, #0x1
 328:	and	w0, w0, #0xff
 32c:	cmp	w0, #0x0
 330:	b.eq	498 <__divhc3+0x498>  // b.none
 334:	ldr	h0, [sp, #8]
 338:	fcvt	s0, h0
 33c:	fabs	s0, s0
 340:	fcvt	h0, s0
 344:	fcvt	s1, h0
 348:	mvni	v0.4h, #0x84, lsl #8
 34c:	fcvt	s0, h0
 350:	fcmp	s1, s0
 354:	cset	w0, hi  // hi = pmore
 358:	and	w0, w0, #0xff
 35c:	eor	w0, w0, #0x1
 360:	and	w0, w0, #0xff
 364:	cmp	w0, #0x0
 368:	b.eq	498 <__divhc3+0x498>  // b.none
 36c:	ldr	h0, [sp, #14]
 370:	fcvt	s0, h0
 374:	fabs	s0, s0
 378:	fcvt	h0, s0
 37c:	fcvt	s1, h0
 380:	mvni	v0.4h, #0x84, lsl #8
 384:	fcvt	s0, h0
 388:	fcmp	s1, s0
 38c:	cset	w0, le
 390:	and	w0, w0, #0xff
 394:	eor	w0, w0, #0x1
 398:	and	w0, w0, #0xff
 39c:	scvtf	d0, w0
 3a0:	fcvt	h0, d0
 3a4:	ldrh	w0, [sp, #14]
 3a8:	and	w0, w0, #0xffff8000
 3ac:	umov	w1, v0.h[0]
 3b0:	and	w1, w1, #0x7fff
 3b4:	orr	w0, w1, w0
 3b8:	dup	v0.4h, w0
 3bc:	str	h0, [sp, #14]
 3c0:	ldr	h0, [sp, #12]
 3c4:	fcvt	s0, h0
 3c8:	fabs	s0, s0
 3cc:	fcvt	h0, s0
 3d0:	fcvt	s1, h0
 3d4:	mvni	v0.4h, #0x84, lsl #8
 3d8:	fcvt	s0, h0
 3dc:	fcmp	s1, s0
 3e0:	cset	w0, le
 3e4:	and	w0, w0, #0xff
 3e8:	eor	w0, w0, #0x1
 3ec:	and	w0, w0, #0xff
 3f0:	scvtf	d0, w0
 3f4:	fcvt	h0, d0
 3f8:	ldrh	w0, [sp, #12]
 3fc:	and	w0, w0, #0xffff8000
 400:	umov	w1, v0.h[0]
 404:	and	w1, w1, #0x7fff
 408:	orr	w0, w1, w0
 40c:	dup	v0.4h, w0
 410:	str	h0, [sp, #12]
 414:	ldr	h0, [sp, #14]
 418:	fcvt	s1, h0
 41c:	ldr	h0, [sp, #10]
 420:	fcvt	s0, h0
 424:	fmul	s1, s1, s0
 428:	ldr	h0, [sp, #12]
 42c:	fcvt	s2, h0
 430:	ldr	h0, [sp, #8]
 434:	fcvt	s0, h0
 438:	fmul	s0, s2, s0
 43c:	fadd	s0, s1, s0
 440:	mov	w0, #0x7f800000            	// #2139095040
 444:	fmov	s1, w0
 448:	fmul	s0, s0, s1
 44c:	fcvt	h0, s0
 450:	str	h0, [sp, #26]
 454:	ldr	h0, [sp, #12]
 458:	fcvt	s1, h0
 45c:	ldr	h0, [sp, #10]
 460:	fcvt	s0, h0
 464:	fmul	s1, s1, s0
 468:	ldr	h0, [sp, #14]
 46c:	fcvt	s2, h0
 470:	ldr	h0, [sp, #8]
 474:	fcvt	s0, h0
 478:	fmul	s0, s2, s0
 47c:	fsub	s0, s1, s0
 480:	mov	w0, #0x7f800000            	// #2139095040
 484:	fmov	s1, w0
 488:	fmul	s0, s0, s1
 48c:	fcvt	h0, s0
 490:	str	h0, [sp, #24]
 494:	b	6a0 <__divhc3+0x6a0>
 498:	ldr	h0, [sp, #10]
 49c:	fcvt	s0, h0
 4a0:	fabs	s0, s0
 4a4:	fcvt	h0, s0
 4a8:	fcvt	s1, h0
 4ac:	mvni	v0.4h, #0x84, lsl #8
 4b0:	fcvt	s0, h0
 4b4:	fcmp	s1, s0
 4b8:	cset	w0, le
 4bc:	and	w0, w0, #0xff
 4c0:	eor	w0, w0, #0x1
 4c4:	and	w0, w0, #0xff
 4c8:	cmp	w0, #0x0
 4cc:	b.ne	508 <__divhc3+0x508>  // b.any
 4d0:	ldr	h0, [sp, #8]
 4d4:	fcvt	s0, h0
 4d8:	fabs	s0, s0
 4dc:	fcvt	h0, s0
 4e0:	fcvt	s1, h0
 4e4:	mvni	v0.4h, #0x84, lsl #8
 4e8:	fcvt	s0, h0
 4ec:	fcmp	s1, s0
 4f0:	cset	w0, le
 4f4:	and	w0, w0, #0xff
 4f8:	eor	w0, w0, #0x1
 4fc:	and	w0, w0, #0xff
 500:	cmp	w0, #0x0
 504:	b.eq	6a0 <__divhc3+0x6a0>  // b.none
 508:	ldr	h0, [sp, #14]
 50c:	fcvt	s0, h0
 510:	fabs	s0, s0
 514:	fcvt	h0, s0
 518:	fcvt	s1, h0
 51c:	mvni	v0.4h, #0x84, lsl #8
 520:	fcvt	s0, h0
 524:	fcmp	s1, s0
 528:	cset	w0, hi  // hi = pmore
 52c:	and	w0, w0, #0xff
 530:	eor	w0, w0, #0x1
 534:	and	w0, w0, #0xff
 538:	cmp	w0, #0x0
 53c:	b.eq	6a0 <__divhc3+0x6a0>  // b.none
 540:	ldr	h0, [sp, #12]
 544:	fcvt	s0, h0
 548:	fabs	s0, s0
 54c:	fcvt	h0, s0
 550:	fcvt	s1, h0
 554:	mvni	v0.4h, #0x84, lsl #8
 558:	fcvt	s0, h0
 55c:	fcmp	s1, s0
 560:	cset	w0, hi  // hi = pmore
 564:	and	w0, w0, #0xff
 568:	eor	w0, w0, #0x1
 56c:	and	w0, w0, #0xff
 570:	cmp	w0, #0x0
 574:	b.eq	6a0 <__divhc3+0x6a0>  // b.none
 578:	ldr	h0, [sp, #10]
 57c:	fcvt	s0, h0
 580:	fabs	s0, s0
 584:	fcvt	h0, s0
 588:	fcvt	s1, h0
 58c:	mvni	v0.4h, #0x84, lsl #8
 590:	fcvt	s0, h0
 594:	fcmp	s1, s0
 598:	cset	w0, le
 59c:	and	w0, w0, #0xff
 5a0:	eor	w0, w0, #0x1
 5a4:	and	w0, w0, #0xff
 5a8:	scvtf	d0, w0
 5ac:	fcvt	h0, d0
 5b0:	ldrh	w0, [sp, #10]
 5b4:	and	w0, w0, #0xffff8000
 5b8:	umov	w1, v0.h[0]
 5bc:	and	w1, w1, #0x7fff
 5c0:	orr	w0, w1, w0
 5c4:	dup	v0.4h, w0
 5c8:	str	h0, [sp, #10]
 5cc:	ldr	h0, [sp, #8]
 5d0:	fcvt	s0, h0
 5d4:	fabs	s0, s0
 5d8:	fcvt	h0, s0
 5dc:	fcvt	s1, h0
 5e0:	mvni	v0.4h, #0x84, lsl #8
 5e4:	fcvt	s0, h0
 5e8:	fcmp	s1, s0
 5ec:	cset	w0, le
 5f0:	and	w0, w0, #0xff
 5f4:	eor	w0, w0, #0x1
 5f8:	and	w0, w0, #0xff
 5fc:	scvtf	d0, w0
 600:	fcvt	h0, d0
 604:	ldrh	w0, [sp, #8]
 608:	and	w0, w0, #0xffff8000
 60c:	umov	w1, v0.h[0]
 610:	and	w1, w1, #0x7fff
 614:	orr	w0, w1, w0
 618:	dup	v0.4h, w0
 61c:	str	h0, [sp, #8]
 620:	ldr	h0, [sp, #14]
 624:	fcvt	s1, h0
 628:	ldr	h0, [sp, #10]
 62c:	fcvt	s0, h0
 630:	fmul	s1, s1, s0
 634:	ldr	h0, [sp, #12]
 638:	fcvt	s2, h0
 63c:	ldr	h0, [sp, #8]
 640:	fcvt	s0, h0
 644:	fmul	s0, s2, s0
 648:	fadd	s0, s1, s0
 64c:	fcvt	d0, s0
 650:	movi	d1, #0x0
 654:	fmul	d0, d0, d1
 658:	fcvt	h0, d0
 65c:	str	h0, [sp, #26]
 660:	ldr	h0, [sp, #12]
 664:	fcvt	s1, h0
 668:	ldr	h0, [sp, #10]
 66c:	fcvt	s0, h0
 670:	fmul	s1, s1, s0
 674:	ldr	h0, [sp, #14]
 678:	fcvt	s2, h0
 67c:	ldr	h0, [sp, #8]
 680:	fcvt	s0, h0
 684:	fmul	s0, s2, s0
 688:	fsub	s0, s1, s0
 68c:	fcvt	d0, s0
 690:	movi	d1, #0x0
 694:	fmul	d0, d0, d1
 698:	fcvt	h0, d0
 69c:	str	h0, [sp, #24]
 6a0:	ldr	h0, [sp, #30]
 6a4:	ldr	h1, [sp, #26]
 6a8:	str	h1, [sp, #16]
 6ac:	str	h0, [sp, #18]
 6b0:	ldr	h0, [sp, #26]
 6b4:	str	h0, [sp, #28]
 6b8:	ldr	h0, [sp, #24]
 6bc:	ldr	h1, [sp, #28]
 6c0:	str	h1, [sp, #16]
 6c4:	str	h0, [sp, #18]
 6c8:	ldr	h1, [sp, #28]
 6cc:	ldr	h0, [sp, #24]
 6d0:	mov	v2.h[0], v1.h[0]
 6d4:	mov	v1.h[0], v0.h[0]
 6d8:	mov	v0.h[0], v2.h[0]
 6dc:	add	sp, sp, #0x20
 6e0:	ret

_divsc3.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__divsc3>:
   0:	sub	sp, sp, #0x30
   4:	str	s0, [sp, #12]
   8:	str	s1, [sp, #8]
   c:	str	s2, [sp, #4]
  10:	str	s3, [sp]
  14:	ldr	s0, [sp, #4]
  18:	fabs	s1, s0
  1c:	ldr	s0, [sp]
  20:	fabs	s0, s0
  24:	fcmpe	s1, s0
  28:	b.pl	98 <__divsc3+0x98>  // b.nfrst
  2c:	ldr	s0, [sp]
  30:	ldr	s1, [sp, #4]
  34:	fdiv	s0, s1, s0
  38:	str	s0, [sp, #28]
  3c:	ldr	s1, [sp, #4]
  40:	ldr	s0, [sp, #28]
  44:	fmul	s0, s1, s0
  48:	ldr	s1, [sp]
  4c:	fadd	s0, s1, s0
  50:	str	s0, [sp, #24]
  54:	ldr	s1, [sp, #12]
  58:	ldr	s0, [sp, #28]
  5c:	fmul	s1, s1, s0
  60:	ldr	s0, [sp, #8]
  64:	fadd	s1, s1, s0
  68:	ldr	s0, [sp, #24]
  6c:	fdiv	s0, s1, s0
  70:	str	s0, [sp, #36]
  74:	ldr	s1, [sp, #8]
  78:	ldr	s0, [sp, #28]
  7c:	fmul	s1, s1, s0
  80:	ldr	s0, [sp, #12]
  84:	fsub	s1, s1, s0
  88:	ldr	s0, [sp, #24]
  8c:	fdiv	s0, s1, s0
  90:	str	s0, [sp, #32]
  94:	b	100 <__divsc3+0x100>
  98:	ldr	s0, [sp, #4]
  9c:	ldr	s1, [sp]
  a0:	fdiv	s0, s1, s0
  a4:	str	s0, [sp, #28]
  a8:	ldr	s1, [sp]
  ac:	ldr	s0, [sp, #28]
  b0:	fmul	s0, s1, s0
  b4:	ldr	s1, [sp, #4]
  b8:	fadd	s0, s1, s0
  bc:	str	s0, [sp, #24]
  c0:	ldr	s1, [sp, #8]
  c4:	ldr	s0, [sp, #28]
  c8:	fmul	s1, s1, s0
  cc:	ldr	s0, [sp, #12]
  d0:	fadd	s1, s1, s0
  d4:	ldr	s0, [sp, #24]
  d8:	fdiv	s0, s1, s0
  dc:	str	s0, [sp, #36]
  e0:	ldr	s1, [sp, #12]
  e4:	ldr	s0, [sp, #28]
  e8:	fmul	s0, s1, s0
  ec:	ldr	s1, [sp, #8]
  f0:	fsub	s1, s1, s0
  f4:	ldr	s0, [sp, #24]
  f8:	fdiv	s0, s1, s0
  fc:	str	s0, [sp, #32]
 100:	ldr	s1, [sp, #36]
 104:	ldr	s0, [sp, #36]
 108:	fcmp	s1, s0
 10c:	b.vc	498 <__divsc3+0x498>
 110:	ldr	s1, [sp, #32]
 114:	ldr	s0, [sp, #32]
 118:	fcmp	s1, s0
 11c:	b.vc	498 <__divsc3+0x498>
 120:	ldr	s0, [sp, #4]
 124:	fcmp	s0, #0.0
 128:	b.ne	19c <__divsc3+0x19c>  // b.any
 12c:	ldr	s0, [sp]
 130:	fcmp	s0, #0.0
 134:	b.ne	19c <__divsc3+0x19c>  // b.any
 138:	ldr	s1, [sp, #12]
 13c:	ldr	s0, [sp, #12]
 140:	fcmp	s1, s0
 144:	b.vc	158 <__divsc3+0x158>
 148:	ldr	s1, [sp, #8]
 14c:	ldr	s0, [sp, #8]
 150:	fcmp	s1, s0
 154:	b.vs	19c <__divsc3+0x19c>
 158:	mov	w0, #0x7f800000            	// #2139095040
 15c:	fmov	s2, w0
 160:	ldr	s0, [sp, #4]
 164:	movi	v1.2s, #0x80, lsl #24
 168:	bif	v0.8b, v2.8b, v1.8b
 16c:	ldr	s1, [sp, #12]
 170:	fmul	s0, s1, s0
 174:	str	s0, [sp, #36]
 178:	mov	w0, #0x7f800000            	// #2139095040
 17c:	fmov	s2, w0
 180:	ldr	s0, [sp, #4]
 184:	movi	v1.2s, #0x80, lsl #24
 188:	bif	v0.8b, v2.8b, v1.8b
 18c:	ldr	s1, [sp, #8]
 190:	fmul	s0, s1, s0
 194:	str	s0, [sp, #32]
 198:	b	498 <__divsc3+0x498>
 19c:	ldr	s0, [sp, #12]
 1a0:	fabs	s0, s0
 1a4:	mov	w0, #0x7f7fffff            	// #2139095039
 1a8:	fmov	s1, w0
 1ac:	fcmp	s0, s1
 1b0:	cset	w0, le
 1b4:	and	w0, w0, #0xff
 1b8:	eor	w0, w0, #0x1
 1bc:	and	w0, w0, #0xff
 1c0:	cmp	w0, #0x0
 1c4:	b.ne	1f4 <__divsc3+0x1f4>  // b.any
 1c8:	ldr	s0, [sp, #8]
 1cc:	fabs	s0, s0
 1d0:	mov	w0, #0x7f7fffff            	// #2139095039
 1d4:	fmov	s1, w0
 1d8:	fcmp	s0, s1
 1dc:	cset	w0, le
 1e0:	and	w0, w0, #0xff
 1e4:	eor	w0, w0, #0x1
 1e8:	and	w0, w0, #0xff
 1ec:	cmp	w0, #0x0
 1f0:	b.eq	320 <__divsc3+0x320>  // b.none
 1f4:	ldr	s0, [sp, #4]
 1f8:	fabs	s0, s0
 1fc:	mov	w0, #0x7f7fffff            	// #2139095039
 200:	fmov	s1, w0
 204:	fcmp	s0, s1
 208:	cset	w0, hi  // hi = pmore
 20c:	and	w0, w0, #0xff
 210:	eor	w0, w0, #0x1
 214:	and	w0, w0, #0xff
 218:	cmp	w0, #0x0
 21c:	b.eq	320 <__divsc3+0x320>  // b.none
 220:	ldr	s0, [sp]
 224:	fabs	s0, s0
 228:	mov	w0, #0x7f7fffff            	// #2139095039
 22c:	fmov	s1, w0
 230:	fcmp	s0, s1
 234:	cset	w0, hi  // hi = pmore
 238:	and	w0, w0, #0xff
 23c:	eor	w0, w0, #0x1
 240:	and	w0, w0, #0xff
 244:	cmp	w0, #0x0
 248:	b.eq	320 <__divsc3+0x320>  // b.none
 24c:	ldr	s0, [sp, #12]
 250:	fabs	s0, s0
 254:	mov	w0, #0x7f7fffff            	// #2139095039
 258:	fmov	s1, w0
 25c:	fcmp	s0, s1
 260:	cset	w0, le
 264:	and	w0, w0, #0xff
 268:	eor	w0, w0, #0x1
 26c:	and	w0, w0, #0xff
 270:	fmov	s0, w0
 274:	scvtf	s0, s0
 278:	ldr	s1, [sp, #12]
 27c:	movi	v2.2s, #0x80, lsl #24
 280:	bit	v0.8b, v1.8b, v2.8b
 284:	str	s0, [sp, #12]
 288:	ldr	s0, [sp, #8]
 28c:	fabs	s0, s0
 290:	mov	w0, #0x7f7fffff            	// #2139095039
 294:	fmov	s1, w0
 298:	fcmp	s0, s1
 29c:	cset	w0, le
 2a0:	and	w0, w0, #0xff
 2a4:	eor	w0, w0, #0x1
 2a8:	and	w0, w0, #0xff
 2ac:	fmov	s0, w0
 2b0:	scvtf	s0, s0
 2b4:	ldr	s1, [sp, #8]
 2b8:	movi	v2.2s, #0x80, lsl #24
 2bc:	bit	v0.8b, v1.8b, v2.8b
 2c0:	str	s0, [sp, #8]
 2c4:	ldr	s1, [sp, #12]
 2c8:	ldr	s0, [sp, #4]
 2cc:	fmul	s1, s1, s0
 2d0:	ldr	s2, [sp, #8]
 2d4:	ldr	s0, [sp]
 2d8:	fmul	s0, s2, s0
 2dc:	fadd	s0, s1, s0
 2e0:	mov	w0, #0x7f800000            	// #2139095040
 2e4:	fmov	s1, w0
 2e8:	fmul	s0, s0, s1
 2ec:	str	s0, [sp, #36]
 2f0:	ldr	s1, [sp, #8]
 2f4:	ldr	s0, [sp, #4]
 2f8:	fmul	s1, s1, s0
 2fc:	ldr	s2, [sp, #12]
 300:	ldr	s0, [sp]
 304:	fmul	s0, s2, s0
 308:	fsub	s0, s1, s0
 30c:	mov	w0, #0x7f800000            	// #2139095040
 310:	fmov	s1, w0
 314:	fmul	s0, s0, s1
 318:	str	s0, [sp, #32]
 31c:	b	498 <__divsc3+0x498>
 320:	ldr	s0, [sp, #4]
 324:	fabs	s0, s0
 328:	mov	w0, #0x7f7fffff            	// #2139095039
 32c:	fmov	s1, w0
 330:	fcmp	s0, s1
 334:	cset	w0, le
 338:	and	w0, w0, #0xff
 33c:	eor	w0, w0, #0x1
 340:	and	w0, w0, #0xff
 344:	cmp	w0, #0x0
 348:	b.ne	378 <__divsc3+0x378>  // b.any
 34c:	ldr	s0, [sp]
 350:	fabs	s0, s0
 354:	mov	w0, #0x7f7fffff            	// #2139095039
 358:	fmov	s1, w0
 35c:	fcmp	s0, s1
 360:	cset	w0, le
 364:	and	w0, w0, #0xff
 368:	eor	w0, w0, #0x1
 36c:	and	w0, w0, #0xff
 370:	cmp	w0, #0x0
 374:	b.eq	498 <__divsc3+0x498>  // b.none
 378:	ldr	s0, [sp, #12]
 37c:	fabs	s0, s0
 380:	mov	w0, #0x7f7fffff            	// #2139095039
 384:	fmov	s1, w0
 388:	fcmp	s0, s1
 38c:	cset	w0, hi  // hi = pmore
 390:	and	w0, w0, #0xff
 394:	eor	w0, w0, #0x1
 398:	and	w0, w0, #0xff
 39c:	cmp	w0, #0x0
 3a0:	b.eq	498 <__divsc3+0x498>  // b.none
 3a4:	ldr	s0, [sp, #8]
 3a8:	fabs	s0, s0
 3ac:	mov	w0, #0x7f7fffff            	// #2139095039
 3b0:	fmov	s1, w0
 3b4:	fcmp	s0, s1
 3b8:	cset	w0, hi  // hi = pmore
 3bc:	and	w0, w0, #0xff
 3c0:	eor	w0, w0, #0x1
 3c4:	and	w0, w0, #0xff
 3c8:	cmp	w0, #0x0
 3cc:	b.eq	498 <__divsc3+0x498>  // b.none
 3d0:	ldr	s0, [sp, #4]
 3d4:	fabs	s0, s0
 3d8:	mov	w0, #0x7f7fffff            	// #2139095039
 3dc:	fmov	s1, w0
 3e0:	fcmp	s0, s1
 3e4:	cset	w0, le
 3e8:	and	w0, w0, #0xff
 3ec:	eor	w0, w0, #0x1
 3f0:	and	w0, w0, #0xff
 3f4:	fmov	s0, w0
 3f8:	scvtf	s0, s0
 3fc:	ldr	s1, [sp, #4]
 400:	movi	v2.2s, #0x80, lsl #24
 404:	bit	v0.8b, v1.8b, v2.8b
 408:	str	s0, [sp, #4]
 40c:	ldr	s0, [sp]
 410:	fabs	s0, s0
 414:	mov	w0, #0x7f7fffff            	// #2139095039
 418:	fmov	s1, w0
 41c:	fcmp	s0, s1
 420:	cset	w0, le
 424:	and	w0, w0, #0xff
 428:	eor	w0, w0, #0x1
 42c:	and	w0, w0, #0xff
 430:	fmov	s0, w0
 434:	scvtf	s0, s0
 438:	ldr	s1, [sp]
 43c:	movi	v2.2s, #0x80, lsl #24
 440:	bit	v0.8b, v1.8b, v2.8b
 444:	str	s0, [sp]
 448:	ldr	s1, [sp, #12]
 44c:	ldr	s0, [sp, #4]
 450:	fmul	s1, s1, s0
 454:	ldr	s2, [sp, #8]
 458:	ldr	s0, [sp]
 45c:	fmul	s0, s2, s0
 460:	fadd	s0, s1, s0
 464:	movi	v1.2s, #0x0
 468:	fmul	s0, s0, s1
 46c:	str	s0, [sp, #36]
 470:	ldr	s1, [sp, #8]
 474:	ldr	s0, [sp, #4]
 478:	fmul	s1, s1, s0
 47c:	ldr	s2, [sp, #12]
 480:	ldr	s0, [sp]
 484:	fmul	s0, s2, s0
 488:	fsub	s0, s1, s0
 48c:	movi	v1.2s, #0x0
 490:	fmul	s0, s0, s1
 494:	str	s0, [sp, #32]
 498:	ldr	s0, [sp, #44]
 49c:	ldr	s1, [sp, #36]
 4a0:	str	s1, [sp, #16]
 4a4:	str	s0, [sp, #20]
 4a8:	ldr	s0, [sp, #36]
 4ac:	str	s0, [sp, #40]
 4b0:	ldr	s0, [sp, #32]
 4b4:	ldr	s1, [sp, #40]
 4b8:	str	s1, [sp, #16]
 4bc:	str	s0, [sp, #20]
 4c0:	ldr	s1, [sp, #40]
 4c4:	ldr	s0, [sp, #32]
 4c8:	fmov	s2, s1
 4cc:	fmov	s1, s0
 4d0:	fmov	s0, s2
 4d4:	add	sp, sp, #0x30
 4d8:	ret

_divdc3.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__divdc3>:
   0:	sub	sp, sp, #0x60
   4:	str	d0, [sp, #24]
   8:	str	d1, [sp, #16]
   c:	str	d2, [sp, #8]
  10:	str	d3, [sp]
  14:	ldr	d0, [sp, #8]
  18:	fabs	d1, d0
  1c:	ldr	d0, [sp]
  20:	fabs	d0, d0
  24:	fcmpe	d1, d0
  28:	b.pl	98 <__divdc3+0x98>  // b.nfrst
  2c:	ldr	d0, [sp]
  30:	ldr	d1, [sp, #8]
  34:	fdiv	d0, d1, d0
  38:	str	d0, [sp, #56]
  3c:	ldr	d1, [sp, #8]
  40:	ldr	d0, [sp, #56]
  44:	fmul	d0, d1, d0
  48:	ldr	d1, [sp]
  4c:	fadd	d0, d1, d0
  50:	str	d0, [sp, #48]
  54:	ldr	d1, [sp, #24]
  58:	ldr	d0, [sp, #56]
  5c:	fmul	d1, d1, d0
  60:	ldr	d0, [sp, #16]
  64:	fadd	d1, d1, d0
  68:	ldr	d0, [sp, #48]
  6c:	fdiv	d0, d1, d0
  70:	str	d0, [sp, #72]
  74:	ldr	d1, [sp, #16]
  78:	ldr	d0, [sp, #56]
  7c:	fmul	d1, d1, d0
  80:	ldr	d0, [sp, #24]
  84:	fsub	d1, d1, d0
  88:	ldr	d0, [sp, #48]
  8c:	fdiv	d0, d1, d0
  90:	str	d0, [sp, #64]
  94:	b	100 <__divdc3+0x100>
  98:	ldr	d0, [sp, #8]
  9c:	ldr	d1, [sp]
  a0:	fdiv	d0, d1, d0
  a4:	str	d0, [sp, #56]
  a8:	ldr	d1, [sp]
  ac:	ldr	d0, [sp, #56]
  b0:	fmul	d0, d1, d0
  b4:	ldr	d1, [sp, #8]
  b8:	fadd	d0, d1, d0
  bc:	str	d0, [sp, #48]
  c0:	ldr	d1, [sp, #16]
  c4:	ldr	d0, [sp, #56]
  c8:	fmul	d1, d1, d0
  cc:	ldr	d0, [sp, #24]
  d0:	fadd	d1, d1, d0
  d4:	ldr	d0, [sp, #48]
  d8:	fdiv	d0, d1, d0
  dc:	str	d0, [sp, #72]
  e0:	ldr	d1, [sp, #24]
  e4:	ldr	d0, [sp, #56]
  e8:	fmul	d0, d1, d0
  ec:	ldr	d1, [sp, #16]
  f0:	fsub	d1, d1, d0
  f4:	ldr	d0, [sp, #48]
  f8:	fdiv	d0, d1, d0
  fc:	str	d0, [sp, #64]
 100:	ldr	d1, [sp, #72]
 104:	ldr	d0, [sp, #72]
 108:	fcmp	d1, d0
 10c:	b.vc	4a0 <__divdc3+0x4a0>
 110:	ldr	d1, [sp, #64]
 114:	ldr	d0, [sp, #64]
 118:	fcmp	d1, d0
 11c:	b.vc	4a0 <__divdc3+0x4a0>
 120:	ldr	d0, [sp, #8]
 124:	fcmp	d0, #0.0
 128:	b.ne	1a4 <__divdc3+0x1a4>  // b.any
 12c:	ldr	d0, [sp]
 130:	fcmp	d0, #0.0
 134:	b.ne	1a4 <__divdc3+0x1a4>  // b.any
 138:	ldr	d1, [sp, #24]
 13c:	ldr	d0, [sp, #24]
 140:	fcmp	d1, d0
 144:	b.vc	158 <__divdc3+0x158>
 148:	ldr	d1, [sp, #16]
 14c:	ldr	d0, [sp, #16]
 150:	fcmp	d1, d0
 154:	b.vs	1a4 <__divdc3+0x1a4>
 158:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
 15c:	fmov	d1, x0
 160:	ldr	d0, [sp, #8]
 164:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 168:	fmov	d2, x0
 16c:	bif	v0.8b, v1.8b, v2.8b
 170:	ldr	d1, [sp, #24]
 174:	fmul	d0, d1, d0
 178:	str	d0, [sp, #72]
 17c:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
 180:	fmov	d1, x0
 184:	ldr	d0, [sp, #8]
 188:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 18c:	fmov	d2, x0
 190:	bif	v0.8b, v1.8b, v2.8b
 194:	ldr	d1, [sp, #16]
 198:	fmul	d0, d1, d0
 19c:	str	d0, [sp, #64]
 1a0:	b	4a0 <__divdc3+0x4a0>
 1a4:	ldr	d0, [sp, #24]
 1a8:	fabs	d0, d0
 1ac:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 1b0:	fmov	d1, x0
 1b4:	fcmp	d0, d1
 1b8:	cset	w0, le
 1bc:	and	w0, w0, #0xff
 1c0:	eor	w0, w0, #0x1
 1c4:	and	w0, w0, #0xff
 1c8:	cmp	w0, #0x0
 1cc:	b.ne	1fc <__divdc3+0x1fc>  // b.any
 1d0:	ldr	d0, [sp, #16]
 1d4:	fabs	d0, d0
 1d8:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 1dc:	fmov	d1, x0
 1e0:	fcmp	d0, d1
 1e4:	cset	w0, le
 1e8:	and	w0, w0, #0xff
 1ec:	eor	w0, w0, #0x1
 1f0:	and	w0, w0, #0xff
 1f4:	cmp	w0, #0x0
 1f8:	b.eq	328 <__divdc3+0x328>  // b.none
 1fc:	ldr	d0, [sp, #8]
 200:	fabs	d0, d0
 204:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 208:	fmov	d1, x0
 20c:	fcmp	d0, d1
 210:	cset	w0, hi  // hi = pmore
 214:	and	w0, w0, #0xff
 218:	eor	w0, w0, #0x1
 21c:	and	w0, w0, #0xff
 220:	cmp	w0, #0x0
 224:	b.eq	328 <__divdc3+0x328>  // b.none
 228:	ldr	d0, [sp]
 22c:	fabs	d0, d0
 230:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 234:	fmov	d1, x0
 238:	fcmp	d0, d1
 23c:	cset	w0, hi  // hi = pmore
 240:	and	w0, w0, #0xff
 244:	eor	w0, w0, #0x1
 248:	and	w0, w0, #0xff
 24c:	cmp	w0, #0x0
 250:	b.eq	328 <__divdc3+0x328>  // b.none
 254:	ldr	d0, [sp, #24]
 258:	fabs	d0, d0
 25c:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 260:	fmov	d1, x0
 264:	fcmp	d0, d1
 268:	cset	w0, le
 26c:	and	w0, w0, #0xff
 270:	eor	w0, w0, #0x1
 274:	and	w0, w0, #0xff
 278:	scvtf	d0, w0
 27c:	ldr	d1, [sp, #24]
 280:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 284:	fmov	d2, x0
 288:	bit	v0.8b, v1.8b, v2.8b
 28c:	str	d0, [sp, #24]
 290:	ldr	d0, [sp, #16]
 294:	fabs	d0, d0
 298:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 29c:	fmov	d1, x0
 2a0:	fcmp	d0, d1
 2a4:	cset	w0, le
 2a8:	and	w0, w0, #0xff
 2ac:	eor	w0, w0, #0x1
 2b0:	and	w0, w0, #0xff
 2b4:	scvtf	d0, w0
 2b8:	ldr	d1, [sp, #16]
 2bc:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 2c0:	fmov	d2, x0
 2c4:	bit	v0.8b, v1.8b, v2.8b
 2c8:	str	d0, [sp, #16]
 2cc:	ldr	d1, [sp, #24]
 2d0:	ldr	d0, [sp, #8]
 2d4:	fmul	d1, d1, d0
 2d8:	ldr	d2, [sp, #16]
 2dc:	ldr	d0, [sp]
 2e0:	fmul	d0, d2, d0
 2e4:	fadd	d0, d1, d0
 2e8:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
 2ec:	fmov	d1, x0
 2f0:	fmul	d0, d0, d1
 2f4:	str	d0, [sp, #72]
 2f8:	ldr	d1, [sp, #16]
 2fc:	ldr	d0, [sp, #8]
 300:	fmul	d1, d1, d0
 304:	ldr	d2, [sp, #24]
 308:	ldr	d0, [sp]
 30c:	fmul	d0, d2, d0
 310:	fsub	d0, d1, d0
 314:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
 318:	fmov	d1, x0
 31c:	fmul	d0, d0, d1
 320:	str	d0, [sp, #64]
 324:	b	4a0 <__divdc3+0x4a0>
 328:	ldr	d0, [sp, #8]
 32c:	fabs	d0, d0
 330:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 334:	fmov	d1, x0
 338:	fcmp	d0, d1
 33c:	cset	w0, le
 340:	and	w0, w0, #0xff
 344:	eor	w0, w0, #0x1
 348:	and	w0, w0, #0xff
 34c:	cmp	w0, #0x0
 350:	b.ne	380 <__divdc3+0x380>  // b.any
 354:	ldr	d0, [sp]
 358:	fabs	d0, d0
 35c:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 360:	fmov	d1, x0
 364:	fcmp	d0, d1
 368:	cset	w0, le
 36c:	and	w0, w0, #0xff
 370:	eor	w0, w0, #0x1
 374:	and	w0, w0, #0xff
 378:	cmp	w0, #0x0
 37c:	b.eq	4a0 <__divdc3+0x4a0>  // b.none
 380:	ldr	d0, [sp, #24]
 384:	fabs	d0, d0
 388:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 38c:	fmov	d1, x0
 390:	fcmp	d0, d1
 394:	cset	w0, hi  // hi = pmore
 398:	and	w0, w0, #0xff
 39c:	eor	w0, w0, #0x1
 3a0:	and	w0, w0, #0xff
 3a4:	cmp	w0, #0x0
 3a8:	b.eq	4a0 <__divdc3+0x4a0>  // b.none
 3ac:	ldr	d0, [sp, #16]
 3b0:	fabs	d0, d0
 3b4:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 3b8:	fmov	d1, x0
 3bc:	fcmp	d0, d1
 3c0:	cset	w0, hi  // hi = pmore
 3c4:	and	w0, w0, #0xff
 3c8:	eor	w0, w0, #0x1
 3cc:	and	w0, w0, #0xff
 3d0:	cmp	w0, #0x0
 3d4:	b.eq	4a0 <__divdc3+0x4a0>  // b.none
 3d8:	ldr	d0, [sp, #8]
 3dc:	fabs	d0, d0
 3e0:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 3e4:	fmov	d1, x0
 3e8:	fcmp	d0, d1
 3ec:	cset	w0, le
 3f0:	and	w0, w0, #0xff
 3f4:	eor	w0, w0, #0x1
 3f8:	and	w0, w0, #0xff
 3fc:	scvtf	d0, w0
 400:	ldr	d1, [sp, #8]
 404:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 408:	fmov	d2, x0
 40c:	bit	v0.8b, v1.8b, v2.8b
 410:	str	d0, [sp, #8]
 414:	ldr	d0, [sp]
 418:	fabs	d0, d0
 41c:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
 420:	fmov	d1, x0
 424:	fcmp	d0, d1
 428:	cset	w0, le
 42c:	and	w0, w0, #0xff
 430:	eor	w0, w0, #0x1
 434:	and	w0, w0, #0xff
 438:	scvtf	d0, w0
 43c:	ldr	d1, [sp]
 440:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 444:	fmov	d2, x0
 448:	bit	v0.8b, v1.8b, v2.8b
 44c:	str	d0, [sp]
 450:	ldr	d1, [sp, #24]
 454:	ldr	d0, [sp, #8]
 458:	fmul	d1, d1, d0
 45c:	ldr	d2, [sp, #16]
 460:	ldr	d0, [sp]
 464:	fmul	d0, d2, d0
 468:	fadd	d0, d1, d0
 46c:	movi	d1, #0x0
 470:	fmul	d0, d0, d1
 474:	str	d0, [sp, #72]
 478:	ldr	d1, [sp, #16]
 47c:	ldr	d0, [sp, #8]
 480:	fmul	d1, d1, d0
 484:	ldr	d2, [sp, #24]
 488:	ldr	d0, [sp]
 48c:	fmul	d0, d2, d0
 490:	fsub	d0, d1, d0
 494:	movi	d1, #0x0
 498:	fmul	d0, d0, d1
 49c:	str	d0, [sp, #64]
 4a0:	ldr	d0, [sp, #88]
 4a4:	ldr	d1, [sp, #72]
 4a8:	str	d1, [sp, #32]
 4ac:	str	d0, [sp, #40]
 4b0:	ldr	d0, [sp, #72]
 4b4:	str	d0, [sp, #80]
 4b8:	ldr	d0, [sp, #64]
 4bc:	ldr	d1, [sp, #80]
 4c0:	str	d1, [sp, #32]
 4c4:	str	d0, [sp, #40]
 4c8:	ldr	d1, [sp, #80]
 4cc:	ldr	d0, [sp, #64]
 4d0:	fmov	d2, d1
 4d4:	fmov	d1, d0
 4d8:	fmov	d0, d2
 4dc:	add	sp, sp, #0x60
 4e0:	ret

_divxc3.o:     file format elf64-littleaarch64


_divtc3.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__divtc3>:
   0:	stp	x29, x30, [sp, #-416]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	str	q0, [sp, #272]
  10:	str	q1, [sp, #256]
  14:	str	q2, [sp, #240]
  18:	str	q3, [sp, #224]
  1c:	ldr	x2, [sp, #240]
  20:	ldr	x0, [sp, #248]
  24:	and	x3, x0, #0x7fffffffffffffff
  28:	ldr	x4, [sp, #224]
  2c:	ldr	x0, [sp, #232]
  30:	and	x5, x0, #0x7fffffffffffffff
  34:	fmov	d1, x4
  38:	fmov	v1.d[1], x5
  3c:	fmov	d0, x2
  40:	fmov	v0.d[1], x3
  44:	bl	0 <__lttf2>
  48:	cmp	w0, #0x0
  4c:	b.ge	c0 <__divtc3+0xc0>  // b.tcont
  50:	ldr	q1, [sp, #224]
  54:	ldr	q0, [sp, #240]
  58:	bl	0 <__divtf3>
  5c:	str	q0, [sp, #336]
  60:	ldr	q1, [sp, #336]
  64:	ldr	q0, [sp, #240]
  68:	bl	0 <__multf3>
  6c:	mov	v1.16b, v0.16b
  70:	ldr	q0, [sp, #224]
  74:	bl	0 <__addtf3>
  78:	str	q0, [sp, #320]
  7c:	ldr	q1, [sp, #336]
  80:	ldr	q0, [sp, #272]
  84:	bl	0 <__multf3>
  88:	ldr	q1, [sp, #256]
  8c:	bl	0 <__addtf3>
  90:	ldr	q1, [sp, #320]
  94:	bl	0 <__divtf3>
  98:	str	q0, [sp, #368]
  9c:	ldr	q1, [sp, #336]
  a0:	ldr	q0, [sp, #256]
  a4:	bl	0 <__multf3>
  a8:	ldr	q1, [sp, #272]
  ac:	bl	0 <__subtf3>
  b0:	ldr	q1, [sp, #320]
  b4:	bl	0 <__divtf3>
  b8:	str	q0, [sp, #352]
  bc:	b	130 <__divtc3+0x130>
  c0:	ldr	q1, [sp, #240]
  c4:	ldr	q0, [sp, #224]
  c8:	bl	0 <__divtf3>
  cc:	str	q0, [sp, #336]
  d0:	ldr	q1, [sp, #336]
  d4:	ldr	q0, [sp, #224]
  d8:	bl	0 <__multf3>
  dc:	mov	v1.16b, v0.16b
  e0:	ldr	q0, [sp, #240]
  e4:	bl	0 <__addtf3>
  e8:	str	q0, [sp, #320]
  ec:	ldr	q1, [sp, #336]
  f0:	ldr	q0, [sp, #256]
  f4:	bl	0 <__multf3>
  f8:	ldr	q1, [sp, #272]
  fc:	bl	0 <__addtf3>
 100:	ldr	q1, [sp, #320]
 104:	bl	0 <__divtf3>
 108:	str	q0, [sp, #368]
 10c:	ldr	q1, [sp, #336]
 110:	ldr	q0, [sp, #272]
 114:	bl	0 <__multf3>
 118:	mov	v1.16b, v0.16b
 11c:	ldr	q0, [sp, #256]
 120:	bl	0 <__subtf3>
 124:	ldr	q1, [sp, #320]
 128:	bl	0 <__divtf3>
 12c:	str	q0, [sp, #352]
 130:	ldr	q1, [sp, #368]
 134:	ldr	q0, [sp, #368]
 138:	bl	0 <__unordtf2>
 13c:	cmp	w0, #0x0
 140:	b.eq	860 <__divtc3+0x860>  // b.none
 144:	ldr	q1, [sp, #352]
 148:	ldr	q0, [sp, #352]
 14c:	bl	0 <__unordtf2>
 150:	cmp	w0, #0x0
 154:	b.eq	860 <__divtc3+0x860>  // b.none
 158:	movi	v1.2d, #0x0
 15c:	ldr	q0, [sp, #240]
 160:	bl	0 <__eqtf2>
 164:	cmp	w0, #0x0
 168:	b.ne	21c <__divtc3+0x21c>  // b.any
 16c:	movi	v1.2d, #0x0
 170:	ldr	q0, [sp, #224]
 174:	bl	0 <__eqtf2>
 178:	cmp	w0, #0x0
 17c:	b.ne	21c <__divtc3+0x21c>  // b.any
 180:	ldr	q1, [sp, #272]
 184:	ldr	q0, [sp, #272]
 188:	bl	0 <__unordtf2>
 18c:	cmp	w0, #0x0
 190:	b.eq	1a8 <__divtc3+0x1a8>  // b.none
 194:	ldr	q1, [sp, #256]
 198:	ldr	q0, [sp, #256]
 19c:	bl	0 <__unordtf2>
 1a0:	cmp	w0, #0x0
 1a4:	b.ne	21c <__divtc3+0x21c>  // b.any
 1a8:	ldr	x0, [sp, #248]
 1ac:	and	x0, x0, #0x8000000000000000
 1b0:	adrp	x1, 0 <__divtc3>
 1b4:	add	x1, x1, #0x0
 1b8:	ldr	q0, [x1]
 1bc:	cmp	x0, #0x0
 1c0:	b.eq	1d0 <__divtc3+0x1d0>  // b.none
 1c4:	adrp	x0, 0 <__divtc3>
 1c8:	add	x0, x0, #0x0
 1cc:	ldr	q0, [x0]
 1d0:	mov	v1.16b, v0.16b
 1d4:	ldr	q0, [sp, #272]
 1d8:	bl	0 <__multf3>
 1dc:	str	q0, [sp, #368]
 1e0:	ldr	x0, [sp, #248]
 1e4:	and	x0, x0, #0x8000000000000000
 1e8:	adrp	x1, 0 <__divtc3>
 1ec:	add	x1, x1, #0x0
 1f0:	ldr	q0, [x1]
 1f4:	cmp	x0, #0x0
 1f8:	b.eq	208 <__divtc3+0x208>  // b.none
 1fc:	adrp	x0, 0 <__divtc3>
 200:	add	x0, x0, #0x0
 204:	ldr	q0, [x0]
 208:	mov	v1.16b, v0.16b
 20c:	ldr	q0, [sp, #256]
 210:	bl	0 <__multf3>
 214:	str	q0, [sp, #352]
 218:	b	860 <__divtc3+0x860>
 21c:	ldr	x0, [sp, #272]
 220:	str	x0, [sp, #32]
 224:	ldr	x0, [sp, #280]
 228:	and	x0, x0, #0x7fffffffffffffff
 22c:	str	x0, [sp, #40]
 230:	mov	w19, #0x1                   	// #1
 234:	adrp	x0, 0 <__divtc3>
 238:	add	x0, x0, #0x0
 23c:	ldr	q1, [x0]
 240:	ldr	q0, [sp, #32]
 244:	bl	0 <__unordtf2>
 248:	cmp	w0, #0x0
 24c:	b.ne	270 <__divtc3+0x270>  // b.any
 250:	adrp	x0, 0 <__divtc3>
 254:	add	x0, x0, #0x0
 258:	ldr	q1, [x0]
 25c:	ldr	q0, [sp, #32]
 260:	bl	0 <__letf2>
 264:	cmp	w0, #0x0
 268:	b.le	270 <__divtc3+0x270>
 26c:	mov	w19, #0x0                   	// #0
 270:	and	w0, w19, #0xff
 274:	eor	w0, w0, #0x1
 278:	and	w0, w0, #0xff
 27c:	cmp	w0, #0x0
 280:	b.ne	2ec <__divtc3+0x2ec>  // b.any
 284:	ldr	x0, [sp, #256]
 288:	str	x0, [sp, #48]
 28c:	ldr	x0, [sp, #264]
 290:	and	x0, x0, #0x7fffffffffffffff
 294:	str	x0, [sp, #56]
 298:	mov	w19, #0x1                   	// #1
 29c:	adrp	x0, 0 <__divtc3>
 2a0:	add	x0, x0, #0x0
 2a4:	ldr	q1, [x0]
 2a8:	ldr	q0, [sp, #48]
 2ac:	bl	0 <__unordtf2>
 2b0:	cmp	w0, #0x0
 2b4:	b.ne	2d8 <__divtc3+0x2d8>  // b.any
 2b8:	adrp	x0, 0 <__divtc3>
 2bc:	add	x0, x0, #0x0
 2c0:	ldr	q1, [x0]
 2c4:	ldr	q0, [sp, #48]
 2c8:	bl	0 <__letf2>
 2cc:	cmp	w0, #0x0
 2d0:	b.le	2d8 <__divtc3+0x2d8>
 2d4:	mov	w19, #0x0                   	// #0
 2d8:	and	w0, w19, #0xff
 2dc:	eor	w0, w0, #0x1
 2e0:	and	w0, w0, #0xff
 2e4:	cmp	w0, #0x0
 2e8:	b.eq	548 <__divtc3+0x548>  // b.none
 2ec:	ldr	x0, [sp, #240]
 2f0:	str	x0, [sp, #64]
 2f4:	ldr	x0, [sp, #248]
 2f8:	and	x0, x0, #0x7fffffffffffffff
 2fc:	str	x0, [sp, #72]
 300:	mov	w19, #0x1                   	// #1
 304:	adrp	x0, 0 <__divtc3>
 308:	add	x0, x0, #0x0
 30c:	ldr	q1, [x0]
 310:	ldr	q0, [sp, #64]
 314:	bl	0 <__unordtf2>
 318:	cmp	w0, #0x0
 31c:	b.ne	340 <__divtc3+0x340>  // b.any
 320:	adrp	x0, 0 <__divtc3>
 324:	add	x0, x0, #0x0
 328:	ldr	q1, [x0]
 32c:	ldr	q0, [sp, #64]
 330:	bl	0 <__gttf2>
 334:	cmp	w0, #0x0
 338:	b.gt	340 <__divtc3+0x340>
 33c:	mov	w19, #0x0                   	// #0
 340:	and	w0, w19, #0xff
 344:	eor	w0, w0, #0x1
 348:	and	w0, w0, #0xff
 34c:	cmp	w0, #0x0
 350:	b.eq	548 <__divtc3+0x548>  // b.none
 354:	ldr	x0, [sp, #224]
 358:	str	x0, [sp, #80]
 35c:	ldr	x0, [sp, #232]
 360:	and	x0, x0, #0x7fffffffffffffff
 364:	str	x0, [sp, #88]
 368:	mov	w19, #0x1                   	// #1
 36c:	adrp	x0, 0 <__divtc3>
 370:	add	x0, x0, #0x0
 374:	ldr	q1, [x0]
 378:	ldr	q0, [sp, #80]
 37c:	bl	0 <__unordtf2>
 380:	cmp	w0, #0x0
 384:	b.ne	3a8 <__divtc3+0x3a8>  // b.any
 388:	adrp	x0, 0 <__divtc3>
 38c:	add	x0, x0, #0x0
 390:	ldr	q1, [x0]
 394:	ldr	q0, [sp, #80]
 398:	bl	0 <__gttf2>
 39c:	cmp	w0, #0x0
 3a0:	b.gt	3a8 <__divtc3+0x3a8>
 3a4:	mov	w19, #0x0                   	// #0
 3a8:	and	w0, w19, #0xff
 3ac:	eor	w0, w0, #0x1
 3b0:	and	w0, w0, #0xff
 3b4:	cmp	w0, #0x0
 3b8:	b.eq	548 <__divtc3+0x548>  // b.none
 3bc:	ldr	x0, [sp, #272]
 3c0:	str	x0, [sp, #96]
 3c4:	ldr	x0, [sp, #280]
 3c8:	and	x0, x0, #0x7fffffffffffffff
 3cc:	str	x0, [sp, #104]
 3d0:	mov	w19, #0x1                   	// #1
 3d4:	adrp	x0, 0 <__divtc3>
 3d8:	add	x0, x0, #0x0
 3dc:	ldr	q1, [x0]
 3e0:	ldr	q0, [sp, #96]
 3e4:	bl	0 <__unordtf2>
 3e8:	cmp	w0, #0x0
 3ec:	b.ne	410 <__divtc3+0x410>  // b.any
 3f0:	adrp	x0, 0 <__divtc3>
 3f4:	add	x0, x0, #0x0
 3f8:	ldr	q1, [x0]
 3fc:	ldr	q0, [sp, #96]
 400:	bl	0 <__letf2>
 404:	cmp	w0, #0x0
 408:	b.le	410 <__divtc3+0x410>
 40c:	mov	w19, #0x0                   	// #0
 410:	and	w0, w19, #0xff
 414:	eor	w0, w0, #0x1
 418:	and	w0, w0, #0xff
 41c:	bl	0 <__floatsitf>
 420:	str	q0, [sp, #32]
 424:	ldr	x0, [sp, #32]
 428:	str	x0, [sp, #272]
 42c:	ldr	x0, [sp, #40]
 430:	and	x1, x0, #0x7fffffffffffffff
 434:	ldr	x0, [sp, #280]
 438:	and	x0, x0, #0x8000000000000000
 43c:	orr	x0, x1, x0
 440:	str	x0, [sp, #280]
 444:	ldr	x0, [sp, #256]
 448:	str	x0, [sp, #112]
 44c:	ldr	x0, [sp, #264]
 450:	and	x0, x0, #0x7fffffffffffffff
 454:	str	x0, [sp, #120]
 458:	mov	w19, #0x1                   	// #1
 45c:	adrp	x0, 0 <__divtc3>
 460:	add	x0, x0, #0x0
 464:	ldr	q1, [x0]
 468:	ldr	q0, [sp, #112]
 46c:	bl	0 <__unordtf2>
 470:	cmp	w0, #0x0
 474:	b.ne	498 <__divtc3+0x498>  // b.any
 478:	adrp	x0, 0 <__divtc3>
 47c:	add	x0, x0, #0x0
 480:	ldr	q1, [x0]
 484:	ldr	q0, [sp, #112]
 488:	bl	0 <__letf2>
 48c:	cmp	w0, #0x0
 490:	b.le	498 <__divtc3+0x498>
 494:	mov	w19, #0x0                   	// #0
 498:	and	w0, w19, #0xff
 49c:	eor	w0, w0, #0x1
 4a0:	and	w0, w0, #0xff
 4a4:	bl	0 <__floatsitf>
 4a8:	str	q0, [sp, #32]
 4ac:	ldr	x0, [sp, #32]
 4b0:	str	x0, [sp, #256]
 4b4:	ldr	x0, [sp, #40]
 4b8:	and	x1, x0, #0x7fffffffffffffff
 4bc:	ldr	x0, [sp, #264]
 4c0:	and	x0, x0, #0x8000000000000000
 4c4:	orr	x0, x1, x0
 4c8:	str	x0, [sp, #264]
 4cc:	ldr	q1, [sp, #240]
 4d0:	ldr	q0, [sp, #272]
 4d4:	bl	0 <__multf3>
 4d8:	str	q0, [sp, #32]
 4dc:	ldr	q1, [sp, #224]
 4e0:	ldr	q0, [sp, #256]
 4e4:	bl	0 <__multf3>
 4e8:	mov	v1.16b, v0.16b
 4ec:	ldr	q0, [sp, #32]
 4f0:	bl	0 <__addtf3>
 4f4:	adrp	x0, 0 <__divtc3>
 4f8:	add	x0, x0, #0x0
 4fc:	ldr	q1, [x0]
 500:	bl	0 <__multf3>
 504:	str	q0, [sp, #368]
 508:	ldr	q1, [sp, #240]
 50c:	ldr	q0, [sp, #256]
 510:	bl	0 <__multf3>
 514:	str	q0, [sp, #32]
 518:	ldr	q1, [sp, #224]
 51c:	ldr	q0, [sp, #272]
 520:	bl	0 <__multf3>
 524:	mov	v1.16b, v0.16b
 528:	ldr	q0, [sp, #32]
 52c:	bl	0 <__subtf3>
 530:	adrp	x0, 0 <__divtc3>
 534:	add	x0, x0, #0x0
 538:	ldr	q1, [x0]
 53c:	bl	0 <__multf3>
 540:	str	q0, [sp, #352]
 544:	b	860 <__divtc3+0x860>
 548:	ldr	x0, [sp, #240]
 54c:	str	x0, [sp, #128]
 550:	ldr	x0, [sp, #248]
 554:	and	x0, x0, #0x7fffffffffffffff
 558:	str	x0, [sp, #136]
 55c:	mov	w19, #0x1                   	// #1
 560:	adrp	x0, 0 <__divtc3>
 564:	add	x0, x0, #0x0
 568:	ldr	q1, [x0]
 56c:	ldr	q0, [sp, #128]
 570:	bl	0 <__unordtf2>
 574:	cmp	w0, #0x0
 578:	b.ne	59c <__divtc3+0x59c>  // b.any
 57c:	adrp	x0, 0 <__divtc3>
 580:	add	x0, x0, #0x0
 584:	ldr	q1, [x0]
 588:	ldr	q0, [sp, #128]
 58c:	bl	0 <__letf2>
 590:	cmp	w0, #0x0
 594:	b.le	59c <__divtc3+0x59c>
 598:	mov	w19, #0x0                   	// #0
 59c:	and	w0, w19, #0xff
 5a0:	eor	w0, w0, #0x1
 5a4:	and	w0, w0, #0xff
 5a8:	cmp	w0, #0x0
 5ac:	b.ne	618 <__divtc3+0x618>  // b.any
 5b0:	ldr	x0, [sp, #224]
 5b4:	str	x0, [sp, #144]
 5b8:	ldr	x0, [sp, #232]
 5bc:	and	x0, x0, #0x7fffffffffffffff
 5c0:	str	x0, [sp, #152]
 5c4:	mov	w19, #0x1                   	// #1
 5c8:	adrp	x0, 0 <__divtc3>
 5cc:	add	x0, x0, #0x0
 5d0:	ldr	q1, [x0]
 5d4:	ldr	q0, [sp, #144]
 5d8:	bl	0 <__unordtf2>
 5dc:	cmp	w0, #0x0
 5e0:	b.ne	604 <__divtc3+0x604>  // b.any
 5e4:	adrp	x0, 0 <__divtc3>
 5e8:	add	x0, x0, #0x0
 5ec:	ldr	q1, [x0]
 5f0:	ldr	q0, [sp, #144]
 5f4:	bl	0 <__letf2>
 5f8:	cmp	w0, #0x0
 5fc:	b.le	604 <__divtc3+0x604>
 600:	mov	w19, #0x0                   	// #0
 604:	and	w0, w19, #0xff
 608:	eor	w0, w0, #0x1
 60c:	and	w0, w0, #0xff
 610:	cmp	w0, #0x0
 614:	b.eq	860 <__divtc3+0x860>  // b.none
 618:	ldr	x0, [sp, #272]
 61c:	str	x0, [sp, #160]
 620:	ldr	x0, [sp, #280]
 624:	and	x0, x0, #0x7fffffffffffffff
 628:	str	x0, [sp, #168]
 62c:	mov	w19, #0x1                   	// #1
 630:	adrp	x0, 0 <__divtc3>
 634:	add	x0, x0, #0x0
 638:	ldr	q1, [x0]
 63c:	ldr	q0, [sp, #160]
 640:	bl	0 <__unordtf2>
 644:	cmp	w0, #0x0
 648:	b.ne	66c <__divtc3+0x66c>  // b.any
 64c:	adrp	x0, 0 <__divtc3>
 650:	add	x0, x0, #0x0
 654:	ldr	q1, [x0]
 658:	ldr	q0, [sp, #160]
 65c:	bl	0 <__gttf2>
 660:	cmp	w0, #0x0
 664:	b.gt	66c <__divtc3+0x66c>
 668:	mov	w19, #0x0                   	// #0
 66c:	and	w0, w19, #0xff
 670:	eor	w0, w0, #0x1
 674:	and	w0, w0, #0xff
 678:	cmp	w0, #0x0
 67c:	b.eq	860 <__divtc3+0x860>  // b.none
 680:	ldr	x0, [sp, #256]
 684:	str	x0, [sp, #176]
 688:	ldr	x0, [sp, #264]
 68c:	and	x0, x0, #0x7fffffffffffffff
 690:	str	x0, [sp, #184]
 694:	mov	w19, #0x1                   	// #1
 698:	adrp	x0, 0 <__divtc3>
 69c:	add	x0, x0, #0x0
 6a0:	ldr	q1, [x0]
 6a4:	ldr	q0, [sp, #176]
 6a8:	bl	0 <__unordtf2>
 6ac:	cmp	w0, #0x0
 6b0:	b.ne	6d4 <__divtc3+0x6d4>  // b.any
 6b4:	adrp	x0, 0 <__divtc3>
 6b8:	add	x0, x0, #0x0
 6bc:	ldr	q1, [x0]
 6c0:	ldr	q0, [sp, #176]
 6c4:	bl	0 <__gttf2>
 6c8:	cmp	w0, #0x0
 6cc:	b.gt	6d4 <__divtc3+0x6d4>
 6d0:	mov	w19, #0x0                   	// #0
 6d4:	and	w0, w19, #0xff
 6d8:	eor	w0, w0, #0x1
 6dc:	and	w0, w0, #0xff
 6e0:	cmp	w0, #0x0
 6e4:	b.eq	860 <__divtc3+0x860>  // b.none
 6e8:	ldr	x0, [sp, #240]
 6ec:	str	x0, [sp, #192]
 6f0:	ldr	x0, [sp, #248]
 6f4:	and	x0, x0, #0x7fffffffffffffff
 6f8:	str	x0, [sp, #200]
 6fc:	mov	w19, #0x1                   	// #1
 700:	adrp	x0, 0 <__divtc3>
 704:	add	x0, x0, #0x0
 708:	ldr	q1, [x0]
 70c:	ldr	q0, [sp, #192]
 710:	bl	0 <__unordtf2>
 714:	cmp	w0, #0x0
 718:	b.ne	73c <__divtc3+0x73c>  // b.any
 71c:	adrp	x0, 0 <__divtc3>
 720:	add	x0, x0, #0x0
 724:	ldr	q1, [x0]
 728:	ldr	q0, [sp, #192]
 72c:	bl	0 <__letf2>
 730:	cmp	w0, #0x0
 734:	b.le	73c <__divtc3+0x73c>
 738:	mov	w19, #0x0                   	// #0
 73c:	and	w0, w19, #0xff
 740:	eor	w0, w0, #0x1
 744:	and	w0, w0, #0xff
 748:	bl	0 <__floatsitf>
 74c:	str	q0, [sp, #32]
 750:	ldr	x0, [sp, #32]
 754:	str	x0, [sp, #240]
 758:	ldr	x0, [sp, #40]
 75c:	and	x1, x0, #0x7fffffffffffffff
 760:	ldr	x0, [sp, #248]
 764:	and	x0, x0, #0x8000000000000000
 768:	orr	x0, x1, x0
 76c:	str	x0, [sp, #248]
 770:	ldr	x0, [sp, #224]
 774:	str	x0, [sp, #208]
 778:	ldr	x0, [sp, #232]
 77c:	and	x0, x0, #0x7fffffffffffffff
 780:	str	x0, [sp, #216]
 784:	mov	w19, #0x1                   	// #1
 788:	adrp	x0, 0 <__divtc3>
 78c:	add	x0, x0, #0x0
 790:	ldr	q1, [x0]
 794:	ldr	q0, [sp, #208]
 798:	bl	0 <__unordtf2>
 79c:	cmp	w0, #0x0
 7a0:	b.ne	7c4 <__divtc3+0x7c4>  // b.any
 7a4:	adrp	x0, 0 <__divtc3>
 7a8:	add	x0, x0, #0x0
 7ac:	ldr	q1, [x0]
 7b0:	ldr	q0, [sp, #208]
 7b4:	bl	0 <__letf2>
 7b8:	cmp	w0, #0x0
 7bc:	b.le	7c4 <__divtc3+0x7c4>
 7c0:	mov	w19, #0x0                   	// #0
 7c4:	and	w0, w19, #0xff
 7c8:	eor	w0, w0, #0x1
 7cc:	and	w0, w0, #0xff
 7d0:	bl	0 <__floatsitf>
 7d4:	str	q0, [sp, #32]
 7d8:	ldr	x0, [sp, #32]
 7dc:	str	x0, [sp, #224]
 7e0:	ldr	x0, [sp, #40]
 7e4:	and	x1, x0, #0x7fffffffffffffff
 7e8:	ldr	x0, [sp, #232]
 7ec:	and	x0, x0, #0x8000000000000000
 7f0:	orr	x0, x1, x0
 7f4:	str	x0, [sp, #232]
 7f8:	ldr	q1, [sp, #240]
 7fc:	ldr	q0, [sp, #272]
 800:	bl	0 <__multf3>
 804:	str	q0, [sp, #32]
 808:	ldr	q1, [sp, #224]
 80c:	ldr	q0, [sp, #256]
 810:	bl	0 <__multf3>
 814:	mov	v1.16b, v0.16b
 818:	ldr	q0, [sp, #32]
 81c:	bl	0 <__addtf3>
 820:	movi	v1.2d, #0x0
 824:	bl	0 <__multf3>
 828:	str	q0, [sp, #368]
 82c:	ldr	q1, [sp, #240]
 830:	ldr	q0, [sp, #256]
 834:	bl	0 <__multf3>
 838:	str	q0, [sp, #32]
 83c:	ldr	q1, [sp, #224]
 840:	ldr	q0, [sp, #272]
 844:	bl	0 <__multf3>
 848:	mov	v1.16b, v0.16b
 84c:	ldr	q0, [sp, #32]
 850:	bl	0 <__subtf3>
 854:	movi	v1.2d, #0x0
 858:	bl	0 <__multf3>
 85c:	str	q0, [sp, #352]
 860:	ldr	q0, [sp, #400]
 864:	ldr	q2, [sp, #368]
 868:	str	q2, [sp, #288]
 86c:	str	q0, [sp, #304]
 870:	ldr	q0, [sp, #368]
 874:	str	q0, [sp, #384]
 878:	ldr	q0, [sp, #352]
 87c:	ldr	q2, [sp, #384]
 880:	str	q2, [sp, #288]
 884:	str	q0, [sp, #304]
 888:	ldr	q2, [sp, #384]
 88c:	ldr	q0, [sp, #352]
 890:	mov	v4.16b, v2.16b
 894:	mov	v2.16b, v0.16b
 898:	mov	v0.16b, v4.16b
 89c:	mov	v1.16b, v2.16b
 8a0:	ldr	x19, [sp, #16]
 8a4:	ldp	x29, x30, [sp], #416
 8a8:	ret

_bswapsi2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__bswapsi2>:
   0:	sub	sp, sp, #0x10
   4:	str	w0, [sp, #12]
   8:	ldr	w0, [sp, #12]
   c:	lsr	w1, w0, #24
  10:	ldr	w0, [sp, #12]
  14:	asr	w0, w0, #8
  18:	and	w0, w0, #0xff00
  1c:	orr	w1, w1, w0
  20:	ldr	w0, [sp, #12]
  24:	lsl	w0, w0, #8
  28:	and	w0, w0, #0xff0000
  2c:	orr	w0, w1, w0
  30:	ldr	w1, [sp, #12]
  34:	lsl	w1, w1, #24
  38:	orr	w0, w0, w1
  3c:	add	sp, sp, #0x10
  40:	ret

_bswapdi2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__bswapdi2>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	lsr	x1, x0, #56
  10:	ldr	x0, [sp, #8]
  14:	lsr	x0, x0, #40
  18:	and	x0, x0, #0xff00
  1c:	orr	x1, x1, x0
  20:	ldr	x0, [sp, #8]
  24:	lsr	x0, x0, #24
  28:	and	x0, x0, #0xff0000
  2c:	orr	x1, x1, x0
  30:	ldr	x0, [sp, #8]
  34:	lsr	x0, x0, #8
  38:	and	x0, x0, #0xff000000
  3c:	orr	x1, x1, x0
  40:	ldr	x0, [sp, #8]
  44:	lsl	x0, x0, #8
  48:	and	x0, x0, #0xff00000000
  4c:	orr	x1, x1, x0
  50:	ldr	x0, [sp, #8]
  54:	lsl	x0, x0, #24
  58:	and	x0, x0, #0xff0000000000
  5c:	orr	x1, x1, x0
  60:	ldr	x0, [sp, #8]
  64:	lsl	x0, x0, #40
  68:	and	x0, x0, #0xff000000000000
  6c:	orr	x1, x1, x0
  70:	ldr	x0, [sp, #8]
  74:	lsl	x0, x0, #56
  78:	orr	x0, x1, x0
  7c:	add	sp, sp, #0x10
  80:	ret

_clrsbsi2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__clrsbdi2>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	cmp	x0, #0x0
  10:	b.ge	20 <__clrsbdi2+0x20>  // b.tcont
  14:	ldr	x0, [sp, #8]
  18:	mvn	x0, x0
  1c:	str	x0, [sp, #8]
  20:	ldr	x0, [sp, #8]
  24:	cmp	x0, #0x0
  28:	b.ne	34 <__clrsbdi2+0x34>  // b.any
  2c:	mov	w0, #0x3f                  	// #63
  30:	b	4c <__clrsbdi2+0x4c>
  34:	ldr	x0, [sp, #8]
  38:	clz	x0, x0
  3c:	sxtw	x0, w0
  40:	str	x0, [sp, #24]
  44:	ldr	x0, [sp, #24]
  48:	sub	w0, w0, #0x1
  4c:	add	sp, sp, #0x20
  50:	ret

_clrsbdi2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__clrsbti2>:
   0:	sub	sp, sp, #0x40
   4:	stp	x0, x1, [sp]
   8:	ldp	x0, x1, [sp]
   c:	stp	x0, x1, [sp, #16]
  10:	ldr	x0, [sp, #24]
  14:	cmp	x0, #0x0
  18:	b.ne	30 <__clrsbti2+0x30>  // b.any
  1c:	ldr	x0, [sp, #16]
  20:	str	x0, [sp, #56]
  24:	mov	x0, #0x40                  	// #64
  28:	str	x0, [sp, #40]
  2c:	b	80 <__clrsbti2+0x80>
  30:	ldr	x0, [sp, #24]
  34:	cmn	x0, #0x1
  38:	b.ne	54 <__clrsbti2+0x54>  // b.any
  3c:	ldr	x0, [sp, #16]
  40:	mvn	x0, x0
  44:	str	x0, [sp, #56]
  48:	mov	x0, #0x40                  	// #64
  4c:	str	x0, [sp, #40]
  50:	b	80 <__clrsbti2+0x80>
  54:	ldr	x0, [sp, #24]
  58:	cmp	x0, #0x0
  5c:	b.lt	70 <__clrsbti2+0x70>  // b.tstop
  60:	ldr	x0, [sp, #24]
  64:	str	x0, [sp, #56]
  68:	str	xzr, [sp, #40]
  6c:	b	80 <__clrsbti2+0x80>
  70:	ldr	x0, [sp, #24]
  74:	mvn	x0, x0
  78:	str	x0, [sp, #56]
  7c:	str	xzr, [sp, #40]
  80:	ldr	x0, [sp, #56]
  84:	cmp	x0, #0x0
  88:	b.ne	98 <__clrsbti2+0x98>  // b.any
  8c:	mov	x0, #0x40                  	// #64
  90:	str	x0, [sp, #48]
  94:	b	a8 <__clrsbti2+0xa8>
  98:	ldr	x0, [sp, #56]
  9c:	clz	x0, x0
  a0:	sxtw	x0, w0
  a4:	str	x0, [sp, #48]
  a8:	ldr	x0, [sp, #48]
  ac:	mov	w1, w0
  b0:	ldr	x0, [sp, #40]
  b4:	add	w0, w1, w0
  b8:	sub	w0, w0, #0x1
  bc:	add	sp, sp, #0x40
  c0:	ret

_fixunssfsi.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__fixunssfdi>:
   0:	sub	sp, sp, #0x10
   4:	str	s0, [sp, #12]
   8:	ldr	s1, [sp, #12]
   c:	movi	v0.2s, #0x5f, lsl #24
  10:	fcmpe	s1, s0
  14:	b.lt	34 <__fixunssfdi+0x34>  // b.tstop
  18:	ldr	s1, [sp, #12]
  1c:	movi	v0.2s, #0x5f, lsl #24
  20:	fsub	s0, s1, s0
  24:	fcvtzs	x1, s0
  28:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
  2c:	add	x0, x1, x0
  30:	b	3c <__fixunssfdi+0x3c>
  34:	ldr	s0, [sp, #12]
  38:	fcvtzs	x0, s0
  3c:	add	sp, sp, #0x10
  40:	ret

_fixunsdfsi.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__fixunsdfdi>:
   0:	sub	sp, sp, #0x10
   4:	str	d0, [sp, #8]
   8:	ldr	d0, [sp, #8]
   c:	mov	x0, #0x43e0000000000000    	// #4890909195324358656
  10:	fmov	d1, x0
  14:	fcmpe	d0, d1
  18:	b.lt	40 <__fixunsdfdi+0x40>  // b.tstop
  1c:	ldr	d0, [sp, #8]
  20:	mov	x0, #0x43e0000000000000    	// #4890909195324358656
  24:	fmov	d1, x0
  28:	fsub	d0, d0, d1
  2c:	fcvtzs	d0, d0
  30:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
  34:	fmov	x1, d0
  38:	add	x0, x1, x0
  3c:	b	4c <__fixunsdfdi+0x4c>
  40:	ldr	d0, [sp, #8]
  44:	fcvtzs	d0, d0
  48:	fmov	x0, d0
  4c:	add	sp, sp, #0x10
  50:	ret

_fixunsxfsi.o:     file format elf64-littleaarch64


_fixsfdi.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__fixsfti>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x20, x21, [sp, #16]
   c:	str	s0, [sp, #44]
  10:	ldr	s0, [sp, #44]
  14:	fcmpe	s0, #0.0
  18:	b.pl	44 <__fixsfti+0x44>  // b.nfrst
  1c:	ldr	s0, [sp, #44]
  20:	fneg	s0, s0
  24:	bl	0 <__fixunssfti>
  28:	negs	x2, x0
  2c:	ngc	x0, x1
  30:	mov	x20, x2
  34:	mov	x21, x0
  38:	mov	x0, x20
  3c:	mov	x1, x21
  40:	b	4c <__fixsfti+0x4c>
  44:	ldr	s0, [sp, #44]
  48:	bl	0 <__fixunssfti>
  4c:	ldp	x20, x21, [sp, #16]
  50:	ldp	x29, x30, [sp], #48
  54:	ret

_fixdfdi.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__fixdfti>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x20, x21, [sp, #16]
   c:	str	d0, [sp, #40]
  10:	ldr	d0, [sp, #40]
  14:	fcmpe	d0, #0.0
  18:	b.pl	44 <__fixdfti+0x44>  // b.nfrst
  1c:	ldr	d0, [sp, #40]
  20:	fneg	d0, d0
  24:	bl	0 <__fixunsdfti>
  28:	negs	x2, x0
  2c:	ngc	x0, x1
  30:	mov	x20, x2
  34:	mov	x21, x0
  38:	mov	x0, x20
  3c:	mov	x1, x21
  40:	b	4c <__fixdfti+0x4c>
  44:	ldr	d0, [sp, #40]
  48:	bl	0 <__fixunsdfti>
  4c:	ldp	x20, x21, [sp, #16]
  50:	ldp	x29, x30, [sp], #48
  54:	ret

_fixxfdi.o:     file format elf64-littleaarch64


_fixunssfdi.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__fixunssfti>:
   0:	sub	sp, sp, #0x30
   4:	str	s0, [sp, #12]
   8:	ldr	s0, [sp, #12]
   c:	fcvt	d0, s0
  10:	str	d0, [sp, #40]
  14:	mov	x8, #0x43f0000000000000    	// #4895412794951729152
  18:	fmov	d1, x8
  1c:	ldr	d0, [sp, #40]
  20:	fdiv	d0, d0, d1
  24:	fcvtzu	d0, d0
  28:	str	d0, [sp, #32]
  2c:	ldr	d0, [sp, #32]
  30:	ucvtf	d0, d0
  34:	mov	x8, #0x43f0000000000000    	// #4895412794951729152
  38:	fmov	d1, x8
  3c:	fmul	d0, d0, d1
  40:	ldr	d1, [sp, #40]
  44:	fsub	d0, d1, d0
  48:	fcvtzu	d0, d0
  4c:	str	d0, [sp, #24]
  50:	ldr	x8, [sp, #32]
  54:	mov	x6, x8
  58:	mov	x7, #0x0                   	// #0
  5c:	mov	x3, x6
  60:	mov	x2, #0x0                   	// #0
  64:	ldr	x6, [sp, #24]
  68:	mov	x0, x6
  6c:	mov	x1, #0x0                   	// #0
  70:	orr	x4, x2, x0
  74:	orr	x5, x3, x1
  78:	mov	x0, x4
  7c:	mov	x1, x5
  80:	add	sp, sp, #0x30
  84:	ret

_fixunsdfdi.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__fixunsdfti>:
   0:	sub	sp, sp, #0x20
   4:	str	d0, [sp, #8]
   8:	mov	x8, #0x43f0000000000000    	// #4895412794951729152
   c:	fmov	d1, x8
  10:	ldr	d0, [sp, #8]
  14:	fdiv	d0, d0, d1
  18:	fcvtzu	d0, d0
  1c:	str	d0, [sp, #24]
  20:	ldr	d0, [sp, #24]
  24:	ucvtf	d0, d0
  28:	mov	x8, #0x43f0000000000000    	// #4895412794951729152
  2c:	fmov	d1, x8
  30:	fmul	d0, d0, d1
  34:	ldr	d1, [sp, #8]
  38:	fsub	d0, d1, d0
  3c:	fcvtzu	d0, d0
  40:	str	d0, [sp, #16]
  44:	ldr	x8, [sp, #24]
  48:	mov	x6, x8
  4c:	mov	x7, #0x0                   	// #0
  50:	mov	x3, x6
  54:	mov	x2, #0x0                   	// #0
  58:	ldr	x6, [sp, #16]
  5c:	mov	x0, x6
  60:	mov	x1, #0x0                   	// #0
  64:	orr	x4, x2, x0
  68:	orr	x5, x3, x1
  6c:	mov	x0, x4
  70:	mov	x1, x5
  74:	add	sp, sp, #0x20
  78:	ret

_fixunsxfdi.o:     file format elf64-littleaarch64


_floatdisf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__floattisf>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x0, x1, [sp, #16]
   c:	ldr	x1, [sp, #24]
  10:	mov	x0, #0xfffe000000000000    	// #-562949953421312
  14:	cmp	x1, x0
  18:	b.lt	58 <__floattisf+0x58>  // b.tstop
  1c:	ldr	x1, [sp, #24]
  20:	mov	x0, #0xfffe000000000000    	// #-562949953421312
  24:	cmp	x1, x0
  28:	b.ne	38 <__floattisf+0x38>  // b.any
  2c:	ldr	x0, [sp, #16]
  30:	cmp	x0, #0x0
  34:	b.eq	58 <__floattisf+0x58>  // b.none
  38:	ldr	x1, [sp, #24]
  3c:	mov	x0, #0x1ffffffffffff       	// #562949953421311
  40:	cmp	x1, x0
  44:	b.gt	58 <__floattisf+0x58>
  48:	ldr	x1, [sp, #24]
  4c:	mov	x0, #0x1ffffffffffff       	// #562949953421311
  50:	cmp	x1, x0
  54:	b	a8 <__floattisf+0xa8>
  58:	ldp	x0, x1, [sp, #16]
  5c:	and	x2, x0, #0x7fff
  60:	mov	x8, #0x0                   	// #0
  64:	and	x3, x1, x8
  68:	mov	x0, x2
  6c:	orr	x0, x0, x3
  70:	cmp	x0, #0x0
  74:	b.eq	a8 <__floattisf+0xa8>  // b.none
  78:	ldr	x0, [sp, #16]
  7c:	and	x0, x0, #0xffffffffffff8000
  80:	str	x0, [sp, #16]
  84:	ldr	x1, [sp, #24]
  88:	mov	x0, #0xffffffffffffffff    	// #-1
  8c:	and	x0, x1, x0
  90:	str	x0, [sp, #24]
  94:	ldp	x0, x1, [sp, #16]
  98:	orr	x4, x0, #0x8000
  9c:	mov	x2, #0x0                   	// #0
  a0:	orr	x5, x1, x2
  a4:	stp	x4, x5, [sp, #16]
  a8:	ldr	x0, [sp, #24]
  ac:	mov	x6, x0
  b0:	ldr	x0, [sp, #24]
  b4:	asr	x7, x0, #63
  b8:	mov	x0, x6
  bc:	bl	0 <__floatditf>
  c0:	str	q0, [sp, #32]
  c4:	adrp	x0, 0 <__floattisf>
  c8:	add	x0, x0, #0x0
  cc:	ldr	q1, [x0]
  d0:	ldr	q0, [sp, #32]
  d4:	bl	0 <__multf3>
  d8:	str	q0, [sp, #32]
  dc:	ldr	x0, [sp, #16]
  e0:	bl	0 <__floatunditf>
  e4:	mov	v1.16b, v0.16b
  e8:	ldr	q0, [sp, #32]
  ec:	bl	0 <__addtf3>
  f0:	str	q0, [sp, #32]
  f4:	ldr	q0, [sp, #32]
  f8:	bl	0 <__trunctfsf2>
  fc:	ldp	x29, x30, [sp], #48
 100:	ret

_floatdidf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__floattidf>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x0, x1, [sp, #16]
   c:	ldr	x1, [sp, #24]
  10:	mov	x0, #0xfffe000000000000    	// #-562949953421312
  14:	cmp	x1, x0
  18:	b.lt	58 <__floattidf+0x58>  // b.tstop
  1c:	ldr	x1, [sp, #24]
  20:	mov	x0, #0xfffe000000000000    	// #-562949953421312
  24:	cmp	x1, x0
  28:	b.ne	38 <__floattidf+0x38>  // b.any
  2c:	ldr	x0, [sp, #16]
  30:	cmp	x0, #0x0
  34:	b.eq	58 <__floattidf+0x58>  // b.none
  38:	ldr	x1, [sp, #24]
  3c:	mov	x0, #0x1ffffffffffff       	// #562949953421311
  40:	cmp	x1, x0
  44:	b.gt	58 <__floattidf+0x58>
  48:	ldr	x1, [sp, #24]
  4c:	mov	x0, #0x1ffffffffffff       	// #562949953421311
  50:	cmp	x1, x0
  54:	b	a8 <__floattidf+0xa8>
  58:	ldp	x0, x1, [sp, #16]
  5c:	and	x2, x0, #0x7fff
  60:	mov	x8, #0x0                   	// #0
  64:	and	x3, x1, x8
  68:	mov	x0, x2
  6c:	orr	x0, x0, x3
  70:	cmp	x0, #0x0
  74:	b.eq	a8 <__floattidf+0xa8>  // b.none
  78:	ldr	x0, [sp, #16]
  7c:	and	x0, x0, #0xffffffffffff8000
  80:	str	x0, [sp, #16]
  84:	ldr	x1, [sp, #24]
  88:	mov	x0, #0xffffffffffffffff    	// #-1
  8c:	and	x0, x1, x0
  90:	str	x0, [sp, #24]
  94:	ldp	x0, x1, [sp, #16]
  98:	orr	x4, x0, #0x8000
  9c:	mov	x2, #0x0                   	// #0
  a0:	orr	x5, x1, x2
  a4:	stp	x4, x5, [sp, #16]
  a8:	ldr	x0, [sp, #24]
  ac:	mov	x6, x0
  b0:	ldr	x0, [sp, #24]
  b4:	asr	x7, x0, #63
  b8:	mov	x0, x6
  bc:	bl	0 <__floatditf>
  c0:	str	q0, [sp, #32]
  c4:	adrp	x0, 0 <__floattidf>
  c8:	add	x0, x0, #0x0
  cc:	ldr	q1, [x0]
  d0:	ldr	q0, [sp, #32]
  d4:	bl	0 <__multf3>
  d8:	str	q0, [sp, #32]
  dc:	ldr	x0, [sp, #16]
  e0:	bl	0 <__floatunditf>
  e4:	mov	v1.16b, v0.16b
  e8:	ldr	q0, [sp, #32]
  ec:	bl	0 <__addtf3>
  f0:	str	q0, [sp, #32]
  f4:	ldr	q0, [sp, #32]
  f8:	bl	0 <__trunctfdf2>
  fc:	ldp	x29, x30, [sp], #48
 100:	ret

_floatdixf.o:     file format elf64-littleaarch64


_floatundisf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__floatuntisf>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x0, x1, [sp, #16]
   c:	ldr	x1, [sp, #24]
  10:	mov	x0, #0x1ffffffffffff       	// #562949953421311
  14:	cmp	x1, x0
  18:	b.hi	2c <__floatuntisf+0x2c>  // b.pmore
  1c:	ldr	x1, [sp, #24]
  20:	mov	x0, #0x1ffffffffffff       	// #562949953421311
  24:	cmp	x1, x0
  28:	b	88 <__floatuntisf+0x88>
  2c:	ldr	x0, [sp, #16]
  30:	and	x2, x0, #0x7fff
  34:	ldr	x0, [sp, #24]
  38:	mov	x1, #0x0                   	// #0
  3c:	and	x3, x0, x1
  40:	mov	x0, x2
  44:	orr	x0, x0, x3
  48:	cmp	x0, #0x0
  4c:	b.eq	88 <__floatuntisf+0x88>  // b.none
  50:	ldr	x0, [sp, #16]
  54:	and	x0, x0, #0xffffffffffff8000
  58:	str	x0, [sp, #16]
  5c:	ldr	x1, [sp, #24]
  60:	mov	x0, #0xffffffffffffffff    	// #-1
  64:	and	x0, x1, x0
  68:	str	x0, [sp, #24]
  6c:	ldr	x0, [sp, #16]
  70:	orr	x0, x0, #0x8000
  74:	str	x0, [sp, #16]
  78:	ldr	x0, [sp, #24]
  7c:	mov	x1, #0x0                   	// #0
  80:	orr	x0, x0, x1
  84:	str	x0, [sp, #24]
  88:	ldr	x0, [sp, #24]
  8c:	mov	x4, x0
  90:	mov	x5, #0x0                   	// #0
  94:	mov	x0, x4
  98:	bl	0 <__floatunditf>
  9c:	str	q0, [sp, #32]
  a0:	adrp	x0, 0 <__floatuntisf>
  a4:	add	x0, x0, #0x0
  a8:	ldr	q1, [x0]
  ac:	ldr	q0, [sp, #32]
  b0:	bl	0 <__multf3>
  b4:	str	q0, [sp, #32]
  b8:	ldr	x0, [sp, #16]
  bc:	bl	0 <__floatunditf>
  c0:	mov	v1.16b, v0.16b
  c4:	ldr	q0, [sp, #32]
  c8:	bl	0 <__addtf3>
  cc:	str	q0, [sp, #32]
  d0:	ldr	q0, [sp, #32]
  d4:	bl	0 <__trunctfsf2>
  d8:	ldp	x29, x30, [sp], #48
  dc:	ret

_floatundidf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__floatuntidf>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x0, x1, [sp, #16]
   c:	ldr	x1, [sp, #24]
  10:	mov	x0, #0x1ffffffffffff       	// #562949953421311
  14:	cmp	x1, x0
  18:	b.hi	2c <__floatuntidf+0x2c>  // b.pmore
  1c:	ldr	x1, [sp, #24]
  20:	mov	x0, #0x1ffffffffffff       	// #562949953421311
  24:	cmp	x1, x0
  28:	b	88 <__floatuntidf+0x88>
  2c:	ldr	x0, [sp, #16]
  30:	and	x2, x0, #0x7fff
  34:	ldr	x0, [sp, #24]
  38:	mov	x1, #0x0                   	// #0
  3c:	and	x3, x0, x1
  40:	mov	x0, x2
  44:	orr	x0, x0, x3
  48:	cmp	x0, #0x0
  4c:	b.eq	88 <__floatuntidf+0x88>  // b.none
  50:	ldr	x0, [sp, #16]
  54:	and	x0, x0, #0xffffffffffff8000
  58:	str	x0, [sp, #16]
  5c:	ldr	x1, [sp, #24]
  60:	mov	x0, #0xffffffffffffffff    	// #-1
  64:	and	x0, x1, x0
  68:	str	x0, [sp, #24]
  6c:	ldr	x0, [sp, #16]
  70:	orr	x0, x0, #0x8000
  74:	str	x0, [sp, #16]
  78:	ldr	x0, [sp, #24]
  7c:	mov	x1, #0x0                   	// #0
  80:	orr	x0, x0, x1
  84:	str	x0, [sp, #24]
  88:	ldr	x0, [sp, #24]
  8c:	mov	x4, x0
  90:	mov	x5, #0x0                   	// #0
  94:	mov	x0, x4
  98:	bl	0 <__floatunditf>
  9c:	str	q0, [sp, #32]
  a0:	adrp	x0, 0 <__floatuntidf>
  a4:	add	x0, x0, #0x0
  a8:	ldr	q1, [x0]
  ac:	ldr	q0, [sp, #32]
  b0:	bl	0 <__multf3>
  b4:	str	q0, [sp, #32]
  b8:	ldr	x0, [sp, #16]
  bc:	bl	0 <__floatunditf>
  c0:	mov	v1.16b, v0.16b
  c4:	ldr	q0, [sp, #32]
  c8:	bl	0 <__addtf3>
  cc:	str	q0, [sp, #32]
  d0:	ldr	q0, [sp, #32]
  d4:	bl	0 <__trunctfdf2>
  d8:	ldp	x29, x30, [sp], #48
  dc:	ret

_floatundixf.o:     file format elf64-littleaarch64


_eprintf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__eprintf>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #40]
   c:	str	x1, [sp, #32]
  10:	str	w2, [sp, #28]
  14:	str	x3, [sp, #16]
  18:	adrp	x0, 0 <stderr>
  1c:	ldr	x0, [x0]
  20:	ldr	x0, [x0]
  24:	ldr	x4, [sp, #16]
  28:	ldr	w3, [sp, #28]
  2c:	ldr	x2, [sp, #32]
  30:	ldr	x1, [sp, #40]
  34:	bl	0 <fprintf>
  38:	adrp	x0, 0 <stderr>
  3c:	ldr	x0, [x0]
  40:	ldr	x0, [x0]
  44:	bl	0 <fflush>
  48:	bl	0 <abort>

__gcc_bcmp.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__gcc_bcmp>:
   0:	sub	sp, sp, #0x30
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	str	x2, [sp, #8]
  10:	b	68 <__gcc_bcmp+0x68>
  14:	ldr	x0, [sp, #24]
  18:	add	x1, x0, #0x1
  1c:	str	x1, [sp, #24]
  20:	ldrb	w0, [x0]
  24:	strb	w0, [sp, #47]
  28:	ldr	x0, [sp, #16]
  2c:	add	x1, x0, #0x1
  30:	str	x1, [sp, #16]
  34:	ldrb	w0, [x0]
  38:	strb	w0, [sp, #46]
  3c:	ldrb	w1, [sp, #47]
  40:	ldrb	w0, [sp, #46]
  44:	cmp	w1, w0
  48:	b.eq	5c <__gcc_bcmp+0x5c>  // b.none
  4c:	ldrb	w1, [sp, #47]
  50:	ldrb	w0, [sp, #46]
  54:	sub	w0, w1, w0
  58:	b	78 <__gcc_bcmp+0x78>
  5c:	ldr	x0, [sp, #8]
  60:	sub	x0, x0, #0x1
  64:	str	x0, [sp, #8]
  68:	ldr	x0, [sp, #8]
  6c:	cmp	x0, #0x0
  70:	b.ne	14 <__gcc_bcmp+0x14>  // b.any
  74:	mov	w0, #0x0                   	// #0
  78:	add	sp, sp, #0x30
  7c:	ret

_divdi3.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__divti3>:
   0:	sub	sp, sp, #0x260
   4:	stp	x0, x1, [sp, #16]
   8:	stp	x2, x3, [sp]
   c:	str	xzr, [sp, #600]
  10:	ldp	x0, x1, [sp, #16]
  14:	stp	x0, x1, [sp, #112]
  18:	ldp	x0, x1, [sp]
  1c:	stp	x0, x1, [sp, #96]
  20:	ldr	x0, [sp, #120]
  24:	cmp	x0, #0x0
  28:	b.ge	50 <__divti3+0x50>  // b.tcont
  2c:	ldr	x0, [sp, #600]
  30:	mvn	x0, x0
  34:	str	x0, [sp, #600]
  38:	ldp	x0, x1, [sp, #112]
  3c:	negs	x2, x0
  40:	ngc	x0, x1
  44:	mov	x8, x2
  48:	mov	x9, x0
  4c:	stp	x8, x9, [sp, #112]
  50:	ldr	x0, [sp, #104]
  54:	cmp	x0, #0x0
  58:	b.ge	80 <__divti3+0x80>  // b.tcont
  5c:	ldr	x0, [sp, #600]
  60:	mvn	x0, x0
  64:	str	x0, [sp, #600]
  68:	ldp	x0, x1, [sp, #96]
  6c:	negs	x2, x0
  70:	ngc	x0, x1
  74:	mov	x6, x2
  78:	mov	x7, x0
  7c:	stp	x6, x7, [sp, #96]
  80:	ldp	x0, x1, [sp, #112]
  84:	mov	x2, x0
  88:	mov	x3, x1
  8c:	ldp	x0, x1, [sp, #96]
  90:	add	x6, sp, #0x200
  94:	stp	x2, x3, [x6, #48]
  98:	add	x2, sp, #0x200
  9c:	stp	x0, x1, [x2, #32]
  a0:	str	xzr, [sp, #536]
  a4:	add	x0, sp, #0x200
  a8:	ldp	x0, x1, [x0, #48]
  ac:	stp	x0, x1, [sp, #80]
  b0:	add	x0, sp, #0x200
  b4:	ldp	x0, x1, [x0, #32]
  b8:	stp	x0, x1, [sp, #64]
  bc:	ldr	x0, [sp, #64]
  c0:	str	x0, [sp, #528]
  c4:	ldr	x0, [sp, #72]
  c8:	str	x0, [sp, #520]
  cc:	ldr	x0, [sp, #80]
  d0:	str	x0, [sp, #512]
  d4:	ldr	x0, [sp, #88]
  d8:	str	x0, [sp, #504]
  dc:	ldr	x0, [sp, #520]
  e0:	cmp	x0, #0x0
  e4:	b.ne	7d4 <__divti3+0x7d4>  // b.any
  e8:	ldr	x1, [sp, #528]
  ec:	ldr	x0, [sp, #504]
  f0:	cmp	x1, x0
  f4:	b.ls	340 <__divti3+0x340>  // b.plast
  f8:	ldr	x0, [sp, #528]
  fc:	clz	x0, x0
 100:	sxtw	x0, w0
 104:	str	x0, [sp, #496]
 108:	ldr	x0, [sp, #496]
 10c:	cmp	x0, #0x0
 110:	b.eq	16c <__divti3+0x16c>  // b.none
 114:	ldr	x0, [sp, #496]
 118:	mov	w1, w0
 11c:	ldr	x0, [sp, #528]
 120:	lsl	x0, x0, x1
 124:	str	x0, [sp, #528]
 128:	ldr	x0, [sp, #496]
 12c:	mov	w1, w0
 130:	ldr	x0, [sp, #504]
 134:	lsl	x1, x0, x1
 138:	ldr	x0, [sp, #496]
 13c:	mov	w2, w0
 140:	mov	w0, #0x40                  	// #64
 144:	sub	w0, w0, w2
 148:	ldr	x2, [sp, #512]
 14c:	lsr	x0, x2, x0
 150:	orr	x0, x1, x0
 154:	str	x0, [sp, #504]
 158:	ldr	x0, [sp, #496]
 15c:	mov	w1, w0
 160:	ldr	x0, [sp, #512]
 164:	lsl	x0, x0, x1
 168:	str	x0, [sp, #512]
 16c:	ldr	x0, [sp, #528]
 170:	lsr	x0, x0, #32
 174:	str	x0, [sp, #488]
 178:	ldr	x0, [sp, #528]
 17c:	and	x0, x0, #0xffffffff
 180:	str	x0, [sp, #480]
 184:	ldr	x0, [sp, #504]
 188:	ldr	x1, [sp, #488]
 18c:	udiv	x2, x0, x1
 190:	ldr	x1, [sp, #488]
 194:	mul	x1, x2, x1
 198:	sub	x0, x0, x1
 19c:	str	x0, [sp, #472]
 1a0:	ldr	x1, [sp, #504]
 1a4:	ldr	x0, [sp, #488]
 1a8:	udiv	x0, x1, x0
 1ac:	str	x0, [sp, #464]
 1b0:	ldr	x1, [sp, #480]
 1b4:	ldr	x0, [sp, #464]
 1b8:	mul	x0, x1, x0
 1bc:	str	x0, [sp, #456]
 1c0:	ldr	x0, [sp, #472]
 1c4:	lsl	x1, x0, #32
 1c8:	ldr	x0, [sp, #512]
 1cc:	lsr	x0, x0, #32
 1d0:	orr	x0, x1, x0
 1d4:	str	x0, [sp, #472]
 1d8:	ldr	x1, [sp, #456]
 1dc:	ldr	x0, [sp, #472]
 1e0:	cmp	x1, x0
 1e4:	b.ls	240 <__divti3+0x240>  // b.plast
 1e8:	ldr	x0, [sp, #464]
 1ec:	sub	x0, x0, #0x1
 1f0:	str	x0, [sp, #464]
 1f4:	ldr	x1, [sp, #472]
 1f8:	ldr	x0, [sp, #528]
 1fc:	add	x0, x1, x0
 200:	str	x0, [sp, #472]
 204:	ldr	x1, [sp, #528]
 208:	ldr	x0, [sp, #472]
 20c:	cmp	x1, x0
 210:	b.hi	240 <__divti3+0x240>  // b.pmore
 214:	ldr	x1, [sp, #456]
 218:	ldr	x0, [sp, #472]
 21c:	cmp	x1, x0
 220:	b.ls	240 <__divti3+0x240>  // b.plast
 224:	ldr	x0, [sp, #464]
 228:	sub	x0, x0, #0x1
 22c:	str	x0, [sp, #464]
 230:	ldr	x1, [sp, #472]
 234:	ldr	x0, [sp, #528]
 238:	add	x0, x1, x0
 23c:	str	x0, [sp, #472]
 240:	ldr	x1, [sp, #472]
 244:	ldr	x0, [sp, #456]
 248:	sub	x0, x1, x0
 24c:	str	x0, [sp, #472]
 250:	ldr	x0, [sp, #472]
 254:	ldr	x1, [sp, #488]
 258:	udiv	x2, x0, x1
 25c:	ldr	x1, [sp, #488]
 260:	mul	x1, x2, x1
 264:	sub	x0, x0, x1
 268:	str	x0, [sp, #448]
 26c:	ldr	x1, [sp, #472]
 270:	ldr	x0, [sp, #488]
 274:	udiv	x0, x1, x0
 278:	str	x0, [sp, #440]
 27c:	ldr	x1, [sp, #480]
 280:	ldr	x0, [sp, #440]
 284:	mul	x0, x1, x0
 288:	str	x0, [sp, #456]
 28c:	ldr	x0, [sp, #448]
 290:	lsl	x1, x0, #32
 294:	ldr	x0, [sp, #512]
 298:	and	x0, x0, #0xffffffff
 29c:	orr	x0, x1, x0
 2a0:	str	x0, [sp, #448]
 2a4:	ldr	x1, [sp, #456]
 2a8:	ldr	x0, [sp, #448]
 2ac:	cmp	x1, x0
 2b0:	b.ls	30c <__divti3+0x30c>  // b.plast
 2b4:	ldr	x0, [sp, #440]
 2b8:	sub	x0, x0, #0x1
 2bc:	str	x0, [sp, #440]
 2c0:	ldr	x1, [sp, #448]
 2c4:	ldr	x0, [sp, #528]
 2c8:	add	x0, x1, x0
 2cc:	str	x0, [sp, #448]
 2d0:	ldr	x1, [sp, #528]
 2d4:	ldr	x0, [sp, #448]
 2d8:	cmp	x1, x0
 2dc:	b.hi	30c <__divti3+0x30c>  // b.pmore
 2e0:	ldr	x1, [sp, #456]
 2e4:	ldr	x0, [sp, #448]
 2e8:	cmp	x1, x0
 2ec:	b.ls	30c <__divti3+0x30c>  // b.plast
 2f0:	ldr	x0, [sp, #440]
 2f4:	sub	x0, x0, #0x1
 2f8:	str	x0, [sp, #440]
 2fc:	ldr	x1, [sp, #448]
 300:	ldr	x0, [sp, #528]
 304:	add	x0, x1, x0
 308:	str	x0, [sp, #448]
 30c:	ldr	x1, [sp, #448]
 310:	ldr	x0, [sp, #456]
 314:	sub	x0, x1, x0
 318:	str	x0, [sp, #448]
 31c:	ldr	x0, [sp, #464]
 320:	lsl	x1, x0, #32
 324:	ldr	x0, [sp, #440]
 328:	orr	x0, x1, x0
 32c:	str	x0, [sp, #432]
 330:	ldr	x0, [sp, #448]
 334:	str	x0, [sp, #512]
 338:	str	xzr, [sp, #424]
 33c:	b	7a0 <__divti3+0x7a0>
 340:	ldr	x0, [sp, #528]
 344:	cmp	x0, #0x0
 348:	b.ne	35c <__divti3+0x35c>  // b.any
 34c:	mov	x1, #0x1                   	// #1
 350:	ldr	x0, [sp, #528]
 354:	udiv	x0, x1, x0
 358:	str	x0, [sp, #528]
 35c:	ldr	x0, [sp, #528]
 360:	clz	x0, x0
 364:	sxtw	x0, w0
 368:	str	x0, [sp, #496]
 36c:	ldr	x0, [sp, #496]
 370:	cmp	x0, #0x0
 374:	b.ne	394 <__divti3+0x394>  // b.any
 378:	ldr	x1, [sp, #504]
 37c:	ldr	x0, [sp, #528]
 380:	sub	x0, x1, x0
 384:	str	x0, [sp, #504]
 388:	mov	x0, #0x1                   	// #1
 38c:	str	x0, [sp, #424]
 390:	b	5d4 <__divti3+0x5d4>
 394:	mov	x1, #0x40                  	// #64
 398:	ldr	x0, [sp, #496]
 39c:	sub	x0, x1, x0
 3a0:	str	x0, [sp, #416]
 3a4:	ldr	x0, [sp, #496]
 3a8:	mov	w1, w0
 3ac:	ldr	x0, [sp, #528]
 3b0:	lsl	x0, x0, x1
 3b4:	str	x0, [sp, #528]
 3b8:	ldr	x0, [sp, #416]
 3bc:	mov	w1, w0
 3c0:	ldr	x0, [sp, #504]
 3c4:	lsr	x0, x0, x1
 3c8:	str	x0, [sp, #408]
 3cc:	ldr	x0, [sp, #496]
 3d0:	mov	w1, w0
 3d4:	ldr	x0, [sp, #504]
 3d8:	lsl	x1, x0, x1
 3dc:	ldr	x0, [sp, #416]
 3e0:	mov	w2, w0
 3e4:	ldr	x0, [sp, #512]
 3e8:	lsr	x0, x0, x2
 3ec:	orr	x0, x1, x0
 3f0:	str	x0, [sp, #504]
 3f4:	ldr	x0, [sp, #496]
 3f8:	mov	w1, w0
 3fc:	ldr	x0, [sp, #512]
 400:	lsl	x0, x0, x1
 404:	str	x0, [sp, #512]
 408:	ldr	x0, [sp, #528]
 40c:	lsr	x0, x0, #32
 410:	str	x0, [sp, #400]
 414:	ldr	x0, [sp, #528]
 418:	and	x0, x0, #0xffffffff
 41c:	str	x0, [sp, #392]
 420:	ldr	x0, [sp, #408]
 424:	ldr	x1, [sp, #400]
 428:	udiv	x2, x0, x1
 42c:	ldr	x1, [sp, #400]
 430:	mul	x1, x2, x1
 434:	sub	x0, x0, x1
 438:	str	x0, [sp, #384]
 43c:	ldr	x1, [sp, #408]
 440:	ldr	x0, [sp, #400]
 444:	udiv	x0, x1, x0
 448:	str	x0, [sp, #376]
 44c:	ldr	x1, [sp, #392]
 450:	ldr	x0, [sp, #376]
 454:	mul	x0, x1, x0
 458:	str	x0, [sp, #368]
 45c:	ldr	x0, [sp, #384]
 460:	lsl	x1, x0, #32
 464:	ldr	x0, [sp, #504]
 468:	lsr	x0, x0, #32
 46c:	orr	x0, x1, x0
 470:	str	x0, [sp, #384]
 474:	ldr	x1, [sp, #368]
 478:	ldr	x0, [sp, #384]
 47c:	cmp	x1, x0
 480:	b.ls	4dc <__divti3+0x4dc>  // b.plast
 484:	ldr	x0, [sp, #376]
 488:	sub	x0, x0, #0x1
 48c:	str	x0, [sp, #376]
 490:	ldr	x1, [sp, #384]
 494:	ldr	x0, [sp, #528]
 498:	add	x0, x1, x0
 49c:	str	x0, [sp, #384]
 4a0:	ldr	x1, [sp, #528]
 4a4:	ldr	x0, [sp, #384]
 4a8:	cmp	x1, x0
 4ac:	b.hi	4dc <__divti3+0x4dc>  // b.pmore
 4b0:	ldr	x1, [sp, #368]
 4b4:	ldr	x0, [sp, #384]
 4b8:	cmp	x1, x0
 4bc:	b.ls	4dc <__divti3+0x4dc>  // b.plast
 4c0:	ldr	x0, [sp, #376]
 4c4:	sub	x0, x0, #0x1
 4c8:	str	x0, [sp, #376]
 4cc:	ldr	x1, [sp, #384]
 4d0:	ldr	x0, [sp, #528]
 4d4:	add	x0, x1, x0
 4d8:	str	x0, [sp, #384]
 4dc:	ldr	x1, [sp, #384]
 4e0:	ldr	x0, [sp, #368]
 4e4:	sub	x0, x1, x0
 4e8:	str	x0, [sp, #384]
 4ec:	ldr	x0, [sp, #384]
 4f0:	ldr	x1, [sp, #400]
 4f4:	udiv	x2, x0, x1
 4f8:	ldr	x1, [sp, #400]
 4fc:	mul	x1, x2, x1
 500:	sub	x0, x0, x1
 504:	str	x0, [sp, #360]
 508:	ldr	x1, [sp, #384]
 50c:	ldr	x0, [sp, #400]
 510:	udiv	x0, x1, x0
 514:	str	x0, [sp, #352]
 518:	ldr	x1, [sp, #392]
 51c:	ldr	x0, [sp, #352]
 520:	mul	x0, x1, x0
 524:	str	x0, [sp, #368]
 528:	ldr	x0, [sp, #360]
 52c:	lsl	x1, x0, #32
 530:	ldr	x0, [sp, #504]
 534:	and	x0, x0, #0xffffffff
 538:	orr	x0, x1, x0
 53c:	str	x0, [sp, #360]
 540:	ldr	x1, [sp, #368]
 544:	ldr	x0, [sp, #360]
 548:	cmp	x1, x0
 54c:	b.ls	5a8 <__divti3+0x5a8>  // b.plast
 550:	ldr	x0, [sp, #352]
 554:	sub	x0, x0, #0x1
 558:	str	x0, [sp, #352]
 55c:	ldr	x1, [sp, #360]
 560:	ldr	x0, [sp, #528]
 564:	add	x0, x1, x0
 568:	str	x0, [sp, #360]
 56c:	ldr	x1, [sp, #528]
 570:	ldr	x0, [sp, #360]
 574:	cmp	x1, x0
 578:	b.hi	5a8 <__divti3+0x5a8>  // b.pmore
 57c:	ldr	x1, [sp, #368]
 580:	ldr	x0, [sp, #360]
 584:	cmp	x1, x0
 588:	b.ls	5a8 <__divti3+0x5a8>  // b.plast
 58c:	ldr	x0, [sp, #352]
 590:	sub	x0, x0, #0x1
 594:	str	x0, [sp, #352]
 598:	ldr	x1, [sp, #360]
 59c:	ldr	x0, [sp, #528]
 5a0:	add	x0, x1, x0
 5a4:	str	x0, [sp, #360]
 5a8:	ldr	x1, [sp, #360]
 5ac:	ldr	x0, [sp, #368]
 5b0:	sub	x0, x1, x0
 5b4:	str	x0, [sp, #360]
 5b8:	ldr	x0, [sp, #376]
 5bc:	lsl	x1, x0, #32
 5c0:	ldr	x0, [sp, #352]
 5c4:	orr	x0, x1, x0
 5c8:	str	x0, [sp, #424]
 5cc:	ldr	x0, [sp, #360]
 5d0:	str	x0, [sp, #504]
 5d4:	ldr	x0, [sp, #528]
 5d8:	lsr	x0, x0, #32
 5dc:	str	x0, [sp, #344]
 5e0:	ldr	x0, [sp, #528]
 5e4:	and	x0, x0, #0xffffffff
 5e8:	str	x0, [sp, #336]
 5ec:	ldr	x0, [sp, #504]
 5f0:	ldr	x1, [sp, #344]
 5f4:	udiv	x2, x0, x1
 5f8:	ldr	x1, [sp, #344]
 5fc:	mul	x1, x2, x1
 600:	sub	x0, x0, x1
 604:	str	x0, [sp, #328]
 608:	ldr	x1, [sp, #504]
 60c:	ldr	x0, [sp, #344]
 610:	udiv	x0, x1, x0
 614:	str	x0, [sp, #320]
 618:	ldr	x1, [sp, #336]
 61c:	ldr	x0, [sp, #320]
 620:	mul	x0, x1, x0
 624:	str	x0, [sp, #312]
 628:	ldr	x0, [sp, #328]
 62c:	lsl	x1, x0, #32
 630:	ldr	x0, [sp, #512]
 634:	lsr	x0, x0, #32
 638:	orr	x0, x1, x0
 63c:	str	x0, [sp, #328]
 640:	ldr	x1, [sp, #312]
 644:	ldr	x0, [sp, #328]
 648:	cmp	x1, x0
 64c:	b.ls	6a8 <__divti3+0x6a8>  // b.plast
 650:	ldr	x0, [sp, #320]
 654:	sub	x0, x0, #0x1
 658:	str	x0, [sp, #320]
 65c:	ldr	x1, [sp, #328]
 660:	ldr	x0, [sp, #528]
 664:	add	x0, x1, x0
 668:	str	x0, [sp, #328]
 66c:	ldr	x1, [sp, #528]
 670:	ldr	x0, [sp, #328]
 674:	cmp	x1, x0
 678:	b.hi	6a8 <__divti3+0x6a8>  // b.pmore
 67c:	ldr	x1, [sp, #312]
 680:	ldr	x0, [sp, #328]
 684:	cmp	x1, x0
 688:	b.ls	6a8 <__divti3+0x6a8>  // b.plast
 68c:	ldr	x0, [sp, #320]
 690:	sub	x0, x0, #0x1
 694:	str	x0, [sp, #320]
 698:	ldr	x1, [sp, #328]
 69c:	ldr	x0, [sp, #528]
 6a0:	add	x0, x1, x0
 6a4:	str	x0, [sp, #328]
 6a8:	ldr	x1, [sp, #328]
 6ac:	ldr	x0, [sp, #312]
 6b0:	sub	x0, x1, x0
 6b4:	str	x0, [sp, #328]
 6b8:	ldr	x0, [sp, #328]
 6bc:	ldr	x1, [sp, #344]
 6c0:	udiv	x2, x0, x1
 6c4:	ldr	x1, [sp, #344]
 6c8:	mul	x1, x2, x1
 6cc:	sub	x0, x0, x1
 6d0:	str	x0, [sp, #304]
 6d4:	ldr	x1, [sp, #328]
 6d8:	ldr	x0, [sp, #344]
 6dc:	udiv	x0, x1, x0
 6e0:	str	x0, [sp, #296]
 6e4:	ldr	x1, [sp, #336]
 6e8:	ldr	x0, [sp, #296]
 6ec:	mul	x0, x1, x0
 6f0:	str	x0, [sp, #312]
 6f4:	ldr	x0, [sp, #304]
 6f8:	lsl	x1, x0, #32
 6fc:	ldr	x0, [sp, #512]
 700:	and	x0, x0, #0xffffffff
 704:	orr	x0, x1, x0
 708:	str	x0, [sp, #304]
 70c:	ldr	x1, [sp, #312]
 710:	ldr	x0, [sp, #304]
 714:	cmp	x1, x0
 718:	b.ls	774 <__divti3+0x774>  // b.plast
 71c:	ldr	x0, [sp, #296]
 720:	sub	x0, x0, #0x1
 724:	str	x0, [sp, #296]
 728:	ldr	x1, [sp, #304]
 72c:	ldr	x0, [sp, #528]
 730:	add	x0, x1, x0
 734:	str	x0, [sp, #304]
 738:	ldr	x1, [sp, #528]
 73c:	ldr	x0, [sp, #304]
 740:	cmp	x1, x0
 744:	b.hi	774 <__divti3+0x774>  // b.pmore
 748:	ldr	x1, [sp, #312]
 74c:	ldr	x0, [sp, #304]
 750:	cmp	x1, x0
 754:	b.ls	774 <__divti3+0x774>  // b.plast
 758:	ldr	x0, [sp, #296]
 75c:	sub	x0, x0, #0x1
 760:	str	x0, [sp, #296]
 764:	ldr	x1, [sp, #304]
 768:	ldr	x0, [sp, #528]
 76c:	add	x0, x1, x0
 770:	str	x0, [sp, #304]
 774:	ldr	x1, [sp, #304]
 778:	ldr	x0, [sp, #312]
 77c:	sub	x0, x1, x0
 780:	str	x0, [sp, #304]
 784:	ldr	x0, [sp, #320]
 788:	lsl	x1, x0, #32
 78c:	ldr	x0, [sp, #296]
 790:	orr	x0, x1, x0
 794:	str	x0, [sp, #432]
 798:	ldr	x0, [sp, #304]
 79c:	str	x0, [sp, #512]
 7a0:	ldr	x0, [sp, #536]
 7a4:	cmp	x0, #0x0
 7a8:	b.eq	d40 <__divti3+0xd40>  // b.none
 7ac:	ldr	x0, [sp, #496]
 7b0:	mov	w1, w0
 7b4:	ldr	x0, [sp, #512]
 7b8:	lsr	x0, x0, x1
 7bc:	str	x0, [sp, #48]
 7c0:	str	xzr, [sp, #56]
 7c4:	ldp	x0, x1, [sp, #48]
 7c8:	ldr	x2, [sp, #536]
 7cc:	stp	x0, x1, [x2]
 7d0:	b	d40 <__divti3+0xd40>
 7d4:	ldr	x1, [sp, #520]
 7d8:	ldr	x0, [sp, #504]
 7dc:	cmp	x1, x0
 7e0:	b.ls	818 <__divti3+0x818>  // b.plast
 7e4:	str	xzr, [sp, #432]
 7e8:	str	xzr, [sp, #424]
 7ec:	ldr	x0, [sp, #536]
 7f0:	cmp	x0, #0x0
 7f4:	b.eq	d40 <__divti3+0xd40>  // b.none
 7f8:	ldr	x0, [sp, #512]
 7fc:	str	x0, [sp, #48]
 800:	ldr	x0, [sp, #504]
 804:	str	x0, [sp, #56]
 808:	ldp	x0, x1, [sp, #48]
 80c:	ldr	x2, [sp, #536]
 810:	stp	x0, x1, [x2]
 814:	b	d40 <__divti3+0xd40>
 818:	ldr	x0, [sp, #520]
 81c:	clz	x0, x0
 820:	sxtw	x0, w0
 824:	str	x0, [sp, #496]
 828:	ldr	x0, [sp, #496]
 82c:	cmp	x0, #0x0
 830:	b.ne	8d8 <__divti3+0x8d8>  // b.any
 834:	ldr	x1, [sp, #520]
 838:	ldr	x0, [sp, #504]
 83c:	cmp	x1, x0
 840:	b.cc	854 <__divti3+0x854>  // b.lo, b.ul, b.last
 844:	ldr	x1, [sp, #528]
 848:	ldr	x0, [sp, #512]
 84c:	cmp	x1, x0
 850:	b.hi	8a4 <__divti3+0x8a4>  // b.pmore
 854:	mov	x0, #0x1                   	// #1
 858:	str	x0, [sp, #432]
 85c:	ldr	x1, [sp, #512]
 860:	ldr	x0, [sp, #528]
 864:	sub	x0, x1, x0
 868:	str	x0, [sp, #288]
 86c:	ldr	x1, [sp, #504]
 870:	ldr	x0, [sp, #520]
 874:	sub	x1, x1, x0
 878:	ldr	x2, [sp, #512]
 87c:	ldr	x0, [sp, #288]
 880:	cmp	x2, x0
 884:	cset	w0, cc  // cc = lo, ul, last
 888:	and	w0, w0, #0xff
 88c:	and	x0, x0, #0xff
 890:	sub	x0, x1, x0
 894:	str	x0, [sp, #504]
 898:	ldr	x0, [sp, #288]
 89c:	str	x0, [sp, #512]
 8a0:	b	8a8 <__divti3+0x8a8>
 8a4:	str	xzr, [sp, #432]
 8a8:	str	xzr, [sp, #424]
 8ac:	ldr	x0, [sp, #536]
 8b0:	cmp	x0, #0x0
 8b4:	b.eq	d40 <__divti3+0xd40>  // b.none
 8b8:	ldr	x0, [sp, #512]
 8bc:	str	x0, [sp, #48]
 8c0:	ldr	x0, [sp, #504]
 8c4:	str	x0, [sp, #56]
 8c8:	ldp	x0, x1, [sp, #48]
 8cc:	ldr	x2, [sp, #536]
 8d0:	stp	x0, x1, [x2]
 8d4:	b	d40 <__divti3+0xd40>
 8d8:	mov	x1, #0x40                  	// #64
 8dc:	ldr	x0, [sp, #496]
 8e0:	sub	x0, x1, x0
 8e4:	str	x0, [sp, #416]
 8e8:	ldr	x0, [sp, #496]
 8ec:	mov	w1, w0
 8f0:	ldr	x0, [sp, #520]
 8f4:	lsl	x1, x0, x1
 8f8:	ldr	x0, [sp, #416]
 8fc:	mov	w2, w0
 900:	ldr	x0, [sp, #528]
 904:	lsr	x0, x0, x2
 908:	orr	x0, x1, x0
 90c:	str	x0, [sp, #520]
 910:	ldr	x0, [sp, #496]
 914:	mov	w1, w0
 918:	ldr	x0, [sp, #528]
 91c:	lsl	x0, x0, x1
 920:	str	x0, [sp, #528]
 924:	ldr	x0, [sp, #416]
 928:	mov	w1, w0
 92c:	ldr	x0, [sp, #504]
 930:	lsr	x0, x0, x1
 934:	str	x0, [sp, #408]
 938:	ldr	x0, [sp, #496]
 93c:	mov	w1, w0
 940:	ldr	x0, [sp, #504]
 944:	lsl	x1, x0, x1
 948:	ldr	x0, [sp, #416]
 94c:	mov	w2, w0
 950:	ldr	x0, [sp, #512]
 954:	lsr	x0, x0, x2
 958:	orr	x0, x1, x0
 95c:	str	x0, [sp, #504]
 960:	ldr	x0, [sp, #496]
 964:	mov	w1, w0
 968:	ldr	x0, [sp, #512]
 96c:	lsl	x0, x0, x1
 970:	str	x0, [sp, #512]
 974:	ldr	x0, [sp, #520]
 978:	lsr	x0, x0, #32
 97c:	str	x0, [sp, #280]
 980:	ldr	x0, [sp, #520]
 984:	and	x0, x0, #0xffffffff
 988:	str	x0, [sp, #272]
 98c:	ldr	x0, [sp, #408]
 990:	ldr	x1, [sp, #280]
 994:	udiv	x2, x0, x1
 998:	ldr	x1, [sp, #280]
 99c:	mul	x1, x2, x1
 9a0:	sub	x0, x0, x1
 9a4:	str	x0, [sp, #264]
 9a8:	ldr	x1, [sp, #408]
 9ac:	ldr	x0, [sp, #280]
 9b0:	udiv	x0, x1, x0
 9b4:	str	x0, [sp, #256]
 9b8:	ldr	x1, [sp, #272]
 9bc:	ldr	x0, [sp, #256]
 9c0:	mul	x0, x1, x0
 9c4:	str	x0, [sp, #248]
 9c8:	ldr	x0, [sp, #264]
 9cc:	lsl	x1, x0, #32
 9d0:	ldr	x0, [sp, #504]
 9d4:	lsr	x0, x0, #32
 9d8:	orr	x0, x1, x0
 9dc:	str	x0, [sp, #264]
 9e0:	ldr	x1, [sp, #248]
 9e4:	ldr	x0, [sp, #264]
 9e8:	cmp	x1, x0
 9ec:	b.ls	a48 <__divti3+0xa48>  // b.plast
 9f0:	ldr	x0, [sp, #256]
 9f4:	sub	x0, x0, #0x1
 9f8:	str	x0, [sp, #256]
 9fc:	ldr	x1, [sp, #264]
 a00:	ldr	x0, [sp, #520]
 a04:	add	x0, x1, x0
 a08:	str	x0, [sp, #264]
 a0c:	ldr	x1, [sp, #520]
 a10:	ldr	x0, [sp, #264]
 a14:	cmp	x1, x0
 a18:	b.hi	a48 <__divti3+0xa48>  // b.pmore
 a1c:	ldr	x1, [sp, #248]
 a20:	ldr	x0, [sp, #264]
 a24:	cmp	x1, x0
 a28:	b.ls	a48 <__divti3+0xa48>  // b.plast
 a2c:	ldr	x0, [sp, #256]
 a30:	sub	x0, x0, #0x1
 a34:	str	x0, [sp, #256]
 a38:	ldr	x1, [sp, #264]
 a3c:	ldr	x0, [sp, #520]
 a40:	add	x0, x1, x0
 a44:	str	x0, [sp, #264]
 a48:	ldr	x1, [sp, #264]
 a4c:	ldr	x0, [sp, #248]
 a50:	sub	x0, x1, x0
 a54:	str	x0, [sp, #264]
 a58:	ldr	x0, [sp, #264]
 a5c:	ldr	x1, [sp, #280]
 a60:	udiv	x2, x0, x1
 a64:	ldr	x1, [sp, #280]
 a68:	mul	x1, x2, x1
 a6c:	sub	x0, x0, x1
 a70:	str	x0, [sp, #240]
 a74:	ldr	x1, [sp, #264]
 a78:	ldr	x0, [sp, #280]
 a7c:	udiv	x0, x1, x0
 a80:	str	x0, [sp, #232]
 a84:	ldr	x1, [sp, #272]
 a88:	ldr	x0, [sp, #232]
 a8c:	mul	x0, x1, x0
 a90:	str	x0, [sp, #248]
 a94:	ldr	x0, [sp, #240]
 a98:	lsl	x1, x0, #32
 a9c:	ldr	x0, [sp, #504]
 aa0:	and	x0, x0, #0xffffffff
 aa4:	orr	x0, x1, x0
 aa8:	str	x0, [sp, #240]
 aac:	ldr	x1, [sp, #248]
 ab0:	ldr	x0, [sp, #240]
 ab4:	cmp	x1, x0
 ab8:	b.ls	b14 <__divti3+0xb14>  // b.plast
 abc:	ldr	x0, [sp, #232]
 ac0:	sub	x0, x0, #0x1
 ac4:	str	x0, [sp, #232]
 ac8:	ldr	x1, [sp, #240]
 acc:	ldr	x0, [sp, #520]
 ad0:	add	x0, x1, x0
 ad4:	str	x0, [sp, #240]
 ad8:	ldr	x1, [sp, #520]
 adc:	ldr	x0, [sp, #240]
 ae0:	cmp	x1, x0
 ae4:	b.hi	b14 <__divti3+0xb14>  // b.pmore
 ae8:	ldr	x1, [sp, #248]
 aec:	ldr	x0, [sp, #240]
 af0:	cmp	x1, x0
 af4:	b.ls	b14 <__divti3+0xb14>  // b.plast
 af8:	ldr	x0, [sp, #232]
 afc:	sub	x0, x0, #0x1
 b00:	str	x0, [sp, #232]
 b04:	ldr	x1, [sp, #240]
 b08:	ldr	x0, [sp, #520]
 b0c:	add	x0, x1, x0
 b10:	str	x0, [sp, #240]
 b14:	ldr	x1, [sp, #240]
 b18:	ldr	x0, [sp, #248]
 b1c:	sub	x0, x1, x0
 b20:	str	x0, [sp, #240]
 b24:	ldr	x0, [sp, #256]
 b28:	lsl	x1, x0, #32
 b2c:	ldr	x0, [sp, #232]
 b30:	orr	x0, x1, x0
 b34:	str	x0, [sp, #432]
 b38:	ldr	x0, [sp, #240]
 b3c:	str	x0, [sp, #504]
 b40:	ldr	x0, [sp, #432]
 b44:	and	x0, x0, #0xffffffff
 b48:	str	x0, [sp, #224]
 b4c:	ldr	x0, [sp, #432]
 b50:	lsr	x0, x0, #32
 b54:	str	x0, [sp, #216]
 b58:	ldr	x0, [sp, #528]
 b5c:	and	x0, x0, #0xffffffff
 b60:	str	x0, [sp, #208]
 b64:	ldr	x0, [sp, #528]
 b68:	lsr	x0, x0, #32
 b6c:	str	x0, [sp, #200]
 b70:	ldr	x1, [sp, #224]
 b74:	ldr	x0, [sp, #208]
 b78:	mul	x0, x1, x0
 b7c:	str	x0, [sp, #192]
 b80:	ldr	x1, [sp, #224]
 b84:	ldr	x0, [sp, #200]
 b88:	mul	x0, x1, x0
 b8c:	str	x0, [sp, #184]
 b90:	ldr	x1, [sp, #216]
 b94:	ldr	x0, [sp, #208]
 b98:	mul	x0, x1, x0
 b9c:	str	x0, [sp, #176]
 ba0:	ldr	x1, [sp, #216]
 ba4:	ldr	x0, [sp, #200]
 ba8:	mul	x0, x1, x0
 bac:	str	x0, [sp, #168]
 bb0:	ldr	x0, [sp, #192]
 bb4:	lsr	x0, x0, #32
 bb8:	ldr	x1, [sp, #184]
 bbc:	add	x0, x1, x0
 bc0:	str	x0, [sp, #184]
 bc4:	ldr	x1, [sp, #184]
 bc8:	ldr	x0, [sp, #176]
 bcc:	add	x0, x1, x0
 bd0:	str	x0, [sp, #184]
 bd4:	ldr	x1, [sp, #176]
 bd8:	ldr	x0, [sp, #184]
 bdc:	cmp	x1, x0
 be0:	b.ls	bf4 <__divti3+0xbf4>  // b.plast
 be4:	ldr	x1, [sp, #168]
 be8:	mov	x0, #0x100000000           	// #4294967296
 bec:	add	x0, x1, x0
 bf0:	str	x0, [sp, #168]
 bf4:	ldr	x0, [sp, #184]
 bf8:	lsr	x1, x0, #32
 bfc:	ldr	x0, [sp, #168]
 c00:	add	x0, x1, x0
 c04:	str	x0, [sp, #160]
 c08:	ldr	x0, [sp, #184]
 c0c:	and	x0, x0, #0xffffffff
 c10:	lsl	x1, x0, #32
 c14:	ldr	x0, [sp, #192]
 c18:	and	x0, x0, #0xffffffff
 c1c:	add	x0, x1, x0
 c20:	str	x0, [sp, #152]
 c24:	ldr	x1, [sp, #504]
 c28:	ldr	x0, [sp, #160]
 c2c:	cmp	x1, x0
 c30:	b.cc	c54 <__divti3+0xc54>  // b.lo, b.ul, b.last
 c34:	ldr	x1, [sp, #504]
 c38:	ldr	x0, [sp, #160]
 c3c:	cmp	x1, x0
 c40:	b.ne	ca4 <__divti3+0xca4>  // b.any
 c44:	ldr	x1, [sp, #512]
 c48:	ldr	x0, [sp, #152]
 c4c:	cmp	x1, x0
 c50:	b.cs	ca4 <__divti3+0xca4>  // b.hs, b.nlast
 c54:	ldr	x0, [sp, #432]
 c58:	sub	x0, x0, #0x1
 c5c:	str	x0, [sp, #432]
 c60:	ldr	x1, [sp, #152]
 c64:	ldr	x0, [sp, #528]
 c68:	sub	x0, x1, x0
 c6c:	str	x0, [sp, #144]
 c70:	ldr	x1, [sp, #160]
 c74:	ldr	x0, [sp, #520]
 c78:	sub	x1, x1, x0
 c7c:	ldr	x2, [sp, #152]
 c80:	ldr	x0, [sp, #144]
 c84:	cmp	x2, x0
 c88:	cset	w0, cc  // cc = lo, ul, last
 c8c:	and	w0, w0, #0xff
 c90:	and	x0, x0, #0xff
 c94:	sub	x0, x1, x0
 c98:	str	x0, [sp, #160]
 c9c:	ldr	x0, [sp, #144]
 ca0:	str	x0, [sp, #152]
 ca4:	str	xzr, [sp, #424]
 ca8:	ldr	x0, [sp, #536]
 cac:	cmp	x0, #0x0
 cb0:	b.eq	d40 <__divti3+0xd40>  // b.none
 cb4:	ldr	x1, [sp, #512]
 cb8:	ldr	x0, [sp, #152]
 cbc:	sub	x0, x1, x0
 cc0:	str	x0, [sp, #136]
 cc4:	ldr	x1, [sp, #504]
 cc8:	ldr	x0, [sp, #160]
 ccc:	sub	x1, x1, x0
 cd0:	ldr	x2, [sp, #512]
 cd4:	ldr	x0, [sp, #136]
 cd8:	cmp	x2, x0
 cdc:	cset	w0, cc  // cc = lo, ul, last
 ce0:	and	w0, w0, #0xff
 ce4:	and	x0, x0, #0xff
 ce8:	sub	x0, x1, x0
 cec:	str	x0, [sp, #504]
 cf0:	ldr	x0, [sp, #136]
 cf4:	str	x0, [sp, #512]
 cf8:	ldr	x0, [sp, #416]
 cfc:	mov	w1, w0
 d00:	ldr	x0, [sp, #504]
 d04:	lsl	x1, x0, x1
 d08:	ldr	x0, [sp, #496]
 d0c:	mov	w2, w0
 d10:	ldr	x0, [sp, #512]
 d14:	lsr	x0, x0, x2
 d18:	orr	x0, x1, x0
 d1c:	str	x0, [sp, #48]
 d20:	ldr	x0, [sp, #496]
 d24:	mov	w1, w0
 d28:	ldr	x0, [sp, #504]
 d2c:	lsr	x0, x0, x1
 d30:	str	x0, [sp, #56]
 d34:	ldp	x0, x1, [sp, #48]
 d38:	ldr	x2, [sp, #536]
 d3c:	stp	x0, x1, [x2]
 d40:	ldr	x0, [sp, #432]
 d44:	str	x0, [sp, #32]
 d48:	ldr	x0, [sp, #424]
 d4c:	str	x0, [sp, #40]
 d50:	ldp	x0, x1, [sp, #32]
 d54:	add	x2, sp, #0x200
 d58:	stp	x0, x1, [x2, #64]
 d5c:	ldr	x0, [sp, #600]
 d60:	cmp	x0, #0x0
 d64:	b.eq	d88 <__divti3+0xd88>  // b.none
 d68:	add	x0, sp, #0x200
 d6c:	ldp	x0, x1, [x0, #64]
 d70:	negs	x2, x0
 d74:	ngc	x0, x1
 d78:	mov	x4, x2
 d7c:	mov	x5, x0
 d80:	add	x0, sp, #0x200
 d84:	stp	x4, x5, [x0, #64]
 d88:	add	x0, sp, #0x200
 d8c:	ldp	x0, x1, [x0, #64]
 d90:	add	sp, sp, #0x260
 d94:	ret

_moddi3.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__modti3>:
   0:	sub	sp, sp, #0x260
   4:	stp	x0, x1, [sp, #16]
   8:	stp	x2, x3, [sp]
   c:	str	xzr, [sp, #600]
  10:	ldp	x0, x1, [sp, #16]
  14:	stp	x0, x1, [sp, #128]
  18:	ldp	x0, x1, [sp]
  1c:	stp	x0, x1, [sp, #112]
  20:	ldr	x0, [sp, #136]
  24:	cmp	x0, #0x0
  28:	b.ge	50 <__modti3+0x50>  // b.tcont
  2c:	ldr	x0, [sp, #600]
  30:	mvn	x0, x0
  34:	str	x0, [sp, #600]
  38:	ldp	x0, x1, [sp, #128]
  3c:	negs	x2, x0
  40:	ngc	x0, x1
  44:	mov	x8, x2
  48:	mov	x9, x0
  4c:	stp	x8, x9, [sp, #128]
  50:	ldr	x0, [sp, #120]
  54:	cmp	x0, #0x0
  58:	b.ge	74 <__modti3+0x74>  // b.tcont
  5c:	ldp	x0, x1, [sp, #112]
  60:	negs	x2, x0
  64:	ngc	x0, x1
  68:	mov	x6, x2
  6c:	mov	x7, x0
  70:	stp	x6, x7, [sp, #112]
  74:	ldp	x0, x1, [sp, #128]
  78:	mov	x2, x0
  7c:	mov	x3, x1
  80:	ldp	x0, x1, [sp, #112]
  84:	add	x6, sp, #0x200
  88:	stp	x2, x3, [x6, #64]
  8c:	add	x2, sp, #0x200
  90:	stp	x0, x1, [x2, #48]
  94:	add	x0, sp, #0x60
  98:	str	x0, [sp, #552]
  9c:	add	x0, sp, #0x200
  a0:	ldp	x0, x1, [x0, #64]
  a4:	stp	x0, x1, [sp, #80]
  a8:	add	x0, sp, #0x200
  ac:	ldp	x0, x1, [x0, #48]
  b0:	stp	x0, x1, [sp, #64]
  b4:	ldr	x0, [sp, #64]
  b8:	str	x0, [sp, #544]
  bc:	ldr	x0, [sp, #72]
  c0:	str	x0, [sp, #536]
  c4:	ldr	x0, [sp, #80]
  c8:	str	x0, [sp, #528]
  cc:	ldr	x0, [sp, #88]
  d0:	str	x0, [sp, #520]
  d4:	ldr	x0, [sp, #536]
  d8:	cmp	x0, #0x0
  dc:	b.ne	7cc <__modti3+0x7cc>  // b.any
  e0:	ldr	x1, [sp, #544]
  e4:	ldr	x0, [sp, #520]
  e8:	cmp	x1, x0
  ec:	b.ls	338 <__modti3+0x338>  // b.plast
  f0:	ldr	x0, [sp, #544]
  f4:	clz	x0, x0
  f8:	sxtw	x0, w0
  fc:	str	x0, [sp, #512]
 100:	ldr	x0, [sp, #512]
 104:	cmp	x0, #0x0
 108:	b.eq	164 <__modti3+0x164>  // b.none
 10c:	ldr	x0, [sp, #512]
 110:	mov	w1, w0
 114:	ldr	x0, [sp, #544]
 118:	lsl	x0, x0, x1
 11c:	str	x0, [sp, #544]
 120:	ldr	x0, [sp, #512]
 124:	mov	w1, w0
 128:	ldr	x0, [sp, #520]
 12c:	lsl	x1, x0, x1
 130:	ldr	x0, [sp, #512]
 134:	mov	w2, w0
 138:	mov	w0, #0x40                  	// #64
 13c:	sub	w0, w0, w2
 140:	ldr	x2, [sp, #528]
 144:	lsr	x0, x2, x0
 148:	orr	x0, x1, x0
 14c:	str	x0, [sp, #520]
 150:	ldr	x0, [sp, #512]
 154:	mov	w1, w0
 158:	ldr	x0, [sp, #528]
 15c:	lsl	x0, x0, x1
 160:	str	x0, [sp, #528]
 164:	ldr	x0, [sp, #544]
 168:	lsr	x0, x0, #32
 16c:	str	x0, [sp, #504]
 170:	ldr	x0, [sp, #544]
 174:	and	x0, x0, #0xffffffff
 178:	str	x0, [sp, #496]
 17c:	ldr	x0, [sp, #520]
 180:	ldr	x1, [sp, #504]
 184:	udiv	x2, x0, x1
 188:	ldr	x1, [sp, #504]
 18c:	mul	x1, x2, x1
 190:	sub	x0, x0, x1
 194:	str	x0, [sp, #488]
 198:	ldr	x1, [sp, #520]
 19c:	ldr	x0, [sp, #504]
 1a0:	udiv	x0, x1, x0
 1a4:	str	x0, [sp, #480]
 1a8:	ldr	x1, [sp, #496]
 1ac:	ldr	x0, [sp, #480]
 1b0:	mul	x0, x1, x0
 1b4:	str	x0, [sp, #472]
 1b8:	ldr	x0, [sp, #488]
 1bc:	lsl	x1, x0, #32
 1c0:	ldr	x0, [sp, #528]
 1c4:	lsr	x0, x0, #32
 1c8:	orr	x0, x1, x0
 1cc:	str	x0, [sp, #488]
 1d0:	ldr	x1, [sp, #472]
 1d4:	ldr	x0, [sp, #488]
 1d8:	cmp	x1, x0
 1dc:	b.ls	238 <__modti3+0x238>  // b.plast
 1e0:	ldr	x0, [sp, #480]
 1e4:	sub	x0, x0, #0x1
 1e8:	str	x0, [sp, #480]
 1ec:	ldr	x1, [sp, #488]
 1f0:	ldr	x0, [sp, #544]
 1f4:	add	x0, x1, x0
 1f8:	str	x0, [sp, #488]
 1fc:	ldr	x1, [sp, #544]
 200:	ldr	x0, [sp, #488]
 204:	cmp	x1, x0
 208:	b.hi	238 <__modti3+0x238>  // b.pmore
 20c:	ldr	x1, [sp, #472]
 210:	ldr	x0, [sp, #488]
 214:	cmp	x1, x0
 218:	b.ls	238 <__modti3+0x238>  // b.plast
 21c:	ldr	x0, [sp, #480]
 220:	sub	x0, x0, #0x1
 224:	str	x0, [sp, #480]
 228:	ldr	x1, [sp, #488]
 22c:	ldr	x0, [sp, #544]
 230:	add	x0, x1, x0
 234:	str	x0, [sp, #488]
 238:	ldr	x1, [sp, #488]
 23c:	ldr	x0, [sp, #472]
 240:	sub	x0, x1, x0
 244:	str	x0, [sp, #488]
 248:	ldr	x0, [sp, #488]
 24c:	ldr	x1, [sp, #504]
 250:	udiv	x2, x0, x1
 254:	ldr	x1, [sp, #504]
 258:	mul	x1, x2, x1
 25c:	sub	x0, x0, x1
 260:	str	x0, [sp, #464]
 264:	ldr	x1, [sp, #488]
 268:	ldr	x0, [sp, #504]
 26c:	udiv	x0, x1, x0
 270:	str	x0, [sp, #456]
 274:	ldr	x1, [sp, #496]
 278:	ldr	x0, [sp, #456]
 27c:	mul	x0, x1, x0
 280:	str	x0, [sp, #472]
 284:	ldr	x0, [sp, #464]
 288:	lsl	x1, x0, #32
 28c:	ldr	x0, [sp, #528]
 290:	and	x0, x0, #0xffffffff
 294:	orr	x0, x1, x0
 298:	str	x0, [sp, #464]
 29c:	ldr	x1, [sp, #472]
 2a0:	ldr	x0, [sp, #464]
 2a4:	cmp	x1, x0
 2a8:	b.ls	304 <__modti3+0x304>  // b.plast
 2ac:	ldr	x0, [sp, #456]
 2b0:	sub	x0, x0, #0x1
 2b4:	str	x0, [sp, #456]
 2b8:	ldr	x1, [sp, #464]
 2bc:	ldr	x0, [sp, #544]
 2c0:	add	x0, x1, x0
 2c4:	str	x0, [sp, #464]
 2c8:	ldr	x1, [sp, #544]
 2cc:	ldr	x0, [sp, #464]
 2d0:	cmp	x1, x0
 2d4:	b.hi	304 <__modti3+0x304>  // b.pmore
 2d8:	ldr	x1, [sp, #472]
 2dc:	ldr	x0, [sp, #464]
 2e0:	cmp	x1, x0
 2e4:	b.ls	304 <__modti3+0x304>  // b.plast
 2e8:	ldr	x0, [sp, #456]
 2ec:	sub	x0, x0, #0x1
 2f0:	str	x0, [sp, #456]
 2f4:	ldr	x1, [sp, #464]
 2f8:	ldr	x0, [sp, #544]
 2fc:	add	x0, x1, x0
 300:	str	x0, [sp, #464]
 304:	ldr	x1, [sp, #464]
 308:	ldr	x0, [sp, #472]
 30c:	sub	x0, x1, x0
 310:	str	x0, [sp, #464]
 314:	ldr	x0, [sp, #480]
 318:	lsl	x1, x0, #32
 31c:	ldr	x0, [sp, #456]
 320:	orr	x0, x1, x0
 324:	str	x0, [sp, #448]
 328:	ldr	x0, [sp, #464]
 32c:	str	x0, [sp, #528]
 330:	str	xzr, [sp, #440]
 334:	b	798 <__modti3+0x798>
 338:	ldr	x0, [sp, #544]
 33c:	cmp	x0, #0x0
 340:	b.ne	354 <__modti3+0x354>  // b.any
 344:	mov	x1, #0x1                   	// #1
 348:	ldr	x0, [sp, #544]
 34c:	udiv	x0, x1, x0
 350:	str	x0, [sp, #544]
 354:	ldr	x0, [sp, #544]
 358:	clz	x0, x0
 35c:	sxtw	x0, w0
 360:	str	x0, [sp, #512]
 364:	ldr	x0, [sp, #512]
 368:	cmp	x0, #0x0
 36c:	b.ne	38c <__modti3+0x38c>  // b.any
 370:	ldr	x1, [sp, #520]
 374:	ldr	x0, [sp, #544]
 378:	sub	x0, x1, x0
 37c:	str	x0, [sp, #520]
 380:	mov	x0, #0x1                   	// #1
 384:	str	x0, [sp, #440]
 388:	b	5cc <__modti3+0x5cc>
 38c:	mov	x1, #0x40                  	// #64
 390:	ldr	x0, [sp, #512]
 394:	sub	x0, x1, x0
 398:	str	x0, [sp, #432]
 39c:	ldr	x0, [sp, #512]
 3a0:	mov	w1, w0
 3a4:	ldr	x0, [sp, #544]
 3a8:	lsl	x0, x0, x1
 3ac:	str	x0, [sp, #544]
 3b0:	ldr	x0, [sp, #432]
 3b4:	mov	w1, w0
 3b8:	ldr	x0, [sp, #520]
 3bc:	lsr	x0, x0, x1
 3c0:	str	x0, [sp, #424]
 3c4:	ldr	x0, [sp, #512]
 3c8:	mov	w1, w0
 3cc:	ldr	x0, [sp, #520]
 3d0:	lsl	x1, x0, x1
 3d4:	ldr	x0, [sp, #432]
 3d8:	mov	w2, w0
 3dc:	ldr	x0, [sp, #528]
 3e0:	lsr	x0, x0, x2
 3e4:	orr	x0, x1, x0
 3e8:	str	x0, [sp, #520]
 3ec:	ldr	x0, [sp, #512]
 3f0:	mov	w1, w0
 3f4:	ldr	x0, [sp, #528]
 3f8:	lsl	x0, x0, x1
 3fc:	str	x0, [sp, #528]
 400:	ldr	x0, [sp, #544]
 404:	lsr	x0, x0, #32
 408:	str	x0, [sp, #416]
 40c:	ldr	x0, [sp, #544]
 410:	and	x0, x0, #0xffffffff
 414:	str	x0, [sp, #408]
 418:	ldr	x0, [sp, #424]
 41c:	ldr	x1, [sp, #416]
 420:	udiv	x2, x0, x1
 424:	ldr	x1, [sp, #416]
 428:	mul	x1, x2, x1
 42c:	sub	x0, x0, x1
 430:	str	x0, [sp, #400]
 434:	ldr	x1, [sp, #424]
 438:	ldr	x0, [sp, #416]
 43c:	udiv	x0, x1, x0
 440:	str	x0, [sp, #392]
 444:	ldr	x1, [sp, #408]
 448:	ldr	x0, [sp, #392]
 44c:	mul	x0, x1, x0
 450:	str	x0, [sp, #384]
 454:	ldr	x0, [sp, #400]
 458:	lsl	x1, x0, #32
 45c:	ldr	x0, [sp, #520]
 460:	lsr	x0, x0, #32
 464:	orr	x0, x1, x0
 468:	str	x0, [sp, #400]
 46c:	ldr	x1, [sp, #384]
 470:	ldr	x0, [sp, #400]
 474:	cmp	x1, x0
 478:	b.ls	4d4 <__modti3+0x4d4>  // b.plast
 47c:	ldr	x0, [sp, #392]
 480:	sub	x0, x0, #0x1
 484:	str	x0, [sp, #392]
 488:	ldr	x1, [sp, #400]
 48c:	ldr	x0, [sp, #544]
 490:	add	x0, x1, x0
 494:	str	x0, [sp, #400]
 498:	ldr	x1, [sp, #544]
 49c:	ldr	x0, [sp, #400]
 4a0:	cmp	x1, x0
 4a4:	b.hi	4d4 <__modti3+0x4d4>  // b.pmore
 4a8:	ldr	x1, [sp, #384]
 4ac:	ldr	x0, [sp, #400]
 4b0:	cmp	x1, x0
 4b4:	b.ls	4d4 <__modti3+0x4d4>  // b.plast
 4b8:	ldr	x0, [sp, #392]
 4bc:	sub	x0, x0, #0x1
 4c0:	str	x0, [sp, #392]
 4c4:	ldr	x1, [sp, #400]
 4c8:	ldr	x0, [sp, #544]
 4cc:	add	x0, x1, x0
 4d0:	str	x0, [sp, #400]
 4d4:	ldr	x1, [sp, #400]
 4d8:	ldr	x0, [sp, #384]
 4dc:	sub	x0, x1, x0
 4e0:	str	x0, [sp, #400]
 4e4:	ldr	x0, [sp, #400]
 4e8:	ldr	x1, [sp, #416]
 4ec:	udiv	x2, x0, x1
 4f0:	ldr	x1, [sp, #416]
 4f4:	mul	x1, x2, x1
 4f8:	sub	x0, x0, x1
 4fc:	str	x0, [sp, #376]
 500:	ldr	x1, [sp, #400]
 504:	ldr	x0, [sp, #416]
 508:	udiv	x0, x1, x0
 50c:	str	x0, [sp, #368]
 510:	ldr	x1, [sp, #408]
 514:	ldr	x0, [sp, #368]
 518:	mul	x0, x1, x0
 51c:	str	x0, [sp, #384]
 520:	ldr	x0, [sp, #376]
 524:	lsl	x1, x0, #32
 528:	ldr	x0, [sp, #520]
 52c:	and	x0, x0, #0xffffffff
 530:	orr	x0, x1, x0
 534:	str	x0, [sp, #376]
 538:	ldr	x1, [sp, #384]
 53c:	ldr	x0, [sp, #376]
 540:	cmp	x1, x0
 544:	b.ls	5a0 <__modti3+0x5a0>  // b.plast
 548:	ldr	x0, [sp, #368]
 54c:	sub	x0, x0, #0x1
 550:	str	x0, [sp, #368]
 554:	ldr	x1, [sp, #376]
 558:	ldr	x0, [sp, #544]
 55c:	add	x0, x1, x0
 560:	str	x0, [sp, #376]
 564:	ldr	x1, [sp, #544]
 568:	ldr	x0, [sp, #376]
 56c:	cmp	x1, x0
 570:	b.hi	5a0 <__modti3+0x5a0>  // b.pmore
 574:	ldr	x1, [sp, #384]
 578:	ldr	x0, [sp, #376]
 57c:	cmp	x1, x0
 580:	b.ls	5a0 <__modti3+0x5a0>  // b.plast
 584:	ldr	x0, [sp, #368]
 588:	sub	x0, x0, #0x1
 58c:	str	x0, [sp, #368]
 590:	ldr	x1, [sp, #376]
 594:	ldr	x0, [sp, #544]
 598:	add	x0, x1, x0
 59c:	str	x0, [sp, #376]
 5a0:	ldr	x1, [sp, #376]
 5a4:	ldr	x0, [sp, #384]
 5a8:	sub	x0, x1, x0
 5ac:	str	x0, [sp, #376]
 5b0:	ldr	x0, [sp, #392]
 5b4:	lsl	x1, x0, #32
 5b8:	ldr	x0, [sp, #368]
 5bc:	orr	x0, x1, x0
 5c0:	str	x0, [sp, #440]
 5c4:	ldr	x0, [sp, #376]
 5c8:	str	x0, [sp, #520]
 5cc:	ldr	x0, [sp, #544]
 5d0:	lsr	x0, x0, #32
 5d4:	str	x0, [sp, #360]
 5d8:	ldr	x0, [sp, #544]
 5dc:	and	x0, x0, #0xffffffff
 5e0:	str	x0, [sp, #352]
 5e4:	ldr	x0, [sp, #520]
 5e8:	ldr	x1, [sp, #360]
 5ec:	udiv	x2, x0, x1
 5f0:	ldr	x1, [sp, #360]
 5f4:	mul	x1, x2, x1
 5f8:	sub	x0, x0, x1
 5fc:	str	x0, [sp, #344]
 600:	ldr	x1, [sp, #520]
 604:	ldr	x0, [sp, #360]
 608:	udiv	x0, x1, x0
 60c:	str	x0, [sp, #336]
 610:	ldr	x1, [sp, #352]
 614:	ldr	x0, [sp, #336]
 618:	mul	x0, x1, x0
 61c:	str	x0, [sp, #328]
 620:	ldr	x0, [sp, #344]
 624:	lsl	x1, x0, #32
 628:	ldr	x0, [sp, #528]
 62c:	lsr	x0, x0, #32
 630:	orr	x0, x1, x0
 634:	str	x0, [sp, #344]
 638:	ldr	x1, [sp, #328]
 63c:	ldr	x0, [sp, #344]
 640:	cmp	x1, x0
 644:	b.ls	6a0 <__modti3+0x6a0>  // b.plast
 648:	ldr	x0, [sp, #336]
 64c:	sub	x0, x0, #0x1
 650:	str	x0, [sp, #336]
 654:	ldr	x1, [sp, #344]
 658:	ldr	x0, [sp, #544]
 65c:	add	x0, x1, x0
 660:	str	x0, [sp, #344]
 664:	ldr	x1, [sp, #544]
 668:	ldr	x0, [sp, #344]
 66c:	cmp	x1, x0
 670:	b.hi	6a0 <__modti3+0x6a0>  // b.pmore
 674:	ldr	x1, [sp, #328]
 678:	ldr	x0, [sp, #344]
 67c:	cmp	x1, x0
 680:	b.ls	6a0 <__modti3+0x6a0>  // b.plast
 684:	ldr	x0, [sp, #336]
 688:	sub	x0, x0, #0x1
 68c:	str	x0, [sp, #336]
 690:	ldr	x1, [sp, #344]
 694:	ldr	x0, [sp, #544]
 698:	add	x0, x1, x0
 69c:	str	x0, [sp, #344]
 6a0:	ldr	x1, [sp, #344]
 6a4:	ldr	x0, [sp, #328]
 6a8:	sub	x0, x1, x0
 6ac:	str	x0, [sp, #344]
 6b0:	ldr	x0, [sp, #344]
 6b4:	ldr	x1, [sp, #360]
 6b8:	udiv	x2, x0, x1
 6bc:	ldr	x1, [sp, #360]
 6c0:	mul	x1, x2, x1
 6c4:	sub	x0, x0, x1
 6c8:	str	x0, [sp, #320]
 6cc:	ldr	x1, [sp, #344]
 6d0:	ldr	x0, [sp, #360]
 6d4:	udiv	x0, x1, x0
 6d8:	str	x0, [sp, #312]
 6dc:	ldr	x1, [sp, #352]
 6e0:	ldr	x0, [sp, #312]
 6e4:	mul	x0, x1, x0
 6e8:	str	x0, [sp, #328]
 6ec:	ldr	x0, [sp, #320]
 6f0:	lsl	x1, x0, #32
 6f4:	ldr	x0, [sp, #528]
 6f8:	and	x0, x0, #0xffffffff
 6fc:	orr	x0, x1, x0
 700:	str	x0, [sp, #320]
 704:	ldr	x1, [sp, #328]
 708:	ldr	x0, [sp, #320]
 70c:	cmp	x1, x0
 710:	b.ls	76c <__modti3+0x76c>  // b.plast
 714:	ldr	x0, [sp, #312]
 718:	sub	x0, x0, #0x1
 71c:	str	x0, [sp, #312]
 720:	ldr	x1, [sp, #320]
 724:	ldr	x0, [sp, #544]
 728:	add	x0, x1, x0
 72c:	str	x0, [sp, #320]
 730:	ldr	x1, [sp, #544]
 734:	ldr	x0, [sp, #320]
 738:	cmp	x1, x0
 73c:	b.hi	76c <__modti3+0x76c>  // b.pmore
 740:	ldr	x1, [sp, #328]
 744:	ldr	x0, [sp, #320]
 748:	cmp	x1, x0
 74c:	b.ls	76c <__modti3+0x76c>  // b.plast
 750:	ldr	x0, [sp, #312]
 754:	sub	x0, x0, #0x1
 758:	str	x0, [sp, #312]
 75c:	ldr	x1, [sp, #320]
 760:	ldr	x0, [sp, #544]
 764:	add	x0, x1, x0
 768:	str	x0, [sp, #320]
 76c:	ldr	x1, [sp, #320]
 770:	ldr	x0, [sp, #328]
 774:	sub	x0, x1, x0
 778:	str	x0, [sp, #320]
 77c:	ldr	x0, [sp, #336]
 780:	lsl	x1, x0, #32
 784:	ldr	x0, [sp, #312]
 788:	orr	x0, x1, x0
 78c:	str	x0, [sp, #448]
 790:	ldr	x0, [sp, #320]
 794:	str	x0, [sp, #528]
 798:	ldr	x0, [sp, #552]
 79c:	cmp	x0, #0x0
 7a0:	b.eq	d38 <__modti3+0xd38>  // b.none
 7a4:	ldr	x0, [sp, #512]
 7a8:	mov	w1, w0
 7ac:	ldr	x0, [sp, #528]
 7b0:	lsr	x0, x0, x1
 7b4:	str	x0, [sp, #48]
 7b8:	str	xzr, [sp, #56]
 7bc:	ldp	x0, x1, [sp, #48]
 7c0:	ldr	x2, [sp, #552]
 7c4:	stp	x0, x1, [x2]
 7c8:	b	d38 <__modti3+0xd38>
 7cc:	ldr	x1, [sp, #536]
 7d0:	ldr	x0, [sp, #520]
 7d4:	cmp	x1, x0
 7d8:	b.ls	810 <__modti3+0x810>  // b.plast
 7dc:	str	xzr, [sp, #448]
 7e0:	str	xzr, [sp, #440]
 7e4:	ldr	x0, [sp, #552]
 7e8:	cmp	x0, #0x0
 7ec:	b.eq	d38 <__modti3+0xd38>  // b.none
 7f0:	ldr	x0, [sp, #528]
 7f4:	str	x0, [sp, #48]
 7f8:	ldr	x0, [sp, #520]
 7fc:	str	x0, [sp, #56]
 800:	ldp	x0, x1, [sp, #48]
 804:	ldr	x2, [sp, #552]
 808:	stp	x0, x1, [x2]
 80c:	b	d38 <__modti3+0xd38>
 810:	ldr	x0, [sp, #536]
 814:	clz	x0, x0
 818:	sxtw	x0, w0
 81c:	str	x0, [sp, #512]
 820:	ldr	x0, [sp, #512]
 824:	cmp	x0, #0x0
 828:	b.ne	8d0 <__modti3+0x8d0>  // b.any
 82c:	ldr	x1, [sp, #536]
 830:	ldr	x0, [sp, #520]
 834:	cmp	x1, x0
 838:	b.cc	84c <__modti3+0x84c>  // b.lo, b.ul, b.last
 83c:	ldr	x1, [sp, #544]
 840:	ldr	x0, [sp, #528]
 844:	cmp	x1, x0
 848:	b.hi	89c <__modti3+0x89c>  // b.pmore
 84c:	mov	x0, #0x1                   	// #1
 850:	str	x0, [sp, #448]
 854:	ldr	x1, [sp, #528]
 858:	ldr	x0, [sp, #544]
 85c:	sub	x0, x1, x0
 860:	str	x0, [sp, #304]
 864:	ldr	x1, [sp, #520]
 868:	ldr	x0, [sp, #536]
 86c:	sub	x1, x1, x0
 870:	ldr	x2, [sp, #528]
 874:	ldr	x0, [sp, #304]
 878:	cmp	x2, x0
 87c:	cset	w0, cc  // cc = lo, ul, last
 880:	and	w0, w0, #0xff
 884:	and	x0, x0, #0xff
 888:	sub	x0, x1, x0
 88c:	str	x0, [sp, #520]
 890:	ldr	x0, [sp, #304]
 894:	str	x0, [sp, #528]
 898:	b	8a0 <__modti3+0x8a0>
 89c:	str	xzr, [sp, #448]
 8a0:	str	xzr, [sp, #440]
 8a4:	ldr	x0, [sp, #552]
 8a8:	cmp	x0, #0x0
 8ac:	b.eq	d38 <__modti3+0xd38>  // b.none
 8b0:	ldr	x0, [sp, #528]
 8b4:	str	x0, [sp, #48]
 8b8:	ldr	x0, [sp, #520]
 8bc:	str	x0, [sp, #56]
 8c0:	ldp	x0, x1, [sp, #48]
 8c4:	ldr	x2, [sp, #552]
 8c8:	stp	x0, x1, [x2]
 8cc:	b	d38 <__modti3+0xd38>
 8d0:	mov	x1, #0x40                  	// #64
 8d4:	ldr	x0, [sp, #512]
 8d8:	sub	x0, x1, x0
 8dc:	str	x0, [sp, #432]
 8e0:	ldr	x0, [sp, #512]
 8e4:	mov	w1, w0
 8e8:	ldr	x0, [sp, #536]
 8ec:	lsl	x1, x0, x1
 8f0:	ldr	x0, [sp, #432]
 8f4:	mov	w2, w0
 8f8:	ldr	x0, [sp, #544]
 8fc:	lsr	x0, x0, x2
 900:	orr	x0, x1, x0
 904:	str	x0, [sp, #536]
 908:	ldr	x0, [sp, #512]
 90c:	mov	w1, w0
 910:	ldr	x0, [sp, #544]
 914:	lsl	x0, x0, x1
 918:	str	x0, [sp, #544]
 91c:	ldr	x0, [sp, #432]
 920:	mov	w1, w0
 924:	ldr	x0, [sp, #520]
 928:	lsr	x0, x0, x1
 92c:	str	x0, [sp, #424]
 930:	ldr	x0, [sp, #512]
 934:	mov	w1, w0
 938:	ldr	x0, [sp, #520]
 93c:	lsl	x1, x0, x1
 940:	ldr	x0, [sp, #432]
 944:	mov	w2, w0
 948:	ldr	x0, [sp, #528]
 94c:	lsr	x0, x0, x2
 950:	orr	x0, x1, x0
 954:	str	x0, [sp, #520]
 958:	ldr	x0, [sp, #512]
 95c:	mov	w1, w0
 960:	ldr	x0, [sp, #528]
 964:	lsl	x0, x0, x1
 968:	str	x0, [sp, #528]
 96c:	ldr	x0, [sp, #536]
 970:	lsr	x0, x0, #32
 974:	str	x0, [sp, #296]
 978:	ldr	x0, [sp, #536]
 97c:	and	x0, x0, #0xffffffff
 980:	str	x0, [sp, #288]
 984:	ldr	x0, [sp, #424]
 988:	ldr	x1, [sp, #296]
 98c:	udiv	x2, x0, x1
 990:	ldr	x1, [sp, #296]
 994:	mul	x1, x2, x1
 998:	sub	x0, x0, x1
 99c:	str	x0, [sp, #280]
 9a0:	ldr	x1, [sp, #424]
 9a4:	ldr	x0, [sp, #296]
 9a8:	udiv	x0, x1, x0
 9ac:	str	x0, [sp, #272]
 9b0:	ldr	x1, [sp, #288]
 9b4:	ldr	x0, [sp, #272]
 9b8:	mul	x0, x1, x0
 9bc:	str	x0, [sp, #264]
 9c0:	ldr	x0, [sp, #280]
 9c4:	lsl	x1, x0, #32
 9c8:	ldr	x0, [sp, #520]
 9cc:	lsr	x0, x0, #32
 9d0:	orr	x0, x1, x0
 9d4:	str	x0, [sp, #280]
 9d8:	ldr	x1, [sp, #264]
 9dc:	ldr	x0, [sp, #280]
 9e0:	cmp	x1, x0
 9e4:	b.ls	a40 <__modti3+0xa40>  // b.plast
 9e8:	ldr	x0, [sp, #272]
 9ec:	sub	x0, x0, #0x1
 9f0:	str	x0, [sp, #272]
 9f4:	ldr	x1, [sp, #280]
 9f8:	ldr	x0, [sp, #536]
 9fc:	add	x0, x1, x0
 a00:	str	x0, [sp, #280]
 a04:	ldr	x1, [sp, #536]
 a08:	ldr	x0, [sp, #280]
 a0c:	cmp	x1, x0
 a10:	b.hi	a40 <__modti3+0xa40>  // b.pmore
 a14:	ldr	x1, [sp, #264]
 a18:	ldr	x0, [sp, #280]
 a1c:	cmp	x1, x0
 a20:	b.ls	a40 <__modti3+0xa40>  // b.plast
 a24:	ldr	x0, [sp, #272]
 a28:	sub	x0, x0, #0x1
 a2c:	str	x0, [sp, #272]
 a30:	ldr	x1, [sp, #280]
 a34:	ldr	x0, [sp, #536]
 a38:	add	x0, x1, x0
 a3c:	str	x0, [sp, #280]
 a40:	ldr	x1, [sp, #280]
 a44:	ldr	x0, [sp, #264]
 a48:	sub	x0, x1, x0
 a4c:	str	x0, [sp, #280]
 a50:	ldr	x0, [sp, #280]
 a54:	ldr	x1, [sp, #296]
 a58:	udiv	x2, x0, x1
 a5c:	ldr	x1, [sp, #296]
 a60:	mul	x1, x2, x1
 a64:	sub	x0, x0, x1
 a68:	str	x0, [sp, #256]
 a6c:	ldr	x1, [sp, #280]
 a70:	ldr	x0, [sp, #296]
 a74:	udiv	x0, x1, x0
 a78:	str	x0, [sp, #248]
 a7c:	ldr	x1, [sp, #288]
 a80:	ldr	x0, [sp, #248]
 a84:	mul	x0, x1, x0
 a88:	str	x0, [sp, #264]
 a8c:	ldr	x0, [sp, #256]
 a90:	lsl	x1, x0, #32
 a94:	ldr	x0, [sp, #520]
 a98:	and	x0, x0, #0xffffffff
 a9c:	orr	x0, x1, x0
 aa0:	str	x0, [sp, #256]
 aa4:	ldr	x1, [sp, #264]
 aa8:	ldr	x0, [sp, #256]
 aac:	cmp	x1, x0
 ab0:	b.ls	b0c <__modti3+0xb0c>  // b.plast
 ab4:	ldr	x0, [sp, #248]
 ab8:	sub	x0, x0, #0x1
 abc:	str	x0, [sp, #248]
 ac0:	ldr	x1, [sp, #256]
 ac4:	ldr	x0, [sp, #536]
 ac8:	add	x0, x1, x0
 acc:	str	x0, [sp, #256]
 ad0:	ldr	x1, [sp, #536]
 ad4:	ldr	x0, [sp, #256]
 ad8:	cmp	x1, x0
 adc:	b.hi	b0c <__modti3+0xb0c>  // b.pmore
 ae0:	ldr	x1, [sp, #264]
 ae4:	ldr	x0, [sp, #256]
 ae8:	cmp	x1, x0
 aec:	b.ls	b0c <__modti3+0xb0c>  // b.plast
 af0:	ldr	x0, [sp, #248]
 af4:	sub	x0, x0, #0x1
 af8:	str	x0, [sp, #248]
 afc:	ldr	x1, [sp, #256]
 b00:	ldr	x0, [sp, #536]
 b04:	add	x0, x1, x0
 b08:	str	x0, [sp, #256]
 b0c:	ldr	x1, [sp, #256]
 b10:	ldr	x0, [sp, #264]
 b14:	sub	x0, x1, x0
 b18:	str	x0, [sp, #256]
 b1c:	ldr	x0, [sp, #272]
 b20:	lsl	x1, x0, #32
 b24:	ldr	x0, [sp, #248]
 b28:	orr	x0, x1, x0
 b2c:	str	x0, [sp, #448]
 b30:	ldr	x0, [sp, #256]
 b34:	str	x0, [sp, #520]
 b38:	ldr	x0, [sp, #448]
 b3c:	and	x0, x0, #0xffffffff
 b40:	str	x0, [sp, #240]
 b44:	ldr	x0, [sp, #448]
 b48:	lsr	x0, x0, #32
 b4c:	str	x0, [sp, #232]
 b50:	ldr	x0, [sp, #544]
 b54:	and	x0, x0, #0xffffffff
 b58:	str	x0, [sp, #224]
 b5c:	ldr	x0, [sp, #544]
 b60:	lsr	x0, x0, #32
 b64:	str	x0, [sp, #216]
 b68:	ldr	x1, [sp, #240]
 b6c:	ldr	x0, [sp, #224]
 b70:	mul	x0, x1, x0
 b74:	str	x0, [sp, #208]
 b78:	ldr	x1, [sp, #240]
 b7c:	ldr	x0, [sp, #216]
 b80:	mul	x0, x1, x0
 b84:	str	x0, [sp, #200]
 b88:	ldr	x1, [sp, #232]
 b8c:	ldr	x0, [sp, #224]
 b90:	mul	x0, x1, x0
 b94:	str	x0, [sp, #192]
 b98:	ldr	x1, [sp, #232]
 b9c:	ldr	x0, [sp, #216]
 ba0:	mul	x0, x1, x0
 ba4:	str	x0, [sp, #184]
 ba8:	ldr	x0, [sp, #208]
 bac:	lsr	x0, x0, #32
 bb0:	ldr	x1, [sp, #200]
 bb4:	add	x0, x1, x0
 bb8:	str	x0, [sp, #200]
 bbc:	ldr	x1, [sp, #200]
 bc0:	ldr	x0, [sp, #192]
 bc4:	add	x0, x1, x0
 bc8:	str	x0, [sp, #200]
 bcc:	ldr	x1, [sp, #192]
 bd0:	ldr	x0, [sp, #200]
 bd4:	cmp	x1, x0
 bd8:	b.ls	bec <__modti3+0xbec>  // b.plast
 bdc:	ldr	x1, [sp, #184]
 be0:	mov	x0, #0x100000000           	// #4294967296
 be4:	add	x0, x1, x0
 be8:	str	x0, [sp, #184]
 bec:	ldr	x0, [sp, #200]
 bf0:	lsr	x1, x0, #32
 bf4:	ldr	x0, [sp, #184]
 bf8:	add	x0, x1, x0
 bfc:	str	x0, [sp, #176]
 c00:	ldr	x0, [sp, #200]
 c04:	and	x0, x0, #0xffffffff
 c08:	lsl	x1, x0, #32
 c0c:	ldr	x0, [sp, #208]
 c10:	and	x0, x0, #0xffffffff
 c14:	add	x0, x1, x0
 c18:	str	x0, [sp, #168]
 c1c:	ldr	x1, [sp, #520]
 c20:	ldr	x0, [sp, #176]
 c24:	cmp	x1, x0
 c28:	b.cc	c4c <__modti3+0xc4c>  // b.lo, b.ul, b.last
 c2c:	ldr	x1, [sp, #520]
 c30:	ldr	x0, [sp, #176]
 c34:	cmp	x1, x0
 c38:	b.ne	c9c <__modti3+0xc9c>  // b.any
 c3c:	ldr	x1, [sp, #528]
 c40:	ldr	x0, [sp, #168]
 c44:	cmp	x1, x0
 c48:	b.cs	c9c <__modti3+0xc9c>  // b.hs, b.nlast
 c4c:	ldr	x0, [sp, #448]
 c50:	sub	x0, x0, #0x1
 c54:	str	x0, [sp, #448]
 c58:	ldr	x1, [sp, #168]
 c5c:	ldr	x0, [sp, #544]
 c60:	sub	x0, x1, x0
 c64:	str	x0, [sp, #160]
 c68:	ldr	x1, [sp, #176]
 c6c:	ldr	x0, [sp, #536]
 c70:	sub	x1, x1, x0
 c74:	ldr	x2, [sp, #168]
 c78:	ldr	x0, [sp, #160]
 c7c:	cmp	x2, x0
 c80:	cset	w0, cc  // cc = lo, ul, last
 c84:	and	w0, w0, #0xff
 c88:	and	x0, x0, #0xff
 c8c:	sub	x0, x1, x0
 c90:	str	x0, [sp, #176]
 c94:	ldr	x0, [sp, #160]
 c98:	str	x0, [sp, #168]
 c9c:	str	xzr, [sp, #440]
 ca0:	ldr	x0, [sp, #552]
 ca4:	cmp	x0, #0x0
 ca8:	b.eq	d38 <__modti3+0xd38>  // b.none
 cac:	ldr	x1, [sp, #528]
 cb0:	ldr	x0, [sp, #168]
 cb4:	sub	x0, x1, x0
 cb8:	str	x0, [sp, #152]
 cbc:	ldr	x1, [sp, #520]
 cc0:	ldr	x0, [sp, #176]
 cc4:	sub	x1, x1, x0
 cc8:	ldr	x2, [sp, #528]
 ccc:	ldr	x0, [sp, #152]
 cd0:	cmp	x2, x0
 cd4:	cset	w0, cc  // cc = lo, ul, last
 cd8:	and	w0, w0, #0xff
 cdc:	and	x0, x0, #0xff
 ce0:	sub	x0, x1, x0
 ce4:	str	x0, [sp, #520]
 ce8:	ldr	x0, [sp, #152]
 cec:	str	x0, [sp, #528]
 cf0:	ldr	x0, [sp, #432]
 cf4:	mov	w1, w0
 cf8:	ldr	x0, [sp, #520]
 cfc:	lsl	x1, x0, x1
 d00:	ldr	x0, [sp, #512]
 d04:	mov	w2, w0
 d08:	ldr	x0, [sp, #528]
 d0c:	lsr	x0, x0, x2
 d10:	orr	x0, x1, x0
 d14:	str	x0, [sp, #48]
 d18:	ldr	x0, [sp, #512]
 d1c:	mov	w1, w0
 d20:	ldr	x0, [sp, #520]
 d24:	lsr	x0, x0, x1
 d28:	str	x0, [sp, #56]
 d2c:	ldp	x0, x1, [sp, #48]
 d30:	ldr	x2, [sp, #552]
 d34:	stp	x0, x1, [x2]
 d38:	ldr	x0, [sp, #448]
 d3c:	str	x0, [sp, #32]
 d40:	ldr	x0, [sp, #440]
 d44:	str	x0, [sp, #40]
 d48:	ldr	x0, [sp, #600]
 d4c:	cmp	x0, #0x0
 d50:	b.eq	d6c <__modti3+0xd6c>  // b.none
 d54:	ldp	x0, x1, [sp, #96]
 d58:	negs	x2, x0
 d5c:	ngc	x0, x1
 d60:	mov	x4, x2
 d64:	mov	x5, x0
 d68:	stp	x4, x5, [sp, #96]
 d6c:	ldp	x0, x1, [sp, #96]
 d70:	add	sp, sp, #0x260
 d74:	ret

_divmoddi4.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__divmodti4>:
   0:	sub	sp, sp, #0x280
   4:	stp	x0, x1, [sp, #32]
   8:	stp	x2, x3, [sp, #16]
   c:	str	x4, [sp, #8]
  10:	str	xzr, [sp, #632]
  14:	str	xzr, [sp, #624]
  18:	ldp	x0, x1, [sp, #32]
  1c:	stp	x0, x1, [sp, #144]
  20:	ldp	x0, x1, [sp, #16]
  24:	stp	x0, x1, [sp, #128]
  28:	ldr	x0, [sp, #152]
  2c:	cmp	x0, #0x0
  30:	b.ge	64 <__divmodti4+0x64>  // b.tcont
  34:	ldr	x0, [sp, #632]
  38:	mvn	x0, x0
  3c:	str	x0, [sp, #632]
  40:	ldr	x0, [sp, #624]
  44:	mvn	x0, x0
  48:	str	x0, [sp, #624]
  4c:	ldp	x0, x1, [sp, #144]
  50:	negs	x2, x0
  54:	ngc	x0, x1
  58:	mov	x12, x2
  5c:	mov	x13, x0
  60:	stp	x12, x13, [sp, #144]
  64:	ldr	x0, [sp, #136]
  68:	cmp	x0, #0x0
  6c:	b.ge	94 <__divmodti4+0x94>  // b.tcont
  70:	ldr	x0, [sp, #632]
  74:	mvn	x0, x0
  78:	str	x0, [sp, #632]
  7c:	ldp	x0, x1, [sp, #128]
  80:	negs	x2, x0
  84:	ngc	x0, x1
  88:	mov	x10, x2
  8c:	mov	x11, x0
  90:	stp	x10, x11, [sp, #128]
  94:	ldp	x0, x1, [sp, #144]
  98:	mov	x2, x0
  9c:	mov	x3, x1
  a0:	ldp	x0, x1, [sp, #128]
  a4:	add	x4, sp, #0x200
  a8:	stp	x2, x3, [x4, #80]
  ac:	add	x2, sp, #0x200
  b0:	stp	x0, x1, [x2, #64]
  b4:	add	x0, sp, #0x70
  b8:	str	x0, [sp, #568]
  bc:	add	x0, sp, #0x200
  c0:	ldp	x0, x1, [x0, #80]
  c4:	stp	x0, x1, [sp, #96]
  c8:	add	x0, sp, #0x200
  cc:	ldp	x0, x1, [x0, #64]
  d0:	stp	x0, x1, [sp, #80]
  d4:	ldr	x0, [sp, #80]
  d8:	str	x0, [sp, #560]
  dc:	ldr	x0, [sp, #88]
  e0:	str	x0, [sp, #552]
  e4:	ldr	x0, [sp, #96]
  e8:	str	x0, [sp, #544]
  ec:	ldr	x0, [sp, #104]
  f0:	str	x0, [sp, #536]
  f4:	ldr	x0, [sp, #552]
  f8:	cmp	x0, #0x0
  fc:	b.ne	7ec <__divmodti4+0x7ec>  // b.any
 100:	ldr	x1, [sp, #560]
 104:	ldr	x0, [sp, #536]
 108:	cmp	x1, x0
 10c:	b.ls	358 <__divmodti4+0x358>  // b.plast
 110:	ldr	x0, [sp, #560]
 114:	clz	x0, x0
 118:	sxtw	x0, w0
 11c:	str	x0, [sp, #528]
 120:	ldr	x0, [sp, #528]
 124:	cmp	x0, #0x0
 128:	b.eq	184 <__divmodti4+0x184>  // b.none
 12c:	ldr	x0, [sp, #528]
 130:	mov	w1, w0
 134:	ldr	x0, [sp, #560]
 138:	lsl	x0, x0, x1
 13c:	str	x0, [sp, #560]
 140:	ldr	x0, [sp, #528]
 144:	mov	w1, w0
 148:	ldr	x0, [sp, #536]
 14c:	lsl	x1, x0, x1
 150:	ldr	x0, [sp, #528]
 154:	mov	w2, w0
 158:	mov	w0, #0x40                  	// #64
 15c:	sub	w0, w0, w2
 160:	ldr	x2, [sp, #544]
 164:	lsr	x0, x2, x0
 168:	orr	x0, x1, x0
 16c:	str	x0, [sp, #536]
 170:	ldr	x0, [sp, #528]
 174:	mov	w1, w0
 178:	ldr	x0, [sp, #544]
 17c:	lsl	x0, x0, x1
 180:	str	x0, [sp, #544]
 184:	ldr	x0, [sp, #560]
 188:	lsr	x0, x0, #32
 18c:	str	x0, [sp, #520]
 190:	ldr	x0, [sp, #560]
 194:	and	x0, x0, #0xffffffff
 198:	str	x0, [sp, #512]
 19c:	ldr	x0, [sp, #536]
 1a0:	ldr	x1, [sp, #520]
 1a4:	udiv	x2, x0, x1
 1a8:	ldr	x1, [sp, #520]
 1ac:	mul	x1, x2, x1
 1b0:	sub	x0, x0, x1
 1b4:	str	x0, [sp, #504]
 1b8:	ldr	x1, [sp, #536]
 1bc:	ldr	x0, [sp, #520]
 1c0:	udiv	x0, x1, x0
 1c4:	str	x0, [sp, #496]
 1c8:	ldr	x1, [sp, #512]
 1cc:	ldr	x0, [sp, #496]
 1d0:	mul	x0, x1, x0
 1d4:	str	x0, [sp, #488]
 1d8:	ldr	x0, [sp, #504]
 1dc:	lsl	x1, x0, #32
 1e0:	ldr	x0, [sp, #544]
 1e4:	lsr	x0, x0, #32
 1e8:	orr	x0, x1, x0
 1ec:	str	x0, [sp, #504]
 1f0:	ldr	x1, [sp, #488]
 1f4:	ldr	x0, [sp, #504]
 1f8:	cmp	x1, x0
 1fc:	b.ls	258 <__divmodti4+0x258>  // b.plast
 200:	ldr	x0, [sp, #496]
 204:	sub	x0, x0, #0x1
 208:	str	x0, [sp, #496]
 20c:	ldr	x1, [sp, #504]
 210:	ldr	x0, [sp, #560]
 214:	add	x0, x1, x0
 218:	str	x0, [sp, #504]
 21c:	ldr	x1, [sp, #560]
 220:	ldr	x0, [sp, #504]
 224:	cmp	x1, x0
 228:	b.hi	258 <__divmodti4+0x258>  // b.pmore
 22c:	ldr	x1, [sp, #488]
 230:	ldr	x0, [sp, #504]
 234:	cmp	x1, x0
 238:	b.ls	258 <__divmodti4+0x258>  // b.plast
 23c:	ldr	x0, [sp, #496]
 240:	sub	x0, x0, #0x1
 244:	str	x0, [sp, #496]
 248:	ldr	x1, [sp, #504]
 24c:	ldr	x0, [sp, #560]
 250:	add	x0, x1, x0
 254:	str	x0, [sp, #504]
 258:	ldr	x1, [sp, #504]
 25c:	ldr	x0, [sp, #488]
 260:	sub	x0, x1, x0
 264:	str	x0, [sp, #504]
 268:	ldr	x0, [sp, #504]
 26c:	ldr	x1, [sp, #520]
 270:	udiv	x2, x0, x1
 274:	ldr	x1, [sp, #520]
 278:	mul	x1, x2, x1
 27c:	sub	x0, x0, x1
 280:	str	x0, [sp, #480]
 284:	ldr	x1, [sp, #504]
 288:	ldr	x0, [sp, #520]
 28c:	udiv	x0, x1, x0
 290:	str	x0, [sp, #472]
 294:	ldr	x1, [sp, #512]
 298:	ldr	x0, [sp, #472]
 29c:	mul	x0, x1, x0
 2a0:	str	x0, [sp, #488]
 2a4:	ldr	x0, [sp, #480]
 2a8:	lsl	x1, x0, #32
 2ac:	ldr	x0, [sp, #544]
 2b0:	and	x0, x0, #0xffffffff
 2b4:	orr	x0, x1, x0
 2b8:	str	x0, [sp, #480]
 2bc:	ldr	x1, [sp, #488]
 2c0:	ldr	x0, [sp, #480]
 2c4:	cmp	x1, x0
 2c8:	b.ls	324 <__divmodti4+0x324>  // b.plast
 2cc:	ldr	x0, [sp, #472]
 2d0:	sub	x0, x0, #0x1
 2d4:	str	x0, [sp, #472]
 2d8:	ldr	x1, [sp, #480]
 2dc:	ldr	x0, [sp, #560]
 2e0:	add	x0, x1, x0
 2e4:	str	x0, [sp, #480]
 2e8:	ldr	x1, [sp, #560]
 2ec:	ldr	x0, [sp, #480]
 2f0:	cmp	x1, x0
 2f4:	b.hi	324 <__divmodti4+0x324>  // b.pmore
 2f8:	ldr	x1, [sp, #488]
 2fc:	ldr	x0, [sp, #480]
 300:	cmp	x1, x0
 304:	b.ls	324 <__divmodti4+0x324>  // b.plast
 308:	ldr	x0, [sp, #472]
 30c:	sub	x0, x0, #0x1
 310:	str	x0, [sp, #472]
 314:	ldr	x1, [sp, #480]
 318:	ldr	x0, [sp, #560]
 31c:	add	x0, x1, x0
 320:	str	x0, [sp, #480]
 324:	ldr	x1, [sp, #480]
 328:	ldr	x0, [sp, #488]
 32c:	sub	x0, x1, x0
 330:	str	x0, [sp, #480]
 334:	ldr	x0, [sp, #496]
 338:	lsl	x1, x0, #32
 33c:	ldr	x0, [sp, #472]
 340:	orr	x0, x1, x0
 344:	str	x0, [sp, #464]
 348:	ldr	x0, [sp, #480]
 34c:	str	x0, [sp, #544]
 350:	str	xzr, [sp, #456]
 354:	b	7b8 <__divmodti4+0x7b8>
 358:	ldr	x0, [sp, #560]
 35c:	cmp	x0, #0x0
 360:	b.ne	374 <__divmodti4+0x374>  // b.any
 364:	mov	x1, #0x1                   	// #1
 368:	ldr	x0, [sp, #560]
 36c:	udiv	x0, x1, x0
 370:	str	x0, [sp, #560]
 374:	ldr	x0, [sp, #560]
 378:	clz	x0, x0
 37c:	sxtw	x0, w0
 380:	str	x0, [sp, #528]
 384:	ldr	x0, [sp, #528]
 388:	cmp	x0, #0x0
 38c:	b.ne	3ac <__divmodti4+0x3ac>  // b.any
 390:	ldr	x1, [sp, #536]
 394:	ldr	x0, [sp, #560]
 398:	sub	x0, x1, x0
 39c:	str	x0, [sp, #536]
 3a0:	mov	x0, #0x1                   	// #1
 3a4:	str	x0, [sp, #456]
 3a8:	b	5ec <__divmodti4+0x5ec>
 3ac:	mov	x1, #0x40                  	// #64
 3b0:	ldr	x0, [sp, #528]
 3b4:	sub	x0, x1, x0
 3b8:	str	x0, [sp, #448]
 3bc:	ldr	x0, [sp, #528]
 3c0:	mov	w1, w0
 3c4:	ldr	x0, [sp, #560]
 3c8:	lsl	x0, x0, x1
 3cc:	str	x0, [sp, #560]
 3d0:	ldr	x0, [sp, #448]
 3d4:	mov	w1, w0
 3d8:	ldr	x0, [sp, #536]
 3dc:	lsr	x0, x0, x1
 3e0:	str	x0, [sp, #440]
 3e4:	ldr	x0, [sp, #528]
 3e8:	mov	w1, w0
 3ec:	ldr	x0, [sp, #536]
 3f0:	lsl	x1, x0, x1
 3f4:	ldr	x0, [sp, #448]
 3f8:	mov	w2, w0
 3fc:	ldr	x0, [sp, #544]
 400:	lsr	x0, x0, x2
 404:	orr	x0, x1, x0
 408:	str	x0, [sp, #536]
 40c:	ldr	x0, [sp, #528]
 410:	mov	w1, w0
 414:	ldr	x0, [sp, #544]
 418:	lsl	x0, x0, x1
 41c:	str	x0, [sp, #544]
 420:	ldr	x0, [sp, #560]
 424:	lsr	x0, x0, #32
 428:	str	x0, [sp, #432]
 42c:	ldr	x0, [sp, #560]
 430:	and	x0, x0, #0xffffffff
 434:	str	x0, [sp, #424]
 438:	ldr	x0, [sp, #440]
 43c:	ldr	x1, [sp, #432]
 440:	udiv	x2, x0, x1
 444:	ldr	x1, [sp, #432]
 448:	mul	x1, x2, x1
 44c:	sub	x0, x0, x1
 450:	str	x0, [sp, #416]
 454:	ldr	x1, [sp, #440]
 458:	ldr	x0, [sp, #432]
 45c:	udiv	x0, x1, x0
 460:	str	x0, [sp, #408]
 464:	ldr	x1, [sp, #424]
 468:	ldr	x0, [sp, #408]
 46c:	mul	x0, x1, x0
 470:	str	x0, [sp, #400]
 474:	ldr	x0, [sp, #416]
 478:	lsl	x1, x0, #32
 47c:	ldr	x0, [sp, #536]
 480:	lsr	x0, x0, #32
 484:	orr	x0, x1, x0
 488:	str	x0, [sp, #416]
 48c:	ldr	x1, [sp, #400]
 490:	ldr	x0, [sp, #416]
 494:	cmp	x1, x0
 498:	b.ls	4f4 <__divmodti4+0x4f4>  // b.plast
 49c:	ldr	x0, [sp, #408]
 4a0:	sub	x0, x0, #0x1
 4a4:	str	x0, [sp, #408]
 4a8:	ldr	x1, [sp, #416]
 4ac:	ldr	x0, [sp, #560]
 4b0:	add	x0, x1, x0
 4b4:	str	x0, [sp, #416]
 4b8:	ldr	x1, [sp, #560]
 4bc:	ldr	x0, [sp, #416]
 4c0:	cmp	x1, x0
 4c4:	b.hi	4f4 <__divmodti4+0x4f4>  // b.pmore
 4c8:	ldr	x1, [sp, #400]
 4cc:	ldr	x0, [sp, #416]
 4d0:	cmp	x1, x0
 4d4:	b.ls	4f4 <__divmodti4+0x4f4>  // b.plast
 4d8:	ldr	x0, [sp, #408]
 4dc:	sub	x0, x0, #0x1
 4e0:	str	x0, [sp, #408]
 4e4:	ldr	x1, [sp, #416]
 4e8:	ldr	x0, [sp, #560]
 4ec:	add	x0, x1, x0
 4f0:	str	x0, [sp, #416]
 4f4:	ldr	x1, [sp, #416]
 4f8:	ldr	x0, [sp, #400]
 4fc:	sub	x0, x1, x0
 500:	str	x0, [sp, #416]
 504:	ldr	x0, [sp, #416]
 508:	ldr	x1, [sp, #432]
 50c:	udiv	x2, x0, x1
 510:	ldr	x1, [sp, #432]
 514:	mul	x1, x2, x1
 518:	sub	x0, x0, x1
 51c:	str	x0, [sp, #392]
 520:	ldr	x1, [sp, #416]
 524:	ldr	x0, [sp, #432]
 528:	udiv	x0, x1, x0
 52c:	str	x0, [sp, #384]
 530:	ldr	x1, [sp, #424]
 534:	ldr	x0, [sp, #384]
 538:	mul	x0, x1, x0
 53c:	str	x0, [sp, #400]
 540:	ldr	x0, [sp, #392]
 544:	lsl	x1, x0, #32
 548:	ldr	x0, [sp, #536]
 54c:	and	x0, x0, #0xffffffff
 550:	orr	x0, x1, x0
 554:	str	x0, [sp, #392]
 558:	ldr	x1, [sp, #400]
 55c:	ldr	x0, [sp, #392]
 560:	cmp	x1, x0
 564:	b.ls	5c0 <__divmodti4+0x5c0>  // b.plast
 568:	ldr	x0, [sp, #384]
 56c:	sub	x0, x0, #0x1
 570:	str	x0, [sp, #384]
 574:	ldr	x1, [sp, #392]
 578:	ldr	x0, [sp, #560]
 57c:	add	x0, x1, x0
 580:	str	x0, [sp, #392]
 584:	ldr	x1, [sp, #560]
 588:	ldr	x0, [sp, #392]
 58c:	cmp	x1, x0
 590:	b.hi	5c0 <__divmodti4+0x5c0>  // b.pmore
 594:	ldr	x1, [sp, #400]
 598:	ldr	x0, [sp, #392]
 59c:	cmp	x1, x0
 5a0:	b.ls	5c0 <__divmodti4+0x5c0>  // b.plast
 5a4:	ldr	x0, [sp, #384]
 5a8:	sub	x0, x0, #0x1
 5ac:	str	x0, [sp, #384]
 5b0:	ldr	x1, [sp, #392]
 5b4:	ldr	x0, [sp, #560]
 5b8:	add	x0, x1, x0
 5bc:	str	x0, [sp, #392]
 5c0:	ldr	x1, [sp, #392]
 5c4:	ldr	x0, [sp, #400]
 5c8:	sub	x0, x1, x0
 5cc:	str	x0, [sp, #392]
 5d0:	ldr	x0, [sp, #408]
 5d4:	lsl	x1, x0, #32
 5d8:	ldr	x0, [sp, #384]
 5dc:	orr	x0, x1, x0
 5e0:	str	x0, [sp, #456]
 5e4:	ldr	x0, [sp, #392]
 5e8:	str	x0, [sp, #536]
 5ec:	ldr	x0, [sp, #560]
 5f0:	lsr	x0, x0, #32
 5f4:	str	x0, [sp, #376]
 5f8:	ldr	x0, [sp, #560]
 5fc:	and	x0, x0, #0xffffffff
 600:	str	x0, [sp, #368]
 604:	ldr	x0, [sp, #536]
 608:	ldr	x1, [sp, #376]
 60c:	udiv	x2, x0, x1
 610:	ldr	x1, [sp, #376]
 614:	mul	x1, x2, x1
 618:	sub	x0, x0, x1
 61c:	str	x0, [sp, #360]
 620:	ldr	x1, [sp, #536]
 624:	ldr	x0, [sp, #376]
 628:	udiv	x0, x1, x0
 62c:	str	x0, [sp, #352]
 630:	ldr	x1, [sp, #368]
 634:	ldr	x0, [sp, #352]
 638:	mul	x0, x1, x0
 63c:	str	x0, [sp, #344]
 640:	ldr	x0, [sp, #360]
 644:	lsl	x1, x0, #32
 648:	ldr	x0, [sp, #544]
 64c:	lsr	x0, x0, #32
 650:	orr	x0, x1, x0
 654:	str	x0, [sp, #360]
 658:	ldr	x1, [sp, #344]
 65c:	ldr	x0, [sp, #360]
 660:	cmp	x1, x0
 664:	b.ls	6c0 <__divmodti4+0x6c0>  // b.plast
 668:	ldr	x0, [sp, #352]
 66c:	sub	x0, x0, #0x1
 670:	str	x0, [sp, #352]
 674:	ldr	x1, [sp, #360]
 678:	ldr	x0, [sp, #560]
 67c:	add	x0, x1, x0
 680:	str	x0, [sp, #360]
 684:	ldr	x1, [sp, #560]
 688:	ldr	x0, [sp, #360]
 68c:	cmp	x1, x0
 690:	b.hi	6c0 <__divmodti4+0x6c0>  // b.pmore
 694:	ldr	x1, [sp, #344]
 698:	ldr	x0, [sp, #360]
 69c:	cmp	x1, x0
 6a0:	b.ls	6c0 <__divmodti4+0x6c0>  // b.plast
 6a4:	ldr	x0, [sp, #352]
 6a8:	sub	x0, x0, #0x1
 6ac:	str	x0, [sp, #352]
 6b0:	ldr	x1, [sp, #360]
 6b4:	ldr	x0, [sp, #560]
 6b8:	add	x0, x1, x0
 6bc:	str	x0, [sp, #360]
 6c0:	ldr	x1, [sp, #360]
 6c4:	ldr	x0, [sp, #344]
 6c8:	sub	x0, x1, x0
 6cc:	str	x0, [sp, #360]
 6d0:	ldr	x0, [sp, #360]
 6d4:	ldr	x1, [sp, #376]
 6d8:	udiv	x2, x0, x1
 6dc:	ldr	x1, [sp, #376]
 6e0:	mul	x1, x2, x1
 6e4:	sub	x0, x0, x1
 6e8:	str	x0, [sp, #336]
 6ec:	ldr	x1, [sp, #360]
 6f0:	ldr	x0, [sp, #376]
 6f4:	udiv	x0, x1, x0
 6f8:	str	x0, [sp, #328]
 6fc:	ldr	x1, [sp, #368]
 700:	ldr	x0, [sp, #328]
 704:	mul	x0, x1, x0
 708:	str	x0, [sp, #344]
 70c:	ldr	x0, [sp, #336]
 710:	lsl	x1, x0, #32
 714:	ldr	x0, [sp, #544]
 718:	and	x0, x0, #0xffffffff
 71c:	orr	x0, x1, x0
 720:	str	x0, [sp, #336]
 724:	ldr	x1, [sp, #344]
 728:	ldr	x0, [sp, #336]
 72c:	cmp	x1, x0
 730:	b.ls	78c <__divmodti4+0x78c>  // b.plast
 734:	ldr	x0, [sp, #328]
 738:	sub	x0, x0, #0x1
 73c:	str	x0, [sp, #328]
 740:	ldr	x1, [sp, #336]
 744:	ldr	x0, [sp, #560]
 748:	add	x0, x1, x0
 74c:	str	x0, [sp, #336]
 750:	ldr	x1, [sp, #560]
 754:	ldr	x0, [sp, #336]
 758:	cmp	x1, x0
 75c:	b.hi	78c <__divmodti4+0x78c>  // b.pmore
 760:	ldr	x1, [sp, #344]
 764:	ldr	x0, [sp, #336]
 768:	cmp	x1, x0
 76c:	b.ls	78c <__divmodti4+0x78c>  // b.plast
 770:	ldr	x0, [sp, #328]
 774:	sub	x0, x0, #0x1
 778:	str	x0, [sp, #328]
 77c:	ldr	x1, [sp, #336]
 780:	ldr	x0, [sp, #560]
 784:	add	x0, x1, x0
 788:	str	x0, [sp, #336]
 78c:	ldr	x1, [sp, #336]
 790:	ldr	x0, [sp, #344]
 794:	sub	x0, x1, x0
 798:	str	x0, [sp, #336]
 79c:	ldr	x0, [sp, #352]
 7a0:	lsl	x1, x0, #32
 7a4:	ldr	x0, [sp, #328]
 7a8:	orr	x0, x1, x0
 7ac:	str	x0, [sp, #464]
 7b0:	ldr	x0, [sp, #336]
 7b4:	str	x0, [sp, #544]
 7b8:	ldr	x0, [sp, #568]
 7bc:	cmp	x0, #0x0
 7c0:	b.eq	d58 <__divmodti4+0xd58>  // b.none
 7c4:	ldr	x0, [sp, #528]
 7c8:	mov	w1, w0
 7cc:	ldr	x0, [sp, #544]
 7d0:	lsr	x0, x0, x1
 7d4:	str	x0, [sp, #64]
 7d8:	str	xzr, [sp, #72]
 7dc:	ldp	x0, x1, [sp, #64]
 7e0:	ldr	x2, [sp, #568]
 7e4:	stp	x0, x1, [x2]
 7e8:	b	d58 <__divmodti4+0xd58>
 7ec:	ldr	x1, [sp, #552]
 7f0:	ldr	x0, [sp, #536]
 7f4:	cmp	x1, x0
 7f8:	b.ls	830 <__divmodti4+0x830>  // b.plast
 7fc:	str	xzr, [sp, #464]
 800:	str	xzr, [sp, #456]
 804:	ldr	x0, [sp, #568]
 808:	cmp	x0, #0x0
 80c:	b.eq	d58 <__divmodti4+0xd58>  // b.none
 810:	ldr	x0, [sp, #544]
 814:	str	x0, [sp, #64]
 818:	ldr	x0, [sp, #536]
 81c:	str	x0, [sp, #72]
 820:	ldp	x0, x1, [sp, #64]
 824:	ldr	x2, [sp, #568]
 828:	stp	x0, x1, [x2]
 82c:	b	d58 <__divmodti4+0xd58>
 830:	ldr	x0, [sp, #552]
 834:	clz	x0, x0
 838:	sxtw	x0, w0
 83c:	str	x0, [sp, #528]
 840:	ldr	x0, [sp, #528]
 844:	cmp	x0, #0x0
 848:	b.ne	8f0 <__divmodti4+0x8f0>  // b.any
 84c:	ldr	x1, [sp, #552]
 850:	ldr	x0, [sp, #536]
 854:	cmp	x1, x0
 858:	b.cc	86c <__divmodti4+0x86c>  // b.lo, b.ul, b.last
 85c:	ldr	x1, [sp, #560]
 860:	ldr	x0, [sp, #544]
 864:	cmp	x1, x0
 868:	b.hi	8bc <__divmodti4+0x8bc>  // b.pmore
 86c:	mov	x0, #0x1                   	// #1
 870:	str	x0, [sp, #464]
 874:	ldr	x1, [sp, #544]
 878:	ldr	x0, [sp, #560]
 87c:	sub	x0, x1, x0
 880:	str	x0, [sp, #320]
 884:	ldr	x1, [sp, #536]
 888:	ldr	x0, [sp, #552]
 88c:	sub	x1, x1, x0
 890:	ldr	x2, [sp, #544]
 894:	ldr	x0, [sp, #320]
 898:	cmp	x2, x0
 89c:	cset	w0, cc  // cc = lo, ul, last
 8a0:	and	w0, w0, #0xff
 8a4:	and	x0, x0, #0xff
 8a8:	sub	x0, x1, x0
 8ac:	str	x0, [sp, #536]
 8b0:	ldr	x0, [sp, #320]
 8b4:	str	x0, [sp, #544]
 8b8:	b	8c0 <__divmodti4+0x8c0>
 8bc:	str	xzr, [sp, #464]
 8c0:	str	xzr, [sp, #456]
 8c4:	ldr	x0, [sp, #568]
 8c8:	cmp	x0, #0x0
 8cc:	b.eq	d58 <__divmodti4+0xd58>  // b.none
 8d0:	ldr	x0, [sp, #544]
 8d4:	str	x0, [sp, #64]
 8d8:	ldr	x0, [sp, #536]
 8dc:	str	x0, [sp, #72]
 8e0:	ldp	x0, x1, [sp, #64]
 8e4:	ldr	x2, [sp, #568]
 8e8:	stp	x0, x1, [x2]
 8ec:	b	d58 <__divmodti4+0xd58>
 8f0:	mov	x1, #0x40                  	// #64
 8f4:	ldr	x0, [sp, #528]
 8f8:	sub	x0, x1, x0
 8fc:	str	x0, [sp, #448]
 900:	ldr	x0, [sp, #528]
 904:	mov	w1, w0
 908:	ldr	x0, [sp, #552]
 90c:	lsl	x1, x0, x1
 910:	ldr	x0, [sp, #448]
 914:	mov	w2, w0
 918:	ldr	x0, [sp, #560]
 91c:	lsr	x0, x0, x2
 920:	orr	x0, x1, x0
 924:	str	x0, [sp, #552]
 928:	ldr	x0, [sp, #528]
 92c:	mov	w1, w0
 930:	ldr	x0, [sp, #560]
 934:	lsl	x0, x0, x1
 938:	str	x0, [sp, #560]
 93c:	ldr	x0, [sp, #448]
 940:	mov	w1, w0
 944:	ldr	x0, [sp, #536]
 948:	lsr	x0, x0, x1
 94c:	str	x0, [sp, #440]
 950:	ldr	x0, [sp, #528]
 954:	mov	w1, w0
 958:	ldr	x0, [sp, #536]
 95c:	lsl	x1, x0, x1
 960:	ldr	x0, [sp, #448]
 964:	mov	w2, w0
 968:	ldr	x0, [sp, #544]
 96c:	lsr	x0, x0, x2
 970:	orr	x0, x1, x0
 974:	str	x0, [sp, #536]
 978:	ldr	x0, [sp, #528]
 97c:	mov	w1, w0
 980:	ldr	x0, [sp, #544]
 984:	lsl	x0, x0, x1
 988:	str	x0, [sp, #544]
 98c:	ldr	x0, [sp, #552]
 990:	lsr	x0, x0, #32
 994:	str	x0, [sp, #312]
 998:	ldr	x0, [sp, #552]
 99c:	and	x0, x0, #0xffffffff
 9a0:	str	x0, [sp, #304]
 9a4:	ldr	x0, [sp, #440]
 9a8:	ldr	x1, [sp, #312]
 9ac:	udiv	x2, x0, x1
 9b0:	ldr	x1, [sp, #312]
 9b4:	mul	x1, x2, x1
 9b8:	sub	x0, x0, x1
 9bc:	str	x0, [sp, #296]
 9c0:	ldr	x1, [sp, #440]
 9c4:	ldr	x0, [sp, #312]
 9c8:	udiv	x0, x1, x0
 9cc:	str	x0, [sp, #288]
 9d0:	ldr	x1, [sp, #304]
 9d4:	ldr	x0, [sp, #288]
 9d8:	mul	x0, x1, x0
 9dc:	str	x0, [sp, #280]
 9e0:	ldr	x0, [sp, #296]
 9e4:	lsl	x1, x0, #32
 9e8:	ldr	x0, [sp, #536]
 9ec:	lsr	x0, x0, #32
 9f0:	orr	x0, x1, x0
 9f4:	str	x0, [sp, #296]
 9f8:	ldr	x1, [sp, #280]
 9fc:	ldr	x0, [sp, #296]
 a00:	cmp	x1, x0
 a04:	b.ls	a60 <__divmodti4+0xa60>  // b.plast
 a08:	ldr	x0, [sp, #288]
 a0c:	sub	x0, x0, #0x1
 a10:	str	x0, [sp, #288]
 a14:	ldr	x1, [sp, #296]
 a18:	ldr	x0, [sp, #552]
 a1c:	add	x0, x1, x0
 a20:	str	x0, [sp, #296]
 a24:	ldr	x1, [sp, #552]
 a28:	ldr	x0, [sp, #296]
 a2c:	cmp	x1, x0
 a30:	b.hi	a60 <__divmodti4+0xa60>  // b.pmore
 a34:	ldr	x1, [sp, #280]
 a38:	ldr	x0, [sp, #296]
 a3c:	cmp	x1, x0
 a40:	b.ls	a60 <__divmodti4+0xa60>  // b.plast
 a44:	ldr	x0, [sp, #288]
 a48:	sub	x0, x0, #0x1
 a4c:	str	x0, [sp, #288]
 a50:	ldr	x1, [sp, #296]
 a54:	ldr	x0, [sp, #552]
 a58:	add	x0, x1, x0
 a5c:	str	x0, [sp, #296]
 a60:	ldr	x1, [sp, #296]
 a64:	ldr	x0, [sp, #280]
 a68:	sub	x0, x1, x0
 a6c:	str	x0, [sp, #296]
 a70:	ldr	x0, [sp, #296]
 a74:	ldr	x1, [sp, #312]
 a78:	udiv	x2, x0, x1
 a7c:	ldr	x1, [sp, #312]
 a80:	mul	x1, x2, x1
 a84:	sub	x0, x0, x1
 a88:	str	x0, [sp, #272]
 a8c:	ldr	x1, [sp, #296]
 a90:	ldr	x0, [sp, #312]
 a94:	udiv	x0, x1, x0
 a98:	str	x0, [sp, #264]
 a9c:	ldr	x1, [sp, #304]
 aa0:	ldr	x0, [sp, #264]
 aa4:	mul	x0, x1, x0
 aa8:	str	x0, [sp, #280]
 aac:	ldr	x0, [sp, #272]
 ab0:	lsl	x1, x0, #32
 ab4:	ldr	x0, [sp, #536]
 ab8:	and	x0, x0, #0xffffffff
 abc:	orr	x0, x1, x0
 ac0:	str	x0, [sp, #272]
 ac4:	ldr	x1, [sp, #280]
 ac8:	ldr	x0, [sp, #272]
 acc:	cmp	x1, x0
 ad0:	b.ls	b2c <__divmodti4+0xb2c>  // b.plast
 ad4:	ldr	x0, [sp, #264]
 ad8:	sub	x0, x0, #0x1
 adc:	str	x0, [sp, #264]
 ae0:	ldr	x1, [sp, #272]
 ae4:	ldr	x0, [sp, #552]
 ae8:	add	x0, x1, x0
 aec:	str	x0, [sp, #272]
 af0:	ldr	x1, [sp, #552]
 af4:	ldr	x0, [sp, #272]
 af8:	cmp	x1, x0
 afc:	b.hi	b2c <__divmodti4+0xb2c>  // b.pmore
 b00:	ldr	x1, [sp, #280]
 b04:	ldr	x0, [sp, #272]
 b08:	cmp	x1, x0
 b0c:	b.ls	b2c <__divmodti4+0xb2c>  // b.plast
 b10:	ldr	x0, [sp, #264]
 b14:	sub	x0, x0, #0x1
 b18:	str	x0, [sp, #264]
 b1c:	ldr	x1, [sp, #272]
 b20:	ldr	x0, [sp, #552]
 b24:	add	x0, x1, x0
 b28:	str	x0, [sp, #272]
 b2c:	ldr	x1, [sp, #272]
 b30:	ldr	x0, [sp, #280]
 b34:	sub	x0, x1, x0
 b38:	str	x0, [sp, #272]
 b3c:	ldr	x0, [sp, #288]
 b40:	lsl	x1, x0, #32
 b44:	ldr	x0, [sp, #264]
 b48:	orr	x0, x1, x0
 b4c:	str	x0, [sp, #464]
 b50:	ldr	x0, [sp, #272]
 b54:	str	x0, [sp, #536]
 b58:	ldr	x0, [sp, #464]
 b5c:	and	x0, x0, #0xffffffff
 b60:	str	x0, [sp, #256]
 b64:	ldr	x0, [sp, #464]
 b68:	lsr	x0, x0, #32
 b6c:	str	x0, [sp, #248]
 b70:	ldr	x0, [sp, #560]
 b74:	and	x0, x0, #0xffffffff
 b78:	str	x0, [sp, #240]
 b7c:	ldr	x0, [sp, #560]
 b80:	lsr	x0, x0, #32
 b84:	str	x0, [sp, #232]
 b88:	ldr	x1, [sp, #256]
 b8c:	ldr	x0, [sp, #240]
 b90:	mul	x0, x1, x0
 b94:	str	x0, [sp, #224]
 b98:	ldr	x1, [sp, #256]
 b9c:	ldr	x0, [sp, #232]
 ba0:	mul	x0, x1, x0
 ba4:	str	x0, [sp, #216]
 ba8:	ldr	x1, [sp, #248]
 bac:	ldr	x0, [sp, #240]
 bb0:	mul	x0, x1, x0
 bb4:	str	x0, [sp, #208]
 bb8:	ldr	x1, [sp, #248]
 bbc:	ldr	x0, [sp, #232]
 bc0:	mul	x0, x1, x0
 bc4:	str	x0, [sp, #200]
 bc8:	ldr	x0, [sp, #224]
 bcc:	lsr	x0, x0, #32
 bd0:	ldr	x1, [sp, #216]
 bd4:	add	x0, x1, x0
 bd8:	str	x0, [sp, #216]
 bdc:	ldr	x1, [sp, #216]
 be0:	ldr	x0, [sp, #208]
 be4:	add	x0, x1, x0
 be8:	str	x0, [sp, #216]
 bec:	ldr	x1, [sp, #208]
 bf0:	ldr	x0, [sp, #216]
 bf4:	cmp	x1, x0
 bf8:	b.ls	c0c <__divmodti4+0xc0c>  // b.plast
 bfc:	ldr	x1, [sp, #200]
 c00:	mov	x0, #0x100000000           	// #4294967296
 c04:	add	x0, x1, x0
 c08:	str	x0, [sp, #200]
 c0c:	ldr	x0, [sp, #216]
 c10:	lsr	x1, x0, #32
 c14:	ldr	x0, [sp, #200]
 c18:	add	x0, x1, x0
 c1c:	str	x0, [sp, #192]
 c20:	ldr	x0, [sp, #216]
 c24:	and	x0, x0, #0xffffffff
 c28:	lsl	x1, x0, #32
 c2c:	ldr	x0, [sp, #224]
 c30:	and	x0, x0, #0xffffffff
 c34:	add	x0, x1, x0
 c38:	str	x0, [sp, #184]
 c3c:	ldr	x1, [sp, #536]
 c40:	ldr	x0, [sp, #192]
 c44:	cmp	x1, x0
 c48:	b.cc	c6c <__divmodti4+0xc6c>  // b.lo, b.ul, b.last
 c4c:	ldr	x1, [sp, #536]
 c50:	ldr	x0, [sp, #192]
 c54:	cmp	x1, x0
 c58:	b.ne	cbc <__divmodti4+0xcbc>  // b.any
 c5c:	ldr	x1, [sp, #544]
 c60:	ldr	x0, [sp, #184]
 c64:	cmp	x1, x0
 c68:	b.cs	cbc <__divmodti4+0xcbc>  // b.hs, b.nlast
 c6c:	ldr	x0, [sp, #464]
 c70:	sub	x0, x0, #0x1
 c74:	str	x0, [sp, #464]
 c78:	ldr	x1, [sp, #184]
 c7c:	ldr	x0, [sp, #560]
 c80:	sub	x0, x1, x0
 c84:	str	x0, [sp, #176]
 c88:	ldr	x1, [sp, #192]
 c8c:	ldr	x0, [sp, #552]
 c90:	sub	x1, x1, x0
 c94:	ldr	x2, [sp, #184]
 c98:	ldr	x0, [sp, #176]
 c9c:	cmp	x2, x0
 ca0:	cset	w0, cc  // cc = lo, ul, last
 ca4:	and	w0, w0, #0xff
 ca8:	and	x0, x0, #0xff
 cac:	sub	x0, x1, x0
 cb0:	str	x0, [sp, #192]
 cb4:	ldr	x0, [sp, #176]
 cb8:	str	x0, [sp, #184]
 cbc:	str	xzr, [sp, #456]
 cc0:	ldr	x0, [sp, #568]
 cc4:	cmp	x0, #0x0
 cc8:	b.eq	d58 <__divmodti4+0xd58>  // b.none
 ccc:	ldr	x1, [sp, #544]
 cd0:	ldr	x0, [sp, #184]
 cd4:	sub	x0, x1, x0
 cd8:	str	x0, [sp, #168]
 cdc:	ldr	x1, [sp, #536]
 ce0:	ldr	x0, [sp, #192]
 ce4:	sub	x1, x1, x0
 ce8:	ldr	x2, [sp, #544]
 cec:	ldr	x0, [sp, #168]
 cf0:	cmp	x2, x0
 cf4:	cset	w0, cc  // cc = lo, ul, last
 cf8:	and	w0, w0, #0xff
 cfc:	and	x0, x0, #0xff
 d00:	sub	x0, x1, x0
 d04:	str	x0, [sp, #536]
 d08:	ldr	x0, [sp, #168]
 d0c:	str	x0, [sp, #544]
 d10:	ldr	x0, [sp, #448]
 d14:	mov	w1, w0
 d18:	ldr	x0, [sp, #536]
 d1c:	lsl	x1, x0, x1
 d20:	ldr	x0, [sp, #528]
 d24:	mov	w2, w0
 d28:	ldr	x0, [sp, #544]
 d2c:	lsr	x0, x0, x2
 d30:	orr	x0, x1, x0
 d34:	str	x0, [sp, #64]
 d38:	ldr	x0, [sp, #528]
 d3c:	mov	w1, w0
 d40:	ldr	x0, [sp, #536]
 d44:	lsr	x0, x0, x1
 d48:	str	x0, [sp, #72]
 d4c:	ldp	x0, x1, [sp, #64]
 d50:	ldr	x2, [sp, #568]
 d54:	stp	x0, x1, [x2]
 d58:	ldr	x0, [sp, #464]
 d5c:	str	x0, [sp, #48]
 d60:	ldr	x0, [sp, #456]
 d64:	str	x0, [sp, #56]
 d68:	ldp	x0, x1, [sp, #48]
 d6c:	add	x2, sp, #0x200
 d70:	stp	x0, x1, [x2, #96]
 d74:	ldr	x0, [sp, #632]
 d78:	cmp	x0, #0x0
 d7c:	b.eq	da0 <__divmodti4+0xda0>  // b.none
 d80:	add	x0, sp, #0x200
 d84:	ldp	x0, x1, [x0, #96]
 d88:	negs	x2, x0
 d8c:	ngc	x0, x1
 d90:	mov	x8, x2
 d94:	mov	x9, x0
 d98:	add	x0, sp, #0x200
 d9c:	stp	x8, x9, [x0, #96]
 da0:	ldr	x0, [sp, #624]
 da4:	cmp	x0, #0x0
 da8:	b.eq	dc4 <__divmodti4+0xdc4>  // b.none
 dac:	ldp	x0, x1, [sp, #112]
 db0:	negs	x2, x0
 db4:	ngc	x0, x1
 db8:	mov	x6, x2
 dbc:	mov	x7, x0
 dc0:	stp	x6, x7, [sp, #112]
 dc4:	ldp	x0, x1, [sp, #112]
 dc8:	ldr	x2, [sp, #8]
 dcc:	stp	x0, x1, [x2]
 dd0:	add	x0, sp, #0x200
 dd4:	ldp	x0, x1, [x0, #96]
 dd8:	add	sp, sp, #0x280
 ddc:	ret

_udivdi3.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__udivti3>:
   0:	sub	sp, sp, #0x220
   4:	stp	x0, x1, [sp, #16]
   8:	stp	x2, x3, [sp]
   c:	ldp	x0, x1, [sp, #16]
  10:	add	x2, sp, #0x200
  14:	stp	x0, x1, [x2, #16]
  18:	ldp	x0, x1, [sp]
  1c:	add	x2, sp, #0x200
  20:	stp	x0, x1, [x2]
  24:	str	xzr, [sp, #504]
  28:	add	x0, sp, #0x200
  2c:	ldp	x0, x1, [x0, #16]
  30:	stp	x0, x1, [sp, #80]
  34:	add	x0, sp, #0x200
  38:	ldp	x0, x1, [x0]
  3c:	stp	x0, x1, [sp, #64]
  40:	ldr	x0, [sp, #64]
  44:	str	x0, [sp, #496]
  48:	ldr	x0, [sp, #72]
  4c:	str	x0, [sp, #488]
  50:	ldr	x0, [sp, #80]
  54:	str	x0, [sp, #480]
  58:	ldr	x0, [sp, #88]
  5c:	str	x0, [sp, #472]
  60:	ldr	x0, [sp, #488]
  64:	cmp	x0, #0x0
  68:	b.ne	758 <__udivti3+0x758>  // b.any
  6c:	ldr	x1, [sp, #496]
  70:	ldr	x0, [sp, #472]
  74:	cmp	x1, x0
  78:	b.ls	2c4 <__udivti3+0x2c4>  // b.plast
  7c:	ldr	x0, [sp, #496]
  80:	clz	x0, x0
  84:	sxtw	x0, w0
  88:	str	x0, [sp, #464]
  8c:	ldr	x0, [sp, #464]
  90:	cmp	x0, #0x0
  94:	b.eq	f0 <__udivti3+0xf0>  // b.none
  98:	ldr	x0, [sp, #464]
  9c:	mov	w1, w0
  a0:	ldr	x0, [sp, #496]
  a4:	lsl	x0, x0, x1
  a8:	str	x0, [sp, #496]
  ac:	ldr	x0, [sp, #464]
  b0:	mov	w1, w0
  b4:	ldr	x0, [sp, #472]
  b8:	lsl	x1, x0, x1
  bc:	ldr	x0, [sp, #464]
  c0:	mov	w2, w0
  c4:	mov	w0, #0x40                  	// #64
  c8:	sub	w0, w0, w2
  cc:	ldr	x2, [sp, #480]
  d0:	lsr	x0, x2, x0
  d4:	orr	x0, x1, x0
  d8:	str	x0, [sp, #472]
  dc:	ldr	x0, [sp, #464]
  e0:	mov	w1, w0
  e4:	ldr	x0, [sp, #480]
  e8:	lsl	x0, x0, x1
  ec:	str	x0, [sp, #480]
  f0:	ldr	x0, [sp, #496]
  f4:	lsr	x0, x0, #32
  f8:	str	x0, [sp, #456]
  fc:	ldr	x0, [sp, #496]
 100:	and	x0, x0, #0xffffffff
 104:	str	x0, [sp, #448]
 108:	ldr	x0, [sp, #472]
 10c:	ldr	x1, [sp, #456]
 110:	udiv	x2, x0, x1
 114:	ldr	x1, [sp, #456]
 118:	mul	x1, x2, x1
 11c:	sub	x0, x0, x1
 120:	str	x0, [sp, #440]
 124:	ldr	x1, [sp, #472]
 128:	ldr	x0, [sp, #456]
 12c:	udiv	x0, x1, x0
 130:	str	x0, [sp, #432]
 134:	ldr	x1, [sp, #448]
 138:	ldr	x0, [sp, #432]
 13c:	mul	x0, x1, x0
 140:	str	x0, [sp, #424]
 144:	ldr	x0, [sp, #440]
 148:	lsl	x1, x0, #32
 14c:	ldr	x0, [sp, #480]
 150:	lsr	x0, x0, #32
 154:	orr	x0, x1, x0
 158:	str	x0, [sp, #440]
 15c:	ldr	x1, [sp, #424]
 160:	ldr	x0, [sp, #440]
 164:	cmp	x1, x0
 168:	b.ls	1c4 <__udivti3+0x1c4>  // b.plast
 16c:	ldr	x0, [sp, #432]
 170:	sub	x0, x0, #0x1
 174:	str	x0, [sp, #432]
 178:	ldr	x1, [sp, #440]
 17c:	ldr	x0, [sp, #496]
 180:	add	x0, x1, x0
 184:	str	x0, [sp, #440]
 188:	ldr	x1, [sp, #496]
 18c:	ldr	x0, [sp, #440]
 190:	cmp	x1, x0
 194:	b.hi	1c4 <__udivti3+0x1c4>  // b.pmore
 198:	ldr	x1, [sp, #424]
 19c:	ldr	x0, [sp, #440]
 1a0:	cmp	x1, x0
 1a4:	b.ls	1c4 <__udivti3+0x1c4>  // b.plast
 1a8:	ldr	x0, [sp, #432]
 1ac:	sub	x0, x0, #0x1
 1b0:	str	x0, [sp, #432]
 1b4:	ldr	x1, [sp, #440]
 1b8:	ldr	x0, [sp, #496]
 1bc:	add	x0, x1, x0
 1c0:	str	x0, [sp, #440]
 1c4:	ldr	x1, [sp, #440]
 1c8:	ldr	x0, [sp, #424]
 1cc:	sub	x0, x1, x0
 1d0:	str	x0, [sp, #440]
 1d4:	ldr	x0, [sp, #440]
 1d8:	ldr	x1, [sp, #456]
 1dc:	udiv	x2, x0, x1
 1e0:	ldr	x1, [sp, #456]
 1e4:	mul	x1, x2, x1
 1e8:	sub	x0, x0, x1
 1ec:	str	x0, [sp, #416]
 1f0:	ldr	x1, [sp, #440]
 1f4:	ldr	x0, [sp, #456]
 1f8:	udiv	x0, x1, x0
 1fc:	str	x0, [sp, #408]
 200:	ldr	x1, [sp, #448]
 204:	ldr	x0, [sp, #408]
 208:	mul	x0, x1, x0
 20c:	str	x0, [sp, #424]
 210:	ldr	x0, [sp, #416]
 214:	lsl	x1, x0, #32
 218:	ldr	x0, [sp, #480]
 21c:	and	x0, x0, #0xffffffff
 220:	orr	x0, x1, x0
 224:	str	x0, [sp, #416]
 228:	ldr	x1, [sp, #424]
 22c:	ldr	x0, [sp, #416]
 230:	cmp	x1, x0
 234:	b.ls	290 <__udivti3+0x290>  // b.plast
 238:	ldr	x0, [sp, #408]
 23c:	sub	x0, x0, #0x1
 240:	str	x0, [sp, #408]
 244:	ldr	x1, [sp, #416]
 248:	ldr	x0, [sp, #496]
 24c:	add	x0, x1, x0
 250:	str	x0, [sp, #416]
 254:	ldr	x1, [sp, #496]
 258:	ldr	x0, [sp, #416]
 25c:	cmp	x1, x0
 260:	b.hi	290 <__udivti3+0x290>  // b.pmore
 264:	ldr	x1, [sp, #424]
 268:	ldr	x0, [sp, #416]
 26c:	cmp	x1, x0
 270:	b.ls	290 <__udivti3+0x290>  // b.plast
 274:	ldr	x0, [sp, #408]
 278:	sub	x0, x0, #0x1
 27c:	str	x0, [sp, #408]
 280:	ldr	x1, [sp, #416]
 284:	ldr	x0, [sp, #496]
 288:	add	x0, x1, x0
 28c:	str	x0, [sp, #416]
 290:	ldr	x1, [sp, #416]
 294:	ldr	x0, [sp, #424]
 298:	sub	x0, x1, x0
 29c:	str	x0, [sp, #416]
 2a0:	ldr	x0, [sp, #432]
 2a4:	lsl	x1, x0, #32
 2a8:	ldr	x0, [sp, #408]
 2ac:	orr	x0, x1, x0
 2b0:	str	x0, [sp, #400]
 2b4:	ldr	x0, [sp, #416]
 2b8:	str	x0, [sp, #480]
 2bc:	str	xzr, [sp, #392]
 2c0:	b	724 <__udivti3+0x724>
 2c4:	ldr	x0, [sp, #496]
 2c8:	cmp	x0, #0x0
 2cc:	b.ne	2e0 <__udivti3+0x2e0>  // b.any
 2d0:	mov	x1, #0x1                   	// #1
 2d4:	ldr	x0, [sp, #496]
 2d8:	udiv	x0, x1, x0
 2dc:	str	x0, [sp, #496]
 2e0:	ldr	x0, [sp, #496]
 2e4:	clz	x0, x0
 2e8:	sxtw	x0, w0
 2ec:	str	x0, [sp, #464]
 2f0:	ldr	x0, [sp, #464]
 2f4:	cmp	x0, #0x0
 2f8:	b.ne	318 <__udivti3+0x318>  // b.any
 2fc:	ldr	x1, [sp, #472]
 300:	ldr	x0, [sp, #496]
 304:	sub	x0, x1, x0
 308:	str	x0, [sp, #472]
 30c:	mov	x0, #0x1                   	// #1
 310:	str	x0, [sp, #392]
 314:	b	558 <__udivti3+0x558>
 318:	mov	x1, #0x40                  	// #64
 31c:	ldr	x0, [sp, #464]
 320:	sub	x0, x1, x0
 324:	str	x0, [sp, #384]
 328:	ldr	x0, [sp, #464]
 32c:	mov	w1, w0
 330:	ldr	x0, [sp, #496]
 334:	lsl	x0, x0, x1
 338:	str	x0, [sp, #496]
 33c:	ldr	x0, [sp, #384]
 340:	mov	w1, w0
 344:	ldr	x0, [sp, #472]
 348:	lsr	x0, x0, x1
 34c:	str	x0, [sp, #376]
 350:	ldr	x0, [sp, #464]
 354:	mov	w1, w0
 358:	ldr	x0, [sp, #472]
 35c:	lsl	x1, x0, x1
 360:	ldr	x0, [sp, #384]
 364:	mov	w2, w0
 368:	ldr	x0, [sp, #480]
 36c:	lsr	x0, x0, x2
 370:	orr	x0, x1, x0
 374:	str	x0, [sp, #472]
 378:	ldr	x0, [sp, #464]
 37c:	mov	w1, w0
 380:	ldr	x0, [sp, #480]
 384:	lsl	x0, x0, x1
 388:	str	x0, [sp, #480]
 38c:	ldr	x0, [sp, #496]
 390:	lsr	x0, x0, #32
 394:	str	x0, [sp, #368]
 398:	ldr	x0, [sp, #496]
 39c:	and	x0, x0, #0xffffffff
 3a0:	str	x0, [sp, #360]
 3a4:	ldr	x0, [sp, #376]
 3a8:	ldr	x1, [sp, #368]
 3ac:	udiv	x2, x0, x1
 3b0:	ldr	x1, [sp, #368]
 3b4:	mul	x1, x2, x1
 3b8:	sub	x0, x0, x1
 3bc:	str	x0, [sp, #352]
 3c0:	ldr	x1, [sp, #376]
 3c4:	ldr	x0, [sp, #368]
 3c8:	udiv	x0, x1, x0
 3cc:	str	x0, [sp, #344]
 3d0:	ldr	x1, [sp, #360]
 3d4:	ldr	x0, [sp, #344]
 3d8:	mul	x0, x1, x0
 3dc:	str	x0, [sp, #336]
 3e0:	ldr	x0, [sp, #352]
 3e4:	lsl	x1, x0, #32
 3e8:	ldr	x0, [sp, #472]
 3ec:	lsr	x0, x0, #32
 3f0:	orr	x0, x1, x0
 3f4:	str	x0, [sp, #352]
 3f8:	ldr	x1, [sp, #336]
 3fc:	ldr	x0, [sp, #352]
 400:	cmp	x1, x0
 404:	b.ls	460 <__udivti3+0x460>  // b.plast
 408:	ldr	x0, [sp, #344]
 40c:	sub	x0, x0, #0x1
 410:	str	x0, [sp, #344]
 414:	ldr	x1, [sp, #352]
 418:	ldr	x0, [sp, #496]
 41c:	add	x0, x1, x0
 420:	str	x0, [sp, #352]
 424:	ldr	x1, [sp, #496]
 428:	ldr	x0, [sp, #352]
 42c:	cmp	x1, x0
 430:	b.hi	460 <__udivti3+0x460>  // b.pmore
 434:	ldr	x1, [sp, #336]
 438:	ldr	x0, [sp, #352]
 43c:	cmp	x1, x0
 440:	b.ls	460 <__udivti3+0x460>  // b.plast
 444:	ldr	x0, [sp, #344]
 448:	sub	x0, x0, #0x1
 44c:	str	x0, [sp, #344]
 450:	ldr	x1, [sp, #352]
 454:	ldr	x0, [sp, #496]
 458:	add	x0, x1, x0
 45c:	str	x0, [sp, #352]
 460:	ldr	x1, [sp, #352]
 464:	ldr	x0, [sp, #336]
 468:	sub	x0, x1, x0
 46c:	str	x0, [sp, #352]
 470:	ldr	x0, [sp, #352]
 474:	ldr	x1, [sp, #368]
 478:	udiv	x2, x0, x1
 47c:	ldr	x1, [sp, #368]
 480:	mul	x1, x2, x1
 484:	sub	x0, x0, x1
 488:	str	x0, [sp, #328]
 48c:	ldr	x1, [sp, #352]
 490:	ldr	x0, [sp, #368]
 494:	udiv	x0, x1, x0
 498:	str	x0, [sp, #320]
 49c:	ldr	x1, [sp, #360]
 4a0:	ldr	x0, [sp, #320]
 4a4:	mul	x0, x1, x0
 4a8:	str	x0, [sp, #336]
 4ac:	ldr	x0, [sp, #328]
 4b0:	lsl	x1, x0, #32
 4b4:	ldr	x0, [sp, #472]
 4b8:	and	x0, x0, #0xffffffff
 4bc:	orr	x0, x1, x0
 4c0:	str	x0, [sp, #328]
 4c4:	ldr	x1, [sp, #336]
 4c8:	ldr	x0, [sp, #328]
 4cc:	cmp	x1, x0
 4d0:	b.ls	52c <__udivti3+0x52c>  // b.plast
 4d4:	ldr	x0, [sp, #320]
 4d8:	sub	x0, x0, #0x1
 4dc:	str	x0, [sp, #320]
 4e0:	ldr	x1, [sp, #328]
 4e4:	ldr	x0, [sp, #496]
 4e8:	add	x0, x1, x0
 4ec:	str	x0, [sp, #328]
 4f0:	ldr	x1, [sp, #496]
 4f4:	ldr	x0, [sp, #328]
 4f8:	cmp	x1, x0
 4fc:	b.hi	52c <__udivti3+0x52c>  // b.pmore
 500:	ldr	x1, [sp, #336]
 504:	ldr	x0, [sp, #328]
 508:	cmp	x1, x0
 50c:	b.ls	52c <__udivti3+0x52c>  // b.plast
 510:	ldr	x0, [sp, #320]
 514:	sub	x0, x0, #0x1
 518:	str	x0, [sp, #320]
 51c:	ldr	x1, [sp, #328]
 520:	ldr	x0, [sp, #496]
 524:	add	x0, x1, x0
 528:	str	x0, [sp, #328]
 52c:	ldr	x1, [sp, #328]
 530:	ldr	x0, [sp, #336]
 534:	sub	x0, x1, x0
 538:	str	x0, [sp, #328]
 53c:	ldr	x0, [sp, #344]
 540:	lsl	x1, x0, #32
 544:	ldr	x0, [sp, #320]
 548:	orr	x0, x1, x0
 54c:	str	x0, [sp, #392]
 550:	ldr	x0, [sp, #328]
 554:	str	x0, [sp, #472]
 558:	ldr	x0, [sp, #496]
 55c:	lsr	x0, x0, #32
 560:	str	x0, [sp, #312]
 564:	ldr	x0, [sp, #496]
 568:	and	x0, x0, #0xffffffff
 56c:	str	x0, [sp, #304]
 570:	ldr	x0, [sp, #472]
 574:	ldr	x1, [sp, #312]
 578:	udiv	x2, x0, x1
 57c:	ldr	x1, [sp, #312]
 580:	mul	x1, x2, x1
 584:	sub	x0, x0, x1
 588:	str	x0, [sp, #296]
 58c:	ldr	x1, [sp, #472]
 590:	ldr	x0, [sp, #312]
 594:	udiv	x0, x1, x0
 598:	str	x0, [sp, #288]
 59c:	ldr	x1, [sp, #304]
 5a0:	ldr	x0, [sp, #288]
 5a4:	mul	x0, x1, x0
 5a8:	str	x0, [sp, #280]
 5ac:	ldr	x0, [sp, #296]
 5b0:	lsl	x1, x0, #32
 5b4:	ldr	x0, [sp, #480]
 5b8:	lsr	x0, x0, #32
 5bc:	orr	x0, x1, x0
 5c0:	str	x0, [sp, #296]
 5c4:	ldr	x1, [sp, #280]
 5c8:	ldr	x0, [sp, #296]
 5cc:	cmp	x1, x0
 5d0:	b.ls	62c <__udivti3+0x62c>  // b.plast
 5d4:	ldr	x0, [sp, #288]
 5d8:	sub	x0, x0, #0x1
 5dc:	str	x0, [sp, #288]
 5e0:	ldr	x1, [sp, #296]
 5e4:	ldr	x0, [sp, #496]
 5e8:	add	x0, x1, x0
 5ec:	str	x0, [sp, #296]
 5f0:	ldr	x1, [sp, #496]
 5f4:	ldr	x0, [sp, #296]
 5f8:	cmp	x1, x0
 5fc:	b.hi	62c <__udivti3+0x62c>  // b.pmore
 600:	ldr	x1, [sp, #280]
 604:	ldr	x0, [sp, #296]
 608:	cmp	x1, x0
 60c:	b.ls	62c <__udivti3+0x62c>  // b.plast
 610:	ldr	x0, [sp, #288]
 614:	sub	x0, x0, #0x1
 618:	str	x0, [sp, #288]
 61c:	ldr	x1, [sp, #296]
 620:	ldr	x0, [sp, #496]
 624:	add	x0, x1, x0
 628:	str	x0, [sp, #296]
 62c:	ldr	x1, [sp, #296]
 630:	ldr	x0, [sp, #280]
 634:	sub	x0, x1, x0
 638:	str	x0, [sp, #296]
 63c:	ldr	x0, [sp, #296]
 640:	ldr	x1, [sp, #312]
 644:	udiv	x2, x0, x1
 648:	ldr	x1, [sp, #312]
 64c:	mul	x1, x2, x1
 650:	sub	x0, x0, x1
 654:	str	x0, [sp, #272]
 658:	ldr	x1, [sp, #296]
 65c:	ldr	x0, [sp, #312]
 660:	udiv	x0, x1, x0
 664:	str	x0, [sp, #264]
 668:	ldr	x1, [sp, #304]
 66c:	ldr	x0, [sp, #264]
 670:	mul	x0, x1, x0
 674:	str	x0, [sp, #280]
 678:	ldr	x0, [sp, #272]
 67c:	lsl	x1, x0, #32
 680:	ldr	x0, [sp, #480]
 684:	and	x0, x0, #0xffffffff
 688:	orr	x0, x1, x0
 68c:	str	x0, [sp, #272]
 690:	ldr	x1, [sp, #280]
 694:	ldr	x0, [sp, #272]
 698:	cmp	x1, x0
 69c:	b.ls	6f8 <__udivti3+0x6f8>  // b.plast
 6a0:	ldr	x0, [sp, #264]
 6a4:	sub	x0, x0, #0x1
 6a8:	str	x0, [sp, #264]
 6ac:	ldr	x1, [sp, #272]
 6b0:	ldr	x0, [sp, #496]
 6b4:	add	x0, x1, x0
 6b8:	str	x0, [sp, #272]
 6bc:	ldr	x1, [sp, #496]
 6c0:	ldr	x0, [sp, #272]
 6c4:	cmp	x1, x0
 6c8:	b.hi	6f8 <__udivti3+0x6f8>  // b.pmore
 6cc:	ldr	x1, [sp, #280]
 6d0:	ldr	x0, [sp, #272]
 6d4:	cmp	x1, x0
 6d8:	b.ls	6f8 <__udivti3+0x6f8>  // b.plast
 6dc:	ldr	x0, [sp, #264]
 6e0:	sub	x0, x0, #0x1
 6e4:	str	x0, [sp, #264]
 6e8:	ldr	x1, [sp, #272]
 6ec:	ldr	x0, [sp, #496]
 6f0:	add	x0, x1, x0
 6f4:	str	x0, [sp, #272]
 6f8:	ldr	x1, [sp, #272]
 6fc:	ldr	x0, [sp, #280]
 700:	sub	x0, x1, x0
 704:	str	x0, [sp, #272]
 708:	ldr	x0, [sp, #288]
 70c:	lsl	x1, x0, #32
 710:	ldr	x0, [sp, #264]
 714:	orr	x0, x1, x0
 718:	str	x0, [sp, #400]
 71c:	ldr	x0, [sp, #272]
 720:	str	x0, [sp, #480]
 724:	ldr	x0, [sp, #504]
 728:	cmp	x0, #0x0
 72c:	b.eq	cc4 <__udivti3+0xcc4>  // b.none
 730:	ldr	x0, [sp, #464]
 734:	mov	w1, w0
 738:	ldr	x0, [sp, #480]
 73c:	lsr	x0, x0, x1
 740:	str	x0, [sp, #48]
 744:	str	xzr, [sp, #56]
 748:	ldp	x0, x1, [sp, #48]
 74c:	ldr	x2, [sp, #504]
 750:	stp	x0, x1, [x2]
 754:	b	cc4 <__udivti3+0xcc4>
 758:	ldr	x1, [sp, #488]
 75c:	ldr	x0, [sp, #472]
 760:	cmp	x1, x0
 764:	b.ls	79c <__udivti3+0x79c>  // b.plast
 768:	str	xzr, [sp, #400]
 76c:	str	xzr, [sp, #392]
 770:	ldr	x0, [sp, #504]
 774:	cmp	x0, #0x0
 778:	b.eq	cc4 <__udivti3+0xcc4>  // b.none
 77c:	ldr	x0, [sp, #480]
 780:	str	x0, [sp, #48]
 784:	ldr	x0, [sp, #472]
 788:	str	x0, [sp, #56]
 78c:	ldp	x0, x1, [sp, #48]
 790:	ldr	x2, [sp, #504]
 794:	stp	x0, x1, [x2]
 798:	b	cc4 <__udivti3+0xcc4>
 79c:	ldr	x0, [sp, #488]
 7a0:	clz	x0, x0
 7a4:	sxtw	x0, w0
 7a8:	str	x0, [sp, #464]
 7ac:	ldr	x0, [sp, #464]
 7b0:	cmp	x0, #0x0
 7b4:	b.ne	85c <__udivti3+0x85c>  // b.any
 7b8:	ldr	x1, [sp, #488]
 7bc:	ldr	x0, [sp, #472]
 7c0:	cmp	x1, x0
 7c4:	b.cc	7d8 <__udivti3+0x7d8>  // b.lo, b.ul, b.last
 7c8:	ldr	x1, [sp, #496]
 7cc:	ldr	x0, [sp, #480]
 7d0:	cmp	x1, x0
 7d4:	b.hi	828 <__udivti3+0x828>  // b.pmore
 7d8:	mov	x0, #0x1                   	// #1
 7dc:	str	x0, [sp, #400]
 7e0:	ldr	x1, [sp, #480]
 7e4:	ldr	x0, [sp, #496]
 7e8:	sub	x0, x1, x0
 7ec:	str	x0, [sp, #256]
 7f0:	ldr	x1, [sp, #472]
 7f4:	ldr	x0, [sp, #488]
 7f8:	sub	x1, x1, x0
 7fc:	ldr	x2, [sp, #480]
 800:	ldr	x0, [sp, #256]
 804:	cmp	x2, x0
 808:	cset	w0, cc  // cc = lo, ul, last
 80c:	and	w0, w0, #0xff
 810:	and	x0, x0, #0xff
 814:	sub	x0, x1, x0
 818:	str	x0, [sp, #472]
 81c:	ldr	x0, [sp, #256]
 820:	str	x0, [sp, #480]
 824:	b	82c <__udivti3+0x82c>
 828:	str	xzr, [sp, #400]
 82c:	str	xzr, [sp, #392]
 830:	ldr	x0, [sp, #504]
 834:	cmp	x0, #0x0
 838:	b.eq	cc4 <__udivti3+0xcc4>  // b.none
 83c:	ldr	x0, [sp, #480]
 840:	str	x0, [sp, #48]
 844:	ldr	x0, [sp, #472]
 848:	str	x0, [sp, #56]
 84c:	ldp	x0, x1, [sp, #48]
 850:	ldr	x2, [sp, #504]
 854:	stp	x0, x1, [x2]
 858:	b	cc4 <__udivti3+0xcc4>
 85c:	mov	x1, #0x40                  	// #64
 860:	ldr	x0, [sp, #464]
 864:	sub	x0, x1, x0
 868:	str	x0, [sp, #384]
 86c:	ldr	x0, [sp, #464]
 870:	mov	w1, w0
 874:	ldr	x0, [sp, #488]
 878:	lsl	x1, x0, x1
 87c:	ldr	x0, [sp, #384]
 880:	mov	w2, w0
 884:	ldr	x0, [sp, #496]
 888:	lsr	x0, x0, x2
 88c:	orr	x0, x1, x0
 890:	str	x0, [sp, #488]
 894:	ldr	x0, [sp, #464]
 898:	mov	w1, w0
 89c:	ldr	x0, [sp, #496]
 8a0:	lsl	x0, x0, x1
 8a4:	str	x0, [sp, #496]
 8a8:	ldr	x0, [sp, #384]
 8ac:	mov	w1, w0
 8b0:	ldr	x0, [sp, #472]
 8b4:	lsr	x0, x0, x1
 8b8:	str	x0, [sp, #376]
 8bc:	ldr	x0, [sp, #464]
 8c0:	mov	w1, w0
 8c4:	ldr	x0, [sp, #472]
 8c8:	lsl	x1, x0, x1
 8cc:	ldr	x0, [sp, #384]
 8d0:	mov	w2, w0
 8d4:	ldr	x0, [sp, #480]
 8d8:	lsr	x0, x0, x2
 8dc:	orr	x0, x1, x0
 8e0:	str	x0, [sp, #472]
 8e4:	ldr	x0, [sp, #464]
 8e8:	mov	w1, w0
 8ec:	ldr	x0, [sp, #480]
 8f0:	lsl	x0, x0, x1
 8f4:	str	x0, [sp, #480]
 8f8:	ldr	x0, [sp, #488]
 8fc:	lsr	x0, x0, #32
 900:	str	x0, [sp, #248]
 904:	ldr	x0, [sp, #488]
 908:	and	x0, x0, #0xffffffff
 90c:	str	x0, [sp, #240]
 910:	ldr	x0, [sp, #376]
 914:	ldr	x1, [sp, #248]
 918:	udiv	x2, x0, x1
 91c:	ldr	x1, [sp, #248]
 920:	mul	x1, x2, x1
 924:	sub	x0, x0, x1
 928:	str	x0, [sp, #232]
 92c:	ldr	x1, [sp, #376]
 930:	ldr	x0, [sp, #248]
 934:	udiv	x0, x1, x0
 938:	str	x0, [sp, #224]
 93c:	ldr	x1, [sp, #240]
 940:	ldr	x0, [sp, #224]
 944:	mul	x0, x1, x0
 948:	str	x0, [sp, #216]
 94c:	ldr	x0, [sp, #232]
 950:	lsl	x1, x0, #32
 954:	ldr	x0, [sp, #472]
 958:	lsr	x0, x0, #32
 95c:	orr	x0, x1, x0
 960:	str	x0, [sp, #232]
 964:	ldr	x1, [sp, #216]
 968:	ldr	x0, [sp, #232]
 96c:	cmp	x1, x0
 970:	b.ls	9cc <__udivti3+0x9cc>  // b.plast
 974:	ldr	x0, [sp, #224]
 978:	sub	x0, x0, #0x1
 97c:	str	x0, [sp, #224]
 980:	ldr	x1, [sp, #232]
 984:	ldr	x0, [sp, #488]
 988:	add	x0, x1, x0
 98c:	str	x0, [sp, #232]
 990:	ldr	x1, [sp, #488]
 994:	ldr	x0, [sp, #232]
 998:	cmp	x1, x0
 99c:	b.hi	9cc <__udivti3+0x9cc>  // b.pmore
 9a0:	ldr	x1, [sp, #216]
 9a4:	ldr	x0, [sp, #232]
 9a8:	cmp	x1, x0
 9ac:	b.ls	9cc <__udivti3+0x9cc>  // b.plast
 9b0:	ldr	x0, [sp, #224]
 9b4:	sub	x0, x0, #0x1
 9b8:	str	x0, [sp, #224]
 9bc:	ldr	x1, [sp, #232]
 9c0:	ldr	x0, [sp, #488]
 9c4:	add	x0, x1, x0
 9c8:	str	x0, [sp, #232]
 9cc:	ldr	x1, [sp, #232]
 9d0:	ldr	x0, [sp, #216]
 9d4:	sub	x0, x1, x0
 9d8:	str	x0, [sp, #232]
 9dc:	ldr	x0, [sp, #232]
 9e0:	ldr	x1, [sp, #248]
 9e4:	udiv	x2, x0, x1
 9e8:	ldr	x1, [sp, #248]
 9ec:	mul	x1, x2, x1
 9f0:	sub	x0, x0, x1
 9f4:	str	x0, [sp, #208]
 9f8:	ldr	x1, [sp, #232]
 9fc:	ldr	x0, [sp, #248]
 a00:	udiv	x0, x1, x0
 a04:	str	x0, [sp, #200]
 a08:	ldr	x1, [sp, #240]
 a0c:	ldr	x0, [sp, #200]
 a10:	mul	x0, x1, x0
 a14:	str	x0, [sp, #216]
 a18:	ldr	x0, [sp, #208]
 a1c:	lsl	x1, x0, #32
 a20:	ldr	x0, [sp, #472]
 a24:	and	x0, x0, #0xffffffff
 a28:	orr	x0, x1, x0
 a2c:	str	x0, [sp, #208]
 a30:	ldr	x1, [sp, #216]
 a34:	ldr	x0, [sp, #208]
 a38:	cmp	x1, x0
 a3c:	b.ls	a98 <__udivti3+0xa98>  // b.plast
 a40:	ldr	x0, [sp, #200]
 a44:	sub	x0, x0, #0x1
 a48:	str	x0, [sp, #200]
 a4c:	ldr	x1, [sp, #208]
 a50:	ldr	x0, [sp, #488]
 a54:	add	x0, x1, x0
 a58:	str	x0, [sp, #208]
 a5c:	ldr	x1, [sp, #488]
 a60:	ldr	x0, [sp, #208]
 a64:	cmp	x1, x0
 a68:	b.hi	a98 <__udivti3+0xa98>  // b.pmore
 a6c:	ldr	x1, [sp, #216]
 a70:	ldr	x0, [sp, #208]
 a74:	cmp	x1, x0
 a78:	b.ls	a98 <__udivti3+0xa98>  // b.plast
 a7c:	ldr	x0, [sp, #200]
 a80:	sub	x0, x0, #0x1
 a84:	str	x0, [sp, #200]
 a88:	ldr	x1, [sp, #208]
 a8c:	ldr	x0, [sp, #488]
 a90:	add	x0, x1, x0
 a94:	str	x0, [sp, #208]
 a98:	ldr	x1, [sp, #208]
 a9c:	ldr	x0, [sp, #216]
 aa0:	sub	x0, x1, x0
 aa4:	str	x0, [sp, #208]
 aa8:	ldr	x0, [sp, #224]
 aac:	lsl	x1, x0, #32
 ab0:	ldr	x0, [sp, #200]
 ab4:	orr	x0, x1, x0
 ab8:	str	x0, [sp, #400]
 abc:	ldr	x0, [sp, #208]
 ac0:	str	x0, [sp, #472]
 ac4:	ldr	x0, [sp, #400]
 ac8:	and	x0, x0, #0xffffffff
 acc:	str	x0, [sp, #192]
 ad0:	ldr	x0, [sp, #400]
 ad4:	lsr	x0, x0, #32
 ad8:	str	x0, [sp, #184]
 adc:	ldr	x0, [sp, #496]
 ae0:	and	x0, x0, #0xffffffff
 ae4:	str	x0, [sp, #176]
 ae8:	ldr	x0, [sp, #496]
 aec:	lsr	x0, x0, #32
 af0:	str	x0, [sp, #168]
 af4:	ldr	x1, [sp, #192]
 af8:	ldr	x0, [sp, #176]
 afc:	mul	x0, x1, x0
 b00:	str	x0, [sp, #160]
 b04:	ldr	x1, [sp, #192]
 b08:	ldr	x0, [sp, #168]
 b0c:	mul	x0, x1, x0
 b10:	str	x0, [sp, #152]
 b14:	ldr	x1, [sp, #184]
 b18:	ldr	x0, [sp, #176]
 b1c:	mul	x0, x1, x0
 b20:	str	x0, [sp, #144]
 b24:	ldr	x1, [sp, #184]
 b28:	ldr	x0, [sp, #168]
 b2c:	mul	x0, x1, x0
 b30:	str	x0, [sp, #136]
 b34:	ldr	x0, [sp, #160]
 b38:	lsr	x0, x0, #32
 b3c:	ldr	x1, [sp, #152]
 b40:	add	x0, x1, x0
 b44:	str	x0, [sp, #152]
 b48:	ldr	x1, [sp, #152]
 b4c:	ldr	x0, [sp, #144]
 b50:	add	x0, x1, x0
 b54:	str	x0, [sp, #152]
 b58:	ldr	x1, [sp, #144]
 b5c:	ldr	x0, [sp, #152]
 b60:	cmp	x1, x0
 b64:	b.ls	b78 <__udivti3+0xb78>  // b.plast
 b68:	ldr	x1, [sp, #136]
 b6c:	mov	x0, #0x100000000           	// #4294967296
 b70:	add	x0, x1, x0
 b74:	str	x0, [sp, #136]
 b78:	ldr	x0, [sp, #152]
 b7c:	lsr	x1, x0, #32
 b80:	ldr	x0, [sp, #136]
 b84:	add	x0, x1, x0
 b88:	str	x0, [sp, #128]
 b8c:	ldr	x0, [sp, #152]
 b90:	and	x0, x0, #0xffffffff
 b94:	lsl	x1, x0, #32
 b98:	ldr	x0, [sp, #160]
 b9c:	and	x0, x0, #0xffffffff
 ba0:	add	x0, x1, x0
 ba4:	str	x0, [sp, #120]
 ba8:	ldr	x1, [sp, #472]
 bac:	ldr	x0, [sp, #128]
 bb0:	cmp	x1, x0
 bb4:	b.cc	bd8 <__udivti3+0xbd8>  // b.lo, b.ul, b.last
 bb8:	ldr	x1, [sp, #472]
 bbc:	ldr	x0, [sp, #128]
 bc0:	cmp	x1, x0
 bc4:	b.ne	c28 <__udivti3+0xc28>  // b.any
 bc8:	ldr	x1, [sp, #480]
 bcc:	ldr	x0, [sp, #120]
 bd0:	cmp	x1, x0
 bd4:	b.cs	c28 <__udivti3+0xc28>  // b.hs, b.nlast
 bd8:	ldr	x0, [sp, #400]
 bdc:	sub	x0, x0, #0x1
 be0:	str	x0, [sp, #400]
 be4:	ldr	x1, [sp, #120]
 be8:	ldr	x0, [sp, #496]
 bec:	sub	x0, x1, x0
 bf0:	str	x0, [sp, #112]
 bf4:	ldr	x1, [sp, #128]
 bf8:	ldr	x0, [sp, #488]
 bfc:	sub	x1, x1, x0
 c00:	ldr	x2, [sp, #120]
 c04:	ldr	x0, [sp, #112]
 c08:	cmp	x2, x0
 c0c:	cset	w0, cc  // cc = lo, ul, last
 c10:	and	w0, w0, #0xff
 c14:	and	x0, x0, #0xff
 c18:	sub	x0, x1, x0
 c1c:	str	x0, [sp, #128]
 c20:	ldr	x0, [sp, #112]
 c24:	str	x0, [sp, #120]
 c28:	str	xzr, [sp, #392]
 c2c:	ldr	x0, [sp, #504]
 c30:	cmp	x0, #0x0
 c34:	b.eq	cc4 <__udivti3+0xcc4>  // b.none
 c38:	ldr	x1, [sp, #480]
 c3c:	ldr	x0, [sp, #120]
 c40:	sub	x0, x1, x0
 c44:	str	x0, [sp, #104]
 c48:	ldr	x1, [sp, #472]
 c4c:	ldr	x0, [sp, #128]
 c50:	sub	x1, x1, x0
 c54:	ldr	x2, [sp, #480]
 c58:	ldr	x0, [sp, #104]
 c5c:	cmp	x2, x0
 c60:	cset	w0, cc  // cc = lo, ul, last
 c64:	and	w0, w0, #0xff
 c68:	and	x0, x0, #0xff
 c6c:	sub	x0, x1, x0
 c70:	str	x0, [sp, #472]
 c74:	ldr	x0, [sp, #104]
 c78:	str	x0, [sp, #480]
 c7c:	ldr	x0, [sp, #384]
 c80:	mov	w1, w0
 c84:	ldr	x0, [sp, #472]
 c88:	lsl	x1, x0, x1
 c8c:	ldr	x0, [sp, #464]
 c90:	mov	w2, w0
 c94:	ldr	x0, [sp, #480]
 c98:	lsr	x0, x0, x2
 c9c:	orr	x0, x1, x0
 ca0:	str	x0, [sp, #48]
 ca4:	ldr	x0, [sp, #464]
 ca8:	mov	w1, w0
 cac:	ldr	x0, [sp, #472]
 cb0:	lsr	x0, x0, x1
 cb4:	str	x0, [sp, #56]
 cb8:	ldp	x0, x1, [sp, #48]
 cbc:	ldr	x2, [sp, #504]
 cc0:	stp	x0, x1, [x2]
 cc4:	ldr	x0, [sp, #400]
 cc8:	str	x0, [sp, #32]
 ccc:	ldr	x0, [sp, #392]
 cd0:	str	x0, [sp, #40]
 cd4:	ldp	x0, x1, [sp, #32]
 cd8:	add	sp, sp, #0x220
 cdc:	ret

_umoddi3.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__umodti3>:
   0:	sub	sp, sp, #0x230
   4:	stp	x0, x1, [sp, #16]
   8:	stp	x2, x3, [sp]
   c:	ldp	x0, x1, [sp, #16]
  10:	add	x2, sp, #0x200
  14:	stp	x0, x1, [x2, #32]
  18:	ldp	x0, x1, [sp]
  1c:	add	x2, sp, #0x200
  20:	stp	x0, x1, [x2, #16]
  24:	add	x0, sp, #0x60
  28:	str	x0, [sp, #520]
  2c:	add	x0, sp, #0x200
  30:	ldp	x0, x1, [x0, #32]
  34:	stp	x0, x1, [sp, #80]
  38:	add	x0, sp, #0x200
  3c:	ldp	x0, x1, [x0, #16]
  40:	stp	x0, x1, [sp, #64]
  44:	ldr	x0, [sp, #64]
  48:	str	x0, [sp, #512]
  4c:	ldr	x0, [sp, #72]
  50:	str	x0, [sp, #504]
  54:	ldr	x0, [sp, #80]
  58:	str	x0, [sp, #496]
  5c:	ldr	x0, [sp, #88]
  60:	str	x0, [sp, #488]
  64:	ldr	x0, [sp, #504]
  68:	cmp	x0, #0x0
  6c:	b.ne	75c <__umodti3+0x75c>  // b.any
  70:	ldr	x1, [sp, #512]
  74:	ldr	x0, [sp, #488]
  78:	cmp	x1, x0
  7c:	b.ls	2c8 <__umodti3+0x2c8>  // b.plast
  80:	ldr	x0, [sp, #512]
  84:	clz	x0, x0
  88:	sxtw	x0, w0
  8c:	str	x0, [sp, #480]
  90:	ldr	x0, [sp, #480]
  94:	cmp	x0, #0x0
  98:	b.eq	f4 <__umodti3+0xf4>  // b.none
  9c:	ldr	x0, [sp, #480]
  a0:	mov	w1, w0
  a4:	ldr	x0, [sp, #512]
  a8:	lsl	x0, x0, x1
  ac:	str	x0, [sp, #512]
  b0:	ldr	x0, [sp, #480]
  b4:	mov	w1, w0
  b8:	ldr	x0, [sp, #488]
  bc:	lsl	x1, x0, x1
  c0:	ldr	x0, [sp, #480]
  c4:	mov	w2, w0
  c8:	mov	w0, #0x40                  	// #64
  cc:	sub	w0, w0, w2
  d0:	ldr	x2, [sp, #496]
  d4:	lsr	x0, x2, x0
  d8:	orr	x0, x1, x0
  dc:	str	x0, [sp, #488]
  e0:	ldr	x0, [sp, #480]
  e4:	mov	w1, w0
  e8:	ldr	x0, [sp, #496]
  ec:	lsl	x0, x0, x1
  f0:	str	x0, [sp, #496]
  f4:	ldr	x0, [sp, #512]
  f8:	lsr	x0, x0, #32
  fc:	str	x0, [sp, #472]
 100:	ldr	x0, [sp, #512]
 104:	and	x0, x0, #0xffffffff
 108:	str	x0, [sp, #464]
 10c:	ldr	x0, [sp, #488]
 110:	ldr	x1, [sp, #472]
 114:	udiv	x2, x0, x1
 118:	ldr	x1, [sp, #472]
 11c:	mul	x1, x2, x1
 120:	sub	x0, x0, x1
 124:	str	x0, [sp, #456]
 128:	ldr	x1, [sp, #488]
 12c:	ldr	x0, [sp, #472]
 130:	udiv	x0, x1, x0
 134:	str	x0, [sp, #448]
 138:	ldr	x1, [sp, #464]
 13c:	ldr	x0, [sp, #448]
 140:	mul	x0, x1, x0
 144:	str	x0, [sp, #440]
 148:	ldr	x0, [sp, #456]
 14c:	lsl	x1, x0, #32
 150:	ldr	x0, [sp, #496]
 154:	lsr	x0, x0, #32
 158:	orr	x0, x1, x0
 15c:	str	x0, [sp, #456]
 160:	ldr	x1, [sp, #440]
 164:	ldr	x0, [sp, #456]
 168:	cmp	x1, x0
 16c:	b.ls	1c8 <__umodti3+0x1c8>  // b.plast
 170:	ldr	x0, [sp, #448]
 174:	sub	x0, x0, #0x1
 178:	str	x0, [sp, #448]
 17c:	ldr	x1, [sp, #456]
 180:	ldr	x0, [sp, #512]
 184:	add	x0, x1, x0
 188:	str	x0, [sp, #456]
 18c:	ldr	x1, [sp, #512]
 190:	ldr	x0, [sp, #456]
 194:	cmp	x1, x0
 198:	b.hi	1c8 <__umodti3+0x1c8>  // b.pmore
 19c:	ldr	x1, [sp, #440]
 1a0:	ldr	x0, [sp, #456]
 1a4:	cmp	x1, x0
 1a8:	b.ls	1c8 <__umodti3+0x1c8>  // b.plast
 1ac:	ldr	x0, [sp, #448]
 1b0:	sub	x0, x0, #0x1
 1b4:	str	x0, [sp, #448]
 1b8:	ldr	x1, [sp, #456]
 1bc:	ldr	x0, [sp, #512]
 1c0:	add	x0, x1, x0
 1c4:	str	x0, [sp, #456]
 1c8:	ldr	x1, [sp, #456]
 1cc:	ldr	x0, [sp, #440]
 1d0:	sub	x0, x1, x0
 1d4:	str	x0, [sp, #456]
 1d8:	ldr	x0, [sp, #456]
 1dc:	ldr	x1, [sp, #472]
 1e0:	udiv	x2, x0, x1
 1e4:	ldr	x1, [sp, #472]
 1e8:	mul	x1, x2, x1
 1ec:	sub	x0, x0, x1
 1f0:	str	x0, [sp, #432]
 1f4:	ldr	x1, [sp, #456]
 1f8:	ldr	x0, [sp, #472]
 1fc:	udiv	x0, x1, x0
 200:	str	x0, [sp, #424]
 204:	ldr	x1, [sp, #464]
 208:	ldr	x0, [sp, #424]
 20c:	mul	x0, x1, x0
 210:	str	x0, [sp, #440]
 214:	ldr	x0, [sp, #432]
 218:	lsl	x1, x0, #32
 21c:	ldr	x0, [sp, #496]
 220:	and	x0, x0, #0xffffffff
 224:	orr	x0, x1, x0
 228:	str	x0, [sp, #432]
 22c:	ldr	x1, [sp, #440]
 230:	ldr	x0, [sp, #432]
 234:	cmp	x1, x0
 238:	b.ls	294 <__umodti3+0x294>  // b.plast
 23c:	ldr	x0, [sp, #424]
 240:	sub	x0, x0, #0x1
 244:	str	x0, [sp, #424]
 248:	ldr	x1, [sp, #432]
 24c:	ldr	x0, [sp, #512]
 250:	add	x0, x1, x0
 254:	str	x0, [sp, #432]
 258:	ldr	x1, [sp, #512]
 25c:	ldr	x0, [sp, #432]
 260:	cmp	x1, x0
 264:	b.hi	294 <__umodti3+0x294>  // b.pmore
 268:	ldr	x1, [sp, #440]
 26c:	ldr	x0, [sp, #432]
 270:	cmp	x1, x0
 274:	b.ls	294 <__umodti3+0x294>  // b.plast
 278:	ldr	x0, [sp, #424]
 27c:	sub	x0, x0, #0x1
 280:	str	x0, [sp, #424]
 284:	ldr	x1, [sp, #432]
 288:	ldr	x0, [sp, #512]
 28c:	add	x0, x1, x0
 290:	str	x0, [sp, #432]
 294:	ldr	x1, [sp, #432]
 298:	ldr	x0, [sp, #440]
 29c:	sub	x0, x1, x0
 2a0:	str	x0, [sp, #432]
 2a4:	ldr	x0, [sp, #448]
 2a8:	lsl	x1, x0, #32
 2ac:	ldr	x0, [sp, #424]
 2b0:	orr	x0, x1, x0
 2b4:	str	x0, [sp, #416]
 2b8:	ldr	x0, [sp, #432]
 2bc:	str	x0, [sp, #496]
 2c0:	str	xzr, [sp, #408]
 2c4:	b	728 <__umodti3+0x728>
 2c8:	ldr	x0, [sp, #512]
 2cc:	cmp	x0, #0x0
 2d0:	b.ne	2e4 <__umodti3+0x2e4>  // b.any
 2d4:	mov	x1, #0x1                   	// #1
 2d8:	ldr	x0, [sp, #512]
 2dc:	udiv	x0, x1, x0
 2e0:	str	x0, [sp, #512]
 2e4:	ldr	x0, [sp, #512]
 2e8:	clz	x0, x0
 2ec:	sxtw	x0, w0
 2f0:	str	x0, [sp, #480]
 2f4:	ldr	x0, [sp, #480]
 2f8:	cmp	x0, #0x0
 2fc:	b.ne	31c <__umodti3+0x31c>  // b.any
 300:	ldr	x1, [sp, #488]
 304:	ldr	x0, [sp, #512]
 308:	sub	x0, x1, x0
 30c:	str	x0, [sp, #488]
 310:	mov	x0, #0x1                   	// #1
 314:	str	x0, [sp, #408]
 318:	b	55c <__umodti3+0x55c>
 31c:	mov	x1, #0x40                  	// #64
 320:	ldr	x0, [sp, #480]
 324:	sub	x0, x1, x0
 328:	str	x0, [sp, #400]
 32c:	ldr	x0, [sp, #480]
 330:	mov	w1, w0
 334:	ldr	x0, [sp, #512]
 338:	lsl	x0, x0, x1
 33c:	str	x0, [sp, #512]
 340:	ldr	x0, [sp, #400]
 344:	mov	w1, w0
 348:	ldr	x0, [sp, #488]
 34c:	lsr	x0, x0, x1
 350:	str	x0, [sp, #392]
 354:	ldr	x0, [sp, #480]
 358:	mov	w1, w0
 35c:	ldr	x0, [sp, #488]
 360:	lsl	x1, x0, x1
 364:	ldr	x0, [sp, #400]
 368:	mov	w2, w0
 36c:	ldr	x0, [sp, #496]
 370:	lsr	x0, x0, x2
 374:	orr	x0, x1, x0
 378:	str	x0, [sp, #488]
 37c:	ldr	x0, [sp, #480]
 380:	mov	w1, w0
 384:	ldr	x0, [sp, #496]
 388:	lsl	x0, x0, x1
 38c:	str	x0, [sp, #496]
 390:	ldr	x0, [sp, #512]
 394:	lsr	x0, x0, #32
 398:	str	x0, [sp, #384]
 39c:	ldr	x0, [sp, #512]
 3a0:	and	x0, x0, #0xffffffff
 3a4:	str	x0, [sp, #376]
 3a8:	ldr	x0, [sp, #392]
 3ac:	ldr	x1, [sp, #384]
 3b0:	udiv	x2, x0, x1
 3b4:	ldr	x1, [sp, #384]
 3b8:	mul	x1, x2, x1
 3bc:	sub	x0, x0, x1
 3c0:	str	x0, [sp, #368]
 3c4:	ldr	x1, [sp, #392]
 3c8:	ldr	x0, [sp, #384]
 3cc:	udiv	x0, x1, x0
 3d0:	str	x0, [sp, #360]
 3d4:	ldr	x1, [sp, #376]
 3d8:	ldr	x0, [sp, #360]
 3dc:	mul	x0, x1, x0
 3e0:	str	x0, [sp, #352]
 3e4:	ldr	x0, [sp, #368]
 3e8:	lsl	x1, x0, #32
 3ec:	ldr	x0, [sp, #488]
 3f0:	lsr	x0, x0, #32
 3f4:	orr	x0, x1, x0
 3f8:	str	x0, [sp, #368]
 3fc:	ldr	x1, [sp, #352]
 400:	ldr	x0, [sp, #368]
 404:	cmp	x1, x0
 408:	b.ls	464 <__umodti3+0x464>  // b.plast
 40c:	ldr	x0, [sp, #360]
 410:	sub	x0, x0, #0x1
 414:	str	x0, [sp, #360]
 418:	ldr	x1, [sp, #368]
 41c:	ldr	x0, [sp, #512]
 420:	add	x0, x1, x0
 424:	str	x0, [sp, #368]
 428:	ldr	x1, [sp, #512]
 42c:	ldr	x0, [sp, #368]
 430:	cmp	x1, x0
 434:	b.hi	464 <__umodti3+0x464>  // b.pmore
 438:	ldr	x1, [sp, #352]
 43c:	ldr	x0, [sp, #368]
 440:	cmp	x1, x0
 444:	b.ls	464 <__umodti3+0x464>  // b.plast
 448:	ldr	x0, [sp, #360]
 44c:	sub	x0, x0, #0x1
 450:	str	x0, [sp, #360]
 454:	ldr	x1, [sp, #368]
 458:	ldr	x0, [sp, #512]
 45c:	add	x0, x1, x0
 460:	str	x0, [sp, #368]
 464:	ldr	x1, [sp, #368]
 468:	ldr	x0, [sp, #352]
 46c:	sub	x0, x1, x0
 470:	str	x0, [sp, #368]
 474:	ldr	x0, [sp, #368]
 478:	ldr	x1, [sp, #384]
 47c:	udiv	x2, x0, x1
 480:	ldr	x1, [sp, #384]
 484:	mul	x1, x2, x1
 488:	sub	x0, x0, x1
 48c:	str	x0, [sp, #344]
 490:	ldr	x1, [sp, #368]
 494:	ldr	x0, [sp, #384]
 498:	udiv	x0, x1, x0
 49c:	str	x0, [sp, #336]
 4a0:	ldr	x1, [sp, #376]
 4a4:	ldr	x0, [sp, #336]
 4a8:	mul	x0, x1, x0
 4ac:	str	x0, [sp, #352]
 4b0:	ldr	x0, [sp, #344]
 4b4:	lsl	x1, x0, #32
 4b8:	ldr	x0, [sp, #488]
 4bc:	and	x0, x0, #0xffffffff
 4c0:	orr	x0, x1, x0
 4c4:	str	x0, [sp, #344]
 4c8:	ldr	x1, [sp, #352]
 4cc:	ldr	x0, [sp, #344]
 4d0:	cmp	x1, x0
 4d4:	b.ls	530 <__umodti3+0x530>  // b.plast
 4d8:	ldr	x0, [sp, #336]
 4dc:	sub	x0, x0, #0x1
 4e0:	str	x0, [sp, #336]
 4e4:	ldr	x1, [sp, #344]
 4e8:	ldr	x0, [sp, #512]
 4ec:	add	x0, x1, x0
 4f0:	str	x0, [sp, #344]
 4f4:	ldr	x1, [sp, #512]
 4f8:	ldr	x0, [sp, #344]
 4fc:	cmp	x1, x0
 500:	b.hi	530 <__umodti3+0x530>  // b.pmore
 504:	ldr	x1, [sp, #352]
 508:	ldr	x0, [sp, #344]
 50c:	cmp	x1, x0
 510:	b.ls	530 <__umodti3+0x530>  // b.plast
 514:	ldr	x0, [sp, #336]
 518:	sub	x0, x0, #0x1
 51c:	str	x0, [sp, #336]
 520:	ldr	x1, [sp, #344]
 524:	ldr	x0, [sp, #512]
 528:	add	x0, x1, x0
 52c:	str	x0, [sp, #344]
 530:	ldr	x1, [sp, #344]
 534:	ldr	x0, [sp, #352]
 538:	sub	x0, x1, x0
 53c:	str	x0, [sp, #344]
 540:	ldr	x0, [sp, #360]
 544:	lsl	x1, x0, #32
 548:	ldr	x0, [sp, #336]
 54c:	orr	x0, x1, x0
 550:	str	x0, [sp, #408]
 554:	ldr	x0, [sp, #344]
 558:	str	x0, [sp, #488]
 55c:	ldr	x0, [sp, #512]
 560:	lsr	x0, x0, #32
 564:	str	x0, [sp, #328]
 568:	ldr	x0, [sp, #512]
 56c:	and	x0, x0, #0xffffffff
 570:	str	x0, [sp, #320]
 574:	ldr	x0, [sp, #488]
 578:	ldr	x1, [sp, #328]
 57c:	udiv	x2, x0, x1
 580:	ldr	x1, [sp, #328]
 584:	mul	x1, x2, x1
 588:	sub	x0, x0, x1
 58c:	str	x0, [sp, #312]
 590:	ldr	x1, [sp, #488]
 594:	ldr	x0, [sp, #328]
 598:	udiv	x0, x1, x0
 59c:	str	x0, [sp, #304]
 5a0:	ldr	x1, [sp, #320]
 5a4:	ldr	x0, [sp, #304]
 5a8:	mul	x0, x1, x0
 5ac:	str	x0, [sp, #296]
 5b0:	ldr	x0, [sp, #312]
 5b4:	lsl	x1, x0, #32
 5b8:	ldr	x0, [sp, #496]
 5bc:	lsr	x0, x0, #32
 5c0:	orr	x0, x1, x0
 5c4:	str	x0, [sp, #312]
 5c8:	ldr	x1, [sp, #296]
 5cc:	ldr	x0, [sp, #312]
 5d0:	cmp	x1, x0
 5d4:	b.ls	630 <__umodti3+0x630>  // b.plast
 5d8:	ldr	x0, [sp, #304]
 5dc:	sub	x0, x0, #0x1
 5e0:	str	x0, [sp, #304]
 5e4:	ldr	x1, [sp, #312]
 5e8:	ldr	x0, [sp, #512]
 5ec:	add	x0, x1, x0
 5f0:	str	x0, [sp, #312]
 5f4:	ldr	x1, [sp, #512]
 5f8:	ldr	x0, [sp, #312]
 5fc:	cmp	x1, x0
 600:	b.hi	630 <__umodti3+0x630>  // b.pmore
 604:	ldr	x1, [sp, #296]
 608:	ldr	x0, [sp, #312]
 60c:	cmp	x1, x0
 610:	b.ls	630 <__umodti3+0x630>  // b.plast
 614:	ldr	x0, [sp, #304]
 618:	sub	x0, x0, #0x1
 61c:	str	x0, [sp, #304]
 620:	ldr	x1, [sp, #312]
 624:	ldr	x0, [sp, #512]
 628:	add	x0, x1, x0
 62c:	str	x0, [sp, #312]
 630:	ldr	x1, [sp, #312]
 634:	ldr	x0, [sp, #296]
 638:	sub	x0, x1, x0
 63c:	str	x0, [sp, #312]
 640:	ldr	x0, [sp, #312]
 644:	ldr	x1, [sp, #328]
 648:	udiv	x2, x0, x1
 64c:	ldr	x1, [sp, #328]
 650:	mul	x1, x2, x1
 654:	sub	x0, x0, x1
 658:	str	x0, [sp, #288]
 65c:	ldr	x1, [sp, #312]
 660:	ldr	x0, [sp, #328]
 664:	udiv	x0, x1, x0
 668:	str	x0, [sp, #280]
 66c:	ldr	x1, [sp, #320]
 670:	ldr	x0, [sp, #280]
 674:	mul	x0, x1, x0
 678:	str	x0, [sp, #296]
 67c:	ldr	x0, [sp, #288]
 680:	lsl	x1, x0, #32
 684:	ldr	x0, [sp, #496]
 688:	and	x0, x0, #0xffffffff
 68c:	orr	x0, x1, x0
 690:	str	x0, [sp, #288]
 694:	ldr	x1, [sp, #296]
 698:	ldr	x0, [sp, #288]
 69c:	cmp	x1, x0
 6a0:	b.ls	6fc <__umodti3+0x6fc>  // b.plast
 6a4:	ldr	x0, [sp, #280]
 6a8:	sub	x0, x0, #0x1
 6ac:	str	x0, [sp, #280]
 6b0:	ldr	x1, [sp, #288]
 6b4:	ldr	x0, [sp, #512]
 6b8:	add	x0, x1, x0
 6bc:	str	x0, [sp, #288]
 6c0:	ldr	x1, [sp, #512]
 6c4:	ldr	x0, [sp, #288]
 6c8:	cmp	x1, x0
 6cc:	b.hi	6fc <__umodti3+0x6fc>  // b.pmore
 6d0:	ldr	x1, [sp, #296]
 6d4:	ldr	x0, [sp, #288]
 6d8:	cmp	x1, x0
 6dc:	b.ls	6fc <__umodti3+0x6fc>  // b.plast
 6e0:	ldr	x0, [sp, #280]
 6e4:	sub	x0, x0, #0x1
 6e8:	str	x0, [sp, #280]
 6ec:	ldr	x1, [sp, #288]
 6f0:	ldr	x0, [sp, #512]
 6f4:	add	x0, x1, x0
 6f8:	str	x0, [sp, #288]
 6fc:	ldr	x1, [sp, #288]
 700:	ldr	x0, [sp, #296]
 704:	sub	x0, x1, x0
 708:	str	x0, [sp, #288]
 70c:	ldr	x0, [sp, #304]
 710:	lsl	x1, x0, #32
 714:	ldr	x0, [sp, #280]
 718:	orr	x0, x1, x0
 71c:	str	x0, [sp, #416]
 720:	ldr	x0, [sp, #288]
 724:	str	x0, [sp, #496]
 728:	ldr	x0, [sp, #520]
 72c:	cmp	x0, #0x0
 730:	b.eq	cc8 <__umodti3+0xcc8>  // b.none
 734:	ldr	x0, [sp, #480]
 738:	mov	w1, w0
 73c:	ldr	x0, [sp, #496]
 740:	lsr	x0, x0, x1
 744:	str	x0, [sp, #48]
 748:	str	xzr, [sp, #56]
 74c:	ldp	x0, x1, [sp, #48]
 750:	ldr	x2, [sp, #520]
 754:	stp	x0, x1, [x2]
 758:	b	cc8 <__umodti3+0xcc8>
 75c:	ldr	x1, [sp, #504]
 760:	ldr	x0, [sp, #488]
 764:	cmp	x1, x0
 768:	b.ls	7a0 <__umodti3+0x7a0>  // b.plast
 76c:	str	xzr, [sp, #416]
 770:	str	xzr, [sp, #408]
 774:	ldr	x0, [sp, #520]
 778:	cmp	x0, #0x0
 77c:	b.eq	cc8 <__umodti3+0xcc8>  // b.none
 780:	ldr	x0, [sp, #496]
 784:	str	x0, [sp, #48]
 788:	ldr	x0, [sp, #488]
 78c:	str	x0, [sp, #56]
 790:	ldp	x0, x1, [sp, #48]
 794:	ldr	x2, [sp, #520]
 798:	stp	x0, x1, [x2]
 79c:	b	cc8 <__umodti3+0xcc8>
 7a0:	ldr	x0, [sp, #504]
 7a4:	clz	x0, x0
 7a8:	sxtw	x0, w0
 7ac:	str	x0, [sp, #480]
 7b0:	ldr	x0, [sp, #480]
 7b4:	cmp	x0, #0x0
 7b8:	b.ne	860 <__umodti3+0x860>  // b.any
 7bc:	ldr	x1, [sp, #504]
 7c0:	ldr	x0, [sp, #488]
 7c4:	cmp	x1, x0
 7c8:	b.cc	7dc <__umodti3+0x7dc>  // b.lo, b.ul, b.last
 7cc:	ldr	x1, [sp, #512]
 7d0:	ldr	x0, [sp, #496]
 7d4:	cmp	x1, x0
 7d8:	b.hi	82c <__umodti3+0x82c>  // b.pmore
 7dc:	mov	x0, #0x1                   	// #1
 7e0:	str	x0, [sp, #416]
 7e4:	ldr	x1, [sp, #496]
 7e8:	ldr	x0, [sp, #512]
 7ec:	sub	x0, x1, x0
 7f0:	str	x0, [sp, #272]
 7f4:	ldr	x1, [sp, #488]
 7f8:	ldr	x0, [sp, #504]
 7fc:	sub	x1, x1, x0
 800:	ldr	x2, [sp, #496]
 804:	ldr	x0, [sp, #272]
 808:	cmp	x2, x0
 80c:	cset	w0, cc  // cc = lo, ul, last
 810:	and	w0, w0, #0xff
 814:	and	x0, x0, #0xff
 818:	sub	x0, x1, x0
 81c:	str	x0, [sp, #488]
 820:	ldr	x0, [sp, #272]
 824:	str	x0, [sp, #496]
 828:	b	830 <__umodti3+0x830>
 82c:	str	xzr, [sp, #416]
 830:	str	xzr, [sp, #408]
 834:	ldr	x0, [sp, #520]
 838:	cmp	x0, #0x0
 83c:	b.eq	cc8 <__umodti3+0xcc8>  // b.none
 840:	ldr	x0, [sp, #496]
 844:	str	x0, [sp, #48]
 848:	ldr	x0, [sp, #488]
 84c:	str	x0, [sp, #56]
 850:	ldp	x0, x1, [sp, #48]
 854:	ldr	x2, [sp, #520]
 858:	stp	x0, x1, [x2]
 85c:	b	cc8 <__umodti3+0xcc8>
 860:	mov	x1, #0x40                  	// #64
 864:	ldr	x0, [sp, #480]
 868:	sub	x0, x1, x0
 86c:	str	x0, [sp, #400]
 870:	ldr	x0, [sp, #480]
 874:	mov	w1, w0
 878:	ldr	x0, [sp, #504]
 87c:	lsl	x1, x0, x1
 880:	ldr	x0, [sp, #400]
 884:	mov	w2, w0
 888:	ldr	x0, [sp, #512]
 88c:	lsr	x0, x0, x2
 890:	orr	x0, x1, x0
 894:	str	x0, [sp, #504]
 898:	ldr	x0, [sp, #480]
 89c:	mov	w1, w0
 8a0:	ldr	x0, [sp, #512]
 8a4:	lsl	x0, x0, x1
 8a8:	str	x0, [sp, #512]
 8ac:	ldr	x0, [sp, #400]
 8b0:	mov	w1, w0
 8b4:	ldr	x0, [sp, #488]
 8b8:	lsr	x0, x0, x1
 8bc:	str	x0, [sp, #392]
 8c0:	ldr	x0, [sp, #480]
 8c4:	mov	w1, w0
 8c8:	ldr	x0, [sp, #488]
 8cc:	lsl	x1, x0, x1
 8d0:	ldr	x0, [sp, #400]
 8d4:	mov	w2, w0
 8d8:	ldr	x0, [sp, #496]
 8dc:	lsr	x0, x0, x2
 8e0:	orr	x0, x1, x0
 8e4:	str	x0, [sp, #488]
 8e8:	ldr	x0, [sp, #480]
 8ec:	mov	w1, w0
 8f0:	ldr	x0, [sp, #496]
 8f4:	lsl	x0, x0, x1
 8f8:	str	x0, [sp, #496]
 8fc:	ldr	x0, [sp, #504]
 900:	lsr	x0, x0, #32
 904:	str	x0, [sp, #264]
 908:	ldr	x0, [sp, #504]
 90c:	and	x0, x0, #0xffffffff
 910:	str	x0, [sp, #256]
 914:	ldr	x0, [sp, #392]
 918:	ldr	x1, [sp, #264]
 91c:	udiv	x2, x0, x1
 920:	ldr	x1, [sp, #264]
 924:	mul	x1, x2, x1
 928:	sub	x0, x0, x1
 92c:	str	x0, [sp, #248]
 930:	ldr	x1, [sp, #392]
 934:	ldr	x0, [sp, #264]
 938:	udiv	x0, x1, x0
 93c:	str	x0, [sp, #240]
 940:	ldr	x1, [sp, #256]
 944:	ldr	x0, [sp, #240]
 948:	mul	x0, x1, x0
 94c:	str	x0, [sp, #232]
 950:	ldr	x0, [sp, #248]
 954:	lsl	x1, x0, #32
 958:	ldr	x0, [sp, #488]
 95c:	lsr	x0, x0, #32
 960:	orr	x0, x1, x0
 964:	str	x0, [sp, #248]
 968:	ldr	x1, [sp, #232]
 96c:	ldr	x0, [sp, #248]
 970:	cmp	x1, x0
 974:	b.ls	9d0 <__umodti3+0x9d0>  // b.plast
 978:	ldr	x0, [sp, #240]
 97c:	sub	x0, x0, #0x1
 980:	str	x0, [sp, #240]
 984:	ldr	x1, [sp, #248]
 988:	ldr	x0, [sp, #504]
 98c:	add	x0, x1, x0
 990:	str	x0, [sp, #248]
 994:	ldr	x1, [sp, #504]
 998:	ldr	x0, [sp, #248]
 99c:	cmp	x1, x0
 9a0:	b.hi	9d0 <__umodti3+0x9d0>  // b.pmore
 9a4:	ldr	x1, [sp, #232]
 9a8:	ldr	x0, [sp, #248]
 9ac:	cmp	x1, x0
 9b0:	b.ls	9d0 <__umodti3+0x9d0>  // b.plast
 9b4:	ldr	x0, [sp, #240]
 9b8:	sub	x0, x0, #0x1
 9bc:	str	x0, [sp, #240]
 9c0:	ldr	x1, [sp, #248]
 9c4:	ldr	x0, [sp, #504]
 9c8:	add	x0, x1, x0
 9cc:	str	x0, [sp, #248]
 9d0:	ldr	x1, [sp, #248]
 9d4:	ldr	x0, [sp, #232]
 9d8:	sub	x0, x1, x0
 9dc:	str	x0, [sp, #248]
 9e0:	ldr	x0, [sp, #248]
 9e4:	ldr	x1, [sp, #264]
 9e8:	udiv	x2, x0, x1
 9ec:	ldr	x1, [sp, #264]
 9f0:	mul	x1, x2, x1
 9f4:	sub	x0, x0, x1
 9f8:	str	x0, [sp, #224]
 9fc:	ldr	x1, [sp, #248]
 a00:	ldr	x0, [sp, #264]
 a04:	udiv	x0, x1, x0
 a08:	str	x0, [sp, #216]
 a0c:	ldr	x1, [sp, #256]
 a10:	ldr	x0, [sp, #216]
 a14:	mul	x0, x1, x0
 a18:	str	x0, [sp, #232]
 a1c:	ldr	x0, [sp, #224]
 a20:	lsl	x1, x0, #32
 a24:	ldr	x0, [sp, #488]
 a28:	and	x0, x0, #0xffffffff
 a2c:	orr	x0, x1, x0
 a30:	str	x0, [sp, #224]
 a34:	ldr	x1, [sp, #232]
 a38:	ldr	x0, [sp, #224]
 a3c:	cmp	x1, x0
 a40:	b.ls	a9c <__umodti3+0xa9c>  // b.plast
 a44:	ldr	x0, [sp, #216]
 a48:	sub	x0, x0, #0x1
 a4c:	str	x0, [sp, #216]
 a50:	ldr	x1, [sp, #224]
 a54:	ldr	x0, [sp, #504]
 a58:	add	x0, x1, x0
 a5c:	str	x0, [sp, #224]
 a60:	ldr	x1, [sp, #504]
 a64:	ldr	x0, [sp, #224]
 a68:	cmp	x1, x0
 a6c:	b.hi	a9c <__umodti3+0xa9c>  // b.pmore
 a70:	ldr	x1, [sp, #232]
 a74:	ldr	x0, [sp, #224]
 a78:	cmp	x1, x0
 a7c:	b.ls	a9c <__umodti3+0xa9c>  // b.plast
 a80:	ldr	x0, [sp, #216]
 a84:	sub	x0, x0, #0x1
 a88:	str	x0, [sp, #216]
 a8c:	ldr	x1, [sp, #224]
 a90:	ldr	x0, [sp, #504]
 a94:	add	x0, x1, x0
 a98:	str	x0, [sp, #224]
 a9c:	ldr	x1, [sp, #224]
 aa0:	ldr	x0, [sp, #232]
 aa4:	sub	x0, x1, x0
 aa8:	str	x0, [sp, #224]
 aac:	ldr	x0, [sp, #240]
 ab0:	lsl	x1, x0, #32
 ab4:	ldr	x0, [sp, #216]
 ab8:	orr	x0, x1, x0
 abc:	str	x0, [sp, #416]
 ac0:	ldr	x0, [sp, #224]
 ac4:	str	x0, [sp, #488]
 ac8:	ldr	x0, [sp, #416]
 acc:	and	x0, x0, #0xffffffff
 ad0:	str	x0, [sp, #208]
 ad4:	ldr	x0, [sp, #416]
 ad8:	lsr	x0, x0, #32
 adc:	str	x0, [sp, #200]
 ae0:	ldr	x0, [sp, #512]
 ae4:	and	x0, x0, #0xffffffff
 ae8:	str	x0, [sp, #192]
 aec:	ldr	x0, [sp, #512]
 af0:	lsr	x0, x0, #32
 af4:	str	x0, [sp, #184]
 af8:	ldr	x1, [sp, #208]
 afc:	ldr	x0, [sp, #192]
 b00:	mul	x0, x1, x0
 b04:	str	x0, [sp, #176]
 b08:	ldr	x1, [sp, #208]
 b0c:	ldr	x0, [sp, #184]
 b10:	mul	x0, x1, x0
 b14:	str	x0, [sp, #168]
 b18:	ldr	x1, [sp, #200]
 b1c:	ldr	x0, [sp, #192]
 b20:	mul	x0, x1, x0
 b24:	str	x0, [sp, #160]
 b28:	ldr	x1, [sp, #200]
 b2c:	ldr	x0, [sp, #184]
 b30:	mul	x0, x1, x0
 b34:	str	x0, [sp, #152]
 b38:	ldr	x0, [sp, #176]
 b3c:	lsr	x0, x0, #32
 b40:	ldr	x1, [sp, #168]
 b44:	add	x0, x1, x0
 b48:	str	x0, [sp, #168]
 b4c:	ldr	x1, [sp, #168]
 b50:	ldr	x0, [sp, #160]
 b54:	add	x0, x1, x0
 b58:	str	x0, [sp, #168]
 b5c:	ldr	x1, [sp, #160]
 b60:	ldr	x0, [sp, #168]
 b64:	cmp	x1, x0
 b68:	b.ls	b7c <__umodti3+0xb7c>  // b.plast
 b6c:	ldr	x1, [sp, #152]
 b70:	mov	x0, #0x100000000           	// #4294967296
 b74:	add	x0, x1, x0
 b78:	str	x0, [sp, #152]
 b7c:	ldr	x0, [sp, #168]
 b80:	lsr	x1, x0, #32
 b84:	ldr	x0, [sp, #152]
 b88:	add	x0, x1, x0
 b8c:	str	x0, [sp, #144]
 b90:	ldr	x0, [sp, #168]
 b94:	and	x0, x0, #0xffffffff
 b98:	lsl	x1, x0, #32
 b9c:	ldr	x0, [sp, #176]
 ba0:	and	x0, x0, #0xffffffff
 ba4:	add	x0, x1, x0
 ba8:	str	x0, [sp, #136]
 bac:	ldr	x1, [sp, #488]
 bb0:	ldr	x0, [sp, #144]
 bb4:	cmp	x1, x0
 bb8:	b.cc	bdc <__umodti3+0xbdc>  // b.lo, b.ul, b.last
 bbc:	ldr	x1, [sp, #488]
 bc0:	ldr	x0, [sp, #144]
 bc4:	cmp	x1, x0
 bc8:	b.ne	c2c <__umodti3+0xc2c>  // b.any
 bcc:	ldr	x1, [sp, #496]
 bd0:	ldr	x0, [sp, #136]
 bd4:	cmp	x1, x0
 bd8:	b.cs	c2c <__umodti3+0xc2c>  // b.hs, b.nlast
 bdc:	ldr	x0, [sp, #416]
 be0:	sub	x0, x0, #0x1
 be4:	str	x0, [sp, #416]
 be8:	ldr	x1, [sp, #136]
 bec:	ldr	x0, [sp, #512]
 bf0:	sub	x0, x1, x0
 bf4:	str	x0, [sp, #128]
 bf8:	ldr	x1, [sp, #144]
 bfc:	ldr	x0, [sp, #504]
 c00:	sub	x1, x1, x0
 c04:	ldr	x2, [sp, #136]
 c08:	ldr	x0, [sp, #128]
 c0c:	cmp	x2, x0
 c10:	cset	w0, cc  // cc = lo, ul, last
 c14:	and	w0, w0, #0xff
 c18:	and	x0, x0, #0xff
 c1c:	sub	x0, x1, x0
 c20:	str	x0, [sp, #144]
 c24:	ldr	x0, [sp, #128]
 c28:	str	x0, [sp, #136]
 c2c:	str	xzr, [sp, #408]
 c30:	ldr	x0, [sp, #520]
 c34:	cmp	x0, #0x0
 c38:	b.eq	cc8 <__umodti3+0xcc8>  // b.none
 c3c:	ldr	x1, [sp, #496]
 c40:	ldr	x0, [sp, #136]
 c44:	sub	x0, x1, x0
 c48:	str	x0, [sp, #120]
 c4c:	ldr	x1, [sp, #488]
 c50:	ldr	x0, [sp, #144]
 c54:	sub	x1, x1, x0
 c58:	ldr	x2, [sp, #496]
 c5c:	ldr	x0, [sp, #120]
 c60:	cmp	x2, x0
 c64:	cset	w0, cc  // cc = lo, ul, last
 c68:	and	w0, w0, #0xff
 c6c:	and	x0, x0, #0xff
 c70:	sub	x0, x1, x0
 c74:	str	x0, [sp, #488]
 c78:	ldr	x0, [sp, #120]
 c7c:	str	x0, [sp, #496]
 c80:	ldr	x0, [sp, #400]
 c84:	mov	w1, w0
 c88:	ldr	x0, [sp, #488]
 c8c:	lsl	x1, x0, x1
 c90:	ldr	x0, [sp, #480]
 c94:	mov	w2, w0
 c98:	ldr	x0, [sp, #496]
 c9c:	lsr	x0, x0, x2
 ca0:	orr	x0, x1, x0
 ca4:	str	x0, [sp, #48]
 ca8:	ldr	x0, [sp, #480]
 cac:	mov	w1, w0
 cb0:	ldr	x0, [sp, #488]
 cb4:	lsr	x0, x0, x1
 cb8:	str	x0, [sp, #56]
 cbc:	ldp	x0, x1, [sp, #48]
 cc0:	ldr	x2, [sp, #520]
 cc4:	stp	x0, x1, [x2]
 cc8:	ldr	x0, [sp, #416]
 ccc:	str	x0, [sp, #32]
 cd0:	ldr	x0, [sp, #408]
 cd4:	str	x0, [sp, #40]
 cd8:	ldp	x0, x1, [sp, #96]
 cdc:	add	sp, sp, #0x230
 ce0:	ret

_udivmoddi4.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__udivmodti4>:
   0:	sub	sp, sp, #0x200
   4:	stp	x0, x1, [sp, #32]
   8:	stp	x2, x3, [sp, #16]
   c:	str	x4, [sp, #8]
  10:	ldp	x0, x1, [sp, #32]
  14:	stp	x0, x1, [sp, #96]
  18:	ldp	x0, x1, [sp, #16]
  1c:	stp	x0, x1, [sp, #80]
  20:	ldr	x0, [sp, #80]
  24:	str	x0, [sp, #504]
  28:	ldr	x0, [sp, #88]
  2c:	str	x0, [sp, #304]
  30:	ldr	x0, [sp, #96]
  34:	str	x0, [sp, #496]
  38:	ldr	x0, [sp, #104]
  3c:	str	x0, [sp, #488]
  40:	ldr	x0, [sp, #304]
  44:	cmp	x0, #0x0
  48:	b.ne	738 <__udivmodti4+0x738>  // b.any
  4c:	ldr	x1, [sp, #504]
  50:	ldr	x0, [sp, #488]
  54:	cmp	x1, x0
  58:	b.ls	2a4 <__udivmodti4+0x2a4>  // b.plast
  5c:	ldr	x0, [sp, #504]
  60:	clz	x0, x0
  64:	sxtw	x0, w0
  68:	str	x0, [sp, #464]
  6c:	ldr	x0, [sp, #464]
  70:	cmp	x0, #0x0
  74:	b.eq	d0 <__udivmodti4+0xd0>  // b.none
  78:	ldr	x0, [sp, #464]
  7c:	mov	w1, w0
  80:	ldr	x0, [sp, #504]
  84:	lsl	x0, x0, x1
  88:	str	x0, [sp, #504]
  8c:	ldr	x0, [sp, #464]
  90:	mov	w1, w0
  94:	ldr	x0, [sp, #488]
  98:	lsl	x1, x0, x1
  9c:	ldr	x0, [sp, #464]
  a0:	mov	w2, w0
  a4:	mov	w0, #0x40                  	// #64
  a8:	sub	w0, w0, w2
  ac:	ldr	x2, [sp, #496]
  b0:	lsr	x0, x2, x0
  b4:	orr	x0, x1, x0
  b8:	str	x0, [sp, #488]
  bc:	ldr	x0, [sp, #464]
  c0:	mov	w1, w0
  c4:	ldr	x0, [sp, #496]
  c8:	lsl	x0, x0, x1
  cc:	str	x0, [sp, #496]
  d0:	ldr	x0, [sp, #504]
  d4:	lsr	x0, x0, #32
  d8:	str	x0, [sp, #128]
  dc:	ldr	x0, [sp, #504]
  e0:	and	x0, x0, #0xffffffff
  e4:	str	x0, [sp, #120]
  e8:	ldr	x0, [sp, #488]
  ec:	ldr	x1, [sp, #128]
  f0:	udiv	x2, x0, x1
  f4:	ldr	x1, [sp, #128]
  f8:	mul	x1, x2, x1
  fc:	sub	x0, x0, x1
 100:	str	x0, [sp, #440]
 104:	ldr	x1, [sp, #488]
 108:	ldr	x0, [sp, #128]
 10c:	udiv	x0, x1, x0
 110:	str	x0, [sp, #456]
 114:	ldr	x1, [sp, #456]
 118:	ldr	x0, [sp, #120]
 11c:	mul	x0, x1, x0
 120:	str	x0, [sp, #112]
 124:	ldr	x0, [sp, #440]
 128:	lsl	x1, x0, #32
 12c:	ldr	x0, [sp, #496]
 130:	lsr	x0, x0, #32
 134:	orr	x0, x1, x0
 138:	str	x0, [sp, #440]
 13c:	ldr	x1, [sp, #440]
 140:	ldr	x0, [sp, #112]
 144:	cmp	x1, x0
 148:	b.cs	1a4 <__udivmodti4+0x1a4>  // b.hs, b.nlast
 14c:	ldr	x0, [sp, #456]
 150:	sub	x0, x0, #0x1
 154:	str	x0, [sp, #456]
 158:	ldr	x1, [sp, #440]
 15c:	ldr	x0, [sp, #504]
 160:	add	x0, x1, x0
 164:	str	x0, [sp, #440]
 168:	ldr	x1, [sp, #440]
 16c:	ldr	x0, [sp, #504]
 170:	cmp	x1, x0
 174:	b.cc	1a4 <__udivmodti4+0x1a4>  // b.lo, b.ul, b.last
 178:	ldr	x1, [sp, #440]
 17c:	ldr	x0, [sp, #112]
 180:	cmp	x1, x0
 184:	b.cs	1a4 <__udivmodti4+0x1a4>  // b.hs, b.nlast
 188:	ldr	x0, [sp, #456]
 18c:	sub	x0, x0, #0x1
 190:	str	x0, [sp, #456]
 194:	ldr	x1, [sp, #440]
 198:	ldr	x0, [sp, #504]
 19c:	add	x0, x1, x0
 1a0:	str	x0, [sp, #440]
 1a4:	ldr	x1, [sp, #440]
 1a8:	ldr	x0, [sp, #112]
 1ac:	sub	x0, x1, x0
 1b0:	str	x0, [sp, #440]
 1b4:	ldr	x0, [sp, #440]
 1b8:	ldr	x1, [sp, #128]
 1bc:	udiv	x2, x0, x1
 1c0:	ldr	x1, [sp, #128]
 1c4:	mul	x1, x2, x1
 1c8:	sub	x0, x0, x1
 1cc:	str	x0, [sp, #432]
 1d0:	ldr	x1, [sp, #440]
 1d4:	ldr	x0, [sp, #128]
 1d8:	udiv	x0, x1, x0
 1dc:	str	x0, [sp, #448]
 1e0:	ldr	x1, [sp, #448]
 1e4:	ldr	x0, [sp, #120]
 1e8:	mul	x0, x1, x0
 1ec:	str	x0, [sp, #112]
 1f0:	ldr	x0, [sp, #432]
 1f4:	lsl	x1, x0, #32
 1f8:	ldr	x0, [sp, #496]
 1fc:	and	x0, x0, #0xffffffff
 200:	orr	x0, x1, x0
 204:	str	x0, [sp, #432]
 208:	ldr	x1, [sp, #432]
 20c:	ldr	x0, [sp, #112]
 210:	cmp	x1, x0
 214:	b.cs	270 <__udivmodti4+0x270>  // b.hs, b.nlast
 218:	ldr	x0, [sp, #448]
 21c:	sub	x0, x0, #0x1
 220:	str	x0, [sp, #448]
 224:	ldr	x1, [sp, #432]
 228:	ldr	x0, [sp, #504]
 22c:	add	x0, x1, x0
 230:	str	x0, [sp, #432]
 234:	ldr	x1, [sp, #432]
 238:	ldr	x0, [sp, #504]
 23c:	cmp	x1, x0
 240:	b.cc	270 <__udivmodti4+0x270>  // b.lo, b.ul, b.last
 244:	ldr	x1, [sp, #432]
 248:	ldr	x0, [sp, #112]
 24c:	cmp	x1, x0
 250:	b.cs	270 <__udivmodti4+0x270>  // b.hs, b.nlast
 254:	ldr	x0, [sp, #448]
 258:	sub	x0, x0, #0x1
 25c:	str	x0, [sp, #448]
 260:	ldr	x1, [sp, #432]
 264:	ldr	x0, [sp, #504]
 268:	add	x0, x1, x0
 26c:	str	x0, [sp, #432]
 270:	ldr	x1, [sp, #432]
 274:	ldr	x0, [sp, #112]
 278:	sub	x0, x1, x0
 27c:	str	x0, [sp, #432]
 280:	ldr	x0, [sp, #456]
 284:	lsl	x0, x0, #32
 288:	ldr	x1, [sp, #448]
 28c:	orr	x0, x1, x0
 290:	str	x0, [sp, #480]
 294:	ldr	x0, [sp, #432]
 298:	str	x0, [sp, #496]
 29c:	str	xzr, [sp, #472]
 2a0:	b	704 <__udivmodti4+0x704>
 2a4:	ldr	x0, [sp, #504]
 2a8:	cmp	x0, #0x0
 2ac:	b.ne	2c0 <__udivmodti4+0x2c0>  // b.any
 2b0:	mov	x1, #0x1                   	// #1
 2b4:	ldr	x0, [sp, #504]
 2b8:	udiv	x0, x1, x0
 2bc:	str	x0, [sp, #504]
 2c0:	ldr	x0, [sp, #504]
 2c4:	clz	x0, x0
 2c8:	sxtw	x0, w0
 2cc:	str	x0, [sp, #464]
 2d0:	ldr	x0, [sp, #464]
 2d4:	cmp	x0, #0x0
 2d8:	b.ne	2f8 <__udivmodti4+0x2f8>  // b.any
 2dc:	ldr	x1, [sp, #488]
 2e0:	ldr	x0, [sp, #504]
 2e4:	sub	x0, x1, x0
 2e8:	str	x0, [sp, #488]
 2ec:	mov	x0, #0x1                   	// #1
 2f0:	str	x0, [sp, #472]
 2f4:	b	538 <__udivmodti4+0x538>
 2f8:	mov	x1, #0x40                  	// #64
 2fc:	ldr	x0, [sp, #464]
 300:	sub	x0, x1, x0
 304:	str	x0, [sp, #296]
 308:	ldr	x0, [sp, #464]
 30c:	mov	w1, w0
 310:	ldr	x0, [sp, #504]
 314:	lsl	x0, x0, x1
 318:	str	x0, [sp, #504]
 31c:	ldr	x0, [sp, #296]
 320:	mov	w1, w0
 324:	ldr	x0, [sp, #488]
 328:	lsr	x0, x0, x1
 32c:	str	x0, [sp, #288]
 330:	ldr	x0, [sp, #464]
 334:	mov	w1, w0
 338:	ldr	x0, [sp, #488]
 33c:	lsl	x1, x0, x1
 340:	ldr	x0, [sp, #296]
 344:	mov	w2, w0
 348:	ldr	x0, [sp, #496]
 34c:	lsr	x0, x0, x2
 350:	orr	x0, x1, x0
 354:	str	x0, [sp, #488]
 358:	ldr	x0, [sp, #464]
 35c:	mov	w1, w0
 360:	ldr	x0, [sp, #496]
 364:	lsl	x0, x0, x1
 368:	str	x0, [sp, #496]
 36c:	ldr	x0, [sp, #504]
 370:	lsr	x0, x0, #32
 374:	str	x0, [sp, #176]
 378:	ldr	x0, [sp, #504]
 37c:	and	x0, x0, #0xffffffff
 380:	str	x0, [sp, #168]
 384:	ldr	x0, [sp, #288]
 388:	ldr	x1, [sp, #176]
 38c:	udiv	x2, x0, x1
 390:	ldr	x1, [sp, #176]
 394:	mul	x1, x2, x1
 398:	sub	x0, x0, x1
 39c:	str	x0, [sp, #408]
 3a0:	ldr	x1, [sp, #288]
 3a4:	ldr	x0, [sp, #176]
 3a8:	udiv	x0, x1, x0
 3ac:	str	x0, [sp, #424]
 3b0:	ldr	x1, [sp, #424]
 3b4:	ldr	x0, [sp, #168]
 3b8:	mul	x0, x1, x0
 3bc:	str	x0, [sp, #160]
 3c0:	ldr	x0, [sp, #408]
 3c4:	lsl	x1, x0, #32
 3c8:	ldr	x0, [sp, #488]
 3cc:	lsr	x0, x0, #32
 3d0:	orr	x0, x1, x0
 3d4:	str	x0, [sp, #408]
 3d8:	ldr	x1, [sp, #408]
 3dc:	ldr	x0, [sp, #160]
 3e0:	cmp	x1, x0
 3e4:	b.cs	440 <__udivmodti4+0x440>  // b.hs, b.nlast
 3e8:	ldr	x0, [sp, #424]
 3ec:	sub	x0, x0, #0x1
 3f0:	str	x0, [sp, #424]
 3f4:	ldr	x1, [sp, #408]
 3f8:	ldr	x0, [sp, #504]
 3fc:	add	x0, x1, x0
 400:	str	x0, [sp, #408]
 404:	ldr	x1, [sp, #408]
 408:	ldr	x0, [sp, #504]
 40c:	cmp	x1, x0
 410:	b.cc	440 <__udivmodti4+0x440>  // b.lo, b.ul, b.last
 414:	ldr	x1, [sp, #408]
 418:	ldr	x0, [sp, #160]
 41c:	cmp	x1, x0
 420:	b.cs	440 <__udivmodti4+0x440>  // b.hs, b.nlast
 424:	ldr	x0, [sp, #424]
 428:	sub	x0, x0, #0x1
 42c:	str	x0, [sp, #424]
 430:	ldr	x1, [sp, #408]
 434:	ldr	x0, [sp, #504]
 438:	add	x0, x1, x0
 43c:	str	x0, [sp, #408]
 440:	ldr	x1, [sp, #408]
 444:	ldr	x0, [sp, #160]
 448:	sub	x0, x1, x0
 44c:	str	x0, [sp, #408]
 450:	ldr	x0, [sp, #408]
 454:	ldr	x1, [sp, #176]
 458:	udiv	x2, x0, x1
 45c:	ldr	x1, [sp, #176]
 460:	mul	x1, x2, x1
 464:	sub	x0, x0, x1
 468:	str	x0, [sp, #400]
 46c:	ldr	x1, [sp, #408]
 470:	ldr	x0, [sp, #176]
 474:	udiv	x0, x1, x0
 478:	str	x0, [sp, #416]
 47c:	ldr	x1, [sp, #416]
 480:	ldr	x0, [sp, #168]
 484:	mul	x0, x1, x0
 488:	str	x0, [sp, #160]
 48c:	ldr	x0, [sp, #400]
 490:	lsl	x1, x0, #32
 494:	ldr	x0, [sp, #488]
 498:	and	x0, x0, #0xffffffff
 49c:	orr	x0, x1, x0
 4a0:	str	x0, [sp, #400]
 4a4:	ldr	x1, [sp, #400]
 4a8:	ldr	x0, [sp, #160]
 4ac:	cmp	x1, x0
 4b0:	b.cs	50c <__udivmodti4+0x50c>  // b.hs, b.nlast
 4b4:	ldr	x0, [sp, #416]
 4b8:	sub	x0, x0, #0x1
 4bc:	str	x0, [sp, #416]
 4c0:	ldr	x1, [sp, #400]
 4c4:	ldr	x0, [sp, #504]
 4c8:	add	x0, x1, x0
 4cc:	str	x0, [sp, #400]
 4d0:	ldr	x1, [sp, #400]
 4d4:	ldr	x0, [sp, #504]
 4d8:	cmp	x1, x0
 4dc:	b.cc	50c <__udivmodti4+0x50c>  // b.lo, b.ul, b.last
 4e0:	ldr	x1, [sp, #400]
 4e4:	ldr	x0, [sp, #160]
 4e8:	cmp	x1, x0
 4ec:	b.cs	50c <__udivmodti4+0x50c>  // b.hs, b.nlast
 4f0:	ldr	x0, [sp, #416]
 4f4:	sub	x0, x0, #0x1
 4f8:	str	x0, [sp, #416]
 4fc:	ldr	x1, [sp, #400]
 500:	ldr	x0, [sp, #504]
 504:	add	x0, x1, x0
 508:	str	x0, [sp, #400]
 50c:	ldr	x1, [sp, #400]
 510:	ldr	x0, [sp, #160]
 514:	sub	x0, x1, x0
 518:	str	x0, [sp, #400]
 51c:	ldr	x0, [sp, #424]
 520:	lsl	x0, x0, #32
 524:	ldr	x1, [sp, #416]
 528:	orr	x0, x1, x0
 52c:	str	x0, [sp, #472]
 530:	ldr	x0, [sp, #400]
 534:	str	x0, [sp, #488]
 538:	ldr	x0, [sp, #504]
 53c:	lsr	x0, x0, #32
 540:	str	x0, [sp, #152]
 544:	ldr	x0, [sp, #504]
 548:	and	x0, x0, #0xffffffff
 54c:	str	x0, [sp, #144]
 550:	ldr	x0, [sp, #488]
 554:	ldr	x1, [sp, #152]
 558:	udiv	x2, x0, x1
 55c:	ldr	x1, [sp, #152]
 560:	mul	x1, x2, x1
 564:	sub	x0, x0, x1
 568:	str	x0, [sp, #376]
 56c:	ldr	x1, [sp, #488]
 570:	ldr	x0, [sp, #152]
 574:	udiv	x0, x1, x0
 578:	str	x0, [sp, #392]
 57c:	ldr	x1, [sp, #392]
 580:	ldr	x0, [sp, #144]
 584:	mul	x0, x1, x0
 588:	str	x0, [sp, #136]
 58c:	ldr	x0, [sp, #376]
 590:	lsl	x1, x0, #32
 594:	ldr	x0, [sp, #496]
 598:	lsr	x0, x0, #32
 59c:	orr	x0, x1, x0
 5a0:	str	x0, [sp, #376]
 5a4:	ldr	x1, [sp, #376]
 5a8:	ldr	x0, [sp, #136]
 5ac:	cmp	x1, x0
 5b0:	b.cs	60c <__udivmodti4+0x60c>  // b.hs, b.nlast
 5b4:	ldr	x0, [sp, #392]
 5b8:	sub	x0, x0, #0x1
 5bc:	str	x0, [sp, #392]
 5c0:	ldr	x1, [sp, #376]
 5c4:	ldr	x0, [sp, #504]
 5c8:	add	x0, x1, x0
 5cc:	str	x0, [sp, #376]
 5d0:	ldr	x1, [sp, #376]
 5d4:	ldr	x0, [sp, #504]
 5d8:	cmp	x1, x0
 5dc:	b.cc	60c <__udivmodti4+0x60c>  // b.lo, b.ul, b.last
 5e0:	ldr	x1, [sp, #376]
 5e4:	ldr	x0, [sp, #136]
 5e8:	cmp	x1, x0
 5ec:	b.cs	60c <__udivmodti4+0x60c>  // b.hs, b.nlast
 5f0:	ldr	x0, [sp, #392]
 5f4:	sub	x0, x0, #0x1
 5f8:	str	x0, [sp, #392]
 5fc:	ldr	x1, [sp, #376]
 600:	ldr	x0, [sp, #504]
 604:	add	x0, x1, x0
 608:	str	x0, [sp, #376]
 60c:	ldr	x1, [sp, #376]
 610:	ldr	x0, [sp, #136]
 614:	sub	x0, x1, x0
 618:	str	x0, [sp, #376]
 61c:	ldr	x0, [sp, #376]
 620:	ldr	x1, [sp, #152]
 624:	udiv	x2, x0, x1
 628:	ldr	x1, [sp, #152]
 62c:	mul	x1, x2, x1
 630:	sub	x0, x0, x1
 634:	str	x0, [sp, #368]
 638:	ldr	x1, [sp, #376]
 63c:	ldr	x0, [sp, #152]
 640:	udiv	x0, x1, x0
 644:	str	x0, [sp, #384]
 648:	ldr	x1, [sp, #384]
 64c:	ldr	x0, [sp, #144]
 650:	mul	x0, x1, x0
 654:	str	x0, [sp, #136]
 658:	ldr	x0, [sp, #368]
 65c:	lsl	x1, x0, #32
 660:	ldr	x0, [sp, #496]
 664:	and	x0, x0, #0xffffffff
 668:	orr	x0, x1, x0
 66c:	str	x0, [sp, #368]
 670:	ldr	x1, [sp, #368]
 674:	ldr	x0, [sp, #136]
 678:	cmp	x1, x0
 67c:	b.cs	6d8 <__udivmodti4+0x6d8>  // b.hs, b.nlast
 680:	ldr	x0, [sp, #384]
 684:	sub	x0, x0, #0x1
 688:	str	x0, [sp, #384]
 68c:	ldr	x1, [sp, #368]
 690:	ldr	x0, [sp, #504]
 694:	add	x0, x1, x0
 698:	str	x0, [sp, #368]
 69c:	ldr	x1, [sp, #368]
 6a0:	ldr	x0, [sp, #504]
 6a4:	cmp	x1, x0
 6a8:	b.cc	6d8 <__udivmodti4+0x6d8>  // b.lo, b.ul, b.last
 6ac:	ldr	x1, [sp, #368]
 6b0:	ldr	x0, [sp, #136]
 6b4:	cmp	x1, x0
 6b8:	b.cs	6d8 <__udivmodti4+0x6d8>  // b.hs, b.nlast
 6bc:	ldr	x0, [sp, #384]
 6c0:	sub	x0, x0, #0x1
 6c4:	str	x0, [sp, #384]
 6c8:	ldr	x1, [sp, #368]
 6cc:	ldr	x0, [sp, #504]
 6d0:	add	x0, x1, x0
 6d4:	str	x0, [sp, #368]
 6d8:	ldr	x1, [sp, #368]
 6dc:	ldr	x0, [sp, #136]
 6e0:	sub	x0, x1, x0
 6e4:	str	x0, [sp, #368]
 6e8:	ldr	x0, [sp, #392]
 6ec:	lsl	x0, x0, #32
 6f0:	ldr	x1, [sp, #384]
 6f4:	orr	x0, x1, x0
 6f8:	str	x0, [sp, #480]
 6fc:	ldr	x0, [sp, #368]
 700:	str	x0, [sp, #496]
 704:	ldr	x0, [sp, #8]
 708:	cmp	x0, #0x0
 70c:	b.eq	ca4 <__udivmodti4+0xca4>  // b.none
 710:	ldr	x0, [sp, #464]
 714:	mov	w1, w0
 718:	ldr	x0, [sp, #496]
 71c:	lsr	x0, x0, x1
 720:	str	x0, [sp, #64]
 724:	str	xzr, [sp, #72]
 728:	ldp	x0, x1, [sp, #64]
 72c:	ldr	x2, [sp, #8]
 730:	stp	x0, x1, [x2]
 734:	b	ca4 <__udivmodti4+0xca4>
 738:	ldr	x1, [sp, #304]
 73c:	ldr	x0, [sp, #488]
 740:	cmp	x1, x0
 744:	b.ls	77c <__udivmodti4+0x77c>  // b.plast
 748:	str	xzr, [sp, #480]
 74c:	str	xzr, [sp, #472]
 750:	ldr	x0, [sp, #8]
 754:	cmp	x0, #0x0
 758:	b.eq	ca4 <__udivmodti4+0xca4>  // b.none
 75c:	ldr	x0, [sp, #496]
 760:	str	x0, [sp, #64]
 764:	ldr	x0, [sp, #488]
 768:	str	x0, [sp, #72]
 76c:	ldp	x0, x1, [sp, #64]
 770:	ldr	x2, [sp, #8]
 774:	stp	x0, x1, [x2]
 778:	b	ca4 <__udivmodti4+0xca4>
 77c:	ldr	x0, [sp, #304]
 780:	clz	x0, x0
 784:	sxtw	x0, w0
 788:	str	x0, [sp, #464]
 78c:	ldr	x0, [sp, #464]
 790:	cmp	x0, #0x0
 794:	b.ne	83c <__udivmodti4+0x83c>  // b.any
 798:	ldr	x1, [sp, #488]
 79c:	ldr	x0, [sp, #304]
 7a0:	cmp	x1, x0
 7a4:	b.hi	7b8 <__udivmodti4+0x7b8>  // b.pmore
 7a8:	ldr	x1, [sp, #496]
 7ac:	ldr	x0, [sp, #504]
 7b0:	cmp	x1, x0
 7b4:	b.cc	808 <__udivmodti4+0x808>  // b.lo, b.ul, b.last
 7b8:	mov	x0, #0x1                   	// #1
 7bc:	str	x0, [sp, #480]
 7c0:	ldr	x1, [sp, #496]
 7c4:	ldr	x0, [sp, #504]
 7c8:	sub	x0, x1, x0
 7cc:	str	x0, [sp, #184]
 7d0:	ldr	x1, [sp, #488]
 7d4:	ldr	x0, [sp, #304]
 7d8:	sub	x1, x1, x0
 7dc:	ldr	x2, [sp, #184]
 7e0:	ldr	x0, [sp, #496]
 7e4:	cmp	x2, x0
 7e8:	cset	w0, hi  // hi = pmore
 7ec:	and	w0, w0, #0xff
 7f0:	and	x0, x0, #0xff
 7f4:	sub	x0, x1, x0
 7f8:	str	x0, [sp, #488]
 7fc:	ldr	x0, [sp, #184]
 800:	str	x0, [sp, #496]
 804:	b	80c <__udivmodti4+0x80c>
 808:	str	xzr, [sp, #480]
 80c:	str	xzr, [sp, #472]
 810:	ldr	x0, [sp, #8]
 814:	cmp	x0, #0x0
 818:	b.eq	ca4 <__udivmodti4+0xca4>  // b.none
 81c:	ldr	x0, [sp, #496]
 820:	str	x0, [sp, #64]
 824:	ldr	x0, [sp, #488]
 828:	str	x0, [sp, #72]
 82c:	ldp	x0, x1, [sp, #64]
 830:	ldr	x2, [sp, #8]
 834:	stp	x0, x1, [x2]
 838:	b	ca4 <__udivmodti4+0xca4>
 83c:	mov	x1, #0x40                  	// #64
 840:	ldr	x0, [sp, #464]
 844:	sub	x0, x1, x0
 848:	str	x0, [sp, #296]
 84c:	ldr	x0, [sp, #464]
 850:	mov	w1, w0
 854:	ldr	x0, [sp, #304]
 858:	lsl	x1, x0, x1
 85c:	ldr	x0, [sp, #296]
 860:	mov	w2, w0
 864:	ldr	x0, [sp, #504]
 868:	lsr	x0, x0, x2
 86c:	orr	x0, x1, x0
 870:	str	x0, [sp, #304]
 874:	ldr	x0, [sp, #464]
 878:	mov	w1, w0
 87c:	ldr	x0, [sp, #504]
 880:	lsl	x0, x0, x1
 884:	str	x0, [sp, #504]
 888:	ldr	x0, [sp, #296]
 88c:	mov	w1, w0
 890:	ldr	x0, [sp, #488]
 894:	lsr	x0, x0, x1
 898:	str	x0, [sp, #288]
 89c:	ldr	x0, [sp, #464]
 8a0:	mov	w1, w0
 8a4:	ldr	x0, [sp, #488]
 8a8:	lsl	x1, x0, x1
 8ac:	ldr	x0, [sp, #296]
 8b0:	mov	w2, w0
 8b4:	ldr	x0, [sp, #496]
 8b8:	lsr	x0, x0, x2
 8bc:	orr	x0, x1, x0
 8c0:	str	x0, [sp, #488]
 8c4:	ldr	x0, [sp, #464]
 8c8:	mov	w1, w0
 8cc:	ldr	x0, [sp, #496]
 8d0:	lsl	x0, x0, x1
 8d4:	str	x0, [sp, #496]
 8d8:	ldr	x0, [sp, #304]
 8dc:	lsr	x0, x0, #32
 8e0:	str	x0, [sp, #280]
 8e4:	ldr	x0, [sp, #304]
 8e8:	and	x0, x0, #0xffffffff
 8ec:	str	x0, [sp, #272]
 8f0:	ldr	x0, [sp, #288]
 8f4:	ldr	x1, [sp, #280]
 8f8:	udiv	x2, x0, x1
 8fc:	ldr	x1, [sp, #280]
 900:	mul	x1, x2, x1
 904:	sub	x0, x0, x1
 908:	str	x0, [sp, #328]
 90c:	ldr	x1, [sp, #288]
 910:	ldr	x0, [sp, #280]
 914:	udiv	x0, x1, x0
 918:	str	x0, [sp, #344]
 91c:	ldr	x1, [sp, #344]
 920:	ldr	x0, [sp, #272]
 924:	mul	x0, x1, x0
 928:	str	x0, [sp, #264]
 92c:	ldr	x0, [sp, #328]
 930:	lsl	x1, x0, #32
 934:	ldr	x0, [sp, #488]
 938:	lsr	x0, x0, #32
 93c:	orr	x0, x1, x0
 940:	str	x0, [sp, #328]
 944:	ldr	x1, [sp, #328]
 948:	ldr	x0, [sp, #264]
 94c:	cmp	x1, x0
 950:	b.cs	9ac <__udivmodti4+0x9ac>  // b.hs, b.nlast
 954:	ldr	x0, [sp, #344]
 958:	sub	x0, x0, #0x1
 95c:	str	x0, [sp, #344]
 960:	ldr	x1, [sp, #328]
 964:	ldr	x0, [sp, #304]
 968:	add	x0, x1, x0
 96c:	str	x0, [sp, #328]
 970:	ldr	x1, [sp, #328]
 974:	ldr	x0, [sp, #304]
 978:	cmp	x1, x0
 97c:	b.cc	9ac <__udivmodti4+0x9ac>  // b.lo, b.ul, b.last
 980:	ldr	x1, [sp, #328]
 984:	ldr	x0, [sp, #264]
 988:	cmp	x1, x0
 98c:	b.cs	9ac <__udivmodti4+0x9ac>  // b.hs, b.nlast
 990:	ldr	x0, [sp, #344]
 994:	sub	x0, x0, #0x1
 998:	str	x0, [sp, #344]
 99c:	ldr	x1, [sp, #328]
 9a0:	ldr	x0, [sp, #304]
 9a4:	add	x0, x1, x0
 9a8:	str	x0, [sp, #328]
 9ac:	ldr	x1, [sp, #328]
 9b0:	ldr	x0, [sp, #264]
 9b4:	sub	x0, x1, x0
 9b8:	str	x0, [sp, #328]
 9bc:	ldr	x0, [sp, #328]
 9c0:	ldr	x1, [sp, #280]
 9c4:	udiv	x2, x0, x1
 9c8:	ldr	x1, [sp, #280]
 9cc:	mul	x1, x2, x1
 9d0:	sub	x0, x0, x1
 9d4:	str	x0, [sp, #320]
 9d8:	ldr	x1, [sp, #328]
 9dc:	ldr	x0, [sp, #280]
 9e0:	udiv	x0, x1, x0
 9e4:	str	x0, [sp, #336]
 9e8:	ldr	x1, [sp, #336]
 9ec:	ldr	x0, [sp, #272]
 9f0:	mul	x0, x1, x0
 9f4:	str	x0, [sp, #264]
 9f8:	ldr	x0, [sp, #320]
 9fc:	lsl	x1, x0, #32
 a00:	ldr	x0, [sp, #488]
 a04:	and	x0, x0, #0xffffffff
 a08:	orr	x0, x1, x0
 a0c:	str	x0, [sp, #320]
 a10:	ldr	x1, [sp, #320]
 a14:	ldr	x0, [sp, #264]
 a18:	cmp	x1, x0
 a1c:	b.cs	a78 <__udivmodti4+0xa78>  // b.hs, b.nlast
 a20:	ldr	x0, [sp, #336]
 a24:	sub	x0, x0, #0x1
 a28:	str	x0, [sp, #336]
 a2c:	ldr	x1, [sp, #320]
 a30:	ldr	x0, [sp, #304]
 a34:	add	x0, x1, x0
 a38:	str	x0, [sp, #320]
 a3c:	ldr	x1, [sp, #320]
 a40:	ldr	x0, [sp, #304]
 a44:	cmp	x1, x0
 a48:	b.cc	a78 <__udivmodti4+0xa78>  // b.lo, b.ul, b.last
 a4c:	ldr	x1, [sp, #320]
 a50:	ldr	x0, [sp, #264]
 a54:	cmp	x1, x0
 a58:	b.cs	a78 <__udivmodti4+0xa78>  // b.hs, b.nlast
 a5c:	ldr	x0, [sp, #336]
 a60:	sub	x0, x0, #0x1
 a64:	str	x0, [sp, #336]
 a68:	ldr	x1, [sp, #320]
 a6c:	ldr	x0, [sp, #304]
 a70:	add	x0, x1, x0
 a74:	str	x0, [sp, #320]
 a78:	ldr	x1, [sp, #320]
 a7c:	ldr	x0, [sp, #264]
 a80:	sub	x0, x1, x0
 a84:	str	x0, [sp, #320]
 a88:	ldr	x0, [sp, #344]
 a8c:	lsl	x0, x0, #32
 a90:	ldr	x1, [sp, #336]
 a94:	orr	x0, x1, x0
 a98:	str	x0, [sp, #480]
 a9c:	ldr	x0, [sp, #320]
 aa0:	str	x0, [sp, #488]
 aa4:	ldr	x0, [sp, #480]
 aa8:	and	x0, x0, #0xffffffff
 aac:	str	x0, [sp, #256]
 ab0:	ldr	x0, [sp, #480]
 ab4:	lsr	x0, x0, #32
 ab8:	str	x0, [sp, #248]
 abc:	ldr	x0, [sp, #504]
 ac0:	and	x0, x0, #0xffffffff
 ac4:	str	x0, [sp, #240]
 ac8:	ldr	x0, [sp, #504]
 acc:	lsr	x0, x0, #32
 ad0:	str	x0, [sp, #232]
 ad4:	ldr	x1, [sp, #256]
 ad8:	ldr	x0, [sp, #240]
 adc:	mul	x0, x1, x0
 ae0:	str	x0, [sp, #224]
 ae4:	ldr	x1, [sp, #256]
 ae8:	ldr	x0, [sp, #232]
 aec:	mul	x0, x1, x0
 af0:	str	x0, [sp, #216]
 af4:	ldr	x1, [sp, #248]
 af8:	ldr	x0, [sp, #240]
 afc:	mul	x0, x1, x0
 b00:	str	x0, [sp, #208]
 b04:	ldr	x1, [sp, #248]
 b08:	ldr	x0, [sp, #232]
 b0c:	mul	x0, x1, x0
 b10:	str	x0, [sp, #312]
 b14:	ldr	x0, [sp, #224]
 b18:	lsr	x0, x0, #32
 b1c:	ldr	x1, [sp, #216]
 b20:	add	x0, x1, x0
 b24:	str	x0, [sp, #216]
 b28:	ldr	x1, [sp, #216]
 b2c:	ldr	x0, [sp, #208]
 b30:	add	x0, x1, x0
 b34:	str	x0, [sp, #216]
 b38:	ldr	x1, [sp, #216]
 b3c:	ldr	x0, [sp, #208]
 b40:	cmp	x1, x0
 b44:	b.cs	b58 <__udivmodti4+0xb58>  // b.hs, b.nlast
 b48:	ldr	x1, [sp, #312]
 b4c:	mov	x0, #0x100000000           	// #4294967296
 b50:	add	x0, x1, x0
 b54:	str	x0, [sp, #312]
 b58:	ldr	x0, [sp, #216]
 b5c:	lsr	x0, x0, #32
 b60:	ldr	x1, [sp, #312]
 b64:	add	x0, x1, x0
 b68:	str	x0, [sp, #360]
 b6c:	ldr	x0, [sp, #216]
 b70:	and	x0, x0, #0xffffffff
 b74:	lsl	x1, x0, #32
 b78:	ldr	x0, [sp, #224]
 b7c:	and	x0, x0, #0xffffffff
 b80:	add	x0, x1, x0
 b84:	str	x0, [sp, #352]
 b88:	ldr	x1, [sp, #360]
 b8c:	ldr	x0, [sp, #488]
 b90:	cmp	x1, x0
 b94:	b.hi	bb8 <__udivmodti4+0xbb8>  // b.pmore
 b98:	ldr	x1, [sp, #360]
 b9c:	ldr	x0, [sp, #488]
 ba0:	cmp	x1, x0
 ba4:	b.ne	c08 <__udivmodti4+0xc08>  // b.any
 ba8:	ldr	x1, [sp, #352]
 bac:	ldr	x0, [sp, #496]
 bb0:	cmp	x1, x0
 bb4:	b.ls	c08 <__udivmodti4+0xc08>  // b.plast
 bb8:	ldr	x0, [sp, #480]
 bbc:	sub	x0, x0, #0x1
 bc0:	str	x0, [sp, #480]
 bc4:	ldr	x1, [sp, #352]
 bc8:	ldr	x0, [sp, #504]
 bcc:	sub	x0, x1, x0
 bd0:	str	x0, [sp, #200]
 bd4:	ldr	x1, [sp, #360]
 bd8:	ldr	x0, [sp, #304]
 bdc:	sub	x1, x1, x0
 be0:	ldr	x2, [sp, #200]
 be4:	ldr	x0, [sp, #352]
 be8:	cmp	x2, x0
 bec:	cset	w0, hi  // hi = pmore
 bf0:	and	w0, w0, #0xff
 bf4:	and	x0, x0, #0xff
 bf8:	sub	x0, x1, x0
 bfc:	str	x0, [sp, #360]
 c00:	ldr	x0, [sp, #200]
 c04:	str	x0, [sp, #352]
 c08:	str	xzr, [sp, #472]
 c0c:	ldr	x0, [sp, #8]
 c10:	cmp	x0, #0x0
 c14:	b.eq	ca4 <__udivmodti4+0xca4>  // b.none
 c18:	ldr	x1, [sp, #496]
 c1c:	ldr	x0, [sp, #352]
 c20:	sub	x0, x1, x0
 c24:	str	x0, [sp, #192]
 c28:	ldr	x1, [sp, #488]
 c2c:	ldr	x0, [sp, #360]
 c30:	sub	x1, x1, x0
 c34:	ldr	x2, [sp, #192]
 c38:	ldr	x0, [sp, #496]
 c3c:	cmp	x2, x0
 c40:	cset	w0, hi  // hi = pmore
 c44:	and	w0, w0, #0xff
 c48:	and	x0, x0, #0xff
 c4c:	sub	x0, x1, x0
 c50:	str	x0, [sp, #488]
 c54:	ldr	x0, [sp, #192]
 c58:	str	x0, [sp, #496]
 c5c:	ldr	x0, [sp, #296]
 c60:	mov	w1, w0
 c64:	ldr	x0, [sp, #488]
 c68:	lsl	x1, x0, x1
 c6c:	ldr	x0, [sp, #464]
 c70:	mov	w2, w0
 c74:	ldr	x0, [sp, #496]
 c78:	lsr	x0, x0, x2
 c7c:	orr	x0, x1, x0
 c80:	str	x0, [sp, #64]
 c84:	ldr	x0, [sp, #464]
 c88:	mov	w1, w0
 c8c:	ldr	x0, [sp, #488]
 c90:	lsr	x0, x0, x1
 c94:	str	x0, [sp, #72]
 c98:	ldp	x0, x1, [sp, #64]
 c9c:	ldr	x2, [sp, #8]
 ca0:	stp	x0, x1, [x2]
 ca4:	ldr	x0, [sp, #480]
 ca8:	str	x0, [sp, #48]
 cac:	ldr	x0, [sp, #472]
 cb0:	str	x0, [sp, #56]
 cb4:	ldp	x0, x1, [sp, #48]
 cb8:	add	sp, sp, #0x200
 cbc:	ret

_udiv_w_sdiv.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__udiv_w_sdiv>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #24]
   8:	str	x1, [sp, #16]
   c:	str	x2, [sp, #8]
  10:	str	x3, [sp]
  14:	mov	x0, #0x0                   	// #0
  18:	add	sp, sp, #0x20
  1c:	ret

sync-cache.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__aarch64_sync_cache_range>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #8]
   8:	str	x1, [sp]
   c:	adrp	x0, 0 <__aarch64_sync_cache_range>
  10:	add	x0, x0, #0x0
  14:	ldr	w0, [x0]
  18:	cmp	w0, #0x0
  1c:	b.ne	30 <__aarch64_sync_cache_range+0x30>  // b.any
  20:	mrs	x1, ctr_el0
  24:	adrp	x0, 0 <__aarch64_sync_cache_range>
  28:	add	x0, x0, #0x0
  2c:	str	w1, [x0]
  30:	adrp	x0, 0 <__aarch64_sync_cache_range>
  34:	add	x0, x0, #0x0
  38:	ldr	w0, [x0]
  3c:	and	w0, w0, #0xf
  40:	mov	w1, #0x4                   	// #4
  44:	lsl	w0, w1, w0
  48:	str	w0, [sp, #20]
  4c:	adrp	x0, 0 <__aarch64_sync_cache_range>
  50:	add	x0, x0, #0x0
  54:	ldr	w0, [x0]
  58:	lsr	w0, w0, #16
  5c:	and	w0, w0, #0xf
  60:	mov	w1, #0x4                   	// #4
  64:	lsl	w0, w1, w0
  68:	str	w0, [sp, #16]
  6c:	ldr	w0, [sp, #16]
  70:	sub	w0, w0, #0x1
  74:	mov	w0, w0
  78:	mvn	x1, x0
  7c:	ldr	x0, [sp, #8]
  80:	and	x0, x1, x0
  84:	str	x0, [sp, #24]
  88:	b	a4 <__aarch64_sync_cache_range+0xa4>
  8c:	ldr	x0, [sp, #24]
  90:	dc	cvau, x0
  94:	ldr	w0, [sp, #16]
  98:	ldr	x1, [sp, #24]
  9c:	add	x0, x1, x0
  a0:	str	x0, [sp, #24]
  a4:	ldr	x1, [sp, #24]
  a8:	ldr	x0, [sp]
  ac:	cmp	x1, x0
  b0:	b.cc	8c <__aarch64_sync_cache_range+0x8c>  // b.lo, b.ul, b.last
  b4:	dsb	ish
  b8:	ldr	w0, [sp, #20]
  bc:	sub	w0, w0, #0x1
  c0:	mov	w0, w0
  c4:	mvn	x1, x0
  c8:	ldr	x0, [sp, #8]
  cc:	and	x0, x1, x0
  d0:	str	x0, [sp, #24]
  d4:	b	f0 <__aarch64_sync_cache_range+0xf0>
  d8:	ldr	x0, [sp, #24]
  dc:	ic	ivau, x0
  e0:	ldr	w0, [sp, #20]
  e4:	ldr	x1, [sp, #24]
  e8:	add	x0, x1, x0
  ec:	str	x0, [sp, #24]
  f0:	ldr	x1, [sp, #24]
  f4:	ldr	x0, [sp]
  f8:	cmp	x1, x0
  fc:	b.cc	d8 <__aarch64_sync_cache_range+0xd8>  // b.lo, b.ul, b.last
 100:	dsb	ish
 104:	isb
 108:	nop
 10c:	add	sp, sp, #0x20
 110:	ret

sfp-exceptions.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__sfp_handle_exceptions>:
   0:	sub	sp, sp, #0x30
   4:	str	w0, [sp, #12]
   8:	mov	w0, #0x7f7fffff            	// #2139095039
   c:	fmov	s0, w0
  10:	str	s0, [sp, #44]
  14:	movi	v0.2s, #0x80, lsl #16
  18:	str	s0, [sp, #40]
  1c:	mov	w0, #0xc5ae                	// #50606
  20:	movk	w0, #0x749d, lsl #16
  24:	fmov	s0, w0
  28:	str	s0, [sp, #36]
  2c:	str	wzr, [sp, #32]
  30:	fmov	s0, #1.000000000000000000e+00
  34:	str	s0, [sp, #28]
  38:	ldr	w0, [sp, #12]
  3c:	and	w0, w0, #0x1
  40:	cmp	w0, #0x0
  44:	b.eq	58 <__sfp_handle_exceptions+0x58>  // b.none
  48:	ldr	s1, [sp, #32]
  4c:	fdiv	s0, s1, s1
  50:	mrs	x0, fpsr
  54:	str	w0, [sp, #24]
  58:	ldr	w0, [sp, #12]
  5c:	and	w0, w0, #0x2
  60:	cmp	w0, #0x0
  64:	b.eq	7c <__sfp_handle_exceptions+0x7c>  // b.none
  68:	ldr	s1, [sp, #28]
  6c:	ldr	s2, [sp, #32]
  70:	fdiv	s0, s1, s2
  74:	mrs	x0, fpsr
  78:	str	w0, [sp, #24]
  7c:	ldr	w0, [sp, #12]
  80:	and	w0, w0, #0x4
  84:	cmp	w0, #0x0
  88:	b.eq	a0 <__sfp_handle_exceptions+0xa0>  // b.none
  8c:	ldr	s1, [sp, #44]
  90:	ldr	s2, [sp, #36]
  94:	fadd	s0, s1, s2
  98:	mrs	x0, fpsr
  9c:	str	w0, [sp, #24]
  a0:	ldr	w0, [sp, #12]
  a4:	and	w0, w0, #0x8
  a8:	cmp	w0, #0x0
  ac:	b.eq	c0 <__sfp_handle_exceptions+0xc0>  // b.none
  b0:	ldr	s1, [sp, #40]
  b4:	fmul	s0, s1, s1
  b8:	mrs	x0, fpsr
  bc:	str	w0, [sp, #24]
  c0:	ldr	w0, [sp, #12]
  c4:	and	w0, w0, #0x10
  c8:	cmp	w0, #0x0
  cc:	b.eq	e4 <__sfp_handle_exceptions+0xe4>  // b.none
  d0:	ldr	s1, [sp, #44]
  d4:	ldr	s2, [sp, #28]
  d8:	fsub	s0, s1, s2
  dc:	mrs	x0, fpsr
  e0:	str	w0, [sp, #24]
  e4:	nop
  e8:	add	sp, sp, #0x30
  ec:	ret

addtf3.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__addtf3>:
       0:	stp	x29, x30, [sp, #-400]!
       4:	mov	x29, sp
       8:	str	q0, [sp, #32]
       c:	str	q1, [sp, #16]
      10:	str	wzr, [sp, #356]
      14:	str	xzr, [sp, #304]
      18:	mrs	x0, fpcr
      1c:	str	x0, [sp, #304]
      20:	ldr	q0, [sp, #32]
      24:	str	q0, [sp, #80]
      28:	ldr	x0, [sp, #80]
      2c:	str	x0, [sp, #360]
      30:	ldr	x0, [sp, #88]
      34:	ubfx	x0, x0, #0, #48
      38:	str	x0, [sp, #376]
      3c:	ldrh	w0, [sp, #94]
      40:	ubfx	x0, x0, #0, #15
      44:	and	w0, w0, #0xffff
      48:	and	x0, x0, #0xffff
      4c:	str	x0, [sp, #296]
      50:	ldrb	w0, [sp, #95]
      54:	ubfx	x0, x0, #7, #1
      58:	and	w0, w0, #0xff
      5c:	and	x0, x0, #0xff
      60:	str	x0, [sp, #288]
      64:	ldr	x0, [sp, #376]
      68:	lsl	x1, x0, #3
      6c:	ldr	x0, [sp, #360]
      70:	lsr	x0, x0, #61
      74:	orr	x0, x1, x0
      78:	str	x0, [sp, #376]
      7c:	ldr	x0, [sp, #360]
      80:	lsl	x0, x0, #3
      84:	str	x0, [sp, #360]
      88:	ldr	q0, [sp, #16]
      8c:	str	q0, [sp, #64]
      90:	ldr	x0, [sp, #64]
      94:	str	x0, [sp, #368]
      98:	ldr	x0, [sp, #72]
      9c:	ubfx	x0, x0, #0, #48
      a0:	str	x0, [sp, #392]
      a4:	ldrh	w0, [sp, #78]
      a8:	ubfx	x0, x0, #0, #15
      ac:	and	w0, w0, #0xffff
      b0:	and	x0, x0, #0xffff
      b4:	str	x0, [sp, #280]
      b8:	ldrb	w0, [sp, #79]
      bc:	ubfx	x0, x0, #7, #1
      c0:	and	w0, w0, #0xff
      c4:	and	x0, x0, #0xff
      c8:	str	x0, [sp, #272]
      cc:	ldr	x0, [sp, #392]
      d0:	lsl	x1, x0, #3
      d4:	ldr	x0, [sp, #368]
      d8:	lsr	x0, x0, #61
      dc:	orr	x0, x1, x0
      e0:	str	x0, [sp, #392]
      e4:	ldr	x0, [sp, #368]
      e8:	lsl	x0, x0, #3
      ec:	str	x0, [sp, #368]
      f0:	ldr	x1, [sp, #288]
      f4:	ldr	x0, [sp, #272]
      f8:	cmp	x1, x0
      fc:	b.ne	be4 <__addtf3+0xbe4>  // b.any
     100:	ldr	x0, [sp, #288]
     104:	str	x0, [sp, #384]
     108:	ldr	x0, [sp, #296]
     10c:	mov	w1, w0
     110:	ldr	x0, [sp, #280]
     114:	sub	w0, w1, w0
     118:	str	w0, [sp, #324]
     11c:	ldr	w0, [sp, #324]
     120:	cmp	w0, #0x0
     124:	b.le	424 <__addtf3+0x424>
     128:	ldr	x0, [sp, #296]
     12c:	str	x0, [sp, #344]
     130:	ldr	x0, [sp, #280]
     134:	cmp	x0, #0x0
     138:	b.ne	268 <__addtf3+0x268>  // b.any
     13c:	ldr	x1, [sp, #392]
     140:	ldr	x0, [sp, #368]
     144:	orr	x0, x1, x0
     148:	cmp	x0, #0x0
     14c:	b.ne	1a4 <__addtf3+0x1a4>  // b.any
     150:	ldr	x1, [sp, #296]
     154:	mov	x0, #0x7fff                	// #32767
     158:	cmp	x1, x0
     15c:	b.ne	190 <__addtf3+0x190>  // b.any
     160:	ldr	x1, [sp, #376]
     164:	ldr	x0, [sp, #360]
     168:	orr	x0, x1, x0
     16c:	cmp	x0, #0x0
     170:	b.eq	190 <__addtf3+0x190>  // b.none
     174:	ldr	x0, [sp, #376]
     178:	and	x0, x0, #0x4000000000000
     17c:	cmp	x0, #0x0
     180:	b.ne	190 <__addtf3+0x190>  // b.any
     184:	ldr	w0, [sp, #356]
     188:	orr	w0, w0, #0x1
     18c:	str	w0, [sp, #356]
     190:	ldr	x0, [sp, #360]
     194:	str	x0, [sp, #336]
     198:	ldr	x0, [sp, #376]
     19c:	str	x0, [sp, #328]
     1a0:	b	18b8 <__addtf3+0x18b8>
     1a4:	ldr	w0, [sp, #324]
     1a8:	sub	w0, w0, #0x1
     1ac:	str	w0, [sp, #324]
     1b0:	ldr	w0, [sp, #324]
     1b4:	cmp	w0, #0x0
     1b8:	b.ne	204 <__addtf3+0x204>  // b.any
     1bc:	ldr	x1, [sp, #360]
     1c0:	ldr	x0, [sp, #368]
     1c4:	add	x0, x1, x0
     1c8:	str	x0, [sp, #160]
     1cc:	ldr	x1, [sp, #376]
     1d0:	ldr	x0, [sp, #392]
     1d4:	add	x1, x1, x0
     1d8:	ldr	x2, [sp, #160]
     1dc:	ldr	x0, [sp, #360]
     1e0:	cmp	x2, x0
     1e4:	cset	w0, cc  // cc = lo, ul, last
     1e8:	and	w0, w0, #0xff
     1ec:	and	x0, x0, #0xff
     1f0:	add	x0, x1, x0
     1f4:	str	x0, [sp, #328]
     1f8:	ldr	x0, [sp, #160]
     1fc:	str	x0, [sp, #336]
     200:	b	aec <__addtf3+0xaec>
     204:	ldr	x1, [sp, #296]
     208:	mov	x0, #0x7fff                	// #32767
     20c:	cmp	x1, x0
     210:	b.ne	2dc <__addtf3+0x2dc>  // b.any
     214:	ldr	x1, [sp, #296]
     218:	mov	x0, #0x7fff                	// #32767
     21c:	cmp	x1, x0
     220:	b.ne	254 <__addtf3+0x254>  // b.any
     224:	ldr	x1, [sp, #376]
     228:	ldr	x0, [sp, #360]
     22c:	orr	x0, x1, x0
     230:	cmp	x0, #0x0
     234:	b.eq	254 <__addtf3+0x254>  // b.none
     238:	ldr	x0, [sp, #376]
     23c:	and	x0, x0, #0x4000000000000
     240:	cmp	x0, #0x0
     244:	b.ne	254 <__addtf3+0x254>  // b.any
     248:	ldr	w0, [sp, #356]
     24c:	orr	w0, w0, #0x1
     250:	str	w0, [sp, #356]
     254:	ldr	x0, [sp, #360]
     258:	str	x0, [sp, #336]
     25c:	ldr	x0, [sp, #376]
     260:	str	x0, [sp, #328]
     264:	b	18b8 <__addtf3+0x18b8>
     268:	ldr	x1, [sp, #296]
     26c:	mov	x0, #0x7fff                	// #32767
     270:	cmp	x1, x0
     274:	b.ne	2cc <__addtf3+0x2cc>  // b.any
     278:	ldr	x1, [sp, #296]
     27c:	mov	x0, #0x7fff                	// #32767
     280:	cmp	x1, x0
     284:	b.ne	2b8 <__addtf3+0x2b8>  // b.any
     288:	ldr	x1, [sp, #376]
     28c:	ldr	x0, [sp, #360]
     290:	orr	x0, x1, x0
     294:	cmp	x0, #0x0
     298:	b.eq	2b8 <__addtf3+0x2b8>  // b.none
     29c:	ldr	x0, [sp, #376]
     2a0:	and	x0, x0, #0x4000000000000
     2a4:	cmp	x0, #0x0
     2a8:	b.ne	2b8 <__addtf3+0x2b8>  // b.any
     2ac:	ldr	w0, [sp, #356]
     2b0:	orr	w0, w0, #0x1
     2b4:	str	w0, [sp, #356]
     2b8:	ldr	x0, [sp, #360]
     2bc:	str	x0, [sp, #336]
     2c0:	ldr	x0, [sp, #376]
     2c4:	str	x0, [sp, #328]
     2c8:	b	18b8 <__addtf3+0x18b8>
     2cc:	ldr	x0, [sp, #392]
     2d0:	orr	x0, x0, #0x8000000000000
     2d4:	str	x0, [sp, #392]
     2d8:	b	2e0 <__addtf3+0x2e0>
     2dc:	nop
     2e0:	ldr	w0, [sp, #324]
     2e4:	cmp	w0, #0x74
     2e8:	b.gt	3bc <__addtf3+0x3bc>
     2ec:	ldr	w0, [sp, #324]
     2f0:	cmp	w0, #0x3f
     2f4:	b.gt	35c <__addtf3+0x35c>
     2f8:	mov	w1, #0x40                  	// #64
     2fc:	ldr	w0, [sp, #324]
     300:	sub	w0, w1, w0
     304:	ldr	x1, [sp, #392]
     308:	lsl	x1, x1, x0
     30c:	ldr	w0, [sp, #324]
     310:	ldr	x2, [sp, #368]
     314:	lsr	x0, x2, x0
     318:	orr	x1, x1, x0
     31c:	mov	w2, #0x40                  	// #64
     320:	ldr	w0, [sp, #324]
     324:	sub	w0, w2, w0
     328:	ldr	x2, [sp, #368]
     32c:	lsl	x0, x2, x0
     330:	cmp	x0, #0x0
     334:	cset	w0, ne  // ne = any
     338:	and	w0, w0, #0xff
     33c:	sxtw	x0, w0
     340:	orr	x0, x1, x0
     344:	str	x0, [sp, #368]
     348:	ldr	w0, [sp, #324]
     34c:	ldr	x1, [sp, #392]
     350:	lsr	x0, x1, x0
     354:	str	x0, [sp, #392]
     358:	b	3dc <__addtf3+0x3dc>
     35c:	ldr	w0, [sp, #324]
     360:	sub	w0, w0, #0x40
     364:	ldr	x1, [sp, #392]
     368:	lsr	x1, x1, x0
     36c:	ldr	w0, [sp, #324]
     370:	cmp	w0, #0x40
     374:	b.eq	390 <__addtf3+0x390>  // b.none
     378:	mov	w2, #0x80                  	// #128
     37c:	ldr	w0, [sp, #324]
     380:	sub	w0, w2, w0
     384:	ldr	x2, [sp, #392]
     388:	lsl	x0, x2, x0
     38c:	b	394 <__addtf3+0x394>
     390:	mov	x0, #0x0                   	// #0
     394:	ldr	x2, [sp, #368]
     398:	orr	x0, x0, x2
     39c:	cmp	x0, #0x0
     3a0:	cset	w0, ne  // ne = any
     3a4:	and	w0, w0, #0xff
     3a8:	and	x0, x0, #0xff
     3ac:	orr	x0, x1, x0
     3b0:	str	x0, [sp, #368]
     3b4:	str	xzr, [sp, #392]
     3b8:	b	3dc <__addtf3+0x3dc>
     3bc:	ldr	x1, [sp, #392]
     3c0:	ldr	x0, [sp, #368]
     3c4:	orr	x0, x1, x0
     3c8:	cmp	x0, #0x0
     3cc:	b.eq	3dc <__addtf3+0x3dc>  // b.none
     3d0:	mov	x0, #0x1                   	// #1
     3d4:	str	x0, [sp, #368]
     3d8:	str	xzr, [sp, #392]
     3dc:	ldr	x1, [sp, #360]
     3e0:	ldr	x0, [sp, #368]
     3e4:	add	x0, x1, x0
     3e8:	str	x0, [sp, #152]
     3ec:	ldr	x1, [sp, #376]
     3f0:	ldr	x0, [sp, #392]
     3f4:	add	x1, x1, x0
     3f8:	ldr	x2, [sp, #152]
     3fc:	ldr	x0, [sp, #360]
     400:	cmp	x2, x0
     404:	cset	w0, cc  // cc = lo, ul, last
     408:	and	w0, w0, #0xff
     40c:	and	x0, x0, #0xff
     410:	add	x0, x1, x0
     414:	str	x0, [sp, #328]
     418:	ldr	x0, [sp, #152]
     41c:	str	x0, [sp, #336]
     420:	b	aec <__addtf3+0xaec>
     424:	ldr	w0, [sp, #324]
     428:	cmp	w0, #0x0
     42c:	b.ge	738 <__addtf3+0x738>  // b.tcont
     430:	ldr	w0, [sp, #324]
     434:	neg	w0, w0
     438:	str	w0, [sp, #324]
     43c:	ldr	x0, [sp, #280]
     440:	str	x0, [sp, #344]
     444:	ldr	x0, [sp, #296]
     448:	cmp	x0, #0x0
     44c:	b.ne	57c <__addtf3+0x57c>  // b.any
     450:	ldr	x1, [sp, #376]
     454:	ldr	x0, [sp, #360]
     458:	orr	x0, x1, x0
     45c:	cmp	x0, #0x0
     460:	b.ne	4b8 <__addtf3+0x4b8>  // b.any
     464:	ldr	x1, [sp, #280]
     468:	mov	x0, #0x7fff                	// #32767
     46c:	cmp	x1, x0
     470:	b.ne	4a4 <__addtf3+0x4a4>  // b.any
     474:	ldr	x1, [sp, #392]
     478:	ldr	x0, [sp, #368]
     47c:	orr	x0, x1, x0
     480:	cmp	x0, #0x0
     484:	b.eq	4a4 <__addtf3+0x4a4>  // b.none
     488:	ldr	x0, [sp, #392]
     48c:	and	x0, x0, #0x4000000000000
     490:	cmp	x0, #0x0
     494:	b.ne	4a4 <__addtf3+0x4a4>  // b.any
     498:	ldr	w0, [sp, #356]
     49c:	orr	w0, w0, #0x1
     4a0:	str	w0, [sp, #356]
     4a4:	ldr	x0, [sp, #368]
     4a8:	str	x0, [sp, #336]
     4ac:	ldr	x0, [sp, #392]
     4b0:	str	x0, [sp, #328]
     4b4:	b	18b8 <__addtf3+0x18b8>
     4b8:	ldr	w0, [sp, #324]
     4bc:	sub	w0, w0, #0x1
     4c0:	str	w0, [sp, #324]
     4c4:	ldr	w0, [sp, #324]
     4c8:	cmp	w0, #0x0
     4cc:	b.ne	518 <__addtf3+0x518>  // b.any
     4d0:	ldr	x1, [sp, #368]
     4d4:	ldr	x0, [sp, #360]
     4d8:	add	x0, x1, x0
     4dc:	str	x0, [sp, #176]
     4e0:	ldr	x1, [sp, #392]
     4e4:	ldr	x0, [sp, #376]
     4e8:	add	x1, x1, x0
     4ec:	ldr	x2, [sp, #176]
     4f0:	ldr	x0, [sp, #368]
     4f4:	cmp	x2, x0
     4f8:	cset	w0, cc  // cc = lo, ul, last
     4fc:	and	w0, w0, #0xff
     500:	and	x0, x0, #0xff
     504:	add	x0, x1, x0
     508:	str	x0, [sp, #328]
     50c:	ldr	x0, [sp, #176]
     510:	str	x0, [sp, #336]
     514:	b	aec <__addtf3+0xaec>
     518:	ldr	x1, [sp, #280]
     51c:	mov	x0, #0x7fff                	// #32767
     520:	cmp	x1, x0
     524:	b.ne	5f0 <__addtf3+0x5f0>  // b.any
     528:	ldr	x1, [sp, #280]
     52c:	mov	x0, #0x7fff                	// #32767
     530:	cmp	x1, x0
     534:	b.ne	568 <__addtf3+0x568>  // b.any
     538:	ldr	x1, [sp, #392]
     53c:	ldr	x0, [sp, #368]
     540:	orr	x0, x1, x0
     544:	cmp	x0, #0x0
     548:	b.eq	568 <__addtf3+0x568>  // b.none
     54c:	ldr	x0, [sp, #392]
     550:	and	x0, x0, #0x4000000000000
     554:	cmp	x0, #0x0
     558:	b.ne	568 <__addtf3+0x568>  // b.any
     55c:	ldr	w0, [sp, #356]
     560:	orr	w0, w0, #0x1
     564:	str	w0, [sp, #356]
     568:	ldr	x0, [sp, #368]
     56c:	str	x0, [sp, #336]
     570:	ldr	x0, [sp, #392]
     574:	str	x0, [sp, #328]
     578:	b	18b8 <__addtf3+0x18b8>
     57c:	ldr	x1, [sp, #280]
     580:	mov	x0, #0x7fff                	// #32767
     584:	cmp	x1, x0
     588:	b.ne	5e0 <__addtf3+0x5e0>  // b.any
     58c:	ldr	x1, [sp, #280]
     590:	mov	x0, #0x7fff                	// #32767
     594:	cmp	x1, x0
     598:	b.ne	5cc <__addtf3+0x5cc>  // b.any
     59c:	ldr	x1, [sp, #392]
     5a0:	ldr	x0, [sp, #368]
     5a4:	orr	x0, x1, x0
     5a8:	cmp	x0, #0x0
     5ac:	b.eq	5cc <__addtf3+0x5cc>  // b.none
     5b0:	ldr	x0, [sp, #392]
     5b4:	and	x0, x0, #0x4000000000000
     5b8:	cmp	x0, #0x0
     5bc:	b.ne	5cc <__addtf3+0x5cc>  // b.any
     5c0:	ldr	w0, [sp, #356]
     5c4:	orr	w0, w0, #0x1
     5c8:	str	w0, [sp, #356]
     5cc:	ldr	x0, [sp, #368]
     5d0:	str	x0, [sp, #336]
     5d4:	ldr	x0, [sp, #392]
     5d8:	str	x0, [sp, #328]
     5dc:	b	18b8 <__addtf3+0x18b8>
     5e0:	ldr	x0, [sp, #376]
     5e4:	orr	x0, x0, #0x8000000000000
     5e8:	str	x0, [sp, #376]
     5ec:	b	5f4 <__addtf3+0x5f4>
     5f0:	nop
     5f4:	ldr	w0, [sp, #324]
     5f8:	cmp	w0, #0x74
     5fc:	b.gt	6d0 <__addtf3+0x6d0>
     600:	ldr	w0, [sp, #324]
     604:	cmp	w0, #0x3f
     608:	b.gt	670 <__addtf3+0x670>
     60c:	mov	w1, #0x40                  	// #64
     610:	ldr	w0, [sp, #324]
     614:	sub	w0, w1, w0
     618:	ldr	x1, [sp, #376]
     61c:	lsl	x1, x1, x0
     620:	ldr	w0, [sp, #324]
     624:	ldr	x2, [sp, #360]
     628:	lsr	x0, x2, x0
     62c:	orr	x1, x1, x0
     630:	mov	w2, #0x40                  	// #64
     634:	ldr	w0, [sp, #324]
     638:	sub	w0, w2, w0
     63c:	ldr	x2, [sp, #360]
     640:	lsl	x0, x2, x0
     644:	cmp	x0, #0x0
     648:	cset	w0, ne  // ne = any
     64c:	and	w0, w0, #0xff
     650:	sxtw	x0, w0
     654:	orr	x0, x1, x0
     658:	str	x0, [sp, #360]
     65c:	ldr	w0, [sp, #324]
     660:	ldr	x1, [sp, #376]
     664:	lsr	x0, x1, x0
     668:	str	x0, [sp, #376]
     66c:	b	6f0 <__addtf3+0x6f0>
     670:	ldr	w0, [sp, #324]
     674:	sub	w0, w0, #0x40
     678:	ldr	x1, [sp, #376]
     67c:	lsr	x1, x1, x0
     680:	ldr	w0, [sp, #324]
     684:	cmp	w0, #0x40
     688:	b.eq	6a4 <__addtf3+0x6a4>  // b.none
     68c:	mov	w2, #0x80                  	// #128
     690:	ldr	w0, [sp, #324]
     694:	sub	w0, w2, w0
     698:	ldr	x2, [sp, #376]
     69c:	lsl	x0, x2, x0
     6a0:	b	6a8 <__addtf3+0x6a8>
     6a4:	mov	x0, #0x0                   	// #0
     6a8:	ldr	x2, [sp, #360]
     6ac:	orr	x0, x0, x2
     6b0:	cmp	x0, #0x0
     6b4:	cset	w0, ne  // ne = any
     6b8:	and	w0, w0, #0xff
     6bc:	and	x0, x0, #0xff
     6c0:	orr	x0, x1, x0
     6c4:	str	x0, [sp, #360]
     6c8:	str	xzr, [sp, #376]
     6cc:	b	6f0 <__addtf3+0x6f0>
     6d0:	ldr	x1, [sp, #376]
     6d4:	ldr	x0, [sp, #360]
     6d8:	orr	x0, x1, x0
     6dc:	cmp	x0, #0x0
     6e0:	b.eq	6f0 <__addtf3+0x6f0>  // b.none
     6e4:	mov	x0, #0x1                   	// #1
     6e8:	str	x0, [sp, #360]
     6ec:	str	xzr, [sp, #376]
     6f0:	ldr	x1, [sp, #368]
     6f4:	ldr	x0, [sp, #360]
     6f8:	add	x0, x1, x0
     6fc:	str	x0, [sp, #168]
     700:	ldr	x1, [sp, #392]
     704:	ldr	x0, [sp, #376]
     708:	add	x1, x1, x0
     70c:	ldr	x2, [sp, #168]
     710:	ldr	x0, [sp, #368]
     714:	cmp	x2, x0
     718:	cset	w0, cc  // cc = lo, ul, last
     71c:	and	w0, w0, #0xff
     720:	and	x0, x0, #0xff
     724:	add	x0, x1, x0
     728:	str	x0, [sp, #328]
     72c:	ldr	x0, [sp, #168]
     730:	str	x0, [sp, #336]
     734:	b	aec <__addtf3+0xaec>
     738:	ldr	x0, [sp, #296]
     73c:	add	x0, x0, #0x1
     740:	and	x0, x0, #0x7ffe
     744:	cmp	x0, #0x0
     748:	b.ne	9cc <__addtf3+0x9cc>  // b.any
     74c:	ldr	x0, [sp, #296]
     750:	cmp	x0, #0x0
     754:	b.ne	828 <__addtf3+0x828>  // b.any
     758:	str	xzr, [sp, #344]
     75c:	ldr	x1, [sp, #376]
     760:	ldr	x0, [sp, #360]
     764:	orr	x0, x1, x0
     768:	cmp	x0, #0x0
     76c:	b.ne	794 <__addtf3+0x794>  // b.any
     770:	ldr	x1, [sp, #392]
     774:	ldr	x0, [sp, #368]
     778:	orr	x0, x1, x0
     77c:	cmp	x0, #0x0
     780:	ldr	x0, [sp, #368]
     784:	str	x0, [sp, #336]
     788:	ldr	x0, [sp, #392]
     78c:	str	x0, [sp, #328]
     790:	b	18b8 <__addtf3+0x18b8>
     794:	ldr	x1, [sp, #392]
     798:	ldr	x0, [sp, #368]
     79c:	orr	x0, x1, x0
     7a0:	cmp	x0, #0x0
     7a4:	b.ne	7bc <__addtf3+0x7bc>  // b.any
     7a8:	ldr	x0, [sp, #360]
     7ac:	str	x0, [sp, #336]
     7b0:	ldr	x0, [sp, #376]
     7b4:	str	x0, [sp, #328]
     7b8:	b	18b8 <__addtf3+0x18b8>
     7bc:	ldr	x1, [sp, #360]
     7c0:	ldr	x0, [sp, #368]
     7c4:	add	x0, x1, x0
     7c8:	str	x0, [sp, #184]
     7cc:	ldr	x1, [sp, #376]
     7d0:	ldr	x0, [sp, #392]
     7d4:	add	x1, x1, x0
     7d8:	ldr	x2, [sp, #184]
     7dc:	ldr	x0, [sp, #360]
     7e0:	cmp	x2, x0
     7e4:	cset	w0, cc  // cc = lo, ul, last
     7e8:	and	w0, w0, #0xff
     7ec:	and	x0, x0, #0xff
     7f0:	add	x0, x1, x0
     7f4:	str	x0, [sp, #328]
     7f8:	ldr	x0, [sp, #184]
     7fc:	str	x0, [sp, #336]
     800:	ldr	x0, [sp, #328]
     804:	and	x0, x0, #0x8000000000000
     808:	cmp	x0, #0x0
     80c:	b.eq	1894 <__addtf3+0x1894>  // b.none
     810:	ldr	x0, [sp, #328]
     814:	and	x0, x0, #0xfff7ffffffffffff
     818:	str	x0, [sp, #328]
     81c:	mov	x0, #0x1                   	// #1
     820:	str	x0, [sp, #344]
     824:	b	1894 <__addtf3+0x1894>
     828:	ldr	x1, [sp, #296]
     82c:	mov	x0, #0x7fff                	// #32767
     830:	cmp	x1, x0
     834:	b.ne	868 <__addtf3+0x868>  // b.any
     838:	ldr	x1, [sp, #376]
     83c:	ldr	x0, [sp, #360]
     840:	orr	x0, x1, x0
     844:	cmp	x0, #0x0
     848:	b.eq	868 <__addtf3+0x868>  // b.none
     84c:	ldr	x0, [sp, #376]
     850:	and	x0, x0, #0x4000000000000
     854:	cmp	x0, #0x0
     858:	b.ne	868 <__addtf3+0x868>  // b.any
     85c:	ldr	w0, [sp, #356]
     860:	orr	w0, w0, #0x1
     864:	str	w0, [sp, #356]
     868:	ldr	x1, [sp, #280]
     86c:	mov	x0, #0x7fff                	// #32767
     870:	cmp	x1, x0
     874:	b.ne	8a8 <__addtf3+0x8a8>  // b.any
     878:	ldr	x1, [sp, #392]
     87c:	ldr	x0, [sp, #368]
     880:	orr	x0, x1, x0
     884:	cmp	x0, #0x0
     888:	b.eq	8a8 <__addtf3+0x8a8>  // b.none
     88c:	ldr	x0, [sp, #392]
     890:	and	x0, x0, #0x4000000000000
     894:	cmp	x0, #0x0
     898:	b.ne	8a8 <__addtf3+0x8a8>  // b.any
     89c:	ldr	w0, [sp, #356]
     8a0:	orr	w0, w0, #0x1
     8a4:	str	w0, [sp, #356]
     8a8:	mov	x0, #0x7fff                	// #32767
     8ac:	str	x0, [sp, #344]
     8b0:	ldr	x1, [sp, #376]
     8b4:	ldr	x0, [sp, #360]
     8b8:	orr	x0, x1, x0
     8bc:	cmp	x0, #0x0
     8c0:	b.ne	8d8 <__addtf3+0x8d8>  // b.any
     8c4:	ldr	x0, [sp, #368]
     8c8:	str	x0, [sp, #336]
     8cc:	ldr	x0, [sp, #392]
     8d0:	str	x0, [sp, #328]
     8d4:	b	18b8 <__addtf3+0x18b8>
     8d8:	ldr	x1, [sp, #392]
     8dc:	ldr	x0, [sp, #368]
     8e0:	orr	x0, x1, x0
     8e4:	cmp	x0, #0x0
     8e8:	b.ne	900 <__addtf3+0x900>  // b.any
     8ec:	ldr	x0, [sp, #360]
     8f0:	str	x0, [sp, #336]
     8f4:	ldr	x0, [sp, #376]
     8f8:	str	x0, [sp, #328]
     8fc:	b	18b8 <__addtf3+0x18b8>
     900:	ldr	x0, [sp, #360]
     904:	lsr	x1, x0, #3
     908:	ldr	x0, [sp, #376]
     90c:	lsl	x0, x0, #61
     910:	orr	x0, x1, x0
     914:	str	x0, [sp, #360]
     918:	ldr	x0, [sp, #376]
     91c:	lsr	x0, x0, #3
     920:	str	x0, [sp, #376]
     924:	ldr	x0, [sp, #368]
     928:	lsr	x1, x0, #3
     92c:	ldr	x0, [sp, #392]
     930:	lsl	x0, x0, #61
     934:	orr	x0, x1, x0
     938:	str	x0, [sp, #368]
     93c:	ldr	x0, [sp, #392]
     940:	lsr	x0, x0, #3
     944:	str	x0, [sp, #392]
     948:	ldr	x0, [sp, #376]
     94c:	and	x0, x0, #0x800000000000
     950:	cmp	x0, #0x0
     954:	b.eq	984 <__addtf3+0x984>  // b.none
     958:	ldr	x0, [sp, #392]
     95c:	and	x0, x0, #0x800000000000
     960:	cmp	x0, #0x0
     964:	b.ne	984 <__addtf3+0x984>  // b.any
     968:	ldr	x0, [sp, #272]
     96c:	str	x0, [sp, #384]
     970:	ldr	x0, [sp, #368]
     974:	str	x0, [sp, #336]
     978:	ldr	x0, [sp, #392]
     97c:	str	x0, [sp, #328]
     980:	b	99c <__addtf3+0x99c>
     984:	ldr	x0, [sp, #288]
     988:	str	x0, [sp, #384]
     98c:	ldr	x0, [sp, #360]
     990:	str	x0, [sp, #336]
     994:	ldr	x0, [sp, #376]
     998:	str	x0, [sp, #328]
     99c:	mov	x0, #0x3                   	// #3
     9a0:	str	x0, [sp, #248]
     9a4:	ldr	x0, [sp, #328]
     9a8:	lsl	x1, x0, #3
     9ac:	ldr	x0, [sp, #336]
     9b0:	lsr	x0, x0, #61
     9b4:	orr	x0, x1, x0
     9b8:	str	x0, [sp, #328]
     9bc:	ldr	x0, [sp, #336]
     9c0:	lsl	x0, x0, #3
     9c4:	str	x0, [sp, #336]
     9c8:	b	18b8 <__addtf3+0x18b8>
     9cc:	ldr	x1, [sp, #360]
     9d0:	ldr	x0, [sp, #368]
     9d4:	add	x0, x1, x0
     9d8:	str	x0, [sp, #192]
     9dc:	ldr	x1, [sp, #376]
     9e0:	ldr	x0, [sp, #392]
     9e4:	add	x1, x1, x0
     9e8:	ldr	x2, [sp, #192]
     9ec:	ldr	x0, [sp, #360]
     9f0:	cmp	x2, x0
     9f4:	cset	w0, cc  // cc = lo, ul, last
     9f8:	and	w0, w0, #0xff
     9fc:	and	x0, x0, #0xff
     a00:	add	x0, x1, x0
     a04:	str	x0, [sp, #328]
     a08:	ldr	x0, [sp, #192]
     a0c:	str	x0, [sp, #336]
     a10:	ldr	x0, [sp, #296]
     a14:	add	x0, x0, #0x1
     a18:	str	x0, [sp, #344]
     a1c:	ldr	x0, [sp, #328]
     a20:	lsl	x1, x0, #63
     a24:	ldr	x0, [sp, #336]
     a28:	lsr	x0, x0, #1
     a2c:	orr	x1, x1, x0
     a30:	ldr	x0, [sp, #336]
     a34:	and	x0, x0, #0x1
     a38:	orr	x0, x1, x0
     a3c:	str	x0, [sp, #336]
     a40:	ldr	x0, [sp, #328]
     a44:	lsr	x0, x0, #1
     a48:	str	x0, [sp, #328]
     a4c:	ldr	x1, [sp, #344]
     a50:	mov	x0, #0x7fff                	// #32767
     a54:	cmp	x1, x0
     a58:	b.ne	189c <__addtf3+0x189c>  // b.any
     a5c:	ldr	x0, [sp, #304]
     a60:	and	x0, x0, #0xc00000
     a64:	cmp	x0, #0x0
     a68:	b.eq	aa4 <__addtf3+0xaa4>  // b.none
     a6c:	ldr	x0, [sp, #304]
     a70:	and	x0, x0, #0xc00000
     a74:	cmp	x0, #0x400, lsl #12
     a78:	b.ne	a88 <__addtf3+0xa88>  // b.any
     a7c:	ldr	x0, [sp, #384]
     a80:	cmp	x0, #0x0
     a84:	b.eq	aa4 <__addtf3+0xaa4>  // b.none
     a88:	ldr	x0, [sp, #304]
     a8c:	and	x0, x0, #0xc00000
     a90:	cmp	x0, #0x800, lsl #12
     a94:	b.ne	ab8 <__addtf3+0xab8>  // b.any
     a98:	ldr	x0, [sp, #384]
     a9c:	cmp	x0, #0x0
     aa0:	b.eq	ab8 <__addtf3+0xab8>  // b.none
     aa4:	mov	x0, #0x7fff                	// #32767
     aa8:	str	x0, [sp, #344]
     aac:	str	xzr, [sp, #336]
     ab0:	str	xzr, [sp, #328]
     ab4:	b	ad0 <__addtf3+0xad0>
     ab8:	mov	x0, #0x7ffe                	// #32766
     abc:	str	x0, [sp, #344]
     ac0:	mov	x0, #0xffffffffffffffff    	// #-1
     ac4:	str	x0, [sp, #336]
     ac8:	mov	x0, #0xffffffffffffffff    	// #-1
     acc:	str	x0, [sp, #328]
     ad0:	ldr	w0, [sp, #356]
     ad4:	orr	w0, w0, #0x10
     ad8:	str	w0, [sp, #356]
     adc:	ldr	w0, [sp, #356]
     ae0:	orr	w0, w0, #0x4
     ae4:	str	w0, [sp, #356]
     ae8:	b	189c <__addtf3+0x189c>
     aec:	ldr	x0, [sp, #328]
     af0:	and	x0, x0, #0x8000000000000
     af4:	cmp	x0, #0x0
     af8:	b.eq	18a4 <__addtf3+0x18a4>  // b.none
     afc:	ldr	x0, [sp, #328]
     b00:	and	x0, x0, #0xfff7ffffffffffff
     b04:	str	x0, [sp, #328]
     b08:	ldr	x0, [sp, #344]
     b0c:	add	x0, x0, #0x1
     b10:	str	x0, [sp, #344]
     b14:	ldr	x0, [sp, #328]
     b18:	lsl	x1, x0, #63
     b1c:	ldr	x0, [sp, #336]
     b20:	lsr	x0, x0, #1
     b24:	orr	x1, x1, x0
     b28:	ldr	x0, [sp, #336]
     b2c:	and	x0, x0, #0x1
     b30:	orr	x0, x1, x0
     b34:	str	x0, [sp, #336]
     b38:	ldr	x0, [sp, #328]
     b3c:	lsr	x0, x0, #1
     b40:	str	x0, [sp, #328]
     b44:	ldr	x1, [sp, #344]
     b48:	mov	x0, #0x7fff                	// #32767
     b4c:	cmp	x1, x0
     b50:	b.ne	18a4 <__addtf3+0x18a4>  // b.any
     b54:	ldr	x0, [sp, #304]
     b58:	and	x0, x0, #0xc00000
     b5c:	cmp	x0, #0x0
     b60:	b.eq	b9c <__addtf3+0xb9c>  // b.none
     b64:	ldr	x0, [sp, #304]
     b68:	and	x0, x0, #0xc00000
     b6c:	cmp	x0, #0x400, lsl #12
     b70:	b.ne	b80 <__addtf3+0xb80>  // b.any
     b74:	ldr	x0, [sp, #384]
     b78:	cmp	x0, #0x0
     b7c:	b.eq	b9c <__addtf3+0xb9c>  // b.none
     b80:	ldr	x0, [sp, #304]
     b84:	and	x0, x0, #0xc00000
     b88:	cmp	x0, #0x800, lsl #12
     b8c:	b.ne	bb0 <__addtf3+0xbb0>  // b.any
     b90:	ldr	x0, [sp, #384]
     b94:	cmp	x0, #0x0
     b98:	b.eq	bb0 <__addtf3+0xbb0>  // b.none
     b9c:	mov	x0, #0x7fff                	// #32767
     ba0:	str	x0, [sp, #344]
     ba4:	str	xzr, [sp, #336]
     ba8:	str	xzr, [sp, #328]
     bac:	b	bc8 <__addtf3+0xbc8>
     bb0:	mov	x0, #0x7ffe                	// #32766
     bb4:	str	x0, [sp, #344]
     bb8:	mov	x0, #0xffffffffffffffff    	// #-1
     bbc:	str	x0, [sp, #336]
     bc0:	mov	x0, #0xffffffffffffffff    	// #-1
     bc4:	str	x0, [sp, #328]
     bc8:	ldr	w0, [sp, #356]
     bcc:	orr	w0, w0, #0x10
     bd0:	str	w0, [sp, #356]
     bd4:	ldr	w0, [sp, #356]
     bd8:	orr	w0, w0, #0x4
     bdc:	str	w0, [sp, #356]
     be0:	b	18b8 <__addtf3+0x18b8>
     be4:	ldr	x0, [sp, #296]
     be8:	mov	w1, w0
     bec:	ldr	x0, [sp, #280]
     bf0:	sub	w0, w1, w0
     bf4:	str	w0, [sp, #320]
     bf8:	ldr	w0, [sp, #320]
     bfc:	cmp	w0, #0x0
     c00:	b.le	f08 <__addtf3+0xf08>
     c04:	ldr	x0, [sp, #296]
     c08:	str	x0, [sp, #344]
     c0c:	ldr	x0, [sp, #288]
     c10:	str	x0, [sp, #384]
     c14:	ldr	x0, [sp, #280]
     c18:	cmp	x0, #0x0
     c1c:	b.ne	d4c <__addtf3+0xd4c>  // b.any
     c20:	ldr	x1, [sp, #392]
     c24:	ldr	x0, [sp, #368]
     c28:	orr	x0, x1, x0
     c2c:	cmp	x0, #0x0
     c30:	b.ne	c88 <__addtf3+0xc88>  // b.any
     c34:	ldr	x1, [sp, #296]
     c38:	mov	x0, #0x7fff                	// #32767
     c3c:	cmp	x1, x0
     c40:	b.ne	c74 <__addtf3+0xc74>  // b.any
     c44:	ldr	x1, [sp, #376]
     c48:	ldr	x0, [sp, #360]
     c4c:	orr	x0, x1, x0
     c50:	cmp	x0, #0x0
     c54:	b.eq	c74 <__addtf3+0xc74>  // b.none
     c58:	ldr	x0, [sp, #376]
     c5c:	and	x0, x0, #0x4000000000000
     c60:	cmp	x0, #0x0
     c64:	b.ne	c74 <__addtf3+0xc74>  // b.any
     c68:	ldr	w0, [sp, #356]
     c6c:	orr	w0, w0, #0x1
     c70:	str	w0, [sp, #356]
     c74:	ldr	x0, [sp, #360]
     c78:	str	x0, [sp, #336]
     c7c:	ldr	x0, [sp, #376]
     c80:	str	x0, [sp, #328]
     c84:	b	18b8 <__addtf3+0x18b8>
     c88:	ldr	w0, [sp, #320]
     c8c:	sub	w0, w0, #0x1
     c90:	str	w0, [sp, #320]
     c94:	ldr	w0, [sp, #320]
     c98:	cmp	w0, #0x0
     c9c:	b.ne	ce8 <__addtf3+0xce8>  // b.any
     ca0:	ldr	x1, [sp, #360]
     ca4:	ldr	x0, [sp, #368]
     ca8:	sub	x0, x1, x0
     cac:	str	x0, [sp, #208]
     cb0:	ldr	x1, [sp, #376]
     cb4:	ldr	x0, [sp, #392]
     cb8:	sub	x1, x1, x0
     cbc:	ldr	x2, [sp, #208]
     cc0:	ldr	x0, [sp, #360]
     cc4:	cmp	x2, x0
     cc8:	cset	w0, hi  // hi = pmore
     ccc:	and	w0, w0, #0xff
     cd0:	and	x0, x0, #0xff
     cd4:	sub	x0, x1, x0
     cd8:	str	x0, [sp, #328]
     cdc:	ldr	x0, [sp, #208]
     ce0:	str	x0, [sp, #336]
     ce4:	b	16b8 <__addtf3+0x16b8>
     ce8:	ldr	x1, [sp, #296]
     cec:	mov	x0, #0x7fff                	// #32767
     cf0:	cmp	x1, x0
     cf4:	b.ne	dc0 <__addtf3+0xdc0>  // b.any
     cf8:	ldr	x1, [sp, #296]
     cfc:	mov	x0, #0x7fff                	// #32767
     d00:	cmp	x1, x0
     d04:	b.ne	d38 <__addtf3+0xd38>  // b.any
     d08:	ldr	x1, [sp, #376]
     d0c:	ldr	x0, [sp, #360]
     d10:	orr	x0, x1, x0
     d14:	cmp	x0, #0x0
     d18:	b.eq	d38 <__addtf3+0xd38>  // b.none
     d1c:	ldr	x0, [sp, #376]
     d20:	and	x0, x0, #0x4000000000000
     d24:	cmp	x0, #0x0
     d28:	b.ne	d38 <__addtf3+0xd38>  // b.any
     d2c:	ldr	w0, [sp, #356]
     d30:	orr	w0, w0, #0x1
     d34:	str	w0, [sp, #356]
     d38:	ldr	x0, [sp, #360]
     d3c:	str	x0, [sp, #336]
     d40:	ldr	x0, [sp, #376]
     d44:	str	x0, [sp, #328]
     d48:	b	18b8 <__addtf3+0x18b8>
     d4c:	ldr	x1, [sp, #296]
     d50:	mov	x0, #0x7fff                	// #32767
     d54:	cmp	x1, x0
     d58:	b.ne	db0 <__addtf3+0xdb0>  // b.any
     d5c:	ldr	x1, [sp, #296]
     d60:	mov	x0, #0x7fff                	// #32767
     d64:	cmp	x1, x0
     d68:	b.ne	d9c <__addtf3+0xd9c>  // b.any
     d6c:	ldr	x1, [sp, #376]
     d70:	ldr	x0, [sp, #360]
     d74:	orr	x0, x1, x0
     d78:	cmp	x0, #0x0
     d7c:	b.eq	d9c <__addtf3+0xd9c>  // b.none
     d80:	ldr	x0, [sp, #376]
     d84:	and	x0, x0, #0x4000000000000
     d88:	cmp	x0, #0x0
     d8c:	b.ne	d9c <__addtf3+0xd9c>  // b.any
     d90:	ldr	w0, [sp, #356]
     d94:	orr	w0, w0, #0x1
     d98:	str	w0, [sp, #356]
     d9c:	ldr	x0, [sp, #360]
     da0:	str	x0, [sp, #336]
     da4:	ldr	x0, [sp, #376]
     da8:	str	x0, [sp, #328]
     dac:	b	18b8 <__addtf3+0x18b8>
     db0:	ldr	x0, [sp, #392]
     db4:	orr	x0, x0, #0x8000000000000
     db8:	str	x0, [sp, #392]
     dbc:	b	dc4 <__addtf3+0xdc4>
     dc0:	nop
     dc4:	ldr	w0, [sp, #320]
     dc8:	cmp	w0, #0x74
     dcc:	b.gt	ea0 <__addtf3+0xea0>
     dd0:	ldr	w0, [sp, #320]
     dd4:	cmp	w0, #0x3f
     dd8:	b.gt	e40 <__addtf3+0xe40>
     ddc:	mov	w1, #0x40                  	// #64
     de0:	ldr	w0, [sp, #320]
     de4:	sub	w0, w1, w0
     de8:	ldr	x1, [sp, #392]
     dec:	lsl	x1, x1, x0
     df0:	ldr	w0, [sp, #320]
     df4:	ldr	x2, [sp, #368]
     df8:	lsr	x0, x2, x0
     dfc:	orr	x1, x1, x0
     e00:	mov	w2, #0x40                  	// #64
     e04:	ldr	w0, [sp, #320]
     e08:	sub	w0, w2, w0
     e0c:	ldr	x2, [sp, #368]
     e10:	lsl	x0, x2, x0
     e14:	cmp	x0, #0x0
     e18:	cset	w0, ne  // ne = any
     e1c:	and	w0, w0, #0xff
     e20:	sxtw	x0, w0
     e24:	orr	x0, x1, x0
     e28:	str	x0, [sp, #368]
     e2c:	ldr	w0, [sp, #320]
     e30:	ldr	x1, [sp, #392]
     e34:	lsr	x0, x1, x0
     e38:	str	x0, [sp, #392]
     e3c:	b	ec0 <__addtf3+0xec0>
     e40:	ldr	w0, [sp, #320]
     e44:	sub	w0, w0, #0x40
     e48:	ldr	x1, [sp, #392]
     e4c:	lsr	x1, x1, x0
     e50:	ldr	w0, [sp, #320]
     e54:	cmp	w0, #0x40
     e58:	b.eq	e74 <__addtf3+0xe74>  // b.none
     e5c:	mov	w2, #0x80                  	// #128
     e60:	ldr	w0, [sp, #320]
     e64:	sub	w0, w2, w0
     e68:	ldr	x2, [sp, #392]
     e6c:	lsl	x0, x2, x0
     e70:	b	e78 <__addtf3+0xe78>
     e74:	mov	x0, #0x0                   	// #0
     e78:	ldr	x2, [sp, #368]
     e7c:	orr	x0, x0, x2
     e80:	cmp	x0, #0x0
     e84:	cset	w0, ne  // ne = any
     e88:	and	w0, w0, #0xff
     e8c:	and	x0, x0, #0xff
     e90:	orr	x0, x1, x0
     e94:	str	x0, [sp, #368]
     e98:	str	xzr, [sp, #392]
     e9c:	b	ec0 <__addtf3+0xec0>
     ea0:	ldr	x1, [sp, #392]
     ea4:	ldr	x0, [sp, #368]
     ea8:	orr	x0, x1, x0
     eac:	cmp	x0, #0x0
     eb0:	b.eq	ec0 <__addtf3+0xec0>  // b.none
     eb4:	mov	x0, #0x1                   	// #1
     eb8:	str	x0, [sp, #368]
     ebc:	str	xzr, [sp, #392]
     ec0:	ldr	x1, [sp, #360]
     ec4:	ldr	x0, [sp, #368]
     ec8:	sub	x0, x1, x0
     ecc:	str	x0, [sp, #200]
     ed0:	ldr	x1, [sp, #376]
     ed4:	ldr	x0, [sp, #392]
     ed8:	sub	x1, x1, x0
     edc:	ldr	x2, [sp, #200]
     ee0:	ldr	x0, [sp, #360]
     ee4:	cmp	x2, x0
     ee8:	cset	w0, hi  // hi = pmore
     eec:	and	w0, w0, #0xff
     ef0:	and	x0, x0, #0xff
     ef4:	sub	x0, x1, x0
     ef8:	str	x0, [sp, #328]
     efc:	ldr	x0, [sp, #200]
     f00:	str	x0, [sp, #336]
     f04:	b	16b8 <__addtf3+0x16b8>
     f08:	ldr	w0, [sp, #320]
     f0c:	cmp	w0, #0x0
     f10:	b.ge	1224 <__addtf3+0x1224>  // b.tcont
     f14:	ldr	w0, [sp, #320]
     f18:	neg	w0, w0
     f1c:	str	w0, [sp, #320]
     f20:	ldr	x0, [sp, #280]
     f24:	str	x0, [sp, #344]
     f28:	ldr	x0, [sp, #272]
     f2c:	str	x0, [sp, #384]
     f30:	ldr	x0, [sp, #296]
     f34:	cmp	x0, #0x0
     f38:	b.ne	1068 <__addtf3+0x1068>  // b.any
     f3c:	ldr	x1, [sp, #376]
     f40:	ldr	x0, [sp, #360]
     f44:	orr	x0, x1, x0
     f48:	cmp	x0, #0x0
     f4c:	b.ne	fa4 <__addtf3+0xfa4>  // b.any
     f50:	ldr	x1, [sp, #280]
     f54:	mov	x0, #0x7fff                	// #32767
     f58:	cmp	x1, x0
     f5c:	b.ne	f90 <__addtf3+0xf90>  // b.any
     f60:	ldr	x1, [sp, #392]
     f64:	ldr	x0, [sp, #368]
     f68:	orr	x0, x1, x0
     f6c:	cmp	x0, #0x0
     f70:	b.eq	f90 <__addtf3+0xf90>  // b.none
     f74:	ldr	x0, [sp, #392]
     f78:	and	x0, x0, #0x4000000000000
     f7c:	cmp	x0, #0x0
     f80:	b.ne	f90 <__addtf3+0xf90>  // b.any
     f84:	ldr	w0, [sp, #356]
     f88:	orr	w0, w0, #0x1
     f8c:	str	w0, [sp, #356]
     f90:	ldr	x0, [sp, #368]
     f94:	str	x0, [sp, #336]
     f98:	ldr	x0, [sp, #392]
     f9c:	str	x0, [sp, #328]
     fa0:	b	18b8 <__addtf3+0x18b8>
     fa4:	ldr	w0, [sp, #320]
     fa8:	sub	w0, w0, #0x1
     fac:	str	w0, [sp, #320]
     fb0:	ldr	w0, [sp, #320]
     fb4:	cmp	w0, #0x0
     fb8:	b.ne	1004 <__addtf3+0x1004>  // b.any
     fbc:	ldr	x1, [sp, #368]
     fc0:	ldr	x0, [sp, #360]
     fc4:	sub	x0, x1, x0
     fc8:	str	x0, [sp, #224]
     fcc:	ldr	x1, [sp, #392]
     fd0:	ldr	x0, [sp, #376]
     fd4:	sub	x1, x1, x0
     fd8:	ldr	x2, [sp, #224]
     fdc:	ldr	x0, [sp, #368]
     fe0:	cmp	x2, x0
     fe4:	cset	w0, hi  // hi = pmore
     fe8:	and	w0, w0, #0xff
     fec:	and	x0, x0, #0xff
     ff0:	sub	x0, x1, x0
     ff4:	str	x0, [sp, #328]
     ff8:	ldr	x0, [sp, #224]
     ffc:	str	x0, [sp, #336]
    1000:	b	16b8 <__addtf3+0x16b8>
    1004:	ldr	x1, [sp, #280]
    1008:	mov	x0, #0x7fff                	// #32767
    100c:	cmp	x1, x0
    1010:	b.ne	10dc <__addtf3+0x10dc>  // b.any
    1014:	ldr	x1, [sp, #280]
    1018:	mov	x0, #0x7fff                	// #32767
    101c:	cmp	x1, x0
    1020:	b.ne	1054 <__addtf3+0x1054>  // b.any
    1024:	ldr	x1, [sp, #392]
    1028:	ldr	x0, [sp, #368]
    102c:	orr	x0, x1, x0
    1030:	cmp	x0, #0x0
    1034:	b.eq	1054 <__addtf3+0x1054>  // b.none
    1038:	ldr	x0, [sp, #392]
    103c:	and	x0, x0, #0x4000000000000
    1040:	cmp	x0, #0x0
    1044:	b.ne	1054 <__addtf3+0x1054>  // b.any
    1048:	ldr	w0, [sp, #356]
    104c:	orr	w0, w0, #0x1
    1050:	str	w0, [sp, #356]
    1054:	ldr	x0, [sp, #368]
    1058:	str	x0, [sp, #336]
    105c:	ldr	x0, [sp, #392]
    1060:	str	x0, [sp, #328]
    1064:	b	18b8 <__addtf3+0x18b8>
    1068:	ldr	x1, [sp, #280]
    106c:	mov	x0, #0x7fff                	// #32767
    1070:	cmp	x1, x0
    1074:	b.ne	10cc <__addtf3+0x10cc>  // b.any
    1078:	ldr	x1, [sp, #280]
    107c:	mov	x0, #0x7fff                	// #32767
    1080:	cmp	x1, x0
    1084:	b.ne	10b8 <__addtf3+0x10b8>  // b.any
    1088:	ldr	x1, [sp, #392]
    108c:	ldr	x0, [sp, #368]
    1090:	orr	x0, x1, x0
    1094:	cmp	x0, #0x0
    1098:	b.eq	10b8 <__addtf3+0x10b8>  // b.none
    109c:	ldr	x0, [sp, #392]
    10a0:	and	x0, x0, #0x4000000000000
    10a4:	cmp	x0, #0x0
    10a8:	b.ne	10b8 <__addtf3+0x10b8>  // b.any
    10ac:	ldr	w0, [sp, #356]
    10b0:	orr	w0, w0, #0x1
    10b4:	str	w0, [sp, #356]
    10b8:	ldr	x0, [sp, #368]
    10bc:	str	x0, [sp, #336]
    10c0:	ldr	x0, [sp, #392]
    10c4:	str	x0, [sp, #328]
    10c8:	b	18b8 <__addtf3+0x18b8>
    10cc:	ldr	x0, [sp, #376]
    10d0:	orr	x0, x0, #0x8000000000000
    10d4:	str	x0, [sp, #376]
    10d8:	b	10e0 <__addtf3+0x10e0>
    10dc:	nop
    10e0:	ldr	w0, [sp, #320]
    10e4:	cmp	w0, #0x74
    10e8:	b.gt	11bc <__addtf3+0x11bc>
    10ec:	ldr	w0, [sp, #320]
    10f0:	cmp	w0, #0x3f
    10f4:	b.gt	115c <__addtf3+0x115c>
    10f8:	mov	w1, #0x40                  	// #64
    10fc:	ldr	w0, [sp, #320]
    1100:	sub	w0, w1, w0
    1104:	ldr	x1, [sp, #376]
    1108:	lsl	x1, x1, x0
    110c:	ldr	w0, [sp, #320]
    1110:	ldr	x2, [sp, #360]
    1114:	lsr	x0, x2, x0
    1118:	orr	x1, x1, x0
    111c:	mov	w2, #0x40                  	// #64
    1120:	ldr	w0, [sp, #320]
    1124:	sub	w0, w2, w0
    1128:	ldr	x2, [sp, #360]
    112c:	lsl	x0, x2, x0
    1130:	cmp	x0, #0x0
    1134:	cset	w0, ne  // ne = any
    1138:	and	w0, w0, #0xff
    113c:	sxtw	x0, w0
    1140:	orr	x0, x1, x0
    1144:	str	x0, [sp, #360]
    1148:	ldr	w0, [sp, #320]
    114c:	ldr	x1, [sp, #376]
    1150:	lsr	x0, x1, x0
    1154:	str	x0, [sp, #376]
    1158:	b	11dc <__addtf3+0x11dc>
    115c:	ldr	w0, [sp, #320]
    1160:	sub	w0, w0, #0x40
    1164:	ldr	x1, [sp, #376]
    1168:	lsr	x1, x1, x0
    116c:	ldr	w0, [sp, #320]
    1170:	cmp	w0, #0x40
    1174:	b.eq	1190 <__addtf3+0x1190>  // b.none
    1178:	mov	w2, #0x80                  	// #128
    117c:	ldr	w0, [sp, #320]
    1180:	sub	w0, w2, w0
    1184:	ldr	x2, [sp, #376]
    1188:	lsl	x0, x2, x0
    118c:	b	1194 <__addtf3+0x1194>
    1190:	mov	x0, #0x0                   	// #0
    1194:	ldr	x2, [sp, #360]
    1198:	orr	x0, x0, x2
    119c:	cmp	x0, #0x0
    11a0:	cset	w0, ne  // ne = any
    11a4:	and	w0, w0, #0xff
    11a8:	and	x0, x0, #0xff
    11ac:	orr	x0, x1, x0
    11b0:	str	x0, [sp, #360]
    11b4:	str	xzr, [sp, #376]
    11b8:	b	11dc <__addtf3+0x11dc>
    11bc:	ldr	x1, [sp, #376]
    11c0:	ldr	x0, [sp, #360]
    11c4:	orr	x0, x1, x0
    11c8:	cmp	x0, #0x0
    11cc:	b.eq	11dc <__addtf3+0x11dc>  // b.none
    11d0:	mov	x0, #0x1                   	// #1
    11d4:	str	x0, [sp, #360]
    11d8:	str	xzr, [sp, #376]
    11dc:	ldr	x1, [sp, #368]
    11e0:	ldr	x0, [sp, #360]
    11e4:	sub	x0, x1, x0
    11e8:	str	x0, [sp, #216]
    11ec:	ldr	x1, [sp, #392]
    11f0:	ldr	x0, [sp, #376]
    11f4:	sub	x1, x1, x0
    11f8:	ldr	x2, [sp, #216]
    11fc:	ldr	x0, [sp, #368]
    1200:	cmp	x2, x0
    1204:	cset	w0, hi  // hi = pmore
    1208:	and	w0, w0, #0xff
    120c:	and	x0, x0, #0xff
    1210:	sub	x0, x1, x0
    1214:	str	x0, [sp, #328]
    1218:	ldr	x0, [sp, #216]
    121c:	str	x0, [sp, #336]
    1220:	b	16b8 <__addtf3+0x16b8>
    1224:	ldr	x0, [sp, #296]
    1228:	add	x0, x0, #0x1
    122c:	and	x0, x0, #0x7ffe
    1230:	cmp	x0, #0x0
    1234:	b.ne	15cc <__addtf3+0x15cc>  // b.any
    1238:	ldr	x0, [sp, #296]
    123c:	cmp	x0, #0x0
    1240:	b.ne	13bc <__addtf3+0x13bc>  // b.any
    1244:	str	xzr, [sp, #344]
    1248:	ldr	x1, [sp, #376]
    124c:	ldr	x0, [sp, #360]
    1250:	orr	x0, x1, x0
    1254:	cmp	x0, #0x0
    1258:	b.ne	12ac <__addtf3+0x12ac>  // b.any
    125c:	ldr	x0, [sp, #368]
    1260:	str	x0, [sp, #336]
    1264:	ldr	x0, [sp, #392]
    1268:	str	x0, [sp, #328]
    126c:	ldr	x1, [sp, #392]
    1270:	ldr	x0, [sp, #368]
    1274:	orr	x0, x1, x0
    1278:	cmp	x0, #0x0
    127c:	b.ne	12a0 <__addtf3+0x12a0>  // b.any
    1280:	ldr	x0, [sp, #304]
    1284:	and	x0, x0, #0xc00000
    1288:	cmp	x0, #0x800, lsl #12
    128c:	cset	w0, eq  // eq = none
    1290:	and	w0, w0, #0xff
    1294:	and	x0, x0, #0xff
    1298:	str	x0, [sp, #384]
    129c:	b	18b8 <__addtf3+0x18b8>
    12a0:	ldr	x0, [sp, #272]
    12a4:	str	x0, [sp, #384]
    12a8:	b	18b8 <__addtf3+0x18b8>
    12ac:	ldr	x1, [sp, #392]
    12b0:	ldr	x0, [sp, #368]
    12b4:	orr	x0, x1, x0
    12b8:	cmp	x0, #0x0
    12bc:	b.ne	12dc <__addtf3+0x12dc>  // b.any
    12c0:	ldr	x0, [sp, #360]
    12c4:	str	x0, [sp, #336]
    12c8:	ldr	x0, [sp, #376]
    12cc:	str	x0, [sp, #328]
    12d0:	ldr	x0, [sp, #288]
    12d4:	str	x0, [sp, #384]
    12d8:	b	18b8 <__addtf3+0x18b8>
    12dc:	ldr	x1, [sp, #360]
    12e0:	ldr	x0, [sp, #368]
    12e4:	sub	x0, x1, x0
    12e8:	str	x0, [sp, #240]
    12ec:	ldr	x1, [sp, #376]
    12f0:	ldr	x0, [sp, #392]
    12f4:	sub	x1, x1, x0
    12f8:	ldr	x2, [sp, #240]
    12fc:	ldr	x0, [sp, #360]
    1300:	cmp	x2, x0
    1304:	cset	w0, hi  // hi = pmore
    1308:	and	w0, w0, #0xff
    130c:	and	x0, x0, #0xff
    1310:	sub	x0, x1, x0
    1314:	str	x0, [sp, #328]
    1318:	ldr	x0, [sp, #240]
    131c:	str	x0, [sp, #336]
    1320:	ldr	x0, [sp, #288]
    1324:	str	x0, [sp, #384]
    1328:	ldr	x0, [sp, #328]
    132c:	and	x0, x0, #0x8000000000000
    1330:	cmp	x0, #0x0
    1334:	b.eq	1388 <__addtf3+0x1388>  // b.none
    1338:	ldr	x1, [sp, #368]
    133c:	ldr	x0, [sp, #360]
    1340:	sub	x0, x1, x0
    1344:	str	x0, [sp, #232]
    1348:	ldr	x1, [sp, #392]
    134c:	ldr	x0, [sp, #376]
    1350:	sub	x1, x1, x0
    1354:	ldr	x2, [sp, #232]
    1358:	ldr	x0, [sp, #368]
    135c:	cmp	x2, x0
    1360:	cset	w0, hi  // hi = pmore
    1364:	and	w0, w0, #0xff
    1368:	and	x0, x0, #0xff
    136c:	sub	x0, x1, x0
    1370:	str	x0, [sp, #328]
    1374:	ldr	x0, [sp, #232]
    1378:	str	x0, [sp, #336]
    137c:	ldr	x0, [sp, #272]
    1380:	str	x0, [sp, #384]
    1384:	b	18ac <__addtf3+0x18ac>
    1388:	ldr	x1, [sp, #328]
    138c:	ldr	x0, [sp, #336]
    1390:	orr	x0, x1, x0
    1394:	cmp	x0, #0x0
    1398:	b.ne	18ac <__addtf3+0x18ac>  // b.any
    139c:	ldr	x0, [sp, #304]
    13a0:	and	x0, x0, #0xc00000
    13a4:	cmp	x0, #0x800, lsl #12
    13a8:	cset	w0, eq  // eq = none
    13ac:	and	w0, w0, #0xff
    13b0:	and	x0, x0, #0xff
    13b4:	str	x0, [sp, #384]
    13b8:	b	18ac <__addtf3+0x18ac>
    13bc:	ldr	x1, [sp, #296]
    13c0:	mov	x0, #0x7fff                	// #32767
    13c4:	cmp	x1, x0
    13c8:	b.ne	13fc <__addtf3+0x13fc>  // b.any
    13cc:	ldr	x1, [sp, #376]
    13d0:	ldr	x0, [sp, #360]
    13d4:	orr	x0, x1, x0
    13d8:	cmp	x0, #0x0
    13dc:	b.eq	13fc <__addtf3+0x13fc>  // b.none
    13e0:	ldr	x0, [sp, #376]
    13e4:	and	x0, x0, #0x4000000000000
    13e8:	cmp	x0, #0x0
    13ec:	b.ne	13fc <__addtf3+0x13fc>  // b.any
    13f0:	ldr	w0, [sp, #356]
    13f4:	orr	w0, w0, #0x1
    13f8:	str	w0, [sp, #356]
    13fc:	ldr	x1, [sp, #280]
    1400:	mov	x0, #0x7fff                	// #32767
    1404:	cmp	x1, x0
    1408:	b.ne	143c <__addtf3+0x143c>  // b.any
    140c:	ldr	x1, [sp, #392]
    1410:	ldr	x0, [sp, #368]
    1414:	orr	x0, x1, x0
    1418:	cmp	x0, #0x0
    141c:	b.eq	143c <__addtf3+0x143c>  // b.none
    1420:	ldr	x0, [sp, #392]
    1424:	and	x0, x0, #0x4000000000000
    1428:	cmp	x0, #0x0
    142c:	b.ne	143c <__addtf3+0x143c>  // b.any
    1430:	ldr	w0, [sp, #356]
    1434:	orr	w0, w0, #0x1
    1438:	str	w0, [sp, #356]
    143c:	mov	x0, #0x7fff                	// #32767
    1440:	str	x0, [sp, #344]
    1444:	ldr	x1, [sp, #376]
    1448:	ldr	x0, [sp, #360]
    144c:	orr	x0, x1, x0
    1450:	cmp	x0, #0x0
    1454:	b.ne	14d0 <__addtf3+0x14d0>  // b.any
    1458:	ldr	x1, [sp, #392]
    145c:	ldr	x0, [sp, #368]
    1460:	orr	x0, x1, x0
    1464:	cmp	x0, #0x0
    1468:	b.ne	14b4 <__addtf3+0x14b4>  // b.any
    146c:	str	xzr, [sp, #384]
    1470:	mov	x0, #0xffffffffffffffff    	// #-1
    1474:	str	x0, [sp, #336]
    1478:	mov	x0, #0xffffffffffff        	// #281474976710655
    147c:	str	x0, [sp, #328]
    1480:	ldr	x0, [sp, #328]
    1484:	lsl	x1, x0, #3
    1488:	ldr	x0, [sp, #336]
    148c:	lsr	x0, x0, #61
    1490:	orr	x0, x1, x0
    1494:	str	x0, [sp, #328]
    1498:	ldr	x0, [sp, #336]
    149c:	lsl	x0, x0, #3
    14a0:	str	x0, [sp, #336]
    14a4:	ldr	w0, [sp, #356]
    14a8:	orr	w0, w0, #0x1
    14ac:	str	w0, [sp, #356]
    14b0:	b	18b8 <__addtf3+0x18b8>
    14b4:	ldr	x0, [sp, #272]
    14b8:	str	x0, [sp, #384]
    14bc:	ldr	x0, [sp, #368]
    14c0:	str	x0, [sp, #336]
    14c4:	ldr	x0, [sp, #392]
    14c8:	str	x0, [sp, #328]
    14cc:	b	18b8 <__addtf3+0x18b8>
    14d0:	ldr	x1, [sp, #392]
    14d4:	ldr	x0, [sp, #368]
    14d8:	orr	x0, x1, x0
    14dc:	cmp	x0, #0x0
    14e0:	b.ne	1500 <__addtf3+0x1500>  // b.any
    14e4:	ldr	x0, [sp, #288]
    14e8:	str	x0, [sp, #384]
    14ec:	ldr	x0, [sp, #360]
    14f0:	str	x0, [sp, #336]
    14f4:	ldr	x0, [sp, #376]
    14f8:	str	x0, [sp, #328]
    14fc:	b	18b8 <__addtf3+0x18b8>
    1500:	ldr	x0, [sp, #360]
    1504:	lsr	x1, x0, #3
    1508:	ldr	x0, [sp, #376]
    150c:	lsl	x0, x0, #61
    1510:	orr	x0, x1, x0
    1514:	str	x0, [sp, #360]
    1518:	ldr	x0, [sp, #376]
    151c:	lsr	x0, x0, #3
    1520:	str	x0, [sp, #376]
    1524:	ldr	x0, [sp, #368]
    1528:	lsr	x1, x0, #3
    152c:	ldr	x0, [sp, #392]
    1530:	lsl	x0, x0, #61
    1534:	orr	x0, x1, x0
    1538:	str	x0, [sp, #368]
    153c:	ldr	x0, [sp, #392]
    1540:	lsr	x0, x0, #3
    1544:	str	x0, [sp, #392]
    1548:	ldr	x0, [sp, #376]
    154c:	and	x0, x0, #0x800000000000
    1550:	cmp	x0, #0x0
    1554:	b.eq	1584 <__addtf3+0x1584>  // b.none
    1558:	ldr	x0, [sp, #392]
    155c:	and	x0, x0, #0x800000000000
    1560:	cmp	x0, #0x0
    1564:	b.ne	1584 <__addtf3+0x1584>  // b.any
    1568:	ldr	x0, [sp, #272]
    156c:	str	x0, [sp, #384]
    1570:	ldr	x0, [sp, #368]
    1574:	str	x0, [sp, #336]
    1578:	ldr	x0, [sp, #392]
    157c:	str	x0, [sp, #328]
    1580:	b	159c <__addtf3+0x159c>
    1584:	ldr	x0, [sp, #288]
    1588:	str	x0, [sp, #384]
    158c:	ldr	x0, [sp, #360]
    1590:	str	x0, [sp, #336]
    1594:	ldr	x0, [sp, #376]
    1598:	str	x0, [sp, #328]
    159c:	mov	x0, #0x3                   	// #3
    15a0:	str	x0, [sp, #248]
    15a4:	ldr	x0, [sp, #328]
    15a8:	lsl	x1, x0, #3
    15ac:	ldr	x0, [sp, #336]
    15b0:	lsr	x0, x0, #61
    15b4:	orr	x0, x1, x0
    15b8:	str	x0, [sp, #328]
    15bc:	ldr	x0, [sp, #336]
    15c0:	lsl	x0, x0, #3
    15c4:	str	x0, [sp, #336]
    15c8:	b	18b8 <__addtf3+0x18b8>
    15cc:	ldr	x0, [sp, #296]
    15d0:	str	x0, [sp, #344]
    15d4:	ldr	x1, [sp, #360]
    15d8:	ldr	x0, [sp, #368]
    15dc:	sub	x0, x1, x0
    15e0:	str	x0, [sp, #264]
    15e4:	ldr	x1, [sp, #376]
    15e8:	ldr	x0, [sp, #392]
    15ec:	sub	x1, x1, x0
    15f0:	ldr	x2, [sp, #264]
    15f4:	ldr	x0, [sp, #360]
    15f8:	cmp	x2, x0
    15fc:	cset	w0, hi  // hi = pmore
    1600:	and	w0, w0, #0xff
    1604:	and	x0, x0, #0xff
    1608:	sub	x0, x1, x0
    160c:	str	x0, [sp, #328]
    1610:	ldr	x0, [sp, #264]
    1614:	str	x0, [sp, #336]
    1618:	ldr	x0, [sp, #288]
    161c:	str	x0, [sp, #384]
    1620:	ldr	x0, [sp, #328]
    1624:	and	x0, x0, #0x8000000000000
    1628:	cmp	x0, #0x0
    162c:	b.eq	1680 <__addtf3+0x1680>  // b.none
    1630:	ldr	x1, [sp, #368]
    1634:	ldr	x0, [sp, #360]
    1638:	sub	x0, x1, x0
    163c:	str	x0, [sp, #256]
    1640:	ldr	x1, [sp, #392]
    1644:	ldr	x0, [sp, #376]
    1648:	sub	x1, x1, x0
    164c:	ldr	x2, [sp, #256]
    1650:	ldr	x0, [sp, #368]
    1654:	cmp	x2, x0
    1658:	cset	w0, hi  // hi = pmore
    165c:	and	w0, w0, #0xff
    1660:	and	x0, x0, #0xff
    1664:	sub	x0, x1, x0
    1668:	str	x0, [sp, #328]
    166c:	ldr	x0, [sp, #256]
    1670:	str	x0, [sp, #336]
    1674:	ldr	x0, [sp, #272]
    1678:	str	x0, [sp, #384]
    167c:	b	16d8 <__addtf3+0x16d8>
    1680:	ldr	x1, [sp, #328]
    1684:	ldr	x0, [sp, #336]
    1688:	orr	x0, x1, x0
    168c:	cmp	x0, #0x0
    1690:	b.ne	16d8 <__addtf3+0x16d8>  // b.any
    1694:	str	xzr, [sp, #344]
    1698:	ldr	x0, [sp, #304]
    169c:	and	x0, x0, #0xc00000
    16a0:	cmp	x0, #0x800, lsl #12
    16a4:	cset	w0, eq  // eq = none
    16a8:	and	w0, w0, #0xff
    16ac:	and	x0, x0, #0xff
    16b0:	str	x0, [sp, #384]
    16b4:	b	18b8 <__addtf3+0x18b8>
    16b8:	ldr	x0, [sp, #328]
    16bc:	and	x0, x0, #0x8000000000000
    16c0:	cmp	x0, #0x0
    16c4:	b.eq	18b4 <__addtf3+0x18b4>  // b.none
    16c8:	ldr	x0, [sp, #328]
    16cc:	and	x0, x0, #0x7ffffffffffff
    16d0:	str	x0, [sp, #328]
    16d4:	b	16dc <__addtf3+0x16dc>
    16d8:	nop
    16dc:	ldr	x0, [sp, #328]
    16e0:	cmp	x0, #0x0
    16e4:	b.eq	16f8 <__addtf3+0x16f8>  // b.none
    16e8:	ldr	x0, [sp, #328]
    16ec:	clz	x0, x0
    16f0:	str	w0, [sp, #316]
    16f4:	b	1710 <__addtf3+0x1710>
    16f8:	ldr	x0, [sp, #336]
    16fc:	clz	x0, x0
    1700:	str	w0, [sp, #316]
    1704:	ldr	w0, [sp, #316]
    1708:	add	w0, w0, #0x40
    170c:	str	w0, [sp, #316]
    1710:	ldr	w0, [sp, #316]
    1714:	sub	w0, w0, #0xc
    1718:	str	w0, [sp, #316]
    171c:	ldr	w0, [sp, #316]
    1720:	cmp	w0, #0x3f
    1724:	b.gt	1764 <__addtf3+0x1764>
    1728:	ldr	w0, [sp, #316]
    172c:	ldr	x1, [sp, #328]
    1730:	lsl	x1, x1, x0
    1734:	mov	w2, #0x40                  	// #64
    1738:	ldr	w0, [sp, #316]
    173c:	sub	w0, w2, w0
    1740:	ldr	x2, [sp, #336]
    1744:	lsr	x0, x2, x0
    1748:	orr	x0, x1, x0
    174c:	str	x0, [sp, #328]
    1750:	ldr	w0, [sp, #316]
    1754:	ldr	x1, [sp, #336]
    1758:	lsl	x0, x1, x0
    175c:	str	x0, [sp, #336]
    1760:	b	177c <__addtf3+0x177c>
    1764:	ldr	w0, [sp, #316]
    1768:	sub	w0, w0, #0x40
    176c:	ldr	x1, [sp, #336]
    1770:	lsl	x0, x1, x0
    1774:	str	x0, [sp, #328]
    1778:	str	xzr, [sp, #336]
    177c:	ldrsw	x0, [sp, #316]
    1780:	ldr	x1, [sp, #344]
    1784:	cmp	x1, x0
    1788:	b.gt	1874 <__addtf3+0x1874>
    178c:	ldr	w0, [sp, #316]
    1790:	ldr	x1, [sp, #344]
    1794:	sub	w0, w0, w1
    1798:	add	w0, w0, #0x1
    179c:	str	w0, [sp, #316]
    17a0:	ldr	w0, [sp, #316]
    17a4:	cmp	w0, #0x3f
    17a8:	b.gt	1810 <__addtf3+0x1810>
    17ac:	mov	w1, #0x40                  	// #64
    17b0:	ldr	w0, [sp, #316]
    17b4:	sub	w0, w1, w0
    17b8:	ldr	x1, [sp, #328]
    17bc:	lsl	x1, x1, x0
    17c0:	ldr	w0, [sp, #316]
    17c4:	ldr	x2, [sp, #336]
    17c8:	lsr	x0, x2, x0
    17cc:	orr	x1, x1, x0
    17d0:	mov	w2, #0x40                  	// #64
    17d4:	ldr	w0, [sp, #316]
    17d8:	sub	w0, w2, w0
    17dc:	ldr	x2, [sp, #336]
    17e0:	lsl	x0, x2, x0
    17e4:	cmp	x0, #0x0
    17e8:	cset	w0, ne  // ne = any
    17ec:	and	w0, w0, #0xff
    17f0:	sxtw	x0, w0
    17f4:	orr	x0, x1, x0
    17f8:	str	x0, [sp, #336]
    17fc:	ldr	w0, [sp, #316]
    1800:	ldr	x1, [sp, #328]
    1804:	lsr	x0, x1, x0
    1808:	str	x0, [sp, #328]
    180c:	b	186c <__addtf3+0x186c>
    1810:	ldr	w0, [sp, #316]
    1814:	sub	w0, w0, #0x40
    1818:	ldr	x1, [sp, #328]
    181c:	lsr	x1, x1, x0
    1820:	ldr	w0, [sp, #316]
    1824:	cmp	w0, #0x40
    1828:	b.eq	1844 <__addtf3+0x1844>  // b.none
    182c:	mov	w2, #0x80                  	// #128
    1830:	ldr	w0, [sp, #316]
    1834:	sub	w0, w2, w0
    1838:	ldr	x2, [sp, #328]
    183c:	lsl	x0, x2, x0
    1840:	b	1848 <__addtf3+0x1848>
    1844:	mov	x0, #0x0                   	// #0
    1848:	ldr	x2, [sp, #336]
    184c:	orr	x0, x0, x2
    1850:	cmp	x0, #0x0
    1854:	cset	w0, ne  // ne = any
    1858:	and	w0, w0, #0xff
    185c:	and	x0, x0, #0xff
    1860:	orr	x0, x1, x0
    1864:	str	x0, [sp, #336]
    1868:	str	xzr, [sp, #328]
    186c:	str	xzr, [sp, #344]
    1870:	b	18b8 <__addtf3+0x18b8>
    1874:	ldrsw	x0, [sp, #316]
    1878:	ldr	x1, [sp, #344]
    187c:	sub	x0, x1, x0
    1880:	str	x0, [sp, #344]
    1884:	ldr	x0, [sp, #328]
    1888:	and	x0, x0, #0xfff7ffffffffffff
    188c:	str	x0, [sp, #328]
    1890:	b	18b8 <__addtf3+0x18b8>
    1894:	nop
    1898:	b	18b8 <__addtf3+0x18b8>
    189c:	nop
    18a0:	b	18b8 <__addtf3+0x18b8>
    18a4:	nop
    18a8:	b	18b8 <__addtf3+0x18b8>
    18ac:	nop
    18b0:	b	18b8 <__addtf3+0x18b8>
    18b4:	nop
    18b8:	ldr	x0, [sp, #344]
    18bc:	cmp	x0, #0x0
    18c0:	b.ne	18e0 <__addtf3+0x18e0>  // b.any
    18c4:	ldr	x1, [sp, #328]
    18c8:	ldr	x0, [sp, #336]
    18cc:	orr	x0, x1, x0
    18d0:	cmp	x0, #0x0
    18d4:	b.eq	18e0 <__addtf3+0x18e0>  // b.none
    18d8:	mov	w0, #0x1                   	// #1
    18dc:	b	18e4 <__addtf3+0x18e4>
    18e0:	mov	w0, #0x0                   	// #0
    18e4:	str	w0, [sp, #148]
    18e8:	ldr	x0, [sp, #336]
    18ec:	and	x0, x0, #0x7
    18f0:	cmp	x0, #0x0
    18f4:	b.eq	1a3c <__addtf3+0x1a3c>  // b.none
    18f8:	ldr	w0, [sp, #356]
    18fc:	orr	w0, w0, #0x10
    1900:	str	w0, [sp, #356]
    1904:	ldr	x0, [sp, #304]
    1908:	and	x0, x0, #0xc00000
    190c:	cmp	x0, #0xc00, lsl #12
    1910:	b.eq	1a44 <__addtf3+0x1a44>  // b.none
    1914:	cmp	x0, #0xc00, lsl #12
    1918:	b.hi	1a48 <__addtf3+0x1a48>  // b.pmore
    191c:	cmp	x0, #0x800, lsl #12
    1920:	b.eq	19e4 <__addtf3+0x19e4>  // b.none
    1924:	cmp	x0, #0x800, lsl #12
    1928:	b.hi	1a48 <__addtf3+0x1a48>  // b.pmore
    192c:	cmp	x0, #0x0
    1930:	b.eq	1940 <__addtf3+0x1940>  // b.none
    1934:	cmp	x0, #0x400, lsl #12
    1938:	b.eq	198c <__addtf3+0x198c>  // b.none
    193c:	b	1a48 <__addtf3+0x1a48>
    1940:	ldr	x0, [sp, #336]
    1944:	and	x0, x0, #0xf
    1948:	cmp	x0, #0x4
    194c:	b.eq	1a44 <__addtf3+0x1a44>  // b.none
    1950:	ldr	x0, [sp, #336]
    1954:	add	x0, x0, #0x4
    1958:	str	x0, [sp, #120]
    195c:	ldr	x1, [sp, #120]
    1960:	ldr	x0, [sp, #336]
    1964:	cmp	x1, x0
    1968:	cset	w0, cc  // cc = lo, ul, last
    196c:	and	w0, w0, #0xff
    1970:	and	x0, x0, #0xff
    1974:	ldr	x1, [sp, #328]
    1978:	add	x0, x1, x0
    197c:	str	x0, [sp, #328]
    1980:	ldr	x0, [sp, #120]
    1984:	str	x0, [sp, #336]
    1988:	b	1a44 <__addtf3+0x1a44>
    198c:	ldr	x0, [sp, #384]
    1990:	cmp	x0, #0x0
    1994:	b.ne	1a44 <__addtf3+0x1a44>  // b.any
    1998:	ldr	x0, [sp, #336]
    199c:	and	x0, x0, #0x7
    19a0:	cmp	x0, #0x0
    19a4:	b.eq	1a44 <__addtf3+0x1a44>  // b.none
    19a8:	ldr	x0, [sp, #336]
    19ac:	add	x0, x0, #0x8
    19b0:	str	x0, [sp, #128]
    19b4:	ldr	x1, [sp, #128]
    19b8:	ldr	x0, [sp, #336]
    19bc:	cmp	x1, x0
    19c0:	cset	w0, cc  // cc = lo, ul, last
    19c4:	and	w0, w0, #0xff
    19c8:	and	x0, x0, #0xff
    19cc:	ldr	x1, [sp, #328]
    19d0:	add	x0, x1, x0
    19d4:	str	x0, [sp, #328]
    19d8:	ldr	x0, [sp, #128]
    19dc:	str	x0, [sp, #336]
    19e0:	b	1a44 <__addtf3+0x1a44>
    19e4:	ldr	x0, [sp, #384]
    19e8:	cmp	x0, #0x0
    19ec:	b.eq	1a44 <__addtf3+0x1a44>  // b.none
    19f0:	ldr	x0, [sp, #336]
    19f4:	and	x0, x0, #0x7
    19f8:	cmp	x0, #0x0
    19fc:	b.eq	1a44 <__addtf3+0x1a44>  // b.none
    1a00:	ldr	x0, [sp, #336]
    1a04:	add	x0, x0, #0x8
    1a08:	str	x0, [sp, #136]
    1a0c:	ldr	x1, [sp, #136]
    1a10:	ldr	x0, [sp, #336]
    1a14:	cmp	x1, x0
    1a18:	cset	w0, cc  // cc = lo, ul, last
    1a1c:	and	w0, w0, #0xff
    1a20:	and	x0, x0, #0xff
    1a24:	ldr	x1, [sp, #328]
    1a28:	add	x0, x1, x0
    1a2c:	str	x0, [sp, #328]
    1a30:	ldr	x0, [sp, #136]
    1a34:	str	x0, [sp, #336]
    1a38:	b	1a44 <__addtf3+0x1a44>
    1a3c:	nop
    1a40:	b	1a48 <__addtf3+0x1a48>
    1a44:	nop
    1a48:	ldr	w0, [sp, #148]
    1a4c:	cmp	w0, #0x0
    1a50:	b.eq	1a80 <__addtf3+0x1a80>  // b.none
    1a54:	ldr	w0, [sp, #356]
    1a58:	and	w0, w0, #0x10
    1a5c:	cmp	w0, #0x0
    1a60:	b.ne	1a74 <__addtf3+0x1a74>  // b.any
    1a64:	ldr	x0, [sp, #304]
    1a68:	and	x0, x0, #0x800
    1a6c:	cmp	x0, #0x0
    1a70:	b.eq	1a80 <__addtf3+0x1a80>  // b.none
    1a74:	ldr	w0, [sp, #356]
    1a78:	orr	w0, w0, #0x8
    1a7c:	str	w0, [sp, #356]
    1a80:	ldr	x0, [sp, #328]
    1a84:	and	x0, x0, #0x8000000000000
    1a88:	cmp	x0, #0x0
    1a8c:	b.eq	1b44 <__addtf3+0x1b44>  // b.none
    1a90:	ldr	x0, [sp, #328]
    1a94:	and	x0, x0, #0xfff7ffffffffffff
    1a98:	str	x0, [sp, #328]
    1a9c:	ldr	x0, [sp, #344]
    1aa0:	add	x0, x0, #0x1
    1aa4:	str	x0, [sp, #344]
    1aa8:	ldr	x1, [sp, #344]
    1aac:	mov	x0, #0x7fff                	// #32767
    1ab0:	cmp	x1, x0
    1ab4:	b.ne	1b44 <__addtf3+0x1b44>  // b.any
    1ab8:	ldr	x0, [sp, #304]
    1abc:	and	x0, x0, #0xc00000
    1ac0:	cmp	x0, #0x0
    1ac4:	b.eq	1b00 <__addtf3+0x1b00>  // b.none
    1ac8:	ldr	x0, [sp, #304]
    1acc:	and	x0, x0, #0xc00000
    1ad0:	cmp	x0, #0x400, lsl #12
    1ad4:	b.ne	1ae4 <__addtf3+0x1ae4>  // b.any
    1ad8:	ldr	x0, [sp, #384]
    1adc:	cmp	x0, #0x0
    1ae0:	b.eq	1b00 <__addtf3+0x1b00>  // b.none
    1ae4:	ldr	x0, [sp, #304]
    1ae8:	and	x0, x0, #0xc00000
    1aec:	cmp	x0, #0x800, lsl #12
    1af0:	b.ne	1b14 <__addtf3+0x1b14>  // b.any
    1af4:	ldr	x0, [sp, #384]
    1af8:	cmp	x0, #0x0
    1afc:	b.eq	1b14 <__addtf3+0x1b14>  // b.none
    1b00:	mov	x0, #0x7fff                	// #32767
    1b04:	str	x0, [sp, #344]
    1b08:	str	xzr, [sp, #336]
    1b0c:	str	xzr, [sp, #328]
    1b10:	b	1b2c <__addtf3+0x1b2c>
    1b14:	mov	x0, #0x7ffe                	// #32766
    1b18:	str	x0, [sp, #344]
    1b1c:	mov	x0, #0xffffffffffffffff    	// #-1
    1b20:	str	x0, [sp, #336]
    1b24:	mov	x0, #0xffffffffffffffff    	// #-1
    1b28:	str	x0, [sp, #328]
    1b2c:	ldr	w0, [sp, #356]
    1b30:	orr	w0, w0, #0x10
    1b34:	str	w0, [sp, #356]
    1b38:	ldr	w0, [sp, #356]
    1b3c:	orr	w0, w0, #0x4
    1b40:	str	w0, [sp, #356]
    1b44:	ldr	x0, [sp, #336]
    1b48:	lsr	x1, x0, #3
    1b4c:	ldr	x0, [sp, #328]
    1b50:	lsl	x0, x0, #61
    1b54:	orr	x0, x1, x0
    1b58:	str	x0, [sp, #336]
    1b5c:	ldr	x0, [sp, #328]
    1b60:	lsr	x0, x0, #3
    1b64:	str	x0, [sp, #328]
    1b68:	ldr	x1, [sp, #344]
    1b6c:	mov	x0, #0x7fff                	// #32767
    1b70:	cmp	x1, x0
    1b74:	b.ne	1b98 <__addtf3+0x1b98>  // b.any
    1b78:	ldr	x1, [sp, #328]
    1b7c:	ldr	x0, [sp, #336]
    1b80:	orr	x0, x1, x0
    1b84:	cmp	x0, #0x0
    1b88:	b.eq	1b98 <__addtf3+0x1b98>  // b.none
    1b8c:	ldr	x0, [sp, #328]
    1b90:	orr	x0, x0, #0x800000000000
    1b94:	str	x0, [sp, #328]
    1b98:	ldr	x0, [sp, #336]
    1b9c:	str	x0, [sp, #48]
    1ba0:	ldr	x0, [sp, #328]
    1ba4:	and	x1, x0, #0xffffffffffff
    1ba8:	ldr	x0, [sp, #56]
    1bac:	bfxil	x0, x1, #0, #48
    1bb0:	str	x0, [sp, #56]
    1bb4:	ldr	x0, [sp, #344]
    1bb8:	and	w0, w0, #0x7fff
    1bbc:	and	w1, w0, #0xffff
    1bc0:	ldrh	w0, [sp, #62]
    1bc4:	bfxil	w0, w1, #0, #15
    1bc8:	strh	w0, [sp, #62]
    1bcc:	ldr	x0, [sp, #384]
    1bd0:	and	w0, w0, #0x1
    1bd4:	and	w1, w0, #0xff
    1bd8:	ldrb	w0, [sp, #63]
    1bdc:	bfi	w0, w1, #7, #1
    1be0:	strb	w0, [sp, #63]
    1be4:	ldr	q0, [sp, #48]
    1be8:	str	q0, [sp, #96]
    1bec:	ldrsw	x0, [sp, #356]
    1bf0:	cmp	x0, #0x0
    1bf4:	b.eq	1c00 <__addtf3+0x1c00>  // b.none
    1bf8:	ldr	w0, [sp, #356]
    1bfc:	bl	0 <__sfp_handle_exceptions>
    1c00:	ldr	q0, [sp, #96]
    1c04:	ldp	x29, x30, [sp], #400
    1c08:	ret

divtf3.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__divtf3>:
       0:	sub	sp, sp, #0x290
       4:	stp	x29, x30, [sp]
       8:	mov	x29, sp
       c:	str	q0, [sp, #32]
      10:	str	q1, [sp, #16]
      14:	str	wzr, [sp, #564]
      18:	str	xzr, [sp, #400]
      1c:	mrs	x0, fpcr
      20:	str	x0, [sp, #400]
      24:	ldr	q0, [sp, #32]
      28:	str	q0, [sp, #80]
      2c:	ldr	x0, [sp, #80]
      30:	str	x0, [sp, #584]
      34:	ldr	x0, [sp, #88]
      38:	ubfx	x0, x0, #0, #48
      3c:	str	x0, [sp, #592]
      40:	ldrh	w0, [sp, #94]
      44:	ubfx	x0, x0, #0, #15
      48:	and	w0, w0, #0xffff
      4c:	and	x0, x0, #0xffff
      50:	str	x0, [sp, #568]
      54:	ldrb	w0, [sp, #95]
      58:	ubfx	x0, x0, #7, #1
      5c:	and	w0, w0, #0xff
      60:	and	x0, x0, #0xff
      64:	str	x0, [sp, #392]
      68:	ldr	x0, [sp, #568]
      6c:	cmp	x0, #0x0
      70:	b.eq	cc <__divtf3+0xcc>  // b.none
      74:	ldr	x1, [sp, #568]
      78:	mov	x0, #0x7fff                	// #32767
      7c:	cmp	x1, x0
      80:	b.eq	1c0 <__divtf3+0x1c0>  // b.none
      84:	ldr	x0, [sp, #592]
      88:	orr	x0, x0, #0x1000000000000
      8c:	str	x0, [sp, #592]
      90:	ldr	x0, [sp, #592]
      94:	lsl	x1, x0, #3
      98:	ldr	x0, [sp, #584]
      9c:	lsr	x0, x0, #61
      a0:	orr	x0, x1, x0
      a4:	str	x0, [sp, #592]
      a8:	ldr	x0, [sp, #584]
      ac:	lsl	x0, x0, #3
      b0:	str	x0, [sp, #584]
      b4:	ldr	x1, [sp, #568]
      b8:	mov	x0, #0xffffffffffffc001    	// #-16383
      bc:	add	x0, x1, x0
      c0:	str	x0, [sp, #568]
      c4:	str	xzr, [sp, #576]
      c8:	b	204 <__divtf3+0x204>
      cc:	ldr	x1, [sp, #592]
      d0:	ldr	x0, [sp, #584]
      d4:	orr	x0, x1, x0
      d8:	cmp	x0, #0x0
      dc:	b.ne	ec <__divtf3+0xec>  // b.any
      e0:	mov	x0, #0x1                   	// #1
      e4:	str	x0, [sp, #576]
      e8:	b	204 <__divtf3+0x204>
      ec:	ldr	x0, [sp, #592]
      f0:	cmp	x0, #0x0
      f4:	b.eq	10c <__divtf3+0x10c>  // b.none
      f8:	ldr	x0, [sp, #592]
      fc:	clz	x0, x0
     100:	sxtw	x0, w0
     104:	str	x0, [sp, #536]
     108:	b	128 <__divtf3+0x128>
     10c:	ldr	x0, [sp, #584]
     110:	clz	x0, x0
     114:	sxtw	x0, w0
     118:	str	x0, [sp, #536]
     11c:	ldr	x0, [sp, #536]
     120:	add	x0, x0, #0x40
     124:	str	x0, [sp, #536]
     128:	ldr	x0, [sp, #536]
     12c:	sub	x0, x0, #0xf
     130:	str	x0, [sp, #536]
     134:	ldr	x0, [sp, #536]
     138:	cmp	x0, #0x3c
     13c:	b.gt	188 <__divtf3+0x188>
     140:	ldr	x0, [sp, #536]
     144:	add	w0, w0, #0x3
     148:	ldr	x1, [sp, #592]
     14c:	lsl	x1, x1, x0
     150:	ldr	x0, [sp, #536]
     154:	mov	w2, w0
     158:	mov	w0, #0x3d                  	// #61
     15c:	sub	w0, w0, w2
     160:	ldr	x2, [sp, #584]
     164:	lsr	x0, x2, x0
     168:	orr	x0, x1, x0
     16c:	str	x0, [sp, #592]
     170:	ldr	x0, [sp, #536]
     174:	add	w0, w0, #0x3
     178:	ldr	x1, [sp, #584]
     17c:	lsl	x0, x1, x0
     180:	str	x0, [sp, #584]
     184:	b	1a0 <__divtf3+0x1a0>
     188:	ldr	x0, [sp, #536]
     18c:	sub	w0, w0, #0x3d
     190:	ldr	x1, [sp, #584]
     194:	lsl	x0, x1, x0
     198:	str	x0, [sp, #592]
     19c:	str	xzr, [sp, #584]
     1a0:	ldr	x1, [sp, #536]
     1a4:	mov	x0, #0x3ffe                	// #16382
     1a8:	add	x0, x1, x0
     1ac:	ldr	x1, [sp, #568]
     1b0:	sub	x0, x1, x0
     1b4:	str	x0, [sp, #568]
     1b8:	str	xzr, [sp, #576]
     1bc:	b	204 <__divtf3+0x204>
     1c0:	ldr	x1, [sp, #592]
     1c4:	ldr	x0, [sp, #584]
     1c8:	orr	x0, x1, x0
     1cc:	cmp	x0, #0x0
     1d0:	b.ne	1e0 <__divtf3+0x1e0>  // b.any
     1d4:	mov	x0, #0x2                   	// #2
     1d8:	str	x0, [sp, #576]
     1dc:	b	204 <__divtf3+0x204>
     1e0:	mov	x0, #0x3                   	// #3
     1e4:	str	x0, [sp, #576]
     1e8:	ldr	x0, [sp, #592]
     1ec:	and	x0, x0, #0x800000000000
     1f0:	cmp	x0, #0x0
     1f4:	b.ne	204 <__divtf3+0x204>  // b.any
     1f8:	ldr	w0, [sp, #564]
     1fc:	orr	w0, w0, #0x1
     200:	str	w0, [sp, #564]
     204:	nop
     208:	ldr	q0, [sp, #16]
     20c:	str	q0, [sp, #64]
     210:	ldr	x0, [sp, #64]
     214:	str	x0, [sp, #616]
     218:	ldr	x0, [sp, #72]
     21c:	ubfx	x0, x0, #0, #48
     220:	str	x0, [sp, #624]
     224:	ldrh	w0, [sp, #78]
     228:	ubfx	x0, x0, #0, #15
     22c:	and	w0, w0, #0xffff
     230:	and	x0, x0, #0xffff
     234:	str	x0, [sp, #600]
     238:	ldrb	w0, [sp, #79]
     23c:	ubfx	x0, x0, #7, #1
     240:	and	w0, w0, #0xff
     244:	and	x0, x0, #0xff
     248:	str	x0, [sp, #384]
     24c:	ldr	x0, [sp, #600]
     250:	cmp	x0, #0x0
     254:	b.eq	2b0 <__divtf3+0x2b0>  // b.none
     258:	ldr	x1, [sp, #600]
     25c:	mov	x0, #0x7fff                	// #32767
     260:	cmp	x1, x0
     264:	b.eq	3a4 <__divtf3+0x3a4>  // b.none
     268:	ldr	x0, [sp, #624]
     26c:	orr	x0, x0, #0x1000000000000
     270:	str	x0, [sp, #624]
     274:	ldr	x0, [sp, #624]
     278:	lsl	x1, x0, #3
     27c:	ldr	x0, [sp, #616]
     280:	lsr	x0, x0, #61
     284:	orr	x0, x1, x0
     288:	str	x0, [sp, #624]
     28c:	ldr	x0, [sp, #616]
     290:	lsl	x0, x0, #3
     294:	str	x0, [sp, #616]
     298:	ldr	x1, [sp, #600]
     29c:	mov	x0, #0xffffffffffffc001    	// #-16383
     2a0:	add	x0, x1, x0
     2a4:	str	x0, [sp, #600]
     2a8:	str	xzr, [sp, #608]
     2ac:	b	3e8 <__divtf3+0x3e8>
     2b0:	ldr	x1, [sp, #624]
     2b4:	ldr	x0, [sp, #616]
     2b8:	orr	x0, x1, x0
     2bc:	cmp	x0, #0x0
     2c0:	b.ne	2d0 <__divtf3+0x2d0>  // b.any
     2c4:	mov	x0, #0x1                   	// #1
     2c8:	str	x0, [sp, #608]
     2cc:	b	3e8 <__divtf3+0x3e8>
     2d0:	ldr	x0, [sp, #624]
     2d4:	cmp	x0, #0x0
     2d8:	b.eq	2f0 <__divtf3+0x2f0>  // b.none
     2dc:	ldr	x0, [sp, #624]
     2e0:	clz	x0, x0
     2e4:	sxtw	x0, w0
     2e8:	str	x0, [sp, #528]
     2ec:	b	30c <__divtf3+0x30c>
     2f0:	ldr	x0, [sp, #616]
     2f4:	clz	x0, x0
     2f8:	sxtw	x0, w0
     2fc:	str	x0, [sp, #528]
     300:	ldr	x0, [sp, #528]
     304:	add	x0, x0, #0x40
     308:	str	x0, [sp, #528]
     30c:	ldr	x0, [sp, #528]
     310:	sub	x0, x0, #0xf
     314:	str	x0, [sp, #528]
     318:	ldr	x0, [sp, #528]
     31c:	cmp	x0, #0x3c
     320:	b.gt	36c <__divtf3+0x36c>
     324:	ldr	x0, [sp, #528]
     328:	add	w0, w0, #0x3
     32c:	ldr	x1, [sp, #624]
     330:	lsl	x1, x1, x0
     334:	ldr	x0, [sp, #528]
     338:	mov	w2, w0
     33c:	mov	w0, #0x3d                  	// #61
     340:	sub	w0, w0, w2
     344:	ldr	x2, [sp, #616]
     348:	lsr	x0, x2, x0
     34c:	orr	x0, x1, x0
     350:	str	x0, [sp, #624]
     354:	ldr	x0, [sp, #528]
     358:	add	w0, w0, #0x3
     35c:	ldr	x1, [sp, #616]
     360:	lsl	x0, x1, x0
     364:	str	x0, [sp, #616]
     368:	b	384 <__divtf3+0x384>
     36c:	ldr	x0, [sp, #528]
     370:	sub	w0, w0, #0x3d
     374:	ldr	x1, [sp, #616]
     378:	lsl	x0, x1, x0
     37c:	str	x0, [sp, #624]
     380:	str	xzr, [sp, #616]
     384:	ldr	x1, [sp, #528]
     388:	mov	x0, #0x3ffe                	// #16382
     38c:	add	x0, x1, x0
     390:	ldr	x1, [sp, #600]
     394:	sub	x0, x1, x0
     398:	str	x0, [sp, #600]
     39c:	str	xzr, [sp, #608]
     3a0:	b	3e8 <__divtf3+0x3e8>
     3a4:	ldr	x1, [sp, #624]
     3a8:	ldr	x0, [sp, #616]
     3ac:	orr	x0, x1, x0
     3b0:	cmp	x0, #0x0
     3b4:	b.ne	3c4 <__divtf3+0x3c4>  // b.any
     3b8:	mov	x0, #0x2                   	// #2
     3bc:	str	x0, [sp, #608]
     3c0:	b	3e8 <__divtf3+0x3e8>
     3c4:	mov	x0, #0x3                   	// #3
     3c8:	str	x0, [sp, #608]
     3cc:	ldr	x0, [sp, #624]
     3d0:	and	x0, x0, #0x800000000000
     3d4:	cmp	x0, #0x0
     3d8:	b.ne	3e8 <__divtf3+0x3e8>  // b.any
     3dc:	ldr	w0, [sp, #564]
     3e0:	orr	w0, w0, #0x1
     3e4:	str	w0, [sp, #564]
     3e8:	nop
     3ec:	ldr	x1, [sp, #392]
     3f0:	ldr	x0, [sp, #384]
     3f4:	eor	x0, x1, x0
     3f8:	str	x0, [sp, #648]
     3fc:	ldr	x1, [sp, #568]
     400:	ldr	x0, [sp, #600]
     404:	sub	x0, x1, x0
     408:	str	x0, [sp, #640]
     40c:	ldr	x0, [sp, #576]
     410:	lsl	x1, x0, #2
     414:	ldr	x0, [sp, #608]
     418:	orr	x0, x1, x0
     41c:	cmp	x0, #0xf
     420:	b.eq	dd8 <__divtf3+0xdd8>  // b.none
     424:	cmp	x0, #0xf
     428:	b.gt	ed0 <__divtf3+0xed0>
     42c:	cmp	x0, #0xe
     430:	b.gt	ed0 <__divtf3+0xed0>
     434:	cmp	x0, #0xc
     438:	b.ge	e38 <__divtf3+0xe38>  // b.tcont
     43c:	cmp	x0, #0xb
     440:	b.eq	e5c <__divtf3+0xe5c>  // b.none
     444:	cmp	x0, #0xb
     448:	b.gt	ed0 <__divtf3+0xed0>
     44c:	cmp	x0, #0xa
     450:	b.eq	ea4 <__divtf3+0xea4>  // b.none
     454:	cmp	x0, #0xa
     458:	b.gt	ed0 <__divtf3+0xed0>
     45c:	cmp	x0, #0x9
     460:	b.gt	ed0 <__divtf3+0xed0>
     464:	cmp	x0, #0x8
     468:	b.ge	e98 <__divtf3+0xe98>  // b.tcont
     46c:	cmp	x0, #0x7
     470:	b.eq	e5c <__divtf3+0xe5c>  // b.none
     474:	cmp	x0, #0x7
     478:	b.gt	ed0 <__divtf3+0xed0>
     47c:	cmp	x0, #0x6
     480:	b.eq	e80 <__divtf3+0xe80>  // b.none
     484:	cmp	x0, #0x6
     488:	b.gt	ed0 <__divtf3+0xed0>
     48c:	cmp	x0, #0x5
     490:	b.eq	ea4 <__divtf3+0xea4>  // b.none
     494:	cmp	x0, #0x5
     498:	b.gt	ed0 <__divtf3+0xed0>
     49c:	cmp	x0, #0x4
     4a0:	b.eq	e80 <__divtf3+0xe80>  // b.none
     4a4:	cmp	x0, #0x4
     4a8:	b.gt	ed0 <__divtf3+0xed0>
     4ac:	cmp	x0, #0x3
     4b0:	b.eq	e5c <__divtf3+0xe5c>  // b.none
     4b4:	cmp	x0, #0x3
     4b8:	b.gt	ed0 <__divtf3+0xed0>
     4bc:	cmp	x0, #0x2
     4c0:	b.eq	e80 <__divtf3+0xe80>  // b.none
     4c4:	cmp	x0, #0x2
     4c8:	b.gt	ed0 <__divtf3+0xed0>
     4cc:	cmp	x0, #0x0
     4d0:	b.eq	4e0 <__divtf3+0x4e0>  // b.none
     4d4:	cmp	x0, #0x1
     4d8:	b.eq	e8c <__divtf3+0xe8c>  // b.none
     4dc:	b	ed0 <__divtf3+0xed0>
     4e0:	str	xzr, [sp, #632]
     4e4:	ldr	x1, [sp, #592]
     4e8:	ldr	x0, [sp, #624]
     4ec:	cmp	x1, x0
     4f0:	b.hi	514 <__divtf3+0x514>  // b.pmore
     4f4:	ldr	x1, [sp, #592]
     4f8:	ldr	x0, [sp, #624]
     4fc:	cmp	x1, x0
     500:	b.ne	548 <__divtf3+0x548>  // b.any
     504:	ldr	x1, [sp, #584]
     508:	ldr	x0, [sp, #616]
     50c:	cmp	x1, x0
     510:	b.cc	548 <__divtf3+0x548>  // b.lo, b.ul, b.last
     514:	ldr	x0, [sp, #592]
     518:	lsr	x0, x0, #1
     51c:	str	x0, [sp, #520]
     520:	ldr	x0, [sp, #592]
     524:	lsl	x1, x0, #63
     528:	ldr	x0, [sp, #584]
     52c:	lsr	x0, x0, #1
     530:	orr	x0, x1, x0
     534:	str	x0, [sp, #512]
     538:	ldr	x0, [sp, #584]
     53c:	lsl	x0, x0, #63
     540:	str	x0, [sp, #504]
     544:	b	568 <__divtf3+0x568>
     548:	ldr	x0, [sp, #640]
     54c:	sub	x0, x0, #0x1
     550:	str	x0, [sp, #640]
     554:	ldr	x0, [sp, #592]
     558:	str	x0, [sp, #520]
     55c:	ldr	x0, [sp, #584]
     560:	str	x0, [sp, #512]
     564:	str	xzr, [sp, #504]
     568:	ldr	x0, [sp, #624]
     56c:	lsl	x1, x0, #12
     570:	ldr	x0, [sp, #616]
     574:	lsr	x0, x0, #52
     578:	orr	x0, x1, x0
     57c:	str	x0, [sp, #624]
     580:	ldr	x0, [sp, #616]
     584:	lsl	x0, x0, #12
     588:	str	x0, [sp, #616]
     58c:	ldr	x0, [sp, #624]
     590:	lsr	x0, x0, #32
     594:	str	x0, [sp, #376]
     598:	ldr	x0, [sp, #624]
     59c:	and	x0, x0, #0xffffffff
     5a0:	str	x0, [sp, #368]
     5a4:	ldr	x0, [sp, #520]
     5a8:	ldr	x1, [sp, #376]
     5ac:	udiv	x2, x0, x1
     5b0:	ldr	x1, [sp, #376]
     5b4:	mul	x1, x2, x1
     5b8:	sub	x0, x0, x1
     5bc:	str	x0, [sp, #464]
     5c0:	ldr	x1, [sp, #520]
     5c4:	ldr	x0, [sp, #376]
     5c8:	udiv	x0, x1, x0
     5cc:	str	x0, [sp, #480]
     5d0:	ldr	x1, [sp, #480]
     5d4:	ldr	x0, [sp, #368]
     5d8:	mul	x0, x1, x0
     5dc:	str	x0, [sp, #360]
     5e0:	ldr	x0, [sp, #464]
     5e4:	lsl	x1, x0, #32
     5e8:	ldr	x0, [sp, #512]
     5ec:	lsr	x0, x0, #32
     5f0:	orr	x0, x1, x0
     5f4:	str	x0, [sp, #464]
     5f8:	ldr	x1, [sp, #464]
     5fc:	ldr	x0, [sp, #360]
     600:	cmp	x1, x0
     604:	b.cs	660 <__divtf3+0x660>  // b.hs, b.nlast
     608:	ldr	x0, [sp, #480]
     60c:	sub	x0, x0, #0x1
     610:	str	x0, [sp, #480]
     614:	ldr	x1, [sp, #464]
     618:	ldr	x0, [sp, #624]
     61c:	add	x0, x1, x0
     620:	str	x0, [sp, #464]
     624:	ldr	x1, [sp, #464]
     628:	ldr	x0, [sp, #624]
     62c:	cmp	x1, x0
     630:	b.cc	660 <__divtf3+0x660>  // b.lo, b.ul, b.last
     634:	ldr	x1, [sp, #464]
     638:	ldr	x0, [sp, #360]
     63c:	cmp	x1, x0
     640:	b.cs	660 <__divtf3+0x660>  // b.hs, b.nlast
     644:	ldr	x0, [sp, #480]
     648:	sub	x0, x0, #0x1
     64c:	str	x0, [sp, #480]
     650:	ldr	x1, [sp, #464]
     654:	ldr	x0, [sp, #624]
     658:	add	x0, x1, x0
     65c:	str	x0, [sp, #464]
     660:	ldr	x1, [sp, #464]
     664:	ldr	x0, [sp, #360]
     668:	sub	x0, x1, x0
     66c:	str	x0, [sp, #464]
     670:	ldr	x0, [sp, #464]
     674:	ldr	x1, [sp, #376]
     678:	udiv	x2, x0, x1
     67c:	ldr	x1, [sp, #376]
     680:	mul	x1, x2, x1
     684:	sub	x0, x0, x1
     688:	str	x0, [sp, #456]
     68c:	ldr	x1, [sp, #464]
     690:	ldr	x0, [sp, #376]
     694:	udiv	x0, x1, x0
     698:	str	x0, [sp, #472]
     69c:	ldr	x1, [sp, #472]
     6a0:	ldr	x0, [sp, #368]
     6a4:	mul	x0, x1, x0
     6a8:	str	x0, [sp, #360]
     6ac:	ldr	x0, [sp, #456]
     6b0:	lsl	x1, x0, #32
     6b4:	ldr	x0, [sp, #512]
     6b8:	and	x0, x0, #0xffffffff
     6bc:	orr	x0, x1, x0
     6c0:	str	x0, [sp, #456]
     6c4:	ldr	x1, [sp, #456]
     6c8:	ldr	x0, [sp, #360]
     6cc:	cmp	x1, x0
     6d0:	b.cs	72c <__divtf3+0x72c>  // b.hs, b.nlast
     6d4:	ldr	x0, [sp, #472]
     6d8:	sub	x0, x0, #0x1
     6dc:	str	x0, [sp, #472]
     6e0:	ldr	x1, [sp, #456]
     6e4:	ldr	x0, [sp, #624]
     6e8:	add	x0, x1, x0
     6ec:	str	x0, [sp, #456]
     6f0:	ldr	x1, [sp, #456]
     6f4:	ldr	x0, [sp, #624]
     6f8:	cmp	x1, x0
     6fc:	b.cc	72c <__divtf3+0x72c>  // b.lo, b.ul, b.last
     700:	ldr	x1, [sp, #456]
     704:	ldr	x0, [sp, #360]
     708:	cmp	x1, x0
     70c:	b.cs	72c <__divtf3+0x72c>  // b.hs, b.nlast
     710:	ldr	x0, [sp, #472]
     714:	sub	x0, x0, #0x1
     718:	str	x0, [sp, #472]
     71c:	ldr	x1, [sp, #456]
     720:	ldr	x0, [sp, #624]
     724:	add	x0, x1, x0
     728:	str	x0, [sp, #456]
     72c:	ldr	x1, [sp, #456]
     730:	ldr	x0, [sp, #360]
     734:	sub	x0, x1, x0
     738:	str	x0, [sp, #456]
     73c:	ldr	x0, [sp, #480]
     740:	lsl	x0, x0, #32
     744:	ldr	x1, [sp, #472]
     748:	orr	x0, x1, x0
     74c:	str	x0, [sp, #544]
     750:	ldr	x0, [sp, #456]
     754:	str	x0, [sp, #496]
     758:	ldr	x0, [sp, #544]
     75c:	str	w0, [sp, #356]
     760:	ldr	x0, [sp, #544]
     764:	lsr	x0, x0, #32
     768:	str	w0, [sp, #352]
     76c:	ldr	x0, [sp, #616]
     770:	str	w0, [sp, #348]
     774:	ldr	x0, [sp, #616]
     778:	lsr	x0, x0, #32
     77c:	str	w0, [sp, #344]
     780:	ldr	w1, [sp, #356]
     784:	ldr	w0, [sp, #348]
     788:	mul	x0, x1, x0
     78c:	str	x0, [sp, #336]
     790:	ldr	w1, [sp, #356]
     794:	ldr	w0, [sp, #344]
     798:	mul	x0, x1, x0
     79c:	str	x0, [sp, #328]
     7a0:	ldr	w1, [sp, #352]
     7a4:	ldr	w0, [sp, #348]
     7a8:	mul	x0, x1, x0
     7ac:	str	x0, [sp, #320]
     7b0:	ldr	w1, [sp, #352]
     7b4:	ldr	w0, [sp, #344]
     7b8:	mul	x0, x1, x0
     7bc:	str	x0, [sp, #448]
     7c0:	ldr	x0, [sp, #336]
     7c4:	lsr	x0, x0, #32
     7c8:	ldr	x1, [sp, #328]
     7cc:	add	x0, x1, x0
     7d0:	str	x0, [sp, #328]
     7d4:	ldr	x1, [sp, #328]
     7d8:	ldr	x0, [sp, #320]
     7dc:	add	x0, x1, x0
     7e0:	str	x0, [sp, #328]
     7e4:	ldr	x1, [sp, #328]
     7e8:	ldr	x0, [sp, #320]
     7ec:	cmp	x1, x0
     7f0:	b.cs	804 <__divtf3+0x804>  // b.hs, b.nlast
     7f4:	ldr	x1, [sp, #448]
     7f8:	mov	x0, #0x100000000           	// #4294967296
     7fc:	add	x0, x1, x0
     800:	str	x0, [sp, #448]
     804:	ldr	x0, [sp, #328]
     808:	lsr	x0, x0, #32
     80c:	ldr	x1, [sp, #448]
     810:	add	x0, x1, x0
     814:	str	x0, [sp, #312]
     818:	ldr	x0, [sp, #328]
     81c:	and	x0, x0, #0xffffffff
     820:	lsl	x1, x0, #32
     824:	ldr	x0, [sp, #336]
     828:	and	x0, x0, #0xffffffff
     82c:	add	x0, x1, x0
     830:	str	x0, [sp, #304]
     834:	ldr	x0, [sp, #504]
     838:	str	x0, [sp, #488]
     83c:	ldr	x1, [sp, #312]
     840:	ldr	x0, [sp, #496]
     844:	cmp	x1, x0
     848:	b.hi	86c <__divtf3+0x86c>  // b.pmore
     84c:	ldr	x1, [sp, #312]
     850:	ldr	x0, [sp, #496]
     854:	cmp	x1, x0
     858:	b.ne	96c <__divtf3+0x96c>  // b.any
     85c:	ldr	x1, [sp, #304]
     860:	ldr	x0, [sp, #488]
     864:	cmp	x1, x0
     868:	b.ls	96c <__divtf3+0x96c>  // b.plast
     86c:	ldr	x0, [sp, #544]
     870:	sub	x0, x0, #0x1
     874:	str	x0, [sp, #544]
     878:	ldr	x1, [sp, #616]
     87c:	ldr	x0, [sp, #488]
     880:	add	x0, x1, x0
     884:	str	x0, [sp, #296]
     888:	ldr	x1, [sp, #624]
     88c:	ldr	x0, [sp, #496]
     890:	add	x1, x1, x0
     894:	ldr	x2, [sp, #296]
     898:	ldr	x0, [sp, #616]
     89c:	cmp	x2, x0
     8a0:	cset	w0, cc  // cc = lo, ul, last
     8a4:	and	w0, w0, #0xff
     8a8:	and	x0, x0, #0xff
     8ac:	add	x0, x1, x0
     8b0:	str	x0, [sp, #496]
     8b4:	ldr	x0, [sp, #296]
     8b8:	str	x0, [sp, #488]
     8bc:	ldr	x1, [sp, #496]
     8c0:	ldr	x0, [sp, #624]
     8c4:	cmp	x1, x0
     8c8:	b.hi	8ec <__divtf3+0x8ec>  // b.pmore
     8cc:	ldr	x1, [sp, #496]
     8d0:	ldr	x0, [sp, #624]
     8d4:	cmp	x1, x0
     8d8:	b.ne	96c <__divtf3+0x96c>  // b.any
     8dc:	ldr	x1, [sp, #488]
     8e0:	ldr	x0, [sp, #616]
     8e4:	cmp	x1, x0
     8e8:	b.cc	96c <__divtf3+0x96c>  // b.lo, b.ul, b.last
     8ec:	ldr	x1, [sp, #312]
     8f0:	ldr	x0, [sp, #496]
     8f4:	cmp	x1, x0
     8f8:	b.hi	91c <__divtf3+0x91c>  // b.pmore
     8fc:	ldr	x1, [sp, #312]
     900:	ldr	x0, [sp, #496]
     904:	cmp	x1, x0
     908:	b.ne	96c <__divtf3+0x96c>  // b.any
     90c:	ldr	x1, [sp, #304]
     910:	ldr	x0, [sp, #488]
     914:	cmp	x1, x0
     918:	b.ls	96c <__divtf3+0x96c>  // b.plast
     91c:	ldr	x0, [sp, #544]
     920:	sub	x0, x0, #0x1
     924:	str	x0, [sp, #544]
     928:	ldr	x1, [sp, #616]
     92c:	ldr	x0, [sp, #488]
     930:	add	x0, x1, x0
     934:	str	x0, [sp, #288]
     938:	ldr	x1, [sp, #624]
     93c:	ldr	x0, [sp, #496]
     940:	add	x1, x1, x0
     944:	ldr	x2, [sp, #288]
     948:	ldr	x0, [sp, #616]
     94c:	cmp	x2, x0
     950:	cset	w0, cc  // cc = lo, ul, last
     954:	and	w0, w0, #0xff
     958:	and	x0, x0, #0xff
     95c:	add	x0, x1, x0
     960:	str	x0, [sp, #496]
     964:	ldr	x0, [sp, #288]
     968:	str	x0, [sp, #488]
     96c:	ldr	x1, [sp, #488]
     970:	ldr	x0, [sp, #304]
     974:	sub	x0, x1, x0
     978:	str	x0, [sp, #280]
     97c:	ldr	x1, [sp, #496]
     980:	ldr	x0, [sp, #312]
     984:	sub	x1, x1, x0
     988:	ldr	x2, [sp, #280]
     98c:	ldr	x0, [sp, #488]
     990:	cmp	x2, x0
     994:	cset	w0, hi  // hi = pmore
     998:	and	w0, w0, #0xff
     99c:	and	x0, x0, #0xff
     9a0:	sub	x0, x1, x0
     9a4:	str	x0, [sp, #496]
     9a8:	ldr	x0, [sp, #280]
     9ac:	str	x0, [sp, #488]
     9b0:	ldr	x1, [sp, #496]
     9b4:	ldr	x0, [sp, #624]
     9b8:	cmp	x1, x0
     9bc:	b.ne	9cc <__divtf3+0x9cc>  // b.any
     9c0:	mov	x0, #0xffffffffffffffff    	// #-1
     9c4:	str	x0, [sp, #552]
     9c8:	b	ed0 <__divtf3+0xed0>
     9cc:	ldr	x0, [sp, #624]
     9d0:	lsr	x0, x0, #32
     9d4:	str	x0, [sp, #272]
     9d8:	ldr	x0, [sp, #624]
     9dc:	and	x0, x0, #0xffffffff
     9e0:	str	x0, [sp, #264]
     9e4:	ldr	x0, [sp, #496]
     9e8:	ldr	x1, [sp, #272]
     9ec:	udiv	x2, x0, x1
     9f0:	ldr	x1, [sp, #272]
     9f4:	mul	x1, x2, x1
     9f8:	sub	x0, x0, x1
     9fc:	str	x0, [sp, #424]
     a00:	ldr	x1, [sp, #496]
     a04:	ldr	x0, [sp, #272]
     a08:	udiv	x0, x1, x0
     a0c:	str	x0, [sp, #440]
     a10:	ldr	x1, [sp, #440]
     a14:	ldr	x0, [sp, #264]
     a18:	mul	x0, x1, x0
     a1c:	str	x0, [sp, #256]
     a20:	ldr	x0, [sp, #424]
     a24:	lsl	x1, x0, #32
     a28:	ldr	x0, [sp, #488]
     a2c:	lsr	x0, x0, #32
     a30:	orr	x0, x1, x0
     a34:	str	x0, [sp, #424]
     a38:	ldr	x1, [sp, #424]
     a3c:	ldr	x0, [sp, #256]
     a40:	cmp	x1, x0
     a44:	b.cs	aa0 <__divtf3+0xaa0>  // b.hs, b.nlast
     a48:	ldr	x0, [sp, #440]
     a4c:	sub	x0, x0, #0x1
     a50:	str	x0, [sp, #440]
     a54:	ldr	x1, [sp, #424]
     a58:	ldr	x0, [sp, #624]
     a5c:	add	x0, x1, x0
     a60:	str	x0, [sp, #424]
     a64:	ldr	x1, [sp, #424]
     a68:	ldr	x0, [sp, #624]
     a6c:	cmp	x1, x0
     a70:	b.cc	aa0 <__divtf3+0xaa0>  // b.lo, b.ul, b.last
     a74:	ldr	x1, [sp, #424]
     a78:	ldr	x0, [sp, #256]
     a7c:	cmp	x1, x0
     a80:	b.cs	aa0 <__divtf3+0xaa0>  // b.hs, b.nlast
     a84:	ldr	x0, [sp, #440]
     a88:	sub	x0, x0, #0x1
     a8c:	str	x0, [sp, #440]
     a90:	ldr	x1, [sp, #424]
     a94:	ldr	x0, [sp, #624]
     a98:	add	x0, x1, x0
     a9c:	str	x0, [sp, #424]
     aa0:	ldr	x1, [sp, #424]
     aa4:	ldr	x0, [sp, #256]
     aa8:	sub	x0, x1, x0
     aac:	str	x0, [sp, #424]
     ab0:	ldr	x0, [sp, #424]
     ab4:	ldr	x1, [sp, #272]
     ab8:	udiv	x2, x0, x1
     abc:	ldr	x1, [sp, #272]
     ac0:	mul	x1, x2, x1
     ac4:	sub	x0, x0, x1
     ac8:	str	x0, [sp, #416]
     acc:	ldr	x1, [sp, #424]
     ad0:	ldr	x0, [sp, #272]
     ad4:	udiv	x0, x1, x0
     ad8:	str	x0, [sp, #432]
     adc:	ldr	x1, [sp, #432]
     ae0:	ldr	x0, [sp, #264]
     ae4:	mul	x0, x1, x0
     ae8:	str	x0, [sp, #256]
     aec:	ldr	x0, [sp, #416]
     af0:	lsl	x1, x0, #32
     af4:	ldr	x0, [sp, #488]
     af8:	and	x0, x0, #0xffffffff
     afc:	orr	x0, x1, x0
     b00:	str	x0, [sp, #416]
     b04:	ldr	x1, [sp, #416]
     b08:	ldr	x0, [sp, #256]
     b0c:	cmp	x1, x0
     b10:	b.cs	b6c <__divtf3+0xb6c>  // b.hs, b.nlast
     b14:	ldr	x0, [sp, #432]
     b18:	sub	x0, x0, #0x1
     b1c:	str	x0, [sp, #432]
     b20:	ldr	x1, [sp, #416]
     b24:	ldr	x0, [sp, #624]
     b28:	add	x0, x1, x0
     b2c:	str	x0, [sp, #416]
     b30:	ldr	x1, [sp, #416]
     b34:	ldr	x0, [sp, #624]
     b38:	cmp	x1, x0
     b3c:	b.cc	b6c <__divtf3+0xb6c>  // b.lo, b.ul, b.last
     b40:	ldr	x1, [sp, #416]
     b44:	ldr	x0, [sp, #256]
     b48:	cmp	x1, x0
     b4c:	b.cs	b6c <__divtf3+0xb6c>  // b.hs, b.nlast
     b50:	ldr	x0, [sp, #432]
     b54:	sub	x0, x0, #0x1
     b58:	str	x0, [sp, #432]
     b5c:	ldr	x1, [sp, #416]
     b60:	ldr	x0, [sp, #624]
     b64:	add	x0, x1, x0
     b68:	str	x0, [sp, #416]
     b6c:	ldr	x1, [sp, #416]
     b70:	ldr	x0, [sp, #256]
     b74:	sub	x0, x1, x0
     b78:	str	x0, [sp, #416]
     b7c:	ldr	x0, [sp, #440]
     b80:	lsl	x0, x0, #32
     b84:	ldr	x1, [sp, #432]
     b88:	orr	x0, x1, x0
     b8c:	str	x0, [sp, #552]
     b90:	ldr	x0, [sp, #416]
     b94:	str	x0, [sp, #496]
     b98:	ldr	x0, [sp, #552]
     b9c:	str	w0, [sp, #252]
     ba0:	ldr	x0, [sp, #552]
     ba4:	lsr	x0, x0, #32
     ba8:	str	w0, [sp, #248]
     bac:	ldr	x0, [sp, #616]
     bb0:	str	w0, [sp, #244]
     bb4:	ldr	x0, [sp, #616]
     bb8:	lsr	x0, x0, #32
     bbc:	str	w0, [sp, #240]
     bc0:	ldr	w1, [sp, #252]
     bc4:	ldr	w0, [sp, #244]
     bc8:	mul	x0, x1, x0
     bcc:	str	x0, [sp, #232]
     bd0:	ldr	w1, [sp, #252]
     bd4:	ldr	w0, [sp, #240]
     bd8:	mul	x0, x1, x0
     bdc:	str	x0, [sp, #224]
     be0:	ldr	w1, [sp, #248]
     be4:	ldr	w0, [sp, #244]
     be8:	mul	x0, x1, x0
     bec:	str	x0, [sp, #216]
     bf0:	ldr	w1, [sp, #248]
     bf4:	ldr	w0, [sp, #240]
     bf8:	mul	x0, x1, x0
     bfc:	str	x0, [sp, #408]
     c00:	ldr	x0, [sp, #232]
     c04:	lsr	x0, x0, #32
     c08:	ldr	x1, [sp, #224]
     c0c:	add	x0, x1, x0
     c10:	str	x0, [sp, #224]
     c14:	ldr	x1, [sp, #224]
     c18:	ldr	x0, [sp, #216]
     c1c:	add	x0, x1, x0
     c20:	str	x0, [sp, #224]
     c24:	ldr	x1, [sp, #224]
     c28:	ldr	x0, [sp, #216]
     c2c:	cmp	x1, x0
     c30:	b.cs	c44 <__divtf3+0xc44>  // b.hs, b.nlast
     c34:	ldr	x1, [sp, #408]
     c38:	mov	x0, #0x100000000           	// #4294967296
     c3c:	add	x0, x1, x0
     c40:	str	x0, [sp, #408]
     c44:	ldr	x0, [sp, #224]
     c48:	lsr	x0, x0, #32
     c4c:	ldr	x1, [sp, #408]
     c50:	add	x0, x1, x0
     c54:	str	x0, [sp, #312]
     c58:	ldr	x0, [sp, #224]
     c5c:	and	x0, x0, #0xffffffff
     c60:	lsl	x1, x0, #32
     c64:	ldr	x0, [sp, #232]
     c68:	and	x0, x0, #0xffffffff
     c6c:	add	x0, x1, x0
     c70:	str	x0, [sp, #304]
     c74:	str	xzr, [sp, #488]
     c78:	ldr	x1, [sp, #312]
     c7c:	ldr	x0, [sp, #496]
     c80:	cmp	x1, x0
     c84:	b.hi	ca8 <__divtf3+0xca8>  // b.pmore
     c88:	ldr	x1, [sp, #312]
     c8c:	ldr	x0, [sp, #496]
     c90:	cmp	x1, x0
     c94:	b.ne	da8 <__divtf3+0xda8>  // b.any
     c98:	ldr	x1, [sp, #304]
     c9c:	ldr	x0, [sp, #488]
     ca0:	cmp	x1, x0
     ca4:	b.ls	da8 <__divtf3+0xda8>  // b.plast
     ca8:	ldr	x0, [sp, #552]
     cac:	sub	x0, x0, #0x1
     cb0:	str	x0, [sp, #552]
     cb4:	ldr	x1, [sp, #616]
     cb8:	ldr	x0, [sp, #488]
     cbc:	add	x0, x1, x0
     cc0:	str	x0, [sp, #208]
     cc4:	ldr	x1, [sp, #624]
     cc8:	ldr	x0, [sp, #496]
     ccc:	add	x1, x1, x0
     cd0:	ldr	x2, [sp, #208]
     cd4:	ldr	x0, [sp, #616]
     cd8:	cmp	x2, x0
     cdc:	cset	w0, cc  // cc = lo, ul, last
     ce0:	and	w0, w0, #0xff
     ce4:	and	x0, x0, #0xff
     ce8:	add	x0, x1, x0
     cec:	str	x0, [sp, #496]
     cf0:	ldr	x0, [sp, #208]
     cf4:	str	x0, [sp, #488]
     cf8:	ldr	x1, [sp, #496]
     cfc:	ldr	x0, [sp, #624]
     d00:	cmp	x1, x0
     d04:	b.hi	d28 <__divtf3+0xd28>  // b.pmore
     d08:	ldr	x1, [sp, #496]
     d0c:	ldr	x0, [sp, #624]
     d10:	cmp	x1, x0
     d14:	b.ne	da8 <__divtf3+0xda8>  // b.any
     d18:	ldr	x1, [sp, #488]
     d1c:	ldr	x0, [sp, #616]
     d20:	cmp	x1, x0
     d24:	b.cc	da8 <__divtf3+0xda8>  // b.lo, b.ul, b.last
     d28:	ldr	x1, [sp, #312]
     d2c:	ldr	x0, [sp, #496]
     d30:	cmp	x1, x0
     d34:	b.hi	d58 <__divtf3+0xd58>  // b.pmore
     d38:	ldr	x1, [sp, #312]
     d3c:	ldr	x0, [sp, #496]
     d40:	cmp	x1, x0
     d44:	b.ne	da8 <__divtf3+0xda8>  // b.any
     d48:	ldr	x1, [sp, #304]
     d4c:	ldr	x0, [sp, #488]
     d50:	cmp	x1, x0
     d54:	b.ls	da8 <__divtf3+0xda8>  // b.plast
     d58:	ldr	x0, [sp, #552]
     d5c:	sub	x0, x0, #0x1
     d60:	str	x0, [sp, #552]
     d64:	ldr	x1, [sp, #616]
     d68:	ldr	x0, [sp, #488]
     d6c:	add	x0, x1, x0
     d70:	str	x0, [sp, #200]
     d74:	ldr	x1, [sp, #624]
     d78:	ldr	x0, [sp, #496]
     d7c:	add	x1, x1, x0
     d80:	ldr	x2, [sp, #200]
     d84:	ldr	x0, [sp, #616]
     d88:	cmp	x2, x0
     d8c:	cset	w0, cc  // cc = lo, ul, last
     d90:	and	w0, w0, #0xff
     d94:	and	x0, x0, #0xff
     d98:	add	x0, x1, x0
     d9c:	str	x0, [sp, #496]
     da0:	ldr	x0, [sp, #200]
     da4:	str	x0, [sp, #488]
     da8:	ldr	x1, [sp, #496]
     dac:	ldr	x0, [sp, #312]
     db0:	cmp	x1, x0
     db4:	b.ne	dc8 <__divtf3+0xdc8>  // b.any
     db8:	ldr	x1, [sp, #488]
     dbc:	ldr	x0, [sp, #304]
     dc0:	cmp	x1, x0
     dc4:	b.eq	ed0 <__divtf3+0xed0>  // b.none
     dc8:	ldr	x0, [sp, #552]
     dcc:	orr	x0, x0, #0x1
     dd0:	str	x0, [sp, #552]
     dd4:	b	ed0 <__divtf3+0xed0>
     dd8:	ldr	x0, [sp, #592]
     ddc:	and	x0, x0, #0x800000000000
     de0:	cmp	x0, #0x0
     de4:	b.eq	e14 <__divtf3+0xe14>  // b.none
     de8:	ldr	x0, [sp, #624]
     dec:	and	x0, x0, #0x800000000000
     df0:	cmp	x0, #0x0
     df4:	b.ne	e14 <__divtf3+0xe14>  // b.any
     df8:	ldr	x0, [sp, #384]
     dfc:	str	x0, [sp, #648]
     e00:	ldr	x0, [sp, #616]
     e04:	str	x0, [sp, #552]
     e08:	ldr	x0, [sp, #624]
     e0c:	str	x0, [sp, #544]
     e10:	b	e2c <__divtf3+0xe2c>
     e14:	ldr	x0, [sp, #392]
     e18:	str	x0, [sp, #648]
     e1c:	ldr	x0, [sp, #584]
     e20:	str	x0, [sp, #552]
     e24:	ldr	x0, [sp, #592]
     e28:	str	x0, [sp, #544]
     e2c:	mov	x0, #0x3                   	// #3
     e30:	str	x0, [sp, #632]
     e34:	b	ed0 <__divtf3+0xed0>
     e38:	ldr	x0, [sp, #392]
     e3c:	str	x0, [sp, #648]
     e40:	ldr	x0, [sp, #584]
     e44:	str	x0, [sp, #552]
     e48:	ldr	x0, [sp, #592]
     e4c:	str	x0, [sp, #544]
     e50:	ldr	x0, [sp, #576]
     e54:	str	x0, [sp, #632]
     e58:	b	ed0 <__divtf3+0xed0>
     e5c:	ldr	x0, [sp, #384]
     e60:	str	x0, [sp, #648]
     e64:	ldr	x0, [sp, #616]
     e68:	str	x0, [sp, #552]
     e6c:	ldr	x0, [sp, #624]
     e70:	str	x0, [sp, #544]
     e74:	ldr	x0, [sp, #608]
     e78:	str	x0, [sp, #632]
     e7c:	b	ed0 <__divtf3+0xed0>
     e80:	mov	x0, #0x1                   	// #1
     e84:	str	x0, [sp, #632]
     e88:	b	ed0 <__divtf3+0xed0>
     e8c:	ldr	w0, [sp, #564]
     e90:	orr	w0, w0, #0x2
     e94:	str	w0, [sp, #564]
     e98:	mov	x0, #0x2                   	// #2
     e9c:	str	x0, [sp, #632]
     ea0:	b	ed0 <__divtf3+0xed0>
     ea4:	str	xzr, [sp, #648]
     ea8:	mov	x0, #0x3                   	// #3
     eac:	str	x0, [sp, #632]
     eb0:	mov	x0, #0xffffffffffffffff    	// #-1
     eb4:	str	x0, [sp, #552]
     eb8:	mov	x0, #0xffffffffffff        	// #281474976710655
     ebc:	str	x0, [sp, #544]
     ec0:	ldr	w0, [sp, #564]
     ec4:	orr	w0, w0, #0x1
     ec8:	str	w0, [sp, #564]
     ecc:	b	ed0 <__divtf3+0xed0>
     ed0:	nop
     ed4:	ldr	x0, [sp, #632]
     ed8:	cmp	x0, #0x3
     edc:	b.eq	1670 <__divtf3+0x1670>  // b.none
     ee0:	ldr	x0, [sp, #632]
     ee4:	cmp	x0, #0x3
     ee8:	b.gt	1688 <__divtf3+0x1688>
     eec:	ldr	x0, [sp, #632]
     ef0:	cmp	x0, #0x2
     ef4:	b.eq	165c <__divtf3+0x165c>  // b.none
     ef8:	ldr	x0, [sp, #632]
     efc:	cmp	x0, #0x2
     f00:	b.gt	1688 <__divtf3+0x1688>
     f04:	ldr	x0, [sp, #632]
     f08:	cmp	x0, #0x0
     f0c:	b.eq	f20 <__divtf3+0xf20>  // b.none
     f10:	ldr	x0, [sp, #632]
     f14:	cmp	x0, #0x1
     f18:	b.eq	164c <__divtf3+0x164c>  // b.none
     f1c:	b	1688 <__divtf3+0x1688>
     f20:	ldr	x1, [sp, #640]
     f24:	mov	x0, #0x3fff                	// #16383
     f28:	add	x0, x1, x0
     f2c:	str	x0, [sp, #640]
     f30:	ldr	x0, [sp, #640]
     f34:	cmp	x0, #0x0
     f38:	b.le	11b4 <__divtf3+0x11b4>
     f3c:	ldr	x0, [sp, #552]
     f40:	and	x0, x0, #0x7
     f44:	cmp	x0, #0x0
     f48:	b.eq	1090 <__divtf3+0x1090>  // b.none
     f4c:	ldr	w0, [sp, #564]
     f50:	orr	w0, w0, #0x10
     f54:	str	w0, [sp, #564]
     f58:	ldr	x0, [sp, #400]
     f5c:	and	x0, x0, #0xc00000
     f60:	cmp	x0, #0xc00, lsl #12
     f64:	b.eq	1098 <__divtf3+0x1098>  // b.none
     f68:	cmp	x0, #0xc00, lsl #12
     f6c:	b.hi	109c <__divtf3+0x109c>  // b.pmore
     f70:	cmp	x0, #0x800, lsl #12
     f74:	b.eq	1038 <__divtf3+0x1038>  // b.none
     f78:	cmp	x0, #0x800, lsl #12
     f7c:	b.hi	109c <__divtf3+0x109c>  // b.pmore
     f80:	cmp	x0, #0x0
     f84:	b.eq	f94 <__divtf3+0xf94>  // b.none
     f88:	cmp	x0, #0x400, lsl #12
     f8c:	b.eq	fe0 <__divtf3+0xfe0>  // b.none
     f90:	b	109c <__divtf3+0x109c>
     f94:	ldr	x0, [sp, #552]
     f98:	and	x0, x0, #0xf
     f9c:	cmp	x0, #0x4
     fa0:	b.eq	1098 <__divtf3+0x1098>  // b.none
     fa4:	ldr	x0, [sp, #552]
     fa8:	add	x0, x0, #0x4
     fac:	str	x0, [sp, #120]
     fb0:	ldr	x1, [sp, #120]
     fb4:	ldr	x0, [sp, #552]
     fb8:	cmp	x1, x0
     fbc:	cset	w0, cc  // cc = lo, ul, last
     fc0:	and	w0, w0, #0xff
     fc4:	and	x0, x0, #0xff
     fc8:	ldr	x1, [sp, #544]
     fcc:	add	x0, x1, x0
     fd0:	str	x0, [sp, #544]
     fd4:	ldr	x0, [sp, #120]
     fd8:	str	x0, [sp, #552]
     fdc:	b	1098 <__divtf3+0x1098>
     fe0:	ldr	x0, [sp, #648]
     fe4:	cmp	x0, #0x0
     fe8:	b.ne	1098 <__divtf3+0x1098>  // b.any
     fec:	ldr	x0, [sp, #552]
     ff0:	and	x0, x0, #0x7
     ff4:	cmp	x0, #0x0
     ff8:	b.eq	1098 <__divtf3+0x1098>  // b.none
     ffc:	ldr	x0, [sp, #552]
    1000:	add	x0, x0, #0x8
    1004:	str	x0, [sp, #128]
    1008:	ldr	x1, [sp, #128]
    100c:	ldr	x0, [sp, #552]
    1010:	cmp	x1, x0
    1014:	cset	w0, cc  // cc = lo, ul, last
    1018:	and	w0, w0, #0xff
    101c:	and	x0, x0, #0xff
    1020:	ldr	x1, [sp, #544]
    1024:	add	x0, x1, x0
    1028:	str	x0, [sp, #544]
    102c:	ldr	x0, [sp, #128]
    1030:	str	x0, [sp, #552]
    1034:	b	1098 <__divtf3+0x1098>
    1038:	ldr	x0, [sp, #648]
    103c:	cmp	x0, #0x0
    1040:	b.eq	1098 <__divtf3+0x1098>  // b.none
    1044:	ldr	x0, [sp, #552]
    1048:	and	x0, x0, #0x7
    104c:	cmp	x0, #0x0
    1050:	b.eq	1098 <__divtf3+0x1098>  // b.none
    1054:	ldr	x0, [sp, #552]
    1058:	add	x0, x0, #0x8
    105c:	str	x0, [sp, #136]
    1060:	ldr	x1, [sp, #136]
    1064:	ldr	x0, [sp, #552]
    1068:	cmp	x1, x0
    106c:	cset	w0, cc  // cc = lo, ul, last
    1070:	and	w0, w0, #0xff
    1074:	and	x0, x0, #0xff
    1078:	ldr	x1, [sp, #544]
    107c:	add	x0, x1, x0
    1080:	str	x0, [sp, #544]
    1084:	ldr	x0, [sp, #136]
    1088:	str	x0, [sp, #552]
    108c:	b	1098 <__divtf3+0x1098>
    1090:	nop
    1094:	b	109c <__divtf3+0x109c>
    1098:	nop
    109c:	ldr	x0, [sp, #544]
    10a0:	and	x0, x0, #0x10000000000000
    10a4:	cmp	x0, #0x0
    10a8:	b.eq	10c4 <__divtf3+0x10c4>  // b.none
    10ac:	ldr	x0, [sp, #544]
    10b0:	and	x0, x0, #0xffefffffffffffff
    10b4:	str	x0, [sp, #544]
    10b8:	ldr	x0, [sp, #640]
    10bc:	add	x0, x0, #0x1
    10c0:	str	x0, [sp, #640]
    10c4:	ldr	x0, [sp, #552]
    10c8:	lsr	x1, x0, #3
    10cc:	ldr	x0, [sp, #544]
    10d0:	lsl	x0, x0, #61
    10d4:	orr	x0, x1, x0
    10d8:	str	x0, [sp, #552]
    10dc:	ldr	x0, [sp, #544]
    10e0:	lsr	x0, x0, #3
    10e4:	str	x0, [sp, #544]
    10e8:	ldr	x1, [sp, #640]
    10ec:	mov	x0, #0x7ffe                	// #32766
    10f0:	cmp	x1, x0
    10f4:	b.le	1684 <__divtf3+0x1684>
    10f8:	ldr	x0, [sp, #400]
    10fc:	and	x0, x0, #0xc00000
    1100:	cmp	x0, #0x800, lsl #12
    1104:	b.eq	1148 <__divtf3+0x1148>  // b.none
    1108:	cmp	x0, #0x800, lsl #12
    110c:	b.hi	1160 <__divtf3+0x1160>  // b.pmore
    1110:	cmp	x0, #0x0
    1114:	b.eq	1124 <__divtf3+0x1124>  // b.none
    1118:	cmp	x0, #0x400, lsl #12
    111c:	b.eq	1130 <__divtf3+0x1130>  // b.none
    1120:	b	1160 <__divtf3+0x1160>
    1124:	mov	x0, #0x2                   	// #2
    1128:	str	x0, [sp, #632]
    112c:	b	115c <__divtf3+0x115c>
    1130:	ldr	x0, [sp, #648]
    1134:	cmp	x0, #0x0
    1138:	b.ne	115c <__divtf3+0x115c>  // b.any
    113c:	mov	x0, #0x2                   	// #2
    1140:	str	x0, [sp, #632]
    1144:	b	115c <__divtf3+0x115c>
    1148:	ldr	x0, [sp, #648]
    114c:	cmp	x0, #0x0
    1150:	b.eq	115c <__divtf3+0x115c>  // b.none
    1154:	mov	x0, #0x2                   	// #2
    1158:	str	x0, [sp, #632]
    115c:	nop
    1160:	ldr	x0, [sp, #632]
    1164:	cmp	x0, #0x2
    1168:	b.ne	1180 <__divtf3+0x1180>  // b.any
    116c:	mov	x0, #0x7fff                	// #32767
    1170:	str	x0, [sp, #640]
    1174:	str	xzr, [sp, #552]
    1178:	str	xzr, [sp, #544]
    117c:	b	1198 <__divtf3+0x1198>
    1180:	mov	x0, #0x7ffe                	// #32766
    1184:	str	x0, [sp, #640]
    1188:	mov	x0, #0xffffffffffffffff    	// #-1
    118c:	str	x0, [sp, #552]
    1190:	mov	x0, #0xffffffffffffffff    	// #-1
    1194:	str	x0, [sp, #544]
    1198:	ldr	w0, [sp, #564]
    119c:	orr	w0, w0, #0x4
    11a0:	str	w0, [sp, #564]
    11a4:	ldr	w0, [sp, #564]
    11a8:	orr	w0, w0, #0x10
    11ac:	str	w0, [sp, #564]
    11b0:	b	1684 <__divtf3+0x1684>
    11b4:	mov	w0, #0x1                   	// #1
    11b8:	str	w0, [sp, #196]
    11bc:	mov	x1, #0x1                   	// #1
    11c0:	ldr	x0, [sp, #640]
    11c4:	sub	x0, x1, x0
    11c8:	str	x0, [sp, #640]
    11cc:	ldr	x0, [sp, #640]
    11d0:	cmp	x0, #0x74
    11d4:	b.gt	14ac <__divtf3+0x14ac>
    11d8:	ldr	x0, [sp, #640]
    11dc:	cmp	x0, #0x3f
    11e0:	b.gt	1258 <__divtf3+0x1258>
    11e4:	ldr	x0, [sp, #640]
    11e8:	mov	w1, w0
    11ec:	mov	w0, #0x40                  	// #64
    11f0:	sub	w0, w0, w1
    11f4:	ldr	x1, [sp, #544]
    11f8:	lsl	x1, x1, x0
    11fc:	ldr	x0, [sp, #640]
    1200:	mov	w2, w0
    1204:	ldr	x0, [sp, #552]
    1208:	lsr	x0, x0, x2
    120c:	orr	x1, x1, x0
    1210:	ldr	x0, [sp, #640]
    1214:	mov	w2, w0
    1218:	mov	w0, #0x40                  	// #64
    121c:	sub	w0, w0, w2
    1220:	ldr	x2, [sp, #552]
    1224:	lsl	x0, x2, x0
    1228:	cmp	x0, #0x0
    122c:	cset	w0, ne  // ne = any
    1230:	and	w0, w0, #0xff
    1234:	sxtw	x0, w0
    1238:	orr	x0, x1, x0
    123c:	str	x0, [sp, #552]
    1240:	ldr	x0, [sp, #640]
    1244:	mov	w1, w0
    1248:	ldr	x0, [sp, #544]
    124c:	lsr	x0, x0, x1
    1250:	str	x0, [sp, #544]
    1254:	b	12b8 <__divtf3+0x12b8>
    1258:	ldr	x0, [sp, #640]
    125c:	sub	w0, w0, #0x40
    1260:	ldr	x1, [sp, #544]
    1264:	lsr	x1, x1, x0
    1268:	ldr	x0, [sp, #640]
    126c:	cmp	x0, #0x40
    1270:	b.eq	1290 <__divtf3+0x1290>  // b.none
    1274:	ldr	x0, [sp, #640]
    1278:	mov	w2, w0
    127c:	mov	w0, #0x80                  	// #128
    1280:	sub	w0, w0, w2
    1284:	ldr	x2, [sp, #544]
    1288:	lsl	x0, x2, x0
    128c:	b	1294 <__divtf3+0x1294>
    1290:	mov	x0, #0x0                   	// #0
    1294:	ldr	x2, [sp, #552]
    1298:	orr	x0, x0, x2
    129c:	cmp	x0, #0x0
    12a0:	cset	w0, ne  // ne = any
    12a4:	and	w0, w0, #0xff
    12a8:	and	x0, x0, #0xff
    12ac:	orr	x0, x1, x0
    12b0:	str	x0, [sp, #552]
    12b4:	str	xzr, [sp, #544]
    12b8:	ldr	x0, [sp, #552]
    12bc:	and	x0, x0, #0x7
    12c0:	cmp	x0, #0x0
    12c4:	b.eq	140c <__divtf3+0x140c>  // b.none
    12c8:	ldr	w0, [sp, #564]
    12cc:	orr	w0, w0, #0x10
    12d0:	str	w0, [sp, #564]
    12d4:	ldr	x0, [sp, #400]
    12d8:	and	x0, x0, #0xc00000
    12dc:	cmp	x0, #0xc00, lsl #12
    12e0:	b.eq	1414 <__divtf3+0x1414>  // b.none
    12e4:	cmp	x0, #0xc00, lsl #12
    12e8:	b.hi	1418 <__divtf3+0x1418>  // b.pmore
    12ec:	cmp	x0, #0x800, lsl #12
    12f0:	b.eq	13b4 <__divtf3+0x13b4>  // b.none
    12f4:	cmp	x0, #0x800, lsl #12
    12f8:	b.hi	1418 <__divtf3+0x1418>  // b.pmore
    12fc:	cmp	x0, #0x0
    1300:	b.eq	1310 <__divtf3+0x1310>  // b.none
    1304:	cmp	x0, #0x400, lsl #12
    1308:	b.eq	135c <__divtf3+0x135c>  // b.none
    130c:	b	1418 <__divtf3+0x1418>
    1310:	ldr	x0, [sp, #552]
    1314:	and	x0, x0, #0xf
    1318:	cmp	x0, #0x4
    131c:	b.eq	1414 <__divtf3+0x1414>  // b.none
    1320:	ldr	x0, [sp, #552]
    1324:	add	x0, x0, #0x4
    1328:	str	x0, [sp, #144]
    132c:	ldr	x1, [sp, #144]
    1330:	ldr	x0, [sp, #552]
    1334:	cmp	x1, x0
    1338:	cset	w0, cc  // cc = lo, ul, last
    133c:	and	w0, w0, #0xff
    1340:	and	x0, x0, #0xff
    1344:	ldr	x1, [sp, #544]
    1348:	add	x0, x1, x0
    134c:	str	x0, [sp, #544]
    1350:	ldr	x0, [sp, #144]
    1354:	str	x0, [sp, #552]
    1358:	b	1414 <__divtf3+0x1414>
    135c:	ldr	x0, [sp, #648]
    1360:	cmp	x0, #0x0
    1364:	b.ne	1414 <__divtf3+0x1414>  // b.any
    1368:	ldr	x0, [sp, #552]
    136c:	and	x0, x0, #0x7
    1370:	cmp	x0, #0x0
    1374:	b.eq	1414 <__divtf3+0x1414>  // b.none
    1378:	ldr	x0, [sp, #552]
    137c:	add	x0, x0, #0x8
    1380:	str	x0, [sp, #152]
    1384:	ldr	x1, [sp, #152]
    1388:	ldr	x0, [sp, #552]
    138c:	cmp	x1, x0
    1390:	cset	w0, cc  // cc = lo, ul, last
    1394:	and	w0, w0, #0xff
    1398:	and	x0, x0, #0xff
    139c:	ldr	x1, [sp, #544]
    13a0:	add	x0, x1, x0
    13a4:	str	x0, [sp, #544]
    13a8:	ldr	x0, [sp, #152]
    13ac:	str	x0, [sp, #552]
    13b0:	b	1414 <__divtf3+0x1414>
    13b4:	ldr	x0, [sp, #648]
    13b8:	cmp	x0, #0x0
    13bc:	b.eq	1414 <__divtf3+0x1414>  // b.none
    13c0:	ldr	x0, [sp, #552]
    13c4:	and	x0, x0, #0x7
    13c8:	cmp	x0, #0x0
    13cc:	b.eq	1414 <__divtf3+0x1414>  // b.none
    13d0:	ldr	x0, [sp, #552]
    13d4:	add	x0, x0, #0x8
    13d8:	str	x0, [sp, #160]
    13dc:	ldr	x1, [sp, #160]
    13e0:	ldr	x0, [sp, #552]
    13e4:	cmp	x1, x0
    13e8:	cset	w0, cc  // cc = lo, ul, last
    13ec:	and	w0, w0, #0xff
    13f0:	and	x0, x0, #0xff
    13f4:	ldr	x1, [sp, #544]
    13f8:	add	x0, x1, x0
    13fc:	str	x0, [sp, #544]
    1400:	ldr	x0, [sp, #160]
    1404:	str	x0, [sp, #552]
    1408:	b	1414 <__divtf3+0x1414>
    140c:	nop
    1410:	b	1418 <__divtf3+0x1418>
    1414:	nop
    1418:	ldr	x0, [sp, #544]
    141c:	and	x0, x0, #0x8000000000000
    1420:	cmp	x0, #0x0
    1424:	b.eq	1448 <__divtf3+0x1448>  // b.none
    1428:	mov	x0, #0x1                   	// #1
    142c:	str	x0, [sp, #640]
    1430:	str	xzr, [sp, #552]
    1434:	str	xzr, [sp, #544]
    1438:	ldr	w0, [sp, #564]
    143c:	orr	w0, w0, #0x10
    1440:	str	w0, [sp, #564]
    1444:	b	1470 <__divtf3+0x1470>
    1448:	str	xzr, [sp, #640]
    144c:	ldr	x0, [sp, #552]
    1450:	lsr	x1, x0, #3
    1454:	ldr	x0, [sp, #544]
    1458:	lsl	x0, x0, #61
    145c:	orr	x0, x1, x0
    1460:	str	x0, [sp, #552]
    1464:	ldr	x0, [sp, #544]
    1468:	lsr	x0, x0, #3
    146c:	str	x0, [sp, #544]
    1470:	ldr	w0, [sp, #196]
    1474:	cmp	w0, #0x0
    1478:	b.eq	1684 <__divtf3+0x1684>  // b.none
    147c:	ldr	w0, [sp, #564]
    1480:	and	w0, w0, #0x10
    1484:	cmp	w0, #0x0
    1488:	b.ne	149c <__divtf3+0x149c>  // b.any
    148c:	ldr	x0, [sp, #400]
    1490:	and	x0, x0, #0x800
    1494:	cmp	x0, #0x0
    1498:	b.eq	1684 <__divtf3+0x1684>  // b.none
    149c:	ldr	w0, [sp, #564]
    14a0:	orr	w0, w0, #0x8
    14a4:	str	w0, [sp, #564]
    14a8:	b	1684 <__divtf3+0x1684>
    14ac:	str	xzr, [sp, #640]
    14b0:	ldr	x1, [sp, #544]
    14b4:	ldr	x0, [sp, #552]
    14b8:	orr	x0, x1, x0
    14bc:	cmp	x0, #0x0
    14c0:	b.eq	163c <__divtf3+0x163c>  // b.none
    14c4:	mov	x0, #0x1                   	// #1
    14c8:	str	x0, [sp, #552]
    14cc:	str	xzr, [sp, #544]
    14d0:	ldr	x0, [sp, #552]
    14d4:	and	x0, x0, #0x7
    14d8:	cmp	x0, #0x0
    14dc:	b.eq	1624 <__divtf3+0x1624>  // b.none
    14e0:	ldr	w0, [sp, #564]
    14e4:	orr	w0, w0, #0x10
    14e8:	str	w0, [sp, #564]
    14ec:	ldr	x0, [sp, #400]
    14f0:	and	x0, x0, #0xc00000
    14f4:	cmp	x0, #0xc00, lsl #12
    14f8:	b.eq	162c <__divtf3+0x162c>  // b.none
    14fc:	cmp	x0, #0xc00, lsl #12
    1500:	b.hi	1630 <__divtf3+0x1630>  // b.pmore
    1504:	cmp	x0, #0x800, lsl #12
    1508:	b.eq	15cc <__divtf3+0x15cc>  // b.none
    150c:	cmp	x0, #0x800, lsl #12
    1510:	b.hi	1630 <__divtf3+0x1630>  // b.pmore
    1514:	cmp	x0, #0x0
    1518:	b.eq	1528 <__divtf3+0x1528>  // b.none
    151c:	cmp	x0, #0x400, lsl #12
    1520:	b.eq	1574 <__divtf3+0x1574>  // b.none
    1524:	b	1630 <__divtf3+0x1630>
    1528:	ldr	x0, [sp, #552]
    152c:	and	x0, x0, #0xf
    1530:	cmp	x0, #0x4
    1534:	b.eq	162c <__divtf3+0x162c>  // b.none
    1538:	ldr	x0, [sp, #552]
    153c:	add	x0, x0, #0x4
    1540:	str	x0, [sp, #168]
    1544:	ldr	x1, [sp, #168]
    1548:	ldr	x0, [sp, #552]
    154c:	cmp	x1, x0
    1550:	cset	w0, cc  // cc = lo, ul, last
    1554:	and	w0, w0, #0xff
    1558:	and	x0, x0, #0xff
    155c:	ldr	x1, [sp, #544]
    1560:	add	x0, x1, x0
    1564:	str	x0, [sp, #544]
    1568:	ldr	x0, [sp, #168]
    156c:	str	x0, [sp, #552]
    1570:	b	162c <__divtf3+0x162c>
    1574:	ldr	x0, [sp, #648]
    1578:	cmp	x0, #0x0
    157c:	b.ne	162c <__divtf3+0x162c>  // b.any
    1580:	ldr	x0, [sp, #552]
    1584:	and	x0, x0, #0x7
    1588:	cmp	x0, #0x0
    158c:	b.eq	162c <__divtf3+0x162c>  // b.none
    1590:	ldr	x0, [sp, #552]
    1594:	add	x0, x0, #0x8
    1598:	str	x0, [sp, #176]
    159c:	ldr	x1, [sp, #176]
    15a0:	ldr	x0, [sp, #552]
    15a4:	cmp	x1, x0
    15a8:	cset	w0, cc  // cc = lo, ul, last
    15ac:	and	w0, w0, #0xff
    15b0:	and	x0, x0, #0xff
    15b4:	ldr	x1, [sp, #544]
    15b8:	add	x0, x1, x0
    15bc:	str	x0, [sp, #544]
    15c0:	ldr	x0, [sp, #176]
    15c4:	str	x0, [sp, #552]
    15c8:	b	162c <__divtf3+0x162c>
    15cc:	ldr	x0, [sp, #648]
    15d0:	cmp	x0, #0x0
    15d4:	b.eq	162c <__divtf3+0x162c>  // b.none
    15d8:	ldr	x0, [sp, #552]
    15dc:	and	x0, x0, #0x7
    15e0:	cmp	x0, #0x0
    15e4:	b.eq	162c <__divtf3+0x162c>  // b.none
    15e8:	ldr	x0, [sp, #552]
    15ec:	add	x0, x0, #0x8
    15f0:	str	x0, [sp, #184]
    15f4:	ldr	x1, [sp, #184]
    15f8:	ldr	x0, [sp, #552]
    15fc:	cmp	x1, x0
    1600:	cset	w0, cc  // cc = lo, ul, last
    1604:	and	w0, w0, #0xff
    1608:	and	x0, x0, #0xff
    160c:	ldr	x1, [sp, #544]
    1610:	add	x0, x1, x0
    1614:	str	x0, [sp, #544]
    1618:	ldr	x0, [sp, #184]
    161c:	str	x0, [sp, #552]
    1620:	b	162c <__divtf3+0x162c>
    1624:	nop
    1628:	b	1630 <__divtf3+0x1630>
    162c:	nop
    1630:	ldr	x0, [sp, #552]
    1634:	lsr	x0, x0, #3
    1638:	str	x0, [sp, #552]
    163c:	ldr	w0, [sp, #564]
    1640:	orr	w0, w0, #0x8
    1644:	str	w0, [sp, #564]
    1648:	b	1684 <__divtf3+0x1684>
    164c:	str	xzr, [sp, #640]
    1650:	str	xzr, [sp, #552]
    1654:	str	xzr, [sp, #544]
    1658:	b	1684 <__divtf3+0x1684>
    165c:	mov	x0, #0x7fff                	// #32767
    1660:	str	x0, [sp, #640]
    1664:	str	xzr, [sp, #552]
    1668:	str	xzr, [sp, #544]
    166c:	b	1684 <__divtf3+0x1684>
    1670:	mov	x0, #0x7fff                	// #32767
    1674:	str	x0, [sp, #640]
    1678:	ldr	x0, [sp, #544]
    167c:	orr	x0, x0, #0x800000000000
    1680:	str	x0, [sp, #544]
    1684:	nop
    1688:	ldr	x0, [sp, #552]
    168c:	str	x0, [sp, #48]
    1690:	ldr	x0, [sp, #544]
    1694:	and	x1, x0, #0xffffffffffff
    1698:	ldr	x0, [sp, #56]
    169c:	bfxil	x0, x1, #0, #48
    16a0:	str	x0, [sp, #56]
    16a4:	ldr	x0, [sp, #640]
    16a8:	and	w0, w0, #0x7fff
    16ac:	and	w1, w0, #0xffff
    16b0:	ldrh	w0, [sp, #62]
    16b4:	bfxil	w0, w1, #0, #15
    16b8:	strh	w0, [sp, #62]
    16bc:	ldr	x0, [sp, #648]
    16c0:	and	w0, w0, #0x1
    16c4:	and	w1, w0, #0xff
    16c8:	ldrb	w0, [sp, #63]
    16cc:	bfi	w0, w1, #7, #1
    16d0:	strb	w0, [sp, #63]
    16d4:	ldr	q0, [sp, #48]
    16d8:	str	q0, [sp, #96]
    16dc:	ldrsw	x0, [sp, #564]
    16e0:	cmp	x0, #0x0
    16e4:	b.eq	16f0 <__divtf3+0x16f0>  // b.none
    16e8:	ldr	w0, [sp, #564]
    16ec:	bl	0 <__sfp_handle_exceptions>
    16f0:	ldr	q0, [sp, #96]
    16f4:	ldp	x29, x30, [sp]
    16f8:	add	sp, sp, #0x290
    16fc:	ret

eqtf2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__eqtf2>:
   0:	stp	x29, x30, [sp, #-176]!
   4:	mov	x29, sp
   8:	str	q0, [sp, #32]
   c:	str	q1, [sp, #16]
  10:	str	wzr, [sp, #160]
  14:	str	xzr, [sp, #152]
  18:	mrs	x0, fpcr
  1c:	str	x0, [sp, #152]
  20:	ldr	q0, [sp, #32]
  24:	str	q0, [sp, #64]
  28:	ldr	x0, [sp, #64]
  2c:	str	x0, [sp, #144]
  30:	ldr	x0, [sp, #72]
  34:	ubfx	x0, x0, #0, #48
  38:	str	x0, [sp, #136]
  3c:	ldrh	w0, [sp, #78]
  40:	ubfx	x0, x0, #0, #15
  44:	and	w0, w0, #0xffff
  48:	and	x0, x0, #0xffff
  4c:	str	x0, [sp, #128]
  50:	ldrb	w0, [sp, #79]
  54:	ubfx	x0, x0, #7, #1
  58:	and	w0, w0, #0xff
  5c:	and	x0, x0, #0xff
  60:	str	x0, [sp, #120]
  64:	ldr	q0, [sp, #16]
  68:	str	q0, [sp, #48]
  6c:	ldr	x0, [sp, #48]
  70:	str	x0, [sp, #112]
  74:	ldr	x0, [sp, #56]
  78:	ubfx	x0, x0, #0, #48
  7c:	str	x0, [sp, #104]
  80:	ldrh	w0, [sp, #62]
  84:	ubfx	x0, x0, #0, #15
  88:	and	w0, w0, #0xffff
  8c:	and	x0, x0, #0xffff
  90:	str	x0, [sp, #96]
  94:	ldrb	w0, [sp, #63]
  98:	ubfx	x0, x0, #7, #1
  9c:	and	w0, w0, #0xff
  a0:	and	x0, x0, #0xff
  a4:	str	x0, [sp, #88]
  a8:	ldr	x1, [sp, #128]
  ac:	mov	x0, #0x7fff                	// #32767
  b0:	cmp	x1, x0
  b4:	b.ne	cc <__eqtf2+0xcc>  // b.any
  b8:	ldr	x1, [sp, #136]
  bc:	ldr	x0, [sp, #144]
  c0:	orr	x0, x1, x0
  c4:	cmp	x0, #0x0
  c8:	b.ne	f0 <__eqtf2+0xf0>  // b.any
  cc:	ldr	x1, [sp, #96]
  d0:	mov	x0, #0x7fff                	// #32767
  d4:	cmp	x1, x0
  d8:	b.ne	1a0 <__eqtf2+0x1a0>  // b.any
  dc:	ldr	x1, [sp, #104]
  e0:	ldr	x0, [sp, #112]
  e4:	orr	x0, x1, x0
  e8:	cmp	x0, #0x0
  ec:	b.eq	1a0 <__eqtf2+0x1a0>  // b.none
  f0:	mov	w0, #0x1                   	// #1
  f4:	str	w0, [sp, #164]
  f8:	str	wzr, [sp, #168]
  fc:	ldr	x1, [sp, #128]
 100:	mov	x0, #0x7fff                	// #32767
 104:	cmp	x1, x0
 108:	b.ne	138 <__eqtf2+0x138>  // b.any
 10c:	ldr	x1, [sp, #136]
 110:	ldr	x0, [sp, #144]
 114:	orr	x0, x1, x0
 118:	cmp	x0, #0x0
 11c:	b.eq	138 <__eqtf2+0x138>  // b.none
 120:	ldr	x0, [sp, #136]
 124:	and	x0, x0, #0x800000000000
 128:	cmp	x0, #0x0
 12c:	b.ne	138 <__eqtf2+0x138>  // b.any
 130:	mov	w0, #0x1                   	// #1
 134:	str	w0, [sp, #168]
 138:	ldr	w0, [sp, #168]
 13c:	cmp	w0, #0x0
 140:	b.ne	190 <__eqtf2+0x190>  // b.any
 144:	str	wzr, [sp, #172]
 148:	ldr	x1, [sp, #96]
 14c:	mov	x0, #0x7fff                	// #32767
 150:	cmp	x1, x0
 154:	b.ne	184 <__eqtf2+0x184>  // b.any
 158:	ldr	x1, [sp, #104]
 15c:	ldr	x0, [sp, #112]
 160:	orr	x0, x1, x0
 164:	cmp	x0, #0x0
 168:	b.eq	184 <__eqtf2+0x184>  // b.none
 16c:	ldr	x0, [sp, #104]
 170:	and	x0, x0, #0x800000000000
 174:	cmp	x0, #0x0
 178:	b.ne	184 <__eqtf2+0x184>  // b.any
 17c:	mov	w0, #0x1                   	// #1
 180:	str	w0, [sp, #172]
 184:	ldr	w0, [sp, #172]
 188:	cmp	w0, #0x0
 18c:	b.eq	214 <__eqtf2+0x214>  // b.none
 190:	ldr	w0, [sp, #160]
 194:	orr	w0, w0, #0x1
 198:	str	w0, [sp, #160]
 19c:	b	214 <__eqtf2+0x214>
 1a0:	ldr	x1, [sp, #128]
 1a4:	ldr	x0, [sp, #96]
 1a8:	cmp	x1, x0
 1ac:	b.ne	200 <__eqtf2+0x200>  // b.any
 1b0:	ldr	x1, [sp, #136]
 1b4:	ldr	x0, [sp, #104]
 1b8:	cmp	x1, x0
 1bc:	b.ne	200 <__eqtf2+0x200>  // b.any
 1c0:	ldr	x1, [sp, #144]
 1c4:	ldr	x0, [sp, #112]
 1c8:	cmp	x1, x0
 1cc:	b.ne	200 <__eqtf2+0x200>  // b.any
 1d0:	ldr	x1, [sp, #120]
 1d4:	ldr	x0, [sp, #88]
 1d8:	cmp	x1, x0
 1dc:	b.eq	208 <__eqtf2+0x208>  // b.none
 1e0:	ldr	x0, [sp, #128]
 1e4:	cmp	x0, #0x0
 1e8:	b.ne	200 <__eqtf2+0x200>  // b.any
 1ec:	ldr	x1, [sp, #136]
 1f0:	ldr	x0, [sp, #144]
 1f4:	orr	x0, x1, x0
 1f8:	cmp	x0, #0x0
 1fc:	b.eq	208 <__eqtf2+0x208>  // b.none
 200:	mov	w0, #0x1                   	// #1
 204:	b	20c <__eqtf2+0x20c>
 208:	mov	w0, #0x0                   	// #0
 20c:	str	w0, [sp, #164]
 210:	b	218 <__eqtf2+0x218>
 214:	nop
 218:	ldrsw	x0, [sp, #160]
 21c:	cmp	x0, #0x0
 220:	b.eq	22c <__eqtf2+0x22c>  // b.none
 224:	ldr	w0, [sp, #160]
 228:	bl	0 <__sfp_handle_exceptions>
 22c:	ldr	w0, [sp, #164]
 230:	ldp	x29, x30, [sp], #176
 234:	ret

getf2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__getf2>:
   0:	stp	x29, x30, [sp, #-176]!
   4:	mov	x29, sp
   8:	str	q0, [sp, #32]
   c:	str	q1, [sp, #16]
  10:	str	wzr, [sp, #168]
  14:	str	xzr, [sp, #160]
  18:	mrs	x0, fpcr
  1c:	str	x0, [sp, #160]
  20:	ldr	q0, [sp, #32]
  24:	str	q0, [sp, #64]
  28:	ldr	x0, [sp, #64]
  2c:	str	x0, [sp, #152]
  30:	ldr	x0, [sp, #72]
  34:	ubfx	x0, x0, #0, #48
  38:	str	x0, [sp, #144]
  3c:	ldrh	w0, [sp, #78]
  40:	ubfx	x0, x0, #0, #15
  44:	and	w0, w0, #0xffff
  48:	and	x0, x0, #0xffff
  4c:	str	x0, [sp, #136]
  50:	ldrb	w0, [sp, #79]
  54:	ubfx	x0, x0, #7, #1
  58:	and	w0, w0, #0xff
  5c:	and	x0, x0, #0xff
  60:	str	x0, [sp, #128]
  64:	ldr	q0, [sp, #16]
  68:	str	q0, [sp, #48]
  6c:	ldr	x0, [sp, #48]
  70:	str	x0, [sp, #120]
  74:	ldr	x0, [sp, #56]
  78:	ubfx	x0, x0, #0, #48
  7c:	str	x0, [sp, #112]
  80:	ldrh	w0, [sp, #62]
  84:	ubfx	x0, x0, #0, #15
  88:	and	w0, w0, #0xffff
  8c:	and	x0, x0, #0xffff
  90:	str	x0, [sp, #104]
  94:	ldrb	w0, [sp, #63]
  98:	ubfx	x0, x0, #7, #1
  9c:	and	w0, w0, #0xff
  a0:	and	x0, x0, #0xff
  a4:	str	x0, [sp, #96]
  a8:	ldr	x1, [sp, #136]
  ac:	mov	x0, #0x7fff                	// #32767
  b0:	cmp	x1, x0
  b4:	b.ne	cc <__getf2+0xcc>  // b.any
  b8:	ldr	x1, [sp, #144]
  bc:	ldr	x0, [sp, #152]
  c0:	orr	x0, x1, x0
  c4:	cmp	x0, #0x0
  c8:	b.ne	f0 <__getf2+0xf0>  // b.any
  cc:	ldr	x1, [sp, #104]
  d0:	mov	x0, #0x7fff                	// #32767
  d4:	cmp	x1, x0
  d8:	b.ne	108 <__getf2+0x108>  // b.any
  dc:	ldr	x1, [sp, #112]
  e0:	ldr	x0, [sp, #120]
  e4:	orr	x0, x1, x0
  e8:	cmp	x0, #0x0
  ec:	b.eq	108 <__getf2+0x108>  // b.none
  f0:	mov	w0, #0xfffffffe            	// #-2
  f4:	str	w0, [sp, #172]
  f8:	ldr	w0, [sp, #168]
  fc:	orr	w0, w0, #0x1
 100:	str	w0, [sp, #168]
 104:	b	314 <__getf2+0x314>
 108:	ldr	x0, [sp, #136]
 10c:	cmp	x0, #0x0
 110:	b.ne	130 <__getf2+0x130>  // b.any
 114:	ldr	x1, [sp, #144]
 118:	ldr	x0, [sp, #152]
 11c:	orr	x0, x1, x0
 120:	cmp	x0, #0x0
 124:	b.ne	130 <__getf2+0x130>  // b.any
 128:	mov	w0, #0x1                   	// #1
 12c:	b	134 <__getf2+0x134>
 130:	mov	w0, #0x0                   	// #0
 134:	str	w0, [sp, #92]
 138:	ldr	x0, [sp, #104]
 13c:	cmp	x0, #0x0
 140:	b.ne	160 <__getf2+0x160>  // b.any
 144:	ldr	x1, [sp, #112]
 148:	ldr	x0, [sp, #120]
 14c:	orr	x0, x1, x0
 150:	cmp	x0, #0x0
 154:	b.ne	160 <__getf2+0x160>  // b.any
 158:	mov	w0, #0x1                   	// #1
 15c:	b	164 <__getf2+0x164>
 160:	mov	w0, #0x0                   	// #0
 164:	str	w0, [sp, #88]
 168:	ldr	w0, [sp, #92]
 16c:	cmp	w0, #0x0
 170:	b.eq	188 <__getf2+0x188>  // b.none
 174:	ldr	w0, [sp, #88]
 178:	cmp	w0, #0x0
 17c:	b.eq	188 <__getf2+0x188>  // b.none
 180:	str	wzr, [sp, #172]
 184:	b	314 <__getf2+0x314>
 188:	ldr	w0, [sp, #92]
 18c:	cmp	w0, #0x0
 190:	b.eq	1b4 <__getf2+0x1b4>  // b.none
 194:	ldr	x0, [sp, #96]
 198:	cmp	x0, #0x0
 19c:	b.eq	1a8 <__getf2+0x1a8>  // b.none
 1a0:	mov	w0, #0x1                   	// #1
 1a4:	b	1ac <__getf2+0x1ac>
 1a8:	mov	w0, #0xffffffff            	// #-1
 1ac:	str	w0, [sp, #172]
 1b0:	b	314 <__getf2+0x314>
 1b4:	ldr	w0, [sp, #88]
 1b8:	cmp	w0, #0x0
 1bc:	b.eq	1e0 <__getf2+0x1e0>  // b.none
 1c0:	ldr	x0, [sp, #128]
 1c4:	cmp	x0, #0x0
 1c8:	b.eq	1d4 <__getf2+0x1d4>  // b.none
 1cc:	mov	w0, #0xffffffff            	// #-1
 1d0:	b	1d8 <__getf2+0x1d8>
 1d4:	mov	w0, #0x1                   	// #1
 1d8:	str	w0, [sp, #172]
 1dc:	b	314 <__getf2+0x314>
 1e0:	ldr	x1, [sp, #128]
 1e4:	ldr	x0, [sp, #96]
 1e8:	cmp	x1, x0
 1ec:	b.eq	210 <__getf2+0x210>  // b.none
 1f0:	ldr	x0, [sp, #128]
 1f4:	cmp	x0, #0x0
 1f8:	b.eq	204 <__getf2+0x204>  // b.none
 1fc:	mov	w0, #0xffffffff            	// #-1
 200:	b	208 <__getf2+0x208>
 204:	mov	w0, #0x1                   	// #1
 208:	str	w0, [sp, #172]
 20c:	b	314 <__getf2+0x314>
 210:	ldr	x1, [sp, #136]
 214:	ldr	x0, [sp, #104]
 218:	cmp	x1, x0
 21c:	b.le	240 <__getf2+0x240>
 220:	ldr	x0, [sp, #128]
 224:	cmp	x0, #0x0
 228:	b.eq	234 <__getf2+0x234>  // b.none
 22c:	mov	w0, #0xffffffff            	// #-1
 230:	b	238 <__getf2+0x238>
 234:	mov	w0, #0x1                   	// #1
 238:	str	w0, [sp, #172]
 23c:	b	314 <__getf2+0x314>
 240:	ldr	x1, [sp, #136]
 244:	ldr	x0, [sp, #104]
 248:	cmp	x1, x0
 24c:	b.ge	270 <__getf2+0x270>  // b.tcont
 250:	ldr	x0, [sp, #128]
 254:	cmp	x0, #0x0
 258:	b.eq	264 <__getf2+0x264>  // b.none
 25c:	mov	w0, #0x1                   	// #1
 260:	b	268 <__getf2+0x268>
 264:	mov	w0, #0xffffffff            	// #-1
 268:	str	w0, [sp, #172]
 26c:	b	314 <__getf2+0x314>
 270:	ldr	x1, [sp, #144]
 274:	ldr	x0, [sp, #112]
 278:	cmp	x1, x0
 27c:	b.hi	2a0 <__getf2+0x2a0>  // b.pmore
 280:	ldr	x1, [sp, #144]
 284:	ldr	x0, [sp, #112]
 288:	cmp	x1, x0
 28c:	b.ne	2c0 <__getf2+0x2c0>  // b.any
 290:	ldr	x1, [sp, #152]
 294:	ldr	x0, [sp, #120]
 298:	cmp	x1, x0
 29c:	b.ls	2c0 <__getf2+0x2c0>  // b.plast
 2a0:	ldr	x0, [sp, #128]
 2a4:	cmp	x0, #0x0
 2a8:	b.eq	2b4 <__getf2+0x2b4>  // b.none
 2ac:	mov	w0, #0xffffffff            	// #-1
 2b0:	b	2b8 <__getf2+0x2b8>
 2b4:	mov	w0, #0x1                   	// #1
 2b8:	str	w0, [sp, #172]
 2bc:	b	314 <__getf2+0x314>
 2c0:	ldr	x1, [sp, #112]
 2c4:	ldr	x0, [sp, #144]
 2c8:	cmp	x1, x0
 2cc:	b.hi	2f0 <__getf2+0x2f0>  // b.pmore
 2d0:	ldr	x1, [sp, #112]
 2d4:	ldr	x0, [sp, #144]
 2d8:	cmp	x1, x0
 2dc:	b.ne	310 <__getf2+0x310>  // b.any
 2e0:	ldr	x1, [sp, #120]
 2e4:	ldr	x0, [sp, #152]
 2e8:	cmp	x1, x0
 2ec:	b.ls	310 <__getf2+0x310>  // b.plast
 2f0:	ldr	x0, [sp, #128]
 2f4:	cmp	x0, #0x0
 2f8:	b.eq	304 <__getf2+0x304>  // b.none
 2fc:	mov	w0, #0x1                   	// #1
 300:	b	308 <__getf2+0x308>
 304:	mov	w0, #0xffffffff            	// #-1
 308:	str	w0, [sp, #172]
 30c:	b	314 <__getf2+0x314>
 310:	str	wzr, [sp, #172]
 314:	ldrsw	x0, [sp, #168]
 318:	cmp	x0, #0x0
 31c:	b.eq	328 <__getf2+0x328>  // b.none
 320:	ldr	w0, [sp, #168]
 324:	bl	0 <__sfp_handle_exceptions>
 328:	ldr	w0, [sp, #172]
 32c:	ldp	x29, x30, [sp], #176
 330:	ret

letf2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__letf2>:
   0:	stp	x29, x30, [sp, #-176]!
   4:	mov	x29, sp
   8:	str	q0, [sp, #32]
   c:	str	q1, [sp, #16]
  10:	str	wzr, [sp, #168]
  14:	str	xzr, [sp, #160]
  18:	mrs	x0, fpcr
  1c:	str	x0, [sp, #160]
  20:	ldr	q0, [sp, #32]
  24:	str	q0, [sp, #64]
  28:	ldr	x0, [sp, #64]
  2c:	str	x0, [sp, #152]
  30:	ldr	x0, [sp, #72]
  34:	ubfx	x0, x0, #0, #48
  38:	str	x0, [sp, #144]
  3c:	ldrh	w0, [sp, #78]
  40:	ubfx	x0, x0, #0, #15
  44:	and	w0, w0, #0xffff
  48:	and	x0, x0, #0xffff
  4c:	str	x0, [sp, #136]
  50:	ldrb	w0, [sp, #79]
  54:	ubfx	x0, x0, #7, #1
  58:	and	w0, w0, #0xff
  5c:	and	x0, x0, #0xff
  60:	str	x0, [sp, #128]
  64:	ldr	q0, [sp, #16]
  68:	str	q0, [sp, #48]
  6c:	ldr	x0, [sp, #48]
  70:	str	x0, [sp, #120]
  74:	ldr	x0, [sp, #56]
  78:	ubfx	x0, x0, #0, #48
  7c:	str	x0, [sp, #112]
  80:	ldrh	w0, [sp, #62]
  84:	ubfx	x0, x0, #0, #15
  88:	and	w0, w0, #0xffff
  8c:	and	x0, x0, #0xffff
  90:	str	x0, [sp, #104]
  94:	ldrb	w0, [sp, #63]
  98:	ubfx	x0, x0, #7, #1
  9c:	and	w0, w0, #0xff
  a0:	and	x0, x0, #0xff
  a4:	str	x0, [sp, #96]
  a8:	ldr	x1, [sp, #136]
  ac:	mov	x0, #0x7fff                	// #32767
  b0:	cmp	x1, x0
  b4:	b.ne	cc <__letf2+0xcc>  // b.any
  b8:	ldr	x1, [sp, #144]
  bc:	ldr	x0, [sp, #152]
  c0:	orr	x0, x1, x0
  c4:	cmp	x0, #0x0
  c8:	b.ne	f0 <__letf2+0xf0>  // b.any
  cc:	ldr	x1, [sp, #104]
  d0:	mov	x0, #0x7fff                	// #32767
  d4:	cmp	x1, x0
  d8:	b.ne	108 <__letf2+0x108>  // b.any
  dc:	ldr	x1, [sp, #112]
  e0:	ldr	x0, [sp, #120]
  e4:	orr	x0, x1, x0
  e8:	cmp	x0, #0x0
  ec:	b.eq	108 <__letf2+0x108>  // b.none
  f0:	mov	w0, #0x2                   	// #2
  f4:	str	w0, [sp, #172]
  f8:	ldr	w0, [sp, #168]
  fc:	orr	w0, w0, #0x1
 100:	str	w0, [sp, #168]
 104:	b	314 <__letf2+0x314>
 108:	ldr	x0, [sp, #136]
 10c:	cmp	x0, #0x0
 110:	b.ne	130 <__letf2+0x130>  // b.any
 114:	ldr	x1, [sp, #144]
 118:	ldr	x0, [sp, #152]
 11c:	orr	x0, x1, x0
 120:	cmp	x0, #0x0
 124:	b.ne	130 <__letf2+0x130>  // b.any
 128:	mov	w0, #0x1                   	// #1
 12c:	b	134 <__letf2+0x134>
 130:	mov	w0, #0x0                   	// #0
 134:	str	w0, [sp, #92]
 138:	ldr	x0, [sp, #104]
 13c:	cmp	x0, #0x0
 140:	b.ne	160 <__letf2+0x160>  // b.any
 144:	ldr	x1, [sp, #112]
 148:	ldr	x0, [sp, #120]
 14c:	orr	x0, x1, x0
 150:	cmp	x0, #0x0
 154:	b.ne	160 <__letf2+0x160>  // b.any
 158:	mov	w0, #0x1                   	// #1
 15c:	b	164 <__letf2+0x164>
 160:	mov	w0, #0x0                   	// #0
 164:	str	w0, [sp, #88]
 168:	ldr	w0, [sp, #92]
 16c:	cmp	w0, #0x0
 170:	b.eq	188 <__letf2+0x188>  // b.none
 174:	ldr	w0, [sp, #88]
 178:	cmp	w0, #0x0
 17c:	b.eq	188 <__letf2+0x188>  // b.none
 180:	str	wzr, [sp, #172]
 184:	b	314 <__letf2+0x314>
 188:	ldr	w0, [sp, #92]
 18c:	cmp	w0, #0x0
 190:	b.eq	1b4 <__letf2+0x1b4>  // b.none
 194:	ldr	x0, [sp, #96]
 198:	cmp	x0, #0x0
 19c:	b.eq	1a8 <__letf2+0x1a8>  // b.none
 1a0:	mov	w0, #0x1                   	// #1
 1a4:	b	1ac <__letf2+0x1ac>
 1a8:	mov	w0, #0xffffffff            	// #-1
 1ac:	str	w0, [sp, #172]
 1b0:	b	314 <__letf2+0x314>
 1b4:	ldr	w0, [sp, #88]
 1b8:	cmp	w0, #0x0
 1bc:	b.eq	1e0 <__letf2+0x1e0>  // b.none
 1c0:	ldr	x0, [sp, #128]
 1c4:	cmp	x0, #0x0
 1c8:	b.eq	1d4 <__letf2+0x1d4>  // b.none
 1cc:	mov	w0, #0xffffffff            	// #-1
 1d0:	b	1d8 <__letf2+0x1d8>
 1d4:	mov	w0, #0x1                   	// #1
 1d8:	str	w0, [sp, #172]
 1dc:	b	314 <__letf2+0x314>
 1e0:	ldr	x1, [sp, #128]
 1e4:	ldr	x0, [sp, #96]
 1e8:	cmp	x1, x0
 1ec:	b.eq	210 <__letf2+0x210>  // b.none
 1f0:	ldr	x0, [sp, #128]
 1f4:	cmp	x0, #0x0
 1f8:	b.eq	204 <__letf2+0x204>  // b.none
 1fc:	mov	w0, #0xffffffff            	// #-1
 200:	b	208 <__letf2+0x208>
 204:	mov	w0, #0x1                   	// #1
 208:	str	w0, [sp, #172]
 20c:	b	314 <__letf2+0x314>
 210:	ldr	x1, [sp, #136]
 214:	ldr	x0, [sp, #104]
 218:	cmp	x1, x0
 21c:	b.le	240 <__letf2+0x240>
 220:	ldr	x0, [sp, #128]
 224:	cmp	x0, #0x0
 228:	b.eq	234 <__letf2+0x234>  // b.none
 22c:	mov	w0, #0xffffffff            	// #-1
 230:	b	238 <__letf2+0x238>
 234:	mov	w0, #0x1                   	// #1
 238:	str	w0, [sp, #172]
 23c:	b	314 <__letf2+0x314>
 240:	ldr	x1, [sp, #136]
 244:	ldr	x0, [sp, #104]
 248:	cmp	x1, x0
 24c:	b.ge	270 <__letf2+0x270>  // b.tcont
 250:	ldr	x0, [sp, #128]
 254:	cmp	x0, #0x0
 258:	b.eq	264 <__letf2+0x264>  // b.none
 25c:	mov	w0, #0x1                   	// #1
 260:	b	268 <__letf2+0x268>
 264:	mov	w0, #0xffffffff            	// #-1
 268:	str	w0, [sp, #172]
 26c:	b	314 <__letf2+0x314>
 270:	ldr	x1, [sp, #144]
 274:	ldr	x0, [sp, #112]
 278:	cmp	x1, x0
 27c:	b.hi	2a0 <__letf2+0x2a0>  // b.pmore
 280:	ldr	x1, [sp, #144]
 284:	ldr	x0, [sp, #112]
 288:	cmp	x1, x0
 28c:	b.ne	2c0 <__letf2+0x2c0>  // b.any
 290:	ldr	x1, [sp, #152]
 294:	ldr	x0, [sp, #120]
 298:	cmp	x1, x0
 29c:	b.ls	2c0 <__letf2+0x2c0>  // b.plast
 2a0:	ldr	x0, [sp, #128]
 2a4:	cmp	x0, #0x0
 2a8:	b.eq	2b4 <__letf2+0x2b4>  // b.none
 2ac:	mov	w0, #0xffffffff            	// #-1
 2b0:	b	2b8 <__letf2+0x2b8>
 2b4:	mov	w0, #0x1                   	// #1
 2b8:	str	w0, [sp, #172]
 2bc:	b	314 <__letf2+0x314>
 2c0:	ldr	x1, [sp, #112]
 2c4:	ldr	x0, [sp, #144]
 2c8:	cmp	x1, x0
 2cc:	b.hi	2f0 <__letf2+0x2f0>  // b.pmore
 2d0:	ldr	x1, [sp, #112]
 2d4:	ldr	x0, [sp, #144]
 2d8:	cmp	x1, x0
 2dc:	b.ne	310 <__letf2+0x310>  // b.any
 2e0:	ldr	x1, [sp, #120]
 2e4:	ldr	x0, [sp, #152]
 2e8:	cmp	x1, x0
 2ec:	b.ls	310 <__letf2+0x310>  // b.plast
 2f0:	ldr	x0, [sp, #128]
 2f4:	cmp	x0, #0x0
 2f8:	b.eq	304 <__letf2+0x304>  // b.none
 2fc:	mov	w0, #0x1                   	// #1
 300:	b	308 <__letf2+0x308>
 304:	mov	w0, #0xffffffff            	// #-1
 308:	str	w0, [sp, #172]
 30c:	b	314 <__letf2+0x314>
 310:	str	wzr, [sp, #172]
 314:	ldrsw	x0, [sp, #168]
 318:	cmp	x0, #0x0
 31c:	b.eq	328 <__letf2+0x328>  // b.none
 320:	ldr	w0, [sp, #168]
 324:	bl	0 <__sfp_handle_exceptions>
 328:	ldr	w0, [sp, #172]
 32c:	ldp	x29, x30, [sp], #176
 330:	ret

multf3.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__multf3>:
       0:	sub	sp, sp, #0x2a0
       4:	stp	x29, x30, [sp]
       8:	mov	x29, sp
       c:	str	q0, [sp, #32]
      10:	str	q1, [sp, #16]
      14:	str	wzr, [sp, #596]
      18:	str	xzr, [sp, #488]
      1c:	mrs	x0, fpcr
      20:	str	x0, [sp, #488]
      24:	ldr	q0, [sp, #32]
      28:	str	q0, [sp, #112]
      2c:	ldr	x0, [sp, #112]
      30:	str	x0, [sp, #608]
      34:	ldr	x0, [sp, #120]
      38:	ubfx	x0, x0, #0, #48
      3c:	str	x0, [sp, #616]
      40:	ldrh	w0, [sp, #126]
      44:	ubfx	x0, x0, #0, #15
      48:	and	w0, w0, #0xffff
      4c:	and	x0, x0, #0xffff
      50:	str	x0, [sp, #600]
      54:	ldrb	w0, [sp, #127]
      58:	ubfx	x0, x0, #7, #1
      5c:	and	w0, w0, #0xff
      60:	and	x0, x0, #0xff
      64:	str	x0, [sp, #480]
      68:	ldr	x0, [sp, #600]
      6c:	cmp	x0, #0x0
      70:	b.eq	cc <__multf3+0xcc>  // b.none
      74:	ldr	x1, [sp, #600]
      78:	mov	x0, #0x7fff                	// #32767
      7c:	cmp	x1, x0
      80:	b.eq	1c0 <__multf3+0x1c0>  // b.none
      84:	ldr	x0, [sp, #616]
      88:	orr	x0, x0, #0x1000000000000
      8c:	str	x0, [sp, #616]
      90:	ldr	x0, [sp, #616]
      94:	lsl	x1, x0, #3
      98:	ldr	x0, [sp, #608]
      9c:	lsr	x0, x0, #61
      a0:	orr	x0, x1, x0
      a4:	str	x0, [sp, #616]
      a8:	ldr	x0, [sp, #608]
      ac:	lsl	x0, x0, #3
      b0:	str	x0, [sp, #608]
      b4:	ldr	x1, [sp, #600]
      b8:	mov	x0, #0xffffffffffffc001    	// #-16383
      bc:	add	x0, x1, x0
      c0:	str	x0, [sp, #600]
      c4:	str	xzr, [sp, #584]
      c8:	b	204 <__multf3+0x204>
      cc:	ldr	x1, [sp, #616]
      d0:	ldr	x0, [sp, #608]
      d4:	orr	x0, x1, x0
      d8:	cmp	x0, #0x0
      dc:	b.ne	ec <__multf3+0xec>  // b.any
      e0:	mov	x0, #0x1                   	// #1
      e4:	str	x0, [sp, #584]
      e8:	b	204 <__multf3+0x204>
      ec:	ldr	x0, [sp, #616]
      f0:	cmp	x0, #0x0
      f4:	b.eq	10c <__multf3+0x10c>  // b.none
      f8:	ldr	x0, [sp, #616]
      fc:	clz	x0, x0
     100:	sxtw	x0, w0
     104:	str	x0, [sp, #552]
     108:	b	128 <__multf3+0x128>
     10c:	ldr	x0, [sp, #608]
     110:	clz	x0, x0
     114:	sxtw	x0, w0
     118:	str	x0, [sp, #552]
     11c:	ldr	x0, [sp, #552]
     120:	add	x0, x0, #0x40
     124:	str	x0, [sp, #552]
     128:	ldr	x0, [sp, #552]
     12c:	sub	x0, x0, #0xf
     130:	str	x0, [sp, #552]
     134:	ldr	x0, [sp, #552]
     138:	cmp	x0, #0x3c
     13c:	b.gt	188 <__multf3+0x188>
     140:	ldr	x0, [sp, #552]
     144:	add	w0, w0, #0x3
     148:	ldr	x1, [sp, #616]
     14c:	lsl	x1, x1, x0
     150:	ldr	x0, [sp, #552]
     154:	mov	w2, w0
     158:	mov	w0, #0x3d                  	// #61
     15c:	sub	w0, w0, w2
     160:	ldr	x2, [sp, #608]
     164:	lsr	x0, x2, x0
     168:	orr	x0, x1, x0
     16c:	str	x0, [sp, #616]
     170:	ldr	x0, [sp, #552]
     174:	add	w0, w0, #0x3
     178:	ldr	x1, [sp, #608]
     17c:	lsl	x0, x1, x0
     180:	str	x0, [sp, #608]
     184:	b	1a0 <__multf3+0x1a0>
     188:	ldr	x0, [sp, #552]
     18c:	sub	w0, w0, #0x3d
     190:	ldr	x1, [sp, #608]
     194:	lsl	x0, x1, x0
     198:	str	x0, [sp, #616]
     19c:	str	xzr, [sp, #608]
     1a0:	ldr	x1, [sp, #552]
     1a4:	mov	x0, #0x3ffe                	// #16382
     1a8:	add	x0, x1, x0
     1ac:	ldr	x1, [sp, #600]
     1b0:	sub	x0, x1, x0
     1b4:	str	x0, [sp, #600]
     1b8:	str	xzr, [sp, #584]
     1bc:	b	204 <__multf3+0x204>
     1c0:	ldr	x1, [sp, #616]
     1c4:	ldr	x0, [sp, #608]
     1c8:	orr	x0, x1, x0
     1cc:	cmp	x0, #0x0
     1d0:	b.ne	1e0 <__multf3+0x1e0>  // b.any
     1d4:	mov	x0, #0x2                   	// #2
     1d8:	str	x0, [sp, #584]
     1dc:	b	204 <__multf3+0x204>
     1e0:	mov	x0, #0x3                   	// #3
     1e4:	str	x0, [sp, #584]
     1e8:	ldr	x0, [sp, #616]
     1ec:	and	x0, x0, #0x800000000000
     1f0:	cmp	x0, #0x0
     1f4:	b.ne	204 <__multf3+0x204>  // b.any
     1f8:	ldr	w0, [sp, #596]
     1fc:	orr	w0, w0, #0x1
     200:	str	w0, [sp, #596]
     204:	nop
     208:	ldr	q0, [sp, #16]
     20c:	str	q0, [sp, #96]
     210:	ldr	x0, [sp, #96]
     214:	str	x0, [sp, #640]
     218:	ldr	x0, [sp, #104]
     21c:	ubfx	x0, x0, #0, #48
     220:	str	x0, [sp, #648]
     224:	ldrh	w0, [sp, #110]
     228:	ubfx	x0, x0, #0, #15
     22c:	and	w0, w0, #0xffff
     230:	and	x0, x0, #0xffff
     234:	str	x0, [sp, #624]
     238:	ldrb	w0, [sp, #111]
     23c:	ubfx	x0, x0, #7, #1
     240:	and	w0, w0, #0xff
     244:	and	x0, x0, #0xff
     248:	str	x0, [sp, #472]
     24c:	ldr	x0, [sp, #624]
     250:	cmp	x0, #0x0
     254:	b.eq	2b0 <__multf3+0x2b0>  // b.none
     258:	ldr	x1, [sp, #624]
     25c:	mov	x0, #0x7fff                	// #32767
     260:	cmp	x1, x0
     264:	b.eq	3a4 <__multf3+0x3a4>  // b.none
     268:	ldr	x0, [sp, #648]
     26c:	orr	x0, x0, #0x1000000000000
     270:	str	x0, [sp, #648]
     274:	ldr	x0, [sp, #648]
     278:	lsl	x1, x0, #3
     27c:	ldr	x0, [sp, #640]
     280:	lsr	x0, x0, #61
     284:	orr	x0, x1, x0
     288:	str	x0, [sp, #648]
     28c:	ldr	x0, [sp, #640]
     290:	lsl	x0, x0, #3
     294:	str	x0, [sp, #640]
     298:	ldr	x1, [sp, #624]
     29c:	mov	x0, #0xffffffffffffc001    	// #-16383
     2a0:	add	x0, x1, x0
     2a4:	str	x0, [sp, #624]
     2a8:	str	xzr, [sp, #632]
     2ac:	b	3e8 <__multf3+0x3e8>
     2b0:	ldr	x1, [sp, #648]
     2b4:	ldr	x0, [sp, #640]
     2b8:	orr	x0, x1, x0
     2bc:	cmp	x0, #0x0
     2c0:	b.ne	2d0 <__multf3+0x2d0>  // b.any
     2c4:	mov	x0, #0x1                   	// #1
     2c8:	str	x0, [sp, #632]
     2cc:	b	3e8 <__multf3+0x3e8>
     2d0:	ldr	x0, [sp, #648]
     2d4:	cmp	x0, #0x0
     2d8:	b.eq	2f0 <__multf3+0x2f0>  // b.none
     2dc:	ldr	x0, [sp, #648]
     2e0:	clz	x0, x0
     2e4:	sxtw	x0, w0
     2e8:	str	x0, [sp, #544]
     2ec:	b	30c <__multf3+0x30c>
     2f0:	ldr	x0, [sp, #640]
     2f4:	clz	x0, x0
     2f8:	sxtw	x0, w0
     2fc:	str	x0, [sp, #544]
     300:	ldr	x0, [sp, #544]
     304:	add	x0, x0, #0x40
     308:	str	x0, [sp, #544]
     30c:	ldr	x0, [sp, #544]
     310:	sub	x0, x0, #0xf
     314:	str	x0, [sp, #544]
     318:	ldr	x0, [sp, #544]
     31c:	cmp	x0, #0x3c
     320:	b.gt	36c <__multf3+0x36c>
     324:	ldr	x0, [sp, #544]
     328:	add	w0, w0, #0x3
     32c:	ldr	x1, [sp, #648]
     330:	lsl	x1, x1, x0
     334:	ldr	x0, [sp, #544]
     338:	mov	w2, w0
     33c:	mov	w0, #0x3d                  	// #61
     340:	sub	w0, w0, w2
     344:	ldr	x2, [sp, #640]
     348:	lsr	x0, x2, x0
     34c:	orr	x0, x1, x0
     350:	str	x0, [sp, #648]
     354:	ldr	x0, [sp, #544]
     358:	add	w0, w0, #0x3
     35c:	ldr	x1, [sp, #640]
     360:	lsl	x0, x1, x0
     364:	str	x0, [sp, #640]
     368:	b	384 <__multf3+0x384>
     36c:	ldr	x0, [sp, #544]
     370:	sub	w0, w0, #0x3d
     374:	ldr	x1, [sp, #640]
     378:	lsl	x0, x1, x0
     37c:	str	x0, [sp, #648]
     380:	str	xzr, [sp, #640]
     384:	ldr	x1, [sp, #544]
     388:	mov	x0, #0x3ffe                	// #16382
     38c:	add	x0, x1, x0
     390:	ldr	x1, [sp, #624]
     394:	sub	x0, x1, x0
     398:	str	x0, [sp, #624]
     39c:	str	xzr, [sp, #632]
     3a0:	b	3e8 <__multf3+0x3e8>
     3a4:	ldr	x1, [sp, #648]
     3a8:	ldr	x0, [sp, #640]
     3ac:	orr	x0, x1, x0
     3b0:	cmp	x0, #0x0
     3b4:	b.ne	3c4 <__multf3+0x3c4>  // b.any
     3b8:	mov	x0, #0x2                   	// #2
     3bc:	str	x0, [sp, #632]
     3c0:	b	3e8 <__multf3+0x3e8>
     3c4:	mov	x0, #0x3                   	// #3
     3c8:	str	x0, [sp, #632]
     3cc:	ldr	x0, [sp, #648]
     3d0:	and	x0, x0, #0x800000000000
     3d4:	cmp	x0, #0x0
     3d8:	b.ne	3e8 <__multf3+0x3e8>  // b.any
     3dc:	ldr	w0, [sp, #596]
     3e0:	orr	w0, w0, #0x1
     3e4:	str	w0, [sp, #596]
     3e8:	nop
     3ec:	ldr	x1, [sp, #480]
     3f0:	ldr	x0, [sp, #472]
     3f4:	eor	x0, x1, x0
     3f8:	str	x0, [sp, #656]
     3fc:	ldr	x1, [sp, #600]
     400:	ldr	x0, [sp, #624]
     404:	add	x0, x1, x0
     408:	add	x0, x0, #0x1
     40c:	str	x0, [sp, #576]
     410:	ldr	x0, [sp, #584]
     414:	lsl	x1, x0, #2
     418:	ldr	x0, [sp, #632]
     41c:	orr	x0, x1, x0
     420:	cmp	x0, #0xf
     424:	b.eq	c34 <__multf3+0xc34>  // b.none
     428:	cmp	x0, #0xf
     42c:	b.gt	d08 <__multf3+0xd08>
     430:	cmp	x0, #0xe
     434:	b.gt	d08 <__multf3+0xd08>
     438:	cmp	x0, #0xc
     43c:	b.ge	c94 <__multf3+0xc94>  // b.tcont
     440:	cmp	x0, #0xb
     444:	b.eq	cb8 <__multf3+0xcb8>  // b.none
     448:	cmp	x0, #0xb
     44c:	b.gt	d08 <__multf3+0xd08>
     450:	cmp	x0, #0xa
     454:	b.gt	d08 <__multf3+0xd08>
     458:	cmp	x0, #0x3
     45c:	b.ge	480 <__multf3+0x480>  // b.tcont
     460:	cmp	x0, #0x0
     464:	b.eq	4e4 <__multf3+0x4e4>  // b.none
     468:	cmp	x0, #0x0
     46c:	b.lt	d08 <__multf3+0xd08>  // b.tstop
     470:	sub	x0, x0, #0x1
     474:	cmp	x0, #0x1
     478:	b.hi	d08 <__multf3+0xd08>  // b.pmore
     47c:	b	cc0 <__multf3+0xcc0>
     480:	mov	w1, w0
     484:	mov	x0, #0x1                   	// #1
     488:	lsl	x0, x0, x1
     48c:	mov	x1, #0x530                 	// #1328
     490:	and	x1, x0, x1
     494:	cmp	x1, #0x0
     498:	cset	w1, ne  // ne = any
     49c:	and	w1, w1, #0xff
     4a0:	cmp	w1, #0x0
     4a4:	b.ne	c9c <__multf3+0xc9c>  // b.any
     4a8:	mov	x1, #0x240                 	// #576
     4ac:	and	x1, x0, x1
     4b0:	cmp	x1, #0x0
     4b4:	cset	w1, ne  // ne = any
     4b8:	and	w1, w1, #0xff
     4bc:	cmp	w1, #0x0
     4c0:	b.ne	cdc <__multf3+0xcdc>  // b.any
     4c4:	mov	x1, #0x88                  	// #136
     4c8:	and	x0, x0, x1
     4cc:	cmp	x0, #0x0
     4d0:	cset	w0, ne  // ne = any
     4d4:	and	w0, w0, #0xff
     4d8:	cmp	w0, #0x0
     4dc:	b.ne	cb8 <__multf3+0xcb8>  // b.any
     4e0:	b	d08 <__multf3+0xd08>
     4e4:	str	xzr, [sp, #664]
     4e8:	ldr	x0, [sp, #608]
     4ec:	str	w0, [sp, #468]
     4f0:	ldr	x0, [sp, #608]
     4f4:	lsr	x0, x0, #32
     4f8:	str	w0, [sp, #464]
     4fc:	ldr	x0, [sp, #640]
     500:	str	w0, [sp, #460]
     504:	ldr	x0, [sp, #640]
     508:	lsr	x0, x0, #32
     50c:	str	w0, [sp, #456]
     510:	ldr	w1, [sp, #468]
     514:	ldr	w0, [sp, #460]
     518:	mul	x0, x1, x0
     51c:	str	x0, [sp, #448]
     520:	ldr	w1, [sp, #468]
     524:	ldr	w0, [sp, #456]
     528:	mul	x0, x1, x0
     52c:	str	x0, [sp, #440]
     530:	ldr	w1, [sp, #464]
     534:	ldr	w0, [sp, #460]
     538:	mul	x0, x1, x0
     53c:	str	x0, [sp, #432]
     540:	ldr	w1, [sp, #464]
     544:	ldr	w0, [sp, #456]
     548:	mul	x0, x1, x0
     54c:	str	x0, [sp, #536]
     550:	ldr	x0, [sp, #448]
     554:	lsr	x0, x0, #32
     558:	ldr	x1, [sp, #440]
     55c:	add	x0, x1, x0
     560:	str	x0, [sp, #440]
     564:	ldr	x1, [sp, #440]
     568:	ldr	x0, [sp, #432]
     56c:	add	x0, x1, x0
     570:	str	x0, [sp, #440]
     574:	ldr	x1, [sp, #440]
     578:	ldr	x0, [sp, #432]
     57c:	cmp	x1, x0
     580:	b.cs	594 <__multf3+0x594>  // b.hs, b.nlast
     584:	ldr	x1, [sp, #536]
     588:	mov	x0, #0x100000000           	// #4294967296
     58c:	add	x0, x1, x0
     590:	str	x0, [sp, #536]
     594:	ldr	x0, [sp, #440]
     598:	lsr	x1, x0, #32
     59c:	ldr	x0, [sp, #536]
     5a0:	add	x1, x1, x0
     5a4:	add	x0, sp, #0x30
     5a8:	str	x1, [x0, #8]
     5ac:	ldr	x0, [sp, #440]
     5b0:	and	x0, x0, #0xffffffff
     5b4:	lsl	x1, x0, #32
     5b8:	ldr	x0, [sp, #448]
     5bc:	and	x0, x0, #0xffffffff
     5c0:	add	x1, x1, x0
     5c4:	add	x0, sp, #0x30
     5c8:	str	x1, [x0]
     5cc:	ldr	x0, [sp, #608]
     5d0:	str	w0, [sp, #428]
     5d4:	ldr	x0, [sp, #608]
     5d8:	lsr	x0, x0, #32
     5dc:	str	w0, [sp, #424]
     5e0:	ldr	x0, [sp, #648]
     5e4:	str	w0, [sp, #420]
     5e8:	ldr	x0, [sp, #648]
     5ec:	lsr	x0, x0, #32
     5f0:	str	w0, [sp, #416]
     5f4:	ldr	w1, [sp, #428]
     5f8:	ldr	w0, [sp, #420]
     5fc:	mul	x0, x1, x0
     600:	str	x0, [sp, #408]
     604:	ldr	w1, [sp, #428]
     608:	ldr	w0, [sp, #416]
     60c:	mul	x0, x1, x0
     610:	str	x0, [sp, #400]
     614:	ldr	w1, [sp, #424]
     618:	ldr	w0, [sp, #420]
     61c:	mul	x0, x1, x0
     620:	str	x0, [sp, #392]
     624:	ldr	w1, [sp, #424]
     628:	ldr	w0, [sp, #416]
     62c:	mul	x0, x1, x0
     630:	str	x0, [sp, #528]
     634:	ldr	x0, [sp, #408]
     638:	lsr	x0, x0, #32
     63c:	ldr	x1, [sp, #400]
     640:	add	x0, x1, x0
     644:	str	x0, [sp, #400]
     648:	ldr	x1, [sp, #400]
     64c:	ldr	x0, [sp, #392]
     650:	add	x0, x1, x0
     654:	str	x0, [sp, #400]
     658:	ldr	x1, [sp, #400]
     65c:	ldr	x0, [sp, #392]
     660:	cmp	x1, x0
     664:	b.cs	678 <__multf3+0x678>  // b.hs, b.nlast
     668:	ldr	x1, [sp, #528]
     66c:	mov	x0, #0x100000000           	// #4294967296
     670:	add	x0, x1, x0
     674:	str	x0, [sp, #528]
     678:	ldr	x0, [sp, #400]
     67c:	lsr	x0, x0, #32
     680:	ldr	x1, [sp, #528]
     684:	add	x0, x1, x0
     688:	str	x0, [sp, #384]
     68c:	ldr	x0, [sp, #400]
     690:	and	x0, x0, #0xffffffff
     694:	lsl	x1, x0, #32
     698:	ldr	x0, [sp, #408]
     69c:	and	x0, x0, #0xffffffff
     6a0:	add	x0, x1, x0
     6a4:	str	x0, [sp, #376]
     6a8:	ldr	x0, [sp, #616]
     6ac:	str	w0, [sp, #372]
     6b0:	ldr	x0, [sp, #616]
     6b4:	lsr	x0, x0, #32
     6b8:	str	w0, [sp, #368]
     6bc:	ldr	x0, [sp, #640]
     6c0:	str	w0, [sp, #364]
     6c4:	ldr	x0, [sp, #640]
     6c8:	lsr	x0, x0, #32
     6cc:	str	w0, [sp, #360]
     6d0:	ldr	w1, [sp, #372]
     6d4:	ldr	w0, [sp, #364]
     6d8:	mul	x0, x1, x0
     6dc:	str	x0, [sp, #352]
     6e0:	ldr	w1, [sp, #372]
     6e4:	ldr	w0, [sp, #360]
     6e8:	mul	x0, x1, x0
     6ec:	str	x0, [sp, #344]
     6f0:	ldr	w1, [sp, #368]
     6f4:	ldr	w0, [sp, #364]
     6f8:	mul	x0, x1, x0
     6fc:	str	x0, [sp, #336]
     700:	ldr	w1, [sp, #368]
     704:	ldr	w0, [sp, #360]
     708:	mul	x0, x1, x0
     70c:	str	x0, [sp, #520]
     710:	ldr	x0, [sp, #352]
     714:	lsr	x0, x0, #32
     718:	ldr	x1, [sp, #344]
     71c:	add	x0, x1, x0
     720:	str	x0, [sp, #344]
     724:	ldr	x1, [sp, #344]
     728:	ldr	x0, [sp, #336]
     72c:	add	x0, x1, x0
     730:	str	x0, [sp, #344]
     734:	ldr	x1, [sp, #344]
     738:	ldr	x0, [sp, #336]
     73c:	cmp	x1, x0
     740:	b.cs	754 <__multf3+0x754>  // b.hs, b.nlast
     744:	ldr	x1, [sp, #520]
     748:	mov	x0, #0x100000000           	// #4294967296
     74c:	add	x0, x1, x0
     750:	str	x0, [sp, #520]
     754:	ldr	x0, [sp, #344]
     758:	lsr	x0, x0, #32
     75c:	ldr	x1, [sp, #520]
     760:	add	x0, x1, x0
     764:	str	x0, [sp, #328]
     768:	ldr	x0, [sp, #344]
     76c:	and	x0, x0, #0xffffffff
     770:	lsl	x1, x0, #32
     774:	ldr	x0, [sp, #352]
     778:	and	x0, x0, #0xffffffff
     77c:	add	x0, x1, x0
     780:	str	x0, [sp, #320]
     784:	ldr	x0, [sp, #616]
     788:	str	w0, [sp, #316]
     78c:	ldr	x0, [sp, #616]
     790:	lsr	x0, x0, #32
     794:	str	w0, [sp, #312]
     798:	ldr	x0, [sp, #648]
     79c:	str	w0, [sp, #308]
     7a0:	ldr	x0, [sp, #648]
     7a4:	lsr	x0, x0, #32
     7a8:	str	w0, [sp, #304]
     7ac:	ldr	w1, [sp, #316]
     7b0:	ldr	w0, [sp, #308]
     7b4:	mul	x0, x1, x0
     7b8:	str	x0, [sp, #296]
     7bc:	ldr	w1, [sp, #316]
     7c0:	ldr	w0, [sp, #304]
     7c4:	mul	x0, x1, x0
     7c8:	str	x0, [sp, #288]
     7cc:	ldr	w1, [sp, #312]
     7d0:	ldr	w0, [sp, #308]
     7d4:	mul	x0, x1, x0
     7d8:	str	x0, [sp, #280]
     7dc:	ldr	w1, [sp, #312]
     7e0:	ldr	w0, [sp, #304]
     7e4:	mul	x0, x1, x0
     7e8:	str	x0, [sp, #512]
     7ec:	ldr	x0, [sp, #296]
     7f0:	lsr	x0, x0, #32
     7f4:	ldr	x1, [sp, #288]
     7f8:	add	x0, x1, x0
     7fc:	str	x0, [sp, #288]
     800:	ldr	x1, [sp, #288]
     804:	ldr	x0, [sp, #280]
     808:	add	x0, x1, x0
     80c:	str	x0, [sp, #288]
     810:	ldr	x1, [sp, #288]
     814:	ldr	x0, [sp, #280]
     818:	cmp	x1, x0
     81c:	b.cs	830 <__multf3+0x830>  // b.hs, b.nlast
     820:	ldr	x1, [sp, #512]
     824:	mov	x0, #0x100000000           	// #4294967296
     828:	add	x0, x1, x0
     82c:	str	x0, [sp, #512]
     830:	ldr	x0, [sp, #288]
     834:	lsr	x1, x0, #32
     838:	ldr	x0, [sp, #512]
     83c:	add	x1, x1, x0
     840:	add	x0, sp, #0x30
     844:	str	x1, [x0, #24]
     848:	ldr	x0, [sp, #288]
     84c:	and	x0, x0, #0xffffffff
     850:	lsl	x1, x0, #32
     854:	ldr	x0, [sp, #296]
     858:	and	x0, x0, #0xffffffff
     85c:	add	x1, x1, x0
     860:	add	x0, sp, #0x30
     864:	str	x1, [x0, #16]
     868:	add	x0, sp, #0x30
     86c:	ldr	x1, [x0, #8]
     870:	ldr	x0, [sp, #376]
     874:	add	x1, x1, x0
     878:	add	x0, sp, #0x30
     87c:	str	x1, [x0, #8]
     880:	add	x0, sp, #0x30
     884:	ldr	x0, [x0, #8]
     888:	ldr	x1, [sp, #376]
     88c:	cmp	x1, x0
     890:	cset	w0, hi  // hi = pmore
     894:	and	w0, w0, #0xff
     898:	and	x0, x0, #0xff
     89c:	str	x0, [sp, #272]
     8a0:	add	x0, sp, #0x30
     8a4:	ldr	x1, [x0, #16]
     8a8:	ldr	x0, [sp, #384]
     8ac:	add	x1, x1, x0
     8b0:	add	x0, sp, #0x30
     8b4:	str	x1, [x0, #16]
     8b8:	add	x0, sp, #0x30
     8bc:	ldr	x0, [x0, #16]
     8c0:	ldr	x1, [sp, #384]
     8c4:	cmp	x1, x0
     8c8:	cset	w0, hi  // hi = pmore
     8cc:	and	w0, w0, #0xff
     8d0:	and	x0, x0, #0xff
     8d4:	str	x0, [sp, #264]
     8d8:	add	x0, sp, #0x30
     8dc:	ldr	x1, [x0, #16]
     8e0:	ldr	x0, [sp, #272]
     8e4:	add	x1, x1, x0
     8e8:	add	x0, sp, #0x30
     8ec:	str	x1, [x0, #16]
     8f0:	add	x0, sp, #0x30
     8f4:	ldr	x0, [x0, #16]
     8f8:	ldr	x1, [sp, #272]
     8fc:	cmp	x1, x0
     900:	cset	w0, hi  // hi = pmore
     904:	and	w0, w0, #0xff
     908:	and	x0, x0, #0xff
     90c:	ldr	x1, [sp, #264]
     910:	orr	x0, x1, x0
     914:	str	x0, [sp, #264]
     918:	add	x0, sp, #0x30
     91c:	ldr	x1, [x0, #24]
     920:	ldr	x0, [sp, #264]
     924:	add	x1, x1, x0
     928:	add	x0, sp, #0x30
     92c:	str	x1, [x0, #24]
     930:	add	x0, sp, #0x30
     934:	ldr	x1, [x0, #8]
     938:	ldr	x0, [sp, #320]
     93c:	add	x1, x1, x0
     940:	add	x0, sp, #0x30
     944:	str	x1, [x0, #8]
     948:	add	x0, sp, #0x30
     94c:	ldr	x0, [x0, #8]
     950:	ldr	x1, [sp, #320]
     954:	cmp	x1, x0
     958:	cset	w0, hi  // hi = pmore
     95c:	and	w0, w0, #0xff
     960:	and	x0, x0, #0xff
     964:	str	x0, [sp, #256]
     968:	add	x0, sp, #0x30
     96c:	ldr	x1, [x0, #16]
     970:	ldr	x0, [sp, #328]
     974:	add	x1, x1, x0
     978:	add	x0, sp, #0x30
     97c:	str	x1, [x0, #16]
     980:	add	x0, sp, #0x30
     984:	ldr	x0, [x0, #16]
     988:	ldr	x1, [sp, #328]
     98c:	cmp	x1, x0
     990:	cset	w0, hi  // hi = pmore
     994:	and	w0, w0, #0xff
     998:	and	x0, x0, #0xff
     99c:	str	x0, [sp, #248]
     9a0:	add	x0, sp, #0x30
     9a4:	ldr	x1, [x0, #16]
     9a8:	ldr	x0, [sp, #256]
     9ac:	add	x1, x1, x0
     9b0:	add	x0, sp, #0x30
     9b4:	str	x1, [x0, #16]
     9b8:	add	x0, sp, #0x30
     9bc:	ldr	x0, [x0, #16]
     9c0:	ldr	x1, [sp, #256]
     9c4:	cmp	x1, x0
     9c8:	cset	w0, hi  // hi = pmore
     9cc:	and	w0, w0, #0xff
     9d0:	and	x0, x0, #0xff
     9d4:	ldr	x1, [sp, #248]
     9d8:	orr	x0, x1, x0
     9dc:	str	x0, [sp, #248]
     9e0:	add	x0, sp, #0x30
     9e4:	ldr	x1, [x0, #24]
     9e8:	ldr	x0, [sp, #248]
     9ec:	add	x1, x1, x0
     9f0:	add	x0, sp, #0x30
     9f4:	str	x1, [x0, #24]
     9f8:	mov	x0, #0x1                   	// #1
     9fc:	str	x0, [sp, #240]
     a00:	mov	x0, #0x33                  	// #51
     a04:	str	x0, [sp, #232]
     a08:	mov	x1, #0x40                  	// #64
     a0c:	ldr	x0, [sp, #232]
     a10:	sub	x0, x1, x0
     a14:	str	x0, [sp, #224]
     a18:	str	xzr, [sp, #504]
     a1c:	str	xzr, [sp, #496]
     a20:	b	a48 <__multf3+0xa48>
     a24:	add	x0, sp, #0x30
     a28:	ldr	x1, [sp, #504]
     a2c:	ldr	x0, [x0, x1, lsl #3]
     a30:	ldr	x1, [sp, #496]
     a34:	orr	x0, x1, x0
     a38:	str	x0, [sp, #496]
     a3c:	ldr	x0, [sp, #504]
     a40:	add	x0, x0, #0x1
     a44:	str	x0, [sp, #504]
     a48:	ldr	x1, [sp, #504]
     a4c:	ldr	x0, [sp, #240]
     a50:	cmp	x1, x0
     a54:	b.lt	a24 <__multf3+0xa24>  // b.tstop
     a58:	ldr	x0, [sp, #232]
     a5c:	cmp	x0, #0x0
     a60:	b.ne	ab4 <__multf3+0xab4>  // b.any
     a64:	str	xzr, [sp, #504]
     a68:	b	a98 <__multf3+0xa98>
     a6c:	ldr	x1, [sp, #504]
     a70:	ldr	x0, [sp, #240]
     a74:	add	x1, x1, x0
     a78:	add	x0, sp, #0x30
     a7c:	ldr	x2, [x0, x1, lsl #3]
     a80:	add	x0, sp, #0x30
     a84:	ldr	x1, [sp, #504]
     a88:	str	x2, [x0, x1, lsl #3]
     a8c:	ldr	x0, [sp, #504]
     a90:	add	x0, x0, #0x1
     a94:	str	x0, [sp, #504]
     a98:	mov	x1, #0x3                   	// #3
     a9c:	ldr	x0, [sp, #240]
     aa0:	sub	x0, x1, x0
     aa4:	ldr	x1, [sp, #504]
     aa8:	cmp	x1, x0
     aac:	b.le	a6c <__multf3+0xa6c>
     ab0:	b	b90 <__multf3+0xb90>
     ab4:	add	x0, sp, #0x30
     ab8:	ldr	x1, [sp, #504]
     abc:	ldr	x0, [x0, x1, lsl #3]
     ac0:	ldr	x1, [sp, #224]
     ac4:	lsl	x0, x0, x1
     ac8:	ldr	x1, [sp, #496]
     acc:	orr	x0, x1, x0
     ad0:	str	x0, [sp, #496]
     ad4:	str	xzr, [sp, #504]
     ad8:	b	b34 <__multf3+0xb34>
     adc:	ldr	x1, [sp, #504]
     ae0:	ldr	x0, [sp, #240]
     ae4:	add	x1, x1, x0
     ae8:	add	x0, sp, #0x30
     aec:	ldr	x0, [x0, x1, lsl #3]
     af0:	ldr	x1, [sp, #232]
     af4:	lsr	x1, x0, x1
     af8:	ldr	x2, [sp, #504]
     afc:	ldr	x0, [sp, #240]
     b00:	add	x0, x2, x0
     b04:	add	x2, x0, #0x1
     b08:	add	x0, sp, #0x30
     b0c:	ldr	x0, [x0, x2, lsl #3]
     b10:	ldr	x2, [sp, #224]
     b14:	lsl	x0, x0, x2
     b18:	orr	x2, x1, x0
     b1c:	add	x0, sp, #0x30
     b20:	ldr	x1, [sp, #504]
     b24:	str	x2, [x0, x1, lsl #3]
     b28:	ldr	x0, [sp, #504]
     b2c:	add	x0, x0, #0x1
     b30:	str	x0, [sp, #504]
     b34:	mov	x1, #0x3                   	// #3
     b38:	ldr	x0, [sp, #240]
     b3c:	sub	x0, x1, x0
     b40:	ldr	x1, [sp, #504]
     b44:	cmp	x1, x0
     b48:	b.lt	adc <__multf3+0xadc>  // b.tstop
     b4c:	add	x0, sp, #0x30
     b50:	ldr	x1, [x0, #24]
     b54:	ldr	x0, [sp, #232]
     b58:	mov	w3, w0
     b5c:	ldr	x0, [sp, #504]
     b60:	add	x2, x0, #0x1
     b64:	str	x2, [sp, #504]
     b68:	lsr	x2, x1, x3
     b6c:	add	x1, sp, #0x30
     b70:	str	x2, [x1, x0, lsl #3]
     b74:	b	b90 <__multf3+0xb90>
     b78:	add	x0, sp, #0x30
     b7c:	ldr	x1, [sp, #504]
     b80:	str	xzr, [x0, x1, lsl #3]
     b84:	ldr	x0, [sp, #504]
     b88:	add	x0, x0, #0x1
     b8c:	str	x0, [sp, #504]
     b90:	ldr	x0, [sp, #504]
     b94:	cmp	x0, #0x3
     b98:	b.le	b78 <__multf3+0xb78>
     b9c:	ldr	x0, [sp, #496]
     ba0:	cmp	x0, #0x0
     ba4:	cset	w0, ne  // ne = any
     ba8:	and	w0, w0, #0xff
     bac:	str	w0, [sp, #220]
     bb0:	add	x0, sp, #0x30
     bb4:	ldr	x1, [x0]
     bb8:	ldrsw	x0, [sp, #220]
     bbc:	orr	x1, x1, x0
     bc0:	add	x0, sp, #0x30
     bc4:	str	x1, [x0]
     bc8:	add	x0, sp, #0x30
     bcc:	ldr	x0, [x0]
     bd0:	str	x0, [sp, #568]
     bd4:	add	x0, sp, #0x30
     bd8:	ldr	x0, [x0, #8]
     bdc:	str	x0, [sp, #560]
     be0:	ldr	x0, [sp, #560]
     be4:	and	x0, x0, #0x10000000000000
     be8:	cmp	x0, #0x0
     bec:	b.eq	c24 <__multf3+0xc24>  // b.none
     bf0:	ldr	x0, [sp, #560]
     bf4:	lsl	x1, x0, #63
     bf8:	ldr	x0, [sp, #568]
     bfc:	lsr	x0, x0, #1
     c00:	orr	x1, x1, x0
     c04:	ldr	x0, [sp, #568]
     c08:	and	x0, x0, #0x1
     c0c:	orr	x0, x1, x0
     c10:	str	x0, [sp, #568]
     c14:	ldr	x0, [sp, #560]
     c18:	lsr	x0, x0, #1
     c1c:	str	x0, [sp, #560]
     c20:	b	d08 <__multf3+0xd08>
     c24:	ldr	x0, [sp, #576]
     c28:	sub	x0, x0, #0x1
     c2c:	str	x0, [sp, #576]
     c30:	b	d08 <__multf3+0xd08>
     c34:	ldr	x0, [sp, #616]
     c38:	and	x0, x0, #0x800000000000
     c3c:	cmp	x0, #0x0
     c40:	b.eq	c70 <__multf3+0xc70>  // b.none
     c44:	ldr	x0, [sp, #648]
     c48:	and	x0, x0, #0x800000000000
     c4c:	cmp	x0, #0x0
     c50:	b.ne	c70 <__multf3+0xc70>  // b.any
     c54:	ldr	x0, [sp, #472]
     c58:	str	x0, [sp, #656]
     c5c:	ldr	x0, [sp, #640]
     c60:	str	x0, [sp, #568]
     c64:	ldr	x0, [sp, #648]
     c68:	str	x0, [sp, #560]
     c6c:	b	c88 <__multf3+0xc88>
     c70:	ldr	x0, [sp, #480]
     c74:	str	x0, [sp, #656]
     c78:	ldr	x0, [sp, #608]
     c7c:	str	x0, [sp, #568]
     c80:	ldr	x0, [sp, #616]
     c84:	str	x0, [sp, #560]
     c88:	mov	x0, #0x3                   	// #3
     c8c:	str	x0, [sp, #664]
     c90:	b	d08 <__multf3+0xd08>
     c94:	ldr	x0, [sp, #480]
     c98:	str	x0, [sp, #656]
     c9c:	ldr	x0, [sp, #608]
     ca0:	str	x0, [sp, #568]
     ca4:	ldr	x0, [sp, #616]
     ca8:	str	x0, [sp, #560]
     cac:	ldr	x0, [sp, #584]
     cb0:	str	x0, [sp, #664]
     cb4:	b	d08 <__multf3+0xd08>
     cb8:	ldr	x0, [sp, #472]
     cbc:	str	x0, [sp, #656]
     cc0:	ldr	x0, [sp, #640]
     cc4:	str	x0, [sp, #568]
     cc8:	ldr	x0, [sp, #648]
     ccc:	str	x0, [sp, #560]
     cd0:	ldr	x0, [sp, #632]
     cd4:	str	x0, [sp, #664]
     cd8:	b	d08 <__multf3+0xd08>
     cdc:	str	xzr, [sp, #656]
     ce0:	mov	x0, #0x3                   	// #3
     ce4:	str	x0, [sp, #664]
     ce8:	mov	x0, #0xffffffffffffffff    	// #-1
     cec:	str	x0, [sp, #568]
     cf0:	mov	x0, #0xffffffffffff        	// #281474976710655
     cf4:	str	x0, [sp, #560]
     cf8:	ldr	w0, [sp, #596]
     cfc:	orr	w0, w0, #0x1
     d00:	str	w0, [sp, #596]
     d04:	b	d08 <__multf3+0xd08>
     d08:	ldr	x0, [sp, #664]
     d0c:	cmp	x0, #0x3
     d10:	b.eq	14a4 <__multf3+0x14a4>  // b.none
     d14:	ldr	x0, [sp, #664]
     d18:	cmp	x0, #0x3
     d1c:	b.gt	14bc <__multf3+0x14bc>
     d20:	ldr	x0, [sp, #664]
     d24:	cmp	x0, #0x2
     d28:	b.eq	1490 <__multf3+0x1490>  // b.none
     d2c:	ldr	x0, [sp, #664]
     d30:	cmp	x0, #0x2
     d34:	b.gt	14bc <__multf3+0x14bc>
     d38:	ldr	x0, [sp, #664]
     d3c:	cmp	x0, #0x0
     d40:	b.eq	d54 <__multf3+0xd54>  // b.none
     d44:	ldr	x0, [sp, #664]
     d48:	cmp	x0, #0x1
     d4c:	b.eq	1480 <__multf3+0x1480>  // b.none
     d50:	b	14bc <__multf3+0x14bc>
     d54:	ldr	x1, [sp, #576]
     d58:	mov	x0, #0x3fff                	// #16383
     d5c:	add	x0, x1, x0
     d60:	str	x0, [sp, #576]
     d64:	ldr	x0, [sp, #576]
     d68:	cmp	x0, #0x0
     d6c:	b.le	fe8 <__multf3+0xfe8>
     d70:	ldr	x0, [sp, #568]
     d74:	and	x0, x0, #0x7
     d78:	cmp	x0, #0x0
     d7c:	b.eq	ec4 <__multf3+0xec4>  // b.none
     d80:	ldr	w0, [sp, #596]
     d84:	orr	w0, w0, #0x10
     d88:	str	w0, [sp, #596]
     d8c:	ldr	x0, [sp, #488]
     d90:	and	x0, x0, #0xc00000
     d94:	cmp	x0, #0xc00, lsl #12
     d98:	b.eq	ecc <__multf3+0xecc>  // b.none
     d9c:	cmp	x0, #0xc00, lsl #12
     da0:	b.hi	ed0 <__multf3+0xed0>  // b.pmore
     da4:	cmp	x0, #0x800, lsl #12
     da8:	b.eq	e6c <__multf3+0xe6c>  // b.none
     dac:	cmp	x0, #0x800, lsl #12
     db0:	b.hi	ed0 <__multf3+0xed0>  // b.pmore
     db4:	cmp	x0, #0x0
     db8:	b.eq	dc8 <__multf3+0xdc8>  // b.none
     dbc:	cmp	x0, #0x400, lsl #12
     dc0:	b.eq	e14 <__multf3+0xe14>  // b.none
     dc4:	b	ed0 <__multf3+0xed0>
     dc8:	ldr	x0, [sp, #568]
     dcc:	and	x0, x0, #0xf
     dd0:	cmp	x0, #0x4
     dd4:	b.eq	ecc <__multf3+0xecc>  // b.none
     dd8:	ldr	x0, [sp, #568]
     ddc:	add	x0, x0, #0x4
     de0:	str	x0, [sp, #144]
     de4:	ldr	x1, [sp, #144]
     de8:	ldr	x0, [sp, #568]
     dec:	cmp	x1, x0
     df0:	cset	w0, cc  // cc = lo, ul, last
     df4:	and	w0, w0, #0xff
     df8:	and	x0, x0, #0xff
     dfc:	ldr	x1, [sp, #560]
     e00:	add	x0, x1, x0
     e04:	str	x0, [sp, #560]
     e08:	ldr	x0, [sp, #144]
     e0c:	str	x0, [sp, #568]
     e10:	b	ecc <__multf3+0xecc>
     e14:	ldr	x0, [sp, #656]
     e18:	cmp	x0, #0x0
     e1c:	b.ne	ecc <__multf3+0xecc>  // b.any
     e20:	ldr	x0, [sp, #568]
     e24:	and	x0, x0, #0x7
     e28:	cmp	x0, #0x0
     e2c:	b.eq	ecc <__multf3+0xecc>  // b.none
     e30:	ldr	x0, [sp, #568]
     e34:	add	x0, x0, #0x8
     e38:	str	x0, [sp, #152]
     e3c:	ldr	x1, [sp, #152]
     e40:	ldr	x0, [sp, #568]
     e44:	cmp	x1, x0
     e48:	cset	w0, cc  // cc = lo, ul, last
     e4c:	and	w0, w0, #0xff
     e50:	and	x0, x0, #0xff
     e54:	ldr	x1, [sp, #560]
     e58:	add	x0, x1, x0
     e5c:	str	x0, [sp, #560]
     e60:	ldr	x0, [sp, #152]
     e64:	str	x0, [sp, #568]
     e68:	b	ecc <__multf3+0xecc>
     e6c:	ldr	x0, [sp, #656]
     e70:	cmp	x0, #0x0
     e74:	b.eq	ecc <__multf3+0xecc>  // b.none
     e78:	ldr	x0, [sp, #568]
     e7c:	and	x0, x0, #0x7
     e80:	cmp	x0, #0x0
     e84:	b.eq	ecc <__multf3+0xecc>  // b.none
     e88:	ldr	x0, [sp, #568]
     e8c:	add	x0, x0, #0x8
     e90:	str	x0, [sp, #160]
     e94:	ldr	x1, [sp, #160]
     e98:	ldr	x0, [sp, #568]
     e9c:	cmp	x1, x0
     ea0:	cset	w0, cc  // cc = lo, ul, last
     ea4:	and	w0, w0, #0xff
     ea8:	and	x0, x0, #0xff
     eac:	ldr	x1, [sp, #560]
     eb0:	add	x0, x1, x0
     eb4:	str	x0, [sp, #560]
     eb8:	ldr	x0, [sp, #160]
     ebc:	str	x0, [sp, #568]
     ec0:	b	ecc <__multf3+0xecc>
     ec4:	nop
     ec8:	b	ed0 <__multf3+0xed0>
     ecc:	nop
     ed0:	ldr	x0, [sp, #560]
     ed4:	and	x0, x0, #0x10000000000000
     ed8:	cmp	x0, #0x0
     edc:	b.eq	ef8 <__multf3+0xef8>  // b.none
     ee0:	ldr	x0, [sp, #560]
     ee4:	and	x0, x0, #0xffefffffffffffff
     ee8:	str	x0, [sp, #560]
     eec:	ldr	x0, [sp, #576]
     ef0:	add	x0, x0, #0x1
     ef4:	str	x0, [sp, #576]
     ef8:	ldr	x0, [sp, #568]
     efc:	lsr	x1, x0, #3
     f00:	ldr	x0, [sp, #560]
     f04:	lsl	x0, x0, #61
     f08:	orr	x0, x1, x0
     f0c:	str	x0, [sp, #568]
     f10:	ldr	x0, [sp, #560]
     f14:	lsr	x0, x0, #3
     f18:	str	x0, [sp, #560]
     f1c:	ldr	x1, [sp, #576]
     f20:	mov	x0, #0x7ffe                	// #32766
     f24:	cmp	x1, x0
     f28:	b.le	14b8 <__multf3+0x14b8>
     f2c:	ldr	x0, [sp, #488]
     f30:	and	x0, x0, #0xc00000
     f34:	cmp	x0, #0x800, lsl #12
     f38:	b.eq	f7c <__multf3+0xf7c>  // b.none
     f3c:	cmp	x0, #0x800, lsl #12
     f40:	b.hi	f94 <__multf3+0xf94>  // b.pmore
     f44:	cmp	x0, #0x0
     f48:	b.eq	f58 <__multf3+0xf58>  // b.none
     f4c:	cmp	x0, #0x400, lsl #12
     f50:	b.eq	f64 <__multf3+0xf64>  // b.none
     f54:	b	f94 <__multf3+0xf94>
     f58:	mov	x0, #0x2                   	// #2
     f5c:	str	x0, [sp, #664]
     f60:	b	f90 <__multf3+0xf90>
     f64:	ldr	x0, [sp, #656]
     f68:	cmp	x0, #0x0
     f6c:	b.ne	f90 <__multf3+0xf90>  // b.any
     f70:	mov	x0, #0x2                   	// #2
     f74:	str	x0, [sp, #664]
     f78:	b	f90 <__multf3+0xf90>
     f7c:	ldr	x0, [sp, #656]
     f80:	cmp	x0, #0x0
     f84:	b.eq	f90 <__multf3+0xf90>  // b.none
     f88:	mov	x0, #0x2                   	// #2
     f8c:	str	x0, [sp, #664]
     f90:	nop
     f94:	ldr	x0, [sp, #664]
     f98:	cmp	x0, #0x2
     f9c:	b.ne	fb4 <__multf3+0xfb4>  // b.any
     fa0:	mov	x0, #0x7fff                	// #32767
     fa4:	str	x0, [sp, #576]
     fa8:	str	xzr, [sp, #568]
     fac:	str	xzr, [sp, #560]
     fb0:	b	fcc <__multf3+0xfcc>
     fb4:	mov	x0, #0x7ffe                	// #32766
     fb8:	str	x0, [sp, #576]
     fbc:	mov	x0, #0xffffffffffffffff    	// #-1
     fc0:	str	x0, [sp, #568]
     fc4:	mov	x0, #0xffffffffffffffff    	// #-1
     fc8:	str	x0, [sp, #560]
     fcc:	ldr	w0, [sp, #596]
     fd0:	orr	w0, w0, #0x4
     fd4:	str	w0, [sp, #596]
     fd8:	ldr	w0, [sp, #596]
     fdc:	orr	w0, w0, #0x10
     fe0:	str	w0, [sp, #596]
     fe4:	b	14b8 <__multf3+0x14b8>
     fe8:	mov	w0, #0x1                   	// #1
     fec:	str	w0, [sp, #216]
     ff0:	mov	x1, #0x1                   	// #1
     ff4:	ldr	x0, [sp, #576]
     ff8:	sub	x0, x1, x0
     ffc:	str	x0, [sp, #576]
    1000:	ldr	x0, [sp, #576]
    1004:	cmp	x0, #0x74
    1008:	b.gt	12e0 <__multf3+0x12e0>
    100c:	ldr	x0, [sp, #576]
    1010:	cmp	x0, #0x3f
    1014:	b.gt	108c <__multf3+0x108c>
    1018:	ldr	x0, [sp, #576]
    101c:	mov	w1, w0
    1020:	mov	w0, #0x40                  	// #64
    1024:	sub	w0, w0, w1
    1028:	ldr	x1, [sp, #560]
    102c:	lsl	x1, x1, x0
    1030:	ldr	x0, [sp, #576]
    1034:	mov	w2, w0
    1038:	ldr	x0, [sp, #568]
    103c:	lsr	x0, x0, x2
    1040:	orr	x1, x1, x0
    1044:	ldr	x0, [sp, #576]
    1048:	mov	w2, w0
    104c:	mov	w0, #0x40                  	// #64
    1050:	sub	w0, w0, w2
    1054:	ldr	x2, [sp, #568]
    1058:	lsl	x0, x2, x0
    105c:	cmp	x0, #0x0
    1060:	cset	w0, ne  // ne = any
    1064:	and	w0, w0, #0xff
    1068:	sxtw	x0, w0
    106c:	orr	x0, x1, x0
    1070:	str	x0, [sp, #568]
    1074:	ldr	x0, [sp, #576]
    1078:	mov	w1, w0
    107c:	ldr	x0, [sp, #560]
    1080:	lsr	x0, x0, x1
    1084:	str	x0, [sp, #560]
    1088:	b	10ec <__multf3+0x10ec>
    108c:	ldr	x0, [sp, #576]
    1090:	sub	w0, w0, #0x40
    1094:	ldr	x1, [sp, #560]
    1098:	lsr	x1, x1, x0
    109c:	ldr	x0, [sp, #576]
    10a0:	cmp	x0, #0x40
    10a4:	b.eq	10c4 <__multf3+0x10c4>  // b.none
    10a8:	ldr	x0, [sp, #576]
    10ac:	mov	w2, w0
    10b0:	mov	w0, #0x80                  	// #128
    10b4:	sub	w0, w0, w2
    10b8:	ldr	x2, [sp, #560]
    10bc:	lsl	x0, x2, x0
    10c0:	b	10c8 <__multf3+0x10c8>
    10c4:	mov	x0, #0x0                   	// #0
    10c8:	ldr	x2, [sp, #568]
    10cc:	orr	x0, x0, x2
    10d0:	cmp	x0, #0x0
    10d4:	cset	w0, ne  // ne = any
    10d8:	and	w0, w0, #0xff
    10dc:	and	x0, x0, #0xff
    10e0:	orr	x0, x1, x0
    10e4:	str	x0, [sp, #568]
    10e8:	str	xzr, [sp, #560]
    10ec:	ldr	x0, [sp, #568]
    10f0:	and	x0, x0, #0x7
    10f4:	cmp	x0, #0x0
    10f8:	b.eq	1240 <__multf3+0x1240>  // b.none
    10fc:	ldr	w0, [sp, #596]
    1100:	orr	w0, w0, #0x10
    1104:	str	w0, [sp, #596]
    1108:	ldr	x0, [sp, #488]
    110c:	and	x0, x0, #0xc00000
    1110:	cmp	x0, #0xc00, lsl #12
    1114:	b.eq	1248 <__multf3+0x1248>  // b.none
    1118:	cmp	x0, #0xc00, lsl #12
    111c:	b.hi	124c <__multf3+0x124c>  // b.pmore
    1120:	cmp	x0, #0x800, lsl #12
    1124:	b.eq	11e8 <__multf3+0x11e8>  // b.none
    1128:	cmp	x0, #0x800, lsl #12
    112c:	b.hi	124c <__multf3+0x124c>  // b.pmore
    1130:	cmp	x0, #0x0
    1134:	b.eq	1144 <__multf3+0x1144>  // b.none
    1138:	cmp	x0, #0x400, lsl #12
    113c:	b.eq	1190 <__multf3+0x1190>  // b.none
    1140:	b	124c <__multf3+0x124c>
    1144:	ldr	x0, [sp, #568]
    1148:	and	x0, x0, #0xf
    114c:	cmp	x0, #0x4
    1150:	b.eq	1248 <__multf3+0x1248>  // b.none
    1154:	ldr	x0, [sp, #568]
    1158:	add	x0, x0, #0x4
    115c:	str	x0, [sp, #168]
    1160:	ldr	x1, [sp, #168]
    1164:	ldr	x0, [sp, #568]
    1168:	cmp	x1, x0
    116c:	cset	w0, cc  // cc = lo, ul, last
    1170:	and	w0, w0, #0xff
    1174:	and	x0, x0, #0xff
    1178:	ldr	x1, [sp, #560]
    117c:	add	x0, x1, x0
    1180:	str	x0, [sp, #560]
    1184:	ldr	x0, [sp, #168]
    1188:	str	x0, [sp, #568]
    118c:	b	1248 <__multf3+0x1248>
    1190:	ldr	x0, [sp, #656]
    1194:	cmp	x0, #0x0
    1198:	b.ne	1248 <__multf3+0x1248>  // b.any
    119c:	ldr	x0, [sp, #568]
    11a0:	and	x0, x0, #0x7
    11a4:	cmp	x0, #0x0
    11a8:	b.eq	1248 <__multf3+0x1248>  // b.none
    11ac:	ldr	x0, [sp, #568]
    11b0:	add	x0, x0, #0x8
    11b4:	str	x0, [sp, #176]
    11b8:	ldr	x1, [sp, #176]
    11bc:	ldr	x0, [sp, #568]
    11c0:	cmp	x1, x0
    11c4:	cset	w0, cc  // cc = lo, ul, last
    11c8:	and	w0, w0, #0xff
    11cc:	and	x0, x0, #0xff
    11d0:	ldr	x1, [sp, #560]
    11d4:	add	x0, x1, x0
    11d8:	str	x0, [sp, #560]
    11dc:	ldr	x0, [sp, #176]
    11e0:	str	x0, [sp, #568]
    11e4:	b	1248 <__multf3+0x1248>
    11e8:	ldr	x0, [sp, #656]
    11ec:	cmp	x0, #0x0
    11f0:	b.eq	1248 <__multf3+0x1248>  // b.none
    11f4:	ldr	x0, [sp, #568]
    11f8:	and	x0, x0, #0x7
    11fc:	cmp	x0, #0x0
    1200:	b.eq	1248 <__multf3+0x1248>  // b.none
    1204:	ldr	x0, [sp, #568]
    1208:	add	x0, x0, #0x8
    120c:	str	x0, [sp, #184]
    1210:	ldr	x1, [sp, #184]
    1214:	ldr	x0, [sp, #568]
    1218:	cmp	x1, x0
    121c:	cset	w0, cc  // cc = lo, ul, last
    1220:	and	w0, w0, #0xff
    1224:	and	x0, x0, #0xff
    1228:	ldr	x1, [sp, #560]
    122c:	add	x0, x1, x0
    1230:	str	x0, [sp, #560]
    1234:	ldr	x0, [sp, #184]
    1238:	str	x0, [sp, #568]
    123c:	b	1248 <__multf3+0x1248>
    1240:	nop
    1244:	b	124c <__multf3+0x124c>
    1248:	nop
    124c:	ldr	x0, [sp, #560]
    1250:	and	x0, x0, #0x8000000000000
    1254:	cmp	x0, #0x0
    1258:	b.eq	127c <__multf3+0x127c>  // b.none
    125c:	mov	x0, #0x1                   	// #1
    1260:	str	x0, [sp, #576]
    1264:	str	xzr, [sp, #568]
    1268:	str	xzr, [sp, #560]
    126c:	ldr	w0, [sp, #596]
    1270:	orr	w0, w0, #0x10
    1274:	str	w0, [sp, #596]
    1278:	b	12a4 <__multf3+0x12a4>
    127c:	str	xzr, [sp, #576]
    1280:	ldr	x0, [sp, #568]
    1284:	lsr	x1, x0, #3
    1288:	ldr	x0, [sp, #560]
    128c:	lsl	x0, x0, #61
    1290:	orr	x0, x1, x0
    1294:	str	x0, [sp, #568]
    1298:	ldr	x0, [sp, #560]
    129c:	lsr	x0, x0, #3
    12a0:	str	x0, [sp, #560]
    12a4:	ldr	w0, [sp, #216]
    12a8:	cmp	w0, #0x0
    12ac:	b.eq	14b8 <__multf3+0x14b8>  // b.none
    12b0:	ldr	w0, [sp, #596]
    12b4:	and	w0, w0, #0x10
    12b8:	cmp	w0, #0x0
    12bc:	b.ne	12d0 <__multf3+0x12d0>  // b.any
    12c0:	ldr	x0, [sp, #488]
    12c4:	and	x0, x0, #0x800
    12c8:	cmp	x0, #0x0
    12cc:	b.eq	14b8 <__multf3+0x14b8>  // b.none
    12d0:	ldr	w0, [sp, #596]
    12d4:	orr	w0, w0, #0x8
    12d8:	str	w0, [sp, #596]
    12dc:	b	14b8 <__multf3+0x14b8>
    12e0:	str	xzr, [sp, #576]
    12e4:	ldr	x1, [sp, #560]
    12e8:	ldr	x0, [sp, #568]
    12ec:	orr	x0, x1, x0
    12f0:	cmp	x0, #0x0
    12f4:	b.eq	1470 <__multf3+0x1470>  // b.none
    12f8:	mov	x0, #0x1                   	// #1
    12fc:	str	x0, [sp, #568]
    1300:	str	xzr, [sp, #560]
    1304:	ldr	x0, [sp, #568]
    1308:	and	x0, x0, #0x7
    130c:	cmp	x0, #0x0
    1310:	b.eq	1458 <__multf3+0x1458>  // b.none
    1314:	ldr	w0, [sp, #596]
    1318:	orr	w0, w0, #0x10
    131c:	str	w0, [sp, #596]
    1320:	ldr	x0, [sp, #488]
    1324:	and	x0, x0, #0xc00000
    1328:	cmp	x0, #0xc00, lsl #12
    132c:	b.eq	1460 <__multf3+0x1460>  // b.none
    1330:	cmp	x0, #0xc00, lsl #12
    1334:	b.hi	1464 <__multf3+0x1464>  // b.pmore
    1338:	cmp	x0, #0x800, lsl #12
    133c:	b.eq	1400 <__multf3+0x1400>  // b.none
    1340:	cmp	x0, #0x800, lsl #12
    1344:	b.hi	1464 <__multf3+0x1464>  // b.pmore
    1348:	cmp	x0, #0x0
    134c:	b.eq	135c <__multf3+0x135c>  // b.none
    1350:	cmp	x0, #0x400, lsl #12
    1354:	b.eq	13a8 <__multf3+0x13a8>  // b.none
    1358:	b	1464 <__multf3+0x1464>
    135c:	ldr	x0, [sp, #568]
    1360:	and	x0, x0, #0xf
    1364:	cmp	x0, #0x4
    1368:	b.eq	1460 <__multf3+0x1460>  // b.none
    136c:	ldr	x0, [sp, #568]
    1370:	add	x0, x0, #0x4
    1374:	str	x0, [sp, #192]
    1378:	ldr	x1, [sp, #192]
    137c:	ldr	x0, [sp, #568]
    1380:	cmp	x1, x0
    1384:	cset	w0, cc  // cc = lo, ul, last
    1388:	and	w0, w0, #0xff
    138c:	and	x0, x0, #0xff
    1390:	ldr	x1, [sp, #560]
    1394:	add	x0, x1, x0
    1398:	str	x0, [sp, #560]
    139c:	ldr	x0, [sp, #192]
    13a0:	str	x0, [sp, #568]
    13a4:	b	1460 <__multf3+0x1460>
    13a8:	ldr	x0, [sp, #656]
    13ac:	cmp	x0, #0x0
    13b0:	b.ne	1460 <__multf3+0x1460>  // b.any
    13b4:	ldr	x0, [sp, #568]
    13b8:	and	x0, x0, #0x7
    13bc:	cmp	x0, #0x0
    13c0:	b.eq	1460 <__multf3+0x1460>  // b.none
    13c4:	ldr	x0, [sp, #568]
    13c8:	add	x0, x0, #0x8
    13cc:	str	x0, [sp, #200]
    13d0:	ldr	x1, [sp, #200]
    13d4:	ldr	x0, [sp, #568]
    13d8:	cmp	x1, x0
    13dc:	cset	w0, cc  // cc = lo, ul, last
    13e0:	and	w0, w0, #0xff
    13e4:	and	x0, x0, #0xff
    13e8:	ldr	x1, [sp, #560]
    13ec:	add	x0, x1, x0
    13f0:	str	x0, [sp, #560]
    13f4:	ldr	x0, [sp, #200]
    13f8:	str	x0, [sp, #568]
    13fc:	b	1460 <__multf3+0x1460>
    1400:	ldr	x0, [sp, #656]
    1404:	cmp	x0, #0x0
    1408:	b.eq	1460 <__multf3+0x1460>  // b.none
    140c:	ldr	x0, [sp, #568]
    1410:	and	x0, x0, #0x7
    1414:	cmp	x0, #0x0
    1418:	b.eq	1460 <__multf3+0x1460>  // b.none
    141c:	ldr	x0, [sp, #568]
    1420:	add	x0, x0, #0x8
    1424:	str	x0, [sp, #208]
    1428:	ldr	x1, [sp, #208]
    142c:	ldr	x0, [sp, #568]
    1430:	cmp	x1, x0
    1434:	cset	w0, cc  // cc = lo, ul, last
    1438:	and	w0, w0, #0xff
    143c:	and	x0, x0, #0xff
    1440:	ldr	x1, [sp, #560]
    1444:	add	x0, x1, x0
    1448:	str	x0, [sp, #560]
    144c:	ldr	x0, [sp, #208]
    1450:	str	x0, [sp, #568]
    1454:	b	1460 <__multf3+0x1460>
    1458:	nop
    145c:	b	1464 <__multf3+0x1464>
    1460:	nop
    1464:	ldr	x0, [sp, #568]
    1468:	lsr	x0, x0, #3
    146c:	str	x0, [sp, #568]
    1470:	ldr	w0, [sp, #596]
    1474:	orr	w0, w0, #0x8
    1478:	str	w0, [sp, #596]
    147c:	b	14b8 <__multf3+0x14b8>
    1480:	str	xzr, [sp, #576]
    1484:	str	xzr, [sp, #568]
    1488:	str	xzr, [sp, #560]
    148c:	b	14b8 <__multf3+0x14b8>
    1490:	mov	x0, #0x7fff                	// #32767
    1494:	str	x0, [sp, #576]
    1498:	str	xzr, [sp, #568]
    149c:	str	xzr, [sp, #560]
    14a0:	b	14b8 <__multf3+0x14b8>
    14a4:	mov	x0, #0x7fff                	// #32767
    14a8:	str	x0, [sp, #576]
    14ac:	ldr	x0, [sp, #560]
    14b0:	orr	x0, x0, #0x800000000000
    14b4:	str	x0, [sp, #560]
    14b8:	nop
    14bc:	ldr	x0, [sp, #568]
    14c0:	str	x0, [sp, #80]
    14c4:	ldr	x0, [sp, #560]
    14c8:	and	x1, x0, #0xffffffffffff
    14cc:	ldr	x0, [sp, #88]
    14d0:	bfxil	x0, x1, #0, #48
    14d4:	str	x0, [sp, #88]
    14d8:	ldr	x0, [sp, #576]
    14dc:	and	w0, w0, #0x7fff
    14e0:	and	w1, w0, #0xffff
    14e4:	ldrh	w0, [sp, #94]
    14e8:	bfxil	w0, w1, #0, #15
    14ec:	strh	w0, [sp, #94]
    14f0:	ldr	x0, [sp, #656]
    14f4:	and	w0, w0, #0x1
    14f8:	and	w1, w0, #0xff
    14fc:	ldrb	w0, [sp, #95]
    1500:	bfi	w0, w1, #7, #1
    1504:	strb	w0, [sp, #95]
    1508:	ldr	q0, [sp, #80]
    150c:	str	q0, [sp, #128]
    1510:	ldrsw	x0, [sp, #596]
    1514:	cmp	x0, #0x0
    1518:	b.eq	1524 <__multf3+0x1524>  // b.none
    151c:	ldr	w0, [sp, #596]
    1520:	bl	0 <__sfp_handle_exceptions>
    1524:	ldr	q0, [sp, #128]
    1528:	ldp	x29, x30, [sp]
    152c:	add	sp, sp, #0x2a0
    1530:	ret

negtf2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__negtf2>:
   0:	sub	sp, sp, #0x80
   4:	str	q0, [sp]
   8:	ldr	q0, [sp]
   c:	str	q0, [sp, #32]
  10:	ldr	x0, [sp, #32]
  14:	str	x0, [sp, #120]
  18:	ldr	x0, [sp, #40]
  1c:	ubfx	x0, x0, #0, #48
  20:	str	x0, [sp, #112]
  24:	ldrh	w0, [sp, #46]
  28:	ubfx	x0, x0, #0, #15
  2c:	and	w0, w0, #0xffff
  30:	and	x0, x0, #0xffff
  34:	str	x0, [sp, #104]
  38:	ldrb	w0, [sp, #47]
  3c:	ubfx	x0, x0, #7, #1
  40:	and	w0, w0, #0xff
  44:	and	x0, x0, #0xff
  48:	str	x0, [sp, #96]
  4c:	ldr	x0, [sp, #120]
  50:	str	x0, [sp, #88]
  54:	ldr	x0, [sp, #112]
  58:	str	x0, [sp, #80]
  5c:	ldr	x0, [sp, #104]
  60:	str	x0, [sp, #72]
  64:	ldr	x0, [sp, #96]
  68:	eor	x0, x0, #0x1
  6c:	str	x0, [sp, #64]
  70:	ldr	x0, [sp, #88]
  74:	str	x0, [sp, #16]
  78:	ldr	x0, [sp, #80]
  7c:	and	x1, x0, #0xffffffffffff
  80:	ldr	x0, [sp, #24]
  84:	bfxil	x0, x1, #0, #48
  88:	str	x0, [sp, #24]
  8c:	ldr	x0, [sp, #72]
  90:	and	w0, w0, #0x7fff
  94:	and	w1, w0, #0xffff
  98:	ldrh	w0, [sp, #30]
  9c:	bfxil	w0, w1, #0, #15
  a0:	strh	w0, [sp, #30]
  a4:	ldr	x0, [sp, #64]
  a8:	and	w0, w0, #0x1
  ac:	and	w1, w0, #0xff
  b0:	ldrb	w0, [sp, #31]
  b4:	bfi	w0, w1, #7, #1
  b8:	strb	w0, [sp, #31]
  bc:	ldr	q0, [sp, #16]
  c0:	str	q0, [sp, #48]
  c4:	ldr	q0, [sp, #48]
  c8:	add	sp, sp, #0x80
  cc:	ret

subtf3.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__subtf3>:
       0:	stp	x29, x30, [sp, #-400]!
       4:	mov	x29, sp
       8:	str	q0, [sp, #32]
       c:	str	q1, [sp, #16]
      10:	str	wzr, [sp, #356]
      14:	str	xzr, [sp, #296]
      18:	mrs	x0, fpcr
      1c:	str	x0, [sp, #296]
      20:	ldr	q0, [sp, #32]
      24:	str	q0, [sp, #80]
      28:	ldr	x0, [sp, #80]
      2c:	str	x0, [sp, #360]
      30:	ldr	x0, [sp, #88]
      34:	ubfx	x0, x0, #0, #48
      38:	str	x0, [sp, #384]
      3c:	ldrh	w0, [sp, #94]
      40:	ubfx	x0, x0, #0, #15
      44:	and	w0, w0, #0xffff
      48:	and	x0, x0, #0xffff
      4c:	str	x0, [sp, #288]
      50:	ldrb	w0, [sp, #95]
      54:	ubfx	x0, x0, #7, #1
      58:	and	w0, w0, #0xff
      5c:	and	x0, x0, #0xff
      60:	str	x0, [sp, #280]
      64:	ldr	x0, [sp, #384]
      68:	lsl	x1, x0, #3
      6c:	ldr	x0, [sp, #360]
      70:	lsr	x0, x0, #61
      74:	orr	x0, x1, x0
      78:	str	x0, [sp, #384]
      7c:	ldr	x0, [sp, #360]
      80:	lsl	x0, x0, #3
      84:	str	x0, [sp, #360]
      88:	ldr	q0, [sp, #16]
      8c:	str	q0, [sp, #64]
      90:	ldr	x0, [sp, #64]
      94:	str	x0, [sp, #368]
      98:	ldr	x0, [sp, #72]
      9c:	ubfx	x0, x0, #0, #48
      a0:	str	x0, [sp, #392]
      a4:	ldrh	w0, [sp, #78]
      a8:	ubfx	x0, x0, #0, #15
      ac:	and	w0, w0, #0xffff
      b0:	and	x0, x0, #0xffff
      b4:	str	x0, [sp, #272]
      b8:	ldrb	w0, [sp, #79]
      bc:	ubfx	x0, x0, #7, #1
      c0:	and	w0, w0, #0xff
      c4:	and	x0, x0, #0xff
      c8:	str	x0, [sp, #376]
      cc:	ldr	x0, [sp, #392]
      d0:	lsl	x1, x0, #3
      d4:	ldr	x0, [sp, #368]
      d8:	lsr	x0, x0, #61
      dc:	orr	x0, x1, x0
      e0:	str	x0, [sp, #392]
      e4:	ldr	x0, [sp, #368]
      e8:	lsl	x0, x0, #3
      ec:	str	x0, [sp, #368]
      f0:	ldr	x1, [sp, #272]
      f4:	mov	x0, #0x7fff                	// #32767
      f8:	cmp	x1, x0
      fc:	b.ne	114 <__subtf3+0x114>  // b.any
     100:	ldr	x1, [sp, #392]
     104:	ldr	x0, [sp, #368]
     108:	orr	x0, x1, x0
     10c:	cmp	x0, #0x0
     110:	b.ne	120 <__subtf3+0x120>  // b.any
     114:	ldr	x0, [sp, #376]
     118:	eor	x0, x0, #0x1
     11c:	str	x0, [sp, #376]
     120:	ldr	x1, [sp, #280]
     124:	ldr	x0, [sp, #376]
     128:	cmp	x1, x0
     12c:	b.ne	c14 <__subtf3+0xc14>  // b.any
     130:	ldr	x0, [sp, #280]
     134:	str	x0, [sp, #344]
     138:	ldr	x0, [sp, #288]
     13c:	mov	w1, w0
     140:	ldr	x0, [sp, #272]
     144:	sub	w0, w1, w0
     148:	str	w0, [sp, #316]
     14c:	ldr	w0, [sp, #316]
     150:	cmp	w0, #0x0
     154:	b.le	454 <__subtf3+0x454>
     158:	ldr	x0, [sp, #288]
     15c:	str	x0, [sp, #336]
     160:	ldr	x0, [sp, #272]
     164:	cmp	x0, #0x0
     168:	b.ne	298 <__subtf3+0x298>  // b.any
     16c:	ldr	x1, [sp, #392]
     170:	ldr	x0, [sp, #368]
     174:	orr	x0, x1, x0
     178:	cmp	x0, #0x0
     17c:	b.ne	1d4 <__subtf3+0x1d4>  // b.any
     180:	ldr	x1, [sp, #288]
     184:	mov	x0, #0x7fff                	// #32767
     188:	cmp	x1, x0
     18c:	b.ne	1c0 <__subtf3+0x1c0>  // b.any
     190:	ldr	x1, [sp, #384]
     194:	ldr	x0, [sp, #360]
     198:	orr	x0, x1, x0
     19c:	cmp	x0, #0x0
     1a0:	b.eq	1c0 <__subtf3+0x1c0>  // b.none
     1a4:	ldr	x0, [sp, #384]
     1a8:	and	x0, x0, #0x4000000000000
     1ac:	cmp	x0, #0x0
     1b0:	b.ne	1c0 <__subtf3+0x1c0>  // b.any
     1b4:	ldr	w0, [sp, #356]
     1b8:	orr	w0, w0, #0x1
     1bc:	str	w0, [sp, #356]
     1c0:	ldr	x0, [sp, #360]
     1c4:	str	x0, [sp, #328]
     1c8:	ldr	x0, [sp, #384]
     1cc:	str	x0, [sp, #320]
     1d0:	b	18e8 <__subtf3+0x18e8>
     1d4:	ldr	w0, [sp, #316]
     1d8:	sub	w0, w0, #0x1
     1dc:	str	w0, [sp, #316]
     1e0:	ldr	w0, [sp, #316]
     1e4:	cmp	w0, #0x0
     1e8:	b.ne	234 <__subtf3+0x234>  // b.any
     1ec:	ldr	x1, [sp, #360]
     1f0:	ldr	x0, [sp, #368]
     1f4:	add	x0, x1, x0
     1f8:	str	x0, [sp, #160]
     1fc:	ldr	x1, [sp, #384]
     200:	ldr	x0, [sp, #392]
     204:	add	x1, x1, x0
     208:	ldr	x2, [sp, #160]
     20c:	ldr	x0, [sp, #360]
     210:	cmp	x2, x0
     214:	cset	w0, cc  // cc = lo, ul, last
     218:	and	w0, w0, #0xff
     21c:	and	x0, x0, #0xff
     220:	add	x0, x1, x0
     224:	str	x0, [sp, #320]
     228:	ldr	x0, [sp, #160]
     22c:	str	x0, [sp, #328]
     230:	b	b1c <__subtf3+0xb1c>
     234:	ldr	x1, [sp, #288]
     238:	mov	x0, #0x7fff                	// #32767
     23c:	cmp	x1, x0
     240:	b.ne	30c <__subtf3+0x30c>  // b.any
     244:	ldr	x1, [sp, #288]
     248:	mov	x0, #0x7fff                	// #32767
     24c:	cmp	x1, x0
     250:	b.ne	284 <__subtf3+0x284>  // b.any
     254:	ldr	x1, [sp, #384]
     258:	ldr	x0, [sp, #360]
     25c:	orr	x0, x1, x0
     260:	cmp	x0, #0x0
     264:	b.eq	284 <__subtf3+0x284>  // b.none
     268:	ldr	x0, [sp, #384]
     26c:	and	x0, x0, #0x4000000000000
     270:	cmp	x0, #0x0
     274:	b.ne	284 <__subtf3+0x284>  // b.any
     278:	ldr	w0, [sp, #356]
     27c:	orr	w0, w0, #0x1
     280:	str	w0, [sp, #356]
     284:	ldr	x0, [sp, #360]
     288:	str	x0, [sp, #328]
     28c:	ldr	x0, [sp, #384]
     290:	str	x0, [sp, #320]
     294:	b	18e8 <__subtf3+0x18e8>
     298:	ldr	x1, [sp, #288]
     29c:	mov	x0, #0x7fff                	// #32767
     2a0:	cmp	x1, x0
     2a4:	b.ne	2fc <__subtf3+0x2fc>  // b.any
     2a8:	ldr	x1, [sp, #288]
     2ac:	mov	x0, #0x7fff                	// #32767
     2b0:	cmp	x1, x0
     2b4:	b.ne	2e8 <__subtf3+0x2e8>  // b.any
     2b8:	ldr	x1, [sp, #384]
     2bc:	ldr	x0, [sp, #360]
     2c0:	orr	x0, x1, x0
     2c4:	cmp	x0, #0x0
     2c8:	b.eq	2e8 <__subtf3+0x2e8>  // b.none
     2cc:	ldr	x0, [sp, #384]
     2d0:	and	x0, x0, #0x4000000000000
     2d4:	cmp	x0, #0x0
     2d8:	b.ne	2e8 <__subtf3+0x2e8>  // b.any
     2dc:	ldr	w0, [sp, #356]
     2e0:	orr	w0, w0, #0x1
     2e4:	str	w0, [sp, #356]
     2e8:	ldr	x0, [sp, #360]
     2ec:	str	x0, [sp, #328]
     2f0:	ldr	x0, [sp, #384]
     2f4:	str	x0, [sp, #320]
     2f8:	b	18e8 <__subtf3+0x18e8>
     2fc:	ldr	x0, [sp, #392]
     300:	orr	x0, x0, #0x8000000000000
     304:	str	x0, [sp, #392]
     308:	b	310 <__subtf3+0x310>
     30c:	nop
     310:	ldr	w0, [sp, #316]
     314:	cmp	w0, #0x74
     318:	b.gt	3ec <__subtf3+0x3ec>
     31c:	ldr	w0, [sp, #316]
     320:	cmp	w0, #0x3f
     324:	b.gt	38c <__subtf3+0x38c>
     328:	mov	w1, #0x40                  	// #64
     32c:	ldr	w0, [sp, #316]
     330:	sub	w0, w1, w0
     334:	ldr	x1, [sp, #392]
     338:	lsl	x1, x1, x0
     33c:	ldr	w0, [sp, #316]
     340:	ldr	x2, [sp, #368]
     344:	lsr	x0, x2, x0
     348:	orr	x1, x1, x0
     34c:	mov	w2, #0x40                  	// #64
     350:	ldr	w0, [sp, #316]
     354:	sub	w0, w2, w0
     358:	ldr	x2, [sp, #368]
     35c:	lsl	x0, x2, x0
     360:	cmp	x0, #0x0
     364:	cset	w0, ne  // ne = any
     368:	and	w0, w0, #0xff
     36c:	sxtw	x0, w0
     370:	orr	x0, x1, x0
     374:	str	x0, [sp, #368]
     378:	ldr	w0, [sp, #316]
     37c:	ldr	x1, [sp, #392]
     380:	lsr	x0, x1, x0
     384:	str	x0, [sp, #392]
     388:	b	40c <__subtf3+0x40c>
     38c:	ldr	w0, [sp, #316]
     390:	sub	w0, w0, #0x40
     394:	ldr	x1, [sp, #392]
     398:	lsr	x1, x1, x0
     39c:	ldr	w0, [sp, #316]
     3a0:	cmp	w0, #0x40
     3a4:	b.eq	3c0 <__subtf3+0x3c0>  // b.none
     3a8:	mov	w2, #0x80                  	// #128
     3ac:	ldr	w0, [sp, #316]
     3b0:	sub	w0, w2, w0
     3b4:	ldr	x2, [sp, #392]
     3b8:	lsl	x0, x2, x0
     3bc:	b	3c4 <__subtf3+0x3c4>
     3c0:	mov	x0, #0x0                   	// #0
     3c4:	ldr	x2, [sp, #368]
     3c8:	orr	x0, x0, x2
     3cc:	cmp	x0, #0x0
     3d0:	cset	w0, ne  // ne = any
     3d4:	and	w0, w0, #0xff
     3d8:	and	x0, x0, #0xff
     3dc:	orr	x0, x1, x0
     3e0:	str	x0, [sp, #368]
     3e4:	str	xzr, [sp, #392]
     3e8:	b	40c <__subtf3+0x40c>
     3ec:	ldr	x1, [sp, #392]
     3f0:	ldr	x0, [sp, #368]
     3f4:	orr	x0, x1, x0
     3f8:	cmp	x0, #0x0
     3fc:	b.eq	40c <__subtf3+0x40c>  // b.none
     400:	mov	x0, #0x1                   	// #1
     404:	str	x0, [sp, #368]
     408:	str	xzr, [sp, #392]
     40c:	ldr	x1, [sp, #360]
     410:	ldr	x0, [sp, #368]
     414:	add	x0, x1, x0
     418:	str	x0, [sp, #152]
     41c:	ldr	x1, [sp, #384]
     420:	ldr	x0, [sp, #392]
     424:	add	x1, x1, x0
     428:	ldr	x2, [sp, #152]
     42c:	ldr	x0, [sp, #360]
     430:	cmp	x2, x0
     434:	cset	w0, cc  // cc = lo, ul, last
     438:	and	w0, w0, #0xff
     43c:	and	x0, x0, #0xff
     440:	add	x0, x1, x0
     444:	str	x0, [sp, #320]
     448:	ldr	x0, [sp, #152]
     44c:	str	x0, [sp, #328]
     450:	b	b1c <__subtf3+0xb1c>
     454:	ldr	w0, [sp, #316]
     458:	cmp	w0, #0x0
     45c:	b.ge	768 <__subtf3+0x768>  // b.tcont
     460:	ldr	w0, [sp, #316]
     464:	neg	w0, w0
     468:	str	w0, [sp, #316]
     46c:	ldr	x0, [sp, #272]
     470:	str	x0, [sp, #336]
     474:	ldr	x0, [sp, #288]
     478:	cmp	x0, #0x0
     47c:	b.ne	5ac <__subtf3+0x5ac>  // b.any
     480:	ldr	x1, [sp, #384]
     484:	ldr	x0, [sp, #360]
     488:	orr	x0, x1, x0
     48c:	cmp	x0, #0x0
     490:	b.ne	4e8 <__subtf3+0x4e8>  // b.any
     494:	ldr	x1, [sp, #272]
     498:	mov	x0, #0x7fff                	// #32767
     49c:	cmp	x1, x0
     4a0:	b.ne	4d4 <__subtf3+0x4d4>  // b.any
     4a4:	ldr	x1, [sp, #392]
     4a8:	ldr	x0, [sp, #368]
     4ac:	orr	x0, x1, x0
     4b0:	cmp	x0, #0x0
     4b4:	b.eq	4d4 <__subtf3+0x4d4>  // b.none
     4b8:	ldr	x0, [sp, #392]
     4bc:	and	x0, x0, #0x4000000000000
     4c0:	cmp	x0, #0x0
     4c4:	b.ne	4d4 <__subtf3+0x4d4>  // b.any
     4c8:	ldr	w0, [sp, #356]
     4cc:	orr	w0, w0, #0x1
     4d0:	str	w0, [sp, #356]
     4d4:	ldr	x0, [sp, #368]
     4d8:	str	x0, [sp, #328]
     4dc:	ldr	x0, [sp, #392]
     4e0:	str	x0, [sp, #320]
     4e4:	b	18e8 <__subtf3+0x18e8>
     4e8:	ldr	w0, [sp, #316]
     4ec:	sub	w0, w0, #0x1
     4f0:	str	w0, [sp, #316]
     4f4:	ldr	w0, [sp, #316]
     4f8:	cmp	w0, #0x0
     4fc:	b.ne	548 <__subtf3+0x548>  // b.any
     500:	ldr	x1, [sp, #368]
     504:	ldr	x0, [sp, #360]
     508:	add	x0, x1, x0
     50c:	str	x0, [sp, #176]
     510:	ldr	x1, [sp, #392]
     514:	ldr	x0, [sp, #384]
     518:	add	x1, x1, x0
     51c:	ldr	x2, [sp, #176]
     520:	ldr	x0, [sp, #368]
     524:	cmp	x2, x0
     528:	cset	w0, cc  // cc = lo, ul, last
     52c:	and	w0, w0, #0xff
     530:	and	x0, x0, #0xff
     534:	add	x0, x1, x0
     538:	str	x0, [sp, #320]
     53c:	ldr	x0, [sp, #176]
     540:	str	x0, [sp, #328]
     544:	b	b1c <__subtf3+0xb1c>
     548:	ldr	x1, [sp, #272]
     54c:	mov	x0, #0x7fff                	// #32767
     550:	cmp	x1, x0
     554:	b.ne	620 <__subtf3+0x620>  // b.any
     558:	ldr	x1, [sp, #272]
     55c:	mov	x0, #0x7fff                	// #32767
     560:	cmp	x1, x0
     564:	b.ne	598 <__subtf3+0x598>  // b.any
     568:	ldr	x1, [sp, #392]
     56c:	ldr	x0, [sp, #368]
     570:	orr	x0, x1, x0
     574:	cmp	x0, #0x0
     578:	b.eq	598 <__subtf3+0x598>  // b.none
     57c:	ldr	x0, [sp, #392]
     580:	and	x0, x0, #0x4000000000000
     584:	cmp	x0, #0x0
     588:	b.ne	598 <__subtf3+0x598>  // b.any
     58c:	ldr	w0, [sp, #356]
     590:	orr	w0, w0, #0x1
     594:	str	w0, [sp, #356]
     598:	ldr	x0, [sp, #368]
     59c:	str	x0, [sp, #328]
     5a0:	ldr	x0, [sp, #392]
     5a4:	str	x0, [sp, #320]
     5a8:	b	18e8 <__subtf3+0x18e8>
     5ac:	ldr	x1, [sp, #272]
     5b0:	mov	x0, #0x7fff                	// #32767
     5b4:	cmp	x1, x0
     5b8:	b.ne	610 <__subtf3+0x610>  // b.any
     5bc:	ldr	x1, [sp, #272]
     5c0:	mov	x0, #0x7fff                	// #32767
     5c4:	cmp	x1, x0
     5c8:	b.ne	5fc <__subtf3+0x5fc>  // b.any
     5cc:	ldr	x1, [sp, #392]
     5d0:	ldr	x0, [sp, #368]
     5d4:	orr	x0, x1, x0
     5d8:	cmp	x0, #0x0
     5dc:	b.eq	5fc <__subtf3+0x5fc>  // b.none
     5e0:	ldr	x0, [sp, #392]
     5e4:	and	x0, x0, #0x4000000000000
     5e8:	cmp	x0, #0x0
     5ec:	b.ne	5fc <__subtf3+0x5fc>  // b.any
     5f0:	ldr	w0, [sp, #356]
     5f4:	orr	w0, w0, #0x1
     5f8:	str	w0, [sp, #356]
     5fc:	ldr	x0, [sp, #368]
     600:	str	x0, [sp, #328]
     604:	ldr	x0, [sp, #392]
     608:	str	x0, [sp, #320]
     60c:	b	18e8 <__subtf3+0x18e8>
     610:	ldr	x0, [sp, #384]
     614:	orr	x0, x0, #0x8000000000000
     618:	str	x0, [sp, #384]
     61c:	b	624 <__subtf3+0x624>
     620:	nop
     624:	ldr	w0, [sp, #316]
     628:	cmp	w0, #0x74
     62c:	b.gt	700 <__subtf3+0x700>
     630:	ldr	w0, [sp, #316]
     634:	cmp	w0, #0x3f
     638:	b.gt	6a0 <__subtf3+0x6a0>
     63c:	mov	w1, #0x40                  	// #64
     640:	ldr	w0, [sp, #316]
     644:	sub	w0, w1, w0
     648:	ldr	x1, [sp, #384]
     64c:	lsl	x1, x1, x0
     650:	ldr	w0, [sp, #316]
     654:	ldr	x2, [sp, #360]
     658:	lsr	x0, x2, x0
     65c:	orr	x1, x1, x0
     660:	mov	w2, #0x40                  	// #64
     664:	ldr	w0, [sp, #316]
     668:	sub	w0, w2, w0
     66c:	ldr	x2, [sp, #360]
     670:	lsl	x0, x2, x0
     674:	cmp	x0, #0x0
     678:	cset	w0, ne  // ne = any
     67c:	and	w0, w0, #0xff
     680:	sxtw	x0, w0
     684:	orr	x0, x1, x0
     688:	str	x0, [sp, #360]
     68c:	ldr	w0, [sp, #316]
     690:	ldr	x1, [sp, #384]
     694:	lsr	x0, x1, x0
     698:	str	x0, [sp, #384]
     69c:	b	720 <__subtf3+0x720>
     6a0:	ldr	w0, [sp, #316]
     6a4:	sub	w0, w0, #0x40
     6a8:	ldr	x1, [sp, #384]
     6ac:	lsr	x1, x1, x0
     6b0:	ldr	w0, [sp, #316]
     6b4:	cmp	w0, #0x40
     6b8:	b.eq	6d4 <__subtf3+0x6d4>  // b.none
     6bc:	mov	w2, #0x80                  	// #128
     6c0:	ldr	w0, [sp, #316]
     6c4:	sub	w0, w2, w0
     6c8:	ldr	x2, [sp, #384]
     6cc:	lsl	x0, x2, x0
     6d0:	b	6d8 <__subtf3+0x6d8>
     6d4:	mov	x0, #0x0                   	// #0
     6d8:	ldr	x2, [sp, #360]
     6dc:	orr	x0, x0, x2
     6e0:	cmp	x0, #0x0
     6e4:	cset	w0, ne  // ne = any
     6e8:	and	w0, w0, #0xff
     6ec:	and	x0, x0, #0xff
     6f0:	orr	x0, x1, x0
     6f4:	str	x0, [sp, #360]
     6f8:	str	xzr, [sp, #384]
     6fc:	b	720 <__subtf3+0x720>
     700:	ldr	x1, [sp, #384]
     704:	ldr	x0, [sp, #360]
     708:	orr	x0, x1, x0
     70c:	cmp	x0, #0x0
     710:	b.eq	720 <__subtf3+0x720>  // b.none
     714:	mov	x0, #0x1                   	// #1
     718:	str	x0, [sp, #360]
     71c:	str	xzr, [sp, #384]
     720:	ldr	x1, [sp, #368]
     724:	ldr	x0, [sp, #360]
     728:	add	x0, x1, x0
     72c:	str	x0, [sp, #168]
     730:	ldr	x1, [sp, #392]
     734:	ldr	x0, [sp, #384]
     738:	add	x1, x1, x0
     73c:	ldr	x2, [sp, #168]
     740:	ldr	x0, [sp, #368]
     744:	cmp	x2, x0
     748:	cset	w0, cc  // cc = lo, ul, last
     74c:	and	w0, w0, #0xff
     750:	and	x0, x0, #0xff
     754:	add	x0, x1, x0
     758:	str	x0, [sp, #320]
     75c:	ldr	x0, [sp, #168]
     760:	str	x0, [sp, #328]
     764:	b	b1c <__subtf3+0xb1c>
     768:	ldr	x0, [sp, #288]
     76c:	add	x0, x0, #0x1
     770:	and	x0, x0, #0x7ffe
     774:	cmp	x0, #0x0
     778:	b.ne	9fc <__subtf3+0x9fc>  // b.any
     77c:	ldr	x0, [sp, #288]
     780:	cmp	x0, #0x0
     784:	b.ne	858 <__subtf3+0x858>  // b.any
     788:	str	xzr, [sp, #336]
     78c:	ldr	x1, [sp, #384]
     790:	ldr	x0, [sp, #360]
     794:	orr	x0, x1, x0
     798:	cmp	x0, #0x0
     79c:	b.ne	7c4 <__subtf3+0x7c4>  // b.any
     7a0:	ldr	x1, [sp, #392]
     7a4:	ldr	x0, [sp, #368]
     7a8:	orr	x0, x1, x0
     7ac:	cmp	x0, #0x0
     7b0:	ldr	x0, [sp, #368]
     7b4:	str	x0, [sp, #328]
     7b8:	ldr	x0, [sp, #392]
     7bc:	str	x0, [sp, #320]
     7c0:	b	18e8 <__subtf3+0x18e8>
     7c4:	ldr	x1, [sp, #392]
     7c8:	ldr	x0, [sp, #368]
     7cc:	orr	x0, x1, x0
     7d0:	cmp	x0, #0x0
     7d4:	b.ne	7ec <__subtf3+0x7ec>  // b.any
     7d8:	ldr	x0, [sp, #360]
     7dc:	str	x0, [sp, #328]
     7e0:	ldr	x0, [sp, #384]
     7e4:	str	x0, [sp, #320]
     7e8:	b	18e8 <__subtf3+0x18e8>
     7ec:	ldr	x1, [sp, #360]
     7f0:	ldr	x0, [sp, #368]
     7f4:	add	x0, x1, x0
     7f8:	str	x0, [sp, #184]
     7fc:	ldr	x1, [sp, #384]
     800:	ldr	x0, [sp, #392]
     804:	add	x1, x1, x0
     808:	ldr	x2, [sp, #184]
     80c:	ldr	x0, [sp, #360]
     810:	cmp	x2, x0
     814:	cset	w0, cc  // cc = lo, ul, last
     818:	and	w0, w0, #0xff
     81c:	and	x0, x0, #0xff
     820:	add	x0, x1, x0
     824:	str	x0, [sp, #320]
     828:	ldr	x0, [sp, #184]
     82c:	str	x0, [sp, #328]
     830:	ldr	x0, [sp, #320]
     834:	and	x0, x0, #0x8000000000000
     838:	cmp	x0, #0x0
     83c:	b.eq	18c4 <__subtf3+0x18c4>  // b.none
     840:	ldr	x0, [sp, #320]
     844:	and	x0, x0, #0xfff7ffffffffffff
     848:	str	x0, [sp, #320]
     84c:	mov	x0, #0x1                   	// #1
     850:	str	x0, [sp, #336]
     854:	b	18c4 <__subtf3+0x18c4>
     858:	ldr	x1, [sp, #288]
     85c:	mov	x0, #0x7fff                	// #32767
     860:	cmp	x1, x0
     864:	b.ne	898 <__subtf3+0x898>  // b.any
     868:	ldr	x1, [sp, #384]
     86c:	ldr	x0, [sp, #360]
     870:	orr	x0, x1, x0
     874:	cmp	x0, #0x0
     878:	b.eq	898 <__subtf3+0x898>  // b.none
     87c:	ldr	x0, [sp, #384]
     880:	and	x0, x0, #0x4000000000000
     884:	cmp	x0, #0x0
     888:	b.ne	898 <__subtf3+0x898>  // b.any
     88c:	ldr	w0, [sp, #356]
     890:	orr	w0, w0, #0x1
     894:	str	w0, [sp, #356]
     898:	ldr	x1, [sp, #272]
     89c:	mov	x0, #0x7fff                	// #32767
     8a0:	cmp	x1, x0
     8a4:	b.ne	8d8 <__subtf3+0x8d8>  // b.any
     8a8:	ldr	x1, [sp, #392]
     8ac:	ldr	x0, [sp, #368]
     8b0:	orr	x0, x1, x0
     8b4:	cmp	x0, #0x0
     8b8:	b.eq	8d8 <__subtf3+0x8d8>  // b.none
     8bc:	ldr	x0, [sp, #392]
     8c0:	and	x0, x0, #0x4000000000000
     8c4:	cmp	x0, #0x0
     8c8:	b.ne	8d8 <__subtf3+0x8d8>  // b.any
     8cc:	ldr	w0, [sp, #356]
     8d0:	orr	w0, w0, #0x1
     8d4:	str	w0, [sp, #356]
     8d8:	mov	x0, #0x7fff                	// #32767
     8dc:	str	x0, [sp, #336]
     8e0:	ldr	x1, [sp, #384]
     8e4:	ldr	x0, [sp, #360]
     8e8:	orr	x0, x1, x0
     8ec:	cmp	x0, #0x0
     8f0:	b.ne	908 <__subtf3+0x908>  // b.any
     8f4:	ldr	x0, [sp, #368]
     8f8:	str	x0, [sp, #328]
     8fc:	ldr	x0, [sp, #392]
     900:	str	x0, [sp, #320]
     904:	b	18e8 <__subtf3+0x18e8>
     908:	ldr	x1, [sp, #392]
     90c:	ldr	x0, [sp, #368]
     910:	orr	x0, x1, x0
     914:	cmp	x0, #0x0
     918:	b.ne	930 <__subtf3+0x930>  // b.any
     91c:	ldr	x0, [sp, #360]
     920:	str	x0, [sp, #328]
     924:	ldr	x0, [sp, #384]
     928:	str	x0, [sp, #320]
     92c:	b	18e8 <__subtf3+0x18e8>
     930:	ldr	x0, [sp, #360]
     934:	lsr	x1, x0, #3
     938:	ldr	x0, [sp, #384]
     93c:	lsl	x0, x0, #61
     940:	orr	x0, x1, x0
     944:	str	x0, [sp, #360]
     948:	ldr	x0, [sp, #384]
     94c:	lsr	x0, x0, #3
     950:	str	x0, [sp, #384]
     954:	ldr	x0, [sp, #368]
     958:	lsr	x1, x0, #3
     95c:	ldr	x0, [sp, #392]
     960:	lsl	x0, x0, #61
     964:	orr	x0, x1, x0
     968:	str	x0, [sp, #368]
     96c:	ldr	x0, [sp, #392]
     970:	lsr	x0, x0, #3
     974:	str	x0, [sp, #392]
     978:	ldr	x0, [sp, #384]
     97c:	and	x0, x0, #0x800000000000
     980:	cmp	x0, #0x0
     984:	b.eq	9b4 <__subtf3+0x9b4>  // b.none
     988:	ldr	x0, [sp, #392]
     98c:	and	x0, x0, #0x800000000000
     990:	cmp	x0, #0x0
     994:	b.ne	9b4 <__subtf3+0x9b4>  // b.any
     998:	ldr	x0, [sp, #376]
     99c:	str	x0, [sp, #344]
     9a0:	ldr	x0, [sp, #368]
     9a4:	str	x0, [sp, #328]
     9a8:	ldr	x0, [sp, #392]
     9ac:	str	x0, [sp, #320]
     9b0:	b	9cc <__subtf3+0x9cc>
     9b4:	ldr	x0, [sp, #280]
     9b8:	str	x0, [sp, #344]
     9bc:	ldr	x0, [sp, #360]
     9c0:	str	x0, [sp, #328]
     9c4:	ldr	x0, [sp, #384]
     9c8:	str	x0, [sp, #320]
     9cc:	mov	x0, #0x3                   	// #3
     9d0:	str	x0, [sp, #248]
     9d4:	ldr	x0, [sp, #320]
     9d8:	lsl	x1, x0, #3
     9dc:	ldr	x0, [sp, #328]
     9e0:	lsr	x0, x0, #61
     9e4:	orr	x0, x1, x0
     9e8:	str	x0, [sp, #320]
     9ec:	ldr	x0, [sp, #328]
     9f0:	lsl	x0, x0, #3
     9f4:	str	x0, [sp, #328]
     9f8:	b	18e8 <__subtf3+0x18e8>
     9fc:	ldr	x1, [sp, #360]
     a00:	ldr	x0, [sp, #368]
     a04:	add	x0, x1, x0
     a08:	str	x0, [sp, #192]
     a0c:	ldr	x1, [sp, #384]
     a10:	ldr	x0, [sp, #392]
     a14:	add	x1, x1, x0
     a18:	ldr	x2, [sp, #192]
     a1c:	ldr	x0, [sp, #360]
     a20:	cmp	x2, x0
     a24:	cset	w0, cc  // cc = lo, ul, last
     a28:	and	w0, w0, #0xff
     a2c:	and	x0, x0, #0xff
     a30:	add	x0, x1, x0
     a34:	str	x0, [sp, #320]
     a38:	ldr	x0, [sp, #192]
     a3c:	str	x0, [sp, #328]
     a40:	ldr	x0, [sp, #288]
     a44:	add	x0, x0, #0x1
     a48:	str	x0, [sp, #336]
     a4c:	ldr	x0, [sp, #320]
     a50:	lsl	x1, x0, #63
     a54:	ldr	x0, [sp, #328]
     a58:	lsr	x0, x0, #1
     a5c:	orr	x1, x1, x0
     a60:	ldr	x0, [sp, #328]
     a64:	and	x0, x0, #0x1
     a68:	orr	x0, x1, x0
     a6c:	str	x0, [sp, #328]
     a70:	ldr	x0, [sp, #320]
     a74:	lsr	x0, x0, #1
     a78:	str	x0, [sp, #320]
     a7c:	ldr	x1, [sp, #336]
     a80:	mov	x0, #0x7fff                	// #32767
     a84:	cmp	x1, x0
     a88:	b.ne	18cc <__subtf3+0x18cc>  // b.any
     a8c:	ldr	x0, [sp, #296]
     a90:	and	x0, x0, #0xc00000
     a94:	cmp	x0, #0x0
     a98:	b.eq	ad4 <__subtf3+0xad4>  // b.none
     a9c:	ldr	x0, [sp, #296]
     aa0:	and	x0, x0, #0xc00000
     aa4:	cmp	x0, #0x400, lsl #12
     aa8:	b.ne	ab8 <__subtf3+0xab8>  // b.any
     aac:	ldr	x0, [sp, #344]
     ab0:	cmp	x0, #0x0
     ab4:	b.eq	ad4 <__subtf3+0xad4>  // b.none
     ab8:	ldr	x0, [sp, #296]
     abc:	and	x0, x0, #0xc00000
     ac0:	cmp	x0, #0x800, lsl #12
     ac4:	b.ne	ae8 <__subtf3+0xae8>  // b.any
     ac8:	ldr	x0, [sp, #344]
     acc:	cmp	x0, #0x0
     ad0:	b.eq	ae8 <__subtf3+0xae8>  // b.none
     ad4:	mov	x0, #0x7fff                	// #32767
     ad8:	str	x0, [sp, #336]
     adc:	str	xzr, [sp, #328]
     ae0:	str	xzr, [sp, #320]
     ae4:	b	b00 <__subtf3+0xb00>
     ae8:	mov	x0, #0x7ffe                	// #32766
     aec:	str	x0, [sp, #336]
     af0:	mov	x0, #0xffffffffffffffff    	// #-1
     af4:	str	x0, [sp, #328]
     af8:	mov	x0, #0xffffffffffffffff    	// #-1
     afc:	str	x0, [sp, #320]
     b00:	ldr	w0, [sp, #356]
     b04:	orr	w0, w0, #0x10
     b08:	str	w0, [sp, #356]
     b0c:	ldr	w0, [sp, #356]
     b10:	orr	w0, w0, #0x4
     b14:	str	w0, [sp, #356]
     b18:	b	18cc <__subtf3+0x18cc>
     b1c:	ldr	x0, [sp, #320]
     b20:	and	x0, x0, #0x8000000000000
     b24:	cmp	x0, #0x0
     b28:	b.eq	18d4 <__subtf3+0x18d4>  // b.none
     b2c:	ldr	x0, [sp, #320]
     b30:	and	x0, x0, #0xfff7ffffffffffff
     b34:	str	x0, [sp, #320]
     b38:	ldr	x0, [sp, #336]
     b3c:	add	x0, x0, #0x1
     b40:	str	x0, [sp, #336]
     b44:	ldr	x0, [sp, #320]
     b48:	lsl	x1, x0, #63
     b4c:	ldr	x0, [sp, #328]
     b50:	lsr	x0, x0, #1
     b54:	orr	x1, x1, x0
     b58:	ldr	x0, [sp, #328]
     b5c:	and	x0, x0, #0x1
     b60:	orr	x0, x1, x0
     b64:	str	x0, [sp, #328]
     b68:	ldr	x0, [sp, #320]
     b6c:	lsr	x0, x0, #1
     b70:	str	x0, [sp, #320]
     b74:	ldr	x1, [sp, #336]
     b78:	mov	x0, #0x7fff                	// #32767
     b7c:	cmp	x1, x0
     b80:	b.ne	18d4 <__subtf3+0x18d4>  // b.any
     b84:	ldr	x0, [sp, #296]
     b88:	and	x0, x0, #0xc00000
     b8c:	cmp	x0, #0x0
     b90:	b.eq	bcc <__subtf3+0xbcc>  // b.none
     b94:	ldr	x0, [sp, #296]
     b98:	and	x0, x0, #0xc00000
     b9c:	cmp	x0, #0x400, lsl #12
     ba0:	b.ne	bb0 <__subtf3+0xbb0>  // b.any
     ba4:	ldr	x0, [sp, #344]
     ba8:	cmp	x0, #0x0
     bac:	b.eq	bcc <__subtf3+0xbcc>  // b.none
     bb0:	ldr	x0, [sp, #296]
     bb4:	and	x0, x0, #0xc00000
     bb8:	cmp	x0, #0x800, lsl #12
     bbc:	b.ne	be0 <__subtf3+0xbe0>  // b.any
     bc0:	ldr	x0, [sp, #344]
     bc4:	cmp	x0, #0x0
     bc8:	b.eq	be0 <__subtf3+0xbe0>  // b.none
     bcc:	mov	x0, #0x7fff                	// #32767
     bd0:	str	x0, [sp, #336]
     bd4:	str	xzr, [sp, #328]
     bd8:	str	xzr, [sp, #320]
     bdc:	b	bf8 <__subtf3+0xbf8>
     be0:	mov	x0, #0x7ffe                	// #32766
     be4:	str	x0, [sp, #336]
     be8:	mov	x0, #0xffffffffffffffff    	// #-1
     bec:	str	x0, [sp, #328]
     bf0:	mov	x0, #0xffffffffffffffff    	// #-1
     bf4:	str	x0, [sp, #320]
     bf8:	ldr	w0, [sp, #356]
     bfc:	orr	w0, w0, #0x10
     c00:	str	w0, [sp, #356]
     c04:	ldr	w0, [sp, #356]
     c08:	orr	w0, w0, #0x4
     c0c:	str	w0, [sp, #356]
     c10:	b	18e8 <__subtf3+0x18e8>
     c14:	ldr	x0, [sp, #288]
     c18:	mov	w1, w0
     c1c:	ldr	x0, [sp, #272]
     c20:	sub	w0, w1, w0
     c24:	str	w0, [sp, #312]
     c28:	ldr	w0, [sp, #312]
     c2c:	cmp	w0, #0x0
     c30:	b.le	f38 <__subtf3+0xf38>
     c34:	ldr	x0, [sp, #288]
     c38:	str	x0, [sp, #336]
     c3c:	ldr	x0, [sp, #280]
     c40:	str	x0, [sp, #344]
     c44:	ldr	x0, [sp, #272]
     c48:	cmp	x0, #0x0
     c4c:	b.ne	d7c <__subtf3+0xd7c>  // b.any
     c50:	ldr	x1, [sp, #392]
     c54:	ldr	x0, [sp, #368]
     c58:	orr	x0, x1, x0
     c5c:	cmp	x0, #0x0
     c60:	b.ne	cb8 <__subtf3+0xcb8>  // b.any
     c64:	ldr	x1, [sp, #288]
     c68:	mov	x0, #0x7fff                	// #32767
     c6c:	cmp	x1, x0
     c70:	b.ne	ca4 <__subtf3+0xca4>  // b.any
     c74:	ldr	x1, [sp, #384]
     c78:	ldr	x0, [sp, #360]
     c7c:	orr	x0, x1, x0
     c80:	cmp	x0, #0x0
     c84:	b.eq	ca4 <__subtf3+0xca4>  // b.none
     c88:	ldr	x0, [sp, #384]
     c8c:	and	x0, x0, #0x4000000000000
     c90:	cmp	x0, #0x0
     c94:	b.ne	ca4 <__subtf3+0xca4>  // b.any
     c98:	ldr	w0, [sp, #356]
     c9c:	orr	w0, w0, #0x1
     ca0:	str	w0, [sp, #356]
     ca4:	ldr	x0, [sp, #360]
     ca8:	str	x0, [sp, #328]
     cac:	ldr	x0, [sp, #384]
     cb0:	str	x0, [sp, #320]
     cb4:	b	18e8 <__subtf3+0x18e8>
     cb8:	ldr	w0, [sp, #312]
     cbc:	sub	w0, w0, #0x1
     cc0:	str	w0, [sp, #312]
     cc4:	ldr	w0, [sp, #312]
     cc8:	cmp	w0, #0x0
     ccc:	b.ne	d18 <__subtf3+0xd18>  // b.any
     cd0:	ldr	x1, [sp, #360]
     cd4:	ldr	x0, [sp, #368]
     cd8:	sub	x0, x1, x0
     cdc:	str	x0, [sp, #208]
     ce0:	ldr	x1, [sp, #384]
     ce4:	ldr	x0, [sp, #392]
     ce8:	sub	x1, x1, x0
     cec:	ldr	x2, [sp, #208]
     cf0:	ldr	x0, [sp, #360]
     cf4:	cmp	x2, x0
     cf8:	cset	w0, hi  // hi = pmore
     cfc:	and	w0, w0, #0xff
     d00:	and	x0, x0, #0xff
     d04:	sub	x0, x1, x0
     d08:	str	x0, [sp, #320]
     d0c:	ldr	x0, [sp, #208]
     d10:	str	x0, [sp, #328]
     d14:	b	16e8 <__subtf3+0x16e8>
     d18:	ldr	x1, [sp, #288]
     d1c:	mov	x0, #0x7fff                	// #32767
     d20:	cmp	x1, x0
     d24:	b.ne	df0 <__subtf3+0xdf0>  // b.any
     d28:	ldr	x1, [sp, #288]
     d2c:	mov	x0, #0x7fff                	// #32767
     d30:	cmp	x1, x0
     d34:	b.ne	d68 <__subtf3+0xd68>  // b.any
     d38:	ldr	x1, [sp, #384]
     d3c:	ldr	x0, [sp, #360]
     d40:	orr	x0, x1, x0
     d44:	cmp	x0, #0x0
     d48:	b.eq	d68 <__subtf3+0xd68>  // b.none
     d4c:	ldr	x0, [sp, #384]
     d50:	and	x0, x0, #0x4000000000000
     d54:	cmp	x0, #0x0
     d58:	b.ne	d68 <__subtf3+0xd68>  // b.any
     d5c:	ldr	w0, [sp, #356]
     d60:	orr	w0, w0, #0x1
     d64:	str	w0, [sp, #356]
     d68:	ldr	x0, [sp, #360]
     d6c:	str	x0, [sp, #328]
     d70:	ldr	x0, [sp, #384]
     d74:	str	x0, [sp, #320]
     d78:	b	18e8 <__subtf3+0x18e8>
     d7c:	ldr	x1, [sp, #288]
     d80:	mov	x0, #0x7fff                	// #32767
     d84:	cmp	x1, x0
     d88:	b.ne	de0 <__subtf3+0xde0>  // b.any
     d8c:	ldr	x1, [sp, #288]
     d90:	mov	x0, #0x7fff                	// #32767
     d94:	cmp	x1, x0
     d98:	b.ne	dcc <__subtf3+0xdcc>  // b.any
     d9c:	ldr	x1, [sp, #384]
     da0:	ldr	x0, [sp, #360]
     da4:	orr	x0, x1, x0
     da8:	cmp	x0, #0x0
     dac:	b.eq	dcc <__subtf3+0xdcc>  // b.none
     db0:	ldr	x0, [sp, #384]
     db4:	and	x0, x0, #0x4000000000000
     db8:	cmp	x0, #0x0
     dbc:	b.ne	dcc <__subtf3+0xdcc>  // b.any
     dc0:	ldr	w0, [sp, #356]
     dc4:	orr	w0, w0, #0x1
     dc8:	str	w0, [sp, #356]
     dcc:	ldr	x0, [sp, #360]
     dd0:	str	x0, [sp, #328]
     dd4:	ldr	x0, [sp, #384]
     dd8:	str	x0, [sp, #320]
     ddc:	b	18e8 <__subtf3+0x18e8>
     de0:	ldr	x0, [sp, #392]
     de4:	orr	x0, x0, #0x8000000000000
     de8:	str	x0, [sp, #392]
     dec:	b	df4 <__subtf3+0xdf4>
     df0:	nop
     df4:	ldr	w0, [sp, #312]
     df8:	cmp	w0, #0x74
     dfc:	b.gt	ed0 <__subtf3+0xed0>
     e00:	ldr	w0, [sp, #312]
     e04:	cmp	w0, #0x3f
     e08:	b.gt	e70 <__subtf3+0xe70>
     e0c:	mov	w1, #0x40                  	// #64
     e10:	ldr	w0, [sp, #312]
     e14:	sub	w0, w1, w0
     e18:	ldr	x1, [sp, #392]
     e1c:	lsl	x1, x1, x0
     e20:	ldr	w0, [sp, #312]
     e24:	ldr	x2, [sp, #368]
     e28:	lsr	x0, x2, x0
     e2c:	orr	x1, x1, x0
     e30:	mov	w2, #0x40                  	// #64
     e34:	ldr	w0, [sp, #312]
     e38:	sub	w0, w2, w0
     e3c:	ldr	x2, [sp, #368]
     e40:	lsl	x0, x2, x0
     e44:	cmp	x0, #0x0
     e48:	cset	w0, ne  // ne = any
     e4c:	and	w0, w0, #0xff
     e50:	sxtw	x0, w0
     e54:	orr	x0, x1, x0
     e58:	str	x0, [sp, #368]
     e5c:	ldr	w0, [sp, #312]
     e60:	ldr	x1, [sp, #392]
     e64:	lsr	x0, x1, x0
     e68:	str	x0, [sp, #392]
     e6c:	b	ef0 <__subtf3+0xef0>
     e70:	ldr	w0, [sp, #312]
     e74:	sub	w0, w0, #0x40
     e78:	ldr	x1, [sp, #392]
     e7c:	lsr	x1, x1, x0
     e80:	ldr	w0, [sp, #312]
     e84:	cmp	w0, #0x40
     e88:	b.eq	ea4 <__subtf3+0xea4>  // b.none
     e8c:	mov	w2, #0x80                  	// #128
     e90:	ldr	w0, [sp, #312]
     e94:	sub	w0, w2, w0
     e98:	ldr	x2, [sp, #392]
     e9c:	lsl	x0, x2, x0
     ea0:	b	ea8 <__subtf3+0xea8>
     ea4:	mov	x0, #0x0                   	// #0
     ea8:	ldr	x2, [sp, #368]
     eac:	orr	x0, x0, x2
     eb0:	cmp	x0, #0x0
     eb4:	cset	w0, ne  // ne = any
     eb8:	and	w0, w0, #0xff
     ebc:	and	x0, x0, #0xff
     ec0:	orr	x0, x1, x0
     ec4:	str	x0, [sp, #368]
     ec8:	str	xzr, [sp, #392]
     ecc:	b	ef0 <__subtf3+0xef0>
     ed0:	ldr	x1, [sp, #392]
     ed4:	ldr	x0, [sp, #368]
     ed8:	orr	x0, x1, x0
     edc:	cmp	x0, #0x0
     ee0:	b.eq	ef0 <__subtf3+0xef0>  // b.none
     ee4:	mov	x0, #0x1                   	// #1
     ee8:	str	x0, [sp, #368]
     eec:	str	xzr, [sp, #392]
     ef0:	ldr	x1, [sp, #360]
     ef4:	ldr	x0, [sp, #368]
     ef8:	sub	x0, x1, x0
     efc:	str	x0, [sp, #200]
     f00:	ldr	x1, [sp, #384]
     f04:	ldr	x0, [sp, #392]
     f08:	sub	x1, x1, x0
     f0c:	ldr	x2, [sp, #200]
     f10:	ldr	x0, [sp, #360]
     f14:	cmp	x2, x0
     f18:	cset	w0, hi  // hi = pmore
     f1c:	and	w0, w0, #0xff
     f20:	and	x0, x0, #0xff
     f24:	sub	x0, x1, x0
     f28:	str	x0, [sp, #320]
     f2c:	ldr	x0, [sp, #200]
     f30:	str	x0, [sp, #328]
     f34:	b	16e8 <__subtf3+0x16e8>
     f38:	ldr	w0, [sp, #312]
     f3c:	cmp	w0, #0x0
     f40:	b.ge	1254 <__subtf3+0x1254>  // b.tcont
     f44:	ldr	w0, [sp, #312]
     f48:	neg	w0, w0
     f4c:	str	w0, [sp, #312]
     f50:	ldr	x0, [sp, #272]
     f54:	str	x0, [sp, #336]
     f58:	ldr	x0, [sp, #376]
     f5c:	str	x0, [sp, #344]
     f60:	ldr	x0, [sp, #288]
     f64:	cmp	x0, #0x0
     f68:	b.ne	1098 <__subtf3+0x1098>  // b.any
     f6c:	ldr	x1, [sp, #384]
     f70:	ldr	x0, [sp, #360]
     f74:	orr	x0, x1, x0
     f78:	cmp	x0, #0x0
     f7c:	b.ne	fd4 <__subtf3+0xfd4>  // b.any
     f80:	ldr	x1, [sp, #272]
     f84:	mov	x0, #0x7fff                	// #32767
     f88:	cmp	x1, x0
     f8c:	b.ne	fc0 <__subtf3+0xfc0>  // b.any
     f90:	ldr	x1, [sp, #392]
     f94:	ldr	x0, [sp, #368]
     f98:	orr	x0, x1, x0
     f9c:	cmp	x0, #0x0
     fa0:	b.eq	fc0 <__subtf3+0xfc0>  // b.none
     fa4:	ldr	x0, [sp, #392]
     fa8:	and	x0, x0, #0x4000000000000
     fac:	cmp	x0, #0x0
     fb0:	b.ne	fc0 <__subtf3+0xfc0>  // b.any
     fb4:	ldr	w0, [sp, #356]
     fb8:	orr	w0, w0, #0x1
     fbc:	str	w0, [sp, #356]
     fc0:	ldr	x0, [sp, #368]
     fc4:	str	x0, [sp, #328]
     fc8:	ldr	x0, [sp, #392]
     fcc:	str	x0, [sp, #320]
     fd0:	b	18e8 <__subtf3+0x18e8>
     fd4:	ldr	w0, [sp, #312]
     fd8:	sub	w0, w0, #0x1
     fdc:	str	w0, [sp, #312]
     fe0:	ldr	w0, [sp, #312]
     fe4:	cmp	w0, #0x0
     fe8:	b.ne	1034 <__subtf3+0x1034>  // b.any
     fec:	ldr	x1, [sp, #368]
     ff0:	ldr	x0, [sp, #360]
     ff4:	sub	x0, x1, x0
     ff8:	str	x0, [sp, #224]
     ffc:	ldr	x1, [sp, #392]
    1000:	ldr	x0, [sp, #384]
    1004:	sub	x1, x1, x0
    1008:	ldr	x2, [sp, #224]
    100c:	ldr	x0, [sp, #368]
    1010:	cmp	x2, x0
    1014:	cset	w0, hi  // hi = pmore
    1018:	and	w0, w0, #0xff
    101c:	and	x0, x0, #0xff
    1020:	sub	x0, x1, x0
    1024:	str	x0, [sp, #320]
    1028:	ldr	x0, [sp, #224]
    102c:	str	x0, [sp, #328]
    1030:	b	16e8 <__subtf3+0x16e8>
    1034:	ldr	x1, [sp, #272]
    1038:	mov	x0, #0x7fff                	// #32767
    103c:	cmp	x1, x0
    1040:	b.ne	110c <__subtf3+0x110c>  // b.any
    1044:	ldr	x1, [sp, #272]
    1048:	mov	x0, #0x7fff                	// #32767
    104c:	cmp	x1, x0
    1050:	b.ne	1084 <__subtf3+0x1084>  // b.any
    1054:	ldr	x1, [sp, #392]
    1058:	ldr	x0, [sp, #368]
    105c:	orr	x0, x1, x0
    1060:	cmp	x0, #0x0
    1064:	b.eq	1084 <__subtf3+0x1084>  // b.none
    1068:	ldr	x0, [sp, #392]
    106c:	and	x0, x0, #0x4000000000000
    1070:	cmp	x0, #0x0
    1074:	b.ne	1084 <__subtf3+0x1084>  // b.any
    1078:	ldr	w0, [sp, #356]
    107c:	orr	w0, w0, #0x1
    1080:	str	w0, [sp, #356]
    1084:	ldr	x0, [sp, #368]
    1088:	str	x0, [sp, #328]
    108c:	ldr	x0, [sp, #392]
    1090:	str	x0, [sp, #320]
    1094:	b	18e8 <__subtf3+0x18e8>
    1098:	ldr	x1, [sp, #272]
    109c:	mov	x0, #0x7fff                	// #32767
    10a0:	cmp	x1, x0
    10a4:	b.ne	10fc <__subtf3+0x10fc>  // b.any
    10a8:	ldr	x1, [sp, #272]
    10ac:	mov	x0, #0x7fff                	// #32767
    10b0:	cmp	x1, x0
    10b4:	b.ne	10e8 <__subtf3+0x10e8>  // b.any
    10b8:	ldr	x1, [sp, #392]
    10bc:	ldr	x0, [sp, #368]
    10c0:	orr	x0, x1, x0
    10c4:	cmp	x0, #0x0
    10c8:	b.eq	10e8 <__subtf3+0x10e8>  // b.none
    10cc:	ldr	x0, [sp, #392]
    10d0:	and	x0, x0, #0x4000000000000
    10d4:	cmp	x0, #0x0
    10d8:	b.ne	10e8 <__subtf3+0x10e8>  // b.any
    10dc:	ldr	w0, [sp, #356]
    10e0:	orr	w0, w0, #0x1
    10e4:	str	w0, [sp, #356]
    10e8:	ldr	x0, [sp, #368]
    10ec:	str	x0, [sp, #328]
    10f0:	ldr	x0, [sp, #392]
    10f4:	str	x0, [sp, #320]
    10f8:	b	18e8 <__subtf3+0x18e8>
    10fc:	ldr	x0, [sp, #384]
    1100:	orr	x0, x0, #0x8000000000000
    1104:	str	x0, [sp, #384]
    1108:	b	1110 <__subtf3+0x1110>
    110c:	nop
    1110:	ldr	w0, [sp, #312]
    1114:	cmp	w0, #0x74
    1118:	b.gt	11ec <__subtf3+0x11ec>
    111c:	ldr	w0, [sp, #312]
    1120:	cmp	w0, #0x3f
    1124:	b.gt	118c <__subtf3+0x118c>
    1128:	mov	w1, #0x40                  	// #64
    112c:	ldr	w0, [sp, #312]
    1130:	sub	w0, w1, w0
    1134:	ldr	x1, [sp, #384]
    1138:	lsl	x1, x1, x0
    113c:	ldr	w0, [sp, #312]
    1140:	ldr	x2, [sp, #360]
    1144:	lsr	x0, x2, x0
    1148:	orr	x1, x1, x0
    114c:	mov	w2, #0x40                  	// #64
    1150:	ldr	w0, [sp, #312]
    1154:	sub	w0, w2, w0
    1158:	ldr	x2, [sp, #360]
    115c:	lsl	x0, x2, x0
    1160:	cmp	x0, #0x0
    1164:	cset	w0, ne  // ne = any
    1168:	and	w0, w0, #0xff
    116c:	sxtw	x0, w0
    1170:	orr	x0, x1, x0
    1174:	str	x0, [sp, #360]
    1178:	ldr	w0, [sp, #312]
    117c:	ldr	x1, [sp, #384]
    1180:	lsr	x0, x1, x0
    1184:	str	x0, [sp, #384]
    1188:	b	120c <__subtf3+0x120c>
    118c:	ldr	w0, [sp, #312]
    1190:	sub	w0, w0, #0x40
    1194:	ldr	x1, [sp, #384]
    1198:	lsr	x1, x1, x0
    119c:	ldr	w0, [sp, #312]
    11a0:	cmp	w0, #0x40
    11a4:	b.eq	11c0 <__subtf3+0x11c0>  // b.none
    11a8:	mov	w2, #0x80                  	// #128
    11ac:	ldr	w0, [sp, #312]
    11b0:	sub	w0, w2, w0
    11b4:	ldr	x2, [sp, #384]
    11b8:	lsl	x0, x2, x0
    11bc:	b	11c4 <__subtf3+0x11c4>
    11c0:	mov	x0, #0x0                   	// #0
    11c4:	ldr	x2, [sp, #360]
    11c8:	orr	x0, x0, x2
    11cc:	cmp	x0, #0x0
    11d0:	cset	w0, ne  // ne = any
    11d4:	and	w0, w0, #0xff
    11d8:	and	x0, x0, #0xff
    11dc:	orr	x0, x1, x0
    11e0:	str	x0, [sp, #360]
    11e4:	str	xzr, [sp, #384]
    11e8:	b	120c <__subtf3+0x120c>
    11ec:	ldr	x1, [sp, #384]
    11f0:	ldr	x0, [sp, #360]
    11f4:	orr	x0, x1, x0
    11f8:	cmp	x0, #0x0
    11fc:	b.eq	120c <__subtf3+0x120c>  // b.none
    1200:	mov	x0, #0x1                   	// #1
    1204:	str	x0, [sp, #360]
    1208:	str	xzr, [sp, #384]
    120c:	ldr	x1, [sp, #368]
    1210:	ldr	x0, [sp, #360]
    1214:	sub	x0, x1, x0
    1218:	str	x0, [sp, #216]
    121c:	ldr	x1, [sp, #392]
    1220:	ldr	x0, [sp, #384]
    1224:	sub	x1, x1, x0
    1228:	ldr	x2, [sp, #216]
    122c:	ldr	x0, [sp, #368]
    1230:	cmp	x2, x0
    1234:	cset	w0, hi  // hi = pmore
    1238:	and	w0, w0, #0xff
    123c:	and	x0, x0, #0xff
    1240:	sub	x0, x1, x0
    1244:	str	x0, [sp, #320]
    1248:	ldr	x0, [sp, #216]
    124c:	str	x0, [sp, #328]
    1250:	b	16e8 <__subtf3+0x16e8>
    1254:	ldr	x0, [sp, #288]
    1258:	add	x0, x0, #0x1
    125c:	and	x0, x0, #0x7ffe
    1260:	cmp	x0, #0x0
    1264:	b.ne	15fc <__subtf3+0x15fc>  // b.any
    1268:	ldr	x0, [sp, #288]
    126c:	cmp	x0, #0x0
    1270:	b.ne	13ec <__subtf3+0x13ec>  // b.any
    1274:	str	xzr, [sp, #336]
    1278:	ldr	x1, [sp, #384]
    127c:	ldr	x0, [sp, #360]
    1280:	orr	x0, x1, x0
    1284:	cmp	x0, #0x0
    1288:	b.ne	12dc <__subtf3+0x12dc>  // b.any
    128c:	ldr	x0, [sp, #368]
    1290:	str	x0, [sp, #328]
    1294:	ldr	x0, [sp, #392]
    1298:	str	x0, [sp, #320]
    129c:	ldr	x1, [sp, #392]
    12a0:	ldr	x0, [sp, #368]
    12a4:	orr	x0, x1, x0
    12a8:	cmp	x0, #0x0
    12ac:	b.ne	12d0 <__subtf3+0x12d0>  // b.any
    12b0:	ldr	x0, [sp, #296]
    12b4:	and	x0, x0, #0xc00000
    12b8:	cmp	x0, #0x800, lsl #12
    12bc:	cset	w0, eq  // eq = none
    12c0:	and	w0, w0, #0xff
    12c4:	and	x0, x0, #0xff
    12c8:	str	x0, [sp, #344]
    12cc:	b	18e8 <__subtf3+0x18e8>
    12d0:	ldr	x0, [sp, #376]
    12d4:	str	x0, [sp, #344]
    12d8:	b	18e8 <__subtf3+0x18e8>
    12dc:	ldr	x1, [sp, #392]
    12e0:	ldr	x0, [sp, #368]
    12e4:	orr	x0, x1, x0
    12e8:	cmp	x0, #0x0
    12ec:	b.ne	130c <__subtf3+0x130c>  // b.any
    12f0:	ldr	x0, [sp, #360]
    12f4:	str	x0, [sp, #328]
    12f8:	ldr	x0, [sp, #384]
    12fc:	str	x0, [sp, #320]
    1300:	ldr	x0, [sp, #280]
    1304:	str	x0, [sp, #344]
    1308:	b	18e8 <__subtf3+0x18e8>
    130c:	ldr	x1, [sp, #360]
    1310:	ldr	x0, [sp, #368]
    1314:	sub	x0, x1, x0
    1318:	str	x0, [sp, #240]
    131c:	ldr	x1, [sp, #384]
    1320:	ldr	x0, [sp, #392]
    1324:	sub	x1, x1, x0
    1328:	ldr	x2, [sp, #240]
    132c:	ldr	x0, [sp, #360]
    1330:	cmp	x2, x0
    1334:	cset	w0, hi  // hi = pmore
    1338:	and	w0, w0, #0xff
    133c:	and	x0, x0, #0xff
    1340:	sub	x0, x1, x0
    1344:	str	x0, [sp, #320]
    1348:	ldr	x0, [sp, #240]
    134c:	str	x0, [sp, #328]
    1350:	ldr	x0, [sp, #280]
    1354:	str	x0, [sp, #344]
    1358:	ldr	x0, [sp, #320]
    135c:	and	x0, x0, #0x8000000000000
    1360:	cmp	x0, #0x0
    1364:	b.eq	13b8 <__subtf3+0x13b8>  // b.none
    1368:	ldr	x1, [sp, #368]
    136c:	ldr	x0, [sp, #360]
    1370:	sub	x0, x1, x0
    1374:	str	x0, [sp, #232]
    1378:	ldr	x1, [sp, #392]
    137c:	ldr	x0, [sp, #384]
    1380:	sub	x1, x1, x0
    1384:	ldr	x2, [sp, #232]
    1388:	ldr	x0, [sp, #368]
    138c:	cmp	x2, x0
    1390:	cset	w0, hi  // hi = pmore
    1394:	and	w0, w0, #0xff
    1398:	and	x0, x0, #0xff
    139c:	sub	x0, x1, x0
    13a0:	str	x0, [sp, #320]
    13a4:	ldr	x0, [sp, #232]
    13a8:	str	x0, [sp, #328]
    13ac:	ldr	x0, [sp, #376]
    13b0:	str	x0, [sp, #344]
    13b4:	b	18dc <__subtf3+0x18dc>
    13b8:	ldr	x1, [sp, #320]
    13bc:	ldr	x0, [sp, #328]
    13c0:	orr	x0, x1, x0
    13c4:	cmp	x0, #0x0
    13c8:	b.ne	18dc <__subtf3+0x18dc>  // b.any
    13cc:	ldr	x0, [sp, #296]
    13d0:	and	x0, x0, #0xc00000
    13d4:	cmp	x0, #0x800, lsl #12
    13d8:	cset	w0, eq  // eq = none
    13dc:	and	w0, w0, #0xff
    13e0:	and	x0, x0, #0xff
    13e4:	str	x0, [sp, #344]
    13e8:	b	18dc <__subtf3+0x18dc>
    13ec:	ldr	x1, [sp, #288]
    13f0:	mov	x0, #0x7fff                	// #32767
    13f4:	cmp	x1, x0
    13f8:	b.ne	142c <__subtf3+0x142c>  // b.any
    13fc:	ldr	x1, [sp, #384]
    1400:	ldr	x0, [sp, #360]
    1404:	orr	x0, x1, x0
    1408:	cmp	x0, #0x0
    140c:	b.eq	142c <__subtf3+0x142c>  // b.none
    1410:	ldr	x0, [sp, #384]
    1414:	and	x0, x0, #0x4000000000000
    1418:	cmp	x0, #0x0
    141c:	b.ne	142c <__subtf3+0x142c>  // b.any
    1420:	ldr	w0, [sp, #356]
    1424:	orr	w0, w0, #0x1
    1428:	str	w0, [sp, #356]
    142c:	ldr	x1, [sp, #272]
    1430:	mov	x0, #0x7fff                	// #32767
    1434:	cmp	x1, x0
    1438:	b.ne	146c <__subtf3+0x146c>  // b.any
    143c:	ldr	x1, [sp, #392]
    1440:	ldr	x0, [sp, #368]
    1444:	orr	x0, x1, x0
    1448:	cmp	x0, #0x0
    144c:	b.eq	146c <__subtf3+0x146c>  // b.none
    1450:	ldr	x0, [sp, #392]
    1454:	and	x0, x0, #0x4000000000000
    1458:	cmp	x0, #0x0
    145c:	b.ne	146c <__subtf3+0x146c>  // b.any
    1460:	ldr	w0, [sp, #356]
    1464:	orr	w0, w0, #0x1
    1468:	str	w0, [sp, #356]
    146c:	mov	x0, #0x7fff                	// #32767
    1470:	str	x0, [sp, #336]
    1474:	ldr	x1, [sp, #384]
    1478:	ldr	x0, [sp, #360]
    147c:	orr	x0, x1, x0
    1480:	cmp	x0, #0x0
    1484:	b.ne	1500 <__subtf3+0x1500>  // b.any
    1488:	ldr	x1, [sp, #392]
    148c:	ldr	x0, [sp, #368]
    1490:	orr	x0, x1, x0
    1494:	cmp	x0, #0x0
    1498:	b.ne	14e4 <__subtf3+0x14e4>  // b.any
    149c:	str	xzr, [sp, #344]
    14a0:	mov	x0, #0xffffffffffffffff    	// #-1
    14a4:	str	x0, [sp, #328]
    14a8:	mov	x0, #0xffffffffffff        	// #281474976710655
    14ac:	str	x0, [sp, #320]
    14b0:	ldr	x0, [sp, #320]
    14b4:	lsl	x1, x0, #3
    14b8:	ldr	x0, [sp, #328]
    14bc:	lsr	x0, x0, #61
    14c0:	orr	x0, x1, x0
    14c4:	str	x0, [sp, #320]
    14c8:	ldr	x0, [sp, #328]
    14cc:	lsl	x0, x0, #3
    14d0:	str	x0, [sp, #328]
    14d4:	ldr	w0, [sp, #356]
    14d8:	orr	w0, w0, #0x1
    14dc:	str	w0, [sp, #356]
    14e0:	b	18e8 <__subtf3+0x18e8>
    14e4:	ldr	x0, [sp, #376]
    14e8:	str	x0, [sp, #344]
    14ec:	ldr	x0, [sp, #368]
    14f0:	str	x0, [sp, #328]
    14f4:	ldr	x0, [sp, #392]
    14f8:	str	x0, [sp, #320]
    14fc:	b	18e8 <__subtf3+0x18e8>
    1500:	ldr	x1, [sp, #392]
    1504:	ldr	x0, [sp, #368]
    1508:	orr	x0, x1, x0
    150c:	cmp	x0, #0x0
    1510:	b.ne	1530 <__subtf3+0x1530>  // b.any
    1514:	ldr	x0, [sp, #280]
    1518:	str	x0, [sp, #344]
    151c:	ldr	x0, [sp, #360]
    1520:	str	x0, [sp, #328]
    1524:	ldr	x0, [sp, #384]
    1528:	str	x0, [sp, #320]
    152c:	b	18e8 <__subtf3+0x18e8>
    1530:	ldr	x0, [sp, #360]
    1534:	lsr	x1, x0, #3
    1538:	ldr	x0, [sp, #384]
    153c:	lsl	x0, x0, #61
    1540:	orr	x0, x1, x0
    1544:	str	x0, [sp, #360]
    1548:	ldr	x0, [sp, #384]
    154c:	lsr	x0, x0, #3
    1550:	str	x0, [sp, #384]
    1554:	ldr	x0, [sp, #368]
    1558:	lsr	x1, x0, #3
    155c:	ldr	x0, [sp, #392]
    1560:	lsl	x0, x0, #61
    1564:	orr	x0, x1, x0
    1568:	str	x0, [sp, #368]
    156c:	ldr	x0, [sp, #392]
    1570:	lsr	x0, x0, #3
    1574:	str	x0, [sp, #392]
    1578:	ldr	x0, [sp, #384]
    157c:	and	x0, x0, #0x800000000000
    1580:	cmp	x0, #0x0
    1584:	b.eq	15b4 <__subtf3+0x15b4>  // b.none
    1588:	ldr	x0, [sp, #392]
    158c:	and	x0, x0, #0x800000000000
    1590:	cmp	x0, #0x0
    1594:	b.ne	15b4 <__subtf3+0x15b4>  // b.any
    1598:	ldr	x0, [sp, #376]
    159c:	str	x0, [sp, #344]
    15a0:	ldr	x0, [sp, #368]
    15a4:	str	x0, [sp, #328]
    15a8:	ldr	x0, [sp, #392]
    15ac:	str	x0, [sp, #320]
    15b0:	b	15cc <__subtf3+0x15cc>
    15b4:	ldr	x0, [sp, #280]
    15b8:	str	x0, [sp, #344]
    15bc:	ldr	x0, [sp, #360]
    15c0:	str	x0, [sp, #328]
    15c4:	ldr	x0, [sp, #384]
    15c8:	str	x0, [sp, #320]
    15cc:	mov	x0, #0x3                   	// #3
    15d0:	str	x0, [sp, #248]
    15d4:	ldr	x0, [sp, #320]
    15d8:	lsl	x1, x0, #3
    15dc:	ldr	x0, [sp, #328]
    15e0:	lsr	x0, x0, #61
    15e4:	orr	x0, x1, x0
    15e8:	str	x0, [sp, #320]
    15ec:	ldr	x0, [sp, #328]
    15f0:	lsl	x0, x0, #3
    15f4:	str	x0, [sp, #328]
    15f8:	b	18e8 <__subtf3+0x18e8>
    15fc:	ldr	x0, [sp, #288]
    1600:	str	x0, [sp, #336]
    1604:	ldr	x1, [sp, #360]
    1608:	ldr	x0, [sp, #368]
    160c:	sub	x0, x1, x0
    1610:	str	x0, [sp, #264]
    1614:	ldr	x1, [sp, #384]
    1618:	ldr	x0, [sp, #392]
    161c:	sub	x1, x1, x0
    1620:	ldr	x2, [sp, #264]
    1624:	ldr	x0, [sp, #360]
    1628:	cmp	x2, x0
    162c:	cset	w0, hi  // hi = pmore
    1630:	and	w0, w0, #0xff
    1634:	and	x0, x0, #0xff
    1638:	sub	x0, x1, x0
    163c:	str	x0, [sp, #320]
    1640:	ldr	x0, [sp, #264]
    1644:	str	x0, [sp, #328]
    1648:	ldr	x0, [sp, #280]
    164c:	str	x0, [sp, #344]
    1650:	ldr	x0, [sp, #320]
    1654:	and	x0, x0, #0x8000000000000
    1658:	cmp	x0, #0x0
    165c:	b.eq	16b0 <__subtf3+0x16b0>  // b.none
    1660:	ldr	x1, [sp, #368]
    1664:	ldr	x0, [sp, #360]
    1668:	sub	x0, x1, x0
    166c:	str	x0, [sp, #256]
    1670:	ldr	x1, [sp, #392]
    1674:	ldr	x0, [sp, #384]
    1678:	sub	x1, x1, x0
    167c:	ldr	x2, [sp, #256]
    1680:	ldr	x0, [sp, #368]
    1684:	cmp	x2, x0
    1688:	cset	w0, hi  // hi = pmore
    168c:	and	w0, w0, #0xff
    1690:	and	x0, x0, #0xff
    1694:	sub	x0, x1, x0
    1698:	str	x0, [sp, #320]
    169c:	ldr	x0, [sp, #256]
    16a0:	str	x0, [sp, #328]
    16a4:	ldr	x0, [sp, #376]
    16a8:	str	x0, [sp, #344]
    16ac:	b	1708 <__subtf3+0x1708>
    16b0:	ldr	x1, [sp, #320]
    16b4:	ldr	x0, [sp, #328]
    16b8:	orr	x0, x1, x0
    16bc:	cmp	x0, #0x0
    16c0:	b.ne	1708 <__subtf3+0x1708>  // b.any
    16c4:	str	xzr, [sp, #336]
    16c8:	ldr	x0, [sp, #296]
    16cc:	and	x0, x0, #0xc00000
    16d0:	cmp	x0, #0x800, lsl #12
    16d4:	cset	w0, eq  // eq = none
    16d8:	and	w0, w0, #0xff
    16dc:	and	x0, x0, #0xff
    16e0:	str	x0, [sp, #344]
    16e4:	b	18e8 <__subtf3+0x18e8>
    16e8:	ldr	x0, [sp, #320]
    16ec:	and	x0, x0, #0x8000000000000
    16f0:	cmp	x0, #0x0
    16f4:	b.eq	18e4 <__subtf3+0x18e4>  // b.none
    16f8:	ldr	x0, [sp, #320]
    16fc:	and	x0, x0, #0x7ffffffffffff
    1700:	str	x0, [sp, #320]
    1704:	b	170c <__subtf3+0x170c>
    1708:	nop
    170c:	ldr	x0, [sp, #320]
    1710:	cmp	x0, #0x0
    1714:	b.eq	1728 <__subtf3+0x1728>  // b.none
    1718:	ldr	x0, [sp, #320]
    171c:	clz	x0, x0
    1720:	str	w0, [sp, #308]
    1724:	b	1740 <__subtf3+0x1740>
    1728:	ldr	x0, [sp, #328]
    172c:	clz	x0, x0
    1730:	str	w0, [sp, #308]
    1734:	ldr	w0, [sp, #308]
    1738:	add	w0, w0, #0x40
    173c:	str	w0, [sp, #308]
    1740:	ldr	w0, [sp, #308]
    1744:	sub	w0, w0, #0xc
    1748:	str	w0, [sp, #308]
    174c:	ldr	w0, [sp, #308]
    1750:	cmp	w0, #0x3f
    1754:	b.gt	1794 <__subtf3+0x1794>
    1758:	ldr	w0, [sp, #308]
    175c:	ldr	x1, [sp, #320]
    1760:	lsl	x1, x1, x0
    1764:	mov	w2, #0x40                  	// #64
    1768:	ldr	w0, [sp, #308]
    176c:	sub	w0, w2, w0
    1770:	ldr	x2, [sp, #328]
    1774:	lsr	x0, x2, x0
    1778:	orr	x0, x1, x0
    177c:	str	x0, [sp, #320]
    1780:	ldr	w0, [sp, #308]
    1784:	ldr	x1, [sp, #328]
    1788:	lsl	x0, x1, x0
    178c:	str	x0, [sp, #328]
    1790:	b	17ac <__subtf3+0x17ac>
    1794:	ldr	w0, [sp, #308]
    1798:	sub	w0, w0, #0x40
    179c:	ldr	x1, [sp, #328]
    17a0:	lsl	x0, x1, x0
    17a4:	str	x0, [sp, #320]
    17a8:	str	xzr, [sp, #328]
    17ac:	ldrsw	x0, [sp, #308]
    17b0:	ldr	x1, [sp, #336]
    17b4:	cmp	x1, x0
    17b8:	b.gt	18a4 <__subtf3+0x18a4>
    17bc:	ldr	w0, [sp, #308]
    17c0:	ldr	x1, [sp, #336]
    17c4:	sub	w0, w0, w1
    17c8:	add	w0, w0, #0x1
    17cc:	str	w0, [sp, #308]
    17d0:	ldr	w0, [sp, #308]
    17d4:	cmp	w0, #0x3f
    17d8:	b.gt	1840 <__subtf3+0x1840>
    17dc:	mov	w1, #0x40                  	// #64
    17e0:	ldr	w0, [sp, #308]
    17e4:	sub	w0, w1, w0
    17e8:	ldr	x1, [sp, #320]
    17ec:	lsl	x1, x1, x0
    17f0:	ldr	w0, [sp, #308]
    17f4:	ldr	x2, [sp, #328]
    17f8:	lsr	x0, x2, x0
    17fc:	orr	x1, x1, x0
    1800:	mov	w2, #0x40                  	// #64
    1804:	ldr	w0, [sp, #308]
    1808:	sub	w0, w2, w0
    180c:	ldr	x2, [sp, #328]
    1810:	lsl	x0, x2, x0
    1814:	cmp	x0, #0x0
    1818:	cset	w0, ne  // ne = any
    181c:	and	w0, w0, #0xff
    1820:	sxtw	x0, w0
    1824:	orr	x0, x1, x0
    1828:	str	x0, [sp, #328]
    182c:	ldr	w0, [sp, #308]
    1830:	ldr	x1, [sp, #320]
    1834:	lsr	x0, x1, x0
    1838:	str	x0, [sp, #320]
    183c:	b	189c <__subtf3+0x189c>
    1840:	ldr	w0, [sp, #308]
    1844:	sub	w0, w0, #0x40
    1848:	ldr	x1, [sp, #320]
    184c:	lsr	x1, x1, x0
    1850:	ldr	w0, [sp, #308]
    1854:	cmp	w0, #0x40
    1858:	b.eq	1874 <__subtf3+0x1874>  // b.none
    185c:	mov	w2, #0x80                  	// #128
    1860:	ldr	w0, [sp, #308]
    1864:	sub	w0, w2, w0
    1868:	ldr	x2, [sp, #320]
    186c:	lsl	x0, x2, x0
    1870:	b	1878 <__subtf3+0x1878>
    1874:	mov	x0, #0x0                   	// #0
    1878:	ldr	x2, [sp, #328]
    187c:	orr	x0, x0, x2
    1880:	cmp	x0, #0x0
    1884:	cset	w0, ne  // ne = any
    1888:	and	w0, w0, #0xff
    188c:	and	x0, x0, #0xff
    1890:	orr	x0, x1, x0
    1894:	str	x0, [sp, #328]
    1898:	str	xzr, [sp, #320]
    189c:	str	xzr, [sp, #336]
    18a0:	b	18e8 <__subtf3+0x18e8>
    18a4:	ldrsw	x0, [sp, #308]
    18a8:	ldr	x1, [sp, #336]
    18ac:	sub	x0, x1, x0
    18b0:	str	x0, [sp, #336]
    18b4:	ldr	x0, [sp, #320]
    18b8:	and	x0, x0, #0xfff7ffffffffffff
    18bc:	str	x0, [sp, #320]
    18c0:	b	18e8 <__subtf3+0x18e8>
    18c4:	nop
    18c8:	b	18e8 <__subtf3+0x18e8>
    18cc:	nop
    18d0:	b	18e8 <__subtf3+0x18e8>
    18d4:	nop
    18d8:	b	18e8 <__subtf3+0x18e8>
    18dc:	nop
    18e0:	b	18e8 <__subtf3+0x18e8>
    18e4:	nop
    18e8:	ldr	x0, [sp, #336]
    18ec:	cmp	x0, #0x0
    18f0:	b.ne	1910 <__subtf3+0x1910>  // b.any
    18f4:	ldr	x1, [sp, #320]
    18f8:	ldr	x0, [sp, #328]
    18fc:	orr	x0, x1, x0
    1900:	cmp	x0, #0x0
    1904:	b.eq	1910 <__subtf3+0x1910>  // b.none
    1908:	mov	w0, #0x1                   	// #1
    190c:	b	1914 <__subtf3+0x1914>
    1910:	mov	w0, #0x0                   	// #0
    1914:	str	w0, [sp, #148]
    1918:	ldr	x0, [sp, #328]
    191c:	and	x0, x0, #0x7
    1920:	cmp	x0, #0x0
    1924:	b.eq	1a6c <__subtf3+0x1a6c>  // b.none
    1928:	ldr	w0, [sp, #356]
    192c:	orr	w0, w0, #0x10
    1930:	str	w0, [sp, #356]
    1934:	ldr	x0, [sp, #296]
    1938:	and	x0, x0, #0xc00000
    193c:	cmp	x0, #0xc00, lsl #12
    1940:	b.eq	1a74 <__subtf3+0x1a74>  // b.none
    1944:	cmp	x0, #0xc00, lsl #12
    1948:	b.hi	1a78 <__subtf3+0x1a78>  // b.pmore
    194c:	cmp	x0, #0x800, lsl #12
    1950:	b.eq	1a14 <__subtf3+0x1a14>  // b.none
    1954:	cmp	x0, #0x800, lsl #12
    1958:	b.hi	1a78 <__subtf3+0x1a78>  // b.pmore
    195c:	cmp	x0, #0x0
    1960:	b.eq	1970 <__subtf3+0x1970>  // b.none
    1964:	cmp	x0, #0x400, lsl #12
    1968:	b.eq	19bc <__subtf3+0x19bc>  // b.none
    196c:	b	1a78 <__subtf3+0x1a78>
    1970:	ldr	x0, [sp, #328]
    1974:	and	x0, x0, #0xf
    1978:	cmp	x0, #0x4
    197c:	b.eq	1a74 <__subtf3+0x1a74>  // b.none
    1980:	ldr	x0, [sp, #328]
    1984:	add	x0, x0, #0x4
    1988:	str	x0, [sp, #120]
    198c:	ldr	x1, [sp, #120]
    1990:	ldr	x0, [sp, #328]
    1994:	cmp	x1, x0
    1998:	cset	w0, cc  // cc = lo, ul, last
    199c:	and	w0, w0, #0xff
    19a0:	and	x0, x0, #0xff
    19a4:	ldr	x1, [sp, #320]
    19a8:	add	x0, x1, x0
    19ac:	str	x0, [sp, #320]
    19b0:	ldr	x0, [sp, #120]
    19b4:	str	x0, [sp, #328]
    19b8:	b	1a74 <__subtf3+0x1a74>
    19bc:	ldr	x0, [sp, #344]
    19c0:	cmp	x0, #0x0
    19c4:	b.ne	1a74 <__subtf3+0x1a74>  // b.any
    19c8:	ldr	x0, [sp, #328]
    19cc:	and	x0, x0, #0x7
    19d0:	cmp	x0, #0x0
    19d4:	b.eq	1a74 <__subtf3+0x1a74>  // b.none
    19d8:	ldr	x0, [sp, #328]
    19dc:	add	x0, x0, #0x8
    19e0:	str	x0, [sp, #128]
    19e4:	ldr	x1, [sp, #128]
    19e8:	ldr	x0, [sp, #328]
    19ec:	cmp	x1, x0
    19f0:	cset	w0, cc  // cc = lo, ul, last
    19f4:	and	w0, w0, #0xff
    19f8:	and	x0, x0, #0xff
    19fc:	ldr	x1, [sp, #320]
    1a00:	add	x0, x1, x0
    1a04:	str	x0, [sp, #320]
    1a08:	ldr	x0, [sp, #128]
    1a0c:	str	x0, [sp, #328]
    1a10:	b	1a74 <__subtf3+0x1a74>
    1a14:	ldr	x0, [sp, #344]
    1a18:	cmp	x0, #0x0
    1a1c:	b.eq	1a74 <__subtf3+0x1a74>  // b.none
    1a20:	ldr	x0, [sp, #328]
    1a24:	and	x0, x0, #0x7
    1a28:	cmp	x0, #0x0
    1a2c:	b.eq	1a74 <__subtf3+0x1a74>  // b.none
    1a30:	ldr	x0, [sp, #328]
    1a34:	add	x0, x0, #0x8
    1a38:	str	x0, [sp, #136]
    1a3c:	ldr	x1, [sp, #136]
    1a40:	ldr	x0, [sp, #328]
    1a44:	cmp	x1, x0
    1a48:	cset	w0, cc  // cc = lo, ul, last
    1a4c:	and	w0, w0, #0xff
    1a50:	and	x0, x0, #0xff
    1a54:	ldr	x1, [sp, #320]
    1a58:	add	x0, x1, x0
    1a5c:	str	x0, [sp, #320]
    1a60:	ldr	x0, [sp, #136]
    1a64:	str	x0, [sp, #328]
    1a68:	b	1a74 <__subtf3+0x1a74>
    1a6c:	nop
    1a70:	b	1a78 <__subtf3+0x1a78>
    1a74:	nop
    1a78:	ldr	w0, [sp, #148]
    1a7c:	cmp	w0, #0x0
    1a80:	b.eq	1ab0 <__subtf3+0x1ab0>  // b.none
    1a84:	ldr	w0, [sp, #356]
    1a88:	and	w0, w0, #0x10
    1a8c:	cmp	w0, #0x0
    1a90:	b.ne	1aa4 <__subtf3+0x1aa4>  // b.any
    1a94:	ldr	x0, [sp, #296]
    1a98:	and	x0, x0, #0x800
    1a9c:	cmp	x0, #0x0
    1aa0:	b.eq	1ab0 <__subtf3+0x1ab0>  // b.none
    1aa4:	ldr	w0, [sp, #356]
    1aa8:	orr	w0, w0, #0x8
    1aac:	str	w0, [sp, #356]
    1ab0:	ldr	x0, [sp, #320]
    1ab4:	and	x0, x0, #0x8000000000000
    1ab8:	cmp	x0, #0x0
    1abc:	b.eq	1b74 <__subtf3+0x1b74>  // b.none
    1ac0:	ldr	x0, [sp, #320]
    1ac4:	and	x0, x0, #0xfff7ffffffffffff
    1ac8:	str	x0, [sp, #320]
    1acc:	ldr	x0, [sp, #336]
    1ad0:	add	x0, x0, #0x1
    1ad4:	str	x0, [sp, #336]
    1ad8:	ldr	x1, [sp, #336]
    1adc:	mov	x0, #0x7fff                	// #32767
    1ae0:	cmp	x1, x0
    1ae4:	b.ne	1b74 <__subtf3+0x1b74>  // b.any
    1ae8:	ldr	x0, [sp, #296]
    1aec:	and	x0, x0, #0xc00000
    1af0:	cmp	x0, #0x0
    1af4:	b.eq	1b30 <__subtf3+0x1b30>  // b.none
    1af8:	ldr	x0, [sp, #296]
    1afc:	and	x0, x0, #0xc00000
    1b00:	cmp	x0, #0x400, lsl #12
    1b04:	b.ne	1b14 <__subtf3+0x1b14>  // b.any
    1b08:	ldr	x0, [sp, #344]
    1b0c:	cmp	x0, #0x0
    1b10:	b.eq	1b30 <__subtf3+0x1b30>  // b.none
    1b14:	ldr	x0, [sp, #296]
    1b18:	and	x0, x0, #0xc00000
    1b1c:	cmp	x0, #0x800, lsl #12
    1b20:	b.ne	1b44 <__subtf3+0x1b44>  // b.any
    1b24:	ldr	x0, [sp, #344]
    1b28:	cmp	x0, #0x0
    1b2c:	b.eq	1b44 <__subtf3+0x1b44>  // b.none
    1b30:	mov	x0, #0x7fff                	// #32767
    1b34:	str	x0, [sp, #336]
    1b38:	str	xzr, [sp, #328]
    1b3c:	str	xzr, [sp, #320]
    1b40:	b	1b5c <__subtf3+0x1b5c>
    1b44:	mov	x0, #0x7ffe                	// #32766
    1b48:	str	x0, [sp, #336]
    1b4c:	mov	x0, #0xffffffffffffffff    	// #-1
    1b50:	str	x0, [sp, #328]
    1b54:	mov	x0, #0xffffffffffffffff    	// #-1
    1b58:	str	x0, [sp, #320]
    1b5c:	ldr	w0, [sp, #356]
    1b60:	orr	w0, w0, #0x10
    1b64:	str	w0, [sp, #356]
    1b68:	ldr	w0, [sp, #356]
    1b6c:	orr	w0, w0, #0x4
    1b70:	str	w0, [sp, #356]
    1b74:	ldr	x0, [sp, #328]
    1b78:	lsr	x1, x0, #3
    1b7c:	ldr	x0, [sp, #320]
    1b80:	lsl	x0, x0, #61
    1b84:	orr	x0, x1, x0
    1b88:	str	x0, [sp, #328]
    1b8c:	ldr	x0, [sp, #320]
    1b90:	lsr	x0, x0, #3
    1b94:	str	x0, [sp, #320]
    1b98:	ldr	x1, [sp, #336]
    1b9c:	mov	x0, #0x7fff                	// #32767
    1ba0:	cmp	x1, x0
    1ba4:	b.ne	1bc8 <__subtf3+0x1bc8>  // b.any
    1ba8:	ldr	x1, [sp, #320]
    1bac:	ldr	x0, [sp, #328]
    1bb0:	orr	x0, x1, x0
    1bb4:	cmp	x0, #0x0
    1bb8:	b.eq	1bc8 <__subtf3+0x1bc8>  // b.none
    1bbc:	ldr	x0, [sp, #320]
    1bc0:	orr	x0, x0, #0x800000000000
    1bc4:	str	x0, [sp, #320]
    1bc8:	ldr	x0, [sp, #328]
    1bcc:	str	x0, [sp, #48]
    1bd0:	ldr	x0, [sp, #320]
    1bd4:	and	x1, x0, #0xffffffffffff
    1bd8:	ldr	x0, [sp, #56]
    1bdc:	bfxil	x0, x1, #0, #48
    1be0:	str	x0, [sp, #56]
    1be4:	ldr	x0, [sp, #336]
    1be8:	and	w0, w0, #0x7fff
    1bec:	and	w1, w0, #0xffff
    1bf0:	ldrh	w0, [sp, #62]
    1bf4:	bfxil	w0, w1, #0, #15
    1bf8:	strh	w0, [sp, #62]
    1bfc:	ldr	x0, [sp, #344]
    1c00:	and	w0, w0, #0x1
    1c04:	and	w1, w0, #0xff
    1c08:	ldrb	w0, [sp, #63]
    1c0c:	bfi	w0, w1, #7, #1
    1c10:	strb	w0, [sp, #63]
    1c14:	ldr	q0, [sp, #48]
    1c18:	str	q0, [sp, #96]
    1c1c:	ldrsw	x0, [sp, #356]
    1c20:	cmp	x0, #0x0
    1c24:	b.eq	1c30 <__subtf3+0x1c30>  // b.none
    1c28:	ldr	w0, [sp, #356]
    1c2c:	bl	0 <__sfp_handle_exceptions>
    1c30:	ldr	q0, [sp, #96]
    1c34:	ldp	x29, x30, [sp], #400
    1c38:	ret

unordtf2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__unordtf2>:
   0:	stp	x29, x30, [sp, #-176]!
   4:	mov	x29, sp
   8:	str	q0, [sp, #32]
   c:	str	q1, [sp, #16]
  10:	str	wzr, [sp, #172]
  14:	str	xzr, [sp, #152]
  18:	mrs	x0, fpcr
  1c:	str	x0, [sp, #152]
  20:	ldr	q0, [sp, #32]
  24:	str	q0, [sp, #64]
  28:	ldr	x0, [sp, #64]
  2c:	str	x0, [sp, #144]
  30:	ldr	x0, [sp, #72]
  34:	ubfx	x0, x0, #0, #48
  38:	str	x0, [sp, #136]
  3c:	ldrh	w0, [sp, #78]
  40:	ubfx	x0, x0, #0, #15
  44:	and	w0, w0, #0xffff
  48:	and	x0, x0, #0xffff
  4c:	str	x0, [sp, #128]
  50:	ldrb	w0, [sp, #79]
  54:	ubfx	x0, x0, #7, #1
  58:	and	w0, w0, #0xff
  5c:	and	x0, x0, #0xff
  60:	str	x0, [sp, #120]
  64:	ldr	q0, [sp, #16]
  68:	str	q0, [sp, #48]
  6c:	ldr	x0, [sp, #48]
  70:	str	x0, [sp, #112]
  74:	ldr	x0, [sp, #56]
  78:	ubfx	x0, x0, #0, #48
  7c:	str	x0, [sp, #104]
  80:	ldrh	w0, [sp, #62]
  84:	ubfx	x0, x0, #0, #15
  88:	and	w0, w0, #0xffff
  8c:	and	x0, x0, #0xffff
  90:	str	x0, [sp, #96]
  94:	ldrb	w0, [sp, #63]
  98:	ubfx	x0, x0, #7, #1
  9c:	and	w0, w0, #0xff
  a0:	and	x0, x0, #0xff
  a4:	str	x0, [sp, #88]
  a8:	ldr	x1, [sp, #128]
  ac:	mov	x0, #0x7fff                	// #32767
  b0:	cmp	x1, x0
  b4:	b.ne	cc <__unordtf2+0xcc>  // b.any
  b8:	ldr	x1, [sp, #136]
  bc:	ldr	x0, [sp, #144]
  c0:	orr	x0, x1, x0
  c4:	cmp	x0, #0x0
  c8:	b.ne	f0 <__unordtf2+0xf0>  // b.any
  cc:	ldr	x1, [sp, #96]
  d0:	mov	x0, #0x7fff                	// #32767
  d4:	cmp	x1, x0
  d8:	b.ne	f8 <__unordtf2+0xf8>  // b.any
  dc:	ldr	x1, [sp, #104]
  e0:	ldr	x0, [sp, #112]
  e4:	orr	x0, x1, x0
  e8:	cmp	x0, #0x0
  ec:	b.eq	f8 <__unordtf2+0xf8>  // b.none
  f0:	mov	w0, #0x1                   	// #1
  f4:	b	fc <__unordtf2+0xfc>
  f8:	mov	w0, #0x0                   	// #0
  fc:	str	w0, [sp, #84]
 100:	ldr	w0, [sp, #84]
 104:	cmp	w0, #0x0
 108:	b.eq	1b0 <__unordtf2+0x1b0>  // b.none
 10c:	str	wzr, [sp, #164]
 110:	ldr	x1, [sp, #128]
 114:	mov	x0, #0x7fff                	// #32767
 118:	cmp	x1, x0
 11c:	b.ne	14c <__unordtf2+0x14c>  // b.any
 120:	ldr	x1, [sp, #136]
 124:	ldr	x0, [sp, #144]
 128:	orr	x0, x1, x0
 12c:	cmp	x0, #0x0
 130:	b.eq	14c <__unordtf2+0x14c>  // b.none
 134:	ldr	x0, [sp, #136]
 138:	and	x0, x0, #0x800000000000
 13c:	cmp	x0, #0x0
 140:	b.ne	14c <__unordtf2+0x14c>  // b.any
 144:	mov	w0, #0x1                   	// #1
 148:	str	w0, [sp, #164]
 14c:	ldr	w0, [sp, #164]
 150:	cmp	w0, #0x0
 154:	b.ne	1a4 <__unordtf2+0x1a4>  // b.any
 158:	str	wzr, [sp, #168]
 15c:	ldr	x1, [sp, #96]
 160:	mov	x0, #0x7fff                	// #32767
 164:	cmp	x1, x0
 168:	b.ne	198 <__unordtf2+0x198>  // b.any
 16c:	ldr	x1, [sp, #104]
 170:	ldr	x0, [sp, #112]
 174:	orr	x0, x1, x0
 178:	cmp	x0, #0x0
 17c:	b.eq	198 <__unordtf2+0x198>  // b.none
 180:	ldr	x0, [sp, #104]
 184:	and	x0, x0, #0x800000000000
 188:	cmp	x0, #0x0
 18c:	b.ne	198 <__unordtf2+0x198>  // b.any
 190:	mov	w0, #0x1                   	// #1
 194:	str	w0, [sp, #168]
 198:	ldr	w0, [sp, #168]
 19c:	cmp	w0, #0x0
 1a0:	b.eq	1b0 <__unordtf2+0x1b0>  // b.none
 1a4:	ldr	w0, [sp, #172]
 1a8:	orr	w0, w0, #0x1
 1ac:	str	w0, [sp, #172]
 1b0:	ldrsw	x0, [sp, #172]
 1b4:	cmp	x0, #0x0
 1b8:	b.eq	1c4 <__unordtf2+0x1c4>  // b.none
 1bc:	ldr	w0, [sp, #172]
 1c0:	bl	0 <__sfp_handle_exceptions>
 1c4:	ldr	w0, [sp, #84]
 1c8:	ldp	x29, x30, [sp], #176
 1cc:	ret

fixtfsi.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__fixtfsi>:
   0:	stp	x29, x30, [sp, #-112]!
   4:	mov	x29, sp
   8:	str	q0, [sp, #16]
   c:	str	wzr, [sp, #108]
  10:	str	xzr, [sp, #80]
  14:	mrs	x0, fpcr
  18:	str	x0, [sp, #80]
  1c:	ldr	q0, [sp, #16]
  20:	str	q0, [sp, #32]
  24:	ldr	x0, [sp, #32]
  28:	str	x0, [sp, #96]
  2c:	ldr	x0, [sp, #40]
  30:	ubfx	x0, x0, #0, #48
  34:	str	x0, [sp, #72]
  38:	ldrh	w0, [sp, #46]
  3c:	ubfx	x0, x0, #0, #15
  40:	and	w0, w0, #0xffff
  44:	and	x0, x0, #0xffff
  48:	str	x0, [sp, #64]
  4c:	ldrb	w0, [sp, #47]
  50:	ubfx	x0, x0, #7, #1
  54:	and	w0, w0, #0xff
  58:	and	x0, x0, #0xff
  5c:	str	x0, [sp, #56]
  60:	ldr	x1, [sp, #64]
  64:	mov	x0, #0x3ffe                	// #16382
  68:	cmp	x1, x0
  6c:	b.gt	b4 <__fixtfsi+0xb4>
  70:	str	wzr, [sp, #92]
  74:	ldr	x0, [sp, #64]
  78:	cmp	x0, #0x0
  7c:	b.ne	a4 <__fixtfsi+0xa4>  // b.any
  80:	ldr	x1, [sp, #72]
  84:	ldr	x0, [sp, #96]
  88:	orr	x0, x1, x0
  8c:	cmp	x0, #0x0
  90:	b.eq	318 <__fixtfsi+0x318>  // b.none
  94:	ldr	w0, [sp, #108]
  98:	orr	w0, w0, #0x10
  9c:	str	w0, [sp, #108]
  a0:	b	318 <__fixtfsi+0x318>
  a4:	ldr	w0, [sp, #108]
  a8:	orr	w0, w0, #0x10
  ac:	str	w0, [sp, #108]
  b0:	b	318 <__fixtfsi+0x318>
  b4:	ldr	x1, [sp, #64]
  b8:	mov	x0, #0x401d                	// #16413
  bc:	cmp	x1, x0
  c0:	b.le	190 <__fixtfsi+0x190>
  c4:	mov	w0, #0x1                   	// #1
  c8:	str	w0, [sp, #92]
  cc:	ldr	w0, [sp, #92]
  d0:	lsl	w0, w0, #31
  d4:	str	w0, [sp, #92]
  d8:	ldr	x0, [sp, #56]
  dc:	mov	w1, w0
  e0:	ldr	w0, [sp, #92]
  e4:	add	w0, w1, w0
  e8:	sub	w0, w0, #0x1
  ec:	str	w0, [sp, #92]
  f0:	ldr	x0, [sp, #56]
  f4:	cmp	x0, #0x0
  f8:	b.eq	180 <__fixtfsi+0x180>  // b.none
  fc:	ldr	x1, [sp, #64]
 100:	mov	x0, #0x401e                	// #16414
 104:	cmp	x1, x0
 108:	b.ne	180 <__fixtfsi+0x180>  // b.any
 10c:	str	wzr, [sp, #52]
 110:	ldr	x0, [sp, #72]
 114:	lsl	x1, x0, #47
 118:	ldr	x0, [sp, #96]
 11c:	orr	x0, x1, x0
 120:	cmp	x0, #0x0
 124:	cset	w0, ne  // ne = any
 128:	and	w0, w0, #0xff
 12c:	str	w0, [sp, #52]
 130:	ldr	x0, [sp, #72]
 134:	lsr	x0, x0, #17
 138:	str	x0, [sp, #96]
 13c:	str	xzr, [sp, #72]
 140:	ldr	x1, [sp, #72]
 144:	ldr	x0, [sp, #96]
 148:	orr	x0, x1, x0
 14c:	cmp	x0, #0x0
 150:	b.eq	164 <__fixtfsi+0x164>  // b.none
 154:	ldr	w0, [sp, #108]
 158:	orr	w0, w0, #0x1
 15c:	str	w0, [sp, #108]
 160:	b	314 <__fixtfsi+0x314>
 164:	ldr	w0, [sp, #52]
 168:	cmp	w0, #0x0
 16c:	b.eq	314 <__fixtfsi+0x314>  // b.none
 170:	ldr	w0, [sp, #108]
 174:	orr	w0, w0, #0x10
 178:	str	w0, [sp, #108]
 17c:	b	314 <__fixtfsi+0x314>
 180:	ldr	w0, [sp, #108]
 184:	orr	w0, w0, #0x1
 188:	str	w0, [sp, #108]
 18c:	b	318 <__fixtfsi+0x318>
 190:	str	wzr, [sp, #88]
 194:	ldr	x0, [sp, #72]
 198:	orr	x0, x0, #0x1000000000000
 19c:	str	x0, [sp, #72]
 1a0:	ldr	x1, [sp, #64]
 1a4:	mov	x0, #0x406e                	// #16494
 1a8:	cmp	x1, x0
 1ac:	b.le	1d8 <__fixtfsi+0x1d8>
 1b0:	ldr	x0, [sp, #96]
 1b4:	str	w0, [sp, #92]
 1b8:	ldr	x0, [sp, #64]
 1bc:	mov	w1, w0
 1c0:	mov	w0, #0xffffbf91            	// #-16495
 1c4:	add	w0, w1, w0
 1c8:	ldr	w1, [sp, #92]
 1cc:	lsl	w0, w1, w0
 1d0:	str	w0, [sp, #92]
 1d4:	b	2e0 <__fixtfsi+0x2e0>
 1d8:	mov	x1, #0x406f                	// #16495
 1dc:	ldr	x0, [sp, #64]
 1e0:	sub	x0, x1, x0
 1e4:	cmp	x0, #0x3f
 1e8:	b.gt	26c <__fixtfsi+0x26c>
 1ec:	ldr	x0, [sp, #64]
 1f0:	mov	w1, w0
 1f4:	mov	w0, #0xffffbfd1            	// #-16431
 1f8:	add	w0, w1, w0
 1fc:	ldr	x1, [sp, #96]
 200:	lsl	x0, x1, x0
 204:	cmp	x0, #0x0
 208:	cset	w0, ne  // ne = any
 20c:	and	w0, w0, #0xff
 210:	str	w0, [sp, #88]
 214:	ldr	x0, [sp, #64]
 218:	mov	w1, w0
 21c:	mov	w0, #0xffffbfd1            	// #-16431
 220:	add	w0, w1, w0
 224:	ldr	x1, [sp, #72]
 228:	lsl	x1, x1, x0
 22c:	ldr	x0, [sp, #64]
 230:	mov	w2, w0
 234:	mov	w0, #0x406f                	// #16495
 238:	sub	w0, w0, w2
 23c:	ldr	x2, [sp, #96]
 240:	lsr	x0, x2, x0
 244:	orr	x0, x1, x0
 248:	str	x0, [sp, #96]
 24c:	ldr	x0, [sp, #64]
 250:	mov	w1, w0
 254:	mov	w0, #0x406f                	// #16495
 258:	sub	w0, w0, w1
 25c:	ldr	x1, [sp, #72]
 260:	lsr	x0, x1, x0
 264:	str	x0, [sp, #72]
 268:	b	2d8 <__fixtfsi+0x2d8>
 26c:	mov	x1, #0x406f                	// #16495
 270:	ldr	x0, [sp, #64]
 274:	sub	x0, x1, x0
 278:	cmp	x0, #0x40
 27c:	b.eq	29c <__fixtfsi+0x29c>  // b.none
 280:	ldr	x0, [sp, #64]
 284:	mov	w1, w0
 288:	mov	w0, #0xffffc011            	// #-16367
 28c:	add	w0, w1, w0
 290:	ldr	x1, [sp, #72]
 294:	lsl	x0, x1, x0
 298:	b	2a0 <__fixtfsi+0x2a0>
 29c:	mov	x0, #0x0                   	// #0
 2a0:	ldr	x1, [sp, #96]
 2a4:	orr	x0, x0, x1
 2a8:	cmp	x0, #0x0
 2ac:	cset	w0, ne  // ne = any
 2b0:	and	w0, w0, #0xff
 2b4:	str	w0, [sp, #88]
 2b8:	ldr	x0, [sp, #64]
 2bc:	mov	w1, w0
 2c0:	mov	w0, #0x402f                	// #16431
 2c4:	sub	w0, w0, w1
 2c8:	ldr	x1, [sp, #72]
 2cc:	lsr	x0, x1, x0
 2d0:	str	x0, [sp, #96]
 2d4:	str	xzr, [sp, #72]
 2d8:	ldr	x0, [sp, #96]
 2dc:	str	w0, [sp, #92]
 2e0:	ldr	x0, [sp, #56]
 2e4:	cmp	x0, #0x0
 2e8:	b.eq	2f8 <__fixtfsi+0x2f8>  // b.none
 2ec:	ldr	w0, [sp, #92]
 2f0:	neg	w0, w0
 2f4:	str	w0, [sp, #92]
 2f8:	ldr	w0, [sp, #88]
 2fc:	cmp	w0, #0x0
 300:	b.eq	318 <__fixtfsi+0x318>  // b.none
 304:	ldr	w0, [sp, #108]
 308:	orr	w0, w0, #0x10
 30c:	str	w0, [sp, #108]
 310:	b	318 <__fixtfsi+0x318>
 314:	nop
 318:	ldrsw	x0, [sp, #108]
 31c:	cmp	x0, #0x0
 320:	b.eq	32c <__fixtfsi+0x32c>  // b.none
 324:	ldr	w0, [sp, #108]
 328:	bl	0 <__sfp_handle_exceptions>
 32c:	ldr	w0, [sp, #92]
 330:	ldp	x29, x30, [sp], #112
 334:	ret

fixunstfsi.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__fixunstfsi>:
   0:	stp	x29, x30, [sp, #-112]!
   4:	mov	x29, sp
   8:	str	q0, [sp, #16]
   c:	str	wzr, [sp, #100]
  10:	str	xzr, [sp, #80]
  14:	mrs	x0, fpcr
  18:	str	x0, [sp, #80]
  1c:	ldr	q0, [sp, #16]
  20:	str	q0, [sp, #32]
  24:	ldr	x0, [sp, #32]
  28:	str	x0, [sp, #88]
  2c:	ldr	x0, [sp, #40]
  30:	ubfx	x0, x0, #0, #48
  34:	str	x0, [sp, #72]
  38:	ldrh	w0, [sp, #46]
  3c:	ubfx	x0, x0, #0, #15
  40:	and	w0, w0, #0xffff
  44:	and	x0, x0, #0xffff
  48:	str	x0, [sp, #64]
  4c:	ldrb	w0, [sp, #47]
  50:	ubfx	x0, x0, #7, #1
  54:	and	w0, w0, #0xff
  58:	and	x0, x0, #0xff
  5c:	str	x0, [sp, #56]
  60:	ldr	x1, [sp, #64]
  64:	mov	x0, #0x3ffe                	// #16382
  68:	cmp	x1, x0
  6c:	b.gt	b4 <__fixunstfsi+0xb4>
  70:	str	wzr, [sp, #108]
  74:	ldr	x0, [sp, #64]
  78:	cmp	x0, #0x0
  7c:	b.ne	a4 <__fixunstfsi+0xa4>  // b.any
  80:	ldr	x1, [sp, #72]
  84:	ldr	x0, [sp, #88]
  88:	orr	x0, x1, x0
  8c:	cmp	x0, #0x0
  90:	b.eq	278 <__fixunstfsi+0x278>  // b.none
  94:	ldr	w0, [sp, #100]
  98:	orr	w0, w0, #0x10
  9c:	str	w0, [sp, #100]
  a0:	b	278 <__fixunstfsi+0x278>
  a4:	ldr	w0, [sp, #100]
  a8:	orr	w0, w0, #0x10
  ac:	str	w0, [sp, #100]
  b0:	b	278 <__fixunstfsi+0x278>
  b4:	ldr	x0, [sp, #56]
  b8:	cmp	x0, #0x0
  bc:	b.eq	c8 <__fixunstfsi+0xc8>  // b.none
  c0:	mov	x0, #0x401e                	// #16414
  c4:	b	cc <__fixunstfsi+0xcc>
  c8:	mov	x0, #0x401f                	// #16415
  cc:	ldr	x1, [sp, #64]
  d0:	cmp	x0, x1
  d4:	b.le	e4 <__fixunstfsi+0xe4>
  d8:	ldr	x0, [sp, #56]
  dc:	cmp	x0, #0x0
  e0:	b.eq	110 <__fixunstfsi+0x110>  // b.none
  e4:	str	wzr, [sp, #108]
  e8:	ldr	x0, [sp, #56]
  ec:	cmp	x0, #0x0
  f0:	b.ne	100 <__fixunstfsi+0x100>  // b.any
  f4:	ldr	w0, [sp, #108]
  f8:	mvn	w0, w0
  fc:	str	w0, [sp, #108]
 100:	ldr	w0, [sp, #100]
 104:	orr	w0, w0, #0x1
 108:	str	w0, [sp, #100]
 10c:	b	278 <__fixunstfsi+0x278>
 110:	str	wzr, [sp, #104]
 114:	ldr	x0, [sp, #72]
 118:	orr	x0, x0, #0x1000000000000
 11c:	str	x0, [sp, #72]
 120:	ldr	x1, [sp, #64]
 124:	mov	x0, #0x406e                	// #16494
 128:	cmp	x1, x0
 12c:	b.le	158 <__fixunstfsi+0x158>
 130:	ldr	x0, [sp, #88]
 134:	str	w0, [sp, #108]
 138:	ldr	x0, [sp, #64]
 13c:	mov	w1, w0
 140:	mov	w0, #0xffffbf91            	// #-16495
 144:	add	w0, w1, w0
 148:	ldr	w1, [sp, #108]
 14c:	lsl	w0, w1, w0
 150:	str	w0, [sp, #108]
 154:	b	260 <__fixunstfsi+0x260>
 158:	mov	x1, #0x406f                	// #16495
 15c:	ldr	x0, [sp, #64]
 160:	sub	x0, x1, x0
 164:	cmp	x0, #0x3f
 168:	b.gt	1ec <__fixunstfsi+0x1ec>
 16c:	ldr	x0, [sp, #64]
 170:	mov	w1, w0
 174:	mov	w0, #0xffffbfd1            	// #-16431
 178:	add	w0, w1, w0
 17c:	ldr	x1, [sp, #88]
 180:	lsl	x0, x1, x0
 184:	cmp	x0, #0x0
 188:	cset	w0, ne  // ne = any
 18c:	and	w0, w0, #0xff
 190:	str	w0, [sp, #104]
 194:	ldr	x0, [sp, #64]
 198:	mov	w1, w0
 19c:	mov	w0, #0xffffbfd1            	// #-16431
 1a0:	add	w0, w1, w0
 1a4:	ldr	x1, [sp, #72]
 1a8:	lsl	x1, x1, x0
 1ac:	ldr	x0, [sp, #64]
 1b0:	mov	w2, w0
 1b4:	mov	w0, #0x406f                	// #16495
 1b8:	sub	w0, w0, w2
 1bc:	ldr	x2, [sp, #88]
 1c0:	lsr	x0, x2, x0
 1c4:	orr	x0, x1, x0
 1c8:	str	x0, [sp, #88]
 1cc:	ldr	x0, [sp, #64]
 1d0:	mov	w1, w0
 1d4:	mov	w0, #0x406f                	// #16495
 1d8:	sub	w0, w0, w1
 1dc:	ldr	x1, [sp, #72]
 1e0:	lsr	x0, x1, x0
 1e4:	str	x0, [sp, #72]
 1e8:	b	258 <__fixunstfsi+0x258>
 1ec:	mov	x1, #0x406f                	// #16495
 1f0:	ldr	x0, [sp, #64]
 1f4:	sub	x0, x1, x0
 1f8:	cmp	x0, #0x40
 1fc:	b.eq	21c <__fixunstfsi+0x21c>  // b.none
 200:	ldr	x0, [sp, #64]
 204:	mov	w1, w0
 208:	mov	w0, #0xffffc011            	// #-16367
 20c:	add	w0, w1, w0
 210:	ldr	x1, [sp, #72]
 214:	lsl	x0, x1, x0
 218:	b	220 <__fixunstfsi+0x220>
 21c:	mov	x0, #0x0                   	// #0
 220:	ldr	x1, [sp, #88]
 224:	orr	x0, x0, x1
 228:	cmp	x0, #0x0
 22c:	cset	w0, ne  // ne = any
 230:	and	w0, w0, #0xff
 234:	str	w0, [sp, #104]
 238:	ldr	x0, [sp, #64]
 23c:	mov	w1, w0
 240:	mov	w0, #0x402f                	// #16431
 244:	sub	w0, w0, w1
 248:	ldr	x1, [sp, #72]
 24c:	lsr	x0, x1, x0
 250:	str	x0, [sp, #88]
 254:	str	xzr, [sp, #72]
 258:	ldr	x0, [sp, #88]
 25c:	str	w0, [sp, #108]
 260:	ldr	w0, [sp, #104]
 264:	cmp	w0, #0x0
 268:	b.eq	278 <__fixunstfsi+0x278>  // b.none
 26c:	ldr	w0, [sp, #100]
 270:	orr	w0, w0, #0x10
 274:	str	w0, [sp, #100]
 278:	ldrsw	x0, [sp, #100]
 27c:	cmp	x0, #0x0
 280:	b.eq	28c <__fixunstfsi+0x28c>  // b.none
 284:	ldr	w0, [sp, #100]
 288:	bl	0 <__sfp_handle_exceptions>
 28c:	ldr	w0, [sp, #108]
 290:	ldp	x29, x30, [sp], #112
 294:	ret

floatsitf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__floatsitf>:
   0:	sub	sp, sp, #0x60
   4:	str	w0, [sp, #12]
   8:	ldr	w0, [sp, #12]
   c:	cmp	w0, #0x0
  10:	b.eq	118 <__floatsitf+0x118>  // b.none
  14:	ldr	w0, [sp, #12]
  18:	str	w0, [sp, #36]
  1c:	ldr	w0, [sp, #12]
  20:	lsr	w0, w0, #31
  24:	and	w0, w0, #0xff
  28:	and	x0, x0, #0xff
  2c:	str	x0, [sp, #40]
  30:	ldr	x0, [sp, #40]
  34:	cmp	x0, #0x0
  38:	b.eq	48 <__floatsitf+0x48>  // b.none
  3c:	ldr	w0, [sp, #36]
  40:	neg	w0, w0
  44:	str	w0, [sp, #36]
  48:	ldr	w0, [sp, #36]
  4c:	clz	x0, x0
  50:	str	w0, [sp, #52]
  54:	mov	w1, #0x403e                	// #16446
  58:	ldr	w0, [sp, #52]
  5c:	sub	w0, w1, w0
  60:	sxtw	x0, w0
  64:	str	x0, [sp, #56]
  68:	ldr	w0, [sp, #36]
  6c:	str	x0, [sp, #64]
  70:	str	xzr, [sp, #72]
  74:	mov	x1, #0x406f                	// #16495
  78:	ldr	x0, [sp, #56]
  7c:	sub	x0, x1, x0
  80:	cmp	x0, #0x0
  84:	b.le	128 <__floatsitf+0x128>
  88:	mov	x1, #0x406f                	// #16495
  8c:	ldr	x0, [sp, #56]
  90:	sub	x0, x1, x0
  94:	cmp	x0, #0x3f
  98:	b.gt	f4 <__floatsitf+0xf4>
  9c:	ldr	x0, [sp, #56]
  a0:	mov	w1, w0
  a4:	mov	w0, #0x406f                	// #16495
  a8:	sub	w0, w0, w1
  ac:	ldr	x1, [sp, #72]
  b0:	lsl	x1, x1, x0
  b4:	ldr	x0, [sp, #56]
  b8:	mov	w2, w0
  bc:	mov	w0, #0xffffbfd1            	// #-16431
  c0:	add	w0, w2, w0
  c4:	ldr	x2, [sp, #64]
  c8:	lsr	x0, x2, x0
  cc:	orr	x0, x1, x0
  d0:	str	x0, [sp, #72]
  d4:	ldr	x0, [sp, #56]
  d8:	mov	w1, w0
  dc:	mov	w0, #0x406f                	// #16495
  e0:	sub	w0, w0, w1
  e4:	ldr	x1, [sp, #64]
  e8:	lsl	x0, x1, x0
  ec:	str	x0, [sp, #64]
  f0:	b	128 <__floatsitf+0x128>
  f4:	ldr	x0, [sp, #56]
  f8:	mov	w1, w0
  fc:	mov	w0, #0x402f                	// #16431
 100:	sub	w0, w0, w1
 104:	ldr	x1, [sp, #64]
 108:	lsl	x0, x1, x0
 10c:	str	x0, [sp, #72]
 110:	str	xzr, [sp, #64]
 114:	b	128 <__floatsitf+0x128>
 118:	str	xzr, [sp, #40]
 11c:	str	xzr, [sp, #56]
 120:	str	xzr, [sp, #64]
 124:	str	xzr, [sp, #72]
 128:	ldr	x0, [sp, #64]
 12c:	str	x0, [sp, #16]
 130:	ldr	x0, [sp, #72]
 134:	and	x1, x0, #0xffffffffffff
 138:	ldr	x0, [sp, #24]
 13c:	bfxil	x0, x1, #0, #48
 140:	str	x0, [sp, #24]
 144:	ldr	x0, [sp, #56]
 148:	and	w0, w0, #0x7fff
 14c:	and	w1, w0, #0xffff
 150:	ldrh	w0, [sp, #30]
 154:	bfxil	w0, w1, #0, #15
 158:	strh	w0, [sp, #30]
 15c:	ldr	x0, [sp, #40]
 160:	and	w0, w0, #0x1
 164:	and	w1, w0, #0xff
 168:	ldrb	w0, [sp, #31]
 16c:	bfi	w0, w1, #7, #1
 170:	strb	w0, [sp, #31]
 174:	ldr	q0, [sp, #16]
 178:	str	q0, [sp, #80]
 17c:	ldr	q0, [sp, #80]
 180:	add	sp, sp, #0x60
 184:	ret

floatunsitf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__floatunsitf>:
   0:	sub	sp, sp, #0x60
   4:	str	w0, [sp, #12]
   8:	ldr	w0, [sp, #12]
   c:	cmp	w0, #0x0
  10:	b.eq	108 <__floatunsitf+0x108>  // b.none
  14:	ldr	w0, [sp, #12]
  18:	str	w0, [sp, #36]
  1c:	str	xzr, [sp, #40]
  20:	ldr	x0, [sp, #40]
  24:	cmp	x0, #0x0
  28:	b.eq	38 <__floatunsitf+0x38>  // b.none
  2c:	ldr	w0, [sp, #36]
  30:	neg	w0, w0
  34:	str	w0, [sp, #36]
  38:	ldr	w0, [sp, #36]
  3c:	clz	x0, x0
  40:	str	w0, [sp, #52]
  44:	mov	w1, #0x403e                	// #16446
  48:	ldr	w0, [sp, #52]
  4c:	sub	w0, w1, w0
  50:	sxtw	x0, w0
  54:	str	x0, [sp, #56]
  58:	ldr	w0, [sp, #36]
  5c:	str	x0, [sp, #64]
  60:	str	xzr, [sp, #72]
  64:	mov	x1, #0x406f                	// #16495
  68:	ldr	x0, [sp, #56]
  6c:	sub	x0, x1, x0
  70:	cmp	x0, #0x0
  74:	b.le	118 <__floatunsitf+0x118>
  78:	mov	x1, #0x406f                	// #16495
  7c:	ldr	x0, [sp, #56]
  80:	sub	x0, x1, x0
  84:	cmp	x0, #0x3f
  88:	b.gt	e4 <__floatunsitf+0xe4>
  8c:	ldr	x0, [sp, #56]
  90:	mov	w1, w0
  94:	mov	w0, #0x406f                	// #16495
  98:	sub	w0, w0, w1
  9c:	ldr	x1, [sp, #72]
  a0:	lsl	x1, x1, x0
  a4:	ldr	x0, [sp, #56]
  a8:	mov	w2, w0
  ac:	mov	w0, #0xffffbfd1            	// #-16431
  b0:	add	w0, w2, w0
  b4:	ldr	x2, [sp, #64]
  b8:	lsr	x0, x2, x0
  bc:	orr	x0, x1, x0
  c0:	str	x0, [sp, #72]
  c4:	ldr	x0, [sp, #56]
  c8:	mov	w1, w0
  cc:	mov	w0, #0x406f                	// #16495
  d0:	sub	w0, w0, w1
  d4:	ldr	x1, [sp, #64]
  d8:	lsl	x0, x1, x0
  dc:	str	x0, [sp, #64]
  e0:	b	118 <__floatunsitf+0x118>
  e4:	ldr	x0, [sp, #56]
  e8:	mov	w1, w0
  ec:	mov	w0, #0x402f                	// #16431
  f0:	sub	w0, w0, w1
  f4:	ldr	x1, [sp, #64]
  f8:	lsl	x0, x1, x0
  fc:	str	x0, [sp, #72]
 100:	str	xzr, [sp, #64]
 104:	b	118 <__floatunsitf+0x118>
 108:	str	xzr, [sp, #40]
 10c:	str	xzr, [sp, #56]
 110:	str	xzr, [sp, #64]
 114:	str	xzr, [sp, #72]
 118:	ldr	x0, [sp, #64]
 11c:	str	x0, [sp, #16]
 120:	ldr	x0, [sp, #72]
 124:	and	x1, x0, #0xffffffffffff
 128:	ldr	x0, [sp, #24]
 12c:	bfxil	x0, x1, #0, #48
 130:	str	x0, [sp, #24]
 134:	ldr	x0, [sp, #56]
 138:	and	w0, w0, #0x7fff
 13c:	and	w1, w0, #0xffff
 140:	ldrh	w0, [sp, #30]
 144:	bfxil	w0, w1, #0, #15
 148:	strh	w0, [sp, #30]
 14c:	ldr	x0, [sp, #40]
 150:	and	w0, w0, #0x1
 154:	and	w1, w0, #0xff
 158:	ldrb	w0, [sp, #31]
 15c:	bfi	w0, w1, #7, #1
 160:	strb	w0, [sp, #31]
 164:	ldr	q0, [sp, #16]
 168:	str	q0, [sp, #80]
 16c:	ldr	q0, [sp, #80]
 170:	add	sp, sp, #0x60
 174:	ret

fixtfdi.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__fixtfdi>:
   0:	stp	x29, x30, [sp, #-128]!
   4:	mov	x29, sp
   8:	str	q0, [sp, #16]
   c:	str	wzr, [sp, #124]
  10:	str	xzr, [sp, #88]
  14:	mrs	x0, fpcr
  18:	str	x0, [sp, #88]
  1c:	ldr	q0, [sp, #16]
  20:	str	q0, [sp, #32]
  24:	ldr	x0, [sp, #32]
  28:	str	x0, [sp, #112]
  2c:	ldr	x0, [sp, #40]
  30:	ubfx	x0, x0, #0, #48
  34:	str	x0, [sp, #80]
  38:	ldrh	w0, [sp, #46]
  3c:	ubfx	x0, x0, #0, #15
  40:	and	w0, w0, #0xffff
  44:	and	x0, x0, #0xffff
  48:	str	x0, [sp, #72]
  4c:	ldrb	w0, [sp, #47]
  50:	ubfx	x0, x0, #7, #1
  54:	and	w0, w0, #0xff
  58:	and	x0, x0, #0xff
  5c:	str	x0, [sp, #64]
  60:	ldr	x1, [sp, #72]
  64:	mov	x0, #0x3ffe                	// #16382
  68:	cmp	x1, x0
  6c:	b.gt	b4 <__fixtfdi+0xb4>
  70:	str	xzr, [sp, #104]
  74:	ldr	x0, [sp, #72]
  78:	cmp	x0, #0x0
  7c:	b.ne	a4 <__fixtfdi+0xa4>  // b.any
  80:	ldr	x1, [sp, #80]
  84:	ldr	x0, [sp, #112]
  88:	orr	x0, x1, x0
  8c:	cmp	x0, #0x0
  90:	b.eq	320 <__fixtfdi+0x320>  // b.none
  94:	ldr	w0, [sp, #124]
  98:	orr	w0, w0, #0x10
  9c:	str	w0, [sp, #124]
  a0:	b	320 <__fixtfdi+0x320>
  a4:	ldr	w0, [sp, #124]
  a8:	orr	w0, w0, #0x10
  ac:	str	w0, [sp, #124]
  b0:	b	320 <__fixtfdi+0x320>
  b4:	ldr	x1, [sp, #72]
  b8:	mov	x0, #0x403d                	// #16445
  bc:	cmp	x1, x0
  c0:	b.le	198 <__fixtfdi+0x198>
  c4:	mov	x0, #0x1                   	// #1
  c8:	str	x0, [sp, #104]
  cc:	ldr	x0, [sp, #104]
  d0:	lsl	x0, x0, #63
  d4:	str	x0, [sp, #104]
  d8:	ldr	x1, [sp, #64]
  dc:	ldr	x0, [sp, #104]
  e0:	add	x0, x1, x0
  e4:	sub	x0, x0, #0x1
  e8:	str	x0, [sp, #104]
  ec:	ldr	x0, [sp, #64]
  f0:	cmp	x0, #0x0
  f4:	b.eq	188 <__fixtfdi+0x188>  // b.none
  f8:	ldr	x1, [sp, #72]
  fc:	mov	x0, #0x403e                	// #16446
 100:	cmp	x1, x0
 104:	b.ne	188 <__fixtfdi+0x188>  // b.any
 108:	str	wzr, [sp, #60]
 10c:	ldr	x0, [sp, #112]
 110:	lsl	x0, x0, #15
 114:	cmp	x0, #0x0
 118:	cset	w0, ne  // ne = any
 11c:	and	w0, w0, #0xff
 120:	str	w0, [sp, #60]
 124:	ldr	x0, [sp, #80]
 128:	lsl	x1, x0, #15
 12c:	ldr	x0, [sp, #112]
 130:	lsr	x0, x0, #49
 134:	orr	x0, x1, x0
 138:	str	x0, [sp, #112]
 13c:	ldr	x0, [sp, #80]
 140:	lsr	x0, x0, #49
 144:	str	x0, [sp, #80]
 148:	ldr	x1, [sp, #80]
 14c:	ldr	x0, [sp, #112]
 150:	orr	x0, x1, x0
 154:	cmp	x0, #0x0
 158:	b.eq	16c <__fixtfdi+0x16c>  // b.none
 15c:	ldr	w0, [sp, #124]
 160:	orr	w0, w0, #0x1
 164:	str	w0, [sp, #124]
 168:	b	31c <__fixtfdi+0x31c>
 16c:	ldr	w0, [sp, #60]
 170:	cmp	w0, #0x0
 174:	b.eq	31c <__fixtfdi+0x31c>  // b.none
 178:	ldr	w0, [sp, #124]
 17c:	orr	w0, w0, #0x10
 180:	str	w0, [sp, #124]
 184:	b	31c <__fixtfdi+0x31c>
 188:	ldr	w0, [sp, #124]
 18c:	orr	w0, w0, #0x1
 190:	str	w0, [sp, #124]
 194:	b	320 <__fixtfdi+0x320>
 198:	str	wzr, [sp, #100]
 19c:	ldr	x0, [sp, #80]
 1a0:	orr	x0, x0, #0x1000000000000
 1a4:	str	x0, [sp, #80]
 1a8:	ldr	x1, [sp, #72]
 1ac:	mov	x0, #0x406e                	// #16494
 1b0:	cmp	x1, x0
 1b4:	b.le	1e0 <__fixtfdi+0x1e0>
 1b8:	ldr	x0, [sp, #112]
 1bc:	str	x0, [sp, #104]
 1c0:	ldr	x0, [sp, #72]
 1c4:	mov	w1, w0
 1c8:	mov	w0, #0xffffbf91            	// #-16495
 1cc:	add	w0, w1, w0
 1d0:	ldr	x1, [sp, #104]
 1d4:	lsl	x0, x1, x0
 1d8:	str	x0, [sp, #104]
 1dc:	b	2e8 <__fixtfdi+0x2e8>
 1e0:	mov	x1, #0x406f                	// #16495
 1e4:	ldr	x0, [sp, #72]
 1e8:	sub	x0, x1, x0
 1ec:	cmp	x0, #0x3f
 1f0:	b.gt	274 <__fixtfdi+0x274>
 1f4:	ldr	x0, [sp, #72]
 1f8:	mov	w1, w0
 1fc:	mov	w0, #0xffffbfd1            	// #-16431
 200:	add	w0, w1, w0
 204:	ldr	x1, [sp, #112]
 208:	lsl	x0, x1, x0
 20c:	cmp	x0, #0x0
 210:	cset	w0, ne  // ne = any
 214:	and	w0, w0, #0xff
 218:	str	w0, [sp, #100]
 21c:	ldr	x0, [sp, #72]
 220:	mov	w1, w0
 224:	mov	w0, #0xffffbfd1            	// #-16431
 228:	add	w0, w1, w0
 22c:	ldr	x1, [sp, #80]
 230:	lsl	x1, x1, x0
 234:	ldr	x0, [sp, #72]
 238:	mov	w2, w0
 23c:	mov	w0, #0x406f                	// #16495
 240:	sub	w0, w0, w2
 244:	ldr	x2, [sp, #112]
 248:	lsr	x0, x2, x0
 24c:	orr	x0, x1, x0
 250:	str	x0, [sp, #112]
 254:	ldr	x0, [sp, #72]
 258:	mov	w1, w0
 25c:	mov	w0, #0x406f                	// #16495
 260:	sub	w0, w0, w1
 264:	ldr	x1, [sp, #80]
 268:	lsr	x0, x1, x0
 26c:	str	x0, [sp, #80]
 270:	b	2e0 <__fixtfdi+0x2e0>
 274:	mov	x1, #0x406f                	// #16495
 278:	ldr	x0, [sp, #72]
 27c:	sub	x0, x1, x0
 280:	cmp	x0, #0x40
 284:	b.eq	2a4 <__fixtfdi+0x2a4>  // b.none
 288:	ldr	x0, [sp, #72]
 28c:	mov	w1, w0
 290:	mov	w0, #0xffffc011            	// #-16367
 294:	add	w0, w1, w0
 298:	ldr	x1, [sp, #80]
 29c:	lsl	x0, x1, x0
 2a0:	b	2a8 <__fixtfdi+0x2a8>
 2a4:	mov	x0, #0x0                   	// #0
 2a8:	ldr	x1, [sp, #112]
 2ac:	orr	x0, x0, x1
 2b0:	cmp	x0, #0x0
 2b4:	cset	w0, ne  // ne = any
 2b8:	and	w0, w0, #0xff
 2bc:	str	w0, [sp, #100]
 2c0:	ldr	x0, [sp, #72]
 2c4:	mov	w1, w0
 2c8:	mov	w0, #0x402f                	// #16431
 2cc:	sub	w0, w0, w1
 2d0:	ldr	x1, [sp, #80]
 2d4:	lsr	x0, x1, x0
 2d8:	str	x0, [sp, #112]
 2dc:	str	xzr, [sp, #80]
 2e0:	ldr	x0, [sp, #112]
 2e4:	str	x0, [sp, #104]
 2e8:	ldr	x0, [sp, #64]
 2ec:	cmp	x0, #0x0
 2f0:	b.eq	300 <__fixtfdi+0x300>  // b.none
 2f4:	ldr	x0, [sp, #104]
 2f8:	neg	x0, x0
 2fc:	str	x0, [sp, #104]
 300:	ldr	w0, [sp, #100]
 304:	cmp	w0, #0x0
 308:	b.eq	320 <__fixtfdi+0x320>  // b.none
 30c:	ldr	w0, [sp, #124]
 310:	orr	w0, w0, #0x10
 314:	str	w0, [sp, #124]
 318:	b	320 <__fixtfdi+0x320>
 31c:	nop
 320:	ldrsw	x0, [sp, #124]
 324:	cmp	x0, #0x0
 328:	b.eq	334 <__fixtfdi+0x334>  // b.none
 32c:	ldr	w0, [sp, #124]
 330:	bl	0 <__sfp_handle_exceptions>
 334:	ldr	x0, [sp, #104]
 338:	ldp	x29, x30, [sp], #128
 33c:	ret

fixunstfdi.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__fixunstfdi>:
   0:	stp	x29, x30, [sp, #-112]!
   4:	mov	x29, sp
   8:	str	q0, [sp, #16]
   c:	str	wzr, [sp, #104]
  10:	str	xzr, [sp, #80]
  14:	mrs	x0, fpcr
  18:	str	x0, [sp, #80]
  1c:	ldr	q0, [sp, #16]
  20:	str	q0, [sp, #32]
  24:	ldr	x0, [sp, #32]
  28:	str	x0, [sp, #96]
  2c:	ldr	x0, [sp, #40]
  30:	ubfx	x0, x0, #0, #48
  34:	str	x0, [sp, #72]
  38:	ldrh	w0, [sp, #46]
  3c:	ubfx	x0, x0, #0, #15
  40:	and	w0, w0, #0xffff
  44:	and	x0, x0, #0xffff
  48:	str	x0, [sp, #64]
  4c:	ldrb	w0, [sp, #47]
  50:	ubfx	x0, x0, #7, #1
  54:	and	w0, w0, #0xff
  58:	and	x0, x0, #0xff
  5c:	str	x0, [sp, #56]
  60:	ldr	x1, [sp, #64]
  64:	mov	x0, #0x3ffe                	// #16382
  68:	cmp	x1, x0
  6c:	b.gt	b4 <__fixunstfdi+0xb4>
  70:	str	xzr, [sp, #88]
  74:	ldr	x0, [sp, #64]
  78:	cmp	x0, #0x0
  7c:	b.ne	a4 <__fixunstfdi+0xa4>  // b.any
  80:	ldr	x1, [sp, #72]
  84:	ldr	x0, [sp, #96]
  88:	orr	x0, x1, x0
  8c:	cmp	x0, #0x0
  90:	b.eq	278 <__fixunstfdi+0x278>  // b.none
  94:	ldr	w0, [sp, #104]
  98:	orr	w0, w0, #0x10
  9c:	str	w0, [sp, #104]
  a0:	b	278 <__fixunstfdi+0x278>
  a4:	ldr	w0, [sp, #104]
  a8:	orr	w0, w0, #0x10
  ac:	str	w0, [sp, #104]
  b0:	b	278 <__fixunstfdi+0x278>
  b4:	ldr	x0, [sp, #56]
  b8:	cmp	x0, #0x0
  bc:	b.eq	c8 <__fixunstfdi+0xc8>  // b.none
  c0:	mov	x0, #0x403e                	// #16446
  c4:	b	cc <__fixunstfdi+0xcc>
  c8:	mov	x0, #0x403f                	// #16447
  cc:	ldr	x1, [sp, #64]
  d0:	cmp	x0, x1
  d4:	b.le	e4 <__fixunstfdi+0xe4>
  d8:	ldr	x0, [sp, #56]
  dc:	cmp	x0, #0x0
  e0:	b.eq	110 <__fixunstfdi+0x110>  // b.none
  e4:	str	xzr, [sp, #88]
  e8:	ldr	x0, [sp, #56]
  ec:	cmp	x0, #0x0
  f0:	b.ne	100 <__fixunstfdi+0x100>  // b.any
  f4:	ldr	x0, [sp, #88]
  f8:	mvn	x0, x0
  fc:	str	x0, [sp, #88]
 100:	ldr	w0, [sp, #104]
 104:	orr	w0, w0, #0x1
 108:	str	w0, [sp, #104]
 10c:	b	278 <__fixunstfdi+0x278>
 110:	str	wzr, [sp, #108]
 114:	ldr	x0, [sp, #72]
 118:	orr	x0, x0, #0x1000000000000
 11c:	str	x0, [sp, #72]
 120:	ldr	x1, [sp, #64]
 124:	mov	x0, #0x406e                	// #16494
 128:	cmp	x1, x0
 12c:	b.le	158 <__fixunstfdi+0x158>
 130:	ldr	x0, [sp, #96]
 134:	str	x0, [sp, #88]
 138:	ldr	x0, [sp, #64]
 13c:	mov	w1, w0
 140:	mov	w0, #0xffffbf91            	// #-16495
 144:	add	w0, w1, w0
 148:	ldr	x1, [sp, #88]
 14c:	lsl	x0, x1, x0
 150:	str	x0, [sp, #88]
 154:	b	260 <__fixunstfdi+0x260>
 158:	mov	x1, #0x406f                	// #16495
 15c:	ldr	x0, [sp, #64]
 160:	sub	x0, x1, x0
 164:	cmp	x0, #0x3f
 168:	b.gt	1ec <__fixunstfdi+0x1ec>
 16c:	ldr	x0, [sp, #64]
 170:	mov	w1, w0
 174:	mov	w0, #0xffffbfd1            	// #-16431
 178:	add	w0, w1, w0
 17c:	ldr	x1, [sp, #96]
 180:	lsl	x0, x1, x0
 184:	cmp	x0, #0x0
 188:	cset	w0, ne  // ne = any
 18c:	and	w0, w0, #0xff
 190:	str	w0, [sp, #108]
 194:	ldr	x0, [sp, #64]
 198:	mov	w1, w0
 19c:	mov	w0, #0xffffbfd1            	// #-16431
 1a0:	add	w0, w1, w0
 1a4:	ldr	x1, [sp, #72]
 1a8:	lsl	x1, x1, x0
 1ac:	ldr	x0, [sp, #64]
 1b0:	mov	w2, w0
 1b4:	mov	w0, #0x406f                	// #16495
 1b8:	sub	w0, w0, w2
 1bc:	ldr	x2, [sp, #96]
 1c0:	lsr	x0, x2, x0
 1c4:	orr	x0, x1, x0
 1c8:	str	x0, [sp, #96]
 1cc:	ldr	x0, [sp, #64]
 1d0:	mov	w1, w0
 1d4:	mov	w0, #0x406f                	// #16495
 1d8:	sub	w0, w0, w1
 1dc:	ldr	x1, [sp, #72]
 1e0:	lsr	x0, x1, x0
 1e4:	str	x0, [sp, #72]
 1e8:	b	258 <__fixunstfdi+0x258>
 1ec:	mov	x1, #0x406f                	// #16495
 1f0:	ldr	x0, [sp, #64]
 1f4:	sub	x0, x1, x0
 1f8:	cmp	x0, #0x40
 1fc:	b.eq	21c <__fixunstfdi+0x21c>  // b.none
 200:	ldr	x0, [sp, #64]
 204:	mov	w1, w0
 208:	mov	w0, #0xffffc011            	// #-16367
 20c:	add	w0, w1, w0
 210:	ldr	x1, [sp, #72]
 214:	lsl	x0, x1, x0
 218:	b	220 <__fixunstfdi+0x220>
 21c:	mov	x0, #0x0                   	// #0
 220:	ldr	x1, [sp, #96]
 224:	orr	x0, x0, x1
 228:	cmp	x0, #0x0
 22c:	cset	w0, ne  // ne = any
 230:	and	w0, w0, #0xff
 234:	str	w0, [sp, #108]
 238:	ldr	x0, [sp, #64]
 23c:	mov	w1, w0
 240:	mov	w0, #0x402f                	// #16431
 244:	sub	w0, w0, w1
 248:	ldr	x1, [sp, #72]
 24c:	lsr	x0, x1, x0
 250:	str	x0, [sp, #96]
 254:	str	xzr, [sp, #72]
 258:	ldr	x0, [sp, #96]
 25c:	str	x0, [sp, #88]
 260:	ldr	w0, [sp, #108]
 264:	cmp	w0, #0x0
 268:	b.eq	278 <__fixunstfdi+0x278>  // b.none
 26c:	ldr	w0, [sp, #104]
 270:	orr	w0, w0, #0x10
 274:	str	w0, [sp, #104]
 278:	ldrsw	x0, [sp, #104]
 27c:	cmp	x0, #0x0
 280:	b.eq	28c <__fixunstfdi+0x28c>  // b.none
 284:	ldr	w0, [sp, #104]
 288:	bl	0 <__sfp_handle_exceptions>
 28c:	ldr	x0, [sp, #88]
 290:	ldp	x29, x30, [sp], #112
 294:	ret

floatditf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__floatditf>:
   0:	sub	sp, sp, #0x60
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	cmp	x0, #0x0
  10:	b.eq	118 <__floatditf+0x118>  // b.none
  14:	ldr	x0, [sp, #8]
  18:	str	x0, [sp, #32]
  1c:	ldr	x0, [sp, #8]
  20:	lsr	x0, x0, #63
  24:	and	w0, w0, #0xff
  28:	and	x0, x0, #0xff
  2c:	str	x0, [sp, #40]
  30:	ldr	x0, [sp, #40]
  34:	cmp	x0, #0x0
  38:	b.eq	48 <__floatditf+0x48>  // b.none
  3c:	ldr	x0, [sp, #32]
  40:	neg	x0, x0
  44:	str	x0, [sp, #32]
  48:	ldr	x0, [sp, #32]
  4c:	clz	x0, x0
  50:	str	w0, [sp, #52]
  54:	mov	w1, #0x403e                	// #16446
  58:	ldr	w0, [sp, #52]
  5c:	sub	w0, w1, w0
  60:	sxtw	x0, w0
  64:	str	x0, [sp, #56]
  68:	ldr	x0, [sp, #32]
  6c:	str	x0, [sp, #64]
  70:	str	xzr, [sp, #72]
  74:	mov	x1, #0x406f                	// #16495
  78:	ldr	x0, [sp, #56]
  7c:	sub	x0, x1, x0
  80:	cmp	x0, #0x0
  84:	b.le	128 <__floatditf+0x128>
  88:	mov	x1, #0x406f                	// #16495
  8c:	ldr	x0, [sp, #56]
  90:	sub	x0, x1, x0
  94:	cmp	x0, #0x3f
  98:	b.gt	f4 <__floatditf+0xf4>
  9c:	ldr	x0, [sp, #56]
  a0:	mov	w1, w0
  a4:	mov	w0, #0x406f                	// #16495
  a8:	sub	w0, w0, w1
  ac:	ldr	x1, [sp, #72]
  b0:	lsl	x1, x1, x0
  b4:	ldr	x0, [sp, #56]
  b8:	mov	w2, w0
  bc:	mov	w0, #0xffffbfd1            	// #-16431
  c0:	add	w0, w2, w0
  c4:	ldr	x2, [sp, #64]
  c8:	lsr	x0, x2, x0
  cc:	orr	x0, x1, x0
  d0:	str	x0, [sp, #72]
  d4:	ldr	x0, [sp, #56]
  d8:	mov	w1, w0
  dc:	mov	w0, #0x406f                	// #16495
  e0:	sub	w0, w0, w1
  e4:	ldr	x1, [sp, #64]
  e8:	lsl	x0, x1, x0
  ec:	str	x0, [sp, #64]
  f0:	b	128 <__floatditf+0x128>
  f4:	ldr	x0, [sp, #56]
  f8:	mov	w1, w0
  fc:	mov	w0, #0x402f                	// #16431
 100:	sub	w0, w0, w1
 104:	ldr	x1, [sp, #64]
 108:	lsl	x0, x1, x0
 10c:	str	x0, [sp, #72]
 110:	str	xzr, [sp, #64]
 114:	b	128 <__floatditf+0x128>
 118:	str	xzr, [sp, #40]
 11c:	str	xzr, [sp, #56]
 120:	str	xzr, [sp, #64]
 124:	str	xzr, [sp, #72]
 128:	ldr	x0, [sp, #64]
 12c:	str	x0, [sp, #16]
 130:	ldr	x0, [sp, #72]
 134:	and	x1, x0, #0xffffffffffff
 138:	ldr	x0, [sp, #24]
 13c:	bfxil	x0, x1, #0, #48
 140:	str	x0, [sp, #24]
 144:	ldr	x0, [sp, #56]
 148:	and	w0, w0, #0x7fff
 14c:	and	w1, w0, #0xffff
 150:	ldrh	w0, [sp, #30]
 154:	bfxil	w0, w1, #0, #15
 158:	strh	w0, [sp, #30]
 15c:	ldr	x0, [sp, #40]
 160:	and	w0, w0, #0x1
 164:	and	w1, w0, #0xff
 168:	ldrb	w0, [sp, #31]
 16c:	bfi	w0, w1, #7, #1
 170:	strb	w0, [sp, #31]
 174:	ldr	q0, [sp, #16]
 178:	str	q0, [sp, #80]
 17c:	ldr	q0, [sp, #80]
 180:	add	sp, sp, #0x60
 184:	ret

floatunditf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__floatunditf>:
   0:	sub	sp, sp, #0x60
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	cmp	x0, #0x0
  10:	b.eq	108 <__floatunditf+0x108>  // b.none
  14:	ldr	x0, [sp, #8]
  18:	str	x0, [sp, #32]
  1c:	str	xzr, [sp, #40]
  20:	ldr	x0, [sp, #40]
  24:	cmp	x0, #0x0
  28:	b.eq	38 <__floatunditf+0x38>  // b.none
  2c:	ldr	x0, [sp, #32]
  30:	neg	x0, x0
  34:	str	x0, [sp, #32]
  38:	ldr	x0, [sp, #32]
  3c:	clz	x0, x0
  40:	str	w0, [sp, #52]
  44:	mov	w1, #0x403e                	// #16446
  48:	ldr	w0, [sp, #52]
  4c:	sub	w0, w1, w0
  50:	sxtw	x0, w0
  54:	str	x0, [sp, #56]
  58:	ldr	x0, [sp, #32]
  5c:	str	x0, [sp, #64]
  60:	str	xzr, [sp, #72]
  64:	mov	x1, #0x406f                	// #16495
  68:	ldr	x0, [sp, #56]
  6c:	sub	x0, x1, x0
  70:	cmp	x0, #0x0
  74:	b.le	118 <__floatunditf+0x118>
  78:	mov	x1, #0x406f                	// #16495
  7c:	ldr	x0, [sp, #56]
  80:	sub	x0, x1, x0
  84:	cmp	x0, #0x3f
  88:	b.gt	e4 <__floatunditf+0xe4>
  8c:	ldr	x0, [sp, #56]
  90:	mov	w1, w0
  94:	mov	w0, #0x406f                	// #16495
  98:	sub	w0, w0, w1
  9c:	ldr	x1, [sp, #72]
  a0:	lsl	x1, x1, x0
  a4:	ldr	x0, [sp, #56]
  a8:	mov	w2, w0
  ac:	mov	w0, #0xffffbfd1            	// #-16431
  b0:	add	w0, w2, w0
  b4:	ldr	x2, [sp, #64]
  b8:	lsr	x0, x2, x0
  bc:	orr	x0, x1, x0
  c0:	str	x0, [sp, #72]
  c4:	ldr	x0, [sp, #56]
  c8:	mov	w1, w0
  cc:	mov	w0, #0x406f                	// #16495
  d0:	sub	w0, w0, w1
  d4:	ldr	x1, [sp, #64]
  d8:	lsl	x0, x1, x0
  dc:	str	x0, [sp, #64]
  e0:	b	118 <__floatunditf+0x118>
  e4:	ldr	x0, [sp, #56]
  e8:	mov	w1, w0
  ec:	mov	w0, #0x402f                	// #16431
  f0:	sub	w0, w0, w1
  f4:	ldr	x1, [sp, #64]
  f8:	lsl	x0, x1, x0
  fc:	str	x0, [sp, #72]
 100:	str	xzr, [sp, #64]
 104:	b	118 <__floatunditf+0x118>
 108:	str	xzr, [sp, #40]
 10c:	str	xzr, [sp, #56]
 110:	str	xzr, [sp, #64]
 114:	str	xzr, [sp, #72]
 118:	ldr	x0, [sp, #64]
 11c:	str	x0, [sp, #16]
 120:	ldr	x0, [sp, #72]
 124:	and	x1, x0, #0xffffffffffff
 128:	ldr	x0, [sp, #24]
 12c:	bfxil	x0, x1, #0, #48
 130:	str	x0, [sp, #24]
 134:	ldr	x0, [sp, #56]
 138:	and	w0, w0, #0x7fff
 13c:	and	w1, w0, #0xffff
 140:	ldrh	w0, [sp, #30]
 144:	bfxil	w0, w1, #0, #15
 148:	strh	w0, [sp, #30]
 14c:	ldr	x0, [sp, #40]
 150:	and	w0, w0, #0x1
 154:	and	w1, w0, #0xff
 158:	ldrb	w0, [sp, #31]
 15c:	bfi	w0, w1, #7, #1
 160:	strb	w0, [sp, #31]
 164:	ldr	q0, [sp, #16]
 168:	str	q0, [sp, #80]
 16c:	ldr	q0, [sp, #80]
 170:	add	sp, sp, #0x60
 174:	ret

fixtfti.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__fixtfti>:
   0:	stp	x29, x30, [sp, #-144]!
   4:	mov	x29, sp
   8:	str	q0, [sp, #16]
   c:	str	wzr, [sp, #140]
  10:	str	xzr, [sp, #80]
  14:	mrs	x0, fpcr
  18:	str	x0, [sp, #80]
  1c:	ldr	q0, [sp, #16]
  20:	str	q0, [sp, #32]
  24:	ldr	x0, [sp, #32]
  28:	str	x0, [sp, #128]
  2c:	ldr	x0, [sp, #40]
  30:	ubfx	x0, x0, #0, #48
  34:	str	x0, [sp, #120]
  38:	ldrh	w0, [sp, #46]
  3c:	ubfx	x0, x0, #0, #15
  40:	and	w0, w0, #0xffff
  44:	and	x0, x0, #0xffff
  48:	str	x0, [sp, #72]
  4c:	ldrb	w0, [sp, #47]
  50:	ubfx	x0, x0, #7, #1
  54:	and	w0, w0, #0xff
  58:	and	x0, x0, #0xff
  5c:	str	x0, [sp, #64]
  60:	ldr	x1, [sp, #72]
  64:	mov	x0, #0x3ffe                	// #16382
  68:	cmp	x1, x0
  6c:	b.gt	b4 <__fixtfti+0xb4>
  70:	stp	xzr, xzr, [sp, #96]
  74:	ldr	x0, [sp, #72]
  78:	cmp	x0, #0x0
  7c:	b.ne	a4 <__fixtfti+0xa4>  // b.any
  80:	ldr	x1, [sp, #120]
  84:	ldr	x0, [sp, #128]
  88:	orr	x0, x1, x0
  8c:	cmp	x0, #0x0
  90:	b.eq	3e0 <__fixtfti+0x3e0>  // b.none
  94:	ldr	w0, [sp, #140]
  98:	orr	w0, w0, #0x10
  9c:	str	w0, [sp, #140]
  a0:	b	3e0 <__fixtfti+0x3e0>
  a4:	ldr	w0, [sp, #140]
  a8:	orr	w0, w0, #0x10
  ac:	str	w0, [sp, #140]
  b0:	b	3e0 <__fixtfti+0x3e0>
  b4:	ldr	x1, [sp, #72]
  b8:	mov	x0, #0x407d                	// #16509
  bc:	cmp	x1, x0
  c0:	b.le	180 <__fixtfti+0x180>
  c4:	mov	x0, #0x1                   	// #1
  c8:	mov	x1, #0x0                   	// #0
  cc:	stp	x0, x1, [sp, #96]
  d0:	ldr	x0, [sp, #96]
  d4:	lsl	x0, x0, #63
  d8:	str	x0, [sp, #104]
  dc:	str	xzr, [sp, #96]
  e0:	mov	x1, #0x1                   	// #1
  e4:	ldr	x0, [sp, #64]
  e8:	sub	x0, x1, x0
  ec:	mov	x2, x0
  f0:	asr	x0, x0, #63
  f4:	mov	x3, x0
  f8:	ldp	x0, x1, [sp, #96]
  fc:	subs	x4, x0, x2
 100:	sbc	x0, x1, x3
 104:	mov	x14, x4
 108:	mov	x15, x0
 10c:	stp	x14, x15, [sp, #96]
 110:	ldr	x0, [sp, #64]
 114:	cmp	x0, #0x0
 118:	b.eq	170 <__fixtfti+0x170>  // b.none
 11c:	ldr	x1, [sp, #72]
 120:	mov	x0, #0x407e                	// #16510
 124:	cmp	x1, x0
 128:	b.ne	170 <__fixtfti+0x170>  // b.any
 12c:	str	wzr, [sp, #60]
 130:	ldr	x1, [sp, #120]
 134:	ldr	x0, [sp, #128]
 138:	orr	x0, x1, x0
 13c:	cmp	x0, #0x0
 140:	b.eq	154 <__fixtfti+0x154>  // b.none
 144:	ldr	w0, [sp, #140]
 148:	orr	w0, w0, #0x1
 14c:	str	w0, [sp, #140]
 150:	b	3dc <__fixtfti+0x3dc>
 154:	ldr	w0, [sp, #60]
 158:	cmp	w0, #0x0
 15c:	b.eq	3dc <__fixtfti+0x3dc>  // b.none
 160:	ldr	w0, [sp, #140]
 164:	orr	w0, w0, #0x10
 168:	str	w0, [sp, #140]
 16c:	b	3dc <__fixtfti+0x3dc>
 170:	ldr	w0, [sp, #140]
 174:	orr	w0, w0, #0x1
 178:	str	w0, [sp, #140]
 17c:	b	3e0 <__fixtfti+0x3e0>
 180:	str	wzr, [sp, #92]
 184:	ldr	x0, [sp, #120]
 188:	orr	x0, x0, #0x1000000000000
 18c:	str	x0, [sp, #120]
 190:	ldr	x1, [sp, #72]
 194:	mov	x0, #0x406e                	// #16494
 198:	cmp	x1, x0
 19c:	b.le	258 <__fixtfti+0x258>
 1a0:	ldr	x0, [sp, #120]
 1a4:	str	x0, [sp, #96]
 1a8:	str	xzr, [sp, #104]
 1ac:	ldr	x0, [sp, #96]
 1b0:	str	x0, [sp, #104]
 1b4:	str	xzr, [sp, #96]
 1b8:	ldr	x0, [sp, #128]
 1bc:	mov	x12, x0
 1c0:	mov	x13, #0x0                   	// #0
 1c4:	ldp	x0, x1, [sp, #96]
 1c8:	mov	x2, x12
 1cc:	adds	x2, x0, x2
 1d0:	mov	x3, x13
 1d4:	adc	x0, x1, x3
 1d8:	mov	x10, x2
 1dc:	mov	x11, x0
 1e0:	stp	x10, x11, [sp, #96]
 1e4:	ldr	x0, [sp, #72]
 1e8:	mov	w1, w0
 1ec:	mov	w0, #0xffffbf91            	// #-16495
 1f0:	add	w0, w1, w0
 1f4:	sub	w1, w0, #0x40
 1f8:	ldr	x2, [sp, #96]
 1fc:	lsl	x2, x2, x1
 200:	mov	x7, #0x0                   	// #0
 204:	ldr	x3, [sp, #96]
 208:	lsr	x6, x3, #1
 20c:	mov	w3, #0x3f                  	// #63
 210:	sub	w3, w3, w0
 214:	lsr	x3, x6, x3
 218:	ldr	x6, [sp, #104]
 21c:	lsl	x6, x6, x0
 220:	orr	x3, x6, x3
 224:	str	x3, [sp, #104]
 228:	ldr	x3, [sp, #96]
 22c:	lsl	x0, x3, x0
 230:	str	x0, [sp, #96]
 234:	ldr	x0, [sp, #104]
 238:	cmp	w1, #0x0
 23c:	csel	x0, x0, x2, lt  // lt = tstop
 240:	str	x0, [sp, #104]
 244:	ldr	x0, [sp, #96]
 248:	cmp	w1, #0x0
 24c:	csel	x0, x0, x7, lt  // lt = tstop
 250:	str	x0, [sp, #96]
 254:	b	39c <__fixtfti+0x39c>
 258:	mov	x1, #0x406f                	// #16495
 25c:	ldr	x0, [sp, #72]
 260:	sub	x0, x1, x0
 264:	cmp	x0, #0x3f
 268:	b.gt	2ec <__fixtfti+0x2ec>
 26c:	ldr	x0, [sp, #72]
 270:	mov	w1, w0
 274:	mov	w0, #0xffffbfd1            	// #-16431
 278:	add	w0, w1, w0
 27c:	ldr	x1, [sp, #128]
 280:	lsl	x0, x1, x0
 284:	cmp	x0, #0x0
 288:	cset	w0, ne  // ne = any
 28c:	and	w0, w0, #0xff
 290:	str	w0, [sp, #92]
 294:	ldr	x0, [sp, #72]
 298:	mov	w1, w0
 29c:	mov	w0, #0xffffbfd1            	// #-16431
 2a0:	add	w0, w1, w0
 2a4:	ldr	x1, [sp, #120]
 2a8:	lsl	x1, x1, x0
 2ac:	ldr	x0, [sp, #72]
 2b0:	mov	w2, w0
 2b4:	mov	w0, #0x406f                	// #16495
 2b8:	sub	w0, w0, w2
 2bc:	ldr	x2, [sp, #128]
 2c0:	lsr	x0, x2, x0
 2c4:	orr	x0, x1, x0
 2c8:	str	x0, [sp, #128]
 2cc:	ldr	x0, [sp, #72]
 2d0:	mov	w1, w0
 2d4:	mov	w0, #0x406f                	// #16495
 2d8:	sub	w0, w0, w1
 2dc:	ldr	x1, [sp, #120]
 2e0:	lsr	x0, x1, x0
 2e4:	str	x0, [sp, #120]
 2e8:	b	358 <__fixtfti+0x358>
 2ec:	mov	x1, #0x406f                	// #16495
 2f0:	ldr	x0, [sp, #72]
 2f4:	sub	x0, x1, x0
 2f8:	cmp	x0, #0x40
 2fc:	b.eq	31c <__fixtfti+0x31c>  // b.none
 300:	ldr	x0, [sp, #72]
 304:	mov	w1, w0
 308:	mov	w0, #0xffffc011            	// #-16367
 30c:	add	w0, w1, w0
 310:	ldr	x1, [sp, #120]
 314:	lsl	x0, x1, x0
 318:	b	320 <__fixtfti+0x320>
 31c:	mov	x0, #0x0                   	// #0
 320:	ldr	x1, [sp, #128]
 324:	orr	x0, x0, x1
 328:	cmp	x0, #0x0
 32c:	cset	w0, ne  // ne = any
 330:	and	w0, w0, #0xff
 334:	str	w0, [sp, #92]
 338:	ldr	x0, [sp, #72]
 33c:	mov	w1, w0
 340:	mov	w0, #0x402f                	// #16431
 344:	sub	w0, w0, w1
 348:	ldr	x1, [sp, #120]
 34c:	lsr	x0, x1, x0
 350:	str	x0, [sp, #128]
 354:	str	xzr, [sp, #120]
 358:	ldr	x0, [sp, #120]
 35c:	str	x0, [sp, #96]
 360:	str	xzr, [sp, #104]
 364:	ldr	x0, [sp, #96]
 368:	str	x0, [sp, #104]
 36c:	str	xzr, [sp, #96]
 370:	ldr	x0, [sp, #128]
 374:	mov	x8, x0
 378:	mov	x9, #0x0                   	// #0
 37c:	ldp	x0, x1, [sp, #96]
 380:	mov	x2, x8
 384:	adds	x2, x0, x2
 388:	mov	x3, x9
 38c:	adc	x0, x1, x3
 390:	mov	x6, x2
 394:	mov	x7, x0
 398:	stp	x6, x7, [sp, #96]
 39c:	ldr	x0, [sp, #64]
 3a0:	cmp	x0, #0x0
 3a4:	b.eq	3c0 <__fixtfti+0x3c0>  // b.none
 3a8:	ldp	x0, x1, [sp, #96]
 3ac:	negs	x2, x0
 3b0:	ngc	x0, x1
 3b4:	mov	x4, x2
 3b8:	mov	x5, x0
 3bc:	stp	x4, x5, [sp, #96]
 3c0:	ldr	w0, [sp, #92]
 3c4:	cmp	w0, #0x0
 3c8:	b.eq	3e0 <__fixtfti+0x3e0>  // b.none
 3cc:	ldr	w0, [sp, #140]
 3d0:	orr	w0, w0, #0x10
 3d4:	str	w0, [sp, #140]
 3d8:	b	3e0 <__fixtfti+0x3e0>
 3dc:	nop
 3e0:	ldrsw	x0, [sp, #140]
 3e4:	cmp	x0, #0x0
 3e8:	b.eq	3f4 <__fixtfti+0x3f4>  // b.none
 3ec:	ldr	w0, [sp, #140]
 3f0:	bl	0 <__sfp_handle_exceptions>
 3f4:	ldp	x0, x1, [sp, #96]
 3f8:	ldp	x29, x30, [sp], #144
 3fc:	ret

fixunstfti.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__fixunstfti>:
   0:	stp	x29, x30, [sp, #-128]!
   4:	mov	x29, sp
   8:	str	q0, [sp, #16]
   c:	str	wzr, [sp, #108]
  10:	str	xzr, [sp, #64]
  14:	mrs	x0, fpcr
  18:	str	x0, [sp, #64]
  1c:	ldr	q0, [sp, #16]
  20:	str	q0, [sp, #32]
  24:	ldr	x0, [sp, #32]
  28:	str	x0, [sp, #120]
  2c:	ldr	x0, [sp, #40]
  30:	ubfx	x0, x0, #0, #48
  34:	str	x0, [sp, #112]
  38:	ldrh	w0, [sp, #46]
  3c:	ubfx	x0, x0, #0, #15
  40:	and	w0, w0, #0xffff
  44:	and	x0, x0, #0xffff
  48:	str	x0, [sp, #56]
  4c:	ldrb	w0, [sp, #47]
  50:	ubfx	x0, x0, #7, #1
  54:	and	w0, w0, #0xff
  58:	and	x0, x0, #0xff
  5c:	str	x0, [sp, #48]
  60:	ldr	x1, [sp, #56]
  64:	mov	x0, #0x3ffe                	// #16382
  68:	cmp	x1, x0
  6c:	b.gt	b4 <__fixunstfti+0xb4>
  70:	stp	xzr, xzr, [sp, #80]
  74:	ldr	x0, [sp, #56]
  78:	cmp	x0, #0x0
  7c:	b.ne	a4 <__fixunstfti+0xa4>  // b.any
  80:	ldr	x1, [sp, #112]
  84:	ldr	x0, [sp, #120]
  88:	orr	x0, x1, x0
  8c:	cmp	x0, #0x0
  90:	b.eq	350 <__fixunstfti+0x350>  // b.none
  94:	ldr	w0, [sp, #108]
  98:	orr	w0, w0, #0x10
  9c:	str	w0, [sp, #108]
  a0:	b	350 <__fixunstfti+0x350>
  a4:	ldr	w0, [sp, #108]
  a8:	orr	w0, w0, #0x10
  ac:	str	w0, [sp, #108]
  b0:	b	350 <__fixunstfti+0x350>
  b4:	ldr	x0, [sp, #48]
  b8:	cmp	x0, #0x0
  bc:	b.eq	c8 <__fixunstfti+0xc8>  // b.none
  c0:	mov	x0, #0x407e                	// #16510
  c4:	b	cc <__fixunstfti+0xcc>
  c8:	mov	x0, #0x407f                	// #16511
  cc:	ldr	x1, [sp, #56]
  d0:	cmp	x0, x1
  d4:	b.le	e4 <__fixunstfti+0xe4>
  d8:	ldr	x0, [sp, #48]
  dc:	cmp	x0, #0x0
  e0:	b.eq	11c <__fixunstfti+0x11c>  // b.none
  e4:	stp	xzr, xzr, [sp, #80]
  e8:	ldr	x0, [sp, #48]
  ec:	cmp	x0, #0x0
  f0:	b.ne	10c <__fixunstfti+0x10c>  // b.any
  f4:	ldr	x0, [sp, #80]
  f8:	mvn	x0, x0
  fc:	str	x0, [sp, #80]
 100:	ldr	x0, [sp, #88]
 104:	mvn	x0, x0
 108:	str	x0, [sp, #88]
 10c:	ldr	w0, [sp, #108]
 110:	orr	w0, w0, #0x1
 114:	str	w0, [sp, #108]
 118:	b	350 <__fixunstfti+0x350>
 11c:	str	wzr, [sp, #76]
 120:	ldr	x0, [sp, #112]
 124:	orr	x0, x0, #0x1000000000000
 128:	str	x0, [sp, #112]
 12c:	ldr	x1, [sp, #56]
 130:	mov	x0, #0x406e                	// #16494
 134:	cmp	x1, x0
 138:	b.le	1f4 <__fixunstfti+0x1f4>
 13c:	ldr	x0, [sp, #112]
 140:	str	x0, [sp, #80]
 144:	str	xzr, [sp, #88]
 148:	ldr	x0, [sp, #80]
 14c:	str	x0, [sp, #88]
 150:	str	xzr, [sp, #80]
 154:	ldr	x0, [sp, #120]
 158:	mov	x8, x0
 15c:	mov	x9, #0x0                   	// #0
 160:	ldp	x0, x1, [sp, #80]
 164:	mov	x2, x8
 168:	adds	x2, x0, x2
 16c:	mov	x3, x9
 170:	adc	x0, x1, x3
 174:	mov	x6, x2
 178:	mov	x7, x0
 17c:	stp	x6, x7, [sp, #80]
 180:	ldr	x0, [sp, #56]
 184:	mov	w1, w0
 188:	mov	w0, #0xffffbf91            	// #-16495
 18c:	add	w0, w1, w0
 190:	sub	w1, w0, #0x40
 194:	ldr	x2, [sp, #80]
 198:	lsl	x2, x2, x1
 19c:	mov	x5, #0x0                   	// #0
 1a0:	ldr	x3, [sp, #80]
 1a4:	lsr	x4, x3, #1
 1a8:	mov	w3, #0x3f                  	// #63
 1ac:	sub	w3, w3, w0
 1b0:	lsr	x3, x4, x3
 1b4:	ldr	x4, [sp, #88]
 1b8:	lsl	x4, x4, x0
 1bc:	orr	x3, x4, x3
 1c0:	str	x3, [sp, #88]
 1c4:	ldr	x3, [sp, #80]
 1c8:	lsl	x0, x3, x0
 1cc:	str	x0, [sp, #80]
 1d0:	ldr	x0, [sp, #88]
 1d4:	cmp	w1, #0x0
 1d8:	csel	x0, x0, x2, lt  // lt = tstop
 1dc:	str	x0, [sp, #88]
 1e0:	ldr	x0, [sp, #80]
 1e4:	cmp	w1, #0x0
 1e8:	csel	x0, x0, x5, lt  // lt = tstop
 1ec:	str	x0, [sp, #80]
 1f0:	b	338 <__fixunstfti+0x338>
 1f4:	mov	x1, #0x406f                	// #16495
 1f8:	ldr	x0, [sp, #56]
 1fc:	sub	x0, x1, x0
 200:	cmp	x0, #0x3f
 204:	b.gt	288 <__fixunstfti+0x288>
 208:	ldr	x0, [sp, #56]
 20c:	mov	w1, w0
 210:	mov	w0, #0xffffbfd1            	// #-16431
 214:	add	w0, w1, w0
 218:	ldr	x1, [sp, #120]
 21c:	lsl	x0, x1, x0
 220:	cmp	x0, #0x0
 224:	cset	w0, ne  // ne = any
 228:	and	w0, w0, #0xff
 22c:	str	w0, [sp, #76]
 230:	ldr	x0, [sp, #56]
 234:	mov	w1, w0
 238:	mov	w0, #0xffffbfd1            	// #-16431
 23c:	add	w0, w1, w0
 240:	ldr	x1, [sp, #112]
 244:	lsl	x1, x1, x0
 248:	ldr	x0, [sp, #56]
 24c:	mov	w6, w0
 250:	mov	w0, #0x406f                	// #16495
 254:	sub	w0, w0, w6
 258:	ldr	x6, [sp, #120]
 25c:	lsr	x0, x6, x0
 260:	orr	x0, x1, x0
 264:	str	x0, [sp, #120]
 268:	ldr	x0, [sp, #56]
 26c:	mov	w1, w0
 270:	mov	w0, #0x406f                	// #16495
 274:	sub	w0, w0, w1
 278:	ldr	x1, [sp, #112]
 27c:	lsr	x0, x1, x0
 280:	str	x0, [sp, #112]
 284:	b	2f4 <__fixunstfti+0x2f4>
 288:	mov	x1, #0x406f                	// #16495
 28c:	ldr	x0, [sp, #56]
 290:	sub	x0, x1, x0
 294:	cmp	x0, #0x40
 298:	b.eq	2b8 <__fixunstfti+0x2b8>  // b.none
 29c:	ldr	x0, [sp, #56]
 2a0:	mov	w1, w0
 2a4:	mov	w0, #0xffffc011            	// #-16367
 2a8:	add	w0, w1, w0
 2ac:	ldr	x1, [sp, #112]
 2b0:	lsl	x0, x1, x0
 2b4:	b	2bc <__fixunstfti+0x2bc>
 2b8:	mov	x0, #0x0                   	// #0
 2bc:	ldr	x1, [sp, #120]
 2c0:	orr	x0, x0, x1
 2c4:	cmp	x0, #0x0
 2c8:	cset	w0, ne  // ne = any
 2cc:	and	w0, w0, #0xff
 2d0:	str	w0, [sp, #76]
 2d4:	ldr	x0, [sp, #56]
 2d8:	mov	w1, w0
 2dc:	mov	w0, #0x402f                	// #16431
 2e0:	sub	w0, w0, w1
 2e4:	ldr	x1, [sp, #112]
 2e8:	lsr	x0, x1, x0
 2ec:	str	x0, [sp, #120]
 2f0:	str	xzr, [sp, #112]
 2f4:	ldr	x0, [sp, #112]
 2f8:	str	x0, [sp, #80]
 2fc:	str	xzr, [sp, #88]
 300:	ldr	x0, [sp, #80]
 304:	str	x0, [sp, #88]
 308:	str	xzr, [sp, #80]
 30c:	ldr	x0, [sp, #120]
 310:	mov	x4, x0
 314:	mov	x5, #0x0                   	// #0
 318:	ldp	x0, x1, [sp, #80]
 31c:	mov	x6, x4
 320:	adds	x6, x0, x6
 324:	mov	x4, x5
 328:	adc	x0, x1, x4
 32c:	mov	x2, x6
 330:	mov	x3, x0
 334:	stp	x2, x3, [sp, #80]
 338:	ldr	w0, [sp, #76]
 33c:	cmp	w0, #0x0
 340:	b.eq	350 <__fixunstfti+0x350>  // b.none
 344:	ldr	w0, [sp, #108]
 348:	orr	w0, w0, #0x10
 34c:	str	w0, [sp, #108]
 350:	ldrsw	x0, [sp, #108]
 354:	cmp	x0, #0x0
 358:	b.eq	364 <__fixunstfti+0x364>  // b.none
 35c:	ldr	w0, [sp, #108]
 360:	bl	0 <__sfp_handle_exceptions>
 364:	ldp	x0, x1, [sp, #80]
 368:	ldp	x29, x30, [sp], #128
 36c:	ret

floattitf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__floattitf>:
   0:	stp	x29, x30, [sp, #-160]!
   4:	mov	x29, sp
   8:	stp	x0, x1, [sp, #16]
   c:	str	wzr, [sp, #124]
  10:	str	xzr, [sp, #128]
  14:	mrs	x0, fpcr
  18:	str	x0, [sp, #128]
  1c:	ldr	x0, [sp, #16]
  20:	ldr	x1, [sp, #24]
  24:	orr	x0, x0, x1
  28:	cmp	x0, #0x0
  2c:	b.eq	638 <__floattitf+0x638>  // b.none
  30:	ldp	x0, x1, [sp, #16]
  34:	stp	x0, x1, [sp, #96]
  38:	ldr	x0, [sp, #24]
  3c:	lsr	x0, x0, #63
  40:	and	w0, w0, #0xff
  44:	and	x0, x0, #0xff
  48:	str	x0, [sp, #136]
  4c:	ldr	x0, [sp, #136]
  50:	cmp	x0, #0x0
  54:	b.eq	70 <__floattitf+0x70>  // b.none
  58:	ldp	x0, x1, [sp, #96]
  5c:	negs	x18, x0
  60:	ngc	x0, x1
  64:	mov	x8, x18
  68:	mov	x9, x0
  6c:	stp	x8, x9, [sp, #96]
  70:	ldr	x0, [sp, #104]
  74:	mov	x16, x0
  78:	mov	x17, #0x0                   	// #0
  7c:	mov	x0, x16
  80:	cmp	x0, #0x0
  84:	b.eq	a4 <__floattitf+0xa4>  // b.none
  88:	ldr	x0, [sp, #104]
  8c:	mov	x14, x0
  90:	mov	x15, #0x0                   	// #0
  94:	mov	x0, x14
  98:	clz	x0, x0
  9c:	str	w0, [sp, #92]
  a0:	b	bc <__floattitf+0xbc>
  a4:	ldr	x0, [sp, #96]
  a8:	clz	x0, x0
  ac:	str	w0, [sp, #92]
  b0:	ldr	w0, [sp, #92]
  b4:	add	w0, w0, #0x40
  b8:	str	w0, [sp, #92]
  bc:	mov	w1, #0x407e                	// #16510
  c0:	ldr	w0, [sp, #92]
  c4:	sub	w0, w1, w0
  c8:	sxtw	x0, w0
  cc:	str	x0, [sp, #152]
  d0:	ldr	x1, [sp, #152]
  d4:	mov	x0, #0x406f                	// #16495
  d8:	cmp	x1, x0
  dc:	b.gt	1a0 <__floattitf+0x1a0>
  e0:	ldr	x0, [sp, #96]
  e4:	str	x0, [sp, #144]
  e8:	ldr	x0, [sp, #104]
  ec:	mov	x10, x0
  f0:	mov	x11, #0x0                   	// #0
  f4:	mov	x0, x10
  f8:	str	x0, [sp, #112]
  fc:	mov	x1, #0x406f                	// #16495
 100:	ldr	x0, [sp, #152]
 104:	sub	x0, x1, x0
 108:	cmp	x0, #0x0
 10c:	b.le	648 <__floattitf+0x648>
 110:	mov	x1, #0x406f                	// #16495
 114:	ldr	x0, [sp, #152]
 118:	sub	x0, x1, x0
 11c:	cmp	x0, #0x3f
 120:	b.gt	17c <__floattitf+0x17c>
 124:	ldr	x0, [sp, #152]
 128:	mov	w1, w0
 12c:	mov	w0, #0x406f                	// #16495
 130:	sub	w0, w0, w1
 134:	ldr	x1, [sp, #112]
 138:	lsl	x1, x1, x0
 13c:	ldr	x0, [sp, #152]
 140:	mov	w2, w0
 144:	mov	w0, #0xffffbfd1            	// #-16431
 148:	add	w0, w2, w0
 14c:	ldr	x2, [sp, #144]
 150:	lsr	x0, x2, x0
 154:	orr	x0, x1, x0
 158:	str	x0, [sp, #112]
 15c:	ldr	x0, [sp, #152]
 160:	mov	w1, w0
 164:	mov	w0, #0x406f                	// #16495
 168:	sub	w0, w0, w1
 16c:	ldr	x1, [sp, #144]
 170:	lsl	x0, x1, x0
 174:	str	x0, [sp, #144]
 178:	b	648 <__floattitf+0x648>
 17c:	ldr	x0, [sp, #152]
 180:	mov	w1, w0
 184:	mov	w0, #0x402f                	// #16431
 188:	sub	w0, w0, w1
 18c:	ldr	x1, [sp, #144]
 190:	lsl	x0, x1, x0
 194:	str	x0, [sp, #112]
 198:	str	xzr, [sp, #144]
 19c:	b	648 <__floattitf+0x648>
 1a0:	ldr	x1, [sp, #152]
 1a4:	mov	x0, #0x4072                	// #16498
 1a8:	cmp	x1, x0
 1ac:	b.le	28c <__floattitf+0x28c>
 1b0:	ldr	x0, [sp, #152]
 1b4:	mov	w1, w0
 1b8:	mov	w0, #0xffffbf8e            	// #-16498
 1bc:	add	w0, w1, w0
 1c0:	sub	w1, w0, #0x40
 1c4:	ldr	x8, [sp, #104]
 1c8:	lsr	x8, x8, x1
 1cc:	mov	x11, #0x0                   	// #0
 1d0:	ldr	x9, [sp, #104]
 1d4:	lsl	x10, x9, #1
 1d8:	mov	w9, #0x3f                  	// #63
 1dc:	sub	w9, w9, w0
 1e0:	lsl	x9, x10, x9
 1e4:	ldr	x10, [sp, #96]
 1e8:	lsr	x2, x10, x0
 1ec:	orr	x2, x9, x2
 1f0:	ldr	x9, [sp, #104]
 1f4:	lsr	x3, x9, x0
 1f8:	cmp	w1, #0x0
 1fc:	csel	x2, x8, x2, ge  // ge = tcont
 200:	cmp	w1, #0x0
 204:	csel	x3, x11, x3, ge  // ge = tcont
 208:	ldr	x0, [sp, #152]
 20c:	mov	w1, w0
 210:	mov	w0, #0x40f2                	// #16626
 214:	sub	w0, w0, w1
 218:	sub	w1, w0, #0x40
 21c:	ldr	x8, [sp, #96]
 220:	lsl	x8, x8, x1
 224:	mov	x11, #0x0                   	// #0
 228:	ldr	x9, [sp, #96]
 22c:	lsr	x10, x9, #1
 230:	mov	w9, #0x3f                  	// #63
 234:	sub	w9, w9, w0
 238:	lsr	x9, x10, x9
 23c:	ldr	x10, [sp, #104]
 240:	lsl	x5, x10, x0
 244:	orr	x5, x9, x5
 248:	ldr	x9, [sp, #96]
 24c:	lsl	x4, x9, x0
 250:	cmp	w1, #0x0
 254:	csel	x5, x8, x5, ge  // ge = tcont
 258:	cmp	w1, #0x0
 25c:	csel	x4, x11, x4, ge  // ge = tcont
 260:	orr	x0, x4, x5
 264:	cmp	x0, #0x0
 268:	cset	w0, ne  // ne = any
 26c:	and	w0, w0, #0xff
 270:	and	x0, x0, #0xff
 274:	mov	x6, x0
 278:	mov	x7, #0x0                   	// #0
 27c:	orr	x0, x2, x6
 280:	str	x0, [sp, #96]
 284:	orr	x0, x3, x7
 288:	str	x0, [sp, #104]
 28c:	ldr	x0, [sp, #96]
 290:	str	x0, [sp, #144]
 294:	ldr	x0, [sp, #104]
 298:	mov	x12, x0
 29c:	mov	x13, #0x0                   	// #0
 2a0:	mov	x0, x12
 2a4:	str	x0, [sp, #112]
 2a8:	mov	x1, #0x4072                	// #16498
 2ac:	ldr	x0, [sp, #152]
 2b0:	sub	x0, x1, x0
 2b4:	cmp	x0, #0x0
 2b8:	b.le	348 <__floattitf+0x348>
 2bc:	mov	x1, #0x4072                	// #16498
 2c0:	ldr	x0, [sp, #152]
 2c4:	sub	x0, x1, x0
 2c8:	cmp	x0, #0x3f
 2cc:	b.gt	328 <__floattitf+0x328>
 2d0:	ldr	x0, [sp, #152]
 2d4:	mov	w1, w0
 2d8:	mov	w0, #0x4072                	// #16498
 2dc:	sub	w0, w0, w1
 2e0:	ldr	x1, [sp, #112]
 2e4:	lsl	x1, x1, x0
 2e8:	ldr	x0, [sp, #152]
 2ec:	mov	w2, w0
 2f0:	mov	w0, #0xffffbfce            	// #-16434
 2f4:	add	w0, w2, w0
 2f8:	ldr	x2, [sp, #144]
 2fc:	lsr	x0, x2, x0
 300:	orr	x0, x1, x0
 304:	str	x0, [sp, #112]
 308:	ldr	x0, [sp, #152]
 30c:	mov	w1, w0
 310:	mov	w0, #0x4072                	// #16498
 314:	sub	w0, w0, w1
 318:	ldr	x1, [sp, #144]
 31c:	lsl	x0, x1, x0
 320:	str	x0, [sp, #144]
 324:	b	348 <__floattitf+0x348>
 328:	ldr	x0, [sp, #152]
 32c:	mov	w1, w0
 330:	mov	w0, #0x4032                	// #16434
 334:	sub	w0, w0, w1
 338:	ldr	x1, [sp, #144]
 33c:	lsl	x0, x1, x0
 340:	str	x0, [sp, #112]
 344:	str	xzr, [sp, #144]
 348:	ldr	x0, [sp, #112]
 34c:	and	x0, x0, #0xfff7ffffffffffff
 350:	str	x0, [sp, #112]
 354:	ldr	x0, [sp, #152]
 358:	cmp	x0, #0x0
 35c:	b.ne	37c <__floattitf+0x37c>  // b.any
 360:	ldr	x1, [sp, #112]
 364:	ldr	x0, [sp, #144]
 368:	orr	x0, x1, x0
 36c:	cmp	x0, #0x0
 370:	b.eq	37c <__floattitf+0x37c>  // b.none
 374:	mov	w0, #0x1                   	// #1
 378:	b	380 <__floattitf+0x380>
 37c:	mov	w0, #0x0                   	// #0
 380:	str	w0, [sp, #88]
 384:	ldr	x0, [sp, #144]
 388:	and	x0, x0, #0x7
 38c:	cmp	x0, #0x0
 390:	b.eq	4d8 <__floattitf+0x4d8>  // b.none
 394:	ldr	w0, [sp, #124]
 398:	orr	w0, w0, #0x10
 39c:	str	w0, [sp, #124]
 3a0:	ldr	x0, [sp, #128]
 3a4:	and	x0, x0, #0xc00000
 3a8:	cmp	x0, #0xc00, lsl #12
 3ac:	b.eq	4e0 <__floattitf+0x4e0>  // b.none
 3b0:	cmp	x0, #0xc00, lsl #12
 3b4:	b.hi	4e4 <__floattitf+0x4e4>  // b.pmore
 3b8:	cmp	x0, #0x800, lsl #12
 3bc:	b.eq	480 <__floattitf+0x480>  // b.none
 3c0:	cmp	x0, #0x800, lsl #12
 3c4:	b.hi	4e4 <__floattitf+0x4e4>  // b.pmore
 3c8:	cmp	x0, #0x0
 3cc:	b.eq	3dc <__floattitf+0x3dc>  // b.none
 3d0:	cmp	x0, #0x400, lsl #12
 3d4:	b.eq	428 <__floattitf+0x428>  // b.none
 3d8:	b	4e4 <__floattitf+0x4e4>
 3dc:	ldr	x0, [sp, #144]
 3e0:	and	x0, x0, #0xf
 3e4:	cmp	x0, #0x4
 3e8:	b.eq	4e0 <__floattitf+0x4e0>  // b.none
 3ec:	ldr	x0, [sp, #144]
 3f0:	add	x0, x0, #0x4
 3f4:	str	x0, [sp, #64]
 3f8:	ldr	x1, [sp, #64]
 3fc:	ldr	x0, [sp, #144]
 400:	cmp	x1, x0
 404:	cset	w0, cc  // cc = lo, ul, last
 408:	and	w0, w0, #0xff
 40c:	and	x0, x0, #0xff
 410:	ldr	x1, [sp, #112]
 414:	add	x0, x1, x0
 418:	str	x0, [sp, #112]
 41c:	ldr	x0, [sp, #64]
 420:	str	x0, [sp, #144]
 424:	b	4e0 <__floattitf+0x4e0>
 428:	ldr	x0, [sp, #136]
 42c:	cmp	x0, #0x0
 430:	b.ne	4e0 <__floattitf+0x4e0>  // b.any
 434:	ldr	x0, [sp, #144]
 438:	and	x0, x0, #0x7
 43c:	cmp	x0, #0x0
 440:	b.eq	4e0 <__floattitf+0x4e0>  // b.none
 444:	ldr	x0, [sp, #144]
 448:	add	x0, x0, #0x8
 44c:	str	x0, [sp, #72]
 450:	ldr	x1, [sp, #72]
 454:	ldr	x0, [sp, #144]
 458:	cmp	x1, x0
 45c:	cset	w0, cc  // cc = lo, ul, last
 460:	and	w0, w0, #0xff
 464:	and	x0, x0, #0xff
 468:	ldr	x1, [sp, #112]
 46c:	add	x0, x1, x0
 470:	str	x0, [sp, #112]
 474:	ldr	x0, [sp, #72]
 478:	str	x0, [sp, #144]
 47c:	b	4e0 <__floattitf+0x4e0>
 480:	ldr	x0, [sp, #136]
 484:	cmp	x0, #0x0
 488:	b.eq	4e0 <__floattitf+0x4e0>  // b.none
 48c:	ldr	x0, [sp, #144]
 490:	and	x0, x0, #0x7
 494:	cmp	x0, #0x0
 498:	b.eq	4e0 <__floattitf+0x4e0>  // b.none
 49c:	ldr	x0, [sp, #144]
 4a0:	add	x0, x0, #0x8
 4a4:	str	x0, [sp, #80]
 4a8:	ldr	x1, [sp, #80]
 4ac:	ldr	x0, [sp, #144]
 4b0:	cmp	x1, x0
 4b4:	cset	w0, cc  // cc = lo, ul, last
 4b8:	and	w0, w0, #0xff
 4bc:	and	x0, x0, #0xff
 4c0:	ldr	x1, [sp, #112]
 4c4:	add	x0, x1, x0
 4c8:	str	x0, [sp, #112]
 4cc:	ldr	x0, [sp, #80]
 4d0:	str	x0, [sp, #144]
 4d4:	b	4e0 <__floattitf+0x4e0>
 4d8:	nop
 4dc:	b	4e4 <__floattitf+0x4e4>
 4e0:	nop
 4e4:	ldr	w0, [sp, #88]
 4e8:	cmp	w0, #0x0
 4ec:	b.eq	51c <__floattitf+0x51c>  // b.none
 4f0:	ldr	w0, [sp, #124]
 4f4:	and	w0, w0, #0x10
 4f8:	cmp	w0, #0x0
 4fc:	b.ne	510 <__floattitf+0x510>  // b.any
 500:	ldr	x0, [sp, #128]
 504:	and	x0, x0, #0x800
 508:	cmp	x0, #0x0
 50c:	b.eq	51c <__floattitf+0x51c>  // b.none
 510:	ldr	w0, [sp, #124]
 514:	orr	w0, w0, #0x8
 518:	str	w0, [sp, #124]
 51c:	ldr	x0, [sp, #112]
 520:	and	x0, x0, #0x8000000000000
 524:	cmp	x0, #0x0
 528:	b.eq	5e0 <__floattitf+0x5e0>  // b.none
 52c:	ldr	x0, [sp, #112]
 530:	and	x0, x0, #0xfff7ffffffffffff
 534:	str	x0, [sp, #112]
 538:	ldr	x0, [sp, #152]
 53c:	add	x0, x0, #0x1
 540:	str	x0, [sp, #152]
 544:	ldr	x1, [sp, #152]
 548:	mov	x0, #0x7fff                	// #32767
 54c:	cmp	x1, x0
 550:	b.ne	5e0 <__floattitf+0x5e0>  // b.any
 554:	ldr	x0, [sp, #128]
 558:	and	x0, x0, #0xc00000
 55c:	cmp	x0, #0x0
 560:	b.eq	59c <__floattitf+0x59c>  // b.none
 564:	ldr	x0, [sp, #128]
 568:	and	x0, x0, #0xc00000
 56c:	cmp	x0, #0x400, lsl #12
 570:	b.ne	580 <__floattitf+0x580>  // b.any
 574:	ldr	x0, [sp, #136]
 578:	cmp	x0, #0x0
 57c:	b.eq	59c <__floattitf+0x59c>  // b.none
 580:	ldr	x0, [sp, #128]
 584:	and	x0, x0, #0xc00000
 588:	cmp	x0, #0x800, lsl #12
 58c:	b.ne	5b0 <__floattitf+0x5b0>  // b.any
 590:	ldr	x0, [sp, #136]
 594:	cmp	x0, #0x0
 598:	b.eq	5b0 <__floattitf+0x5b0>  // b.none
 59c:	mov	x0, #0x7fff                	// #32767
 5a0:	str	x0, [sp, #152]
 5a4:	str	xzr, [sp, #144]
 5a8:	str	xzr, [sp, #112]
 5ac:	b	5c8 <__floattitf+0x5c8>
 5b0:	mov	x0, #0x7ffe                	// #32766
 5b4:	str	x0, [sp, #152]
 5b8:	mov	x0, #0xffffffffffffffff    	// #-1
 5bc:	str	x0, [sp, #144]
 5c0:	mov	x0, #0xffffffffffffffff    	// #-1
 5c4:	str	x0, [sp, #112]
 5c8:	ldr	w0, [sp, #124]
 5cc:	orr	w0, w0, #0x10
 5d0:	str	w0, [sp, #124]
 5d4:	ldr	w0, [sp, #124]
 5d8:	orr	w0, w0, #0x4
 5dc:	str	w0, [sp, #124]
 5e0:	ldr	x0, [sp, #144]
 5e4:	lsr	x1, x0, #3
 5e8:	ldr	x0, [sp, #112]
 5ec:	lsl	x0, x0, #61
 5f0:	orr	x0, x1, x0
 5f4:	str	x0, [sp, #144]
 5f8:	ldr	x0, [sp, #112]
 5fc:	lsr	x0, x0, #3
 600:	str	x0, [sp, #112]
 604:	ldr	x1, [sp, #152]
 608:	mov	x0, #0x7fff                	// #32767
 60c:	cmp	x1, x0
 610:	b.ne	648 <__floattitf+0x648>  // b.any
 614:	ldr	x1, [sp, #112]
 618:	ldr	x0, [sp, #144]
 61c:	orr	x0, x1, x0
 620:	cmp	x0, #0x0
 624:	b.eq	648 <__floattitf+0x648>  // b.none
 628:	ldr	x0, [sp, #112]
 62c:	orr	x0, x0, #0x800000000000
 630:	str	x0, [sp, #112]
 634:	b	648 <__floattitf+0x648>
 638:	str	xzr, [sp, #136]
 63c:	str	xzr, [sp, #152]
 640:	str	xzr, [sp, #144]
 644:	str	xzr, [sp, #112]
 648:	ldr	x0, [sp, #144]
 64c:	str	x0, [sp, #32]
 650:	ldr	x0, [sp, #112]
 654:	and	x1, x0, #0xffffffffffff
 658:	ldr	x0, [sp, #40]
 65c:	bfxil	x0, x1, #0, #48
 660:	str	x0, [sp, #40]
 664:	ldr	x0, [sp, #152]
 668:	and	w0, w0, #0x7fff
 66c:	and	w1, w0, #0xffff
 670:	ldrh	w0, [sp, #46]
 674:	bfxil	w0, w1, #0, #15
 678:	strh	w0, [sp, #46]
 67c:	ldr	x0, [sp, #136]
 680:	and	w0, w0, #0x1
 684:	and	w1, w0, #0xff
 688:	ldrb	w0, [sp, #47]
 68c:	bfi	w0, w1, #7, #1
 690:	strb	w0, [sp, #47]
 694:	ldr	q0, [sp, #32]
 698:	str	q0, [sp, #48]
 69c:	ldrsw	x0, [sp, #124]
 6a0:	cmp	x0, #0x0
 6a4:	b.eq	6b0 <__floattitf+0x6b0>  // b.none
 6a8:	ldr	w0, [sp, #124]
 6ac:	bl	0 <__sfp_handle_exceptions>
 6b0:	ldr	q0, [sp, #48]
 6b4:	ldp	x29, x30, [sp], #160
 6b8:	ret

floatuntitf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__floatuntitf>:
   0:	stp	x29, x30, [sp, #-160]!
   4:	mov	x29, sp
   8:	stp	x0, x1, [sp, #16]
   c:	str	wzr, [sp, #124]
  10:	str	xzr, [sp, #128]
  14:	mrs	x0, fpcr
  18:	str	x0, [sp, #128]
  1c:	ldr	x0, [sp, #16]
  20:	ldr	x1, [sp, #24]
  24:	orr	x0, x0, x1
  28:	cmp	x0, #0x0
  2c:	b.eq	628 <__floatuntitf+0x628>  // b.none
  30:	ldp	x0, x1, [sp, #16]
  34:	stp	x0, x1, [sp, #96]
  38:	str	xzr, [sp, #136]
  3c:	ldr	x0, [sp, #136]
  40:	cmp	x0, #0x0
  44:	b.eq	60 <__floatuntitf+0x60>  // b.none
  48:	ldp	x0, x1, [sp, #96]
  4c:	negs	x18, x0
  50:	ngc	x0, x1
  54:	mov	x8, x18
  58:	mov	x9, x0
  5c:	stp	x8, x9, [sp, #96]
  60:	ldr	x0, [sp, #104]
  64:	mov	x16, x0
  68:	mov	x17, #0x0                   	// #0
  6c:	mov	x0, x16
  70:	cmp	x0, #0x0
  74:	b.eq	94 <__floatuntitf+0x94>  // b.none
  78:	ldr	x0, [sp, #104]
  7c:	mov	x14, x0
  80:	mov	x15, #0x0                   	// #0
  84:	mov	x0, x14
  88:	clz	x0, x0
  8c:	str	w0, [sp, #92]
  90:	b	ac <__floatuntitf+0xac>
  94:	ldr	x0, [sp, #96]
  98:	clz	x0, x0
  9c:	str	w0, [sp, #92]
  a0:	ldr	w0, [sp, #92]
  a4:	add	w0, w0, #0x40
  a8:	str	w0, [sp, #92]
  ac:	mov	w1, #0x407e                	// #16510
  b0:	ldr	w0, [sp, #92]
  b4:	sub	w0, w1, w0
  b8:	sxtw	x0, w0
  bc:	str	x0, [sp, #152]
  c0:	ldr	x1, [sp, #152]
  c4:	mov	x0, #0x406f                	// #16495
  c8:	cmp	x1, x0
  cc:	b.gt	190 <__floatuntitf+0x190>
  d0:	ldr	x0, [sp, #96]
  d4:	str	x0, [sp, #144]
  d8:	ldr	x0, [sp, #104]
  dc:	mov	x10, x0
  e0:	mov	x11, #0x0                   	// #0
  e4:	mov	x0, x10
  e8:	str	x0, [sp, #112]
  ec:	mov	x1, #0x406f                	// #16495
  f0:	ldr	x0, [sp, #152]
  f4:	sub	x0, x1, x0
  f8:	cmp	x0, #0x0
  fc:	b.le	638 <__floatuntitf+0x638>
 100:	mov	x1, #0x406f                	// #16495
 104:	ldr	x0, [sp, #152]
 108:	sub	x0, x1, x0
 10c:	cmp	x0, #0x3f
 110:	b.gt	16c <__floatuntitf+0x16c>
 114:	ldr	x0, [sp, #152]
 118:	mov	w1, w0
 11c:	mov	w0, #0x406f                	// #16495
 120:	sub	w0, w0, w1
 124:	ldr	x1, [sp, #112]
 128:	lsl	x1, x1, x0
 12c:	ldr	x0, [sp, #152]
 130:	mov	w2, w0
 134:	mov	w0, #0xffffbfd1            	// #-16431
 138:	add	w0, w2, w0
 13c:	ldr	x2, [sp, #144]
 140:	lsr	x0, x2, x0
 144:	orr	x0, x1, x0
 148:	str	x0, [sp, #112]
 14c:	ldr	x0, [sp, #152]
 150:	mov	w1, w0
 154:	mov	w0, #0x406f                	// #16495
 158:	sub	w0, w0, w1
 15c:	ldr	x1, [sp, #144]
 160:	lsl	x0, x1, x0
 164:	str	x0, [sp, #144]
 168:	b	638 <__floatuntitf+0x638>
 16c:	ldr	x0, [sp, #152]
 170:	mov	w1, w0
 174:	mov	w0, #0x402f                	// #16431
 178:	sub	w0, w0, w1
 17c:	ldr	x1, [sp, #144]
 180:	lsl	x0, x1, x0
 184:	str	x0, [sp, #112]
 188:	str	xzr, [sp, #144]
 18c:	b	638 <__floatuntitf+0x638>
 190:	ldr	x1, [sp, #152]
 194:	mov	x0, #0x4072                	// #16498
 198:	cmp	x1, x0
 19c:	b.le	27c <__floatuntitf+0x27c>
 1a0:	ldr	x0, [sp, #152]
 1a4:	mov	w1, w0
 1a8:	mov	w0, #0xffffbf8e            	// #-16498
 1ac:	add	w0, w1, w0
 1b0:	sub	w1, w0, #0x40
 1b4:	ldr	x8, [sp, #104]
 1b8:	lsr	x8, x8, x1
 1bc:	mov	x11, #0x0                   	// #0
 1c0:	ldr	x9, [sp, #104]
 1c4:	lsl	x10, x9, #1
 1c8:	mov	w9, #0x3f                  	// #63
 1cc:	sub	w9, w9, w0
 1d0:	lsl	x9, x10, x9
 1d4:	ldr	x10, [sp, #96]
 1d8:	lsr	x2, x10, x0
 1dc:	orr	x2, x9, x2
 1e0:	ldr	x9, [sp, #104]
 1e4:	lsr	x3, x9, x0
 1e8:	cmp	w1, #0x0
 1ec:	csel	x2, x8, x2, ge  // ge = tcont
 1f0:	cmp	w1, #0x0
 1f4:	csel	x3, x11, x3, ge  // ge = tcont
 1f8:	ldr	x0, [sp, #152]
 1fc:	mov	w1, w0
 200:	mov	w0, #0x40f2                	// #16626
 204:	sub	w0, w0, w1
 208:	sub	w1, w0, #0x40
 20c:	ldr	x8, [sp, #96]
 210:	lsl	x8, x8, x1
 214:	mov	x11, #0x0                   	// #0
 218:	ldr	x9, [sp, #96]
 21c:	lsr	x10, x9, #1
 220:	mov	w9, #0x3f                  	// #63
 224:	sub	w9, w9, w0
 228:	lsr	x9, x10, x9
 22c:	ldr	x10, [sp, #104]
 230:	lsl	x5, x10, x0
 234:	orr	x5, x9, x5
 238:	ldr	x9, [sp, #96]
 23c:	lsl	x4, x9, x0
 240:	cmp	w1, #0x0
 244:	csel	x5, x8, x5, ge  // ge = tcont
 248:	cmp	w1, #0x0
 24c:	csel	x4, x11, x4, ge  // ge = tcont
 250:	orr	x0, x4, x5
 254:	cmp	x0, #0x0
 258:	cset	w0, ne  // ne = any
 25c:	and	w0, w0, #0xff
 260:	and	x0, x0, #0xff
 264:	mov	x6, x0
 268:	mov	x7, #0x0                   	// #0
 26c:	orr	x0, x2, x6
 270:	str	x0, [sp, #96]
 274:	orr	x0, x3, x7
 278:	str	x0, [sp, #104]
 27c:	ldr	x0, [sp, #96]
 280:	str	x0, [sp, #144]
 284:	ldr	x0, [sp, #104]
 288:	mov	x12, x0
 28c:	mov	x13, #0x0                   	// #0
 290:	mov	x0, x12
 294:	str	x0, [sp, #112]
 298:	mov	x1, #0x4072                	// #16498
 29c:	ldr	x0, [sp, #152]
 2a0:	sub	x0, x1, x0
 2a4:	cmp	x0, #0x0
 2a8:	b.le	338 <__floatuntitf+0x338>
 2ac:	mov	x1, #0x4072                	// #16498
 2b0:	ldr	x0, [sp, #152]
 2b4:	sub	x0, x1, x0
 2b8:	cmp	x0, #0x3f
 2bc:	b.gt	318 <__floatuntitf+0x318>
 2c0:	ldr	x0, [sp, #152]
 2c4:	mov	w1, w0
 2c8:	mov	w0, #0x4072                	// #16498
 2cc:	sub	w0, w0, w1
 2d0:	ldr	x1, [sp, #112]
 2d4:	lsl	x1, x1, x0
 2d8:	ldr	x0, [sp, #152]
 2dc:	mov	w2, w0
 2e0:	mov	w0, #0xffffbfce            	// #-16434
 2e4:	add	w0, w2, w0
 2e8:	ldr	x2, [sp, #144]
 2ec:	lsr	x0, x2, x0
 2f0:	orr	x0, x1, x0
 2f4:	str	x0, [sp, #112]
 2f8:	ldr	x0, [sp, #152]
 2fc:	mov	w1, w0
 300:	mov	w0, #0x4072                	// #16498
 304:	sub	w0, w0, w1
 308:	ldr	x1, [sp, #144]
 30c:	lsl	x0, x1, x0
 310:	str	x0, [sp, #144]
 314:	b	338 <__floatuntitf+0x338>
 318:	ldr	x0, [sp, #152]
 31c:	mov	w1, w0
 320:	mov	w0, #0x4032                	// #16434
 324:	sub	w0, w0, w1
 328:	ldr	x1, [sp, #144]
 32c:	lsl	x0, x1, x0
 330:	str	x0, [sp, #112]
 334:	str	xzr, [sp, #144]
 338:	ldr	x0, [sp, #112]
 33c:	and	x0, x0, #0xfff7ffffffffffff
 340:	str	x0, [sp, #112]
 344:	ldr	x0, [sp, #152]
 348:	cmp	x0, #0x0
 34c:	b.ne	36c <__floatuntitf+0x36c>  // b.any
 350:	ldr	x1, [sp, #112]
 354:	ldr	x0, [sp, #144]
 358:	orr	x0, x1, x0
 35c:	cmp	x0, #0x0
 360:	b.eq	36c <__floatuntitf+0x36c>  // b.none
 364:	mov	w0, #0x1                   	// #1
 368:	b	370 <__floatuntitf+0x370>
 36c:	mov	w0, #0x0                   	// #0
 370:	str	w0, [sp, #88]
 374:	ldr	x0, [sp, #144]
 378:	and	x0, x0, #0x7
 37c:	cmp	x0, #0x0
 380:	b.eq	4c8 <__floatuntitf+0x4c8>  // b.none
 384:	ldr	w0, [sp, #124]
 388:	orr	w0, w0, #0x10
 38c:	str	w0, [sp, #124]
 390:	ldr	x0, [sp, #128]
 394:	and	x0, x0, #0xc00000
 398:	cmp	x0, #0xc00, lsl #12
 39c:	b.eq	4d0 <__floatuntitf+0x4d0>  // b.none
 3a0:	cmp	x0, #0xc00, lsl #12
 3a4:	b.hi	4d4 <__floatuntitf+0x4d4>  // b.pmore
 3a8:	cmp	x0, #0x800, lsl #12
 3ac:	b.eq	470 <__floatuntitf+0x470>  // b.none
 3b0:	cmp	x0, #0x800, lsl #12
 3b4:	b.hi	4d4 <__floatuntitf+0x4d4>  // b.pmore
 3b8:	cmp	x0, #0x0
 3bc:	b.eq	3cc <__floatuntitf+0x3cc>  // b.none
 3c0:	cmp	x0, #0x400, lsl #12
 3c4:	b.eq	418 <__floatuntitf+0x418>  // b.none
 3c8:	b	4d4 <__floatuntitf+0x4d4>
 3cc:	ldr	x0, [sp, #144]
 3d0:	and	x0, x0, #0xf
 3d4:	cmp	x0, #0x4
 3d8:	b.eq	4d0 <__floatuntitf+0x4d0>  // b.none
 3dc:	ldr	x0, [sp, #144]
 3e0:	add	x0, x0, #0x4
 3e4:	str	x0, [sp, #64]
 3e8:	ldr	x1, [sp, #64]
 3ec:	ldr	x0, [sp, #144]
 3f0:	cmp	x1, x0
 3f4:	cset	w0, cc  // cc = lo, ul, last
 3f8:	and	w0, w0, #0xff
 3fc:	and	x0, x0, #0xff
 400:	ldr	x1, [sp, #112]
 404:	add	x0, x1, x0
 408:	str	x0, [sp, #112]
 40c:	ldr	x0, [sp, #64]
 410:	str	x0, [sp, #144]
 414:	b	4d0 <__floatuntitf+0x4d0>
 418:	ldr	x0, [sp, #136]
 41c:	cmp	x0, #0x0
 420:	b.ne	4d0 <__floatuntitf+0x4d0>  // b.any
 424:	ldr	x0, [sp, #144]
 428:	and	x0, x0, #0x7
 42c:	cmp	x0, #0x0
 430:	b.eq	4d0 <__floatuntitf+0x4d0>  // b.none
 434:	ldr	x0, [sp, #144]
 438:	add	x0, x0, #0x8
 43c:	str	x0, [sp, #72]
 440:	ldr	x1, [sp, #72]
 444:	ldr	x0, [sp, #144]
 448:	cmp	x1, x0
 44c:	cset	w0, cc  // cc = lo, ul, last
 450:	and	w0, w0, #0xff
 454:	and	x0, x0, #0xff
 458:	ldr	x1, [sp, #112]
 45c:	add	x0, x1, x0
 460:	str	x0, [sp, #112]
 464:	ldr	x0, [sp, #72]
 468:	str	x0, [sp, #144]
 46c:	b	4d0 <__floatuntitf+0x4d0>
 470:	ldr	x0, [sp, #136]
 474:	cmp	x0, #0x0
 478:	b.eq	4d0 <__floatuntitf+0x4d0>  // b.none
 47c:	ldr	x0, [sp, #144]
 480:	and	x0, x0, #0x7
 484:	cmp	x0, #0x0
 488:	b.eq	4d0 <__floatuntitf+0x4d0>  // b.none
 48c:	ldr	x0, [sp, #144]
 490:	add	x0, x0, #0x8
 494:	str	x0, [sp, #80]
 498:	ldr	x1, [sp, #80]
 49c:	ldr	x0, [sp, #144]
 4a0:	cmp	x1, x0
 4a4:	cset	w0, cc  // cc = lo, ul, last
 4a8:	and	w0, w0, #0xff
 4ac:	and	x0, x0, #0xff
 4b0:	ldr	x1, [sp, #112]
 4b4:	add	x0, x1, x0
 4b8:	str	x0, [sp, #112]
 4bc:	ldr	x0, [sp, #80]
 4c0:	str	x0, [sp, #144]
 4c4:	b	4d0 <__floatuntitf+0x4d0>
 4c8:	nop
 4cc:	b	4d4 <__floatuntitf+0x4d4>
 4d0:	nop
 4d4:	ldr	w0, [sp, #88]
 4d8:	cmp	w0, #0x0
 4dc:	b.eq	50c <__floatuntitf+0x50c>  // b.none
 4e0:	ldr	w0, [sp, #124]
 4e4:	and	w0, w0, #0x10
 4e8:	cmp	w0, #0x0
 4ec:	b.ne	500 <__floatuntitf+0x500>  // b.any
 4f0:	ldr	x0, [sp, #128]
 4f4:	and	x0, x0, #0x800
 4f8:	cmp	x0, #0x0
 4fc:	b.eq	50c <__floatuntitf+0x50c>  // b.none
 500:	ldr	w0, [sp, #124]
 504:	orr	w0, w0, #0x8
 508:	str	w0, [sp, #124]
 50c:	ldr	x0, [sp, #112]
 510:	and	x0, x0, #0x8000000000000
 514:	cmp	x0, #0x0
 518:	b.eq	5d0 <__floatuntitf+0x5d0>  // b.none
 51c:	ldr	x0, [sp, #112]
 520:	and	x0, x0, #0xfff7ffffffffffff
 524:	str	x0, [sp, #112]
 528:	ldr	x0, [sp, #152]
 52c:	add	x0, x0, #0x1
 530:	str	x0, [sp, #152]
 534:	ldr	x1, [sp, #152]
 538:	mov	x0, #0x7fff                	// #32767
 53c:	cmp	x1, x0
 540:	b.ne	5d0 <__floatuntitf+0x5d0>  // b.any
 544:	ldr	x0, [sp, #128]
 548:	and	x0, x0, #0xc00000
 54c:	cmp	x0, #0x0
 550:	b.eq	58c <__floatuntitf+0x58c>  // b.none
 554:	ldr	x0, [sp, #128]
 558:	and	x0, x0, #0xc00000
 55c:	cmp	x0, #0x400, lsl #12
 560:	b.ne	570 <__floatuntitf+0x570>  // b.any
 564:	ldr	x0, [sp, #136]
 568:	cmp	x0, #0x0
 56c:	b.eq	58c <__floatuntitf+0x58c>  // b.none
 570:	ldr	x0, [sp, #128]
 574:	and	x0, x0, #0xc00000
 578:	cmp	x0, #0x800, lsl #12
 57c:	b.ne	5a0 <__floatuntitf+0x5a0>  // b.any
 580:	ldr	x0, [sp, #136]
 584:	cmp	x0, #0x0
 588:	b.eq	5a0 <__floatuntitf+0x5a0>  // b.none
 58c:	mov	x0, #0x7fff                	// #32767
 590:	str	x0, [sp, #152]
 594:	str	xzr, [sp, #144]
 598:	str	xzr, [sp, #112]
 59c:	b	5b8 <__floatuntitf+0x5b8>
 5a0:	mov	x0, #0x7ffe                	// #32766
 5a4:	str	x0, [sp, #152]
 5a8:	mov	x0, #0xffffffffffffffff    	// #-1
 5ac:	str	x0, [sp, #144]
 5b0:	mov	x0, #0xffffffffffffffff    	// #-1
 5b4:	str	x0, [sp, #112]
 5b8:	ldr	w0, [sp, #124]
 5bc:	orr	w0, w0, #0x10
 5c0:	str	w0, [sp, #124]
 5c4:	ldr	w0, [sp, #124]
 5c8:	orr	w0, w0, #0x4
 5cc:	str	w0, [sp, #124]
 5d0:	ldr	x0, [sp, #144]
 5d4:	lsr	x1, x0, #3
 5d8:	ldr	x0, [sp, #112]
 5dc:	lsl	x0, x0, #61
 5e0:	orr	x0, x1, x0
 5e4:	str	x0, [sp, #144]
 5e8:	ldr	x0, [sp, #112]
 5ec:	lsr	x0, x0, #3
 5f0:	str	x0, [sp, #112]
 5f4:	ldr	x1, [sp, #152]
 5f8:	mov	x0, #0x7fff                	// #32767
 5fc:	cmp	x1, x0
 600:	b.ne	638 <__floatuntitf+0x638>  // b.any
 604:	ldr	x1, [sp, #112]
 608:	ldr	x0, [sp, #144]
 60c:	orr	x0, x1, x0
 610:	cmp	x0, #0x0
 614:	b.eq	638 <__floatuntitf+0x638>  // b.none
 618:	ldr	x0, [sp, #112]
 61c:	orr	x0, x0, #0x800000000000
 620:	str	x0, [sp, #112]
 624:	b	638 <__floatuntitf+0x638>
 628:	str	xzr, [sp, #136]
 62c:	str	xzr, [sp, #152]
 630:	str	xzr, [sp, #144]
 634:	str	xzr, [sp, #112]
 638:	ldr	x0, [sp, #144]
 63c:	str	x0, [sp, #32]
 640:	ldr	x0, [sp, #112]
 644:	and	x1, x0, #0xffffffffffff
 648:	ldr	x0, [sp, #40]
 64c:	bfxil	x0, x1, #0, #48
 650:	str	x0, [sp, #40]
 654:	ldr	x0, [sp, #152]
 658:	and	w0, w0, #0x7fff
 65c:	and	w1, w0, #0xffff
 660:	ldrh	w0, [sp, #46]
 664:	bfxil	w0, w1, #0, #15
 668:	strh	w0, [sp, #46]
 66c:	ldr	x0, [sp, #136]
 670:	and	w0, w0, #0x1
 674:	and	w1, w0, #0xff
 678:	ldrb	w0, [sp, #47]
 67c:	bfi	w0, w1, #7, #1
 680:	strb	w0, [sp, #47]
 684:	ldr	q0, [sp, #32]
 688:	str	q0, [sp, #48]
 68c:	ldrsw	x0, [sp, #124]
 690:	cmp	x0, #0x0
 694:	b.eq	6a0 <__floatuntitf+0x6a0>  // b.none
 698:	ldr	w0, [sp, #124]
 69c:	bl	0 <__sfp_handle_exceptions>
 6a0:	ldr	q0, [sp, #48]
 6a4:	ldp	x29, x30, [sp], #160
 6a8:	ret

extendsftf2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__extendsftf2>:
   0:	stp	x29, x30, [sp, #-160]!
   4:	mov	x29, sp
   8:	str	s0, [sp, #28]
   c:	str	wzr, [sp, #148]
  10:	str	xzr, [sp, #120]
  14:	mrs	x0, fpcr
  18:	str	x0, [sp, #120]
  1c:	ldr	s0, [sp, #28]
  20:	str	s0, [sp, #56]
  24:	ldr	w0, [sp, #56]
  28:	ubfx	x0, x0, #0, #23
  2c:	mov	w0, w0
  30:	str	x0, [sp, #112]
  34:	ldrh	w0, [sp, #58]
  38:	ubfx	x0, x0, #7, #8
  3c:	and	w0, w0, #0xff
  40:	and	x0, x0, #0xff
  44:	str	x0, [sp, #104]
  48:	ldrb	w0, [sp, #59]
  4c:	ubfx	x0, x0, #7, #1
  50:	and	w0, w0, #0xff
  54:	and	x0, x0, #0xff
  58:	str	x0, [sp, #96]
  5c:	ldr	x0, [sp, #96]
  60:	str	x0, [sp, #88]
  64:	ldr	x0, [sp, #112]
  68:	str	x0, [sp, #128]
  6c:	str	xzr, [sp, #152]
  70:	ldr	x0, [sp, #104]
  74:	add	x0, x0, #0x1
  78:	and	x0, x0, #0xfe
  7c:	cmp	x0, #0x0
  80:	b.eq	a8 <__extendsftf2+0xa8>  // b.none
  84:	ldr	x1, [sp, #104]
  88:	mov	x0, #0x3f80                	// #16256
  8c:	add	x0, x1, x0
  90:	str	x0, [sp, #136]
  94:	ldr	x0, [sp, #128]
  98:	lsl	x0, x0, #25
  9c:	str	x0, [sp, #152]
  a0:	str	xzr, [sp, #128]
  a4:	b	1a0 <__extendsftf2+0x1a0>
  a8:	ldr	x0, [sp, #104]
  ac:	cmp	x0, #0x0
  b0:	b.ne	154 <__extendsftf2+0x154>  // b.any
  b4:	ldr	x0, [sp, #112]
  b8:	cmp	x0, #0x0
  bc:	b.ne	c8 <__extendsftf2+0xc8>  // b.any
  c0:	str	xzr, [sp, #136]
  c4:	b	1a0 <__extendsftf2+0x1a0>
  c8:	ldr	x0, [sp, #112]
  cc:	clz	x0, x0
  d0:	str	w0, [sp, #84]
  d4:	ldr	w0, [sp, #84]
  d8:	cmp	w0, #0xe
  dc:	b.gt	124 <__extendsftf2+0x124>
  e0:	ldr	w0, [sp, #84]
  e4:	add	w0, w0, #0x31
  e8:	ldr	x1, [sp, #152]
  ec:	lsl	x1, x1, x0
  f0:	mov	w2, #0xf                   	// #15
  f4:	ldr	w0, [sp, #84]
  f8:	sub	w0, w2, w0
  fc:	ldr	x2, [sp, #128]
 100:	lsr	x0, x2, x0
 104:	orr	x0, x1, x0
 108:	str	x0, [sp, #152]
 10c:	ldr	w0, [sp, #84]
 110:	add	w0, w0, #0x31
 114:	ldr	x1, [sp, #128]
 118:	lsl	x0, x1, x0
 11c:	str	x0, [sp, #128]
 120:	b	13c <__extendsftf2+0x13c>
 124:	ldr	w0, [sp, #84]
 128:	sub	w0, w0, #0xf
 12c:	ldr	x1, [sp, #128]
 130:	lsl	x0, x1, x0
 134:	str	x0, [sp, #152]
 138:	str	xzr, [sp, #128]
 13c:	mov	w1, #0x3fa9                	// #16297
 140:	ldr	w0, [sp, #84]
 144:	sub	w0, w1, w0
 148:	sxtw	x0, w0
 14c:	str	x0, [sp, #136]
 150:	b	1a0 <__extendsftf2+0x1a0>
 154:	mov	x0, #0x7fff                	// #32767
 158:	str	x0, [sp, #136]
 15c:	ldr	x0, [sp, #112]
 160:	cmp	x0, #0x0
 164:	b.eq	1a0 <__extendsftf2+0x1a0>  // b.none
 168:	ldr	x0, [sp, #112]
 16c:	and	x0, x0, #0x400000
 170:	cmp	x0, #0x0
 174:	b.ne	184 <__extendsftf2+0x184>  // b.any
 178:	ldr	w0, [sp, #148]
 17c:	orr	w0, w0, #0x1
 180:	str	w0, [sp, #148]
 184:	ldr	x0, [sp, #128]
 188:	lsl	x0, x0, #25
 18c:	str	x0, [sp, #152]
 190:	str	xzr, [sp, #128]
 194:	ldr	x0, [sp, #152]
 198:	orr	x0, x0, #0x800000000000
 19c:	str	x0, [sp, #152]
 1a0:	ldr	x0, [sp, #128]
 1a4:	str	x0, [sp, #32]
 1a8:	ldr	x0, [sp, #152]
 1ac:	and	x1, x0, #0xffffffffffff
 1b0:	ldr	x0, [sp, #40]
 1b4:	bfxil	x0, x1, #0, #48
 1b8:	str	x0, [sp, #40]
 1bc:	ldr	x0, [sp, #136]
 1c0:	and	w0, w0, #0x7fff
 1c4:	and	w1, w0, #0xffff
 1c8:	ldrh	w0, [sp, #46]
 1cc:	bfxil	w0, w1, #0, #15
 1d0:	strh	w0, [sp, #46]
 1d4:	ldr	x0, [sp, #88]
 1d8:	and	w0, w0, #0x1
 1dc:	and	w1, w0, #0xff
 1e0:	ldrb	w0, [sp, #47]
 1e4:	bfi	w0, w1, #7, #1
 1e8:	strb	w0, [sp, #47]
 1ec:	ldr	q0, [sp, #32]
 1f0:	str	q0, [sp, #64]
 1f4:	ldrsw	x0, [sp, #148]
 1f8:	cmp	x0, #0x0
 1fc:	b.eq	208 <__extendsftf2+0x208>  // b.none
 200:	ldr	w0, [sp, #148]
 204:	bl	0 <__sfp_handle_exceptions>
 208:	ldr	q0, [sp, #64]
 20c:	ldp	x29, x30, [sp], #160
 210:	ret

extenddftf2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__extenddftf2>:
   0:	stp	x29, x30, [sp, #-160]!
   4:	mov	x29, sp
   8:	str	d0, [sp, #24]
   c:	str	wzr, [sp, #100]
  10:	str	xzr, [sp, #112]
  14:	mrs	x0, fpcr
  18:	str	x0, [sp, #112]
  1c:	ldr	d0, [sp, #24]
  20:	str	d0, [sp, #56]
  24:	ldr	x0, [sp, #56]
  28:	ubfx	x0, x0, #0, #52
  2c:	str	x0, [sp, #128]
  30:	ldrh	w0, [sp, #62]
  34:	ubfx	x0, x0, #4, #11
  38:	and	w0, w0, #0xffff
  3c:	and	x0, x0, #0xffff
  40:	str	x0, [sp, #120]
  44:	ldrb	w0, [sp, #63]
  48:	ubfx	x0, x0, #7, #1
  4c:	and	w0, w0, #0xff
  50:	and	x0, x0, #0xff
  54:	str	x0, [sp, #152]
  58:	ldr	x0, [sp, #152]
  5c:	str	x0, [sp, #144]
  60:	ldr	x0, [sp, #128]
  64:	str	x0, [sp, #136]
  68:	str	xzr, [sp, #104]
  6c:	ldr	x0, [sp, #120]
  70:	add	x0, x0, #0x1
  74:	and	x0, x0, #0x7fe
  78:	cmp	x0, #0x0
  7c:	b.eq	b8 <__extenddftf2+0xb8>  // b.none
  80:	ldr	x1, [sp, #120]
  84:	mov	x0, #0x3c00                	// #15360
  88:	add	x0, x1, x0
  8c:	str	x0, [sp, #88]
  90:	ldr	x0, [sp, #104]
  94:	lsl	x1, x0, #60
  98:	ldr	x0, [sp, #136]
  9c:	lsr	x0, x0, #4
  a0:	orr	x0, x1, x0
  a4:	str	x0, [sp, #104]
  a8:	ldr	x0, [sp, #136]
  ac:	lsl	x0, x0, #60
  b0:	str	x0, [sp, #136]
  b4:	b	1c4 <__extenddftf2+0x1c4>
  b8:	ldr	x0, [sp, #120]
  bc:	cmp	x0, #0x0
  c0:	b.ne	164 <__extenddftf2+0x164>  // b.any
  c4:	ldr	x0, [sp, #128]
  c8:	cmp	x0, #0x0
  cc:	b.ne	d8 <__extenddftf2+0xd8>  // b.any
  d0:	str	xzr, [sp, #88]
  d4:	b	1c4 <__extenddftf2+0x1c4>
  d8:	ldr	x0, [sp, #128]
  dc:	clz	x0, x0
  e0:	str	w0, [sp, #84]
  e4:	ldr	w0, [sp, #84]
  e8:	cmp	w0, #0xe
  ec:	b.gt	134 <__extenddftf2+0x134>
  f0:	ldr	w0, [sp, #84]
  f4:	add	w0, w0, #0x31
  f8:	ldr	x1, [sp, #104]
  fc:	lsl	x1, x1, x0
 100:	mov	w2, #0xf                   	// #15
 104:	ldr	w0, [sp, #84]
 108:	sub	w0, w2, w0
 10c:	ldr	x2, [sp, #136]
 110:	lsr	x0, x2, x0
 114:	orr	x0, x1, x0
 118:	str	x0, [sp, #104]
 11c:	ldr	w0, [sp, #84]
 120:	add	w0, w0, #0x31
 124:	ldr	x1, [sp, #136]
 128:	lsl	x0, x1, x0
 12c:	str	x0, [sp, #136]
 130:	b	14c <__extenddftf2+0x14c>
 134:	ldr	w0, [sp, #84]
 138:	sub	w0, w0, #0xf
 13c:	ldr	x1, [sp, #136]
 140:	lsl	x0, x1, x0
 144:	str	x0, [sp, #104]
 148:	str	xzr, [sp, #136]
 14c:	mov	w1, #0x3c0c                	// #15372
 150:	ldr	w0, [sp, #84]
 154:	sub	w0, w1, w0
 158:	sxtw	x0, w0
 15c:	str	x0, [sp, #88]
 160:	b	1c4 <__extenddftf2+0x1c4>
 164:	mov	x0, #0x7fff                	// #32767
 168:	str	x0, [sp, #88]
 16c:	ldr	x0, [sp, #128]
 170:	cmp	x0, #0x0
 174:	b.eq	1c4 <__extenddftf2+0x1c4>  // b.none
 178:	ldr	x0, [sp, #128]
 17c:	and	x0, x0, #0x8000000000000
 180:	cmp	x0, #0x0
 184:	b.ne	194 <__extenddftf2+0x194>  // b.any
 188:	ldr	w0, [sp, #100]
 18c:	orr	w0, w0, #0x1
 190:	str	w0, [sp, #100]
 194:	ldr	x0, [sp, #104]
 198:	lsl	x1, x0, #60
 19c:	ldr	x0, [sp, #136]
 1a0:	lsr	x0, x0, #4
 1a4:	orr	x0, x1, x0
 1a8:	str	x0, [sp, #104]
 1ac:	ldr	x0, [sp, #136]
 1b0:	lsl	x0, x0, #60
 1b4:	str	x0, [sp, #136]
 1b8:	ldr	x0, [sp, #104]
 1bc:	orr	x0, x0, #0x800000000000
 1c0:	str	x0, [sp, #104]
 1c4:	ldr	x0, [sp, #136]
 1c8:	str	x0, [sp, #32]
 1cc:	ldr	x0, [sp, #104]
 1d0:	and	x1, x0, #0xffffffffffff
 1d4:	ldr	x0, [sp, #40]
 1d8:	bfxil	x0, x1, #0, #48
 1dc:	str	x0, [sp, #40]
 1e0:	ldr	x0, [sp, #88]
 1e4:	and	w0, w0, #0x7fff
 1e8:	and	w1, w0, #0xffff
 1ec:	ldrh	w0, [sp, #46]
 1f0:	bfxil	w0, w1, #0, #15
 1f4:	strh	w0, [sp, #46]
 1f8:	ldr	x0, [sp, #144]
 1fc:	and	w0, w0, #0x1
 200:	and	w1, w0, #0xff
 204:	ldrb	w0, [sp, #47]
 208:	bfi	w0, w1, #7, #1
 20c:	strb	w0, [sp, #47]
 210:	ldr	q0, [sp, #32]
 214:	str	q0, [sp, #64]
 218:	ldrsw	x0, [sp, #100]
 21c:	cmp	x0, #0x0
 220:	b.eq	22c <__extenddftf2+0x22c>  // b.none
 224:	ldr	w0, [sp, #100]
 228:	bl	0 <__sfp_handle_exceptions>
 22c:	ldr	q0, [sp, #64]
 230:	ldp	x29, x30, [sp], #160
 234:	ret

extendhftf2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__extendhftf2>:
   0:	stp	x29, x30, [sp, #-160]!
   4:	mov	x29, sp
   8:	str	h0, [sp, #30]
   c:	str	wzr, [sp, #148]
  10:	str	xzr, [sp, #120]
  14:	mrs	x0, fpcr
  18:	str	x0, [sp, #120]
  1c:	ldr	h0, [sp, #30]
  20:	str	h0, [sp, #56]
  24:	ldrh	w0, [sp, #56]
  28:	ubfx	x0, x0, #0, #10
  2c:	and	w0, w0, #0xffff
  30:	and	x0, x0, #0xffff
  34:	str	x0, [sp, #112]
  38:	ldrb	w0, [sp, #57]
  3c:	ubfx	x0, x0, #2, #5
  40:	and	w0, w0, #0xff
  44:	and	x0, x0, #0xff
  48:	str	x0, [sp, #104]
  4c:	ldrb	w0, [sp, #57]
  50:	ubfx	x0, x0, #7, #1
  54:	and	w0, w0, #0xff
  58:	and	x0, x0, #0xff
  5c:	str	x0, [sp, #96]
  60:	ldr	x0, [sp, #96]
  64:	str	x0, [sp, #88]
  68:	ldr	x0, [sp, #112]
  6c:	str	x0, [sp, #128]
  70:	str	xzr, [sp, #152]
  74:	ldr	x0, [sp, #104]
  78:	add	x0, x0, #0x1
  7c:	and	x0, x0, #0x1e
  80:	cmp	x0, #0x0
  84:	b.eq	ac <__extendhftf2+0xac>  // b.none
  88:	ldr	x1, [sp, #104]
  8c:	mov	x0, #0x3ff0                	// #16368
  90:	add	x0, x1, x0
  94:	str	x0, [sp, #136]
  98:	ldr	x0, [sp, #128]
  9c:	lsl	x0, x0, #38
  a0:	str	x0, [sp, #152]
  a4:	str	xzr, [sp, #128]
  a8:	b	1a4 <__extendhftf2+0x1a4>
  ac:	ldr	x0, [sp, #104]
  b0:	cmp	x0, #0x0
  b4:	b.ne	158 <__extendhftf2+0x158>  // b.any
  b8:	ldr	x0, [sp, #112]
  bc:	cmp	x0, #0x0
  c0:	b.ne	cc <__extendhftf2+0xcc>  // b.any
  c4:	str	xzr, [sp, #136]
  c8:	b	1a4 <__extendhftf2+0x1a4>
  cc:	ldr	x0, [sp, #112]
  d0:	clz	x0, x0
  d4:	str	w0, [sp, #84]
  d8:	ldr	w0, [sp, #84]
  dc:	cmp	w0, #0xe
  e0:	b.gt	128 <__extendhftf2+0x128>
  e4:	ldr	w0, [sp, #84]
  e8:	add	w0, w0, #0x31
  ec:	ldr	x1, [sp, #152]
  f0:	lsl	x1, x1, x0
  f4:	mov	w2, #0xf                   	// #15
  f8:	ldr	w0, [sp, #84]
  fc:	sub	w0, w2, w0
 100:	ldr	x2, [sp, #128]
 104:	lsr	x0, x2, x0
 108:	orr	x0, x1, x0
 10c:	str	x0, [sp, #152]
 110:	ldr	w0, [sp, #84]
 114:	add	w0, w0, #0x31
 118:	ldr	x1, [sp, #128]
 11c:	lsl	x0, x1, x0
 120:	str	x0, [sp, #128]
 124:	b	140 <__extendhftf2+0x140>
 128:	ldr	w0, [sp, #84]
 12c:	sub	w0, w0, #0xf
 130:	ldr	x1, [sp, #128]
 134:	lsl	x0, x1, x0
 138:	str	x0, [sp, #152]
 13c:	str	xzr, [sp, #128]
 140:	mov	w1, #0x4026                	// #16422
 144:	ldr	w0, [sp, #84]
 148:	sub	w0, w1, w0
 14c:	sxtw	x0, w0
 150:	str	x0, [sp, #136]
 154:	b	1a4 <__extendhftf2+0x1a4>
 158:	mov	x0, #0x7fff                	// #32767
 15c:	str	x0, [sp, #136]
 160:	ldr	x0, [sp, #112]
 164:	cmp	x0, #0x0
 168:	b.eq	1a4 <__extendhftf2+0x1a4>  // b.none
 16c:	ldr	x0, [sp, #112]
 170:	and	x0, x0, #0x200
 174:	cmp	x0, #0x0
 178:	b.ne	188 <__extendhftf2+0x188>  // b.any
 17c:	ldr	w0, [sp, #148]
 180:	orr	w0, w0, #0x1
 184:	str	w0, [sp, #148]
 188:	ldr	x0, [sp, #128]
 18c:	lsl	x0, x0, #38
 190:	str	x0, [sp, #152]
 194:	str	xzr, [sp, #128]
 198:	ldr	x0, [sp, #152]
 19c:	orr	x0, x0, #0x800000000000
 1a0:	str	x0, [sp, #152]
 1a4:	ldr	x0, [sp, #128]
 1a8:	str	x0, [sp, #32]
 1ac:	ldr	x0, [sp, #152]
 1b0:	and	x1, x0, #0xffffffffffff
 1b4:	ldr	x0, [sp, #40]
 1b8:	bfxil	x0, x1, #0, #48
 1bc:	str	x0, [sp, #40]
 1c0:	ldr	x0, [sp, #136]
 1c4:	and	w0, w0, #0x7fff
 1c8:	and	w1, w0, #0xffff
 1cc:	ldrh	w0, [sp, #46]
 1d0:	bfxil	w0, w1, #0, #15
 1d4:	strh	w0, [sp, #46]
 1d8:	ldr	x0, [sp, #88]
 1dc:	and	w0, w0, #0x1
 1e0:	and	w1, w0, #0xff
 1e4:	ldrb	w0, [sp, #47]
 1e8:	bfi	w0, w1, #7, #1
 1ec:	strb	w0, [sp, #47]
 1f0:	ldr	q0, [sp, #32]
 1f4:	str	q0, [sp, #64]
 1f8:	ldrsw	x0, [sp, #148]
 1fc:	cmp	x0, #0x0
 200:	b.eq	20c <__extendhftf2+0x20c>  // b.none
 204:	ldr	w0, [sp, #148]
 208:	bl	0 <__sfp_handle_exceptions>
 20c:	ldr	q0, [sp, #64]
 210:	ldp	x29, x30, [sp], #160
 214:	ret

trunctfsf2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__trunctfsf2>:
   0:	stp	x29, x30, [sp, #-144]!
   4:	mov	x29, sp
   8:	str	q0, [sp, #16]
   c:	str	wzr, [sp, #116]
  10:	str	xzr, [sp, #104]
  14:	mrs	x0, fpcr
  18:	str	x0, [sp, #104]
  1c:	ldr	q0, [sp, #16]
  20:	str	q0, [sp, #48]
  24:	ldr	x0, [sp, #48]
  28:	str	x0, [sp, #120]
  2c:	ldr	x0, [sp, #56]
  30:	ubfx	x0, x0, #0, #48
  34:	str	x0, [sp, #96]
  38:	ldrh	w0, [sp, #62]
  3c:	ubfx	x0, x0, #0, #15
  40:	and	w0, w0, #0xffff
  44:	and	x0, x0, #0xffff
  48:	str	x0, [sp, #88]
  4c:	ldrb	w0, [sp, #63]
  50:	ubfx	x0, x0, #7, #1
  54:	and	w0, w0, #0xff
  58:	and	x0, x0, #0xff
  5c:	str	x0, [sp, #80]
  60:	ldr	x0, [sp, #96]
  64:	lsl	x1, x0, #3
  68:	ldr	x0, [sp, #120]
  6c:	lsr	x0, x0, #61
  70:	orr	x0, x1, x0
  74:	str	x0, [sp, #96]
  78:	ldr	x0, [sp, #120]
  7c:	lsl	x0, x0, #3
  80:	str	x0, [sp, #120]
  84:	ldr	x0, [sp, #80]
  88:	str	x0, [sp, #72]
  8c:	ldr	x0, [sp, #88]
  90:	add	x0, x0, #0x1
  94:	and	x0, x0, #0x7ffe
  98:	cmp	x0, #0x0
  9c:	b.eq	2b4 <__trunctfsf2+0x2b4>  // b.none
  a0:	ldr	x1, [sp, #88]
  a4:	mov	x0, #0xffffffffffffc080    	// #-16256
  a8:	add	x0, x1, x0
  ac:	str	x0, [sp, #136]
  b0:	ldr	x0, [sp, #136]
  b4:	cmp	x0, #0xfe
  b8:	b.le	140 <__trunctfsf2+0x140>
  bc:	ldr	x0, [sp, #104]
  c0:	and	x0, x0, #0xc00000
  c4:	cmp	x0, #0x0
  c8:	b.eq	104 <__trunctfsf2+0x104>  // b.none
  cc:	ldr	x0, [sp, #104]
  d0:	and	x0, x0, #0xc00000
  d4:	cmp	x0, #0x400, lsl #12
  d8:	b.ne	e8 <__trunctfsf2+0xe8>  // b.any
  dc:	ldr	x0, [sp, #72]
  e0:	cmp	x0, #0x0
  e4:	b.eq	104 <__trunctfsf2+0x104>  // b.none
  e8:	ldr	x0, [sp, #104]
  ec:	and	x0, x0, #0xc00000
  f0:	cmp	x0, #0x800, lsl #12
  f4:	b.ne	114 <__trunctfsf2+0x114>  // b.any
  f8:	ldr	x0, [sp, #72]
  fc:	cmp	x0, #0x0
 100:	b.eq	114 <__trunctfsf2+0x114>  // b.none
 104:	mov	x0, #0xff                  	// #255
 108:	str	x0, [sp, #136]
 10c:	str	xzr, [sp, #128]
 110:	b	124 <__trunctfsf2+0x124>
 114:	mov	x0, #0xfe                  	// #254
 118:	str	x0, [sp, #136]
 11c:	mov	x0, #0xffffffffffffffff    	// #-1
 120:	str	x0, [sp, #128]
 124:	ldr	w0, [sp, #116]
 128:	orr	w0, w0, #0x10
 12c:	str	w0, [sp, #116]
 130:	ldr	w0, [sp, #116]
 134:	orr	w0, w0, #0x4
 138:	str	w0, [sp, #116]
 13c:	b	388 <__trunctfsf2+0x388>
 140:	ldr	x0, [sp, #136]
 144:	cmp	x0, #0x0
 148:	b.gt	274 <__trunctfsf2+0x274>
 14c:	ldr	x0, [sp, #136]
 150:	cmn	x0, #0x17
 154:	b.ge	170 <__trunctfsf2+0x170>  // b.tcont
 158:	str	xzr, [sp, #120]
 15c:	str	xzr, [sp, #96]
 160:	ldr	x0, [sp, #120]
 164:	orr	x0, x0, #0x1
 168:	str	x0, [sp, #120]
 16c:	b	26c <__trunctfsf2+0x26c>
 170:	ldr	x0, [sp, #96]
 174:	orr	x0, x0, #0x8000000000000
 178:	str	x0, [sp, #96]
 17c:	mov	x1, #0x5a                  	// #90
 180:	ldr	x0, [sp, #136]
 184:	sub	x0, x1, x0
 188:	cmp	x0, #0x3f
 18c:	b.gt	204 <__trunctfsf2+0x204>
 190:	ldr	x0, [sp, #136]
 194:	sub	w0, w0, #0x1a
 198:	ldr	x1, [sp, #96]
 19c:	lsl	x1, x1, x0
 1a0:	ldr	x0, [sp, #136]
 1a4:	mov	w2, w0
 1a8:	mov	w0, #0x5a                  	// #90
 1ac:	sub	w0, w0, w2
 1b0:	ldr	x2, [sp, #120]
 1b4:	lsr	x0, x2, x0
 1b8:	orr	x1, x1, x0
 1bc:	ldr	x0, [sp, #136]
 1c0:	sub	w0, w0, #0x1a
 1c4:	ldr	x2, [sp, #120]
 1c8:	lsl	x0, x2, x0
 1cc:	cmp	x0, #0x0
 1d0:	cset	w0, ne  // ne = any
 1d4:	and	w0, w0, #0xff
 1d8:	sxtw	x0, w0
 1dc:	orr	x0, x1, x0
 1e0:	str	x0, [sp, #120]
 1e4:	ldr	x0, [sp, #136]
 1e8:	mov	w1, w0
 1ec:	mov	w0, #0x5a                  	// #90
 1f0:	sub	w0, w0, w1
 1f4:	ldr	x1, [sp, #96]
 1f8:	lsr	x0, x1, x0
 1fc:	str	x0, [sp, #96]
 200:	b	26c <__trunctfsf2+0x26c>
 204:	ldr	x0, [sp, #136]
 208:	mov	w1, w0
 20c:	mov	w0, #0x1a                  	// #26
 210:	sub	w0, w0, w1
 214:	ldr	x1, [sp, #96]
 218:	lsr	x1, x1, x0
 21c:	mov	x2, #0x5a                  	// #90
 220:	ldr	x0, [sp, #136]
 224:	sub	x0, x2, x0
 228:	cmp	x0, #0x40
 22c:	b.eq	244 <__trunctfsf2+0x244>  // b.none
 230:	ldr	x0, [sp, #136]
 234:	add	w0, w0, #0x26
 238:	ldr	x2, [sp, #96]
 23c:	lsl	x0, x2, x0
 240:	b	248 <__trunctfsf2+0x248>
 244:	mov	x0, #0x0                   	// #0
 248:	ldr	x2, [sp, #120]
 24c:	orr	x0, x0, x2
 250:	cmp	x0, #0x0
 254:	cset	w0, ne  // ne = any
 258:	and	w0, w0, #0xff
 25c:	and	x0, x0, #0xff
 260:	orr	x0, x1, x0
 264:	str	x0, [sp, #120]
 268:	str	xzr, [sp, #96]
 26c:	str	xzr, [sp, #136]
 270:	b	2a8 <__trunctfsf2+0x2a8>
 274:	ldr	x0, [sp, #96]
 278:	lsr	x1, x0, #25
 27c:	ldr	x0, [sp, #96]
 280:	lsl	x2, x0, #39
 284:	ldr	x0, [sp, #120]
 288:	orr	x0, x2, x0
 28c:	cmp	x0, #0x0
 290:	cset	w0, ne  // ne = any
 294:	and	w0, w0, #0xff
 298:	and	x0, x0, #0xff
 29c:	orr	x0, x1, x0
 2a0:	str	x0, [sp, #120]
 2a4:	str	xzr, [sp, #96]
 2a8:	ldr	x0, [sp, #120]
 2ac:	str	x0, [sp, #128]
 2b0:	b	388 <__trunctfsf2+0x388>
 2b4:	ldr	x0, [sp, #88]
 2b8:	cmp	x0, #0x0
 2bc:	b.ne	2f4 <__trunctfsf2+0x2f4>  // b.any
 2c0:	str	xzr, [sp, #136]
 2c4:	ldr	x1, [sp, #96]
 2c8:	ldr	x0, [sp, #120]
 2cc:	orr	x0, x1, x0
 2d0:	cmp	x0, #0x0
 2d4:	b.ne	2e0 <__trunctfsf2+0x2e0>  // b.any
 2d8:	str	xzr, [sp, #128]
 2dc:	b	388 <__trunctfsf2+0x388>
 2e0:	str	xzr, [sp, #128]
 2e4:	ldr	x0, [sp, #128]
 2e8:	orr	x0, x0, #0x1
 2ec:	str	x0, [sp, #128]
 2f0:	b	388 <__trunctfsf2+0x388>
 2f4:	mov	x0, #0xff                  	// #255
 2f8:	str	x0, [sp, #136]
 2fc:	ldr	x1, [sp, #96]
 300:	ldr	x0, [sp, #120]
 304:	orr	x0, x1, x0
 308:	cmp	x0, #0x0
 30c:	b.ne	318 <__trunctfsf2+0x318>  // b.any
 310:	str	xzr, [sp, #128]
 314:	b	388 <__trunctfsf2+0x388>
 318:	ldr	x1, [sp, #88]
 31c:	mov	x0, #0x7fff                	// #32767
 320:	cmp	x1, x0
 324:	b.ne	358 <__trunctfsf2+0x358>  // b.any
 328:	ldr	x1, [sp, #96]
 32c:	ldr	x0, [sp, #120]
 330:	orr	x0, x1, x0
 334:	cmp	x0, #0x0
 338:	b.eq	358 <__trunctfsf2+0x358>  // b.none
 33c:	ldr	x0, [sp, #96]
 340:	and	x0, x0, #0x4000000000000
 344:	cmp	x0, #0x0
 348:	b.ne	358 <__trunctfsf2+0x358>  // b.any
 34c:	ldr	w0, [sp, #116]
 350:	orr	w0, w0, #0x1
 354:	str	w0, [sp, #116]
 358:	ldr	x0, [sp, #96]
 35c:	lsr	x0, x0, #25
 360:	str	x0, [sp, #120]
 364:	str	xzr, [sp, #96]
 368:	ldr	x0, [sp, #120]
 36c:	str	x0, [sp, #128]
 370:	ldr	x0, [sp, #128]
 374:	and	x0, x0, #0xfffffffffffffff8
 378:	str	x0, [sp, #128]
 37c:	ldr	x0, [sp, #128]
 380:	orr	x0, x0, #0x2000000
 384:	str	x0, [sp, #128]
 388:	ldr	x0, [sp, #136]
 38c:	cmp	x0, #0x0
 390:	b.ne	3a8 <__trunctfsf2+0x3a8>  // b.any
 394:	ldr	x0, [sp, #128]
 398:	cmp	x0, #0x0
 39c:	b.eq	3a8 <__trunctfsf2+0x3a8>  // b.none
 3a0:	mov	w0, #0x1                   	// #1
 3a4:	b	3ac <__trunctfsf2+0x3ac>
 3a8:	mov	w0, #0x0                   	// #0
 3ac:	str	w0, [sp, #68]
 3b0:	ldr	x0, [sp, #128]
 3b4:	and	x0, x0, #0x7
 3b8:	cmp	x0, #0x0
 3bc:	b.eq	480 <__trunctfsf2+0x480>  // b.none
 3c0:	ldr	w0, [sp, #116]
 3c4:	orr	w0, w0, #0x10
 3c8:	str	w0, [sp, #116]
 3cc:	ldr	x0, [sp, #104]
 3d0:	and	x0, x0, #0xc00000
 3d4:	cmp	x0, #0xc00, lsl #12
 3d8:	b.eq	488 <__trunctfsf2+0x488>  // b.none
 3dc:	cmp	x0, #0xc00, lsl #12
 3e0:	b.hi	48c <__trunctfsf2+0x48c>  // b.pmore
 3e4:	cmp	x0, #0x800, lsl #12
 3e8:	b.eq	454 <__trunctfsf2+0x454>  // b.none
 3ec:	cmp	x0, #0x800, lsl #12
 3f0:	b.hi	48c <__trunctfsf2+0x48c>  // b.pmore
 3f4:	cmp	x0, #0x0
 3f8:	b.eq	408 <__trunctfsf2+0x408>  // b.none
 3fc:	cmp	x0, #0x400, lsl #12
 400:	b.eq	428 <__trunctfsf2+0x428>  // b.none
 404:	b	48c <__trunctfsf2+0x48c>
 408:	ldr	x0, [sp, #128]
 40c:	and	x0, x0, #0xf
 410:	cmp	x0, #0x4
 414:	b.eq	488 <__trunctfsf2+0x488>  // b.none
 418:	ldr	x0, [sp, #128]
 41c:	add	x0, x0, #0x4
 420:	str	x0, [sp, #128]
 424:	b	488 <__trunctfsf2+0x488>
 428:	ldr	x0, [sp, #72]
 42c:	cmp	x0, #0x0
 430:	b.ne	488 <__trunctfsf2+0x488>  // b.any
 434:	ldr	x0, [sp, #128]
 438:	and	x0, x0, #0x7
 43c:	cmp	x0, #0x0
 440:	b.eq	488 <__trunctfsf2+0x488>  // b.none
 444:	ldr	x0, [sp, #128]
 448:	add	x0, x0, #0x8
 44c:	str	x0, [sp, #128]
 450:	b	488 <__trunctfsf2+0x488>
 454:	ldr	x0, [sp, #72]
 458:	cmp	x0, #0x0
 45c:	b.eq	488 <__trunctfsf2+0x488>  // b.none
 460:	ldr	x0, [sp, #128]
 464:	and	x0, x0, #0x7
 468:	cmp	x0, #0x0
 46c:	b.eq	488 <__trunctfsf2+0x488>  // b.none
 470:	ldr	x0, [sp, #128]
 474:	add	x0, x0, #0x8
 478:	str	x0, [sp, #128]
 47c:	b	488 <__trunctfsf2+0x488>
 480:	nop
 484:	b	48c <__trunctfsf2+0x48c>
 488:	nop
 48c:	ldr	w0, [sp, #68]
 490:	cmp	w0, #0x0
 494:	b.eq	4c4 <__trunctfsf2+0x4c4>  // b.none
 498:	ldr	w0, [sp, #116]
 49c:	and	w0, w0, #0x10
 4a0:	cmp	w0, #0x0
 4a4:	b.ne	4b8 <__trunctfsf2+0x4b8>  // b.any
 4a8:	ldr	x0, [sp, #104]
 4ac:	and	x0, x0, #0x800
 4b0:	cmp	x0, #0x0
 4b4:	b.eq	4c4 <__trunctfsf2+0x4c4>  // b.none
 4b8:	ldr	w0, [sp, #116]
 4bc:	orr	w0, w0, #0x8
 4c0:	str	w0, [sp, #116]
 4c4:	ldr	x0, [sp, #128]
 4c8:	and	x0, x0, #0x4000000
 4cc:	cmp	x0, #0x0
 4d0:	b.eq	578 <__trunctfsf2+0x578>  // b.none
 4d4:	ldr	x0, [sp, #128]
 4d8:	and	x0, x0, #0xfffffffffbffffff
 4dc:	str	x0, [sp, #128]
 4e0:	ldr	x0, [sp, #136]
 4e4:	add	x0, x0, #0x1
 4e8:	str	x0, [sp, #136]
 4ec:	ldr	x0, [sp, #136]
 4f0:	cmp	x0, #0xff
 4f4:	b.ne	578 <__trunctfsf2+0x578>  // b.any
 4f8:	ldr	x0, [sp, #104]
 4fc:	and	x0, x0, #0xc00000
 500:	cmp	x0, #0x0
 504:	b.eq	540 <__trunctfsf2+0x540>  // b.none
 508:	ldr	x0, [sp, #104]
 50c:	and	x0, x0, #0xc00000
 510:	cmp	x0, #0x400, lsl #12
 514:	b.ne	524 <__trunctfsf2+0x524>  // b.any
 518:	ldr	x0, [sp, #72]
 51c:	cmp	x0, #0x0
 520:	b.eq	540 <__trunctfsf2+0x540>  // b.none
 524:	ldr	x0, [sp, #104]
 528:	and	x0, x0, #0xc00000
 52c:	cmp	x0, #0x800, lsl #12
 530:	b.ne	550 <__trunctfsf2+0x550>  // b.any
 534:	ldr	x0, [sp, #72]
 538:	cmp	x0, #0x0
 53c:	b.eq	550 <__trunctfsf2+0x550>  // b.none
 540:	mov	x0, #0xff                  	// #255
 544:	str	x0, [sp, #136]
 548:	str	xzr, [sp, #128]
 54c:	b	560 <__trunctfsf2+0x560>
 550:	mov	x0, #0xfe                  	// #254
 554:	str	x0, [sp, #136]
 558:	mov	x0, #0xffffffffffffffff    	// #-1
 55c:	str	x0, [sp, #128]
 560:	ldr	w0, [sp, #116]
 564:	orr	w0, w0, #0x10
 568:	str	w0, [sp, #116]
 56c:	ldr	w0, [sp, #116]
 570:	orr	w0, w0, #0x4
 574:	str	w0, [sp, #116]
 578:	ldr	x0, [sp, #128]
 57c:	lsr	x0, x0, #3
 580:	str	x0, [sp, #128]
 584:	ldr	x0, [sp, #136]
 588:	cmp	x0, #0xff
 58c:	b.ne	5a8 <__trunctfsf2+0x5a8>  // b.any
 590:	ldr	x0, [sp, #128]
 594:	cmp	x0, #0x0
 598:	b.eq	5a8 <__trunctfsf2+0x5a8>  // b.none
 59c:	ldr	x0, [sp, #128]
 5a0:	orr	x0, x0, #0x400000
 5a4:	str	x0, [sp, #128]
 5a8:	ldr	x0, [sp, #128]
 5ac:	mov	w1, w0
 5b0:	and	w1, w1, #0x7fffff
 5b4:	ldr	w0, [sp, #40]
 5b8:	bfxil	w0, w1, #0, #23
 5bc:	str	w0, [sp, #40]
 5c0:	ldr	x0, [sp, #136]
 5c4:	and	w1, w0, #0xff
 5c8:	ldrh	w0, [sp, #42]
 5cc:	bfi	w0, w1, #7, #8
 5d0:	strh	w0, [sp, #42]
 5d4:	ldr	x0, [sp, #72]
 5d8:	and	w0, w0, #0x1
 5dc:	and	w1, w0, #0xff
 5e0:	ldrb	w0, [sp, #43]
 5e4:	bfi	w0, w1, #7, #1
 5e8:	strb	w0, [sp, #43]
 5ec:	ldr	s0, [sp, #40]
 5f0:	str	s0, [sp, #64]
 5f4:	ldrsw	x0, [sp, #116]
 5f8:	cmp	x0, #0x0
 5fc:	b.eq	608 <__trunctfsf2+0x608>  // b.none
 600:	ldr	w0, [sp, #116]
 604:	bl	0 <__sfp_handle_exceptions>
 608:	ldr	s0, [sp, #64]
 60c:	ldp	x29, x30, [sp], #144
 610:	ret

trunctfdf2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__trunctfdf2>:
   0:	stp	x29, x30, [sp, #-160]!
   4:	mov	x29, sp
   8:	str	q0, [sp, #16]
   c:	str	wzr, [sp, #132]
  10:	str	xzr, [sp, #120]
  14:	mrs	x0, fpcr
  18:	str	x0, [sp, #120]
  1c:	ldr	q0, [sp, #16]
  20:	str	q0, [sp, #48]
  24:	ldr	x0, [sp, #48]
  28:	str	x0, [sp, #144]
  2c:	ldr	x0, [sp, #56]
  30:	ubfx	x0, x0, #0, #48
  34:	str	x0, [sp, #112]
  38:	ldrh	w0, [sp, #62]
  3c:	ubfx	x0, x0, #0, #15
  40:	and	w0, w0, #0xffff
  44:	and	x0, x0, #0xffff
  48:	str	x0, [sp, #104]
  4c:	ldrb	w0, [sp, #63]
  50:	ubfx	x0, x0, #7, #1
  54:	and	w0, w0, #0xff
  58:	and	x0, x0, #0xff
  5c:	str	x0, [sp, #96]
  60:	ldr	x0, [sp, #112]
  64:	lsl	x1, x0, #3
  68:	ldr	x0, [sp, #144]
  6c:	lsr	x0, x0, #61
  70:	orr	x0, x1, x0
  74:	str	x0, [sp, #112]
  78:	ldr	x0, [sp, #144]
  7c:	lsl	x0, x0, #3
  80:	str	x0, [sp, #144]
  84:	ldr	x0, [sp, #96]
  88:	str	x0, [sp, #88]
  8c:	ldr	x0, [sp, #104]
  90:	add	x0, x0, #0x1
  94:	and	x0, x0, #0x7ffe
  98:	cmp	x0, #0x0
  9c:	b.eq	2c0 <__trunctfdf2+0x2c0>  // b.none
  a0:	ldr	x1, [sp, #104]
  a4:	mov	x0, #0xffffffffffffc400    	// #-15360
  a8:	add	x0, x1, x0
  ac:	str	x0, [sp, #136]
  b0:	ldr	x0, [sp, #136]
  b4:	cmp	x0, #0x7fe
  b8:	b.le	140 <__trunctfdf2+0x140>
  bc:	ldr	x0, [sp, #120]
  c0:	and	x0, x0, #0xc00000
  c4:	cmp	x0, #0x0
  c8:	b.eq	104 <__trunctfdf2+0x104>  // b.none
  cc:	ldr	x0, [sp, #120]
  d0:	and	x0, x0, #0xc00000
  d4:	cmp	x0, #0x400, lsl #12
  d8:	b.ne	e8 <__trunctfdf2+0xe8>  // b.any
  dc:	ldr	x0, [sp, #88]
  e0:	cmp	x0, #0x0
  e4:	b.eq	104 <__trunctfdf2+0x104>  // b.none
  e8:	ldr	x0, [sp, #120]
  ec:	and	x0, x0, #0xc00000
  f0:	cmp	x0, #0x800, lsl #12
  f4:	b.ne	114 <__trunctfdf2+0x114>  // b.any
  f8:	ldr	x0, [sp, #88]
  fc:	cmp	x0, #0x0
 100:	b.eq	114 <__trunctfdf2+0x114>  // b.none
 104:	mov	x0, #0x7ff                 	// #2047
 108:	str	x0, [sp, #136]
 10c:	str	xzr, [sp, #152]
 110:	b	124 <__trunctfdf2+0x124>
 114:	mov	x0, #0x7fe                 	// #2046
 118:	str	x0, [sp, #136]
 11c:	mov	x0, #0xffffffffffffffff    	// #-1
 120:	str	x0, [sp, #152]
 124:	ldr	w0, [sp, #132]
 128:	orr	w0, w0, #0x10
 12c:	str	w0, [sp, #132]
 130:	ldr	w0, [sp, #132]
 134:	orr	w0, w0, #0x4
 138:	str	w0, [sp, #132]
 13c:	b	3a8 <__trunctfdf2+0x3a8>
 140:	ldr	x0, [sp, #136]
 144:	cmp	x0, #0x0
 148:	b.gt	274 <__trunctfdf2+0x274>
 14c:	ldr	x0, [sp, #136]
 150:	cmn	x0, #0x34
 154:	b.ge	170 <__trunctfdf2+0x170>  // b.tcont
 158:	str	xzr, [sp, #144]
 15c:	str	xzr, [sp, #112]
 160:	ldr	x0, [sp, #144]
 164:	orr	x0, x0, #0x1
 168:	str	x0, [sp, #144]
 16c:	b	26c <__trunctfdf2+0x26c>
 170:	ldr	x0, [sp, #112]
 174:	orr	x0, x0, #0x8000000000000
 178:	str	x0, [sp, #112]
 17c:	mov	x1, #0x3d                  	// #61
 180:	ldr	x0, [sp, #136]
 184:	sub	x0, x1, x0
 188:	cmp	x0, #0x3f
 18c:	b.gt	204 <__trunctfdf2+0x204>
 190:	ldr	x0, [sp, #136]
 194:	add	w0, w0, #0x3
 198:	ldr	x1, [sp, #112]
 19c:	lsl	x1, x1, x0
 1a0:	ldr	x0, [sp, #136]
 1a4:	mov	w2, w0
 1a8:	mov	w0, #0x3d                  	// #61
 1ac:	sub	w0, w0, w2
 1b0:	ldr	x2, [sp, #144]
 1b4:	lsr	x0, x2, x0
 1b8:	orr	x1, x1, x0
 1bc:	ldr	x0, [sp, #136]
 1c0:	add	w0, w0, #0x3
 1c4:	ldr	x2, [sp, #144]
 1c8:	lsl	x0, x2, x0
 1cc:	cmp	x0, #0x0
 1d0:	cset	w0, ne  // ne = any
 1d4:	and	w0, w0, #0xff
 1d8:	sxtw	x0, w0
 1dc:	orr	x0, x1, x0
 1e0:	str	x0, [sp, #144]
 1e4:	ldr	x0, [sp, #136]
 1e8:	mov	w1, w0
 1ec:	mov	w0, #0x3d                  	// #61
 1f0:	sub	w0, w0, w1
 1f4:	ldr	x1, [sp, #112]
 1f8:	lsr	x0, x1, x0
 1fc:	str	x0, [sp, #112]
 200:	b	26c <__trunctfdf2+0x26c>
 204:	ldr	x0, [sp, #136]
 208:	mov	w1, w0
 20c:	mov	w0, #0xfffffffd            	// #-3
 210:	sub	w0, w0, w1
 214:	ldr	x1, [sp, #112]
 218:	lsr	x1, x1, x0
 21c:	mov	x2, #0x3d                  	// #61
 220:	ldr	x0, [sp, #136]
 224:	sub	x0, x2, x0
 228:	cmp	x0, #0x40
 22c:	b.eq	244 <__trunctfdf2+0x244>  // b.none
 230:	ldr	x0, [sp, #136]
 234:	add	w0, w0, #0x43
 238:	ldr	x2, [sp, #112]
 23c:	lsl	x0, x2, x0
 240:	b	248 <__trunctfdf2+0x248>
 244:	mov	x0, #0x0                   	// #0
 248:	ldr	x2, [sp, #144]
 24c:	orr	x0, x0, x2
 250:	cmp	x0, #0x0
 254:	cset	w0, ne  // ne = any
 258:	and	w0, w0, #0xff
 25c:	and	x0, x0, #0xff
 260:	orr	x0, x1, x0
 264:	str	x0, [sp, #144]
 268:	str	xzr, [sp, #112]
 26c:	str	xzr, [sp, #136]
 270:	b	2b4 <__trunctfdf2+0x2b4>
 274:	ldr	x0, [sp, #112]
 278:	lsl	x1, x0, #4
 27c:	ldr	x0, [sp, #144]
 280:	lsr	x0, x0, #60
 284:	orr	x1, x1, x0
 288:	ldr	x0, [sp, #144]
 28c:	lsl	x0, x0, #4
 290:	cmp	x0, #0x0
 294:	cset	w0, ne  // ne = any
 298:	and	w0, w0, #0xff
 29c:	sxtw	x0, w0
 2a0:	orr	x0, x1, x0
 2a4:	str	x0, [sp, #144]
 2a8:	ldr	x0, [sp, #112]
 2ac:	lsr	x0, x0, #60
 2b0:	str	x0, [sp, #112]
 2b4:	ldr	x0, [sp, #144]
 2b8:	str	x0, [sp, #152]
 2bc:	b	3a8 <__trunctfdf2+0x3a8>
 2c0:	ldr	x0, [sp, #104]
 2c4:	cmp	x0, #0x0
 2c8:	b.ne	300 <__trunctfdf2+0x300>  // b.any
 2cc:	str	xzr, [sp, #136]
 2d0:	ldr	x1, [sp, #112]
 2d4:	ldr	x0, [sp, #144]
 2d8:	orr	x0, x1, x0
 2dc:	cmp	x0, #0x0
 2e0:	b.ne	2ec <__trunctfdf2+0x2ec>  // b.any
 2e4:	str	xzr, [sp, #152]
 2e8:	b	3a8 <__trunctfdf2+0x3a8>
 2ec:	str	xzr, [sp, #152]
 2f0:	ldr	x0, [sp, #152]
 2f4:	orr	x0, x0, #0x1
 2f8:	str	x0, [sp, #152]
 2fc:	b	3a8 <__trunctfdf2+0x3a8>
 300:	mov	x0, #0x7ff                 	// #2047
 304:	str	x0, [sp, #136]
 308:	ldr	x1, [sp, #112]
 30c:	ldr	x0, [sp, #144]
 310:	orr	x0, x1, x0
 314:	cmp	x0, #0x0
 318:	b.ne	324 <__trunctfdf2+0x324>  // b.any
 31c:	str	xzr, [sp, #152]
 320:	b	3a8 <__trunctfdf2+0x3a8>
 324:	ldr	x1, [sp, #104]
 328:	mov	x0, #0x7fff                	// #32767
 32c:	cmp	x1, x0
 330:	b.ne	364 <__trunctfdf2+0x364>  // b.any
 334:	ldr	x1, [sp, #112]
 338:	ldr	x0, [sp, #144]
 33c:	orr	x0, x1, x0
 340:	cmp	x0, #0x0
 344:	b.eq	364 <__trunctfdf2+0x364>  // b.none
 348:	ldr	x0, [sp, #112]
 34c:	and	x0, x0, #0x4000000000000
 350:	cmp	x0, #0x0
 354:	b.ne	364 <__trunctfdf2+0x364>  // b.any
 358:	ldr	w0, [sp, #132]
 35c:	orr	w0, w0, #0x1
 360:	str	w0, [sp, #132]
 364:	ldr	x0, [sp, #144]
 368:	lsr	x1, x0, #60
 36c:	ldr	x0, [sp, #112]
 370:	lsl	x0, x0, #4
 374:	orr	x0, x1, x0
 378:	str	x0, [sp, #144]
 37c:	ldr	x0, [sp, #112]
 380:	lsr	x0, x0, #60
 384:	str	x0, [sp, #112]
 388:	ldr	x0, [sp, #144]
 38c:	str	x0, [sp, #152]
 390:	ldr	x0, [sp, #152]
 394:	and	x0, x0, #0xfffffffffffffff8
 398:	str	x0, [sp, #152]
 39c:	ldr	x0, [sp, #152]
 3a0:	orr	x0, x0, #0x40000000000000
 3a4:	str	x0, [sp, #152]
 3a8:	ldr	x0, [sp, #136]
 3ac:	cmp	x0, #0x0
 3b0:	b.ne	3c8 <__trunctfdf2+0x3c8>  // b.any
 3b4:	ldr	x0, [sp, #152]
 3b8:	cmp	x0, #0x0
 3bc:	b.eq	3c8 <__trunctfdf2+0x3c8>  // b.none
 3c0:	mov	w0, #0x1                   	// #1
 3c4:	b	3cc <__trunctfdf2+0x3cc>
 3c8:	mov	w0, #0x0                   	// #0
 3cc:	str	w0, [sp, #84]
 3d0:	ldr	x0, [sp, #152]
 3d4:	and	x0, x0, #0x7
 3d8:	cmp	x0, #0x0
 3dc:	b.eq	4a0 <__trunctfdf2+0x4a0>  // b.none
 3e0:	ldr	w0, [sp, #132]
 3e4:	orr	w0, w0, #0x10
 3e8:	str	w0, [sp, #132]
 3ec:	ldr	x0, [sp, #120]
 3f0:	and	x0, x0, #0xc00000
 3f4:	cmp	x0, #0xc00, lsl #12
 3f8:	b.eq	4a8 <__trunctfdf2+0x4a8>  // b.none
 3fc:	cmp	x0, #0xc00, lsl #12
 400:	b.hi	4ac <__trunctfdf2+0x4ac>  // b.pmore
 404:	cmp	x0, #0x800, lsl #12
 408:	b.eq	474 <__trunctfdf2+0x474>  // b.none
 40c:	cmp	x0, #0x800, lsl #12
 410:	b.hi	4ac <__trunctfdf2+0x4ac>  // b.pmore
 414:	cmp	x0, #0x0
 418:	b.eq	428 <__trunctfdf2+0x428>  // b.none
 41c:	cmp	x0, #0x400, lsl #12
 420:	b.eq	448 <__trunctfdf2+0x448>  // b.none
 424:	b	4ac <__trunctfdf2+0x4ac>
 428:	ldr	x0, [sp, #152]
 42c:	and	x0, x0, #0xf
 430:	cmp	x0, #0x4
 434:	b.eq	4a8 <__trunctfdf2+0x4a8>  // b.none
 438:	ldr	x0, [sp, #152]
 43c:	add	x0, x0, #0x4
 440:	str	x0, [sp, #152]
 444:	b	4a8 <__trunctfdf2+0x4a8>
 448:	ldr	x0, [sp, #88]
 44c:	cmp	x0, #0x0
 450:	b.ne	4a8 <__trunctfdf2+0x4a8>  // b.any
 454:	ldr	x0, [sp, #152]
 458:	and	x0, x0, #0x7
 45c:	cmp	x0, #0x0
 460:	b.eq	4a8 <__trunctfdf2+0x4a8>  // b.none
 464:	ldr	x0, [sp, #152]
 468:	add	x0, x0, #0x8
 46c:	str	x0, [sp, #152]
 470:	b	4a8 <__trunctfdf2+0x4a8>
 474:	ldr	x0, [sp, #88]
 478:	cmp	x0, #0x0
 47c:	b.eq	4a8 <__trunctfdf2+0x4a8>  // b.none
 480:	ldr	x0, [sp, #152]
 484:	and	x0, x0, #0x7
 488:	cmp	x0, #0x0
 48c:	b.eq	4a8 <__trunctfdf2+0x4a8>  // b.none
 490:	ldr	x0, [sp, #152]
 494:	add	x0, x0, #0x8
 498:	str	x0, [sp, #152]
 49c:	b	4a8 <__trunctfdf2+0x4a8>
 4a0:	nop
 4a4:	b	4ac <__trunctfdf2+0x4ac>
 4a8:	nop
 4ac:	ldr	w0, [sp, #84]
 4b0:	cmp	w0, #0x0
 4b4:	b.eq	4e4 <__trunctfdf2+0x4e4>  // b.none
 4b8:	ldr	w0, [sp, #132]
 4bc:	and	w0, w0, #0x10
 4c0:	cmp	w0, #0x0
 4c4:	b.ne	4d8 <__trunctfdf2+0x4d8>  // b.any
 4c8:	ldr	x0, [sp, #120]
 4cc:	and	x0, x0, #0x800
 4d0:	cmp	x0, #0x0
 4d4:	b.eq	4e4 <__trunctfdf2+0x4e4>  // b.none
 4d8:	ldr	w0, [sp, #132]
 4dc:	orr	w0, w0, #0x8
 4e0:	str	w0, [sp, #132]
 4e4:	ldr	x0, [sp, #152]
 4e8:	and	x0, x0, #0x80000000000000
 4ec:	cmp	x0, #0x0
 4f0:	b.eq	598 <__trunctfdf2+0x598>  // b.none
 4f4:	ldr	x0, [sp, #152]
 4f8:	and	x0, x0, #0xff7fffffffffffff
 4fc:	str	x0, [sp, #152]
 500:	ldr	x0, [sp, #136]
 504:	add	x0, x0, #0x1
 508:	str	x0, [sp, #136]
 50c:	ldr	x0, [sp, #136]
 510:	cmp	x0, #0x7ff
 514:	b.ne	598 <__trunctfdf2+0x598>  // b.any
 518:	ldr	x0, [sp, #120]
 51c:	and	x0, x0, #0xc00000
 520:	cmp	x0, #0x0
 524:	b.eq	560 <__trunctfdf2+0x560>  // b.none
 528:	ldr	x0, [sp, #120]
 52c:	and	x0, x0, #0xc00000
 530:	cmp	x0, #0x400, lsl #12
 534:	b.ne	544 <__trunctfdf2+0x544>  // b.any
 538:	ldr	x0, [sp, #88]
 53c:	cmp	x0, #0x0
 540:	b.eq	560 <__trunctfdf2+0x560>  // b.none
 544:	ldr	x0, [sp, #120]
 548:	and	x0, x0, #0xc00000
 54c:	cmp	x0, #0x800, lsl #12
 550:	b.ne	570 <__trunctfdf2+0x570>  // b.any
 554:	ldr	x0, [sp, #88]
 558:	cmp	x0, #0x0
 55c:	b.eq	570 <__trunctfdf2+0x570>  // b.none
 560:	mov	x0, #0x7ff                 	// #2047
 564:	str	x0, [sp, #136]
 568:	str	xzr, [sp, #152]
 56c:	b	580 <__trunctfdf2+0x580>
 570:	mov	x0, #0x7fe                 	// #2046
 574:	str	x0, [sp, #136]
 578:	mov	x0, #0xffffffffffffffff    	// #-1
 57c:	str	x0, [sp, #152]
 580:	ldr	w0, [sp, #132]
 584:	orr	w0, w0, #0x10
 588:	str	w0, [sp, #132]
 58c:	ldr	w0, [sp, #132]
 590:	orr	w0, w0, #0x4
 594:	str	w0, [sp, #132]
 598:	ldr	x0, [sp, #152]
 59c:	lsr	x0, x0, #3
 5a0:	str	x0, [sp, #152]
 5a4:	ldr	x0, [sp, #136]
 5a8:	cmp	x0, #0x7ff
 5ac:	b.ne	5c8 <__trunctfdf2+0x5c8>  // b.any
 5b0:	ldr	x0, [sp, #152]
 5b4:	cmp	x0, #0x0
 5b8:	b.eq	5c8 <__trunctfdf2+0x5c8>  // b.none
 5bc:	ldr	x0, [sp, #152]
 5c0:	orr	x0, x0, #0x8000000000000
 5c4:	str	x0, [sp, #152]
 5c8:	ldr	x0, [sp, #152]
 5cc:	and	x1, x0, #0xfffffffffffff
 5d0:	ldr	x0, [sp, #40]
 5d4:	bfxil	x0, x1, #0, #52
 5d8:	str	x0, [sp, #40]
 5dc:	ldr	x0, [sp, #136]
 5e0:	and	w0, w0, #0x7ff
 5e4:	and	w1, w0, #0xffff
 5e8:	ldrh	w0, [sp, #46]
 5ec:	bfi	w0, w1, #4, #11
 5f0:	strh	w0, [sp, #46]
 5f4:	ldr	x0, [sp, #88]
 5f8:	and	w0, w0, #0x1
 5fc:	and	w1, w0, #0xff
 600:	ldrb	w0, [sp, #47]
 604:	bfi	w0, w1, #7, #1
 608:	strb	w0, [sp, #47]
 60c:	ldr	d0, [sp, #40]
 610:	str	d0, [sp, #72]
 614:	ldrsw	x0, [sp, #132]
 618:	cmp	x0, #0x0
 61c:	b.eq	628 <__trunctfdf2+0x628>  // b.none
 620:	ldr	w0, [sp, #132]
 624:	bl	0 <__sfp_handle_exceptions>
 628:	ldr	d0, [sp, #72]
 62c:	ldp	x29, x30, [sp], #160
 630:	ret

trunctfhf2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__trunctfhf2>:
   0:	stp	x29, x30, [sp, #-144]!
   4:	mov	x29, sp
   8:	str	q0, [sp, #16]
   c:	str	wzr, [sp, #116]
  10:	str	xzr, [sp, #104]
  14:	mrs	x0, fpcr
  18:	str	x0, [sp, #104]
  1c:	ldr	q0, [sp, #16]
  20:	str	q0, [sp, #48]
  24:	ldr	x0, [sp, #48]
  28:	str	x0, [sp, #120]
  2c:	ldr	x0, [sp, #56]
  30:	ubfx	x0, x0, #0, #48
  34:	str	x0, [sp, #96]
  38:	ldrh	w0, [sp, #62]
  3c:	ubfx	x0, x0, #0, #15
  40:	and	w0, w0, #0xffff
  44:	and	x0, x0, #0xffff
  48:	str	x0, [sp, #88]
  4c:	ldrb	w0, [sp, #63]
  50:	ubfx	x0, x0, #7, #1
  54:	and	w0, w0, #0xff
  58:	and	x0, x0, #0xff
  5c:	str	x0, [sp, #80]
  60:	ldr	x0, [sp, #96]
  64:	lsl	x1, x0, #3
  68:	ldr	x0, [sp, #120]
  6c:	lsr	x0, x0, #61
  70:	orr	x0, x1, x0
  74:	str	x0, [sp, #96]
  78:	ldr	x0, [sp, #120]
  7c:	lsl	x0, x0, #3
  80:	str	x0, [sp, #120]
  84:	ldr	x0, [sp, #80]
  88:	str	x0, [sp, #72]
  8c:	ldr	x0, [sp, #88]
  90:	add	x0, x0, #0x1
  94:	and	x0, x0, #0x7ffe
  98:	cmp	x0, #0x0
  9c:	b.eq	2b4 <__trunctfhf2+0x2b4>  // b.none
  a0:	ldr	x1, [sp, #88]
  a4:	mov	x0, #0xffffffffffffc010    	// #-16368
  a8:	add	x0, x1, x0
  ac:	str	x0, [sp, #136]
  b0:	ldr	x0, [sp, #136]
  b4:	cmp	x0, #0x1e
  b8:	b.le	140 <__trunctfhf2+0x140>
  bc:	ldr	x0, [sp, #104]
  c0:	and	x0, x0, #0xc00000
  c4:	cmp	x0, #0x0
  c8:	b.eq	104 <__trunctfhf2+0x104>  // b.none
  cc:	ldr	x0, [sp, #104]
  d0:	and	x0, x0, #0xc00000
  d4:	cmp	x0, #0x400, lsl #12
  d8:	b.ne	e8 <__trunctfhf2+0xe8>  // b.any
  dc:	ldr	x0, [sp, #72]
  e0:	cmp	x0, #0x0
  e4:	b.eq	104 <__trunctfhf2+0x104>  // b.none
  e8:	ldr	x0, [sp, #104]
  ec:	and	x0, x0, #0xc00000
  f0:	cmp	x0, #0x800, lsl #12
  f4:	b.ne	114 <__trunctfhf2+0x114>  // b.any
  f8:	ldr	x0, [sp, #72]
  fc:	cmp	x0, #0x0
 100:	b.eq	114 <__trunctfhf2+0x114>  // b.none
 104:	mov	x0, #0x1f                  	// #31
 108:	str	x0, [sp, #136]
 10c:	str	xzr, [sp, #128]
 110:	b	124 <__trunctfhf2+0x124>
 114:	mov	x0, #0x1e                  	// #30
 118:	str	x0, [sp, #136]
 11c:	mov	x0, #0xffffffffffffffff    	// #-1
 120:	str	x0, [sp, #128]
 124:	ldr	w0, [sp, #116]
 128:	orr	w0, w0, #0x10
 12c:	str	w0, [sp, #116]
 130:	ldr	w0, [sp, #116]
 134:	orr	w0, w0, #0x4
 138:	str	w0, [sp, #116]
 13c:	b	388 <__trunctfhf2+0x388>
 140:	ldr	x0, [sp, #136]
 144:	cmp	x0, #0x0
 148:	b.gt	274 <__trunctfhf2+0x274>
 14c:	ldr	x0, [sp, #136]
 150:	cmn	x0, #0xa
 154:	b.ge	170 <__trunctfhf2+0x170>  // b.tcont
 158:	str	xzr, [sp, #120]
 15c:	str	xzr, [sp, #96]
 160:	ldr	x0, [sp, #120]
 164:	orr	x0, x0, #0x1
 168:	str	x0, [sp, #120]
 16c:	b	26c <__trunctfhf2+0x26c>
 170:	ldr	x0, [sp, #96]
 174:	orr	x0, x0, #0x8000000000000
 178:	str	x0, [sp, #96]
 17c:	mov	x1, #0x67                  	// #103
 180:	ldr	x0, [sp, #136]
 184:	sub	x0, x1, x0
 188:	cmp	x0, #0x3f
 18c:	b.gt	204 <__trunctfhf2+0x204>
 190:	ldr	x0, [sp, #136]
 194:	sub	w0, w0, #0x27
 198:	ldr	x1, [sp, #96]
 19c:	lsl	x1, x1, x0
 1a0:	ldr	x0, [sp, #136]
 1a4:	mov	w2, w0
 1a8:	mov	w0, #0x67                  	// #103
 1ac:	sub	w0, w0, w2
 1b0:	ldr	x2, [sp, #120]
 1b4:	lsr	x0, x2, x0
 1b8:	orr	x1, x1, x0
 1bc:	ldr	x0, [sp, #136]
 1c0:	sub	w0, w0, #0x27
 1c4:	ldr	x2, [sp, #120]
 1c8:	lsl	x0, x2, x0
 1cc:	cmp	x0, #0x0
 1d0:	cset	w0, ne  // ne = any
 1d4:	and	w0, w0, #0xff
 1d8:	sxtw	x0, w0
 1dc:	orr	x0, x1, x0
 1e0:	str	x0, [sp, #120]
 1e4:	ldr	x0, [sp, #136]
 1e8:	mov	w1, w0
 1ec:	mov	w0, #0x67                  	// #103
 1f0:	sub	w0, w0, w1
 1f4:	ldr	x1, [sp, #96]
 1f8:	lsr	x0, x1, x0
 1fc:	str	x0, [sp, #96]
 200:	b	26c <__trunctfhf2+0x26c>
 204:	ldr	x0, [sp, #136]
 208:	mov	w1, w0
 20c:	mov	w0, #0x27                  	// #39
 210:	sub	w0, w0, w1
 214:	ldr	x1, [sp, #96]
 218:	lsr	x1, x1, x0
 21c:	mov	x2, #0x67                  	// #103
 220:	ldr	x0, [sp, #136]
 224:	sub	x0, x2, x0
 228:	cmp	x0, #0x40
 22c:	b.eq	244 <__trunctfhf2+0x244>  // b.none
 230:	ldr	x0, [sp, #136]
 234:	add	w0, w0, #0x19
 238:	ldr	x2, [sp, #96]
 23c:	lsl	x0, x2, x0
 240:	b	248 <__trunctfhf2+0x248>
 244:	mov	x0, #0x0                   	// #0
 248:	ldr	x2, [sp, #120]
 24c:	orr	x0, x0, x2
 250:	cmp	x0, #0x0
 254:	cset	w0, ne  // ne = any
 258:	and	w0, w0, #0xff
 25c:	and	x0, x0, #0xff
 260:	orr	x0, x1, x0
 264:	str	x0, [sp, #120]
 268:	str	xzr, [sp, #96]
 26c:	str	xzr, [sp, #136]
 270:	b	2a8 <__trunctfhf2+0x2a8>
 274:	ldr	x0, [sp, #96]
 278:	lsr	x1, x0, #38
 27c:	ldr	x0, [sp, #96]
 280:	lsl	x2, x0, #26
 284:	ldr	x0, [sp, #120]
 288:	orr	x0, x2, x0
 28c:	cmp	x0, #0x0
 290:	cset	w0, ne  // ne = any
 294:	and	w0, w0, #0xff
 298:	and	x0, x0, #0xff
 29c:	orr	x0, x1, x0
 2a0:	str	x0, [sp, #120]
 2a4:	str	xzr, [sp, #96]
 2a8:	ldr	x0, [sp, #120]
 2ac:	str	x0, [sp, #128]
 2b0:	b	388 <__trunctfhf2+0x388>
 2b4:	ldr	x0, [sp, #88]
 2b8:	cmp	x0, #0x0
 2bc:	b.ne	2f4 <__trunctfhf2+0x2f4>  // b.any
 2c0:	str	xzr, [sp, #136]
 2c4:	ldr	x1, [sp, #96]
 2c8:	ldr	x0, [sp, #120]
 2cc:	orr	x0, x1, x0
 2d0:	cmp	x0, #0x0
 2d4:	b.ne	2e0 <__trunctfhf2+0x2e0>  // b.any
 2d8:	str	xzr, [sp, #128]
 2dc:	b	388 <__trunctfhf2+0x388>
 2e0:	str	xzr, [sp, #128]
 2e4:	ldr	x0, [sp, #128]
 2e8:	orr	x0, x0, #0x1
 2ec:	str	x0, [sp, #128]
 2f0:	b	388 <__trunctfhf2+0x388>
 2f4:	mov	x0, #0x1f                  	// #31
 2f8:	str	x0, [sp, #136]
 2fc:	ldr	x1, [sp, #96]
 300:	ldr	x0, [sp, #120]
 304:	orr	x0, x1, x0
 308:	cmp	x0, #0x0
 30c:	b.ne	318 <__trunctfhf2+0x318>  // b.any
 310:	str	xzr, [sp, #128]
 314:	b	388 <__trunctfhf2+0x388>
 318:	ldr	x1, [sp, #88]
 31c:	mov	x0, #0x7fff                	// #32767
 320:	cmp	x1, x0
 324:	b.ne	358 <__trunctfhf2+0x358>  // b.any
 328:	ldr	x1, [sp, #96]
 32c:	ldr	x0, [sp, #120]
 330:	orr	x0, x1, x0
 334:	cmp	x0, #0x0
 338:	b.eq	358 <__trunctfhf2+0x358>  // b.none
 33c:	ldr	x0, [sp, #96]
 340:	and	x0, x0, #0x4000000000000
 344:	cmp	x0, #0x0
 348:	b.ne	358 <__trunctfhf2+0x358>  // b.any
 34c:	ldr	w0, [sp, #116]
 350:	orr	w0, w0, #0x1
 354:	str	w0, [sp, #116]
 358:	ldr	x0, [sp, #96]
 35c:	lsr	x0, x0, #38
 360:	str	x0, [sp, #120]
 364:	str	xzr, [sp, #96]
 368:	ldr	x0, [sp, #120]
 36c:	str	x0, [sp, #128]
 370:	ldr	x0, [sp, #128]
 374:	and	x0, x0, #0xfffffffffffffff8
 378:	str	x0, [sp, #128]
 37c:	ldr	x0, [sp, #128]
 380:	orr	x0, x0, #0x1000
 384:	str	x0, [sp, #128]
 388:	ldr	x0, [sp, #136]
 38c:	cmp	x0, #0x0
 390:	b.ne	3a8 <__trunctfhf2+0x3a8>  // b.any
 394:	ldr	x0, [sp, #128]
 398:	cmp	x0, #0x0
 39c:	b.eq	3a8 <__trunctfhf2+0x3a8>  // b.none
 3a0:	mov	w0, #0x1                   	// #1
 3a4:	b	3ac <__trunctfhf2+0x3ac>
 3a8:	mov	w0, #0x0                   	// #0
 3ac:	str	w0, [sp, #68]
 3b0:	ldr	x0, [sp, #128]
 3b4:	and	x0, x0, #0x7
 3b8:	cmp	x0, #0x0
 3bc:	b.eq	480 <__trunctfhf2+0x480>  // b.none
 3c0:	ldr	w0, [sp, #116]
 3c4:	orr	w0, w0, #0x10
 3c8:	str	w0, [sp, #116]
 3cc:	ldr	x0, [sp, #104]
 3d0:	and	x0, x0, #0xc00000
 3d4:	cmp	x0, #0xc00, lsl #12
 3d8:	b.eq	488 <__trunctfhf2+0x488>  // b.none
 3dc:	cmp	x0, #0xc00, lsl #12
 3e0:	b.hi	48c <__trunctfhf2+0x48c>  // b.pmore
 3e4:	cmp	x0, #0x800, lsl #12
 3e8:	b.eq	454 <__trunctfhf2+0x454>  // b.none
 3ec:	cmp	x0, #0x800, lsl #12
 3f0:	b.hi	48c <__trunctfhf2+0x48c>  // b.pmore
 3f4:	cmp	x0, #0x0
 3f8:	b.eq	408 <__trunctfhf2+0x408>  // b.none
 3fc:	cmp	x0, #0x400, lsl #12
 400:	b.eq	428 <__trunctfhf2+0x428>  // b.none
 404:	b	48c <__trunctfhf2+0x48c>
 408:	ldr	x0, [sp, #128]
 40c:	and	x0, x0, #0xf
 410:	cmp	x0, #0x4
 414:	b.eq	488 <__trunctfhf2+0x488>  // b.none
 418:	ldr	x0, [sp, #128]
 41c:	add	x0, x0, #0x4
 420:	str	x0, [sp, #128]
 424:	b	488 <__trunctfhf2+0x488>
 428:	ldr	x0, [sp, #72]
 42c:	cmp	x0, #0x0
 430:	b.ne	488 <__trunctfhf2+0x488>  // b.any
 434:	ldr	x0, [sp, #128]
 438:	and	x0, x0, #0x7
 43c:	cmp	x0, #0x0
 440:	b.eq	488 <__trunctfhf2+0x488>  // b.none
 444:	ldr	x0, [sp, #128]
 448:	add	x0, x0, #0x8
 44c:	str	x0, [sp, #128]
 450:	b	488 <__trunctfhf2+0x488>
 454:	ldr	x0, [sp, #72]
 458:	cmp	x0, #0x0
 45c:	b.eq	488 <__trunctfhf2+0x488>  // b.none
 460:	ldr	x0, [sp, #128]
 464:	and	x0, x0, #0x7
 468:	cmp	x0, #0x0
 46c:	b.eq	488 <__trunctfhf2+0x488>  // b.none
 470:	ldr	x0, [sp, #128]
 474:	add	x0, x0, #0x8
 478:	str	x0, [sp, #128]
 47c:	b	488 <__trunctfhf2+0x488>
 480:	nop
 484:	b	48c <__trunctfhf2+0x48c>
 488:	nop
 48c:	ldr	w0, [sp, #68]
 490:	cmp	w0, #0x0
 494:	b.eq	4c4 <__trunctfhf2+0x4c4>  // b.none
 498:	ldr	w0, [sp, #116]
 49c:	and	w0, w0, #0x10
 4a0:	cmp	w0, #0x0
 4a4:	b.ne	4b8 <__trunctfhf2+0x4b8>  // b.any
 4a8:	ldr	x0, [sp, #104]
 4ac:	and	x0, x0, #0x800
 4b0:	cmp	x0, #0x0
 4b4:	b.eq	4c4 <__trunctfhf2+0x4c4>  // b.none
 4b8:	ldr	w0, [sp, #116]
 4bc:	orr	w0, w0, #0x8
 4c0:	str	w0, [sp, #116]
 4c4:	ldr	x0, [sp, #128]
 4c8:	and	x0, x0, #0x2000
 4cc:	cmp	x0, #0x0
 4d0:	b.eq	578 <__trunctfhf2+0x578>  // b.none
 4d4:	ldr	x0, [sp, #128]
 4d8:	and	x0, x0, #0xffffffffffffdfff
 4dc:	str	x0, [sp, #128]
 4e0:	ldr	x0, [sp, #136]
 4e4:	add	x0, x0, #0x1
 4e8:	str	x0, [sp, #136]
 4ec:	ldr	x0, [sp, #136]
 4f0:	cmp	x0, #0x1f
 4f4:	b.ne	578 <__trunctfhf2+0x578>  // b.any
 4f8:	ldr	x0, [sp, #104]
 4fc:	and	x0, x0, #0xc00000
 500:	cmp	x0, #0x0
 504:	b.eq	540 <__trunctfhf2+0x540>  // b.none
 508:	ldr	x0, [sp, #104]
 50c:	and	x0, x0, #0xc00000
 510:	cmp	x0, #0x400, lsl #12
 514:	b.ne	524 <__trunctfhf2+0x524>  // b.any
 518:	ldr	x0, [sp, #72]
 51c:	cmp	x0, #0x0
 520:	b.eq	540 <__trunctfhf2+0x540>  // b.none
 524:	ldr	x0, [sp, #104]
 528:	and	x0, x0, #0xc00000
 52c:	cmp	x0, #0x800, lsl #12
 530:	b.ne	550 <__trunctfhf2+0x550>  // b.any
 534:	ldr	x0, [sp, #72]
 538:	cmp	x0, #0x0
 53c:	b.eq	550 <__trunctfhf2+0x550>  // b.none
 540:	mov	x0, #0x1f                  	// #31
 544:	str	x0, [sp, #136]
 548:	str	xzr, [sp, #128]
 54c:	b	560 <__trunctfhf2+0x560>
 550:	mov	x0, #0x1e                  	// #30
 554:	str	x0, [sp, #136]
 558:	mov	x0, #0xffffffffffffffff    	// #-1
 55c:	str	x0, [sp, #128]
 560:	ldr	w0, [sp, #116]
 564:	orr	w0, w0, #0x10
 568:	str	w0, [sp, #116]
 56c:	ldr	w0, [sp, #116]
 570:	orr	w0, w0, #0x4
 574:	str	w0, [sp, #116]
 578:	ldr	x0, [sp, #128]
 57c:	lsr	x0, x0, #3
 580:	str	x0, [sp, #128]
 584:	ldr	x0, [sp, #136]
 588:	cmp	x0, #0x1f
 58c:	b.ne	5a8 <__trunctfhf2+0x5a8>  // b.any
 590:	ldr	x0, [sp, #128]
 594:	cmp	x0, #0x0
 598:	b.eq	5a8 <__trunctfhf2+0x5a8>  // b.none
 59c:	ldr	x0, [sp, #128]
 5a0:	orr	x0, x0, #0x200
 5a4:	str	x0, [sp, #128]
 5a8:	ldr	x0, [sp, #128]
 5ac:	and	w0, w0, #0x3ff
 5b0:	and	w1, w0, #0xffff
 5b4:	ldrh	w0, [sp, #40]
 5b8:	bfxil	w0, w1, #0, #10
 5bc:	strh	w0, [sp, #40]
 5c0:	ldr	x0, [sp, #136]
 5c4:	and	w0, w0, #0x1f
 5c8:	and	w1, w0, #0xff
 5cc:	ldrb	w0, [sp, #41]
 5d0:	bfi	w0, w1, #2, #5
 5d4:	strb	w0, [sp, #41]
 5d8:	ldr	x0, [sp, #72]
 5dc:	and	w0, w0, #0x1
 5e0:	and	w1, w0, #0xff
 5e4:	ldrb	w0, [sp, #41]
 5e8:	bfi	w0, w1, #7, #1
 5ec:	strb	w0, [sp, #41]
 5f0:	ldr	h0, [sp, #40]
 5f4:	str	h0, [sp, #66]
 5f8:	ldrsw	x0, [sp, #116]
 5fc:	cmp	x0, #0x0
 600:	b.eq	60c <__trunctfhf2+0x60c>  // b.none
 604:	ldr	w0, [sp, #116]
 608:	bl	0 <__sfp_handle_exceptions>
 60c:	ldr	h0, [sp, #66]
 610:	ldp	x29, x30, [sp], #144
 614:	ret

fixhfti.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__fixhfti>:
   0:	stp	x29, x30, [sp, #-112]!
   4:	mov	x29, sp
   8:	str	h0, [sp, #30]
   c:	str	wzr, [sp, #108]
  10:	str	xzr, [sp, #64]
  14:	mrs	x0, fpcr
  18:	str	x0, [sp, #64]
  1c:	ldr	h0, [sp, #30]
  20:	str	h0, [sp, #32]
  24:	ldrh	w0, [sp, #32]
  28:	ubfx	x0, x0, #0, #10
  2c:	and	w0, w0, #0xffff
  30:	and	x0, x0, #0xffff
  34:	str	x0, [sp, #56]
  38:	ldrb	w0, [sp, #33]
  3c:	ubfx	x0, x0, #2, #5
  40:	and	w0, w0, #0xff
  44:	and	x0, x0, #0xff
  48:	str	x0, [sp, #48]
  4c:	ldrb	w0, [sp, #33]
  50:	ubfx	x0, x0, #7, #1
  54:	and	w0, w0, #0xff
  58:	and	x0, x0, #0xff
  5c:	str	x0, [sp, #40]
  60:	ldr	x0, [sp, #48]
  64:	cmp	x0, #0xe
  68:	b.gt	a8 <__fixhfti+0xa8>
  6c:	stp	xzr, xzr, [sp, #80]
  70:	ldr	x0, [sp, #48]
  74:	cmp	x0, #0x0
  78:	b.ne	98 <__fixhfti+0x98>  // b.any
  7c:	ldr	x0, [sp, #56]
  80:	cmp	x0, #0x0
  84:	b.eq	228 <__fixhfti+0x228>  // b.none
  88:	ldr	w0, [sp, #108]
  8c:	orr	w0, w0, #0x10
  90:	str	w0, [sp, #108]
  94:	b	228 <__fixhfti+0x228>
  98:	ldr	w0, [sp, #108]
  9c:	orr	w0, w0, #0x10
  a0:	str	w0, [sp, #108]
  a4:	b	228 <__fixhfti+0x228>
  a8:	ldr	x0, [sp, #48]
  ac:	cmp	x0, #0x1e
  b0:	b.le	110 <__fixhfti+0x110>
  b4:	mov	x0, #0x1                   	// #1
  b8:	mov	x1, #0x0                   	// #0
  bc:	stp	x0, x1, [sp, #80]
  c0:	ldr	x0, [sp, #80]
  c4:	lsl	x0, x0, #63
  c8:	str	x0, [sp, #88]
  cc:	str	xzr, [sp, #80]
  d0:	mov	x1, #0x1                   	// #1
  d4:	ldr	x0, [sp, #40]
  d8:	sub	x0, x1, x0
  dc:	mov	x2, x0
  e0:	asr	x0, x0, #63
  e4:	mov	x3, x0
  e8:	ldp	x0, x1, [sp, #80]
  ec:	subs	x4, x0, x2
  f0:	sbc	x0, x1, x3
  f4:	mov	x6, x4
  f8:	mov	x7, x0
  fc:	stp	x6, x7, [sp, #80]
 100:	ldr	w0, [sp, #108]
 104:	orr	w0, w0, #0x1
 108:	str	w0, [sp, #108]
 10c:	b	228 <__fixhfti+0x228>
 110:	str	wzr, [sp, #76]
 114:	ldr	x0, [sp, #56]
 118:	orr	x0, x0, #0x400
 11c:	str	x0, [sp, #56]
 120:	ldr	x0, [sp, #48]
 124:	cmp	x0, #0x18
 128:	b.le	1a4 <__fixhfti+0x1a4>
 12c:	ldr	x0, [sp, #56]
 130:	str	x0, [sp, #80]
 134:	str	xzr, [sp, #88]
 138:	ldr	x0, [sp, #48]
 13c:	sub	w0, w0, #0x19
 140:	sub	w1, w0, #0x40
 144:	ldr	x2, [sp, #80]
 148:	lsl	x2, x2, x1
 14c:	mov	x7, #0x0                   	// #0
 150:	ldr	x3, [sp, #80]
 154:	lsr	x6, x3, #1
 158:	mov	w3, #0x3f                  	// #63
 15c:	sub	w3, w3, w0
 160:	lsr	x3, x6, x3
 164:	ldr	x6, [sp, #88]
 168:	lsl	x6, x6, x0
 16c:	orr	x3, x6, x3
 170:	str	x3, [sp, #88]
 174:	ldr	x3, [sp, #80]
 178:	lsl	x0, x3, x0
 17c:	str	x0, [sp, #80]
 180:	ldr	x0, [sp, #88]
 184:	cmp	w1, #0x0
 188:	csel	x0, x0, x2, lt  // lt = tstop
 18c:	str	x0, [sp, #88]
 190:	ldr	x0, [sp, #80]
 194:	cmp	w1, #0x0
 198:	csel	x0, x0, x7, lt  // lt = tstop
 19c:	str	x0, [sp, #80]
 1a0:	b	1ec <__fixhfti+0x1ec>
 1a4:	ldr	x0, [sp, #48]
 1a8:	add	w0, w0, #0x27
 1ac:	ldr	x1, [sp, #56]
 1b0:	lsl	x0, x1, x0
 1b4:	cmp	x0, #0x0
 1b8:	cset	w0, ne  // ne = any
 1bc:	and	w0, w0, #0xff
 1c0:	str	w0, [sp, #76]
 1c4:	ldr	x0, [sp, #48]
 1c8:	mov	w1, w0
 1cc:	mov	w0, #0x19                  	// #25
 1d0:	sub	w0, w0, w1
 1d4:	ldr	x1, [sp, #56]
 1d8:	lsr	x0, x1, x0
 1dc:	str	x0, [sp, #56]
 1e0:	ldr	x0, [sp, #56]
 1e4:	str	x0, [sp, #80]
 1e8:	str	xzr, [sp, #88]
 1ec:	ldr	x0, [sp, #40]
 1f0:	cmp	x0, #0x0
 1f4:	b.eq	210 <__fixhfti+0x210>  // b.none
 1f8:	ldp	x0, x1, [sp, #80]
 1fc:	negs	x2, x0
 200:	ngc	x0, x1
 204:	mov	x4, x2
 208:	mov	x5, x0
 20c:	stp	x4, x5, [sp, #80]
 210:	ldr	w0, [sp, #76]
 214:	cmp	w0, #0x0
 218:	b.eq	228 <__fixhfti+0x228>  // b.none
 21c:	ldr	w0, [sp, #108]
 220:	orr	w0, w0, #0x10
 224:	str	w0, [sp, #108]
 228:	ldrsw	x0, [sp, #108]
 22c:	cmp	x0, #0x0
 230:	b.eq	23c <__fixhfti+0x23c>  // b.none
 234:	ldr	w0, [sp, #108]
 238:	bl	0 <__sfp_handle_exceptions>
 23c:	ldp	x0, x1, [sp, #80]
 240:	ldp	x29, x30, [sp], #112
 244:	ret

fixunshfti.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__fixunshfti>:
   0:	stp	x29, x30, [sp, #-112]!
   4:	mov	x29, sp
   8:	str	h0, [sp, #30]
   c:	str	wzr, [sp, #108]
  10:	str	xzr, [sp, #64]
  14:	mrs	x0, fpcr
  18:	str	x0, [sp, #64]
  1c:	ldr	h0, [sp, #30]
  20:	str	h0, [sp, #32]
  24:	ldrh	w0, [sp, #32]
  28:	ubfx	x0, x0, #0, #10
  2c:	and	w0, w0, #0xffff
  30:	and	x0, x0, #0xffff
  34:	str	x0, [sp, #56]
  38:	ldrb	w0, [sp, #33]
  3c:	ubfx	x0, x0, #2, #5
  40:	and	w0, w0, #0xff
  44:	and	x0, x0, #0xff
  48:	str	x0, [sp, #48]
  4c:	ldrb	w0, [sp, #33]
  50:	ubfx	x0, x0, #7, #1
  54:	and	w0, w0, #0xff
  58:	and	x0, x0, #0xff
  5c:	str	x0, [sp, #40]
  60:	ldr	x0, [sp, #48]
  64:	cmp	x0, #0xe
  68:	b.gt	a8 <__fixunshfti+0xa8>
  6c:	stp	xzr, xzr, [sp, #80]
  70:	ldr	x0, [sp, #48]
  74:	cmp	x0, #0x0
  78:	b.ne	98 <__fixunshfti+0x98>  // b.any
  7c:	ldr	x0, [sp, #56]
  80:	cmp	x0, #0x0
  84:	b.eq	1ec <__fixunshfti+0x1ec>  // b.none
  88:	ldr	w0, [sp, #108]
  8c:	orr	w0, w0, #0x10
  90:	str	w0, [sp, #108]
  94:	b	1ec <__fixunshfti+0x1ec>
  98:	ldr	w0, [sp, #108]
  9c:	orr	w0, w0, #0x10
  a0:	str	w0, [sp, #108]
  a4:	b	1ec <__fixunshfti+0x1ec>
  a8:	ldr	x0, [sp, #48]
  ac:	cmp	x0, #0x1e
  b0:	b.gt	c0 <__fixunshfti+0xc0>
  b4:	ldr	x0, [sp, #40]
  b8:	cmp	x0, #0x0
  bc:	b.eq	f8 <__fixunshfti+0xf8>  // b.none
  c0:	stp	xzr, xzr, [sp, #80]
  c4:	ldr	x0, [sp, #40]
  c8:	cmp	x0, #0x0
  cc:	b.ne	e8 <__fixunshfti+0xe8>  // b.any
  d0:	ldr	x0, [sp, #80]
  d4:	mvn	x0, x0
  d8:	str	x0, [sp, #80]
  dc:	ldr	x0, [sp, #88]
  e0:	mvn	x0, x0
  e4:	str	x0, [sp, #88]
  e8:	ldr	w0, [sp, #108]
  ec:	orr	w0, w0, #0x1
  f0:	str	w0, [sp, #108]
  f4:	b	1ec <__fixunshfti+0x1ec>
  f8:	str	wzr, [sp, #76]
  fc:	ldr	x0, [sp, #56]
 100:	orr	x0, x0, #0x400
 104:	str	x0, [sp, #56]
 108:	ldr	x0, [sp, #48]
 10c:	cmp	x0, #0x18
 110:	b.le	18c <__fixunshfti+0x18c>
 114:	ldr	x0, [sp, #56]
 118:	str	x0, [sp, #80]
 11c:	str	xzr, [sp, #88]
 120:	ldr	x0, [sp, #48]
 124:	sub	w0, w0, #0x19
 128:	sub	w1, w0, #0x40
 12c:	ldr	x2, [sp, #80]
 130:	lsl	x2, x2, x1
 134:	mov	x5, #0x0                   	// #0
 138:	ldr	x3, [sp, #80]
 13c:	lsr	x4, x3, #1
 140:	mov	w3, #0x3f                  	// #63
 144:	sub	w3, w3, w0
 148:	lsr	x3, x4, x3
 14c:	ldr	x4, [sp, #88]
 150:	lsl	x4, x4, x0
 154:	orr	x3, x4, x3
 158:	str	x3, [sp, #88]
 15c:	ldr	x3, [sp, #80]
 160:	lsl	x0, x3, x0
 164:	str	x0, [sp, #80]
 168:	ldr	x0, [sp, #88]
 16c:	cmp	w1, #0x0
 170:	csel	x0, x0, x2, lt  // lt = tstop
 174:	str	x0, [sp, #88]
 178:	ldr	x0, [sp, #80]
 17c:	cmp	w1, #0x0
 180:	csel	x0, x0, x5, lt  // lt = tstop
 184:	str	x0, [sp, #80]
 188:	b	1d4 <__fixunshfti+0x1d4>
 18c:	ldr	x0, [sp, #48]
 190:	add	w0, w0, #0x27
 194:	ldr	x1, [sp, #56]
 198:	lsl	x0, x1, x0
 19c:	cmp	x0, #0x0
 1a0:	cset	w0, ne  // ne = any
 1a4:	and	w0, w0, #0xff
 1a8:	str	w0, [sp, #76]
 1ac:	ldr	x0, [sp, #48]
 1b0:	mov	w1, w0
 1b4:	mov	w0, #0x19                  	// #25
 1b8:	sub	w0, w0, w1
 1bc:	ldr	x1, [sp, #56]
 1c0:	lsr	x0, x1, x0
 1c4:	str	x0, [sp, #56]
 1c8:	ldr	x0, [sp, #56]
 1cc:	str	x0, [sp, #80]
 1d0:	str	xzr, [sp, #88]
 1d4:	ldr	w0, [sp, #76]
 1d8:	cmp	w0, #0x0
 1dc:	b.eq	1ec <__fixunshfti+0x1ec>  // b.none
 1e0:	ldr	w0, [sp, #108]
 1e4:	orr	w0, w0, #0x10
 1e8:	str	w0, [sp, #108]
 1ec:	ldrsw	x0, [sp, #108]
 1f0:	cmp	x0, #0x0
 1f4:	b.eq	200 <__fixunshfti+0x200>  // b.none
 1f8:	ldr	w0, [sp, #108]
 1fc:	bl	0 <__sfp_handle_exceptions>
 200:	ldp	x0, x1, [sp, #80]
 204:	ldp	x29, x30, [sp], #112
 208:	ret

floattihf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__floattihf>:
   0:	stp	x29, x30, [sp, #-112]!
   4:	mov	x29, sp
   8:	stp	x0, x1, [sp, #16]
   c:	str	wzr, [sp, #84]
  10:	str	xzr, [sp, #48]
  14:	mrs	x0, fpcr
  18:	str	x0, [sp, #48]
  1c:	ldr	x0, [sp, #16]
  20:	ldr	x1, [sp, #24]
  24:	orr	x0, x0, x1
  28:	cmp	x0, #0x0
  2c:	b.eq	4f0 <__floattihf+0x4f0>  // b.none
  30:	ldp	x0, x1, [sp, #16]
  34:	stp	x0, x1, [sp, #64]
  38:	ldr	x0, [sp, #24]
  3c:	lsr	x0, x0, #63
  40:	and	w0, w0, #0xff
  44:	and	x0, x0, #0xff
  48:	str	x0, [sp, #88]
  4c:	ldr	x0, [sp, #88]
  50:	cmp	x0, #0x0
  54:	b.eq	70 <__floattihf+0x70>  // b.none
  58:	ldp	x0, x1, [sp, #64]
  5c:	negs	x14, x0
  60:	ngc	x0, x1
  64:	mov	x8, x14
  68:	mov	x9, x0
  6c:	stp	x8, x9, [sp, #64]
  70:	ldr	x0, [sp, #72]
  74:	mov	x12, x0
  78:	mov	x13, #0x0                   	// #0
  7c:	mov	x0, x12
  80:	cmp	x0, #0x0
  84:	b.eq	a4 <__floattihf+0xa4>  // b.none
  88:	ldr	x0, [sp, #72]
  8c:	mov	x10, x0
  90:	mov	x11, #0x0                   	// #0
  94:	mov	x0, x10
  98:	clz	x0, x0
  9c:	str	w0, [sp, #60]
  a0:	b	bc <__floattihf+0xbc>
  a4:	ldr	x0, [sp, #64]
  a8:	clz	x0, x0
  ac:	str	w0, [sp, #60]
  b0:	ldr	w0, [sp, #60]
  b4:	add	w0, w0, #0x40
  b8:	str	w0, [sp, #60]
  bc:	mov	w1, #0x8e                  	// #142
  c0:	ldr	w0, [sp, #60]
  c4:	sub	w0, w1, w0
  c8:	sxtw	x0, w0
  cc:	str	x0, [sp, #104]
  d0:	ldr	x0, [sp, #104]
  d4:	cmp	x0, #0x1e
  d8:	b.le	160 <__floattihf+0x160>
  dc:	ldr	x0, [sp, #48]
  e0:	and	x0, x0, #0xc00000
  e4:	cmp	x0, #0x0
  e8:	b.eq	124 <__floattihf+0x124>  // b.none
  ec:	ldr	x0, [sp, #48]
  f0:	and	x0, x0, #0xc00000
  f4:	cmp	x0, #0x400, lsl #12
  f8:	b.ne	108 <__floattihf+0x108>  // b.any
  fc:	ldr	x0, [sp, #88]
 100:	cmp	x0, #0x0
 104:	b.eq	124 <__floattihf+0x124>  // b.none
 108:	ldr	x0, [sp, #48]
 10c:	and	x0, x0, #0xc00000
 110:	cmp	x0, #0x800, lsl #12
 114:	b.ne	134 <__floattihf+0x134>  // b.any
 118:	ldr	x0, [sp, #88]
 11c:	cmp	x0, #0x0
 120:	b.eq	134 <__floattihf+0x134>  // b.none
 124:	mov	x0, #0x1f                  	// #31
 128:	str	x0, [sp, #104]
 12c:	str	xzr, [sp, #96]
 130:	b	144 <__floattihf+0x144>
 134:	mov	x0, #0x1e                  	// #30
 138:	str	x0, [sp, #104]
 13c:	mov	x0, #0xffffffffffffffff    	// #-1
 140:	str	x0, [sp, #96]
 144:	ldr	w0, [sp, #84]
 148:	orr	w0, w0, #0x10
 14c:	str	w0, [sp, #84]
 150:	ldr	w0, [sp, #84]
 154:	orr	w0, w0, #0x4
 158:	str	w0, [sp, #84]
 15c:	b	2cc <__floattihf+0x2cc>
 160:	ldr	x0, [sp, #104]
 164:	cmp	x0, #0x19
 168:	b.gt	1a8 <__floattihf+0x1a8>
 16c:	ldr	x0, [sp, #64]
 170:	str	x0, [sp, #96]
 174:	mov	x1, #0x19                  	// #25
 178:	ldr	x0, [sp, #104]
 17c:	sub	x0, x1, x0
 180:	cmp	x0, #0x0
 184:	b.le	4fc <__floattihf+0x4fc>
 188:	ldr	x0, [sp, #104]
 18c:	mov	w1, w0
 190:	mov	w0, #0x19                  	// #25
 194:	sub	w0, w0, w1
 198:	ldr	x1, [sp, #96]
 19c:	lsl	x0, x1, x0
 1a0:	str	x0, [sp, #96]
 1a4:	b	4fc <__floattihf+0x4fc>
 1a8:	ldr	x0, [sp, #104]
 1ac:	cmp	x0, #0x1c
 1b0:	b.le	288 <__floattihf+0x288>
 1b4:	ldr	x0, [sp, #104]
 1b8:	sub	w0, w0, #0x1c
 1bc:	sub	w1, w0, #0x40
 1c0:	ldr	x8, [sp, #72]
 1c4:	lsr	x8, x8, x1
 1c8:	mov	x11, #0x0                   	// #0
 1cc:	ldr	x9, [sp, #72]
 1d0:	lsl	x10, x9, #1
 1d4:	mov	w9, #0x3f                  	// #63
 1d8:	sub	w9, w9, w0
 1dc:	lsl	x9, x10, x9
 1e0:	ldr	x10, [sp, #64]
 1e4:	lsr	x2, x10, x0
 1e8:	orr	x2, x9, x2
 1ec:	ldr	x9, [sp, #72]
 1f0:	lsr	x3, x9, x0
 1f4:	cmp	w1, #0x0
 1f8:	csel	x2, x8, x2, ge  // ge = tcont
 1fc:	cmp	w1, #0x0
 200:	csel	x3, x11, x3, ge  // ge = tcont
 204:	ldr	x0, [sp, #104]
 208:	mov	w1, w0
 20c:	mov	w0, #0x9c                  	// #156
 210:	sub	w0, w0, w1
 214:	sub	w1, w0, #0x40
 218:	ldr	x8, [sp, #64]
 21c:	lsl	x8, x8, x1
 220:	mov	x11, #0x0                   	// #0
 224:	ldr	x9, [sp, #64]
 228:	lsr	x10, x9, #1
 22c:	mov	w9, #0x3f                  	// #63
 230:	sub	w9, w9, w0
 234:	lsr	x9, x10, x9
 238:	ldr	x10, [sp, #72]
 23c:	lsl	x5, x10, x0
 240:	orr	x5, x9, x5
 244:	ldr	x9, [sp, #64]
 248:	lsl	x4, x9, x0
 24c:	cmp	w1, #0x0
 250:	csel	x5, x8, x5, ge  // ge = tcont
 254:	cmp	w1, #0x0
 258:	csel	x4, x11, x4, ge  // ge = tcont
 25c:	orr	x0, x4, x5
 260:	cmp	x0, #0x0
 264:	cset	w0, ne  // ne = any
 268:	and	w0, w0, #0xff
 26c:	and	x0, x0, #0xff
 270:	mov	x6, x0
 274:	mov	x7, #0x0                   	// #0
 278:	orr	x0, x2, x6
 27c:	str	x0, [sp, #64]
 280:	orr	x0, x3, x7
 284:	str	x0, [sp, #72]
 288:	ldr	x0, [sp, #64]
 28c:	str	x0, [sp, #96]
 290:	mov	x1, #0x1c                  	// #28
 294:	ldr	x0, [sp, #104]
 298:	sub	x0, x1, x0
 29c:	cmp	x0, #0x0
 2a0:	b.le	2c0 <__floattihf+0x2c0>
 2a4:	ldr	x0, [sp, #104]
 2a8:	mov	w1, w0
 2ac:	mov	w0, #0x1c                  	// #28
 2b0:	sub	w0, w0, w1
 2b4:	ldr	x1, [sp, #96]
 2b8:	lsl	x0, x1, x0
 2bc:	str	x0, [sp, #96]
 2c0:	ldr	x0, [sp, #96]
 2c4:	and	x0, x0, #0xffffffffffffdfff
 2c8:	str	x0, [sp, #96]
 2cc:	ldr	x0, [sp, #104]
 2d0:	cmp	x0, #0x0
 2d4:	b.ne	2ec <__floattihf+0x2ec>  // b.any
 2d8:	ldr	x0, [sp, #96]
 2dc:	cmp	x0, #0x0
 2e0:	b.eq	2ec <__floattihf+0x2ec>  // b.none
 2e4:	mov	w0, #0x1                   	// #1
 2e8:	b	2f0 <__floattihf+0x2f0>
 2ec:	mov	w0, #0x0                   	// #0
 2f0:	str	w0, [sp, #44]
 2f4:	ldr	x0, [sp, #96]
 2f8:	and	x0, x0, #0x7
 2fc:	cmp	x0, #0x0
 300:	b.eq	3c4 <__floattihf+0x3c4>  // b.none
 304:	ldr	w0, [sp, #84]
 308:	orr	w0, w0, #0x10
 30c:	str	w0, [sp, #84]
 310:	ldr	x0, [sp, #48]
 314:	and	x0, x0, #0xc00000
 318:	cmp	x0, #0xc00, lsl #12
 31c:	b.eq	3cc <__floattihf+0x3cc>  // b.none
 320:	cmp	x0, #0xc00, lsl #12
 324:	b.hi	3d0 <__floattihf+0x3d0>  // b.pmore
 328:	cmp	x0, #0x800, lsl #12
 32c:	b.eq	398 <__floattihf+0x398>  // b.none
 330:	cmp	x0, #0x800, lsl #12
 334:	b.hi	3d0 <__floattihf+0x3d0>  // b.pmore
 338:	cmp	x0, #0x0
 33c:	b.eq	34c <__floattihf+0x34c>  // b.none
 340:	cmp	x0, #0x400, lsl #12
 344:	b.eq	36c <__floattihf+0x36c>  // b.none
 348:	b	3d0 <__floattihf+0x3d0>
 34c:	ldr	x0, [sp, #96]
 350:	and	x0, x0, #0xf
 354:	cmp	x0, #0x4
 358:	b.eq	3cc <__floattihf+0x3cc>  // b.none
 35c:	ldr	x0, [sp, #96]
 360:	add	x0, x0, #0x4
 364:	str	x0, [sp, #96]
 368:	b	3cc <__floattihf+0x3cc>
 36c:	ldr	x0, [sp, #88]
 370:	cmp	x0, #0x0
 374:	b.ne	3cc <__floattihf+0x3cc>  // b.any
 378:	ldr	x0, [sp, #96]
 37c:	and	x0, x0, #0x7
 380:	cmp	x0, #0x0
 384:	b.eq	3cc <__floattihf+0x3cc>  // b.none
 388:	ldr	x0, [sp, #96]
 38c:	add	x0, x0, #0x8
 390:	str	x0, [sp, #96]
 394:	b	3cc <__floattihf+0x3cc>
 398:	ldr	x0, [sp, #88]
 39c:	cmp	x0, #0x0
 3a0:	b.eq	3cc <__floattihf+0x3cc>  // b.none
 3a4:	ldr	x0, [sp, #96]
 3a8:	and	x0, x0, #0x7
 3ac:	cmp	x0, #0x0
 3b0:	b.eq	3cc <__floattihf+0x3cc>  // b.none
 3b4:	ldr	x0, [sp, #96]
 3b8:	add	x0, x0, #0x8
 3bc:	str	x0, [sp, #96]
 3c0:	b	3cc <__floattihf+0x3cc>
 3c4:	nop
 3c8:	b	3d0 <__floattihf+0x3d0>
 3cc:	nop
 3d0:	ldr	w0, [sp, #44]
 3d4:	cmp	w0, #0x0
 3d8:	b.eq	408 <__floattihf+0x408>  // b.none
 3dc:	ldr	w0, [sp, #84]
 3e0:	and	w0, w0, #0x10
 3e4:	cmp	w0, #0x0
 3e8:	b.ne	3fc <__floattihf+0x3fc>  // b.any
 3ec:	ldr	x0, [sp, #48]
 3f0:	and	x0, x0, #0x800
 3f4:	cmp	x0, #0x0
 3f8:	b.eq	408 <__floattihf+0x408>  // b.none
 3fc:	ldr	w0, [sp, #84]
 400:	orr	w0, w0, #0x8
 404:	str	w0, [sp, #84]
 408:	ldr	x0, [sp, #96]
 40c:	and	x0, x0, #0x2000
 410:	cmp	x0, #0x0
 414:	b.eq	4bc <__floattihf+0x4bc>  // b.none
 418:	ldr	x0, [sp, #96]
 41c:	and	x0, x0, #0xffffffffffffdfff
 420:	str	x0, [sp, #96]
 424:	ldr	x0, [sp, #104]
 428:	add	x0, x0, #0x1
 42c:	str	x0, [sp, #104]
 430:	ldr	x0, [sp, #104]
 434:	cmp	x0, #0x1f
 438:	b.ne	4bc <__floattihf+0x4bc>  // b.any
 43c:	ldr	x0, [sp, #48]
 440:	and	x0, x0, #0xc00000
 444:	cmp	x0, #0x0
 448:	b.eq	484 <__floattihf+0x484>  // b.none
 44c:	ldr	x0, [sp, #48]
 450:	and	x0, x0, #0xc00000
 454:	cmp	x0, #0x400, lsl #12
 458:	b.ne	468 <__floattihf+0x468>  // b.any
 45c:	ldr	x0, [sp, #88]
 460:	cmp	x0, #0x0
 464:	b.eq	484 <__floattihf+0x484>  // b.none
 468:	ldr	x0, [sp, #48]
 46c:	and	x0, x0, #0xc00000
 470:	cmp	x0, #0x800, lsl #12
 474:	b.ne	494 <__floattihf+0x494>  // b.any
 478:	ldr	x0, [sp, #88]
 47c:	cmp	x0, #0x0
 480:	b.eq	494 <__floattihf+0x494>  // b.none
 484:	mov	x0, #0x1f                  	// #31
 488:	str	x0, [sp, #104]
 48c:	str	xzr, [sp, #96]
 490:	b	4a4 <__floattihf+0x4a4>
 494:	mov	x0, #0x1e                  	// #30
 498:	str	x0, [sp, #104]
 49c:	mov	x0, #0xffffffffffffffff    	// #-1
 4a0:	str	x0, [sp, #96]
 4a4:	ldr	w0, [sp, #84]
 4a8:	orr	w0, w0, #0x10
 4ac:	str	w0, [sp, #84]
 4b0:	ldr	w0, [sp, #84]
 4b4:	orr	w0, w0, #0x4
 4b8:	str	w0, [sp, #84]
 4bc:	ldr	x0, [sp, #96]
 4c0:	lsr	x0, x0, #3
 4c4:	str	x0, [sp, #96]
 4c8:	ldr	x0, [sp, #104]
 4cc:	cmp	x0, #0x1f
 4d0:	b.ne	4fc <__floattihf+0x4fc>  // b.any
 4d4:	ldr	x0, [sp, #96]
 4d8:	cmp	x0, #0x0
 4dc:	b.eq	4fc <__floattihf+0x4fc>  // b.none
 4e0:	ldr	x0, [sp, #96]
 4e4:	orr	x0, x0, #0x200
 4e8:	str	x0, [sp, #96]
 4ec:	b	4fc <__floattihf+0x4fc>
 4f0:	str	xzr, [sp, #88]
 4f4:	str	xzr, [sp, #104]
 4f8:	str	xzr, [sp, #96]
 4fc:	ldr	x0, [sp, #96]
 500:	and	w0, w0, #0x3ff
 504:	and	w1, w0, #0xffff
 508:	ldrh	w0, [sp, #32]
 50c:	bfxil	w0, w1, #0, #10
 510:	strh	w0, [sp, #32]
 514:	ldr	x0, [sp, #104]
 518:	and	w0, w0, #0x1f
 51c:	and	w1, w0, #0xff
 520:	ldrb	w0, [sp, #33]
 524:	bfi	w0, w1, #2, #5
 528:	strb	w0, [sp, #33]
 52c:	ldr	x0, [sp, #88]
 530:	and	w0, w0, #0x1
 534:	and	w1, w0, #0xff
 538:	ldrb	w0, [sp, #33]
 53c:	bfi	w0, w1, #7, #1
 540:	strb	w0, [sp, #33]
 544:	ldr	h0, [sp, #32]
 548:	str	h0, [sp, #42]
 54c:	ldrsw	x0, [sp, #84]
 550:	cmp	x0, #0x0
 554:	b.eq	560 <__floattihf+0x560>  // b.none
 558:	ldr	w0, [sp, #84]
 55c:	bl	0 <__sfp_handle_exceptions>
 560:	ldr	h0, [sp, #42]
 564:	ldp	x29, x30, [sp], #112
 568:	ret

floatuntihf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__floatuntihf>:
   0:	stp	x29, x30, [sp, #-112]!
   4:	mov	x29, sp
   8:	stp	x0, x1, [sp, #16]
   c:	str	wzr, [sp, #84]
  10:	str	xzr, [sp, #48]
  14:	mrs	x0, fpcr
  18:	str	x0, [sp, #48]
  1c:	ldr	x0, [sp, #16]
  20:	ldr	x1, [sp, #24]
  24:	orr	x0, x0, x1
  28:	cmp	x0, #0x0
  2c:	b.eq	4e0 <__floatuntihf+0x4e0>  // b.none
  30:	ldp	x0, x1, [sp, #16]
  34:	stp	x0, x1, [sp, #64]
  38:	str	xzr, [sp, #88]
  3c:	ldr	x0, [sp, #88]
  40:	cmp	x0, #0x0
  44:	b.eq	60 <__floatuntihf+0x60>  // b.none
  48:	ldp	x0, x1, [sp, #64]
  4c:	negs	x14, x0
  50:	ngc	x0, x1
  54:	mov	x8, x14
  58:	mov	x9, x0
  5c:	stp	x8, x9, [sp, #64]
  60:	ldr	x0, [sp, #72]
  64:	mov	x12, x0
  68:	mov	x13, #0x0                   	// #0
  6c:	mov	x0, x12
  70:	cmp	x0, #0x0
  74:	b.eq	94 <__floatuntihf+0x94>  // b.none
  78:	ldr	x0, [sp, #72]
  7c:	mov	x10, x0
  80:	mov	x11, #0x0                   	// #0
  84:	mov	x0, x10
  88:	clz	x0, x0
  8c:	str	w0, [sp, #60]
  90:	b	ac <__floatuntihf+0xac>
  94:	ldr	x0, [sp, #64]
  98:	clz	x0, x0
  9c:	str	w0, [sp, #60]
  a0:	ldr	w0, [sp, #60]
  a4:	add	w0, w0, #0x40
  a8:	str	w0, [sp, #60]
  ac:	mov	w1, #0x8e                  	// #142
  b0:	ldr	w0, [sp, #60]
  b4:	sub	w0, w1, w0
  b8:	sxtw	x0, w0
  bc:	str	x0, [sp, #104]
  c0:	ldr	x0, [sp, #104]
  c4:	cmp	x0, #0x1e
  c8:	b.le	150 <__floatuntihf+0x150>
  cc:	ldr	x0, [sp, #48]
  d0:	and	x0, x0, #0xc00000
  d4:	cmp	x0, #0x0
  d8:	b.eq	114 <__floatuntihf+0x114>  // b.none
  dc:	ldr	x0, [sp, #48]
  e0:	and	x0, x0, #0xc00000
  e4:	cmp	x0, #0x400, lsl #12
  e8:	b.ne	f8 <__floatuntihf+0xf8>  // b.any
  ec:	ldr	x0, [sp, #88]
  f0:	cmp	x0, #0x0
  f4:	b.eq	114 <__floatuntihf+0x114>  // b.none
  f8:	ldr	x0, [sp, #48]
  fc:	and	x0, x0, #0xc00000
 100:	cmp	x0, #0x800, lsl #12
 104:	b.ne	124 <__floatuntihf+0x124>  // b.any
 108:	ldr	x0, [sp, #88]
 10c:	cmp	x0, #0x0
 110:	b.eq	124 <__floatuntihf+0x124>  // b.none
 114:	mov	x0, #0x1f                  	// #31
 118:	str	x0, [sp, #104]
 11c:	str	xzr, [sp, #96]
 120:	b	134 <__floatuntihf+0x134>
 124:	mov	x0, #0x1e                  	// #30
 128:	str	x0, [sp, #104]
 12c:	mov	x0, #0xffffffffffffffff    	// #-1
 130:	str	x0, [sp, #96]
 134:	ldr	w0, [sp, #84]
 138:	orr	w0, w0, #0x10
 13c:	str	w0, [sp, #84]
 140:	ldr	w0, [sp, #84]
 144:	orr	w0, w0, #0x4
 148:	str	w0, [sp, #84]
 14c:	b	2bc <__floatuntihf+0x2bc>
 150:	ldr	x0, [sp, #104]
 154:	cmp	x0, #0x19
 158:	b.gt	198 <__floatuntihf+0x198>
 15c:	ldr	x0, [sp, #64]
 160:	str	x0, [sp, #96]
 164:	mov	x1, #0x19                  	// #25
 168:	ldr	x0, [sp, #104]
 16c:	sub	x0, x1, x0
 170:	cmp	x0, #0x0
 174:	b.le	4ec <__floatuntihf+0x4ec>
 178:	ldr	x0, [sp, #104]
 17c:	mov	w1, w0
 180:	mov	w0, #0x19                  	// #25
 184:	sub	w0, w0, w1
 188:	ldr	x1, [sp, #96]
 18c:	lsl	x0, x1, x0
 190:	str	x0, [sp, #96]
 194:	b	4ec <__floatuntihf+0x4ec>
 198:	ldr	x0, [sp, #104]
 19c:	cmp	x0, #0x1c
 1a0:	b.le	278 <__floatuntihf+0x278>
 1a4:	ldr	x0, [sp, #104]
 1a8:	sub	w0, w0, #0x1c
 1ac:	sub	w1, w0, #0x40
 1b0:	ldr	x8, [sp, #72]
 1b4:	lsr	x8, x8, x1
 1b8:	mov	x11, #0x0                   	// #0
 1bc:	ldr	x9, [sp, #72]
 1c0:	lsl	x10, x9, #1
 1c4:	mov	w9, #0x3f                  	// #63
 1c8:	sub	w9, w9, w0
 1cc:	lsl	x9, x10, x9
 1d0:	ldr	x10, [sp, #64]
 1d4:	lsr	x2, x10, x0
 1d8:	orr	x2, x9, x2
 1dc:	ldr	x9, [sp, #72]
 1e0:	lsr	x3, x9, x0
 1e4:	cmp	w1, #0x0
 1e8:	csel	x2, x8, x2, ge  // ge = tcont
 1ec:	cmp	w1, #0x0
 1f0:	csel	x3, x11, x3, ge  // ge = tcont
 1f4:	ldr	x0, [sp, #104]
 1f8:	mov	w1, w0
 1fc:	mov	w0, #0x9c                  	// #156
 200:	sub	w0, w0, w1
 204:	sub	w1, w0, #0x40
 208:	ldr	x8, [sp, #64]
 20c:	lsl	x8, x8, x1
 210:	mov	x11, #0x0                   	// #0
 214:	ldr	x9, [sp, #64]
 218:	lsr	x10, x9, #1
 21c:	mov	w9, #0x3f                  	// #63
 220:	sub	w9, w9, w0
 224:	lsr	x9, x10, x9
 228:	ldr	x10, [sp, #72]
 22c:	lsl	x5, x10, x0
 230:	orr	x5, x9, x5
 234:	ldr	x9, [sp, #64]
 238:	lsl	x4, x9, x0
 23c:	cmp	w1, #0x0
 240:	csel	x5, x8, x5, ge  // ge = tcont
 244:	cmp	w1, #0x0
 248:	csel	x4, x11, x4, ge  // ge = tcont
 24c:	orr	x0, x4, x5
 250:	cmp	x0, #0x0
 254:	cset	w0, ne  // ne = any
 258:	and	w0, w0, #0xff
 25c:	and	x0, x0, #0xff
 260:	mov	x6, x0
 264:	mov	x7, #0x0                   	// #0
 268:	orr	x0, x2, x6
 26c:	str	x0, [sp, #64]
 270:	orr	x0, x3, x7
 274:	str	x0, [sp, #72]
 278:	ldr	x0, [sp, #64]
 27c:	str	x0, [sp, #96]
 280:	mov	x1, #0x1c                  	// #28
 284:	ldr	x0, [sp, #104]
 288:	sub	x0, x1, x0
 28c:	cmp	x0, #0x0
 290:	b.le	2b0 <__floatuntihf+0x2b0>
 294:	ldr	x0, [sp, #104]
 298:	mov	w1, w0
 29c:	mov	w0, #0x1c                  	// #28
 2a0:	sub	w0, w0, w1
 2a4:	ldr	x1, [sp, #96]
 2a8:	lsl	x0, x1, x0
 2ac:	str	x0, [sp, #96]
 2b0:	ldr	x0, [sp, #96]
 2b4:	and	x0, x0, #0xffffffffffffdfff
 2b8:	str	x0, [sp, #96]
 2bc:	ldr	x0, [sp, #104]
 2c0:	cmp	x0, #0x0
 2c4:	b.ne	2dc <__floatuntihf+0x2dc>  // b.any
 2c8:	ldr	x0, [sp, #96]
 2cc:	cmp	x0, #0x0
 2d0:	b.eq	2dc <__floatuntihf+0x2dc>  // b.none
 2d4:	mov	w0, #0x1                   	// #1
 2d8:	b	2e0 <__floatuntihf+0x2e0>
 2dc:	mov	w0, #0x0                   	// #0
 2e0:	str	w0, [sp, #44]
 2e4:	ldr	x0, [sp, #96]
 2e8:	and	x0, x0, #0x7
 2ec:	cmp	x0, #0x0
 2f0:	b.eq	3b4 <__floatuntihf+0x3b4>  // b.none
 2f4:	ldr	w0, [sp, #84]
 2f8:	orr	w0, w0, #0x10
 2fc:	str	w0, [sp, #84]
 300:	ldr	x0, [sp, #48]
 304:	and	x0, x0, #0xc00000
 308:	cmp	x0, #0xc00, lsl #12
 30c:	b.eq	3bc <__floatuntihf+0x3bc>  // b.none
 310:	cmp	x0, #0xc00, lsl #12
 314:	b.hi	3c0 <__floatuntihf+0x3c0>  // b.pmore
 318:	cmp	x0, #0x800, lsl #12
 31c:	b.eq	388 <__floatuntihf+0x388>  // b.none
 320:	cmp	x0, #0x800, lsl #12
 324:	b.hi	3c0 <__floatuntihf+0x3c0>  // b.pmore
 328:	cmp	x0, #0x0
 32c:	b.eq	33c <__floatuntihf+0x33c>  // b.none
 330:	cmp	x0, #0x400, lsl #12
 334:	b.eq	35c <__floatuntihf+0x35c>  // b.none
 338:	b	3c0 <__floatuntihf+0x3c0>
 33c:	ldr	x0, [sp, #96]
 340:	and	x0, x0, #0xf
 344:	cmp	x0, #0x4
 348:	b.eq	3bc <__floatuntihf+0x3bc>  // b.none
 34c:	ldr	x0, [sp, #96]
 350:	add	x0, x0, #0x4
 354:	str	x0, [sp, #96]
 358:	b	3bc <__floatuntihf+0x3bc>
 35c:	ldr	x0, [sp, #88]
 360:	cmp	x0, #0x0
 364:	b.ne	3bc <__floatuntihf+0x3bc>  // b.any
 368:	ldr	x0, [sp, #96]
 36c:	and	x0, x0, #0x7
 370:	cmp	x0, #0x0
 374:	b.eq	3bc <__floatuntihf+0x3bc>  // b.none
 378:	ldr	x0, [sp, #96]
 37c:	add	x0, x0, #0x8
 380:	str	x0, [sp, #96]
 384:	b	3bc <__floatuntihf+0x3bc>
 388:	ldr	x0, [sp, #88]
 38c:	cmp	x0, #0x0
 390:	b.eq	3bc <__floatuntihf+0x3bc>  // b.none
 394:	ldr	x0, [sp, #96]
 398:	and	x0, x0, #0x7
 39c:	cmp	x0, #0x0
 3a0:	b.eq	3bc <__floatuntihf+0x3bc>  // b.none
 3a4:	ldr	x0, [sp, #96]
 3a8:	add	x0, x0, #0x8
 3ac:	str	x0, [sp, #96]
 3b0:	b	3bc <__floatuntihf+0x3bc>
 3b4:	nop
 3b8:	b	3c0 <__floatuntihf+0x3c0>
 3bc:	nop
 3c0:	ldr	w0, [sp, #44]
 3c4:	cmp	w0, #0x0
 3c8:	b.eq	3f8 <__floatuntihf+0x3f8>  // b.none
 3cc:	ldr	w0, [sp, #84]
 3d0:	and	w0, w0, #0x10
 3d4:	cmp	w0, #0x0
 3d8:	b.ne	3ec <__floatuntihf+0x3ec>  // b.any
 3dc:	ldr	x0, [sp, #48]
 3e0:	and	x0, x0, #0x800
 3e4:	cmp	x0, #0x0
 3e8:	b.eq	3f8 <__floatuntihf+0x3f8>  // b.none
 3ec:	ldr	w0, [sp, #84]
 3f0:	orr	w0, w0, #0x8
 3f4:	str	w0, [sp, #84]
 3f8:	ldr	x0, [sp, #96]
 3fc:	and	x0, x0, #0x2000
 400:	cmp	x0, #0x0
 404:	b.eq	4ac <__floatuntihf+0x4ac>  // b.none
 408:	ldr	x0, [sp, #96]
 40c:	and	x0, x0, #0xffffffffffffdfff
 410:	str	x0, [sp, #96]
 414:	ldr	x0, [sp, #104]
 418:	add	x0, x0, #0x1
 41c:	str	x0, [sp, #104]
 420:	ldr	x0, [sp, #104]
 424:	cmp	x0, #0x1f
 428:	b.ne	4ac <__floatuntihf+0x4ac>  // b.any
 42c:	ldr	x0, [sp, #48]
 430:	and	x0, x0, #0xc00000
 434:	cmp	x0, #0x0
 438:	b.eq	474 <__floatuntihf+0x474>  // b.none
 43c:	ldr	x0, [sp, #48]
 440:	and	x0, x0, #0xc00000
 444:	cmp	x0, #0x400, lsl #12
 448:	b.ne	458 <__floatuntihf+0x458>  // b.any
 44c:	ldr	x0, [sp, #88]
 450:	cmp	x0, #0x0
 454:	b.eq	474 <__floatuntihf+0x474>  // b.none
 458:	ldr	x0, [sp, #48]
 45c:	and	x0, x0, #0xc00000
 460:	cmp	x0, #0x800, lsl #12
 464:	b.ne	484 <__floatuntihf+0x484>  // b.any
 468:	ldr	x0, [sp, #88]
 46c:	cmp	x0, #0x0
 470:	b.eq	484 <__floatuntihf+0x484>  // b.none
 474:	mov	x0, #0x1f                  	// #31
 478:	str	x0, [sp, #104]
 47c:	str	xzr, [sp, #96]
 480:	b	494 <__floatuntihf+0x494>
 484:	mov	x0, #0x1e                  	// #30
 488:	str	x0, [sp, #104]
 48c:	mov	x0, #0xffffffffffffffff    	// #-1
 490:	str	x0, [sp, #96]
 494:	ldr	w0, [sp, #84]
 498:	orr	w0, w0, #0x10
 49c:	str	w0, [sp, #84]
 4a0:	ldr	w0, [sp, #84]
 4a4:	orr	w0, w0, #0x4
 4a8:	str	w0, [sp, #84]
 4ac:	ldr	x0, [sp, #96]
 4b0:	lsr	x0, x0, #3
 4b4:	str	x0, [sp, #96]
 4b8:	ldr	x0, [sp, #104]
 4bc:	cmp	x0, #0x1f
 4c0:	b.ne	4ec <__floatuntihf+0x4ec>  // b.any
 4c4:	ldr	x0, [sp, #96]
 4c8:	cmp	x0, #0x0
 4cc:	b.eq	4ec <__floatuntihf+0x4ec>  // b.none
 4d0:	ldr	x0, [sp, #96]
 4d4:	orr	x0, x0, #0x200
 4d8:	str	x0, [sp, #96]
 4dc:	b	4ec <__floatuntihf+0x4ec>
 4e0:	str	xzr, [sp, #88]
 4e4:	str	xzr, [sp, #104]
 4e8:	str	xzr, [sp, #96]
 4ec:	ldr	x0, [sp, #96]
 4f0:	and	w0, w0, #0x3ff
 4f4:	and	w1, w0, #0xffff
 4f8:	ldrh	w0, [sp, #32]
 4fc:	bfxil	w0, w1, #0, #10
 500:	strh	w0, [sp, #32]
 504:	ldr	x0, [sp, #104]
 508:	and	w0, w0, #0x1f
 50c:	and	w1, w0, #0xff
 510:	ldrb	w0, [sp, #33]
 514:	bfi	w0, w1, #2, #5
 518:	strb	w0, [sp, #33]
 51c:	ldr	x0, [sp, #88]
 520:	and	w0, w0, #0x1
 524:	and	w1, w0, #0xff
 528:	ldrb	w0, [sp, #33]
 52c:	bfi	w0, w1, #7, #1
 530:	strb	w0, [sp, #33]
 534:	ldr	h0, [sp, #32]
 538:	str	h0, [sp, #42]
 53c:	ldrsw	x0, [sp, #84]
 540:	cmp	x0, #0x0
 544:	b.eq	550 <__floatuntihf+0x550>  // b.none
 548:	ldr	w0, [sp, #84]
 54c:	bl	0 <__sfp_handle_exceptions>
 550:	ldr	h0, [sp, #42]
 554:	ldp	x29, x30, [sp], #112
 558:	ret

enable-execute-stack.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__enable_execute_stack>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	nop
   c:	add	sp, sp, #0x10
  10:	ret
