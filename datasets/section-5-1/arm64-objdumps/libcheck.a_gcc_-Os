In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libcheck.a_gcc_-Os:

check.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <suite_create>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x0, #0x10                  	// #16
  14:	bl	0 <emalloc>
  18:	mov	x20, x0
  1c:	cbnz	x19, 28 <suite_create+0x28>
  20:	adrp	x19, 0 <suite_create>
  24:	add	x19, x19, #0x0
  28:	str	x19, [x20]
  2c:	bl	0 <check_list_create>
  30:	str	x0, [x20, #8]
  34:	mov	x0, x20
  38:	ldp	x19, x20, [sp, #16]
  3c:	ldp	x29, x30, [sp], #32
  40:	ret

0000000000000044 <suite_tcase>:
  44:	cbnz	x0, 50 <suite_tcase+0xc>
  48:	mov	w0, #0x0                   	// #0
  4c:	ret
  50:	stp	x29, x30, [sp, #-32]!
  54:	mov	x29, sp
  58:	stp	x19, x20, [sp, #16]
  5c:	mov	x20, x1
  60:	ldr	x19, [x0, #8]
  64:	mov	x0, x19
  68:	bl	0 <check_list_front>
  6c:	mov	x0, x19
  70:	bl	0 <check_list_at_end>
  74:	cbz	w0, 88 <suite_tcase+0x44>
  78:	mov	w0, #0x0                   	// #0
  7c:	ldp	x19, x20, [sp, #16]
  80:	ldp	x29, x30, [sp], #32
  84:	ret
  88:	mov	x0, x19
  8c:	bl	0 <check_list_val>
  90:	ldr	x1, [x0]
  94:	mov	x0, x20
  98:	bl	0 <strcmp>
  9c:	cbz	w0, ac <suite_tcase+0x68>
  a0:	mov	x0, x19
  a4:	bl	0 <check_list_advance>
  a8:	b	6c <suite_tcase+0x28>
  ac:	mov	w0, #0x1                   	// #1
  b0:	b	7c <suite_tcase+0x38>

00000000000000b4 <tcase_create>:
  b4:	stp	x29, x30, [sp, #-64]!
  b8:	mov	x29, sp
  bc:	stp	x19, x20, [sp, #16]
  c0:	mov	x20, x0
  c4:	mov	x0, #0x48                  	// #72
  c8:	str	d8, [sp, #32]
  cc:	bl	0 <emalloc>
  d0:	mov	x19, x0
  d4:	cbnz	x20, e0 <tcase_create+0x2c>
  d8:	adrp	x20, 0 <suite_create>
  dc:	add	x20, x20, #0x0
  e0:	str	x20, [x19]
  e4:	adrp	x0, 0 <suite_create>
  e8:	add	x0, x0, #0x0
  ec:	bl	0 <getenv>
  f0:	mov	x20, x0
  f4:	cbz	x0, 1d8 <tcase_create+0x124>
  f8:	add	x1, sp, #0x38
  fc:	str	xzr, [sp, #56]
 100:	bl	0 <strtod>
 104:	fcmpe	d0, #0.0
 108:	fmov	d8, d0
 10c:	b.lt	1d8 <tcase_create+0x124>  // b.tstop
 110:	ldr	x0, [sp, #56]
 114:	cmp	x0, x20
 118:	b.eq	1d8 <tcase_create+0x124>  // b.none
 11c:	ldrb	w0, [x0]
 120:	fmov	d0, #4.000000000000000000e+00
 124:	cmp	w0, #0x0
 128:	fcsel	d8, d8, d0, eq  // eq = none
 12c:	adrp	x0, 0 <suite_create>
 130:	add	x0, x0, #0x0
 134:	bl	0 <getenv>
 138:	mov	x20, x0
 13c:	cbz	x0, 16c <tcase_create+0xb8>
 140:	add	x1, sp, #0x38
 144:	str	xzr, [sp, #56]
 148:	bl	0 <strtod>
 14c:	fcmpe	d0, #0.0
 150:	b.lt	16c <tcase_create+0xb8>  // b.tstop
 154:	ldr	x0, [sp, #56]
 158:	cmp	x0, x20
 15c:	b.eq	16c <tcase_create+0xb8>  // b.none
 160:	ldrb	w0, [x0]
 164:	cbnz	w0, 16c <tcase_create+0xb8>
 168:	fmul	d8, d8, d0
 16c:	fcvtms	x0, d8
 170:	frintm	d0, d8
 174:	fsub	d8, d8, d0
 178:	str	x0, [x19, #8]
 17c:	mov	x0, #0xcd6500000000        	// #225833675390976
 180:	movk	x0, #0x41cd, lsl #48
 184:	fmov	d0, x0
 188:	fmul	d8, d8, d0
 18c:	fcvtzs	d8, d8
 190:	str	d8, [x19, #16]
 194:	bl	0 <check_list_create>
 198:	str	x0, [x19, #24]
 19c:	bl	0 <check_list_create>
 1a0:	str	x0, [x19, #32]
 1a4:	bl	0 <check_list_create>
 1a8:	str	x0, [x19, #48]
 1ac:	bl	0 <check_list_create>
 1b0:	str	x0, [x19, #40]
 1b4:	bl	0 <check_list_create>
 1b8:	str	x0, [x19, #56]
 1bc:	bl	0 <check_list_create>
 1c0:	ldr	d8, [sp, #32]
 1c4:	str	x0, [x19, #64]
 1c8:	mov	x0, x19
 1cc:	ldp	x19, x20, [sp, #16]
 1d0:	ldp	x29, x30, [sp], #64
 1d4:	ret
 1d8:	fmov	d8, #4.000000000000000000e+00
 1dc:	b	12c <tcase_create+0x78>

00000000000001e0 <tag_string_to_list>:
 1e0:	stp	x29, x30, [sp, #-48]!
 1e4:	mov	x29, sp
 1e8:	stp	x19, x20, [sp, #16]
 1ec:	mov	x20, x0
 1f0:	str	x21, [sp, #32]
 1f4:	bl	0 <check_list_create>
 1f8:	mov	x19, x0
 1fc:	cbz	x20, 228 <tag_string_to_list+0x48>
 200:	mov	x0, x20
 204:	adrp	x20, 0 <suite_create>
 208:	bl	0 <strdup>
 20c:	add	x20, x20, #0x0
 210:	mov	x21, x0
 214:	mov	x1, x20
 218:	bl	0 <strtok>
 21c:	cbnz	x0, 23c <tag_string_to_list+0x5c>
 220:	mov	x0, x21
 224:	bl	0 <free>
 228:	mov	x0, x19
 22c:	ldp	x19, x20, [sp, #16]
 230:	ldr	x21, [sp, #32]
 234:	ldp	x29, x30, [sp], #48
 238:	ret
 23c:	bl	0 <strdup>
 240:	mov	x1, x0
 244:	mov	x0, x19
 248:	bl	0 <check_list_add_end>
 24c:	mov	x1, x20
 250:	mov	x0, #0x0                   	// #0
 254:	b	218 <tag_string_to_list+0x38>

0000000000000258 <tcase_set_tags>:
 258:	stp	x29, x30, [sp, #-32]!
 25c:	mov	x29, sp
 260:	stp	x19, x20, [sp, #16]
 264:	mov	x19, x0
 268:	mov	x20, x1
 26c:	ldr	x0, [x0, #64]
 270:	cbz	x0, 288 <tcase_set_tags+0x30>
 274:	adrp	x1, 0 <free>
 278:	add	x1, x1, #0x0
 27c:	bl	0 <check_list_apply>
 280:	ldr	x0, [x19, #64]
 284:	bl	0 <check_list_free>
 288:	mov	x0, x20
 28c:	bl	1e0 <tag_string_to_list>
 290:	str	x0, [x19, #64]
 294:	ldp	x19, x20, [sp, #16]
 298:	ldp	x29, x30, [sp], #32
 29c:	ret

00000000000002a0 <tcase_matching_tag>:
 2a0:	cbnz	x1, 2ac <tcase_matching_tag+0xc>
 2a4:	mov	w0, #0x0                   	// #0
 2a8:	ret
 2ac:	stp	x29, x30, [sp, #-48]!
 2b0:	mov	x29, sp
 2b4:	stp	x19, x20, [sp, #16]
 2b8:	mov	x20, x0
 2bc:	mov	x19, x1
 2c0:	mov	x0, x1
 2c4:	str	x21, [sp, #32]
 2c8:	bl	0 <check_list_front>
 2cc:	mov	x0, x19
 2d0:	bl	0 <check_list_at_end>
 2d4:	cbz	w0, 2ec <tcase_matching_tag+0x4c>
 2d8:	mov	w0, #0x0                   	// #0
 2dc:	ldp	x19, x20, [sp, #16]
 2e0:	ldr	x21, [sp, #32]
 2e4:	ldp	x29, x30, [sp], #48
 2e8:	ret
 2ec:	ldr	x0, [x20, #64]
 2f0:	bl	0 <check_list_front>
 2f4:	ldr	x0, [x20, #64]
 2f8:	bl	0 <check_list_at_end>
 2fc:	cbz	w0, 30c <tcase_matching_tag+0x6c>
 300:	mov	x0, x19
 304:	bl	0 <check_list_advance>
 308:	b	2cc <tcase_matching_tag+0x2c>
 30c:	ldr	x0, [x20, #64]
 310:	bl	0 <check_list_val>
 314:	mov	x21, x0
 318:	mov	x0, x19
 31c:	bl	0 <check_list_val>
 320:	mov	x1, x0
 324:	mov	x0, x21
 328:	bl	0 <strcmp>
 32c:	cbz	w0, 33c <tcase_matching_tag+0x9c>
 330:	ldr	x0, [x20, #64]
 334:	bl	0 <check_list_advance>
 338:	b	2f4 <tcase_matching_tag+0x54>
 33c:	mov	w0, #0x1                   	// #1
 340:	b	2dc <tcase_matching_tag+0x3c>

0000000000000344 <suite_add_tcase>:
 344:	cmp	x0, #0x0
 348:	ccmp	x1, #0x0, #0x4, ne  // ne = any
 34c:	b.eq	390 <suite_add_tcase+0x4c>  // b.none
 350:	stp	x29, x30, [sp, #-32]!
 354:	mov	x29, sp
 358:	stp	x19, x20, [sp, #16]
 35c:	mov	x19, x0
 360:	mov	x20, x1
 364:	ldr	x0, [x0, #8]
 368:	bl	0 <check_list_contains>
 36c:	cbnz	w0, 384 <suite_add_tcase+0x40>
 370:	mov	x1, x20
 374:	ldr	x0, [x19, #8]
 378:	ldp	x19, x20, [sp, #16]
 37c:	ldp	x29, x30, [sp], #32
 380:	b	0 <check_list_add_end>
 384:	ldp	x19, x20, [sp, #16]
 388:	ldp	x29, x30, [sp], #32
 38c:	ret
 390:	ret

0000000000000394 <_tcase_add_test>:
 394:	cmp	x0, #0x0
 398:	ccmp	x1, #0x0, #0x4, ne  // ne = any
 39c:	b.eq	400 <_tcase_add_test+0x6c>  // b.none
 3a0:	stp	x29, x30, [sp, #-64]!
 3a4:	mov	x29, sp
 3a8:	stp	x19, x20, [sp, #16]
 3ac:	mov	x20, x1
 3b0:	mov	x19, x0
 3b4:	mov	x0, #0x18                  	// #24
 3b8:	stp	x21, x22, [sp, #32]
 3bc:	mov	w22, w2
 3c0:	mov	w21, w3
 3c4:	stp	x23, x24, [sp, #48]
 3c8:	mov	w24, w4
 3cc:	mov	w23, w5
 3d0:	bl	0 <emalloc>
 3d4:	mov	x1, x0
 3d8:	strb	w21, [x0, #20]
 3dc:	ldr	x0, [x19, #24]
 3e0:	str	x20, [x1]
 3e4:	stp	w24, w23, [x1, #8]
 3e8:	str	w22, [x1, #16]
 3ec:	ldp	x19, x20, [sp, #16]
 3f0:	ldp	x21, x22, [sp, #32]
 3f4:	ldp	x23, x24, [sp, #48]
 3f8:	ldp	x29, x30, [sp], #64
 3fc:	b	0 <check_list_add_end>
 400:	ret

0000000000000404 <tcase_add_unchecked_fixture>:
 404:	stp	x29, x30, [sp, #-48]!
 408:	mov	x29, sp
 40c:	stp	x19, x20, [sp, #16]
 410:	mov	x20, x0
 414:	mov	x19, x2
 418:	stp	x21, x22, [sp, #32]
 41c:	cbz	x1, 444 <tcase_add_unchecked_fixture+0x40>
 420:	mov	x21, x1
 424:	mov	x0, #0x10                  	// #16
 428:	ldr	x22, [x20, #32]
 42c:	bl	0 <emalloc>
 430:	mov	x1, x0
 434:	mov	x0, x22
 438:	str	wzr, [x1]
 43c:	str	x21, [x1, #8]
 440:	bl	0 <check_list_add_end>
 444:	cbz	x19, 474 <tcase_add_unchecked_fixture+0x70>
 448:	mov	x0, #0x10                  	// #16
 44c:	ldr	x20, [x20, #40]
 450:	bl	0 <emalloc>
 454:	mov	x1, x0
 458:	ldp	x21, x22, [sp, #32]
 45c:	mov	x0, x20
 460:	str	wzr, [x1]
 464:	str	x19, [x1, #8]
 468:	ldp	x19, x20, [sp, #16]
 46c:	ldp	x29, x30, [sp], #48
 470:	b	0 <check_list_add_front>
 474:	ldp	x19, x20, [sp, #16]
 478:	ldp	x21, x22, [sp, #32]
 47c:	ldp	x29, x30, [sp], #48
 480:	ret

0000000000000484 <tcase_add_checked_fixture>:
 484:	stp	x29, x30, [sp, #-48]!
 488:	mov	x29, sp
 48c:	stp	x19, x20, [sp, #16]
 490:	mov	x20, x0
 494:	mov	x19, x2
 498:	stp	x21, x22, [sp, #32]
 49c:	cbz	x1, 4c8 <tcase_add_checked_fixture+0x44>
 4a0:	mov	x21, x1
 4a4:	mov	x0, #0x10                  	// #16
 4a8:	ldr	x22, [x20, #48]
 4ac:	bl	0 <emalloc>
 4b0:	mov	x1, x0
 4b4:	mov	w0, #0x1                   	// #1
 4b8:	str	w0, [x1]
 4bc:	mov	x0, x22
 4c0:	str	x21, [x1, #8]
 4c4:	bl	0 <check_list_add_end>
 4c8:	cbz	x19, 4fc <tcase_add_checked_fixture+0x78>
 4cc:	mov	x0, #0x10                  	// #16
 4d0:	ldr	x20, [x20, #56]
 4d4:	bl	0 <emalloc>
 4d8:	mov	x1, x0
 4dc:	mov	w0, #0x1                   	// #1
 4e0:	ldp	x21, x22, [sp, #32]
 4e4:	str	w0, [x1]
 4e8:	mov	x0, x20
 4ec:	str	x19, [x1, #8]
 4f0:	ldp	x19, x20, [sp, #16]
 4f4:	ldp	x29, x30, [sp], #48
 4f8:	b	0 <check_list_add_front>
 4fc:	ldp	x19, x20, [sp, #16]
 500:	ldp	x21, x22, [sp, #32]
 504:	ldp	x29, x30, [sp], #48
 508:	ret

000000000000050c <tcase_set_timeout>:
 50c:	fcmpe	d0, #0.0
 510:	b.lt	5a4 <tcase_set_timeout+0x98>  // b.tstop
 514:	stp	x29, x30, [sp, #-64]!
 518:	mov	x29, sp
 51c:	str	d8, [sp, #32]
 520:	fmov	d8, d0
 524:	stp	x19, x20, [sp, #16]
 528:	mov	x19, x0
 52c:	adrp	x0, 0 <suite_create>
 530:	add	x0, x0, #0x0
 534:	bl	0 <getenv>
 538:	mov	x20, x0
 53c:	cbz	x0, 56c <tcase_set_timeout+0x60>
 540:	add	x1, sp, #0x38
 544:	str	xzr, [sp, #56]
 548:	bl	0 <strtod>
 54c:	fcmpe	d0, #0.0
 550:	b.lt	56c <tcase_set_timeout+0x60>  // b.tstop
 554:	ldr	x0, [sp, #56]
 558:	cmp	x0, x20
 55c:	b.eq	56c <tcase_set_timeout+0x60>  // b.none
 560:	ldrb	w0, [x0]
 564:	cbnz	w0, 56c <tcase_set_timeout+0x60>
 568:	fmul	d8, d8, d0
 56c:	fcvtms	x0, d8
 570:	frintm	d0, d8
 574:	fsub	d8, d8, d0
 578:	str	x0, [x19, #8]
 57c:	mov	x0, #0xcd6500000000        	// #225833675390976
 580:	movk	x0, #0x41cd, lsl #48
 584:	fmov	d0, x0
 588:	fmul	d8, d8, d0
 58c:	fcvtzs	d8, d8
 590:	str	d8, [x19, #16]
 594:	ldp	x19, x20, [sp, #16]
 598:	ldr	d8, [sp, #32]
 59c:	ldp	x29, x30, [sp], #64
 5a0:	ret
 5a4:	ret

00000000000005a8 <tcase_fn_start>:
 5a8:	stp	x29, x30, [sp, #-48]!
 5ac:	mov	x29, sp
 5b0:	stp	x19, x20, [sp, #16]
 5b4:	mov	x20, x1
 5b8:	mov	x19, x0
 5bc:	mov	w0, #0x2                   	// #2
 5c0:	str	x21, [sp, #32]
 5c4:	mov	w21, w2
 5c8:	bl	0 <send_ctx_info>
 5cc:	mov	w1, w21
 5d0:	mov	x0, x20
 5d4:	bl	0 <send_loc_info>
 5d8:	adrp	x0, 0 <suite_create>
 5dc:	ldr	x21, [sp, #32]
 5e0:	str	x19, [x0]
 5e4:	ldp	x19, x20, [sp, #16]
 5e8:	ldp	x29, x30, [sp], #48
 5ec:	ret

00000000000005f0 <tcase_name>:
 5f0:	adrp	x0, 0 <suite_create>
 5f4:	ldr	x0, [x0]
 5f8:	ret

00000000000005fc <_mark_point>:
 5fc:	b	0 <send_loc_info>

0000000000000600 <_ck_assert_failed>:
 600:	mov	x12, #0x2110                	// #8464
 604:	sub	sp, sp, x12
 608:	stp	x29, x30, [sp]
 60c:	mov	x29, sp
 610:	str	x19, [sp, #16]
 614:	mov	x19, x2
 618:	add	x2, sp, #0x2, lsl #12
 61c:	str	x3, [sp, #8424]
 620:	str	x4, [sp, #8432]
 624:	str	x5, [sp, #8440]
 628:	str	x6, [sp, #8448]
 62c:	str	x7, [sp, #8456]
 630:	str	q0, [x2, #96]
 634:	str	q1, [x2, #112]
 638:	str	q2, [x2, #128]
 63c:	str	q3, [x2, #144]
 640:	str	q4, [x2, #160]
 644:	str	q5, [x2, #176]
 648:	str	q6, [x2, #192]
 64c:	str	q7, [x2, #208]
 650:	bl	0 <send_loc_info>
 654:	mov	x10, #0x2110                	// #8464
 658:	add	x0, sp, x10
 65c:	mov	x11, #0x20e0                	// #8416
 660:	stp	x0, x0, [sp, #64]
 664:	add	x0, sp, x11
 668:	ldr	x2, [sp, #8424]
 66c:	str	x0, [sp, #80]
 670:	mov	w0, #0xffffff80            	// #-128
 674:	str	w0, [sp, #92]
 678:	mov	w0, #0xffffffe0            	// #-32
 67c:	str	w0, [sp, #88]
 680:	cbz	x2, 6a8 <_ck_assert_failed+0xa8>
 684:	ldp	x0, x1, [sp, #64]
 688:	stp	x0, x1, [sp, #32]
 68c:	add	x19, sp, #0x60
 690:	ldp	x0, x1, [sp, #80]
 694:	add	x3, sp, #0x20
 698:	stp	x0, x1, [sp, #48]
 69c:	add	x0, sp, #0x60
 6a0:	mov	x1, #0x2000                	// #8192
 6a4:	bl	0 <vsnprintf>
 6a8:	mov	x0, x19
 6ac:	bl	0 <send_failure_info>
 6b0:	adrp	x0, 0 <suite_create>
 6b4:	ldr	w0, [x0]
 6b8:	cmp	w0, #0x1
 6bc:	b.ne	6c4 <_ck_assert_failed+0xc4>  // b.any
 6c0:	bl	0 <_exit>
 6c4:	adrp	x0, 0 <error_jmp_buffer>
 6c8:	mov	w1, #0x1                   	// #1
 6cc:	add	x0, x0, #0x0
 6d0:	bl	0 <longjmp>

00000000000006d4 <srunner_create>:
 6d4:	stp	x29, x30, [sp, #-32]!
 6d8:	mov	x29, sp
 6dc:	stp	x19, x20, [sp, #16]
 6e0:	mov	x20, x0
 6e4:	mov	x0, #0x40                  	// #64
 6e8:	bl	0 <emalloc>
 6ec:	mov	x19, x0
 6f0:	bl	0 <check_list_create>
 6f4:	str	x0, [x19]
 6f8:	cbz	x20, 704 <srunner_create+0x30>
 6fc:	mov	x1, x20
 700:	bl	0 <check_list_add_end>
 704:	mov	x0, #0xc                   	// #12
 708:	bl	0 <emalloc>
 70c:	str	x0, [x19, #8]
 710:	str	xzr, [x0]
 714:	str	wzr, [x0, #8]
 718:	bl	0 <check_list_create>
 71c:	stp	x0, xzr, [x19, #16]
 720:	mov	x0, x19
 724:	stp	xzr, xzr, [x19, #32]
 728:	str	xzr, [x19, #48]
 72c:	str	wzr, [x19, #56]
 730:	ldp	x19, x20, [sp, #16]
 734:	ldp	x29, x30, [sp], #32
 738:	ret

000000000000073c <srunner_add_suite>:
 73c:	cbz	x1, 748 <srunner_add_suite+0xc>
 740:	ldr	x0, [x0]
 744:	b	0 <check_list_add_end>
 748:	ret

000000000000074c <srunner_ntests_failed>:
 74c:	ldr	x1, [x0, #8]
 750:	ldp	w2, w0, [x1, #4]
 754:	add	w0, w2, w0
 758:	ret

000000000000075c <srunner_ntests_run>:
 75c:	ldr	x0, [x0, #8]
 760:	ldr	w0, [x0]
 764:	ret

0000000000000768 <srunner_failures>:
 768:	stp	x29, x30, [sp, #-48]!
 76c:	mov	x29, sp
 770:	stp	x19, x20, [sp, #16]
 774:	mov	x20, x0
 778:	str	x21, [sp, #32]
 77c:	bl	74c <srunner_ntests_failed>
 780:	sbfiz	x0, x0, #3, #32
 784:	bl	0 <emalloc>
 788:	ldr	x20, [x20, #16]
 78c:	mov	x19, x0
 790:	mov	w21, #0x0                   	// #0
 794:	mov	x0, x20
 798:	bl	0 <check_list_front>
 79c:	mov	x0, x20
 7a0:	bl	0 <check_list_at_end>
 7a4:	cbz	w0, 7bc <srunner_failures+0x54>
 7a8:	mov	x0, x19
 7ac:	ldp	x19, x20, [sp, #16]
 7b0:	ldr	x21, [sp, #32]
 7b4:	ldp	x29, x30, [sp], #48
 7b8:	ret
 7bc:	mov	x0, x20
 7c0:	bl	0 <check_list_val>
 7c4:	ldr	w1, [x0]
 7c8:	cmp	w1, #0x1
 7cc:	b.eq	7d8 <srunner_failures+0x70>  // b.none
 7d0:	str	x0, [x19, w21, sxtw #3]
 7d4:	add	w21, w21, #0x1
 7d8:	mov	x0, x20
 7dc:	bl	0 <check_list_advance>
 7e0:	b	79c <srunner_failures+0x34>

00000000000007e4 <srunner_results>:
 7e4:	stp	x29, x30, [sp, #-48]!
 7e8:	mov	x29, sp
 7ec:	stp	x19, x20, [sp, #16]
 7f0:	mov	x20, x0
 7f4:	ldr	x0, [x0, #8]
 7f8:	ldrsw	x0, [x0]
 7fc:	str	x21, [sp, #32]
 800:	lsl	x0, x0, #3
 804:	bl	0 <emalloc>
 808:	ldr	x20, [x20, #16]
 80c:	mov	x19, x0
 810:	mov	x21, x0
 814:	mov	x0, x20
 818:	bl	0 <check_list_front>
 81c:	mov	x0, x20
 820:	bl	0 <check_list_at_end>
 824:	cbz	w0, 83c <srunner_results+0x58>
 828:	mov	x0, x19
 82c:	ldp	x19, x20, [sp, #16]
 830:	ldr	x21, [sp, #32]
 834:	ldp	x29, x30, [sp], #48
 838:	ret
 83c:	mov	x0, x20
 840:	bl	0 <check_list_val>
 844:	str	x0, [x21], #8
 848:	mov	x0, x20
 84c:	bl	0 <check_list_advance>
 850:	b	81c <srunner_results+0x38>

0000000000000854 <tr_create>:
 854:	stp	x29, x30, [sp, #-16]!
 858:	mov	x0, #0x38                  	// #56
 85c:	mov	x29, sp
 860:	bl	0 <emalloc>
 864:	stp	xzr, xzr, [x0]
 868:	mov	w2, #0xffffffff            	// #-1
 86c:	str	w2, [x0, #16]
 870:	str	w2, [x0, #24]
 874:	stp	xzr, xzr, [x0, #32]
 878:	str	xzr, [x0, #48]
 87c:	ldp	x29, x30, [sp], #16
 880:	ret

0000000000000884 <tr_free>:
 884:	stp	x29, x30, [sp, #-32]!
 888:	mov	x29, sp
 88c:	str	x19, [sp, #16]
 890:	mov	x19, x0
 894:	ldr	x0, [x0, #8]
 898:	bl	0 <free>
 89c:	ldr	x0, [x19, #48]
 8a0:	bl	0 <free>
 8a4:	mov	x0, x19
 8a8:	ldr	x19, [sp, #16]
 8ac:	ldp	x29, x30, [sp], #32
 8b0:	b	0 <free>

00000000000008b4 <srunner_free>:
 8b4:	cbz	x0, a2c <srunner_free+0x178>
 8b8:	stp	x29, x30, [sp, #-64]!
 8bc:	mov	x29, sp
 8c0:	stp	x19, x20, [sp, #16]
 8c4:	mov	x20, x0
 8c8:	ldr	x0, [x0, #8]
 8cc:	stp	x21, x22, [sp, #32]
 8d0:	adrp	x21, 0 <free>
 8d4:	stp	x23, x24, [sp, #48]
 8d8:	add	x21, x21, #0x0
 8dc:	bl	0 <free>
 8e0:	ldr	x23, [x20]
 8e4:	mov	x0, x23
 8e8:	bl	0 <check_list_front>
 8ec:	mov	x0, x23
 8f0:	bl	0 <check_list_at_end>
 8f4:	cbz	w0, 938 <srunner_free+0x84>
 8f8:	ldr	x0, [x20]
 8fc:	bl	0 <check_list_free>
 900:	ldr	x19, [x20, #16]
 904:	mov	x0, x19
 908:	bl	0 <check_list_front>
 90c:	mov	x0, x19
 910:	bl	0 <check_list_at_end>
 914:	cbz	w0, a14 <srunner_free+0x160>
 918:	ldr	x0, [x20, #16]
 91c:	bl	0 <check_list_free>
 920:	mov	x0, x20
 924:	ldp	x19, x20, [sp, #16]
 928:	ldp	x21, x22, [sp, #32]
 92c:	ldp	x23, x24, [sp, #48]
 930:	ldp	x29, x30, [sp], #64
 934:	b	0 <free>
 938:	mov	x0, x23
 93c:	bl	0 <check_list_val>
 940:	mov	x22, x0
 944:	cbz	x0, 970 <srunner_free+0xbc>
 948:	ldr	x24, [x0, #8]
 94c:	mov	x0, x24
 950:	bl	0 <check_list_front>
 954:	mov	x0, x24
 958:	bl	0 <check_list_at_end>
 95c:	cbz	w0, 97c <srunner_free+0xc8>
 960:	ldr	x0, [x22, #8]
 964:	bl	0 <check_list_free>
 968:	mov	x0, x22
 96c:	bl	0 <free>
 970:	mov	x0, x23
 974:	bl	0 <check_list_advance>
 978:	b	8ec <srunner_free+0x38>
 97c:	mov	x0, x24
 980:	bl	0 <check_list_val>
 984:	mov	x19, x0
 988:	mov	x1, x21
 98c:	ldr	x0, [x0, #24]
 990:	bl	0 <check_list_apply>
 994:	ldr	x0, [x19, #32]
 998:	mov	x1, x21
 99c:	bl	0 <check_list_apply>
 9a0:	ldr	x0, [x19, #48]
 9a4:	mov	x1, x21
 9a8:	bl	0 <check_list_apply>
 9ac:	ldr	x0, [x19, #40]
 9b0:	mov	x1, x21
 9b4:	bl	0 <check_list_apply>
 9b8:	ldr	x0, [x19, #56]
 9bc:	mov	x1, x21
 9c0:	bl	0 <check_list_apply>
 9c4:	ldr	x0, [x19, #64]
 9c8:	mov	x1, x21
 9cc:	bl	0 <check_list_apply>
 9d0:	ldr	x0, [x19, #24]
 9d4:	bl	0 <check_list_free>
 9d8:	ldr	x0, [x19, #32]
 9dc:	bl	0 <check_list_free>
 9e0:	ldr	x0, [x19, #48]
 9e4:	bl	0 <check_list_free>
 9e8:	ldr	x0, [x19, #40]
 9ec:	bl	0 <check_list_free>
 9f0:	ldr	x0, [x19, #56]
 9f4:	bl	0 <check_list_free>
 9f8:	ldr	x0, [x19, #64]
 9fc:	bl	0 <check_list_free>
 a00:	mov	x0, x19
 a04:	bl	0 <free>
 a08:	mov	x0, x24
 a0c:	bl	0 <check_list_advance>
 a10:	b	954 <srunner_free+0xa0>
 a14:	mov	x0, x19
 a18:	bl	0 <check_list_val>
 a1c:	bl	884 <tr_free>
 a20:	mov	x0, x19
 a24:	bl	0 <check_list_advance>
 a28:	b	90c <srunner_free+0x58>
 a2c:	ret

0000000000000a30 <tr_msg>:
 a30:	ldr	x0, [x0, #48]
 a34:	ret

0000000000000a38 <tr_lno>:
 a38:	ldr	w0, [x0, #16]
 a3c:	ret

0000000000000a40 <tr_lfile>:
 a40:	ldr	x0, [x0, #8]
 a44:	ret

0000000000000a48 <tr_rtype>:
 a48:	ldr	w0, [x0]
 a4c:	ret

0000000000000a50 <tr_ctx>:
 a50:	ldr	w0, [x0, #4]
 a54:	ret

0000000000000a58 <tr_tcname>:
 a58:	ldr	x0, [x0, #32]
 a5c:	ret

0000000000000a60 <set_fork_status>:
 a60:	cmp	w0, #0x2
 a64:	b.hi	a74 <set_fork_status+0x14>  // b.pmore
 a68:	adrp	x1, 0 <suite_create>
 a6c:	str	w0, [x1]
 a70:	ret
 a74:	stp	x29, x30, [sp, #-16]!
 a78:	adrp	x1, 0 <suite_create>
 a7c:	adrp	x0, 0 <suite_create>
 a80:	mov	x29, sp
 a84:	add	x1, x1, #0x0
 a88:	add	x0, x0, #0x0
 a8c:	mov	w2, #0x24a                 	// #586
 a90:	bl	0 <eprintf>

0000000000000a94 <cur_fork_status>:
 a94:	adrp	x0, 0 <suite_create>
 a98:	ldr	w0, [x0]
 a9c:	ret

0000000000000aa0 <check_get_clockid>:
 aa0:	stp	x29, x30, [sp, #-48]!
 aa4:	mov	x1, #0x0                   	// #0
 aa8:	mov	w0, #0x1                   	// #1
 aac:	mov	x29, sp
 ab0:	add	x2, sp, #0x28
 ab4:	str	x19, [sp, #16]
 ab8:	adrp	x19, 0 <suite_create>
 abc:	bl	0 <timer_create>
 ac0:	add	x19, x19, #0x0
 ac4:	cbnz	w0, ae8 <check_get_clockid+0x48>
 ac8:	ldr	x0, [sp, #40]
 acc:	bl	0 <timer_delete>
 ad0:	mov	w0, #0x1                   	// #1
 ad4:	str	w0, [x19, #4]
 ad8:	ldr	w0, [x19, #4]
 adc:	ldr	x19, [sp, #16]
 ae0:	ldp	x29, x30, [sp], #48
 ae4:	ret
 ae8:	str	wzr, [x19, #4]
 aec:	b	ad8 <check_get_clockid+0x38>

check_error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <eprintf>:
   0:	stp	x29, x30, [sp, #-288]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	adrp	x20, 0 <stderr>
  10:	mov	x19, x0
  14:	ldr	x0, [x20]
  18:	stp	x21, x22, [sp, #32]
  1c:	mov	x21, x1
  20:	mov	w22, w2
  24:	str	q0, [sp, #112]
  28:	str	q1, [sp, #128]
  2c:	str	q2, [sp, #144]
  30:	str	q3, [sp, #160]
  34:	str	q4, [sp, #176]
  38:	str	q5, [sp, #192]
  3c:	str	q6, [sp, #208]
  40:	str	q7, [sp, #224]
  44:	stp	x3, x4, [sp, #248]
  48:	stp	x5, x6, [sp, #264]
  4c:	str	x7, [sp, #280]
  50:	bl	0 <fflush>
  54:	ldr	x0, [x20]
  58:	mov	w3, w22
  5c:	mov	x2, x21
  60:	adrp	x1, 0 <eprintf>
  64:	add	x1, x1, #0x0
  68:	bl	0 <fprintf>
  6c:	add	x0, sp, #0x120
  70:	stp	x0, x0, [sp, #80]
  74:	add	x0, sp, #0xf0
  78:	str	x0, [sp, #96]
  7c:	mov	w0, #0xffffffd8            	// #-40
  80:	str	w0, [sp, #104]
  84:	mov	w0, #0xffffff80            	// #-128
  88:	str	w0, [sp, #108]
  8c:	add	x2, sp, #0x30
  90:	ldp	x0, x1, [sp, #80]
  94:	stp	x0, x1, [sp, #48]
  98:	ldp	x0, x1, [sp, #96]
  9c:	stp	x0, x1, [sp, #64]
  a0:	ldr	x0, [x20]
  a4:	mov	x1, x19
  a8:	bl	0 <vfprintf>
  ac:	ldrb	w0, [x19]
  b0:	cbz	w0, f0 <eprintf+0xf0>
  b4:	mov	x0, x19
  b8:	bl	0 <strlen>
  bc:	add	x19, x19, x0
  c0:	ldurb	w0, [x19, #-1]
  c4:	cmp	w0, #0x3a
  c8:	b.ne	f0 <eprintf+0xf0>  // b.any
  cc:	bl	0 <__errno_location>
  d0:	ldr	w0, [x0]
  d4:	ldr	x19, [x20]
  d8:	bl	0 <strerror>
  dc:	mov	x2, x0
  e0:	adrp	x1, 0 <eprintf>
  e4:	mov	x0, x19
  e8:	add	x1, x1, #0x0
  ec:	bl	0 <fprintf>
  f0:	ldr	x1, [x20]
  f4:	mov	w0, #0xa                   	// #10
  f8:	bl	0 <fputc>
  fc:	mov	w0, #0x2                   	// #2
 100:	bl	0 <exit>

0000000000000104 <emalloc>:
 104:	stp	x29, x30, [sp, #-32]!
 108:	mov	x29, sp
 10c:	str	x19, [sp, #16]
 110:	mov	x19, x0
 114:	bl	0 <malloc>
 118:	cbnz	x0, 138 <emalloc+0x34>
 11c:	adrp	x1, 0 <eprintf>
 120:	adrp	x0, 0 <eprintf>
 124:	mov	x3, x19
 128:	add	x1, x1, #0x0
 12c:	add	x0, x0, #0x0
 130:	mov	w2, #0x3e                  	// #62
 134:	bl	0 <eprintf>
 138:	ldr	x19, [sp, #16]
 13c:	ldp	x29, x30, [sp], #32
 140:	ret

0000000000000144 <erealloc>:
 144:	stp	x29, x30, [sp, #-32]!
 148:	mov	x29, sp
 14c:	str	x19, [sp, #16]
 150:	mov	x19, x1
 154:	bl	0 <realloc>
 158:	cbnz	x0, 178 <erealloc+0x34>
 15c:	adrp	x1, 0 <eprintf>
 160:	adrp	x0, 0 <eprintf>
 164:	mov	x3, x19
 168:	add	x1, x1, #0x0
 16c:	add	x0, x0, #0x0
 170:	mov	w2, #0x48                  	// #72
 174:	bl	0 <eprintf>
 178:	ldr	x19, [sp, #16]
 17c:	ldp	x29, x30, [sp], #32
 180:	ret

check_list.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <maybe_grow>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	ldr	w1, [x0, #4]
   c:	str	x19, [sp, #16]
  10:	mov	x19, x0
  14:	ldr	w0, [x0]
  18:	cmp	w0, w1
  1c:	b.cc	38 <maybe_grow+0x38>  // b.lo, b.ul, b.last
  20:	ldr	x0, [x19, #16]
  24:	lsl	w1, w1, #1
  28:	str	w1, [x19, #4]
  2c:	lsl	x1, x1, #3
  30:	bl	0 <erealloc>
  34:	str	x0, [x19, #16]
  38:	ldr	x19, [sp, #16]
  3c:	ldp	x29, x30, [sp], #32
  40:	ret

0000000000000044 <check_list_create>:
  44:	stp	x29, x30, [sp, #-32]!
  48:	mov	x0, #0x18                  	// #24
  4c:	mov	x29, sp
  50:	str	x19, [sp, #16]
  54:	bl	0 <emalloc>
  58:	mov	x19, x0
  5c:	mov	x0, #0x100000000           	// #4294967296
  60:	str	x0, [x19]
  64:	mov	x0, #0x8                   	// #8
  68:	bl	0 <emalloc>
  6c:	str	x0, [x19, #16]
  70:	mov	x0, #0xffffffffffffffff    	// #-1
  74:	str	x0, [x19, #8]
  78:	mov	x0, x19
  7c:	ldr	x19, [sp, #16]
  80:	ldp	x29, x30, [sp], #32
  84:	ret

0000000000000088 <check_list_add_front>:
  88:	cbz	x0, e4 <check_list_add_front+0x5c>
  8c:	stp	x29, x30, [sp, #-32]!
  90:	mov	x29, sp
  94:	stp	x19, x20, [sp, #16]
  98:	mov	x19, x0
  9c:	mov	x20, x1
  a0:	bl	0 <maybe_grow>
  a4:	ldr	x1, [x19, #16]
  a8:	ldr	w2, [x19]
  ac:	add	x0, x1, #0x8
  b0:	lsl	x2, x2, #3
  b4:	bl	0 <memmove>
  b8:	ldr	w0, [x19, #12]
  bc:	add	w0, w0, #0x1
  c0:	stp	wzr, w0, [x19, #8]
  c4:	ldr	w0, [x19]
  c8:	add	w0, w0, #0x1
  cc:	str	w0, [x19]
  d0:	ldr	x0, [x19, #16]
  d4:	str	x20, [x0]
  d8:	ldp	x19, x20, [sp, #16]
  dc:	ldp	x29, x30, [sp], #32
  e0:	ret
  e4:	ret

00000000000000e8 <check_list_add_end>:
  e8:	cbz	x0, 130 <check_list_add_end+0x48>
  ec:	stp	x29, x30, [sp, #-32]!
  f0:	mov	x29, sp
  f4:	stp	x19, x20, [sp, #16]
  f8:	mov	x19, x0
  fc:	mov	x20, x1
 100:	bl	0 <maybe_grow>
 104:	ldr	w1, [x19]
 108:	ldr	w0, [x19, #12]
 10c:	add	w1, w1, #0x1
 110:	str	w1, [x19]
 114:	ldr	x1, [x19, #16]
 118:	add	w0, w0, #0x1
 11c:	stp	w0, w0, [x19, #8]
 120:	str	x20, [x1, w0, sxtw #3]
 124:	ldp	x19, x20, [sp, #16]
 128:	ldp	x29, x30, [sp], #32
 12c:	ret
 130:	ret

0000000000000134 <check_list_at_end>:
 134:	ldr	w1, [x0, #8]
 138:	cmn	w1, #0x1
 13c:	b.eq	150 <check_list_at_end+0x1c>  // b.none
 140:	ldr	w0, [x0, #12]
 144:	cmp	w1, w0
 148:	cset	w0, gt
 14c:	ret
 150:	mov	w0, #0x1                   	// #1
 154:	b	14c <check_list_at_end+0x18>

0000000000000158 <check_list_front>:
 158:	ldr	w1, [x0, #8]
 15c:	cmn	w1, #0x1
 160:	b.eq	168 <check_list_front+0x10>  // b.none
 164:	str	wzr, [x0, #8]
 168:	ret

000000000000016c <check_list_free>:
 16c:	cbz	x0, 198 <check_list_free+0x2c>
 170:	stp	x29, x30, [sp, #-32]!
 174:	mov	x29, sp
 178:	str	x19, [sp, #16]
 17c:	mov	x19, x0
 180:	ldr	x0, [x0, #16]
 184:	bl	0 <free>
 188:	mov	x0, x19
 18c:	ldr	x19, [sp, #16]
 190:	ldp	x29, x30, [sp], #32
 194:	b	0 <free>
 198:	ret

000000000000019c <check_list_val>:
 19c:	cbz	x0, 1c0 <check_list_val+0x24>
 1a0:	ldr	w1, [x0, #8]
 1a4:	cmn	w1, #0x1
 1a8:	b.eq	1c4 <check_list_val+0x28>  // b.none
 1ac:	ldr	w2, [x0, #12]
 1b0:	cmp	w1, w2
 1b4:	b.gt	1c4 <check_list_val+0x28>
 1b8:	ldr	x0, [x0, #16]
 1bc:	ldr	x0, [x0, w1, sxtw #3]
 1c0:	ret
 1c4:	mov	x0, #0x0                   	// #0
 1c8:	b	1c0 <check_list_val+0x24>

00000000000001cc <check_list_advance>:
 1cc:	cbz	x0, 1f8 <check_list_advance+0x2c>
 1d0:	mov	x2, x0
 1d4:	stp	x29, x30, [sp, #-16]!
 1d8:	mov	x29, sp
 1dc:	bl	134 <check_list_at_end>
 1e0:	cbnz	w0, 1f0 <check_list_advance+0x24>
 1e4:	ldr	w0, [x2, #8]
 1e8:	add	w0, w0, #0x1
 1ec:	str	w0, [x2, #8]
 1f0:	ldp	x29, x30, [sp], #16
 1f4:	ret
 1f8:	ret

00000000000001fc <check_list_apply>:
 1fc:	cmp	x0, #0x0
 200:	ccmp	x1, #0x0, #0x4, ne  // ne = any
 204:	b.eq	250 <check_list_apply+0x54>  // b.none
 208:	stp	x29, x30, [sp, #-32]!
 20c:	mov	x29, sp
 210:	stp	x19, x20, [sp, #16]
 214:	mov	x19, x0
 218:	mov	x20, x1
 21c:	bl	158 <check_list_front>
 220:	mov	x0, x19
 224:	bl	134 <check_list_at_end>
 228:	cbz	w0, 238 <check_list_apply+0x3c>
 22c:	ldp	x19, x20, [sp, #16]
 230:	ldp	x29, x30, [sp], #32
 234:	ret
 238:	mov	x0, x19
 23c:	bl	19c <check_list_val>
 240:	blr	x20
 244:	mov	x0, x19
 248:	bl	1cc <check_list_advance>
 24c:	b	220 <check_list_apply+0x24>
 250:	ret

0000000000000254 <check_list_contains>:
 254:	mov	x3, x0
 258:	mov	x4, x1
 25c:	stp	x29, x30, [sp, #-16]!
 260:	mov	x29, sp
 264:	bl	158 <check_list_front>
 268:	mov	x0, x3
 26c:	bl	134 <check_list_at_end>
 270:	cbz	w0, 280 <check_list_contains+0x2c>
 274:	mov	w0, #0x0                   	// #0
 278:	ldp	x29, x30, [sp], #16
 27c:	ret
 280:	mov	x0, x3
 284:	bl	19c <check_list_val>
 288:	cmp	x4, x0
 28c:	b.eq	29c <check_list_contains+0x48>  // b.none
 290:	mov	x0, x3
 294:	bl	1cc <check_list_advance>
 298:	b	268 <check_list_contains+0x14>
 29c:	mov	w0, #0x1                   	// #1
 2a0:	b	278 <check_list_contains+0x24>

check_log.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <srunner_send_evt>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	ldr	x20, [x0, #48]
  10:	stp	x21, x22, [sp, #32]
  14:	mov	x21, x0
  18:	mov	x22, x1
  1c:	mov	x0, x20
  20:	str	x23, [sp, #48]
  24:	mov	w23, w2
  28:	bl	0 <check_list_front>
  2c:	mov	x0, x20
  30:	bl	0 <check_list_at_end>
  34:	cbz	w0, 4c <srunner_send_evt+0x4c>
  38:	ldp	x19, x20, [sp, #16]
  3c:	ldp	x21, x22, [sp, #32]
  40:	ldr	x23, [sp, #48]
  44:	ldp	x29, x30, [sp], #64
  48:	ret
  4c:	mov	x0, x20
  50:	bl	0 <check_list_val>
  54:	mov	x19, x0
  58:	ldr	x0, [x0]
  5c:	bl	0 <fflush>
  60:	ldp	x1, x5, [x19]
  64:	mov	w4, w23
  68:	ldr	w2, [x19, #20]
  6c:	mov	x3, x22
  70:	mov	x0, x21
  74:	blr	x5
  78:	ldr	x0, [x19]
  7c:	bl	0 <fflush>
  80:	mov	x0, x20
  84:	bl	0 <check_list_advance>
  88:	b	2c <srunner_send_evt+0x2c>

000000000000008c <xml_lfun>:
  8c:	stp	x29, x30, [sp, #-128]!
  90:	adrp	x0, 0 <srunner_send_evt>
  94:	mov	x29, sp
  98:	stp	x19, x20, [sp, #16]
  9c:	add	x20, x0, #0x0
  a0:	ldrb	w0, [x0]
  a4:	stp	x21, x22, [sp, #32]
  a8:	mov	x19, x1
  ac:	mov	x21, x3
  b0:	mov	w22, w4
  b4:	cbnz	w0, f8 <xml_lfun+0x6c>
  b8:	mov	x1, #0x0                   	// #0
  bc:	add	x0, sp, #0x38
  c0:	bl	0 <gettimeofday>
  c4:	bl	0 <check_get_clockid>
  c8:	add	x1, x20, #0x18
  cc:	bl	0 <clock_gettime>
  d0:	add	x1, sp, #0x48
  d4:	add	x0, sp, #0x38
  d8:	bl	0 <localtime_r>
  dc:	cbz	x0, f8 <xml_lfun+0x6c>
  e0:	adrp	x2, 0 <srunner_send_evt>
  e4:	add	x3, sp, #0x48
  e8:	add	x2, x2, #0x0
  ec:	mov	x0, x20
  f0:	mov	x1, #0x14                  	// #20
  f4:	bl	0 <strftime>
  f8:	cmp	w22, #0x7
  fc:	b.hi	1ec <xml_lfun+0x160>  // b.pmore
 100:	adrp	x0, 0 <srunner_send_evt>
 104:	add	x0, x0, #0x0
 108:	ldrb	w0, [x0, w22, uxtw]
 10c:	adr	x1, 118 <xml_lfun+0x8c>
 110:	add	x0, x1, w0, sxtb #2
 114:	br	x0
 118:	adrp	x1, 0 <srunner_send_evt>
 11c:	mov	x2, x20
 120:	add	x1, x1, #0x0
 124:	mov	x0, x19
 128:	bl	0 <fprintf>
 12c:	ldp	x19, x20, [sp, #16]
 130:	ldp	x21, x22, [sp, #32]
 134:	ldp	x29, x30, [sp], #128
 138:	ret
 13c:	stp	xzr, xzr, [sp, #72]
 140:	bl	0 <check_get_clockid>
 144:	add	x1, sp, #0x48
 148:	bl	0 <clock_gettime>
 14c:	ldp	x0, x1, [sp, #72]
 150:	mov	x2, #0x3e8                 	// #1000
 154:	ldr	x3, [x20, #24]
 158:	sdiv	x1, x1, x2
 15c:	sub	x0, x0, x3
 160:	mov	x3, #0x4240                	// #16960
 164:	mov	x2, #0xfffffffffffffc18    	// #-1000
 168:	movk	x3, #0xf, lsl #16
 16c:	madd	x0, x0, x3, x1
 170:	ldr	x1, [x20, #32]
 174:	sdiv	x1, x1, x2
 178:	add	x0, x0, x1
 17c:	adrp	x1, 0 <srunner_send_evt>
 180:	add	x1, x1, #0x0
 184:	udiv	x2, x0, x3
 188:	msub	x3, x2, x3, x0
 18c:	mov	x0, x19
 190:	bl	0 <fprintf>
 194:	b	12c <xml_lfun+0xa0>
 198:	mov	x1, x19
 19c:	adrp	x0, 0 <srunner_send_evt>
 1a0:	add	x0, x0, #0x0
 1a4:	bl	0 <fputs>
 1a8:	ldr	x1, [x21]
 1ac:	mov	x0, x19
 1b0:	bl	0 <fprint_xml_esc>
 1b4:	adrp	x0, 0 <srunner_send_evt>
 1b8:	mov	x1, x19
 1bc:	add	x0, x0, #0x0
 1c0:	bl	0 <fputs>
 1c4:	b	12c <xml_lfun+0xa0>
 1c8:	adrp	x0, 0 <srunner_send_evt>
 1cc:	mov	x1, x19
 1d0:	add	x0, x0, #0x0
 1d4:	b	1c0 <xml_lfun+0x134>
 1d8:	mov	x1, x21
 1dc:	mov	x0, x19
 1e0:	mov	w2, #0x3                   	// #3
 1e4:	bl	0 <tr_xmlprint>
 1e8:	b	12c <xml_lfun+0xa0>
 1ec:	adrp	x1, 0 <srunner_send_evt>
 1f0:	adrp	x0, 0 <srunner_send_evt>
 1f4:	add	x1, x1, #0x0
 1f8:	add	x0, x0, #0x0
 1fc:	mov	w2, #0x14f                 	// #335
 200:	bl	0 <eprintf>

0000000000000204 <stdout_lfun>:
 204:	cmp	w4, #0x7
 208:	b.hi	260 <stdout_lfun+0x5c>  // b.pmore
 20c:	mov	x5, x0
 210:	mov	x0, x1
 214:	adrp	x1, 0 <srunner_send_evt>
 218:	add	x1, x1, #0x0
 21c:	ldrb	w1, [x1, w4, uxtw]
 220:	adr	x4, 22c <stdout_lfun+0x28>
 224:	add	x1, x4, w1, sxtb #2
 228:	br	x1
 22c:	cbz	w2, 280 <stdout_lfun+0x7c>
 230:	mov	x1, x0
 234:	adrp	x0, 0 <srunner_send_evt>
 238:	add	x0, x0, #0x0
 23c:	b	0 <fputs>
 240:	cbz	w2, 280 <stdout_lfun+0x7c>
 244:	ldr	x2, [x3]
 248:	adrp	x1, 0 <srunner_send_evt>
 24c:	add	x1, x1, #0x0
 250:	b	0 <fprintf>
 254:	cbz	w2, 280 <stdout_lfun+0x7c>
 258:	mov	x1, x5
 25c:	b	0 <srunner_fprint>
 260:	stp	x29, x30, [sp, #-16]!
 264:	adrp	x1, 0 <srunner_send_evt>
 268:	adrp	x0, 0 <srunner_send_evt>
 26c:	mov	x29, sp
 270:	add	x1, x1, #0x0
 274:	add	x0, x0, #0x0
 278:	mov	w2, #0xdc                  	// #220
 27c:	bl	0 <eprintf>
 280:	ret

0000000000000284 <tap_lfun>:
 284:	stp	x29, x30, [sp, #-32]!
 288:	cmp	w4, #0x7
 28c:	mov	x29, sp
 290:	str	x19, [sp, #16]
 294:	b.hi	344 <tap_lfun+0xc0>  // b.pmore
 298:	mov	x19, x1
 29c:	adrp	x1, 0 <srunner_send_evt>
 2a0:	add	x1, x1, #0x0
 2a4:	ldrb	w1, [x1, w4, uxtw]
 2a8:	adr	x2, 2b4 <tap_lfun+0x30>
 2ac:	add	x1, x2, w1, sxtb #2
 2b0:	br	x1
 2b4:	adrp	x0, 0 <srunner_send_evt>
 2b8:	str	wzr, [x0]
 2bc:	ldr	x19, [sp, #16]
 2c0:	ldp	x29, x30, [sp], #32
 2c4:	ret
 2c8:	adrp	x0, 0 <srunner_send_evt>
 2cc:	adrp	x1, 0 <srunner_send_evt>
 2d0:	add	x1, x1, #0x0
 2d4:	ldr	w2, [x0]
 2d8:	mov	x0, x19
 2dc:	bl	0 <fprintf>
 2e0:	mov	x0, x19
 2e4:	ldr	x19, [sp, #16]
 2e8:	ldp	x29, x30, [sp], #32
 2ec:	b	0 <fflush>
 2f0:	mov	x0, x3
 2f4:	ldr	w4, [x3]
 2f8:	adrp	x1, 0 <srunner_send_evt>
 2fc:	add	x1, x1, #0x0
 300:	cmp	w4, #0x1
 304:	adrp	x2, 0 <srunner_send_evt>
 308:	ldp	x5, x6, [x0, #32]
 30c:	add	x2, x2, #0x0
 310:	ldr	x4, [x0, #8]
 314:	ldr	x7, [x0, #48]
 318:	mov	x0, x19
 31c:	ldr	w3, [x1, #40]
 320:	add	w3, w3, #0x1
 324:	str	w3, [x1, #40]
 328:	adrp	x1, 0 <srunner_send_evt>
 32c:	add	x1, x1, #0x0
 330:	csel	x2, x1, x2, eq  // eq = none
 334:	adrp	x1, 0 <srunner_send_evt>
 338:	add	x1, x1, #0x0
 33c:	bl	0 <fprintf>
 340:	b	2e0 <tap_lfun+0x5c>
 344:	adrp	x1, 0 <srunner_send_evt>
 348:	adrp	x0, 0 <srunner_send_evt>
 34c:	add	x1, x1, #0x0
 350:	add	x0, x0, #0x0
 354:	mov	w2, #0x17c                 	// #380
 358:	bl	0 <eprintf>

000000000000035c <lfile_lfun>:
 35c:	stp	x29, x30, [sp, #-32]!
 360:	cmp	w4, #0x7
 364:	mov	x29, sp
 368:	stp	x19, x20, [sp, #16]
 36c:	b.hi	3ec <lfile_lfun+0x90>  // b.pmore
 370:	mov	x20, x0
 374:	mov	x19, x1
 378:	adrp	x0, 0 <srunner_send_evt>
 37c:	mov	x1, x3
 380:	add	x0, x0, #0x0
 384:	ldrb	w0, [x0, w4, uxtw]
 388:	adr	x2, 394 <lfile_lfun+0x38>
 38c:	add	x0, x2, w0, sxtb #2
 390:	br	x0
 394:	mov	x0, x19
 398:	adrp	x1, 0 <srunner_send_evt>
 39c:	ldp	x19, x20, [sp, #16]
 3a0:	add	x1, x1, #0x0
 3a4:	ldp	x29, x30, [sp], #32
 3a8:	ldr	x2, [x3]
 3ac:	b	0 <fprintf>
 3b0:	mov	x1, x19
 3b4:	adrp	x0, 0 <srunner_send_evt>
 3b8:	add	x0, x0, #0x0
 3bc:	bl	0 <fputs>
 3c0:	mov	x1, x20
 3c4:	mov	x0, x19
 3c8:	ldp	x19, x20, [sp, #16]
 3cc:	mov	w2, #0x1                   	// #1
 3d0:	ldp	x29, x30, [sp], #32
 3d4:	b	0 <srunner_fprint>
 3d8:	mov	x0, x19
 3dc:	mov	w2, #0x3                   	// #3
 3e0:	ldp	x19, x20, [sp, #16]
 3e4:	ldp	x29, x30, [sp], #32
 3e8:	b	0 <tr_fprint>
 3ec:	adrp	x1, 0 <srunner_send_evt>
 3f0:	adrp	x0, 0 <srunner_send_evt>
 3f4:	add	x1, x1, #0x0
 3f8:	add	x0, x0, #0x0
 3fc:	mov	w2, #0x103                 	// #259
 400:	bl	0 <eprintf>
 404:	ldp	x19, x20, [sp, #16]
 408:	ldp	x29, x30, [sp], #32
 40c:	ret

0000000000000410 <srunner_open_file>:
 410:	stp	x29, x30, [sp, #-32]!
 414:	adrp	x1, 0 <srunner_send_evt>
 418:	add	x1, x1, #0x0
 41c:	mov	x29, sp
 420:	str	x19, [sp, #16]
 424:	mov	x19, x0
 428:	bl	0 <strcmp>
 42c:	cbnz	w0, 444 <srunner_open_file+0x34>
 430:	adrp	x0, 0 <stdout>
 434:	ldr	x0, [x0]
 438:	ldr	x19, [sp, #16]
 43c:	ldp	x29, x30, [sp], #32
 440:	ret
 444:	adrp	x1, 0 <srunner_send_evt>
 448:	mov	x0, x19
 44c:	add	x1, x1, #0x0
 450:	bl	0 <fopen>
 454:	cbnz	x0, 438 <srunner_open_file+0x28>
 458:	adrp	x1, 0 <srunner_send_evt>
 45c:	adrp	x0, 0 <srunner_send_evt>
 460:	mov	x3, x19
 464:	add	x1, x1, #0x0
 468:	add	x0, x0, #0x0
 46c:	mov	w2, #0x1cd                 	// #461
 470:	bl	0 <eprintf>

0000000000000474 <srunner_set_log>:
 474:	ldr	x2, [x0, #24]
 478:	cbnz	x2, 480 <srunner_set_log+0xc>
 47c:	str	x1, [x0, #24]
 480:	ret

0000000000000484 <srunner_log_fname>:
 484:	ldr	x0, [x0, #24]
 488:	cbnz	x0, 498 <srunner_log_fname+0x14>
 48c:	adrp	x0, 0 <srunner_send_evt>
 490:	add	x0, x0, #0x0
 494:	b	0 <getenv>
 498:	ret

000000000000049c <srunner_has_log>:
 49c:	stp	x29, x30, [sp, #-16]!
 4a0:	mov	x29, sp
 4a4:	bl	484 <srunner_log_fname>
 4a8:	cmp	x0, #0x0
 4ac:	cset	w0, ne  // ne = any
 4b0:	ldp	x29, x30, [sp], #16
 4b4:	ret

00000000000004b8 <srunner_set_xml>:
 4b8:	ldr	x2, [x0, #32]
 4bc:	cbnz	x2, 4c4 <srunner_set_xml+0xc>
 4c0:	str	x1, [x0, #32]
 4c4:	ret

00000000000004c8 <srunner_xml_fname>:
 4c8:	ldr	x0, [x0, #32]
 4cc:	cbnz	x0, 4dc <srunner_xml_fname+0x14>
 4d0:	adrp	x0, 0 <srunner_send_evt>
 4d4:	add	x0, x0, #0x0
 4d8:	b	0 <getenv>
 4dc:	ret

00000000000004e0 <srunner_has_xml>:
 4e0:	stp	x29, x30, [sp, #-16]!
 4e4:	mov	x29, sp
 4e8:	bl	4c8 <srunner_xml_fname>
 4ec:	cmp	x0, #0x0
 4f0:	cset	w0, ne  // ne = any
 4f4:	ldp	x29, x30, [sp], #16
 4f8:	ret

00000000000004fc <srunner_set_tap>:
 4fc:	ldr	x2, [x0, #40]
 500:	cbnz	x2, 508 <srunner_set_tap+0xc>
 504:	str	x1, [x0, #40]
 508:	ret

000000000000050c <srunner_tap_fname>:
 50c:	ldr	x0, [x0, #40]
 510:	cbnz	x0, 520 <srunner_tap_fname+0x14>
 514:	adrp	x0, 0 <srunner_send_evt>
 518:	add	x0, x0, #0x0
 51c:	b	0 <getenv>
 520:	ret

0000000000000524 <srunner_has_tap>:
 524:	stp	x29, x30, [sp, #-16]!
 528:	mov	x29, sp
 52c:	bl	50c <srunner_tap_fname>
 530:	cmp	x0, #0x0
 534:	cset	w0, ne  // ne = any
 538:	ldp	x29, x30, [sp], #16
 53c:	ret

0000000000000540 <srunner_register_lfun>:
 540:	stp	x29, x30, [sp, #-64]!
 544:	mov	x29, sp
 548:	stp	x19, x20, [sp, #16]
 54c:	mov	w20, w4
 550:	stp	x21, x22, [sp, #32]
 554:	mov	x21, x0
 558:	mov	w22, w2
 55c:	mov	x0, #0x18                  	// #24
 560:	stp	x23, x24, [sp, #48]
 564:	mov	x24, x1
 568:	mov	x23, x3
 56c:	bl	0 <emalloc>
 570:	cmp	w20, #0x4
 574:	mov	x19, x0
 578:	b.ne	584 <srunner_register_lfun+0x44>  // b.any
 57c:	bl	0 <get_env_printmode>
 580:	mov	w20, w0
 584:	ldr	x0, [x21, #48]
 588:	stp	x24, x23, [x19]
 58c:	mov	x1, x19
 590:	stp	w22, w20, [x19, #16]
 594:	ldp	x19, x20, [sp, #16]
 598:	ldp	x21, x22, [sp, #32]
 59c:	ldp	x23, x24, [sp, #48]
 5a0:	ldp	x29, x30, [sp], #64
 5a4:	b	0 <check_list_add_end>

00000000000005a8 <log_srunner_start>:
 5a8:	mov	w2, #0x2                   	// #2
 5ac:	mov	x1, #0x0                   	// #0
 5b0:	b	0 <srunner_send_evt>

00000000000005b4 <log_srunner_end>:
 5b4:	mov	w2, #0x4                   	// #4
 5b8:	mov	x1, #0x0                   	// #0
 5bc:	b	0 <srunner_send_evt>

00000000000005c0 <log_suite_start>:
 5c0:	mov	w2, #0x3                   	// #3
 5c4:	b	0 <srunner_send_evt>

00000000000005c8 <log_suite_end>:
 5c8:	mov	w2, #0x5                   	// #5
 5cc:	b	0 <srunner_send_evt>

00000000000005d0 <log_test_start>:
 5d0:	stp	x29, x30, [sp, #-144]!
 5d4:	mov	x29, sp
 5d8:	ldr	x3, [x1]
 5dc:	str	x19, [sp, #16]
 5e0:	mov	x19, x0
 5e4:	mov	x1, #0x63                  	// #99
 5e8:	ldr	x0, [x2]
 5ec:	adrp	x2, 0 <srunner_send_evt>
 5f0:	add	x2, x2, #0x0
 5f4:	ldr	x4, [x0]
 5f8:	add	x0, sp, #0x28
 5fc:	bl	0 <snprintf>
 600:	add	x1, sp, #0x28
 604:	mov	x0, x19
 608:	mov	w2, #0x6                   	// #6
 60c:	bl	0 <srunner_send_evt>
 610:	ldr	x19, [sp, #16]
 614:	ldp	x29, x30, [sp], #144
 618:	ret

000000000000061c <log_test_end>:
 61c:	mov	w2, #0x7                   	// #7
 620:	b	0 <srunner_send_evt>

0000000000000624 <srunner_open_lfile>:
 624:	stp	x29, x30, [sp, #-32]!
 628:	mov	x29, sp
 62c:	str	x19, [sp, #16]
 630:	mov	x19, x0
 634:	bl	49c <srunner_has_log>
 638:	cbz	w0, 650 <srunner_open_lfile+0x2c>
 63c:	mov	x0, x19
 640:	bl	484 <srunner_log_fname>
 644:	ldr	x19, [sp, #16]
 648:	ldp	x29, x30, [sp], #32
 64c:	b	410 <srunner_open_file>
 650:	mov	x0, #0x0                   	// #0
 654:	ldr	x19, [sp, #16]
 658:	ldp	x29, x30, [sp], #32
 65c:	ret

0000000000000660 <srunner_open_xmlfile>:
 660:	stp	x29, x30, [sp, #-32]!
 664:	mov	x29, sp
 668:	str	x19, [sp, #16]
 66c:	mov	x19, x0
 670:	bl	4e0 <srunner_has_xml>
 674:	cbz	w0, 68c <srunner_open_xmlfile+0x2c>
 678:	mov	x0, x19
 67c:	bl	4c8 <srunner_xml_fname>
 680:	ldr	x19, [sp, #16]
 684:	ldp	x29, x30, [sp], #32
 688:	b	410 <srunner_open_file>
 68c:	mov	x0, #0x0                   	// #0
 690:	ldr	x19, [sp, #16]
 694:	ldp	x29, x30, [sp], #32
 698:	ret

000000000000069c <srunner_open_tapfile>:
 69c:	stp	x29, x30, [sp, #-32]!
 6a0:	mov	x29, sp
 6a4:	str	x19, [sp, #16]
 6a8:	mov	x19, x0
 6ac:	bl	524 <srunner_has_tap>
 6b0:	cbz	w0, 6c8 <srunner_open_tapfile+0x2c>
 6b4:	mov	x0, x19
 6b8:	bl	50c <srunner_tap_fname>
 6bc:	ldr	x19, [sp, #16]
 6c0:	ldp	x29, x30, [sp], #32
 6c4:	b	410 <srunner_open_file>
 6c8:	mov	x0, #0x0                   	// #0
 6cc:	ldr	x19, [sp, #16]
 6d0:	ldp	x29, x30, [sp], #32
 6d4:	ret

00000000000006d8 <srunner_init_logging>:
 6d8:	stp	x29, x30, [sp, #-48]!
 6dc:	mov	x29, sp
 6e0:	str	x21, [sp, #32]
 6e4:	adrp	x21, 0 <stdout>
 6e8:	stp	x19, x20, [sp, #16]
 6ec:	mov	x19, x0
 6f0:	mov	w20, w1
 6f4:	bl	0 <check_list_create>
 6f8:	ldr	x1, [x21]
 6fc:	mov	w4, w20
 700:	adrp	x3, 204 <stdout_lfun>
 704:	add	x3, x3, #0x0
 708:	str	x0, [x19, #48]
 70c:	mov	w2, #0x0                   	// #0
 710:	mov	x0, x19
 714:	bl	540 <srunner_register_lfun>
 718:	mov	x0, x19
 71c:	bl	624 <srunner_open_lfile>
 720:	cbz	x0, 748 <srunner_init_logging+0x70>
 724:	mov	x1, x0
 728:	adrp	x3, 35c <lfile_lfun>
 72c:	ldr	x0, [x21]
 730:	mov	w4, w20
 734:	add	x3, x3, #0x0
 738:	cmp	x0, x1
 73c:	mov	x0, x19
 740:	cset	w2, ne  // ne = any
 744:	bl	540 <srunner_register_lfun>
 748:	mov	x0, x19
 74c:	bl	660 <srunner_open_xmlfile>
 750:	mov	x1, x0
 754:	cbz	x0, 778 <srunner_init_logging+0xa0>
 758:	ldr	x0, [x21]
 75c:	adrp	x3, 8c <xml_lfun>
 760:	mov	w4, w20
 764:	add	x3, x3, #0x0
 768:	cmp	x0, x1
 76c:	mov	x0, x19
 770:	cset	w2, ne  // ne = any
 774:	bl	540 <srunner_register_lfun>
 778:	mov	x0, x19
 77c:	bl	69c <srunner_open_tapfile>
 780:	mov	x1, x0
 784:	cbz	x0, 7a8 <srunner_init_logging+0xd0>
 788:	ldr	x0, [x21]
 78c:	adrp	x3, 284 <tap_lfun>
 790:	mov	w4, w20
 794:	add	x3, x3, #0x0
 798:	cmp	x0, x1
 79c:	mov	x0, x19
 7a0:	cset	w2, ne  // ne = any
 7a4:	bl	540 <srunner_register_lfun>
 7a8:	mov	x0, x19
 7ac:	mov	w2, #0x0                   	// #0
 7b0:	ldp	x19, x20, [sp, #16]
 7b4:	mov	x1, #0x0                   	// #0
 7b8:	ldr	x21, [sp, #32]
 7bc:	ldp	x29, x30, [sp], #48
 7c0:	b	0 <srunner_send_evt>

00000000000007c4 <srunner_end_logging>:
 7c4:	stp	x29, x30, [sp, #-48]!
 7c8:	mov	w2, #0x1                   	// #1
 7cc:	mov	x1, #0x0                   	// #0
 7d0:	mov	x29, sp
 7d4:	str	x21, [sp, #32]
 7d8:	mov	x21, x0
 7dc:	stp	x19, x20, [sp, #16]
 7e0:	bl	0 <srunner_send_evt>
 7e4:	ldr	x19, [x21, #48]
 7e8:	mov	x0, x19
 7ec:	bl	0 <check_list_front>
 7f0:	mov	x0, x19
 7f4:	bl	0 <check_list_at_end>
 7f8:	cbz	w0, 818 <srunner_end_logging+0x54>
 7fc:	mov	x0, x19
 800:	bl	0 <check_list_free>
 804:	ldp	x19, x20, [sp, #16]
 808:	str	xzr, [x21, #48]
 80c:	ldr	x21, [sp, #32]
 810:	ldp	x29, x30, [sp], #48
 814:	ret
 818:	mov	x0, x19
 81c:	bl	0 <check_list_val>
 820:	mov	x20, x0
 824:	ldr	w0, [x0, #16]
 828:	cbz	w0, 850 <srunner_end_logging+0x8c>
 82c:	ldr	x0, [x20]
 830:	bl	0 <fclose>
 834:	cbz	w0, 850 <srunner_end_logging+0x8c>
 838:	adrp	x1, 0 <srunner_send_evt>
 83c:	adrp	x0, 0 <srunner_send_evt>
 840:	add	x1, x1, #0x0
 844:	add	x0, x0, #0x0
 848:	mov	w2, #0x224                 	// #548
 84c:	bl	0 <eprintf>
 850:	mov	x0, x20
 854:	bl	0 <free>
 858:	mov	x0, x19
 85c:	bl	0 <check_list_advance>
 860:	b	7f0 <srunner_end_logging+0x2c>

check_msg.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <get_pipe>:
   0:	adrp	x0, 0 <get_pipe>
   4:	add	x1, x0, #0x0
   8:	ldr	x0, [x0]
   c:	cbnz	x0, 38 <get_pipe+0x38>
  10:	ldr	x0, [x1, #8]
  14:	cbnz	x0, 38 <get_pipe+0x38>
  18:	stp	x29, x30, [sp, #-16]!
  1c:	adrp	x1, 0 <get_pipe>
  20:	adrp	x0, 0 <get_pipe>
  24:	mov	x29, sp
  28:	add	x1, x1, #0x0
  2c:	add	x0, x0, #0x0
  30:	mov	w2, #0x50                  	// #80
  34:	bl	0 <eprintf>
  38:	ret

000000000000003c <teardown_pipe>:
  3c:	stp	x29, x30, [sp, #-32]!
  40:	mov	x29, sp
  44:	stp	x19, x20, [sp, #16]
  48:	adrp	x20, 0 <get_pipe>
  4c:	add	x19, x20, #0x0
  50:	ldr	x0, [x20]
  54:	cbz	x0, 84 <teardown_pipe+0x48>
  58:	bl	0 <fclose>
  5c:	str	xzr, [x20]
  60:	ldr	x0, [x19, #16]
  64:	cbz	x0, 78 <teardown_pipe+0x3c>
  68:	bl	0 <unlink>
  6c:	ldr	x0, [x19, #16]
  70:	bl	0 <free>
  74:	str	xzr, [x19, #16]
  78:	ldp	x19, x20, [sp, #16]
  7c:	ldp	x29, x30, [sp], #32
  80:	ret
  84:	ldr	x0, [x19, #8]
  88:	cbz	x0, b0 <teardown_pipe+0x74>
  8c:	bl	0 <fclose>
  90:	str	xzr, [x19, #8]
  94:	ldr	x0, [x19, #24]
  98:	cbz	x0, 78 <teardown_pipe+0x3c>
  9c:	bl	0 <unlink>
  a0:	ldr	x0, [x19, #24]
  a4:	bl	0 <free>
  a8:	str	xzr, [x19, #24]
  ac:	b	78 <teardown_pipe+0x3c>
  b0:	adrp	x1, 0 <get_pipe>
  b4:	adrp	x0, 0 <get_pipe>
  b8:	add	x1, x1, #0x0
  bc:	add	x0, x0, #0x0
  c0:	mov	w2, #0x16a                 	// #362
  c4:	bl	0 <eprintf>

00000000000000c8 <send_failure_info>:
  c8:	stp	x29, x30, [sp, #-32]!
  cc:	mov	x29, sp
  d0:	bl	0 <strdup>
  d4:	str	x0, [sp, #24]
  d8:	bl	0 <get_pipe>
  dc:	add	x2, sp, #0x18
  e0:	mov	w1, #0x1                   	// #1
  e4:	bl	0 <ppack>
  e8:	ldr	x0, [sp, #24]
  ec:	bl	0 <free>
  f0:	ldp	x29, x30, [sp], #32
  f4:	ret

00000000000000f8 <send_duration_info>:
  f8:	stp	x29, x30, [sp, #-32]!
  fc:	mov	x29, sp
 100:	str	w0, [sp, #24]
 104:	bl	0 <get_pipe>
 108:	add	x2, sp, #0x18
 10c:	mov	w1, #0x3                   	// #3
 110:	bl	0 <ppack>
 114:	ldp	x29, x30, [sp], #32
 118:	ret

000000000000011c <send_loc_info>:
 11c:	stp	x29, x30, [sp, #-48]!
 120:	mov	x29, sp
 124:	str	x19, [sp, #16]
 128:	mov	w19, w1
 12c:	bl	0 <strdup>
 130:	str	w19, [sp, #32]
 134:	str	x0, [sp, #40]
 138:	bl	0 <get_pipe>
 13c:	add	x2, sp, #0x20
 140:	mov	w1, #0x2                   	// #2
 144:	bl	0 <ppack>
 148:	ldr	x0, [sp, #40]
 14c:	bl	0 <free>
 150:	ldr	x19, [sp, #16]
 154:	ldp	x29, x30, [sp], #48
 158:	ret

000000000000015c <send_ctx_info>:
 15c:	stp	x29, x30, [sp, #-32]!
 160:	mov	x29, sp
 164:	str	w0, [sp, #24]
 168:	bl	0 <get_pipe>
 16c:	add	x2, sp, #0x18
 170:	mov	w1, #0x0                   	// #0
 174:	bl	0 <ppack>
 178:	ldp	x29, x30, [sp], #32
 17c:	ret

0000000000000180 <teardown_messaging>:
 180:	b	3c <teardown_pipe>

0000000000000184 <open_tmp_file>:
 184:	stp	x29, x30, [sp, #-32]!
 188:	mov	x29, sp
 18c:	stp	x19, x20, [sp, #16]
 190:	mov	x19, x0
 194:	str	xzr, [x0]
 198:	adrp	x0, 0 <get_pipe>
 19c:	add	x0, x0, #0x0
 1a0:	bl	0 <getenv>
 1a4:	cbnz	x0, 20c <open_tmp_file+0x88>
 1a8:	adrp	x1, 0 <get_pipe>
 1ac:	add	x1, x1, #0x0
 1b0:	adrp	x0, 0 <get_pipe>
 1b4:	add	x0, x0, #0x0
 1b8:	bl	0 <ck_strdup_printf>
 1bc:	str	x0, [x19]
 1c0:	bl	0 <mkstemp>
 1c4:	tbz	w0, #31, 1d0 <open_tmp_file+0x4c>
 1c8:	mov	x20, #0x0                   	// #0
 1cc:	b	1fc <open_tmp_file+0x78>
 1d0:	adrp	x1, 0 <get_pipe>
 1d4:	add	x1, x1, #0x0
 1d8:	bl	0 <fdopen>
 1dc:	mov	x20, x0
 1e0:	ldr	x0, [x19]
 1e4:	bl	0 <unlink>
 1e8:	cbz	w0, 1f0 <open_tmp_file+0x6c>
 1ec:	cbnz	x20, 1fc <open_tmp_file+0x78>
 1f0:	ldr	x0, [x19]
 1f4:	bl	0 <free>
 1f8:	str	xzr, [x19]
 1fc:	mov	x0, x20
 200:	ldp	x19, x20, [sp, #16]
 204:	ldp	x29, x30, [sp], #32
 208:	ret
 20c:	mov	x1, x0
 210:	b	1b0 <open_tmp_file+0x2c>

0000000000000214 <setup_pipe>:
 214:	stp	x29, x30, [sp, #-32]!
 218:	mov	x29, sp
 21c:	stp	x19, x20, [sp, #16]
 220:	adrp	x20, 0 <get_pipe>
 224:	add	x19, x20, #0x0
 228:	ldr	x0, [x19, #8]
 22c:	cbnz	x0, 258 <setup_pipe+0x44>
 230:	add	x0, x19, #0x18
 234:	bl	184 <open_tmp_file>
 238:	str	x0, [x19, #8]
 23c:	cbnz	x0, 290 <setup_pipe+0x7c>
 240:	mov	w2, #0x13d                 	// #317
 244:	adrp	x1, 0 <get_pipe>
 248:	adrp	x0, 0 <get_pipe>
 24c:	add	x1, x1, #0x0
 250:	add	x0, x0, #0x0
 254:	bl	0 <eprintf>
 258:	ldr	x0, [x20]
 25c:	cbnz	x0, 278 <setup_pipe+0x64>
 260:	add	x0, x19, #0x10
 264:	bl	184 <open_tmp_file>
 268:	str	x0, [x20]
 26c:	cbnz	x0, 290 <setup_pipe+0x7c>
 270:	mov	w2, #0x146                 	// #326
 274:	b	244 <setup_pipe+0x30>
 278:	adrp	x1, 0 <get_pipe>
 27c:	adrp	x0, 0 <get_pipe>
 280:	add	x1, x1, #0x0
 284:	add	x0, x0, #0x0
 288:	mov	w2, #0x14d                 	// #333
 28c:	b	254 <setup_pipe+0x40>
 290:	ldp	x19, x20, [sp, #16]
 294:	ldp	x29, x30, [sp], #32
 298:	ret

000000000000029c <receive_test_result>:
 29c:	stp	x29, x30, [sp, #-48]!
 2a0:	mov	x29, sp
 2a4:	stp	x19, x20, [sp, #16]
 2a8:	str	x21, [sp, #32]
 2ac:	mov	w21, w0
 2b0:	bl	0 <get_pipe>
 2b4:	cbnz	x0, 2d0 <receive_test_result+0x34>
 2b8:	adrp	x1, 0 <get_pipe>
 2bc:	adrp	x0, 0 <get_pipe>
 2c0:	add	x1, x1, #0x0
 2c4:	add	x0, x0, #0x0
 2c8:	mov	w2, #0x7f                  	// #127
 2cc:	bl	0 <eprintf>
 2d0:	mov	x19, x0
 2d4:	bl	0 <rewind>
 2d8:	mov	x0, x19
 2dc:	bl	0 <punpack>
 2e0:	mov	x19, x0
 2e4:	cbnz	x0, 300 <receive_test_result+0x64>
 2e8:	adrp	x1, 0 <get_pipe>
 2ec:	adrp	x0, 0 <get_pipe>
 2f0:	add	x1, x1, #0x0
 2f4:	add	x0, x0, #0x0
 2f8:	mov	w2, #0x85                  	// #133
 2fc:	b	2cc <receive_test_result+0x30>
 300:	bl	3c <teardown_pipe>
 304:	bl	214 <setup_pipe>
 308:	bl	0 <tr_create>
 30c:	mov	x20, x0
 310:	ldr	x1, [x19, #40]
 314:	cbnz	x1, 31c <receive_test_result+0x80>
 318:	cbz	w21, 35c <receive_test_result+0xc0>
 31c:	ldr	w0, [x19, #4]
 320:	cbnz	w0, 328 <receive_test_result+0x8c>
 324:	ldr	w0, [x19]
 328:	str	w0, [x20, #4]
 32c:	cmp	w0, #0x2
 330:	str	x1, [x20, #48]
 334:	str	xzr, [x19, #40]
 338:	b.ne	370 <receive_test_result+0xd4>  // b.any
 33c:	ldr	x0, [x19, #24]
 340:	str	x0, [x20, #8]
 344:	ldr	w0, [x19, #32]
 348:	str	w0, [x20, #16]
 34c:	mov	w0, #0xffffffff            	// #-1
 350:	str	xzr, [x19, #24]
 354:	str	w0, [x19, #32]
 358:	b	38c <receive_test_result+0xf0>
 35c:	ldr	w0, [x19]
 360:	cmp	w0, #0x1
 364:	b.ne	3a8 <receive_test_result+0x10c>  // b.any
 368:	str	w0, [x20, #4]
 36c:	str	xzr, [x20, #48]
 370:	ldr	x0, [x19, #8]
 374:	str	x0, [x20, #8]
 378:	ldr	w0, [x19, #16]
 37c:	str	w0, [x20, #16]
 380:	mov	w0, #0xffffffff            	// #-1
 384:	str	xzr, [x19, #8]
 388:	str	w0, [x19, #16]
 38c:	mov	x0, x19
 390:	bl	0 <rcvmsg_free>
 394:	mov	x0, x20
 398:	ldp	x19, x20, [sp, #16]
 39c:	ldr	x21, [sp, #32]
 3a0:	ldp	x29, x30, [sp], #48
 3a4:	ret
 3a8:	mov	w0, #0x2                   	// #2
 3ac:	str	w0, [x20, #4]
 3b0:	ldr	w0, [x19, #48]
 3b4:	str	w0, [x20, #24]
 3b8:	str	xzr, [x20, #48]
 3bc:	b	33c <receive_test_result+0xa0>

00000000000003c0 <setup_messaging>:
 3c0:	b	214 <setup_pipe>

check_pack.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <pack_int>:
   0:	ldr	x2, [x0]
   4:	rev	w1, w1
   8:	str	w1, [x2]
   c:	ldr	x1, [x0]
  10:	add	x1, x1, #0x4
  14:	str	x1, [x0]
  18:	ret

000000000000001c <upack_int>:
  1c:	ldr	x1, [x0]
  20:	ldr	w2, [x1], #4
  24:	str	x1, [x0]
  28:	rev	w0, w2
  2c:	ret

0000000000000030 <upack_ctx>:
  30:	mov	x3, x1
  34:	stp	x29, x30, [sp, #-16]!
  38:	mov	x29, sp
  3c:	bl	1c <upack_int>
  40:	ldp	x29, x30, [sp], #16
  44:	str	w0, [x3]
  48:	ret

000000000000004c <upack_duration>:
  4c:	mov	x3, x1
  50:	stp	x29, x30, [sp, #-16]!
  54:	mov	x29, sp
  58:	bl	1c <upack_int>
  5c:	ldp	x29, x30, [sp], #16
  60:	str	w0, [x3]
  64:	ret

0000000000000068 <pack_duration>:
  68:	stp	x29, x30, [sp, #-48]!
  6c:	mov	x29, sp
  70:	stp	x19, x20, [sp, #16]
  74:	mov	x20, x0
  78:	mov	x19, x1
  7c:	mov	x0, #0x8                   	// #8
  80:	bl	0 <emalloc>
  84:	str	x0, [x20]
  88:	mov	w1, #0x3                   	// #3
  8c:	str	x0, [sp, #40]
  90:	add	x0, sp, #0x28
  94:	bl	0 <pack_int>
  98:	ldr	w1, [x19]
  9c:	add	x0, sp, #0x28
  a0:	bl	0 <pack_int>
  a4:	mov	w0, #0x8                   	// #8
  a8:	ldp	x19, x20, [sp, #16]
  ac:	ldp	x29, x30, [sp], #48
  b0:	ret

00000000000000b4 <pack_ctx>:
  b4:	stp	x29, x30, [sp, #-48]!
  b8:	mov	x29, sp
  bc:	stp	x19, x20, [sp, #16]
  c0:	mov	x20, x0
  c4:	mov	x19, x1
  c8:	mov	x0, #0x8                   	// #8
  cc:	bl	0 <emalloc>
  d0:	str	x0, [x20]
  d4:	mov	w1, #0x0                   	// #0
  d8:	str	x0, [sp, #40]
  dc:	add	x0, sp, #0x28
  e0:	bl	0 <pack_int>
  e4:	ldr	w1, [x19]
  e8:	add	x0, sp, #0x28
  ec:	bl	0 <pack_int>
  f0:	mov	w0, #0x8                   	// #8
  f4:	ldp	x19, x20, [sp, #16]
  f8:	ldp	x29, x30, [sp], #48
  fc:	ret

0000000000000100 <pack_str>:
 100:	stp	x29, x30, [sp, #-48]!
 104:	mov	x29, sp
 108:	stp	x19, x20, [sp, #16]
 10c:	mov	x20, x0
 110:	str	x21, [sp, #32]
 114:	mov	x21, x1
 118:	cbz	x1, 168 <pack_str+0x68>
 11c:	mov	x0, x1
 120:	bl	0 <strlen>
 124:	sxtw	x19, w0
 128:	mov	w1, w19
 12c:	mov	x0, x20
 130:	bl	0 <pack_int>
 134:	cmp	w19, #0x0
 138:	b.le	158 <pack_str+0x58>
 13c:	ldr	x0, [x20]
 140:	mov	x2, x19
 144:	mov	x1, x21
 148:	bl	0 <memcpy>
 14c:	ldr	x3, [x20]
 150:	add	x3, x3, x19
 154:	str	x3, [x20]
 158:	ldp	x19, x20, [sp, #16]
 15c:	ldr	x21, [sp, #32]
 160:	ldp	x29, x30, [sp], #48
 164:	ret
 168:	mov	x19, #0x0                   	// #0
 16c:	b	128 <pack_str+0x28>

0000000000000170 <pack_loc>:
 170:	stp	x29, x30, [sp, #-64]!
 174:	mov	x29, sp
 178:	str	x21, [sp, #32]
 17c:	mov	x21, x0
 180:	ldr	x0, [x1, #8]
 184:	stp	x19, x20, [sp, #16]
 188:	mov	x20, x1
 18c:	cbz	x0, 1e0 <pack_loc+0x70>
 190:	bl	0 <strlen>
 194:	add	w19, w0, #0xc
 198:	sxtw	x0, w19
 19c:	bl	0 <emalloc>
 1a0:	str	x0, [x21]
 1a4:	mov	w1, #0x2                   	// #2
 1a8:	str	x0, [sp, #56]
 1ac:	add	x0, sp, #0x38
 1b0:	bl	0 <pack_int>
 1b4:	ldr	x1, [x20, #8]
 1b8:	add	x0, sp, #0x38
 1bc:	bl	100 <pack_str>
 1c0:	ldr	w1, [x20]
 1c4:	add	x0, sp, #0x38
 1c8:	bl	0 <pack_int>
 1cc:	mov	w0, w19
 1d0:	ldp	x19, x20, [sp, #16]
 1d4:	ldr	x21, [sp, #32]
 1d8:	ldp	x29, x30, [sp], #64
 1dc:	ret
 1e0:	mov	w19, #0xc                   	// #12
 1e4:	b	198 <pack_loc+0x28>

00000000000001e8 <pack_fail>:
 1e8:	stp	x29, x30, [sp, #-64]!
 1ec:	mov	x29, sp
 1f0:	str	x21, [sp, #32]
 1f4:	mov	x21, x0
 1f8:	ldr	x0, [x1]
 1fc:	stp	x19, x20, [sp, #16]
 200:	mov	x20, x1
 204:	cbz	x0, 24c <pack_fail+0x64>
 208:	bl	0 <strlen>
 20c:	add	w19, w0, #0x8
 210:	sxtw	x0, w19
 214:	bl	0 <emalloc>
 218:	str	x0, [x21]
 21c:	mov	w1, #0x1                   	// #1
 220:	str	x0, [sp, #56]
 224:	add	x0, sp, #0x38
 228:	bl	0 <pack_int>
 22c:	ldr	x1, [x20]
 230:	add	x0, sp, #0x38
 234:	bl	100 <pack_str>
 238:	mov	w0, w19
 23c:	ldp	x19, x20, [sp, #16]
 240:	ldr	x21, [sp, #32]
 244:	ldp	x29, x30, [sp], #64
 248:	ret
 24c:	mov	w19, #0x8                   	// #8
 250:	b	210 <pack_fail+0x28>

0000000000000254 <ppack_cleanup>:
 254:	b	0 <pthread_mutex_unlock>

0000000000000258 <get_max_msg_size>:
 258:	stp	x29, x30, [sp, #-16]!
 25c:	adrp	x0, 0 <pack_int>
 260:	add	x0, x0, #0x0
 264:	mov	x29, sp
 268:	bl	0 <getenv>
 26c:	cbnz	x0, 28c <get_max_msg_size+0x34>
 270:	adrp	x0, 0 <pack_int>
 274:	mov	x1, #0x1000                	// #4096
 278:	ldr	x0, [x0]
 27c:	cmp	x0, #0x0
 280:	csel	x0, x0, x1, ne  // ne = any
 284:	ldp	x29, x30, [sp], #16
 288:	ret
 28c:	mov	w2, #0xa                   	// #10
 290:	mov	x1, #0x0                   	// #0
 294:	bl	0 <strtoul>
 298:	cbz	x0, 270 <get_max_msg_size+0x18>
 29c:	b	284 <get_max_msg_size+0x2c>

00000000000002a0 <upack_str>:
 2a0:	stp	x29, x30, [sp, #-48]!
 2a4:	mov	x29, sp
 2a8:	stp	x19, x20, [sp, #16]
 2ac:	str	x21, [sp, #32]
 2b0:	mov	x21, x0
 2b4:	bl	1c <upack_int>
 2b8:	sxtw	x19, w0
 2bc:	cmp	w19, #0x0
 2c0:	b.le	304 <upack_str+0x64>
 2c4:	add	w0, w19, #0x1
 2c8:	sxtw	x0, w0
 2cc:	bl	0 <emalloc>
 2d0:	ldr	x1, [x21]
 2d4:	mov	x20, x0
 2d8:	mov	x2, x19
 2dc:	bl	0 <memcpy>
 2e0:	strb	wzr, [x20, x19]
 2e4:	ldr	x2, [x21]
 2e8:	add	x2, x2, x19
 2ec:	str	x2, [x21]
 2f0:	mov	x0, x20
 2f4:	ldp	x19, x20, [sp, #16]
 2f8:	ldr	x21, [sp, #32]
 2fc:	ldp	x29, x30, [sp], #48
 300:	ret
 304:	mov	x0, #0x1                   	// #1
 308:	bl	0 <emalloc>
 30c:	mov	x20, x0
 310:	strb	wzr, [x0]
 314:	b	2f0 <upack_str+0x50>

0000000000000318 <upack_loc>:
 318:	stp	x29, x30, [sp, #-32]!
 31c:	mov	x29, sp
 320:	stp	x19, x20, [sp, #16]
 324:	mov	x19, x1
 328:	mov	x20, x0
 32c:	bl	2a0 <upack_str>
 330:	str	x0, [x19, #8]
 334:	mov	x0, x20
 338:	bl	1c <upack_int>
 33c:	str	w0, [x19]
 340:	ldp	x19, x20, [sp, #16]
 344:	ldp	x29, x30, [sp], #32
 348:	ret

000000000000034c <upack_fail>:
 34c:	stp	x29, x30, [sp, #-32]!
 350:	mov	x29, sp
 354:	str	x19, [sp, #16]
 358:	mov	x19, x1
 35c:	bl	2a0 <upack_str>
 360:	str	x0, [x19]
 364:	ldr	x19, [sp, #16]
 368:	ldp	x29, x30, [sp], #32
 36c:	ret

0000000000000370 <check_set_max_msg_size>:
 370:	adrp	x1, 0 <pack_int>
 374:	str	x0, [x1]
 378:	ret

000000000000037c <pack>:
 37c:	mov	w3, w0
 380:	mov	x0, x1
 384:	cbz	x1, 3cc <pack+0x50>
 388:	mov	x1, x2
 38c:	cbz	x2, 3d4 <pack+0x58>
 390:	cmp	w3, #0x3
 394:	b.ls	3b8 <pack+0x3c>  // b.plast
 398:	stp	x29, x30, [sp, #-16]!
 39c:	adrp	x1, 0 <pack_int>
 3a0:	adrp	x0, 0 <pack_int>
 3a4:	mov	x29, sp
 3a8:	add	x1, x1, #0x0
 3ac:	add	x0, x0, #0x0
 3b0:	mov	w2, #0x7e                  	// #126
 3b4:	bl	0 <eprintf>
 3b8:	adrp	x2, 0 <pack_int>
 3bc:	add	x2, x2, #0x0
 3c0:	ldr	x2, [x2, w3, uxtw #3]
 3c4:	mov	x16, x2
 3c8:	br	x16
 3cc:	mov	w0, #0xffffffff            	// #-1
 3d0:	ret
 3d4:	mov	w0, #0x0                   	// #0
 3d8:	ret

00000000000003dc <upack>:
 3dc:	stp	x29, x30, [sp, #-48]!
 3e0:	mov	x29, sp
 3e4:	str	x19, [sp, #16]
 3e8:	str	x0, [sp, #40]
 3ec:	cbz	x0, 45c <upack+0x80>
 3f0:	mov	x5, x2
 3f4:	mov	x4, x1
 3f8:	mov	x19, x0
 3fc:	add	x0, sp, #0x28
 400:	bl	1c <upack_int>
 404:	str	w0, [x5]
 408:	mov	w3, w0
 40c:	cmp	w0, #0x3
 410:	b.ls	42c <upack+0x50>  // b.plast
 414:	adrp	x1, 0 <pack_int>
 418:	adrp	x0, 0 <pack_int>
 41c:	add	x1, x1, #0x0
 420:	add	x0, x0, #0x0
 424:	mov	w2, #0x8e                  	// #142
 428:	bl	0 <eprintf>
 42c:	adrp	x2, 0 <pack_int>
 430:	add	x2, x2, #0x0
 434:	add	x2, x2, #0x20
 438:	mov	x1, x4
 43c:	add	x0, sp, #0x28
 440:	ldr	x2, [x2, w3, uxtw #3]
 444:	blr	x2
 448:	ldr	x1, [sp, #40]
 44c:	sub	w0, w1, w19
 450:	ldr	x19, [sp, #16]
 454:	ldp	x29, x30, [sp], #48
 458:	ret
 45c:	mov	w0, #0xffffffff            	// #-1
 460:	b	450 <upack+0x74>

0000000000000464 <ppack>:
 464:	stp	x29, x30, [sp, #-304]!
 468:	mov	x29, sp
 46c:	stp	x19, x20, [sp, #16]
 470:	str	x0, [sp, #48]
 474:	mov	w0, w1
 478:	add	x1, sp, #0x48
 47c:	str	xzr, [sp, #72]
 480:	bl	37c <pack>
 484:	sxtw	x0, w0
 488:	str	x0, [sp, #40]
 48c:	bl	258 <get_max_msg_size>
 490:	ldr	x1, [sp, #40]
 494:	cmp	x1, x0
 498:	b.ls	4b4 <ppack+0x50>  // b.plast
 49c:	adrp	x1, 0 <pack_int>
 4a0:	adrp	x0, 0 <pack_int>
 4a4:	add	x1, x1, #0x0
 4a8:	add	x0, x0, #0x0
 4ac:	mov	w2, #0x146                 	// #326
 4b0:	bl	0 <eprintf>
 4b4:	adrp	x0, 0 <pack_int>
 4b8:	add	x0, x0, #0x0
 4bc:	mov	w1, #0x0                   	// #0
 4c0:	str	x0, [sp, #56]
 4c4:	add	x0, sp, #0x50
 4c8:	bl	0 <__sigsetjmp>
 4cc:	cbz	w0, 4ec <ppack+0x88>
 4d0:	ldr	x1, [sp, #56]
 4d4:	adrp	x0, 0 <pack_int>
 4d8:	add	x0, x0, #0x0
 4dc:	add	x0, x0, #0x8
 4e0:	blr	x1
 4e4:	add	x0, sp, #0x50
 4e8:	bl	0 <__pthread_unwind_next>
 4ec:	adrp	x19, 0 <pack_int>
 4f0:	add	x19, x19, #0x0
 4f4:	add	x0, sp, #0x50
 4f8:	add	x19, x19, #0x8
 4fc:	bl	0 <__pthread_register_cancel>
 500:	mov	x0, x19
 504:	bl	0 <pthread_mutex_lock>
 508:	ldp	x2, x3, [sp, #40]
 50c:	mov	x1, #0x1                   	// #1
 510:	ldr	x0, [sp, #72]
 514:	bl	0 <fwrite>
 518:	mov	x20, x0
 51c:	ldr	x0, [sp, #48]
 520:	bl	0 <fflush>
 524:	mov	x0, x19
 528:	bl	0 <pthread_mutex_unlock>
 52c:	add	x0, sp, #0x50
 530:	bl	0 <__pthread_unregister_cancel>
 534:	ldr	x0, [sp, #40]
 538:	cmp	x0, x20
 53c:	b.eq	558 <ppack+0xf4>  // b.none
 540:	adrp	x1, 0 <pack_int>
 544:	adrp	x0, 0 <pack_int>
 548:	add	x1, x1, #0x0
 54c:	add	x0, x0, #0x0
 550:	mov	w2, #0x14f                 	// #335
 554:	b	4b0 <ppack+0x4c>
 558:	ldr	x0, [sp, #72]
 55c:	bl	0 <free>
 560:	ldp	x19, x20, [sp, #16]
 564:	ldp	x29, x30, [sp], #304
 568:	ret

000000000000056c <rcvmsg_free>:
 56c:	stp	x29, x30, [sp, #-32]!
 570:	mov	x29, sp
 574:	str	x19, [sp, #16]
 578:	mov	x19, x0
 57c:	ldr	x0, [x0, #8]
 580:	bl	0 <free>
 584:	ldr	x0, [x19, #24]
 588:	bl	0 <free>
 58c:	ldr	x0, [x19, #40]
 590:	bl	0 <free>
 594:	mov	x0, x19
 598:	ldr	x19, [sp, #16]
 59c:	ldp	x29, x30, [sp], #32
 5a0:	b	0 <free>

00000000000005a4 <punpack>:
 5a4:	stp	x29, x30, [sp, #-128]!
 5a8:	mov	x29, sp
 5ac:	stp	x19, x20, [sp, #16]
 5b0:	stp	x21, x22, [sp, #32]
 5b4:	stp	x23, x24, [sp, #48]
 5b8:	mov	x24, x0
 5bc:	mov	x0, #0x38                  	// #56
 5c0:	stp	x25, x26, [sp, #64]
 5c4:	mov	w25, #0xffffffff            	// #-1
 5c8:	str	x27, [sp, #80]
 5cc:	bl	0 <emalloc>
 5d0:	stp	xzr, xzr, [x0]
 5d4:	mov	x19, x0
 5d8:	str	w25, [x0, #16]
 5dc:	str	xzr, [x0, #24]
 5e0:	str	w25, [x0, #32]
 5e4:	str	xzr, [x0, #40]
 5e8:	str	w25, [x0, #48]
 5ec:	bl	258 <get_max_msg_size>
 5f0:	lsl	x0, x0, #1
 5f4:	bl	0 <emalloc>
 5f8:	mov	x20, x0
 5fc:	bl	258 <get_max_msg_size>
 600:	sbfiz	x2, x0, #1, #31
 604:	mov	x3, x24
 608:	mov	x1, #0x1                   	// #1
 60c:	mov	x0, x20
 610:	bl	0 <fread>
 614:	mov	x22, x0
 618:	mov	w21, w0
 61c:	mov	x0, x24
 620:	bl	0 <ferror>
 624:	cbz	w0, 7cc <punpack+0x228>
 628:	adrp	x1, 0 <pack_int>
 62c:	adrp	x0, 0 <pack_int>
 630:	add	x1, x1, #0x0
 634:	add	x0, x0, #0x0
 638:	mov	w2, #0x15a                 	// #346
 63c:	bl	0 <eprintf>
 640:	add	x2, sp, #0x6c
 644:	add	x1, sp, #0x70
 648:	mov	x0, x20
 64c:	bl	3dc <upack>
 650:	mov	w23, w0
 654:	cmn	w0, #0x1
 658:	b.ne	674 <punpack+0xd0>  // b.any
 65c:	adrp	x1, 0 <pack_int>
 660:	adrp	x0, 0 <pack_int>
 664:	add	x1, x1, #0x0
 668:	add	x0, x0, #0x0
 66c:	mov	w2, #0x16a                 	// #362
 670:	b	63c <punpack+0x98>
 674:	ldr	w3, [sp, #108]
 678:	cbnz	w3, 6bc <punpack+0x118>
 67c:	ldr	w0, [x19]
 680:	ldr	w26, [sp, #112]
 684:	cbz	w0, 698 <punpack+0xf4>
 688:	ldr	x0, [x19, #8]
 68c:	bl	0 <free>
 690:	str	xzr, [x19, #8]
 694:	str	w25, [x19, #16]
 698:	str	w26, [x19]
 69c:	subs	w21, w21, w23
 6a0:	b.pl	780 <punpack+0x1dc>  // b.nfrst
 6a4:	adrp	x1, 0 <pack_int>
 6a8:	adrp	x0, 0 <pack_int>
 6ac:	add	x1, x1, #0x0
 6b0:	add	x0, x0, #0x0
 6b4:	mov	w2, #0x1e6                 	// #486
 6b8:	b	63c <punpack+0x98>
 6bc:	cmp	w3, #0x2
 6c0:	b.ne	720 <punpack+0x17c>  // b.any
 6c4:	ldr	w0, [x19, #4]
 6c8:	cbnz	w0, 6f8 <punpack+0x154>
 6cc:	ldr	w0, [x19]
 6d0:	ldr	w27, [sp, #112]
 6d4:	cmp	w0, #0x2
 6d8:	ldr	x26, [sp, #120]
 6dc:	b.ne	704 <punpack+0x160>  // b.any
 6e0:	ldr	x0, [x19, #24]
 6e4:	bl	0 <free>
 6e8:	str	w27, [x19, #32]
 6ec:	mov	x0, x26
 6f0:	bl	0 <strdup>
 6f4:	str	x0, [x19, #24]
 6f8:	ldr	x0, [sp, #120]
 6fc:	bl	0 <free>
 700:	b	69c <punpack+0xf8>
 704:	ldr	x0, [x19, #8]
 708:	bl	0 <free>
 70c:	str	w27, [x19, #16]
 710:	mov	x0, x26
 714:	bl	0 <strdup>
 718:	str	x0, [x19, #8]
 71c:	b	6f8 <punpack+0x154>
 720:	cmp	w3, #0x1
 724:	b.ne	750 <punpack+0x1ac>  // b.any
 728:	ldr	x0, [x19, #40]
 72c:	ldr	x26, [sp, #112]
 730:	cbnz	x0, 748 <punpack+0x1a4>
 734:	mov	x0, x26
 738:	bl	0 <strdup>
 73c:	str	x0, [x19, #40]
 740:	ldr	w0, [x19]
 744:	str	w0, [x19, #4]
 748:	mov	x0, x26
 74c:	b	6fc <punpack+0x158>
 750:	cmp	w3, #0x3
 754:	b.ne	764 <punpack+0x1c0>  // b.any
 758:	ldr	w0, [sp, #112]
 75c:	str	w0, [x19, #48]
 760:	b	69c <punpack+0xf8>
 764:	b.ls	69c <punpack+0xf8>  // b.plast
 768:	adrp	x1, 0 <pack_int>
 76c:	adrp	x0, 0 <pack_int>
 770:	add	x1, x1, #0x0
 774:	add	x0, x0, #0x0
 778:	mov	w2, #0x194                 	// #404
 77c:	bl	0 <eprintf>
 780:	sxtw	x26, w21
 784:	add	x1, x20, w23, sxtw
 788:	mov	x2, x26
 78c:	mov	x0, x20
 790:	bl	0 <memmove>
 794:	sxtw	x27, w23
 798:	cmp	w22, #0x0
 79c:	b.le	7cc <punpack+0x228>
 7a0:	mov	x3, x24
 7a4:	mov	x2, x27
 7a8:	mov	x1, #0x1                   	// #1
 7ac:	add	x0, x20, x26
 7b0:	bl	0 <fread>
 7b4:	mov	x23, x0
 7b8:	mov	w22, w0
 7bc:	mov	x0, x24
 7c0:	bl	0 <ferror>
 7c4:	cbnz	w0, 628 <punpack+0x84>
 7c8:	add	w21, w21, w23
 7cc:	cmp	w21, #0x0
 7d0:	b.gt	640 <punpack+0x9c>
 7d4:	mov	x0, x20
 7d8:	bl	0 <free>
 7dc:	ldr	w0, [x19]
 7e0:	cbnz	w0, 7f0 <punpack+0x24c>
 7e4:	mov	x0, x19
 7e8:	mov	x19, #0x0                   	// #0
 7ec:	bl	0 <free>
 7f0:	mov	x0, x19
 7f4:	ldp	x19, x20, [sp, #16]
 7f8:	ldp	x21, x22, [sp, #32]
 7fc:	ldp	x23, x24, [sp, #48]
 800:	ldp	x25, x26, [sp, #64]
 804:	ldr	x27, [sp, #80]
 808:	ldp	x29, x30, [sp], #128
 80c:	ret

check_print.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fprint_xml_esc>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x1
  14:	stp	x21, x22, [sp, #32]
  18:	adrp	x21, 0 <fprint_xml_esc>
  1c:	adrp	x22, 0 <fprint_xml_esc>
  20:	add	x21, x21, #0x0
  24:	add	x22, x22, #0x0
  28:	str	x23, [sp, #48]
  2c:	mov	x23, #0x8400000000          	// #566935683072
  30:	movk	x23, #0x5000, lsl #48
  34:	ldrb	w2, [x20]
  38:	cbnz	w2, 50 <fprint_xml_esc+0x50>
  3c:	ldp	x19, x20, [sp, #16]
  40:	ldp	x21, x22, [sp, #32]
  44:	ldr	x23, [sp, #48]
  48:	ldp	x29, x30, [sp], #64
  4c:	ret
  50:	cmp	w2, #0x3e
  54:	b.hi	68 <fprint_xml_esc+0x68>  // b.pmore
  58:	lsr	x0, x23, x2
  5c:	tbnz	w0, #0, 88 <fprint_xml_esc+0x88>
  60:	cmp	w2, #0x26
  64:	b.eq	100 <fprint_xml_esc+0x100>  // b.none
  68:	sub	w0, w2, #0x20
  6c:	and	w0, w0, #0xff
  70:	cmp	w0, #0x5e
  74:	b.hi	10c <fprint_xml_esc+0x10c>  // b.pmore
  78:	mov	x1, x19
  7c:	mov	w0, w2
  80:	bl	0 <fputc>
  84:	b	a4 <fprint_xml_esc+0xa4>
  88:	cmp	w2, #0x27
  8c:	b.eq	e0 <fprint_xml_esc+0xe0>  // b.none
  90:	b.hi	ac <fprint_xml_esc+0xac>  // b.pmore
  94:	cmp	w2, #0x22
  98:	b.eq	cc <fprint_xml_esc+0xcc>  // b.none
  9c:	cmp	w2, #0x26
  a0:	b.eq	100 <fprint_xml_esc+0x100>  // b.none
  a4:	add	x20, x20, #0x1
  a8:	b	34 <fprint_xml_esc+0x34>
  ac:	cmp	w2, #0x3c
  b0:	b.eq	f0 <fprint_xml_esc+0xf0>  // b.none
  b4:	cmp	w2, #0x3e
  b8:	b.ne	a4 <fprint_xml_esc+0xa4>  // b.any
  bc:	adrp	x0, 0 <fprint_xml_esc>
  c0:	mov	x1, x19
  c4:	add	x0, x0, #0x0
  c8:	b	d8 <fprint_xml_esc+0xd8>
  cc:	adrp	x0, 0 <fprint_xml_esc>
  d0:	mov	x1, x19
  d4:	add	x0, x0, #0x0
  d8:	bl	0 <fputs>
  dc:	b	a4 <fprint_xml_esc+0xa4>
  e0:	adrp	x0, 0 <fprint_xml_esc>
  e4:	mov	x1, x19
  e8:	add	x0, x0, #0x0
  ec:	b	d8 <fprint_xml_esc+0xd8>
  f0:	adrp	x0, 0 <fprint_xml_esc>
  f4:	mov	x1, x19
  f8:	add	x0, x0, #0x0
  fc:	b	d8 <fprint_xml_esc+0xd8>
 100:	mov	x1, x19
 104:	mov	x0, x22
 108:	b	d8 <fprint_xml_esc+0xd8>
 10c:	sub	w0, w2, #0x9
 110:	and	w0, w0, #0xff
 114:	cmp	w0, #0x1
 118:	ccmp	w2, #0xd, #0x4, hi  // hi = pmore
 11c:	b.eq	128 <fprint_xml_esc+0x128>  // b.none
 120:	cmp	w2, #0x1f
 124:	b.ls	a4 <fprint_xml_esc+0xa4>  // b.plast
 128:	mov	x1, x21
 12c:	mov	x0, x19
 130:	bl	0 <fprintf>
 134:	b	a4 <fprint_xml_esc+0xa4>

0000000000000138 <tr_xmlprint>:
 138:	stp	x29, x30, [sp, #-80]!
 13c:	mov	x29, sp
 140:	stp	x19, x20, [sp, #16]
 144:	mov	x19, x0
 148:	ldr	w0, [x1]
 14c:	stp	x21, x22, [sp, #32]
 150:	mov	x22, x1
 154:	cmp	w0, #0x2
 158:	str	x23, [sp, #48]
 15c:	b.eq	2e4 <tr_xmlprint+0x1ac>  // b.none
 160:	cmp	w0, #0x3
 164:	b.eq	2f0 <tr_xmlprint+0x1b8>  // b.none
 168:	cmp	w0, #0x1
 16c:	b.ne	2fc <tr_xmlprint+0x1c4>  // b.any
 170:	adrp	x1, 0 <fprint_xml_esc>
 174:	add	x1, x1, #0x0
 178:	add	x0, sp, #0x40
 17c:	bl	0 <strcpy>
 180:	ldr	x20, [x22, #8]
 184:	cbz	x20, 31c <tr_xmlprint+0x1e4>
 188:	mov	x0, x20
 18c:	mov	w1, #0x2f                  	// #47
 190:	bl	0 <strrchr>
 194:	mov	x23, x0
 198:	cbnz	x0, 300 <tr_xmlprint+0x1c8>
 19c:	mov	x0, x20
 1a0:	mov	w1, #0x5c                  	// #92
 1a4:	bl	0 <strrchr>
 1a8:	mov	x23, x0
 1ac:	cbnz	x0, 300 <tr_xmlprint+0x1c8>
 1b0:	adrp	x0, 0 <fprint_xml_esc>
 1b4:	add	x0, x0, #0x0
 1b8:	bl	0 <strdup>
 1bc:	mov	x21, x0
 1c0:	add	x2, sp, #0x40
 1c4:	mov	x0, x19
 1c8:	adrp	x1, 0 <fprint_xml_esc>
 1cc:	add	x1, x1, #0x0
 1d0:	bl	0 <fprintf>
 1d4:	adrp	x23, 0 <fprint_xml_esc>
 1d8:	cmp	x21, #0x0
 1dc:	add	x23, x23, #0x0
 1e0:	csel	x2, x23, x21, eq  // eq = none
 1e4:	mov	x0, x19
 1e8:	adrp	x1, 0 <fprint_xml_esc>
 1ec:	add	x1, x1, #0x0
 1f0:	bl	0 <fprintf>
 1f4:	ldr	w3, [x22, #16]
 1f8:	cmp	x20, #0x0
 1fc:	csel	x20, x20, x23, ne  // ne = any
 200:	mov	x0, x19
 204:	mov	x2, x20
 208:	adrp	x1, 0 <fprint_xml_esc>
 20c:	add	x1, x1, #0x0
 210:	bl	0 <fprintf>
 214:	ldr	x2, [x22, #40]
 218:	mov	x0, x19
 21c:	adrp	x1, 0 <fprint_xml_esc>
 220:	add	x1, x1, #0x0
 224:	bl	0 <fprintf>
 228:	ldr	w2, [x22, #20]
 22c:	mov	x0, x19
 230:	adrp	x1, 0 <fprint_xml_esc>
 234:	add	x1, x1, #0x0
 238:	bl	0 <fprintf>
 23c:	ldr	w0, [x22, #24]
 240:	tbnz	w0, #31, 324 <tr_xmlprint+0x1ec>
 244:	mov	w3, #0x4240                	// #16960
 248:	movk	w3, #0xf, lsl #16
 24c:	sdiv	w2, w0, w3
 250:	msub	w3, w2, w3, w0
 254:	mov	x0, x19
 258:	adrp	x1, 0 <fprint_xml_esc>
 25c:	add	x1, x1, #0x0
 260:	bl	0 <fprintf>
 264:	mov	x1, x19
 268:	adrp	x0, 0 <fprint_xml_esc>
 26c:	add	x0, x0, #0x0
 270:	bl	0 <fputs>
 274:	ldr	x1, [x22, #32]
 278:	mov	x0, x19
 27c:	bl	0 <fprint_xml_esc>
 280:	mov	x1, x19
 284:	adrp	x0, 0 <fprint_xml_esc>
 288:	add	x0, x0, #0x0
 28c:	bl	0 <fputs>
 290:	mov	x1, x19
 294:	adrp	x0, 0 <fprint_xml_esc>
 298:	add	x0, x0, #0x0
 29c:	bl	0 <fputs>
 2a0:	ldr	x1, [x22, #48]
 2a4:	mov	x0, x19
 2a8:	bl	0 <fprint_xml_esc>
 2ac:	mov	x1, x19
 2b0:	adrp	x0, 0 <fprint_xml_esc>
 2b4:	add	x0, x0, #0x0
 2b8:	bl	0 <fputs>
 2bc:	mov	x1, x19
 2c0:	adrp	x0, 0 <fprint_xml_esc>
 2c4:	add	x0, x0, #0x0
 2c8:	bl	0 <fputs>
 2cc:	mov	x0, x21
 2d0:	ldp	x19, x20, [sp, #16]
 2d4:	ldp	x21, x22, [sp, #32]
 2d8:	ldr	x23, [sp, #48]
 2dc:	ldp	x29, x30, [sp], #80
 2e0:	b	0 <free>
 2e4:	adrp	x1, 0 <fprint_xml_esc>
 2e8:	add	x1, x1, #0x0
 2ec:	b	178 <tr_xmlprint+0x40>
 2f0:	adrp	x1, 0 <fprint_xml_esc>
 2f4:	add	x1, x1, #0x0
 2f8:	b	178 <tr_xmlprint+0x40>
 2fc:	bl	0 <abort>
 300:	mov	x0, x20
 304:	sub	x20, x23, x20
 308:	bl	0 <strdup>
 30c:	mov	x21, x0
 310:	strb	wzr, [x0, x20]
 314:	add	x20, x23, #0x1
 318:	b	1c0 <tr_xmlprint+0x88>
 31c:	mov	x21, #0x0                   	// #0
 320:	b	1c0 <tr_xmlprint+0x88>
 324:	mov	w2, #0xffffffff            	// #-1
 328:	mov	w3, #0x0                   	// #0
 32c:	b	254 <tr_xmlprint+0x11c>

0000000000000330 <get_env_printmode>:
 330:	stp	x29, x30, [sp, #-32]!
 334:	adrp	x0, 0 <fprint_xml_esc>
 338:	add	x0, x0, #0x0
 33c:	mov	x29, sp
 340:	str	x19, [sp, #16]
 344:	bl	0 <getenv>
 348:	cbz	x0, 39c <get_env_printmode+0x6c>
 34c:	adrp	x1, 0 <fprint_xml_esc>
 350:	mov	x19, x0
 354:	add	x1, x1, #0x0
 358:	bl	0 <strcmp>
 35c:	cbz	w0, 3a4 <get_env_printmode+0x74>
 360:	adrp	x1, 0 <fprint_xml_esc>
 364:	mov	x0, x19
 368:	add	x1, x1, #0x0
 36c:	bl	0 <strcmp>
 370:	cbz	w0, 3ac <get_env_printmode+0x7c>
 374:	mov	x0, x19
 378:	adrp	x1, 0 <fprint_xml_esc>
 37c:	add	x1, x1, #0x0
 380:	bl	0 <strcmp>
 384:	cmp	w0, #0x0
 388:	cset	w0, eq  // eq = none
 38c:	add	w0, w0, #0x2
 390:	ldr	x19, [sp, #16]
 394:	ldp	x29, x30, [sp], #32
 398:	ret
 39c:	mov	w0, #0x2                   	// #2
 3a0:	b	390 <get_env_printmode+0x60>
 3a4:	mov	w0, #0x0                   	// #0
 3a8:	b	390 <get_env_printmode+0x60>
 3ac:	mov	w0, #0x1                   	// #1
 3b0:	b	390 <get_env_printmode+0x60>

00000000000003b4 <tr_fprint>:
 3b4:	stp	x29, x30, [sp, #-32]!
 3b8:	cmp	w2, #0x4
 3bc:	mov	x29, sp
 3c0:	stp	x19, x20, [sp, #16]
 3c4:	mov	x20, x0
 3c8:	mov	x19, x1
 3cc:	b.ne	3d8 <tr_fprint+0x24>  // b.any
 3d0:	bl	330 <get_env_printmode>
 3d4:	mov	w2, w0
 3d8:	cmp	w2, #0x2
 3dc:	b.hi	3f4 <tr_fprint+0x40>  // b.pmore
 3e0:	ldr	w0, [x19]
 3e4:	cmp	w0, #0x1
 3e8:	b.eq	424 <tr_fprint+0x70>  // b.none
 3ec:	cmp	w2, #0x2
 3f0:	b.ne	424 <tr_fprint+0x70>  // b.any
 3f4:	mov	x0, x19
 3f8:	bl	0 <tr_str>
 3fc:	adrp	x1, 0 <fprint_xml_esc>
 400:	mov	x19, x0
 404:	mov	x2, x0
 408:	add	x1, x1, #0x0
 40c:	mov	x0, x20
 410:	bl	0 <fprintf>
 414:	mov	x0, x19
 418:	ldp	x19, x20, [sp, #16]
 41c:	ldp	x29, x30, [sp], #32
 420:	b	0 <free>
 424:	ldp	x19, x20, [sp, #16]
 428:	ldp	x29, x30, [sp], #32
 42c:	ret

0000000000000430 <srunner_fprint>:
 430:	stp	x29, x30, [sp, #-48]!
 434:	cmp	w2, #0x4
 438:	mov	x29, sp
 43c:	stp	x19, x20, [sp, #16]
 440:	mov	x20, x1
 444:	stp	x21, x22, [sp, #32]
 448:	mov	x21, x0
 44c:	b.ne	4ac <srunner_fprint+0x7c>  // b.any
 450:	bl	330 <get_env_printmode>
 454:	mov	w19, w0
 458:	cbz	w19, 484 <srunner_fprint+0x54>
 45c:	mov	x0, x20
 460:	bl	0 <sr_stat_str>
 464:	adrp	x1, 0 <fprint_xml_esc>
 468:	mov	x2, x0
 46c:	add	x1, x1, #0x0
 470:	mov	x22, x0
 474:	mov	x0, x21
 478:	bl	0 <fprintf>
 47c:	mov	x0, x22
 480:	bl	0 <free>
 484:	ldr	x20, [x20, #16]
 488:	mov	x0, x20
 48c:	bl	0 <check_list_front>
 490:	mov	x0, x20
 494:	bl	0 <check_list_at_end>
 498:	cbz	w0, 4b4 <srunner_fprint+0x84>
 49c:	ldp	x19, x20, [sp, #16]
 4a0:	ldp	x21, x22, [sp, #32]
 4a4:	ldp	x29, x30, [sp], #48
 4a8:	ret
 4ac:	mov	w19, w2
 4b0:	b	458 <srunner_fprint+0x28>
 4b4:	mov	x0, x20
 4b8:	bl	0 <check_list_val>
 4bc:	mov	w2, w19
 4c0:	mov	x1, x0
 4c4:	mov	x0, x21
 4c8:	bl	3b4 <tr_fprint>
 4cc:	mov	x0, x20
 4d0:	bl	0 <check_list_advance>
 4d4:	b	490 <srunner_fprint+0x60>

00000000000004d8 <srunner_print>:
 4d8:	mov	w2, w1
 4dc:	mov	x1, x0
 4e0:	adrp	x0, 0 <stdout>
 4e4:	ldr	x0, [x0]
 4e8:	b	430 <srunner_fprint>

check_run.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <waserror>:
   0:	and	w2, w0, #0x7f
   4:	add	w3, w2, #0x1
   8:	sbfx	x3, x3, #1, #7
   c:	cmp	w3, #0x0
  10:	ccmp	w2, w1, #0x4, gt
  14:	b.ne	28 <waserror+0x28>  // b.any
  18:	tst	x0, #0xff00
  1c:	ccmp	w2, #0x0, #0x0, ne  // ne = any
  20:	cset	w0, eq  // eq = none
  24:	ret
  28:	mov	w0, #0x1                   	// #1
  2c:	b	24 <waserror+0x24>

0000000000000030 <srunner_run_teardown>:
  30:	stp	x29, x30, [sp, #-48]!
  34:	mov	x29, sp
  38:	str	x0, [sp, #16]
  3c:	str	w1, [sp, #36]
  40:	bl	0 <check_list_front>
  44:	adrp	x0, 0 <error_jmp_buffer>
  48:	add	x0, x0, #0x0
  4c:	str	x0, [sp, #40]
  50:	ldr	x0, [sp, #16]
  54:	bl	0 <check_list_at_end>
  58:	cbz	w0, 64 <srunner_run_teardown+0x34>
  5c:	ldp	x29, x30, [sp], #48
  60:	ret
  64:	ldr	x0, [sp, #16]
  68:	bl	0 <check_list_val>
  6c:	str	x0, [sp, #24]
  70:	mov	w0, #0x3                   	// #3
  74:	bl	0 <send_ctx_info>
  78:	ldr	w0, [sp, #36]
  7c:	cmp	w0, #0x2
  80:	b.ne	90 <srunner_run_teardown+0x60>  // b.any
  84:	ldr	x0, [sp, #40]
  88:	bl	0 <_setjmp>
  8c:	cbnz	w0, 5c <srunner_run_teardown+0x2c>
  90:	ldr	x0, [sp, #24]
  94:	ldr	x0, [x0, #8]
  98:	blr	x0
  9c:	ldr	x0, [sp, #16]
  a0:	bl	0 <check_list_advance>
  a4:	b	50 <srunner_run_teardown+0x20>

00000000000000a8 <srunner_add_failure>:
  a8:	stp	x29, x30, [sp, #-32]!
  ac:	mov	x29, sp
  b0:	stp	x19, x20, [sp, #16]
  b4:	mov	x19, x0
  b8:	mov	x20, x1
  bc:	ldr	x0, [x0, #16]
  c0:	bl	0 <check_list_add_end>
  c4:	ldr	x0, [x19, #8]
  c8:	ldr	w1, [x0]
  cc:	add	w1, w1, #0x1
  d0:	str	w1, [x0]
  d4:	ldr	w1, [x20]
  d8:	cmp	w1, #0x2
  dc:	b.ne	f8 <srunner_add_failure+0x50>  // b.any
  e0:	ldr	w1, [x0, #4]
  e4:	add	w1, w1, #0x1
  e8:	str	w1, [x0, #4]
  ec:	ldp	x19, x20, [sp, #16]
  f0:	ldp	x29, x30, [sp], #32
  f4:	ret
  f8:	cmp	w1, #0x3
  fc:	b.ne	ec <srunner_add_failure+0x44>  // b.any
 100:	ldr	w1, [x0, #8]
 104:	add	w1, w1, #0x1
 108:	str	w1, [x0, #8]
 10c:	b	ec <srunner_add_failure+0x44>

0000000000000110 <signal_error_msg>:
 110:	stp	x29, x30, [sp, #-64]!
 114:	mov	x29, sp
 118:	stp	x19, x20, [sp, #16]
 11c:	stp	x21, x22, [sp, #32]
 120:	mov	w21, w1
 124:	str	x23, [sp, #48]
 128:	mov	w23, w0
 12c:	mov	x0, #0x64                  	// #100
 130:	bl	0 <emalloc>
 134:	mov	x19, x0
 138:	mov	w0, w23
 13c:	bl	0 <strsignal>
 140:	bl	0 <strdup>
 144:	mov	x22, x0
 148:	mov	w0, w21
 14c:	bl	0 <strsignal>
 150:	bl	0 <strdup>
 154:	mov	x20, x0
 158:	adrp	x0, 0 <waserror>
 15c:	ldr	w0, [x0]
 160:	cbz	w0, 1a8 <signal_error_msg+0x98>
 164:	adrp	x2, 0 <waserror>
 168:	mov	x4, x20
 16c:	mov	w3, w21
 170:	add	x2, x2, #0x0
 174:	mov	x0, x19
 178:	mov	x1, #0x64                  	// #100
 17c:	bl	0 <snprintf>
 180:	mov	x0, x22
 184:	bl	0 <free>
 188:	mov	x0, x20
 18c:	bl	0 <free>
 190:	mov	x0, x19
 194:	ldp	x19, x20, [sp, #16]
 198:	ldp	x21, x22, [sp, #32]
 19c:	ldr	x23, [sp, #48]
 1a0:	ldp	x29, x30, [sp], #64
 1a4:	ret
 1a8:	mov	x6, x20
 1ac:	mov	w5, w21
 1b0:	mov	x4, x22
 1b4:	mov	w3, w23
 1b8:	mov	x0, x19
 1bc:	adrp	x2, 0 <waserror>
 1c0:	mov	x1, #0x64                  	// #100
 1c4:	add	x2, x2, #0x0
 1c8:	bl	0 <snprintf>
 1cc:	b	180 <signal_error_msg+0x70>

00000000000001d0 <sig_handler>:
 1d0:	cmp	w0, #0xe
 1d4:	b.eq	230 <sig_handler+0x60>  // b.none
 1d8:	stp	x29, x30, [sp, #-32]!
 1dc:	cmp	w0, #0xf
 1e0:	mov	x29, sp
 1e4:	str	x19, [sp, #16]
 1e8:	mov	w19, w0
 1ec:	b.eq	24c <sig_handler+0x7c>  // b.none
 1f0:	cmp	w0, #0x2
 1f4:	b.ne	268 <sig_handler+0x98>  // b.any
 1f8:	adrp	x1, 0 <waserror>
 1fc:	add	x1, x1, #0x0
 200:	add	x1, x1, #0x8
 204:	mov	x2, #0x0                   	// #0
 208:	bl	0 <sigaction>
 20c:	mov	w1, #0x9                   	// #9
 210:	adrp	x0, 0 <waserror>
 214:	ldr	w0, [x0]
 218:	bl	0 <killpg>
 21c:	bl	0 <getpgrp>
 220:	mov	w1, w19
 224:	ldr	x19, [sp, #16]
 228:	ldp	x29, x30, [sp], #32
 22c:	b	248 <sig_handler+0x78>
 230:	adrp	x0, 0 <waserror>
 234:	add	x2, x0, #0x0
 238:	mov	w1, #0x1                   	// #1
 23c:	str	w1, [x0]
 240:	mov	w1, #0x9                   	// #9
 244:	ldr	w0, [x2, #4]
 248:	b	0 <killpg>
 24c:	adrp	x1, 0 <waserror>
 250:	add	x1, x1, #0x0
 254:	add	x1, x1, #0xa0
 258:	mov	x2, #0x0                   	// #0
 25c:	bl	0 <sigaction>
 260:	mov	w1, w19
 264:	b	210 <sig_handler+0x40>
 268:	mov	w3, w0
 26c:	adrp	x1, 0 <waserror>
 270:	adrp	x0, 0 <waserror>
 274:	add	x1, x1, #0x0
 278:	add	x0, x0, #0x0
 27c:	mov	w2, #0x8e                  	// #142
 280:	bl	0 <eprintf>

0000000000000284 <receive_result_info_nofork>:
 284:	stp	x29, x30, [sp, #-64]!
 288:	mov	x29, sp
 28c:	stp	x19, x20, [sp, #16]
 290:	mov	w20, w3
 294:	stp	x21, x22, [sp, #32]
 298:	mov	x22, x1
 29c:	mov	w21, w2
 2a0:	str	x23, [sp, #48]
 2a4:	mov	x23, x0
 2a8:	mov	w0, #0x0                   	// #0
 2ac:	bl	0 <receive_test_result>
 2b0:	cbnz	x0, 2cc <receive_result_info_nofork+0x48>
 2b4:	adrp	x1, 0 <waserror>
 2b8:	adrp	x0, 0 <waserror>
 2bc:	add	x1, x1, #0x0
 2c0:	add	x0, x0, #0x0
 2c4:	mov	w2, #0x1b8                 	// #440
 2c8:	bl	0 <eprintf>
 2cc:	mov	x19, x0
 2d0:	ldr	x0, [x0, #48]
 2d4:	stp	w21, w20, [x19, #20]
 2d8:	stp	x23, x22, [x19, #32]
 2dc:	cbnz	x0, 310 <receive_result_info_nofork+0x8c>
 2e0:	mov	w0, #0x1                   	// #1
 2e4:	str	w0, [x19]
 2e8:	adrp	x0, 0 <waserror>
 2ec:	add	x0, x0, #0x0
 2f0:	bl	0 <strdup>
 2f4:	str	x0, [x19, #48]
 2f8:	mov	x0, x19
 2fc:	ldp	x19, x20, [sp, #16]
 300:	ldp	x21, x22, [sp, #32]
 304:	ldr	x23, [sp, #48]
 308:	ldp	x29, x30, [sp], #64
 30c:	ret
 310:	mov	w0, #0x2                   	// #2
 314:	str	w0, [x19]
 318:	b	2f8 <receive_result_info_nofork+0x74>

000000000000031c <srunner_run_setup>:
 31c:	stp	x29, x30, [sp, #-80]!
 320:	mov	x29, sp
 324:	str	x19, [sp, #16]
 328:	str	x0, [sp, #32]
 32c:	mov	w0, w1
 330:	str	w1, [sp, #44]
 334:	cmp	w0, #0x1
 338:	stp	x2, x3, [sp, #56]
 33c:	b.eq	374 <srunner_run_setup+0x58>  // b.none
 340:	ldr	x0, [sp, #32]
 344:	bl	0 <check_list_front>
 348:	adrp	x0, 0 <error_jmp_buffer>
 34c:	add	x0, x0, #0x0
 350:	str	x0, [sp, #72]
 354:	ldr	x0, [sp, #32]
 358:	bl	0 <check_list_at_end>
 35c:	cbz	w0, 380 <srunner_run_setup+0x64>
 360:	mov	x19, #0x0                   	// #0
 364:	mov	x0, x19
 368:	ldr	x19, [sp, #16]
 36c:	ldp	x29, x30, [sp], #80
 370:	ret
 374:	ldr	w0, [sp, #44]
 378:	bl	0 <send_ctx_info>
 37c:	b	340 <srunner_run_setup+0x24>
 380:	ldr	x0, [sp, #32]
 384:	bl	0 <check_list_val>
 388:	str	x0, [sp, #48]
 38c:	ldr	w0, [sp, #44]
 390:	cmp	w0, #0x2
 394:	b.ne	400 <srunner_run_setup+0xe4>  // b.any
 398:	mov	w0, #0x1                   	// #1
 39c:	bl	0 <send_ctx_info>
 3a0:	ldr	x0, [sp, #72]
 3a4:	bl	0 <_setjmp>
 3a8:	cbz	w0, 3f0 <srunner_run_setup+0xd4>
 3ac:	ldp	x0, x1, [sp, #56]
 3b0:	mov	w3, #0xffffffff            	// #-1
 3b4:	mov	w2, #0x0                   	// #0
 3b8:	bl	284 <receive_result_info_nofork>
 3bc:	mov	x19, x0
 3c0:	ldr	w0, [x0]
 3c4:	cmp	w0, #0x1
 3c8:	b.ne	364 <srunner_run_setup+0x48>  // b.any
 3cc:	ldr	x0, [x19, #8]
 3d0:	bl	0 <free>
 3d4:	ldr	x0, [x19, #48]
 3d8:	bl	0 <free>
 3dc:	mov	x0, x19
 3e0:	bl	0 <free>
 3e4:	ldr	x0, [sp, #32]
 3e8:	bl	0 <check_list_advance>
 3ec:	b	354 <srunner_run_setup+0x38>
 3f0:	ldr	x0, [sp, #48]
 3f4:	ldr	x0, [x0, #8]
 3f8:	blr	x0
 3fc:	b	3ac <srunner_run_setup+0x90>
 400:	ldr	x0, [sp, #48]
 404:	ldr	x0, [x0, #8]
 408:	blr	x0
 40c:	b	3e4 <srunner_run_setup+0xc8>

0000000000000410 <srunner_fork_status>:
 410:	ldr	w0, [x0, #56]
 414:	cbnz	w0, 458 <srunner_fork_status+0x48>
 418:	stp	x29, x30, [sp, #-16]!
 41c:	adrp	x0, 0 <waserror>
 420:	add	x0, x0, #0x0
 424:	mov	x29, sp
 428:	bl	0 <getenv>
 42c:	cbz	x0, 450 <srunner_fork_status+0x40>
 430:	adrp	x1, 0 <waserror>
 434:	add	x1, x1, #0x0
 438:	bl	0 <strcmp>
 43c:	cmp	w0, #0x0
 440:	cset	w0, eq  // eq = none
 444:	add	w0, w0, #0x1
 448:	ldp	x29, x30, [sp], #16
 44c:	ret
 450:	mov	w0, #0x1                   	// #1
 454:	b	448 <srunner_fork_status+0x38>
 458:	ret

000000000000045c <tcase_run_tfun_nofork.isra.0>:
 45c:	stp	x29, x30, [sp, #-96]!
 460:	mov	x29, sp
 464:	str	x19, [sp, #16]
 468:	stp	x1, x2, [sp, #40]
 46c:	str	w3, [sp, #60]
 470:	stp	xzr, xzr, [sp, #64]
 474:	stp	xzr, xzr, [sp, #80]
 478:	ldr	x19, [x1, #48]
 47c:	bl	410 <srunner_fork_status>
 480:	ldr	x1, [sp, #40]
 484:	adrp	x3, 0 <waserror>
 488:	add	x3, x3, #0x0
 48c:	ldr	x2, [x1]
 490:	mov	w1, w0
 494:	mov	x0, x19
 498:	bl	31c <srunner_run_setup>
 49c:	cbnz	x0, 528 <tcase_run_tfun_nofork.isra.0+0xcc>
 4a0:	bl	0 <check_get_clockid>
 4a4:	add	x1, sp, #0x40
 4a8:	bl	0 <clock_gettime>
 4ac:	adrp	x0, 0 <error_jmp_buffer>
 4b0:	add	x0, x0, #0x0
 4b4:	bl	0 <_setjmp>
 4b8:	cbz	w0, 534 <tcase_run_tfun_nofork.isra.0+0xd8>
 4bc:	bl	0 <check_get_clockid>
 4c0:	add	x1, sp, #0x50
 4c4:	bl	0 <clock_gettime>
 4c8:	ldr	x0, [sp, #40]
 4cc:	mov	w1, #0x2                   	// #2
 4d0:	ldr	x0, [x0, #56]
 4d4:	bl	30 <srunner_run_teardown>
 4d8:	ldr	x0, [sp, #88]
 4dc:	mov	x3, #0x3e8                 	// #1000
 4e0:	mov	x1, #0xfffffffffffffc18    	// #-1000
 4e4:	ldr	x2, [sp, #48]
 4e8:	sdiv	x0, x0, x3
 4ec:	ldr	x3, [sp, #72]
 4f0:	ldr	x4, [x2]
 4f4:	sdiv	x3, x3, x1
 4f8:	ldr	w2, [sp, #60]
 4fc:	ldr	x1, [sp, #80]
 500:	add	w0, w0, w3
 504:	ldr	x3, [sp, #64]
 508:	sub	x1, x1, x3
 50c:	mov	w3, #0x4240                	// #16960
 510:	movk	w3, #0xf, lsl #16
 514:	madd	w3, w3, w1, w0
 518:	ldr	x0, [sp, #40]
 51c:	ldr	x1, [x4]
 520:	ldr	x0, [x0]
 524:	bl	284 <receive_result_info_nofork>
 528:	ldr	x19, [sp, #16]
 52c:	ldp	x29, x30, [sp], #96
 530:	ret
 534:	ldr	x0, [sp, #48]
 538:	ldr	x0, [x0]
 53c:	ldr	w2, [x0, #24]
 540:	ldr	x1, [x0, #16]
 544:	ldr	x0, [x0]
 548:	bl	0 <tcase_fn_start>
 54c:	ldr	x0, [sp, #48]
 550:	ldr	x0, [x0]
 554:	ldr	x1, [x0, #8]
 558:	ldr	w0, [sp, #60]
 55c:	blr	x1
 560:	b	4bc <tcase_run_tfun_nofork.isra.0+0x60>

0000000000000564 <srunner_set_fork_status>:
 564:	str	w1, [x0, #56]
 568:	ret

000000000000056c <srunner_run_tagged>:
 56c:	stp	x29, x30, [sp, #-272]!
 570:	mov	x29, sp
 574:	stp	x19, x20, [sp, #16]
 578:	mov	w19, w5
 57c:	stp	x21, x22, [sp, #32]
 580:	mov	x21, x0
 584:	stp	x23, x24, [sp, #48]
 588:	stp	x25, x26, [sp, #64]
 58c:	stp	x27, x28, [sp, #80]
 590:	stp	x1, x3, [sp, #120]
 594:	str	x4, [sp, #136]
 598:	cbnz	x2, 61c <srunner_run_tagged+0xb0>
 59c:	adrp	x0, 0 <waserror>
 5a0:	add	x0, x0, #0x0
 5a4:	bl	0 <getenv>
 5a8:	mov	x24, x0
 5ac:	ldr	x0, [sp, #120]
 5b0:	cbnz	x0, 5c4 <srunner_run_tagged+0x58>
 5b4:	adrp	x0, 0 <waserror>
 5b8:	add	x0, x0, #0x0
 5bc:	bl	0 <getenv>
 5c0:	str	x0, [sp, #120]
 5c4:	ldr	x0, [sp, #128]
 5c8:	cbnz	x0, 5dc <srunner_run_tagged+0x70>
 5cc:	adrp	x0, 0 <waserror>
 5d0:	add	x0, x0, #0x0
 5d4:	bl	0 <getenv>
 5d8:	str	x0, [sp, #128]
 5dc:	ldr	x0, [sp, #136]
 5e0:	cbnz	x0, 5f4 <srunner_run_tagged+0x88>
 5e4:	adrp	x0, 0 <waserror>
 5e8:	add	x0, x0, #0x0
 5ec:	bl	0 <getenv>
 5f0:	str	x0, [sp, #136]
 5f4:	cbz	x21, 780 <srunner_run_tagged+0x214>
 5f8:	cmp	w19, #0x4
 5fc:	b.ls	624 <srunner_run_tagged+0xb8>  // b.plast
 600:	adrp	x1, 0 <waserror>
 604:	adrp	x0, 0 <waserror>
 608:	mov	w3, w19
 60c:	add	x1, x1, #0x0
 610:	add	x0, x0, #0x0
 614:	mov	w2, #0x31e                 	// #798
 618:	bl	0 <eprintf>
 61c:	mov	x24, x2
 620:	b	5ac <srunner_run_tagged+0x40>
 624:	adrp	x20, 0 <waserror>
 628:	add	x20, x20, #0x0
 62c:	add	x23, x20, #0x138
 630:	mov	x2, #0x90                  	// #144
 634:	mov	w1, #0x0                   	// #0
 638:	add	x0, x20, #0x140
 63c:	bl	0 <memset>
 640:	adrp	x22, 0 <waserror>
 644:	mov	x1, x23
 648:	add	x22, x22, #0x0
 64c:	add	x2, x20, #0x1d0
 650:	mov	w0, #0xe                   	// #14
 654:	str	x22, [x20, #312]
 658:	bl	0 <sigaction>
 65c:	add	x23, x20, #0x268
 660:	mov	x2, #0x90                  	// #144
 664:	mov	w1, #0x0                   	// #0
 668:	add	x0, x20, #0x270
 66c:	bl	0 <memset>
 670:	str	x22, [x20, #616]
 674:	mov	x1, x23
 678:	add	x2, x20, #0x8
 67c:	mov	w0, #0x2                   	// #2
 680:	bl	0 <sigaction>
 684:	mov	x2, #0x90                  	// #144
 688:	mov	w1, #0x0                   	// #0
 68c:	add	x23, x20, #0x300
 690:	add	x0, x20, #0x308
 694:	bl	0 <memset>
 698:	str	x22, [x20, #768]
 69c:	add	x2, x20, #0xa0
 6a0:	mov	x1, x23
 6a4:	mov	w0, #0xf                   	// #15
 6a8:	bl	0 <sigaction>
 6ac:	mov	x0, x21
 6b0:	bl	410 <srunner_fork_status>
 6b4:	bl	0 <set_fork_status>
 6b8:	bl	0 <setup_messaging>
 6bc:	mov	w1, w19
 6c0:	mov	x0, x21
 6c4:	bl	0 <srunner_init_logging>
 6c8:	mov	x0, x21
 6cc:	bl	0 <log_srunner_start>
 6d0:	ldr	x0, [x21]
 6d4:	str	x0, [sp, #104]
 6d8:	ldr	x0, [sp, #128]
 6dc:	bl	0 <tag_string_to_list>
 6e0:	str	x0, [sp, #144]
 6e4:	ldr	x0, [sp, #136]
 6e8:	bl	0 <tag_string_to_list>
 6ec:	str	x0, [sp, #152]
 6f0:	ldr	x0, [sp, #104]
 6f4:	bl	0 <check_list_front>
 6f8:	ldr	x0, [sp, #104]
 6fc:	bl	0 <check_list_at_end>
 700:	cbz	w0, 79c <srunner_run_tagged+0x230>
 704:	ldr	x0, [sp, #144]
 708:	adrp	x19, 0 <free>
 70c:	add	x19, x19, #0x0
 710:	mov	x1, x19
 714:	bl	0 <check_list_apply>
 718:	ldr	x0, [sp, #152]
 71c:	mov	x1, x19
 720:	bl	0 <check_list_apply>
 724:	ldr	x0, [sp, #144]
 728:	bl	0 <check_list_free>
 72c:	ldr	x0, [sp, #152]
 730:	bl	0 <check_list_free>
 734:	mov	x0, x21
 738:	bl	0 <log_srunner_end>
 73c:	mov	x0, x21
 740:	bl	0 <srunner_end_logging>
 744:	bl	0 <teardown_messaging>
 748:	mov	w0, #0x1                   	// #1
 74c:	bl	0 <set_fork_status>
 750:	add	x1, x20, #0x1d0
 754:	mov	x2, #0x0                   	// #0
 758:	mov	w0, #0xe                   	// #14
 75c:	bl	0 <sigaction>
 760:	add	x1, x20, #0x8
 764:	mov	x2, #0x0                   	// #0
 768:	mov	w0, #0x2                   	// #2
 76c:	bl	0 <sigaction>
 770:	add	x1, x20, #0xa0
 774:	mov	x2, #0x0                   	// #0
 778:	mov	w0, #0xf                   	// #15
 77c:	bl	0 <sigaction>
 780:	ldp	x19, x20, [sp, #16]
 784:	ldp	x21, x22, [sp, #32]
 788:	ldp	x23, x24, [sp, #48]
 78c:	ldp	x25, x26, [sp, #64]
 790:	ldp	x27, x28, [sp, #80]
 794:	ldp	x29, x30, [sp], #272
 798:	ret
 79c:	ldr	x0, [sp, #104]
 7a0:	bl	0 <check_list_val>
 7a4:	mov	x25, x0
 7a8:	ldr	x0, [sp, #120]
 7ac:	cbz	x0, 7bc <srunner_run_tagged+0x250>
 7b0:	ldr	x1, [x25]
 7b4:	bl	0 <strcmp>
 7b8:	cbnz	w0, 804 <srunner_run_tagged+0x298>
 7bc:	cbnz	x24, 7f4 <srunner_run_tagged+0x288>
 7c0:	mov	x0, x21
 7c4:	mov	x1, x25
 7c8:	bl	0 <log_suite_start>
 7cc:	ldr	x0, [x25, #8]
 7d0:	str	x0, [sp, #112]
 7d4:	bl	0 <check_list_front>
 7d8:	ldr	x0, [sp, #112]
 7dc:	bl	0 <check_list_at_end>
 7e0:	cbz	w0, 810 <srunner_run_tagged+0x2a4>
 7e4:	mov	x1, x25
 7e8:	mov	x0, x21
 7ec:	bl	0 <log_suite_end>
 7f0:	b	804 <srunner_run_tagged+0x298>
 7f4:	mov	x1, x24
 7f8:	mov	x0, x25
 7fc:	bl	0 <suite_tcase>
 800:	cbnz	w0, 7c0 <srunner_run_tagged+0x254>
 804:	ldr	x0, [sp, #104]
 808:	bl	0 <check_list_advance>
 80c:	b	6f8 <srunner_run_tagged+0x18c>
 810:	ldr	x0, [sp, #112]
 814:	bl	0 <check_list_val>
 818:	mov	x22, x0
 81c:	cbz	x24, 830 <srunner_run_tagged+0x2c4>
 820:	ldr	x1, [x22]
 824:	mov	x0, x24
 828:	bl	0 <strcmp>
 82c:	cbnz	w0, 8b8 <srunner_run_tagged+0x34c>
 830:	ldr	x0, [sp, #128]
 834:	cbnz	x0, 8a8 <srunner_run_tagged+0x33c>
 838:	ldr	x0, [sp, #136]
 83c:	cbnz	x0, 8c4 <srunner_run_tagged+0x358>
 840:	mov	w0, #0x2                   	// #2
 844:	bl	0 <set_fork_status>
 848:	ldr	x2, [x22]
 84c:	adrp	x3, 0 <waserror>
 850:	ldr	x0, [x22, #32]
 854:	add	x3, x3, #0x0
 858:	mov	w1, #0x2                   	// #2
 85c:	bl	31c <srunner_run_setup>
 860:	mov	x19, x0
 864:	mov	x0, x21
 868:	bl	410 <srunner_fork_status>
 86c:	bl	0 <set_fork_status>
 870:	cbnz	x19, 8d8 <srunner_run_tagged+0x36c>
 874:	ldr	x28, [x22, #24]
 878:	mov	x0, x28
 87c:	bl	0 <check_list_front>
 880:	mov	x0, x28
 884:	bl	0 <check_list_at_end>
 888:	cbz	w0, 8f4 <srunner_run_tagged+0x388>
 88c:	ldr	x19, [x22, #40]
 890:	mov	x0, x21
 894:	bl	410 <srunner_fork_status>
 898:	mov	w1, w0
 89c:	mov	x0, x19
 8a0:	bl	30 <srunner_run_teardown>
 8a4:	b	8b8 <srunner_run_tagged+0x34c>
 8a8:	ldr	x1, [sp, #144]
 8ac:	mov	x0, x22
 8b0:	bl	0 <tcase_matching_tag>
 8b4:	cbnz	w0, 838 <srunner_run_tagged+0x2cc>
 8b8:	ldr	x0, [sp, #112]
 8bc:	bl	0 <check_list_advance>
 8c0:	b	7d8 <srunner_run_tagged+0x26c>
 8c4:	ldr	x1, [sp, #152]
 8c8:	mov	x0, x22
 8cc:	bl	0 <tcase_matching_tag>
 8d0:	cbz	w0, 840 <srunner_run_tagged+0x2d4>
 8d4:	b	8b8 <srunner_run_tagged+0x34c>
 8d8:	ldr	w0, [x19]
 8dc:	cmp	w0, #0x1
 8e0:	b.eq	874 <srunner_run_tagged+0x308>  // b.none
 8e4:	mov	x1, x19
 8e8:	mov	x0, x21
 8ec:	bl	a8 <srunner_add_failure>
 8f0:	b	8b8 <srunner_run_tagged+0x34c>
 8f4:	mov	x0, x28
 8f8:	bl	0 <check_list_val>
 8fc:	mov	x23, x0
 900:	adrp	x0, 0 <waserror>
 904:	add	x0, x0, #0x0
 908:	str	x0, [sp, #168]
 90c:	ldr	w26, [x23, #8]
 910:	ldr	w0, [x23, #12]
 914:	cmp	w26, w0
 918:	b.lt	928 <srunner_run_tagged+0x3bc>  // b.tstop
 91c:	mov	x0, x28
 920:	bl	0 <check_list_advance>
 924:	b	880 <srunner_run_tagged+0x314>
 928:	mov	x2, x23
 92c:	mov	x1, x22
 930:	mov	x0, x21
 934:	bl	0 <log_test_start>
 938:	mov	x0, x21
 93c:	bl	410 <srunner_fork_status>
 940:	cmp	w0, #0x1
 944:	b.eq	968 <srunner_run_tagged+0x3fc>  // b.none
 948:	cmp	w0, #0x2
 94c:	b.eq	d04 <srunner_run_tagged+0x798>  // b.none
 950:	adrp	x1, 0 <waserror>
 954:	adrp	x0, 0 <waserror>
 958:	add	x1, x1, #0x0
 95c:	add	x0, x0, #0x0
 960:	mov	w2, #0x10b                 	// #267
 964:	b	998 <srunner_run_tagged+0x42c>
 968:	str	wzr, [sp, #196]
 96c:	stp	xzr, xzr, [sp, #208]
 970:	stp	xzr, xzr, [sp, #224]
 974:	bl	0 <fork>
 978:	mov	w19, w0
 97c:	cmn	w0, #0x1
 980:	b.ne	99c <srunner_run_tagged+0x430>  // b.any
 984:	adrp	x1, 0 <waserror>
 988:	adrp	x0, 0 <waserror>
 98c:	add	x1, x1, #0x0
 990:	add	x0, x0, #0x0
 994:	mov	w2, #0x1e5                 	// #485
 998:	bl	0 <eprintf>
 99c:	cbnz	w0, a60 <srunner_run_tagged+0x4f4>
 9a0:	mov	w1, #0x0                   	// #0
 9a4:	bl	0 <setpgid>
 9a8:	bl	0 <getpgrp>
 9ac:	str	w0, [x20, #4]
 9b0:	mov	x0, x21
 9b4:	ldr	x19, [x22, #48]
 9b8:	bl	410 <srunner_fork_status>
 9bc:	ldr	x2, [x22]
 9c0:	mov	w1, w0
 9c4:	adrp	x3, 0 <waserror>
 9c8:	add	x3, x3, #0x0
 9cc:	mov	x0, x19
 9d0:	bl	31c <srunner_run_setup>
 9d4:	bl	0 <free>
 9d8:	bl	0 <check_get_clockid>
 9dc:	add	x1, sp, #0xd0
 9e0:	bl	0 <clock_gettime>
 9e4:	ldr	x0, [x23]
 9e8:	ldr	w2, [x0, #24]
 9ec:	ldr	x1, [x0, #16]
 9f0:	ldr	x0, [x0]
 9f4:	bl	0 <tcase_fn_start>
 9f8:	ldr	x0, [x23]
 9fc:	ldr	x1, [x0, #8]
 a00:	mov	w0, w26
 a04:	blr	x1
 a08:	bl	0 <check_get_clockid>
 a0c:	add	x1, sp, #0xe0
 a10:	bl	0 <clock_gettime>
 a14:	ldr	x0, [x22, #56]
 a18:	mov	w1, #0x2                   	// #2
 a1c:	bl	30 <srunner_run_teardown>
 a20:	ldr	x1, [sp, #232]
 a24:	mov	x0, #0x3e8                 	// #1000
 a28:	mov	x2, #0xfffffffffffffc18    	// #-1000
 a2c:	sdiv	x1, x1, x0
 a30:	ldr	x0, [sp, #216]
 a34:	sdiv	x0, x0, x2
 a38:	ldr	x2, [sp, #208]
 a3c:	add	w1, w1, w0
 a40:	ldr	x0, [sp, #224]
 a44:	sub	x0, x0, x2
 a48:	mov	w2, #0x4240                	// #16960
 a4c:	movk	w2, #0xf, lsl #16
 a50:	madd	w0, w2, w0, w1
 a54:	bl	0 <send_duration_info>
 a58:	mov	w0, #0x0                   	// #0
 a5c:	bl	0 <exit>
 a60:	stp	wzr, w0, [x20]
 a64:	bl	0 <check_get_clockid>
 a68:	add	x2, sp, #0xc8
 a6c:	mov	x1, #0x0                   	// #0
 a70:	bl	0 <timer_create>
 a74:	cbnz	w0, cec <srunner_run_tagged+0x780>
 a78:	ldp	x0, x1, [x22, #8]
 a7c:	stp	x0, x1, [sp, #256]
 a80:	add	x2, sp, #0xf0
 a84:	ldr	x0, [sp, #200]
 a88:	mov	x3, #0x0                   	// #0
 a8c:	mov	w1, #0x0                   	// #0
 a90:	stp	xzr, xzr, [sp, #240]
 a94:	bl	0 <timer_settime>
 a98:	cbnz	w0, b24 <srunner_run_tagged+0x5b8>
 a9c:	add	x1, sp, #0xc4
 aa0:	mov	w0, w19
 aa4:	mov	w2, #0x0                   	// #0
 aa8:	bl	0 <waitpid>
 aac:	cmn	w0, #0x1
 ab0:	b.eq	a9c <srunner_run_tagged+0x530>  // b.none
 ab4:	ldr	x0, [sp, #200]
 ab8:	bl	0 <timer_delete>
 abc:	mov	w0, w19
 ac0:	mov	w1, #0x9                   	// #9
 ac4:	bl	0 <killpg>
 ac8:	ldr	w3, [sp, #196]
 acc:	ldrsb	w4, [x23, #20]
 ad0:	ldr	w1, [x23, #16]
 ad4:	ldr	x5, [x22]
 ad8:	str	w3, [sp, #160]
 adc:	ldr	x0, [x23]
 ae0:	stp	w1, w4, [sp, #176]
 ae4:	str	x5, [sp, #184]
 ae8:	ldr	x27, [x0]
 aec:	mov	w0, w3
 af0:	bl	0 <waserror>
 af4:	bl	0 <receive_test_result>
 af8:	mov	x19, x0
 afc:	ldr	w3, [sp, #160]
 b00:	ldp	w1, w4, [sp, #176]
 b04:	ldr	x5, [sp, #184]
 b08:	cbnz	x0, b3c <srunner_run_tagged+0x5d0>
 b0c:	adrp	x1, 0 <waserror>
 b10:	adrp	x0, 0 <waserror>
 b14:	add	x1, x1, #0x0
 b18:	add	x0, x0, #0x0
 b1c:	mov	w2, #0x22c                 	// #556
 b20:	b	998 <srunner_run_tagged+0x42c>
 b24:	adrp	x1, 0 <waserror>
 b28:	adrp	x0, 0 <waserror>
 b2c:	add	x1, x1, #0x0
 b30:	add	x0, x0, #0x0
 b34:	mov	w2, #0x210                 	// #528
 b38:	b	998 <srunner_run_tagged+0x42c>
 b3c:	stp	x5, x27, [x0, #32]
 b40:	and	w27, w3, #0x7f
 b44:	str	w26, [x0, #20]
 b48:	add	w0, w27, #0x1
 b4c:	sbfx	x0, x0, #1, #7
 b50:	cmp	w0, #0x0
 b54:	b.le	c30 <srunner_run_tagged+0x6c4>
 b58:	cmp	w1, w27
 b5c:	ldr	x0, [x19, #48]
 b60:	b.ne	bcc <srunner_run_tagged+0x660>  // b.any
 b64:	ldr	w2, [x20]
 b68:	cbz	w2, b90 <srunner_run_tagged+0x624>
 b6c:	mov	w2, #0x3                   	// #3
 b70:	str	w2, [x19]
 b74:	cbz	x0, b84 <srunner_run_tagged+0x618>
 b78:	str	w1, [sp, #160]
 b7c:	bl	0 <free>
 b80:	ldr	w1, [sp, #160]
 b84:	mov	w0, w27
 b88:	bl	110 <signal_error_msg>
 b8c:	b	bac <srunner_run_tagged+0x640>
 b90:	mov	w1, #0x1                   	// #1
 b94:	str	w1, [x19]
 b98:	cbz	x0, ba0 <srunner_run_tagged+0x634>
 b9c:	bl	0 <free>
 ba0:	adrp	x0, 0 <waserror>
 ba4:	add	x0, x0, #0x0
 ba8:	bl	0 <strdup>
 bac:	str	x0, [x19, #48]
 bb0:	mov	x1, x19
 bb4:	mov	x0, x21
 bb8:	bl	a8 <srunner_add_failure>
 bbc:	mov	x1, x19
 bc0:	mov	x0, x21
 bc4:	bl	0 <log_test_end>
 bc8:	b	d20 <srunner_run_tagged+0x7b4>
 bcc:	mov	w2, #0x3                   	// #3
 bd0:	str	w2, [x19]
 bd4:	cbnz	w1, b74 <srunner_run_tagged+0x608>
 bd8:	cbz	x0, be0 <srunner_run_tagged+0x674>
 bdc:	bl	0 <free>
 be0:	mov	x0, #0x64                  	// #100
 be4:	bl	0 <emalloc>
 be8:	ldr	w1, [x20]
 bec:	str	x0, [sp, #160]
 bf0:	cbz	w1, c08 <srunner_run_tagged+0x69c>
 bf4:	adrp	x1, 0 <waserror>
 bf8:	add	x1, x1, #0x0
 bfc:	bl	0 <strcpy>
 c00:	ldr	x0, [sp, #160]
 c04:	b	bac <srunner_run_tagged+0x640>
 c08:	mov	w0, w27
 c0c:	bl	0 <strsignal>
 c10:	mov	x4, x0
 c14:	mov	w3, w27
 c18:	ldr	x0, [sp, #160]
 c1c:	adrp	x2, 0 <waserror>
 c20:	mov	x1, #0x64                  	// #100
 c24:	add	x2, x2, #0x0
 c28:	bl	0 <snprintf>
 c2c:	b	c00 <srunner_run_tagged+0x694>
 c30:	sbfx	x3, x3, #8, #8
 c34:	cbnz	w1, ca0 <srunner_run_tagged+0x734>
 c38:	cmp	w27, #0x0
 c3c:	cset	w0, eq  // eq = none
 c40:	cmp	w0, #0x0
 c44:	ccmp	w4, w3, #0x0, ne  // ne = any
 c48:	b.ne	c5c <srunner_run_tagged+0x6f0>  // b.any
 c4c:	mov	w0, #0x1                   	// #1
 c50:	str	w0, [x19]
 c54:	ldr	x0, [x19, #48]
 c58:	b	b98 <srunner_run_tagged+0x62c>
 c5c:	cmp	w0, #0x0
 c60:	ccmp	w4, w3, #0x4, ne  // ne = any
 c64:	b.eq	bb0 <srunner_run_tagged+0x644>  // b.none
 c68:	ldr	x0, [x19, #48]
 c6c:	cbnz	x0, ce0 <srunner_run_tagged+0x774>
 c70:	mov	w0, #0x3                   	// #3
 c74:	str	w0, [x19]
 c78:	mov	x0, #0x64                  	// #100
 c7c:	str	w3, [sp, #160]
 c80:	bl	0 <emalloc>
 c84:	mov	x27, x0
 c88:	ldr	w3, [sp, #160]
 c8c:	mov	x1, #0x64                  	// #100
 c90:	ldr	x2, [sp, #168]
 c94:	bl	0 <snprintf>
 c98:	str	x27, [x19, #48]
 c9c:	b	bb0 <srunner_run_tagged+0x644>
 ca0:	cbnz	w27, bb0 <srunner_run_tagged+0x644>
 ca4:	ldr	x0, [x19, #48]
 ca8:	cbz	x0, cb8 <srunner_run_tagged+0x74c>
 cac:	str	w3, [sp, #160]
 cb0:	bl	0 <free>
 cb4:	ldr	w3, [sp, #160]
 cb8:	mov	x0, #0x64                  	// #100
 cbc:	str	w3, [sp, #176]
 cc0:	bl	0 <emalloc>
 cc4:	str	x0, [sp, #160]
 cc8:	ldr	w3, [sp, #176]
 ccc:	mov	x1, #0x64                  	// #100
 cd0:	ldr	x2, [sp, #168]
 cd4:	bl	0 <snprintf>
 cd8:	ldr	x4, [sp, #160]
 cdc:	str	x4, [x19, #48]
 ce0:	mov	w0, #0x2                   	// #2
 ce4:	str	w0, [x19]
 ce8:	b	bb0 <srunner_run_tagged+0x644>
 cec:	adrp	x1, 0 <waserror>
 cf0:	adrp	x0, 0 <waserror>
 cf4:	add	x1, x1, #0x0
 cf8:	add	x0, x0, #0x0
 cfc:	mov	w2, #0x218                 	// #536
 d00:	b	998 <srunner_run_tagged+0x42c>
 d04:	mov	w3, w26
 d08:	mov	x2, x23
 d0c:	mov	x1, x22
 d10:	mov	x0, x21
 d14:	bl	45c <tcase_run_tfun_nofork.isra.0>
 d18:	mov	x19, x0
 d1c:	cbnz	x0, bb0 <srunner_run_tagged+0x644>
 d20:	add	w26, w26, #0x1
 d24:	b	910 <srunner_run_tagged+0x3a4>

0000000000000d28 <srunner_run>:
 d28:	mov	w5, w3
 d2c:	mov	x4, #0x0                   	// #0
 d30:	mov	x3, #0x0                   	// #0
 d34:	b	56c <srunner_run_tagged>

0000000000000d38 <srunner_run_all>:
 d38:	mov	w3, w1
 d3c:	mov	x2, #0x0                   	// #0
 d40:	mov	x1, #0x0                   	// #0
 d44:	b	d28 <srunner_run>

0000000000000d48 <check_fork>:
 d48:	stp	x29, x30, [sp, #-32]!
 d4c:	mov	x29, sp
 d50:	str	x19, [sp, #16]
 d54:	bl	0 <fork>
 d58:	mov	w19, w0
 d5c:	tbnz	w0, #31, d6c <check_fork+0x24>
 d60:	adrp	x1, 0 <waserror>
 d64:	ldr	w1, [x1]
 d68:	bl	0 <setpgid>
 d6c:	mov	w0, w19
 d70:	ldr	x19, [sp, #16]
 d74:	ldp	x29, x30, [sp], #32
 d78:	ret

0000000000000d7c <check_waitpid_and_exit>:
 d7c:	stp	x29, x30, [sp, #-48]!
 d80:	cmp	w0, #0x0
 d84:	mov	x29, sp
 d88:	str	x19, [sp, #16]
 d8c:	b.le	dc4 <check_waitpid_and_exit+0x48>
 d90:	mov	w19, w0
 d94:	add	x1, sp, #0x2c
 d98:	mov	w0, w19
 d9c:	mov	w2, #0x0                   	// #0
 da0:	bl	0 <waitpid>
 da4:	cmn	w0, #0x1
 da8:	b.eq	d94 <check_waitpid_and_exit+0x18>  // b.none
 dac:	ldr	w0, [sp, #44]
 db0:	mov	w1, #0x0                   	// #0
 db4:	bl	0 <waserror>
 db8:	cbz	w0, dc4 <check_waitpid_and_exit+0x48>
 dbc:	mov	w0, #0x1                   	// #1
 dc0:	bl	0 <exit>
 dc4:	mov	w0, #0x0                   	// #0
 dc8:	b	dc0 <check_waitpid_and_exit+0x44>

check_str.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ck_strdup_printf>:
   0:	stp	x29, x30, [sp, #-320]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, #0x64                  	// #100
  10:	stp	x21, x22, [sp, #32]
  14:	mov	x21, x0
  18:	add	x22, sp, #0x100
  1c:	mov	x0, #0x64                  	// #100
  20:	stp	x23, x24, [sp, #48]
  24:	mov	w23, #0xffffffc8            	// #-56
  28:	str	q0, [sp, #128]
  2c:	mov	w24, #0xffffff80            	// #-128
  30:	str	q1, [sp, #144]
  34:	str	q2, [sp, #160]
  38:	str	q3, [sp, #176]
  3c:	str	q4, [sp, #192]
  40:	str	q5, [sp, #208]
  44:	str	q6, [sp, #224]
  48:	str	q7, [sp, #240]
  4c:	stp	x1, x2, [sp, #264]
  50:	stp	x3, x4, [sp, #280]
  54:	stp	x5, x6, [sp, #296]
  58:	str	x7, [sp, #312]
  5c:	bl	0 <emalloc>
  60:	mov	x19, x0
  64:	add	x0, sp, #0x140
  68:	stp	x0, x0, [sp, #96]
  6c:	add	x3, sp, #0x40
  70:	str	x22, [sp, #112]
  74:	mov	x2, x21
  78:	stp	w23, w24, [sp, #120]
  7c:	ldp	x0, x1, [sp, #96]
  80:	stp	x0, x1, [sp, #64]
  84:	ldp	x0, x1, [sp, #112]
  88:	stp	x0, x1, [sp, #80]
  8c:	mov	x1, x20
  90:	mov	x0, x19
  94:	bl	0 <vsnprintf>
  98:	tbnz	w0, #31, c0 <ck_strdup_printf+0xc0>
  9c:	cmp	w0, w20
  a0:	b.lt	c8 <ck_strdup_printf+0xc8>  // b.tstop
  a4:	sxtw	x1, w0
  a8:	add	x20, x1, #0x1
  ac:	mov	x0, x19
  b0:	mov	x1, x20
  b4:	bl	0 <erealloc>
  b8:	mov	x19, x0
  bc:	b	64 <ck_strdup_printf+0x64>
  c0:	lsl	x20, x20, #1
  c4:	b	ac <ck_strdup_printf+0xac>
  c8:	mov	x0, x19
  cc:	ldp	x19, x20, [sp, #16]
  d0:	ldp	x21, x22, [sp, #32]
  d4:	ldp	x23, x24, [sp, #48]
  d8:	ldp	x29, x30, [sp], #320
  dc:	ret

00000000000000e0 <tr_str>:
  e0:	sub	sp, sp, #0x20
  e4:	adrp	x1, 0 <ck_strdup_printf>
  e8:	adrp	x7, 0 <ck_strdup_printf>
  ec:	add	x1, x1, #0x0
  f0:	add	x7, x7, #0x0
  f4:	stp	x29, x30, [sp, #16]
  f8:	add	x29, sp, #0x10
  fc:	ldp	w4, w3, [x0]
 100:	ldr	w2, [x0, #16]
 104:	cmp	w4, #0x3
 108:	csel	x7, x7, x1, eq  // eq = none
 10c:	cmp	w3, #0x2
 110:	ldr	x1, [x0, #8]
 114:	b.ne	160 <tr_str+0x80>  // b.any
 118:	cmp	w4, #0x1
 11c:	b.eq	16c <tr_str+0x8c>  // b.none
 120:	cmp	w4, #0x2
 124:	b.eq	178 <tr_str+0x98>  // b.none
 128:	cmp	w4, #0x3
 12c:	adrp	x3, 0 <ck_strdup_printf>
 130:	add	x3, x3, #0x0
 134:	csel	x3, x3, xzr, eq  // eq = none
 138:	ldr	x4, [x0, #48]
 13c:	str	x4, [sp]
 140:	ldp	x4, x5, [x0, #32]
 144:	ldr	w6, [x0, #20]
 148:	adrp	x0, 0 <ck_strdup_printf>
 14c:	add	x0, x0, #0x0
 150:	bl	0 <ck_strdup_printf>
 154:	ldp	x29, x30, [sp, #16]
 158:	add	sp, sp, #0x20
 15c:	ret
 160:	adrp	x3, 0 <ck_strdup_printf>
 164:	add	x3, x3, #0x0
 168:	b	138 <tr_str+0x58>
 16c:	adrp	x3, 0 <ck_strdup_printf>
 170:	add	x3, x3, #0x0
 174:	b	138 <tr_str+0x58>
 178:	adrp	x3, 0 <ck_strdup_printf>
 17c:	add	x3, x3, #0x0
 180:	b	138 <tr_str+0x58>

0000000000000184 <tr_short_str>:
 184:	ldr	w2, [x0]
 188:	adrp	x1, 0 <ck_strdup_printf>
 18c:	adrp	x3, 0 <ck_strdup_printf>
 190:	add	x1, x1, #0x0
 194:	cmp	w2, #0x3
 198:	add	x3, x3, #0x0
 19c:	ldr	w2, [x0, #16]
 1a0:	csel	x3, x3, x1, eq  // eq = none
 1a4:	ldr	x1, [x0, #8]
 1a8:	ldr	x4, [x0, #48]
 1ac:	adrp	x0, 0 <ck_strdup_printf>
 1b0:	add	x0, x0, #0x0
 1b4:	b	0 <ck_strdup_printf>

00000000000001b8 <sr_stat_str>:
 1b8:	ldr	x2, [x0, #8]
 1bc:	ldp	w3, w4, [x2, #4]
 1c0:	orr	w0, w3, w4
 1c4:	cbz	w0, 204 <sr_stat_str+0x4c>
 1c8:	ldr	w1, [x2]
 1cc:	cbz	w1, 1f4 <sr_stat_str+0x3c>
 1d0:	add	w0, w3, w4
 1d4:	scvtf	s1, w1
 1d8:	sub	w0, w1, w0
 1dc:	scvtf	s0, w0
 1e0:	mov	w0, #0x42c80000            	// #1120403456
 1e4:	fdiv	s0, s0, s1
 1e8:	fmov	s1, w0
 1ec:	fmul	s0, s0, s1
 1f0:	fcvtzs	w1, s0
 1f4:	ldr	w2, [x2]
 1f8:	adrp	x0, 0 <ck_strdup_printf>
 1fc:	add	x0, x0, #0x0
 200:	b	0 <ck_strdup_printf>
 204:	mov	w1, #0x64                  	// #100
 208:	b	1f4 <sr_stat_str+0x3c>

fpclassify.o:     file format elf64-littleaarch64


libcompat.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ck_do_nothing>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x3, 0 <ck_do_nothing>
   8:	adrp	x1, 0 <ck_do_nothing>
   c:	mov	x29, sp
  10:	adrp	x0, 0 <ck_do_nothing>
  14:	add	x3, x3, #0x0
  18:	add	x1, x1, #0x0
  1c:	add	x0, x0, #0x0
  20:	mov	w2, #0x1a                  	// #26
  24:	bl	0 <__assert_fail>
