In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libgomp.a_gcc_-O3:

alloc.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_malloc>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <malloc>
  14:	cbz	x0, 24 <gomp_malloc+0x24>
  18:	ldr	x19, [sp, #16]
  1c:	ldp	x29, x30, [sp], #32
  20:	ret
  24:	adrp	x0, 0 <gomp_malloc>
  28:	mov	x1, x19
  2c:	add	x0, x0, #0x0
  30:	bl	0 <gomp_fatal>
  34:	nop

0000000000000038 <gomp_malloc_cleared>:
  38:	stp	x29, x30, [sp, #-32]!
  3c:	mov	x29, sp
  40:	str	x19, [sp, #16]
  44:	mov	x19, x0
  48:	mov	x1, x19
  4c:	mov	x0, #0x1                   	// #1
  50:	bl	0 <calloc>
  54:	cbz	x0, 64 <gomp_malloc_cleared+0x2c>
  58:	ldr	x19, [sp, #16]
  5c:	ldp	x29, x30, [sp], #32
  60:	ret
  64:	adrp	x0, 0 <gomp_malloc>
  68:	mov	x1, x19
  6c:	add	x0, x0, #0x0
  70:	bl	0 <gomp_fatal>
  74:	nop

0000000000000078 <gomp_realloc>:
  78:	stp	x29, x30, [sp, #-32]!
  7c:	mov	x29, sp
  80:	str	x19, [sp, #16]
  84:	mov	x19, x1
  88:	bl	0 <realloc>
  8c:	cbz	x0, 9c <gomp_realloc+0x24>
  90:	ldr	x19, [sp, #16]
  94:	ldp	x29, x30, [sp], #32
  98:	ret
  9c:	adrp	x0, 0 <gomp_malloc>
  a0:	mov	x1, x19
  a4:	add	x0, x0, #0x0
  a8:	bl	0 <gomp_fatal>
  ac:	nop

00000000000000b0 <gomp_aligned_alloc>:
  b0:	stp	x29, x30, [sp, #-32]!
  b4:	mov	x2, #0x8                   	// #8
  b8:	cmp	x0, x2
  bc:	mov	x29, sp
  c0:	csel	x0, x0, x2, cs  // cs = hs, nlast
  c4:	str	x19, [sp, #16]
  c8:	mov	x19, x1
  cc:	bl	0 <aligned_alloc>
  d0:	cbz	x0, e0 <gomp_aligned_alloc+0x30>
  d4:	ldr	x19, [sp, #16]
  d8:	ldp	x29, x30, [sp], #32
  dc:	ret
  e0:	adrp	x0, 0 <gomp_malloc>
  e4:	mov	x1, x19
  e8:	add	x0, x0, #0x0
  ec:	bl	0 <gomp_fatal>

00000000000000f0 <gomp_aligned_free>:
  f0:	b	0 <free>

atomic.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_atomic_start>:
   0:	adrp	x0, 0 <GOMP_atomic_start>
   4:	add	x0, x0, #0x0
   8:	mov	w2, #0x1                   	// #1
   c:	ldaxr	w1, [x0]
  10:	cbnz	w1, 1c <GOMP_atomic_start+0x1c>
  14:	stxr	w3, w2, [x0]
  18:	cbnz	w3, c <GOMP_atomic_start+0xc>
  1c:	cmp	w1, #0x0
  20:	b.ne	28 <GOMP_atomic_start+0x28>  // b.any
  24:	ret
  28:	b	0 <gomp_mutex_lock_slow>
  2c:	nop

0000000000000030 <GOMP_atomic_end>:
  30:	adrp	x0, 0 <GOMP_atomic_start>
  34:	add	x0, x0, #0x0
  38:	ldxr	w1, [x0]
  3c:	stlxr	w2, wzr, [x0]
  40:	cbnz	w2, 38 <GOMP_atomic_end+0x8>
  44:	tbnz	w1, #31, 4c <GOMP_atomic_end+0x1c>
  48:	ret
  4c:	b	0 <gomp_mutex_unlock_slow>

barrier.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_barrier>:
   0:	adrp	x0, 0 <gomp_tls_data>
   4:	ldr	x0, [x0]
   8:	mrs	x1, tpidr_el0
   c:	add	x0, x1, x0
  10:	ldr	x0, [x0, #16]
  14:	cbz	x0, 20 <GOMP_barrier+0x20>
  18:	add	x0, x0, #0x80
  1c:	b	0 <gomp_team_barrier_wait>
  20:	ret
  24:	nop

0000000000000028 <GOMP_barrier_cancel>:
  28:	adrp	x0, 0 <gomp_tls_data>
  2c:	ldr	x0, [x0]
  30:	mrs	x1, tpidr_el0
  34:	add	x0, x1, x0
  38:	ldr	x0, [x0, #16]
  3c:	add	x0, x0, #0x80
  40:	b	0 <gomp_team_barrier_wait_cancel>

critical.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_critical_start>:
   0:	dmb	ish
   4:	adrp	x0, 0 <GOMP_critical_start>
   8:	add	x0, x0, #0x0
   c:	mov	w2, #0x1                   	// #1
  10:	ldaxr	w1, [x0]
  14:	cbnz	w1, 20 <GOMP_critical_start+0x20>
  18:	stxr	w3, w2, [x0]
  1c:	cbnz	w3, 10 <GOMP_critical_start+0x10>
  20:	cmp	w1, #0x0
  24:	b.ne	2c <GOMP_critical_start+0x2c>  // b.any
  28:	ret
  2c:	b	0 <gomp_mutex_lock_slow>

0000000000000030 <GOMP_critical_end>:
  30:	adrp	x0, 0 <GOMP_critical_start>
  34:	add	x0, x0, #0x0
  38:	ldxr	w1, [x0]
  3c:	stlxr	w2, wzr, [x0]
  40:	cbnz	w2, 38 <GOMP_critical_end+0x8>
  44:	tbnz	w1, #31, 4c <GOMP_critical_end+0x1c>
  48:	ret
  4c:	b	0 <gomp_mutex_unlock_slow>

0000000000000050 <GOMP_critical_name_start>:
  50:	mov	x2, x0
  54:	mov	w3, #0x1                   	// #1
  58:	ldaxr	w1, [x2]
  5c:	cbnz	w1, 68 <GOMP_critical_name_start+0x18>
  60:	stxr	w4, w3, [x2]
  64:	cbnz	w4, 58 <GOMP_critical_name_start+0x8>
  68:	cmp	w1, #0x0
  6c:	b.ne	74 <GOMP_critical_name_start+0x24>  // b.any
  70:	ret
  74:	b	0 <gomp_mutex_lock_slow>

0000000000000078 <GOMP_critical_name_end>:
  78:	mov	x1, x0
  7c:	ldxr	w2, [x1]
  80:	stlxr	w3, wzr, [x1]
  84:	cbnz	w3, 7c <GOMP_critical_name_end+0x4>
  88:	tbnz	w2, #31, 90 <GOMP_critical_name_end+0x18>
  8c:	ret
  90:	b	0 <gomp_mutex_unlock_slow>

env.o:     file format elf64-littleaarch64


Disassembly of section .text.startup:

0000000000000000 <parse_boolean>:
       0:	stp	x29, x30, [sp, #-48]!
       4:	mov	x29, sp
       8:	stp	x21, x22, [sp, #32]
       c:	mov	x22, x1
      10:	mov	x21, x0
      14:	bl	0 <getenv>
      18:	cbz	x0, a8 <parse_boolean+0xa8>
      1c:	stp	x19, x20, [sp, #16]
      20:	mov	x19, x0
      24:	bl	0 <__ctype_b_loc>
      28:	ldr	x20, [x0]
      2c:	ldrb	w1, [x19]
      30:	ldrh	w0, [x20, x1, lsl #1]
      34:	tbz	w0, #13, 44 <parse_boolean+0x44>
      38:	ldrb	w0, [x19, #1]!
      3c:	ldrh	w2, [x20, x0, lsl #1]
      40:	tbnz	w2, #13, 38 <parse_boolean+0x38>
      44:	adrp	x1, 0 <parse_boolean>
      48:	mov	x0, x19
      4c:	add	x1, x1, #0x0
      50:	mov	x2, #0x4                   	// #4
      54:	bl	0 <strncasecmp>
      58:	cbz	w0, b4 <parse_boolean+0xb4>
      5c:	adrp	x1, 0 <parse_boolean>
      60:	mov	x0, x19
      64:	add	x1, x1, #0x0
      68:	mov	x2, #0x5                   	// #5
      6c:	bl	0 <strncasecmp>
      70:	cbnz	w0, e0 <parse_boolean+0xe0>
      74:	add	x19, x19, #0x5
      78:	strb	wzr, [x22]
      7c:	ldrb	w1, [x19]
      80:	ubfiz	x0, x1, #1, #8
      84:	ldrh	w0, [x20, x0]
      88:	tbz	w0, #13, a0 <parse_boolean+0xa0>
      8c:	nop
      90:	ldrb	w1, [x19, #1]!
      94:	ubfiz	x2, x1, #1, #8
      98:	ldrh	w2, [x20, x2]
      9c:	tbnz	w2, #13, 90 <parse_boolean+0x90>
      a0:	cbnz	w1, c4 <parse_boolean+0xc4>
      a4:	ldp	x19, x20, [sp, #16]
      a8:	ldp	x21, x22, [sp, #32]
      ac:	ldp	x29, x30, [sp], #48
      b0:	ret
      b4:	mov	w0, #0x1                   	// #1
      b8:	add	x19, x19, #0x4
      bc:	strb	w0, [x22]
      c0:	b	7c <parse_boolean+0x7c>
      c4:	mov	x1, x21
      c8:	adrp	x0, 0 <parse_boolean>
      cc:	ldp	x19, x20, [sp, #16]
      d0:	add	x0, x0, #0x0
      d4:	ldp	x21, x22, [sp, #32]
      d8:	ldp	x29, x30, [sp], #48
      dc:	b	0 <gomp_error>
      e0:	adrp	x19, 0 <parse_boolean>
      e4:	add	x19, x19, #0x0
      e8:	b	7c <parse_boolean+0x7c>
      ec:	nop

00000000000000f0 <parse_unsigned_long_1>:
      f0:	stp	x29, x30, [sp, #-80]!
      f4:	tst	w3, #0xff
      f8:	mov	x29, sp
      fc:	stp	x19, x20, [sp, #16]
     100:	mov	x20, x0
     104:	stp	x21, x22, [sp, #32]
     108:	mov	x21, x1
     10c:	and	w22, w2, #0xff
     110:	b.eq	17c <parse_unsigned_long_1+0x8c>  // b.none
     114:	bl	0 <secure_getenv>
     118:	mov	x19, x0
     11c:	cbz	x19, 188 <parse_unsigned_long_1+0x98>
     120:	stp	x23, x24, [sp, #48]
     124:	bl	0 <__ctype_b_loc>
     128:	mov	x23, x0
     12c:	ldrb	w2, [x19]
     130:	ldr	x4, [x23]
     134:	ubfiz	x0, x2, #1, #8
     138:	ldrh	w0, [x4, x0]
     13c:	tbz	w0, #13, 150 <parse_unsigned_long_1+0x60>
     140:	ldrb	w2, [x19, #1]!
     144:	ubfiz	x3, x2, #1, #8
     148:	ldrh	w3, [x4, x3]
     14c:	tbnz	w3, #13, 140 <parse_unsigned_long_1+0x50>
     150:	cbnz	w2, 190 <parse_unsigned_long_1+0xa0>
     154:	mov	x1, x20
     158:	adrp	x0, 0 <parse_boolean>
     15c:	add	x0, x0, #0x0
     160:	bl	0 <gomp_error>
     164:	ldp	x23, x24, [sp, #48]
     168:	mov	w0, #0x0                   	// #0
     16c:	ldp	x19, x20, [sp, #16]
     170:	ldp	x21, x22, [sp, #32]
     174:	ldp	x29, x30, [sp], #80
     178:	ret
     17c:	bl	0 <getenv>
     180:	mov	x19, x0
     184:	cbnz	x19, 120 <parse_unsigned_long_1+0x30>
     188:	mov	w0, #0x0                   	// #0
     18c:	b	16c <parse_unsigned_long_1+0x7c>
     190:	bl	0 <__errno_location>
     194:	mov	x24, x0
     198:	add	x1, sp, #0x48
     19c:	mov	x0, x19
     1a0:	mov	w2, #0xa                   	// #10
     1a4:	str	wzr, [x24]
     1a8:	bl	0 <strtoul>
     1ac:	mov	x5, x0
     1b0:	ldr	w1, [x24]
     1b4:	cbnz	w1, 154 <parse_unsigned_long_1+0x64>
     1b8:	neg	w22, w22
     1bc:	cmp	x0, w22, sxtw
     1c0:	b.le	154 <parse_unsigned_long_1+0x64>
     1c4:	ldr	x2, [sp, #72]
     1c8:	ldr	x4, [x23]
     1cc:	ldrb	w0, [x2]
     1d0:	ldrb	w1, [x2]
     1d4:	ldrh	w0, [x4, x0, lsl #1]
     1d8:	tbz	w0, #13, 1f4 <parse_unsigned_long_1+0x104>
     1dc:	add	x2, x2, #0x1
     1e0:	str	x2, [sp, #72]
     1e4:	ldrb	w1, [x2], #1
     1e8:	ubfiz	x3, x1, #1, #8
     1ec:	ldrh	w3, [x4, x3]
     1f0:	tbnz	w3, #13, 1e0 <parse_unsigned_long_1+0xf0>
     1f4:	cbnz	w1, 154 <parse_unsigned_long_1+0x64>
     1f8:	mov	w0, #0x1                   	// #1
     1fc:	ldp	x23, x24, [sp, #48]
     200:	str	x5, [x21]
     204:	b	16c <parse_unsigned_long_1+0x7c>

0000000000000208 <parse_one_place>:
     208:	stp	x29, x30, [sp, #-160]!
     20c:	mov	x29, sp
     210:	stp	x21, x22, [sp, #32]
     214:	adrp	x22, 8 <parse_boolean+0x8>
     218:	stp	x23, x24, [sp, #48]
     21c:	ldr	x24, [x22]
     220:	stp	x19, x20, [sp, #16]
     224:	ldr	x20, [x0]
     228:	stp	x1, x0, [sp, #104]
     22c:	stp	x2, x3, [sp, #120]
     230:	str	x20, [sp, #152]
     234:	cbz	x24, 244 <parse_one_place+0x3c>
     238:	adrp	x0, 8 <parse_boolean+0x8>
     23c:	ldr	x0, [x0]
     240:	ldr	x24, [x24, x0, lsl #3]
     244:	ldr	x0, [sp, #104]
     248:	strb	wzr, [x0]
     24c:	bl	0 <__ctype_b_loc>
     250:	mov	x19, x0
     254:	ldrb	w1, [x20]
     258:	ldr	x2, [x19]
     25c:	ubfiz	x0, x1, #1, #8
     260:	ldrh	w0, [x2, x0]
     264:	tbz	w0, #13, 288 <parse_one_place+0x80>
     268:	add	x0, x20, #0x1
     26c:	nop
     270:	str	x0, [sp, #152]
     274:	mov	x20, x0
     278:	ldrb	w1, [x0], #1
     27c:	ubfiz	x3, x1, #1, #8
     280:	ldrh	w3, [x2, x3]
     284:	tbnz	w3, #13, 270 <parse_one_place+0x68>
     288:	cmp	w1, #0x21
     28c:	b.eq	514 <parse_one_place+0x30c>  // b.none
     290:	cmp	w1, #0x7b
     294:	b.ne	3f4 <parse_one_place+0x1ec>  // b.any
     298:	add	x21, x20, #0x1
     29c:	stp	x25, x26, [sp, #64]
     2a0:	stp	x27, x28, [sp, #80]
     2a4:	str	x21, [sp, #152]
     2a8:	ldrb	w0, [x20, #1]
     2ac:	ldrh	w0, [x2, x0, lsl #1]
     2b0:	tbz	w0, #13, 2d0 <parse_one_place+0xc8>
     2b4:	add	x20, x20, #0x2
     2b8:	mov	x21, x20
     2bc:	str	x20, [sp, #152]
     2c0:	add	x20, x20, #0x1
     2c4:	ldrb	w0, [x21]
     2c8:	ldrh	w0, [x2, x0, lsl #1]
     2cc:	tbnz	w0, #13, 2b8 <parse_one_place+0xb0>
     2d0:	mov	w27, #0x0                   	// #0
     2d4:	mov	w23, #0x0                   	// #0
     2d8:	str	x21, [sp, #152]
     2dc:	bl	0 <__errno_location>
     2e0:	mov	x28, x0
     2e4:	mov	x0, x21
     2e8:	ldrb	w25, [x0]
     2ec:	cmp	w25, #0x21
     2f0:	cset	w20, eq  // eq = none
     2f4:	b.eq	390 <parse_one_place+0x188>  // b.none
     2f8:	str	wzr, [x28]
     2fc:	add	x1, sp, #0x98
     300:	mov	w2, #0xa                   	// #10
     304:	bl	0 <strtoul>
     308:	mov	x26, x0
     30c:	ldr	w1, [x28]
     310:	cbnz	w1, 3ec <parse_one_place+0x1e4>
     314:	ldr	x2, [sp, #152]
     318:	ldr	x5, [x19]
     31c:	ldrb	w4, [x2]
     320:	ubfiz	x0, x4, #1, #8
     324:	ldrh	w0, [x5, x0]
     328:	tbz	w0, #13, 348 <parse_one_place+0x140>
     32c:	add	x1, x2, #0x1
     330:	str	x1, [sp, #152]
     334:	mov	x2, x1
     338:	ldrb	w4, [x1], #1
     33c:	ubfiz	x3, x4, #1, #8
     340:	ldrh	w3, [x5, x3]
     344:	tbnz	w3, #13, 330 <parse_one_place+0x128>
     348:	mov	x3, #0x1                   	// #1
     34c:	cmp	w4, #0x3a
     350:	mov	x9, x3
     354:	b.eq	450 <parse_one_place+0x248>  // b.none
     358:	ldr	x1, [x22]
     35c:	cbz	x1, 368 <parse_one_place+0x160>
     360:	cmp	w20, w23
     364:	b.eq	40c <parse_one_place+0x204>  // b.none
     368:	cmp	w4, #0x7d
     36c:	b.eq	440 <parse_one_place+0x238>  // b.none
     370:	cmp	w4, #0x2c
     374:	b.ne	3ec <parse_one_place+0x1e4>  // b.any
     378:	add	x0, x2, #0x1
     37c:	str	x0, [sp, #152]
     380:	ldrb	w25, [x0]
     384:	cmp	w25, #0x21
     388:	cset	w20, eq  // eq = none
     38c:	b.ne	2f8 <parse_one_place+0xf0>  // b.any
     390:	add	x1, x0, #0x1
     394:	str	x1, [sp, #152]
     398:	ldr	x3, [x19]
     39c:	ldrb	w2, [x0, #1]
     3a0:	ldr	x4, [x22]
     3a4:	ldrh	w2, [x3, x2, lsl #1]
     3a8:	cmp	x4, #0x0
     3ac:	csinc	w27, w27, wzr, eq  // eq = none
     3b0:	tbz	w2, #13, 5ec <parse_one_place+0x3e4>
     3b4:	add	x1, x0, #0x2
     3b8:	mov	x0, x1
     3bc:	str	x1, [sp, #152]
     3c0:	add	x1, x1, #0x1
     3c4:	ldrb	w2, [x0]
     3c8:	ldrh	w2, [x3, x2, lsl #1]
     3cc:	tbnz	w2, #13, 3b8 <parse_one_place+0x1b0>
     3d0:	str	wzr, [x28]
     3d4:	add	x1, sp, #0x98
     3d8:	mov	w2, #0xa                   	// #10
     3dc:	bl	0 <strtoul>
     3e0:	mov	x26, x0
     3e4:	ldr	w1, [x28]
     3e8:	cbz	w1, 314 <parse_one_place+0x10c>
     3ec:	ldp	x25, x26, [sp, #64]
     3f0:	ldp	x27, x28, [sp, #80]
     3f4:	mov	w0, #0x0                   	// #0
     3f8:	ldp	x19, x20, [sp, #16]
     3fc:	ldp	x21, x22, [sp, #32]
     400:	ldp	x23, x24, [sp, #48]
     404:	ldp	x29, x30, [sp], #160
     408:	ret
     40c:	cmp	w25, #0x21
     410:	b.eq	4fc <parse_one_place+0x2f4>  // b.none
     414:	mov	x2, x9
     418:	mov	x1, x26
     41c:	mov	x0, x24
     420:	mov	w4, #0x0                   	// #0
     424:	bl	0 <gomp_affinity_add_cpus>
     428:	tst	w0, #0xff
     42c:	b.eq	3ec <parse_one_place+0x1e4>  // b.none
     430:	ldr	x2, [sp, #152]
     434:	ldrb	w4, [x2]
     438:	cmp	w4, #0x7d
     43c:	b.ne	370 <parse_one_place+0x168>  // b.any
     440:	cbz	w27, 5fc <parse_one_place+0x3f4>
     444:	cbnz	w23, 5fc <parse_one_place+0x3f4>
     448:	mov	w23, #0x1                   	// #1
     44c:	b	2d8 <parse_one_place+0xd0>
     450:	add	x0, x2, x3
     454:	str	x0, [sp, #152]
     458:	ldrb	w1, [x2, #1]
     45c:	ldrh	w1, [x5, x1, lsl #1]
     460:	tbz	w1, #13, 480 <parse_one_place+0x278>
     464:	add	x2, x2, #0x2
     468:	mov	x0, x2
     46c:	str	x2, [sp, #152]
     470:	add	x2, x2, #0x1
     474:	ldrb	w1, [x0]
     478:	ldrh	w1, [x5, x1, lsl #1]
     47c:	tbnz	w1, #13, 468 <parse_one_place+0x260>
     480:	str	wzr, [x28]
     484:	add	x1, sp, #0x98
     488:	mov	w2, #0xa                   	// #10
     48c:	bl	0 <strtoul>
     490:	mov	x9, x0
     494:	ldr	w1, [x28]
     498:	cmp	w1, #0x0
     49c:	ccmp	x0, #0x0, #0x4, eq  // eq = none
     4a0:	b.eq	3ec <parse_one_place+0x1e4>  // b.none
     4a4:	ldr	x2, [sp, #152]
     4a8:	ldr	x5, [x19]
     4ac:	ldrb	w4, [x2]
     4b0:	ubfiz	x0, x4, #1, #8
     4b4:	ldrh	w0, [x5, x0]
     4b8:	tbz	w0, #13, 4d8 <parse_one_place+0x2d0>
     4bc:	add	x1, x2, #0x1
     4c0:	str	x1, [sp, #152]
     4c4:	mov	x2, x1
     4c8:	ldrb	w4, [x1], #1
     4cc:	ubfiz	x3, x4, #1, #8
     4d0:	ldrh	w3, [x5, x3]
     4d4:	tbnz	w3, #13, 4c0 <parse_one_place+0x2b8>
     4d8:	cmp	w4, #0x3a
     4dc:	mov	x3, #0x1                   	// #1
     4e0:	b.eq	55c <parse_one_place+0x354>  // b.none
     4e4:	cmp	w20, #0x0
     4e8:	ccmp	x9, #0x1, #0x4, ne  // ne = any
     4ec:	b.eq	358 <parse_one_place+0x150>  // b.none
     4f0:	ldp	x25, x26, [sp, #64]
     4f4:	ldp	x27, x28, [sp, #80]
     4f8:	b	3f4 <parse_one_place+0x1ec>
     4fc:	mov	x1, x26
     500:	mov	x0, x24
     504:	bl	0 <gomp_affinity_remove_cpu>
     508:	tst	w0, #0xff
     50c:	b.ne	430 <parse_one_place+0x228>  // b.any
     510:	b	3ec <parse_one_place+0x1e4>
     514:	ldr	x3, [sp, #104]
     518:	mov	w1, #0x1                   	// #1
     51c:	add	x0, x20, #0x1
     520:	str	x0, [sp, #152]
     524:	strb	w1, [x3]
     528:	ldrb	w1, [x20, #1]
     52c:	ubfiz	x3, x1, #1, #8
     530:	ldrh	w3, [x2, x3]
     534:	tbz	w3, #13, 5f4 <parse_one_place+0x3ec>
     538:	add	x0, x20, #0x2
     53c:	nop
     540:	str	x0, [sp, #152]
     544:	mov	x20, x0
     548:	ldrb	w1, [x0], #1
     54c:	ubfiz	x3, x1, #1, #8
     550:	ldrh	w3, [x2, x3]
     554:	tbnz	w3, #13, 540 <parse_one_place+0x338>
     558:	b	290 <parse_one_place+0x88>
     55c:	add	x0, x2, x3
     560:	str	x0, [sp, #152]
     564:	ldrb	w1, [x2, #1]
     568:	ldrh	w1, [x5, x1, lsl #1]
     56c:	tbz	w1, #13, 590 <parse_one_place+0x388>
     570:	add	x2, x2, #0x2
     574:	nop
     578:	mov	x0, x2
     57c:	str	x2, [sp, #152]
     580:	add	x2, x2, #0x1
     584:	ldrb	w1, [x0]
     588:	ldrh	w1, [x5, x1, lsl #1]
     58c:	tbnz	w1, #13, 578 <parse_one_place+0x370>
     590:	str	wzr, [x28]
     594:	add	x1, sp, #0x98
     598:	mov	w2, #0xa                   	// #10
     59c:	str	x9, [sp, #136]
     5a0:	bl	0 <strtol>
     5a4:	mov	x3, x0
     5a8:	ldr	w1, [x28]
     5ac:	cbnz	w1, 3ec <parse_one_place+0x1e4>
     5b0:	ldr	x2, [sp, #152]
     5b4:	ldr	x5, [x19]
     5b8:	ldrb	w4, [x2]
     5bc:	ldr	x9, [sp, #136]
     5c0:	ubfiz	x0, x4, #1, #8
     5c4:	ldrh	w0, [x5, x0]
     5c8:	tbz	w0, #13, 4e4 <parse_one_place+0x2dc>
     5cc:	add	x0, x2, #0x1
     5d0:	str	x0, [sp, #152]
     5d4:	mov	x2, x0
     5d8:	ldrb	w4, [x0], #1
     5dc:	ubfiz	x1, x4, #1, #8
     5e0:	ldrh	w1, [x5, x1]
     5e4:	tbnz	w1, #13, 5d0 <parse_one_place+0x3c8>
     5e8:	b	4e4 <parse_one_place+0x2dc>
     5ec:	mov	x0, x1
     5f0:	b	2f8 <parse_one_place+0xf0>
     5f4:	mov	x20, x0
     5f8:	b	290 <parse_one_place+0x88>
     5fc:	ldr	x1, [sp, #152]
     600:	ldr	x3, [x19]
     604:	add	x0, x1, #0x1
     608:	str	x0, [sp, #152]
     60c:	ldrb	w2, [x1, #1]
     610:	ubfiz	x4, x2, #1, #8
     614:	ldrh	w4, [x3, x4]
     618:	tbz	w4, #13, 638 <parse_one_place+0x430>
     61c:	add	x1, x1, #0x2
     620:	str	x1, [sp, #152]
     624:	mov	x0, x1
     628:	ldrb	w2, [x1], #1
     62c:	ubfiz	x4, x2, #1, #8
     630:	ldrh	w4, [x3, x4]
     634:	tbnz	w4, #13, 620 <parse_one_place+0x418>
     638:	cmp	w2, #0x3a
     63c:	mov	x2, #0x1                   	// #1
     640:	mov	x20, x2
     644:	b.eq	66c <parse_one_place+0x464>  // b.none
     648:	ldr	x1, [sp, #112]
     64c:	ldp	x25, x26, [sp, #64]
     650:	ldp	x27, x28, [sp, #80]
     654:	str	x0, [x1]
     658:	ldp	x0, x1, [sp, #120]
     65c:	str	x20, [x0]
     660:	mov	w0, #0x1                   	// #1
     664:	str	x2, [x1]
     668:	b	3f8 <parse_one_place+0x1f0>
     66c:	add	x20, x0, x2
     670:	str	x20, [sp, #152]
     674:	ldrb	w1, [x0, #1]
     678:	ldrh	w1, [x3, x1, lsl #1]
     67c:	tbz	w1, #13, 69c <parse_one_place+0x494>
     680:	add	x0, x0, #0x2
     684:	mov	x20, x0
     688:	str	x0, [sp, #152]
     68c:	add	x0, x0, #0x1
     690:	ldrb	w1, [x20]
     694:	ldrh	w1, [x3, x1, lsl #1]
     698:	tbnz	w1, #13, 684 <parse_one_place+0x47c>
     69c:	bl	0 <__errno_location>
     6a0:	mov	x21, x0
     6a4:	add	x1, sp, #0x98
     6a8:	mov	x0, x20
     6ac:	mov	w2, #0xa                   	// #10
     6b0:	str	wzr, [x21]
     6b4:	bl	0 <strtoul>
     6b8:	mov	x20, x0
     6bc:	ldr	w1, [x21]
     6c0:	cbnz	w1, 3ec <parse_one_place+0x1e4>
     6c4:	sub	x1, x0, #0x1
     6c8:	mov	x0, #0xfffe                	// #65534
     6cc:	cmp	x1, x0
     6d0:	b.hi	3ec <parse_one_place+0x1e4>  // b.pmore
     6d4:	ldr	x1, [sp, #152]
     6d8:	ldr	x3, [x19]
     6dc:	ldrb	w0, [x1]
     6e0:	ubfiz	x2, x0, #1, #8
     6e4:	ldrh	w2, [x3, x2]
     6e8:	tbz	w2, #13, 708 <parse_one_place+0x500>
     6ec:	add	x2, x1, #0x1
     6f0:	str	x2, [sp, #152]
     6f4:	mov	x1, x2
     6f8:	ldrb	w0, [x2], #1
     6fc:	ubfiz	x4, x0, #1, #8
     700:	ldrh	w4, [x3, x4]
     704:	tbnz	w4, #13, 6f0 <parse_one_place+0x4e8>
     708:	cmp	w0, #0x3a
     70c:	mov	x2, #0x1                   	// #1
     710:	b.eq	730 <parse_one_place+0x528>  // b.none
     714:	ldr	x0, [sp, #104]
     718:	ldrb	w0, [x0]
     71c:	cbz	w0, 728 <parse_one_place+0x520>
     720:	cmp	x20, #0x1
     724:	b.ne	3ec <parse_one_place+0x1e4>  // b.any
     728:	ldr	x0, [sp, #152]
     72c:	b	648 <parse_one_place+0x440>
     730:	add	x0, x1, x2
     734:	str	x0, [sp, #152]
     738:	ldrb	w2, [x1, #1]
     73c:	ldrh	w2, [x3, x2, lsl #1]
     740:	tbz	w2, #13, 760 <parse_one_place+0x558>
     744:	add	x1, x1, #0x2
     748:	mov	x0, x1
     74c:	str	x1, [sp, #152]
     750:	add	x1, x1, #0x1
     754:	ldrb	w2, [x0]
     758:	ldrh	w2, [x3, x2, lsl #1]
     75c:	tbnz	w2, #13, 748 <parse_one_place+0x540>
     760:	str	wzr, [x21]
     764:	add	x1, sp, #0x98
     768:	mov	w2, #0xa                   	// #10
     76c:	bl	0 <strtol>
     770:	mov	x2, x0
     774:	ldr	w1, [x21]
     778:	cbnz	w1, 3ec <parse_one_place+0x1e4>
     77c:	ldr	x0, [sp, #152]
     780:	ldr	x3, [x19]
     784:	ldrb	w1, [x0]
     788:	ldrh	w1, [x3, x1, lsl #1]
     78c:	tbz	w1, #13, 714 <parse_one_place+0x50c>
     790:	add	x0, x0, #0x1
     794:	str	x0, [sp, #152]
     798:	add	x0, x0, #0x1
     79c:	ldurb	w1, [x0, #-1]
     7a0:	ldrh	w1, [x3, x1, lsl #1]
     7a4:	tbnz	w1, #13, 794 <parse_one_place+0x58c>
     7a8:	b	714 <parse_one_place+0x50c>
     7ac:	nop

00000000000007b0 <parse_stacksize>:
     7b0:	stp	x29, x30, [sp, #-80]!
     7b4:	mov	x29, sp
     7b8:	stp	x19, x20, [sp, #16]
     7bc:	mov	x20, x0
     7c0:	stp	x21, x22, [sp, #32]
     7c4:	mov	x21, x1
     7c8:	bl	0 <getenv>
     7cc:	cbz	x0, 924 <parse_stacksize+0x174>
     7d0:	mov	x19, x0
     7d4:	bl	0 <__ctype_b_loc>
     7d8:	mov	x22, x0
     7dc:	ldrb	w2, [x19]
     7e0:	ldr	x4, [x22]
     7e4:	ubfiz	x0, x2, #1, #8
     7e8:	ldrh	w0, [x4, x0]
     7ec:	tbz	w0, #13, 800 <parse_stacksize+0x50>
     7f0:	ldrb	w2, [x19, #1]!
     7f4:	ubfiz	x3, x2, #1, #8
     7f8:	ldrh	w3, [x4, x3]
     7fc:	tbnz	w3, #13, 7f0 <parse_stacksize+0x40>
     800:	cbnz	w2, 828 <parse_stacksize+0x78>
     804:	mov	x1, x20
     808:	adrp	x0, 0 <parse_boolean>
     80c:	add	x0, x0, #0x0
     810:	bl	0 <gomp_error>
     814:	mov	w0, #0x0                   	// #0
     818:	ldp	x19, x20, [sp, #16]
     81c:	ldp	x21, x22, [sp, #32]
     820:	ldp	x29, x30, [sp], #80
     824:	ret
     828:	stp	x23, x24, [sp, #48]
     82c:	bl	0 <__errno_location>
     830:	mov	x23, x0
     834:	add	x1, sp, #0x48
     838:	mov	x0, x19
     83c:	mov	w2, #0xa                   	// #10
     840:	str	wzr, [x23]
     844:	bl	0 <strtoul>
     848:	mov	x24, x0
     84c:	ldr	w1, [x23]
     850:	cbnz	w1, 8f8 <parse_stacksize+0x148>
     854:	ldr	x19, [sp, #72]
     858:	ldr	x22, [x22]
     85c:	ldrb	w0, [x19]
     860:	ldrb	w3, [x19]
     864:	mov	x23, x0
     868:	ldrh	w0, [x22, x0, lsl #1]
     86c:	tbz	w0, #13, 894 <parse_stacksize+0xe4>
     870:	add	x2, x19, #0x1
     874:	nop
     878:	str	x2, [sp, #72]
     87c:	mov	x19, x2
     880:	ldrb	w3, [x2], #1
     884:	and	x23, x3, #0xff
     888:	ubfiz	x1, x3, #1, #8
     88c:	ldrh	w1, [x22, x1]
     890:	tbnz	w1, #13, 878 <parse_stacksize+0xc8>
     894:	cbz	w3, 900 <parse_stacksize+0x150>
     898:	bl	0 <__ctype_tolower_loc>
     89c:	ldr	x0, [x0]
     8a0:	ldr	w0, [x0, x23, lsl #2]
     8a4:	cmp	w0, #0x6b
     8a8:	b.eq	944 <parse_stacksize+0x194>  // b.none
     8ac:	b.gt	92c <parse_stacksize+0x17c>
     8b0:	cmp	w0, #0x62
     8b4:	b.eq	93c <parse_stacksize+0x18c>  // b.none
     8b8:	cmp	w0, #0x67
     8bc:	mov	x0, #0x1e                  	// #30
     8c0:	b.ne	8f8 <parse_stacksize+0x148>  // b.any
     8c4:	add	x1, x19, #0x1
     8c8:	str	x1, [sp, #72]
     8cc:	ldrb	w2, [x19, #1]
     8d0:	ldrb	w1, [x19, #1]
     8d4:	ldrh	w2, [x22, x2, lsl #1]
     8d8:	tbz	w2, #13, 8f4 <parse_stacksize+0x144>
     8dc:	add	x19, x19, #0x2
     8e0:	str	x19, [sp, #72]
     8e4:	ldrb	w1, [x19], #1
     8e8:	ubfiz	x2, x1, #1, #8
     8ec:	ldrh	w2, [x22, x2]
     8f0:	tbnz	w2, #13, 8e0 <parse_stacksize+0x130>
     8f4:	cbz	w1, 904 <parse_stacksize+0x154>
     8f8:	ldp	x23, x24, [sp, #48]
     8fc:	b	804 <parse_stacksize+0x54>
     900:	mov	x0, #0xa                   	// #10
     904:	lsl	x1, x24, x0
     908:	lsr	x0, x1, x0
     90c:	cmp	x0, x24
     910:	b.ne	8f8 <parse_stacksize+0x148>  // b.any
     914:	mov	w0, #0x1                   	// #1
     918:	ldp	x23, x24, [sp, #48]
     91c:	str	x1, [x21]
     920:	b	818 <parse_stacksize+0x68>
     924:	mov	w0, #0x0                   	// #0
     928:	b	818 <parse_stacksize+0x68>
     92c:	cmp	w0, #0x6d
     930:	b.ne	8f8 <parse_stacksize+0x148>  // b.any
     934:	mov	x0, #0x14                  	// #20
     938:	b	8c4 <parse_stacksize+0x114>
     93c:	mov	x0, #0x0                   	// #0
     940:	b	8c4 <parse_stacksize+0x114>
     944:	mov	x0, #0xa                   	// #10
     948:	b	8c4 <parse_stacksize+0x114>
     94c:	nop

0000000000000950 <parse_int_1.constprop.0>:
     950:	stp	x29, x30, [sp, #-48]!
     954:	mov	w3, w2
     958:	mov	w2, #0x1                   	// #1
     95c:	mov	x29, sp
     960:	stp	x19, x20, [sp, #16]
     964:	mov	x19, x1
     968:	mov	x20, x0
     96c:	add	x1, sp, #0x28
     970:	bl	f0 <parse_unsigned_long_1>
     974:	ands	w0, w0, #0xff
     978:	b.eq	990 <parse_int_1.constprop.0+0x40>  // b.none
     97c:	ldr	x1, [sp, #40]
     980:	mov	x2, #0x7fffffff            	// #2147483647
     984:	cmp	x1, x2
     988:	b.hi	99c <parse_int_1.constprop.0+0x4c>  // b.pmore
     98c:	str	w1, [x19]
     990:	ldp	x19, x20, [sp, #16]
     994:	ldp	x29, x30, [sp], #48
     998:	ret
     99c:	mov	x1, x20
     9a0:	adrp	x0, 0 <parse_boolean>
     9a4:	add	x0, x0, #0x0
     9a8:	bl	0 <gomp_error>
     9ac:	mov	w0, #0x0                   	// #0
     9b0:	b	990 <parse_int_1.constprop.0+0x40>
     9b4:	nop

00000000000009b8 <initialize_env>:
     9b8:	stp	x29, x30, [sp, #-208]!
     9bc:	adrp	x0, 0 <parse_boolean>
     9c0:	add	x0, x0, #0x0
     9c4:	mov	x29, sp
     9c8:	stp	x19, x20, [sp, #16]
     9cc:	stp	x21, x22, [sp, #32]
     9d0:	stp	x23, x24, [sp, #48]
     9d4:	adrp	x23, 0 <parse_boolean>
     9d8:	add	x19, x23, #0x0
     9dc:	stp	x25, x26, [sp, #64]
     9e0:	stp	x27, x28, [sp, #80]
     9e4:	str	xzr, [sp, #168]
     9e8:	bl	0 <getenv>
     9ec:	cbz	x0, a94 <initialize_env+0xdc>
     9f0:	mov	x20, x0
     9f4:	bl	0 <__ctype_b_loc>
     9f8:	mov	x22, x0
     9fc:	ldrb	w0, [x20]
     a00:	ldr	x24, [x22]
     a04:	ldrh	w0, [x24, x0, lsl #1]
     a08:	tbz	w0, #13, a1c <initialize_env+0x64>
     a0c:	nop
     a10:	ldrb	w0, [x20, #1]!
     a14:	ldrh	w0, [x24, x0, lsl #1]
     a18:	tbnz	w0, #13, a10 <initialize_env+0x58>
     a1c:	adrp	x1, 0 <parse_boolean>
     a20:	mov	x0, x20
     a24:	add	x1, x1, #0x0
     a28:	mov	x2, #0x9                   	// #9
     a2c:	bl	0 <strncasecmp>
     a30:	cbz	w0, ec0 <initialize_env+0x508>
     a34:	adrp	x1, 0 <parse_boolean>
     a38:	mov	x0, x20
     a3c:	add	x1, x1, #0x0
     a40:	mov	x2, #0xc                   	// #12
     a44:	bl	0 <strncasecmp>
     a48:	cbnz	w0, 1dc8 <initialize_env+0x1410>
     a4c:	add	x20, x20, #0xc
     a50:	mov	w21, #0xffffffff            	// #-1
     a54:	ldrb	w0, [x20]
     a58:	ldrb	w1, [x20]
     a5c:	ldrh	w0, [x24, x0, lsl #1]
     a60:	tbz	w0, #13, a78 <initialize_env+0xc0>
     a64:	nop
     a68:	ldrb	w1, [x20, #1]!
     a6c:	ubfiz	x0, x1, #1, #8
     a70:	ldrh	w0, [x24, x0]
     a74:	tbnz	w0, #13, a68 <initialize_env+0xb0>
     a78:	cmp	w1, #0x3a
     a7c:	b.eq	1b68 <initialize_env+0x11b0>  // b.none
     a80:	adrp	x23, 0 <parse_boolean>
     a84:	add	x19, x23, #0x0
     a88:	adrp	x0, 0 <parse_boolean>
     a8c:	add	x0, x0, #0x0
     a90:	bl	0 <gomp_error>
     a94:	add	x1, x19, #0x18
     a98:	adrp	x0, 0 <parse_boolean>
     a9c:	add	x0, x0, #0x0
     aa0:	bl	0 <parse_boolean>
     aa4:	add	x1, x19, #0x19
     aa8:	adrp	x0, 0 <parse_boolean>
     aac:	add	x0, x0, #0x0
     ab0:	bl	0 <parse_boolean>
     ab4:	adrp	x0, 0 <parse_boolean>
     ab8:	add	x1, x0, #0x0
     abc:	adrp	x0, 0 <parse_boolean>
     ac0:	add	x0, x0, #0x0
     ac4:	bl	0 <parse_boolean>
     ac8:	adrp	x0, 0 <parse_boolean>
     acc:	adrp	x1, 1 <parse_boolean+0x1>
     ad0:	add	x0, x0, #0x0
     ad4:	add	x1, x1, #0x0
     ad8:	bl	0 <parse_boolean>
     adc:	add	x1, x19, #0x10
     ae0:	mov	w2, #0x0                   	// #0
     ae4:	adrp	x0, 0 <parse_boolean>
     ae8:	add	x0, x0, #0x0
     aec:	bl	950 <parse_int_1.constprop.0>
     af0:	adrp	x0, 0 <parse_boolean>
     af4:	add	x0, x0, #0x0
     af8:	add	x1, x0, #0x4
     afc:	mov	w2, #0x0                   	// #0
     b00:	adrp	x0, 0 <parse_boolean>
     b04:	add	x0, x0, #0x0
     b08:	bl	950 <parse_int_1.constprop.0>
     b0c:	add	x1, x19, #0x28
     b10:	mov	w3, #0x0                   	// #0
     b14:	mov	w2, #0x1                   	// #1
     b18:	adrp	x0, 0 <parse_boolean>
     b1c:	add	x0, x0, #0x0
     b20:	bl	f0 <parse_unsigned_long_1>
     b24:	add	x1, sp, #0xa0
     b28:	adrp	x0, 0 <parse_boolean>
     b2c:	mov	w3, #0x0                   	// #0
     b30:	add	x0, x0, #0x0
     b34:	mov	w2, #0x0                   	// #0
     b38:	bl	f0 <parse_unsigned_long_1>
     b3c:	tst	w0, #0xff
     b40:	b.eq	b5c <initialize_env+0x1a4>  // b.none
     b44:	ldr	x0, [sp, #160]
     b48:	mov	x2, #0x7fffffff            	// #2147483647
     b4c:	mov	x1, #0xffffffff            	// #4294967295
     b50:	cmp	x0, x2
     b54:	csel	x0, x0, x1, ls  // ls = plast
     b58:	str	w0, [x19, #20]
     b5c:	adrp	x1, 4 <parse_boolean+0x4>
     b60:	add	x1, x1, #0x0
     b64:	mov	w2, #0x1                   	// #1
     b68:	adrp	x0, 0 <parse_boolean>
     b6c:	add	x0, x0, #0x0
     b70:	bl	950 <parse_int_1.constprop.0>
     b74:	bl	0 <gomp_init_num_threads>
     b78:	adrp	x22, 0 <parse_boolean>
     b7c:	ldr	x1, [x23]
     b80:	add	x22, x22, #0x0
     b84:	mov	x0, x22
     b88:	str	x1, [x19, #48]
     b8c:	bl	0 <getenv>
     b90:	mov	x20, x0
     b94:	cbz	x0, be8 <initialize_env+0x230>
     b98:	bl	0 <__ctype_b_loc>
     b9c:	mov	x26, x0
     ba0:	ldrb	w1, [x20]
     ba4:	ldr	x2, [x26]
     ba8:	ubfiz	x0, x1, #1, #8
     bac:	ldrh	w0, [x2, x0]
     bb0:	tbz	w0, #13, bc8 <initialize_env+0x210>
     bb4:	nop
     bb8:	ldrb	w1, [x20, #1]!
     bbc:	ubfiz	x0, x1, #1, #8
     bc0:	ldrh	w0, [x2, x0]
     bc4:	tbnz	w0, #13, bb8 <initialize_env+0x200>
     bc8:	cbnz	w1, ecc <initialize_env+0x514>
     bcc:	mov	x27, #0x0                   	// #0
     bd0:	mov	x0, x27
     bd4:	bl	0 <free>
     bd8:	adrp	x0, 0 <parse_boolean>
     bdc:	mov	x1, x22
     be0:	add	x0, x0, #0x0
     be4:	bl	0 <gomp_error>
     be8:	ldr	x0, [x19, #48]
     bec:	str	x0, [x23]
     bf0:	adrp	x22, 0 <parse_boolean>
     bf4:	add	x22, x22, #0x0
     bf8:	mov	x0, x22
     bfc:	bl	0 <getenv>
     c00:	mov	x25, x0
     c04:	cbz	x0, 2078 <initialize_env+0x16c0>
     c08:	bl	0 <__ctype_b_loc>
     c0c:	ldrb	w1, [x25]
     c10:	ldr	x20, [x0]
     c14:	ubfiz	x0, x1, #1, #8
     c18:	ldrh	w0, [x20, x0]
     c1c:	tbz	w0, #13, c30 <initialize_env+0x278>
     c20:	ldrb	w1, [x25, #1]!
     c24:	ubfiz	x0, x1, #1, #8
     c28:	ldrh	w0, [x20, x0]
     c2c:	tbnz	w0, #13, c20 <initialize_env+0x268>
     c30:	cbz	w1, 1a84 <initialize_env+0x10cc>
     c34:	ldrb	w21, [x19, #63]
     c38:	add	x24, x19, #0x38
     c3c:	mov	x1, x24
     c40:	mov	x0, x25
     c44:	mov	x2, x21
     c48:	bl	0 <strncasecmp>
     c4c:	cbz	w0, 1a34 <initialize_env+0x107c>
     c50:	ldrb	w21, [x19, #75]
     c54:	add	x1, x19, #0x44
     c58:	mov	x0, x25
     c5c:	mov	x2, x21
     c60:	bl	0 <strncasecmp>
     c64:	cbz	w0, 232c <initialize_env+0x1974>
     c68:	ldrb	w21, [x19, #87]
     c6c:	add	x1, x19, #0x50
     c70:	mov	x0, x25
     c74:	mov	x2, x21
     c78:	bl	0 <strncasecmp>
     c7c:	cbz	w0, 23c8 <initialize_env+0x1a10>
     c80:	ldrb	w21, [x19, #99]
     c84:	add	x1, x19, #0x5c
     c88:	mov	x0, x25
     c8c:	mov	x2, x21
     c90:	bl	0 <strncasecmp>
     c94:	cbz	w0, 1a30 <initialize_env+0x1078>
     c98:	ldrb	w21, [x19, #111]
     c9c:	add	x1, x19, #0x68
     ca0:	mov	x0, x25
     ca4:	mov	x24, #0x0                   	// #0
     ca8:	mov	x2, x21
     cac:	bl	0 <strncasecmp>
     cb0:	cbz	w0, 23d0 <initialize_env+0x1a18>
     cb4:	mov	x0, x24
     cb8:	bl	0 <free>
     cbc:	adrp	x0, 0 <parse_boolean>
     cc0:	mov	x1, x22
     cc4:	add	x0, x0, #0x0
     cc8:	str	wzr, [sp, #96]
     ccc:	bl	0 <gomp_error>
     cd0:	adrp	x20, 0 <parse_boolean>
     cd4:	add	x20, x20, #0x0
     cd8:	mov	x0, x20
     cdc:	bl	0 <getenv>
     ce0:	str	x0, [sp, #176]
     ce4:	mov	x22, x0
     ce8:	cbz	x0, dc8 <initialize_env+0x410>
     cec:	bl	0 <__ctype_b_loc>
     cf0:	mov	x21, x0
     cf4:	ldrb	w2, [x22]
     cf8:	ldr	x24, [x21]
     cfc:	ubfiz	x0, x2, #1, #8
     d00:	ldrh	w0, [x24, x0]
     d04:	tbz	w0, #13, d28 <initialize_env+0x370>
     d08:	add	x1, x22, #0x1
     d0c:	nop
     d10:	str	x1, [sp, #176]
     d14:	mov	x22, x1
     d18:	ldrb	w2, [x1], #1
     d1c:	ubfiz	x0, x2, #1, #8
     d20:	ldrh	w0, [x24, x0]
     d24:	tbnz	w0, #13, d10 <initialize_env+0x358>
     d28:	cbz	w2, d98 <initialize_env+0x3e0>
     d2c:	adrp	x1, 0 <parse_boolean>
     d30:	mov	x0, x22
     d34:	add	x1, x1, #0x0
     d38:	mov	x2, #0x7                   	// #7
     d3c:	bl	0 <strncasecmp>
     d40:	cbnz	w0, 1c84 <initialize_env+0x12cc>
     d44:	add	x0, x22, #0x7
     d48:	mov	w26, #0x1                   	// #1
     d4c:	str	x0, [sp, #176]
     d50:	ldr	x1, [sp, #176]
     d54:	mov	x0, x1
     d58:	ldrb	w2, [x0], #1
     d5c:	ubfiz	x3, x2, #1, #8
     d60:	ldrh	w3, [x24, x3]
     d64:	tbz	w3, #13, d80 <initialize_env+0x3c8>
     d68:	str	x0, [sp, #176]
     d6c:	mov	x1, x0
     d70:	ldrb	w2, [x0], #1
     d74:	ubfiz	x3, x2, #1, #8
     d78:	ldrh	w3, [x24, x3]
     d7c:	tbnz	w3, #13, d68 <initialize_env+0x3b0>
     d80:	cbz	w2, 1d30 <initialize_env+0x1378>
     d84:	add	x22, x1, #0x1
     d88:	str	x22, [sp, #176]
     d8c:	ldrb	w0, [x1]
     d90:	cmp	w0, #0x28
     d94:	b.eq	1e24 <initialize_env+0x146c>  // b.none
     d98:	adrp	x5, 8 <parse_boolean+0x8>
     d9c:	adrp	x4, 8 <parse_boolean+0x8>
     da0:	ldr	x0, [x4]
     da4:	stp	x4, x5, [sp, #104]
     da8:	bl	0 <free>
     dac:	ldp	x4, x5, [sp, #104]
     db0:	adrp	x0, 0 <parse_boolean>
     db4:	mov	x1, x20
     db8:	add	x0, x0, #0x0
     dbc:	str	xzr, [x4]
     dc0:	str	xzr, [x5]
     dc4:	bl	0 <gomp_error>
     dc8:	adrp	x0, 0 <parse_boolean>
     dcc:	add	x0, x0, #0x0
     dd0:	bl	0 <getenv>
     dd4:	mov	x22, x0
     dd8:	cbz	x0, 1928 <initialize_env+0xf70>
     ddc:	bl	0 <__ctype_b_loc>
     de0:	add	x21, sp, #0xc8
     de4:	str	x0, [sp, #104]
     de8:	bl	0 <__errno_location>
     dec:	mov	x20, x0
     df0:	mov	x28, #0x0                   	// #0
     df4:	mov	w26, #0x0                   	// #0
     df8:	ldr	x2, [sp, #104]
     dfc:	mov	x0, x22
     e00:	ldrb	w1, [x22]
     e04:	ldr	x3, [x2]
     e08:	ldrh	w1, [x3, x1, lsl #1]
     e0c:	and	w4, w1, #0x2000
     e10:	cbnz	w4, ea8 <initialize_env+0x4f0>
     e14:	nop
     e18:	str	wzr, [x20]
     e1c:	mov	x1, x21
     e20:	mov	w2, #0x0                   	// #0
     e24:	bl	0 <strtoul>
     e28:	mov	x25, x0
     e2c:	ldr	w1, [x20]
     e30:	mov	x0, #0xffff                	// #65535
     e34:	cmp	w1, #0x0
     e38:	ccmp	x25, x0, #0x2, eq  // eq = none
     e3c:	b.hi	1968 <initialize_env+0xfb0>  // b.pmore
     e40:	ldr	x6, [sp, #200]
     e44:	ldrb	w2, [x6]
     e48:	cmp	w2, #0x2d
     e4c:	b.eq	1860 <initialize_env+0xea8>  // b.none
     e50:	mov	x1, #0x1                   	// #1
     e54:	mov	x5, #0x0                   	// #0
     e58:	mov	x9, x1
     e5c:	cbnz	w26, ffc <initialize_env+0x644>
     e60:	add	x28, x28, x1
     e64:	ldr	x0, [sp, #104]
     e68:	ldr	x3, [x0]
     e6c:	ubfiz	x0, x2, #1, #8
     e70:	ldrh	w1, [x3, x0]
     e74:	and	w4, w1, #0x2000
     e78:	tbz	w1, #13, e94 <initialize_env+0x4dc>
     e7c:	nop
     e80:	ldrb	w2, [x6, #1]!
     e84:	ubfiz	x0, x2, #1, #8
     e88:	ldrh	w1, [x3, x0]
     e8c:	and	w4, w1, #0x2000
     e90:	tbnz	w1, #13, e80 <initialize_env+0x4c8>
     e94:	cmp	w2, #0x2c
     e98:	b.eq	18b8 <initialize_env+0xf00>  // b.none
     e9c:	cbz	w2, 1074 <initialize_env+0x6bc>
     ea0:	mov	x0, x6
     ea4:	cbz	w4, e18 <initialize_env+0x460>
     ea8:	ldrb	w1, [x0, #1]
     eac:	add	x6, x0, #0x1
     eb0:	mov	x0, x6
     eb4:	ldrh	w1, [x3, x1, lsl #1]
     eb8:	and	w4, w1, #0x2000
     ebc:	b	ea4 <initialize_env+0x4ec>
     ec0:	add	x20, x20, #0x9
     ec4:	mov	w21, #0x1                   	// #1
     ec8:	b	a54 <initialize_env+0x9c>
     ecc:	bl	0 <__errno_location>
     ed0:	mov	x25, x0
     ed4:	add	x21, sp, #0xc8
     ed8:	mov	x0, x20
     edc:	mov	x1, x21
     ee0:	mov	w2, #0xa                   	// #10
     ee4:	str	wzr, [x25]
     ee8:	bl	0 <strtoul>
     eec:	mov	x28, x0
     ef0:	ldr	w1, [x25]
     ef4:	cbnz	w1, bcc <initialize_env+0x214>
     ef8:	cmp	x0, #0x0
     efc:	b.le	bcc <initialize_env+0x214>
     f00:	ldr	x1, [sp, #200]
     f04:	ldr	x4, [x26]
     f08:	ldrb	w0, [x1]
     f0c:	ldrb	w2, [x1]
     f10:	ldrh	w0, [x4, x0, lsl #1]
     f14:	tbz	w0, #13, f34 <initialize_env+0x57c>
     f18:	add	x1, x1, #0x1
     f1c:	nop
     f20:	str	x1, [sp, #200]
     f24:	ldrb	w2, [x1], #1
     f28:	ubfiz	x0, x2, #1, #8
     f2c:	ldrh	w0, [x4, x0]
     f30:	tbnz	w0, #13, f20 <initialize_env+0x568>
     f34:	cbz	w2, 21b8 <initialize_env+0x1800>
     f38:	cmp	w2, #0x2c
     f3c:	b.ne	bcc <initialize_env+0x214>  // b.any
     f40:	mov	x20, #0x0                   	// #0
     f44:	mov	x27, #0x0                   	// #0
     f48:	str	xzr, [sp, #96]
     f4c:	ldr	x0, [sp, #96]
     f50:	ldr	x2, [sp, #200]
     f54:	cmp	x20, x0
     f58:	add	x24, x2, #0x1
     f5c:	b.eq	234c <initialize_env+0x1994>  // b.none
     f60:	ldrb	w0, [x2, #1]
     f64:	ldrb	w1, [x2, #1]
     f68:	ldrh	w0, [x4, x0, lsl #1]
     f6c:	tbz	w0, #13, f80 <initialize_env+0x5c8>
     f70:	ldrb	w1, [x24, #1]!
     f74:	ubfiz	x0, x1, #1, #8
     f78:	ldrh	w0, [x4, x0]
     f7c:	tbnz	w0, #13, f70 <initialize_env+0x5b8>
     f80:	cbz	w1, bd0 <initialize_env+0x218>
     f84:	str	wzr, [x25]
     f88:	mov	x1, x21
     f8c:	mov	x0, x24
     f90:	mov	w2, #0xa                   	// #10
     f94:	bl	0 <strtoul>
     f98:	mov	x28, x0
     f9c:	ldr	w1, [x25]
     fa0:	cbnz	w1, bd0 <initialize_env+0x218>
     fa4:	cmp	x0, #0x0
     fa8:	b.le	bd0 <initialize_env+0x218>
     fac:	ldr	x1, [sp, #200]
     fb0:	str	x0, [x27, x20, lsl #3]
     fb4:	ldr	x4, [x26]
     fb8:	add	x3, x20, #0x1
     fbc:	ldrb	w0, [x1]
     fc0:	ldrb	w2, [x1]
     fc4:	ldrh	w0, [x4, x0, lsl #1]
     fc8:	tbz	w0, #13, fe4 <initialize_env+0x62c>
     fcc:	add	x1, x1, #0x1
     fd0:	str	x1, [sp, #200]
     fd4:	ldrb	w2, [x1], #1
     fd8:	ubfiz	x0, x2, #1, #8
     fdc:	ldrh	w0, [x4, x0]
     fe0:	tbnz	w0, #13, fd0 <initialize_env+0x618>
     fe4:	cbz	w2, 24f4 <initialize_env+0x1b3c>
     fe8:	cmp	w2, #0x2c
     fec:	b.ne	bd0 <initialize_env+0x218>  // b.any
     ff0:	mov	x20, x3
     ff4:	b	f4c <initialize_env+0x594>
     ff8:	cbz	x1, 106c <initialize_env+0x6b4>
     ffc:	adrp	x0, 8 <parse_boolean+0x8>
    1000:	add	x27, x0, #0x0
    1004:	adrp	x0, 8 <parse_boolean+0x8>
    1008:	add	x24, x0, #0x0
    100c:	nop
    1010:	ldr	x1, [x27]
    1014:	sub	x5, x5, #0x1
    1018:	ldr	x0, [x24]
    101c:	stp	x9, x6, [sp, #128]
    1020:	ldr	x0, [x0, x1, lsl #3]
    1024:	stp	x0, x5, [sp, #112]
    1028:	bl	0 <gomp_affinity_init_place>
    102c:	ldr	x0, [sp, #112]
    1030:	mov	x1, x25
    1034:	mov	w4, #0x1                   	// #1
    1038:	mov	x3, #0x0                   	// #0
    103c:	mov	x2, #0x1                   	// #1
    1040:	bl	0 <gomp_affinity_add_cpus>
    1044:	tst	w0, #0xff
    1048:	ldp	x5, x9, [sp, #120]
    104c:	ldr	x6, [sp, #136]
    1050:	add	x25, x25, x9
    1054:	b.eq	1064 <initialize_env+0x6ac>  // b.none
    1058:	ldr	x1, [x27]
    105c:	add	x1, x1, #0x1
    1060:	str	x1, [x27]
    1064:	cmn	x5, #0x1
    1068:	b.ne	1010 <initialize_env+0x658>  // b.any
    106c:	ldrb	w2, [x6]
    1070:	b	e64 <initialize_env+0x4ac>
    1074:	cbz	w26, 2128 <initialize_env+0x1770>
    1078:	adrp	x0, 8 <parse_boolean+0x8>
    107c:	ldr	x0, [x0]
    1080:	cbz	x0, 190c <initialize_env+0xf54>
    1084:	ldrb	w0, [x19, #26]
    1088:	cbnz	w0, 1090 <initialize_env+0x6d8>
    108c:	strb	w26, [x19, #26]
    1090:	bl	0 <gomp_init_affinity>
    1094:	adrp	x0, 0 <parse_boolean>
    1098:	add	x0, x0, #0x0
    109c:	bl	0 <getenv>
    10a0:	mov	x20, x0
    10a4:	cbz	x0, 10b8 <initialize_env+0x700>
    10a8:	bl	0 <strlen>
    10ac:	mov	x1, x0
    10b0:	mov	x0, x20
    10b4:	bl	0 <gomp_set_affinity_format>
    10b8:	adrp	x0, 0 <parse_boolean>
    10bc:	add	x0, x0, #0x0
    10c0:	bl	0 <getenv>
    10c4:	mov	x20, x0
    10c8:	cbz	x0, 1140 <initialize_env+0x788>
    10cc:	bl	0 <__ctype_b_loc>
    10d0:	ldrb	w1, [x20]
    10d4:	ldr	x21, [x0]
    10d8:	ldrh	w0, [x21, x1, lsl #1]
    10dc:	tbz	w0, #13, 10ec <initialize_env+0x734>
    10e0:	ldrb	w0, [x20, #1]!
    10e4:	ldrh	w0, [x21, x0, lsl #1]
    10e8:	tbnz	w0, #13, 10e0 <initialize_env+0x728>
    10ec:	adrp	x1, 0 <parse_boolean>
    10f0:	mov	x0, x20
    10f4:	add	x1, x1, #0x0
    10f8:	mov	x2, #0x6                   	// #6
    10fc:	bl	0 <strncasecmp>
    1100:	cbnz	w0, 1aa8 <initialize_env+0x10f0>
    1104:	add	x20, x20, #0x6
    1108:	mov	w25, #0x1                   	// #1
    110c:	ldrb	w0, [x20]
    1110:	ubfiz	x1, x0, #1, #8
    1114:	ldrh	w1, [x21, x1]
    1118:	tbz	w1, #13, 1130 <initialize_env+0x778>
    111c:	nop
    1120:	ldrb	w0, [x20, #1]!
    1124:	ubfiz	x1, x0, #1, #8
    1128:	ldrh	w1, [x21, x1]
    112c:	tbnz	w1, #13, 1120 <initialize_env+0x768>
    1130:	cbz	w0, 1a8c <initialize_env+0x10d4>
    1134:	adrp	x0, 0 <parse_boolean>
    1138:	add	x0, x0, #0x0
    113c:	bl	0 <gomp_error>
    1140:	adrp	x21, 0 <parse_boolean>
    1144:	add	x21, x21, #0x0
    1148:	mov	x0, x21
    114c:	bl	0 <getenv>
    1150:	mov	x20, x0
    1154:	cbz	x0, 21a4 <initialize_env+0x17ec>
    1158:	mov	w25, #0xffffffff            	// #-1
    115c:	bl	0 <__ctype_b_loc>
    1160:	mov	x22, x0
    1164:	ldrb	w1, [x20]
    1168:	ldr	x24, [x22]
    116c:	ubfiz	x0, x1, #1, #8
    1170:	ldrh	w0, [x24, x0]
    1174:	tbz	w0, #13, 1188 <initialize_env+0x7d0>
    1178:	ldrb	w1, [x20, #1]!
    117c:	ubfiz	x0, x1, #1, #8
    1180:	ldrh	w0, [x24, x0]
    1184:	tbnz	w0, #13, 1178 <initialize_env+0x7c0>
    1188:	cbz	w1, 1a00 <initialize_env+0x1048>
    118c:	adrp	x1, 0 <parse_boolean>
    1190:	mov	x0, x20
    1194:	add	x1, x1, #0x0
    1198:	mov	x2, #0x8                   	// #8
    119c:	bl	0 <strncasecmp>
    11a0:	cbz	w0, 11bc <initialize_env+0x804>
    11a4:	adrp	x1, 0 <parse_boolean>
    11a8:	mov	x0, x20
    11ac:	add	x1, x1, #0x0
    11b0:	mov	x2, #0x8                   	// #8
    11b4:	bl	0 <strncasecmp>
    11b8:	cbnz	w0, 1978 <initialize_env+0xfc0>
    11bc:	add	x20, x20, #0x8
    11c0:	mov	x4, #0x1                   	// #1
    11c4:	mov	x26, #0xffffffffffffffff    	// #-1
    11c8:	str	x20, [sp, #200]
    11cc:	ldr	x1, [sp, #200]
    11d0:	ldrb	w2, [x1], #1
    11d4:	ubfiz	x3, x2, #1, #8
    11d8:	ldrh	w3, [x24, x3]
    11dc:	tbz	w3, #13, 11f4 <initialize_env+0x83c>
    11e0:	str	x1, [sp, #200]
    11e4:	ldrb	w2, [x1], #1
    11e8:	ubfiz	x3, x2, #1, #8
    11ec:	ldrh	w3, [x24, x3]
    11f0:	tbnz	w3, #13, 11e0 <initialize_env+0x828>
    11f4:	cbnz	w2, 1a00 <initialize_env+0x1048>
    11f8:	umulh	x1, x26, x4
    11fc:	mov	x0, #0xffffffffffffffff    	// #-1
    1200:	cbnz	x1, 1208 <initialize_env+0x850>
    1204:	mul	x0, x26, x4
    1208:	adrp	x26, 8 <parse_boolean+0x8>
    120c:	cmp	w25, #0x1
    1210:	str	x0, [x26]
    1214:	b.ne	1dd0 <initialize_env+0x1418>  // b.any
    1218:	adrp	x0, 8 <parse_boolean+0x8>
    121c:	mov	x1, #0x3e8                 	// #1000
    1220:	mov	x2, x1
    1224:	mov	w25, #0x1                   	// #1
    1228:	str	x1, [x0]
    122c:	ldr	x1, [x26]
    1230:	cmp	x2, x1
    1234:	b.ls	123c <initialize_env+0x884>  // b.plast
    1238:	str	x1, [x0]
    123c:	adrp	x20, 0 <gomp_thread_attr>
    1240:	add	x20, x20, #0x0
    1244:	mov	x0, x20
    1248:	bl	0 <pthread_attr_init>
    124c:	add	x1, sp, #0xa8
    1250:	adrp	x0, 0 <parse_boolean>
    1254:	add	x0, x0, #0x0
    1258:	bl	7b0 <parse_stacksize>
    125c:	tst	w0, #0xff
    1260:	b.ne	127c <initialize_env+0x8c4>  // b.any
    1264:	add	x1, sp, #0xa8
    1268:	adrp	x0, 0 <parse_boolean>
    126c:	add	x0, x0, #0x0
    1270:	bl	7b0 <parse_stacksize>
    1274:	tst	w0, #0xff
    1278:	b.eq	1294 <initialize_env+0x8dc>  // b.none
    127c:	ldr	x1, [sp, #168]
    1280:	mov	x0, x20
    1284:	bl	0 <pthread_attr_setstacksize>
    1288:	cmp	w0, #0x16
    128c:	b.eq	1d0c <initialize_env+0x1354>  // b.none
    1290:	cbnz	w0, 20c8 <initialize_env+0x1710>
    1294:	ldr	x1, [sp, #168]
    1298:	adrp	x0, 0 <parse_boolean>
    129c:	add	x0, x0, #0x0
    12a0:	str	x1, [sp, #96]
    12a4:	bl	0 <getenv>
    12a8:	mov	x20, x0
    12ac:	cbz	x0, 1724 <initialize_env+0xd6c>
    12b0:	bl	0 <__ctype_b_loc>
    12b4:	ldrb	w1, [x20]
    12b8:	ldr	x21, [x0]
    12bc:	ldrh	w0, [x21, x1, lsl #1]
    12c0:	tbz	w0, #13, 12d4 <initialize_env+0x91c>
    12c4:	nop
    12c8:	ldrb	w0, [x20, #1]!
    12cc:	ldrh	w0, [x21, x0, lsl #1]
    12d0:	tbnz	w0, #13, 12c8 <initialize_env+0x910>
    12d4:	adrp	x1, 0 <parse_boolean>
    12d8:	mov	x0, x20
    12dc:	add	x1, x1, #0x0
    12e0:	mov	x2, #0x4                   	// #4
    12e4:	bl	0 <strncasecmp>
    12e8:	cbnz	w0, 1acc <initialize_env+0x1114>
    12ec:	add	x20, x20, #0x4
    12f0:	mov	w22, #0x1                   	// #1
    12f4:	str	wzr, [sp, #104]
    12f8:	ldrb	w0, [x20]
    12fc:	ubfiz	x1, x0, #1, #8
    1300:	ldrh	w1, [x21, x1]
    1304:	tbz	w1, #13, 1318 <initialize_env+0x960>
    1308:	ldrb	w0, [x20, #1]!
    130c:	ubfiz	x1, x0, #1, #8
    1310:	ldrh	w1, [x21, x1]
    1314:	tbnz	w1, #13, 1308 <initialize_env+0x950>
    1318:	cbnz	w0, 1818 <initialize_env+0xe60>
    131c:	cbz	w22, 1724 <initialize_env+0xd6c>
    1320:	adrp	x20, 0 <stderr>
    1324:	mov	x2, #0x22                  	// #34
    1328:	mov	x1, #0x1                   	// #1
    132c:	adrp	x0, 0 <parse_boolean>
    1330:	ldr	x3, [x20]
    1334:	add	x0, x0, #0x0
    1338:	adrp	x21, 0 <parse_boolean>
    133c:	adrp	x22, 0 <parse_boolean>
    1340:	add	x21, x21, #0x0
    1344:	add	x22, x22, #0x0
    1348:	bl	0 <fwrite>
    134c:	ldr	x3, [x20]
    1350:	mov	x2, #0x15                  	// #21
    1354:	mov	x1, #0x1                   	// #1
    1358:	adrp	x0, 0 <parse_boolean>
    135c:	add	x0, x0, #0x0
    1360:	bl	0 <fwrite>
    1364:	ldrb	w1, [x19, #24]
    1368:	ldr	x0, [x20]
    136c:	cmp	w1, #0x0
    1370:	csel	x2, x22, x21, ne  // ne = any
    1374:	adrp	x1, 0 <parse_boolean>
    1378:	add	x1, x1, #0x0
    137c:	bl	0 <fprintf>
    1380:	ldrb	w2, [x19, #25]
    1384:	adrp	x1, 0 <parse_boolean>
    1388:	ldr	x0, [x20]
    138c:	cmp	w2, #0x0
    1390:	csel	x2, x22, x21, ne  // ne = any
    1394:	add	x1, x1, #0x0
    1398:	bl	0 <fprintf>
    139c:	ldr	x2, [x23]
    13a0:	adrp	x23, 8 <parse_boolean+0x8>
    13a4:	ldr	x0, [x20]
    13a8:	adrp	x1, 0 <parse_boolean>
    13ac:	add	x1, x1, #0x0
    13b0:	bl	0 <fprintf>
    13b4:	ldr	x0, [x23]
    13b8:	cmp	x0, #0x1
    13bc:	b.ls	1404 <initialize_env+0xa4c>  // b.plast
    13c0:	adrp	x24, 8 <parse_boolean+0x8>
    13c4:	adrp	x28, 0 <parse_boolean>
    13c8:	add	x23, x23, #0x0
    13cc:	add	x24, x24, #0x0
    13d0:	add	x28, x28, #0x0
    13d4:	add	x22, x20, #0x0
    13d8:	mov	x21, #0x1                   	// #1
    13dc:	nop
    13e0:	ldr	x2, [x24]
    13e4:	mov	x1, x28
    13e8:	ldr	x0, [x22]
    13ec:	ldr	x2, [x2, x21, lsl #3]
    13f0:	add	x21, x21, #0x1
    13f4:	bl	0 <fprintf>
    13f8:	ldr	x0, [x23]
    13fc:	cmp	x0, x21
    1400:	b.hi	13e0 <initialize_env+0xa28>  // b.pmore
    1404:	ldr	x3, [x20]
    1408:	adrp	x23, 0 <parse_boolean>
    140c:	add	x23, x23, #0x0
    1410:	mov	x2, #0x2                   	// #2
    1414:	mov	x1, #0x1                   	// #1
    1418:	mov	x0, x23
    141c:	bl	0 <fwrite>
    1420:	ldr	x3, [x20]
    1424:	adrp	x0, 0 <parse_boolean>
    1428:	mov	x2, #0x12                  	// #18
    142c:	add	x0, x0, #0x0
    1430:	mov	x1, #0x1                   	// #1
    1434:	bl	0 <fwrite>
    1438:	ldr	w0, [x19, #8]
    143c:	tbnz	w0, #31, 2098 <initialize_env+0x16e0>
    1440:	cmp	w0, #0x1
    1444:	b.eq	2300 <initialize_env+0x1948>  // b.none
    1448:	ldr	w1, [x19, #8]
    144c:	ldr	x3, [x20]
    1450:	and	w0, w1, #0x7fffffff
    1454:	cmp	w0, #0x3
    1458:	b.eq	22b4 <initialize_env+0x18fc>  // b.none
    145c:	tst	w1, #0x7ffffffc
    1460:	b.ne	1b48 <initialize_env+0x1190>  // b.any
    1464:	cmp	w0, #0x2
    1468:	b.eq	22a4 <initialize_env+0x18ec>  // b.none
    146c:	cmp	w0, #0x3
    1470:	b.ne	1828 <initialize_env+0xe70>  // b.any
    1474:	ldr	x3, [x20]
    1478:	mov	x2, #0x2                   	// #2
    147c:	mov	x1, #0x1                   	// #1
    1480:	mov	x0, x23
    1484:	bl	0 <fwrite>
    1488:	ldr	x3, [x20]
    148c:	adrp	x0, 0 <parse_boolean>
    1490:	mov	x2, #0x13                  	// #19
    1494:	add	x0, x0, #0x0
    1498:	mov	x1, #0x1                   	// #1
    149c:	bl	0 <fwrite>
    14a0:	ldrb	w0, [x19, #26]
    14a4:	cmp	w0, #0x2
    14a8:	b.eq	2288 <initialize_env+0x18d0>  // b.none
    14ac:	b.hi	1b10 <initialize_env+0x1158>  // b.pmore
    14b0:	cbz	w0, 226c <initialize_env+0x18b4>
    14b4:	ldr	x3, [x20]
    14b8:	adrp	x0, 0 <parse_boolean>
    14bc:	mov	x2, #0x4                   	// #4
    14c0:	add	x0, x0, #0x0
    14c4:	mov	x1, #0x1                   	// #1
    14c8:	bl	0 <fwrite>
    14cc:	adrp	x22, 8 <parse_boolean+0x8>
    14d0:	ldr	x3, [x20]
    14d4:	ldr	x0, [x22]
    14d8:	cmp	x0, #0x1
    14dc:	b.ls	1550 <initialize_env+0xb98>  // b.plast
    14e0:	adrp	x1, 8 <parse_boolean+0x8>
    14e4:	adrp	x28, 0 <parse_boolean>
    14e8:	add	x24, x1, #0x0
    14ec:	add	x28, x28, #0x0
    14f0:	adrp	x1, 0 <parse_boolean>
    14f4:	mov	x21, #0x1                   	// #1
    14f8:	add	x27, x1, #0x0
    14fc:	b	1514 <initialize_env+0xb5c>
    1500:	cmp	w1, #0x2
    1504:	b.eq	18ec <initialize_env+0xf34>  // b.none
    1508:	add	x21, x21, #0x1
    150c:	cmp	x21, x0
    1510:	b.cs	1550 <initialize_env+0xb98>  // b.hs, b.nlast
    1514:	ldr	x1, [x24]
    1518:	ldrb	w1, [x1, x21]
    151c:	cmp	w1, #0x3
    1520:	b.eq	18d0 <initialize_env+0xf18>  // b.none
    1524:	cmp	w1, #0x4
    1528:	b.ne	1500 <initialize_env+0xb48>  // b.any
    152c:	mov	x0, x27
    1530:	mov	x2, #0x7                   	// #7
    1534:	mov	x1, #0x1                   	// #1
    1538:	bl	0 <fwrite>
    153c:	ldr	x0, [x22]
    1540:	add	x21, x21, #0x1
    1544:	ldr	x3, [x20]
    1548:	cmp	x21, x0
    154c:	b.cc	1514 <initialize_env+0xb5c>  // b.lo, b.ul, b.last
    1550:	ldr	x3, [x20]
    1554:	adrp	x5, 8 <parse_boolean+0x8>
    1558:	mov	x2, #0x2                   	// #2
    155c:	mov	x1, #0x1                   	// #1
    1560:	mov	x0, x23
    1564:	str	x5, [sp, #112]
    1568:	bl	0 <fwrite>
    156c:	ldr	x3, [x20]
    1570:	adrp	x0, 0 <parse_boolean>
    1574:	mov	x2, #0x10                  	// #16
    1578:	add	x0, x0, #0x0
    157c:	mov	x1, #0x1                   	// #1
    1580:	bl	0 <fwrite>
    1584:	ldr	x5, [sp, #112]
    1588:	ldr	x0, [x5]
    158c:	cbz	x0, 15f8 <initialize_env+0xc40>
    1590:	adrp	x4, 8 <parse_boolean+0x8>
    1594:	adrp	x22, 0 <stderr>
    1598:	adrp	x28, 0 <parse_boolean>
    159c:	add	x27, x5, #0x0
    15a0:	add	x24, x4, #0x0
    15a4:	add	x22, x22, #0x0
    15a8:	add	x28, x28, #0x0
    15ac:	mov	x21, #0x0                   	// #0
    15b0:	ldr	x1, [x22]
    15b4:	mov	w0, #0x7b                  	// #123
    15b8:	bl	0 <fputc>
    15bc:	ldr	x0, [x24]
    15c0:	ldr	x0, [x0, x21, lsl #3]
    15c4:	add	x21, x21, #0x1
    15c8:	bl	0 <gomp_affinity_print_place>
    15cc:	ldr	x3, [x27]
    15d0:	mov	x0, x28
    15d4:	mov	x2, #0x2                   	// #2
    15d8:	mov	x1, #0x1                   	// #1
    15dc:	cmp	x3, x21
    15e0:	b.eq	1af4 <initialize_env+0x113c>  // b.none
    15e4:	ldr	x3, [x22]
    15e8:	bl	0 <fwrite>
    15ec:	ldr	x0, [x27]
    15f0:	cmp	x0, x21
    15f4:	b.hi	15b0 <initialize_env+0xbf8>  // b.pmore
    15f8:	ldr	x3, [x20]
    15fc:	mov	x2, #0x2                   	// #2
    1600:	mov	x1, #0x1                   	// #1
    1604:	mov	x0, x23
    1608:	adrp	x21, 0 <parse_boolean>
    160c:	adrp	x22, 0 <parse_boolean>
    1610:	bl	0 <fwrite>
    1614:	add	x21, x21, #0x0
    1618:	ldr	x0, [x20]
    161c:	adrp	x1, 0 <parse_boolean>
    1620:	ldr	x2, [sp, #96]
    1624:	add	x1, x1, #0x0
    1628:	add	x22, x22, #0x0
    162c:	bl	0 <fprintf>
    1630:	ldr	x0, [x20]
    1634:	cmp	w25, #0x1
    1638:	adrp	x3, 0 <parse_boolean>
    163c:	add	x3, x3, #0x0
    1640:	adrp	x2, 0 <parse_boolean>
    1644:	add	x2, x2, #0x0
    1648:	csel	x2, x2, x3, eq  // eq = none
    164c:	adrp	x1, 0 <parse_boolean>
    1650:	add	x1, x1, #0x0
    1654:	bl	0 <fprintf>
    1658:	ldr	w2, [x19, #20]
    165c:	adrp	x1, 0 <parse_boolean>
    1660:	ldr	x0, [x20]
    1664:	add	x1, x1, #0x0
    1668:	bl	0 <fprintf>
    166c:	ldr	x0, [x20]
    1670:	adrp	x1, 0 <parse_boolean>
    1674:	ldr	x2, [x19, #40]
    1678:	add	x1, x1, #0x0
    167c:	bl	0 <fprintf>
    1680:	adrp	x0, 0 <parse_boolean>
    1684:	ldrb	w1, [x0]
    1688:	ldr	x0, [x20]
    168c:	cmp	w1, #0x0
    1690:	csel	x2, x22, x21, ne  // ne = any
    1694:	adrp	x1, 0 <parse_boolean>
    1698:	add	x1, x1, #0x0
    169c:	bl	0 <fprintf>
    16a0:	ldr	w2, [x19, #16]
    16a4:	adrp	x1, 0 <parse_boolean>
    16a8:	ldr	x0, [x20]
    16ac:	add	x1, x1, #0x0
    16b0:	bl	0 <fprintf>
    16b4:	adrp	x2, 0 <parse_boolean>
    16b8:	add	x2, x2, #0x0
    16bc:	ldr	x0, [x20]
    16c0:	adrp	x1, 0 <parse_boolean>
    16c4:	ldr	w2, [x2, #4]
    16c8:	add	x1, x1, #0x0
    16cc:	bl	0 <fprintf>
    16d0:	adrp	x0, 1 <parse_boolean+0x1>
    16d4:	ldrb	w1, [x0]
    16d8:	ldr	x0, [x20]
    16dc:	cmp	w1, #0x0
    16e0:	csel	x2, x22, x21, ne  // ne = any
    16e4:	adrp	x1, 0 <parse_boolean>
    16e8:	add	x1, x1, #0x0
    16ec:	bl	0 <fprintf>
    16f0:	ldr	x0, [x20]
    16f4:	adrp	x1, 0 <parse_boolean>
    16f8:	ldr	x2, [x19, #120]
    16fc:	add	x1, x1, #0x0
    1700:	bl	0 <fprintf>
    1704:	ldr	w0, [sp, #104]
    1708:	cbnz	w0, 2160 <initialize_env+0x17a8>
    170c:	ldr	x3, [x20]
    1710:	adrp	x0, 0 <parse_boolean>
    1714:	mov	x2, #0x1f                  	// #31
    1718:	add	x0, x0, #0x0
    171c:	mov	x1, #0x1                   	// #1
    1720:	bl	0 <fwrite>
    1724:	adrp	x19, 4 <parse_boolean+0x4>
    1728:	adrp	x0, 0 <parse_boolean>
    172c:	add	x1, x19, #0x0
    1730:	add	x0, x0, #0x0
    1734:	mov	w2, #0x0                   	// #0
    1738:	bl	950 <parse_int_1.constprop.0>
    173c:	tst	w0, #0xff
    1740:	b.ne	1748 <initialize_env+0xd90>  // b.any
    1744:	str	wzr, [x19]
    1748:	adrp	x0, 0 <parse_boolean>
    174c:	add	x0, x0, #0x0
    1750:	bl	0 <getenv>
    1754:	cbz	x0, 1760 <initialize_env+0xda8>
    1758:	ldrb	w1, [x0]
    175c:	cbnz	w1, 1d48 <initialize_env+0x1390>
    1760:	adrp	x0, 8 <parse_boolean+0x8>
    1764:	str	xzr, [x0]
    1768:	adrp	x0, 0 <parse_boolean>
    176c:	add	x0, x0, #0x0
    1770:	bl	0 <getenv>
    1774:	mov	x19, x0
    1778:	cbz	x0, 17f8 <initialize_env+0xe40>
    177c:	ldrb	w0, [x0]
    1780:	mov	x21, #0x1                   	// #1
    1784:	cbz	w0, 17f8 <initialize_env+0xe40>
    1788:	adrp	x22, c <parse_boolean+0xc>
    178c:	add	x22, x22, #0x0
    1790:	ldrb	w0, [x19]
    1794:	cmp	w0, #0x3a
    1798:	b.eq	17d8 <initialize_env+0xe20>  // b.none
    179c:	bl	0 <__errno_location>
    17a0:	mov	x20, x0
    17a4:	add	x1, sp, #0xc8
    17a8:	mov	x0, x19
    17ac:	mov	w2, #0xa                   	// #10
    17b0:	str	wzr, [x20]
    17b4:	bl	0 <strtol>
    17b8:	ldr	w1, [x20]
    17bc:	cmp	w1, #0x0
    17c0:	ccmp	x0, #0x0, #0x1, eq  // eq = none
    17c4:	b.lt	17f8 <initialize_env+0xe40>  // b.tstop
    17c8:	tst	x0, #0xffffffff00000000
    17cc:	b.ne	17f8 <initialize_env+0xe40>  // b.any
    17d0:	ldr	x19, [sp, #200]
    17d4:	str	w0, [x22, x21, lsl #2]
    17d8:	ldrb	w0, [x19]
    17dc:	add	x19, x19, #0x1
    17e0:	cmp	w0, #0x0
    17e4:	ccmp	w21, #0x3, #0x4, ne  // ne = any
    17e8:	b.eq	17f8 <initialize_env+0xe40>  // b.none
    17ec:	add	x21, x21, #0x1
    17f0:	cmp	w0, #0x3a
    17f4:	b.eq	1790 <initialize_env+0xdd8>  // b.none
    17f8:	bl	0 <goacc_runtime_initialize>
    17fc:	ldp	x19, x20, [sp, #16]
    1800:	ldp	x21, x22, [sp, #32]
    1804:	ldp	x23, x24, [sp, #48]
    1808:	ldp	x25, x26, [sp, #64]
    180c:	ldp	x27, x28, [sp, #80]
    1810:	ldp	x29, x30, [sp], #208
    1814:	ret
    1818:	adrp	x0, 0 <parse_boolean>
    181c:	add	x0, x0, #0x0
    1820:	bl	0 <gomp_error>
    1824:	b	131c <initialize_env+0x964>
    1828:	cbnz	w0, 1b3c <initialize_env+0x1184>
    182c:	adrp	x0, 0 <parse_boolean>
    1830:	add	x0, x0, #0x0
    1834:	mov	x2, #0x7                   	// #7
    1838:	mov	x1, #0x1                   	// #1
    183c:	bl	0 <fwrite>
    1840:	ldr	w2, [x19, #12]
    1844:	cmp	w2, #0x1
    1848:	b.eq	1474 <initialize_env+0xabc>  // b.none
    184c:	ldr	x0, [x20]
    1850:	adrp	x1, 0 <parse_boolean>
    1854:	add	x1, x1, #0x0
    1858:	bl	0 <fprintf>
    185c:	b	1474 <initialize_env+0xabc>
    1860:	mov	x1, x21
    1864:	add	x0, x6, #0x1
    1868:	mov	w2, #0x0                   	// #0
    186c:	bl	0 <strtoul>
    1870:	ldr	w1, [x20]
    1874:	mov	x24, x0
    1878:	cbnz	w1, 1968 <initialize_env+0xfb0>
    187c:	mov	x0, #0xffff                	// #65535
    1880:	cmp	x24, x0
    1884:	ccmp	x25, x24, #0x2, ls  // ls = plast
    1888:	b.hi	1968 <initialize_env+0xfb0>  // b.pmore
    188c:	ldr	x6, [sp, #200]
    1890:	mov	x9, #0x1                   	// #1
    1894:	ldrb	w0, [x6]
    1898:	cmp	w0, #0x3a
    189c:	b.eq	1934 <initialize_env+0xf7c>  // b.none
    18a0:	sub	x5, x24, x25
    18a4:	udiv	x5, x5, x9
    18a8:	add	x1, x5, #0x1
    18ac:	cbnz	w26, ff8 <initialize_env+0x640>
    18b0:	ldrb	w2, [x6]
    18b4:	b	e60 <initialize_env+0x4a8>
    18b8:	ldrb	w0, [x6, #1]
    18bc:	add	x6, x6, #0x1
    18c0:	ldrh	w1, [x3, x0, lsl #1]
    18c4:	mov	x0, x6
    18c8:	and	w4, w1, #0x2000
    18cc:	b	ea4 <initialize_env+0x4ec>
    18d0:	mov	x0, x28
    18d4:	mov	x2, #0x6                   	// #6
    18d8:	mov	x1, #0x1                   	// #1
    18dc:	bl	0 <fwrite>
    18e0:	ldr	x0, [x22]
    18e4:	ldr	x3, [x20]
    18e8:	b	1508 <initialize_env+0xb50>
    18ec:	adrp	x0, 0 <parse_boolean>
    18f0:	mov	x2, #0x7                   	// #7
    18f4:	add	x0, x0, #0x0
    18f8:	mov	x1, #0x1                   	// #1
    18fc:	bl	0 <fwrite>
    1900:	ldr	x0, [x22]
    1904:	ldr	x3, [x20]
    1908:	b	1508 <initialize_env+0xb50>
    190c:	adrp	x4, 8 <parse_boolean+0x8>
    1910:	str	x4, [sp, #96]
    1914:	ldr	x0, [x4]
    1918:	bl	0 <free>
    191c:	ldr	x4, [sp, #96]
    1920:	str	xzr, [x4]
    1924:	nop
    1928:	ldrb	w0, [x19, #26]
    192c:	cbz	w0, 1094 <initialize_env+0x6dc>
    1930:	b	1090 <initialize_env+0x6d8>
    1934:	add	x0, x6, x9
    1938:	mov	x1, x21
    193c:	mov	w2, #0x0                   	// #0
    1940:	bl	0 <strtoul>
    1944:	ldr	w1, [x20]
    1948:	mov	x9, x0
    194c:	cbnz	w1, 1968 <initialize_env+0xfb0>
    1950:	sub	x1, x0, #0x1
    1954:	mov	x0, #0xfffe                	// #65534
    1958:	cmp	x1, x0
    195c:	b.hi	1968 <initialize_env+0xfb0>  // b.pmore
    1960:	ldr	x6, [sp, #200]
    1964:	b	18a0 <initialize_env+0xee8>
    1968:	adrp	x0, 0 <parse_boolean>
    196c:	add	x0, x0, #0x0
    1970:	bl	0 <gomp_error>
    1974:	b	1928 <initialize_env+0xf70>
    1978:	bl	0 <__errno_location>
    197c:	mov	x24, x0
    1980:	add	x1, sp, #0xc8
    1984:	mov	x0, x20
    1988:	mov	w2, #0xa                   	// #10
    198c:	str	wzr, [x24]
    1990:	bl	0 <strtoull>
    1994:	mov	x26, x0
    1998:	ldr	w1, [x24]
    199c:	cbnz	w1, 1a00 <initialize_env+0x1048>
    19a0:	ldr	x20, [sp, #200]
    19a4:	ldr	x24, [x22]
    19a8:	ldrb	w0, [x20]
    19ac:	ldrb	w2, [x20]
    19b0:	mov	x22, x0
    19b4:	ldrh	w0, [x24, x0, lsl #1]
    19b8:	tbz	w0, #13, 19dc <initialize_env+0x1024>
    19bc:	add	x1, x20, #0x1
    19c0:	str	x1, [sp, #200]
    19c4:	mov	x20, x1
    19c8:	ldrb	w2, [x1], #1
    19cc:	and	x22, x2, #0xff
    19d0:	ubfiz	x3, x2, #1, #8
    19d4:	ldrh	w3, [x24, x3]
    19d8:	tbnz	w3, #13, 19c0 <initialize_env+0x1008>
    19dc:	cbz	w2, 22f4 <initialize_env+0x193c>
    19e0:	bl	0 <__ctype_tolower_loc>
    19e4:	ldr	x0, [x0]
    19e8:	ldr	w0, [x0, x22, lsl #2]
    19ec:	cmp	w0, #0x6d
    19f0:	b.eq	2340 <initialize_env+0x1988>  // b.none
    19f4:	b.le	2048 <initialize_env+0x1690>
    19f8:	cmp	w0, #0x74
    19fc:	b.eq	231c <initialize_env+0x1964>  // b.none
    1a00:	adrp	x0, 0 <parse_boolean>
    1a04:	mov	x1, x21
    1a08:	add	x0, x0, #0x0
    1a0c:	bl	0 <gomp_error>
    1a10:	cmp	w25, #0x1
    1a14:	b.ne	2114 <initialize_env+0x175c>  // b.any
    1a18:	adrp	x26, 8 <parse_boolean+0x8>
    1a1c:	mov	x0, #0xac00                	// #44032
    1a20:	movk	x0, #0xfc23, lsl #16
    1a24:	movk	x0, #0x6, lsl #32
    1a28:	str	x0, [x26]
    1a2c:	b	1218 <initialize_env+0x860>
    1a30:	mov	w0, #0x3                   	// #3
    1a34:	ldrb	w4, [x25, x21]
    1a38:	sxtw	x1, w0
    1a3c:	mov	x0, #0xc                   	// #12
    1a40:	ldrb	w2, [x25, x21]
    1a44:	add	x3, x25, x21
    1a48:	madd	x0, x1, x0, x19
    1a4c:	ldrh	w1, [x20, x4, lsl #1]
    1a50:	ldrb	w4, [x0, #64]
    1a54:	tbz	w1, #13, 1a68 <initialize_env+0x10b0>
    1a58:	ldrb	w2, [x3, #1]!
    1a5c:	ubfiz	x0, x2, #1, #8
    1a60:	ldrh	w0, [x20, x0]
    1a64:	tbnz	w0, #13, 1a58 <initialize_env+0x10a0>
    1a68:	cbz	w2, 1d74 <initialize_env+0x13bc>
    1a6c:	cmp	w4, #0x1
    1a70:	cset	w25, ls  // ls = plast
    1a74:	cmp	w2, #0x2c
    1a78:	csinc	w0, w25, wzr, eq  // eq = none
    1a7c:	str	w0, [sp, #96]
    1a80:	cbz	w0, 1f3c <initialize_env+0x1584>
    1a84:	mov	x24, #0x0                   	// #0
    1a88:	b	cb4 <initialize_env+0x2fc>
    1a8c:	adrp	x21, 0 <parse_boolean>
    1a90:	add	x21, x21, #0x0
    1a94:	mov	x0, x21
    1a98:	bl	0 <getenv>
    1a9c:	mov	x20, x0
    1aa0:	cbnz	x0, 115c <initialize_env+0x7a4>
    1aa4:	b	1a10 <initialize_env+0x1058>
    1aa8:	mov	x0, x20
    1aac:	adrp	x1, 0 <parse_boolean>
    1ab0:	mov	x2, #0x7                   	// #7
    1ab4:	add	x1, x1, #0x0
    1ab8:	bl	0 <strncasecmp>
    1abc:	mov	w25, w0
    1ac0:	cbnz	w0, 1db8 <initialize_env+0x1400>
    1ac4:	add	x20, x20, #0x7
    1ac8:	b	110c <initialize_env+0x754>
    1acc:	adrp	x1, 0 <parse_boolean>
    1ad0:	mov	x0, x20
    1ad4:	add	x1, x1, #0x0
    1ad8:	mov	x2, #0x5                   	// #5
    1adc:	bl	0 <strncasecmp>
    1ae0:	cbnz	w0, 1d8c <initialize_env+0x13d4>
    1ae4:	add	x20, x20, #0x5
    1ae8:	mov	w22, #0x0                   	// #0
    1aec:	str	wzr, [sp, #104]
    1af0:	b	12f8 <initialize_env+0x940>
    1af4:	ldr	x1, [x22]
    1af8:	mov	w0, #0x7d                  	// #125
    1afc:	bl	0 <fputc>
    1b00:	ldr	x0, [x27]
    1b04:	cmp	x0, x21
    1b08:	b.hi	15b0 <initialize_env+0xbf8>  // b.pmore
    1b0c:	b	15f8 <initialize_env+0xc40>
    1b10:	cmp	w0, #0x3
    1b14:	b.eq	2250 <initialize_env+0x1898>  // b.none
    1b18:	cmp	w0, #0x4
    1b1c:	b.ne	14cc <initialize_env+0xb14>  // b.any
    1b20:	ldr	x3, [x20]
    1b24:	adrp	x0, 0 <parse_boolean>
    1b28:	mov	x2, #0x6                   	// #6
    1b2c:	mov	x1, #0x1                   	// #1
    1b30:	add	x0, x0, #0x0
    1b34:	bl	0 <fwrite>
    1b38:	b	14cc <initialize_env+0xb14>
    1b3c:	cmp	w0, #0x1
    1b40:	b.ne	1474 <initialize_env+0xabc>  // b.any
    1b44:	b	20a4 <initialize_env+0x16ec>
    1b48:	cmp	w0, #0x4
    1b4c:	b.ne	1474 <initialize_env+0xabc>  // b.any
    1b50:	adrp	x0, 0 <parse_boolean>
    1b54:	mov	x2, #0x4                   	// #4
    1b58:	mov	x1, #0x1                   	// #1
    1b5c:	add	x0, x0, #0x0
    1b60:	bl	0 <fwrite>
    1b64:	b	1474 <initialize_env+0xabc>
    1b68:	ldrb	w0, [x20, #1]
    1b6c:	add	x20, x20, #0x1
    1b70:	ldrh	w0, [x24, x0, lsl #1]
    1b74:	tbz	w0, #13, 1b84 <initialize_env+0x11cc>
    1b78:	ldrb	w0, [x20, #1]!
    1b7c:	ldrh	w0, [x24, x0, lsl #1]
    1b80:	tbnz	w0, #13, 1b78 <initialize_env+0x11c0>
    1b84:	adrp	x1, 0 <parse_boolean>
    1b88:	mov	x0, x20
    1b8c:	add	x1, x1, #0x0
    1b90:	mov	x2, #0x6                   	// #6
    1b94:	bl	0 <strncasecmp>
    1b98:	cbnz	w0, 1cc4 <initialize_env+0x130c>
    1b9c:	adrp	x23, 0 <parse_boolean>
    1ba0:	add	x19, x23, #0x0
    1ba4:	add	x20, x20, #0x6
    1ba8:	mov	w0, #0x1                   	// #1
    1bac:	str	w0, [x19, #8]
    1bb0:	cmp	w21, #0x1
    1bb4:	b.eq	1d64 <initialize_env+0x13ac>  // b.none
    1bb8:	cbz	w21, 1d58 <initialize_env+0x13a0>
    1bbc:	ldrb	w0, [x20]
    1bc0:	ldrb	w1, [x20]
    1bc4:	ldrh	w0, [x24, x0, lsl #1]
    1bc8:	tbz	w0, #13, 1be0 <initialize_env+0x1228>
    1bcc:	nop
    1bd0:	ldrb	w1, [x20, #1]!
    1bd4:	ubfiz	x0, x1, #1, #8
    1bd8:	ldrh	w0, [x24, x0]
    1bdc:	tbnz	w0, #13, 1bd0 <initialize_env+0x1218>
    1be0:	cbz	w1, 2080 <initialize_env+0x16c8>
    1be4:	cmp	w1, #0x2c
    1be8:	b.ne	a88 <initialize_env+0xd0>  // b.any
    1bec:	ldrb	w0, [x20, #1]
    1bf0:	add	x21, x20, #0x1
    1bf4:	ldrb	w1, [x20, #1]
    1bf8:	ldrh	w0, [x24, x0, lsl #1]
    1bfc:	tbz	w0, #13, 1c10 <initialize_env+0x1258>
    1c00:	ldrb	w1, [x21, #1]!
    1c04:	ubfiz	x0, x1, #1, #8
    1c08:	ldrh	w0, [x24, x0]
    1c0c:	tbnz	w0, #13, 1c00 <initialize_env+0x1248>
    1c10:	cbz	w1, 2068 <initialize_env+0x16b0>
    1c14:	bl	0 <__errno_location>
    1c18:	mov	x20, x0
    1c1c:	add	x1, sp, #0xc8
    1c20:	mov	x0, x21
    1c24:	mov	w2, #0xa                   	// #10
    1c28:	str	wzr, [x20]
    1c2c:	bl	0 <strtoul>
    1c30:	ldr	w1, [x20]
    1c34:	cbnz	w1, 2068 <initialize_env+0x16b0>
    1c38:	ldr	x5, [x22]
    1c3c:	b	1c44 <initialize_env+0x128c>
    1c40:	str	x3, [sp, #200]
    1c44:	ldr	x1, [sp, #200]
    1c48:	add	x3, x1, #0x1
    1c4c:	ldrb	w2, [x1]
    1c50:	ldrb	w4, [x1]
    1c54:	ldrh	w1, [x5, x2, lsl #1]
    1c58:	tbnz	w1, #13, 1c40 <initialize_env+0x1288>
    1c5c:	cbnz	w4, 2068 <initialize_env+0x16b0>
    1c60:	cmp	x0, w0, sxtw
    1c64:	b.ne	2068 <initialize_env+0x16b0>  // b.any
    1c68:	cbnz	x0, 1c7c <initialize_env+0x12c4>
    1c6c:	ldr	w0, [x19, #8]
    1c70:	and	w0, w0, #0x7fffffff
    1c74:	cmp	w0, #0x1
    1c78:	cset	x0, ne  // ne = any
    1c7c:	str	w0, [x19, #12]
    1c80:	b	a94 <initialize_env+0xdc>
    1c84:	adrp	x1, 0 <parse_boolean>
    1c88:	mov	x0, x22
    1c8c:	add	x1, x1, #0x0
    1c90:	mov	x2, #0x5                   	// #5
    1c94:	bl	0 <strncasecmp>
    1c98:	cbz	w0, 1dec <initialize_env+0x1434>
    1c9c:	adrp	x1, 0 <parse_boolean>
    1ca0:	mov	x0, x22
    1ca4:	add	x1, x1, #0x0
    1ca8:	mov	x2, #0x7                   	// #7
    1cac:	bl	0 <strncasecmp>
    1cb0:	cbnz	w0, 21dc <initialize_env+0x1824>
    1cb4:	add	x0, x22, #0x7
    1cb8:	mov	w26, #0x3                   	// #3
    1cbc:	str	x0, [sp, #176]
    1cc0:	b	d50 <initialize_env+0x398>
    1cc4:	adrp	x1, 0 <parse_boolean>
    1cc8:	mov	x0, x20
    1ccc:	add	x1, x1, #0x0
    1cd0:	mov	x2, #0x7                   	// #7
    1cd4:	bl	0 <strncasecmp>
    1cd8:	cbz	w0, 1dfc <initialize_env+0x1444>
    1cdc:	adrp	x1, 0 <parse_boolean>
    1ce0:	mov	x0, x20
    1ce4:	add	x1, x1, #0x0
    1ce8:	mov	x2, #0x6                   	// #6
    1cec:	bl	0 <strncasecmp>
    1cf0:	cbnz	w0, 22c4 <initialize_env+0x190c>
    1cf4:	adrp	x23, 0 <parse_boolean>
    1cf8:	add	x19, x23, #0x0
    1cfc:	mov	w0, #0x3                   	// #3
    1d00:	add	x20, x20, #0x6
    1d04:	str	w0, [x19, #8]
    1d08:	b	1bb0 <initialize_env+0x11f8>
    1d0c:	ldr	x1, [sp, #168]
    1d10:	mov	x0, #0x1ffff               	// #131071
    1d14:	cmp	x1, x0
    1d18:	b.hi	1e14 <initialize_env+0x145c>  // b.pmore
    1d1c:	adrp	x0, 0 <parse_boolean>
    1d20:	mov	x1, #0x80                  	// #128
    1d24:	add	x0, x0, #0x0
    1d28:	bl	0 <gomp_error>
    1d2c:	b	1294 <initialize_env+0x8dc>
    1d30:	mov	x1, #0xffffffffffffffff    	// #-1
    1d34:	ldr	w0, [sp, #96]
    1d38:	cbz	w0, 1f08 <initialize_env+0x1550>
    1d3c:	mov	w0, #0x1                   	// #1
    1d40:	str	w0, [sp, #96]
    1d44:	b	dc8 <initialize_env+0x410>
    1d48:	bl	0 <strdup>
    1d4c:	adrp	x1, 8 <parse_boolean+0x8>
    1d50:	str	x0, [x1]
    1d54:	b	1768 <initialize_env+0xdb0>
    1d58:	ldr	w0, [x19, #8]
    1d5c:	cmp	w0, #0x1
    1d60:	b.ne	1bbc <initialize_env+0x1204>  // b.any
    1d64:	ldr	w0, [x19, #8]
    1d68:	orr	w0, w0, #0x80000000
    1d6c:	str	w0, [x19, #8]
    1d70:	b	1bbc <initialize_env+0x1204>
    1d74:	strb	w4, [x19, #26]
    1d78:	ldrb	w0, [x19, #26]
    1d7c:	cmp	w0, #0x0
    1d80:	cset	w0, eq  // eq = none
    1d84:	str	w0, [sp, #96]
    1d88:	b	cd0 <initialize_env+0x318>
    1d8c:	adrp	x1, 0 <parse_boolean>
    1d90:	mov	x0, x20
    1d94:	add	x1, x1, #0x0
    1d98:	mov	x2, #0x7                   	// #7
    1d9c:	bl	0 <strncasecmp>
    1da0:	cbnz	w0, 1ee8 <initialize_env+0x1530>
    1da4:	mov	w0, #0x1                   	// #1
    1da8:	add	x20, x20, #0x7
    1dac:	mov	w22, w0
    1db0:	str	w0, [sp, #104]
    1db4:	b	12f8 <initialize_env+0x940>
    1db8:	adrp	x20, 0 <parse_boolean>
    1dbc:	mov	w25, #0xffffffff            	// #-1
    1dc0:	add	x20, x20, #0x0
    1dc4:	b	110c <initialize_env+0x754>
    1dc8:	mov	w21, #0x0                   	// #0
    1dcc:	b	1b84 <initialize_env+0x11cc>
    1dd0:	cbz	w25, 1efc <initialize_env+0x1544>
    1dd4:	adrp	x0, 8 <parse_boolean+0x8>
    1dd8:	mov	x1, #0x64                  	// #100
    1ddc:	mov	w25, #0xffffffff            	// #-1
    1de0:	mov	x2, x1
    1de4:	str	x1, [x0]
    1de8:	b	122c <initialize_env+0x874>
    1dec:	add	x0, x22, #0x5
    1df0:	mov	w26, #0x2                   	// #2
    1df4:	str	x0, [sp, #176]
    1df8:	b	d50 <initialize_env+0x398>
    1dfc:	adrp	x23, 0 <parse_boolean>
    1e00:	add	x19, x23, #0x0
    1e04:	mov	w0, #0x2                   	// #2
    1e08:	add	x20, x20, #0x7
    1e0c:	str	w0, [x19, #8]
    1e10:	b	1bb0 <initialize_env+0x11f8>
    1e14:	adrp	x0, 0 <parse_boolean>
    1e18:	add	x0, x0, #0x0
    1e1c:	bl	0 <gomp_error>
    1e20:	b	1294 <initialize_env+0x8dc>
    1e24:	ldrb	w0, [x1, #1]
    1e28:	ldrh	w0, [x24, x0, lsl #1]
    1e2c:	tbz	w0, #13, 1e50 <initialize_env+0x1498>
    1e30:	add	x1, x1, #0x2
    1e34:	nop
    1e38:	mov	x22, x1
    1e3c:	str	x1, [sp, #176]
    1e40:	add	x1, x1, #0x1
    1e44:	ldrb	w0, [x22]
    1e48:	ldrh	w0, [x24, x0, lsl #1]
    1e4c:	tbnz	w0, #13, 1e38 <initialize_env+0x1480>
    1e50:	bl	0 <__errno_location>
    1e54:	mov	x24, x0
    1e58:	add	x1, sp, #0xb8
    1e5c:	mov	w2, #0xa                   	// #10
    1e60:	mov	x0, x22
    1e64:	str	wzr, [x24]
    1e68:	bl	0 <strtoul>
    1e6c:	mov	x1, x0
    1e70:	ldr	w2, [x24]
    1e74:	cbnz	w2, d98 <initialize_env+0x3e0>
    1e78:	ldr	x6, [sp, #184]
    1e7c:	str	x6, [sp, #176]
    1e80:	ldr	x5, [x21]
    1e84:	ldrb	w0, [x6]
    1e88:	ldrb	w3, [x6]
    1e8c:	ldrh	w0, [x5, x0, lsl #1]
    1e90:	tbz	w0, #13, 1eb0 <initialize_env+0x14f8>
    1e94:	add	x2, x6, #0x1
    1e98:	str	x2, [sp, #176]
    1e9c:	mov	x6, x2
    1ea0:	ldrb	w3, [x2], #1
    1ea4:	ubfiz	x4, x3, #1, #8
    1ea8:	ldrh	w4, [x5, x4]
    1eac:	tbnz	w4, #13, 1e98 <initialize_env+0x14e0>
    1eb0:	cmp	w3, #0x29
    1eb4:	b.ne	d98 <initialize_env+0x3e0>  // b.any
    1eb8:	add	x6, x6, #0x1
    1ebc:	str	x6, [sp, #176]
    1ec0:	b	1ec8 <initialize_env+0x1510>
    1ec4:	str	x0, [sp, #176]
    1ec8:	ldr	x2, [sp, #176]
    1ecc:	add	x0, x2, #0x1
    1ed0:	ldrb	w3, [x2]
    1ed4:	ldrb	w4, [x2]
    1ed8:	ldrh	w2, [x5, x3, lsl #1]
    1edc:	tbnz	w2, #13, 1ec4 <initialize_env+0x150c>
    1ee0:	cbz	w4, 1d34 <initialize_env+0x137c>
    1ee4:	b	d98 <initialize_env+0x3e0>
    1ee8:	adrp	x20, 0 <parse_boolean>
    1eec:	mov	w22, #0x0                   	// #0
    1ef0:	add	x20, x20, #0x0
    1ef4:	str	wzr, [sp, #104]
    1ef8:	b	12f8 <initialize_env+0x940>
    1efc:	adrp	x0, 8 <parse_boolean+0x8>
    1f00:	ldr	x2, [x0]
    1f04:	b	122c <initialize_env+0x874>
    1f08:	mov	w0, w26
    1f0c:	mov	w2, #0x0                   	// #0
    1f10:	bl	0 <gomp_affinity_init_level>
    1f14:	ands	w0, w0, #0xff
    1f18:	str	w0, [sp, #96]
    1f1c:	b.eq	dc8 <initialize_env+0x410>  // b.none
    1f20:	ldrb	w0, [x19, #26]
    1f24:	cbnz	w0, 1d3c <initialize_env+0x1384>
    1f28:	mov	w0, #0x1                   	// #1
    1f2c:	mov	w1, #0x1                   	// #1
    1f30:	strb	w0, [x19, #26]
    1f34:	str	w1, [sp, #96]
    1f38:	b	dc8 <initialize_env+0x410>
    1f3c:	add	x0, x19, #0x50
    1f40:	str	x0, [sp, #104]
    1f44:	add	x0, x19, #0x5c
    1f48:	str	x0, [sp, #112]
    1f4c:	mov	x28, #0x0                   	// #0
    1f50:	mov	x21, #0x0                   	// #0
    1f54:	add	x26, x19, #0x38
    1f58:	add	x27, x3, #0x1
    1f5c:	cmp	x21, x28
    1f60:	mov	x24, #0x0                   	// #0
    1f64:	b.eq	2020 <initialize_env+0x1668>  // b.none
    1f68:	ldrb	w0, [x3, #1]
    1f6c:	ubfiz	x1, x0, #1, #8
    1f70:	ldrh	w1, [x20, x1]
    1f74:	tbz	w1, #13, 1f88 <initialize_env+0x15d0>
    1f78:	ldrb	w0, [x27, #1]!
    1f7c:	ubfiz	x1, x0, #1, #8
    1f80:	ldrh	w1, [x20, x1]
    1f84:	tbnz	w1, #13, 1f78 <initialize_env+0x15c0>
    1f88:	cbz	w0, cb4 <initialize_env+0x2fc>
    1f8c:	ldr	x1, [sp, #104]
    1f90:	mov	x0, x27
    1f94:	ldrb	w25, [x26, #31]
    1f98:	mov	x2, x25
    1f9c:	bl	0 <strncasecmp>
    1fa0:	cbz	w0, 23b0 <initialize_env+0x19f8>
    1fa4:	ldr	x1, [sp, #112]
    1fa8:	mov	x0, x27
    1fac:	ldrb	w25, [x26, #43]
    1fb0:	mov	x2, x25
    1fb4:	bl	0 <strncasecmp>
    1fb8:	cbz	w0, 23bc <initialize_env+0x1a04>
    1fbc:	ldrb	w25, [x26, #55]
    1fc0:	add	x1, x19, #0x68
    1fc4:	mov	x0, x27
    1fc8:	mov	x2, x25
    1fcc:	bl	0 <strncasecmp>
    1fd0:	cbnz	w0, cb4 <initialize_env+0x2fc>
    1fd4:	ldrb	w4, [x26, #56]
    1fd8:	add	x3, x27, x25
    1fdc:	strb	w4, [x24, x21]
    1fe0:	add	x21, x21, #0x1
    1fe4:	ldrb	w0, [x3]
    1fe8:	ubfiz	x1, x0, #1, #8
    1fec:	ldrh	w1, [x20, x1]
    1ff0:	tbz	w1, #13, 2008 <initialize_env+0x1650>
    1ff4:	nop
    1ff8:	ldrb	w0, [x3, #1]!
    1ffc:	ubfiz	x1, x0, #1, #8
    2000:	ldrh	w1, [x20, x1]
    2004:	tbnz	w1, #13, 1ff8 <initialize_env+0x1640>
    2008:	cbz	w0, 23d8 <initialize_env+0x1a20>
    200c:	cmp	w0, #0x2c
    2010:	b.ne	cb4 <initialize_env+0x2fc>  // b.any
    2014:	add	x27, x3, #0x1
    2018:	cmp	x21, x28
    201c:	b.ne	1f68 <initialize_env+0x15b0>  // b.any
    2020:	cbz	x28, 20e0 <initialize_env+0x1728>
    2024:	lsl	x28, x28, #1
    2028:	mov	x0, x24
    202c:	mov	x1, x28
    2030:	str	x3, [sp, #120]
    2034:	bl	0 <realloc>
    2038:	ldr	x3, [sp, #120]
    203c:	cbz	x0, 2608 <initialize_env+0x1c50>
    2040:	mov	x24, x0
    2044:	b	1f68 <initialize_env+0x15b0>
    2048:	cmp	w0, #0x67
    204c:	b.eq	2334 <initialize_env+0x197c>  // b.none
    2050:	cmp	w0, #0x6b
    2054:	mov	x4, #0x3e8                 	// #1000
    2058:	b.ne	1a00 <initialize_env+0x1048>  // b.any
    205c:	add	x20, x20, #0x1
    2060:	str	x20, [sp, #200]
    2064:	b	11cc <initialize_env+0x814>
    2068:	adrp	x0, 0 <parse_boolean>
    206c:	add	x0, x0, #0x0
    2070:	bl	0 <gomp_error>
    2074:	b	a94 <initialize_env+0xdc>
    2078:	str	wzr, [sp, #96]
    207c:	b	cd0 <initialize_env+0x318>
    2080:	ldr	w0, [x19, #8]
    2084:	and	w0, w0, #0x7fffffff
    2088:	cmp	w0, #0x1
    208c:	cset	w0, ne  // ne = any
    2090:	str	w0, [x19, #12]
    2094:	b	a94 <initialize_env+0xdc>
    2098:	mov	w1, #0x80000001            	// #-2147483647
    209c:	cmp	w0, w1
    20a0:	b.ne	21c0 <initialize_env+0x1808>  // b.any
    20a4:	ldr	x3, [x20]
    20a8:	mov	x2, #0x6                   	// #6
    20ac:	adrp	x0, 0 <parse_boolean>
    20b0:	mov	x1, #0x1                   	// #1
    20b4:	add	x0, x0, #0x0
    20b8:	bl	0 <fwrite>
    20bc:	ldr	w2, [x19, #12]
    20c0:	cbz	w2, 1474 <initialize_env+0xabc>
    20c4:	b	184c <initialize_env+0xe94>
    20c8:	bl	0 <strerror>
    20cc:	mov	x1, x0
    20d0:	adrp	x0, 0 <parse_boolean>
    20d4:	add	x0, x0, #0x0
    20d8:	bl	0 <gomp_error>
    20dc:	b	1294 <initialize_env+0x8dc>
    20e0:	mov	x0, x24
    20e4:	mov	x1, #0x10                  	// #16
    20e8:	str	w4, [sp, #120]
    20ec:	str	x3, [sp, #128]
    20f0:	bl	0 <realloc>
    20f4:	cbz	x0, 2608 <initialize_env+0x1c50>
    20f8:	ldr	w4, [sp, #120]
    20fc:	mov	x24, x0
    2100:	mov	x28, #0x10                  	// #16
    2104:	mov	x21, #0x1                   	// #1
    2108:	strb	w4, [x0]
    210c:	ldr	x3, [sp, #128]
    2110:	b	1f68 <initialize_env+0x15b0>
    2114:	cbnz	w25, 21a4 <initialize_env+0x17ec>
    2118:	adrp	x0, 8 <parse_boolean+0x8>
    211c:	adrp	x26, 8 <parse_boolean+0x8>
    2120:	ldr	x2, [x0]
    2124:	b	122c <initialize_env+0x874>
    2128:	ldr	w0, [sp, #96]
    212c:	cbnz	w0, 1928 <initialize_env+0xf70>
    2130:	adrp	x4, 8 <parse_boolean+0x8>
    2134:	adrp	x5, 8 <parse_boolean+0x8>
    2138:	mov	x0, x28
    213c:	mov	w1, #0x1                   	// #1
    2140:	str	xzr, [x5]
    2144:	mov	w26, #0x1                   	// #1
    2148:	str	x4, [sp, #112]
    214c:	bl	0 <gomp_affinity_alloc>
    2150:	ldr	x4, [sp, #112]
    2154:	str	x0, [x4]
    2158:	cbnz	x0, df8 <initialize_env+0x440>
    215c:	b	1928 <initialize_env+0xf70>
    2160:	ldr	x3, [x20]
    2164:	mov	x2, #0x19                  	// #25
    2168:	mov	x1, #0x1                   	// #1
    216c:	adrp	x0, 0 <parse_boolean>
    2170:	add	x0, x0, #0x0
    2174:	bl	0 <fwrite>
    2178:	ldr	x0, [x20]
    217c:	adrp	x1, 0 <parse_boolean>
    2180:	ldr	x2, [sp, #96]
    2184:	add	x1, x1, #0x0
    2188:	bl	0 <fprintf>
    218c:	ldr	x2, [x26]
    2190:	adrp	x1, 0 <parse_boolean>
    2194:	ldr	x0, [x20]
    2198:	add	x1, x1, #0x0
    219c:	bl	0 <fprintf>
    21a0:	b	170c <initialize_env+0xd54>
    21a4:	adrp	x26, 8 <parse_boolean+0x8>
    21a8:	mov	x0, #0x93e0                	// #37856
    21ac:	movk	x0, #0x4, lsl #16
    21b0:	str	x0, [x26]
    21b4:	b	1dd4 <initialize_env+0x141c>
    21b8:	str	x28, [x23]
    21bc:	b	bf0 <initialize_env+0x238>
    21c0:	ldr	x3, [x20]
    21c4:	adrp	x0, 0 <parse_boolean>
    21c8:	mov	x2, #0xa                   	// #10
    21cc:	mov	x1, #0x1                   	// #1
    21d0:	add	x0, x0, #0x0
    21d4:	bl	0 <fwrite>
    21d8:	b	1448 <initialize_env+0xa90>
    21dc:	add	x21, sp, #0xc8
    21e0:	mov	x26, #0x0                   	// #0
    21e4:	mov	w24, #0x0                   	// #0
    21e8:	str	x22, [sp, #184]
    21ec:	b	2220 <initialize_env+0x1868>
    21f0:	cbnz	w24, 2204 <initialize_env+0x184c>
    21f4:	add	x26, x26, #0x1
    21f8:	mov	w24, w0
    21fc:	cmp	x26, #0x10, lsl #12
    2200:	b.hi	d98 <initialize_env+0x3e0>  // b.pmore
    2204:	ldr	x0, [sp, #184]
    2208:	add	x1, x0, #0x1
    220c:	ldrb	w0, [x0]
    2210:	cmp	w0, #0x2c
    2214:	cbz	w0, 23f4 <initialize_env+0x1a3c>
    2218:	b.ne	d98 <initialize_env+0x3e0>  // b.any
    221c:	str	x1, [sp, #184]
    2220:	mov	x3, x21
    2224:	add	x2, sp, #0xc0
    2228:	add	x1, sp, #0x9f
    222c:	add	x0, sp, #0xb8
    2230:	bl	208 <parse_one_place>
    2234:	tst	w0, #0xff
    2238:	b.eq	d98 <initialize_env+0x3e0>  // b.none
    223c:	ldrb	w0, [sp, #159]
    2240:	cbnz	w0, 21f0 <initialize_env+0x1838>
    2244:	ldr	x0, [sp, #192]
    2248:	add	x26, x26, x0
    224c:	b	21fc <initialize_env+0x1844>
    2250:	ldr	x3, [x20]
    2254:	adrp	x0, 0 <parse_boolean>
    2258:	mov	x2, #0x5                   	// #5
    225c:	mov	x1, #0x1                   	// #1
    2260:	add	x0, x0, #0x0
    2264:	bl	0 <fwrite>
    2268:	b	14cc <initialize_env+0xb14>
    226c:	ldr	x3, [x20]
    2270:	adrp	x0, 0 <parse_boolean>
    2274:	mov	x2, #0x5                   	// #5
    2278:	mov	x1, #0x1                   	// #1
    227c:	add	x0, x0, #0x0
    2280:	bl	0 <fwrite>
    2284:	b	14cc <initialize_env+0xb14>
    2288:	ldr	x3, [x20]
    228c:	adrp	x0, 0 <parse_boolean>
    2290:	mov	x2, #0x6                   	// #6
    2294:	mov	x1, #0x1                   	// #1
    2298:	add	x0, x0, #0x0
    229c:	bl	0 <fwrite>
    22a0:	b	14cc <initialize_env+0xb14>
    22a4:	adrp	x0, 0 <parse_boolean>
    22a8:	mov	x2, #0x7                   	// #7
    22ac:	add	x0, x0, #0x0
    22b0:	b	1838 <initialize_env+0xe80>
    22b4:	adrp	x0, 0 <parse_boolean>
    22b8:	mov	x2, #0x6                   	// #6
    22bc:	add	x0, x0, #0x0
    22c0:	b	1838 <initialize_env+0xe80>
    22c4:	mov	x0, x20
    22c8:	adrp	x1, 0 <parse_boolean>
    22cc:	mov	x2, #0x4                   	// #4
    22d0:	add	x1, x1, #0x0
    22d4:	adrp	x23, 0 <parse_boolean>
    22d8:	bl	0 <strncasecmp>
    22dc:	add	x19, x23, #0x0
    22e0:	cbnz	w0, a88 <initialize_env+0xd0>
    22e4:	mov	w0, #0x4                   	// #4
    22e8:	add	x20, x20, #0x4
    22ec:	str	w0, [x19, #8]
    22f0:	b	1bb0 <initialize_env+0x11f8>
    22f4:	mov	x4, #0x1                   	// #1
    22f8:	mul	x0, x26, x4
    22fc:	b	1208 <initialize_env+0x850>
    2300:	ldr	x3, [x20]
    2304:	adrp	x0, 0 <parse_boolean>
    2308:	mov	x2, #0xd                   	// #13
    230c:	mov	x1, #0x1                   	// #1
    2310:	add	x0, x0, #0x0
    2314:	bl	0 <fwrite>
    2318:	b	1448 <initialize_env+0xa90>
    231c:	mov	x4, #0x1000                	// #4096
    2320:	movk	x4, #0xd4a5, lsl #16
    2324:	movk	x4, #0xe8, lsl #32
    2328:	b	205c <initialize_env+0x16a4>
    232c:	mov	w0, #0x1                   	// #1
    2330:	b	1a34 <initialize_env+0x107c>
    2334:	mov	x4, #0xca00                	// #51712
    2338:	movk	x4, #0x3b9a, lsl #16
    233c:	b	205c <initialize_env+0x16a4>
    2340:	mov	x4, #0x4240                	// #16960
    2344:	movk	x4, #0xf, lsl #16
    2348:	b	205c <initialize_env+0x16a4>
    234c:	cbz	x20, 237c <initialize_env+0x19c4>
    2350:	lsl	x1, x20, #4
    2354:	mov	x0, x27
    2358:	str	x2, [sp, #96]
    235c:	bl	0 <realloc>
    2360:	lsl	x1, x20, #1
    2364:	ldr	x2, [sp, #96]
    2368:	cbz	x0, 25ec <initialize_env+0x1c34>
    236c:	mov	x27, x0
    2370:	str	x1, [sp, #96]
    2374:	ldr	x4, [x26]
    2378:	b	f60 <initialize_env+0x5a8>
    237c:	mov	x0, x27
    2380:	mov	x1, #0x80                  	// #128
    2384:	str	x2, [sp, #104]
    2388:	bl	0 <realloc>
    238c:	cbz	x0, 25ec <initialize_env+0x1c34>
    2390:	mov	x1, #0x10                  	// #16
    2394:	mov	x27, x0
    2398:	mov	x20, #0x1                   	// #1
    239c:	str	x28, [x0]
    23a0:	str	x1, [sp, #96]
    23a4:	ldr	x4, [x26]
    23a8:	ldr	x2, [sp, #104]
    23ac:	b	f60 <initialize_env+0x5a8>
    23b0:	ldrb	w4, [x26, #32]
    23b4:	add	x3, x27, x25
    23b8:	b	1fdc <initialize_env+0x1624>
    23bc:	ldrb	w4, [x26, #44]
    23c0:	add	x3, x27, x25
    23c4:	b	1fdc <initialize_env+0x1624>
    23c8:	mov	w0, #0x2                   	// #2
    23cc:	b	1a34 <initialize_env+0x107c>
    23d0:	mov	w0, #0x4                   	// #4
    23d4:	b	1a34 <initialize_env+0x107c>
    23d8:	adrp	x1, 8 <parse_boolean+0x8>
    23dc:	adrp	x2, 8 <parse_boolean+0x8>
    23e0:	ldrb	w0, [x24]
    23e4:	str	x24, [x1]
    23e8:	str	x21, [x2]
    23ec:	strb	w0, [x19, #26]
    23f0:	b	1d78 <initialize_env+0x13c0>
    23f4:	ldr	w0, [sp, #96]
    23f8:	cbnz	w0, 1d3c <initialize_env+0x1384>
    23fc:	adrp	x5, 8 <parse_boolean+0x8>
    2400:	adrp	x4, 8 <parse_boolean+0x8>
    2404:	mov	x0, x26
    2408:	mov	w1, #0x0                   	// #0
    240c:	str	xzr, [x5]
    2410:	stp	x4, x5, [sp, #104]
    2414:	bl	0 <gomp_affinity_alloc>
    2418:	ldr	x4, [sp, #104]
    241c:	str	x0, [x4]
    2420:	cbz	x0, dc8 <initialize_env+0x410>
    2424:	ldr	x5, [sp, #112]
    2428:	add	x24, x4, #0x0
    242c:	add	x27, x5, #0x0
    2430:	ldr	x1, [x27]
    2434:	stp	x5, x4, [sp, #104]
    2438:	ldr	x0, [x24]
    243c:	ldr	x0, [x0, x1, lsl #3]
    2440:	bl	0 <gomp_affinity_init_place>
    2444:	mov	x3, x21
    2448:	add	x2, sp, #0xc0
    244c:	add	x1, sp, #0x9f
    2450:	add	x0, sp, #0xb0
    2454:	bl	208 <parse_one_place>
    2458:	tst	w0, #0xff
    245c:	ldp	x5, x4, [sp, #104]
    2460:	b.eq	da0 <initialize_env+0x3e8>  // b.none
    2464:	ldrb	w0, [sp, #159]
    2468:	cbnz	w0, 2510 <initialize_env+0x1b58>
    246c:	ldr	x0, [sp, #192]
    2470:	cmp	x0, #0x1
    2474:	b.ne	249c <initialize_env+0x1ae4>  // b.any
    2478:	ldr	x0, [x27]
    247c:	add	x0, x0, #0x1
    2480:	str	x0, [x27]
    2484:	ldr	x0, [sp, #176]
    2488:	ldrb	w1, [x0]
    248c:	cbz	w1, 259c <initialize_env+0x1be4>
    2490:	add	x0, x0, #0x1
    2494:	str	x0, [sp, #176]
    2498:	b	2430 <initialize_env+0x1a78>
    249c:	mov	x22, #0x0                   	// #0
    24a0:	b	24d8 <initialize_env+0x1b20>
    24a4:	add	x1, x22, x1
    24a8:	stp	x5, x4, [sp, #104]
    24ac:	add	x0, x1, #0x1
    24b0:	ldr	x3, [x24]
    24b4:	add	x22, x22, #0x1
    24b8:	ldr	x2, [sp, #200]
    24bc:	ldr	x0, [x3, x0, lsl #3]
    24c0:	ldr	x1, [x3, x1, lsl #3]
    24c4:	bl	0 <gomp_affinity_copy_place>
    24c8:	tst	w0, #0xff
    24cc:	ldp	x5, x4, [sp, #104]
    24d0:	b.eq	da0 <initialize_env+0x3e8>  // b.none
    24d4:	ldr	x0, [sp, #192]
    24d8:	sub	x1, x0, #0x1
    24dc:	cmp	x22, x1
    24e0:	ldr	x1, [x27]
    24e4:	b.cc	24a4 <initialize_env+0x1aec>  // b.lo, b.ul, b.last
    24e8:	add	x1, x0, x1
    24ec:	str	x1, [x27]
    24f0:	b	2484 <initialize_env+0x1acc>
    24f4:	adrp	x24, 8 <parse_boolean+0x8>
    24f8:	adrp	x0, 8 <parse_boolean+0x8>
    24fc:	ldr	x1, [x27]
    2500:	str	x27, [x24]
    2504:	str	x3, [x0]
    2508:	str	x1, [x23]
    250c:	b	bf0 <initialize_env+0x238>
    2510:	mov	x22, #0x0                   	// #0
    2514:	b	253c <initialize_env+0x1b84>
    2518:	ldr	x2, [x24]
    251c:	stp	x5, x4, [sp, #104]
    2520:	ldr	x1, [x2, x0, lsl #3]
    2524:	ldr	x0, [x2, x22, lsl #3]
    2528:	bl	0 <gomp_affinity_same_place>
    252c:	tst	w0, #0xff
    2530:	ldp	x5, x4, [sp, #104]
    2534:	b.ne	2548 <initialize_env+0x1b90>  // b.any
    2538:	add	x22, x22, #0x1
    253c:	ldr	x0, [x27]
    2540:	cmp	x22, x0
    2544:	b.cc	2518 <initialize_env+0x1b60>  // b.lo, b.ul, b.last
    2548:	ldr	x0, [x27]
    254c:	cmp	x22, x0
    2550:	b.eq	25d4 <initialize_env+0x1c1c>  // b.none
    2554:	ldr	x3, [x24]
    2558:	lsl	x6, x22, #3
    255c:	sub	x0, x0, #0x1
    2560:	add	x1, x6, #0x8
    2564:	sub	x2, x0, x22
    2568:	add	x1, x3, x1
    256c:	add	x0, x3, x22, lsl #3
    2570:	stp	x5, x4, [sp, #104]
    2574:	lsl	x2, x2, #3
    2578:	ldr	x22, [x3, x6]
    257c:	bl	0 <memmove>
    2580:	ldr	x0, [x27]
    2584:	ldr	x1, [x24]
    2588:	sub	x0, x0, #0x1
    258c:	str	x0, [x27]
    2590:	ldp	x5, x4, [sp, #104]
    2594:	str	x22, [x1, x0, lsl #3]
    2598:	b	2484 <initialize_env+0x1acc>
    259c:	ldr	x0, [x5]
    25a0:	stp	x5, x4, [sp, #104]
    25a4:	cbz	x0, 25c0 <initialize_env+0x1c08>
    25a8:	mov	w0, #0x0                   	// #0
    25ac:	bl	0 <gomp_affinity_finalize_place_list>
    25b0:	tst	w0, #0xff
    25b4:	ldp	x5, x4, [sp, #104]
    25b8:	b.ne	1f20 <initialize_env+0x1568>  // b.any
    25bc:	b	da0 <initialize_env+0x3e8>
    25c0:	adrp	x0, 0 <parse_boolean>
    25c4:	add	x0, x0, #0x0
    25c8:	bl	0 <gomp_error>
    25cc:	ldp	x5, x4, [sp, #104]
    25d0:	b	da0 <initialize_env+0x3e8>
    25d4:	adrp	x0, 0 <parse_boolean>
    25d8:	add	x0, x0, #0x0
    25dc:	stp	x5, x4, [sp, #104]
    25e0:	bl	0 <gomp_error>
    25e4:	ldp	x5, x4, [sp, #104]
    25e8:	b	da0 <initialize_env+0x3e8>
    25ec:	mov	x0, x27
    25f0:	bl	0 <free>
    25f4:	mov	x1, x22
    25f8:	adrp	x0, 0 <parse_boolean>
    25fc:	add	x0, x0, #0x0
    2600:	bl	0 <gomp_error>
    2604:	b	be8 <initialize_env+0x230>
    2608:	mov	x0, x24
    260c:	bl	0 <free>
    2610:	mov	x1, x22
    2614:	adrp	x0, 0 <parse_boolean>
    2618:	add	x0, x0, #0x0
    261c:	bl	0 <gomp_error>
    2620:	b	cd0 <initialize_env+0x318>

error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_vdebug>:
   0:	adrp	x0, 0 <gomp_debug_var>
   4:	ldr	w0, [x0]
   8:	cbnz	w0, 10 <gomp_vdebug+0x10>
   c:	ret
  10:	mov	x3, x2
  14:	stp	x29, x30, [sp, #-48]!
  18:	adrp	x0, 0 <stderr>
  1c:	mov	x29, sp
  20:	ldp	x4, x5, [x3]
  24:	stp	x4, x5, [sp, #16]
  28:	add	x2, sp, #0x10
  2c:	ldp	x4, x5, [x3, #16]
  30:	stp	x4, x5, [sp, #32]
  34:	ldr	x0, [x0]
  38:	bl	0 <vfprintf>
  3c:	ldp	x29, x30, [sp], #48
  40:	ret
  44:	nop

0000000000000048 <gomp_debug>:
  48:	stp	x29, x30, [sp, #-288]!
  4c:	adrp	x0, 0 <gomp_debug_var>
  50:	mov	w9, #0xffffffd0            	// #-48
  54:	mov	x29, sp
  58:	add	x10, sp, #0xf0
  5c:	add	x11, sp, #0x120
  60:	mov	w8, #0xffffff80            	// #-128
  64:	stp	x11, x11, [sp, #48]
  68:	ldr	w0, [x0]
  6c:	str	x10, [sp, #64]
  70:	stp	w9, w8, [sp, #72]
  74:	ldp	x10, x11, [sp, #48]
  78:	stp	x10, x11, [sp, #80]
  7c:	ldp	x8, x9, [sp, #64]
  80:	stp	x8, x9, [sp, #96]
  84:	str	q0, [sp, #112]
  88:	str	q1, [sp, #128]
  8c:	str	q2, [sp, #144]
  90:	str	q3, [sp, #160]
  94:	str	q4, [sp, #176]
  98:	str	q5, [sp, #192]
  9c:	str	q6, [sp, #208]
  a0:	str	q7, [sp, #224]
  a4:	stp	x2, x3, [sp, #240]
  a8:	stp	x4, x5, [sp, #256]
  ac:	stp	x6, x7, [sp, #272]
  b0:	cbnz	w0, bc <gomp_debug+0x74>
  b4:	ldp	x29, x30, [sp], #288
  b8:	ret
  bc:	adrp	x0, 0 <stderr>
  c0:	add	x2, sp, #0x10
  c4:	stp	x10, x11, [sp, #16]
  c8:	ldr	x0, [x0]
  cc:	stp	x8, x9, [sp, #32]
  d0:	bl	0 <vfprintf>
  d4:	ldp	x29, x30, [sp], #288
  d8:	ret
  dc:	nop

00000000000000e0 <gomp_verror>:
  e0:	stp	x29, x30, [sp, #-80]!
  e4:	mov	x2, #0xa                   	// #10
  e8:	mov	x29, sp
  ec:	stp	x19, x20, [sp, #16]
  f0:	adrp	x20, 0 <stderr>
  f4:	mov	x19, x1
  f8:	ldr	x3, [x20]
  fc:	mov	x1, #0x1                   	// #1
 100:	str	x21, [sp, #32]
 104:	mov	x21, x0
 108:	adrp	x0, 0 <gomp_vdebug>
 10c:	add	x0, x0, #0x0
 110:	bl	0 <fwrite>
 114:	ldp	x6, x7, [x19]
 118:	mov	x1, x21
 11c:	ldp	x4, x5, [x19, #16]
 120:	add	x2, sp, #0x30
 124:	ldr	x0, [x20]
 128:	stp	x6, x7, [sp, #48]
 12c:	stp	x4, x5, [sp, #64]
 130:	bl	0 <vfprintf>
 134:	ldr	x1, [x20]
 138:	mov	w0, #0xa                   	// #10
 13c:	ldp	x19, x20, [sp, #16]
 140:	ldr	x21, [sp, #32]
 144:	ldp	x29, x30, [sp], #80
 148:	b	0 <fputc>
 14c:	nop

0000000000000150 <gomp_error>:
 150:	stp	x29, x30, [sp, #-320]!
 154:	mov	w9, #0xffffffc8            	// #-56
 158:	mov	w8, #0xffffff80            	// #-128
 15c:	mov	x29, sp
 160:	add	x10, sp, #0x100
 164:	add	x11, sp, #0x140
 168:	stp	x11, x11, [sp, #64]
 16c:	str	x10, [sp, #80]
 170:	stp	w9, w8, [sp, #88]
 174:	stp	x19, x20, [sp, #16]
 178:	adrp	x19, 0 <stderr>
 17c:	mov	x20, x0
 180:	ldp	x10, x11, [sp, #64]
 184:	stp	x3, x4, [sp, #280]
 188:	adrp	x0, 0 <gomp_vdebug>
 18c:	ldp	x8, x9, [sp, #80]
 190:	add	x0, x0, #0x0
 194:	ldr	x3, [x19]
 198:	stp	x10, x11, [sp, #96]
 19c:	stp	x8, x9, [sp, #112]
 1a0:	str	q0, [sp, #128]
 1a4:	str	q1, [sp, #144]
 1a8:	str	q2, [sp, #160]
 1ac:	str	q3, [sp, #176]
 1b0:	str	q4, [sp, #192]
 1b4:	str	q5, [sp, #208]
 1b8:	str	q6, [sp, #224]
 1bc:	str	q7, [sp, #240]
 1c0:	stp	x1, x2, [sp, #264]
 1c4:	mov	x1, #0x1                   	// #1
 1c8:	mov	x2, #0xa                   	// #10
 1cc:	stp	x5, x6, [sp, #296]
 1d0:	str	x7, [sp, #312]
 1d4:	bl	0 <fwrite>
 1d8:	ldp	x6, x7, [sp, #96]
 1dc:	add	x2, sp, #0x20
 1e0:	ldp	x4, x5, [sp, #112]
 1e4:	mov	x1, x20
 1e8:	ldr	x0, [x19]
 1ec:	stp	x6, x7, [sp, #32]
 1f0:	stp	x4, x5, [sp, #48]
 1f4:	bl	0 <vfprintf>
 1f8:	ldr	x1, [x19]
 1fc:	mov	w0, #0xa                   	// #10
 200:	bl	0 <fputc>
 204:	ldp	x19, x20, [sp, #16]
 208:	ldp	x29, x30, [sp], #320
 20c:	ret

0000000000000210 <gomp_vfatal>:
 210:	mov	x2, x1
 214:	stp	x29, x30, [sp, #-48]!
 218:	mov	x29, sp
 21c:	ldp	x4, x5, [x2]
 220:	stp	x4, x5, [sp, #16]
 224:	add	x1, sp, #0x10
 228:	ldp	x2, x3, [x2, #16]
 22c:	stp	x2, x3, [sp, #32]
 230:	bl	e0 <gomp_verror>
 234:	mov	w0, #0x1                   	// #1
 238:	bl	0 <exit>
 23c:	nop

0000000000000240 <gomp_fatal>:
 240:	stp	x29, x30, [sp, #-272]!
 244:	mov	w9, #0xffffffc8            	// #-56
 248:	mov	w8, #0xffffff80            	// #-128
 24c:	mov	x29, sp
 250:	add	x10, sp, #0xd0
 254:	add	x11, sp, #0x110
 258:	stp	x11, x11, [sp, #48]
 25c:	str	x10, [sp, #64]
 260:	stp	w9, w8, [sp, #72]
 264:	ldp	x10, x11, [sp, #48]
 268:	stp	x10, x11, [sp, #16]
 26c:	ldp	x8, x9, [sp, #64]
 270:	stp	x8, x9, [sp, #32]
 274:	str	q0, [sp, #80]
 278:	str	q1, [sp, #96]
 27c:	str	q2, [sp, #112]
 280:	str	q3, [sp, #128]
 284:	str	q4, [sp, #144]
 288:	str	q5, [sp, #160]
 28c:	str	q6, [sp, #176]
 290:	str	q7, [sp, #192]
 294:	stp	x1, x2, [sp, #216]
 298:	add	x1, sp, #0x10
 29c:	stp	x3, x4, [sp, #232]
 2a0:	stp	x5, x6, [sp, #248]
 2a4:	str	x7, [sp, #264]
 2a8:	bl	210 <gomp_vfatal>

icv.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_ialias_omp_set_num_threads>:
   0:	adrp	x2, 0 <gomp_tls_data>
   4:	ldr	x2, [x2]
   8:	mrs	x1, tpidr_el0
   c:	stp	x29, x30, [sp, #-32]!
  10:	add	x1, x1, x2
  14:	mov	x29, sp
  18:	str	x19, [sp, #16]
  1c:	mov	w19, w0
  20:	ldr	x0, [x1, #80]
  24:	cbz	x0, 48 <gomp_ialias_omp_set_num_threads+0x48>
  28:	add	x0, x0, #0x90
  2c:	cmp	w19, #0x0
  30:	csinc	w19, w19, wzr, gt
  34:	sxtw	x19, w19
  38:	str	x19, [x0]
  3c:	ldr	x19, [sp, #16]
  40:	ldp	x29, x30, [sp], #32
  44:	ret
  48:	bl	0 <gomp_new_icv>
  4c:	cmp	w19, #0x0
  50:	csinc	w19, w19, wzr, gt
  54:	sxtw	x19, w19
  58:	str	x19, [x0]
  5c:	ldr	x19, [sp, #16]
  60:	ldp	x29, x30, [sp], #32
  64:	ret

0000000000000068 <gomp_ialias_omp_set_dynamic>:
  68:	adrp	x2, 0 <gomp_tls_data>
  6c:	ldr	x2, [x2]
  70:	mrs	x1, tpidr_el0
  74:	stp	x29, x30, [sp, #-32]!
  78:	add	x1, x1, x2
  7c:	mov	x29, sp
  80:	ldr	x1, [x1, #80]
  84:	str	x19, [sp, #16]
  88:	mov	w19, w0
  8c:	cbz	x1, ac <gomp_ialias_omp_set_dynamic+0x44>
  90:	add	x1, x1, #0x90
  94:	cmp	w19, #0x0
  98:	cset	w0, ne  // ne = any
  9c:	ldr	x19, [sp, #16]
  a0:	strb	w0, [x1, #24]
  a4:	ldp	x29, x30, [sp], #32
  a8:	ret
  ac:	bl	0 <gomp_new_icv>
  b0:	mov	x1, x0
  b4:	cmp	w19, #0x0
  b8:	cset	w0, ne  // ne = any
  bc:	strb	w0, [x1, #24]
  c0:	ldr	x19, [sp, #16]
  c4:	ldp	x29, x30, [sp], #32
  c8:	ret
  cc:	nop

00000000000000d0 <gomp_ialias_omp_get_dynamic>:
  d0:	adrp	x2, 0 <gomp_tls_data>
  d4:	ldr	x2, [x2]
  d8:	mrs	x1, tpidr_el0
  dc:	adrp	x0, 0 <gomp_global_icv>
  e0:	add	x0, x0, #0x0
  e4:	add	x1, x1, x2
  e8:	ldr	x1, [x1, #80]
  ec:	cmp	x1, #0x0
  f0:	add	x1, x1, #0x90
  f4:	csel	x0, x0, x1, eq  // eq = none
  f8:	ldrb	w0, [x0, #24]
  fc:	ret

0000000000000100 <gomp_ialias_omp_set_nested>:
 100:	adrp	x2, 0 <gomp_tls_data>
 104:	ldr	x2, [x2]
 108:	mrs	x1, tpidr_el0
 10c:	stp	x29, x30, [sp, #-32]!
 110:	add	x1, x1, x2
 114:	mov	x29, sp
 118:	ldr	x1, [x1, #80]
 11c:	str	x19, [sp, #16]
 120:	mov	w19, w0
 124:	cbz	x1, 144 <gomp_ialias_omp_set_nested+0x44>
 128:	add	x1, x1, #0x90
 12c:	cmp	w19, #0x0
 130:	cset	w0, ne  // ne = any
 134:	ldr	x19, [sp, #16]
 138:	strb	w0, [x1, #25]
 13c:	ldp	x29, x30, [sp], #32
 140:	ret
 144:	bl	0 <gomp_new_icv>
 148:	mov	x1, x0
 14c:	cmp	w19, #0x0
 150:	cset	w0, ne  // ne = any
 154:	strb	w0, [x1, #25]
 158:	ldr	x19, [sp, #16]
 15c:	ldp	x29, x30, [sp], #32
 160:	ret
 164:	nop

0000000000000168 <gomp_ialias_omp_get_nested>:
 168:	adrp	x2, 0 <gomp_tls_data>
 16c:	ldr	x2, [x2]
 170:	mrs	x1, tpidr_el0
 174:	adrp	x0, 0 <gomp_global_icv>
 178:	add	x0, x0, #0x0
 17c:	add	x1, x1, x2
 180:	ldr	x1, [x1, #80]
 184:	cmp	x1, #0x0
 188:	add	x1, x1, #0x90
 18c:	csel	x0, x0, x1, eq  // eq = none
 190:	ldrb	w0, [x0, #25]
 194:	ret

0000000000000198 <gomp_ialias_omp_set_schedule>:
 198:	adrp	x3, 0 <gomp_tls_data>
 19c:	ldr	x3, [x3]
 1a0:	mrs	x2, tpidr_el0
 1a4:	stp	x29, x30, [sp, #-32]!
 1a8:	add	x2, x2, x3
 1ac:	mov	x29, sp
 1b0:	stp	x19, x20, [sp, #16]
 1b4:	mov	w19, w0
 1b8:	mov	w20, w1
 1bc:	ldr	x0, [x2, #80]
 1c0:	cbz	x0, 214 <gomp_ialias_omp_set_schedule+0x7c>
 1c4:	add	x0, x0, #0x90
 1c8:	tst	w19, #0x7ffffffc
 1cc:	and	w1, w19, #0x7fffffff
 1d0:	b.ne	200 <gomp_ialias_omp_set_schedule+0x68>  // b.any
 1d4:	tst	w19, #0x7ffffffe
 1d8:	b.ne	21c <gomp_ialias_omp_set_schedule+0x84>  // b.any
 1dc:	cmp	w1, #0x1
 1e0:	b.ne	1f4 <gomp_ialias_omp_set_schedule+0x5c>  // b.any
 1e4:	cmp	w20, #0x0
 1e8:	csel	w20, w20, wzr, ge  // ge = tcont
 1ec:	str	w20, [x0, #12]
 1f0:	str	w19, [x0, #8]
 1f4:	ldp	x19, x20, [sp, #16]
 1f8:	ldp	x29, x30, [sp], #32
 1fc:	ret
 200:	cmp	w1, #0x4
 204:	b.eq	1f0 <gomp_ialias_omp_set_schedule+0x58>  // b.none
 208:	ldp	x19, x20, [sp, #16]
 20c:	ldp	x29, x30, [sp], #32
 210:	ret
 214:	bl	0 <gomp_new_icv>
 218:	b	1c8 <gomp_ialias_omp_set_schedule+0x30>
 21c:	cmp	w20, #0x0
 220:	csinc	w20, w20, wzr, gt
 224:	str	w20, [x0, #12]
 228:	b	1f0 <gomp_ialias_omp_set_schedule+0x58>
 22c:	nop

0000000000000230 <gomp_ialias_omp_get_schedule>:
 230:	adrp	x4, 0 <gomp_tls_data>
 234:	ldr	x4, [x4]
 238:	mrs	x3, tpidr_el0
 23c:	adrp	x2, 0 <gomp_global_icv>
 240:	add	x2, x2, #0x0
 244:	add	x3, x3, x4
 248:	ldr	x3, [x3, #80]
 24c:	cmp	x3, #0x0
 250:	add	x3, x3, #0x90
 254:	csel	x2, x2, x3, eq  // eq = none
 258:	ldr	w3, [x2, #8]
 25c:	str	w3, [x0]
 260:	ldr	w0, [x2, #12]
 264:	str	w0, [x1]
 268:	ret
 26c:	nop

0000000000000270 <gomp_ialias_omp_get_max_threads>:
 270:	adrp	x2, 0 <gomp_tls_data>
 274:	ldr	x2, [x2]
 278:	mrs	x1, tpidr_el0
 27c:	adrp	x0, 0 <gomp_global_icv>
 280:	add	x0, x0, #0x0
 284:	add	x1, x1, x2
 288:	ldr	x1, [x1, #80]
 28c:	cmp	x1, #0x0
 290:	add	x1, x1, #0x90
 294:	csel	x0, x0, x1, eq  // eq = none
 298:	ldr	w0, [x0]
 29c:	ret

00000000000002a0 <gomp_ialias_omp_get_thread_limit>:
 2a0:	adrp	x0, 0 <gomp_tls_data>
 2a4:	ldr	x0, [x0]
 2a8:	mrs	x2, tpidr_el0
 2ac:	adrp	x1, 0 <gomp_global_icv>
 2b0:	add	x1, x1, #0x0
 2b4:	add	x2, x2, x0
 2b8:	mov	w3, #0x7fffffff            	// #2147483647
 2bc:	ldr	x2, [x2, #80]
 2c0:	cmp	x2, #0x0
 2c4:	add	x2, x2, #0x90
 2c8:	csel	x1, x1, x2, eq  // eq = none
 2cc:	ldr	w0, [x1, #20]
 2d0:	cmp	w0, #0x0
 2d4:	csel	w0, w0, w3, ge  // ge = tcont
 2d8:	ret
 2dc:	nop

00000000000002e0 <gomp_ialias_omp_set_max_active_levels>:
 2e0:	tbnz	w0, #31, 2f0 <gomp_ialias_omp_set_max_active_levels+0x10>
 2e4:	adrp	x1, 0 <gomp_max_active_levels_var>
 2e8:	sxtw	x0, w0
 2ec:	str	x0, [x1]
 2f0:	ret
 2f4:	nop

00000000000002f8 <gomp_ialias_omp_get_max_active_levels>:
 2f8:	adrp	x0, 0 <gomp_max_active_levels_var>
 2fc:	ldr	w0, [x0]
 300:	ret
 304:	nop

0000000000000308 <gomp_ialias_omp_get_cancellation>:
 308:	adrp	x0, 0 <gomp_cancel_var>
 30c:	ldrb	w0, [x0]
 310:	ret
 314:	nop

0000000000000318 <gomp_ialias_omp_get_max_task_priority>:
 318:	adrp	x0, 0 <gomp_max_task_priority_var>
 31c:	ldr	w0, [x0]
 320:	ret
 324:	nop

0000000000000328 <gomp_ialias_omp_get_proc_bind>:
 328:	adrp	x2, 0 <gomp_tls_data>
 32c:	ldr	x2, [x2]
 330:	mrs	x1, tpidr_el0
 334:	adrp	x0, 0 <gomp_global_icv>
 338:	add	x0, x0, #0x0
 33c:	add	x1, x1, x2
 340:	ldr	x1, [x1, #80]
 344:	cmp	x1, #0x0
 348:	add	x1, x1, #0x90
 34c:	csel	x0, x0, x1, eq  // eq = none
 350:	ldrb	w0, [x0, #26]
 354:	ret

0000000000000358 <gomp_ialias_omp_get_initial_device>:
 358:	mov	w0, #0xfffffffe            	// #-2
 35c:	ret

0000000000000360 <gomp_ialias_omp_get_num_places>:
 360:	adrp	x0, 0 <gomp_places_list_len>
 364:	ldr	w0, [x0]
 368:	ret
 36c:	nop

0000000000000370 <gomp_ialias_omp_get_place_num>:
 370:	adrp	x0, 0 <gomp_places_list>
 374:	ldr	x0, [x0]
 378:	cbz	x0, 3c8 <gomp_ialias_omp_get_place_num+0x58>
 37c:	stp	x29, x30, [sp, #-32]!
 380:	mrs	x0, tpidr_el0
 384:	mov	x29, sp
 388:	str	x19, [sp, #16]
 38c:	adrp	x19, 0 <gomp_tls_data>
 390:	ldr	x19, [x19]
 394:	add	x19, x0, x19
 398:	ldr	w0, [x19, #92]
 39c:	cbz	w0, 3b0 <gomp_ialias_omp_get_place_num+0x40>
 3a0:	sub	w0, w0, #0x1
 3a4:	ldr	x19, [sp, #16]
 3a8:	ldp	x29, x30, [sp], #32
 3ac:	ret
 3b0:	bl	0 <gomp_init_affinity>
 3b4:	ldr	w0, [x19, #92]
 3b8:	ldr	x19, [sp, #16]
 3bc:	sub	w0, w0, #0x1
 3c0:	ldp	x29, x30, [sp], #32
 3c4:	ret
 3c8:	mov	w0, #0xffffffff            	// #-1
 3cc:	ret

00000000000003d0 <gomp_ialias_omp_get_partition_num_places>:
 3d0:	adrp	x0, 0 <gomp_places_list>
 3d4:	ldr	x0, [x0]
 3d8:	cbz	x0, 42c <gomp_ialias_omp_get_partition_num_places+0x5c>
 3dc:	stp	x29, x30, [sp, #-32]!
 3e0:	mov	x29, sp
 3e4:	stp	x19, x20, [sp, #16]
 3e8:	mrs	x19, tpidr_el0
 3ec:	adrp	x20, 0 <gomp_tls_data>
 3f0:	ldr	x20, [x20]
 3f4:	add	x0, x19, x20
 3f8:	ldr	w0, [x0, #92]
 3fc:	cbz	w0, 414 <gomp_ialias_omp_get_partition_num_places+0x44>
 400:	add	x19, x19, x20
 404:	ldr	w0, [x19, #56]
 408:	ldp	x19, x20, [sp, #16]
 40c:	ldp	x29, x30, [sp], #32
 410:	ret
 414:	add	x19, x19, x20
 418:	bl	0 <gomp_init_affinity>
 41c:	ldr	w0, [x19, #56]
 420:	ldp	x19, x20, [sp, #16]
 424:	ldp	x29, x30, [sp], #32
 428:	ret
 42c:	mov	w0, #0x0                   	// #0
 430:	ret
 434:	nop

0000000000000438 <gomp_ialias_omp_get_partition_place_nums>:
 438:	stp	x29, x30, [sp, #-48]!
 43c:	adrp	x1, 0 <gomp_places_list>
 440:	mov	x29, sp
 444:	stp	x19, x20, [sp, #16]
 448:	mov	x20, x0
 44c:	ldr	x0, [x1]
 450:	cbz	x0, 4a0 <gomp_ialias_omp_get_partition_place_nums+0x68>
 454:	str	x21, [sp, #32]
 458:	mrs	x19, tpidr_el0
 45c:	adrp	x21, 0 <gomp_tls_data>
 460:	ldr	x21, [x21]
 464:	add	x0, x19, x21
 468:	ldr	w0, [x0, #92]
 46c:	cbz	w0, 4ac <gomp_ialias_omp_get_partition_place_nums+0x74>
 470:	add	x3, x19, x21
 474:	ldr	w0, [x3, #56]
 478:	cbz	w0, 49c <gomp_ialias_omp_get_partition_place_nums+0x64>
 47c:	mov	x1, #0x0                   	// #0
 480:	ldr	w2, [x3, #52]
 484:	add	w2, w2, w1
 488:	str	w2, [x20, x1, lsl #2]
 48c:	add	x1, x1, #0x1
 490:	ldr	w2, [x3, #56]
 494:	cmp	w2, w1
 498:	b.hi	480 <gomp_ialias_omp_get_partition_place_nums+0x48>  // b.pmore
 49c:	ldr	x21, [sp, #32]
 4a0:	ldp	x19, x20, [sp, #16]
 4a4:	ldp	x29, x30, [sp], #48
 4a8:	ret
 4ac:	bl	0 <gomp_init_affinity>
 4b0:	b	470 <gomp_ialias_omp_get_partition_place_nums+0x38>

icv-device.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_ialias_omp_set_default_device>:
   0:	adrp	x2, 0 <gomp_tls_data>
   4:	ldr	x2, [x2]
   8:	mrs	x1, tpidr_el0
   c:	stp	x29, x30, [sp, #-32]!
  10:	add	x1, x1, x2
  14:	mov	x29, sp
  18:	str	x19, [sp, #16]
  1c:	mov	w19, w0
  20:	ldr	x0, [x1, #80]
  24:	cbz	x0, 44 <gomp_ialias_omp_set_default_device+0x44>
  28:	add	x0, x0, #0x90
  2c:	cmp	w19, #0x0
  30:	csel	w19, w19, wzr, ge  // ge = tcont
  34:	str	w19, [x0, #16]
  38:	ldr	x19, [sp, #16]
  3c:	ldp	x29, x30, [sp], #32
  40:	ret
  44:	bl	0 <gomp_new_icv>
  48:	cmp	w19, #0x0
  4c:	csel	w19, w19, wzr, ge  // ge = tcont
  50:	str	w19, [x0, #16]
  54:	ldr	x19, [sp, #16]
  58:	ldp	x29, x30, [sp], #32
  5c:	ret

0000000000000060 <gomp_ialias_omp_get_default_device>:
  60:	adrp	x2, 0 <gomp_tls_data>
  64:	ldr	x2, [x2]
  68:	mrs	x1, tpidr_el0
  6c:	adrp	x0, 0 <gomp_global_icv>
  70:	add	x0, x0, #0x0
  74:	add	x1, x1, x2
  78:	ldr	x1, [x1, #80]
  7c:	cmp	x1, #0x0
  80:	add	x1, x1, #0x90
  84:	csel	x0, x0, x1, eq  // eq = none
  88:	ldr	w0, [x0, #16]
  8c:	ret

0000000000000090 <gomp_ialias_omp_get_num_devices>:
  90:	b	0 <gomp_get_num_devices>
  94:	nop

0000000000000098 <gomp_ialias_omp_is_initial_device>:
  98:	mov	w0, #0x1                   	// #1
  9c:	ret

iter.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_iter_static_next>:
   0:	adrp	x5, 0 <gomp_tls_data>
   4:	ldr	x5, [x5]
   8:	mrs	x10, tpidr_el0
   c:	mov	x8, x0
  10:	add	x2, x10, x5
  14:	ldp	x6, x4, [x2, #16]
  18:	ldr	x7, [x2, #72]
  1c:	cbz	x6, 118 <gomp_iter_static_next+0x118>
  20:	ldr	w3, [x6]
  24:	cmn	x7, #0x1
  28:	mov	w0, #0xffffffff            	// #-1
  2c:	b.eq	a8 <gomp_iter_static_next+0xa8>  // b.none
  30:	cmp	x3, #0x1
  34:	b.eq	124 <gomp_iter_static_next+0x124>  // b.none
  38:	ldr	x6, [x4, #8]
  3c:	cbnz	x6, ac <gomp_iter_static_next+0xac>
  40:	mov	w0, #0x1                   	// #1
  44:	cbnz	x7, a8 <gomp_iter_static_next+0xa8>
  48:	ldp	x0, x7, [x4, #16]
  4c:	mov	x6, #0x1                   	// #1
  50:	ldr	x9, [x4, #72]
  54:	ldr	w4, [x2, #40]
  58:	cmp	x7, #0x0
  5c:	sub	x0, x0, x9
  60:	cneg	x6, x6, gt
  64:	add	x6, x7, x6
  68:	add	x0, x0, x6
  6c:	sdiv	x0, x0, x7
  70:	udiv	x2, x0, x3
  74:	msub	x3, x2, x3, x0
  78:	cmp	x4, x3
  7c:	b.cs	88 <gomp_iter_static_next+0x88>  // b.hs, b.nlast
  80:	add	x2, x2, #0x1
  84:	mov	x3, #0x0                   	// #0
  88:	madd	x3, x2, x4, x3
  8c:	add	x2, x2, x3
  90:	cmp	x3, x2
  94:	b.cc	150 <gomp_iter_static_next+0x150>  // b.lo, b.ul, b.last
  98:	add	x5, x10, x5
  9c:	mov	x1, #0x1                   	// #1
  a0:	mov	w0, w1
  a4:	str	x1, [x5, #72]
  a8:	ret
  ac:	ldp	x5, x9, [x4, #16]
  b0:	mov	x0, #0x1                   	// #1
  b4:	ldr	x11, [x4, #72]
  b8:	ldr	w12, [x2, #40]
  bc:	cmp	x9, #0x0
  c0:	cneg	x4, x0, gt
  c4:	add	x10, x9, x4
  c8:	sub	x4, x5, x11
  cc:	add	x4, x4, x10
  d0:	madd	x3, x3, x7, x12
  d4:	sdiv	x4, x4, x9
  d8:	mul	x3, x3, x6
  dc:	cmp	x4, x3
  e0:	b.ls	a8 <gomp_iter_static_next+0xa8>  // b.plast
  e4:	add	x6, x6, x3
  e8:	madd	x3, x3, x9, x11
  ec:	cmp	x4, x6
  f0:	str	x3, [x8]
  f4:	csel	x0, x4, x6, ls  // ls = plast
  f8:	madd	x9, x0, x9, x11
  fc:	str	x9, [x1]
 100:	b.ls	17c <gomp_iter_static_next+0x17c>  // b.plast
 104:	ldr	x1, [x2, #72]
 108:	mov	w0, #0x0                   	// #0
 10c:	add	x1, x1, #0x1
 110:	str	x1, [x2, #72]
 114:	ret
 118:	cmn	x7, #0x1
 11c:	mov	w0, #0xffffffff            	// #-1
 120:	b.eq	a8 <gomp_iter_static_next+0xa8>  // b.none
 124:	ldr	x0, [x4, #72]
 128:	str	x0, [x8]
 12c:	add	x5, x10, x5
 130:	mov	x2, #0xffffffffffffffff    	// #-1
 134:	ldr	x0, [x4, #16]
 138:	str	x0, [x1]
 13c:	ldr	x1, [x4, #72]
 140:	str	x2, [x5, #72]
 144:	cmp	x1, x0
 148:	cset	w0, eq  // eq = none
 14c:	ret
 150:	madd	x3, x3, x7, x9
 154:	add	x5, x10, x5
 158:	madd	x7, x2, x7, x9
 15c:	str	x3, [x8]
 160:	cmp	x0, x2
 164:	str	x7, [x1]
 168:	mov	w0, #0x0                   	// #0
 16c:	mov	x1, #0x1                   	// #1
 170:	cneg	x1, x1, eq  // eq = none
 174:	str	x1, [x5, #72]
 178:	ret
 17c:	mov	x1, #0xffffffffffffffff    	// #-1
 180:	mov	w0, #0x0                   	// #0
 184:	str	x1, [x2, #72]
 188:	ret
 18c:	nop

0000000000000190 <gomp_iter_dynamic_next_locked>:
 190:	adrp	x3, 0 <gomp_tls_data>
 194:	ldr	x3, [x3]
 198:	mrs	x2, tpidr_el0
 19c:	add	x2, x2, x3
 1a0:	ldr	x3, [x2, #24]
 1a4:	ldr	x2, [x3, #16]
 1a8:	ldr	x4, [x3, #72]
 1ac:	cmp	x2, x4
 1b0:	b.eq	204 <gomp_iter_dynamic_next_locked+0x74>  // b.none
 1b4:	ldr	x6, [x3, #8]
 1b8:	sub	x2, x2, x4
 1bc:	ldr	x7, [x3, #24]
 1c0:	cmp	x6, x2
 1c4:	csel	x5, x6, x2, le
 1c8:	tbnz	x7, #63, 1e4 <gomp_iter_dynamic_next_locked+0x54>
 1cc:	add	x2, x5, x4
 1d0:	str	x2, [x3, #72]
 1d4:	str	x4, [x0]
 1d8:	mov	w0, #0x1                   	// #1
 1dc:	str	x2, [x1]
 1e0:	ret
 1e4:	cmp	x6, x2
 1e8:	csel	x5, x6, x2, ge  // ge = tcont
 1ec:	add	x2, x5, x4
 1f0:	str	x2, [x3, #72]
 1f4:	str	x4, [x0]
 1f8:	mov	w0, #0x1                   	// #1
 1fc:	str	x2, [x1]
 200:	b	1e0 <gomp_iter_dynamic_next_locked+0x50>
 204:	mov	w0, #0x0                   	// #0
 208:	ret
 20c:	nop

0000000000000210 <gomp_iter_dynamic_next>:
 210:	adrp	x3, 0 <gomp_tls_data>
 214:	ldr	x3, [x3]
 218:	mrs	x2, tpidr_el0
 21c:	add	x2, x2, x3
 220:	ldr	x2, [x2, #24]
 224:	add	x4, x2, #0x48
 228:	ldr	w7, [x2, #4]
 22c:	ldr	x3, [x2, #8]
 230:	ldp	x5, x6, [x2, #16]
 234:	cbz	w7, 2a4 <gomp_iter_dynamic_next+0x94>
 238:	ldxr	x2, [x4]
 23c:	add	x7, x2, x3
 240:	stlxr	w8, x7, [x4]
 244:	cbnz	w8, 238 <gomp_iter_dynamic_next+0x28>
 248:	dmb	ish
 24c:	cmp	x6, #0x0
 250:	b.le	280 <gomp_iter_dynamic_next+0x70>
 254:	cmp	x5, x2
 258:	b.gt	264 <gomp_iter_dynamic_next+0x54>
 25c:	mov	w0, #0x0                   	// #0
 260:	ret
 264:	add	x3, x3, x2
 268:	str	x2, [x0]
 26c:	cmp	x5, x3
 270:	mov	w0, #0x1                   	// #1
 274:	csel	x3, x5, x3, le
 278:	str	x3, [x1]
 27c:	ret
 280:	cmp	x5, x2
 284:	b.ge	25c <gomp_iter_dynamic_next+0x4c>  // b.tcont
 288:	add	x3, x3, x2
 28c:	str	x2, [x0]
 290:	cmp	x5, x3
 294:	mov	w0, #0x1                   	// #1
 298:	csel	x3, x5, x3, ge  // ge = tcont
 29c:	str	x3, [x1]
 2a0:	ret
 2a4:	ldr	x2, [x4]
 2a8:	tbnz	x6, #63, 2f8 <gomp_iter_dynamic_next+0xe8>
 2ac:	cmp	x2, x5
 2b0:	sub	x6, x5, x2
 2b4:	b.eq	25c <gomp_iter_dynamic_next+0x4c>  // b.none
 2b8:	cmp	x3, x6
 2bc:	csel	x3, x3, x6, le
 2c0:	add	x6, x3, x2
 2c4:	ldxr	x7, [x4]
 2c8:	cmp	x7, x2
 2cc:	b.ne	2d8 <gomp_iter_dynamic_next+0xc8>  // b.any
 2d0:	stlxr	w8, x6, [x4]
 2d4:	cbnz	w8, 2c4 <gomp_iter_dynamic_next+0xb4>
 2d8:	dmb	ish
 2dc:	cmp	x2, x7
 2e0:	mov	x2, x7
 2e4:	b.ne	2ac <gomp_iter_dynamic_next+0x9c>  // b.any
 2e8:	str	x2, [x0]
 2ec:	mov	w0, #0x1                   	// #1
 2f0:	str	x6, [x1]
 2f4:	ret
 2f8:	cmp	x2, x5
 2fc:	sub	x6, x5, x2
 300:	b.eq	25c <gomp_iter_dynamic_next+0x4c>  // b.none
 304:	cmp	x3, x6
 308:	csel	x3, x3, x6, ge  // ge = tcont
 30c:	add	x6, x2, x3
 310:	ldxr	x7, [x4]
 314:	cmp	x7, x2
 318:	b.ne	324 <gomp_iter_dynamic_next+0x114>  // b.any
 31c:	stlxr	w8, x6, [x4]
 320:	cbnz	w8, 310 <gomp_iter_dynamic_next+0x100>
 324:	dmb	ish
 328:	cmp	x2, x7
 32c:	mov	x2, x7
 330:	b.eq	2e8 <gomp_iter_dynamic_next+0xd8>  // b.none
 334:	mov	x2, x7
 338:	cmp	x2, x5
 33c:	sub	x6, x5, x2
 340:	b.ne	304 <gomp_iter_dynamic_next+0xf4>  // b.any
 344:	mov	w0, #0x0                   	// #0
 348:	b	260 <gomp_iter_dynamic_next+0x50>
 34c:	nop

0000000000000350 <gomp_iter_guided_next_locked>:
 350:	sub	sp, sp, #0x10
 354:	adrp	x3, 0 <gomp_tls_data>
 358:	ldr	x3, [x3]
 35c:	mrs	x2, tpidr_el0
 360:	mov	x9, #0x1                   	// #1
 364:	str	x1, [sp, #8]
 368:	add	x1, x2, x3
 36c:	ldr	x8, [sp, #8]
 370:	ldp	x2, x3, [x1, #16]
 374:	cbz	x2, 37c <gomp_iter_guided_next_locked+0x2c>
 378:	ldr	w9, [x2]
 37c:	ldr	x1, [x3, #16]
 380:	mov	w10, #0x0                   	// #0
 384:	ldr	x5, [x3, #72]
 388:	cmp	x5, x1
 38c:	b.eq	3d0 <gomp_iter_guided_next_locked+0x80>  // b.none
 390:	ldr	x6, [x3, #24]
 394:	sub	x7, x1, x5
 398:	ldr	x4, [x3, #8]
 39c:	mov	w10, #0x1                   	// #1
 3a0:	sdiv	x7, x7, x6
 3a4:	sub	x2, x7, #0x1
 3a8:	add	x2, x2, x9
 3ac:	udiv	x2, x2, x9
 3b0:	cmp	x4, x2
 3b4:	csel	x2, x4, x2, cs  // cs = hs, nlast
 3b8:	cmp	x2, x7
 3bc:	madd	x2, x6, x2, x5
 3c0:	csel	x1, x2, x1, ls  // ls = plast
 3c4:	str	x1, [x3, #72]
 3c8:	str	x5, [x0]
 3cc:	str	x1, [x8]
 3d0:	mov	w0, w10
 3d4:	add	sp, sp, #0x10
 3d8:	ret
 3dc:	nop

00000000000003e0 <gomp_iter_guided_next>:
 3e0:	adrp	x2, 0 <gomp_tls_data>
 3e4:	ldr	x2, [x2]
 3e8:	mrs	x3, tpidr_el0
 3ec:	mov	x6, #0x1                   	// #1
 3f0:	add	x2, x3, x2
 3f4:	ldp	x3, x2, [x2, #16]
 3f8:	cbz	x3, 400 <gomp_iter_guided_next+0x20>
 3fc:	ldr	w6, [x3]
 400:	add	x5, x2, #0x48
 404:	ldr	x3, [x5]
 408:	ldp	x8, x7, [x2, #8]
 40c:	sub	x10, x6, #0x1
 410:	ldr	x9, [x2, #24]
 414:	sub	x4, x7, x3
 418:	cmp	x3, x7
 41c:	b.eq	4a0 <gomp_iter_guided_next+0xc0>  // b.none
 420:	sdiv	x4, x4, x9
 424:	add	x2, x10, x4
 428:	udiv	x2, x2, x6
 42c:	cmp	x8, x2
 430:	csel	x2, x8, x2, cs  // cs = hs, nlast
 434:	cmp	x2, x4
 438:	b.hi	470 <gomp_iter_guided_next+0x90>  // b.pmore
 43c:	madd	x2, x9, x2, x3
 440:	ldxr	x4, [x5]
 444:	cmp	x4, x3
 448:	b.ne	454 <gomp_iter_guided_next+0x74>  // b.any
 44c:	stlxr	w11, x2, [x5]
 450:	cbnz	w11, 440 <gomp_iter_guided_next+0x60>
 454:	dmb	ish
 458:	cmp	x4, x3
 45c:	b.ne	498 <gomp_iter_guided_next+0xb8>  // b.any
 460:	str	x4, [x0]
 464:	mov	w0, #0x1                   	// #1
 468:	str	x2, [x1]
 46c:	ret
 470:	ldxr	x4, [x5]
 474:	cmp	x4, x3
 478:	b.ne	484 <gomp_iter_guided_next+0xa4>  // b.any
 47c:	stlxr	w2, x7, [x5]
 480:	cbnz	w2, 470 <gomp_iter_guided_next+0x90>
 484:	dmb	ish
 488:	cmp	x3, x4
 48c:	b.ne	498 <gomp_iter_guided_next+0xb8>  // b.any
 490:	mov	x2, x7
 494:	b	460 <gomp_iter_guided_next+0x80>
 498:	mov	x3, x4
 49c:	b	414 <gomp_iter_guided_next+0x34>
 4a0:	mov	w0, #0x0                   	// #0
 4a4:	ret

iter_ull.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_iter_ull_static_next>:
   0:	adrp	x5, 0 <gomp_tls_data>
   4:	ldr	x5, [x5]
   8:	mrs	x4, tpidr_el0
   c:	mov	x9, x0
  10:	add	x2, x4, x5
  14:	ldp	x7, x3, [x2, #16]
  18:	ldr	x6, [x2, #72]
  1c:	cbz	x7, 118 <gomp_iter_ull_static_next+0x118>
  20:	ldr	w2, [x7]
  24:	cmn	x6, #0x1
  28:	mov	w0, #0xffffffff            	// #-1
  2c:	b.eq	a8 <gomp_iter_ull_static_next+0xa8>  // b.none
  30:	cmp	x2, #0x1
  34:	b.eq	124 <gomp_iter_ull_static_next+0x124>  // b.none
  38:	ldr	x8, [x3, #8]
  3c:	cbz	x8, ac <gomp_iter_ull_static_next+0xac>
  40:	ldp	x7, x10, [x3, #16]
  44:	ldr	w12, [x3, #4]
  48:	ldr	x11, [x3, #72]
  4c:	add	x0, x10, x7
  50:	cbnz	w12, 1a0 <gomp_iter_ull_static_next+0x1a0>
  54:	mvn	x3, x11
  58:	add	x3, x3, x0
  5c:	udiv	x3, x3, x10
  60:	add	x4, x4, x5
  64:	mov	w0, #0x1                   	// #1
  68:	ldr	w5, [x4, #40]
  6c:	madd	x2, x2, x6, x5
  70:	mul	x2, x2, x8
  74:	cmp	x3, x2
  78:	b.ls	a8 <gomp_iter_ull_static_next+0xa8>  // b.plast
  7c:	add	x8, x8, x2
  80:	madd	x2, x2, x10, x11
  84:	cmp	x3, x8
  88:	str	x2, [x9]
  8c:	csel	x0, x3, x8, ls  // ls = plast
  90:	madd	x10, x0, x10, x11
  94:	str	x10, [x1]
  98:	b.ls	17c <gomp_iter_ull_static_next+0x17c>  // b.plast
  9c:	add	x6, x6, #0x1
  a0:	mov	w0, #0x0                   	// #0
  a4:	str	x6, [x4, #72]
  a8:	ret
  ac:	mov	w0, #0x1                   	// #1
  b0:	cbnz	x6, a8 <gomp_iter_ull_static_next+0xa8>
  b4:	ldp	x0, x7, [x3, #16]
  b8:	ldr	w10, [x3, #4]
  bc:	ldr	x8, [x3, #72]
  c0:	add	x6, x7, x0
  c4:	cbnz	w10, 18c <gomp_iter_ull_static_next+0x18c>
  c8:	mvn	x3, x8
  cc:	add	x3, x3, x6
  d0:	udiv	x3, x3, x7
  d4:	add	x6, x4, x5
  d8:	udiv	x0, x3, x2
  dc:	ldr	w6, [x6, #40]
  e0:	msub	x2, x0, x2, x3
  e4:	cmp	x6, x2
  e8:	b.cs	f4 <gomp_iter_ull_static_next+0xf4>  // b.hs, b.nlast
  ec:	add	x0, x0, #0x1
  f0:	mov	x2, #0x0                   	// #0
  f4:	madd	x2, x0, x6, x2
  f8:	add	x0, x0, x2
  fc:	cmp	x2, x0
 100:	b.cc	150 <gomp_iter_ull_static_next+0x150>  // b.lo, b.ul, b.last
 104:	add	x4, x4, x5
 108:	mov	x1, #0x1                   	// #1
 10c:	mov	w0, w1
 110:	str	x1, [x4, #72]
 114:	ret
 118:	cmn	x6, #0x1
 11c:	mov	w0, #0xffffffff            	// #-1
 120:	b.eq	a8 <gomp_iter_ull_static_next+0xa8>  // b.none
 124:	ldr	x0, [x3, #72]
 128:	str	x0, [x9]
 12c:	add	x4, x4, x5
 130:	mov	x2, #0xffffffffffffffff    	// #-1
 134:	ldr	x0, [x3, #16]
 138:	str	x0, [x1]
 13c:	ldr	x1, [x3, #72]
 140:	str	x2, [x4, #72]
 144:	cmp	x1, x0
 148:	cset	w0, eq  // eq = none
 14c:	ret
 150:	madd	x2, x7, x2, x8
 154:	add	x4, x4, x5
 158:	madd	x7, x7, x0, x8
 15c:	str	x2, [x9]
 160:	cmp	x3, x0
 164:	str	x7, [x1]
 168:	mov	w0, #0x0                   	// #0
 16c:	mov	x1, #0x1                   	// #1
 170:	cneg	x1, x1, eq  // eq = none
 174:	str	x1, [x4, #72]
 178:	ret
 17c:	mov	x1, #0xffffffffffffffff    	// #-1
 180:	mov	w0, #0x0                   	// #0
 184:	str	x1, [x4, #72]
 188:	ret
 18c:	sub	x0, x8, #0x1
 190:	neg	x3, x7
 194:	sub	x0, x0, x6
 198:	udiv	x3, x0, x3
 19c:	b	d4 <gomp_iter_ull_static_next+0xd4>
 1a0:	sub	x7, x11, #0x1
 1a4:	neg	x3, x10
 1a8:	sub	x7, x7, x0
 1ac:	udiv	x3, x7, x3
 1b0:	b	60 <gomp_iter_ull_static_next+0x60>
 1b4:	nop

00000000000001b8 <gomp_iter_ull_dynamic_next_locked>:
 1b8:	adrp	x3, 0 <gomp_tls_data>
 1bc:	ldr	x3, [x3]
 1c0:	mrs	x2, tpidr_el0
 1c4:	add	x2, x2, x3
 1c8:	ldr	x2, [x2, #24]
 1cc:	ldr	x3, [x2, #16]
 1d0:	ldr	x4, [x2, #72]
 1d4:	cmp	x3, x4
 1d8:	b.eq	20c <gomp_iter_ull_dynamic_next_locked+0x54>  // b.none
 1dc:	ldr	x6, [x2, #8]
 1e0:	sub	x3, x3, x4
 1e4:	ldr	w7, [x2, #4]
 1e8:	cmp	x6, x3
 1ec:	csel	x5, x6, x3, ls  // ls = plast
 1f0:	tbnz	w7, #1, 214 <gomp_iter_ull_dynamic_next_locked+0x5c>
 1f4:	add	x3, x5, x4
 1f8:	str	x3, [x2, #72]
 1fc:	str	x4, [x0]
 200:	mov	w0, #0x1                   	// #1
 204:	str	x3, [x1]
 208:	ret
 20c:	mov	w0, #0x0                   	// #0
 210:	ret
 214:	cmp	x6, x3
 218:	csel	x5, x6, x3, cs  // cs = hs, nlast
 21c:	b	1f4 <gomp_iter_ull_dynamic_next_locked+0x3c>

0000000000000220 <gomp_iter_ull_dynamic_next>:
 220:	adrp	x3, 0 <gomp_tls_data>
 224:	ldr	x3, [x3]
 228:	mrs	x2, tpidr_el0
 22c:	add	x2, x2, x3
 230:	ldr	x2, [x2, #24]
 234:	add	x4, x2, #0x48
 238:	ldr	w6, [x2, #4]
 23c:	ldp	x3, x5, [x2, #8]
 240:	tbz	w6, #0, 28c <gomp_iter_ull_dynamic_next+0x6c>
 244:	ldxr	x6, [x4]
 248:	add	x7, x6, x3
 24c:	stlxr	w8, x7, [x4]
 250:	cbnz	w8, 244 <gomp_iter_ull_dynamic_next+0x24>
 254:	dmb	ish
 258:	ldr	w2, [x2, #4]
 25c:	tbnz	w2, #1, 2e0 <gomp_iter_ull_dynamic_next+0xc0>
 260:	cmp	x5, x6
 264:	b.hi	270 <gomp_iter_ull_dynamic_next+0x50>  // b.pmore
 268:	mov	w0, #0x0                   	// #0
 26c:	ret
 270:	add	x3, x3, x6
 274:	str	x6, [x0]
 278:	cmp	x5, x3
 27c:	mov	w0, #0x1                   	// #1
 280:	csel	x3, x5, x3, ls  // ls = plast
 284:	str	x3, [x1]
 288:	ret
 28c:	ldr	x6, [x4]
 290:	cmp	x6, x5
 294:	sub	x7, x5, x6
 298:	b.eq	268 <gomp_iter_ull_dynamic_next+0x48>  // b.none
 29c:	ldr	w8, [x2, #4]
 2a0:	tbnz	w8, #1, 304 <gomp_iter_ull_dynamic_next+0xe4>
 2a4:	cmp	x3, x7
 2a8:	csel	x3, x3, x7, ls  // ls = plast
 2ac:	add	x8, x3, x6
 2b0:	ldxr	x7, [x4]
 2b4:	cmp	x7, x6
 2b8:	b.ne	2c4 <gomp_iter_ull_dynamic_next+0xa4>  // b.any
 2bc:	stlxr	w9, x8, [x4]
 2c0:	cbnz	w9, 2b0 <gomp_iter_ull_dynamic_next+0x90>
 2c4:	dmb	ish
 2c8:	cmp	x6, x7
 2cc:	b.ne	330 <gomp_iter_ull_dynamic_next+0x110>  // b.any
 2d0:	str	x7, [x0]
 2d4:	mov	w0, #0x1                   	// #1
 2d8:	str	x8, [x1]
 2dc:	ret
 2e0:	cmp	x5, x6
 2e4:	b.cs	268 <gomp_iter_ull_dynamic_next+0x48>  // b.hs, b.nlast
 2e8:	add	x2, x3, x6
 2ec:	str	x6, [x0]
 2f0:	cmp	x5, x2
 2f4:	mov	w0, #0x1                   	// #1
 2f8:	csel	x3, x5, x2, cs  // cs = hs, nlast
 2fc:	str	x3, [x1]
 300:	ret
 304:	cmp	x3, x7
 308:	csel	x3, x3, x7, cs  // cs = hs, nlast
 30c:	add	x8, x3, x6
 310:	ldxr	x7, [x4]
 314:	cmp	x7, x6
 318:	b.ne	324 <gomp_iter_ull_dynamic_next+0x104>  // b.any
 31c:	stlxr	w9, x8, [x4]
 320:	cbnz	w9, 310 <gomp_iter_ull_dynamic_next+0xf0>
 324:	dmb	ish
 328:	cmp	x7, x6
 32c:	b.eq	2d0 <gomp_iter_ull_dynamic_next+0xb0>  // b.none
 330:	mov	x6, x7
 334:	b	290 <gomp_iter_ull_dynamic_next+0x70>

0000000000000338 <gomp_iter_ull_guided_next_locked>:
 338:	adrp	x2, 0 <gomp_tls_data>
 33c:	ldr	x2, [x2]
 340:	mrs	x3, tpidr_el0
 344:	mov	x8, #0x1                   	// #1
 348:	add	x2, x3, x2
 34c:	ldp	x4, x3, [x2, #16]
 350:	cbz	x4, 358 <gomp_iter_ull_guided_next_locked+0x20>
 354:	ldr	w8, [x4]
 358:	ldr	x4, [x3, #16]
 35c:	mov	w9, #0x0                   	// #0
 360:	ldr	x6, [x3, #72]
 364:	cmp	x6, x4
 368:	b.eq	3b4 <gomp_iter_ull_guided_next_locked+0x7c>  // b.none
 36c:	ldr	w2, [x3, #4]
 370:	ldr	x10, [x3, #24]
 374:	cbnz	w2, 3bc <gomp_iter_ull_guided_next_locked+0x84>
 378:	sub	x7, x4, x6
 37c:	udiv	x7, x7, x10
 380:	sub	x5, x8, #0x1
 384:	mov	w9, #0x1                   	// #1
 388:	add	x5, x5, x7
 38c:	ldr	x2, [x3, #8]
 390:	udiv	x5, x5, x8
 394:	cmp	x2, x5
 398:	csel	x2, x2, x5, cs  // cs = hs, nlast
 39c:	cmp	x7, x2
 3a0:	madd	x2, x2, x10, x6
 3a4:	csel	x4, x2, x4, cs  // cs = hs, nlast
 3a8:	str	x4, [x3, #72]
 3ac:	str	x6, [x0]
 3b0:	str	x4, [x1]
 3b4:	mov	w0, w9
 3b8:	ret
 3bc:	sub	x7, x6, x4
 3c0:	neg	x2, x10
 3c4:	udiv	x7, x7, x2
 3c8:	b	380 <gomp_iter_ull_guided_next_locked+0x48>
 3cc:	nop

00000000000003d0 <gomp_iter_ull_guided_next>:
 3d0:	sub	sp, sp, #0x10
 3d4:	adrp	x3, 0 <gomp_tls_data>
 3d8:	ldr	x3, [x3]
 3dc:	mrs	x2, tpidr_el0
 3e0:	mov	x5, x1
 3e4:	mov	x8, #0x1                   	// #1
 3e8:	stp	x0, x1, [sp]
 3ec:	add	x0, x2, x3
 3f0:	ldr	x6, [sp]
 3f4:	ldp	x1, x3, [x0, #16]
 3f8:	cbz	x1, 400 <gomp_iter_ull_guided_next+0x30>
 3fc:	ldr	w8, [x1]
 400:	add	x4, x3, #0x48
 404:	ldr	x2, [x4]
 408:	ldp	x10, x9, [x3, #8]
 40c:	sub	x11, x8, #0x1
 410:	ldr	x7, [x3, #24]
 414:	neg	x12, x7
 418:	sub	x1, x9, x2
 41c:	cmp	x2, x9
 420:	b.eq	4d0 <gomp_iter_ull_guided_next+0x100>  // b.none
 424:	ldr	w0, [x3, #4]
 428:	cbnz	w0, 480 <gomp_iter_ull_guided_next+0xb0>
 42c:	udiv	x1, x1, x7
 430:	add	x0, x11, x1
 434:	udiv	x0, x0, x8
 438:	cmp	x10, x0
 43c:	csel	x0, x10, x0, cs  // cs = hs, nlast
 440:	cmp	x1, x0
 444:	b.cc	4a0 <gomp_iter_ull_guided_next+0xd0>  // b.lo, b.ul, b.last
 448:	madd	x1, x0, x7, x2
 44c:	ldxr	x0, [x4]
 450:	cmp	x0, x2
 454:	b.ne	460 <gomp_iter_ull_guided_next+0x90>  // b.any
 458:	stlxr	w13, x1, [x4]
 45c:	cbnz	w13, 44c <gomp_iter_ull_guided_next+0x7c>
 460:	dmb	ish
 464:	cmp	x2, x0
 468:	b.ne	4c8 <gomp_iter_ull_guided_next+0xf8>  // b.any
 46c:	str	x0, [x6]
 470:	mov	w0, #0x1                   	// #1
 474:	str	x1, [x5]
 478:	add	sp, sp, #0x10
 47c:	ret
 480:	sub	x1, x2, x9
 484:	udiv	x1, x1, x12
 488:	add	x0, x11, x1
 48c:	udiv	x0, x0, x8
 490:	cmp	x10, x0
 494:	csel	x0, x10, x0, cs  // cs = hs, nlast
 498:	cmp	x1, x0
 49c:	b.cs	448 <gomp_iter_ull_guided_next+0x78>  // b.hs, b.nlast
 4a0:	ldxr	x0, [x4]
 4a4:	cmp	x0, x2
 4a8:	b.ne	4b4 <gomp_iter_ull_guided_next+0xe4>  // b.any
 4ac:	stlxr	w1, x9, [x4]
 4b0:	cbnz	w1, 4a0 <gomp_iter_ull_guided_next+0xd0>
 4b4:	dmb	ish
 4b8:	cmp	x2, x0
 4bc:	b.ne	4c8 <gomp_iter_ull_guided_next+0xf8>  // b.any
 4c0:	mov	x1, x9
 4c4:	b	46c <gomp_iter_ull_guided_next+0x9c>
 4c8:	mov	x2, x0
 4cc:	b	418 <gomp_iter_ull_guided_next+0x48>
 4d0:	mov	w0, #0x0                   	// #0
 4d4:	b	478 <gomp_iter_ull_guided_next+0xa8>

loop.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_loop_static_start>:
       0:	stp	x29, x30, [sp, #-96]!
       4:	mov	x29, sp
       8:	stp	x25, x26, [sp, #64]
       c:	mov	x25, x3
      10:	adrp	x26, 0 <gomp_tls_data>
      14:	ldr	x26, [x26]
      18:	stp	x23, x24, [sp, #48]
      1c:	mrs	x24, tpidr_el0
      20:	mov	x23, x5
      24:	str	x27, [sp, #80]
      28:	add	x27, x24, x26
      2c:	stp	x19, x20, [sp, #16]
      30:	mov	x20, x0
      34:	mov	x19, x1
      38:	stp	x21, x22, [sp, #32]
      3c:	mov	x0, #0x0                   	// #0
      40:	mov	x21, x2
      44:	mov	x22, x4
      48:	str	xzr, [x27, #72]
      4c:	bl	0 <gomp_work_share_start>
      50:	tst	w0, #0xff
      54:	b.eq	b0 <GOMP_loop_static_start+0xb0>  // b.none
      58:	ldr	x1, [x27, #24]
      5c:	mov	w0, #0x1                   	// #1
      60:	cmp	x21, #0x0
      64:	ccmp	x20, x19, #0x4, gt
      68:	str	w0, [x1]
      6c:	str	x25, [x1, #8]
      70:	b.gt	e0 <GOMP_loop_static_start+0xe0>
      74:	cmp	x21, #0x0
      78:	ccmp	x20, x19, #0x0, lt  // lt = tstop
      7c:	csel	x19, x19, x20, ge  // ge = tcont
      80:	add	x24, x24, x26
      84:	str	x20, [x1, #72]
      88:	ldr	x0, [x24, #32]
      8c:	stp	x19, x21, [x1, #16]
      90:	cbz	x0, b0 <GOMP_loop_static_start+0xb0>
      94:	add	x0, x0, #0x50
      98:	ldxr	x2, [x0]
      9c:	stlxr	w3, x1, [x0]
      a0:	cbnz	w3, 98 <GOMP_loop_static_start+0x98>
      a4:	cmp	x2, #0x1
      a8:	b.eq	b0 <GOMP_loop_static_start+0xb0>  // b.none
      ac:	bl	0 <gomp_ptrlock_set_slow>
      b0:	mov	x1, x23
      b4:	mov	x0, x22
      b8:	bl	0 <gomp_iter_static_next>
      bc:	cmp	w0, #0x0
      c0:	cset	w0, eq  // eq = none
      c4:	ldp	x19, x20, [sp, #16]
      c8:	ldp	x21, x22, [sp, #32]
      cc:	ldp	x23, x24, [sp, #48]
      d0:	ldp	x25, x26, [sp, #64]
      d4:	ldr	x27, [sp, #80]
      d8:	ldp	x29, x30, [sp], #96
      dc:	ret
      e0:	mov	x19, x20
      e4:	b	80 <GOMP_loop_static_start+0x80>

00000000000000e8 <GOMP_loop_dynamic_start>:
      e8:	stp	x29, x30, [sp, #-64]!
      ec:	mov	x29, sp
      f0:	stp	x19, x20, [sp, #16]
      f4:	mov	x19, x1
      f8:	mov	x20, x2
      fc:	stp	x21, x22, [sp, #32]
     100:	mov	x21, x0
     104:	mov	x22, x5
     108:	mov	x0, #0x0                   	// #0
     10c:	stp	x23, x24, [sp, #48]
     110:	mov	x23, x3
     114:	mov	x24, x4
     118:	bl	0 <gomp_work_share_start>
     11c:	tst	w0, #0xff
     120:	b.ne	140 <GOMP_loop_dynamic_start+0x58>  // b.any
     124:	mov	x1, x22
     128:	mov	x0, x24
     12c:	ldp	x19, x20, [sp, #16]
     130:	ldp	x21, x22, [sp, #32]
     134:	ldp	x23, x24, [sp, #48]
     138:	ldp	x29, x30, [sp], #64
     13c:	b	0 <gomp_iter_dynamic_next>
     140:	adrp	x5, 0 <gomp_tls_data>
     144:	ldr	x5, [x5]
     148:	mrs	x3, tpidr_el0
     14c:	mov	w4, #0x2                   	// #2
     150:	cmp	x20, #0x0
     154:	add	x2, x3, x5
     158:	mul	x0, x20, x23
     15c:	ccmp	x21, x19, #0x4, gt
     160:	ldr	x1, [x2, #24]
     164:	ldr	x2, [x2, #16]
     168:	str	w4, [x1]
     16c:	str	x23, [x1, #8]
     170:	b.le	204 <GOMP_loop_dynamic_start+0x11c>
     174:	stp	x0, x21, [x1, #8]
     178:	mov	x19, x21
     17c:	mov	x4, #0x1                   	// #1
     180:	str	x20, [x1, #24]
     184:	str	x21, [x1, #72]
     188:	cbz	x2, 198 <GOMP_loop_dynamic_start+0xb0>
     18c:	ldr	w4, [x2]
     190:	cmp	x20, #0x0
     194:	b.le	228 <GOMP_loop_dynamic_start+0x140>
     198:	orr	x6, x0, x4
     19c:	mov	x2, #0x7fffffff            	// #2147483647
     1a0:	cmp	x6, x2
     1a4:	b.hi	25c <GOMP_loop_dynamic_start+0x174>  // b.pmore
     1a8:	madd	x0, x4, x0, x0
     1ac:	mov	x2, #0x7fffffffffffffff    	// #9223372036854775807
     1b0:	sub	x0, x2, x0
     1b4:	cmp	x0, x19
     1b8:	cset	w0, gt
     1bc:	str	w0, [x1, #4]
     1c0:	add	x3, x3, x5
     1c4:	ldr	x0, [x3, #32]
     1c8:	cbz	x0, 124 <GOMP_loop_dynamic_start+0x3c>
     1cc:	add	x0, x0, #0x50
     1d0:	ldxr	x2, [x0]
     1d4:	stlxr	w3, x1, [x0]
     1d8:	cbnz	w3, 1d0 <GOMP_loop_dynamic_start+0xe8>
     1dc:	cmp	x2, #0x1
     1e0:	b.eq	124 <GOMP_loop_dynamic_start+0x3c>  // b.none
     1e4:	bl	0 <gomp_ptrlock_set_slow>
     1e8:	mov	x1, x22
     1ec:	mov	x0, x24
     1f0:	ldp	x19, x20, [sp, #16]
     1f4:	ldp	x21, x22, [sp, #32]
     1f8:	ldp	x23, x24, [sp, #48]
     1fc:	ldp	x29, x30, [sp], #64
     200:	b	0 <gomp_iter_dynamic_next>
     204:	cmp	x20, #0x0
     208:	str	x20, [x1, #24]
     20c:	ccmp	x21, x19, #0x0, lt  // lt = tstop
     210:	str	x21, [x1, #72]
     214:	csel	x19, x19, x21, ge  // ge = tcont
     218:	stp	x0, x19, [x1, #8]
     21c:	mov	x4, #0x1                   	// #1
     220:	cbnz	x2, 18c <GOMP_loop_dynamic_start+0xa4>
     224:	b	190 <GOMP_loop_dynamic_start+0xa8>
     228:	neg	x2, x0
     22c:	mov	x0, #0x7fffffff            	// #2147483647
     230:	orr	x6, x4, x2
     234:	cmp	x6, x0
     238:	b.hi	25c <GOMP_loop_dynamic_start+0x174>  // b.pmore
     23c:	madd	x0, x4, x2, x2
     240:	mov	x2, #0x2                   	// #2
     244:	movk	x2, #0x8000, lsl #48
     248:	add	x0, x0, x2
     24c:	cmp	x0, x19
     250:	cset	w0, le
     254:	str	w0, [x1, #4]
     258:	b	1c0 <GOMP_loop_dynamic_start+0xd8>
     25c:	str	wzr, [x1, #4]
     260:	b	1c0 <GOMP_loop_dynamic_start+0xd8>
     264:	nop

0000000000000268 <GOMP_loop_guided_start>:
     268:	stp	x29, x30, [sp, #-64]!
     26c:	mov	x29, sp
     270:	stp	x19, x20, [sp, #16]
     274:	mov	x20, x0
     278:	mov	x19, x1
     27c:	mov	x0, #0x0                   	// #0
     280:	stp	x21, x22, [sp, #32]
     284:	mov	x21, x2
     288:	mov	x22, x4
     28c:	stp	x23, x24, [sp, #48]
     290:	mov	x24, x3
     294:	mov	x23, x5
     298:	bl	0 <gomp_work_share_start>
     29c:	tst	w0, #0xff
     2a0:	b.eq	30c <GOMP_loop_guided_start+0xa4>  // b.none
     2a4:	adrp	x2, 0 <gomp_tls_data>
     2a8:	ldr	x2, [x2]
     2ac:	mrs	x0, tpidr_el0
     2b0:	mov	w3, #0x3                   	// #3
     2b4:	cmp	x21, #0x0
     2b8:	add	x1, x0, x2
     2bc:	ccmp	x20, x19, #0x4, gt
     2c0:	ldr	x1, [x1, #24]
     2c4:	str	w3, [x1]
     2c8:	str	x24, [x1, #8]
     2cc:	b.gt	328 <GOMP_loop_guided_start+0xc0>
     2d0:	cmp	x21, #0x0
     2d4:	ccmp	x20, x19, #0x0, lt  // lt = tstop
     2d8:	csel	x19, x19, x20, ge  // ge = tcont
     2dc:	add	x0, x0, x2
     2e0:	str	x20, [x1, #72]
     2e4:	ldr	x0, [x0, #32]
     2e8:	stp	x19, x21, [x1, #16]
     2ec:	cbz	x0, 30c <GOMP_loop_guided_start+0xa4>
     2f0:	add	x0, x0, #0x50
     2f4:	ldxr	x2, [x0]
     2f8:	stlxr	w3, x1, [x0]
     2fc:	cbnz	w3, 2f4 <GOMP_loop_guided_start+0x8c>
     300:	cmp	x2, #0x1
     304:	b.eq	30c <GOMP_loop_guided_start+0xa4>  // b.none
     308:	bl	0 <gomp_ptrlock_set_slow>
     30c:	mov	x1, x23
     310:	mov	x0, x22
     314:	ldp	x19, x20, [sp, #16]
     318:	ldp	x21, x22, [sp, #32]
     31c:	ldp	x23, x24, [sp, #48]
     320:	ldp	x29, x30, [sp], #64
     324:	b	0 <gomp_iter_guided_next>
     328:	mov	x19, x20
     32c:	b	2dc <GOMP_loop_guided_start+0x74>

0000000000000330 <GOMP_loop_maybe_nonmonotonic_runtime_start>:
     330:	stp	x29, x30, [sp, #-96]!
     334:	adrp	x6, 0 <gomp_global_icv>
     338:	add	x6, x6, #0x0
     33c:	mov	x29, sp
     340:	stp	x25, x26, [sp, #64]
     344:	adrp	x26, 0 <gomp_tls_data>
     348:	ldr	x26, [x26]
     34c:	stp	x27, x28, [sp, #80]
     350:	mrs	x27, tpidr_el0
     354:	add	x25, x27, x26
     358:	stp	x19, x20, [sp, #16]
     35c:	mov	x20, x3
     360:	ldr	x7, [x25, #80]
     364:	stp	x21, x22, [sp, #32]
     368:	mov	x21, x4
     36c:	cmp	x7, #0x0
     370:	add	x7, x7, #0x90
     374:	csel	x6, x6, x7, eq  // eq = none
     378:	stp	x23, x24, [sp, #48]
     37c:	mov	x22, x2
     380:	mov	x24, x0
     384:	mov	x23, x1
     388:	ldr	w3, [x6, #8]
     38c:	and	w19, w3, #0x7fffffff
     390:	cmp	w19, #0x3
     394:	b.eq	440 <GOMP_loop_maybe_nonmonotonic_runtime_start+0x110>  // b.none
     398:	tst	w3, #0x7ffffffc
     39c:	b.ne	410 <GOMP_loop_maybe_nonmonotonic_runtime_start+0xe0>  // b.any
     3a0:	cmp	w19, #0x1
     3a4:	b.ne	3d0 <GOMP_loop_maybe_nonmonotonic_runtime_start+0xa0>  // b.any
     3a8:	mov	x5, x4
     3ac:	mov	x4, x20
     3b0:	ldp	x19, x20, [sp, #16]
     3b4:	ldp	x21, x22, [sp, #32]
     3b8:	ldp	x23, x24, [sp, #48]
     3bc:	ldp	x25, x26, [sp, #64]
     3c0:	ldp	x27, x28, [sp, #80]
     3c4:	ldp	x29, x30, [sp], #96
     3c8:	ldrsw	x3, [x6, #12]
     3cc:	b	0 <GOMP_loop_static_start>
     3d0:	cmp	w19, #0x2
     3d4:	b.ne	5d8 <GOMP_loop_maybe_nonmonotonic_runtime_start+0x2a8>  // b.any
     3d8:	ldr	w28, [x6, #12]
     3dc:	mov	x0, #0x0                   	// #0
     3e0:	bl	0 <gomp_work_share_start>
     3e4:	tst	w0, #0xff
     3e8:	b.ne	4d0 <GOMP_loop_maybe_nonmonotonic_runtime_start+0x1a0>  // b.any
     3ec:	mov	x1, x21
     3f0:	mov	x0, x20
     3f4:	ldp	x19, x20, [sp, #16]
     3f8:	ldp	x21, x22, [sp, #32]
     3fc:	ldp	x23, x24, [sp, #48]
     400:	ldp	x25, x26, [sp, #64]
     404:	ldp	x27, x28, [sp, #80]
     408:	ldp	x29, x30, [sp], #96
     40c:	b	0 <gomp_iter_dynamic_next>
     410:	cmp	w19, #0x4
     414:	b.ne	5d8 <GOMP_loop_maybe_nonmonotonic_runtime_start+0x2a8>  // b.any
     418:	mov	x5, x4
     41c:	mov	x4, x20
     420:	ldp	x19, x20, [sp, #16]
     424:	mov	x3, #0x0                   	// #0
     428:	ldp	x21, x22, [sp, #32]
     42c:	ldp	x23, x24, [sp, #48]
     430:	ldp	x25, x26, [sp, #64]
     434:	ldp	x27, x28, [sp, #80]
     438:	ldp	x29, x30, [sp], #96
     43c:	b	0 <GOMP_loop_static_start>
     440:	ldr	w28, [x6, #12]
     444:	mov	x0, #0x0                   	// #0
     448:	bl	0 <gomp_work_share_start>
     44c:	tst	w0, #0xff
     450:	b.eq	4ac <GOMP_loop_maybe_nonmonotonic_runtime_start+0x17c>  // b.none
     454:	ldr	x1, [x25, #24]
     458:	sxtw	x28, w28
     45c:	cmp	x22, #0x0
     460:	ccmp	x24, x23, #0x4, gt
     464:	str	w19, [x1]
     468:	str	x28, [x1, #8]
     46c:	b.gt	56c <GOMP_loop_maybe_nonmonotonic_runtime_start+0x23c>
     470:	cmp	x22, #0x0
     474:	ccmp	x24, x23, #0x0, lt  // lt = tstop
     478:	csel	x23, x23, x24, ge  // ge = tcont
     47c:	add	x26, x27, x26
     480:	str	x24, [x1, #72]
     484:	ldr	x0, [x26, #32]
     488:	stp	x23, x22, [x1, #16]
     48c:	cbz	x0, 4ac <GOMP_loop_maybe_nonmonotonic_runtime_start+0x17c>
     490:	add	x0, x0, #0x50
     494:	ldxr	x2, [x0]
     498:	stlxr	w3, x1, [x0]
     49c:	cbnz	w3, 494 <GOMP_loop_maybe_nonmonotonic_runtime_start+0x164>
     4a0:	cmp	x2, #0x1
     4a4:	b.eq	4ac <GOMP_loop_maybe_nonmonotonic_runtime_start+0x17c>  // b.none
     4a8:	bl	0 <gomp_ptrlock_set_slow>
     4ac:	mov	x1, x21
     4b0:	mov	x0, x20
     4b4:	ldp	x19, x20, [sp, #16]
     4b8:	ldp	x21, x22, [sp, #32]
     4bc:	ldp	x23, x24, [sp, #48]
     4c0:	ldp	x25, x26, [sp, #64]
     4c4:	ldp	x27, x28, [sp, #80]
     4c8:	ldp	x29, x30, [sp], #96
     4cc:	b	0 <gomp_iter_guided_next>
     4d0:	ldr	x1, [x25, #24]
     4d4:	sxtw	x28, w28
     4d8:	cmp	x22, #0x0
     4dc:	ccmp	x24, x23, #0x4, gt
     4e0:	str	w19, [x1]
     4e4:	mul	x0, x28, x22
     4e8:	str	x28, [x1, #8]
     4ec:	b.le	574 <GOMP_loop_maybe_nonmonotonic_runtime_start+0x244>
     4f0:	ldr	x2, [x25, #16]
     4f4:	stp	x0, x24, [x1, #8]
     4f8:	mov	x23, x24
     4fc:	str	x22, [x1, #24]
     500:	mov	x3, #0x1                   	// #1
     504:	str	x24, [x1, #72]
     508:	cbz	x2, 518 <GOMP_loop_maybe_nonmonotonic_runtime_start+0x1e8>
     50c:	ldr	w3, [x2]
     510:	cmp	x22, #0x0
     514:	b.le	59c <GOMP_loop_maybe_nonmonotonic_runtime_start+0x26c>
     518:	orr	x4, x0, x3
     51c:	mov	x2, #0x7fffffff            	// #2147483647
     520:	cmp	x4, x2
     524:	b.hi	5d0 <GOMP_loop_maybe_nonmonotonic_runtime_start+0x2a0>  // b.pmore
     528:	madd	x0, x3, x0, x0
     52c:	mov	x2, #0x7fffffffffffffff    	// #9223372036854775807
     530:	sub	x0, x2, x0
     534:	cmp	x0, x23
     538:	cset	w0, gt
     53c:	str	w0, [x1, #4]
     540:	add	x26, x27, x26
     544:	ldr	x0, [x26, #32]
     548:	cbz	x0, 3ec <GOMP_loop_maybe_nonmonotonic_runtime_start+0xbc>
     54c:	add	x0, x0, #0x50
     550:	ldxr	x2, [x0]
     554:	stlxr	w3, x1, [x0]
     558:	cbnz	w3, 550 <GOMP_loop_maybe_nonmonotonic_runtime_start+0x220>
     55c:	cmp	x2, #0x1
     560:	b.eq	3ec <GOMP_loop_maybe_nonmonotonic_runtime_start+0xbc>  // b.none
     564:	bl	0 <gomp_ptrlock_set_slow>
     568:	b	3ec <GOMP_loop_maybe_nonmonotonic_runtime_start+0xbc>
     56c:	mov	x23, x24
     570:	b	47c <GOMP_loop_maybe_nonmonotonic_runtime_start+0x14c>
     574:	cmp	x22, #0x0
     578:	str	x22, [x1, #24]
     57c:	ldr	x2, [x25, #16]
     580:	ccmp	x24, x23, #0x0, lt  // lt = tstop
     584:	csel	x23, x23, x24, ge  // ge = tcont
     588:	stp	x0, x23, [x1, #8]
     58c:	mov	x3, #0x1                   	// #1
     590:	str	x24, [x1, #72]
     594:	cbnz	x2, 50c <GOMP_loop_maybe_nonmonotonic_runtime_start+0x1dc>
     598:	b	510 <GOMP_loop_maybe_nonmonotonic_runtime_start+0x1e0>
     59c:	neg	x2, x0
     5a0:	mov	x0, #0x7fffffff            	// #2147483647
     5a4:	orr	x4, x3, x2
     5a8:	cmp	x4, x0
     5ac:	b.hi	5d0 <GOMP_loop_maybe_nonmonotonic_runtime_start+0x2a0>  // b.pmore
     5b0:	madd	x0, x3, x2, x2
     5b4:	mov	x2, #0x2                   	// #2
     5b8:	movk	x2, #0x8000, lsl #48
     5bc:	add	x0, x0, x2
     5c0:	cmp	x0, x23
     5c4:	cset	w0, le
     5c8:	str	w0, [x1, #4]
     5cc:	b	540 <GOMP_loop_maybe_nonmonotonic_runtime_start+0x210>
     5d0:	str	wzr, [x1, #4]
     5d4:	b	540 <GOMP_loop_maybe_nonmonotonic_runtime_start+0x210>
     5d8:	bl	0 <abort>
     5dc:	nop

00000000000005e0 <GOMP_loop_start>:
     5e0:	stp	x29, x30, [sp, #-112]!
     5e4:	mov	x29, sp
     5e8:	stp	x25, x26, [sp, #64]
     5ec:	mov	x25, x6
     5f0:	adrp	x26, 0 <gomp_tls_data>
     5f4:	ldr	x26, [x26]
     5f8:	stp	x19, x20, [sp, #16]
     5fc:	mrs	x19, tpidr_el0
     600:	mov	x20, x3
     604:	stp	x21, x22, [sp, #32]
     608:	add	x22, x19, x26
     60c:	mov	x21, x7
     610:	stp	x23, x24, [sp, #48]
     614:	mov	x24, x0
     618:	mov	x23, x5
     61c:	stp	x27, x28, [sp, #80]
     620:	mov	x28, x1
     624:	str	xzr, [x22, #72]
     628:	stp	x2, x4, [sp, #96]
     62c:	ldr	x27, [sp, #112]
     630:	cbz	x7, 6b4 <GOMP_loop_start+0xd4>
     634:	bl	0 <gomp_workshare_taskgroup_start>
     638:	mov	x0, #0x0                   	// #0
     63c:	bl	0 <gomp_work_share_start>
     640:	tst	w0, #0xff
     644:	b.ne	6c4 <GOMP_loop_start+0xe4>  // b.any
     648:	ldr	x1, [x22, #24]
     64c:	mov	x0, x21
     650:	ldr	x1, [x1, #88]
     654:	bl	0 <gomp_workshare_task_reduction_register>
     658:	cbz	x27, 66c <GOMP_loop_start+0x8c>
     65c:	add	x0, x19, x26
     660:	ldr	x0, [x0, #24]
     664:	ldr	x0, [x0, #32]
     668:	str	x0, [x27]
     66c:	cbz	x23, 81c <GOMP_loop_start+0x23c>
     670:	add	x19, x19, x26
     674:	ldr	x0, [x19, #24]
     678:	ldr	w0, [x0]
     67c:	cmp	w0, #0x2
     680:	b.eq	8dc <GOMP_loop_start+0x2fc>  // b.none
     684:	b.ls	8c4 <GOMP_loop_start+0x2e4>  // b.plast
     688:	cmp	w0, #0x3
     68c:	b.ne	88c <GOMP_loop_start+0x2ac>  // b.any
     690:	mov	x1, x25
     694:	mov	x0, x23
     698:	ldp	x19, x20, [sp, #16]
     69c:	ldp	x21, x22, [sp, #32]
     6a0:	ldp	x23, x24, [sp, #48]
     6a4:	ldp	x25, x26, [sp, #64]
     6a8:	ldp	x27, x28, [sp, #80]
     6ac:	ldp	x29, x30, [sp], #112
     6b0:	b	0 <gomp_iter_guided_next>
     6b4:	mov	x0, #0x0                   	// #0
     6b8:	bl	0 <gomp_work_share_start>
     6bc:	tst	w0, #0xff
     6c0:	b.eq	658 <GOMP_loop_start+0x78>  // b.none
     6c4:	tst	x20, #0x7ffffffc
     6c8:	and	x20, x20, #0x7fffffff
     6cc:	b.ne	8d0 <GOMP_loop_start+0x2f0>  // b.any
     6d0:	cbnz	x20, 928 <GOMP_loop_start+0x348>
     6d4:	add	x2, x19, x26
     6d8:	adrp	x1, 0 <gomp_global_icv>
     6dc:	add	x1, x1, #0x0
     6e0:	ldr	x0, [x2, #80]
     6e4:	cmp	x0, #0x0
     6e8:	add	x0, x0, #0x90
     6ec:	csel	x1, x1, x0, eq  // eq = none
     6f0:	ldr	w0, [x1, #8]
     6f4:	tst	w0, #0x7ffffffc
     6f8:	and	w0, w0, #0x7fffffff
     6fc:	b.ne	83c <GOMP_loop_start+0x25c>  // b.any
     700:	cbz	w0, 8cc <GOMP_loop_start+0x2ec>
     704:	ldrsw	x1, [x1, #12]
     708:	mov	w20, w0
     70c:	str	x1, [sp, #104]
     710:	add	x3, x19, x26
     714:	ldr	x1, [sp, #96]
     718:	ldr	x22, [x3, #24]
     71c:	cmp	x1, #0x0
     720:	cset	w1, gt
     724:	cmp	x24, x28
     728:	cset	w2, gt
     72c:	str	w0, [x22]
     730:	ands	w2, w1, w2
     734:	ldr	x0, [sp, #104]
     738:	str	x0, [x22, #8]
     73c:	b.eq	874 <GOMP_loop_start+0x294>  // b.none
     740:	mov	w1, w2
     744:	mov	x28, x24
     748:	ldr	x2, [sp, #96]
     74c:	stp	x28, x2, [x22, #16]
     750:	cmp	x20, #0x2
     754:	str	x24, [x22, #72]
     758:	b.ne	7a8 <GOMP_loop_start+0x1c8>  // b.any
     75c:	add	x0, x19, x26
     760:	ldr	x3, [sp, #104]
     764:	ldr	x0, [x0, #16]
     768:	mul	x24, x2, x3
     76c:	mov	x2, #0x1                   	// #1
     770:	str	x24, [x22, #8]
     774:	cbz	x0, 77c <GOMP_loop_start+0x19c>
     778:	ldr	w2, [x0]
     77c:	cbz	w1, 930 <GOMP_loop_start+0x350>
     780:	orr	x1, x24, x2
     784:	mov	x0, #0x7fffffff            	// #2147483647
     788:	cmp	x1, x0
     78c:	b.hi	964 <GOMP_loop_start+0x384>  // b.pmore
     790:	madd	x24, x2, x24, x24
     794:	mov	x0, #0x7fffffffffffffff    	// #9223372036854775807
     798:	sub	x24, x0, x24
     79c:	cmp	x28, x24
     7a0:	cset	w0, lt  // lt = tstop
     7a4:	str	w0, [x22, #4]
     7a8:	cbz	x21, 7d0 <GOMP_loop_start+0x1f0>
     7ac:	mov	x0, x21
     7b0:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
     7b4:	add	x0, x19, x26
     7b8:	mov	w1, #0x1                   	// #1
     7bc:	ldr	x2, [x0, #80]
     7c0:	ldr	x22, [x0, #24]
     7c4:	ldr	x0, [x2, #40]
     7c8:	strb	w1, [x0, #50]
     7cc:	str	x21, [x22, #88]
     7d0:	cbz	x27, 7ec <GOMP_loop_start+0x20c>
     7d4:	ldr	x0, [x27]
     7d8:	cmp	x0, #0x20
     7dc:	b.ls	910 <GOMP_loop_start+0x330>  // b.plast
     7e0:	bl	0 <gomp_malloc_cleared>
     7e4:	str	x0, [x22, #32]
     7e8:	str	x0, [x27]
     7ec:	add	x1, x19, x26
     7f0:	ldr	x0, [x1, #32]
     7f4:	cbz	x0, 66c <GOMP_loop_start+0x8c>
     7f8:	ldr	x2, [x1, #24]
     7fc:	add	x0, x0, #0x50
     800:	ldxr	x1, [x0]
     804:	stlxr	w3, x2, [x0]
     808:	cbnz	w3, 800 <GOMP_loop_start+0x220>
     80c:	cmp	x1, #0x1
     810:	b.eq	66c <GOMP_loop_start+0x8c>  // b.none
     814:	bl	0 <gomp_ptrlock_set_slow>
     818:	cbnz	x23, 670 <GOMP_loop_start+0x90>
     81c:	mov	w0, #0x1                   	// #1
     820:	ldp	x19, x20, [sp, #16]
     824:	ldp	x21, x22, [sp, #32]
     828:	ldp	x23, x24, [sp, #48]
     82c:	ldp	x25, x26, [sp, #64]
     830:	ldp	x27, x28, [sp, #80]
     834:	ldp	x29, x30, [sp], #112
     838:	ret
     83c:	cmp	w0, #0x4
     840:	b.ne	8cc <GOMP_loop_start+0x2ec>  // b.any
     844:	ldr	x22, [x2, #24]
     848:	ldr	x0, [sp, #96]
     84c:	str	xzr, [x22, #8]
     850:	cmp	x0, #0x0
     854:	mov	w0, #0x1                   	// #1
     858:	cset	w1, gt
     85c:	str	w0, [x22]
     860:	cmp	w1, #0x0
     864:	ccmp	x24, x28, #0x4, ne  // ne = any
     868:	b.gt	900 <GOMP_loop_start+0x320>
     86c:	mov	x20, #0x1                   	// #1
     870:	str	xzr, [sp, #104]
     874:	ldr	x0, [sp, #96]
     878:	cmp	x0, #0x0
     87c:	mov	x2, x0
     880:	ccmp	x24, x28, #0x0, lt  // lt = tstop
     884:	csel	x28, x28, x24, ge  // ge = tcont
     888:	b	74c <GOMP_loop_start+0x16c>
     88c:	cmp	w0, #0x4
     890:	b.ne	8cc <GOMP_loop_start+0x2ec>  // b.any
     894:	mov	x1, x25
     898:	mov	x0, x23
     89c:	bl	0 <gomp_iter_static_next>
     8a0:	cmp	w0, #0x0
     8a4:	cset	w0, eq  // eq = none
     8a8:	ldp	x19, x20, [sp, #16]
     8ac:	ldp	x21, x22, [sp, #32]
     8b0:	ldp	x23, x24, [sp, #48]
     8b4:	ldp	x25, x26, [sp, #64]
     8b8:	ldp	x27, x28, [sp, #80]
     8bc:	ldp	x29, x30, [sp], #112
     8c0:	ret
     8c4:	cmp	w0, #0x1
     8c8:	b.eq	894 <GOMP_loop_start+0x2b4>  // b.none
     8cc:	bl	0 <abort>
     8d0:	cmp	x20, #0x4
     8d4:	b.eq	6d4 <GOMP_loop_start+0xf4>  // b.none
     8d8:	bl	0 <abort>
     8dc:	mov	x1, x25
     8e0:	mov	x0, x23
     8e4:	ldp	x19, x20, [sp, #16]
     8e8:	ldp	x21, x22, [sp, #32]
     8ec:	ldp	x23, x24, [sp, #48]
     8f0:	ldp	x25, x26, [sp, #64]
     8f4:	ldp	x27, x28, [sp, #80]
     8f8:	ldp	x29, x30, [sp], #112
     8fc:	b	0 <gomp_iter_dynamic_next>
     900:	ldr	x0, [sp, #96]
     904:	stp	x24, x0, [x22, #16]
     908:	str	x24, [x22, #72]
     90c:	b	7a8 <GOMP_loop_start+0x1c8>
     910:	mov	x2, x0
     914:	mov	w1, #0x0                   	// #0
     918:	add	x0, x22, #0x60
     91c:	bl	0 <memset>
     920:	str	x0, [x27]
     924:	b	7ec <GOMP_loop_start+0x20c>
     928:	mov	w0, w20
     92c:	b	710 <GOMP_loop_start+0x130>
     930:	neg	x3, x24
     934:	mov	x0, #0x7fffffff            	// #2147483647
     938:	orr	x1, x2, x3
     93c:	cmp	x1, x0
     940:	b.hi	964 <GOMP_loop_start+0x384>  // b.pmore
     944:	madd	x24, x2, x3, x3
     948:	mov	x0, #0x2                   	// #2
     94c:	movk	x0, #0x8000, lsl #48
     950:	add	x0, x24, x0
     954:	cmp	x28, x0
     958:	cset	w0, ge  // ge = tcont
     95c:	str	w0, [x22, #4]
     960:	b	7a8 <GOMP_loop_start+0x1c8>
     964:	str	wzr, [x22, #4]
     968:	b	7a8 <GOMP_loop_start+0x1c8>
     96c:	nop

0000000000000970 <GOMP_loop_ordered_static_start>:
     970:	stp	x29, x30, [sp, #-96]!
     974:	mov	x29, sp
     978:	stp	x25, x26, [sp, #64]
     97c:	mov	x26, x3
     980:	adrp	x25, 0 <gomp_tls_data>
     984:	ldr	x25, [x25]
     988:	stp	x23, x24, [sp, #48]
     98c:	mrs	x24, tpidr_el0
     990:	mov	x23, x5
     994:	str	x27, [sp, #80]
     998:	add	x27, x24, x25
     99c:	stp	x19, x20, [sp, #16]
     9a0:	mov	x20, x0
     9a4:	mov	x19, x1
     9a8:	stp	x21, x22, [sp, #32]
     9ac:	mov	x0, #0x1                   	// #1
     9b0:	mov	x21, x2
     9b4:	mov	x22, x4
     9b8:	str	xzr, [x27, #72]
     9bc:	bl	0 <gomp_work_share_start>
     9c0:	tst	w0, #0xff
     9c4:	b.eq	a28 <GOMP_loop_ordered_static_start+0xb8>  // b.none
     9c8:	ldr	x0, [x27, #24]
     9cc:	mov	w1, #0x1                   	// #1
     9d0:	cmp	x21, #0x0
     9d4:	ccmp	x20, x19, #0x4, gt
     9d8:	str	w1, [x0]
     9dc:	str	x26, [x0, #8]
     9e0:	b.gt	a58 <GOMP_loop_ordered_static_start+0xe8>
     9e4:	cmp	x21, #0x0
     9e8:	ccmp	x20, x19, #0x0, lt  // lt = tstop
     9ec:	csel	x19, x19, x20, ge  // ge = tcont
     9f0:	add	x24, x24, x25
     9f4:	stp	x19, x21, [x0, #16]
     9f8:	str	x20, [x0, #72]
     9fc:	bl	0 <gomp_ordered_static_init>
     a00:	ldr	x0, [x24, #32]
     a04:	cbz	x0, a28 <GOMP_loop_ordered_static_start+0xb8>
     a08:	ldr	x2, [x24, #24]
     a0c:	add	x0, x0, #0x50
     a10:	ldxr	x1, [x0]
     a14:	stlxr	w3, x2, [x0]
     a18:	cbnz	w3, a10 <GOMP_loop_ordered_static_start+0xa0>
     a1c:	cmp	x1, #0x1
     a20:	b.eq	a28 <GOMP_loop_ordered_static_start+0xb8>  // b.none
     a24:	bl	0 <gomp_ptrlock_set_slow>
     a28:	mov	x1, x23
     a2c:	mov	x0, x22
     a30:	bl	0 <gomp_iter_static_next>
     a34:	cmp	w0, #0x0
     a38:	cset	w0, eq  // eq = none
     a3c:	ldp	x19, x20, [sp, #16]
     a40:	ldp	x21, x22, [sp, #32]
     a44:	ldp	x23, x24, [sp, #48]
     a48:	ldp	x25, x26, [sp, #64]
     a4c:	ldr	x27, [sp, #80]
     a50:	ldp	x29, x30, [sp], #96
     a54:	ret
     a58:	mov	x19, x20
     a5c:	b	9f0 <GOMP_loop_ordered_static_start+0x80>

0000000000000a60 <GOMP_loop_ordered_dynamic_start>:
     a60:	stp	x29, x30, [sp, #-80]!
     a64:	mov	x29, sp
     a68:	stp	x19, x20, [sp, #16]
     a6c:	mov	x20, x1
     a70:	adrp	x19, 0 <gomp_tls_data>
     a74:	ldr	x19, [x19]
     a78:	stp	x21, x22, [sp, #32]
     a7c:	mov	x22, x0
     a80:	mov	x21, x2
     a84:	mov	x0, #0x1                   	// #1
     a88:	stp	x23, x24, [sp, #48]
     a8c:	mov	x23, x3
     a90:	mov	x24, x4
     a94:	stp	x25, x26, [sp, #64]
     a98:	mov	x25, x5
     a9c:	mrs	x26, tpidr_el0
     aa0:	bl	0 <gomp_work_share_start>
     aa4:	tst	w0, #0xff
     aa8:	b.ne	b24 <GOMP_loop_ordered_dynamic_start+0xc4>  // b.any
     aac:	add	x0, x26, x19
     ab0:	mov	w2, #0x1                   	// #1
     ab4:	ldr	x0, [x0, #24]
     ab8:	add	x0, x0, #0x40
     abc:	ldaxr	w1, [x0]
     ac0:	cbnz	w1, acc <GOMP_loop_ordered_dynamic_start+0x6c>
     ac4:	stxr	w3, w2, [x0]
     ac8:	cbnz	w3, abc <GOMP_loop_ordered_dynamic_start+0x5c>
     acc:	cmp	w1, #0x0
     ad0:	b.ne	c8c <GOMP_loop_ordered_dynamic_start+0x22c>  // b.any
     ad4:	mov	x1, x25
     ad8:	mov	x0, x24
     adc:	bl	0 <gomp_iter_dynamic_next_locked>
     ae0:	mov	w20, w0
     ae4:	tst	w0, #0xff
     ae8:	b.ne	c00 <GOMP_loop_ordered_dynamic_start+0x1a0>  // b.any
     aec:	add	x19, x26, x19
     af0:	ldr	x1, [x19, #24]
     af4:	add	x1, x1, #0x40
     af8:	ldxr	w0, [x1]
     afc:	stlxr	w2, wzr, [x1]
     b00:	cbnz	w2, af8 <GOMP_loop_ordered_dynamic_start+0x98>
     b04:	tbnz	w0, #31, c2c <GOMP_loop_ordered_dynamic_start+0x1cc>
     b08:	mov	w0, w20
     b0c:	ldp	x19, x20, [sp, #16]
     b10:	ldp	x21, x22, [sp, #32]
     b14:	ldp	x23, x24, [sp, #48]
     b18:	ldp	x25, x26, [sp, #64]
     b1c:	ldp	x29, x30, [sp], #80
     b20:	ret
     b24:	add	x2, x26, x19
     b28:	mov	w3, #0x2                   	// #2
     b2c:	cmp	x21, #0x0
     b30:	mul	x1, x21, x23
     b34:	ccmp	x22, x20, #0x4, gt
     b38:	ldr	x0, [x2, #24]
     b3c:	ldr	x2, [x2, #16]
     b40:	str	w3, [x0]
     b44:	str	x23, [x0, #8]
     b48:	b.le	c08 <GOMP_loop_ordered_dynamic_start+0x1a8>
     b4c:	stp	x1, x22, [x0, #8]
     b50:	mov	x20, x22
     b54:	mov	x3, #0x1                   	// #1
     b58:	str	x21, [x0, #24]
     b5c:	str	x22, [x0, #72]
     b60:	cbz	x2, b70 <GOMP_loop_ordered_dynamic_start+0x110>
     b64:	ldr	w3, [x2]
     b68:	cmp	x21, #0x0
     b6c:	b.le	c50 <GOMP_loop_ordered_dynamic_start+0x1f0>
     b70:	orr	x4, x1, x3
     b74:	mov	x2, #0x7fffffff            	// #2147483647
     b78:	cmp	x4, x2
     b7c:	b.hi	c84 <GOMP_loop_ordered_dynamic_start+0x224>  // b.pmore
     b80:	madd	x1, x3, x1, x1
     b84:	mov	x2, #0x7fffffffffffffff    	// #9223372036854775807
     b88:	sub	x1, x2, x1
     b8c:	cmp	x1, x20
     b90:	cset	w1, gt
     b94:	str	w1, [x0, #4]
     b98:	add	x0, x0, #0x40
     b9c:	mov	w2, #0x1                   	// #1
     ba0:	ldaxr	w1, [x0]
     ba4:	cbnz	w1, bb0 <GOMP_loop_ordered_dynamic_start+0x150>
     ba8:	stxr	w3, w2, [x0]
     bac:	cbnz	w3, ba0 <GOMP_loop_ordered_dynamic_start+0x140>
     bb0:	cmp	w1, #0x0
     bb4:	b.ne	c94 <GOMP_loop_ordered_dynamic_start+0x234>  // b.any
     bb8:	add	x1, x26, x19
     bbc:	ldr	x0, [x1, #32]
     bc0:	cbz	x0, ad4 <GOMP_loop_ordered_dynamic_start+0x74>
     bc4:	ldr	x2, [x1, #24]
     bc8:	add	x0, x0, #0x50
     bcc:	ldxr	x1, [x0]
     bd0:	stlxr	w3, x2, [x0]
     bd4:	cbnz	w3, bcc <GOMP_loop_ordered_dynamic_start+0x16c>
     bd8:	cmp	x1, #0x1
     bdc:	b.eq	ad4 <GOMP_loop_ordered_dynamic_start+0x74>  // b.none
     be0:	bl	0 <gomp_ptrlock_set_slow>
     be4:	mov	x1, x25
     be8:	mov	x0, x24
     bec:	bl	0 <gomp_iter_dynamic_next_locked>
     bf0:	mov	w20, w0
     bf4:	tst	w0, #0xff
     bf8:	b.eq	aec <GOMP_loop_ordered_dynamic_start+0x8c>  // b.none
     bfc:	nop
     c00:	bl	0 <gomp_ordered_first>
     c04:	b	aec <GOMP_loop_ordered_dynamic_start+0x8c>
     c08:	cmp	x21, #0x0
     c0c:	str	x21, [x0, #24]
     c10:	ccmp	x22, x20, #0x0, lt  // lt = tstop
     c14:	str	x22, [x0, #72]
     c18:	csel	x20, x20, x22, ge  // ge = tcont
     c1c:	stp	x1, x20, [x0, #8]
     c20:	mov	x3, #0x1                   	// #1
     c24:	cbnz	x2, b64 <GOMP_loop_ordered_dynamic_start+0x104>
     c28:	b	b68 <GOMP_loop_ordered_dynamic_start+0x108>
     c2c:	mov	x0, x1
     c30:	bl	0 <gomp_mutex_unlock_slow>
     c34:	mov	w0, w20
     c38:	ldp	x19, x20, [sp, #16]
     c3c:	ldp	x21, x22, [sp, #32]
     c40:	ldp	x23, x24, [sp, #48]
     c44:	ldp	x25, x26, [sp, #64]
     c48:	ldp	x29, x30, [sp], #80
     c4c:	ret
     c50:	neg	x2, x1
     c54:	mov	x1, #0x7fffffff            	// #2147483647
     c58:	orr	x4, x3, x2
     c5c:	cmp	x4, x1
     c60:	b.hi	c84 <GOMP_loop_ordered_dynamic_start+0x224>  // b.pmore
     c64:	madd	x1, x3, x2, x2
     c68:	mov	x2, #0x2                   	// #2
     c6c:	movk	x2, #0x8000, lsl #48
     c70:	add	x1, x1, x2
     c74:	cmp	x1, x20
     c78:	cset	w1, le
     c7c:	str	w1, [x0, #4]
     c80:	b	b98 <GOMP_loop_ordered_dynamic_start+0x138>
     c84:	str	wzr, [x0, #4]
     c88:	b	b98 <GOMP_loop_ordered_dynamic_start+0x138>
     c8c:	bl	0 <gomp_mutex_lock_slow>
     c90:	b	ad4 <GOMP_loop_ordered_dynamic_start+0x74>
     c94:	bl	0 <gomp_mutex_lock_slow>
     c98:	b	bb8 <GOMP_loop_ordered_dynamic_start+0x158>
     c9c:	nop

0000000000000ca0 <GOMP_loop_ordered_guided_start>:
     ca0:	stp	x29, x30, [sp, #-80]!
     ca4:	mov	x29, sp
     ca8:	stp	x19, x20, [sp, #16]
     cac:	mov	x20, x1
     cb0:	mrs	x19, tpidr_el0
     cb4:	stp	x21, x22, [sp, #32]
     cb8:	mov	x21, x0
     cbc:	mov	x22, x2
     cc0:	mov	x0, #0x1                   	// #1
     cc4:	stp	x23, x24, [sp, #48]
     cc8:	mov	x23, x4
     ccc:	mov	x24, x5
     cd0:	stp	x25, x26, [sp, #64]
     cd4:	mov	x26, x3
     cd8:	adrp	x25, 0 <gomp_tls_data>
     cdc:	ldr	x25, [x25]
     ce0:	bl	0 <gomp_work_share_start>
     ce4:	tst	w0, #0xff
     ce8:	b.eq	d8c <GOMP_loop_ordered_guided_start+0xec>  // b.none
     cec:	add	x1, x19, x25
     cf0:	mov	w0, #0x3                   	// #3
     cf4:	cmp	x22, #0x0
     cf8:	ccmp	x21, x20, #0x4, gt
     cfc:	ldr	x1, [x1, #24]
     d00:	str	w0, [x1]
     d04:	str	x26, [x1, #8]
     d08:	b.gt	e04 <GOMP_loop_ordered_guided_start+0x164>
     d0c:	cmp	x22, #0x0
     d10:	ccmp	x21, x20, #0x0, lt  // lt = tstop
     d14:	csel	x20, x20, x21, ge  // ge = tcont
     d18:	add	x0, x1, #0x40
     d1c:	mov	w2, #0x1                   	// #1
     d20:	stp	x20, x22, [x1, #16]
     d24:	str	x21, [x1, #72]
     d28:	ldaxr	w1, [x0]
     d2c:	cbnz	w1, d38 <GOMP_loop_ordered_guided_start+0x98>
     d30:	stxr	w3, w2, [x0]
     d34:	cbnz	w3, d28 <GOMP_loop_ordered_guided_start+0x88>
     d38:	cmp	w1, #0x0
     d3c:	b.ne	e38 <GOMP_loop_ordered_guided_start+0x198>  // b.any
     d40:	add	x1, x19, x25
     d44:	ldr	x0, [x1, #32]
     d48:	cbz	x0, db4 <GOMP_loop_ordered_guided_start+0x114>
     d4c:	ldr	x2, [x1, #24]
     d50:	add	x0, x0, #0x50
     d54:	ldxr	x1, [x0]
     d58:	stlxr	w3, x2, [x0]
     d5c:	cbnz	w3, d54 <GOMP_loop_ordered_guided_start+0xb4>
     d60:	cmp	x1, #0x1
     d64:	b.eq	db4 <GOMP_loop_ordered_guided_start+0x114>  // b.none
     d68:	bl	0 <gomp_ptrlock_set_slow>
     d6c:	mov	x1, x24
     d70:	mov	x0, x23
     d74:	bl	0 <gomp_iter_guided_next_locked>
     d78:	mov	w20, w0
     d7c:	tst	w0, #0xff
     d80:	b.eq	dcc <GOMP_loop_ordered_guided_start+0x12c>  // b.none
     d84:	bl	0 <gomp_ordered_first>
     d88:	b	dcc <GOMP_loop_ordered_guided_start+0x12c>
     d8c:	add	x0, x19, x25
     d90:	mov	w2, #0x1                   	// #1
     d94:	ldr	x0, [x0, #24]
     d98:	add	x0, x0, #0x40
     d9c:	ldaxr	w1, [x0]
     da0:	cbnz	w1, dac <GOMP_loop_ordered_guided_start+0x10c>
     da4:	stxr	w3, w2, [x0]
     da8:	cbnz	w3, d9c <GOMP_loop_ordered_guided_start+0xfc>
     dac:	cmp	w1, #0x0
     db0:	b.ne	e30 <GOMP_loop_ordered_guided_start+0x190>  // b.any
     db4:	mov	x1, x24
     db8:	mov	x0, x23
     dbc:	bl	0 <gomp_iter_guided_next_locked>
     dc0:	mov	w20, w0
     dc4:	tst	w0, #0xff
     dc8:	b.ne	d84 <GOMP_loop_ordered_guided_start+0xe4>  // b.any
     dcc:	add	x19, x19, x25
     dd0:	ldr	x1, [x19, #24]
     dd4:	add	x1, x1, #0x40
     dd8:	ldxr	w0, [x1]
     ddc:	stlxr	w2, wzr, [x1]
     de0:	cbnz	w2, dd8 <GOMP_loop_ordered_guided_start+0x138>
     de4:	tbnz	w0, #31, e0c <GOMP_loop_ordered_guided_start+0x16c>
     de8:	mov	w0, w20
     dec:	ldp	x19, x20, [sp, #16]
     df0:	ldp	x21, x22, [sp, #32]
     df4:	ldp	x23, x24, [sp, #48]
     df8:	ldp	x25, x26, [sp, #64]
     dfc:	ldp	x29, x30, [sp], #80
     e00:	ret
     e04:	mov	x20, x21
     e08:	b	d18 <GOMP_loop_ordered_guided_start+0x78>
     e0c:	mov	x0, x1
     e10:	bl	0 <gomp_mutex_unlock_slow>
     e14:	mov	w0, w20
     e18:	ldp	x19, x20, [sp, #16]
     e1c:	ldp	x21, x22, [sp, #32]
     e20:	ldp	x23, x24, [sp, #48]
     e24:	ldp	x25, x26, [sp, #64]
     e28:	ldp	x29, x30, [sp], #80
     e2c:	ret
     e30:	bl	0 <gomp_mutex_lock_slow>
     e34:	b	db4 <GOMP_loop_ordered_guided_start+0x114>
     e38:	bl	0 <gomp_mutex_lock_slow>
     e3c:	b	d40 <GOMP_loop_ordered_guided_start+0xa0>

0000000000000e40 <GOMP_loop_ordered_runtime_start>:
     e40:	adrp	x5, 0 <gomp_tls_data>
     e44:	ldr	x5, [x5]
     e48:	mrs	x7, tpidr_el0
     e4c:	adrp	x6, 0 <gomp_global_icv>
     e50:	add	x6, x6, #0x0
     e54:	add	x7, x7, x5
     e58:	mov	x8, x3
     e5c:	mov	x5, x4
     e60:	ldr	x7, [x7, #80]
     e64:	cmp	x7, #0x0
     e68:	add	x7, x7, #0x90
     e6c:	csel	x6, x6, x7, eq  // eq = none
     e70:	ldr	w3, [x6, #8]
     e74:	and	w7, w3, #0x7fffffff
     e78:	cmp	w7, #0x3
     e7c:	b.eq	ec4 <GOMP_loop_ordered_runtime_start+0x84>  // b.none
     e80:	tst	w3, #0x7ffffffc
     e84:	b.ne	e9c <GOMP_loop_ordered_runtime_start+0x5c>  // b.any
     e88:	cmp	w7, #0x1
     e8c:	b.ne	eb0 <GOMP_loop_ordered_runtime_start+0x70>  // b.any
     e90:	ldrsw	x3, [x6, #12]
     e94:	mov	x4, x8
     e98:	b	970 <GOMP_loop_ordered_static_start>
     e9c:	cmp	w7, #0x4
     ea0:	b.ne	ed0 <GOMP_loop_ordered_runtime_start+0x90>  // b.any
     ea4:	mov	x4, x8
     ea8:	mov	x3, #0x0                   	// #0
     eac:	b	970 <GOMP_loop_ordered_static_start>
     eb0:	cmp	w7, #0x2
     eb4:	b.ne	ed0 <GOMP_loop_ordered_runtime_start+0x90>  // b.any
     eb8:	ldrsw	x3, [x6, #12]
     ebc:	mov	x4, x8
     ec0:	b	a60 <GOMP_loop_ordered_dynamic_start>
     ec4:	ldrsw	x3, [x6, #12]
     ec8:	mov	x4, x8
     ecc:	b	ca0 <GOMP_loop_ordered_guided_start>
     ed0:	stp	x29, x30, [sp, #-16]!
     ed4:	mov	x29, sp
     ed8:	bl	0 <abort>
     edc:	nop

0000000000000ee0 <GOMP_loop_ordered_start>:
     ee0:	stp	x29, x30, [sp, #-112]!
     ee4:	mov	x29, sp
     ee8:	stp	x19, x20, [sp, #16]
     eec:	mov	x19, x3
     ef0:	adrp	x20, 0 <gomp_tls_data>
     ef4:	ldr	x20, [x20]
     ef8:	stp	x21, x22, [sp, #32]
     efc:	mrs	x21, tpidr_el0
     f00:	add	x8, x21, x20
     f04:	stp	x23, x24, [sp, #48]
     f08:	mov	x24, x1
     f0c:	mov	x23, x4
     f10:	stp	x25, x26, [sp, #64]
     f14:	mov	x25, x0
     f18:	mov	x26, x5
     f1c:	stp	x27, x28, [sp, #80]
     f20:	mov	x27, x6
     f24:	mov	x28, x7
     f28:	str	xzr, [x8, #72]
     f2c:	str	x2, [sp, #104]
     f30:	ldr	x22, [sp, #112]
     f34:	cbz	x7, f3c <GOMP_loop_ordered_start+0x5c>
     f38:	bl	0 <gomp_workshare_taskgroup_start>
     f3c:	mov	x0, #0x1                   	// #1
     f40:	cbz	x22, f4c <GOMP_loop_ordered_start+0x6c>
     f44:	ldr	x0, [x22]
     f48:	add	x0, x0, #0x1
     f4c:	bl	0 <gomp_work_share_start>
     f50:	tst	w0, #0xff
     f54:	b.ne	10bc <GOMP_loop_ordered_start+0x1dc>  // b.any
     f58:	add	x19, x21, x20
     f5c:	ldr	x1, [x19, #24]
     f60:	cbz	x28, f74 <GOMP_loop_ordered_start+0x94>
     f64:	ldr	x1, [x1, #88]
     f68:	mov	x0, x28
     f6c:	bl	0 <gomp_workshare_task_reduction_register>
     f70:	ldr	x1, [x19, #24]
     f74:	ldr	w19, [x1]
     f78:	cmp	x19, #0x1
     f7c:	b.eq	103c <GOMP_loop_ordered_start+0x15c>  // b.none
     f80:	add	x0, x1, #0x40
     f84:	mov	w2, #0x1                   	// #1
     f88:	ldaxr	w1, [x0]
     f8c:	cbnz	w1, f98 <GOMP_loop_ordered_start+0xb8>
     f90:	stxr	w3, w2, [x0]
     f94:	cbnz	w3, f88 <GOMP_loop_ordered_start+0xa8>
     f98:	cmp	w1, #0x0
     f9c:	b.ne	12b8 <GOMP_loop_ordered_start+0x3d8>  // b.any
     fa0:	cbz	x22, fd8 <GOMP_loop_ordered_start+0xf8>
     fa4:	add	x0, x21, x20
     fa8:	ldr	x1, [x0, #24]
     fac:	add	x3, x21, x20
     fb0:	ldr	x0, [x1, #32]
     fb4:	mov	x2, #0x4                   	// #4
     fb8:	ldr	x1, [x3, #16]
     fbc:	cbz	x1, fc8 <GOMP_loop_ordered_start+0xe8>
     fc0:	ldr	w2, [x1]
     fc4:	lsl	x2, x2, #2
     fc8:	add	x0, x0, x2
     fcc:	add	x0, x0, #0x7
     fd0:	and	x0, x0, #0xfffffffffffffff8
     fd4:	str	x0, [x22]
     fd8:	cmp	x19, #0x2
     fdc:	b.eq	10a0 <GOMP_loop_ordered_start+0x1c0>  // b.none
     fe0:	b.le	1080 <GOMP_loop_ordered_start+0x1a0>
     fe4:	cmp	x19, #0x3
     fe8:	b.ne	1074 <GOMP_loop_ordered_start+0x194>  // b.any
     fec:	mov	x1, x27
     ff0:	mov	x0, x26
     ff4:	bl	0 <gomp_iter_guided_next_locked>
     ff8:	and	w19, w0, #0xff
     ffc:	cbnz	w19, 10b4 <GOMP_loop_ordered_start+0x1d4>
    1000:	add	x20, x21, x20
    1004:	ldr	x0, [x20, #24]
    1008:	add	x0, x0, #0x40
    100c:	ldxr	w1, [x0]
    1010:	stlxr	w2, wzr, [x0]
    1014:	cbnz	w2, 100c <GOMP_loop_ordered_start+0x12c>
    1018:	tbnz	w1, #31, 12b0 <GOMP_loop_ordered_start+0x3d0>
    101c:	mov	w0, w19
    1020:	ldp	x19, x20, [sp, #16]
    1024:	ldp	x21, x22, [sp, #32]
    1028:	ldp	x23, x24, [sp, #48]
    102c:	ldp	x25, x26, [sp, #64]
    1030:	ldp	x27, x28, [sp, #80]
    1034:	ldp	x29, x30, [sp], #112
    1038:	ret
    103c:	cbnz	x22, fac <GOMP_loop_ordered_start+0xcc>
    1040:	mov	x1, x27
    1044:	mov	x0, x26
    1048:	bl	0 <gomp_iter_static_next>
    104c:	cmp	w0, #0x0
    1050:	cset	w19, eq  // eq = none
    1054:	mov	w0, w19
    1058:	ldp	x19, x20, [sp, #16]
    105c:	ldp	x21, x22, [sp, #32]
    1060:	ldp	x23, x24, [sp, #48]
    1064:	ldp	x25, x26, [sp, #64]
    1068:	ldp	x27, x28, [sp, #80]
    106c:	ldp	x29, x30, [sp], #112
    1070:	ret
    1074:	cmp	x19, #0x4
    1078:	b.eq	1040 <GOMP_loop_ordered_start+0x160>  // b.none
    107c:	bl	0 <abort>
    1080:	cmp	x19, #0x1
    1084:	b.ne	107c <GOMP_loop_ordered_start+0x19c>  // b.any
    1088:	mov	x1, x27
    108c:	mov	x0, x26
    1090:	bl	0 <gomp_iter_static_next>
    1094:	cmp	w0, #0x0
    1098:	cset	w19, eq  // eq = none
    109c:	b	1054 <GOMP_loop_ordered_start+0x174>
    10a0:	mov	x1, x27
    10a4:	mov	x0, x26
    10a8:	bl	0 <gomp_iter_dynamic_next_locked>
    10ac:	and	w19, w0, #0xff
    10b0:	cbz	w19, 1000 <GOMP_loop_ordered_start+0x120>
    10b4:	bl	0 <gomp_ordered_first>
    10b8:	b	1000 <GOMP_loop_ordered_start+0x120>
    10bc:	tst	x19, #0x7ffffffc
    10c0:	and	x19, x19, #0x7fffffff
    10c4:	b.ne	125c <GOMP_loop_ordered_start+0x37c>  // b.any
    10c8:	cbnz	x19, 129c <GOMP_loop_ordered_start+0x3bc>
    10cc:	add	x2, x21, x20
    10d0:	adrp	x0, 0 <gomp_global_icv>
    10d4:	add	x0, x0, #0x0
    10d8:	ldr	x1, [x2, #80]
    10dc:	cmp	x1, #0x0
    10e0:	add	x1, x1, #0x90
    10e4:	csel	x0, x0, x1, eq  // eq = none
    10e8:	ldr	w1, [x0, #8]
    10ec:	tst	w1, #0x7ffffffc
    10f0:	and	w1, w1, #0x7fffffff
    10f4:	b.ne	119c <GOMP_loop_ordered_start+0x2bc>  // b.any
    10f8:	cbz	w1, 107c <GOMP_loop_ordered_start+0x19c>
    10fc:	ldrsw	x23, [x0, #12]
    1100:	mov	w19, w1
    1104:	add	x0, x21, x20
    1108:	ldr	x2, [sp, #104]
    110c:	ldr	x0, [x0, #24]
    1110:	cmp	x2, #0x0
    1114:	cset	w2, gt
    1118:	cmp	x25, x24
    111c:	cset	w3, gt
    1120:	str	w1, [x0]
    1124:	ands	w3, w2, w3
    1128:	str	x23, [x0, #8]
    112c:	b.eq	1270 <GOMP_loop_ordered_start+0x390>  // b.none
    1130:	mov	w2, w3
    1134:	mov	x24, x25
    1138:	ldr	x3, [sp, #104]
    113c:	stp	x24, x3, [x0, #16]
    1140:	cmp	x19, #0x2
    1144:	str	x25, [x0, #72]
    1148:	b.ne	1294 <GOMP_loop_ordered_start+0x3b4>  // b.any
    114c:	add	x1, x21, x20
    1150:	mul	x23, x3, x23
    1154:	mov	x3, #0x1                   	// #1
    1158:	ldr	x1, [x1, #16]
    115c:	str	x23, [x0, #8]
    1160:	cbz	x1, 1168 <GOMP_loop_ordered_start+0x288>
    1164:	ldr	w3, [x1]
    1168:	cbz	w2, 12cc <GOMP_loop_ordered_start+0x3ec>
    116c:	orr	x2, x23, x3
    1170:	mov	x1, #0x7fffffff            	// #2147483647
    1174:	cmp	x2, x1
    1178:	b.hi	12c0 <GOMP_loop_ordered_start+0x3e0>  // b.pmore
    117c:	madd	x23, x3, x23, x23
    1180:	mov	x1, #0x7fffffffffffffff    	// #9223372036854775807
    1184:	sub	x23, x1, x23
    1188:	cmp	x24, x23
    118c:	cset	w1, lt  // lt = tstop
    1190:	str	w1, [x0, #4]
    1194:	cbnz	x28, 11e0 <GOMP_loop_ordered_start+0x300>
    1198:	b	120c <GOMP_loop_ordered_start+0x32c>
    119c:	cmp	w1, #0x4
    11a0:	b.ne	107c <GOMP_loop_ordered_start+0x19c>  // b.any
    11a4:	ldr	x0, [x2, #24]
    11a8:	ldr	x1, [sp, #104]
    11ac:	str	xzr, [x0, #8]
    11b0:	cmp	x1, #0x0
    11b4:	mov	w1, #0x1                   	// #1
    11b8:	cset	w2, gt
    11bc:	str	w1, [x0]
    11c0:	cmp	w2, #0x0
    11c4:	ccmp	x25, x24, #0x4, ne  // ne = any
    11c8:	b.le	1268 <GOMP_loop_ordered_start+0x388>
    11cc:	ldr	x1, [sp, #104]
    11d0:	stp	x25, x1, [x0, #16]
    11d4:	mov	x19, #0x1                   	// #1
    11d8:	str	x25, [x0, #72]
    11dc:	cbz	x28, 12a4 <GOMP_loop_ordered_start+0x3c4>
    11e0:	mov	x0, x28
    11e4:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
    11e8:	add	x0, x21, x20
    11ec:	mov	w2, #0x1                   	// #1
    11f0:	ldr	x1, [x0, #80]
    11f4:	ldr	x0, [x0, #24]
    11f8:	ldr	x1, [x1, #40]
    11fc:	strb	w2, [x1, #50]
    1200:	str	x28, [x0, #88]
    1204:	cmp	x19, #0x1
    1208:	b.eq	12a4 <GOMP_loop_ordered_start+0x3c4>  // b.none
    120c:	add	x0, x0, #0x40
    1210:	mov	w2, #0x1                   	// #1
    1214:	ldaxr	w1, [x0]
    1218:	cbnz	w1, 1224 <GOMP_loop_ordered_start+0x344>
    121c:	stxr	w3, w2, [x0]
    1220:	cbnz	w3, 1214 <GOMP_loop_ordered_start+0x334>
    1224:	cmp	w1, #0x0
    1228:	b.ne	1304 <GOMP_loop_ordered_start+0x424>  // b.any
    122c:	add	x1, x21, x20
    1230:	ldr	x0, [x1, #32]
    1234:	cbz	x0, fa0 <GOMP_loop_ordered_start+0xc0>
    1238:	ldr	x2, [x1, #24]
    123c:	add	x0, x0, #0x50
    1240:	ldxr	x1, [x0]
    1244:	stlxr	w3, x2, [x0]
    1248:	cbnz	w3, 1240 <GOMP_loop_ordered_start+0x360>
    124c:	cmp	x1, #0x1
    1250:	b.eq	fa0 <GOMP_loop_ordered_start+0xc0>  // b.none
    1254:	bl	0 <gomp_ptrlock_set_slow>
    1258:	b	fa0 <GOMP_loop_ordered_start+0xc0>
    125c:	cmp	x19, #0x4
    1260:	b.eq	10cc <GOMP_loop_ordered_start+0x1ec>  // b.none
    1264:	bl	0 <abort>
    1268:	mov	x23, #0x0                   	// #0
    126c:	mov	x19, #0x1                   	// #1
    1270:	ldr	x1, [sp, #104]
    1274:	str	x25, [x0, #72]
    1278:	cmp	x1, #0x0
    127c:	mov	x3, x1
    1280:	ccmp	x25, x24, #0x0, lt  // lt = tstop
    1284:	csel	x24, x24, x25, ge  // ge = tcont
    1288:	stp	x24, x3, [x0, #16]
    128c:	cmp	x19, #0x2
    1290:	b.eq	114c <GOMP_loop_ordered_start+0x26c>  // b.none
    1294:	cbnz	x28, 11e0 <GOMP_loop_ordered_start+0x300>
    1298:	b	1204 <GOMP_loop_ordered_start+0x324>
    129c:	mov	w1, w19
    12a0:	b	1104 <GOMP_loop_ordered_start+0x224>
    12a4:	mov	x19, #0x1                   	// #1
    12a8:	bl	0 <gomp_ordered_static_init>
    12ac:	b	122c <GOMP_loop_ordered_start+0x34c>
    12b0:	bl	0 <gomp_mutex_unlock_slow>
    12b4:	b	101c <GOMP_loop_ordered_start+0x13c>
    12b8:	bl	0 <gomp_mutex_lock_slow>
    12bc:	b	fa0 <GOMP_loop_ordered_start+0xc0>
    12c0:	str	wzr, [x0, #4]
    12c4:	cbnz	x28, 11e0 <GOMP_loop_ordered_start+0x300>
    12c8:	b	120c <GOMP_loop_ordered_start+0x32c>
    12cc:	neg	x4, x23
    12d0:	mov	x1, #0x7fffffff            	// #2147483647
    12d4:	orr	x2, x3, x4
    12d8:	cmp	x2, x1
    12dc:	b.hi	12c0 <GOMP_loop_ordered_start+0x3e0>  // b.pmore
    12e0:	madd	x23, x3, x4, x4
    12e4:	mov	x1, #0x2                   	// #2
    12e8:	movk	x1, #0x8000, lsl #48
    12ec:	add	x1, x23, x1
    12f0:	cmp	x24, x1
    12f4:	cset	w1, ge  // ge = tcont
    12f8:	str	w1, [x0, #4]
    12fc:	cbnz	x28, 11e0 <GOMP_loop_ordered_start+0x300>
    1300:	b	120c <GOMP_loop_ordered_start+0x32c>
    1304:	bl	0 <gomp_mutex_lock_slow>
    1308:	b	122c <GOMP_loop_ordered_start+0x34c>
    130c:	nop

0000000000001310 <GOMP_loop_doacross_static_start>:
    1310:	stp	x29, x30, [sp, #-64]!
    1314:	mrs	x5, tpidr_el0
    1318:	mov	x29, sp
    131c:	stp	x19, x20, [sp, #16]
    1320:	mov	x20, x3
    1324:	adrp	x19, 0 <gomp_tls_data>
    1328:	ldr	x19, [x19]
    132c:	stp	x21, x22, [sp, #32]
    1330:	mov	x22, x1
    1334:	add	x19, x5, x19
    1338:	stp	x23, x24, [sp, #48]
    133c:	mov	x21, x4
    1340:	mov	w23, w0
    1344:	mov	x24, x2
    1348:	mov	x0, #0x0                   	// #0
    134c:	str	xzr, [x19, #72]
    1350:	bl	0 <gomp_work_share_start>
    1354:	tst	w0, #0xff
    1358:	b.ne	1384 <GOMP_loop_doacross_static_start+0x74>  // b.any
    135c:	mov	x1, x21
    1360:	mov	x0, x20
    1364:	bl	0 <gomp_iter_static_next>
    1368:	cmp	w0, #0x0
    136c:	cset	w0, eq  // eq = none
    1370:	ldp	x19, x20, [sp, #16]
    1374:	ldp	x21, x22, [sp, #32]
    1378:	ldp	x23, x24, [sp, #48]
    137c:	ldp	x29, x30, [sp], #64
    1380:	ret
    1384:	ldr	x0, [x22]
    1388:	mov	w2, #0x1                   	// #1
    138c:	ldr	x4, [x19, #24]
    1390:	cmp	x0, #0x0
    1394:	csel	x5, x0, xzr, ge  // ge = tcont
    1398:	mov	x6, #0x1                   	// #1
    139c:	mov	w0, w23
    13a0:	mov	x1, x22
    13a4:	str	w2, [x4]
    13a8:	mov	x3, #0x0                   	// #0
    13ac:	stp	x24, x5, [x4, #8]
    13b0:	mov	x2, x24
    13b4:	str	x6, [x4, #24]
    13b8:	str	xzr, [x4, #72]
    13bc:	bl	0 <gomp_doacross_init>
    13c0:	ldr	x0, [x19, #32]
    13c4:	cbz	x0, 135c <GOMP_loop_doacross_static_start+0x4c>
    13c8:	ldr	x2, [x19, #24]
    13cc:	add	x0, x0, #0x50
    13d0:	ldxr	x1, [x0]
    13d4:	stlxr	w3, x2, [x0]
    13d8:	cbnz	w3, 13d0 <GOMP_loop_doacross_static_start+0xc0>
    13dc:	cmp	x1, #0x1
    13e0:	b.eq	135c <GOMP_loop_doacross_static_start+0x4c>  // b.none
    13e4:	bl	0 <gomp_ptrlock_set_slow>
    13e8:	b	135c <GOMP_loop_doacross_static_start+0x4c>
    13ec:	nop

00000000000013f0 <GOMP_loop_doacross_dynamic_start>:
    13f0:	stp	x29, x30, [sp, #-80]!
    13f4:	mov	x29, sp
    13f8:	stp	x19, x20, [sp, #16]
    13fc:	mov	x19, x2
    1400:	mov	x20, x3
    1404:	stp	x21, x22, [sp, #32]
    1408:	mov	x22, x1
    140c:	mov	x21, x4
    1410:	stp	x23, x24, [sp, #48]
    1414:	mov	w23, w0
    1418:	mov	x0, #0x0                   	// #0
    141c:	bl	0 <gomp_work_share_start>
    1420:	tst	w0, #0xff
    1424:	b.ne	1444 <GOMP_loop_doacross_dynamic_start+0x54>  // b.any
    1428:	mov	x1, x21
    142c:	mov	x0, x20
    1430:	ldp	x19, x20, [sp, #16]
    1434:	ldp	x21, x22, [sp, #32]
    1438:	ldp	x23, x24, [sp, #48]
    143c:	ldp	x29, x30, [sp], #80
    1440:	b	0 <gomp_iter_dynamic_next>
    1444:	ldr	x0, [x22]
    1448:	str	x25, [sp, #64]
    144c:	adrp	x25, 0 <gomp_tls_data>
    1450:	ldr	x25, [x25]
    1454:	mrs	x24, tpidr_el0
    1458:	cmp	x0, #0x0
    145c:	mov	x3, #0x1                   	// #1
    1460:	add	x4, x24, x25
    1464:	csel	x0, x0, xzr, ge  // ge = tcont
    1468:	mov	w5, #0x2                   	// #2
    146c:	mov	x2, x3
    1470:	ldr	x1, [x4, #24]
    1474:	ldr	x4, [x4, #16]
    1478:	str	w5, [x1]
    147c:	stp	x19, x0, [x1, #8]
    1480:	str	x3, [x1, #24]
    1484:	str	xzr, [x1, #72]
    1488:	cbz	x4, 1490 <GOMP_loop_doacross_dynamic_start+0xa0>
    148c:	ldr	w2, [x4]
    1490:	orr	x4, x19, x2
    1494:	mov	x3, #0x7fffffff            	// #2147483647
    1498:	cmp	x4, x3
    149c:	b.hi	1538 <GOMP_loop_doacross_dynamic_start+0x148>  // b.pmore
    14a0:	madd	x2, x2, x19, x19
    14a4:	mov	x3, #0x7fffffffffffffff    	// #9223372036854775807
    14a8:	sub	x2, x3, x2
    14ac:	cmp	x2, x0
    14b0:	cset	w0, gt
    14b4:	add	x24, x24, x25
    14b8:	str	w0, [x1, #4]
    14bc:	mov	x2, x19
    14c0:	mov	w0, w23
    14c4:	mov	x1, x22
    14c8:	mov	x3, #0x0                   	// #0
    14cc:	bl	0 <gomp_doacross_init>
    14d0:	ldr	x0, [x24, #32]
    14d4:	cbz	x0, 1518 <GOMP_loop_doacross_dynamic_start+0x128>
    14d8:	ldr	x2, [x24, #24]
    14dc:	add	x0, x0, #0x50
    14e0:	ldxr	x1, [x0]
    14e4:	stlxr	w3, x2, [x0]
    14e8:	cbnz	w3, 14e0 <GOMP_loop_doacross_dynamic_start+0xf0>
    14ec:	cmp	x1, #0x1
    14f0:	b.eq	1518 <GOMP_loop_doacross_dynamic_start+0x128>  // b.none
    14f4:	bl	0 <gomp_ptrlock_set_slow>
    14f8:	mov	x1, x21
    14fc:	mov	x0, x20
    1500:	ldp	x19, x20, [sp, #16]
    1504:	ldp	x21, x22, [sp, #32]
    1508:	ldp	x23, x24, [sp, #48]
    150c:	ldr	x25, [sp, #64]
    1510:	ldp	x29, x30, [sp], #80
    1514:	b	0 <gomp_iter_dynamic_next>
    1518:	mov	x1, x21
    151c:	mov	x0, x20
    1520:	ldp	x19, x20, [sp, #16]
    1524:	ldp	x21, x22, [sp, #32]
    1528:	ldp	x23, x24, [sp, #48]
    152c:	ldr	x25, [sp, #64]
    1530:	ldp	x29, x30, [sp], #80
    1534:	b	0 <gomp_iter_dynamic_next>
    1538:	mov	w0, #0x0                   	// #0
    153c:	b	14b4 <GOMP_loop_doacross_dynamic_start+0xc4>

0000000000001540 <GOMP_loop_doacross_guided_start>:
    1540:	stp	x29, x30, [sp, #-64]!
    1544:	mov	x29, sp
    1548:	stp	x19, x20, [sp, #16]
    154c:	mov	x19, x3
    1550:	mov	x20, x4
    1554:	stp	x21, x22, [sp, #32]
    1558:	mov	x21, x1
    155c:	stp	x23, x24, [sp, #48]
    1560:	mov	w23, w0
    1564:	mov	x24, x2
    1568:	mov	x0, #0x0                   	// #0
    156c:	bl	0 <gomp_work_share_start>
    1570:	tst	w0, #0xff
    1574:	b.ne	1594 <GOMP_loop_doacross_guided_start+0x54>  // b.any
    1578:	mov	x1, x20
    157c:	mov	x0, x19
    1580:	ldp	x19, x20, [sp, #16]
    1584:	ldp	x21, x22, [sp, #32]
    1588:	ldp	x23, x24, [sp, #48]
    158c:	ldp	x29, x30, [sp], #64
    1590:	b	0 <gomp_iter_guided_next>
    1594:	adrp	x0, 0 <gomp_tls_data>
    1598:	ldr	x0, [x0]
    159c:	mrs	x22, tpidr_el0
    15a0:	ldr	x1, [x21]
    15a4:	add	x22, x22, x0
    15a8:	mov	w7, #0x3                   	// #3
    15ac:	mov	x6, #0x1                   	// #1
    15b0:	cmp	x1, #0x0
    15b4:	mov	w0, w23
    15b8:	ldr	x4, [x22, #24]
    15bc:	csel	x5, x1, xzr, ge  // ge = tcont
    15c0:	mov	x2, x24
    15c4:	mov	x1, x21
    15c8:	mov	x3, #0x0                   	// #0
    15cc:	str	w7, [x4]
    15d0:	stp	x24, x5, [x4, #8]
    15d4:	str	x6, [x4, #24]
    15d8:	str	xzr, [x4, #72]
    15dc:	bl	0 <gomp_doacross_init>
    15e0:	ldr	x0, [x22, #32]
    15e4:	cbz	x0, 1578 <GOMP_loop_doacross_guided_start+0x38>
    15e8:	ldr	x2, [x22, #24]
    15ec:	add	x0, x0, #0x50
    15f0:	ldxr	x1, [x0]
    15f4:	stlxr	w3, x2, [x0]
    15f8:	cbnz	w3, 15f0 <GOMP_loop_doacross_guided_start+0xb0>
    15fc:	cmp	x1, #0x1
    1600:	b.eq	1578 <GOMP_loop_doacross_guided_start+0x38>  // b.none
    1604:	bl	0 <gomp_ptrlock_set_slow>
    1608:	mov	x1, x20
    160c:	mov	x0, x19
    1610:	ldp	x19, x20, [sp, #16]
    1614:	ldp	x21, x22, [sp, #32]
    1618:	ldp	x23, x24, [sp, #48]
    161c:	ldp	x29, x30, [sp], #64
    1620:	b	0 <gomp_iter_guided_next>
    1624:	nop

0000000000001628 <GOMP_loop_doacross_runtime_start>:
    1628:	stp	x29, x30, [sp, #-96]!
    162c:	adrp	x5, 0 <gomp_global_icv>
    1630:	add	x5, x5, #0x0
    1634:	mov	x29, sp
    1638:	stp	x25, x26, [sp, #64]
    163c:	adrp	x25, 0 <gomp_tls_data>
    1640:	ldr	x25, [x25]
    1644:	stp	x23, x24, [sp, #48]
    1648:	mrs	x24, tpidr_el0
    164c:	add	x26, x24, x25
    1650:	stp	x19, x20, [sp, #16]
    1654:	mov	x20, x2
    1658:	mov	w23, w0
    165c:	ldr	x6, [x26, #80]
    1660:	stp	x21, x22, [sp, #32]
    1664:	mov	x21, x3
    1668:	cmp	x6, #0x0
    166c:	add	x6, x6, #0x90
    1670:	csel	x5, x5, x6, eq  // eq = none
    1674:	mov	x22, x1
    1678:	ldr	w2, [x5, #8]
    167c:	and	w19, w2, #0x7fffffff
    1680:	cmp	w19, #0x3
    1684:	b.eq	172c <GOMP_loop_doacross_runtime_start+0x104>  // b.none
    1688:	tst	w2, #0x7ffffffc
    168c:	b.ne	1700 <GOMP_loop_doacross_runtime_start+0xd8>  // b.any
    1690:	cmp	w19, #0x1
    1694:	b.ne	16bc <GOMP_loop_doacross_runtime_start+0x94>  // b.any
    1698:	mov	x4, x3
    169c:	mov	x3, x20
    16a0:	ldp	x19, x20, [sp, #16]
    16a4:	ldp	x21, x22, [sp, #32]
    16a8:	ldp	x23, x24, [sp, #48]
    16ac:	ldp	x25, x26, [sp, #64]
    16b0:	ldp	x29, x30, [sp], #96
    16b4:	ldrsw	x2, [x5, #12]
    16b8:	b	1310 <GOMP_loop_doacross_static_start>
    16bc:	str	x27, [sp, #80]
    16c0:	cmp	w19, #0x2
    16c4:	b.ne	186c <GOMP_loop_doacross_runtime_start+0x244>  // b.any
    16c8:	ldr	w27, [x5, #12]
    16cc:	mov	x0, #0x0                   	// #0
    16d0:	bl	0 <gomp_work_share_start>
    16d4:	tst	w0, #0xff
    16d8:	b.ne	17c4 <GOMP_loop_doacross_runtime_start+0x19c>  // b.any
    16dc:	mov	x1, x21
    16e0:	mov	x0, x20
    16e4:	ldp	x19, x20, [sp, #16]
    16e8:	ldp	x21, x22, [sp, #32]
    16ec:	ldp	x23, x24, [sp, #48]
    16f0:	ldp	x25, x26, [sp, #64]
    16f4:	ldr	x27, [sp, #80]
    16f8:	ldp	x29, x30, [sp], #96
    16fc:	b	0 <gomp_iter_dynamic_next>
    1700:	cmp	w19, #0x4
    1704:	b.ne	1868 <GOMP_loop_doacross_runtime_start+0x240>  // b.any
    1708:	mov	x4, x3
    170c:	mov	x3, x20
    1710:	ldp	x19, x20, [sp, #16]
    1714:	mov	x2, #0x0                   	// #0
    1718:	ldp	x21, x22, [sp, #32]
    171c:	ldp	x23, x24, [sp, #48]
    1720:	ldp	x25, x26, [sp, #64]
    1724:	ldp	x29, x30, [sp], #96
    1728:	b	1310 <GOMP_loop_doacross_static_start>
    172c:	ldr	w24, [x5, #12]
    1730:	mov	x0, #0x0                   	// #0
    1734:	bl	0 <gomp_work_share_start>
    1738:	tst	w0, #0xff
    173c:	b.ne	1760 <GOMP_loop_doacross_runtime_start+0x138>  // b.any
    1740:	mov	x1, x21
    1744:	mov	x0, x20
    1748:	ldp	x19, x20, [sp, #16]
    174c:	ldp	x21, x22, [sp, #32]
    1750:	ldp	x23, x24, [sp, #48]
    1754:	ldp	x25, x26, [sp, #64]
    1758:	ldp	x29, x30, [sp], #96
    175c:	b	0 <gomp_iter_guided_next>
    1760:	ldr	x0, [x22]
    1764:	sxtw	x2, w24
    1768:	ldr	x4, [x26, #24]
    176c:	cmp	x0, #0x0
    1770:	csel	x5, x0, xzr, ge  // ge = tcont
    1774:	mov	x6, #0x1                   	// #1
    1778:	mov	w0, w23
    177c:	mov	x1, x22
    1780:	str	w19, [x4]
    1784:	mov	x3, #0x0                   	// #0
    1788:	stp	x2, x5, [x4, #8]
    178c:	str	x6, [x4, #24]
    1790:	str	xzr, [x4, #72]
    1794:	bl	0 <gomp_doacross_init>
    1798:	ldr	x0, [x26, #32]
    179c:	cbz	x0, 1740 <GOMP_loop_doacross_runtime_start+0x118>
    17a0:	ldr	x2, [x26, #24]
    17a4:	add	x0, x0, #0x50
    17a8:	ldxr	x1, [x0]
    17ac:	stlxr	w3, x2, [x0]
    17b0:	cbnz	w3, 17a8 <GOMP_loop_doacross_runtime_start+0x180>
    17b4:	cmp	x1, #0x1
    17b8:	b.eq	1740 <GOMP_loop_doacross_runtime_start+0x118>  // b.none
    17bc:	bl	0 <gomp_ptrlock_set_slow>
    17c0:	b	1740 <GOMP_loop_doacross_runtime_start+0x118>
    17c4:	ldp	x5, x0, [x26, #16]
    17c8:	mov	x4, #0x1                   	// #1
    17cc:	ldr	x1, [x22]
    17d0:	sxtw	x2, w27
    17d4:	mov	x3, x4
    17d8:	cmp	x1, #0x0
    17dc:	csel	x1, x1, xzr, ge  // ge = tcont
    17e0:	str	w19, [x0]
    17e4:	stp	x2, x1, [x0, #8]
    17e8:	str	x4, [x0, #24]
    17ec:	str	xzr, [x0, #72]
    17f0:	cbz	x5, 17f8 <GOMP_loop_doacross_runtime_start+0x1d0>
    17f4:	ldr	w3, [x5]
    17f8:	orr	x5, x2, x3
    17fc:	mov	x4, #0x7fffffff            	// #2147483647
    1800:	cmp	x5, x4
    1804:	b.hi	1860 <GOMP_loop_doacross_runtime_start+0x238>  // b.pmore
    1808:	madd	x3, x3, x2, x2
    180c:	mov	x4, #0x7fffffffffffffff    	// #9223372036854775807
    1810:	sub	x3, x4, x3
    1814:	cmp	x3, x1
    1818:	cset	w1, gt
    181c:	str	w1, [x0, #4]
    1820:	mov	x3, #0x0                   	// #0
    1824:	mov	x1, x22
    1828:	mov	w0, w23
    182c:	bl	0 <gomp_doacross_init>
    1830:	add	x1, x24, x25
    1834:	ldr	x0, [x1, #32]
    1838:	cbz	x0, 16dc <GOMP_loop_doacross_runtime_start+0xb4>
    183c:	ldr	x2, [x1, #24]
    1840:	add	x0, x0, #0x50
    1844:	ldxr	x1, [x0]
    1848:	stlxr	w3, x2, [x0]
    184c:	cbnz	w3, 1844 <GOMP_loop_doacross_runtime_start+0x21c>
    1850:	cmp	x1, #0x1
    1854:	b.eq	16dc <GOMP_loop_doacross_runtime_start+0xb4>  // b.none
    1858:	bl	0 <gomp_ptrlock_set_slow>
    185c:	b	16dc <GOMP_loop_doacross_runtime_start+0xb4>
    1860:	mov	w1, #0x0                   	// #0
    1864:	b	181c <GOMP_loop_doacross_runtime_start+0x1f4>
    1868:	str	x27, [sp, #80]
    186c:	bl	0 <abort>

0000000000001870 <GOMP_loop_doacross_start>:
    1870:	stp	x29, x30, [sp, #-112]!
    1874:	mov	x29, sp
    1878:	stp	x23, x24, [sp, #48]
    187c:	mov	x24, x4
    1880:	adrp	x23, 0 <gomp_tls_data>
    1884:	ldr	x23, [x23]
    1888:	stp	x19, x20, [sp, #16]
    188c:	mrs	x20, tpidr_el0
    1890:	mov	x19, x2
    1894:	stp	x27, x28, [sp, #80]
    1898:	add	x28, x20, x23
    189c:	mov	x27, x3
    18a0:	stp	x21, x22, [sp, #32]
    18a4:	mov	x22, x6
    18a8:	mov	x21, x7
    18ac:	stp	x25, x26, [sp, #64]
    18b0:	mov	w26, w0
    18b4:	mov	x25, x5
    18b8:	str	xzr, [x28, #72]
    18bc:	str	x1, [sp, #104]
    18c0:	cbz	x6, 1b08 <GOMP_loop_doacross_start+0x298>
    18c4:	bl	0 <gomp_workshare_taskgroup_start>
    18c8:	mov	x0, #0x0                   	// #0
    18cc:	bl	0 <gomp_work_share_start>
    18d0:	tst	w0, #0xff
    18d4:	ldr	x1, [sp, #104]
    18d8:	b.eq	19c4 <GOMP_loop_doacross_start+0x154>  // b.none
    18dc:	mov	x3, #0x0                   	// #0
    18e0:	cbz	x21, 18e8 <GOMP_loop_doacross_start+0x78>
    18e4:	ldr	x3, [x21]
    18e8:	tst	x19, #0x7ffffffc
    18ec:	and	x8, x19, #0x7fffffff
    18f0:	b.ne	1900 <GOMP_loop_doacross_start+0x90>  // b.any
    18f4:	cbz	x8, 1908 <GOMP_loop_doacross_start+0x98>
    18f8:	mov	w0, w8
    18fc:	b	1940 <GOMP_loop_doacross_start+0xd0>
    1900:	cmp	x8, #0x4
    1904:	b.ne	1b04 <GOMP_loop_doacross_start+0x294>  // b.any
    1908:	add	x4, x20, x23
    190c:	adrp	x2, 0 <gomp_global_icv>
    1910:	add	x2, x2, #0x0
    1914:	ldr	x0, [x4, #80]
    1918:	cmp	x0, #0x0
    191c:	add	x0, x0, #0x90
    1920:	csel	x2, x2, x0, eq  // eq = none
    1924:	ldr	w0, [x2, #8]
    1928:	tst	w0, #0x7ffffffc
    192c:	and	w0, w0, #0x7fffffff
    1930:	b.ne	1a2c <GOMP_loop_doacross_start+0x1bc>  // b.any
    1934:	cbz	w0, 1b04 <GOMP_loop_doacross_start+0x294>
    1938:	ldrsw	x27, [x2, #12]
    193c:	mov	w8, w0
    1940:	add	x6, x20, x23
    1944:	mov	x2, #0x1                   	// #1
    1948:	ldr	x5, [x1]
    194c:	ldr	x4, [x6, #24]
    1950:	cmp	x5, #0x0
    1954:	csel	x5, x5, xzr, ge  // ge = tcont
    1958:	cmp	x8, #0x2
    195c:	str	w0, [x4]
    1960:	stp	x27, x5, [x4, #8]
    1964:	str	x2, [x4, #24]
    1968:	str	xzr, [x4, #72]
    196c:	b.ne	1a60 <GOMP_loop_doacross_start+0x1f0>  // b.any
    1970:	ldr	x6, [x6, #16]
    1974:	mov	x0, x2
    1978:	cbz	x6, 1980 <GOMP_loop_doacross_start+0x110>
    197c:	ldr	w0, [x6]
    1980:	orr	x6, x0, x27
    1984:	mov	x2, #0x7fffffff            	// #2147483647
    1988:	cmp	x6, x2
    198c:	b.hi	1b4c <GOMP_loop_doacross_start+0x2dc>  // b.pmore
    1990:	madd	x0, x0, x27, x27
    1994:	mov	x2, #0x7fffffffffffffff    	// #9223372036854775807
    1998:	sub	x0, x2, x0
    199c:	mov	x2, x27
    19a0:	cmp	x0, x5
    19a4:	cset	w0, gt
    19a8:	str	w0, [x4, #4]
    19ac:	mov	w0, w26
    19b0:	bl	0 <gomp_doacross_init>
    19b4:	cbnz	x22, 1a70 <GOMP_loop_doacross_start+0x200>
    19b8:	add	x0, x20, x23
    19bc:	ldr	x1, [x0, #24]
    19c0:	b	1a94 <GOMP_loop_doacross_start+0x224>
    19c4:	ldr	x1, [x28, #24]
    19c8:	mov	x0, x22
    19cc:	ldr	x1, [x1, #88]
    19d0:	bl	0 <gomp_workshare_task_reduction_register>
    19d4:	ldr	x1, [x28, #24]
    19d8:	cbz	x21, 19f0 <GOMP_loop_doacross_start+0x180>
    19dc:	ldr	x0, [x1, #32]
    19e0:	add	x20, x20, x23
    19e4:	ldr	x0, [x0, #48]
    19e8:	str	x0, [x21]
    19ec:	ldr	x1, [x20, #24]
    19f0:	ldr	w0, [x1]
    19f4:	cmp	w0, #0x2
    19f8:	b.eq	1b28 <GOMP_loop_doacross_start+0x2b8>  // b.none
    19fc:	b.ls	1afc <GOMP_loop_doacross_start+0x28c>  // b.plast
    1a00:	cmp	w0, #0x3
    1a04:	b.ne	1ac4 <GOMP_loop_doacross_start+0x254>  // b.any
    1a08:	mov	x1, x25
    1a0c:	mov	x0, x24
    1a10:	ldp	x19, x20, [sp, #16]
    1a14:	ldp	x21, x22, [sp, #32]
    1a18:	ldp	x23, x24, [sp, #48]
    1a1c:	ldp	x25, x26, [sp, #64]
    1a20:	ldp	x27, x28, [sp, #80]
    1a24:	ldp	x29, x30, [sp], #112
    1a28:	b	0 <gomp_iter_guided_next>
    1a2c:	cmp	w0, #0x4
    1a30:	b.ne	1b04 <GOMP_loop_doacross_start+0x294>  // b.any
    1a34:	ldr	x2, [x1]
    1a38:	mov	w5, #0x1                   	// #1
    1a3c:	ldr	x0, [x4, #24]
    1a40:	cmp	x2, #0x0
    1a44:	csel	x2, x2, xzr, ge  // ge = tcont
    1a48:	mov	x4, #0x1                   	// #1
    1a4c:	mov	x27, #0x0                   	// #0
    1a50:	str	w5, [x0]
    1a54:	stp	xzr, x2, [x0, #8]
    1a58:	str	x4, [x0, #24]
    1a5c:	str	xzr, [x0, #72]
    1a60:	mov	x2, x27
    1a64:	mov	w0, w26
    1a68:	bl	0 <gomp_doacross_init>
    1a6c:	cbz	x22, 19b8 <GOMP_loop_doacross_start+0x148>
    1a70:	mov	x0, x22
    1a74:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
    1a78:	add	x0, x20, x23
    1a7c:	mov	w2, #0x1                   	// #1
    1a80:	ldr	x3, [x0, #80]
    1a84:	ldr	x1, [x0, #24]
    1a88:	ldr	x0, [x3, #40]
    1a8c:	strb	w2, [x0, #50]
    1a90:	str	x22, [x1, #88]
    1a94:	add	x19, x20, x23
    1a98:	ldr	x0, [x19, #32]
    1a9c:	cbz	x0, 19d8 <GOMP_loop_doacross_start+0x168>
    1aa0:	add	x0, x0, #0x50
    1aa4:	ldxr	x2, [x0]
    1aa8:	stlxr	w3, x1, [x0]
    1aac:	cbnz	w3, 1aa4 <GOMP_loop_doacross_start+0x234>
    1ab0:	cmp	x2, #0x1
    1ab4:	b.eq	1abc <GOMP_loop_doacross_start+0x24c>  // b.none
    1ab8:	bl	0 <gomp_ptrlock_set_slow>
    1abc:	ldr	x1, [x19, #24]
    1ac0:	b	19d8 <GOMP_loop_doacross_start+0x168>
    1ac4:	cmp	w0, #0x4
    1ac8:	b.ne	1b04 <GOMP_loop_doacross_start+0x294>  // b.any
    1acc:	mov	x1, x25
    1ad0:	mov	x0, x24
    1ad4:	bl	0 <gomp_iter_static_next>
    1ad8:	cmp	w0, #0x0
    1adc:	cset	w0, eq  // eq = none
    1ae0:	ldp	x19, x20, [sp, #16]
    1ae4:	ldp	x21, x22, [sp, #32]
    1ae8:	ldp	x23, x24, [sp, #48]
    1aec:	ldp	x25, x26, [sp, #64]
    1af0:	ldp	x27, x28, [sp, #80]
    1af4:	ldp	x29, x30, [sp], #112
    1af8:	ret
    1afc:	cmp	w0, #0x1
    1b00:	b.eq	1acc <GOMP_loop_doacross_start+0x25c>  // b.none
    1b04:	bl	0 <abort>
    1b08:	mov	x0, #0x0                   	// #0
    1b0c:	bl	0 <gomp_work_share_start>
    1b10:	tst	w0, #0xff
    1b14:	ldr	x1, [sp, #104]
    1b18:	b.eq	19d4 <GOMP_loop_doacross_start+0x164>  // b.none
    1b1c:	mov	x3, #0x0                   	// #0
    1b20:	cbnz	x21, 18e4 <GOMP_loop_doacross_start+0x74>
    1b24:	b	18e8 <GOMP_loop_doacross_start+0x78>
    1b28:	mov	x1, x25
    1b2c:	mov	x0, x24
    1b30:	ldp	x19, x20, [sp, #16]
    1b34:	ldp	x21, x22, [sp, #32]
    1b38:	ldp	x23, x24, [sp, #48]
    1b3c:	ldp	x25, x26, [sp, #64]
    1b40:	ldp	x27, x28, [sp, #80]
    1b44:	ldp	x29, x30, [sp], #112
    1b48:	b	0 <gomp_iter_dynamic_next>
    1b4c:	str	wzr, [x4, #4]
    1b50:	b	1a60 <GOMP_loop_doacross_start+0x1f0>
    1b54:	nop

0000000000001b58 <GOMP_loop_static_next>:
    1b58:	stp	x29, x30, [sp, #-16]!
    1b5c:	mov	x29, sp
    1b60:	bl	0 <gomp_iter_static_next>
    1b64:	cmp	w0, #0x0
    1b68:	cset	w0, eq  // eq = none
    1b6c:	ldp	x29, x30, [sp], #16
    1b70:	ret
    1b74:	nop

0000000000001b78 <GOMP_loop_dynamic_next>:
    1b78:	b	0 <gomp_iter_dynamic_next>
    1b7c:	nop

0000000000001b80 <GOMP_loop_guided_next>:
    1b80:	b	0 <gomp_iter_guided_next>
    1b84:	nop

0000000000001b88 <GOMP_loop_maybe_nonmonotonic_runtime_next>:
    1b88:	adrp	x3, 0 <gomp_tls_data>
    1b8c:	ldr	x3, [x3]
    1b90:	mrs	x2, tpidr_el0
    1b94:	add	x2, x2, x3
    1b98:	ldr	x2, [x2, #24]
    1b9c:	ldr	w2, [x2]
    1ba0:	cmp	w2, #0x2
    1ba4:	b.eq	1bfc <GOMP_loop_maybe_nonmonotonic_runtime_next+0x74>  // b.none
    1ba8:	stp	x29, x30, [sp, #-16]!
    1bac:	mov	x3, x0
    1bb0:	mov	x4, x1
    1bb4:	mov	x29, sp
    1bb8:	b.ls	1bcc <GOMP_loop_maybe_nonmonotonic_runtime_next+0x44>  // b.plast
    1bbc:	cmp	w2, #0x3
    1bc0:	b.ne	1bf0 <GOMP_loop_maybe_nonmonotonic_runtime_next+0x68>  // b.any
    1bc4:	ldp	x29, x30, [sp], #16
    1bc8:	b	0 <gomp_iter_guided_next>
    1bcc:	cmp	w2, #0x1
    1bd0:	b.ne	1bf8 <GOMP_loop_maybe_nonmonotonic_runtime_next+0x70>  // b.any
    1bd4:	mov	x1, x4
    1bd8:	mov	x0, x3
    1bdc:	bl	0 <gomp_iter_static_next>
    1be0:	cmp	w0, #0x0
    1be4:	cset	w0, eq  // eq = none
    1be8:	ldp	x29, x30, [sp], #16
    1bec:	ret
    1bf0:	cmp	w2, #0x4
    1bf4:	b.eq	1bd4 <GOMP_loop_maybe_nonmonotonic_runtime_next+0x4c>  // b.none
    1bf8:	bl	0 <abort>
    1bfc:	b	0 <gomp_iter_dynamic_next>

0000000000001c00 <GOMP_loop_ordered_static_next>:
    1c00:	stp	x29, x30, [sp, #-48]!
    1c04:	mov	x29, sp
    1c08:	stp	x21, x22, [sp, #32]
    1c0c:	mov	x21, x1
    1c10:	adrp	x22, 0 <gomp_tls_data>
    1c14:	ldr	x22, [x22]
    1c18:	stp	x19, x20, [sp, #16]
    1c1c:	mov	x19, x0
    1c20:	mrs	x20, tpidr_el0
    1c24:	bl	0 <gomp_ordered_sync>
    1c28:	add	x1, x20, x22
    1c2c:	mov	w0, #0x1                   	// #1
    1c30:	ldr	x2, [x1, #24]
    1c34:	add	x2, x2, #0x40
    1c38:	ldaxr	w1, [x2]
    1c3c:	cbnz	w1, 1c48 <GOMP_loop_ordered_static_next+0x48>
    1c40:	stxr	w3, w0, [x2]
    1c44:	cbnz	w3, 1c38 <GOMP_loop_ordered_static_next+0x38>
    1c48:	cmp	w1, #0x0
    1c4c:	b.ne	1cbc <GOMP_loop_ordered_static_next+0xbc>  // b.any
    1c50:	mov	x0, x19
    1c54:	mov	x1, x21
    1c58:	bl	0 <gomp_iter_static_next>
    1c5c:	mov	w19, w0
    1c60:	tbnz	w0, #31, 1c68 <GOMP_loop_ordered_static_next+0x68>
    1c64:	bl	0 <gomp_ordered_static_next>
    1c68:	add	x20, x20, x22
    1c6c:	ldr	x1, [x20, #24]
    1c70:	add	x1, x1, #0x40
    1c74:	ldxr	w0, [x1]
    1c78:	stlxr	w2, wzr, [x1]
    1c7c:	cbnz	w2, 1c74 <GOMP_loop_ordered_static_next+0x74>
    1c80:	tbnz	w0, #31, 1c9c <GOMP_loop_ordered_static_next+0x9c>
    1c84:	cmp	w19, #0x0
    1c88:	cset	w0, eq  // eq = none
    1c8c:	ldp	x19, x20, [sp, #16]
    1c90:	ldp	x21, x22, [sp, #32]
    1c94:	ldp	x29, x30, [sp], #48
    1c98:	ret
    1c9c:	mov	x0, x1
    1ca0:	bl	0 <gomp_mutex_unlock_slow>
    1ca4:	cmp	w19, #0x0
    1ca8:	cset	w0, eq  // eq = none
    1cac:	ldp	x19, x20, [sp, #16]
    1cb0:	ldp	x21, x22, [sp, #32]
    1cb4:	ldp	x29, x30, [sp], #48
    1cb8:	ret
    1cbc:	mov	x0, x2
    1cc0:	bl	0 <gomp_mutex_lock_slow>
    1cc4:	b	1c50 <GOMP_loop_ordered_static_next+0x50>

0000000000001cc8 <GOMP_loop_ordered_dynamic_next>:
    1cc8:	stp	x29, x30, [sp, #-48]!
    1ccc:	mov	x29, sp
    1cd0:	stp	x21, x22, [sp, #32]
    1cd4:	mov	x21, x1
    1cd8:	adrp	x22, 0 <gomp_tls_data>
    1cdc:	ldr	x22, [x22]
    1ce0:	stp	x19, x20, [sp, #16]
    1ce4:	mov	x19, x0
    1ce8:	mrs	x20, tpidr_el0
    1cec:	bl	0 <gomp_ordered_sync>
    1cf0:	add	x1, x20, x22
    1cf4:	mov	w0, #0x1                   	// #1
    1cf8:	ldr	x2, [x1, #24]
    1cfc:	add	x2, x2, #0x40
    1d00:	ldaxr	w1, [x2]
    1d04:	cbnz	w1, 1d10 <GOMP_loop_ordered_dynamic_next+0x48>
    1d08:	stxr	w3, w0, [x2]
    1d0c:	cbnz	w3, 1d00 <GOMP_loop_ordered_dynamic_next+0x38>
    1d10:	cmp	w1, #0x0
    1d14:	b.ne	1d88 <GOMP_loop_ordered_dynamic_next+0xc0>  // b.any
    1d18:	mov	x0, x19
    1d1c:	mov	x1, x21
    1d20:	bl	0 <gomp_iter_dynamic_next_locked>
    1d24:	mov	w19, w0
    1d28:	tst	w0, #0xff
    1d2c:	b.eq	1d64 <GOMP_loop_ordered_dynamic_next+0x9c>  // b.none
    1d30:	bl	0 <gomp_ordered_next>
    1d34:	add	x20, x20, x22
    1d38:	ldr	x1, [x20, #24]
    1d3c:	add	x1, x1, #0x40
    1d40:	ldxr	w0, [x1]
    1d44:	stlxr	w2, wzr, [x1]
    1d48:	cbnz	w2, 1d40 <GOMP_loop_ordered_dynamic_next+0x78>
    1d4c:	tbnz	w0, #31, 1d6c <GOMP_loop_ordered_dynamic_next+0xa4>
    1d50:	mov	w0, w19
    1d54:	ldp	x19, x20, [sp, #16]
    1d58:	ldp	x21, x22, [sp, #32]
    1d5c:	ldp	x29, x30, [sp], #48
    1d60:	ret
    1d64:	bl	0 <gomp_ordered_last>
    1d68:	b	1d34 <GOMP_loop_ordered_dynamic_next+0x6c>
    1d6c:	mov	x0, x1
    1d70:	bl	0 <gomp_mutex_unlock_slow>
    1d74:	mov	w0, w19
    1d78:	ldp	x19, x20, [sp, #16]
    1d7c:	ldp	x21, x22, [sp, #32]
    1d80:	ldp	x29, x30, [sp], #48
    1d84:	ret
    1d88:	mov	x0, x2
    1d8c:	bl	0 <gomp_mutex_lock_slow>
    1d90:	b	1d18 <GOMP_loop_ordered_dynamic_next+0x50>
    1d94:	nop

0000000000001d98 <GOMP_loop_ordered_guided_next>:
    1d98:	stp	x29, x30, [sp, #-48]!
    1d9c:	mov	x29, sp
    1da0:	stp	x21, x22, [sp, #32]
    1da4:	mov	x21, x1
    1da8:	adrp	x22, 0 <gomp_tls_data>
    1dac:	ldr	x22, [x22]
    1db0:	stp	x19, x20, [sp, #16]
    1db4:	mov	x19, x0
    1db8:	mrs	x20, tpidr_el0
    1dbc:	bl	0 <gomp_ordered_sync>
    1dc0:	add	x1, x20, x22
    1dc4:	mov	w0, #0x1                   	// #1
    1dc8:	ldr	x2, [x1, #24]
    1dcc:	add	x2, x2, #0x40
    1dd0:	ldaxr	w1, [x2]
    1dd4:	cbnz	w1, 1de0 <GOMP_loop_ordered_guided_next+0x48>
    1dd8:	stxr	w3, w0, [x2]
    1ddc:	cbnz	w3, 1dd0 <GOMP_loop_ordered_guided_next+0x38>
    1de0:	cmp	w1, #0x0
    1de4:	b.ne	1e58 <GOMP_loop_ordered_guided_next+0xc0>  // b.any
    1de8:	mov	x0, x19
    1dec:	mov	x1, x21
    1df0:	bl	0 <gomp_iter_guided_next_locked>
    1df4:	mov	w19, w0
    1df8:	tst	w0, #0xff
    1dfc:	b.eq	1e34 <GOMP_loop_ordered_guided_next+0x9c>  // b.none
    1e00:	bl	0 <gomp_ordered_next>
    1e04:	add	x20, x20, x22
    1e08:	ldr	x1, [x20, #24]
    1e0c:	add	x1, x1, #0x40
    1e10:	ldxr	w0, [x1]
    1e14:	stlxr	w2, wzr, [x1]
    1e18:	cbnz	w2, 1e10 <GOMP_loop_ordered_guided_next+0x78>
    1e1c:	tbnz	w0, #31, 1e3c <GOMP_loop_ordered_guided_next+0xa4>
    1e20:	mov	w0, w19
    1e24:	ldp	x19, x20, [sp, #16]
    1e28:	ldp	x21, x22, [sp, #32]
    1e2c:	ldp	x29, x30, [sp], #48
    1e30:	ret
    1e34:	bl	0 <gomp_ordered_last>
    1e38:	b	1e04 <GOMP_loop_ordered_guided_next+0x6c>
    1e3c:	mov	x0, x1
    1e40:	bl	0 <gomp_mutex_unlock_slow>
    1e44:	mov	w0, w19
    1e48:	ldp	x19, x20, [sp, #16]
    1e4c:	ldp	x21, x22, [sp, #32]
    1e50:	ldp	x29, x30, [sp], #48
    1e54:	ret
    1e58:	mov	x0, x2
    1e5c:	bl	0 <gomp_mutex_lock_slow>
    1e60:	b	1de8 <GOMP_loop_ordered_guided_next+0x50>
    1e64:	nop

0000000000001e68 <GOMP_loop_ordered_runtime_next>:
    1e68:	stp	x29, x30, [sp, #-64]!
    1e6c:	mov	x29, sp
    1e70:	stp	x19, x20, [sp, #16]
    1e74:	mov	x20, x0
    1e78:	adrp	x19, 0 <gomp_tls_data>
    1e7c:	ldr	x19, [x19]
    1e80:	stp	x21, x22, [sp, #32]
    1e84:	mrs	x22, tpidr_el0
    1e88:	mov	x21, x1
    1e8c:	str	x23, [sp, #48]
    1e90:	add	x23, x22, x19
    1e94:	ldr	x0, [x23, #24]
    1e98:	ldr	w2, [x0]
    1e9c:	cmp	w2, #0x2
    1ea0:	b.eq	1fa4 <GOMP_loop_ordered_runtime_next+0x13c>  // b.none
    1ea4:	b.ls	1f14 <GOMP_loop_ordered_runtime_next+0xac>  // b.plast
    1ea8:	cmp	w2, #0x3
    1eac:	b.ne	1f98 <GOMP_loop_ordered_runtime_next+0x130>  // b.any
    1eb0:	bl	0 <gomp_ordered_sync>
    1eb4:	ldr	x0, [x23, #24]
    1eb8:	mov	w2, #0x1                   	// #1
    1ebc:	add	x0, x0, #0x40
    1ec0:	ldaxr	w1, [x0]
    1ec4:	cbnz	w1, 1ed0 <GOMP_loop_ordered_runtime_next+0x68>
    1ec8:	stxr	w3, w2, [x0]
    1ecc:	cbnz	w3, 1ec0 <GOMP_loop_ordered_runtime_next+0x58>
    1ed0:	cmp	w1, #0x0
    1ed4:	b.ne	2034 <GOMP_loop_ordered_runtime_next+0x1cc>  // b.any
    1ed8:	mov	x0, x20
    1edc:	mov	x1, x21
    1ee0:	bl	0 <gomp_iter_guided_next_locked>
    1ee4:	ands	w20, w0, #0xff
    1ee8:	b.ne	2008 <GOMP_loop_ordered_runtime_next+0x1a0>  // b.any
    1eec:	bl	0 <gomp_ordered_last>
    1ef0:	add	x19, x22, x19
    1ef4:	ldr	x0, [x19, #24]
    1ef8:	add	x0, x0, #0x40
    1efc:	ldxr	w1, [x0]
    1f00:	stlxr	w2, wzr, [x0]
    1f04:	cbnz	w2, 1efc <GOMP_loop_ordered_runtime_next+0x94>
    1f08:	tbz	w1, #31, 1f80 <GOMP_loop_ordered_runtime_next+0x118>
    1f0c:	bl	0 <gomp_mutex_unlock_slow>
    1f10:	b	1f80 <GOMP_loop_ordered_runtime_next+0x118>
    1f14:	cmp	w2, #0x1
    1f18:	b.ne	1fa0 <GOMP_loop_ordered_runtime_next+0x138>  // b.any
    1f1c:	bl	0 <gomp_ordered_sync>
    1f20:	add	x0, x22, x19
    1f24:	mov	w2, #0x1                   	// #1
    1f28:	ldr	x0, [x0, #24]
    1f2c:	add	x0, x0, #0x40
    1f30:	ldaxr	w1, [x0]
    1f34:	cbnz	w1, 1f40 <GOMP_loop_ordered_runtime_next+0xd8>
    1f38:	stxr	w3, w2, [x0]
    1f3c:	cbnz	w3, 1f30 <GOMP_loop_ordered_runtime_next+0xc8>
    1f40:	cmp	w1, #0x0
    1f44:	b.ne	2024 <GOMP_loop_ordered_runtime_next+0x1bc>  // b.any
    1f48:	mov	x0, x20
    1f4c:	mov	x1, x21
    1f50:	bl	0 <gomp_iter_static_next>
    1f54:	mov	w20, w0
    1f58:	tbz	w0, #31, 2010 <GOMP_loop_ordered_runtime_next+0x1a8>
    1f5c:	add	x19, x22, x19
    1f60:	ldr	x1, [x19, #24]
    1f64:	add	x1, x1, #0x40
    1f68:	ldxr	w0, [x1]
    1f6c:	stlxr	w2, wzr, [x1]
    1f70:	cbnz	w2, 1f68 <GOMP_loop_ordered_runtime_next+0x100>
    1f74:	tbnz	w0, #31, 2018 <GOMP_loop_ordered_runtime_next+0x1b0>
    1f78:	cmp	w20, #0x0
    1f7c:	cset	w20, eq  // eq = none
    1f80:	mov	w0, w20
    1f84:	ldp	x19, x20, [sp, #16]
    1f88:	ldp	x21, x22, [sp, #32]
    1f8c:	ldr	x23, [sp, #48]
    1f90:	ldp	x29, x30, [sp], #64
    1f94:	ret
    1f98:	cmp	w2, #0x4
    1f9c:	b.eq	1f1c <GOMP_loop_ordered_runtime_next+0xb4>  // b.none
    1fa0:	bl	0 <abort>
    1fa4:	bl	0 <gomp_ordered_sync>
    1fa8:	ldr	x0, [x23, #24]
    1fac:	mov	w2, #0x1                   	// #1
    1fb0:	add	x0, x0, #0x40
    1fb4:	ldaxr	w1, [x0]
    1fb8:	cbnz	w1, 1fc4 <GOMP_loop_ordered_runtime_next+0x15c>
    1fbc:	stxr	w3, w2, [x0]
    1fc0:	cbnz	w3, 1fb4 <GOMP_loop_ordered_runtime_next+0x14c>
    1fc4:	cmp	w1, #0x0
    1fc8:	b.ne	202c <GOMP_loop_ordered_runtime_next+0x1c4>  // b.any
    1fcc:	mov	x0, x20
    1fd0:	mov	x1, x21
    1fd4:	bl	0 <gomp_iter_dynamic_next_locked>
    1fd8:	ands	w20, w0, #0xff
    1fdc:	b.ne	2000 <GOMP_loop_ordered_runtime_next+0x198>  // b.any
    1fe0:	bl	0 <gomp_ordered_last>
    1fe4:	add	x19, x22, x19
    1fe8:	ldr	x0, [x19, #24]
    1fec:	add	x0, x0, #0x40
    1ff0:	ldxr	w1, [x0]
    1ff4:	stlxr	w2, wzr, [x0]
    1ff8:	cbz	w2, 1f08 <GOMP_loop_ordered_runtime_next+0xa0>
    1ffc:	b	1ff0 <GOMP_loop_ordered_runtime_next+0x188>
    2000:	bl	0 <gomp_ordered_next>
    2004:	b	1fe4 <GOMP_loop_ordered_runtime_next+0x17c>
    2008:	bl	0 <gomp_ordered_next>
    200c:	b	1ef0 <GOMP_loop_ordered_runtime_next+0x88>
    2010:	bl	0 <gomp_ordered_static_next>
    2014:	b	1f5c <GOMP_loop_ordered_runtime_next+0xf4>
    2018:	mov	x0, x1
    201c:	bl	0 <gomp_mutex_unlock_slow>
    2020:	b	1f78 <GOMP_loop_ordered_runtime_next+0x110>
    2024:	bl	0 <gomp_mutex_lock_slow>
    2028:	b	1f48 <GOMP_loop_ordered_runtime_next+0xe0>
    202c:	bl	0 <gomp_mutex_lock_slow>
    2030:	b	1fcc <GOMP_loop_ordered_runtime_next+0x164>
    2034:	bl	0 <gomp_mutex_lock_slow>
    2038:	b	1ed8 <GOMP_loop_ordered_runtime_next+0x70>
    203c:	nop

0000000000002040 <GOMP_parallel_loop_static_start>:
    2040:	stp	x29, x30, [sp, #-80]!
    2044:	mov	x29, sp
    2048:	stp	x23, x24, [sp, #48]
    204c:	mov	x23, x1
    2050:	mov	w1, #0x0                   	// #0
    2054:	stp	x19, x20, [sp, #16]
    2058:	mov	x20, x3
    205c:	mov	x19, x4
    2060:	stp	x21, x22, [sp, #32]
    2064:	mov	x21, x5
    2068:	mov	x22, x0
    206c:	mov	w0, w2
    2070:	str	x25, [sp, #64]
    2074:	mov	x25, x6
    2078:	bl	0 <gomp_resolve_num_threads>
    207c:	mov	w24, w0
    2080:	bl	0 <gomp_new_team>
    2084:	add	x3, x0, #0x100
    2088:	mov	w1, #0x1                   	// #1
    208c:	str	w1, [x0, #256]
    2090:	cmp	x21, #0x0
    2094:	mov	x4, x0
    2098:	ccmp	x20, x19, #0x4, gt
    209c:	str	x25, [x3, #8]
    20a0:	b.gt	20e4 <GOMP_parallel_loop_static_start+0xa4>
    20a4:	cmp	x21, #0x0
    20a8:	ccmp	x20, x19, #0x0, lt  // lt = tstop
    20ac:	csel	x19, x19, x20, ge  // ge = tcont
    20b0:	mov	w2, w24
    20b4:	mov	x1, x23
    20b8:	ldp	x23, x24, [sp, #48]
    20bc:	mov	x0, x22
    20c0:	ldr	x25, [sp, #64]
    20c4:	stp	x19, x21, [x3, #16]
    20c8:	mov	x5, #0x0                   	// #0
    20cc:	str	x20, [x3, #72]
    20d0:	mov	w3, #0x0                   	// #0
    20d4:	ldp	x19, x20, [sp, #16]
    20d8:	ldp	x21, x22, [sp, #32]
    20dc:	ldp	x29, x30, [sp], #80
    20e0:	b	0 <gomp_team_start>
    20e4:	mov	x19, x20
    20e8:	b	20b0 <GOMP_parallel_loop_static_start+0x70>
    20ec:	nop

00000000000020f0 <GOMP_parallel_loop_dynamic_start>:
    20f0:	stp	x29, x30, [sp, #-80]!
    20f4:	mov	x29, sp
    20f8:	str	x25, [sp, #64]
    20fc:	mov	x25, x1
    2100:	mov	w1, #0x0                   	// #0
    2104:	stp	x19, x20, [sp, #16]
    2108:	mov	x20, x5
    210c:	mov	x19, x4
    2110:	stp	x21, x22, [sp, #32]
    2114:	mov	x21, x3
    2118:	mov	x22, x6
    211c:	stp	x23, x24, [sp, #48]
    2120:	mov	x24, x0
    2124:	mov	w0, w2
    2128:	bl	0 <gomp_resolve_num_threads>
    212c:	mov	w23, w0
    2130:	bl	0 <gomp_new_team>
    2134:	add	x5, x0, #0x100
    2138:	mov	w1, #0x2                   	// #2
    213c:	str	w1, [x0, #256]
    2140:	cmp	x20, #0x0
    2144:	mul	x3, x20, x22
    2148:	mov	x4, x0
    214c:	str	x22, [x5, #8]
    2150:	ccmp	x21, x19, #0x4, gt
    2154:	b.gt	21ec <GOMP_parallel_loop_dynamic_start+0xfc>
    2158:	adrp	x0, 0 <gomp_tls_data>
    215c:	ldr	x0, [x0]
    2160:	mrs	x1, tpidr_el0
    2164:	cmp	x20, #0x0
    2168:	str	x20, [x5, #24]
    216c:	add	x1, x1, x0
    2170:	ccmp	x21, x19, #0x0, lt  // lt = tstop
    2174:	csel	x19, x19, x21, ge  // ge = tcont
    2178:	stp	x3, x19, [x5, #8]
    217c:	mov	x0, #0x1                   	// #1
    2180:	ldr	x1, [x1, #16]
    2184:	str	x21, [x5, #72]
    2188:	cbz	x1, 2190 <GOMP_parallel_loop_dynamic_start+0xa0>
    218c:	ldr	w0, [x1]
    2190:	cmp	x20, #0x0
    2194:	b.le	221c <GOMP_parallel_loop_dynamic_start+0x12c>
    2198:	orr	x2, x3, x0
    219c:	mov	x1, #0x7fffffff            	// #2147483647
    21a0:	cmp	x2, x1
    21a4:	b.hi	2250 <GOMP_parallel_loop_dynamic_start+0x160>  // b.pmore
    21a8:	madd	x3, x0, x3, x3
    21ac:	mov	x0, #0x7fffffffffffffff    	// #9223372036854775807
    21b0:	sub	x3, x0, x3
    21b4:	cmp	x3, x19
    21b8:	cset	w0, gt
    21bc:	str	w0, [x5, #4]
    21c0:	mov	w2, w23
    21c4:	mov	x1, x25
    21c8:	mov	x0, x24
    21cc:	mov	x5, #0x0                   	// #0
    21d0:	ldp	x19, x20, [sp, #16]
    21d4:	mov	w3, #0x0                   	// #0
    21d8:	ldp	x21, x22, [sp, #32]
    21dc:	ldp	x23, x24, [sp, #48]
    21e0:	ldr	x25, [sp, #64]
    21e4:	ldp	x29, x30, [sp], #80
    21e8:	b	0 <gomp_team_start>
    21ec:	adrp	x1, 0 <gomp_tls_data>
    21f0:	ldr	x1, [x1]
    21f4:	mrs	x0, tpidr_el0
    21f8:	stp	x3, x21, [x5, #8]
    21fc:	mov	x19, x21
    2200:	add	x0, x0, x1
    2204:	str	x20, [x5, #24]
    2208:	str	x21, [x5, #72]
    220c:	ldr	x1, [x0, #16]
    2210:	mov	x0, #0x1                   	// #1
    2214:	cbnz	x1, 218c <GOMP_parallel_loop_dynamic_start+0x9c>
    2218:	b	2198 <GOMP_parallel_loop_dynamic_start+0xa8>
    221c:	neg	x6, x3
    2220:	mov	x1, #0x7fffffff            	// #2147483647
    2224:	orr	x2, x0, x6
    2228:	cmp	x2, x1
    222c:	b.hi	2250 <GOMP_parallel_loop_dynamic_start+0x160>  // b.pmore
    2230:	madd	x6, x0, x6, x6
    2234:	mov	x0, #0x2                   	// #2
    2238:	movk	x0, #0x8000, lsl #48
    223c:	add	x6, x6, x0
    2240:	cmp	x6, x19
    2244:	cset	w0, le
    2248:	str	w0, [x5, #4]
    224c:	b	21c0 <GOMP_parallel_loop_dynamic_start+0xd0>
    2250:	str	wzr, [x5, #4]
    2254:	b	21c0 <GOMP_parallel_loop_dynamic_start+0xd0>

0000000000002258 <GOMP_parallel_loop_guided_start>:
    2258:	stp	x29, x30, [sp, #-80]!
    225c:	mov	x29, sp
    2260:	stp	x23, x24, [sp, #48]
    2264:	mov	x23, x1
    2268:	mov	w1, #0x0                   	// #0
    226c:	stp	x19, x20, [sp, #16]
    2270:	mov	x20, x3
    2274:	mov	x19, x4
    2278:	stp	x21, x22, [sp, #32]
    227c:	mov	x21, x5
    2280:	mov	x22, x0
    2284:	mov	w0, w2
    2288:	str	x25, [sp, #64]
    228c:	mov	x25, x6
    2290:	bl	0 <gomp_resolve_num_threads>
    2294:	mov	w24, w0
    2298:	bl	0 <gomp_new_team>
    229c:	add	x3, x0, #0x100
    22a0:	mov	w1, #0x3                   	// #3
    22a4:	str	w1, [x0, #256]
    22a8:	cmp	x21, #0x0
    22ac:	mov	x4, x0
    22b0:	ccmp	x20, x19, #0x4, gt
    22b4:	str	x25, [x3, #8]
    22b8:	b.gt	22fc <GOMP_parallel_loop_guided_start+0xa4>
    22bc:	cmp	x21, #0x0
    22c0:	ccmp	x20, x19, #0x0, lt  // lt = tstop
    22c4:	csel	x19, x19, x20, ge  // ge = tcont
    22c8:	mov	w2, w24
    22cc:	mov	x1, x23
    22d0:	ldp	x23, x24, [sp, #48]
    22d4:	mov	x0, x22
    22d8:	ldr	x25, [sp, #64]
    22dc:	stp	x19, x21, [x3, #16]
    22e0:	mov	x5, #0x0                   	// #0
    22e4:	str	x20, [x3, #72]
    22e8:	mov	w3, #0x0                   	// #0
    22ec:	ldp	x19, x20, [sp, #16]
    22f0:	ldp	x21, x22, [sp, #32]
    22f4:	ldp	x29, x30, [sp], #80
    22f8:	b	0 <gomp_team_start>
    22fc:	mov	x19, x20
    2300:	b	22c8 <GOMP_parallel_loop_guided_start+0x70>
    2304:	nop

0000000000002308 <GOMP_parallel_loop_runtime_start>:
    2308:	stp	x29, x30, [sp, #-96]!
    230c:	adrp	x6, 0 <gomp_global_icv>
    2310:	add	x6, x6, #0x0
    2314:	mov	x29, sp
    2318:	stp	x27, x28, [sp, #80]
    231c:	mrs	x27, tpidr_el0
    2320:	adrp	x28, 0 <gomp_tls_data>
    2324:	ldr	x28, [x28]
    2328:	stp	x25, x26, [sp, #64]
    232c:	mov	x25, x1
    2330:	add	x7, x27, x28
    2334:	mov	w1, #0x0                   	// #0
    2338:	stp	x19, x20, [sp, #16]
    233c:	mov	x20, x3
    2340:	ldr	x7, [x7, #80]
    2344:	mov	x19, x4
    2348:	stp	x21, x22, [sp, #32]
    234c:	mov	x21, x5
    2350:	cmp	x7, #0x0
    2354:	add	x7, x7, #0x90
    2358:	stp	x23, x24, [sp, #48]
    235c:	csel	x6, x6, x7, eq  // eq = none
    2360:	mov	x24, x0
    2364:	mov	w0, w2
    2368:	ldrsw	x23, [x6, #12]
    236c:	ldr	w22, [x6, #8]
    2370:	bl	0 <gomp_resolve_num_threads>
    2374:	mov	w26, w0
    2378:	bl	0 <gomp_new_team>
    237c:	add	x3, x0, #0x100
    2380:	and	w22, w22, #0x7fffffff
    2384:	str	w22, [x0, #256]
    2388:	cmp	x21, #0x0
    238c:	mov	x4, x0
    2390:	ccmp	x20, x19, #0x4, gt
    2394:	str	x23, [x3, #8]
    2398:	b.gt	23e8 <GOMP_parallel_loop_runtime_start+0xe0>
    239c:	cmp	x21, #0x0
    23a0:	str	x20, [x3, #72]
    23a4:	ccmp	x20, x19, #0x0, lt  // lt = tstop
    23a8:	csel	x19, x19, x20, ge  // ge = tcont
    23ac:	stp	x19, x21, [x3, #16]
    23b0:	cmp	w22, #0x2
    23b4:	b.eq	23fc <GOMP_parallel_loop_runtime_start+0xf4>  // b.none
    23b8:	mov	w2, w26
    23bc:	mov	x1, x25
    23c0:	mov	x0, x24
    23c4:	mov	x5, #0x0                   	// #0
    23c8:	ldp	x19, x20, [sp, #16]
    23cc:	mov	w3, #0x0                   	// #0
    23d0:	ldp	x21, x22, [sp, #32]
    23d4:	ldp	x23, x24, [sp, #48]
    23d8:	ldp	x25, x26, [sp, #64]
    23dc:	ldp	x27, x28, [sp, #80]
    23e0:	ldp	x29, x30, [sp], #96
    23e4:	b	0 <gomp_team_start>
    23e8:	mov	x19, x20
    23ec:	stp	x19, x21, [x3, #16]
    23f0:	cmp	w22, #0x2
    23f4:	str	x20, [x3, #72]
    23f8:	b.ne	23b8 <GOMP_parallel_loop_runtime_start+0xb0>  // b.any
    23fc:	add	x27, x27, x28
    2400:	mul	x23, x23, x21
    2404:	str	x23, [x3, #8]
    2408:	mov	x0, #0x1                   	// #1
    240c:	ldr	x1, [x27, #16]
    2410:	cbz	x1, 2418 <GOMP_parallel_loop_runtime_start+0x110>
    2414:	ldr	w0, [x1]
    2418:	cmp	x21, #0x0
    241c:	b.le	244c <GOMP_parallel_loop_runtime_start+0x144>
    2420:	orr	x2, x23, x0
    2424:	mov	x1, #0x7fffffff            	// #2147483647
    2428:	cmp	x2, x1
    242c:	b.hi	2480 <GOMP_parallel_loop_runtime_start+0x178>  // b.pmore
    2430:	madd	x23, x0, x23, x23
    2434:	mov	x0, #0x7fffffffffffffff    	// #9223372036854775807
    2438:	sub	x23, x0, x23
    243c:	cmp	x19, x23
    2440:	cset	w0, lt  // lt = tstop
    2444:	str	w0, [x3, #4]
    2448:	b	23b8 <GOMP_parallel_loop_runtime_start+0xb0>
    244c:	neg	x5, x23
    2450:	mov	x1, #0x7fffffff            	// #2147483647
    2454:	orr	x2, x0, x5
    2458:	cmp	x2, x1
    245c:	b.hi	2480 <GOMP_parallel_loop_runtime_start+0x178>  // b.pmore
    2460:	madd	x5, x0, x5, x5
    2464:	mov	x0, #0x2                   	// #2
    2468:	movk	x0, #0x8000, lsl #48
    246c:	add	x5, x5, x0
    2470:	cmp	x19, x5
    2474:	cset	w0, ge  // ge = tcont
    2478:	str	w0, [x3, #4]
    247c:	b	23b8 <GOMP_parallel_loop_runtime_start+0xb0>
    2480:	str	wzr, [x3, #4]
    2484:	b	23b8 <GOMP_parallel_loop_runtime_start+0xb0>

0000000000002488 <GOMP_parallel_loop_static>:
    2488:	stp	x29, x30, [sp, #-80]!
    248c:	mov	x29, sp
    2490:	stp	x23, x24, [sp, #48]
    2494:	mov	x23, x1
    2498:	mov	w1, #0x0                   	// #0
    249c:	stp	x19, x20, [sp, #16]
    24a0:	mov	x19, x4
    24a4:	mov	x20, x3
    24a8:	stp	x21, x22, [sp, #32]
    24ac:	mov	x21, x5
    24b0:	mov	x22, x0
    24b4:	mov	w0, w2
    24b8:	stp	x25, x26, [sp, #64]
    24bc:	mov	x26, x6
    24c0:	mov	w25, w7
    24c4:	bl	0 <gomp_resolve_num_threads>
    24c8:	mov	w24, w0
    24cc:	bl	0 <gomp_new_team>
    24d0:	add	x8, x0, #0x100
    24d4:	mov	w1, #0x1                   	// #1
    24d8:	str	w1, [x0, #256]
    24dc:	cmp	x21, #0x0
    24e0:	mov	x4, x0
    24e4:	ccmp	x20, x19, #0x4, gt
    24e8:	str	x26, [x8, #8]
    24ec:	b.gt	253c <GOMP_parallel_loop_static+0xb4>
    24f0:	cmp	x21, #0x0
    24f4:	ccmp	x20, x19, #0x0, lt  // lt = tstop
    24f8:	csel	x19, x19, x20, ge  // ge = tcont
    24fc:	mov	w3, w25
    2500:	mov	w2, w24
    2504:	mov	x1, x23
    2508:	stp	x19, x21, [x8, #16]
    250c:	mov	x5, #0x0                   	// #0
    2510:	str	x20, [x8, #72]
    2514:	mov	x0, x22
    2518:	bl	0 <gomp_team_start>
    251c:	mov	x0, x23
    2520:	blr	x22
    2524:	ldp	x19, x20, [sp, #16]
    2528:	ldp	x21, x22, [sp, #32]
    252c:	ldp	x23, x24, [sp, #48]
    2530:	ldp	x25, x26, [sp, #64]
    2534:	ldp	x29, x30, [sp], #80
    2538:	b	0 <gomp_ialias_GOMP_parallel_end>
    253c:	mov	x19, x20
    2540:	b	24fc <GOMP_parallel_loop_static+0x74>
    2544:	nop

0000000000002548 <GOMP_parallel_loop_dynamic>:
    2548:	stp	x29, x30, [sp, #-80]!
    254c:	mov	x29, sp
    2550:	stp	x23, x24, [sp, #48]
    2554:	mov	x23, x1
    2558:	mov	w1, #0x0                   	// #0
    255c:	mov	x24, x6
    2560:	stp	x19, x20, [sp, #16]
    2564:	mov	x20, x5
    2568:	mov	x19, x4
    256c:	stp	x21, x22, [sp, #32]
    2570:	mov	x21, x3
    2574:	mov	x22, x0
    2578:	mov	w0, w2
    257c:	stp	x25, x26, [sp, #64]
    2580:	mov	w26, w7
    2584:	bl	0 <gomp_resolve_num_threads>
    2588:	mov	w25, w0
    258c:	bl	0 <gomp_new_team>
    2590:	add	x5, x0, #0x100
    2594:	mov	w1, #0x2                   	// #2
    2598:	str	w1, [x0, #256]
    259c:	cmp	x20, #0x0
    25a0:	mul	x8, x20, x24
    25a4:	mov	x4, x0
    25a8:	str	x24, [x5, #8]
    25ac:	ccmp	x21, x19, #0x4, gt
    25b0:	b.gt	2654 <GOMP_parallel_loop_dynamic+0x10c>
    25b4:	adrp	x0, 0 <gomp_tls_data>
    25b8:	ldr	x0, [x0]
    25bc:	mrs	x1, tpidr_el0
    25c0:	cmp	x20, #0x0
    25c4:	str	x20, [x5, #24]
    25c8:	add	x1, x1, x0
    25cc:	ccmp	x21, x19, #0x0, lt  // lt = tstop
    25d0:	csel	x19, x19, x21, ge  // ge = tcont
    25d4:	stp	x8, x19, [x5, #8]
    25d8:	mov	x0, #0x1                   	// #1
    25dc:	ldr	x1, [x1, #16]
    25e0:	str	x21, [x5, #72]
    25e4:	cbz	x1, 25ec <GOMP_parallel_loop_dynamic+0xa4>
    25e8:	ldr	w0, [x1]
    25ec:	cmp	x20, #0x0
    25f0:	b.le	2684 <GOMP_parallel_loop_dynamic+0x13c>
    25f4:	orr	x2, x8, x0
    25f8:	mov	x1, #0x7fffffff            	// #2147483647
    25fc:	cmp	x2, x1
    2600:	b.hi	26b8 <GOMP_parallel_loop_dynamic+0x170>  // b.pmore
    2604:	madd	x8, x0, x8, x8
    2608:	mov	x0, #0x7fffffffffffffff    	// #9223372036854775807
    260c:	sub	x8, x0, x8
    2610:	cmp	x8, x19
    2614:	cset	w0, gt
    2618:	str	w0, [x5, #4]
    261c:	mov	w3, w26
    2620:	mov	w2, w25
    2624:	mov	x1, x23
    2628:	mov	x5, #0x0                   	// #0
    262c:	mov	x0, x22
    2630:	bl	0 <gomp_team_start>
    2634:	mov	x0, x23
    2638:	blr	x22
    263c:	ldp	x19, x20, [sp, #16]
    2640:	ldp	x21, x22, [sp, #32]
    2644:	ldp	x23, x24, [sp, #48]
    2648:	ldp	x25, x26, [sp, #64]
    264c:	ldp	x29, x30, [sp], #80
    2650:	b	0 <gomp_ialias_GOMP_parallel_end>
    2654:	adrp	x1, 0 <gomp_tls_data>
    2658:	ldr	x1, [x1]
    265c:	mrs	x0, tpidr_el0
    2660:	stp	x8, x21, [x5, #8]
    2664:	mov	x19, x21
    2668:	add	x0, x0, x1
    266c:	str	x20, [x5, #24]
    2670:	str	x21, [x5, #72]
    2674:	ldr	x1, [x0, #16]
    2678:	mov	x0, #0x1                   	// #1
    267c:	cbnz	x1, 25e8 <GOMP_parallel_loop_dynamic+0xa0>
    2680:	b	25f4 <GOMP_parallel_loop_dynamic+0xac>
    2684:	neg	x6, x8
    2688:	mov	x1, #0x7fffffff            	// #2147483647
    268c:	orr	x2, x0, x6
    2690:	cmp	x2, x1
    2694:	b.hi	26b8 <GOMP_parallel_loop_dynamic+0x170>  // b.pmore
    2698:	madd	x6, x0, x6, x6
    269c:	mov	x0, #0x2                   	// #2
    26a0:	movk	x0, #0x8000, lsl #48
    26a4:	add	x6, x6, x0
    26a8:	cmp	x6, x19
    26ac:	cset	w0, le
    26b0:	str	w0, [x5, #4]
    26b4:	b	261c <GOMP_parallel_loop_dynamic+0xd4>
    26b8:	str	wzr, [x5, #4]
    26bc:	b	261c <GOMP_parallel_loop_dynamic+0xd4>

00000000000026c0 <GOMP_parallel_loop_guided>:
    26c0:	stp	x29, x30, [sp, #-80]!
    26c4:	mov	x29, sp
    26c8:	stp	x23, x24, [sp, #48]
    26cc:	mov	x23, x1
    26d0:	mov	w1, #0x0                   	// #0
    26d4:	stp	x19, x20, [sp, #16]
    26d8:	mov	x19, x4
    26dc:	mov	x20, x3
    26e0:	stp	x21, x22, [sp, #32]
    26e4:	mov	x21, x5
    26e8:	mov	x22, x0
    26ec:	mov	w0, w2
    26f0:	stp	x25, x26, [sp, #64]
    26f4:	mov	x26, x6
    26f8:	mov	w25, w7
    26fc:	bl	0 <gomp_resolve_num_threads>
    2700:	mov	w24, w0
    2704:	bl	0 <gomp_new_team>
    2708:	add	x8, x0, #0x100
    270c:	mov	w1, #0x3                   	// #3
    2710:	str	w1, [x0, #256]
    2714:	cmp	x21, #0x0
    2718:	mov	x4, x0
    271c:	ccmp	x20, x19, #0x4, gt
    2720:	str	x26, [x8, #8]
    2724:	b.gt	2774 <GOMP_parallel_loop_guided+0xb4>
    2728:	cmp	x21, #0x0
    272c:	ccmp	x20, x19, #0x0, lt  // lt = tstop
    2730:	csel	x19, x19, x20, ge  // ge = tcont
    2734:	mov	w3, w25
    2738:	mov	w2, w24
    273c:	mov	x1, x23
    2740:	stp	x19, x21, [x8, #16]
    2744:	mov	x5, #0x0                   	// #0
    2748:	str	x20, [x8, #72]
    274c:	mov	x0, x22
    2750:	bl	0 <gomp_team_start>
    2754:	mov	x0, x23
    2758:	blr	x22
    275c:	ldp	x19, x20, [sp, #16]
    2760:	ldp	x21, x22, [sp, #32]
    2764:	ldp	x23, x24, [sp, #48]
    2768:	ldp	x25, x26, [sp, #64]
    276c:	ldp	x29, x30, [sp], #80
    2770:	b	0 <gomp_ialias_GOMP_parallel_end>
    2774:	mov	x19, x20
    2778:	b	2734 <GOMP_parallel_loop_guided+0x74>
    277c:	nop

0000000000002780 <GOMP_parallel_loop_maybe_nonmonotonic_runtime>:
    2780:	stp	x29, x30, [sp, #-112]!
    2784:	adrp	x7, 0 <gomp_global_icv>
    2788:	add	x7, x7, #0x0
    278c:	mov	x29, sp
    2790:	stp	x27, x28, [sp, #80]
    2794:	adrp	x27, 0 <gomp_tls_data>
    2798:	ldr	x27, [x27]
    279c:	stp	x25, x26, [sp, #64]
    27a0:	mrs	x26, tpidr_el0
    27a4:	add	x8, x26, x27
    27a8:	stp	x23, x24, [sp, #48]
    27ac:	mov	x23, x1
    27b0:	mov	w1, #0x0                   	// #0
    27b4:	ldr	x8, [x8, #80]
    27b8:	stp	x19, x20, [sp, #16]
    27bc:	mov	x20, x3
    27c0:	cmp	x8, #0x0
    27c4:	add	x8, x8, #0x90
    27c8:	csel	x7, x7, x8, eq  // eq = none
    27cc:	mov	x19, x4
    27d0:	stp	x21, x22, [sp, #32]
    27d4:	mov	x21, x5
    27d8:	mov	x22, x0
    27dc:	ldrsw	x25, [x7, #12]
    27e0:	mov	w0, w2
    27e4:	ldr	w24, [x7, #8]
    27e8:	str	w6, [sp, #108]
    27ec:	bl	0 <gomp_resolve_num_threads>
    27f0:	mov	w28, w0
    27f4:	bl	0 <gomp_new_team>
    27f8:	add	x5, x0, #0x100
    27fc:	and	w24, w24, #0x7fffffff
    2800:	str	w24, [x0, #256]
    2804:	cmp	x21, #0x0
    2808:	ldr	w3, [sp, #108]
    280c:	mov	x4, x0
    2810:	str	x25, [x5, #8]
    2814:	ccmp	x20, x19, #0x4, gt
    2818:	b.gt	2870 <GOMP_parallel_loop_maybe_nonmonotonic_runtime+0xf0>
    281c:	cmp	x21, #0x0
    2820:	str	x20, [x5, #72]
    2824:	ccmp	x20, x19, #0x0, lt  // lt = tstop
    2828:	csel	x19, x19, x20, ge  // ge = tcont
    282c:	stp	x19, x21, [x5, #16]
    2830:	cmp	w24, #0x2
    2834:	b.eq	2884 <GOMP_parallel_loop_maybe_nonmonotonic_runtime+0x104>  // b.none
    2838:	mov	w2, w28
    283c:	mov	x1, x23
    2840:	mov	x5, #0x0                   	// #0
    2844:	mov	x0, x22
    2848:	bl	0 <gomp_team_start>
    284c:	mov	x0, x23
    2850:	blr	x22
    2854:	ldp	x19, x20, [sp, #16]
    2858:	ldp	x21, x22, [sp, #32]
    285c:	ldp	x23, x24, [sp, #48]
    2860:	ldp	x25, x26, [sp, #64]
    2864:	ldp	x27, x28, [sp, #80]
    2868:	ldp	x29, x30, [sp], #112
    286c:	b	0 <gomp_ialias_GOMP_parallel_end>
    2870:	mov	x19, x20
    2874:	stp	x19, x21, [x5, #16]
    2878:	cmp	w24, #0x2
    287c:	str	x20, [x5, #72]
    2880:	b.ne	2838 <GOMP_parallel_loop_maybe_nonmonotonic_runtime+0xb8>  // b.any
    2884:	add	x26, x26, x27
    2888:	mul	x25, x25, x21
    288c:	str	x25, [x5, #8]
    2890:	mov	x0, #0x1                   	// #1
    2894:	ldr	x1, [x26, #16]
    2898:	cbz	x1, 28a0 <GOMP_parallel_loop_maybe_nonmonotonic_runtime+0x120>
    289c:	ldr	w0, [x1]
    28a0:	cmp	x21, #0x0
    28a4:	b.le	28d4 <GOMP_parallel_loop_maybe_nonmonotonic_runtime+0x154>
    28a8:	orr	x2, x25, x0
    28ac:	mov	x1, #0x7fffffff            	// #2147483647
    28b0:	cmp	x2, x1
    28b4:	b.hi	2908 <GOMP_parallel_loop_maybe_nonmonotonic_runtime+0x188>  // b.pmore
    28b8:	madd	x25, x0, x25, x25
    28bc:	mov	x0, #0x7fffffffffffffff    	// #9223372036854775807
    28c0:	sub	x25, x0, x25
    28c4:	cmp	x19, x25
    28c8:	cset	w0, lt  // lt = tstop
    28cc:	str	w0, [x5, #4]
    28d0:	b	2838 <GOMP_parallel_loop_maybe_nonmonotonic_runtime+0xb8>
    28d4:	neg	x1, x25
    28d8:	mov	x2, #0x7fffffff            	// #2147483647
    28dc:	orr	x6, x0, x1
    28e0:	cmp	x6, x2
    28e4:	b.hi	2908 <GOMP_parallel_loop_maybe_nonmonotonic_runtime+0x188>  // b.pmore
    28e8:	madd	x1, x0, x1, x1
    28ec:	mov	x0, #0x2                   	// #2
    28f0:	movk	x0, #0x8000, lsl #48
    28f4:	add	x1, x1, x0
    28f8:	cmp	x19, x1
    28fc:	cset	w0, ge  // ge = tcont
    2900:	str	w0, [x5, #4]
    2904:	b	2838 <GOMP_parallel_loop_maybe_nonmonotonic_runtime+0xb8>
    2908:	str	wzr, [x5, #4]
    290c:	b	2838 <GOMP_parallel_loop_maybe_nonmonotonic_runtime+0xb8>

0000000000002910 <GOMP_loop_end>:
    2910:	b	0 <gomp_work_share_end>
    2914:	nop

0000000000002918 <GOMP_loop_end_cancel>:
    2918:	b	0 <gomp_work_share_end_cancel>
    291c:	nop

0000000000002920 <GOMP_loop_end_nowait>:
    2920:	b	0 <gomp_work_share_end_nowait>

loop_ull.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_loop_ull_static_start>:
       0:	stp	x29, x30, [sp, #-96]!
       4:	mov	x29, sp
       8:	stp	x27, x28, [sp, #80]
       c:	and	w27, w0, #0xff
      10:	adrp	x28, 0 <gomp_tls_data>
      14:	ldr	x28, [x28]
      18:	stp	x23, x24, [sp, #48]
      1c:	mrs	x24, tpidr_el0
      20:	mov	x23, x3
      24:	stp	x25, x26, [sp, #64]
      28:	add	x26, x24, x28
      2c:	mov	x25, x4
      30:	stp	x19, x20, [sp, #16]
      34:	mov	x0, #0x0                   	// #0
      38:	mov	x19, x1
      3c:	stp	x21, x22, [sp, #32]
      40:	mov	x20, x5
      44:	mov	x22, x2
      48:	mov	x21, x6
      4c:	str	xzr, [x26, #72]
      50:	bl	0 <gomp_work_share_start>
      54:	tst	w0, #0xff
      58:	b.eq	ac <GOMP_loop_ull_static_start+0xac>  // b.none
      5c:	ldr	x7, [x26, #24]
      60:	mov	w0, #0x1                   	// #1
      64:	cmp	w27, #0x0
      68:	ccmp	x19, x22, #0x0, ne  // ne = any
      6c:	str	w0, [x7]
      70:	str	x25, [x7, #8]
      74:	b.ls	dc <GOMP_loop_ull_static_start+0xdc>  // b.plast
      78:	str	wzr, [x7, #4]
      7c:	stp	x19, x23, [x7, #16]
      80:	str	x19, [x7, #72]
      84:	add	x24, x24, x28
      88:	ldr	x0, [x24, #32]
      8c:	cbz	x0, ac <GOMP_loop_ull_static_start+0xac>
      90:	add	x0, x0, #0x50
      94:	ldxr	x1, [x0]
      98:	stlxr	w2, x7, [x0]
      9c:	cbnz	w2, 94 <GOMP_loop_ull_static_start+0x94>
      a0:	cmp	x1, #0x1
      a4:	b.eq	ac <GOMP_loop_ull_static_start+0xac>  // b.none
      a8:	bl	0 <gomp_ptrlock_set_slow>
      ac:	mov	x1, x21
      b0:	mov	x0, x20
      b4:	bl	0 <gomp_iter_ull_static_next>
      b8:	cmp	w0, #0x0
      bc:	cset	w0, eq  // eq = none
      c0:	ldp	x19, x20, [sp, #16]
      c4:	ldp	x21, x22, [sp, #32]
      c8:	ldp	x23, x24, [sp, #48]
      cc:	ldp	x25, x26, [sp, #64]
      d0:	ldp	x27, x28, [sp, #80]
      d4:	ldp	x29, x30, [sp], #96
      d8:	ret
      dc:	cmp	x19, x22
      e0:	eor	w0, w27, w0
      e4:	cset	w1, cc  // cc = lo, ul, last
      e8:	tst	w1, w0
      ec:	b.ne	10c <GOMP_loop_ull_static_start+0x10c>  // b.any
      f0:	str	wzr, [x7, #4]
      f4:	stp	x22, x23, [x7, #16]
      f8:	str	x19, [x7, #72]
      fc:	cbnz	w27, 84 <GOMP_loop_ull_static_start+0x84>
     100:	mov	w0, #0x2                   	// #2
     104:	str	w0, [x7, #4]
     108:	b	84 <GOMP_loop_ull_static_start+0x84>
     10c:	stp	x19, x23, [x7, #16]
     110:	str	x19, [x7, #72]
     114:	b	100 <GOMP_loop_ull_static_start+0x100>

0000000000000118 <GOMP_loop_ull_dynamic_start>:
     118:	stp	x29, x30, [sp, #-80]!
     11c:	mov	x29, sp
     120:	stp	x19, x20, [sp, #16]
     124:	mov	x19, x1
     128:	mov	x20, x5
     12c:	stp	x21, x22, [sp, #32]
     130:	mov	x22, x4
     134:	mov	x21, x6
     138:	stp	x23, x24, [sp, #48]
     13c:	mov	x24, x2
     140:	mov	x23, x3
     144:	str	x25, [sp, #64]
     148:	and	w25, w0, #0xff
     14c:	mov	x0, #0x0                   	// #0
     150:	bl	0 <gomp_work_share_start>
     154:	tst	w0, #0xff
     158:	b.ne	17c <GOMP_loop_ull_dynamic_start+0x64>  // b.any
     15c:	mov	x1, x21
     160:	mov	x0, x20
     164:	ldp	x19, x20, [sp, #16]
     168:	ldp	x21, x22, [sp, #32]
     16c:	ldp	x23, x24, [sp, #48]
     170:	ldr	x25, [sp, #64]
     174:	ldp	x29, x30, [sp], #80
     178:	b	0 <gomp_iter_ull_dynamic_next>
     17c:	adrp	x3, 0 <gomp_tls_data>
     180:	ldr	x3, [x3]
     184:	mrs	x6, tpidr_el0
     188:	mov	w4, #0x2                   	// #2
     18c:	cmp	w25, #0x0
     190:	add	x2, x6, x3
     194:	mul	x0, x23, x22
     198:	ccmp	x19, x24, #0x0, ne  // ne = any
     19c:	ldr	x1, [x2, #24]
     1a0:	ldr	x2, [x2, #16]
     1a4:	str	w4, [x1]
     1a8:	str	x22, [x1, #8]
     1ac:	b.hi	254 <GOMP_loop_ull_dynamic_start+0x13c>  // b.pmore
     1b0:	cmp	x19, x24
     1b4:	str	wzr, [x1, #4]
     1b8:	str	x0, [x1, #8]
     1bc:	eor	w4, w25, #0x1
     1c0:	cset	w5, cc  // cc = lo, ul, last
     1c4:	tst	w5, w4
     1c8:	b.ne	274 <GOMP_loop_ull_dynamic_start+0x15c>  // b.any
     1cc:	stp	x24, x23, [x1, #16]
     1d0:	str	x19, [x1, #72]
     1d4:	mov	x19, x24
     1d8:	cbz	x2, 2b8 <GOMP_loop_ull_dynamic_start+0x1a0>
     1dc:	ldr	w5, [x2]
     1e0:	mov	x4, x5
     1e4:	cbz	w25, 288 <GOMP_loop_ull_dynamic_start+0x170>
     1e8:	orr	x4, x0, x4
     1ec:	mov	x2, #0x7fffffff            	// #2147483647
     1f0:	cmp	x4, x2
     1f4:	b.hi	20c <GOMP_loop_ull_dynamic_start+0xf4>  // b.pmore
     1f8:	madd	x0, x5, x0, x0
     1fc:	mvn	x0, x0
     200:	cmp	x0, x19
     204:	cset	w0, hi  // hi = pmore
     208:	str	w0, [x1, #4]
     20c:	add	x3, x6, x3
     210:	ldr	x0, [x3, #32]
     214:	cbz	x0, 15c <GOMP_loop_ull_dynamic_start+0x44>
     218:	add	x0, x0, #0x50
     21c:	ldxr	x2, [x0]
     220:	stlxr	w3, x1, [x0]
     224:	cbnz	w3, 21c <GOMP_loop_ull_dynamic_start+0x104>
     228:	cmp	x2, #0x1
     22c:	b.eq	15c <GOMP_loop_ull_dynamic_start+0x44>  // b.none
     230:	bl	0 <gomp_ptrlock_set_slow>
     234:	mov	x1, x21
     238:	mov	x0, x20
     23c:	ldp	x19, x20, [sp, #16]
     240:	ldp	x21, x22, [sp, #32]
     244:	ldp	x23, x24, [sp, #48]
     248:	ldr	x25, [sp, #64]
     24c:	ldp	x29, x30, [sp], #80
     250:	b	0 <gomp_iter_ull_dynamic_next>
     254:	str	wzr, [x1, #4]
     258:	stp	x0, x19, [x1, #8]
     25c:	str	x23, [x1, #24]
     260:	str	x19, [x1, #72]
     264:	cbnz	x2, 1dc <GOMP_loop_ull_dynamic_start+0xc4>
     268:	mov	x4, #0x1                   	// #1
     26c:	mov	x5, x4
     270:	b	1e8 <GOMP_loop_ull_dynamic_start+0xd0>
     274:	stp	x19, x23, [x1, #16]
     278:	mov	x4, #0x1                   	// #1
     27c:	mov	x5, x4
     280:	str	x19, [x1, #72]
     284:	cbnz	x2, 1dc <GOMP_loop_ull_dynamic_start+0xc4>
     288:	neg	x2, x0
     28c:	mov	x0, #0x7fffffff            	// #2147483647
     290:	orr	x4, x4, x2
     294:	cmp	x4, x0
     298:	b.hi	2c4 <GOMP_loop_ull_dynamic_start+0x1ac>  // b.pmore
     29c:	madd	x0, x5, x2, x2
     2a0:	add	x0, x0, #0x1
     2a4:	cmp	x0, x19
     2a8:	cset	w0, cc  // cc = lo, ul, last
     2ac:	orr	w0, w0, #0x2
     2b0:	str	w0, [x1, #4]
     2b4:	b	20c <GOMP_loop_ull_dynamic_start+0xf4>
     2b8:	mov	x4, #0x1                   	// #1
     2bc:	mov	x5, x4
     2c0:	b	1e4 <GOMP_loop_ull_dynamic_start+0xcc>
     2c4:	ldr	w0, [x1, #4]
     2c8:	b	2ac <GOMP_loop_ull_dynamic_start+0x194>
     2cc:	nop

00000000000002d0 <GOMP_loop_ull_guided_start>:
     2d0:	stp	x29, x30, [sp, #-80]!
     2d4:	mov	x29, sp
     2d8:	stp	x19, x20, [sp, #16]
     2dc:	mov	x19, x1
     2e0:	mov	x20, x5
     2e4:	stp	x21, x22, [sp, #32]
     2e8:	mov	x22, x2
     2ec:	mov	x21, x6
     2f0:	stp	x23, x24, [sp, #48]
     2f4:	mov	x23, x3
     2f8:	mov	x24, x4
     2fc:	str	x25, [sp, #64]
     300:	and	w25, w0, #0xff
     304:	mov	x0, #0x0                   	// #0
     308:	bl	0 <gomp_work_share_start>
     30c:	tst	w0, #0xff
     310:	b.eq	374 <GOMP_loop_ull_guided_start+0xa4>  // b.none
     314:	adrp	x1, 0 <gomp_tls_data>
     318:	ldr	x1, [x1]
     31c:	mrs	x0, tpidr_el0
     320:	mov	w2, #0x3                   	// #3
     324:	cmp	w25, #0x0
     328:	add	x3, x0, x1
     32c:	ccmp	x19, x22, #0x0, ne  // ne = any
     330:	ldr	x7, [x3, #24]
     334:	str	w2, [x7]
     338:	str	x24, [x7, #8]
     33c:	b.ls	394 <GOMP_loop_ull_guided_start+0xc4>  // b.plast
     340:	str	wzr, [x7, #4]
     344:	stp	x19, x23, [x7, #16]
     348:	str	x19, [x7, #72]
     34c:	add	x0, x0, x1
     350:	ldr	x0, [x0, #32]
     354:	cbz	x0, 374 <GOMP_loop_ull_guided_start+0xa4>
     358:	add	x0, x0, #0x50
     35c:	ldxr	x1, [x0]
     360:	stlxr	w2, x7, [x0]
     364:	cbnz	w2, 35c <GOMP_loop_ull_guided_start+0x8c>
     368:	cmp	x1, #0x1
     36c:	b.eq	374 <GOMP_loop_ull_guided_start+0xa4>  // b.none
     370:	bl	0 <gomp_ptrlock_set_slow>
     374:	mov	x1, x21
     378:	mov	x0, x20
     37c:	ldp	x19, x20, [sp, #16]
     380:	ldp	x21, x22, [sp, #32]
     384:	ldp	x23, x24, [sp, #48]
     388:	ldr	x25, [sp, #64]
     38c:	ldp	x29, x30, [sp], #80
     390:	b	0 <gomp_iter_ull_guided_next>
     394:	cmp	x19, x22
     398:	eor	w2, w25, #0x1
     39c:	cset	w3, cc  // cc = lo, ul, last
     3a0:	tst	w3, w2
     3a4:	b.ne	3c4 <GOMP_loop_ull_guided_start+0xf4>  // b.any
     3a8:	str	wzr, [x7, #4]
     3ac:	stp	x22, x23, [x7, #16]
     3b0:	str	x19, [x7, #72]
     3b4:	cbnz	w25, 34c <GOMP_loop_ull_guided_start+0x7c>
     3b8:	mov	w2, #0x2                   	// #2
     3bc:	str	w2, [x7, #4]
     3c0:	b	34c <GOMP_loop_ull_guided_start+0x7c>
     3c4:	stp	x19, x23, [x7, #16]
     3c8:	str	x19, [x7, #72]
     3cc:	b	3b8 <GOMP_loop_ull_guided_start+0xe8>

00000000000003d0 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start>:
     3d0:	stp	x29, x30, [sp, #-112]!
     3d4:	adrp	x7, 0 <gomp_global_icv>
     3d8:	add	x7, x7, #0x0
     3dc:	mov	x29, sp
     3e0:	stp	x23, x24, [sp, #48]
     3e4:	adrp	x24, 0 <gomp_tls_data>
     3e8:	ldr	x24, [x24]
     3ec:	stp	x25, x26, [sp, #64]
     3f0:	mrs	x26, tpidr_el0
     3f4:	add	x25, x26, x24
     3f8:	str	x4, [sp, #104]
     3fc:	stp	x27, x28, [sp, #80]
     400:	and	w27, w0, #0xff
     404:	ldr	x8, [x25, #80]
     408:	stp	x19, x20, [sp, #16]
     40c:	mov	x20, x5
     410:	cmp	x8, #0x0
     414:	add	x4, x8, #0x90
     418:	csel	x4, x7, x4, eq  // eq = none
     41c:	ldr	w0, [x4, #8]
     420:	and	w19, w0, #0x7fffffff
     424:	cmp	w19, #0x3
     428:	b.eq	4e4 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x114>  // b.none
     42c:	tst	w0, #0x7ffffffc
     430:	b.ne	4b4 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0xe4>  // b.any
     434:	cmp	w19, #0x1
     438:	b.ne	464 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x94>  // b.any
     43c:	ldrsw	x4, [x4, #12]
     440:	mov	x6, x5
     444:	mov	w0, w27
     448:	ldp	x19, x20, [sp, #16]
     44c:	ldp	x23, x24, [sp, #48]
     450:	ldp	x25, x26, [sp, #64]
     454:	ldp	x27, x28, [sp, #80]
     458:	ldr	x5, [sp, #104]
     45c:	ldp	x29, x30, [sp], #112
     460:	b	0 <GOMP_loop_ull_static_start>
     464:	stp	x21, x22, [sp, #32]
     468:	cmp	w19, #0x2
     46c:	b.ne	630 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x260>  // b.any
     470:	ldr	w28, [x4, #12]
     474:	mov	x23, x1
     478:	mov	x22, x2
     47c:	mov	x21, x3
     480:	mov	x0, #0x0                   	// #0
     484:	bl	0 <gomp_work_share_start>
     488:	tst	w0, #0xff
     48c:	b.ne	50c <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x13c>  // b.any
     490:	mov	x1, x20
     494:	ldp	x19, x20, [sp, #16]
     498:	ldp	x21, x22, [sp, #32]
     49c:	ldp	x23, x24, [sp, #48]
     4a0:	ldp	x25, x26, [sp, #64]
     4a4:	ldp	x27, x28, [sp, #80]
     4a8:	ldr	x0, [sp, #104]
     4ac:	ldp	x29, x30, [sp], #112
     4b0:	b	0 <gomp_iter_ull_dynamic_next>
     4b4:	cmp	w19, #0x4
     4b8:	b.ne	62c <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x25c>  // b.any
     4bc:	mov	x6, x5
     4c0:	mov	w0, w27
     4c4:	ldp	x19, x20, [sp, #16]
     4c8:	mov	x4, #0x0                   	// #0
     4cc:	ldp	x23, x24, [sp, #48]
     4d0:	ldp	x25, x26, [sp, #64]
     4d4:	ldp	x27, x28, [sp, #80]
     4d8:	ldr	x5, [sp, #104]
     4dc:	ldp	x29, x30, [sp], #112
     4e0:	b	0 <GOMP_loop_ull_static_start>
     4e4:	ldrsw	x4, [x4, #12]
     4e8:	mov	x6, x5
     4ec:	mov	w0, w27
     4f0:	ldp	x19, x20, [sp, #16]
     4f4:	ldp	x23, x24, [sp, #48]
     4f8:	ldp	x25, x26, [sp, #64]
     4fc:	ldp	x27, x28, [sp, #80]
     500:	ldr	x5, [sp, #104]
     504:	ldp	x29, x30, [sp], #112
     508:	b	2d0 <GOMP_loop_ull_guided_start>
     50c:	ldp	x2, x1, [x25, #16]
     510:	sxtw	x28, w28
     514:	cmp	w27, #0x0
     518:	ccmp	x23, x22, #0x0, ne  // ne = any
     51c:	mul	x0, x28, x21
     520:	str	w19, [x1]
     524:	str	x28, [x1, #8]
     528:	b.hi	5b4 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x1e4>  // b.pmore
     52c:	cmp	x23, x22
     530:	str	wzr, [x1, #4]
     534:	str	x0, [x1, #8]
     538:	eor	w3, w27, #0x1
     53c:	cset	w4, cc  // cc = lo, ul, last
     540:	tst	w4, w3
     544:	b.ne	5d4 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x204>  // b.any
     548:	stp	x22, x21, [x1, #16]
     54c:	str	x23, [x1, #72]
     550:	mov	x23, x22
     554:	cbz	x2, 618 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x248>
     558:	ldr	w4, [x2]
     55c:	mov	x3, x4
     560:	cbz	w27, 5e8 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x218>
     564:	orr	x3, x0, x3
     568:	mov	x2, #0x7fffffff            	// #2147483647
     56c:	cmp	x3, x2
     570:	b.hi	588 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x1b8>  // b.pmore
     574:	madd	x0, x4, x0, x0
     578:	mvn	x0, x0
     57c:	cmp	x0, x23
     580:	cset	w0, hi  // hi = pmore
     584:	str	w0, [x1, #4]
     588:	add	x24, x26, x24
     58c:	ldr	x0, [x24, #32]
     590:	cbz	x0, 490 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0xc0>
     594:	add	x0, x0, #0x50
     598:	ldxr	x2, [x0]
     59c:	stlxr	w3, x1, [x0]
     5a0:	cbnz	w3, 598 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x1c8>
     5a4:	cmp	x2, #0x1
     5a8:	b.eq	490 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0xc0>  // b.none
     5ac:	bl	0 <gomp_ptrlock_set_slow>
     5b0:	b	490 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0xc0>
     5b4:	str	wzr, [x1, #4]
     5b8:	mov	x3, #0x1                   	// #1
     5bc:	stp	x0, x23, [x1, #8]
     5c0:	mov	x4, x3
     5c4:	str	x21, [x1, #24]
     5c8:	str	x23, [x1, #72]
     5cc:	cbnz	x2, 558 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x188>
     5d0:	b	564 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x194>
     5d4:	stp	x23, x21, [x1, #16]
     5d8:	str	x23, [x1, #72]
     5dc:	cbnz	x2, 558 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x188>
     5e0:	mov	x3, #0x1                   	// #1
     5e4:	mov	x4, x3
     5e8:	neg	x2, x0
     5ec:	mov	x0, #0x7fffffff            	// #2147483647
     5f0:	orr	x3, x3, x2
     5f4:	cmp	x3, x0
     5f8:	b.hi	624 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x254>  // b.pmore
     5fc:	madd	x0, x4, x2, x2
     600:	add	x0, x0, #0x1
     604:	cmp	x0, x23
     608:	cset	w0, cc  // cc = lo, ul, last
     60c:	orr	w0, w0, #0x2
     610:	str	w0, [x1, #4]
     614:	b	588 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x1b8>
     618:	mov	x3, #0x1                   	// #1
     61c:	mov	x4, x3
     620:	b	560 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x190>
     624:	ldr	w0, [x1, #4]
     628:	b	60c <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x23c>
     62c:	stp	x21, x22, [sp, #32]
     630:	bl	0 <abort>
     634:	nop

0000000000000638 <GOMP_loop_ull_start>:
     638:	stp	x29, x30, [sp, #-128]!
     63c:	mov	x29, sp
     640:	stp	x19, x20, [sp, #16]
     644:	mov	x19, x4
     648:	adrp	x20, 0 <gomp_tls_data>
     64c:	ldr	x20, [x20]
     650:	stp	x23, x24, [sp, #48]
     654:	mrs	x24, tpidr_el0
     658:	add	x10, x24, x20
     65c:	stp	x25, x26, [sp, #64]
     660:	mov	x23, x7
     664:	ldp	x25, x26, [sp, #128]
     668:	stp	x21, x22, [sp, #32]
     66c:	mov	x21, x3
     670:	stp	x27, x28, [sp, #80]
     674:	mov	x22, x6
     678:	mov	x28, x1
     67c:	str	xzr, [x10, #72]
     680:	and	w27, w0, #0xff
     684:	stp	x2, x10, [sp, #104]
     688:	str	x5, [sp, #120]
     68c:	cbz	x25, 70c <GOMP_loop_ull_start+0xd4>
     690:	bl	0 <gomp_workshare_taskgroup_start>
     694:	mov	x0, #0x0                   	// #0
     698:	bl	0 <gomp_work_share_start>
     69c:	tst	w0, #0xff
     6a0:	ldr	x10, [sp, #112]
     6a4:	b.ne	71c <GOMP_loop_ull_start+0xe4>  // b.any
     6a8:	ldr	x1, [x10, #24]
     6ac:	mov	x0, x25
     6b0:	ldr	x1, [x1, #88]
     6b4:	bl	0 <gomp_workshare_task_reduction_register>
     6b8:	add	x20, x24, x20
     6bc:	ldr	x19, [x20, #24]
     6c0:	cbz	x26, 6d0 <GOMP_loop_ull_start+0x98>
     6c4:	ldr	x0, [x19, #32]
     6c8:	str	x0, [x26]
     6cc:	ldr	x19, [x20, #24]
     6d0:	ldr	w0, [x19]
     6d4:	cmp	w0, #0x2
     6d8:	b.eq	868 <GOMP_loop_ull_start+0x230>  // b.none
     6dc:	b.ls	930 <GOMP_loop_ull_start+0x2f8>  // b.plast
     6e0:	cmp	w0, #0x3
     6e4:	b.ne	8f8 <GOMP_loop_ull_start+0x2c0>  // b.any
     6e8:	mov	x1, x23
     6ec:	mov	x0, x22
     6f0:	ldp	x19, x20, [sp, #16]
     6f4:	ldp	x21, x22, [sp, #32]
     6f8:	ldp	x23, x24, [sp, #48]
     6fc:	ldp	x25, x26, [sp, #64]
     700:	ldp	x27, x28, [sp, #80]
     704:	ldp	x29, x30, [sp], #128
     708:	b	0 <gomp_iter_ull_guided_next>
     70c:	mov	x0, #0x0                   	// #0
     710:	bl	0 <gomp_work_share_start>
     714:	tst	w0, #0xff
     718:	b.eq	6b8 <GOMP_loop_ull_start+0x80>  // b.none
     71c:	tst	x19, #0x7ffffffc
     720:	and	x4, x19, #0x7fffffff
     724:	b.ne	93c <GOMP_loop_ull_start+0x304>  // b.any
     728:	cbnz	x4, 978 <GOMP_loop_ull_start+0x340>
     72c:	add	x2, x24, x20
     730:	adrp	x1, 0 <gomp_global_icv>
     734:	add	x1, x1, #0x0
     738:	ldr	x0, [x2, #80]
     73c:	cmp	x0, #0x0
     740:	add	x0, x0, #0x90
     744:	csel	x1, x1, x0, eq  // eq = none
     748:	ldr	w0, [x1, #8]
     74c:	tst	w0, #0x7ffffffc
     750:	and	w0, w0, #0x7fffffff
     754:	b.ne	88c <GOMP_loop_ull_start+0x254>  // b.any
     758:	cbz	w0, 938 <GOMP_loop_ull_start+0x300>
     75c:	ldrsw	x1, [x1, #12]
     760:	mov	w4, w0
     764:	str	x1, [sp, #120]
     768:	add	x1, x24, x20
     76c:	cmp	w27, #0x0
     770:	ldr	x2, [sp, #104]
     774:	ldr	x19, [x1, #24]
     778:	ccmp	x28, x2, #0x0, ne  // ne = any
     77c:	str	w0, [x19]
     780:	ldr	x0, [sp, #120]
     784:	str	x0, [x19, #8]
     788:	b.ls	9a0 <GOMP_loop_ull_start+0x368>  // b.plast
     78c:	str	wzr, [x19, #4]
     790:	cmp	x4, #0x2
     794:	stp	x28, x21, [x19, #16]
     798:	str	x28, [x19, #72]
     79c:	b.ne	7e4 <GOMP_loop_ull_start+0x1ac>  // b.any
     7a0:	ldr	x0, [x1, #16]
     7a4:	ldr	x1, [sp, #120]
     7a8:	mul	x21, x21, x1
     7ac:	str	x21, [x19, #8]
     7b0:	cbz	x0, 994 <GOMP_loop_ull_start+0x35c>
     7b4:	ldr	w1, [x0]
     7b8:	mov	x0, x1
     7bc:	cbz	w27, 9e8 <GOMP_loop_ull_start+0x3b0>
     7c0:	orr	x0, x21, x0
     7c4:	mov	x2, #0x7fffffff            	// #2147483647
     7c8:	cmp	x0, x2
     7cc:	b.hi	7e4 <GOMP_loop_ull_start+0x1ac>  // b.pmore
     7d0:	madd	x21, x1, x21, x21
     7d4:	mvn	x21, x21
     7d8:	cmp	x21, x28
     7dc:	cset	w0, hi  // hi = pmore
     7e0:	str	w0, [x19, #4]
     7e4:	cbz	x25, 80c <GOMP_loop_ull_start+0x1d4>
     7e8:	mov	x0, x25
     7ec:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
     7f0:	add	x0, x24, x20
     7f4:	mov	w1, #0x1                   	// #1
     7f8:	ldr	x2, [x0, #80]
     7fc:	ldr	x19, [x0, #24]
     800:	ldr	x0, [x2, #40]
     804:	strb	w1, [x0, #50]
     808:	str	x25, [x19, #88]
     80c:	cbz	x26, 830 <GOMP_loop_ull_start+0x1f8>
     810:	ldr	x0, [x26]
     814:	cmp	x0, #0x20
     818:	b.ls	958 <GOMP_loop_ull_start+0x320>  // b.plast
     81c:	bl	0 <gomp_malloc_cleared>
     820:	str	x0, [x19, #32]
     824:	add	x1, x24, x20
     828:	str	x0, [x26]
     82c:	ldr	x19, [x1, #24]
     830:	add	x20, x24, x20
     834:	ldr	x0, [x20, #32]
     838:	cbz	x0, 6d0 <GOMP_loop_ull_start+0x98>
     83c:	add	x0, x0, #0x50
     840:	ldxr	x1, [x0]
     844:	stlxr	w2, x19, [x0]
     848:	cbnz	w2, 840 <GOMP_loop_ull_start+0x208>
     84c:	cmp	x1, #0x1
     850:	b.eq	6cc <GOMP_loop_ull_start+0x94>  // b.none
     854:	bl	0 <gomp_ptrlock_set_slow>
     858:	ldr	x19, [x20, #24]
     85c:	ldr	w0, [x19]
     860:	cmp	w0, #0x2
     864:	b.ne	6dc <GOMP_loop_ull_start+0xa4>  // b.any
     868:	mov	x1, x23
     86c:	mov	x0, x22
     870:	ldp	x19, x20, [sp, #16]
     874:	ldp	x21, x22, [sp, #32]
     878:	ldp	x23, x24, [sp, #48]
     87c:	ldp	x25, x26, [sp, #64]
     880:	ldp	x27, x28, [sp, #80]
     884:	ldp	x29, x30, [sp], #128
     888:	b	0 <gomp_iter_ull_dynamic_next>
     88c:	cmp	w0, #0x4
     890:	b.ne	938 <GOMP_loop_ull_start+0x300>  // b.any
     894:	ldr	x19, [x2, #24]
     898:	mov	w0, #0x1                   	// #1
     89c:	ldr	x1, [sp, #104]
     8a0:	cmp	w27, #0x0
     8a4:	str	w0, [x19]
     8a8:	str	xzr, [x19, #8]
     8ac:	ccmp	x28, x1, #0x0, ne  // ne = any
     8b0:	b.hi	948 <GOMP_loop_ull_start+0x310>  // b.pmore
     8b4:	cmp	x28, x1
     8b8:	eor	w0, w27, #0x1
     8bc:	cset	w1, cc  // cc = lo, ul, last
     8c0:	tst	w1, w0
     8c4:	b.ne	980 <GOMP_loop_ull_start+0x348>  // b.any
     8c8:	mov	x4, #0x1                   	// #1
     8cc:	str	xzr, [sp, #120]
     8d0:	ldr	x0, [sp, #104]
     8d4:	str	wzr, [x19, #4]
     8d8:	stp	x0, x21, [x19, #16]
     8dc:	cmp	x4, #0x2
     8e0:	str	x28, [x19, #72]
     8e4:	b.eq	a1c <GOMP_loop_ull_start+0x3e4>  // b.none
     8e8:	cbnz	w27, 7e4 <GOMP_loop_ull_start+0x1ac>
     8ec:	mov	w0, #0x2                   	// #2
     8f0:	str	w0, [x19, #4]
     8f4:	b	7e4 <GOMP_loop_ull_start+0x1ac>
     8f8:	cmp	w0, #0x4
     8fc:	b.ne	938 <GOMP_loop_ull_start+0x300>  // b.any
     900:	mov	x1, x23
     904:	mov	x0, x22
     908:	bl	0 <gomp_iter_ull_static_next>
     90c:	cmp	w0, #0x0
     910:	cset	w0, eq  // eq = none
     914:	ldp	x19, x20, [sp, #16]
     918:	ldp	x21, x22, [sp, #32]
     91c:	ldp	x23, x24, [sp, #48]
     920:	ldp	x25, x26, [sp, #64]
     924:	ldp	x27, x28, [sp, #80]
     928:	ldp	x29, x30, [sp], #128
     92c:	ret
     930:	cmp	w0, #0x1
     934:	b.eq	900 <GOMP_loop_ull_start+0x2c8>  // b.none
     938:	bl	0 <abort>
     93c:	cmp	x4, #0x4
     940:	b.eq	72c <GOMP_loop_ull_start+0xf4>  // b.none
     944:	bl	0 <abort>
     948:	str	wzr, [x19, #4]
     94c:	stp	x28, x21, [x19, #16]
     950:	str	x28, [x19, #72]
     954:	b	7e4 <GOMP_loop_ull_start+0x1ac>
     958:	mov	x2, x0
     95c:	mov	w1, #0x0                   	// #0
     960:	add	x0, x19, #0x60
     964:	bl	0 <memset>
     968:	add	x1, x24, x20
     96c:	str	x0, [x26]
     970:	ldr	x19, [x1, #24]
     974:	b	830 <GOMP_loop_ull_start+0x1f8>
     978:	mov	w0, w4
     97c:	b	768 <GOMP_loop_ull_start+0x130>
     980:	mov	w0, #0x2                   	// #2
     984:	str	wzr, [x19, #4]
     988:	stp	x28, x21, [x19, #16]
     98c:	str	x28, [x19, #72]
     990:	b	8f0 <GOMP_loop_ull_start+0x2b8>
     994:	mov	x0, #0x1                   	// #1
     998:	mov	x1, x0
     99c:	b	7c0 <GOMP_loop_ull_start+0x188>
     9a0:	cmp	x28, x2
     9a4:	eor	w0, w27, #0x1
     9a8:	cset	w2, cc  // cc = lo, ul, last
     9ac:	tst	w2, w0
     9b0:	b.eq	8d0 <GOMP_loop_ull_start+0x298>  // b.none
     9b4:	str	wzr, [x19, #4]
     9b8:	cmp	x4, #0x2
     9bc:	stp	x28, x21, [x19, #16]
     9c0:	str	x28, [x19, #72]
     9c4:	b.ne	8ec <GOMP_loop_ull_start+0x2b4>  // b.any
     9c8:	ldr	x0, [x1, #16]
     9cc:	ldr	x1, [sp, #120]
     9d0:	mul	x21, x21, x1
     9d4:	str	x21, [x19, #8]
     9d8:	cbnz	x0, 7b4 <GOMP_loop_ull_start+0x17c>
     9dc:	mov	x0, #0x1                   	// #1
     9e0:	mov	x1, x0
     9e4:	nop
     9e8:	neg	x3, x21
     9ec:	mov	x2, #0x7fffffff            	// #2147483647
     9f0:	orr	x0, x3, x0
     9f4:	cmp	x0, x2
     9f8:	b.hi	a44 <GOMP_loop_ull_start+0x40c>  // b.pmore
     9fc:	madd	x21, x1, x3, x3
     a00:	add	x0, x21, #0x1
     a04:	cmp	x28, x0
     a08:	cset	w0, hi  // hi = pmore
     a0c:	str	w0, [x19, #4]
     a10:	orr	w0, w0, #0x2
     a14:	str	w0, [x19, #4]
     a18:	b	7e4 <GOMP_loop_ull_start+0x1ac>
     a1c:	add	x0, x24, x20
     a20:	ldr	x1, [sp, #120]
     a24:	ldr	x0, [x0, #16]
     a28:	mul	x21, x21, x1
     a2c:	str	x21, [x19, #8]
     a30:	ldr	x28, [sp, #104]
     a34:	cbnz	x0, 7b4 <GOMP_loop_ull_start+0x17c>
     a38:	mov	x0, #0x1                   	// #1
     a3c:	mov	x1, x0
     a40:	b	7bc <GOMP_loop_ull_start+0x184>
     a44:	ldr	w0, [x19, #4]
     a48:	orr	w0, w0, #0x2
     a4c:	str	w0, [x19, #4]
     a50:	b	7e4 <GOMP_loop_ull_start+0x1ac>
     a54:	nop

0000000000000a58 <GOMP_loop_ull_ordered_static_start>:
     a58:	stp	x29, x30, [sp, #-96]!
     a5c:	mov	x29, sp
     a60:	stp	x25, x26, [sp, #64]
     a64:	mov	x25, x4
     a68:	adrp	x26, 0 <gomp_tls_data>
     a6c:	ldr	x26, [x26]
     a70:	stp	x21, x22, [sp, #32]
     a74:	mrs	x22, tpidr_el0
     a78:	mov	x21, x6
     a7c:	stp	x27, x28, [sp, #80]
     a80:	add	x28, x22, x26
     a84:	and	w27, w0, #0xff
     a88:	stp	x19, x20, [sp, #16]
     a8c:	mov	x0, #0x1                   	// #1
     a90:	mov	x19, x1
     a94:	stp	x23, x24, [sp, #48]
     a98:	mov	x20, x5
     a9c:	mov	x23, x2
     aa0:	mov	x24, x3
     aa4:	str	xzr, [x28, #72]
     aa8:	bl	0 <gomp_work_share_start>
     aac:	tst	w0, #0xff
     ab0:	b.eq	b0c <GOMP_loop_ull_ordered_static_start+0xb4>  // b.none
     ab4:	ldr	x0, [x28, #24]
     ab8:	mov	w1, #0x1                   	// #1
     abc:	cmp	w27, #0x0
     ac0:	ccmp	x19, x23, #0x0, ne  // ne = any
     ac4:	str	w1, [x0]
     ac8:	str	x25, [x0, #8]
     acc:	b.ls	b3c <GOMP_loop_ull_ordered_static_start+0xe4>  // b.plast
     ad0:	str	wzr, [x0, #4]
     ad4:	stp	x19, x24, [x0, #16]
     ad8:	str	x19, [x0, #72]
     adc:	add	x22, x22, x26
     ae0:	bl	0 <gomp_ordered_static_init>
     ae4:	ldr	x0, [x22, #32]
     ae8:	cbz	x0, b0c <GOMP_loop_ull_ordered_static_start+0xb4>
     aec:	ldr	x2, [x22, #24]
     af0:	add	x0, x0, #0x50
     af4:	ldxr	x1, [x0]
     af8:	stlxr	w3, x2, [x0]
     afc:	cbnz	w3, af4 <GOMP_loop_ull_ordered_static_start+0x9c>
     b00:	cmp	x1, #0x1
     b04:	b.eq	b0c <GOMP_loop_ull_ordered_static_start+0xb4>  // b.none
     b08:	bl	0 <gomp_ptrlock_set_slow>
     b0c:	mov	x1, x21
     b10:	mov	x0, x20
     b14:	bl	0 <gomp_iter_ull_static_next>
     b18:	cmp	w0, #0x0
     b1c:	cset	w0, eq  // eq = none
     b20:	ldp	x19, x20, [sp, #16]
     b24:	ldp	x21, x22, [sp, #32]
     b28:	ldp	x23, x24, [sp, #48]
     b2c:	ldp	x25, x26, [sp, #64]
     b30:	ldp	x27, x28, [sp, #80]
     b34:	ldp	x29, x30, [sp], #96
     b38:	ret
     b3c:	cmp	x19, x23
     b40:	eor	w1, w27, w1
     b44:	cset	w2, cc  // cc = lo, ul, last
     b48:	tst	w2, w1
     b4c:	b.ne	b6c <GOMP_loop_ull_ordered_static_start+0x114>  // b.any
     b50:	str	wzr, [x0, #4]
     b54:	stp	x23, x24, [x0, #16]
     b58:	str	x19, [x0, #72]
     b5c:	cbnz	w27, adc <GOMP_loop_ull_ordered_static_start+0x84>
     b60:	mov	w1, #0x2                   	// #2
     b64:	str	w1, [x0, #4]
     b68:	b	adc <GOMP_loop_ull_ordered_static_start+0x84>
     b6c:	stp	x19, x24, [x0, #16]
     b70:	str	x19, [x0, #72]
     b74:	b	b60 <GOMP_loop_ull_ordered_static_start+0x108>

0000000000000b78 <GOMP_loop_ull_ordered_dynamic_start>:
     b78:	stp	x29, x30, [sp, #-96]!
     b7c:	mov	x29, sp
     b80:	stp	x19, x20, [sp, #16]
     b84:	mov	x20, x1
     b88:	adrp	x19, 0 <gomp_tls_data>
     b8c:	ldr	x19, [x19]
     b90:	stp	x21, x22, [sp, #32]
     b94:	mov	x21, x2
     b98:	mov	x22, x3
     b9c:	stp	x23, x24, [sp, #48]
     ba0:	mov	x23, x4
     ba4:	mov	x24, x5
     ba8:	stp	x25, x26, [sp, #64]
     bac:	mov	x26, x6
     bb0:	and	w25, w0, #0xff
     bb4:	mov	x0, #0x1                   	// #1
     bb8:	str	x27, [sp, #80]
     bbc:	bl	0 <gomp_work_share_start>
     bc0:	mrs	x27, tpidr_el0
     bc4:	tst	w0, #0xff
     bc8:	b.ne	c48 <GOMP_loop_ull_ordered_dynamic_start+0xd0>  // b.any
     bcc:	add	x0, x27, x19
     bd0:	mov	w2, #0x1                   	// #1
     bd4:	ldr	x0, [x0, #24]
     bd8:	add	x0, x0, #0x40
     bdc:	ldaxr	w1, [x0]
     be0:	cbnz	w1, bec <GOMP_loop_ull_ordered_dynamic_start+0x74>
     be4:	stxr	w3, w2, [x0]
     be8:	cbnz	w3, bdc <GOMP_loop_ull_ordered_dynamic_start+0x64>
     bec:	cmp	w1, #0x0
     bf0:	b.ne	dd8 <GOMP_loop_ull_ordered_dynamic_start+0x260>  // b.any
     bf4:	mov	x1, x26
     bf8:	mov	x0, x24
     bfc:	bl	0 <gomp_iter_ull_dynamic_next_locked>
     c00:	mov	w20, w0
     c04:	tst	w0, #0xff
     c08:	b.ne	d30 <GOMP_loop_ull_ordered_dynamic_start+0x1b8>  // b.any
     c0c:	add	x19, x27, x19
     c10:	ldr	x1, [x19, #24]
     c14:	add	x1, x1, #0x40
     c18:	ldxr	w0, [x1]
     c1c:	stlxr	w2, wzr, [x1]
     c20:	cbnz	w2, c18 <GOMP_loop_ull_ordered_dynamic_start+0xa0>
     c24:	tbnz	w0, #31, d58 <GOMP_loop_ull_ordered_dynamic_start+0x1e0>
     c28:	mov	w0, w20
     c2c:	ldp	x19, x20, [sp, #16]
     c30:	ldp	x21, x22, [sp, #32]
     c34:	ldp	x23, x24, [sp, #48]
     c38:	ldp	x25, x26, [sp, #64]
     c3c:	ldr	x27, [sp, #80]
     c40:	ldp	x29, x30, [sp], #96
     c44:	ret
     c48:	add	x2, x27, x19
     c4c:	mov	w3, #0x2                   	// #2
     c50:	cmp	w25, #0x0
     c54:	mul	x1, x22, x23
     c58:	ccmp	x20, x21, #0x0, ne  // ne = any
     c5c:	ldr	x0, [x2, #24]
     c60:	ldr	x2, [x2, #16]
     c64:	str	w3, [x0]
     c68:	str	x23, [x0, #8]
     c6c:	b.hi	d38 <GOMP_loop_ull_ordered_dynamic_start+0x1c0>  // b.pmore
     c70:	cmp	x20, x21
     c74:	str	wzr, [x0, #4]
     c78:	str	x1, [x0, #8]
     c7c:	eor	w3, w25, #0x1
     c80:	cset	w4, cc  // cc = lo, ul, last
     c84:	tst	w4, w3
     c88:	b.ne	d80 <GOMP_loop_ull_ordered_dynamic_start+0x208>  // b.any
     c8c:	stp	x21, x22, [x0, #16]
     c90:	str	x20, [x0, #72]
     c94:	mov	x20, x21
     c98:	cbz	x2, dc4 <GOMP_loop_ull_ordered_dynamic_start+0x24c>
     c9c:	ldr	w4, [x2]
     ca0:	mov	x3, x4
     ca4:	cbz	w25, d94 <GOMP_loop_ull_ordered_dynamic_start+0x21c>
     ca8:	orr	x3, x1, x3
     cac:	mov	x2, #0x7fffffff            	// #2147483647
     cb0:	cmp	x3, x2
     cb4:	b.hi	ccc <GOMP_loop_ull_ordered_dynamic_start+0x154>  // b.pmore
     cb8:	madd	x1, x4, x1, x1
     cbc:	mvn	x1, x1
     cc0:	cmp	x1, x20
     cc4:	cset	w1, hi  // hi = pmore
     cc8:	str	w1, [x0, #4]
     ccc:	add	x0, x0, #0x40
     cd0:	mov	w2, #0x1                   	// #1
     cd4:	ldaxr	w1, [x0]
     cd8:	cbnz	w1, ce4 <GOMP_loop_ull_ordered_dynamic_start+0x16c>
     cdc:	stxr	w3, w2, [x0]
     ce0:	cbnz	w3, cd4 <GOMP_loop_ull_ordered_dynamic_start+0x15c>
     ce4:	cmp	w1, #0x0
     ce8:	b.ne	de0 <GOMP_loop_ull_ordered_dynamic_start+0x268>  // b.any
     cec:	add	x1, x27, x19
     cf0:	ldr	x0, [x1, #32]
     cf4:	cbz	x0, bf4 <GOMP_loop_ull_ordered_dynamic_start+0x7c>
     cf8:	ldr	x2, [x1, #24]
     cfc:	add	x0, x0, #0x50
     d00:	ldxr	x1, [x0]
     d04:	stlxr	w3, x2, [x0]
     d08:	cbnz	w3, d00 <GOMP_loop_ull_ordered_dynamic_start+0x188>
     d0c:	cmp	x1, #0x1
     d10:	b.eq	bf4 <GOMP_loop_ull_ordered_dynamic_start+0x7c>  // b.none
     d14:	bl	0 <gomp_ptrlock_set_slow>
     d18:	mov	x1, x26
     d1c:	mov	x0, x24
     d20:	bl	0 <gomp_iter_ull_dynamic_next_locked>
     d24:	mov	w20, w0
     d28:	tst	w0, #0xff
     d2c:	b.eq	c0c <GOMP_loop_ull_ordered_dynamic_start+0x94>  // b.none
     d30:	bl	0 <gomp_ordered_first>
     d34:	b	c0c <GOMP_loop_ull_ordered_dynamic_start+0x94>
     d38:	str	wzr, [x0, #4]
     d3c:	stp	x1, x20, [x0, #8]
     d40:	str	x22, [x0, #24]
     d44:	str	x20, [x0, #72]
     d48:	cbnz	x2, c9c <GOMP_loop_ull_ordered_dynamic_start+0x124>
     d4c:	mov	x3, #0x1                   	// #1
     d50:	mov	x4, x3
     d54:	b	ca8 <GOMP_loop_ull_ordered_dynamic_start+0x130>
     d58:	mov	x0, x1
     d5c:	bl	0 <gomp_mutex_unlock_slow>
     d60:	mov	w0, w20
     d64:	ldp	x19, x20, [sp, #16]
     d68:	ldp	x21, x22, [sp, #32]
     d6c:	ldp	x23, x24, [sp, #48]
     d70:	ldp	x25, x26, [sp, #64]
     d74:	ldr	x27, [sp, #80]
     d78:	ldp	x29, x30, [sp], #96
     d7c:	ret
     d80:	stp	x20, x22, [x0, #16]
     d84:	mov	x3, #0x1                   	// #1
     d88:	mov	x4, x3
     d8c:	str	x20, [x0, #72]
     d90:	cbnz	x2, c9c <GOMP_loop_ull_ordered_dynamic_start+0x124>
     d94:	neg	x2, x1
     d98:	mov	x1, #0x7fffffff            	// #2147483647
     d9c:	orr	x3, x2, x3
     da0:	cmp	x3, x1
     da4:	b.hi	dd0 <GOMP_loop_ull_ordered_dynamic_start+0x258>  // b.pmore
     da8:	madd	x1, x4, x2, x2
     dac:	add	x1, x1, #0x1
     db0:	cmp	x1, x20
     db4:	cset	w1, cc  // cc = lo, ul, last
     db8:	orr	w1, w1, #0x2
     dbc:	str	w1, [x0, #4]
     dc0:	b	ccc <GOMP_loop_ull_ordered_dynamic_start+0x154>
     dc4:	mov	x3, #0x1                   	// #1
     dc8:	mov	x4, x3
     dcc:	b	ca4 <GOMP_loop_ull_ordered_dynamic_start+0x12c>
     dd0:	ldr	w1, [x0, #4]
     dd4:	b	db8 <GOMP_loop_ull_ordered_dynamic_start+0x240>
     dd8:	bl	0 <gomp_mutex_lock_slow>
     ddc:	b	bf4 <GOMP_loop_ull_ordered_dynamic_start+0x7c>
     de0:	bl	0 <gomp_mutex_lock_slow>
     de4:	b	cec <GOMP_loop_ull_ordered_dynamic_start+0x174>

0000000000000de8 <GOMP_loop_ull_ordered_guided_start>:
     de8:	stp	x29, x30, [sp, #-96]!
     dec:	mov	x29, sp
     df0:	stp	x19, x20, [sp, #16]
     df4:	mov	x20, x1
     df8:	mrs	x19, tpidr_el0
     dfc:	stp	x21, x22, [sp, #32]
     e00:	mov	x22, x5
     e04:	mov	x21, x6
     e08:	stp	x23, x24, [sp, #48]
     e0c:	mov	x23, x2
     e10:	mov	x24, x3
     e14:	stp	x25, x26, [sp, #64]
     e18:	mov	x25, x4
     e1c:	and	w26, w0, #0xff
     e20:	mov	x0, #0x1                   	// #1
     e24:	str	x27, [sp, #80]
     e28:	bl	0 <gomp_work_share_start>
     e2c:	adrp	x27, 0 <gomp_tls_data>
     e30:	ldr	x27, [x27]
     e34:	tst	w0, #0xff
     e38:	b.eq	ed4 <GOMP_loop_ull_ordered_guided_start+0xec>  // b.none
     e3c:	add	x0, x19, x27
     e40:	mov	w1, #0x3                   	// #3
     e44:	cmp	w26, #0x0
     e48:	ccmp	x20, x23, #0x0, ne  // ne = any
     e4c:	ldr	x0, [x0, #24]
     e50:	str	w1, [x0]
     e54:	str	x25, [x0, #8]
     e58:	b.ls	f50 <GOMP_loop_ull_ordered_guided_start+0x168>  // b.plast
     e5c:	str	wzr, [x0, #4]
     e60:	stp	x20, x24, [x0, #16]
     e64:	str	x20, [x0, #72]
     e68:	add	x0, x0, #0x40
     e6c:	mov	w2, #0x1                   	// #1
     e70:	ldaxr	w1, [x0]
     e74:	cbnz	w1, e80 <GOMP_loop_ull_ordered_guided_start+0x98>
     e78:	stxr	w3, w2, [x0]
     e7c:	cbnz	w3, e70 <GOMP_loop_ull_ordered_guided_start+0x88>
     e80:	cmp	w1, #0x0
     e84:	b.ne	fbc <GOMP_loop_ull_ordered_guided_start+0x1d4>  // b.any
     e88:	add	x1, x19, x27
     e8c:	ldr	x0, [x1, #32]
     e90:	cbz	x0, efc <GOMP_loop_ull_ordered_guided_start+0x114>
     e94:	ldr	x2, [x1, #24]
     e98:	add	x0, x0, #0x50
     e9c:	ldxr	x1, [x0]
     ea0:	stlxr	w3, x2, [x0]
     ea4:	cbnz	w3, e9c <GOMP_loop_ull_ordered_guided_start+0xb4>
     ea8:	cmp	x1, #0x1
     eac:	b.eq	efc <GOMP_loop_ull_ordered_guided_start+0x114>  // b.none
     eb0:	bl	0 <gomp_ptrlock_set_slow>
     eb4:	mov	x1, x21
     eb8:	mov	x0, x22
     ebc:	bl	0 <gomp_iter_ull_guided_next_locked>
     ec0:	mov	w20, w0
     ec4:	tst	w0, #0xff
     ec8:	b.eq	f14 <GOMP_loop_ull_ordered_guided_start+0x12c>  // b.none
     ecc:	bl	0 <gomp_ordered_first>
     ed0:	b	f14 <GOMP_loop_ull_ordered_guided_start+0x12c>
     ed4:	add	x0, x19, x27
     ed8:	mov	w2, #0x1                   	// #1
     edc:	ldr	x0, [x0, #24]
     ee0:	add	x0, x0, #0x40
     ee4:	ldaxr	w1, [x0]
     ee8:	cbnz	w1, ef4 <GOMP_loop_ull_ordered_guided_start+0x10c>
     eec:	stxr	w3, w2, [x0]
     ef0:	cbnz	w3, ee4 <GOMP_loop_ull_ordered_guided_start+0xfc>
     ef4:	cmp	w1, #0x0
     ef8:	b.ne	fb4 <GOMP_loop_ull_ordered_guided_start+0x1cc>  // b.any
     efc:	mov	x1, x21
     f00:	mov	x0, x22
     f04:	bl	0 <gomp_iter_ull_guided_next_locked>
     f08:	mov	w20, w0
     f0c:	tst	w0, #0xff
     f10:	b.ne	ecc <GOMP_loop_ull_ordered_guided_start+0xe4>  // b.any
     f14:	add	x19, x19, x27
     f18:	ldr	x1, [x19, #24]
     f1c:	add	x1, x1, #0x40
     f20:	ldxr	w0, [x1]
     f24:	stlxr	w2, wzr, [x1]
     f28:	cbnz	w2, f20 <GOMP_loop_ull_ordered_guided_start+0x138>
     f2c:	tbnz	w0, #31, f8c <GOMP_loop_ull_ordered_guided_start+0x1a4>
     f30:	mov	w0, w20
     f34:	ldp	x19, x20, [sp, #16]
     f38:	ldp	x21, x22, [sp, #32]
     f3c:	ldp	x23, x24, [sp, #48]
     f40:	ldp	x25, x26, [sp, #64]
     f44:	ldr	x27, [sp, #80]
     f48:	ldp	x29, x30, [sp], #96
     f4c:	ret
     f50:	cmp	x20, x23
     f54:	eor	w1, w26, #0x1
     f58:	cset	w2, cc  // cc = lo, ul, last
     f5c:	tst	w2, w1
     f60:	b.ne	f80 <GOMP_loop_ull_ordered_guided_start+0x198>  // b.any
     f64:	str	wzr, [x0, #4]
     f68:	stp	x23, x24, [x0, #16]
     f6c:	str	x20, [x0, #72]
     f70:	cbnz	w26, e68 <GOMP_loop_ull_ordered_guided_start+0x80>
     f74:	mov	w1, #0x2                   	// #2
     f78:	str	w1, [x0, #4]
     f7c:	b	e68 <GOMP_loop_ull_ordered_guided_start+0x80>
     f80:	stp	x20, x24, [x0, #16]
     f84:	str	x20, [x0, #72]
     f88:	b	f74 <GOMP_loop_ull_ordered_guided_start+0x18c>
     f8c:	mov	x0, x1
     f90:	bl	0 <gomp_mutex_unlock_slow>
     f94:	mov	w0, w20
     f98:	ldp	x19, x20, [sp, #16]
     f9c:	ldp	x21, x22, [sp, #32]
     fa0:	ldp	x23, x24, [sp, #48]
     fa4:	ldp	x25, x26, [sp, #64]
     fa8:	ldr	x27, [sp, #80]
     fac:	ldp	x29, x30, [sp], #96
     fb0:	ret
     fb4:	bl	0 <gomp_mutex_lock_slow>
     fb8:	b	efc <GOMP_loop_ull_ordered_guided_start+0x114>
     fbc:	bl	0 <gomp_mutex_lock_slow>
     fc0:	b	e88 <GOMP_loop_ull_ordered_guided_start+0xa0>
     fc4:	nop

0000000000000fc8 <GOMP_loop_ull_ordered_runtime_start>:
     fc8:	adrp	x6, 0 <gomp_tls_data>
     fcc:	ldr	x6, [x6]
     fd0:	mrs	x8, tpidr_el0
     fd4:	adrp	x7, 0 <gomp_global_icv>
     fd8:	add	x7, x7, #0x0
     fdc:	add	x8, x8, x6
     fe0:	mov	x9, x4
     fe4:	mov	x6, x5
     fe8:	and	w0, w0, #0xff
     fec:	ldr	x8, [x8, #80]
     ff0:	cmp	x8, #0x0
     ff4:	add	x8, x8, #0x90
     ff8:	csel	x7, x7, x8, eq  // eq = none
     ffc:	ldr	w4, [x7, #8]
    1000:	and	w8, w4, #0x7fffffff
    1004:	cmp	w8, #0x3
    1008:	b.eq	1050 <GOMP_loop_ull_ordered_runtime_start+0x88>  // b.none
    100c:	tst	w4, #0x7ffffffc
    1010:	b.ne	1028 <GOMP_loop_ull_ordered_runtime_start+0x60>  // b.any
    1014:	cmp	w8, #0x1
    1018:	b.ne	103c <GOMP_loop_ull_ordered_runtime_start+0x74>  // b.any
    101c:	ldrsw	x4, [x7, #12]
    1020:	mov	x5, x9
    1024:	b	a58 <GOMP_loop_ull_ordered_static_start>
    1028:	cmp	w8, #0x4
    102c:	b.ne	105c <GOMP_loop_ull_ordered_runtime_start+0x94>  // b.any
    1030:	mov	x5, x9
    1034:	mov	x4, #0x0                   	// #0
    1038:	b	a58 <GOMP_loop_ull_ordered_static_start>
    103c:	cmp	w8, #0x2
    1040:	b.ne	105c <GOMP_loop_ull_ordered_runtime_start+0x94>  // b.any
    1044:	ldrsw	x4, [x7, #12]
    1048:	mov	x5, x9
    104c:	b	b78 <GOMP_loop_ull_ordered_dynamic_start>
    1050:	ldrsw	x4, [x7, #12]
    1054:	mov	x5, x9
    1058:	b	de8 <GOMP_loop_ull_ordered_guided_start>
    105c:	stp	x29, x30, [sp, #-16]!
    1060:	mov	x29, sp
    1064:	bl	0 <abort>

0000000000001068 <GOMP_loop_ull_ordered_start>:
    1068:	stp	x29, x30, [sp, #-112]!
    106c:	mov	x29, sp
    1070:	stp	x21, x22, [sp, #32]
    1074:	adrp	x21, 0 <gomp_tls_data>
    1078:	ldr	x21, [x21]
    107c:	stp	x19, x20, [sp, #16]
    1080:	mrs	x20, tpidr_el0
    1084:	add	x8, x20, x21
    1088:	stp	x25, x26, [sp, #64]
    108c:	mov	x19, x4
    1090:	mov	x25, x7
    1094:	ldp	x26, x22, [sp, #112]
    1098:	stp	x23, x24, [sp, #48]
    109c:	mov	x23, x1
    10a0:	stp	x27, x28, [sp, #80]
    10a4:	mov	x24, x6
    10a8:	mov	x27, x2
    10ac:	str	xzr, [x8, #72]
    10b0:	and	w28, w0, #0xff
    10b4:	stp	x5, x3, [sp, #96]
    10b8:	cbz	x26, 10c0 <GOMP_loop_ull_ordered_start+0x58>
    10bc:	bl	0 <gomp_workshare_taskgroup_start>
    10c0:	mov	x0, #0x1                   	// #1
    10c4:	cbz	x22, 10d0 <GOMP_loop_ull_ordered_start+0x68>
    10c8:	ldr	x0, [x22]
    10cc:	add	x0, x0, #0x1
    10d0:	bl	0 <gomp_work_share_start>
    10d4:	tst	w0, #0xff
    10d8:	b.ne	1240 <GOMP_loop_ull_ordered_start+0x1d8>  // b.any
    10dc:	add	x19, x20, x21
    10e0:	ldr	x1, [x19, #24]
    10e4:	cbz	x26, 10f8 <GOMP_loop_ull_ordered_start+0x90>
    10e8:	ldr	x1, [x1, #88]
    10ec:	mov	x0, x26
    10f0:	bl	0 <gomp_workshare_task_reduction_register>
    10f4:	ldr	x1, [x19, #24]
    10f8:	ldr	w19, [x1]
    10fc:	cmp	x19, #0x1
    1100:	b.eq	11c0 <GOMP_loop_ull_ordered_start+0x158>  // b.none
    1104:	add	x0, x1, #0x40
    1108:	mov	w2, #0x1                   	// #1
    110c:	ldaxr	w1, [x0]
    1110:	cbnz	w1, 111c <GOMP_loop_ull_ordered_start+0xb4>
    1114:	stxr	w3, w2, [x0]
    1118:	cbnz	w3, 110c <GOMP_loop_ull_ordered_start+0xa4>
    111c:	cmp	w1, #0x0
    1120:	b.ne	1454 <GOMP_loop_ull_ordered_start+0x3ec>  // b.any
    1124:	cbz	x22, 115c <GOMP_loop_ull_ordered_start+0xf4>
    1128:	add	x0, x20, x21
    112c:	ldr	x1, [x0, #24]
    1130:	add	x3, x20, x21
    1134:	ldr	x0, [x1, #32]
    1138:	mov	x2, #0x4                   	// #4
    113c:	ldr	x1, [x3, #16]
    1140:	cbz	x1, 114c <GOMP_loop_ull_ordered_start+0xe4>
    1144:	ldr	w2, [x1]
    1148:	lsl	x2, x2, #2
    114c:	add	x0, x0, x2
    1150:	add	x0, x0, #0x7
    1154:	and	x0, x0, #0xfffffffffffffff8
    1158:	str	x0, [x22]
    115c:	cmp	x19, #0x2
    1160:	b.eq	1224 <GOMP_loop_ull_ordered_start+0x1bc>  // b.none
    1164:	b.le	1204 <GOMP_loop_ull_ordered_start+0x19c>
    1168:	cmp	x19, #0x3
    116c:	b.ne	11f8 <GOMP_loop_ull_ordered_start+0x190>  // b.any
    1170:	mov	x1, x25
    1174:	mov	x0, x24
    1178:	bl	0 <gomp_iter_ull_guided_next_locked>
    117c:	and	w19, w0, #0xff
    1180:	cbnz	w19, 1238 <GOMP_loop_ull_ordered_start+0x1d0>
    1184:	add	x20, x20, x21
    1188:	ldr	x0, [x20, #24]
    118c:	add	x0, x0, #0x40
    1190:	ldxr	w1, [x0]
    1194:	stlxr	w2, wzr, [x0]
    1198:	cbnz	w2, 1190 <GOMP_loop_ull_ordered_start+0x128>
    119c:	tbnz	w1, #31, 144c <GOMP_loop_ull_ordered_start+0x3e4>
    11a0:	mov	w0, w19
    11a4:	ldp	x19, x20, [sp, #16]
    11a8:	ldp	x21, x22, [sp, #32]
    11ac:	ldp	x23, x24, [sp, #48]
    11b0:	ldp	x25, x26, [sp, #64]
    11b4:	ldp	x27, x28, [sp, #80]
    11b8:	ldp	x29, x30, [sp], #112
    11bc:	ret
    11c0:	cbnz	x22, 1130 <GOMP_loop_ull_ordered_start+0xc8>
    11c4:	mov	x1, x25
    11c8:	mov	x0, x24
    11cc:	bl	0 <gomp_iter_ull_static_next>
    11d0:	cmp	w0, #0x0
    11d4:	cset	w19, eq  // eq = none
    11d8:	mov	w0, w19
    11dc:	ldp	x19, x20, [sp, #16]
    11e0:	ldp	x21, x22, [sp, #32]
    11e4:	ldp	x23, x24, [sp, #48]
    11e8:	ldp	x25, x26, [sp, #64]
    11ec:	ldp	x27, x28, [sp, #80]
    11f0:	ldp	x29, x30, [sp], #112
    11f4:	ret
    11f8:	cmp	x19, #0x4
    11fc:	b.eq	11c4 <GOMP_loop_ull_ordered_start+0x15c>  // b.none
    1200:	bl	0 <abort>
    1204:	cmp	x19, #0x1
    1208:	b.ne	1200 <GOMP_loop_ull_ordered_start+0x198>  // b.any
    120c:	mov	x1, x25
    1210:	mov	x0, x24
    1214:	bl	0 <gomp_iter_ull_static_next>
    1218:	cmp	w0, #0x0
    121c:	cset	w19, eq  // eq = none
    1220:	b	11d8 <GOMP_loop_ull_ordered_start+0x170>
    1224:	mov	x1, x25
    1228:	mov	x0, x24
    122c:	bl	0 <gomp_iter_ull_dynamic_next_locked>
    1230:	and	w19, w0, #0xff
    1234:	cbz	w19, 1184 <GOMP_loop_ull_ordered_start+0x11c>
    1238:	bl	0 <gomp_ordered_first>
    123c:	b	1184 <GOMP_loop_ull_ordered_start+0x11c>
    1240:	tst	x19, #0x7ffffffc
    1244:	and	x19, x19, #0x7fffffff
    1248:	b.ne	13fc <GOMP_loop_ull_ordered_start+0x394>  // b.any
    124c:	cbnz	x19, 1424 <GOMP_loop_ull_ordered_start+0x3bc>
    1250:	add	x2, x20, x21
    1254:	adrp	x0, 0 <gomp_global_icv>
    1258:	add	x0, x0, #0x0
    125c:	ldr	x1, [x2, #80]
    1260:	cmp	x1, #0x0
    1264:	add	x1, x1, #0x90
    1268:	csel	x0, x0, x1, eq  // eq = none
    126c:	ldr	w1, [x0, #8]
    1270:	tst	w1, #0x7ffffffc
    1274:	and	w1, w1, #0x7fffffff
    1278:	b.ne	1390 <GOMP_loop_ull_ordered_start+0x328>  // b.any
    127c:	cbz	w1, 1200 <GOMP_loop_ull_ordered_start+0x198>
    1280:	ldrsw	x0, [x0, #12]
    1284:	mov	w19, w1
    1288:	str	x0, [sp, #96]
    128c:	add	x0, x20, x21
    1290:	cmp	w28, #0x0
    1294:	ccmp	x23, x27, #0x0, ne  // ne = any
    1298:	ldr	x0, [x0, #24]
    129c:	str	w1, [x0]
    12a0:	ldr	x1, [sp, #96]
    12a4:	str	x1, [x0, #8]
    12a8:	b.ls	14a0 <GOMP_loop_ull_ordered_start+0x438>  // b.plast
    12ac:	ldr	x1, [sp, #104]
    12b0:	str	wzr, [x0, #4]
    12b4:	stp	x23, x1, [x0, #16]
    12b8:	cmp	x19, #0x2
    12bc:	str	x23, [x0, #72]
    12c0:	b.ne	13f4 <GOMP_loop_ull_ordered_start+0x38c>  // b.any
    12c4:	ldp	x3, x2, [sp, #96]
    12c8:	add	x1, x20, x21
    12cc:	ldr	x1, [x1, #16]
    12d0:	mul	x3, x2, x3
    12d4:	str	x3, [x0, #8]
    12d8:	cbz	x1, 145c <GOMP_loop_ull_ordered_start+0x3f4>
    12dc:	ldr	w4, [x1]
    12e0:	mov	x2, x4
    12e4:	cbz	w28, 1468 <GOMP_loop_ull_ordered_start+0x400>
    12e8:	orr	x2, x3, x2
    12ec:	mov	x1, #0x7fffffff            	// #2147483647
    12f0:	cmp	x2, x1
    12f4:	b.hi	130c <GOMP_loop_ull_ordered_start+0x2a4>  // b.pmore
    12f8:	madd	x3, x4, x3, x3
    12fc:	mvn	x3, x3
    1300:	cmp	x23, x3
    1304:	cset	w1, cc  // cc = lo, ul, last
    1308:	str	w1, [x0, #4]
    130c:	mov	x19, #0x2                   	// #2
    1310:	cbz	x26, 1340 <GOMP_loop_ull_ordered_start+0x2d8>
    1314:	mov	x0, x26
    1318:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
    131c:	add	x0, x20, x21
    1320:	mov	w2, #0x1                   	// #1
    1324:	ldr	x1, [x0, #80]
    1328:	ldr	x0, [x0, #24]
    132c:	ldr	x1, [x1, #40]
    1330:	strb	w2, [x1, #50]
    1334:	str	x26, [x0, #88]
    1338:	cmp	x19, #0x1
    133c:	b.eq	1444 <GOMP_loop_ull_ordered_start+0x3dc>  // b.none
    1340:	add	x0, x0, #0x40
    1344:	mov	w2, #0x1                   	// #1
    1348:	ldaxr	w1, [x0]
    134c:	cbnz	w1, 1358 <GOMP_loop_ull_ordered_start+0x2f0>
    1350:	stxr	w3, w2, [x0]
    1354:	cbnz	w3, 1348 <GOMP_loop_ull_ordered_start+0x2e0>
    1358:	cmp	w1, #0x0
    135c:	b.ne	14ec <GOMP_loop_ull_ordered_start+0x484>  // b.any
    1360:	add	x1, x20, x21
    1364:	ldr	x0, [x1, #32]
    1368:	cbz	x0, 1124 <GOMP_loop_ull_ordered_start+0xbc>
    136c:	ldr	x2, [x1, #24]
    1370:	add	x0, x0, #0x50
    1374:	ldxr	x1, [x0]
    1378:	stlxr	w3, x2, [x0]
    137c:	cbnz	w3, 1374 <GOMP_loop_ull_ordered_start+0x30c>
    1380:	cmp	x1, #0x1
    1384:	b.eq	1124 <GOMP_loop_ull_ordered_start+0xbc>  // b.none
    1388:	bl	0 <gomp_ptrlock_set_slow>
    138c:	b	1124 <GOMP_loop_ull_ordered_start+0xbc>
    1390:	cmp	w1, #0x4
    1394:	b.ne	1200 <GOMP_loop_ull_ordered_start+0x198>  // b.any
    1398:	ldr	x0, [x2, #24]
    139c:	mov	w1, #0x1                   	// #1
    13a0:	cmp	w28, #0x0
    13a4:	ccmp	x23, x27, #0x0, ne  // ne = any
    13a8:	str	w1, [x0]
    13ac:	str	xzr, [x0, #8]
    13b0:	b.hi	1408 <GOMP_loop_ull_ordered_start+0x3a0>  // b.pmore
    13b4:	cmp	x23, x27
    13b8:	eor	w1, w28, #0x1
    13bc:	cset	w2, cc  // cc = lo, ul, last
    13c0:	mov	x19, #0x1                   	// #1
    13c4:	tst	w2, w1
    13c8:	b.ne	142c <GOMP_loop_ull_ordered_start+0x3c4>  // b.any
    13cc:	str	xzr, [sp, #96]
    13d0:	ldr	x1, [sp, #104]
    13d4:	str	wzr, [x0, #4]
    13d8:	stp	x27, x1, [x0, #16]
    13dc:	cmp	x19, #0x2
    13e0:	str	x23, [x0, #72]
    13e4:	b.eq	14d4 <GOMP_loop_ull_ordered_start+0x46c>  // b.none
    13e8:	cbnz	w28, 13f4 <GOMP_loop_ull_ordered_start+0x38c>
    13ec:	mov	w1, #0x2                   	// #2
    13f0:	str	w1, [x0, #4]
    13f4:	cbnz	x26, 1314 <GOMP_loop_ull_ordered_start+0x2ac>
    13f8:	b	1338 <GOMP_loop_ull_ordered_start+0x2d0>
    13fc:	cmp	x19, #0x4
    1400:	b.eq	1250 <GOMP_loop_ull_ordered_start+0x1e8>  // b.none
    1404:	bl	0 <abort>
    1408:	ldr	x1, [sp, #104]
    140c:	str	wzr, [x0, #4]
    1410:	stp	x23, x1, [x0, #16]
    1414:	mov	x19, #0x1                   	// #1
    1418:	str	x23, [x0, #72]
    141c:	cbnz	x26, 1314 <GOMP_loop_ull_ordered_start+0x2ac>
    1420:	b	1338 <GOMP_loop_ull_ordered_start+0x2d0>
    1424:	mov	w1, w19
    1428:	b	128c <GOMP_loop_ull_ordered_start+0x224>
    142c:	ldr	x1, [sp, #104]
    1430:	str	wzr, [x0, #4]
    1434:	stp	x23, x1, [x0, #16]
    1438:	mov	w1, #0x2                   	// #2
    143c:	str	x23, [x0, #72]
    1440:	b	13f0 <GOMP_loop_ull_ordered_start+0x388>
    1444:	bl	0 <gomp_ordered_static_init>
    1448:	b	1360 <GOMP_loop_ull_ordered_start+0x2f8>
    144c:	bl	0 <gomp_mutex_unlock_slow>
    1450:	b	11a0 <GOMP_loop_ull_ordered_start+0x138>
    1454:	bl	0 <gomp_mutex_lock_slow>
    1458:	b	1124 <GOMP_loop_ull_ordered_start+0xbc>
    145c:	mov	x2, #0x1                   	// #1
    1460:	mov	x4, x2
    1464:	b	12e4 <GOMP_loop_ull_ordered_start+0x27c>
    1468:	neg	x1, x3
    146c:	mov	x3, #0x7fffffff            	// #2147483647
    1470:	orr	x2, x1, x2
    1474:	cmp	x2, x3
    1478:	b.hi	14dc <GOMP_loop_ull_ordered_start+0x474>  // b.pmore
    147c:	madd	x1, x4, x1, x1
    1480:	mov	x19, #0x2                   	// #2
    1484:	add	x1, x1, #0x1
    1488:	cmp	x23, x1
    148c:	cset	w1, hi  // hi = pmore
    1490:	str	w1, [x0, #4]
    1494:	orr	w1, w1, #0x2
    1498:	str	w1, [x0, #4]
    149c:	b	13f4 <GOMP_loop_ull_ordered_start+0x38c>
    14a0:	cmp	x23, x27
    14a4:	eor	w1, w28, #0x1
    14a8:	cset	w2, cc  // cc = lo, ul, last
    14ac:	tst	w2, w1
    14b0:	b.eq	13d0 <GOMP_loop_ull_ordered_start+0x368>  // b.none
    14b4:	ldr	x1, [sp, #104]
    14b8:	str	wzr, [x0, #4]
    14bc:	stp	x23, x1, [x0, #16]
    14c0:	cmp	x19, #0x2
    14c4:	str	x23, [x0, #72]
    14c8:	b.eq	12c4 <GOMP_loop_ull_ordered_start+0x25c>  // b.none
    14cc:	mov	w1, #0x2                   	// #2
    14d0:	b	13f0 <GOMP_loop_ull_ordered_start+0x388>
    14d4:	mov	x23, x27
    14d8:	b	12c4 <GOMP_loop_ull_ordered_start+0x25c>
    14dc:	mov	x19, #0x2                   	// #2
    14e0:	mov	w1, w19
    14e4:	str	w1, [x0, #4]
    14e8:	b	13f4 <GOMP_loop_ull_ordered_start+0x38c>
    14ec:	bl	0 <gomp_mutex_lock_slow>
    14f0:	b	1360 <GOMP_loop_ull_ordered_start+0x2f8>
    14f4:	nop

00000000000014f8 <GOMP_loop_ull_doacross_static_start>:
    14f8:	stp	x29, x30, [sp, #-64]!
    14fc:	mrs	x5, tpidr_el0
    1500:	mov	x29, sp
    1504:	stp	x19, x20, [sp, #16]
    1508:	mov	x20, x3
    150c:	adrp	x19, 0 <gomp_tls_data>
    1510:	ldr	x19, [x19]
    1514:	stp	x21, x22, [sp, #32]
    1518:	mov	x22, x1
    151c:	add	x19, x5, x19
    1520:	stp	x23, x24, [sp, #48]
    1524:	mov	x21, x4
    1528:	mov	w23, w0
    152c:	mov	x24, x2
    1530:	mov	x0, #0x0                   	// #0
    1534:	str	xzr, [x19, #72]
    1538:	bl	0 <gomp_work_share_start>
    153c:	tst	w0, #0xff
    1540:	b.ne	156c <GOMP_loop_ull_doacross_static_start+0x74>  // b.any
    1544:	mov	x1, x21
    1548:	mov	x0, x20
    154c:	bl	0 <gomp_iter_ull_static_next>
    1550:	cmp	w0, #0x0
    1554:	cset	w0, eq  // eq = none
    1558:	ldp	x19, x20, [sp, #16]
    155c:	ldp	x21, x22, [sp, #32]
    1560:	ldp	x23, x24, [sp, #48]
    1564:	ldp	x29, x30, [sp], #64
    1568:	ret
    156c:	ldr	x4, [x19, #24]
    1570:	mov	x5, #0x1                   	// #1
    1574:	ldr	x3, [x22]
    1578:	mov	w0, w23
    157c:	stp	x5, x24, [x4]
    1580:	mov	x2, x24
    1584:	mov	x1, x22
    1588:	stp	x3, x5, [x4, #16]
    158c:	mov	x3, #0x0                   	// #0
    1590:	str	xzr, [x4, #72]
    1594:	bl	0 <gomp_doacross_ull_init>
    1598:	ldr	x0, [x19, #32]
    159c:	cbz	x0, 1544 <GOMP_loop_ull_doacross_static_start+0x4c>
    15a0:	ldr	x2, [x19, #24]
    15a4:	add	x0, x0, #0x50
    15a8:	ldxr	x1, [x0]
    15ac:	stlxr	w3, x2, [x0]
    15b0:	cbnz	w3, 15a8 <GOMP_loop_ull_doacross_static_start+0xb0>
    15b4:	cmp	x1, #0x1
    15b8:	b.eq	1544 <GOMP_loop_ull_doacross_static_start+0x4c>  // b.none
    15bc:	bl	0 <gomp_ptrlock_set_slow>
    15c0:	b	1544 <GOMP_loop_ull_doacross_static_start+0x4c>
    15c4:	nop

00000000000015c8 <GOMP_loop_ull_doacross_dynamic_start>:
    15c8:	stp	x29, x30, [sp, #-80]!
    15cc:	mov	x29, sp
    15d0:	stp	x19, x20, [sp, #16]
    15d4:	mov	x19, x2
    15d8:	mov	x20, x3
    15dc:	stp	x21, x22, [sp, #32]
    15e0:	mov	x22, x1
    15e4:	mov	x21, x4
    15e8:	stp	x23, x24, [sp, #48]
    15ec:	mov	w23, w0
    15f0:	mov	x0, #0x0                   	// #0
    15f4:	bl	0 <gomp_work_share_start>
    15f8:	tst	w0, #0xff
    15fc:	b.ne	161c <GOMP_loop_ull_doacross_dynamic_start+0x54>  // b.any
    1600:	mov	x1, x21
    1604:	mov	x0, x20
    1608:	ldp	x19, x20, [sp, #16]
    160c:	ldp	x21, x22, [sp, #32]
    1610:	ldp	x23, x24, [sp, #48]
    1614:	ldp	x29, x30, [sp], #80
    1618:	b	0 <gomp_iter_ull_dynamic_next>
    161c:	ldr	x3, [x22]
    1620:	str	x25, [sp, #64]
    1624:	adrp	x25, 0 <gomp_tls_data>
    1628:	ldr	x25, [x25]
    162c:	mrs	x24, tpidr_el0
    1630:	mov	x4, #0x2                   	// #2
    1634:	mov	x1, #0x1                   	// #1
    1638:	add	x2, x24, x25
    163c:	ldr	x0, [x2, #24]
    1640:	stp	x4, x19, [x0]
    1644:	ldr	x2, [x2, #16]
    1648:	str	x3, [x0, #16]
    164c:	str	x1, [x0, #24]
    1650:	str	xzr, [x0, #72]
    1654:	cbz	x2, 1704 <GOMP_loop_ull_doacross_dynamic_start+0x13c>
    1658:	ldr	w2, [x2]
    165c:	mov	x1, x2
    1660:	orr	x1, x19, x1
    1664:	mov	x4, #0x7fffffff            	// #2147483647
    1668:	cmp	x1, x4
    166c:	b.hi	1684 <GOMP_loop_ull_doacross_dynamic_start+0xbc>  // b.pmore
    1670:	madd	x2, x2, x19, x19
    1674:	mvn	x2, x2
    1678:	cmp	x3, x2
    167c:	cset	w1, cc  // cc = lo, ul, last
    1680:	str	w1, [x0, #4]
    1684:	add	x24, x24, x25
    1688:	mov	w0, w23
    168c:	mov	x2, x19
    1690:	mov	x1, x22
    1694:	mov	x3, #0x0                   	// #0
    1698:	bl	0 <gomp_doacross_ull_init>
    169c:	ldr	x0, [x24, #32]
    16a0:	cbz	x0, 16e4 <GOMP_loop_ull_doacross_dynamic_start+0x11c>
    16a4:	ldr	x2, [x24, #24]
    16a8:	add	x0, x0, #0x50
    16ac:	ldxr	x1, [x0]
    16b0:	stlxr	w3, x2, [x0]
    16b4:	cbnz	w3, 16ac <GOMP_loop_ull_doacross_dynamic_start+0xe4>
    16b8:	cmp	x1, #0x1
    16bc:	b.eq	16e4 <GOMP_loop_ull_doacross_dynamic_start+0x11c>  // b.none
    16c0:	bl	0 <gomp_ptrlock_set_slow>
    16c4:	mov	x1, x21
    16c8:	mov	x0, x20
    16cc:	ldp	x19, x20, [sp, #16]
    16d0:	ldp	x21, x22, [sp, #32]
    16d4:	ldp	x23, x24, [sp, #48]
    16d8:	ldr	x25, [sp, #64]
    16dc:	ldp	x29, x30, [sp], #80
    16e0:	b	0 <gomp_iter_ull_dynamic_next>
    16e4:	mov	x1, x21
    16e8:	mov	x0, x20
    16ec:	ldp	x19, x20, [sp, #16]
    16f0:	ldp	x21, x22, [sp, #32]
    16f4:	ldp	x23, x24, [sp, #48]
    16f8:	ldr	x25, [sp, #64]
    16fc:	ldp	x29, x30, [sp], #80
    1700:	b	0 <gomp_iter_ull_dynamic_next>
    1704:	mov	x2, x1
    1708:	b	1660 <GOMP_loop_ull_doacross_dynamic_start+0x98>
    170c:	nop

0000000000001710 <GOMP_loop_ull_doacross_guided_start>:
    1710:	stp	x29, x30, [sp, #-64]!
    1714:	mov	x29, sp
    1718:	stp	x19, x20, [sp, #16]
    171c:	mov	x19, x3
    1720:	mov	x20, x4
    1724:	stp	x21, x22, [sp, #32]
    1728:	mov	x22, x2
    172c:	stp	x23, x24, [sp, #48]
    1730:	mov	w23, w0
    1734:	mov	x24, x1
    1738:	mov	x0, #0x0                   	// #0
    173c:	bl	0 <gomp_work_share_start>
    1740:	tst	w0, #0xff
    1744:	b.ne	1764 <GOMP_loop_ull_doacross_guided_start+0x54>  // b.any
    1748:	mov	x1, x20
    174c:	mov	x0, x19
    1750:	ldp	x19, x20, [sp, #16]
    1754:	ldp	x21, x22, [sp, #32]
    1758:	ldp	x23, x24, [sp, #48]
    175c:	ldp	x29, x30, [sp], #64
    1760:	b	0 <gomp_iter_ull_guided_next>
    1764:	adrp	x0, 0 <gomp_tls_data>
    1768:	ldr	x0, [x0]
    176c:	mrs	x21, tpidr_el0
    1770:	ldr	x6, [x24]
    1774:	add	x21, x21, x0
    1778:	mov	x5, #0x1                   	// #1
    177c:	mov	x7, #0x3                   	// #3
    1780:	mov	w0, w23
    1784:	mov	x2, x22
    1788:	ldr	x4, [x21, #24]
    178c:	mov	x1, x24
    1790:	mov	x3, #0x0                   	// #0
    1794:	stp	x7, x22, [x4]
    1798:	stp	x6, x5, [x4, #16]
    179c:	str	xzr, [x4, #72]
    17a0:	bl	0 <gomp_doacross_ull_init>
    17a4:	ldr	x0, [x21, #32]
    17a8:	cbz	x0, 1748 <GOMP_loop_ull_doacross_guided_start+0x38>
    17ac:	ldr	x2, [x21, #24]
    17b0:	add	x0, x0, #0x50
    17b4:	ldxr	x1, [x0]
    17b8:	stlxr	w3, x2, [x0]
    17bc:	cbnz	w3, 17b4 <GOMP_loop_ull_doacross_guided_start+0xa4>
    17c0:	cmp	x1, #0x1
    17c4:	b.eq	1748 <GOMP_loop_ull_doacross_guided_start+0x38>  // b.none
    17c8:	bl	0 <gomp_ptrlock_set_slow>
    17cc:	mov	x1, x20
    17d0:	mov	x0, x19
    17d4:	ldp	x19, x20, [sp, #16]
    17d8:	ldp	x21, x22, [sp, #32]
    17dc:	ldp	x23, x24, [sp, #48]
    17e0:	ldp	x29, x30, [sp], #64
    17e4:	b	0 <gomp_iter_ull_guided_next>

00000000000017e8 <GOMP_loop_ull_doacross_runtime_start>:
    17e8:	stp	x29, x30, [sp, #-64]!
    17ec:	adrp	x5, 0 <gomp_global_icv>
    17f0:	adrp	x4, 0 <gomp_tls_data>
    17f4:	ldr	x4, [x4]
    17f8:	mov	x29, sp
    17fc:	stp	x19, x20, [sp, #16]
    1800:	mrs	x19, tpidr_el0
    1804:	add	x19, x19, x4
    1808:	add	x5, x5, #0x0
    180c:	mov	x20, x2
    1810:	stp	x21, x22, [sp, #32]
    1814:	mov	x21, x3
    1818:	ldr	x6, [x19, #80]
    181c:	cmp	x6, #0x0
    1820:	add	x6, x6, #0x90
    1824:	csel	x5, x5, x6, eq  // eq = none
    1828:	ldr	w2, [x5, #8]
    182c:	and	w6, w2, #0x7fffffff
    1830:	cmp	w6, #0x3
    1834:	b.eq	18ac <GOMP_loop_ull_doacross_runtime_start+0xc4>  // b.none
    1838:	tst	w2, #0x7ffffffc
    183c:	b.ne	1864 <GOMP_loop_ull_doacross_runtime_start+0x7c>  // b.any
    1840:	cmp	w6, #0x1
    1844:	b.ne	1888 <GOMP_loop_ull_doacross_runtime_start+0xa0>  // b.any
    1848:	mov	x4, x3
    184c:	mov	x3, x20
    1850:	ldp	x19, x20, [sp, #16]
    1854:	ldp	x21, x22, [sp, #32]
    1858:	ldp	x29, x30, [sp], #64
    185c:	ldrsw	x2, [x5, #12]
    1860:	b	14f8 <GOMP_loop_ull_doacross_static_start>
    1864:	cmp	w6, #0x4
    1868:	b.ne	1944 <GOMP_loop_ull_doacross_runtime_start+0x15c>  // b.any
    186c:	mov	x4, x3
    1870:	mov	x3, x20
    1874:	ldp	x19, x20, [sp, #16]
    1878:	mov	x2, #0x0                   	// #0
    187c:	ldp	x21, x22, [sp, #32]
    1880:	ldp	x29, x30, [sp], #64
    1884:	b	14f8 <GOMP_loop_ull_doacross_static_start>
    1888:	cmp	w6, #0x2
    188c:	b.ne	1944 <GOMP_loop_ull_doacross_runtime_start+0x15c>  // b.any
    1890:	mov	x4, x3
    1894:	mov	x3, x20
    1898:	ldp	x19, x20, [sp, #16]
    189c:	ldp	x21, x22, [sp, #32]
    18a0:	ldp	x29, x30, [sp], #64
    18a4:	ldrsw	x2, [x5, #12]
    18a8:	b	15c8 <GOMP_loop_ull_doacross_dynamic_start>
    18ac:	mov	x22, x1
    18b0:	stp	x23, x24, [sp, #48]
    18b4:	ldr	w24, [x5, #12]
    18b8:	mov	w23, w0
    18bc:	mov	x0, #0x0                   	// #0
    18c0:	bl	0 <gomp_work_share_start>
    18c4:	tst	w0, #0xff
    18c8:	b.ne	18e8 <GOMP_loop_ull_doacross_runtime_start+0x100>  // b.any
    18cc:	mov	x1, x21
    18d0:	mov	x0, x20
    18d4:	ldp	x19, x20, [sp, #16]
    18d8:	ldp	x21, x22, [sp, #32]
    18dc:	ldp	x23, x24, [sp, #48]
    18e0:	ldp	x29, x30, [sp], #64
    18e4:	b	0 <gomp_iter_ull_guided_next>
    18e8:	ldr	x3, [x19, #24]
    18ec:	sxtw	x2, w24
    18f0:	ldr	x4, [x22]
    18f4:	mov	x1, #0x1                   	// #1
    18f8:	mov	x0, #0x3                   	// #3
    18fc:	stp	x0, x2, [x3]
    1900:	mov	w0, w23
    1904:	stp	x4, x1, [x3, #16]
    1908:	mov	x1, x22
    190c:	str	xzr, [x3, #72]
    1910:	mov	x3, #0x0                   	// #0
    1914:	bl	0 <gomp_doacross_ull_init>
    1918:	ldr	x0, [x19, #32]
    191c:	cbz	x0, 18cc <GOMP_loop_ull_doacross_runtime_start+0xe4>
    1920:	ldr	x2, [x19, #24]
    1924:	add	x0, x0, #0x50
    1928:	ldxr	x1, [x0]
    192c:	stlxr	w3, x2, [x0]
    1930:	cbnz	w3, 1928 <GOMP_loop_ull_doacross_runtime_start+0x140>
    1934:	cmp	x1, #0x1
    1938:	b.eq	18cc <GOMP_loop_ull_doacross_runtime_start+0xe4>  // b.none
    193c:	bl	0 <gomp_ptrlock_set_slow>
    1940:	b	18cc <GOMP_loop_ull_doacross_runtime_start+0xe4>
    1944:	stp	x23, x24, [sp, #48]
    1948:	bl	0 <abort>
    194c:	nop

0000000000001950 <GOMP_loop_ull_doacross_start>:
    1950:	stp	x29, x30, [sp, #-112]!
    1954:	mov	x29, sp
    1958:	stp	x23, x24, [sp, #48]
    195c:	mov	x24, x4
    1960:	adrp	x23, 0 <gomp_tls_data>
    1964:	ldr	x23, [x23]
    1968:	stp	x19, x20, [sp, #16]
    196c:	mrs	x20, tpidr_el0
    1970:	mov	x19, x2
    1974:	stp	x27, x28, [sp, #80]
    1978:	add	x28, x20, x23
    197c:	mov	x27, x3
    1980:	stp	x21, x22, [sp, #32]
    1984:	mov	x22, x6
    1988:	mov	x21, x7
    198c:	stp	x25, x26, [sp, #64]
    1990:	mov	w26, w0
    1994:	mov	x25, x5
    1998:	str	xzr, [x28, #72]
    199c:	str	x1, [sp, #104]
    19a0:	cbz	x6, 1b98 <GOMP_loop_ull_doacross_start+0x248>
    19a4:	bl	0 <gomp_workshare_taskgroup_start>
    19a8:	mov	x0, #0x0                   	// #0
    19ac:	bl	0 <gomp_work_share_start>
    19b0:	tst	w0, #0xff
    19b4:	ldr	x1, [sp, #104]
    19b8:	b.eq	1afc <GOMP_loop_ull_doacross_start+0x1ac>  // b.none
    19bc:	mov	x3, #0x0                   	// #0
    19c0:	cbz	x21, 19c8 <GOMP_loop_ull_doacross_start+0x78>
    19c4:	ldr	x3, [x21]
    19c8:	tst	x19, #0x7ffffffc
    19cc:	and	x8, x19, #0x7fffffff
    19d0:	b.ne	19e0 <GOMP_loop_ull_doacross_start+0x90>  // b.any
    19d4:	cbz	x8, 19e8 <GOMP_loop_ull_doacross_start+0x98>
    19d8:	mov	w2, w8
    19dc:	b	1a20 <GOMP_loop_ull_doacross_start+0xd0>
    19e0:	cmp	x8, #0x4
    19e4:	b.ne	1b94 <GOMP_loop_ull_doacross_start+0x244>  // b.any
    19e8:	add	x4, x20, x23
    19ec:	adrp	x0, 0 <gomp_global_icv>
    19f0:	add	x0, x0, #0x0
    19f4:	ldr	x2, [x4, #80]
    19f8:	cmp	x2, #0x0
    19fc:	add	x2, x2, #0x90
    1a00:	csel	x0, x0, x2, eq  // eq = none
    1a04:	ldr	w2, [x0, #8]
    1a08:	tst	w2, #0x7ffffffc
    1a0c:	and	w2, w2, #0x7fffffff
    1a10:	b.ne	1b14 <GOMP_loop_ull_doacross_start+0x1c4>  // b.any
    1a14:	cbz	w2, 1b94 <GOMP_loop_ull_doacross_start+0x244>
    1a18:	ldrsw	x27, [x0, #12]
    1a1c:	mov	w8, w2
    1a20:	add	x5, x20, x23
    1a24:	mov	x4, #0x1                   	// #1
    1a28:	ldr	x6, [x1]
    1a2c:	cmp	x8, #0x2
    1a30:	ldr	x0, [x5, #24]
    1a34:	stp	w2, wzr, [x0]
    1a38:	stp	x27, x6, [x0, #8]
    1a3c:	str	x4, [x0, #24]
    1a40:	str	xzr, [x0, #72]
    1a44:	b.eq	1bdc <GOMP_loop_ull_doacross_start+0x28c>  // b.none
    1a48:	mov	x2, x27
    1a4c:	mov	w0, w26
    1a50:	bl	0 <gomp_doacross_ull_init>
    1a54:	cbz	x22, 1b48 <GOMP_loop_ull_doacross_start+0x1f8>
    1a58:	mov	x0, x22
    1a5c:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
    1a60:	add	x0, x20, x23
    1a64:	mov	w2, #0x1                   	// #1
    1a68:	ldr	x3, [x0, #80]
    1a6c:	ldr	x1, [x0, #24]
    1a70:	ldr	x0, [x3, #40]
    1a74:	strb	w2, [x0, #50]
    1a78:	str	x22, [x1, #88]
    1a7c:	add	x19, x20, x23
    1a80:	ldr	x0, [x19, #32]
    1a84:	cbz	x0, 1aa8 <GOMP_loop_ull_doacross_start+0x158>
    1a88:	add	x0, x0, #0x50
    1a8c:	ldxr	x2, [x0]
    1a90:	stlxr	w3, x1, [x0]
    1a94:	cbnz	w3, 1a8c <GOMP_loop_ull_doacross_start+0x13c>
    1a98:	cmp	x2, #0x1
    1a9c:	b.eq	1aa4 <GOMP_loop_ull_doacross_start+0x154>  // b.none
    1aa0:	bl	0 <gomp_ptrlock_set_slow>
    1aa4:	ldr	x1, [x19, #24]
    1aa8:	cbz	x21, 1ac0 <GOMP_loop_ull_doacross_start+0x170>
    1aac:	ldr	x0, [x1, #32]
    1ab0:	add	x20, x20, x23
    1ab4:	ldr	x0, [x0, #48]
    1ab8:	str	x0, [x21]
    1abc:	ldr	x1, [x20, #24]
    1ac0:	ldr	w0, [x1]
    1ac4:	cmp	w0, #0x2
    1ac8:	b.eq	1bb8 <GOMP_loop_ull_doacross_start+0x268>  // b.none
    1acc:	b.ls	1b8c <GOMP_loop_ull_doacross_start+0x23c>  // b.plast
    1ad0:	cmp	w0, #0x3
    1ad4:	b.ne	1b54 <GOMP_loop_ull_doacross_start+0x204>  // b.any
    1ad8:	mov	x1, x25
    1adc:	mov	x0, x24
    1ae0:	ldp	x19, x20, [sp, #16]
    1ae4:	ldp	x21, x22, [sp, #32]
    1ae8:	ldp	x23, x24, [sp, #48]
    1aec:	ldp	x25, x26, [sp, #64]
    1af0:	ldp	x27, x28, [sp, #80]
    1af4:	ldp	x29, x30, [sp], #112
    1af8:	b	0 <gomp_iter_ull_guided_next>
    1afc:	ldr	x1, [x28, #24]
    1b00:	mov	x0, x22
    1b04:	ldr	x1, [x1, #88]
    1b08:	bl	0 <gomp_workshare_task_reduction_register>
    1b0c:	ldr	x1, [x28, #24]
    1b10:	b	1aa8 <GOMP_loop_ull_doacross_start+0x158>
    1b14:	cmp	w2, #0x4
    1b18:	b.ne	1b94 <GOMP_loop_ull_doacross_start+0x244>  // b.any
    1b1c:	ldr	x0, [x4, #24]
    1b20:	mov	x2, #0x1                   	// #1
    1b24:	ldr	x4, [x1]
    1b28:	mov	x27, #0x0                   	// #0
    1b2c:	stp	x2, xzr, [x0]
    1b30:	stp	x4, x2, [x0, #16]
    1b34:	mov	x2, x27
    1b38:	str	xzr, [x0, #72]
    1b3c:	mov	w0, w26
    1b40:	bl	0 <gomp_doacross_ull_init>
    1b44:	cbnz	x22, 1a58 <GOMP_loop_ull_doacross_start+0x108>
    1b48:	add	x0, x20, x23
    1b4c:	ldr	x1, [x0, #24]
    1b50:	b	1a7c <GOMP_loop_ull_doacross_start+0x12c>
    1b54:	cmp	w0, #0x4
    1b58:	b.ne	1b94 <GOMP_loop_ull_doacross_start+0x244>  // b.any
    1b5c:	mov	x1, x25
    1b60:	mov	x0, x24
    1b64:	bl	0 <gomp_iter_ull_static_next>
    1b68:	cmp	w0, #0x0
    1b6c:	cset	w0, eq  // eq = none
    1b70:	ldp	x19, x20, [sp, #16]
    1b74:	ldp	x21, x22, [sp, #32]
    1b78:	ldp	x23, x24, [sp, #48]
    1b7c:	ldp	x25, x26, [sp, #64]
    1b80:	ldp	x27, x28, [sp, #80]
    1b84:	ldp	x29, x30, [sp], #112
    1b88:	ret
    1b8c:	cmp	w0, #0x1
    1b90:	b.eq	1b5c <GOMP_loop_ull_doacross_start+0x20c>  // b.none
    1b94:	bl	0 <abort>
    1b98:	mov	x0, #0x0                   	// #0
    1b9c:	bl	0 <gomp_work_share_start>
    1ba0:	tst	w0, #0xff
    1ba4:	ldr	x1, [sp, #104]
    1ba8:	b.eq	1b0c <GOMP_loop_ull_doacross_start+0x1bc>  // b.none
    1bac:	mov	x3, #0x0                   	// #0
    1bb0:	cbnz	x21, 19c4 <GOMP_loop_ull_doacross_start+0x74>
    1bb4:	b	19c8 <GOMP_loop_ull_doacross_start+0x78>
    1bb8:	mov	x1, x25
    1bbc:	mov	x0, x24
    1bc0:	ldp	x19, x20, [sp, #16]
    1bc4:	ldp	x21, x22, [sp, #32]
    1bc8:	ldp	x23, x24, [sp, #48]
    1bcc:	ldp	x25, x26, [sp, #64]
    1bd0:	ldp	x27, x28, [sp, #80]
    1bd4:	ldp	x29, x30, [sp], #112
    1bd8:	b	0 <gomp_iter_ull_dynamic_next>
    1bdc:	ldr	x2, [x5, #16]
    1be0:	cbz	x2, 1c14 <GOMP_loop_ull_doacross_start+0x2c4>
    1be4:	ldr	w2, [x2]
    1be8:	mov	x4, x2
    1bec:	orr	x4, x4, x27
    1bf0:	mov	x5, #0x7fffffff            	// #2147483647
    1bf4:	cmp	x4, x5
    1bf8:	b.hi	1a48 <GOMP_loop_ull_doacross_start+0xf8>  // b.pmore
    1bfc:	madd	x2, x2, x27, x27
    1c00:	mvn	x2, x2
    1c04:	cmp	x6, x2
    1c08:	cset	w2, cc  // cc = lo, ul, last
    1c0c:	str	w2, [x0, #4]
    1c10:	b	1a48 <GOMP_loop_ull_doacross_start+0xf8>
    1c14:	mov	x2, x4
    1c18:	b	1bec <GOMP_loop_ull_doacross_start+0x29c>
    1c1c:	nop

0000000000001c20 <GOMP_loop_ull_static_next>:
    1c20:	stp	x29, x30, [sp, #-16]!
    1c24:	mov	x29, sp
    1c28:	bl	0 <gomp_iter_ull_static_next>
    1c2c:	cmp	w0, #0x0
    1c30:	cset	w0, eq  // eq = none
    1c34:	ldp	x29, x30, [sp], #16
    1c38:	ret
    1c3c:	nop

0000000000001c40 <GOMP_loop_ull_dynamic_next>:
    1c40:	b	0 <gomp_iter_ull_dynamic_next>
    1c44:	nop

0000000000001c48 <GOMP_loop_ull_guided_next>:
    1c48:	b	0 <gomp_iter_ull_guided_next>
    1c4c:	nop

0000000000001c50 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next>:
    1c50:	adrp	x3, 0 <gomp_tls_data>
    1c54:	ldr	x3, [x3]
    1c58:	mrs	x2, tpidr_el0
    1c5c:	add	x2, x2, x3
    1c60:	ldr	x2, [x2, #24]
    1c64:	ldr	w2, [x2]
    1c68:	cmp	w2, #0x2
    1c6c:	b.eq	1cc4 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next+0x74>  // b.none
    1c70:	stp	x29, x30, [sp, #-16]!
    1c74:	mov	x3, x0
    1c78:	mov	x4, x1
    1c7c:	mov	x29, sp
    1c80:	b.ls	1c94 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next+0x44>  // b.plast
    1c84:	cmp	w2, #0x3
    1c88:	b.ne	1cb8 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next+0x68>  // b.any
    1c8c:	ldp	x29, x30, [sp], #16
    1c90:	b	0 <gomp_iter_ull_guided_next>
    1c94:	cmp	w2, #0x1
    1c98:	b.ne	1cc0 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next+0x70>  // b.any
    1c9c:	mov	x1, x4
    1ca0:	mov	x0, x3
    1ca4:	bl	0 <gomp_iter_ull_static_next>
    1ca8:	cmp	w0, #0x0
    1cac:	cset	w0, eq  // eq = none
    1cb0:	ldp	x29, x30, [sp], #16
    1cb4:	ret
    1cb8:	cmp	w2, #0x4
    1cbc:	b.eq	1c9c <GOMP_loop_ull_maybe_nonmonotonic_runtime_next+0x4c>  // b.none
    1cc0:	bl	0 <abort>
    1cc4:	b	0 <gomp_iter_ull_dynamic_next>

0000000000001cc8 <GOMP_loop_ull_ordered_static_next>:
    1cc8:	stp	x29, x30, [sp, #-48]!
    1ccc:	mov	x29, sp
    1cd0:	stp	x21, x22, [sp, #32]
    1cd4:	mov	x21, x1
    1cd8:	adrp	x22, 0 <gomp_tls_data>
    1cdc:	ldr	x22, [x22]
    1ce0:	stp	x19, x20, [sp, #16]
    1ce4:	mov	x19, x0
    1ce8:	mrs	x20, tpidr_el0
    1cec:	bl	0 <gomp_ordered_sync>
    1cf0:	add	x1, x20, x22
    1cf4:	mov	w0, #0x1                   	// #1
    1cf8:	ldr	x2, [x1, #24]
    1cfc:	add	x2, x2, #0x40
    1d00:	ldaxr	w1, [x2]
    1d04:	cbnz	w1, 1d10 <GOMP_loop_ull_ordered_static_next+0x48>
    1d08:	stxr	w3, w0, [x2]
    1d0c:	cbnz	w3, 1d00 <GOMP_loop_ull_ordered_static_next+0x38>
    1d10:	cmp	w1, #0x0
    1d14:	b.ne	1d84 <GOMP_loop_ull_ordered_static_next+0xbc>  // b.any
    1d18:	mov	x0, x19
    1d1c:	mov	x1, x21
    1d20:	bl	0 <gomp_iter_ull_static_next>
    1d24:	mov	w19, w0
    1d28:	tbnz	w0, #31, 1d30 <GOMP_loop_ull_ordered_static_next+0x68>
    1d2c:	bl	0 <gomp_ordered_static_next>
    1d30:	add	x20, x20, x22
    1d34:	ldr	x1, [x20, #24]
    1d38:	add	x1, x1, #0x40
    1d3c:	ldxr	w0, [x1]
    1d40:	stlxr	w2, wzr, [x1]
    1d44:	cbnz	w2, 1d3c <GOMP_loop_ull_ordered_static_next+0x74>
    1d48:	tbnz	w0, #31, 1d64 <GOMP_loop_ull_ordered_static_next+0x9c>
    1d4c:	cmp	w19, #0x0
    1d50:	cset	w0, eq  // eq = none
    1d54:	ldp	x19, x20, [sp, #16]
    1d58:	ldp	x21, x22, [sp, #32]
    1d5c:	ldp	x29, x30, [sp], #48
    1d60:	ret
    1d64:	mov	x0, x1
    1d68:	bl	0 <gomp_mutex_unlock_slow>
    1d6c:	cmp	w19, #0x0
    1d70:	cset	w0, eq  // eq = none
    1d74:	ldp	x19, x20, [sp, #16]
    1d78:	ldp	x21, x22, [sp, #32]
    1d7c:	ldp	x29, x30, [sp], #48
    1d80:	ret
    1d84:	mov	x0, x2
    1d88:	bl	0 <gomp_mutex_lock_slow>
    1d8c:	b	1d18 <GOMP_loop_ull_ordered_static_next+0x50>

0000000000001d90 <GOMP_loop_ull_ordered_dynamic_next>:
    1d90:	stp	x29, x30, [sp, #-48]!
    1d94:	mov	x29, sp
    1d98:	stp	x21, x22, [sp, #32]
    1d9c:	mov	x21, x1
    1da0:	adrp	x22, 0 <gomp_tls_data>
    1da4:	ldr	x22, [x22]
    1da8:	stp	x19, x20, [sp, #16]
    1dac:	mov	x19, x0
    1db0:	mrs	x20, tpidr_el0
    1db4:	bl	0 <gomp_ordered_sync>
    1db8:	add	x1, x20, x22
    1dbc:	mov	w0, #0x1                   	// #1
    1dc0:	ldr	x2, [x1, #24]
    1dc4:	add	x2, x2, #0x40
    1dc8:	ldaxr	w1, [x2]
    1dcc:	cbnz	w1, 1dd8 <GOMP_loop_ull_ordered_dynamic_next+0x48>
    1dd0:	stxr	w3, w0, [x2]
    1dd4:	cbnz	w3, 1dc8 <GOMP_loop_ull_ordered_dynamic_next+0x38>
    1dd8:	cmp	w1, #0x0
    1ddc:	b.ne	1e50 <GOMP_loop_ull_ordered_dynamic_next+0xc0>  // b.any
    1de0:	mov	x0, x19
    1de4:	mov	x1, x21
    1de8:	bl	0 <gomp_iter_ull_dynamic_next_locked>
    1dec:	mov	w19, w0
    1df0:	tst	w0, #0xff
    1df4:	b.eq	1e2c <GOMP_loop_ull_ordered_dynamic_next+0x9c>  // b.none
    1df8:	bl	0 <gomp_ordered_next>
    1dfc:	add	x20, x20, x22
    1e00:	ldr	x1, [x20, #24]
    1e04:	add	x1, x1, #0x40
    1e08:	ldxr	w0, [x1]
    1e0c:	stlxr	w2, wzr, [x1]
    1e10:	cbnz	w2, 1e08 <GOMP_loop_ull_ordered_dynamic_next+0x78>
    1e14:	tbnz	w0, #31, 1e34 <GOMP_loop_ull_ordered_dynamic_next+0xa4>
    1e18:	mov	w0, w19
    1e1c:	ldp	x19, x20, [sp, #16]
    1e20:	ldp	x21, x22, [sp, #32]
    1e24:	ldp	x29, x30, [sp], #48
    1e28:	ret
    1e2c:	bl	0 <gomp_ordered_last>
    1e30:	b	1dfc <GOMP_loop_ull_ordered_dynamic_next+0x6c>
    1e34:	mov	x0, x1
    1e38:	bl	0 <gomp_mutex_unlock_slow>
    1e3c:	mov	w0, w19
    1e40:	ldp	x19, x20, [sp, #16]
    1e44:	ldp	x21, x22, [sp, #32]
    1e48:	ldp	x29, x30, [sp], #48
    1e4c:	ret
    1e50:	mov	x0, x2
    1e54:	bl	0 <gomp_mutex_lock_slow>
    1e58:	b	1de0 <GOMP_loop_ull_ordered_dynamic_next+0x50>
    1e5c:	nop

0000000000001e60 <GOMP_loop_ull_ordered_guided_next>:
    1e60:	stp	x29, x30, [sp, #-48]!
    1e64:	mov	x29, sp
    1e68:	stp	x21, x22, [sp, #32]
    1e6c:	mov	x21, x1
    1e70:	adrp	x22, 0 <gomp_tls_data>
    1e74:	ldr	x22, [x22]
    1e78:	stp	x19, x20, [sp, #16]
    1e7c:	mov	x19, x0
    1e80:	mrs	x20, tpidr_el0
    1e84:	bl	0 <gomp_ordered_sync>
    1e88:	add	x1, x20, x22
    1e8c:	mov	w0, #0x1                   	// #1
    1e90:	ldr	x2, [x1, #24]
    1e94:	add	x2, x2, #0x40
    1e98:	ldaxr	w1, [x2]
    1e9c:	cbnz	w1, 1ea8 <GOMP_loop_ull_ordered_guided_next+0x48>
    1ea0:	stxr	w3, w0, [x2]
    1ea4:	cbnz	w3, 1e98 <GOMP_loop_ull_ordered_guided_next+0x38>
    1ea8:	cmp	w1, #0x0
    1eac:	b.ne	1f20 <GOMP_loop_ull_ordered_guided_next+0xc0>  // b.any
    1eb0:	mov	x0, x19
    1eb4:	mov	x1, x21
    1eb8:	bl	0 <gomp_iter_ull_guided_next_locked>
    1ebc:	mov	w19, w0
    1ec0:	tst	w0, #0xff
    1ec4:	b.eq	1efc <GOMP_loop_ull_ordered_guided_next+0x9c>  // b.none
    1ec8:	bl	0 <gomp_ordered_next>
    1ecc:	add	x20, x20, x22
    1ed0:	ldr	x1, [x20, #24]
    1ed4:	add	x1, x1, #0x40
    1ed8:	ldxr	w0, [x1]
    1edc:	stlxr	w2, wzr, [x1]
    1ee0:	cbnz	w2, 1ed8 <GOMP_loop_ull_ordered_guided_next+0x78>
    1ee4:	tbnz	w0, #31, 1f04 <GOMP_loop_ull_ordered_guided_next+0xa4>
    1ee8:	mov	w0, w19
    1eec:	ldp	x19, x20, [sp, #16]
    1ef0:	ldp	x21, x22, [sp, #32]
    1ef4:	ldp	x29, x30, [sp], #48
    1ef8:	ret
    1efc:	bl	0 <gomp_ordered_last>
    1f00:	b	1ecc <GOMP_loop_ull_ordered_guided_next+0x6c>
    1f04:	mov	x0, x1
    1f08:	bl	0 <gomp_mutex_unlock_slow>
    1f0c:	mov	w0, w19
    1f10:	ldp	x19, x20, [sp, #16]
    1f14:	ldp	x21, x22, [sp, #32]
    1f18:	ldp	x29, x30, [sp], #48
    1f1c:	ret
    1f20:	mov	x0, x2
    1f24:	bl	0 <gomp_mutex_lock_slow>
    1f28:	b	1eb0 <GOMP_loop_ull_ordered_guided_next+0x50>
    1f2c:	nop

0000000000001f30 <GOMP_loop_ull_ordered_runtime_next>:
    1f30:	stp	x29, x30, [sp, #-64]!
    1f34:	mov	x29, sp
    1f38:	stp	x19, x20, [sp, #16]
    1f3c:	mov	x20, x0
    1f40:	adrp	x19, 0 <gomp_tls_data>
    1f44:	ldr	x19, [x19]
    1f48:	stp	x21, x22, [sp, #32]
    1f4c:	mrs	x22, tpidr_el0
    1f50:	mov	x21, x1
    1f54:	str	x23, [sp, #48]
    1f58:	add	x23, x22, x19
    1f5c:	ldr	x0, [x23, #24]
    1f60:	ldr	w2, [x0]
    1f64:	cmp	w2, #0x2
    1f68:	b.eq	206c <GOMP_loop_ull_ordered_runtime_next+0x13c>  // b.none
    1f6c:	b.ls	1fdc <GOMP_loop_ull_ordered_runtime_next+0xac>  // b.plast
    1f70:	cmp	w2, #0x3
    1f74:	b.ne	2060 <GOMP_loop_ull_ordered_runtime_next+0x130>  // b.any
    1f78:	bl	0 <gomp_ordered_sync>
    1f7c:	ldr	x0, [x23, #24]
    1f80:	mov	w2, #0x1                   	// #1
    1f84:	add	x0, x0, #0x40
    1f88:	ldaxr	w1, [x0]
    1f8c:	cbnz	w1, 1f98 <GOMP_loop_ull_ordered_runtime_next+0x68>
    1f90:	stxr	w3, w2, [x0]
    1f94:	cbnz	w3, 1f88 <GOMP_loop_ull_ordered_runtime_next+0x58>
    1f98:	cmp	w1, #0x0
    1f9c:	b.ne	20fc <GOMP_loop_ull_ordered_runtime_next+0x1cc>  // b.any
    1fa0:	mov	x0, x20
    1fa4:	mov	x1, x21
    1fa8:	bl	0 <gomp_iter_ull_guided_next_locked>
    1fac:	ands	w20, w0, #0xff
    1fb0:	b.ne	20d0 <GOMP_loop_ull_ordered_runtime_next+0x1a0>  // b.any
    1fb4:	bl	0 <gomp_ordered_last>
    1fb8:	add	x19, x22, x19
    1fbc:	ldr	x0, [x19, #24]
    1fc0:	add	x0, x0, #0x40
    1fc4:	ldxr	w1, [x0]
    1fc8:	stlxr	w2, wzr, [x0]
    1fcc:	cbnz	w2, 1fc4 <GOMP_loop_ull_ordered_runtime_next+0x94>
    1fd0:	tbz	w1, #31, 2048 <GOMP_loop_ull_ordered_runtime_next+0x118>
    1fd4:	bl	0 <gomp_mutex_unlock_slow>
    1fd8:	b	2048 <GOMP_loop_ull_ordered_runtime_next+0x118>
    1fdc:	cmp	w2, #0x1
    1fe0:	b.ne	2068 <GOMP_loop_ull_ordered_runtime_next+0x138>  // b.any
    1fe4:	bl	0 <gomp_ordered_sync>
    1fe8:	add	x0, x22, x19
    1fec:	mov	w2, #0x1                   	// #1
    1ff0:	ldr	x0, [x0, #24]
    1ff4:	add	x0, x0, #0x40
    1ff8:	ldaxr	w1, [x0]
    1ffc:	cbnz	w1, 2008 <GOMP_loop_ull_ordered_runtime_next+0xd8>
    2000:	stxr	w3, w2, [x0]
    2004:	cbnz	w3, 1ff8 <GOMP_loop_ull_ordered_runtime_next+0xc8>
    2008:	cmp	w1, #0x0
    200c:	b.ne	20ec <GOMP_loop_ull_ordered_runtime_next+0x1bc>  // b.any
    2010:	mov	x0, x20
    2014:	mov	x1, x21
    2018:	bl	0 <gomp_iter_ull_static_next>
    201c:	mov	w20, w0
    2020:	tbz	w0, #31, 20d8 <GOMP_loop_ull_ordered_runtime_next+0x1a8>
    2024:	add	x19, x22, x19
    2028:	ldr	x1, [x19, #24]
    202c:	add	x1, x1, #0x40
    2030:	ldxr	w0, [x1]
    2034:	stlxr	w2, wzr, [x1]
    2038:	cbnz	w2, 2030 <GOMP_loop_ull_ordered_runtime_next+0x100>
    203c:	tbnz	w0, #31, 20e0 <GOMP_loop_ull_ordered_runtime_next+0x1b0>
    2040:	cmp	w20, #0x0
    2044:	cset	w20, eq  // eq = none
    2048:	mov	w0, w20
    204c:	ldp	x19, x20, [sp, #16]
    2050:	ldp	x21, x22, [sp, #32]
    2054:	ldr	x23, [sp, #48]
    2058:	ldp	x29, x30, [sp], #64
    205c:	ret
    2060:	cmp	w2, #0x4
    2064:	b.eq	1fe4 <GOMP_loop_ull_ordered_runtime_next+0xb4>  // b.none
    2068:	bl	0 <abort>
    206c:	bl	0 <gomp_ordered_sync>
    2070:	ldr	x0, [x23, #24]
    2074:	mov	w2, #0x1                   	// #1
    2078:	add	x0, x0, #0x40
    207c:	ldaxr	w1, [x0]
    2080:	cbnz	w1, 208c <GOMP_loop_ull_ordered_runtime_next+0x15c>
    2084:	stxr	w3, w2, [x0]
    2088:	cbnz	w3, 207c <GOMP_loop_ull_ordered_runtime_next+0x14c>
    208c:	cmp	w1, #0x0
    2090:	b.ne	20f4 <GOMP_loop_ull_ordered_runtime_next+0x1c4>  // b.any
    2094:	mov	x0, x20
    2098:	mov	x1, x21
    209c:	bl	0 <gomp_iter_ull_dynamic_next_locked>
    20a0:	ands	w20, w0, #0xff
    20a4:	b.ne	20c8 <GOMP_loop_ull_ordered_runtime_next+0x198>  // b.any
    20a8:	bl	0 <gomp_ordered_last>
    20ac:	add	x19, x22, x19
    20b0:	ldr	x0, [x19, #24]
    20b4:	add	x0, x0, #0x40
    20b8:	ldxr	w1, [x0]
    20bc:	stlxr	w2, wzr, [x0]
    20c0:	cbz	w2, 1fd0 <GOMP_loop_ull_ordered_runtime_next+0xa0>
    20c4:	b	20b8 <GOMP_loop_ull_ordered_runtime_next+0x188>
    20c8:	bl	0 <gomp_ordered_next>
    20cc:	b	20ac <GOMP_loop_ull_ordered_runtime_next+0x17c>
    20d0:	bl	0 <gomp_ordered_next>
    20d4:	b	1fb8 <GOMP_loop_ull_ordered_runtime_next+0x88>
    20d8:	bl	0 <gomp_ordered_static_next>
    20dc:	b	2024 <GOMP_loop_ull_ordered_runtime_next+0xf4>
    20e0:	mov	x0, x1
    20e4:	bl	0 <gomp_mutex_unlock_slow>
    20e8:	b	2040 <GOMP_loop_ull_ordered_runtime_next+0x110>
    20ec:	bl	0 <gomp_mutex_lock_slow>
    20f0:	b	2010 <GOMP_loop_ull_ordered_runtime_next+0xe0>
    20f4:	bl	0 <gomp_mutex_lock_slow>
    20f8:	b	2094 <GOMP_loop_ull_ordered_runtime_next+0x164>
    20fc:	bl	0 <gomp_mutex_lock_slow>
    2100:	b	1fa0 <GOMP_loop_ull_ordered_runtime_next+0x70>

ordered.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_ordered_first>:
       0:	adrp	x1, 0 <gomp_tls_data>
       4:	ldr	x1, [x1]
       8:	mrs	x0, tpidr_el0
       c:	add	x1, x0, x1
      10:	ldr	x3, [x1, #16]
      14:	cbz	x3, 5c <gomp_ordered_first+0x5c>
      18:	ldr	w0, [x3]
      1c:	cmp	w0, #0x1
      20:	b.eq	5c <gomp_ordered_first+0x5c>  // b.none
      24:	ldr	x2, [x1, #24]
      28:	ldr	w4, [x1, #40]
      2c:	ldr	w6, [x2, #40]
      30:	ldr	w1, [x2, #48]
      34:	ldr	x5, [x2, #32]
      38:	add	w1, w1, w6
      3c:	cmp	w0, w1
      40:	sub	w0, w1, w0
      44:	csel	w0, w0, w1, ls  // ls = plast
      48:	str	w4, [x5, x0, lsl #2]
      4c:	ldr	w0, [x2, #40]
      50:	add	w1, w0, #0x1
      54:	str	w1, [x2, #40]
      58:	cbz	w0, 60 <gomp_ordered_first+0x60>
      5c:	ret
      60:	ldr	x0, [x3, #80]
      64:	ldr	x0, [x0, w4, uxtw #3]
      68:	ldr	w1, [x0]
      6c:	add	w2, w1, #0x1
      70:	and	w2, w2, #0x7fffffff
      74:	ldxr	w3, [x0]
      78:	cmp	w3, w1
      7c:	b.ne	88 <gomp_ordered_first+0x88>  // b.any
      80:	stlxr	w4, w2, [x0]
      84:	cmp	w4, #0x0
      88:	mov	w1, w3
      8c:	b.ne	6c <gomp_ordered_first+0x6c>  // b.any
      90:	tbz	w3, #31, 5c <gomp_ordered_first+0x5c>
      94:	b	0 <gomp_sem_post_slow>

0000000000000098 <gomp_ordered_last>:
      98:	adrp	x0, 0 <gomp_tls_data>
      9c:	ldr	x0, [x0]
      a0:	mrs	x1, tpidr_el0
      a4:	add	x0, x1, x0
      a8:	ldr	x2, [x0, #16]
      ac:	cbz	x2, 128 <gomp_ordered_last+0x90>
      b0:	ldr	w3, [x2]
      b4:	cmp	w3, #0x1
      b8:	b.eq	128 <gomp_ordered_last+0x90>  // b.none
      bc:	ldr	x0, [x0, #24]
      c0:	mov	w4, #0xffffffff            	// #-1
      c4:	ldr	w1, [x0, #40]
      c8:	add	w1, w1, w4
      cc:	stp	w1, w4, [x0, #40]
      d0:	cbz	w1, 128 <gomp_ordered_last+0x90>
      d4:	ldr	w1, [x0, #48]
      d8:	add	w1, w1, #0x1
      dc:	cmp	w3, w1
      e0:	b.eq	12c <gomp_ordered_last+0x94>  // b.none
      e4:	ubfiz	x3, x1, #2, #32
      e8:	ldr	x4, [x0, #32]
      ec:	str	w1, [x0, #48]
      f0:	ldr	x0, [x2, #80]
      f4:	ldr	w1, [x4, x3]
      f8:	ldr	x0, [x0, x1, lsl #3]
      fc:	ldr	w1, [x0]
     100:	add	w2, w1, #0x1
     104:	and	w2, w2, #0x7fffffff
     108:	ldxr	w3, [x0]
     10c:	cmp	w3, w1
     110:	b.ne	11c <gomp_ordered_last+0x84>  // b.any
     114:	stlxr	w4, w2, [x0]
     118:	cmp	w4, #0x0
     11c:	mov	w1, w3
     120:	b.ne	100 <gomp_ordered_last+0x68>  // b.any
     124:	tbnz	w3, #31, 138 <gomp_ordered_last+0xa0>
     128:	ret
     12c:	mov	x3, #0x0                   	// #0
     130:	mov	w1, #0x0                   	// #0
     134:	b	e8 <gomp_ordered_last+0x50>
     138:	b	0 <gomp_sem_post_slow>
     13c:	nop

0000000000000140 <gomp_ordered_next>:
     140:	adrp	x0, 0 <gomp_tls_data>
     144:	ldr	x0, [x0]
     148:	mrs	x1, tpidr_el0
     14c:	add	x0, x1, x0
     150:	ldr	x4, [x0, #16]
     154:	cbz	x4, 1f8 <gomp_ordered_next+0xb8>
     158:	ldr	w1, [x4]
     15c:	cmp	w1, #0x1
     160:	b.eq	1f8 <gomp_ordered_next+0xb8>  // b.none
     164:	ldr	x3, [x0, #24]
     168:	mov	w2, #0xffffffff            	// #-1
     16c:	ldr	x7, [x4, #80]
     170:	ldr	w5, [x3, #40]
     174:	str	w2, [x3, #44]
     178:	cmp	w5, #0x1
     17c:	b.eq	208 <gomp_ordered_next+0xc8>  // b.none
     180:	ldr	w2, [x3, #48]
     184:	cmp	w1, w5
     188:	ldr	x6, [x3, #32]
     18c:	b.ls	1b0 <gomp_ordered_next+0x70>  // b.plast
     190:	add	w2, w5, w2
     194:	ldr	w0, [x0, #40]
     198:	cmp	w1, w2
     19c:	sub	w1, w2, w1
     1a0:	csel	w1, w1, w2, ls  // ls = plast
     1a4:	str	w0, [x6, x1, lsl #2]
     1a8:	ldr	w2, [x3, #48]
     1ac:	ldr	w1, [x4]
     1b0:	add	w0, w2, #0x1
     1b4:	cmp	w1, w0
     1b8:	b.eq	1fc <gomp_ordered_next+0xbc>  // b.none
     1bc:	add	x6, x6, w0, uxtw #2
     1c0:	str	w0, [x3, #48]
     1c4:	ldr	w0, [x6]
     1c8:	ldr	x0, [x7, x0, lsl #3]
     1cc:	ldr	w1, [x0]
     1d0:	add	w2, w1, #0x1
     1d4:	and	w2, w2, #0x7fffffff
     1d8:	ldxr	w3, [x0]
     1dc:	cmp	w3, w1
     1e0:	b.ne	1ec <gomp_ordered_next+0xac>  // b.any
     1e4:	stlxr	w4, w2, [x0]
     1e8:	cmp	w4, #0x0
     1ec:	mov	w1, w3
     1f0:	b.ne	1d0 <gomp_ordered_next+0x90>  // b.any
     1f4:	tbnz	w1, #31, 204 <gomp_ordered_next+0xc4>
     1f8:	ret
     1fc:	mov	w0, #0x0                   	// #0
     200:	b	1c0 <gomp_ordered_next+0x80>
     204:	b	0 <gomp_sem_post_slow>
     208:	ldr	w0, [x0, #40]
     20c:	ldr	x0, [x7, x0, lsl #3]
     210:	ldr	w1, [x0]
     214:	add	w2, w1, #0x1
     218:	and	w2, w2, #0x7fffffff
     21c:	ldxr	w3, [x0]
     220:	cmp	w3, w1
     224:	b.ne	230 <gomp_ordered_next+0xf0>  // b.any
     228:	stlxr	w4, w2, [x0]
     22c:	cmp	w4, #0x0
     230:	mov	w1, w3
     234:	b.ne	214 <gomp_ordered_next+0xd4>  // b.any
     238:	tbz	w1, #31, 1f8 <gomp_ordered_next+0xb8>
     23c:	b	204 <gomp_ordered_next+0xc4>

0000000000000240 <gomp_ordered_static_init>:
     240:	adrp	x0, 0 <gomp_tls_data>
     244:	ldr	x0, [x0]
     248:	mrs	x1, tpidr_el0
     24c:	add	x0, x1, x0
     250:	ldr	x0, [x0, #16]
     254:	cbz	x0, 298 <gomp_ordered_static_init+0x58>
     258:	ldr	w1, [x0]
     25c:	cmp	w1, #0x1
     260:	b.eq	298 <gomp_ordered_static_init+0x58>  // b.none
     264:	ldr	x0, [x0, #80]
     268:	ldr	x0, [x0]
     26c:	ldr	w1, [x0]
     270:	add	w2, w1, #0x1
     274:	and	w2, w2, #0x7fffffff
     278:	ldxr	w3, [x0]
     27c:	cmp	w3, w1
     280:	b.ne	28c <gomp_ordered_static_init+0x4c>  // b.any
     284:	stlxr	w4, w2, [x0]
     288:	cmp	w4, #0x0
     28c:	mov	w1, w3
     290:	b.ne	270 <gomp_ordered_static_init+0x30>  // b.any
     294:	tbnz	w3, #31, 29c <gomp_ordered_static_init+0x5c>
     298:	ret
     29c:	b	0 <gomp_sem_post_slow>

00000000000002a0 <gomp_ordered_static_next>:
     2a0:	adrp	x0, 0 <gomp_tls_data>
     2a4:	ldr	x0, [x0]
     2a8:	mrs	x1, tpidr_el0
     2ac:	add	x0, x1, x0
     2b0:	ldr	x2, [x0, #16]
     2b4:	cbz	x2, 320 <gomp_ordered_static_next+0x80>
     2b8:	ldr	w3, [x2]
     2bc:	cmp	w3, #0x1
     2c0:	b.eq	320 <gomp_ordered_static_next+0x80>  // b.none
     2c4:	ldr	x4, [x0, #24]
     2c8:	mov	w5, #0xffffffff            	// #-1
     2cc:	ldr	w1, [x0, #40]
     2d0:	str	w5, [x4, #44]
     2d4:	add	w1, w1, #0x1
     2d8:	cmp	w3, w1
     2dc:	b.eq	324 <gomp_ordered_static_next+0x84>  // b.none
     2e0:	ubfiz	x0, x1, #3, #32
     2e4:	ldr	x3, [x2, #80]
     2e8:	ldr	x2, [x4, #32]
     2ec:	ldr	x0, [x3, x0]
     2f0:	str	w1, [x2]
     2f4:	ldr	w1, [x0]
     2f8:	add	w2, w1, #0x1
     2fc:	and	w2, w2, #0x7fffffff
     300:	ldxr	w3, [x0]
     304:	cmp	w3, w1
     308:	b.ne	314 <gomp_ordered_static_next+0x74>  // b.any
     30c:	stlxr	w4, w2, [x0]
     310:	cmp	w4, #0x0
     314:	mov	w1, w3
     318:	b.ne	2f8 <gomp_ordered_static_next+0x58>  // b.any
     31c:	tbnz	w3, #31, 330 <gomp_ordered_static_next+0x90>
     320:	ret
     324:	mov	x0, #0x0                   	// #0
     328:	mov	w1, #0x0                   	// #0
     32c:	b	2e4 <gomp_ordered_static_next+0x44>
     330:	b	0 <gomp_sem_post_slow>
     334:	nop

0000000000000338 <GOMP_ordered_start>:
     338:	stp	x29, x30, [sp, #-48]!
     33c:	mov	x29, sp
     340:	stp	x19, x20, [sp, #16]
     344:	mrs	x19, tpidr_el0
     348:	adrp	x20, 0 <gomp_tls_data>
     34c:	ldr	x20, [x20]
     350:	add	x1, x19, x20
     354:	ldr	x0, [x1, #16]
     358:	cbz	x0, 388 <GOMP_ordered_start+0x50>
     35c:	ldr	w2, [x0]
     360:	cmp	w2, #0x1
     364:	b.eq	388 <GOMP_ordered_start+0x50>  // b.none
     368:	str	x21, [sp, #32]
     36c:	ldr	x21, [x1, #24]
     370:	dmb	ish
     374:	ldr	w1, [x1, #40]
     378:	ldr	w2, [x21, #44]
     37c:	cmp	w2, w1
     380:	b.ne	394 <GOMP_ordered_start+0x5c>  // b.any
     384:	ldr	x21, [sp, #32]
     388:	ldp	x19, x20, [sp, #16]
     38c:	ldp	x29, x30, [sp], #48
     390:	ret
     394:	ldr	x0, [x0, #80]
     398:	ldr	x0, [x0, w1, uxtw #3]
     39c:	ldr	w1, [x0]
     3a0:	tst	x1, #0x7fffffff
     3a4:	b.eq	3e4 <GOMP_ordered_start+0xac>  // b.none
     3a8:	sub	w3, w1, #0x1
     3ac:	ldaxr	w2, [x0]
     3b0:	cmp	w2, w1
     3b4:	b.ne	3c0 <GOMP_ordered_start+0x88>  // b.any
     3b8:	stxr	w4, w3, [x0]
     3bc:	cmp	w4, #0x0
     3c0:	mov	w1, w2
     3c4:	b.ne	3a0 <GOMP_ordered_start+0x68>  // b.any
     3c8:	add	x19, x19, x20
     3cc:	ldr	w0, [x19, #40]
     3d0:	str	w0, [x21, #44]
     3d4:	ldp	x19, x20, [sp, #16]
     3d8:	ldr	x21, [sp, #32]
     3dc:	ldp	x29, x30, [sp], #48
     3e0:	ret
     3e4:	bl	0 <gomp_sem_wait_slow>
     3e8:	b	3c8 <GOMP_ordered_start+0x90>
     3ec:	nop

00000000000003f0 <GOMP_ordered_end>:
     3f0:	ret
     3f4:	nop

00000000000003f8 <gomp_doacross_init>:
     3f8:	adrp	x4, 0 <gomp_tls_data>
     3fc:	ldr	x4, [x4]
     400:	mrs	x5, tpidr_el0
     404:	stp	x29, x30, [sp, #-368]!
     408:	add	x4, x5, x4
     40c:	mov	x29, sp
     410:	stp	x21, x22, [sp, #32]
     414:	stp	x23, x24, [sp, #48]
     418:	mov	x23, x1
     41c:	ldp	x1, x22, [x4, #16]
     420:	stp	x25, x26, [sp, #64]
     424:	mov	x26, x3
     428:	cbz	x1, 5c0 <gomp_doacross_init+0x1c8>
     42c:	ldr	w24, [x1]
     430:	cmp	w24, #0x1
     434:	b.eq	5c0 <gomp_doacross_init+0x1c8>  // b.none
     438:	stp	x19, x20, [sp, #16]
     43c:	mov	x21, x2
     440:	mov	w20, w0
     444:	mov	x5, #0x0                   	// #0
     448:	add	x0, x3, #0x77
     44c:	mov	w19, #0x0                   	// #0
     450:	cbz	w20, 6d4 <gomp_doacross_init+0x2dc>
     454:	add	x7, sp, #0x70
     458:	mov	w2, #0x1                   	// #1
     45c:	mov	w1, #0x40                  	// #64
     460:	b	488 <gomp_doacross_init+0x90>
     464:	add	x5, x5, #0x1
     468:	mov	w19, #0x41                  	// #65
     46c:	cmp	w20, w5
     470:	b.ls	6a8 <gomp_doacross_init+0x2b0>  // b.plast
     474:	ldr	x3, [x23, x5, lsl #3]
     478:	cbz	x3, 5bc <gomp_doacross_init+0x1c4>
     47c:	add	x5, x5, #0x1
     480:	cmp	w20, w5
     484:	b.ls	4c8 <gomp_doacross_init+0xd0>  // b.plast
     488:	ldr	x6, [x23, x5, lsl #3]
     48c:	cmp	w19, #0x40
     490:	sub	x4, x6, #0x1
     494:	clz	x4, x4
     498:	cbz	x6, 5bc <gomp_doacross_init+0x1c4>
     49c:	sub	w4, w1, w4
     4a0:	b.hi	47c <gomp_doacross_init+0x84>  // b.pmore
     4a4:	cmp	x6, #0x1
     4a8:	csel	w4, w4, w2, ne  // ne = any
     4ac:	add	w19, w19, w4
     4b0:	cmp	w19, #0x40
     4b4:	b.hi	464 <gomp_doacross_init+0x6c>  // b.pmore
     4b8:	str	w4, [x7, x5, lsl #2]
     4bc:	add	x5, x5, #0x1
     4c0:	cmp	w20, w5
     4c4:	b.hi	488 <gomp_doacross_init+0x90>  // b.pmore
     4c8:	stp	x27, x28, [sp, #80]
     4cc:	ldr	w1, [x22]
     4d0:	mov	w24, w24
     4d4:	cmp	w1, #0x1
     4d8:	b.eq	4f4 <gomp_doacross_init+0xfc>  // b.none
     4dc:	cmp	w1, #0x3
     4e0:	ldr	x24, [x23]
     4e4:	b.eq	4f4 <gomp_doacross_init+0xfc>  // b.none
     4e8:	sub	x24, x24, #0x1
     4ec:	sdiv	x24, x24, x21
     4f0:	add	x24, x24, #0x1
     4f4:	cmp	w19, #0x40
     4f8:	b.ls	604 <gomp_doacross_init+0x20c>  // b.plast
     4fc:	mov	x27, #0x3f                  	// #63
     500:	mov	x1, #0x77                  	// #119
     504:	add	x27, x27, w20, uxtw #3
     508:	str	x1, [sp, #104]
     50c:	and	x27, x27, #0xffffffffffffffc0
     510:	mov	x1, #0x0                   	// #0
     514:	mul	x28, x24, x27
     518:	add	x1, x28, x1
     51c:	add	x0, x1, x0
     520:	bl	0 <gomp_malloc>
     524:	mov	x25, x0
     528:	strb	wzr, [x0, #20]
     52c:	ldr	x0, [sp, #104]
     530:	stp	x21, x27, [x25]
     534:	add	x0, x25, x0
     538:	str	w20, [x25, #16]
     53c:	and	x0, x0, #0xffffffffffffffc0
     540:	str	x0, [x25, #24]
     544:	cbnz	x26, 690 <gomp_doacross_init+0x298>
     548:	str	xzr, [x25, #48]
     54c:	cmp	w19, #0x40
     550:	b.ls	618 <gomp_doacross_init+0x220>  // b.plast
     554:	ubfiz	x26, x20, #3, #32
     558:	mov	x19, #0x0                   	// #0
     55c:	mov	x20, #0x0                   	// #0
     560:	cbz	x24, 58c <gomp_doacross_init+0x194>
     564:	nop
     568:	ldr	x0, [x25, #24]
     56c:	add	x19, x19, #0x1
     570:	mov	x2, x26
     574:	mov	w1, #0x0                   	// #0
     578:	add	x0, x0, x20
     57c:	bl	0 <memset>
     580:	add	x20, x20, x27
     584:	cmp	x24, x19
     588:	b.ne	568 <gomp_doacross_init+0x170>  // b.any
     58c:	ldr	w0, [x22]
     590:	cmp	x21, #0x0
     594:	ccmp	w0, #0x1, #0x0, eq  // eq = none
     598:	b.eq	6b4 <gomp_doacross_init+0x2bc>  // b.none
     59c:	ldp	x19, x20, [sp, #16]
     5a0:	ldp	x27, x28, [sp, #80]
     5a4:	str	x25, [x22, #32]
     5a8:	ldp	x21, x22, [sp, #32]
     5ac:	ldp	x23, x24, [sp, #48]
     5b0:	ldp	x25, x26, [sp, #64]
     5b4:	ldp	x29, x30, [sp], #368
     5b8:	ret
     5bc:	ldp	x19, x20, [sp, #16]
     5c0:	cbnz	x26, 5dc <gomp_doacross_init+0x1e4>
     5c4:	str	xzr, [x22, #32]
     5c8:	ldp	x21, x22, [sp, #32]
     5cc:	ldp	x23, x24, [sp, #48]
     5d0:	ldp	x25, x26, [sp, #64]
     5d4:	ldp	x29, x30, [sp], #368
     5d8:	ret
     5dc:	add	x0, x26, #0x38
     5e0:	bl	0 <gomp_malloc_cleared>
     5e4:	add	x1, x0, #0x38
     5e8:	str	x1, [x0, #48]
     5ec:	str	x0, [x22, #32]
     5f0:	ldp	x21, x22, [sp, #32]
     5f4:	ldp	x23, x24, [sp, #48]
     5f8:	ldp	x25, x26, [sp, #64]
     5fc:	ldp	x29, x30, [sp], #368
     600:	ret
     604:	ubfiz	x1, x20, #2, #32
     608:	mov	x27, #0x40                  	// #64
     60c:	add	x2, x1, #0x77
     610:	str	x2, [sp, #104]
     614:	b	514 <gomp_doacross_init+0x11c>
     618:	mov	w0, #0x1                   	// #1
     61c:	strb	w0, [x25, #20]
     620:	cbz	w20, 668 <gomp_doacross_init+0x270>
     624:	sub	w2, w20, #0x1
     628:	add	x0, sp, #0x70
     62c:	mvn	x5, x2
     630:	mov	x1, #0x0                   	// #0
     634:	lsl	x2, x2, #2
     638:	mov	w3, #0x0                   	// #0
     63c:	add	x4, x2, #0x38
     640:	lsl	x5, x5, #2
     644:	add	x4, x25, x4
     648:	add	x2, x0, x2
     64c:	nop
     650:	ldr	w0, [x2, x1]
     654:	str	w3, [x4, x1]
     658:	sub	x1, x1, #0x4
     65c:	cmp	x5, x1
     660:	add	w3, w3, w0
     664:	b.ne	650 <gomp_doacross_init+0x258>  // b.any
     668:	cbz	x24, 58c <gomp_doacross_init+0x194>
     66c:	ldr	x2, [x25, #24]
     670:	mov	x1, #0x0                   	// #0
     674:	nop
     678:	str	xzr, [x2]
     67c:	add	x1, x1, #0x1
     680:	cmp	x24, x1
     684:	add	x2, x2, x27
     688:	b.ne	678 <gomp_doacross_init+0x280>  // b.any
     68c:	b	58c <gomp_doacross_init+0x194>
     690:	add	x0, x0, x28
     694:	mov	x2, x26
     698:	mov	w1, #0x0                   	// #0
     69c:	str	x0, [x25, #48]
     6a0:	bl	0 <memset>
     6a4:	b	54c <gomp_doacross_init+0x154>
     6a8:	mov	w19, #0x41                  	// #65
     6ac:	stp	x27, x28, [sp, #80]
     6b0:	b	4cc <gomp_doacross_init+0xd4>
     6b4:	ldr	x1, [x23]
     6b8:	udiv	x0, x1, x24
     6bc:	msub	x24, x0, x24, x1
     6c0:	str	x0, [x25]
     6c4:	madd	x0, x0, x24, x24
     6c8:	str	x24, [x25, #32]
     6cc:	str	x0, [x25, #40]
     6d0:	b	59c <gomp_doacross_init+0x1a4>
     6d4:	mov	w19, w20
     6d8:	stp	x27, x28, [sp, #80]
     6dc:	b	4cc <gomp_doacross_init+0xd4>

00000000000006e0 <GOMP_doacross_post>:
     6e0:	sub	sp, sp, #0x10
     6e4:	adrp	x2, 0 <gomp_tls_data>
     6e8:	ldr	x2, [x2]
     6ec:	mrs	x1, tpidr_el0
     6f0:	str	x0, [sp, #8]
     6f4:	add	x0, x1, x2
     6f8:	ldr	x5, [sp, #8]
     6fc:	ldr	x1, [x0, #24]
     700:	ldr	x2, [x1, #32]
     704:	cbz	x2, 83c <GOMP_doacross_post+0x15c>
     708:	ldr	x3, [x2, #24]
     70c:	cbz	x3, 83c <GOMP_doacross_post+0x15c>
     710:	ldr	w1, [x1]
     714:	cmp	w1, #0x1
     718:	b.ne	88c <GOMP_doacross_post+0x1ac>  // b.any
     71c:	ldr	w6, [x0, #40]
     720:	ldrb	w0, [x2, #20]
     724:	ldr	x1, [x2, #8]
     728:	madd	x6, x6, x1, x3
     72c:	cbz	w0, 848 <GOMP_doacross_post+0x168>
     730:	ldr	x3, [x5]
     734:	ldr	w0, [x2, #56]
     738:	ldr	w7, [x2, #16]
     73c:	lsl	x3, x3, x0
     740:	cmp	w7, #0x1
     744:	b.ls	814 <GOMP_doacross_post+0x134>  // b.plast
     748:	sub	w0, w7, #0x2
     74c:	sub	w8, w7, #0x1
     750:	cmp	w0, #0x2
     754:	b.ls	8a4 <GOMP_doacross_post+0x1c4>  // b.plast
     758:	lsr	w4, w8, #2
     75c:	add	x1, x2, #0x3c
     760:	movi	v3.4s, #0x0
     764:	add	x0, x5, #0x8
     768:	add	x4, x1, w4, uxtw #4
     76c:	nop
     770:	ldr	q1, [x1], #16
     774:	ldp	q0, q2, [x0]
     778:	add	x0, x0, #0x20
     77c:	uxtl	v4.2d, v1.2s
     780:	cmp	x1, x4
     784:	uxtl2	v1.2d, v1.4s
     788:	sshl	v0.2d, v0.2d, v4.2d
     78c:	sshl	v1.2d, v2.2d, v1.2d
     790:	orr	v0.16b, v0.16b, v1.16b
     794:	orr	v3.16b, v3.16b, v0.16b
     798:	b.ne	770 <GOMP_doacross_post+0x90>  // b.any
     79c:	movi	v0.4s, #0x0
     7a0:	and	w1, w8, #0xfffffffc
     7a4:	cmp	w1, w8
     7a8:	add	w1, w1, #0x1
     7ac:	ext	v0.16b, v3.16b, v0.16b, #8
     7b0:	orr	v3.16b, v3.16b, v0.16b
     7b4:	mov	x0, v3.d[0]
     7b8:	orr	x3, x3, x0
     7bc:	b.eq	814 <GOMP_doacross_post+0x134>  // b.none
     7c0:	add	x4, x2, w1, uxtw #2
     7c4:	add	w8, w1, #0x1
     7c8:	ldr	x0, [x5, w1, uxtw #3]
     7cc:	cmp	w7, w8
     7d0:	ldr	w4, [x4, #56]
     7d4:	lsl	x0, x0, x4
     7d8:	orr	x3, x3, x0
     7dc:	b.ls	814 <GOMP_doacross_post+0x134>  // b.plast
     7e0:	add	x4, x2, w8, uxtw #2
     7e4:	add	w1, w1, #0x2
     7e8:	ldr	x0, [x5, w8, uxtw #3]
     7ec:	cmp	w7, w1
     7f0:	ldr	w4, [x4, #56]
     7f4:	lsl	x0, x0, x4
     7f8:	orr	x3, x3, x0
     7fc:	b.ls	814 <GOMP_doacross_post+0x134>  // b.plast
     800:	add	x2, x2, w1, uxtw #2
     804:	ldr	x0, [x5, w1, uxtw #3]
     808:	ldr	w1, [x2, #56]
     80c:	lsl	x0, x0, x1
     810:	orr	x3, x3, x0
     814:	add	x3, x3, #0x1
     818:	ldar	x0, [x6]
     81c:	cmp	x0, x3
     820:	b.eq	830 <GOMP_doacross_post+0x150>  // b.none
     824:	stlr	x3, [x6]
     828:	add	sp, sp, #0x10
     82c:	ret
     830:	dmb	ish
     834:	add	sp, sp, #0x10
     838:	ret
     83c:	dmb	ish
     840:	add	sp, sp, #0x10
     844:	ret
     848:	dmb	ishld
     84c:	ldr	w1, [x2, #16]
     850:	sub	w0, w1, #0x1
     854:	lsl	x0, x0, #3
     858:	cbz	w1, 828 <GOMP_doacross_post+0x148>
     85c:	nop
     860:	ldr	x1, [x5, x0]
     864:	add	x2, x6, x0
     868:	add	x1, x1, #0x1
     86c:	ldr	x3, [x2]
     870:	cmp	x1, x3
     874:	b.eq	87c <GOMP_doacross_post+0x19c>  // b.none
     878:	stlr	x1, [x2]
     87c:	sub	x0, x0, #0x8
     880:	cmn	x0, #0x8
     884:	b.ne	860 <GOMP_doacross_post+0x180>  // b.any
     888:	b	828 <GOMP_doacross_post+0x148>
     88c:	cmp	w1, #0x3
     890:	ldr	x6, [x5]
     894:	b.eq	720 <GOMP_doacross_post+0x40>  // b.none
     898:	ldr	x0, [x2]
     89c:	sdiv	x6, x6, x0
     8a0:	b	720 <GOMP_doacross_post+0x40>
     8a4:	mov	w1, #0x1                   	// #1
     8a8:	b	7c0 <GOMP_doacross_post+0xe0>
     8ac:	nop

00000000000008b0 <GOMP_doacross_wait>:
     8b0:	sub	sp, sp, #0x60
     8b4:	adrp	x9, 0 <gomp_tls_data>
     8b8:	ldr	x9, [x9]
     8bc:	mrs	x8, tpidr_el0
     8c0:	stp	x1, x2, [sp, #40]
     8c4:	add	x1, x8, x9
     8c8:	stp	x3, x4, [sp, #56]
     8cc:	ldr	x3, [x1, #24]
     8d0:	stp	x5, x6, [sp, #72]
     8d4:	str	x7, [sp, #88]
     8d8:	ldr	x2, [x3, #32]
     8dc:	cbz	x2, ad0 <GOMP_doacross_wait+0x220>
     8e0:	ldr	x5, [x2, #24]
     8e4:	cbz	x5, ad0 <GOMP_doacross_wait+0x220>
     8e8:	ldr	w4, [x3]
     8ec:	cmp	w4, #0x1
     8f0:	b.ne	af0 <GOMP_doacross_wait+0x240>  // b.any
     8f4:	ldr	x3, [x3, #8]
     8f8:	cbz	x3, aa8 <GOMP_doacross_wait+0x1f8>
     8fc:	ldr	x1, [x1, #16]
     900:	sdiv	x3, x0, x3
     904:	ldr	w1, [x1]
     908:	sdiv	x4, x3, x1
     90c:	msub	x4, x4, x1, x3
     910:	ldrb	w7, [x2, #20]
     914:	add	x10, sp, #0x20
     918:	ldr	x1, [x2, #8]
     91c:	mov	w9, #0xffffffc8            	// #-56
     920:	madd	x4, x4, x1, x5
     924:	add	x1, x0, #0x1
     928:	cbz	w7, a1c <GOMP_doacross_wait+0x16c>
     92c:	ldr	w1, [x2, #56]
     930:	add	x5, sp, #0x20
     934:	ldr	w8, [x2, #16]
     938:	add	x6, sp, #0x60
     93c:	mov	w3, #0xffffffc8            	// #-56
     940:	stp	x6, x6, [sp]
     944:	cmp	w8, #0x1
     948:	str	x5, [sp, #16]
     94c:	lsl	x0, x0, x1
     950:	stp	w3, wzr, [sp, #24]
     954:	b.ls	9e8 <GOMP_doacross_wait+0x138>  // b.plast
     958:	sub	w8, w8, #0x2
     95c:	add	x5, x2, #0x40
     960:	add	x1, x2, #0x3c
     964:	mov	w9, #0x0                   	// #0
     968:	add	x8, x5, w8, uxtw #2
     96c:	mov	w10, #0x0                   	// #0
     970:	mov	x5, x6
     974:	b	99c <GOMP_doacross_wait+0xec>
     978:	mov	x2, x5
     97c:	ldr	w6, [x1], #4
     980:	mov	w9, w7
     984:	add	x5, x5, #0x8
     988:	cmp	x8, x1
     98c:	ldr	x2, [x2]
     990:	lsl	x2, x2, x6
     994:	orr	x0, x0, x2
     998:	b.eq	9d8 <GOMP_doacross_wait+0x128>  // b.none
     99c:	add	w6, w3, #0x8
     9a0:	tbz	w3, #31, 978 <GOMP_doacross_wait+0xc8>
     9a4:	add	x2, sp, #0x60
     9a8:	mov	w10, w7
     9ac:	add	x2, x2, w3, sxtw
     9b0:	cmp	w6, #0x0
     9b4:	mov	w3, w6
     9b8:	b.gt	978 <GOMP_doacross_wait+0xc8>
     9bc:	ldr	x2, [x2]
     9c0:	ldr	w6, [x1], #4
     9c4:	cmp	x8, x1
     9c8:	lsl	x2, x2, x6
     9cc:	orr	x0, x0, x2
     9d0:	b.ne	99c <GOMP_doacross_wait+0xec>  // b.any
     9d4:	nop
     9d8:	cbz	w10, 9e0 <GOMP_doacross_wait+0x130>
     9dc:	str	w3, [sp, #24]
     9e0:	cbz	w9, 9e8 <GOMP_doacross_wait+0x138>
     9e4:	str	x5, [sp]
     9e8:	ldar	x1, [x4]
     9ec:	cmp	x1, x0
     9f0:	b.hi	a04 <GOMP_doacross_wait+0x154>  // b.pmore
     9f4:	nop
     9f8:	ldr	x1, [x4]
     9fc:	cmp	x1, x0
     a00:	b.ls	9f8 <GOMP_doacross_wait+0x148>  // b.plast
     a04:	dmb	ish
     a08:	add	sp, sp, #0x60
     a0c:	ret
     a10:	mov	w0, w6
     a14:	cmp	w6, w0
     a18:	b.eq	ad0 <GOMP_doacross_wait+0x220>  // b.none
     a1c:	ldr	w6, [x2, #16]
     a20:	add	x0, sp, #0x60
     a24:	stp	x0, x0, [sp]
     a28:	mov	w0, w6
     a2c:	str	x10, [sp, #16]
     a30:	stp	w9, wzr, [sp, #24]
     a34:	cbz	w6, a14 <GOMP_doacross_wait+0x164>
     a38:	mov	w0, #0x0                   	// #0
     a3c:	b	a70 <GOMP_doacross_wait+0x1c0>
     a40:	and	x7, x7, #0xfffffffffffffff8
     a44:	str	x7, [sp]
     a48:	ldr	x3, [x3]
     a4c:	add	x3, x3, #0x1
     a50:	add	x5, x4, w0, uxtw #3
     a54:	ldr	x5, [x5]
     a58:	cmp	x3, x5
     a5c:	b.cc	a10 <GOMP_doacross_wait+0x160>  // b.lo, b.ul, b.last
     a60:	b.hi	a14 <GOMP_doacross_wait+0x164>  // b.pmore
     a64:	add	w0, w0, #0x1
     a68:	cmp	w6, w0
     a6c:	b.ls	a14 <GOMP_doacross_wait+0x164>  // b.plast
     a70:	mov	x3, x1
     a74:	cbz	w0, a50 <GOMP_doacross_wait+0x1a0>
     a78:	ldr	w5, [sp, #24]
     a7c:	ldr	x3, [sp]
     a80:	add	w8, w5, #0x8
     a84:	add	x7, x3, #0xf
     a88:	tbz	w5, #31, a40 <GOMP_doacross_wait+0x190>
     a8c:	str	w8, [sp, #24]
     a90:	add	x7, x3, #0xf
     a94:	cmp	w8, #0x0
     a98:	and	x7, x7, #0xfffffffffffffff8
     a9c:	b.le	ac4 <GOMP_doacross_wait+0x214>
     aa0:	str	x7, [sp]
     aa4:	b	a48 <GOMP_doacross_wait+0x198>
     aa8:	ldr	x1, [x2, #40]
     aac:	ldr	x4, [x2]
     ab0:	cmp	x1, x0
     ab4:	b.le	adc <GOMP_doacross_wait+0x22c>
     ab8:	add	x4, x4, #0x1
     abc:	sdiv	x4, x0, x4
     ac0:	b	910 <GOMP_doacross_wait+0x60>
     ac4:	ldr	x3, [sp, #8]
     ac8:	add	x3, x3, w5, sxtw
     acc:	b	a48 <GOMP_doacross_wait+0x198>
     ad0:	dmb	ish
     ad4:	add	sp, sp, #0x60
     ad8:	ret
     adc:	sub	x1, x0, x1
     ae0:	ldr	x3, [x2, #32]
     ae4:	sdiv	x4, x1, x4
     ae8:	add	x4, x4, x3
     aec:	b	910 <GOMP_doacross_wait+0x60>
     af0:	cmp	w4, #0x3
     af4:	b.eq	b04 <GOMP_doacross_wait+0x254>  // b.none
     af8:	ldr	x1, [x2]
     afc:	sdiv	x4, x0, x1
     b00:	b	910 <GOMP_doacross_wait+0x60>
     b04:	mov	x4, x0
     b08:	b	910 <GOMP_doacross_wait+0x60>
     b0c:	nop

0000000000000b10 <gomp_doacross_ull_init>:
     b10:	adrp	x4, 0 <gomp_tls_data>
     b14:	ldr	x4, [x4]
     b18:	mrs	x5, tpidr_el0
     b1c:	stp	x29, x30, [sp, #-368]!
     b20:	add	x4, x5, x4
     b24:	mov	x29, sp
     b28:	stp	x19, x20, [sp, #16]
     b2c:	mov	w20, w0
     b30:	stp	x21, x22, [sp, #32]
     b34:	ldp	x0, x22, [x4, #16]
     b38:	stp	x25, x26, [sp, #64]
     b3c:	mov	x26, x3
     b40:	cbz	x0, cd0 <gomp_doacross_ull_init+0x1c0>
     b44:	stp	x23, x24, [sp, #48]
     b48:	ldr	w24, [x0]
     b4c:	cmp	w24, #0x1
     b50:	b.eq	ccc <gomp_doacross_ull_init+0x1bc>  // b.none
     b54:	mov	x23, x1
     b58:	mov	x21, x2
     b5c:	mov	x5, #0x0                   	// #0
     b60:	mov	w19, #0x0                   	// #0
     b64:	cbz	w20, ddc <gomp_doacross_ull_init+0x2cc>
     b68:	add	x3, sp, #0x70
     b6c:	mov	w1, #0x1                   	// #1
     b70:	mov	w0, #0x40                  	// #64
     b74:	b	b9c <gomp_doacross_ull_init+0x8c>
     b78:	add	x5, x5, #0x1
     b7c:	mov	w19, #0x41                  	// #65
     b80:	cmp	w20, w5
     b84:	b.ls	db0 <gomp_doacross_ull_init+0x2a0>  // b.plast
     b88:	ldr	x2, [x23, x5, lsl #3]
     b8c:	cbz	x2, ccc <gomp_doacross_ull_init+0x1bc>
     b90:	add	x5, x5, #0x1
     b94:	cmp	w20, w5
     b98:	b.ls	bdc <gomp_doacross_ull_init+0xcc>  // b.plast
     b9c:	ldr	x6, [x23, x5, lsl #3]
     ba0:	cmp	w19, #0x40
     ba4:	sub	x4, x6, #0x1
     ba8:	clz	x4, x4
     bac:	cbz	x6, ccc <gomp_doacross_ull_init+0x1bc>
     bb0:	sub	w4, w0, w4
     bb4:	b.hi	b90 <gomp_doacross_ull_init+0x80>  // b.pmore
     bb8:	cmp	x6, #0x1
     bbc:	csel	w4, w4, w1, ne  // ne = any
     bc0:	add	w19, w19, w4
     bc4:	cmp	w19, #0x40
     bc8:	b.hi	b78 <gomp_doacross_ull_init+0x68>  // b.pmore
     bcc:	str	w4, [x3, x5, lsl #2]
     bd0:	add	x5, x5, #0x1
     bd4:	cmp	w20, w5
     bd8:	b.hi	b9c <gomp_doacross_ull_init+0x8c>  // b.pmore
     bdc:	stp	x27, x28, [sp, #80]
     be0:	ldr	w0, [x22]
     be4:	mov	w24, w24
     be8:	cmp	w0, #0x1
     bec:	b.eq	c08 <gomp_doacross_ull_init+0xf8>  // b.none
     bf0:	cmp	w0, #0x3
     bf4:	ldr	x24, [x23]
     bf8:	b.eq	c08 <gomp_doacross_ull_init+0xf8>  // b.none
     bfc:	sub	x24, x24, #0x1
     c00:	udiv	x24, x24, x21
     c04:	add	x24, x24, #0x1
     c08:	cmp	w19, #0x40
     c0c:	b.ls	d14 <gomp_doacross_ull_init+0x204>  // b.plast
     c10:	mov	x27, #0x3f                  	// #63
     c14:	mov	x28, #0x77                  	// #119
     c18:	add	x27, x27, w20, uxtw #3
     c1c:	and	x27, x27, #0xffffffffffffffc0
     c20:	mul	x1, x24, x27
     c24:	str	x1, [sp, #104]
     c28:	add	x0, x1, x28
     c2c:	bl	0 <gomp_malloc>
     c30:	add	x28, x0, x28
     c34:	and	x28, x28, #0xffffffffffffffc0
     c38:	stp	x21, x27, [x0]
     c3c:	mov	x25, x0
     c40:	str	w20, [x0, #16]
     c44:	strb	wzr, [x0, #20]
     c48:	str	x28, [x0, #24]
     c4c:	str	xzr, [x0, #40]
     c50:	ldr	x1, [sp, #104]
     c54:	cbnz	x26, d98 <gomp_doacross_ull_init+0x288>
     c58:	str	xzr, [x0, #48]
     c5c:	cmp	w19, #0x40
     c60:	b.ls	d24 <gomp_doacross_ull_init+0x214>  // b.plast
     c64:	ubfiz	x20, x20, #3, #32
     c68:	mov	x26, #0x0                   	// #0
     c6c:	mov	x19, #0x0                   	// #0
     c70:	cbz	x24, c9c <gomp_doacross_ull_init+0x18c>
     c74:	nop
     c78:	ldr	x0, [x25, #24]
     c7c:	add	x19, x19, #0x1
     c80:	mov	x2, x20
     c84:	mov	w1, #0x0                   	// #0
     c88:	add	x0, x0, x26
     c8c:	bl	0 <memset>
     c90:	add	x26, x26, x27
     c94:	cmp	x24, x19
     c98:	b.ne	c78 <gomp_doacross_ull_init+0x168>  // b.any
     c9c:	ldr	w0, [x22]
     ca0:	cmp	x21, #0x0
     ca4:	ccmp	w0, #0x1, #0x0, eq  // eq = none
     ca8:	b.eq	dbc <gomp_doacross_ull_init+0x2ac>  // b.none
     cac:	ldp	x23, x24, [sp, #48]
     cb0:	ldp	x27, x28, [sp, #80]
     cb4:	str	x25, [x22, #32]
     cb8:	ldp	x19, x20, [sp, #16]
     cbc:	ldp	x21, x22, [sp, #32]
     cc0:	ldp	x25, x26, [sp, #64]
     cc4:	ldp	x29, x30, [sp], #368
     cc8:	ret
     ccc:	ldp	x23, x24, [sp, #48]
     cd0:	cbnz	x26, cec <gomp_doacross_ull_init+0x1dc>
     cd4:	str	xzr, [x22, #32]
     cd8:	ldp	x19, x20, [sp, #16]
     cdc:	ldp	x21, x22, [sp, #32]
     ce0:	ldp	x25, x26, [sp, #64]
     ce4:	ldp	x29, x30, [sp], #368
     ce8:	ret
     cec:	add	x0, x26, #0x38
     cf0:	bl	0 <gomp_malloc_cleared>
     cf4:	add	x1, x0, #0x38
     cf8:	str	x1, [x0, #48]
     cfc:	str	x0, [x22, #32]
     d00:	ldp	x19, x20, [sp, #16]
     d04:	ldp	x21, x22, [sp, #32]
     d08:	ldp	x25, x26, [sp, #64]
     d0c:	ldp	x29, x30, [sp], #368
     d10:	ret
     d14:	mov	x28, #0x77                  	// #119
     d18:	mov	x27, #0x40                  	// #64
     d1c:	add	x28, x28, w20, uxtw #2
     d20:	b	c20 <gomp_doacross_ull_init+0x110>
     d24:	mov	w0, #0x1                   	// #1
     d28:	strb	w0, [x25, #20]
     d2c:	cbz	w20, d70 <gomp_doacross_ull_init+0x260>
     d30:	sub	w2, w20, #0x1
     d34:	add	x3, sp, #0x70
     d38:	mvn	x5, x2
     d3c:	mov	x1, #0x0                   	// #0
     d40:	lsl	x2, x2, #2
     d44:	mov	w0, #0x0                   	// #0
     d48:	add	x4, x2, #0x38
     d4c:	lsl	x5, x5, #2
     d50:	add	x4, x25, x4
     d54:	add	x3, x3, x2
     d58:	ldr	w2, [x3, x1]
     d5c:	str	w0, [x4, x1]
     d60:	sub	x1, x1, #0x4
     d64:	cmp	x5, x1
     d68:	add	w0, w0, w2
     d6c:	b.ne	d58 <gomp_doacross_ull_init+0x248>  // b.any
     d70:	cbz	x24, c9c <gomp_doacross_ull_init+0x18c>
     d74:	ldr	x1, [x25, #24]
     d78:	mov	x0, #0x0                   	// #0
     d7c:	nop
     d80:	str	xzr, [x1]
     d84:	add	x0, x0, #0x1
     d88:	cmp	x24, x0
     d8c:	add	x1, x1, x27
     d90:	b.ne	d80 <gomp_doacross_ull_init+0x270>  // b.any
     d94:	b	c9c <gomp_doacross_ull_init+0x18c>
     d98:	add	x0, x28, x1
     d9c:	mov	x2, x26
     da0:	mov	w1, #0x0                   	// #0
     da4:	str	x0, [x25, #48]
     da8:	bl	0 <memset>
     dac:	b	c5c <gomp_doacross_ull_init+0x14c>
     db0:	mov	w19, #0x41                  	// #65
     db4:	stp	x27, x28, [sp, #80]
     db8:	b	be0 <gomp_doacross_ull_init+0xd0>
     dbc:	ldr	x1, [x23]
     dc0:	udiv	x0, x1, x24
     dc4:	msub	x24, x0, x24, x1
     dc8:	str	x0, [x25]
     dcc:	madd	x0, x0, x24, x24
     dd0:	str	x24, [x25, #32]
     dd4:	str	x0, [x25, #40]
     dd8:	b	cac <gomp_doacross_ull_init+0x19c>
     ddc:	mov	w19, w20
     de0:	stp	x27, x28, [sp, #80]
     de4:	b	be0 <gomp_doacross_ull_init+0xd0>

0000000000000de8 <GOMP_doacross_ull_post>:
     de8:	adrp	x1, 0 <gomp_tls_data>
     dec:	ldr	x1, [x1]
     df0:	mrs	x2, tpidr_el0
     df4:	add	x1, x2, x1
     df8:	ldr	x2, [x1, #24]
     dfc:	ldr	x3, [x2, #32]
     e00:	cbz	x3, f54 <GOMP_doacross_ull_post+0x16c>
     e04:	ldr	x4, [x3, #24]
     e08:	cbz	x4, f54 <GOMP_doacross_ull_post+0x16c>
     e0c:	ldr	w2, [x2]
     e10:	cmp	w2, #0x1
     e14:	b.ne	fb4 <GOMP_doacross_ull_post+0x1cc>  // b.any
     e18:	ldr	w1, [x1, #40]
     e1c:	ldrb	w2, [x3, #20]
     e20:	cbz	w2, f5c <GOMP_doacross_ull_post+0x174>
     e24:	ldr	x5, [x0]
     e28:	ldr	x9, [x3, #8]
     e2c:	ldr	w2, [x3, #56]
     e30:	ldr	w8, [x3, #16]
     e34:	madd	x9, x1, x9, x4
     e38:	cmp	w8, #0x1
     e3c:	lsl	x2, x5, x2
     e40:	b.ls	f34 <GOMP_doacross_ull_post+0x14c>  // b.plast
     e44:	sub	w4, w8, #0x2
     e48:	sub	w6, w8, #0x1
     e4c:	cmp	w4, #0x3
     e50:	b.ls	fcc <GOMP_doacross_ull_post+0x1e4>  // b.plast
     e54:	add	x1, x0, #0x8
     e58:	lsr	w5, w6, #2
     e5c:	mov	w7, #0x20                  	// #32
     e60:	add	x4, x3, #0x3c
     e64:	movi	v3.4s, #0x0
     e68:	umaddl	x5, w5, w7, x1
     e6c:	nop
     e70:	ldr	q1, [x4], #16
     e74:	ldp	q0, q2, [x1]
     e78:	add	x1, x1, #0x20
     e7c:	uxtl	v4.2d, v1.2s
     e80:	cmp	x1, x5
     e84:	uxtl2	v1.2d, v1.4s
     e88:	sshl	v0.2d, v0.2d, v4.2d
     e8c:	sshl	v1.2d, v2.2d, v1.2d
     e90:	orr	v0.16b, v0.16b, v1.16b
     e94:	orr	v3.16b, v3.16b, v0.16b
     e98:	b.ne	e70 <GOMP_doacross_ull_post+0x88>  // b.any
     e9c:	movi	v0.4s, #0x0
     ea0:	and	w4, w6, #0xfffffffc
     ea4:	cmp	w4, w6
     ea8:	add	w4, w4, #0x1
     eac:	ext	v0.16b, v3.16b, v0.16b, #8
     eb0:	orr	v3.16b, v3.16b, v0.16b
     eb4:	mov	x1, v3.d[0]
     eb8:	orr	x2, x2, x1
     ebc:	b.eq	f34 <GOMP_doacross_ull_post+0x14c>  // b.none
     ec0:	add	x6, x3, w4, uxtw #2
     ec4:	add	w7, w4, #0x1
     ec8:	ldr	x5, [x0, w4, uxtw #3]
     ecc:	cmp	w8, w7
     ed0:	ldr	w1, [x6, #56]
     ed4:	lsl	x5, x5, x1
     ed8:	orr	x2, x2, x5
     edc:	b.ls	f34 <GOMP_doacross_ull_post+0x14c>  // b.plast
     ee0:	add	x1, x3, w7, uxtw #2
     ee4:	add	w6, w4, #0x2
     ee8:	ldr	x5, [x0, w7, uxtw #3]
     eec:	cmp	w8, w6
     ef0:	ldr	w1, [x1, #56]
     ef4:	lsl	x5, x5, x1
     ef8:	orr	x2, x2, x5
     efc:	b.ls	f34 <GOMP_doacross_ull_post+0x14c>  // b.plast
     f00:	add	x1, x3, w6, uxtw #2
     f04:	add	w4, w4, #0x3
     f08:	ldr	x5, [x0, w6, uxtw #3]
     f0c:	cmp	w8, w4
     f10:	ldr	w1, [x1, #56]
     f14:	lsl	x5, x5, x1
     f18:	orr	x2, x2, x5
     f1c:	b.ls	f34 <GOMP_doacross_ull_post+0x14c>  // b.plast
     f20:	add	x3, x3, w4, uxtw #2
     f24:	ldr	x0, [x0, w4, uxtw #3]
     f28:	ldr	w1, [x3, #56]
     f2c:	lsl	x0, x0, x1
     f30:	orr	x2, x2, x0
     f34:	add	x2, x2, #0x1
     f38:	ldar	x0, [x9]
     f3c:	cmp	x0, x2
     f40:	b.eq	f4c <GOMP_doacross_ull_post+0x164>  // b.none
     f44:	stlr	x2, [x9]
     f48:	ret
     f4c:	dmb	ish
     f50:	ret
     f54:	dmb	ish
     f58:	ret
     f5c:	dmb	ishld
     f60:	ldr	w4, [x3, #16]
     f64:	ldr	x2, [x3, #8]
     f68:	ldr	x3, [x3, #24]
     f6c:	mul	x2, x1, x2
     f70:	sub	w1, w4, #0x1
     f74:	cbz	w4, f48 <GOMP_doacross_ull_post+0x160>
     f78:	ubfiz	x1, x1, #3, #32
     f7c:	add	x2, x2, x1
     f80:	add	x1, x0, x1
     f84:	add	x3, x3, x2
     f88:	ldr	x2, [x1]
     f8c:	add	x2, x2, #0x1
     f90:	ldr	x4, [x3]
     f94:	cmp	x2, x4
     f98:	b.eq	fa0 <GOMP_doacross_ull_post+0x1b8>  // b.none
     f9c:	stlr	x2, [x3]
     fa0:	cmp	x1, x0
     fa4:	sub	x3, x3, #0x8
     fa8:	sub	x1, x1, #0x8
     fac:	b.ne	f88 <GOMP_doacross_ull_post+0x1a0>  // b.any
     fb0:	ret
     fb4:	cmp	w2, #0x3
     fb8:	ldr	x1, [x0]
     fbc:	b.eq	e1c <GOMP_doacross_ull_post+0x34>  // b.none
     fc0:	ldr	x2, [x3]
     fc4:	udiv	x1, x1, x2
     fc8:	b	e1c <GOMP_doacross_ull_post+0x34>
     fcc:	mov	w4, #0x1                   	// #1
     fd0:	b	ec0 <GOMP_doacross_ull_post+0xd8>
     fd4:	nop

0000000000000fd8 <GOMP_doacross_ull_wait>:
     fd8:	sub	sp, sp, #0x60
     fdc:	adrp	x9, 0 <gomp_tls_data>
     fe0:	ldr	x9, [x9]
     fe4:	mrs	x8, tpidr_el0
     fe8:	stp	x1, x2, [sp, #40]
     fec:	add	x1, x8, x9
     ff0:	stp	x3, x4, [sp, #56]
     ff4:	ldr	x3, [x1, #24]
     ff8:	stp	x5, x6, [sp, #72]
     ffc:	str	x7, [sp, #88]
    1000:	ldr	x2, [x3, #32]
    1004:	cbz	x2, 11fc <GOMP_doacross_ull_wait+0x224>
    1008:	ldr	x5, [x2, #24]
    100c:	cbz	x5, 11fc <GOMP_doacross_ull_wait+0x224>
    1010:	ldr	w4, [x3]
    1014:	cmp	w4, #0x1
    1018:	b.ne	121c <GOMP_doacross_ull_wait+0x244>  // b.any
    101c:	ldr	x6, [x3, #8]
    1020:	cbz	x6, 11d4 <GOMP_doacross_ull_wait+0x1fc>
    1024:	ldr	x3, [x1, #16]
    1028:	udiv	x1, x0, x6
    102c:	ldr	w3, [x3]
    1030:	udiv	x6, x1, x3
    1034:	msub	x6, x6, x3, x1
    1038:	ldrb	w7, [x2, #20]
    103c:	add	x11, sp, #0x20
    1040:	ldr	x1, [x2, #8]
    1044:	mov	w10, #0xffffffc8            	// #-56
    1048:	mul	x6, x6, x1
    104c:	add	x1, x0, #0x1
    1050:	cbz	w7, 1144 <GOMP_doacross_ull_wait+0x16c>
    1054:	add	x8, sp, #0x60
    1058:	ldr	w1, [x2, #56]
    105c:	add	x4, sp, #0x20
    1060:	mov	w3, #0xffffffc8            	// #-56
    1064:	stp	x8, x8, [sp]
    1068:	add	x5, x5, x6
    106c:	ldr	w8, [x2, #16]
    1070:	str	x4, [sp, #16]
    1074:	lsl	x0, x0, x1
    1078:	stp	w3, wzr, [sp, #24]
    107c:	cmp	w8, #0x1
    1080:	b.ls	1110 <GOMP_doacross_ull_wait+0x138>  // b.plast
    1084:	sub	w8, w8, #0x2
    1088:	add	x4, x2, #0x40
    108c:	add	x1, x2, #0x3c
    1090:	mov	w9, #0x0                   	// #0
    1094:	add	x8, x4, w8, uxtw #2
    1098:	mov	w10, #0x0                   	// #0
    109c:	add	x4, sp, #0x60
    10a0:	b	10c8 <GOMP_doacross_ull_wait+0xf0>
    10a4:	mov	x2, x4
    10a8:	ldr	w6, [x1], #4
    10ac:	mov	w9, w7
    10b0:	add	x4, x4, #0x8
    10b4:	cmp	x1, x8
    10b8:	ldr	x2, [x2]
    10bc:	lsl	x2, x2, x6
    10c0:	orr	x0, x0, x2
    10c4:	b.eq	1100 <GOMP_doacross_ull_wait+0x128>  // b.none
    10c8:	add	w6, w3, #0x8
    10cc:	tbz	w3, #31, 10a4 <GOMP_doacross_ull_wait+0xcc>
    10d0:	add	x2, sp, #0x60
    10d4:	mov	w10, w7
    10d8:	add	x2, x2, w3, sxtw
    10dc:	cmp	w6, #0x0
    10e0:	mov	w3, w6
    10e4:	b.gt	10a4 <GOMP_doacross_ull_wait+0xcc>
    10e8:	ldr	x2, [x2]
    10ec:	ldr	w6, [x1], #4
    10f0:	cmp	x1, x8
    10f4:	lsl	x2, x2, x6
    10f8:	orr	x0, x0, x2
    10fc:	b.ne	10c8 <GOMP_doacross_ull_wait+0xf0>  // b.any
    1100:	cbz	w10, 1108 <GOMP_doacross_ull_wait+0x130>
    1104:	str	w3, [sp, #24]
    1108:	cbz	w9, 1110 <GOMP_doacross_ull_wait+0x138>
    110c:	str	x4, [sp]
    1110:	ldar	x1, [x5]
    1114:	cmp	x1, x0
    1118:	b.hi	112c <GOMP_doacross_ull_wait+0x154>  // b.pmore
    111c:	nop
    1120:	ldr	x1, [x5]
    1124:	cmp	x1, x0
    1128:	b.ls	1120 <GOMP_doacross_ull_wait+0x148>  // b.plast
    112c:	dmb	ish
    1130:	add	sp, sp, #0x60
    1134:	ret
    1138:	mov	w0, w7
    113c:	cmp	w7, w0
    1140:	b.eq	11fc <GOMP_doacross_ull_wait+0x224>  // b.none
    1144:	ldr	w7, [x2, #16]
    1148:	add	x0, sp, #0x60
    114c:	stp	x0, x0, [sp]
    1150:	mov	w0, w7
    1154:	str	x11, [sp, #16]
    1158:	stp	w10, wzr, [sp, #24]
    115c:	cbz	w7, 113c <GOMP_doacross_ull_wait+0x164>
    1160:	mov	w0, #0x0                   	// #0
    1164:	b	119c <GOMP_doacross_ull_wait+0x1c4>
    1168:	and	x8, x8, #0xfffffffffffffff8
    116c:	str	x8, [sp]
    1170:	ldr	x4, [x3]
    1174:	add	x4, x4, #0x1
    1178:	add	x3, x6, w0, uxtw #3
    117c:	add	x3, x5, x3
    1180:	ldr	x3, [x3]
    1184:	cmp	x4, x3
    1188:	b.cc	1138 <GOMP_doacross_ull_wait+0x160>  // b.lo, b.ul, b.last
    118c:	b.hi	113c <GOMP_doacross_ull_wait+0x164>  // b.pmore
    1190:	add	w0, w0, #0x1
    1194:	cmp	w7, w0
    1198:	b.ls	113c <GOMP_doacross_ull_wait+0x164>  // b.plast
    119c:	mov	x4, x1
    11a0:	cbz	w0, 1178 <GOMP_doacross_ull_wait+0x1a0>
    11a4:	ldr	w4, [sp, #24]
    11a8:	ldr	x3, [sp]
    11ac:	add	w9, w4, #0x8
    11b0:	add	x8, x3, #0xf
    11b4:	tbz	w4, #31, 1168 <GOMP_doacross_ull_wait+0x190>
    11b8:	str	w9, [sp, #24]
    11bc:	add	x8, x3, #0xf
    11c0:	cmp	w9, #0x0
    11c4:	and	x8, x8, #0xfffffffffffffff8
    11c8:	b.le	11f0 <GOMP_doacross_ull_wait+0x218>
    11cc:	str	x8, [sp]
    11d0:	b	1170 <GOMP_doacross_ull_wait+0x198>
    11d4:	ldr	x1, [x2, #40]
    11d8:	ldr	x3, [x2]
    11dc:	cmp	x1, x0
    11e0:	b.ls	1208 <GOMP_doacross_ull_wait+0x230>  // b.plast
    11e4:	add	x6, x3, #0x1
    11e8:	udiv	x6, x0, x6
    11ec:	b	1038 <GOMP_doacross_ull_wait+0x60>
    11f0:	ldr	x3, [sp, #8]
    11f4:	add	x3, x3, w4, sxtw
    11f8:	b	1170 <GOMP_doacross_ull_wait+0x198>
    11fc:	dmb	ish
    1200:	add	sp, sp, #0x60
    1204:	ret
    1208:	sub	x6, x0, x1
    120c:	ldr	x1, [x2, #32]
    1210:	udiv	x6, x6, x3
    1214:	add	x6, x6, x1
    1218:	b	1038 <GOMP_doacross_ull_wait+0x60>
    121c:	cmp	w4, #0x3
    1220:	mov	x6, x0
    1224:	b.eq	1038 <GOMP_doacross_ull_wait+0x60>  // b.none
    1228:	ldr	x6, [x2]
    122c:	udiv	x6, x0, x6
    1230:	b	1038 <GOMP_doacross_ull_wait+0x60>

parallel.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_resolve_num_threads>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x21, x22, [sp, #32]
   c:	mrs	x21, tpidr_el0
  10:	adrp	x22, 0 <gomp_tls_data>
  14:	ldr	x22, [x22]
  18:	stp	x19, x20, [sp, #16]
  1c:	adrp	x20, 0 <gomp_global_icv>
  20:	add	x3, x21, x22
  24:	add	x20, x20, #0x0
  28:	ldr	x2, [x3, #80]
  2c:	cmp	x2, #0x0
  30:	add	x2, x2, #0x90
  34:	csel	x20, x20, x2, eq  // eq = none
  38:	cmp	w0, #0x1
  3c:	b.eq	a4 <gomp_resolve_num_threads+0xa4>  // b.none
  40:	ldr	w2, [x3, #48]
  44:	str	x23, [sp, #48]
  48:	mov	w23, w1
  4c:	cbz	w2, 58 <gomp_resolve_num_threads+0x58>
  50:	ldrb	w3, [x20, #25]
  54:	cbz	w3, a0 <gomp_resolve_num_threads+0xa0>
  58:	adrp	x3, 0 <gomp_max_active_levels_var>
  5c:	ldr	x3, [x3]
  60:	cmp	x3, w2, uxtw
  64:	b.ls	a0 <gomp_resolve_num_threads+0xa0>  // b.plast
  68:	mov	w19, w0
  6c:	cbnz	w0, 74 <gomp_resolve_num_threads+0x74>
  70:	ldr	w19, [x20]
  74:	ldrb	w0, [x20, #24]
  78:	cbnz	w0, bc <gomp_resolve_num_threads+0xbc>
  7c:	ldr	w0, [x20, #20]
  80:	cmn	w0, #0x1
  84:	b.ne	d8 <gomp_resolve_num_threads+0xd8>  // b.any
  88:	mov	w0, w19
  8c:	ldp	x19, x20, [sp, #16]
  90:	ldp	x21, x22, [sp, #32]
  94:	ldr	x23, [sp, #48]
  98:	ldp	x29, x30, [sp], #64
  9c:	ret
  a0:	ldr	x23, [sp, #48]
  a4:	mov	w19, #0x1                   	// #1
  a8:	mov	w0, w19
  ac:	ldp	x19, x20, [sp, #16]
  b0:	ldp	x21, x22, [sp, #32]
  b4:	ldp	x29, x30, [sp], #64
  b8:	ret
  bc:	bl	0 <gomp_dynamic_max_threads>
  c0:	cmp	w19, w0
  c4:	csel	w19, w19, w0, ls  // ls = plast
  c8:	cmp	w23, #0x0
  cc:	ccmp	w19, w23, #0x0, ne  // ne = any
  d0:	csel	w19, w19, w23, ls  // ls = plast
  d4:	b	7c <gomp_resolve_num_threads+0x7c>
  d8:	cmp	w19, #0x1
  dc:	b.eq	a0 <gomp_resolve_num_threads+0xa0>  // b.none
  e0:	add	x21, x21, x22
  e4:	ldr	x1, [x21, #16]
  e8:	ldr	x10, [x21, #96]
  ec:	cbz	x1, 1a4 <gomp_resolve_num_threads+0x1a4>
  f0:	cbz	x10, 1c0 <gomp_resolve_num_threads+0x1c0>
  f4:	ldr	x1, [x10, #24]
  f8:	mov	x6, #0x1                   	// #1
  fc:	mov	w8, w19
 100:	add	x7, x10, #0x18
 104:	sub	x2, x6, x1
 108:	sub	w3, w6, w1
 10c:	add	x2, x2, w0, uxtw
 110:	sub	x5, x1, #0x1
 114:	add	w9, w3, w0
 118:	cmp	x2, x8
 11c:	b.cs	16c <gomp_resolve_num_threads+0x16c>  // b.hs, b.nlast
 120:	add	w0, w3, w0
 124:	add	x5, x5, x9
 128:	ldxr	x2, [x7]
 12c:	cmp	x2, x1
 130:	b.ne	13c <gomp_resolve_num_threads+0x13c>  // b.any
 134:	stlxr	w3, x5, [x7]
 138:	cbnz	w3, 128 <gomp_resolve_num_threads+0x128>
 13c:	dmb	ish
 140:	cmp	x1, x2
 144:	b.eq	198 <gomp_resolve_num_threads+0x198>  // b.none
 148:	ldr	w0, [x20, #20]
 14c:	ldr	x1, [x10, #24]
 150:	sub	x2, x6, x1
 154:	sub	w3, w6, w1
 158:	add	x2, x2, w0, uxtw
 15c:	sub	x5, x1, #0x1
 160:	add	w9, w3, w0
 164:	cmp	x2, x8
 168:	b.cc	120 <gomp_resolve_num_threads+0x120>  // b.lo, b.ul, b.last
 16c:	add	x4, x5, x8
 170:	ldxr	x0, [x7]
 174:	cmp	x0, x1
 178:	b.ne	184 <gomp_resolve_num_threads+0x184>  // b.any
 17c:	stlxr	w2, x4, [x7]
 180:	cbnz	w2, 170 <gomp_resolve_num_threads+0x170>
 184:	dmb	ish
 188:	cmp	x0, x1
 18c:	b.eq	88 <gomp_resolve_num_threads+0x88>  // b.none
 190:	ldr	w0, [x20, #20]
 194:	b	14c <gomp_resolve_num_threads+0x14c>
 198:	mov	w19, w0
 19c:	ldr	x23, [sp, #48]
 1a0:	b	a8 <gomp_resolve_num_threads+0xa8>
 1a4:	cmp	w19, w0
 1a8:	csel	w19, w19, w0, ls  // ls = plast
 1ac:	cbz	x10, 88 <gomp_resolve_num_threads+0x88>
 1b0:	mov	w0, w19
 1b4:	ldr	x23, [sp, #48]
 1b8:	str	x0, [x10, #24]
 1bc:	b	a8 <gomp_resolve_num_threads+0xa8>
 1c0:	cmp	w19, w0
 1c4:	csel	w19, w19, w0, ls  // ls = plast
 1c8:	ldr	x23, [sp, #48]
 1cc:	b	a8 <gomp_resolve_num_threads+0xa8>

00000000000001d0 <GOMP_parallel_start>:
 1d0:	stp	x29, x30, [sp, #-64]!
 1d4:	mov	x29, sp
 1d8:	stp	x23, x24, [sp, #48]
 1dc:	mov	x24, x0
 1e0:	adrp	x23, 0 <gomp_tls_data>
 1e4:	ldr	x23, [x23]
 1e8:	stp	x21, x22, [sp, #32]
 1ec:	mrs	x22, tpidr_el0
 1f0:	add	x3, x22, x23
 1f4:	stp	x19, x20, [sp, #16]
 1f8:	mov	w19, w2
 1fc:	adrp	x20, 0 <gomp_global_icv>
 200:	ldr	x2, [x3, #80]
 204:	add	x20, x20, #0x0
 208:	mov	x21, x1
 20c:	cmp	x2, #0x0
 210:	add	x2, x2, #0x90
 214:	csel	x20, x20, x2, eq  // eq = none
 218:	cmp	w19, #0x1
 21c:	b.eq	320 <GOMP_parallel_start+0x150>  // b.none
 220:	ldr	w1, [x3, #48]
 224:	cbz	w1, 230 <GOMP_parallel_start+0x60>
 228:	ldrb	w0, [x20, #25]
 22c:	cbz	w0, 320 <GOMP_parallel_start+0x150>
 230:	adrp	x0, 0 <gomp_max_active_levels_var>
 234:	ldr	x0, [x0]
 238:	cmp	x0, w1, uxtw
 23c:	b.ls	320 <GOMP_parallel_start+0x150>  // b.plast
 240:	cbnz	w19, 248 <GOMP_parallel_start+0x78>
 244:	ldr	w19, [x20]
 248:	ldrb	w0, [x20, #24]
 24c:	cbnz	w0, 358 <GOMP_parallel_start+0x188>
 250:	ldr	w0, [x20, #20]
 254:	cmn	w0, #0x1
 258:	b.eq	324 <GOMP_parallel_start+0x154>  // b.none
 25c:	cmp	w19, #0x1
 260:	b.eq	320 <GOMP_parallel_start+0x150>  // b.none
 264:	add	x22, x22, x23
 268:	ldr	x1, [x22, #16]
 26c:	ldr	x10, [x22, #96]
 270:	cbz	x1, 370 <GOMP_parallel_start+0x1a0>
 274:	cbz	x10, 388 <GOMP_parallel_start+0x1b8>
 278:	ldr	x1, [x10, #24]
 27c:	mov	x6, #0x1                   	// #1
 280:	mov	w8, w19
 284:	add	x7, x10, #0x18
 288:	sub	x2, x6, x1
 28c:	sub	w3, w6, w1
 290:	add	x2, x2, w0, uxtw
 294:	sub	x5, x1, #0x1
 298:	add	w9, w3, w0
 29c:	cmp	x2, x8
 2a0:	b.cs	2f4 <GOMP_parallel_start+0x124>  // b.hs, b.nlast
 2a4:	nop
 2a8:	add	w0, w3, w0
 2ac:	add	x5, x5, x9
 2b0:	ldxr	x2, [x7]
 2b4:	cmp	x2, x1
 2b8:	b.ne	2c4 <GOMP_parallel_start+0xf4>  // b.any
 2bc:	stlxr	w3, x5, [x7]
 2c0:	cbnz	w3, 2b0 <GOMP_parallel_start+0xe0>
 2c4:	dmb	ish
 2c8:	cmp	x1, x2
 2cc:	b.eq	368 <GOMP_parallel_start+0x198>  // b.none
 2d0:	ldr	w0, [x20, #20]
 2d4:	ldr	x1, [x10, #24]
 2d8:	sub	x2, x6, x1
 2dc:	sub	w3, w6, w1
 2e0:	add	x2, x2, w0, uxtw
 2e4:	sub	x5, x1, #0x1
 2e8:	add	w9, w3, w0
 2ec:	cmp	x2, x8
 2f0:	b.cc	2a8 <GOMP_parallel_start+0xd8>  // b.lo, b.ul, b.last
 2f4:	add	x4, x5, x8
 2f8:	ldxr	x0, [x7]
 2fc:	cmp	x0, x1
 300:	b.ne	30c <GOMP_parallel_start+0x13c>  // b.any
 304:	stlxr	w2, x4, [x7]
 308:	cbnz	w2, 2f8 <GOMP_parallel_start+0x128>
 30c:	dmb	ish
 310:	cmp	x1, x0
 314:	b.eq	324 <GOMP_parallel_start+0x154>  // b.none
 318:	ldr	w0, [x20, #20]
 31c:	b	2d4 <GOMP_parallel_start+0x104>
 320:	mov	w19, #0x1                   	// #1
 324:	mov	w0, w19
 328:	bl	0 <gomp_new_team>
 32c:	mov	w2, w19
 330:	mov	x4, x0
 334:	mov	x1, x21
 338:	mov	x0, x24
 33c:	ldp	x19, x20, [sp, #16]
 340:	mov	x5, #0x0                   	// #0
 344:	ldp	x21, x22, [sp, #32]
 348:	mov	w3, #0x0                   	// #0
 34c:	ldp	x23, x24, [sp, #48]
 350:	ldp	x29, x30, [sp], #64
 354:	b	0 <gomp_team_start>
 358:	bl	0 <gomp_dynamic_max_threads>
 35c:	cmp	w19, w0
 360:	csel	w19, w19, w0, ls  // ls = plast
 364:	b	250 <GOMP_parallel_start+0x80>
 368:	mov	w19, w0
 36c:	b	324 <GOMP_parallel_start+0x154>
 370:	cmp	w19, w0
 374:	csel	w19, w19, w0, ls  // ls = plast
 378:	cbz	x10, 324 <GOMP_parallel_start+0x154>
 37c:	mov	w0, w19
 380:	str	x0, [x10, #24]
 384:	b	324 <GOMP_parallel_start+0x154>
 388:	cmp	w19, w0
 38c:	csel	w19, w19, w0, ls  // ls = plast
 390:	b	324 <GOMP_parallel_start+0x154>
 394:	nop

0000000000000398 <GOMP_parallel_end>:
 398:	stp	x29, x30, [sp, #-32]!
 39c:	mrs	x0, tpidr_el0
 3a0:	adrp	x1, 0 <gomp_global_icv>
 3a4:	mov	x29, sp
 3a8:	stp	x19, x20, [sp, #16]
 3ac:	add	x1, x1, #0x0
 3b0:	adrp	x19, 0 <gomp_tls_data>
 3b4:	ldr	x19, [x19]
 3b8:	add	x19, x0, x19
 3bc:	ldr	x0, [x19, #80]
 3c0:	cmp	x0, #0x0
 3c4:	add	x0, x0, #0x90
 3c8:	csel	x0, x1, x0, eq  // eq = none
 3cc:	ldr	w0, [x0, #20]
 3d0:	cmn	w0, #0x1
 3d4:	b.ne	3e4 <GOMP_parallel_end+0x4c>  // b.any
 3d8:	ldp	x19, x20, [sp, #16]
 3dc:	ldp	x29, x30, [sp], #32
 3e0:	b	0 <gomp_team_end>
 3e4:	ldr	x0, [x19, #16]
 3e8:	cbz	x0, 3d8 <GOMP_parallel_end+0x40>
 3ec:	ldr	w20, [x0]
 3f0:	bl	0 <gomp_team_end>
 3f4:	cmp	w20, #0x1
 3f8:	b.ls	428 <GOMP_parallel_end+0x90>  // b.plast
 3fc:	ldr	x0, [x19, #16]
 400:	cbz	x0, 434 <GOMP_parallel_end+0x9c>
 404:	ldr	x0, [x19, #96]
 408:	mov	x1, #0x1                   	// #1
 40c:	sub	x20, x1, w20, uxtw
 410:	add	x0, x0, #0x18
 414:	ldxr	x1, [x0]
 418:	add	x1, x1, x20
 41c:	stlxr	w2, x1, [x0]
 420:	cbnz	w2, 414 <GOMP_parallel_end+0x7c>
 424:	dmb	ish
 428:	ldp	x19, x20, [sp, #16]
 42c:	ldp	x29, x30, [sp], #32
 430:	ret
 434:	ldr	x0, [x19, #96]
 438:	mov	x1, #0x1                   	// #1
 43c:	str	x1, [x0, #24]
 440:	b	428 <GOMP_parallel_end+0x90>
 444:	nop

0000000000000448 <GOMP_parallel>:
 448:	stp	x29, x30, [sp, #-80]!
 44c:	mov	x29, sp
 450:	stp	x23, x24, [sp, #48]
 454:	mrs	x23, tpidr_el0
 458:	adrp	x24, 0 <gomp_tls_data>
 45c:	ldr	x24, [x24]
 460:	stp	x19, x20, [sp, #16]
 464:	mov	w19, w2
 468:	add	x4, x23, x24
 46c:	stp	x21, x22, [sp, #32]
 470:	adrp	x20, 0 <gomp_global_icv>
 474:	add	x20, x20, #0x0
 478:	ldr	x2, [x4, #80]
 47c:	str	x25, [sp, #64]
 480:	mov	x21, x1
 484:	mov	w22, w3
 488:	cmp	x2, #0x0
 48c:	add	x2, x2, #0x90
 490:	csel	x20, x20, x2, eq  // eq = none
 494:	mov	x25, x0
 498:	cmp	w19, #0x1
 49c:	b.eq	5a0 <GOMP_parallel+0x158>  // b.none
 4a0:	ldr	w0, [x4, #48]
 4a4:	cbz	w0, 4b0 <GOMP_parallel+0x68>
 4a8:	ldrb	w1, [x20, #25]
 4ac:	cbz	w1, 5a0 <GOMP_parallel+0x158>
 4b0:	adrp	x1, 0 <gomp_max_active_levels_var>
 4b4:	ldr	x1, [x1]
 4b8:	cmp	x1, w0, uxtw
 4bc:	b.ls	5a0 <GOMP_parallel+0x158>  // b.plast
 4c0:	cbnz	w19, 4c8 <GOMP_parallel+0x80>
 4c4:	ldr	w19, [x20]
 4c8:	ldrb	w0, [x20, #24]
 4cc:	cbnz	w0, 610 <GOMP_parallel+0x1c8>
 4d0:	ldr	w0, [x20, #20]
 4d4:	cmn	w0, #0x1
 4d8:	b.eq	5a4 <GOMP_parallel+0x15c>  // b.none
 4dc:	cmp	w19, #0x1
 4e0:	b.eq	5a0 <GOMP_parallel+0x158>  // b.none
 4e4:	add	x1, x23, x24
 4e8:	ldr	x2, [x1, #16]
 4ec:	ldr	x10, [x1, #96]
 4f0:	cbz	x2, 694 <GOMP_parallel+0x24c>
 4f4:	cbz	x10, 6ac <GOMP_parallel+0x264>
 4f8:	ldr	x1, [x10, #24]
 4fc:	mov	x6, #0x1                   	// #1
 500:	mov	w8, w19
 504:	add	x7, x10, #0x18
 508:	sub	x2, x6, x1
 50c:	sub	w3, w6, w1
 510:	add	x2, x2, w0, uxtw
 514:	sub	x5, x1, #0x1
 518:	add	w9, w3, w0
 51c:	cmp	x2, x8
 520:	b.cs	574 <GOMP_parallel+0x12c>  // b.hs, b.nlast
 524:	nop
 528:	add	w0, w3, w0
 52c:	add	x5, x5, x9
 530:	ldxr	x2, [x7]
 534:	cmp	x2, x1
 538:	b.ne	544 <GOMP_parallel+0xfc>  // b.any
 53c:	stlxr	w3, x5, [x7]
 540:	cbnz	w3, 530 <GOMP_parallel+0xe8>
 544:	dmb	ish
 548:	cmp	x1, x2
 54c:	b.eq	67c <GOMP_parallel+0x234>  // b.none
 550:	ldr	w0, [x20, #20]
 554:	ldr	x1, [x10, #24]
 558:	sub	x2, x6, x1
 55c:	sub	w3, w6, w1
 560:	add	x2, x2, w0, uxtw
 564:	sub	x5, x1, #0x1
 568:	add	w9, w3, w0
 56c:	cmp	x2, x8
 570:	b.cc	528 <GOMP_parallel+0xe0>  // b.lo, b.ul, b.last
 574:	add	x4, x5, x8
 578:	ldxr	x0, [x7]
 57c:	cmp	x0, x1
 580:	b.ne	58c <GOMP_parallel+0x144>  // b.any
 584:	stlxr	w2, x4, [x7]
 588:	cbnz	w2, 578 <GOMP_parallel+0x130>
 58c:	dmb	ish
 590:	cmp	x1, x0
 594:	b.eq	5a4 <GOMP_parallel+0x15c>  // b.none
 598:	ldr	w0, [x20, #20]
 59c:	b	554 <GOMP_parallel+0x10c>
 5a0:	mov	w19, #0x1                   	// #1
 5a4:	mov	w0, w19
 5a8:	bl	0 <gomp_new_team>
 5ac:	mov	x1, x21
 5b0:	mov	x4, x0
 5b4:	mov	w3, w22
 5b8:	mov	w2, w19
 5bc:	mov	x5, #0x0                   	// #0
 5c0:	add	x23, x23, x24
 5c4:	mov	x0, x25
 5c8:	bl	0 <gomp_team_start>
 5cc:	mov	x0, x21
 5d0:	blr	x25
 5d4:	ldr	x1, [x23, #80]
 5d8:	adrp	x0, 0 <gomp_global_icv>
 5dc:	add	x0, x0, #0x0
 5e0:	cmp	x1, #0x0
 5e4:	add	x1, x1, #0x90
 5e8:	csel	x0, x0, x1, eq  // eq = none
 5ec:	ldr	w0, [x0, #20]
 5f0:	cmn	w0, #0x1
 5f4:	b.ne	620 <GOMP_parallel+0x1d8>  // b.any
 5f8:	ldp	x19, x20, [sp, #16]
 5fc:	ldp	x21, x22, [sp, #32]
 600:	ldp	x23, x24, [sp, #48]
 604:	ldr	x25, [sp, #64]
 608:	ldp	x29, x30, [sp], #80
 60c:	b	0 <gomp_team_end>
 610:	bl	0 <gomp_dynamic_max_threads>
 614:	cmp	w19, w0
 618:	csel	w19, w19, w0, ls  // ls = plast
 61c:	b	4d0 <GOMP_parallel+0x88>
 620:	ldr	x0, [x23, #16]
 624:	cbz	x0, 5f8 <GOMP_parallel+0x1b0>
 628:	ldr	w19, [x0]
 62c:	bl	0 <gomp_team_end>
 630:	cmp	w19, #0x1
 634:	b.ls	664 <GOMP_parallel+0x21c>  // b.plast
 638:	ldr	x0, [x23, #16]
 63c:	cbz	x0, 684 <GOMP_parallel+0x23c>
 640:	ldr	x0, [x23, #96]
 644:	mov	x1, #0x1                   	// #1
 648:	sub	x19, x1, w19, uxtw
 64c:	add	x0, x0, #0x18
 650:	ldxr	x1, [x0]
 654:	add	x1, x1, x19
 658:	stlxr	w2, x1, [x0]
 65c:	cbnz	w2, 650 <GOMP_parallel+0x208>
 660:	dmb	ish
 664:	ldp	x19, x20, [sp, #16]
 668:	ldp	x21, x22, [sp, #32]
 66c:	ldp	x23, x24, [sp, #48]
 670:	ldr	x25, [sp, #64]
 674:	ldp	x29, x30, [sp], #80
 678:	ret
 67c:	mov	w19, w0
 680:	b	5a4 <GOMP_parallel+0x15c>
 684:	ldr	x0, [x23, #96]
 688:	mov	x1, #0x1                   	// #1
 68c:	str	x1, [x0, #24]
 690:	b	664 <GOMP_parallel+0x21c>
 694:	cmp	w19, w0
 698:	csel	w19, w19, w0, ls  // ls = plast
 69c:	cbz	x10, 5a4 <GOMP_parallel+0x15c>
 6a0:	mov	w0, w19
 6a4:	str	x0, [x10, #24]
 6a8:	b	5a4 <GOMP_parallel+0x15c>
 6ac:	cmp	w19, w0
 6b0:	csel	w19, w19, w0, ls  // ls = plast
 6b4:	b	5a4 <GOMP_parallel+0x15c>

00000000000006b8 <GOMP_parallel_reductions>:
 6b8:	stp	x29, x30, [sp, #-64]!
 6bc:	mov	x29, sp
 6c0:	stp	x19, x20, [sp, #16]
 6c4:	mov	x20, x1
 6c8:	mov	w1, #0x0                   	// #0
 6cc:	stp	x21, x22, [sp, #32]
 6d0:	mov	x22, x0
 6d4:	mov	w0, w2
 6d8:	str	x23, [sp, #48]
 6dc:	mov	w23, w3
 6e0:	bl	0 <gomp_resolve_num_threads>
 6e4:	mov	w1, w0
 6e8:	mov	w19, w0
 6ec:	ldr	x0, [x20]
 6f0:	bl	0 <gomp_parallel_reduction_register>
 6f4:	mov	x21, x0
 6f8:	mov	w0, w19
 6fc:	bl	0 <gomp_new_team>
 700:	mov	x1, x20
 704:	mov	x4, x0
 708:	mov	x5, x21
 70c:	mov	w3, w23
 710:	mov	w2, w19
 714:	mov	x0, x22
 718:	bl	0 <gomp_team_start>
 71c:	mov	x0, x20
 720:	mrs	x20, tpidr_el0
 724:	blr	x22
 728:	adrp	x0, 0 <gomp_tls_data>
 72c:	ldr	x0, [x0]
 730:	adrp	x1, 0 <gomp_global_icv>
 734:	add	x1, x1, #0x0
 738:	add	x20, x20, x0
 73c:	ldr	x0, [x20, #80]
 740:	cmp	x0, #0x0
 744:	add	x0, x0, #0x90
 748:	csel	x1, x1, x0, eq  // eq = none
 74c:	ldr	w0, [x1, #20]
 750:	cmn	w0, #0x1
 754:	b.ne	77c <GOMP_parallel_reductions+0xc4>  // b.any
 758:	bl	0 <gomp_team_end>
 75c:	mov	x0, x21
 760:	bl	0 <free>
 764:	mov	w0, w19
 768:	ldp	x19, x20, [sp, #16]
 76c:	ldp	x21, x22, [sp, #32]
 770:	ldr	x23, [sp, #48]
 774:	ldp	x29, x30, [sp], #64
 778:	ret
 77c:	ldr	x0, [x20, #16]
 780:	cbz	x0, 758 <GOMP_parallel_reductions+0xa0>
 784:	ldr	w22, [x0]
 788:	bl	0 <gomp_team_end>
 78c:	cmp	w22, #0x1
 790:	b.ls	75c <GOMP_parallel_reductions+0xa4>  // b.plast
 794:	ldr	x0, [x20, #16]
 798:	cbz	x0, 7c4 <GOMP_parallel_reductions+0x10c>
 79c:	ldr	x0, [x20, #96]
 7a0:	mov	x1, #0x1                   	// #1
 7a4:	sub	x22, x1, w22, uxtw
 7a8:	add	x0, x0, #0x18
 7ac:	ldxr	x1, [x0]
 7b0:	add	x1, x1, x22
 7b4:	stlxr	w2, x1, [x0]
 7b8:	cbnz	w2, 7ac <GOMP_parallel_reductions+0xf4>
 7bc:	dmb	ish
 7c0:	b	75c <GOMP_parallel_reductions+0xa4>
 7c4:	ldr	x0, [x20, #96]
 7c8:	mov	x1, #0x1                   	// #1
 7cc:	str	x1, [x0, #24]
 7d0:	b	75c <GOMP_parallel_reductions+0xa4>
 7d4:	nop

00000000000007d8 <GOMP_cancellation_point>:
 7d8:	adrp	x1, 0 <gomp_cancel_var>
 7dc:	mov	w2, w0
 7e0:	ldrb	w0, [x1]
 7e4:	cbz	w0, 818 <GOMP_cancellation_point+0x40>
 7e8:	adrp	x0, 0 <gomp_tls_data>
 7ec:	ldr	x0, [x0]
 7f0:	mrs	x1, tpidr_el0
 7f4:	tst	w2, #0x6
 7f8:	add	x1, x1, x0
 7fc:	ldr	x3, [x1, #16]
 800:	b.eq	81c <GOMP_cancellation_point+0x44>  // b.none
 804:	mov	w0, #0x0                   	// #0
 808:	cbz	x3, 818 <GOMP_cancellation_point+0x40>
 80c:	ldr	w0, [x3, #1332]
 810:	cmp	w0, #0x0
 814:	cset	w0, ne  // ne = any
 818:	ret
 81c:	tbz	w2, #3, 850 <GOMP_cancellation_point+0x78>
 820:	ldr	x0, [x1, #80]
 824:	ldr	x1, [x0, #40]
 828:	cbz	x1, 850 <GOMP_cancellation_point+0x78>
 82c:	ldrb	w0, [x1, #49]
 830:	cbnz	w0, 818 <GOMP_cancellation_point+0x40>
 834:	ldrb	w0, [x1, #50]
 838:	cbz	w0, 850 <GOMP_cancellation_point+0x78>
 83c:	ldr	x0, [x1]
 840:	cbz	x0, 850 <GOMP_cancellation_point+0x78>
 844:	ldrb	w0, [x0, #49]
 848:	cbnz	w0, 818 <GOMP_cancellation_point+0x40>
 84c:	nop
 850:	mov	w0, #0x0                   	// #0
 854:	cbz	x3, 818 <GOMP_cancellation_point+0x40>
 858:	ldr	w0, [x3, #132]
 85c:	ubfx	x0, x0, #2, #1
 860:	ret
 864:	nop

0000000000000868 <GOMP_cancel>:
 868:	stp	x29, x30, [sp, #-64]!
 86c:	adrp	x2, 0 <gomp_cancel_var>
 870:	mov	x29, sp
 874:	stp	x19, x20, [sp, #16]
 878:	ldrb	w19, [x2]
 87c:	cbz	w19, 910 <GOMP_cancel+0xa8>
 880:	adrp	x2, 0 <gomp_tls_data>
 884:	ldr	x2, [x2]
 888:	and	w20, w1, #0xff
 88c:	mrs	x1, tpidr_el0
 890:	and	w3, w0, #0x6
 894:	add	x1, x1, x2
 898:	ldr	x2, [x1, #16]
 89c:	cbz	w20, 920 <GOMP_cancel+0xb8>
 8a0:	cbnz	w3, 9a4 <GOMP_cancel+0x13c>
 8a4:	tbz	w0, #3, 93c <GOMP_cancel+0xd4>
 8a8:	ldr	x0, [x1, #80]
 8ac:	str	x21, [sp, #32]
 8b0:	ldr	x21, [x0, #40]
 8b4:	cbz	x21, 90c <GOMP_cancel+0xa4>
 8b8:	ldrb	w0, [x21, #50]
 8bc:	cbz	w0, 8cc <GOMP_cancel+0x64>
 8c0:	ldr	x0, [x21]
 8c4:	cmp	x0, #0x0
 8c8:	csel	x21, x21, x0, eq  // eq = none
 8cc:	ldrb	w0, [x21, #49]
 8d0:	cbnz	w0, 90c <GOMP_cancel+0xa4>
 8d4:	add	x0, x2, #0x500
 8d8:	mov	w2, #0x1                   	// #1
 8dc:	ldaxr	w1, [x0]
 8e0:	cbnz	w1, 8ec <GOMP_cancel+0x84>
 8e4:	stxr	w3, w2, [x0]
 8e8:	cbnz	w3, 8dc <GOMP_cancel+0x74>
 8ec:	cmp	w1, #0x0
 8f0:	b.ne	9d4 <GOMP_cancel+0x16c>  // b.any
 8f4:	mov	w1, #0x1                   	// #1
 8f8:	strb	w1, [x21, #49]
 8fc:	ldxr	w1, [x0]
 900:	stlxr	w2, wzr, [x0]
 904:	cbnz	w2, 8fc <GOMP_cancel+0x94>
 908:	tbnz	w1, #31, 9c4 <GOMP_cancel+0x15c>
 90c:	ldr	x21, [sp, #32]
 910:	mov	w0, w19
 914:	ldp	x19, x20, [sp, #16]
 918:	ldp	x29, x30, [sp], #64
 91c:	ret
 920:	cbz	w3, 960 <GOMP_cancel+0xf8>
 924:	mov	w19, #0x0                   	// #0
 928:	cbz	x2, 910 <GOMP_cancel+0xa8>
 92c:	ldr	w0, [x2, #1332]
 930:	cmp	w0, #0x0
 934:	cset	w19, ne  // ne = any
 938:	b	910 <GOMP_cancel+0xa8>
 93c:	mov	w0, #0x1                   	// #1
 940:	str	w0, [x2, #1336]
 944:	mov	w19, w20
 948:	mov	x0, x2
 94c:	bl	0 <gomp_team_barrier_cancel>
 950:	mov	w0, w19
 954:	ldp	x19, x20, [sp, #16]
 958:	ldp	x29, x30, [sp], #64
 95c:	ret
 960:	tbz	w0, #3, 990 <GOMP_cancel+0x128>
 964:	ldr	x0, [x1, #80]
 968:	ldr	x0, [x0, #40]
 96c:	cbz	x0, 990 <GOMP_cancel+0x128>
 970:	ldrb	w1, [x0, #49]
 974:	cbnz	w1, 910 <GOMP_cancel+0xa8>
 978:	ldrb	w1, [x0, #50]
 97c:	cbz	w1, 990 <GOMP_cancel+0x128>
 980:	ldr	x0, [x0]
 984:	cbz	x0, 990 <GOMP_cancel+0x128>
 988:	ldrb	w0, [x0, #49]
 98c:	cbnz	w0, 910 <GOMP_cancel+0xa8>
 990:	mov	w19, #0x0                   	// #0
 994:	cbz	x2, 910 <GOMP_cancel+0xa8>
 998:	ldr	w19, [x2, #132]
 99c:	ubfx	x19, x19, #2, #1
 9a0:	b	910 <GOMP_cancel+0xa8>
 9a4:	cbz	x2, 910 <GOMP_cancel+0xa8>
 9a8:	mov	w0, #0x1                   	// #1
 9ac:	str	w0, [x2, #1332]
 9b0:	mov	w19, w20
 9b4:	mov	w0, w19
 9b8:	ldp	x19, x20, [sp, #16]
 9bc:	ldp	x29, x30, [sp], #64
 9c0:	ret
 9c4:	bl	0 <gomp_mutex_unlock_slow>
 9c8:	mov	w19, w20
 9cc:	ldr	x21, [sp, #32]
 9d0:	b	910 <GOMP_cancel+0xa8>
 9d4:	str	x0, [sp, #56]
 9d8:	bl	0 <gomp_mutex_lock_slow>
 9dc:	ldr	x0, [sp, #56]
 9e0:	b	8f4 <GOMP_cancel+0x8c>
 9e4:	nop

00000000000009e8 <gomp_ialias_omp_get_num_threads>:
 9e8:	adrp	x2, 0 <gomp_tls_data>
 9ec:	ldr	x2, [x2]
 9f0:	mrs	x1, tpidr_el0
 9f4:	mov	w0, #0x1                   	// #1
 9f8:	add	x1, x1, x2
 9fc:	ldr	x1, [x1, #16]
 a00:	cbz	x1, a08 <gomp_ialias_omp_get_num_threads+0x20>
 a04:	ldr	w0, [x1]
 a08:	ret
 a0c:	nop

0000000000000a10 <gomp_ialias_omp_get_thread_num>:
 a10:	adrp	x0, 0 <gomp_tls_data>
 a14:	ldr	x0, [x0]
 a18:	mrs	x1, tpidr_el0
 a1c:	add	x0, x1, x0
 a20:	ldr	w0, [x0, #40]
 a24:	ret

0000000000000a28 <gomp_ialias_omp_in_parallel>:
 a28:	adrp	x0, 0 <gomp_tls_data>
 a2c:	ldr	x0, [x0]
 a30:	mrs	x1, tpidr_el0
 a34:	add	x0, x1, x0
 a38:	ldr	w0, [x0, #48]
 a3c:	cmp	w0, #0x0
 a40:	cset	w0, ne  // ne = any
 a44:	ret

0000000000000a48 <gomp_ialias_omp_get_level>:
 a48:	adrp	x0, 0 <gomp_tls_data>
 a4c:	ldr	x0, [x0]
 a50:	mrs	x1, tpidr_el0
 a54:	add	x0, x1, x0
 a58:	ldr	w0, [x0, #44]
 a5c:	ret

0000000000000a60 <gomp_ialias_omp_get_ancestor_thread_num>:
 a60:	tbnz	w0, #31, aa8 <gomp_ialias_omp_get_ancestor_thread_num+0x48>
 a64:	adrp	x1, 0 <gomp_tls_data>
 a68:	ldr	x1, [x1]
 a6c:	mrs	x2, tpidr_el0
 a70:	add	x1, x2, x1
 a74:	ldr	w2, [x1, #44]
 a78:	cmp	w2, w0
 a7c:	b.cc	aa8 <gomp_ialias_omp_get_ancestor_thread_num+0x48>  // b.lo, b.ul, b.last
 a80:	sub	w2, w2, w0
 a84:	add	x0, x1, #0x10
 a88:	cmp	w2, #0x0
 a8c:	b.le	aa0 <gomp_ialias_omp_get_ancestor_thread_num+0x40>
 a90:	ldr	x0, [x0]
 a94:	subs	w2, w2, #0x1
 a98:	add	x0, x0, #0x8
 a9c:	b.ne	a90 <gomp_ialias_omp_get_ancestor_thread_num+0x30>  // b.any
 aa0:	ldr	w0, [x0, #24]
 aa4:	ret
 aa8:	mov	w0, #0xffffffff            	// #-1
 aac:	ret

0000000000000ab0 <gomp_ialias_omp_get_team_size>:
 ab0:	sub	sp, sp, #0x10
 ab4:	mov	w2, w0
 ab8:	str	w0, [sp, #12]
 abc:	tbnz	w2, #31, b18 <gomp_ialias_omp_get_team_size+0x68>
 ac0:	adrp	x0, 0 <gomp_tls_data>
 ac4:	ldr	x0, [x0]
 ac8:	mrs	x1, tpidr_el0
 acc:	add	x0, x1, x0
 ad0:	ldr	w1, [x0, #44]
 ad4:	cmp	w1, w2
 ad8:	b.cc	b18 <gomp_ialias_omp_get_team_size+0x68>  // b.lo, b.ul, b.last
 adc:	sub	w1, w1, w2
 ae0:	add	x0, x0, #0x10
 ae4:	cmp	w1, #0x0
 ae8:	b.le	b00 <gomp_ialias_omp_get_team_size+0x50>
 aec:	nop
 af0:	ldr	x0, [x0]
 af4:	subs	w1, w1, #0x1
 af8:	add	x0, x0, #0x8
 afc:	b.ne	af0 <gomp_ialias_omp_get_team_size+0x40>  // b.any
 b00:	ldr	x1, [x0]
 b04:	mov	w0, #0x1                   	// #1
 b08:	cbz	x1, b10 <gomp_ialias_omp_get_team_size+0x60>
 b0c:	ldr	w0, [x1]
 b10:	add	sp, sp, #0x10
 b14:	ret
 b18:	mov	w0, #0xffffffff            	// #-1
 b1c:	b	b10 <gomp_ialias_omp_get_team_size+0x60>

0000000000000b20 <gomp_ialias_omp_get_active_level>:
 b20:	adrp	x0, 0 <gomp_tls_data>
 b24:	ldr	x0, [x0]
 b28:	mrs	x1, tpidr_el0
 b2c:	add	x0, x1, x0
 b30:	ldr	w0, [x0, #48]
 b34:	ret

sections.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_sections_start>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	w19, w0
  10:	mov	x0, #0x0                   	// #0
  14:	bl	0 <gomp_work_share_start>
  18:	tst	w0, #0xff
  1c:	b.eq	78 <GOMP_sections_start+0x78>  // b.none
  20:	adrp	x2, 0 <gomp_tls_data>
  24:	ldr	x2, [x2]
  28:	mrs	x0, tpidr_el0
  2c:	mov	x4, #0x2                   	// #2
  30:	mov	x3, #0x1                   	// #1
  34:	add	x0, x0, x2
  38:	movk	x4, #0x1, lsl #32
  3c:	mov	w1, w19
  40:	add	x1, x1, #0x1
  44:	ldr	x2, [x0, #24]
  48:	stp	x4, x3, [x2]
  4c:	ldr	x0, [x0, #32]
  50:	stp	x1, x3, [x2, #16]
  54:	str	x3, [x2, #72]
  58:	cbz	x0, 78 <GOMP_sections_start+0x78>
  5c:	add	x0, x0, #0x50
  60:	ldxr	x1, [x0]
  64:	stlxr	w3, x2, [x0]
  68:	cbnz	w3, 60 <GOMP_sections_start+0x60>
  6c:	cmp	x1, #0x1
  70:	b.eq	78 <GOMP_sections_start+0x78>  // b.none
  74:	bl	0 <gomp_ptrlock_set_slow>
  78:	add	x1, sp, #0x28
  7c:	add	x0, sp, #0x20
  80:	bl	0 <gomp_iter_dynamic_next>
  84:	sxtb	w0, w0
  88:	ldr	w1, [sp, #32]
  8c:	cmp	w0, #0x0
  90:	mov	w2, #0x0                   	// #0
  94:	csel	w0, w1, w2, ne  // ne = any
  98:	ldr	x19, [sp, #16]
  9c:	ldp	x29, x30, [sp], #48
  a0:	ret
  a4:	nop

00000000000000a8 <GOMP_sections2_start>:
  a8:	stp	x29, x30, [sp, #-96]!
  ac:	mov	x29, sp
  b0:	stp	x19, x20, [sp, #16]
  b4:	mov	w19, w0
  b8:	mov	x20, x2
  bc:	stp	x21, x22, [sp, #32]
  c0:	cbz	x1, 1fc <GOMP_sections2_start+0x154>
  c4:	mov	x21, x1
  c8:	bl	0 <gomp_workshare_taskgroup_start>
  cc:	mov	x0, #0x0                   	// #0
  d0:	bl	0 <gomp_work_share_start>
  d4:	tst	w0, #0xff
  d8:	b.eq	184 <GOMP_sections2_start+0xdc>  // b.none
  dc:	stp	x23, x24, [sp, #48]
  e0:	mrs	x22, tpidr_el0
  e4:	adrp	x23, 0 <gomp_tls_data>
  e8:	ldr	x23, [x23]
  ec:	str	x25, [sp, #64]
  f0:	mov	x2, #0x2                   	// #2
  f4:	add	x25, x22, x23
  f8:	mov	x24, #0x1                   	// #1
  fc:	add	x19, x19, #0x1
 100:	movk	x2, #0x1, lsl #32
 104:	mov	x0, x21
 108:	ldr	x1, [x25, #24]
 10c:	stp	x2, x24, [x1]
 110:	stp	x19, x24, [x1, #16]
 114:	str	x24, [x1, #72]
 118:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
 11c:	ldr	x0, [x25, #80]
 120:	ldr	x19, [x25, #24]
 124:	ldr	x0, [x0, #40]
 128:	ldr	x25, [sp, #64]
 12c:	strb	w24, [x0, #50]
 130:	str	x21, [x19, #88]
 134:	cbz	x20, 150 <GOMP_sections2_start+0xa8>
 138:	ldr	x0, [x20]
 13c:	cmp	x0, #0x20
 140:	b.ls	248 <GOMP_sections2_start+0x1a0>  // b.plast
 144:	bl	0 <gomp_malloc_cleared>
 148:	str	x0, [x19, #32]
 14c:	str	x0, [x20]
 150:	add	x22, x22, x23
 154:	ldr	x0, [x22, #32]
 158:	cbz	x0, 1f4 <GOMP_sections2_start+0x14c>
 15c:	ldr	x2, [x22, #24]
 160:	add	x0, x0, #0x50
 164:	ldxr	x1, [x0]
 168:	stlxr	w3, x2, [x0]
 16c:	cbnz	w3, 164 <GOMP_sections2_start+0xbc>
 170:	cmp	x1, #0x1
 174:	b.eq	1f4 <GOMP_sections2_start+0x14c>  // b.none
 178:	bl	0 <gomp_ptrlock_set_slow>
 17c:	ldp	x23, x24, [sp, #48]
 180:	b	1c4 <GOMP_sections2_start+0x11c>
 184:	adrp	x2, 0 <gomp_tls_data>
 188:	ldr	x2, [x2]
 18c:	mrs	x1, tpidr_el0
 190:	mov	x0, x21
 194:	add	x1, x1, x2
 198:	ldr	x1, [x1, #24]
 19c:	ldr	x1, [x1, #88]
 1a0:	bl	0 <gomp_workshare_task_reduction_register>
 1a4:	cbz	x20, 1c4 <GOMP_sections2_start+0x11c>
 1a8:	adrp	x0, 0 <gomp_tls_data>
 1ac:	ldr	x0, [x0]
 1b0:	mrs	x1, tpidr_el0
 1b4:	add	x0, x1, x0
 1b8:	ldr	x0, [x0, #24]
 1bc:	ldr	x0, [x0, #32]
 1c0:	str	x0, [x20]
 1c4:	add	x1, sp, #0x58
 1c8:	add	x0, sp, #0x50
 1cc:	bl	0 <gomp_iter_dynamic_next>
 1d0:	sxtb	w0, w0
 1d4:	ldr	w1, [sp, #80]
 1d8:	cmp	w0, #0x0
 1dc:	mov	w2, #0x0                   	// #0
 1e0:	csel	w0, w1, w2, ne  // ne = any
 1e4:	ldp	x19, x20, [sp, #16]
 1e8:	ldp	x21, x22, [sp, #32]
 1ec:	ldp	x29, x30, [sp], #96
 1f0:	ret
 1f4:	ldp	x23, x24, [sp, #48]
 1f8:	b	1c4 <GOMP_sections2_start+0x11c>
 1fc:	mov	x0, #0x0                   	// #0
 200:	bl	0 <gomp_work_share_start>
 204:	tst	w0, #0xff
 208:	b.eq	1a4 <GOMP_sections2_start+0xfc>  // b.none
 20c:	stp	x23, x24, [sp, #48]
 210:	mrs	x22, tpidr_el0
 214:	adrp	x23, 0 <gomp_tls_data>
 218:	ldr	x23, [x23]
 21c:	mov	w0, w19
 220:	mov	x2, #0x2                   	// #2
 224:	add	x3, x22, x23
 228:	mov	x1, #0x1                   	// #1
 22c:	add	x0, x0, #0x1
 230:	movk	x2, #0x1, lsl #32
 234:	ldr	x19, [x3, #24]
 238:	stp	x2, x1, [x19]
 23c:	stp	x0, x1, [x19, #16]
 240:	str	x1, [x19, #72]
 244:	b	134 <GOMP_sections2_start+0x8c>
 248:	mov	x2, x0
 24c:	mov	w1, #0x0                   	// #0
 250:	add	x0, x19, #0x60
 254:	bl	0 <memset>
 258:	str	x0, [x20]
 25c:	b	150 <GOMP_sections2_start+0xa8>

0000000000000260 <GOMP_sections_next>:
 260:	stp	x29, x30, [sp, #-32]!
 264:	mov	x29, sp
 268:	add	x1, sp, #0x18
 26c:	add	x0, sp, #0x10
 270:	bl	0 <gomp_iter_dynamic_next>
 274:	sxtb	w1, w0
 278:	ldr	w2, [sp, #16]
 27c:	cmp	w1, #0x0
 280:	mov	w0, #0x0                   	// #0
 284:	ldp	x29, x30, [sp], #32
 288:	csel	w0, w2, w0, ne  // ne = any
 28c:	ret

0000000000000290 <GOMP_parallel_sections_start>:
 290:	stp	x29, x30, [sp, #-48]!
 294:	mov	x29, sp
 298:	stp	x19, x20, [sp, #16]
 29c:	mov	w19, w3
 2a0:	mov	x20, x0
 2a4:	stp	x21, x22, [sp, #32]
 2a8:	mov	x21, x1
 2ac:	mov	w1, w19
 2b0:	mov	w0, w2
 2b4:	bl	0 <gomp_resolve_num_threads>
 2b8:	mov	w22, w0
 2bc:	add	x19, x19, #0x1
 2c0:	bl	0 <gomp_new_team>
 2c4:	mov	x4, x0
 2c8:	mov	x8, #0x2                   	// #2
 2cc:	mov	x7, #0x1                   	// #1
 2d0:	movk	x8, #0x1, lsl #32
 2d4:	mov	w2, w22
 2d8:	stp	x8, x7, [x4, #256]
 2dc:	mov	x1, x21
 2e0:	mov	x0, x20
 2e4:	stp	x19, x7, [x4, #272]
 2e8:	mov	x5, #0x0                   	// #0
 2ec:	mov	w3, #0x0                   	// #0
 2f0:	str	x7, [x4, #328]
 2f4:	ldp	x19, x20, [sp, #16]
 2f8:	ldp	x21, x22, [sp, #32]
 2fc:	ldp	x29, x30, [sp], #48
 300:	b	0 <gomp_team_start>
 304:	nop

0000000000000308 <GOMP_parallel_sections>:
 308:	stp	x29, x30, [sp, #-64]!
 30c:	mov	x29, sp
 310:	stp	x19, x20, [sp, #16]
 314:	mov	w19, w3
 318:	mov	x20, x0
 31c:	stp	x21, x22, [sp, #32]
 320:	mov	x21, x1
 324:	mov	w1, w19
 328:	mov	w0, w2
 32c:	str	x23, [sp, #48]
 330:	mov	w23, w4
 334:	bl	0 <gomp_resolve_num_threads>
 338:	mov	w22, w0
 33c:	bl	0 <gomp_new_team>
 340:	mov	x4, x0
 344:	mov	x8, #0x2                   	// #2
 348:	mov	x7, #0x1                   	// #1
 34c:	mov	w3, w23
 350:	mov	w2, w22
 354:	mov	x1, x21
 358:	movk	x8, #0x1, lsl #32
 35c:	add	x19, x19, #0x1
 360:	stp	x8, x7, [x4, #256]
 364:	mov	x5, #0x0                   	// #0
 368:	mov	x0, x20
 36c:	stp	x19, x7, [x4, #272]
 370:	str	x7, [x4, #328]
 374:	bl	0 <gomp_team_start>
 378:	mov	x0, x21
 37c:	blr	x20
 380:	ldp	x19, x20, [sp, #16]
 384:	ldp	x21, x22, [sp, #32]
 388:	ldr	x23, [sp, #48]
 38c:	ldp	x29, x30, [sp], #64
 390:	b	0 <gomp_ialias_GOMP_parallel_end>
 394:	nop

0000000000000398 <GOMP_sections_end>:
 398:	b	0 <gomp_work_share_end>
 39c:	nop

00000000000003a0 <GOMP_sections_end_cancel>:
 3a0:	b	0 <gomp_work_share_end_cancel>
 3a4:	nop

00000000000003a8 <GOMP_sections_end_nowait>:
 3a8:	b	0 <gomp_work_share_end_nowait>

single.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_single_start>:
   0:	adrp	x0, 0 <gomp_tls_data>
   4:	ldr	x0, [x0]
   8:	mrs	x1, tpidr_el0
   c:	add	x0, x1, x0
  10:	ldr	x1, [x0, #16]
  14:	cbz	x1, 48 <GOMP_single_start+0x48>
  18:	ldr	x2, [x0, #64]
  1c:	add	x1, x1, #0x70
  20:	add	x3, x2, #0x1
  24:	str	x3, [x0, #64]
  28:	ldxr	x0, [x1]
  2c:	cmp	x0, x2
  30:	b.ne	3c <GOMP_single_start+0x3c>  // b.any
  34:	stlxr	w4, x3, [x1]
  38:	cbnz	w4, 28 <GOMP_single_start+0x28>
  3c:	cset	w0, eq  // eq = none
  40:	dmb	ish
  44:	ret
  48:	mov	w0, #0x1                   	// #1
  4c:	ret

0000000000000050 <GOMP_single_copy_start>:
  50:	stp	x29, x30, [sp, #-32]!
  54:	mov	x0, #0x0                   	// #0
  58:	mov	x29, sp
  5c:	str	x19, [sp, #16]
  60:	bl	0 <gomp_work_share_start>
  64:	tst	w0, #0xff
  68:	b.eq	cc <GOMP_single_copy_start+0x7c>  // b.none
  6c:	adrp	x1, 0 <gomp_tls_data>
  70:	ldr	x1, [x1]
  74:	mrs	x0, tpidr_el0
  78:	add	x1, x0, x1
  7c:	ldr	x0, [x1, #32]
  80:	cbz	x0, b8 <GOMP_single_copy_start+0x68>
  84:	ldr	x2, [x1, #24]
  88:	add	x0, x0, #0x50
  8c:	ldxr	x1, [x0]
  90:	stlxr	w3, x2, [x0]
  94:	cbnz	w3, 8c <GOMP_single_copy_start+0x3c>
  98:	cmp	x1, #0x1
  9c:	b.eq	b8 <GOMP_single_copy_start+0x68>  // b.none
  a0:	bl	0 <gomp_ptrlock_set_slow>
  a4:	mov	x19, #0x0                   	// #0
  a8:	mov	x0, x19
  ac:	ldr	x19, [sp, #16]
  b0:	ldp	x29, x30, [sp], #32
  b4:	ret
  b8:	mov	x19, #0x0                   	// #0
  bc:	mov	x0, x19
  c0:	ldr	x19, [sp, #16]
  c4:	ldp	x29, x30, [sp], #32
  c8:	ret
  cc:	adrp	x19, 0 <gomp_tls_data>
  d0:	ldr	x19, [x19]
  d4:	mrs	x0, tpidr_el0
  d8:	add	x19, x0, x19
  dc:	ldr	x0, [x19, #16]
  e0:	add	x0, x0, #0x80
  e4:	bl	0 <gomp_team_barrier_wait>
  e8:	ldr	x0, [x19, #24]
  ec:	ldr	x19, [x0, #72]
  f0:	bl	0 <gomp_work_share_end_nowait>
  f4:	mov	x0, x19
  f8:	ldr	x19, [sp, #16]
  fc:	ldp	x29, x30, [sp], #32
 100:	ret
 104:	nop

0000000000000108 <GOMP_single_copy_end>:
 108:	adrp	x1, 0 <gomp_tls_data>
 10c:	ldr	x1, [x1]
 110:	mrs	x2, tpidr_el0
 114:	add	x1, x2, x1
 118:	mov	x2, x0
 11c:	ldr	x0, [x1, #16]
 120:	cbz	x0, 144 <GOMP_single_copy_end+0x3c>
 124:	stp	x29, x30, [sp, #-16]!
 128:	add	x0, x0, #0x80
 12c:	mov	x29, sp
 130:	ldr	x1, [x1, #24]
 134:	str	x2, [x1, #72]
 138:	bl	0 <gomp_team_barrier_wait>
 13c:	ldp	x29, x30, [sp], #16
 140:	b	0 <gomp_work_share_end_nowait>
 144:	b	0 <gomp_work_share_end_nowait>

task.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <htab_find>:
       0:	ldr	w8, [x0, #24]
       4:	adrp	x5, 0 <htab_find>
       8:	add	x5, x5, #0x0
       c:	mov	x4, x0
      10:	ldr	x6, [x1]
      14:	lsl	x1, x8, #4
      18:	add	x3, x5, x1
      1c:	eor	x2, x6, x6, lsr #32
      20:	ldr	w7, [x5, x1]
      24:	ldr	w1, [x3, #4]
      28:	and	x10, x2, #0xffffffff
      2c:	ldr	w9, [x3, #12]
      30:	mul	x1, x1, x10
      34:	lsr	x0, x1, #32
      38:	sub	w1, w2, w0
      3c:	add	w1, w0, w1, lsr #1
      40:	lsr	w1, w1, w9
      44:	msub	w1, w1, w7, w2
      48:	add	x0, x4, w1, uxtw #3
      4c:	ldr	x0, [x0, #32]
      50:	cbz	x0, d4 <htab_find+0xd4>
      54:	cmp	x0, #0x1
      58:	b.eq	68 <htab_find+0x68>  // b.none
      5c:	ldr	x3, [x0]
      60:	cmp	x6, x3
      64:	b.eq	d0 <htab_find+0xd0>  // b.none
      68:	add	x8, x5, x8, lsl #4
      6c:	sub	w7, w7, #0x2
      70:	add	w11, w2, #0x1
      74:	ldr	x5, [x4]
      78:	ldr	w0, [x8, #8]
      7c:	mul	x0, x0, x10
      80:	lsr	x0, x0, #32
      84:	sub	w3, w2, w0
      88:	add	w3, w0, w3, lsr #1
      8c:	lsr	w3, w3, w9
      90:	msub	w3, w3, w7, w11
      94:	nop
      98:	add	w2, w1, w3
      9c:	mov	x1, x2
      a0:	cmp	x5, w2, uxtw
      a4:	b.hi	b0 <htab_find+0xb0>  // b.pmore
      a8:	sub	w2, w2, w5
      ac:	mov	x1, x2
      b0:	add	x2, x2, #0x4
      b4:	ldr	x0, [x4, x2, lsl #3]
      b8:	cmp	x0, #0x1
      bc:	cbz	x0, d4 <htab_find+0xd4>
      c0:	b.eq	98 <htab_find+0x98>  // b.none
      c4:	ldr	x2, [x0]
      c8:	cmp	x6, x2
      cc:	b.ne	98 <htab_find+0x98>  // b.any
      d0:	ret
      d4:	mov	x0, #0x0                   	// #0
      d8:	ret
      dc:	nop

00000000000000e0 <gomp_clear_parent_in_tree>:
      e0:	cbz	x1, 144 <gomp_clear_parent_in_tree+0x64>
      e4:	stp	x29, x30, [sp, #-48]!
      e8:	mov	x29, sp
      ec:	stp	x19, x20, [sp, #16]
      f0:	mov	x19, x1
      f4:	str	x21, [sp, #32]
      f8:	mov	x21, x0
      fc:	ldr	x3, [x19, #8]
     100:	mov	x0, x19
     104:	ldp	x20, x19, [x19, #24]
     108:	cbz	x3, 120 <gomp_clear_parent_in_tree+0x40>
     10c:	mov	x2, x3
     110:	stur	xzr, [x2, #-112]
     114:	ldr	x2, [x2]
     118:	cmp	x3, x2
     11c:	b.ne	110 <gomp_clear_parent_in_tree+0x30>  // b.any
     120:	bl	0 <free>
     124:	mov	x1, x20
     128:	mov	x0, x21
     12c:	bl	e0 <gomp_clear_parent_in_tree>
     130:	cbnz	x19, fc <gomp_clear_parent_in_tree+0x1c>
     134:	ldp	x19, x20, [sp, #16]
     138:	ldr	x21, [sp, #32]
     13c:	ldp	x29, x30, [sp], #48
     140:	ret
     144:	ret

0000000000000148 <find_empty_slot_for_expand>:
     148:	add	x4, x0, #0x20
     14c:	mov	x5, x0
     150:	ldr	w0, [x0, #24]
     154:	adrp	x2, 0 <htab_find>
     158:	add	x2, x2, #0x0
     15c:	lsl	x0, x0, #4
     160:	add	x7, x2, x0
     164:	ldr	w6, [x2, x0]
     168:	ldr	w2, [x7, #4]
     16c:	ldr	w8, [x7, #12]
     170:	umull	x2, w1, w2
     174:	lsr	x3, x2, #32
     178:	sub	w2, w1, w3
     17c:	add	w2, w3, w2, lsr #1
     180:	lsr	w2, w2, w8
     184:	msub	w2, w2, w6, w1
     188:	add	x0, x4, w2, uxtw #3
     18c:	ldr	x3, [x4, w2, uxtw #3]
     190:	cbz	x3, 1f4 <find_empty_slot_for_expand+0xac>
     194:	cmp	x3, #0x1
     198:	b.eq	1f8 <find_empty_slot_for_expand+0xb0>  // b.none
     19c:	ldr	w0, [x7, #8]
     1a0:	add	w3, w1, #0x1
     1a4:	sub	w6, w6, #0x2
     1a8:	ldr	x5, [x5]
     1ac:	umull	x0, w1, w0
     1b0:	lsr	x0, x0, #32
     1b4:	sub	w1, w1, w0
     1b8:	add	w1, w0, w1, lsr #1
     1bc:	lsr	w1, w1, w8
     1c0:	msub	w1, w1, w6, w3
     1c4:	b	1d0 <find_empty_slot_for_expand+0x88>
     1c8:	cmp	x3, #0x1
     1cc:	b.eq	1f8 <find_empty_slot_for_expand+0xb0>  // b.none
     1d0:	add	w0, w2, w1
     1d4:	mov	x2, x0
     1d8:	cmp	x5, w0, uxtw
     1dc:	b.hi	1e8 <find_empty_slot_for_expand+0xa0>  // b.pmore
     1e0:	sub	w0, w0, w5
     1e4:	mov	x2, x0
     1e8:	ldr	x3, [x4, x0, lsl #3]
     1ec:	add	x0, x4, x0, lsl #3
     1f0:	cbnz	x3, 1c8 <find_empty_slot_for_expand+0x80>
     1f4:	ret
     1f8:	stp	x29, x30, [sp, #-16]!
     1fc:	mov	x29, sp
     200:	bl	0 <abort>
     204:	nop

0000000000000208 <gomp_mutex_unlock>:
     208:	mov	x1, x0
     20c:	ldxr	w2, [x1]
     210:	stlxr	w3, wzr, [x1]
     214:	cbnz	w3, 20c <gomp_mutex_unlock+0x4>
     218:	tbnz	w2, #31, 220 <gomp_mutex_unlock+0x18>
     21c:	ret
     220:	b	0 <gomp_mutex_unlock_slow>
     224:	nop

0000000000000228 <gomp_create_artificial_team>:
     228:	stp	x29, x30, [sp, #-48]!
     22c:	mov	w0, #0x1                   	// #1
     230:	mov	x29, sp
     234:	stp	x19, x20, [sp, #16]
     238:	mrs	x19, tpidr_el0
     23c:	adrp	x20, 0 <gomp_tls_data>
     240:	ldr	x20, [x20]
     244:	stp	x21, x22, [sp, #32]
     248:	bl	0 <gomp_new_team>
     24c:	add	x1, x19, x20
     250:	movi	v0.4s, #0x0
     254:	adrp	x2, 0 <gomp_global_icv>
     258:	add	x2, x2, #0x0
     25c:	add	x6, x0, #0x5d0
     260:	ldr	x21, [x1, #80]
     264:	str	xzr, [x0, #1344]
     268:	ldp	x4, x5, [x1, #16]
     26c:	stp	x4, x5, [x0, #8]
     270:	add	x3, x21, #0x90
     274:	ldp	x4, x5, [x1, #32]
     278:	cmp	x21, #0x0
     27c:	stp	x4, x5, [x0, #24]
     280:	csel	x2, x2, x3, eq  // eq = none
     284:	add	x3, x0, #0x600
     288:	ldp	x4, x5, [x1, #48]
     28c:	stp	x4, x5, [x0, #40]
     290:	add	x22, x0, #0x540
     294:	ldp	x4, x5, [x1, #64]
     298:	stp	x4, x5, [x0, #56]
     29c:	add	x9, x0, #0x100
     2a0:	str	q0, [x1, #64]
     2a4:	ldp	x4, x5, [x2]
     2a8:	stp	x4, x5, [x6]
     2ac:	ldp	x4, x5, [x2, #16]
     2b0:	stp	x4, x5, [x6, #16]
     2b4:	ldr	x2, [x2, #32]
     2b8:	str	xzr, [x0, #1352]
     2bc:	str	x2, [x0, #1520]
     2c0:	str	xzr, [x0, #1544]
     2c4:	stp	x0, x9, [x1, #16]
     2c8:	stur	q0, [x3, #-168]
     2cc:	stur	q0, [x3, #-152]
     2d0:	stur	q0, [x3, #-136]
     2d4:	str	xzr, [x1, #32]
     2d8:	str	wzr, [x1, #40]
     2dc:	str	xzr, [x22, #72]
     2e0:	str	x22, [x1, #80]
     2e4:	cbz	x21, 310 <gomp_create_artificial_team+0xe8>
     2e8:	ldr	x0, [x21, #56]
     2ec:	cbnz	x0, 328 <gomp_create_artificial_team+0x100>
     2f0:	add	x19, x19, x20
     2f4:	mov	x0, x21
     2f8:	bl	0 <free>
     2fc:	str	x22, [x19, #80]
     300:	ldp	x19, x20, [sp, #16]
     304:	ldp	x21, x22, [sp, #32]
     308:	ldp	x29, x30, [sp], #48
     30c:	ret
     310:	adrp	x0, 0 <gomp_thread_destructor>
     314:	ldp	x19, x20, [sp, #16]
     318:	ldp	x21, x22, [sp, #32]
     31c:	ldp	x29, x30, [sp], #48
     320:	ldr	w0, [x0]
     324:	b	0 <pthread_setspecific>
     328:	bl	0 <free>
     32c:	b	2f0 <gomp_create_artificial_team+0xc8>

0000000000000330 <gomp_task_run_post_handle_depend_hash>:
     330:	ldr	x7, [x0, #72]
     334:	ldr	x11, [x0]
     338:	cbz	x7, 388 <gomp_task_run_post_handle_depend_hash+0x58>
     33c:	add	x9, x0, #0xd0
     340:	adrp	x8, 0 <htab_find>
     344:	mov	x1, x9
     348:	add	x8, x8, #0x0
     34c:	mov	x6, #0x0                   	// #0
     350:	mov	x10, #0x1                   	// #1
     354:	nop
     358:	ldrb	w0, [x1, #33]
     35c:	cbnz	w0, 378 <gomp_task_run_post_handle_depend_hash+0x48>
     360:	ldp	x12, x0, [x1, #8]
     364:	cbz	x12, 370 <gomp_task_run_post_handle_depend_hash+0x40>
     368:	str	x0, [x12, #16]
     36c:	ldr	x0, [x1, #16]
     370:	cbz	x0, 38c <gomp_task_run_post_handle_depend_hash+0x5c>
     374:	str	x12, [x0, #8]
     378:	add	x6, x6, #0x1
     37c:	add	x1, x1, #0x28
     380:	cmp	x7, x6
     384:	b.ne	358 <gomp_task_run_post_handle_depend_hash+0x28>  // b.any
     388:	ret
     38c:	stp	x29, x30, [sp, #-16]!
     390:	mov	x29, sp
     394:	ldr	x13, [x11, #56]
     398:	ldr	x14, [x1]
     39c:	ldr	w16, [x13, #24]
     3a0:	eor	x3, x14, x14, lsr #32
     3a4:	lsl	x0, x16, #4
     3a8:	and	x18, x3, #0xffffffff
     3ac:	add	x4, x8, x0
     3b0:	ldr	w15, [x8, x0]
     3b4:	ldr	w0, [x4, #4]
     3b8:	ldr	w17, [x4, #12]
     3bc:	mul	x0, x0, x18
     3c0:	lsr	x0, x0, #32
     3c4:	sub	w2, w3, w0
     3c8:	add	w0, w0, w2, lsr #1
     3cc:	lsr	w0, w0, w17
     3d0:	msub	w2, w0, w15, w3
     3d4:	mov	x0, x2
     3d8:	add	x2, x2, #0x4
     3dc:	ldr	x4, [x13, x2, lsl #3]
     3e0:	cbz	x4, 4fc <gomp_task_run_post_handle_depend_hash+0x1cc>
     3e4:	cmp	x4, #0x1
     3e8:	ldr	x5, [x13]
     3ec:	b.eq	3fc <gomp_task_run_post_handle_depend_hash+0xcc>  // b.none
     3f0:	ldr	x4, [x4]
     3f4:	cmp	x14, x4
     3f8:	b.eq	460 <gomp_task_run_post_handle_depend_hash+0x130>  // b.none
     3fc:	add	x16, x8, x16, lsl #4
     400:	sub	w15, w15, #0x2
     404:	add	w30, w3, #0x1
     408:	ldr	w2, [x16, #8]
     40c:	mul	x2, x2, x18
     410:	lsr	x2, x2, #32
     414:	sub	w4, w3, w2
     418:	add	w4, w2, w4, lsr #1
     41c:	lsr	w4, w4, w17
     420:	msub	w4, w4, w15, w30
     424:	nop
     428:	add	w2, w0, w4
     42c:	mov	x0, x2
     430:	cmp	x5, w2, uxtw
     434:	b.hi	440 <gomp_task_run_post_handle_depend_hash+0x110>  // b.pmore
     438:	sub	w2, w2, w5
     43c:	mov	x0, x2
     440:	add	x2, x2, #0x4
     444:	ldr	x3, [x13, x2, lsl #3]
     448:	cbz	x3, 4fc <gomp_task_run_post_handle_depend_hash+0x1cc>
     44c:	cmp	x3, #0x1
     450:	b.eq	428 <gomp_task_run_post_handle_depend_hash+0xf8>  // b.none
     454:	ldr	x3, [x3]
     458:	cmp	x14, x3
     45c:	b.ne	428 <gomp_task_run_post_handle_depend_hash+0xf8>  // b.any
     460:	add	x2, x13, x2, lsl #3
     464:	add	x0, x6, x6, lsl #2
     468:	add	x0, x9, x0, lsl #3
     46c:	ldr	x3, [x2]
     470:	cmp	x3, x0
     474:	b.ne	4f8 <gomp_task_run_post_handle_depend_hash+0x1c8>  // b.any
     478:	cbz	x12, 4c8 <gomp_task_run_post_handle_depend_hash+0x198>
     47c:	str	x12, [x2]
     480:	add	x6, x6, #0x1
     484:	add	x1, x1, #0x28
     488:	cmp	x7, x6
     48c:	b.eq	4c0 <gomp_task_run_post_handle_depend_hash+0x190>  // b.none
     490:	ldrb	w0, [x1, #33]
     494:	cbnz	w0, 480 <gomp_task_run_post_handle_depend_hash+0x150>
     498:	ldp	x12, x0, [x1, #8]
     49c:	cbz	x12, 4a8 <gomp_task_run_post_handle_depend_hash+0x178>
     4a0:	str	x0, [x12, #16]
     4a4:	ldr	x0, [x1, #16]
     4a8:	cbz	x0, 394 <gomp_task_run_post_handle_depend_hash+0x64>
     4ac:	str	x12, [x0, #8]
     4b0:	add	x6, x6, #0x1
     4b4:	add	x1, x1, #0x28
     4b8:	cmp	x7, x6
     4bc:	b.ne	490 <gomp_task_run_post_handle_depend_hash+0x160>  // b.any
     4c0:	ldp	x29, x30, [sp], #16
     4c4:	ret
     4c8:	add	x0, x13, #0x20
     4cc:	cmp	x2, x0
     4d0:	b.cc	4f8 <gomp_task_run_post_handle_depend_hash+0x1c8>  // b.lo, b.ul, b.last
     4d4:	add	x5, x0, x5, lsl #3
     4d8:	cmp	x2, x5
     4dc:	ccmp	x3, #0x1, #0x4, cc  // cc = lo, ul, last
     4e0:	b.eq	4f8 <gomp_task_run_post_handle_depend_hash+0x1c8>  // b.none
     4e4:	ldr	x0, [x13, #16]
     4e8:	str	x10, [x2]
     4ec:	add	x0, x0, #0x1
     4f0:	str	x0, [x13, #16]
     4f4:	b	480 <gomp_task_run_post_handle_depend_hash+0x150>
     4f8:	bl	0 <abort>
     4fc:	mov	x0, #0x0                   	// #0
     500:	ldr	x0, [x0]
     504:	brk	#0x3e8

0000000000000508 <gomp_task_run_pre>:
     508:	stp	x29, x30, [sp, #-80]!
     50c:	mov	x29, sp
     510:	stp	x19, x20, [sp, #16]
     514:	mov	x19, x0
     518:	mov	x20, x2
     51c:	stp	x21, x22, [sp, #32]
     520:	cbz	x1, 55c <gomp_task_run_pre+0x54>
     524:	add	x21, x0, #0x70
     528:	ldr	x0, [x1, #8]
     52c:	cbnz	x0, 65c <gomp_task_run_pre+0x154>
     530:	ldr	x0, [x1, #24]
     534:	ldr	x2, [x19, #112]
     538:	cmp	x21, x0
     53c:	b.eq	77c <gomp_task_run_pre+0x274>  // b.none
     540:	cmp	x0, x2
     544:	b.eq	554 <gomp_task_run_pre+0x4c>  // b.none
     548:	ldr	w3, [x2, #88]
     54c:	cmp	w3, #0x2
     550:	b.eq	614 <gomp_task_run_pre+0x10c>  // b.none
     554:	ldrb	w0, [x19, #207]
     558:	cbnz	w0, 818 <gomp_task_run_pre+0x310>
     55c:	ldr	x21, [x19, #40]
     560:	cbz	x21, 59c <gomp_task_run_pre+0x94>
     564:	ldr	x0, [x21, #8]
     568:	add	x22, x19, #0x80
     56c:	cbnz	x0, 6ec <gomp_task_run_pre+0x1e4>
     570:	ldr	x0, [x21, #24]
     574:	ldr	x1, [x19, #128]
     578:	cmp	x22, x0
     57c:	b.eq	78c <gomp_task_run_pre+0x284>  // b.none
     580:	cmp	x1, x0
     584:	b.eq	594 <gomp_task_run_pre+0x8c>  // b.none
     588:	ldr	w2, [x1, #72]
     58c:	cmp	w2, #0x2
     590:	b.eq	638 <gomp_task_run_pre+0x130>  // b.none
     594:	ldrb	w0, [x19, #207]
     598:	cbnz	w0, 7ec <gomp_task_run_pre+0x2e4>
     59c:	ldr	x0, [x20, #1288]
     5a0:	add	x2, x19, #0x60
     5a4:	cbnz	x0, 79c <gomp_task_run_pre+0x294>
     5a8:	ldp	x0, x1, [x19, #96]
     5ac:	ldr	x4, [x20, #1304]
     5b0:	cmp	x2, x4
     5b4:	str	x0, [x1]
     5b8:	str	x1, [x0, #8]
     5bc:	b.eq	604 <gomp_task_run_pre+0xfc>  // b.none
     5c0:	ldr	w0, [x20, #1324]
     5c4:	mov	w1, #0x3                   	// #3
     5c8:	stp	xzr, xzr, [x19, #96]
     5cc:	sub	w0, w0, #0x1
     5d0:	str	w1, [x19, #200]
     5d4:	str	w0, [x20, #1324]
     5d8:	cbnz	w0, 5e8 <gomp_task_run_pre+0xe0>
     5dc:	ldr	w0, [x20, #132]
     5e0:	and	w0, w0, #0xfffffffe
     5e4:	str	w0, [x20, #132]
     5e8:	adrp	x0, 0 <gomp_cancel_var>
     5ec:	ldrb	w0, [x0]
     5f0:	cbnz	w0, 7ac <gomp_task_run_pre+0x2a4>
     5f4:	ldp	x19, x20, [sp, #16]
     5f8:	ldp	x21, x22, [sp, #32]
     5fc:	ldp	x29, x30, [sp], #80
     600:	ret
     604:	cmp	x2, x0
     608:	csel	x0, x0, xzr, ne  // ne = any
     60c:	str	x0, [x20, #1304]
     610:	b	5c0 <gomp_task_run_pre+0xb8>
     614:	ldr	x3, [x19, #120]
     618:	str	x2, [x3]
     61c:	str	x3, [x2, #8]
     620:	ldr	x2, [x0, #8]
     624:	stp	x0, x2, [x19, #112]
     628:	ldr	x2, [x0, #8]
     62c:	str	x21, [x2]
     630:	str	x21, [x0, #8]
     634:	b	554 <gomp_task_run_pre+0x4c>
     638:	ldr	x2, [x19, #136]
     63c:	str	x1, [x2]
     640:	str	x2, [x1, #8]
     644:	ldr	x1, [x0, #8]
     648:	stp	x0, x1, [x19, #128]
     64c:	ldr	x1, [x0, #8]
     650:	str	x22, [x1]
     654:	str	x22, [x0, #8]
     658:	b	594 <gomp_task_run_pre+0x8c>
     65c:	ldr	w2, [x19, #88]
     660:	add	x0, x1, #0x8
     664:	add	x1, sp, #0x38
     668:	str	w2, [sp, #56]
     66c:	bl	0 <prio_splay_tree_lookup>
     670:	ldr	x1, [x0, #8]
     674:	cmp	x21, x1
     678:	b.eq	844 <gomp_task_run_pre+0x33c>  // b.none
     67c:	ldr	x2, [x19, #112]
     680:	cmp	x1, x2
     684:	b.eq	6b8 <gomp_task_run_pre+0x1b0>  // b.none
     688:	ldr	w3, [x2, #88]
     68c:	cmp	w3, #0x2
     690:	b.ne	6b8 <gomp_task_run_pre+0x1b0>  // b.any
     694:	ldr	x3, [x19, #120]
     698:	str	x2, [x3]
     69c:	ldr	x2, [x19, #112]
     6a0:	str	x3, [x2, #8]
     6a4:	ldr	x2, [x1, #8]
     6a8:	stp	x1, x2, [x19, #112]
     6ac:	ldr	x2, [x1, #8]
     6b0:	str	x21, [x2]
     6b4:	str	x21, [x1, #8]
     6b8:	ldrb	w1, [x19, #207]
     6bc:	cbz	w1, 55c <gomp_task_run_pre+0x54>
     6c0:	ldr	x1, [x0, #16]
     6c4:	cmp	x21, x1
     6c8:	b.ne	55c <gomp_task_run_pre+0x54>  // b.any
     6cc:	ldr	x1, [x19, #120]
     6d0:	cmp	x21, x1
     6d4:	b.eq	6e4 <gomp_task_run_pre+0x1dc>  // b.none
     6d8:	ldr	w3, [x1, #88]
     6dc:	cmp	w3, #0x2
     6e0:	b.eq	88c <gomp_task_run_pre+0x384>  // b.none
     6e4:	str	xzr, [x0, #16]
     6e8:	b	55c <gomp_task_run_pre+0x54>
     6ec:	ldr	w2, [x19, #88]
     6f0:	add	x1, sp, #0x38
     6f4:	add	x0, x21, #0x8
     6f8:	str	w2, [sp, #56]
     6fc:	bl	0 <prio_splay_tree_lookup>
     700:	ldr	x1, [x0, #8]
     704:	cmp	x22, x1
     708:	b.eq	850 <gomp_task_run_pre+0x348>  // b.none
     70c:	ldr	x2, [x19, #128]
     710:	cmp	x1, x2
     714:	b.eq	748 <gomp_task_run_pre+0x240>  // b.none
     718:	ldr	w3, [x2, #72]
     71c:	cmp	w3, #0x2
     720:	b.ne	748 <gomp_task_run_pre+0x240>  // b.any
     724:	ldr	x3, [x19, #136]
     728:	str	x2, [x3]
     72c:	ldr	x2, [x19, #128]
     730:	str	x3, [x2, #8]
     734:	ldr	x2, [x1, #8]
     738:	stp	x1, x2, [x19, #128]
     73c:	ldr	x2, [x1, #8]
     740:	str	x22, [x2]
     744:	str	x22, [x1, #8]
     748:	ldrb	w1, [x19, #207]
     74c:	cbz	w1, 59c <gomp_task_run_pre+0x94>
     750:	ldr	x1, [x0, #16]
     754:	cmp	x22, x1
     758:	b.ne	59c <gomp_task_run_pre+0x94>  // b.any
     75c:	ldr	x1, [x19, #136]
     760:	cmp	x22, x1
     764:	b.eq	774 <gomp_task_run_pre+0x26c>  // b.none
     768:	ldr	w3, [x1, #72]
     76c:	cmp	w3, #0x2
     770:	b.eq	87c <gomp_task_run_pre+0x374>  // b.none
     774:	str	xzr, [x0, #16]
     778:	b	59c <gomp_task_run_pre+0x94>
     77c:	ldrb	w0, [x19, #207]
     780:	str	x2, [x1, #24]
     784:	cbz	w0, 55c <gomp_task_run_pre+0x54>
     788:	b	818 <gomp_task_run_pre+0x310>
     78c:	ldrb	w0, [x19, #207]
     790:	str	x1, [x21, #24]
     794:	cbz	w0, 59c <gomp_task_run_pre+0x94>
     798:	b	7ec <gomp_task_run_pre+0x2e4>
     79c:	add	x1, x20, #0x508
     7a0:	mov	w0, #0x0                   	// #0
     7a4:	bl	0 <priority_tree_remove>
     7a8:	b	5c0 <gomp_task_run_pre+0xb8>
     7ac:	ldrb	w1, [x19, #206]
     7b0:	cbnz	w1, 7e4 <gomp_task_run_pre+0x2dc>
     7b4:	ldr	w1, [x20, #132]
     7b8:	tbnz	w1, #2, 5f4 <gomp_task_run_pre+0xec>
     7bc:	mov	w0, #0x0                   	// #0
     7c0:	cbz	x21, 5f4 <gomp_task_run_pre+0xec>
     7c4:	ldrb	w0, [x21, #49]
     7c8:	cbnz	w0, 5f4 <gomp_task_run_pre+0xec>
     7cc:	ldrb	w1, [x21, #50]
     7d0:	cbz	w1, 5f4 <gomp_task_run_pre+0xec>
     7d4:	ldr	x1, [x21]
     7d8:	cbz	x1, 5f4 <gomp_task_run_pre+0xec>
     7dc:	ldrb	w0, [x1, #49]
     7e0:	b	5f4 <gomp_task_run_pre+0xec>
     7e4:	mov	w0, #0x0                   	// #0
     7e8:	b	5f4 <gomp_task_run_pre+0xec>
     7ec:	ldr	x0, [x21, #32]
     7f0:	cmp	x22, x0
     7f4:	b.ne	59c <gomp_task_run_pre+0x94>  // b.any
     7f8:	ldr	x0, [x19, #136]
     7fc:	cmp	x22, x0
     800:	b.eq	810 <gomp_task_run_pre+0x308>  // b.none
     804:	ldr	w2, [x0, #72]
     808:	cmp	w2, #0x2
     80c:	b.eq	85c <gomp_task_run_pre+0x354>  // b.none
     810:	str	xzr, [x21, #32]
     814:	b	59c <gomp_task_run_pre+0x94>
     818:	ldr	x0, [x1, #32]
     81c:	cmp	x21, x0
     820:	b.ne	55c <gomp_task_run_pre+0x54>  // b.any
     824:	ldr	x0, [x19, #120]
     828:	cmp	x21, x0
     82c:	b.eq	83c <gomp_task_run_pre+0x334>  // b.none
     830:	ldr	w3, [x0, #88]
     834:	cmp	w3, #0x2
     838:	b.eq	86c <gomp_task_run_pre+0x364>  // b.none
     83c:	str	xzr, [x1, #32]
     840:	b	55c <gomp_task_run_pre+0x54>
     844:	ldr	x1, [x19, #112]
     848:	str	x1, [x0, #8]
     84c:	b	6b8 <gomp_task_run_pre+0x1b0>
     850:	ldr	x1, [x19, #128]
     854:	str	x1, [x0, #8]
     858:	b	748 <gomp_task_run_pre+0x240>
     85c:	ldrb	w1, [x0, #79]
     860:	cbz	w1, 810 <gomp_task_run_pre+0x308>
     864:	str	x0, [x21, #32]
     868:	b	59c <gomp_task_run_pre+0x94>
     86c:	ldrb	w2, [x0, #95]
     870:	cbz	w2, 83c <gomp_task_run_pre+0x334>
     874:	str	x0, [x1, #32]
     878:	b	55c <gomp_task_run_pre+0x54>
     87c:	ldrb	w2, [x1, #79]
     880:	cbz	w2, 774 <gomp_task_run_pre+0x26c>
     884:	str	x1, [x0, #16]
     888:	b	59c <gomp_task_run_pre+0x94>
     88c:	ldrb	w2, [x1, #95]
     890:	cbz	w2, 6e4 <gomp_task_run_pre+0x1dc>
     894:	str	x1, [x0, #16]
     898:	b	55c <gomp_task_run_pre+0x54>
     89c:	nop

00000000000008a0 <gomp_task_run_post_handle_dependers>:
     8a0:	stp	x29, x30, [sp, #-176]!
     8a4:	mov	x29, sp
     8a8:	stp	x25, x26, [sp, #64]
     8ac:	mov	x25, x0
     8b0:	ldr	x0, [x0, #48]
     8b4:	stp	x23, x24, [sp, #48]
     8b8:	stp	x27, x28, [sp, #80]
     8bc:	ldr	x26, [x0]
     8c0:	ldr	x24, [x25]
     8c4:	cbz	x26, e30 <gomp_task_run_post_handle_dependers+0x590>
     8c8:	str	d8, [sp, #96]
     8cc:	movi	v8.2s, #0x1
     8d0:	mov	x27, #0x0                   	// #0
     8d4:	stp	x19, x20, [sp, #16]
     8d8:	mov	x20, #0x0                   	// #0
     8dc:	stp	x21, x22, [sp, #32]
     8e0:	mov	x21, x1
     8e4:	add	x1, x1, #0x508
     8e8:	str	x1, [sp, #120]
     8ec:	nop
     8f0:	add	x1, x20, #0x2
     8f4:	ldr	x19, [x0, x1, lsl #3]
     8f8:	ldr	x2, [x19, #80]
     8fc:	sub	x2, x2, #0x1
     900:	str	x2, [x19, #80]
     904:	cbnz	x2, a20 <gomp_task_run_post_handle_dependers+0x180>
     908:	ldr	w23, [x19, #88]
     90c:	ldr	x22, [x19, #40]
     910:	cbz	x24, 990 <gomp_task_run_post_handle_dependers+0xf0>
     914:	ldr	x0, [x24, #8]
     918:	add	x4, x24, #0x8
     91c:	ldrb	w2, [x19, #207]
     920:	add	x28, x19, #0x70
     924:	cbnz	x0, c20 <gomp_task_run_post_handle_dependers+0x380>
     928:	cmp	w23, #0x0
     92c:	ldr	x0, [x24, #24]
     930:	b.gt	bd8 <gomp_task_run_post_handle_dependers+0x338>
     934:	cbz	x0, b38 <gomp_task_run_post_handle_dependers+0x298>
     938:	ldr	x1, [x24, #32]
     93c:	cmp	x1, #0x0
     940:	ccmp	w2, #0x0, #0x0, ne  // ne = any
     944:	b.eq	d78 <gomp_task_run_post_handle_dependers+0x4d8>  // b.none
     948:	ldr	x1, [x0, #8]
     94c:	stp	x0, x1, [x19, #112]
     950:	str	x28, [x24, #24]
     954:	ldr	x0, [x19, #112]
     958:	str	x28, [x0, #8]
     95c:	ldr	x0, [x19, #120]
     960:	str	x28, [x0]
     964:	ldr	x0, [x24, #32]
     968:	cmp	x0, #0x0
     96c:	ccmp	w2, #0x0, #0x4, eq  // eq = none
     970:	b.ne	b54 <gomp_task_run_post_handle_dependers+0x2b4>  // b.any
     974:	ldr	x0, [x24, #64]
     978:	cbz	x0, 98c <gomp_task_run_post_handle_dependers+0xec>
     97c:	ldrb	w1, [x0]
     980:	cbnz	w1, b5c <gomp_task_run_post_handle_dependers+0x2bc>
     984:	ldrb	w1, [x0, #1]
     988:	cbnz	w1, b98 <gomp_task_run_post_handle_dependers+0x2f8>
     98c:	ldr	w23, [x19, #88]
     990:	cbz	x22, 9dc <gomp_task_run_post_handle_dependers+0x13c>
     994:	ldr	x0, [x22, #8]
     998:	add	x2, x22, #0x8
     99c:	add	x28, x19, #0x80
     9a0:	cbnz	x0, cd0 <gomp_task_run_post_handle_dependers+0x430>
     9a4:	cmp	w23, #0x0
     9a8:	ldr	x0, [x22, #24]
     9ac:	b.gt	c90 <gomp_task_run_post_handle_dependers+0x3f0>
     9b0:	cbz	x0, b28 <gomp_task_run_post_handle_dependers+0x288>
     9b4:	ldr	x1, [x0, #8]
     9b8:	stp	x0, x1, [x19, #128]
     9bc:	str	x28, [x22, #24]
     9c0:	ldr	x0, [x19, #128]
     9c4:	str	x28, [x0, #8]
     9c8:	ldr	x0, [x19, #136]
     9cc:	str	x28, [x0]
     9d0:	ldrb	w0, [x22, #48]
     9d4:	cbnz	w0, a6c <gomp_task_run_post_handle_dependers+0x1cc>
     9d8:	ldr	w23, [x19, #88]
     9dc:	ldr	x0, [x21, #1288]
     9e0:	add	x22, x19, #0x60
     9e4:	cbnz	x0, af4 <gomp_task_run_post_handle_dependers+0x254>
     9e8:	cmp	w23, #0x0
     9ec:	ldr	x0, [x21, #1304]
     9f0:	b.gt	ab8 <gomp_task_run_post_handle_dependers+0x218>
     9f4:	cbz	x0, aa8 <gomp_task_run_post_handle_dependers+0x208>
     9f8:	ldr	x1, [x0, #8]
     9fc:	stp	x0, x1, [x19, #96]
     a00:	str	x22, [x0, #8]
     a04:	ldr	x0, [x19, #104]
     a08:	str	x22, [x0]
     a0c:	ldr	d0, [x21, #1320]
     a10:	add	x27, x27, #0x1
     a14:	ldr	x0, [x25, #48]
     a18:	add	v0.2s, v0.2s, v8.2s
     a1c:	str	d0, [x21, #1320]
     a20:	add	x20, x20, #0x1
     a24:	cmp	x26, x20
     a28:	b.ne	8f0 <gomp_task_run_post_handle_dependers+0x50>  // b.any
     a2c:	bl	0 <free>
     a30:	str	xzr, [x25, #48]
     a34:	cmp	x27, #0x1
     a38:	b.ls	d54 <gomp_task_run_post_handle_dependers+0x4b4>  // b.plast
     a3c:	ldr	w0, [x21, #132]
     a40:	ldp	x19, x20, [sp, #16]
     a44:	orr	w0, w0, #0x1
     a48:	ldr	d8, [sp, #96]
     a4c:	str	w0, [x21, #132]
     a50:	mov	x0, x27
     a54:	ldp	x21, x22, [sp, #32]
     a58:	ldp	x23, x24, [sp, #48]
     a5c:	ldp	x25, x26, [sp, #64]
     a60:	ldp	x27, x28, [sp, #80]
     a64:	ldp	x29, x30, [sp], #176
     a68:	ret
     a6c:	ldr	w1, [x22, #52]
     a70:	add	x0, x22, #0x34
     a74:	strb	wzr, [x22, #48]
     a78:	add	w2, w1, #0x1
     a7c:	and	w2, w2, #0x7fffffff
     a80:	ldxr	w4, [x0]
     a84:	cmp	w4, w1
     a88:	b.ne	a94 <gomp_task_run_post_handle_dependers+0x1f4>  // b.any
     a8c:	stlxr	w3, w2, [x0]
     a90:	cmp	w3, #0x0
     a94:	mov	w1, w4
     a98:	b.ne	a78 <gomp_task_run_post_handle_dependers+0x1d8>  // b.any
     a9c:	tbz	w4, #31, 9d8 <gomp_task_run_post_handle_dependers+0x138>
     aa0:	bl	0 <gomp_sem_post_slow>
     aa4:	b	9d8 <gomp_task_run_post_handle_dependers+0x138>
     aa8:	dup	v0.2d, x22
     aac:	str	q0, [x19, #96]
     ab0:	str	x22, [x21, #1304]
     ab4:	b	a0c <gomp_task_run_post_handle_dependers+0x16c>
     ab8:	cbz	x0, d14 <gomp_task_run_post_handle_dependers+0x474>
     abc:	mov	x0, #0x28                  	// #40
     ac0:	bl	0 <gomp_malloc>
     ac4:	add	x2, x21, #0x600
     ac8:	mov	x1, x0
     acc:	stp	xzr, xzr, [x0, #24]
     ad0:	ldur	q0, [x2, #-232]
     ad4:	str	wzr, [x1]
     ad8:	ldr	x28, [sp, #120]
     adc:	stur	q0, [x1, #8]
     ae0:	mov	x0, x28
     ae4:	bl	0 <prio_splay_tree_insert>
     ae8:	str	xzr, [x28, #16]
     aec:	ldr	x0, [x28]
     af0:	cbz	x0, d14 <gomp_task_run_post_handle_dependers+0x474>
     af4:	ldr	x0, [sp, #120]
     af8:	add	x1, sp, #0x98
     afc:	str	w23, [sp, #152]
     b00:	bl	0 <prio_splay_tree_lookup>
     b04:	cbz	x0, d14 <gomp_task_run_post_handle_dependers+0x474>
     b08:	ldr	x1, [x0, #8]
     b0c:	cbz	x1, d44 <gomp_task_run_post_handle_dependers+0x4a4>
     b10:	ldr	x0, [x1, #8]
     b14:	stp	x1, x0, [x19, #96]
     b18:	str	x22, [x1, #8]
     b1c:	ldr	x0, [x19, #104]
     b20:	str	x22, [x0]
     b24:	b	a0c <gomp_task_run_post_handle_dependers+0x16c>
     b28:	dup	v0.2d, x28
     b2c:	str	q0, [x19, #128]
     b30:	str	x28, [x22, #24]
     b34:	b	9d0 <gomp_task_run_post_handle_dependers+0x130>
     b38:	dup	v0.2d, x28
     b3c:	str	q0, [x19, #112]
     b40:	ldr	x0, [x24, #32]
     b44:	str	x28, [x24, #24]
     b48:	cmp	x0, #0x0
     b4c:	ccmp	w2, #0x0, #0x4, eq  // eq = none
     b50:	b.eq	974 <gomp_task_run_post_handle_dependers+0xd4>  // b.none
     b54:	str	x28, [x24, #32]
     b58:	b	974 <gomp_task_run_post_handle_dependers+0xd4>
     b5c:	ldr	w1, [x0, #16]
     b60:	strb	wzr, [x0], #16
     b64:	add	w2, w1, #0x1
     b68:	and	w2, w2, #0x7fffffff
     b6c:	ldxr	w4, [x0]
     b70:	cmp	w4, w1
     b74:	b.ne	b80 <gomp_task_run_post_handle_dependers+0x2e0>  // b.any
     b78:	stlxr	w3, w2, [x0]
     b7c:	cmp	w3, #0x0
     b80:	mov	w1, w4
     b84:	b.ne	b64 <gomp_task_run_post_handle_dependers+0x2c4>  // b.any
     b88:	tbz	w4, #31, 98c <gomp_task_run_post_handle_dependers+0xec>
     b8c:	bl	0 <gomp_sem_post_slow>
     b90:	ldr	w23, [x19, #88]
     b94:	b	990 <gomp_task_run_post_handle_dependers+0xf0>
     b98:	ldr	w1, [x0, #16]
     b9c:	add	x4, x0, #0x10
     ba0:	strb	wzr, [x0, #1]
     ba4:	add	w2, w1, #0x1
     ba8:	and	w2, w2, #0x7fffffff
     bac:	ldxr	w0, [x4]
     bb0:	cmp	w0, w1
     bb4:	b.ne	bc0 <gomp_task_run_post_handle_dependers+0x320>  // b.any
     bb8:	stlxr	w3, w2, [x4]
     bbc:	cmp	w3, #0x0
     bc0:	mov	w1, w0
     bc4:	b.ne	ba4 <gomp_task_run_post_handle_dependers+0x304>  // b.any
     bc8:	tbz	w0, #31, 98c <gomp_task_run_post_handle_dependers+0xec>
     bcc:	mov	x0, x4
     bd0:	bl	0 <gomp_sem_post_slow>
     bd4:	b	b90 <gomp_task_run_post_handle_dependers+0x2f0>
     bd8:	cbz	x0, d84 <gomp_task_run_post_handle_dependers+0x4e4>
     bdc:	mov	x0, #0x28                  	// #40
     be0:	str	x4, [sp, #128]
     be4:	str	w2, [sp, #140]
     be8:	bl	0 <gomp_malloc>
     bec:	mov	x1, x0
     bf0:	ldur	q0, [x24, #24]
     bf4:	stp	xzr, xzr, [x0, #24]
     bf8:	ldr	x4, [sp, #128]
     bfc:	str	wzr, [x1]
     c00:	stur	q0, [x1, #8]
     c04:	mov	x0, x4
     c08:	bl	0 <prio_splay_tree_insert>
     c0c:	ldr	x4, [sp, #128]
     c10:	ldr	x0, [x24, #8]
     c14:	str	xzr, [x4, #16]
     c18:	ldr	w2, [sp, #140]
     c1c:	cbz	x0, d84 <gomp_task_run_post_handle_dependers+0x4e4>
     c20:	mov	x0, x4
     c24:	add	x1, sp, #0x98
     c28:	str	x4, [sp, #128]
     c2c:	str	w2, [sp, #140]
     c30:	str	w23, [sp, #152]
     c34:	bl	0 <prio_splay_tree_lookup>
     c38:	ldr	w2, [sp, #140]
     c3c:	ldr	x4, [sp, #128]
     c40:	cbz	x0, d84 <gomp_task_run_post_handle_dependers+0x4e4>
     c44:	ldr	x1, [x0, #8]
     c48:	cbz	x1, dc8 <gomp_task_run_post_handle_dependers+0x528>
     c4c:	ldr	x4, [x0, #16]
     c50:	cmp	x4, #0x0
     c54:	ccmp	w2, #0x0, #0x0, ne  // ne = any
     c58:	b.eq	e24 <gomp_task_run_post_handle_dependers+0x584>  // b.none
     c5c:	ldr	x4, [x1, #8]
     c60:	stp	x1, x4, [x19, #112]
     c64:	str	x28, [x0, #8]
     c68:	ldr	x1, [x19, #112]
     c6c:	str	x28, [x1, #8]
     c70:	ldr	x1, [x19, #120]
     c74:	str	x28, [x1]
     c78:	ldr	x1, [x0, #16]
     c7c:	cmp	x1, #0x0
     c80:	ccmp	w2, #0x0, #0x4, eq  // eq = none
     c84:	b.eq	974 <gomp_task_run_post_handle_dependers+0xd4>  // b.none
     c88:	str	x28, [x0, #16]
     c8c:	b	974 <gomp_task_run_post_handle_dependers+0xd4>
     c90:	cbz	x0, dd8 <gomp_task_run_post_handle_dependers+0x538>
     c94:	mov	x0, #0x28                  	// #40
     c98:	str	x2, [sp, #128]
     c9c:	bl	0 <gomp_malloc>
     ca0:	mov	x1, x0
     ca4:	ldur	q0, [x22, #24]
     ca8:	stp	xzr, xzr, [x0, #24]
     cac:	ldr	x2, [sp, #128]
     cb0:	str	wzr, [x1]
     cb4:	stur	q0, [x1, #8]
     cb8:	mov	x0, x2
     cbc:	bl	0 <prio_splay_tree_insert>
     cc0:	ldr	x2, [sp, #128]
     cc4:	ldr	x0, [x22, #8]
     cc8:	str	xzr, [x2, #16]
     ccc:	cbz	x0, dd8 <gomp_task_run_post_handle_dependers+0x538>
     cd0:	mov	x0, x2
     cd4:	add	x1, sp, #0x98
     cd8:	str	x2, [sp, #128]
     cdc:	str	w23, [sp, #152]
     ce0:	bl	0 <prio_splay_tree_lookup>
     ce4:	ldr	x2, [sp, #128]
     ce8:	cbz	x0, dd8 <gomp_task_run_post_handle_dependers+0x538>
     cec:	ldr	x1, [x0, #8]
     cf0:	cbz	x1, e14 <gomp_task_run_post_handle_dependers+0x574>
     cf4:	ldr	x2, [x1, #8]
     cf8:	stp	x1, x2, [x19, #128]
     cfc:	str	x28, [x0, #8]
     d00:	ldr	x0, [x19, #128]
     d04:	str	x28, [x0, #8]
     d08:	ldr	x0, [x19, #136]
     d0c:	str	x28, [x0]
     d10:	b	9d0 <gomp_task_run_post_handle_dependers+0x130>
     d14:	mov	x0, #0x28                  	// #40
     d18:	bl	0 <gomp_malloc>
     d1c:	mov	x28, x0
     d20:	mov	x1, x0
     d24:	stp	xzr, xzr, [x0, #8]
     d28:	stp	xzr, xzr, [x0, #24]
     d2c:	ldr	x0, [sp, #120]
     d30:	str	w23, [x28]
     d34:	bl	0 <prio_splay_tree_insert>
     d38:	mov	x0, x28
     d3c:	ldr	x1, [x0, #8]
     d40:	cbnz	x1, b10 <gomp_task_run_post_handle_dependers+0x270>
     d44:	dup	v0.2d, x22
     d48:	str	q0, [x19, #96]
     d4c:	str	x22, [x0, #8]
     d50:	b	a0c <gomp_task_run_post_handle_dependers+0x16c>
     d54:	mov	x0, x27
     d58:	ldr	d8, [sp, #96]
     d5c:	ldp	x19, x20, [sp, #16]
     d60:	ldp	x21, x22, [sp, #32]
     d64:	ldp	x23, x24, [sp, #48]
     d68:	ldp	x25, x26, [sp, #64]
     d6c:	ldp	x27, x28, [sp, #80]
     d70:	ldp	x29, x30, [sp], #176
     d74:	ret
     d78:	ldr	x0, [x1]
     d7c:	stp	x0, x1, [x19, #112]
     d80:	b	958 <gomp_task_run_post_handle_dependers+0xb8>
     d84:	mov	x0, #0x28                  	// #40
     d88:	str	x4, [sp, #128]
     d8c:	str	w2, [sp, #140]
     d90:	bl	0 <gomp_malloc>
     d94:	mov	x1, x0
     d98:	stp	xzr, xzr, [x0, #8]
     d9c:	ldr	x4, [sp, #128]
     da0:	stp	xzr, xzr, [x0, #24]
     da4:	str	w23, [x1]
     da8:	mov	x0, x4
     dac:	str	x1, [sp, #128]
     db0:	bl	0 <prio_splay_tree_insert>
     db4:	ldr	x1, [sp, #128]
     db8:	ldr	w2, [sp, #140]
     dbc:	mov	x0, x1
     dc0:	ldr	x1, [x0, #8]
     dc4:	cbnz	x1, c4c <gomp_task_run_post_handle_dependers+0x3ac>
     dc8:	dup	v0.2d, x28
     dcc:	str	q0, [x19, #112]
     dd0:	str	x28, [x0, #8]
     dd4:	b	c78 <gomp_task_run_post_handle_dependers+0x3d8>
     dd8:	mov	x0, #0x28                  	// #40
     ddc:	str	x2, [sp, #128]
     de0:	bl	0 <gomp_malloc>
     de4:	mov	x1, x0
     de8:	ldr	x2, [sp, #128]
     dec:	stp	xzr, xzr, [x0, #8]
     df0:	stp	xzr, xzr, [x0, #24]
     df4:	mov	x0, x2
     df8:	str	w23, [x1]
     dfc:	str	x1, [sp, #128]
     e00:	bl	0 <prio_splay_tree_insert>
     e04:	ldr	x1, [sp, #128]
     e08:	mov	x0, x1
     e0c:	ldr	x1, [x0, #8]
     e10:	cbnz	x1, cf4 <gomp_task_run_post_handle_dependers+0x454>
     e14:	dup	v0.2d, x28
     e18:	str	q0, [x19, #128]
     e1c:	str	x28, [x0, #8]
     e20:	b	9d0 <gomp_task_run_post_handle_dependers+0x130>
     e24:	ldr	x1, [x4]
     e28:	stp	x1, x4, [x19, #112]
     e2c:	b	c6c <gomp_task_run_post_handle_dependers+0x3cc>
     e30:	bl	0 <free>
     e34:	str	xzr, [x25, #48]
     e38:	mov	x27, #0x0                   	// #0
     e3c:	mov	x0, x27
     e40:	ldp	x23, x24, [sp, #48]
     e44:	ldp	x25, x26, [sp, #64]
     e48:	ldp	x27, x28, [sp, #80]
     e4c:	ldp	x29, x30, [sp], #176
     e50:	ret
     e54:	nop

0000000000000e58 <htab_find_slot.constprop.0>:
     e58:	stp	x29, x30, [sp, #-96]!
     e5c:	mov	x29, sp
     e60:	stp	x19, x20, [sp, #16]
     e64:	ldr	x19, [x0]
     e68:	stp	x21, x22, [sp, #32]
     e6c:	mov	x22, x0
     e70:	mov	x21, x1
     e74:	stp	x23, x24, [sp, #48]
     e78:	adrp	x24, 0 <htab_find>
     e7c:	ldr	x6, [x1]
     e80:	add	x24, x24, #0x0
     e84:	ldp	x1, x0, [x19]
     e88:	eor	x23, x6, x6, lsr #32
     e8c:	add	x2, x1, x1, lsl #1
     e90:	cmp	x2, x0, lsl #2
     e94:	b.ls	fac <htab_find_slot.constprop.0+0x154>  // b.plast
     e98:	ldr	w7, [x19, #24]
     e9c:	and	x6, x23, #0xffffffff
     ea0:	lsl	x0, x7, #4
     ea4:	add	x2, x24, x0
     ea8:	ldr	w4, [x24, x0]
     eac:	ldr	w0, [x2, #4]
     eb0:	ldr	w8, [x2, #12]
     eb4:	mul	x0, x0, x6
     eb8:	lsr	x0, x0, #32
     ebc:	sub	w2, w23, w0
     ec0:	add	w2, w0, w2, lsr #1
     ec4:	lsr	w2, w2, w8
     ec8:	msub	w5, w2, w4, w23
     ecc:	add	x3, x5, #0x4
     ed0:	mov	x2, x5
     ed4:	ldr	x0, [x19, x3, lsl #3]
     ed8:	cbz	x0, 10c4 <htab_find_slot.constprop.0+0x26c>
     edc:	cmp	x0, #0x1
     ee0:	b.eq	10ec <htab_find_slot.constprop.0+0x294>  // b.none
     ee4:	ldr	x9, [x0]
     ee8:	mov	x0, #0x0                   	// #0
     eec:	ldr	x5, [x21]
     ef0:	cmp	x9, x5
     ef4:	b.eq	10f4 <htab_find_slot.constprop.0+0x29c>  // b.none
     ef8:	add	x24, x24, x7, lsl #4
     efc:	sub	w4, w4, #0x2
     f00:	add	w5, w23, #0x1
     f04:	ldr	w3, [x24, #8]
     f08:	mul	x3, x3, x6
     f0c:	lsr	x3, x3, #32
     f10:	sub	w6, w23, w3
     f14:	add	w6, w3, w6, lsr #1
     f18:	lsr	w6, w6, w8
     f1c:	msub	w6, w6, w4, w5
     f20:	add	w5, w2, w6
     f24:	mov	x2, x5
     f28:	cmp	x1, w5, uxtw
     f2c:	b.hi	f38 <htab_find_slot.constprop.0+0xe0>  // b.pmore
     f30:	sub	w5, w5, w1
     f34:	mov	x2, x5
     f38:	add	x4, x5, #0x4
     f3c:	ldr	x3, [x19, x4, lsl #3]
     f40:	cbz	x3, f84 <htab_find_slot.constprop.0+0x12c>
     f44:	cmp	x3, #0x1
     f48:	b.eq	f74 <htab_find_slot.constprop.0+0x11c>  // b.none
     f4c:	ldr	x7, [x3]
     f50:	ldr	x3, [x21]
     f54:	cmp	x7, x3
     f58:	b.ne	f20 <htab_find_slot.constprop.0+0xc8>  // b.any
     f5c:	add	x0, x19, x4, lsl #3
     f60:	ldp	x19, x20, [sp, #16]
     f64:	ldp	x21, x22, [sp, #32]
     f68:	ldp	x23, x24, [sp, #48]
     f6c:	ldp	x29, x30, [sp], #96
     f70:	ret
     f74:	add	x4, x19, x4, lsl #3
     f78:	cmp	x0, #0x0
     f7c:	csel	x0, x4, x0, eq  // eq = none
     f80:	b	f20 <htab_find_slot.constprop.0+0xc8>
     f84:	cbz	x0, 10c4 <htab_find_slot.constprop.0+0x26c>
     f88:	ldr	x1, [x19, #16]
     f8c:	ldp	x21, x22, [sp, #32]
     f90:	sub	x1, x1, #0x1
     f94:	str	x1, [x19, #16]
     f98:	str	xzr, [x0]
     f9c:	ldp	x19, x20, [sp, #16]
     fa0:	ldp	x23, x24, [sp, #48]
     fa4:	ldp	x29, x30, [sp], #96
     fa8:	ret
     fac:	ldr	x2, [x19, #16]
     fb0:	stp	x25, x26, [sp, #64]
     fb4:	add	x25, x19, #0x20
     fb8:	sub	x0, x0, x2
     fbc:	stp	x27, x28, [sp, #80]
     fc0:	add	x27, x25, x1, lsl #3
     fc4:	cmp	x1, x0, lsl #1
     fc8:	lsl	x4, x0, #1
     fcc:	b.cc	110c <htab_find_slot.constprop.0+0x2b4>  // b.lo, b.ul, b.last
     fd0:	lsl	x0, x0, #3
     fd4:	mov	x2, #0x20                  	// #32
     fd8:	cmp	x0, x2
     fdc:	csel	x0, x0, x2, cs  // cs = hs, nlast
     fe0:	cmp	x1, x0
     fe4:	b.hi	110c <htab_find_slot.constprop.0+0x2b4>  // b.pmore
     fe8:	sub	x1, x1, #0x1
     fec:	mov	w20, #0x1e                  	// #30
     ff0:	mov	w0, #0x0                   	// #0
     ff4:	b	1014 <htab_find_slot.constprop.0+0x1bc>
     ff8:	sub	w2, w20, w0
     ffc:	add	w2, w0, w2, lsr #1
    1000:	ubfiz	x3, x2, #4, #32
    1004:	ldr	w3, [x24, x3]
    1008:	cmp	x1, x3
    100c:	b.hi	1160 <htab_find_slot.constprop.0+0x308>  // b.pmore
    1010:	mov	w20, w2
    1014:	cmp	w20, w0
    1018:	b.ne	ff8 <htab_find_slot.constprop.0+0x1a0>  // b.any
    101c:	ubfiz	x0, x20, #4, #32
    1020:	ldr	w28, [x24, x0]
    1024:	cmp	x1, x28
    1028:	b.hi	1154 <htab_find_slot.constprop.0+0x2fc>  // b.pmore
    102c:	add	x26, x28, #0x4
    1030:	lsl	x26, x26, #3
    1034:	mov	x0, x26
    1038:	bl	0 <gomp_malloc>
    103c:	sub	x2, x26, #0x20
    1040:	mov	x26, x0
    1044:	mov	w1, #0x0                   	// #0
    1048:	add	x0, x0, #0x20
    104c:	stp	x28, xzr, [x26]
    1050:	str	xzr, [x26, #16]
    1054:	str	w20, [x26, #24]
    1058:	bl	0 <memset>
    105c:	ldp	x0, x1, [x19, #8]
    1060:	sub	x0, x0, x1
    1064:	str	x0, [x26, #8]
    1068:	b	1078 <htab_find_slot.constprop.0+0x220>
    106c:	add	x25, x25, #0x8
    1070:	cmp	x27, x25
    1074:	b.ls	10a4 <htab_find_slot.constprop.0+0x24c>  // b.plast
    1078:	ldr	x20, [x25]
    107c:	cmp	x20, #0x1
    1080:	b.ls	106c <htab_find_slot.constprop.0+0x214>  // b.plast
    1084:	ldr	x1, [x20]
    1088:	mov	x0, x26
    108c:	add	x25, x25, #0x8
    1090:	eor	x1, x1, x1, lsr #32
    1094:	bl	148 <find_empty_slot_for_expand>
    1098:	str	x20, [x0]
    109c:	cmp	x27, x25
    10a0:	b.hi	1078 <htab_find_slot.constprop.0+0x220>  // b.pmore
    10a4:	mov	x0, x19
    10a8:	bl	0 <free>
    10ac:	mov	x19, x26
    10b0:	ldr	x1, [x26]
    10b4:	ldp	x27, x28, [sp, #80]
    10b8:	str	x26, [x22]
    10bc:	ldp	x25, x26, [sp, #64]
    10c0:	b	e98 <htab_find_slot.constprop.0+0x40>
    10c4:	ldr	x1, [x19, #8]
    10c8:	add	x5, x5, #0x4
    10cc:	ldp	x21, x22, [sp, #32]
    10d0:	add	x1, x1, #0x1
    10d4:	str	x1, [x19, #8]
    10d8:	add	x0, x19, x5, lsl #3
    10dc:	ldp	x19, x20, [sp, #16]
    10e0:	ldp	x23, x24, [sp, #48]
    10e4:	ldp	x29, x30, [sp], #96
    10e8:	ret
    10ec:	add	x0, x19, x3, lsl #3
    10f0:	b	ef8 <htab_find_slot.constprop.0+0xa0>
    10f4:	add	x0, x19, x3, lsl #3
    10f8:	ldp	x19, x20, [sp, #16]
    10fc:	ldp	x21, x22, [sp, #32]
    1100:	ldp	x23, x24, [sp, #48]
    1104:	ldp	x29, x30, [sp], #96
    1108:	ret
    110c:	adrp	x24, 0 <htab_find>
    1110:	mov	w20, #0x1e                  	// #30
    1114:	add	x24, x24, #0x0
    1118:	mov	w3, #0x0                   	// #0
    111c:	b	113c <htab_find_slot.constprop.0+0x2e4>
    1120:	sub	w2, w20, w3
    1124:	add	w2, w3, w2, lsr #1
    1128:	ubfiz	x0, x2, #4, #32
    112c:	ldr	w0, [x24, x0]
    1130:	cmp	x4, x0
    1134:	b.hi	1158 <htab_find_slot.constprop.0+0x300>  // b.pmore
    1138:	mov	w20, w2
    113c:	cmp	w20, w3
    1140:	b.ne	1120 <htab_find_slot.constprop.0+0x2c8>  // b.any
    1144:	ubfiz	x0, x20, #4, #32
    1148:	ldr	w28, [x24, x0]
    114c:	cmp	x4, x28
    1150:	b.ls	102c <htab_find_slot.constprop.0+0x1d4>  // b.plast
    1154:	bl	0 <abort>
    1158:	add	w3, w2, #0x1
    115c:	b	113c <htab_find_slot.constprop.0+0x2e4>
    1160:	add	w0, w2, #0x1
    1164:	b	1014 <htab_find_slot.constprop.0+0x1bc>

0000000000001168 <gomp_task_handle_depend>:
    1168:	stp	x29, x30, [sp, #-96]!
    116c:	mov	x29, sp
    1170:	stp	x21, x22, [sp, #32]
    1174:	mov	x22, x1
    1178:	ldp	x1, x6, [x2]
    117c:	stp	x19, x20, [sp, #16]
    1180:	mov	x20, x0
    1184:	stp	x23, x24, [sp, #48]
    1188:	str	x27, [sp, #80]
    118c:	cbz	x1, 13bc <gomp_task_handle_depend+0x254>
    1190:	add	x2, x2, #0x10
    1194:	add	x0, x0, #0xd0
    1198:	mov	x27, #0x0                   	// #0
    119c:	nop
    11a0:	cmp	x6, x27
    11a4:	add	x0, x0, #0x28
    11a8:	ldr	x4, [x2, x27, lsl #3]
    11ac:	cset	w3, ls  // ls = plast
    11b0:	stur	x4, [x0, #-40]
    11b4:	add	x27, x27, #0x1
    11b8:	sturb	w3, [x0, #-8]
    11bc:	cmp	x1, x27
    11c0:	b.ne	11a0 <gomp_task_handle_depend+0x38>  // b.any
    11c4:	ldr	x9, [x22, #56]
    11c8:	stp	x27, xzr, [x20, #72]
    11cc:	cbz	x9, 14b0 <gomp_task_handle_depend+0x348>
    11d0:	add	x22, x22, #0x38
    11d4:	add	x23, x20, #0xd0
    11d8:	mov	x21, #0x0                   	// #0
    11dc:	stp	x25, x26, [sp, #64]
    11e0:	mov	x1, x23
    11e4:	stp	xzr, xzr, [x23, #8]
    11e8:	mov	x0, x22
    11ec:	str	x20, [x23, #24]
    11f0:	strb	wzr, [x23, #33]
    11f4:	strb	wzr, [x23, #34]
    11f8:	bl	e58 <htab_find_slot.constprop.0>
    11fc:	mov	x26, x0
    1200:	ldr	x19, [x0]
    1204:	cbz	x19, 1368 <gomp_task_handle_depend+0x200>
    1208:	ldr	x0, [x19, #24]
    120c:	cmp	x0, x20
    1210:	b.eq	13a8 <gomp_task_handle_depend+0x240>  // b.none
    1214:	ldrb	w3, [x23, #32]
    1218:	mov	x0, #0x0                   	// #0
    121c:	mov	x24, #0x0                   	// #0
    1220:	b	1288 <gomp_task_handle_depend+0x120>
    1224:	cbnz	w1, 1338 <gomp_task_handle_depend+0x1d0>
    1228:	ldr	x25, [x19, #24]
    122c:	mov	x24, x19
    1230:	ldr	x0, [x25, #48]
    1234:	cbz	x0, 12ac <gomp_task_handle_depend+0x144>
    1238:	ldr	x1, [x0]
    123c:	mov	x2, #0x1                   	// #1
    1240:	cbz	x1, 1254 <gomp_task_handle_depend+0xec>
    1244:	add	x2, x1, #0x1
    1248:	ldr	x4, [x0, x2, lsl #3]
    124c:	cmp	x4, x20
    1250:	b.eq	1278 <gomp_task_handle_depend+0x110>  // b.none
    1254:	ldr	x4, [x0, #8]
    1258:	cmp	x1, x4
    125c:	b.eq	1340 <gomp_task_handle_depend+0x1d8>  // b.none
    1260:	add	x1, x1, #0x2
    1264:	str	x2, [x0]
    1268:	ldr	x2, [x20, #80]
    126c:	str	x20, [x0, x1, lsl #3]
    1270:	add	x2, x2, #0x1
    1274:	str	x2, [x20, #80]
    1278:	ldr	x1, [x19, #8]
    127c:	mov	x0, x19
    1280:	cbz	x1, 12e8 <gomp_task_handle_depend+0x180>
    1284:	mov	x19, x1
    1288:	ldrb	w1, [x19, #34]
    128c:	cbnz	w1, 13b4 <gomp_task_handle_depend+0x24c>
    1290:	ldrb	w1, [x19, #32]
    1294:	cbnz	w3, 1224 <gomp_task_handle_depend+0xbc>
    1298:	ldr	x25, [x19, #24]
    129c:	cmp	w1, #0x0
    12a0:	csel	x24, x24, x19, ne  // ne = any
    12a4:	ldr	x0, [x25, #48]
    12a8:	cbnz	x0, 1238 <gomp_task_handle_depend+0xd0>
    12ac:	mov	x0, #0x40                  	// #64
    12b0:	bl	0 <gomp_malloc>
    12b4:	ldr	x1, [x20, #80]
    12b8:	adrp	x2, 0 <htab_find>
    12bc:	ldrb	w3, [x23, #32]
    12c0:	add	x1, x1, #0x1
    12c4:	str	x0, [x25, #48]
    12c8:	ldr	q0, [x2]
    12cc:	str	x1, [x20, #80]
    12d0:	ldr	x1, [x19, #8]
    12d4:	str	x20, [x0, #16]
    12d8:	str	q0, [x0]
    12dc:	mov	x0, x19
    12e0:	cbnz	x1, 1284 <gomp_task_handle_depend+0x11c>
    12e4:	nop
    12e8:	ldr	x0, [x26]
    12ec:	str	x0, [x23, #8]
    12f0:	cmp	x24, #0x0
    12f4:	eor	w3, w3, #0x1
    12f8:	cset	w1, ne  // ne = any
    12fc:	str	x23, [x0, #16]
    1300:	tst	w1, w3
    1304:	str	x23, [x26]
    1308:	b.ne	1370 <gomp_task_handle_depend+0x208>  // b.any
    130c:	add	x21, x21, #0x1
    1310:	add	x23, x23, #0x28
    1314:	cmp	x27, x21
    1318:	b.hi	11e0 <gomp_task_handle_depend+0x78>  // b.pmore
    131c:	ldp	x19, x20, [sp, #16]
    1320:	ldp	x21, x22, [sp, #32]
    1324:	ldp	x23, x24, [sp, #48]
    1328:	ldp	x25, x26, [sp, #64]
    132c:	ldr	x27, [sp, #80]
    1330:	ldp	x29, x30, [sp], #96
    1334:	ret
    1338:	mov	w3, w1
    133c:	b	1278 <gomp_task_handle_depend+0x110>
    1340:	lsl	x2, x2, #1
    1344:	str	x2, [x0, #8]
    1348:	add	x2, x2, #0x2
    134c:	lsl	x1, x2, #3
    1350:	bl	0 <gomp_realloc>
    1354:	ldr	x1, [x0]
    1358:	ldrb	w3, [x23, #32]
    135c:	add	x2, x1, #0x1
    1360:	str	x0, [x25, #48]
    1364:	b	1260 <gomp_task_handle_depend+0xf8>
    1368:	str	x23, [x0]
    136c:	b	130c <gomp_task_handle_depend+0x1a4>
    1370:	cmp	x19, x24
    1374:	b.eq	139c <gomp_task_handle_depend+0x234>  // b.none
    1378:	ldp	x1, x0, [x24, #8]
    137c:	str	x0, [x1, #16]
    1380:	str	x1, [x0, #8]
    1384:	ldr	x0, [x19, #8]
    1388:	stp	x0, x19, [x24, #8]
    138c:	str	x24, [x19, #8]
    1390:	ldr	x0, [x24, #8]
    1394:	cbz	x0, 139c <gomp_task_handle_depend+0x234>
    1398:	str	x24, [x0, #16]
    139c:	mov	w0, #0x1                   	// #1
    13a0:	strb	w0, [x24, #34]
    13a4:	b	130c <gomp_task_handle_depend+0x1a4>
    13a8:	mov	w0, #0x1                   	// #1
    13ac:	strb	w0, [x23, #33]
    13b0:	b	130c <gomp_task_handle_depend+0x1a4>
    13b4:	mov	x19, x0
    13b8:	b	12e8 <gomp_task_handle_depend+0x180>
    13bc:	ldp	x8, x0, [x2, #16]
    13c0:	ldr	x7, [x2, #32]
    13c4:	add	x8, x8, x0
    13c8:	add	x7, x7, x8
    13cc:	cmp	x7, x6
    13d0:	b.cs	1574 <gomp_task_handle_depend+0x40c>  // b.hs, b.nlast
    13d4:	add	x3, x2, #0x28
    13d8:	mov	x4, x7
    13dc:	mov	x0, #0x0                   	// #0
    13e0:	ldr	x5, [x3, x4, lsl #3]
    13e4:	ldr	x2, [x5, #8]
    13e8:	cmp	x2, #0x1
    13ec:	b.eq	1414 <gomp_task_handle_depend+0x2ac>  // b.none
    13f0:	sub	x1, x2, #0x2
    13f4:	cmp	x1, #0x2
    13f8:	b.hi	1588 <gomp_task_handle_depend+0x420>  // b.pmore
    13fc:	add	x2, x0, x0, lsl #2
    1400:	add	x0, x0, #0x1
    1404:	ldr	x1, [x5]
    1408:	add	x2, x20, x2, lsl #3
    140c:	str	x1, [x2, #208]
    1410:	strb	wzr, [x2, #240]
    1414:	add	x4, x4, #0x1
    1418:	cmp	x4, x6
    141c:	b.ne	13e0 <gomp_task_handle_depend+0x278>  // b.any
    1420:	ldr	x9, [x22, #56]
    1424:	cbz	x7, 1470 <gomp_task_handle_depend+0x308>
    1428:	add	x4, x0, x0, lsl #2
    142c:	mov	x2, #0x0                   	// #0
    1430:	add	x4, x20, x4, lsl #3
    1434:	nop
    1438:	cmp	x8, x2
    143c:	add	x4, x4, #0x28
    1440:	ldr	x5, [x3, x2, lsl #3]
    1444:	cset	w1, ls  // ls = plast
    1448:	str	x5, [x4, #168]
    144c:	add	x2, x2, #0x1
    1450:	strb	w1, [x4, #200]
    1454:	cmp	x7, x2
    1458:	b.hi	1438 <gomp_task_handle_depend+0x2d0>  // b.pmore
    145c:	cmp	x7, #0x0
    1460:	csinc	x1, x7, xzr, ne  // ne = any
    1464:	cmp	x7, x6
    1468:	add	x0, x0, x1
    146c:	b.cs	1560 <gomp_task_handle_depend+0x3f8>  // b.hs, b.nlast
    1470:	ldr	x2, [x3, x7, lsl #3]
    1474:	ldr	x1, [x2, #8]
    1478:	cmp	x1, #0x1
    147c:	b.ne	1498 <gomp_task_handle_depend+0x330>  // b.any
    1480:	add	x4, x0, x0, lsl #2
    1484:	add	x0, x0, #0x1
    1488:	ldr	x5, [x2]
    148c:	add	x2, x20, x4, lsl #3
    1490:	str	x5, [x2, #208]
    1494:	strb	w1, [x2, #240]
    1498:	add	x7, x7, #0x1
    149c:	cmp	x7, x6
    14a0:	b.cc	1470 <gomp_task_handle_depend+0x308>  // b.lo, b.ul, b.last
    14a4:	mov	x27, x6
    14a8:	stp	x27, xzr, [x20, #72]
    14ac:	cbnz	x9, 11d0 <gomp_task_handle_depend+0x68>
    14b0:	lsl	x3, x27, #1
    14b4:	mov	x0, #0xc                   	// #12
    14b8:	cmp	x3, x0
    14bc:	adrp	x4, 0 <htab_find>
    14c0:	csel	x3, x3, x0, cs  // cs = hs, nlast
    14c4:	add	x4, x4, #0x0
    14c8:	mov	w19, #0x1e                  	// #30
    14cc:	mov	w1, #0x0                   	// #0
    14d0:	b	14f0 <gomp_task_handle_depend+0x388>
    14d4:	sub	w0, w19, w1
    14d8:	add	w0, w1, w0, lsr #1
    14dc:	ubfiz	x2, x0, #4, #32
    14e0:	ldr	w2, [x4, x2]
    14e4:	cmp	x3, x2
    14e8:	b.hi	1558 <gomp_task_handle_depend+0x3f0>  // b.pmore
    14ec:	mov	w19, w0
    14f0:	cmp	w19, w1
    14f4:	b.ne	14d4 <gomp_task_handle_depend+0x36c>  // b.any
    14f8:	ubfiz	x0, x19, #4, #32
    14fc:	ldr	w23, [x4, x0]
    1500:	cmp	x3, x23
    1504:	b.hi	159c <gomp_task_handle_depend+0x434>  // b.pmore
    1508:	add	x21, x23, #0x4
    150c:	lsl	x21, x21, #3
    1510:	mov	x0, x21
    1514:	bl	0 <gomp_malloc>
    1518:	sub	x2, x21, #0x20
    151c:	mov	x21, x0
    1520:	mov	w1, #0x0                   	// #0
    1524:	add	x0, x0, #0x20
    1528:	stp	x23, xzr, [x21]
    152c:	str	xzr, [x21, #16]
    1530:	str	w19, [x21, #24]
    1534:	bl	0 <memset>
    1538:	str	x21, [x22, #56]
    153c:	cbnz	x27, 11d0 <gomp_task_handle_depend+0x68>
    1540:	ldp	x19, x20, [sp, #16]
    1544:	ldp	x21, x22, [sp, #32]
    1548:	ldp	x23, x24, [sp, #48]
    154c:	ldr	x27, [sp, #80]
    1550:	ldp	x29, x30, [sp], #96
    1554:	ret
    1558:	add	w1, w0, #0x1
    155c:	b	14f0 <gomp_task_handle_depend+0x388>
    1560:	stp	x6, xzr, [x20, #72]
    1564:	mov	x27, x6
    1568:	cbz	x9, 14b0 <gomp_task_handle_depend+0x348>
    156c:	cbz	x27, 1540 <gomp_task_handle_depend+0x3d8>
    1570:	b	11d0 <gomp_task_handle_depend+0x68>
    1574:	ldr	x9, [x22, #56]
    1578:	cbz	x7, 1560 <gomp_task_handle_depend+0x3f8>
    157c:	add	x3, x2, #0x28
    1580:	mov	x0, #0x0                   	// #0
    1584:	b	1428 <gomp_task_handle_depend+0x2c0>
    1588:	adrp	x0, 0 <htab_find>
    158c:	mov	w1, w2
    1590:	add	x0, x0, #0x0
    1594:	stp	x25, x26, [sp, #64]
    1598:	bl	0 <gomp_fatal>
    159c:	stp	x25, x26, [sp, #64]
    15a0:	bl	0 <abort>
    15a4:	nop

00000000000015a8 <gomp_target_task_completion>:
    15a8:	stp	x29, x30, [sp, #-112]!
    15ac:	mov	x29, sp
    15b0:	stp	x21, x22, [sp, #32]
    15b4:	ldr	x21, [x1]
    15b8:	stp	x19, x20, [sp, #16]
    15bc:	mov	x19, x1
    15c0:	stp	x23, x24, [sp, #48]
    15c4:	mov	x24, x0
    15c8:	stp	x25, x26, [sp, #64]
    15cc:	cbz	x21, 1644 <gomp_target_task_completion+0x9c>
    15d0:	mov	x1, x21
    15d4:	ldr	x0, [x1, #8]!
    15d8:	add	x3, x1, #0x8
    15dc:	cbnz	x0, 1898 <gomp_target_task_completion+0x2f0>
    15e0:	ldp	x1, x0, [x19, #112]
    15e4:	add	x2, x19, #0x70
    15e8:	ldr	x4, [x3, #8]
    15ec:	cmp	x2, x4
    15f0:	str	x1, [x0]
    15f4:	str	x0, [x1, #8]
    15f8:	b.eq	1824 <gomp_target_task_completion+0x27c>  // b.none
    15fc:	ldrb	w0, [x19, #207]
    1600:	mov	x1, x4
    1604:	cbz	x4, 18f0 <gomp_target_task_completion+0x348>
    1608:	ldr	x4, [x3, #16]
    160c:	cmp	x4, #0x0
    1610:	ccmp	w0, #0x0, #0x0, ne  // ne = any
    1614:	b.eq	1874 <gomp_target_task_completion+0x2cc>  // b.none
    1618:	ldr	x4, [x1, #8]
    161c:	stp	x1, x4, [x19, #112]
    1620:	str	x2, [x3, #8]
    1624:	ldr	x1, [x19, #112]
    1628:	str	x2, [x1, #8]
    162c:	ldr	x1, [x19, #120]
    1630:	str	x2, [x1]
    1634:	ldr	x1, [x3, #16]
    1638:	cmp	x1, #0x0
    163c:	ccmp	w0, #0x0, #0x4, eq  // eq = none
    1640:	b.ne	1978 <gomp_target_task_completion+0x3d0>  // b.any
    1644:	ldr	x20, [x19, #40]
    1648:	cbz	x20, 169c <gomp_target_task_completion+0xf4>
    164c:	mov	x1, x20
    1650:	ldr	x2, [x1, #8]!
    1654:	add	x0, x1, #0x8
    1658:	cbnz	x2, 1880 <gomp_target_task_completion+0x2d8>
    165c:	ldp	x1, x3, [x19, #128]
    1660:	add	x2, x19, #0x80
    1664:	ldr	x4, [x0, #8]
    1668:	cmp	x2, x4
    166c:	str	x1, [x3]
    1670:	str	x3, [x1, #8]
    1674:	b.eq	17bc <gomp_target_task_completion+0x214>  // b.none
    1678:	mov	x1, x4
    167c:	cbz	x4, 17c8 <gomp_target_task_completion+0x220>
    1680:	ldr	x3, [x1, #8]
    1684:	stp	x1, x3, [x19, #128]
    1688:	str	x2, [x0, #8]
    168c:	ldr	x0, [x19, #128]
    1690:	str	x2, [x0, #8]
    1694:	ldr	x0, [x19, #136]
    1698:	str	x2, [x0]
    169c:	ldr	x1, [x24, #1288]
    16a0:	add	x26, x24, #0x508
    16a4:	ldr	w23, [x19, #88]
    16a8:	add	x22, x19, #0x60
    16ac:	cbnz	x1, 17e8 <gomp_target_task_completion+0x240>
    16b0:	cmp	w23, #0x0
    16b4:	ldr	x1, [x24, #1304]
    16b8:	b.gt	1900 <gomp_target_task_completion+0x358>
    16bc:	cbz	x1, 17ac <gomp_target_task_completion+0x204>
    16c0:	ldr	x0, [x1, #8]
    16c4:	stp	x1, x0, [x19, #96]
    16c8:	str	x22, [x24, #1304]
    16cc:	ldr	x0, [x19, #96]
    16d0:	str	x22, [x0, #8]
    16d4:	ldr	x0, [x19, #104]
    16d8:	str	x22, [x0]
    16dc:	mov	w1, #0x2                   	// #2
    16e0:	str	w1, [x19, #200]
    16e4:	cbz	x21, 1700 <gomp_target_task_completion+0x158>
    16e8:	ldr	x1, [x21, #64]
    16ec:	cbz	x1, 1700 <gomp_target_task_completion+0x158>
    16f0:	ldrb	w0, [x1]
    16f4:	cbnz	w0, 18b4 <gomp_target_task_completion+0x30c>
    16f8:	ldrb	w0, [x1, #1]
    16fc:	cbnz	w0, 1838 <gomp_target_task_completion+0x290>
    1700:	cbz	x20, 170c <gomp_target_task_completion+0x164>
    1704:	ldrb	w0, [x20, #48]
    1708:	cbnz	w0, 174c <gomp_target_task_completion+0x1a4>
    170c:	ldr	w2, [x24, #132]
    1710:	ldr	w1, [x24, #1324]
    1714:	orr	w2, w2, #0x1
    1718:	str	w2, [x24, #132]
    171c:	add	w1, w1, #0x1
    1720:	ldr	w2, [x24]
    1724:	str	w1, [x24, #1324]
    1728:	ldr	w1, [x24, #1328]
    172c:	cmp	w2, w1
    1730:	b.hi	1788 <gomp_target_task_completion+0x1e0>  // b.pmore
    1734:	ldp	x19, x20, [sp, #16]
    1738:	ldp	x21, x22, [sp, #32]
    173c:	ldp	x23, x24, [sp, #48]
    1740:	ldp	x25, x26, [sp, #64]
    1744:	ldp	x29, x30, [sp], #112
    1748:	ret
    174c:	ldr	w1, [x20, #52]
    1750:	add	x0, x20, #0x34
    1754:	strb	wzr, [x20, #48]
    1758:	add	w2, w1, #0x1
    175c:	and	w2, w2, #0x7fffffff
    1760:	ldxr	w3, [x0]
    1764:	cmp	w3, w1
    1768:	b.ne	1774 <gomp_target_task_completion+0x1cc>  // b.any
    176c:	stlxr	w4, w2, [x0]
    1770:	cmp	w4, #0x0
    1774:	mov	w1, w3
    1778:	b.ne	1758 <gomp_target_task_completion+0x1b0>  // b.any
    177c:	tbz	w3, #31, 170c <gomp_target_task_completion+0x164>
    1780:	bl	0 <gomp_sem_post_slow>
    1784:	b	170c <gomp_target_task_completion+0x164>
    1788:	add	x0, x24, #0x80
    178c:	mov	w1, #0x1                   	// #1
    1790:	bl	0 <gomp_team_barrier_wake>
    1794:	ldp	x19, x20, [sp, #16]
    1798:	ldp	x21, x22, [sp, #32]
    179c:	ldp	x23, x24, [sp, #48]
    17a0:	ldp	x25, x26, [sp, #64]
    17a4:	ldp	x29, x30, [sp], #112
    17a8:	ret
    17ac:	dup	v0.2d, x22
    17b0:	str	q0, [x19, #96]
    17b4:	str	x22, [x24, #1304]
    17b8:	b	16dc <gomp_target_task_completion+0x134>
    17bc:	cmp	x2, x1
    17c0:	b.ne	1680 <gomp_target_task_completion+0xd8>  // b.any
    17c4:	nop
    17c8:	dup	v0.2d, x2
    17cc:	ldr	w23, [x19, #88]
    17d0:	ldr	x1, [x24, #1288]
    17d4:	add	x26, x24, #0x508
    17d8:	add	x22, x19, #0x60
    17dc:	str	q0, [x19, #128]
    17e0:	str	x2, [x0, #8]
    17e4:	cbz	x1, 16b0 <gomp_target_task_completion+0x108>
    17e8:	add	x1, sp, #0x58
    17ec:	mov	x0, x26
    17f0:	str	w23, [sp, #88]
    17f4:	bl	0 <prio_splay_tree_lookup>
    17f8:	cbz	x0, 1938 <gomp_target_task_completion+0x390>
    17fc:	ldr	x1, [x0, #8]
    1800:	cbz	x1, 1968 <gomp_target_task_completion+0x3c0>
    1804:	ldr	x2, [x1, #8]
    1808:	stp	x1, x2, [x19, #96]
    180c:	str	x22, [x0, #8]
    1810:	ldr	x0, [x19, #96]
    1814:	str	x22, [x0, #8]
    1818:	ldr	x0, [x19, #104]
    181c:	str	x22, [x0]
    1820:	b	16dc <gomp_target_task_completion+0x134>
    1824:	ldrb	w0, [x19, #207]
    1828:	cmp	x2, x1
    182c:	b.eq	18f0 <gomp_target_task_completion+0x348>  // b.none
    1830:	str	x1, [x3, #8]
    1834:	b	1608 <gomp_target_task_completion+0x60>
    1838:	ldr	w2, [x1, #16]
    183c:	add	x0, x1, #0x10
    1840:	strb	wzr, [x1, #1]
    1844:	add	w1, w2, #0x1
    1848:	and	w1, w1, #0x7fffffff
    184c:	ldxr	w3, [x0]
    1850:	cmp	w3, w2
    1854:	b.ne	1860 <gomp_target_task_completion+0x2b8>  // b.any
    1858:	stlxr	w4, w1, [x0]
    185c:	cmp	w4, #0x0
    1860:	mov	w2, w3
    1864:	b.ne	1844 <gomp_target_task_completion+0x29c>  // b.any
    1868:	tbz	w3, #31, 1700 <gomp_target_task_completion+0x158>
    186c:	bl	0 <gomp_sem_post_slow>
    1870:	b	1700 <gomp_target_task_completion+0x158>
    1874:	ldr	x1, [x4]
    1878:	stp	x1, x4, [x19, #112]
    187c:	b	1628 <gomp_target_task_completion+0x80>
    1880:	ldr	w2, [x19, #88]
    1884:	mov	x0, x1
    1888:	add	x1, sp, #0x58
    188c:	str	w2, [sp, #88]
    1890:	bl	0 <prio_splay_tree_lookup>
    1894:	b	165c <gomp_target_task_completion+0xb4>
    1898:	ldr	w2, [x19, #88]
    189c:	mov	x0, x1
    18a0:	add	x1, sp, #0x58
    18a4:	str	w2, [sp, #88]
    18a8:	bl	0 <prio_splay_tree_lookup>
    18ac:	mov	x3, x0
    18b0:	b	15e0 <gomp_target_task_completion+0x38>
    18b4:	ldr	w0, [x1, #16]
    18b8:	strb	wzr, [x1], #16
    18bc:	add	w2, w0, #0x1
    18c0:	and	w2, w2, #0x7fffffff
    18c4:	ldxr	w3, [x1]
    18c8:	cmp	w3, w0
    18cc:	b.ne	18d8 <gomp_target_task_completion+0x330>  // b.any
    18d0:	stlxr	w4, w2, [x1]
    18d4:	cmp	w4, #0x0
    18d8:	mov	w0, w3
    18dc:	b.ne	18bc <gomp_target_task_completion+0x314>  // b.any
    18e0:	tbz	w3, #31, 1700 <gomp_target_task_completion+0x158>
    18e4:	mov	x0, x1
    18e8:	bl	0 <gomp_sem_post_slow>
    18ec:	b	1700 <gomp_target_task_completion+0x158>
    18f0:	dup	v0.2d, x2
    18f4:	str	q0, [x19, #112]
    18f8:	str	x2, [x3, #8]
    18fc:	b	1634 <gomp_target_task_completion+0x8c>
    1900:	cbz	x1, 1938 <gomp_target_task_completion+0x390>
    1904:	mov	x0, #0x28                  	// #40
    1908:	bl	0 <gomp_malloc>
    190c:	add	x2, x24, #0x600
    1910:	mov	x1, x0
    1914:	mov	x0, x26
    1918:	ldur	q0, [x2, #-232]
    191c:	str	wzr, [x1]
    1920:	stp	xzr, xzr, [x1, #24]
    1924:	stur	q0, [x1, #8]
    1928:	bl	0 <prio_splay_tree_insert>
    192c:	ldr	x0, [x24, #1288]
    1930:	str	xzr, [x26, #16]
    1934:	cbnz	x0, 17e8 <gomp_target_task_completion+0x240>
    1938:	mov	x0, #0x28                  	// #40
    193c:	bl	0 <gomp_malloc>
    1940:	movi	v0.4s, #0x0
    1944:	mov	x25, x0
    1948:	mov	x1, x25
    194c:	mov	x0, x26
    1950:	str	w23, [x25]
    1954:	stur	q0, [x25, #8]
    1958:	stur	q0, [x25, #24]
    195c:	bl	0 <prio_splay_tree_insert>
    1960:	mov	x0, x25
    1964:	b	17fc <gomp_target_task_completion+0x254>
    1968:	dup	v0.2d, x22
    196c:	str	q0, [x19, #96]
    1970:	str	x22, [x0, #8]
    1974:	b	16dc <gomp_target_task_completion+0x134>
    1978:	str	x2, [x3, #16]
    197c:	b	1644 <gomp_target_task_completion+0x9c>

0000000000001980 <gomp_init_task>:
    1980:	mov	x3, x0
    1984:	ldp	x4, x5, [x2]
    1988:	movi	v0.4s, #0x0
    198c:	str	x1, [x3], #144
    1990:	stp	x4, x5, [x0, #144]
    1994:	ldp	x4, x5, [x2, #16]
    1998:	stp	x4, x5, [x3, #16]
    199c:	ldr	x1, [x2, #32]
    19a0:	str	x1, [x3, #32]
    19a4:	str	xzr, [x0, #8]
    19a8:	stur	q0, [x0, #24]
    19ac:	stur	q0, [x0, #40]
    19b0:	stur	q0, [x0, #56]
    19b4:	str	xzr, [x0, #72]
    19b8:	str	xzr, [x0, #200]
    19bc:	ret

00000000000019c0 <gomp_end_task>:
    19c0:	stp	x29, x30, [sp, #-48]!
    19c4:	mov	x29, sp
    19c8:	str	x21, [sp, #32]
    19cc:	adrp	x21, 0 <gomp_tls_data>
    19d0:	ldr	x21, [x21]
    19d4:	stp	x19, x20, [sp, #16]
    19d8:	mrs	x19, tpidr_el0
    19dc:	add	x0, x19, x21
    19e0:	ldr	x20, [x0, #80]
    19e4:	ldr	x0, [x20, #56]
    19e8:	cbnz	x0, 1a08 <gomp_end_task+0x48>
    19ec:	add	x19, x19, x21
    19f0:	ldr	x0, [x20]
    19f4:	ldr	x21, [sp, #32]
    19f8:	str	x0, [x19, #80]
    19fc:	ldp	x19, x20, [sp, #16]
    1a00:	ldp	x29, x30, [sp], #48
    1a04:	ret
    1a08:	add	x19, x19, x21
    1a0c:	bl	0 <free>
    1a10:	ldr	x0, [x20]
    1a14:	ldr	x21, [sp, #32]
    1a18:	str	x0, [x19, #80]
    1a1c:	ldp	x19, x20, [sp, #16]
    1a20:	ldp	x29, x30, [sp], #48
    1a24:	ret

0000000000001a28 <GOMP_PLUGIN_target_task_completion>:
    1a28:	stp	x29, x30, [sp, #-48]!
    1a2c:	mov	w2, #0x1                   	// #1
    1a30:	mov	x29, sp
    1a34:	stp	x21, x22, [sp, #32]
    1a38:	ldp	x22, x21, [x0, #56]
    1a3c:	stp	x19, x20, [sp, #16]
    1a40:	mov	x19, x0
    1a44:	add	x20, x21, #0x500
    1a48:	ldaxr	w1, [x20]
    1a4c:	cbnz	w1, 1a58 <GOMP_PLUGIN_target_task_completion+0x30>
    1a50:	stxr	w0, w2, [x20]
    1a54:	cbnz	w0, 1a48 <GOMP_PLUGIN_target_task_completion+0x20>
    1a58:	cmp	w1, #0x0
    1a5c:	b.ne	1ac4 <GOMP_PLUGIN_target_task_completion+0x9c>  // b.any
    1a60:	ldr	w0, [x19, #44]
    1a64:	cmp	w0, #0x3
    1a68:	mov	w0, #0x5                   	// #5
    1a6c:	str	w0, [x19, #44]
    1a70:	b.eq	1aa0 <GOMP_PLUGIN_target_task_completion+0x78>  // b.none
    1a74:	mov	x1, x22
    1a78:	mov	x0, x21
    1a7c:	bl	15a8 <gomp_target_task_completion>
    1a80:	ldxr	w0, [x20]
    1a84:	stlxr	w1, wzr, [x20]
    1a88:	cbnz	w1, 1a80 <GOMP_PLUGIN_target_task_completion+0x58>
    1a8c:	tbnz	w0, #31, 1ab0 <GOMP_PLUGIN_target_task_completion+0x88>
    1a90:	ldp	x19, x20, [sp, #16]
    1a94:	ldp	x21, x22, [sp, #32]
    1a98:	ldp	x29, x30, [sp], #48
    1a9c:	ret
    1aa0:	ldxr	w0, [x20]
    1aa4:	stlxr	w1, wzr, [x20]
    1aa8:	cbnz	w1, 1aa0 <GOMP_PLUGIN_target_task_completion+0x78>
    1aac:	tbz	w0, #31, 1a90 <GOMP_PLUGIN_target_task_completion+0x68>
    1ab0:	mov	x0, x20
    1ab4:	ldp	x19, x20, [sp, #16]
    1ab8:	ldp	x21, x22, [sp, #32]
    1abc:	ldp	x29, x30, [sp], #48
    1ac0:	b	0 <gomp_mutex_unlock_slow>
    1ac4:	mov	x0, x20
    1ac8:	bl	0 <gomp_mutex_lock_slow>
    1acc:	b	1a60 <GOMP_PLUGIN_target_task_completion+0x38>

0000000000001ad0 <gomp_create_target_task>:
    1ad0:	adrp	x8, 0 <gomp_tls_data>
    1ad4:	ldr	x8, [x8]
    1ad8:	mrs	x9, tpidr_el0
    1adc:	stp	x29, x30, [sp, #-208]!
    1ae0:	mov	x13, x1
    1ae4:	add	x10, x9, x8
    1ae8:	mov	x29, sp
    1aec:	stp	x25, x26, [sp, #64]
    1af0:	ldr	x26, [x10, #16]
    1af4:	str	x8, [sp, #128]
    1af8:	adrp	x8, 0 <gomp_cancel_var>
    1afc:	stp	x21, x22, [sp, #32]
    1b00:	cmp	x26, #0x0
    1b04:	ldrb	w11, [x8]
    1b08:	mov	x22, x2
    1b0c:	stp	x23, x24, [sp, #48]
    1b10:	mov	x21, x5
    1b14:	stp	x27, x28, [sp, #80]
    1b18:	mov	x27, x4
    1b1c:	stp	x3, x0, [sp, #96]
    1b20:	cset	w0, ne  // ne = any
    1b24:	tst	w0, w11
    1b28:	stp	x7, x9, [sp, #112]
    1b2c:	str	w6, [sp, #140]
    1b30:	b.ne	21e4 <gomp_create_target_task+0x714>  // b.any
    1b34:	ldr	x25, [x10, #80]
    1b38:	stp	x19, x20, [sp, #16]
    1b3c:	ldr	x23, [x25, #40]
    1b40:	ldr	x0, [sp, #112]
    1b44:	cbz	x0, 1f3c <gomp_create_target_task+0x46c>
    1b48:	ldr	x7, [x0]
    1b4c:	cbz	x7, 1edc <gomp_create_target_task+0x40c>
    1b50:	add	x7, x7, x7, lsl #2
    1b54:	lsl	x20, x7, #3
    1b58:	add	x14, x20, #0xd0
    1b5c:	sub	x10, x20, #0x1
    1b60:	cbz	x13, 1ee4 <gomp_create_target_task+0x414>
    1b64:	cbz	x22, 1ee4 <gomp_create_target_task+0x414>
    1b68:	mov	x1, #0x0                   	// #0
    1b6c:	mov	x2, #0x0                   	// #0
    1b70:	mov	x6, #0x0                   	// #0
    1b74:	mov	x15, #0x1                   	// #1
    1b78:	ldrh	w0, [x21, x1, lsl #1]
    1b7c:	and	w3, w0, #0xff
    1b80:	cmp	w3, #0xc
    1b84:	b.ne	1bb0 <gomp_create_target_task+0xe0>  // b.any
    1b88:	lsr	w0, w0, #8
    1b8c:	sub	x2, x2, #0x1
    1b90:	ldr	x16, [x27, x1, lsl #3]
    1b94:	lsl	x0, x15, x0
    1b98:	add	x2, x2, x0
    1b9c:	neg	x3, x0
    1ba0:	cmp	x6, x0
    1ba4:	and	x2, x3, x2
    1ba8:	csel	x6, x6, x0, cs  // cs = hs, nlast
    1bac:	add	x2, x2, x16
    1bb0:	add	x1, x1, #0x1
    1bb4:	cmp	x22, x1
    1bb8:	b.ne	1b78 <gomp_create_target_task+0xa8>  // b.any
    1bbc:	add	x2, x6, x2
    1bc0:	cmp	x6, #0x0
    1bc4:	add	x2, x10, x2
    1bc8:	csel	x2, x2, x20, ne  // ne = any
    1bcc:	lsl	x10, x22, #3
    1bd0:	lsl	x0, x22, #1
    1bd4:	stp	x13, x0, [sp, #160]
    1bd8:	add	x0, x10, x22
    1bdc:	mov	x28, x10
    1be0:	add	x0, x2, x0, lsl #1
    1be4:	stp	x6, x14, [sp, #144]
    1be8:	add	x0, x0, #0x120
    1bec:	bl	0 <gomp_malloc>
    1bf0:	mov	x24, x0
    1bf4:	ldp	x1, x3, [sp, #120]
    1bf8:	mov	x16, x0
    1bfc:	ldp	x14, x13, [sp, #152]
    1c00:	adrp	x2, 0 <gomp_global_icv>
    1c04:	add	x2, x2, #0x0
    1c08:	str	x25, [x16], #144
    1c0c:	mov	x17, #0x2                   	// #2
    1c10:	add	x1, x1, x3
    1c14:	ldr	x3, [sp, #208]
    1c18:	add	x19, x0, x14
    1c1c:	ldr	x0, [x1, #80]
    1c20:	cmp	x0, #0x0
    1c24:	add	x0, x0, #0x90
    1c28:	csel	x2, x2, x0, eq  // eq = none
    1c2c:	ldp	x0, x1, [x2]
    1c30:	stp	x0, x1, [x24, #144]
    1c34:	ldp	x0, x1, [x2, #16]
    1c38:	stp	x0, x1, [x16, #16]
    1c3c:	ldr	x0, [x2, #32]
    1c40:	str	x0, [x16, #32]
    1c44:	str	x17, [x24, #200]
    1c48:	add	x1, x19, #0x50
    1c4c:	mov	x0, x1
    1c50:	str	xzr, [x24, #8]
    1c54:	ldrb	w1, [x25, #204]
    1c58:	mov	x2, x28
    1c5c:	stp	xzr, xzr, [x24, #24]
    1c60:	stp	x23, xzr, [x24, #40]
    1c64:	stp	xzr, xzr, [x24, #56]
    1c68:	str	xzr, [x24, #72]
    1c6c:	str	wzr, [x24, #88]
    1c70:	strb	w1, [x24, #204]
    1c74:	ldr	x1, [sp, #104]
    1c78:	str	x1, [x24, x14]
    1c7c:	ldr	x1, [sp, #96]
    1c80:	stp	x13, x22, [x19, #8]
    1c84:	str	x3, [x19, #72]
    1c88:	str	x0, [sp, #152]
    1c8c:	bl	0 <memcpy>
    1c90:	add	x0, x28, #0x50
    1c94:	mov	x2, x28
    1c98:	add	x0, x19, x0
    1c9c:	str	x0, [x19, #24]
    1ca0:	mov	x1, x27
    1ca4:	bl	0 <memcpy>
    1ca8:	ldr	x0, [x19, #24]
    1cac:	lsl	x2, x22, #1
    1cb0:	mov	x1, x21
    1cb4:	add	x0, x0, x28
    1cb8:	str	x0, [x19, #32]
    1cbc:	bl	0 <memcpy>
    1cc0:	ldr	x6, [sp, #144]
    1cc4:	cbnz	x6, 1e38 <gomp_create_target_task+0x368>
    1cc8:	ldr	w0, [sp, #140]
    1ccc:	add	x21, x26, #0x500
    1cd0:	str	w0, [x19, #40]
    1cd4:	ldr	w0, [sp, #216]
    1cd8:	str	w0, [x19, #44]
    1cdc:	stp	x24, x26, [x19, #56]
    1ce0:	mov	w0, #0x1                   	// #1
    1ce4:	stp	xzr, x19, [x24, #184]
    1ce8:	strb	wzr, [x24, #205]
    1cec:	ldaxr	w1, [x21]
    1cf0:	cbnz	w1, 1cfc <gomp_create_target_task+0x22c>
    1cf4:	stxr	w2, w0, [x21]
    1cf8:	cbnz	w2, 1cec <gomp_create_target_task+0x21c>
    1cfc:	cmp	w1, #0x0
    1d00:	b.ne	23fc <gomp_create_target_task+0x92c>  // b.any
    1d04:	adrp	x0, 0 <gomp_cancel_var>
    1d08:	ldrb	w22, [x0]
    1d0c:	cbnz	w22, 2058 <gomp_create_target_task+0x588>
    1d10:	cbnz	x20, 1ef0 <gomp_create_target_task+0x420>
    1d14:	ldr	w0, [sp, #216]
    1d18:	cbz	w0, 20bc <gomp_create_target_task+0x5ec>
    1d1c:	cbz	x23, 1d2c <gomp_create_target_task+0x25c>
    1d20:	ldr	x0, [x23, #56]
    1d24:	add	x0, x0, #0x1
    1d28:	str	x0, [x23, #56]
    1d2c:	ldr	x1, [sp, #104]
    1d30:	add	x22, x25, #0x8
    1d34:	add	x20, x24, #0x70
    1d38:	ldr	x0, [x25, #8]
    1d3c:	cbz	x1, 1d48 <gomp_create_target_task+0x278>
    1d40:	ldr	w1, [x1, #8]
    1d44:	tbnz	w1, #2, 1f88 <gomp_create_target_task+0x4b8>
    1d48:	cbnz	x0, 217c <gomp_create_target_task+0x6ac>
    1d4c:	ldr	x0, [x25, #24]
    1d50:	cbz	x0, 1f78 <gomp_create_target_task+0x4a8>
    1d54:	ldr	x1, [x0, #8]
    1d58:	stp	x0, x1, [x24, #112]
    1d5c:	str	x20, [x25, #24]
    1d60:	ldr	x0, [x24, #112]
    1d64:	str	x20, [x0, #8]
    1d68:	ldr	x0, [x24, #120]
    1d6c:	str	x20, [x0]
    1d70:	cbz	x23, 1da4 <gomp_create_target_task+0x2d4>
    1d74:	ldr	x0, [x23, #8]
    1d78:	add	x19, x24, #0x80
    1d7c:	cbnz	x0, 2220 <gomp_create_target_task+0x750>
    1d80:	ldr	x0, [x23, #24]
    1d84:	cbz	x0, 20ac <gomp_create_target_task+0x5dc>
    1d88:	ldr	x1, [x0, #8]
    1d8c:	stp	x0, x1, [x24, #128]
    1d90:	str	x19, [x23, #24]
    1d94:	ldr	x0, [x24, #128]
    1d98:	str	x19, [x0, #8]
    1d9c:	ldr	x0, [x24, #136]
    1da0:	str	x19, [x0]
    1da4:	ldr	x0, [x26, #1288]
    1da8:	add	x19, x24, #0x60
    1dac:	cbnz	x0, 2118 <gomp_create_target_task+0x648>
    1db0:	ldr	x0, [x26, #1304]
    1db4:	cbz	x0, 2108 <gomp_create_target_task+0x638>
    1db8:	ldr	x1, [x0, #8]
    1dbc:	stp	x0, x1, [x24, #96]
    1dc0:	str	x19, [x0, #8]
    1dc4:	ldr	x0, [x24, #104]
    1dc8:	str	x19, [x0]
    1dcc:	ldr	w0, [x26, #132]
    1dd0:	movi	v1.2s, #0x1
    1dd4:	ldr	d0, [x26, #1320]
    1dd8:	ldrb	w19, [x25, #204]
    1ddc:	orr	w0, w0, #0x1
    1de0:	str	w0, [x26, #132]
    1de4:	ldr	w0, [x26, #1328]
    1de8:	add	v0.2s, v0.2s, v1.2s
    1dec:	eor	w19, w19, #0x1
    1df0:	ldr	w20, [x26]
    1df4:	add	w19, w19, w0
    1df8:	str	d0, [x26, #1320]
    1dfc:	ldxr	w0, [x21]
    1e00:	stlxr	w1, wzr, [x21]
    1e04:	cbnz	w1, 1dfc <gomp_create_target_task+0x32c>
    1e08:	tbnz	w0, #31, 2260 <gomp_create_target_task+0x790>
    1e0c:	cmp	w19, w20
    1e10:	b.cc	1f48 <gomp_create_target_task+0x478>  // b.lo, b.ul, b.last
    1e14:	ldp	x19, x20, [sp, #16]
    1e18:	mov	w22, #0x1                   	// #1
    1e1c:	mov	w0, w22
    1e20:	ldp	x21, x22, [sp, #32]
    1e24:	ldp	x23, x24, [sp, #48]
    1e28:	ldp	x25, x26, [sp, #64]
    1e2c:	ldp	x27, x28, [sp, #80]
    1e30:	ldp	x29, x30, [sp], #208
    1e34:	ret
    1e38:	ldr	x13, [x19, #32]
    1e3c:	lsl	x1, x22, #1
    1e40:	sub	x0, x6, #0x1
    1e44:	add	x13, x13, x1
    1e48:	ands	x0, x13, x0
    1e4c:	sub	x6, x6, x0
    1e50:	add	x6, x13, x6
    1e54:	csel	x13, x6, x13, ne  // ne = any
    1e58:	cbz	x22, 1cc8 <gomp_create_target_task+0x1f8>
    1e5c:	mov	x28, #0x0                   	// #0
    1e60:	mov	x10, #0x0                   	// #0
    1e64:	b	1e74 <gomp_create_target_task+0x3a4>
    1e68:	add	x28, x28, #0x1
    1e6c:	cmp	x22, x28
    1e70:	b.eq	1cc8 <gomp_create_target_task+0x1f8>  // b.none
    1e74:	ldrh	w0, [x21, x28, lsl #1]
    1e78:	and	w1, w0, #0xff
    1e7c:	cmp	w1, #0xc
    1e80:	b.ne	1e68 <gomp_create_target_task+0x398>  // b.any
    1e84:	lsr	w0, w0, #8
    1e88:	mov	x1, #0x1                   	// #1
    1e8c:	sub	x10, x10, #0x1
    1e90:	str	x13, [sp, #144]
    1e94:	lsl	x0, x1, x0
    1e98:	add	x10, x10, x0
    1e9c:	ldr	x1, [sp, #96]
    1ea0:	neg	x0, x0
    1ea4:	and	x10, x0, x10
    1ea8:	str	x10, [sp, #160]
    1eac:	ldr	x2, [x27, x28, lsl #3]
    1eb0:	add	x14, x13, x10
    1eb4:	ldr	x1, [x1, x28, lsl #3]
    1eb8:	mov	x0, x14
    1ebc:	bl	0 <memcpy>
    1ec0:	mov	x14, x0
    1ec4:	ldp	x13, x1, [sp, #144]
    1ec8:	ldr	x0, [x27, x28, lsl #3]
    1ecc:	ldr	x10, [sp, #160]
    1ed0:	str	x14, [x1, x28, lsl #3]
    1ed4:	add	x10, x10, x0
    1ed8:	b	1e68 <gomp_create_target_task+0x398>
    1edc:	ldr	x7, [x0, #8]
    1ee0:	b	1b50 <gomp_create_target_task+0x80>
    1ee4:	mov	x2, x20
    1ee8:	mov	x6, #0x0                   	// #0
    1eec:	b	1bcc <gomp_create_target_task+0xfc>
    1ef0:	ldr	x2, [sp, #112]
    1ef4:	mov	x0, x24
    1ef8:	mov	x1, x25
    1efc:	bl	1168 <gomp_task_handle_depend>
    1f00:	ldr	x0, [x24, #80]
    1f04:	cbz	x0, 1d14 <gomp_create_target_task+0x244>
    1f08:	cbz	x23, 1f18 <gomp_create_target_task+0x448>
    1f0c:	ldr	x0, [x23, #56]
    1f10:	add	x0, x0, #0x1
    1f14:	str	x0, [x23, #56]
    1f18:	ldxr	w0, [x21]
    1f1c:	stlxr	w1, wzr, [x21]
    1f20:	cbnz	w1, 1f18 <gomp_create_target_task+0x448>
    1f24:	tbz	w0, #31, 1e14 <gomp_create_target_task+0x344>
    1f28:	mov	x0, x21
    1f2c:	mov	w22, #0x1                   	// #1
    1f30:	bl	0 <gomp_mutex_unlock_slow>
    1f34:	ldp	x19, x20, [sp, #16]
    1f38:	b	1e1c <gomp_create_target_task+0x34c>
    1f3c:	mov	x14, #0xd0                  	// #208
    1f40:	mov	x20, #0x0                   	// #0
    1f44:	b	1b5c <gomp_create_target_task+0x8c>
    1f48:	add	x0, x26, #0x80
    1f4c:	mov	w22, #0x1                   	// #1
    1f50:	mov	w1, w22
    1f54:	bl	0 <gomp_team_barrier_wake>
    1f58:	mov	w0, w22
    1f5c:	ldp	x19, x20, [sp, #16]
    1f60:	ldp	x21, x22, [sp, #32]
    1f64:	ldp	x23, x24, [sp, #48]
    1f68:	ldp	x25, x26, [sp, #64]
    1f6c:	ldp	x27, x28, [sp, #80]
    1f70:	ldp	x29, x30, [sp], #208
    1f74:	ret
    1f78:	dup	v0.2d, x20
    1f7c:	str	q0, [x24, #112]
    1f80:	str	x20, [x25, #24]
    1f84:	b	1d70 <gomp_create_target_task+0x2a0>
    1f88:	cbnz	x0, 2304 <gomp_create_target_task+0x834>
    1f8c:	ldr	x0, [x25, #24]
    1f90:	cbz	x0, 22e4 <gomp_create_target_task+0x814>
    1f94:	ldr	x1, [x0, #8]
    1f98:	stp	x0, x1, [x24, #112]
    1f9c:	str	x20, [x0, #8]
    1fa0:	ldr	x0, [x24, #120]
    1fa4:	str	x20, [x0]
    1fa8:	cbz	x23, 1fd4 <gomp_create_target_task+0x504>
    1fac:	ldr	x0, [x23, #8]
    1fb0:	add	x22, x24, #0x80
    1fb4:	cbnz	x0, 2378 <gomp_create_target_task+0x8a8>
    1fb8:	ldr	x0, [x23, #24]
    1fbc:	cbz	x0, 22ac <gomp_create_target_task+0x7dc>
    1fc0:	ldr	x1, [x0, #8]
    1fc4:	stp	x0, x1, [x24, #128]
    1fc8:	str	x22, [x0, #8]
    1fcc:	ldr	x0, [x24, #136]
    1fd0:	str	x22, [x0]
    1fd4:	ldr	w0, [x26, #1320]
    1fd8:	mov	w1, #0x3                   	// #3
    1fdc:	stp	xzr, xzr, [x24, #96]
    1fe0:	add	w0, w0, #0x1
    1fe4:	str	w1, [x24, #200]
    1fe8:	str	w0, [x26, #1320]
    1fec:	ldxr	w0, [x21]
    1ff0:	stlxr	w1, wzr, [x21]
    1ff4:	cbnz	w1, 1fec <gomp_create_target_task+0x51c>
    1ff8:	tbnz	w0, #31, 23d4 <gomp_create_target_task+0x904>
    1ffc:	ldp	x1, x2, [sp, #120]
    2000:	ldr	x0, [x24, #192]
    2004:	add	x23, x1, x2
    2008:	str	x24, [x23, #80]
    200c:	bl	0 <gomp_target_task_fn>
    2010:	mov	w0, #0x1                   	// #1
    2014:	str	x25, [x23, #80]
    2018:	ldaxr	w1, [x21]
    201c:	cbnz	w1, 2028 <gomp_create_target_task+0x558>
    2020:	stxr	w2, w0, [x21]
    2024:	cbnz	w2, 2018 <gomp_create_target_task+0x548>
    2028:	cmp	w1, #0x0
    202c:	b.ne	2408 <gomp_create_target_task+0x938>  // b.any
    2030:	ldr	w1, [x19, #44]
    2034:	mov	w0, #0x4                   	// #4
    2038:	str	w0, [x24, #200]
    203c:	cmp	w1, #0x5
    2040:	b.eq	22f4 <gomp_create_target_task+0x824>  // b.none
    2044:	str	w0, [x19, #44]
    2048:	ldxr	w0, [x21]
    204c:	stlxr	w1, wzr, [x21]
    2050:	cbz	w1, 1f24 <gomp_create_target_task+0x454>
    2054:	b	2048 <gomp_create_target_task+0x578>
    2058:	ldr	w0, [x26, #132]
    205c:	tbnz	w0, #2, 2084 <gomp_create_target_task+0x5b4>
    2060:	cbz	x23, 1d10 <gomp_create_target_task+0x240>
    2064:	ldrb	w0, [x23, #49]
    2068:	cbnz	w0, 2084 <gomp_create_target_task+0x5b4>
    206c:	ldrb	w0, [x23, #50]
    2070:	cbz	w0, 1d10 <gomp_create_target_task+0x240>
    2074:	ldr	x0, [x23]
    2078:	cbz	x0, 1d10 <gomp_create_target_task+0x240>
    207c:	ldrb	w0, [x0, #49]
    2080:	cbz	w0, 1d10 <gomp_create_target_task+0x240>
    2084:	ldxr	w0, [x21]
    2088:	stlxr	w1, wzr, [x21]
    208c:	cbnz	w1, 2084 <gomp_create_target_task+0x5b4>
    2090:	tbnz	w0, #31, 23f0 <gomp_create_target_task+0x920>
    2094:	ldr	x0, [x24, #56]
    2098:	cbnz	x0, 22bc <gomp_create_target_task+0x7ec>
    209c:	mov	x0, x24
    20a0:	bl	0 <free>
    20a4:	ldp	x19, x20, [sp, #16]
    20a8:	b	1e1c <gomp_create_target_task+0x34c>
    20ac:	dup	v0.2d, x19
    20b0:	str	q0, [x24, #128]
    20b4:	str	x19, [x23, #24]
    20b8:	b	1da4 <gomp_create_target_task+0x2d4>
    20bc:	mov	x0, x24
    20c0:	bl	330 <gomp_task_run_post_handle_depend_hash>
    20c4:	ldxr	w0, [x21]
    20c8:	stlxr	w1, wzr, [x21]
    20cc:	cbnz	w1, 20c4 <gomp_create_target_task+0x5f4>
    20d0:	tbnz	w0, #31, 236c <gomp_create_target_task+0x89c>
    20d4:	ldr	x0, [x24, #56]
    20d8:	cbnz	x0, 2364 <gomp_create_target_task+0x894>
    20dc:	mov	x0, x24
    20e0:	mov	w22, #0x0                   	// #0
    20e4:	bl	0 <free>
    20e8:	mov	w0, w22
    20ec:	ldp	x19, x20, [sp, #16]
    20f0:	ldp	x21, x22, [sp, #32]
    20f4:	ldp	x23, x24, [sp, #48]
    20f8:	ldp	x25, x26, [sp, #64]
    20fc:	ldp	x27, x28, [sp, #80]
    2100:	ldp	x29, x30, [sp], #208
    2104:	ret
    2108:	dup	v0.2d, x19
    210c:	str	q0, [x24, #96]
    2110:	str	x19, [x26, #1304]
    2114:	b	1dcc <gomp_create_target_task+0x2fc>
    2118:	add	x22, x26, #0x508
    211c:	add	x1, sp, #0xb8
    2120:	mov	x0, x22
    2124:	str	wzr, [sp, #184]
    2128:	bl	0 <prio_splay_tree_lookup>
    212c:	cbnz	x0, 215c <gomp_create_target_task+0x68c>
    2130:	mov	x0, #0x28                  	// #40
    2134:	bl	0 <gomp_malloc>
    2138:	movi	v0.4s, #0x0
    213c:	mov	x20, x0
    2140:	mov	x1, x20
    2144:	mov	x0, x22
    2148:	str	wzr, [x20]
    214c:	stur	q0, [x20, #8]
    2150:	stur	q0, [x20, #24]
    2154:	bl	0 <prio_splay_tree_insert>
    2158:	mov	x0, x20
    215c:	ldr	x1, [x0, #8]
    2160:	cbz	x1, 22d4 <gomp_create_target_task+0x804>
    2164:	ldr	x0, [x1, #8]
    2168:	stp	x1, x0, [x24, #96]
    216c:	str	x19, [x1, #8]
    2170:	ldr	x0, [x24, #104]
    2174:	str	x19, [x0]
    2178:	b	1dcc <gomp_create_target_task+0x2fc>
    217c:	add	x1, sp, #0xb8
    2180:	mov	x0, x22
    2184:	str	wzr, [sp, #184]
    2188:	bl	0 <prio_splay_tree_lookup>
    218c:	cbnz	x0, 21bc <gomp_create_target_task+0x6ec>
    2190:	mov	x0, #0x28                  	// #40
    2194:	bl	0 <gomp_malloc>
    2198:	movi	v0.4s, #0x0
    219c:	mov	x19, x0
    21a0:	mov	x1, x19
    21a4:	mov	x0, x22
    21a8:	str	wzr, [x19]
    21ac:	stur	q0, [x19, #8]
    21b0:	stur	q0, [x19, #24]
    21b4:	bl	0 <prio_splay_tree_insert>
    21b8:	mov	x0, x19
    21bc:	ldr	x1, [x0, #8]
    21c0:	cbz	x1, 22c4 <gomp_create_target_task+0x7f4>
    21c4:	ldr	x2, [x1, #8]
    21c8:	stp	x1, x2, [x24, #112]
    21cc:	str	x20, [x0, #8]
    21d0:	ldr	x0, [x24, #112]
    21d4:	str	x20, [x0, #8]
    21d8:	ldr	x0, [x24, #120]
    21dc:	str	x20, [x0]
    21e0:	b	1d70 <gomp_create_target_task+0x2a0>
    21e4:	ldr	w0, [x26, #132]
    21e8:	tbnz	w0, #2, 1e18 <gomp_create_target_task+0x348>
    21ec:	ldr	x25, [x10, #80]
    21f0:	ldr	x23, [x25, #40]
    21f4:	cbz	x23, 2218 <gomp_create_target_task+0x748>
    21f8:	ldrb	w0, [x23, #49]
    21fc:	cbnz	w0, 1e18 <gomp_create_target_task+0x348>
    2200:	ldrb	w0, [x23, #50]
    2204:	cbz	w0, 2218 <gomp_create_target_task+0x748>
    2208:	ldr	x0, [x23]
    220c:	cbz	x0, 2218 <gomp_create_target_task+0x748>
    2210:	ldrb	w0, [x0, #49]
    2214:	cbnz	w0, 1e18 <gomp_create_target_task+0x348>
    2218:	stp	x19, x20, [sp, #16]
    221c:	b	1b40 <gomp_create_target_task+0x70>
    2220:	add	x23, x23, #0x8
    2224:	add	x1, sp, #0xb8
    2228:	mov	x0, x23
    222c:	str	wzr, [sp, #184]
    2230:	bl	0 <prio_splay_tree_lookup>
    2234:	cbz	x0, 226c <gomp_create_target_task+0x79c>
    2238:	ldr	x1, [x0, #8]
    223c:	cbz	x1, 229c <gomp_create_target_task+0x7cc>
    2240:	ldr	x2, [x1, #8]
    2244:	stp	x1, x2, [x24, #128]
    2248:	str	x19, [x0, #8]
    224c:	ldr	x0, [x24, #128]
    2250:	str	x19, [x0, #8]
    2254:	ldr	x0, [x24, #136]
    2258:	str	x19, [x0]
    225c:	b	1da4 <gomp_create_target_task+0x2d4>
    2260:	mov	x0, x21
    2264:	bl	0 <gomp_mutex_unlock_slow>
    2268:	b	1e0c <gomp_create_target_task+0x33c>
    226c:	mov	x0, #0x28                  	// #40
    2270:	bl	0 <gomp_malloc>
    2274:	movi	v0.4s, #0x0
    2278:	mov	x20, x0
    227c:	mov	x1, x20
    2280:	mov	x0, x23
    2284:	str	wzr, [x20]
    2288:	stur	q0, [x20, #8]
    228c:	stur	q0, [x20, #24]
    2290:	bl	0 <prio_splay_tree_insert>
    2294:	mov	x0, x20
    2298:	b	2238 <gomp_create_target_task+0x768>
    229c:	dup	v0.2d, x19
    22a0:	str	q0, [x24, #128]
    22a4:	str	x19, [x0, #8]
    22a8:	b	1da4 <gomp_create_target_task+0x2d4>
    22ac:	dup	v0.2d, x22
    22b0:	str	q0, [x24, #128]
    22b4:	str	x22, [x23, #24]
    22b8:	b	1fd4 <gomp_create_target_task+0x504>
    22bc:	bl	0 <free>
    22c0:	b	209c <gomp_create_target_task+0x5cc>
    22c4:	dup	v0.2d, x20
    22c8:	str	q0, [x24, #112]
    22cc:	str	x20, [x0, #8]
    22d0:	b	1d70 <gomp_create_target_task+0x2a0>
    22d4:	dup	v0.2d, x19
    22d8:	str	q0, [x24, #96]
    22dc:	str	x19, [x0, #8]
    22e0:	b	1dcc <gomp_create_target_task+0x2fc>
    22e4:	dup	v0.2d, x20
    22e8:	str	q0, [x24, #112]
    22ec:	str	x20, [x25, #24]
    22f0:	b	1fa8 <gomp_create_target_task+0x4d8>
    22f4:	mov	x1, x24
    22f8:	mov	x0, x26
    22fc:	bl	15a8 <gomp_target_task_completion>
    2300:	b	2048 <gomp_create_target_task+0x578>
    2304:	add	x1, sp, #0xb8
    2308:	mov	x0, x22
    230c:	str	wzr, [sp, #184]
    2310:	bl	0 <prio_splay_tree_lookup>
    2314:	cbnz	x0, 2344 <gomp_create_target_task+0x874>
    2318:	mov	x0, #0x28                  	// #40
    231c:	bl	0 <gomp_malloc>
    2320:	movi	v0.4s, #0x0
    2324:	mov	x1, x0
    2328:	mov	x0, x22
    232c:	mov	x22, x1
    2330:	str	wzr, [x1]
    2334:	stur	q0, [x1, #8]
    2338:	stur	q0, [x1, #24]
    233c:	bl	0 <prio_splay_tree_insert>
    2340:	mov	x0, x22
    2344:	ldr	x1, [x0, #8]
    2348:	cbz	x1, 23e0 <gomp_create_target_task+0x910>
    234c:	ldr	x0, [x1, #8]
    2350:	stp	x1, x0, [x24, #112]
    2354:	str	x20, [x1, #8]
    2358:	ldr	x0, [x24, #120]
    235c:	str	x20, [x0]
    2360:	b	1fa8 <gomp_create_target_task+0x4d8>
    2364:	bl	0 <free>
    2368:	b	20dc <gomp_create_target_task+0x60c>
    236c:	mov	x0, x21
    2370:	bl	0 <gomp_mutex_unlock_slow>
    2374:	b	20d4 <gomp_create_target_task+0x604>
    2378:	add	x23, x23, #0x8
    237c:	add	x1, sp, #0xb8
    2380:	mov	x0, x23
    2384:	str	wzr, [sp, #184]
    2388:	bl	0 <prio_splay_tree_lookup>
    238c:	mov	x20, x0
    2390:	cbnz	x0, 23bc <gomp_create_target_task+0x8ec>
    2394:	mov	x0, #0x28                  	// #40
    2398:	bl	0 <gomp_malloc>
    239c:	movi	v0.4s, #0x0
    23a0:	mov	x20, x0
    23a4:	mov	x1, x20
    23a8:	mov	x0, x23
    23ac:	str	wzr, [x20]
    23b0:	stur	q0, [x20, #8]
    23b4:	stur	q0, [x20, #24]
    23b8:	bl	0 <prio_splay_tree_insert>
    23bc:	ldr	x0, [x20, #8]
    23c0:	cbnz	x0, 1fc0 <gomp_create_target_task+0x4f0>
    23c4:	dup	v0.2d, x22
    23c8:	str	q0, [x24, #128]
    23cc:	str	x22, [x20, #8]
    23d0:	b	1fd4 <gomp_create_target_task+0x504>
    23d4:	mov	x0, x21
    23d8:	bl	0 <gomp_mutex_unlock_slow>
    23dc:	b	1ffc <gomp_create_target_task+0x52c>
    23e0:	dup	v0.2d, x20
    23e4:	str	q0, [x24, #112]
    23e8:	str	x20, [x0, #8]
    23ec:	b	1fa8 <gomp_create_target_task+0x4d8>
    23f0:	mov	x0, x21
    23f4:	bl	0 <gomp_mutex_unlock_slow>
    23f8:	b	2094 <gomp_create_target_task+0x5c4>
    23fc:	mov	x0, x21
    2400:	bl	0 <gomp_mutex_lock_slow>
    2404:	b	1d04 <gomp_create_target_task+0x234>
    2408:	mov	x0, x21
    240c:	bl	0 <gomp_mutex_lock_slow>
    2410:	b	2030 <gomp_create_target_task+0x560>
    2414:	nop

0000000000002418 <gomp_barrier_handle_tasks>:
    2418:	stp	x29, x30, [sp, #-160]!
    241c:	mov	w2, #0x1                   	// #1
    2420:	mov	x29, sp
    2424:	stp	x23, x24, [sp, #48]
    2428:	adrp	x23, 0 <gomp_tls_data>
    242c:	ldr	x23, [x23]
    2430:	stp	x21, x22, [sp, #32]
    2434:	mrs	x22, tpidr_el0
    2438:	add	x1, x22, x23
    243c:	stp	x25, x26, [sp, #64]
    2440:	ldr	x24, [x1, #16]
    2444:	stp	x19, x20, [sp, #16]
    2448:	mov	w19, w0
    244c:	ldr	x26, [x1, #80]
    2450:	add	x20, x24, #0x500
    2454:	ldaxr	w1, [x20]
    2458:	cbnz	w1, 2464 <gomp_barrier_handle_tasks+0x4c>
    245c:	stxr	w0, w2, [x20]
    2460:	cbnz	w0, 2454 <gomp_barrier_handle_tasks+0x3c>
    2464:	cmp	w1, #0x0
    2468:	b.ne	2a54 <gomp_barrier_handle_tasks+0x63c>  // b.any
    246c:	tbz	w19, #0, 29c0 <gomp_barrier_handle_tasks+0x5a8>
    2470:	ldr	w0, [x24, #1320]
    2474:	cbz	w0, 27b4 <gomp_barrier_handle_tasks+0x39c>
    2478:	ldr	w0, [x24, #132]
    247c:	stp	x27, x28, [sp, #80]
    2480:	orr	w0, w0, #0x2
    2484:	str	w0, [x24, #132]
    2488:	and	w0, w19, #0xfffffff8
    248c:	add	x25, x24, #0x508
    2490:	add	w0, w0, #0x8
    2494:	str	w0, [sp, #140]
    2498:	add	x0, x24, #0x80
    249c:	str	x0, [sp, #128]
    24a0:	ldr	x0, [x24, #1288]
    24a4:	mov	w27, #0x0                   	// #0
    24a8:	mov	x28, #0x0                   	// #0
    24ac:	cbnz	x0, 2690 <gomp_barrier_handle_tasks+0x278>
    24b0:	ldr	x19, [x25, #16]
    24b4:	cbz	x19, 24f0 <gomp_barrier_handle_tasks+0xd8>
    24b8:	sub	x19, x19, #0x60
    24bc:	mov	w0, #0x1                   	// #1
    24c0:	strb	w0, [sp, #159]
    24c4:	ldr	x1, [x19]
    24c8:	mov	x2, x24
    24cc:	mov	x0, x19
    24d0:	bl	508 <gomp_task_run_pre>
    24d4:	ands	w21, w0, #0xff
    24d8:	b.ne	26d8 <gomp_barrier_handle_tasks+0x2c0>  // b.any
    24dc:	ldr	w0, [x24, #1328]
    24e0:	mov	w1, #0x1                   	// #1
    24e4:	add	w0, w0, #0x1
    24e8:	str	w0, [x24, #1328]
    24ec:	strb	w1, [x19, #204]
    24f0:	ldxr	w0, [x20]
    24f4:	stlxr	w1, wzr, [x20]
    24f8:	cbnz	w1, 24f0 <gomp_barrier_handle_tasks+0xd8>
    24fc:	tbnz	w0, #31, 2700 <gomp_barrier_handle_tasks+0x2e8>
    2500:	cbnz	w27, 26f0 <gomp_barrier_handle_tasks+0x2d8>
    2504:	cbz	x28, 2518 <gomp_barrier_handle_tasks+0x100>
    2508:	ldr	x0, [x28, #56]
    250c:	cbnz	x0, 2994 <gomp_barrier_handle_tasks+0x57c>
    2510:	mov	x0, x28
    2514:	bl	0 <free>
    2518:	cbz	x19, 2884 <gomp_barrier_handle_tasks+0x46c>
    251c:	ldp	x1, x0, [x19, #184]
    2520:	add	x21, x22, x23
    2524:	str	x19, [x21, #80]
    2528:	cbz	x1, 28ac <gomp_barrier_handle_tasks+0x494>
    252c:	blr	x1
    2530:	add	x0, x22, x23
    2534:	mov	w2, #0x1                   	// #1
    2538:	str	x26, [x0, #80]
    253c:	ldaxr	w1, [x20]
    2540:	cbnz	w1, 254c <gomp_barrier_handle_tasks+0x134>
    2544:	stxr	w0, w2, [x20]
    2548:	cbnz	w0, 253c <gomp_barrier_handle_tasks+0x124>
    254c:	cmp	w1, #0x0
    2550:	b.ne	2a74 <gomp_barrier_handle_tasks+0x65c>  // b.any
    2554:	mov	w21, #0x0                   	// #0
    2558:	mov	w27, #0x0                   	// #0
    255c:	ldr	x3, [x19, #72]
    2560:	ldr	x28, [x19]
    2564:	cbz	x3, 2590 <gomp_barrier_handle_tasks+0x178>
    2568:	cbz	x28, 27f4 <gomp_barrier_handle_tasks+0x3dc>
    256c:	mov	x0, x19
    2570:	bl	330 <gomp_task_run_post_handle_depend_hash>
    2574:	ldr	x0, [x19, #48]
    2578:	cbz	x0, 28a0 <gomp_barrier_handle_tasks+0x488>
    257c:	mov	x1, x24
    2580:	mov	x0, x19
    2584:	bl	8a0 <gomp_task_run_post_handle_dependers>
    2588:	mov	x3, x0
    258c:	ldr	x28, [x19]
    2590:	cbz	x28, 25c4 <gomp_barrier_handle_tasks+0x1ac>
    2594:	ldrb	w0, [x19, #207]
    2598:	cbnz	w0, 2910 <gomp_barrier_handle_tasks+0x4f8>
    259c:	ldr	x0, [x28, #8]
    25a0:	add	x2, x19, #0x70
    25a4:	cbnz	x0, 2970 <gomp_barrier_handle_tasks+0x558>
    25a8:	ldp	x0, x1, [x19, #112]
    25ac:	ldr	x4, [x28, #24]
    25b0:	cmp	x4, x2
    25b4:	str	x0, [x1]
    25b8:	str	x1, [x0, #8]
    25bc:	b.eq	2710 <gomp_barrier_handle_tasks+0x2f8>  // b.none
    25c0:	stp	xzr, xzr, [x19, #112]
    25c4:	ldr	x4, [x19, #8]
    25c8:	cbnz	x4, 2808 <gomp_barrier_handle_tasks+0x3f0>
    25cc:	ldr	x1, [x19, #24]
    25d0:	mov	x0, x1
    25d4:	cbz	x1, 25e8 <gomp_barrier_handle_tasks+0x1d0>
    25d8:	stur	xzr, [x0, #-112]
    25dc:	ldr	x0, [x0]
    25e0:	cmp	x1, x0
    25e4:	b.ne	25d8 <gomp_barrier_handle_tasks+0x1c0>  // b.any
    25e8:	ldr	x28, [x19, #40]
    25ec:	cbz	x28, 2640 <gomp_barrier_handle_tasks+0x228>
    25f0:	ldr	x0, [x28, #8]
    25f4:	add	x2, x19, #0x80
    25f8:	cbnz	x0, 299c <gomp_barrier_handle_tasks+0x584>
    25fc:	ldp	x0, x1, [x19, #128]
    2600:	add	x4, x28, #0x10
    2604:	ldr	x8, [x4, #8]
    2608:	mov	w7, #0x0                   	// #0
    260c:	cmp	x2, x8
    2610:	str	x0, [x1]
    2614:	str	x1, [x0, #8]
    2618:	b.eq	285c <gomp_barrier_handle_tasks+0x444>  // b.none
    261c:	ldr	x0, [x28, #56]
    2620:	stp	xzr, xzr, [x19, #128]
    2624:	cmp	x0, #0x1
    2628:	b.ls	2878 <gomp_barrier_handle_tasks+0x460>  // b.plast
    262c:	sub	x0, x0, #0x1
    2630:	str	x0, [x28, #56]
    2634:	cbz	w7, 2640 <gomp_barrier_handle_tasks+0x228>
    2638:	ldrb	w0, [x28, #48]
    263c:	cbnz	w0, 2770 <gomp_barrier_handle_tasks+0x358>
    2640:	cbnz	w21, 2650 <gomp_barrier_handle_tasks+0x238>
    2644:	ldr	w0, [x24, #1328]
    2648:	sub	w0, w0, #0x1
    264c:	str	w0, [x24, #1328]
    2650:	cmp	x3, #0x1
    2654:	b.ls	266c <gomp_barrier_handle_tasks+0x254>  // b.plast
    2658:	ldr	w6, [x24]
    265c:	ldr	w0, [x24, #1328]
    2660:	sub	w27, w6, w0
    2664:	cmp	x3, w27, sxtw
    2668:	csel	w27, w3, w27, cc  // cc = lo, ul, last
    266c:	ldr	w0, [x24, #1320]
    2670:	sub	w0, w0, #0x1
    2674:	str	w0, [x24, #1320]
    2678:	cbnz	w0, 2684 <gomp_barrier_handle_tasks+0x26c>
    267c:	ldr	w0, [x24, #132]
    2680:	tbnz	w0, #1, 2720 <gomp_barrier_handle_tasks+0x308>
    2684:	mov	x28, x19
    2688:	ldr	x0, [x24, #1288]
    268c:	cbz	x0, 24b0 <gomp_barrier_handle_tasks+0x98>
    2690:	add	x4, sp, #0x9f
    2694:	mov	x1, x25
    2698:	mov	x3, #0x0                   	// #0
    269c:	mov	w2, #0x3e7                 	// #999
    26a0:	mov	w0, #0x0                   	// #0
    26a4:	bl	0 <priority_tree_next_task>
    26a8:	mov	x19, x0
    26ac:	cbnz	x0, 24c4 <gomp_barrier_handle_tasks+0xac>
    26b0:	ldr	x0, [x25]
    26b4:	mov	x2, x24
    26b8:	ldr	x19, [x0, #8]
    26bc:	sub	x19, x19, #0x60
    26c0:	ldr	x1, [x19]
    26c4:	mov	x0, x19
    26c8:	bl	508 <gomp_task_run_pre>
    26cc:	ands	w21, w0, #0xff
    26d0:	b.eq	24dc <gomp_barrier_handle_tasks+0xc4>  // b.none
    26d4:	nop
    26d8:	cbz	x28, 255c <gomp_barrier_handle_tasks+0x144>
    26dc:	ldr	x0, [x28, #56]
    26e0:	cbnz	x0, 2a60 <gomp_barrier_handle_tasks+0x648>
    26e4:	mov	x0, x28
    26e8:	bl	0 <free>
    26ec:	b	255c <gomp_barrier_handle_tasks+0x144>
    26f0:	ldr	x0, [sp, #128]
    26f4:	mov	w1, w27
    26f8:	bl	0 <gomp_team_barrier_wake>
    26fc:	b	2504 <gomp_barrier_handle_tasks+0xec>
    2700:	mov	x0, x20
    2704:	bl	0 <gomp_mutex_unlock_slow>
    2708:	cbz	w27, 2504 <gomp_barrier_handle_tasks+0xec>
    270c:	b	26f0 <gomp_barrier_handle_tasks+0x2d8>
    2710:	cmp	x0, x4
    2714:	b.eq	29c8 <gomp_barrier_handle_tasks+0x5b0>  // b.none
    2718:	str	x0, [x28, #24]
    271c:	b	25c0 <gomp_barrier_handle_tasks+0x1a8>
    2720:	ldr	w0, [sp, #140]
    2724:	str	w0, [x24, #132]
    2728:	ldxr	w0, [x20]
    272c:	stlxr	w1, wzr, [x20]
    2730:	cbnz	w1, 2728 <gomp_barrier_handle_tasks+0x310>
    2734:	tbnz	w0, #31, 2a2c <gomp_barrier_handle_tasks+0x614>
    2738:	ldr	x0, [sp, #128]
    273c:	mov	w1, #0x0                   	// #0
    2740:	bl	0 <gomp_team_barrier_wake>
    2744:	mov	w0, #0x1                   	// #1
    2748:	ldaxr	w1, [x20]
    274c:	cbnz	w1, 2758 <gomp_barrier_handle_tasks+0x340>
    2750:	stxr	w2, w0, [x20]
    2754:	cbnz	w2, 2748 <gomp_barrier_handle_tasks+0x330>
    2758:	cmp	w1, #0x0
    275c:	b.eq	2684 <gomp_barrier_handle_tasks+0x26c>  // b.none
    2760:	mov	x0, x20
    2764:	mov	x28, x19
    2768:	bl	0 <gomp_mutex_lock_slow>
    276c:	b	2688 <gomp_barrier_handle_tasks+0x270>
    2770:	ldr	w1, [x28, #52]
    2774:	add	x0, x28, #0x34
    2778:	strb	wzr, [x28, #48]
    277c:	add	w2, w1, #0x1
    2780:	and	w2, w2, #0x7fffffff
    2784:	ldxr	w4, [x0]
    2788:	cmp	w4, w1
    278c:	b.ne	2798 <gomp_barrier_handle_tasks+0x380>  // b.any
    2790:	stlxr	w5, w2, [x0]
    2794:	cmp	w5, #0x0
    2798:	mov	w1, w4
    279c:	b.ne	277c <gomp_barrier_handle_tasks+0x364>  // b.any
    27a0:	tbz	w4, #31, 2640 <gomp_barrier_handle_tasks+0x228>
    27a4:	str	x3, [sp, #104]
    27a8:	bl	0 <gomp_sem_post_slow>
    27ac:	ldr	x3, [sp, #104]
    27b0:	b	2640 <gomp_barrier_handle_tasks+0x228>
    27b4:	and	w0, w19, #0xfffffff8
    27b8:	add	w0, w0, #0x8
    27bc:	str	w0, [x24, #132]
    27c0:	ldxr	w0, [x20]
    27c4:	stlxr	w1, wzr, [x20]
    27c8:	cbnz	w1, 27c0 <gomp_barrier_handle_tasks+0x3a8>
    27cc:	tbnz	w0, #31, 2a68 <gomp_barrier_handle_tasks+0x650>
    27d0:	add	x0, x24, #0x80
    27d4:	mov	w1, #0x0                   	// #0
    27d8:	bl	0 <gomp_team_barrier_wake>
    27dc:	ldp	x19, x20, [sp, #16]
    27e0:	ldp	x21, x22, [sp, #32]
    27e4:	ldp	x23, x24, [sp, #48]
    27e8:	ldp	x25, x26, [sp, #64]
    27ec:	ldp	x29, x30, [sp], #160
    27f0:	ret
    27f4:	ldr	x0, [x19, #48]
    27f8:	mov	x3, #0x0                   	// #0
    27fc:	cbnz	x0, 257c <gomp_barrier_handle_tasks+0x164>
    2800:	ldr	x4, [x19, #8]
    2804:	cbz	x4, 25cc <gomp_barrier_handle_tasks+0x1b4>
    2808:	add	x28, x19, #0x8
    280c:	ldr	x7, [x4, #8]
    2810:	mov	x0, x4
    2814:	ldp	x1, x4, [x4, #24]
    2818:	mov	x2, x7
    281c:	cbz	x7, 2830 <gomp_barrier_handle_tasks+0x418>
    2820:	stur	xzr, [x2, #-112]
    2824:	ldr	x2, [x2]
    2828:	cmp	x7, x2
    282c:	b.ne	2820 <gomp_barrier_handle_tasks+0x408>  // b.any
    2830:	stp	x3, x1, [sp, #104]
    2834:	str	x4, [sp, #120]
    2838:	bl	0 <free>
    283c:	ldr	x1, [sp, #112]
    2840:	mov	x0, x28
    2844:	bl	e0 <gomp_clear_parent_in_tree>
    2848:	ldr	x4, [sp, #120]
    284c:	ldr	x3, [sp, #104]
    2850:	cbnz	x4, 280c <gomp_barrier_handle_tasks+0x3f4>
    2854:	str	xzr, [x28]
    2858:	b	25e8 <gomp_barrier_handle_tasks+0x1d0>
    285c:	cmp	x2, x0
    2860:	b.eq	2a20 <gomp_barrier_handle_tasks+0x608>  // b.none
    2864:	str	x0, [x4, #8]
    2868:	ldr	x0, [x28, #56]
    286c:	stp	xzr, xzr, [x19, #128]
    2870:	cmp	x0, #0x1
    2874:	b.hi	262c <gomp_barrier_handle_tasks+0x214>  // b.pmore
    2878:	add	x0, x28, #0x38
    287c:	stlr	xzr, [x0]
    2880:	b	2634 <gomp_barrier_handle_tasks+0x21c>
    2884:	ldp	x19, x20, [sp, #16]
    2888:	ldp	x21, x22, [sp, #32]
    288c:	ldp	x23, x24, [sp, #48]
    2890:	ldp	x25, x26, [sp, #64]
    2894:	ldp	x27, x28, [sp, #80]
    2898:	ldp	x29, x30, [sp], #160
    289c:	ret
    28a0:	mov	x3, #0x0                   	// #0
    28a4:	ldr	x28, [x19]
    28a8:	b	2590 <gomp_barrier_handle_tasks+0x178>
    28ac:	bl	0 <gomp_target_task_fn>
    28b0:	tst	w0, #0xff
    28b4:	b.eq	2530 <gomp_barrier_handle_tasks+0x118>  // b.none
    28b8:	mov	w0, #0x1                   	// #1
    28bc:	str	x26, [x21, #80]
    28c0:	ldaxr	w1, [x20]
    28c4:	cbnz	w1, 28d0 <gomp_barrier_handle_tasks+0x4b8>
    28c8:	stxr	w2, w0, [x20]
    28cc:	cbnz	w2, 28c0 <gomp_barrier_handle_tasks+0x4a8>
    28d0:	cmp	w1, #0x0
    28d4:	b.ne	2a88 <gomp_barrier_handle_tasks+0x670>  // b.any
    28d8:	ldr	x1, [x19, #192]
    28dc:	mov	w2, #0x4                   	// #4
    28e0:	ldr	w0, [x24, #1328]
    28e4:	str	w2, [x19, #200]
    28e8:	sub	w0, w0, #0x1
    28ec:	str	w0, [x24, #1328]
    28f0:	ldr	w0, [x1, #44]
    28f4:	cmp	w0, #0x5
    28f8:	b.eq	2a38 <gomp_barrier_handle_tasks+0x620>  // b.none
    28fc:	mov	x19, #0x0                   	// #0
    2900:	mov	w27, #0x0                   	// #0
    2904:	mov	x28, x19
    2908:	str	w2, [x1, #44]
    290c:	b	2688 <gomp_barrier_handle_tasks+0x270>
    2910:	ldr	x1, [x28, #64]
    2914:	ldr	x0, [x1, #8]
    2918:	sub	x0, x0, #0x1
    291c:	str	x0, [x1, #8]
    2920:	cbnz	x0, 259c <gomp_barrier_handle_tasks+0x184>
    2924:	ldrb	w0, [x1, #1]
    2928:	cbz	w0, 259c <gomp_barrier_handle_tasks+0x184>
    292c:	ldr	w2, [x1, #16]
    2930:	add	x0, x1, #0x10
    2934:	strb	wzr, [x1, #1]
    2938:	add	w1, w2, #0x1
    293c:	and	w1, w1, #0x7fffffff
    2940:	ldxr	w4, [x0]
    2944:	cmp	w4, w2
    2948:	b.ne	2954 <gomp_barrier_handle_tasks+0x53c>  // b.any
    294c:	stlxr	w5, w1, [x0]
    2950:	cmp	w5, #0x0
    2954:	mov	w2, w4
    2958:	b.ne	2938 <gomp_barrier_handle_tasks+0x520>  // b.any
    295c:	tbz	w4, #31, 259c <gomp_barrier_handle_tasks+0x184>
    2960:	str	x3, [sp, #104]
    2964:	bl	0 <gomp_sem_post_slow>
    2968:	ldr	x3, [sp, #104]
    296c:	b	259c <gomp_barrier_handle_tasks+0x184>
    2970:	add	x1, x28, #0x8
    2974:	mov	w0, #0x1                   	// #1
    2978:	stp	x1, x3, [sp, #104]
    297c:	bl	0 <priority_tree_remove>
    2980:	ldr	x0, [x28, #8]
    2984:	ldp	x1, x3, [sp, #104]
    2988:	cbnz	x0, 25c0 <gomp_barrier_handle_tasks+0x1a8>
    298c:	stlr	xzr, [x1]
    2990:	b	29d0 <gomp_barrier_handle_tasks+0x5b8>
    2994:	bl	0 <free>
    2998:	b	2510 <gomp_barrier_handle_tasks+0xf8>
    299c:	mov	w0, #0x2                   	// #2
    29a0:	add	x1, x28, #0x8
    29a4:	str	x3, [sp, #104]
    29a8:	bl	0 <priority_tree_remove>
    29ac:	ldr	x0, [x28, #8]
    29b0:	ldr	x3, [sp, #104]
    29b4:	cmp	x0, #0x0
    29b8:	cset	w7, eq  // eq = none
    29bc:	b	261c <gomp_barrier_handle_tasks+0x204>
    29c0:	stp	x27, x28, [sp, #80]
    29c4:	b	2488 <gomp_barrier_handle_tasks+0x70>
    29c8:	add	x0, x28, #0x18
    29cc:	stlr	xzr, [x0]
    29d0:	ldr	x0, [x28, #64]
    29d4:	cbz	x0, 25c0 <gomp_barrier_handle_tasks+0x1a8>
    29d8:	ldrb	w1, [x0]
    29dc:	cbz	w1, 25c0 <gomp_barrier_handle_tasks+0x1a8>
    29e0:	ldr	w1, [x0, #16]
    29e4:	strb	wzr, [x0], #16
    29e8:	add	w2, w1, #0x1
    29ec:	and	w2, w2, #0x7fffffff
    29f0:	ldxr	w4, [x0]
    29f4:	cmp	w4, w1
    29f8:	b.ne	2a04 <gomp_barrier_handle_tasks+0x5ec>  // b.any
    29fc:	stlxr	w5, w2, [x0]
    2a00:	cmp	w5, #0x0
    2a04:	mov	w1, w4
    2a08:	b.ne	29e8 <gomp_barrier_handle_tasks+0x5d0>  // b.any
    2a0c:	tbz	w4, #31, 25c0 <gomp_barrier_handle_tasks+0x1a8>
    2a10:	str	x3, [sp, #104]
    2a14:	bl	0 <gomp_sem_post_slow>
    2a18:	ldr	x3, [sp, #104]
    2a1c:	b	25c0 <gomp_barrier_handle_tasks+0x1a8>
    2a20:	mov	w7, #0x1                   	// #1
    2a24:	str	xzr, [x4, #8]
    2a28:	b	261c <gomp_barrier_handle_tasks+0x204>
    2a2c:	mov	x0, x20
    2a30:	bl	0 <gomp_mutex_unlock_slow>
    2a34:	b	2738 <gomp_barrier_handle_tasks+0x320>
    2a38:	mov	x1, x19
    2a3c:	mov	x0, x24
    2a40:	mov	x19, #0x0                   	// #0
    2a44:	mov	w27, #0x0                   	// #0
    2a48:	mov	x28, x19
    2a4c:	bl	15a8 <gomp_target_task_completion>
    2a50:	b	2688 <gomp_barrier_handle_tasks+0x270>
    2a54:	mov	x0, x20
    2a58:	bl	0 <gomp_mutex_lock_slow>
    2a5c:	b	246c <gomp_barrier_handle_tasks+0x54>
    2a60:	bl	0 <free>
    2a64:	b	26e4 <gomp_barrier_handle_tasks+0x2cc>
    2a68:	mov	x0, x20
    2a6c:	bl	0 <gomp_mutex_unlock_slow>
    2a70:	b	27d0 <gomp_barrier_handle_tasks+0x3b8>
    2a74:	mov	x0, x20
    2a78:	mov	w21, #0x0                   	// #0
    2a7c:	mov	w27, #0x0                   	// #0
    2a80:	bl	0 <gomp_mutex_lock_slow>
    2a84:	b	255c <gomp_barrier_handle_tasks+0x144>
    2a88:	mov	x0, x20
    2a8c:	bl	0 <gomp_mutex_lock_slow>
    2a90:	b	28d8 <gomp_barrier_handle_tasks+0x4c0>
    2a94:	nop

0000000000002a98 <GOMP_taskwait>:
    2a98:	stp	x29, x30, [sp, #-160]!
    2a9c:	mov	x29, sp
    2aa0:	stp	x21, x22, [sp, #32]
    2aa4:	adrp	x22, 0 <gomp_tls_data>
    2aa8:	ldr	x22, [x22]
    2aac:	stp	x23, x24, [sp, #48]
    2ab0:	mrs	x23, tpidr_el0
    2ab4:	add	x0, x23, x22
    2ab8:	stp	x27, x28, [sp, #80]
    2abc:	ldr	x28, [x0, #80]
    2ac0:	cbz	x28, 2ae8 <GOMP_taskwait+0x50>
    2ac4:	ldr	x1, [x28, #8]
    2ac8:	add	x24, x28, #0x8
    2acc:	ldr	x21, [x0, #16]
    2ad0:	cbnz	x1, 2f9c <GOMP_taskwait+0x504>
    2ad4:	add	x0, x28, #0x18
    2ad8:	ldar	x0, [x0]
    2adc:	cmp	x0, #0x0
    2ae0:	cset	w0, eq  // eq = none
    2ae4:	cbz	w0, 2afc <GOMP_taskwait+0x64>
    2ae8:	ldp	x21, x22, [sp, #32]
    2aec:	ldp	x23, x24, [sp, #48]
    2af0:	ldp	x27, x28, [sp, #80]
    2af4:	ldp	x29, x30, [sp], #160
    2af8:	ret
    2afc:	stp	x19, x20, [sp, #16]
    2b00:	add	x20, x21, #0x500
    2b04:	mov	w0, #0x1                   	// #1
    2b08:	stp	x25, x26, [sp, #64]
    2b0c:	strb	wzr, [sp, #135]
    2b10:	stp	xzr, xzr, [sp, #136]
    2b14:	str	xzr, [sp, #152]
    2b18:	ldaxr	w1, [x20]
    2b1c:	cbnz	w1, 2b28 <GOMP_taskwait+0x90>
    2b20:	stxr	w2, w0, [x20]
    2b24:	cbnz	w2, 2b18 <GOMP_taskwait+0x80>
    2b28:	cmp	w1, #0x0
    2b2c:	b.ne	3030 <GOMP_taskwait+0x598>  // b.any
    2b30:	add	x0, sp, #0x98
    2b34:	str	x0, [sp, #120]
    2b38:	ldr	x0, [x28, #8]
    2b3c:	mov	w26, #0x0                   	// #0
    2b40:	mov	x27, #0x0                   	// #0
    2b44:	cbnz	x0, 2cd8 <GOMP_taskwait+0x240>
    2b48:	ldr	x19, [x24, #16]
    2b4c:	cbz	x19, 2e70 <GOMP_taskwait+0x3d8>
    2b50:	sub	x19, x19, #0x70
    2b54:	mov	w0, #0x1                   	// #1
    2b58:	strb	w0, [sp, #135]
    2b5c:	ldr	w0, [x19, #200]
    2b60:	cmp	w0, #0x2
    2b64:	b.eq	2db8 <GOMP_taskwait+0x320>  // b.none
    2b68:	ldr	x0, [x28, #64]
    2b6c:	cbz	x0, 2da4 <GOMP_taskwait+0x30c>
    2b70:	mov	w0, #0x1                   	// #1
    2b74:	mov	x19, #0x0                   	// #0
    2b78:	strb	w0, [sp, #136]
    2b7c:	ldxr	w0, [x20]
    2b80:	stlxr	w1, wzr, [x20]
    2b84:	cbnz	w1, 2b7c <GOMP_taskwait+0xe4>
    2b88:	tbnz	w0, #31, 2eb4 <GOMP_taskwait+0x41c>
    2b8c:	cbnz	w26, 2d08 <GOMP_taskwait+0x270>
    2b90:	cbz	x27, 2ba4 <GOMP_taskwait+0x10c>
    2b94:	ldr	x0, [x27, #56]
    2b98:	cbnz	x0, 2f78 <GOMP_taskwait+0x4e0>
    2b9c:	mov	x0, x27
    2ba0:	bl	0 <free>
    2ba4:	cbz	x19, 2de8 <GOMP_taskwait+0x350>
    2ba8:	ldp	x1, x0, [x19, #184]
    2bac:	add	x27, x23, x22
    2bb0:	str	x19, [x27, #80]
    2bb4:	cbz	x1, 2ee4 <GOMP_taskwait+0x44c>
    2bb8:	blr	x1
    2bbc:	add	x0, x23, x22
    2bc0:	mov	w2, #0x1                   	// #1
    2bc4:	str	x28, [x0, #80]
    2bc8:	ldaxr	w1, [x20]
    2bcc:	cbnz	w1, 2bd8 <GOMP_taskwait+0x140>
    2bd0:	stxr	w0, w2, [x20]
    2bd4:	cbnz	w0, 2bc8 <GOMP_taskwait+0x130>
    2bd8:	cmp	w1, #0x0
    2bdc:	mov	w26, #0x0                   	// #0
    2be0:	b.ne	3024 <GOMP_taskwait+0x58c>  // b.any
    2be4:	ldr	x0, [x19, #72]
    2be8:	cbz	x0, 2d18 <GOMP_taskwait+0x280>
    2bec:	ldr	x0, [x19]
    2bf0:	cbz	x0, 2bfc <GOMP_taskwait+0x164>
    2bf4:	mov	x0, x19
    2bf8:	bl	330 <gomp_task_run_post_handle_depend_hash>
    2bfc:	ldr	x0, [x19, #48]
    2c00:	cbz	x0, 2d18 <GOMP_taskwait+0x280>
    2c04:	mov	x1, x21
    2c08:	mov	x0, x19
    2c0c:	bl	8a0 <gomp_task_run_post_handle_dependers>
    2c10:	mov	x25, x0
    2c14:	ldrb	w0, [sp, #135]
    2c18:	cbnz	w0, 2d24 <GOMP_taskwait+0x28c>
    2c1c:	ldr	x4, [x19, #8]
    2c20:	cbnz	x4, 2d54 <GOMP_taskwait+0x2bc>
    2c24:	ldr	x2, [x19, #24]
    2c28:	mov	x1, x2
    2c2c:	cbz	x2, 2c40 <GOMP_taskwait+0x1a8>
    2c30:	stur	xzr, [x1, #-112]
    2c34:	ldr	x1, [x1]
    2c38:	cmp	x2, x1
    2c3c:	b.ne	2c30 <GOMP_taskwait+0x198>  // b.any
    2c40:	ldr	x27, [x19, #40]
    2c44:	cbz	x27, 2c98 <GOMP_taskwait+0x200>
    2c48:	ldr	x0, [x27, #8]
    2c4c:	add	x2, x19, #0x80
    2c50:	cbnz	x0, 2f80 <GOMP_taskwait+0x4e8>
    2c54:	ldp	x0, x1, [x19, #128]
    2c58:	add	x4, x27, #0x10
    2c5c:	ldr	x7, [x4, #8]
    2c60:	mov	w6, #0x0                   	// #0
    2c64:	cmp	x2, x7
    2c68:	str	x0, [x1]
    2c6c:	str	x1, [x0, #8]
    2c70:	b.eq	2e48 <GOMP_taskwait+0x3b0>  // b.none
    2c74:	ldr	x0, [x27, #56]
    2c78:	stp	xzr, xzr, [x19, #128]
    2c7c:	cmp	x0, #0x1
    2c80:	b.ls	2e64 <GOMP_taskwait+0x3cc>  // b.plast
    2c84:	sub	x0, x0, #0x1
    2c88:	str	x0, [x27, #56]
    2c8c:	cbz	w6, 2c98 <GOMP_taskwait+0x200>
    2c90:	ldrb	w0, [x27, #48]
    2c94:	cbnz	w0, 2f3c <GOMP_taskwait+0x4a4>
    2c98:	ldr	w0, [x21, #1320]
    2c9c:	cmp	x25, #0x1
    2ca0:	sub	w0, w0, #0x1
    2ca4:	str	w0, [x21, #1320]
    2ca8:	b.ls	2ccc <GOMP_taskwait+0x234>  // b.plast
    2cac:	ldrb	w0, [x28, #204]
    2cb0:	ldr	w5, [x21]
    2cb4:	ldr	w1, [x21, #1328]
    2cb8:	eor	w0, w0, #0x1
    2cbc:	sub	w5, w5, w1
    2cc0:	sub	w26, w5, w0
    2cc4:	cmp	x25, w26, sxtw
    2cc8:	csel	w26, w25, w26, cc  // cc = lo, ul, last
    2ccc:	mov	x27, x19
    2cd0:	ldr	x0, [x28, #8]
    2cd4:	cbz	x0, 2b48 <GOMP_taskwait+0xb0>
    2cd8:	add	x4, sp, #0x87
    2cdc:	add	x3, x21, #0x508
    2ce0:	mov	x1, x24
    2ce4:	mov	w2, #0x0                   	// #0
    2ce8:	mov	w0, #0x1                   	// #1
    2cec:	bl	0 <priority_tree_next_task>
    2cf0:	mov	x19, x0
    2cf4:	cbnz	x0, 2b5c <GOMP_taskwait+0xc4>
    2cf8:	ldr	x0, [x24]
    2cfc:	ldr	x19, [x0, #8]
    2d00:	sub	x19, x19, #0x70
    2d04:	b	2b5c <GOMP_taskwait+0xc4>
    2d08:	mov	w1, w26
    2d0c:	add	x0, x21, #0x80
    2d10:	bl	0 <gomp_team_barrier_wake>
    2d14:	b	2b90 <GOMP_taskwait+0xf8>
    2d18:	ldrb	w0, [sp, #135]
    2d1c:	mov	x25, #0x0                   	// #0
    2d20:	cbz	w0, 2c1c <GOMP_taskwait+0x184>
    2d24:	ldr	x0, [x28, #8]
    2d28:	add	x2, x19, #0x70
    2d2c:	cbnz	x0, 2fcc <GOMP_taskwait+0x534>
    2d30:	ldp	x0, x1, [x19, #112]
    2d34:	ldr	x6, [x28, #24]
    2d38:	cmp	x6, x2
    2d3c:	str	x0, [x1]
    2d40:	str	x1, [x0, #8]
    2d44:	b.eq	2ec4 <GOMP_taskwait+0x42c>  // b.none
    2d48:	stp	xzr, xzr, [x19, #112]
    2d4c:	ldr	x4, [x19, #8]
    2d50:	cbz	x4, 2c24 <GOMP_taskwait+0x18c>
    2d54:	add	x27, x19, #0x8
    2d58:	ldr	x6, [x4, #8]
    2d5c:	mov	x0, x4
    2d60:	ldp	x1, x4, [x4, #24]
    2d64:	mov	x2, x6
    2d68:	cbz	x6, 2d80 <GOMP_taskwait+0x2e8>
    2d6c:	nop
    2d70:	stur	xzr, [x2, #-112]
    2d74:	ldr	x2, [x2]
    2d78:	cmp	x6, x2
    2d7c:	b.ne	2d70 <GOMP_taskwait+0x2d8>  // b.any
    2d80:	stp	x4, x1, [sp, #104]
    2d84:	bl	0 <free>
    2d88:	mov	x0, x27
    2d8c:	ldr	x1, [sp, #112]
    2d90:	bl	e0 <gomp_clear_parent_in_tree>
    2d94:	ldr	x4, [sp, #104]
    2d98:	cbnz	x4, 2d58 <GOMP_taskwait+0x2c0>
    2d9c:	str	xzr, [x27]
    2da0:	b	2c40 <GOMP_taskwait+0x1a8>
    2da4:	add	x0, sp, #0x88
    2da8:	str	x0, [x28, #64]
    2dac:	strb	wzr, [sp, #137]
    2db0:	str	wzr, [sp, #152]
    2db4:	b	2b70 <GOMP_taskwait+0xd8>
    2db8:	mov	x2, x21
    2dbc:	mov	x1, x28
    2dc0:	mov	x0, x19
    2dc4:	bl	508 <gomp_task_run_pre>
    2dc8:	tst	w0, #0xff
    2dcc:	b.eq	2b7c <GOMP_taskwait+0xe4>  // b.none
    2dd0:	cbz	x27, 2be4 <GOMP_taskwait+0x14c>
    2dd4:	ldr	x0, [x27, #56]
    2dd8:	cbnz	x0, 3010 <GOMP_taskwait+0x578>
    2ddc:	mov	x0, x27
    2de0:	bl	0 <free>
    2de4:	b	2be4 <GOMP_taskwait+0x14c>
    2de8:	ldr	w1, [sp, #152]
    2dec:	tst	x1, #0x7fffffff
    2df0:	b.eq	2fe0 <GOMP_taskwait+0x548>  // b.none
    2df4:	sub	w2, w1, #0x1
    2df8:	add	x3, sp, #0x98
    2dfc:	ldaxr	w0, [x3]
    2e00:	cmp	w0, w1
    2e04:	b.ne	2e10 <GOMP_taskwait+0x378>  // b.any
    2e08:	stxr	w4, w2, [x3]
    2e0c:	cmp	w4, #0x0
    2e10:	mov	w1, w0
    2e14:	b.ne	2dec <GOMP_taskwait+0x354>  // b.any
    2e18:	mov	w0, #0x1                   	// #1
    2e1c:	ldaxr	w1, [x20]
    2e20:	cbnz	w1, 2e2c <GOMP_taskwait+0x394>
    2e24:	stxr	w2, w0, [x20]
    2e28:	cbnz	w2, 2e1c <GOMP_taskwait+0x384>
    2e2c:	cmp	w1, #0x0
    2e30:	mov	w26, #0x0                   	// #0
    2e34:	b.eq	2ccc <GOMP_taskwait+0x234>  // b.none
    2e38:	mov	x0, x20
    2e3c:	mov	x27, x19
    2e40:	bl	0 <gomp_mutex_lock_slow>
    2e44:	b	2cd0 <GOMP_taskwait+0x238>
    2e48:	cmp	x2, x0
    2e4c:	b.eq	2fc0 <GOMP_taskwait+0x528>  // b.none
    2e50:	str	x0, [x4, #8]
    2e54:	ldr	x0, [x27, #56]
    2e58:	stp	xzr, xzr, [x19, #128]
    2e5c:	cmp	x0, #0x1
    2e60:	b.hi	2c84 <GOMP_taskwait+0x1ec>  // b.pmore
    2e64:	add	x0, x27, #0x38
    2e68:	stlr	xzr, [x0]
    2e6c:	b	2c8c <GOMP_taskwait+0x1f4>
    2e70:	str	xzr, [x28, #64]
    2e74:	ldxr	w0, [x20]
    2e78:	stlxr	w1, wzr, [x20]
    2e7c:	cbnz	w1, 2e74 <GOMP_taskwait+0x3dc>
    2e80:	tbnz	w0, #31, 2fb0 <GOMP_taskwait+0x518>
    2e84:	cbz	x27, 2ed8 <GOMP_taskwait+0x440>
    2e88:	ldr	x0, [x27, #56]
    2e8c:	cbnz	x0, 2fec <GOMP_taskwait+0x554>
    2e90:	mov	x0, x27
    2e94:	bl	0 <free>
    2e98:	ldp	x19, x20, [sp, #16]
    2e9c:	ldp	x21, x22, [sp, #32]
    2ea0:	ldp	x23, x24, [sp, #48]
    2ea4:	ldp	x25, x26, [sp, #64]
    2ea8:	ldp	x27, x28, [sp, #80]
    2eac:	ldp	x29, x30, [sp], #160
    2eb0:	ret
    2eb4:	mov	x0, x20
    2eb8:	bl	0 <gomp_mutex_unlock_slow>
    2ebc:	cbz	w26, 2b90 <GOMP_taskwait+0xf8>
    2ec0:	b	2d08 <GOMP_taskwait+0x270>
    2ec4:	cmp	x0, x6
    2ec8:	csel	x0, x0, xzr, ne  // ne = any
    2ecc:	str	x0, [x28, #24]
    2ed0:	stp	xzr, xzr, [x19, #112]
    2ed4:	b	2d4c <GOMP_taskwait+0x2b4>
    2ed8:	ldp	x19, x20, [sp, #16]
    2edc:	ldp	x25, x26, [sp, #64]
    2ee0:	b	2ae8 <GOMP_taskwait+0x50>
    2ee4:	bl	0 <gomp_target_task_fn>
    2ee8:	tst	w0, #0xff
    2eec:	b.eq	2bbc <GOMP_taskwait+0x124>  // b.none
    2ef0:	mov	w0, #0x1                   	// #1
    2ef4:	str	x28, [x27, #80]
    2ef8:	ldaxr	w1, [x20]
    2efc:	cbnz	w1, 2f08 <GOMP_taskwait+0x470>
    2f00:	stxr	w2, w0, [x20]
    2f04:	cbnz	w2, 2ef8 <GOMP_taskwait+0x460>
    2f08:	cmp	w1, #0x0
    2f0c:	b.ne	3018 <GOMP_taskwait+0x580>  // b.any
    2f10:	ldr	x0, [x19, #192]
    2f14:	mov	w1, #0x4                   	// #4
    2f18:	ldr	w2, [x0, #44]
    2f1c:	str	w1, [x19, #200]
    2f20:	cmp	w2, #0x5
    2f24:	b.eq	2ff4 <GOMP_taskwait+0x55c>  // b.none
    2f28:	mov	x19, #0x0                   	// #0
    2f2c:	mov	w26, #0x0                   	// #0
    2f30:	mov	x27, x19
    2f34:	str	w1, [x0, #44]
    2f38:	b	2cd0 <GOMP_taskwait+0x238>
    2f3c:	ldr	w1, [x27, #52]
    2f40:	add	x0, x27, #0x34
    2f44:	strb	wzr, [x27, #48]
    2f48:	add	w2, w1, #0x1
    2f4c:	and	w2, w2, #0x7fffffff
    2f50:	ldxr	w4, [x0]
    2f54:	cmp	w4, w1
    2f58:	b.ne	2f64 <GOMP_taskwait+0x4cc>  // b.any
    2f5c:	stlxr	w3, w2, [x0]
    2f60:	cmp	w3, #0x0
    2f64:	mov	w1, w4
    2f68:	b.ne	2f48 <GOMP_taskwait+0x4b0>  // b.any
    2f6c:	tbz	w4, #31, 2c98 <GOMP_taskwait+0x200>
    2f70:	bl	0 <gomp_sem_post_slow>
    2f74:	b	2c98 <GOMP_taskwait+0x200>
    2f78:	bl	0 <free>
    2f7c:	b	2b9c <GOMP_taskwait+0x104>
    2f80:	mov	w0, #0x2                   	// #2
    2f84:	add	x1, x27, #0x8
    2f88:	bl	0 <priority_tree_remove>
    2f8c:	ldr	x0, [x27, #8]
    2f90:	cmp	x0, #0x0
    2f94:	cset	w6, eq  // eq = none
    2f98:	b	2c74 <GOMP_taskwait+0x1dc>
    2f9c:	ldar	x0, [x24]
    2fa0:	cmp	x0, #0x0
    2fa4:	cset	w0, eq  // eq = none
    2fa8:	cbnz	w0, 2ae8 <GOMP_taskwait+0x50>
    2fac:	b	2afc <GOMP_taskwait+0x64>
    2fb0:	mov	x0, x20
    2fb4:	bl	0 <gomp_mutex_unlock_slow>
    2fb8:	cbnz	x27, 2e88 <GOMP_taskwait+0x3f0>
    2fbc:	b	2ed8 <GOMP_taskwait+0x440>
    2fc0:	mov	w6, #0x1                   	// #1
    2fc4:	str	xzr, [x4, #8]
    2fc8:	b	2c74 <GOMP_taskwait+0x1dc>
    2fcc:	mov	x1, x24
    2fd0:	mov	w0, #0x1                   	// #1
    2fd4:	bl	0 <priority_tree_remove>
    2fd8:	stp	xzr, xzr, [x19, #112]
    2fdc:	b	2d4c <GOMP_taskwait+0x2b4>
    2fe0:	ldr	x0, [sp, #120]
    2fe4:	bl	0 <gomp_sem_wait_slow>
    2fe8:	b	2e18 <GOMP_taskwait+0x380>
    2fec:	bl	0 <free>
    2ff0:	b	2e90 <GOMP_taskwait+0x3f8>
    2ff4:	mov	x1, x19
    2ff8:	mov	x0, x21
    2ffc:	mov	x19, #0x0                   	// #0
    3000:	mov	w26, #0x0                   	// #0
    3004:	mov	x27, x19
    3008:	bl	15a8 <gomp_target_task_completion>
    300c:	b	2cd0 <GOMP_taskwait+0x238>
    3010:	bl	0 <free>
    3014:	b	2ddc <GOMP_taskwait+0x344>
    3018:	mov	x0, x20
    301c:	bl	0 <gomp_mutex_lock_slow>
    3020:	b	2f10 <GOMP_taskwait+0x478>
    3024:	mov	x0, x20
    3028:	bl	0 <gomp_mutex_lock_slow>
    302c:	b	2be4 <GOMP_taskwait+0x14c>
    3030:	mov	x0, x20
    3034:	bl	0 <gomp_mutex_lock_slow>
    3038:	b	2b30 <GOMP_taskwait+0x98>
    303c:	nop

0000000000003040 <gomp_task_maybe_wait_for_dependencies>:
    3040:	stp	x29, x30, [sp, #-240]!
    3044:	adrp	x1, 0 <gomp_tls_data>
    3048:	ldr	x1, [x1]
    304c:	mov	x29, sp
    3050:	stp	x19, x20, [sp, #16]
    3054:	mov	x19, x0
    3058:	mrs	x0, tpidr_el0
    305c:	stp	x21, x22, [sp, #32]
    3060:	stp	x23, x24, [sp, #48]
    3064:	ldp	x21, x24, [x19]
    3068:	stp	x1, x0, [sp, #120]
    306c:	add	x0, x0, x1
    3070:	stp	x25, x26, [sp, #64]
    3074:	stp	x27, x28, [sp, #80]
    3078:	ldr	x26, [x0, #16]
    307c:	ldr	x27, [x0, #80]
    3080:	cbz	x21, 36a8 <gomp_task_maybe_wait_for_dependencies+0x668>
    3084:	add	x0, x26, #0x500
    3088:	mov	x2, x0
    308c:	mov	w0, #0x1                   	// #1
    3090:	str	x2, [sp, #112]
    3094:	ldaxr	w1, [x2]
    3098:	cbnz	w1, 30a4 <gomp_task_maybe_wait_for_dependencies+0x64>
    309c:	stxr	w3, w0, [x2]
    30a0:	cbnz	w3, 3094 <gomp_task_maybe_wait_for_dependencies+0x54>
    30a4:	cmp	w1, #0x0
    30a8:	b.ne	37b8 <gomp_task_maybe_wait_for_dependencies+0x778>  // b.any
    30ac:	mov	x25, x21
    30b0:	mov	x23, #0x2                   	// #2
    30b4:	add	x0, x19, x23, lsl #3
    30b8:	mov	x28, #0x0                   	// #0
    30bc:	mov	x23, #0x0                   	// #0
    30c0:	mov	w22, #0x1                   	// #1
    30c4:	str	x0, [sp, #104]
    30c8:	ldr	x0, [sp, #104]
    30cc:	cmp	x23, x24
    30d0:	cset	w1, cs  // cs = hs, nlast
    30d4:	strb	w1, [sp, #232]
    30d8:	cmp	x21, x23
    30dc:	ldr	x0, [x0, x23, lsl #3]
    30e0:	str	x0, [sp, #200]
    30e4:	b.ls	33d8 <gomp_task_maybe_wait_for_dependencies+0x398>  // b.plast
    30e8:	ldr	x0, [x27, #56]
    30ec:	add	x1, sp, #0xc8
    30f0:	bl	0 <htab_find>
    30f4:	mov	x19, x0
    30f8:	cbz	x0, 3148 <gomp_task_maybe_wait_for_dependencies+0x108>
    30fc:	ldrb	w2, [sp, #232]
    3100:	add	x8, x27, #0x8
    3104:	nop
    3108:	cbz	w2, 3114 <gomp_task_maybe_wait_for_dependencies+0xd4>
    310c:	ldrb	w0, [x19, #32]
    3110:	cbnz	w0, 3140 <gomp_task_maybe_wait_for_dependencies+0x100>
    3114:	ldr	x20, [x19, #24]
    3118:	ldrb	w0, [x20, #207]
    311c:	cbnz	w0, 3140 <gomp_task_maybe_wait_for_dependencies+0x100>
    3120:	ldr	x0, [x20, #80]
    3124:	strb	w22, [x20, #207]
    3128:	add	x28, x28, #0x1
    312c:	cbnz	x0, 3140 <gomp_task_maybe_wait_for_dependencies+0x100>
    3130:	ldr	w0, [x20, #200]
    3134:	cmp	w0, #0x2
    3138:	b.eq	3398 <gomp_task_maybe_wait_for_dependencies+0x358>  // b.none
    313c:	nop
    3140:	ldr	x19, [x19, #8]
    3144:	cbnz	x19, 3108 <gomp_task_maybe_wait_for_dependencies+0xc8>
    3148:	add	x23, x23, #0x1
    314c:	cmp	x23, x25
    3150:	b.cc	30c8 <gomp_task_maybe_wait_for_dependencies+0x88>  // b.lo, b.ul, b.last
    3154:	cbz	x28, 35c4 <gomp_task_maybe_wait_for_dependencies+0x584>
    3158:	stp	xzr, xzr, [sp, #176]
    315c:	add	x20, x27, #0x8
    3160:	add	x0, sp, #0xb0
    3164:	stp	x28, xzr, [sp, #184]
    3168:	mov	w25, #0x0                   	// #0
    316c:	mov	x24, #0x0                   	// #0
    3170:	mov	w23, #0x1                   	// #1
    3174:	str	x0, [x27, #64]
    3178:	ldr	x0, [x27, #8]
    317c:	cbnz	x0, 35e4 <gomp_task_maybe_wait_for_dependencies+0x5a4>
    3180:	ldr	x19, [x20, #16]
    3184:	strb	w23, [sp, #175]
    3188:	sub	x19, x19, #0x70
    318c:	ldr	w0, [x19, #200]
    3190:	cmp	w0, #0x2
    3194:	b.eq	3440 <gomp_task_maybe_wait_for_dependencies+0x400>  // b.none
    3198:	mov	x19, #0x0                   	// #0
    319c:	strb	w23, [sp, #177]
    31a0:	ldr	x1, [sp, #112]
    31a4:	ldxr	w0, [x1]
    31a8:	stlxr	w2, wzr, [x1]
    31ac:	cbnz	w2, 31a4 <gomp_task_maybe_wait_for_dependencies+0x164>
    31b0:	tbnz	w0, #31, 35b4 <gomp_task_maybe_wait_for_dependencies+0x574>
    31b4:	cbnz	w25, 3388 <gomp_task_maybe_wait_for_dependencies+0x348>
    31b8:	cbz	x24, 31cc <gomp_task_maybe_wait_for_dependencies+0x18c>
    31bc:	ldr	x0, [x24, #56]
    31c0:	cbnz	x0, 3700 <gomp_task_maybe_wait_for_dependencies+0x6c0>
    31c4:	mov	x0, x24
    31c8:	bl	0 <free>
    31cc:	cbz	x19, 34cc <gomp_task_maybe_wait_for_dependencies+0x48c>
    31d0:	ldp	x1, x0, [sp, #120]
    31d4:	add	x24, x0, x1
    31d8:	ldp	x1, x0, [x19, #184]
    31dc:	str	x19, [x24, #80]
    31e0:	cbz	x1, 3614 <gomp_task_maybe_wait_for_dependencies+0x5d4>
    31e4:	blr	x1
    31e8:	ldp	x1, x0, [sp, #120]
    31ec:	mov	w2, #0x1                   	// #1
    31f0:	add	x0, x0, x1
    31f4:	str	x27, [x0, #80]
    31f8:	ldr	x0, [sp, #112]
    31fc:	ldaxr	w1, [x0]
    3200:	cbnz	w1, 320c <gomp_task_maybe_wait_for_dependencies+0x1cc>
    3204:	stxr	w3, w2, [x0]
    3208:	cbnz	w3, 31fc <gomp_task_maybe_wait_for_dependencies+0x1bc>
    320c:	cmp	w1, #0x0
    3210:	mov	w25, #0x0                   	// #0
    3214:	b.ne	37cc <gomp_task_maybe_wait_for_dependencies+0x78c>  // b.any
    3218:	ldr	x0, [x19, #72]
    321c:	cbz	x0, 3438 <gomp_task_maybe_wait_for_dependencies+0x3f8>
    3220:	ldr	x0, [x19]
    3224:	cbz	x0, 3230 <gomp_task_maybe_wait_for_dependencies+0x1f0>
    3228:	mov	x0, x19
    322c:	bl	330 <gomp_task_run_post_handle_depend_hash>
    3230:	ldr	x0, [x19, #48]
    3234:	cbz	x0, 3438 <gomp_task_maybe_wait_for_dependencies+0x3f8>
    3238:	mov	x1, x26
    323c:	mov	x0, x19
    3240:	bl	8a0 <gomp_task_run_post_handle_dependers>
    3244:	mov	x22, x0
    3248:	ldrb	w0, [x19, #207]
    324c:	cbz	w0, 325c <gomp_task_maybe_wait_for_dependencies+0x21c>
    3250:	ldr	x0, [sp, #184]
    3254:	sub	x0, x0, #0x1
    3258:	str	x0, [sp, #184]
    325c:	ldr	x0, [x27, #8]
    3260:	add	x2, x19, #0x70
    3264:	cbnz	x0, 36f0 <gomp_task_maybe_wait_for_dependencies+0x6b0>
    3268:	ldp	x0, x1, [x19, #112]
    326c:	ldr	x6, [x27, #24]
    3270:	cmp	x6, x2
    3274:	str	x0, [x1]
    3278:	str	x1, [x0, #8]
    327c:	b.eq	3470 <gomp_task_maybe_wait_for_dependencies+0x430>  // b.none
    3280:	ldr	x28, [x19, #8]
    3284:	stp	xzr, xzr, [x19, #112]
    3288:	cbnz	x28, 3488 <gomp_task_maybe_wait_for_dependencies+0x448>
    328c:	ldr	x2, [x19, #24]
    3290:	mov	x1, x2
    3294:	cbz	x2, 32a8 <gomp_task_maybe_wait_for_dependencies+0x268>
    3298:	stur	xzr, [x1, #-112]
    329c:	ldr	x1, [x1]
    32a0:	cmp	x2, x1
    32a4:	b.ne	3298 <gomp_task_maybe_wait_for_dependencies+0x258>  // b.any
    32a8:	ldr	x24, [x19, #40]
    32ac:	cbz	x24, 3300 <gomp_task_maybe_wait_for_dependencies+0x2c0>
    32b0:	ldr	x0, [x24, #8]
    32b4:	add	x2, x19, #0x80
    32b8:	cbnz	x0, 374c <gomp_task_maybe_wait_for_dependencies+0x70c>
    32bc:	ldp	x0, x1, [x19, #128]
    32c0:	add	x6, x24, #0x10
    32c4:	ldr	x7, [x6, #8]
    32c8:	mov	w4, #0x0                   	// #0
    32cc:	cmp	x2, x7
    32d0:	str	x0, [x1]
    32d4:	str	x1, [x0, #8]
    32d8:	b.eq	358c <gomp_task_maybe_wait_for_dependencies+0x54c>  // b.none
    32dc:	ldr	x0, [x24, #56]
    32e0:	stp	xzr, xzr, [x19, #128]
    32e4:	cmp	x0, #0x1
    32e8:	b.ls	35a8 <gomp_task_maybe_wait_for_dependencies+0x568>  // b.plast
    32ec:	sub	x0, x0, #0x1
    32f0:	str	x0, [x24, #56]
    32f4:	cbz	w4, 3300 <gomp_task_maybe_wait_for_dependencies+0x2c0>
    32f8:	ldrb	w0, [x24, #48]
    32fc:	cbnz	w0, 366c <gomp_task_maybe_wait_for_dependencies+0x62c>
    3300:	ldr	w0, [x26, #1320]
    3304:	cmp	x22, #0x1
    3308:	sub	w0, w0, #0x1
    330c:	str	w0, [x26, #1320]
    3310:	b.ls	3334 <gomp_task_maybe_wait_for_dependencies+0x2f4>  // b.plast
    3314:	ldrb	w0, [x27, #204]
    3318:	ldr	w25, [x26]
    331c:	ldr	w1, [x26, #1328]
    3320:	eor	w0, w0, #0x1
    3324:	sub	w25, w25, w1
    3328:	sub	w25, w25, w0
    332c:	cmp	x22, w25, sxtw
    3330:	csel	w25, w22, w25, cc  // cc = lo, ul, last
    3334:	mov	x24, x19
    3338:	ldr	x0, [sp, #184]
    333c:	cbnz	x0, 3178 <gomp_task_maybe_wait_for_dependencies+0x138>
    3340:	ldr	x1, [sp, #112]
    3344:	str	xzr, [x27, #64]
    3348:	ldxr	w0, [x1]
    334c:	stlxr	w2, wzr, [x1]
    3350:	cbnz	w2, 3348 <gomp_task_maybe_wait_for_dependencies+0x308>
    3354:	tbnz	w0, #31, 3768 <gomp_task_maybe_wait_for_dependencies+0x728>
    3358:	cbz	x24, 336c <gomp_task_maybe_wait_for_dependencies+0x32c>
    335c:	ldr	x0, [x24, #56]
    3360:	cbnz	x0, 3774 <gomp_task_maybe_wait_for_dependencies+0x734>
    3364:	mov	x0, x24
    3368:	bl	0 <free>
    336c:	ldp	x19, x20, [sp, #16]
    3370:	ldp	x21, x22, [sp, #32]
    3374:	ldp	x23, x24, [sp, #48]
    3378:	ldp	x25, x26, [sp, #64]
    337c:	ldp	x27, x28, [sp, #80]
    3380:	ldp	x29, x30, [sp], #240
    3384:	ret
    3388:	mov	w1, w25
    338c:	add	x0, x26, #0x80
    3390:	bl	0 <gomp_team_barrier_wake>
    3394:	b	31b8 <gomp_task_maybe_wait_for_dependencies+0x178>
    3398:	ldr	x0, [x27, #8]
    339c:	add	x7, x20, #0x70
    33a0:	cbnz	x0, 352c <gomp_task_maybe_wait_for_dependencies+0x4ec>
    33a4:	ldr	x0, [x27, #32]
    33a8:	cbz	x0, 3400 <gomp_task_maybe_wait_for_dependencies+0x3c0>
    33ac:	ldp	x9, x1, [x20, #112]
    33b0:	str	x9, [x1]
    33b4:	ldr	x10, [x20, #112]
    33b8:	ldr	x9, [x0]
    33bc:	str	x1, [x10, #8]
    33c0:	stp	x9, x0, [x20, #112]
    33c4:	str	x7, [x0]
    33c8:	ldr	x0, [x20, #112]
    33cc:	str	x7, [x0, #8]
    33d0:	str	x7, [x27, #32]
    33d4:	b	3140 <gomp_task_maybe_wait_for_dependencies+0x100>
    33d8:	ldr	x1, [x0, #8]
    33dc:	cmp	x1, #0x1
    33e0:	b.eq	33f4 <gomp_task_maybe_wait_for_dependencies+0x3b4>  // b.none
    33e4:	sub	x2, x1, #0x2
    33e8:	cmp	x2, #0x2
    33ec:	b.hi	37ac <gomp_task_maybe_wait_for_dependencies+0x76c>  // b.pmore
    33f0:	strb	wzr, [sp, #232]
    33f4:	ldr	x0, [x0]
    33f8:	str	x0, [sp, #200]
    33fc:	b	30e8 <gomp_task_maybe_wait_for_dependencies+0xa8>
    3400:	ldr	x0, [x27, #24]
    3404:	cmp	x7, x0
    3408:	b.eq	33d0 <gomp_task_maybe_wait_for_dependencies+0x390>  // b.none
    340c:	ldp	x1, x9, [x20, #112]
    3410:	str	x1, [x9]
    3414:	str	x9, [x1, #8]
    3418:	ldr	x1, [x0, #8]
    341c:	stp	x0, x1, [x20, #112]
    3420:	str	x7, [x27, #24]
    3424:	str	x7, [x1]
    3428:	ldr	x0, [x20, #112]
    342c:	str	x7, [x0, #8]
    3430:	str	x7, [x27, #32]
    3434:	b	3140 <gomp_task_maybe_wait_for_dependencies+0x100>
    3438:	mov	x22, #0x0                   	// #0
    343c:	b	3248 <gomp_task_maybe_wait_for_dependencies+0x208>
    3440:	mov	x2, x26
    3444:	mov	x1, x27
    3448:	mov	x0, x19
    344c:	bl	508 <gomp_task_run_pre>
    3450:	tst	w0, #0xff
    3454:	b.eq	31a0 <gomp_task_maybe_wait_for_dependencies+0x160>  // b.none
    3458:	cbz	x24, 3218 <gomp_task_maybe_wait_for_dependencies+0x1d8>
    345c:	ldr	x0, [x24, #56]
    3460:	cbnz	x0, 3798 <gomp_task_maybe_wait_for_dependencies+0x758>
    3464:	mov	x0, x24
    3468:	bl	0 <free>
    346c:	b	3218 <gomp_task_maybe_wait_for_dependencies+0x1d8>
    3470:	cmp	x0, x6
    3474:	ldr	x28, [x19, #8]
    3478:	csel	x0, x0, xzr, ne  // ne = any
    347c:	str	x0, [x27, #24]
    3480:	stp	xzr, xzr, [x19, #112]
    3484:	cbz	x28, 328c <gomp_task_maybe_wait_for_dependencies+0x24c>
    3488:	add	x24, x19, #0x8
    348c:	ldr	x6, [x28, #8]
    3490:	mov	x0, x28
    3494:	ldp	x21, x28, [x28, #24]
    3498:	mov	x2, x6
    349c:	cbz	x6, 34b0 <gomp_task_maybe_wait_for_dependencies+0x470>
    34a0:	stur	xzr, [x2, #-112]
    34a4:	ldr	x2, [x2]
    34a8:	cmp	x6, x2
    34ac:	b.ne	34a0 <gomp_task_maybe_wait_for_dependencies+0x460>  // b.any
    34b0:	bl	0 <free>
    34b4:	mov	x1, x21
    34b8:	mov	x0, x24
    34bc:	bl	e0 <gomp_clear_parent_in_tree>
    34c0:	cbnz	x28, 348c <gomp_task_maybe_wait_for_dependencies+0x44c>
    34c4:	str	xzr, [x24]
    34c8:	b	32a8 <gomp_task_maybe_wait_for_dependencies+0x268>
    34cc:	ldr	w1, [sp, #192]
    34d0:	tst	x1, #0x7fffffff
    34d4:	b.eq	377c <gomp_task_maybe_wait_for_dependencies+0x73c>  // b.none
    34d8:	sub	w2, w1, #0x1
    34dc:	add	x3, sp, #0xc0
    34e0:	ldaxr	w0, [x3]
    34e4:	cmp	w0, w1
    34e8:	b.ne	34f4 <gomp_task_maybe_wait_for_dependencies+0x4b4>  // b.any
    34ec:	stxr	w4, w2, [x3]
    34f0:	cmp	w4, #0x0
    34f4:	mov	w1, w0
    34f8:	b.ne	34d0 <gomp_task_maybe_wait_for_dependencies+0x490>  // b.any
    34fc:	ldr	x2, [sp, #112]
    3500:	mov	w0, #0x1                   	// #1
    3504:	ldaxr	w1, [x2]
    3508:	cbnz	w1, 3514 <gomp_task_maybe_wait_for_dependencies+0x4d4>
    350c:	stxr	w3, w0, [x2]
    3510:	cbnz	w3, 3504 <gomp_task_maybe_wait_for_dependencies+0x4c4>
    3514:	cmp	w1, #0x0
    3518:	mov	w25, #0x0                   	// #0
    351c:	b.eq	3334 <gomp_task_maybe_wait_for_dependencies+0x2f4>  // b.none
    3520:	ldr	x0, [sp, #112]
    3524:	bl	0 <gomp_mutex_lock_slow>
    3528:	b	3334 <gomp_task_maybe_wait_for_dependencies+0x2f4>
    352c:	ldr	w0, [x20, #88]
    3530:	add	x1, sp, #0xb0
    3534:	str	x8, [sp, #136]
    3538:	str	w2, [sp, #148]
    353c:	str	x7, [sp, #152]
    3540:	str	w0, [sp, #176]
    3544:	mov	x0, x8
    3548:	bl	0 <prio_splay_tree_lookup>
    354c:	ldr	x1, [x0, #16]
    3550:	ldr	w2, [sp, #148]
    3554:	ldr	x8, [sp, #136]
    3558:	ldr	x7, [sp, #152]
    355c:	cbz	x1, 3708 <gomp_task_maybe_wait_for_dependencies+0x6c8>
    3560:	ldp	x10, x9, [x20, #112]
    3564:	str	x10, [x9]
    3568:	ldr	x11, [x20, #112]
    356c:	ldr	x10, [x1]
    3570:	str	x9, [x11, #8]
    3574:	stp	x10, x1, [x20, #112]
    3578:	str	x7, [x1]
    357c:	ldr	x1, [x20, #112]
    3580:	str	x7, [x1, #8]
    3584:	str	x7, [x0, #16]
    3588:	b	3140 <gomp_task_maybe_wait_for_dependencies+0x100>
    358c:	cmp	x2, x0
    3590:	b.eq	3740 <gomp_task_maybe_wait_for_dependencies+0x700>  // b.none
    3594:	str	x0, [x6, #8]
    3598:	ldr	x0, [x24, #56]
    359c:	stp	xzr, xzr, [x19, #128]
    35a0:	cmp	x0, #0x1
    35a4:	b.hi	32ec <gomp_task_maybe_wait_for_dependencies+0x2ac>  // b.pmore
    35a8:	add	x0, x24, #0x38
    35ac:	stlr	xzr, [x0]
    35b0:	b	32f4 <gomp_task_maybe_wait_for_dependencies+0x2b4>
    35b4:	ldr	x0, [sp, #112]
    35b8:	bl	0 <gomp_mutex_unlock_slow>
    35bc:	cbz	w25, 31b8 <gomp_task_maybe_wait_for_dependencies+0x178>
    35c0:	b	3388 <gomp_task_maybe_wait_for_dependencies+0x348>
    35c4:	ldr	x1, [sp, #112]
    35c8:	ldxr	w0, [x1]
    35cc:	stlxr	w2, wzr, [x1]
    35d0:	cbnz	w2, 35c8 <gomp_task_maybe_wait_for_dependencies+0x588>
    35d4:	tbz	w0, #31, 336c <gomp_task_maybe_wait_for_dependencies+0x32c>
    35d8:	ldr	x0, [sp, #112]
    35dc:	bl	0 <gomp_mutex_unlock_slow>
    35e0:	b	336c <gomp_task_maybe_wait_for_dependencies+0x32c>
    35e4:	add	x4, sp, #0xaf
    35e8:	mov	x1, x20
    35ec:	mov	x3, #0x0                   	// #0
    35f0:	mov	w2, #0x3e7                 	// #999
    35f4:	mov	w0, #0x1                   	// #1
    35f8:	bl	0 <priority_tree_next_task>
    35fc:	mov	x19, x0
    3600:	cbnz	x0, 318c <gomp_task_maybe_wait_for_dependencies+0x14c>
    3604:	ldr	x0, [x20]
    3608:	ldr	x19, [x0, #8]
    360c:	sub	x19, x19, #0x70
    3610:	b	318c <gomp_task_maybe_wait_for_dependencies+0x14c>
    3614:	bl	0 <gomp_target_task_fn>
    3618:	tst	w0, #0xff
    361c:	b.eq	31e8 <gomp_task_maybe_wait_for_dependencies+0x1a8>  // b.none
    3620:	ldr	x2, [sp, #112]
    3624:	mov	w0, #0x1                   	// #1
    3628:	str	x27, [x24, #80]
    362c:	ldaxr	w1, [x2]
    3630:	cbnz	w1, 363c <gomp_task_maybe_wait_for_dependencies+0x5fc>
    3634:	stxr	w3, w0, [x2]
    3638:	cbnz	w3, 362c <gomp_task_maybe_wait_for_dependencies+0x5ec>
    363c:	cmp	w1, #0x0
    3640:	b.ne	37a0 <gomp_task_maybe_wait_for_dependencies+0x760>  // b.any
    3644:	ldr	x0, [x19, #192]
    3648:	mov	w1, #0x4                   	// #4
    364c:	ldr	w2, [x0, #44]
    3650:	str	w1, [x19, #200]
    3654:	cmp	w2, #0x5
    3658:	b.eq	3788 <gomp_task_maybe_wait_for_dependencies+0x748>  // b.none
    365c:	str	w1, [x0, #44]
    3660:	mov	w25, #0x0                   	// #0
    3664:	mov	x24, #0x0                   	// #0
    3668:	b	3338 <gomp_task_maybe_wait_for_dependencies+0x2f8>
    366c:	ldr	w1, [x24, #52]
    3670:	add	x0, x24, #0x34
    3674:	strb	wzr, [x24, #48]
    3678:	add	w2, w1, #0x1
    367c:	and	w2, w2, #0x7fffffff
    3680:	ldxr	w4, [x0]
    3684:	cmp	w4, w1
    3688:	b.ne	3694 <gomp_task_maybe_wait_for_dependencies+0x654>  // b.any
    368c:	stlxr	w3, w2, [x0]
    3690:	cmp	w3, #0x0
    3694:	mov	w1, w4
    3698:	b.ne	3678 <gomp_task_maybe_wait_for_dependencies+0x638>  // b.any
    369c:	tbz	w4, #31, 3300 <gomp_task_maybe_wait_for_dependencies+0x2c0>
    36a0:	bl	0 <gomp_sem_post_slow>
    36a4:	b	3300 <gomp_task_maybe_wait_for_dependencies+0x2c0>
    36a8:	ldp	x20, x1, [x19, #16]
    36ac:	add	x2, x26, #0x500
    36b0:	ldr	x21, [x19, #32]
    36b4:	mov	w0, #0x1                   	// #1
    36b8:	str	x2, [sp, #112]
    36bc:	add	x20, x20, x1
    36c0:	add	x21, x21, x20
    36c4:	ldaxr	w1, [x2]
    36c8:	cbnz	w1, 36d4 <gomp_task_maybe_wait_for_dependencies+0x694>
    36cc:	stxr	w3, w0, [x2]
    36d0:	cbnz	w3, 36c4 <gomp_task_maybe_wait_for_dependencies+0x684>
    36d4:	cmp	w1, #0x0
    36d8:	b.ne	37d8 <gomp_task_maybe_wait_for_dependencies+0x798>  // b.any
    36dc:	cbz	x24, 35c4 <gomp_task_maybe_wait_for_dependencies+0x584>
    36e0:	mov	x25, x24
    36e4:	mov	x23, #0x5                   	// #5
    36e8:	mov	x24, x20
    36ec:	b	30b4 <gomp_task_maybe_wait_for_dependencies+0x74>
    36f0:	mov	x1, x20
    36f4:	mov	w0, #0x1                   	// #1
    36f8:	bl	0 <priority_tree_remove>
    36fc:	b	3280 <gomp_task_maybe_wait_for_dependencies+0x240>
    3700:	bl	0 <free>
    3704:	b	31c4 <gomp_task_maybe_wait_for_dependencies+0x184>
    3708:	ldr	x1, [x0, #8]
    370c:	cmp	x7, x1
    3710:	b.eq	3584 <gomp_task_maybe_wait_for_dependencies+0x544>  // b.none
    3714:	ldp	x9, x10, [x20, #112]
    3718:	str	x9, [x10]
    371c:	str	x10, [x9, #8]
    3720:	ldr	x9, [x1, #8]
    3724:	stp	x1, x9, [x20, #112]
    3728:	str	x7, [x0, #8]
    372c:	str	x7, [x9]
    3730:	ldr	x1, [x20, #112]
    3734:	str	x7, [x1, #8]
    3738:	str	x7, [x0, #16]
    373c:	b	3140 <gomp_task_maybe_wait_for_dependencies+0x100>
    3740:	mov	w4, #0x1                   	// #1
    3744:	str	xzr, [x6, #8]
    3748:	b	32dc <gomp_task_maybe_wait_for_dependencies+0x29c>
    374c:	mov	w0, #0x2                   	// #2
    3750:	add	x1, x24, #0x8
    3754:	bl	0 <priority_tree_remove>
    3758:	ldr	x0, [x24, #8]
    375c:	cmp	x0, #0x0
    3760:	cset	w4, eq  // eq = none
    3764:	b	32dc <gomp_task_maybe_wait_for_dependencies+0x29c>
    3768:	ldr	x0, [sp, #112]
    376c:	bl	0 <gomp_mutex_unlock_slow>
    3770:	b	3358 <gomp_task_maybe_wait_for_dependencies+0x318>
    3774:	bl	0 <free>
    3778:	b	3364 <gomp_task_maybe_wait_for_dependencies+0x324>
    377c:	add	x0, sp, #0xc0
    3780:	bl	0 <gomp_sem_wait_slow>
    3784:	b	34fc <gomp_task_maybe_wait_for_dependencies+0x4bc>
    3788:	mov	x1, x19
    378c:	mov	x0, x26
    3790:	bl	15a8 <gomp_target_task_completion>
    3794:	b	3660 <gomp_task_maybe_wait_for_dependencies+0x620>
    3798:	bl	0 <free>
    379c:	b	3464 <gomp_task_maybe_wait_for_dependencies+0x424>
    37a0:	ldr	x0, [sp, #112]
    37a4:	bl	0 <gomp_mutex_lock_slow>
    37a8:	b	3644 <gomp_task_maybe_wait_for_dependencies+0x604>
    37ac:	adrp	x0, 0 <htab_find>
    37b0:	add	x0, x0, #0x0
    37b4:	bl	0 <gomp_fatal>
    37b8:	ldr	x0, [sp, #112]
    37bc:	mov	x25, x21
    37c0:	mov	x23, #0x2                   	// #2
    37c4:	bl	0 <gomp_mutex_lock_slow>
    37c8:	b	30b4 <gomp_task_maybe_wait_for_dependencies+0x74>
    37cc:	ldr	x0, [sp, #112]
    37d0:	bl	0 <gomp_mutex_lock_slow>
    37d4:	b	3218 <gomp_task_maybe_wait_for_dependencies+0x1d8>
    37d8:	ldr	x0, [sp, #112]
    37dc:	bl	0 <gomp_mutex_lock_slow>
    37e0:	cbz	x24, 35c4 <gomp_task_maybe_wait_for_dependencies+0x584>
    37e4:	mov	x25, x24
    37e8:	mov	x23, #0x5                   	// #5
    37ec:	mov	x24, x20
    37f0:	b	30b4 <gomp_task_maybe_wait_for_dependencies+0x74>
    37f4:	nop

00000000000037f8 <GOMP_task>:
    37f8:	stp	x29, x30, [sp, #-352]!
    37fc:	adrp	x10, 0 <gomp_cancel_var>
    3800:	mov	x9, x1
    3804:	mov	x29, sp
    3808:	stp	x21, x22, [sp, #32]
    380c:	and	w5, w5, #0xff
    3810:	adrp	x21, 0 <gomp_tls_data>
    3814:	ldr	x21, [x21]
    3818:	stp	x23, x24, [sp, #48]
    381c:	mrs	x24, tpidr_el0
    3820:	add	x11, x24, x21
    3824:	stp	x19, x20, [sp, #16]
    3828:	mov	w22, w6
    382c:	ldrb	w12, [x10]
    3830:	ldr	x20, [x11, #16]
    3834:	stp	x25, x26, [sp, #64]
    3838:	mov	x26, x2
    383c:	cmp	x20, #0x0
    3840:	stp	x27, x28, [sp, #80]
    3844:	mov	x28, x0
    3848:	cset	w0, ne  // ne = any
    384c:	mov	x27, x4
    3850:	tst	w0, w12
    3854:	b.ne	3dc4 <GOMP_task+0x5cc>  // b.any
    3858:	ldr	x19, [x11, #80]
    385c:	mov	w25, #0x0                   	// #0
    3860:	tbnz	w22, #4, 39e4 <GOMP_task+0x1ec>
    3864:	cmp	x20, #0x0
    3868:	eor	w5, w5, #0x1
    386c:	cset	w0, eq  // eq = none
    3870:	and	w1, w22, #0x8
    3874:	orr	w5, w0, w5
    3878:	cbnz	w5, 3960 <GOMP_task+0x168>
    387c:	cbz	x19, 3950 <GOMP_task+0x158>
    3880:	ldrb	w0, [x19, #205]
    3884:	cbz	w0, 3950 <GOMP_task+0x158>
    3888:	cbnz	w1, 3968 <GOMP_task+0x170>
    388c:	nop
    3890:	ldp	x0, x1, [x19, #144]
    3894:	stp	x0, x1, [x29, #288]
    3898:	mov	x4, #0x1                   	// #1
    389c:	ldp	x0, x1, [x19, #160]
    38a0:	stp	x0, x1, [x29, #304]
    38a4:	movi	v0.4s, #0x0
    38a8:	ldr	x1, [x19, #176]
    38ac:	str	x4, [x29, #344]
    38b0:	stp	x19, xzr, [x29, #144]
    38b4:	stur	q0, [x29, #168]
    38b8:	stur	q0, [x29, #184]
    38bc:	stur	q0, [x29, #200]
    38c0:	ldrb	w0, [x19, #205]
    38c4:	str	xzr, [x29, #216]
    38c8:	str	x1, [x29, #320]
    38cc:	cbnz	w0, 38d4 <GOMP_task+0xdc>
    38d0:	tbz	w22, #1, 3c70 <GOMP_task+0x478>
    38d4:	str	w25, [x29, #232]
    38d8:	strb	w4, [x29, #349]
    38dc:	ldrb	w0, [x19, #204]
    38e0:	ldr	x1, [x19, #40]
    38e4:	str	x1, [x29, #184]
    38e8:	strb	w0, [x29, #348]
    38ec:	add	x0, x24, x21
    38f0:	add	x19, x29, #0x90
    38f4:	str	x19, [x0, #80]
    38f8:	cbnz	x26, 3c78 <GOMP_task+0x480>
    38fc:	mov	x0, x9
    3900:	blr	x28
    3904:	ldr	x0, [x29, #152]
    3908:	cbnz	x0, 3a14 <GOMP_task+0x21c>
    390c:	ldr	x0, [x29, #168]
    3910:	cbnz	x0, 3a14 <GOMP_task+0x21c>
    3914:	add	x0, x24, x21
    3918:	ldr	x19, [x0, #80]
    391c:	ldr	x0, [x19, #56]
    3920:	cbnz	x0, 3cb8 <GOMP_task+0x4c0>
    3924:	add	x21, x24, x21
    3928:	ldr	x0, [x19]
    392c:	str	x0, [x21, #80]
    3930:	mov	sp, x29
    3934:	ldp	x19, x20, [sp, #16]
    3938:	ldp	x21, x22, [sp, #32]
    393c:	ldp	x23, x24, [sp, #48]
    3940:	ldp	x25, x26, [sp, #64]
    3944:	ldp	x27, x28, [sp, #80]
    3948:	ldp	x29, x30, [sp], #352
    394c:	ret
    3950:	ldr	w2, [x20]
    3954:	ldr	w0, [x20, #1320]
    3958:	cmp	w0, w2, lsl #6
    395c:	b.ls	3a80 <GOMP_task+0x288>  // b.plast
    3960:	cbz	w1, 3988 <GOMP_task+0x190>
    3964:	cbz	x19, 398c <GOMP_task+0x194>
    3968:	ldr	x0, [x19, #56]
    396c:	cbz	x0, 3890 <GOMP_task+0x98>
    3970:	mov	x0, x7
    3974:	stp	x3, x9, [x29, #128]
    3978:	bl	3040 <gomp_task_maybe_wait_for_dependencies>
    397c:	add	x0, x24, x21
    3980:	ldp	x3, x9, [x29, #128]
    3984:	ldr	x19, [x0, #80]
    3988:	cbnz	x19, 3890 <GOMP_task+0x98>
    398c:	adrp	x0, 0 <gomp_global_icv>
    3990:	add	x0, x0, #0x0
    3994:	movi	v0.4s, #0x0
    3998:	mov	w1, #0x1                   	// #1
    399c:	stp	xzr, xzr, [x29, #144]
    39a0:	ldp	x6, x7, [x0]
    39a4:	str	xzr, [x29, #216]
    39a8:	ldp	x4, x5, [x0, #16]
    39ac:	stp	x6, x7, [x29, #288]
    39b0:	ldr	x0, [x0, #32]
    39b4:	stp	x4, x5, [x29, #304]
    39b8:	str	x0, [x29, #320]
    39bc:	str	w1, [x29, #344]
    39c0:	strb	wzr, [x29, #348]
    39c4:	strh	wzr, [x29, #350]
    39c8:	stur	q0, [x29, #168]
    39cc:	stur	q0, [x29, #184]
    39d0:	stur	q0, [x29, #200]
    39d4:	tbz	w22, #1, 3a74 <GOMP_task+0x27c>
    39d8:	str	w25, [x29, #232]
    39dc:	strb	w1, [x29, #349]
    39e0:	b	38ec <GOMP_task+0xf4>
    39e4:	adrp	x0, 0 <gomp_max_task_priority_var>
    39e8:	eor	w5, w5, #0x1
    39ec:	and	w1, w22, #0x8
    39f0:	ldr	w25, [x0]
    39f4:	ldr	w0, [x29, #352]
    39f8:	cmp	w25, w0
    39fc:	csel	w25, w25, w0, le
    3a00:	cmp	x20, #0x0
    3a04:	cset	w0, eq  // eq = none
    3a08:	orr	w5, w0, w5
    3a0c:	cbnz	w5, 3960 <GOMP_task+0x168>
    3a10:	b	387c <GOMP_task+0x84>
    3a14:	add	x20, x20, #0x500
    3a18:	mov	w0, #0x1                   	// #1
    3a1c:	ldaxr	w1, [x20]
    3a20:	cbnz	w1, 3a2c <GOMP_task+0x234>
    3a24:	stxr	w2, w0, [x20]
    3a28:	cbnz	w2, 3a1c <GOMP_task+0x224>
    3a2c:	cmp	w1, #0x0
    3a30:	b.ne	40d4 <GOMP_task+0x8dc>  // b.any
    3a34:	ldr	x22, [x29, #152]
    3a38:	cbnz	x22, 3e80 <GOMP_task+0x688>
    3a3c:	ldr	x1, [x29, #168]
    3a40:	mov	x0, x1
    3a44:	cbz	x1, 3a58 <GOMP_task+0x260>
    3a48:	stur	xzr, [x0, #-112]
    3a4c:	ldr	x0, [x0]
    3a50:	cmp	x1, x0
    3a54:	b.ne	3a48 <GOMP_task+0x250>  // b.any
    3a58:	ldxr	w0, [x20]
    3a5c:	stlxr	w1, wzr, [x20]
    3a60:	cbnz	w1, 3a58 <GOMP_task+0x260>
    3a64:	tbz	w0, #31, 3914 <GOMP_task+0x11c>
    3a68:	mov	x0, x20
    3a6c:	bl	0 <gomp_mutex_unlock_slow>
    3a70:	b	3914 <GOMP_task+0x11c>
    3a74:	str	w25, [x29, #232]
    3a78:	strb	wzr, [x29, #349]
    3a7c:	b	38ec <GOMP_task+0xf4>
    3a80:	mov	x5, #0x0                   	// #0
    3a84:	ldr	x11, [x19, #40]
    3a88:	cbz	w1, 3a9c <GOMP_task+0x2a4>
    3a8c:	ldr	x5, [x7]
    3a90:	cbz	x5, 3f08 <GOMP_task+0x710>
    3a94:	add	x5, x5, x5, lsl #2
    3a98:	lsl	x5, x5, #3
    3a9c:	add	x1, x27, #0xcf
    3aa0:	stp	x7, x9, [x29, #96]
    3aa4:	add	x0, x3, x1
    3aa8:	add	x0, x0, x5
    3aac:	stp	x11, x1, [x29, #112]
    3ab0:	neg	x27, x27
    3ab4:	stp	x3, x5, [x29, #128]
    3ab8:	bl	0 <gomp_malloc>
    3abc:	add	x12, x24, x21
    3ac0:	ldp	x11, x1, [x29, #112]
    3ac4:	mov	x23, x0
    3ac8:	ldp	x3, x5, [x29, #128]
    3acc:	mov	x6, x0
    3ad0:	ldr	x0, [x12, #80]
    3ad4:	adrp	x2, 0 <gomp_global_icv>
    3ad8:	add	x2, x2, #0x0
    3adc:	str	x19, [x6], #144
    3ae0:	cmp	x0, #0x0
    3ae4:	add	x0, x0, #0x90
    3ae8:	csel	x2, x2, x0, eq  // eq = none
    3aec:	add	x1, x5, x1
    3af0:	add	x1, x23, x1
    3af4:	and	x27, x1, x27
    3af8:	ldp	x0, x1, [x2]
    3afc:	stp	x0, x1, [x23, #144]
    3b00:	ldp	x0, x1, [x2, #16]
    3b04:	stp	x0, x1, [x6, #16]
    3b08:	ldr	x0, [x2, #32]
    3b0c:	str	x0, [x6, #32]
    3b10:	mov	x0, #0x1                   	// #1
    3b14:	str	x0, [x23, #200]
    3b18:	ldp	x7, x9, [x29, #96]
    3b1c:	str	xzr, [x23, #8]
    3b20:	ldrb	w0, [x19, #204]
    3b24:	stp	xzr, xzr, [x23, #24]
    3b28:	stp	x11, xzr, [x23, #40]
    3b2c:	stp	xzr, xzr, [x23, #56]
    3b30:	str	xzr, [x23, #72]
    3b34:	str	x23, [x12, #80]
    3b38:	str	w25, [x23, #88]
    3b3c:	stp	x7, x11, [x29, #120]
    3b40:	strb	w0, [x23, #204]
    3b44:	cbz	x26, 3ee4 <GOMP_task+0x6ec>
    3b48:	mov	x0, x27
    3b4c:	mov	x1, x9
    3b50:	blr	x26
    3b54:	ldp	x7, x11, [x29, #120]
    3b58:	mov	w0, #0x1                   	// #1
    3b5c:	ldr	x5, [x29, #136]
    3b60:	adrp	x10, 0 <gomp_cancel_var>
    3b64:	strb	w0, [x23, #206]
    3b68:	add	x21, x24, x21
    3b6c:	add	x26, x20, #0x500
    3b70:	ubfx	x22, x22, #1, #1
    3b74:	mov	w1, #0x2                   	// #2
    3b78:	mov	w0, #0x1                   	// #1
    3b7c:	stp	x28, x27, [x23, #184]
    3b80:	str	x19, [x21, #80]
    3b84:	str	w1, [x23, #200]
    3b88:	strb	w22, [x23, #205]
    3b8c:	ldaxr	w1, [x26]
    3b90:	cbnz	w1, 3b9c <GOMP_task+0x3a4>
    3b94:	stxr	w2, w0, [x26]
    3b98:	cbnz	w2, 3b8c <GOMP_task+0x394>
    3b9c:	cmp	w1, #0x0
    3ba0:	b.ne	40f4 <GOMP_task+0x8fc>  // b.any
    3ba4:	ldrb	w0, [x10]
    3ba8:	cbnz	w0, 3e0c <GOMP_task+0x614>
    3bac:	cbz	x11, 3bbc <GOMP_task+0x3c4>
    3bb0:	ldr	x0, [x11, #56]
    3bb4:	add	x0, x0, #0x1
    3bb8:	str	x0, [x11, #56]
    3bbc:	cbz	x5, 3be0 <GOMP_task+0x3e8>
    3bc0:	mov	x0, x23
    3bc4:	mov	x2, x7
    3bc8:	mov	x1, x19
    3bcc:	str	x11, [x29, #136]
    3bd0:	bl	1168 <gomp_task_handle_depend>
    3bd4:	ldr	x0, [x23, #80]
    3bd8:	ldr	x11, [x29, #136]
    3bdc:	cbnz	x0, 3e64 <GOMP_task+0x66c>
    3be0:	ldr	x0, [x19, #8]
    3be4:	add	x24, x19, #0x8
    3be8:	add	x21, x23, #0x70
    3bec:	cbnz	x0, 3f4c <GOMP_task+0x754>
    3bf0:	cmp	w25, #0x0
    3bf4:	ldr	x0, [x19, #24]
    3bf8:	b.gt	3f10 <GOMP_task+0x718>
    3bfc:	cbz	x0, 3ec4 <GOMP_task+0x6cc>
    3c00:	ldr	x1, [x0, #8]
    3c04:	stp	x0, x1, [x23, #112]
    3c08:	str	x21, [x19, #24]
    3c0c:	ldr	x0, [x23, #112]
    3c10:	str	x21, [x0, #8]
    3c14:	ldr	x0, [x23, #120]
    3c18:	str	x21, [x0]
    3c1c:	cbz	x11, 3d38 <GOMP_task+0x540>
    3c20:	ldr	x0, [x11, #8]
    3c24:	add	x24, x11, #0x8
    3c28:	add	x21, x23, #0x80
    3c2c:	cbnz	x0, 3d00 <GOMP_task+0x508>
    3c30:	cmp	w25, #0x0
    3c34:	ldr	x0, [x11, #24]
    3c38:	b.gt	3cc0 <GOMP_task+0x4c8>
    3c3c:	cbz	x0, 3dfc <GOMP_task+0x604>
    3c40:	ldr	x1, [x0, #8]
    3c44:	stp	x0, x1, [x23, #128]
    3c48:	str	x21, [x11, #24]
    3c4c:	ldr	x0, [x23, #128]
    3c50:	str	x21, [x0, #8]
    3c54:	ldr	x0, [x23, #136]
    3c58:	str	x21, [x0]
    3c5c:	ldr	x0, [x20, #1288]
    3c60:	add	x22, x20, #0x508
    3c64:	cbnz	x0, 3fc8 <GOMP_task+0x7d0>
    3c68:	ldr	x0, [x20, #1304]
    3c6c:	b	3d50 <GOMP_task+0x558>
    3c70:	str	w25, [x29, #232]
    3c74:	b	38dc <GOMP_task+0xe4>
    3c78:	add	x3, x3, x27
    3c7c:	mov	x22, sp
    3c80:	add	x3, x3, #0xe
    3c84:	sub	x0, x27, #0x1
    3c88:	and	x3, x3, #0xfffffffffffffff0
    3c8c:	mov	x1, x9
    3c90:	sub	sp, sp, x3
    3c94:	neg	x27, x27
    3c98:	add	x0, sp, x0
    3c9c:	and	x27, x0, x27
    3ca0:	mov	x0, x27
    3ca4:	blr	x26
    3ca8:	mov	x0, x27
    3cac:	blr	x28
    3cb0:	mov	sp, x22
    3cb4:	b	3904 <GOMP_task+0x10c>
    3cb8:	bl	0 <free>
    3cbc:	b	3924 <GOMP_task+0x12c>
    3cc0:	cbz	x0, 4094 <GOMP_task+0x89c>
    3cc4:	mov	x0, #0x28                  	// #40
    3cc8:	str	x11, [x29, #136]
    3ccc:	bl	0 <gomp_malloc>
    3cd0:	mov	x1, x0
    3cd4:	ldr	x11, [x29, #136]
    3cd8:	mov	x0, x24
    3cdc:	ldur	q0, [x11, #24]
    3ce0:	str	wzr, [x1]
    3ce4:	stp	xzr, xzr, [x1, #24]
    3ce8:	stur	q0, [x1, #8]
    3cec:	bl	0 <prio_splay_tree_insert>
    3cf0:	ldr	x11, [x29, #136]
    3cf4:	ldr	x0, [x11, #8]
    3cf8:	str	xzr, [x24, #16]
    3cfc:	cbz	x0, 4094 <GOMP_task+0x89c>
    3d00:	add	x1, x29, #0x90
    3d04:	mov	x0, x24
    3d08:	str	w25, [x29, #144]
    3d0c:	bl	0 <prio_splay_tree_lookup>
    3d10:	cbz	x0, 4094 <GOMP_task+0x89c>
    3d14:	ldr	x1, [x0, #8]
    3d18:	cbz	x1, 40c4 <GOMP_task+0x8cc>
    3d1c:	ldr	x2, [x1, #8]
    3d20:	stp	x1, x2, [x23, #128]
    3d24:	str	x21, [x0, #8]
    3d28:	ldr	x0, [x23, #128]
    3d2c:	str	x21, [x0, #8]
    3d30:	ldr	x0, [x23, #136]
    3d34:	str	x21, [x0]
    3d38:	ldr	x0, [x20, #1288]
    3d3c:	add	x22, x20, #0x508
    3d40:	cbnz	x0, 3fc8 <GOMP_task+0x7d0>
    3d44:	cmp	w25, #0x0
    3d48:	ldr	x0, [x22, #16]
    3d4c:	b.gt	3f90 <GOMP_task+0x798>
    3d50:	add	x1, x23, #0x60
    3d54:	cbz	x0, 3ed4 <GOMP_task+0x6dc>
    3d58:	ldr	x2, [x0, #8]
    3d5c:	stp	x0, x2, [x23, #96]
    3d60:	str	x1, [x0, #8]
    3d64:	ldr	x0, [x23, #104]
    3d68:	str	x1, [x0]
    3d6c:	ldr	w0, [x20, #132]
    3d70:	movi	v1.2s, #0x1
    3d74:	ldr	d0, [x20, #1320]
    3d78:	ldrb	w19, [x19, #204]
    3d7c:	orr	w0, w0, #0x1
    3d80:	str	w0, [x20, #132]
    3d84:	ldr	w0, [x20, #1328]
    3d88:	add	v0.2s, v0.2s, v1.2s
    3d8c:	eor	w19, w19, #0x1
    3d90:	ldr	w21, [x20]
    3d94:	add	w19, w19, w0
    3d98:	str	d0, [x20, #1320]
    3d9c:	ldxr	w0, [x26]
    3da0:	stlxr	w1, wzr, [x26]
    3da4:	cbnz	w1, 3d9c <GOMP_task+0x5a4>
    3da8:	tbnz	w0, #31, 4000 <GOMP_task+0x808>
    3dac:	cmp	w19, w21
    3db0:	b.cs	3930 <GOMP_task+0x138>  // b.hs, b.nlast
    3db4:	add	x0, x20, #0x80
    3db8:	mov	w1, #0x1                   	// #1
    3dbc:	bl	0 <gomp_team_barrier_wake>
    3dc0:	b	3930 <GOMP_task+0x138>
    3dc4:	ldr	w0, [x20, #132]
    3dc8:	tbnz	w0, #2, 3930 <GOMP_task+0x138>
    3dcc:	ldr	x19, [x11, #80]
    3dd0:	ldr	x0, [x19, #40]
    3dd4:	cbz	x0, 385c <GOMP_task+0x64>
    3dd8:	ldrb	w1, [x0, #49]
    3ddc:	cbnz	w1, 3930 <GOMP_task+0x138>
    3de0:	ldrb	w1, [x0, #50]
    3de4:	cbz	w1, 385c <GOMP_task+0x64>
    3de8:	ldr	x0, [x0]
    3dec:	cbz	x0, 385c <GOMP_task+0x64>
    3df0:	ldrb	w0, [x0, #49]
    3df4:	cbz	w0, 385c <GOMP_task+0x64>
    3df8:	b	3930 <GOMP_task+0x138>
    3dfc:	dup	v0.2d, x21
    3e00:	str	q0, [x23, #128]
    3e04:	str	x21, [x11, #24]
    3e08:	b	3c5c <GOMP_task+0x464>
    3e0c:	ldrb	w0, [x23, #206]
    3e10:	cbnz	w0, 3bac <GOMP_task+0x3b4>
    3e14:	ldr	w0, [x20, #132]
    3e18:	tbnz	w0, #2, 3e40 <GOMP_task+0x648>
    3e1c:	cbz	x11, 3bbc <GOMP_task+0x3c4>
    3e20:	ldrb	w0, [x11, #49]
    3e24:	cbnz	w0, 3e40 <GOMP_task+0x648>
    3e28:	ldrb	w0, [x11, #50]
    3e2c:	cbz	w0, 3bb0 <GOMP_task+0x3b8>
    3e30:	ldr	x0, [x11]
    3e34:	cbz	x0, 3bb0 <GOMP_task+0x3b8>
    3e38:	ldrb	w0, [x0, #49]
    3e3c:	cbz	w0, 3bb0 <GOMP_task+0x3b8>
    3e40:	ldxr	w0, [x26]
    3e44:	stlxr	w1, wzr, [x26]
    3e48:	cbnz	w1, 3e40 <GOMP_task+0x648>
    3e4c:	tbnz	w0, #31, 40e8 <GOMP_task+0x8f0>
    3e50:	ldr	x0, [x23, #56]
    3e54:	cbnz	x0, 40e0 <GOMP_task+0x8e8>
    3e58:	mov	x0, x23
    3e5c:	bl	0 <free>
    3e60:	b	3930 <GOMP_task+0x138>
    3e64:	ldxr	w0, [x26]
    3e68:	stlxr	w1, wzr, [x26]
    3e6c:	cbnz	w1, 3e64 <GOMP_task+0x66c>
    3e70:	tbz	w0, #31, 3930 <GOMP_task+0x138>
    3e74:	mov	x0, x26
    3e78:	bl	0 <gomp_mutex_unlock_slow>
    3e7c:	b	3930 <GOMP_task+0x138>
    3e80:	add	x19, x19, #0x8
    3e84:	ldr	x3, [x22, #8]
    3e88:	mov	x0, x22
    3e8c:	ldp	x23, x22, [x22, #24]
    3e90:	mov	x2, x3
    3e94:	cbz	x3, 3ea8 <GOMP_task+0x6b0>
    3e98:	stur	xzr, [x2, #-112]
    3e9c:	ldr	x2, [x2]
    3ea0:	cmp	x3, x2
    3ea4:	b.ne	3e98 <GOMP_task+0x6a0>  // b.any
    3ea8:	bl	0 <free>
    3eac:	mov	x1, x23
    3eb0:	mov	x0, x19
    3eb4:	bl	e0 <gomp_clear_parent_in_tree>
    3eb8:	cbnz	x22, 3e84 <GOMP_task+0x68c>
    3ebc:	str	xzr, [x29, #152]
    3ec0:	b	3a58 <GOMP_task+0x260>
    3ec4:	dup	v0.2d, x21
    3ec8:	str	q0, [x23, #112]
    3ecc:	str	x21, [x19, #24]
    3ed0:	b	3c1c <GOMP_task+0x424>
    3ed4:	dup	v0.2d, x1
    3ed8:	str	q0, [x23, #96]
    3edc:	str	x1, [x20, #1304]
    3ee0:	b	3d6c <GOMP_task+0x574>
    3ee4:	mov	x2, x3
    3ee8:	mov	x1, x9
    3eec:	mov	x0, x27
    3ef0:	str	x5, [x29, #136]
    3ef4:	bl	0 <memcpy>
    3ef8:	adrp	x10, 0 <gomp_cancel_var>
    3efc:	ldp	x7, x11, [x29, #120]
    3f00:	ldr	x5, [x29, #136]
    3f04:	b	3b68 <GOMP_task+0x370>
    3f08:	ldr	x5, [x7, #8]
    3f0c:	b	3a94 <GOMP_task+0x29c>
    3f10:	cbz	x0, 400c <GOMP_task+0x814>
    3f14:	mov	x0, #0x28                  	// #40
    3f18:	str	x11, [x29, #136]
    3f1c:	bl	0 <gomp_malloc>
    3f20:	mov	x1, x0
    3f24:	ldur	q0, [x19, #24]
    3f28:	mov	x0, x24
    3f2c:	str	wzr, [x1]
    3f30:	stp	xzr, xzr, [x1, #24]
    3f34:	stur	q0, [x1, #8]
    3f38:	bl	0 <prio_splay_tree_insert>
    3f3c:	ldr	x0, [x24]
    3f40:	str	xzr, [x24, #16]
    3f44:	ldr	x11, [x29, #136]
    3f48:	cbz	x0, 400c <GOMP_task+0x814>
    3f4c:	add	x1, x29, #0x90
    3f50:	mov	x0, x24
    3f54:	str	x11, [x29, #136]
    3f58:	str	w25, [x29, #144]
    3f5c:	bl	0 <prio_splay_tree_lookup>
    3f60:	ldr	x11, [x29, #136]
    3f64:	cbz	x0, 400c <GOMP_task+0x814>
    3f68:	ldr	x1, [x0, #8]
    3f6c:	cbz	x1, 4084 <GOMP_task+0x88c>
    3f70:	ldr	x2, [x1, #8]
    3f74:	stp	x1, x2, [x23, #112]
    3f78:	str	x21, [x0, #8]
    3f7c:	ldr	x0, [x23, #112]
    3f80:	str	x21, [x0, #8]
    3f84:	ldr	x0, [x23, #120]
    3f88:	str	x21, [x0]
    3f8c:	b	3c1c <GOMP_task+0x424>
    3f90:	cbz	x0, 4044 <GOMP_task+0x84c>
    3f94:	mov	x0, #0x28                  	// #40
    3f98:	bl	0 <gomp_malloc>
    3f9c:	add	x2, x20, #0x600
    3fa0:	mov	x1, x0
    3fa4:	mov	x0, x22
    3fa8:	ldur	q0, [x2, #-232]
    3fac:	str	wzr, [x1]
    3fb0:	stp	xzr, xzr, [x1, #24]
    3fb4:	stur	q0, [x1, #8]
    3fb8:	bl	0 <prio_splay_tree_insert>
    3fbc:	ldr	x0, [x20, #1288]
    3fc0:	str	xzr, [x22, #16]
    3fc4:	cbz	x0, 4044 <GOMP_task+0x84c>
    3fc8:	add	x1, x29, #0x90
    3fcc:	mov	x0, x22
    3fd0:	str	w25, [x29, #144]
    3fd4:	bl	0 <prio_splay_tree_lookup>
    3fd8:	cbz	x0, 4044 <GOMP_task+0x84c>
    3fdc:	ldr	x1, [x0, #8]
    3fe0:	add	x2, x23, #0x60
    3fe4:	cbz	x1, 4074 <GOMP_task+0x87c>
    3fe8:	ldr	x0, [x1, #8]
    3fec:	stp	x1, x0, [x23, #96]
    3ff0:	str	x2, [x1, #8]
    3ff4:	ldr	x0, [x23, #104]
    3ff8:	str	x2, [x0]
    3ffc:	b	3d6c <GOMP_task+0x574>
    4000:	mov	x0, x26
    4004:	bl	0 <gomp_mutex_unlock_slow>
    4008:	b	3dac <GOMP_task+0x5b4>
    400c:	mov	x0, #0x28                  	// #40
    4010:	str	x11, [x29, #136]
    4014:	bl	0 <gomp_malloc>
    4018:	mov	x22, x0
    401c:	movi	v0.4s, #0x0
    4020:	mov	x0, x24
    4024:	mov	x1, x22
    4028:	str	w25, [x22]
    402c:	stur	q0, [x22, #8]
    4030:	stur	q0, [x22, #24]
    4034:	bl	0 <prio_splay_tree_insert>
    4038:	mov	x0, x22
    403c:	ldr	x11, [x29, #136]
    4040:	b	3f68 <GOMP_task+0x770>
    4044:	mov	x0, #0x28                  	// #40
    4048:	bl	0 <gomp_malloc>
    404c:	movi	v0.4s, #0x0
    4050:	mov	x21, x0
    4054:	mov	x1, x21
    4058:	mov	x0, x22
    405c:	str	w25, [x21]
    4060:	stur	q0, [x21, #8]
    4064:	stur	q0, [x21, #24]
    4068:	bl	0 <prio_splay_tree_insert>
    406c:	mov	x0, x21
    4070:	b	3fdc <GOMP_task+0x7e4>
    4074:	dup	v0.2d, x2
    4078:	str	q0, [x23, #96]
    407c:	str	x2, [x0, #8]
    4080:	b	3d6c <GOMP_task+0x574>
    4084:	dup	v0.2d, x21
    4088:	str	q0, [x23, #112]
    408c:	str	x21, [x0, #8]
    4090:	b	3c1c <GOMP_task+0x424>
    4094:	mov	x0, #0x28                  	// #40
    4098:	bl	0 <gomp_malloc>
    409c:	movi	v0.4s, #0x0
    40a0:	mov	x22, x0
    40a4:	mov	x1, x22
    40a8:	mov	x0, x24
    40ac:	str	w25, [x22]
    40b0:	stur	q0, [x22, #8]
    40b4:	stur	q0, [x22, #24]
    40b8:	bl	0 <prio_splay_tree_insert>
    40bc:	mov	x0, x22
    40c0:	b	3d14 <GOMP_task+0x51c>
    40c4:	dup	v0.2d, x21
    40c8:	str	q0, [x23, #128]
    40cc:	str	x21, [x0, #8]
    40d0:	b	3d38 <GOMP_task+0x540>
    40d4:	mov	x0, x20
    40d8:	bl	0 <gomp_mutex_lock_slow>
    40dc:	b	3a34 <GOMP_task+0x23c>
    40e0:	bl	0 <free>
    40e4:	b	3e58 <GOMP_task+0x660>
    40e8:	mov	x0, x26
    40ec:	bl	0 <gomp_mutex_unlock_slow>
    40f0:	b	3e50 <GOMP_task+0x658>
    40f4:	mov	x0, x26
    40f8:	stp	x7, x11, [x29, #120]
    40fc:	str	x5, [x29, #136]
    4100:	bl	0 <gomp_mutex_lock_slow>
    4104:	adrp	x10, 0 <gomp_cancel_var>
    4108:	ldp	x7, x11, [x29, #120]
    410c:	ldr	x5, [x29, #136]
    4110:	b	3ba4 <GOMP_task+0x3ac>
    4114:	nop

0000000000004118 <GOMP_taskwait_depend>:
    4118:	adrp	x1, 0 <gomp_tls_data>
    411c:	ldr	x1, [x1]
    4120:	mrs	x2, tpidr_el0
    4124:	adrp	x3, 0 <gomp_cancel_var>
    4128:	add	x1, x2, x1
    412c:	ldrb	w3, [x3]
    4130:	ldr	x2, [x1, #16]
    4134:	cmp	x2, #0x0
    4138:	cset	w4, ne  // ne = any
    413c:	tst	w4, w3
    4140:	b.ne	4158 <GOMP_taskwait_depend+0x40>  // b.any
    4144:	ldr	x1, [x1, #80]
    4148:	cbz	x1, 418c <GOMP_taskwait_depend+0x74>
    414c:	ldr	x1, [x1, #56]
    4150:	cbz	x1, 418c <GOMP_taskwait_depend+0x74>
    4154:	b	3040 <gomp_task_maybe_wait_for_dependencies>
    4158:	ldr	w2, [x2, #132]
    415c:	tbnz	w2, #2, 418c <GOMP_taskwait_depend+0x74>
    4160:	ldr	x1, [x1, #80]
    4164:	ldr	x2, [x1, #40]
    4168:	cbz	x2, 414c <GOMP_taskwait_depend+0x34>
    416c:	ldrb	w3, [x2, #49]
    4170:	cbnz	w3, 418c <GOMP_taskwait_depend+0x74>
    4174:	ldrb	w3, [x2, #50]
    4178:	cbz	w3, 414c <GOMP_taskwait_depend+0x34>
    417c:	ldr	x2, [x2]
    4180:	cbz	x2, 414c <GOMP_taskwait_depend+0x34>
    4184:	ldrb	w2, [x2, #49]
    4188:	cbz	w2, 414c <GOMP_taskwait_depend+0x34>
    418c:	ret

0000000000004190 <GOMP_taskyield>:
    4190:	ret
    4194:	nop

0000000000004198 <GOMP_taskgroup_start>:
    4198:	adrp	x0, 0 <gomp_tls_data>
    419c:	ldr	x0, [x0]
    41a0:	mrs	x1, tpidr_el0
    41a4:	add	x0, x1, x0
    41a8:	ldr	x1, [x0, #16]
    41ac:	cbz	x1, 4200 <GOMP_taskgroup_start+0x68>
    41b0:	stp	x29, x30, [sp, #-32]!
    41b4:	mov	x29, sp
    41b8:	stp	x19, x20, [sp, #16]
    41bc:	ldr	x20, [x0, #80]
    41c0:	mov	x0, #0x40                  	// #64
    41c4:	ldr	x19, [x20, #40]
    41c8:	bl	0 <gomp_malloc>
    41cc:	stp	x19, xzr, [x0]
    41d0:	stp	xzr, xzr, [x0, #24]
    41d4:	cbz	x19, 41dc <GOMP_taskgroup_start+0x44>
    41d8:	ldr	x19, [x19, #40]
    41dc:	str	x19, [x0, #40]
    41e0:	strh	wzr, [x0, #48]
    41e4:	strb	wzr, [x0, #50]
    41e8:	str	wzr, [x0, #52]
    41ec:	str	xzr, [x0, #56]
    41f0:	str	x0, [x20, #40]
    41f4:	ldp	x19, x20, [sp, #16]
    41f8:	ldp	x29, x30, [sp], #32
    41fc:	ret
    4200:	ret
    4204:	nop

0000000000004208 <GOMP_taskgroup_end>:
    4208:	stp	x29, x30, [sp, #-144]!
    420c:	mov	x29, sp
    4210:	stp	x23, x24, [sp, #48]
    4214:	mrs	x24, tpidr_el0
    4218:	adrp	x23, 0 <gomp_tls_data>
    421c:	ldr	x23, [x23]
    4220:	stp	x21, x22, [sp, #32]
    4224:	add	x0, x24, x23
    4228:	ldr	x21, [x0, #16]
    422c:	cbz	x21, 44c0 <GOMP_taskgroup_end+0x2b8>
    4230:	ldr	x22, [x0, #80]
    4234:	stp	x19, x20, [sp, #16]
    4238:	ldr	x20, [x22, #40]
    423c:	cbz	x20, 4840 <GOMP_taskgroup_end+0x638>
    4240:	add	x0, x20, #0x38
    4244:	ldar	x0, [x0]
    4248:	cbz	x0, 44ac <GOMP_taskgroup_end+0x2a4>
    424c:	add	x19, x21, #0x500
    4250:	mov	w0, #0x1                   	// #1
    4254:	stp	x25, x26, [sp, #64]
    4258:	stp	x27, x28, [sp, #80]
    425c:	ldaxr	w1, [x19]
    4260:	cbnz	w1, 426c <GOMP_taskgroup_end+0x64>
    4264:	stxr	w2, w0, [x19]
    4268:	cbnz	w2, 425c <GOMP_taskgroup_end+0x54>
    426c:	cmp	w1, #0x0
    4270:	b.ne	4898 <GOMP_taskgroup_end+0x690>  // b.any
    4274:	add	x0, x21, #0x508
    4278:	str	x0, [sp, #120]
    427c:	ldr	x0, [x20, #8]
    4280:	add	x25, x20, #0x8
    4284:	mov	w28, #0x0                   	// #0
    4288:	mov	x27, #0x0                   	// #0
    428c:	cbnz	x0, 4448 <GOMP_taskgroup_end+0x240>
    4290:	ldr	x3, [x25, #16]
    4294:	cbnz	x3, 4500 <GOMP_taskgroup_end+0x2f8>
    4298:	ldr	x0, [x20, #56]
    429c:	cbz	x0, 4478 <GOMP_taskgroup_end+0x270>
    42a0:	ldr	x0, [x22, #8]
    42a4:	cbnz	x0, 47ec <GOMP_taskgroup_end+0x5e4>
    42a8:	ldr	x3, [x22, #24]
    42ac:	cbnz	x3, 4548 <GOMP_taskgroup_end+0x340>
    42b0:	mov	w0, #0x1                   	// #1
    42b4:	mov	x26, #0x0                   	// #0
    42b8:	strb	w0, [x20, #48]
    42bc:	ldxr	w0, [x19]
    42c0:	stlxr	w1, wzr, [x19]
    42c4:	cbnz	w1, 42bc <GOMP_taskgroup_end+0xb4>
    42c8:	tbnz	w0, #31, 44e0 <GOMP_taskgroup_end+0x2d8>
    42cc:	cbnz	w28, 44d0 <GOMP_taskgroup_end+0x2c8>
    42d0:	cbz	x27, 42e4 <GOMP_taskgroup_end+0xdc>
    42d4:	ldr	x0, [x27, #56]
    42d8:	cbnz	x0, 46f0 <GOMP_taskgroup_end+0x4e8>
    42dc:	mov	x0, x27
    42e0:	bl	0 <free>
    42e4:	cbz	x26, 45c0 <GOMP_taskgroup_end+0x3b8>
    42e8:	ldp	x1, x0, [x26, #184]
    42ec:	add	x27, x24, x23
    42f0:	str	x26, [x27, #80]
    42f4:	cbz	x1, 4648 <GOMP_taskgroup_end+0x440>
    42f8:	blr	x1
    42fc:	add	x0, x24, x23
    4300:	str	x22, [x0, #80]
    4304:	mov	w0, #0x1                   	// #1
    4308:	ldaxr	w1, [x19]
    430c:	cbnz	w1, 4318 <GOMP_taskgroup_end+0x110>
    4310:	stxr	w2, w0, [x19]
    4314:	cbnz	w2, 4308 <GOMP_taskgroup_end+0x100>
    4318:	cmp	w1, #0x0
    431c:	mov	w28, #0x0                   	// #0
    4320:	b.ne	48a4 <GOMP_taskgroup_end+0x69c>  // b.any
    4324:	ldr	x4, [x26, #72]
    4328:	ldr	x27, [x26]
    432c:	cbz	x4, 4358 <GOMP_taskgroup_end+0x150>
    4330:	cbz	x27, 4558 <GOMP_taskgroup_end+0x350>
    4334:	mov	x0, x26
    4338:	bl	330 <gomp_task_run_post_handle_depend_hash>
    433c:	ldr	x0, [x26, #48]
    4340:	cbz	x0, 46e4 <GOMP_taskgroup_end+0x4dc>
    4344:	mov	x1, x21
    4348:	mov	x0, x26
    434c:	bl	8a0 <gomp_task_run_post_handle_dependers>
    4350:	mov	x4, x0
    4354:	ldr	x27, [x26]
    4358:	cbz	x27, 438c <GOMP_taskgroup_end+0x184>
    435c:	ldrb	w0, [x26, #207]
    4360:	cbnz	w0, 46f8 <GOMP_taskgroup_end+0x4f0>
    4364:	ldr	x0, [x27, #8]
    4368:	add	x2, x26, #0x70
    436c:	cbnz	x0, 4758 <GOMP_taskgroup_end+0x550>
    4370:	ldp	x0, x1, [x26, #112]
    4374:	ldr	x6, [x27, #24]
    4378:	cmp	x6, x2
    437c:	str	x0, [x1]
    4380:	str	x1, [x0, #8]
    4384:	b.eq	44f0 <GOMP_taskgroup_end+0x2e8>  // b.none
    4388:	stp	xzr, xzr, [x26, #112]
    438c:	ldr	x6, [x26, #8]
    4390:	cbnz	x6, 4570 <GOMP_taskgroup_end+0x368>
    4394:	ldr	x0, [x26, #24]
    4398:	mov	x1, x0
    439c:	cbz	x0, 43b0 <GOMP_taskgroup_end+0x1a8>
    43a0:	stur	xzr, [x1, #-112]
    43a4:	ldr	x1, [x1]
    43a8:	cmp	x0, x1
    43ac:	b.ne	43a0 <GOMP_taskgroup_end+0x198>  // b.any
    43b0:	ldr	x27, [x26, #40]
    43b4:	cbz	x27, 4408 <GOMP_taskgroup_end+0x200>
    43b8:	ldr	x0, [x27, #8]
    43bc:	add	x2, x26, #0x80
    43c0:	cbnz	x0, 47c8 <GOMP_taskgroup_end+0x5c0>
    43c4:	ldp	x0, x1, [x26, #128]
    43c8:	add	x7, x27, #0x10
    43cc:	ldr	x6, [x7, #8]
    43d0:	mov	w8, #0x0                   	// #0
    43d4:	cmp	x6, x2
    43d8:	str	x0, [x1]
    43dc:	str	x1, [x0, #8]
    43e0:	b.eq	4620 <GOMP_taskgroup_end+0x418>  // b.none
    43e4:	ldr	x0, [x27, #56]
    43e8:	stp	xzr, xzr, [x26, #128]
    43ec:	cmp	x0, #0x1
    43f0:	b.ls	463c <GOMP_taskgroup_end+0x434>  // b.plast
    43f4:	sub	x0, x0, #0x1
    43f8:	str	x0, [x27, #56]
    43fc:	cbz	w8, 4408 <GOMP_taskgroup_end+0x200>
    4400:	ldrb	w0, [x27, #48]
    4404:	cbnz	w0, 46a0 <GOMP_taskgroup_end+0x498>
    4408:	ldr	w0, [x21, #1320]
    440c:	cmp	x4, #0x1
    4410:	sub	w0, w0, #0x1
    4414:	str	w0, [x21, #1320]
    4418:	b.ls	443c <GOMP_taskgroup_end+0x234>  // b.plast
    441c:	ldrb	w0, [x22, #204]
    4420:	ldr	w5, [x21]
    4424:	ldr	w1, [x21, #1328]
    4428:	eor	w0, w0, #0x1
    442c:	sub	w5, w5, w1
    4430:	sub	w28, w5, w0
    4434:	cmp	x4, w28, sxtw
    4438:	csel	w28, w4, w28, cc  // cc = lo, ul, last
    443c:	mov	x27, x26
    4440:	ldr	x0, [x20, #8]
    4444:	cbz	x0, 4290 <GOMP_taskgroup_end+0x88>
    4448:	ldr	x3, [sp, #120]
    444c:	add	x4, sp, #0x8f
    4450:	mov	x1, x25
    4454:	mov	w2, #0x0                   	// #0
    4458:	mov	w0, #0x2                   	// #2
    445c:	bl	0 <priority_tree_next_task>
    4460:	mov	x26, x0
    4464:	cbnz	x0, 450c <GOMP_taskgroup_end+0x304>
    4468:	ldr	x0, [x25]
    446c:	ldr	x3, [x0, #8]
    4470:	sub	x26, x3, #0x80
    4474:	b	450c <GOMP_taskgroup_end+0x304>
    4478:	ldxr	w0, [x19]
    447c:	stlxr	w1, wzr, [x19]
    4480:	cbnz	w1, 4478 <GOMP_taskgroup_end+0x270>
    4484:	tbz	w0, #31, 4490 <GOMP_taskgroup_end+0x288>
    4488:	mov	x0, x19
    448c:	bl	0 <gomp_mutex_unlock_slow>
    4490:	cbz	x27, 4828 <GOMP_taskgroup_end+0x620>
    4494:	ldr	x0, [x27, #56]
    4498:	cbnz	x0, 4860 <GOMP_taskgroup_end+0x658>
    449c:	mov	x0, x27
    44a0:	bl	0 <free>
    44a4:	ldp	x25, x26, [sp, #64]
    44a8:	ldp	x27, x28, [sp, #80]
    44ac:	ldr	x0, [x20]
    44b0:	str	x0, [x22, #40]
    44b4:	mov	x0, x20
    44b8:	bl	0 <free>
    44bc:	ldp	x19, x20, [sp, #16]
    44c0:	ldp	x21, x22, [sp, #32]
    44c4:	ldp	x23, x24, [sp, #48]
    44c8:	ldp	x29, x30, [sp], #144
    44cc:	ret
    44d0:	mov	w1, w28
    44d4:	add	x0, x21, #0x80
    44d8:	bl	0 <gomp_team_barrier_wake>
    44dc:	b	42d0 <GOMP_taskgroup_end+0xc8>
    44e0:	mov	x0, x19
    44e4:	bl	0 <gomp_mutex_unlock_slow>
    44e8:	cbz	w28, 42d0 <GOMP_taskgroup_end+0xc8>
    44ec:	b	44d0 <GOMP_taskgroup_end+0x2c8>
    44f0:	cmp	x0, x6
    44f4:	b.eq	481c <GOMP_taskgroup_end+0x614>  // b.none
    44f8:	str	x0, [x27, #24]
    44fc:	b	4388 <GOMP_taskgroup_end+0x180>
    4500:	sub	x26, x3, #0x80
    4504:	mov	w0, #0x1                   	// #1
    4508:	strb	w0, [sp, #143]
    450c:	ldr	w0, [x26, #200]
    4510:	cmp	w0, #0x2
    4514:	b.ne	42b0 <GOMP_taskgroup_end+0xa8>  // b.any
    4518:	ldr	x1, [x26]
    451c:	mov	x2, x21
    4520:	mov	x0, x26
    4524:	bl	508 <gomp_task_run_pre>
    4528:	tst	w0, #0xff
    452c:	b.eq	42bc <GOMP_taskgroup_end+0xb4>  // b.none
    4530:	cbz	x27, 4324 <GOMP_taskgroup_end+0x11c>
    4534:	ldr	x0, [x27, #56]
    4538:	cbnz	x0, 4884 <GOMP_taskgroup_end+0x67c>
    453c:	mov	x0, x27
    4540:	bl	0 <free>
    4544:	b	4324 <GOMP_taskgroup_end+0x11c>
    4548:	mov	w0, #0x1                   	// #1
    454c:	sub	x26, x3, #0x70
    4550:	strb	w0, [sp, #143]
    4554:	b	450c <GOMP_taskgroup_end+0x304>
    4558:	ldr	x0, [x26, #48]
    455c:	mov	x4, #0x0                   	// #0
    4560:	cbnz	x0, 4344 <GOMP_taskgroup_end+0x13c>
    4564:	ldr	x6, [x26, #8]
    4568:	cbz	x6, 4394 <GOMP_taskgroup_end+0x18c>
    456c:	nop
    4570:	add	x27, x26, #0x8
    4574:	ldr	x7, [x6, #8]
    4578:	mov	x0, x6
    457c:	ldp	x1, x6, [x6, #24]
    4580:	mov	x2, x7
    4584:	cbz	x7, 4598 <GOMP_taskgroup_end+0x390>
    4588:	stur	xzr, [x2, #-112]
    458c:	ldr	x2, [x2]
    4590:	cmp	x7, x2
    4594:	b.ne	4588 <GOMP_taskgroup_end+0x380>  // b.any
    4598:	stp	x4, x6, [sp, #96]
    459c:	str	x1, [sp, #112]
    45a0:	bl	0 <free>
    45a4:	ldr	x1, [sp, #112]
    45a8:	mov	x0, x27
    45ac:	bl	e0 <gomp_clear_parent_in_tree>
    45b0:	ldp	x4, x6, [sp, #96]
    45b4:	cbnz	x6, 4574 <GOMP_taskgroup_end+0x36c>
    45b8:	str	xzr, [x27]
    45bc:	b	43b0 <GOMP_taskgroup_end+0x1a8>
    45c0:	ldr	w1, [x20, #52]
    45c4:	add	x0, x20, #0x34
    45c8:	tst	x1, #0x7fffffff
    45cc:	b.eq	4858 <GOMP_taskgroup_end+0x650>  // b.none
    45d0:	sub	w4, w1, #0x1
    45d4:	ldaxr	w2, [x0]
    45d8:	cmp	w2, w1
    45dc:	b.ne	45e8 <GOMP_taskgroup_end+0x3e0>  // b.any
    45e0:	stxr	w3, w4, [x0]
    45e4:	cmp	w3, #0x0
    45e8:	mov	w1, w2
    45ec:	b.ne	45c8 <GOMP_taskgroup_end+0x3c0>  // b.any
    45f0:	mov	w0, #0x1                   	// #1
    45f4:	ldaxr	w1, [x19]
    45f8:	cbnz	w1, 4604 <GOMP_taskgroup_end+0x3fc>
    45fc:	stxr	w2, w0, [x19]
    4600:	cbnz	w2, 45f4 <GOMP_taskgroup_end+0x3ec>
    4604:	cmp	w1, #0x0
    4608:	mov	w28, #0x0                   	// #0
    460c:	b.eq	443c <GOMP_taskgroup_end+0x234>  // b.none
    4610:	mov	x0, x19
    4614:	mov	x27, x26
    4618:	bl	0 <gomp_mutex_lock_slow>
    461c:	b	4440 <GOMP_taskgroup_end+0x238>
    4620:	cmp	x0, x6
    4624:	b.eq	4834 <GOMP_taskgroup_end+0x62c>  // b.none
    4628:	str	x0, [x7, #8]
    462c:	ldr	x0, [x27, #56]
    4630:	stp	xzr, xzr, [x26, #128]
    4634:	cmp	x0, #0x1
    4638:	b.hi	43f4 <GOMP_taskgroup_end+0x1ec>  // b.pmore
    463c:	add	x0, x27, #0x38
    4640:	stlr	xzr, [x0]
    4644:	b	43fc <GOMP_taskgroup_end+0x1f4>
    4648:	bl	0 <gomp_target_task_fn>
    464c:	tst	w0, #0xff
    4650:	b.eq	42fc <GOMP_taskgroup_end+0xf4>  // b.none
    4654:	mov	w0, #0x1                   	// #1
    4658:	str	x22, [x27, #80]
    465c:	ldaxr	w1, [x19]
    4660:	cbnz	w1, 466c <GOMP_taskgroup_end+0x464>
    4664:	stxr	w2, w0, [x19]
    4668:	cbnz	w2, 465c <GOMP_taskgroup_end+0x454>
    466c:	cmp	w1, #0x0
    4670:	b.ne	488c <GOMP_taskgroup_end+0x684>  // b.any
    4674:	ldr	x0, [x26, #192]
    4678:	mov	w1, #0x4                   	// #4
    467c:	ldr	w2, [x0, #44]
    4680:	str	w1, [x26, #200]
    4684:	cmp	w2, #0x5
    4688:	b.eq	4868 <GOMP_taskgroup_end+0x660>  // b.none
    468c:	mov	x26, #0x0                   	// #0
    4690:	mov	w28, #0x0                   	// #0
    4694:	mov	x27, x26
    4698:	str	w1, [x0, #44]
    469c:	b	4440 <GOMP_taskgroup_end+0x238>
    46a0:	ldr	w1, [x27, #52]
    46a4:	add	x0, x27, #0x34
    46a8:	strb	wzr, [x27, #48]
    46ac:	add	w2, w1, #0x1
    46b0:	and	w2, w2, #0x7fffffff
    46b4:	ldxr	w6, [x0]
    46b8:	cmp	w6, w1
    46bc:	b.ne	46c8 <GOMP_taskgroup_end+0x4c0>  // b.any
    46c0:	stlxr	w3, w2, [x0]
    46c4:	cmp	w3, #0x0
    46c8:	mov	w1, w6
    46cc:	b.ne	46ac <GOMP_taskgroup_end+0x4a4>  // b.any
    46d0:	tbz	w6, #31, 4408 <GOMP_taskgroup_end+0x200>
    46d4:	str	x4, [sp, #96]
    46d8:	bl	0 <gomp_sem_post_slow>
    46dc:	ldr	x4, [sp, #96]
    46e0:	b	4408 <GOMP_taskgroup_end+0x200>
    46e4:	mov	x4, #0x0                   	// #0
    46e8:	ldr	x27, [x26]
    46ec:	b	4358 <GOMP_taskgroup_end+0x150>
    46f0:	bl	0 <free>
    46f4:	b	42dc <GOMP_taskgroup_end+0xd4>
    46f8:	ldr	x1, [x27, #64]
    46fc:	ldr	x0, [x1, #8]
    4700:	sub	x0, x0, #0x1
    4704:	str	x0, [x1, #8]
    4708:	cbnz	x0, 4364 <GOMP_taskgroup_end+0x15c>
    470c:	ldrb	w0, [x1, #1]
    4710:	cbz	w0, 4364 <GOMP_taskgroup_end+0x15c>
    4714:	ldr	w2, [x1, #16]
    4718:	add	x0, x1, #0x10
    471c:	strb	wzr, [x1, #1]
    4720:	add	w1, w2, #0x1
    4724:	and	w1, w1, #0x7fffffff
    4728:	ldxr	w6, [x0]
    472c:	cmp	w6, w2
    4730:	b.ne	473c <GOMP_taskgroup_end+0x534>  // b.any
    4734:	stlxr	w3, w1, [x0]
    4738:	cmp	w3, #0x0
    473c:	mov	w2, w6
    4740:	b.ne	4720 <GOMP_taskgroup_end+0x518>  // b.any
    4744:	tbz	w6, #31, 4364 <GOMP_taskgroup_end+0x15c>
    4748:	str	x4, [sp, #96]
    474c:	bl	0 <gomp_sem_post_slow>
    4750:	ldr	x4, [sp, #96]
    4754:	b	4364 <GOMP_taskgroup_end+0x15c>
    4758:	add	x1, x27, #0x8
    475c:	mov	w0, #0x1                   	// #1
    4760:	stp	x1, x4, [sp, #96]
    4764:	bl	0 <priority_tree_remove>
    4768:	ldr	x0, [x27, #8]
    476c:	ldp	x1, x4, [sp, #96]
    4770:	cbnz	x0, 4388 <GOMP_taskgroup_end+0x180>
    4774:	stlr	xzr, [x1]
    4778:	ldr	x0, [x27, #64]
    477c:	cbz	x0, 4388 <GOMP_taskgroup_end+0x180>
    4780:	ldrb	w1, [x0]
    4784:	cbz	w1, 4388 <GOMP_taskgroup_end+0x180>
    4788:	ldr	w1, [x0, #16]
    478c:	strb	wzr, [x0], #16
    4790:	add	w2, w1, #0x1
    4794:	and	w2, w2, #0x7fffffff
    4798:	ldxr	w6, [x0]
    479c:	cmp	w6, w1
    47a0:	b.ne	47ac <GOMP_taskgroup_end+0x5a4>  // b.any
    47a4:	stlxr	w3, w2, [x0]
    47a8:	cmp	w3, #0x0
    47ac:	mov	w1, w6
    47b0:	b.ne	4790 <GOMP_taskgroup_end+0x588>  // b.any
    47b4:	tbz	w6, #31, 4388 <GOMP_taskgroup_end+0x180>
    47b8:	str	x4, [sp, #96]
    47bc:	bl	0 <gomp_sem_post_slow>
    47c0:	ldr	x4, [sp, #96]
    47c4:	b	4388 <GOMP_taskgroup_end+0x180>
    47c8:	mov	w0, #0x2                   	// #2
    47cc:	add	x1, x27, #0x8
    47d0:	str	x4, [sp, #96]
    47d4:	bl	0 <priority_tree_remove>
    47d8:	ldr	x0, [x27, #8]
    47dc:	ldr	x4, [sp, #96]
    47e0:	cmp	x0, #0x0
    47e4:	cset	w8, eq  // eq = none
    47e8:	b	43e4 <GOMP_taskgroup_end+0x1dc>
    47ec:	ldr	x3, [sp, #120]
    47f0:	add	x4, sp, #0x8f
    47f4:	add	x1, x22, #0x8
    47f8:	mov	w2, #0x0                   	// #0
    47fc:	mov	w0, #0x1                   	// #1
    4800:	bl	0 <priority_tree_next_task>
    4804:	mov	x26, x0
    4808:	cbnz	x0, 450c <GOMP_taskgroup_end+0x304>
    480c:	ldr	x0, [x22, #8]
    4810:	ldr	x3, [x0, #8]
    4814:	sub	x26, x3, #0x70
    4818:	b	450c <GOMP_taskgroup_end+0x304>
    481c:	add	x0, x27, #0x18
    4820:	stlr	xzr, [x0]
    4824:	b	4778 <GOMP_taskgroup_end+0x570>
    4828:	ldp	x25, x26, [sp, #64]
    482c:	ldp	x27, x28, [sp, #80]
    4830:	b	44ac <GOMP_taskgroup_end+0x2a4>
    4834:	mov	w8, #0x1                   	// #1
    4838:	str	xzr, [x7, #8]
    483c:	b	43e4 <GOMP_taskgroup_end+0x1dc>
    4840:	ldr	w0, [x0, #44]
    4844:	cbnz	w0, 4240 <GOMP_taskgroup_end+0x38>
    4848:	add	x0, x21, #0x80
    484c:	bl	0 <gomp_team_barrier_wait>
    4850:	ldp	x19, x20, [sp, #16]
    4854:	b	44c0 <GOMP_taskgroup_end+0x2b8>
    4858:	bl	0 <gomp_sem_wait_slow>
    485c:	b	45f0 <GOMP_taskgroup_end+0x3e8>
    4860:	bl	0 <free>
    4864:	b	449c <GOMP_taskgroup_end+0x294>
    4868:	mov	x1, x26
    486c:	mov	x0, x21
    4870:	mov	x26, #0x0                   	// #0
    4874:	mov	w28, #0x0                   	// #0
    4878:	mov	x27, x26
    487c:	bl	15a8 <gomp_target_task_completion>
    4880:	b	4440 <GOMP_taskgroup_end+0x238>
    4884:	bl	0 <free>
    4888:	b	453c <GOMP_taskgroup_end+0x334>
    488c:	mov	x0, x19
    4890:	bl	0 <gomp_mutex_lock_slow>
    4894:	b	4674 <GOMP_taskgroup_end+0x46c>
    4898:	mov	x0, x19
    489c:	bl	0 <gomp_mutex_lock_slow>
    48a0:	b	4274 <GOMP_taskgroup_end+0x6c>
    48a4:	mov	x0, x19
    48a8:	bl	0 <gomp_mutex_lock_slow>
    48ac:	b	4324 <GOMP_taskgroup_end+0x11c>

00000000000048b0 <GOMP_taskgroup_reduction_register>:
    48b0:	stp	x29, x30, [sp, #-112]!
    48b4:	mov	x29, sp
    48b8:	stp	x21, x22, [sp, #32]
    48bc:	adrp	x21, 0 <gomp_tls_data>
    48c0:	ldr	x21, [x21]
    48c4:	stp	x19, x20, [sp, #16]
    48c8:	mrs	x20, tpidr_el0
    48cc:	add	x19, x20, x21
    48d0:	stp	x23, x24, [sp, #48]
    48d4:	mov	x24, x0
    48d8:	ldr	x0, [x19, #16]
    48dc:	stp	x25, x26, [sp, #64]
    48e0:	str	x27, [sp, #80]
    48e4:	cbz	x0, 4ad0 <GOMP_taskgroup_reduction_register+0x220>
    48e8:	ldr	x25, [x19, #80]
    48ec:	mov	x19, x24
    48f0:	ldr	x1, [x25, #40]
    48f4:	mov	x26, #0x0                   	// #0
    48f8:	ldr	w23, [x0]
    48fc:	ldr	x21, [x1, #40]
    4900:	b	4908 <GOMP_taskgroup_reduction_register+0x58>
    4904:	mov	x19, x0
    4908:	ldp	x20, x0, [x19, #8]
    490c:	mul	x20, x23, x20
    4910:	mov	x1, x20
    4914:	bl	0 <gomp_aligned_alloc>
    4918:	mov	x2, x20
    491c:	mov	x22, x0
    4920:	mov	w1, #0x0                   	// #0
    4924:	bl	0 <memset>
    4928:	ldr	x0, [x19, #32]
    492c:	add	x20, x20, x22
    4930:	ldr	x1, [x19]
    4934:	str	x22, [x19, #16]
    4938:	stp	xzr, x20, [x19, #40]
    493c:	add	x26, x26, x1
    4940:	cbnz	x0, 4904 <GOMP_taskgroup_reduction_register+0x54>
    4944:	str	x21, [x19, #32]
    4948:	mov	x23, x21
    494c:	cbz	x21, 495c <GOMP_taskgroup_reduction_register+0xac>
    4950:	ldr	x0, [x21, #40]
    4954:	mov	x21, #0x0                   	// #0
    4958:	cbnz	x0, 4abc <GOMP_taskgroup_reduction_register+0x20c>
    495c:	adrp	x3, 0 <htab_find>
    4960:	mov	w19, #0x1e                  	// #30
    4964:	add	x3, x3, #0x0
    4968:	mov	w0, #0x0                   	// #0
    496c:	b	498c <GOMP_taskgroup_reduction_register+0xdc>
    4970:	sub	w1, w19, w0
    4974:	add	w1, w0, w1, lsr #1
    4978:	ubfiz	x2, x1, #4, #32
    497c:	ldr	w2, [x3, x2]
    4980:	cmp	x26, x2
    4984:	b.hi	4ab4 <GOMP_taskgroup_reduction_register+0x204>  // b.pmore
    4988:	mov	w19, w1
    498c:	cmp	w19, w0
    4990:	b.ne	4970 <GOMP_taskgroup_reduction_register+0xc0>  // b.any
    4994:	ubfiz	x0, x19, #4, #32
    4998:	ldr	w27, [x3, x0]
    499c:	cmp	x26, x27
    49a0:	b.hi	4b24 <GOMP_taskgroup_reduction_register+0x274>  // b.pmore
    49a4:	add	x20, x27, #0x4
    49a8:	lsl	x20, x20, #3
    49ac:	mov	x0, x20
    49b0:	bl	0 <gomp_malloc>
    49b4:	mov	x22, x0
    49b8:	sub	x2, x20, #0x20
    49bc:	add	x0, x0, #0x20
    49c0:	mov	w1, #0x0                   	// #0
    49c4:	stp	x27, xzr, [x22]
    49c8:	str	xzr, [x22, #16]
    49cc:	str	w19, [x22, #24]
    49d0:	bl	0 <memset>
    49d4:	str	x22, [sp, #104]
    49d8:	cbz	x21, 4a30 <GOMP_taskgroup_reduction_register+0x180>
    49dc:	mov	x19, x21
    49e0:	ldp	x1, x2, [x21, #8]
    49e4:	ldr	x0, [x19], #32
    49e8:	add	x21, x19, x0, lsl #3
    49ec:	sub	x0, x1, x2
    49f0:	str	x0, [x22, #8]
    49f4:	b	4a04 <GOMP_taskgroup_reduction_register+0x154>
    49f8:	add	x19, x19, #0x8
    49fc:	cmp	x21, x19
    4a00:	b.ls	4a30 <GOMP_taskgroup_reduction_register+0x180>  // b.plast
    4a04:	ldr	x20, [x19]
    4a08:	cmp	x20, #0x1
    4a0c:	b.ls	49f8 <GOMP_taskgroup_reduction_register+0x148>  // b.plast
    4a10:	ldr	x1, [x20]
    4a14:	mov	x0, x22
    4a18:	add	x19, x19, #0x8
    4a1c:	eor	x1, x1, x1, lsr #32
    4a20:	bl	148 <find_empty_slot_for_expand>
    4a24:	str	x20, [x0]
    4a28:	cmp	x21, x19
    4a2c:	b.hi	4a04 <GOMP_taskgroup_reduction_register+0x154>  // b.pmore
    4a30:	mov	x22, x24
    4a34:	nop
    4a38:	ldr	x0, [x22]
    4a3c:	add	x20, x22, #0x38
    4a40:	mov	x21, #0x0                   	// #0
    4a44:	cbz	x0, 4a74 <GOMP_taskgroup_reduction_register+0x1c4>
    4a48:	str	x22, [x20, #16]
    4a4c:	mov	x19, x20
    4a50:	add	x0, sp, #0x68
    4a54:	add	x21, x21, #0x1
    4a58:	mov	x1, x19
    4a5c:	bl	e58 <htab_find_slot.constprop.0>
    4a60:	ldr	x1, [x22]
    4a64:	str	x19, [x0]
    4a68:	add	x20, x20, #0x18
    4a6c:	cmp	x21, x1
    4a70:	b.cc	4a48 <GOMP_taskgroup_reduction_register+0x198>  // b.lo, b.ul, b.last
    4a74:	ldr	x0, [x22, #32]
    4a78:	cmp	x23, x0
    4a7c:	b.eq	4a88 <GOMP_taskgroup_reduction_register+0x1d8>  // b.none
    4a80:	mov	x22, x0
    4a84:	b	4a38 <GOMP_taskgroup_reduction_register+0x188>
    4a88:	ldr	x0, [x25, #40]
    4a8c:	ldr	x1, [sp, #104]
    4a90:	ldp	x19, x20, [sp, #16]
    4a94:	ldp	x25, x26, [sp, #64]
    4a98:	ldr	x27, [sp, #80]
    4a9c:	str	x1, [x22, #40]
    4aa0:	ldp	x21, x22, [sp, #32]
    4aa4:	str	x24, [x0, #40]
    4aa8:	ldp	x23, x24, [sp, #48]
    4aac:	ldp	x29, x30, [sp], #112
    4ab0:	ret
    4ab4:	add	w0, w1, #0x1
    4ab8:	b	498c <GOMP_taskgroup_reduction_register+0xdc>
    4abc:	mov	x21, x0
    4ac0:	ldp	x0, x1, [x0, #8]
    4ac4:	sub	x0, x0, x1
    4ac8:	add	x26, x26, x0
    4acc:	b	495c <GOMP_taskgroup_reduction_register+0xac>
    4ad0:	bl	228 <gomp_create_artificial_team>
    4ad4:	ldr	x0, [x19, #16]
    4ad8:	ldr	x25, [x19, #80]
    4adc:	cbz	x0, 48ec <GOMP_taskgroup_reduction_register+0x3c>
    4ae0:	ldr	x19, [x25, #40]
    4ae4:	mov	x0, #0x40                  	// #64
    4ae8:	bl	0 <gomp_malloc>
    4aec:	stp	x19, xzr, [x0]
    4af0:	stp	xzr, xzr, [x0, #24]
    4af4:	cbz	x19, 4afc <GOMP_taskgroup_reduction_register+0x24c>
    4af8:	ldr	x19, [x19, #40]
    4afc:	add	x20, x20, x21
    4b00:	str	x19, [x0, #40]
    4b04:	strh	wzr, [x0, #48]
    4b08:	strb	wzr, [x0, #50]
    4b0c:	str	wzr, [x0, #52]
    4b10:	str	xzr, [x0, #56]
    4b14:	str	x0, [x25, #40]
    4b18:	ldr	x0, [x20, #16]
    4b1c:	ldr	x25, [x20, #80]
    4b20:	b	48ec <GOMP_taskgroup_reduction_register+0x3c>
    4b24:	bl	0 <abort>

0000000000004b28 <GOMP_taskloop>:
    4b28:	adrp	x11, 0 <gomp_tls_data>
    4b2c:	ldr	x11, [x11]
    4b30:	mrs	x10, tpidr_el0
    4b34:	stp	x29, x30, [sp, #-416]!
    4b38:	add	x8, x10, x11
    4b3c:	mov	x29, sp
    4b40:	stp	x21, x22, [sp, #32]
    4b44:	mov	w22, w5
    4b48:	ldr	x21, [x8, #16]
    4b4c:	stp	x19, x20, [sp, #16]
    4b50:	mov	w19, w7
    4b54:	stp	x23, x24, [sp, #48]
    4b58:	stp	x25, x26, [sp, #64]
    4b5c:	stp	x27, x28, [sp, #80]
    4b60:	mov	x27, x1
    4b64:	mov	x28, x2
    4b68:	stp	x3, x0, [x29, #192]
    4b6c:	ldr	x26, [x29, #416]
    4b70:	ldr	x3, [x29, #424]
    4b74:	cbz	x21, 4b80 <GOMP_taskloop+0x58>
    4b78:	ldr	w0, [x21, #132]
    4b7c:	tbnz	w0, #2, 4dbc <GOMP_taskloop+0x294>
    4b80:	ldr	x0, [x29, #432]
    4b84:	cmp	x0, #0x0
    4b88:	b.le	4ddc <GOMP_taskloop+0x2b4>
    4b8c:	cmp	x26, x3
    4b90:	b.ge	4dbc <GOMP_taskloop+0x294>  // b.tcont
    4b94:	sub	x20, x0, #0x1
    4b98:	sub	x24, x3, x26
    4b9c:	add	x20, x24, x20
    4ba0:	sdiv	x20, x20, x0
    4ba4:	tbz	w22, #9, 4df8 <GOMP_taskloop+0x2d0>
    4ba8:	udiv	x23, x20, x6
    4bac:	cmp	x23, #0x1
    4bb0:	b.ls	507c <GOMP_taskloop+0x554>  // b.plast
    4bb4:	mov	x1, x0
    4bb8:	cmp	x6, x23
    4bbc:	b.hi	50f0 <GOMP_taskloop+0x5c8>  // b.pmore
    4bc0:	mul	x0, x6, x23
    4bc4:	mul	x24, x6, x1
    4bc8:	cmp	x20, x0
    4bcc:	b.eq	4be0 <GOMP_taskloop+0xb8>  // b.none
    4bd0:	sub	x20, x20, x0
    4bd4:	add	x24, x24, x1
    4bd8:	sub	x20, x20, #0x1
    4bdc:	nop
    4be0:	and	w0, w22, #0x800
    4be4:	str	w0, [x29, #180]
    4be8:	tbz	w22, #11, 4ff4 <GOMP_taskloop+0x4cc>
    4bec:	adrp	x0, 0 <gomp_cancel_var>
    4bf0:	ldrb	w0, [x0]
    4bf4:	cbnz	w0, 57f0 <GOMP_taskloop+0xcc8>
    4bf8:	adrp	x0, 0 <gomp_max_task_priority_var>
    4bfc:	ldr	w0, [x0]
    4c00:	cmp	w0, w19
    4c04:	csel	w19, w0, w19, le
    4c08:	tst	x22, #0x400
    4c0c:	ccmp	x21, #0x0, #0x4, ne  // ne = any
    4c10:	b.ne	4e30 <GOMP_taskloop+0x308>  // b.any
    4c14:	cbnz	x28, 54d8 <GOMP_taskloop+0x9b0>
    4c18:	cbz	x23, 4db0 <GOMP_taskloop+0x288>
    4c1c:	add	x10, x10, x11
    4c20:	and	w0, w22, #0x2
    4c24:	adrp	x1, 0 <gomp_global_icv>
    4c28:	mov	x25, x10
    4c2c:	add	x1, x1, #0x0
    4c30:	mov	x22, #0x0                   	// #0
    4c34:	movi	v0.4s, #0x0
    4c38:	str	w0, [x29, #184]
    4c3c:	str	x1, [x29, #192]
    4c40:	ldr	x0, [x10, #80]
    4c44:	b	4c68 <GOMP_taskloop+0x140>
    4c48:	ldr	x28, [x25, #80]
    4c4c:	ldr	x0, [x28, #56]
    4c50:	cbnz	x0, 4d90 <GOMP_taskloop+0x268>
    4c54:	ldr	x0, [x28]
    4c58:	str	x0, [x25, #80]
    4c5c:	add	x22, x22, #0x1
    4c60:	cmp	x23, x22
    4c64:	b.eq	4db0 <GOMP_taskloop+0x288>  // b.none
    4c68:	ldr	x2, [x29, #192]
    4c6c:	cmp	x0, #0x0
    4c70:	add	x1, x0, #0x90
    4c74:	csel	x1, x2, x1, eq  // eq = none
    4c78:	ldp	x2, x3, [x1]
    4c7c:	stp	x2, x3, [x29, #352]
    4c80:	ldp	x2, x3, [x1, #16]
    4c84:	stp	x2, x3, [x29, #368]
    4c88:	ldr	x1, [x1, #32]
    4c8c:	str	x1, [x29, #384]
    4c90:	add	x1, x29, #0x200
    4c94:	mov	x2, #0x1                   	// #1
    4c98:	stp	x0, xzr, [x29, #208]
    4c9c:	str	xzr, [x29, #280]
    4ca0:	str	w19, [x29, #296]
    4ca4:	str	x2, [x29, #408]
    4ca8:	stur	q0, [x29, #232]
    4cac:	stur	q0, [x29, #248]
    4cb0:	stur	q0, [x1, #-248]
    4cb4:	cbz	x0, 5084 <GOMP_taskloop+0x55c>
    4cb8:	ldrb	w1, [x0, #205]
    4cbc:	cbnz	w1, 4cc8 <GOMP_taskloop+0x1a0>
    4cc0:	ldr	w1, [x29, #184]
    4cc4:	cbz	w1, 4cd0 <GOMP_taskloop+0x1a8>
    4cc8:	mov	w1, #0x1                   	// #1
    4ccc:	strb	w1, [x29, #413]
    4cd0:	ldrb	w1, [x0, #204]
    4cd4:	ldr	x0, [x0, #40]
    4cd8:	str	x0, [x29, #248]
    4cdc:	strb	w1, [x29, #412]
    4ce0:	add	x0, x29, #0xd0
    4ce4:	str	x0, [x25, #80]
    4ce8:	ldr	x1, [x29, #200]
    4cec:	cmp	x20, x22
    4cf0:	ldr	x0, [x29, #432]
    4cf4:	str	x26, [x27]
    4cf8:	add	x26, x26, x24
    4cfc:	str	x26, [x27, #8]
    4d00:	sub	x0, x24, x0
    4d04:	csel	x24, x0, x24, eq  // eq = none
    4d08:	mov	x0, x27
    4d0c:	blr	x1
    4d10:	ldr	x0, [x29, #216]
    4d14:	movi	v0.4s, #0x0
    4d18:	cbnz	x0, 4d24 <GOMP_taskloop+0x1fc>
    4d1c:	ldr	x0, [x29, #232]
    4d20:	cbz	x0, 4c48 <GOMP_taskloop+0x120>
    4d24:	add	x3, x21, #0x500
    4d28:	mov	w0, #0x1                   	// #1
    4d2c:	ldaxr	w1, [x3]
    4d30:	cbnz	w1, 4d3c <GOMP_taskloop+0x214>
    4d34:	stxr	w2, w0, [x3]
    4d38:	cbnz	w2, 4d2c <GOMP_taskloop+0x204>
    4d3c:	cmp	w1, #0x0
    4d40:	b.ne	597c <GOMP_taskloop+0xe54>  // b.any
    4d44:	ldr	x4, [x29, #216]
    4d48:	cbnz	x4, 5098 <GOMP_taskloop+0x570>
    4d4c:	ldr	x1, [x29, #232]
    4d50:	mov	x0, x1
    4d54:	cbz	x1, 4d68 <GOMP_taskloop+0x240>
    4d58:	stur	xzr, [x0, #-112]
    4d5c:	ldr	x0, [x0]
    4d60:	cmp	x1, x0
    4d64:	b.ne	4d58 <GOMP_taskloop+0x230>  // b.any
    4d68:	ldxr	w0, [x3]
    4d6c:	stlxr	w1, wzr, [x3]
    4d70:	cbnz	w1, 4d68 <GOMP_taskloop+0x240>
    4d74:	tbz	w0, #31, 4c48 <GOMP_taskloop+0x120>
    4d78:	mov	x0, x3
    4d7c:	bl	0 <gomp_mutex_unlock_slow>
    4d80:	ldr	x28, [x25, #80]
    4d84:	movi	v0.4s, #0x0
    4d88:	ldr	x0, [x28, #56]
    4d8c:	cbz	x0, 4c54 <GOMP_taskloop+0x12c>
    4d90:	bl	0 <free>
    4d94:	add	x22, x22, #0x1
    4d98:	ldr	x0, [x28]
    4d9c:	str	x0, [x25, #80]
    4da0:	movi	v0.4s, #0x0
    4da4:	cmp	x23, x22
    4da8:	b.ne	4c68 <GOMP_taskloop+0x140>  // b.any
    4dac:	nop
    4db0:	ldr	w0, [x29, #180]
    4db4:	cbnz	w0, 4dbc <GOMP_taskloop+0x294>
    4db8:	bl	4208 <GOMP_taskgroup_end>
    4dbc:	mov	sp, x29
    4dc0:	ldp	x19, x20, [sp, #16]
    4dc4:	ldp	x21, x22, [sp, #32]
    4dc8:	ldp	x23, x24, [sp, #48]
    4dcc:	ldp	x25, x26, [sp, #64]
    4dd0:	ldp	x27, x28, [sp, #80]
    4dd4:	ldp	x29, x30, [sp], #416
    4dd8:	ret
    4ddc:	cmp	x26, x3
    4de0:	b.le	4dbc <GOMP_taskloop+0x294>
    4de4:	add	x20, x0, #0x1
    4de8:	sub	x24, x3, x26
    4dec:	add	x20, x24, x20
    4df0:	sdiv	x20, x20, x0
    4df4:	tbnz	w22, #9, 4ba8 <GOMP_taskloop+0x80>
    4df8:	cbnz	x6, 4e04 <GOMP_taskloop+0x2dc>
    4dfc:	cbz	x21, 5498 <GOMP_taskloop+0x970>
    4e00:	ldr	w6, [x21]
    4e04:	cmp	x6, x20
    4e08:	b.cs	4fe0 <GOMP_taskloop+0x4b8>  // b.hs, b.nlast
    4e0c:	udiv	x3, x20, x6
    4e10:	mov	x23, x6
    4e14:	ldr	x0, [x29, #432]
    4e18:	msub	x6, x3, x6, x20
    4e1c:	mul	x24, x3, x0
    4e20:	cbz	x6, 4be0 <GOMP_taskloop+0xb8>
    4e24:	add	x24, x24, x0
    4e28:	sub	x20, x6, #0x1
    4e2c:	b	4be0 <GOMP_taskloop+0xb8>
    4e30:	add	x0, x10, x11
    4e34:	ldr	x25, [x0, #80]
    4e38:	cbz	x25, 4e44 <GOMP_taskloop+0x31c>
    4e3c:	ldrb	w0, [x25, #205]
    4e40:	cbnz	w0, 4c14 <GOMP_taskloop+0xec>
    4e44:	ldr	w0, [x21]
    4e48:	ldr	w1, [x21, #1320]
    4e4c:	lsl	w0, w0, #6
    4e50:	add	x1, x1, x23
    4e54:	cmp	x1, x0
    4e58:	b.hi	4c14 <GOMP_taskloop+0xec>  // b.pmore
    4e5c:	lsl	x0, x23, #3
    4e60:	mov	x1, sp
    4e64:	add	x0, x0, #0xf
    4e68:	str	x1, [x29, #104]
    4e6c:	and	x0, x0, #0xfffffffffffffff0
    4e70:	sub	sp, sp, x0
    4e74:	mov	x0, sp
    4e78:	str	x0, [x29, #184]
    4e7c:	ldr	x0, [x25, #40]
    4e80:	str	x0, [x29, #168]
    4e84:	cbz	x23, 5118 <GOMP_taskloop+0x5f0>
    4e88:	ubfx	x1, x22, #1, #1
    4e8c:	str	x1, [x29, #144]
    4e90:	neg	x1, x4
    4e94:	str	x1, [x29, #136]
    4e98:	ldr	x1, [x29, #192]
    4e9c:	add	x0, x4, #0xcf
    4ea0:	str	x0, [x29, #128]
    4ea4:	mov	x22, #0x0                   	// #0
    4ea8:	add	x1, x1, x0
    4eac:	adrp	x0, 0 <gomp_global_icv>
    4eb0:	add	x0, x0, #0x0
    4eb4:	add	x10, x10, x11
    4eb8:	str	x0, [x29, #120]
    4ebc:	mov	x0, x22
    4ec0:	mov	x22, x24
    4ec4:	mov	x24, x0
    4ec8:	str	x21, [x29, #96]
    4ecc:	mov	x21, x1
    4ed0:	str	x20, [x29, #112]
    4ed4:	mov	x20, x10
    4ed8:	str	w19, [x29, #152]
    4edc:	str	x23, [x29, #160]
    4ee0:	b	4f3c <GOMP_taskloop+0x414>
    4ee4:	blr	x28
    4ee8:	mov	w0, #0x1                   	// #1
    4eec:	strb	w0, [x19, #206]
    4ef0:	ldr	x0, [x29, #112]
    4ef4:	str	x26, [x23]
    4ef8:	add	x26, x26, x22
    4efc:	str	x26, [x23, #8]
    4f00:	cmp	x24, x0
    4f04:	add	x24, x24, #0x1
    4f08:	ldr	x0, [x29, #200]
    4f0c:	stp	x0, x23, [x19, #184]
    4f10:	ldr	x0, [x29, #432]
    4f14:	str	x25, [x20, #80]
    4f18:	sub	x0, x22, x0
    4f1c:	csel	x22, x0, x22, eq  // eq = none
    4f20:	mov	w0, #0x2                   	// #2
    4f24:	str	w0, [x19, #200]
    4f28:	ldr	x0, [x29, #160]
    4f2c:	cmp	x24, x0
    4f30:	ldrb	w0, [x29, #144]
    4f34:	strb	w0, [x19, #205]
    4f38:	b.eq	510c <GOMP_taskloop+0x5e4>  // b.none
    4f3c:	mov	x0, x21
    4f40:	bl	0 <gomp_malloc>
    4f44:	mov	x19, x0
    4f48:	mov	x8, x0
    4f4c:	ldr	x0, [x29, #184]
    4f50:	mov	x1, x27
    4f54:	ldr	x2, [x20, #80]
    4f58:	str	x25, [x8], #144
    4f5c:	str	x19, [x0, x24, lsl #3]
    4f60:	ldr	x0, [x29, #120]
    4f64:	cmp	x2, #0x0
    4f68:	add	x2, x2, #0x90
    4f6c:	csel	x2, x0, x2, eq  // eq = none
    4f70:	ldr	x0, [x29, #128]
    4f74:	ldp	x6, x7, [x2]
    4f78:	stp	x6, x7, [x19, #144]
    4f7c:	add	x4, x19, x0
    4f80:	ldp	x6, x7, [x2, #16]
    4f84:	stp	x6, x7, [x8, #16]
    4f88:	ldr	x2, [x2, #32]
    4f8c:	str	x2, [x8, #32]
    4f90:	mov	x2, #0x1                   	// #1
    4f94:	str	x2, [x19, #200]
    4f98:	ldr	x0, [x29, #136]
    4f9c:	str	xzr, [x19, #8]
    4fa0:	ldr	x3, [x29, #168]
    4fa4:	str	x19, [x20, #80]
    4fa8:	ldrb	w2, [x25, #204]
    4fac:	and	x23, x4, x0
    4fb0:	stp	x3, xzr, [x19, #40]
    4fb4:	mov	x0, x23
    4fb8:	ldr	w3, [x29, #152]
    4fbc:	stp	xzr, xzr, [x19, #24]
    4fc0:	stp	xzr, xzr, [x19, #56]
    4fc4:	str	xzr, [x19, #72]
    4fc8:	str	w3, [x19, #88]
    4fcc:	strb	w2, [x19, #204]
    4fd0:	cbnz	x28, 4ee4 <GOMP_taskloop+0x3bc>
    4fd4:	ldr	x2, [x29, #192]
    4fd8:	bl	0 <memcpy>
    4fdc:	b	4ef0 <GOMP_taskloop+0x3c8>
    4fe0:	and	w0, w22, #0x800
    4fe4:	str	w0, [x29, #180]
    4fe8:	mov	x23, x20
    4fec:	ldr	x24, [x29, #432]
    4ff0:	tbnz	w22, #11, 4bec <GOMP_taskloop+0xc4>
    4ff4:	and	w0, w22, #0x1000
    4ff8:	str	w0, [x29, #180]
    4ffc:	cbz	x21, 54bc <GOMP_taskloop+0x994>
    5000:	add	x1, x10, x11
    5004:	mov	x0, #0x40                  	// #64
    5008:	stp	x4, x11, [x29, #152]
    500c:	ldr	x1, [x1, #80]
    5010:	str	x10, [x29, #168]
    5014:	str	x1, [x29, #184]
    5018:	ldr	x25, [x1, #40]
    501c:	bl	0 <gomp_malloc>
    5020:	stp	x25, xzr, [x0]
    5024:	stp	xzr, xzr, [x0, #24]
    5028:	ldp	x4, x11, [x29, #152]
    502c:	ldr	x10, [x29, #168]
    5030:	ldr	x1, [x29, #184]
    5034:	cbz	x25, 503c <GOMP_taskloop+0x514>
    5038:	ldr	x25, [x25, #40]
    503c:	str	x25, [x0, #40]
    5040:	strh	wzr, [x0, #48]
    5044:	strb	wzr, [x0, #50]
    5048:	str	wzr, [x0, #52]
    504c:	str	xzr, [x0, #56]
    5050:	str	x0, [x1, #40]
    5054:	and	w0, w22, #0x1000
    5058:	cbz	w0, 4bf8 <GOMP_taskloop+0xd0>
    505c:	ldr	x0, [x27, #16]
    5060:	stp	x11, x10, [x29, #160]
    5064:	str	wzr, [x29, #180]
    5068:	str	x4, [x29, #184]
    506c:	bl	48b0 <GOMP_taskgroup_reduction_register>
    5070:	ldp	x11, x10, [x29, #160]
    5074:	ldr	x4, [x29, #184]
    5078:	b	4bf8 <GOMP_taskloop+0xd0>
    507c:	mov	x23, #0x1                   	// #1
    5080:	b	4be0 <GOMP_taskloop+0xb8>
    5084:	ldr	w0, [x29, #184]
    5088:	cbz	w0, 4ce0 <GOMP_taskloop+0x1b8>
    508c:	mov	w0, #0x1                   	// #1
    5090:	strb	w0, [x29, #413]
    5094:	b	4ce0 <GOMP_taskloop+0x1b8>
    5098:	add	x28, x29, #0xd8
    509c:	ldr	x5, [x4, #8]
    50a0:	mov	x0, x4
    50a4:	ldp	x1, x4, [x4, #24]
    50a8:	mov	x2, x5
    50ac:	cbz	x5, 50c0 <GOMP_taskloop+0x598>
    50b0:	stur	xzr, [x2, #-112]
    50b4:	ldr	x2, [x2]
    50b8:	cmp	x5, x2
    50bc:	b.ne	50b0 <GOMP_taskloop+0x588>  // b.any
    50c0:	stp	x4, x1, [x29, #152]
    50c4:	str	x3, [x29, #168]
    50c8:	bl	0 <free>
    50cc:	ldr	x1, [x29, #160]
    50d0:	mov	x0, x28
    50d4:	bl	e0 <gomp_clear_parent_in_tree>
    50d8:	ldr	x4, [x29, #152]
    50dc:	movi	v0.4s, #0x0
    50e0:	ldr	x3, [x29, #168]
    50e4:	cbnz	x4, 509c <GOMP_taskloop+0x574>
    50e8:	str	xzr, [x29, #216]
    50ec:	b	4d68 <GOMP_taskloop+0x240>
    50f0:	udiv	x3, x20, x23
    50f4:	msub	x0, x3, x23, x20
    50f8:	mul	x24, x3, x1
    50fc:	cbz	x0, 4be0 <GOMP_taskloop+0xb8>
    5100:	add	x24, x24, x1
    5104:	sub	x20, x0, #0x1
    5108:	b	4be0 <GOMP_taskloop+0xb8>
    510c:	ldr	w19, [x29, #152]
    5110:	ldr	x21, [x29, #96]
    5114:	ldr	x23, [x29, #160]
    5118:	add	x22, x21, #0x500
    511c:	mov	w0, #0x1                   	// #1
    5120:	ldaxr	w1, [x22]
    5124:	cbnz	w1, 5130 <GOMP_taskloop+0x608>
    5128:	stxr	w2, w0, [x22]
    512c:	cbnz	w2, 5120 <GOMP_taskloop+0x5f8>
    5130:	cmp	w1, #0x0
    5134:	b.ne	5994 <GOMP_taskloop+0xe6c>  // b.any
    5138:	adrp	x0, 0 <gomp_cancel_var>
    513c:	cmp	x28, #0x0
    5140:	cset	w1, eq  // eq = none
    5144:	ldrb	w0, [x0]
    5148:	tst	w1, w0
    514c:	b.ne	58e4 <GOMP_taskloop+0xdbc>  // b.any
    5150:	ldr	x0, [x29, #168]
    5154:	cbz	x0, 5168 <GOMP_taskloop+0x640>
    5158:	ldr	x1, [x29, #168]
    515c:	ldr	x0, [x1, #56]
    5160:	add	x0, x0, x23
    5164:	str	x0, [x1, #56]
    5168:	add	x24, x25, #0x8
    516c:	mov	x26, #0x0                   	// #0
    5170:	cbz	x23, 5254 <GOMP_taskloop+0x72c>
    5174:	add	x0, x21, #0x600
    5178:	stp	x0, x22, [x29, #192]
    517c:	mov	x22, x25
    5180:	ldr	x25, [x29, #168]
    5184:	add	x20, x21, #0x508
    5188:	ldr	x1, [x29, #184]
    518c:	ldr	x0, [x22, #8]
    5190:	ldr	x27, [x1, x26, lsl #3]
    5194:	add	x28, x27, #0x70
    5198:	cbnz	x0, 544c <GOMP_taskloop+0x924>
    519c:	cmp	w19, #0x0
    51a0:	ldr	x0, [x22, #24]
    51a4:	b.gt	5418 <GOMP_taskloop+0x8f0>
    51a8:	cbz	x0, 53d0 <GOMP_taskloop+0x8a8>
    51ac:	ldr	x1, [x0, #8]
    51b0:	stp	x0, x1, [x27, #112]
    51b4:	str	x28, [x22, #24]
    51b8:	ldr	x0, [x27, #112]
    51bc:	str	x28, [x0, #8]
    51c0:	ldr	x0, [x27, #120]
    51c4:	str	x28, [x0]
    51c8:	cbz	x25, 5348 <GOMP_taskloop+0x820>
    51cc:	ldr	x0, [x25, #8]
    51d0:	add	x4, x25, #0x8
    51d4:	add	x28, x27, #0x80
    51d8:	cbnz	x0, 5308 <GOMP_taskloop+0x7e0>
    51dc:	cmp	w19, #0x0
    51e0:	ldr	x0, [x25, #24]
    51e4:	b.gt	52c8 <GOMP_taskloop+0x7a0>
    51e8:	cbz	x0, 5488 <GOMP_taskloop+0x960>
    51ec:	ldr	x1, [x0, #8]
    51f0:	stp	x0, x1, [x27, #128]
    51f4:	str	x28, [x25, #24]
    51f8:	ldr	x0, [x27, #128]
    51fc:	str	x28, [x0, #8]
    5200:	ldr	x0, [x27, #136]
    5204:	str	x28, [x0]
    5208:	ldr	x0, [x21, #1288]
    520c:	cbnz	x0, 53e0 <GOMP_taskloop+0x8b8>
    5210:	ldr	x0, [x21, #1304]
    5214:	add	x1, x27, #0x60
    5218:	cbz	x0, 53c0 <GOMP_taskloop+0x898>
    521c:	ldr	x4, [x0, #8]
    5220:	stp	x0, x4, [x27, #96]
    5224:	str	x1, [x0, #8]
    5228:	ldr	x0, [x27, #104]
    522c:	str	x1, [x0]
    5230:	movi	v1.2s, #0x1
    5234:	ldr	d0, [x21, #1320]
    5238:	add	x26, x26, #0x1
    523c:	cmp	x26, x23
    5240:	add	v0.2s, v0.2s, v1.2s
    5244:	str	d0, [x21, #1320]
    5248:	b.ne	5188 <GOMP_taskloop+0x660>  // b.any
    524c:	mov	x25, x22
    5250:	ldr	x22, [x29, #200]
    5254:	ldr	w0, [x21, #132]
    5258:	ldrb	w1, [x25, #204]
    525c:	orr	w0, w0, #0x1
    5260:	ldr	w2, [x21, #1328]
    5264:	eor	w1, w1, #0x1
    5268:	str	w0, [x21, #132]
    526c:	ldr	w0, [x21]
    5270:	add	w3, w2, w1
    5274:	cmp	w3, w0
    5278:	b.cs	52ac <GOMP_taskloop+0x784>  // b.hs, b.nlast
    527c:	sub	w0, w0, w2
    5280:	sub	w1, w0, w1
    5284:	cmp	x23, w1, sxtw
    5288:	csel	w1, w23, w1, cc  // cc = lo, ul, last
    528c:	ldxr	w0, [x22]
    5290:	stlxr	w2, wzr, [x22]
    5294:	cbnz	w2, 528c <GOMP_taskloop+0x764>
    5298:	tbnz	w0, #31, 5654 <GOMP_taskloop+0xb2c>
    529c:	cbz	w1, 52bc <GOMP_taskloop+0x794>
    52a0:	add	x0, x21, #0x80
    52a4:	bl	0 <gomp_team_barrier_wake>
    52a8:	b	52bc <GOMP_taskloop+0x794>
    52ac:	ldxr	w0, [x22]
    52b0:	stlxr	w1, wzr, [x22]
    52b4:	cbnz	w1, 52ac <GOMP_taskloop+0x784>
    52b8:	tbnz	w0, #31, 58d8 <GOMP_taskloop+0xdb0>
    52bc:	ldr	x0, [x29, #104]
    52c0:	mov	sp, x0
    52c4:	b	4db0 <GOMP_taskloop+0x288>
    52c8:	cbz	x0, 5870 <GOMP_taskloop+0xd48>
    52cc:	mov	x0, #0x28                  	// #40
    52d0:	str	x4, [x29, #168]
    52d4:	bl	0 <gomp_malloc>
    52d8:	mov	x1, x0
    52dc:	ldur	q0, [x25, #24]
    52e0:	stp	xzr, xzr, [x0, #24]
    52e4:	ldr	x4, [x29, #168]
    52e8:	str	wzr, [x1]
    52ec:	stur	q0, [x1, #8]
    52f0:	mov	x0, x4
    52f4:	bl	0 <prio_splay_tree_insert>
    52f8:	ldr	x4, [x29, #168]
    52fc:	ldr	x0, [x25, #8]
    5300:	str	xzr, [x4, #16]
    5304:	cbz	x0, 5870 <GOMP_taskloop+0xd48>
    5308:	mov	x0, x4
    530c:	add	x1, x29, #0xd0
    5310:	str	x4, [x29, #168]
    5314:	str	w19, [x29, #208]
    5318:	bl	0 <prio_splay_tree_lookup>
    531c:	ldr	x4, [x29, #168]
    5320:	cbz	x0, 5870 <GOMP_taskloop+0xd48>
    5324:	ldr	x1, [x0, #8]
    5328:	cbz	x1, 58a8 <GOMP_taskloop+0xd80>
    532c:	ldr	x4, [x1, #8]
    5330:	stp	x1, x4, [x27, #128]
    5334:	str	x28, [x0, #8]
    5338:	ldr	x0, [x27, #128]
    533c:	str	x28, [x0, #8]
    5340:	ldr	x0, [x27, #136]
    5344:	str	x28, [x0]
    5348:	ldr	x0, [x21, #1288]
    534c:	cbnz	x0, 53e0 <GOMP_taskloop+0x8b8>
    5350:	cmp	w19, #0x0
    5354:	ldr	x0, [x20, #16]
    5358:	b.le	5214 <GOMP_taskloop+0x6ec>
    535c:	cbz	x0, 5394 <GOMP_taskloop+0x86c>
    5360:	mov	x0, #0x28                  	// #40
    5364:	bl	0 <gomp_malloc>
    5368:	ldr	x2, [x29, #192]
    536c:	mov	x1, x0
    5370:	mov	x0, x20
    5374:	ldur	q0, [x2, #-232]
    5378:	str	wzr, [x1]
    537c:	stp	xzr, xzr, [x1, #24]
    5380:	stur	q0, [x1, #8]
    5384:	bl	0 <prio_splay_tree_insert>
    5388:	ldr	x0, [x20]
    538c:	str	xzr, [x20, #16]
    5390:	cbnz	x0, 53e0 <GOMP_taskloop+0x8b8>
    5394:	mov	x0, #0x28                  	// #40
    5398:	bl	0 <gomp_malloc>
    539c:	mov	x28, x0
    53a0:	mov	x0, x20
    53a4:	mov	x1, x28
    53a8:	str	w19, [x28]
    53ac:	stp	xzr, xzr, [x28, #8]
    53b0:	stp	xzr, xzr, [x28, #24]
    53b4:	bl	0 <prio_splay_tree_insert>
    53b8:	mov	x0, x28
    53bc:	b	53f4 <GOMP_taskloop+0x8cc>
    53c0:	dup	v0.2d, x1
    53c4:	str	q0, [x27, #96]
    53c8:	str	x1, [x21, #1304]
    53cc:	b	5230 <GOMP_taskloop+0x708>
    53d0:	dup	v0.2d, x28
    53d4:	str	q0, [x27, #112]
    53d8:	str	x28, [x22, #24]
    53dc:	b	51c8 <GOMP_taskloop+0x6a0>
    53e0:	add	x1, x29, #0xd0
    53e4:	mov	x0, x20
    53e8:	str	w19, [x29, #208]
    53ec:	bl	0 <prio_splay_tree_lookup>
    53f0:	cbz	x0, 5394 <GOMP_taskloop+0x86c>
    53f4:	ldr	x1, [x0, #8]
    53f8:	add	x4, x27, #0x60
    53fc:	cbz	x1, 5854 <GOMP_taskloop+0xd2c>
    5400:	ldr	x0, [x1, #8]
    5404:	stp	x1, x0, [x27, #96]
    5408:	str	x4, [x1, #8]
    540c:	ldr	x0, [x27, #104]
    5410:	str	x4, [x0]
    5414:	b	5230 <GOMP_taskloop+0x708>
    5418:	cbz	x0, 57c0 <GOMP_taskloop+0xc98>
    541c:	mov	x0, #0x28                  	// #40
    5420:	bl	0 <gomp_malloc>
    5424:	mov	x1, x0
    5428:	mov	x0, x24
    542c:	ldur	q0, [x22, #24]
    5430:	str	wzr, [x1]
    5434:	stp	xzr, xzr, [x1, #24]
    5438:	stur	q0, [x1, #8]
    543c:	bl	0 <prio_splay_tree_insert>
    5440:	ldr	x0, [x24]
    5444:	str	xzr, [x24, #16]
    5448:	cbz	x0, 57c0 <GOMP_taskloop+0xc98>
    544c:	add	x1, x29, #0xd0
    5450:	mov	x0, x24
    5454:	str	w19, [x29, #208]
    5458:	bl	0 <prio_splay_tree_lookup>
    545c:	cbz	x0, 57c0 <GOMP_taskloop+0xc98>
    5460:	ldr	x1, [x0, #8]
    5464:	cbz	x1, 5844 <GOMP_taskloop+0xd1c>
    5468:	ldr	x4, [x1, #8]
    546c:	stp	x1, x4, [x27, #112]
    5470:	str	x28, [x0, #8]
    5474:	ldr	x0, [x27, #112]
    5478:	str	x28, [x0, #8]
    547c:	ldr	x0, [x27, #120]
    5480:	str	x28, [x0]
    5484:	b	51c8 <GOMP_taskloop+0x6a0>
    5488:	dup	v0.2d, x28
    548c:	str	q0, [x27, #128]
    5490:	str	x28, [x25, #24]
    5494:	b	5208 <GOMP_taskloop+0x6e0>
    5498:	cmp	x20, #0x1
    549c:	b.hi	5864 <GOMP_taskloop+0xd3c>  // b.pmore
    54a0:	mov	x24, x0
    54a4:	mov	x23, x20
    54a8:	and	w0, w22, #0x800
    54ac:	str	w0, [x29, #180]
    54b0:	tbnz	w22, #11, 4bec <GOMP_taskloop+0xc4>
    54b4:	and	w0, w22, #0x1000
    54b8:	str	w0, [x29, #180]
    54bc:	ldr	w0, [x29, #180]
    54c0:	cbnz	w0, 505c <GOMP_taskloop+0x534>
    54c4:	adrp	x0, 0 <gomp_max_task_priority_var>
    54c8:	ldr	w0, [x0]
    54cc:	cmp	w0, w19
    54d0:	csel	w19, w0, w19, le
    54d4:	b	4c14 <GOMP_taskloop+0xec>
    54d8:	ldr	x0, [x29, #192]
    54dc:	neg	x2, x4
    54e0:	sub	x3, x4, #0x1
    54e4:	add	x12, x10, x11
    54e8:	add	x0, x0, x4
    54ec:	mov	x4, sp
    54f0:	sub	x0, x0, #0x1
    54f4:	str	x4, [x29, #160]
    54f8:	and	x1, x0, x2
    54fc:	add	x0, x23, x23, lsl #1
    5500:	str	x1, [x29, #192]
    5504:	add	x0, x23, x0, lsl #2
    5508:	madd	x1, x1, x23, x3
    550c:	sub	x4, x4, x0, lsl #4
    5510:	str	x4, [x29, #168]
    5514:	add	x1, x1, #0xf
    5518:	mov	sp, x4
    551c:	and	x1, x1, #0xfffffffffffffff0
    5520:	lsl	x0, x0, #4
    5524:	sub	sp, sp, x1
    5528:	add	x1, sp, x3
    552c:	and	x4, x1, x2
    5530:	ldr	x1, [x12, #80]
    5534:	mov	x3, x1
    5538:	cbz	x23, 5648 <GOMP_taskloop+0xb20>
    553c:	ldr	x1, [x29, #168]
    5540:	and	w2, w22, #0x2
    5544:	mov	x22, x3
    5548:	stp	x11, x10, [x29, #104]
    554c:	add	x5, x0, x1
    5550:	mov	x25, x5
    5554:	adrp	x0, 0 <gomp_global_icv>
    5558:	add	x0, x0, #0x0
    555c:	stp	x4, x21, [x29, #120]
    5560:	mov	x21, x4
    5564:	stp	x23, x24, [x29, #136]
    5568:	mov	x24, x27
    556c:	mov	x23, x1
    5570:	mov	w27, w2
    5574:	str	x20, [x29, #152]
    5578:	str	x0, [x29, #184]
    557c:	str	x26, [x29, #416]
    5580:	mov	x26, x12
    5584:	ldr	x20, [x29, #192]
    5588:	b	55d4 <GOMP_taskloop+0xaac>
    558c:	ldrb	w4, [x3, #205]
    5590:	cbnz	w4, 5598 <GOMP_taskloop+0xa70>
    5594:	cbz	w27, 55a0 <GOMP_taskloop+0xa78>
    5598:	mov	w0, #0x1                   	// #1
    559c:	strb	w0, [x23, #205]
    55a0:	ldrb	w4, [x3, #204]
    55a4:	ldr	x3, [x3, #40]
    55a8:	str	x3, [x23, #40]
    55ac:	strb	w4, [x23, #204]
    55b0:	str	x23, [x26, #80]
    55b4:	mov	x0, x21
    55b8:	mov	x1, x24
    55bc:	add	x23, x23, #0xd0
    55c0:	blr	x28
    55c4:	add	x21, x21, x20
    55c8:	cmp	x25, x23
    55cc:	b.eq	5668 <GOMP_taskloop+0xb40>  // b.none
    55d0:	ldr	x3, [x26, #80]
    55d4:	mov	x5, x23
    55d8:	ldr	x0, [x29, #184]
    55dc:	cmp	x3, #0x0
    55e0:	add	x4, x3, #0x90
    55e4:	str	x22, [x5], #144
    55e8:	csel	x4, x0, x4, eq  // eq = none
    55ec:	mov	w0, #0x1                   	// #1
    55f0:	ldp	x6, x7, [x4]
    55f4:	stp	x6, x7, [x23, #144]
    55f8:	ldp	x6, x7, [x4, #16]
    55fc:	stp	x6, x7, [x5, #16]
    5600:	ldr	x4, [x4, #32]
    5604:	str	x4, [x5, #32]
    5608:	str	xzr, [x23, #8]
    560c:	stp	xzr, xzr, [x23, #24]
    5610:	stp	xzr, xzr, [x23, #40]
    5614:	stp	xzr, xzr, [x23, #56]
    5618:	str	xzr, [x23, #72]
    561c:	str	w19, [x23, #88]
    5620:	str	w0, [x23, #200]
    5624:	strb	wzr, [x23, #204]
    5628:	strb	wzr, [x23, #205]
    562c:	strb	wzr, [x23, #206]
    5630:	strb	wzr, [x23, #207]
    5634:	cbnz	x3, 558c <GOMP_taskloop+0xa64>
    5638:	cbz	w27, 55b0 <GOMP_taskloop+0xa88>
    563c:	mov	w0, #0x1                   	// #1
    5640:	strb	w0, [x23, #205]
    5644:	b	55b0 <GOMP_taskloop+0xa88>
    5648:	ldr	x0, [x29, #160]
    564c:	mov	sp, x0
    5650:	b	4db0 <GOMP_taskloop+0x288>
    5654:	mov	x0, x22
    5658:	str	w1, [x29, #200]
    565c:	bl	0 <gomp_mutex_unlock_slow>
    5660:	ldr	w1, [x29, #200]
    5664:	b	529c <GOMP_taskloop+0x774>
    5668:	ldp	x11, x10, [x29, #104]
    566c:	mov	x25, #0x0                   	// #0
    5670:	ldp	x4, x21, [x29, #120]
    5674:	mov	w19, #0x1                   	// #1
    5678:	ldr	x0, [x29, #168]
    567c:	add	x28, x10, x11
    5680:	add	x22, x0, #0x8
    5684:	add	x21, x21, #0x500
    5688:	mov	x27, x4
    568c:	ldp	x23, x24, [x29, #136]
    5690:	ldr	x20, [x29, #152]
    5694:	ldr	x26, [x29, #416]
    5698:	b	56c0 <GOMP_taskloop+0xb98>
    569c:	ldr	x1, [x28, #80]
    56a0:	ldr	x0, [x1, #56]
    56a4:	cbnz	x0, 57b0 <GOMP_taskloop+0xc88>
    56a8:	ldr	x0, [x1]
    56ac:	str	x0, [x28, #80]
    56b0:	add	x25, x25, #0x1
    56b4:	add	x22, x22, #0xd0
    56b8:	cmp	x23, x25
    56bc:	b.eq	5648 <GOMP_taskloop+0xb20>  // b.none
    56c0:	sub	x0, x22, #0x8
    56c4:	str	x0, [x28, #80]
    56c8:	ldr	x0, [x29, #432]
    56cc:	cmp	x20, x25
    56d0:	ldr	x1, [x29, #192]
    56d4:	sub	x0, x24, x0
    56d8:	str	x26, [x27]
    56dc:	add	x26, x26, x24
    56e0:	csel	x24, x0, x24, eq  // eq = none
    56e4:	mov	x0, x27
    56e8:	str	x26, [x27, #8]
    56ec:	add	x27, x27, x1
    56f0:	ldr	x1, [x29, #200]
    56f4:	blr	x1
    56f8:	ldr	x0, [x22]
    56fc:	cbnz	x0, 5708 <GOMP_taskloop+0xbe0>
    5700:	ldr	x0, [x22, #16]
    5704:	cbz	x0, 569c <GOMP_taskloop+0xb74>
    5708:	ldaxr	w1, [x21]
    570c:	cbnz	w1, 5718 <GOMP_taskloop+0xbf0>
    5710:	stxr	w0, w19, [x21]
    5714:	cbnz	w0, 5708 <GOMP_taskloop+0xbe0>
    5718:	cmp	w1, #0x0
    571c:	b.ne	59a0 <GOMP_taskloop+0xe78>  // b.any
    5720:	ldr	x3, [x22]
    5724:	cbnz	x3, 5764 <GOMP_taskloop+0xc3c>
    5728:	ldr	x1, [x22, #16]
    572c:	mov	x0, x1
    5730:	cbz	x1, 5748 <GOMP_taskloop+0xc20>
    5734:	nop
    5738:	stur	xzr, [x0, #-112]
    573c:	ldr	x0, [x0]
    5740:	cmp	x1, x0
    5744:	b.ne	5738 <GOMP_taskloop+0xc10>  // b.any
    5748:	ldxr	w0, [x21]
    574c:	stlxr	w1, wzr, [x21]
    5750:	cbnz	w1, 5748 <GOMP_taskloop+0xc20>
    5754:	tbz	w0, #31, 569c <GOMP_taskloop+0xb74>
    5758:	mov	x0, x21
    575c:	bl	0 <gomp_mutex_unlock_slow>
    5760:	b	569c <GOMP_taskloop+0xb74>
    5764:	ldr	x4, [x3, #8]
    5768:	mov	x0, x3
    576c:	ldp	x1, x3, [x3, #24]
    5770:	mov	x2, x4
    5774:	cbz	x4, 5788 <GOMP_taskloop+0xc60>
    5778:	stur	xzr, [x2, #-112]
    577c:	ldr	x2, [x2]
    5780:	cmp	x4, x2
    5784:	b.ne	5778 <GOMP_taskloop+0xc50>  // b.any
    5788:	str	x3, [x29, #168]
    578c:	str	x1, [x29, #184]
    5790:	bl	0 <free>
    5794:	ldr	x1, [x29, #184]
    5798:	mov	x0, x22
    579c:	bl	e0 <gomp_clear_parent_in_tree>
    57a0:	ldr	x3, [x29, #168]
    57a4:	cbnz	x3, 5764 <GOMP_taskloop+0xc3c>
    57a8:	str	xzr, [x22]
    57ac:	b	5748 <GOMP_taskloop+0xc20>
    57b0:	str	x1, [x29, #184]
    57b4:	bl	0 <free>
    57b8:	ldr	x1, [x29, #184]
    57bc:	b	56a8 <GOMP_taskloop+0xb80>
    57c0:	mov	x0, #0x28                  	// #40
    57c4:	bl	0 <gomp_malloc>
    57c8:	mov	x1, x0
    57cc:	mov	x0, x24
    57d0:	str	x1, [x29, #168]
    57d4:	str	w19, [x1]
    57d8:	stp	xzr, xzr, [x1, #8]
    57dc:	stp	xzr, xzr, [x1, #24]
    57e0:	bl	0 <prio_splay_tree_insert>
    57e4:	ldr	x1, [x29, #168]
    57e8:	mov	x0, x1
    57ec:	b	5460 <GOMP_taskloop+0x938>
    57f0:	add	x0, x10, x11
    57f4:	ldr	x25, [x0, #80]
    57f8:	cbz	x25, 58b8 <GOMP_taskloop+0xd90>
    57fc:	ldr	x0, [x25, #40]
    5800:	cbz	x0, 5824 <GOMP_taskloop+0xcfc>
    5804:	ldrb	w1, [x0, #49]
    5808:	cbnz	w1, 4dbc <GOMP_taskloop+0x294>
    580c:	ldrb	w1, [x0, #50]
    5810:	cbz	w1, 5824 <GOMP_taskloop+0xcfc>
    5814:	ldr	x0, [x0]
    5818:	cbz	x0, 5824 <GOMP_taskloop+0xcfc>
    581c:	ldrb	w0, [x0, #49]
    5820:	cbnz	w0, 4dbc <GOMP_taskloop+0x294>
    5824:	adrp	x0, 0 <gomp_max_task_priority_var>
    5828:	ldr	w0, [x0]
    582c:	cmp	w0, w19
    5830:	csel	w19, w0, w19, le
    5834:	tst	x22, #0x400
    5838:	ccmp	x21, #0x0, #0x4, ne  // ne = any
    583c:	b.eq	4c14 <GOMP_taskloop+0xec>  // b.none
    5840:	b	4e3c <GOMP_taskloop+0x314>
    5844:	dup	v0.2d, x28
    5848:	str	q0, [x27, #112]
    584c:	str	x28, [x0, #8]
    5850:	b	51c8 <GOMP_taskloop+0x6a0>
    5854:	dup	v0.2d, x4
    5858:	str	q0, [x27, #96]
    585c:	str	x4, [x0, #8]
    5860:	b	5230 <GOMP_taskloop+0x708>
    5864:	mul	x24, x20, x0
    5868:	mov	x23, #0x1                   	// #1
    586c:	b	54a8 <GOMP_taskloop+0x980>
    5870:	mov	x0, #0x28                  	// #40
    5874:	str	x4, [x29, #168]
    5878:	bl	0 <gomp_malloc>
    587c:	mov	x1, x0
    5880:	ldr	x4, [x29, #168]
    5884:	stp	xzr, xzr, [x0, #8]
    5888:	stp	xzr, xzr, [x0, #24]
    588c:	mov	x0, x4
    5890:	str	w19, [x1]
    5894:	str	x1, [x29, #168]
    5898:	bl	0 <prio_splay_tree_insert>
    589c:	ldr	x1, [x29, #168]
    58a0:	mov	x0, x1
    58a4:	b	5324 <GOMP_taskloop+0x7fc>
    58a8:	dup	v0.2d, x28
    58ac:	str	q0, [x27, #128]
    58b0:	str	x28, [x0, #8]
    58b4:	b	5348 <GOMP_taskloop+0x820>
    58b8:	adrp	x0, 0 <gomp_max_task_priority_var>
    58bc:	ldr	w0, [x0]
    58c0:	cmp	w0, w19
    58c4:	csel	w19, w0, w19, le
    58c8:	tst	x22, #0x400
    58cc:	ccmp	x21, #0x0, #0x4, ne  // ne = any
    58d0:	b.eq	4c14 <GOMP_taskloop+0xec>  // b.none
    58d4:	b	4e44 <GOMP_taskloop+0x31c>
    58d8:	mov	x0, x22
    58dc:	bl	0 <gomp_mutex_unlock_slow>
    58e0:	b	52bc <GOMP_taskloop+0x794>
    58e4:	ldr	w0, [x21, #132]
    58e8:	tbnz	w0, #2, 5914 <GOMP_taskloop+0xdec>
    58ec:	ldr	x1, [x29, #168]
    58f0:	cbz	x1, 5168 <GOMP_taskloop+0x640>
    58f4:	ldrb	w0, [x1, #49]
    58f8:	cbnz	w0, 5914 <GOMP_taskloop+0xdec>
    58fc:	ldrb	w0, [x1, #50]
    5900:	cbz	w0, 5158 <GOMP_taskloop+0x630>
    5904:	ldr	x0, [x1]
    5908:	cbz	x0, 5158 <GOMP_taskloop+0x630>
    590c:	ldrb	w0, [x0, #49]
    5910:	cbz	w0, 5158 <GOMP_taskloop+0x630>
    5914:	mov	x0, x22
    5918:	mov	x19, #0x0                   	// #0
    591c:	bl	208 <gomp_mutex_unlock>
    5920:	cbnz	x23, 5938 <GOMP_taskloop+0xe10>
    5924:	b	5968 <GOMP_taskloop+0xe40>
    5928:	add	x19, x19, #0x1
    592c:	bl	0 <free>
    5930:	cmp	x19, x23
    5934:	b.eq	5968 <GOMP_taskloop+0xe40>  // b.none
    5938:	ldr	x0, [x29, #184]
    593c:	ldr	x20, [x0, x19, lsl #3]
    5940:	mov	x0, x20
    5944:	ldr	x1, [x20, #56]
    5948:	cbz	x1, 5928 <GOMP_taskloop+0xe00>
    594c:	mov	x0, x1
    5950:	bl	0 <free>
    5954:	add	x19, x19, #0x1
    5958:	mov	x0, x20
    595c:	bl	0 <free>
    5960:	cmp	x23, x19
    5964:	b.ne	5938 <GOMP_taskloop+0xe10>  // b.any
    5968:	ldr	w0, [x29, #180]
    596c:	cbz	w0, 59ac <GOMP_taskloop+0xe84>
    5970:	ldr	x0, [x29, #104]
    5974:	mov	sp, x0
    5978:	b	4dbc <GOMP_taskloop+0x294>
    597c:	mov	x0, x3
    5980:	str	x3, [x29, #168]
    5984:	bl	0 <gomp_mutex_lock_slow>
    5988:	movi	v0.4s, #0x0
    598c:	ldr	x3, [x29, #168]
    5990:	b	4d44 <GOMP_taskloop+0x21c>
    5994:	mov	x0, x22
    5998:	bl	0 <gomp_mutex_lock_slow>
    599c:	b	5138 <GOMP_taskloop+0x610>
    59a0:	mov	x0, x21
    59a4:	bl	0 <gomp_mutex_lock_slow>
    59a8:	b	5720 <GOMP_taskloop+0xbf8>
    59ac:	bl	4208 <GOMP_taskgroup_end>
    59b0:	b	5970 <GOMP_taskloop+0xe48>
    59b4:	nop

00000000000059b8 <GOMP_taskloop_ull>:
    59b8:	stp	x29, x30, [sp, #-432]!
    59bc:	mrs	x10, tpidr_el0
    59c0:	adrp	x11, 0 <gomp_tls_data>
    59c4:	ldr	x11, [x11]
    59c8:	mov	x29, sp
    59cc:	add	x8, x10, x11
    59d0:	stp	x19, x20, [sp, #16]
    59d4:	mov	w20, w5
    59d8:	stp	x21, x22, [sp, #32]
    59dc:	mov	w19, w7
    59e0:	stp	x23, x24, [sp, #48]
    59e4:	stp	x25, x26, [sp, #64]
    59e8:	stp	x27, x28, [sp, #80]
    59ec:	mov	x27, x1
    59f0:	mov	x28, x2
    59f4:	stp	x3, x0, [x29, #200]
    59f8:	ldp	x3, x0, [x29, #440]
    59fc:	ldr	x22, [x8, #16]
    5a00:	ldr	x24, [x29, #432]
    5a04:	sub	x1, x0, #0x1
    5a08:	cbz	x22, 5a14 <GOMP_taskloop_ull+0x5c>
    5a0c:	ldr	w0, [x22, #132]
    5a10:	tbnz	w0, #2, 5c5c <GOMP_taskloop_ull+0x2a4>
    5a14:	tbz	w20, #8, 5c7c <GOMP_taskloop_ull+0x2c4>
    5a18:	cmp	x24, x3
    5a1c:	b.cs	5c5c <GOMP_taskloop_ull+0x2a4>  // b.hs, b.nlast
    5a20:	sub	x21, x3, x24
    5a24:	ldr	x0, [x29, #448]
    5a28:	add	x21, x21, x1
    5a2c:	udiv	x0, x21, x0
    5a30:	str	x0, [x29, #216]
    5a34:	tbz	w20, #9, 5ca8 <GOMP_taskloop_ull+0x2f0>
    5a38:	ldr	x0, [x29, #216]
    5a3c:	udiv	x23, x0, x6
    5a40:	cmp	x23, #0x1
    5a44:	b.ls	5f2c <GOMP_taskloop_ull+0x574>  // b.plast
    5a48:	cmp	x6, x23
    5a4c:	ccmn	x23, #0x1, #0x4, ls  // ls = plast
    5a50:	b.eq	5fa0 <GOMP_taskloop_ull+0x5e8>  // b.none
    5a54:	ldr	x1, [x29, #448]
    5a58:	mul	x0, x6, x23
    5a5c:	mul	x21, x1, x6
    5a60:	ldr	x1, [x29, #216]
    5a64:	cmp	x1, x0
    5a68:	b.eq	5a80 <GOMP_taskloop_ull+0xc8>  // b.none
    5a6c:	sub	x0, x1, x0
    5a70:	ldr	x1, [x29, #448]
    5a74:	sub	x0, x0, #0x1
    5a78:	str	x0, [x29, #216]
    5a7c:	add	x21, x21, x1
    5a80:	and	w0, w20, #0x800
    5a84:	str	w0, [x29, #188]
    5a88:	tbz	w20, #11, 5ea8 <GOMP_taskloop_ull+0x4f0>
    5a8c:	adrp	x0, 0 <gomp_cancel_var>
    5a90:	ldrb	w0, [x0]
    5a94:	cbnz	w0, 66a0 <GOMP_taskloop_ull+0xce8>
    5a98:	adrp	x0, 0 <gomp_max_task_priority_var>
    5a9c:	ldr	w0, [x0]
    5aa0:	cmp	w0, w19
    5aa4:	csel	w19, w0, w19, le
    5aa8:	tst	x20, #0x400
    5aac:	ccmp	x22, #0x0, #0x4, ne  // ne = any
    5ab0:	b.ne	5ce8 <GOMP_taskloop_ull+0x330>  // b.any
    5ab4:	cbnz	x28, 6368 <GOMP_taskloop_ull+0x9b0>
    5ab8:	cbz	x23, 5c50 <GOMP_taskloop_ull+0x298>
    5abc:	add	x10, x10, x11
    5ac0:	and	w0, w20, #0x2
    5ac4:	adrp	x1, 0 <gomp_global_icv>
    5ac8:	mov	x25, x10
    5acc:	add	x1, x1, #0x0
    5ad0:	mov	x26, #0x1                   	// #1
    5ad4:	movi	v0.4s, #0x0
    5ad8:	mov	x20, #0x0                   	// #0
    5adc:	str	w0, [x29, #192]
    5ae0:	str	x1, [x29, #200]
    5ae4:	ldr	x0, [x10, #80]
    5ae8:	b	5b0c <GOMP_taskloop_ull+0x154>
    5aec:	ldr	x28, [x25, #80]
    5af0:	ldr	x0, [x28, #56]
    5af4:	cbnz	x0, 5c30 <GOMP_taskloop_ull+0x278>
    5af8:	ldr	x0, [x28]
    5afc:	str	x0, [x25, #80]
    5b00:	add	x20, x20, #0x1
    5b04:	cmp	x23, x20
    5b08:	b.eq	5c50 <GOMP_taskloop_ull+0x298>  // b.none
    5b0c:	ldr	x2, [x29, #200]
    5b10:	cmp	x0, #0x0
    5b14:	add	x1, x0, #0x90
    5b18:	csel	x1, x2, x1, eq  // eq = none
    5b1c:	ldp	x2, x3, [x1]
    5b20:	stp	x2, x3, [x29, #368]
    5b24:	ldp	x2, x3, [x1, #16]
    5b28:	stp	x2, x3, [x29, #384]
    5b2c:	ldr	x1, [x1, #32]
    5b30:	str	x1, [x29, #400]
    5b34:	add	x1, x29, #0x200
    5b38:	stp	x0, xzr, [x29, #224]
    5b3c:	str	xzr, [x29, #296]
    5b40:	str	w19, [x29, #312]
    5b44:	str	x26, [x29, #424]
    5b48:	stur	q0, [x29, #248]
    5b4c:	stur	q0, [x1, #-248]
    5b50:	stur	q0, [x1, #-232]
    5b54:	cbz	x0, 5f38 <GOMP_taskloop_ull+0x580>
    5b58:	ldrb	w1, [x0, #205]
    5b5c:	cbnz	w1, 5b68 <GOMP_taskloop_ull+0x1b0>
    5b60:	ldr	w1, [x29, #192]
    5b64:	cbz	w1, 5b70 <GOMP_taskloop_ull+0x1b8>
    5b68:	mov	w1, #0x1                   	// #1
    5b6c:	strb	w1, [x29, #429]
    5b70:	ldrb	w1, [x0, #204]
    5b74:	ldr	x0, [x0, #40]
    5b78:	str	x0, [x29, #264]
    5b7c:	strb	w1, [x29, #428]
    5b80:	ldp	x1, x0, [x29, #208]
    5b84:	cmp	x20, x0
    5b88:	add	x0, x29, #0xe0
    5b8c:	str	x0, [x25, #80]
    5b90:	ldr	x0, [x29, #448]
    5b94:	str	x24, [x27]
    5b98:	add	x24, x24, x21
    5b9c:	str	x24, [x27, #8]
    5ba0:	sub	x0, x21, x0
    5ba4:	csel	x21, x0, x21, eq  // eq = none
    5ba8:	mov	x0, x27
    5bac:	blr	x1
    5bb0:	ldr	x0, [x29, #232]
    5bb4:	movi	v0.4s, #0x0
    5bb8:	cbnz	x0, 5bc4 <GOMP_taskloop_ull+0x20c>
    5bbc:	ldr	x0, [x29, #248]
    5bc0:	cbz	x0, 5aec <GOMP_taskloop_ull+0x134>
    5bc4:	add	x3, x22, #0x500
    5bc8:	mov	w0, #0x1                   	// #1
    5bcc:	ldaxr	w1, [x3]
    5bd0:	cbnz	w1, 5bdc <GOMP_taskloop_ull+0x224>
    5bd4:	stxr	w2, w0, [x3]
    5bd8:	cbnz	w2, 5bcc <GOMP_taskloop_ull+0x214>
    5bdc:	cmp	w1, #0x0
    5be0:	b.ne	682c <GOMP_taskloop_ull+0xe74>  // b.any
    5be4:	ldr	x4, [x29, #232]
    5be8:	cbnz	x4, 5f48 <GOMP_taskloop_ull+0x590>
    5bec:	ldr	x1, [x29, #248]
    5bf0:	mov	x0, x1
    5bf4:	cbz	x1, 5c08 <GOMP_taskloop_ull+0x250>
    5bf8:	stur	xzr, [x0, #-112]
    5bfc:	ldr	x0, [x0]
    5c00:	cmp	x1, x0
    5c04:	b.ne	5bf8 <GOMP_taskloop_ull+0x240>  // b.any
    5c08:	ldxr	w0, [x3]
    5c0c:	stlxr	w1, wzr, [x3]
    5c10:	cbnz	w1, 5c08 <GOMP_taskloop_ull+0x250>
    5c14:	tbz	w0, #31, 5aec <GOMP_taskloop_ull+0x134>
    5c18:	mov	x0, x3
    5c1c:	bl	0 <gomp_mutex_unlock_slow>
    5c20:	ldr	x28, [x25, #80]
    5c24:	movi	v0.4s, #0x0
    5c28:	ldr	x0, [x28, #56]
    5c2c:	cbz	x0, 5af8 <GOMP_taskloop_ull+0x140>
    5c30:	bl	0 <free>
    5c34:	add	x20, x20, #0x1
    5c38:	ldr	x0, [x28]
    5c3c:	str	x0, [x25, #80]
    5c40:	movi	v0.4s, #0x0
    5c44:	cmp	x23, x20
    5c48:	b.ne	5b0c <GOMP_taskloop_ull+0x154>  // b.any
    5c4c:	nop
    5c50:	ldr	w0, [x29, #188]
    5c54:	cbnz	w0, 5c5c <GOMP_taskloop_ull+0x2a4>
    5c58:	bl	4208 <GOMP_taskgroup_end>
    5c5c:	mov	sp, x29
    5c60:	ldp	x19, x20, [sp, #16]
    5c64:	ldp	x21, x22, [sp, #32]
    5c68:	ldp	x23, x24, [sp, #48]
    5c6c:	ldp	x25, x26, [sp, #64]
    5c70:	ldp	x27, x28, [sp, #80]
    5c74:	ldp	x29, x30, [sp], #432
    5c78:	ret
    5c7c:	cmp	x24, x3
    5c80:	b.ls	5c5c <GOMP_taskloop_ull+0x2a4>  // b.plast
    5c84:	ldr	x0, [x29, #448]
    5c88:	sub	x21, x24, x3
    5c8c:	mvn	x0, x0
    5c90:	add	x21, x21, x0
    5c94:	ldr	x0, [x29, #448]
    5c98:	neg	x0, x0
    5c9c:	udiv	x0, x21, x0
    5ca0:	str	x0, [x29, #216]
    5ca4:	tbnz	w20, #9, 5a38 <GOMP_taskloop_ull+0x80>
    5ca8:	cbnz	x6, 5cb4 <GOMP_taskloop_ull+0x2fc>
    5cac:	cbz	x22, 6324 <GOMP_taskloop_ull+0x96c>
    5cb0:	ldr	w6, [x22]
    5cb4:	ldr	x0, [x29, #216]
    5cb8:	cmp	x0, x6
    5cbc:	b.ls	5e94 <GOMP_taskloop_ull+0x4dc>  // b.plast
    5cc0:	udiv	x3, x0, x6
    5cc4:	mov	x23, x6
    5cc8:	msub	x6, x3, x6, x0
    5ccc:	ldr	x0, [x29, #448]
    5cd0:	mul	x21, x3, x0
    5cd4:	cbz	x6, 5a80 <GOMP_taskloop_ull+0xc8>
    5cd8:	add	x21, x21, x0
    5cdc:	sub	x0, x6, #0x1
    5ce0:	str	x0, [x29, #216]
    5ce4:	b	5a80 <GOMP_taskloop_ull+0xc8>
    5ce8:	add	x0, x10, x11
    5cec:	ldr	x26, [x0, #80]
    5cf0:	cbz	x26, 5cfc <GOMP_taskloop_ull+0x344>
    5cf4:	ldrb	w0, [x26, #205]
    5cf8:	cbnz	w0, 5ab4 <GOMP_taskloop_ull+0xfc>
    5cfc:	ldr	w0, [x22]
    5d00:	ldr	w1, [x22, #1320]
    5d04:	lsl	w0, w0, #6
    5d08:	add	x1, x1, x23
    5d0c:	cmp	x1, x0
    5d10:	b.hi	5ab4 <GOMP_taskloop_ull+0xfc>  // b.pmore
    5d14:	lsl	x0, x23, #3
    5d18:	mov	x1, sp
    5d1c:	add	x0, x0, #0xf
    5d20:	str	x1, [x29, #112]
    5d24:	and	x0, x0, #0xfffffffffffffff0
    5d28:	sub	sp, sp, x0
    5d2c:	mov	x0, sp
    5d30:	str	x0, [x29, #192]
    5d34:	ldr	x25, [x26, #40]
    5d38:	cbz	x23, 5fd4 <GOMP_taskloop_ull+0x61c>
    5d3c:	ubfx	x1, x20, #1, #1
    5d40:	add	x0, x4, #0xcf
    5d44:	stp	x0, x1, [x29, #136]
    5d48:	neg	x1, x4
    5d4c:	mov	x20, #0x0                   	// #0
    5d50:	str	x1, [x29, #128]
    5d54:	add	x10, x10, x11
    5d58:	ldr	x1, [x29, #200]
    5d5c:	str	x22, [x29, #104]
    5d60:	str	x25, [x29, #152]
    5d64:	add	x1, x1, x0
    5d68:	adrp	x0, 0 <gomp_global_icv>
    5d6c:	add	x0, x0, #0x0
    5d70:	str	x0, [x29, #120]
    5d74:	mov	x0, x20
    5d78:	mov	x22, x1
    5d7c:	mov	x20, x21
    5d80:	mov	x21, x0
    5d84:	str	w19, [x29, #160]
    5d88:	mov	x19, x10
    5d8c:	str	x23, [x29, #168]
    5d90:	b	5dec <GOMP_taskloop_ull+0x434>
    5d94:	blr	x28
    5d98:	mov	w0, #0x1                   	// #1
    5d9c:	strb	w0, [x23, #206]
    5da0:	ldr	x0, [x29, #216]
    5da4:	str	x24, [x25]
    5da8:	add	x24, x24, x20
    5dac:	str	x24, [x25, #8]
    5db0:	cmp	x21, x0
    5db4:	add	x21, x21, #0x1
    5db8:	ldr	x0, [x29, #208]
    5dbc:	stp	x0, x25, [x23, #184]
    5dc0:	ldr	x0, [x29, #448]
    5dc4:	str	x26, [x19, #80]
    5dc8:	sub	x0, x20, x0
    5dcc:	csel	x20, x0, x20, eq  // eq = none
    5dd0:	mov	w0, #0x2                   	// #2
    5dd4:	str	w0, [x23, #200]
    5dd8:	ldr	x0, [x29, #168]
    5ddc:	cmp	x0, x21
    5de0:	ldrb	w0, [x29, #144]
    5de4:	strb	w0, [x23, #205]
    5de8:	b.eq	5fc4 <GOMP_taskloop_ull+0x60c>  // b.none
    5dec:	mov	x0, x22
    5df0:	bl	0 <gomp_malloc>
    5df4:	mov	x23, x0
    5df8:	mov	x8, x0
    5dfc:	str	x0, [x29, #176]
    5e00:	mov	x1, x27
    5e04:	ldr	x0, [x29, #192]
    5e08:	str	x26, [x8], #144
    5e0c:	ldr	x2, [x19, #80]
    5e10:	str	x23, [x0, x21, lsl #3]
    5e14:	ldr	x0, [x29, #120]
    5e18:	cmp	x2, #0x0
    5e1c:	add	x2, x2, #0x90
    5e20:	csel	x2, x0, x2, eq  // eq = none
    5e24:	ldr	x0, [x29, #136]
    5e28:	ldp	x6, x7, [x2]
    5e2c:	stp	x6, x7, [x23, #144]
    5e30:	add	x4, x23, x0
    5e34:	ldp	x6, x7, [x2, #16]
    5e38:	stp	x6, x7, [x8, #16]
    5e3c:	ldr	x2, [x2, #32]
    5e40:	str	x2, [x8, #32]
    5e44:	mov	x2, #0x1                   	// #1
    5e48:	str	x2, [x23, #200]
    5e4c:	ldr	x0, [x29, #128]
    5e50:	str	xzr, [x23, #8]
    5e54:	ldr	x3, [x29, #152]
    5e58:	str	x23, [x19, #80]
    5e5c:	ldrb	w2, [x26, #204]
    5e60:	and	x25, x4, x0
    5e64:	stp	x3, xzr, [x23, #40]
    5e68:	mov	x0, x25
    5e6c:	ldr	w3, [x29, #160]
    5e70:	stp	xzr, xzr, [x23, #24]
    5e74:	stp	xzr, xzr, [x23, #56]
    5e78:	str	xzr, [x23, #72]
    5e7c:	str	w3, [x23, #88]
    5e80:	strb	w2, [x23, #204]
    5e84:	cbnz	x28, 5d94 <GOMP_taskloop_ull+0x3dc>
    5e88:	ldr	x2, [x29, #200]
    5e8c:	bl	0 <memcpy>
    5e90:	b	5da0 <GOMP_taskloop_ull+0x3e8>
    5e94:	mov	x23, x0
    5e98:	and	w0, w20, #0x800
    5e9c:	str	w0, [x29, #188]
    5ea0:	ldr	x21, [x29, #448]
    5ea4:	tbnz	w20, #11, 5a8c <GOMP_taskloop_ull+0xd4>
    5ea8:	and	w0, w20, #0x1000
    5eac:	str	w0, [x29, #188]
    5eb0:	cbz	x22, 634c <GOMP_taskloop_ull+0x994>
    5eb4:	add	x1, x10, x11
    5eb8:	mov	x0, #0x40                  	// #64
    5ebc:	stp	x4, x11, [x29, #160]
    5ec0:	ldr	x26, [x1, #80]
    5ec4:	str	x10, [x29, #176]
    5ec8:	ldr	x25, [x26, #40]
    5ecc:	bl	0 <gomp_malloc>
    5ed0:	stp	x25, xzr, [x0]
    5ed4:	stp	xzr, xzr, [x0, #24]
    5ed8:	str	x0, [x29, #192]
    5edc:	ldp	x4, x11, [x29, #160]
    5ee0:	ldr	x10, [x29, #176]
    5ee4:	cbz	x25, 5eec <GOMP_taskloop_ull+0x534>
    5ee8:	ldr	x25, [x25, #40]
    5eec:	str	x25, [x0, #40]
    5ef0:	strh	wzr, [x0, #48]
    5ef4:	strb	wzr, [x0, #50]
    5ef8:	str	wzr, [x0, #52]
    5efc:	str	xzr, [x0, #56]
    5f00:	str	x0, [x26, #40]
    5f04:	and	w0, w20, #0x1000
    5f08:	cbz	w0, 5a98 <GOMP_taskloop_ull+0xe0>
    5f0c:	ldr	x0, [x27, #16]
    5f10:	stp	x11, x10, [x29, #168]
    5f14:	str	wzr, [x29, #188]
    5f18:	str	x4, [x29, #192]
    5f1c:	bl	48b0 <GOMP_taskgroup_reduction_register>
    5f20:	ldp	x11, x10, [x29, #168]
    5f24:	ldr	x4, [x29, #192]
    5f28:	b	5a98 <GOMP_taskloop_ull+0xe0>
    5f2c:	sub	x21, x3, x24
    5f30:	mov	x23, #0x1                   	// #1
    5f34:	b	5a80 <GOMP_taskloop_ull+0xc8>
    5f38:	ldr	w0, [x29, #192]
    5f3c:	cbz	w0, 5b80 <GOMP_taskloop_ull+0x1c8>
    5f40:	strb	w26, [x29, #429]
    5f44:	b	5b80 <GOMP_taskloop_ull+0x1c8>
    5f48:	add	x28, x29, #0xe8
    5f4c:	ldr	x5, [x4, #8]
    5f50:	mov	x0, x4
    5f54:	ldp	x1, x4, [x4, #24]
    5f58:	mov	x2, x5
    5f5c:	cbz	x5, 5f70 <GOMP_taskloop_ull+0x5b8>
    5f60:	stur	xzr, [x2, #-112]
    5f64:	ldr	x2, [x2]
    5f68:	cmp	x5, x2
    5f6c:	b.ne	5f60 <GOMP_taskloop_ull+0x5a8>  // b.any
    5f70:	stp	x4, x1, [x29, #160]
    5f74:	str	x3, [x29, #176]
    5f78:	bl	0 <free>
    5f7c:	ldr	x1, [x29, #168]
    5f80:	mov	x0, x28
    5f84:	bl	e0 <gomp_clear_parent_in_tree>
    5f88:	ldr	x4, [x29, #160]
    5f8c:	movi	v0.4s, #0x0
    5f90:	ldr	x3, [x29, #176]
    5f94:	cbnz	x4, 5f4c <GOMP_taskloop_ull+0x594>
    5f98:	str	xzr, [x29, #232]
    5f9c:	b	5c08 <GOMP_taskloop_ull+0x250>
    5fa0:	udiv	x3, x0, x23
    5fa4:	ldr	x1, [x29, #448]
    5fa8:	msub	x0, x3, x23, x0
    5fac:	mul	x21, x3, x1
    5fb0:	cbz	x0, 5a80 <GOMP_taskloop_ull+0xc8>
    5fb4:	sub	x0, x0, #0x1
    5fb8:	add	x21, x21, x1
    5fbc:	str	x0, [x29, #216]
    5fc0:	b	5a80 <GOMP_taskloop_ull+0xc8>
    5fc4:	ldr	w19, [x29, #160]
    5fc8:	ldr	x22, [x29, #104]
    5fcc:	ldr	x25, [x29, #152]
    5fd0:	ldr	x23, [x29, #168]
    5fd4:	add	x0, x22, #0x500
    5fd8:	mov	x2, x0
    5fdc:	mov	w0, #0x1                   	// #1
    5fe0:	str	x2, [x29, #216]
    5fe4:	ldaxr	w1, [x2]
    5fe8:	cbnz	w1, 5ff4 <GOMP_taskloop_ull+0x63c>
    5fec:	stxr	w3, w0, [x2]
    5ff0:	cbnz	w3, 5fe4 <GOMP_taskloop_ull+0x62c>
    5ff4:	cmp	w1, #0x0
    5ff8:	b.ne	6844 <GOMP_taskloop_ull+0xe8c>  // b.any
    5ffc:	adrp	x0, 0 <gomp_cancel_var>
    6000:	cmp	x28, #0x0
    6004:	cset	w1, eq  // eq = none
    6008:	ldrb	w0, [x0]
    600c:	tst	w1, w0
    6010:	b.ne	6798 <GOMP_taskloop_ull+0xde0>  // b.any
    6014:	cbz	x25, 6024 <GOMP_taskloop_ull+0x66c>
    6018:	ldr	x0, [x25, #56]
    601c:	add	x0, x0, x23
    6020:	str	x0, [x25, #56]
    6024:	add	x24, x26, #0x8
    6028:	mov	x27, #0x0                   	// #0
    602c:	cbz	x23, 6104 <GOMP_taskloop_ull+0x74c>
    6030:	add	x20, x22, #0x508
    6034:	add	x0, x22, #0x600
    6038:	str	x0, [x29, #208]
    603c:	nop
    6040:	ldr	x1, [x29, #192]
    6044:	ldr	x0, [x26, #8]
    6048:	ldr	x21, [x1, x27, lsl #3]
    604c:	add	x28, x21, #0x70
    6050:	cbnz	x0, 62d8 <GOMP_taskloop_ull+0x920>
    6054:	cmp	w19, #0x0
    6058:	ldr	x0, [x26, #24]
    605c:	b.gt	62a0 <GOMP_taskloop_ull+0x8e8>
    6060:	cbz	x0, 6258 <GOMP_taskloop_ull+0x8a0>
    6064:	ldr	x1, [x0, #8]
    6068:	stp	x0, x1, [x21, #112]
    606c:	str	x28, [x26, #24]
    6070:	ldr	x0, [x21, #112]
    6074:	str	x28, [x0, #8]
    6078:	ldr	x0, [x21, #120]
    607c:	str	x28, [x0]
    6080:	cbz	x25, 61d0 <GOMP_taskloop_ull+0x818>
    6084:	ldr	x0, [x25, #8]
    6088:	add	x3, x25, #0x8
    608c:	add	x28, x21, #0x80
    6090:	cbnz	x0, 618c <GOMP_taskloop_ull+0x7d4>
    6094:	cmp	w19, #0x0
    6098:	ldr	x0, [x25, #24]
    609c:	b.gt	614c <GOMP_taskloop_ull+0x794>
    60a0:	cbz	x0, 6314 <GOMP_taskloop_ull+0x95c>
    60a4:	ldr	x1, [x0, #8]
    60a8:	stp	x0, x1, [x21, #128]
    60ac:	str	x28, [x25, #24]
    60b0:	ldr	x0, [x21, #128]
    60b4:	str	x28, [x0, #8]
    60b8:	ldr	x0, [x21, #136]
    60bc:	str	x28, [x0]
    60c0:	ldr	x0, [x22, #1288]
    60c4:	cbnz	x0, 6268 <GOMP_taskloop_ull+0x8b0>
    60c8:	ldr	x0, [x22, #1304]
    60cc:	add	x1, x21, #0x60
    60d0:	cbz	x0, 6248 <GOMP_taskloop_ull+0x890>
    60d4:	ldr	x3, [x0, #8]
    60d8:	stp	x0, x3, [x21, #96]
    60dc:	str	x1, [x0, #8]
    60e0:	ldr	x0, [x21, #104]
    60e4:	str	x1, [x0]
    60e8:	movi	v1.2s, #0x1
    60ec:	ldr	d0, [x22, #1320]
    60f0:	add	x27, x27, #0x1
    60f4:	cmp	x23, x27
    60f8:	add	v0.2s, v0.2s, v1.2s
    60fc:	str	d0, [x22, #1320]
    6100:	b.ne	6040 <GOMP_taskloop_ull+0x688>  // b.any
    6104:	ldr	w0, [x22, #132]
    6108:	ldrb	w1, [x26, #204]
    610c:	orr	w0, w0, #0x1
    6110:	ldr	w2, [x22, #1328]
    6114:	eor	w1, w1, #0x1
    6118:	str	w0, [x22, #132]
    611c:	ldr	w0, [x22]
    6120:	add	w3, w2, w1
    6124:	cmp	w3, w0
    6128:	b.cc	64e0 <GOMP_taskloop_ull+0xb28>  // b.lo, b.ul, b.last
    612c:	ldr	x1, [x29, #216]
    6130:	ldxr	w0, [x1]
    6134:	stlxr	w2, wzr, [x1]
    6138:	cbnz	w2, 6130 <GOMP_taskloop_ull+0x778>
    613c:	tbnz	w0, #31, 678c <GOMP_taskloop_ull+0xdd4>
    6140:	ldr	x0, [x29, #112]
    6144:	mov	sp, x0
    6148:	b	5c50 <GOMP_taskloop_ull+0x298>
    614c:	cbz	x0, 6724 <GOMP_taskloop_ull+0xd6c>
    6150:	mov	x0, #0x28                  	// #40
    6154:	str	x3, [x29, #200]
    6158:	bl	0 <gomp_malloc>
    615c:	mov	x1, x0
    6160:	ldur	q0, [x25, #24]
    6164:	stp	xzr, xzr, [x0, #24]
    6168:	ldr	x3, [x29, #200]
    616c:	str	wzr, [x1]
    6170:	stur	q0, [x1, #8]
    6174:	mov	x0, x3
    6178:	bl	0 <prio_splay_tree_insert>
    617c:	ldr	x3, [x29, #200]
    6180:	ldr	x0, [x25, #8]
    6184:	str	xzr, [x3, #16]
    6188:	cbz	x0, 6724 <GOMP_taskloop_ull+0xd6c>
    618c:	mov	x0, x3
    6190:	add	x1, x29, #0xe0
    6194:	str	x3, [x29, #200]
    6198:	str	w19, [x29, #224]
    619c:	bl	0 <prio_splay_tree_lookup>
    61a0:	ldr	x3, [x29, #200]
    61a4:	cbz	x0, 6724 <GOMP_taskloop_ull+0xd6c>
    61a8:	ldr	x1, [x0, #8]
    61ac:	cbz	x1, 675c <GOMP_taskloop_ull+0xda4>
    61b0:	ldr	x3, [x1, #8]
    61b4:	stp	x1, x3, [x21, #128]
    61b8:	str	x28, [x0, #8]
    61bc:	ldr	x0, [x21, #128]
    61c0:	str	x28, [x0, #8]
    61c4:	ldr	x0, [x21, #136]
    61c8:	str	x28, [x0]
    61cc:	nop
    61d0:	ldr	x0, [x22, #1288]
    61d4:	cbnz	x0, 6268 <GOMP_taskloop_ull+0x8b0>
    61d8:	cmp	w19, #0x0
    61dc:	ldr	x0, [x20, #16]
    61e0:	b.le	60cc <GOMP_taskloop_ull+0x714>
    61e4:	cbz	x0, 621c <GOMP_taskloop_ull+0x864>
    61e8:	mov	x0, #0x28                  	// #40
    61ec:	bl	0 <gomp_malloc>
    61f0:	ldr	x2, [x29, #208]
    61f4:	mov	x1, x0
    61f8:	mov	x0, x20
    61fc:	ldur	q0, [x2, #-232]
    6200:	str	wzr, [x1]
    6204:	stp	xzr, xzr, [x1, #24]
    6208:	stur	q0, [x1, #8]
    620c:	bl	0 <prio_splay_tree_insert>
    6210:	ldr	x0, [x20]
    6214:	str	xzr, [x20, #16]
    6218:	cbnz	x0, 6268 <GOMP_taskloop_ull+0x8b0>
    621c:	mov	x0, #0x28                  	// #40
    6220:	bl	0 <gomp_malloc>
    6224:	mov	x28, x0
    6228:	mov	x0, x20
    622c:	mov	x1, x28
    6230:	str	w19, [x28]
    6234:	stp	xzr, xzr, [x28, #8]
    6238:	stp	xzr, xzr, [x28, #24]
    623c:	bl	0 <prio_splay_tree_insert>
    6240:	mov	x0, x28
    6244:	b	627c <GOMP_taskloop_ull+0x8c4>
    6248:	dup	v0.2d, x1
    624c:	str	q0, [x21, #96]
    6250:	str	x1, [x22, #1304]
    6254:	b	60e8 <GOMP_taskloop_ull+0x730>
    6258:	dup	v0.2d, x28
    625c:	str	q0, [x21, #112]
    6260:	str	x28, [x26, #24]
    6264:	b	6080 <GOMP_taskloop_ull+0x6c8>
    6268:	add	x1, x29, #0xe0
    626c:	mov	x0, x20
    6270:	str	w19, [x29, #224]
    6274:	bl	0 <prio_splay_tree_lookup>
    6278:	cbz	x0, 621c <GOMP_taskloop_ull+0x864>
    627c:	ldr	x1, [x0, #8]
    6280:	add	x3, x21, #0x60
    6284:	cbz	x1, 6704 <GOMP_taskloop_ull+0xd4c>
    6288:	ldr	x0, [x1, #8]
    628c:	stp	x1, x0, [x21, #96]
    6290:	str	x3, [x1, #8]
    6294:	ldr	x0, [x21, #104]
    6298:	str	x3, [x0]
    629c:	b	60e8 <GOMP_taskloop_ull+0x730>
    62a0:	cbz	x0, 6670 <GOMP_taskloop_ull+0xcb8>
    62a4:	mov	x0, #0x28                  	// #40
    62a8:	bl	0 <gomp_malloc>
    62ac:	str	x0, [x29, #200]
    62b0:	mov	x0, x24
    62b4:	ldur	q0, [x26, #24]
    62b8:	ldr	x1, [x29, #200]
    62bc:	str	wzr, [x1]
    62c0:	stp	xzr, xzr, [x1, #24]
    62c4:	stur	q0, [x1, #8]
    62c8:	bl	0 <prio_splay_tree_insert>
    62cc:	ldr	x0, [x24]
    62d0:	str	xzr, [x24, #16]
    62d4:	cbz	x0, 6670 <GOMP_taskloop_ull+0xcb8>
    62d8:	add	x1, x29, #0xe0
    62dc:	mov	x0, x24
    62e0:	str	w19, [x29, #224]
    62e4:	bl	0 <prio_splay_tree_lookup>
    62e8:	cbz	x0, 6670 <GOMP_taskloop_ull+0xcb8>
    62ec:	ldr	x1, [x0, #8]
    62f0:	cbz	x1, 66f4 <GOMP_taskloop_ull+0xd3c>
    62f4:	ldr	x3, [x1, #8]
    62f8:	stp	x1, x3, [x21, #112]
    62fc:	str	x28, [x0, #8]
    6300:	ldr	x0, [x21, #112]
    6304:	str	x28, [x0, #8]
    6308:	ldr	x0, [x21, #120]
    630c:	str	x28, [x0]
    6310:	b	6080 <GOMP_taskloop_ull+0x6c8>
    6314:	dup	v0.2d, x28
    6318:	str	q0, [x21, #128]
    631c:	str	x28, [x25, #24]
    6320:	b	60c0 <GOMP_taskloop_ull+0x708>
    6324:	ldr	x0, [x29, #216]
    6328:	cmp	x0, #0x1
    632c:	b.hi	6714 <GOMP_taskloop_ull+0xd5c>  // b.pmore
    6330:	ldr	x21, [x29, #448]
    6334:	mov	x23, x0
    6338:	and	w0, w20, #0x800
    633c:	str	w0, [x29, #188]
    6340:	tbnz	w20, #11, 5a8c <GOMP_taskloop_ull+0xd4>
    6344:	and	w0, w20, #0x1000
    6348:	str	w0, [x29, #188]
    634c:	ldr	w0, [x29, #188]
    6350:	cbnz	w0, 5f0c <GOMP_taskloop_ull+0x554>
    6354:	adrp	x0, 0 <gomp_max_task_priority_var>
    6358:	ldr	w0, [x0]
    635c:	cmp	w0, w19
    6360:	csel	w19, w0, w19, le
    6364:	b	5ab4 <GOMP_taskloop_ull+0xfc>
    6368:	ldr	x0, [x29, #200]
    636c:	neg	x2, x4
    6370:	mov	x3, sp
    6374:	add	x12, x10, x11
    6378:	add	x0, x0, x4
    637c:	sub	x4, x4, #0x1
    6380:	sub	x0, x0, #0x1
    6384:	str	x3, [x29, #168]
    6388:	and	x1, x0, x2
    638c:	add	x0, x23, x23, lsl #1
    6390:	str	x1, [x29, #200]
    6394:	add	x0, x23, x0, lsl #2
    6398:	madd	x1, x1, x23, x4
    639c:	sub	x3, x3, x0, lsl #4
    63a0:	str	x3, [x29, #176]
    63a4:	add	x1, x1, #0xf
    63a8:	mov	sp, x3
    63ac:	and	x1, x1, #0xfffffffffffffff0
    63b0:	lsl	x0, x0, #4
    63b4:	sub	sp, sp, x1
    63b8:	ldr	x1, [x12, #80]
    63bc:	add	x4, sp, x4
    63c0:	and	x26, x4, x2
    63c4:	mov	x3, x1
    63c8:	cbz	x23, 64d4 <GOMP_taskloop_ull+0xb1c>
    63cc:	ldr	x1, [x29, #176]
    63d0:	and	w2, w20, #0x2
    63d4:	mov	x20, x3
    63d8:	stp	x11, x10, [x29, #120]
    63dc:	add	x4, x0, x1
    63e0:	mov	x25, x4
    63e4:	adrp	x0, 0 <gomp_global_icv>
    63e8:	add	x0, x0, #0x0
    63ec:	stp	x26, x22, [x29, #136]
    63f0:	mov	x22, x26
    63f4:	mov	x26, x12
    63f8:	stp	x23, x21, [x29, #152]
    63fc:	mov	x23, x1
    6400:	str	x0, [x29, #192]
    6404:	str	x24, [x29, #432]
    6408:	mov	x24, x27
    640c:	mov	w27, w2
    6410:	ldr	x21, [x29, #200]
    6414:	b	6460 <GOMP_taskloop_ull+0xaa8>
    6418:	ldrb	w4, [x3, #205]
    641c:	cbnz	w4, 6424 <GOMP_taskloop_ull+0xa6c>
    6420:	cbz	w27, 642c <GOMP_taskloop_ull+0xa74>
    6424:	mov	w0, #0x1                   	// #1
    6428:	strb	w0, [x23, #205]
    642c:	ldrb	w4, [x3, #204]
    6430:	ldr	x3, [x3, #40]
    6434:	str	x3, [x23, #40]
    6438:	strb	w4, [x23, #204]
    643c:	str	x23, [x26, #80]
    6440:	mov	x0, x22
    6444:	mov	x1, x24
    6448:	add	x23, x23, #0xd0
    644c:	blr	x28
    6450:	add	x22, x22, x21
    6454:	cmp	x25, x23
    6458:	b.eq	6528 <GOMP_taskloop_ull+0xb70>  // b.none
    645c:	ldr	x3, [x26, #80]
    6460:	mov	x5, x23
    6464:	ldr	x0, [x29, #192]
    6468:	cmp	x3, #0x0
    646c:	add	x4, x3, #0x90
    6470:	str	x20, [x5], #144
    6474:	csel	x4, x0, x4, eq  // eq = none
    6478:	mov	w0, #0x1                   	// #1
    647c:	ldp	x6, x7, [x4]
    6480:	stp	x6, x7, [x23, #144]
    6484:	ldp	x6, x7, [x4, #16]
    6488:	stp	x6, x7, [x5, #16]
    648c:	ldr	x4, [x4, #32]
    6490:	str	x4, [x5, #32]
    6494:	str	xzr, [x23, #8]
    6498:	stp	xzr, xzr, [x23, #24]
    649c:	stp	xzr, xzr, [x23, #40]
    64a0:	stp	xzr, xzr, [x23, #56]
    64a4:	str	xzr, [x23, #72]
    64a8:	str	w19, [x23, #88]
    64ac:	str	w0, [x23, #200]
    64b0:	strb	wzr, [x23, #204]
    64b4:	strb	wzr, [x23, #205]
    64b8:	strb	wzr, [x23, #206]
    64bc:	strb	wzr, [x23, #207]
    64c0:	cbnz	x3, 6418 <GOMP_taskloop_ull+0xa60>
    64c4:	cbz	w27, 643c <GOMP_taskloop_ull+0xa84>
    64c8:	mov	w0, #0x1                   	// #1
    64cc:	strb	w0, [x23, #205]
    64d0:	b	643c <GOMP_taskloop_ull+0xa84>
    64d4:	ldr	x0, [x29, #168]
    64d8:	mov	sp, x0
    64dc:	b	5c50 <GOMP_taskloop_ull+0x298>
    64e0:	sub	w0, w0, w2
    64e4:	sub	w1, w0, w1
    64e8:	ldr	x2, [x29, #216]
    64ec:	cmp	x23, w1, sxtw
    64f0:	csel	w1, w23, w1, cc  // cc = lo, ul, last
    64f4:	ldxr	w0, [x2]
    64f8:	stlxr	w3, wzr, [x2]
    64fc:	cbnz	w3, 64f4 <GOMP_taskloop_ull+0xb3c>
    6500:	tbnz	w0, #31, 6514 <GOMP_taskloop_ull+0xb5c>
    6504:	cbz	w1, 6140 <GOMP_taskloop_ull+0x788>
    6508:	add	x0, x22, #0x80
    650c:	bl	0 <gomp_team_barrier_wake>
    6510:	b	6140 <GOMP_taskloop_ull+0x788>
    6514:	ldr	x0, [x29, #216]
    6518:	str	w1, [x29, #208]
    651c:	bl	0 <gomp_mutex_unlock_slow>
    6520:	ldr	w1, [x29, #208]
    6524:	b	6504 <GOMP_taskloop_ull+0xb4c>
    6528:	ldp	x11, x10, [x29, #120]
    652c:	mov	x25, #0x0                   	// #0
    6530:	ldp	x26, x22, [x29, #136]
    6534:	mov	w19, #0x1                   	// #1
    6538:	ldr	x0, [x29, #176]
    653c:	add	x3, x10, x11
    6540:	add	x20, x0, #0x8
    6544:	mov	x27, x3
    6548:	add	x22, x22, #0x500
    654c:	ldp	x23, x21, [x29, #152]
    6550:	ldr	x24, [x29, #432]
    6554:	b	657c <GOMP_taskloop_ull+0xbc4>
    6558:	ldr	x28, [x27, #80]
    655c:	ldr	x0, [x28, #56]
    6560:	cbnz	x0, 6668 <GOMP_taskloop_ull+0xcb0>
    6564:	ldr	x0, [x28]
    6568:	str	x0, [x27, #80]
    656c:	add	x25, x25, #0x1
    6570:	add	x20, x20, #0xd0
    6574:	cmp	x23, x25
    6578:	b.eq	64d4 <GOMP_taskloop_ull+0xb1c>  // b.none
    657c:	ldr	x0, [x29, #216]
    6580:	ldr	x1, [x29, #200]
    6584:	cmp	x25, x0
    6588:	sub	x0, x20, #0x8
    658c:	str	x0, [x27, #80]
    6590:	ldr	x0, [x29, #448]
    6594:	str	x24, [x26]
    6598:	add	x24, x24, x21
    659c:	str	x24, [x26, #8]
    65a0:	sub	x0, x21, x0
    65a4:	csel	x21, x0, x21, eq  // eq = none
    65a8:	mov	x0, x26
    65ac:	add	x26, x26, x1
    65b0:	ldr	x1, [x29, #208]
    65b4:	blr	x1
    65b8:	ldr	x0, [x20]
    65bc:	cbnz	x0, 65c8 <GOMP_taskloop_ull+0xc10>
    65c0:	ldr	x0, [x20, #16]
    65c4:	cbz	x0, 6558 <GOMP_taskloop_ull+0xba0>
    65c8:	ldaxr	w1, [x22]
    65cc:	cbnz	w1, 65d8 <GOMP_taskloop_ull+0xc20>
    65d0:	stxr	w0, w19, [x22]
    65d4:	cbnz	w0, 65c8 <GOMP_taskloop_ull+0xc10>
    65d8:	cmp	w1, #0x0
    65dc:	b.ne	6850 <GOMP_taskloop_ull+0xe98>  // b.any
    65e0:	ldr	x28, [x20]
    65e4:	cbnz	x28, 6624 <GOMP_taskloop_ull+0xc6c>
    65e8:	ldr	x1, [x20, #16]
    65ec:	mov	x0, x1
    65f0:	cbz	x1, 6608 <GOMP_taskloop_ull+0xc50>
    65f4:	nop
    65f8:	stur	xzr, [x0, #-112]
    65fc:	ldr	x0, [x0]
    6600:	cmp	x1, x0
    6604:	b.ne	65f8 <GOMP_taskloop_ull+0xc40>  // b.any
    6608:	ldxr	w0, [x22]
    660c:	stlxr	w1, wzr, [x22]
    6610:	cbnz	w1, 6608 <GOMP_taskloop_ull+0xc50>
    6614:	tbz	w0, #31, 6558 <GOMP_taskloop_ull+0xba0>
    6618:	mov	x0, x22
    661c:	bl	0 <gomp_mutex_unlock_slow>
    6620:	b	6558 <GOMP_taskloop_ull+0xba0>
    6624:	ldr	x3, [x28, #8]
    6628:	mov	x0, x28
    662c:	ldp	x1, x28, [x28, #24]
    6630:	mov	x2, x3
    6634:	cbz	x3, 6648 <GOMP_taskloop_ull+0xc90>
    6638:	stur	xzr, [x2, #-112]
    663c:	ldr	x2, [x2]
    6640:	cmp	x3, x2
    6644:	b.ne	6638 <GOMP_taskloop_ull+0xc80>  // b.any
    6648:	str	x1, [x29, #192]
    664c:	bl	0 <free>
    6650:	ldr	x1, [x29, #192]
    6654:	mov	x0, x20
    6658:	bl	e0 <gomp_clear_parent_in_tree>
    665c:	cbnz	x28, 6624 <GOMP_taskloop_ull+0xc6c>
    6660:	str	xzr, [x20]
    6664:	b	6608 <GOMP_taskloop_ull+0xc50>
    6668:	bl	0 <free>
    666c:	b	6564 <GOMP_taskloop_ull+0xbac>
    6670:	mov	x0, #0x28                  	// #40
    6674:	bl	0 <gomp_malloc>
    6678:	mov	x1, x0
    667c:	mov	x0, x24
    6680:	str	x1, [x29, #200]
    6684:	str	w19, [x1]
    6688:	stp	xzr, xzr, [x1, #8]
    668c:	stp	xzr, xzr, [x1, #24]
    6690:	bl	0 <prio_splay_tree_insert>
    6694:	ldr	x1, [x29, #200]
    6698:	mov	x0, x1
    669c:	b	62ec <GOMP_taskloop_ull+0x934>
    66a0:	add	x0, x10, x11
    66a4:	ldr	x26, [x0, #80]
    66a8:	cbz	x26, 676c <GOMP_taskloop_ull+0xdb4>
    66ac:	ldr	x0, [x26, #40]
    66b0:	cbz	x0, 66d4 <GOMP_taskloop_ull+0xd1c>
    66b4:	ldrb	w1, [x0, #49]
    66b8:	cbnz	w1, 5c5c <GOMP_taskloop_ull+0x2a4>
    66bc:	ldrb	w1, [x0, #50]
    66c0:	cbz	w1, 66d4 <GOMP_taskloop_ull+0xd1c>
    66c4:	ldr	x0, [x0]
    66c8:	cbz	x0, 66d4 <GOMP_taskloop_ull+0xd1c>
    66cc:	ldrb	w0, [x0, #49]
    66d0:	cbnz	w0, 5c5c <GOMP_taskloop_ull+0x2a4>
    66d4:	adrp	x0, 0 <gomp_max_task_priority_var>
    66d8:	ldr	w0, [x0]
    66dc:	cmp	w0, w19
    66e0:	csel	w19, w0, w19, le
    66e4:	tst	x20, #0x400
    66e8:	ccmp	x22, #0x0, #0x4, ne  // ne = any
    66ec:	b.eq	5ab4 <GOMP_taskloop_ull+0xfc>  // b.none
    66f0:	b	5cf4 <GOMP_taskloop_ull+0x33c>
    66f4:	dup	v0.2d, x28
    66f8:	str	q0, [x21, #112]
    66fc:	str	x28, [x0, #8]
    6700:	b	6080 <GOMP_taskloop_ull+0x6c8>
    6704:	dup	v0.2d, x3
    6708:	str	q0, [x21, #96]
    670c:	str	x3, [x0, #8]
    6710:	b	60e8 <GOMP_taskloop_ull+0x730>
    6714:	ldr	x1, [x29, #448]
    6718:	mov	x23, #0x1                   	// #1
    671c:	mul	x21, x0, x1
    6720:	b	6338 <GOMP_taskloop_ull+0x980>
    6724:	mov	x0, #0x28                  	// #40
    6728:	str	x3, [x29, #200]
    672c:	bl	0 <gomp_malloc>
    6730:	mov	x1, x0
    6734:	ldr	x3, [x29, #200]
    6738:	stp	xzr, xzr, [x0, #8]
    673c:	stp	xzr, xzr, [x0, #24]
    6740:	mov	x0, x3
    6744:	str	w19, [x1]
    6748:	str	x1, [x29, #200]
    674c:	bl	0 <prio_splay_tree_insert>
    6750:	ldr	x1, [x29, #200]
    6754:	mov	x0, x1
    6758:	b	61a8 <GOMP_taskloop_ull+0x7f0>
    675c:	dup	v0.2d, x28
    6760:	str	q0, [x21, #128]
    6764:	str	x28, [x0, #8]
    6768:	b	61d0 <GOMP_taskloop_ull+0x818>
    676c:	adrp	x0, 0 <gomp_max_task_priority_var>
    6770:	ldr	w0, [x0]
    6774:	cmp	w0, w19
    6778:	csel	w19, w0, w19, le
    677c:	tst	x20, #0x400
    6780:	ccmp	x22, #0x0, #0x4, ne  // ne = any
    6784:	b.eq	5ab4 <GOMP_taskloop_ull+0xfc>  // b.none
    6788:	b	5cfc <GOMP_taskloop_ull+0x344>
    678c:	ldr	x0, [x29, #216]
    6790:	bl	0 <gomp_mutex_unlock_slow>
    6794:	b	6140 <GOMP_taskloop_ull+0x788>
    6798:	ldr	w0, [x22, #132]
    679c:	tbnz	w0, #2, 67c4 <GOMP_taskloop_ull+0xe0c>
    67a0:	cbz	x25, 6024 <GOMP_taskloop_ull+0x66c>
    67a4:	ldrb	w0, [x25, #49]
    67a8:	cbnz	w0, 67c4 <GOMP_taskloop_ull+0xe0c>
    67ac:	ldrb	w0, [x25, #50]
    67b0:	cbz	w0, 6018 <GOMP_taskloop_ull+0x660>
    67b4:	ldr	x0, [x25]
    67b8:	cbz	x0, 6018 <GOMP_taskloop_ull+0x660>
    67bc:	ldrb	w0, [x0, #49]
    67c0:	cbz	w0, 6018 <GOMP_taskloop_ull+0x660>
    67c4:	ldr	x0, [x29, #216]
    67c8:	mov	x19, #0x0                   	// #0
    67cc:	bl	208 <gomp_mutex_unlock>
    67d0:	cbnz	x23, 67e8 <GOMP_taskloop_ull+0xe30>
    67d4:	b	6818 <GOMP_taskloop_ull+0xe60>
    67d8:	add	x19, x19, #0x1
    67dc:	bl	0 <free>
    67e0:	cmp	x23, x19
    67e4:	b.eq	6818 <GOMP_taskloop_ull+0xe60>  // b.none
    67e8:	ldr	x0, [x29, #192]
    67ec:	ldr	x20, [x0, x19, lsl #3]
    67f0:	mov	x0, x20
    67f4:	ldr	x1, [x20, #56]
    67f8:	cbz	x1, 67d8 <GOMP_taskloop_ull+0xe20>
    67fc:	mov	x0, x1
    6800:	bl	0 <free>
    6804:	add	x19, x19, #0x1
    6808:	mov	x0, x20
    680c:	bl	0 <free>
    6810:	cmp	x23, x19
    6814:	b.ne	67e8 <GOMP_taskloop_ull+0xe30>  // b.any
    6818:	ldr	w0, [x29, #188]
    681c:	cbz	w0, 685c <GOMP_taskloop_ull+0xea4>
    6820:	ldr	x0, [x29, #112]
    6824:	mov	sp, x0
    6828:	b	5c5c <GOMP_taskloop_ull+0x2a4>
    682c:	mov	x0, x3
    6830:	str	x3, [x29, #176]
    6834:	bl	0 <gomp_mutex_lock_slow>
    6838:	movi	v0.4s, #0x0
    683c:	ldr	x3, [x29, #176]
    6840:	b	5be4 <GOMP_taskloop_ull+0x22c>
    6844:	ldr	x0, [x29, #216]
    6848:	bl	0 <gomp_mutex_lock_slow>
    684c:	b	5ffc <GOMP_taskloop_ull+0x644>
    6850:	mov	x0, x22
    6854:	bl	0 <gomp_mutex_lock_slow>
    6858:	b	65e0 <GOMP_taskloop_ull+0xc28>
    685c:	bl	4208 <GOMP_taskgroup_end>
    6860:	b	6820 <GOMP_taskloop_ull+0xe68>
    6864:	nop

0000000000006868 <GOMP_taskgroup_reduction_unregister>:
    6868:	stp	x29, x30, [sp, #-32]!
    686c:	mov	x29, sp
    6870:	str	x19, [sp, #16]
    6874:	mov	x19, x0
    6878:	ldr	x0, [x0, #40]
    687c:	bl	0 <free>
    6880:	b	688c <GOMP_taskgroup_reduction_unregister+0x24>
    6884:	ldr	x0, [x19, #40]
    6888:	cbnz	x0, 689c <GOMP_taskgroup_reduction_unregister+0x34>
    688c:	ldr	x0, [x19, #16]
    6890:	bl	0 <gomp_aligned_free>
    6894:	ldr	x19, [x19, #32]
    6898:	cbnz	x19, 6884 <GOMP_taskgroup_reduction_unregister+0x1c>
    689c:	ldr	x19, [sp, #16]
    68a0:	ldp	x29, x30, [sp], #32
    68a4:	ret

00000000000068a8 <GOMP_task_reduction_remap>:
    68a8:	adrp	x4, 0 <gomp_tls_data>
    68ac:	ldr	x4, [x4]
    68b0:	mrs	x3, tpidr_el0
    68b4:	stp	x29, x30, [sp, #-32]!
    68b8:	mov	x14, x0
    68bc:	add	x3, x3, x4
    68c0:	mov	x29, sp
    68c4:	stp	x19, x20, [sp, #16]
    68c8:	ldr	w15, [x3, #40]
    68cc:	ldr	x0, [x3, #80]
    68d0:	ldr	x0, [x0, #40]
    68d4:	ldr	x20, [x0, #40]
    68d8:	ldr	x19, [x20, #40]
    68dc:	cbz	x14, 6a00 <GOMP_task_reduction_remap+0x158>
    68e0:	mov	x18, x1
    68e4:	mov	x12, x2
    68e8:	mov	w15, w15
    68ec:	mov	x13, #0x0                   	// #0
    68f0:	b	6920 <GOMP_task_reduction_remap+0x78>
    68f4:	ldp	x4, x3, [x0, #8]
    68f8:	cmp	x13, x18
    68fc:	ldp	x1, x2, [x3, #8]
    6900:	add	x2, x2, x4
    6904:	madd	x1, x15, x1, x2
    6908:	str	x1, [x12]
    690c:	b.cc	69e8 <GOMP_task_reduction_remap+0x140>  // b.lo, b.ul, b.last
    6910:	add	x13, x13, #0x1
    6914:	add	x12, x12, #0x8
    6918:	cmp	x14, x13
    691c:	b.eq	6a00 <GOMP_task_reduction_remap+0x158>  // b.none
    6920:	mov	x1, x12
    6924:	mov	x0, x19
    6928:	bl	0 <htab_find>
    692c:	cbnz	x0, 68f4 <GOMP_task_reduction_remap+0x4c>
    6930:	ldr	x4, [x12]
    6934:	mov	x2, x20
    6938:	ldr	x3, [x2, #16]
    693c:	cmp	x4, x3
    6940:	b.cc	6950 <GOMP_task_reduction_remap+0xa8>  // b.lo, b.ul, b.last
    6944:	ldr	x0, [x2, #48]
    6948:	cmp	x4, x0
    694c:	b.cc	6968 <GOMP_task_reduction_remap+0xc0>  // b.lo, b.ul, b.last
    6950:	ldr	x2, [x2, #32]
    6954:	cbnz	x2, 6938 <GOMP_task_reduction_remap+0x90>
    6958:	adrp	x0, 0 <htab_find>
    695c:	mov	x1, x4
    6960:	add	x0, x0, #0x0
    6964:	bl	0 <gomp_fatal>
    6968:	ldr	x0, [x2, #8]
    696c:	sub	x4, x4, x3
    6970:	cmp	x13, x18
    6974:	udiv	x1, x4, x0
    6978:	msub	x4, x1, x0, x4
    697c:	madd	x0, x15, x0, x4
    6980:	add	x3, x0, x3
    6984:	str	x3, [x12]
    6988:	b.cs	6910 <GOMP_task_reduction_remap+0x68>  // b.hs, b.nlast
    698c:	ldr	x5, [x2]
    6990:	mov	x6, #0x0                   	// #0
    6994:	sub	x5, x5, #0x1
    6998:	b	69a8 <GOMP_task_reduction_remap+0x100>
    699c:	add	x6, x1, #0x1
    69a0:	cmp	x5, x6
    69a4:	b.cc	69d8 <GOMP_task_reduction_remap+0x130>  // b.lo, b.ul, b.last
    69a8:	add	x1, x6, x5
    69ac:	and	x0, x1, #0xfffffffffffffffe
    69b0:	lsr	x1, x1, #1
    69b4:	add	x0, x0, x1
    69b8:	add	x0, x2, x0, lsl #3
    69bc:	ldr	x7, [x0, #64]
    69c0:	cmp	x7, x4
    69c4:	b.cc	699c <GOMP_task_reduction_remap+0xf4>  // b.lo, b.ul, b.last
    69c8:	b.eq	6a0c <GOMP_task_reduction_remap+0x164>  // b.none
    69cc:	sub	x5, x1, #0x1
    69d0:	cmp	x5, x6
    69d4:	b.cs	69a8 <GOMP_task_reduction_remap+0x100>  // b.hs, b.nlast
    69d8:	adrp	x0, 0 <htab_find>
    69dc:	mov	x1, x3
    69e0:	add	x0, x0, #0x0
    69e4:	bl	0 <gomp_fatal>
    69e8:	ldr	x0, [x0]
    69ec:	str	x0, [x12, x14, lsl #3]
    69f0:	add	x13, x13, #0x1
    69f4:	add	x12, x12, #0x8
    69f8:	cmp	x14, x13
    69fc:	b.ne	6920 <GOMP_task_reduction_remap+0x78>  // b.any
    6a00:	ldp	x19, x20, [sp, #16]
    6a04:	ldp	x29, x30, [sp], #32
    6a08:	ret
    6a0c:	ldr	x0, [x0, #56]
    6a10:	str	x0, [x12, x14, lsl #3]
    6a14:	b	6910 <GOMP_task_reduction_remap+0x68>

0000000000006a18 <gomp_parallel_reduction_register>:
    6a18:	stp	x29, x30, [sp, #-96]!
    6a1c:	mov	x29, sp
    6a20:	stp	x19, x20, [sp, #16]
    6a24:	stp	x21, x22, [sp, #32]
    6a28:	mov	x22, #0x0                   	// #0
    6a2c:	stp	x23, x24, [sp, #48]
    6a30:	mov	x24, x0
    6a34:	mov	x0, #0x40                  	// #64
    6a38:	str	x25, [sp, #64]
    6a3c:	mov	w25, w1
    6a40:	bl	0 <gomp_malloc>
    6a44:	mov	x20, x24
    6a48:	movi	v0.4s, #0x0
    6a4c:	mov	x23, x0
    6a50:	str	xzr, [x0, #40]
    6a54:	strh	wzr, [x0, #48]
    6a58:	strb	wzr, [x0, #50]
    6a5c:	str	q0, [x0]
    6a60:	stur	q0, [x0, #24]
    6a64:	str	wzr, [x0, #52]
    6a68:	str	xzr, [x0, #56]
    6a6c:	b	6a74 <gomp_parallel_reduction_register+0x5c>
    6a70:	mov	x20, x0
    6a74:	ldp	x19, x0, [x20, #8]
    6a78:	mul	x19, x25, x19
    6a7c:	mov	x1, x19
    6a80:	bl	0 <gomp_aligned_alloc>
    6a84:	mov	x2, x19
    6a88:	mov	x21, x0
    6a8c:	mov	w1, #0x0                   	// #0
    6a90:	bl	0 <memset>
    6a94:	ldr	x0, [x20, #32]
    6a98:	add	x19, x19, x21
    6a9c:	ldr	x1, [x20]
    6aa0:	str	x21, [x20, #16]
    6aa4:	stp	xzr, x19, [x20, #40]
    6aa8:	add	x22, x22, x1
    6aac:	cbnz	x0, 6a70 <gomp_parallel_reduction_register+0x58>
    6ab0:	adrp	x3, 0 <htab_find>
    6ab4:	mov	w19, #0x1e                  	// #30
    6ab8:	add	x3, x3, #0x0
    6abc:	mov	w0, #0x0                   	// #0
    6ac0:	b	6ae0 <gomp_parallel_reduction_register+0xc8>
    6ac4:	sub	w1, w19, w0
    6ac8:	add	w1, w0, w1, lsr #1
    6acc:	ubfiz	x2, x1, #4, #32
    6ad0:	ldr	w2, [x3, x2]
    6ad4:	cmp	x22, x2
    6ad8:	b.hi	6ba4 <gomp_parallel_reduction_register+0x18c>  // b.pmore
    6adc:	mov	w19, w1
    6ae0:	cmp	w19, w0
    6ae4:	b.ne	6ac4 <gomp_parallel_reduction_register+0xac>  // b.any
    6ae8:	ubfiz	x0, x19, #4, #32
    6aec:	ldr	w21, [x3, x0]
    6af0:	cmp	x22, x21
    6af4:	b.hi	6bac <gomp_parallel_reduction_register+0x194>  // b.pmore
    6af8:	add	x20, x21, #0x4
    6afc:	mov	x22, x24
    6b00:	lsl	x20, x20, #3
    6b04:	mov	x0, x20
    6b08:	bl	0 <gomp_malloc>
    6b0c:	sub	x2, x20, #0x20
    6b10:	mov	x20, x0
    6b14:	mov	w1, #0x0                   	// #0
    6b18:	add	x0, x0, #0x20
    6b1c:	stp	x21, xzr, [x20]
    6b20:	str	xzr, [x20, #16]
    6b24:	str	w19, [x20, #24]
    6b28:	bl	0 <memset>
    6b2c:	str	x20, [sp, #88]
    6b30:	ldr	x0, [x22]
    6b34:	add	x20, x22, #0x38
    6b38:	mov	x21, #0x0                   	// #0
    6b3c:	cbz	x0, 6b6c <gomp_parallel_reduction_register+0x154>
    6b40:	str	x22, [x20, #16]
    6b44:	mov	x19, x20
    6b48:	add	x0, sp, #0x58
    6b4c:	add	x21, x21, #0x1
    6b50:	mov	x1, x19
    6b54:	bl	e58 <htab_find_slot.constprop.0>
    6b58:	ldr	x1, [x22]
    6b5c:	str	x19, [x0]
    6b60:	add	x20, x20, #0x18
    6b64:	cmp	x21, x1
    6b68:	b.cc	6b40 <gomp_parallel_reduction_register+0x128>  // b.lo, b.ul, b.last
    6b6c:	ldr	x0, [x22, #32]
    6b70:	cbz	x0, 6b7c <gomp_parallel_reduction_register+0x164>
    6b74:	mov	x22, x0
    6b78:	b	6b30 <gomp_parallel_reduction_register+0x118>
    6b7c:	ldr	x0, [sp, #88]
    6b80:	ldp	x19, x20, [sp, #16]
    6b84:	ldr	x25, [sp, #64]
    6b88:	str	x0, [x22, #40]
    6b8c:	str	x24, [x23, #40]
    6b90:	mov	x0, x23
    6b94:	ldp	x21, x22, [sp, #32]
    6b98:	ldp	x23, x24, [sp, #48]
    6b9c:	ldp	x29, x30, [sp], #96
    6ba0:	ret
    6ba4:	add	w0, w1, #0x1
    6ba8:	b	6ae0 <gomp_parallel_reduction_register+0xc8>
    6bac:	bl	0 <abort>

0000000000006bb0 <gomp_workshare_task_reduction_register>:
    6bb0:	adrp	x3, 0 <gomp_tls_data>
    6bb4:	ldr	x3, [x3]
    6bb8:	mrs	x2, tpidr_el0
    6bbc:	stp	x29, x30, [sp, #-112]!
    6bc0:	add	x2, x2, x3
    6bc4:	mov	x29, sp
    6bc8:	stp	x25, x26, [sp, #64]
    6bcc:	mov	x26, #0x0                   	// #0
    6bd0:	ldr	x25, [x2, #80]
    6bd4:	stp	x19, x20, [sp, #16]
    6bd8:	mov	x19, x0
    6bdc:	stp	x23, x24, [sp, #48]
    6be0:	mov	x24, x0
    6be4:	ldr	x2, [x2, #16]
    6be8:	stp	x21, x22, [sp, #32]
    6bec:	ldr	x0, [x25, #40]
    6bf0:	ldr	w23, [x2]
    6bf4:	ldr	x21, [x0, #40]
    6bf8:	str	x27, [sp, #80]
    6bfc:	cbnz	x1, 6dbc <gomp_workshare_task_reduction_register+0x20c>
    6c00:	mov	w23, w23
    6c04:	b	6c0c <gomp_workshare_task_reduction_register+0x5c>
    6c08:	mov	x19, x0
    6c0c:	ldp	x20, x0, [x19, #8]
    6c10:	mul	x20, x23, x20
    6c14:	mov	x1, x20
    6c18:	bl	0 <gomp_aligned_alloc>
    6c1c:	mov	x2, x20
    6c20:	mov	x22, x0
    6c24:	mov	w1, #0x0                   	// #0
    6c28:	bl	0 <memset>
    6c2c:	ldr	x0, [x19, #32]
    6c30:	add	x20, x20, x22
    6c34:	ldr	x1, [x19]
    6c38:	str	x22, [x19, #16]
    6c3c:	stp	xzr, x20, [x19, #40]
    6c40:	add	x26, x26, x1
    6c44:	cbnz	x0, 6c08 <gomp_workshare_task_reduction_register+0x58>
    6c48:	str	x21, [x19, #32]
    6c4c:	mov	x23, x21
    6c50:	cbz	x21, 6c60 <gomp_workshare_task_reduction_register+0xb0>
    6c54:	ldr	x0, [x21, #40]
    6c58:	mov	x21, #0x0                   	// #0
    6c5c:	cbnz	x0, 6dec <gomp_workshare_task_reduction_register+0x23c>
    6c60:	adrp	x3, 0 <htab_find>
    6c64:	mov	w19, #0x1e                  	// #30
    6c68:	add	x3, x3, #0x0
    6c6c:	mov	w0, #0x0                   	// #0
    6c70:	b	6c90 <gomp_workshare_task_reduction_register+0xe0>
    6c74:	sub	w1, w19, w0
    6c78:	add	w1, w0, w1, lsr #1
    6c7c:	ubfiz	x2, x1, #4, #32
    6c80:	ldr	w2, [x3, x2]
    6c84:	cmp	x26, x2
    6c88:	b.hi	6db4 <gomp_workshare_task_reduction_register+0x204>  // b.pmore
    6c8c:	mov	w19, w1
    6c90:	cmp	w19, w0
    6c94:	b.ne	6c74 <gomp_workshare_task_reduction_register+0xc4>  // b.any
    6c98:	ubfiz	x0, x19, #4, #32
    6c9c:	ldr	w27, [x3, x0]
    6ca0:	cmp	x26, x27
    6ca4:	b.hi	6e00 <gomp_workshare_task_reduction_register+0x250>  // b.pmore
    6ca8:	add	x20, x27, #0x4
    6cac:	lsl	x20, x20, #3
    6cb0:	mov	x0, x20
    6cb4:	bl	0 <gomp_malloc>
    6cb8:	mov	x22, x0
    6cbc:	sub	x2, x20, #0x20
    6cc0:	add	x0, x0, #0x20
    6cc4:	mov	w1, #0x0                   	// #0
    6cc8:	stp	x27, xzr, [x22]
    6ccc:	str	xzr, [x22, #16]
    6cd0:	str	w19, [x22, #24]
    6cd4:	bl	0 <memset>
    6cd8:	str	x22, [sp, #104]
    6cdc:	cbz	x21, 6d34 <gomp_workshare_task_reduction_register+0x184>
    6ce0:	mov	x19, x21
    6ce4:	ldp	x1, x2, [x21, #8]
    6ce8:	ldr	x0, [x19], #32
    6cec:	add	x21, x19, x0, lsl #3
    6cf0:	sub	x0, x1, x2
    6cf4:	str	x0, [x22, #8]
    6cf8:	b	6d08 <gomp_workshare_task_reduction_register+0x158>
    6cfc:	add	x19, x19, #0x8
    6d00:	cmp	x21, x19
    6d04:	b.ls	6d34 <gomp_workshare_task_reduction_register+0x184>  // b.plast
    6d08:	ldr	x20, [x19]
    6d0c:	cmp	x20, #0x1
    6d10:	b.ls	6cfc <gomp_workshare_task_reduction_register+0x14c>  // b.plast
    6d14:	ldr	x1, [x20]
    6d18:	mov	x0, x22
    6d1c:	add	x19, x19, #0x8
    6d20:	eor	x1, x1, x1, lsr #32
    6d24:	bl	148 <find_empty_slot_for_expand>
    6d28:	str	x20, [x0]
    6d2c:	cmp	x21, x19
    6d30:	b.hi	6d08 <gomp_workshare_task_reduction_register+0x158>  // b.pmore
    6d34:	mov	x22, x24
    6d38:	ldr	x0, [x22]
    6d3c:	add	x20, x22, #0x38
    6d40:	mov	x21, #0x0                   	// #0
    6d44:	cbz	x0, 6d74 <gomp_workshare_task_reduction_register+0x1c4>
    6d48:	str	x22, [x20, #16]
    6d4c:	mov	x19, x20
    6d50:	add	x0, sp, #0x68
    6d54:	add	x21, x21, #0x1
    6d58:	mov	x1, x19
    6d5c:	bl	e58 <htab_find_slot.constprop.0>
    6d60:	ldr	x1, [x22]
    6d64:	str	x19, [x0]
    6d68:	add	x20, x20, #0x18
    6d6c:	cmp	x21, x1
    6d70:	b.cc	6d48 <gomp_workshare_task_reduction_register+0x198>  // b.lo, b.ul, b.last
    6d74:	ldr	x0, [x22, #32]
    6d78:	cmp	x23, x0
    6d7c:	b.eq	6d88 <gomp_workshare_task_reduction_register+0x1d8>  // b.none
    6d80:	mov	x22, x0
    6d84:	b	6d38 <gomp_workshare_task_reduction_register+0x188>
    6d88:	ldr	x0, [x25, #40]
    6d8c:	ldr	x1, [sp, #104]
    6d90:	ldp	x19, x20, [sp, #16]
    6d94:	ldp	x25, x26, [sp, #64]
    6d98:	ldr	x27, [sp, #80]
    6d9c:	str	x1, [x22, #40]
    6da0:	ldp	x21, x22, [sp, #32]
    6da4:	str	x24, [x0, #40]
    6da8:	ldp	x23, x24, [sp, #48]
    6dac:	ldp	x29, x30, [sp], #112
    6db0:	ret
    6db4:	add	w0, w1, #0x1
    6db8:	b	6c90 <gomp_workshare_task_reduction_register+0xe0>
    6dbc:	ldr	x0, [x1, #16]
    6dc0:	str	x0, [x19, #16]
    6dc4:	ldr	x0, [x19, #32]
    6dc8:	ldr	x2, [x1, #48]
    6dcc:	str	x2, [x19, #48]
    6dd0:	ldr	x2, [x19]
    6dd4:	ldr	x1, [x1, #32]
    6dd8:	str	xzr, [x19, #40]
    6ddc:	add	x26, x26, x2
    6de0:	cbz	x0, 6c48 <gomp_workshare_task_reduction_register+0x98>
    6de4:	mov	x19, x0
    6de8:	b	6bfc <gomp_workshare_task_reduction_register+0x4c>
    6dec:	mov	x21, x0
    6df0:	ldp	x0, x1, [x0, #8]
    6df4:	sub	x0, x0, x1
    6df8:	add	x26, x26, x0
    6dfc:	b	6c60 <gomp_workshare_task_reduction_register+0xb0>
    6e00:	bl	0 <abort>
    6e04:	nop

0000000000006e08 <gomp_workshare_taskgroup_start>:
    6e08:	stp	x29, x30, [sp, #-32]!
    6e0c:	mov	x29, sp
    6e10:	stp	x19, x20, [sp, #16]
    6e14:	mrs	x19, tpidr_el0
    6e18:	adrp	x20, 0 <gomp_tls_data>
    6e1c:	ldr	x20, [x20]
    6e20:	add	x0, x19, x20
    6e24:	ldr	x0, [x0, #16]
    6e28:	cbz	x0, 6e78 <gomp_workshare_taskgroup_start+0x70>
    6e2c:	add	x19, x19, x20
    6e30:	mov	x0, #0x40                  	// #64
    6e34:	ldr	x20, [x19, #80]
    6e38:	ldr	x19, [x20, #40]
    6e3c:	bl	0 <gomp_malloc>
    6e40:	stp	x19, xzr, [x0]
    6e44:	stp	xzr, xzr, [x0, #24]
    6e48:	cbz	x19, 6e50 <gomp_workshare_taskgroup_start+0x48>
    6e4c:	ldr	x19, [x19, #40]
    6e50:	str	x19, [x0, #40]
    6e54:	strh	wzr, [x0, #48]
    6e58:	mov	w1, #0x1                   	// #1
    6e5c:	str	wzr, [x0, #52]
    6e60:	str	xzr, [x0, #56]
    6e64:	str	x0, [x20, #40]
    6e68:	strb	w1, [x0, #50]
    6e6c:	ldp	x19, x20, [sp, #16]
    6e70:	ldp	x29, x30, [sp], #32
    6e74:	ret
    6e78:	bl	228 <gomp_create_artificial_team>
    6e7c:	b	6e2c <gomp_workshare_taskgroup_start+0x24>

0000000000006e80 <GOMP_workshare_task_reduction_unregister>:
    6e80:	stp	x29, x30, [sp, #-48]!
    6e84:	mrs	x1, tpidr_el0
    6e88:	mov	x29, sp
    6e8c:	stp	x19, x20, [sp, #16]
    6e90:	adrp	x19, 0 <gomp_tls_data>
    6e94:	ldr	x19, [x19]
    6e98:	stp	x21, x22, [sp, #32]
    6e9c:	and	w21, w0, #0xff
    6ea0:	add	x19, x1, x19
    6ea4:	ldr	x0, [x19, #80]
    6ea8:	ldr	x22, [x19, #16]
    6eac:	ldr	x0, [x0, #40]
    6eb0:	ldr	x20, [x0, #40]
    6eb4:	bl	4208 <GOMP_taskgroup_end>
    6eb8:	ldr	w0, [x19, #40]
    6ebc:	cbnz	w0, 6ef8 <GOMP_workshare_task_reduction_unregister+0x78>
    6ec0:	ldr	x0, [x20, #40]
    6ec4:	bl	0 <free>
    6ec8:	b	6ed4 <GOMP_workshare_task_reduction_unregister+0x54>
    6ecc:	ldr	x0, [x20, #40]
    6ed0:	cbnz	x0, 6ee4 <GOMP_workshare_task_reduction_unregister+0x64>
    6ed4:	ldr	x0, [x20, #16]
    6ed8:	bl	0 <gomp_aligned_free>
    6edc:	ldr	x20, [x20, #32]
    6ee0:	cbnz	x20, 6ecc <GOMP_workshare_task_reduction_unregister+0x4c>
    6ee4:	cbz	w21, 6f04 <GOMP_workshare_task_reduction_unregister+0x84>
    6ee8:	ldp	x19, x20, [sp, #16]
    6eec:	ldp	x21, x22, [sp, #32]
    6ef0:	ldp	x29, x30, [sp], #48
    6ef4:	ret
    6ef8:	ldr	x0, [x20, #40]
    6efc:	bl	0 <free>
    6f00:	cbnz	w21, 6ee8 <GOMP_workshare_task_reduction_unregister+0x68>
    6f04:	add	x0, x22, #0x80
    6f08:	ldp	x19, x20, [sp, #16]
    6f0c:	ldp	x21, x22, [sp, #32]
    6f10:	ldp	x29, x30, [sp], #48
    6f14:	b	0 <gomp_team_barrier_wait>

0000000000006f18 <gomp_ialias_omp_in_final>:
    6f18:	adrp	x2, 0 <gomp_tls_data>
    6f1c:	ldr	x2, [x2]
    6f20:	mrs	x1, tpidr_el0
    6f24:	mov	w0, #0x0                   	// #0
    6f28:	add	x1, x1, x2
    6f2c:	ldr	x1, [x1, #80]
    6f30:	cbz	x1, 6f38 <gomp_ialias_omp_in_final+0x20>
    6f34:	ldrb	w0, [x1, #205]
    6f38:	ret

team.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_free_pool_helper>:
       0:	stp	x29, x30, [sp, #-16]!
       4:	add	x0, x0, #0x40
       8:	mov	x29, sp
       c:	bl	0 <gomp_barrier_wait_last>
      10:	mrs	x0, tpidr_el0
      14:	add	x0, x0, #0x0, lsl #12
      18:	add	x0, x0, #0x0
      1c:	str	xzr, [x0, #80]
      20:	str	xzr, [x0, #96]
      24:	bl	0 <pthread_self>
      28:	bl	0 <pthread_detach>
      2c:	mov	x0, #0x0                   	// #0
      30:	bl	0 <pthread_exit>
      34:	nop

0000000000000038 <gomp_pause_pool_helper>:
      38:	stp	x29, x30, [sp, #-16]!
      3c:	add	x0, x0, #0x40
      40:	mov	x29, sp
      44:	bl	0 <gomp_barrier_wait_last>
      48:	mrs	x1, tpidr_el0
      4c:	mov	x0, #0x0                   	// #0
      50:	add	x1, x1, #0x0, lsl #12
      54:	add	x1, x1, #0x0
      58:	str	xzr, [x1, #80]
      5c:	str	xzr, [x1, #96]
      60:	bl	0 <pthread_exit>
      64:	nop

0000000000000068 <gomp_thread_start>:
      68:	stp	x29, x30, [sp, #-64]!
      6c:	mov	x29, sp
      70:	stp	x23, x24, [sp, #48]
      74:	mrs	x24, tpidr_el0
      78:	add	x1, x24, #0x0, lsl #12
      7c:	add	x1, x1, #0x0
      80:	ldp	x4, x5, [x0, #16]
      84:	stp	x19, x20, [sp, #16]
      88:	ldr	w11, [x0, #96]
      8c:	stp	x21, x22, [sp, #32]
      90:	add	x10, x1, #0x58
      94:	ldp	x8, x9, [x0, #32]
      98:	mov	x2, x4
      9c:	ldp	x20, x21, [x0]
      a0:	ldp	x23, x22, [x0, #80]
      a4:	stp	x8, x9, [x1, #32]
      a8:	ldrb	w8, [x0, #100]
      ac:	ldr	w7, [x1, #40]
      b0:	ldr	x9, [x4, #80]
      b4:	stp	x4, x5, [x1, #16]
      b8:	ldp	x4, x5, [x0, #48]
      bc:	stp	x4, x5, [x1, #48]
      c0:	ldp	x4, x5, [x0, #64]
      c4:	stp	x4, x5, [x1, #64]
      c8:	str	x23, [x1, #80]
      cc:	str	wzr, [x1, #88]
      d0:	str	w11, [x1, #92]
      d4:	str	x22, [x1, #96]
      d8:	str	x10, [x9, x7, lsl #3]
      dc:	cbz	w8, 13c <gomp_thread_start+0xd4>
      e0:	add	x19, x2, #0x80
      e4:	mov	x0, x19
      e8:	bl	0 <gomp_barrier_wait>
      ec:	mov	x0, x21
      f0:	blr	x20
      f4:	mov	x0, x19
      f8:	bl	0 <gomp_team_barrier_wait_final>
      fc:	ldr	x0, [x23, #56]
     100:	cbnz	x0, 198 <gomp_thread_start+0x130>
     104:	mov	x0, x19
     108:	bl	0 <gomp_barrier_wait_last>
     10c:	add	x24, x24, #0x0, lsl #12
     110:	add	x24, x24, #0x0
     114:	bl	0 <pthread_self>
     118:	bl	0 <pthread_detach>
     11c:	ldp	x19, x20, [sp, #16]
     120:	mov	x0, #0x0                   	// #0
     124:	ldp	x21, x22, [sp, #32]
     128:	str	xzr, [x24, #80]
     12c:	str	xzr, [x24, #96]
     130:	ldp	x23, x24, [sp, #48]
     134:	ldp	x29, x30, [sp], #64
     138:	ret
     13c:	ldr	x2, [x22], #64
     140:	mov	x19, x1
     144:	mov	x0, x22
     148:	str	x1, [x2, x7, lsl #3]
     14c:	bl	0 <gomp_barrier_wait>
     150:	b	164 <gomp_thread_start+0xfc>
     154:	bl	0 <gomp_barrier_wait>
     158:	ldp	x20, x21, [x19]
     15c:	str	xzr, [x19]
     160:	cbz	x20, 10c <gomp_thread_start+0xa4>
     164:	mov	x0, x21
     168:	ldr	x21, [x19, #16]
     16c:	ldr	x23, [x19, #80]
     170:	blr	x20
     174:	add	x0, x21, #0x80
     178:	bl	0 <gomp_team_barrier_wait_final>
     17c:	mov	x0, x22
     180:	ldr	x1, [x23, #56]
     184:	cbz	x1, 154 <gomp_thread_start+0xec>
     188:	mov	x0, x1
     18c:	bl	0 <free>
     190:	mov	x0, x22
     194:	b	154 <gomp_thread_start+0xec>
     198:	bl	0 <free>
     19c:	b	104 <gomp_thread_start+0x9c>

00000000000001a0 <gomp_new_team>:
     1a0:	stp	x29, x30, [sp, #-48]!
     1a4:	mov	x29, sp
     1a8:	stp	x19, x20, [sp, #16]
     1ac:	mrs	x19, tpidr_el0
     1b0:	add	x19, x19, #0x0, lsl #12
     1b4:	add	x19, x19, #0x0
     1b8:	stp	x21, x22, [sp, #32]
     1bc:	mov	w22, w0
     1c0:	mov	x20, x22
     1c4:	ldr	x0, [x19, #16]
     1c8:	cbz	x0, 2a0 <gomp_new_team+0x100>
     1cc:	mov	w1, #0xd8                  	// #216
     1d0:	mov	x0, #0x540                 	// #1344
     1d4:	umaddl	x0, w20, w1, x0
     1d8:	bl	0 <gomp_malloc>
     1dc:	mov	x19, x0
     1e0:	dup	v0.2s, w20
     1e4:	str	w20, [x0]
     1e8:	stp	w20, wzr, [x0, #128]
     1ec:	str	wzr, [x0, #1280]
     1f0:	str	d0, [x0, #192]
     1f4:	add	x0, x19, #0x100
     1f8:	mov	w1, #0x8                   	// #8
     1fc:	str	w1, [x19, #4]
     200:	mov	w2, w20
     204:	str	x0, [x19, #88]
     208:	mov	x1, #0x0                   	// #0
     20c:	str	xzr, [x19, #112]
     210:	bl	0 <gomp_init_work_share>
     214:	str	wzr, [x19, #72]
     218:	mov	w1, #0xd0                  	// #208
     21c:	mov	x2, #0x540                 	// #1344
     220:	add	x0, x19, #0x180
     224:	add	x8, x19, #0x200
     228:	umaddl	x20, w20, w1, x2
     22c:	add	x7, x19, #0x280
     230:	add	x6, x19, #0x300
     234:	add	x5, x19, #0x380
     238:	add	x4, x19, #0x400
     23c:	add	x2, x19, x20
     240:	add	x3, x19, #0x480
     244:	add	x1, x19, #0x600
     248:	str	x2, [x19, #80]
     24c:	add	x2, x19, #0x48
     250:	stp	x0, xzr, [x19, #96]
     254:	mov	x0, x19
     258:	str	xzr, [x19, #312]
     25c:	str	x8, [x19, #464]
     260:	str	x7, [x19, #592]
     264:	str	x6, [x19, #720]
     268:	str	x5, [x19, #848]
     26c:	str	x4, [x19, #976]
     270:	str	x3, [x19, #1104]
     274:	str	xzr, [x19, #1232]
     278:	str	x2, [x19, x20]
     27c:	str	xzr, [x19, #1288]
     280:	stp	xzr, xzr, [x1, #-232]
     284:	str	xzr, [x19, #1320]
     288:	str	xzr, [x19, #1328]
     28c:	str	wzr, [x19, #1336]
     290:	ldp	x19, x20, [sp, #16]
     294:	ldp	x21, x22, [sp, #32]
     298:	ldp	x29, x30, [sp], #48
     29c:	ret
     2a0:	ldr	x21, [x19, #96]
     2a4:	cbz	x21, 2c4 <gomp_new_team+0x124>
     2a8:	ldr	x19, [x21, #16]
     2ac:	cbz	x19, 1cc <gomp_new_team+0x2c>
     2b0:	ldr	w0, [x19]
     2b4:	cmp	w20, w0
     2b8:	b.ne	1cc <gomp_new_team+0x2c>  // b.any
     2bc:	str	xzr, [x21, #16]
     2c0:	b	1f4 <gomp_new_team+0x54>
     2c4:	mov	x0, #0xc0                  	// #192
     2c8:	bl	0 <gomp_malloc>
     2cc:	adrp	x2, 4 <gomp_free_pool_helper+0x4>
     2d0:	mov	x21, x0
     2d4:	mov	x1, x19
     2d8:	str	x21, [x19, #96]
     2dc:	ldr	w0, [x2]
     2e0:	str	xzr, [x21]
     2e4:	str	xzr, [x21, #8]
     2e8:	stp	xzr, x22, [x21, #16]
     2ec:	bl	0 <pthread_setspecific>
     2f0:	b	2a8 <gomp_new_team+0x108>
     2f4:	nop

00000000000002f8 <gomp_team_start>:
     2f8:	stp	x29, x30, [sp, #-320]!
     2fc:	mrs	x6, tpidr_el0
     300:	mov	x29, sp
     304:	stp	x19, x20, [sp, #16]
     308:	adrp	x19, 0 <gomp_global_icv>
     30c:	add	x19, x19, #0x0
     310:	stp	x21, x22, [sp, #32]
     314:	stp	x23, x24, [sp, #48]
     318:	add	x24, x6, #0x0, lsl #12
     31c:	add	x24, x24, #0x0
     320:	stp	x25, x26, [sp, #64]
     324:	mov	x26, x4
     328:	stp	x27, x28, [sp, #80]
     32c:	str	x6, [x29, #160]
     330:	adrp	x6, 0 <gomp_places_list>
     334:	ldr	x22, [x24, #80]
     338:	stp	x1, x0, [x29, #192]
     33c:	ldr	x7, [x6]
     340:	str	x5, [x29, #216]
     344:	ldr	w6, [x24, #44]
     348:	str	w6, [x29, #128]
     34c:	cmp	w6, #0x0
     350:	str	w2, [x29, #236]
     354:	cset	w8, ne  // ne = any
     358:	str	w8, [x29, #180]
     35c:	cmp	x22, #0x0
     360:	add	x8, x22, #0x90
     364:	mov	w2, w6
     368:	csel	x19, x19, x8, eq  // eq = none
     36c:	ldr	x21, [x24, #96]
     370:	cbnz	x7, cfc <gomp_team_start+0xa04>
     374:	ldr	x0, [x29, #160]
     378:	add	w2, w2, #0x1
     37c:	ldr	w4, [x29, #236]
     380:	add	x0, x0, #0x0, lsl #12
     384:	add	x0, x0, #0x0
     388:	cmp	w4, #0x1
     38c:	ldp	x8, x9, [x0, #16]
     390:	stp	x8, x9, [x26, #8]
     394:	ldp	x8, x9, [x0, #32]
     398:	stp	x8, x9, [x26, #24]
     39c:	ldp	x8, x9, [x0, #48]
     3a0:	stp	x8, x9, [x26, #40]
     3a4:	ldp	x8, x9, [x0, #64]
     3a8:	str	x26, [x0, #16]
     3ac:	stp	wzr, w2, [x0, #40]
     3b0:	stp	x8, x9, [x26, #56]
     3b4:	b.ls	3c4 <gomp_team_start+0xcc>  // b.plast
     3b8:	ldr	w1, [x0, #48]
     3bc:	add	w1, w1, #0x1
     3c0:	str	w1, [x0, #48]
     3c4:	ldr	x0, [x29, #160]
     3c8:	adrp	x5, 0 <gomp_nthreads_var_list>
     3cc:	add	x4, x26, #0x100
     3d0:	str	x4, [x29, #208]
     3d4:	add	x1, x0, #0x0, lsl #12
     3d8:	add	x1, x1, #0x0
     3dc:	add	x0, x26, #0x540
     3e0:	ldr	x5, [x5]
     3e4:	stp	xzr, xzr, [x1, #64]
     3e8:	stp	x4, xzr, [x1, #24]
     3ec:	str	x0, [x1, #80]
     3f0:	ldr	x1, [x19]
     3f4:	str	x1, [x29, #224]
     3f8:	cbnz	x5, d30 <gomp_team_start+0xa38>
     3fc:	ldrb	w1, [x19, #26]
     400:	str	w1, [x29, #176]
     404:	cbz	w1, 418 <gomp_team_start+0x120>
     408:	tst	x3, #0x7
     40c:	and	w3, w3, #0x7
     410:	csel	w1, w3, w1, ne  // ne = any
     414:	str	w1, [x29, #176]
     418:	adrp	x1, 0 <gomp_bind_var_list>
     41c:	ldr	w3, [x29, #176]
     420:	str	w3, [x29, #232]
     424:	ldr	x1, [x1]
     428:	cbnz	x1, d50 <gomp_team_start+0xa58>
     42c:	mov	x2, x19
     430:	mov	x1, x22
     434:	bl	0 <gomp_init_task>
     438:	ldr	x0, [x29, #160]
     43c:	ldr	x2, [x29, #216]
     440:	add	x1, x0, #0x0, lsl #12
     444:	add	x1, x1, #0x0
     448:	ldr	w0, [x29, #236]
     44c:	cmp	w0, #0x1
     450:	ldr	x0, [x1, #80]
     454:	str	x2, [x0, #40]
     458:	ldr	x0, [x29, #224]
     45c:	str	x0, [x26, #1488]
     460:	ldrb	w0, [x29, #232]
     464:	strb	w0, [x26, #1514]
     468:	b.eq	6b0 <gomp_team_start+0x3b8>  // b.none
     46c:	adrp	x0, 0 <gomp_places_list>
     470:	ldr	x0, [x0]
     474:	cbnz	x0, d74 <gomp_team_start+0xa7c>
     478:	str	wzr, [x29, #124]
     47c:	str	wzr, [x29, #132]
     480:	stp	wzr, wzr, [x29, #152]
     484:	str	wzr, [x29, #176]
     488:	ldr	w1, [x29, #128]
     48c:	cbz	w1, 6d0 <gomp_team_start+0x3d8>
     490:	ldr	w1, [x29, #236]
     494:	cbnz	w1, 1064 <gomp_team_start+0xd6c>
     498:	mov	w25, #0x1                   	// #1
     49c:	str	wzr, [x29, #112]
     4a0:	stp	wzr, wzr, [x29, #136]
     4a4:	str	xzr, [x29, #144]
     4a8:	cbnz	x0, ea0 <gomp_team_start+0xba8>
     4ac:	ldr	w2, [x29, #236]
     4b0:	mov	w1, #0x70                  	// #112
     4b4:	adrp	x27, 40 <gomp_pause_pool_helper+0x8>
     4b8:	add	x27, x27, #0x0
     4bc:	sub	w0, w2, w25
     4c0:	cmp	w25, w2
     4c4:	mov	x2, sp
     4c8:	umsubl	x0, w0, w1, x2
     4cc:	mov	sp, x0
     4d0:	mov	x23, sp
     4d4:	b.cs	660 <gomp_team_start+0x368>  // b.hs, b.nlast
     4d8:	adrp	x28, 0 <gomp_free_pool_helper>
     4dc:	add	x0, x28, #0x0
     4e0:	str	x0, [x29, #168]
     4e4:	mov	w7, #0xd0                  	// #208
     4e8:	ldr	x0, [x29, #160]
     4ec:	umaddl	x7, w25, w7, x26
     4f0:	ldr	w1, [x29, #124]
     4f4:	ubfiz	x4, x25, #3, #32
     4f8:	add	x28, x0, #0x0, lsl #12
     4fc:	add	x28, x28, #0x0
     500:	ldr	w0, [x29, #236]
     504:	add	x24, x7, #0x540
     508:	adrp	x8, 0 <gomp_places_list>
     50c:	sub	w0, w0, w1
     510:	add	x20, x8, #0x0
     514:	str	w0, [x29, #120]
     518:	mov	x0, x24
     51c:	mov	x24, x19
     520:	mov	x19, x23
     524:	mov	x23, x0
     528:	str	x21, [x29, #184]
     52c:	mov	x21, x20
     530:	mov	w20, w25
     534:	mov	x25, x22
     538:	mov	x22, x4
     53c:	b	5e0 <gomp_team_start+0x2e8>
     540:	ldp	x0, x3, [x29, #200]
     544:	str	x0, [x19]
     548:	ldr	w7, [x26, #36]
     54c:	mov	x2, x24
     550:	ldr	w10, [x28, #48]
     554:	mov	x1, x25
     558:	add	w7, w7, #0x1
     55c:	stp	x26, x3, [x19, #16]
     560:	ldr	x0, [x29, #192]
     564:	str	x0, [x19, #8]
     568:	str	xzr, [x19, #32]
     56c:	mov	x0, x23
     570:	stp	w20, w7, [x19, #40]
     574:	str	w10, [x19, #48]
     578:	stp	xzr, xzr, [x19, #64]
     57c:	str	x23, [x19, #80]
     580:	bl	0 <gomp_init_task>
     584:	ldr	x0, [x19, #80]
     588:	mov	x3, x19
     58c:	ldp	x4, x1, [x29, #216]
     590:	str	x1, [x23, #144]
     594:	ldrb	w1, [x29, #232]
     598:	strb	w1, [x23, #170]
     59c:	mov	x1, x27
     5a0:	str	x4, [x0, #40]
     5a4:	add	x0, x19, #0x68
     5a8:	ldr	x4, [x29, #184]
     5ac:	str	x4, [x19, #88]
     5b0:	ldrb	w4, [x29, #180]
     5b4:	add	x19, x19, #0x70
     5b8:	ldr	x2, [x29, #168]
     5bc:	sturb	w4, [x19, #-12]
     5c0:	bl	0 <pthread_create>
     5c4:	cbnz	w0, 1268 <gomp_team_start+0xf70>
     5c8:	ldr	w0, [x29, #236]
     5cc:	add	w20, w20, #0x1
     5d0:	add	x22, x22, #0x8
     5d4:	add	x23, x23, #0xd0
     5d8:	cmp	w0, w20
     5dc:	b.eq	644 <gomp_team_start+0x34c>  // b.none
     5e0:	ldr	x0, [x21]
     5e4:	str	wzr, [x19, #96]
     5e8:	ldur	d0, [x28, #52]
     5ec:	stur	d0, [x19, #52]
     5f0:	cbz	x0, 540 <gomp_team_start+0x248>
     5f4:	ldr	w0, [x29, #176]
     5f8:	cmp	w0, #0x3
     5fc:	b.eq	8a4 <gomp_team_start+0x5ac>  // b.none
     600:	cmp	w0, #0x4
     604:	b.eq	8cc <gomp_team_start+0x5d4>  // b.none
     608:	cmp	w0, #0x1
     60c:	b.eq	8a4 <gomp_team_start+0x5ac>  // b.none
     610:	ldr	w0, [x29, #156]
     614:	add	w0, w0, #0x1
     618:	str	w0, [x19, #96]
     61c:	ldr	x0, [x29, #144]
     620:	cbz	x0, 634 <gomp_team_start+0x33c>
     624:	ldr	x0, [x29, #184]
     628:	ldr	x0, [x0]
     62c:	ldr	x0, [x0, x22]
     630:	cbnz	x0, 5c8 <gomp_team_start+0x2d0>
     634:	ldr	w1, [x29, #156]
     638:	mov	x0, x27
     63c:	bl	0 <gomp_init_thread_affinity>
     640:	b	540 <gomp_team_start+0x248>
     644:	add	x28, x29, #0x100
     648:	mov	x23, x19
     64c:	cmp	x27, x28
     650:	ldr	x21, [x29, #184]
     654:	b.ne	660 <gomp_team_start+0x368>  // b.any
     658:	mov	x0, x28
     65c:	bl	0 <pthread_attr_destroy>
     660:	ldr	w0, [x29, #128]
     664:	cbz	w0, 920 <gomp_team_start+0x628>
     668:	add	x0, x26, #0x80
     66c:	bl	0 <gomp_barrier_wait>
     670:	ldr	w1, [x29, #136]
     674:	ldr	w0, [x29, #236]
     678:	cmp	w0, w1
     67c:	b.cc	dac <gomp_team_start+0xab4>  // b.lo, b.ul, b.last
     680:	ldr	w0, [x29, #140]
     684:	cbnz	w0, e94 <gomp_team_start+0xb9c>
     688:	adrp	x0, 0 <gomp_display_affinity_var>
     68c:	ldrb	w0, [x0]
     690:	cbnz	w0, e04 <gomp_team_start+0xb0c>
     694:	ldr	x0, [x29, #144]
     698:	cbz	x0, 6b0 <gomp_team_start+0x3b8>
     69c:	ldr	w0, [x26, #48]
     6a0:	cmp	w0, #0x40
     6a4:	b.ls	6b0 <gomp_team_start+0x3b8>  // b.plast
     6a8:	ldr	x0, [x29, #144]
     6ac:	bl	0 <free>
     6b0:	mov	sp, x29
     6b4:	ldp	x19, x20, [sp, #16]
     6b8:	ldp	x21, x22, [sp, #32]
     6bc:	ldp	x23, x24, [sp, #48]
     6c0:	ldp	x25, x26, [sp, #64]
     6c4:	ldp	x27, x28, [sp, #80]
     6c8:	ldp	x29, x30, [sp], #320
     6cc:	ret
     6d0:	ldr	w0, [x21, #12]
     6d4:	ldr	w1, [x29, #236]
     6d8:	str	w0, [x29, #136]
     6dc:	str	w1, [x29, #184]
     6e0:	cmp	w1, w0
     6e4:	b.hi	b48 <gomp_team_start+0x850>  // b.pmore
     6e8:	ldr	w1, [x29, #236]
     6ec:	ldr	w0, [x21, #8]
     6f0:	str	w1, [x21, #12]
     6f4:	cmp	w0, w1
     6f8:	b.ls	b74 <gomp_team_start+0x87c>  // b.plast
     6fc:	ldr	w0, [x29, #184]
     700:	cmp	w0, #0x1
     704:	b.ls	1114 <gomp_team_start+0xe1c>  // b.plast
     708:	ldr	w1, [x29, #136]
     70c:	adrp	x8, 0 <gomp_places_list>
     710:	ldr	w0, [x29, #236]
     714:	add	x20, x8, #0x0
     718:	mov	w25, #0x1                   	// #1
     71c:	str	wzr, [x29, #112]
     720:	sub	w0, w0, w1
     724:	ubfiz	x2, x1, #3, #32
     728:	str	wzr, [x29, #140]
     72c:	lsl	x0, x0, #3
     730:	stp	x0, x2, [x29, #96]
     734:	ldr	x0, [x29, #160]
     738:	str	xzr, [x29, #144]
     73c:	str	x23, [x29, #168]
     740:	add	x24, x0, #0x0, lsl #12
     744:	add	x24, x24, #0x0
     748:	sub	w0, w1, #0x1
     74c:	mov	x1, x26
     750:	str	w0, [x29, #120]
     754:	mov	x0, x20
     758:	mov	x26, x21
     75c:	mov	w20, w25
     760:	mov	x21, x1
     764:	mov	x25, x0
     768:	b	818 <gomp_team_start+0x520>
     76c:	ldr	x0, [x26]
     770:	mov	w4, w20
     774:	ubfiz	x28, x20, #3, #32
     778:	mov	w13, #0x0                   	// #0
     77c:	ldr	x27, [x0, x4, lsl #3]
     780:	add	x0, x4, x4, lsl #1
     784:	ldr	w1, [x21, #36]
     788:	mov	x2, x19
     78c:	add	x4, x4, x0, lsl #2
     790:	str	xzr, [x27, #32]
     794:	add	w1, w1, #0x1
     798:	stp	w20, w1, [x27, #40]
     79c:	lsl	x23, x4, #4
     7a0:	ldr	w1, [x24, #48]
     7a4:	ldr	x0, [x29, #208]
     7a8:	stp	x21, x0, [x27, #16]
     7ac:	add	x0, x23, #0x540
     7b0:	add	x0, x21, x0
     7b4:	str	w1, [x27, #48]
     7b8:	stp	w8, w12, [x27, #52]
     7bc:	mov	x1, x22
     7c0:	stp	xzr, xzr, [x27, #64]
     7c4:	str	x0, [x27, #80]
     7c8:	str	w13, [x27, #92]
     7cc:	bl	0 <gomp_init_task>
     7d0:	add	x4, x21, x23
     7d4:	ldrb	w0, [x29, #232]
     7d8:	add	x1, x27, #0x58
     7dc:	strb	w0, [x4, #1514]
     7e0:	ldp	x3, x0, [x29, #216]
     7e4:	ldr	x2, [x27, #80]
     7e8:	str	x0, [x4, #1488]
     7ec:	ldr	x0, [x21, #80]
     7f0:	str	x3, [x2, #40]
     7f4:	ldr	x2, [x29, #200]
     7f8:	str	x2, [x27]
     7fc:	ldr	x2, [x29, #192]
     800:	str	x2, [x27, #8]
     804:	str	x1, [x0, x28]
     808:	ldr	w0, [x29, #184]
     80c:	add	w20, w20, #0x1
     810:	cmp	w0, w20
     814:	b.ls	92c <gomp_team_start+0x634>  // b.plast
     818:	ldr	x0, [x25]
     81c:	ldp	w8, w12, [x24, #52]
     820:	cbz	x0, 76c <gomp_team_start+0x474>
     824:	ldr	w0, [x29, #176]
     828:	cmp	w0, #0x3
     82c:	b.eq	ab0 <gomp_team_start+0x7b8>  // b.none
     830:	cmp	w0, #0x4
     834:	b.eq	97c <gomp_team_start+0x684>  // b.none
     838:	cmp	w0, #0x1
     83c:	b.eq	ab0 <gomp_team_start+0x7b8>  // b.none
     840:	ldr	x0, [x29, #144]
     844:	cbz	x0, ad4 <gomp_team_start+0x7dc>
     848:	ldr	w0, [x29, #140]
     84c:	cbz	w0, f98 <gomp_team_start+0xca0>
     850:	ldr	w2, [x21, #44]
     854:	ldr	w0, [x29, #156]
     858:	ldr	x3, [x29, #144]
     85c:	sub	w0, w0, w2
     860:	ldr	x27, [x3, x0, lsl #3]
     864:	add	x1, x3, x0, lsl #3
     868:	cbz	x27, c58 <gomp_team_start+0x960>
     86c:	ldr	w2, [x29, #140]
     870:	mov	w4, w20
     874:	ldr	x0, [x26]
     878:	sub	w2, w2, #0x1
     87c:	ubfiz	x28, x20, #3, #32
     880:	str	w2, [x29, #140]
     884:	ldr	x2, [x27, #8]
     888:	str	x2, [x1]
     88c:	mov	w1, #0x1                   	// #1
     890:	str	x27, [x0, x4, lsl #3]
     894:	str	w1, [x29, #112]
     898:	ldr	w0, [x29, #156]
     89c:	add	w13, w0, #0x1
     8a0:	b	780 <gomp_team_start+0x488>
     8a4:	ldr	w0, [x29, #132]
     8a8:	ldr	w1, [x29, #152]
     8ac:	cmp	w0, w1
     8b0:	ldr	w0, [x29, #156]
     8b4:	add	w0, w0, #0x1
     8b8:	b.eq	cc8 <gomp_team_start+0x9d0>  // b.none
     8bc:	ldr	w1, [x29, #152]
     8c0:	add	w1, w1, #0x1
     8c4:	str	w1, [x29, #152]
     8c8:	b	618 <gomp_team_start+0x320>
     8cc:	ldr	w0, [x29, #152]
     8d0:	cbnz	w0, b10 <gomp_team_start+0x818>
     8d4:	ldr	w1, [x29, #156]
     8d8:	ldp	w2, w0, [x26, #44]
     8dc:	ldr	w3, [x29, #124]
     8e0:	ldr	w4, [x29, #132]
     8e4:	add	w0, w2, w0
     8e8:	cmp	w3, w1
     8ec:	add	w1, w4, w1
     8f0:	cinc	w1, w1, hi  // hi = pmore
     8f4:	cmp	w0, w1
     8f8:	csel	w1, w1, w2, ne  // ne = any
     8fc:	str	w1, [x19, #52]
     900:	str	w1, [x29, #156]
     904:	cmp	w3, w1
     908:	add	w0, w1, #0x1
     90c:	b.ls	bd8 <gomp_team_start+0x8e0>  // b.plast
     910:	add	w1, w4, #0x1
     914:	str	w1, [x19, #56]
     918:	b	618 <gomp_team_start+0x320>
     91c:	str	xzr, [x29, #144]
     920:	add	x0, x21, #0x40
     924:	bl	0 <gomp_barrier_wait>
     928:	b	670 <gomp_team_start+0x378>
     92c:	mov	x0, x21
     930:	mov	x21, x26
     934:	mov	x26, x0
     938:	mov	w25, w20
     93c:	ldr	x0, [x29, #144]
     940:	ldr	x23, [x29, #168]
     944:	cbnz	x0, fb4 <gomp_team_start+0xcbc>
     948:	ldr	w0, [x29, #236]
     94c:	cmp	w0, w25
     950:	b.eq	91c <gomp_team_start+0x624>  // b.none
     954:	ldr	w1, [x29, #140]
     958:	ldr	w0, [x29, #236]
     95c:	str	xzr, [x29, #144]
     960:	add	w0, w0, w1
     964:	ldr	w1, [x29, #136]
     968:	cmp	w1, w0
     96c:	b.cc	1038 <gomp_team_start+0xd40>  // b.lo, b.ul, b.last
     970:	adrp	x0, 0 <gomp_places_list>
     974:	ldr	x0, [x0]
     978:	b	4a8 <gomp_team_start+0x1b0>
     97c:	ldr	w0, [x29, #152]
     980:	cbz	w0, ba0 <gomp_team_start+0x8a8>
     984:	ldr	w1, [x29, #132]
     988:	ldr	w0, [x29, #152]
     98c:	cmp	w0, w1
     990:	b.eq	ff4 <gomp_team_start+0xcfc>  // b.none
     994:	ldr	w0, [x29, #152]
     998:	mov	w12, #0x1                   	// #1
     99c:	add	w0, w0, #0x1
     9a0:	str	w0, [x29, #152]
     9a4:	ldr	x0, [x29, #144]
     9a8:	ldr	w8, [x29, #156]
     9ac:	cbnz	x0, 848 <gomp_team_start+0x550>
     9b0:	ldr	x0, [x26]
     9b4:	mov	w4, w20
     9b8:	ubfiz	x28, x20, #3, #32
     9bc:	ldr	x27, [x0, x4, lsl #3]
     9c0:	ldr	w0, [x27, #92]
     9c4:	ldr	w1, [x29, #156]
     9c8:	add	w1, w1, #0x1
     9cc:	cmp	w1, w0
     9d0:	b.eq	af4 <gomp_team_start+0x7fc>  // b.none
     9d4:	ldr	w23, [x21, #48]
     9d8:	cmp	w23, #0x40
     9dc:	ubfiz	x2, x23, #3, #32
     9e0:	b.hi	10ac <gomp_team_start+0xdb4>  // b.pmore
     9e4:	add	x0, x2, #0xf
     9e8:	and	x0, x0, #0xfffffffffffffff0
     9ec:	sub	sp, sp, x0
     9f0:	mov	x0, sp
     9f4:	str	x0, [x29, #144]
     9f8:	mov	w1, #0x0                   	// #0
     9fc:	str	x4, [x29, #112]
     a00:	str	w12, [x29, #140]
     a04:	str	w8, [x29, #184]
     a08:	bl	0 <memset>
     a0c:	ldp	w0, w12, [x29, #136]
     a10:	ldr	w8, [x29, #184]
     a14:	cmp	w0, w20
     a18:	ldr	x4, [x29, #112]
     a1c:	b.ls	a88 <gomp_team_start+0x790>  // b.plast
     a20:	ldr	w1, [x29, #120]
     a24:	ldr	x0, [x26]
     a28:	sub	w2, w1, w20
     a2c:	ldr	w3, [x21, #44]
     a30:	add	x2, x2, x4
     a34:	add	x1, x0, #0x8
     a38:	ldr	x5, [x29, #144]
     a3c:	add	w23, w3, w23
     a40:	mvn	w13, w3
     a44:	add	x4, x0, x4, lsl #3
     a48:	add	x2, x1, x2, lsl #3
     a4c:	nop
     a50:	ldr	x1, [x4]
     a54:	ldr	w0, [x1, #92]
     a58:	cmp	w0, w3
     a5c:	b.ls	a7c <gomp_team_start+0x784>  // b.plast
     a60:	cmp	w0, w23
     a64:	b.hi	a7c <gomp_team_start+0x784>  // b.pmore
     a68:	add	w0, w13, w0
     a6c:	ldr	x6, [x5, x0, lsl #3]
     a70:	str	x6, [x1, #8]
     a74:	ldr	x1, [x4]
     a78:	str	x1, [x5, x0, lsl #3]
     a7c:	str	xzr, [x4], #8
     a80:	cmp	x2, x4
     a84:	b.ne	a50 <gomp_team_start+0x758>  // b.any
     a88:	ldr	w1, [x29, #136]
     a8c:	ldr	w0, [x29, #236]
     a90:	cmp	w0, w1
     a94:	b.hi	1084 <gomp_team_start+0xd8c>  // b.pmore
     a98:	ldr	w0, [x29, #136]
     a9c:	sub	w0, w0, w20
     aa0:	str	w0, [x29, #140]
     aa4:	ldr	w0, [x29, #236]
     aa8:	str	w0, [x29, #184]
     aac:	b	848 <gomp_team_start+0x550>
     ab0:	ldr	w1, [x29, #132]
     ab4:	ldr	w0, [x29, #152]
     ab8:	cmp	w0, w1
     abc:	b.eq	be4 <gomp_team_start+0x8ec>  // b.none
     ac0:	ldr	w0, [x29, #152]
     ac4:	add	w0, w0, #0x1
     ac8:	str	w0, [x29, #152]
     acc:	ldr	x0, [x29, #144]
     ad0:	cbnz	x0, 848 <gomp_team_start+0x550>
     ad4:	ldr	x0, [x26]
     ad8:	mov	w4, w20
     adc:	ldr	w1, [x29, #176]
     ae0:	ubfiz	x28, x20, #3, #32
     ae4:	ldr	x27, [x0, x4, lsl #3]
     ae8:	cmp	w1, #0x1
     aec:	ldr	w0, [x27, #92]
     af0:	b.ne	9c4 <gomp_team_start+0x6cc>  // b.any
     af4:	cmp	w8, w0
     af8:	b.cs	9d4 <gomp_team_start+0x6dc>  // b.hs, b.nlast
     afc:	add	w1, w8, w12
     b00:	cmp	w1, w0
     b04:	b.cc	9d4 <gomp_team_start+0x6dc>  // b.lo, b.ul, b.last
     b08:	str	xzr, [x29, #144]
     b0c:	b	898 <gomp_team_start+0x5a0>
     b10:	ldr	w0, [x29, #132]
     b14:	ldr	w1, [x29, #152]
     b18:	cmp	w0, w1
     b1c:	ldr	w0, [x29, #156]
     b20:	add	w0, w0, #0x1
     b24:	b.eq	c24 <gomp_team_start+0x92c>  // b.none
     b28:	ldr	w1, [x29, #152]
     b2c:	add	w1, w1, #0x1
     b30:	str	w1, [x29, #152]
     b34:	ldr	w1, [x29, #156]
     b38:	str	w1, [x19, #52]
     b3c:	mov	w1, #0x1                   	// #1
     b40:	str	w1, [x19, #56]
     b44:	b	618 <gomp_team_start+0x320>
     b48:	cbnz	w0, eec <gomp_team_start+0xbf4>
     b4c:	fmov	s0, w1
     b50:	stp	w1, wzr, [x21, #64]
     b54:	ldr	w1, [x29, #236]
     b58:	dup	v0.2s, v0.s[0]
     b5c:	ldr	w0, [x21, #8]
     b60:	str	w1, [x21, #12]
     b64:	str	wzr, [x29, #184]
     b68:	cmp	w0, w1
     b6c:	str	d0, [x21, #128]
     b70:	b.hi	6fc <gomp_team_start+0x404>  // b.pmore
     b74:	ldr	x0, [x21]
     b78:	add	w1, w1, #0x1
     b7c:	str	w1, [x21, #8]
     b80:	ubfiz	x1, x1, #3, #32
     b84:	bl	0 <gomp_realloc>
     b88:	str	x0, [x21]
     b8c:	ldr	x1, [x29, #160]
     b90:	add	x1, x1, #0x0, lsl #12
     b94:	add	x1, x1, #0x0
     b98:	str	x1, [x0]
     b9c:	b	6fc <gomp_team_start+0x404>
     ba0:	ldr	w2, [x29, #156]
     ba4:	ldp	w1, w0, [x21, #44]
     ba8:	ldr	w3, [x29, #124]
     bac:	ldr	w4, [x29, #132]
     bb0:	add	w0, w1, w0
     bb4:	cmp	w3, w2
     bb8:	add	w2, w2, w4
     bbc:	cinc	w2, w2, hi  // hi = pmore
     bc0:	cmp	w0, w2
     bc4:	csel	w0, w2, w1, ne  // ne = any
     bc8:	str	w0, [x29, #156]
     bcc:	cmp	w3, w0
     bd0:	cinc	w12, w4, hi  // hi = pmore
     bd4:	b	9a4 <gomp_team_start+0x6ac>
     bd8:	ldr	w1, [x29, #132]
     bdc:	str	w1, [x19, #56]
     be0:	b	618 <gomp_team_start+0x320>
     be4:	ldr	w0, [x29, #156]
     be8:	ldp	w2, w1, [x21, #44]
     bec:	add	w3, w0, #0x1
     bf0:	ldr	w4, [x29, #124]
     bf4:	ldr	w0, [x29, #236]
     bf8:	add	w1, w2, w1
     bfc:	cmp	w1, w3
     c00:	mov	w1, #0x1                   	// #1
     c04:	sub	w0, w0, w4
     c08:	csel	w2, w3, w2, ne  // ne = any
     c0c:	cmp	w0, w20
     c10:	ldr	w0, [x29, #132]
     c14:	stp	w1, w2, [x29, #152]
     c18:	csel	w0, w0, w1, ne  // ne = any
     c1c:	str	w0, [x29, #132]
     c20:	b	840 <gomp_team_start+0x548>
     c24:	ldp	w2, w1, [x26, #44]
     c28:	mov	w3, #0x1                   	// #1
     c2c:	add	w1, w2, w1
     c30:	cmp	w1, w0
     c34:	ldr	w1, [x29, #120]
     c38:	csel	w0, w2, w0, eq  // eq = none
     c3c:	stp	w3, w0, [x29, #152]
     c40:	cmp	w1, w20
     c44:	ldr	w1, [x29, #132]
     c48:	add	w0, w0, w3
     c4c:	csel	w1, w1, w3, ne  // ne = any
     c50:	str	w1, [x29, #132]
     c54:	b	b34 <gomp_team_start+0x83c>
     c58:	ldr	w0, [x29, #176]
     c5c:	cmp	w0, #0x1
     c60:	mov	w0, #0x1                   	// #1
     c64:	str	w0, [x29, #112]
     c68:	b.ne	808 <gomp_team_start+0x510>  // b.any
     c6c:	add	w13, w8, w12
     c70:	cmp	w8, w13
     c74:	b.cs	127c <gomp_team_start+0xf84>  // b.hs, b.nlast
     c78:	sub	w0, w8, w2
     c7c:	sub	w9, w13, w2
     c80:	add	w4, w2, #0x1
     c84:	nop
     c88:	ldr	x27, [x3, w0, uxtw #3]
     c8c:	add	x1, x3, w0, uxtw #3
     c90:	cbnz	x27, 86c <gomp_team_start+0x574>
     c94:	add	w1, w4, w0
     c98:	add	w0, w0, #0x1
     c9c:	cmp	w9, w0
     ca0:	b.ne	c88 <gomp_team_start+0x990>  // b.any
     ca4:	mov	w0, #0x1                   	// #1
     ca8:	str	w0, [x29, #112]
     cac:	cmp	w1, w13
     cb0:	b.eq	808 <gomp_team_start+0x510>  // b.none
     cb4:	ldr	x0, [x29, #144]
     cb8:	sub	w2, w1, w2
     cbc:	add	x1, x0, x2, lsl #3
     cc0:	ldr	x27, [x0, x2, lsl #3]
     cc4:	b	86c <gomp_team_start+0x574>
     cc8:	ldp	w2, w1, [x26, #44]
     ccc:	mov	w3, #0x1                   	// #1
     cd0:	add	w1, w2, w1
     cd4:	cmp	w1, w0
     cd8:	ldr	w1, [x29, #120]
     cdc:	csel	w0, w2, w0, eq  // eq = none
     ce0:	stp	w3, w0, [x29, #152]
     ce4:	cmp	w1, w20
     ce8:	ldr	w1, [x29, #132]
     cec:	add	w0, w0, w3
     cf0:	csel	w1, w1, w3, ne  // ne = any
     cf4:	str	w1, [x29, #132]
     cf8:	b	618 <gomp_team_start+0x320>
     cfc:	ldr	w0, [x24, #92]
     d00:	cbnz	w0, 374 <gomp_team_start+0x7c>
     d04:	str	w3, [x29, #232]
     d08:	bl	0 <gomp_init_affinity>
     d0c:	ldp	w3, w1, [x29, #232]
     d10:	adrp	x0, 0 <gomp_display_affinity_var>
     d14:	cmp	w1, #0x1
     d18:	ldrb	w0, [x0]
     d1c:	cset	w1, eq  // eq = none
     d20:	tst	w1, w0
     d24:	b.ne	1284 <gomp_team_start+0xf8c>  // b.any
     d28:	ldr	w2, [x24, #44]
     d2c:	b	374 <gomp_team_start+0x7c>
     d30:	adrp	x1, 0 <gomp_nthreads_var_list_len>
     d34:	mov	w7, w2
     d38:	ldr	x1, [x1]
     d3c:	cmp	x1, w2, uxtw
     d40:	b.ls	3fc <gomp_team_start+0x104>  // b.plast
     d44:	ldr	x1, [x5, x7, lsl #3]
     d48:	str	x1, [x29, #224]
     d4c:	b	3fc <gomp_team_start+0x104>
     d50:	adrp	x3, 0 <gomp_bind_var_list_len>
     d54:	ldr	w4, [x29, #176]
     d58:	str	w4, [x29, #232]
     d5c:	ldr	x3, [x3]
     d60:	cmp	x3, w2, uxtw
     d64:	b.ls	42c <gomp_team_start+0x134>  // b.plast
     d68:	ldrb	w1, [x1, w2, uxtw]
     d6c:	str	w1, [x29, #232]
     d70:	b	42c <gomp_team_start+0x134>
     d74:	ldr	w2, [x1, #92]
     d78:	ldr	w3, [x29, #176]
     d7c:	sub	w2, w2, #0x1
     d80:	str	w2, [x29, #156]
     d84:	cmp	w3, #0x3
     d88:	b.eq	10dc <gomp_team_start+0xde4>  // b.none
     d8c:	cmp	w3, #0x4
     d90:	b.eq	f1c <gomp_team_start+0xc24>  // b.none
     d94:	cmp	w3, #0x1
     d98:	b.eq	10dc <gomp_team_start+0xde4>  // b.none
     d9c:	str	wzr, [x29, #124]
     da0:	str	wzr, [x29, #132]
     da4:	str	wzr, [x29, #152]
     da8:	b	488 <gomp_team_start+0x190>
     dac:	ldr	w0, [x29, #136]
     db0:	ldr	w2, [x29, #236]
     db4:	sub	x2, x2, w0, uxtw
     db8:	ldr	w0, [x29, #140]
     dbc:	cbnz	w0, e94 <gomp_team_start+0xb9c>
     dc0:	ldr	w1, [x21, #64]
     dc4:	add	x0, x21, #0x80
     dc8:	ldr	w3, [x29, #236]
     dcc:	sub	w1, w3, w1
     dd0:	ldaxr	w4, [x0]
     dd4:	add	w4, w4, w1
     dd8:	stlxr	w5, w4, [x0]
     ddc:	cbnz	w5, dd0 <gomp_team_start+0xad8>
     de0:	adrp	x0, 0 <gomp_managed_threads>
     de4:	add	x0, x0, #0x0
     de8:	str	w3, [x21, #64]
     dec:	ldxr	x1, [x0]
     df0:	add	x1, x1, x2
     df4:	stlxr	w3, x1, [x0]
     df8:	cbnz	w3, dec <gomp_team_start+0xaf4>
     dfc:	dmb	ish
     e00:	b	688 <gomp_team_start+0x390>
     e04:	ldr	w0, [x29, #180]
     e08:	ldr	w1, [x29, #136]
     e0c:	cmp	w0, #0x0
     e10:	ldr	w0, [x29, #236]
     e14:	ccmp	w0, w1, #0x0, eq  // eq = none
     e18:	b.ne	12d4 <gomp_team_start+0xfdc>  // b.any
     e1c:	ldr	w0, [x29, #112]
     e20:	cbz	w0, 694 <gomp_team_start+0x39c>
     e24:	bl	0 <pthread_self>
     e28:	mov	x19, x0
     e2c:	ldr	x1, [x29, #160]
     e30:	add	x2, x1, #0x0, lsl #12
     e34:	add	x2, x2, #0x0
     e38:	add	x1, x2, #0x10
     e3c:	ldr	w2, [x2, #92]
     e40:	bl	0 <gomp_display_affinity_thread>
     e44:	ldr	x0, [x29, #160]
     e48:	mov	x23, #0x8                   	// #8
     e4c:	mov	w22, #0x1                   	// #1
     e50:	add	x24, x0, #0x0, lsl #12
     e54:	add	x24, x24, #0x0
     e58:	sub	x25, x19, x24
     e5c:	ldr	w0, [x29, #236]
     e60:	cmp	w22, w0
     e64:	b.cs	694 <gomp_team_start+0x39c>  // b.hs, b.nlast
     e68:	ldr	x0, [x21]
     e6c:	add	w22, w22, #0x1
     e70:	ldr	x1, [x0, x23]
     e74:	add	x23, x23, #0x8
     e78:	cmp	x24, x1
     e7c:	add	x0, x1, x25
     e80:	ldr	w2, [x1, #92]
     e84:	csel	x0, x0, x19, ne  // ne = any
     e88:	add	x1, x1, #0x10
     e8c:	bl	0 <gomp_display_affinity_thread>
     e90:	b	e5c <gomp_team_start+0xb64>
     e94:	ldr	w0, [x29, #140]
     e98:	neg	w2, w0
     e9c:	b	dc0 <gomp_team_start+0xac8>
     ea0:	add	x28, x29, #0x100
     ea4:	mov	x0, x28
     ea8:	bl	0 <pthread_attr_init>
     eac:	adrp	x0, 40 <gomp_pause_pool_helper+0x8>
     eb0:	add	x1, x29, #0xf8
     eb4:	add	x0, x0, #0x0
     eb8:	bl	0 <pthread_attr_getstacksize>
     ebc:	cbz	w0, f88 <gomp_team_start+0xc90>
     ec0:	ldr	w2, [x29, #236]
     ec4:	mov	w1, #0x70                  	// #112
     ec8:	sub	w0, w2, w25
     ecc:	cmp	w25, w2
     ed0:	mov	x2, sp
     ed4:	umsubl	x0, w0, w1, x2
     ed8:	mov	sp, x0
     edc:	mov	x23, sp
     ee0:	b.cs	658 <gomp_team_start+0x360>  // b.hs, b.nlast
     ee4:	mov	x27, x28
     ee8:	b	4d8 <gomp_team_start+0x1e0>
     eec:	ldr	w1, [x21, #64]
     ef0:	add	x0, x21, #0x80
     ef4:	ldr	w2, [x29, #236]
     ef8:	sub	w1, w2, w1
     efc:	ldaxr	w3, [x0]
     f00:	add	w3, w3, w1
     f04:	stlxr	w4, w3, [x0]
     f08:	cbnz	w4, efc <gomp_team_start+0xc04>
     f0c:	ldr	w0, [x29, #136]
     f10:	str	w2, [x21, #64]
     f14:	str	w0, [x29, #184]
     f18:	b	6e8 <gomp_team_start+0x3f0>
     f1c:	ldr	w2, [x1, #56]
     f20:	ldr	w3, [x29, #236]
     f24:	cmp	w2, w3
     f28:	b.cc	1188 <gomp_team_start+0xe90>  // b.lo, b.ul, b.last
     f2c:	udiv	w4, w2, w3
     f30:	ldr	w1, [x1, #52]
     f34:	msub	w2, w4, w3, w2
     f38:	add	w3, w4, #0x1
     f3c:	madd	w2, w4, w2, w2
     f40:	str	w4, [x29, #132]
     f44:	ldr	w4, [x29, #156]
     f48:	add	w2, w2, w1
     f4c:	str	w2, [x29, #124]
     f50:	cmp	w4, w2
     f54:	b.cs	11c4 <gomp_team_start+0xecc>  // b.hs, b.nlast
     f58:	sub	w1, w4, w1
     f5c:	udiv	w2, w1, w3
     f60:	msub	w1, w2, w3, w1
     f64:	sub	w1, w4, w1
     f68:	str	w1, [x29, #156]
     f6c:	ldr	x1, [x29, #160]
     f70:	str	wzr, [x29, #152]
     f74:	ldr	w2, [x29, #156]
     f78:	add	x1, x1, #0x0, lsl #12
     f7c:	add	x1, x1, #0x0
     f80:	stp	w2, w3, [x1, #52]
     f84:	b	488 <gomp_team_start+0x190>
     f88:	ldr	x1, [x29, #248]
     f8c:	mov	x0, x28
     f90:	bl	0 <pthread_attr_setstacksize>
     f94:	b	ec0 <gomp_team_start+0xbc8>
     f98:	ldr	x23, [x29, #168]
     f9c:	mov	x0, x21
     fa0:	mov	w25, w20
     fa4:	mov	x21, x26
     fa8:	mov	x26, x0
     fac:	mov	w0, #0x1                   	// #1
     fb0:	str	w0, [x29, #112]
     fb4:	ldr	w1, [x29, #136]
     fb8:	ldr	w0, [x29, #236]
     fbc:	cmp	w0, w1
     fc0:	b.hi	1178 <gomp_team_start+0xe80>  // b.pmore
     fc4:	sub	w0, w1, w0
     fc8:	ldr	w1, [x29, #140]
     fcc:	cmp	w0, w1
     fd0:	cset	w0, eq  // eq = none
     fd4:	cbz	w0, 1124 <gomp_team_start+0xe2c>
     fd8:	ldr	w0, [x26, #48]
     fdc:	str	wzr, [x29, #140]
     fe0:	cmp	w0, #0x40
     fe4:	b.ls	948 <gomp_team_start+0x650>  // b.plast
     fe8:	ldr	x0, [x29, #144]
     fec:	bl	0 <free>
     ff0:	b	948 <gomp_team_start+0x650>
     ff4:	ldr	w0, [x29, #156]
     ff8:	ldp	w2, w1, [x21, #44]
     ffc:	add	w4, w0, #0x1
    1000:	ldr	w3, [x29, #124]
    1004:	ldr	w0, [x29, #236]
    1008:	add	w1, w2, w1
    100c:	cmp	w1, w4
    1010:	sub	w0, w0, w3
    1014:	csel	w2, w4, w2, ne  // ne = any
    1018:	cmp	w0, w20
    101c:	ldr	w0, [x29, #132]
    1020:	mov	w3, #0x1                   	// #1
    1024:	csel	w12, w3, w3, ne  // ne = any
    1028:	csel	w0, w0, w3, ne  // ne = any
    102c:	str	w0, [x29, #132]
    1030:	stp	w3, w2, [x29, #152]
    1034:	b	9a4 <gomp_team_start+0x6ac>
    1038:	ldr	w1, [x29, #136]
    103c:	sub	x0, x0, w1, uxtw
    1040:	cbz	w1, 1078 <gomp_team_start+0xd80>
    1044:	adrp	x1, 0 <gomp_managed_threads>
    1048:	add	x1, x1, #0x0
    104c:	ldxr	x2, [x1]
    1050:	add	x2, x2, x0
    1054:	stlxr	w3, x2, [x1]
    1058:	cbnz	w3, 104c <gomp_team_start+0xd54>
    105c:	dmb	ish
    1060:	b	970 <gomp_team_start+0x678>
    1064:	ldr	w0, [x29, #236]
    1068:	mov	w25, #0x1                   	// #1
    106c:	str	wzr, [x29, #112]
    1070:	str	wzr, [x29, #140]
    1074:	str	xzr, [x29, #144]
    1078:	sub	x0, x0, #0x1
    107c:	str	wzr, [x29, #136]
    1080:	b	1044 <gomp_team_start+0xd4c>
    1084:	ldp	x2, x3, [x29, #96]
    1088:	mov	w1, #0x0                   	// #0
    108c:	ldr	x0, [x26]
    1090:	str	w12, [x29, #140]
    1094:	str	w8, [x29, #184]
    1098:	add	x0, x0, x3
    109c:	bl	0 <memset>
    10a0:	ldr	w12, [x29, #140]
    10a4:	ldr	w8, [x29, #184]
    10a8:	b	a98 <gomp_team_start+0x7a0>
    10ac:	mov	x0, x2
    10b0:	str	x4, [x29, #112]
    10b4:	str	w12, [x29, #140]
    10b8:	str	w8, [x29, #184]
    10bc:	bl	0 <gomp_malloc>
    10c0:	ldr	w23, [x21, #48]
    10c4:	ldr	w12, [x29, #140]
    10c8:	ldr	w8, [x29, #184]
    10cc:	ubfiz	x2, x23, #3, #32
    10d0:	str	x0, [x29, #144]
    10d4:	ldr	x4, [x29, #112]
    10d8:	b	9f8 <gomp_team_start+0x700>
    10dc:	ldr	x1, [x29, #160]
    10e0:	ldr	w2, [x29, #236]
    10e4:	add	x1, x1, #0x0, lsl #12
    10e8:	add	x1, x1, #0x0
    10ec:	ldr	w1, [x1, #56]
    10f0:	cmp	w1, w2
    10f4:	b.cs	11b0 <gomp_team_start+0xeb8>  // b.hs, b.nlast
    10f8:	udiv	w3, w2, w1
    10fc:	mov	w4, #0x1                   	// #1
    1100:	str	w4, [x29, #152]
    1104:	msub	w1, w3, w1, w2
    1108:	str	w3, [x29, #132]
    110c:	str	w1, [x29, #124]
    1110:	b	488 <gomp_team_start+0x190>
    1114:	mov	w25, #0x1                   	// #1
    1118:	str	wzr, [x29, #112]
    111c:	str	wzr, [x29, #140]
    1120:	b	954 <gomp_team_start+0x65c>
    1124:	ldr	w0, [x29, #176]
    1128:	cmp	w0, #0x3
    112c:	b.eq	1224 <gomp_team_start+0xf2c>  // b.none
    1130:	cmp	w0, #0x4
    1134:	b.eq	11ec <gomp_team_start+0xef4>  // b.none
    1138:	cmp	w0, #0x1
    113c:	b.eq	1224 <gomp_team_start+0xf2c>  // b.none
    1140:	ldr	w1, [x29, #140]
    1144:	mov	w25, #0x1                   	// #1
    1148:	ldr	w0, [x29, #236]
    114c:	add	w0, w0, w1
    1150:	cbz	w1, 964 <gomp_team_start+0x66c>
    1154:	ldr	w2, [x21, #64]
    1158:	add	x1, x21, #0x80
    115c:	sub	w2, w0, w2
    1160:	ldaxr	w3, [x1]
    1164:	add	w3, w3, w2
    1168:	stlxr	w4, w3, [x1]
    116c:	cbnz	w4, 1160 <gomp_team_start+0xe68>
    1170:	str	w0, [x21, #64]
    1174:	b	964 <gomp_team_start+0x66c>
    1178:	ldr	w0, [x29, #136]
    117c:	cmp	w0, w25
    1180:	cset	w0, eq  // eq = none
    1184:	b	fd4 <gomp_team_start+0xcdc>
    1188:	ldr	w5, [x29, #236]
    118c:	mov	w3, #0x1                   	// #1
    1190:	ldr	w6, [x29, #156]
    1194:	stp	w6, w3, [x1, #52]
    1198:	str	w3, [x29, #152]
    119c:	udiv	w4, w5, w2
    11a0:	msub	w1, w4, w2, w5
    11a4:	str	w4, [x29, #132]
    11a8:	str	w1, [x29, #124]
    11ac:	b	488 <gomp_team_start+0x190>
    11b0:	mov	w1, #0x1                   	// #1
    11b4:	str	wzr, [x29, #124]
    11b8:	str	w1, [x29, #132]
    11bc:	str	w1, [x29, #152]
    11c0:	b	488 <gomp_team_start+0x190>
    11c4:	ldr	w5, [x29, #156]
    11c8:	ldr	w1, [x29, #124]
    11cc:	ldr	w4, [x29, #132]
    11d0:	sub	w2, w5, w1
    11d4:	mov	w3, w4
    11d8:	udiv	w1, w2, w4
    11dc:	msub	w1, w1, w4, w2
    11e0:	sub	w1, w5, w1
    11e4:	str	w1, [x29, #156]
    11e8:	b	f6c <gomp_team_start+0xc74>
    11ec:	ldr	x0, [x29, #160]
    11f0:	add	x0, x0, #0x0, lsl #12
    11f4:	add	x0, x0, #0x0
    11f8:	ldr	w0, [x0, #52]
    11fc:	str	w0, [x29, #156]
    1200:	ldr	w0, [x29, #152]
    1204:	cbz	w0, 1140 <gomp_team_start+0xe48>
    1208:	mov	w1, #0x1                   	// #1
    120c:	ldr	w0, [x26, #48]
    1210:	str	w1, [x29, #152]
    1214:	ldr	w1, [x29, #236]
    1218:	udiv	w0, w1, w0
    121c:	str	w0, [x29, #132]
    1220:	b	1140 <gomp_team_start+0xe48>
    1224:	ldr	x0, [x29, #160]
    1228:	ldr	w1, [x29, #236]
    122c:	add	x0, x0, #0x0, lsl #12
    1230:	add	x0, x0, #0x0
    1234:	ldr	w0, [x0, #56]
    1238:	cmp	w0, w1
    123c:	b.cs	1248 <gomp_team_start+0xf50>  // b.hs, b.nlast
    1240:	udiv	w0, w1, w0
    1244:	str	w0, [x29, #132]
    1248:	ldr	x0, [x29, #160]
    124c:	mov	w1, #0x1                   	// #1
    1250:	add	x0, x0, #0x0, lsl #12
    1254:	add	x0, x0, #0x0
    1258:	ldr	w0, [x0, #92]
    125c:	sub	w0, w0, #0x1
    1260:	stp	w1, w0, [x29, #152]
    1264:	b	1140 <gomp_team_start+0xe48>
    1268:	bl	0 <strerror>
    126c:	mov	x1, x0
    1270:	adrp	x0, 0 <gomp_free_pool_helper>
    1274:	add	x0, x0, #0x0
    1278:	bl	0 <gomp_fatal>
    127c:	mov	w1, w8
    1280:	b	ca4 <gomp_team_start+0x9ac>
    1284:	str	w3, [x29, #232]
    1288:	bl	0 <pthread_self>
    128c:	ldr	w2, [x24, #92]
    1290:	add	x25, x24, #0x10
    1294:	mov	x1, x25
    1298:	bl	0 <gomp_display_affinity_thread>
    129c:	ldp	x0, x1, [x24, #16]
    12a0:	stp	x0, x1, [x26, #8]
    12a4:	ldr	w2, [x24, #44]
    12a8:	ldp	x0, x1, [x24, #32]
    12ac:	stp	x0, x1, [x26, #24]
    12b0:	add	w2, w2, #0x1
    12b4:	ldp	x0, x1, [x24, #48]
    12b8:	stp	x0, x1, [x26, #40]
    12bc:	ldr	w3, [x29, #232]
    12c0:	ldp	x0, x1, [x24, #64]
    12c4:	str	x26, [x24, #16]
    12c8:	stp	wzr, w2, [x24, #40]
    12cc:	stp	x0, x1, [x26, #56]
    12d0:	b	3c4 <gomp_team_start+0xcc>
    12d4:	bl	0 <pthread_self>
    12d8:	mov	x19, x0
    12dc:	ldr	x1, [x29, #160]
    12e0:	add	x2, x1, #0x0, lsl #12
    12e4:	add	x2, x2, #0x0
    12e8:	add	x1, x2, #0x10
    12ec:	ldr	w2, [x2, #92]
    12f0:	bl	0 <gomp_display_affinity_thread>
    12f4:	ldr	w0, [x29, #128]
    12f8:	cbz	w0, e44 <gomp_team_start+0xb4c>
    12fc:	ldr	w0, [x29, #236]
    1300:	mov	x1, #0x10                  	// #16
    1304:	mov	w21, #0x1                   	// #1
    1308:	sub	w19, w0, #0x1
    130c:	mov	w0, #0x70                  	// #112
    1310:	umsubl	x19, w19, w0, x1
    1314:	add	x19, x23, x19
    1318:	ldr	w0, [x29, #236]
    131c:	cmp	w21, w0
    1320:	b.cs	694 <gomp_team_start+0x39c>  // b.hs, b.nlast
    1324:	ldr	w2, [x19, #80]
    1328:	mov	x1, x19
    132c:	ldr	x0, [x19, #88]
    1330:	add	w21, w21, #0x1
    1334:	add	x19, x19, #0x70
    1338:	bl	0 <gomp_display_affinity_thread>
    133c:	b	1318 <gomp_team_start+0x1020>

0000000000001340 <gomp_team_end>:
    1340:	stp	x29, x30, [sp, #-64]!
    1344:	mov	x29, sp
    1348:	stp	x19, x20, [sp, #16]
    134c:	mrs	x20, tpidr_el0
    1350:	stp	x21, x22, [sp, #32]
    1354:	add	x21, x20, #0x0, lsl #12
    1358:	add	x21, x21, #0x0
    135c:	ldr	x19, [x21, #16]
    1360:	add	x22, x19, #0x80
    1364:	mov	x0, x22
    1368:	bl	0 <gomp_team_barrier_wait_final>
    136c:	ldr	w0, [x19, #1336]
    1370:	cbnz	w0, 1434 <gomp_team_end+0xf4>
    1374:	ldr	x0, [x21, #24]
    1378:	bl	0 <gomp_fini_work_share>
    137c:	bl	0 <gomp_end_task>
    1380:	add	x0, x20, #0x0, lsl #12
    1384:	add	x0, x0, #0x0
    1388:	ldp	x4, x5, [x19, #8]
    138c:	add	x1, x0, #0x10
    1390:	stp	x4, x5, [x0, #16]
    1394:	ldp	x4, x5, [x19, #24]
    1398:	stp	x4, x5, [x0, #32]
    139c:	ldr	w0, [x0, #44]
    13a0:	ldp	x4, x5, [x19, #40]
    13a4:	stp	x4, x5, [x1, #32]
    13a8:	ldp	x2, x3, [x19, #56]
    13ac:	stp	x2, x3, [x1, #48]
    13b0:	cbnz	w0, 14b8 <gomp_team_end+0x178>
    13b4:	ldr	x21, [x19, #312]
    13b8:	cbnz	x21, 13fc <gomp_team_end+0xbc>
    13bc:	add	x20, x20, #0x0, lsl #12
    13c0:	add	x20, x20, #0x0
    13c4:	ldr	x0, [x20, #16]
    13c8:	cbnz	x0, 1420 <gomp_team_end+0xe0>
    13cc:	ldr	w0, [x19]
    13d0:	cmp	w0, #0x1
    13d4:	b.eq	1420 <gomp_team_end+0xe0>  // b.none
    13d8:	ldr	x20, [x20, #96]
    13dc:	ldr	x0, [x20, #16]
    13e0:	cbz	x0, 13e8 <gomp_team_end+0xa8>
    13e4:	bl	0 <free>
    13e8:	ldp	x21, x22, [sp, #32]
    13ec:	str	x19, [x20, #16]
    13f0:	ldp	x19, x20, [sp, #16]
    13f4:	ldp	x29, x30, [sp], #64
    13f8:	ret
    13fc:	mov	x0, x21
    1400:	ldr	x21, [x21, #56]
    1404:	bl	0 <free>
    1408:	cbz	x21, 13bc <gomp_team_end+0x7c>
    140c:	mov	x0, x21
    1410:	ldr	x21, [x21, #56]
    1414:	bl	0 <free>
    1418:	cbnz	x21, 13fc <gomp_team_end+0xbc>
    141c:	b	13bc <gomp_team_end+0x7c>
    1420:	mov	x0, x19
    1424:	ldp	x19, x20, [sp, #16]
    1428:	ldp	x21, x22, [sp, #32]
    142c:	ldp	x29, x30, [sp], #64
    1430:	b	0 <free>
    1434:	stp	x23, x24, [sp, #48]
    1438:	mov	x24, #0x1                   	// #1
    143c:	ldr	x23, [x19, #88]
    1440:	add	x21, x23, #0x50
    1444:	ldar	x0, [x21]
    1448:	mov	x1, x0
    144c:	cmp	x0, #0x2
    1450:	b.hi	14a8 <gomp_team_end+0x168>  // b.pmore
    1454:	ldaxr	x0, [x21]
    1458:	cbnz	x0, 1464 <gomp_team_end+0x124>
    145c:	stxr	w1, x24, [x21]
    1460:	cbnz	w1, 1454 <gomp_team_end+0x114>
    1464:	cmp	x0, #0x0
    1468:	b.ne	1498 <gomp_team_end+0x158>  // b.any
    146c:	ldxr	x0, [x21]
    1470:	stlxr	w1, x23, [x21]
    1474:	cbnz	w1, 146c <gomp_team_end+0x12c>
    1478:	cmp	x0, #0x1
    147c:	b.eq	1488 <gomp_team_end+0x148>  // b.none
    1480:	mov	x0, x21
    1484:	bl	0 <gomp_ptrlock_set_slow>
    1488:	mov	x0, x23
    148c:	bl	0 <gomp_fini_work_share>
    1490:	ldp	x23, x24, [sp, #48]
    1494:	b	137c <gomp_team_end+0x3c>
    1498:	mov	x0, x21
    149c:	bl	0 <gomp_ptrlock_get_slow>
    14a0:	mov	x1, x0
    14a4:	cbz	x0, 146c <gomp_team_end+0x12c>
    14a8:	mov	x0, x23
    14ac:	mov	x23, x1
    14b0:	bl	0 <gomp_fini_work_share>
    14b4:	b	1440 <gomp_team_end+0x100>
    14b8:	ldr	w2, [x19]
    14bc:	mov	x1, #0x1                   	// #1
    14c0:	adrp	x0, 0 <gomp_managed_threads>
    14c4:	add	x0, x0, #0x0
    14c8:	sub	x1, x1, x2
    14cc:	ldxr	x2, [x0]
    14d0:	add	x2, x2, x1
    14d4:	stlxr	w3, x2, [x0]
    14d8:	cbnz	w3, 14cc <gomp_team_end+0x18c>
    14dc:	mov	x0, x22
    14e0:	dmb	ish
    14e4:	bl	0 <gomp_barrier_wait>
    14e8:	b	13b4 <gomp_team_end+0x74>
    14ec:	nop

00000000000014f0 <gomp_free_thread>:
    14f0:	stp	x29, x30, [sp, #-48]!
    14f4:	mov	x29, sp
    14f8:	stp	x19, x20, [sp, #16]
    14fc:	mrs	x20, tpidr_el0
    1500:	add	x0, x20, #0x0, lsl #12
    1504:	add	x0, x0, #0x0
    1508:	ldr	x19, [x0, #96]
    150c:	cbz	x19, 15b4 <gomp_free_thread+0xc4>
    1510:	ldr	w2, [x19, #12]
    1514:	cbz	w2, 158c <gomp_free_thread+0x9c>
    1518:	str	x21, [sp, #32]
    151c:	cmp	w2, #0x1
    1520:	b.ls	154c <gomp_free_thread+0x5c>  // b.plast
    1524:	ldr	x4, [x19]
    1528:	adrp	x3, 0 <gomp_free_pool_helper>
    152c:	add	x3, x3, #0x0
    1530:	mov	x0, #0x1                   	// #1
    1534:	nop
    1538:	ldr	x1, [x4, x0, lsl #3]
    153c:	add	x0, x0, #0x1
    1540:	cmp	w2, w0
    1544:	stp	x3, x19, [x1]
    1548:	b.hi	1538 <gomp_free_thread+0x48>  // b.pmore
    154c:	add	x21, x19, #0x40
    1550:	mov	x0, x21
    1554:	bl	0 <gomp_barrier_wait>
    1558:	mov	x0, x21
    155c:	bl	0 <gomp_barrier_wait>
    1560:	ldr	w2, [x19, #12]
    1564:	mov	x1, #0x1                   	// #1
    1568:	adrp	x0, 0 <gomp_managed_threads>
    156c:	add	x0, x0, #0x0
    1570:	sub	x1, x1, x2
    1574:	ldxr	x2, [x0]
    1578:	add	x2, x2, x1
    157c:	stlxr	w3, x2, [x0]
    1580:	cbnz	w3, 1574 <gomp_free_thread+0x84>
    1584:	dmb	ish
    1588:	ldr	x21, [sp, #32]
    158c:	ldr	x0, [x19, #16]
    1590:	cbz	x0, 1598 <gomp_free_thread+0xa8>
    1594:	bl	0 <free>
    1598:	ldr	x0, [x19]
    159c:	bl	0 <free>
    15a0:	mov	x0, x19
    15a4:	bl	0 <free>
    15a8:	add	x0, x20, #0x0, lsl #12
    15ac:	add	x0, x0, #0x0
    15b0:	str	xzr, [x0, #96]
    15b4:	add	x0, x20, #0x0, lsl #12
    15b8:	add	x0, x0, #0x0
    15bc:	ldr	w1, [x0, #44]
    15c0:	cbnz	w1, 15cc <gomp_free_thread+0xdc>
    15c4:	ldr	x0, [x0, #16]
    15c8:	cbnz	x0, 15fc <gomp_free_thread+0x10c>
    15cc:	add	x20, x20, #0x0, lsl #12
    15d0:	add	x20, x20, #0x0
    15d4:	ldr	x19, [x20, #80]
    15d8:	cbz	x19, 15f0 <gomp_free_thread+0x100>
    15dc:	bl	0 <gomp_end_task>
    15e0:	mov	x0, x19
    15e4:	ldp	x19, x20, [sp, #16]
    15e8:	ldp	x29, x30, [sp], #48
    15ec:	b	0 <free>
    15f0:	ldp	x19, x20, [sp, #16]
    15f4:	ldp	x29, x30, [sp], #48
    15f8:	ret
    15fc:	bl	1340 <gomp_team_end>
    1600:	b	15cc <gomp_free_thread+0xdc>
    1604:	nop

0000000000001608 <gomp_pause_host>:
    1608:	stp	x29, x30, [sp, #-64]!
    160c:	mov	x29, sp
    1610:	stp	x21, x22, [sp, #32]
    1614:	mrs	x22, tpidr_el0
    1618:	stp	x19, x20, [sp, #16]
    161c:	add	x19, x22, #0x0, lsl #12
    1620:	add	x19, x19, #0x0
    1624:	ldr	w0, [x19, #44]
    1628:	ldr	x20, [x19, #96]
    162c:	str	x23, [sp, #48]
    1630:	cbnz	w0, 1758 <gomp_pause_host+0x150>
    1634:	cbz	x20, 172c <gomp_pause_host+0x124>
    1638:	ldr	w23, [x20, #12]
    163c:	cbz	w23, 1700 <gomp_pause_host+0xf8>
    1640:	ubfiz	x0, x23, #3, #32
    1644:	cmp	w23, #0x1
    1648:	add	x0, x0, #0xf
    164c:	and	x0, x0, #0xffffffff0
    1650:	sub	sp, sp, x0
    1654:	mov	x21, sp
    1658:	b.ls	169c <gomp_pause_host+0x94>  // b.plast
    165c:	bl	0 <pthread_self>
    1660:	sub	x6, x0, x19
    1664:	ldr	x7, [x20]
    1668:	adrp	x5, 0 <gomp_free_pool_helper>
    166c:	mov	x3, x19
    1670:	add	x5, x5, #0x0
    1674:	mov	x1, #0x1                   	// #1
    1678:	ldr	x2, [x7, x1, lsl #3]
    167c:	add	x4, x2, x6
    1680:	cmp	x3, x2
    1684:	stp	x5, x20, [x2]
    1688:	b.eq	1744 <gomp_pause_host+0x13c>  // b.none
    168c:	str	x4, [x21, x1, lsl #3]
    1690:	add	x1, x1, #0x1
    1694:	cmp	w23, w1
    1698:	b.hi	1678 <gomp_pause_host+0x70>  // b.pmore
    169c:	add	x19, x20, #0x40
    16a0:	mov	x0, x19
    16a4:	bl	0 <gomp_barrier_wait>
    16a8:	mov	x0, x19
    16ac:	bl	0 <gomp_barrier_wait>
    16b0:	ldr	w1, [x20, #12]
    16b4:	mov	x19, #0x1                   	// #1
    16b8:	adrp	x0, 0 <gomp_managed_threads>
    16bc:	add	x0, x0, #0x0
    16c0:	sub	x1, x19, x1
    16c4:	ldxr	x2, [x0]
    16c8:	add	x2, x2, x1
    16cc:	stlxr	w3, x2, [x0]
    16d0:	cbnz	w3, 16c4 <gomp_pause_host+0xbc>
    16d4:	dmb	ish
    16d8:	ldr	w0, [x20, #12]
    16dc:	cmp	w0, #0x1
    16e0:	b.ls	1700 <gomp_pause_host+0xf8>  // b.plast
    16e4:	ldr	x0, [x21, x19, lsl #3]
    16e8:	mov	x1, #0x0                   	// #0
    16ec:	add	x19, x19, #0x1
    16f0:	bl	0 <pthread_join>
    16f4:	ldr	w0, [x20, #12]
    16f8:	cmp	w0, w19
    16fc:	b.hi	16e4 <gomp_pause_host+0xdc>  // b.pmore
    1700:	ldr	x0, [x20, #16]
    1704:	cbz	x0, 170c <gomp_pause_host+0x104>
    1708:	bl	0 <free>
    170c:	ldr	x0, [x20]
    1710:	add	x22, x22, #0x0, lsl #12
    1714:	add	x22, x22, #0x0
    1718:	bl	0 <free>
    171c:	mov	x0, x20
    1720:	bl	0 <free>
    1724:	mov	w0, #0x0                   	// #0
    1728:	str	xzr, [x22, #96]
    172c:	mov	sp, x29
    1730:	ldp	x19, x20, [sp, #16]
    1734:	ldp	x21, x22, [sp, #32]
    1738:	ldr	x23, [sp, #48]
    173c:	ldp	x29, x30, [sp], #64
    1740:	ret
    1744:	str	x0, [x21, x1, lsl #3]
    1748:	add	x1, x1, #0x1
    174c:	cmp	w23, w1
    1750:	b.hi	1678 <gomp_pause_host+0x70>  // b.pmore
    1754:	b	169c <gomp_pause_host+0x94>
    1758:	mov	w0, #0xffffffff            	// #-1
    175c:	b	172c <gomp_pause_host+0x124>

0000000000001760 <gomp_new_icv>:
    1760:	stp	x29, x30, [sp, #-32]!
    1764:	mov	x0, #0xd0                  	// #208
    1768:	mov	x29, sp
    176c:	str	x19, [sp, #16]
    1770:	bl	0 <gomp_malloc>
    1774:	mov	x1, #0x0                   	// #0
    1778:	mov	x19, x0
    177c:	adrp	x2, 0 <gomp_global_icv>
    1780:	add	x2, x2, #0x0
    1784:	bl	0 <gomp_init_task>
    1788:	adrp	x0, 4 <gomp_free_pool_helper+0x4>
    178c:	mrs	x1, tpidr_el0
    1790:	add	x1, x1, #0x0, lsl #12
    1794:	add	x1, x1, #0x0
    1798:	ldr	w0, [x0]
    179c:	str	x19, [x1, #80]
    17a0:	bl	0 <pthread_setspecific>
    17a4:	add	x0, x19, #0x90
    17a8:	ldr	x19, [sp, #16]
    17ac:	ldp	x29, x30, [sp], #32
    17b0:	ret

Disassembly of section .text.startup:

0000000000000000 <initialize_team>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x1, 14f0 <gomp_free_thread>
   8:	adrp	x0, 4 <initialize_team+0x4>
   c:	mov	x29, sp
  10:	add	x1, x1, #0x0
  14:	add	x0, x0, #0x0
  18:	bl	0 <pthread_key_create>
  1c:	cbnz	w0, 28 <initialize_team+0x28>
  20:	ldp	x29, x30, [sp], #16
  24:	ret
  28:	adrp	x0, 0 <initialize_team>
  2c:	add	x0, x0, #0x0
  30:	bl	0 <gomp_fatal>

Disassembly of section .text.exit:

0000000000000000 <team_destructor>:
   0:	adrp	x0, 4 <team_destructor+0x4>
   4:	ldr	w0, [x0]
   8:	b	0 <pthread_key_delete>

work.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_init_work_share>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	str	wzr, [x0, #64]
  14:	cbnz	x1, 34 <gomp_init_work_share+0x34>
  18:	add	x0, x0, #0x60
  1c:	str	x0, [x19, #32]
  20:	str	wzr, [x19, #68]
  24:	str	xzr, [x19, #80]
  28:	ldp	x19, x20, [sp, #16]
  2c:	ldp	x29, x30, [sp], #32
  30:	ret
  34:	ubfiz	x20, x2, #2, #32
  38:	sub	x2, x1, #0x1
  3c:	add	x0, x20, #0x7
  40:	cmp	x1, #0x1
  44:	and	x0, x0, #0xfffffffffffffff8
  48:	add	x0, x0, x2
  4c:	csel	x20, x20, x0, eq  // eq = none
  50:	cmp	x20, #0x20
  54:	b.hi	8c <gomp_init_work_share+0x8c>  // b.pmore
  58:	add	x0, x19, #0x60
  5c:	str	x0, [x19, #32]
  60:	mov	x2, x20
  64:	mov	w1, #0x0                   	// #0
  68:	bl	0 <memset>
  6c:	str	wzr, [x19, #48]
  70:	movi	d0, #0xffffffff00000000
  74:	str	wzr, [x19, #68]
  78:	str	xzr, [x19, #80]
  7c:	str	d0, [x19, #40]
  80:	ldp	x19, x20, [sp, #16]
  84:	ldp	x29, x30, [sp], #32
  88:	ret
  8c:	mov	x0, x20
  90:	bl	0 <gomp_malloc>
  94:	str	x0, [x19, #32]
  98:	b	60 <gomp_init_work_share+0x60>
  9c:	nop

00000000000000a0 <gomp_fini_work_share>:
  a0:	add	x1, x0, #0x60
  a4:	ldr	x0, [x0, #32]
  a8:	cmp	x0, x1
  ac:	b.eq	b4 <gomp_fini_work_share+0x14>  // b.none
  b0:	b	0 <free>
  b4:	ret

00000000000000b8 <gomp_work_share_start>:
  b8:	stp	x29, x30, [sp, #-64]!
  bc:	mov	x29, sp
  c0:	stp	x19, x20, [sp, #16]
  c4:	mrs	x19, tpidr_el0
  c8:	adrp	x20, 0 <gomp_tls_data>
  cc:	ldr	x20, [x20]
  d0:	stp	x21, x22, [sp, #32]
  d4:	add	x2, x19, x20
  d8:	ldr	x21, [x2, #16]
  dc:	str	x23, [sp, #48]
  e0:	mov	x23, x0
  e4:	cbz	x21, 1b0 <gomp_work_share_start+0xf8>
  e8:	ldr	x1, [x2, #24]
  ec:	str	x1, [x2, #32]
  f0:	add	x1, x1, #0x50
  f4:	ldar	x2, [x1]
  f8:	cmp	x2, #0x2
  fc:	b.hi	178 <gomp_work_share_start+0xc0>  // b.pmore
 100:	mov	x0, #0x1                   	// #1
 104:	ldaxr	x2, [x1]
 108:	cbnz	x2, 114 <gomp_work_share_start+0x5c>
 10c:	stxr	w3, x0, [x1]
 110:	cbnz	w3, 104 <gomp_work_share_start+0x4c>
 114:	cmp	x2, #0x0
 118:	b.ne	168 <gomp_work_share_start+0xb0>  // b.any
 11c:	ldr	x22, [x21, #96]
 120:	cbz	x22, 198 <gomp_work_share_start+0xe0>
 124:	ldr	x0, [x22, #80]
 128:	str	x0, [x21, #96]
 12c:	ldr	w0, [x21]
 130:	str	wzr, [x22, #64]
 134:	cbnz	x23, 420 <gomp_work_share_start+0x368>
 138:	add	x0, x22, #0x60
 13c:	str	x0, [x22, #32]
 140:	add	x19, x19, x20
 144:	str	wzr, [x22, #68]
 148:	str	xzr, [x22, #80]
 14c:	mov	w0, #0x1                   	// #1
 150:	ldr	x23, [sp, #48]
 154:	str	x22, [x19, #24]
 158:	ldp	x19, x20, [sp, #16]
 15c:	ldp	x21, x22, [sp, #32]
 160:	ldp	x29, x30, [sp], #64
 164:	ret
 168:	mov	x0, x1
 16c:	bl	0 <gomp_ptrlock_get_slow>
 170:	mov	x2, x0
 174:	cbz	x0, 11c <gomp_work_share_start+0x64>
 178:	add	x19, x19, x20
 17c:	mov	w0, #0x0                   	// #0
 180:	ldp	x21, x22, [sp, #32]
 184:	str	x2, [x19, #24]
 188:	ldp	x19, x20, [sp, #16]
 18c:	ldr	x23, [sp, #48]
 190:	ldp	x29, x30, [sp], #64
 194:	ret
 198:	ldr	x0, [x21, #104]
 19c:	cbz	x0, 1f4 <gomp_work_share_start+0x13c>
 1a0:	ldr	x22, [x0, #80]
 1a4:	cbz	x22, 1f4 <gomp_work_share_start+0x13c>
 1a8:	str	xzr, [x0, #80]
 1ac:	b	124 <gomp_work_share_start+0x6c>
 1b0:	mov	x0, #0x80                  	// #128
 1b4:	bl	0 <gomp_malloc>
 1b8:	str	wzr, [x0, #64]
 1bc:	mov	x21, x0
 1c0:	cbnz	x23, 3f0 <gomp_work_share_start+0x338>
 1c4:	add	x0, x0, #0x60
 1c8:	str	x0, [x21, #32]
 1cc:	add	x19, x19, x20
 1d0:	str	wzr, [x21, #68]
 1d4:	str	xzr, [x21, #80]
 1d8:	mov	w0, #0x1                   	// #1
 1dc:	ldr	x23, [sp, #48]
 1e0:	str	x21, [x19, #24]
 1e4:	ldp	x19, x20, [sp, #16]
 1e8:	ldp	x21, x22, [sp, #32]
 1ec:	ldp	x29, x30, [sp], #64
 1f0:	ret
 1f4:	ldr	w1, [x21, #4]
 1f8:	mov	x0, #0x40                  	// #64
 1fc:	lsl	w1, w1, #1
 200:	str	w1, [x21, #4]
 204:	lsl	x1, x1, #7
 208:	bl	0 <gomp_aligned_alloc>
 20c:	mov	x22, x0
 210:	ldr	w1, [x21, #4]
 214:	ldr	x2, [x21, #312]
 218:	add	x0, x0, #0x80
 21c:	str	x2, [x22, #56]
 220:	sub	w6, w1, #0x1
 224:	str	x0, [x21, #96]
 228:	cmp	w6, #0x1
 22c:	str	x22, [x21, #312]
 230:	b.ls	3e8 <gomp_work_share_start+0x330>  // b.plast
 234:	sub	w3, w1, #0x3
 238:	sub	w5, w1, #0x2
 23c:	cmp	w3, #0xb
 240:	b.ls	478 <gomp_work_share_start+0x3c0>  // b.plast
 244:	lsr	w2, w5, #2
 248:	adrp	x1, 0 <gomp_init_work_share>
 24c:	dup	v4.2d, x22
 250:	add	x0, x22, #0xd0
 254:	ubfiz	x2, x2, #9, #30
 258:	add	x2, x2, #0xd0
 25c:	ldr	q1, [x1]
 260:	add	x2, x2, x22
 264:	movi	v6.4s, #0x4
 268:	movi	v5.4s, #0x1
 26c:	movi	v3.4s, #0x80
 270:	mov	v0.16b, v1.16b
 274:	mov	x1, x0
 278:	mov	v2.16b, v4.16b
 27c:	add	x4, x0, #0x180
 280:	mov	v7.16b, v4.16b
 284:	add	x0, x0, #0x200
 288:	add	v1.4s, v1.4s, v6.4s
 28c:	add	v0.4s, v0.4s, v5.4s
 290:	umlal	v2.2d, v0.2s, v3.2s
 294:	umlal2	v7.2d, v0.4s, v3.4s
 298:	str	d2, [x1], #128
 29c:	st1	{v2.d}[1], [x1]
 2a0:	stur	d7, [x0, #-256]
 2a4:	cmp	x0, x2
 2a8:	st1	{v7.d}[1], [x4]
 2ac:	b.ne	270 <gomp_work_share_start+0x1b8>  // b.any
 2b0:	and	w0, w5, #0xfffffffc
 2b4:	cmp	w0, w5
 2b8:	add	w0, w0, #0x1
 2bc:	b.eq	3dc <gomp_work_share_start+0x324>  // b.none
 2c0:	ubfiz	x2, x0, #7, #32
 2c4:	add	w1, w0, #0x1
 2c8:	add	x2, x22, x2
 2cc:	add	w4, w0, #0x1
 2d0:	add	x1, x22, x1, lsl #7
 2d4:	cmp	w6, w4
 2d8:	str	x1, [x2, #80]
 2dc:	b.ls	3dc <gomp_work_share_start+0x324>  // b.plast
 2e0:	add	w2, w0, #0x2
 2e4:	add	w4, w0, #0x2
 2e8:	cmp	w6, w4
 2ec:	add	x2, x22, x2, lsl #7
 2f0:	str	x2, [x1, #80]
 2f4:	b.ls	3dc <gomp_work_share_start+0x324>  // b.plast
 2f8:	add	w1, w0, #0x3
 2fc:	add	w4, w0, #0x3
 300:	cmp	w6, w4
 304:	add	x1, x22, x1, lsl #7
 308:	str	x1, [x2, #80]
 30c:	b.ls	3dc <gomp_work_share_start+0x324>  // b.plast
 310:	add	w2, w0, #0x4
 314:	add	w4, w0, #0x4
 318:	cmp	w6, w4
 31c:	add	x2, x22, x2, lsl #7
 320:	str	x2, [x1, #80]
 324:	b.ls	3dc <gomp_work_share_start+0x324>  // b.plast
 328:	add	w1, w0, #0x5
 32c:	add	w4, w0, #0x5
 330:	cmp	w6, w4
 334:	add	x1, x22, x1, lsl #7
 338:	str	x1, [x2, #80]
 33c:	b.ls	3dc <gomp_work_share_start+0x324>  // b.plast
 340:	add	w2, w0, #0x6
 344:	add	w4, w0, #0x6
 348:	cmp	w6, w4
 34c:	add	x2, x22, x2, lsl #7
 350:	str	x2, [x1, #80]
 354:	b.ls	3dc <gomp_work_share_start+0x324>  // b.plast
 358:	add	w1, w0, #0x7
 35c:	add	w4, w0, #0x7
 360:	cmp	w6, w4
 364:	add	x1, x22, x1, lsl #7
 368:	str	x1, [x2, #80]
 36c:	b.ls	3dc <gomp_work_share_start+0x324>  // b.plast
 370:	add	w2, w0, #0x8
 374:	add	w4, w0, #0x8
 378:	cmp	w6, w4
 37c:	add	x2, x22, x2, lsl #7
 380:	str	x2, [x1, #80]
 384:	b.ls	3dc <gomp_work_share_start+0x324>  // b.plast
 388:	add	w1, w0, #0x9
 38c:	add	w4, w0, #0x9
 390:	cmp	w6, w4
 394:	add	x1, x22, x1, lsl #7
 398:	str	x1, [x2, #80]
 39c:	b.ls	3dc <gomp_work_share_start+0x324>  // b.plast
 3a0:	add	w2, w0, #0xa
 3a4:	add	w4, w0, #0xa
 3a8:	cmp	w6, w4
 3ac:	add	x2, x22, x2, lsl #7
 3b0:	str	x2, [x1, #80]
 3b4:	b.ls	3dc <gomp_work_share_start+0x324>  // b.plast
 3b8:	add	w1, w0, #0xb
 3bc:	add	w4, w0, #0xb
 3c0:	cmp	w6, w4
 3c4:	add	x1, x22, x1, lsl #7
 3c8:	str	x1, [x2, #80]
 3cc:	b.ls	3dc <gomp_work_share_start+0x324>  // b.plast
 3d0:	add	w0, w0, #0xc
 3d4:	add	x0, x22, x0, lsl #7
 3d8:	str	x0, [x1, #80]
 3dc:	ubfiz	x0, x3, #7, #32
 3e0:	add	x0, x0, #0x100
 3e4:	add	x0, x22, x0
 3e8:	str	xzr, [x0, #80]
 3ec:	b	12c <gomp_work_share_start+0x74>
 3f0:	cmp	x23, #0x1
 3f4:	mov	x22, #0x4                   	// #4
 3f8:	b.ne	480 <gomp_work_share_start+0x3c8>  // b.any
 3fc:	add	x0, x21, #0x60
 400:	str	x0, [x21, #32]
 404:	mov	x2, x22
 408:	mov	w1, #0x0                   	// #0
 40c:	bl	0 <memset>
 410:	str	wzr, [x21, #48]
 414:	movi	d0, #0xffffffff00000000
 418:	str	d0, [x21, #40]
 41c:	b	1cc <gomp_work_share_start+0x114>
 420:	ubfiz	x21, x0, #2, #32
 424:	sub	x1, x23, #0x1
 428:	add	x0, x21, #0x7
 42c:	cmp	x23, #0x1
 430:	and	x0, x0, #0xfffffffffffffff8
 434:	add	x0, x0, x1
 438:	csel	x21, x21, x0, eq  // eq = none
 43c:	cmp	x21, #0x20
 440:	b.hi	468 <gomp_work_share_start+0x3b0>  // b.pmore
 444:	add	x0, x22, #0x60
 448:	str	x0, [x22, #32]
 44c:	mov	x2, x21
 450:	mov	w1, #0x0                   	// #0
 454:	bl	0 <memset>
 458:	str	wzr, [x22, #48]
 45c:	movi	d0, #0xffffffff00000000
 460:	str	d0, [x22, #40]
 464:	b	140 <gomp_work_share_start+0x88>
 468:	mov	x0, x21
 46c:	bl	0 <gomp_malloc>
 470:	str	x0, [x22, #32]
 474:	b	44c <gomp_work_share_start+0x394>
 478:	mov	w0, #0x1                   	// #1
 47c:	b	2c0 <gomp_work_share_start+0x208>
 480:	add	x22, x23, #0x7
 484:	cmp	x22, #0x20
 488:	b.ls	3fc <gomp_work_share_start+0x344>  // b.plast
 48c:	mov	x0, x22
 490:	bl	0 <gomp_malloc>
 494:	str	x0, [x21, #32]
 498:	b	404 <gomp_work_share_start+0x34c>
 49c:	nop

00000000000004a0 <gomp_work_share_end>:
 4a0:	stp	x29, x30, [sp, #-80]!
 4a4:	mov	x29, sp
 4a8:	stp	x21, x22, [sp, #32]
 4ac:	adrp	x21, 0 <gomp_tls_data>
 4b0:	ldr	x21, [x21]
 4b4:	stp	x19, x20, [sp, #16]
 4b8:	mrs	x20, tpidr_el0
 4bc:	add	x2, x20, x21
 4c0:	ldr	x19, [x2, #16]
 4c4:	cbz	x19, 578 <gomp_work_share_end+0xd8>
 4c8:	add	x0, x19, #0x84
 4cc:	str	x23, [sp, #48]
 4d0:	add	x23, x19, #0x80
 4d4:	ldar	w1, [x0]
 4d8:	and	w1, w1, #0xfffffffc
 4dc:	add	x0, x19, #0xc0
 4e0:	ldaxr	w3, [x0]
 4e4:	sub	w3, w3, #0x1
 4e8:	stlxr	w4, w3, [x0]
 4ec:	cbnz	w4, 4e0 <gomp_work_share_end+0x40>
 4f0:	cmp	w3, #0x0
 4f4:	orr	w0, w1, #0x1
 4f8:	csel	w1, w0, w1, eq  // eq = none
 4fc:	tbz	w1, #0, 554 <gomp_work_share_end+0xb4>
 500:	ldr	x22, [x2, #32]
 504:	cbz	x22, 554 <gomp_work_share_end+0xb4>
 508:	ldr	x0, [x2, #24]
 50c:	str	x0, [x19, #88]
 510:	ldr	x0, [x22, #32]
 514:	add	x2, x22, #0x60
 518:	cmp	x0, x2
 51c:	b.eq	52c <gomp_work_share_end+0x8c>  // b.none
 520:	str	w1, [sp, #76]
 524:	bl	0 <free>
 528:	ldr	w1, [sp, #76]
 52c:	add	x0, x19, #0x68
 530:	ldr	x2, [x19, #104]
 534:	str	x2, [x22, #80]
 538:	ldxr	x3, [x0]
 53c:	cmp	x3, x2
 540:	b.ne	54c <gomp_work_share_end+0xac>  // b.any
 544:	stlxr	w4, x22, [x0]
 548:	cbnz	w4, 538 <gomp_work_share_end+0x98>
 54c:	dmb	ish
 550:	b.ne	530 <gomp_work_share_end+0x90>  // b.any
 554:	add	x20, x20, x21
 558:	mov	x0, x23
 55c:	bl	0 <gomp_team_barrier_wait_end>
 560:	ldr	x23, [sp, #48]
 564:	str	xzr, [x20, #32]
 568:	ldp	x19, x20, [sp, #16]
 56c:	ldp	x21, x22, [sp, #32]
 570:	ldp	x29, x30, [sp], #80
 574:	ret
 578:	ldr	x19, [x2, #24]
 57c:	add	x1, x19, #0x60
 580:	ldr	x0, [x19, #32]
 584:	cmp	x0, x1
 588:	b.eq	590 <gomp_work_share_end+0xf0>  // b.none
 58c:	bl	0 <free>
 590:	add	x20, x20, x21
 594:	mov	x0, x19
 598:	bl	0 <free>
 59c:	ldp	x21, x22, [sp, #32]
 5a0:	str	xzr, [x20, #24]
 5a4:	ldp	x19, x20, [sp, #16]
 5a8:	ldp	x29, x30, [sp], #80
 5ac:	ret

00000000000005b0 <gomp_work_share_end_cancel>:
 5b0:	stp	x29, x30, [sp, #-80]!
 5b4:	mov	x29, sp
 5b8:	stp	x21, x22, [sp, #32]
 5bc:	adrp	x21, 0 <gomp_tls_data>
 5c0:	ldr	x21, [x21]
 5c4:	stp	x19, x20, [sp, #16]
 5c8:	mrs	x20, tpidr_el0
 5cc:	add	x2, x20, x21
 5d0:	ldr	x19, [x2, #16]
 5d4:	str	x23, [sp, #48]
 5d8:	add	x0, x19, #0x84
 5dc:	add	x23, x19, #0x80
 5e0:	ldar	w1, [x0]
 5e4:	and	w1, w1, #0xfffffffc
 5e8:	add	x0, x19, #0xc0
 5ec:	ldaxr	w3, [x0]
 5f0:	sub	w3, w3, #0x1
 5f4:	stlxr	w4, w3, [x0]
 5f8:	cbnz	w4, 5ec <gomp_work_share_end_cancel+0x3c>
 5fc:	cmp	w3, #0x0
 600:	orr	w0, w1, #0x1
 604:	csel	w1, w0, w1, eq  // eq = none
 608:	tbz	w1, #0, 660 <gomp_work_share_end_cancel+0xb0>
 60c:	ldr	x22, [x2, #32]
 610:	cbz	x22, 660 <gomp_work_share_end_cancel+0xb0>
 614:	ldr	x0, [x2, #24]
 618:	str	x0, [x19, #88]
 61c:	ldr	x0, [x22, #32]
 620:	add	x2, x22, #0x60
 624:	cmp	x0, x2
 628:	b.eq	638 <gomp_work_share_end_cancel+0x88>  // b.none
 62c:	str	w1, [sp, #76]
 630:	bl	0 <free>
 634:	ldr	w1, [sp, #76]
 638:	add	x0, x19, #0x68
 63c:	ldr	x2, [x19, #104]
 640:	str	x2, [x22, #80]
 644:	ldxr	x3, [x0]
 648:	cmp	x3, x2
 64c:	b.ne	658 <gomp_work_share_end_cancel+0xa8>  // b.any
 650:	stlxr	w4, x22, [x0]
 654:	cbnz	w4, 644 <gomp_work_share_end_cancel+0x94>
 658:	dmb	ish
 65c:	b.ne	63c <gomp_work_share_end_cancel+0x8c>  // b.any
 660:	add	x20, x20, x21
 664:	mov	x0, x23
 668:	ldp	x21, x22, [sp, #32]
 66c:	ldr	x23, [sp, #48]
 670:	str	xzr, [x20, #32]
 674:	ldp	x19, x20, [sp, #16]
 678:	ldp	x29, x30, [sp], #80
 67c:	b	0 <gomp_team_barrier_wait_cancel_end>

0000000000000680 <gomp_work_share_end_nowait>:
 680:	stp	x29, x30, [sp, #-48]!
 684:	mov	x29, sp
 688:	stp	x21, x22, [sp, #32]
 68c:	adrp	x22, 0 <gomp_tls_data>
 690:	ldr	x22, [x22]
 694:	stp	x19, x20, [sp, #16]
 698:	mrs	x20, tpidr_el0
 69c:	add	x1, x20, x22
 6a0:	ldp	x21, x19, [x1, #16]
 6a4:	cbz	x21, 734 <gomp_work_share_end_nowait+0xb4>
 6a8:	ldr	x0, [x1, #32]
 6ac:	cbz	x0, 6dc <gomp_work_share_end_nowait+0x5c>
 6b0:	add	x0, x19, #0x44
 6b4:	ldxr	w2, [x0]
 6b8:	add	w2, w2, #0x1
 6bc:	stlxr	w3, w2, [x0]
 6c0:	cbnz	w3, 6b4 <gomp_work_share_end_nowait+0x34>
 6c4:	dmb	ish
 6c8:	ldr	w0, [x21]
 6cc:	cmp	w0, w2
 6d0:	b.eq	6ec <gomp_work_share_end_nowait+0x6c>  // b.none
 6d4:	add	x20, x20, x22
 6d8:	str	xzr, [x20, #32]
 6dc:	ldp	x19, x20, [sp, #16]
 6e0:	ldp	x21, x22, [sp, #32]
 6e4:	ldp	x29, x30, [sp], #48
 6e8:	ret
 6ec:	ldp	x0, x19, [x1, #24]
 6f0:	str	x0, [x21, #88]
 6f4:	ldr	x0, [x19, #32]
 6f8:	add	x1, x19, #0x60
 6fc:	cmp	x0, x1
 700:	b.eq	708 <gomp_work_share_end_nowait+0x88>  // b.none
 704:	bl	0 <free>
 708:	add	x0, x21, #0x68
 70c:	ldr	x1, [x21, #104]
 710:	str	x1, [x19, #80]
 714:	ldxr	x2, [x0]
 718:	cmp	x2, x1
 71c:	b.ne	728 <gomp_work_share_end_nowait+0xa8>  // b.any
 720:	stlxr	w3, x19, [x0]
 724:	cbnz	w3, 714 <gomp_work_share_end_nowait+0x94>
 728:	dmb	ish
 72c:	b.eq	6d4 <gomp_work_share_end_nowait+0x54>  // b.none
 730:	b	70c <gomp_work_share_end_nowait+0x8c>
 734:	ldr	x0, [x19, #32]
 738:	add	x1, x19, #0x60
 73c:	cmp	x0, x1
 740:	b.eq	748 <gomp_work_share_end_nowait+0xc8>  // b.none
 744:	bl	0 <free>
 748:	add	x20, x20, x22
 74c:	mov	x0, x19
 750:	bl	0 <free>
 754:	str	xzr, [x20, #24]
 758:	b	6dc <gomp_work_share_end_nowait+0x5c>

lock.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_ialias_omp_init_lock>:
   0:	str	wzr, [x0]
   4:	ret

0000000000000008 <gomp_ialias_omp_destroy_lock>:
   8:	ret
   c:	nop

0000000000000010 <gomp_ialias_omp_set_lock>:
  10:	mov	x2, x0
  14:	mov	w3, #0x1                   	// #1
  18:	ldaxr	w1, [x2]
  1c:	cbnz	w1, 28 <gomp_ialias_omp_set_lock+0x18>
  20:	stxr	w4, w3, [x2]
  24:	cbnz	w4, 18 <gomp_ialias_omp_set_lock+0x8>
  28:	cmp	w1, #0x0
  2c:	b.ne	34 <gomp_ialias_omp_set_lock+0x24>  // b.any
  30:	ret
  34:	b	0 <gomp_mutex_lock_slow>

0000000000000038 <gomp_ialias_omp_unset_lock>:
  38:	mov	x1, x0
  3c:	ldxr	w2, [x1]
  40:	stlxr	w3, wzr, [x1]
  44:	cbnz	w3, 3c <gomp_ialias_omp_unset_lock+0x4>
  48:	tbnz	w2, #31, 50 <gomp_ialias_omp_unset_lock+0x18>
  4c:	ret
  50:	b	0 <gomp_mutex_unlock_slow>
  54:	nop

0000000000000058 <gomp_ialias_omp_test_lock>:
  58:	mov	w1, #0x1                   	// #1
  5c:	ldaxr	w2, [x0]
  60:	cbnz	w2, 6c <gomp_ialias_omp_test_lock+0x14>
  64:	stxr	w3, w1, [x0]
  68:	cbnz	w3, 5c <gomp_ialias_omp_test_lock+0x4>
  6c:	cmp	w2, #0x0
  70:	cset	w0, eq  // eq = none
  74:	ret

0000000000000078 <gomp_ialias_omp_init_nest_lock>:
  78:	stp	xzr, xzr, [x0]
  7c:	ret

0000000000000080 <gomp_ialias_omp_destroy_nest_lock>:
  80:	ret
  84:	nop

0000000000000088 <gomp_ialias_omp_set_nest_lock>:
  88:	adrp	x2, 0 <gomp_tls_data>
  8c:	ldr	x2, [x2]
  90:	mrs	x1, tpidr_el0
  94:	stp	x29, x30, [sp, #-32]!
  98:	add	x1, x1, x2
  9c:	mov	x29, sp
  a0:	stp	x19, x20, [sp, #16]
  a4:	mov	x19, x0
  a8:	ldr	x20, [x1, #80]
  ac:	cbz	x20, f8 <gomp_ialias_omp_set_nest_lock+0x70>
  b0:	add	x20, x20, #0x90
  b4:	ldr	x0, [x19, #8]
  b8:	cmp	x0, x20
  bc:	b.eq	e0 <gomp_ialias_omp_set_nest_lock+0x58>  // b.none
  c0:	mov	w0, #0x1                   	// #1
  c4:	ldaxr	w1, [x19]
  c8:	cbnz	w1, d4 <gomp_ialias_omp_set_nest_lock+0x4c>
  cc:	stxr	w2, w0, [x19]
  d0:	cbnz	w2, c4 <gomp_ialias_omp_set_nest_lock+0x3c>
  d4:	cmp	w1, #0x0
  d8:	b.ne	104 <gomp_ialias_omp_set_nest_lock+0x7c>  // b.any
  dc:	str	x20, [x19, #8]
  e0:	ldr	w0, [x19, #4]
  e4:	add	w0, w0, #0x1
  e8:	str	w0, [x19, #4]
  ec:	ldp	x19, x20, [sp, #16]
  f0:	ldp	x29, x30, [sp], #32
  f4:	ret
  f8:	bl	0 <gomp_new_icv>
  fc:	mov	x20, x0
 100:	b	b4 <gomp_ialias_omp_set_nest_lock+0x2c>
 104:	mov	x0, x19
 108:	bl	0 <gomp_mutex_lock_slow>
 10c:	b	dc <gomp_ialias_omp_set_nest_lock+0x54>

0000000000000110 <gomp_ialias_omp_unset_nest_lock>:
 110:	ldr	w2, [x0, #4]
 114:	mov	x1, x0
 118:	sub	w2, w2, #0x1
 11c:	str	w2, [x0, #4]
 120:	cbz	w2, 128 <gomp_ialias_omp_unset_nest_lock+0x18>
 124:	ret
 128:	str	xzr, [x0, #8]
 12c:	ldxr	w2, [x1]
 130:	stlxr	w3, wzr, [x1]
 134:	cbnz	w3, 12c <gomp_ialias_omp_unset_nest_lock+0x1c>
 138:	tbz	w2, #31, 124 <gomp_ialias_omp_unset_nest_lock+0x14>
 13c:	b	0 <gomp_mutex_unlock_slow>

0000000000000140 <gomp_ialias_omp_test_nest_lock>:
 140:	adrp	x2, 0 <gomp_tls_data>
 144:	ldr	x2, [x2]
 148:	mrs	x1, tpidr_el0
 14c:	stp	x29, x30, [sp, #-32]!
 150:	add	x1, x1, x2
 154:	mov	x29, sp
 158:	ldr	x1, [x1, #80]
 15c:	str	x19, [sp, #16]
 160:	mov	x19, x0
 164:	cbz	x1, 1ac <gomp_ialias_omp_test_nest_lock+0x6c>
 168:	ldr	x0, [x19, #8]
 16c:	add	x1, x1, #0x90
 170:	mov	w2, #0x1                   	// #1
 174:	cmp	x0, x1
 178:	b.eq	1c4 <gomp_ialias_omp_test_nest_lock+0x84>  // b.none
 17c:	ldaxr	w0, [x19]
 180:	cbnz	w0, 18c <gomp_ialias_omp_test_nest_lock+0x4c>
 184:	stxr	w3, w2, [x19]
 188:	cbnz	w3, 17c <gomp_ialias_omp_test_nest_lock+0x3c>
 18c:	cmp	w0, #0x0
 190:	b.ne	1dc <gomp_ialias_omp_test_nest_lock+0x9c>  // b.any
 194:	mov	w0, w2
 198:	str	w2, [x19, #4]
 19c:	str	x1, [x19, #8]
 1a0:	ldr	x19, [sp, #16]
 1a4:	ldp	x29, x30, [sp], #32
 1a8:	ret
 1ac:	bl	0 <gomp_new_icv>
 1b0:	mov	x1, x0
 1b4:	ldr	x0, [x19, #8]
 1b8:	mov	w2, #0x1                   	// #1
 1bc:	cmp	x0, x1
 1c0:	b.ne	17c <gomp_ialias_omp_test_nest_lock+0x3c>  // b.any
 1c4:	ldr	w0, [x19, #4]
 1c8:	add	w0, w0, #0x1
 1cc:	str	w0, [x19, #4]
 1d0:	ldr	x19, [sp, #16]
 1d4:	ldp	x29, x30, [sp], #32
 1d8:	ret
 1dc:	mov	w0, #0x0                   	// #0
 1e0:	b	1a0 <gomp_ialias_omp_test_nest_lock+0x60>

mutex.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_mutex_lock_slow>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	adrp	x6, 0 <gomp_spin_count_var>
   8:	adrp	x5, 0 <gomp_available_cpus>
   c:	mov	x29, sp
  10:	stp	x19, x20, [sp, #16]
  14:	mov	x19, x0
  18:	adrp	x0, 0 <gomp_managed_threads>
  1c:	add	x2, x0, #0x0
  20:	adrp	x4, 0 <gomp_throttled_spin_count_var>
  24:	mov	w7, #0x1                   	// #1
  28:	cmp	w1, #0x1
  2c:	b.ne	1e0 <gomp_mutex_lock_slow+0x1e0>  // b.any
  30:	ldr	x0, [x6]
  34:	ldr	x8, [x2]
  38:	ldr	x3, [x5]
  3c:	ldr	x1, [x4]
  40:	cmp	x8, x3
  44:	csel	x0, x1, x0, hi  // hi = pmore
  48:	cbz	x0, 90 <gomp_mutex_lock_slow+0x90>
  4c:	mov	x1, #0x0                   	// #0
  50:	b	60 <gomp_mutex_lock_slow+0x60>
  54:	add	x1, x1, #0x1
  58:	cmp	x1, x0
  5c:	b.eq	90 <gomp_mutex_lock_slow+0x90>  // b.none
  60:	ldr	w3, [x19]
  64:	cmp	w3, #0x1
  68:	b.eq	54 <gomp_mutex_lock_slow+0x54>  // b.none
  6c:	ldaxr	w1, [x19]
  70:	cbnz	w1, 7c <gomp_mutex_lock_slow+0x7c>
  74:	stxr	w0, w7, [x19]
  78:	cbnz	w0, 6c <gomp_mutex_lock_slow+0x6c>
  7c:	cmp	w1, #0x0
  80:	b.ne	28 <gomp_mutex_lock_slow+0x28>  // b.any
  84:	ldp	x19, x20, [sp, #16]
  88:	ldp	x29, x30, [sp], #64
  8c:	ret
  90:	mov	w20, #0xffffffff            	// #-1
  94:	ldaxr	w0, [x19]
  98:	stxr	w1, w20, [x19]
  9c:	cbnz	w1, 94 <gomp_mutex_lock_slow+0x94>
  a0:	cbz	w0, 84 <gomp_mutex_lock_slow+0x84>
  a4:	stp	x21, x22, [sp, #32]
  a8:	adrp	x21, 0 <gomp_mutex_lock_slow>
  ac:	mov	w3, w20
  b0:	ldr	w2, [x21]
  b4:	mov	x1, x19
  b8:	add	x22, x21, #0x0
  bc:	mov	x4, #0x0                   	// #0
  c0:	mov	x0, #0x62                  	// #98
  c4:	str	x23, [sp, #48]
  c8:	bl	0 <syscall>
  cc:	tbnz	w0, #31, 1a0 <gomp_mutex_lock_slow+0x1a0>
  d0:	adrp	x20, 0 <gomp_managed_threads>
  d4:	add	x20, x20, #0x0
  d8:	adrp	x22, 0 <gomp_spin_count_var>
  dc:	mov	w4, #0xffffffff            	// #-1
  e0:	adrp	x6, 0 <gomp_available_cpus>
  e4:	adrp	x5, 0 <gomp_throttled_spin_count_var>
  e8:	ldaxr	w0, [x19]
  ec:	stxr	w1, w4, [x19]
  f0:	cbnz	w1, e8 <gomp_mutex_lock_slow+0xe8>
  f4:	cbz	w0, 194 <gomp_mutex_lock_slow+0x194>
  f8:	ldr	x0, [x22]
  fc:	ldr	x3, [x20]
 100:	ldr	x2, [x6]
 104:	ldr	x1, [x5]
 108:	cmp	x3, x2
 10c:	csel	x0, x1, x0, hi  // hi = pmore
 110:	cbz	x0, 130 <gomp_mutex_lock_slow+0x130>
 114:	mov	x1, #0x0                   	// #0
 118:	ldr	w2, [x19]
 11c:	cmn	w2, #0x1
 120:	b.ne	e8 <gomp_mutex_lock_slow+0xe8>  // b.any
 124:	add	x1, x1, #0x1
 128:	cmp	x1, x0
 12c:	b.ne	118 <gomp_mutex_lock_slow+0x118>  // b.any
 130:	adrp	x21, 0 <gomp_mutex_lock_slow>
 134:	mov	x1, x19
 138:	add	x23, x21, #0x0
 13c:	mov	x4, #0x0                   	// #0
 140:	ldr	w2, [x21]
 144:	mov	w3, #0xffffffff            	// #-1
 148:	mov	x0, #0x62                  	// #98
 14c:	bl	0 <syscall>
 150:	tbz	w0, #31, dc <gomp_mutex_lock_slow+0xdc>
 154:	bl	0 <__errno_location>
 158:	ldr	w0, [x0]
 15c:	cmp	w0, #0x26
 160:	b.ne	dc <gomp_mutex_lock_slow+0xdc>  // b.any
 164:	ldr	w5, [x23, #4]
 168:	mov	x1, x19
 16c:	ldr	w2, [x21]
 170:	mov	x4, #0x0                   	// #0
 174:	and	w5, w5, #0xffffff7f
 178:	mov	w3, #0xffffffff            	// #-1
 17c:	and	w2, w2, #0xffffff7f
 180:	mov	x0, #0x62                  	// #98
 184:	str	w2, [x21]
 188:	str	w5, [x23, #4]
 18c:	bl	0 <syscall>
 190:	b	dc <gomp_mutex_lock_slow+0xdc>
 194:	ldp	x21, x22, [sp, #32]
 198:	ldr	x23, [sp, #48]
 19c:	b	84 <gomp_mutex_lock_slow+0x84>
 1a0:	bl	0 <__errno_location>
 1a4:	ldr	w0, [x0]
 1a8:	cmp	w0, #0x26
 1ac:	b.ne	d0 <gomp_mutex_lock_slow+0xd0>  // b.any
 1b0:	ldr	w5, [x22, #4]
 1b4:	mov	w3, w20
 1b8:	ldr	w2, [x21]
 1bc:	mov	x1, x19
 1c0:	and	w5, w5, #0xffffff7f
 1c4:	mov	x4, #0x0                   	// #0
 1c8:	and	w2, w2, #0xffffff7f
 1cc:	mov	x0, #0x62                  	// #98
 1d0:	str	w2, [x21]
 1d4:	str	w5, [x22, #4]
 1d8:	bl	0 <syscall>
 1dc:	b	d0 <gomp_mutex_lock_slow+0xd0>
 1e0:	stp	x21, x22, [sp, #32]
 1e4:	str	x23, [sp, #48]
 1e8:	b	d0 <gomp_mutex_lock_slow+0xd0>
 1ec:	nop

00000000000001f0 <gomp_mutex_unlock_slow>:
 1f0:	stp	x29, x30, [sp, #-48]!
 1f4:	mov	w3, #0x1                   	// #1
 1f8:	mov	x29, sp
 1fc:	stp	x19, x20, [sp, #16]
 200:	mov	x19, x0
 204:	mov	x1, x19
 208:	str	x21, [sp, #32]
 20c:	adrp	x21, 0 <gomp_mutex_lock_slow>
 210:	add	x20, x21, #0x0
 214:	mov	x0, #0x62                  	// #98
 218:	ldr	w2, [x20, #4]
 21c:	bl	0 <syscall>
 220:	tbnz	w0, #31, 234 <gomp_mutex_unlock_slow+0x44>
 224:	ldp	x19, x20, [sp, #16]
 228:	ldr	x21, [sp, #32]
 22c:	ldp	x29, x30, [sp], #48
 230:	ret
 234:	bl	0 <__errno_location>
 238:	ldr	w0, [x0]
 23c:	cmp	w0, #0x26
 240:	b.ne	224 <gomp_mutex_unlock_slow+0x34>  // b.any
 244:	ldr	w4, [x21]
 248:	mov	x1, x19
 24c:	ldr	w2, [x20, #4]
 250:	mov	w3, #0x1                   	// #1
 254:	and	w4, w4, #0xffffff7f
 258:	str	w4, [x21]
 25c:	and	w2, w2, #0xffffff7f
 260:	str	w2, [x20, #4]
 264:	ldp	x19, x20, [sp, #16]
 268:	mov	x0, #0x62                  	// #98
 26c:	ldr	x21, [sp, #32]
 270:	ldp	x29, x30, [sp], #48
 274:	b	0 <syscall>

proc.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_cpuset_popcount>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <__sched_cpucount>
   c:	sxtw	x0, w0
  10:	ldp	x29, x30, [sp], #16
  14:	ret

0000000000000018 <gomp_init_num_threads>:
  18:	stp	x29, x30, [sp, #-80]!
  1c:	mov	w0, #0x53                  	// #83
  20:	mov	x29, sp
  24:	stp	x19, x20, [sp, #16]
  28:	adrp	x19, 8 <gomp_cpuset_popcount+0x8>
  2c:	stp	x21, x22, [sp, #32]
  30:	adrp	x22, 8 <gomp_cpuset_popcount+0x8>
  34:	add	x20, x22, #0x0
  38:	stp	x23, x24, [sp, #48]
  3c:	bl	0 <sysconf>
  40:	add	x0, x0, #0x3f
  44:	mov	x21, #0x80                  	// #128
  48:	lsr	x0, x0, #6
  4c:	lsl	x0, x0, #3
  50:	str	x0, [x22]
  54:	bl	0 <gomp_malloc>
  58:	str	x0, [x19]
  5c:	str	x0, [sp, #72]
  60:	bl	0 <pthread_self>
  64:	ldr	x2, [sp, #72]
  68:	mov	x23, x0
  6c:	nop
  70:	ldr	x1, [x20]
  74:	mov	x0, x23
  78:	add	x24, x19, #0x0
  7c:	bl	0 <pthread_getaffinity_np>
  80:	cbz	w0, d8 <gomp_init_num_threads+0xc0>
  84:	ldr	x2, [x19]
  88:	cmp	w0, #0x16
  8c:	mov	x1, #0x80                  	// #128
  90:	b.ne	148 <gomp_init_num_threads+0x130>  // b.any
  94:	ldr	x3, [x20]
  98:	mov	x0, x2
  9c:	cmp	x3, #0x7f
  a0:	b.ls	130 <gomp_init_num_threads+0x118>  // b.plast
  a4:	lsl	x1, x3, #1
  a8:	str	x1, [x20]
  ac:	cmp	x1, #0x3ff
  b0:	b.ls	134 <gomp_init_num_threads+0x11c>  // b.plast
  b4:	bl	0 <realloc>
  b8:	mov	x2, x0
  bc:	cbz	x0, 1c0 <gomp_init_num_threads+0x1a8>
  c0:	ldr	x1, [x20]
  c4:	str	x0, [x19]
  c8:	add	x24, x19, #0x0
  cc:	mov	x0, x23
  d0:	bl	0 <pthread_getaffinity_np>
  d4:	cbnz	w0, 84 <gomp_init_num_threads+0x6c>
  d8:	ldr	x1, [x19]
  dc:	adrp	x21, 0 <gomp_global_icv>
  e0:	ldr	x0, [x20]
  e4:	bl	0 <__sched_cpucount>
  e8:	sxtw	x0, w0
  ec:	str	x0, [x21]
  f0:	cbnz	x0, 150 <gomp_init_num_threads+0x138>
  f4:	ldr	x2, [x19]
  f8:	mov	x1, #0x1                   	// #1
  fc:	mov	x0, x2
 100:	str	x1, [x21]
 104:	str	xzr, [x22]
 108:	bl	0 <free>
 10c:	mov	w0, #0x54                  	// #84
 110:	str	xzr, [x19]
 114:	bl	0 <sysconf>
 118:	str	x0, [x21]
 11c:	ldp	x19, x20, [sp, #16]
 120:	ldp	x21, x22, [sp, #32]
 124:	ldp	x23, x24, [sp, #48]
 128:	ldp	x29, x30, [sp], #80
 12c:	ret
 130:	str	x21, [x20]
 134:	mov	x0, x2
 138:	bl	0 <gomp_realloc>
 13c:	mov	x2, x0
 140:	str	x0, [x19]
 144:	b	70 <gomp_init_num_threads+0x58>
 148:	adrp	x21, 0 <gomp_global_icv>
 14c:	b	f8 <gomp_init_num_threads+0xe0>
 150:	adrp	x0, 0 <gomp_cpuset_popcount>
 154:	ldr	x2, [x20]
 158:	str	x2, [x0]
 15c:	cmp	xzr, x2, lsl #3
 160:	lsl	x0, x2, #3
 164:	b.eq	194 <gomp_init_num_threads+0x17c>  // b.none
 168:	ldr	x4, [x19]
 16c:	nop
 170:	mov	x3, x0
 174:	sub	x0, x0, #0x1
 178:	lsr	x1, x0, #6
 17c:	cmp	x2, x0, lsr #3
 180:	b.ls	190 <gomp_init_num_threads+0x178>  // b.plast
 184:	ldr	x1, [x4, x1, lsl #3]
 188:	lsr	x1, x1, x0
 18c:	tbnz	w1, #0, 1ac <gomp_init_num_threads+0x194>
 190:	cbnz	x0, 170 <gomp_init_num_threads+0x158>
 194:	str	x0, [x22]
 198:	ldp	x19, x20, [sp, #16]
 19c:	ldp	x21, x22, [sp, #32]
 1a0:	ldp	x23, x24, [sp, #48]
 1a4:	ldp	x29, x30, [sp], #80
 1a8:	ret
 1ac:	add	x0, x3, #0x3f
 1b0:	lsr	x0, x0, #6
 1b4:	lsl	x0, x0, #3
 1b8:	str	x0, [x22]
 1bc:	b	198 <gomp_init_num_threads+0x180>
 1c0:	adrp	x21, 0 <gomp_global_icv>
 1c4:	ldr	x2, [x24]
 1c8:	b	f8 <gomp_init_num_threads+0xe0>
 1cc:	nop

00000000000001d0 <gomp_dynamic_max_threads>:
 1d0:	adrp	x2, 0 <gomp_tls_data>
 1d4:	ldr	x2, [x2]
 1d8:	mrs	x1, tpidr_el0
 1dc:	stp	x29, x30, [sp, #-80]!
 1e0:	adrp	x3, 0 <gomp_places_list>
 1e4:	add	x1, x1, x2
 1e8:	mov	x29, sp
 1ec:	adrp	x0, 0 <gomp_global_icv>
 1f0:	add	x0, x0, #0x0
 1f4:	ldr	x1, [x1, #80]
 1f8:	stp	x19, x20, [sp, #16]
 1fc:	cmp	x1, #0x0
 200:	add	x1, x1, #0x90
 204:	ldr	x2, [x3]
 208:	csel	x0, x0, x1, eq  // eq = none
 20c:	ldr	x19, [x0]
 210:	cbz	x2, 268 <gomp_dynamic_max_threads+0x98>
 214:	adrp	x0, 0 <gomp_available_cpus>
 218:	ldr	w0, [x0]
 21c:	cmp	w19, w0
 220:	mov	w1, #0x3                   	// #3
 224:	csel	w19, w19, w0, ls  // ls = plast
 228:	add	x0, sp, #0x38
 22c:	bl	0 <getloadavg>
 230:	cmp	w0, #0x3
 234:	mov	w0, #0x0                   	// #0
 238:	b.ne	250 <gomp_dynamic_max_threads+0x80>  // b.any
 23c:	adrp	x0, 0 <gomp_cpuset_popcount>
 240:	ldr	d0, [sp, #72]
 244:	ldr	d1, [x0]
 248:	fadd	d0, d0, d1
 24c:	fcvtzu	w0, d0
 250:	cmp	w0, w19
 254:	sub	w0, w19, w0
 258:	csinc	w0, w0, wzr, cc  // cc = lo, ul, last
 25c:	ldp	x19, x20, [sp, #16]
 260:	ldp	x29, x30, [sp], #80
 264:	ret
 268:	str	x21, [sp, #32]
 26c:	adrp	x21, 8 <gomp_cpuset_popcount+0x8>
 270:	ldr	x20, [x21]
 274:	cbz	x20, 294 <gomp_dynamic_max_threads+0xc4>
 278:	bl	0 <pthread_self>
 27c:	adrp	x1, 0 <gomp_cpuset_popcount>
 280:	mov	x2, x20
 284:	ldr	x20, [x1]
 288:	mov	x1, x20
 28c:	bl	0 <pthread_getaffinity_np>
 290:	cbz	w0, 2a4 <gomp_dynamic_max_threads+0xd4>
 294:	mov	w0, #0x54                  	// #84
 298:	bl	0 <sysconf>
 29c:	ldr	x21, [sp, #32]
 2a0:	b	21c <gomp_dynamic_max_threads+0x4c>
 2a4:	ldr	x1, [x21]
 2a8:	mov	x0, x20
 2ac:	bl	0 <__sched_cpucount>
 2b0:	cmp	w0, #0x0
 2b4:	csinc	w0, w0, wzr, ne  // ne = any
 2b8:	ldr	x21, [sp, #32]
 2bc:	b	21c <gomp_dynamic_max_threads+0x4c>

00000000000002c0 <gomp_ialias_omp_get_num_procs>:
 2c0:	adrp	x0, 0 <gomp_places_list>
 2c4:	ldr	x0, [x0]
 2c8:	cbz	x0, 2d8 <gomp_ialias_omp_get_num_procs+0x18>
 2cc:	adrp	x0, 0 <gomp_available_cpus>
 2d0:	ldr	w0, [x0]
 2d4:	ret
 2d8:	stp	x29, x30, [sp, #-32]!
 2dc:	mov	x29, sp
 2e0:	stp	x19, x20, [sp, #16]
 2e4:	adrp	x20, 8 <gomp_cpuset_popcount+0x8>
 2e8:	ldr	x19, [x20]
 2ec:	cbz	x19, 30c <gomp_ialias_omp_get_num_procs+0x4c>
 2f0:	bl	0 <pthread_self>
 2f4:	adrp	x1, 0 <gomp_cpuset_popcount>
 2f8:	mov	x2, x19
 2fc:	ldr	x19, [x1]
 300:	mov	x1, x19
 304:	bl	0 <pthread_getaffinity_np>
 308:	cbz	w0, 320 <gomp_ialias_omp_get_num_procs+0x60>
 30c:	mov	w0, #0x54                  	// #84
 310:	bl	0 <sysconf>
 314:	ldp	x19, x20, [sp, #16]
 318:	ldp	x29, x30, [sp], #32
 31c:	ret
 320:	ldr	x1, [x20]
 324:	mov	x0, x19
 328:	bl	0 <__sched_cpucount>
 32c:	cmp	w0, #0x0
 330:	csinc	w0, w0, wzr, ne  // ne = any
 334:	b	314 <gomp_ialias_omp_get_num_procs+0x54>

sem.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_sem_wait_slow>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	w2, w1
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x19, x0
  14:	cbnz	w1, a8 <gomp_sem_wait_slow+0xa8>
  18:	adrp	x5, 0 <gomp_spin_count_var>
  1c:	adrp	x4, 0 <gomp_managed_threads>
  20:	adrp	x3, 0 <gomp_available_cpus>
  24:	add	x5, x5, #0x0
  28:	add	x4, x4, #0x0
  2c:	add	x3, x3, #0x0
  30:	adrp	x6, 0 <gomp_throttled_spin_count_var>
  34:	mov	w7, #0x80000000            	// #-2147483648
  38:	ldr	x2, [x4]
  3c:	ldr	x1, [x3]
  40:	add	x0, x6, #0x0
  44:	cmp	x2, x1
  48:	csel	x0, x5, x0, ls  // ls = plast
  4c:	ldr	x2, [x0]
  50:	cbz	x2, b4 <gomp_sem_wait_slow+0xb4>
  54:	mov	x0, #0x0                   	// #0
  58:	b	68 <gomp_sem_wait_slow+0x68>
  5c:	add	x0, x0, #0x1
  60:	cmp	x0, x2
  64:	b.eq	b4 <gomp_sem_wait_slow+0xb4>  // b.none
  68:	ldr	w1, [x19]
  6c:	cbz	w1, 5c <gomp_sem_wait_slow+0x5c>
  70:	ldr	w2, [x19]
  74:	cmp	w2, #0x0
  78:	b.lt	a8 <gomp_sem_wait_slow+0xa8>  // b.tstop
  7c:	b.eq	38 <gomp_sem_wait_slow+0x38>  // b.none
  80:	sub	w0, w2, #0x1
  84:	ldaxr	w1, [x19]
  88:	cmp	w1, w2
  8c:	b.ne	98 <gomp_sem_wait_slow+0x98>  // b.any
  90:	stxr	w8, w0, [x19]
  94:	cbnz	w8, 84 <gomp_sem_wait_slow+0x84>
  98:	b.eq	148 <gomp_sem_wait_slow+0x148>  // b.none
  9c:	mov	w2, w1
  a0:	cbz	w1, 38 <gomp_sem_wait_slow+0x38>
  a4:	nop
  a8:	stp	x21, x22, [sp, #32]
  ac:	str	x23, [sp, #48]
  b0:	b	f8 <gomp_sem_wait_slow+0xf8>
  b4:	ldaxr	w0, [x19]
  b8:	cbnz	w0, c4 <gomp_sem_wait_slow+0xc4>
  bc:	stxr	w1, w7, [x19]
  c0:	cbnz	w1, b4 <gomp_sem_wait_slow+0xb4>
  c4:	cmp	w0, #0x0
  c8:	b.ne	70 <gomp_sem_wait_slow+0x70>  // b.any
  cc:	adrp	x20, 0 <gomp_futex_wait>
  d0:	mov	x1, x19
  d4:	mov	x4, #0x0                   	// #0
  d8:	mov	w3, #0x80000000            	// #-2147483648
  dc:	ldr	w2, [x20]
  e0:	mov	x0, #0x62                  	// #98
  e4:	stp	x21, x22, [sp, #32]
  e8:	str	x23, [sp, #48]
  ec:	bl	0 <syscall>
  f0:	tbnz	w0, #31, 28c <gomp_sem_wait_slow+0x28c>
  f4:	ldr	w2, [x19]
  f8:	adrp	x21, 0 <gomp_managed_threads>
  fc:	add	x21, x21, #0x0
 100:	mov	w20, #0x80000000            	// #-2147483648
 104:	adrp	x22, 0 <gomp_spin_count_var>
 108:	mov	w1, w2
 10c:	ands	w0, w2, #0x7fffffff
 110:	b.eq	154 <gomp_sem_wait_slow+0x154>  // b.none
 114:	sub	w0, w0, #0x1
 118:	orr	w0, w0, #0x80000000
 11c:	ldaxr	w3, [x19]
 120:	cmp	w3, w2
 124:	b.ne	130 <gomp_sem_wait_slow+0x130>  // b.any
 128:	stxr	w4, w0, [x19]
 12c:	cbnz	w4, 11c <gomp_sem_wait_slow+0x11c>
 130:	mov	w2, w3
 134:	b.ne	108 <gomp_sem_wait_slow+0x108>  // b.any
 138:	tst	w1, #0x7ffffffe
 13c:	b.ne	224 <gomp_sem_wait_slow+0x224>  // b.any
 140:	ldp	x21, x22, [sp, #32]
 144:	ldr	x23, [sp, #48]
 148:	ldp	x19, x20, [sp, #16]
 14c:	ldp	x29, x30, [sp], #64
 150:	ret
 154:	ldaxr	w0, [x19]
 158:	cmp	w0, w2
 15c:	b.ne	168 <gomp_sem_wait_slow+0x168>  // b.any
 160:	stxr	w1, w20, [x19]
 164:	cbnz	w1, 154 <gomp_sem_wait_slow+0x154>
 168:	mov	w2, w0
 16c:	b.ne	108 <gomp_sem_wait_slow+0x108>  // b.any
 170:	ldr	x0, [x22]
 174:	ldr	x3, [x21]
 178:	adrp	x2, 0 <gomp_available_cpus>
 17c:	adrp	x1, 0 <gomp_throttled_spin_count_var>
 180:	ldr	x2, [x2]
 184:	ldr	x1, [x1]
 188:	cmp	x3, x2
 18c:	csel	x0, x1, x0, hi  // hi = pmore
 190:	cbz	x0, 1bc <gomp_sem_wait_slow+0x1bc>
 194:	mov	x1, #0x0                   	// #0
 198:	b	1a8 <gomp_sem_wait_slow+0x1a8>
 19c:	add	x1, x1, #0x1
 1a0:	cmp	x1, x0
 1a4:	b.eq	1bc <gomp_sem_wait_slow+0x1bc>  // b.none
 1a8:	ldr	w2, [x19]
 1ac:	cmp	w2, w20
 1b0:	b.eq	19c <gomp_sem_wait_slow+0x19c>  // b.none
 1b4:	ldr	w2, [x19]
 1b8:	b	108 <gomp_sem_wait_slow+0x108>
 1bc:	adrp	x23, 0 <gomp_futex_wait>
 1c0:	mov	x1, x19
 1c4:	mov	x4, #0x0                   	// #0
 1c8:	mov	w3, #0x80000000            	// #-2147483648
 1cc:	ldr	w2, [x23]
 1d0:	mov	x0, #0x62                  	// #98
 1d4:	bl	0 <syscall>
 1d8:	tbz	w0, #31, 1b4 <gomp_sem_wait_slow+0x1b4>
 1dc:	bl	0 <__errno_location>
 1e0:	ldr	w0, [x0]
 1e4:	cmp	w0, #0x26
 1e8:	b.ne	1b4 <gomp_sem_wait_slow+0x1b4>  // b.any
 1ec:	adrp	x5, 0 <gomp_futex_wake>
 1f0:	ldr	w2, [x23]
 1f4:	mov	x1, x19
 1f8:	mov	x4, #0x0                   	// #0
 1fc:	ldr	w0, [x5]
 200:	and	w2, w2, #0xffffff7f
 204:	mov	w3, #0x80000000            	// #-2147483648
 208:	str	w2, [x23]
 20c:	and	w0, w0, #0xffffff7f
 210:	str	w0, [x5]
 214:	mov	x0, #0x62                  	// #98
 218:	bl	0 <syscall>
 21c:	ldr	w2, [x19]
 220:	b	108 <gomp_sem_wait_slow+0x108>
 224:	adrp	x20, 0 <gomp_futex_wake>
 228:	mov	x1, x19
 22c:	mov	w3, #0x1                   	// #1
 230:	mov	x0, #0x62                  	// #98
 234:	ldr	w2, [x20]
 238:	bl	0 <syscall>
 23c:	tbz	w0, #31, 140 <gomp_sem_wait_slow+0x140>
 240:	bl	0 <__errno_location>
 244:	ldr	w0, [x0]
 248:	cmp	w0, #0x26
 24c:	b.ne	140 <gomp_sem_wait_slow+0x140>  // b.any
 250:	ldr	w2, [x20]
 254:	mov	x1, x19
 258:	ldp	x21, x22, [sp, #32]
 25c:	and	w2, w2, #0xffffff7f
 260:	str	w2, [x20]
 264:	adrp	x5, 0 <gomp_futex_wait>
 268:	ldp	x19, x20, [sp, #16]
 26c:	mov	w3, #0x1                   	// #1
 270:	ldr	x23, [sp, #48]
 274:	mov	x0, #0x62                  	// #98
 278:	ldp	x29, x30, [sp], #64
 27c:	ldr	w4, [x5]
 280:	and	w4, w4, #0xffffff7f
 284:	str	w4, [x5]
 288:	b	0 <syscall>
 28c:	bl	0 <__errno_location>
 290:	ldr	w0, [x0]
 294:	cmp	w0, #0x26
 298:	b.ne	f4 <gomp_sem_wait_slow+0xf4>  // b.any
 29c:	adrp	x5, 0 <gomp_futex_wake>
 2a0:	ldr	w2, [x20]
 2a4:	mov	x1, x19
 2a8:	mov	x4, #0x0                   	// #0
 2ac:	ldr	w0, [x5]
 2b0:	and	w2, w2, #0xffffff7f
 2b4:	mov	w3, #0x80000000            	// #-2147483648
 2b8:	str	w2, [x20]
 2bc:	and	w0, w0, #0xffffff7f
 2c0:	str	w0, [x5]
 2c4:	mov	x0, #0x62                  	// #98
 2c8:	bl	0 <syscall>
 2cc:	b	f4 <gomp_sem_wait_slow+0xf4>

00000000000002d0 <gomp_sem_post_slow>:
 2d0:	stp	x29, x30, [sp, #-32]!
 2d4:	mov	x1, x0
 2d8:	mov	w3, #0x1                   	// #1
 2dc:	mov	x29, sp
 2e0:	stp	x19, x20, [sp, #16]
 2e4:	adrp	x20, 0 <gomp_futex_wake>
 2e8:	mov	x19, x0
 2ec:	ldr	w2, [x20]
 2f0:	mov	x0, #0x62                  	// #98
 2f4:	bl	0 <syscall>
 2f8:	tbnz	w0, #31, 308 <gomp_sem_post_slow+0x38>
 2fc:	ldp	x19, x20, [sp, #16]
 300:	ldp	x29, x30, [sp], #32
 304:	ret
 308:	bl	0 <__errno_location>
 30c:	ldr	w0, [x0]
 310:	cmp	w0, #0x26
 314:	b.ne	2fc <gomp_sem_post_slow+0x2c>  // b.any
 318:	ldr	w2, [x20]
 31c:	mov	x1, x19
 320:	adrp	x5, 0 <gomp_futex_wait>
 324:	mov	w3, #0x1                   	// #1
 328:	and	w2, w2, #0xffffff7f
 32c:	str	w2, [x20]
 330:	ldp	x19, x20, [sp, #16]
 334:	mov	x0, #0x62                  	// #98
 338:	ldp	x29, x30, [sp], #32
 33c:	ldr	w4, [x5]
 340:	and	w4, w4, #0xffffff7f
 344:	str	w4, [x5]
 348:	b	0 <syscall>

bar.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_barrier_wait_end>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	w19, w1
  10:	add	x20, x0, #0x4
  14:	tbnz	w19, #0, 10c <gomp_barrier_wait_end+0x10c>
  18:	stp	x21, x22, [sp, #32]
  1c:	adrp	x21, 0 <gomp_futex_wait>
  20:	adrp	x22, 0 <gomp_futex_wake>
  24:	add	x21, x21, #0x0
  28:	add	x22, x22, #0x0
  2c:	stp	x23, x24, [sp, #48]
  30:	adrp	x23, 0 <gomp_available_cpus>
  34:	add	x23, x23, #0x0
  38:	stp	x25, x26, [sp, #64]
  3c:	adrp	x26, 0 <gomp_spin_count_var>
  40:	adrp	x25, 0 <gomp_managed_threads>
  44:	add	x26, x26, #0x0
  48:	add	x25, x25, #0x0
  4c:	adrp	x24, 0 <gomp_throttled_spin_count_var>
  50:	ldr	x2, [x25]
  54:	ldr	x1, [x23]
  58:	add	x0, x24, #0x0
  5c:	cmp	x2, x1
  60:	csel	x0, x26, x0, ls  // ls = plast
  64:	ldr	x2, [x0]
  68:	cbz	x2, b0 <gomp_barrier_wait_end+0xb0>
  6c:	mov	x0, #0x0                   	// #0
  70:	b	80 <gomp_barrier_wait_end+0x80>
  74:	add	x0, x0, #0x1
  78:	cmp	x0, x2
  7c:	b.eq	b0 <gomp_barrier_wait_end+0xb0>  // b.none
  80:	ldr	w1, [x20]
  84:	cmp	w19, w1
  88:	b.eq	74 <gomp_barrier_wait_end+0x74>  // b.none
  8c:	ldar	w0, [x20]
  90:	cmp	w0, w19
  94:	b.eq	50 <gomp_barrier_wait_end+0x50>  // b.none
  98:	ldp	x21, x22, [sp, #32]
  9c:	ldp	x23, x24, [sp, #48]
  a0:	ldp	x25, x26, [sp, #64]
  a4:	ldp	x19, x20, [sp, #16]
  a8:	ldp	x29, x30, [sp], #80
  ac:	ret
  b0:	ldr	w2, [x21]
  b4:	mov	w3, w19
  b8:	mov	x1, x20
  bc:	mov	x4, #0x0                   	// #0
  c0:	mov	x0, #0x62                  	// #98
  c4:	bl	0 <syscall>
  c8:	tbz	w0, #31, 8c <gomp_barrier_wait_end+0x8c>
  cc:	bl	0 <__errno_location>
  d0:	ldr	w0, [x0]
  d4:	cmp	w0, #0x26
  d8:	b.ne	8c <gomp_barrier_wait_end+0x8c>  // b.any
  dc:	ldr	w5, [x22]
  e0:	mov	w3, w19
  e4:	ldr	w2, [x21]
  e8:	mov	x1, x20
  ec:	and	w5, w5, #0xffffff7f
  f0:	mov	x4, #0x0                   	// #0
  f4:	and	w2, w2, #0xffffff7f
  f8:	mov	x0, #0x62                  	// #98
  fc:	str	w2, [x21]
 100:	str	w5, [x22]
 104:	bl	0 <syscall>
 108:	b	8c <gomp_barrier_wait_end+0x8c>
 10c:	ldp	w2, w1, [x0]
 110:	str	w2, [x0, #64]
 114:	add	w1, w1, #0x8
 118:	stlr	w1, [x20]
 11c:	mov	x1, x20
 120:	adrp	x19, 0 <gomp_futex_wake>
 124:	mov	w3, #0x7fffffff            	// #2147483647
 128:	mov	x0, #0x62                  	// #98
 12c:	ldr	w2, [x19]
 130:	bl	0 <syscall>
 134:	tbz	w0, #31, a4 <gomp_barrier_wait_end+0xa4>
 138:	bl	0 <__errno_location>
 13c:	ldr	w0, [x0]
 140:	cmp	w0, #0x26
 144:	b.ne	a4 <gomp_barrier_wait_end+0xa4>  // b.any
 148:	ldr	w2, [x19]
 14c:	mov	x1, x20
 150:	adrp	x5, 0 <gomp_futex_wait>
 154:	mov	w3, #0x7fffffff            	// #2147483647
 158:	and	w2, w2, #0xffffff7f
 15c:	str	w2, [x19]
 160:	ldp	x19, x20, [sp, #16]
 164:	mov	x0, #0x62                  	// #98
 168:	ldp	x29, x30, [sp], #80
 16c:	ldr	w4, [x5]
 170:	and	w4, w4, #0xffffff7f
 174:	str	w4, [x5]
 178:	b	0 <syscall>
 17c:	nop

0000000000000180 <gomp_barrier_wait>:
 180:	add	x1, x0, #0x4
 184:	ldar	w1, [x1]
 188:	and	w1, w1, #0xfffffffc
 18c:	add	x2, x0, #0x40
 190:	ldaxr	w3, [x2]
 194:	sub	w3, w3, #0x1
 198:	stlxr	w4, w3, [x2]
 19c:	cbnz	w4, 190 <gomp_barrier_wait+0x10>
 1a0:	cmp	w3, #0x0
 1a4:	orr	w2, w1, #0x1
 1a8:	csel	w1, w2, w1, eq  // eq = none
 1ac:	b	0 <gomp_barrier_wait_end>

00000000000001b0 <gomp_barrier_wait_last>:
 1b0:	add	x1, x0, #0x4
 1b4:	ldar	w1, [x1]
 1b8:	add	x2, x0, #0x40
 1bc:	ldaxr	w3, [x2]
 1c0:	sub	w3, w3, #0x1
 1c4:	stlxr	w4, w3, [x2]
 1c8:	cbnz	w4, 1bc <gomp_barrier_wait_last+0xc>
 1cc:	cbnz	w3, 1dc <gomp_barrier_wait_last+0x2c>
 1d0:	and	w1, w1, #0xfffffffc
 1d4:	orr	w1, w1, #0x1
 1d8:	b	0 <gomp_barrier_wait_end>
 1dc:	ret

00000000000001e0 <gomp_team_barrier_wake>:
 1e0:	stp	x29, x30, [sp, #-48]!
 1e4:	cmp	w1, #0x0
 1e8:	mov	x29, sp
 1ec:	str	x21, [sp, #32]
 1f0:	adrp	x21, 0 <gomp_futex_wake>
 1f4:	stp	x19, x20, [sp, #16]
 1f8:	add	x20, x0, #0x4
 1fc:	ldr	w2, [x21]
 200:	mov	w0, #0x7fffffff            	// #2147483647
 204:	csel	w19, w1, w0, ne  // ne = any
 208:	mov	w3, w19
 20c:	mov	x1, x20
 210:	mov	x0, #0x62                  	// #98
 214:	bl	0 <syscall>
 218:	tbnz	w0, #31, 22c <gomp_team_barrier_wake+0x4c>
 21c:	ldp	x19, x20, [sp, #16]
 220:	ldr	x21, [sp, #32]
 224:	ldp	x29, x30, [sp], #48
 228:	ret
 22c:	bl	0 <__errno_location>
 230:	ldr	w0, [x0]
 234:	cmp	w0, #0x26
 238:	b.ne	21c <gomp_team_barrier_wake+0x3c>  // b.any
 23c:	ldr	w2, [x21]
 240:	mov	w3, w19
 244:	mov	x1, x20
 248:	adrp	x5, 0 <gomp_futex_wait>
 24c:	and	w2, w2, #0xffffff7f
 250:	str	w2, [x21]
 254:	ldp	x19, x20, [sp, #16]
 258:	mov	x0, #0x62                  	// #98
 25c:	ldr	x21, [sp, #32]
 260:	ldp	x29, x30, [sp], #48
 264:	ldr	w4, [x5]
 268:	and	w4, w4, #0xffffff7f
 26c:	str	w4, [x5]
 270:	b	0 <syscall>
 274:	nop

0000000000000278 <gomp_team_barrier_wait_end>:
 278:	stp	x29, x30, [sp, #-96]!
 27c:	mov	x29, sp
 280:	stp	x19, x20, [sp, #16]
 284:	mov	w19, w1
 288:	stp	x27, x28, [sp, #80]
 28c:	add	x28, x0, #0x4
 290:	tbnz	w19, #0, 3c4 <gomp_team_barrier_wait_end+0x14c>
 294:	stp	x21, x22, [sp, #32]
 298:	stp	x23, x24, [sp, #48]
 29c:	stp	x25, x26, [sp, #64]
 2a0:	and	w22, w19, #0xfffffffb
 2a4:	adrp	x25, 0 <gomp_spin_count_var>
 2a8:	adrp	x24, 0 <gomp_managed_threads>
 2ac:	adrp	x23, 0 <gomp_available_cpus>
 2b0:	adrp	x20, 0 <gomp_futex_wait>
 2b4:	adrp	x21, 0 <gomp_futex_wake>
 2b8:	add	w27, w22, #0x8
 2bc:	add	x25, x25, #0x0
 2c0:	add	x24, x24, #0x0
 2c4:	add	x23, x23, #0x0
 2c8:	add	x20, x20, #0x0
 2cc:	add	x21, x21, #0x0
 2d0:	adrp	x26, 0 <gomp_throttled_spin_count_var>
 2d4:	nop
 2d8:	ldr	x3, [x24]
 2dc:	ldr	x2, [x23]
 2e0:	add	x0, x26, #0x0
 2e4:	cmp	x3, x2
 2e8:	csel	x0, x25, x0, ls  // ls = plast
 2ec:	ldr	x2, [x0]
 2f0:	cbz	x2, 348 <gomp_team_barrier_wait_end+0xd0>
 2f4:	mov	x0, #0x0                   	// #0
 2f8:	b	308 <gomp_team_barrier_wait_end+0x90>
 2fc:	add	x0, x0, #0x1
 300:	cmp	x0, x2
 304:	b.eq	348 <gomp_team_barrier_wait_end+0xd0>  // b.none
 308:	ldr	w3, [x28]
 30c:	cmp	w19, w3
 310:	b.eq	2fc <gomp_team_barrier_wait_end+0x84>  // b.none
 314:	ldar	w0, [x28]
 318:	tbnz	w0, #0, 3a4 <gomp_team_barrier_wait_end+0x12c>
 31c:	and	w2, w0, #0x2
 320:	cmp	w0, w27
 324:	orr	w19, w19, w2
 328:	b.ne	2d8 <gomp_team_barrier_wait_end+0x60>  // b.any
 32c:	ldp	x21, x22, [sp, #32]
 330:	ldp	x23, x24, [sp, #48]
 334:	ldp	x25, x26, [sp, #64]
 338:	ldp	x19, x20, [sp, #16]
 33c:	ldp	x27, x28, [sp, #80]
 340:	ldp	x29, x30, [sp], #96
 344:	ret
 348:	ldr	w2, [x20]
 34c:	mov	w3, w19
 350:	mov	x1, x28
 354:	mov	x4, #0x0                   	// #0
 358:	mov	x0, #0x62                  	// #98
 35c:	bl	0 <syscall>
 360:	tbz	w0, #31, 314 <gomp_team_barrier_wait_end+0x9c>
 364:	bl	0 <__errno_location>
 368:	ldr	w0, [x0]
 36c:	cmp	w0, #0x26
 370:	b.ne	314 <gomp_team_barrier_wait_end+0x9c>  // b.any
 374:	ldr	w5, [x21]
 378:	mov	w3, w19
 37c:	ldr	w2, [x20]
 380:	mov	x1, x28
 384:	and	w5, w5, #0xffffff7f
 388:	mov	x4, #0x0                   	// #0
 38c:	and	w2, w2, #0xffffff7f
 390:	mov	x0, #0x62                  	// #98
 394:	str	w2, [x20]
 398:	str	w5, [x21]
 39c:	bl	0 <syscall>
 3a0:	b	314 <gomp_team_barrier_wait_end+0x9c>
 3a4:	mov	w0, w22
 3a8:	bl	0 <gomp_barrier_handle_tasks>
 3ac:	ldar	w0, [x28]
 3b0:	and	w1, w0, #0x2
 3b4:	cmp	w0, w27
 3b8:	orr	w19, w19, w1
 3bc:	b.ne	2d8 <gomp_team_barrier_wait_end+0x60>  // b.any
 3c0:	b	32c <gomp_team_barrier_wait_end+0xb4>
 3c4:	adrp	x2, 0 <gomp_tls_data>
 3c8:	ldr	x2, [x2]
 3cc:	mrs	x1, tpidr_el0
 3d0:	ldr	w3, [x0]
 3d4:	add	x1, x1, x2
 3d8:	str	w3, [x0, #64]
 3dc:	ldr	x0, [x1, #16]
 3e0:	ldr	w1, [x0, #1320]
 3e4:	str	wzr, [x0, #1332]
 3e8:	cbnz	w1, 45c <gomp_team_barrier_wait_end+0x1e4>
 3ec:	and	w0, w19, #0xfffffffb
 3f0:	add	w0, w0, #0x7
 3f4:	stlr	w0, [x28]
 3f8:	mov	x1, x28
 3fc:	adrp	x19, 0 <gomp_futex_wake>
 400:	mov	w3, #0x7fffffff            	// #2147483647
 404:	mov	x0, #0x62                  	// #98
 408:	ldr	w2, [x19]
 40c:	bl	0 <syscall>
 410:	tbz	w0, #31, 338 <gomp_team_barrier_wait_end+0xc0>
 414:	bl	0 <__errno_location>
 418:	ldr	w0, [x0]
 41c:	cmp	w0, #0x26
 420:	b.ne	338 <gomp_team_barrier_wait_end+0xc0>  // b.any
 424:	ldr	w2, [x19]
 428:	mov	x1, x28
 42c:	ldp	x27, x28, [sp, #80]
 430:	and	w2, w2, #0xffffff7f
 434:	str	w2, [x19]
 438:	adrp	x5, 0 <gomp_futex_wait>
 43c:	ldp	x19, x20, [sp, #16]
 440:	mov	w3, #0x7fffffff            	// #2147483647
 444:	ldp	x29, x30, [sp], #96
 448:	mov	x0, #0x62                  	// #98
 44c:	ldr	w4, [x5]
 450:	and	w4, w4, #0xffffff7f
 454:	str	w4, [x5]
 458:	b	0 <syscall>
 45c:	mov	w0, w19
 460:	and	w19, w19, #0xfffffffe
 464:	stp	x21, x22, [sp, #32]
 468:	stp	x23, x24, [sp, #48]
 46c:	stp	x25, x26, [sp, #64]
 470:	bl	0 <gomp_barrier_handle_tasks>
 474:	b	2a0 <gomp_team_barrier_wait_end+0x28>

0000000000000478 <gomp_team_barrier_wait>:
 478:	add	x1, x0, #0x4
 47c:	ldar	w1, [x1]
 480:	and	w1, w1, #0xfffffffc
 484:	add	x2, x0, #0x40
 488:	ldaxr	w3, [x2]
 48c:	sub	w3, w3, #0x1
 490:	stlxr	w4, w3, [x2]
 494:	cbnz	w4, 488 <gomp_team_barrier_wait+0x10>
 498:	cmp	w3, #0x0
 49c:	orr	w2, w1, #0x1
 4a0:	csel	w1, w2, w1, eq  // eq = none
 4a4:	b	278 <gomp_team_barrier_wait_end>

00000000000004a8 <gomp_team_barrier_wait_final>:
 4a8:	add	x1, x0, #0x4
 4ac:	ldar	w1, [x1]
 4b0:	and	w1, w1, #0xfffffffc
 4b4:	add	x2, x0, #0x44
 4b8:	ldaxr	w3, [x2]
 4bc:	sub	w3, w3, #0x1
 4c0:	stlxr	w4, w3, [x2]
 4c4:	cbnz	w4, 4b8 <gomp_team_barrier_wait_final+0x10>
 4c8:	cbnz	w3, 4d8 <gomp_team_barrier_wait_final+0x30>
 4cc:	ldr	w2, [x0]
 4d0:	orr	w1, w1, #0x1
 4d4:	str	w2, [x0, #68]
 4d8:	b	278 <gomp_team_barrier_wait_end>
 4dc:	nop

00000000000004e0 <gomp_team_barrier_wait_cancel_end>:
 4e0:	stp	x29, x30, [sp, #-96]!
 4e4:	mov	x29, sp
 4e8:	stp	x19, x20, [sp, #16]
 4ec:	mov	x19, x0
 4f0:	stp	x23, x24, [sp, #48]
 4f4:	mov	w23, w1
 4f8:	tbnz	w23, #0, 65c <gomp_team_barrier_wait_cancel_end+0x17c>
 4fc:	tbnz	w23, #2, 624 <gomp_team_barrier_wait_cancel_end+0x144>
 500:	adrp	x24, 0 <gomp_available_cpus>
 504:	add	x19, x19, #0x4
 508:	add	x24, x24, #0x0
 50c:	mov	w20, w23
 510:	stp	x21, x22, [sp, #32]
 514:	adrp	x21, 0 <gomp_futex_wait>
 518:	adrp	x22, 0 <gomp_futex_wake>
 51c:	add	x21, x21, #0x0
 520:	add	x22, x22, #0x0
 524:	stp	x25, x26, [sp, #64]
 528:	adrp	x26, 0 <gomp_spin_count_var>
 52c:	adrp	x25, 0 <gomp_managed_threads>
 530:	add	x26, x26, #0x0
 534:	add	x25, x25, #0x0
 538:	str	x27, [sp, #80]
 53c:	adrp	x27, 0 <gomp_throttled_spin_count_var>
 540:	ldr	x3, [x25]
 544:	ldr	x2, [x24]
 548:	add	x0, x27, #0x0
 54c:	cmp	x3, x2
 550:	csel	x0, x26, x0, ls  // ls = plast
 554:	ldr	x2, [x0]
 558:	cbz	x2, 5bc <gomp_team_barrier_wait_cancel_end+0xdc>
 55c:	mov	x0, #0x0                   	// #0
 560:	b	570 <gomp_team_barrier_wait_cancel_end+0x90>
 564:	add	x0, x0, #0x1
 568:	cmp	x0, x2
 56c:	b.eq	5bc <gomp_team_barrier_wait_cancel_end+0xdc>  // b.none
 570:	ldr	w3, [x19]
 574:	cmp	w20, w3
 578:	b.eq	564 <gomp_team_barrier_wait_cancel_end+0x84>  // b.none
 57c:	ldar	w0, [x19]
 580:	tbnz	w0, #2, 618 <gomp_team_barrier_wait_cancel_end+0x138>
 584:	tbnz	w0, #0, 638 <gomp_team_barrier_wait_cancel_end+0x158>
 588:	and	w3, w0, #0x2
 58c:	add	w2, w23, #0x8
 590:	orr	w20, w20, w3
 594:	cmp	w2, w0
 598:	b.ne	540 <gomp_team_barrier_wait_cancel_end+0x60>  // b.any
 59c:	ldp	x21, x22, [sp, #32]
 5a0:	ldp	x25, x26, [sp, #64]
 5a4:	ldr	x27, [sp, #80]
 5a8:	mov	w0, #0x0                   	// #0
 5ac:	ldp	x19, x20, [sp, #16]
 5b0:	ldp	x23, x24, [sp, #48]
 5b4:	ldp	x29, x30, [sp], #96
 5b8:	ret
 5bc:	ldr	w2, [x21]
 5c0:	mov	w3, w20
 5c4:	mov	x1, x19
 5c8:	mov	x4, #0x0                   	// #0
 5cc:	mov	x0, #0x62                  	// #98
 5d0:	bl	0 <syscall>
 5d4:	tbz	w0, #31, 57c <gomp_team_barrier_wait_cancel_end+0x9c>
 5d8:	bl	0 <__errno_location>
 5dc:	ldr	w0, [x0]
 5e0:	cmp	w0, #0x26
 5e4:	b.ne	57c <gomp_team_barrier_wait_cancel_end+0x9c>  // b.any
 5e8:	ldr	w5, [x22]
 5ec:	mov	w3, w20
 5f0:	ldr	w2, [x21]
 5f4:	mov	x1, x19
 5f8:	and	w5, w5, #0xffffff7f
 5fc:	mov	x4, #0x0                   	// #0
 600:	and	w2, w2, #0xffffff7f
 604:	mov	x0, #0x62                  	// #98
 608:	str	w2, [x21]
 60c:	str	w5, [x22]
 610:	bl	0 <syscall>
 614:	b	57c <gomp_team_barrier_wait_cancel_end+0x9c>
 618:	ldp	x21, x22, [sp, #32]
 61c:	ldp	x25, x26, [sp, #64]
 620:	ldr	x27, [sp, #80]
 624:	mov	w0, #0x1                   	// #1
 628:	ldp	x19, x20, [sp, #16]
 62c:	ldp	x23, x24, [sp, #48]
 630:	ldp	x29, x30, [sp], #96
 634:	ret
 638:	mov	w0, w23
 63c:	bl	0 <gomp_barrier_handle_tasks>
 640:	ldar	w1, [x19]
 644:	and	w2, w1, #0x2
 648:	add	w0, w23, #0x8
 64c:	orr	w20, w20, w2
 650:	cmp	w0, w1
 654:	b.ne	540 <gomp_team_barrier_wait_cancel_end+0x60>  // b.any
 658:	b	59c <gomp_team_barrier_wait_cancel_end+0xbc>
 65c:	adrp	x1, 0 <gomp_tls_data>
 660:	ldr	x1, [x1]
 664:	mrs	x0, tpidr_el0
 668:	ldr	w2, [x19]
 66c:	add	x0, x0, x1
 670:	ldr	x0, [x0, #16]
 674:	ldr	w1, [x0, #1320]
 678:	str	w2, [x19, #64]
 67c:	str	wzr, [x0, #1332]
 680:	cbnz	w1, 6f0 <gomp_team_barrier_wait_cancel_end+0x210>
 684:	add	x19, x19, #0x4
 688:	add	w23, w23, #0x7
 68c:	stlr	w23, [x19]
 690:	mov	x1, x19
 694:	adrp	x20, 0 <gomp_futex_wake>
 698:	mov	w3, #0x7fffffff            	// #2147483647
 69c:	mov	x0, #0x62                  	// #98
 6a0:	ldr	w2, [x20]
 6a4:	bl	0 <syscall>
 6a8:	tbz	w0, #31, 5a8 <gomp_team_barrier_wait_cancel_end+0xc8>
 6ac:	bl	0 <__errno_location>
 6b0:	ldr	w0, [x0]
 6b4:	cmp	w0, #0x26
 6b8:	b.ne	5a8 <gomp_team_barrier_wait_cancel_end+0xc8>  // b.any
 6bc:	adrp	x5, 0 <gomp_futex_wait>
 6c0:	ldr	w2, [x20]
 6c4:	mov	x1, x19
 6c8:	mov	w3, #0x7fffffff            	// #2147483647
 6cc:	ldr	w4, [x5]
 6d0:	and	w2, w2, #0xffffff7f
 6d4:	mov	x0, #0x62                  	// #98
 6d8:	str	w2, [x20]
 6dc:	and	w4, w4, #0xffffff7f
 6e0:	str	w4, [x5]
 6e4:	bl	0 <syscall>
 6e8:	mov	w0, #0x0                   	// #0
 6ec:	b	5ac <gomp_team_barrier_wait_cancel_end+0xcc>
 6f0:	mov	w0, w23
 6f4:	and	w23, w23, #0xfffffffe
 6f8:	bl	0 <gomp_barrier_handle_tasks>
 6fc:	b	4fc <gomp_team_barrier_wait_cancel_end+0x1c>

0000000000000700 <gomp_team_barrier_wait_cancel>:
 700:	add	x1, x0, #0x4
 704:	ldar	w1, [x1]
 708:	and	w1, w1, #0xfffffffc
 70c:	add	x2, x0, #0x40
 710:	ldaxr	w3, [x2]
 714:	sub	w3, w3, #0x1
 718:	stlxr	w4, w3, [x2]
 71c:	cbnz	w4, 710 <gomp_team_barrier_wait_cancel+0x10>
 720:	cmp	w3, #0x0
 724:	orr	w2, w1, #0x1
 728:	csel	w1, w2, w1, eq  // eq = none
 72c:	b	4e0 <gomp_team_barrier_wait_cancel_end>

0000000000000730 <gomp_team_barrier_cancel>:
 730:	stp	x29, x30, [sp, #-48]!
 734:	mov	w2, #0x1                   	// #1
 738:	mov	x29, sp
 73c:	stp	x19, x20, [sp, #16]
 740:	mov	x19, x0
 744:	add	x0, x0, #0x500
 748:	ldaxr	w1, [x0]
 74c:	cbnz	w1, 758 <gomp_team_barrier_cancel+0x28>
 750:	stxr	w3, w2, [x0]
 754:	cbnz	w3, 748 <gomp_team_barrier_cancel+0x18>
 758:	cmp	w1, #0x0
 75c:	b.ne	814 <gomp_team_barrier_cancel+0xe4>  // b.any
 760:	ldr	w1, [x19, #132]
 764:	tbnz	w1, #2, 7ac <gomp_team_barrier_cancel+0x7c>
 768:	orr	w1, w1, #0x4
 76c:	str	w1, [x19, #132]
 770:	ldxr	w1, [x0]
 774:	stlxr	w2, wzr, [x0]
 778:	cbnz	w2, 770 <gomp_team_barrier_cancel+0x40>
 77c:	tbnz	w1, #31, 7c8 <gomp_team_barrier_cancel+0x98>
 780:	adrp	x20, 0 <gomp_futex_wake>
 784:	add	x19, x19, #0x84
 788:	mov	x1, x19
 78c:	mov	w3, #0x7fffffff            	// #2147483647
 790:	ldr	w2, [x20]
 794:	mov	x0, #0x62                  	// #98
 798:	bl	0 <syscall>
 79c:	tbnz	w0, #31, 7d0 <gomp_team_barrier_cancel+0xa0>
 7a0:	ldp	x19, x20, [sp, #16]
 7a4:	ldp	x29, x30, [sp], #48
 7a8:	ret
 7ac:	ldxr	w1, [x0]
 7b0:	stlxr	w2, wzr, [x0]
 7b4:	cbnz	w2, 7ac <gomp_team_barrier_cancel+0x7c>
 7b8:	tbz	w1, #31, 7a0 <gomp_team_barrier_cancel+0x70>
 7bc:	ldp	x19, x20, [sp, #16]
 7c0:	ldp	x29, x30, [sp], #48
 7c4:	b	0 <gomp_mutex_unlock_slow>
 7c8:	bl	0 <gomp_mutex_unlock_slow>
 7cc:	b	780 <gomp_team_barrier_cancel+0x50>
 7d0:	bl	0 <__errno_location>
 7d4:	ldr	w0, [x0]
 7d8:	cmp	w0, #0x26
 7dc:	b.ne	7a0 <gomp_team_barrier_cancel+0x70>  // b.any
 7e0:	adrp	x5, 0 <gomp_futex_wait>
 7e4:	ldr	w2, [x20]
 7e8:	mov	x1, x19
 7ec:	mov	w3, #0x7fffffff            	// #2147483647
 7f0:	ldr	w4, [x5]
 7f4:	and	w2, w2, #0xffffff7f
 7f8:	str	w2, [x20]
 7fc:	mov	x0, #0x62                  	// #98
 800:	and	w4, w4, #0xffffff7f
 804:	str	w4, [x5]
 808:	ldp	x19, x20, [sp, #16]
 80c:	ldp	x29, x30, [sp], #48
 810:	b	0 <syscall>
 814:	str	x0, [sp, #40]
 818:	bl	0 <gomp_mutex_lock_slow>
 81c:	ldr	x0, [sp, #40]
 820:	b	760 <gomp_team_barrier_cancel+0x30>

ptrlock.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_ptrlock_get_slow>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x1, #0x2                   	// #2
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x20, x0
  14:	stp	x21, x22, [sp, #32]
  18:	stp	x23, x24, [sp, #48]
  1c:	stp	x25, x26, [sp, #64]
  20:	ldxr	x0, [x20]
  24:	cmp	x0, #0x1
  28:	b.ne	34 <gomp_ptrlock_get_slow+0x34>  // b.any
  2c:	stxr	w2, x1, [x20]
  30:	cbnz	w2, 20 <gomp_ptrlock_get_slow+0x20>
  34:	mov	x19, x20
  38:	adrp	x26, 0 <gomp_spin_count_var>
  3c:	adrp	x25, 0 <gomp_managed_threads>
  40:	adrp	x23, 0 <gomp_available_cpus>
  44:	adrp	x21, 0 <gomp_futex_wait>
  48:	adrp	x22, 0 <gomp_futex_wake>
  4c:	add	x26, x26, #0x0
  50:	add	x25, x25, #0x0
  54:	add	x23, x23, #0x0
  58:	add	x21, x21, #0x0
  5c:	add	x22, x22, #0x0
  60:	adrp	x24, 0 <gomp_throttled_spin_count_var>
  64:	nop
  68:	ldr	x1, [x25]
  6c:	ldr	x0, [x23]
  70:	add	x2, x24, #0x0
  74:	cmp	x1, x0
  78:	csel	x2, x26, x2, ls  // ls = plast
  7c:	ldr	x3, [x2]
  80:	cbz	x3, cc <gomp_ptrlock_get_slow+0xcc>
  84:	mov	x2, #0x0                   	// #0
  88:	b	98 <gomp_ptrlock_get_slow+0x98>
  8c:	add	x2, x2, #0x1
  90:	cmp	x2, x3
  94:	b.eq	cc <gomp_ptrlock_get_slow+0xcc>  // b.none
  98:	ldr	w0, [x19]
  9c:	cmp	w0, #0x2
  a0:	b.eq	8c <gomp_ptrlock_get_slow+0x8c>  // b.none
  a4:	ldr	w1, [x19]
  a8:	cmp	w1, #0x2
  ac:	b.eq	68 <gomp_ptrlock_get_slow+0x68>  // b.none
  b0:	ldar	x0, [x20]
  b4:	ldp	x19, x20, [sp, #16]
  b8:	ldp	x21, x22, [sp, #32]
  bc:	ldp	x23, x24, [sp, #48]
  c0:	ldp	x25, x26, [sp, #64]
  c4:	ldp	x29, x30, [sp], #80
  c8:	ret
  cc:	ldr	w2, [x21]
  d0:	mov	x1, x19
  d4:	mov	x4, #0x0                   	// #0
  d8:	mov	w3, #0x2                   	// #2
  dc:	mov	x0, #0x62                  	// #98
  e0:	bl	0 <syscall>
  e4:	tbz	w0, #31, a4 <gomp_ptrlock_get_slow+0xa4>
  e8:	bl	0 <__errno_location>
  ec:	ldr	w0, [x0]
  f0:	cmp	w0, #0x26
  f4:	b.ne	a4 <gomp_ptrlock_get_slow+0xa4>  // b.any
  f8:	ldr	w5, [x22]
  fc:	mov	x1, x19
 100:	ldr	w2, [x21]
 104:	mov	x4, #0x0                   	// #0
 108:	and	w5, w5, #0xffffff7f
 10c:	mov	w3, #0x2                   	// #2
 110:	and	w2, w2, #0xffffff7f
 114:	mov	x0, #0x62                  	// #98
 118:	str	w2, [x21]
 11c:	str	w5, [x22]
 120:	bl	0 <syscall>
 124:	b	a4 <gomp_ptrlock_get_slow+0xa4>

0000000000000128 <gomp_ptrlock_set_slow>:
 128:	stp	x29, x30, [sp, #-32]!
 12c:	mov	x29, sp
 130:	stp	x19, x20, [sp, #16]
 134:	mov	x19, x0
 138:	adrp	x20, 0 <gomp_futex_wake>
 13c:	mov	x1, x19
 140:	mov	w3, #0x7fffffff            	// #2147483647
 144:	mov	x0, #0x62                  	// #98
 148:	ldr	w2, [x20]
 14c:	bl	0 <syscall>
 150:	tbnz	w0, #31, 160 <gomp_ptrlock_set_slow+0x38>
 154:	ldp	x19, x20, [sp, #16]
 158:	ldp	x29, x30, [sp], #32
 15c:	ret
 160:	bl	0 <__errno_location>
 164:	ldr	w0, [x0]
 168:	cmp	w0, #0x26
 16c:	b.ne	154 <gomp_ptrlock_set_slow+0x2c>  // b.any
 170:	ldr	w2, [x20]
 174:	mov	x1, x19
 178:	adrp	x5, 0 <gomp_futex_wait>
 17c:	mov	w3, #0x7fffffff            	// #2147483647
 180:	and	w2, w2, #0xffffff7f
 184:	str	w2, [x20]
 188:	ldp	x19, x20, [sp, #16]
 18c:	mov	x0, #0x62                  	// #98
 190:	ldp	x29, x30, [sp], #32
 194:	ldr	w4, [x5]
 198:	and	w4, w4, #0xffffff7f
 19c:	str	w4, [x5]
 1a0:	b	0 <syscall>

time.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_ialias_omp_get_wtime>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	w0, #0x1                   	// #1
   8:	mov	x29, sp
   c:	add	x1, sp, #0x10
  10:	bl	0 <clock_gettime>
  14:	tbnz	w0, #31, 40 <gomp_ialias_omp_get_wtime+0x40>
  18:	ldp	d2, d0, [sp, #16]
  1c:	mov	x0, #0xcd6500000000        	// #225833675390976
  20:	movk	x0, #0x41cd, lsl #48
  24:	fmov	d3, x0
  28:	ldp	x29, x30, [sp], #32
  2c:	scvtf	d1, d0
  30:	scvtf	d2, d2
  34:	fdiv	d0, d1, d3
  38:	fadd	d0, d0, d2
  3c:	ret
  40:	add	x1, sp, #0x10
  44:	mov	w0, #0x0                   	// #0
  48:	bl	0 <clock_gettime>
  4c:	b	18 <gomp_ialias_omp_get_wtime+0x18>

0000000000000050 <gomp_ialias_omp_get_wtick>:
  50:	stp	x29, x30, [sp, #-32]!
  54:	mov	w0, #0x1                   	// #1
  58:	mov	x29, sp
  5c:	add	x1, sp, #0x10
  60:	bl	0 <clock_getres>
  64:	tbnz	w0, #31, 90 <gomp_ialias_omp_get_wtick+0x40>
  68:	ldp	d2, d0, [sp, #16]
  6c:	mov	x0, #0xcd6500000000        	// #225833675390976
  70:	movk	x0, #0x41cd, lsl #48
  74:	fmov	d3, x0
  78:	ldp	x29, x30, [sp], #32
  7c:	scvtf	d1, d0
  80:	scvtf	d2, d2
  84:	fdiv	d0, d1, d3
  88:	fadd	d0, d0, d2
  8c:	ret
  90:	add	x1, sp, #0x10
  94:	mov	w0, #0x0                   	// #0
  98:	bl	0 <clock_getres>
  9c:	b	68 <gomp_ialias_omp_get_wtick+0x18>

fortran.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <omp_init_lock_>:
   0:	b	0 <gomp_ialias_omp_init_lock>
   4:	nop

0000000000000008 <omp_init_nest_lock_>:
   8:	stp	x29, x30, [sp, #-32]!
   c:	mov	x29, sp
  10:	str	x19, [sp, #16]
  14:	mov	x19, x0
  18:	mov	x0, #0x10                  	// #16
  1c:	bl	0 <malloc>
  20:	str	x0, [x19]
  24:	ldr	x19, [sp, #16]
  28:	ldp	x29, x30, [sp], #32
  2c:	b	0 <gomp_ialias_omp_init_nest_lock>

0000000000000030 <omp_destroy_lock_>:
  30:	b	0 <gomp_ialias_omp_destroy_lock>
  34:	nop

0000000000000038 <omp_destroy_nest_lock_>:
  38:	stp	x29, x30, [sp, #-32]!
  3c:	mov	x29, sp
  40:	str	x19, [sp, #16]
  44:	mov	x19, x0
  48:	ldr	x0, [x0]
  4c:	bl	0 <gomp_ialias_omp_destroy_nest_lock>
  50:	ldr	x0, [x19]
  54:	bl	0 <free>
  58:	str	xzr, [x19]
  5c:	ldr	x19, [sp, #16]
  60:	ldp	x29, x30, [sp], #32
  64:	ret

0000000000000068 <omp_set_lock_>:
  68:	b	0 <gomp_ialias_omp_set_lock>
  6c:	nop

0000000000000070 <omp_set_nest_lock_>:
  70:	ldr	x0, [x0]
  74:	b	0 <gomp_ialias_omp_set_nest_lock>

0000000000000078 <omp_unset_lock_>:
  78:	b	0 <gomp_ialias_omp_unset_lock>
  7c:	nop

0000000000000080 <omp_unset_nest_lock_>:
  80:	ldr	x0, [x0]
  84:	b	0 <gomp_ialias_omp_unset_nest_lock>

0000000000000088 <omp_test_lock_>:
  88:	b	0 <gomp_ialias_omp_test_lock>
  8c:	nop

0000000000000090 <omp_test_nest_lock_>:
  90:	ldr	x0, [x0]
  94:	b	0 <gomp_ialias_omp_test_nest_lock>

0000000000000098 <omp_set_dynamic_>:
  98:	ldr	w0, [x0]
  9c:	b	0 <gomp_ialias_omp_set_dynamic>

00000000000000a0 <omp_set_dynamic_8_>:
  a0:	ldr	x0, [x0]
  a4:	cmp	x0, #0x0
  a8:	cset	w0, ne  // ne = any
  ac:	b	0 <gomp_ialias_omp_set_dynamic>

00000000000000b0 <omp_set_nested_>:
  b0:	ldr	w0, [x0]
  b4:	b	0 <gomp_ialias_omp_set_nested>

00000000000000b8 <omp_set_nested_8_>:
  b8:	ldr	x0, [x0]
  bc:	cmp	x0, #0x0
  c0:	cset	w0, ne  // ne = any
  c4:	b	0 <gomp_ialias_omp_set_nested>

00000000000000c8 <omp_set_num_threads_>:
  c8:	ldr	w0, [x0]
  cc:	b	0 <gomp_ialias_omp_set_num_threads>

00000000000000d0 <omp_set_num_threads_8_>:
  d0:	mov	x1, x0
  d4:	mov	x2, #0xffffffff80000001    	// #-2147483647
  d8:	mov	w0, #0x80000000            	// #-2147483648
  dc:	ldr	x1, [x1]
  e0:	cmp	x1, x2
  e4:	b.lt	f4 <omp_set_num_threads_8_+0x24>  // b.tstop
  e8:	mov	x0, #0x7fffffff            	// #2147483647
  ec:	cmp	x1, x0
  f0:	csel	x0, x1, x0, le
  f4:	b	0 <gomp_ialias_omp_set_num_threads>

00000000000000f8 <omp_get_dynamic_>:
  f8:	b	0 <gomp_ialias_omp_get_dynamic>
  fc:	nop

0000000000000100 <omp_get_nested_>:
 100:	b	0 <gomp_ialias_omp_get_nested>
 104:	nop

0000000000000108 <omp_in_parallel_>:
 108:	b	0 <gomp_ialias_omp_in_parallel>
 10c:	nop

0000000000000110 <omp_get_max_threads_>:
 110:	b	0 <gomp_ialias_omp_get_max_threads>
 114:	nop

0000000000000118 <omp_get_num_procs_>:
 118:	b	0 <gomp_ialias_omp_get_num_procs>
 11c:	nop

0000000000000120 <omp_get_num_threads_>:
 120:	b	0 <gomp_ialias_omp_get_num_threads>
 124:	nop

0000000000000128 <omp_get_thread_num_>:
 128:	b	0 <gomp_ialias_omp_get_thread_num>
 12c:	nop

0000000000000130 <omp_get_wtick_>:
 130:	b	0 <gomp_ialias_omp_get_wtick>
 134:	nop

0000000000000138 <omp_get_wtime_>:
 138:	b	0 <gomp_ialias_omp_get_wtime>
 13c:	nop

0000000000000140 <omp_set_schedule_>:
 140:	ldr	w0, [x0]
 144:	ldr	w1, [x1]
 148:	b	0 <gomp_ialias_omp_set_schedule>
 14c:	nop

0000000000000150 <omp_set_schedule_8_>:
 150:	mov	x2, x1
 154:	mov	x3, #0xffffffff80000001    	// #-2147483647
 158:	ldr	w0, [x0]
 15c:	mov	w1, #0x80000000            	// #-2147483648
 160:	ldr	x2, [x2]
 164:	cmp	x2, x3
 168:	b.lt	178 <omp_set_schedule_8_+0x28>  // b.tstop
 16c:	mov	x1, #0x7fffffff            	// #2147483647
 170:	cmp	x2, x1
 174:	csel	x1, x2, x1, le
 178:	b	0 <gomp_ialias_omp_set_schedule>
 17c:	nop

0000000000000180 <omp_get_schedule_>:
 180:	stp	x29, x30, [sp, #-48]!
 184:	mov	x29, sp
 188:	stp	x19, x20, [sp, #16]
 18c:	mov	x20, x0
 190:	mov	x19, x1
 194:	add	x0, sp, #0x28
 198:	add	x1, sp, #0x2c
 19c:	bl	0 <gomp_ialias_omp_get_schedule>
 1a0:	ldp	w0, w1, [sp, #40]
 1a4:	and	w0, w0, #0x7fffffff
 1a8:	str	w0, [x20]
 1ac:	str	w1, [x19]
 1b0:	ldp	x19, x20, [sp, #16]
 1b4:	ldp	x29, x30, [sp], #48
 1b8:	ret
 1bc:	nop

00000000000001c0 <omp_get_schedule_8_>:
 1c0:	stp	x29, x30, [sp, #-48]!
 1c4:	mov	x29, sp
 1c8:	stp	x19, x20, [sp, #16]
 1cc:	mov	x20, x0
 1d0:	mov	x19, x1
 1d4:	add	x0, sp, #0x28
 1d8:	add	x1, sp, #0x2c
 1dc:	bl	0 <gomp_ialias_omp_get_schedule>
 1e0:	ldr	w0, [sp, #40]
 1e4:	ldrsw	x1, [sp, #44]
 1e8:	and	w0, w0, #0x7fffffff
 1ec:	str	w0, [x20]
 1f0:	str	x1, [x19]
 1f4:	ldp	x19, x20, [sp, #16]
 1f8:	ldp	x29, x30, [sp], #48
 1fc:	ret

0000000000000200 <omp_get_thread_limit_>:
 200:	b	0 <gomp_ialias_omp_get_thread_limit>
 204:	nop

0000000000000208 <omp_set_max_active_levels_>:
 208:	ldr	w0, [x0]
 20c:	b	0 <gomp_ialias_omp_set_max_active_levels>

0000000000000210 <omp_set_max_active_levels_8_>:
 210:	mov	x1, x0
 214:	mov	x2, #0xffffffff80000001    	// #-2147483647
 218:	mov	w0, #0x80000000            	// #-2147483648
 21c:	ldr	x1, [x1]
 220:	cmp	x1, x2
 224:	b.lt	234 <omp_set_max_active_levels_8_+0x24>  // b.tstop
 228:	mov	x0, #0x7fffffff            	// #2147483647
 22c:	cmp	x1, x0
 230:	csel	x0, x1, x0, le
 234:	b	0 <gomp_ialias_omp_set_max_active_levels>

0000000000000238 <omp_get_max_active_levels_>:
 238:	b	0 <gomp_ialias_omp_get_max_active_levels>
 23c:	nop

0000000000000240 <omp_get_level_>:
 240:	b	0 <gomp_ialias_omp_get_level>
 244:	nop

0000000000000248 <omp_get_ancestor_thread_num_>:
 248:	ldr	w0, [x0]
 24c:	b	0 <gomp_ialias_omp_get_ancestor_thread_num>

0000000000000250 <omp_get_ancestor_thread_num_8_>:
 250:	ldr	x0, [x0]
 254:	mov	x1, #0xffffffff80000001    	// #-2147483647
 258:	cmp	x0, x1
 25c:	b.lt	270 <omp_get_ancestor_thread_num_8_+0x20>  // b.tstop
 260:	mov	x1, #0x7fffffff            	// #2147483647
 264:	cmp	x0, x1
 268:	csel	x0, x0, x1, le
 26c:	b	0 <gomp_ialias_omp_get_ancestor_thread_num>
 270:	mov	w0, #0x80000000            	// #-2147483648
 274:	b	0 <gomp_ialias_omp_get_ancestor_thread_num>

0000000000000278 <omp_get_team_size_>:
 278:	ldr	w0, [x0]
 27c:	b	0 <gomp_ialias_omp_get_team_size>

0000000000000280 <omp_get_team_size_8_>:
 280:	ldr	x0, [x0]
 284:	mov	x1, #0xffffffff80000001    	// #-2147483647
 288:	cmp	x0, x1
 28c:	b.lt	2a0 <omp_get_team_size_8_+0x20>  // b.tstop
 290:	mov	x1, #0x7fffffff            	// #2147483647
 294:	cmp	x0, x1
 298:	csel	x0, x0, x1, le
 29c:	b	0 <gomp_ialias_omp_get_team_size>
 2a0:	mov	w0, #0x80000000            	// #-2147483648
 2a4:	b	0 <gomp_ialias_omp_get_team_size>

00000000000002a8 <omp_get_active_level_>:
 2a8:	b	0 <gomp_ialias_omp_get_active_level>
 2ac:	nop

00000000000002b0 <omp_in_final_>:
 2b0:	b	0 <gomp_ialias_omp_in_final>
 2b4:	nop

00000000000002b8 <omp_get_cancellation_>:
 2b8:	b	0 <gomp_ialias_omp_get_cancellation>
 2bc:	nop

00000000000002c0 <omp_get_proc_bind_>:
 2c0:	b	0 <gomp_ialias_omp_get_proc_bind>
 2c4:	nop

00000000000002c8 <omp_get_num_places_>:
 2c8:	b	0 <gomp_ialias_omp_get_num_places>
 2cc:	nop

00000000000002d0 <omp_get_place_num_procs_>:
 2d0:	ldr	w0, [x0]
 2d4:	b	0 <gomp_ialias_omp_get_place_num_procs>

00000000000002d8 <omp_get_place_num_procs_8_>:
 2d8:	ldr	x0, [x0]
 2dc:	mov	x1, #0xffffffff80000001    	// #-2147483647
 2e0:	cmp	x0, x1
 2e4:	b.lt	2f8 <omp_get_place_num_procs_8_+0x20>  // b.tstop
 2e8:	mov	x1, #0x7fffffff            	// #2147483647
 2ec:	cmp	x0, x1
 2f0:	csel	x0, x0, x1, le
 2f4:	b	0 <gomp_ialias_omp_get_place_num_procs>
 2f8:	mov	w0, #0x80000000            	// #-2147483648
 2fc:	b	0 <gomp_ialias_omp_get_place_num_procs>

0000000000000300 <omp_get_place_proc_ids_>:
 300:	ldr	w0, [x0]
 304:	b	0 <gomp_ialias_omp_get_place_proc_ids>

0000000000000308 <omp_get_place_proc_ids_8_>:
 308:	mov	x2, x0
 30c:	mov	x3, #0xffffffff80000001    	// #-2147483647
 310:	mov	w0, #0x80000000            	// #-2147483648
 314:	ldr	x2, [x2]
 318:	cmp	x2, x3
 31c:	b.lt	32c <omp_get_place_proc_ids_8_+0x24>  // b.tstop
 320:	mov	x0, #0x7fffffff            	// #2147483647
 324:	cmp	x2, x0
 328:	csel	x0, x2, x0, le
 32c:	b	0 <gomp_get_place_proc_ids_8>

0000000000000330 <omp_get_place_num_>:
 330:	b	0 <gomp_ialias_omp_get_place_num>
 334:	nop

0000000000000338 <omp_get_partition_num_places_>:
 338:	b	0 <gomp_ialias_omp_get_partition_num_places>
 33c:	nop

0000000000000340 <omp_get_partition_place_nums_>:
 340:	b	0 <gomp_ialias_omp_get_partition_place_nums>
 344:	nop

0000000000000348 <omp_get_partition_place_nums_8_>:
 348:	stp	x29, x30, [sp, #-48]!
 34c:	adrp	x1, 0 <gomp_places_list>
 350:	mov	x29, sp
 354:	stp	x19, x20, [sp, #16]
 358:	mov	x19, x0
 35c:	ldr	x0, [x1]
 360:	cbz	x0, 43c <omp_get_partition_place_nums_8_+0xf4>
 364:	str	x21, [sp, #32]
 368:	mrs	x20, tpidr_el0
 36c:	adrp	x21, 0 <gomp_tls_data>
 370:	ldr	x21, [x21]
 374:	add	x0, x20, x21
 378:	ldr	w0, [x0, #92]
 37c:	cbz	w0, 458 <omp_get_partition_place_nums_8_+0x110>
 380:	add	x20, x20, x21
 384:	ldr	w0, [x20, #56]
 388:	cbz	w0, 448 <omp_get_partition_place_nums_8_+0x100>
 38c:	sub	w1, w0, #0x1
 390:	ldr	w3, [x20, #52]
 394:	cmp	w1, #0x3
 398:	b.ls	460 <omp_get_partition_place_nums_8_+0x118>  // b.plast
 39c:	lsr	w2, w0, #2
 3a0:	mov	w4, #0x20                  	// #32
 3a4:	adrp	x5, 0 <omp_init_lock_>
 3a8:	dup	v2.2d, x3
 3ac:	movi	v4.4s, #0x4
 3b0:	mov	x1, x19
 3b4:	ldr	q1, [x5]
 3b8:	umaddl	x2, w2, w4, x19
 3bc:	nop
 3c0:	mov	v0.16b, v1.16b
 3c4:	add	v1.4s, v1.4s, v4.4s
 3c8:	uaddw	v3.2d, v2.2d, v0.2s
 3cc:	uaddw2	v0.2d, v2.2d, v0.4s
 3d0:	stp	q3, q0, [x1]
 3d4:	add	x1, x1, #0x20
 3d8:	cmp	x1, x2
 3dc:	b.ne	3c0 <omp_get_partition_place_nums_8_+0x78>  // b.any
 3e0:	and	x2, x0, #0xfffffffc
 3e4:	tst	x0, #0x3
 3e8:	and	w1, w0, #0xfffffffc
 3ec:	add	x19, x19, x2, lsl #3
 3f0:	b.eq	448 <omp_get_partition_place_nums_8_+0x100>  // b.none
 3f4:	add	x2, x2, x3
 3f8:	str	x2, [x19]
 3fc:	add	w2, w1, #0x1
 400:	cmp	w2, w0
 404:	b.cs	448 <omp_get_partition_place_nums_8_+0x100>  // b.hs, b.nlast
 408:	add	x2, x3, w2, uxtw
 40c:	str	x2, [x19, #8]
 410:	add	w2, w1, #0x2
 414:	cmp	w0, w2
 418:	b.ls	448 <omp_get_partition_place_nums_8_+0x100>  // b.plast
 41c:	add	x2, x3, w2, uxtw
 420:	str	x2, [x19, #16]
 424:	add	w1, w1, #0x3
 428:	cmp	w0, w1
 42c:	b.ls	448 <omp_get_partition_place_nums_8_+0x100>  // b.plast
 430:	add	x1, x3, w1, uxtw
 434:	ldr	x21, [sp, #32]
 438:	str	x1, [x19, #24]
 43c:	ldp	x19, x20, [sp, #16]
 440:	ldp	x29, x30, [sp], #48
 444:	ret
 448:	ldp	x19, x20, [sp, #16]
 44c:	ldr	x21, [sp, #32]
 450:	ldp	x29, x30, [sp], #48
 454:	ret
 458:	bl	0 <gomp_init_affinity>
 45c:	b	380 <omp_get_partition_place_nums_8_+0x38>
 460:	mov	w1, #0x0                   	// #0
 464:	mov	x2, #0x0                   	// #0
 468:	b	3f4 <omp_get_partition_place_nums_8_+0xac>
 46c:	nop

0000000000000470 <omp_set_default_device_>:
 470:	ldr	w0, [x0]
 474:	b	0 <gomp_ialias_omp_set_default_device>

0000000000000478 <omp_set_default_device_8_>:
 478:	mov	x1, x0
 47c:	mov	x2, #0xffffffff80000001    	// #-2147483647
 480:	mov	w0, #0x80000000            	// #-2147483648
 484:	ldr	x1, [x1]
 488:	cmp	x1, x2
 48c:	b.lt	49c <omp_set_default_device_8_+0x24>  // b.tstop
 490:	mov	x0, #0x7fffffff            	// #2147483647
 494:	cmp	x1, x0
 498:	csel	x0, x1, x0, le
 49c:	b	0 <gomp_ialias_omp_set_default_device>

00000000000004a0 <omp_get_default_device_>:
 4a0:	b	0 <gomp_ialias_omp_get_default_device>
 4a4:	nop

00000000000004a8 <omp_get_num_devices_>:
 4a8:	b	0 <gomp_ialias_omp_get_num_devices>
 4ac:	nop

00000000000004b0 <omp_get_num_teams_>:
 4b0:	b	0 <gomp_ialias_omp_get_num_teams>
 4b4:	nop

00000000000004b8 <omp_get_team_num_>:
 4b8:	b	0 <gomp_ialias_omp_get_team_num>
 4bc:	nop

00000000000004c0 <omp_is_initial_device_>:
 4c0:	b	0 <gomp_ialias_omp_is_initial_device>
 4c4:	nop

00000000000004c8 <omp_get_initial_device_>:
 4c8:	b	0 <gomp_ialias_omp_get_initial_device>
 4cc:	nop

00000000000004d0 <omp_get_max_task_priority_>:
 4d0:	b	0 <gomp_ialias_omp_get_max_task_priority>
 4d4:	nop

00000000000004d8 <omp_set_affinity_format_>:
 4d8:	b	0 <gomp_set_affinity_format>
 4dc:	nop

00000000000004e0 <omp_get_affinity_format_>:
 4e0:	stp	x29, x30, [sp, #-48]!
 4e4:	adrp	x2, 0 <gomp_affinity_format_var>
 4e8:	mov	x29, sp
 4ec:	stp	x21, x22, [sp, #32]
 4f0:	mov	x21, x0
 4f4:	ldr	x22, [x2]
 4f8:	stp	x19, x20, [sp, #16]
 4fc:	mov	x20, x1
 500:	mov	x0, x22
 504:	bl	0 <strlen>
 508:	mov	x19, x0
 50c:	cbz	x20, 538 <omp_get_affinity_format_+0x58>
 510:	cmp	x0, x20
 514:	b.cs	54c <omp_get_affinity_format_+0x6c>  // b.hs, b.nlast
 518:	mov	x2, x0
 51c:	mov	x1, x22
 520:	mov	x0, x21
 524:	bl	0 <memcpy>
 528:	sub	x2, x20, x19
 52c:	add	x0, x21, x19
 530:	mov	w1, #0x20                  	// #32
 534:	bl	0 <memset>
 538:	mov	w0, w19
 53c:	ldp	x19, x20, [sp, #16]
 540:	ldp	x21, x22, [sp, #32]
 544:	ldp	x29, x30, [sp], #48
 548:	ret
 54c:	mov	x2, x20
 550:	mov	x1, x22
 554:	mov	x0, x21
 558:	bl	0 <memcpy>
 55c:	mov	w0, w19
 560:	ldp	x19, x20, [sp, #16]
 564:	ldp	x21, x22, [sp, #32]
 568:	ldp	x29, x30, [sp], #48
 56c:	ret

0000000000000570 <omp_display_affinity_>:
 570:	sub	sp, sp, #0x360
 574:	stp	x29, x30, [sp]
 578:	mov	x29, sp
 57c:	stp	x19, x20, [sp, #16]
 580:	mov	x19, x1
 584:	stp	x21, x22, [sp, #32]
 588:	mov	x22, x0
 58c:	stp	x23, x24, [sp, #48]
 590:	stp	x25, x26, [sp, #64]
 594:	stp	x27, x28, [sp, #80]
 598:	bl	0 <pthread_self>
 59c:	mov	x20, x0
 5a0:	cbz	x19, 644 <omp_display_affinity_+0xd4>
 5a4:	add	x23, sp, #0x60
 5a8:	cmp	x19, #0xff
 5ac:	mov	w25, #0x0                   	// #0
 5b0:	b.hi	728 <omp_display_affinity_+0x1b8>  // b.pmore
 5b4:	adrp	x21, 0 <gomp_tls_data>
 5b8:	ldr	x21, [x21]
 5bc:	mov	x1, x22
 5c0:	mov	x2, x19
 5c4:	mrs	x24, tpidr_el0
 5c8:	mov	x0, x23
 5cc:	bl	0 <memcpy>
 5d0:	add	x1, x24, x21
 5d4:	strb	wzr, [x23, x19]
 5d8:	add	x22, sp, #0x160
 5dc:	add	x4, x1, #0x10
 5e0:	mov	x0, x22
 5e4:	mov	x3, x20
 5e8:	ldr	w5, [x1, #92]
 5ec:	mov	x2, x23
 5f0:	mov	x1, #0x200                 	// #512
 5f4:	bl	0 <gomp_display_affinity>
 5f8:	mov	x19, x0
 5fc:	cmp	x0, #0x1ff
 600:	b.hi	710 <omp_display_affinity_+0x1a0>  // b.pmore
 604:	mov	w2, #0xa                   	// #10
 608:	add	x1, x0, #0x1
 60c:	mov	x0, x22
 610:	strb	w2, [x22, x19]
 614:	bl	0 <gomp_print_string>
 618:	cbz	w25, 624 <omp_display_affinity_+0xb4>
 61c:	mov	x0, x23
 620:	bl	0 <free>
 624:	ldp	x29, x30, [sp]
 628:	ldp	x19, x20, [sp, #16]
 62c:	ldp	x21, x22, [sp, #32]
 630:	ldp	x23, x24, [sp, #48]
 634:	ldp	x25, x26, [sp, #64]
 638:	ldp	x27, x28, [sp, #80]
 63c:	add	sp, sp, #0x360
 640:	ret
 644:	adrp	x21, 0 <gomp_tls_data>
 648:	ldr	x21, [x21]
 64c:	mrs	x24, tpidr_el0
 650:	adrp	x27, 0 <gomp_affinity_format_var>
 654:	add	x22, sp, #0x160
 658:	add	x1, x24, x21
 65c:	mov	x0, x22
 660:	ldr	x2, [x27]
 664:	add	x4, x1, #0x10
 668:	ldr	w5, [x1, #92]
 66c:	mov	x3, x20
 670:	mov	x1, #0x200                 	// #512
 674:	bl	0 <gomp_display_affinity>
 678:	mov	x19, x0
 67c:	cmp	x0, #0x1ff
 680:	b.ls	6dc <omp_display_affinity_+0x16c>  // b.plast
 684:	add	x28, x19, #0x1
 688:	mov	w25, #0x0                   	// #0
 68c:	mov	x0, x28
 690:	bl	0 <gomp_malloc>
 694:	ldr	x2, [x27]
 698:	mov	x26, x0
 69c:	mov	x23, #0x0                   	// #0
 6a0:	add	x21, x24, x21
 6a4:	mov	x3, x20
 6a8:	add	x4, x21, #0x10
 6ac:	mov	x0, x22
 6b0:	mov	x1, #0x200                 	// #512
 6b4:	ldr	w5, [x21, #92]
 6b8:	bl	0 <gomp_display_affinity>
 6bc:	mov	x1, x28
 6c0:	mov	w0, #0xa                   	// #10
 6c4:	strb	w0, [x26, x19]
 6c8:	mov	x0, x26
 6cc:	bl	0 <gomp_print_string>
 6d0:	mov	x0, x26
 6d4:	bl	0 <free>
 6d8:	b	618 <omp_display_affinity_+0xa8>
 6dc:	mov	w2, #0xa                   	// #10
 6e0:	add	x1, x0, #0x1
 6e4:	mov	x0, x22
 6e8:	strb	w2, [x22, x19]
 6ec:	bl	0 <gomp_print_string>
 6f0:	ldp	x29, x30, [sp]
 6f4:	ldp	x19, x20, [sp, #16]
 6f8:	ldp	x21, x22, [sp, #32]
 6fc:	ldp	x23, x24, [sp, #48]
 700:	ldp	x25, x26, [sp, #64]
 704:	ldp	x27, x28, [sp, #80]
 708:	add	sp, sp, #0x360
 70c:	ret
 710:	add	x28, x0, #0x1
 714:	mov	x0, x28
 718:	bl	0 <gomp_malloc>
 71c:	mov	x2, x23
 720:	mov	x26, x0
 724:	b	6a0 <omp_display_affinity_+0x130>
 728:	add	x0, x19, #0x1
 72c:	bl	0 <gomp_malloc>
 730:	cmp	x0, #0x0
 734:	mov	x23, x0
 738:	cset	w25, ne  // ne = any
 73c:	b	5b4 <omp_display_affinity_+0x44>

0000000000000740 <omp_capture_affinity_>:
 740:	stp	x29, x30, [sp, #-320]!
 744:	mov	x29, sp
 748:	stp	x19, x20, [sp, #16]
 74c:	mov	x20, x2
 750:	mov	x19, x3
 754:	stp	x21, x22, [sp, #32]
 758:	mov	x21, x0
 75c:	str	x23, [sp, #48]
 760:	mov	x23, x1
 764:	bl	0 <pthread_self>
 768:	mov	x22, x0
 76c:	cbz	x19, 7f4 <omp_capture_affinity_+0xb4>
 770:	cmp	x19, #0xff
 774:	b.hi	848 <omp_capture_affinity_+0x108>  // b.pmore
 778:	add	x6, sp, #0x40
 77c:	mov	x2, x19
 780:	mov	x1, x23
 784:	mov	x0, x6
 788:	bl	0 <memcpy>
 78c:	mov	x6, x0
 790:	adrp	x0, 0 <gomp_tls_data>
 794:	ldr	x0, [x0]
 798:	mrs	x5, tpidr_el0
 79c:	mov	x2, x6
 7a0:	mov	x3, x22
 7a4:	add	x5, x5, x0
 7a8:	strb	wzr, [x6, x19]
 7ac:	add	x4, x5, #0x10
 7b0:	mov	x1, x20
 7b4:	mov	x0, x21
 7b8:	ldr	w5, [x5, #92]
 7bc:	bl	0 <gomp_display_affinity>
 7c0:	mov	x19, x0
 7c4:	cmp	x20, x19
 7c8:	b.ls	830 <omp_capture_affinity_+0xf0>  // b.plast
 7cc:	sub	x2, x20, x19
 7d0:	add	x0, x21, x19
 7d4:	mov	w1, #0x20                  	// #32
 7d8:	bl	0 <memset>
 7dc:	mov	w0, w19
 7e0:	ldp	x19, x20, [sp, #16]
 7e4:	ldp	x21, x22, [sp, #32]
 7e8:	ldr	x23, [sp, #48]
 7ec:	ldp	x29, x30, [sp], #320
 7f0:	ret
 7f4:	adrp	x0, 0 <gomp_tls_data>
 7f8:	ldr	x0, [x0]
 7fc:	mrs	x1, tpidr_el0
 800:	adrp	x2, 0 <gomp_affinity_format_var>
 804:	mov	x3, x22
 808:	add	x0, x1, x0
 80c:	mov	x1, x20
 810:	ldr	x2, [x2]
 814:	add	x4, x0, #0x10
 818:	ldr	w5, [x0, #92]
 81c:	mov	x0, x21
 820:	bl	0 <gomp_display_affinity>
 824:	mov	x19, x0
 828:	cmp	x20, x19
 82c:	b.hi	7cc <omp_capture_affinity_+0x8c>  // b.pmore
 830:	mov	w0, w19
 834:	ldp	x19, x20, [sp, #16]
 838:	ldp	x21, x22, [sp, #32]
 83c:	ldr	x23, [sp, #48]
 840:	ldp	x29, x30, [sp], #320
 844:	ret
 848:	add	x0, x19, #0x1
 84c:	bl	0 <gomp_malloc>
 850:	mov	x1, x23
 854:	mov	x2, x19
 858:	mov	x23, x0
 85c:	bl	0 <memcpy>
 860:	adrp	x5, 0 <gomp_tls_data>
 864:	ldr	x5, [x5]
 868:	mrs	x0, tpidr_el0
 86c:	mov	x3, x22
 870:	mov	x2, x23
 874:	add	x5, x0, x5
 878:	strb	wzr, [x23, x19]
 87c:	add	x4, x5, #0x10
 880:	mov	x1, x20
 884:	mov	x0, x21
 888:	ldr	w5, [x5, #92]
 88c:	bl	0 <gomp_display_affinity>
 890:	mov	x19, x0
 894:	cbz	x23, 828 <omp_capture_affinity_+0xe8>
 898:	mov	x0, x23
 89c:	bl	0 <free>
 8a0:	b	828 <omp_capture_affinity_+0xe8>
 8a4:	nop

00000000000008a8 <omp_pause_resource_>:
 8a8:	ldr	w0, [x0]
 8ac:	ldr	w1, [x1]
 8b0:	b	0 <gomp_ialias_omp_pause_resource>
 8b4:	nop

00000000000008b8 <omp_pause_resource_all_>:
 8b8:	ldr	w0, [x0]
 8bc:	b	0 <gomp_ialias_omp_pause_resource_all>

affinity.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_affinity_init_level_1>:
       0:	stp	x29, x30, [sp, #-256]!
       4:	mov	w6, w0
       8:	mov	x29, sp
       c:	stp	x23, x24, [sp, #48]
      10:	adrp	x24, 0 <gomp_cpuset_size>
      14:	stp	x19, x20, [sp, #16]
      18:	ldr	x19, [x24]
      1c:	str	w0, [sp, #140]
      20:	and	w0, w5, #0xff
      24:	str	w0, [sp, #184]
      28:	str	w1, [sp, #188]
      2c:	stp	xzr, xzr, [sp, #232]
      30:	cmp	xzr, x19, lsl #3
      34:	b.eq	414 <gomp_affinity_init_level_1+0x414>  // b.none
      38:	cmp	w1, #0x3
      3c:	mov	x20, x2
      40:	adrp	x0, 0 <gomp_affinity_init_level_1>
      44:	mov	w2, w1
      48:	add	x0, x0, #0x0
      4c:	adrp	x1, 0 <gomp_affinity_init_level_1>
      50:	add	x1, x1, #0x0
      54:	lsl	x19, x19, #3
      58:	csel	x0, x1, x0, eq  // eq = none
      5c:	cset	w1, eq  // eq = none
      60:	cmp	w2, w6
      64:	stp	x27, x28, [sp, #80]
      68:	mov	x28, #0x0                   	// #0
      6c:	str	x0, [sp, #168]
      70:	cset	w0, gt
      74:	and	w0, w1, w0
      78:	mov	x27, x28
      7c:	adrp	x12, 0 <gomp_places_list_len>
      80:	mov	x28, x4
      84:	stp	x21, x22, [sp, #32]
      88:	add	x22, x12, #0x0
      8c:	mov	x21, #0x1                   	// #1
      90:	stp	x25, x26, [sp, #64]
      94:	mov	x26, x3
      98:	mov	x25, x19
      9c:	str	w0, [sp, #152]
      a0:	adrp	x0, 0 <gomp_affinity_init_level_1>
      a4:	add	x0, x0, #0x0
      a8:	str	x0, [sp, #176]
      ac:	ldr	x0, [x22]
      b0:	cmp	x0, x20
      b4:	b.cs	144 <gomp_affinity_init_level_1+0x144>  // b.hs, b.nlast
      b8:	ldr	x0, [x24]
      bc:	lsr	x1, x27, #3
      c0:	str	x1, [sp, #128]
      c4:	add	x19, x24, #0x0
      c8:	cmp	x0, x27, lsr #3
      cc:	b.ls	138 <gomp_affinity_init_level_1+0x138>  // b.plast
      d0:	lsr	x23, x27, #6
      d4:	and	w0, w27, #0x3f
      d8:	mov	w1, w0
      dc:	str	w1, [sp, #156]
      e0:	ldr	x0, [x26, x23, lsl #3]
      e4:	lsr	x0, x0, x1
      e8:	tbz	w0, #0, 138 <gomp_affinity_init_level_1+0x138>
      ec:	ldp	x3, x1, [sp, #168]
      f0:	mov	x2, x27
      f4:	add	x0, x28, #0x1b
      f8:	bl	0 <sprintf>
      fc:	mov	x0, x28
     100:	adrp	x1, 0 <gomp_affinity_init_level_1>
     104:	add	x1, x1, #0x0
     108:	bl	0 <fopen>
     10c:	str	x0, [sp, #144]
     110:	cbz	x0, 168 <gomp_affinity_init_level_1+0x168>
     114:	mov	x3, x0
     118:	add	x1, sp, #0xf0
     11c:	add	x0, sp, #0xe8
     120:	mov	w2, #0xa                   	// #10
     124:	bl	0 <__getdelim>
     128:	cmp	x0, #0x0
     12c:	b.gt	190 <gomp_affinity_init_level_1+0x190>
     130:	ldr	x0, [sp, #144]
     134:	bl	0 <fclose>
     138:	add	x27, x27, #0x1
     13c:	cmp	x25, x27
     140:	b.ne	ac <gomp_affinity_init_level_1+0xac>  // b.any
     144:	ldr	x0, [sp, #232]
     148:	ldp	x21, x22, [sp, #32]
     14c:	ldp	x25, x26, [sp, #64]
     150:	ldp	x27, x28, [sp, #80]
     154:	bl	0 <free>
     158:	ldp	x19, x20, [sp, #16]
     15c:	ldp	x23, x24, [sp, #48]
     160:	ldp	x29, x30, [sp], #256
     164:	ret
     168:	ldr	x0, [x24]
     16c:	lsr	x1, x27, #3
     170:	cmp	x1, x0
     174:	b.cs	138 <gomp_affinity_init_level_1+0x138>  // b.hs, b.nlast
     178:	ldrb	w0, [sp, #156]
     17c:	ldr	x1, [x26, x23, lsl #3]
     180:	lsl	x0, x21, x0
     184:	bic	x0, x1, x0
     188:	str	x0, [x26, x23, lsl #3]
     18c:	b	138 <gomp_affinity_init_level_1+0x138>
     190:	ldr	w2, [sp, #140]
     194:	adrp	x0, 0 <gomp_places_list>
     198:	ldr	w1, [sp, #188]
     19c:	ldr	x0, [x0]
     1a0:	cmp	w1, w2
     1a4:	ldr	x2, [x22]
     1a8:	ldr	x1, [sp, #232]
     1ac:	str	x1, [sp, #248]
     1b0:	ldr	x9, [x0, x2, lsl #3]
     1b4:	b.eq	42c <gomp_affinity_init_level_1+0x42c>  // b.none
     1b8:	ldrb	w0, [x1]
     1bc:	cmp	w0, #0x0
     1c0:	ccmp	w0, #0xa, #0x4, ne  // ne = any
     1c4:	b.eq	484 <gomp_affinity_init_level_1+0x484>  // b.none
     1c8:	stp	x1, x9, [sp, #104]
     1cc:	bl	0 <__errno_location>
     1d0:	mov	x2, x0
     1d4:	ldp	x1, x9, [sp, #104]
     1d8:	stp	x25, x27, [sp, #200]
     1dc:	str	x23, [sp, #216]
     1e0:	mov	x23, x20
     1e4:	mov	x20, x2
     1e8:	mov	x0, x1
     1ec:	mov	x25, x9
     1f0:	str	wzr, [x20]
     1f4:	add	x1, sp, #0xf8
     1f8:	mov	w2, #0xa                   	// #10
     1fc:	bl	0 <strtoul>
     200:	mov	x6, x0
     204:	ldr	w1, [x20]
     208:	cbnz	w1, 2d4 <gomp_affinity_init_level_1+0x2d4>
     20c:	mov	x27, x0
     210:	ldr	x0, [sp, #248]
     214:	ldrb	w1, [x0]
     218:	cmp	w1, #0x2d
     21c:	b.eq	3e4 <gomp_affinity_init_level_1+0x3e4>  // b.none
     220:	mov	x4, x28
     224:	mov	x28, x23
     228:	mov	x23, x27
     22c:	str	x20, [sp, #160]
     230:	mov	x20, x6
     234:	ldr	x2, [x19]
     238:	lsr	x6, x20, #3
     23c:	cmp	x2, x20, lsr #3
     240:	b.ls	2a0 <gomp_affinity_init_level_1+0x2a0>  // b.plast
     244:	lsr	x5, x20, #6
     248:	and	w27, w20, #0x3f
     24c:	lsl	x3, x5, #3
     250:	ldr	x0, [x26, x5, lsl #3]
     254:	lsr	x0, x0, x27
     258:	tbz	w0, #0, 2a0 <gomp_affinity_init_level_1+0x2a0>
     25c:	ldr	w0, [sp, #152]
     260:	cbnz	w0, 318 <gomp_affinity_init_level_1+0x318>
     264:	ldr	w0, [sp, #140]
     268:	cmp	w0, #0x1
     26c:	b.eq	35c <gomp_affinity_init_level_1+0x35c>  // b.none
     270:	cmp	x20, x2, lsl #3
     274:	b.cs	2a0 <gomp_affinity_init_level_1+0x2a0>  // b.hs, b.nlast
     278:	ldr	x1, [x25, x5, lsl #3]
     27c:	lsl	x0, x21, x27
     280:	orr	x1, x1, x0
     284:	str	x1, [x25, x5, lsl #3]
     288:	ldr	x1, [x19]
     28c:	cmp	x6, x1
     290:	b.cs	2a0 <gomp_affinity_init_level_1+0x2a0>  // b.hs, b.nlast
     294:	ldr	x27, [x26, x5, lsl #3]
     298:	bic	x0, x27, x0
     29c:	str	x0, [x26, x5, lsl #3]
     2a0:	add	x20, x20, #0x1
     2a4:	cmp	x20, x23
     2a8:	b.ls	234 <gomp_affinity_init_level_1+0x234>  // b.plast
     2ac:	ldr	x0, [sp, #248]
     2b0:	mov	x23, x28
     2b4:	mov	x28, x4
     2b8:	ldr	x20, [sp, #160]
     2bc:	ldrb	w1, [x0]
     2c0:	cmp	w1, #0x2c
     2c4:	b.eq	33c <gomp_affinity_init_level_1+0x33c>  // b.none
     2c8:	cmp	w1, #0x0
     2cc:	ccmp	w1, #0xa, #0x4, ne  // ne = any
     2d0:	b.ne	1f0 <gomp_affinity_init_level_1+0x1f0>  // b.any
     2d4:	ldr	w0, [sp, #188]
     2d8:	mov	x20, x23
     2dc:	ldr	w1, [sp, #140]
     2e0:	ldp	x25, x27, [sp, #200]
     2e4:	cmp	w0, w1
     2e8:	ldr	x0, [x24]
     2ec:	ldr	x23, [sp, #216]
     2f0:	b.eq	458 <gomp_affinity_init_level_1+0x458>  // b.none
     2f4:	ldr	x1, [sp, #128]
     2f8:	cmp	x1, x0
     2fc:	b.cs	130 <gomp_affinity_init_level_1+0x130>  // b.hs, b.nlast
     300:	ldr	x1, [x26, x23, lsl #3]
     304:	ldrb	w0, [sp, #156]
     308:	lsl	x0, x21, x0
     30c:	bic	x0, x1, x0
     310:	str	x0, [x26, x23, lsl #3]
     314:	b	130 <gomp_affinity_init_level_1+0x130>
     318:	ldrb	w5, [sp, #184]
     31c:	mov	x3, x26
     320:	ldr	w0, [sp, #140]
     324:	mov	x2, x28
     328:	mov	w1, #0x2                   	// #2
     32c:	str	x4, [sp, #104]
     330:	bl	0 <gomp_affinity_init_level_1>
     334:	ldr	x4, [sp, #104]
     338:	b	2a0 <gomp_affinity_init_level_1+0x2a0>
     33c:	add	x1, x0, #0x1
     340:	str	x1, [sp, #248]
     344:	ldrb	w0, [x0, #1]
     348:	cmp	w0, #0x0
     34c:	ccmp	w0, #0xa, #0x4, ne  // ne = any
     350:	b.eq	2d4 <gomp_affinity_init_level_1+0x2d4>  // b.none
     354:	mov	x0, x1
     358:	b	1f0 <gomp_affinity_init_level_1+0x1f0>
     35c:	adrp	x0, 0 <gomp_places_list>
     360:	add	x0, x0, #0x0
     364:	ldr	x8, [x22]
     368:	mov	w1, #0x0                   	// #0
     36c:	ldr	x0, [x0]
     370:	stp	x6, x3, [sp, #104]
     374:	str	x5, [sp, #120]
     378:	ldr	x25, [x0, x8, lsl #3]
     37c:	str	x4, [sp, #192]
     380:	mov	x0, x25
     384:	bl	0 <memset>
     388:	ldr	x0, [x19]
     38c:	ldr	x4, [sp, #192]
     390:	cmp	x20, x0, lsl #3
     394:	b.cs	2a0 <gomp_affinity_init_level_1+0x2a0>  // b.hs, b.nlast
     398:	ldp	x6, x3, [sp, #104]
     39c:	ldr	x5, [sp, #120]
     3a0:	cmp	x6, x0
     3a4:	b.cc	3b8 <gomp_affinity_init_level_1+0x3b8>  // b.lo, b.ul, b.last
     3a8:	ldr	x0, [x22]
     3ac:	add	x0, x0, #0x1
     3b0:	str	x0, [x22]
     3b4:	b	2a0 <gomp_affinity_init_level_1+0x2a0>
     3b8:	ldr	x1, [x25, x5, lsl #3]
     3bc:	lsl	x0, x21, x27
     3c0:	orr	x1, x1, x0
     3c4:	str	x1, [x25, x5, lsl #3]
     3c8:	ldr	x1, [x19]
     3cc:	cmp	x6, x1
     3d0:	b.cs	3a8 <gomp_affinity_init_level_1+0x3a8>  // b.hs, b.nlast
     3d4:	ldr	x1, [x26, x3]
     3d8:	bic	x0, x1, x0
     3dc:	str	x0, [x26, x3]
     3e0:	b	3a8 <gomp_affinity_init_level_1+0x3a8>
     3e4:	add	x1, sp, #0xf8
     3e8:	add	x0, x0, #0x1
     3ec:	mov	w2, #0xa                   	// #10
     3f0:	str	x6, [sp, #104]
     3f4:	bl	0 <strtoul>
     3f8:	mov	x27, x0
     3fc:	ldr	w1, [x20]
     400:	ldr	x6, [sp, #104]
     404:	cmp	w1, #0x0
     408:	ccmp	x6, x0, #0x2, eq  // eq = none
     40c:	b.ls	220 <gomp_affinity_init_level_1+0x220>  // b.plast
     410:	b	2d4 <gomp_affinity_init_level_1+0x2d4>
     414:	mov	x0, #0x0                   	// #0
     418:	bl	0 <free>
     41c:	ldp	x19, x20, [sp, #16]
     420:	ldp	x23, x24, [sp, #48]
     424:	ldp	x29, x30, [sp], #256
     428:	ret
     42c:	ldr	x2, [x24]
     430:	mov	x0, x9
     434:	mov	w1, #0x0                   	// #0
     438:	bl	0 <memset>
     43c:	mov	x9, x0
     440:	ldr	x1, [sp, #248]
     444:	ldrb	w0, [x1]
     448:	cmp	w0, #0x0
     44c:	ccmp	w0, #0xa, #0x4, ne  // ne = any
     450:	b.ne	1c8 <gomp_affinity_init_level_1+0x1c8>  // b.any
     454:	ldr	x0, [x24]
     458:	ldr	x1, [sp, #128]
     45c:	cmp	x1, x0
     460:	b.cs	474 <gomp_affinity_init_level_1+0x474>  // b.hs, b.nlast
     464:	ldr	x1, [x26, x23, lsl #3]
     468:	ldrb	w2, [sp, #156]
     46c:	lsr	x2, x1, x2
     470:	tbnz	w2, #0, 304 <gomp_affinity_init_level_1+0x304>
     474:	ldr	x1, [x22]
     478:	add	x1, x1, #0x1
     47c:	str	x1, [x22]
     480:	b	2f4 <gomp_affinity_init_level_1+0x2f4>
     484:	ldr	x0, [x24]
     488:	b	2f4 <gomp_affinity_init_level_1+0x2f4>
     48c:	nop

0000000000000490 <gomp_init_thread_affinity>:
     490:	adrp	x2, 0 <gomp_places_list>
     494:	mov	w3, w1
     498:	adrp	x1, 0 <gomp_cpuset_size>
     49c:	ldr	x2, [x2]
     4a0:	ldr	x1, [x1]
     4a4:	ldr	x2, [x2, w3, uxtw #3]
     4a8:	b	0 <pthread_attr_setaffinity_np>
     4ac:	nop

00000000000004b0 <gomp_affinity_alloc>:
     4b0:	stp	x29, x30, [sp, #-48]!
     4b4:	adrp	x2, 0 <gomp_cpusetp>
     4b8:	mov	x29, sp
     4bc:	stp	x19, x20, [sp, #16]
     4c0:	ldr	x20, [x2]
     4c4:	stp	x21, x22, [sp, #32]
     4c8:	and	w22, w1, #0xff
     4cc:	cbz	x20, 524 <gomp_affinity_alloc+0x74>
     4d0:	mov	x21, x0
     4d4:	adrp	x0, 0 <gomp_cpuset_size>
     4d8:	ldr	x19, [x0]
     4dc:	add	x0, x19, #0x8
     4e0:	mul	x0, x0, x21
     4e4:	bl	0 <malloc>
     4e8:	mov	x20, x0
     4ec:	cbz	x0, 550 <gomp_affinity_alloc+0xa0>
     4f0:	add	x1, x0, x21, lsl #3
     4f4:	cbz	x21, 510 <gomp_affinity_alloc+0x60>
     4f8:	mov	x2, x0
     4fc:	mov	x0, x1
     500:	str	x1, [x2], #8
     504:	add	x1, x1, x19
     508:	cmp	x2, x0
     50c:	b.ne	500 <gomp_affinity_alloc+0x50>  // b.any
     510:	mov	x0, x20
     514:	ldp	x19, x20, [sp, #16]
     518:	ldp	x21, x22, [sp, #32]
     51c:	ldp	x29, x30, [sp], #48
     520:	ret
     524:	cbz	w22, 540 <gomp_affinity_alloc+0x90>
     528:	mov	x20, #0x0                   	// #0
     52c:	mov	x0, x20
     530:	ldp	x19, x20, [sp, #16]
     534:	ldp	x21, x22, [sp, #32]
     538:	ldp	x29, x30, [sp], #48
     53c:	ret
     540:	adrp	x0, 0 <gomp_affinity_init_level_1>
     544:	add	x0, x0, #0x0
     548:	bl	0 <gomp_error>
     54c:	b	510 <gomp_affinity_alloc+0x60>
     550:	cbnz	w22, 528 <gomp_affinity_alloc+0x78>
     554:	adrp	x0, 0 <gomp_affinity_init_level_1>
     558:	add	x0, x0, #0x0
     55c:	bl	0 <gomp_error>
     560:	b	510 <gomp_affinity_alloc+0x60>
     564:	nop

0000000000000568 <gomp_affinity_init_place>:
     568:	adrp	x2, 0 <gomp_cpuset_size>
     56c:	mov	w1, #0x0                   	// #0
     570:	ldr	x2, [x2]
     574:	b	0 <memset>

0000000000000578 <gomp_affinity_add_cpus>:
     578:	stp	x29, x30, [sp, #-32]!
     57c:	adrp	x10, 0 <gomp_cpuset_size>
     580:	mov	x29, sp
     584:	ldr	x5, [x10]
     588:	str	x19, [sp, #16]
     58c:	and	w19, w4, #0xff
     590:	cmp	x1, x5, lsl #3
     594:	b.cs	600 <gomp_affinity_add_cpus+0x88>  // b.hs, b.nlast
     598:	lsl	x9, x5, #3
     59c:	cmp	x3, #0x0
     5a0:	mov	x8, #0x1                   	// #1
     5a4:	b.gt	5c8 <gomp_affinity_add_cpus+0x50>
     5a8:	b	664 <gomp_affinity_add_cpus+0xec>
     5ac:	adds	x5, x1, x3
     5b0:	mov	x6, x5
     5b4:	b.cs	620 <gomp_affinity_add_cpus+0xa8>  // b.hs, b.nlast
     5b8:	cmp	x9, x5
     5bc:	mov	x1, x5
     5c0:	b.ls	608 <gomp_affinity_add_cpus+0x90>  // b.plast
     5c4:	ldr	x5, [x10]
     5c8:	lsr	x6, x1, #6
     5cc:	cmp	x5, x1, lsr #3
     5d0:	lsl	x7, x8, x1
     5d4:	b.ls	5e4 <gomp_affinity_add_cpus+0x6c>  // b.plast
     5d8:	ldr	x5, [x0, x6, lsl #3]
     5dc:	orr	x5, x5, x7
     5e0:	str	x5, [x0, x6, lsl #3]
     5e4:	subs	x2, x2, #0x1
     5e8:	b.ne	5ac <gomp_affinity_add_cpus+0x34>  // b.any
     5ec:	mov	w19, #0x1                   	// #1
     5f0:	mov	w0, w19
     5f4:	ldr	x19, [sp, #16]
     5f8:	ldp	x29, x30, [sp], #32
     5fc:	ret
     600:	mov	x6, x1
     604:	nop
     608:	cbz	w19, 644 <gomp_affinity_add_cpus+0xcc>
     60c:	mov	w19, #0x0                   	// #0
     610:	mov	w0, w19
     614:	ldr	x19, [sp, #16]
     618:	ldp	x29, x30, [sp], #32
     61c:	ret
     620:	cbnz	w19, 60c <gomp_affinity_add_cpus+0x94>
     624:	mov	x2, x3
     628:	adrp	x0, 0 <gomp_affinity_init_level_1>
     62c:	add	x0, x0, #0x0
     630:	bl	0 <gomp_error>
     634:	mov	w0, w19
     638:	ldr	x19, [sp, #16]
     63c:	ldp	x29, x30, [sp], #32
     640:	ret
     644:	mov	x1, x6
     648:	adrp	x0, 0 <gomp_affinity_init_level_1>
     64c:	add	x0, x0, #0x0
     650:	bl	0 <gomp_error>
     654:	mov	w0, w19
     658:	ldr	x19, [sp, #16]
     65c:	ldp	x29, x30, [sp], #32
     660:	ret
     664:	b.ne	6c4 <gomp_affinity_add_cpus+0x14c>  // b.any
     668:	lsr	x4, x1, #6
     66c:	mov	x7, #0x1                   	// #1
     670:	lsr	x6, x1, #3
     674:	lsl	x7, x7, x1
     678:	lsl	x4, x4, #3
     67c:	b	68c <gomp_affinity_add_cpus+0x114>
     680:	cmp	x9, x1
     684:	b.ls	600 <gomp_affinity_add_cpus+0x88>  // b.plast
     688:	ldr	x5, [x10]
     68c:	cmp	x5, x6
     690:	b.ls	6a0 <gomp_affinity_add_cpus+0x128>  // b.plast
     694:	ldr	x3, [x0, x4]
     698:	orr	x3, x3, x7
     69c:	str	x3, [x0, x4]
     6a0:	subs	x2, x2, #0x1
     6a4:	b.ne	680 <gomp_affinity_add_cpus+0x108>  // b.any
     6a8:	b	5ec <gomp_affinity_add_cpus+0x74>
     6ac:	cmp	x1, x6
     6b0:	b.cc	620 <gomp_affinity_add_cpus+0xa8>  // b.lo, b.ul, b.last
     6b4:	cmp	x9, x6
     6b8:	mov	x1, x6
     6bc:	b.ls	608 <gomp_affinity_add_cpus+0x90>  // b.plast
     6c0:	ldr	x5, [x10]
     6c4:	lsr	x4, x1, #6
     6c8:	add	x6, x3, x1
     6cc:	cmp	x5, x1, lsr #3
     6d0:	lsl	x7, x8, x1
     6d4:	b.ls	6e4 <gomp_affinity_add_cpus+0x16c>  // b.plast
     6d8:	ldr	x5, [x0, x4, lsl #3]
     6dc:	orr	x5, x5, x7
     6e0:	str	x5, [x0, x4, lsl #3]
     6e4:	subs	x2, x2, #0x1
     6e8:	b.ne	6ac <gomp_affinity_add_cpus+0x134>  // b.any
     6ec:	b	5ec <gomp_affinity_add_cpus+0x74>

00000000000006f0 <gomp_affinity_remove_cpu>:
     6f0:	stp	x29, x30, [sp, #-16]!
     6f4:	adrp	x3, 0 <gomp_cpuset_size>
     6f8:	mov	x29, sp
     6fc:	ldr	x4, [x3]
     700:	cmp	x1, x4, lsl #3
     704:	b.cs	764 <gomp_affinity_remove_cpu+0x74>  // b.hs, b.nlast
     708:	mov	x2, x1
     70c:	cmp	x4, x1, lsr #3
     710:	b.ls	748 <gomp_affinity_remove_cpu+0x58>  // b.plast
     714:	lsr	x4, x1, #6
     718:	and	w6, w1, #0x3f
     71c:	mov	x3, x0
     720:	ldr	x5, [x0, x4, lsl #3]
     724:	lsr	x0, x5, x6
     728:	tbz	w0, #0, 748 <gomp_affinity_remove_cpu+0x58>
     72c:	mov	x1, #0x1                   	// #1
     730:	mov	w0, w1
     734:	lsl	x1, x1, x6
     738:	bic	x1, x5, x1
     73c:	str	x1, [x3, x4, lsl #3]
     740:	ldp	x29, x30, [sp], #16
     744:	ret
     748:	mov	x1, x2
     74c:	adrp	x0, 0 <gomp_affinity_init_level_1>
     750:	add	x0, x0, #0x0
     754:	bl	0 <gomp_error>
     758:	mov	w0, #0x0                   	// #0
     75c:	ldp	x29, x30, [sp], #16
     760:	ret
     764:	adrp	x0, 0 <gomp_affinity_init_level_1>
     768:	add	x0, x0, #0x0
     76c:	bl	0 <gomp_error>
     770:	mov	w0, #0x0                   	// #0
     774:	ldp	x29, x30, [sp], #16
     778:	ret
     77c:	nop

0000000000000780 <gomp_affinity_copy_place>:
     780:	stp	x29, x30, [sp, #-64]!
     784:	mov	x29, sp
     788:	stp	x19, x20, [sp, #16]
     78c:	adrp	x20, 0 <gomp_cpuset_size>
     790:	ldr	x19, [x20]
     794:	stp	x21, x22, [sp, #32]
     798:	mov	x22, x1
     79c:	mov	x21, x2
     7a0:	mov	w1, #0x0                   	// #0
     7a4:	mov	x2, x19
     7a8:	lsl	x19, x19, #3
     7ac:	str	x23, [sp, #48]
     7b0:	mov	x23, x0
     7b4:	bl	0 <memset>
     7b8:	cbz	x19, 824 <gomp_affinity_copy_place+0xa4>
     7bc:	add	x6, x20, #0x0
     7c0:	cmp	x21, #0x0
     7c4:	b.le	864 <gomp_affinity_copy_place+0xe4>
     7c8:	mov	x1, #0x0                   	// #0
     7cc:	mov	x8, #0x1                   	// #1
     7d0:	ldr	x3, [x6]
     7d4:	lsr	x5, x1, #6
     7d8:	cmp	x3, x1, lsr #3
     7dc:	b.ls	818 <gomp_affinity_copy_place+0x98>  // b.plast
     7e0:	ldr	x5, [x22, x5, lsl #3]
     7e4:	lsr	x5, x5, x1
     7e8:	tbz	w5, #0, 818 <gomp_affinity_copy_place+0x98>
     7ec:	adds	x5, x1, x21
     7f0:	add	w4, w1, w21
     7f4:	ccmp	x19, x5, #0x0, cc  // cc = lo, ul, last
     7f8:	b.ls	83c <gomp_affinity_copy_place+0xbc>  // b.plast
     7fc:	lsr	x7, x5, #6
     800:	cmp	x3, x5, lsr #3
     804:	lsl	x4, x8, x4
     808:	b.ls	818 <gomp_affinity_copy_place+0x98>  // b.plast
     80c:	ldr	x3, [x23, x7, lsl #3]
     810:	orr	x4, x3, x4
     814:	str	x4, [x23, x7, lsl #3]
     818:	add	x1, x1, #0x1
     81c:	cmp	x19, x1
     820:	b.ne	7d0 <gomp_affinity_copy_place+0x50>  // b.any
     824:	mov	w0, #0x1                   	// #1
     828:	ldp	x19, x20, [sp, #16]
     82c:	ldp	x21, x22, [sp, #32]
     830:	ldr	x23, [sp, #48]
     834:	ldp	x29, x30, [sp], #64
     838:	ret
     83c:	mov	x2, x21
     840:	adrp	x0, 0 <gomp_affinity_init_level_1>
     844:	add	x0, x0, #0x0
     848:	bl	0 <gomp_error>
     84c:	mov	w0, #0x0                   	// #0
     850:	ldp	x19, x20, [sp, #16]
     854:	ldp	x21, x22, [sp, #32]
     858:	ldr	x23, [sp, #48]
     85c:	ldp	x29, x30, [sp], #64
     860:	ret
     864:	b.ne	8b0 <gomp_affinity_copy_place+0x130>  // b.any
     868:	mov	x0, #0x0                   	// #0
     86c:	mov	x4, #0x1                   	// #1
     870:	ldr	x1, [x6]
     874:	lsr	x3, x0, #6
     878:	and	w2, w0, #0x3f
     87c:	cmp	x1, x0, lsr #3
     880:	add	x0, x0, #0x1
     884:	b.ls	8a4 <gomp_affinity_copy_place+0x124>  // b.plast
     888:	ldr	x1, [x22, x3, lsl #3]
     88c:	lsl	x5, x4, x2
     890:	lsr	x1, x1, x2
     894:	tbz	w1, #0, 8a4 <gomp_affinity_copy_place+0x124>
     898:	ldr	x1, [x23, x3, lsl #3]
     89c:	orr	x1, x1, x5
     8a0:	str	x1, [x23, x3, lsl #3]
     8a4:	cmp	x19, x0
     8a8:	b.ne	870 <gomp_affinity_copy_place+0xf0>  // b.any
     8ac:	b	824 <gomp_affinity_copy_place+0xa4>
     8b0:	mov	x1, #0x0                   	// #0
     8b4:	mov	x5, #0x1                   	// #1
     8b8:	ldr	x2, [x6]
     8bc:	lsr	x3, x1, #6
     8c0:	cmp	x2, x1, lsr #3
     8c4:	b.ls	900 <gomp_affinity_copy_place+0x180>  // b.plast
     8c8:	ldr	x3, [x22, x3, lsl #3]
     8cc:	add	x4, x21, x1
     8d0:	lsr	x3, x3, x1
     8d4:	tbz	w3, #0, 900 <gomp_affinity_copy_place+0x180>
     8d8:	lsr	x3, x4, #6
     8dc:	add	w0, w1, w21
     8e0:	cmp	x1, x4
     8e4:	b.cc	83c <gomp_affinity_copy_place+0xbc>  // b.lo, b.ul, b.last
     8e8:	cmp	x2, x4, lsr #3
     8ec:	lsl	x0, x5, x0
     8f0:	b.ls	900 <gomp_affinity_copy_place+0x180>  // b.plast
     8f4:	ldr	x2, [x23, x3, lsl #3]
     8f8:	orr	x0, x2, x0
     8fc:	str	x0, [x23, x3, lsl #3]
     900:	add	x1, x1, #0x1
     904:	cmp	x19, x1
     908:	b.ne	8b8 <gomp_affinity_copy_place+0x138>  // b.any
     90c:	b	824 <gomp_affinity_copy_place+0xa4>

0000000000000910 <gomp_affinity_same_place>:
     910:	stp	x29, x30, [sp, #-16]!
     914:	adrp	x2, 0 <gomp_cpuset_size>
     918:	mov	x29, sp
     91c:	ldr	x2, [x2]
     920:	bl	0 <memcmp>
     924:	cmp	w0, #0x0
     928:	cset	w0, eq  // eq = none
     92c:	ldp	x29, x30, [sp], #16
     930:	ret
     934:	nop

0000000000000938 <gomp_affinity_finalize_place_list>:
     938:	stp	x29, x30, [sp, #-96]!
     93c:	mov	x29, sp
     940:	stp	x25, x26, [sp, #64]
     944:	adrp	x25, 0 <gomp_places_list_len>
     948:	stp	x23, x24, [sp, #48]
     94c:	and	w24, w0, #0xff
     950:	ldr	x0, [x25]
     954:	cbz	x0, ad8 <gomp_affinity_finalize_place_list+0x1a0>
     958:	add	x23, x25, #0x0
     95c:	stp	x19, x20, [sp, #16]
     960:	adrp	x19, 0 <gomp_cpuset_size>
     964:	add	x19, x19, #0x0
     968:	stp	x21, x22, [sp, #32]
     96c:	adrp	x22, 0 <gomp_cpusetp>
     970:	add	x22, x22, #0x0
     974:	stp	x27, x28, [sp, #80]
     978:	adrp	x27, 0 <gomp_places_list>
     97c:	add	x27, x27, #0x0
     980:	mov	x20, #0x0                   	// #0
     984:	mov	x26, #0x0                   	// #0
     988:	ldr	x0, [x19]
     98c:	lsl	x21, x26, #3
     990:	ldr	x1, [x27]
     994:	cmp	xzr, x0, lsr #3
     998:	lsr	x4, x0, #3
     99c:	ldr	x3, [x22]
     9a0:	ldr	x1, [x1, x26, lsl #3]
     9a4:	b.eq	a08 <gomp_affinity_finalize_place_list+0xd0>  // b.none
     9a8:	add	x2, x3, #0xf
     9ac:	sub	x5, x4, #0x1
     9b0:	sub	x2, x2, x1
     9b4:	cmp	x2, #0x1e
     9b8:	ccmp	x5, #0x4, #0x0, hi  // hi = pmore
     9bc:	b.ls	a84 <gomp_affinity_finalize_place_list+0x14c>  // b.plast
     9c0:	lsr	x5, x0, #4
     9c4:	and	x2, x0, #0xfffffffffffffff0
     9c8:	mov	x0, #0x0                   	// #0
     9cc:	nop
     9d0:	ldr	q0, [x1, x0]
     9d4:	ldr	q1, [x3, x0]
     9d8:	and	v0.16b, v0.16b, v1.16b
     9dc:	str	q0, [x1, x0]
     9e0:	add	x0, x0, #0x10
     9e4:	cmp	x2, x0
     9e8:	b.ne	9d0 <gomp_affinity_finalize_place_list+0x98>  // b.any
     9ec:	cmp	x4, x5, lsl #1
     9f0:	b.eq	a04 <gomp_affinity_finalize_place_list+0xcc>  // b.none
     9f4:	ldr	x3, [x3, x2]
     9f8:	ldr	x0, [x1, x2]
     9fc:	and	x0, x0, x3
     a00:	str	x0, [x1, x2]
     a04:	ldr	x0, [x19]
     a08:	bl	0 <gomp_cpuset_popcount>
     a0c:	cbz	x0, a38 <gomp_affinity_finalize_place_list+0x100>
     a10:	ldr	x0, [x27]
     a14:	add	x26, x26, #0x1
     a18:	ldr	x1, [x23]
     a1c:	add	x28, x20, #0x1
     a20:	ldr	x3, [x0, x21]
     a24:	str	x3, [x0, x20, lsl #3]
     a28:	cmp	x26, x1
     a2c:	b.cs	a4c <gomp_affinity_finalize_place_list+0x114>  // b.hs, b.nlast
     a30:	mov	x20, x28
     a34:	b	988 <gomp_affinity_finalize_place_list+0x50>
     a38:	ldr	x1, [x23]
     a3c:	add	x26, x26, #0x1
     a40:	cmp	x1, x26
     a44:	b.hi	988 <gomp_affinity_finalize_place_list+0x50>  // b.pmore
     a48:	mov	x28, x20
     a4c:	cbz	x28, acc <gomp_affinity_finalize_place_list+0x194>
     a50:	cmp	x1, x28
     a54:	b.ls	aa8 <gomp_affinity_finalize_place_list+0x170>  // b.plast
     a58:	cbz	w24, af4 <gomp_affinity_finalize_place_list+0x1bc>
     a5c:	mov	w24, #0x1                   	// #1
     a60:	str	x28, [x25]
     a64:	mov	w0, w24
     a68:	ldp	x19, x20, [sp, #16]
     a6c:	ldp	x21, x22, [sp, #32]
     a70:	ldp	x23, x24, [sp, #48]
     a74:	ldp	x25, x26, [sp, #64]
     a78:	ldp	x27, x28, [sp, #80]
     a7c:	ldp	x29, x30, [sp], #96
     a80:	ret
     a84:	mov	x0, #0x0                   	// #0
     a88:	ldr	x2, [x1, x0, lsl #3]
     a8c:	ldr	x5, [x3, x0, lsl #3]
     a90:	and	x2, x2, x5
     a94:	str	x2, [x1, x0, lsl #3]
     a98:	add	x0, x0, #0x1
     a9c:	cmp	x0, x4
     aa0:	b.ne	a88 <gomp_affinity_finalize_place_list+0x150>  // b.any
     aa4:	b	a04 <gomp_affinity_finalize_place_list+0xcc>
     aa8:	mov	w24, #0x1                   	// #1
     aac:	mov	w0, w24
     ab0:	ldp	x19, x20, [sp, #16]
     ab4:	ldp	x21, x22, [sp, #32]
     ab8:	ldp	x23, x24, [sp, #48]
     abc:	ldp	x25, x26, [sp, #64]
     ac0:	ldp	x27, x28, [sp, #80]
     ac4:	ldp	x29, x30, [sp], #96
     ac8:	ret
     acc:	ldp	x19, x20, [sp, #16]
     ad0:	ldp	x21, x22, [sp, #32]
     ad4:	ldp	x27, x28, [sp, #80]
     ad8:	cbz	w24, b08 <gomp_affinity_finalize_place_list+0x1d0>
     adc:	mov	w24, #0x0                   	// #0
     ae0:	mov	w0, w24
     ae4:	ldp	x23, x24, [sp, #48]
     ae8:	ldp	x25, x26, [sp, #64]
     aec:	ldp	x29, x30, [sp], #96
     af0:	ret
     af4:	mov	x2, x28
     af8:	adrp	x0, 0 <gomp_affinity_init_level_1>
     afc:	add	x0, x0, #0x0
     b00:	bl	0 <gomp_error>
     b04:	b	a5c <gomp_affinity_finalize_place_list+0x124>
     b08:	adrp	x0, 0 <gomp_affinity_init_level_1>
     b0c:	add	x0, x0, #0x0
     b10:	bl	0 <gomp_error>
     b14:	mov	w0, w24
     b18:	ldp	x23, x24, [sp, #48]
     b1c:	ldp	x25, x26, [sp, #64]
     b20:	ldp	x29, x30, [sp], #96
     b24:	ret

0000000000000b28 <gomp_affinity_init_level>:
     b28:	stp	x29, x30, [sp, #-176]!
     b2c:	mov	x29, sp
     b30:	stp	x23, x24, [sp, #48]
     b34:	adrp	x23, 0 <gomp_cpusetp>
     b38:	stp	x19, x20, [sp, #16]
     b3c:	mov	x19, x1
     b40:	ldr	x1, [x23]
     b44:	stp	x21, x22, [sp, #32]
     b48:	and	w21, w2, #0xff
     b4c:	str	x25, [sp, #64]
     b50:	cbz	x1, c40 <gomp_affinity_init_level+0x118>
     b54:	adrp	x25, 0 <gomp_cpuset_size>
     b58:	mov	w22, w0
     b5c:	ldr	x0, [x25]
     b60:	bl	0 <gomp_cpuset_popcount>
     b64:	cmp	x19, x0
     b68:	ldr	x24, [x23]
     b6c:	csel	x19, x19, x0, ls  // ls = plast
     b70:	cbz	x24, c40 <gomp_affinity_init_level+0x118>
     b74:	ldr	x20, [x25]
     b78:	add	x0, x20, #0x8
     b7c:	mul	x0, x0, x19
     b80:	bl	0 <malloc>
     b84:	mov	x4, x0
     b88:	cbz	x0, cdc <gomp_affinity_init_level+0x1b4>
     b8c:	add	x3, x0, x19, lsl #3
     b90:	cbz	x19, ba8 <gomp_affinity_init_level+0x80>
     b94:	mov	x1, x3
     b98:	str	x3, [x0], #8
     b9c:	add	x3, x3, x20
     ba0:	cmp	x1, x0
     ba4:	b.ne	b98 <gomp_affinity_init_level+0x70>  // b.any
     ba8:	adrp	x5, 0 <gomp_affinity_init_level_1>
     bac:	add	x5, x5, #0x0
     bb0:	add	x0, x20, #0xf
     bb4:	adrp	x23, 0 <gomp_places_list_len>
     bb8:	and	x0, x0, #0xfffffffffffffff0
     bbc:	adrp	x25, 0 <gomp_places_list>
     bc0:	ldp	x8, x9, [x5]
     bc4:	sub	sp, sp, x0
     bc8:	ldr	x6, [x5, #16]
     bcc:	mov	x3, sp
     bd0:	ldr	w5, [x5, #24]
     bd4:	mov	x1, x24
     bd8:	mov	x2, x20
     bdc:	mov	x0, x3
     be0:	str	x4, [x25]
     be4:	str	xzr, [x23]
     be8:	stp	x8, x9, [x29, #88]
     bec:	str	x6, [x29, #104]
     bf0:	str	w5, [x29, #112]
     bf4:	bl	0 <memcpy>
     bf8:	mov	w5, w21
     bfc:	mov	x3, x0
     c00:	add	x4, x29, #0x58
     c04:	mov	w0, w22
     c08:	mov	x2, x19
     c0c:	mov	w1, #0x3                   	// #3
     c10:	bl	0 <gomp_affinity_init_level_1>
     c14:	ldr	x0, [x23]
     c18:	cbz	x0, c78 <gomp_affinity_init_level+0x150>
     c1c:	mov	w21, #0x1                   	// #1
     c20:	mov	sp, x29
     c24:	mov	w0, w21
     c28:	ldp	x19, x20, [sp, #16]
     c2c:	ldp	x21, x22, [sp, #32]
     c30:	ldp	x23, x24, [sp, #48]
     c34:	ldr	x25, [sp, #64]
     c38:	ldp	x29, x30, [sp], #176
     c3c:	ret
     c40:	cbz	w21, cbc <gomp_affinity_init_level+0x194>
     c44:	adrp	x1, 0 <gomp_places_list>
     c48:	adrp	x0, 0 <gomp_places_list_len>
     c4c:	mov	w21, #0x0                   	// #0
     c50:	str	xzr, [x0]
     c54:	mov	w0, w21
     c58:	str	xzr, [x1]
     c5c:	mov	sp, x29
     c60:	ldp	x19, x20, [sp, #16]
     c64:	ldp	x21, x22, [sp, #32]
     c68:	ldp	x23, x24, [sp, #48]
     c6c:	ldr	x25, [sp, #64]
     c70:	ldp	x29, x30, [sp], #176
     c74:	ret
     c78:	cbz	w21, cac <gomp_affinity_init_level+0x184>
     c7c:	ldr	x0, [x25]
     c80:	mov	w21, #0x0                   	// #0
     c84:	bl	0 <free>
     c88:	str	xzr, [x25]
     c8c:	mov	w0, w21
     c90:	mov	sp, x29
     c94:	ldp	x19, x20, [sp, #16]
     c98:	ldp	x21, x22, [sp, #32]
     c9c:	ldp	x23, x24, [sp, #48]
     ca0:	ldr	x25, [sp, #64]
     ca4:	ldp	x29, x30, [sp], #176
     ca8:	ret
     cac:	adrp	x0, 0 <gomp_affinity_init_level_1>
     cb0:	add	x0, x0, #0x0
     cb4:	bl	0 <gomp_error>
     cb8:	b	c7c <gomp_affinity_init_level+0x154>
     cbc:	adrp	x0, 0 <gomp_affinity_init_level_1>
     cc0:	add	x0, x0, #0x0
     cc4:	bl	0 <gomp_error>
     cc8:	adrp	x1, 0 <gomp_places_list>
     ccc:	adrp	x0, 0 <gomp_places_list_len>
     cd0:	str	xzr, [x1]
     cd4:	str	xzr, [x0]
     cd8:	b	c20 <gomp_affinity_init_level+0xf8>
     cdc:	cbnz	w21, c44 <gomp_affinity_init_level+0x11c>
     ce0:	adrp	x0, 0 <gomp_affinity_init_level_1>
     ce4:	add	x0, x0, #0x0
     ce8:	b	cc4 <gomp_affinity_init_level+0x19c>
     cec:	nop

0000000000000cf0 <gomp_init_affinity>:
     cf0:	stp	x29, x30, [sp, #-32]!
     cf4:	mov	x29, sp
     cf8:	stp	x19, x20, [sp, #16]
     cfc:	adrp	x20, 0 <gomp_places_list>
     d00:	ldr	x19, [x20]
     d04:	cbz	x19, d4c <gomp_init_affinity+0x5c>
     d08:	bl	0 <pthread_self>
     d0c:	adrp	x1, 0 <gomp_cpuset_size>
     d10:	ldr	x2, [x19]
     d14:	ldr	x1, [x1]
     d18:	bl	0 <pthread_setaffinity_np>
     d1c:	adrp	x1, 0 <gomp_tls_data>
     d20:	ldr	x1, [x1]
     d24:	mrs	x0, tpidr_el0
     d28:	adrp	x2, 0 <gomp_places_list_len>
     d2c:	add	x0, x0, x1
     d30:	mov	w1, #0x1                   	// #1
     d34:	ldr	x2, [x2]
     d38:	stp	wzr, w2, [x0, #52]
     d3c:	str	w1, [x0, #92]
     d40:	ldp	x19, x20, [sp, #16]
     d44:	ldp	x29, x30, [sp], #32
     d48:	ret
     d4c:	mov	w2, #0x1                   	// #1
     d50:	mov	x1, #0xffffffffffffffff    	// #-1
     d54:	mov	w0, #0x1                   	// #1
     d58:	bl	b28 <gomp_affinity_init_level>
     d5c:	tst	w0, #0xff
     d60:	b.eq	d40 <gomp_init_affinity+0x50>  // b.none
     d64:	ldr	x19, [x20]
     d68:	b	d08 <gomp_init_affinity+0x18>
     d6c:	nop

0000000000000d70 <gomp_affinity_print_place>:
     d70:	stp	x29, x30, [sp, #-96]!
     d74:	mov	x29, sp
     d78:	stp	x25, x26, [sp, #64]
     d7c:	adrp	x26, 0 <gomp_cpuset_size>
     d80:	ldr	x2, [x26]
     d84:	cmp	xzr, x2, lsl #3
     d88:	b.eq	e48 <gomp_affinity_print_place+0xd8>  // b.none
     d8c:	stp	x19, x20, [sp, #16]
     d90:	mov	x19, #0x0                   	// #0
     d94:	cmp	x2, x19, lsr #3
     d98:	stp	x21, x22, [sp, #32]
     d9c:	mov	w25, #0x0                   	// #0
     da0:	adrp	x22, 0 <gomp_affinity_init_level_1>
     da4:	stp	x23, x24, [sp, #48]
     da8:	mov	x21, x0
     dac:	adrp	x24, 0 <gomp_affinity_init_level_1>
     db0:	str	x27, [sp, #80]
     db4:	add	x22, x22, #0x0
     db8:	add	x24, x24, #0x0
     dbc:	lsl	x27, x2, #3
     dc0:	mov	x20, #0x0                   	// #0
     dc4:	adrp	x23, 0 <stderr>
     dc8:	b.ls	e18 <gomp_affinity_print_place+0xa8>  // b.plast
     dcc:	nop
     dd0:	lsr	x0, x19, #6
     dd4:	ldr	x1, [x21, x0, lsl #3]
     dd8:	lsr	x1, x1, x19
     ddc:	tbz	w1, #0, e18 <gomp_affinity_print_place+0xa8>
     de0:	cbnz	x20, dfc <gomp_affinity_print_place+0x8c>
     de4:	ldr	x0, [x23]
     de8:	cbnz	w25, e9c <gomp_affinity_print_place+0x12c>
     dec:	mov	x2, x19
     df0:	mov	x1, x24
     df4:	mov	w25, #0x1                   	// #1
     df8:	bl	0 <fprintf>
     dfc:	add	x20, x20, #0x1
     e00:	add	x19, x19, #0x1
     e04:	cmp	x27, x19
     e08:	b.eq	e30 <gomp_affinity_print_place+0xc0>  // b.none
     e0c:	ldr	x2, [x26]
     e10:	cmp	x2, x19, lsr #3
     e14:	b.hi	dd0 <gomp_affinity_print_place+0x60>  // b.pmore
     e18:	cmp	x20, #0x1
     e1c:	b.hi	e54 <gomp_affinity_print_place+0xe4>  // b.pmore
     e20:	add	x19, x19, #0x1
     e24:	mov	x20, #0x0                   	// #0
     e28:	cmp	x27, x19
     e2c:	b.ne	e0c <gomp_affinity_print_place+0x9c>  // b.any
     e30:	cmp	x20, #0x1
     e34:	b.hi	e6c <gomp_affinity_print_place+0xfc>  // b.pmore
     e38:	ldp	x19, x20, [sp, #16]
     e3c:	ldp	x21, x22, [sp, #32]
     e40:	ldp	x23, x24, [sp, #48]
     e44:	ldr	x27, [sp, #80]
     e48:	ldp	x25, x26, [sp, #64]
     e4c:	ldp	x29, x30, [sp], #96
     e50:	ret
     e54:	ldr	x0, [x23]
     e58:	mov	x2, x20
     e5c:	mov	x1, x22
     e60:	mov	x20, #0x0                   	// #0
     e64:	bl	0 <fprintf>
     e68:	b	e00 <gomp_affinity_print_place+0x90>
     e6c:	mov	x2, x20
     e70:	adrp	x0, 0 <stderr>
     e74:	ldp	x19, x20, [sp, #16]
     e78:	adrp	x1, 0 <gomp_affinity_init_level_1>
     e7c:	ldp	x21, x22, [sp, #32]
     e80:	add	x1, x1, #0x0
     e84:	ldp	x23, x24, [sp, #48]
     e88:	ldp	x25, x26, [sp, #64]
     e8c:	ldr	x27, [sp, #80]
     e90:	ldp	x29, x30, [sp], #96
     e94:	ldr	x0, [x0]
     e98:	b	0 <fprintf>
     e9c:	mov	x1, x0
     ea0:	mov	w0, #0x2c                  	// #44
     ea4:	bl	0 <fputc>
     ea8:	ldr	x0, [x23]
     eac:	b	dec <gomp_affinity_print_place+0x7c>

0000000000000eb0 <gomp_ialias_omp_get_place_num_procs>:
     eb0:	tbnz	w0, #31, efc <gomp_ialias_omp_get_place_num_procs+0x4c>
     eb4:	adrp	x2, 0 <gomp_places_list_len>
     eb8:	mov	w1, w0
     ebc:	sxtw	x3, w0
     ec0:	mov	w0, #0x0                   	// #0
     ec4:	ldr	x2, [x2]
     ec8:	cmp	x2, w1, sxtw
     ecc:	b.hi	ed4 <gomp_ialias_omp_get_place_num_procs+0x24>  // b.pmore
     ed0:	ret
     ed4:	stp	x29, x30, [sp, #-16]!
     ed8:	adrp	x1, 0 <gomp_places_list>
     edc:	adrp	x0, 0 <gomp_cpuset_size>
     ee0:	mov	x29, sp
     ee4:	ldr	x1, [x1]
     ee8:	ldr	x0, [x0]
     eec:	ldr	x1, [x1, x3, lsl #3]
     ef0:	bl	0 <gomp_cpuset_popcount>
     ef4:	ldp	x29, x30, [sp], #16
     ef8:	ret
     efc:	mov	w0, #0x0                   	// #0
     f00:	ret
     f04:	nop

0000000000000f08 <gomp_ialias_omp_get_place_proc_ids>:
     f08:	tbnz	w0, #31, f78 <gomp_ialias_omp_get_place_proc_ids+0x70>
     f0c:	adrp	x2, 0 <gomp_places_list_len>
     f10:	sxtw	x4, w0
     f14:	ldr	x2, [x2]
     f18:	cmp	x2, w0, sxtw
     f1c:	b.ls	f78 <gomp_ialias_omp_get_place_proc_ids+0x70>  // b.plast
     f20:	adrp	x0, 0 <gomp_places_list>
     f24:	adrp	x2, 0 <gomp_cpuset_size>
     f28:	ldr	x0, [x0]
     f2c:	ldr	x3, [x2]
     f30:	ldr	x6, [x0, x4, lsl #3]
     f34:	cmp	xzr, x3, lsl #3
     f38:	lsl	x5, x3, #3
     f3c:	b.eq	f78 <gomp_ialias_omp_get_place_proc_ids+0x70>  // b.none
     f40:	mov	x0, #0x0                   	// #0
     f44:	nop
     f48:	lsr	x2, x0, #6
     f4c:	cmp	x3, x0, lsr #3
     f50:	b.ls	f6c <gomp_ialias_omp_get_place_proc_ids+0x64>  // b.plast
     f54:	ldr	x2, [x6, x2, lsl #3]
     f58:	mov	x4, x1
     f5c:	lsr	x2, x2, x0
     f60:	tbz	w2, #0, f6c <gomp_ialias_omp_get_place_proc_ids+0x64>
     f64:	str	w0, [x4], #4
     f68:	mov	x1, x4
     f6c:	add	x0, x0, #0x1
     f70:	cmp	x5, x0
     f74:	b.ne	f48 <gomp_ialias_omp_get_place_proc_ids+0x40>  // b.any
     f78:	ret
     f7c:	nop

0000000000000f80 <gomp_get_place_proc_ids_8>:
     f80:	tbnz	w0, #31, ff4 <gomp_get_place_proc_ids_8+0x74>
     f84:	adrp	x2, 0 <gomp_places_list_len>
     f88:	sxtw	x3, w0
     f8c:	ldr	x2, [x2]
     f90:	cmp	x2, w0, sxtw
     f94:	b.ls	ff4 <gomp_get_place_proc_ids_8+0x74>  // b.plast
     f98:	adrp	x0, 0 <gomp_places_list>
     f9c:	adrp	x5, 0 <gomp_cpuset_size>
     fa0:	ldr	x0, [x0]
     fa4:	ldr	x2, [x5]
     fa8:	ldr	x7, [x0, x3, lsl #3]
     fac:	cmp	xzr, x2, lsl #3
     fb0:	lsl	x6, x2, #3
     fb4:	b.eq	ff4 <gomp_get_place_proc_ids_8+0x74>  // b.none
     fb8:	mov	x0, #0x0                   	// #0
     fbc:	b	fc4 <gomp_get_place_proc_ids_8+0x44>
     fc0:	ldr	x2, [x5]
     fc4:	lsr	x3, x0, #6
     fc8:	cmp	x2, x0, lsr #3
     fcc:	b.ls	fe8 <gomp_get_place_proc_ids_8+0x68>  // b.plast
     fd0:	ldr	x2, [x7, x3, lsl #3]
     fd4:	mov	x4, x1
     fd8:	lsr	x2, x2, x0
     fdc:	tbz	w2, #0, fe8 <gomp_get_place_proc_ids_8+0x68>
     fe0:	str	x0, [x4], #8
     fe4:	mov	x1, x4
     fe8:	add	x0, x0, #0x1
     fec:	cmp	x6, x0
     ff0:	b.ne	fc0 <gomp_get_place_proc_ids_8+0x40>  // b.any
     ff4:	ret

0000000000000ff8 <gomp_display_affinity_place>:
     ff8:	stp	x29, x30, [sp, #-144]!
     ffc:	mov	x29, sp
    1000:	stp	x19, x20, [sp, #16]
    1004:	stp	x21, x22, [sp, #32]
    1008:	mov	x22, x0
    100c:	stp	x23, x24, [sp, #48]
    1010:	mov	x23, x1
    1014:	mov	x24, x2
    1018:	stp	x25, x26, [sp, #64]
    101c:	tbnz	w3, #31, 1034 <gomp_display_affinity_place+0x3c>
    1020:	adrp	x0, 0 <gomp_places_list_len>
    1024:	sxtw	x1, w3
    1028:	ldr	x0, [x0]
    102c:	cmp	x0, w3, sxtw
    1030:	b.hi	1138 <gomp_display_affinity_place+0x140>  // b.pmore
    1034:	adrp	x0, 0 <gomp_cpusetp>
    1038:	ldr	x25, [x0]
    103c:	cbz	x25, 114c <gomp_display_affinity_place+0x154>
    1040:	stp	x27, x28, [sp, #80]
    1044:	adrp	x21, 0 <gomp_cpuset_size>
    1048:	add	x0, sp, #0x71
    104c:	adrp	x26, 0 <gomp_affinity_init_level_1>
    1050:	ldr	x28, [x21]
    1054:	add	x26, x26, #0x0
    1058:	mov	w27, #0x0                   	// #0
    105c:	mov	x19, #0x0                   	// #0
    1060:	str	x0, [sp, #104]
    1064:	lsl	x28, x28, #3
    1068:	mov	x20, x28
    106c:	b	10e0 <gomp_display_affinity_place+0xe8>
    1070:	lsr	x0, x19, #6
    1074:	ldr	x0, [x25, x0, lsl #3]
    1078:	lsr	x0, x0, x19
    107c:	tbz	w0, #0, 10f4 <gomp_display_affinity_place+0xfc>
    1080:	cbnz	w27, 10d4 <gomp_display_affinity_place+0xdc>
    1084:	cmp	x28, x20
    1088:	add	x0, sp, #0x70
    108c:	b.eq	109c <gomp_display_affinity_place+0xa4>  // b.none
    1090:	ldr	x0, [sp, #104]
    1094:	mov	w1, #0x2c                  	// #44
    1098:	strb	w1, [sp, #112]
    109c:	mov	x20, x19
    10a0:	mov	w27, #0x1                   	// #1
    10a4:	mov	x2, x19
    10a8:	adrp	x1, 0 <gomp_affinity_init_level_1>
    10ac:	add	x1, x1, #0x0
    10b0:	bl	0 <sprintf>
    10b4:	add	x0, sp, #0x70
    10b8:	bl	0 <strlen>
    10bc:	add	x3, sp, #0x70
    10c0:	mov	x4, x0
    10c4:	mov	x2, x24
    10c8:	mov	x1, x23
    10cc:	mov	x0, x22
    10d0:	bl	0 <gomp_display_string>
    10d4:	cmp	x28, x19
    10d8:	add	x19, x19, #0x1
    10dc:	b.eq	111c <gomp_display_affinity_place+0x124>  // b.none
    10e0:	cmp	x28, x19
    10e4:	b.eq	10f4 <gomp_display_affinity_place+0xfc>  // b.none
    10e8:	ldr	x0, [x21]
    10ec:	cmp	x0, x19, lsr #3
    10f0:	b.hi	1070 <gomp_display_affinity_place+0x78>  // b.pmore
    10f4:	cbz	w27, 10d4 <gomp_display_affinity_place+0xdc>
    10f8:	add	x0, x20, #0x1
    10fc:	mov	w27, #0x0                   	// #0
    1100:	cmp	x0, x19
    1104:	b.eq	10d4 <gomp_display_affinity_place+0xdc>  // b.none
    1108:	sub	x2, x19, #0x1
    110c:	mov	x1, x26
    1110:	add	x0, sp, #0x70
    1114:	bl	0 <sprintf>
    1118:	b	10b4 <gomp_display_affinity_place+0xbc>
    111c:	ldp	x19, x20, [sp, #16]
    1120:	ldp	x21, x22, [sp, #32]
    1124:	ldp	x23, x24, [sp, #48]
    1128:	ldp	x25, x26, [sp, #64]
    112c:	ldp	x27, x28, [sp, #80]
    1130:	ldp	x29, x30, [sp], #144
    1134:	ret
    1138:	adrp	x0, 0 <gomp_places_list>
    113c:	stp	x27, x28, [sp, #80]
    1140:	ldr	x0, [x0]
    1144:	ldr	x25, [x0, x1, lsl #3]
    1148:	b	1044 <gomp_display_affinity_place+0x4c>
    114c:	adrp	x0, 0 <gomp_available_cpus>
    1150:	add	x19, sp, #0x70
    1154:	ldr	x2, [x0]
    1158:	cmp	x2, #0x1
    115c:	b.ls	11ac <gomp_display_affinity_place+0x1b4>  // b.plast
    1160:	adrp	x1, 0 <gomp_affinity_init_level_1>
    1164:	sub	x2, x2, #0x1
    1168:	mov	x0, x19
    116c:	add	x1, x1, #0x0
    1170:	bl	0 <sprintf>
    1174:	mov	x0, x19
    1178:	bl	0 <strlen>
    117c:	mov	x3, x19
    1180:	mov	x4, x0
    1184:	mov	x2, x24
    1188:	mov	x1, x23
    118c:	mov	x0, x22
    1190:	bl	0 <gomp_display_string>
    1194:	ldp	x19, x20, [sp, #16]
    1198:	ldp	x21, x22, [sp, #32]
    119c:	ldp	x23, x24, [sp, #48]
    11a0:	ldp	x25, x26, [sp, #64]
    11a4:	ldp	x29, x30, [sp], #144
    11a8:	ret
    11ac:	mov	w0, #0x30                  	// #48
    11b0:	strh	w0, [sp, #112]
    11b4:	b	1174 <gomp_display_affinity_place+0x17c>

target.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <omp_target_memcpy_rect_worker>:
       0:	sub	sp, sp, #0xa0
       4:	cmp	w3, #0x1
       8:	stp	x29, x30, [sp, #32]
       c:	add	x29, sp, #0x20
      10:	stp	x21, x22, [sp, #64]
      14:	mov	x21, x0
      18:	stp	x23, x24, [sp, #80]
      1c:	mov	x23, x2
      20:	stp	x27, x28, [sp, #112]
      24:	mov	x28, x4
      28:	ldr	x24, [sp, #160]
      2c:	b.eq	174 <omp_target_memcpy_rect_worker+0x174>  // b.none
      30:	stp	x19, x20, [sp, #48]
      34:	b.le	264 <omp_target_memcpy_rect_worker+0x264>
      38:	ldr	x19, [x7, #8]
      3c:	umulh	x0, x2, x19
      40:	mul	x19, x2, x19
      44:	cbnz	x0, 154 <omp_target_memcpy_rect_worker+0x154>
      48:	ldr	x20, [x24, #8]
      4c:	umulh	x0, x2, x20
      50:	mul	x20, x2, x20
      54:	cbnz	x0, 154 <omp_target_memcpy_rect_worker+0x154>
      58:	mov	x8, #0x2                   	// #2
      5c:	b	84 <omp_target_memcpy_rect_worker+0x84>
      60:	ldr	x9, [x7, x8, lsl #3]
      64:	umulh	x10, x19, x9
      68:	mul	x19, x19, x9
      6c:	cbnz	x10, 154 <omp_target_memcpy_rect_worker+0x154>
      70:	ldr	x9, [x24, x8, lsl #3]
      74:	add	x8, x8, #0x1
      78:	umulh	x10, x20, x9
      7c:	mul	x20, x20, x9
      80:	cbnz	x10, 154 <omp_target_memcpy_rect_worker+0x154>
      84:	cmp	w3, w8
      88:	b.gt	60 <omp_target_memcpy_rect_worker+0x60>
      8c:	ldr	x8, [x5]
      90:	umulh	x0, x19, x8
      94:	mul	x8, x19, x8
      98:	cbnz	x0, 154 <omp_target_memcpy_rect_worker+0x154>
      9c:	ldr	x0, [x6]
      a0:	umulh	x2, x20, x0
      a4:	mul	x0, x20, x0
      a8:	cmp	x2, #0x0
      ac:	cset	x22, ne  // ne = any
      b0:	b.ne	154 <omp_target_memcpy_rect_worker+0x154>  // b.any
      b4:	ldr	x2, [x28]
      b8:	cbz	x2, 148 <omp_target_memcpy_rect_worker+0x148>
      bc:	add	x2, x24, #0x8
      c0:	sub	w3, w3, #0x1
      c4:	add	x7, x7, #0x8
      c8:	add	x21, x21, x8
      cc:	add	x24, x1, x0
      d0:	add	x27, x28, #0x8
      d4:	stp	x25, x26, [sp, #96]
      d8:	add	x25, x5, #0x8
      dc:	add	x26, x6, #0x8
      e0:	str	x2, [sp, #152]
      e4:	ldr	x0, [sp, #152]
      e8:	str	x0, [sp]
      ec:	ldr	x0, [sp, #168]
      f0:	str	x0, [sp, #8]
      f4:	ldr	x0, [sp, #176]
      f8:	str	x0, [sp, #16]
      fc:	mov	x6, x26
     100:	mov	x5, x25
     104:	mov	x4, x27
     108:	mov	x2, x23
     10c:	mov	x1, x24
     110:	add	x22, x22, #0x1
     114:	mov	x0, x21
     118:	str	w3, [sp, #140]
     11c:	str	x7, [sp, #144]
     120:	bl	0 <omp_target_memcpy_rect_worker>
     124:	cbnz	w0, 1f4 <omp_target_memcpy_rect_worker+0x1f4>
     128:	ldr	x0, [x28]
     12c:	add	x21, x21, x19
     130:	ldr	w3, [sp, #140]
     134:	add	x24, x24, x20
     138:	cmp	x0, x22
     13c:	ldr	x7, [sp, #144]
     140:	b.hi	e4 <omp_target_memcpy_rect_worker+0xe4>  // b.pmore
     144:	ldp	x25, x26, [sp, #96]
     148:	mov	w0, #0x0                   	// #0
     14c:	ldp	x19, x20, [sp, #48]
     150:	b	15c <omp_target_memcpy_rect_worker+0x15c>
     154:	ldp	x19, x20, [sp, #48]
     158:	mov	w0, #0x16                  	// #22
     15c:	ldp	x29, x30, [sp, #32]
     160:	ldp	x21, x22, [sp, #64]
     164:	ldp	x23, x24, [sp, #80]
     168:	ldp	x27, x28, [sp, #112]
     16c:	add	sp, sp, #0xa0
     170:	ret
     174:	ldr	x2, [x4]
     178:	umulh	x0, x23, x2
     17c:	mul	x2, x23, x2
     180:	cbnz	x0, 158 <omp_target_memcpy_rect_worker+0x158>
     184:	ldr	x0, [x5]
     188:	umulh	x3, x23, x0
     18c:	mul	x4, x23, x0
     190:	cbnz	x3, 158 <omp_target_memcpy_rect_worker+0x158>
     194:	ldr	x0, [x6]
     198:	umulh	x3, x23, x0
     19c:	mul	x23, x23, x0
     1a0:	cbnz	x3, 158 <omp_target_memcpy_rect_worker+0x158>
     1a4:	ldp	x0, x3, [sp, #168]
     1a8:	orr	x0, x0, x3
     1ac:	cbz	x0, 200 <omp_target_memcpy_rect_worker+0x200>
     1b0:	cbz	x3, 23c <omp_target_memcpy_rect_worker+0x23c>
     1b4:	ldr	x0, [sp, #168]
     1b8:	cbz	x0, 214 <omp_target_memcpy_rect_worker+0x214>
     1bc:	ldr	x3, [sp, #176]
     1c0:	cmp	x0, x3
     1c4:	b.ne	158 <omp_target_memcpy_rect_worker+0x158>  // b.any
     1c8:	mov	x3, x2
     1cc:	ldr	w0, [x0, #12]
     1d0:	ldr	x2, [sp, #168]
     1d4:	ldr	x5, [x2, #128]
     1d8:	add	x2, x1, x23
     1dc:	add	x1, x21, x4
     1e0:	blr	x5
     1e4:	and	w1, w0, #0xff
     1e8:	mov	w0, #0x0                   	// #0
     1ec:	cbnz	w1, 15c <omp_target_memcpy_rect_worker+0x15c>
     1f0:	b	158 <omp_target_memcpy_rect_worker+0x158>
     1f4:	ldp	x19, x20, [sp, #48]
     1f8:	ldp	x25, x26, [sp, #96]
     1fc:	b	15c <omp_target_memcpy_rect_worker+0x15c>
     200:	add	x1, x1, x23
     204:	add	x0, x21, x4
     208:	bl	0 <memcpy>
     20c:	mov	w0, #0x0                   	// #0
     210:	b	15c <omp_target_memcpy_rect_worker+0x15c>
     214:	mov	x3, x2
     218:	ldr	x0, [sp, #176]
     21c:	ldr	x2, [sp, #176]
     220:	ldr	w0, [x0, #12]
     224:	ldr	x5, [x2, #112]
     228:	add	x2, x1, x23
     22c:	add	x1, x21, x4
     230:	blr	x5
     234:	and	w1, w0, #0xff
     238:	b	1e8 <omp_target_memcpy_rect_worker+0x1e8>
     23c:	mov	x3, x2
     240:	ldr	x0, [sp, #168]
     244:	ldr	x2, [sp, #168]
     248:	ldr	w0, [x0, #12]
     24c:	ldr	x5, [x2, #120]
     250:	add	x2, x1, x23
     254:	add	x1, x21, x4
     258:	blr	x5
     25c:	and	w1, w0, #0xff
     260:	b	1e8 <omp_target_memcpy_rect_worker+0x1e8>
     264:	mov	x20, x2
     268:	mov	x19, x2
     26c:	b	8c <omp_target_memcpy_rect_worker+0x8c>

0000000000000270 <gomp_target_init>:
     270:	stp	x29, x30, [sp, #-32]!
     274:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
     278:	mov	x0, #0x0                   	// #0
     27c:	mov	x29, sp
     280:	str	wzr, [x1]
     284:	str	x19, [sp, #16]
     288:	add	x19, x1, #0x0
     28c:	bl	0 <malloc>
     290:	mov	x1, x0
     294:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
     298:	add	x0, x0, #0x0
     29c:	str	wzr, [x19, #4]
     2a0:	str	x1, [x19, #8]
     2a4:	bl	0 <atexit>
     2a8:	cbnz	w0, 2b8 <gomp_target_init+0x48>
     2ac:	ldr	x19, [sp, #16]
     2b0:	ldp	x29, x30, [sp], #32
     2b4:	ret
     2b8:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
     2bc:	add	x0, x0, #0x0
     2c0:	bl	0 <gomp_fatal>
     2c4:	nop

00000000000002c8 <gomp_mutex_unlock>:
     2c8:	mov	x1, x0
     2cc:	ldxr	w2, [x1]
     2d0:	stlxr	w3, wzr, [x1]
     2d4:	cbnz	w3, 2cc <gomp_mutex_unlock+0x4>
     2d8:	tbnz	w2, #31, 2e0 <gomp_mutex_unlock+0x18>
     2dc:	ret
     2e0:	b	0 <gomp_mutex_unlock_slow>
     2e4:	nop

00000000000002e8 <gomp_target_fallback>:
     2e8:	stp	x29, x30, [sp, #-144]!
     2ec:	adrp	x3, 0 <gomp_places_list>
     2f0:	adrp	x4, 0 <gomp_tls_data>
     2f4:	ldr	x4, [x4]
     2f8:	mov	x29, sp
     2fc:	str	x19, [sp, #16]
     300:	mrs	x19, tpidr_el0
     304:	add	x2, x19, x4
     308:	ldr	x5, [x3]
     30c:	mov	x3, x0
     310:	ldp	x6, x7, [x2]
     314:	stp	x6, x7, [sp, #40]
     318:	mov	x0, x1
     31c:	ldp	x6, x7, [x2, #16]
     320:	stp	x6, x7, [sp, #56]
     324:	ldr	w8, [x2, #92]
     328:	ldp	x6, x7, [x2, #32]
     32c:	stp	x6, x7, [sp, #72]
     330:	ldp	x6, x7, [x2, #48]
     334:	stp	x6, x7, [sp, #88]
     338:	ldp	x6, x7, [x2, #64]
     33c:	stp	x6, x7, [sp, #104]
     340:	ldp	x6, x7, [x2, #80]
     344:	stp	xzr, xzr, [x2]
     348:	ldr	x1, [x2, #96]
     34c:	stp	xzr, xzr, [x2, #16]
     350:	stp	xzr, xzr, [x2, #32]
     354:	stp	xzr, xzr, [x2, #48]
     358:	stp	xzr, xzr, [x2, #64]
     35c:	stp	xzr, xzr, [x2, #80]
     360:	str	xzr, [x2, #96]
     364:	stp	x6, x7, [sp, #120]
     368:	str	x1, [sp, #136]
     36c:	cbz	x5, 380 <gomp_target_fallback+0x98>
     370:	adrp	x1, 0 <gomp_places_list_len>
     374:	str	w8, [x2, #92]
     378:	ldr	x1, [x1]
     37c:	str	w1, [x2, #56]
     380:	add	x19, x19, x4
     384:	blr	x3
     388:	mov	x0, x19
     38c:	bl	0 <gomp_free_thread>
     390:	ldp	x0, x1, [sp, #40]
     394:	stp	x0, x1, [x19]
     398:	ldp	x0, x1, [sp, #56]
     39c:	stp	x0, x1, [x19, #16]
     3a0:	ldp	x0, x1, [sp, #72]
     3a4:	stp	x0, x1, [x19, #32]
     3a8:	ldp	x0, x1, [sp, #88]
     3ac:	stp	x0, x1, [x19, #48]
     3b0:	ldp	x0, x1, [sp, #104]
     3b4:	stp	x0, x1, [x19, #64]
     3b8:	ldp	x0, x1, [sp, #120]
     3bc:	stp	x0, x1, [x19, #80]
     3c0:	ldr	x0, [sp, #136]
     3c4:	str	x0, [x19, #96]
     3c8:	ldr	x19, [sp, #16]
     3cc:	ldp	x29, x30, [sp], #144
     3d0:	ret
     3d4:	nop

00000000000003d8 <gomp_map_vars.constprop.0>:
     3d8:	stp	x29, x30, [sp, #-16]!
     3dc:	mov	x0, #0x40                  	// #64
     3e0:	mov	x29, sp
     3e4:	bl	0 <gomp_malloc>
     3e8:	stp	xzr, xzr, [x0, #16]
     3ec:	mov	x2, #0x1                   	// #1
     3f0:	str	x2, [x0]
     3f4:	stp	xzr, xzr, [x0, #48]
     3f8:	ldp	x29, x30, [sp], #16
     3fc:	ret

0000000000000400 <gomp_target_fini>:
     400:	stp	x29, x30, [sp, #-80]!
     404:	mov	x29, sp
     408:	stp	x23, x24, [sp, #48]
     40c:	adrp	x23, 0 <omp_target_memcpy_rect_worker>
     410:	ldr	w0, [x23]
     414:	cmp	w0, #0x0
     418:	b.le	504 <gomp_target_fini+0x104>
     41c:	add	x23, x23, #0x0
     420:	mov	w24, #0x2                   	// #2
     424:	stp	x19, x20, [sp, #16]
     428:	stp	x21, x22, [sp, #32]
     42c:	mov	x21, #0x0                   	// #0
     430:	mov	w22, #0x0                   	// #0
     434:	str	x25, [sp, #64]
     438:	mov	w25, #0x1                   	// #1
     43c:	b	464 <gomp_target_fini+0x64>
     440:	ldxr	w0, [x20]
     444:	stlxr	w1, wzr, [x20]
     448:	cbnz	w1, 440 <gomp_target_fini+0x40>
     44c:	tbnz	w0, #31, 4d8 <gomp_target_fini+0xd8>
     450:	ldr	w0, [x23]
     454:	add	w22, w22, #0x1
     458:	add	x21, x21, #0x130
     45c:	cmp	w0, w22
     460:	b.le	4f8 <gomp_target_fini+0xf8>
     464:	ldr	x19, [x23, #8]
     468:	add	x19, x19, x21
     46c:	add	x20, x19, #0xa8
     470:	ldaxr	w1, [x20]
     474:	cbnz	w1, 480 <gomp_target_fini+0x80>
     478:	stxr	w0, w25, [x20]
     47c:	cbnz	w0, 470 <gomp_target_fini+0x70>
     480:	cmp	w1, #0x0
     484:	b.ne	510 <gomp_target_fini+0x110>  // b.any
     488:	ldr	w0, [x19, #172]
     48c:	cmp	w0, #0x1
     490:	b.ne	440 <gomp_target_fini+0x40>  // b.any
     494:	ldr	w0, [x19, #12]
     498:	ldr	x1, [x19, #64]
     49c:	blr	x1
     4a0:	str	w24, [x19, #172]
     4a4:	and	w19, w0, #0xff
     4a8:	ldxr	w0, [x20]
     4ac:	stlxr	w1, wzr, [x20]
     4b0:	cbnz	w1, 4a8 <gomp_target_fini+0xa8>
     4b4:	tbnz	w0, #31, 4c8 <gomp_target_fini+0xc8>
     4b8:	cbnz	w19, 450 <gomp_target_fini+0x50>
     4bc:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
     4c0:	add	x0, x0, #0x0
     4c4:	bl	0 <gomp_fatal>
     4c8:	mov	x0, x20
     4cc:	bl	0 <gomp_mutex_unlock_slow>
     4d0:	cbnz	w19, 450 <gomp_target_fini+0x50>
     4d4:	b	4bc <gomp_target_fini+0xbc>
     4d8:	mov	x0, x20
     4dc:	bl	0 <gomp_mutex_unlock_slow>
     4e0:	ldr	w0, [x23]
     4e4:	add	w22, w22, #0x1
     4e8:	add	x21, x21, #0x130
     4ec:	cmp	w0, w22
     4f0:	b.gt	464 <gomp_target_fini+0x64>
     4f4:	nop
     4f8:	ldp	x19, x20, [sp, #16]
     4fc:	ldp	x21, x22, [sp, #32]
     500:	ldr	x25, [sp, #64]
     504:	ldp	x23, x24, [sp, #48]
     508:	ldp	x29, x30, [sp], #80
     50c:	ret
     510:	mov	x0, x20
     514:	bl	0 <gomp_mutex_lock_slow>
     518:	b	488 <gomp_target_fini+0x88>
     51c:	nop

0000000000000520 <gomp_copy_host2dev>:
     520:	stp	x29, x30, [sp, #-48]!
     524:	mov	x29, sp
     528:	stp	x19, x20, [sp, #16]
     52c:	mov	x19, x0
     530:	mov	x20, x3
     534:	stp	x21, x22, [sp, #32]
     538:	mov	x21, x1
     53c:	mov	x22, x2
     540:	cbz	x4, 5b8 <gomp_copy_host2dev+0x98>
     544:	ldp	x1, x12, [x4, #8]
     548:	ldr	x7, [x4, #24]
     54c:	add	x0, x12, x7, lsl #4
     550:	ldr	x10, [x1, #16]
     554:	ldur	x0, [x0, #-8]
     558:	sub	x10, x21, x10
     55c:	cmp	x0, x10
     560:	b.ls	5b8 <gomp_copy_host2dev+0x98>  // b.plast
     564:	subs	x7, x7, #0x1
     568:	b.mi	5b8 <gomp_copy_host2dev+0x98>  // b.first
     56c:	mov	x8, #0x0                   	// #0
     570:	b	580 <gomp_copy_host2dev+0x60>
     574:	add	x8, x6, #0x1
     578:	cmp	x7, x8
     57c:	b.lt	5b8 <gomp_copy_host2dev+0x98>  // b.tstop
     580:	add	x6, x7, x8
     584:	asr	x6, x6, #1
     588:	lsl	x9, x6, #4
     58c:	add	x11, x12, x9
     590:	ldr	x11, [x11, #8]
     594:	cmp	x11, x10
     598:	b.ls	574 <gomp_copy_host2dev+0x54>  // b.plast
     59c:	ldr	x7, [x12, x9]
     5a0:	cmp	x7, x10
     5a4:	b.ls	5e8 <gomp_copy_host2dev+0xc8>  // b.plast
     5a8:	sub	x7, x6, #0x1
     5ac:	cmp	x7, x8
     5b0:	b.ge	580 <gomp_copy_host2dev+0x60>  // b.tcont
     5b4:	nop
     5b8:	ldr	w0, [x19, #12]
     5bc:	mov	x3, x20
     5c0:	ldr	x4, [x19, #120]
     5c4:	mov	x2, x22
     5c8:	mov	x1, x21
     5cc:	blr	x4
     5d0:	tst	w0, #0xff
     5d4:	b.eq	61c <gomp_copy_host2dev+0xfc>  // b.none
     5d8:	ldp	x19, x20, [sp, #16]
     5dc:	ldp	x21, x22, [sp, #32]
     5e0:	ldp	x29, x30, [sp], #48
     5e4:	ret
     5e8:	add	x0, x10, x20
     5ec:	cmp	x11, x0
     5f0:	b.cc	650 <gomp_copy_host2dev+0x130>  // b.lo, b.ul, b.last
     5f4:	ldr	x1, [x12]
     5f8:	mov	x2, x20
     5fc:	ldp	x19, x20, [sp, #16]
     600:	sub	x10, x10, x1
     604:	mov	x1, x22
     608:	ldp	x21, x22, [sp, #32]
     60c:	ldp	x29, x30, [sp], #48
     610:	ldr	x0, [x4]
     614:	add	x0, x0, x10
     618:	b	0 <memcpy>
     61c:	add	x0, x19, #0xa8
     620:	bl	2c8 <gomp_mutex_unlock>
     624:	adrp	x4, 0 <omp_target_memcpy_rect_worker>
     628:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
     62c:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
     630:	add	x6, x21, x20
     634:	add	x4, x4, #0x0
     638:	add	x1, x1, #0x0
     63c:	mov	x5, x21
     640:	add	x0, x0, #0x0
     644:	add	x3, x22, x20
     648:	mov	x2, x22
     64c:	bl	0 <gomp_fatal>
     650:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
     654:	add	x0, x0, #0x0
     658:	bl	0 <gomp_fatal>
     65c:	nop

0000000000000660 <gomp_map_pointer>:
     660:	stp	x29, x30, [sp, #-128]!
     664:	mov	x29, sp
     668:	stp	x19, x20, [sp, #16]
     66c:	mov	x19, x0
     670:	stp	x21, x22, [sp, #32]
     674:	mov	x21, x2
     678:	stp	x23, x24, [sp, #48]
     67c:	str	x1, [sp, #72]
     680:	ldr	x23, [x0, #56]
     684:	cbz	x1, 71c <gomp_map_pointer+0xbc>
     688:	add	x5, x1, x3
     68c:	add	x24, x23, #0xa0
     690:	add	x2, x5, #0x1
     694:	add	x1, sp, #0x48
     698:	mov	x20, x3
     69c:	mov	x22, x4
     6a0:	mov	x0, x24
     6a4:	stp	x5, x2, [sp, #72]
     6a8:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     6ac:	ldr	x2, [sp, #80]
     6b0:	mov	x1, x0
     6b4:	sub	x2, x2, #0x1
     6b8:	str	x2, [sp, #80]
     6bc:	cbz	x0, 74c <gomp_map_pointer+0xec>
     6c0:	ldr	x6, [sp, #72]
     6c4:	mov	x4, x22
     6c8:	ldr	x5, [x1, #16]
     6cc:	add	x2, sp, #0x60
     6d0:	ldr	x3, [x1]
     6d4:	mov	x0, x23
     6d8:	ldr	x5, [x5, #16]
     6dc:	sub	x6, x6, x3
     6e0:	ldr	x3, [x1, #24]
     6e4:	add	x5, x6, x5
     6e8:	ldr	x1, [x19, #16]
     6ec:	sub	x20, x3, x20
     6f0:	add	x20, x5, x20
     6f4:	mov	x3, #0x8                   	// #8
     6f8:	add	x1, x21, x1
     6fc:	str	x6, [sp, #72]
     700:	str	x20, [sp, #96]
     704:	bl	520 <gomp_copy_host2dev>
     708:	ldp	x19, x20, [sp, #16]
     70c:	ldp	x21, x22, [sp, #32]
     710:	ldp	x23, x24, [sp, #48]
     714:	ldp	x29, x30, [sp], #128
     718:	ret
     71c:	ldr	x1, [x19, #16]
     720:	mov	x0, x23
     724:	add	x2, sp, #0x60
     728:	mov	x3, #0x8                   	// #8
     72c:	add	x1, x21, x1
     730:	str	xzr, [sp, #96]
     734:	bl	520 <gomp_copy_host2dev>
     738:	ldp	x19, x20, [sp, #16]
     73c:	ldp	x21, x22, [sp, #32]
     740:	ldp	x23, x24, [sp, #48]
     744:	ldp	x29, x30, [sp], #128
     748:	ret
     74c:	ldr	x2, [sp, #72]
     750:	add	x1, sp, #0x48
     754:	mov	x0, x24
     758:	sub	x2, x2, #0x1
     75c:	str	x2, [sp, #72]
     760:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     764:	mov	x1, x0
     768:	ldr	x6, [sp, #72]
     76c:	add	x6, x6, #0x1
     770:	str	x6, [sp, #72]
     774:	cbnz	x0, 6c4 <gomp_map_pointer+0x64>
     778:	add	x1, sp, #0x48
     77c:	mov	x0, x24
     780:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     784:	mov	x1, x0
     788:	cbnz	x0, 6c0 <gomp_map_pointer+0x60>
     78c:	add	x0, x23, #0xa8
     790:	bl	2c8 <gomp_mutex_unlock>
     794:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
     798:	add	x0, x0, #0x0
     79c:	bl	0 <gomp_fatal>

00000000000007a0 <gomp_unload_image_from_device>:
     7a0:	stp	x29, x30, [sp, #-176]!
     7a4:	mov	x29, sp
     7a8:	stp	x19, x20, [sp, #16]
     7ac:	stp	x23, x24, [sp, #48]
     7b0:	ldp	x19, x24, [x2, #16]
     7b4:	stp	x25, x26, [sp, #64]
     7b8:	ldp	x25, x20, [x2]
     7bc:	stp	x27, x28, [sp, #80]
     7c0:	mov	x27, x0
     7c4:	sub	x24, x24, x19
     7c8:	mov	x28, x3
     7cc:	lsr	x0, x24, #63
     7d0:	add	x24, x0, x24, asr #3
     7d4:	sub	x20, x20, x25
     7d8:	asr	x24, x24, #1
     7dc:	asr	x20, x20, #3
     7e0:	orr	w0, w24, w20
     7e4:	cbz	w0, 92c <gomp_unload_image_from_device+0x18c>
     7e8:	stp	x21, x22, [sp, #32]
     7ec:	str	w1, [sp, #108]
     7f0:	cbz	w20, 95c <gomp_unload_image_from_device+0x1bc>
     7f4:	ldr	x2, [x25]
     7f8:	add	x21, x27, #0xa0
     7fc:	add	x22, sp, #0x78
     800:	mov	x0, x21
     804:	add	x4, x2, #0x1
     808:	mov	x1, x22
     80c:	stp	x2, x4, [sp, #120]
     810:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     814:	mov	x23, x0
     818:	ldr	w3, [sp, #108]
     81c:	mov	x2, x28
     820:	ldr	w0, [x27, #12]
     824:	ldr	x4, [x27, #88]
     828:	mov	w1, w3
     82c:	blr	x4
     830:	tst	w0, #0xff
     834:	b.eq	948 <gomp_unload_image_from_device+0x1a8>  // b.none
     838:	mov	w26, w20
     83c:	cmp	w20, #0x0
     840:	mov	x20, #0x0                   	// #0
     844:	b.le	86c <gomp_unload_image_from_device+0xcc>
     848:	ldr	x2, [x25, x20, lsl #3]
     84c:	mov	x1, x22
     850:	add	x20, x20, #0x1
     854:	mov	x0, x21
     858:	add	x3, x2, #0x1
     85c:	stp	x2, x3, [sp, #120]
     860:	bl	0 <splay_tree_prefix_splay_tree_remove>
     864:	cmp	w26, w20
     868:	b.gt	848 <gomp_unload_image_from_device+0xa8>
     86c:	cmp	w24, #0x0
     870:	b.le	a28 <gomp_unload_image_from_device+0x288>
     874:	sub	w20, w24, #0x1
     878:	add	x0, x19, #0x10
     87c:	mov	w24, #0x0                   	// #0
     880:	add	x20, x0, w20, uxtw #4
     884:	b	898 <gomp_unload_image_from_device+0xf8>
     888:	bl	0 <splay_tree_prefix_splay_tree_remove>
     88c:	add	x19, x19, #0x10
     890:	cmp	x20, x19
     894:	b.eq	900 <gomp_unload_image_from_device+0x160>  // b.none
     898:	ldp	x0, x2, [x19]
     89c:	and	x1, x2, #0x7fffffffffffffff
     8a0:	add	x1, x1, x0
     8a4:	stp	x0, x1, [sp, #120]
     8a8:	mov	x1, x22
     8ac:	mov	x0, x21
     8b0:	tbz	x2, #63, 888 <gomp_unload_image_from_device+0xe8>
     8b4:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     8b8:	mov	x24, x0
     8bc:	mov	x1, x24
     8c0:	mov	x0, x21
     8c4:	bl	0 <splay_tree_prefix_splay_tree_remove>
     8c8:	ldr	x1, [x24, #48]
     8cc:	cbz	x1, 8d8 <gomp_unload_image_from_device+0x138>
     8d0:	mov	x0, x21
     8d4:	bl	0 <splay_tree_prefix_splay_tree_insert>
     8d8:	ldr	x25, [x24, #16]
     8dc:	ldr	x0, [x25]
     8e0:	cmp	x0, #0x1
     8e4:	b.ls	9a4 <gomp_unload_image_from_device+0x204>  // b.plast
     8e8:	sub	x0, x0, #0x1
     8ec:	str	x0, [x25]
     8f0:	add	x19, x19, #0x10
     8f4:	mov	w24, #0x0                   	// #0
     8f8:	cmp	x20, x19
     8fc:	b.ne	898 <gomp_unload_image_from_device+0xf8>  // b.any
     900:	eor	w24, w24, #0x1
     904:	cmp	x23, #0x0
     908:	ccmp	w24, #0x0, #0x4, ne  // ne = any
     90c:	b.ne	9c4 <gomp_unload_image_from_device+0x224>  // b.any
     910:	ldp	x21, x22, [sp, #32]
     914:	ldp	x19, x20, [sp, #16]
     918:	ldp	x23, x24, [sp, #48]
     91c:	ldp	x25, x26, [sp, #64]
     920:	ldp	x27, x28, [sp, #80]
     924:	ldp	x29, x30, [sp], #176
     928:	ret
     92c:	mov	x2, x3
     930:	ldr	w0, [x27, #12]
     934:	ldr	x3, [x27, #88]
     938:	blr	x3
     93c:	tst	w0, #0xff
     940:	b.ne	914 <gomp_unload_image_from_device+0x174>  // b.any
     944:	stp	x21, x22, [sp, #32]
     948:	add	x0, x27, #0xa8
     94c:	bl	2c8 <gomp_mutex_unlock>
     950:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
     954:	add	x0, x0, #0x0
     958:	bl	0 <gomp_fatal>
     95c:	ldr	x2, [x19]
     960:	add	x22, sp, #0x78
     964:	add	x21, x27, #0xa0
     968:	mov	x1, x22
     96c:	add	x4, x2, #0x1
     970:	mov	x0, x21
     974:	stp	x2, x4, [sp, #120]
     978:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     97c:	mov	x23, x0
     980:	ldr	w3, [sp, #108]
     984:	mov	x2, x28
     988:	ldr	w0, [x27, #12]
     98c:	ldr	x4, [x27, #88]
     990:	mov	w1, w3
     994:	blr	x4
     998:	tst	w0, #0xff
     99c:	b.ne	86c <gomp_unload_image_from_device+0xcc>  // b.any
     9a0:	b	948 <gomp_unload_image_from_device+0x1a8>
     9a4:	ldr	x0, [x25, #24]
     9a8:	cbnz	x0, 9f0 <gomp_unload_image_from_device+0x250>
     9ac:	ldr	x0, [x25, #8]
     9b0:	mov	w24, #0x1                   	// #1
     9b4:	bl	0 <free>
     9b8:	mov	x0, x25
     9bc:	bl	0 <free>
     9c0:	b	88c <gomp_unload_image_from_device+0xec>
     9c4:	ldr	x0, [x23, #16]
     9c8:	bl	0 <free>
     9cc:	mov	x0, x23
     9d0:	bl	0 <free>
     9d4:	ldp	x19, x20, [sp, #16]
     9d8:	ldp	x21, x22, [sp, #32]
     9dc:	ldp	x23, x24, [sp, #48]
     9e0:	ldp	x25, x26, [sp, #64]
     9e4:	ldp	x27, x28, [sp, #80]
     9e8:	ldp	x29, x30, [sp], #176
     9ec:	ret
     9f0:	ldr	x24, [x25, #56]
     9f4:	ldr	x26, [x25, #32]
     9f8:	ldr	w0, [x24, #12]
     9fc:	ldr	x2, [x24, #104]
     a00:	mov	x1, x26
     a04:	blr	x2
     a08:	tst	w0, #0xff
     a0c:	b.ne	9ac <gomp_unload_image_from_device+0x20c>  // b.any
     a10:	add	x0, x24, #0xa8
     a14:	bl	2c8 <gomp_mutex_unlock>
     a18:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
     a1c:	mov	x1, x26
     a20:	add	x0, x0, #0x0
     a24:	bl	0 <gomp_fatal>
     a28:	mov	w24, #0x1                   	// #1
     a2c:	b	904 <gomp_unload_image_from_device+0x164>

0000000000000a30 <gomp_map_vars_existing.isra.0.part.0>:
     a30:	stp	x29, x30, [sp, #-48]!
     a34:	add	x0, x0, #0xa8
     a38:	mov	x29, sp
     a3c:	stp	x19, x20, [sp, #16]
     a40:	mov	x19, x1
     a44:	mov	x20, x2
     a48:	ldxr	w1, [x0]
     a4c:	stlxr	w2, wzr, [x0]
     a50:	cbnz	w2, a48 <gomp_map_vars_existing.isra.0.part.0+0x18>
     a54:	tbnz	w1, #31, a70 <gomp_map_vars_existing.isra.0.part.0+0x40>
     a58:	ldr	x2, [x3]
     a5c:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
     a60:	ldp	x3, x4, [x19]
     a64:	add	x0, x0, #0x0
     a68:	ldr	x1, [x20]
     a6c:	bl	0 <gomp_fatal>
     a70:	str	x3, [sp, #40]
     a74:	bl	0 <gomp_mutex_unlock_slow>
     a78:	ldr	x3, [sp, #40]
     a7c:	b	a58 <gomp_map_vars_existing.isra.0.part.0+0x28>

0000000000000a80 <gomp_get_target_fn_addr.part.0>:
     a80:	stp	x29, x30, [sp, #-112]!
     a84:	mov	x29, sp
     a88:	str	x21, [sp, #32]
     a8c:	mov	x21, x1
     a90:	stp	x19, x20, [sp, #16]
     a94:	mov	x19, x0
     a98:	add	x20, x0, #0xa8
     a9c:	mov	w0, #0x1                   	// #1
     aa0:	ldaxr	w1, [x20]
     aa4:	cbnz	w1, ab0 <gomp_get_target_fn_addr.part.0+0x30>
     aa8:	stxr	w2, w0, [x20]
     aac:	cbnz	w2, aa0 <gomp_get_target_fn_addr.part.0+0x20>
     ab0:	cmp	w1, #0x0
     ab4:	b.ne	b44 <gomp_get_target_fn_addr.part.0+0xc4>  // b.any
     ab8:	ldr	w0, [x19, #172]
     abc:	cmp	w0, #0x2
     ac0:	b.eq	b04 <gomp_get_target_fn_addr.part.0+0x84>  // b.none
     ac4:	add	x2, x21, #0x1
     ac8:	add	x0, x19, #0xa0
     acc:	add	x1, sp, #0x38
     ad0:	stp	x21, x2, [sp, #56]
     ad4:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     ad8:	mov	x19, x0
     adc:	ldxr	w0, [x20]
     ae0:	stlxr	w1, wzr, [x20]
     ae4:	cbnz	w1, adc <gomp_get_target_fn_addr.part.0+0x5c>
     ae8:	tbnz	w0, #31, b28 <gomp_get_target_fn_addr.part.0+0xa8>
     aec:	cbz	x19, b14 <gomp_get_target_fn_addr.part.0+0x94>
     af0:	ldr	x0, [x19, #24]
     af4:	ldp	x19, x20, [sp, #16]
     af8:	ldr	x21, [sp, #32]
     afc:	ldp	x29, x30, [sp], #112
     b00:	ret
     b04:	ldxr	w0, [x20]
     b08:	stlxr	w1, wzr, [x20]
     b0c:	cbnz	w1, b04 <gomp_get_target_fn_addr.part.0+0x84>
     b10:	tbnz	w0, #31, b34 <gomp_get_target_fn_addr.part.0+0xb4>
     b14:	mov	x0, #0x0                   	// #0
     b18:	ldp	x19, x20, [sp, #16]
     b1c:	ldr	x21, [sp, #32]
     b20:	ldp	x29, x30, [sp], #112
     b24:	ret
     b28:	mov	x0, x20
     b2c:	bl	0 <gomp_mutex_unlock_slow>
     b30:	b	aec <gomp_get_target_fn_addr.part.0+0x6c>
     b34:	mov	x0, x20
     b38:	bl	0 <gomp_mutex_unlock_slow>
     b3c:	mov	x0, #0x0                   	// #0
     b40:	b	b18 <gomp_get_target_fn_addr.part.0+0x98>
     b44:	mov	x0, x20
     b48:	bl	0 <gomp_mutex_lock_slow>
     b4c:	b	ab8 <gomp_get_target_fn_addr.part.0+0x38>

0000000000000b50 <gomp_update>:
     b50:	stp	x29, x30, [sp, #-192]!
     b54:	mov	x29, sp
     b58:	stp	x19, x20, [sp, #16]
     b5c:	mov	x20, x0
     b60:	mov	w0, #0x7                   	// #7
     b64:	stp	x21, x22, [sp, #32]
     b68:	mov	w22, #0xff                  	// #255
     b6c:	stp	x25, x26, [sp, #64]
     b70:	ands	w25, w5, #0xff
     b74:	csel	w22, w22, w0, ne  // ne = any
     b78:	str	x4, [sp, #96]
     b7c:	cmp	x20, #0x0
     b80:	ccmp	x1, #0x0, #0x4, ne  // ne = any
     b84:	b.eq	cf8 <gomp_update+0x1a8>  // b.none
     b88:	add	x0, x20, #0xa8
     b8c:	mov	x26, x1
     b90:	stp	x23, x24, [sp, #48]
     b94:	mov	x23, x3
     b98:	mov	x21, x2
     b9c:	mov	x2, x0
     ba0:	mov	w0, #0x1                   	// #1
     ba4:	str	x2, [sp, #104]
     ba8:	ldaxr	w1, [x2]
     bac:	cbnz	w1, bb8 <gomp_update+0x68>
     bb0:	stxr	w3, w0, [x2]
     bb4:	cbnz	w3, ba8 <gomp_update+0x58>
     bb8:	cmp	w1, #0x0
     bbc:	b.ne	df8 <gomp_update+0x2a8>  // b.any
     bc0:	ldr	w0, [x20, #172]
     bc4:	mov	x19, #0x0                   	// #0
     bc8:	cmp	w0, #0x2
     bcc:	b.eq	d80 <gomp_update+0x230>  // b.none
     bd0:	add	x24, x20, #0xa0
     bd4:	stp	x27, x28, [sp, #80]
     bd8:	b	be8 <gomp_update+0x98>
     bdc:	add	x19, x19, #0x1
     be0:	cmp	x26, x19
     be4:	b.ls	cdc <gomp_update+0x18c>  // b.plast
     be8:	ldr	x5, [x23, x19, lsl #3]
     bec:	cbz	x5, bdc <gomp_update+0x8c>
     bf0:	ldr	x2, [x21, x19, lsl #3]
     bf4:	add	x1, sp, #0x88
     bf8:	mov	x0, x24
     bfc:	add	x5, x5, x2
     c00:	stp	x2, x5, [sp, #136]
     c04:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     c08:	mov	x28, x0
     c0c:	cbz	x0, bdc <gomp_update+0x8c>
     c10:	sxtw	x0, w19
     c14:	ldr	x1, [sp, #96]
     c18:	cbz	w25, d0c <gomp_update+0x1bc>
     c1c:	ldrh	w4, [x1, x0, lsl #1]
     c20:	ldr	x1, [x28]
     c24:	ldr	x8, [sp, #136]
     c28:	cmp	x1, x8
     c2c:	b.hi	dd0 <gomp_update+0x280>  // b.pmore
     c30:	ldr	x0, [x28, #8]
     c34:	ldr	x3, [sp, #144]
     c38:	cmp	x0, x3
     c3c:	b.cc	dd0 <gomp_update+0x280>  // b.lo, b.ul, b.last
     c40:	ldp	x2, x0, [x28, #16]
     c44:	and	w4, w22, w4
     c48:	mov	w5, #0xd                   	// #13
     c4c:	and	w5, w4, w5
     c50:	sub	x27, x3, x8
     c54:	cmp	w5, #0x1
     c58:	ldr	x2, [x2, #16]
     c5c:	add	x0, x8, x0
     c60:	sub	x2, x2, x1
     c64:	add	x28, x2, x0
     c68:	b.eq	d14 <gomp_update+0x1c4>  // b.none
     c6c:	and	w4, w4, #0xe
     c70:	cmp	w4, #0x2
     c74:	b.ne	bdc <gomp_update+0x8c>  // b.any
     c78:	ldr	w0, [x20, #12]
     c7c:	mov	x1, x8
     c80:	ldr	x4, [x20, #112]
     c84:	mov	x3, x27
     c88:	mov	x2, x28
     c8c:	str	x8, [sp, #112]
     c90:	blr	x4
     c94:	tst	w0, #0xff
     c98:	ldr	x8, [sp, #112]
     c9c:	b.ne	bdc <gomp_update+0x8c>  // b.any
     ca0:	ldr	x0, [sp, #104]
     ca4:	str	x8, [sp, #96]
     ca8:	bl	2c8 <gomp_mutex_unlock>
     cac:	ldr	x8, [sp, #96]
     cb0:	adrp	x4, 0 <omp_target_memcpy_rect_worker>
     cb4:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
     cb8:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
     cbc:	add	x4, x4, #0x0
     cc0:	add	x1, x1, #0x0
     cc4:	add	x0, x0, #0x0
     cc8:	add	x3, x28, x27
     ccc:	mov	x2, x28
     cd0:	add	x6, x8, x27
     cd4:	mov	x5, x8
     cd8:	bl	0 <gomp_fatal>
     cdc:	ldr	x1, [sp, #104]
     ce0:	ldxr	w0, [x1]
     ce4:	stlxr	w2, wzr, [x1]
     ce8:	cbnz	w2, ce0 <gomp_update+0x190>
     cec:	tbnz	w0, #31, dac <gomp_update+0x25c>
     cf0:	ldp	x23, x24, [sp, #48]
     cf4:	ldp	x27, x28, [sp, #80]
     cf8:	ldp	x19, x20, [sp, #16]
     cfc:	ldp	x21, x22, [sp, #32]
     d00:	ldp	x25, x26, [sp, #64]
     d04:	ldp	x29, x30, [sp], #192
     d08:	ret
     d0c:	ldrb	w4, [x1, x0]
     d10:	b	c20 <gomp_update+0xd0>
     d14:	ldr	w0, [x20, #12]
     d18:	mov	x2, x8
     d1c:	ldr	x5, [x20, #120]
     d20:	mov	x3, x27
     d24:	mov	x1, x28
     d28:	str	x8, [sp, #112]
     d2c:	str	w4, [sp, #124]
     d30:	blr	x5
     d34:	tst	w0, #0xff
     d38:	ldr	w4, [sp, #124]
     d3c:	ldr	x8, [sp, #112]
     d40:	b.ne	c6c <gomp_update+0x11c>  // b.any
     d44:	ldr	x0, [sp, #104]
     d48:	str	x8, [sp, #96]
     d4c:	bl	2c8 <gomp_mutex_unlock>
     d50:	ldr	x8, [sp, #96]
     d54:	adrp	x4, 0 <omp_target_memcpy_rect_worker>
     d58:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
     d5c:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
     d60:	add	x6, x28, x27
     d64:	add	x4, x4, #0x0
     d68:	add	x1, x1, #0x0
     d6c:	mov	x5, x28
     d70:	add	x0, x0, #0x0
     d74:	add	x3, x8, x27
     d78:	mov	x2, x8
     d7c:	bl	0 <gomp_fatal>
     d80:	ldr	x1, [sp, #104]
     d84:	ldxr	w0, [x1]
     d88:	stlxr	w2, wzr, [x1]
     d8c:	cbnz	w2, d84 <gomp_update+0x234>
     d90:	tbnz	w0, #31, dc0 <gomp_update+0x270>
     d94:	ldp	x19, x20, [sp, #16]
     d98:	ldp	x21, x22, [sp, #32]
     d9c:	ldp	x23, x24, [sp, #48]
     da0:	ldp	x25, x26, [sp, #64]
     da4:	ldp	x29, x30, [sp], #192
     da8:	ret
     dac:	ldr	x0, [sp, #104]
     db0:	bl	0 <gomp_mutex_unlock_slow>
     db4:	ldp	x23, x24, [sp, #48]
     db8:	ldp	x27, x28, [sp, #80]
     dbc:	b	cf8 <gomp_update+0x1a8>
     dc0:	ldr	x0, [sp, #104]
     dc4:	bl	0 <gomp_mutex_unlock_slow>
     dc8:	ldp	x23, x24, [sp, #48]
     dcc:	b	cf8 <gomp_update+0x1a8>
     dd0:	ldr	x1, [sp, #104]
     dd4:	ldxr	w0, [x1]
     dd8:	stlxr	w2, wzr, [x1]
     ddc:	cbnz	w2, dd4 <gomp_update+0x284>
     de0:	tbnz	w0, #31, e04 <gomp_update+0x2b4>
     de4:	ldp	x3, x4, [x28]
     de8:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
     dec:	ldp	x1, x2, [sp, #136]
     df0:	add	x0, x0, #0x0
     df4:	bl	0 <gomp_fatal>
     df8:	ldr	x0, [sp, #104]
     dfc:	bl	0 <gomp_mutex_lock_slow>
     e00:	b	bc0 <gomp_update+0x70>
     e04:	ldr	x0, [sp, #104]
     e08:	bl	0 <gomp_mutex_unlock_slow>
     e0c:	b	de4 <gomp_update+0x294>

0000000000000e10 <gomp_load_image_to_device>:
     e10:	stp	x29, x30, [sp, #-160]!
     e14:	mov	x5, x2
     e18:	mov	x2, x3
     e1c:	mov	x29, sp
     e20:	stp	x25, x26, [sp, #64]
     e24:	mov	x25, x0
     e28:	and	w0, w4, #0xff
     e2c:	stp	x21, x22, [sp, #32]
     e30:	add	x3, sp, #0x98
     e34:	str	w0, [sp, #140]
     e38:	ldr	x0, [x5, #16]
     e3c:	stp	x23, x24, [sp, #48]
     e40:	ldr	x21, [x5, #24]
     e44:	stp	x27, x28, [sp, #80]
     e48:	ldp	x27, x23, [x5]
     e4c:	sub	x21, x21, x0
     e50:	stp	x19, x20, [sp, #16]
     e54:	lsr	x4, x21, #63
     e58:	add	x21, x4, x21, asr #3
     e5c:	str	xzr, [sp, #152]
     e60:	ldr	x4, [x25, #80]
     e64:	asr	x20, x21, #1
     e68:	sub	x23, x23, x27
     e6c:	stp	x20, x0, [sp, #120]
     e70:	ldr	w0, [x25, #12]
     e74:	asr	x23, x23, #3
     e78:	add	w24, w20, w23
     e7c:	blr	x4
     e80:	mov	w19, w0
     e84:	cmp	w24, w0
     e88:	b.ne	1068 <gomp_load_image_to_device+0x258>  // b.any
     e8c:	mov	x0, #0x40                  	// #64
     e90:	bl	0 <gomp_malloc>
     e94:	mov	w1, #0x48                  	// #72
     e98:	mov	x22, x0
     e9c:	smull	x0, w24, w1
     ea0:	mov	x24, #0xffffffffffffffff    	// #-1
     ea4:	bl	0 <gomp_malloc>
     ea8:	stp	x24, x0, [x22]
     eac:	mov	x19, x0
     eb0:	movi	v0.4s, #0x0
     eb4:	stp	xzr, x25, [x22, #48]
     eb8:	cmp	w23, #0x0
     ebc:	stp	q0, q0, [x22, #16]
     ec0:	b.le	f30 <gomp_load_image_to_device+0x120>
     ec4:	mov	w28, w23
     ec8:	add	x21, x25, #0xa0
     ecc:	mov	x20, x0
     ed0:	mov	x26, #0x0                   	// #0
     ed4:	str	q0, [sp, #96]
     ed8:	lsl	x4, x26, #4
     edc:	ldr	x3, [x27, x26, lsl #3]
     ee0:	str	x22, [x20, #16]
     ee4:	ldr	x5, [sp, #152]
     ee8:	add	x6, x3, #0x1
     eec:	stp	x3, x6, [x20]
     ef0:	mov	x1, x20
     ef4:	add	x26, x26, #0x1
     ef8:	ldr	x3, [x5, x4]
     efc:	stp	x3, x24, [x20, #24]
     f00:	mov	x0, x21
     f04:	ldr	q0, [sp, #96]
     f08:	str	xzr, [x20, #64]
     f0c:	add	x20, x20, #0x48
     f10:	stur	q0, [x20, #-24]
     f14:	bl	0 <splay_tree_prefix_splay_tree_insert>
     f18:	cmp	w28, w26
     f1c:	b.gt	ed8 <gomp_load_image_to_device+0xc8>
     f20:	sub	w0, w23, #0x1
     f24:	add	x0, x0, #0x1
     f28:	add	x0, x0, x0, lsl #3
     f2c:	add	x19, x19, x0, lsl #3
     f30:	ldr	w0, [sp, #120]
     f34:	cmp	w0, #0x0
     f38:	b.le	ff0 <gomp_load_image_to_device+0x1e0>
     f3c:	ldr	w0, [sp, #120]
     f40:	sbfiz	x23, x23, #4, #32
     f44:	ldr	x20, [sp, #128]
     f48:	sub	w21, w0, #0x1
     f4c:	add	x21, x21, #0x1
     f50:	add	x28, x25, #0xa0
     f54:	sub	x23, x23, x20
     f58:	mov	x24, #0xffffffffffffffff    	// #-1
     f5c:	add	x21, x21, x21, lsl #3
     f60:	mov	x27, #0xfffffffffffffffe    	// #-2
     f64:	add	x21, x19, x21, lsl #3
     f68:	b	f8c <gomp_load_image_to_device+0x17c>
     f6c:	str	x24, [x19, #32]
     f70:	add	x19, x19, #0x48
     f74:	stp	xzr, xzr, [x19, #-24]
     f78:	add	x20, x20, #0x10
     f7c:	stur	xzr, [x19, #-8]
     f80:	bl	0 <splay_tree_prefix_splay_tree_insert>
     f84:	cmp	x19, x21
     f88:	b.eq	ff0 <gomp_load_image_to_device+0x1e0>  // b.none
     f8c:	ldr	x0, [sp, #152]
     f90:	add	x1, x20, x23
     f94:	ldr	x2, [x20, #8]
     f98:	add	x3, x0, x1
     f9c:	ldr	x1, [x0, x1]
     fa0:	ldr	x0, [x3, #8]
     fa4:	sub	x0, x0, x1
     fa8:	cmp	x2, x0
     fac:	b.ne	1014 <gomp_load_image_to_device+0x204>  // b.any
     fb0:	ldr	x3, [x20]
     fb4:	and	x0, x2, #0x7fffffffffffffff
     fb8:	stp	x22, x1, [x19, #16]
     fbc:	mov	x1, x19
     fc0:	add	x0, x0, x3
     fc4:	stp	x3, x0, [x19]
     fc8:	mov	x0, x28
     fcc:	tbz	x2, #63, f6c <gomp_load_image_to_device+0x15c>
     fd0:	str	x27, [x19, #32]
     fd4:	add	x19, x19, #0x48
     fd8:	stp	xzr, xzr, [x19, #-24]
     fdc:	add	x20, x20, #0x10
     fe0:	stur	xzr, [x19, #-8]
     fe4:	bl	0 <splay_tree_prefix_splay_tree_insert>
     fe8:	cmp	x19, x21
     fec:	b.ne	f8c <gomp_load_image_to_device+0x17c>  // b.any
     ff0:	ldr	x0, [sp, #152]
     ff4:	bl	0 <free>
     ff8:	ldp	x19, x20, [sp, #16]
     ffc:	ldp	x21, x22, [sp, #32]
    1000:	ldp	x23, x24, [sp, #48]
    1004:	ldp	x25, x26, [sp, #64]
    1008:	ldp	x27, x28, [sp, #80]
    100c:	ldp	x29, x30, [sp], #160
    1010:	ret
    1014:	add	x0, x25, #0xa8
    1018:	ldxr	w1, [x0]
    101c:	stlxr	w2, wzr, [x0]
    1020:	cbnz	w2, 1018 <gomp_load_image_to_device+0x208>
    1024:	tbnz	w1, #31, 1060 <gomp_load_image_to_device+0x250>
    1028:	ldr	w0, [sp, #140]
    102c:	cbnz	w0, 103c <gomp_load_image_to_device+0x22c>
    1030:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    1034:	add	x0, x0, #0x0
    1038:	bl	0 <gomp_fatal>
    103c:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    1040:	add	x0, x0, #0x0
    1044:	add	x0, x0, #0x10
    1048:	ldxr	w1, [x0]
    104c:	stlxr	w2, wzr, [x0]
    1050:	cbnz	w2, 1048 <gomp_load_image_to_device+0x238>
    1054:	tbz	w1, #31, 1030 <gomp_load_image_to_device+0x220>
    1058:	bl	0 <gomp_mutex_unlock_slow>
    105c:	b	1030 <gomp_load_image_to_device+0x220>
    1060:	bl	0 <gomp_mutex_unlock_slow>
    1064:	b	1028 <gomp_load_image_to_device+0x218>
    1068:	add	x0, x25, #0xa8
    106c:	bl	2c8 <gomp_mutex_unlock>
    1070:	ldr	w0, [sp, #140]
    1074:	cbnz	w0, 108c <gomp_load_image_to_device+0x27c>
    1078:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    107c:	mov	w2, w19
    1080:	mov	w1, w24
    1084:	add	x0, x0, #0x0
    1088:	bl	0 <gomp_fatal>
    108c:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    1090:	add	x0, x0, #0x0
    1094:	add	x0, x0, #0x10
    1098:	bl	2c8 <gomp_mutex_unlock>
    109c:	b	1078 <gomp_load_image_to_device+0x268>

00000000000010a0 <gomp_exit_data>:
    10a0:	stp	x29, x30, [sp, #-192]!
    10a4:	mov	x29, sp
    10a8:	stp	x21, x22, [sp, #32]
    10ac:	mov	x21, x1
    10b0:	stp	x23, x24, [sp, #48]
    10b4:	mov	x23, x3
    10b8:	mov	x24, x4
    10bc:	stp	x25, x26, [sp, #64]
    10c0:	mov	x25, x0
    10c4:	add	x0, x0, #0xa8
    10c8:	str	x2, [sp, #104]
    10cc:	mov	x2, x0
    10d0:	mov	w0, #0x1                   	// #1
    10d4:	str	x2, [sp, #120]
    10d8:	ldaxr	w1, [x2]
    10dc:	cbnz	w1, 10e8 <gomp_exit_data+0x48>
    10e0:	stxr	w3, w0, [x2]
    10e4:	cbnz	w3, 10d8 <gomp_exit_data+0x38>
    10e8:	cmp	w1, #0x0
    10ec:	b.ne	13d4 <gomp_exit_data+0x334>  // b.any
    10f0:	ldr	w0, [x25, #172]
    10f4:	cmp	w0, #0x2
    10f8:	b.eq	1364 <gomp_exit_data+0x2c4>  // b.none
    10fc:	mov	x22, #0x0                   	// #0
    1100:	cbz	x21, 1234 <gomp_exit_data+0x194>
    1104:	stp	x19, x20, [sp, #16]
    1108:	add	x20, x25, #0xa0
    110c:	stp	x27, x28, [sp, #80]
    1110:	mov	x27, #0x1                   	// #1
    1114:	nop
    1118:	ldrh	w2, [x24, x22, lsl #1]
    111c:	and	w28, w2, #0xff
    1120:	cmp	w28, #0x1f
    1124:	b.hi	113c <gomp_exit_data+0x9c>  // b.pmore
    1128:	mov	x1, #0x8084                	// #32900
    112c:	lsl	x0, x27, x28
    1130:	movk	x1, #0x8084, lsl #16
    1134:	tst	x0, x1
    1138:	b.ne	1160 <gomp_exit_data+0xc0>  // b.any
    113c:	ldr	x1, [sp, #120]
    1140:	ldxr	w0, [x1]
    1144:	stlxr	w2, wzr, [x1]
    1148:	cbnz	w2, 1140 <gomp_exit_data+0xa0>
    114c:	tbnz	w0, #31, 13e0 <gomp_exit_data+0x340>
    1150:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    1154:	mov	w1, w28
    1158:	add	x0, x0, #0x0
    115c:	bl	0 <gomp_fatal>
    1160:	ldr	x0, [sp, #104]
    1164:	cmp	w28, #0x1f
    1168:	and	w3, w28, #0xffffffef
    116c:	cset	w19, eq  // eq = none
    1170:	cmp	w3, #0xf
    1174:	ldr	x1, [x0, x22, lsl #3]
    1178:	ldr	x0, [x23, x22, lsl #3]
    117c:	add	x0, x1, x0
    1180:	stp	x1, x0, [sp, #136]
    1184:	b.ne	125c <gomp_exit_data+0x1bc>  // b.any
    1188:	cmp	x1, x0
    118c:	b.ne	125c <gomp_exit_data+0x1bc>  // b.any
    1190:	add	x3, x1, #0x1
    1194:	mov	x0, x20
    1198:	add	x1, sp, #0x88
    119c:	str	x3, [sp, #144]
    11a0:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    11a4:	mov	x26, x0
    11a8:	ldr	x1, [sp, #144]
    11ac:	sub	x1, x1, #0x1
    11b0:	str	x1, [sp, #144]
    11b4:	cbz	x26, 1220 <gomp_exit_data+0x180>
    11b8:	ldr	x3, [x26, #32]
    11bc:	cmp	w28, #0x7
    11c0:	csinc	w19, w19, wzr, ne  // ne = any
    11c4:	sub	x1, x3, #0x1
    11c8:	cmn	x1, #0x3
    11cc:	b.hi	128c <gomp_exit_data+0x1ec>  // b.pmore
    11d0:	str	x1, [x26, #32]
    11d4:	cbz	w19, 1274 <gomp_exit_data+0x1d4>
    11d8:	str	xzr, [x26, #32]
    11dc:	cmp	w28, #0x2
    11e0:	b.eq	12a8 <gomp_exit_data+0x208>  // b.none
    11e4:	cmp	w28, #0x12
    11e8:	b.eq	12a8 <gomp_exit_data+0x208>  // b.none
    11ec:	mov	x1, x26
    11f0:	mov	x0, x20
    11f4:	bl	0 <splay_tree_prefix_splay_tree_remove>
    11f8:	ldr	x1, [x26, #48]
    11fc:	cbz	x1, 1208 <gomp_exit_data+0x168>
    1200:	mov	x0, x20
    1204:	bl	0 <splay_tree_prefix_splay_tree_insert>
    1208:	ldr	x19, [x26, #16]
    120c:	ldr	x0, [x19]
    1210:	cmp	x0, #0x1
    1214:	b.ls	1308 <gomp_exit_data+0x268>  // b.plast
    1218:	sub	x0, x0, #0x1
    121c:	str	x0, [x19]
    1220:	add	x22, x22, #0x1
    1224:	cmp	x21, x22
    1228:	b.ne	1118 <gomp_exit_data+0x78>  // b.any
    122c:	ldp	x19, x20, [sp, #16]
    1230:	ldp	x27, x28, [sp, #80]
    1234:	ldr	x1, [sp, #120]
    1238:	ldxr	w0, [x1]
    123c:	stlxr	w2, wzr, [x1]
    1240:	cbnz	w2, 1238 <gomp_exit_data+0x198>
    1244:	tbnz	w0, #31, 1378 <gomp_exit_data+0x2d8>
    1248:	ldp	x21, x22, [sp, #32]
    124c:	ldp	x23, x24, [sp, #48]
    1250:	ldp	x25, x26, [sp, #64]
    1254:	ldp	x29, x30, [sp], #192
    1258:	ret
    125c:	add	x1, sp, #0x88
    1260:	mov	x0, x20
    1264:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1268:	mov	x26, x0
    126c:	b	11b4 <gomp_exit_data+0x114>
    1270:	mov	x1, x3
    1274:	cmp	w28, #0x2
    1278:	b.eq	1300 <gomp_exit_data+0x260>  // b.none
    127c:	cmp	w28, #0x12
    1280:	b.eq	12a8 <gomp_exit_data+0x208>  // b.none
    1284:	cbnz	x1, 1220 <gomp_exit_data+0x180>
    1288:	b	11ec <gomp_exit_data+0x14c>
    128c:	cbz	w19, 1270 <gomp_exit_data+0x1d0>
    1290:	cmn	x3, #0x1
    1294:	b.ne	11d8 <gomp_exit_data+0x138>  // b.any
    1298:	cmp	w28, #0x2
    129c:	b.eq	1220 <gomp_exit_data+0x180>  // b.none
    12a0:	cmp	w28, #0x12
    12a4:	b.ne	1220 <gomp_exit_data+0x180>  // b.any
    12a8:	ldr	x2, [x26, #16]
    12ac:	ldp	x5, x3, [sp, #136]
    12b0:	str	x5, [sp, #112]
    12b4:	ldr	x0, [x26]
    12b8:	ldr	x19, [x2, #16]
    12bc:	ldr	x2, [x26, #24]
    12c0:	sub	x19, x19, x0
    12c4:	ldr	w0, [x25, #12]
    12c8:	sub	x28, x3, x5
    12cc:	ldr	x7, [x25, #112]
    12d0:	add	x2, x5, x2
    12d4:	add	x19, x19, x2
    12d8:	mov	x1, x5
    12dc:	mov	x2, x19
    12e0:	mov	x3, x28
    12e4:	blr	x7
    12e8:	tst	w0, #0xff
    12ec:	ldr	x5, [sp, #112]
    12f0:	b.eq	1384 <gomp_exit_data+0x2e4>  // b.none
    12f4:	ldr	x1, [x26, #32]
    12f8:	cbnz	x1, 1220 <gomp_exit_data+0x180>
    12fc:	b	11ec <gomp_exit_data+0x14c>
    1300:	cbnz	x1, 1220 <gomp_exit_data+0x180>
    1304:	b	12a8 <gomp_exit_data+0x208>
    1308:	ldr	x0, [x19, #24]
    130c:	cbnz	x0, 1324 <gomp_exit_data+0x284>
    1310:	ldr	x0, [x19, #8]
    1314:	bl	0 <free>
    1318:	mov	x0, x19
    131c:	bl	0 <free>
    1320:	b	1220 <gomp_exit_data+0x180>
    1324:	ldr	x2, [x19, #56]
    1328:	str	x2, [sp, #112]
    132c:	ldr	x28, [x19, #32]
    1330:	ldr	w0, [x2, #12]
    1334:	ldr	x3, [x2, #104]
    1338:	mov	x1, x28
    133c:	blr	x3
    1340:	tst	w0, #0xff
    1344:	ldr	x2, [sp, #112]
    1348:	b.ne	1310 <gomp_exit_data+0x270>  // b.any
    134c:	add	x0, x2, #0xa8
    1350:	bl	2c8 <gomp_mutex_unlock>
    1354:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    1358:	mov	x1, x28
    135c:	add	x0, x0, #0x0
    1360:	bl	0 <gomp_fatal>
    1364:	ldr	x1, [sp, #120]
    1368:	ldxr	w0, [x1]
    136c:	stlxr	w2, wzr, [x1]
    1370:	cbnz	w2, 1368 <gomp_exit_data+0x2c8>
    1374:	tbz	w0, #31, 1248 <gomp_exit_data+0x1a8>
    1378:	ldr	x0, [sp, #120]
    137c:	bl	0 <gomp_mutex_unlock_slow>
    1380:	b	1248 <gomp_exit_data+0x1a8>
    1384:	ldr	x1, [sp, #120]
    1388:	ldxr	w0, [x1]
    138c:	stlxr	w2, wzr, [x1]
    1390:	cbnz	w2, 1388 <gomp_exit_data+0x2e8>
    1394:	tbnz	w0, #31, 13c0 <gomp_exit_data+0x320>
    1398:	adrp	x4, 0 <omp_target_memcpy_rect_worker>
    139c:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
    13a0:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    13a4:	add	x4, x4, #0x0
    13a8:	add	x1, x1, #0x0
    13ac:	add	x6, x5, x28
    13b0:	add	x0, x0, #0x0
    13b4:	add	x3, x19, x28
    13b8:	mov	x2, x19
    13bc:	bl	0 <gomp_fatal>
    13c0:	ldr	x0, [sp, #120]
    13c4:	str	x5, [sp, #104]
    13c8:	bl	0 <gomp_mutex_unlock_slow>
    13cc:	ldr	x5, [sp, #104]
    13d0:	b	1398 <gomp_exit_data+0x2f8>
    13d4:	ldr	x0, [sp, #120]
    13d8:	bl	0 <gomp_mutex_lock_slow>
    13dc:	b	10f0 <gomp_exit_data+0x50>
    13e0:	ldr	x0, [sp, #120]
    13e4:	bl	0 <gomp_mutex_unlock_slow>
    13e8:	b	1150 <gomp_exit_data+0xb0>
    13ec:	nop

00000000000013f0 <gomp_map_fields_existing>:
    13f0:	stp	x29, x30, [sp, #-176]!
    13f4:	mov	x29, sp
    13f8:	stp	x19, x20, [sp, #16]
    13fc:	mov	x19, x3
    1400:	mov	x20, x2
    1404:	ldr	x8, [x4, x3, lsl #3]
    1408:	stp	x23, x24, [sp, #48]
    140c:	ldr	x3, [x5, x3, lsl #3]
    1410:	stp	x25, x26, [sp, #64]
    1414:	mov	x26, x6
    1418:	ldr	x24, [x0, #56]
    141c:	add	x3, x3, x8
    1420:	mov	x25, x0
    1424:	stp	x21, x22, [sp, #32]
    1428:	add	x23, x24, #0xa0
    142c:	mov	x21, x1
    1430:	mov	x0, x23
    1434:	add	x1, sp, #0x78
    1438:	stp	x27, x28, [sp, #80]
    143c:	mov	x27, x4
    1440:	mov	x28, x5
    1444:	str	x7, [sp, #104]
    1448:	stp	x8, x3, [sp, #120]
    144c:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1450:	ldrh	w26, [x26, w19, sxtw #1]
    1454:	cbz	x0, 146c <gomp_map_fields_existing+0x7c>
    1458:	mov	x22, x0
    145c:	ldr	x0, [x21, #16]
    1460:	ldr	x4, [x22, #16]
    1464:	cmp	x4, x0
    1468:	b.eq	1658 <gomp_map_fields_existing+0x268>  // b.none
    146c:	ldr	x0, [x28, x19, lsl #3]
    1470:	cbnz	x0, 1730 <gomp_map_fields_existing+0x340>
    1474:	add	x20, x27, x20, lsl #3
    1478:	ldr	x0, [sp, #120]
    147c:	ldur	x1, [x20, #-8]
    1480:	cmp	x1, x0
    1484:	b.cc	157c <gomp_map_fields_existing+0x18c>  // b.lo, b.ul, b.last
    1488:	ldr	x4, [sp, #128]
    148c:	add	x4, x4, #0x1
    1490:	add	x1, sp, #0x78
    1494:	mov	x0, x23
    1498:	str	x4, [sp, #128]
    149c:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    14a0:	mov	x20, x0
    14a4:	ldr	x4, [sp, #128]
    14a8:	sub	x4, x4, #0x1
    14ac:	str	x4, [sp, #128]
    14b0:	cbz	x0, 1730 <gomp_map_fields_existing+0x340>
    14b4:	ldr	x5, [x0, #16]
    14b8:	ldr	x0, [x21, #16]
    14bc:	cmp	x5, x0
    14c0:	b.ne	1730 <gomp_map_fields_existing+0x340>  // b.any
    14c4:	ldr	x6, [x20]
    14c8:	ldr	x2, [x21]
    14cc:	ldr	x1, [x20, #24]
    14d0:	sub	x2, x6, x2
    14d4:	ldr	x0, [x21, #24]
    14d8:	sub	x0, x1, x0
    14dc:	cmp	x2, x0
    14e0:	b.ne	1730 <gomp_map_fields_existing+0x340>  // b.any
    14e4:	and	w0, w26, #0xff
    14e8:	add	x19, x25, x19, lsl #5
    14ec:	and	w7, w26, #0xe
    14f0:	sub	w3, w0, #0x12
    14f4:	ldr	x2, [sp, #120]
    14f8:	cmp	w7, #0x2
    14fc:	and	w3, w3, #0xff
    1500:	cset	w9, eq  // eq = none
    1504:	cmp	w3, #0x1
    1508:	sub	x7, x2, x6
    150c:	cset	w8, ls  // ls = plast
    1510:	sub	x3, x4, x2
    1514:	str	x20, [x19, #64]
    1518:	tst	x26, #0x80
    151c:	strb	w9, [x19, #72]
    1520:	add	x1, x1, x2
    1524:	strb	w8, [x19, #73]
    1528:	ccmp	x6, x2, #0x2, eq  // eq = none
    152c:	stp	x7, x3, [x19, #80]
    1530:	b.hi	1754 <gomp_map_fields_existing+0x364>  // b.pmore
    1534:	ldr	x7, [x20, #8]
    1538:	cmp	x4, x7
    153c:	b.hi	1754 <gomp_map_fields_existing+0x364>  // b.pmore
    1540:	and	w0, w0, #0xfffffffd
    1544:	cmp	w0, #0x11
    1548:	b.eq	16f8 <gomp_map_fields_existing+0x308>  // b.none
    154c:	ldr	x0, [x20, #32]
    1550:	cmn	x0, #0x1
    1554:	b.eq	1560 <gomp_map_fields_existing+0x170>  // b.none
    1558:	add	x0, x0, #0x1
    155c:	str	x0, [x20, #32]
    1560:	ldp	x19, x20, [sp, #16]
    1564:	ldp	x21, x22, [sp, #32]
    1568:	ldp	x23, x24, [sp, #48]
    156c:	ldp	x25, x26, [sp, #64]
    1570:	ldp	x27, x28, [sp, #80]
    1574:	ldp	x29, x30, [sp], #176
    1578:	ret
    157c:	sub	x2, x0, #0x1
    1580:	add	x1, sp, #0x78
    1584:	mov	x0, x23
    1588:	str	x2, [sp, #120]
    158c:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1590:	mov	x20, x0
    1594:	ldr	x2, [sp, #120]
    1598:	add	x2, x2, #0x1
    159c:	str	x2, [sp, #120]
    15a0:	cbz	x0, 1488 <gomp_map_fields_existing+0x98>
    15a4:	ldr	x0, [x0, #16]
    15a8:	ldr	x1, [x21, #16]
    15ac:	ldr	x4, [sp, #128]
    15b0:	cmp	x0, x1
    15b4:	b.ne	148c <gomp_map_fields_existing+0x9c>  // b.any
    15b8:	ldr	x7, [x20]
    15bc:	ldr	x6, [x21]
    15c0:	ldr	x3, [x20, #24]
    15c4:	sub	x6, x7, x6
    15c8:	ldr	x8, [x21, #24]
    15cc:	add	x1, x2, x3
    15d0:	sub	x3, x3, x8
    15d4:	cmp	x6, x3
    15d8:	b.ne	148c <gomp_map_fields_existing+0x9c>  // b.any
    15dc:	and	w5, w26, #0xff
    15e0:	add	x19, x25, x19, lsl #5
    15e4:	and	w6, w26, #0xe
    15e8:	sub	w3, w5, #0x12
    15ec:	cmp	w6, #0x2
    15f0:	and	w3, w3, #0xff
    15f4:	cset	w9, eq  // eq = none
    15f8:	cmp	w3, #0x1
    15fc:	cset	w8, ls  // ls = plast
    1600:	sub	x6, x2, x7
    1604:	sub	x3, x4, x2
    1608:	str	x20, [x19, #64]
    160c:	strb	w9, [x19, #72]
    1610:	tst	x26, #0x80
    1614:	strb	w8, [x19, #73]
    1618:	ccmp	x2, x7, #0x0, eq  // eq = none
    161c:	stp	x6, x3, [x19, #80]
    1620:	b.cc	17a0 <gomp_map_fields_existing+0x3b0>  // b.lo, b.ul, b.last
    1624:	ldr	x6, [x20, #8]
    1628:	cmp	x6, x4
    162c:	b.cc	17a0 <gomp_map_fields_existing+0x3b0>  // b.lo, b.ul, b.last
    1630:	and	w5, w5, #0xfffffffd
    1634:	cmp	w5, #0x11
    1638:	b.ne	154c <gomp_map_fields_existing+0x15c>  // b.any
    163c:	ldr	x0, [x0, #16]
    1640:	ldr	x4, [sp, #104]
    1644:	sub	x7, x0, x7
    1648:	add	x1, x7, x1
    164c:	mov	x0, x24
    1650:	bl	520 <gomp_copy_host2dev>
    1654:	b	154c <gomp_map_fields_existing+0x15c>
    1658:	ldr	x1, [x21]
    165c:	ldr	x7, [x22]
    1660:	ldr	x0, [x21, #24]
    1664:	sub	x1, x7, x1
    1668:	ldr	x6, [x22, #24]
    166c:	sub	x0, x6, x0
    1670:	cmp	x1, x0
    1674:	b.ne	146c <gomp_map_fields_existing+0x7c>  // b.any
    1678:	ldp	x2, x5, [sp, #120]
    167c:	and	w0, w26, #0xff
    1680:	add	x19, x25, x19, lsl #5
    1684:	and	w3, w26, #0xe
    1688:	sub	w1, w0, #0x12
    168c:	cmp	w3, #0x2
    1690:	and	w1, w1, #0xff
    1694:	cset	w9, eq  // eq = none
    1698:	cmp	w1, #0x1
    169c:	str	x22, [x19, #64]
    16a0:	cset	w8, ls  // ls = plast
    16a4:	sub	x1, x2, x7
    16a8:	sub	x3, x5, x2
    16ac:	strb	w9, [x19, #72]
    16b0:	strb	w8, [x19, #73]
    16b4:	tst	x26, #0x80
    16b8:	stp	x1, x3, [x19, #80]
    16bc:	add	x6, x6, x2
    16c0:	ccmp	x7, x2, #0x2, eq  // eq = none
    16c4:	b.hi	178c <gomp_map_fields_existing+0x39c>  // b.pmore
    16c8:	ldr	x1, [x22, #8]
    16cc:	cmp	x5, x1
    16d0:	b.hi	178c <gomp_map_fields_existing+0x39c>  // b.pmore
    16d4:	and	w0, w0, #0xfffffffd
    16d8:	cmp	w0, #0x11
    16dc:	b.eq	1714 <gomp_map_fields_existing+0x324>  // b.none
    16e0:	ldr	x0, [x22, #32]
    16e4:	cmn	x0, #0x1
    16e8:	b.eq	1560 <gomp_map_fields_existing+0x170>  // b.none
    16ec:	add	x0, x0, #0x1
    16f0:	str	x0, [x22, #32]
    16f4:	b	1560 <gomp_map_fields_existing+0x170>
    16f8:	ldr	x0, [x5, #16]
    16fc:	ldr	x4, [sp, #104]
    1700:	sub	x6, x0, x6
    1704:	add	x1, x6, x1
    1708:	mov	x0, x24
    170c:	bl	520 <gomp_copy_host2dev>
    1710:	b	154c <gomp_map_fields_existing+0x15c>
    1714:	ldr	x1, [x4, #16]
    1718:	mov	x0, x24
    171c:	ldr	x4, [sp, #104]
    1720:	sub	x1, x1, x7
    1724:	add	x1, x1, x6
    1728:	bl	520 <gomp_copy_host2dev>
    172c:	b	16e0 <gomp_map_fields_existing+0x2f0>
    1730:	add	x0, x24, #0xa8
    1734:	ldxr	w1, [x0]
    1738:	stlxr	w2, wzr, [x0]
    173c:	cbnz	w2, 1734 <gomp_map_fields_existing+0x344>
    1740:	tbnz	w1, #31, 177c <gomp_map_fields_existing+0x38c>
    1744:	ldp	x1, x2, [sp, #120]
    1748:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    174c:	add	x0, x0, #0x0
    1750:	bl	0 <gomp_fatal>
    1754:	add	x0, x24, #0xa8
    1758:	ldxr	w1, [x0]
    175c:	stlxr	w2, wzr, [x0]
    1760:	cbnz	w2, 1758 <gomp_map_fields_existing+0x368>
    1764:	tbnz	w1, #31, 1784 <gomp_map_fields_existing+0x394>
    1768:	ldp	x3, x4, [x20]
    176c:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    1770:	ldp	x1, x2, [sp, #120]
    1774:	add	x0, x0, #0x0
    1778:	bl	0 <gomp_fatal>
    177c:	bl	0 <gomp_mutex_unlock_slow>
    1780:	b	1744 <gomp_map_fields_existing+0x354>
    1784:	bl	0 <gomp_mutex_unlock_slow>
    1788:	b	1768 <gomp_map_fields_existing+0x378>
    178c:	mov	x1, x22
    1790:	mov	x0, x24
    1794:	add	x2, sp, #0x78
    1798:	add	x3, sp, #0x80
    179c:	bl	a30 <gomp_map_vars_existing.isra.0.part.0>
    17a0:	add	x0, x24, #0xa8
    17a4:	ldxr	w1, [x0]
    17a8:	stlxr	w2, wzr, [x0]
    17ac:	cbz	w2, 1764 <gomp_map_fields_existing+0x374>
    17b0:	b	17a4 <gomp_map_fields_existing+0x3b4>
    17b4:	nop

00000000000017b8 <gomp_init_targets_once>:
    17b8:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    17bc:	add	x0, x0, #0x0
    17c0:	add	x0, x0, #0x14
    17c4:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
    17c8:	add	x1, x1, #0x0
    17cc:	b	0 <pthread_once>

00000000000017d0 <gomp_get_num_devices>:
    17d0:	stp	x29, x30, [sp, #-32]!
    17d4:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
    17d8:	add	x1, x1, #0x0
    17dc:	mov	x29, sp
    17e0:	str	x19, [sp, #16]
    17e4:	adrp	x19, 0 <omp_target_memcpy_rect_worker>
    17e8:	add	x19, x19, #0x0
    17ec:	add	x0, x19, #0x14
    17f0:	bl	0 <pthread_once>
    17f4:	ldr	w0, [x19, #4]
    17f8:	ldr	x19, [sp, #16]
    17fc:	ldp	x29, x30, [sp], #32
    1800:	ret
    1804:	nop

0000000000001808 <gomp_map_vars>:
    1808:	stp	x29, x30, [sp, #-352]!
    180c:	mov	x29, sp
    1810:	stp	x19, x20, [sp, #16]
    1814:	mov	x19, x1
    1818:	mov	x20, x5
    181c:	stp	x21, x22, [sp, #32]
    1820:	mov	x22, x4
    1824:	stp	x23, x24, [sp, #48]
    1828:	ands	w23, w6, #0xff
    182c:	stp	x25, x26, [sp, #64]
    1830:	mov	x25, x0
    1834:	stp	x27, x28, [sp, #80]
    1838:	mov	x27, x2
    183c:	str	x3, [x29, #168]
    1840:	str	w7, [x29, #184]
    1844:	b.eq	1b00 <gomp_map_vars+0x2f8>  // b.none
    1848:	mov	w0, #0xffffffff            	// #-1
    184c:	mov	w21, #0xff                  	// #255
    1850:	str	w0, [x29, #140]
    1854:	mov	w0, #0x8                   	// #8
    1858:	str	w0, [x29, #188]
    185c:	add	x0, x19, #0x2
    1860:	lsl	x0, x0, #5
    1864:	bl	0 <gomp_malloc>
    1868:	ldr	w1, [x29, #184]
    186c:	mov	x26, x0
    1870:	cmp	w1, #0x3
    1874:	cset	x0, ne  // ne = any
    1878:	str	x0, [x26]
    187c:	stp	x19, x25, [x26, #48]
    1880:	cbz	x19, 2124 <gomp_map_vars+0x91c>
    1884:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    1888:	str	xzr, [x29, #256]
    188c:	str	xzr, [x29, #272]
    1890:	ldr	q0, [x0]
    1894:	ldr	w0, [x29, #184]
    1898:	cmp	w0, #0x1
    189c:	cset	w0, eq  // eq = none
    18a0:	str	w0, [x29, #104]
    18a4:	cmp	w0, #0x0
    18a8:	add	x0, x29, #0x200
    18ac:	ccmp	x19, #0x1, #0x2, eq  // eq = none
    18b0:	stur	q0, [x0, #-232]
    18b4:	b.hi	1b18 <gomp_map_vars+0x310>  // b.pmore
    18b8:	mov	x0, #0x8                   	// #8
    18bc:	str	xzr, [x29, #192]
    18c0:	str	x0, [x29, #208]
    18c4:	add	x0, x25, #0xa8
    18c8:	mov	x2, x0
    18cc:	mov	w0, #0x1                   	// #1
    18d0:	str	x2, [x29, #128]
    18d4:	ldaxr	w1, [x2]
    18d8:	cbnz	w1, 18e4 <gomp_map_vars+0xdc>
    18dc:	stxr	w3, w0, [x2]
    18e0:	cbnz	w3, 18d4 <gomp_map_vars+0xcc>
    18e4:	cmp	w1, #0x0
    18e8:	b.ne	2f9c <gomp_map_vars+0x1794>  // b.any
    18ec:	ldr	w0, [x25, #172]
    18f0:	cmp	w0, #0x2
    18f4:	b.eq	2e7c <gomp_map_vars+0x1674>  // b.none
    18f8:	add	x0, x25, #0xa0
    18fc:	mov	x24, #0x0                   	// #0
    1900:	mov	x28, #0x5                   	// #5
    1904:	str	x25, [x29, #120]
    1908:	mov	x25, x20
    190c:	mov	x20, x27
    1910:	mov	x27, x24
    1914:	stp	x0, x19, [x29, #224]
    1918:	movk	x28, #0x4, lsl #16
    191c:	ldr	x0, [x29, #192]
    1920:	str	wzr, [x29, #160]
    1924:	str	xzr, [x29, #200]
    1928:	str	x0, [x29, #216]
    192c:	add	x0, x26, #0x40
    1930:	str	x0, [x29, #112]
    1934:	nop
    1938:	sxtw	x0, w27
    193c:	cbz	w23, 1b7c <gomp_map_vars+0x374>
    1940:	ldrh	w24, [x25, x0, lsl #1]
    1944:	lsl	x2, x27, #3
    1948:	ldr	x0, [x20, x27, lsl #3]
    194c:	add	x3, x20, x2
    1950:	cbz	x0, 1b90 <gomp_map_vars+0x388>
    1954:	and	w5, w21, w24
    1958:	cmp	w5, #0xd
    195c:	b.eq	1b90 <gomp_map_vars+0x388>  // b.none
    1960:	cmp	w5, #0xe
    1964:	b.eq	1d40 <gomp_map_vars+0x538>  // b.none
    1968:	cmp	w5, #0x1c
    196c:	b.eq	1da4 <gomp_map_vars+0x59c>  // b.none
    1970:	cmp	w5, #0x1d
    1974:	b.eq	1e78 <gomp_map_vars+0x670>  // b.none
    1978:	str	x0, [x29, #296]
    197c:	cmp	w5, #0x4
    1980:	b.eq	1ba8 <gomp_map_vars+0x3a0>  // b.none
    1984:	ldr	x2, [x22, x2]
    1988:	cmp	w5, #0xc
    198c:	add	x1, x0, x2
    1990:	str	x1, [x29, #304]
    1994:	b.eq	1ee0 <gomp_map_vars+0x6d8>  // b.none
    1998:	cmp	w5, #0xf
    199c:	b.ne	1bb0 <gomp_map_vars+0x3a8>  // b.any
    19a0:	str	w5, [x29, #176]
    19a4:	cmp	x0, x1
    19a8:	b.eq	1e9c <gomp_map_vars+0x694>  // b.none
    19ac:	ldr	x0, [x29, #224]
    19b0:	add	x1, x29, #0x128
    19b4:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    19b8:	mov	x10, x0
    19bc:	ldr	w5, [x29, #176]
    19c0:	cbz	x10, 1ec8 <gomp_map_vars+0x6c0>
    19c4:	ldp	x2, x1, [x29, #296]
    19c8:	ldr	x0, [x10, #32]
    19cc:	cmn	x0, #0x2
    19d0:	sub	x3, x1, x2
    19d4:	b.eq	1bd4 <gomp_map_vars+0x3cc>  // b.none
    19d8:	ldr	w4, [x29, #140]
    19dc:	add	x5, x26, x27, lsl #5
    19e0:	and	w7, w4, w24
    19e4:	and	w11, w7, #0xff
    19e8:	and	w12, w7, #0xe
    19ec:	sub	w11, w11, #0x12
    19f0:	cmp	w12, #0x2
    19f4:	and	w11, w11, #0xff
    19f8:	cset	w13, eq  // eq = none
    19fc:	ldr	x12, [x10]
    1a00:	cmp	w11, #0x1
    1a04:	cset	w11, ls  // ls = plast
    1a08:	sxtb	w7, w7
    1a0c:	str	x10, [x5, #64]
    1a10:	cmp	w7, #0x0
    1a14:	strb	w13, [x5, #72]
    1a18:	ccmp	x12, x2, #0x2, ge  // ge = tcont
    1a1c:	strb	w11, [x5, #73]
    1a20:	sub	x11, x2, x12
    1a24:	stp	x11, x3, [x5, #80]
    1a28:	b.hi	2f70 <gomp_map_vars+0x1768>  // b.pmore
    1a2c:	ldr	x5, [x10, #8]
    1a30:	cmp	x5, x1
    1a34:	b.cc	2f70 <gomp_map_vars+0x1768>  // b.lo, b.ul, b.last
    1a38:	and	w7, w7, #0xfffffffd
    1a3c:	cmp	w7, #0x11
    1a40:	b.eq	212c <gomp_map_vars+0x924>  // b.none
    1a44:	add	x27, x27, #0x1
    1a48:	cmn	x0, #0x1
    1a4c:	b.eq	1a58 <gomp_map_vars+0x250>  // b.none
    1a50:	add	x0, x0, #0x1
    1a54:	str	x0, [x10, #32]
    1a58:	ldr	x0, [x29, #232]
    1a5c:	cmp	x0, x27
    1a60:	b.hi	1938 <gomp_map_vars+0x130>  // b.pmore
    1a64:	ldr	x0, [x29, #168]
    1a68:	mov	x27, x20
    1a6c:	mov	x20, x25
    1a70:	ldr	x25, [x29, #120]
    1a74:	ldr	x19, [x29, #232]
    1a78:	cbz	x0, 2460 <gomp_map_vars+0xc58>
    1a7c:	cmp	x19, #0x1
    1a80:	b.ne	308c <gomp_map_vars+0x1884>  // b.any
    1a84:	ldr	x1, [x0]
    1a88:	stp	xzr, x1, [x26, #8]
    1a8c:	ldr	x0, [x22]
    1a90:	mov	x28, x1
    1a94:	ldr	x2, [x29, #200]
    1a98:	add	x0, x1, x0
    1a9c:	stp	x0, x1, [x26, #24]
    1aa0:	ldr	w0, [x29, #160]
    1aa4:	cmp	x2, #0x0
    1aa8:	ccmp	w0, #0x0, #0x0, eq  // eq = none
    1aac:	b.ne	21bc <gomp_map_vars+0x9b4>  // b.any
    1ab0:	ldr	w0, [x29, #184]
    1ab4:	cmp	w0, #0x1
    1ab8:	b.eq	2540 <gomp_map_vars+0xd38>  // b.none
    1abc:	ldr	w0, [x29, #184]
    1ac0:	cmp	w0, #0x3
    1ac4:	b.eq	1b64 <gomp_map_vars+0x35c>  // b.none
    1ac8:	ldr	x1, [x29, #128]
    1acc:	ldxr	w0, [x1]
    1ad0:	stlxr	w2, wzr, [x1]
    1ad4:	cbnz	w2, 1acc <gomp_map_vars+0x2c4>
    1ad8:	tbnz	w0, #31, 2cd4 <gomp_map_vars+0x14cc>
    1adc:	mov	sp, x29
    1ae0:	mov	x0, x26
    1ae4:	ldp	x19, x20, [sp, #16]
    1ae8:	ldp	x21, x22, [sp, #32]
    1aec:	ldp	x23, x24, [sp, #48]
    1af0:	ldp	x25, x26, [sp, #64]
    1af4:	ldp	x27, x28, [sp, #80]
    1af8:	ldp	x29, x30, [sp], #352
    1afc:	ret
    1b00:	mov	w0, #0x7                   	// #7
    1b04:	mov	w21, w0
    1b08:	str	w0, [x29, #140]
    1b0c:	mov	w0, #0x3                   	// #3
    1b10:	str	w0, [x29, #188]
    1b14:	b	185c <gomp_map_vars+0x54>
    1b18:	lsl	x0, x19, #4
    1b1c:	ldr	w1, [x29, #184]
    1b20:	add	x0, x0, #0x10
    1b24:	sub	sp, sp, x0
    1b28:	cmp	w1, #0x1
    1b2c:	mov	x0, sp
    1b30:	str	x0, [x29, #272]
    1b34:	b.ne	2b14 <gomp_map_vars+0x130c>  // b.any
    1b38:	cmp	x19, #0x1
    1b3c:	lsl	x3, x19, #3
    1b40:	cset	x1, hi  // hi = pmore
    1b44:	mov	x2, #0x1                   	// #1
    1b48:	mov	x4, #0x20                  	// #32
    1b4c:	add	x1, x1, x2
    1b50:	stp	xzr, x3, [x0]
    1b54:	str	x3, [x29, #192]
    1b58:	str	x4, [x29, #208]
    1b5c:	stp	x2, x1, [x29, #280]
    1b60:	b	18c4 <gomp_map_vars+0xbc>
    1b64:	ldr	x0, [x26]
    1b68:	cbnz	x0, 1ac8 <gomp_map_vars+0x2c0>
    1b6c:	mov	x0, x26
    1b70:	mov	x26, #0x0                   	// #0
    1b74:	bl	0 <free>
    1b78:	b	1ac8 <gomp_map_vars+0x2c0>
    1b7c:	ldrb	w24, [x25, x0]
    1b80:	lsl	x2, x27, #3
    1b84:	ldr	x0, [x20, x27, lsl #3]
    1b88:	add	x3, x20, x2
    1b8c:	cbnz	x0, 1954 <gomp_map_vars+0x14c>
    1b90:	add	x1, x26, x27, lsl #5
    1b94:	mov	x2, #0xffffffffffffffff    	// #-1
    1b98:	add	x27, x27, #0x1
    1b9c:	str	xzr, [x1, #64]
    1ba0:	str	x2, [x1, #80]
    1ba4:	b	1a58 <gomp_map_vars+0x250>
    1ba8:	add	x0, x0, #0x8
    1bac:	str	x0, [x29, #304]
    1bb0:	ldr	x0, [x29, #224]
    1bb4:	add	x1, x29, #0x128
    1bb8:	str	w5, [x29, #176]
    1bbc:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1bc0:	mov	x10, x0
    1bc4:	ldr	w5, [x29, #176]
    1bc8:	cbnz	x0, 19c4 <gomp_map_vars+0x1bc>
    1bcc:	ldp	x2, x1, [x29, #296]
    1bd0:	sub	x3, x1, x2
    1bd4:	ldrb	w0, [x29, #188]
    1bd8:	add	x10, x26, x27, lsl #5
    1bdc:	ldp	x6, x4, [x29, #200]
    1be0:	asr	w7, w24, w0
    1be4:	str	xzr, [x10, #64]
    1be8:	ldr	x0, [x29, #216]
    1bec:	sub	x24, x0, #0x1
    1bf0:	mov	x0, #0x1                   	// #1
    1bf4:	lsl	x7, x0, x7
    1bf8:	cmp	x4, x7
    1bfc:	add	x24, x24, x7
    1c00:	neg	x10, x7
    1c04:	csel	x4, x4, x7, cs  // cs = hs, nlast
    1c08:	and	x10, x10, x24
    1c0c:	add	x6, x6, x0
    1c10:	stp	x6, x4, [x29, #200]
    1c14:	add	x4, x10, x3
    1c18:	str	x4, [x29, #216]
    1c1c:	cmp	w5, #0x12
    1c20:	b.gt	1c44 <gomp_map_vars+0x43c>
    1c24:	lsl	x0, x0, x5
    1c28:	tst	x0, x28
    1c2c:	b.ne	1c8c <gomp_map_vars+0x484>  // b.any
    1c30:	sub	x3, x3, #0x1
    1c34:	mov	x0, #0x7fff                	// #32767
    1c38:	cmp	x3, x0
    1c3c:	b.ls	1c5c <gomp_map_vars+0x454>  // b.plast
    1c40:	b	1c8c <gomp_map_vars+0x484>
    1c44:	cmp	w5, #0x80
    1c48:	b.eq	1e70 <gomp_map_vars+0x668>  // b.none
    1c4c:	sub	x3, x3, #0x1
    1c50:	mov	x0, #0x7fff                	// #32767
    1c54:	cmp	x3, x0
    1c58:	b.hi	1e70 <gomp_map_vars+0x668>  // b.pmore
    1c5c:	ldr	x0, [x29, #280]
    1c60:	cmp	x0, #0x0
    1c64:	cbnz	x0, 217c <gomp_map_vars+0x974>
    1c68:	ldr	x7, [x29, #272]
    1c6c:	mov	x0, #0x1                   	// #1
    1c70:	mov	x3, #0x0                   	// #0
    1c74:	add	x11, x7, x3
    1c78:	str	x10, [x7, x3]
    1c7c:	ldr	x4, [x29, #216]
    1c80:	mov	x3, #0x1                   	// #1
    1c84:	str	x4, [x11, #8]
    1c88:	stp	x0, x3, [x29, #280]
    1c8c:	add	x27, x27, #0x1
    1c90:	cmp	w5, #0x5
    1c94:	b.ne	1a58 <gomp_map_vars+0x250>  // b.any
    1c98:	ldr	x3, [x29, #232]
    1c9c:	cmp	x3, x27
    1ca0:	b.ls	1a64 <gomp_map_vars+0x25c>  // b.plast
    1ca4:	ldr	x4, [x29, #112]
    1ca8:	cbnz	w23, 1d2c <gomp_map_vars+0x524>
    1cac:	ldrb	w0, [x25, w27, sxtw]
    1cb0:	and	w0, w0, w21
    1cb4:	cmp	w0, #0x4
    1cb8:	b.ne	1a58 <gomp_map_vars+0x250>  // b.any
    1cbc:	nop
    1cc0:	ldr	x0, [x20, x27, lsl #3]
    1cc4:	cmp	x0, x2
    1cc8:	b.cc	1a58 <gomp_map_vars+0x250>  // b.lo, b.ul, b.last
    1ccc:	add	x0, x0, #0x8
    1cd0:	cmp	x0, x1
    1cd4:	b.hi	1a58 <gomp_map_vars+0x250>  // b.pmore
    1cd8:	lsl	x0, x27, #5
    1cdc:	add	x27, x27, #0x1
    1ce0:	cmp	x3, x27
    1ce4:	str	xzr, [x4, x0]
    1ce8:	b.ls	1a58 <gomp_map_vars+0x250>  // b.plast
    1cec:	ldrb	w0, [x25, w27, sxtw]
    1cf0:	and	w0, w0, w21
    1cf4:	cmp	w0, #0x4
    1cf8:	b.eq	1cc0 <gomp_map_vars+0x4b8>  // b.none
    1cfc:	b	1a58 <gomp_map_vars+0x250>
    1d00:	ldr	x0, [x20, x27, lsl #3]
    1d04:	cmp	x0, x2
    1d08:	b.cc	1a58 <gomp_map_vars+0x250>  // b.lo, b.ul, b.last
    1d0c:	add	x0, x0, #0x8
    1d10:	cmp	x0, x1
    1d14:	b.hi	1a58 <gomp_map_vars+0x250>  // b.pmore
    1d18:	lsl	x0, x27, #5
    1d1c:	add	x27, x27, #0x1
    1d20:	cmp	x3, x27
    1d24:	str	xzr, [x4, x0]
    1d28:	b.ls	1a58 <gomp_map_vars+0x250>  // b.plast
    1d2c:	ldrh	w0, [x25, w27, sxtw #1]
    1d30:	and	w0, w0, w21
    1d34:	cmp	w0, #0x4
    1d38:	b.eq	1d00 <gomp_map_vars+0x4f8>  // b.none
    1d3c:	b	1a58 <gomp_map_vars+0x250>
    1d40:	add	x3, x0, #0x1
    1d44:	stp	x0, x3, [x29, #296]
    1d48:	add	x1, x29, #0x128
    1d4c:	ldr	x0, [x29, #224]
    1d50:	str	x2, [x29, #176]
    1d54:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1d58:	ldp	x3, x1, [x29, #296]
    1d5c:	ldr	x2, [x29, #176]
    1d60:	sub	x1, x1, #0x1
    1d64:	str	x1, [x29, #304]
    1d68:	cbz	x0, 22dc <gomp_map_vars+0xad4>
    1d6c:	ldp	x1, x7, [x0, #16]
    1d70:	add	x10, x26, x27, lsl #5
    1d74:	ldr	x5, [x0]
    1d78:	add	x27, x27, #0x1
    1d7c:	sub	x3, x3, x5
    1d80:	str	x3, [x29, #296]
    1d84:	ldr	x1, [x1, #16]
    1d88:	str	xzr, [x10, #64]
    1d8c:	add	x0, x3, x1
    1d90:	mov	x1, #0xffffffffffffffff    	// #-1
    1d94:	add	x0, x0, x7
    1d98:	str	x0, [x20, x2]
    1d9c:	str	x1, [x10, #80]
    1da0:	b	1a58 <gomp_map_vars+0x250>
    1da4:	ldr	x11, [x22, x2]
    1da8:	str	x0, [x29, #296]
    1dac:	add	x2, x26, x27, lsl #5
    1db0:	mov	x8, #0xfffffffffffffffd    	// #-3
    1db4:	add	x19, x11, x27
    1db8:	mov	x1, x2
    1dbc:	stp	x3, x11, [x29, #144]
    1dc0:	ldr	x5, [x22, x19, lsl #3]
    1dc4:	str	xzr, [x2, #64]
    1dc8:	ldr	x0, [x20, x19, lsl #3]
    1dcc:	add	x2, x27, #0x1
    1dd0:	str	x8, [x1, #80]
    1dd4:	add	x1, x29, #0x128
    1dd8:	add	x0, x0, x5
    1ddc:	str	x0, [x29, #304]
    1de0:	ldr	x0, [x29, #224]
    1de4:	str	x2, [x29, #176]
    1de8:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1dec:	mov	x1, x0
    1df0:	ldp	x3, x11, [x29, #144]
    1df4:	ldr	x2, [x29, #176]
    1df8:	cbz	x0, 1fb0 <gomp_map_vars+0x7a8>
    1dfc:	mov	x27, x2
    1e00:	cmp	x2, x19
    1e04:	b.hi	1a58 <gomp_map_vars+0x250>  // b.pmore
    1e08:	mov	w0, w23
    1e0c:	mov	x24, x2
    1e10:	mov	x23, x25
    1e14:	mov	w25, w0
    1e18:	str	w21, [x29, #176]
    1e1c:	mov	x21, x20
    1e20:	mov	x20, x1
    1e24:	nop
    1e28:	mov	x3, x27
    1e2c:	mov	x6, x23
    1e30:	mov	x5, x22
    1e34:	mov	x4, x21
    1e38:	mov	x2, x24
    1e3c:	add	x27, x27, #0x1
    1e40:	mov	x1, x20
    1e44:	mov	x0, x26
    1e48:	mov	x7, #0x0                   	// #0
    1e4c:	bl	13f0 <gomp_map_fields_existing>
    1e50:	cmp	x19, x27
    1e54:	b.cs	1e28 <gomp_map_vars+0x620>  // b.hs, b.nlast
    1e58:	mov	w0, w25
    1e5c:	mov	x20, x21
    1e60:	mov	x25, x23
    1e64:	ldr	w21, [x29, #176]
    1e68:	mov	w23, w0
    1e6c:	b	1a58 <gomp_map_vars+0x250>
    1e70:	add	x27, x27, #0x1
    1e74:	b	1a58 <gomp_map_vars+0x250>
    1e78:	add	x1, x26, x27, lsl #5
    1e7c:	mov	x2, #0xfffffffffffffffe    	// #-2
    1e80:	mov	x0, x1
    1e84:	add	x27, x27, #0x1
    1e88:	str	xzr, [x1, #64]
    1e8c:	mov	w1, #0x1                   	// #1
    1e90:	str	x2, [x0, #80]
    1e94:	str	w1, [x29, #160]
    1e98:	b	1a58 <gomp_map_vars+0x250>
    1e9c:	add	x0, x0, #0x1
    1ea0:	str	x0, [x29, #304]
    1ea4:	ldr	x0, [x29, #224]
    1ea8:	add	x1, x29, #0x128
    1eac:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1eb0:	mov	x10, x0
    1eb4:	ldr	x1, [x29, #304]
    1eb8:	ldr	w5, [x29, #176]
    1ebc:	sub	x1, x1, #0x1
    1ec0:	str	x1, [x29, #304]
    1ec4:	cbnz	x10, 19c4 <gomp_map_vars+0x1bc>
    1ec8:	add	x1, x26, x27, lsl #5
    1ecc:	mov	x2, #0xfffffffffffffffe    	// #-2
    1ed0:	add	x27, x27, #0x1
    1ed4:	str	xzr, [x1, #64]
    1ed8:	str	x2, [x1, #80]
    1edc:	b	1a58 <gomp_map_vars+0x250>
    1ee0:	ldp	x4, x1, [x29, #208]
    1ee4:	add	x5, x26, x27, lsl #5
    1ee8:	ldrb	w0, [x29, #188]
    1eec:	mov	x7, #0x1                   	// #1
    1ef0:	str	xzr, [x5, #64]
    1ef4:	asr	w0, w24, w0
    1ef8:	sub	x1, x1, #0x1
    1efc:	lsl	x0, x7, x0
    1f00:	add	x3, x1, x0
    1f04:	cmp	x4, x0
    1f08:	neg	x1, x0
    1f0c:	csel	x0, x4, x0, cs  // cs = hs, nlast
    1f10:	and	x1, x1, x3
    1f14:	str	x0, [x29, #208]
    1f18:	add	x0, x2, x1
    1f1c:	str	x0, [x29, #216]
    1f20:	sub	x3, x2, #0x1
    1f24:	mov	x0, #0x7fff                	// #32767
    1f28:	cmp	x3, x0
    1f2c:	b.hi	1fa0 <gomp_map_vars+0x798>  // b.pmore
    1f30:	ldr	x0, [x29, #280]
    1f34:	cmp	x0, #0x0
    1f38:	cbz	x0, 1f7c <gomp_map_vars+0x774>
    1f3c:	b.lt	1fa0 <gomp_map_vars+0x798>  // b.tstop
    1f40:	ldr	x3, [x29, #272]
    1f44:	lsl	x2, x0, #4
    1f48:	sub	x5, x2, #0x10
    1f4c:	add	x5, x3, x5
    1f50:	ldr	x7, [x5, #8]
    1f54:	cmp	x1, x7
    1f58:	b.cc	2ea0 <gomp_map_vars+0x1698>  // b.lo, b.ul, b.last
    1f5c:	add	x7, x7, #0x1, lsl #12
    1f60:	cmp	x1, x7
    1f64:	ldr	x7, [x29, #288]
    1f68:	b.cc	2d84 <gomp_map_vars+0x157c>  // b.lo, b.ul, b.last
    1f6c:	cmp	x7, #0x1
    1f70:	b.eq	2ef8 <gomp_map_vars+0x16f0>  // b.none
    1f74:	add	x0, x0, #0x1
    1f78:	b	1f88 <gomp_map_vars+0x780>
    1f7c:	ldr	x3, [x29, #272]
    1f80:	mov	x0, x7
    1f84:	mov	x2, #0x0                   	// #0
    1f88:	add	x5, x3, x2
    1f8c:	str	x1, [x3, x2]
    1f90:	ldr	x2, [x29, #216]
    1f94:	mov	x1, #0x1                   	// #1
    1f98:	str	x2, [x5, #8]
    1f9c:	stp	x0, x1, [x29, #280]
    1fa0:	mov	w0, #0x1                   	// #1
    1fa4:	add	x27, x27, #0x1
    1fa8:	str	w0, [x29, #160]
    1fac:	b	1a58 <gomp_map_vars+0x250>
    1fb0:	ldrb	w1, [x29, #188]
    1fb4:	ldp	x7, x5, [x29, #296]
    1fb8:	ldr	x0, [x3, #8]
    1fbc:	asr	w3, w24, w1
    1fc0:	ldp	x6, x4, [x29, #200]
    1fc4:	ldr	x1, [x29, #216]
    1fc8:	sub	x0, x1, x0
    1fcc:	sub	x1, x7, #0x1
    1fd0:	add	x0, x0, x1
    1fd4:	mov	x1, #0x1                   	// #1
    1fd8:	lsl	x3, x1, x3
    1fdc:	add	x0, x0, x3
    1fe0:	neg	x24, x3
    1fe4:	cmp	x4, x3
    1fe8:	sub	x7, x5, x7
    1fec:	and	x0, x24, x0
    1ff0:	csel	x3, x4, x3, cs  // cs = hs, nlast
    1ff4:	add	x6, x6, x11
    1ff8:	add	x0, x7, x0
    1ffc:	stp	x6, x3, [x29, #200]
    2000:	cmp	x2, x19
    2004:	str	x0, [x29, #216]
    2008:	b.hi	2e68 <gomp_map_vars+0x1660>  // b.pmore
    200c:	mov	x27, x2
    2010:	sub	x5, x0, x5
    2014:	mov	w14, #0x0                   	// #0
    2018:	mov	w13, #0x0                   	// #0
    201c:	mov	x12, #0x7fff                	// #32767
    2020:	ldr	x4, [x29, #112]
    2024:	ldp	x11, x3, [x29, #272]
    2028:	ldr	x7, [x29, #288]
    202c:	b	209c <gomp_map_vars+0x894>
    2030:	ldrh	w0, [x25, x2, lsl #1]
    2034:	and	w0, w21, w0
    2038:	cmp	w0, #0x12
    203c:	b.gt	20bc <gomp_map_vars+0x8b4>
    2040:	lsl	x0, x1, x0
    2044:	tst	x0, x28
    2048:	b.ne	2090 <gomp_map_vars+0x888>  // b.any
    204c:	ldr	x0, [x22, x27, lsl #3]
    2050:	sub	x2, x0, #0x1
    2054:	cmp	x2, x12
    2058:	b.hi	2090 <gomp_map_vars+0x888>  // b.pmore
    205c:	ldr	x2, [x20, x27, lsl #3]
    2060:	cmp	x3, #0x0
    2064:	add	x2, x2, x5
    2068:	cbnz	x3, 20e4 <gomp_map_vars+0x8dc>
    206c:	add	x0, x2, x0
    2070:	mov	x6, #0x0                   	// #0
    2074:	add	x8, x11, x6
    2078:	mov	x7, #0x1                   	// #1
    207c:	add	x3, x3, #0x1
    2080:	mov	w13, w7
    2084:	str	x2, [x11, x6]
    2088:	mov	w14, #0x1                   	// #1
    208c:	str	x0, [x8, #8]
    2090:	add	x27, x27, #0x1
    2094:	cmp	x19, x27
    2098:	b.cc	20d0 <gomp_map_vars+0x8c8>  // b.lo, b.ul, b.last
    209c:	lsl	x0, x27, #5
    20a0:	sxtw	x2, w27
    20a4:	str	xzr, [x4, x0]
    20a8:	cbnz	w23, 2030 <gomp_map_vars+0x828>
    20ac:	ldrb	w0, [x25, x2]
    20b0:	and	w0, w21, w0
    20b4:	cmp	w0, #0x12
    20b8:	b.le	2040 <gomp_map_vars+0x838>
    20bc:	cmp	w0, #0x80
    20c0:	b.ne	204c <gomp_map_vars+0x844>  // b.any
    20c4:	add	x27, x27, #0x1
    20c8:	cmp	x19, x27
    20cc:	b.cs	209c <gomp_map_vars+0x894>  // b.hs, b.nlast
    20d0:	cbz	w13, 20d8 <gomp_map_vars+0x8d0>
    20d4:	str	x3, [x29, #280]
    20d8:	cbz	w14, 1a58 <gomp_map_vars+0x250>
    20dc:	str	x7, [x29, #288]
    20e0:	b	1a58 <gomp_map_vars+0x250>
    20e4:	b.lt	2090 <gomp_map_vars+0x888>  // b.tstop
    20e8:	lsl	x6, x3, #4
    20ec:	sub	x8, x6, #0x10
    20f0:	add	x8, x11, x8
    20f4:	ldr	x9, [x8, #8]
    20f8:	cmp	x2, x9
    20fc:	b.cc	2b08 <gomp_map_vars+0x1300>  // b.lo, b.ul, b.last
    2100:	add	x9, x9, #0x1, lsl #12
    2104:	add	x0, x2, x0
    2108:	cmp	x2, x9
    210c:	b.cc	2528 <gomp_map_vars+0xd20>  // b.lo, b.ul, b.last
    2110:	cmp	x7, #0x1
    2114:	b.ne	2074 <gomp_map_vars+0x86c>  // b.any
    2118:	sub	x3, x3, #0x1
    211c:	lsl	x6, x3, #4
    2120:	b	2074 <gomp_map_vars+0x86c>
    2124:	stp	xzr, xzr, [x26, #16]
    2128:	b	1adc <gomp_map_vars+0x2d4>
    212c:	ldp	x0, x5, [x10, #16]
    2130:	str	x3, [x29, #96]
    2134:	ldr	x4, [x29, #120]
    2138:	stp	x10, x2, [x29, #144]
    213c:	ldr	x1, [x0, #16]
    2140:	add	x5, x2, x5
    2144:	ldr	w0, [x4, #12]
    2148:	ldr	x7, [x4, #120]
    214c:	sub	x1, x1, x12
    2150:	add	x1, x1, x5
    2154:	str	x1, [x29, #176]
    2158:	blr	x7
    215c:	tst	w0, #0xff
    2160:	ldr	x3, [x29, #96]
    2164:	ldr	x2, [x29, #152]
    2168:	ldr	x1, [x29, #176]
    216c:	b.eq	3050 <gomp_map_vars+0x1848>  // b.none
    2170:	ldr	x10, [x29, #144]
    2174:	ldr	x0, [x10, #32]
    2178:	b	1a44 <gomp_map_vars+0x23c>
    217c:	b.lt	1c8c <gomp_map_vars+0x484>  // b.tstop
    2180:	ldr	x7, [x29, #272]
    2184:	lsl	x3, x0, #4
    2188:	sub	x11, x3, #0x10
    218c:	add	x11, x7, x11
    2190:	ldr	x12, [x11, #8]
    2194:	cmp	x10, x12
    2198:	b.cc	251c <gomp_map_vars+0xd14>  // b.lo, b.ul, b.last
    219c:	add	x12, x12, #0x1, lsl #12
    21a0:	cmp	x10, x12
    21a4:	ldr	x12, [x29, #288]
    21a8:	b.cc	2ce0 <gomp_map_vars+0x14d8>  // b.lo, b.ul, b.last
    21ac:	cmp	x12, #0x1
    21b0:	b.eq	2e70 <gomp_map_vars+0x1668>  // b.none
    21b4:	add	x0, x0, #0x1
    21b8:	b	1c74 <gomp_map_vars+0x46c>
    21bc:	cbnz	x2, 24fc <gomp_map_vars+0xcf4>
    21c0:	mov	x24, #0x0                   	// #0
    21c4:	str	xzr, [x29, #168]
    21c8:	add	x0, x29, #0x140
    21cc:	mov	x28, #0x0                   	// #0
    21d0:	str	x0, [x29, #120]
    21d4:	mov	x0, #0xffffffffffffffff    	// #-1
    21d8:	str	x0, [x29, #144]
    21dc:	mov	x0, x22
    21e0:	str	x25, [x29, #232]
    21e4:	mov	x25, x19
    21e8:	mov	x19, x26
    21ec:	mov	x26, x28
    21f0:	ldr	x28, [x29, #168]
    21f4:	mov	x22, x27
    21f8:	mov	x27, x24
    21fc:	mov	x24, x0
    2200:	stp	xzr, xzr, [x29, #104]
    2204:	nop
    2208:	lsl	x3, x26, #5
    220c:	add	x5, x19, x3
    2210:	ldr	x0, [x5, #64]
    2214:	cbz	x0, 2320 <gomp_map_vars+0xb18>
    2218:	add	x26, x26, #0x1
    221c:	cmp	x25, x26
    2220:	b.hi	2208 <gomp_map_vars+0xa00>  // b.pmore
    2224:	ldr	w0, [x29, #184]
    2228:	mov	x26, x19
    222c:	mov	x27, x22
    2230:	mov	x19, x25
    2234:	cmp	w0, #0x1
    2238:	ldr	x25, [x29, #232]
    223c:	b.eq	2bac <gomp_map_vars+0x13a4>  // b.none
    2240:	ldr	x0, [x29, #168]
    2244:	cbz	x0, 1abc <gomp_map_vars+0x2b4>
    2248:	ldr	x0, [x29, #280]
    224c:	ldr	x2, [x29, #256]
    2250:	cmp	x0, #0x0
    2254:	b.le	22c0 <gomp_map_vars+0xab8>
    2258:	mov	x21, #0x0                   	// #0
    225c:	nop
    2260:	ldr	x3, [x29, #272]
    2264:	lsl	x1, x21, #4
    2268:	ldr	w0, [x25, #12]
    226c:	add	x4, x3, x1
    2270:	ldr	x19, [x3]
    2274:	ldr	x1, [x3, x1]
    2278:	ldr	x22, [x4, #8]
    227c:	sub	x19, x1, x19
    2280:	ldr	x20, [x26, #16]
    2284:	sub	x22, x22, x1
    2288:	ldr	x4, [x25, #120]
    228c:	add	x20, x1, x20
    2290:	add	x19, x2, x19
    2294:	mov	x3, x22
    2298:	mov	x2, x19
    229c:	mov	x1, x20
    22a0:	blr	x4
    22a4:	tst	w0, #0xff
    22a8:	b.eq	2f1c <gomp_map_vars+0x1714>  // b.none
    22ac:	ldr	x0, [x29, #280]
    22b0:	add	x21, x21, #0x1
    22b4:	ldr	x2, [x29, #256]
    22b8:	cmp	x0, x21
    22bc:	b.gt	2260 <gomp_map_vars+0xa58>
    22c0:	mov	x0, x2
    22c4:	bl	0 <free>
    22c8:	ldr	w0, [x29, #184]
    22cc:	str	xzr, [x29, #256]
    22d0:	cmp	w0, #0x3
    22d4:	b.ne	1ac8 <gomp_map_vars+0x2c0>  // b.any
    22d8:	b	1b64 <gomp_map_vars+0x35c>
    22dc:	ldr	x0, [x29, #224]
    22e0:	sub	x3, x3, #0x1
    22e4:	add	x1, x29, #0x128
    22e8:	str	x3, [x29, #296]
    22ec:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    22f0:	ldr	x3, [x29, #296]
    22f4:	ldr	x2, [x29, #176]
    22f8:	add	x3, x3, #0x1
    22fc:	str	x3, [x29, #296]
    2300:	cbnz	x0, 1d6c <gomp_map_vars+0x564>
    2304:	ldr	x0, [x29, #224]
    2308:	add	x1, x29, #0x128
    230c:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    2310:	cbz	x0, 303c <gomp_map_vars+0x1834>
    2314:	ldr	x2, [x29, #176]
    2318:	ldr	x3, [x29, #296]
    231c:	b	1d6c <gomp_map_vars+0x564>
    2320:	sxtw	x0, w26
    2324:	cbz	w23, 26f8 <gomp_map_vars+0xef0>
    2328:	ldrh	w6, [x20, x0, lsl #1]
    232c:	ldr	x2, [x22, x26, lsl #3]
    2330:	lsl	x7, x26, #3
    2334:	add	x15, x22, x7
    2338:	cbz	x2, 2218 <gomp_map_vars+0xa10>
    233c:	ldr	x0, [x29, #192]
    2340:	and	w4, w21, w6
    2344:	cmp	w4, #0x1c
    2348:	sub	x14, x0, #0x1
    234c:	b.eq	2700 <gomp_map_vars+0xef8>  // b.none
    2350:	b.gt	25f8 <gomp_map_vars+0xdf0>
    2354:	cmp	w4, #0xc
    2358:	b.eq	27b0 <gomp_map_vars+0xfa8>  // b.none
    235c:	sub	w0, w4, #0xd
    2360:	cmp	w0, #0x2
    2364:	b.ls	2218 <gomp_map_vars+0xa10>  // b.plast
    2368:	str	x2, [x27]
    236c:	cmp	w4, #0x4
    2370:	add	x0, x2, #0x8
    2374:	b.ne	2800 <gomp_map_vars+0xff8>  // b.any
    2378:	str	x0, [x27, #8]
    237c:	mov	x1, x27
    2380:	ldr	x0, [x29, #224]
    2384:	str	w6, [x29, #152]
    2388:	str	x3, [x29, #160]
    238c:	str	x14, [x29, #176]
    2390:	str	x5, [x29, #200]
    2394:	str	w4, [x29, #208]
    2398:	str	x7, [x29, #216]
    239c:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    23a0:	ldr	w6, [x29, #152]
    23a4:	mov	x13, x0
    23a8:	ldr	w4, [x29, #208]
    23ac:	ldr	x3, [x29, #160]
    23b0:	ldr	x14, [x29, #176]
    23b4:	ldr	x5, [x29, #200]
    23b8:	ldr	x7, [x29, #216]
    23bc:	cbz	x0, 2b00 <gomp_map_vars+0x12f8>
    23c0:	ldr	x0, [x0, #32]
    23c4:	cmn	x0, #0x2
    23c8:	b.eq	2824 <gomp_map_vars+0x101c>  // b.none
    23cc:	ldr	w1, [x29, #140]
    23d0:	add	x4, x19, x3
    23d4:	str	x13, [x5, #64]
    23d8:	and	w6, w1, w6
    23dc:	and	w1, w6, #0xff
    23e0:	and	w2, w6, #0xe
    23e4:	sub	w1, w1, #0x12
    23e8:	cmp	w2, #0x2
    23ec:	and	w1, w1, #0xff
    23f0:	cset	w2, eq  // eq = none
    23f4:	cmp	w1, #0x1
    23f8:	strb	w2, [x5, #72]
    23fc:	cset	w1, ls  // ls = plast
    2400:	strb	w1, [x5, #73]
    2404:	ldr	x5, [x13]
    2408:	sxtb	w6, w6
    240c:	ldr	x2, [x27]
    2410:	cmp	w6, #0x0
    2414:	sub	x1, x2, x5
    2418:	str	x1, [x4, #80]
    241c:	ccmp	x2, x5, #0x0, ge  // ge = tcont
    2420:	ldr	x1, [x27, #8]
    2424:	sub	x3, x1, x2
    2428:	str	x3, [x4, #88]
    242c:	b.cc	3024 <gomp_map_vars+0x181c>  // b.lo, b.ul, b.last
    2430:	ldr	x4, [x13, #8]
    2434:	cmp	x1, x4
    2438:	b.hi	3024 <gomp_map_vars+0x181c>  // b.pmore
    243c:	and	w6, w6, #0xfffffffd
    2440:	cmp	w6, #0x11
    2444:	b.eq	2ca4 <gomp_map_vars+0x149c>  // b.none
    2448:	add	x26, x26, #0x1
    244c:	cmn	x0, #0x1
    2450:	b.eq	221c <gomp_map_vars+0xa14>  // b.none
    2454:	add	x0, x0, #0x1
    2458:	str	x0, [x13, #32]
    245c:	b	221c <gomp_map_vars+0xa14>
    2460:	ldr	x0, [x29, #200]
    2464:	cmp	x0, #0x0
    2468:	ldr	w0, [x29, #104]
    246c:	cset	w2, ne  // ne = any
    2470:	str	w2, [x29, #232]
    2474:	cmp	w0, #0x0
    2478:	ccmp	w2, #0x0, #0x0, eq  // eq = none
    247c:	b.eq	2c8c <gomp_map_vars+0x1484>  // b.none
    2480:	ldp	x1, x2, [x29, #208]
    2484:	ldr	w0, [x25, #12]
    2488:	ldr	x3, [x25, #96]
    248c:	add	x1, x1, x2
    2490:	sub	x1, x1, #0x1
    2494:	blr	x3
    2498:	str	x0, [x26, #32]
    249c:	ldr	w2, [x29, #232]
    24a0:	cbz	x0, 30a0 <gomp_map_vars+0x1898>
    24a4:	ldr	x3, [x29, #208]
    24a8:	sub	x1, x3, #0x1
    24ac:	neg	x28, x3
    24b0:	add	x0, x0, x1
    24b4:	ldr	x1, [x29, #216]
    24b8:	and	x28, x0, x28
    24bc:	ldr	x0, [x29, #288]
    24c0:	add	x24, x28, x1
    24c4:	stp	x28, x24, [x26, #16]
    24c8:	cmp	x0, #0x1
    24cc:	ldr	x0, [x29, #280]
    24d0:	b.ne	24dc <gomp_map_vars+0xcd4>  // b.any
    24d4:	sub	x0, x0, #0x1
    24d8:	str	x0, [x29, #280]
    24dc:	ldr	w1, [x29, #160]
    24e0:	cmp	x0, #0x0
    24e4:	orr	w24, w2, w1
    24e8:	b.gt	2e28 <gomp_map_vars+0x1620>
    24ec:	str	xzr, [x26, #8]
    24f0:	cbz	w24, 2544 <gomp_map_vars+0xd3c>
    24f4:	ldr	x0, [x29, #200]
    24f8:	cbz	x0, 21c0 <gomp_map_vars+0x9b8>
    24fc:	str	xzr, [x29, #168]
    2500:	ldr	x0, [x29, #200]
    2504:	add	x0, x0, x0, lsl #3
    2508:	lsl	x0, x0, #3
    250c:	bl	0 <gomp_malloc>
    2510:	mov	x24, x0
    2514:	str	x0, [x26, #8]
    2518:	b	21c8 <gomp_map_vars+0x9c0>
    251c:	mov	x0, #0xffffffffffffffff    	// #-1
    2520:	str	x0, [x29, #280]
    2524:	b	1c8c <gomp_map_vars+0x484>
    2528:	add	x7, x7, #0x1
    252c:	mov	w14, #0x1                   	// #1
    2530:	str	x0, [x8, #8]
    2534:	b	2090 <gomp_map_vars+0x888>
    2538:	str	xzr, [x26, #8]
    253c:	cbnz	w24, 24f4 <gomp_map_vars+0xcec>
    2540:	str	xzr, [x29, #168]
    2544:	add	x22, x26, #0x40
    2548:	sub	x20, x27, #0x8
    254c:	mov	x21, #0x0                   	// #0
    2550:	ldr	x23, [x29, #168]
    2554:	b	2594 <gomp_map_vars+0xd8c>
    2558:	ldp	x3, x0, [x0, #16]
    255c:	ldr	x5, [x3, #16]
    2560:	add	x2, x2, x0
    2564:	add	x5, x2, x5
    2568:	add	x1, x28, x1
    256c:	mov	x4, x23
    2570:	add	x2, x29, #0x140
    2574:	mov	x0, x25
    2578:	mov	x3, #0x8                   	// #8
    257c:	str	x5, [x29, #320]
    2580:	bl	520 <gomp_copy_host2dev>
    2584:	add	x22, x22, #0x20
    2588:	cmp	x19, x21
    258c:	b.eq	2240 <gomp_map_vars+0xa38>  // b.none
    2590:	ldr	x28, [x26, #16]
    2594:	add	x21, x21, #0x1
    2598:	ldr	x0, [x22]
    259c:	lsl	x1, x21, #3
    25a0:	sub	x1, x1, #0x8
    25a4:	ldr	x2, [x22, #16]
    25a8:	cbnz	x0, 2558 <gomp_map_vars+0xd50>
    25ac:	cmn	x2, #0x1
    25b0:	b.eq	2af8 <gomp_map_vars+0x12f0>  // b.none
    25b4:	cmn	x2, #0x2
    25b8:	mov	x5, #0x0                   	// #0
    25bc:	b.eq	2568 <gomp_map_vars+0xd60>  // b.none
    25c0:	cmn	x2, #0x3
    25c4:	add	x5, x28, x2
    25c8:	b.ne	2568 <gomp_map_vars+0xd60>  // b.any
    25cc:	ldr	x0, [x22, #32]
    25d0:	ldr	x3, [x27, x21, lsl #3]
    25d4:	ldp	x4, x5, [x0, #16]
    25d8:	ldr	x2, [x20, x21, lsl #3]
    25dc:	sub	x2, x2, x3
    25e0:	ldr	x3, [x22, #48]
    25e4:	ldr	x0, [x4, #16]
    25e8:	add	x5, x5, x3
    25ec:	add	x2, x2, x5
    25f0:	add	x5, x2, x0
    25f4:	b	2568 <gomp_map_vars+0xd60>
    25f8:	cmp	w4, #0x1d
    25fc:	b.ne	27fc <gomp_map_vars+0xff4>  // b.any
    2600:	add	x0, x2, #0x8
    2604:	stp	x2, x0, [x29, #296]
    2608:	add	x1, x29, #0x128
    260c:	ldr	x0, [x29, #224]
    2610:	stp	x3, x5, [x29, #200]
    2614:	str	x7, [x29, #216]
    2618:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    261c:	mov	x6, x0
    2620:	cbz	x0, 2f5c <gomp_map_vars+0x1754>
    2624:	ldr	x13, [x0]
    2628:	ldr	x1, [x29, #296]
    262c:	cmp	x13, x1
    2630:	b.hi	2f5c <gomp_map_vars+0x1754>  // b.pmore
    2634:	ldr	x2, [x0, #8]
    2638:	ldr	x0, [x29, #304]
    263c:	ldp	x3, x5, [x29, #200]
    2640:	cmp	x2, x0
    2644:	ldr	x7, [x29, #216]
    2648:	b.cc	2f5c <gomp_map_vars+0x1754>  // b.lo, b.ul, b.last
    264c:	sub	w0, w26, #0x1
    2650:	sxtw	x2, w0
    2654:	cbz	w23, 280c <gomp_map_vars+0x1004>
    2658:	ldrh	w0, [x20, x2, lsl #1]
    265c:	and	w0, w21, w0
    2660:	cmp	w0, #0x1d
    2664:	b.eq	281c <gomp_map_vars+0x1014>  // b.none
    2668:	sub	x4, x26, #0x1
    266c:	ldr	x2, [x5, #32]
    2670:	add	x0, x19, x4, lsl #5
    2674:	ldr	x0, [x0, #80]
    2678:	cbz	x2, 2aa4 <gomp_map_vars+0x129c>
    267c:	ldp	x4, x3, [x2, #16]
    2680:	ldr	x2, [x4, #16]
    2684:	add	x0, x0, x3
    2688:	add	x0, x0, x2
    268c:	str	x0, [x29, #320]
    2690:	cbz	x0, 26a0 <gomp_map_vars+0xe98>
    2694:	ldr	x2, [x24, x7]
    2698:	sub	x0, x0, x2
    269c:	str	x0, [x29, #320]
    26a0:	ldp	x0, x2, [x6, #16]
    26a4:	mov	x3, #0x8                   	// #8
    26a8:	mov	x4, x28
    26ac:	str	x6, [x29, #216]
    26b0:	add	x26, x26, #0x1
    26b4:	ldr	x0, [x0, #16]
    26b8:	add	x1, x1, x2
    26bc:	ldr	x2, [x29, #120]
    26c0:	sub	x13, x0, x13
    26c4:	ldr	x0, [x29, #232]
    26c8:	add	x1, x13, x1
    26cc:	bl	520 <gomp_copy_host2dev>
    26d0:	ldr	x6, [x29, #216]
    26d4:	ldr	x2, [x29, #296]
    26d8:	ldp	x0, x1, [x6, #16]
    26dc:	ldr	x3, [x6]
    26e0:	ldr	x0, [x0, #16]
    26e4:	add	x1, x1, x2
    26e8:	sub	x0, x0, x3
    26ec:	add	x0, x0, x1
    26f0:	str	x0, [x29, #320]
    26f4:	b	221c <gomp_map_vars+0xa14>
    26f8:	ldrb	w6, [x20, x0]
    26fc:	b	232c <gomp_map_vars+0xb24>
    2700:	ldr	x13, [x24, x7]
    2704:	ldr	x1, [x5, #96]
    2708:	add	x13, x26, x13
    270c:	ldr	x0, [x22, x13, lsl #3]
    2710:	ldr	x3, [x24, x13, lsl #3]
    2714:	add	x0, x0, x3
    2718:	stp	x2, x0, [x29, #296]
    271c:	add	x2, x26, #0x1
    2720:	mov	x26, x2
    2724:	cbnz	x1, 221c <gomp_map_vars+0xa14>
    2728:	ldr	x0, [x29, #224]
    272c:	add	x1, x29, #0x128
    2730:	str	x2, [x29, #152]
    2734:	str	w6, [x29, #160]
    2738:	str	x14, [x29, #176]
    273c:	stp	x13, x15, [x29, #200]
    2740:	str	x7, [x29, #216]
    2744:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    2748:	ldr	w6, [x29, #160]
    274c:	mov	x1, x0
    2750:	ldr	x14, [x29, #176]
    2754:	ldp	x13, x15, [x29, #200]
    2758:	ldr	x7, [x29, #216]
    275c:	cbnz	x0, 2b1c <gomp_map_vars+0x1314>
    2760:	ldrb	w0, [x29, #188]
    2764:	mov	x1, #0x1                   	// #1
    2768:	ldr	x2, [x22, x7]
    276c:	str	x13, [x29, #144]
    2770:	ldr	x4, [x15, #8]
    2774:	asr	w0, w6, w0
    2778:	add	x14, x2, x14
    277c:	lsl	x0, x1, x0
    2780:	sub	x1, x0, x4
    2784:	neg	x0, x0
    2788:	ldr	x3, [x29, #304]
    278c:	add	x1, x1, x14
    2790:	and	x0, x1, x0
    2794:	sub	x2, x4, x2
    2798:	add	x1, x2, x0
    279c:	sub	x0, x3, x4
    27a0:	add	x0, x0, x1
    27a4:	stp	x4, x1, [x29, #104]
    27a8:	str	x0, [x29, #192]
    27ac:	b	221c <gomp_map_vars+0xa14>
    27b0:	ldrb	w1, [x29, #188]
    27b4:	add	x0, x19, x3
    27b8:	ldr	x3, [x24, x7]
    27bc:	add	x26, x26, #0x1
    27c0:	asr	w6, w6, w1
    27c4:	mov	x1, #0x1                   	// #1
    27c8:	lsl	x6, x1, x6
    27cc:	add	x14, x6, x14
    27d0:	neg	x6, x6
    27d4:	mov	x4, x28
    27d8:	and	x6, x14, x6
    27dc:	ldr	x1, [x19, #16]
    27e0:	str	x6, [x0, #80]
    27e4:	add	x0, x6, x3
    27e8:	str	x0, [x29, #192]
    27ec:	ldr	x0, [x29, #232]
    27f0:	add	x1, x6, x1
    27f4:	bl	520 <gomp_copy_host2dev>
    27f8:	b	221c <gomp_map_vars+0xa14>
    27fc:	str	x2, [x27]
    2800:	ldr	x0, [x24, x7]
    2804:	add	x0, x2, x0
    2808:	b	2378 <gomp_map_vars+0xb70>
    280c:	ldrb	w0, [x20, w0, sxtw]
    2810:	and	w0, w21, w0
    2814:	cmp	w0, #0x1d
    2818:	b.ne	2668 <gomp_map_vars+0xe60>  // b.any
    281c:	ldr	x0, [x29, #320]
    2820:	b	2690 <gomp_map_vars+0xe88>
    2824:	ldr	x0, [x29, #224]
    2828:	str	xzr, [x27, #48]
    282c:	mov	x1, x13
    2830:	str	w6, [x29, #96]
    2834:	stp	x3, x14, [x29, #152]
    2838:	str	x5, [x29, #176]
    283c:	str	w4, [x29, #200]
    2840:	stp	x7, x13, [x29, #208]
    2844:	bl	0 <splay_tree_prefix_splay_tree_remove>
    2848:	ldr	w6, [x29, #96]
    284c:	ldp	x3, x14, [x29, #152]
    2850:	ldr	w4, [x29, #200]
    2854:	ldr	x5, [x29, #176]
    2858:	ldp	x7, x13, [x29, #208]
    285c:	str	x13, [x27, #48]
    2860:	ldp	x0, x2, [x27]
    2864:	str	x27, [x5, #64]
    2868:	ldr	x1, [x29, #144]
    286c:	str	x19, [x27, #16]
    2870:	cmn	x1, #0x1
    2874:	sub	x2, x2, x0
    2878:	b.eq	2acc <gomp_map_vars+0x12c4>  // b.none
    287c:	ldr	x8, [x29, #104]
    2880:	cmp	x1, x26
    2884:	csinv	x1, x1, xzr, ne  // ne = any
    2888:	str	x1, [x29, #144]
    288c:	sub	x0, x0, x8
    2890:	ldr	x8, [x29, #112]
    2894:	add	x0, x0, x8
    2898:	str	x0, [x27, #24]
    289c:	and	w0, w4, #0xe
    28a0:	add	x3, x19, x3
    28a4:	cmp	w0, #0x2
    28a8:	and	w0, w4, #0xfffffffe
    28ac:	cset	w1, eq  // eq = none
    28b0:	cmp	w0, #0x12
    28b4:	cset	w0, eq  // eq = none
    28b8:	strb	w1, [x5, #72]
    28bc:	strb	w0, [x5, #73]
    28c0:	mov	x1, x27
    28c4:	stp	xzr, x2, [x3, #80]
    28c8:	adrp	x2, 0 <omp_target_memcpy_rect_worker>
    28cc:	ldr	q0, [x2]
    28d0:	str	x13, [x29, #160]
    28d4:	ldr	x0, [x29, #224]
    28d8:	str	w6, [x29, #176]
    28dc:	str	q0, [x27, #32]
    28e0:	ldr	x2, [x19]
    28e4:	str	x7, [x29, #200]
    28e8:	str	w4, [x29, #208]
    28ec:	add	x2, x2, #0x1
    28f0:	str	x2, [x19]
    28f4:	stp	xzr, xzr, [x27, #56]
    28f8:	str	x5, [x29, #216]
    28fc:	bl	0 <splay_tree_prefix_splay_tree_insert>
    2900:	ldr	w4, [x29, #208]
    2904:	ldr	x13, [x29, #160]
    2908:	cmp	w4, #0x5
    290c:	ldr	x5, [x29, #216]
    2910:	b.eq	2bb4 <gomp_map_vars+0x13ac>  // b.none
    2914:	ldr	w6, [x29, #176]
    2918:	b.le	2a00 <gomp_map_vars+0x11f8>
    291c:	cmp	w4, #0x11
    2920:	b.eq	2948 <gomp_map_vars+0x1140>  // b.none
    2924:	b.le	29bc <gomp_map_vars+0x11b4>
    2928:	cmp	w4, #0x80
    292c:	b.eq	2970 <gomp_map_vars+0x1168>  // b.none
    2930:	b.le	2a34 <gomp_map_vars+0x122c>
    2934:	cmp	w4, #0x82
    2938:	b.eq	2970 <gomp_map_vars+0x1168>  // b.none
    293c:	and	w4, w4, #0xfffffffd
    2940:	cmp	w4, #0x81
    2944:	b.ne	2a50 <gomp_map_vars+0x1248>  // b.any
    2948:	ldp	x2, x3, [x27]
    294c:	mov	x4, x28
    2950:	ldr	x5, [x19, #16]
    2954:	str	x13, [x29, #216]
    2958:	ldr	x0, [x29, #232]
    295c:	ldr	x1, [x27, #24]
    2960:	sub	x3, x3, x2
    2964:	add	x1, x5, x1
    2968:	bl	520 <gomp_copy_host2dev>
    296c:	ldr	x13, [x29, #216]
    2970:	ldr	x0, [x27, #48]
    2974:	cbz	x0, 29b4 <gomp_map_vars+0x11ac>
    2978:	ldr	x5, [x29, #232]
    297c:	add	x2, x29, #0xf8
    2980:	ldr	x4, [x19, #16]
    2984:	mov	x3, #0x8                   	// #8
    2988:	ldr	x1, [x27, #24]
    298c:	ldr	w0, [x5, #12]
    2990:	add	x4, x4, x1
    2994:	str	x4, [x29, #248]
    2998:	ldr	x1, [x13, #24]
    299c:	str	x1, [x29, #216]
    29a0:	ldr	x5, [x5, #120]
    29a4:	blr	x5
    29a8:	tst	w0, #0xff
    29ac:	ldr	x1, [x29, #216]
    29b0:	b.eq	2fe4 <gomp_map_vars+0x17dc>  // b.none
    29b4:	add	x27, x27, #0x48
    29b8:	b	2218 <gomp_map_vars+0xa10>
    29bc:	cmp	w4, #0x6
    29c0:	b.eq	2fbc <gomp_map_vars+0x17b4>  // b.none
    29c4:	cmp	w4, #0x8
    29c8:	b.ne	2a50 <gomp_map_vars+0x1248>  // b.any
    29cc:	ldp	x2, x3, [x27]
    29d0:	sub	x3, x3, x2
    29d4:	cmp	x3, #0x8
    29d8:	b.ne	30c0 <gomp_map_vars+0x18b8>  // b.any
    29dc:	ldr	x5, [x19, #16]
    29e0:	mov	x4, x28
    29e4:	ldr	x0, [x29, #232]
    29e8:	str	x13, [x29, #216]
    29ec:	ldr	x1, [x27, #24]
    29f0:	add	x1, x5, x1
    29f4:	bl	520 <gomp_copy_host2dev>
    29f8:	ldr	x13, [x29, #216]
    29fc:	b	2970 <gomp_map_vars+0x1168>
    2a00:	cmp	w4, #0x4
    2a04:	ldr	x7, [x29, #200]
    2a08:	b.ne	2a48 <gomp_map_vars+0x1240>  // b.any
    2a0c:	ldr	x1, [x27]
    2a10:	mov	x4, x28
    2a14:	ldr	x3, [x24, x7]
    2a18:	mov	x0, x19
    2a1c:	ldr	x1, [x1]
    2a20:	str	x13, [x29, #216]
    2a24:	ldr	x2, [x27, #24]
    2a28:	bl	660 <gomp_map_pointer>
    2a2c:	ldr	x13, [x29, #216]
    2a30:	b	2970 <gomp_map_vars+0x1168>
    2a34:	cmp	w4, #0x12
    2a38:	b.eq	2970 <gomp_map_vars+0x1168>  // b.none
    2a3c:	cmp	w4, #0x13
    2a40:	b.eq	2948 <gomp_map_vars+0x1140>  // b.none
    2a44:	b	2a50 <gomp_map_vars+0x1248>
    2a48:	cmp	w4, #0x5
    2a4c:	b.ne	2a7c <gomp_map_vars+0x1274>  // b.any
    2a50:	ldr	x0, [x29, #128]
    2a54:	str	w6, [x29, #232]
    2a58:	bl	2c8 <gomp_mutex_unlock>
    2a5c:	ldr	w6, [x29, #232]
    2a60:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
    2a64:	add	x1, x1, #0x0
    2a68:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    2a6c:	add	x1, x1, #0x10
    2a70:	add	x0, x0, #0x0
    2a74:	mov	w2, w6
    2a78:	bl	0 <gomp_fatal>
    2a7c:	cmp	w4, #0x2
    2a80:	b.eq	2970 <gomp_map_vars+0x1168>  // b.none
    2a84:	b.le	2a94 <gomp_map_vars+0x128c>
    2a88:	cmp	w4, #0x3
    2a8c:	b.eq	2948 <gomp_map_vars+0x1140>  // b.none
    2a90:	b	2a50 <gomp_map_vars+0x1248>
    2a94:	cbz	w4, 2970 <gomp_map_vars+0x1168>
    2a98:	cmp	w4, #0x1
    2a9c:	b.eq	2948 <gomp_map_vars+0x1140>  // b.none
    2aa0:	b	2a50 <gomp_map_vars+0x1248>
    2aa4:	cmn	x0, #0x1
    2aa8:	b.eq	2e1c <gomp_map_vars+0x1614>  // b.none
    2aac:	cmn	x0, #0x2
    2ab0:	b.eq	2e60 <gomp_map_vars+0x1658>  // b.none
    2ab4:	cmn	x0, #0x3
    2ab8:	b.eq	2eac <gomp_map_vars+0x16a4>  // b.none
    2abc:	ldr	x2, [x19, #16]
    2ac0:	add	x0, x0, x2
    2ac4:	str	x0, [x29, #320]
    2ac8:	b	2690 <gomp_map_vars+0xe88>
    2acc:	ldrb	w0, [x29, #188]
    2ad0:	mov	x1, #0x1                   	// #1
    2ad4:	asr	w0, w6, w0
    2ad8:	lsl	x0, x1, x0
    2adc:	add	x14, x0, x14
    2ae0:	neg	x0, x0
    2ae4:	and	x0, x14, x0
    2ae8:	str	x0, [x27, #24]
    2aec:	add	x0, x0, x2
    2af0:	str	x0, [x29, #192]
    2af4:	b	289c <gomp_map_vars+0x1094>
    2af8:	ldr	x5, [x20, x21, lsl #3]
    2afc:	b	2568 <gomp_map_vars+0xd60>
    2b00:	str	xzr, [x27, #48]
    2b04:	b	2860 <gomp_map_vars+0x1058>
    2b08:	mov	w13, #0x1                   	// #1
    2b0c:	mov	x3, #0xffffffffffffffff    	// #-1
    2b10:	b	2090 <gomp_map_vars+0x888>
    2b14:	str	xzr, [x29, #280]
    2b18:	b	18b8 <gomp_map_vars+0xb0>
    2b1c:	cmp	x26, x13
    2b20:	ldr	x2, [x29, #152]
    2b24:	b.hi	221c <gomp_map_vars+0xa14>  // b.pmore
    2b28:	mov	w0, w23
    2b2c:	mov	x23, x26
    2b30:	mov	w26, w0
    2b34:	str	x25, [x29, #200]
    2b38:	mov	x25, x20
    2b3c:	mov	x20, x1
    2b40:	str	w21, [x29, #208]
    2b44:	mov	x21, x19
    2b48:	mov	x19, x13
    2b4c:	str	x27, [x29, #216]
    2b50:	mov	x27, x2
    2b54:	nop
    2b58:	mov	x3, x23
    2b5c:	mov	x7, x28
    2b60:	mov	x6, x25
    2b64:	mov	x5, x24
    2b68:	mov	x4, x22
    2b6c:	mov	x2, x27
    2b70:	add	x23, x23, #0x1
    2b74:	mov	x1, x20
    2b78:	mov	x0, x21
    2b7c:	bl	13f0 <gomp_map_fields_existing>
    2b80:	cmp	x19, x23
    2b84:	b.cs	2b58 <gomp_map_vars+0x1350>  // b.hs, b.nlast
    2b88:	mov	w0, w26
    2b8c:	mov	x19, x21
    2b90:	mov	x20, x25
    2b94:	mov	x26, x23
    2b98:	ldr	w21, [x29, #208]
    2b9c:	mov	w23, w0
    2ba0:	ldr	x25, [x29, #200]
    2ba4:	ldr	x27, [x29, #216]
    2ba8:	b	221c <gomp_map_vars+0xa14>
    2bac:	ldr	x28, [x26, #16]
    2bb0:	b	2544 <gomp_map_vars+0xd3c>
    2bb4:	ldp	x2, x3, [x27]
    2bb8:	mov	x4, x28
    2bbc:	ldr	x6, [x19, #16]
    2bc0:	stp	x13, x5, [x29, #208]
    2bc4:	ldr	x0, [x29, #232]
    2bc8:	sub	x3, x3, x2
    2bcc:	ldr	x1, [x27, #24]
    2bd0:	add	x1, x6, x1
    2bd4:	bl	520 <gomp_copy_host2dev>
    2bd8:	add	x6, x26, #0x1
    2bdc:	cmp	x25, x6
    2be0:	ldr	x13, [x29, #208]
    2be4:	b.ls	2970 <gomp_map_vars+0x1168>  // b.plast
    2be8:	str	w23, [x29, #208]
    2bec:	mov	x26, x6
    2bf0:	ldr	x5, [x29, #216]
    2bf4:	str	x13, [x29, #216]
    2bf8:	cbnz	w23, 2cf4 <gomp_map_vars+0x14ec>
    2bfc:	mov	x23, x5
    2c00:	ldrb	w0, [x20, w26, sxtw]
    2c04:	sub	x3, x26, #0x1
    2c08:	and	w0, w0, w21
    2c0c:	cmp	w0, #0x4
    2c10:	b.ne	2e0c <gomp_map_vars+0x1604>  // b.any
    2c14:	ldr	x2, [x22, x26, lsl #3]
    2c18:	ldr	x6, [x27]
    2c1c:	cmp	x6, x2
    2c20:	b.hi	2e0c <gomp_map_vars+0x1604>  // b.pmore
    2c24:	ldr	x1, [x27, #8]
    2c28:	add	x0, x2, #0x8
    2c2c:	cmp	x1, x0
    2c30:	b.cc	2e0c <gomp_map_vars+0x1604>  // b.lo, b.ul, b.last
    2c34:	ldr	x0, [x27, #32]
    2c38:	str	x27, [x23, #96]
    2c3c:	strb	wzr, [x23, #104]
    2c40:	strb	wzr, [x23, #105]
    2c44:	cmn	x0, #0x1
    2c48:	b.eq	2dd4 <gomp_map_vars+0x15cc>  // b.none
    2c4c:	add	x0, x0, #0x1
    2c50:	mov	x4, x28
    2c54:	ldr	x1, [x2]
    2c58:	str	x0, [x27, #32]
    2c5c:	ldr	x7, [x27, #24]
    2c60:	mov	x0, x19
    2c64:	ldr	x3, [x24, x26, lsl #3]
    2c68:	sub	x6, x7, x6
    2c6c:	add	x2, x2, x6
    2c70:	add	x23, x23, #0x20
    2c74:	bl	660 <gomp_map_pointer>
    2c78:	add	x0, x26, #0x1
    2c7c:	cmp	x25, x0
    2c80:	b.ls	2dc8 <gomp_map_vars+0x15c0>  // b.plast
    2c84:	mov	x26, x0
    2c88:	b	2c00 <gomp_map_vars+0x13f8>
    2c8c:	ldr	w0, [x29, #160]
    2c90:	str	xzr, [x26, #8]
    2c94:	stp	xzr, xzr, [x26, #16]
    2c98:	str	xzr, [x26, #32]
    2c9c:	cbz	w0, 1abc <gomp_map_vars+0x2b4>
    2ca0:	b	21c0 <gomp_map_vars+0x9b8>
    2ca4:	ldp	x0, x1, [x13, #16]
    2ca8:	mov	x4, x28
    2cac:	str	x13, [x29, #216]
    2cb0:	ldr	x0, [x0, #16]
    2cb4:	add	x1, x2, x1
    2cb8:	sub	x5, x0, x5
    2cbc:	ldr	x0, [x29, #232]
    2cc0:	add	x1, x5, x1
    2cc4:	bl	520 <gomp_copy_host2dev>
    2cc8:	ldr	x13, [x29, #216]
    2ccc:	ldr	x0, [x13, #32]
    2cd0:	b	2448 <gomp_map_vars+0xc40>
    2cd4:	ldr	x0, [x29, #128]
    2cd8:	bl	0 <gomp_mutex_unlock_slow>
    2cdc:	b	1adc <gomp_map_vars+0x2d4>
    2ce0:	ldr	x0, [x29, #216]
    2ce4:	str	x0, [x11, #8]
    2ce8:	add	x12, x12, #0x1
    2cec:	str	x12, [x29, #288]
    2cf0:	b	1c8c <gomp_map_vars+0x484>
    2cf4:	mov	x23, x5
    2cf8:	ldrh	w0, [x20, w26, sxtw #1]
    2cfc:	sub	x3, x26, #0x1
    2d00:	and	w0, w0, w21
    2d04:	cmp	w0, #0x4
    2d08:	b.ne	2e0c <gomp_map_vars+0x1604>  // b.any
    2d0c:	ldr	x2, [x22, x26, lsl #3]
    2d10:	ldr	x6, [x27]
    2d14:	cmp	x2, x6
    2d18:	b.cc	2e0c <gomp_map_vars+0x1604>  // b.lo, b.ul, b.last
    2d1c:	ldr	x0, [x27, #8]
    2d20:	add	x1, x2, #0x8
    2d24:	cmp	x1, x0
    2d28:	b.hi	2e0c <gomp_map_vars+0x1604>  // b.pmore
    2d2c:	ldr	x0, [x27, #32]
    2d30:	str	x27, [x23, #96]
    2d34:	strb	wzr, [x23, #104]
    2d38:	strb	wzr, [x23, #105]
    2d3c:	cmn	x0, #0x1
    2d40:	b.eq	2d98 <gomp_map_vars+0x1590>  // b.none
    2d44:	add	x0, x0, #0x1
    2d48:	mov	x4, x28
    2d4c:	ldr	x1, [x2]
    2d50:	str	x0, [x27, #32]
    2d54:	ldr	x7, [x27, #24]
    2d58:	mov	x0, x19
    2d5c:	ldr	x3, [x24, x26, lsl #3]
    2d60:	sub	x6, x7, x6
    2d64:	add	x2, x2, x6
    2d68:	add	x23, x23, #0x20
    2d6c:	bl	660 <gomp_map_pointer>
    2d70:	add	x0, x26, #0x1
    2d74:	cmp	x25, x0
    2d78:	b.ls	2dc8 <gomp_map_vars+0x15c0>  // b.plast
    2d7c:	mov	x26, x0
    2d80:	b	2cf8 <gomp_map_vars+0x14f0>
    2d84:	ldr	x0, [x29, #216]
    2d88:	str	x0, [x5, #8]
    2d8c:	add	x7, x7, #0x1
    2d90:	str	x7, [x29, #288]
    2d94:	b	1fa0 <gomp_map_vars+0x798>
    2d98:	ldr	x7, [x27, #24]
    2d9c:	mov	x0, x19
    2da0:	ldr	x1, [x2]
    2da4:	sub	x6, x7, x6
    2da8:	ldr	x3, [x24, x26, lsl #3]
    2dac:	mov	x4, x28
    2db0:	add	x2, x2, x6
    2db4:	add	x23, x23, #0x20
    2db8:	bl	660 <gomp_map_pointer>
    2dbc:	add	x0, x26, #0x1
    2dc0:	cmp	x25, x0
    2dc4:	b.hi	2d7c <gomp_map_vars+0x1574>  // b.pmore
    2dc8:	ldr	w23, [x29, #208]
    2dcc:	ldr	x13, [x29, #216]
    2dd0:	b	2970 <gomp_map_vars+0x1168>
    2dd4:	ldr	x7, [x27, #24]
    2dd8:	mov	x0, x19
    2ddc:	ldr	x1, [x2]
    2de0:	sub	x6, x7, x6
    2de4:	ldr	x3, [x24, x26, lsl #3]
    2de8:	mov	x4, x28
    2dec:	add	x2, x2, x6
    2df0:	add	x23, x23, #0x20
    2df4:	bl	660 <gomp_map_pointer>
    2df8:	add	x0, x26, #0x1
    2dfc:	cmp	x25, x0
    2e00:	b.ls	2dc8 <gomp_map_vars+0x15c0>  // b.plast
    2e04:	mov	x26, x0
    2e08:	b	2c00 <gomp_map_vars+0x13f8>
    2e0c:	ldr	w23, [x29, #208]
    2e10:	mov	x26, x3
    2e14:	ldr	x13, [x29, #216]
    2e18:	b	2970 <gomp_map_vars+0x1168>
    2e1c:	ldr	x0, [x22, x4, lsl #3]
    2e20:	str	x0, [x29, #320]
    2e24:	b	2690 <gomp_map_vars+0xe88>
    2e28:	ldr	x1, [x29, #272]
    2e2c:	add	x0, x1, x0, lsl #4
    2e30:	ldr	x1, [x1]
    2e34:	ldur	x0, [x0, #-8]
    2e38:	sub	x0, x0, x1
    2e3c:	bl	0 <malloc>
    2e40:	str	x0, [x29, #256]
    2e44:	cbz	x0, 2538 <gomp_map_vars+0xd30>
    2e48:	str	xzr, [x26, #8]
    2e4c:	str	x26, [x29, #264]
    2e50:	cbnz	w24, 2ee0 <gomp_map_vars+0x16d8>
    2e54:	add	x0, x29, #0x100
    2e58:	str	x0, [x29, #168]
    2e5c:	b	2544 <gomp_map_vars+0xd3c>
    2e60:	str	xzr, [x29, #320]
    2e64:	b	26a0 <gomp_map_vars+0xe98>
    2e68:	mov	x27, x2
    2e6c:	b	1a58 <gomp_map_vars+0x250>
    2e70:	sub	x3, x0, #0x1
    2e74:	lsl	x3, x3, #4
    2e78:	b	1c74 <gomp_map_vars+0x46c>
    2e7c:	ldr	x1, [x29, #128]
    2e80:	ldxr	w0, [x1]
    2e84:	stlxr	w2, wzr, [x1]
    2e88:	cbnz	w2, 2e80 <gomp_map_vars+0x1678>
    2e8c:	tbnz	w0, #31, 2f10 <gomp_map_vars+0x1708>
    2e90:	mov	x0, x26
    2e94:	mov	x26, #0x0                   	// #0
    2e98:	bl	0 <free>
    2e9c:	b	1adc <gomp_map_vars+0x2d4>
    2ea0:	mov	x0, #0xffffffffffffffff    	// #-1
    2ea4:	str	x0, [x29, #280]
    2ea8:	b	1fa0 <gomp_map_vars+0x798>
    2eac:	ldr	x2, [x5, #64]
    2eb0:	add	x3, x19, x3
    2eb4:	ldr	x0, [x22, x4, lsl #3]
    2eb8:	ldp	x5, x2, [x2, #16]
    2ebc:	ldr	x3, [x3, #80]
    2ec0:	ldr	x4, [x22, x7]
    2ec4:	add	x2, x2, x3
    2ec8:	ldr	x3, [x5, #16]
    2ecc:	sub	x0, x0, x4
    2ed0:	add	x0, x0, x2
    2ed4:	add	x0, x0, x3
    2ed8:	str	x0, [x29, #320]
    2edc:	b	2690 <gomp_map_vars+0xe88>
    2ee0:	ldr	x0, [x29, #200]
    2ee4:	cbnz	x0, 2f04 <gomp_map_vars+0x16fc>
    2ee8:	add	x0, x29, #0x100
    2eec:	mov	x24, #0x0                   	// #0
    2ef0:	str	x0, [x29, #168]
    2ef4:	b	21c8 <gomp_map_vars+0x9c0>
    2ef8:	sub	x2, x0, #0x1
    2efc:	lsl	x2, x2, #4
    2f00:	b	1f88 <gomp_map_vars+0x780>
    2f04:	add	x0, x29, #0x100
    2f08:	str	x0, [x29, #168]
    2f0c:	b	2500 <gomp_map_vars+0xcf8>
    2f10:	ldr	x0, [x29, #128]
    2f14:	bl	0 <gomp_mutex_unlock_slow>
    2f18:	b	2e90 <gomp_map_vars+0x1688>
    2f1c:	ldr	x1, [x29, #128]
    2f20:	ldxr	w0, [x1]
    2f24:	stlxr	w2, wzr, [x1]
    2f28:	cbnz	w2, 2f20 <gomp_map_vars+0x1718>
    2f2c:	tbnz	w0, #31, 30b4 <gomp_map_vars+0x18ac>
    2f30:	adrp	x4, 0 <omp_target_memcpy_rect_worker>
    2f34:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
    2f38:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    2f3c:	add	x4, x4, #0x0
    2f40:	add	x1, x1, #0x0
    2f44:	add	x6, x20, x22
    2f48:	add	x0, x0, #0x0
    2f4c:	mov	x5, x20
    2f50:	add	x3, x19, x22
    2f54:	mov	x2, x19
    2f58:	bl	0 <gomp_fatal>
    2f5c:	ldr	x0, [x29, #128]
    2f60:	bl	2c8 <gomp_mutex_unlock>
    2f64:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    2f68:	add	x0, x0, #0x0
    2f6c:	bl	0 <gomp_fatal>
    2f70:	ldr	x1, [x29, #128]
    2f74:	mov	x6, x10
    2f78:	ldxr	w0, [x1]
    2f7c:	stlxr	w2, wzr, [x1]
    2f80:	cbnz	w2, 2f78 <gomp_map_vars+0x1770>
    2f84:	tbnz	w0, #31, 2fa8 <gomp_map_vars+0x17a0>
    2f88:	ldp	x3, x4, [x6]
    2f8c:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    2f90:	ldp	x1, x2, [x29, #296]
    2f94:	add	x0, x0, #0x0
    2f98:	bl	0 <gomp_fatal>
    2f9c:	ldr	x0, [x29, #128]
    2fa0:	bl	0 <gomp_mutex_lock_slow>
    2fa4:	b	18ec <gomp_map_vars+0xe4>
    2fa8:	ldr	x0, [x29, #128]
    2fac:	str	x6, [x29, #232]
    2fb0:	bl	0 <gomp_mutex_unlock_slow>
    2fb4:	ldr	x6, [x29, #232]
    2fb8:	b	2f88 <gomp_map_vars+0x1780>
    2fbc:	ldp	x1, x19, [x27]
    2fc0:	ldr	x0, [x29, #128]
    2fc4:	sub	x19, x19, x1
    2fc8:	bl	2c8 <gomp_mutex_unlock>
    2fcc:	ldr	x1, [x27]
    2fd0:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    2fd4:	mov	x3, x19
    2fd8:	mov	x2, x19
    2fdc:	add	x0, x0, #0x0
    2fe0:	bl	0 <gomp_fatal>
    2fe4:	mov	x5, x1
    2fe8:	ldr	x1, [x29, #128]
    2fec:	ldxr	w0, [x1]
    2ff0:	stlxr	w2, wzr, [x1]
    2ff4:	cbnz	w2, 2fec <gomp_map_vars+0x17e4>
    2ff8:	tbnz	w0, #31, 30e0 <gomp_map_vars+0x18d8>
    2ffc:	adrp	x4, 0 <omp_target_memcpy_rect_worker>
    3000:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
    3004:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    3008:	add	x4, x4, #0x0
    300c:	add	x1, x1, #0x0
    3010:	add	x6, x5, #0x8
    3014:	add	x0, x0, #0x0
    3018:	add	x2, x29, #0xf8
    301c:	add	x3, x29, #0x100
    3020:	bl	0 <gomp_fatal>
    3024:	ldr	x25, [x29, #232]
    3028:	mov	x1, x13
    302c:	add	x3, x27, #0x8
    3030:	mov	x2, x27
    3034:	mov	x0, x25
    3038:	bl	a30 <gomp_map_vars_existing.isra.0.part.0>
    303c:	ldr	x0, [x29, #128]
    3040:	bl	2c8 <gomp_mutex_unlock>
    3044:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    3048:	add	x0, x0, #0x0
    304c:	bl	0 <gomp_fatal>
    3050:	ldr	x0, [x29, #128]
    3054:	stp	x1, x2, [x29, #216]
    3058:	str	x3, [x29, #232]
    305c:	bl	2c8 <gomp_mutex_unlock>
    3060:	ldp	x5, x2, [x29, #216]
    3064:	adrp	x4, 0 <omp_target_memcpy_rect_worker>
    3068:	ldr	x3, [x29, #232]
    306c:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
    3070:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    3074:	add	x4, x4, #0x0
    3078:	add	x1, x1, #0x0
    307c:	add	x0, x0, #0x0
    3080:	add	x6, x5, x3
    3084:	add	x3, x2, x3
    3088:	bl	0 <gomp_fatal>
    308c:	ldr	x0, [x29, #128]
    3090:	bl	2c8 <gomp_mutex_unlock>
    3094:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    3098:	add	x0, x0, #0x0
    309c:	bl	0 <gomp_fatal>
    30a0:	ldr	x0, [x29, #128]
    30a4:	bl	2c8 <gomp_mutex_unlock>
    30a8:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    30ac:	add	x0, x0, #0x0
    30b0:	bl	0 <gomp_fatal>
    30b4:	ldr	x0, [x29, #128]
    30b8:	bl	0 <gomp_mutex_unlock_slow>
    30bc:	b	2f30 <gomp_map_vars+0x1728>
    30c0:	adrp	x3, 0 <omp_target_memcpy_rect_worker>
    30c4:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
    30c8:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    30cc:	add	x3, x3, #0x0
    30d0:	add	x1, x1, #0x0
    30d4:	add	x0, x0, #0x0
    30d8:	mov	w2, #0x3b4                 	// #948
    30dc:	bl	0 <__assert_fail>
    30e0:	ldr	x0, [x29, #128]
    30e4:	str	x5, [x29, #232]
    30e8:	bl	0 <gomp_mutex_unlock_slow>
    30ec:	ldr	x5, [x29, #232]
    30f0:	b	2ffc <gomp_map_vars+0x17f4>
    30f4:	nop

00000000000030f8 <gomp_remove_var>:
    30f8:	stp	x29, x30, [sp, #-48]!
    30fc:	mov	x29, sp
    3100:	stp	x19, x20, [sp, #16]
    3104:	mov	x19, x1
    3108:	add	x20, x0, #0xa0
    310c:	mov	x0, x20
    3110:	bl	0 <splay_tree_prefix_splay_tree_remove>
    3114:	ldr	x1, [x19, #48]
    3118:	cbz	x1, 3124 <gomp_remove_var+0x2c>
    311c:	mov	x0, x20
    3120:	bl	0 <splay_tree_prefix_splay_tree_insert>
    3124:	ldr	x19, [x19, #16]
    3128:	ldr	x0, [x19]
    312c:	cmp	x0, #0x1
    3130:	b.ls	314c <gomp_remove_var+0x54>  // b.plast
    3134:	sub	x1, x0, #0x1
    3138:	str	x1, [x19]
    313c:	mov	w0, #0x0                   	// #0
    3140:	ldp	x19, x20, [sp, #16]
    3144:	ldp	x29, x30, [sp], #48
    3148:	ret
    314c:	ldr	x0, [x19, #24]
    3150:	cbnz	x0, 3174 <gomp_remove_var+0x7c>
    3154:	ldr	x0, [x19, #8]
    3158:	bl	0 <free>
    315c:	mov	x0, x19
    3160:	bl	0 <free>
    3164:	mov	w0, #0x1                   	// #1
    3168:	ldp	x19, x20, [sp, #16]
    316c:	ldp	x29, x30, [sp], #48
    3170:	ret
    3174:	ldr	x20, [x19, #56]
    3178:	ldr	w0, [x20, #12]
    317c:	ldr	x2, [x20, #104]
    3180:	str	x21, [sp, #32]
    3184:	ldr	x21, [x19, #32]
    3188:	mov	x1, x21
    318c:	blr	x2
    3190:	tst	w0, #0xff
    3194:	b.eq	31a0 <gomp_remove_var+0xa8>  // b.none
    3198:	ldr	x21, [sp, #32]
    319c:	b	3154 <gomp_remove_var+0x5c>
    31a0:	add	x0, x20, #0xa8
    31a4:	bl	2c8 <gomp_mutex_unlock>
    31a8:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    31ac:	mov	x1, x21
    31b0:	add	x0, x0, #0x0
    31b4:	bl	0 <gomp_fatal>

00000000000031b8 <gomp_unmap_vars>:
    31b8:	stp	x29, x30, [sp, #-112]!
    31bc:	and	w1, w1, #0xff
    31c0:	mov	x29, sp
    31c4:	str	w1, [sp, #100]
    31c8:	ldr	x1, [x0, #48]
    31cc:	cbz	x1, 33cc <gomp_unmap_vars+0x214>
    31d0:	stp	x23, x24, [sp, #48]
    31d4:	mov	x23, x0
    31d8:	mov	w0, #0x1                   	// #1
    31dc:	stp	x25, x26, [sp, #64]
    31e0:	ldr	x26, [x23, #56]
    31e4:	add	x1, x26, #0xa8
    31e8:	str	x1, [sp, #104]
    31ec:	mov	x2, x1
    31f0:	ldaxr	w1, [x2]
    31f4:	cbnz	w1, 3200 <gomp_unmap_vars+0x48>
    31f8:	stxr	w3, w0, [x2]
    31fc:	cbnz	w3, 31f0 <gomp_unmap_vars+0x38>
    3200:	cmp	w1, #0x0
    3204:	b.ne	34d8 <gomp_unmap_vars+0x320>  // b.any
    3208:	ldr	w0, [x26, #172]
    320c:	cmp	w0, #0x2
    3210:	b.eq	33a4 <gomp_unmap_vars+0x1ec>  // b.none
    3214:	ldr	x0, [x23, #48]
    3218:	stp	x19, x20, [sp, #16]
    321c:	add	x25, x26, #0xa0
    3220:	stp	x21, x22, [sp, #32]
    3224:	add	x20, x23, #0x40
    3228:	mov	x21, #0x0                   	// #0
    322c:	cbz	x0, 32f0 <gomp_unmap_vars+0x138>
    3230:	stp	x27, x28, [sp, #80]
    3234:	nop
    3238:	ldr	x19, [x20]
    323c:	cbz	x19, 32dc <gomp_unmap_vars+0x124>
    3240:	ldr	x1, [x19, #32]
    3244:	sub	x2, x1, #0x2
    3248:	cmn	x2, #0x4
    324c:	b.hi	3330 <gomp_unmap_vars+0x178>  // b.pmore
    3250:	ldrb	w2, [x20, #9]
    3254:	sub	x1, x1, #0x1
    3258:	str	x1, [x19, #32]
    325c:	cbz	w2, 32dc <gomp_unmap_vars+0x124>
    3260:	mov	w28, #0x0                   	// #0
    3264:	ldp	x5, x24, [x20, #16]
    3268:	ldp	x1, x22, [x19, #16]
    326c:	ldr	x27, [x19]
    3270:	ldr	w0, [x26, #12]
    3274:	mov	x3, x24
    3278:	add	x27, x5, x27
    327c:	add	x22, x5, x22
    3280:	ldr	x2, [x1, #16]
    3284:	mov	x1, x27
    3288:	ldr	x5, [x26, #112]
    328c:	add	x22, x22, x2
    3290:	mov	x2, x22
    3294:	blr	x5
    3298:	tst	w0, #0xff
    329c:	b.eq	348c <gomp_unmap_vars+0x2d4>  // b.none
    32a0:	cbz	w28, 338c <gomp_unmap_vars+0x1d4>
    32a4:	mov	x1, x19
    32a8:	mov	x0, x25
    32ac:	bl	0 <splay_tree_prefix_splay_tree_remove>
    32b0:	ldr	x1, [x19, #48]
    32b4:	cbz	x1, 32c0 <gomp_unmap_vars+0x108>
    32b8:	mov	x0, x25
    32bc:	bl	0 <splay_tree_prefix_splay_tree_insert>
    32c0:	ldr	x19, [x19, #16]
    32c4:	ldr	x0, [x19]
    32c8:	cmp	x0, #0x1
    32cc:	b.ls	3374 <gomp_unmap_vars+0x1bc>  // b.plast
    32d0:	sub	x0, x0, #0x1
    32d4:	str	x0, [x19]
    32d8:	ldr	x0, [x23, #48]
    32dc:	add	x21, x21, #0x1
    32e0:	cmp	x21, x0
    32e4:	add	x20, x20, #0x20
    32e8:	b.cc	3238 <gomp_unmap_vars+0x80>  // b.lo, b.ul, b.last
    32ec:	ldp	x27, x28, [sp, #80]
    32f0:	ldr	x0, [x23]
    32f4:	cmp	x0, #0x1
    32f8:	b.ls	33d4 <gomp_unmap_vars+0x21c>  // b.plast
    32fc:	sub	x0, x0, #0x1
    3300:	str	x0, [x23]
    3304:	ldr	x1, [sp, #104]
    3308:	ldxr	w0, [x1]
    330c:	stlxr	w2, wzr, [x1]
    3310:	cbnz	w2, 3308 <gomp_unmap_vars+0x150>
    3314:	tbnz	w0, #31, 3428 <gomp_unmap_vars+0x270>
    3318:	ldp	x19, x20, [sp, #16]
    331c:	ldp	x21, x22, [sp, #32]
    3320:	ldp	x23, x24, [sp, #48]
    3324:	ldp	x25, x26, [sp, #64]
    3328:	ldp	x29, x30, [sp], #112
    332c:	ret
    3330:	cmp	x1, #0x1
    3334:	b.eq	3354 <gomp_unmap_vars+0x19c>  // b.none
    3338:	ldrb	w1, [x20, #9]
    333c:	cbnz	w1, 3260 <gomp_unmap_vars+0xa8>
    3340:	add	x21, x21, #0x1
    3344:	add	x20, x20, #0x20
    3348:	cmp	x21, x0
    334c:	b.cc	3238 <gomp_unmap_vars+0x80>  // b.lo, b.ul, b.last
    3350:	b	32ec <gomp_unmap_vars+0x134>
    3354:	ldr	w0, [sp, #100]
    3358:	str	xzr, [x19, #32]
    335c:	cbz	w0, 3368 <gomp_unmap_vars+0x1b0>
    3360:	ldrb	w28, [x20, #8]
    3364:	cbnz	w28, 3264 <gomp_unmap_vars+0xac>
    3368:	ldrb	w28, [x20, #9]
    336c:	cbz	w28, 32a4 <gomp_unmap_vars+0xec>
    3370:	b	3264 <gomp_unmap_vars+0xac>
    3374:	ldr	x0, [x19, #24]
    3378:	cbnz	x0, 33f0 <gomp_unmap_vars+0x238>
    337c:	ldr	x0, [x19, #8]
    3380:	bl	0 <free>
    3384:	mov	x0, x19
    3388:	bl	0 <free>
    338c:	ldr	x0, [x23, #48]
    3390:	add	x21, x21, #0x1
    3394:	add	x20, x20, #0x20
    3398:	cmp	x21, x0
    339c:	b.cc	3238 <gomp_unmap_vars+0x80>  // b.lo, b.ul, b.last
    33a0:	b	32ec <gomp_unmap_vars+0x134>
    33a4:	ldr	x1, [sp, #104]
    33a8:	ldxr	w0, [x1]
    33ac:	stlxr	w2, wzr, [x1]
    33b0:	cbnz	w2, 33a8 <gomp_unmap_vars+0x1f0>
    33b4:	tbnz	w0, #31, 3480 <gomp_unmap_vars+0x2c8>
    33b8:	ldr	x0, [x23, #8]
    33bc:	bl	0 <free>
    33c0:	mov	x0, x23
    33c4:	ldp	x23, x24, [sp, #48]
    33c8:	ldp	x25, x26, [sp, #64]
    33cc:	ldp	x29, x30, [sp], #112
    33d0:	b	0 <free>
    33d4:	ldr	x0, [x23, #24]
    33d8:	cbnz	x0, 3444 <gomp_unmap_vars+0x28c>
    33dc:	ldr	x0, [x23, #8]
    33e0:	bl	0 <free>
    33e4:	mov	x0, x23
    33e8:	bl	0 <free>
    33ec:	b	3304 <gomp_unmap_vars+0x14c>
    33f0:	ldr	x22, [x19, #56]
    33f4:	ldr	x27, [x19, #32]
    33f8:	ldr	w0, [x22, #12]
    33fc:	ldr	x2, [x22, #104]
    3400:	mov	x1, x27
    3404:	blr	x2
    3408:	tst	w0, #0xff
    340c:	b.ne	337c <gomp_unmap_vars+0x1c4>  // b.any
    3410:	add	x0, x22, #0xa8
    3414:	bl	2c8 <gomp_mutex_unlock>
    3418:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    341c:	mov	x1, x27
    3420:	add	x0, x0, #0x0
    3424:	bl	0 <gomp_fatal>
    3428:	ldp	x19, x20, [sp, #16]
    342c:	ldp	x21, x22, [sp, #32]
    3430:	ldp	x23, x24, [sp, #48]
    3434:	ldp	x25, x26, [sp, #64]
    3438:	ldr	x0, [sp, #104]
    343c:	ldp	x29, x30, [sp], #112
    3440:	b	0 <gomp_mutex_unlock_slow>
    3444:	ldr	x19, [x23, #56]
    3448:	ldr	x20, [x23, #32]
    344c:	ldr	w0, [x19, #12]
    3450:	ldr	x2, [x19, #104]
    3454:	mov	x1, x20
    3458:	blr	x2
    345c:	tst	w0, #0xff
    3460:	b.ne	33dc <gomp_unmap_vars+0x224>  // b.any
    3464:	add	x0, x19, #0xa8
    3468:	stp	x27, x28, [sp, #80]
    346c:	bl	2c8 <gomp_mutex_unlock>
    3470:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    3474:	mov	x1, x20
    3478:	add	x0, x0, #0x0
    347c:	bl	0 <gomp_fatal>
    3480:	ldr	x0, [sp, #104]
    3484:	bl	0 <gomp_mutex_unlock_slow>
    3488:	b	33b8 <gomp_unmap_vars+0x200>
    348c:	ldr	x1, [sp, #104]
    3490:	ldxr	w0, [x1]
    3494:	stlxr	w2, wzr, [x1]
    3498:	cbnz	w2, 3490 <gomp_unmap_vars+0x2d8>
    349c:	tbnz	w0, #31, 34cc <gomp_unmap_vars+0x314>
    34a0:	adrp	x4, 0 <omp_target_memcpy_rect_worker>
    34a4:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
    34a8:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    34ac:	add	x4, x4, #0x0
    34b0:	add	x1, x1, #0x0
    34b4:	add	x6, x27, x24
    34b8:	add	x0, x0, #0x0
    34bc:	mov	x5, x27
    34c0:	add	x3, x22, x24
    34c4:	mov	x2, x22
    34c8:	bl	0 <gomp_fatal>
    34cc:	ldr	x0, [sp, #104]
    34d0:	bl	0 <gomp_mutex_unlock_slow>
    34d4:	b	34a0 <gomp_unmap_vars+0x2e8>
    34d8:	ldr	x0, [sp, #104]
    34dc:	bl	0 <gomp_mutex_lock_slow>
    34e0:	b	3208 <gomp_unmap_vars+0x50>
    34e4:	nop

00000000000034e8 <GOMP_offload_register_ver>:
    34e8:	stp	x29, x30, [sp, #-96]!
    34ec:	mov	x29, sp
    34f0:	stp	x19, x20, [sp, #16]
    34f4:	stp	x21, x22, [sp, #32]
    34f8:	stp	x23, x24, [sp, #48]
    34fc:	mov	w24, w0
    3500:	lsr	w0, w0, #16
    3504:	stp	x25, x26, [sp, #64]
    3508:	cmp	w0, #0x1
    350c:	stp	x27, x28, [sp, #80]
    3510:	b.hi	3688 <GOMP_offload_register_ver+0x1a0>  // b.pmore
    3514:	adrp	x19, 0 <omp_target_memcpy_rect_worker>
    3518:	add	x21, x19, #0x0
    351c:	mov	x26, x1
    3520:	mov	x25, x3
    3524:	add	x0, x21, #0x10
    3528:	mov	w27, w2
    352c:	mov	w2, #0x1                   	// #1
    3530:	ldaxr	w1, [x0]
    3534:	cbnz	w1, 3540 <GOMP_offload_register_ver+0x58>
    3538:	stxr	w3, w2, [x0]
    353c:	cbnz	w3, 3530 <GOMP_offload_register_ver+0x48>
    3540:	cmp	w1, #0x0
    3544:	b.ne	3680 <GOMP_offload_register_ver+0x198>  // b.any
    3548:	ldr	w0, [x19]
    354c:	mov	x23, #0x0                   	// #0
    3550:	mov	w22, #0x0                   	// #0
    3554:	mov	w28, #0x1                   	// #1
    3558:	cmp	w0, #0x0
    355c:	b.gt	3588 <GOMP_offload_register_ver+0xa0>
    3560:	b	35dc <GOMP_offload_register_ver+0xf4>
    3564:	ldxr	w0, [x20]
    3568:	stlxr	w1, wzr, [x20]
    356c:	cbnz	w1, 3564 <GOMP_offload_register_ver+0x7c>
    3570:	tbnz	w0, #31, 3648 <GOMP_offload_register_ver+0x160>
    3574:	ldr	w0, [x21]
    3578:	add	w22, w22, #0x1
    357c:	add	x23, x23, #0x130
    3580:	cmp	w0, w22
    3584:	b.le	35dc <GOMP_offload_register_ver+0xf4>
    3588:	ldr	x19, [x21, #8]
    358c:	add	x19, x19, x23
    3590:	add	x20, x19, #0xa8
    3594:	ldaxr	w1, [x20]
    3598:	cbnz	w1, 35a4 <GOMP_offload_register_ver+0xbc>
    359c:	stxr	w0, w28, [x20]
    35a0:	cbnz	w0, 3594 <GOMP_offload_register_ver+0xac>
    35a4:	cmp	w1, #0x0
    35a8:	b.ne	3674 <GOMP_offload_register_ver+0x18c>  // b.any
    35ac:	ldr	w0, [x19, #16]
    35b0:	cmp	w0, w27
    35b4:	b.ne	3564 <GOMP_offload_register_ver+0x7c>  // b.any
    35b8:	ldr	w4, [x19, #172]
    35bc:	cmp	w4, #0x1
    35c0:	b.ne	3564 <GOMP_offload_register_ver+0x7c>  // b.any
    35c4:	mov	x0, x19
    35c8:	mov	x3, x25
    35cc:	mov	x2, x26
    35d0:	mov	w1, w24
    35d4:	bl	e10 <gomp_load_image_to_device>
    35d8:	b	3564 <GOMP_offload_register_ver+0x7c>
    35dc:	ldr	w20, [x21, #24]
    35e0:	mov	w19, #0x18                  	// #24
    35e4:	ldr	x0, [x21, #32]
    35e8:	add	w20, w20, #0x1
    35ec:	smull	x19, w20, w19
    35f0:	mov	x1, x19
    35f4:	bl	0 <realloc>
    35f8:	cbz	x0, 369c <GOMP_offload_register_ver+0x1b4>
    35fc:	sub	x19, x19, #0x18
    3600:	add	x21, x21, #0x10
    3604:	add	x1, x0, x19
    3608:	str	w20, [x21, #8]
    360c:	str	x0, [x21, #16]
    3610:	str	w24, [x0, x19]
    3614:	str	w27, [x1, #4]
    3618:	stp	x26, x25, [x1, #8]
    361c:	ldxr	w0, [x21]
    3620:	stlxr	w1, wzr, [x21]
    3624:	cbnz	w1, 361c <GOMP_offload_register_ver+0x134>
    3628:	tbnz	w0, #31, 3654 <GOMP_offload_register_ver+0x16c>
    362c:	ldp	x19, x20, [sp, #16]
    3630:	ldp	x21, x22, [sp, #32]
    3634:	ldp	x23, x24, [sp, #48]
    3638:	ldp	x25, x26, [sp, #64]
    363c:	ldp	x27, x28, [sp, #80]
    3640:	ldp	x29, x30, [sp], #96
    3644:	ret
    3648:	mov	x0, x20
    364c:	bl	0 <gomp_mutex_unlock_slow>
    3650:	b	3574 <GOMP_offload_register_ver+0x8c>
    3654:	mov	x0, x21
    3658:	ldp	x19, x20, [sp, #16]
    365c:	ldp	x21, x22, [sp, #32]
    3660:	ldp	x23, x24, [sp, #48]
    3664:	ldp	x25, x26, [sp, #64]
    3668:	ldp	x27, x28, [sp, #80]
    366c:	ldp	x29, x30, [sp], #96
    3670:	b	0 <gomp_mutex_unlock_slow>
    3674:	mov	x0, x20
    3678:	bl	0 <gomp_mutex_lock_slow>
    367c:	b	35ac <GOMP_offload_register_ver+0xc4>
    3680:	bl	0 <gomp_mutex_lock_slow>
    3684:	b	3548 <GOMP_offload_register_ver+0x60>
    3688:	mov	w2, w0
    368c:	mov	w1, #0x1                   	// #1
    3690:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    3694:	add	x0, x0, #0x0
    3698:	bl	0 <gomp_fatal>
    369c:	add	x0, x21, #0x10
    36a0:	bl	2c8 <gomp_mutex_unlock>
    36a4:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    36a8:	mov	x1, x19
    36ac:	add	x0, x0, #0x0
    36b0:	bl	0 <gomp_fatal>
    36b4:	nop

00000000000036b8 <GOMP_offload_register>:
    36b8:	mov	w4, w1
    36bc:	mov	x3, x2
    36c0:	mov	x1, x0
    36c4:	mov	w2, w4
    36c8:	mov	w0, #0x0                   	// #0
    36cc:	b	34e8 <GOMP_offload_register_ver>

00000000000036d0 <GOMP_offload_unregister_ver>:
    36d0:	stp	x29, x30, [sp, #-96]!
    36d4:	mov	x29, sp
    36d8:	stp	x19, x20, [sp, #16]
    36dc:	adrp	x19, 0 <omp_target_memcpy_rect_worker>
    36e0:	stp	x23, x24, [sp, #48]
    36e4:	add	x23, x19, #0x0
    36e8:	mov	w24, w0
    36ec:	add	x0, x23, #0x10
    36f0:	stp	x25, x26, [sp, #64]
    36f4:	mov	x25, x1
    36f8:	mov	x26, x3
    36fc:	stp	x21, x22, [sp, #32]
    3700:	stp	x27, x28, [sp, #80]
    3704:	mov	w27, w2
    3708:	mov	w2, #0x1                   	// #1
    370c:	ldaxr	w1, [x0]
    3710:	cbnz	w1, 371c <GOMP_offload_unregister_ver+0x4c>
    3714:	stxr	w3, w2, [x0]
    3718:	cbnz	w3, 370c <GOMP_offload_unregister_ver+0x3c>
    371c:	cmp	w1, #0x0
    3720:	b.ne	388c <GOMP_offload_unregister_ver+0x1bc>  // b.any
    3724:	ldr	w0, [x19]
    3728:	mov	x22, #0x0                   	// #0
    372c:	mov	w21, #0x0                   	// #0
    3730:	mov	w28, #0x1                   	// #1
    3734:	cmp	w0, #0x0
    3738:	b.gt	3764 <GOMP_offload_unregister_ver+0x94>
    373c:	b	37d8 <GOMP_offload_unregister_ver+0x108>
    3740:	ldxr	w4, [x20]
    3744:	stlxr	w0, wzr, [x20]
    3748:	cbnz	w0, 3740 <GOMP_offload_unregister_ver+0x70>
    374c:	tbnz	w4, #31, 37b8 <GOMP_offload_unregister_ver+0xe8>
    3750:	ldr	w0, [x23]
    3754:	add	w21, w21, #0x1
    3758:	add	x22, x22, #0x130
    375c:	cmp	w0, w21
    3760:	b.le	37d8 <GOMP_offload_unregister_ver+0x108>
    3764:	ldr	x19, [x23, #8]
    3768:	add	x19, x19, x22
    376c:	add	x20, x19, #0xa8
    3770:	ldaxr	w1, [x20]
    3774:	cbnz	w1, 3780 <GOMP_offload_unregister_ver+0xb0>
    3778:	stxr	w0, w28, [x20]
    377c:	cbnz	w0, 3770 <GOMP_offload_unregister_ver+0xa0>
    3780:	cmp	w1, #0x0
    3784:	b.ne	3880 <GOMP_offload_unregister_ver+0x1b0>  // b.any
    3788:	ldr	w4, [x19, #16]
    378c:	cmp	w4, w27
    3790:	b.ne	3740 <GOMP_offload_unregister_ver+0x70>  // b.any
    3794:	ldr	w0, [x19, #172]
    3798:	cmp	w0, #0x1
    379c:	b.ne	3740 <GOMP_offload_unregister_ver+0x70>  // b.any
    37a0:	mov	x0, x19
    37a4:	mov	x3, x26
    37a8:	mov	x2, x25
    37ac:	mov	w1, w24
    37b0:	bl	7a0 <gomp_unload_image_from_device>
    37b4:	b	3740 <GOMP_offload_unregister_ver+0x70>
    37b8:	mov	x0, x20
    37bc:	bl	0 <gomp_mutex_unlock_slow>
    37c0:	ldr	w0, [x23]
    37c4:	add	w21, w21, #0x1
    37c8:	add	x22, x22, #0x130
    37cc:	cmp	w21, w0
    37d0:	b.lt	3764 <GOMP_offload_unregister_ver+0x94>  // b.tstop
    37d4:	nop
    37d8:	ldr	w0, [x23, #24]
    37dc:	cmp	w0, #0x0
    37e0:	b.le	3834 <GOMP_offload_unregister_ver+0x164>
    37e4:	ldr	x4, [x23, #32]
    37e8:	sub	w3, w0, #0x1
    37ec:	mov	w2, #0x18                  	// #24
    37f0:	add	x1, x4, #0x18
    37f4:	mov	x0, x4
    37f8:	umaddl	x2, w3, w2, x1
    37fc:	b	380c <GOMP_offload_unregister_ver+0x13c>
    3800:	add	x0, x0, #0x18
    3804:	cmp	x2, x0
    3808:	b.eq	3834 <GOMP_offload_unregister_ver+0x164>  // b.none
    380c:	ldr	x1, [x0, #16]
    3810:	cmp	x1, x26
    3814:	b.ne	3800 <GOMP_offload_unregister_ver+0x130>  // b.any
    3818:	mov	w1, #0x18                  	// #24
    381c:	str	w3, [x23, #24]
    3820:	smaddl	x3, w3, w1, x4
    3824:	ldp	x4, x5, [x3]
    3828:	stp	x4, x5, [x0]
    382c:	ldr	x1, [x3, #16]
    3830:	str	x1, [x0, #16]
    3834:	add	x0, x23, #0x10
    3838:	ldxr	w1, [x0]
    383c:	stlxr	w2, wzr, [x0]
    3840:	cbnz	w2, 3838 <GOMP_offload_unregister_ver+0x168>
    3844:	tbnz	w1, #31, 3864 <GOMP_offload_unregister_ver+0x194>
    3848:	ldp	x19, x20, [sp, #16]
    384c:	ldp	x21, x22, [sp, #32]
    3850:	ldp	x23, x24, [sp, #48]
    3854:	ldp	x25, x26, [sp, #64]
    3858:	ldp	x27, x28, [sp, #80]
    385c:	ldp	x29, x30, [sp], #96
    3860:	ret
    3864:	ldp	x19, x20, [sp, #16]
    3868:	ldp	x21, x22, [sp, #32]
    386c:	ldp	x23, x24, [sp, #48]
    3870:	ldp	x25, x26, [sp, #64]
    3874:	ldp	x27, x28, [sp, #80]
    3878:	ldp	x29, x30, [sp], #96
    387c:	b	0 <gomp_mutex_unlock_slow>
    3880:	mov	x0, x20
    3884:	bl	0 <gomp_mutex_lock_slow>
    3888:	b	3788 <GOMP_offload_unregister_ver+0xb8>
    388c:	bl	0 <gomp_mutex_lock_slow>
    3890:	b	3724 <GOMP_offload_unregister_ver+0x54>
    3894:	nop

0000000000003898 <GOMP_offload_unregister>:
    3898:	mov	w4, w1
    389c:	mov	x3, x2
    38a0:	mov	x1, x0
    38a4:	mov	w2, w4
    38a8:	mov	w0, #0x0                   	// #0
    38ac:	b	36d0 <GOMP_offload_unregister_ver>

00000000000038b0 <gomp_init_device>:
    38b0:	stp	x29, x30, [sp, #-48]!
    38b4:	mov	x29, sp
    38b8:	stp	x21, x22, [sp, #32]
    38bc:	mov	x22, x0
    38c0:	ldr	w0, [x0, #12]
    38c4:	ldr	x1, [x22, #56]
    38c8:	blr	x1
    38cc:	tst	w0, #0xff
    38d0:	b.eq	3964 <gomp_init_device+0xb4>  // b.none
    38d4:	adrp	x21, 0 <omp_target_memcpy_rect_worker>
    38d8:	add	x21, x21, #0x0
    38dc:	ldr	w4, [x21, #24]
    38e0:	cmp	w4, #0x0
    38e4:	b.le	3920 <gomp_init_device+0x70>
    38e8:	ldr	w5, [x22, #16]
    38ec:	stp	x19, x20, [sp, #16]
    38f0:	mov	x19, #0x0                   	// #0
    38f4:	mov	w20, #0x0                   	// #0
    38f8:	ldr	x1, [x21, #32]
    38fc:	add	x3, x1, x19
    3900:	ldr	w2, [x3, #4]
    3904:	cmp	w2, w5
    3908:	b.eq	3934 <gomp_init_device+0x84>  // b.none
    390c:	add	w20, w20, #0x1
    3910:	add	x19, x19, #0x18
    3914:	cmp	w20, w4
    3918:	b.lt	38f8 <gomp_init_device+0x48>  // b.tstop
    391c:	ldp	x19, x20, [sp, #16]
    3920:	mov	w0, #0x1                   	// #1
    3924:	str	w0, [x22, #172]
    3928:	ldp	x21, x22, [sp, #32]
    392c:	ldp	x29, x30, [sp], #48
    3930:	ret
    3934:	ldp	x2, x3, [x3, #8]
    3938:	mov	w4, #0x0                   	// #0
    393c:	ldr	w1, [x1, x19]
    3940:	mov	x0, x22
    3944:	add	w20, w20, #0x1
    3948:	add	x19, x19, #0x18
    394c:	bl	e10 <gomp_load_image_to_device>
    3950:	ldr	w4, [x21, #24]
    3954:	cmp	w20, w4
    3958:	b.ge	391c <gomp_init_device+0x6c>  // b.tcont
    395c:	ldr	w5, [x22, #16]
    3960:	b	38f8 <gomp_init_device+0x48>
    3964:	add	x0, x22, #0xa8
    3968:	stp	x19, x20, [sp, #16]
    396c:	bl	2c8 <gomp_mutex_unlock>
    3970:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    3974:	add	x0, x0, #0x0
    3978:	bl	0 <gomp_fatal>
    397c:	nop

0000000000003980 <resolve_device>:
    3980:	stp	x29, x30, [sp, #-32]!
    3984:	cmn	w0, #0x1
    3988:	mov	x29, sp
    398c:	stp	x19, x20, [sp, #16]
    3990:	mov	w19, w0
    3994:	b.eq	3a30 <resolve_device+0xb0>  // b.none
    3998:	tbnz	w19, #31, 3a60 <resolve_device+0xe0>
    399c:	adrp	x20, 0 <omp_target_memcpy_rect_worker>
    39a0:	add	x20, x20, #0x0
    39a4:	add	x0, x20, #0x14
    39a8:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
    39ac:	add	x1, x1, #0x0
    39b0:	bl	0 <pthread_once>
    39b4:	ldr	w0, [x20, #4]
    39b8:	cmp	w19, w0
    39bc:	b.ge	3a60 <resolve_device+0xe0>  // b.tcont
    39c0:	mov	w1, #0x130                 	// #304
    39c4:	mov	w2, #0x1                   	// #1
    39c8:	ldr	x0, [x20, #8]
    39cc:	smull	x19, w19, w1
    39d0:	add	x0, x0, x19
    39d4:	add	x0, x0, #0xa8
    39d8:	ldaxr	w1, [x0]
    39dc:	cbnz	w1, 39e8 <resolve_device+0x68>
    39e0:	stxr	w3, w2, [x0]
    39e4:	cbnz	w3, 39d8 <resolve_device+0x58>
    39e8:	cmp	w1, #0x0
    39ec:	b.ne	3aa8 <resolve_device+0x128>  // b.any
    39f0:	ldr	x0, [x20, #8]
    39f4:	add	x0, x0, x19
    39f8:	ldr	w1, [x0, #172]
    39fc:	cbz	w1, 3a70 <resolve_device+0xf0>
    3a00:	add	x0, x0, #0xa8
    3a04:	cmp	w1, #0x2
    3a08:	b.eq	3a84 <resolve_device+0x104>  // b.none
    3a0c:	ldxr	w1, [x0]
    3a10:	stlxr	w2, wzr, [x0]
    3a14:	cbnz	w2, 3a0c <resolve_device+0x8c>
    3a18:	tbnz	w1, #31, 3aa0 <resolve_device+0x120>
    3a1c:	ldr	x0, [x20, #8]
    3a20:	add	x0, x0, x19
    3a24:	ldp	x19, x20, [sp, #16]
    3a28:	ldp	x29, x30, [sp], #32
    3a2c:	ret
    3a30:	adrp	x2, 0 <gomp_tls_data>
    3a34:	ldr	x2, [x2]
    3a38:	mrs	x1, tpidr_el0
    3a3c:	adrp	x0, 0 <gomp_global_icv>
    3a40:	add	x0, x0, #0x0
    3a44:	add	x1, x1, x2
    3a48:	ldr	x1, [x1, #80]
    3a4c:	cmp	x1, #0x0
    3a50:	add	x1, x1, #0x90
    3a54:	csel	x0, x0, x1, eq  // eq = none
    3a58:	ldr	w19, [x0, #16]
    3a5c:	tbz	w19, #31, 399c <resolve_device+0x1c>
    3a60:	mov	x0, #0x0                   	// #0
    3a64:	ldp	x19, x20, [sp, #16]
    3a68:	ldp	x29, x30, [sp], #32
    3a6c:	ret
    3a70:	bl	38b0 <gomp_init_device>
    3a74:	ldr	x0, [x20, #8]
    3a78:	add	x0, x0, x19
    3a7c:	add	x0, x0, #0xa8
    3a80:	b	3a0c <resolve_device+0x8c>
    3a84:	ldxr	w1, [x0]
    3a88:	stlxr	w2, wzr, [x0]
    3a8c:	cbnz	w2, 3a84 <resolve_device+0x104>
    3a90:	tbz	w1, #31, 3a60 <resolve_device+0xe0>
    3a94:	bl	0 <gomp_mutex_unlock_slow>
    3a98:	mov	x0, #0x0                   	// #0
    3a9c:	b	3a64 <resolve_device+0xe4>
    3aa0:	bl	0 <gomp_mutex_unlock_slow>
    3aa4:	b	3a1c <resolve_device+0x9c>
    3aa8:	bl	0 <gomp_mutex_lock_slow>
    3aac:	b	39f0 <resolve_device+0x70>

0000000000003ab0 <gomp_unload_device>:
    3ab0:	stp	x29, x30, [sp, #-48]!
    3ab4:	mov	x29, sp
    3ab8:	stp	x19, x20, [sp, #16]
    3abc:	mov	x20, x0
    3ac0:	ldr	w0, [x0, #172]
    3ac4:	cmp	w0, #0x1
    3ac8:	b.eq	3ad8 <gomp_unload_device+0x28>  // b.none
    3acc:	ldp	x19, x20, [sp, #16]
    3ad0:	ldp	x29, x30, [sp], #48
    3ad4:	ret
    3ad8:	stp	x21, x22, [sp, #32]
    3adc:	adrp	x21, 0 <omp_target_memcpy_rect_worker>
    3ae0:	add	x21, x21, #0x0
    3ae4:	ldr	w0, [x21, #24]
    3ae8:	cbz	w0, 3b1c <gomp_unload_device+0x6c>
    3aec:	ldr	w5, [x20, #16]
    3af0:	mov	w19, #0x0                   	// #0
    3af4:	mov	w22, #0x18                  	// #24
    3af8:	ldr	x2, [x21, #32]
    3afc:	umull	x1, w19, w22
    3b00:	add	x3, x2, x1
    3b04:	ldr	w4, [x3, #4]
    3b08:	cmp	w4, w5
    3b0c:	b.eq	3b2c <gomp_unload_device+0x7c>  // b.none
    3b10:	add	w19, w19, #0x1
    3b14:	cmp	w0, w19
    3b18:	b.hi	3af8 <gomp_unload_device+0x48>  // b.pmore
    3b1c:	ldp	x19, x20, [sp, #16]
    3b20:	ldp	x21, x22, [sp, #32]
    3b24:	ldp	x29, x30, [sp], #48
    3b28:	ret
    3b2c:	ldr	w1, [x2, x1]
    3b30:	mov	x0, x20
    3b34:	ldp	x2, x3, [x3, #8]
    3b38:	add	w19, w19, #0x1
    3b3c:	bl	7a0 <gomp_unload_image_from_device>
    3b40:	ldr	w0, [x21, #24]
    3b44:	cmp	w0, w19
    3b48:	b.ls	3b1c <gomp_unload_device+0x6c>  // b.plast
    3b4c:	ldr	w5, [x20, #16]
    3b50:	b	3af8 <gomp_unload_device+0x48>
    3b54:	nop

0000000000003b58 <gomp_free_memmap>:
    3b58:	ldr	x1, [x0]
    3b5c:	cbz	x1, 3ba0 <gomp_free_memmap+0x48>
    3b60:	stp	x29, x30, [sp, #-32]!
    3b64:	mov	x29, sp
    3b68:	stp	x19, x20, [sp, #16]
    3b6c:	mov	x20, x0
    3b70:	mov	x0, x20
    3b74:	ldr	x19, [x1, #16]
    3b78:	bl	0 <splay_tree_prefix_splay_tree_remove>
    3b7c:	ldr	x0, [x19, #8]
    3b80:	bl	0 <free>
    3b84:	mov	x0, x19
    3b88:	bl	0 <free>
    3b8c:	ldr	x1, [x20]
    3b90:	cbnz	x1, 3b70 <gomp_free_memmap+0x18>
    3b94:	ldp	x19, x20, [sp, #16]
    3b98:	ldp	x29, x30, [sp], #32
    3b9c:	ret
    3ba0:	ret
    3ba4:	nop

0000000000003ba8 <GOMP_target>:
    3ba8:	stp	x29, x30, [sp, #-144]!
    3bac:	mov	x29, sp
    3bb0:	stp	x19, x20, [sp, #16]
    3bb4:	mov	x20, x1
    3bb8:	stp	x21, x22, [sp, #32]
    3bbc:	mov	x22, x3
    3bc0:	mov	x21, x4
    3bc4:	stp	x23, x24, [sp, #48]
    3bc8:	mov	x23, x5
    3bcc:	mov	x24, x6
    3bd0:	bl	3980 <resolve_device>
    3bd4:	cbz	x0, 3cd8 <GOMP_target+0x130>
    3bd8:	mov	x19, x0
    3bdc:	mov	w0, #0x5                   	// #5
    3be0:	ldr	w1, [x19, #8]
    3be4:	and	w0, w1, w0
    3be8:	cmp	w0, #0x4
    3bec:	b.ne	3cd8 <GOMP_target+0x130>  // b.any
    3bf0:	stp	x25, x26, [sp, #64]
    3bf4:	tbnz	w1, #1, 3d00 <GOMP_target+0x158>
    3bf8:	add	x25, x19, #0xa8
    3bfc:	mov	w0, #0x1                   	// #1
    3c00:	ldaxr	w1, [x25]
    3c04:	cbnz	w1, 3c10 <GOMP_target+0x68>
    3c08:	stxr	w2, w0, [x25]
    3c0c:	cbnz	w2, 3c00 <GOMP_target+0x58>
    3c10:	cmp	w1, #0x0
    3c14:	b.ne	3d18 <GOMP_target+0x170>  // b.any
    3c18:	ldr	w0, [x19, #172]
    3c1c:	cmp	w0, #0x2
    3c20:	b.eq	3cbc <GOMP_target+0x114>  // b.none
    3c24:	add	x2, x20, #0x1
    3c28:	add	x1, sp, #0x58
    3c2c:	add	x0, x19, #0xa0
    3c30:	stp	x20, x2, [sp, #88]
    3c34:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    3c38:	mov	x26, x0
    3c3c:	ldxr	w0, [x25]
    3c40:	stlxr	w1, wzr, [x25]
    3c44:	cbnz	w1, 3c3c <GOMP_target+0x94>
    3c48:	tbnz	w0, #31, 3d08 <GOMP_target+0x160>
    3c4c:	cbz	x26, 3cf8 <GOMP_target+0x150>
    3c50:	ldr	x25, [x26, #24]
    3c54:	cbz	x25, 3cf8 <GOMP_target+0x150>
    3c58:	mov	x5, x24
    3c5c:	mov	w7, #0x1                   	// #1
    3c60:	mov	w6, #0x0                   	// #0
    3c64:	mov	x4, x23
    3c68:	mov	x2, x21
    3c6c:	mov	x1, x22
    3c70:	mov	x0, x19
    3c74:	mov	x3, #0x0                   	// #0
    3c78:	bl	1808 <gomp_map_vars>
    3c7c:	mov	x20, x0
    3c80:	ldr	w0, [x19, #12]
    3c84:	mov	x3, #0x0                   	// #0
    3c88:	ldr	x4, [x19, #144]
    3c8c:	mov	x1, x25
    3c90:	ldr	x2, [x20, #16]
    3c94:	blr	x4
    3c98:	mov	x0, x20
    3c9c:	mov	w1, #0x1                   	// #1
    3ca0:	bl	31b8 <gomp_unmap_vars>
    3ca4:	ldp	x19, x20, [sp, #16]
    3ca8:	ldp	x21, x22, [sp, #32]
    3cac:	ldp	x23, x24, [sp, #48]
    3cb0:	ldp	x25, x26, [sp, #64]
    3cb4:	ldp	x29, x30, [sp], #144
    3cb8:	ret
    3cbc:	ldxr	w0, [x25]
    3cc0:	stlxr	w1, wzr, [x25]
    3cc4:	cbnz	w1, 3cbc <GOMP_target+0x114>
    3cc8:	tbz	w0, #31, 3cf8 <GOMP_target+0x150>
    3ccc:	mov	x0, x25
    3cd0:	bl	0 <gomp_mutex_unlock_slow>
    3cd4:	ldp	x25, x26, [sp, #64]
    3cd8:	mov	x1, x21
    3cdc:	mov	x0, x20
    3ce0:	bl	2e8 <gomp_target_fallback>
    3ce4:	ldp	x19, x20, [sp, #16]
    3ce8:	ldp	x21, x22, [sp, #32]
    3cec:	ldp	x23, x24, [sp, #48]
    3cf0:	ldp	x29, x30, [sp], #144
    3cf4:	ret
    3cf8:	ldp	x25, x26, [sp, #64]
    3cfc:	b	3cd8 <GOMP_target+0x130>
    3d00:	mov	x25, x20
    3d04:	b	3c54 <GOMP_target+0xac>
    3d08:	mov	x0, x25
    3d0c:	bl	0 <gomp_mutex_unlock_slow>
    3d10:	cbnz	x26, 3c50 <GOMP_target+0xa8>
    3d14:	b	3cf8 <GOMP_target+0x150>
    3d18:	mov	x0, x25
    3d1c:	bl	0 <gomp_mutex_lock_slow>
    3d20:	b	3c18 <GOMP_target+0x70>
    3d24:	nop

0000000000003d28 <GOMP_target_ext>:
    3d28:	stp	x29, x30, [sp, #-144]!
    3d2c:	mov	x29, sp
    3d30:	stp	x19, x20, [sp, #16]
    3d34:	mov	x20, x2
    3d38:	mov	x19, x5
    3d3c:	stp	x21, x22, [sp, #32]
    3d40:	mov	x22, x4
    3d44:	stp	x23, x24, [sp, #48]
    3d48:	mov	x23, x1
    3d4c:	mov	x24, x3
    3d50:	stp	x25, x26, [sp, #64]
    3d54:	mov	w25, w6
    3d58:	mov	x26, x7
    3d5c:	stp	x27, x28, [sp, #80]
    3d60:	sub	sp, sp, #0x10
    3d64:	bl	3980 <resolve_device>
    3d68:	mov	x21, x0
    3d6c:	tbz	w25, #0, 3ecc <GOMP_target_ext+0x1a4>
    3d70:	adrp	x28, 0 <gomp_tls_data>
    3d74:	ldr	x28, [x28]
    3d78:	mrs	x27, tpidr_el0
    3d7c:	add	x3, x27, x28
    3d80:	ldr	x0, [x3, #16]
    3d84:	cbz	x0, 3e30 <GOMP_target_ext+0x108>
    3d88:	add	x27, x27, x28
    3d8c:	ldr	x0, [x27, #80]
    3d90:	ldrb	w1, [x0, #205]
    3d94:	cbz	w1, 42b8 <GOMP_target_ext+0x590>
    3d98:	cbnz	x26, 3ee8 <GOMP_target_ext+0x1c0>
    3d9c:	nop
    3da0:	cbz	x21, 3f94 <GOMP_target_ext+0x26c>
    3da4:	ldr	w0, [x21, #8]
    3da8:	tbz	w0, #2, 3f94 <GOMP_target_ext+0x26c>
    3dac:	mov	x25, #0x0                   	// #0
    3db0:	mov	x27, #0x0                   	// #0
    3db4:	mov	w28, #0x0                   	// #0
    3db8:	mov	x26, x23
    3dbc:	tbnz	w0, #1, 3dd0 <GOMP_target_ext+0xa8>
    3dc0:	mov	x1, x23
    3dc4:	mov	x0, x21
    3dc8:	bl	a80 <gomp_get_target_fn_addr.part.0>
    3dcc:	mov	x26, x0
    3dd0:	cbz	x26, 4090 <GOMP_target_ext+0x368>
    3dd4:	ldr	x1, [x21, #136]
    3dd8:	cbz	x1, 3dec <GOMP_target_ext+0xc4>
    3ddc:	mov	x0, x26
    3de0:	blr	x1
    3de4:	tst	w0, #0xff
    3de8:	b.eq	4090 <GOMP_target_ext+0x368>  // b.none
    3dec:	ldr	w0, [x21, #8]
    3df0:	tbz	w0, #0, 4248 <GOMP_target_ext+0x520>
    3df4:	cbz	w28, 4154 <GOMP_target_ext+0x42c>
    3df8:	ldr	w0, [x21, #12]
    3dfc:	ldr	x4, [x21, #144]
    3e00:	mov	x2, x24
    3e04:	ldr	x3, [x29, #144]
    3e08:	mov	x1, x26
    3e0c:	blr	x4
    3e10:	mov	sp, x29
    3e14:	ldp	x19, x20, [sp, #16]
    3e18:	ldp	x21, x22, [sp, #32]
    3e1c:	ldp	x23, x24, [sp, #48]
    3e20:	ldp	x25, x26, [sp, #64]
    3e24:	ldp	x27, x28, [sp, #80]
    3e28:	ldp	x29, x30, [sp], #144
    3e2c:	ret
    3e30:	mov	w0, #0x1                   	// #1
    3e34:	str	x3, [x29, #136]
    3e38:	bl	0 <gomp_new_team>
    3e3c:	mov	x6, x0
    3e40:	ldr	x3, [x29, #136]
    3e44:	ldr	x7, [x3, #80]
    3e48:	cbz	x7, 42f0 <GOMP_target_ext+0x5c8>
    3e4c:	ldp	x4, x5, [x3, #16]
    3e50:	stp	x4, x5, [x0, #8]
    3e54:	add	x8, x0, #0x540
    3e58:	ldp	x4, x5, [x3, #32]
    3e5c:	stp	x4, x5, [x6, #24]
    3e60:	add	x11, x6, #0x100
    3e64:	ldp	x4, x5, [x3, #48]
    3e68:	stp	x4, x5, [x6, #40]
    3e6c:	mov	x0, x8
    3e70:	ldp	x4, x5, [x3, #64]
    3e74:	stp	x4, x5, [x6, #56]
    3e78:	add	x2, x7, #0x90
    3e7c:	stp	xzr, xzr, [x3, #64]
    3e80:	mov	x1, #0x0                   	// #0
    3e84:	stp	x6, x11, [x3, #16]
    3e88:	str	xzr, [x3, #32]
    3e8c:	str	wzr, [x3, #40]
    3e90:	str	x8, [x3, #80]
    3e94:	stp	x8, x7, [x29, #120]
    3e98:	bl	0 <gomp_init_task>
    3e9c:	ldp	x7, x3, [x29, #128]
    3ea0:	str	x7, [x3, #80]
    3ea4:	bl	0 <gomp_end_task>
    3ea8:	ldr	x7, [x29, #128]
    3eac:	mov	x0, x7
    3eb0:	bl	0 <free>
    3eb4:	ldr	x3, [x29, #136]
    3eb8:	ldr	x8, [x29, #120]
    3ebc:	str	x8, [x3, #80]
    3ec0:	add	x0, x27, x28
    3ec4:	ldr	x0, [x0, #16]
    3ec8:	cbnz	x0, 3d88 <GOMP_target_ext+0x60>
    3ecc:	cbz	x26, 3da0 <GOMP_target_ext+0x78>
    3ed0:	adrp	x0, 0 <gomp_tls_data>
    3ed4:	ldr	x0, [x0]
    3ed8:	mrs	x1, tpidr_el0
    3edc:	add	x0, x1, x0
    3ee0:	ldr	x0, [x0, #80]
    3ee4:	cbz	x0, 3da0 <GOMP_target_ext+0x78>
    3ee8:	ldr	x0, [x0, #56]
    3eec:	cbz	x0, 3da0 <GOMP_target_ext+0x78>
    3ef0:	cbz	x20, 4358 <GOMP_target_ext+0x630>
    3ef4:	mov	x25, #0x0                   	// #0
    3ef8:	mov	x27, #0x0                   	// #0
    3efc:	mov	x1, #0x0                   	// #0
    3f00:	mov	x4, #0x1                   	// #1
    3f04:	nop
    3f08:	ldrh	w0, [x19, x1, lsl #1]
    3f0c:	and	w2, w0, #0xff
    3f10:	cmp	w2, #0xc
    3f14:	b.ne	3f40 <GOMP_target_ext+0x218>  // b.any
    3f18:	lsr	w0, w0, #8
    3f1c:	sub	x25, x25, #0x1
    3f20:	ldr	x2, [x22, x1, lsl #3]
    3f24:	lsl	x0, x4, x0
    3f28:	add	x25, x25, x0
    3f2c:	neg	x3, x0
    3f30:	cmp	x27, x0
    3f34:	and	x25, x25, x3
    3f38:	csel	x27, x27, x0, cs  // cs = hs, nlast
    3f3c:	add	x25, x25, x2
    3f40:	add	x1, x1, #0x1
    3f44:	cmp	x20, x1
    3f48:	b.ne	3f08 <GOMP_target_ext+0x1e0>  // b.any
    3f4c:	cbnz	x27, 409c <GOMP_target_ext+0x374>
    3f50:	mov	x0, x26
    3f54:	bl	0 <gomp_task_maybe_wait_for_dependencies>
    3f58:	cbz	x21, 3f68 <GOMP_target_ext+0x240>
    3f5c:	ldr	w0, [x21, #8]
    3f60:	mov	w28, #0x1                   	// #1
    3f64:	tbnz	w0, #2, 3db8 <GOMP_target_ext+0x90>
    3f68:	mov	x1, x24
    3f6c:	mov	x0, x23
    3f70:	bl	2e8 <gomp_target_fallback>
    3f74:	mov	sp, x29
    3f78:	ldp	x19, x20, [sp, #16]
    3f7c:	ldp	x21, x22, [sp, #32]
    3f80:	ldp	x23, x24, [sp, #48]
    3f84:	ldp	x25, x26, [sp, #64]
    3f88:	ldp	x27, x28, [sp, #80]
    3f8c:	ldp	x29, x30, [sp], #144
    3f90:	ret
    3f94:	mov	x27, #0x0                   	// #0
    3f98:	mov	x25, #0x0                   	// #0
    3f9c:	cbz	x20, 3f68 <GOMP_target_ext+0x240>
    3fa0:	mov	x1, #0x0                   	// #0
    3fa4:	mov	x4, #0x1                   	// #1
    3fa8:	ldrh	w0, [x19, x1, lsl #1]
    3fac:	and	w2, w0, #0xff
    3fb0:	cmp	w2, #0xc
    3fb4:	b.ne	3fe0 <GOMP_target_ext+0x2b8>  // b.any
    3fb8:	lsr	w0, w0, #8
    3fbc:	sub	x25, x25, #0x1
    3fc0:	ldr	x2, [x22, x1, lsl #3]
    3fc4:	lsl	x0, x4, x0
    3fc8:	add	x25, x25, x0
    3fcc:	neg	x3, x0
    3fd0:	cmp	x27, x0
    3fd4:	and	x25, x25, x3
    3fd8:	csel	x27, x27, x0, cs  // cs = hs, nlast
    3fdc:	add	x25, x25, x2
    3fe0:	add	x1, x1, #0x1
    3fe4:	cmp	x20, x1
    3fe8:	b.hi	3fa8 <GOMP_target_ext+0x280>  // b.pmore
    3fec:	cbz	x27, 3f68 <GOMP_target_ext+0x240>
    3ff0:	add	x0, x25, x27
    3ff4:	sub	x1, x27, #0x1
    3ff8:	add	x0, x0, #0xe
    3ffc:	and	x0, x0, #0xfffffffffffffff0
    4000:	sub	sp, sp, x0
    4004:	add	x28, sp, #0x10
    4008:	ands	x0, x28, x1
    400c:	sub	x27, x27, x0
    4010:	add	x27, x28, x27
    4014:	csel	x28, x27, x28, ne  // ne = any
    4018:	cbz	x20, 3f68 <GOMP_target_ext+0x240>
    401c:	add	x20, x19, x20, lsl #1
    4020:	mov	x25, x24
    4024:	mov	x21, #0x0                   	// #0
    4028:	mov	x26, #0x1                   	// #1
    402c:	b	4040 <GOMP_target_ext+0x318>
    4030:	add	x25, x25, #0x8
    4034:	add	x22, x22, #0x8
    4038:	cmp	x20, x19
    403c:	b.eq	3f68 <GOMP_target_ext+0x240>  // b.none
    4040:	ldrh	w0, [x19]
    4044:	add	x19, x19, #0x2
    4048:	and	w1, w0, #0xff
    404c:	cmp	w1, #0xc
    4050:	b.ne	4030 <GOMP_target_ext+0x308>  // b.any
    4054:	lsr	w0, w0, #8
    4058:	sub	x21, x21, #0x1
    405c:	ldr	x1, [x25]
    4060:	lsl	x0, x26, x0
    4064:	add	x21, x21, x0
    4068:	neg	x0, x0
    406c:	and	x21, x0, x21
    4070:	add	x3, x28, x21
    4074:	ldr	x27, [x22]
    4078:	mov	x0, x3
    407c:	mov	x2, x27
    4080:	add	x21, x21, x27
    4084:	bl	0 <memcpy>
    4088:	str	x0, [x25]
    408c:	b	4030 <GOMP_target_ext+0x308>
    4090:	cbnz	w28, 3f68 <GOMP_target_ext+0x240>
    4094:	cbnz	x20, 3fa0 <GOMP_target_ext+0x278>
    4098:	b	3fec <GOMP_target_ext+0x2c4>
    409c:	add	x0, x27, x25
    40a0:	sub	x1, x27, #0x1
    40a4:	add	x0, x0, #0xe
    40a8:	mov	x4, x19
    40ac:	and	x0, x0, #0xfffffffffffffff0
    40b0:	mov	x5, x24
    40b4:	sub	sp, sp, x0
    40b8:	mov	x6, x22
    40bc:	add	x28, sp, #0x10
    40c0:	add	x7, x19, x20, lsl #1
    40c4:	ands	x0, x28, x1
    40c8:	mov	x3, #0x0                   	// #0
    40cc:	sub	x1, x27, x0
    40d0:	add	x0, x28, x1
    40d4:	csel	x28, x0, x28, ne  // ne = any
    40d8:	b	40ec <GOMP_target_ext+0x3c4>
    40dc:	add	x5, x5, #0x8
    40e0:	add	x6, x6, #0x8
    40e4:	cmp	x7, x4
    40e8:	b.eq	3f50 <GOMP_target_ext+0x228>  // b.none
    40ec:	ldrh	w0, [x4]
    40f0:	add	x4, x4, #0x2
    40f4:	and	w1, w0, #0xff
    40f8:	cmp	w1, #0xc
    40fc:	b.ne	40dc <GOMP_target_ext+0x3b4>  // b.any
    4100:	lsr	w0, w0, #8
    4104:	mov	x2, #0x1                   	// #1
    4108:	sub	x3, x3, #0x1
    410c:	stp	x4, x7, [x29, #96]
    4110:	lsl	x0, x2, x0
    4114:	add	x3, x3, x0
    4118:	neg	x0, x0
    411c:	and	x3, x0, x3
    4120:	stp	x5, x6, [x29, #112]
    4124:	add	x9, x28, x3
    4128:	ldr	x2, [x6]
    412c:	mov	x0, x9
    4130:	ldr	x1, [x5]
    4134:	stp	x3, x2, [x29, #128]
    4138:	bl	0 <memcpy>
    413c:	ldp	x3, x2, [x29, #128]
    4140:	ldp	x5, x6, [x29, #112]
    4144:	str	x0, [x5]
    4148:	ldp	x4, x7, [x29, #96]
    414c:	add	x3, x3, x2
    4150:	b	40dc <GOMP_target_ext+0x3b4>
    4154:	mov	x1, #0x0                   	// #0
    4158:	mov	x4, #0x1                   	// #1
    415c:	cbz	x20, 41a4 <GOMP_target_ext+0x47c>
    4160:	ldrh	w0, [x19, x1, lsl #1]
    4164:	and	w2, w0, #0xff
    4168:	cmp	w2, #0xc
    416c:	b.ne	4198 <GOMP_target_ext+0x470>  // b.any
    4170:	lsr	w0, w0, #8
    4174:	sub	x25, x25, #0x1
    4178:	ldr	x2, [x22, x1, lsl #3]
    417c:	lsl	x0, x4, x0
    4180:	add	x25, x25, x0
    4184:	neg	x3, x0
    4188:	cmp	x27, x0
    418c:	and	x25, x25, x3
    4190:	csel	x27, x27, x0, cs  // cs = hs, nlast
    4194:	add	x25, x25, x2
    4198:	add	x1, x1, #0x1
    419c:	cmp	x20, x1
    41a0:	b.ne	4160 <GOMP_target_ext+0x438>  // b.any
    41a4:	cbz	x27, 3df8 <GOMP_target_ext+0xd0>
    41a8:	add	x0, x25, x27
    41ac:	sub	x1, x27, #0x1
    41b0:	add	x0, x0, #0xe
    41b4:	and	x0, x0, #0xfffffffffffffff0
    41b8:	sub	sp, sp, x0
    41bc:	add	x28, sp, #0x10
    41c0:	ands	x0, x28, x1
    41c4:	sub	x27, x27, x0
    41c8:	add	x0, x28, x27
    41cc:	csel	x28, x0, x28, ne  // ne = any
    41d0:	cbz	x20, 3df8 <GOMP_target_ext+0xd0>
    41d4:	add	x20, x19, x20, lsl #1
    41d8:	mov	x27, x24
    41dc:	mov	x23, #0x0                   	// #0
    41e0:	b	41f4 <GOMP_target_ext+0x4cc>
    41e4:	add	x27, x27, #0x8
    41e8:	add	x22, x22, #0x8
    41ec:	cmp	x20, x19
    41f0:	b.eq	3df8 <GOMP_target_ext+0xd0>  // b.none
    41f4:	ldrh	w0, [x19]
    41f8:	add	x19, x19, #0x2
    41fc:	and	w1, w0, #0xff
    4200:	cmp	w1, #0xc
    4204:	b.ne	41e4 <GOMP_target_ext+0x4bc>  // b.any
    4208:	lsr	w0, w0, #8
    420c:	mov	x2, #0x1                   	// #1
    4210:	sub	x23, x23, #0x1
    4214:	lsl	x0, x2, x0
    4218:	add	x23, x23, x0
    421c:	neg	x0, x0
    4220:	and	x23, x0, x23
    4224:	ldr	x1, [x27]
    4228:	add	x3, x28, x23
    422c:	ldr	x25, [x22]
    4230:	mov	x0, x3
    4234:	mov	x2, x25
    4238:	add	x23, x23, x25
    423c:	bl	0 <memcpy>
    4240:	str	x0, [x27]
    4244:	b	41e4 <GOMP_target_ext+0x4bc>
    4248:	mov	x5, x19
    424c:	mov	x4, x22
    4250:	mov	w7, #0x1                   	// #1
    4254:	mov	x1, x20
    4258:	mov	w6, w7
    425c:	mov	x2, x24
    4260:	mov	x0, x21
    4264:	mov	x3, #0x0                   	// #0
    4268:	bl	1808 <gomp_map_vars>
    426c:	mov	x19, x0
    4270:	ldr	w0, [x21, #12]
    4274:	ldr	x4, [x21, #144]
    4278:	cbz	x19, 3e00 <GOMP_target_ext+0xd8>
    427c:	ldr	x2, [x19, #16]
    4280:	mov	x1, x26
    4284:	ldr	x3, [x29, #144]
    4288:	blr	x4
    428c:	mov	x0, x19
    4290:	mov	w1, #0x1                   	// #1
    4294:	bl	31b8 <gomp_unmap_vars>
    4298:	mov	sp, x29
    429c:	ldp	x19, x20, [sp, #16]
    42a0:	ldp	x21, x22, [sp, #32]
    42a4:	ldp	x23, x24, [sp, #48]
    42a8:	ldp	x25, x26, [sp, #64]
    42ac:	ldp	x27, x28, [sp, #80]
    42b0:	ldp	x29, x30, [sp], #144
    42b4:	ret
    42b8:	ldr	x1, [x29, #144]
    42bc:	mov	w0, #0x1                   	// #1
    42c0:	str	x1, [sp]
    42c4:	mov	x7, x26
    42c8:	str	w0, [sp, #8]
    42cc:	mov	w6, w25
    42d0:	mov	x5, x19
    42d4:	mov	x4, x22
    42d8:	mov	x3, x24
    42dc:	mov	x2, x20
    42e0:	mov	x1, x23
    42e4:	mov	x0, x21
    42e8:	bl	0 <gomp_create_target_task>
    42ec:	b	3e10 <GOMP_target_ext+0xe8>
    42f0:	ldp	x4, x5, [x3, #16]
    42f4:	stp	x4, x5, [x0, #8]
    42f8:	add	x7, x6, #0x100
    42fc:	ldp	x4, x5, [x3, #32]
    4300:	stp	x4, x5, [x6, #24]
    4304:	add	x0, x0, #0x540
    4308:	ldp	x4, x5, [x3, #48]
    430c:	stp	x4, x5, [x6, #40]
    4310:	mov	x1, #0x0                   	// #0
    4314:	ldp	x4, x5, [x3, #64]
    4318:	stp	x4, x5, [x6, #56]
    431c:	adrp	x2, 0 <gomp_global_icv>
    4320:	stp	xzr, xzr, [x3, #64]
    4324:	add	x2, x2, #0x0
    4328:	stp	x6, x7, [x3, #16]
    432c:	str	xzr, [x3, #32]
    4330:	str	wzr, [x3, #40]
    4334:	str	x0, [x3, #80]
    4338:	str	x3, [x29, #136]
    433c:	bl	0 <gomp_init_task>
    4340:	adrp	x0, 0 <gomp_thread_destructor>
    4344:	ldr	x3, [x29, #136]
    4348:	ldr	w0, [x0]
    434c:	mov	x1, x3
    4350:	bl	0 <pthread_setspecific>
    4354:	b	3ec0 <GOMP_target_ext+0x198>
    4358:	mov	x27, #0x0                   	// #0
    435c:	mov	x25, #0x0                   	// #0
    4360:	b	3f50 <GOMP_target_ext+0x228>
    4364:	nop

0000000000004368 <GOMP_target_data>:
    4368:	stp	x29, x30, [sp, #-80]!
    436c:	cmn	w0, #0x1
    4370:	mov	x29, sp
    4374:	stp	x19, x20, [sp, #16]
    4378:	mov	w19, w0
    437c:	adrp	x20, 0 <gomp_tls_data>
    4380:	ldr	x20, [x20]
    4384:	stp	x21, x22, [sp, #32]
    4388:	mov	x21, x2
    438c:	mov	x22, x3
    4390:	stp	x23, x24, [sp, #48]
    4394:	mov	x23, x4
    4398:	mov	x24, x5
    439c:	stp	x25, x26, [sp, #64]
    43a0:	mrs	x25, tpidr_el0
    43a4:	b.eq	4504 <GOMP_target_data+0x19c>  // b.none
    43a8:	tbnz	w19, #31, 44b8 <GOMP_target_data+0x150>
    43ac:	adrp	x26, 0 <omp_target_memcpy_rect_worker>
    43b0:	add	x26, x26, #0x0
    43b4:	add	x0, x26, #0x14
    43b8:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
    43bc:	add	x1, x1, #0x0
    43c0:	bl	0 <pthread_once>
    43c4:	ldr	w0, [x26, #4]
    43c8:	cmp	w19, w0
    43cc:	b.ge	44b8 <GOMP_target_data+0x150>  // b.tcont
    43d0:	mov	w1, #0x130                 	// #304
    43d4:	mov	w2, #0x1                   	// #1
    43d8:	ldr	x0, [x26, #8]
    43dc:	smull	x19, w19, w1
    43e0:	add	x0, x0, x19
    43e4:	add	x0, x0, #0xa8
    43e8:	ldaxr	w1, [x0]
    43ec:	cbnz	w1, 43f8 <GOMP_target_data+0x90>
    43f0:	stxr	w3, w2, [x0]
    43f4:	cbnz	w3, 43e8 <GOMP_target_data+0x80>
    43f8:	cmp	w1, #0x0
    43fc:	b.ne	4550 <GOMP_target_data+0x1e8>  // b.any
    4400:	ldr	x0, [x26, #8]
    4404:	add	x0, x0, x19
    4408:	ldr	w1, [x0, #172]
    440c:	cbz	w1, 4528 <GOMP_target_data+0x1c0>
    4410:	add	x0, x0, #0xa8
    4414:	cmp	w1, #0x2
    4418:	b.eq	44a4 <GOMP_target_data+0x13c>  // b.none
    441c:	ldxr	w1, [x0]
    4420:	stlxr	w2, wzr, [x0]
    4424:	cbnz	w2, 441c <GOMP_target_data+0xb4>
    4428:	tbnz	w1, #31, 4548 <GOMP_target_data+0x1e0>
    442c:	ldr	x0, [x26, #8]
    4430:	adds	x0, x0, x19
    4434:	b.eq	44b8 <GOMP_target_data+0x150>  // b.none
    4438:	ldr	w1, [x0, #8]
    443c:	mov	w2, #0x5                   	// #5
    4440:	and	w1, w1, w2
    4444:	cmp	w1, #0x4
    4448:	b.ne	44b8 <GOMP_target_data+0x150>  // b.any
    444c:	add	x20, x25, x20
    4450:	mov	x1, x21
    4454:	mov	x5, x24
    4458:	mov	x4, x23
    445c:	mov	x2, x22
    4460:	mov	w7, #0x2                   	// #2
    4464:	mov	w6, #0x0                   	// #0
    4468:	mov	x3, #0x0                   	// #0
    446c:	bl	1808 <gomp_map_vars>
    4470:	mov	x19, x0
    4474:	ldr	x1, [x20, #80]
    4478:	cbz	x1, 453c <GOMP_target_data+0x1d4>
    447c:	add	x1, x1, #0x90
    4480:	ldr	x0, [x1, #32]
    4484:	str	x0, [x19, #40]
    4488:	str	x19, [x1, #32]
    448c:	ldp	x19, x20, [sp, #16]
    4490:	ldp	x21, x22, [sp, #32]
    4494:	ldp	x23, x24, [sp, #48]
    4498:	ldp	x25, x26, [sp, #64]
    449c:	ldp	x29, x30, [sp], #80
    44a0:	ret
    44a4:	ldxr	w1, [x0]
    44a8:	stlxr	w2, wzr, [x0]
    44ac:	cbnz	w2, 44a4 <GOMP_target_data+0x13c>
    44b0:	tbz	w1, #31, 44b8 <GOMP_target_data+0x150>
    44b4:	bl	0 <gomp_mutex_unlock_slow>
    44b8:	add	x20, x25, x20
    44bc:	adrp	x19, 0 <gomp_global_icv>
    44c0:	add	x19, x19, #0x0
    44c4:	ldr	x0, [x20, #80]
    44c8:	cmp	x0, #0x0
    44cc:	add	x0, x0, #0x90
    44d0:	csel	x19, x19, x0, eq  // eq = none
    44d4:	ldr	x0, [x19, #32]
    44d8:	cbz	x0, 448c <GOMP_target_data+0x124>
    44dc:	bl	3d8 <gomp_map_vars.constprop.0>
    44e0:	ldr	x1, [x19, #32]
    44e4:	str	x1, [x0, #40]
    44e8:	str	x0, [x19, #32]
    44ec:	ldp	x19, x20, [sp, #16]
    44f0:	ldp	x21, x22, [sp, #32]
    44f4:	ldp	x23, x24, [sp, #48]
    44f8:	ldp	x25, x26, [sp, #64]
    44fc:	ldp	x29, x30, [sp], #80
    4500:	ret
    4504:	add	x1, x25, x20
    4508:	adrp	x0, 0 <gomp_global_icv>
    450c:	add	x0, x0, #0x0
    4510:	ldr	x1, [x1, #80]
    4514:	cmp	x1, #0x0
    4518:	add	x1, x1, #0x90
    451c:	csel	x0, x0, x1, eq  // eq = none
    4520:	ldr	w19, [x0, #16]
    4524:	b	43a8 <GOMP_target_data+0x40>
    4528:	bl	38b0 <gomp_init_device>
    452c:	ldr	x0, [x26, #8]
    4530:	add	x0, x0, x19
    4534:	add	x0, x0, #0xa8
    4538:	b	441c <GOMP_target_data+0xb4>
    453c:	bl	0 <gomp_new_icv>
    4540:	mov	x1, x0
    4544:	b	4480 <GOMP_target_data+0x118>
    4548:	bl	0 <gomp_mutex_unlock_slow>
    454c:	b	442c <GOMP_target_data+0xc4>
    4550:	bl	0 <gomp_mutex_lock_slow>
    4554:	b	4400 <GOMP_target_data+0x98>

0000000000004558 <GOMP_target_data_ext>:
    4558:	stp	x29, x30, [sp, #-80]!
    455c:	cmn	w0, #0x1
    4560:	mov	x29, sp
    4564:	stp	x19, x20, [sp, #16]
    4568:	mov	w19, w0
    456c:	adrp	x20, 0 <gomp_tls_data>
    4570:	ldr	x20, [x20]
    4574:	stp	x21, x22, [sp, #32]
    4578:	mov	x21, x1
    457c:	mov	x22, x2
    4580:	stp	x23, x24, [sp, #48]
    4584:	mov	x23, x3
    4588:	mov	x24, x4
    458c:	stp	x25, x26, [sp, #64]
    4590:	mrs	x25, tpidr_el0
    4594:	b.eq	46f4 <GOMP_target_data_ext+0x19c>  // b.none
    4598:	tbnz	w19, #31, 46a8 <GOMP_target_data_ext+0x150>
    459c:	adrp	x26, 0 <omp_target_memcpy_rect_worker>
    45a0:	add	x26, x26, #0x0
    45a4:	add	x0, x26, #0x14
    45a8:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
    45ac:	add	x1, x1, #0x0
    45b0:	bl	0 <pthread_once>
    45b4:	ldr	w0, [x26, #4]
    45b8:	cmp	w19, w0
    45bc:	b.ge	46a8 <GOMP_target_data_ext+0x150>  // b.tcont
    45c0:	mov	w1, #0x130                 	// #304
    45c4:	mov	w2, #0x1                   	// #1
    45c8:	ldr	x0, [x26, #8]
    45cc:	smull	x19, w19, w1
    45d0:	add	x0, x0, x19
    45d4:	add	x0, x0, #0xa8
    45d8:	ldaxr	w1, [x0]
    45dc:	cbnz	w1, 45e8 <GOMP_target_data_ext+0x90>
    45e0:	stxr	w3, w2, [x0]
    45e4:	cbnz	w3, 45d8 <GOMP_target_data_ext+0x80>
    45e8:	cmp	w1, #0x0
    45ec:	b.ne	4740 <GOMP_target_data_ext+0x1e8>  // b.any
    45f0:	ldr	x0, [x26, #8]
    45f4:	add	x0, x0, x19
    45f8:	ldr	w1, [x0, #172]
    45fc:	cbz	w1, 4718 <GOMP_target_data_ext+0x1c0>
    4600:	add	x0, x0, #0xa8
    4604:	cmp	w1, #0x2
    4608:	b.eq	4694 <GOMP_target_data_ext+0x13c>  // b.none
    460c:	ldxr	w1, [x0]
    4610:	stlxr	w2, wzr, [x0]
    4614:	cbnz	w2, 460c <GOMP_target_data_ext+0xb4>
    4618:	tbnz	w1, #31, 4738 <GOMP_target_data_ext+0x1e0>
    461c:	ldr	x0, [x26, #8]
    4620:	adds	x0, x0, x19
    4624:	b.eq	46a8 <GOMP_target_data_ext+0x150>  // b.none
    4628:	ldr	w1, [x0, #8]
    462c:	mov	w2, #0x5                   	// #5
    4630:	and	w1, w1, w2
    4634:	cmp	w1, #0x4
    4638:	b.ne	46a8 <GOMP_target_data_ext+0x150>  // b.any
    463c:	add	x20, x25, x20
    4640:	mov	x1, x21
    4644:	mov	x5, x24
    4648:	mov	x4, x23
    464c:	mov	x2, x22
    4650:	mov	w7, #0x2                   	// #2
    4654:	mov	w6, #0x1                   	// #1
    4658:	mov	x3, #0x0                   	// #0
    465c:	bl	1808 <gomp_map_vars>
    4660:	mov	x19, x0
    4664:	ldr	x1, [x20, #80]
    4668:	cbz	x1, 472c <GOMP_target_data_ext+0x1d4>
    466c:	add	x1, x1, #0x90
    4670:	ldr	x0, [x1, #32]
    4674:	str	x0, [x19, #40]
    4678:	str	x19, [x1, #32]
    467c:	ldp	x19, x20, [sp, #16]
    4680:	ldp	x21, x22, [sp, #32]
    4684:	ldp	x23, x24, [sp, #48]
    4688:	ldp	x25, x26, [sp, #64]
    468c:	ldp	x29, x30, [sp], #80
    4690:	ret
    4694:	ldxr	w1, [x0]
    4698:	stlxr	w2, wzr, [x0]
    469c:	cbnz	w2, 4694 <GOMP_target_data_ext+0x13c>
    46a0:	tbz	w1, #31, 46a8 <GOMP_target_data_ext+0x150>
    46a4:	bl	0 <gomp_mutex_unlock_slow>
    46a8:	add	x20, x25, x20
    46ac:	adrp	x19, 0 <gomp_global_icv>
    46b0:	add	x19, x19, #0x0
    46b4:	ldr	x0, [x20, #80]
    46b8:	cmp	x0, #0x0
    46bc:	add	x0, x0, #0x90
    46c0:	csel	x19, x19, x0, eq  // eq = none
    46c4:	ldr	x0, [x19, #32]
    46c8:	cbz	x0, 467c <GOMP_target_data_ext+0x124>
    46cc:	bl	3d8 <gomp_map_vars.constprop.0>
    46d0:	ldr	x1, [x19, #32]
    46d4:	str	x1, [x0, #40]
    46d8:	str	x0, [x19, #32]
    46dc:	ldp	x19, x20, [sp, #16]
    46e0:	ldp	x21, x22, [sp, #32]
    46e4:	ldp	x23, x24, [sp, #48]
    46e8:	ldp	x25, x26, [sp, #64]
    46ec:	ldp	x29, x30, [sp], #80
    46f0:	ret
    46f4:	add	x1, x25, x20
    46f8:	adrp	x0, 0 <gomp_global_icv>
    46fc:	add	x0, x0, #0x0
    4700:	ldr	x1, [x1, #80]
    4704:	cmp	x1, #0x0
    4708:	add	x1, x1, #0x90
    470c:	csel	x0, x0, x1, eq  // eq = none
    4710:	ldr	w19, [x0, #16]
    4714:	b	4598 <GOMP_target_data_ext+0x40>
    4718:	bl	38b0 <gomp_init_device>
    471c:	ldr	x0, [x26, #8]
    4720:	add	x0, x0, x19
    4724:	add	x0, x0, #0xa8
    4728:	b	460c <GOMP_target_data_ext+0xb4>
    472c:	bl	0 <gomp_new_icv>
    4730:	mov	x1, x0
    4734:	b	4670 <GOMP_target_data_ext+0x118>
    4738:	bl	0 <gomp_mutex_unlock_slow>
    473c:	b	461c <GOMP_target_data_ext+0xc4>
    4740:	bl	0 <gomp_mutex_lock_slow>
    4744:	b	45f0 <GOMP_target_data_ext+0x98>

0000000000004748 <GOMP_target_end_data>:
    4748:	adrp	x2, 0 <gomp_tls_data>
    474c:	ldr	x2, [x2]
    4750:	mrs	x0, tpidr_el0
    4754:	adrp	x1, 0 <gomp_global_icv>
    4758:	add	x1, x1, #0x0
    475c:	add	x0, x0, x2
    4760:	ldr	x0, [x0, #80]
    4764:	cmp	x0, #0x0
    4768:	add	x0, x0, #0x90
    476c:	csel	x1, x1, x0, eq  // eq = none
    4770:	ldr	x0, [x1, #32]
    4774:	cbz	x0, 4788 <GOMP_target_end_data+0x40>
    4778:	ldr	x2, [x0, #40]
    477c:	str	x2, [x1, #32]
    4780:	mov	w1, #0x1                   	// #1
    4784:	b	31b8 <gomp_unmap_vars>
    4788:	ret
    478c:	nop

0000000000004790 <GOMP_target_update>:
    4790:	stp	x29, x30, [sp, #-64]!
    4794:	cmn	w0, #0x1
    4798:	mov	x29, sp
    479c:	stp	x19, x20, [sp, #16]
    47a0:	mov	w19, w0
    47a4:	mov	x20, x2
    47a8:	stp	x21, x22, [sp, #32]
    47ac:	mov	x21, x3
    47b0:	mov	x22, x4
    47b4:	stp	x23, x24, [sp, #48]
    47b8:	mov	x23, x5
    47bc:	b.eq	48b0 <GOMP_target_update+0x120>  // b.none
    47c0:	tbnz	w19, #31, 489c <GOMP_target_update+0x10c>
    47c4:	adrp	x24, 0 <omp_target_memcpy_rect_worker>
    47c8:	add	x24, x24, #0x0
    47cc:	add	x0, x24, #0x14
    47d0:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
    47d4:	add	x1, x1, #0x0
    47d8:	bl	0 <pthread_once>
    47dc:	ldr	w0, [x24, #4]
    47e0:	cmp	w19, w0
    47e4:	b.ge	489c <GOMP_target_update+0x10c>  // b.tcont
    47e8:	mov	w1, #0x130                 	// #304
    47ec:	mov	w2, #0x1                   	// #1
    47f0:	ldr	x0, [x24, #8]
    47f4:	smull	x19, w19, w1
    47f8:	add	x0, x0, x19
    47fc:	add	x0, x0, #0xa8
    4800:	ldaxr	w1, [x0]
    4804:	cbnz	w1, 4810 <GOMP_target_update+0x80>
    4808:	stxr	w3, w2, [x0]
    480c:	cbnz	w3, 4800 <GOMP_target_update+0x70>
    4810:	cmp	w1, #0x0
    4814:	b.ne	4910 <GOMP_target_update+0x180>  // b.any
    4818:	ldr	x0, [x24, #8]
    481c:	add	x0, x0, x19
    4820:	ldr	w1, [x0, #172]
    4824:	cbz	w1, 48e0 <GOMP_target_update+0x150>
    4828:	add	x0, x0, #0xa8
    482c:	cmp	w1, #0x2
    4830:	b.eq	488c <GOMP_target_update+0xfc>  // b.none
    4834:	ldxr	w1, [x0]
    4838:	stlxr	w2, wzr, [x0]
    483c:	cbnz	w2, 4834 <GOMP_target_update+0xa4>
    4840:	tbnz	w1, #31, 48f4 <GOMP_target_update+0x164>
    4844:	ldr	x0, [x24, #8]
    4848:	adds	x0, x0, x19
    484c:	b.eq	489c <GOMP_target_update+0x10c>  // b.none
    4850:	ldr	w1, [x0, #8]
    4854:	mov	w2, #0x5                   	// #5
    4858:	and	w1, w1, w2
    485c:	cmp	w1, #0x4
    4860:	b.ne	489c <GOMP_target_update+0x10c>  // b.any
    4864:	mov	x4, x23
    4868:	mov	x3, x22
    486c:	mov	x2, x21
    4870:	mov	x1, x20
    4874:	ldp	x19, x20, [sp, #16]
    4878:	mov	w5, #0x0                   	// #0
    487c:	ldp	x21, x22, [sp, #32]
    4880:	ldp	x23, x24, [sp, #48]
    4884:	ldp	x29, x30, [sp], #64
    4888:	b	b50 <gomp_update>
    488c:	ldxr	w1, [x0]
    4890:	stlxr	w2, wzr, [x0]
    4894:	cbnz	w2, 488c <GOMP_target_update+0xfc>
    4898:	tbnz	w1, #31, 48fc <GOMP_target_update+0x16c>
    489c:	ldp	x19, x20, [sp, #16]
    48a0:	ldp	x21, x22, [sp, #32]
    48a4:	ldp	x23, x24, [sp, #48]
    48a8:	ldp	x29, x30, [sp], #64
    48ac:	ret
    48b0:	adrp	x2, 0 <gomp_tls_data>
    48b4:	ldr	x2, [x2]
    48b8:	mrs	x1, tpidr_el0
    48bc:	adrp	x0, 0 <gomp_global_icv>
    48c0:	add	x0, x0, #0x0
    48c4:	add	x1, x1, x2
    48c8:	ldr	x1, [x1, #80]
    48cc:	cmp	x1, #0x0
    48d0:	add	x1, x1, #0x90
    48d4:	csel	x0, x0, x1, eq  // eq = none
    48d8:	ldr	w19, [x0, #16]
    48dc:	b	47c0 <GOMP_target_update+0x30>
    48e0:	bl	38b0 <gomp_init_device>
    48e4:	ldr	x0, [x24, #8]
    48e8:	add	x0, x0, x19
    48ec:	add	x0, x0, #0xa8
    48f0:	b	4834 <GOMP_target_update+0xa4>
    48f4:	bl	0 <gomp_mutex_unlock_slow>
    48f8:	b	4844 <GOMP_target_update+0xb4>
    48fc:	ldp	x19, x20, [sp, #16]
    4900:	ldp	x21, x22, [sp, #32]
    4904:	ldp	x23, x24, [sp, #48]
    4908:	ldp	x29, x30, [sp], #64
    490c:	b	0 <gomp_mutex_unlock_slow>
    4910:	bl	0 <gomp_mutex_lock_slow>
    4914:	b	4818 <GOMP_target_update+0x88>

0000000000004918 <GOMP_target_update_ext>:
    4918:	sub	sp, sp, #0x60
    491c:	cmn	w0, #0x1
    4920:	stp	x29, x30, [sp, #16]
    4924:	add	x29, sp, #0x10
    4928:	stp	x19, x20, [sp, #32]
    492c:	mov	w19, w0
    4930:	mov	x20, x1
    4934:	stp	x21, x22, [sp, #48]
    4938:	mov	x21, x2
    493c:	mov	x22, x3
    4940:	stp	x23, x24, [sp, #64]
    4944:	mov	x23, x4
    4948:	mov	w24, w5
    494c:	stp	x25, x26, [sp, #80]
    4950:	mov	x26, x6
    4954:	b.eq	4ab8 <GOMP_target_update_ext+0x1a0>  // b.none
    4958:	tbnz	w19, #31, 4ae8 <GOMP_target_update_ext+0x1d0>
    495c:	adrp	x25, 0 <omp_target_memcpy_rect_worker>
    4960:	add	x25, x25, #0x0
    4964:	add	x0, x25, #0x14
    4968:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
    496c:	add	x1, x1, #0x0
    4970:	bl	0 <pthread_once>
    4974:	ldr	w0, [x25, #4]
    4978:	cmp	w19, w0
    497c:	b.ge	4ae8 <GOMP_target_update_ext+0x1d0>  // b.tcont
    4980:	mov	w1, #0x130                 	// #304
    4984:	mov	w2, #0x1                   	// #1
    4988:	ldr	x0, [x25, #8]
    498c:	smull	x19, w19, w1
    4990:	add	x0, x0, x19
    4994:	add	x0, x0, #0xa8
    4998:	ldaxr	w1, [x0]
    499c:	cbnz	w1, 49a8 <GOMP_target_update_ext+0x90>
    49a0:	stxr	w3, w2, [x0]
    49a4:	cbnz	w3, 4998 <GOMP_target_update_ext+0x80>
    49a8:	cmp	w1, #0x0
    49ac:	b.ne	4c04 <GOMP_target_update_ext+0x2ec>  // b.any
    49b0:	ldr	x0, [x25, #8]
    49b4:	add	x0, x0, x19
    49b8:	ldr	w1, [x0, #172]
    49bc:	cbz	w1, 4b2c <GOMP_target_update_ext+0x214>
    49c0:	add	x0, x0, #0xa8
    49c4:	cmp	w1, #0x2
    49c8:	b.eq	4b40 <GOMP_target_update_ext+0x228>  // b.none
    49cc:	ldxr	w1, [x0]
    49d0:	stlxr	w2, wzr, [x0]
    49d4:	cbnz	w2, 49cc <GOMP_target_update_ext+0xb4>
    49d8:	tbnz	w1, #31, 4b58 <GOMP_target_update_ext+0x240>
    49dc:	ldr	x0, [x25, #8]
    49e0:	add	x19, x0, x19
    49e4:	cbz	x26, 4a40 <GOMP_target_update_ext+0x128>
    49e8:	adrp	x2, 0 <gomp_tls_data>
    49ec:	ldr	x2, [x2]
    49f0:	mrs	x0, tpidr_el0
    49f4:	add	x1, x0, x2
    49f8:	ldr	x1, [x1, #80]
    49fc:	cbz	x1, 4a40 <GOMP_target_update_ext+0x128>
    4a00:	ldr	x3, [x1, #56]
    4a04:	cbz	x3, 4a40 <GOMP_target_update_ext+0x128>
    4a08:	add	x0, x0, x2
    4a0c:	ldr	x0, [x0, #16]
    4a10:	tbz	w24, #0, 4a20 <GOMP_target_update_ext+0x108>
    4a14:	cbz	x0, 4a38 <GOMP_target_update_ext+0x120>
    4a18:	ldrb	w2, [x1, #205]
    4a1c:	cbz	w2, 4b60 <GOMP_target_update_ext+0x248>
    4a20:	adrp	x2, 0 <gomp_cancel_var>
    4a24:	cmp	x0, #0x0
    4a28:	cset	w3, ne  // ne = any
    4a2c:	ldrb	w2, [x2]
    4a30:	tst	w3, w2
    4a34:	b.ne	4bd0 <GOMP_target_update_ext+0x2b8>  // b.any
    4a38:	mov	x0, x26
    4a3c:	bl	0 <gomp_task_maybe_wait_for_dependencies>
    4a40:	cbz	x19, 4b10 <GOMP_target_update_ext+0x1f8>
    4a44:	ldr	w0, [x19, #8]
    4a48:	mov	w1, #0x5                   	// #5
    4a4c:	and	w0, w0, w1
    4a50:	cmp	w0, #0x4
    4a54:	b.ne	4b10 <GOMP_target_update_ext+0x1f8>  // b.any
    4a58:	adrp	x1, 0 <gomp_tls_data>
    4a5c:	ldr	x1, [x1]
    4a60:	mrs	x0, tpidr_el0
    4a64:	adrp	x2, 0 <gomp_cancel_var>
    4a68:	add	x0, x0, x1
    4a6c:	ldrb	w2, [x2]
    4a70:	ldr	x1, [x0, #16]
    4a74:	cmp	x1, #0x0
    4a78:	cset	w3, ne  // ne = any
    4a7c:	tst	w3, w2
    4a80:	b.ne	4b98 <GOMP_target_update_ext+0x280>  // b.any
    4a84:	mov	x4, x23
    4a88:	mov	x3, x22
    4a8c:	mov	x2, x21
    4a90:	mov	x1, x20
    4a94:	mov	x0, x19
    4a98:	mov	w5, #0x1                   	// #1
    4a9c:	ldp	x29, x30, [sp, #16]
    4aa0:	ldp	x19, x20, [sp, #32]
    4aa4:	ldp	x21, x22, [sp, #48]
    4aa8:	ldp	x23, x24, [sp, #64]
    4aac:	ldp	x25, x26, [sp, #80]
    4ab0:	add	sp, sp, #0x60
    4ab4:	b	b50 <gomp_update>
    4ab8:	adrp	x2, 0 <gomp_tls_data>
    4abc:	ldr	x2, [x2]
    4ac0:	mrs	x1, tpidr_el0
    4ac4:	adrp	x0, 0 <gomp_global_icv>
    4ac8:	add	x0, x0, #0x0
    4acc:	add	x1, x1, x2
    4ad0:	ldr	x1, [x1, #80]
    4ad4:	cmp	x1, #0x0
    4ad8:	add	x1, x1, #0x90
    4adc:	csel	x0, x0, x1, eq  // eq = none
    4ae0:	ldr	w19, [x0, #16]
    4ae4:	tbz	w19, #31, 495c <GOMP_target_update_ext+0x44>
    4ae8:	cbz	x26, 4b10 <GOMP_target_update_ext+0x1f8>
    4aec:	adrp	x2, 0 <gomp_tls_data>
    4af0:	ldr	x2, [x2]
    4af4:	mrs	x0, tpidr_el0
    4af8:	add	x1, x0, x2
    4afc:	ldr	x1, [x1, #80]
    4b00:	cbz	x1, 4b10 <GOMP_target_update_ext+0x1f8>
    4b04:	ldr	x3, [x1, #56]
    4b08:	mov	x19, #0x0                   	// #0
    4b0c:	cbnz	x3, 4a08 <GOMP_target_update_ext+0xf0>
    4b10:	ldp	x29, x30, [sp, #16]
    4b14:	ldp	x19, x20, [sp, #32]
    4b18:	ldp	x21, x22, [sp, #48]
    4b1c:	ldp	x23, x24, [sp, #64]
    4b20:	ldp	x25, x26, [sp, #80]
    4b24:	add	sp, sp, #0x60
    4b28:	ret
    4b2c:	bl	38b0 <gomp_init_device>
    4b30:	ldr	x0, [x25, #8]
    4b34:	add	x0, x0, x19
    4b38:	add	x0, x0, #0xa8
    4b3c:	b	49cc <GOMP_target_update_ext+0xb4>
    4b40:	ldxr	w1, [x0]
    4b44:	stlxr	w2, wzr, [x0]
    4b48:	cbnz	w2, 4b40 <GOMP_target_update_ext+0x228>
    4b4c:	tbz	w1, #31, 4ae8 <GOMP_target_update_ext+0x1d0>
    4b50:	bl	0 <gomp_mutex_unlock_slow>
    4b54:	b	4ae8 <GOMP_target_update_ext+0x1d0>
    4b58:	bl	0 <gomp_mutex_unlock_slow>
    4b5c:	b	49dc <GOMP_target_update_ext+0xc4>
    4b60:	str	xzr, [sp]
    4b64:	mov	x7, x26
    4b68:	str	wzr, [sp, #8]
    4b6c:	orr	w6, w24, #0x80000000
    4b70:	mov	x5, x23
    4b74:	mov	x4, x22
    4b78:	mov	x3, x21
    4b7c:	mov	x2, x20
    4b80:	mov	x0, x19
    4b84:	mov	x1, #0x0                   	// #0
    4b88:	bl	0 <gomp_create_target_task>
    4b8c:	tst	w0, #0xff
    4b90:	b.eq	4a40 <GOMP_target_update_ext+0x128>  // b.none
    4b94:	b	4b10 <GOMP_target_update_ext+0x1f8>
    4b98:	ldr	w1, [x1, #132]
    4b9c:	tbnz	w1, #2, 4b10 <GOMP_target_update_ext+0x1f8>
    4ba0:	ldr	x0, [x0, #80]
    4ba4:	ldr	x0, [x0, #40]
    4ba8:	cbz	x0, 4a84 <GOMP_target_update_ext+0x16c>
    4bac:	ldrb	w1, [x0, #49]
    4bb0:	cbnz	w1, 4b10 <GOMP_target_update_ext+0x1f8>
    4bb4:	ldrb	w1, [x0, #50]
    4bb8:	cbz	w1, 4a84 <GOMP_target_update_ext+0x16c>
    4bbc:	ldr	x0, [x0]
    4bc0:	cbz	x0, 4a84 <GOMP_target_update_ext+0x16c>
    4bc4:	ldrb	w0, [x0, #49]
    4bc8:	cbz	w0, 4a84 <GOMP_target_update_ext+0x16c>
    4bcc:	b	4b10 <GOMP_target_update_ext+0x1f8>
    4bd0:	ldr	w0, [x0, #132]
    4bd4:	tbnz	w0, #2, 4b10 <GOMP_target_update_ext+0x1f8>
    4bd8:	ldr	x0, [x1, #40]
    4bdc:	cbz	x0, 4a38 <GOMP_target_update_ext+0x120>
    4be0:	ldrb	w1, [x0, #49]
    4be4:	cbnz	w1, 4b10 <GOMP_target_update_ext+0x1f8>
    4be8:	ldrb	w1, [x0, #50]
    4bec:	cbz	w1, 4a38 <GOMP_target_update_ext+0x120>
    4bf0:	ldr	x0, [x0]
    4bf4:	cbz	x0, 4a38 <GOMP_target_update_ext+0x120>
    4bf8:	ldrb	w0, [x0, #49]
    4bfc:	cbz	w0, 4a38 <GOMP_target_update_ext+0x120>
    4c00:	b	4b10 <GOMP_target_update_ext+0x1f8>
    4c04:	bl	0 <gomp_mutex_lock_slow>
    4c08:	b	49b0 <GOMP_target_update_ext+0x98>
    4c0c:	nop

0000000000004c10 <GOMP_target_enter_exit_data>:
    4c10:	sub	sp, sp, #0x60
    4c14:	stp	x29, x30, [sp, #16]
    4c18:	add	x29, sp, #0x10
    4c1c:	stp	x19, x20, [sp, #32]
    4c20:	mov	x20, x3
    4c24:	mov	x19, x4
    4c28:	stp	x21, x22, [sp, #48]
    4c2c:	mov	x21, x1
    4c30:	mov	x22, x2
    4c34:	stp	x23, x24, [sp, #64]
    4c38:	mov	x23, x6
    4c3c:	str	x25, [sp, #80]
    4c40:	mov	w25, w5
    4c44:	bl	3980 <resolve_device>
    4c48:	mov	x24, x0
    4c4c:	cbz	x23, 4ca4 <GOMP_target_enter_exit_data+0x94>
    4c50:	adrp	x1, 0 <gomp_tls_data>
    4c54:	ldr	x1, [x1]
    4c58:	mrs	x2, tpidr_el0
    4c5c:	add	x1, x2, x1
    4c60:	ldr	x2, [x1, #80]
    4c64:	cbz	x2, 4ca4 <GOMP_target_enter_exit_data+0x94>
    4c68:	ldr	x3, [x2, #56]
    4c6c:	cbz	x3, 4ca4 <GOMP_target_enter_exit_data+0x94>
    4c70:	ldr	x1, [x1, #16]
    4c74:	tbz	w25, #0, 4c84 <GOMP_target_enter_exit_data+0x74>
    4c78:	cbz	x1, 4c9c <GOMP_target_enter_exit_data+0x8c>
    4c7c:	ldrb	w3, [x2, #205]
    4c80:	cbz	w3, 4dac <GOMP_target_enter_exit_data+0x19c>
    4c84:	adrp	x0, 0 <gomp_cancel_var>
    4c88:	cmp	x1, #0x0
    4c8c:	cset	w3, ne  // ne = any
    4c90:	ldrb	w0, [x0]
    4c94:	tst	w3, w0
    4c98:	b.ne	4e18 <GOMP_target_enter_exit_data+0x208>  // b.any
    4c9c:	mov	x0, x23
    4ca0:	bl	0 <gomp_task_maybe_wait_for_dependencies>
    4ca4:	cbz	x24, 4cbc <GOMP_target_enter_exit_data+0xac>
    4ca8:	ldr	w0, [x24, #8]
    4cac:	mov	w1, #0x5                   	// #5
    4cb0:	and	w0, w0, w1
    4cb4:	cmp	w0, #0x4
    4cb8:	b.eq	4cd8 <GOMP_target_enter_exit_data+0xc8>  // b.none
    4cbc:	ldp	x29, x30, [sp, #16]
    4cc0:	ldp	x19, x20, [sp, #32]
    4cc4:	ldp	x21, x22, [sp, #48]
    4cc8:	ldp	x23, x24, [sp, #64]
    4ccc:	ldr	x25, [sp, #80]
    4cd0:	add	sp, sp, #0x60
    4cd4:	ret
    4cd8:	adrp	x1, 0 <gomp_tls_data>
    4cdc:	ldr	x1, [x1]
    4ce0:	mrs	x0, tpidr_el0
    4ce4:	adrp	x2, 0 <gomp_cancel_var>
    4ce8:	add	x0, x0, x1
    4cec:	ldrb	w2, [x2]
    4cf0:	ldr	x1, [x0, #16]
    4cf4:	cmp	x1, #0x0
    4cf8:	cset	w3, ne  // ne = any
    4cfc:	tst	w3, w2
    4d00:	b.ne	4de0 <GOMP_target_enter_exit_data+0x1d0>  // b.any
    4d04:	tbnz	w25, #1, 4d7c <GOMP_target_enter_exit_data+0x16c>
    4d08:	cbz	x21, 4cbc <GOMP_target_enter_exit_data+0xac>
    4d0c:	mov	x23, #0x0                   	// #0
    4d10:	lsl	x5, x23, #1
    4d14:	lsl	x8, x23, #3
    4d18:	mov	x0, x24
    4d1c:	add	x2, x22, x8
    4d20:	mov	w7, #0x3                   	// #3
    4d24:	mov	w6, #0x1                   	// #1
    4d28:	ldrb	w4, [x19, x5]
    4d2c:	mov	x3, #0x0                   	// #0
    4d30:	add	x5, x19, x5
    4d34:	mov	x1, #0x1                   	// #1
    4d38:	cmp	w4, #0x1c
    4d3c:	add	x4, x20, x8
    4d40:	b.eq	4d58 <GOMP_target_enter_exit_data+0x148>  // b.none
    4d44:	add	x23, x23, #0x1
    4d48:	bl	1808 <gomp_map_vars>
    4d4c:	cmp	x21, x23
    4d50:	b.hi	4d10 <GOMP_target_enter_exit_data+0x100>  // b.pmore
    4d54:	b	4cbc <GOMP_target_enter_exit_data+0xac>
    4d58:	ldr	x1, [x20, x23, lsl #3]
    4d5c:	add	x1, x1, #0x1
    4d60:	bl	1808 <gomp_map_vars>
    4d64:	ldr	x0, [x20, x23, lsl #3]
    4d68:	add	x23, x23, x0
    4d6c:	add	x23, x23, #0x1
    4d70:	cmp	x21, x23
    4d74:	b.hi	4d10 <GOMP_target_enter_exit_data+0x100>  // b.pmore
    4d78:	b	4cbc <GOMP_target_enter_exit_data+0xac>
    4d7c:	mov	x4, x19
    4d80:	mov	x3, x20
    4d84:	mov	x2, x22
    4d88:	mov	x1, x21
    4d8c:	mov	x0, x24
    4d90:	ldp	x29, x30, [sp, #16]
    4d94:	ldp	x19, x20, [sp, #32]
    4d98:	ldp	x21, x22, [sp, #48]
    4d9c:	ldp	x23, x24, [sp, #64]
    4da0:	ldr	x25, [sp, #80]
    4da4:	add	sp, sp, #0x60
    4da8:	b	10a0 <gomp_exit_data>
    4dac:	str	xzr, [sp]
    4db0:	mov	x7, x23
    4db4:	str	wzr, [sp, #8]
    4db8:	mov	w6, w25
    4dbc:	mov	x5, x19
    4dc0:	mov	x4, x20
    4dc4:	mov	x3, x22
    4dc8:	mov	x2, x21
    4dcc:	mov	x1, #0x0                   	// #0
    4dd0:	bl	0 <gomp_create_target_task>
    4dd4:	tst	w0, #0xff
    4dd8:	b.eq	4ca4 <GOMP_target_enter_exit_data+0x94>  // b.none
    4ddc:	b	4cbc <GOMP_target_enter_exit_data+0xac>
    4de0:	ldr	w1, [x1, #132]
    4de4:	tbnz	w1, #2, 4cbc <GOMP_target_enter_exit_data+0xac>
    4de8:	ldr	x0, [x0, #80]
    4dec:	ldr	x0, [x0, #40]
    4df0:	cbz	x0, 4d04 <GOMP_target_enter_exit_data+0xf4>
    4df4:	ldrb	w1, [x0, #49]
    4df8:	cbnz	w1, 4cbc <GOMP_target_enter_exit_data+0xac>
    4dfc:	ldrb	w1, [x0, #50]
    4e00:	cbz	w1, 4d04 <GOMP_target_enter_exit_data+0xf4>
    4e04:	ldr	x0, [x0]
    4e08:	cbz	x0, 4d04 <GOMP_target_enter_exit_data+0xf4>
    4e0c:	ldrb	w0, [x0, #49]
    4e10:	cbz	w0, 4d04 <GOMP_target_enter_exit_data+0xf4>
    4e14:	b	4cbc <GOMP_target_enter_exit_data+0xac>
    4e18:	ldr	w0, [x1, #132]
    4e1c:	tbnz	w0, #2, 4cbc <GOMP_target_enter_exit_data+0xac>
    4e20:	ldr	x0, [x2, #40]
    4e24:	cbz	x0, 4c9c <GOMP_target_enter_exit_data+0x8c>
    4e28:	ldrb	w1, [x0, #49]
    4e2c:	cbnz	w1, 4cbc <GOMP_target_enter_exit_data+0xac>
    4e30:	ldrb	w1, [x0, #50]
    4e34:	cbz	w1, 4c9c <GOMP_target_enter_exit_data+0x8c>
    4e38:	ldr	x0, [x0]
    4e3c:	cbz	x0, 4c9c <GOMP_target_enter_exit_data+0x8c>
    4e40:	ldrb	w0, [x0, #49]
    4e44:	cbz	w0, 4c9c <GOMP_target_enter_exit_data+0x8c>
    4e48:	b	4cbc <GOMP_target_enter_exit_data+0xac>
    4e4c:	nop

0000000000004e50 <gomp_target_task_fn>:
    4e50:	stp	x29, x30, [sp, #-48]!
    4e54:	mov	x29, sp
    4e58:	stp	x19, x20, [sp, #16]
    4e5c:	mov	x19, x0
    4e60:	ldr	x0, [x0, #8]
    4e64:	stp	x21, x22, [sp, #32]
    4e68:	ldr	x21, [x19]
    4e6c:	cbz	x0, 4f24 <gomp_target_task_fn+0xd4>
    4e70:	cbz	x21, 4f00 <gomp_target_task_fn+0xb0>
    4e74:	ldr	w1, [x21, #8]
    4e78:	tbz	w1, #2, 4f00 <gomp_target_task_fn+0xb0>
    4e7c:	tbnz	w1, #1, 5020 <gomp_target_task_fn+0x1d0>
    4e80:	mov	x1, x0
    4e84:	mov	x0, x21
    4e88:	bl	a80 <gomp_get_target_fn_addr.part.0>
    4e8c:	mov	x20, x0
    4e90:	cbz	x0, 4efc <gomp_target_task_fn+0xac>
    4e94:	ldr	x1, [x21, #136]
    4e98:	cbz	x1, 4eac <gomp_target_task_fn+0x5c>
    4e9c:	mov	x0, x20
    4ea0:	blr	x1
    4ea4:	tst	w0, #0xff
    4ea8:	b.eq	4efc <gomp_target_task_fn+0xac>  // b.none
    4eac:	ldr	w0, [x19, #44]
    4eb0:	cmp	w0, #0x5
    4eb4:	b.eq	4fdc <gomp_target_task_fn+0x18c>  // b.none
    4eb8:	ldr	w0, [x21, #8]
    4ebc:	add	x2, x19, #0x50
    4ec0:	tbz	w0, #0, 5028 <gomp_target_task_fn+0x1d8>
    4ec4:	str	xzr, [x19, #48]
    4ec8:	ldr	w0, [x21, #12]
    4ecc:	mov	w1, #0x3                   	// #3
    4ed0:	ldr	x3, [x19, #72]
    4ed4:	mov	x4, x19
    4ed8:	ldr	x5, [x21, #152]
    4edc:	str	w1, [x19, #44]
    4ee0:	mov	x1, x20
    4ee4:	blr	x5
    4ee8:	mov	w0, #0x1                   	// #1
    4eec:	ldp	x19, x20, [sp, #16]
    4ef0:	ldp	x21, x22, [sp, #32]
    4ef4:	ldp	x29, x30, [sp], #48
    4ef8:	ret
    4efc:	ldr	x0, [x19, #8]
    4f00:	mov	w1, #0x2                   	// #2
    4f04:	str	w1, [x19, #44]
    4f08:	add	x1, x19, #0x50
    4f0c:	bl	2e8 <gomp_target_fallback>
    4f10:	mov	w0, #0x0                   	// #0
    4f14:	ldp	x19, x20, [sp, #16]
    4f18:	ldp	x21, x22, [sp, #32]
    4f1c:	ldp	x29, x30, [sp], #48
    4f20:	ret
    4f24:	cbz	x21, 4fc8 <gomp_target_task_fn+0x178>
    4f28:	ldr	w0, [x21, #8]
    4f2c:	mov	w1, #0x5                   	// #5
    4f30:	and	w0, w0, w1
    4f34:	cmp	w0, #0x4
    4f38:	b.ne	4fc8 <gomp_target_task_fn+0x178>  // b.any
    4f3c:	ldr	w0, [x19, #40]
    4f40:	ldr	x1, [x19, #16]
    4f44:	tbnz	w0, #31, 5050 <gomp_target_task_fn+0x200>
    4f48:	tbnz	w0, #1, 4fb4 <gomp_target_task_fn+0x164>
    4f4c:	cbz	x1, 4fc8 <gomp_target_task_fn+0x178>
    4f50:	ldr	x9, [x19, #24]
    4f54:	mov	x20, #0x0                   	// #0
    4f58:	ldr	x8, [x19, #32]
    4f5c:	lsl	x5, x20, #1
    4f60:	add	x2, x20, #0xa
    4f64:	mov	x0, x21
    4f68:	mov	w7, #0x3                   	// #3
    4f6c:	mov	w6, #0x1                   	// #1
    4f70:	ldrb	w10, [x8, x5]
    4f74:	lsl	x2, x2, #3
    4f78:	sub	x22, x2, #0x50
    4f7c:	add	x5, x8, x5
    4f80:	add	x2, x19, x2
    4f84:	add	x4, x9, x22
    4f88:	cmp	w10, #0x1c
    4f8c:	mov	x3, #0x0                   	// #0
    4f90:	mov	x1, #0x1                   	// #1
    4f94:	b.eq	4ff4 <gomp_target_task_fn+0x1a4>  // b.none
    4f98:	bl	1808 <gomp_map_vars>
    4f9c:	add	x20, x20, #0x1
    4fa0:	ldr	x0, [x19, #16]
    4fa4:	cmp	x0, x20
    4fa8:	b.ls	4fc8 <gomp_target_task_fn+0x178>  // b.plast
    4fac:	ldr	x9, [x19, #24]
    4fb0:	b	4f58 <gomp_target_task_fn+0x108>
    4fb4:	ldp	x3, x4, [x19, #24]
    4fb8:	mov	x0, x21
    4fbc:	add	x2, x19, #0x50
    4fc0:	bl	10a0 <gomp_exit_data>
    4fc4:	nop
    4fc8:	mov	w0, #0x0                   	// #0
    4fcc:	ldp	x19, x20, [sp, #16]
    4fd0:	ldp	x21, x22, [sp, #32]
    4fd4:	ldp	x29, x30, [sp], #48
    4fd8:	ret
    4fdc:	ldr	x0, [x19, #48]
    4fe0:	cbz	x0, 4fc8 <gomp_target_task_fn+0x178>
    4fe4:	mov	w1, #0x1                   	// #1
    4fe8:	bl	31b8 <gomp_unmap_vars>
    4fec:	mov	w0, #0x0                   	// #0
    4ff0:	b	4f14 <gomp_target_task_fn+0xc4>
    4ff4:	ldr	x1, [x9, x22]
    4ff8:	add	x1, x1, #0x1
    4ffc:	bl	1808 <gomp_map_vars>
    5000:	ldp	x0, x9, [x19, #16]
    5004:	ldr	x1, [x9, x22]
    5008:	add	x20, x20, x1
    500c:	add	x20, x20, #0x1
    5010:	cmp	x0, x20
    5014:	b.hi	4f58 <gomp_target_task_fn+0x108>  // b.pmore
    5018:	mov	w0, #0x0                   	// #0
    501c:	b	4fcc <gomp_target_task_fn+0x17c>
    5020:	mov	x20, x0
    5024:	b	4e94 <gomp_target_task_fn+0x44>
    5028:	ldp	x1, x4, [x19, #16]
    502c:	mov	w7, #0x1                   	// #1
    5030:	ldr	x5, [x19, #32]
    5034:	mov	w6, w7
    5038:	mov	x0, x21
    503c:	mov	x3, #0x0                   	// #0
    5040:	bl	1808 <gomp_map_vars>
    5044:	ldr	x2, [x0, #16]
    5048:	str	x0, [x19, #48]
    504c:	b	4ec8 <gomp_target_task_fn+0x78>
    5050:	ldp	x3, x4, [x19, #24]
    5054:	mov	x0, x21
    5058:	add	x2, x19, #0x50
    505c:	mov	w5, #0x1                   	// #1
    5060:	bl	b50 <gomp_update>
    5064:	mov	w0, #0x0                   	// #0
    5068:	b	4f14 <gomp_target_task_fn+0xc4>
    506c:	nop

0000000000005070 <GOMP_teams>:
    5070:	cbz	w1, 50b8 <GOMP_teams+0x48>
    5074:	stp	x29, x30, [sp, #-32]!
    5078:	adrp	x0, 0 <gomp_tls_data>
    507c:	ldr	x0, [x0]
    5080:	mov	x29, sp
    5084:	str	x19, [sp, #16]
    5088:	mov	w19, w1
    508c:	mrs	x1, tpidr_el0
    5090:	add	x0, x1, x0
    5094:	ldr	x0, [x0, #80]
    5098:	cbz	x0, 50bc <GOMP_teams+0x4c>
    509c:	add	x0, x0, #0x90
    50a0:	cmp	w19, #0x0
    50a4:	csinv	w19, w19, wzr, ge  // ge = tcont
    50a8:	str	w19, [x0, #20]
    50ac:	ldr	x19, [sp, #16]
    50b0:	ldp	x29, x30, [sp], #32
    50b4:	ret
    50b8:	ret
    50bc:	bl	0 <gomp_new_icv>
    50c0:	cmp	w19, #0x0
    50c4:	csinv	w19, w19, wzr, ge  // ge = tcont
    50c8:	str	w19, [x0, #20]
    50cc:	ldr	x19, [sp, #16]
    50d0:	ldp	x29, x30, [sp], #32
    50d4:	ret

00000000000050d8 <omp_target_alloc>:
    50d8:	cmn	w1, #0x2
    50dc:	b.eq	5180 <omp_target_alloc+0xa8>  // b.none
    50e0:	stp	x29, x30, [sp, #-48]!
    50e4:	mov	x29, sp
    50e8:	stp	x19, x20, [sp, #16]
    50ec:	tbnz	w1, #31, 5184 <omp_target_alloc+0xac>
    50f0:	mov	x20, x0
    50f4:	mov	w0, w1
    50f8:	bl	3980 <resolve_device>
    50fc:	mov	x19, x0
    5100:	cbz	x0, 5184 <omp_target_alloc+0xac>
    5104:	ldr	w0, [x0, #8]
    5108:	mov	w1, #0x5                   	// #5
    510c:	and	w0, w0, w1
    5110:	cmp	w0, #0x4
    5114:	b.ne	5174 <omp_target_alloc+0x9c>  // b.any
    5118:	str	x21, [sp, #32]
    511c:	add	x21, x19, #0xa8
    5120:	mov	w0, #0x1                   	// #1
    5124:	ldaxr	w1, [x21]
    5128:	cbnz	w1, 5134 <omp_target_alloc+0x5c>
    512c:	stxr	w2, w0, [x21]
    5130:	cbnz	w2, 5124 <omp_target_alloc+0x4c>
    5134:	cmp	w1, #0x0
    5138:	b.ne	51a8 <omp_target_alloc+0xd0>  // b.any
    513c:	ldr	w0, [x19, #12]
    5140:	mov	x1, x20
    5144:	ldr	x2, [x19, #96]
    5148:	blr	x2
    514c:	mov	x19, x0
    5150:	ldxr	w0, [x21]
    5154:	stlxr	w1, wzr, [x21]
    5158:	cbnz	w1, 5150 <omp_target_alloc+0x78>
    515c:	tbnz	w0, #31, 5198 <omp_target_alloc+0xc0>
    5160:	ldr	x21, [sp, #32]
    5164:	mov	x0, x19
    5168:	ldp	x19, x20, [sp, #16]
    516c:	ldp	x29, x30, [sp], #48
    5170:	ret
    5174:	mov	x0, x20
    5178:	ldp	x19, x20, [sp, #16]
    517c:	ldp	x29, x30, [sp], #48
    5180:	b	0 <malloc>
    5184:	mov	x19, #0x0                   	// #0
    5188:	mov	x0, x19
    518c:	ldp	x19, x20, [sp, #16]
    5190:	ldp	x29, x30, [sp], #48
    5194:	ret
    5198:	mov	x0, x21
    519c:	bl	0 <gomp_mutex_unlock_slow>
    51a0:	ldr	x21, [sp, #32]
    51a4:	b	5164 <omp_target_alloc+0x8c>
    51a8:	mov	x0, x21
    51ac:	bl	0 <gomp_mutex_lock_slow>
    51b0:	b	513c <omp_target_alloc+0x64>
    51b4:	nop

00000000000051b8 <omp_target_free>:
    51b8:	cbz	x0, 5268 <omp_target_free+0xb0>
    51bc:	stp	x29, x30, [sp, #-48]!
    51c0:	cmn	w1, #0x2
    51c4:	mov	x29, sp
    51c8:	stp	x19, x20, [sp, #16]
    51cc:	mov	x19, x0
    51d0:	b.eq	5258 <omp_target_free+0xa0>  // b.none
    51d4:	tbnz	w1, #31, 524c <omp_target_free+0x94>
    51d8:	mov	w0, w1
    51dc:	bl	3980 <resolve_device>
    51e0:	mov	x20, x0
    51e4:	cbz	x0, 524c <omp_target_free+0x94>
    51e8:	ldr	w0, [x0, #8]
    51ec:	mov	w1, #0x5                   	// #5
    51f0:	and	w0, w0, w1
    51f4:	cmp	w0, #0x4
    51f8:	b.ne	5258 <omp_target_free+0xa0>  // b.any
    51fc:	str	x21, [sp, #32]
    5200:	add	x21, x20, #0xa8
    5204:	mov	w0, #0x1                   	// #1
    5208:	ldaxr	w1, [x21]
    520c:	cbnz	w1, 5218 <omp_target_free+0x60>
    5210:	stxr	w2, w0, [x21]
    5214:	cbnz	w2, 5208 <omp_target_free+0x50>
    5218:	cmp	w1, #0x0
    521c:	b.ne	5280 <omp_target_free+0xc8>  // b.any
    5220:	ldr	w0, [x20, #12]
    5224:	mov	x1, x19
    5228:	ldr	x2, [x20, #104]
    522c:	blr	x2
    5230:	tst	w0, #0xff
    5234:	b.eq	528c <omp_target_free+0xd4>  // b.none
    5238:	ldxr	w0, [x21]
    523c:	stlxr	w1, wzr, [x21]
    5240:	cbnz	w1, 5238 <omp_target_free+0x80>
    5244:	tbnz	w0, #31, 526c <omp_target_free+0xb4>
    5248:	ldr	x21, [sp, #32]
    524c:	ldp	x19, x20, [sp, #16]
    5250:	ldp	x29, x30, [sp], #48
    5254:	ret
    5258:	mov	x0, x19
    525c:	ldp	x19, x20, [sp, #16]
    5260:	ldp	x29, x30, [sp], #48
    5264:	b	0 <free>
    5268:	ret
    526c:	mov	x0, x21
    5270:	ldp	x19, x20, [sp, #16]
    5274:	ldr	x21, [sp, #32]
    5278:	ldp	x29, x30, [sp], #48
    527c:	b	0 <gomp_mutex_unlock_slow>
    5280:	mov	x0, x21
    5284:	bl	0 <gomp_mutex_lock_slow>
    5288:	b	5220 <omp_target_free+0x68>
    528c:	mov	x0, x21
    5290:	bl	2c8 <gomp_mutex_unlock>
    5294:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    5298:	mov	x1, x19
    529c:	add	x0, x0, #0x0
    52a0:	bl	0 <gomp_fatal>
    52a4:	nop

00000000000052a8 <omp_target_is_present>:
    52a8:	stp	x29, x30, [sp, #-112]!
    52ac:	cmp	x0, #0x0
    52b0:	ccmn	w1, #0x2, #0x4, ne  // ne = any
    52b4:	mov	x29, sp
    52b8:	stp	x19, x20, [sp, #16]
    52bc:	b.eq	53e0 <omp_target_is_present+0x138>  // b.none
    52c0:	mov	w19, w1
    52c4:	tbnz	w1, #31, 53f8 <omp_target_is_present+0x150>
    52c8:	str	x21, [sp, #32]
    52cc:	adrp	x21, 0 <omp_target_memcpy_rect_worker>
    52d0:	add	x21, x21, #0x0
    52d4:	mov	x20, x0
    52d8:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
    52dc:	add	x0, x21, #0x14
    52e0:	add	x1, x1, #0x0
    52e4:	bl	0 <pthread_once>
    52e8:	ldr	w0, [x21, #4]
    52ec:	cmp	w19, w0
    52f0:	b.ge	53f4 <omp_target_is_present+0x14c>  // b.tcont
    52f4:	mov	w1, #0x130                 	// #304
    52f8:	mov	w2, #0x1                   	// #1
    52fc:	ldr	x0, [x21, #8]
    5300:	smull	x19, w19, w1
    5304:	add	x0, x0, x19
    5308:	add	x0, x0, #0xa8
    530c:	ldaxr	w1, [x0]
    5310:	cbnz	w1, 531c <omp_target_is_present+0x74>
    5314:	stxr	w3, w2, [x0]
    5318:	cbnz	w3, 530c <omp_target_is_present+0x64>
    531c:	cmp	w1, #0x0
    5320:	b.ne	5458 <omp_target_is_present+0x1b0>  // b.any
    5324:	ldr	x0, [x21, #8]
    5328:	add	x0, x0, x19
    532c:	ldr	w1, [x0, #172]
    5330:	cbz	w1, 540c <omp_target_is_present+0x164>
    5334:	add	x0, x0, #0xa8
    5338:	cmp	w1, #0x2
    533c:	b.eq	5420 <omp_target_is_present+0x178>  // b.none
    5340:	ldxr	w1, [x0]
    5344:	stlxr	w2, wzr, [x0]
    5348:	cbnz	w2, 5340 <omp_target_is_present+0x98>
    534c:	tbnz	w1, #31, 5440 <omp_target_is_present+0x198>
    5350:	ldr	x0, [x21, #8]
    5354:	adds	x19, x0, x19
    5358:	b.eq	53f4 <omp_target_is_present+0x14c>  // b.none
    535c:	ldr	w0, [x19, #8]
    5360:	mov	w1, #0x5                   	// #5
    5364:	and	w0, w0, w1
    5368:	cmp	w0, #0x4
    536c:	b.ne	53dc <omp_target_is_present+0x134>  // b.any
    5370:	add	x21, x19, #0xa8
    5374:	mov	w0, #0x1                   	// #1
    5378:	ldaxr	w1, [x21]
    537c:	cbnz	w1, 5388 <omp_target_is_present+0xe0>
    5380:	stxr	w2, w0, [x21]
    5384:	cbnz	w2, 5378 <omp_target_is_present+0xd0>
    5388:	cmp	w1, #0x0
    538c:	b.ne	5460 <omp_target_is_present+0x1b8>  // b.any
    5390:	add	x2, x20, #0x1
    5394:	add	x0, x19, #0xa0
    5398:	add	x1, sp, #0x38
    539c:	stp	x20, x2, [sp, #56]
    53a0:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    53a4:	cmp	x0, #0x0
    53a8:	ldr	x1, [sp, #64]
    53ac:	cset	w19, ne  // ne = any
    53b0:	sub	x1, x1, #0x1
    53b4:	str	x1, [sp, #64]
    53b8:	ldxr	w0, [x21]
    53bc:	stlxr	w1, wzr, [x21]
    53c0:	cbnz	w1, 53b8 <omp_target_is_present+0x110>
    53c4:	tbnz	w0, #31, 5448 <omp_target_is_present+0x1a0>
    53c8:	mov	w0, w19
    53cc:	ldp	x19, x20, [sp, #16]
    53d0:	ldr	x21, [sp, #32]
    53d4:	ldp	x29, x30, [sp], #112
    53d8:	ret
    53dc:	ldr	x21, [sp, #32]
    53e0:	mov	w19, #0x1                   	// #1
    53e4:	mov	w0, w19
    53e8:	ldp	x19, x20, [sp, #16]
    53ec:	ldp	x29, x30, [sp], #112
    53f0:	ret
    53f4:	ldr	x21, [sp, #32]
    53f8:	mov	w19, #0x0                   	// #0
    53fc:	mov	w0, w19
    5400:	ldp	x19, x20, [sp, #16]
    5404:	ldp	x29, x30, [sp], #112
    5408:	ret
    540c:	bl	38b0 <gomp_init_device>
    5410:	ldr	x0, [x21, #8]
    5414:	add	x0, x0, x19
    5418:	add	x0, x0, #0xa8
    541c:	b	5340 <omp_target_is_present+0x98>
    5420:	ldxr	w1, [x0]
    5424:	stlxr	w2, wzr, [x0]
    5428:	cbnz	w2, 5420 <omp_target_is_present+0x178>
    542c:	tbz	w1, #31, 53f4 <omp_target_is_present+0x14c>
    5430:	bl	0 <gomp_mutex_unlock_slow>
    5434:	mov	w19, #0x0                   	// #0
    5438:	ldr	x21, [sp, #32]
    543c:	b	53e4 <omp_target_is_present+0x13c>
    5440:	bl	0 <gomp_mutex_unlock_slow>
    5444:	b	5350 <omp_target_is_present+0xa8>
    5448:	mov	x0, x21
    544c:	bl	0 <gomp_mutex_unlock_slow>
    5450:	ldr	x21, [sp, #32]
    5454:	b	53e4 <omp_target_is_present+0x13c>
    5458:	bl	0 <gomp_mutex_lock_slow>
    545c:	b	5324 <omp_target_is_present+0x7c>
    5460:	mov	x0, x21
    5464:	bl	0 <gomp_mutex_lock_slow>
    5468:	b	5390 <omp_target_is_present+0xe8>
    546c:	nop

0000000000005470 <omp_target_memcpy>:
    5470:	stp	x29, x30, [sp, #-80]!
    5474:	cmn	w5, #0x2
    5478:	mov	x29, sp
    547c:	stp	x19, x20, [sp, #16]
    5480:	mov	w19, w6
    5484:	stp	x21, x22, [sp, #32]
    5488:	mov	x21, x0
    548c:	mov	x22, x1
    5490:	stp	x23, x24, [sp, #48]
    5494:	mov	x23, x2
    5498:	mov	x24, x3
    549c:	str	x25, [sp, #64]
    54a0:	mov	x25, x4
    54a4:	b.eq	54d0 <omp_target_memcpy+0x60>  // b.none
    54a8:	tbnz	w5, #31, 5558 <omp_target_memcpy+0xe8>
    54ac:	mov	w0, w5
    54b0:	bl	3980 <resolve_device>
    54b4:	mov	x20, x0
    54b8:	cbz	x0, 5558 <omp_target_memcpy+0xe8>
    54bc:	ldr	w0, [x0, #8]
    54c0:	mov	w1, #0x5                   	// #5
    54c4:	and	w0, w0, w1
    54c8:	cmp	w0, #0x4
    54cc:	b.eq	55d0 <omp_target_memcpy+0x160>  // b.none
    54d0:	cmn	w19, #0x2
    54d4:	mov	x20, #0x0                   	// #0
    54d8:	b.eq	5658 <omp_target_memcpy+0x1e8>  // b.none
    54dc:	tbnz	w19, #31, 5558 <omp_target_memcpy+0xe8>
    54e0:	mov	w0, w19
    54e4:	bl	3980 <resolve_device>
    54e8:	mov	x19, x0
    54ec:	cbz	x0, 5558 <omp_target_memcpy+0xe8>
    54f0:	ldr	w0, [x0, #8]
    54f4:	mov	w1, #0x5                   	// #5
    54f8:	and	w0, w0, w1
    54fc:	cmp	w0, #0x4
    5500:	b.eq	5574 <omp_target_memcpy+0x104>  // b.none
    5504:	cbz	x20, 5658 <omp_target_memcpy+0x1e8>
    5508:	add	x19, x20, #0xa8
    550c:	mov	w0, #0x1                   	// #1
    5510:	ldaxr	w1, [x19]
    5514:	cbnz	w1, 5520 <omp_target_memcpy+0xb0>
    5518:	stxr	w2, w0, [x19]
    551c:	cbnz	w2, 5510 <omp_target_memcpy+0xa0>
    5520:	cmp	w1, #0x0
    5524:	b.ne	56ac <omp_target_memcpy+0x23c>  // b.any
    5528:	ldr	w0, [x20, #12]
    552c:	mov	x3, x23
    5530:	ldr	x4, [x20, #120]
    5534:	add	x2, x22, x25
    5538:	add	x1, x21, x24
    553c:	blr	x4
    5540:	and	w20, w0, #0xff
    5544:	ldxr	w0, [x19]
    5548:	stlxr	w1, wzr, [x19]
    554c:	cbnz	w1, 5544 <omp_target_memcpy+0xd4>
    5550:	tbnz	w0, #31, 5684 <omp_target_memcpy+0x214>
    5554:	cbnz	w20, 563c <omp_target_memcpy+0x1cc>
    5558:	mov	w0, #0x16                  	// #22
    555c:	ldp	x19, x20, [sp, #16]
    5560:	ldp	x21, x22, [sp, #32]
    5564:	ldp	x23, x24, [sp, #48]
    5568:	ldr	x25, [sp, #64]
    556c:	ldp	x29, x30, [sp], #80
    5570:	ret
    5574:	cbz	x20, 55e0 <omp_target_memcpy+0x170>
    5578:	cmp	x19, x20
    557c:	b.ne	5558 <omp_target_memcpy+0xe8>  // b.any
    5580:	add	x19, x20, #0xa8
    5584:	mov	w0, #0x1                   	// #1
    5588:	ldaxr	w1, [x19]
    558c:	cbnz	w1, 5598 <omp_target_memcpy+0x128>
    5590:	stxr	w2, w0, [x19]
    5594:	cbnz	w2, 5588 <omp_target_memcpy+0x118>
    5598:	cmp	w1, #0x0
    559c:	b.ne	56a0 <omp_target_memcpy+0x230>  // b.any
    55a0:	ldr	w0, [x20, #12]
    55a4:	mov	x3, x23
    55a8:	ldr	x4, [x20, #128]
    55ac:	add	x2, x22, x25
    55b0:	add	x1, x21, x24
    55b4:	blr	x4
    55b8:	and	w20, w0, #0xff
    55bc:	ldxr	w0, [x19]
    55c0:	stlxr	w1, wzr, [x19]
    55c4:	cbnz	w1, 55bc <omp_target_memcpy+0x14c>
    55c8:	tbz	w0, #31, 5554 <omp_target_memcpy+0xe4>
    55cc:	b	5684 <omp_target_memcpy+0x214>
    55d0:	cmn	w19, #0x2
    55d4:	b.eq	5508 <omp_target_memcpy+0x98>  // b.none
    55d8:	tbz	w19, #31, 54e0 <omp_target_memcpy+0x70>
    55dc:	b	5558 <omp_target_memcpy+0xe8>
    55e0:	add	x20, x19, #0xa8
    55e4:	mov	w0, #0x1                   	// #1
    55e8:	ldaxr	w1, [x20]
    55ec:	cbnz	w1, 55f8 <omp_target_memcpy+0x188>
    55f0:	stxr	w2, w0, [x20]
    55f4:	cbnz	w2, 55e8 <omp_target_memcpy+0x178>
    55f8:	cmp	w1, #0x0
    55fc:	b.ne	5694 <omp_target_memcpy+0x224>  // b.any
    5600:	ldr	w0, [x19, #12]
    5604:	mov	x3, x23
    5608:	ldr	x4, [x19, #112]
    560c:	add	x2, x22, x25
    5610:	add	x1, x21, x24
    5614:	blr	x4
    5618:	and	w19, w0, #0xff
    561c:	ldxr	w0, [x20]
    5620:	stlxr	w1, wzr, [x20]
    5624:	cbnz	w1, 561c <omp_target_memcpy+0x1ac>
    5628:	tbz	w0, #31, 5638 <omp_target_memcpy+0x1c8>
    562c:	mov	x0, x20
    5630:	bl	0 <gomp_mutex_unlock_slow>
    5634:	nop
    5638:	cbz	w19, 5558 <omp_target_memcpy+0xe8>
    563c:	mov	w0, #0x0                   	// #0
    5640:	ldp	x19, x20, [sp, #16]
    5644:	ldp	x21, x22, [sp, #32]
    5648:	ldp	x23, x24, [sp, #48]
    564c:	ldr	x25, [sp, #64]
    5650:	ldp	x29, x30, [sp], #80
    5654:	ret
    5658:	add	x1, x22, x25
    565c:	mov	x2, x23
    5660:	add	x0, x21, x24
    5664:	bl	0 <memcpy>
    5668:	mov	w0, #0x0                   	// #0
    566c:	ldp	x19, x20, [sp, #16]
    5670:	ldp	x21, x22, [sp, #32]
    5674:	ldp	x23, x24, [sp, #48]
    5678:	ldr	x25, [sp, #64]
    567c:	ldp	x29, x30, [sp], #80
    5680:	ret
    5684:	mov	x0, x19
    5688:	bl	0 <gomp_mutex_unlock_slow>
    568c:	cbz	w20, 5558 <omp_target_memcpy+0xe8>
    5690:	b	563c <omp_target_memcpy+0x1cc>
    5694:	mov	x0, x20
    5698:	bl	0 <gomp_mutex_lock_slow>
    569c:	b	5600 <omp_target_memcpy+0x190>
    56a0:	mov	x0, x19
    56a4:	bl	0 <gomp_mutex_lock_slow>
    56a8:	b	55a0 <omp_target_memcpy+0x130>
    56ac:	mov	x0, x19
    56b0:	bl	0 <gomp_mutex_lock_slow>
    56b4:	b	5528 <omp_target_memcpy+0xb8>

00000000000056b8 <omp_target_memcpy_rect>:
    56b8:	sub	sp, sp, #0x90
    56bc:	stp	x29, x30, [sp, #32]
    56c0:	add	x29, sp, #0x20
    56c4:	stp	x19, x20, [sp, #48]
    56c8:	mov	x19, x0
    56cc:	mov	x20, x1
    56d0:	stp	x21, x22, [sp, #64]
    56d4:	orr	x1, x0, x1
    56d8:	ldr	w22, [sp, #160]
    56dc:	stp	x27, x28, [sp, #112]
    56e0:	mov	x28, x2
    56e4:	ldr	w0, [sp, #152]
    56e8:	ldr	x2, [sp, #144]
    56ec:	cbz	x1, 57f0 <omp_target_memcpy_rect+0x138>
    56f0:	stp	x23, x24, [sp, #80]
    56f4:	mov	w27, w3
    56f8:	mov	x24, x6
    56fc:	stp	x25, x26, [sp, #96]
    5700:	mov	x23, x7
    5704:	mov	x26, x4
    5708:	mov	x25, x5
    570c:	cmn	w0, #0x2
    5710:	b.eq	5740 <omp_target_memcpy_rect+0x88>  // b.none
    5714:	tbnz	w0, #31, 57c8 <omp_target_memcpy_rect+0x110>
    5718:	str	x2, [sp, #128]
    571c:	bl	3980 <resolve_device>
    5720:	mov	x21, x0
    5724:	cbz	x0, 57c8 <omp_target_memcpy_rect+0x110>
    5728:	ldr	w0, [x0, #8]
    572c:	mov	w1, #0x5                   	// #5
    5730:	ldr	x2, [sp, #128]
    5734:	and	w0, w0, w1
    5738:	cmp	w0, #0x4
    573c:	b.eq	58a8 <omp_target_memcpy_rect+0x1f0>  // b.none
    5740:	cmn	w22, #0x2
    5744:	mov	x21, #0x0                   	// #0
    5748:	b.eq	5780 <omp_target_memcpy_rect+0xc8>  // b.none
    574c:	str	x2, [sp, #128]
    5750:	tbnz	w22, #31, 57c8 <omp_target_memcpy_rect+0x110>
    5754:	mov	w0, w22
    5758:	bl	3980 <resolve_device>
    575c:	mov	x22, x0
    5760:	cbz	x0, 57c8 <omp_target_memcpy_rect+0x110>
    5764:	ldr	w0, [x0, #8]
    5768:	mov	w1, #0x5                   	// #5
    576c:	ldr	x2, [sp, #128]
    5770:	and	w0, w0, w1
    5774:	cmp	w0, #0x4
    5778:	b.eq	5810 <omp_target_memcpy_rect+0x158>  // b.none
    577c:	cbnz	x21, 58b0 <omp_target_memcpy_rect+0x1f8>
    5780:	mov	x7, x23
    5784:	mov	x6, x24
    5788:	mov	x5, x25
    578c:	mov	x4, x26
    5790:	mov	w3, w27
    5794:	mov	x1, x20
    5798:	mov	x0, x19
    579c:	stp	x2, xzr, [sp, #144]
    57a0:	mov	x2, x28
    57a4:	ldp	x29, x30, [sp, #32]
    57a8:	str	xzr, [sp, #160]
    57ac:	ldp	x19, x20, [sp, #48]
    57b0:	ldp	x21, x22, [sp, #64]
    57b4:	ldp	x23, x24, [sp, #80]
    57b8:	ldp	x25, x26, [sp, #96]
    57bc:	ldp	x27, x28, [sp, #112]
    57c0:	add	sp, sp, #0x90
    57c4:	b	0 <omp_target_memcpy_rect_worker>
    57c8:	ldp	x23, x24, [sp, #80]
    57cc:	mov	w19, #0x16                  	// #22
    57d0:	ldp	x25, x26, [sp, #96]
    57d4:	mov	w0, w19
    57d8:	ldp	x29, x30, [sp, #32]
    57dc:	ldp	x19, x20, [sp, #48]
    57e0:	ldp	x21, x22, [sp, #64]
    57e4:	ldp	x27, x28, [sp, #112]
    57e8:	add	sp, sp, #0x90
    57ec:	ret
    57f0:	mov	w19, #0x7fffffff            	// #2147483647
    57f4:	mov	w0, w19
    57f8:	ldp	x29, x30, [sp, #32]
    57fc:	ldp	x19, x20, [sp, #48]
    5800:	ldp	x21, x22, [sp, #64]
    5804:	ldp	x27, x28, [sp, #112]
    5808:	add	sp, sp, #0x90
    580c:	ret
    5810:	cmp	x21, #0x0
    5814:	add	x8, x22, #0xa8
    5818:	ccmp	x22, x21, #0x4, ne  // ne = any
    581c:	mov	w0, #0x1                   	// #1
    5820:	b.ne	57c8 <omp_target_memcpy_rect+0x110>  // b.any
    5824:	ldaxr	w1, [x8]
    5828:	cbnz	w1, 5834 <omp_target_memcpy_rect+0x17c>
    582c:	stxr	w3, w0, [x8]
    5830:	cbnz	w3, 5824 <omp_target_memcpy_rect+0x16c>
    5834:	cmp	w1, #0x0
    5838:	b.ne	5938 <omp_target_memcpy_rect+0x280>  // b.any
    583c:	stp	x2, x21, [sp]
    5840:	mov	x0, x19
    5844:	mov	x7, x23
    5848:	str	x22, [sp, #16]
    584c:	mov	x6, x24
    5850:	mov	x5, x25
    5854:	mov	x4, x26
    5858:	mov	w3, w27
    585c:	mov	x1, x20
    5860:	mov	x2, x28
    5864:	str	x8, [sp, #128]
    5868:	bl	0 <omp_target_memcpy_rect_worker>
    586c:	mov	w19, w0
    5870:	ldr	x8, [sp, #128]
    5874:	ldxr	w0, [x8]
    5878:	stlxr	w1, wzr, [x8]
    587c:	cbnz	w1, 5874 <omp_target_memcpy_rect+0x1bc>
    5880:	tbnz	w0, #31, 5924 <omp_target_memcpy_rect+0x26c>
    5884:	mov	w0, w19
    5888:	ldp	x29, x30, [sp, #32]
    588c:	ldp	x19, x20, [sp, #48]
    5890:	ldp	x21, x22, [sp, #64]
    5894:	ldp	x23, x24, [sp, #80]
    5898:	ldp	x25, x26, [sp, #96]
    589c:	ldp	x27, x28, [sp, #112]
    58a0:	add	sp, sp, #0x90
    58a4:	ret
    58a8:	cmn	w22, #0x2
    58ac:	b.ne	574c <omp_target_memcpy_rect+0x94>  // b.any
    58b0:	add	x22, x21, #0xa8
    58b4:	mov	w0, #0x1                   	// #1
    58b8:	ldaxr	w1, [x22]
    58bc:	cbnz	w1, 58c8 <omp_target_memcpy_rect+0x210>
    58c0:	stxr	w3, w0, [x22]
    58c4:	cbnz	w3, 58b8 <omp_target_memcpy_rect+0x200>
    58c8:	cmp	w1, #0x0
    58cc:	b.ne	594c <omp_target_memcpy_rect+0x294>  // b.any
    58d0:	stp	x2, x21, [sp]
    58d4:	mov	x0, x19
    58d8:	mov	x7, x23
    58dc:	str	xzr, [sp, #16]
    58e0:	mov	x6, x24
    58e4:	mov	x5, x25
    58e8:	mov	x4, x26
    58ec:	mov	w3, w27
    58f0:	mov	x1, x20
    58f4:	mov	x2, x28
    58f8:	bl	0 <omp_target_memcpy_rect_worker>
    58fc:	mov	w19, w0
    5900:	ldxr	w0, [x22]
    5904:	stlxr	w1, wzr, [x22]
    5908:	cbnz	w1, 5900 <omp_target_memcpy_rect+0x248>
    590c:	tbz	w0, #31, 5884 <omp_target_memcpy_rect+0x1cc>
    5910:	mov	x0, x22
    5914:	bl	0 <gomp_mutex_unlock_slow>
    5918:	ldp	x23, x24, [sp, #80]
    591c:	ldp	x25, x26, [sp, #96]
    5920:	b	57d4 <omp_target_memcpy_rect+0x11c>
    5924:	mov	x0, x8
    5928:	bl	0 <gomp_mutex_unlock_slow>
    592c:	ldp	x23, x24, [sp, #80]
    5930:	ldp	x25, x26, [sp, #96]
    5934:	b	57d4 <omp_target_memcpy_rect+0x11c>
    5938:	mov	x0, x8
    593c:	stp	x8, x2, [sp, #128]
    5940:	bl	0 <gomp_mutex_lock_slow>
    5944:	ldp	x8, x2, [sp, #128]
    5948:	b	583c <omp_target_memcpy_rect+0x184>
    594c:	mov	x0, x22
    5950:	str	x2, [sp, #128]
    5954:	bl	0 <gomp_mutex_lock_slow>
    5958:	ldr	x2, [sp, #128]
    595c:	b	58d0 <omp_target_memcpy_rect+0x218>

0000000000005960 <omp_target_associate_ptr>:
    5960:	stp	x29, x30, [sp, #-128]!
    5964:	mov	x29, sp
    5968:	stp	x19, x20, [sp, #16]
    596c:	tbnz	w4, #31, 5a3c <omp_target_associate_ptr+0xdc>
    5970:	mov	x19, x0
    5974:	mov	x20, x2
    5978:	mov	w0, w4
    597c:	stp	x21, x22, [sp, #32]
    5980:	mov	x22, x3
    5984:	stp	x23, x24, [sp, #48]
    5988:	mov	x23, x1
    598c:	bl	3980 <resolve_device>
    5990:	mov	x21, x0
    5994:	cbz	x0, 5a34 <omp_target_associate_ptr+0xd4>
    5998:	ldr	w0, [x0, #8]
    599c:	mov	w1, #0x5                   	// #5
    59a0:	and	w0, w0, w1
    59a4:	cmp	w0, #0x4
    59a8:	b.ne	5a34 <omp_target_associate_ptr+0xd4>  // b.any
    59ac:	add	x24, x21, #0xa8
    59b0:	mov	w0, #0x1                   	// #1
    59b4:	ldaxr	w1, [x24]
    59b8:	cbnz	w1, 59c4 <omp_target_associate_ptr+0x64>
    59bc:	stxr	w2, w0, [x24]
    59c0:	cbnz	w2, 59b4 <omp_target_associate_ptr+0x54>
    59c4:	cmp	w1, #0x0
    59c8:	b.ne	5b2c <omp_target_associate_ptr+0x1cc>  // b.any
    59cc:	add	x2, x19, x20
    59d0:	stp	x19, x2, [sp, #64]
    59d4:	cmp	x19, x2
    59d8:	add	x22, x23, x22
    59dc:	add	x20, x21, #0xa0
    59e0:	b.eq	5a50 <omp_target_associate_ptr+0xf0>  // b.none
    59e4:	add	x1, sp, #0x40
    59e8:	mov	x0, x20
    59ec:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    59f0:	cbz	x0, 5ac4 <omp_target_associate_ptr+0x164>
    59f4:	ldp	x1, x2, [x0, #16]
    59f8:	mov	w19, #0x16                  	// #22
    59fc:	ldr	x1, [x1, #16]
    5a00:	add	x1, x1, x2
    5a04:	cmp	x1, x22
    5a08:	b.eq	5aa0 <omp_target_associate_ptr+0x140>  // b.none
    5a0c:	ldxr	w0, [x24]
    5a10:	stlxr	w1, wzr, [x24]
    5a14:	cbnz	w1, 5a0c <omp_target_associate_ptr+0xac>
    5a18:	tbnz	w0, #31, 5b18 <omp_target_associate_ptr+0x1b8>
    5a1c:	mov	w0, w19
    5a20:	ldp	x19, x20, [sp, #16]
    5a24:	ldp	x21, x22, [sp, #32]
    5a28:	ldp	x23, x24, [sp, #48]
    5a2c:	ldp	x29, x30, [sp], #128
    5a30:	ret
    5a34:	ldp	x21, x22, [sp, #32]
    5a38:	ldp	x23, x24, [sp, #48]
    5a3c:	mov	w19, #0x16                  	// #22
    5a40:	mov	w0, w19
    5a44:	ldp	x19, x20, [sp, #16]
    5a48:	ldp	x29, x30, [sp], #128
    5a4c:	ret
    5a50:	add	x1, sp, #0x40
    5a54:	add	x19, x19, #0x1
    5a58:	mov	x0, x20
    5a5c:	str	x19, [sp, #72]
    5a60:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    5a64:	ldr	x1, [sp, #72]
    5a68:	sub	x1, x1, #0x1
    5a6c:	str	x1, [sp, #72]
    5a70:	cbnz	x0, 59f4 <omp_target_associate_ptr+0x94>
    5a74:	ldr	x2, [sp, #64]
    5a78:	add	x1, sp, #0x40
    5a7c:	mov	x0, x20
    5a80:	sub	x2, x2, #0x1
    5a84:	str	x2, [sp, #64]
    5a88:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    5a8c:	ldr	x1, [sp, #64]
    5a90:	add	x1, x1, #0x1
    5a94:	str	x1, [sp, #64]
    5a98:	cbnz	x0, 59f4 <omp_target_associate_ptr+0x94>
    5a9c:	b	59e4 <omp_target_associate_ptr+0x84>
    5aa0:	ldr	x2, [x0]
    5aa4:	ldr	x1, [sp, #64]
    5aa8:	cmp	x2, x1
    5aac:	b.hi	5a0c <omp_target_associate_ptr+0xac>  // b.pmore
    5ab0:	ldr	x0, [x0, #8]
    5ab4:	ldr	x1, [sp, #72]
    5ab8:	cmp	x0, x1
    5abc:	csel	w19, w19, wzr, cc  // cc = lo, ul, last
    5ac0:	b	5a0c <omp_target_associate_ptr+0xac>
    5ac4:	mov	x0, #0x40                  	// #64
    5ac8:	bl	0 <gomp_malloc>
    5acc:	mov	x23, x0
    5ad0:	mov	x0, #0x48                  	// #72
    5ad4:	bl	0 <gomp_malloc>
    5ad8:	mov	x1, x0
    5adc:	movi	v0.4s, #0x0
    5ae0:	mov	x3, #0x1                   	// #1
    5ae4:	ldr	q1, [sp, #64]
    5ae8:	mov	x2, #0xffffffffffffffff    	// #-1
    5aec:	stp	x3, x1, [x23]
    5af0:	mov	x0, x20
    5af4:	mov	w19, #0x0                   	// #0
    5af8:	stp	x23, x22, [x1, #16]
    5afc:	str	x2, [x1, #32]
    5b00:	stp	xzr, x21, [x23, #48]
    5b04:	str	q1, [x1]
    5b08:	stp	q0, q0, [x23, #16]
    5b0c:	stur	q0, [x1, #56]
    5b10:	bl	0 <splay_tree_prefix_splay_tree_insert>
    5b14:	b	5a0c <omp_target_associate_ptr+0xac>
    5b18:	mov	x0, x24
    5b1c:	bl	0 <gomp_mutex_unlock_slow>
    5b20:	ldp	x21, x22, [sp, #32]
    5b24:	ldp	x23, x24, [sp, #48]
    5b28:	b	5a40 <omp_target_associate_ptr+0xe0>
    5b2c:	mov	x0, x24
    5b30:	bl	0 <gomp_mutex_lock_slow>
    5b34:	b	59cc <omp_target_associate_ptr+0x6c>

0000000000005b38 <omp_target_disassociate_ptr>:
    5b38:	stp	x29, x30, [sp, #-112]!
    5b3c:	mov	x29, sp
    5b40:	stp	x19, x20, [sp, #16]
    5b44:	tbnz	w1, #31, 5bec <omp_target_disassociate_ptr+0xb4>
    5b48:	mov	x20, x0
    5b4c:	mov	w0, w1
    5b50:	bl	3980 <resolve_device>
    5b54:	mov	x19, x0
    5b58:	cbz	x0, 5bec <omp_target_disassociate_ptr+0xb4>
    5b5c:	ldr	w0, [x0, #8]
    5b60:	tbz	w0, #2, 5bec <omp_target_disassociate_ptr+0xb4>
    5b64:	stp	x21, x22, [sp, #32]
    5b68:	add	x21, x19, #0xa8
    5b6c:	mov	w0, #0x1                   	// #1
    5b70:	ldaxr	w1, [x21]
    5b74:	cbnz	w1, 5b80 <omp_target_disassociate_ptr+0x48>
    5b78:	stxr	w2, w0, [x21]
    5b7c:	cbnz	w2, 5b70 <omp_target_disassociate_ptr+0x38>
    5b80:	cmp	w1, #0x0
    5b84:	b.ne	5cb8 <omp_target_disassociate_ptr+0x180>  // b.any
    5b88:	add	x2, x20, #0x1
    5b8c:	add	x19, x19, #0xa0
    5b90:	add	x1, sp, #0x38
    5b94:	mov	x0, x19
    5b98:	stp	x20, x2, [sp, #56]
    5b9c:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    5ba0:	ldr	x1, [sp, #64]
    5ba4:	mov	x20, x0
    5ba8:	sub	x1, x1, #0x1
    5bac:	str	x1, [sp, #64]
    5bb0:	cbz	x0, 5c00 <omp_target_disassociate_ptr+0xc8>
    5bb4:	ldr	x0, [sp, #56]
    5bb8:	ldr	x1, [x20]
    5bbc:	cmp	x1, x0
    5bc0:	b.eq	5c44 <omp_target_disassociate_ptr+0x10c>  // b.none
    5bc4:	mov	w19, #0x16                  	// #22
    5bc8:	ldxr	w0, [x21]
    5bcc:	stlxr	w1, wzr, [x21]
    5bd0:	cbnz	w1, 5bc8 <omp_target_disassociate_ptr+0x90>
    5bd4:	tbnz	w0, #31, 5ca8 <omp_target_disassociate_ptr+0x170>
    5bd8:	mov	w0, w19
    5bdc:	ldp	x19, x20, [sp, #16]
    5be0:	ldp	x21, x22, [sp, #32]
    5be4:	ldp	x29, x30, [sp], #112
    5be8:	ret
    5bec:	mov	w19, #0x16                  	// #22
    5bf0:	mov	w0, w19
    5bf4:	ldp	x19, x20, [sp, #16]
    5bf8:	ldp	x29, x30, [sp], #112
    5bfc:	ret
    5c00:	ldr	x2, [sp, #56]
    5c04:	add	x1, sp, #0x38
    5c08:	mov	x0, x19
    5c0c:	sub	x2, x2, #0x1
    5c10:	str	x2, [sp, #56]
    5c14:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    5c18:	mov	x20, x0
    5c1c:	ldr	x1, [sp, #56]
    5c20:	add	x0, x1, #0x1
    5c24:	str	x0, [sp, #56]
    5c28:	cbnz	x20, 5bb8 <omp_target_disassociate_ptr+0x80>
    5c2c:	add	x1, sp, #0x38
    5c30:	mov	x0, x19
    5c34:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    5c38:	mov	x20, x0
    5c3c:	cbz	x0, 5bc4 <omp_target_disassociate_ptr+0x8c>
    5c40:	b	5bb4 <omp_target_disassociate_ptr+0x7c>
    5c44:	ldr	x0, [x20, #32]
    5c48:	cmn	x0, #0x1
    5c4c:	b.ne	5bc4 <omp_target_disassociate_ptr+0x8c>  // b.any
    5c50:	ldr	x0, [x20, #16]
    5c54:	ldr	x1, [x0, #16]
    5c58:	cbnz	x1, 5bc4 <omp_target_disassociate_ptr+0x8c>
    5c5c:	ldr	x1, [x0, #32]
    5c60:	cbnz	x1, 5bc4 <omp_target_disassociate_ptr+0x8c>
    5c64:	ldr	x1, [x0]
    5c68:	cmp	x1, #0x1
    5c6c:	b.ne	5bc4 <omp_target_disassociate_ptr+0x8c>  // b.any
    5c70:	ldr	x0, [x0, #48]
    5c74:	cbnz	x0, 5bc4 <omp_target_disassociate_ptr+0x8c>
    5c78:	mov	x0, x19
    5c7c:	mov	x1, x20
    5c80:	bl	0 <splay_tree_prefix_splay_tree_remove>
    5c84:	ldr	x20, [x20, #16]
    5c88:	ldr	x0, [x20, #24]
    5c8c:	cbnz	x0, 5cc4 <omp_target_disassociate_ptr+0x18c>
    5c90:	ldr	x0, [x20, #8]
    5c94:	mov	w19, #0x0                   	// #0
    5c98:	bl	0 <free>
    5c9c:	mov	x0, x20
    5ca0:	bl	0 <free>
    5ca4:	b	5bc8 <omp_target_disassociate_ptr+0x90>
    5ca8:	mov	x0, x21
    5cac:	bl	0 <gomp_mutex_unlock_slow>
    5cb0:	ldp	x21, x22, [sp, #32]
    5cb4:	b	5bf0 <omp_target_disassociate_ptr+0xb8>
    5cb8:	mov	x0, x21
    5cbc:	bl	0 <gomp_mutex_lock_slow>
    5cc0:	b	5b88 <omp_target_disassociate_ptr+0x50>
    5cc4:	ldr	x19, [x20, #56]
    5cc8:	ldr	x22, [x20, #32]
    5ccc:	ldr	w0, [x19, #12]
    5cd0:	ldr	x2, [x19, #104]
    5cd4:	mov	x1, x22
    5cd8:	blr	x2
    5cdc:	tst	w0, #0xff
    5ce0:	b.ne	5c90 <omp_target_disassociate_ptr+0x158>  // b.any
    5ce4:	add	x0, x19, #0xa8
    5ce8:	bl	2c8 <gomp_mutex_unlock>
    5cec:	adrp	x0, 0 <omp_target_memcpy_rect_worker>
    5cf0:	mov	x1, x22
    5cf4:	add	x0, x0, #0x0
    5cf8:	bl	0 <gomp_fatal>
    5cfc:	nop

0000000000005d00 <gomp_ialias_omp_pause_resource>:
    5d00:	cmn	w1, #0x2
    5d04:	b.eq	5d4c <gomp_ialias_omp_pause_resource+0x4c>  // b.none
    5d08:	stp	x29, x30, [sp, #-32]!
    5d0c:	mov	x29, sp
    5d10:	stp	x19, x20, [sp, #16]
    5d14:	mov	w19, w1
    5d18:	tbnz	w1, #31, 5d50 <gomp_ialias_omp_pause_resource+0x50>
    5d1c:	adrp	x20, 0 <omp_target_memcpy_rect_worker>
    5d20:	add	x20, x20, #0x0
    5d24:	add	x0, x20, #0x14
    5d28:	adrp	x1, 0 <omp_target_memcpy_rect_worker>
    5d2c:	add	x1, x1, #0x0
    5d30:	bl	0 <pthread_once>
    5d34:	ldr	w0, [x20, #4]
    5d38:	cmp	w19, w0
    5d3c:	csetm	w0, ge  // ge = tcont
    5d40:	ldp	x19, x20, [sp, #16]
    5d44:	ldp	x29, x30, [sp], #32
    5d48:	ret
    5d4c:	b	0 <gomp_pause_host>
    5d50:	mov	w0, #0xffffffff            	// #-1
    5d54:	b	5d40 <gomp_ialias_omp_pause_resource+0x40>

0000000000005d58 <gomp_ialias_omp_pause_resource_all>:
    5d58:	stp	x29, x30, [sp, #-16]!
    5d5c:	mov	x29, sp
    5d60:	bl	0 <gomp_pause_host>
    5d64:	cmp	w0, #0x0
    5d68:	csetm	w0, ne  // ne = any
    5d6c:	ldp	x29, x30, [sp], #16
    5d70:	ret

splay-tree.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <splay_tree_foreach_internal>:
   0:	cbz	x0, 54 <splay_tree_foreach_internal+0x54>
   4:	stp	x29, x30, [sp, #-48]!
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x19, x0
  14:	mov	x20, x2
  18:	str	x21, [sp, #32]
  1c:	mov	x21, x1
  20:	mov	x0, x19
  24:	mov	x1, x20
  28:	blr	x21
  2c:	ldr	x0, [x19, #56]
  30:	mov	x2, x20
  34:	mov	x1, x21
  38:	bl	0 <splay_tree_foreach_internal>
  3c:	ldr	x19, [x19, #64]
  40:	cbnz	x19, 20 <splay_tree_foreach_internal+0x20>
  44:	ldp	x19, x20, [sp, #16]
  48:	ldr	x21, [sp, #32]
  4c:	ldp	x29, x30, [sp], #48
  50:	ret
  54:	ret

0000000000000058 <splay_tree_prefix_splay_tree_insert>:
  58:	ldr	x2, [x0]
  5c:	cbz	x2, 150 <splay_tree_prefix_splay_tree_insert+0xf8>
  60:	ldp	x6, x3, [x1]
  64:	ldr	x7, [x2]
  68:	cmp	x6, x3
  6c:	b.eq	130 <splay_tree_prefix_splay_tree_insert+0xd8>  // b.none
  70:	cmp	x3, x7
  74:	b.ls	144 <splay_tree_prefix_splay_tree_insert+0xec>  // b.plast
  78:	ldr	x5, [x2, #8]
  7c:	cmp	x6, x5
  80:	b.cs	b0 <splay_tree_prefix_splay_tree_insert+0x58>  // b.hs, b.nlast
  84:	cmp	x5, x7
  88:	b.eq	15c <splay_tree_prefix_splay_tree_insert+0x104>  // b.none
  8c:	cmp	x6, x5
  90:	b.cs	108 <splay_tree_prefix_splay_tree_insert+0xb0>  // b.hs, b.nlast
  94:	cmp	x3, x7
  98:	b.ls	11c <splay_tree_prefix_splay_tree_insert+0xc4>  // b.plast
  9c:	stp	x29, x30, [sp, #-16]!
  a0:	adrp	x0, 0 <splay_tree_foreach_internal>
  a4:	add	x0, x0, #0x0
  a8:	mov	x29, sp
  ac:	bl	0 <gomp_fatal>
  b0:	ldr	x4, [x2, #64]
  b4:	mov	w9, #0x1                   	// #1
  b8:	cbz	x4, 274 <splay_tree_prefix_splay_tree_insert+0x21c>
  bc:	cmp	x6, x3
  c0:	ldr	x8, [x4]
  c4:	b.eq	184 <splay_tree_prefix_splay_tree_insert+0x12c>  // b.none
  c8:	cmp	x3, x8
  cc:	b.ls	198 <splay_tree_prefix_splay_tree_insert+0x140>  // b.plast
  d0:	ldr	x5, [x4, #8]
  d4:	cmp	x6, x5
  d8:	b.cs	1d4 <splay_tree_prefix_splay_tree_insert+0x17c>  // b.hs, b.nlast
  dc:	cmn	w9, #0x1
  e0:	b.eq	170 <splay_tree_prefix_splay_tree_insert+0x118>  // b.none
  e4:	ldr	x7, [x4, #56]
  e8:	str	x2, [x4, #56]
  ec:	str	x7, [x2, #64]
  f0:	str	x4, [x0]
  f4:	mov	x7, x8
  f8:	mov	x2, x4
  fc:	cmp	x5, x7
 100:	b.ne	8c <splay_tree_prefix_splay_tree_insert+0x34>  // b.any
 104:	b	15c <splay_tree_prefix_splay_tree_insert+0x104>
 108:	ldr	x3, [x2, #64]
 10c:	stp	x2, x3, [x1, #56]
 110:	str	xzr, [x2, #64]
 114:	str	x1, [x0]
 118:	ret
 11c:	ldr	x3, [x2, #56]
 120:	stp	x3, x2, [x1, #56]
 124:	str	xzr, [x2, #56]
 128:	str	x1, [x0]
 12c:	ret
 130:	ldr	x4, [x2, #8]
 134:	cmp	x4, x7
 138:	b.eq	9c <splay_tree_prefix_splay_tree_insert+0x44>  // b.none
 13c:	cmp	x3, x7
 140:	b.hi	78 <splay_tree_prefix_splay_tree_insert+0x20>  // b.pmore
 144:	mov	w9, #0xffffffff            	// #-1
 148:	ldr	x4, [x2, #56]
 14c:	b	b8 <splay_tree_prefix_splay_tree_insert+0x60>
 150:	stp	xzr, xzr, [x1, #56]
 154:	str	x1, [x0]
 158:	ret
 15c:	cmp	x6, x3
 160:	b.eq	9c <splay_tree_prefix_splay_tree_insert+0x44>  // b.none
 164:	cmp	x6, x5
 168:	b.cc	94 <splay_tree_prefix_splay_tree_insert+0x3c>  // b.lo, b.ul, b.last
 16c:	b	108 <splay_tree_prefix_splay_tree_insert+0xb0>
 170:	ldr	x7, [x4, #64]
 174:	str	x2, [x4, #64]
 178:	str	x7, [x2, #56]
 17c:	str	x4, [x0]
 180:	b	f4 <splay_tree_prefix_splay_tree_insert+0x9c>
 184:	ldr	x5, [x4, #8]
 188:	cmp	x8, x5
 18c:	b.eq	dc <splay_tree_prefix_splay_tree_insert+0x84>  // b.none
 190:	cmp	x3, x8
 194:	b.hi	d0 <splay_tree_prefix_splay_tree_insert+0x78>  // b.pmore
 198:	ldr	x5, [x4, #56]
 19c:	cbz	x5, 27c <splay_tree_prefix_splay_tree_insert+0x224>
 1a0:	cmn	w9, #0x1
 1a4:	b.ne	210 <splay_tree_prefix_splay_tree_insert+0x1b8>  // b.any
 1a8:	ldr	x7, [x5, #64]
 1ac:	str	x4, [x5, #64]
 1b0:	str	x7, [x4, #56]
 1b4:	ldr	x7, [x5]
 1b8:	str	x5, [x2, #56]
 1bc:	ldr	x4, [x5, #64]
 1c0:	str	x2, [x5, #64]
 1c4:	str	x4, [x2, #56]
 1c8:	mov	x2, x5
 1cc:	str	x5, [x0]
 1d0:	b	68 <splay_tree_prefix_splay_tree_insert+0x10>
 1d4:	ldr	x10, [x4, #64]
 1d8:	cbz	x10, dc <splay_tree_prefix_splay_tree_insert+0x84>
 1dc:	cmp	w9, #0x1
 1e0:	b.ne	244 <splay_tree_prefix_splay_tree_insert+0x1ec>  // b.any
 1e4:	ldr	x5, [x10, #56]
 1e8:	str	x4, [x10, #56]
 1ec:	ldr	x7, [x10]
 1f0:	str	x5, [x4, #64]
 1f4:	str	x10, [x2, #64]
 1f8:	ldr	x4, [x10, #56]
 1fc:	str	x2, [x10, #56]
 200:	str	x4, [x2, #64]
 204:	mov	x2, x10
 208:	str	x10, [x0]
 20c:	b	68 <splay_tree_prefix_splay_tree_insert+0x10>
 210:	cmp	w9, #0x0
 214:	b.le	68 <splay_tree_prefix_splay_tree_insert+0x10>
 218:	ldr	x7, [x5, #64]
 21c:	str	x4, [x5, #64]
 220:	str	x7, [x4, #56]
 224:	ldr	x7, [x5]
 228:	str	x5, [x2, #64]
 22c:	ldr	x4, [x5, #56]
 230:	str	x2, [x5, #56]
 234:	str	x4, [x2, #64]
 238:	mov	x2, x5
 23c:	str	x5, [x0]
 240:	b	68 <splay_tree_prefix_splay_tree_insert+0x10>
 244:	tbz	w9, #31, 68 <splay_tree_prefix_splay_tree_insert+0x10>
 248:	ldr	x5, [x10, #56]
 24c:	str	x4, [x10, #56]
 250:	ldr	x7, [x10]
 254:	str	x5, [x4, #64]
 258:	str	x10, [x2, #56]
 25c:	ldr	x4, [x10, #64]
 260:	str	x2, [x10, #64]
 264:	str	x4, [x2, #56]
 268:	mov	x2, x10
 26c:	str	x10, [x0]
 270:	b	68 <splay_tree_prefix_splay_tree_insert+0x10>
 274:	ldr	x5, [x2, #8]
 278:	b	84 <splay_tree_prefix_splay_tree_insert+0x2c>
 27c:	ldr	x5, [x4, #8]
 280:	b	dc <splay_tree_prefix_splay_tree_insert+0x84>
 284:	nop

0000000000000288 <splay_tree_prefix_splay_tree_remove>:
 288:	ldr	x2, [x0]
 28c:	cbz	x2, 2f0 <splay_tree_prefix_splay_tree_remove+0x68>
 290:	ldp	x3, x1, [x1]
 294:	ldr	x6, [x2]
 298:	cmp	x3, x1
 29c:	b.eq	34c <splay_tree_prefix_splay_tree_remove+0xc4>  // b.none
 2a0:	cmp	x1, x6
 2a4:	b.ls	360 <splay_tree_prefix_splay_tree_remove+0xd8>  // b.plast
 2a8:	ldr	x5, [x2, #8]
 2ac:	cmp	x3, x5
 2b0:	b.cs	2f4 <splay_tree_prefix_splay_tree_remove+0x6c>  // b.hs, b.nlast
 2b4:	cmp	x5, x6
 2b8:	b.eq	36c <splay_tree_prefix_splay_tree_remove+0xe4>  // b.none
 2bc:	cmp	x3, x5
 2c0:	b.cs	2f0 <splay_tree_prefix_splay_tree_remove+0x68>  // b.hs, b.nlast
 2c4:	cmp	x1, x6
 2c8:	b.ls	2f0 <splay_tree_prefix_splay_tree_remove+0x68>  // b.plast
 2cc:	ldp	x1, x2, [x2, #56]
 2d0:	cbz	x1, 420 <splay_tree_prefix_splay_tree_remove+0x198>
 2d4:	str	x1, [x0]
 2d8:	cbz	x2, 2f0 <splay_tree_prefix_splay_tree_remove+0x68>
 2dc:	nop
 2e0:	mov	x0, x1
 2e4:	ldr	x1, [x1, #64]
 2e8:	cbnz	x1, 2e0 <splay_tree_prefix_splay_tree_remove+0x58>
 2ec:	str	x2, [x0, #64]
 2f0:	ret
 2f4:	ldr	x4, [x2, #64]
 2f8:	mov	w8, #0x1                   	// #1
 2fc:	cbz	x4, 48c <splay_tree_prefix_splay_tree_remove+0x204>
 300:	cmp	x3, x1
 304:	ldr	x7, [x4]
 308:	b.eq	394 <splay_tree_prefix_splay_tree_remove+0x10c>  // b.none
 30c:	cmp	x1, x7
 310:	b.ls	3a8 <splay_tree_prefix_splay_tree_remove+0x120>  // b.plast
 314:	ldr	x5, [x4, #8]
 318:	cmp	x3, x5
 31c:	b.cs	3e4 <splay_tree_prefix_splay_tree_remove+0x15c>  // b.hs, b.nlast
 320:	cmn	w8, #0x1
 324:	b.eq	380 <splay_tree_prefix_splay_tree_remove+0xf8>  // b.none
 328:	ldr	x6, [x4, #56]
 32c:	str	x2, [x4, #56]
 330:	str	x6, [x2, #64]
 334:	str	x4, [x0]
 338:	mov	x6, x7
 33c:	mov	x2, x4
 340:	cmp	x5, x6
 344:	b.ne	2bc <splay_tree_prefix_splay_tree_remove+0x34>  // b.any
 348:	b	36c <splay_tree_prefix_splay_tree_remove+0xe4>
 34c:	ldr	x4, [x2, #8]
 350:	cmp	x4, x6
 354:	b.eq	2cc <splay_tree_prefix_splay_tree_remove+0x44>  // b.none
 358:	cmp	x1, x6
 35c:	b.hi	2a8 <splay_tree_prefix_splay_tree_remove+0x20>  // b.pmore
 360:	mov	w8, #0xffffffff            	// #-1
 364:	ldr	x4, [x2, #56]
 368:	b	2fc <splay_tree_prefix_splay_tree_remove+0x74>
 36c:	cmp	x3, x1
 370:	b.eq	2cc <splay_tree_prefix_splay_tree_remove+0x44>  // b.none
 374:	cmp	x3, x5
 378:	b.cc	2c4 <splay_tree_prefix_splay_tree_remove+0x3c>  // b.lo, b.ul, b.last
 37c:	b	2f0 <splay_tree_prefix_splay_tree_remove+0x68>
 380:	ldr	x6, [x4, #64]
 384:	str	x2, [x4, #64]
 388:	str	x6, [x2, #56]
 38c:	str	x4, [x0]
 390:	b	338 <splay_tree_prefix_splay_tree_remove+0xb0>
 394:	ldr	x5, [x4, #8]
 398:	cmp	x7, x5
 39c:	b.eq	320 <splay_tree_prefix_splay_tree_remove+0x98>  // b.none
 3a0:	cmp	x1, x7
 3a4:	b.hi	314 <splay_tree_prefix_splay_tree_remove+0x8c>  // b.pmore
 3a8:	ldr	x5, [x4, #56]
 3ac:	cbz	x5, 494 <splay_tree_prefix_splay_tree_remove+0x20c>
 3b0:	cmn	w8, #0x1
 3b4:	b.ne	428 <splay_tree_prefix_splay_tree_remove+0x1a0>  // b.any
 3b8:	ldr	x6, [x5, #64]
 3bc:	str	x4, [x5, #64]
 3c0:	str	x6, [x4, #56]
 3c4:	ldr	x6, [x5]
 3c8:	str	x5, [x2, #56]
 3cc:	ldr	x4, [x5, #64]
 3d0:	str	x2, [x5, #64]
 3d4:	str	x4, [x2, #56]
 3d8:	mov	x2, x5
 3dc:	str	x5, [x0]
 3e0:	b	298 <splay_tree_prefix_splay_tree_remove+0x10>
 3e4:	ldr	x9, [x4, #64]
 3e8:	cbz	x9, 320 <splay_tree_prefix_splay_tree_remove+0x98>
 3ec:	cmp	w8, #0x1
 3f0:	b.ne	45c <splay_tree_prefix_splay_tree_remove+0x1d4>  // b.any
 3f4:	ldr	x5, [x9, #56]
 3f8:	str	x4, [x9, #56]
 3fc:	ldr	x6, [x9]
 400:	str	x5, [x4, #64]
 404:	str	x9, [x2, #64]
 408:	ldr	x4, [x9, #56]
 40c:	str	x2, [x9, #56]
 410:	str	x4, [x2, #64]
 414:	mov	x2, x9
 418:	str	x9, [x0]
 41c:	b	298 <splay_tree_prefix_splay_tree_remove+0x10>
 420:	str	x2, [x0]
 424:	ret
 428:	cmp	w8, #0x0
 42c:	b.le	298 <splay_tree_prefix_splay_tree_remove+0x10>
 430:	ldr	x6, [x5, #64]
 434:	str	x4, [x5, #64]
 438:	str	x6, [x4, #56]
 43c:	ldr	x6, [x5]
 440:	str	x5, [x2, #64]
 444:	ldr	x4, [x5, #56]
 448:	str	x2, [x5, #56]
 44c:	str	x4, [x2, #64]
 450:	mov	x2, x5
 454:	str	x5, [x0]
 458:	b	298 <splay_tree_prefix_splay_tree_remove+0x10>
 45c:	tbz	w8, #31, 298 <splay_tree_prefix_splay_tree_remove+0x10>
 460:	ldr	x5, [x9, #56]
 464:	str	x4, [x9, #56]
 468:	ldr	x6, [x9]
 46c:	str	x5, [x4, #64]
 470:	str	x9, [x2, #56]
 474:	ldr	x4, [x9, #64]
 478:	str	x2, [x9, #64]
 47c:	str	x4, [x2, #56]
 480:	mov	x2, x9
 484:	str	x9, [x0]
 488:	b	298 <splay_tree_prefix_splay_tree_remove+0x10>
 48c:	ldr	x5, [x2, #8]
 490:	b	2b4 <splay_tree_prefix_splay_tree_remove+0x2c>
 494:	ldr	x5, [x4, #8]
 498:	b	320 <splay_tree_prefix_splay_tree_remove+0x98>
 49c:	nop

00000000000004a0 <splay_tree_prefix_splay_tree_lookup>:
 4a0:	ldr	x2, [x0]
 4a4:	cbz	x2, 4ec <splay_tree_prefix_splay_tree_lookup+0x4c>
 4a8:	ldp	x4, x3, [x1]
 4ac:	ldr	x6, [x2]
 4b0:	cmp	x4, x3
 4b4:	b.eq	560 <splay_tree_prefix_splay_tree_lookup+0xc0>  // b.none
 4b8:	cmp	x3, x6
 4bc:	b.ls	574 <splay_tree_prefix_splay_tree_lookup+0xd4>  // b.plast
 4c0:	ldr	x1, [x2, #8]
 4c4:	cmp	x4, x1
 4c8:	b.cs	4f4 <splay_tree_prefix_splay_tree_lookup+0x54>  // b.hs, b.nlast
 4cc:	cmp	x1, x6
 4d0:	b.eq	550 <splay_tree_prefix_splay_tree_lookup+0xb0>  // b.none
 4d4:	cmp	x4, x1
 4d8:	b.cs	4ec <splay_tree_prefix_splay_tree_lookup+0x4c>  // b.hs, b.nlast
 4dc:	cmp	x3, x6
 4e0:	b.ls	4ec <splay_tree_prefix_splay_tree_lookup+0x4c>  // b.plast
 4e4:	mov	x0, x2
 4e8:	ret
 4ec:	mov	x0, #0x0                   	// #0
 4f0:	ret
 4f4:	ldr	x5, [x2, #64]
 4f8:	mov	w9, #0x1                   	// #1
 4fc:	mov	w8, w9
 500:	mov	w10, #0x0                   	// #0
 504:	cbz	x5, 688 <splay_tree_prefix_splay_tree_lookup+0x1e8>
 508:	cmp	x4, x3
 50c:	ldr	x7, [x5]
 510:	b.eq	59c <splay_tree_prefix_splay_tree_lookup+0xfc>  // b.none
 514:	cmp	x3, x7
 518:	b.ls	5b0 <splay_tree_prefix_splay_tree_lookup+0x110>  // b.plast
 51c:	ldr	x1, [x5, #8]
 520:	cmp	x4, x1
 524:	b.cs	5ec <splay_tree_prefix_splay_tree_lookup+0x14c>  // b.hs, b.nlast
 528:	cmn	w8, #0x1
 52c:	b.eq	588 <splay_tree_prefix_splay_tree_lookup+0xe8>  // b.none
 530:	ldr	x6, [x5, #56]
 534:	str	x2, [x5, #56]
 538:	str	x6, [x2, #64]
 53c:	str	x5, [x0]
 540:	mov	x6, x7
 544:	mov	x2, x5
 548:	cmp	x1, x6
 54c:	b.ne	4d4 <splay_tree_prefix_splay_tree_lookup+0x34>  // b.any
 550:	cmp	x4, x3
 554:	b.ne	4d4 <splay_tree_prefix_splay_tree_lookup+0x34>  // b.any
 558:	mov	x0, x2
 55c:	b	4e8 <splay_tree_prefix_splay_tree_lookup+0x48>
 560:	ldr	x1, [x2, #8]
 564:	cmp	x1, x6
 568:	b.eq	4e4 <splay_tree_prefix_splay_tree_lookup+0x44>  // b.none
 56c:	cmp	x3, x6
 570:	b.hi	4c0 <splay_tree_prefix_splay_tree_lookup+0x20>  // b.pmore
 574:	mov	w10, #0x1                   	// #1
 578:	mov	w9, #0x0                   	// #0
 57c:	mov	w8, #0xffffffff            	// #-1
 580:	ldr	x5, [x2, #56]
 584:	b	504 <splay_tree_prefix_splay_tree_lookup+0x64>
 588:	ldr	x6, [x5, #64]
 58c:	str	x2, [x5, #64]
 590:	str	x6, [x2, #56]
 594:	str	x5, [x0]
 598:	b	540 <splay_tree_prefix_splay_tree_lookup+0xa0>
 59c:	ldr	x1, [x5, #8]
 5a0:	cmp	x7, x1
 5a4:	b.eq	528 <splay_tree_prefix_splay_tree_lookup+0x88>  // b.none
 5a8:	cmp	x3, x7
 5ac:	b.hi	51c <splay_tree_prefix_splay_tree_lookup+0x7c>  // b.pmore
 5b0:	ldr	x1, [x5, #56]
 5b4:	cbz	x1, 690 <splay_tree_prefix_splay_tree_lookup+0x1f0>
 5b8:	cmn	w8, #0x1
 5bc:	b.ne	628 <splay_tree_prefix_splay_tree_lookup+0x188>  // b.any
 5c0:	ldr	x6, [x1, #64]
 5c4:	str	x5, [x1, #64]
 5c8:	str	x6, [x5, #56]
 5cc:	ldr	x6, [x1]
 5d0:	str	x1, [x2, #56]
 5d4:	ldr	x5, [x1, #64]
 5d8:	str	x2, [x1, #64]
 5dc:	str	x5, [x2, #56]
 5e0:	mov	x2, x1
 5e4:	str	x1, [x0]
 5e8:	b	4b0 <splay_tree_prefix_splay_tree_lookup+0x10>
 5ec:	ldr	x9, [x5, #64]
 5f0:	cbz	x9, 528 <splay_tree_prefix_splay_tree_lookup+0x88>
 5f4:	cmp	w8, #0x1
 5f8:	b.ne	658 <splay_tree_prefix_splay_tree_lookup+0x1b8>  // b.any
 5fc:	ldr	x1, [x9, #56]
 600:	str	x5, [x9, #56]
 604:	ldr	x6, [x9]
 608:	str	x1, [x5, #64]
 60c:	str	x9, [x2, #64]
 610:	ldr	x1, [x9, #56]
 614:	str	x2, [x9, #56]
 618:	str	x1, [x2, #64]
 61c:	mov	x2, x9
 620:	str	x9, [x0]
 624:	b	4b0 <splay_tree_prefix_splay_tree_lookup+0x10>
 628:	cbz	w9, 4b0 <splay_tree_prefix_splay_tree_lookup+0x10>
 62c:	ldr	x6, [x1, #64]
 630:	str	x5, [x1, #64]
 634:	str	x6, [x5, #56]
 638:	ldr	x6, [x1]
 63c:	str	x1, [x2, #64]
 640:	ldr	x5, [x1, #56]
 644:	str	x2, [x1, #56]
 648:	str	x5, [x2, #64]
 64c:	mov	x2, x1
 650:	str	x1, [x0]
 654:	b	4b0 <splay_tree_prefix_splay_tree_lookup+0x10>
 658:	cbz	w10, 4b0 <splay_tree_prefix_splay_tree_lookup+0x10>
 65c:	ldr	x1, [x9, #56]
 660:	str	x5, [x9, #56]
 664:	ldr	x6, [x9]
 668:	str	x1, [x5, #64]
 66c:	str	x9, [x2, #56]
 670:	ldr	x1, [x9, #64]
 674:	str	x2, [x9, #64]
 678:	str	x1, [x2, #56]
 67c:	mov	x2, x9
 680:	str	x9, [x0]
 684:	b	4b0 <splay_tree_prefix_splay_tree_lookup+0x10>
 688:	ldr	x1, [x2, #8]
 68c:	b	4cc <splay_tree_prefix_splay_tree_lookup+0x2c>
 690:	ldr	x1, [x5, #8]
 694:	b	528 <splay_tree_prefix_splay_tree_lookup+0x88>

0000000000000698 <splay_tree_prefix_splay_tree_foreach>:
 698:	stp	x29, x30, [sp, #-48]!
 69c:	mov	x29, sp
 6a0:	stp	x19, x20, [sp, #16]
 6a4:	ldr	x19, [x0]
 6a8:	cbz	x19, 6e0 <splay_tree_prefix_splay_tree_foreach+0x48>
 6ac:	mov	x20, x2
 6b0:	str	x21, [sp, #32]
 6b4:	mov	x21, x1
 6b8:	mov	x0, x19
 6bc:	mov	x1, x20
 6c0:	blr	x21
 6c4:	ldr	x0, [x19, #56]
 6c8:	mov	x2, x20
 6cc:	mov	x1, x21
 6d0:	bl	0 <splay_tree_foreach_internal>
 6d4:	ldr	x19, [x19, #64]
 6d8:	cbnz	x19, 6b8 <splay_tree_prefix_splay_tree_foreach+0x20>
 6dc:	ldr	x21, [sp, #32]
 6e0:	ldp	x19, x20, [sp, #16]
 6e4:	ldp	x29, x30, [sp], #48
 6e8:	ret

libgomp-plugin.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_PLUGIN_malloc>:
   0:	b	0 <gomp_malloc>
   4:	nop

0000000000000008 <GOMP_PLUGIN_malloc_cleared>:
   8:	b	0 <gomp_malloc_cleared>
   c:	nop

0000000000000010 <GOMP_PLUGIN_realloc>:
  10:	b	0 <gomp_realloc>
  14:	nop

0000000000000018 <GOMP_PLUGIN_debug>:
  18:	stp	x29, x30, [sp, #-256]!
  1c:	adrp	x8, 0 <gomp_debug_var>
  20:	mov	w10, #0xffffffd0            	// #-48
  24:	mov	x29, sp
  28:	ldr	w8, [x8]
  2c:	add	x11, sp, #0xd0
  30:	mov	w9, #0xffffff80            	// #-128
  34:	str	x11, [sp, #64]
  38:	stp	w10, w9, [sp, #72]
  3c:	str	q0, [sp, #80]
  40:	str	q1, [sp, #96]
  44:	str	q2, [sp, #112]
  48:	str	q3, [sp, #128]
  4c:	str	q4, [sp, #144]
  50:	str	q5, [sp, #160]
  54:	str	q6, [sp, #176]
  58:	str	q7, [sp, #192]
  5c:	stp	x2, x3, [sp, #208]
  60:	add	x2, sp, #0x100
  64:	stp	x2, x2, [sp, #48]
  68:	stp	x4, x5, [sp, #224]
  6c:	stp	x6, x7, [sp, #240]
  70:	cbnz	w8, 7c <GOMP_PLUGIN_debug+0x64>
  74:	ldp	x29, x30, [sp], #256
  78:	ret
  7c:	ldp	x6, x7, [sp, #48]
  80:	add	x2, sp, #0x10
  84:	ldp	x4, x5, [sp, #64]
  88:	stp	x6, x7, [sp, #16]
  8c:	stp	x4, x5, [sp, #32]
  90:	bl	0 <gomp_vdebug>
  94:	ldp	x29, x30, [sp], #256
  98:	ret
  9c:	nop

00000000000000a0 <GOMP_PLUGIN_error>:
  a0:	stp	x29, x30, [sp, #-272]!
  a4:	mov	w9, #0xffffffc8            	// #-56
  a8:	mov	w8, #0xffffff80            	// #-128
  ac:	mov	x29, sp
  b0:	add	x10, sp, #0xd0
  b4:	add	x11, sp, #0x110
  b8:	stp	x11, x11, [sp, #48]
  bc:	str	x10, [sp, #64]
  c0:	stp	w9, w8, [sp, #72]
  c4:	ldp	x10, x11, [sp, #48]
  c8:	stp	x10, x11, [sp, #16]
  cc:	ldp	x8, x9, [sp, #64]
  d0:	stp	x8, x9, [sp, #32]
  d4:	str	q0, [sp, #80]
  d8:	str	q1, [sp, #96]
  dc:	str	q2, [sp, #112]
  e0:	str	q3, [sp, #128]
  e4:	str	q4, [sp, #144]
  e8:	str	q5, [sp, #160]
  ec:	str	q6, [sp, #176]
  f0:	str	q7, [sp, #192]
  f4:	stp	x1, x2, [sp, #216]
  f8:	add	x1, sp, #0x10
  fc:	stp	x3, x4, [sp, #232]
 100:	stp	x5, x6, [sp, #248]
 104:	str	x7, [sp, #264]
 108:	bl	0 <gomp_verror>
 10c:	ldp	x29, x30, [sp], #272
 110:	ret
 114:	nop

0000000000000118 <GOMP_PLUGIN_fatal>:
 118:	stp	x29, x30, [sp, #-272]!
 11c:	mov	w9, #0xffffffc8            	// #-56
 120:	mov	w8, #0xffffff80            	// #-128
 124:	mov	x29, sp
 128:	add	x10, sp, #0xd0
 12c:	add	x11, sp, #0x110
 130:	stp	x11, x11, [sp, #48]
 134:	str	x10, [sp, #64]
 138:	stp	w9, w8, [sp, #72]
 13c:	ldp	x10, x11, [sp, #48]
 140:	stp	x10, x11, [sp, #16]
 144:	ldp	x8, x9, [sp, #64]
 148:	stp	x8, x9, [sp, #32]
 14c:	str	q0, [sp, #80]
 150:	str	q1, [sp, #96]
 154:	str	q2, [sp, #112]
 158:	str	q3, [sp, #128]
 15c:	str	q4, [sp, #144]
 160:	str	q5, [sp, #160]
 164:	str	q6, [sp, #176]
 168:	str	q7, [sp, #192]
 16c:	stp	x1, x2, [sp, #216]
 170:	add	x1, sp, #0x10
 174:	stp	x3, x4, [sp, #232]
 178:	stp	x5, x6, [sp, #248]
 17c:	str	x7, [sp, #264]
 180:	bl	0 <gomp_vfatal>

oacc-parallel.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOACC_enter_exit_data.constprop.0>:
       0:	stp	x29, x30, [sp, #-64]!
       4:	mov	x29, sp
       8:	stp	x19, x20, [sp, #16]
       c:	mov	x20, x2
      10:	mov	x19, x3
      14:	stp	x21, x22, [sp, #32]
      18:	mov	w21, w0
      1c:	mov	x22, x4
      20:	str	x23, [sp, #48]
      24:	bl	0 <goacc_lazy_initialize>
      28:	adrp	x0, 0 <goacc_tls_data>
      2c:	ldr	x0, [x0]
      30:	mrs	x1, tpidr_el0
      34:	ldr	x0, [x1, x0]
      38:	ldr	x23, [x0, #8]
      3c:	ldr	w0, [x23, #8]
      40:	orn	w21, w0, w21
      44:	tbnz	w21, #0, b4 <GOACC_enter_exit_data.constprop.0+0xb4>
      48:	ldr	x1, [x23, #248]
      4c:	mov	w0, #0xfffffffe            	// #-2
      50:	ldrh	w21, [x22]
      54:	blr	x1
      58:	ldrb	w1, [x22]
      5c:	sub	w0, w1, #0x4
      60:	and	w0, w0, #0xff
      64:	cmp	w0, #0x1
      68:	b.ls	74 <GOACC_enter_exit_data.constprop.0+0x74>  // b.plast
      6c:	cmp	w1, #0x6
      70:	b.ne	80 <GOACC_enter_exit_data.constprop.0+0x80>  // b.any
      74:	adrp	x0, 0 <GOACC_enter_exit_data.constprop.0>
      78:	add	x0, x0, #0x0
      7c:	bl	0 <gomp_fatal>
      80:	tst	w1, #0x7e
      84:	b.ne	e0 <GOACC_enter_exit_data.constprop.0+0xe0>  // b.any
      88:	cmp	w1, #0x80
      8c:	b.eq	9c <GOACC_enter_exit_data.constprop.0+0x9c>  // b.none
      90:	cmp	w1, #0x81
      94:	b.eq	d0 <GOACC_enter_exit_data.constprop.0+0xd0>  // b.none
      98:	cbnz	w1, c8 <GOACC_enter_exit_data.constprop.0+0xc8>
      9c:	ldr	x1, [x19]
      a0:	ldr	x0, [x20]
      a4:	bl	0 <acc_create>
      a8:	ldr	x1, [x23, #248]
      ac:	mov	w0, #0xfffffffe            	// #-2
      b0:	blr	x1
      b4:	ldp	x19, x20, [sp, #16]
      b8:	ldp	x21, x22, [sp, #32]
      bc:	ldr	x23, [sp, #48]
      c0:	ldp	x29, x30, [sp], #64
      c4:	ret
      c8:	cmp	w1, #0x1
      cc:	b.ne	74 <GOACC_enter_exit_data.constprop.0+0x74>  // b.any
      d0:	ldr	x1, [x19]
      d4:	ldr	x0, [x20]
      d8:	bl	0 <acc_copyin>
      dc:	b	a8 <GOACC_enter_exit_data.constprop.0+0xa8>
      e0:	and	w0, w1, #0xffffffef
      e4:	cmp	w0, #0x7
      e8:	b.ne	16c <GOACC_enter_exit_data.constprop.0+0x16c>  // b.any
      ec:	and	w0, w21, #0xff
      f0:	cmp	w0, #0x7
      f4:	cset	w21, eq  // eq = none
      f8:	cmp	w0, #0x82
      fc:	csinc	w21, w21, wzr, ne  // ne = any
     100:	cmp	w1, #0x17
     104:	b.eq	11c <GOACC_enter_exit_data.constprop.0+0x11c>  // b.none
     108:	b.hi	140 <GOACC_enter_exit_data.constprop.0+0x140>  // b.pmore
     10c:	cmp	w1, #0x2
     110:	b.eq	148 <GOACC_enter_exit_data.constprop.0+0x148>  // b.none
     114:	cmp	w1, #0x7
     118:	b.ne	74 <GOACC_enter_exit_data.constprop.0+0x74>  // b.any
     11c:	ldr	x1, [x19]
     120:	ldr	x0, [x20]
     124:	bl	0 <acc_is_present>
     128:	cbz	w0, a8 <GOACC_enter_exit_data.constprop.0+0xa8>
     12c:	ldr	x1, [x19]
     130:	ldr	x0, [x20]
     134:	cbz	w21, 164 <GOACC_enter_exit_data.constprop.0+0x164>
     138:	bl	0 <acc_delete_finalize>
     13c:	b	a8 <GOACC_enter_exit_data.constprop.0+0xa8>
     140:	cmp	w1, #0x82
     144:	b.ne	74 <GOACC_enter_exit_data.constprop.0+0x74>  // b.any
     148:	ldr	x1, [x19]
     14c:	ldr	x0, [x20]
     150:	cbz	w21, 15c <GOACC_enter_exit_data.constprop.0+0x15c>
     154:	bl	0 <acc_copyout_finalize>
     158:	b	a8 <GOACC_enter_exit_data.constprop.0+0xa8>
     15c:	bl	0 <acc_copyout>
     160:	b	a8 <GOACC_enter_exit_data.constprop.0+0xa8>
     164:	bl	0 <acc_delete>
     168:	b	a8 <GOACC_enter_exit_data.constprop.0+0xa8>
     16c:	and	w0, w1, #0x7f
     170:	cmp	w0, #0x2
     174:	b.eq	ec <GOACC_enter_exit_data.constprop.0+0xec>  // b.none
     178:	b	74 <GOACC_enter_exit_data.constprop.0+0x74>
     17c:	nop

0000000000000180 <GOACC_parallel_keyed>:
     180:	stp	x29, x30, [sp, #-224]!
     184:	adrp	x8, 0 <gomp_debug_var>
     188:	mov	x29, sp
     18c:	stp	x19, x20, [sp, #16]
     190:	mvn	w19, w0
     194:	stp	x6, x7, [x29, #208]
     198:	ldr	w6, [x8]
     19c:	stp	x21, x22, [sp, #32]
     1a0:	mov	x21, x2
     1a4:	mov	x22, x5
     1a8:	stp	x23, x24, [sp, #48]
     1ac:	mov	x24, x3
     1b0:	mov	x23, x4
     1b4:	stp	x25, x26, [sp, #64]
     1b8:	stp	x27, x28, [sp, #80]
     1bc:	mov	x27, x1
     1c0:	cbnz	w6, 7f8 <GOACC_parallel_keyed+0x678>
     1c4:	bl	0 <goacc_lazy_initialize>
     1c8:	adrp	x0, 0 <goacc_tls_data>
     1cc:	ldr	x0, [x0]
     1d0:	mrs	x1, tpidr_el0
     1d4:	ldr	x0, [x1, x0]
     1d8:	ldr	x26, [x0, #8]
     1dc:	cbz	x21, 2cc <GOACC_parallel_keyed+0x14c>
     1e0:	sub	w4, w21, #0x1
     1e4:	cmp	w4, #0x0
     1e8:	b.le	6bc <GOACC_parallel_keyed+0x53c>
     1ec:	cmp	w4, w21
     1f0:	mov	x0, #0x1                   	// #1
     1f4:	csel	w4, w4, w21, lt  // lt = tstop
     1f8:	mov	x1, #0x0                   	// #0
     1fc:	mov	x6, #0x8                   	// #8
     200:	b	218 <GOACC_parallel_keyed+0x98>
     204:	add	x1, x1, #0x1
     208:	sxtw	x2, w0
     20c:	cmp	w4, w1
     210:	add	x0, x0, #0x1
     214:	b.le	278 <GOACC_parallel_keyed+0xf8>
     218:	ldrh	w2, [x22, x1, lsl #1]
     21c:	and	w3, w2, #0xff
     220:	cmp	w3, #0x8
     224:	b.ne	204 <GOACC_parallel_keyed+0x84>  // b.any
     228:	ldr	x5, [x23, x1, lsl #3]
     22c:	ldrh	w3, [x22, x0, lsl #1]
     230:	cmp	x5, #0x8
     234:	and	w3, w3, #0xff
     238:	b.eq	204 <GOACC_parallel_keyed+0x84>  // b.none
     23c:	cmp	w3, #0x4
     240:	b.ne	260 <GOACC_parallel_keyed+0xe0>  // b.any
     244:	ldr	x3, [x23, x0, lsl #3]
     248:	cbnz	x3, 260 <GOACC_parallel_keyed+0xe0>
     24c:	ldr	x3, [x24, x0, lsl #3]
     250:	ldr	x5, [x24, x1, lsl #3]
     254:	ldr	x3, [x3]
     258:	cmp	x5, x3
     25c:	b.eq	7a8 <GOACC_parallel_keyed+0x628>  // b.none
     260:	str	xzr, [x24, x1, lsl #3]
     264:	add	x1, x1, #0x1
     268:	sxtw	x2, w0
     26c:	cmp	w4, w1
     270:	add	x0, x0, #0x1
     274:	b.gt	218 <GOACC_parallel_keyed+0x98>
     278:	cmp	x21, x1
     27c:	b.ls	2cc <GOACC_parallel_keyed+0x14c>  // b.plast
     280:	add	x2, x2, #0x1
     284:	b	29c <GOACC_parallel_keyed+0x11c>
     288:	cmp	x21, x2
     28c:	add	x0, x2, #0x1
     290:	mov	x1, x2
     294:	b.ls	2cc <GOACC_parallel_keyed+0x14c>  // b.plast
     298:	mov	x2, x0
     29c:	ldrh	w0, [x22, x1, lsl #1]
     2a0:	and	w0, w0, #0xff
     2a4:	cmp	w0, #0x8
     2a8:	b.ne	288 <GOACC_parallel_keyed+0x108>  // b.any
     2ac:	ldr	x0, [x23, x1, lsl #3]
     2b0:	cmp	x0, #0x8
     2b4:	b.eq	288 <GOACC_parallel_keyed+0x108>  // b.none
     2b8:	str	xzr, [x24, x1, lsl #3]
     2bc:	cmp	x21, x2
     2c0:	add	x0, x2, #0x1
     2c4:	mov	x1, x2
     2c8:	b.hi	298 <GOACC_parallel_keyed+0x118>  // b.pmore
     2cc:	tbnz	w19, #0, 774 <GOACC_parallel_keyed+0x5f4>
     2d0:	ldr	w0, [x26, #16]
     2d4:	cmp	w0, #0x2
     2d8:	b.eq	7b8 <GOACC_parallel_keyed+0x638>  // b.none
     2dc:	mov	w2, #0xfffffff0            	// #-16
     2e0:	mov	w1, w2
     2e4:	add	x3, x29, #0xd0
     2e8:	add	x0, x29, #0xe0
     2ec:	mov	w20, #0xfffffffe            	// #-2
     2f0:	mov	w25, #0xffff                	// #65535
     2f4:	str	xzr, [x29, #104]
     2f8:	str	wzr, [x29, #112]
     2fc:	stp	x0, x0, [x29, #120]
     300:	str	x3, [x29, #136]
     304:	stp	w2, wzr, [x29, #144]
     308:	tbnz	w1, #31, 3e8 <GOACC_parallel_keyed+0x268>
     30c:	ldr	w19, [x0]
     310:	add	x1, x0, #0xb
     314:	and	x1, x1, #0xfffffffffffffff8
     318:	str	x1, [x29, #120]
     31c:	cbz	w19, 408 <GOACC_parallel_keyed+0x288>
     320:	ubfx	x1, x19, #16, #12
     324:	cbnz	w1, 830 <GOACC_parallel_keyed+0x6b0>
     328:	lsr	w1, w19, #28
     32c:	cmp	w1, #0x2
     330:	b.eq	58c <GOACC_parallel_keyed+0x40c>  // b.none
     334:	cmp	w1, #0x3
     338:	b.ne	56c <GOACC_parallel_keyed+0x3ec>  // b.any
     33c:	ldr	w1, [x29, #144]
     340:	ands	w19, w19, #0xffff
     344:	ldr	x0, [x29, #120]
     348:	b.eq	308 <GOACC_parallel_keyed+0x188>  // b.none
     34c:	tbnz	w1, #31, 3a4 <GOACC_parallel_keyed+0x224>
     350:	add	x1, x0, #0xb
     354:	ldr	w28, [x0]
     358:	and	x1, x1, #0xfffffffffffffff8
     35c:	str	x1, [x29, #120]
     360:	cmn	w28, #0x1
     364:	b.eq	3c8 <GOACC_parallel_keyed+0x248>  // b.none
     368:	mov	w0, w28
     36c:	bl	0 <acc_async_test>
     370:	cbnz	w0, 390 <GOACC_parallel_keyed+0x210>
     374:	cmn	w20, #0x2
     378:	b.eq	580 <GOACC_parallel_keyed+0x400>  // b.none
     37c:	cmp	w20, w28
     380:	b.eq	390 <GOACC_parallel_keyed+0x210>  // b.none
     384:	mov	w0, w28
     388:	mov	w1, w20
     38c:	bl	0 <acc_wait_async>
     390:	ldr	w1, [x29, #144]
     394:	subs	w19, w19, #0x1
     398:	ldr	x0, [x29, #120]
     39c:	b.eq	308 <GOACC_parallel_keyed+0x188>  // b.none
     3a0:	tbz	w1, #31, 350 <GOACC_parallel_keyed+0x1d0>
     3a4:	add	w2, w1, #0x8
     3a8:	str	w2, [x29, #144]
     3ac:	cmp	w2, #0x0
     3b0:	b.gt	350 <GOACC_parallel_keyed+0x1d0>
     3b4:	ldr	x0, [x29, #128]
     3b8:	add	x0, x0, w1, sxtw
     3bc:	ldr	w28, [x0]
     3c0:	cmn	w28, #0x1
     3c4:	b.ne	368 <GOACC_parallel_keyed+0x1e8>  // b.any
     3c8:	cmn	w20, #0x2
     3cc:	b.eq	6ac <GOACC_parallel_keyed+0x52c>  // b.none
     3d0:	mov	w0, w20
     3d4:	bl	0 <acc_wait_all_async>
     3d8:	ldr	w1, [x29, #144]
     3dc:	ldr	x0, [x29, #120]
     3e0:	tbz	w1, #31, 30c <GOACC_parallel_keyed+0x18c>
     3e4:	nop
     3e8:	add	w2, w1, #0x8
     3ec:	str	w2, [x29, #144]
     3f0:	cmp	w2, #0x0
     3f4:	b.gt	30c <GOACC_parallel_keyed+0x18c>
     3f8:	ldr	x0, [x29, #128]
     3fc:	add	x0, x0, w1, sxtw
     400:	ldr	w19, [x0]
     404:	cbnz	w19, 320 <GOACC_parallel_keyed+0x1a0>
     408:	ldr	x1, [x26, #248]
     40c:	mov	w0, w20
     410:	blr	x1
     414:	ldr	w0, [x26, #8]
     418:	tbnz	w0, #1, 46c <GOACC_parallel_keyed+0x2ec>
     41c:	add	x0, x27, #0x1
     420:	add	x25, x26, #0xa8
     424:	stp	x27, x0, [x29, #152]
     428:	mov	w0, #0x1                   	// #1
     42c:	ldaxr	w1, [x25]
     430:	cbnz	w1, 43c <GOACC_parallel_keyed+0x2bc>
     434:	stxr	w2, w0, [x25]
     438:	cbnz	w2, 42c <GOACC_parallel_keyed+0x2ac>
     43c:	cmp	w1, #0x0
     440:	b.ne	848 <GOACC_parallel_keyed+0x6c8>  // b.any
     444:	add	x1, x29, #0x98
     448:	add	x0, x26, #0xa0
     44c:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     450:	mov	x27, x0
     454:	ldxr	w0, [x25]
     458:	stlxr	w1, wzr, [x25]
     45c:	cbnz	w1, 454 <GOACC_parallel_keyed+0x2d4>
     460:	tbnz	w0, #31, 824 <GOACC_parallel_keyed+0x6a4>
     464:	cbz	x27, 83c <GOACC_parallel_keyed+0x6bc>
     468:	ldr	x27, [x27, #24]
     46c:	mov	x5, x22
     470:	mov	x2, x24
     474:	mov	x1, x21
     478:	mov	x3, #0x0                   	// #0
     47c:	mov	x4, x23
     480:	mov	x0, x26
     484:	mov	w7, #0x0                   	// #0
     488:	mov	w6, #0x1                   	// #1
     48c:	bl	0 <gomp_map_vars>
     490:	lsl	x1, x21, #3
     494:	mov	x22, x0
     498:	add	x1, x1, #0xf
     49c:	mov	x0, #0x0                   	// #0
     4a0:	and	x1, x1, #0xfffffffffffffff0
     4a4:	mov	x2, #0x0                   	// #0
     4a8:	sub	sp, sp, x1
     4ac:	mov	x3, sp
     4b0:	cbz	x21, 4ec <GOACC_parallel_keyed+0x36c>
     4b4:	nop
     4b8:	add	x4, x22, x2, lsl #5
     4bc:	add	w2, w19, #0x1
     4c0:	mov	x19, x2
     4c4:	cmp	x2, x21
     4c8:	ldr	x5, [x4, #80]
     4cc:	ldr	x4, [x4, #64]
     4d0:	ldp	x6, x1, [x4, #16]
     4d4:	ldr	x4, [x6, #16]
     4d8:	add	x1, x1, x5
     4dc:	add	x1, x1, x4
     4e0:	str	x1, [x3, x0, lsl #3]
     4e4:	mov	x0, x2
     4e8:	b.cc	4b8 <GOACC_parallel_keyed+0x338>  // b.lo, b.ul, b.last
     4ec:	ldr	x7, [x26, #184]
     4f0:	mov	x0, x27
     4f4:	mov	x2, x24
     4f8:	mov	x1, x21
     4fc:	mov	x6, x22
     500:	add	x5, x29, #0x68
     504:	mov	w4, w20
     508:	blr	x7
     50c:	add	w0, w20, #0x2
     510:	cmp	w20, #0x0
     514:	ccmp	w0, #0x1, #0x0, lt  // lt = tstop
     518:	b.hi	70c <GOACC_parallel_keyed+0x58c>  // b.pmore
     51c:	cmn	w20, #0x2
     520:	b.eq	70c <GOACC_parallel_keyed+0x58c>  // b.none
     524:	ldr	x2, [x22, #48]
     528:	add	x3, x22, #0x40
     52c:	mov	x0, #0x0                   	// #0
     530:	cbz	x2, 55c <GOACC_parallel_keyed+0x3dc>
     534:	nop
     538:	lsl	x1, x0, #5
     53c:	ldr	x1, [x3, x1]
     540:	cbz	x1, 550 <GOACC_parallel_keyed+0x3d0>
     544:	ldr	x1, [x1, #32]
     548:	cmp	x1, #0x1
     54c:	b.eq	7e0 <GOACC_parallel_keyed+0x660>  // b.none
     550:	add	x0, x0, #0x1
     554:	cmp	x0, x2
     558:	b.ne	538 <GOACC_parallel_keyed+0x3b8>  // b.any
     55c:	mov	x0, x22
     560:	mov	w1, #0x0                   	// #0
     564:	bl	0 <gomp_unmap_vars>
     568:	b	718 <GOACC_parallel_keyed+0x598>
     56c:	cmp	w1, #0x1
     570:	b.eq	5bc <GOACC_parallel_keyed+0x43c>  // b.none
     574:	adrp	x0, 0 <GOACC_enter_exit_data.constprop.0>
     578:	add	x0, x0, #0x0
     57c:	bl	0 <gomp_fatal>
     580:	mov	w0, w28
     584:	bl	0 <acc_wait>
     588:	b	390 <GOACC_parallel_keyed+0x210>
     58c:	ldr	w1, [x29, #144]
     590:	cmp	w25, w19, uxth
     594:	and	w20, w19, #0xffff
     598:	ldr	x0, [x29, #120]
     59c:	b.ne	308 <GOACC_parallel_keyed+0x188>  // b.any
     5a0:	tbnz	w1, #31, 6c8 <GOACC_parallel_keyed+0x548>
     5a4:	mov	x3, x0
     5a8:	add	x2, x0, #0xb
     5ac:	and	x0, x2, #0xfffffffffffffff8
     5b0:	str	x0, [x29, #120]
     5b4:	ldr	w20, [x3]
     5b8:	b	308 <GOACC_parallel_keyed+0x188>
     5bc:	ldr	w1, [x29, #144]
     5c0:	ldr	x0, [x29, #120]
     5c4:	tbz	w19, #0, 5e4 <GOACC_parallel_keyed+0x464>
     5c8:	tbnz	w1, #31, 654 <GOACC_parallel_keyed+0x4d4>
     5cc:	add	x2, x0, #0xb
     5d0:	mov	x3, x0
     5d4:	and	x0, x2, #0xfffffffffffffff8
     5d8:	str	x0, [x29, #120]
     5dc:	ldr	w2, [x3]
     5e0:	str	w2, [x29, #104]
     5e4:	tbz	w19, #1, 604 <GOACC_parallel_keyed+0x484>
     5e8:	tbnz	w1, #31, 628 <GOACC_parallel_keyed+0x4a8>
     5ec:	add	x2, x0, #0xb
     5f0:	mov	x3, x0
     5f4:	and	x0, x2, #0xfffffffffffffff8
     5f8:	str	x0, [x29, #120]
     5fc:	ldr	w2, [x3]
     600:	str	w2, [x29, #108]
     604:	tbz	w19, #2, 308 <GOACC_parallel_keyed+0x188>
     608:	tbnz	w1, #31, 680 <GOACC_parallel_keyed+0x500>
     60c:	add	x2, x0, #0xb
     610:	mov	x3, x0
     614:	and	x0, x2, #0xfffffffffffffff8
     618:	str	x0, [x29, #120]
     61c:	ldr	w2, [x3]
     620:	str	w2, [x29, #112]
     624:	b	308 <GOACC_parallel_keyed+0x188>
     628:	add	w2, w1, #0x8
     62c:	str	w2, [x29, #144]
     630:	cmp	w2, #0x0
     634:	b.le	764 <GOACC_parallel_keyed+0x5e4>
     638:	add	x3, x0, #0xb
     63c:	mov	w1, w2
     640:	and	x2, x3, #0xfffffffffffffff8
     644:	mov	x3, x0
     648:	mov	x0, x2
     64c:	str	x2, [x29, #120]
     650:	b	5fc <GOACC_parallel_keyed+0x47c>
     654:	add	w2, w1, #0x8
     658:	str	w2, [x29, #144]
     65c:	cmp	w2, #0x0
     660:	b.le	754 <GOACC_parallel_keyed+0x5d4>
     664:	add	x3, x0, #0xb
     668:	mov	w1, w2
     66c:	and	x2, x3, #0xfffffffffffffff8
     670:	mov	x3, x0
     674:	mov	x0, x2
     678:	str	x2, [x29, #120]
     67c:	b	5dc <GOACC_parallel_keyed+0x45c>
     680:	add	w2, w1, #0x8
     684:	str	w2, [x29, #144]
     688:	cmp	w2, #0x0
     68c:	b.le	744 <GOACC_parallel_keyed+0x5c4>
     690:	add	x3, x0, #0xb
     694:	mov	w1, w2
     698:	and	x2, x3, #0xfffffffffffffff8
     69c:	mov	x3, x0
     6a0:	mov	x0, x2
     6a4:	str	x2, [x29, #120]
     6a8:	b	61c <GOACC_parallel_keyed+0x49c>
     6ac:	bl	0 <acc_wait_all>
     6b0:	ldr	w1, [x29, #144]
     6b4:	ldr	x0, [x29, #120]
     6b8:	b	308 <GOACC_parallel_keyed+0x188>
     6bc:	mov	x2, #0x0                   	// #0
     6c0:	mov	x1, #0x0                   	// #0
     6c4:	b	280 <GOACC_parallel_keyed+0x100>
     6c8:	add	w2, w1, #0x8
     6cc:	str	w2, [x29, #144]
     6d0:	cmp	w2, #0x0
     6d4:	b.le	6f8 <GOACC_parallel_keyed+0x578>
     6d8:	add	x3, x0, #0xb
     6dc:	mov	w1, w2
     6e0:	and	x2, x3, #0xfffffffffffffff8
     6e4:	mov	x3, x0
     6e8:	mov	x0, x2
     6ec:	str	x2, [x29, #120]
     6f0:	ldr	w20, [x3]
     6f4:	b	308 <GOACC_parallel_keyed+0x188>
     6f8:	ldr	x3, [x29, #128]
     6fc:	add	x3, x3, w1, sxtw
     700:	mov	w1, w2
     704:	ldr	w20, [x3]
     708:	b	308 <GOACC_parallel_keyed+0x188>
     70c:	mov	x0, x22
     710:	mov	w1, #0x1                   	// #1
     714:	bl	0 <gomp_unmap_vars>
     718:	ldr	x1, [x26, #248]
     71c:	mov	w0, #0xfffffffe            	// #-2
     720:	blr	x1
     724:	mov	sp, x29
     728:	ldp	x19, x20, [sp, #16]
     72c:	ldp	x21, x22, [sp, #32]
     730:	ldp	x23, x24, [sp, #48]
     734:	ldp	x25, x26, [sp, #64]
     738:	ldp	x27, x28, [sp, #80]
     73c:	ldp	x29, x30, [sp], #224
     740:	ret
     744:	ldr	x3, [x29, #128]
     748:	add	x3, x3, w1, sxtw
     74c:	mov	w1, w2
     750:	b	61c <GOACC_parallel_keyed+0x49c>
     754:	ldr	x3, [x29, #128]
     758:	add	x3, x3, w1, sxtw
     75c:	mov	w1, w2
     760:	b	5dc <GOACC_parallel_keyed+0x45c>
     764:	ldr	x3, [x29, #128]
     768:	add	x3, x3, w1, sxtw
     76c:	mov	w1, w2
     770:	b	5fc <GOACC_parallel_keyed+0x47c>
     774:	mov	w0, #0x2                   	// #2
     778:	bl	0 <goacc_save_and_set_bind>
     77c:	mov	x0, x24
     780:	blr	x27
     784:	bl	0 <goacc_restore_bind>
     788:	mov	sp, x29
     78c:	ldp	x19, x20, [sp, #16]
     790:	ldp	x21, x22, [sp, #32]
     794:	ldp	x23, x24, [sp, #48]
     798:	ldp	x25, x26, [sp, #64]
     79c:	ldp	x27, x28, [sp, #80]
     7a0:	ldp	x29, x30, [sp], #224
     7a4:	ret
     7a8:	strh	w2, [x22, x0, lsl #1]
     7ac:	str	x6, [x23, x0, lsl #3]
     7b0:	str	xzr, [x24, x1, lsl #3]
     7b4:	b	264 <GOACC_parallel_keyed+0xe4>
     7b8:	mov	x0, x24
     7bc:	blr	x27
     7c0:	mov	sp, x29
     7c4:	ldp	x19, x20, [sp, #16]
     7c8:	ldp	x21, x22, [sp, #32]
     7cc:	ldp	x23, x24, [sp, #48]
     7d0:	ldp	x25, x26, [sp, #64]
     7d4:	ldp	x27, x28, [sp, #80]
     7d8:	ldp	x29, x30, [sp], #224
     7dc:	ret
     7e0:	ldr	x2, [x22, #56]
     7e4:	mov	w1, w20
     7e8:	mov	x0, x22
     7ec:	ldr	x2, [x2, #192]
     7f0:	blr	x2
     7f4:	b	718 <GOACC_parallel_keyed+0x598>
     7f8:	mov	x6, x5
     7fc:	adrp	x2, 0 <GOACC_enter_exit_data.constprop.0>
     800:	mov	x5, x4
     804:	add	x2, x2, #0x0
     808:	mov	x4, x3
     80c:	adrp	x1, 0 <GOACC_enter_exit_data.constprop.0>
     810:	mov	x3, x21
     814:	add	x1, x1, #0x0
     818:	mov	w0, #0x0                   	// #0
     81c:	bl	0 <gomp_debug>
     820:	b	1c4 <GOACC_parallel_keyed+0x44>
     824:	mov	x0, x25
     828:	bl	0 <gomp_mutex_unlock_slow>
     82c:	b	464 <GOACC_parallel_keyed+0x2e4>
     830:	adrp	x0, 0 <GOACC_enter_exit_data.constprop.0>
     834:	add	x0, x0, #0x0
     838:	bl	0 <gomp_fatal>
     83c:	adrp	x0, 0 <GOACC_enter_exit_data.constprop.0>
     840:	add	x0, x0, #0x0
     844:	bl	0 <gomp_fatal>
     848:	mov	x0, x25
     84c:	bl	0 <gomp_mutex_lock_slow>
     850:	b	444 <GOACC_parallel_keyed+0x2c4>
     854:	nop

0000000000000858 <GOACC_parallel>:
     858:	stp	x29, x30, [sp, #-32]!
     85c:	mov	w0, #0x2                   	// #2
     860:	mov	x29, sp
     864:	stp	x19, x20, [sp, #16]
     868:	mov	x20, x3
     86c:	mov	x19, x1
     870:	bl	0 <goacc_save_and_set_bind>
     874:	mov	x0, x20
     878:	blr	x19
     87c:	bl	0 <goacc_restore_bind>
     880:	ldp	x19, x20, [sp, #16]
     884:	ldp	x29, x30, [sp], #32
     888:	ret
     88c:	nop

0000000000000890 <GOACC_data_start>:
     890:	stp	x29, x30, [sp, #-80]!
     894:	mov	x29, sp
     898:	stp	x25, x26, [sp, #64]
     89c:	adrp	x25, 0 <gomp_debug_var>
     8a0:	ldr	w5, [x25]
     8a4:	stp	x19, x20, [sp, #16]
     8a8:	mvn	w19, w0
     8ac:	stp	x21, x22, [sp, #32]
     8b0:	mov	x21, x1
     8b4:	mov	x22, x2
     8b8:	stp	x23, x24, [sp, #48]
     8bc:	mov	x23, x3
     8c0:	mov	x24, x4
     8c4:	cbnz	w5, 9d0 <GOACC_data_start+0x140>
     8c8:	bl	0 <goacc_lazy_initialize>
     8cc:	adrp	x0, 0 <goacc_tls_data>
     8d0:	ldr	x0, [x0]
     8d4:	mrs	x1, tpidr_el0
     8d8:	ldr	x20, [x1, x0]
     8dc:	ldr	x26, [x20, #8]
     8e0:	ldr	w0, [x26, #8]
     8e4:	orr	w19, w19, w0
     8e8:	tbnz	w19, #0, 948 <GOACC_data_start+0xb8>
     8ec:	ldr	w0, [x25]
     8f0:	cbnz	w0, 9b0 <GOACC_data_start+0x120>
     8f4:	mov	x1, x21
     8f8:	mov	x5, x24
     8fc:	mov	x4, x23
     900:	mov	x2, x22
     904:	mov	x0, x26
     908:	mov	w7, #0x0                   	// #0
     90c:	mov	w6, #0x1                   	// #1
     910:	mov	x3, #0x0                   	// #0
     914:	bl	0 <gomp_map_vars>
     918:	mov	x19, x0
     91c:	ldr	w1, [x25]
     920:	cbnz	w1, 990 <GOACC_data_start+0x100>
     924:	ldr	x0, [x20, #24]
     928:	str	x0, [x19, #40]
     92c:	str	x19, [x20, #24]
     930:	ldp	x19, x20, [sp, #16]
     934:	ldp	x21, x22, [sp, #32]
     938:	ldp	x23, x24, [sp, #48]
     93c:	ldp	x25, x26, [sp, #64]
     940:	ldp	x29, x30, [sp], #80
     944:	ret
     948:	mov	w7, #0x0                   	// #0
     94c:	mov	w6, #0x1                   	// #1
     950:	mov	x5, #0x0                   	// #0
     954:	mov	x4, #0x0                   	// #0
     958:	mov	x3, #0x0                   	// #0
     95c:	mov	x2, #0x0                   	// #0
     960:	mov	x1, #0x0                   	// #0
     964:	mov	x0, #0x0                   	// #0
     968:	bl	0 <gomp_map_vars>
     96c:	ldr	x1, [x20, #24]
     970:	str	x1, [x0, #40]
     974:	str	x0, [x20, #24]
     978:	ldp	x19, x20, [sp, #16]
     97c:	ldp	x21, x22, [sp, #32]
     980:	ldp	x23, x24, [sp, #48]
     984:	ldp	x25, x26, [sp, #64]
     988:	ldp	x29, x30, [sp], #80
     98c:	ret
     990:	adrp	x2, 0 <GOACC_enter_exit_data.constprop.0>
     994:	add	x2, x2, #0x0
     998:	add	x2, x2, #0x18
     99c:	adrp	x1, 0 <GOACC_enter_exit_data.constprop.0>
     9a0:	mov	w0, #0x0                   	// #0
     9a4:	add	x1, x1, #0x0
     9a8:	bl	0 <gomp_debug>
     9ac:	b	924 <GOACC_data_start+0x94>
     9b0:	adrp	x2, 0 <GOACC_enter_exit_data.constprop.0>
     9b4:	add	x2, x2, #0x0
     9b8:	add	x2, x2, #0x18
     9bc:	adrp	x1, 0 <GOACC_enter_exit_data.constprop.0>
     9c0:	mov	w0, #0x0                   	// #0
     9c4:	add	x1, x1, #0x0
     9c8:	bl	0 <gomp_debug>
     9cc:	b	8f4 <GOACC_data_start+0x64>
     9d0:	adrp	x2, 0 <GOACC_enter_exit_data.constprop.0>
     9d4:	add	x2, x2, #0x0
     9d8:	mov	x6, x4
     9dc:	mov	x5, x3
     9e0:	add	x2, x2, #0x18
     9e4:	mov	x4, x22
     9e8:	mov	x3, x21
     9ec:	adrp	x1, 0 <GOACC_enter_exit_data.constprop.0>
     9f0:	mov	w0, #0x0                   	// #0
     9f4:	add	x1, x1, #0x0
     9f8:	bl	0 <gomp_debug>
     9fc:	b	8c8 <GOACC_data_start+0x38>

0000000000000a00 <GOACC_data_end>:
     a00:	stp	x29, x30, [sp, #-48]!
     a04:	mrs	x1, tpidr_el0
     a08:	adrp	x0, 0 <goacc_tls_data>
     a0c:	ldr	x0, [x0]
     a10:	mov	x29, sp
     a14:	stp	x19, x20, [sp, #16]
     a18:	adrp	x19, 0 <gomp_debug_var>
     a1c:	ldr	w2, [x19]
     a20:	str	x21, [sp, #32]
     a24:	ldr	x21, [x1, x0]
     a28:	ldr	x20, [x21, #24]
     a2c:	cbnz	w2, a5c <GOACC_data_end+0x5c>
     a30:	ldr	x0, [x20, #40]
     a34:	str	x0, [x21, #24]
     a38:	mov	w1, #0x1                   	// #1
     a3c:	mov	x0, x20
     a40:	bl	0 <gomp_unmap_vars>
     a44:	ldr	w0, [x19]
     a48:	cbnz	w0, a94 <GOACC_data_end+0x94>
     a4c:	ldp	x19, x20, [sp, #16]
     a50:	ldr	x21, [sp, #32]
     a54:	ldp	x29, x30, [sp], #48
     a58:	ret
     a5c:	adrp	x2, 0 <GOACC_enter_exit_data.constprop.0>
     a60:	add	x2, x2, #0x0
     a64:	add	x2, x2, #0x30
     a68:	mov	w0, #0x0                   	// #0
     a6c:	adrp	x1, 0 <GOACC_enter_exit_data.constprop.0>
     a70:	add	x1, x1, #0x0
     a74:	bl	0 <gomp_debug>
     a78:	ldr	x0, [x20, #40]
     a7c:	str	x0, [x21, #24]
     a80:	mov	w1, #0x1                   	// #1
     a84:	mov	x0, x20
     a88:	bl	0 <gomp_unmap_vars>
     a8c:	ldr	w0, [x19]
     a90:	cbz	w0, a4c <GOACC_data_end+0x4c>
     a94:	ldp	x19, x20, [sp, #16]
     a98:	adrp	x2, 0 <GOACC_enter_exit_data.constprop.0>
     a9c:	ldr	x21, [sp, #32]
     aa0:	add	x2, x2, #0x0
     aa4:	ldp	x29, x30, [sp], #48
     aa8:	add	x2, x2, #0x30
     aac:	adrp	x1, 0 <GOACC_enter_exit_data.constprop.0>
     ab0:	mov	w0, #0x0                   	// #0
     ab4:	add	x1, x1, #0x0
     ab8:	b	0 <gomp_debug>
     abc:	nop

0000000000000ac0 <GOACC_enter_exit_data>:
     ac0:	stp	x29, x30, [sp, #-128]!
     ac4:	mov	x29, sp
     ac8:	stp	x19, x20, [sp, #16]
     acc:	mov	x20, x1
     ad0:	mov	w19, w6
     ad4:	stp	x21, x22, [sp, #32]
     ad8:	mov	x21, x2
     adc:	mov	x22, x3
     ae0:	stp	x23, x24, [sp, #48]
     ae4:	mov	x24, x4
     ae8:	stp	x25, x26, [sp, #64]
     aec:	mov	w26, w0
     af0:	mov	w25, w5
     af4:	str	x7, [sp, #120]
     af8:	bl	0 <goacc_lazy_initialize>
     afc:	adrp	x0, 0 <goacc_tls_data>
     b00:	ldr	x0, [x0]
     b04:	mrs	x1, tpidr_el0
     b08:	ldr	x0, [x1, x0]
     b0c:	ldr	x23, [x0, #8]
     b10:	ldr	w0, [x23, #8]
     b14:	orn	w0, w0, w26
     b18:	tbnz	w0, #0, b3c <GOACC_enter_exit_data+0x7c>
     b1c:	cbnz	w19, cfc <GOACC_enter_exit_data+0x23c>
     b20:	ldr	x1, [x23, #248]
     b24:	cbnz	x20, b54 <GOACC_enter_exit_data+0x94>
     b28:	mov	w0, w25
     b2c:	blr	x1
     b30:	ldr	x1, [x23, #248]
     b34:	mov	w0, #0xfffffffe            	// #-2
     b38:	blr	x1
     b3c:	ldp	x19, x20, [sp, #16]
     b40:	ldp	x21, x22, [sp, #32]
     b44:	ldp	x23, x24, [sp, #48]
     b48:	ldp	x25, x26, [sp, #64]
     b4c:	ldp	x29, x30, [sp], #128
     b50:	ret
     b54:	ldrh	w26, [x24]
     b58:	mov	w0, w25
     b5c:	blr	x1
     b60:	mov	x2, #0x0                   	// #0
     b64:	ldrh	w1, [x24, x2, lsl #1]
     b68:	and	w1, w1, #0xff
     b6c:	sub	w0, w1, #0x4
     b70:	and	w0, w0, #0xff
     b74:	cmp	w0, #0x1
     b78:	b.ls	df8 <GOACC_enter_exit_data+0x338>  // b.plast
     b7c:	cmp	w1, #0x6
     b80:	b.eq	cf4 <GOACC_enter_exit_data+0x234>  // b.none
     b84:	tst	w1, #0x7e
     b88:	mov	x19, #0x0                   	// #0
     b8c:	b.eq	c60 <GOACC_enter_exit_data+0x1a0>  // b.none
     b90:	and	w0, w1, #0xffffffef
     b94:	cmp	w0, #0x7
     b98:	b.ne	e58 <GOACC_enter_exit_data+0x398>  // b.any
     b9c:	and	w0, w26, #0xff
     ba0:	mov	x19, #0x0                   	// #0
     ba4:	cmp	w0, #0x7
     ba8:	cset	w26, eq  // eq = none
     bac:	cmp	w0, #0x82
     bb0:	csinc	w26, w26, wzr, ne  // ne = any
     bb4:	b	bdc <GOACC_enter_exit_data+0x11c>
     bb8:	ldr	x0, [x21, x19, lsl #3]
     bbc:	ldr	x1, [x22, x19, lsl #3]
     bc0:	cbz	w26, df0 <GOACC_enter_exit_data+0x330>
     bc4:	nop
     bc8:	bl	0 <acc_copyout_finalize>
     bcc:	nop
     bd0:	add	x19, x19, #0x1
     bd4:	cmp	x20, x19
     bd8:	b.ls	b30 <GOACC_enter_exit_data+0x70>  // b.plast
     bdc:	ldrh	w1, [x24, x19, lsl #1]
     be0:	add	w0, w19, #0x1
     be4:	and	w1, w1, #0xff
     be8:	cmp	x20, w0, sxtw
     bec:	b.ls	c08 <GOACC_enter_exit_data+0x148>  // b.plast
     bf0:	add	x0, x24, w19, sxtw #1
     bf4:	ldrb	w0, [x0, #2]
     bf8:	cmp	w0, #0x5
     bfc:	b.eq	e10 <GOACC_enter_exit_data+0x350>  // b.none
     c00:	cmp	w0, #0x4
     c04:	b.eq	e40 <GOACC_enter_exit_data+0x380>  // b.none
     c08:	cmp	w1, #0x17
     c0c:	b.eq	c24 <GOACC_enter_exit_data+0x164>  // b.none
     c10:	b.hi	ddc <GOACC_enter_exit_data+0x31c>  // b.pmore
     c14:	cmp	w1, #0x2
     c18:	b.eq	bb8 <GOACC_enter_exit_data+0xf8>  // b.none
     c1c:	cmp	w1, #0x7
     c20:	b.ne	e64 <GOACC_enter_exit_data+0x3a4>  // b.any
     c24:	ldr	x1, [x22, x19, lsl #3]
     c28:	ldr	x0, [x21, x19, lsl #3]
     c2c:	bl	0 <acc_is_present>
     c30:	cbz	w0, bd0 <GOACC_enter_exit_data+0x110>
     c34:	ldr	x0, [x21, x19, lsl #3]
     c38:	ldr	x1, [x22, x19, lsl #3]
     c3c:	cbz	w26, e08 <GOACC_enter_exit_data+0x348>
     c40:	bl	0 <acc_delete_finalize>
     c44:	b	bd0 <GOACC_enter_exit_data+0x110>
     c48:	ldr	x1, [x22, x19, lsl #3]
     c4c:	ldr	x0, [x21, x19, lsl #3]
     c50:	bl	0 <acc_create>
     c54:	add	x19, x19, #0x1
     c58:	cmp	x20, x19
     c5c:	b.ls	b30 <GOACC_enter_exit_data+0x70>  // b.plast
     c60:	lsl	x0, x19, #1
     c64:	add	w5, w19, #0x1
     c68:	add	x3, x24, x0
     c6c:	cmp	x20, w5, sxtw
     c70:	ldrb	w0, [x24, x0]
     c74:	b.ls	c90 <GOACC_enter_exit_data+0x1d0>  // b.plast
     c78:	add	x1, x24, w19, sxtw #1
     c7c:	ldrb	w1, [x1, #2]
     c80:	cmp	w1, #0x5
     c84:	b.eq	cc8 <GOACC_enter_exit_data+0x208>  // b.none
     c88:	cmp	w1, #0x4
     c8c:	b.eq	ce8 <GOACC_enter_exit_data+0x228>  // b.none
     c90:	cmp	w0, #0x80
     c94:	b.eq	c48 <GOACC_enter_exit_data+0x188>  // b.none
     c98:	b.hi	cb8 <GOACC_enter_exit_data+0x1f8>  // b.pmore
     c9c:	cbz	w0, c48 <GOACC_enter_exit_data+0x188>
     ca0:	cmp	w0, #0x1
     ca4:	b.ne	cc0 <GOACC_enter_exit_data+0x200>  // b.any
     ca8:	ldr	x1, [x22, x19, lsl #3]
     cac:	ldr	x0, [x21, x19, lsl #3]
     cb0:	bl	0 <acc_copyin>
     cb4:	b	c54 <GOACC_enter_exit_data+0x194>
     cb8:	cmp	w0, #0x81
     cbc:	b.eq	ca8 <GOACC_enter_exit_data+0x1e8>  // b.none
     cc0:	mov	w1, w0
     cc4:	b	e64 <GOACC_enter_exit_data+0x3a4>
     cc8:	mov	x2, #0x2                   	// #2
     ccc:	mov	x0, #0x3                   	// #3
     cd0:	lsl	x1, x19, #3
     cd4:	add	x19, x19, x2
     cd8:	add	x2, x22, x1
     cdc:	add	x1, x21, x1
     ce0:	bl	0 <gomp_acc_insert_pointer>
     ce4:	b	c54 <GOACC_enter_exit_data+0x194>
     ce8:	mov	x2, #0x1                   	// #1
     cec:	mov	x0, #0x2                   	// #2
     cf0:	b	cd0 <GOACC_enter_exit_data+0x210>
     cf4:	mov	x19, #0x0                   	// #0
     cf8:	b	c60 <GOACC_enter_exit_data+0x1a0>
     cfc:	add	x1, sp, #0x70
     d00:	add	x2, sp, #0x80
     d04:	mov	w0, #0xfffffff8            	// #-8
     d08:	stp	x2, x2, [sp, #80]
     d0c:	cmn	w25, #0x2
     d10:	str	x1, [sp, #96]
     d14:	stp	w0, wzr, [sp, #104]
     d18:	b.ne	d60 <GOACC_enter_exit_data+0x2a0>  // b.any
     d1c:	b	dcc <GOACC_enter_exit_data+0x30c>
     d20:	add	x1, x0, #0xb
     d24:	and	x1, x1, #0xfffffffffffffff8
     d28:	str	x1, [sp, #80]
     d2c:	ldr	w26, [x0]
     d30:	cmn	w26, #0x1
     d34:	b.eq	e70 <GOACC_enter_exit_data+0x3b0>  // b.none
     d38:	mov	w0, w26
     d3c:	bl	0 <acc_async_test>
     d40:	cbnz	w0, d58 <GOACC_enter_exit_data+0x298>
     d44:	cmp	w25, w26
     d48:	b.eq	d58 <GOACC_enter_exit_data+0x298>  // b.none
     d4c:	mov	w0, w26
     d50:	mov	w1, w25
     d54:	bl	0 <acc_wait_async>
     d58:	subs	w19, w19, #0x1
     d5c:	b.eq	b20 <GOACC_enter_exit_data+0x60>  // b.none
     d60:	ldr	w1, [sp, #104]
     d64:	ldr	x0, [sp, #80]
     d68:	tbz	w1, #31, d20 <GOACC_enter_exit_data+0x260>
     d6c:	add	w2, w1, #0x8
     d70:	str	w2, [sp, #104]
     d74:	cmp	w2, #0x0
     d78:	b.gt	d20 <GOACC_enter_exit_data+0x260>
     d7c:	ldr	x0, [sp, #88]
     d80:	add	x0, x0, w1, sxtw
     d84:	b	d2c <GOACC_enter_exit_data+0x26c>
     d88:	add	w2, w1, #0x8
     d8c:	str	w2, [sp, #104]
     d90:	cmp	w2, #0x0
     d94:	b.le	e4c <GOACC_enter_exit_data+0x38c>
     d98:	add	x1, x0, #0xb
     d9c:	and	x1, x1, #0xfffffffffffffff8
     da0:	str	x1, [sp, #80]
     da4:	ldr	w26, [x0]
     da8:	cmn	w26, #0x1
     dac:	b.eq	e7c <GOACC_enter_exit_data+0x3bc>  // b.none
     db0:	mov	w0, w26
     db4:	bl	0 <acc_async_test>
     db8:	cbnz	w0, dc4 <GOACC_enter_exit_data+0x304>
     dbc:	mov	w0, w26
     dc0:	bl	0 <acc_wait>
     dc4:	subs	w19, w19, #0x1
     dc8:	b.eq	b20 <GOACC_enter_exit_data+0x60>  // b.none
     dcc:	ldr	w1, [sp, #104]
     dd0:	ldr	x0, [sp, #80]
     dd4:	tbz	w1, #31, d98 <GOACC_enter_exit_data+0x2d8>
     dd8:	b	d88 <GOACC_enter_exit_data+0x2c8>
     ddc:	cmp	w1, #0x82
     de0:	b.ne	e64 <GOACC_enter_exit_data+0x3a4>  // b.any
     de4:	ldr	x0, [x21, x19, lsl #3]
     de8:	ldr	x1, [x22, x19, lsl #3]
     dec:	cbnz	w26, bc8 <GOACC_enter_exit_data+0x108>
     df0:	bl	0 <acc_copyout>
     df4:	b	bd0 <GOACC_enter_exit_data+0x110>
     df8:	add	x2, x2, #0x1
     dfc:	cmp	x20, x2
     e00:	b.ne	b64 <GOACC_enter_exit_data+0xa4>  // b.any
     e04:	b	b9c <GOACC_enter_exit_data+0xdc>
     e08:	bl	0 <acc_delete>
     e0c:	b	bd0 <GOACC_enter_exit_data+0x110>
     e10:	mov	x2, #0x2                   	// #2
     e14:	mov	w5, #0x3                   	// #3
     e18:	and	w0, w1, #0x7f
     e1c:	mov	w4, w26
     e20:	cmp	w0, #0x2
     e24:	mov	w3, w25
     e28:	ldr	x1, [x22, x19, lsl #3]
     e2c:	ldr	x0, [x21, x19, lsl #3]
     e30:	add	x19, x19, x2
     e34:	cset	w2, eq  // eq = none
     e38:	bl	0 <gomp_acc_remove_pointer>
     e3c:	b	bd0 <GOACC_enter_exit_data+0x110>
     e40:	mov	x2, #0x1                   	// #1
     e44:	mov	w5, #0x2                   	// #2
     e48:	b	e18 <GOACC_enter_exit_data+0x358>
     e4c:	ldr	x0, [sp, #88]
     e50:	add	x0, x0, w1, sxtw
     e54:	b	da4 <GOACC_enter_exit_data+0x2e4>
     e58:	and	w0, w1, #0x7f
     e5c:	cmp	w0, #0x2
     e60:	b.eq	b9c <GOACC_enter_exit_data+0xdc>  // b.none
     e64:	adrp	x0, 0 <GOACC_enter_exit_data.constprop.0>
     e68:	add	x0, x0, #0x0
     e6c:	bl	0 <gomp_fatal>
     e70:	mov	w0, w25
     e74:	bl	0 <acc_wait_all_async>
     e78:	b	b20 <GOACC_enter_exit_data+0x60>
     e7c:	bl	0 <acc_wait_all>
     e80:	b	b20 <GOACC_enter_exit_data+0x60>
     e84:	nop

0000000000000e88 <GOACC_update>:
     e88:	stp	x29, x30, [sp, #-128]!
     e8c:	mov	x29, sp
     e90:	stp	x19, x20, [sp, #16]
     e94:	mov	x20, x2
     e98:	mov	w19, w6
     e9c:	stp	x21, x22, [sp, #32]
     ea0:	mov	x21, x1
     ea4:	mov	x22, x4
     ea8:	stp	x23, x24, [sp, #48]
     eac:	mov	x23, x3
     eb0:	stp	x25, x26, [sp, #64]
     eb4:	mov	w25, w0
     eb8:	mov	w26, w5
     ebc:	str	x7, [sp, #120]
     ec0:	bl	0 <goacc_lazy_initialize>
     ec4:	adrp	x0, 0 <goacc_tls_data>
     ec8:	ldr	x0, [x0]
     ecc:	mrs	x1, tpidr_el0
     ed0:	ldr	x0, [x1, x0]
     ed4:	ldr	x24, [x0, #8]
     ed8:	ldr	w0, [x24, #8]
     edc:	orn	w0, w0, w25
     ee0:	tbnz	w0, #0, f7c <GOACC_update+0xf4>
     ee4:	cbnz	w19, 1028 <GOACC_update+0x1a0>
     ee8:	ldr	x1, [x24, #248]
     eec:	mov	w0, w26
     ef0:	mov	x19, #0x0                   	// #0
     ef4:	blr	x1
     ef8:	mov	w1, #0x0                   	// #0
     efc:	cbnz	x21, f30 <GOACC_update+0xa8>
     f00:	b	f70 <GOACC_update+0xe8>
     f04:	cmp	w0, #0x2
     f08:	b.eq	100c <GOACC_update+0x184>  // b.none
     f0c:	b.ls	f94 <GOACC_update+0x10c>  // b.plast
     f10:	sub	w2, w0, #0x4
     f14:	and	w2, w2, #0xff
     f18:	cmp	w2, #0x1
     f1c:	b.hi	1128 <GOACC_update+0x2a0>  // b.pmore
     f20:	add	x19, x19, #0x1
     f24:	add	x20, x20, #0x8
     f28:	cmp	x21, x19
     f2c:	b.eq	f70 <GOACC_update+0xe8>  // b.none
     f30:	ldrh	w0, [x22, x19, lsl #1]
     f34:	and	w0, w0, #0xff
     f38:	cmp	w0, #0x1d
     f3c:	b.eq	fd8 <GOACC_update+0x150>  // b.none
     f40:	b.ls	f04 <GOACC_update+0x7c>  // b.plast
     f44:	cmp	w0, #0x81
     f48:	b.ne	fb8 <GOACC_update+0x130>  // b.any
     f4c:	add	x25, x23, x19, lsl #3
     f50:	ldr	x0, [x20]
     f54:	add	x19, x19, #0x1
     f58:	ldr	x1, [x25]
     f5c:	add	x20, x20, #0x8
     f60:	bl	0 <acc_update_device>
     f64:	cmp	x21, x19
     f68:	mov	w1, #0x1                   	// #1
     f6c:	b.ne	f30 <GOACC_update+0xa8>  // b.any
     f70:	ldr	x1, [x24, #248]
     f74:	mov	w0, #0xfffffffe            	// #-2
     f78:	blr	x1
     f7c:	ldp	x19, x20, [sp, #16]
     f80:	ldp	x21, x22, [sp, #32]
     f84:	ldp	x23, x24, [sp, #48]
     f88:	ldp	x25, x26, [sp, #64]
     f8c:	ldp	x29, x30, [sp], #128
     f90:	ret
     f94:	cmp	w0, #0x1
     f98:	b.ne	1128 <GOACC_update+0x2a0>  // b.any
     f9c:	ldr	x1, [x23, x19, lsl #3]
     fa0:	add	x25, x23, x19, lsl #3
     fa4:	ldr	x0, [x20]
     fa8:	bl	0 <acc_is_present>
     fac:	cbnz	w0, f50 <GOACC_update+0xc8>
     fb0:	mov	w1, #0x0                   	// #0
     fb4:	b	f20 <GOACC_update+0x98>
     fb8:	cmp	w0, #0x82
     fbc:	b.ne	1128 <GOACC_update+0x2a0>  // b.any
     fc0:	add	x25, x23, x19, lsl #3
     fc4:	ldr	x1, [x25]
     fc8:	ldr	x0, [x20]
     fcc:	bl	0 <acc_update_self>
     fd0:	mov	w1, #0x0                   	// #0
     fd4:	b	f20 <GOACC_update+0x98>
     fd8:	cbz	w1, fb0 <GOACC_update+0x128>
     fdc:	ldur	x0, [x20, #-8]
     fe0:	bl	0 <acc_deviceptr>
     fe4:	mov	x2, x0
     fe8:	ldr	x0, [x20]
     fec:	mov	x1, #0x8                   	// #8
     ff0:	ldr	x25, [x0]
     ff4:	str	x2, [x0]
     ff8:	bl	0 <acc_update_device>
     ffc:	ldr	x0, [x20]
    1000:	mov	w1, #0x0                   	// #0
    1004:	str	x25, [x0]
    1008:	b	f20 <GOACC_update+0x98>
    100c:	ldr	x1, [x23, x19, lsl #3]
    1010:	add	x25, x23, x19, lsl #3
    1014:	ldr	x0, [x20]
    1018:	bl	0 <acc_is_present>
    101c:	cbnz	w0, fc4 <GOACC_update+0x13c>
    1020:	mov	w1, #0x0                   	// #0
    1024:	b	f20 <GOACC_update+0x98>
    1028:	add	x1, sp, #0x70
    102c:	add	x2, sp, #0x80
    1030:	mov	w0, #0xfffffff8            	// #-8
    1034:	stp	x2, x2, [sp, #80]
    1038:	cmn	w26, #0x2
    103c:	str	x1, [sp, #96]
    1040:	stp	w0, wzr, [sp, #104]
    1044:	b.ne	108c <GOACC_update+0x204>  // b.any
    1048:	b	10f8 <GOACC_update+0x270>
    104c:	add	x1, x0, #0xb
    1050:	and	x1, x1, #0xfffffffffffffff8
    1054:	str	x1, [sp, #80]
    1058:	ldr	w25, [x0]
    105c:	cmn	w25, #0x1
    1060:	b.eq	1114 <GOACC_update+0x28c>  // b.none
    1064:	mov	w0, w25
    1068:	bl	0 <acc_async_test>
    106c:	cbnz	w0, 1084 <GOACC_update+0x1fc>
    1070:	cmp	w26, w25
    1074:	b.eq	1084 <GOACC_update+0x1fc>  // b.none
    1078:	mov	w0, w25
    107c:	mov	w1, w26
    1080:	bl	0 <acc_wait_async>
    1084:	subs	w19, w19, #0x1
    1088:	b.eq	ee8 <GOACC_update+0x60>  // b.none
    108c:	ldr	w1, [sp, #104]
    1090:	ldr	x0, [sp, #80]
    1094:	tbz	w1, #31, 104c <GOACC_update+0x1c4>
    1098:	add	w2, w1, #0x8
    109c:	str	w2, [sp, #104]
    10a0:	cmp	w2, #0x0
    10a4:	b.gt	104c <GOACC_update+0x1c4>
    10a8:	ldr	x0, [sp, #88]
    10ac:	add	x0, x0, w1, sxtw
    10b0:	b	1058 <GOACC_update+0x1d0>
    10b4:	add	w2, w1, #0x8
    10b8:	str	w2, [sp, #104]
    10bc:	cmp	w2, #0x0
    10c0:	b.le	1108 <GOACC_update+0x280>
    10c4:	add	x1, x0, #0xb
    10c8:	and	x1, x1, #0xfffffffffffffff8
    10cc:	str	x1, [sp, #80]
    10d0:	ldr	w25, [x0]
    10d4:	cmn	w25, #0x1
    10d8:	b.eq	1120 <GOACC_update+0x298>  // b.none
    10dc:	mov	w0, w25
    10e0:	bl	0 <acc_async_test>
    10e4:	cbnz	w0, 10f0 <GOACC_update+0x268>
    10e8:	mov	w0, w25
    10ec:	bl	0 <acc_wait>
    10f0:	subs	w19, w19, #0x1
    10f4:	b.eq	ee8 <GOACC_update+0x60>  // b.none
    10f8:	ldr	w1, [sp, #104]
    10fc:	ldr	x0, [sp, #80]
    1100:	tbz	w1, #31, 10c4 <GOACC_update+0x23c>
    1104:	b	10b4 <GOACC_update+0x22c>
    1108:	ldr	x0, [sp, #88]
    110c:	add	x0, x0, w1, sxtw
    1110:	b	10d0 <GOACC_update+0x248>
    1114:	mov	w0, w26
    1118:	bl	0 <acc_wait_all_async>
    111c:	b	ee8 <GOACC_update+0x60>
    1120:	bl	0 <acc_wait_all>
    1124:	b	ee8 <GOACC_update+0x60>
    1128:	mov	w1, w0
    112c:	adrp	x0, 0 <GOACC_enter_exit_data.constprop.0>
    1130:	add	x0, x0, #0x0
    1134:	bl	0 <gomp_fatal>

0000000000001138 <GOACC_wait>:
    1138:	stp	x29, x30, [sp, #-128]!
    113c:	mov	x29, sp
    1140:	stp	x19, x20, [sp, #16]
    1144:	mov	w20, w0
    1148:	stp	x2, x3, [sp, #80]
    114c:	stp	x4, x5, [sp, #96]
    1150:	stp	x6, x7, [sp, #112]
    1154:	cbnz	w1, 1180 <GOACC_wait+0x48>
    1158:	cmn	w0, #0x2
    115c:	b.eq	1170 <GOACC_wait+0x38>  // b.none
    1160:	bl	0 <acc_wait_all_async>
    1164:	ldp	x19, x20, [sp, #16]
    1168:	ldp	x29, x30, [sp], #128
    116c:	ret
    1170:	bl	0 <acc_wait_all>
    1174:	ldp	x19, x20, [sp, #16]
    1178:	ldp	x29, x30, [sp], #128
    117c:	ret
    1180:	mov	w19, w1
    1184:	add	x2, sp, #0x80
    1188:	add	x1, sp, #0x50
    118c:	mov	w0, #0xffffffd0            	// #-48
    1190:	stp	x2, x2, [sp, #48]
    1194:	cmn	w20, #0x2
    1198:	str	x1, [sp, #64]
    119c:	stp	w0, wzr, [sp, #72]
    11a0:	b.eq	1238 <GOACC_wait+0x100>  // b.none
    11a4:	str	x21, [sp, #32]
    11a8:	ldr	w2, [sp, #72]
    11ac:	ldr	x1, [sp, #48]
    11b0:	add	w3, w2, #0x8
    11b4:	add	x0, x1, #0xb
    11b8:	tbnz	w2, #31, 1268 <GOACC_wait+0x130>
    11bc:	and	x0, x0, #0xfffffffffffffff8
    11c0:	ldr	w21, [x1]
    11c4:	str	x0, [sp, #48]
    11c8:	cmn	w21, #0x1
    11cc:	b.eq	1290 <GOACC_wait+0x158>  // b.none
    11d0:	mov	w0, w21
    11d4:	bl	0 <acc_async_test>
    11d8:	cbnz	w0, 11f0 <GOACC_wait+0xb8>
    11dc:	cmp	w20, w21
    11e0:	b.eq	11f0 <GOACC_wait+0xb8>  // b.none
    11e4:	mov	w0, w21
    11e8:	mov	w1, w20
    11ec:	bl	0 <acc_wait_async>
    11f0:	subs	w19, w19, #0x1
    11f4:	b.ne	11a8 <GOACC_wait+0x70>  // b.any
    11f8:	ldr	x21, [sp, #32]
    11fc:	ldp	x19, x20, [sp, #16]
    1200:	ldp	x29, x30, [sp], #128
    1204:	ret
    1208:	and	x2, x2, #0xfffffffffffffff8
    120c:	str	x2, [sp, #48]
    1210:	ldr	w20, [x0]
    1214:	cmn	w20, #0x1
    1218:	b.eq	1170 <GOACC_wait+0x38>  // b.none
    121c:	mov	w0, w20
    1220:	bl	0 <acc_async_test>
    1224:	cbnz	w0, 1230 <GOACC_wait+0xf8>
    1228:	mov	w0, w20
    122c:	bl	0 <acc_wait>
    1230:	subs	w19, w19, #0x1
    1234:	b.eq	1164 <GOACC_wait+0x2c>  // b.none
    1238:	ldr	w1, [sp, #72]
    123c:	ldr	x0, [sp, #48]
    1240:	add	w3, w1, #0x8
    1244:	add	x2, x0, #0xb
    1248:	tbz	w1, #31, 1208 <GOACC_wait+0xd0>
    124c:	str	w3, [sp, #72]
    1250:	add	x2, x0, #0xb
    1254:	cmp	w3, #0x0
    1258:	and	x2, x2, #0xfffffffffffffff8
    125c:	b.le	12a0 <GOACC_wait+0x168>
    1260:	str	x2, [sp, #48]
    1264:	b	1210 <GOACC_wait+0xd8>
    1268:	str	w3, [sp, #72]
    126c:	cmp	w3, #0x0
    1270:	and	x0, x0, #0xfffffffffffffff8
    1274:	b.gt	11c0 <GOACC_wait+0x88>
    1278:	ldr	x1, [sp, #56]
    127c:	add	x1, x1, w2, sxtw
    1280:	ldr	w21, [x1]
    1284:	cmn	w21, #0x1
    1288:	b.ne	11d0 <GOACC_wait+0x98>  // b.any
    128c:	nop
    1290:	mov	w0, w20
    1294:	bl	0 <acc_wait_all_async>
    1298:	ldr	x21, [sp, #32]
    129c:	b	11fc <GOACC_wait+0xc4>
    12a0:	ldr	x0, [sp, #56]
    12a4:	add	x0, x0, w1, sxtw
    12a8:	b	1210 <GOACC_wait+0xd8>
    12ac:	nop

00000000000012b0 <GOACC_get_num_threads>:
    12b0:	mov	w0, #0x1                   	// #1
    12b4:	ret

00000000000012b8 <GOACC_get_thread_num>:
    12b8:	mov	w0, #0x0                   	// #0
    12bc:	ret

00000000000012c0 <GOACC_declare>:
    12c0:	cbz	x1, 1420 <GOACC_declare+0x160>
    12c4:	stp	x29, x30, [sp, #-80]!
    12c8:	mov	x29, sp
    12cc:	stp	x19, x20, [sp, #16]
    12d0:	mov	x20, x1
    12d4:	mov	x19, #0x0                   	// #0
    12d8:	stp	x21, x22, [sp, #32]
    12dc:	mov	x21, x2
    12e0:	mov	x22, x3
    12e4:	stp	x23, x24, [sp, #48]
    12e8:	mov	w23, w0
    12ec:	mov	x24, x4
    12f0:	stp	x25, x26, [sp, #64]
    12f4:	b	132c <GOACC_declare+0x6c>
    12f8:	lsl	x2, x19, #3
    12fc:	mov	w6, #0x0                   	// #0
    1300:	add	x3, x22, x2
    1304:	add	x2, x21, x2
    1308:	mov	x4, x24
    130c:	mov	w0, w23
    1310:	mov	w5, #0xfffffffe            	// #-2
    1314:	mov	x1, #0x1                   	// #1
    1318:	bl	0 <GOACC_enter_exit_data.constprop.0>
    131c:	add	x19, x19, #0x1
    1320:	add	x24, x24, #0x2
    1324:	cmp	x20, x19
    1328:	b.eq	1408 <GOACC_declare+0x148>  // b.none
    132c:	ldrb	w5, [x24]
    1330:	sub	w6, w5, #0x4
    1334:	and	w6, w6, #0xff
    1338:	cmp	w6, #0x1
    133c:	b.ls	131c <GOACC_declare+0x5c>  // b.plast
    1340:	cmp	w5, #0x2
    1344:	b.eq	12f8 <GOACC_declare+0x38>  // b.none
    1348:	b.ls	13cc <GOACC_declare+0x10c>  // b.plast
    134c:	cmp	w5, #0x8
    1350:	b.eq	131c <GOACC_declare+0x5c>  // b.none
    1354:	b.ls	1394 <GOACC_declare+0xd4>  // b.plast
    1358:	cmp	w5, #0x17
    135c:	b.eq	12f8 <GOACC_declare+0x38>  // b.none
    1360:	sub	w5, w5, #0x80
    1364:	and	w5, w5, #0xff
    1368:	cmp	w5, #0x2
    136c:	b.ls	12f8 <GOACC_declare+0x38>  // b.plast
    1370:	adrp	x3, 0 <GOACC_enter_exit_data.constprop.0>
    1374:	add	x3, x3, #0x0
    1378:	adrp	x1, 0 <GOACC_enter_exit_data.constprop.0>
    137c:	adrp	x0, 0 <GOACC_enter_exit_data.constprop.0>
    1380:	add	x3, x3, #0x40
    1384:	add	x1, x1, #0x0
    1388:	add	x0, x0, #0x0
    138c:	mov	w2, #0x2cc                 	// #716
    1390:	bl	0 <__assert_fail>
    1394:	cmp	w5, #0x6
    1398:	b.ne	13fc <GOACC_declare+0x13c>  // b.any
    139c:	ldr	x1, [x22, x19, lsl #3]
    13a0:	lsl	x2, x19, #3
    13a4:	ldr	x0, [x21, x19, lsl #3]
    13a8:	add	x26, x21, x2
    13ac:	add	x25, x22, x2
    13b0:	bl	0 <acc_is_present>
    13b4:	cbnz	w0, 131c <GOACC_declare+0x5c>
    13b8:	ldr	x2, [x25]
    13bc:	adrp	x0, 0 <GOACC_enter_exit_data.constprop.0>
    13c0:	ldr	x1, [x26]
    13c4:	add	x0, x0, #0x0
    13c8:	bl	0 <gomp_fatal>
    13cc:	cbnz	w5, 12f8 <GOACC_declare+0x38>
    13d0:	ldr	x1, [x22, x19, lsl #3]
    13d4:	lsl	x3, x19, #3
    13d8:	ldr	x0, [x21, x19, lsl #3]
    13dc:	add	x26, x21, x3
    13e0:	add	x25, x22, x3
    13e4:	bl	0 <acc_is_present>
    13e8:	cbnz	w0, 131c <GOACC_declare+0x5c>
    13ec:	mov	x3, x25
    13f0:	mov	x2, x26
    13f4:	mov	w6, #0x0                   	// #0
    13f8:	b	1308 <GOACC_declare+0x48>
    13fc:	cmp	w5, #0x7
    1400:	b.eq	12f8 <GOACC_declare+0x38>  // b.none
    1404:	b	1370 <GOACC_declare+0xb0>
    1408:	ldp	x19, x20, [sp, #16]
    140c:	ldp	x21, x22, [sp, #32]
    1410:	ldp	x23, x24, [sp, #48]
    1414:	ldp	x25, x26, [sp, #64]
    1418:	ldp	x29, x30, [sp], #80
    141c:	ret
    1420:	ret

oacc-host.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <host_get_name>:
   0:	adrp	x0, 0 <host_get_name>
   4:	ldr	x0, [x0]
   8:	ret
   c:	nop

0000000000000010 <host_get_caps>:
  10:	adrp	x0, 0 <host_get_name>
  14:	ldr	w0, [x0]
  18:	ret
  1c:	nop

0000000000000020 <host_get_type>:
  20:	adrp	x0, 0 <host_get_name>
  24:	ldr	w0, [x0]
  28:	ret
  2c:	nop

0000000000000030 <host_get_num_devices>:
  30:	mov	w0, #0x1                   	// #1
  34:	ret

0000000000000038 <host_init_device>:
  38:	mov	w0, #0x1                   	// #1
  3c:	ret

0000000000000040 <host_version>:
  40:	mov	w0, #0x1                   	// #1
  44:	ret

0000000000000048 <host_load_image>:
  48:	mov	w0, #0x0                   	// #0
  4c:	ret

0000000000000050 <host_unload_image>:
  50:	mov	w0, #0x1                   	// #1
  54:	ret

0000000000000058 <host_dev2host>:
  58:	mov	w0, #0x1                   	// #1
  5c:	ret

0000000000000060 <host_run>:
  60:	mov	x0, x2
  64:	mov	x16, x1
  68:	br	x16
  6c:	nop

0000000000000070 <host_openacc_exec>:
  70:	mov	x16, x0
  74:	mov	x0, x2
  78:	br	x16
  7c:	nop

0000000000000080 <host_openacc_register_async_cleanup>:
  80:	ret
  84:	nop

0000000000000088 <host_openacc_async_test>:
  88:	mov	w0, #0x1                   	// #1
  8c:	ret

0000000000000090 <host_openacc_async_wait>:
  90:	ret
  94:	nop

0000000000000098 <host_openacc_async_wait_async>:
  98:	ret
  9c:	nop

00000000000000a0 <host_openacc_async_wait_all>:
  a0:	ret
  a4:	nop

00000000000000a8 <host_openacc_create_thread_data>:
  a8:	mov	x0, #0x0                   	// #0
  ac:	ret

00000000000000b0 <host_openacc_destroy_thread_data>:
  b0:	ret
  b4:	nop

00000000000000b8 <host_free>:
  b8:	stp	x29, x30, [sp, #-16]!
  bc:	mov	x0, x1
  c0:	mov	x29, sp
  c4:	bl	0 <free>
  c8:	mov	w0, #0x1                   	// #1
  cc:	ldp	x29, x30, [sp], #16
  d0:	ret
  d4:	nop

00000000000000d8 <host_alloc>:
  d8:	mov	x0, x1
  dc:	b	0 <gomp_malloc>

00000000000000e0 <host_openacc_async_wait_all_async>:
  e0:	ret
  e4:	nop

00000000000000e8 <host_host2dev>:
  e8:	mov	w0, #0x1                   	// #1
  ec:	ret

00000000000000f0 <host_fini_device>:
  f0:	mov	w0, #0x1                   	// #1
  f4:	ret

00000000000000f8 <host_openacc_async_set_async>:
  f8:	ret
  fc:	nop

0000000000000100 <host_openacc_async_test_all>:
 100:	mov	w0, #0x1                   	// #1
 104:	ret

0000000000000108 <goacc_host_init>:
 108:	adrp	x0, 0 <host_get_name>
 10c:	add	x0, x0, #0x0
 110:	str	wzr, [x0, #168]
 114:	b	0 <goacc_register>

oacc-init.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <name_of_acc_device_t>:
       0:	cmp	w0, #0x2
       4:	b.eq	58 <name_of_acc_device_t+0x58>  // b.none
       8:	b.gt	24 <name_of_acc_device_t+0x24>
       c:	cbz	w0, 40 <name_of_acc_device_t+0x40>
      10:	cmp	w0, #0x1
      14:	b.ne	64 <name_of_acc_device_t+0x64>  // b.any
      18:	adrp	x0, 0 <name_of_acc_device_t>
      1c:	add	x0, x0, #0x0
      20:	ret
      24:	cmp	w0, #0x4
      28:	b.eq	4c <name_of_acc_device_t+0x4c>  // b.none
      2c:	cmp	w0, #0x5
      30:	b.ne	64 <name_of_acc_device_t+0x64>  // b.any
      34:	adrp	x0, 0 <name_of_acc_device_t>
      38:	add	x0, x0, #0x0
      3c:	ret
      40:	adrp	x0, 0 <name_of_acc_device_t>
      44:	add	x0, x0, #0x0
      48:	ret
      4c:	adrp	x0, 0 <name_of_acc_device_t>
      50:	add	x0, x0, #0x0
      54:	ret
      58:	adrp	x0, 0 <name_of_acc_device_t>
      5c:	add	x0, x0, #0x0
      60:	ret
      64:	stp	x29, x30, [sp, #-16]!
      68:	mov	w1, w0
      6c:	adrp	x0, 0 <name_of_acc_device_t>
      70:	mov	x29, sp
      74:	add	x0, x0, #0x0
      78:	bl	0 <gomp_fatal>
      7c:	nop

0000000000000080 <acc_dev_num_out_of_range>:
      80:	stp	x29, x30, [sp, #-16]!
      84:	mov	x29, sp
      88:	cbnz	w2, a0 <acc_dev_num_out_of_range+0x20>
      8c:	bl	0 <name_of_acc_device_t>
      90:	mov	x1, x0
      94:	adrp	x0, 0 <name_of_acc_device_t>
      98:	add	x0, x0, #0x0
      9c:	bl	0 <gomp_fatal>
      a0:	adrp	x0, 0 <name_of_acc_device_t>
      a4:	add	x0, x0, #0x0
      a8:	bl	0 <gomp_fatal>
      ac:	nop

00000000000000b0 <gomp_mutex_unlock.constprop.0>:
      b0:	adrp	x0, 0 <name_of_acc_device_t>
      b4:	add	x0, x0, #0x0
      b8:	ldxr	w1, [x0]
      bc:	stlxr	w2, wzr, [x0]
      c0:	cbnz	w2, b8 <gomp_mutex_unlock.constprop.0+0x8>
      c4:	tbnz	w1, #31, cc <gomp_mutex_unlock.constprop.0+0x1c>
      c8:	ret
      cc:	b	0 <gomp_mutex_unlock_slow>

00000000000000d0 <resolve_device>:
      d0:	stp	x29, x30, [sp, #-96]!
      d4:	cmp	w0, #0x2
      d8:	mov	x29, sp
      dc:	stp	x19, x20, [sp, #16]
      e0:	mov	w20, w0
      e4:	stp	x21, x22, [sp, #32]
      e8:	stp	x23, x24, [sp, #48]
      ec:	and	w23, w1, #0xff
      f0:	b.eq	13c <resolve_device+0x6c>  // b.none
      f4:	cmp	w0, #0x4
      f8:	b.eq	178 <resolve_device+0xa8>  // b.none
      fc:	cmp	w0, #0x1
     100:	b.eq	164 <resolve_device+0x94>  // b.none
     104:	cmp	w0, #0x6
     108:	b.le	130 <resolve_device+0x60>
     10c:	cbnz	w23, 278 <resolve_device+0x1a8>
     110:	mov	x0, #0x0                   	// #0
     114:	ldp	x19, x20, [sp, #16]
     118:	ldp	x21, x22, [sp, #32]
     11c:	ldp	x23, x24, [sp, #48]
     120:	ldp	x29, x30, [sp], #96
     124:	ret
     128:	ldp	x25, x26, [sp, #64]
     12c:	ldp	x27, x28, [sp, #80]
     130:	cmp	w20, #0x1
     134:	ccmp	w20, #0x4, #0x4, hi  // hi = pmore
     138:	b.eq	250 <resolve_device+0x180>  // b.none
     13c:	adrp	x21, 0 <name_of_acc_device_t>
     140:	add	x21, x21, #0x0
     144:	add	x21, x21, #0x10
     148:	ldr	x0, [x21, w20, sxtw #3]
     14c:	cbz	x0, 10c <resolve_device+0x3c>
     150:	ldp	x19, x20, [sp, #16]
     154:	ldp	x21, x22, [sp, #32]
     158:	ldp	x23, x24, [sp, #48]
     15c:	ldp	x29, x30, [sp], #96
     160:	ret
     164:	stp	x25, x26, [sp, #64]
     168:	adrp	x25, 0 <goacc_device_type>
     16c:	ldr	x0, [x25]
     170:	cbnz	x0, 1bc <resolve_device+0xec>
     174:	ldp	x25, x26, [sp, #64]
     178:	adrp	x21, 0 <name_of_acc_device_t>
     17c:	add	x21, x21, #0x0
     180:	ldr	x0, [x21, #56]
     184:	cbz	x0, 198 <resolve_device+0xc8>
     188:	ldr	x0, [x0, #48]
     18c:	blr	x0
     190:	cmp	w0, #0x0
     194:	b.gt	240 <resolve_device+0x170>
     198:	cmp	w20, #0x1
     19c:	b.eq	248 <resolve_device+0x178>  // b.none
     1a0:	cbz	w23, 110 <resolve_device+0x40>
     1a4:	stp	x25, x26, [sp, #64]
     1a8:	stp	x27, x28, [sp, #80]
     1ac:	bl	b0 <gomp_mutex_unlock.constprop.0>
     1b0:	adrp	x0, 0 <name_of_acc_device_t>
     1b4:	add	x0, x0, #0x0
     1b8:	bl	0 <gomp_fatal>
     1bc:	adrp	x21, 0 <name_of_acc_device_t>
     1c0:	add	x21, x21, #0x0
     1c4:	adrp	x26, 0 <name_of_acc_device_t>
     1c8:	add	x21, x21, #0x10
     1cc:	add	x26, x26, #0x0
     1d0:	stp	x27, x28, [sp, #80]
     1d4:	adrp	x27, 0 <name_of_acc_device_t>
     1d8:	add	x27, x27, #0x0
     1dc:	mov	x19, #0x2                   	// #2
     1e0:	ldr	x22, [x21, x19, lsl #3]
     1e4:	mov	w20, w19
     1e8:	cbz	x22, 224 <resolve_device+0x154>
     1ec:	ldr	x24, [x22]
     1f0:	mov	x1, x27
     1f4:	ldr	x28, [x25]
     1f8:	mov	x0, x24
     1fc:	bl	0 <strcmp>
     200:	cmp	w0, #0x0
     204:	csel	x1, x26, x24, eq  // eq = none
     208:	mov	x0, x28
     20c:	bl	0 <strcasecmp>
     210:	cbnz	w0, 224 <resolve_device+0x154>
     214:	ldr	x0, [x22, #48]
     218:	blr	x0
     21c:	cmp	w0, #0x0
     220:	b.gt	128 <resolve_device+0x58>
     224:	add	x19, x19, #0x1
     228:	cmp	x19, #0x6
     22c:	b.ne	1e0 <resolve_device+0x110>  // b.any
     230:	cbnz	w23, 29c <resolve_device+0x1cc>
     234:	ldp	x25, x26, [sp, #64]
     238:	ldp	x27, x28, [sp, #80]
     23c:	b	110 <resolve_device+0x40>
     240:	mov	w20, #0x5                   	// #5
     244:	b	144 <resolve_device+0x74>
     248:	mov	w20, #0x2                   	// #2
     24c:	b	144 <resolve_device+0x74>
     250:	adrp	x3, 0 <name_of_acc_device_t>
     254:	adrp	x1, 0 <name_of_acc_device_t>
     258:	adrp	x0, 0 <name_of_acc_device_t>
     25c:	add	x3, x3, #0x0
     260:	add	x1, x1, #0x0
     264:	add	x0, x0, #0x0
     268:	mov	w2, #0xb6                  	// #182
     26c:	stp	x25, x26, [sp, #64]
     270:	stp	x27, x28, [sp, #80]
     274:	bl	0 <__assert_fail>
     278:	stp	x25, x26, [sp, #64]
     27c:	stp	x27, x28, [sp, #80]
     280:	bl	b0 <gomp_mutex_unlock.constprop.0>
     284:	mov	w0, w20
     288:	bl	0 <name_of_acc_device_t>
     28c:	mov	x1, x0
     290:	adrp	x0, 0 <name_of_acc_device_t>
     294:	add	x0, x0, #0x0
     298:	bl	0 <gomp_fatal>
     29c:	bl	b0 <gomp_mutex_unlock.constprop.0>
     2a0:	ldr	x1, [x25]
     2a4:	adrp	x0, 0 <name_of_acc_device_t>
     2a8:	add	x0, x0, #0x0
     2ac:	bl	0 <gomp_fatal>

00000000000002b0 <goacc_destroy_thread>:
     2b0:	stp	x29, x30, [sp, #-32]!
     2b4:	mov	w2, #0x1                   	// #1
     2b8:	mov	x29, sp
     2bc:	stp	x19, x20, [sp, #16]
     2c0:	adrp	x20, 0 <name_of_acc_device_t>
     2c4:	add	x20, x20, #0x0
     2c8:	mov	x19, x0
     2cc:	add	x0, x20, #0x40
     2d0:	ldaxr	w1, [x0]
     2d4:	cbnz	w1, 2e0 <goacc_destroy_thread+0x30>
     2d8:	stxr	w3, w2, [x0]
     2dc:	cbnz	w3, 2d0 <goacc_destroy_thread+0x20>
     2e0:	cmp	w1, #0x0
     2e4:	b.ne	3a4 <goacc_destroy_thread+0xf4>  // b.any
     2e8:	cbz	x19, 370 <goacc_destroy_thread+0xc0>
     2ec:	ldr	x1, [x19, #8]
     2f0:	cbz	x1, 308 <goacc_destroy_thread+0x58>
     2f4:	ldr	x0, [x19, #40]
     2f8:	cbz	x0, 308 <goacc_destroy_thread+0x58>
     2fc:	ldr	x1, [x1, #264]
     300:	blr	x1
     304:	str	xzr, [x19, #40]
     308:	ldr	x0, [x19, #24]
     30c:	cbnz	x0, 3ac <goacc_destroy_thread+0xfc>
     310:	ldr	x2, [x20, #72]
     314:	cbz	x2, 340 <goacc_destroy_thread+0x90>
     318:	cmp	x19, x2
     31c:	ldr	x1, [x2, #32]
     320:	b.eq	390 <goacc_destroy_thread+0xe0>  // b.none
     324:	cbz	x1, 340 <goacc_destroy_thread+0x90>
     328:	cmp	x19, x1
     32c:	ldr	x0, [x1, #32]
     330:	b.eq	364 <goacc_destroy_thread+0xb4>  // b.none
     334:	mov	x2, x1
     338:	mov	x1, x0
     33c:	cbnz	x1, 328 <goacc_destroy_thread+0x78>
     340:	adrp	x3, 0 <name_of_acc_device_t>
     344:	add	x3, x3, #0x0
     348:	adrp	x1, 0 <name_of_acc_device_t>
     34c:	adrp	x0, 0 <name_of_acc_device_t>
     350:	add	x3, x3, #0x10
     354:	add	x1, x1, #0x0
     358:	add	x0, x0, #0x0
     35c:	mov	w2, #0x17c                 	// #380
     360:	bl	0 <__assert_fail>
     364:	str	x0, [x2, #32]
     368:	mov	x0, x19
     36c:	bl	0 <free>
     370:	add	x0, x20, #0x40
     374:	ldxr	w1, [x0]
     378:	stlxr	w2, wzr, [x0]
     37c:	cbnz	w2, 374 <goacc_destroy_thread+0xc4>
     380:	tbnz	w1, #31, 398 <goacc_destroy_thread+0xe8>
     384:	ldp	x19, x20, [sp, #16]
     388:	ldp	x29, x30, [sp], #32
     38c:	ret
     390:	str	x1, [x20, #72]
     394:	b	368 <goacc_destroy_thread+0xb8>
     398:	ldp	x19, x20, [sp, #16]
     39c:	ldp	x29, x30, [sp], #32
     3a0:	b	0 <gomp_mutex_unlock_slow>
     3a4:	bl	0 <gomp_mutex_lock_slow>
     3a8:	b	2e8 <goacc_destroy_thread+0x38>
     3ac:	adrp	x3, 0 <name_of_acc_device_t>
     3b0:	add	x3, x3, #0x0
     3b4:	adrp	x1, 0 <name_of_acc_device_t>
     3b8:	adrp	x0, 0 <name_of_acc_device_t>
     3bc:	add	x3, x3, #0x10
     3c0:	add	x1, x1, #0x0
     3c4:	add	x0, x0, #0x0
     3c8:	mov	w2, #0x16b                 	// #363
     3cc:	bl	0 <__assert_fail>

00000000000003d0 <goacc_register>:
     3d0:	stp	x29, x30, [sp, #-32]!
     3d4:	mov	x29, sp
     3d8:	stp	x19, x20, [sp, #16]
     3dc:	mov	x20, x0
     3e0:	ldr	w0, [x0, #12]
     3e4:	cbnz	w0, 440 <goacc_register+0x70>
     3e8:	adrp	x19, 0 <name_of_acc_device_t>
     3ec:	add	x19, x19, #0x0
     3f0:	mov	w0, #0x1                   	// #1
     3f4:	ldaxr	w1, [x19]
     3f8:	cbnz	w1, 404 <goacc_register+0x34>
     3fc:	stxr	w2, w0, [x19]
     400:	cbnz	w2, 3f4 <goacc_register+0x24>
     404:	cmp	w1, #0x0
     408:	b.ne	4a4 <goacc_register+0xd4>  // b.any
     40c:	ldr	w0, [x20, #16]
     410:	cmp	w0, #0x4
     414:	ccmp	w0, #0x1, #0x0, ne  // ne = any
     418:	b.ls	45c <goacc_register+0x8c>  // b.plast
     41c:	mov	w0, w0
     420:	add	x1, x19, #0x10
     424:	ldr	x2, [x1, x0, lsl #3]
     428:	cbnz	x2, 480 <goacc_register+0xb0>
     42c:	str	x20, [x1, x0, lsl #3]
     430:	ldxr	w0, [x19]
     434:	stlxr	w1, wzr, [x19]
     438:	cbnz	w1, 430 <goacc_register+0x60>
     43c:	tbnz	w0, #31, 44c <goacc_register+0x7c>
     440:	ldp	x19, x20, [sp, #16]
     444:	ldp	x29, x30, [sp], #32
     448:	ret
     44c:	mov	x0, x19
     450:	ldp	x19, x20, [sp, #16]
     454:	ldp	x29, x30, [sp], #32
     458:	b	0 <gomp_mutex_unlock_slow>
     45c:	adrp	x3, 0 <name_of_acc_device_t>
     460:	add	x3, x3, #0x0
     464:	adrp	x1, 0 <name_of_acc_device_t>
     468:	adrp	x0, 0 <name_of_acc_device_t>
     46c:	add	x3, x3, #0x28
     470:	add	x1, x1, #0x0
     474:	add	x0, x0, #0x0
     478:	mov	w2, #0x4c                  	// #76
     47c:	bl	0 <__assert_fail>
     480:	adrp	x3, 0 <name_of_acc_device_t>
     484:	add	x3, x3, #0x0
     488:	adrp	x1, 0 <name_of_acc_device_t>
     48c:	adrp	x0, 0 <name_of_acc_device_t>
     490:	add	x3, x3, #0x28
     494:	add	x1, x1, #0x0
     498:	add	x0, x0, #0x0
     49c:	mov	w2, #0x4f                  	// #79
     4a0:	bl	0 <__assert_fail>
     4a4:	mov	x0, x19
     4a8:	bl	0 <gomp_mutex_lock_slow>
     4ac:	b	40c <goacc_register+0x3c>

00000000000004b0 <goacc_attach_host_thread_to_device>:
     4b0:	stp	x29, x30, [sp, #-64]!
     4b4:	mov	x29, sp
     4b8:	stp	x21, x22, [sp, #32]
     4bc:	mrs	x22, tpidr_el0
     4c0:	add	x1, x22, #0x0, lsl #12
     4c4:	add	x1, x1, #0x0
     4c8:	str	x23, [sp, #48]
     4cc:	stp	x19, x20, [sp, #16]
     4d0:	mov	w19, w0
     4d4:	ldr	x23, [x1]
     4d8:	cbz	x23, 610 <goacc_attach_host_thread_to_device+0x160>
     4dc:	ldr	x0, [x23, #8]
     4e0:	cbz	x0, 558 <goacc_attach_host_thread_to_device+0xa8>
     4e4:	ldr	w0, [x0, #12]
     4e8:	cmp	w19, #0x0
     4ec:	ccmp	w0, w19, #0x4, ge  // ge = tcont
     4f0:	b.eq	624 <goacc_attach_host_thread_to_device+0x174>  // b.none
     4f4:	ldr	x21, [x23]
     4f8:	cbz	x21, 570 <goacc_attach_host_thread_to_device+0xc0>
     4fc:	ldr	x0, [x21, #48]
     500:	blr	x0
     504:	mov	w2, w0
     508:	cmp	w19, #0x0
     50c:	csel	w0, w19, wzr, ge  // ge = tcont
     510:	cmp	w2, w0
     514:	b.le	638 <goacc_attach_host_thread_to_device+0x188>
     518:	mov	w20, #0x130                 	// #304
     51c:	stp	xzr, xzr, [x23, #16]
     520:	mov	w0, w19
     524:	smaddl	x20, w19, w20, x21
     528:	ldr	x1, [x20, #256]
     52c:	stp	x21, x20, [x23]
     530:	blr	x1
     534:	ldp	x21, x22, [sp, #32]
     538:	ldr	x1, [x20, #248]
     53c:	ldp	x19, x20, [sp, #16]
     540:	str	x0, [x23, #40]
     544:	ldr	x23, [sp, #48]
     548:	mov	x16, x1
     54c:	ldp	x29, x30, [sp], #64
     550:	mov	w0, #0xfffffffe            	// #-2
     554:	br	x16
     558:	adrp	x0, 0 <goacc_device_num>
     55c:	cmp	w19, #0x0
     560:	ldr	x21, [x23]
     564:	ldr	w0, [x0]
     568:	csel	w19, w0, w19, lt  // lt = tstop
     56c:	cbnz	x21, 4fc <goacc_attach_host_thread_to_device+0x4c>
     570:	adrp	x20, 0 <name_of_acc_device_t>
     574:	add	x20, x20, #0x0
     578:	ldr	x21, [x20, #80]
     57c:	cbz	x21, 644 <goacc_attach_host_thread_to_device+0x194>
     580:	ldr	x0, [x21, #48]
     584:	blr	x0
     588:	mov	w2, w0
     58c:	cmp	w19, #0x0
     590:	csel	w0, w19, wzr, ge  // ge = tcont
     594:	cmp	w0, w2
     598:	b.ge	638 <goacc_attach_host_thread_to_device+0x188>  // b.tcont
     59c:	cbnz	x23, 518 <goacc_attach_host_thread_to_device+0x68>
     5a0:	mov	x0, #0x30                  	// #48
     5a4:	bl	0 <gomp_malloc>
     5a8:	mov	x23, x0
     5ac:	mov	x1, x0
     5b0:	ldr	w0, [x20, #88]
     5b4:	add	x22, x22, #0x0, lsl #12
     5b8:	add	x22, x22, #0x0
     5bc:	str	x23, [x22]
     5c0:	bl	0 <pthread_setspecific>
     5c4:	add	x0, x20, #0x40
     5c8:	mov	w2, #0x1                   	// #1
     5cc:	ldaxr	w1, [x0]
     5d0:	cbnz	w1, 5dc <goacc_attach_host_thread_to_device+0x12c>
     5d4:	stxr	w3, w2, [x0]
     5d8:	cbnz	w3, 5cc <goacc_attach_host_thread_to_device+0x11c>
     5dc:	cmp	w1, #0x0
     5e0:	b.ne	668 <goacc_attach_host_thread_to_device+0x1b8>  // b.any
     5e4:	add	x20, x20, #0x40
     5e8:	ldr	x0, [x20, #8]
     5ec:	str	x23, [x20, #8]
     5f0:	str	x0, [x23, #32]
     5f4:	ldxr	w0, [x20]
     5f8:	stlxr	w1, wzr, [x20]
     5fc:	cbnz	w1, 5f4 <goacc_attach_host_thread_to_device+0x144>
     600:	tbz	w0, #31, 518 <goacc_attach_host_thread_to_device+0x68>
     604:	mov	x0, x20
     608:	bl	0 <gomp_mutex_unlock_slow>
     60c:	b	518 <goacc_attach_host_thread_to_device+0x68>
     610:	adrp	x0, 0 <goacc_device_num>
     614:	cmp	w19, #0x0
     618:	ldr	w0, [x0]
     61c:	csel	w19, w0, w19, lt  // lt = tstop
     620:	b	570 <goacc_attach_host_thread_to_device+0xc0>
     624:	ldp	x19, x20, [sp, #16]
     628:	ldp	x21, x22, [sp, #32]
     62c:	ldr	x23, [sp, #48]
     630:	ldp	x29, x30, [sp], #64
     634:	ret
     638:	ldr	w0, [x21, #16]
     63c:	mov	w1, w19
     640:	bl	80 <acc_dev_num_out_of_range>
     644:	adrp	x3, 0 <name_of_acc_device_t>
     648:	add	x3, x3, #0x0
     64c:	adrp	x1, 0 <name_of_acc_device_t>
     650:	adrp	x0, 0 <name_of_acc_device_t>
     654:	add	x3, x3, #0x38
     658:	add	x1, x1, #0x0
     65c:	add	x0, x0, #0x0
     660:	mov	w2, #0x19a                 	// #410
     664:	bl	0 <__assert_fail>
     668:	bl	0 <gomp_mutex_lock_slow>
     66c:	b	5e4 <goacc_attach_host_thread_to_device+0x134>

0000000000000670 <acc_init>:
     670:	stp	x29, x30, [sp, #-48]!
     674:	mov	x29, sp
     678:	stp	x19, x20, [sp, #16]
     67c:	adrp	x19, 0 <name_of_acc_device_t>
     680:	add	x19, x19, #0x0
     684:	stp	x21, x22, [sp, #32]
     688:	mov	w22, w0
     68c:	bl	0 <gomp_init_targets_once>
     690:	mov	w0, #0x1                   	// #1
     694:	ldaxr	w1, [x19]
     698:	cbnz	w1, 6a4 <acc_init+0x34>
     69c:	stxr	w2, w0, [x19]
     6a0:	cbnz	w2, 694 <acc_init+0x24>
     6a4:	cmp	w1, #0x0
     6a8:	b.ne	794 <acc_init+0x124>  // b.any
     6ac:	mov	w1, #0x1                   	// #1
     6b0:	mov	w0, w22
     6b4:	bl	d0 <resolve_device>
     6b8:	mov	x21, x0
     6bc:	ldr	x0, [x0, #48]
     6c0:	blr	x0
     6c4:	cmp	w0, #0x0
     6c8:	adrp	x1, 0 <goacc_device_num>
     6cc:	b.le	784 <acc_init+0x114>
     6d0:	ldr	w20, [x1]
     6d4:	cmp	w0, w20
     6d8:	b.le	784 <acc_init+0x114>
     6dc:	mov	w1, #0x130                 	// #304
     6e0:	mov	w0, #0x1                   	// #1
     6e4:	smaddl	x20, w20, w1, x21
     6e8:	add	x22, x20, #0xa8
     6ec:	ldaxr	w1, [x22]
     6f0:	cbnz	w1, 6fc <acc_init+0x8c>
     6f4:	stxr	w2, w0, [x22]
     6f8:	cbnz	w2, 6ec <acc_init+0x7c>
     6fc:	cmp	w1, #0x0
     700:	b.ne	7a0 <acc_init+0x130>  // b.any
     704:	ldr	w0, [x20, #172]
     708:	cmp	w0, #0x1
     70c:	b.eq	768 <acc_init+0xf8>  // b.none
     710:	mov	x0, x20
     714:	bl	0 <gomp_init_device>
     718:	ldxr	w0, [x22]
     71c:	stlxr	w1, wzr, [x22]
     720:	cbnz	w1, 718 <acc_init+0xa8>
     724:	tbnz	w0, #31, 750 <acc_init+0xe0>
     728:	str	x21, [x19, #80]
     72c:	ldxr	w0, [x19]
     730:	stlxr	w1, wzr, [x19]
     734:	cbnz	w1, 72c <acc_init+0xbc>
     738:	tbnz	w0, #31, 75c <acc_init+0xec>
     73c:	ldp	x19, x20, [sp, #16]
     740:	mov	w0, #0xffffffff            	// #-1
     744:	ldp	x21, x22, [sp, #32]
     748:	ldp	x29, x30, [sp], #48
     74c:	b	4b0 <goacc_attach_host_thread_to_device>
     750:	mov	x0, x22
     754:	bl	0 <gomp_mutex_unlock_slow>
     758:	b	728 <acc_init+0xb8>
     75c:	mov	x0, x19
     760:	bl	0 <gomp_mutex_unlock_slow>
     764:	b	73c <acc_init+0xcc>
     768:	ldxr	w0, [x22]
     76c:	stlxr	w1, wzr, [x22]
     770:	cbnz	w1, 768 <acc_init+0xf8>
     774:	tbnz	w0, #31, 7ac <acc_init+0x13c>
     778:	adrp	x0, 0 <name_of_acc_device_t>
     77c:	add	x0, x0, #0x0
     780:	bl	0 <gomp_fatal>
     784:	ldr	w1, [x1]
     788:	mov	w2, w0
     78c:	mov	w0, w22
     790:	bl	80 <acc_dev_num_out_of_range>
     794:	mov	x0, x19
     798:	bl	0 <gomp_mutex_lock_slow>
     79c:	b	6ac <acc_init+0x3c>
     7a0:	mov	x0, x22
     7a4:	bl	0 <gomp_mutex_lock_slow>
     7a8:	b	704 <acc_init+0x94>
     7ac:	mov	x0, x22
     7b0:	bl	0 <gomp_mutex_unlock_slow>
     7b4:	b	778 <acc_init+0x108>

00000000000007b8 <acc_shutdown>:
     7b8:	stp	x29, x30, [sp, #-80]!
     7bc:	mov	x29, sp
     7c0:	stp	x19, x20, [sp, #16]
     7c4:	mov	w19, w0
     7c8:	stp	x21, x22, [sp, #32]
     7cc:	adrp	x21, 0 <name_of_acc_device_t>
     7d0:	add	x21, x21, #0x0
     7d4:	stp	x23, x24, [sp, #48]
     7d8:	str	x25, [sp, #64]
     7dc:	bl	0 <gomp_init_targets_once>
     7e0:	mov	w0, #0x1                   	// #1
     7e4:	ldaxr	w1, [x21]
     7e8:	cbnz	w1, 7f4 <acc_shutdown+0x3c>
     7ec:	stxr	w2, w0, [x21]
     7f0:	cbnz	w2, 7e4 <acc_shutdown+0x2c>
     7f4:	cmp	w1, #0x0
     7f8:	b.ne	aac <acc_shutdown+0x2f4>  // b.any
     7fc:	mov	w1, #0x1                   	// #1
     800:	mov	w0, w19
     804:	bl	d0 <resolve_device>
     808:	mov	x20, x0
     80c:	ldr	x0, [x0, #48]
     810:	blr	x0
     814:	mov	w22, w0
     818:	cmp	w0, #0x0
     81c:	b.le	878 <acc_shutdown+0xc0>
     820:	sub	w23, w0, #0x1
     824:	add	x0, x20, #0x1d8
     828:	mov	w1, #0x130                 	// #304
     82c:	add	x19, x20, #0xa8
     830:	mov	w25, #0x1                   	// #1
     834:	umaddl	x23, w23, w1, x0
     838:	sub	x24, x19, #0xa8
     83c:	ldaxr	w1, [x19]
     840:	cbnz	w1, 84c <acc_shutdown+0x94>
     844:	stxr	w0, w25, [x19]
     848:	cbnz	w0, 83c <acc_shutdown+0x84>
     84c:	cmp	w1, #0x0
     850:	b.ne	a90 <acc_shutdown+0x2d8>  // b.any
     854:	mov	x0, x24
     858:	bl	0 <gomp_unload_device>
     85c:	ldxr	w0, [x19]
     860:	stlxr	w1, wzr, [x19]
     864:	cbnz	w1, 85c <acc_shutdown+0xa4>
     868:	tbnz	w0, #31, a00 <acc_shutdown+0x248>
     86c:	add	x19, x19, #0x130
     870:	cmp	x23, x19
     874:	b.ne	838 <acc_shutdown+0x80>  // b.any
     878:	add	x0, x21, #0x40
     87c:	mov	w2, #0x1                   	// #1
     880:	ldaxr	w1, [x0]
     884:	cbnz	w1, 890 <acc_shutdown+0xd8>
     888:	stxr	w3, w2, [x0]
     88c:	cbnz	w3, 880 <acc_shutdown+0xc8>
     890:	cmp	w1, #0x0
     894:	b.ne	ab8 <acc_shutdown+0x300>  // b.any
     898:	ldr	x19, [x21, #72]
     89c:	cbz	x19, 920 <acc_shutdown+0x168>
     8a0:	mov	w23, #0x1                   	// #1
     8a4:	nop
     8a8:	ldr	x0, [x19, #40]
     8ac:	cbz	x0, 8b8 <acc_shutdown+0x100>
     8b0:	ldr	x1, [x20, #264]
     8b4:	blr	x1
     8b8:	ldr	x0, [x19, #24]
     8bc:	str	xzr, [x19, #40]
     8c0:	cbnz	x0, a3c <acc_shutdown+0x284>
     8c4:	ldr	x0, [x19, #16]
     8c8:	cbnz	x0, a5c <acc_shutdown+0x2a4>
     8cc:	ldr	x0, [x19, #8]
     8d0:	cbz	x0, 918 <acc_shutdown+0x160>
     8d4:	add	x0, x0, #0xa8
     8d8:	ldaxr	w1, [x0]
     8dc:	cbnz	w1, 8e8 <acc_shutdown+0x130>
     8e0:	stxr	w2, w23, [x0]
     8e4:	cbnz	w2, 8d8 <acc_shutdown+0x120>
     8e8:	cmp	w1, #0x0
     8ec:	b.ne	a7c <acc_shutdown+0x2c4>  // b.any
     8f0:	ldr	x0, [x19, #8]
     8f4:	add	x0, x0, #0xa0
     8f8:	bl	0 <gomp_free_memmap>
     8fc:	ldr	x0, [x19, #8]
     900:	add	x0, x0, #0xa8
     904:	ldxr	w1, [x0]
     908:	stlxr	w2, wzr, [x0]
     90c:	cbnz	w2, 904 <acc_shutdown+0x14c>
     910:	tbnz	w1, #31, 9f8 <acc_shutdown+0x240>
     914:	stp	xzr, xzr, [x19]
     918:	ldr	x19, [x19, #32]
     91c:	cbnz	x19, 8a8 <acc_shutdown+0xf0>
     920:	add	x0, x21, #0x40
     924:	ldxr	w1, [x0]
     928:	stlxr	w2, wzr, [x0]
     92c:	cbnz	w2, 924 <acc_shutdown+0x16c>
     930:	tbnz	w1, #31, a34 <acc_shutdown+0x27c>
     934:	cmp	w22, #0x0
     938:	b.le	a0c <acc_shutdown+0x254>
     93c:	add	x19, x20, #0xa8
     940:	mov	w24, #0x0                   	// #0
     944:	mov	w20, #0x1                   	// #1
     948:	mov	w23, #0x0                   	// #0
     94c:	mov	w25, w20
     950:	b	964 <acc_shutdown+0x1ac>
     954:	add	w23, w23, #0x1
     958:	add	x19, x19, #0x130
     95c:	cmp	w22, w23
     960:	b.le	9c8 <acc_shutdown+0x210>
     964:	ldaxr	w1, [x19]
     968:	cbnz	w1, 974 <acc_shutdown+0x1bc>
     96c:	stxr	w0, w25, [x19]
     970:	cbnz	w0, 964 <acc_shutdown+0x1ac>
     974:	cmp	w1, #0x0
     978:	b.ne	a84 <acc_shutdown+0x2cc>  // b.any
     97c:	ldr	w1, [x19, #4]
     980:	cmp	w1, #0x1
     984:	b.ne	9a0 <acc_shutdown+0x1e8>  // b.any
     988:	ldur	w0, [x19, #-156]
     98c:	mov	w24, w1
     990:	ldur	x1, [x19, #-104]
     994:	blr	x1
     998:	and	w20, w20, w0
     99c:	str	wzr, [x19, #4]
     9a0:	ldxr	w0, [x19]
     9a4:	stlxr	w1, wzr, [x19]
     9a8:	cbnz	w1, 9a0 <acc_shutdown+0x1e8>
     9ac:	tbz	w0, #31, 954 <acc_shutdown+0x19c>
     9b0:	mov	x0, x19
     9b4:	add	w23, w23, #0x1
     9b8:	bl	0 <gomp_mutex_unlock_slow>
     9bc:	add	x19, x19, #0x130
     9c0:	cmp	w22, w23
     9c4:	b.gt	964 <acc_shutdown+0x1ac>
     9c8:	cbz	w20, ac0 <acc_shutdown+0x308>
     9cc:	cbz	w24, a0c <acc_shutdown+0x254>
     9d0:	ldxr	w0, [x21]
     9d4:	stlxr	w1, wzr, [x21]
     9d8:	cbnz	w1, 9d0 <acc_shutdown+0x218>
     9dc:	tbnz	w0, #31, a18 <acc_shutdown+0x260>
     9e0:	ldp	x19, x20, [sp, #16]
     9e4:	ldp	x21, x22, [sp, #32]
     9e8:	ldp	x23, x24, [sp, #48]
     9ec:	ldr	x25, [sp, #64]
     9f0:	ldp	x29, x30, [sp], #80
     9f4:	ret
     9f8:	bl	0 <gomp_mutex_unlock_slow>
     9fc:	b	914 <acc_shutdown+0x15c>
     a00:	mov	x0, x19
     a04:	bl	0 <gomp_mutex_unlock_slow>
     a08:	b	86c <acc_shutdown+0xb4>
     a0c:	adrp	x0, 0 <name_of_acc_device_t>
     a10:	add	x0, x0, #0x0
     a14:	bl	0 <gomp_fatal>
     a18:	mov	x0, x21
     a1c:	ldp	x19, x20, [sp, #16]
     a20:	ldp	x21, x22, [sp, #32]
     a24:	ldp	x23, x24, [sp, #48]
     a28:	ldr	x25, [sp, #64]
     a2c:	ldp	x29, x30, [sp], #80
     a30:	b	0 <gomp_mutex_unlock_slow>
     a34:	bl	0 <gomp_mutex_unlock_slow>
     a38:	b	934 <acc_shutdown+0x17c>
     a3c:	add	x0, x21, #0x40
     a40:	ldxr	w1, [x0]
     a44:	stlxr	w2, wzr, [x0]
     a48:	cbnz	w2, a40 <acc_shutdown+0x288>
     a4c:	tbnz	w1, #31, a9c <acc_shutdown+0x2e4>
     a50:	adrp	x0, 0 <name_of_acc_device_t>
     a54:	add	x0, x0, #0x0
     a58:	bl	0 <gomp_fatal>
     a5c:	add	x0, x21, #0x40
     a60:	ldxr	w1, [x0]
     a64:	stlxr	w2, wzr, [x0]
     a68:	cbnz	w2, a60 <acc_shutdown+0x2a8>
     a6c:	tbnz	w1, #31, aa4 <acc_shutdown+0x2ec>
     a70:	adrp	x0, 0 <name_of_acc_device_t>
     a74:	add	x0, x0, #0x0
     a78:	bl	0 <gomp_fatal>
     a7c:	bl	0 <gomp_mutex_lock_slow>
     a80:	b	8f0 <acc_shutdown+0x138>
     a84:	mov	x0, x19
     a88:	bl	0 <gomp_mutex_lock_slow>
     a8c:	b	97c <acc_shutdown+0x1c4>
     a90:	mov	x0, x19
     a94:	bl	0 <gomp_mutex_lock_slow>
     a98:	b	854 <acc_shutdown+0x9c>
     a9c:	bl	0 <gomp_mutex_unlock_slow>
     aa0:	b	a50 <acc_shutdown+0x298>
     aa4:	bl	0 <gomp_mutex_unlock_slow>
     aa8:	b	a70 <acc_shutdown+0x2b8>
     aac:	mov	x0, x21
     ab0:	bl	0 <gomp_mutex_lock_slow>
     ab4:	b	7fc <acc_shutdown+0x44>
     ab8:	bl	0 <gomp_mutex_lock_slow>
     abc:	b	898 <acc_shutdown+0xe0>
     ac0:	adrp	x0, 0 <name_of_acc_device_t>
     ac4:	add	x0, x0, #0x0
     ac8:	bl	0 <gomp_fatal>
     acc:	nop

0000000000000ad0 <acc_get_num_devices>:
     ad0:	cbnz	w0, adc <acc_get_num_devices+0xc>
     ad4:	mov	w0, #0x0                   	// #0
     ad8:	ret
     adc:	stp	x29, x30, [sp, #-32]!
     ae0:	mov	x29, sp
     ae4:	stp	x19, x20, [sp, #16]
     ae8:	mov	w19, w0
     aec:	adrp	x20, 0 <name_of_acc_device_t>
     af0:	bl	0 <gomp_init_targets_once>
     af4:	add	x20, x20, #0x0
     af8:	mov	w0, #0x1                   	// #1
     afc:	ldaxr	w1, [x20]
     b00:	cbnz	w1, b0c <acc_get_num_devices+0x3c>
     b04:	stxr	w2, w0, [x20]
     b08:	cbnz	w2, afc <acc_get_num_devices+0x2c>
     b0c:	cmp	w1, #0x0
     b10:	b.ne	b70 <acc_get_num_devices+0xa0>  // b.any
     b14:	mov	w0, w19
     b18:	mov	w1, #0x0                   	// #0
     b1c:	bl	d0 <resolve_device>
     b20:	mov	x19, x0
     b24:	ldxr	w0, [x20]
     b28:	stlxr	w1, wzr, [x20]
     b2c:	cbnz	w1, b24 <acc_get_num_devices+0x54>
     b30:	tbnz	w0, #31, b64 <acc_get_num_devices+0x94>
     b34:	cbz	x19, b54 <acc_get_num_devices+0x84>
     b38:	ldr	x0, [x19, #48]
     b3c:	blr	x0
     b40:	cmp	w0, #0x0
     b44:	csel	w0, w0, wzr, ge  // ge = tcont
     b48:	ldp	x19, x20, [sp, #16]
     b4c:	ldp	x29, x30, [sp], #32
     b50:	ret
     b54:	mov	w0, #0x0                   	// #0
     b58:	ldp	x19, x20, [sp, #16]
     b5c:	ldp	x29, x30, [sp], #32
     b60:	ret
     b64:	mov	x0, x20
     b68:	bl	0 <gomp_mutex_unlock_slow>
     b6c:	b	b34 <acc_get_num_devices+0x64>
     b70:	mov	x0, x20
     b74:	bl	0 <gomp_mutex_lock_slow>
     b78:	b	b14 <acc_get_num_devices+0x44>
     b7c:	nop

0000000000000b80 <acc_set_device_type>:
     b80:	mrs	x1, tpidr_el0
     b84:	stp	x29, x30, [sp, #-64]!
     b88:	add	x1, x1, #0x0, lsl #12
     b8c:	add	x1, x1, #0x0
     b90:	mov	x29, sp
     b94:	stp	x19, x20, [sp, #16]
     b98:	mov	w20, w0
     b9c:	adrp	x19, 0 <name_of_acc_device_t>
     ba0:	add	x19, x19, #0x0
     ba4:	stp	x21, x22, [sp, #32]
     ba8:	str	x23, [sp, #48]
     bac:	ldr	x23, [x1]
     bb0:	bl	0 <gomp_init_targets_once>
     bb4:	mov	w0, #0x1                   	// #1
     bb8:	ldaxr	w1, [x19]
     bbc:	cbnz	w1, bc8 <acc_set_device_type+0x48>
     bc0:	stxr	w2, w0, [x19]
     bc4:	cbnz	w2, bb8 <acc_set_device_type+0x38>
     bc8:	cmp	w1, #0x0
     bcc:	b.ne	ca0 <acc_set_device_type+0x120>  // b.any
     bd0:	mov	w0, w20
     bd4:	mov	w1, #0x1                   	// #1
     bd8:	bl	d0 <resolve_device>
     bdc:	mov	x20, x0
     be0:	adrp	x2, 0 <goacc_device_num>
     be4:	mov	w1, #0x130                 	// #304
     be8:	mov	w0, #0x1                   	// #1
     bec:	str	x20, [x19, #80]
     bf0:	ldr	w21, [x2]
     bf4:	smaddl	x21, w21, w1, x20
     bf8:	add	x22, x21, #0xa8
     bfc:	ldaxr	w1, [x22]
     c00:	cbnz	w1, c0c <acc_set_device_type+0x8c>
     c04:	stxr	w2, w0, [x22]
     c08:	cbnz	w2, bfc <acc_set_device_type+0x7c>
     c0c:	cmp	w1, #0x0
     c10:	b.ne	c94 <acc_set_device_type+0x114>  // b.any
     c14:	ldr	w0, [x21, #172]
     c18:	cbz	w0, c70 <acc_set_device_type+0xf0>
     c1c:	ldxr	w0, [x22]
     c20:	stlxr	w1, wzr, [x22]
     c24:	cbnz	w1, c1c <acc_set_device_type+0x9c>
     c28:	tbnz	w0, #31, c88 <acc_set_device_type+0x108>
     c2c:	ldxr	w0, [x19]
     c30:	stlxr	w1, wzr, [x19]
     c34:	cbnz	w1, c2c <acc_set_device_type+0xac>
     c38:	tbnz	w0, #31, c7c <acc_set_device_type+0xfc>
     c3c:	cbz	x23, c58 <acc_set_device_type+0xd8>
     c40:	ldr	x0, [x23]
     c44:	cmp	x0, x20
     c48:	b.eq	c58 <acc_set_device_type+0xd8>  // b.none
     c4c:	ldr	x0, [x23, #24]
     c50:	stp	xzr, xzr, [x23]
     c54:	cbnz	x0, cac <acc_set_device_type+0x12c>
     c58:	ldp	x19, x20, [sp, #16]
     c5c:	mov	w0, #0xffffffff            	// #-1
     c60:	ldp	x21, x22, [sp, #32]
     c64:	ldr	x23, [sp, #48]
     c68:	ldp	x29, x30, [sp], #64
     c6c:	b	4b0 <goacc_attach_host_thread_to_device>
     c70:	mov	x0, x21
     c74:	bl	0 <gomp_init_device>
     c78:	b	c1c <acc_set_device_type+0x9c>
     c7c:	mov	x0, x19
     c80:	bl	0 <gomp_mutex_unlock_slow>
     c84:	b	c3c <acc_set_device_type+0xbc>
     c88:	mov	x0, x22
     c8c:	bl	0 <gomp_mutex_unlock_slow>
     c90:	b	c2c <acc_set_device_type+0xac>
     c94:	mov	x0, x22
     c98:	bl	0 <gomp_mutex_lock_slow>
     c9c:	b	c14 <acc_set_device_type+0x94>
     ca0:	mov	x0, x19
     ca4:	bl	0 <gomp_mutex_lock_slow>
     ca8:	b	bd0 <acc_set_device_type+0x50>
     cac:	adrp	x0, 0 <name_of_acc_device_t>
     cb0:	add	x0, x0, #0x0
     cb4:	bl	0 <gomp_fatal>

0000000000000cb8 <acc_get_device_type>:
     cb8:	mrs	x0, tpidr_el0
     cbc:	stp	x29, x30, [sp, #-32]!
     cc0:	add	x0, x0, #0x0, lsl #12
     cc4:	add	x0, x0, #0x0
     cc8:	mov	x29, sp
     ccc:	ldr	x0, [x0]
     cd0:	cbz	x0, cf4 <acc_get_device_type+0x3c>
     cd4:	ldr	x0, [x0]
     cd8:	cbz	x0, cf4 <acc_get_device_type+0x3c>
     cdc:	ldr	w0, [x0, #16]
     ce0:	cmp	w0, #0x1
     ce4:	ccmp	w0, #0x4, #0x4, ne  // ne = any
     ce8:	b.eq	d58 <acc_get_device_type+0xa0>  // b.none
     cec:	ldp	x29, x30, [sp], #32
     cf0:	ret
     cf4:	stp	x19, x20, [sp, #16]
     cf8:	adrp	x19, 0 <name_of_acc_device_t>
     cfc:	bl	0 <gomp_init_targets_once>
     d00:	add	x19, x19, #0x0
     d04:	mov	w0, #0x1                   	// #1
     d08:	ldaxr	w1, [x19]
     d0c:	cbnz	w1, d18 <acc_get_device_type+0x60>
     d10:	stxr	w2, w0, [x19]
     d14:	cbnz	w2, d08 <acc_get_device_type+0x50>
     d18:	cmp	w1, #0x0
     d1c:	b.ne	d80 <acc_get_device_type+0xc8>  // b.any
     d20:	mov	w1, #0x1                   	// #1
     d24:	mov	w0, #0x1                   	// #1
     d28:	bl	d0 <resolve_device>
     d2c:	mov	x20, x0
     d30:	ldxr	w0, [x19]
     d34:	stlxr	w1, wzr, [x19]
     d38:	cbnz	w1, d30 <acc_get_device_type+0x78>
     d3c:	tbnz	w0, #31, d4c <acc_get_device_type+0x94>
     d40:	ldr	w0, [x20, #16]
     d44:	ldp	x19, x20, [sp, #16]
     d48:	b	ce0 <acc_get_device_type+0x28>
     d4c:	mov	x0, x19
     d50:	bl	0 <gomp_mutex_unlock_slow>
     d54:	b	d40 <acc_get_device_type+0x88>
     d58:	adrp	x3, 0 <name_of_acc_device_t>
     d5c:	add	x3, x3, #0x0
     d60:	adrp	x1, 0 <name_of_acc_device_t>
     d64:	adrp	x0, 0 <name_of_acc_device_t>
     d68:	add	x3, x3, #0x60
     d6c:	add	x1, x1, #0x0
     d70:	add	x0, x0, #0x0
     d74:	mov	w2, #0x226                 	// #550
     d78:	stp	x19, x20, [sp, #16]
     d7c:	bl	0 <__assert_fail>
     d80:	mov	x0, x19
     d84:	bl	0 <gomp_mutex_lock_slow>
     d88:	b	d20 <acc_get_device_type+0x68>
     d8c:	nop

0000000000000d90 <acc_get_device_num>:
     d90:	stp	x29, x30, [sp, #-48]!
     d94:	mrs	x1, tpidr_el0
     d98:	add	x1, x1, #0x0, lsl #12
     d9c:	add	x1, x1, #0x0
     da0:	mov	x29, sp
     da4:	stp	x19, x20, [sp, #16]
     da8:	cmp	w0, #0x5
     dac:	mov	w20, w0
     db0:	str	x21, [sp, #32]
     db4:	ldr	x21, [x1]
     db8:	b.gt	e54 <acc_get_device_num+0xc4>
     dbc:	adrp	x19, 0 <name_of_acc_device_t>
     dc0:	bl	0 <gomp_init_targets_once>
     dc4:	add	x19, x19, #0x0
     dc8:	mov	w0, #0x1                   	// #1
     dcc:	ldaxr	w1, [x19]
     dd0:	cbnz	w1, ddc <acc_get_device_num+0x4c>
     dd4:	stxr	w2, w0, [x19]
     dd8:	cbnz	w2, dcc <acc_get_device_num+0x3c>
     ddc:	cmp	w1, #0x0
     de0:	b.ne	e64 <acc_get_device_num+0xd4>  // b.any
     de4:	mov	w0, w20
     de8:	mov	w1, #0x1                   	// #1
     dec:	bl	d0 <resolve_device>
     df0:	mov	x20, x0
     df4:	ldxr	w0, [x19]
     df8:	stlxr	w1, wzr, [x19]
     dfc:	cbnz	w1, df4 <acc_get_device_num+0x64>
     e00:	tbnz	w0, #31, e48 <acc_get_device_num+0xb8>
     e04:	cbz	x21, e14 <acc_get_device_num+0x84>
     e08:	ldr	x0, [x21]
     e0c:	cmp	x0, x20
     e10:	b.eq	e2c <acc_get_device_num+0x9c>  // b.none
     e14:	adrp	x0, 0 <goacc_device_num>
     e18:	ldp	x19, x20, [sp, #16]
     e1c:	ldr	w0, [x0]
     e20:	ldr	x21, [sp, #32]
     e24:	ldp	x29, x30, [sp], #48
     e28:	ret
     e2c:	ldr	x0, [x21, #8]
     e30:	cbz	x0, e14 <acc_get_device_num+0x84>
     e34:	ldr	w0, [x0, #12]
     e38:	ldp	x19, x20, [sp, #16]
     e3c:	ldr	x21, [sp, #32]
     e40:	ldp	x29, x30, [sp], #48
     e44:	ret
     e48:	mov	x0, x19
     e4c:	bl	0 <gomp_mutex_unlock_slow>
     e50:	b	e04 <acc_get_device_num+0x74>
     e54:	mov	w1, w0
     e58:	adrp	x0, 0 <name_of_acc_device_t>
     e5c:	add	x0, x0, #0x0
     e60:	bl	0 <gomp_fatal>
     e64:	mov	x0, x19
     e68:	bl	0 <gomp_mutex_lock_slow>
     e6c:	b	de4 <acc_get_device_num+0x54>

0000000000000e70 <acc_set_device_num>:
     e70:	stp	x29, x30, [sp, #-48]!
     e74:	mov	x29, sp
     e78:	stp	x19, x20, [sp, #16]
     e7c:	mov	w19, w0
     e80:	stp	x21, x22, [sp, #32]
     e84:	mov	w21, w1
     e88:	bl	0 <gomp_init_targets_once>
     e8c:	adrp	x0, 0 <goacc_device_num>
     e90:	cmp	w19, #0x0
     e94:	ldr	w0, [x0]
     e98:	csel	w19, w0, w19, lt  // lt = tstop
     e9c:	cbz	w21, f40 <acc_set_device_num+0xd0>
     ea0:	adrp	x20, 0 <name_of_acc_device_t>
     ea4:	add	x20, x20, #0x0
     ea8:	mov	w0, #0x1                   	// #1
     eac:	ldaxr	w1, [x20]
     eb0:	cbnz	w1, ebc <acc_set_device_num+0x4c>
     eb4:	stxr	w2, w0, [x20]
     eb8:	cbnz	w2, eac <acc_set_device_num+0x3c>
     ebc:	cmp	w1, #0x0
     ec0:	b.ne	fa0 <acc_set_device_num+0x130>  // b.any
     ec4:	mov	w1, #0x1                   	// #1
     ec8:	mov	w0, w21
     ecc:	bl	d0 <resolve_device>
     ed0:	mov	x22, x0
     ed4:	ldr	x0, [x0, #48]
     ed8:	str	x22, [x20, #80]
     edc:	blr	x0
     ee0:	cmp	w19, #0x0
     ee4:	csel	w1, w19, wzr, ge  // ge = tcont
     ee8:	cmp	w0, w1
     eec:	b.le	f90 <acc_set_device_num+0x120>
     ef0:	mov	w0, #0x130                 	// #304
     ef4:	mov	w2, #0x1                   	// #1
     ef8:	smaddl	x22, w19, w0, x22
     efc:	add	x21, x22, #0xa8
     f00:	ldaxr	w1, [x21]
     f04:	cbnz	w1, f10 <acc_set_device_num+0xa0>
     f08:	stxr	w0, w2, [x21]
     f0c:	cbnz	w0, f00 <acc_set_device_num+0x90>
     f10:	cmp	w1, #0x0
     f14:	b.ne	f84 <acc_set_device_num+0x114>  // b.any
     f18:	ldr	w0, [x22, #172]
     f1c:	cbz	w0, f60 <acc_set_device_num+0xf0>
     f20:	ldxr	w0, [x21]
     f24:	stlxr	w1, wzr, [x21]
     f28:	cbnz	w1, f20 <acc_set_device_num+0xb0>
     f2c:	tbnz	w0, #31, f78 <acc_set_device_num+0x108>
     f30:	ldxr	w0, [x20]
     f34:	stlxr	w1, wzr, [x20]
     f38:	cbnz	w1, f30 <acc_set_device_num+0xc0>
     f3c:	tbnz	w0, #31, f6c <acc_set_device_num+0xfc>
     f40:	mov	w0, w19
     f44:	bl	4b0 <goacc_attach_host_thread_to_device>
     f48:	adrp	x0, 0 <goacc_device_num>
     f4c:	ldp	x21, x22, [sp, #32]
     f50:	str	w19, [x0]
     f54:	ldp	x19, x20, [sp, #16]
     f58:	ldp	x29, x30, [sp], #48
     f5c:	ret
     f60:	mov	x0, x22
     f64:	bl	0 <gomp_init_device>
     f68:	b	f20 <acc_set_device_num+0xb0>
     f6c:	mov	x0, x20
     f70:	bl	0 <gomp_mutex_unlock_slow>
     f74:	b	f40 <acc_set_device_num+0xd0>
     f78:	mov	x0, x21
     f7c:	bl	0 <gomp_mutex_unlock_slow>
     f80:	b	f30 <acc_set_device_num+0xc0>
     f84:	mov	x0, x21
     f88:	bl	0 <gomp_mutex_lock_slow>
     f8c:	b	f18 <acc_set_device_num+0xa8>
     f90:	mov	w2, w0
     f94:	mov	w1, w19
     f98:	mov	w0, w21
     f9c:	bl	80 <acc_dev_num_out_of_range>
     fa0:	mov	x0, x20
     fa4:	bl	0 <gomp_mutex_lock_slow>
     fa8:	b	ec4 <acc_set_device_num+0x54>
     fac:	nop

0000000000000fb0 <acc_on_device>:
     fb0:	tst	w0, #0xfffffffd
     fb4:	cset	w0, eq  // eq = none
     fb8:	ret
     fbc:	nop

0000000000000fc0 <goacc_runtime_initialize>:
     fc0:	stp	x29, x30, [sp, #-32]!
     fc4:	adrp	x2, 0 <name_of_acc_device_t>
     fc8:	adrp	x1, 0 <name_of_acc_device_t>
     fcc:	mov	x29, sp
     fd0:	str	x19, [sp, #16]
     fd4:	add	x19, x2, #0x0
     fd8:	add	x1, x1, #0x0
     fdc:	add	x0, x19, #0x58
     fe0:	str	wzr, [x2]
     fe4:	bl	0 <pthread_key_create>
     fe8:	str	wzr, [x19, #64]
     fec:	stp	xzr, xzr, [x19, #72]
     ff0:	ldr	x19, [sp, #16]
     ff4:	ldp	x29, x30, [sp], #32
     ff8:	b	0 <goacc_host_init>
     ffc:	nop

0000000000001000 <goacc_save_and_set_bind>:
    1000:	mrs	x1, tpidr_el0
    1004:	add	x1, x1, #0x0, lsl #12
    1008:	add	x1, x1, #0x0
    100c:	ldr	x2, [x1]
    1010:	ldr	x1, [x2, #16]
    1014:	cbnz	x1, 1038 <goacc_save_and_set_bind+0x38>
    1018:	adrp	x1, 0 <name_of_acc_device_t>
    101c:	add	x1, x1, #0x0
    1020:	add	x1, x1, #0x10
    1024:	ldr	x3, [x2, #8]
    1028:	str	x3, [x2, #16]
    102c:	ldr	x0, [x1, w0, sxtw #3]
    1030:	str	x0, [x2, #8]
    1034:	ret
    1038:	stp	x29, x30, [sp, #-16]!
    103c:	adrp	x3, 0 <name_of_acc_device_t>
    1040:	add	x3, x3, #0x0
    1044:	mov	x29, sp
    1048:	adrp	x1, 0 <name_of_acc_device_t>
    104c:	adrp	x0, 0 <name_of_acc_device_t>
    1050:	add	x3, x3, #0x78
    1054:	add	x1, x1, #0x0
    1058:	add	x0, x0, #0x0
    105c:	mov	w2, #0x29b                 	// #667
    1060:	bl	0 <__assert_fail>
    1064:	nop

0000000000001068 <goacc_restore_bind>:
    1068:	mrs	x0, tpidr_el0
    106c:	add	x0, x0, #0x0, lsl #12
    1070:	add	x0, x0, #0x0
    1074:	ldr	x0, [x0]
    1078:	ldr	x1, [x0, #16]
    107c:	stp	x1, xzr, [x0, #8]
    1080:	ret
    1084:	nop

0000000000001088 <goacc_lazy_initialize>:
    1088:	mrs	x0, tpidr_el0
    108c:	add	x0, x0, #0x0, lsl #12
    1090:	add	x0, x0, #0x0
    1094:	ldr	x0, [x0]
    1098:	cbz	x0, 10a8 <goacc_lazy_initialize+0x20>
    109c:	ldr	x0, [x0, #8]
    10a0:	cbz	x0, 10a8 <goacc_lazy_initialize+0x20>
    10a4:	ret
    10a8:	adrp	x0, 0 <name_of_acc_device_t>
    10ac:	ldr	x0, [x0]
    10b0:	cbz	x0, 10bc <goacc_lazy_initialize+0x34>
    10b4:	mov	w0, #0xffffffff            	// #-1
    10b8:	b	4b0 <goacc_attach_host_thread_to_device>
    10bc:	mov	w0, #0x1                   	// #1
    10c0:	b	670 <acc_init>

oacc-mem.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_mutex_unlock>:
       0:	mov	x1, x0
       4:	ldxr	w2, [x1]
       8:	stlxr	w3, wzr, [x1]
       c:	cbnz	w3, 4 <gomp_mutex_unlock+0x4>
      10:	tbnz	w2, #31, 18 <gomp_mutex_unlock+0x18>
      14:	ret
      18:	b	0 <gomp_mutex_unlock_slow>
      1c:	nop

0000000000000020 <acc_is_present.part.0>:
      20:	stp	x29, x30, [sp, #-128]!
      24:	mov	x29, sp
      28:	stp	x19, x20, [sp, #16]
      2c:	mov	x19, x0
      30:	mov	x20, x1
      34:	stp	x21, x22, [sp, #32]
      38:	bl	0 <goacc_lazy_initialize>
      3c:	adrp	x0, 0 <goacc_tls_data>
      40:	ldr	x0, [x0]
      44:	mrs	x1, tpidr_el0
      48:	ldr	x0, [x1, x0]
      4c:	ldr	x22, [x0, #8]
      50:	ldr	w0, [x22, #8]
      54:	tbnz	w0, #0, d8 <acc_is_present.part.0+0xb8>
      58:	add	x21, x22, #0xa8
      5c:	mov	w0, #0x1                   	// #1
      60:	str	x23, [sp, #48]
      64:	ldaxr	w1, [x21]
      68:	cbnz	w1, 74 <acc_is_present.part.0+0x54>
      6c:	stxr	w2, w0, [x21]
      70:	cbnz	w2, 64 <acc_is_present.part.0+0x44>
      74:	cmp	w1, #0x0
      78:	b.ne	110 <acc_is_present.part.0+0xf0>  // b.any
      7c:	add	x0, x22, #0xa0
      80:	add	x23, x19, x20
      84:	add	x1, sp, #0x48
      88:	mov	w22, #0x0                   	// #0
      8c:	stp	x19, x23, [sp, #72]
      90:	bl	0 <splay_tree_prefix_splay_tree_lookup>
      94:	cbz	x0, b0 <acc_is_present.part.0+0x90>
      98:	ldr	x1, [x0]
      9c:	cmp	x19, x1
      a0:	b.cc	b0 <acc_is_present.part.0+0x90>  // b.lo, b.ul, b.last
      a4:	ldr	x0, [x0, #8]
      a8:	cmp	x23, x0
      ac:	b.ls	f0 <acc_is_present.part.0+0xd0>  // b.plast
      b0:	ldxr	w0, [x21]
      b4:	stlxr	w1, wzr, [x21]
      b8:	cbnz	w1, b0 <acc_is_present.part.0+0x90>
      bc:	tbnz	w0, #31, 100 <acc_is_present.part.0+0xe0>
      c0:	ldr	x23, [sp, #48]
      c4:	mov	w0, w22
      c8:	ldp	x19, x20, [sp, #16]
      cc:	ldp	x21, x22, [sp, #32]
      d0:	ldp	x29, x30, [sp], #128
      d4:	ret
      d8:	mov	w22, #0x1                   	// #1
      dc:	mov	w0, w22
      e0:	ldp	x19, x20, [sp, #16]
      e4:	ldp	x21, x22, [sp, #32]
      e8:	ldp	x29, x30, [sp], #128
      ec:	ret
      f0:	sub	x1, x0, x1
      f4:	cmp	x20, x1
      f8:	cset	w22, ls  // ls = plast
      fc:	b	b0 <acc_is_present.part.0+0x90>
     100:	mov	x0, x21
     104:	bl	0 <gomp_mutex_unlock_slow>
     108:	ldr	x23, [sp, #48]
     10c:	b	c4 <acc_is_present.part.0+0xa4>
     110:	mov	x0, x21
     114:	bl	0 <gomp_mutex_lock_slow>
     118:	b	7c <acc_is_present.part.0+0x5c>
     11c:	nop

0000000000000120 <acc_malloc>:
     120:	cbz	x0, 174 <acc_malloc+0x54>
     124:	stp	x29, x30, [sp, #-32]!
     128:	mov	x29, sp
     12c:	str	x19, [sp, #16]
     130:	mov	x19, x0
     134:	bl	0 <goacc_lazy_initialize>
     138:	adrp	x0, 0 <goacc_tls_data>
     13c:	ldr	x0, [x0]
     140:	mrs	x1, tpidr_el0
     144:	ldr	x0, [x1, x0]
     148:	ldr	x2, [x0, #8]
     14c:	cbz	x2, 188 <acc_malloc+0x68>
     150:	ldr	w0, [x2, #8]
     154:	tbnz	w0, #0, 178 <acc_malloc+0x58>
     158:	mov	x1, x19
     15c:	ldr	w0, [x2, #12]
     160:	ldr	x19, [sp, #16]
     164:	ldp	x29, x30, [sp], #32
     168:	ldr	x2, [x2, #96]
     16c:	mov	x16, x2
     170:	br	x16
     174:	ret
     178:	mov	x0, x19
     17c:	ldr	x19, [sp, #16]
     180:	ldp	x29, x30, [sp], #32
     184:	b	0 <malloc>
     188:	adrp	x3, 0 <gomp_mutex_unlock>
     18c:	adrp	x1, 0 <gomp_mutex_unlock>
     190:	adrp	x0, 0 <gomp_mutex_unlock>
     194:	add	x3, x3, #0x0
     198:	add	x1, x1, #0x0
     19c:	add	x0, x0, #0x0
     1a0:	mov	w2, #0x6a                  	// #106
     1a4:	bl	0 <__assert_fail>

00000000000001a8 <acc_memcpy_to_device>:
     1a8:	adrp	x4, 0 <goacc_tls_data>
     1ac:	ldr	x4, [x4]
     1b0:	mrs	x5, tpidr_el0
     1b4:	stp	x29, x30, [sp, #-16]!
     1b8:	mov	x29, sp
     1bc:	ldr	x4, [x5, x4]
     1c0:	cbz	x4, 204 <acc_memcpy_to_device+0x5c>
     1c4:	ldr	x4, [x4, #8]
     1c8:	cbz	x4, 204 <acc_memcpy_to_device+0x5c>
     1cc:	ldr	w5, [x4, #8]
     1d0:	tbnz	w5, #0, 1fc <acc_memcpy_to_device+0x54>
     1d4:	mov	x3, x2
     1d8:	mov	x2, x1
     1dc:	mov	x1, x0
     1e0:	ldr	w0, [x4, #12]
     1e4:	ldr	x4, [x4, #120]
     1e8:	blr	x4
     1ec:	tst	w0, #0xff
     1f0:	b.eq	228 <acc_memcpy_to_device+0x80>  // b.none
     1f4:	ldp	x29, x30, [sp], #16
     1f8:	ret
     1fc:	ldp	x29, x30, [sp], #16
     200:	b	0 <memmove>
     204:	adrp	x3, 0 <gomp_mutex_unlock>
     208:	add	x3, x3, #0x0
     20c:	adrp	x1, 0 <gomp_mutex_unlock>
     210:	adrp	x0, 0 <gomp_mutex_unlock>
     214:	add	x3, x3, #0x10
     218:	add	x1, x1, #0x0
     21c:	add	x0, x0, #0x0
     220:	mov	w2, #0xa4                  	// #164
     224:	bl	0 <__assert_fail>
     228:	adrp	x1, 0 <gomp_mutex_unlock>
     22c:	add	x1, x1, #0x0
     230:	adrp	x0, 0 <gomp_mutex_unlock>
     234:	add	x1, x1, #0x28
     238:	add	x0, x0, #0x0
     23c:	bl	0 <gomp_fatal>

0000000000000240 <acc_memcpy_to_device_async>:
     240:	adrp	x5, 0 <goacc_tls_data>
     244:	ldr	x5, [x5]
     248:	mrs	x6, tpidr_el0
     24c:	stp	x29, x30, [sp, #-48]!
     250:	mov	x29, sp
     254:	stp	x19, x20, [sp, #16]
     258:	ldr	x19, [x6, x5]
     25c:	cbz	x19, 308 <acc_memcpy_to_device_async+0xc8>
     260:	ldr	x5, [x19, #8]
     264:	cbz	x5, 308 <acc_memcpy_to_device_async+0xc8>
     268:	mov	w4, w3
     26c:	ldr	w3, [x5, #8]
     270:	tbnz	w3, #0, 2fc <acc_memcpy_to_device_async+0xbc>
     274:	stp	x21, x22, [sp, #32]
     278:	mov	x20, x0
     27c:	mov	x21, x1
     280:	mov	x22, x2
     284:	cmn	w4, #0x1
     288:	b.lt	2dc <acc_memcpy_to_device_async+0x9c>  // b.tstop
     28c:	ldr	x1, [x5, #248]
     290:	mov	w0, w4
     294:	blr	x1
     298:	ldr	x4, [x19, #8]
     29c:	mov	x1, x20
     2a0:	mov	x3, x22
     2a4:	mov	x2, x21
     2a8:	ldr	w0, [x4, #12]
     2ac:	ldr	x4, [x4, #120]
     2b0:	blr	x4
     2b4:	ldr	x1, [x19, #8]
     2b8:	and	w19, w0, #0xff
     2bc:	mov	w0, #0xfffffffe            	// #-2
     2c0:	ldr	x1, [x1, #248]
     2c4:	blr	x1
     2c8:	cbz	w19, 330 <acc_memcpy_to_device_async+0xf0>
     2cc:	ldp	x19, x20, [sp, #16]
     2d0:	ldp	x21, x22, [sp, #32]
     2d4:	ldp	x29, x30, [sp], #48
     2d8:	ret
     2dc:	mov	x3, x2
     2e0:	mov	x2, x1
     2e4:	mov	x1, x0
     2e8:	ldr	w0, [x5, #12]
     2ec:	ldr	x4, [x5, #120]
     2f0:	blr	x4
     2f4:	and	w19, w0, #0xff
     2f8:	b	2c8 <acc_memcpy_to_device_async+0x88>
     2fc:	ldp	x19, x20, [sp, #16]
     300:	ldp	x29, x30, [sp], #48
     304:	b	0 <memmove>
     308:	adrp	x3, 0 <gomp_mutex_unlock>
     30c:	add	x3, x3, #0x0
     310:	adrp	x1, 0 <gomp_mutex_unlock>
     314:	adrp	x0, 0 <gomp_mutex_unlock>
     318:	add	x3, x3, #0x10
     31c:	add	x1, x1, #0x0
     320:	add	x0, x0, #0x0
     324:	mov	w2, #0xa4                  	// #164
     328:	stp	x21, x22, [sp, #32]
     32c:	bl	0 <__assert_fail>
     330:	adrp	x1, 0 <gomp_mutex_unlock>
     334:	add	x1, x1, #0x0
     338:	adrp	x0, 0 <gomp_mutex_unlock>
     33c:	add	x1, x1, #0x40
     340:	add	x0, x0, #0x0
     344:	bl	0 <gomp_fatal>

0000000000000348 <acc_memcpy_from_device>:
     348:	adrp	x4, 0 <goacc_tls_data>
     34c:	ldr	x4, [x4]
     350:	mrs	x5, tpidr_el0
     354:	stp	x29, x30, [sp, #-16]!
     358:	mov	x29, sp
     35c:	ldr	x4, [x5, x4]
     360:	cbz	x4, 3a4 <acc_memcpy_from_device+0x5c>
     364:	ldr	x4, [x4, #8]
     368:	cbz	x4, 3a4 <acc_memcpy_from_device+0x5c>
     36c:	ldr	w5, [x4, #8]
     370:	tbnz	w5, #0, 39c <acc_memcpy_from_device+0x54>
     374:	mov	x3, x2
     378:	mov	x2, x1
     37c:	mov	x1, x0
     380:	ldr	w0, [x4, #12]
     384:	ldr	x4, [x4, #112]
     388:	blr	x4
     38c:	tst	w0, #0xff
     390:	b.eq	3c8 <acc_memcpy_from_device+0x80>  // b.none
     394:	ldp	x29, x30, [sp], #16
     398:	ret
     39c:	ldp	x29, x30, [sp], #16
     3a0:	b	0 <memmove>
     3a4:	adrp	x3, 0 <gomp_mutex_unlock>
     3a8:	add	x3, x3, #0x0
     3ac:	adrp	x1, 0 <gomp_mutex_unlock>
     3b0:	adrp	x0, 0 <gomp_mutex_unlock>
     3b4:	add	x3, x3, #0x10
     3b8:	add	x1, x1, #0x0
     3bc:	add	x0, x0, #0x0
     3c0:	mov	w2, #0xa4                  	// #164
     3c4:	bl	0 <__assert_fail>
     3c8:	adrp	x1, 0 <gomp_mutex_unlock>
     3cc:	add	x1, x1, #0x0
     3d0:	adrp	x0, 0 <gomp_mutex_unlock>
     3d4:	add	x1, x1, #0x60
     3d8:	add	x0, x0, #0x0
     3dc:	bl	0 <gomp_fatal>

00000000000003e0 <acc_memcpy_from_device_async>:
     3e0:	adrp	x5, 0 <goacc_tls_data>
     3e4:	ldr	x5, [x5]
     3e8:	mrs	x6, tpidr_el0
     3ec:	stp	x29, x30, [sp, #-48]!
     3f0:	mov	x29, sp
     3f4:	stp	x19, x20, [sp, #16]
     3f8:	ldr	x19, [x6, x5]
     3fc:	cbz	x19, 4a8 <acc_memcpy_from_device_async+0xc8>
     400:	ldr	x5, [x19, #8]
     404:	cbz	x5, 4a8 <acc_memcpy_from_device_async+0xc8>
     408:	mov	w4, w3
     40c:	ldr	w3, [x5, #8]
     410:	tbnz	w3, #0, 49c <acc_memcpy_from_device_async+0xbc>
     414:	stp	x21, x22, [sp, #32]
     418:	mov	x20, x0
     41c:	mov	x21, x1
     420:	mov	x22, x2
     424:	cmn	w4, #0x1
     428:	b.lt	47c <acc_memcpy_from_device_async+0x9c>  // b.tstop
     42c:	ldr	x1, [x5, #248]
     430:	mov	w0, w4
     434:	blr	x1
     438:	ldr	x4, [x19, #8]
     43c:	mov	x1, x20
     440:	mov	x3, x22
     444:	mov	x2, x21
     448:	ldr	w0, [x4, #12]
     44c:	ldr	x4, [x4, #112]
     450:	blr	x4
     454:	ldr	x1, [x19, #8]
     458:	and	w19, w0, #0xff
     45c:	mov	w0, #0xfffffffe            	// #-2
     460:	ldr	x1, [x1, #248]
     464:	blr	x1
     468:	cbz	w19, 4d0 <acc_memcpy_from_device_async+0xf0>
     46c:	ldp	x19, x20, [sp, #16]
     470:	ldp	x21, x22, [sp, #32]
     474:	ldp	x29, x30, [sp], #48
     478:	ret
     47c:	mov	x3, x2
     480:	mov	x2, x1
     484:	mov	x1, x0
     488:	ldr	w0, [x5, #12]
     48c:	ldr	x4, [x5, #112]
     490:	blr	x4
     494:	and	w19, w0, #0xff
     498:	b	468 <acc_memcpy_from_device_async+0x88>
     49c:	ldp	x19, x20, [sp, #16]
     4a0:	ldp	x29, x30, [sp], #48
     4a4:	b	0 <memmove>
     4a8:	adrp	x3, 0 <gomp_mutex_unlock>
     4ac:	add	x3, x3, #0x0
     4b0:	adrp	x1, 0 <gomp_mutex_unlock>
     4b4:	adrp	x0, 0 <gomp_mutex_unlock>
     4b8:	add	x3, x3, #0x10
     4bc:	add	x1, x1, #0x0
     4c0:	add	x0, x0, #0x0
     4c4:	mov	w2, #0xa4                  	// #164
     4c8:	stp	x21, x22, [sp, #32]
     4cc:	bl	0 <__assert_fail>
     4d0:	adrp	x1, 0 <gomp_mutex_unlock>
     4d4:	add	x1, x1, #0x0
     4d8:	adrp	x0, 0 <gomp_mutex_unlock>
     4dc:	add	x1, x1, #0x78
     4e0:	add	x0, x0, #0x0
     4e4:	bl	0 <gomp_fatal>

00000000000004e8 <acc_deviceptr>:
     4e8:	stp	x29, x30, [sp, #-112]!
     4ec:	mov	x29, sp
     4f0:	stp	x19, x20, [sp, #16]
     4f4:	mov	x20, x0
     4f8:	bl	0 <goacc_lazy_initialize>
     4fc:	adrp	x0, 0 <goacc_tls_data>
     500:	ldr	x0, [x0]
     504:	mrs	x1, tpidr_el0
     508:	ldr	x0, [x1, x0]
     50c:	ldr	x19, [x0, #8]
     510:	ldr	w0, [x19, #8]
     514:	tbnz	w0, #0, 594 <acc_deviceptr+0xac>
     518:	str	x21, [sp, #32]
     51c:	add	x21, x19, #0xa8
     520:	mov	w0, #0x1                   	// #1
     524:	ldaxr	w1, [x21]
     528:	cbnz	w1, 534 <acc_deviceptr+0x4c>
     52c:	stxr	w2, w0, [x21]
     530:	cbnz	w2, 524 <acc_deviceptr+0x3c>
     534:	cmp	w1, #0x0
     538:	b.ne	5c8 <acc_deviceptr+0xe0>  // b.any
     53c:	add	x2, x20, #0x1
     540:	add	x0, x19, #0xa0
     544:	add	x1, sp, #0x38
     548:	stp	x20, x2, [sp, #56]
     54c:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     550:	mov	x19, x0
     554:	cbz	x0, 5a8 <acc_deviceptr+0xc0>
     558:	ldr	x2, [x0]
     55c:	ldp	x0, x1, [x0, #16]
     560:	ldr	x0, [x0, #16]
     564:	sub	x19, x0, x2
     568:	add	x19, x19, x1
     56c:	add	x19, x20, x19
     570:	ldxr	w0, [x21]
     574:	stlxr	w1, wzr, [x21]
     578:	cbnz	w1, 570 <acc_deviceptr+0x88>
     57c:	tbnz	w0, #31, 5b8 <acc_deviceptr+0xd0>
     580:	ldr	x21, [sp, #32]
     584:	mov	x0, x19
     588:	ldp	x19, x20, [sp, #16]
     58c:	ldp	x29, x30, [sp], #112
     590:	ret
     594:	mov	x19, x20
     598:	mov	x0, x19
     59c:	ldp	x19, x20, [sp, #16]
     5a0:	ldp	x29, x30, [sp], #112
     5a4:	ret
     5a8:	ldxr	w0, [x21]
     5ac:	stlxr	w1, wzr, [x21]
     5b0:	cbnz	w1, 5a8 <acc_deviceptr+0xc0>
     5b4:	tbz	w0, #31, 580 <acc_deviceptr+0x98>
     5b8:	mov	x0, x21
     5bc:	bl	0 <gomp_mutex_unlock_slow>
     5c0:	ldr	x21, [sp, #32]
     5c4:	b	584 <acc_deviceptr+0x9c>
     5c8:	mov	x0, x21
     5cc:	bl	0 <gomp_mutex_lock_slow>
     5d0:	b	53c <acc_deviceptr+0x54>
     5d4:	nop

00000000000005d8 <acc_hostptr>:
     5d8:	stp	x29, x30, [sp, #-48]!
     5dc:	mov	x29, sp
     5e0:	stp	x19, x20, [sp, #16]
     5e4:	mov	x19, x0
     5e8:	bl	0 <goacc_lazy_initialize>
     5ec:	adrp	x0, 0 <goacc_tls_data>
     5f0:	ldr	x0, [x0]
     5f4:	mrs	x1, tpidr_el0
     5f8:	ldr	x0, [x1, x0]
     5fc:	ldr	x20, [x0, #8]
     600:	ldr	w0, [x20, #8]
     604:	tbnz	w0, #0, 66c <acc_hostptr+0x94>
     608:	add	x0, x20, #0xa8
     60c:	mov	w2, #0x1                   	// #1
     610:	ldaxr	w1, [x0]
     614:	cbnz	w1, 620 <acc_hostptr+0x48>
     618:	stxr	w3, w2, [x0]
     61c:	cbnz	w3, 610 <acc_hostptr+0x38>
     620:	cmp	w1, #0x0
     624:	b.ne	708 <acc_hostptr+0x130>  // b.any
     628:	ldr	x1, [x20, #176]
     62c:	cbz	x1, 658 <acc_hostptr+0x80>
     630:	add	x3, x19, #0x1
     634:	nop
     638:	ldr	x5, [x1, #16]
     63c:	cmp	x19, x5
     640:	b.cc	650 <acc_hostptr+0x78>  // b.lo, b.ul, b.last
     644:	ldr	x2, [x1, #24]
     648:	cmp	x2, x3
     64c:	b.cs	684 <acc_hostptr+0xac>  // b.hs, b.nlast
     650:	ldr	x1, [x1, #40]
     654:	cbnz	x1, 638 <acc_hostptr+0x60>
     658:	ldxr	w1, [x0]
     65c:	stlxr	w2, wzr, [x0]
     660:	cbnz	w2, 658 <acc_hostptr+0x80>
     664:	mov	x19, #0x0                   	// #0
     668:	tbnz	w1, #31, 67c <acc_hostptr+0xa4>
     66c:	mov	x0, x19
     670:	ldp	x19, x20, [sp, #16]
     674:	ldp	x29, x30, [sp], #48
     678:	ret
     67c:	bl	0 <gomp_mutex_unlock_slow>
     680:	b	66c <acc_hostptr+0x94>
     684:	ldr	x7, [x1, #48]
     688:	cbz	x7, 658 <acc_hostptr+0x80>
     68c:	ldr	x1, [x1, #8]
     690:	mov	x4, #0x0                   	// #0
     694:	add	x4, x4, #0x1
     698:	ldp	x3, x6, [x1]
     69c:	ldr	x2, [x1, #24]
     6a0:	add	x2, x2, x3
     6a4:	sub	x3, x2, x5
     6a8:	add	x3, x19, x3
     6ac:	cmp	x3, x6
     6b0:	b.ls	6e4 <acc_hostptr+0x10c>  // b.plast
     6b4:	nop
     6b8:	add	x1, x1, #0x48
     6bc:	cmp	x7, x4
     6c0:	b.eq	658 <acc_hostptr+0x80>  // b.none
     6c4:	ldp	x3, x6, [x1]
     6c8:	add	x4, x4, #0x1
     6cc:	ldr	x2, [x1, #24]
     6d0:	add	x2, x2, x3
     6d4:	sub	x3, x2, x5
     6d8:	add	x3, x19, x3
     6dc:	cmp	x3, x6
     6e0:	b.hi	6b8 <acc_hostptr+0xe0>  // b.pmore
     6e4:	ldr	x1, [x1, #16]
     6e8:	ldr	x1, [x1, #16]
     6ec:	sub	x2, x2, x1
     6f0:	add	x19, x19, x2
     6f4:	ldxr	w1, [x0]
     6f8:	stlxr	w2, wzr, [x0]
     6fc:	cbnz	w2, 6f4 <acc_hostptr+0x11c>
     700:	tbz	w1, #31, 66c <acc_hostptr+0x94>
     704:	b	67c <acc_hostptr+0xa4>
     708:	str	x0, [sp, #40]
     70c:	bl	0 <gomp_mutex_lock_slow>
     710:	ldr	x0, [sp, #40]
     714:	b	628 <acc_hostptr+0x50>

0000000000000718 <acc_is_present>:
     718:	stp	x29, x30, [sp, #-128]!
     71c:	cmp	x1, #0x0
     720:	ccmp	x0, #0x0, #0x4, ne  // ne = any
     724:	mov	x29, sp
     728:	stp	x21, x22, [sp, #32]
     72c:	mov	w21, #0x0                   	// #0
     730:	b.ne	744 <acc_is_present+0x2c>  // b.any
     734:	mov	w0, w21
     738:	ldp	x21, x22, [sp, #32]
     73c:	ldp	x29, x30, [sp], #128
     740:	ret
     744:	stp	x19, x20, [sp, #16]
     748:	mov	x20, x1
     74c:	mov	x19, x0
     750:	str	x23, [sp, #48]
     754:	bl	0 <goacc_lazy_initialize>
     758:	adrp	x0, 0 <goacc_tls_data>
     75c:	ldr	x0, [x0]
     760:	mrs	x1, tpidr_el0
     764:	mov	w21, #0x1                   	// #1
     768:	ldr	x0, [x1, x0]
     76c:	ldr	x23, [x0, #8]
     770:	ldr	w0, [x23, #8]
     774:	tbnz	w0, #0, 7cc <acc_is_present+0xb4>
     778:	add	x22, x23, #0xa8
     77c:	ldaxr	w1, [x22]
     780:	cbnz	w1, 78c <acc_is_present+0x74>
     784:	stxr	w0, w21, [x22]
     788:	cbnz	w0, 77c <acc_is_present+0x64>
     78c:	cmp	w1, #0x0
     790:	b.ne	814 <acc_is_present+0xfc>  // b.any
     794:	add	x0, x23, #0xa0
     798:	add	x1, sp, #0x48
     79c:	add	x23, x20, x19
     7a0:	mov	w21, #0x0                   	// #0
     7a4:	stp	x19, x23, [sp, #72]
     7a8:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     7ac:	cbz	x0, 7bc <acc_is_present+0xa4>
     7b0:	ldr	x1, [x0]
     7b4:	cmp	x19, x1
     7b8:	b.cs	7e4 <acc_is_present+0xcc>  // b.hs, b.nlast
     7bc:	ldxr	w0, [x22]
     7c0:	stlxr	w1, wzr, [x22]
     7c4:	cbnz	w1, 7bc <acc_is_present+0xa4>
     7c8:	tbnz	w0, #31, 800 <acc_is_present+0xe8>
     7cc:	mov	w0, w21
     7d0:	ldp	x19, x20, [sp, #16]
     7d4:	ldp	x21, x22, [sp, #32]
     7d8:	ldr	x23, [sp, #48]
     7dc:	ldp	x29, x30, [sp], #128
     7e0:	ret
     7e4:	ldr	x0, [x0, #8]
     7e8:	cmp	x23, x0
     7ec:	b.hi	7bc <acc_is_present+0xa4>  // b.pmore
     7f0:	sub	x1, x0, x1
     7f4:	cmp	x20, x1
     7f8:	cset	w21, ls  // ls = plast
     7fc:	b	7bc <acc_is_present+0xa4>
     800:	mov	x0, x22
     804:	bl	0 <gomp_mutex_unlock_slow>
     808:	ldp	x19, x20, [sp, #16]
     80c:	ldr	x23, [sp, #48]
     810:	b	734 <acc_is_present+0x1c>
     814:	mov	x0, x22
     818:	bl	0 <gomp_mutex_lock_slow>
     81c:	b	794 <acc_is_present+0x7c>

0000000000000820 <acc_map_data>:
     820:	stp	x29, x30, [sp, #-160]!
     824:	mov	x29, sp
     828:	stp	x19, x20, [sp, #16]
     82c:	mov	x20, x0
     830:	mov	x19, x1
     834:	stp	x21, x22, [sp, #32]
     838:	stp	x23, x24, [sp, #48]
     83c:	mov	x24, x2
     840:	strh	wzr, [sp, #78]
     844:	stp	x0, x1, [sp, #80]
     848:	str	x2, [sp, #96]
     84c:	bl	0 <goacc_lazy_initialize>
     850:	adrp	x0, 0 <goacc_tls_data>
     854:	ldr	x0, [x0]
     858:	mrs	x1, tpidr_el0
     85c:	ldr	x21, [x1, x0]
     860:	ldr	x23, [x21, #8]
     864:	ldr	w0, [x23, #8]
     868:	tbz	w0, #0, 8c8 <acc_map_data+0xa8>
     86c:	cmp	x20, x19
     870:	b.ne	a28 <acc_map_data+0x208>  // b.any
     874:	add	x22, x23, #0xa8
     878:	mov	x19, #0x0                   	// #0
     87c:	mov	w0, #0x1                   	// #1
     880:	ldaxr	w1, [x22]
     884:	cbnz	w1, 890 <acc_map_data+0x70>
     888:	stxr	w2, w0, [x22]
     88c:	cbnz	w2, 880 <acc_map_data+0x60>
     890:	cmp	w1, #0x0
     894:	b.ne	a40 <acc_map_data+0x220>  // b.any
     898:	ldr	x0, [x23, #176]
     89c:	str	x0, [x19, #40]
     8a0:	str	x19, [x23, #176]
     8a4:	ldxr	w0, [x22]
     8a8:	stlxr	w1, wzr, [x22]
     8ac:	cbnz	w1, 8a4 <acc_map_data+0x84>
     8b0:	tbnz	w0, #31, a00 <acc_map_data+0x1e0>
     8b4:	ldp	x19, x20, [sp, #16]
     8b8:	ldp	x21, x22, [sp, #32]
     8bc:	ldp	x23, x24, [sp, #48]
     8c0:	ldp	x29, x30, [sp], #160
     8c4:	ret
     8c8:	cmp	x19, #0x0
     8cc:	ccmp	x24, #0x0, #0x4, ne  // ne = any
     8d0:	ccmp	x20, #0x0, #0x4, ne  // ne = any
     8d4:	b.eq	a0c <acc_map_data+0x1ec>  // b.none
     8d8:	add	x22, x23, #0xa8
     8dc:	mov	w0, #0x1                   	// #1
     8e0:	ldaxr	w1, [x22]
     8e4:	cbnz	w1, 8f0 <acc_map_data+0xd0>
     8e8:	stxr	w2, w0, [x22]
     8ec:	cbnz	w2, 8e0 <acc_map_data+0xc0>
     8f0:	cmp	w1, #0x0
     8f4:	b.ne	a4c <acc_map_data+0x22c>  // b.any
     8f8:	add	x2, x24, x20
     8fc:	add	x1, sp, #0x68
     900:	add	x0, x23, #0xa0
     904:	stp	x20, x2, [sp, #104]
     908:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     90c:	cbnz	x0, a58 <acc_map_data+0x238>
     910:	ldr	x0, [x21, #8]
     914:	ldr	x0, [x0, #176]
     918:	cbz	x0, 940 <acc_map_data+0x120>
     91c:	add	x2, x19, x24
     920:	ldr	x4, [x0, #16]
     924:	cmp	x4, x19
     928:	b.hi	938 <acc_map_data+0x118>  // b.pmore
     92c:	ldr	x1, [x0, #24]
     930:	cmp	x1, x2
     934:	b.cs	988 <acc_map_data+0x168>  // b.hs, b.nlast
     938:	ldr	x0, [x0, #40]
     93c:	cbnz	x0, 920 <acc_map_data+0x100>
     940:	ldxr	w0, [x22]
     944:	stlxr	w1, wzr, [x22]
     948:	cbnz	w1, 940 <acc_map_data+0x120>
     94c:	tbnz	w0, #31, a34 <acc_map_data+0x214>
     950:	mov	x1, #0x1                   	// #1
     954:	add	x5, sp, #0x4e
     958:	add	x4, sp, #0x60
     95c:	add	x3, sp, #0x58
     960:	add	x2, sp, #0x50
     964:	mov	x0, x23
     968:	mov	w7, #0x0                   	// #0
     96c:	mov	w6, #0x1                   	// #1
     970:	bl	0 <gomp_map_vars>
     974:	mov	x19, x0
     978:	ldr	x0, [x0, #64]
     97c:	mov	x1, #0xffffffffffffffff    	// #-1
     980:	str	x1, [x0, #32]
     984:	b	87c <acc_map_data+0x5c>
     988:	ldr	x6, [x0, #48]
     98c:	cbz	x6, 940 <acc_map_data+0x120>
     990:	ldr	x1, [x0, #8]
     994:	mov	x3, #0x0                   	// #0
     998:	ldp	x5, x2, [x1]
     99c:	ldr	x0, [x1, #24]
     9a0:	add	x0, x0, x5
     9a4:	sub	x0, x0, x4
     9a8:	add	x0, x19, x0
     9ac:	cmp	x0, x2
     9b0:	b.ls	9e4 <acc_map_data+0x1c4>  // b.plast
     9b4:	nop
     9b8:	add	x3, x3, #0x1
     9bc:	add	x1, x1, #0x48
     9c0:	cmp	x6, x3
     9c4:	b.eq	940 <acc_map_data+0x120>  // b.none
     9c8:	ldp	x5, x2, [x1]
     9cc:	ldr	x0, [x1, #24]
     9d0:	add	x0, x0, x5
     9d4:	sub	x0, x0, x4
     9d8:	add	x0, x19, x0
     9dc:	cmp	x0, x2
     9e0:	b.hi	9b8 <acc_map_data+0x198>  // b.pmore
     9e4:	mov	x0, x22
     9e8:	bl	0 <gomp_mutex_unlock>
     9ec:	adrp	x0, 0 <gomp_mutex_unlock>
     9f0:	mov	w2, w24
     9f4:	mov	x1, x19
     9f8:	add	x0, x0, #0x0
     9fc:	bl	0 <gomp_fatal>
     a00:	mov	x0, x22
     a04:	bl	0 <gomp_mutex_unlock_slow>
     a08:	b	8b4 <acc_map_data+0x94>
     a0c:	adrp	x0, 0 <gomp_mutex_unlock>
     a10:	mov	x3, x19
     a14:	mov	x1, x20
     a18:	mov	w4, w24
     a1c:	add	x0, x0, #0x0
     a20:	mov	w2, w24
     a24:	bl	0 <gomp_fatal>
     a28:	adrp	x0, 0 <gomp_mutex_unlock>
     a2c:	add	x0, x0, #0x0
     a30:	bl	0 <gomp_fatal>
     a34:	mov	x0, x22
     a38:	bl	0 <gomp_mutex_unlock_slow>
     a3c:	b	950 <acc_map_data+0x130>
     a40:	mov	x0, x22
     a44:	bl	0 <gomp_mutex_lock_slow>
     a48:	b	898 <acc_map_data+0x78>
     a4c:	mov	x0, x22
     a50:	bl	0 <gomp_mutex_lock_slow>
     a54:	b	8f8 <acc_map_data+0xd8>
     a58:	mov	x0, x22
     a5c:	bl	0 <gomp_mutex_unlock>
     a60:	adrp	x0, 0 <gomp_mutex_unlock>
     a64:	mov	w2, w24
     a68:	mov	x1, x20
     a6c:	add	x0, x0, #0x0
     a70:	bl	0 <gomp_fatal>
     a74:	nop

0000000000000a78 <acc_unmap_data>:
     a78:	adrp	x1, 0 <goacc_tls_data>
     a7c:	ldr	x1, [x1]
     a80:	mrs	x2, tpidr_el0
     a84:	stp	x29, x30, [sp, #-128]!
     a88:	mov	x29, sp
     a8c:	stp	x19, x20, [sp, #16]
     a90:	mov	x19, x0
     a94:	ldr	x0, [x2, x1]
     a98:	stp	x21, x22, [sp, #32]
     a9c:	ldr	x21, [x0, #8]
     aa0:	ldr	w0, [x21, #8]
     aa4:	tbnz	w0, #0, b2c <acc_unmap_data+0xb4>
     aa8:	add	x22, x21, #0xa8
     aac:	mov	w0, #0x1                   	// #1
     ab0:	str	x23, [sp, #48]
     ab4:	ldaxr	w1, [x22]
     ab8:	cbnz	w1, ac4 <acc_unmap_data+0x4c>
     abc:	stxr	w2, w0, [x22]
     ac0:	cbnz	w2, ab4 <acc_unmap_data+0x3c>
     ac4:	cmp	w1, #0x0
     ac8:	b.ne	b94 <acc_unmap_data+0x11c>  // b.any
     acc:	add	x2, x19, #0x1
     ad0:	add	x1, sp, #0x48
     ad4:	add	x0, x21, #0xa0
     ad8:	stp	x19, x2, [sp, #72]
     adc:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     ae0:	mov	x20, x0
     ae4:	cbz	x0, bc4 <acc_unmap_data+0x14c>
     ae8:	ldr	x23, [x0]
     aec:	cmp	x23, x19
     af0:	b.ne	ba0 <acc_unmap_data+0x128>  // b.any
     af4:	ldr	x19, [x20, #16]
     af8:	mov	x0, #0x1                   	// #1
     afc:	str	x0, [x20, #32]
     b00:	ldr	x0, [x19]
     b04:	cmp	x0, #0x2
     b08:	b.eq	b3c <acc_unmap_data+0xc4>  // b.none
     b0c:	ldxr	w0, [x22]
     b10:	stlxr	w1, wzr, [x22]
     b14:	cbnz	w1, b0c <acc_unmap_data+0x94>
     b18:	tbnz	w0, #31, b80 <acc_unmap_data+0x108>
     b1c:	mov	x0, x19
     b20:	mov	w1, #0x1                   	// #1
     b24:	bl	0 <gomp_unmap_vars>
     b28:	ldr	x23, [sp, #48]
     b2c:	ldp	x19, x20, [sp, #16]
     b30:	ldp	x21, x22, [sp, #32]
     b34:	ldp	x29, x30, [sp], #128
     b38:	ret
     b3c:	ldr	x2, [x21, #176]
     b40:	stp	xzr, xzr, [x19, #24]
     b44:	cbz	x2, b70 <acc_unmap_data+0xf8>
     b48:	cmp	x19, x2
     b4c:	ldr	x0, [x2, #40]
     b50:	b.eq	b8c <acc_unmap_data+0x114>  // b.none
     b54:	cbz	x0, b70 <acc_unmap_data+0xf8>
     b58:	cmp	x0, x19
     b5c:	ldr	x1, [x0, #40]
     b60:	b.eq	b78 <acc_unmap_data+0x100>  // b.none
     b64:	mov	x2, x0
     b68:	mov	x0, x1
     b6c:	cbnz	x0, b58 <acc_unmap_data+0xe0>
     b70:	mov	x19, #0x0                   	// #0
     b74:	b	b0c <acc_unmap_data+0x94>
     b78:	str	x1, [x2, #40]
     b7c:	b	b0c <acc_unmap_data+0x94>
     b80:	mov	x0, x22
     b84:	bl	0 <gomp_mutex_unlock_slow>
     b88:	b	b1c <acc_unmap_data+0xa4>
     b8c:	str	x0, [x21, #176]
     b90:	b	b0c <acc_unmap_data+0x94>
     b94:	mov	x0, x22
     b98:	bl	0 <gomp_mutex_lock_slow>
     b9c:	b	acc <acc_unmap_data+0x54>
     ba0:	mov	x0, x22
     ba4:	ldr	x21, [x20, #8]
     ba8:	bl	0 <gomp_mutex_unlock>
     bac:	ldr	x1, [x20]
     bb0:	adrp	x0, 0 <gomp_mutex_unlock>
     bb4:	sub	w2, w21, w23
     bb8:	mov	x3, x19
     bbc:	add	x0, x0, #0x0
     bc0:	bl	0 <gomp_fatal>
     bc4:	mov	x0, x22
     bc8:	bl	0 <gomp_mutex_unlock>
     bcc:	adrp	x0, 0 <gomp_mutex_unlock>
     bd0:	mov	x1, x19
     bd4:	add	x0, x0, #0x0
     bd8:	bl	0 <gomp_fatal>
     bdc:	nop

0000000000000be0 <acc_free>:
     be0:	cbz	x0, d44 <acc_free+0x164>
     be4:	adrp	x1, 0 <goacc_tls_data>
     be8:	ldr	x1, [x1]
     bec:	mrs	x2, tpidr_el0
     bf0:	stp	x29, x30, [sp, #-80]!
     bf4:	mov	x29, sp
     bf8:	ldr	x1, [x2, x1]
     bfc:	stp	x21, x22, [sp, #32]
     c00:	cbz	x1, d58 <acc_free+0x178>
     c04:	ldr	x21, [x1, #8]
     c08:	cbz	x21, d58 <acc_free+0x178>
     c0c:	ldr	w1, [x21, #8]
     c10:	tbnz	w1, #0, d38 <acc_free+0x158>
     c14:	stp	x19, x20, [sp, #16]
     c18:	mov	x19, x0
     c1c:	add	x0, x21, #0xa8
     c20:	mov	w2, #0x1                   	// #1
     c24:	ldaxr	w1, [x0]
     c28:	cbnz	w1, c34 <acc_free+0x54>
     c2c:	stxr	w3, w2, [x0]
     c30:	cbnz	w3, c24 <acc_free+0x44>
     c34:	cmp	w1, #0x0
     c38:	b.ne	da0 <acc_free+0x1c0>  // b.any
     c3c:	ldr	x1, [x21, #176]
     c40:	cbz	x1, c74 <acc_free+0x94>
     c44:	add	x4, x19, #0x1
     c48:	str	x23, [sp, #48]
     c4c:	nop
     c50:	ldr	x3, [x1, #16]
     c54:	cmp	x3, x19
     c58:	b.hi	c68 <acc_free+0x88>  // b.pmore
     c5c:	ldr	x2, [x1, #24]
     c60:	cmp	x2, x4
     c64:	b.cs	cac <acc_free+0xcc>  // b.hs, b.nlast
     c68:	ldr	x1, [x1, #40]
     c6c:	cbnz	x1, c50 <acc_free+0x70>
     c70:	ldr	x23, [sp, #48]
     c74:	ldxr	w1, [x0]
     c78:	stlxr	w2, wzr, [x0]
     c7c:	cbnz	w2, c74 <acc_free+0x94>
     c80:	tbnz	w1, #31, d48 <acc_free+0x168>
     c84:	ldr	w0, [x21, #12]
     c88:	mov	x1, x19
     c8c:	ldr	x2, [x21, #104]
     c90:	blr	x2
     c94:	tst	w0, #0xff
     c98:	b.eq	d84 <acc_free+0x1a4>  // b.none
     c9c:	ldp	x19, x20, [sp, #16]
     ca0:	ldp	x21, x22, [sp, #32]
     ca4:	ldp	x29, x30, [sp], #80
     ca8:	ret
     cac:	ldr	x5, [x1, #48]
     cb0:	cbz	x5, c70 <acc_free+0x90>
     cb4:	ldr	x20, [x1, #8]
     cb8:	mov	x2, #0x0                   	// #0
     cbc:	ldp	x1, x4, [x20]
     cc0:	ldr	x22, [x20, #24]
     cc4:	add	x1, x22, x1
     cc8:	sub	x1, x1, x3
     ccc:	add	x1, x19, x1
     cd0:	cmp	x1, x4
     cd4:	b.ls	d04 <acc_free+0x124>  // b.plast
     cd8:	add	x2, x2, #0x1
     cdc:	add	x20, x20, #0x48
     ce0:	cmp	x5, x2
     ce4:	b.eq	c70 <acc_free+0x90>  // b.none
     ce8:	ldp	x1, x4, [x20]
     cec:	ldr	x22, [x20, #24]
     cf0:	add	x1, x22, x1
     cf4:	sub	x1, x1, x3
     cf8:	add	x1, x19, x1
     cfc:	cmp	x1, x4
     d00:	b.hi	cd8 <acc_free+0xf8>  // b.pmore
     d04:	ldr	x1, [x20, #16]
     d08:	ldr	x23, [x1, #16]
     d0c:	ldxr	w1, [x0]
     d10:	stlxr	w2, wzr, [x0]
     d14:	cbnz	w2, d0c <acc_free+0x12c>
     d18:	tbnz	w1, #31, d50 <acc_free+0x170>
     d1c:	ldr	x0, [x20]
     d20:	add	x0, x22, x0
     d24:	sub	x0, x0, x23
     d28:	add	x0, x19, x0
     d2c:	bl	a78 <acc_unmap_data>
     d30:	ldr	x23, [sp, #48]
     d34:	b	c84 <acc_free+0xa4>
     d38:	ldp	x21, x22, [sp, #32]
     d3c:	ldp	x29, x30, [sp], #80
     d40:	b	0 <free>
     d44:	ret
     d48:	bl	0 <gomp_mutex_unlock_slow>
     d4c:	b	c84 <acc_free+0xa4>
     d50:	bl	0 <gomp_mutex_unlock_slow>
     d54:	b	d1c <acc_free+0x13c>
     d58:	adrp	x3, 0 <gomp_mutex_unlock>
     d5c:	add	x3, x3, #0x0
     d60:	adrp	x1, 0 <gomp_mutex_unlock>
     d64:	adrp	x0, 0 <gomp_mutex_unlock>
     d68:	add	x3, x3, #0x98
     d6c:	add	x1, x1, #0x0
     d70:	add	x0, x0, #0x0
     d74:	mov	w2, #0x7f                  	// #127
     d78:	stp	x19, x20, [sp, #16]
     d7c:	str	x23, [sp, #48]
     d80:	bl	0 <__assert_fail>
     d84:	adrp	x1, 0 <gomp_mutex_unlock>
     d88:	add	x1, x1, #0x0
     d8c:	adrp	x0, 0 <gomp_mutex_unlock>
     d90:	add	x1, x1, #0xa8
     d94:	add	x0, x0, #0x0
     d98:	str	x23, [sp, #48]
     d9c:	bl	0 <gomp_fatal>
     da0:	str	x0, [sp, #72]
     da4:	bl	0 <gomp_mutex_lock_slow>
     da8:	ldr	x0, [sp, #72]
     dac:	b	c3c <acc_free+0x5c>

0000000000000db0 <acc_create>:
     db0:	stp	x29, x30, [sp, #-128]!
     db4:	cmp	x0, #0x0
     db8:	ccmp	x1, #0x0, #0x4, ne  // ne = any
     dbc:	mov	x29, sp
     dc0:	stp	x19, x20, [sp, #16]
     dc4:	mov	x19, x0
     dc8:	stp	x21, x22, [sp, #32]
     dcc:	str	x1, [sp, #64]
     dd0:	b.eq	f4c <acc_create+0x19c>  // b.none
     dd4:	bl	0 <goacc_lazy_initialize>
     dd8:	adrp	x0, 0 <goacc_tls_data>
     ddc:	ldr	x0, [x0]
     de0:	mrs	x1, tpidr_el0
     de4:	ldr	x0, [x1, x0]
     de8:	ldr	x21, [x0, #8]
     dec:	ldr	w0, [x21, #8]
     df0:	tbnz	w0, #0, e94 <acc_create+0xe4>
     df4:	add	x20, x21, #0xa8
     df8:	mov	w0, #0x1                   	// #1
     dfc:	ldaxr	w1, [x20]
     e00:	cbnz	w1, e0c <acc_create+0x5c>
     e04:	stxr	w2, w0, [x20]
     e08:	cbnz	w2, dfc <acc_create+0x4c>
     e0c:	cmp	w1, #0x0
     e10:	b.ne	f60 <acc_create+0x1b0>  // b.any
     e14:	ldr	x2, [sp, #64]
     e18:	add	x1, sp, #0x48
     e1c:	add	x0, x21, #0xa0
     e20:	add	x2, x2, x19
     e24:	stp	x19, x2, [sp, #72]
     e28:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     e2c:	cbz	x0, eac <acc_create+0xfc>
     e30:	ldp	x2, x3, [x0, #8]
     e34:	ldr	x1, [sp, #64]
     e38:	add	x1, x19, x1
     e3c:	cmp	x1, x2
     e40:	ldr	x22, [x3, #16]
     e44:	ldr	x1, [x0, #24]
     e48:	add	x22, x22, x1
     e4c:	b.hi	f6c <acc_create+0x1bc>  // b.pmore
     e50:	ldr	x1, [x0, #32]
     e54:	cmn	x1, #0x1
     e58:	b.eq	e70 <acc_create+0xc0>  // b.none
     e5c:	ldr	x2, [x0, #40]
     e60:	add	x1, x1, #0x1
     e64:	str	x1, [x0, #32]
     e68:	add	x1, x2, #0x1
     e6c:	str	x1, [x0, #40]
     e70:	ldxr	w0, [x20]
     e74:	stlxr	w1, wzr, [x20]
     e78:	cbnz	w1, e70 <acc_create+0xc0>
     e7c:	tbnz	w0, #31, f34 <acc_create+0x184>
     e80:	mov	x0, x22
     e84:	ldp	x19, x20, [sp, #16]
     e88:	ldp	x21, x22, [sp, #32]
     e8c:	ldp	x29, x30, [sp], #128
     e90:	ret
     e94:	mov	x22, x19
     e98:	mov	x0, x22
     e9c:	ldp	x19, x20, [sp, #16]
     ea0:	ldp	x21, x22, [sp, #32]
     ea4:	ldp	x29, x30, [sp], #128
     ea8:	ret
     eac:	strh	wzr, [sp, #62]
     eb0:	str	x19, [sp, #72]
     eb4:	ldxr	w0, [x20]
     eb8:	stlxr	w1, wzr, [x20]
     ebc:	cbnz	w1, eb4 <acc_create+0x104>
     ec0:	tbnz	w0, #31, f40 <acc_create+0x190>
     ec4:	add	x2, sp, #0x48
     ec8:	mov	x1, #0x1                   	// #1
     ecc:	add	x5, sp, #0x3e
     ed0:	add	x4, sp, #0x40
     ed4:	mov	x0, x21
     ed8:	mov	w7, #0x0                   	// #0
     edc:	mov	w6, #0x1                   	// #1
     ee0:	mov	x3, #0x0                   	// #0
     ee4:	bl	0 <gomp_map_vars>
     ee8:	mov	x19, x0
     eec:	mov	x0, #0x1                   	// #1
     ef0:	mov	w2, w0
     ef4:	ldr	x1, [x19, #64]
     ef8:	str	x0, [x1, #40]
     efc:	ldaxr	w1, [x20]
     f00:	cbnz	w1, f0c <acc_create+0x15c>
     f04:	stxr	w0, w2, [x20]
     f08:	cbnz	w0, efc <acc_create+0x14c>
     f0c:	cmp	w1, #0x0
     f10:	b.ne	f88 <acc_create+0x1d8>  // b.any
     f14:	ldr	x0, [x21, #176]
     f18:	str	x0, [x19, #40]
     f1c:	ldr	x22, [x19, #32]
     f20:	str	x19, [x21, #176]
     f24:	ldxr	w0, [x20]
     f28:	stlxr	w1, wzr, [x20]
     f2c:	cbnz	w1, f24 <acc_create+0x174>
     f30:	tbz	w0, #31, e80 <acc_create+0xd0>
     f34:	mov	x0, x20
     f38:	bl	0 <gomp_mutex_unlock_slow>
     f3c:	b	e80 <acc_create+0xd0>
     f40:	mov	x0, x20
     f44:	bl	0 <gomp_mutex_unlock_slow>
     f48:	b	ec4 <acc_create+0x114>
     f4c:	mov	w2, w1
     f50:	mov	x1, x0
     f54:	adrp	x0, 0 <gomp_mutex_unlock>
     f58:	add	x0, x0, #0x0
     f5c:	bl	0 <gomp_fatal>
     f60:	mov	x0, x20
     f64:	bl	0 <gomp_mutex_lock_slow>
     f68:	b	e14 <acc_create+0x64>
     f6c:	mov	x0, x20
     f70:	bl	0 <gomp_mutex_unlock>
     f74:	ldr	w2, [sp, #64]
     f78:	adrp	x0, 0 <gomp_mutex_unlock>
     f7c:	mov	x1, x19
     f80:	add	x0, x0, #0x0
     f84:	bl	0 <gomp_fatal>
     f88:	mov	x0, x20
     f8c:	bl	0 <gomp_mutex_lock_slow>
     f90:	b	f14 <acc_create+0x164>
     f94:	nop

0000000000000f98 <acc_create_async>:
     f98:	stp	x29, x30, [sp, #-144]!
     f9c:	cmp	x0, #0x0
     fa0:	ccmp	x1, #0x0, #0x4, ne  // ne = any
     fa4:	mov	x29, sp
     fa8:	stp	x19, x20, [sp, #16]
     fac:	mov	x19, x0
     fb0:	stp	x21, x22, [sp, #32]
     fb4:	str	w2, [sp, #60]
     fb8:	str	x1, [sp, #80]
     fbc:	b.eq	1168 <acc_create_async+0x1d0>  // b.none
     fc0:	mov	w22, w2
     fc4:	bl	0 <goacc_lazy_initialize>
     fc8:	adrp	x0, 0 <goacc_tls_data>
     fcc:	ldr	x0, [x0]
     fd0:	mrs	x1, tpidr_el0
     fd4:	ldr	x0, [x1, x0]
     fd8:	ldr	x21, [x0, #8]
     fdc:	ldr	w0, [x21, #8]
     fe0:	tbnz	w0, #0, 1064 <acc_create_async+0xcc>
     fe4:	add	x20, x21, #0xa8
     fe8:	mov	w0, #0x1                   	// #1
     fec:	ldaxr	w1, [x20]
     ff0:	cbnz	w1, ffc <acc_create_async+0x64>
     ff4:	stxr	w2, w0, [x20]
     ff8:	cbnz	w2, fec <acc_create_async+0x54>
     ffc:	cmp	w1, #0x0
    1000:	b.ne	117c <acc_create_async+0x1e4>  // b.any
    1004:	ldr	x2, [sp, #80]
    1008:	add	x1, sp, #0x58
    100c:	add	x0, x21, #0xa0
    1010:	add	x2, x2, x19
    1014:	stp	x19, x2, [sp, #88]
    1018:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    101c:	cbz	x0, 1074 <acc_create_async+0xdc>
    1020:	ldr	x1, [sp, #80]
    1024:	ldr	x2, [x0, #8]
    1028:	add	x1, x19, x1
    102c:	cmp	x1, x2
    1030:	b.hi	1188 <acc_create_async+0x1f0>  // b.pmore
    1034:	ldr	x1, [x0, #32]
    1038:	cmn	x1, #0x1
    103c:	b.eq	1054 <acc_create_async+0xbc>  // b.none
    1040:	ldr	x2, [x0, #40]
    1044:	add	x1, x1, #0x1
    1048:	str	x1, [x0, #32]
    104c:	add	x1, x2, #0x1
    1050:	str	x1, [x0, #40]
    1054:	ldxr	w0, [x20]
    1058:	stlxr	w1, wzr, [x20]
    105c:	cbnz	w1, 1054 <acc_create_async+0xbc>
    1060:	tbnz	w0, #31, 1118 <acc_create_async+0x180>
    1064:	ldp	x19, x20, [sp, #16]
    1068:	ldp	x21, x22, [sp, #32]
    106c:	ldp	x29, x30, [sp], #144
    1070:	ret
    1074:	strh	wzr, [sp, #78]
    1078:	str	x19, [sp, #88]
    107c:	ldxr	w0, [x20]
    1080:	stlxr	w1, wzr, [x20]
    1084:	cbnz	w1, 107c <acc_create_async+0xe4>
    1088:	tbnz	w0, #31, 115c <acc_create_async+0x1c4>
    108c:	cmn	w22, #0x1
    1090:	b.lt	1124 <acc_create_async+0x18c>  // b.tstop
    1094:	ldr	x1, [x21, #248]
    1098:	mov	w0, w22
    109c:	blr	x1
    10a0:	add	x2, sp, #0x58
    10a4:	mov	x3, #0x0                   	// #0
    10a8:	mov	x1, #0x1                   	// #1
    10ac:	add	x5, sp, #0x4e
    10b0:	add	x4, sp, #0x50
    10b4:	mov	x0, x21
    10b8:	mov	w7, #0x0                   	// #0
    10bc:	mov	w6, #0x1                   	// #1
    10c0:	bl	0 <gomp_map_vars>
    10c4:	mov	x19, x0
    10c8:	ldr	x1, [x21, #248]
    10cc:	mov	x3, #0x1                   	// #1
    10d0:	ldr	x2, [x19, #64]
    10d4:	mov	w0, #0xfffffffe            	// #-2
    10d8:	str	x3, [x2, #40]
    10dc:	blr	x1
    10e0:	mov	w0, #0x1                   	// #1
    10e4:	ldaxr	w1, [x20]
    10e8:	cbnz	w1, 10f4 <acc_create_async+0x15c>
    10ec:	stxr	w2, w0, [x20]
    10f0:	cbnz	w2, 10e4 <acc_create_async+0x14c>
    10f4:	cmp	w1, #0x0
    10f8:	b.ne	11a4 <acc_create_async+0x20c>  // b.any
    10fc:	ldr	x0, [x21, #176]
    1100:	str	x0, [x19, #40]
    1104:	str	x19, [x21, #176]
    1108:	ldxr	w0, [x20]
    110c:	stlxr	w1, wzr, [x20]
    1110:	cbnz	w1, 1108 <acc_create_async+0x170>
    1114:	tbz	w0, #31, 1064 <acc_create_async+0xcc>
    1118:	mov	x0, x20
    111c:	bl	0 <gomp_mutex_unlock_slow>
    1120:	b	1064 <acc_create_async+0xcc>
    1124:	mov	x1, #0x1                   	// #1
    1128:	add	x2, sp, #0x58
    112c:	add	x5, sp, #0x4e
    1130:	add	x4, sp, #0x50
    1134:	mov	x0, x21
    1138:	mov	w7, #0x0                   	// #0
    113c:	mov	w6, #0x1                   	// #1
    1140:	mov	x3, #0x0                   	// #0
    1144:	bl	0 <gomp_map_vars>
    1148:	mov	x19, x0
    114c:	ldr	x0, [x0, #64]
    1150:	mov	x1, #0x1                   	// #1
    1154:	str	x1, [x0, #40]
    1158:	b	10e0 <acc_create_async+0x148>
    115c:	mov	x0, x20
    1160:	bl	0 <gomp_mutex_unlock_slow>
    1164:	b	108c <acc_create_async+0xf4>
    1168:	mov	w2, w1
    116c:	mov	x1, x0
    1170:	adrp	x0, 0 <gomp_mutex_unlock>
    1174:	add	x0, x0, #0x0
    1178:	bl	0 <gomp_fatal>
    117c:	mov	x0, x20
    1180:	bl	0 <gomp_mutex_lock_slow>
    1184:	b	1004 <acc_create_async+0x6c>
    1188:	mov	x0, x20
    118c:	bl	0 <gomp_mutex_unlock>
    1190:	ldr	w2, [sp, #80]
    1194:	adrp	x0, 0 <gomp_mutex_unlock>
    1198:	mov	x1, x19
    119c:	add	x0, x0, #0x0
    11a0:	bl	0 <gomp_fatal>
    11a4:	mov	x0, x20
    11a8:	bl	0 <gomp_mutex_lock_slow>
    11ac:	b	10fc <acc_create_async+0x164>

00000000000011b0 <acc_copyin>:
    11b0:	stp	x29, x30, [sp, #-128]!
    11b4:	cmp	x0, #0x0
    11b8:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    11bc:	mov	x29, sp
    11c0:	stp	x19, x20, [sp, #16]
    11c4:	mov	x19, x0
    11c8:	stp	x21, x22, [sp, #32]
    11cc:	str	x1, [sp, #64]
    11d0:	b.eq	1350 <acc_copyin+0x1a0>  // b.none
    11d4:	bl	0 <goacc_lazy_initialize>
    11d8:	adrp	x0, 0 <goacc_tls_data>
    11dc:	ldr	x0, [x0]
    11e0:	mrs	x1, tpidr_el0
    11e4:	ldr	x0, [x1, x0]
    11e8:	ldr	x21, [x0, #8]
    11ec:	ldr	w0, [x21, #8]
    11f0:	tbnz	w0, #0, 1294 <acc_copyin+0xe4>
    11f4:	add	x20, x21, #0xa8
    11f8:	mov	w0, #0x1                   	// #1
    11fc:	ldaxr	w1, [x20]
    1200:	cbnz	w1, 120c <acc_copyin+0x5c>
    1204:	stxr	w2, w0, [x20]
    1208:	cbnz	w2, 11fc <acc_copyin+0x4c>
    120c:	cmp	w1, #0x0
    1210:	b.ne	1364 <acc_copyin+0x1b4>  // b.any
    1214:	ldr	x2, [sp, #64]
    1218:	add	x1, sp, #0x48
    121c:	add	x0, x21, #0xa0
    1220:	add	x2, x2, x19
    1224:	stp	x19, x2, [sp, #72]
    1228:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    122c:	cbz	x0, 12ac <acc_copyin+0xfc>
    1230:	ldp	x2, x3, [x0, #8]
    1234:	ldr	x1, [sp, #64]
    1238:	add	x1, x19, x1
    123c:	cmp	x1, x2
    1240:	ldr	x22, [x3, #16]
    1244:	ldr	x1, [x0, #24]
    1248:	add	x22, x22, x1
    124c:	b.hi	1370 <acc_copyin+0x1c0>  // b.pmore
    1250:	ldr	x1, [x0, #32]
    1254:	cmn	x1, #0x1
    1258:	b.eq	1270 <acc_copyin+0xc0>  // b.none
    125c:	ldr	x2, [x0, #40]
    1260:	add	x1, x1, #0x1
    1264:	str	x1, [x0, #32]
    1268:	add	x1, x2, #0x1
    126c:	str	x1, [x0, #40]
    1270:	ldxr	w0, [x20]
    1274:	stlxr	w1, wzr, [x20]
    1278:	cbnz	w1, 1270 <acc_copyin+0xc0>
    127c:	tbnz	w0, #31, 1338 <acc_copyin+0x188>
    1280:	mov	x0, x22
    1284:	ldp	x19, x20, [sp, #16]
    1288:	ldp	x21, x22, [sp, #32]
    128c:	ldp	x29, x30, [sp], #128
    1290:	ret
    1294:	mov	x22, x19
    1298:	mov	x0, x22
    129c:	ldp	x19, x20, [sp, #16]
    12a0:	ldp	x21, x22, [sp, #32]
    12a4:	ldp	x29, x30, [sp], #128
    12a8:	ret
    12ac:	mov	w0, #0x1                   	// #1
    12b0:	strh	w0, [sp, #62]
    12b4:	str	x19, [sp, #72]
    12b8:	ldxr	w0, [x20]
    12bc:	stlxr	w1, wzr, [x20]
    12c0:	cbnz	w1, 12b8 <acc_copyin+0x108>
    12c4:	tbnz	w0, #31, 1344 <acc_copyin+0x194>
    12c8:	add	x2, sp, #0x48
    12cc:	mov	x1, #0x1                   	// #1
    12d0:	add	x5, sp, #0x3e
    12d4:	add	x4, sp, #0x40
    12d8:	mov	x0, x21
    12dc:	mov	w7, #0x0                   	// #0
    12e0:	mov	w6, #0x1                   	// #1
    12e4:	mov	x3, #0x0                   	// #0
    12e8:	bl	0 <gomp_map_vars>
    12ec:	mov	x19, x0
    12f0:	mov	x0, #0x1                   	// #1
    12f4:	mov	w2, w0
    12f8:	ldr	x1, [x19, #64]
    12fc:	str	x0, [x1, #40]
    1300:	ldaxr	w1, [x20]
    1304:	cbnz	w1, 1310 <acc_copyin+0x160>
    1308:	stxr	w0, w2, [x20]
    130c:	cbnz	w0, 1300 <acc_copyin+0x150>
    1310:	cmp	w1, #0x0
    1314:	b.ne	138c <acc_copyin+0x1dc>  // b.any
    1318:	ldr	x0, [x21, #176]
    131c:	str	x0, [x19, #40]
    1320:	ldr	x22, [x19, #32]
    1324:	str	x19, [x21, #176]
    1328:	ldxr	w0, [x20]
    132c:	stlxr	w1, wzr, [x20]
    1330:	cbnz	w1, 1328 <acc_copyin+0x178>
    1334:	tbz	w0, #31, 1280 <acc_copyin+0xd0>
    1338:	mov	x0, x20
    133c:	bl	0 <gomp_mutex_unlock_slow>
    1340:	b	1280 <acc_copyin+0xd0>
    1344:	mov	x0, x20
    1348:	bl	0 <gomp_mutex_unlock_slow>
    134c:	b	12c8 <acc_copyin+0x118>
    1350:	mov	w2, w1
    1354:	mov	x1, x0
    1358:	adrp	x0, 0 <gomp_mutex_unlock>
    135c:	add	x0, x0, #0x0
    1360:	bl	0 <gomp_fatal>
    1364:	mov	x0, x20
    1368:	bl	0 <gomp_mutex_lock_slow>
    136c:	b	1214 <acc_copyin+0x64>
    1370:	mov	x0, x20
    1374:	bl	0 <gomp_mutex_unlock>
    1378:	ldr	w2, [sp, #64]
    137c:	adrp	x0, 0 <gomp_mutex_unlock>
    1380:	mov	x1, x19
    1384:	add	x0, x0, #0x0
    1388:	bl	0 <gomp_fatal>
    138c:	mov	x0, x20
    1390:	bl	0 <gomp_mutex_lock_slow>
    1394:	b	1318 <acc_copyin+0x168>

0000000000001398 <acc_copyin_async>:
    1398:	stp	x29, x30, [sp, #-144]!
    139c:	cmp	x0, #0x0
    13a0:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    13a4:	mov	x29, sp
    13a8:	stp	x19, x20, [sp, #16]
    13ac:	mov	x19, x0
    13b0:	stp	x21, x22, [sp, #32]
    13b4:	str	w2, [sp, #60]
    13b8:	str	x1, [sp, #80]
    13bc:	b.eq	156c <acc_copyin_async+0x1d4>  // b.none
    13c0:	mov	w22, w2
    13c4:	bl	0 <goacc_lazy_initialize>
    13c8:	adrp	x0, 0 <goacc_tls_data>
    13cc:	ldr	x0, [x0]
    13d0:	mrs	x1, tpidr_el0
    13d4:	ldr	x0, [x1, x0]
    13d8:	ldr	x21, [x0, #8]
    13dc:	ldr	w0, [x21, #8]
    13e0:	tbnz	w0, #0, 1464 <acc_copyin_async+0xcc>
    13e4:	add	x20, x21, #0xa8
    13e8:	mov	w0, #0x1                   	// #1
    13ec:	ldaxr	w1, [x20]
    13f0:	cbnz	w1, 13fc <acc_copyin_async+0x64>
    13f4:	stxr	w2, w0, [x20]
    13f8:	cbnz	w2, 13ec <acc_copyin_async+0x54>
    13fc:	cmp	w1, #0x0
    1400:	b.ne	1580 <acc_copyin_async+0x1e8>  // b.any
    1404:	ldr	x2, [sp, #80]
    1408:	add	x1, sp, #0x58
    140c:	add	x0, x21, #0xa0
    1410:	add	x2, x2, x19
    1414:	stp	x19, x2, [sp, #88]
    1418:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    141c:	cbz	x0, 1474 <acc_copyin_async+0xdc>
    1420:	ldr	x1, [sp, #80]
    1424:	ldr	x2, [x0, #8]
    1428:	add	x1, x19, x1
    142c:	cmp	x1, x2
    1430:	b.hi	158c <acc_copyin_async+0x1f4>  // b.pmore
    1434:	ldr	x1, [x0, #32]
    1438:	cmn	x1, #0x1
    143c:	b.eq	1454 <acc_copyin_async+0xbc>  // b.none
    1440:	ldr	x2, [x0, #40]
    1444:	add	x1, x1, #0x1
    1448:	str	x1, [x0, #32]
    144c:	add	x1, x2, #0x1
    1450:	str	x1, [x0, #40]
    1454:	ldxr	w0, [x20]
    1458:	stlxr	w1, wzr, [x20]
    145c:	cbnz	w1, 1454 <acc_copyin_async+0xbc>
    1460:	tbnz	w0, #31, 151c <acc_copyin_async+0x184>
    1464:	ldp	x19, x20, [sp, #16]
    1468:	ldp	x21, x22, [sp, #32]
    146c:	ldp	x29, x30, [sp], #144
    1470:	ret
    1474:	mov	w0, #0x1                   	// #1
    1478:	strh	w0, [sp, #78]
    147c:	str	x19, [sp, #88]
    1480:	ldxr	w0, [x20]
    1484:	stlxr	w1, wzr, [x20]
    1488:	cbnz	w1, 1480 <acc_copyin_async+0xe8>
    148c:	tbnz	w0, #31, 1560 <acc_copyin_async+0x1c8>
    1490:	cmn	w22, #0x1
    1494:	b.lt	1528 <acc_copyin_async+0x190>  // b.tstop
    1498:	ldr	x1, [x21, #248]
    149c:	mov	w0, w22
    14a0:	blr	x1
    14a4:	add	x2, sp, #0x58
    14a8:	mov	x3, #0x0                   	// #0
    14ac:	mov	x1, #0x1                   	// #1
    14b0:	add	x5, sp, #0x4e
    14b4:	add	x4, sp, #0x50
    14b8:	mov	x0, x21
    14bc:	mov	w7, #0x0                   	// #0
    14c0:	mov	w6, #0x1                   	// #1
    14c4:	bl	0 <gomp_map_vars>
    14c8:	mov	x19, x0
    14cc:	ldr	x1, [x21, #248]
    14d0:	mov	x3, #0x1                   	// #1
    14d4:	ldr	x2, [x19, #64]
    14d8:	mov	w0, #0xfffffffe            	// #-2
    14dc:	str	x3, [x2, #40]
    14e0:	blr	x1
    14e4:	mov	w0, #0x1                   	// #1
    14e8:	ldaxr	w1, [x20]
    14ec:	cbnz	w1, 14f8 <acc_copyin_async+0x160>
    14f0:	stxr	w2, w0, [x20]
    14f4:	cbnz	w2, 14e8 <acc_copyin_async+0x150>
    14f8:	cmp	w1, #0x0
    14fc:	b.ne	15a8 <acc_copyin_async+0x210>  // b.any
    1500:	ldr	x0, [x21, #176]
    1504:	str	x0, [x19, #40]
    1508:	str	x19, [x21, #176]
    150c:	ldxr	w0, [x20]
    1510:	stlxr	w1, wzr, [x20]
    1514:	cbnz	w1, 150c <acc_copyin_async+0x174>
    1518:	tbz	w0, #31, 1464 <acc_copyin_async+0xcc>
    151c:	mov	x0, x20
    1520:	bl	0 <gomp_mutex_unlock_slow>
    1524:	b	1464 <acc_copyin_async+0xcc>
    1528:	mov	x1, #0x1                   	// #1
    152c:	add	x2, sp, #0x58
    1530:	add	x5, sp, #0x4e
    1534:	add	x4, sp, #0x50
    1538:	mov	x0, x21
    153c:	mov	w7, #0x0                   	// #0
    1540:	mov	w6, #0x1                   	// #1
    1544:	mov	x3, #0x0                   	// #0
    1548:	bl	0 <gomp_map_vars>
    154c:	mov	x19, x0
    1550:	ldr	x0, [x0, #64]
    1554:	mov	x1, #0x1                   	// #1
    1558:	str	x1, [x0, #40]
    155c:	b	14e4 <acc_copyin_async+0x14c>
    1560:	mov	x0, x20
    1564:	bl	0 <gomp_mutex_unlock_slow>
    1568:	b	1490 <acc_copyin_async+0xf8>
    156c:	mov	w2, w1
    1570:	mov	x1, x0
    1574:	adrp	x0, 0 <gomp_mutex_unlock>
    1578:	add	x0, x0, #0x0
    157c:	bl	0 <gomp_fatal>
    1580:	mov	x0, x20
    1584:	bl	0 <gomp_mutex_lock_slow>
    1588:	b	1404 <acc_copyin_async+0x6c>
    158c:	mov	x0, x20
    1590:	bl	0 <gomp_mutex_unlock>
    1594:	ldr	w2, [sp, #80]
    1598:	adrp	x0, 0 <gomp_mutex_unlock>
    159c:	mov	x1, x19
    15a0:	add	x0, x0, #0x0
    15a4:	bl	0 <gomp_fatal>
    15a8:	mov	x0, x20
    15ac:	bl	0 <gomp_mutex_lock_slow>
    15b0:	b	1500 <acc_copyin_async+0x168>
    15b4:	nop

00000000000015b8 <acc_delete>:
    15b8:	adrp	x2, 0 <goacc_tls_data>
    15bc:	ldr	x2, [x2]
    15c0:	mrs	x3, tpidr_el0
    15c4:	stp	x29, x30, [sp, #-128]!
    15c8:	mov	x29, sp
    15cc:	stp	x19, x20, [sp, #16]
    15d0:	mov	x19, x0
    15d4:	ldr	x0, [x3, x2]
    15d8:	stp	x21, x22, [sp, #32]
    15dc:	ldr	x21, [x0, #8]
    15e0:	ldr	w0, [x21, #8]
    15e4:	tbnz	w0, #0, 16a0 <acc_delete+0xe8>
    15e8:	mov	x20, x1
    15ec:	add	x22, x21, #0xa8
    15f0:	mov	w0, #0x1                   	// #1
    15f4:	ldaxr	w1, [x22]
    15f8:	cbnz	w1, 1604 <acc_delete+0x4c>
    15fc:	stxr	w2, w0, [x22]
    1600:	cbnz	w2, 15f4 <acc_delete+0x3c>
    1604:	cmp	w1, #0x0
    1608:	b.ne	171c <acc_delete+0x164>  // b.any
    160c:	add	x2, x20, x19
    1610:	add	x1, sp, #0x48
    1614:	add	x0, x21, #0xa0
    1618:	stp	x19, x2, [sp, #72]
    161c:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1620:	mov	x1, x0
    1624:	cbz	x0, 173c <acc_delete+0x184>
    1628:	ldp	x0, x2, [x0]
    162c:	ldr	x3, [x1, #16]
    1630:	cmp	x19, x0
    1634:	sub	x2, x2, x0
    1638:	ccmp	x20, x2, #0x0, eq  // eq = none
    163c:	b.ne	16f4 <acc_delete+0x13c>  // b.any
    1640:	ldr	x0, [x1, #32]
    1644:	cmn	x0, #0x1
    1648:	b.eq	1670 <acc_delete+0xb8>  // b.none
    164c:	ldr	x2, [x1, #40]
    1650:	cmp	x0, x2
    1654:	b.cc	1728 <acc_delete+0x170>  // b.lo, b.ul, b.last
    1658:	cbz	x2, 1668 <acc_delete+0xb0>
    165c:	sub	x2, x2, #0x1
    1660:	sub	x0, x0, #0x1
    1664:	stp	x0, x2, [x1, #32]
    1668:	cbnz	x0, 1688 <acc_delete+0xd0>
    166c:	b	1674 <acc_delete+0xbc>
    1670:	stp	xzr, xzr, [x1, #32]
    1674:	ldr	x0, [x3]
    1678:	cmp	x0, #0x2
    167c:	b.eq	16b0 <acc_delete+0xf8>  // b.none
    1680:	mov	x0, x21
    1684:	bl	0 <gomp_remove_var>
    1688:	ldxr	w0, [x22]
    168c:	stlxr	w1, wzr, [x22]
    1690:	cbnz	w1, 1688 <acc_delete+0xd0>
    1694:	tbz	w0, #31, 16a0 <acc_delete+0xe8>
    1698:	mov	x0, x22
    169c:	bl	0 <gomp_mutex_unlock_slow>
    16a0:	ldp	x19, x20, [sp, #16]
    16a4:	ldp	x21, x22, [sp, #32]
    16a8:	ldp	x29, x30, [sp], #128
    16ac:	ret
    16b0:	ldr	x4, [x21, #176]
    16b4:	cbz	x4, 1680 <acc_delete+0xc8>
    16b8:	cmp	x3, x4
    16bc:	ldr	x0, [x4, #40]
    16c0:	b.eq	16e4 <acc_delete+0x12c>  // b.none
    16c4:	nop
    16c8:	cbz	x0, 1680 <acc_delete+0xc8>
    16cc:	cmp	x3, x0
    16d0:	ldr	x2, [x0, #40]
    16d4:	b.eq	16ec <acc_delete+0x134>  // b.none
    16d8:	mov	x4, x0
    16dc:	mov	x0, x2
    16e0:	b	16c8 <acc_delete+0x110>
    16e4:	str	x0, [x21, #176]
    16e8:	b	1680 <acc_delete+0xc8>
    16ec:	str	x2, [x4, #40]
    16f0:	b	1680 <acc_delete+0xc8>
    16f4:	mov	x0, x22
    16f8:	stp	x1, x2, [sp, #48]
    16fc:	bl	0 <gomp_mutex_unlock>
    1700:	ldp	x1, x2, [sp, #48]
    1704:	adrp	x0, 0 <gomp_mutex_unlock>
    1708:	mov	w4, w20
    170c:	mov	x3, x19
    1710:	add	x0, x0, #0x0
    1714:	ldr	x1, [x1]
    1718:	bl	0 <gomp_fatal>
    171c:	mov	x0, x22
    1720:	bl	0 <gomp_mutex_lock_slow>
    1724:	b	160c <acc_delete+0x54>
    1728:	mov	x0, x22
    172c:	bl	0 <gomp_mutex_unlock>
    1730:	adrp	x0, 0 <gomp_mutex_unlock>
    1734:	add	x0, x0, #0x0
    1738:	bl	0 <gomp_fatal>
    173c:	mov	x0, x22
    1740:	bl	0 <gomp_mutex_unlock>
    1744:	adrp	x0, 0 <gomp_mutex_unlock>
    1748:	mov	w2, w20
    174c:	mov	x1, x19
    1750:	add	x0, x0, #0x0
    1754:	bl	0 <gomp_fatal>

0000000000001758 <acc_delete_async>:
    1758:	adrp	x2, 0 <goacc_tls_data>
    175c:	ldr	x2, [x2]
    1760:	mrs	x3, tpidr_el0
    1764:	stp	x29, x30, [sp, #-128]!
    1768:	mov	x29, sp
    176c:	stp	x19, x20, [sp, #16]
    1770:	mov	x19, x0
    1774:	ldr	x0, [x3, x2]
    1778:	stp	x21, x22, [sp, #32]
    177c:	ldr	x21, [x0, #8]
    1780:	ldr	w0, [x21, #8]
    1784:	tbnz	w0, #0, 1844 <acc_delete_async+0xec>
    1788:	mov	x20, x1
    178c:	add	x22, x21, #0xa8
    1790:	mov	w0, #0x1                   	// #1
    1794:	ldaxr	w1, [x22]
    1798:	cbnz	w1, 17a4 <acc_delete_async+0x4c>
    179c:	stxr	w2, w0, [x22]
    17a0:	cbnz	w2, 1794 <acc_delete_async+0x3c>
    17a4:	cmp	w1, #0x0
    17a8:	b.ne	18bc <acc_delete_async+0x164>  // b.any
    17ac:	add	x2, x20, x19
    17b0:	add	x1, sp, #0x48
    17b4:	add	x0, x21, #0xa0
    17b8:	stp	x19, x2, [sp, #72]
    17bc:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    17c0:	str	x0, [sp, #48]
    17c4:	mov	x1, x0
    17c8:	cbz	x0, 18dc <acc_delete_async+0x184>
    17cc:	ldp	x0, x2, [x0]
    17d0:	ldr	x3, [x1, #16]
    17d4:	cmp	x19, x0
    17d8:	sub	x2, x2, x0
    17dc:	ccmp	x20, x2, #0x0, eq  // eq = none
    17e0:	b.ne	1894 <acc_delete_async+0x13c>  // b.any
    17e4:	ldr	x0, [x1, #32]
    17e8:	cmn	x0, #0x1
    17ec:	b.eq	1814 <acc_delete_async+0xbc>  // b.none
    17f0:	ldr	x2, [x1, #40]
    17f4:	cmp	x0, x2
    17f8:	b.cc	18c8 <acc_delete_async+0x170>  // b.lo, b.ul, b.last
    17fc:	cbz	x2, 180c <acc_delete_async+0xb4>
    1800:	sub	x2, x2, #0x1
    1804:	sub	x0, x0, #0x1
    1808:	stp	x0, x2, [x1, #32]
    180c:	cbnz	x0, 182c <acc_delete_async+0xd4>
    1810:	b	1818 <acc_delete_async+0xc0>
    1814:	stp	xzr, xzr, [x1, #32]
    1818:	ldr	x0, [x3]
    181c:	cmp	x0, #0x2
    1820:	b.eq	1854 <acc_delete_async+0xfc>  // b.none
    1824:	mov	x0, x21
    1828:	bl	0 <gomp_remove_var>
    182c:	ldxr	w0, [x22]
    1830:	stlxr	w1, wzr, [x22]
    1834:	cbnz	w1, 182c <acc_delete_async+0xd4>
    1838:	tbz	w0, #31, 1844 <acc_delete_async+0xec>
    183c:	mov	x0, x22
    1840:	bl	0 <gomp_mutex_unlock_slow>
    1844:	ldp	x19, x20, [sp, #16]
    1848:	ldp	x21, x22, [sp, #32]
    184c:	ldp	x29, x30, [sp], #128
    1850:	ret
    1854:	ldr	x4, [x21, #176]
    1858:	cbz	x4, 1824 <acc_delete_async+0xcc>
    185c:	cmp	x3, x4
    1860:	ldr	x0, [x4, #40]
    1864:	b.eq	1884 <acc_delete_async+0x12c>  // b.none
    1868:	cbz	x0, 1824 <acc_delete_async+0xcc>
    186c:	cmp	x3, x0
    1870:	ldr	x2, [x0, #40]
    1874:	b.eq	188c <acc_delete_async+0x134>  // b.none
    1878:	mov	x4, x0
    187c:	mov	x0, x2
    1880:	b	1868 <acc_delete_async+0x110>
    1884:	str	x0, [x21, #176]
    1888:	b	1824 <acc_delete_async+0xcc>
    188c:	str	x2, [x4, #40]
    1890:	b	1824 <acc_delete_async+0xcc>
    1894:	mov	x0, x22
    1898:	stp	x1, x2, [sp, #48]
    189c:	bl	0 <gomp_mutex_unlock>
    18a0:	ldp	x1, x2, [sp, #48]
    18a4:	adrp	x0, 0 <gomp_mutex_unlock>
    18a8:	mov	w4, w20
    18ac:	mov	x3, x19
    18b0:	add	x0, x0, #0x0
    18b4:	ldr	x1, [x1]
    18b8:	bl	0 <gomp_fatal>
    18bc:	mov	x0, x22
    18c0:	bl	0 <gomp_mutex_lock_slow>
    18c4:	b	17ac <acc_delete_async+0x54>
    18c8:	mov	x0, x22
    18cc:	bl	0 <gomp_mutex_unlock>
    18d0:	adrp	x0, 0 <gomp_mutex_unlock>
    18d4:	add	x0, x0, #0x0
    18d8:	bl	0 <gomp_fatal>
    18dc:	mov	x0, x22
    18e0:	bl	0 <gomp_mutex_unlock>
    18e4:	adrp	x0, 0 <gomp_mutex_unlock>
    18e8:	mov	w2, w20
    18ec:	mov	x1, x19
    18f0:	add	x0, x0, #0x0
    18f4:	bl	0 <gomp_fatal>

00000000000018f8 <acc_delete_finalize>:
    18f8:	adrp	x2, 0 <goacc_tls_data>
    18fc:	ldr	x2, [x2]
    1900:	mrs	x3, tpidr_el0
    1904:	stp	x29, x30, [sp, #-128]!
    1908:	mov	x29, sp
    190c:	stp	x19, x20, [sp, #16]
    1910:	mov	x19, x0
    1914:	ldr	x0, [x3, x2]
    1918:	stp	x21, x22, [sp, #32]
    191c:	ldr	x21, [x0, #8]
    1920:	ldr	w0, [x21, #8]
    1924:	tbnz	w0, #0, 19b4 <acc_delete_finalize+0xbc>
    1928:	mov	x20, x1
    192c:	add	x22, x21, #0xa8
    1930:	mov	w0, #0x1                   	// #1
    1934:	ldaxr	w1, [x22]
    1938:	cbnz	w1, 1944 <acc_delete_finalize+0x4c>
    193c:	stxr	w2, w0, [x22]
    1940:	cbnz	w2, 1934 <acc_delete_finalize+0x3c>
    1944:	cmp	w1, #0x0
    1948:	b.ne	1a70 <acc_delete_finalize+0x178>  // b.any
    194c:	add	x2, x20, x19
    1950:	add	x1, sp, #0x48
    1954:	add	x0, x21, #0xa0
    1958:	stp	x19, x2, [sp, #72]
    195c:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1960:	mov	x1, x0
    1964:	cbz	x0, 1a54 <acc_delete_finalize+0x15c>
    1968:	ldp	x0, x2, [x0]
    196c:	ldr	x3, [x1, #16]
    1970:	cmp	x19, x0
    1974:	sub	x2, x2, x0
    1978:	ccmp	x20, x2, #0x0, eq  // eq = none
    197c:	b.ne	1a2c <acc_delete_finalize+0x134>  // b.any
    1980:	ldr	x0, [x1, #32]
    1984:	cmn	x0, #0x1
    1988:	b.eq	19c4 <acc_delete_finalize+0xcc>  // b.none
    198c:	ldr	x2, [x1, #40]
    1990:	cmp	x0, x2
    1994:	b.cc	1a7c <acc_delete_finalize+0x184>  // b.lo, b.ul, b.last
    1998:	sub	x0, x0, x2
    199c:	stp	x0, xzr, [x1, #32]
    19a0:	cbz	x0, 19c8 <acc_delete_finalize+0xd0>
    19a4:	ldxr	w0, [x22]
    19a8:	stlxr	w1, wzr, [x22]
    19ac:	cbnz	w1, 19a4 <acc_delete_finalize+0xac>
    19b0:	tbnz	w0, #31, 19e0 <acc_delete_finalize+0xe8>
    19b4:	ldp	x19, x20, [sp, #16]
    19b8:	ldp	x21, x22, [sp, #32]
    19bc:	ldp	x29, x30, [sp], #128
    19c0:	ret
    19c4:	stp	xzr, xzr, [x1, #32]
    19c8:	ldr	x0, [x3]
    19cc:	cmp	x0, #0x2
    19d0:	b.eq	19ec <acc_delete_finalize+0xf4>  // b.none
    19d4:	mov	x0, x21
    19d8:	bl	0 <gomp_remove_var>
    19dc:	b	19a4 <acc_delete_finalize+0xac>
    19e0:	mov	x0, x22
    19e4:	bl	0 <gomp_mutex_unlock_slow>
    19e8:	b	19b4 <acc_delete_finalize+0xbc>
    19ec:	ldr	x4, [x21, #176]
    19f0:	cbz	x4, 19d4 <acc_delete_finalize+0xdc>
    19f4:	cmp	x3, x4
    19f8:	ldr	x0, [x4, #40]
    19fc:	b.eq	1a1c <acc_delete_finalize+0x124>  // b.none
    1a00:	cbz	x0, 19d4 <acc_delete_finalize+0xdc>
    1a04:	cmp	x3, x0
    1a08:	ldr	x2, [x0, #40]
    1a0c:	b.eq	1a24 <acc_delete_finalize+0x12c>  // b.none
    1a10:	mov	x4, x0
    1a14:	mov	x0, x2
    1a18:	b	1a00 <acc_delete_finalize+0x108>
    1a1c:	str	x0, [x21, #176]
    1a20:	b	19d4 <acc_delete_finalize+0xdc>
    1a24:	str	x2, [x4, #40]
    1a28:	b	19d4 <acc_delete_finalize+0xdc>
    1a2c:	mov	x0, x22
    1a30:	stp	x1, x2, [sp, #48]
    1a34:	bl	0 <gomp_mutex_unlock>
    1a38:	ldp	x1, x2, [sp, #48]
    1a3c:	adrp	x0, 0 <gomp_mutex_unlock>
    1a40:	mov	w4, w20
    1a44:	mov	x3, x19
    1a48:	add	x0, x0, #0x0
    1a4c:	ldr	x1, [x1]
    1a50:	bl	0 <gomp_fatal>
    1a54:	mov	x0, x22
    1a58:	bl	0 <gomp_mutex_unlock>
    1a5c:	adrp	x0, 0 <gomp_mutex_unlock>
    1a60:	mov	w2, w20
    1a64:	mov	x1, x19
    1a68:	add	x0, x0, #0x0
    1a6c:	bl	0 <gomp_fatal>
    1a70:	mov	x0, x22
    1a74:	bl	0 <gomp_mutex_lock_slow>
    1a78:	b	194c <acc_delete_finalize+0x54>
    1a7c:	mov	x0, x22
    1a80:	bl	0 <gomp_mutex_unlock>
    1a84:	adrp	x0, 0 <gomp_mutex_unlock>
    1a88:	add	x0, x0, #0x0
    1a8c:	bl	0 <gomp_fatal>

0000000000001a90 <acc_delete_finalize_async>:
    1a90:	adrp	x2, 0 <goacc_tls_data>
    1a94:	ldr	x2, [x2]
    1a98:	mrs	x3, tpidr_el0
    1a9c:	stp	x29, x30, [sp, #-128]!
    1aa0:	mov	x29, sp
    1aa4:	stp	x19, x20, [sp, #16]
    1aa8:	mov	x19, x0
    1aac:	ldr	x0, [x3, x2]
    1ab0:	stp	x21, x22, [sp, #32]
    1ab4:	ldr	x21, [x0, #8]
    1ab8:	ldr	w0, [x21, #8]
    1abc:	tbnz	w0, #0, 1b50 <acc_delete_finalize_async+0xc0>
    1ac0:	mov	x20, x1
    1ac4:	add	x22, x21, #0xa8
    1ac8:	mov	w0, #0x1                   	// #1
    1acc:	ldaxr	w1, [x22]
    1ad0:	cbnz	w1, 1adc <acc_delete_finalize_async+0x4c>
    1ad4:	stxr	w2, w0, [x22]
    1ad8:	cbnz	w2, 1acc <acc_delete_finalize_async+0x3c>
    1adc:	cmp	w1, #0x0
    1ae0:	b.ne	1c10 <acc_delete_finalize_async+0x180>  // b.any
    1ae4:	add	x2, x20, x19
    1ae8:	add	x1, sp, #0x48
    1aec:	add	x0, x21, #0xa0
    1af0:	stp	x19, x2, [sp, #72]
    1af4:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1af8:	str	x0, [sp, #48]
    1afc:	mov	x1, x0
    1b00:	cbz	x0, 1bf4 <acc_delete_finalize_async+0x164>
    1b04:	ldp	x0, x2, [x0]
    1b08:	ldr	x3, [x1, #16]
    1b0c:	cmp	x19, x0
    1b10:	sub	x2, x2, x0
    1b14:	ccmp	x20, x2, #0x0, eq  // eq = none
    1b18:	b.ne	1bcc <acc_delete_finalize_async+0x13c>  // b.any
    1b1c:	ldr	x0, [x1, #32]
    1b20:	cmn	x0, #0x1
    1b24:	b.eq	1b60 <acc_delete_finalize_async+0xd0>  // b.none
    1b28:	ldr	x2, [x1, #40]
    1b2c:	cmp	x0, x2
    1b30:	b.cc	1c1c <acc_delete_finalize_async+0x18c>  // b.lo, b.ul, b.last
    1b34:	sub	x0, x0, x2
    1b38:	stp	x0, xzr, [x1, #32]
    1b3c:	cbz	x0, 1b64 <acc_delete_finalize_async+0xd4>
    1b40:	ldxr	w0, [x22]
    1b44:	stlxr	w1, wzr, [x22]
    1b48:	cbnz	w1, 1b40 <acc_delete_finalize_async+0xb0>
    1b4c:	tbnz	w0, #31, 1b7c <acc_delete_finalize_async+0xec>
    1b50:	ldp	x19, x20, [sp, #16]
    1b54:	ldp	x21, x22, [sp, #32]
    1b58:	ldp	x29, x30, [sp], #128
    1b5c:	ret
    1b60:	stp	xzr, xzr, [x1, #32]
    1b64:	ldr	x0, [x3]
    1b68:	cmp	x0, #0x2
    1b6c:	b.eq	1b88 <acc_delete_finalize_async+0xf8>  // b.none
    1b70:	mov	x0, x21
    1b74:	bl	0 <gomp_remove_var>
    1b78:	b	1b40 <acc_delete_finalize_async+0xb0>
    1b7c:	mov	x0, x22
    1b80:	bl	0 <gomp_mutex_unlock_slow>
    1b84:	b	1b50 <acc_delete_finalize_async+0xc0>
    1b88:	ldr	x4, [x21, #176]
    1b8c:	cbz	x4, 1b70 <acc_delete_finalize_async+0xe0>
    1b90:	cmp	x3, x4
    1b94:	ldr	x0, [x4, #40]
    1b98:	b.eq	1bbc <acc_delete_finalize_async+0x12c>  // b.none
    1b9c:	nop
    1ba0:	cbz	x0, 1b70 <acc_delete_finalize_async+0xe0>
    1ba4:	cmp	x3, x0
    1ba8:	ldr	x2, [x0, #40]
    1bac:	b.eq	1bc4 <acc_delete_finalize_async+0x134>  // b.none
    1bb0:	mov	x4, x0
    1bb4:	mov	x0, x2
    1bb8:	b	1ba0 <acc_delete_finalize_async+0x110>
    1bbc:	str	x0, [x21, #176]
    1bc0:	b	1b70 <acc_delete_finalize_async+0xe0>
    1bc4:	str	x2, [x4, #40]
    1bc8:	b	1b70 <acc_delete_finalize_async+0xe0>
    1bcc:	mov	x0, x22
    1bd0:	stp	x1, x2, [sp, #48]
    1bd4:	bl	0 <gomp_mutex_unlock>
    1bd8:	ldp	x1, x2, [sp, #48]
    1bdc:	adrp	x0, 0 <gomp_mutex_unlock>
    1be0:	mov	w4, w20
    1be4:	mov	x3, x19
    1be8:	add	x0, x0, #0x0
    1bec:	ldr	x1, [x1]
    1bf0:	bl	0 <gomp_fatal>
    1bf4:	mov	x0, x22
    1bf8:	bl	0 <gomp_mutex_unlock>
    1bfc:	adrp	x0, 0 <gomp_mutex_unlock>
    1c00:	mov	w2, w20
    1c04:	mov	x1, x19
    1c08:	add	x0, x0, #0x0
    1c0c:	bl	0 <gomp_fatal>
    1c10:	mov	x0, x22
    1c14:	bl	0 <gomp_mutex_lock_slow>
    1c18:	b	1ae4 <acc_delete_finalize_async+0x54>
    1c1c:	mov	x0, x22
    1c20:	bl	0 <gomp_mutex_unlock>
    1c24:	adrp	x0, 0 <gomp_mutex_unlock>
    1c28:	add	x0, x0, #0x0
    1c2c:	bl	0 <gomp_fatal>

0000000000001c30 <acc_copyout>:
    1c30:	adrp	x2, 0 <goacc_tls_data>
    1c34:	ldr	x2, [x2]
    1c38:	mrs	x5, tpidr_el0
    1c3c:	stp	x29, x30, [sp, #-128]!
    1c40:	mov	x29, sp
    1c44:	stp	x19, x20, [sp, #16]
    1c48:	mov	x20, x0
    1c4c:	ldr	x0, [x5, x2]
    1c50:	stp	x21, x22, [sp, #32]
    1c54:	ldr	x22, [x0, #8]
    1c58:	ldr	w0, [x22, #8]
    1c5c:	tbnz	w0, #0, 1d40 <acc_copyout+0x110>
    1c60:	mov	x21, x1
    1c64:	stp	x23, x24, [sp, #48]
    1c68:	add	x23, x22, #0xa8
    1c6c:	mov	w0, #0x1                   	// #1
    1c70:	ldaxr	w1, [x23]
    1c74:	cbnz	w1, 1c80 <acc_copyout+0x50>
    1c78:	stxr	w2, w0, [x23]
    1c7c:	cbnz	w2, 1c70 <acc_copyout+0x40>
    1c80:	cmp	w1, #0x0
    1c84:	b.ne	1dc8 <acc_copyout+0x198>  // b.any
    1c88:	add	x2, x21, x20
    1c8c:	add	x1, sp, #0x48
    1c90:	add	x0, x22, #0xa0
    1c94:	stp	x20, x2, [sp, #72]
    1c98:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1c9c:	mov	x19, x0
    1ca0:	cbz	x0, 1de8 <acc_copyout+0x1b8>
    1ca4:	ldp	x3, x24, [x0]
    1ca8:	ldp	x1, x2, [x0, #16]
    1cac:	cmp	x20, x3
    1cb0:	sub	x24, x24, x3
    1cb4:	ccmp	x21, x24, #0x0, eq  // eq = none
    1cb8:	add	x2, x20, x2
    1cbc:	ldr	x5, [x1, #16]
    1cc0:	b.ne	1da4 <acc_copyout+0x174>  // b.any
    1cc4:	ldr	x0, [x0, #32]
    1cc8:	cmn	x0, #0x1
    1ccc:	b.eq	1cf4 <acc_copyout+0xc4>  // b.none
    1cd0:	ldr	x4, [x19, #40]
    1cd4:	cmp	x0, x4
    1cd8:	b.cc	1dd4 <acc_copyout+0x1a4>  // b.lo, b.ul, b.last
    1cdc:	cbz	x4, 1cec <acc_copyout+0xbc>
    1ce0:	sub	x4, x4, #0x1
    1ce4:	sub	x0, x0, #0x1
    1ce8:	stp	x0, x4, [x19, #32]
    1cec:	cbnz	x0, 1d2c <acc_copyout+0xfc>
    1cf0:	b	1cf8 <acc_copyout+0xc8>
    1cf4:	stp	xzr, xzr, [x19, #32]
    1cf8:	ldr	x0, [x1]
    1cfc:	cmp	x0, #0x2
    1d00:	b.eq	1d50 <acc_copyout+0x120>  // b.none
    1d04:	ldr	w0, [x22, #12]
    1d08:	sub	x3, x5, x3
    1d0c:	ldr	x4, [x22, #112]
    1d10:	add	x2, x3, x2
    1d14:	mov	x3, x21
    1d18:	mov	x1, x20
    1d1c:	blr	x4
    1d20:	mov	x1, x19
    1d24:	mov	x0, x22
    1d28:	bl	0 <gomp_remove_var>
    1d2c:	ldxr	w0, [x23]
    1d30:	stlxr	w1, wzr, [x23]
    1d34:	cbnz	w1, 1d2c <acc_copyout+0xfc>
    1d38:	tbnz	w0, #31, 1d84 <acc_copyout+0x154>
    1d3c:	ldp	x23, x24, [sp, #48]
    1d40:	ldp	x19, x20, [sp, #16]
    1d44:	ldp	x21, x22, [sp, #32]
    1d48:	ldp	x29, x30, [sp], #128
    1d4c:	ret
    1d50:	ldr	x6, [x22, #176]
    1d54:	cbz	x6, 1d04 <acc_copyout+0xd4>
    1d58:	cmp	x1, x6
    1d5c:	ldr	x0, [x6, #40]
    1d60:	b.eq	1d94 <acc_copyout+0x164>  // b.none
    1d64:	nop
    1d68:	cbz	x0, 1d04 <acc_copyout+0xd4>
    1d6c:	cmp	x1, x0
    1d70:	ldr	x4, [x0, #40]
    1d74:	b.eq	1d9c <acc_copyout+0x16c>  // b.none
    1d78:	mov	x6, x0
    1d7c:	mov	x0, x4
    1d80:	b	1d68 <acc_copyout+0x138>
    1d84:	mov	x0, x23
    1d88:	bl	0 <gomp_mutex_unlock_slow>
    1d8c:	ldp	x23, x24, [sp, #48]
    1d90:	b	1d40 <acc_copyout+0x110>
    1d94:	str	x0, [x22, #176]
    1d98:	b	1d04 <acc_copyout+0xd4>
    1d9c:	str	x4, [x6, #40]
    1da0:	b	1d04 <acc_copyout+0xd4>
    1da4:	mov	x0, x23
    1da8:	bl	0 <gomp_mutex_unlock>
    1dac:	ldr	x1, [x19]
    1db0:	adrp	x0, 0 <gomp_mutex_unlock>
    1db4:	mov	w4, w21
    1db8:	mov	x3, x20
    1dbc:	mov	w2, w24
    1dc0:	add	x0, x0, #0x0
    1dc4:	bl	0 <gomp_fatal>
    1dc8:	mov	x0, x23
    1dcc:	bl	0 <gomp_mutex_lock_slow>
    1dd0:	b	1c88 <acc_copyout+0x58>
    1dd4:	mov	x0, x23
    1dd8:	bl	0 <gomp_mutex_unlock>
    1ddc:	adrp	x0, 0 <gomp_mutex_unlock>
    1de0:	add	x0, x0, #0x0
    1de4:	bl	0 <gomp_fatal>
    1de8:	mov	x0, x23
    1dec:	bl	0 <gomp_mutex_unlock>
    1df0:	adrp	x0, 0 <gomp_mutex_unlock>
    1df4:	mov	w2, w21
    1df8:	mov	x1, x20
    1dfc:	add	x0, x0, #0x0
    1e00:	bl	0 <gomp_fatal>
    1e04:	nop

0000000000001e08 <acc_copyout_async>:
    1e08:	adrp	x5, 0 <goacc_tls_data>
    1e0c:	ldr	x5, [x5]
    1e10:	mrs	x6, tpidr_el0
    1e14:	stp	x29, x30, [sp, #-144]!
    1e18:	mov	x29, sp
    1e1c:	stp	x19, x20, [sp, #16]
    1e20:	mov	x20, x0
    1e24:	ldr	x0, [x6, x5]
    1e28:	str	x25, [sp, #64]
    1e2c:	ldr	x25, [x0, #8]
    1e30:	ldr	w0, [x25, #8]
    1e34:	tbnz	w0, #0, 1ee8 <acc_copyout_async+0xe0>
    1e38:	stp	x21, x22, [sp, #32]
    1e3c:	mov	x21, x1
    1e40:	add	x22, x25, #0xa8
    1e44:	stp	x23, x24, [sp, #48]
    1e48:	mov	w24, w2
    1e4c:	mov	w0, #0x1                   	// #1
    1e50:	ldaxr	w1, [x22]
    1e54:	cbnz	w1, 1e60 <acc_copyout_async+0x58>
    1e58:	stxr	w2, w0, [x22]
    1e5c:	cbnz	w2, 1e50 <acc_copyout_async+0x48>
    1e60:	cmp	w1, #0x0
    1e64:	b.ne	1fec <acc_copyout_async+0x1e4>  // b.any
    1e68:	add	x2, x21, x20
    1e6c:	add	x1, sp, #0x58
    1e70:	add	x0, x25, #0xa0
    1e74:	stp	x20, x2, [sp, #88]
    1e78:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1e7c:	mov	x19, x0
    1e80:	cbz	x0, 200c <acc_copyout_async+0x204>
    1e84:	ldp	x4, x23, [x0]
    1e88:	ldp	x1, x0, [x0, #16]
    1e8c:	cmp	x20, x4
    1e90:	sub	x23, x23, x4
    1e94:	ccmp	x21, x23, #0x0, eq  // eq = none
    1e98:	add	x3, x20, x0
    1e9c:	ldr	x5, [x1, #16]
    1ea0:	b.ne	1fc8 <acc_copyout_async+0x1c0>  // b.any
    1ea4:	ldr	x0, [x19, #32]
    1ea8:	cmn	x0, #0x1
    1eac:	b.eq	1ef8 <acc_copyout_async+0xf0>  // b.none
    1eb0:	ldr	x2, [x19, #40]
    1eb4:	cmp	x0, x2
    1eb8:	b.cc	1ff8 <acc_copyout_async+0x1f0>  // b.lo, b.ul, b.last
    1ebc:	cbz	x2, 1ecc <acc_copyout_async+0xc4>
    1ec0:	sub	x2, x2, #0x1
    1ec4:	sub	x0, x0, #0x1
    1ec8:	stp	x0, x2, [x19, #32]
    1ecc:	cbz	x0, 1efc <acc_copyout_async+0xf4>
    1ed0:	ldxr	w0, [x22]
    1ed4:	stlxr	w1, wzr, [x22]
    1ed8:	cbnz	w1, 1ed0 <acc_copyout_async+0xc8>
    1edc:	tbnz	w0, #31, 1fa4 <acc_copyout_async+0x19c>
    1ee0:	ldp	x21, x22, [sp, #32]
    1ee4:	ldp	x23, x24, [sp, #48]
    1ee8:	ldp	x19, x20, [sp, #16]
    1eec:	ldr	x25, [sp, #64]
    1ef0:	ldp	x29, x30, [sp], #144
    1ef4:	ret
    1ef8:	stp	xzr, xzr, [x19, #32]
    1efc:	ldr	x0, [x1]
    1f00:	cmp	x0, #0x2
    1f04:	b.eq	1f74 <acc_copyout_async+0x16c>  // b.none
    1f08:	sub	x4, x5, x4
    1f0c:	cmn	w24, #0x1
    1f10:	add	x23, x4, x3
    1f14:	b.lt	1f58 <acc_copyout_async+0x150>  // b.tstop
    1f18:	ldr	x1, [x25, #248]
    1f1c:	mov	w0, w24
    1f20:	blr	x1
    1f24:	ldr	w0, [x25, #12]
    1f28:	mov	x1, x20
    1f2c:	ldr	x4, [x25, #112]
    1f30:	mov	x3, x21
    1f34:	mov	x2, x23
    1f38:	blr	x4
    1f3c:	ldr	x1, [x25, #248]
    1f40:	mov	w0, #0xfffffffe            	// #-2
    1f44:	blr	x1
    1f48:	mov	x1, x19
    1f4c:	mov	x0, x25
    1f50:	bl	0 <gomp_remove_var>
    1f54:	b	1ed0 <acc_copyout_async+0xc8>
    1f58:	ldr	w0, [x25, #12]
    1f5c:	mov	x3, x21
    1f60:	ldr	x4, [x25, #112]
    1f64:	mov	x2, x23
    1f68:	mov	x1, x20
    1f6c:	blr	x4
    1f70:	b	1f48 <acc_copyout_async+0x140>
    1f74:	ldr	x6, [x25, #176]
    1f78:	cbz	x6, 1f08 <acc_copyout_async+0x100>
    1f7c:	cmp	x1, x6
    1f80:	ldr	x0, [x6, #40]
    1f84:	b.eq	1fb8 <acc_copyout_async+0x1b0>  // b.none
    1f88:	cbz	x0, 1f08 <acc_copyout_async+0x100>
    1f8c:	cmp	x1, x0
    1f90:	ldr	x2, [x0, #40]
    1f94:	b.eq	1fc0 <acc_copyout_async+0x1b8>  // b.none
    1f98:	mov	x6, x0
    1f9c:	mov	x0, x2
    1fa0:	b	1f88 <acc_copyout_async+0x180>
    1fa4:	mov	x0, x22
    1fa8:	bl	0 <gomp_mutex_unlock_slow>
    1fac:	ldp	x21, x22, [sp, #32]
    1fb0:	ldp	x23, x24, [sp, #48]
    1fb4:	b	1ee8 <acc_copyout_async+0xe0>
    1fb8:	str	x0, [x25, #176]
    1fbc:	b	1f08 <acc_copyout_async+0x100>
    1fc0:	str	x2, [x6, #40]
    1fc4:	b	1f08 <acc_copyout_async+0x100>
    1fc8:	mov	x0, x22
    1fcc:	bl	0 <gomp_mutex_unlock>
    1fd0:	ldr	x1, [x19]
    1fd4:	adrp	x0, 0 <gomp_mutex_unlock>
    1fd8:	mov	w4, w21
    1fdc:	mov	x3, x20
    1fe0:	mov	w2, w23
    1fe4:	add	x0, x0, #0x0
    1fe8:	bl	0 <gomp_fatal>
    1fec:	mov	x0, x22
    1ff0:	bl	0 <gomp_mutex_lock_slow>
    1ff4:	b	1e68 <acc_copyout_async+0x60>
    1ff8:	mov	x0, x22
    1ffc:	bl	0 <gomp_mutex_unlock>
    2000:	adrp	x0, 0 <gomp_mutex_unlock>
    2004:	add	x0, x0, #0x0
    2008:	bl	0 <gomp_fatal>
    200c:	mov	x0, x22
    2010:	bl	0 <gomp_mutex_unlock>
    2014:	adrp	x0, 0 <gomp_mutex_unlock>
    2018:	mov	w2, w21
    201c:	mov	x1, x20
    2020:	add	x0, x0, #0x0
    2024:	bl	0 <gomp_fatal>

0000000000002028 <acc_copyout_finalize>:
    2028:	adrp	x2, 0 <goacc_tls_data>
    202c:	ldr	x2, [x2]
    2030:	mrs	x5, tpidr_el0
    2034:	stp	x29, x30, [sp, #-128]!
    2038:	mov	x29, sp
    203c:	stp	x19, x20, [sp, #16]
    2040:	mov	x20, x0
    2044:	ldr	x0, [x5, x2]
    2048:	stp	x21, x22, [sp, #32]
    204c:	ldr	x22, [x0, #8]
    2050:	ldr	w0, [x22, #8]
    2054:	tbnz	w0, #0, 20f4 <acc_copyout_finalize+0xcc>
    2058:	mov	x21, x1
    205c:	stp	x23, x24, [sp, #48]
    2060:	add	x23, x22, #0xa8
    2064:	mov	w0, #0x1                   	// #1
    2068:	ldaxr	w1, [x23]
    206c:	cbnz	w1, 2078 <acc_copyout_finalize+0x50>
    2070:	stxr	w2, w0, [x23]
    2074:	cbnz	w2, 2068 <acc_copyout_finalize+0x40>
    2078:	cmp	w1, #0x0
    207c:	b.ne	21b8 <acc_copyout_finalize+0x190>  // b.any
    2080:	add	x2, x21, x20
    2084:	add	x1, sp, #0x48
    2088:	add	x0, x22, #0xa0
    208c:	stp	x20, x2, [sp, #72]
    2090:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    2094:	mov	x19, x0
    2098:	cbz	x0, 21d8 <acc_copyout_finalize+0x1b0>
    209c:	ldp	x3, x24, [x0]
    20a0:	ldp	x1, x2, [x0, #16]
    20a4:	cmp	x20, x3
    20a8:	sub	x24, x24, x3
    20ac:	ccmp	x21, x24, #0x0, eq  // eq = none
    20b0:	add	x2, x20, x2
    20b4:	ldr	x5, [x1, #16]
    20b8:	b.ne	2194 <acc_copyout_finalize+0x16c>  // b.any
    20bc:	ldr	x0, [x0, #32]
    20c0:	cmn	x0, #0x1
    20c4:	b.eq	2104 <acc_copyout_finalize+0xdc>  // b.none
    20c8:	ldr	x4, [x19, #40]
    20cc:	cmp	x0, x4
    20d0:	b.cc	21c4 <acc_copyout_finalize+0x19c>  // b.lo, b.ul, b.last
    20d4:	sub	x0, x0, x4
    20d8:	stp	x0, xzr, [x19, #32]
    20dc:	cbz	x0, 2108 <acc_copyout_finalize+0xe0>
    20e0:	ldxr	w0, [x23]
    20e4:	stlxr	w1, wzr, [x23]
    20e8:	cbnz	w1, 20e0 <acc_copyout_finalize+0xb8>
    20ec:	tbnz	w0, #31, 2174 <acc_copyout_finalize+0x14c>
    20f0:	ldp	x23, x24, [sp, #48]
    20f4:	ldp	x19, x20, [sp, #16]
    20f8:	ldp	x21, x22, [sp, #32]
    20fc:	ldp	x29, x30, [sp], #128
    2100:	ret
    2104:	stp	xzr, xzr, [x19, #32]
    2108:	ldr	x0, [x1]
    210c:	cmp	x0, #0x2
    2110:	b.eq	2140 <acc_copyout_finalize+0x118>  // b.none
    2114:	ldr	w0, [x22, #12]
    2118:	sub	x3, x5, x3
    211c:	ldr	x4, [x22, #112]
    2120:	add	x2, x3, x2
    2124:	mov	x3, x21
    2128:	mov	x1, x20
    212c:	blr	x4
    2130:	mov	x1, x19
    2134:	mov	x0, x22
    2138:	bl	0 <gomp_remove_var>
    213c:	b	20e0 <acc_copyout_finalize+0xb8>
    2140:	ldr	x6, [x22, #176]
    2144:	cbz	x6, 2114 <acc_copyout_finalize+0xec>
    2148:	cmp	x1, x6
    214c:	ldr	x0, [x6, #40]
    2150:	b.eq	2184 <acc_copyout_finalize+0x15c>  // b.none
    2154:	nop
    2158:	cbz	x0, 2114 <acc_copyout_finalize+0xec>
    215c:	cmp	x1, x0
    2160:	ldr	x4, [x0, #40]
    2164:	b.eq	218c <acc_copyout_finalize+0x164>  // b.none
    2168:	mov	x6, x0
    216c:	mov	x0, x4
    2170:	b	2158 <acc_copyout_finalize+0x130>
    2174:	mov	x0, x23
    2178:	bl	0 <gomp_mutex_unlock_slow>
    217c:	ldp	x23, x24, [sp, #48]
    2180:	b	20f4 <acc_copyout_finalize+0xcc>
    2184:	str	x0, [x22, #176]
    2188:	b	2114 <acc_copyout_finalize+0xec>
    218c:	str	x4, [x6, #40]
    2190:	b	2114 <acc_copyout_finalize+0xec>
    2194:	mov	x0, x23
    2198:	bl	0 <gomp_mutex_unlock>
    219c:	ldr	x1, [x19]
    21a0:	adrp	x0, 0 <gomp_mutex_unlock>
    21a4:	mov	w4, w21
    21a8:	mov	x3, x20
    21ac:	mov	w2, w24
    21b0:	add	x0, x0, #0x0
    21b4:	bl	0 <gomp_fatal>
    21b8:	mov	x0, x23
    21bc:	bl	0 <gomp_mutex_lock_slow>
    21c0:	b	2080 <acc_copyout_finalize+0x58>
    21c4:	mov	x0, x23
    21c8:	bl	0 <gomp_mutex_unlock>
    21cc:	adrp	x0, 0 <gomp_mutex_unlock>
    21d0:	add	x0, x0, #0x0
    21d4:	bl	0 <gomp_fatal>
    21d8:	mov	x0, x23
    21dc:	bl	0 <gomp_mutex_unlock>
    21e0:	adrp	x0, 0 <gomp_mutex_unlock>
    21e4:	mov	w2, w21
    21e8:	mov	x1, x20
    21ec:	add	x0, x0, #0x0
    21f0:	bl	0 <gomp_fatal>
    21f4:	nop

00000000000021f8 <acc_copyout_finalize_async>:
    21f8:	adrp	x5, 0 <goacc_tls_data>
    21fc:	ldr	x5, [x5]
    2200:	mrs	x6, tpidr_el0
    2204:	stp	x29, x30, [sp, #-144]!
    2208:	mov	x29, sp
    220c:	stp	x19, x20, [sp, #16]
    2210:	mov	x20, x0
    2214:	ldr	x0, [x6, x5]
    2218:	str	x25, [sp, #64]
    221c:	ldr	x25, [x0, #8]
    2220:	ldr	w0, [x25, #8]
    2224:	tbnz	w0, #0, 22d0 <acc_copyout_finalize_async+0xd8>
    2228:	stp	x21, x22, [sp, #32]
    222c:	add	x21, x25, #0xa8
    2230:	mov	w0, #0x1                   	// #1
    2234:	stp	x23, x24, [sp, #48]
    2238:	mov	x23, x1
    223c:	mov	w24, w2
    2240:	ldaxr	w1, [x21]
    2244:	cbnz	w1, 2250 <acc_copyout_finalize_async+0x58>
    2248:	stxr	w2, w0, [x21]
    224c:	cbnz	w2, 2240 <acc_copyout_finalize_async+0x48>
    2250:	cmp	w1, #0x0
    2254:	b.ne	23f0 <acc_copyout_finalize_async+0x1f8>  // b.any
    2258:	add	x2, x23, x20
    225c:	add	x1, sp, #0x58
    2260:	add	x0, x25, #0xa0
    2264:	stp	x20, x2, [sp, #88]
    2268:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    226c:	mov	x19, x0
    2270:	cbz	x0, 23d4 <acc_copyout_finalize_async+0x1dc>
    2274:	ldp	x7, x22, [x0]
    2278:	ldp	x5, x0, [x0, #16]
    227c:	cmp	x20, x7
    2280:	sub	x22, x22, x7
    2284:	ccmp	x23, x22, #0x0, eq  // eq = none
    2288:	add	x6, x20, x0
    228c:	ldr	x8, [x5, #16]
    2290:	b.ne	23b0 <acc_copyout_finalize_async+0x1b8>  // b.any
    2294:	ldr	x0, [x19, #32]
    2298:	cmn	x0, #0x1
    229c:	b.eq	22e0 <acc_copyout_finalize_async+0xe8>  // b.none
    22a0:	ldr	x1, [x19, #40]
    22a4:	cmp	x0, x1
    22a8:	b.cc	23fc <acc_copyout_finalize_async+0x204>  // b.lo, b.ul, b.last
    22ac:	sub	x0, x0, x1
    22b0:	stp	x0, xzr, [x19, #32]
    22b4:	cbz	x0, 22e4 <acc_copyout_finalize_async+0xec>
    22b8:	ldxr	w0, [x21]
    22bc:	stlxr	w1, wzr, [x21]
    22c0:	cbnz	w1, 22b8 <acc_copyout_finalize_async+0xc0>
    22c4:	tbnz	w0, #31, 238c <acc_copyout_finalize_async+0x194>
    22c8:	ldp	x21, x22, [sp, #32]
    22cc:	ldp	x23, x24, [sp, #48]
    22d0:	ldp	x19, x20, [sp, #16]
    22d4:	ldr	x25, [sp, #64]
    22d8:	ldp	x29, x30, [sp], #144
    22dc:	ret
    22e0:	stp	xzr, xzr, [x19, #32]
    22e4:	ldr	x0, [x5]
    22e8:	cmp	x0, #0x2
    22ec:	b.eq	235c <acc_copyout_finalize_async+0x164>  // b.none
    22f0:	sub	x7, x8, x7
    22f4:	cmn	w24, #0x1
    22f8:	add	x22, x7, x6
    22fc:	b.lt	2340 <acc_copyout_finalize_async+0x148>  // b.tstop
    2300:	ldr	x1, [x25, #248]
    2304:	mov	w0, w24
    2308:	blr	x1
    230c:	ldr	w0, [x25, #12]
    2310:	mov	x1, x20
    2314:	ldr	x4, [x25, #112]
    2318:	mov	x3, x23
    231c:	mov	x2, x22
    2320:	blr	x4
    2324:	ldr	x1, [x25, #248]
    2328:	mov	w0, #0xfffffffe            	// #-2
    232c:	blr	x1
    2330:	mov	x1, x19
    2334:	mov	x0, x25
    2338:	bl	0 <gomp_remove_var>
    233c:	b	22b8 <acc_copyout_finalize_async+0xc0>
    2340:	ldr	w0, [x25, #12]
    2344:	mov	x3, x23
    2348:	ldr	x4, [x25, #112]
    234c:	mov	x2, x22
    2350:	mov	x1, x20
    2354:	blr	x4
    2358:	b	2330 <acc_copyout_finalize_async+0x138>
    235c:	ldr	x2, [x25, #176]
    2360:	cbz	x2, 22f0 <acc_copyout_finalize_async+0xf8>
    2364:	cmp	x5, x2
    2368:	ldr	x0, [x2, #40]
    236c:	b.eq	23a0 <acc_copyout_finalize_async+0x1a8>  // b.none
    2370:	cbz	x0, 22f0 <acc_copyout_finalize_async+0xf8>
    2374:	cmp	x5, x0
    2378:	ldr	x1, [x0, #40]
    237c:	b.eq	23a8 <acc_copyout_finalize_async+0x1b0>  // b.none
    2380:	mov	x2, x0
    2384:	mov	x0, x1
    2388:	b	2370 <acc_copyout_finalize_async+0x178>
    238c:	mov	x0, x21
    2390:	bl	0 <gomp_mutex_unlock_slow>
    2394:	ldp	x21, x22, [sp, #32]
    2398:	ldp	x23, x24, [sp, #48]
    239c:	b	22d0 <acc_copyout_finalize_async+0xd8>
    23a0:	str	x0, [x25, #176]
    23a4:	b	22f0 <acc_copyout_finalize_async+0xf8>
    23a8:	str	x1, [x2, #40]
    23ac:	b	22f0 <acc_copyout_finalize_async+0xf8>
    23b0:	mov	x0, x21
    23b4:	bl	0 <gomp_mutex_unlock>
    23b8:	ldr	x1, [x19]
    23bc:	adrp	x0, 0 <gomp_mutex_unlock>
    23c0:	mov	w4, w23
    23c4:	mov	x3, x20
    23c8:	mov	w2, w22
    23cc:	add	x0, x0, #0x0
    23d0:	bl	0 <gomp_fatal>
    23d4:	mov	x0, x21
    23d8:	bl	0 <gomp_mutex_unlock>
    23dc:	adrp	x0, 0 <gomp_mutex_unlock>
    23e0:	mov	w2, w23
    23e4:	mov	x1, x20
    23e8:	add	x0, x0, #0x0
    23ec:	bl	0 <gomp_fatal>
    23f0:	mov	x0, x21
    23f4:	bl	0 <gomp_mutex_lock_slow>
    23f8:	b	2258 <acc_copyout_finalize_async+0x60>
    23fc:	mov	x0, x21
    2400:	bl	0 <gomp_mutex_unlock>
    2404:	adrp	x0, 0 <gomp_mutex_unlock>
    2408:	add	x0, x0, #0x0
    240c:	bl	0 <gomp_fatal>

0000000000002410 <acc_update_device>:
    2410:	stp	x29, x30, [sp, #-112]!
    2414:	mov	x29, sp
    2418:	stp	x19, x20, [sp, #16]
    241c:	mov	x19, x0
    2420:	stp	x21, x22, [sp, #32]
    2424:	mov	x21, x1
    2428:	bl	0 <goacc_lazy_initialize>
    242c:	adrp	x0, 0 <goacc_tls_data>
    2430:	ldr	x0, [x0]
    2434:	mrs	x1, tpidr_el0
    2438:	ldr	x0, [x1, x0]
    243c:	ldr	x20, [x0, #8]
    2440:	ldr	w0, [x20, #8]
    2444:	tbnz	w0, #0, 24c0 <acc_update_device+0xb0>
    2448:	add	x22, x20, #0xa8
    244c:	mov	w0, #0x1                   	// #1
    2450:	ldaxr	w1, [x22]
    2454:	cbnz	w1, 2460 <acc_update_device+0x50>
    2458:	stxr	w2, w0, [x22]
    245c:	cbnz	w2, 2450 <acc_update_device+0x40>
    2460:	cmp	w1, #0x0
    2464:	b.ne	24dc <acc_update_device+0xcc>  // b.any
    2468:	add	x2, x21, x19
    246c:	add	x1, sp, #0x38
    2470:	add	x0, x20, #0xa0
    2474:	stp	x19, x2, [sp, #56]
    2478:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    247c:	mov	x4, x0
    2480:	cbz	x0, 24e8 <acc_update_device+0xd8>
    2484:	ldp	x1, x5, [x4, #16]
    2488:	mov	x2, x19
    248c:	ldr	w0, [x20, #12]
    2490:	mov	x3, x21
    2494:	ldr	x6, [x4]
    2498:	ldr	x4, [x20, #120]
    249c:	add	x19, x19, x5
    24a0:	ldr	x1, [x1, #16]
    24a4:	sub	x1, x1, x6
    24a8:	add	x1, x1, x19
    24ac:	blr	x4
    24b0:	ldxr	w0, [x22]
    24b4:	stlxr	w1, wzr, [x22]
    24b8:	cbnz	w1, 24b0 <acc_update_device+0xa0>
    24bc:	tbnz	w0, #31, 24d0 <acc_update_device+0xc0>
    24c0:	ldp	x19, x20, [sp, #16]
    24c4:	ldp	x21, x22, [sp, #32]
    24c8:	ldp	x29, x30, [sp], #112
    24cc:	ret
    24d0:	mov	x0, x22
    24d4:	bl	0 <gomp_mutex_unlock_slow>
    24d8:	b	24c0 <acc_update_device+0xb0>
    24dc:	mov	x0, x22
    24e0:	bl	0 <gomp_mutex_lock_slow>
    24e4:	b	2468 <acc_update_device+0x58>
    24e8:	mov	x0, x22
    24ec:	bl	0 <gomp_mutex_unlock>
    24f0:	adrp	x0, 0 <gomp_mutex_unlock>
    24f4:	mov	w2, w21
    24f8:	mov	x1, x19
    24fc:	add	x0, x0, #0x0
    2500:	bl	0 <gomp_fatal>
    2504:	nop

0000000000002508 <acc_update_device_async>:
    2508:	stp	x29, x30, [sp, #-128]!
    250c:	mov	x29, sp
    2510:	stp	x19, x20, [sp, #16]
    2514:	mov	x19, x0
    2518:	stp	x21, x22, [sp, #32]
    251c:	mov	x21, x1
    2520:	mov	w22, w2
    2524:	bl	0 <goacc_lazy_initialize>
    2528:	adrp	x0, 0 <goacc_tls_data>
    252c:	ldr	x0, [x0]
    2530:	mrs	x1, tpidr_el0
    2534:	ldr	x0, [x1, x0]
    2538:	ldr	x20, [x0, #8]
    253c:	ldr	w0, [x20, #8]
    2540:	tbnz	w0, #0, 25e8 <acc_update_device_async+0xe0>
    2544:	stp	x23, x24, [sp, #48]
    2548:	add	x24, x20, #0xa8
    254c:	mov	w0, #0x1                   	// #1
    2550:	ldaxr	w1, [x24]
    2554:	cbnz	w1, 2560 <acc_update_device_async+0x58>
    2558:	stxr	w2, w0, [x24]
    255c:	cbnz	w2, 2550 <acc_update_device_async+0x48>
    2560:	cmp	w1, #0x0
    2564:	b.ne	2624 <acc_update_device_async+0x11c>  // b.any
    2568:	add	x2, x21, x19
    256c:	add	x1, sp, #0x48
    2570:	add	x0, x20, #0xa0
    2574:	stp	x19, x2, [sp, #72]
    2578:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    257c:	cbz	x0, 2630 <acc_update_device_async+0x128>
    2580:	ldr	x1, [x0, #16]
    2584:	cmn	w22, #0x1
    2588:	ldr	x2, [x0]
    258c:	ldr	x23, [x1, #16]
    2590:	ldr	x1, [x0, #24]
    2594:	sub	x23, x23, x2
    2598:	add	x1, x19, x1
    259c:	add	x23, x23, x1
    25a0:	b.lt	25f8 <acc_update_device_async+0xf0>  // b.tstop
    25a4:	ldr	x1, [x20, #248]
    25a8:	mov	w0, w22
    25ac:	blr	x1
    25b0:	ldr	w0, [x20, #12]
    25b4:	mov	x1, x23
    25b8:	ldr	x4, [x20, #120]
    25bc:	mov	x3, x21
    25c0:	mov	x2, x19
    25c4:	blr	x4
    25c8:	ldr	x1, [x20, #248]
    25cc:	mov	w0, #0xfffffffe            	// #-2
    25d0:	blr	x1
    25d4:	ldxr	w0, [x24]
    25d8:	stlxr	w1, wzr, [x24]
    25dc:	cbnz	w1, 25d4 <acc_update_device_async+0xcc>
    25e0:	tbnz	w0, #31, 2614 <acc_update_device_async+0x10c>
    25e4:	ldp	x23, x24, [sp, #48]
    25e8:	ldp	x19, x20, [sp, #16]
    25ec:	ldp	x21, x22, [sp, #32]
    25f0:	ldp	x29, x30, [sp], #128
    25f4:	ret
    25f8:	ldr	w0, [x20, #12]
    25fc:	mov	x3, x21
    2600:	ldr	x4, [x20, #120]
    2604:	mov	x2, x19
    2608:	mov	x1, x23
    260c:	blr	x4
    2610:	b	25d4 <acc_update_device_async+0xcc>
    2614:	mov	x0, x24
    2618:	bl	0 <gomp_mutex_unlock_slow>
    261c:	ldp	x23, x24, [sp, #48]
    2620:	b	25e8 <acc_update_device_async+0xe0>
    2624:	mov	x0, x24
    2628:	bl	0 <gomp_mutex_lock_slow>
    262c:	b	2568 <acc_update_device_async+0x60>
    2630:	mov	x0, x24
    2634:	bl	0 <gomp_mutex_unlock>
    2638:	adrp	x0, 0 <gomp_mutex_unlock>
    263c:	mov	w2, w21
    2640:	mov	x1, x19
    2644:	add	x0, x0, #0x0
    2648:	bl	0 <gomp_fatal>
    264c:	nop

0000000000002650 <acc_update_self>:
    2650:	stp	x29, x30, [sp, #-112]!
    2654:	mov	x29, sp
    2658:	stp	x19, x20, [sp, #16]
    265c:	mov	x19, x0
    2660:	stp	x21, x22, [sp, #32]
    2664:	mov	x21, x1
    2668:	bl	0 <goacc_lazy_initialize>
    266c:	adrp	x0, 0 <goacc_tls_data>
    2670:	ldr	x0, [x0]
    2674:	mrs	x1, tpidr_el0
    2678:	ldr	x0, [x1, x0]
    267c:	ldr	x20, [x0, #8]
    2680:	ldr	w0, [x20, #8]
    2684:	tbnz	w0, #0, 2700 <acc_update_self+0xb0>
    2688:	add	x22, x20, #0xa8
    268c:	mov	w0, #0x1                   	// #1
    2690:	ldaxr	w1, [x22]
    2694:	cbnz	w1, 26a0 <acc_update_self+0x50>
    2698:	stxr	w2, w0, [x22]
    269c:	cbnz	w2, 2690 <acc_update_self+0x40>
    26a0:	cmp	w1, #0x0
    26a4:	b.ne	271c <acc_update_self+0xcc>  // b.any
    26a8:	add	x2, x21, x19
    26ac:	add	x1, sp, #0x38
    26b0:	add	x0, x20, #0xa0
    26b4:	stp	x19, x2, [sp, #56]
    26b8:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    26bc:	mov	x4, x0
    26c0:	cbz	x0, 2728 <acc_update_self+0xd8>
    26c4:	ldp	x2, x5, [x4, #16]
    26c8:	mov	x1, x19
    26cc:	ldr	w0, [x20, #12]
    26d0:	mov	x3, x21
    26d4:	ldr	x6, [x4]
    26d8:	ldr	x4, [x20, #112]
    26dc:	add	x19, x19, x5
    26e0:	ldr	x2, [x2, #16]
    26e4:	sub	x2, x2, x6
    26e8:	add	x2, x2, x19
    26ec:	blr	x4
    26f0:	ldxr	w0, [x22]
    26f4:	stlxr	w1, wzr, [x22]
    26f8:	cbnz	w1, 26f0 <acc_update_self+0xa0>
    26fc:	tbnz	w0, #31, 2710 <acc_update_self+0xc0>
    2700:	ldp	x19, x20, [sp, #16]
    2704:	ldp	x21, x22, [sp, #32]
    2708:	ldp	x29, x30, [sp], #112
    270c:	ret
    2710:	mov	x0, x22
    2714:	bl	0 <gomp_mutex_unlock_slow>
    2718:	b	2700 <acc_update_self+0xb0>
    271c:	mov	x0, x22
    2720:	bl	0 <gomp_mutex_lock_slow>
    2724:	b	26a8 <acc_update_self+0x58>
    2728:	mov	x0, x22
    272c:	bl	0 <gomp_mutex_unlock>
    2730:	adrp	x0, 0 <gomp_mutex_unlock>
    2734:	mov	w2, w21
    2738:	mov	x1, x19
    273c:	add	x0, x0, #0x0
    2740:	bl	0 <gomp_fatal>
    2744:	nop

0000000000002748 <acc_update_self_async>:
    2748:	stp	x29, x30, [sp, #-128]!
    274c:	mov	x29, sp
    2750:	stp	x19, x20, [sp, #16]
    2754:	mov	x19, x0
    2758:	stp	x21, x22, [sp, #32]
    275c:	mov	x21, x1
    2760:	mov	w22, w2
    2764:	bl	0 <goacc_lazy_initialize>
    2768:	adrp	x0, 0 <goacc_tls_data>
    276c:	ldr	x0, [x0]
    2770:	mrs	x1, tpidr_el0
    2774:	ldr	x0, [x1, x0]
    2778:	ldr	x20, [x0, #8]
    277c:	ldr	w0, [x20, #8]
    2780:	tbnz	w0, #0, 2828 <acc_update_self_async+0xe0>
    2784:	stp	x23, x24, [sp, #48]
    2788:	add	x24, x20, #0xa8
    278c:	mov	w0, #0x1                   	// #1
    2790:	ldaxr	w1, [x24]
    2794:	cbnz	w1, 27a0 <acc_update_self_async+0x58>
    2798:	stxr	w2, w0, [x24]
    279c:	cbnz	w2, 2790 <acc_update_self_async+0x48>
    27a0:	cmp	w1, #0x0
    27a4:	b.ne	2864 <acc_update_self_async+0x11c>  // b.any
    27a8:	add	x2, x21, x19
    27ac:	add	x1, sp, #0x48
    27b0:	add	x0, x20, #0xa0
    27b4:	stp	x19, x2, [sp, #72]
    27b8:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    27bc:	cbz	x0, 2870 <acc_update_self_async+0x128>
    27c0:	ldr	x2, [x0, #16]
    27c4:	cmn	w22, #0x1
    27c8:	ldr	x1, [x0]
    27cc:	ldr	x23, [x2, #16]
    27d0:	ldr	x2, [x0, #24]
    27d4:	sub	x23, x23, x1
    27d8:	add	x2, x19, x2
    27dc:	add	x23, x23, x2
    27e0:	b.lt	2838 <acc_update_self_async+0xf0>  // b.tstop
    27e4:	ldr	x1, [x20, #248]
    27e8:	mov	w0, w22
    27ec:	blr	x1
    27f0:	ldr	w0, [x20, #12]
    27f4:	mov	x1, x19
    27f8:	ldr	x4, [x20, #112]
    27fc:	mov	x3, x21
    2800:	mov	x2, x23
    2804:	blr	x4
    2808:	ldr	x1, [x20, #248]
    280c:	mov	w0, #0xfffffffe            	// #-2
    2810:	blr	x1
    2814:	ldxr	w0, [x24]
    2818:	stlxr	w1, wzr, [x24]
    281c:	cbnz	w1, 2814 <acc_update_self_async+0xcc>
    2820:	tbnz	w0, #31, 2854 <acc_update_self_async+0x10c>
    2824:	ldp	x23, x24, [sp, #48]
    2828:	ldp	x19, x20, [sp, #16]
    282c:	ldp	x21, x22, [sp, #32]
    2830:	ldp	x29, x30, [sp], #128
    2834:	ret
    2838:	ldr	w0, [x20, #12]
    283c:	mov	x3, x21
    2840:	ldr	x4, [x20, #112]
    2844:	mov	x2, x23
    2848:	mov	x1, x19
    284c:	blr	x4
    2850:	b	2814 <acc_update_self_async+0xcc>
    2854:	mov	x0, x24
    2858:	bl	0 <gomp_mutex_unlock_slow>
    285c:	ldp	x23, x24, [sp, #48]
    2860:	b	2828 <acc_update_self_async+0xe0>
    2864:	mov	x0, x24
    2868:	bl	0 <gomp_mutex_lock_slow>
    286c:	b	27a8 <acc_update_self_async+0x60>
    2870:	mov	x0, x24
    2874:	bl	0 <gomp_mutex_unlock>
    2878:	adrp	x0, 0 <gomp_mutex_unlock>
    287c:	mov	w2, w21
    2880:	mov	x1, x19
    2884:	add	x0, x0, #0x0
    2888:	bl	0 <gomp_fatal>
    288c:	nop

0000000000002890 <gomp_acc_insert_pointer>:
    2890:	adrp	x6, 0 <goacc_tls_data>
    2894:	ldr	x6, [x6]
    2898:	mrs	x7, tpidr_el0
    289c:	stp	x29, x30, [sp, #-144]!
    28a0:	mov	x29, sp
    28a4:	stp	x21, x22, [sp, #32]
    28a8:	mov	x21, x2
    28ac:	mov	x22, x3
    28b0:	ldr	x2, [x7, x6]
    28b4:	stp	x19, x20, [sp, #16]
    28b8:	mov	x19, x1
    28bc:	ldr	x1, [x21]
    28c0:	stp	x23, x24, [sp, #48]
    28c4:	ldr	x24, [x2, #8]
    28c8:	str	x25, [sp, #64]
    28cc:	mov	x25, x0
    28d0:	cmp	x1, #0x0
    28d4:	ldr	x0, [x19]
    28d8:	add	x20, x24, #0xa8
    28dc:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    28e0:	b.ne	297c <gomp_acc_insert_pointer+0xec>  // b.any
    28e4:	adrp	x23, 0 <gomp_debug_var>
    28e8:	ldr	w0, [x23]
    28ec:	cbnz	w0, 2a68 <gomp_acc_insert_pointer+0x1d8>
    28f0:	mov	x2, x19
    28f4:	mov	x1, x25
    28f8:	mov	x5, x22
    28fc:	mov	x4, x21
    2900:	mov	x0, x24
    2904:	mov	w7, #0x0                   	// #0
    2908:	mov	w6, #0x1                   	// #1
    290c:	mov	x3, #0x0                   	// #0
    2910:	bl	0 <gomp_map_vars>
    2914:	mov	x19, x0
    2918:	ldr	w1, [x23]
    291c:	cbnz	w1, 2a88 <gomp_acc_insert_pointer+0x1f8>
    2920:	ldr	x1, [x19, #64]
    2924:	mov	x0, #0x1                   	// #1
    2928:	mov	w2, w0
    292c:	str	x0, [x1, #40]
    2930:	ldaxr	w1, [x20]
    2934:	cbnz	w1, 2940 <gomp_acc_insert_pointer+0xb0>
    2938:	stxr	w0, w2, [x20]
    293c:	cbnz	w0, 2930 <gomp_acc_insert_pointer+0xa0>
    2940:	cmp	w1, #0x0
    2944:	b.ne	2ac0 <gomp_acc_insert_pointer+0x230>  // b.any
    2948:	ldr	x0, [x24, #176]
    294c:	str	x0, [x19, #40]
    2950:	str	x19, [x24, #176]
    2954:	ldxr	w0, [x20]
    2958:	stlxr	w1, wzr, [x20]
    295c:	cbnz	w1, 2954 <gomp_acc_insert_pointer+0xc4>
    2960:	tbnz	w0, #31, 2a5c <gomp_acc_insert_pointer+0x1cc>
    2964:	ldp	x19, x20, [sp, #16]
    2968:	ldp	x21, x22, [sp, #32]
    296c:	ldp	x23, x24, [sp, #48]
    2970:	ldr	x25, [sp, #64]
    2974:	ldp	x29, x30, [sp], #144
    2978:	ret
    297c:	bl	20 <acc_is_present.part.0>
    2980:	cbz	w0, 28e4 <gomp_acc_insert_pointer+0x54>
    2984:	mov	w0, #0x1                   	// #1
    2988:	ldaxr	w1, [x20]
    298c:	cbnz	w1, 2998 <gomp_acc_insert_pointer+0x108>
    2990:	stxr	w2, w0, [x20]
    2994:	cbnz	w2, 2988 <gomp_acc_insert_pointer+0xf8>
    2998:	cmp	w1, #0x0
    299c:	b.ne	2acc <gomp_acc_insert_pointer+0x23c>  // b.any
    29a0:	ldr	x3, [x19]
    29a4:	add	x0, x24, #0xa0
    29a8:	ldr	x2, [x21]
    29ac:	add	x1, sp, #0x58
    29b0:	add	x2, x2, x3
    29b4:	stp	x3, x2, [sp, #88]
    29b8:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    29bc:	mov	x19, x0
    29c0:	ldxr	w0, [x20]
    29c4:	stlxr	w1, wzr, [x20]
    29c8:	cbnz	w1, 29c0 <gomp_acc_insert_pointer+0x130>
    29cc:	tbnz	w0, #31, 2aa8 <gomp_acc_insert_pointer+0x218>
    29d0:	ldr	x4, [x19, #16]
    29d4:	ldr	x3, [x4, #48]
    29d8:	cbz	x3, 2ab4 <gomp_acc_insert_pointer+0x224>
    29dc:	add	x4, x4, #0x40
    29e0:	mov	x1, #0x0                   	// #0
    29e4:	b	29f4 <gomp_acc_insert_pointer+0x164>
    29e8:	add	x1, x1, #0x1
    29ec:	cmp	x3, x1
    29f0:	b.eq	2ab4 <gomp_acc_insert_pointer+0x224>  // b.none
    29f4:	lsl	x2, x1, #5
    29f8:	ldr	x2, [x4, x2]
    29fc:	cmp	x2, x19
    2a00:	b.ne	29e8 <gomp_acc_insert_pointer+0x158>  // b.any
    2a04:	adrp	x0, 0 <gomp_mutex_unlock>
    2a08:	add	x2, x25, x1
    2a0c:	ldr	q1, [x0]
    2a10:	cbz	x25, 2964 <gomp_acc_insert_pointer+0xd4>
    2a14:	nop
    2a18:	cmp	x3, x1
    2a1c:	b.ls	2a38 <gomp_acc_insert_pointer+0x1a8>  // b.plast
    2a20:	lsl	x0, x1, #5
    2a24:	ldr	x0, [x4, x0]
    2a28:	cbz	x0, 2a38 <gomp_acc_insert_pointer+0x1a8>
    2a2c:	ldr	q0, [x0, #32]
    2a30:	add	v0.2d, v0.2d, v1.2d
    2a34:	str	q0, [x0, #32]
    2a38:	add	x1, x1, #0x1
    2a3c:	cmp	x1, x2
    2a40:	b.ne	2a18 <gomp_acc_insert_pointer+0x188>  // b.any
    2a44:	ldp	x19, x20, [sp, #16]
    2a48:	ldp	x21, x22, [sp, #32]
    2a4c:	ldp	x23, x24, [sp, #48]
    2a50:	ldr	x25, [sp, #64]
    2a54:	ldp	x29, x30, [sp], #144
    2a58:	ret
    2a5c:	mov	x0, x20
    2a60:	bl	0 <gomp_mutex_unlock_slow>
    2a64:	b	2964 <gomp_acc_insert_pointer+0xd4>
    2a68:	adrp	x2, 0 <gomp_mutex_unlock>
    2a6c:	add	x2, x2, #0x0
    2a70:	add	x2, x2, #0xb8
    2a74:	adrp	x1, 0 <gomp_mutex_unlock>
    2a78:	mov	w0, #0x0                   	// #0
    2a7c:	add	x1, x1, #0x0
    2a80:	bl	0 <gomp_debug>
    2a84:	b	28f0 <gomp_acc_insert_pointer+0x60>
    2a88:	adrp	x2, 0 <gomp_mutex_unlock>
    2a8c:	add	x2, x2, #0x0
    2a90:	add	x2, x2, #0xb8
    2a94:	adrp	x1, 0 <gomp_mutex_unlock>
    2a98:	mov	w0, #0x0                   	// #0
    2a9c:	add	x1, x1, #0x0
    2aa0:	bl	0 <gomp_debug>
    2aa4:	b	2920 <gomp_acc_insert_pointer+0x90>
    2aa8:	mov	x0, x20
    2aac:	bl	0 <gomp_mutex_unlock_slow>
    2ab0:	b	29d0 <gomp_acc_insert_pointer+0x140>
    2ab4:	adrp	x0, 0 <gomp_mutex_unlock>
    2ab8:	add	x0, x0, #0x0
    2abc:	bl	0 <gomp_fatal>
    2ac0:	mov	x0, x20
    2ac4:	bl	0 <gomp_mutex_lock_slow>
    2ac8:	b	2948 <gomp_acc_insert_pointer+0xb8>
    2acc:	mov	x0, x20
    2ad0:	bl	0 <gomp_mutex_lock_slow>
    2ad4:	b	29a0 <gomp_acc_insert_pointer+0x110>

0000000000002ad8 <gomp_acc_remove_pointer>:
    2ad8:	stp	x29, x30, [sp, #-160]!
    2adc:	cmp	w5, #0x1
    2ae0:	mov	x29, sp
    2ae4:	stp	x21, x22, [sp, #32]
    2ae8:	cset	x21, ne  // ne = any
    2aec:	cmp	x1, #0x0
    2af0:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    2af4:	b.ne	2b04 <gomp_acc_remove_pointer+0x2c>  // b.any
    2af8:	ldp	x21, x22, [sp, #32]
    2afc:	ldp	x29, x30, [sp], #160
    2b00:	ret
    2b04:	stp	x23, x24, [sp, #48]
    2b08:	and	w24, w2, #0xff
    2b0c:	adrp	x2, 0 <goacc_tls_data>
    2b10:	ldr	x2, [x2]
    2b14:	mov	w23, w3
    2b18:	mrs	x3, tpidr_el0
    2b1c:	stp	x19, x20, [sp, #16]
    2b20:	mov	x20, x0
    2b24:	ldr	x2, [x3, x2]
    2b28:	stp	x25, x26, [sp, #64]
    2b2c:	mov	w25, w4
    2b30:	ldr	x26, [x2, #8]
    2b34:	bl	20 <acc_is_present.part.0>
    2b38:	cbz	w0, 2c70 <gomp_acc_remove_pointer+0x198>
    2b3c:	add	x21, x21, #0x2
    2b40:	add	x22, x26, #0xa8
    2b44:	mov	w0, #0x1                   	// #1
    2b48:	str	x27, [sp, #80]
    2b4c:	ldaxr	w1, [x22]
    2b50:	cbnz	w1, 2b5c <gomp_acc_remove_pointer+0x84>
    2b54:	stxr	w2, w0, [x22]
    2b58:	cbnz	w2, 2b4c <gomp_acc_remove_pointer+0x74>
    2b5c:	cmp	w1, #0x0
    2b60:	b.ne	2d40 <gomp_acc_remove_pointer+0x268>  // b.any
    2b64:	add	x2, x20, #0x1
    2b68:	add	x1, sp, #0x68
    2b6c:	add	x0, x26, #0xa0
    2b70:	stp	x20, x2, [sp, #104]
    2b74:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    2b78:	mov	x19, x0
    2b7c:	cbz	x0, 2d4c <gomp_acc_remove_pointer+0x274>
    2b80:	adrp	x27, 0 <gomp_debug_var>
    2b84:	ldr	w0, [x27]
    2b88:	cbnz	w0, 2cdc <gomp_acc_remove_pointer+0x204>
    2b8c:	ldp	x0, x1, [x19, #32]
    2b90:	ldr	x20, [x19, #16]
    2b94:	cmp	x0, x1
    2b98:	b.cc	2d64 <gomp_acc_remove_pointer+0x28c>  // b.lo, b.ul, b.last
    2b9c:	cbnz	w25, 2c64 <gomp_acc_remove_pointer+0x18c>
    2ba0:	cbz	x1, 2bb0 <gomp_acc_remove_pointer+0xd8>
    2ba4:	sub	x1, x1, #0x1
    2ba8:	sub	x0, x0, #0x1
    2bac:	stp	x0, x1, [x19, #32]
    2bb0:	ldxr	w0, [x22]
    2bb4:	stlxr	w1, wzr, [x22]
    2bb8:	cbnz	w1, 2bb0 <gomp_acc_remove_pointer+0xd8>
    2bbc:	tbnz	w0, #31, 2cfc <gomp_acc_remove_pointer+0x224>
    2bc0:	ldr	x1, [x19, #32]
    2bc4:	cbnz	x1, 2c30 <gomp_acc_remove_pointer+0x158>
    2bc8:	ldr	x0, [x20]
    2bcc:	cmp	x0, x21
    2bd0:	b.eq	2c88 <gomp_acc_remove_pointer+0x1b0>  // b.none
    2bd4:	ldr	x2, [x20, #48]
    2bd8:	mov	x0, #0x1                   	// #1
    2bdc:	str	x0, [x19, #32]
    2be0:	str	x21, [x20]
    2be4:	cbz	x2, 2c14 <gomp_acc_remove_pointer+0x13c>
    2be8:	add	x3, x20, #0x40
    2bec:	b	2bfc <gomp_acc_remove_pointer+0x124>
    2bf0:	add	x1, x1, #0x1
    2bf4:	cmp	x1, x2
    2bf8:	b.eq	2c14 <gomp_acc_remove_pointer+0x13c>  // b.none
    2bfc:	lsl	x0, x1, #5
    2c00:	ldr	x0, [x3, x0]
    2c04:	cmp	x0, x19
    2c08:	b.ne	2bf0 <gomp_acc_remove_pointer+0x118>  // b.any
    2c0c:	add	x1, x20, x1, lsl #5
    2c10:	strb	w24, [x1, #72]
    2c14:	cmn	w23, #0x1
    2c18:	b.lt	2cc0 <gomp_acc_remove_pointer+0x1e8>  // b.tstop
    2c1c:	ldr	x2, [x20, #56]
    2c20:	mov	w1, w23
    2c24:	mov	x0, x20
    2c28:	ldr	x2, [x2, #192]
    2c2c:	blr	x2
    2c30:	ldxr	w0, [x22]
    2c34:	stlxr	w1, wzr, [x22]
    2c38:	cbnz	w1, 2c30 <gomp_acc_remove_pointer+0x158>
    2c3c:	tbnz	w0, #31, 2cd0 <gomp_acc_remove_pointer+0x1f8>
    2c40:	ldr	w0, [x27]
    2c44:	cbnz	w0, 2d08 <gomp_acc_remove_pointer+0x230>
    2c48:	ldp	x19, x20, [sp, #16]
    2c4c:	ldp	x21, x22, [sp, #32]
    2c50:	ldp	x23, x24, [sp, #48]
    2c54:	ldp	x25, x26, [sp, #64]
    2c58:	ldr	x27, [sp, #80]
    2c5c:	ldp	x29, x30, [sp], #160
    2c60:	ret
    2c64:	sub	x0, x0, x1
    2c68:	stp	x0, xzr, [x19, #32]
    2c6c:	b	2bb0 <gomp_acc_remove_pointer+0xd8>
    2c70:	ldp	x19, x20, [sp, #16]
    2c74:	ldp	x21, x22, [sp, #32]
    2c78:	ldp	x23, x24, [sp, #48]
    2c7c:	ldp	x25, x26, [sp, #64]
    2c80:	ldp	x29, x30, [sp], #160
    2c84:	ret
    2c88:	ldr	x0, [x26, #176]
    2c8c:	cbz	x0, 2d78 <gomp_acc_remove_pointer+0x2a0>
    2c90:	mov	x3, #0x0                   	// #0
    2c94:	ldr	x20, [x19, #16]
    2c98:	b	2ca8 <gomp_acc_remove_pointer+0x1d0>
    2c9c:	mov	x3, x0
    2ca0:	cbz	x2, 2d78 <gomp_acc_remove_pointer+0x2a0>
    2ca4:	mov	x0, x2
    2ca8:	cmp	x0, x20
    2cac:	ldr	x2, [x0, #40]
    2cb0:	b.ne	2c9c <gomp_acc_remove_pointer+0x1c4>  // b.any
    2cb4:	cbz	x3, 2d38 <gomp_acc_remove_pointer+0x260>
    2cb8:	str	x2, [x3, #40]
    2cbc:	b	2bd4 <gomp_acc_remove_pointer+0xfc>
    2cc0:	mov	x0, x20
    2cc4:	mov	w1, #0x1                   	// #1
    2cc8:	bl	0 <gomp_unmap_vars>
    2ccc:	b	2c30 <gomp_acc_remove_pointer+0x158>
    2cd0:	mov	x0, x22
    2cd4:	bl	0 <gomp_mutex_unlock_slow>
    2cd8:	b	2c40 <gomp_acc_remove_pointer+0x168>
    2cdc:	adrp	x2, 0 <gomp_mutex_unlock>
    2ce0:	add	x2, x2, #0x0
    2ce4:	add	x2, x2, #0xd0
    2ce8:	adrp	x1, 0 <gomp_mutex_unlock>
    2cec:	mov	w0, #0x0                   	// #0
    2cf0:	add	x1, x1, #0x0
    2cf4:	bl	0 <gomp_debug>
    2cf8:	b	2b8c <gomp_acc_remove_pointer+0xb4>
    2cfc:	mov	x0, x22
    2d00:	bl	0 <gomp_mutex_unlock_slow>
    2d04:	b	2bc0 <gomp_acc_remove_pointer+0xe8>
    2d08:	adrp	x2, 0 <gomp_mutex_unlock>
    2d0c:	add	x2, x2, #0x0
    2d10:	add	x2, x2, #0xd0
    2d14:	adrp	x1, 0 <gomp_mutex_unlock>
    2d18:	mov	w0, #0x0                   	// #0
    2d1c:	add	x1, x1, #0x0
    2d20:	bl	0 <gomp_debug>
    2d24:	ldp	x19, x20, [sp, #16]
    2d28:	ldp	x23, x24, [sp, #48]
    2d2c:	ldp	x25, x26, [sp, #64]
    2d30:	ldr	x27, [sp, #80]
    2d34:	b	2af8 <gomp_acc_remove_pointer+0x20>
    2d38:	str	x2, [x26, #176]
    2d3c:	b	2bd4 <gomp_acc_remove_pointer+0xfc>
    2d40:	mov	x0, x22
    2d44:	bl	0 <gomp_mutex_lock_slow>
    2d48:	b	2b64 <gomp_acc_remove_pointer+0x8c>
    2d4c:	mov	x0, x22
    2d50:	bl	0 <gomp_mutex_unlock>
    2d54:	adrp	x0, 0 <gomp_mutex_unlock>
    2d58:	mov	x1, x20
    2d5c:	add	x0, x0, #0x0
    2d60:	bl	0 <gomp_fatal>
    2d64:	mov	x0, x22
    2d68:	bl	0 <gomp_mutex_unlock>
    2d6c:	adrp	x0, 0 <gomp_mutex_unlock>
    2d70:	add	x0, x0, #0x0
    2d74:	bl	0 <gomp_fatal>
    2d78:	mov	x0, #0x0                   	// #0
    2d7c:	mov	x1, #0x1                   	// #1
    2d80:	str	x1, [x19, #32]
    2d84:	str	xzr, [x0]
    2d88:	brk	#0x3e8

oacc-async.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <acc_async_test>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	cmp	w0, #0x0
   8:	add	w2, w0, #0x2
   c:	mov	x29, sp
  10:	ccmp	w2, #0x1, #0x0, lt  // lt = tstop
  14:	b.hi	50 <acc_async_test+0x50>  // b.pmore
  18:	adrp	x1, 0 <goacc_tls_data>
  1c:	ldr	x1, [x1]
  20:	mrs	x2, tpidr_el0
  24:	ldr	x1, [x2, x1]
  28:	cbz	x1, 44 <acc_async_test+0x44>
  2c:	ldr	x1, [x1, #8]
  30:	cbz	x1, 44 <acc_async_test+0x44>
  34:	ldp	x29, x30, [sp], #16
  38:	ldr	x1, [x1, #200]
  3c:	mov	x16, x1
  40:	br	x16
  44:	adrp	x0, 0 <acc_async_test>
  48:	add	x0, x0, #0x0
  4c:	bl	0 <gomp_fatal>
  50:	mov	w1, w0
  54:	adrp	x0, 0 <acc_async_test>
  58:	add	x0, x0, #0x0
  5c:	bl	0 <gomp_fatal>

0000000000000060 <acc_async_test_all>:
  60:	adrp	x0, 0 <goacc_tls_data>
  64:	ldr	x0, [x0]
  68:	mrs	x1, tpidr_el0
  6c:	ldr	x0, [x1, x0]
  70:	cbz	x0, 88 <acc_async_test_all+0x28>
  74:	ldr	x0, [x0, #8]
  78:	cbz	x0, 88 <acc_async_test_all+0x28>
  7c:	ldr	x0, [x0, #208]
  80:	mov	x16, x0
  84:	br	x16
  88:	stp	x29, x30, [sp, #-16]!
  8c:	adrp	x0, 0 <acc_async_test>
  90:	add	x0, x0, #0x0
  94:	mov	x29, sp
  98:	bl	0 <gomp_fatal>
  9c:	nop

00000000000000a0 <acc_async_wait>:
  a0:	stp	x29, x30, [sp, #-16]!
  a4:	cmp	w0, #0x0
  a8:	add	w2, w0, #0x2
  ac:	mov	x29, sp
  b0:	ccmp	w2, #0x1, #0x0, lt  // lt = tstop
  b4:	b.hi	f0 <acc_async_wait+0x50>  // b.pmore
  b8:	adrp	x1, 0 <goacc_tls_data>
  bc:	ldr	x1, [x1]
  c0:	mrs	x2, tpidr_el0
  c4:	ldr	x1, [x2, x1]
  c8:	cbz	x1, e4 <acc_async_wait+0x44>
  cc:	ldr	x1, [x1, #8]
  d0:	cbz	x1, e4 <acc_async_wait+0x44>
  d4:	ldp	x29, x30, [sp], #16
  d8:	ldr	x1, [x1, #216]
  dc:	mov	x16, x1
  e0:	br	x16
  e4:	adrp	x0, 0 <acc_async_test>
  e8:	add	x0, x0, #0x0
  ec:	bl	0 <gomp_fatal>
  f0:	mov	w1, w0
  f4:	adrp	x0, 0 <acc_async_test>
  f8:	add	x0, x0, #0x0
  fc:	bl	0 <gomp_fatal>

0000000000000100 <acc_wait_async>:
 100:	adrp	x2, 0 <goacc_tls_data>
 104:	ldr	x2, [x2]
 108:	mrs	x3, tpidr_el0
 10c:	ldr	x2, [x3, x2]
 110:	cbz	x2, 128 <acc_wait_async+0x28>
 114:	ldr	x2, [x2, #8]
 118:	cbz	x2, 128 <acc_wait_async+0x28>
 11c:	ldr	x2, [x2, #224]
 120:	mov	x16, x2
 124:	br	x16
 128:	stp	x29, x30, [sp, #-16]!
 12c:	adrp	x0, 0 <acc_async_test>
 130:	add	x0, x0, #0x0
 134:	mov	x29, sp
 138:	bl	0 <gomp_fatal>
 13c:	nop

0000000000000140 <acc_async_wait_all>:
 140:	adrp	x0, 0 <goacc_tls_data>
 144:	ldr	x0, [x0]
 148:	mrs	x1, tpidr_el0
 14c:	ldr	x0, [x1, x0]
 150:	cbz	x0, 168 <acc_async_wait_all+0x28>
 154:	ldr	x0, [x0, #8]
 158:	cbz	x0, 168 <acc_async_wait_all+0x28>
 15c:	ldr	x0, [x0, #232]
 160:	mov	x16, x0
 164:	br	x16
 168:	stp	x29, x30, [sp, #-16]!
 16c:	adrp	x0, 0 <acc_async_test>
 170:	add	x0, x0, #0x0
 174:	mov	x29, sp
 178:	bl	0 <gomp_fatal>
 17c:	nop

0000000000000180 <acc_wait_all_async>:
 180:	stp	x29, x30, [sp, #-16]!
 184:	cmp	w0, #0x0
 188:	add	w2, w0, #0x2
 18c:	mov	x29, sp
 190:	ccmp	w2, #0x1, #0x0, lt  // lt = tstop
 194:	b.hi	1d0 <acc_wait_all_async+0x50>  // b.pmore
 198:	adrp	x1, 0 <goacc_tls_data>
 19c:	ldr	x1, [x1]
 1a0:	mrs	x2, tpidr_el0
 1a4:	ldr	x1, [x2, x1]
 1a8:	cbz	x1, 1c4 <acc_wait_all_async+0x44>
 1ac:	ldr	x1, [x1, #8]
 1b0:	cbz	x1, 1c4 <acc_wait_all_async+0x44>
 1b4:	ldp	x29, x30, [sp], #16
 1b8:	ldr	x1, [x1, #240]
 1bc:	mov	x16, x1
 1c0:	br	x16
 1c4:	adrp	x0, 0 <acc_async_test>
 1c8:	add	x0, x0, #0x0
 1cc:	bl	0 <gomp_fatal>
 1d0:	mov	w1, w0
 1d4:	adrp	x0, 0 <acc_async_test>
 1d8:	add	x0, x0, #0x0
 1dc:	bl	0 <gomp_fatal>

oacc-plugin.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_PLUGIN_async_unmap_vars>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	w0, w1
  14:	ldr	x20, [x19, #56]
  18:	ldr	x1, [x20, #248]
  1c:	blr	x1
  20:	mov	x0, x19
  24:	mov	w1, #0x1                   	// #1
  28:	bl	0 <gomp_unmap_vars>
  2c:	ldr	x1, [x20, #248]
  30:	mov	w0, #0xfffffffe            	// #-2
  34:	ldp	x19, x20, [sp, #16]
  38:	mov	x16, x1
  3c:	ldp	x29, x30, [sp], #32
  40:	br	x16
  44:	nop

0000000000000048 <GOMP_PLUGIN_acc_thread>:
  48:	adrp	x0, 0 <goacc_tls_data>
  4c:	ldr	x0, [x0]
  50:	mrs	x1, tpidr_el0
  54:	ldr	x0, [x1, x0]
  58:	cbz	x0, 60 <GOMP_PLUGIN_acc_thread+0x18>
  5c:	ldr	x0, [x0, #40]
  60:	ret
  64:	nop

0000000000000068 <GOMP_PLUGIN_acc_default_dim>:
  68:	cmp	w0, #0x2
  6c:	b.hi	80 <GOMP_PLUGIN_acc_default_dim+0x18>  // b.pmore
  70:	adrp	x1, 0 <goacc_default_dims>
  74:	add	x1, x1, #0x0
  78:	ldr	w0, [x1, w0, uxtw #2]
  7c:	ret
  80:	stp	x29, x30, [sp, #-16]!
  84:	mov	w1, w0
  88:	adrp	x0, 0 <GOMP_PLUGIN_async_unmap_vars>
  8c:	mov	x29, sp
  90:	add	x0, x0, #0x0
  94:	bl	0 <gomp_fatal>

oacc-cuda.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <acc_get_current_cuda_device>:
   0:	adrp	x0, 0 <goacc_tls_data>
   4:	ldr	x0, [x0]
   8:	mrs	x1, tpidr_el0
   c:	ldr	x0, [x1, x0]
  10:	cbz	x0, 2c <acc_get_current_cuda_device+0x2c>
  14:	ldr	x0, [x0, #8]
  18:	cbz	x0, 2c <acc_get_current_cuda_device+0x2c>
  1c:	ldr	x0, [x0, #272]
  20:	cbz	x0, 2c <acc_get_current_cuda_device+0x2c>
  24:	mov	x16, x0
  28:	br	x16
  2c:	mov	x0, #0x0                   	// #0
  30:	ret
  34:	nop

0000000000000038 <acc_get_current_cuda_context>:
  38:	adrp	x0, 0 <goacc_tls_data>
  3c:	ldr	x0, [x0]
  40:	mrs	x1, tpidr_el0
  44:	ldr	x0, [x1, x0]
  48:	cbz	x0, 64 <acc_get_current_cuda_context+0x2c>
  4c:	ldr	x0, [x0, #8]
  50:	cbz	x0, 64 <acc_get_current_cuda_context+0x2c>
  54:	ldr	x0, [x0, #280]
  58:	cbz	x0, 64 <acc_get_current_cuda_context+0x2c>
  5c:	mov	x16, x0
  60:	br	x16
  64:	mov	x0, #0x0                   	// #0
  68:	ret
  6c:	nop

0000000000000070 <acc_get_cuda_stream>:
  70:	adrp	x2, 0 <goacc_tls_data>
  74:	ldr	x2, [x2]
  78:	mrs	x3, tpidr_el0
  7c:	add	w1, w0, #0x2
  80:	cmp	w0, #0x0
  84:	ccmp	w1, #0x1, #0x0, lt  // lt = tstop
  88:	ldr	x1, [x3, x2]
  8c:	b.hi	ac <acc_get_cuda_stream+0x3c>  // b.pmore
  90:	cbz	x1, ac <acc_get_cuda_stream+0x3c>
  94:	ldr	x1, [x1, #8]
  98:	cbz	x1, ac <acc_get_cuda_stream+0x3c>
  9c:	ldr	x1, [x1, #288]
  a0:	cbz	x1, ac <acc_get_cuda_stream+0x3c>
  a4:	mov	x16, x1
  a8:	br	x16
  ac:	mov	x0, #0x0                   	// #0
  b0:	ret
  b4:	nop

00000000000000b8 <acc_set_cuda_stream>:
  b8:	stp	x29, x30, [sp, #-32]!
  bc:	cmp	w0, #0x0
  c0:	mov	x29, sp
  c4:	stp	x19, x20, [sp, #16]
  c8:	mov	w19, w0
  cc:	add	w0, w0, #0x2
  d0:	ccmp	w0, #0x1, #0x0, lt  // lt = tstop
  d4:	b.hi	120 <acc_set_cuda_stream+0x68>  // b.pmore
  d8:	mov	x20, x1
  dc:	cbz	x1, 120 <acc_set_cuda_stream+0x68>
  e0:	bl	0 <goacc_lazy_initialize>
  e4:	adrp	x0, 0 <goacc_tls_data>
  e8:	ldr	x0, [x0]
  ec:	mrs	x1, tpidr_el0
  f0:	ldr	x0, [x1, x0]
  f4:	cbz	x0, 130 <acc_set_cuda_stream+0x78>
  f8:	ldr	x0, [x0, #8]
  fc:	cbz	x0, 130 <acc_set_cuda_stream+0x78>
 100:	ldr	x2, [x0, #296]
 104:	cbz	x2, 130 <acc_set_cuda_stream+0x78>
 108:	mov	x1, x20
 10c:	mov	w0, w19
 110:	ldp	x19, x20, [sp, #16]
 114:	mov	x16, x2
 118:	ldp	x29, x30, [sp], #32
 11c:	br	x16
 120:	mov	w0, #0x0                   	// #0
 124:	ldp	x19, x20, [sp, #16]
 128:	ldp	x29, x30, [sp], #32
 12c:	ret
 130:	mov	w0, #0xffffffff            	// #-1
 134:	b	124 <acc_set_cuda_stream+0x6c>

priority_queue.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <priority_tree_next_task_1>:
   0:	cbz	x1, 68 <priority_tree_next_task_1+0x68>
   4:	stp	x29, x30, [sp, #-48]!
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	sxtw	x20, w0
  14:	add	x20, x20, #0x6
  18:	mov	x19, x1
  1c:	str	x21, [sp, #32]
  20:	neg	x20, x20, lsl #4
  24:	mov	w21, w0
  28:	ldr	x1, [x19, #32]
  2c:	mov	w0, w21
  30:	bl	0 <priority_tree_next_task_1>
  34:	cbnz	x0, 58 <priority_tree_next_task_1+0x58>
  38:	ldr	x0, [x19, #8]
  3c:	add	x0, x0, x20
  40:	ldr	w1, [x0, #200]
  44:	cmp	w1, #0x2
  48:	b.eq	58 <priority_tree_next_task_1+0x58>  // b.none
  4c:	ldr	x19, [x19, #24]
  50:	cbnz	x19, 28 <priority_tree_next_task_1+0x28>
  54:	mov	x0, #0x0                   	// #0
  58:	ldp	x19, x20, [sp, #16]
  5c:	ldr	x21, [sp, #32]
  60:	ldp	x29, x30, [sp], #48
  64:	ret
  68:	mov	x0, #0x0                   	// #0
  6c:	ret

0000000000000070 <splay_tree_foreach_internal>:
  70:	cbz	x0, c4 <splay_tree_foreach_internal+0x54>
  74:	stp	x29, x30, [sp, #-48]!
  78:	mov	x29, sp
  7c:	stp	x19, x20, [sp, #16]
  80:	mov	x19, x0
  84:	mov	x20, x2
  88:	str	x21, [sp, #32]
  8c:	mov	x21, x1
  90:	mov	x0, x19
  94:	mov	x1, x20
  98:	blr	x21
  9c:	ldr	x0, [x19, #24]
  a0:	mov	x2, x20
  a4:	mov	x1, x21
  a8:	bl	70 <splay_tree_foreach_internal>
  ac:	ldr	x19, [x19, #32]
  b0:	cbnz	x19, 90 <splay_tree_foreach_internal+0x20>
  b4:	ldp	x19, x20, [sp, #16]
  b8:	ldr	x21, [sp, #32]
  bc:	ldp	x29, x30, [sp], #48
  c0:	ret
  c4:	ret

00000000000000c8 <splay_tree_splay.part.0>:
  c8:	ldr	w4, [x1]
  cc:	ldr	x1, [x0]
  d0:	ldr	w2, [x1]
  d4:	cmp	w2, w4
  d8:	b.eq	14c <splay_tree_splay.part.0+0x84>  // b.none
  dc:	cmp	w4, w2
  e0:	ldp	x2, x3, [x1, #24]
  e4:	b.lt	150 <splay_tree_splay.part.0+0x88>  // b.tstop
  e8:	mov	w6, #0x1                   	// #1
  ec:	mov	x2, x3
  f0:	mov	w5, w6
  f4:	mov	w7, #0x0                   	// #0
  f8:	cbz	x2, 14c <splay_tree_splay.part.0+0x84>
  fc:	ldr	w3, [x2]
 100:	cmp	w3, w4
 104:	b.eq	1a4 <splay_tree_splay.part.0+0xdc>  // b.none
 108:	b.gt	160 <splay_tree_splay.part.0+0x98>
 10c:	ldr	x3, [x2, #32]
 110:	cbz	x3, 1a4 <splay_tree_splay.part.0+0xdc>
 114:	cmp	w5, #0x1
 118:	b.ne	1d4 <splay_tree_splay.part.0+0x10c>  // b.any
 11c:	ldr	x5, [x3, #24]
 120:	str	x2, [x3, #24]
 124:	str	x5, [x2, #32]
 128:	str	x3, [x1, #32]
 12c:	ldr	x2, [x3, #24]
 130:	str	x1, [x3, #24]
 134:	str	x2, [x1, #32]
 138:	mov	x1, x3
 13c:	str	x3, [x0]
 140:	ldr	w2, [x1]
 144:	cmp	w2, w4
 148:	b.ne	dc <splay_tree_splay.part.0+0x14>  // b.any
 14c:	ret
 150:	mov	w7, #0x1                   	// #1
 154:	mov	w6, #0x0                   	// #0
 158:	mov	w5, #0xffffffff            	// #-1
 15c:	b	f8 <splay_tree_splay.part.0+0x30>
 160:	ldr	x3, [x2, #24]
 164:	cbz	x3, 1a4 <splay_tree_splay.part.0+0xdc>
 168:	cmn	w5, #0x1
 16c:	b.ne	1c0 <splay_tree_splay.part.0+0xf8>  // b.any
 170:	ldr	x5, [x3, #32]
 174:	str	x2, [x3, #32]
 178:	str	x5, [x2, #24]
 17c:	str	x3, [x1, #24]
 180:	ldr	x2, [x3, #32]
 184:	str	x1, [x3, #32]
 188:	str	x2, [x1, #24]
 18c:	mov	x1, x3
 190:	str	x3, [x0]
 194:	ldr	w2, [x1]
 198:	cmp	w2, w4
 19c:	b.ne	dc <splay_tree_splay.part.0+0x14>  // b.any
 1a0:	ret
 1a4:	cmn	w5, #0x1
 1a8:	b.eq	1f0 <splay_tree_splay.part.0+0x128>  // b.none
 1ac:	ldr	x3, [x2, #24]
 1b0:	str	x1, [x2, #24]
 1b4:	str	x3, [x1, #32]
 1b8:	str	x2, [x0]
 1bc:	ret
 1c0:	cbz	w6, 1e8 <splay_tree_splay.part.0+0x120>
 1c4:	ldr	x5, [x3, #32]
 1c8:	str	x2, [x3, #32]
 1cc:	str	x5, [x2, #24]
 1d0:	b	128 <splay_tree_splay.part.0+0x60>
 1d4:	cbz	w7, 1e8 <splay_tree_splay.part.0+0x120>
 1d8:	ldr	x5, [x3, #24]
 1dc:	str	x2, [x3, #24]
 1e0:	str	x5, [x2, #32]
 1e4:	b	17c <splay_tree_splay.part.0+0xb4>
 1e8:	ldr	x1, [x0]
 1ec:	b	194 <splay_tree_splay.part.0+0xcc>
 1f0:	ldr	x3, [x2, #32]
 1f4:	str	x1, [x2, #32]
 1f8:	str	x3, [x1, #24]
 1fc:	str	x2, [x0]
 200:	ret
 204:	nop

0000000000000208 <priority_tree_remove>:
 208:	mov	x8, x1
 20c:	sub	x0, x2, w0, sxtw #4
 210:	ldr	x1, [x1]
 214:	mov	x9, x2
 218:	ldur	w2, [x0, #-8]
 21c:	cbz	x1, 2fc <priority_tree_remove+0xf4>
 220:	stp	x29, x30, [sp, #-48]!
 224:	mov	x0, x8
 228:	mov	x29, sp
 22c:	add	x1, sp, #0x18
 230:	str	w2, [sp, #24]
 234:	bl	c8 <splay_tree_splay.part.0>
 238:	ldr	x10, [x8]
 23c:	cbz	x10, 2e4 <priority_tree_remove+0xdc>
 240:	ldr	w1, [x10]
 244:	ldr	w0, [sp, #24]
 248:	cmp	w1, w0
 24c:	b.ne	2e4 <priority_tree_remove+0xdc>  // b.any
 250:	ldp	x0, x1, [x9]
 254:	ldr	x2, [x10, #8]
 258:	cmp	x9, x2
 25c:	str	x0, [x1]
 260:	str	x1, [x0, #8]
 264:	b.eq	270 <priority_tree_remove+0x68>  // b.none
 268:	ldp	x29, x30, [sp], #48
 26c:	ret
 270:	cmp	x9, x0
 274:	b.eq	284 <priority_tree_remove+0x7c>  // b.none
 278:	str	x0, [x10, #8]
 27c:	ldp	x29, x30, [sp], #48
 280:	ret
 284:	str	xzr, [x10, #8]
 288:	mov	x0, x8
 28c:	mov	x1, x10
 290:	bl	c8 <splay_tree_splay.part.0>
 294:	ldr	x0, [x8]
 298:	cbz	x0, 2d0 <priority_tree_remove+0xc8>
 29c:	ldr	w2, [x0]
 2a0:	ldr	w1, [x10]
 2a4:	cmp	w2, w1
 2a8:	b.ne	2d0 <priority_tree_remove+0xc8>  // b.any
 2ac:	ldp	x1, x2, [x0, #24]
 2b0:	cbz	x1, 2dc <priority_tree_remove+0xd4>
 2b4:	str	x1, [x8]
 2b8:	cbz	x2, 2d0 <priority_tree_remove+0xc8>
 2bc:	nop
 2c0:	mov	x0, x1
 2c4:	ldr	x1, [x1, #32]
 2c8:	cbnz	x1, 2c0 <priority_tree_remove+0xb8>
 2cc:	str	x2, [x0, #32]
 2d0:	mov	x0, x10
 2d4:	bl	0 <free>
 2d8:	b	268 <priority_tree_remove+0x60>
 2dc:	str	x2, [x8]
 2e0:	b	2d0 <priority_tree_remove+0xc8>
 2e4:	ldp	x0, x1, [x9]
 2e8:	mov	x2, #0x0                   	// #0
 2ec:	str	x0, [x1]
 2f0:	str	x1, [x0, #8]
 2f4:	ldr	x0, [x2, #8]
 2f8:	brk	#0x3e8
 2fc:	ldp	x0, x1, [x9]
 300:	mov	x2, #0x0                   	// #0
 304:	str	x0, [x1]
 308:	str	x1, [x0, #8]
 30c:	ldr	x0, [x2, #8]
 310:	brk	#0x3e8
 314:	nop

0000000000000318 <priority_tree_next_task>:
 318:	ldr	x5, [x1]
 31c:	cbz	x5, 400 <priority_tree_next_task+0xe8>
 320:	sxtw	x7, w0
 324:	mov	w8, w0
 328:	add	x7, x7, #0x6
 32c:	stp	x29, x30, [sp, #-16]!
 330:	neg	x7, x7, lsl #4
 334:	mov	x29, sp
 338:	ldr	x1, [x5, #32]
 33c:	mov	w0, w8
 340:	bl	0 <priority_tree_next_task_1>
 344:	mov	x6, x0
 348:	cbnz	x0, 37c <priority_tree_next_task+0x64>
 34c:	ldr	x6, [x5, #8]
 350:	add	x6, x6, x7
 354:	ldr	w0, [x6, #200]
 358:	cmp	w0, #0x2
 35c:	b.eq	37c <priority_tree_next_task+0x64>  // b.none
 360:	ldr	x5, [x5, #24]
 364:	cbnz	x5, 338 <priority_tree_next_task+0x20>
 368:	mov	w0, #0x1                   	// #1
 36c:	strb	w0, [x4]
 370:	ldp	x29, x30, [sp], #16
 374:	mov	x0, x5
 378:	ret
 37c:	cbz	x3, 3c4 <priority_tree_next_task+0xac>
 380:	ldr	x3, [x3]
 384:	cbz	x3, 3c4 <priority_tree_next_task+0xac>
 388:	sxtw	x7, w2
 38c:	add	x7, x7, #0x6
 390:	neg	x7, x7, lsl #4
 394:	ldr	x1, [x3, #32]
 398:	mov	w0, w2
 39c:	bl	0 <priority_tree_next_task_1>
 3a0:	mov	x5, x0
 3a4:	cbnz	x0, 3cc <priority_tree_next_task+0xb4>
 3a8:	ldr	x5, [x3, #8]
 3ac:	add	x5, x5, x7
 3b0:	ldr	w0, [x5, #200]
 3b4:	cmp	w0, #0x2
 3b8:	b.eq	3cc <priority_tree_next_task+0xb4>  // b.none
 3bc:	ldr	x3, [x3, #24]
 3c0:	cbnz	x3, 394 <priority_tree_next_task+0x7c>
 3c4:	mov	x5, x6
 3c8:	b	368 <priority_tree_next_task+0x50>
 3cc:	ldr	w0, [x5, #88]
 3d0:	ldr	w1, [x6, #88]
 3d4:	cmp	w1, w0
 3d8:	b.gt	3c4 <priority_tree_next_task+0xac>
 3dc:	b.lt	3f0 <priority_tree_next_task+0xd8>  // b.tstop
 3e0:	ldrb	w0, [x5, #207]
 3e4:	cbz	w0, 3c4 <priority_tree_next_task+0xac>
 3e8:	ldrb	w0, [x6, #207]
 3ec:	cbnz	w0, 3c4 <priority_tree_next_task+0xac>
 3f0:	mov	x0, x5
 3f4:	strb	wzr, [x4]
 3f8:	ldp	x29, x30, [sp], #16
 3fc:	ret
 400:	mov	w0, #0x1                   	// #1
 404:	strb	w0, [x4]
 408:	mov	x0, x5
 40c:	ret

0000000000000410 <prio_splay_tree_insert>:
 410:	ldr	x3, [x0]
 414:	cbz	x3, 544 <prio_splay_tree_insert+0x134>
 418:	ldr	w4, [x1]
 41c:	ldr	w5, [x3]
 420:	cmp	w5, w4
 424:	b.eq	494 <prio_splay_tree_insert+0x84>  // b.none
 428:	mov	w8, #0xffffffff            	// #-1
 42c:	mov	w7, #0x1                   	// #1
 430:	ldp	x2, x6, [x3, #24]
 434:	cmp	w4, w5
 438:	csel	x2, x2, x6, lt  // lt = tstop
 43c:	csel	w6, w8, w7, lt  // lt = tstop
 440:	cbz	x2, 53c <prio_splay_tree_insert+0x12c>
 444:	ldr	w5, [x2]
 448:	cmp	w5, w4
 44c:	b.eq	4ec <prio_splay_tree_insert+0xdc>  // b.none
 450:	b.gt	4a8 <prio_splay_tree_insert+0x98>
 454:	ldr	x5, [x2, #32]
 458:	cbz	x5, 4ec <prio_splay_tree_insert+0xdc>
 45c:	cmp	w6, #0x1
 460:	b.ne	584 <prio_splay_tree_insert+0x174>  // b.any
 464:	ldr	x6, [x5, #24]
 468:	str	x2, [x5, #24]
 46c:	str	x6, [x2, #32]
 470:	str	x5, [x3, #32]
 474:	ldr	x2, [x5, #24]
 478:	str	x3, [x5, #24]
 47c:	str	x2, [x3, #32]
 480:	mov	x3, x5
 484:	str	x5, [x0]
 488:	ldr	w5, [x3]
 48c:	cmp	w5, w4
 490:	b.ne	430 <prio_splay_tree_insert+0x20>  // b.any
 494:	stp	x29, x30, [sp, #-16]!
 498:	adrp	x0, 0 <priority_tree_next_task_1>
 49c:	add	x0, x0, #0x0
 4a0:	mov	x29, sp
 4a4:	bl	0 <gomp_fatal>
 4a8:	ldr	x5, [x2, #24]
 4ac:	cbz	x5, 4ec <prio_splay_tree_insert+0xdc>
 4b0:	cmn	w6, #0x1
 4b4:	b.ne	550 <prio_splay_tree_insert+0x140>  // b.any
 4b8:	ldr	x6, [x5, #32]
 4bc:	str	x2, [x5, #32]
 4c0:	str	x6, [x2, #24]
 4c4:	str	x5, [x3, #24]
 4c8:	ldr	x2, [x5, #32]
 4cc:	str	x3, [x5, #32]
 4d0:	str	x2, [x3, #24]
 4d4:	mov	x3, x5
 4d8:	str	x5, [x0]
 4dc:	ldr	w5, [x3]
 4e0:	cmp	w5, w4
 4e4:	b.ne	430 <prio_splay_tree_insert+0x20>  // b.any
 4e8:	b	494 <prio_splay_tree_insert+0x84>
 4ec:	cmn	w6, #0x1
 4f0:	b.eq	570 <prio_splay_tree_insert+0x160>  // b.none
 4f4:	ldr	x5, [x2, #24]
 4f8:	str	x3, [x2, #24]
 4fc:	str	x5, [x3, #32]
 500:	str	x2, [x0]
 504:	ldr	w3, [x2]
 508:	cmp	w4, w3
 50c:	b.eq	494 <prio_splay_tree_insert+0x84>  // b.none
 510:	b.le	528 <prio_splay_tree_insert+0x118>
 514:	ldr	x3, [x2, #32]
 518:	stp	x2, x3, [x1, #24]
 51c:	str	xzr, [x2, #32]
 520:	str	x1, [x0]
 524:	ret
 528:	ldr	x3, [x2, #24]
 52c:	stp	x3, x2, [x1, #24]
 530:	str	xzr, [x2, #24]
 534:	str	x1, [x0]
 538:	ret
 53c:	ldr	x2, [x0]
 540:	cbnz	x2, 504 <prio_splay_tree_insert+0xf4>
 544:	stp	xzr, xzr, [x1, #24]
 548:	str	x1, [x0]
 54c:	ret
 550:	cmp	w6, #0x0
 554:	b.le	568 <prio_splay_tree_insert+0x158>
 558:	ldr	x6, [x5, #32]
 55c:	str	x2, [x5, #32]
 560:	str	x6, [x2, #24]
 564:	b	470 <prio_splay_tree_insert+0x60>
 568:	ldr	x3, [x0]
 56c:	b	4dc <prio_splay_tree_insert+0xcc>
 570:	ldr	x5, [x2, #32]
 574:	str	x3, [x2, #32]
 578:	str	x5, [x3, #24]
 57c:	str	x2, [x0]
 580:	b	504 <prio_splay_tree_insert+0xf4>
 584:	tbz	w6, #31, 568 <prio_splay_tree_insert+0x158>
 588:	ldr	x6, [x5, #24]
 58c:	str	x2, [x5, #24]
 590:	str	x6, [x2, #32]
 594:	b	4c4 <prio_splay_tree_insert+0xb4>

0000000000000598 <prio_splay_tree_remove>:
 598:	ldr	x2, [x0]
 59c:	cbz	x2, 640 <prio_splay_tree_remove+0xa8>
 5a0:	ldr	w3, [x1]
 5a4:	ldr	w4, [x2]
 5a8:	cmp	w4, w3
 5ac:	b.eq	620 <prio_splay_tree_remove+0x88>  // b.none
 5b0:	mov	w7, #0xffffffff            	// #-1
 5b4:	mov	w6, #0x1                   	// #1
 5b8:	ldp	x1, x5, [x2, #24]
 5bc:	cmp	w3, w4
 5c0:	csel	x1, x1, x5, lt  // lt = tstop
 5c4:	csel	w5, w7, w6, lt  // lt = tstop
 5c8:	cbz	x1, 6e8 <prio_splay_tree_remove+0x150>
 5cc:	ldr	w4, [x1]
 5d0:	cmp	w3, w4
 5d4:	b.eq	688 <prio_splay_tree_remove+0xf0>  // b.none
 5d8:	b.lt	644 <prio_splay_tree_remove+0xac>  // b.tstop
 5dc:	ldr	x4, [x1, #32]
 5e0:	cbz	x4, 688 <prio_splay_tree_remove+0xf0>
 5e4:	cmp	w5, #0x1
 5e8:	b.ne	6f4 <prio_splay_tree_remove+0x15c>  // b.any
 5ec:	ldr	x5, [x4, #24]
 5f0:	str	x1, [x4, #24]
 5f4:	str	x5, [x1, #32]
 5f8:	str	x4, [x2, #32]
 5fc:	ldr	x1, [x4, #24]
 600:	str	x2, [x4, #24]
 604:	str	x1, [x2, #32]
 608:	mov	x2, x4
 60c:	str	x4, [x0]
 610:	ldr	w4, [x2]
 614:	cmp	w4, w3
 618:	b.ne	5b8 <prio_splay_tree_remove+0x20>  // b.any
 61c:	nop
 620:	ldp	x1, x2, [x2, #24]
 624:	cbz	x1, 708 <prio_splay_tree_remove+0x170>
 628:	str	x1, [x0]
 62c:	cbz	x2, 640 <prio_splay_tree_remove+0xa8>
 630:	mov	x0, x1
 634:	ldr	x1, [x1, #32]
 638:	cbnz	x1, 630 <prio_splay_tree_remove+0x98>
 63c:	str	x2, [x0, #32]
 640:	ret
 644:	ldr	x4, [x1, #24]
 648:	cbz	x4, 688 <prio_splay_tree_remove+0xf0>
 64c:	cmn	w5, #0x1
 650:	b.ne	6b4 <prio_splay_tree_remove+0x11c>  // b.any
 654:	ldr	x5, [x4, #32]
 658:	str	x1, [x4, #32]
 65c:	str	x5, [x1, #24]
 660:	str	x4, [x2, #24]
 664:	ldr	x1, [x4, #32]
 668:	str	x2, [x4, #32]
 66c:	str	x1, [x2, #24]
 670:	mov	x2, x4
 674:	str	x4, [x0]
 678:	ldr	w4, [x2]
 67c:	cmp	w4, w3
 680:	b.ne	5b8 <prio_splay_tree_remove+0x20>  // b.any
 684:	b	620 <prio_splay_tree_remove+0x88>
 688:	cmn	w5, #0x1
 68c:	b.eq	6d4 <prio_splay_tree_remove+0x13c>  // b.none
 690:	ldr	x4, [x1, #24]
 694:	str	x2, [x1, #24]
 698:	str	x4, [x2, #32]
 69c:	str	x1, [x0]
 6a0:	ldr	w2, [x1]
 6a4:	cmp	w3, w2
 6a8:	b.ne	640 <prio_splay_tree_remove+0xa8>  // b.any
 6ac:	mov	x2, x1
 6b0:	b	620 <prio_splay_tree_remove+0x88>
 6b4:	cmp	w5, #0x0
 6b8:	b.le	6cc <prio_splay_tree_remove+0x134>
 6bc:	ldr	x5, [x4, #32]
 6c0:	str	x1, [x4, #32]
 6c4:	str	x5, [x1, #24]
 6c8:	b	5f8 <prio_splay_tree_remove+0x60>
 6cc:	ldr	x2, [x0]
 6d0:	b	678 <prio_splay_tree_remove+0xe0>
 6d4:	ldr	x4, [x1, #32]
 6d8:	str	x2, [x1, #32]
 6dc:	str	x4, [x2, #24]
 6e0:	str	x1, [x0]
 6e4:	b	6a0 <prio_splay_tree_remove+0x108>
 6e8:	ldr	x1, [x0]
 6ec:	cbnz	x1, 6a0 <prio_splay_tree_remove+0x108>
 6f0:	ret
 6f4:	tbz	w5, #31, 6cc <prio_splay_tree_remove+0x134>
 6f8:	ldr	x5, [x4, #24]
 6fc:	str	x1, [x4, #24]
 700:	str	x5, [x1, #32]
 704:	b	660 <prio_splay_tree_remove+0xc8>
 708:	str	x2, [x0]
 70c:	ret

0000000000000710 <prio_splay_tree_lookup>:
 710:	ldr	x2, [x0]
 714:	cbz	x2, 7c4 <prio_splay_tree_lookup+0xb4>
 718:	ldr	w4, [x1]
 71c:	ldr	w1, [x2]
 720:	cmp	w1, w4
 724:	b.eq	798 <prio_splay_tree_lookup+0x88>  // b.none
 728:	cmp	w1, w4
 72c:	ldp	x1, x3, [x2, #24]
 730:	b.gt	7cc <prio_splay_tree_lookup+0xbc>
 734:	mov	w6, #0x1                   	// #1
 738:	mov	x1, x3
 73c:	mov	w5, w6
 740:	mov	w7, #0x0                   	// #0
 744:	cbz	x1, 840 <prio_splay_tree_lookup+0x130>
 748:	ldr	w3, [x1]
 74c:	cmp	w3, w4
 750:	b.eq	7a0 <prio_splay_tree_lookup+0x90>  // b.none
 754:	b.gt	7dc <prio_splay_tree_lookup+0xcc>
 758:	ldr	x3, [x1, #32]
 75c:	cbz	x3, 7a0 <prio_splay_tree_lookup+0x90>
 760:	cmp	w5, #0x1
 764:	b.ne	864 <prio_splay_tree_lookup+0x154>  // b.any
 768:	ldr	x5, [x3, #24]
 76c:	str	x1, [x3, #24]
 770:	str	x5, [x1, #32]
 774:	str	x3, [x2, #32]
 778:	ldr	x1, [x3, #24]
 77c:	str	x2, [x3, #24]
 780:	str	x1, [x2, #32]
 784:	mov	x2, x3
 788:	str	x3, [x0]
 78c:	ldr	w1, [x2]
 790:	cmp	w1, w4
 794:	b.ne	728 <prio_splay_tree_lookup+0x18>  // b.any
 798:	mov	x0, x2
 79c:	ret
 7a0:	cmn	w5, #0x1
 7a4:	b.eq	850 <prio_splay_tree_lookup+0x140>  // b.none
 7a8:	ldr	x3, [x1, #24]
 7ac:	str	x2, [x1, #24]
 7b0:	str	x3, [x2, #32]
 7b4:	str	x1, [x0]
 7b8:	ldr	w0, [x1]
 7bc:	cmp	w4, w0
 7c0:	b.eq	878 <prio_splay_tree_lookup+0x168>  // b.none
 7c4:	mov	x0, #0x0                   	// #0
 7c8:	ret
 7cc:	mov	w7, #0x1                   	// #1
 7d0:	mov	w6, #0x0                   	// #0
 7d4:	mov	w5, #0xffffffff            	// #-1
 7d8:	b	744 <prio_splay_tree_lookup+0x34>
 7dc:	ldr	x3, [x1, #24]
 7e0:	cbz	x3, 7a0 <prio_splay_tree_lookup+0x90>
 7e4:	cmn	w5, #0x1
 7e8:	b.ne	824 <prio_splay_tree_lookup+0x114>  // b.any
 7ec:	ldr	x5, [x3, #32]
 7f0:	str	x1, [x3, #32]
 7f4:	str	x5, [x1, #24]
 7f8:	str	x3, [x2, #24]
 7fc:	ldr	x1, [x3, #32]
 800:	str	x2, [x3, #32]
 804:	str	x1, [x2, #24]
 808:	mov	x2, x3
 80c:	str	x3, [x0]
 810:	ldr	w1, [x2]
 814:	cmp	w1, w4
 818:	b.ne	728 <prio_splay_tree_lookup+0x18>  // b.any
 81c:	mov	x0, x2
 820:	b	79c <prio_splay_tree_lookup+0x8c>
 824:	cbz	w6, 838 <prio_splay_tree_lookup+0x128>
 828:	ldr	x5, [x3, #32]
 82c:	str	x1, [x3, #32]
 830:	str	x5, [x1, #24]
 834:	b	774 <prio_splay_tree_lookup+0x64>
 838:	ldr	x2, [x0]
 83c:	b	810 <prio_splay_tree_lookup+0x100>
 840:	ldr	x1, [x0]
 844:	cbnz	x1, 7b8 <prio_splay_tree_lookup+0xa8>
 848:	mov	x0, #0x0                   	// #0
 84c:	b	7c8 <prio_splay_tree_lookup+0xb8>
 850:	ldr	x3, [x1, #32]
 854:	str	x2, [x1, #32]
 858:	str	x3, [x2, #24]
 85c:	str	x1, [x0]
 860:	b	7b8 <prio_splay_tree_lookup+0xa8>
 864:	cbz	w7, 838 <prio_splay_tree_lookup+0x128>
 868:	ldr	x5, [x3, #24]
 86c:	str	x1, [x3, #24]
 870:	str	x5, [x1, #32]
 874:	b	7f8 <prio_splay_tree_lookup+0xe8>
 878:	mov	x2, x1
 87c:	mov	x0, x2
 880:	b	79c <prio_splay_tree_lookup+0x8c>
 884:	nop

0000000000000888 <prio_splay_tree_foreach>:
 888:	stp	x29, x30, [sp, #-48]!
 88c:	mov	x29, sp
 890:	stp	x19, x20, [sp, #16]
 894:	ldr	x19, [x0]
 898:	cbz	x19, 8d0 <prio_splay_tree_foreach+0x48>
 89c:	mov	x20, x2
 8a0:	str	x21, [sp, #32]
 8a4:	mov	x21, x1
 8a8:	mov	x0, x19
 8ac:	mov	x1, x20
 8b0:	blr	x21
 8b4:	ldr	x0, [x19, #24]
 8b8:	mov	x2, x20
 8bc:	mov	x1, x21
 8c0:	bl	70 <splay_tree_foreach_internal>
 8c4:	ldr	x19, [x19, #32]
 8c8:	cbnz	x19, 8a8 <prio_splay_tree_foreach+0x20>
 8cc:	ldr	x21, [sp, #32]
 8d0:	ldp	x19, x20, [sp, #16]
 8d4:	ldp	x29, x30, [sp], #48
 8d8:	ret

affinity-fmt.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_display_string_len>:
       0:	stp	x29, x30, [sp, #-96]!
       4:	cmp	x1, #0x0
       8:	mov	x29, sp
       c:	stp	x25, x26, [sp, #64]
      10:	mov	x26, x0
      14:	ldr	x25, [x2]
      18:	stp	x19, x20, [sp, #16]
      1c:	mov	x19, x4
      20:	stp	x21, x22, [sp, #32]
      24:	mov	x20, x1
      28:	mov	x21, x6
      2c:	stp	x23, x24, [sp, #48]
      30:	cset	w23, ne  // ne = any
      34:	cmp	x1, x25
      38:	str	x27, [sp, #80]
      3c:	cset	w4, hi  // hi = pmore
      40:	cmp	x19, x6
      44:	mov	x24, x2
      48:	and	w4, w23, w4
      4c:	ccmn	x19, #0x1, #0x4, hi  // hi = pmore
      50:	mov	x27, x5
      54:	b.eq	100 <gomp_display_string_len+0x100>  // b.none
      58:	and	w3, w3, #0xff
      5c:	cbnz	w3, b8 <gomp_display_string_len+0xb8>
      60:	mov	x22, x25
      64:	cbnz	w4, 154 <gomp_display_string_len+0x154>
      68:	add	x22, x21, x22
      6c:	str	x22, [x24]
      70:	cmp	x25, x22
      74:	b.hi	f4 <gomp_display_string_len+0xf4>  // b.pmore
      78:	cmp	w23, #0x0
      7c:	sub	x19, x19, x21
      80:	ccmp	x20, x22, #0x0, ne  // ne = any
      84:	mov	x0, x22
      88:	b.hi	1b4 <gomp_display_string_len+0x1b4>  // b.pmore
      8c:	add	x19, x19, x0
      90:	str	x19, [x24]
      94:	cmp	x19, x22
      98:	b.cc	f4 <gomp_display_string_len+0xf4>  // b.lo, b.ul, b.last
      9c:	ldp	x19, x20, [sp, #16]
      a0:	ldp	x21, x22, [sp, #32]
      a4:	ldp	x23, x24, [sp, #48]
      a8:	ldp	x25, x26, [sp, #64]
      ac:	ldr	x27, [sp, #80]
      b0:	ldp	x29, x30, [sp], #96
      b4:	ret
      b8:	sub	x19, x19, x6
      bc:	mov	x0, x25
      c0:	cbnz	w4, 174 <gomp_display_string_len+0x174>
      c4:	add	x19, x19, x0
      c8:	str	x19, [x24]
      cc:	cmp	x19, x25
      d0:	b.cc	f4 <gomp_display_string_len+0xf4>  // b.lo, b.ul, b.last
      d4:	cmp	w23, #0x0
      d8:	mov	x6, x19
      dc:	ccmp	x20, x19, #0x0, ne  // ne = any
      e0:	b.hi	194 <gomp_display_string_len+0x194>  // b.pmore
      e4:	add	x21, x21, x6
      e8:	str	x21, [x24]
      ec:	cmp	x21, x19
      f0:	b.cs	9c <gomp_display_string_len+0x9c>  // b.hs, b.nlast
      f4:	adrp	x0, 0 <gomp_display_string_len>
      f8:	add	x0, x0, #0x0
      fc:	bl	0 <gomp_fatal>
     100:	mov	x19, x25
     104:	cbnz	w4, 134 <gomp_display_string_len+0x134>
     108:	add	x19, x21, x19
     10c:	str	x19, [x24]
     110:	cmp	x19, x25
     114:	b.cc	f4 <gomp_display_string_len+0xf4>  // b.lo, b.ul, b.last
     118:	ldp	x19, x20, [sp, #16]
     11c:	ldp	x21, x22, [sp, #32]
     120:	ldp	x23, x24, [sp, #48]
     124:	ldp	x25, x26, [sp, #64]
     128:	ldr	x27, [sp, #80]
     12c:	ldp	x29, x30, [sp], #96
     130:	ret
     134:	sub	x2, x1, x25
     138:	add	x0, x0, x25
     13c:	cmp	x2, x6
     140:	mov	x1, x5
     144:	csel	x2, x2, x6, ls  // ls = plast
     148:	bl	0 <memcpy>
     14c:	ldr	x19, [x24]
     150:	b	108 <gomp_display_string_len+0x108>
     154:	sub	x2, x1, x25
     158:	add	x0, x0, x25
     15c:	cmp	x2, x6
     160:	mov	x1, x5
     164:	csel	x2, x2, x6, ls  // ls = plast
     168:	bl	0 <memcpy>
     16c:	ldr	x22, [x24]
     170:	b	68 <gomp_display_string_len+0x68>
     174:	sub	x2, x1, x25
     178:	add	x0, x26, x25
     17c:	cmp	x2, x19
     180:	mov	w1, #0x20                  	// #32
     184:	csel	x2, x2, x19, ls  // ls = plast
     188:	bl	0 <memset>
     18c:	ldr	x0, [x24]
     190:	b	c4 <gomp_display_string_len+0xc4>
     194:	sub	x2, x20, x19
     198:	mov	x1, x27
     19c:	cmp	x2, x21
     1a0:	add	x0, x26, x19
     1a4:	csel	x2, x2, x21, ls  // ls = plast
     1a8:	bl	0 <memcpy>
     1ac:	ldr	x6, [x24]
     1b0:	b	e4 <gomp_display_string_len+0xe4>
     1b4:	sub	x20, x20, x22
     1b8:	add	x0, x26, x22
     1bc:	cmp	x20, x19
     1c0:	mov	w1, #0x20                  	// #32
     1c4:	csel	x2, x20, x19, ls  // ls = plast
     1c8:	bl	0 <memset>
     1cc:	ldr	x0, [x24]
     1d0:	b	8c <gomp_display_string_len+0x8c>
     1d4:	nop

00000000000001d8 <gomp_display_num>:
     1d8:	stp	x29, x30, [sp, #-96]!
     1dc:	mov	x29, sp
     1e0:	stp	x23, x24, [sp, #48]
     1e4:	mov	x24, x2
     1e8:	stp	x19, x20, [sp, #16]
     1ec:	mov	x19, x5
     1f0:	and	w20, w3, #0xff
     1f4:	stp	x21, x22, [sp, #32]
     1f8:	mov	x22, x1
     1fc:	mov	x21, x0
     200:	mov	x0, x6
     204:	stp	x25, x26, [sp, #64]
     208:	and	w25, w4, #0xff
     20c:	mov	x26, x6
     210:	stp	x27, x28, [sp, #80]
     214:	bl	0 <strlen>
     218:	ldr	x27, [x24]
     21c:	cmp	x22, #0x0
     220:	cset	w28, ne  // ne = any
     224:	mov	x23, x0
     228:	cmp	x22, x27
     22c:	cset	w4, hi  // hi = pmore
     230:	cmp	x0, x19
     234:	and	w4, w28, w4
     238:	ccmn	x19, #0x1, #0x4, cc  // cc = lo, ul, last
     23c:	b.eq	324 <gomp_display_num+0x14c>  // b.none
     240:	cbz	w20, 2d4 <gomp_display_num+0xfc>
     244:	ldrb	w0, [x26]
     248:	cmp	w0, #0x2d
     24c:	b.eq	438 <gomp_display_num+0x260>  // b.none
     250:	cmp	w0, #0x30
     254:	b.eq	410 <gomp_display_num+0x238>  // b.none
     258:	sub	x20, x19, x23
     25c:	mov	x19, x27
     260:	cbnz	w4, 3f0 <gomp_display_num+0x218>
     264:	add	x20, x20, x19
     268:	str	x20, [x24]
     26c:	cmp	x27, x20
     270:	b.hi	318 <gomp_display_num+0x140>  // b.pmore
     274:	cmp	x22, x20
     278:	ldrb	w1, [x26]
     27c:	cset	w0, hi  // hi = pmore
     280:	and	w28, w28, w0
     284:	cmp	w1, #0x2d
     288:	b.eq	464 <gomp_display_num+0x28c>  // b.none
     28c:	cmp	w1, #0x30
     290:	b.ne	2a0 <gomp_display_num+0xc8>  // b.any
     294:	ldrb	w0, [x26, #1]
     298:	cmp	w0, #0x78
     29c:	b.eq	50c <gomp_display_num+0x334>  // b.none
     2a0:	mov	x19, x20
     2a4:	cbnz	w28, 3b0 <gomp_display_num+0x1d8>
     2a8:	add	x19, x23, x19
     2ac:	str	x19, [x24]
     2b0:	cmp	x20, x19
     2b4:	b.hi	318 <gomp_display_num+0x140>  // b.pmore
     2b8:	ldp	x19, x20, [sp, #16]
     2bc:	ldp	x21, x22, [sp, #32]
     2c0:	ldp	x23, x24, [sp, #48]
     2c4:	ldp	x25, x26, [sp, #64]
     2c8:	ldp	x27, x28, [sp, #80]
     2cc:	ldp	x29, x30, [sp], #96
     2d0:	ret
     2d4:	cbz	w25, 358 <gomp_display_num+0x180>
     2d8:	sub	x20, x19, x0
     2dc:	mov	x19, x27
     2e0:	cbnz	w4, 4ac <gomp_display_num+0x2d4>
     2e4:	add	x20, x20, x19
     2e8:	str	x20, [x24]
     2ec:	cmp	x27, x20
     2f0:	b.hi	318 <gomp_display_num+0x140>  // b.pmore
     2f4:	cmp	w28, #0x0
     2f8:	mov	x19, x20
     2fc:	ccmp	x22, x20, #0x0, ne  // ne = any
     300:	b.hi	4ec <gomp_display_num+0x314>  // b.pmore
     304:	add	x19, x23, x19
     308:	str	x19, [x24]
     30c:	cmp	x19, x20
     310:	b.cs	2b8 <gomp_display_num+0xe0>  // b.hs, b.nlast
     314:	nop
     318:	adrp	x0, 0 <gomp_display_string_len>
     31c:	add	x0, x0, #0x0
     320:	bl	0 <gomp_fatal>
     324:	mov	x19, x27
     328:	cbnz	w4, 3d0 <gomp_display_num+0x1f8>
     32c:	add	x19, x23, x19
     330:	str	x19, [x24]
     334:	cmp	x19, x27
     338:	b.cc	318 <gomp_display_num+0x140>  // b.lo, b.ul, b.last
     33c:	ldp	x19, x20, [sp, #16]
     340:	ldp	x21, x22, [sp, #32]
     344:	ldp	x23, x24, [sp, #48]
     348:	ldp	x25, x26, [sp, #64]
     34c:	ldp	x27, x28, [sp, #80]
     350:	ldp	x29, x30, [sp], #96
     354:	ret
     358:	mov	x20, x27
     35c:	cbnz	w4, 48c <gomp_display_num+0x2b4>
     360:	add	x20, x23, x20
     364:	str	x20, [x24]
     368:	cmp	x27, x20
     36c:	b.hi	318 <gomp_display_num+0x140>  // b.pmore
     370:	cmp	w28, #0x0
     374:	sub	x19, x19, x23
     378:	ccmp	x22, x20, #0x0, ne  // ne = any
     37c:	mov	x0, x20
     380:	b.hi	4cc <gomp_display_num+0x2f4>  // b.pmore
     384:	add	x19, x19, x0
     388:	str	x19, [x24]
     38c:	cmp	x19, x20
     390:	b.cc	318 <gomp_display_num+0x140>  // b.lo, b.ul, b.last
     394:	ldp	x19, x20, [sp, #16]
     398:	ldp	x21, x22, [sp, #32]
     39c:	ldp	x23, x24, [sp, #48]
     3a0:	ldp	x25, x26, [sp, #64]
     3a4:	ldp	x27, x28, [sp, #80]
     3a8:	ldp	x29, x30, [sp], #96
     3ac:	ret
     3b0:	sub	x2, x22, x20
     3b4:	mov	x1, x26
     3b8:	cmp	x2, x23
     3bc:	add	x0, x21, x20
     3c0:	csel	x2, x2, x23, ls  // ls = plast
     3c4:	bl	0 <memcpy>
     3c8:	ldr	x19, [x24]
     3cc:	b	2a8 <gomp_display_num+0xd0>
     3d0:	sub	x2, x22, x27
     3d4:	mov	x1, x26
     3d8:	cmp	x2, x0
     3dc:	add	x0, x21, x27
     3e0:	csel	x2, x2, x23, ls  // ls = plast
     3e4:	bl	0 <memcpy>
     3e8:	ldr	x19, [x24]
     3ec:	b	32c <gomp_display_num+0x154>
     3f0:	sub	x2, x22, x27
     3f4:	add	x0, x21, x27
     3f8:	cmp	x2, x20
     3fc:	mov	w1, #0x30                  	// #48
     400:	csel	x2, x2, x20, ls  // ls = plast
     404:	bl	0 <memset>
     408:	ldr	x19, [x24]
     40c:	b	264 <gomp_display_num+0x8c>
     410:	ldrb	w0, [x26, #1]
     414:	cmp	w0, #0x78
     418:	b.ne	258 <gomp_display_num+0x80>  // b.any
     41c:	mov	x0, x27
     420:	cbnz	w4, 544 <gomp_display_num+0x36c>
     424:	add	x0, x0, #0x2
     428:	str	x0, [x24]
     42c:	cmp	x0, x27
     430:	b.cs	450 <gomp_display_num+0x278>  // b.hs, b.nlast
     434:	b	318 <gomp_display_num+0x140>
     438:	mov	x1, x27
     43c:	cbnz	w4, 538 <gomp_display_num+0x360>
     440:	add	x0, x1, #0x1
     444:	str	x0, [x24]
     448:	cmp	x0, x27
     44c:	b.cc	318 <gomp_display_num+0x140>  // b.lo, b.ul, b.last
     450:	cmp	x22, x0
     454:	mov	x27, x0
     458:	cset	w4, hi  // hi = pmore
     45c:	and	w4, w28, w4
     460:	b	258 <gomp_display_num+0x80>
     464:	sub	x23, x23, #0x1
     468:	mov	x0, x20
     46c:	sub	x2, x22, x20
     470:	add	x1, x26, #0x1
     474:	cbnz	w28, 520 <gomp_display_num+0x348>
     478:	add	x0, x23, x0
     47c:	str	x0, [x24]
     480:	cmp	x20, x0
     484:	b.ls	2b8 <gomp_display_num+0xe0>  // b.plast
     488:	b	318 <gomp_display_num+0x140>
     48c:	sub	x2, x22, x27
     490:	mov	x1, x26
     494:	cmp	x2, x0
     498:	add	x0, x21, x27
     49c:	csel	x2, x2, x23, ls  // ls = plast
     4a0:	bl	0 <memcpy>
     4a4:	ldr	x20, [x24]
     4a8:	b	360 <gomp_display_num+0x188>
     4ac:	sub	x2, x22, x27
     4b0:	add	x0, x21, x27
     4b4:	cmp	x2, x20
     4b8:	mov	w1, #0x20                  	// #32
     4bc:	csel	x2, x2, x20, ls  // ls = plast
     4c0:	bl	0 <memset>
     4c4:	ldr	x19, [x24]
     4c8:	b	2e4 <gomp_display_num+0x10c>
     4cc:	sub	x2, x22, x20
     4d0:	add	x0, x21, x20
     4d4:	cmp	x2, x19
     4d8:	mov	w1, #0x20                  	// #32
     4dc:	csel	x2, x2, x19, ls  // ls = plast
     4e0:	bl	0 <memset>
     4e4:	ldr	x0, [x24]
     4e8:	b	384 <gomp_display_num+0x1ac>
     4ec:	sub	x2, x22, x20
     4f0:	mov	x1, x26
     4f4:	cmp	x2, x23
     4f8:	add	x0, x21, x20
     4fc:	csel	x2, x2, x23, ls  // ls = plast
     500:	bl	0 <memcpy>
     504:	ldr	x19, [x24]
     508:	b	304 <gomp_display_num+0x12c>
     50c:	sub	x23, x23, #0x2
     510:	mov	x0, x20
     514:	cbz	w28, 478 <gomp_display_num+0x2a0>
     518:	sub	x2, x22, x20
     51c:	add	x1, x26, #0x2
     520:	cmp	x2, x23
     524:	add	x0, x21, x20
     528:	csel	x2, x2, x23, ls  // ls = plast
     52c:	bl	0 <memcpy>
     530:	ldr	x0, [x24]
     534:	b	478 <gomp_display_num+0x2a0>
     538:	strb	w0, [x21, x27]
     53c:	ldr	x1, [x24]
     540:	b	440 <gomp_display_num+0x268>
     544:	sub	x0, x22, x27
     548:	mov	x2, #0x2                   	// #2
     54c:	cmp	x0, x2
     550:	mov	x1, x26
     554:	csel	x2, x0, x2, ls  // ls = plast
     558:	add	x0, x21, x27
     55c:	bl	0 <memcpy>
     560:	ldr	x0, [x24]
     564:	b	424 <gomp_display_num+0x24c>

0000000000000568 <gomp_print_string>:
     568:	adrp	x3, 0 <stderr>
     56c:	mov	x2, x1
     570:	mov	x1, #0x1                   	// #1
     574:	ldr	x3, [x3]
     578:	b	0 <fwrite>
     57c:	nop

0000000000000580 <gomp_set_affinity_format>:
     580:	stp	x29, x30, [sp, #-64]!
     584:	mov	x29, sp
     588:	stp	x21, x22, [sp, #32]
     58c:	adrp	x21, 0 <gomp_affinity_format_len>
     590:	stp	x19, x20, [sp, #16]
     594:	mov	x19, x1
     598:	mov	x20, x0
     59c:	ldr	x1, [x21]
     5a0:	cmp	x1, x19
     5a4:	b.hi	610 <gomp_set_affinity_format+0x90>  // b.pmore
     5a8:	str	x23, [sp, #48]
     5ac:	add	x22, x19, #0x1
     5b0:	cbnz	x1, 5f8 <gomp_set_affinity_format+0x78>
     5b4:	mov	x0, x22
     5b8:	bl	0 <gomp_malloc>
     5bc:	mov	x3, x0
     5c0:	adrp	x23, 0 <gomp_affinity_format_var>
     5c4:	mov	x1, x20
     5c8:	mov	x2, x19
     5cc:	mov	x0, x3
     5d0:	bl	0 <memcpy>
     5d4:	mov	x3, x0
     5d8:	str	x0, [x23]
     5dc:	str	x22, [x21]
     5e0:	ldr	x23, [sp, #48]
     5e4:	strb	wzr, [x3, x19]
     5e8:	ldp	x19, x20, [sp, #16]
     5ec:	ldp	x21, x22, [sp, #32]
     5f0:	ldp	x29, x30, [sp], #64
     5f4:	ret
     5f8:	adrp	x23, 0 <gomp_affinity_format_var>
     5fc:	mov	x1, x22
     600:	ldr	x0, [x23]
     604:	bl	0 <gomp_realloc>
     608:	mov	x3, x0
     60c:	b	5c4 <gomp_set_affinity_format+0x44>
     610:	adrp	x21, 0 <gomp_affinity_format_var>
     614:	mov	x1, x0
     618:	mov	x2, x19
     61c:	ldr	x0, [x21]
     620:	bl	0 <memcpy>
     624:	ldr	x3, [x21]
     628:	strb	wzr, [x3, x19]
     62c:	ldp	x19, x20, [sp, #16]
     630:	ldp	x21, x22, [sp, #32]
     634:	ldp	x29, x30, [sp], #64
     638:	ret
     63c:	nop

0000000000000640 <omp_set_affinity_format>:
     640:	stp	x29, x30, [sp, #-64]!
     644:	mov	x29, sp
     648:	stp	x21, x22, [sp, #32]
     64c:	adrp	x22, 0 <gomp_affinity_format_len>
     650:	stp	x19, x20, [sp, #16]
     654:	mov	x20, x0
     658:	bl	0 <strlen>
     65c:	ldr	x1, [x22]
     660:	mov	x19, x0
     664:	cmp	x0, x1
     668:	b.cc	6d4 <omp_set_affinity_format+0x94>  // b.lo, b.ul, b.last
     66c:	str	x23, [sp, #48]
     670:	add	x21, x0, #0x1
     674:	cbnz	x1, 6bc <omp_set_affinity_format+0x7c>
     678:	mov	x0, x21
     67c:	bl	0 <gomp_malloc>
     680:	mov	x3, x0
     684:	adrp	x23, 0 <gomp_affinity_format_var>
     688:	mov	x1, x20
     68c:	mov	x2, x19
     690:	mov	x0, x3
     694:	bl	0 <memcpy>
     698:	mov	x3, x0
     69c:	str	x0, [x23]
     6a0:	str	x21, [x22]
     6a4:	ldr	x23, [sp, #48]
     6a8:	strb	wzr, [x3, x19]
     6ac:	ldp	x19, x20, [sp, #16]
     6b0:	ldp	x21, x22, [sp, #32]
     6b4:	ldp	x29, x30, [sp], #64
     6b8:	ret
     6bc:	adrp	x23, 0 <gomp_affinity_format_var>
     6c0:	mov	x1, x21
     6c4:	ldr	x0, [x23]
     6c8:	bl	0 <gomp_realloc>
     6cc:	mov	x3, x0
     6d0:	b	688 <omp_set_affinity_format+0x48>
     6d4:	adrp	x21, 0 <gomp_affinity_format_var>
     6d8:	mov	x2, x0
     6dc:	mov	x1, x20
     6e0:	ldr	x0, [x21]
     6e4:	bl	0 <memcpy>
     6e8:	ldr	x3, [x21]
     6ec:	strb	wzr, [x3, x19]
     6f0:	ldp	x19, x20, [sp, #16]
     6f4:	ldp	x21, x22, [sp, #32]
     6f8:	ldp	x29, x30, [sp], #64
     6fc:	ret

0000000000000700 <omp_get_affinity_format>:
     700:	stp	x29, x30, [sp, #-48]!
     704:	adrp	x2, 0 <gomp_affinity_format_var>
     708:	mov	x29, sp
     70c:	stp	x21, x22, [sp, #32]
     710:	mov	x21, x0
     714:	ldr	x22, [x2]
     718:	stp	x19, x20, [sp, #16]
     71c:	mov	x19, x1
     720:	mov	x0, x22
     724:	bl	0 <strlen>
     728:	mov	x20, x0
     72c:	cbz	x19, 748 <omp_get_affinity_format+0x48>
     730:	cmp	x0, x19
     734:	b.cs	75c <omp_get_affinity_format+0x5c>  // b.hs, b.nlast
     738:	mov	x1, x22
     73c:	mov	x0, x21
     740:	add	x2, x20, #0x1
     744:	bl	0 <memcpy>
     748:	mov	x0, x20
     74c:	ldp	x19, x20, [sp, #16]
     750:	ldp	x21, x22, [sp, #32]
     754:	ldp	x29, x30, [sp], #48
     758:	ret
     75c:	sub	x19, x19, #0x1
     760:	mov	x1, x22
     764:	mov	x2, x19
     768:	mov	x0, x21
     76c:	bl	0 <memcpy>
     770:	strb	wzr, [x21, x19]
     774:	mov	x0, x20
     778:	ldp	x19, x20, [sp, #16]
     77c:	ldp	x21, x22, [sp, #32]
     780:	ldp	x29, x30, [sp], #48
     784:	ret

0000000000000788 <gomp_display_string>:
     788:	stp	x29, x30, [sp, #-48]!
     78c:	cmp	x1, #0x0
     790:	mov	x29, sp
     794:	str	x21, [sp, #32]
     798:	ldr	x21, [x2]
     79c:	stp	x19, x20, [sp, #16]
     7a0:	mov	x19, x4
     7a4:	mov	x20, x2
     7a8:	ccmp	x21, x1, #0x2, ne  // ne = any
     7ac:	mov	x4, x21
     7b0:	b.cc	7d4 <gomp_display_string+0x4c>  // b.lo, b.ul, b.last
     7b4:	add	x4, x19, x4
     7b8:	str	x4, [x20]
     7bc:	cmp	x4, x21
     7c0:	b.cc	800 <gomp_display_string+0x78>  // b.lo, b.ul, b.last
     7c4:	ldp	x19, x20, [sp, #16]
     7c8:	ldr	x21, [sp, #32]
     7cc:	ldp	x29, x30, [sp], #48
     7d0:	ret
     7d4:	sub	x5, x1, x21
     7d8:	add	x0, x0, x21
     7dc:	cmp	x5, x19
     7e0:	mov	x1, x3
     7e4:	csel	x2, x5, x19, ls  // ls = plast
     7e8:	bl	0 <memcpy>
     7ec:	ldr	x4, [x20]
     7f0:	add	x4, x19, x4
     7f4:	str	x4, [x20]
     7f8:	cmp	x4, x21
     7fc:	b.cs	7c4 <gomp_display_string+0x3c>  // b.hs, b.nlast
     800:	adrp	x0, 0 <gomp_display_string_len>
     804:	add	x0, x0, #0x0
     808:	bl	0 <gomp_fatal>
     80c:	nop

0000000000000810 <gomp_display_affinity>:
     810:	stp	x29, x30, [sp, #-416]!
     814:	mov	x29, sp
     818:	stp	x19, x20, [sp, #16]
     81c:	adrp	x20, 0 <gomp_display_string_len>
     820:	add	x20, x20, #0x0
     824:	stp	x21, x22, [sp, #32]
     828:	mov	x21, x1
     82c:	mov	x22, x2
     830:	stp	x25, x26, [sp, #64]
     834:	mov	x26, x0
     838:	add	x0, x20, #0x14
     83c:	stp	x23, x24, [sp, #48]
     840:	stp	x27, x28, [sp, #80]
     844:	adrp	x27, 0 <gomp_display_string_len>
     848:	stp	x4, x0, [sp, #112]
     84c:	add	x0, x27, #0x0
     850:	str	x0, [sp, #104]
     854:	str	x3, [sp, #128]
     858:	str	w5, [sp, #140]
     85c:	str	xzr, [sp, #152]
     860:	mov	x0, x22
     864:	mov	w1, #0x25                  	// #37
     868:	bl	0 <strchr>
     86c:	mov	x19, x0
     870:	cbz	x0, 96c <gomp_display_affinity+0x15c>
     874:	nop
     878:	cmp	x22, x19
     87c:	b.eq	8a8 <gomp_display_affinity+0x98>  // b.none
     880:	ldr	x24, [sp, #152]
     884:	cmp	x21, #0x0
     888:	sub	x23, x19, x22
     88c:	ccmp	x21, x24, #0x0, ne  // ne = any
     890:	mov	x0, x24
     894:	b.hi	d40 <gomp_display_affinity+0x530>  // b.pmore
     898:	add	x0, x23, x0
     89c:	str	x0, [sp, #152]
     8a0:	cmp	x24, x0
     8a4:	b.hi	d6c <gomp_display_affinity+0x55c>  // b.pmore
     8a8:	ldrb	w0, [x19]
     8ac:	cbz	w0, e94 <gomp_display_affinity+0x684>
     8b0:	ldrb	w1, [x19, #1]
     8b4:	cmp	w1, #0x25
     8b8:	b.eq	d78 <gomp_display_affinity+0x568>  // b.none
     8bc:	cmp	w1, #0x30
     8c0:	b.eq	b1c <gomp_display_affinity+0x30c>  // b.none
     8c4:	add	x19, x19, #0x1
     8c8:	cmp	w1, #0x2e
     8cc:	b.eq	d38 <gomp_display_affinity+0x528>  // b.none
     8d0:	sub	w0, w1, #0x31
     8d4:	and	w0, w0, #0xff
     8d8:	cmp	w0, #0x8
     8dc:	b.ls	fc4 <gomp_display_affinity+0x7b4>  // b.plast
     8e0:	cmp	w1, #0x7b
     8e4:	mov	w23, #0x0                   	// #0
     8e8:	mov	w24, #0x0                   	// #0
     8ec:	mov	x22, #0xffffffffffffffff    	// #-1
     8f0:	b.eq	b6c <gomp_display_affinity+0x35c>  // b.none
     8f4:	cmp	w1, #0x54
     8f8:	b.eq	da0 <gomp_display_affinity+0x590>  // b.none
     8fc:	b.hi	9ec <gomp_display_affinity+0x1dc>  // b.pmore
     900:	cmp	w1, #0x4c
     904:	b.eq	db8 <gomp_display_affinity+0x5a8>  // b.none
     908:	b.ls	990 <gomp_display_affinity+0x180>  // b.plast
     90c:	cmp	w1, #0x4e
     910:	b.ne	97c <gomp_display_affinity+0x16c>  // b.any
     914:	ldr	x0, [sp, #112]
     918:	mov	w2, #0x1                   	// #1
     91c:	ldr	x0, [x0]
     920:	cbz	x0, 928 <gomp_display_affinity+0x118>
     924:	ldr	w2, [x0]
     928:	ldr	x1, [sp, #104]
     92c:	add	x0, sp, #0xa0
     930:	bl	0 <sprintf>
     934:	add	x6, sp, #0xa0
     938:	mov	x5, x22
     93c:	mov	w4, w24
     940:	mov	w3, w23
     944:	add	x2, sp, #0x98
     948:	mov	x1, x21
     94c:	mov	x0, x26
     950:	bl	1d8 <gomp_display_num>
     954:	add	x22, x19, #0x1
     958:	mov	x0, x22
     95c:	mov	w1, #0x25                  	// #37
     960:	bl	0 <strchr>
     964:	mov	x19, x0
     968:	cbnz	x0, 878 <gomp_display_affinity+0x68>
     96c:	mov	x0, x22
     970:	bl	0 <strlen>
     974:	add	x19, x22, x0
     978:	b	878 <gomp_display_affinity+0x68>
     97c:	cmp	w1, #0x50
     980:	b.ne	fac <gomp_display_affinity+0x79c>  // b.any
     984:	bl	0 <getpid>
     988:	mov	w2, w0
     98c:	b	928 <gomp_display_affinity+0x118>
     990:	cmp	w1, #0x41
     994:	b.ne	a0c <gomp_display_affinity+0x1fc>  // b.any
     998:	ldr	w0, [sp, #140]
     99c:	cmn	x22, #0x1
     9a0:	sub	w23, w0, #0x1
     9a4:	b.eq	9d0 <gomp_display_affinity+0x1c0>  // b.none
     9a8:	mov	w3, w23
     9ac:	cbz	w24, e38 <gomp_display_affinity+0x628>
     9b0:	mov	x0, #0x0                   	// #0
     9b4:	add	x2, sp, #0xa0
     9b8:	mov	x1, #0x0                   	// #0
     9bc:	str	xzr, [sp, #160]
     9c0:	bl	0 <gomp_display_affinity_place>
     9c4:	ldr	x0, [sp, #160]
     9c8:	cmp	x0, x22
     9cc:	b.cc	eb4 <gomp_display_affinity+0x6a4>  // b.lo, b.ul, b.last
     9d0:	mov	w3, w23
     9d4:	add	x2, sp, #0x98
     9d8:	mov	x1, x21
     9dc:	mov	x0, x26
     9e0:	bl	0 <gomp_display_affinity_place>
     9e4:	add	x22, x19, #0x1
     9e8:	b	958 <gomp_display_affinity+0x148>
     9ec:	cmp	w1, #0x6e
     9f0:	b.eq	dac <gomp_display_affinity+0x59c>  // b.none
     9f4:	b.ls	acc <gomp_display_affinity+0x2bc>  // b.plast
     9f8:	cmp	w1, #0x74
     9fc:	b.ne	fac <gomp_display_affinity+0x79c>  // b.any
     a00:	bl	0 <omp_get_team_num>
     a04:	mov	w2, w0
     a08:	b	928 <gomp_display_affinity+0x118>
     a0c:	cmp	w1, #0x48
     a10:	b.ne	fac <gomp_display_affinity+0x79c>  // b.any
     a14:	add	x23, sp, #0xa0
     a18:	mov	x28, #0x100                 	// #256
     a1c:	mov	x25, x23
     a20:	sub	x27, x28, #0x1
     a24:	mov	x0, x25
     a28:	mov	x1, x27
     a2c:	strb	wzr, [x25, x27]
     a30:	bl	0 <gethostname>
     a34:	cbnz	w0, a48 <gomp_display_affinity+0x238>
     a38:	mov	x0, x25
     a3c:	bl	0 <strlen>
     a40:	cmp	x27, x0
     a44:	b.hi	a94 <gomp_display_affinity+0x284>  // b.pmore
     a48:	cmp	x28, #0x100, lsl #12
     a4c:	b.eq	dc4 <gomp_display_affinity+0x5b4>  // b.none
     a50:	lsl	x28, x28, #1
     a54:	cmp	x28, #0x200
     a58:	b.eq	b0c <gomp_display_affinity+0x2fc>  // b.none
     a5c:	mov	x0, x25
     a60:	mov	x1, x28
     a64:	sub	x27, x28, #0x1
     a68:	bl	0 <gomp_realloc>
     a6c:	mov	x25, x0
     a70:	mov	x1, x27
     a74:	mov	x0, x25
     a78:	strb	wzr, [x25, x27]
     a7c:	bl	0 <gethostname>
     a80:	cbnz	w0, a48 <gomp_display_affinity+0x238>
     a84:	mov	x0, x25
     a88:	bl	0 <strlen>
     a8c:	cmp	x27, x0
     a90:	b.ls	a48 <gomp_display_affinity+0x238>  // b.plast
     a94:	mov	x6, x0
     a98:	mov	x4, x22
     a9c:	mov	w3, w24
     aa0:	mov	x5, x25
     aa4:	add	x2, sp, #0x98
     aa8:	mov	x1, x21
     aac:	mov	x0, x26
     ab0:	bl	0 <gomp_display_string_len>
     ab4:	cmp	x25, x23
     ab8:	b.eq	954 <gomp_display_affinity+0x144>  // b.none
     abc:	mov	x0, x25
     ac0:	add	x22, x19, #0x1
     ac4:	bl	0 <free>
     ac8:	b	958 <gomp_display_affinity+0x148>
     acc:	cmp	w1, #0x61
     ad0:	b.ne	aec <gomp_display_affinity+0x2dc>  // b.any
     ad4:	ldr	x0, [sp, #112]
     ad8:	mov	w2, #0xffffffff            	// #-1
     adc:	ldr	x0, [x0]
     ae0:	cbz	x0, 928 <gomp_display_affinity+0x118>
     ae4:	ldr	w2, [x0, #32]
     ae8:	b	928 <gomp_display_affinity+0x118>
     aec:	cmp	w1, #0x69
     af0:	b.ne	fac <gomp_display_affinity+0x79c>  // b.any
     af4:	ldr	x2, [sp, #128]
     af8:	add	x0, sp, #0xa0
     afc:	adrp	x1, 0 <gomp_display_string_len>
     b00:	add	x1, x1, #0x0
     b04:	bl	0 <sprintf>
     b08:	b	934 <gomp_display_affinity+0x124>
     b0c:	mov	x0, x28
     b10:	bl	0 <gomp_malloc>
     b14:	mov	x25, x0
     b18:	b	a20 <gomp_display_affinity+0x210>
     b1c:	ldrb	w0, [x19, #2]
     b20:	add	x19, x19, #0x2
     b24:	cmp	w0, #0x2e
     b28:	b.ne	fd4 <gomp_display_affinity+0x7c4>  // b.any
     b2c:	mov	w23, #0x1                   	// #1
     b30:	ldrb	w1, [x19, #1]
     b34:	add	x0, x19, #0x1
     b38:	sub	w1, w1, #0x31
     b3c:	and	w1, w1, #0xff
     b40:	cmp	w1, #0x8
     b44:	b.hi	fb8 <gomp_display_affinity+0x7a8>  // b.pmore
     b48:	mov	w24, #0x1                   	// #1
     b4c:	add	x1, sp, #0xa0
     b50:	mov	w2, #0xa                   	// #10
     b54:	bl	0 <strtoul>
     b58:	mov	x22, x0
     b5c:	ldr	x19, [sp, #160]
     b60:	ldrb	w1, [x19]
     b64:	cmp	w1, #0x7b
     b68:	b.ne	8f4 <gomp_display_affinity+0xe4>  // b.any
     b6c:	ldrb	w28, [x20, #18]
     b70:	add	x25, x19, #0x1
     b74:	mov	x0, x25
     b78:	mov	x1, x20
     b7c:	mov	x2, x28
     b80:	bl	0 <strncmp>
     b84:	cbnz	w0, b9c <gomp_display_affinity+0x38c>
     b88:	add	x2, x28, #0x1
     b8c:	add	x3, x19, x2
     b90:	ldrb	w1, [x19, x2]
     b94:	cmp	w1, #0x7d
     b98:	b.eq	f04 <gomp_display_affinity+0x6f4>  // b.none
     b9c:	ldr	x1, [sp, #120]
     ba0:	mov	x0, x25
     ba4:	ldrb	w28, [x20, #38]
     ba8:	mov	x2, x28
     bac:	bl	0 <strncmp>
     bb0:	cbnz	w0, bc8 <gomp_display_affinity+0x3b8>
     bb4:	add	x2, x28, #0x1
     bb8:	add	x1, x19, x2
     bbc:	ldrb	w0, [x19, x2]
     bc0:	cmp	w0, #0x7d
     bc4:	b.eq	f44 <gomp_display_affinity+0x734>  // b.none
     bc8:	ldrb	w28, [x20, #58]
     bcc:	add	x1, x20, #0x28
     bd0:	mov	x0, x25
     bd4:	mov	x2, x28
     bd8:	bl	0 <strncmp>
     bdc:	cbnz	w0, bf4 <gomp_display_affinity+0x3e4>
     be0:	add	x2, x28, #0x1
     be4:	add	x1, x19, x2
     be8:	ldrb	w0, [x19, x2]
     bec:	cmp	w0, #0x7d
     bf0:	b.eq	f38 <gomp_display_affinity+0x728>  // b.none
     bf4:	ldrb	w28, [x20, #78]
     bf8:	add	x1, x20, #0x3c
     bfc:	mov	x0, x25
     c00:	mov	x2, x28
     c04:	bl	0 <strncmp>
     c08:	cbnz	w0, c20 <gomp_display_affinity+0x410>
     c0c:	add	x2, x28, #0x1
     c10:	add	x1, x19, x2
     c14:	ldrb	w0, [x19, x2]
     c18:	cmp	w0, #0x7d
     c1c:	b.eq	f5c <gomp_display_affinity+0x74c>  // b.none
     c20:	ldrb	w28, [x20, #98]
     c24:	add	x1, x20, #0x50
     c28:	mov	x0, x25
     c2c:	mov	x2, x28
     c30:	bl	0 <strncmp>
     c34:	cbnz	w0, c4c <gomp_display_affinity+0x43c>
     c38:	add	x2, x28, #0x1
     c3c:	add	x1, x19, x2
     c40:	ldrb	w0, [x19, x2]
     c44:	cmp	w0, #0x7d
     c48:	b.eq	f50 <gomp_display_affinity+0x740>  // b.none
     c4c:	ldrb	w28, [x20, #118]
     c50:	add	x1, x20, #0x64
     c54:	mov	x0, x25
     c58:	mov	x2, x28
     c5c:	bl	0 <strncmp>
     c60:	cbnz	w0, c78 <gomp_display_affinity+0x468>
     c64:	add	x2, x28, #0x1
     c68:	add	x1, x19, x2
     c6c:	ldrb	w0, [x19, x2]
     c70:	cmp	w0, #0x7d
     c74:	b.eq	f2c <gomp_display_affinity+0x71c>  // b.none
     c78:	ldrb	w28, [x20, #138]
     c7c:	add	x1, x20, #0x78
     c80:	mov	x0, x25
     c84:	mov	x2, x28
     c88:	bl	0 <strncmp>
     c8c:	cbnz	w0, ca4 <gomp_display_affinity+0x494>
     c90:	add	x2, x28, #0x1
     c94:	add	x1, x19, x2
     c98:	ldrb	w0, [x19, x2]
     c9c:	cmp	w0, #0x7d
     ca0:	b.eq	f94 <gomp_display_affinity+0x784>  // b.none
     ca4:	ldrb	w28, [x20, #158]
     ca8:	add	x1, x20, #0x8c
     cac:	mov	x0, x25
     cb0:	mov	x2, x28
     cb4:	bl	0 <strncmp>
     cb8:	cbnz	w0, cd0 <gomp_display_affinity+0x4c0>
     cbc:	add	x2, x28, #0x1
     cc0:	add	x1, x19, x2
     cc4:	ldrb	w0, [x19, x2]
     cc8:	cmp	w0, #0x7d
     ccc:	b.eq	f88 <gomp_display_affinity+0x778>  // b.none
     cd0:	ldrb	w28, [x20, #178]
     cd4:	add	x1, x20, #0xa0
     cd8:	mov	x0, x25
     cdc:	mov	x2, x28
     ce0:	bl	0 <strncmp>
     ce4:	cbnz	w0, cfc <gomp_display_affinity+0x4ec>
     ce8:	add	x2, x28, #0x1
     cec:	add	x1, x19, x2
     cf0:	ldrb	w0, [x19, x2]
     cf4:	cmp	w0, #0x7d
     cf8:	b.eq	fa0 <gomp_display_affinity+0x790>  // b.none
     cfc:	ldrb	w28, [x20, #198]
     d00:	add	x1, x20, #0xb4
     d04:	mov	x0, x25
     d08:	mov	x2, x28
     d0c:	bl	0 <strncmp>
     d10:	cbz	w0, e00 <gomp_display_affinity+0x5f0>
     d14:	mov	x0, x25
     d18:	mov	w1, #0x7d                  	// #125
     d1c:	bl	0 <strchr>
     d20:	cbz	x0, ef4 <gomp_display_affinity+0x6e4>
     d24:	sub	w1, w0, w25
     d28:	mov	x2, x25
     d2c:	adrp	x0, 0 <gomp_display_string_len>
     d30:	add	x0, x0, #0x0
     d34:	bl	0 <gomp_fatal>
     d38:	mov	w23, #0x0                   	// #0
     d3c:	b	b30 <gomp_display_affinity+0x320>
     d40:	sub	x2, x21, x24
     d44:	mov	x1, x22
     d48:	cmp	x2, x23
     d4c:	add	x0, x26, x24
     d50:	csel	x2, x2, x23, ls  // ls = plast
     d54:	bl	0 <memcpy>
     d58:	ldr	x0, [sp, #152]
     d5c:	add	x0, x23, x0
     d60:	str	x0, [sp, #152]
     d64:	cmp	x24, x0
     d68:	b.ls	8a8 <gomp_display_affinity+0x98>  // b.plast
     d6c:	adrp	x0, 0 <gomp_display_string_len>
     d70:	add	x0, x0, #0x0
     d74:	bl	0 <gomp_fatal>
     d78:	ldr	x0, [sp, #152]
     d7c:	cmp	x21, #0x0
     d80:	ccmp	x21, x0, #0x0, ne  // ne = any
     d84:	b.hi	e8c <gomp_display_affinity+0x67c>  // b.pmore
     d88:	add	x1, x0, #0x1
     d8c:	str	x1, [sp, #152]
     d90:	cmp	x0, x1
     d94:	b.hi	d6c <gomp_display_affinity+0x55c>  // b.pmore
     d98:	add	x22, x19, #0x2
     d9c:	b	860 <gomp_display_affinity+0x50>
     da0:	bl	0 <omp_get_num_teams>
     da4:	mov	w2, w0
     da8:	b	928 <gomp_display_affinity+0x118>
     dac:	ldr	x0, [sp, #112]
     db0:	ldr	w2, [x0, #24]
     db4:	b	928 <gomp_display_affinity+0x118>
     db8:	ldr	x0, [sp, #112]
     dbc:	ldr	w2, [x0, #28]
     dc0:	b	928 <gomp_display_affinity+0x118>
     dc4:	cmp	x25, x23
     dc8:	b.eq	dd4 <gomp_display_affinity+0x5c4>  // b.none
     dcc:	mov	x0, x25
     dd0:	bl	0 <free>
     dd4:	mov	x4, x22
     dd8:	mov	w3, w24
     ddc:	add	x2, sp, #0x98
     de0:	mov	x1, x21
     de4:	mov	x0, x26
     de8:	adrp	x5, 0 <gomp_display_string_len>
     dec:	mov	x6, #0x4                   	// #4
     df0:	add	x5, x5, #0x0
     df4:	add	x22, x19, #0x1
     df8:	bl	0 <gomp_display_string_len>
     dfc:	b	958 <gomp_display_affinity+0x148>
     e00:	add	x2, x28, #0x1
     e04:	add	x19, x19, x2
     e08:	ldrb	w0, [x19]
     e0c:	cmp	w0, #0x7d
     e10:	b.ne	d14 <gomp_display_affinity+0x504>  // b.any
     e14:	mov	w0, #0x9                   	// #9
     e18:	sbfiz	x1, x0, #2, #32
     e1c:	add	x0, x1, w0, sxtw
     e20:	add	x0, x20, x0, lsl #2
     e24:	ldrb	w1, [x0, #19]
     e28:	cmp	w1, #0x7b
     e2c:	b.ne	8f4 <gomp_display_affinity+0xe4>  // b.any
     e30:	add	x25, x19, #0x1
     e34:	b	d14 <gomp_display_affinity+0x504>
     e38:	mov	x0, x26
     e3c:	add	x2, sp, #0x98
     e40:	mov	x1, x21
     e44:	ldr	x23, [sp, #152]
     e48:	bl	0 <gomp_display_affinity_place>
     e4c:	ldr	x24, [sp, #152]
     e50:	sub	x0, x24, x23
     e54:	cmp	x0, x22
     e58:	b.cs	954 <gomp_display_affinity+0x144>  // b.hs, b.nlast
     e5c:	sub	x23, x23, x24
     e60:	cmp	x21, #0x0
     e64:	add	x22, x23, x22
     e68:	ccmp	x24, x21, #0x2, ne  // ne = any
     e6c:	mov	x0, x24
     e70:	b.cc	f0c <gomp_display_affinity+0x6fc>  // b.lo, b.ul, b.last
     e74:	add	x22, x22, x0
     e78:	str	x22, [sp, #152]
     e7c:	cmp	x24, x22
     e80:	b.hi	d6c <gomp_display_affinity+0x55c>  // b.pmore
     e84:	add	x22, x19, #0x1
     e88:	b	958 <gomp_display_affinity+0x148>
     e8c:	strb	w1, [x26, x0]
     e90:	b	d88 <gomp_display_affinity+0x578>
     e94:	ldp	x19, x20, [sp, #16]
     e98:	ldp	x21, x22, [sp, #32]
     e9c:	ldp	x23, x24, [sp, #48]
     ea0:	ldp	x25, x26, [sp, #64]
     ea4:	ldp	x27, x28, [sp, #80]
     ea8:	ldr	x0, [sp, #152]
     eac:	ldp	x29, x30, [sp], #416
     eb0:	ret
     eb4:	ldr	x24, [sp, #152]
     eb8:	cmp	x21, #0x0
     ebc:	sub	x22, x22, x0
     ec0:	ccmp	x21, x24, #0x0, ne  // ne = any
     ec4:	mov	x0, x24
     ec8:	b.hi	f68 <gomp_display_affinity+0x758>  // b.pmore
     ecc:	add	x22, x22, x0
     ed0:	str	x22, [sp, #152]
     ed4:	cmp	x24, x22
     ed8:	b.hi	d6c <gomp_display_affinity+0x55c>  // b.pmore
     edc:	mov	w3, w23
     ee0:	add	x2, sp, #0x98
     ee4:	mov	x1, x21
     ee8:	mov	x0, x26
     eec:	bl	0 <gomp_display_affinity_place>
     ef0:	b	9e4 <gomp_display_affinity+0x1d4>
     ef4:	adrp	x0, 0 <gomp_display_string_len>
     ef8:	mov	x1, x25
     efc:	add	x0, x0, #0x0
     f00:	bl	0 <gomp_fatal>
     f04:	mov	x19, x3
     f08:	b	e18 <gomp_display_affinity+0x608>
     f0c:	sub	x2, x21, x24
     f10:	add	x0, x26, x24
     f14:	cmp	x2, x22
     f18:	mov	w1, #0x20                  	// #32
     f1c:	csel	x2, x2, x22, ls  // ls = plast
     f20:	bl	0 <memset>
     f24:	ldr	x0, [sp, #152]
     f28:	b	e74 <gomp_display_affinity+0x664>
     f2c:	mov	x19, x1
     f30:	mov	w0, #0x5                   	// #5
     f34:	b	e18 <gomp_display_affinity+0x608>
     f38:	mov	x19, x1
     f3c:	mov	w0, #0x2                   	// #2
     f40:	b	e18 <gomp_display_affinity+0x608>
     f44:	mov	x19, x1
     f48:	mov	w0, #0x1                   	// #1
     f4c:	b	e18 <gomp_display_affinity+0x608>
     f50:	mov	x19, x1
     f54:	mov	w0, #0x4                   	// #4
     f58:	b	e18 <gomp_display_affinity+0x608>
     f5c:	mov	x19, x1
     f60:	mov	w0, #0x3                   	// #3
     f64:	b	e18 <gomp_display_affinity+0x608>
     f68:	sub	x2, x21, x24
     f6c:	add	x0, x26, x24
     f70:	cmp	x2, x22
     f74:	mov	w1, #0x20                  	// #32
     f78:	csel	x2, x2, x22, ls  // ls = plast
     f7c:	bl	0 <memset>
     f80:	ldr	x0, [sp, #152]
     f84:	b	ecc <gomp_display_affinity+0x6bc>
     f88:	mov	x19, x1
     f8c:	mov	w0, #0x7                   	// #7
     f90:	b	e18 <gomp_display_affinity+0x608>
     f94:	mov	x19, x1
     f98:	mov	w0, #0x6                   	// #6
     f9c:	b	e18 <gomp_display_affinity+0x608>
     fa0:	mov	x19, x1
     fa4:	mov	w0, #0x8                   	// #8
     fa8:	b	e18 <gomp_display_affinity+0x608>
     fac:	adrp	x0, 0 <gomp_display_string_len>
     fb0:	add	x0, x0, #0x0
     fb4:	bl	0 <gomp_fatal>
     fb8:	adrp	x0, 0 <gomp_display_string_len>
     fbc:	add	x0, x0, #0x0
     fc0:	bl	0 <gomp_fatal>
     fc4:	mov	x0, x19
     fc8:	mov	w23, #0x0                   	// #0
     fcc:	mov	w24, #0x0                   	// #0
     fd0:	b	b4c <gomp_display_affinity+0x33c>
     fd4:	adrp	x0, 0 <gomp_display_string_len>
     fd8:	add	x0, x0, #0x0
     fdc:	bl	0 <gomp_fatal>

0000000000000fe0 <gomp_ialias_omp_capture_affinity>:
     fe0:	stp	x29, x30, [sp, #-48]!
     fe4:	mov	x29, sp
     fe8:	stp	x19, x20, [sp, #16]
     fec:	mov	x20, x1
     ff0:	str	x21, [sp, #32]
     ff4:	mov	x21, x0
     ff8:	cbz	x2, 105c <gomp_ialias_omp_capture_affinity+0x7c>
     ffc:	ldrb	w0, [x2]
    1000:	mov	x19, x2
    1004:	cbz	w0, 105c <gomp_ialias_omp_capture_affinity+0x7c>
    1008:	bl	0 <pthread_self>
    100c:	mov	x3, x0
    1010:	adrp	x5, 0 <gomp_tls_data>
    1014:	ldr	x5, [x5]
    1018:	mrs	x4, tpidr_el0
    101c:	mov	x2, x19
    1020:	mov	x1, x20
    1024:	add	x5, x4, x5
    1028:	mov	x0, x21
    102c:	add	x4, x5, #0x10
    1030:	ldr	w5, [x5, #92]
    1034:	bl	810 <gomp_display_affinity>
    1038:	cbz	x20, 104c <gomp_ialias_omp_capture_affinity+0x6c>
    103c:	cmp	x20, x0
    1040:	b.hi	1068 <gomp_ialias_omp_capture_affinity+0x88>  // b.pmore
    1044:	add	x20, x21, x20
    1048:	sturb	wzr, [x20, #-1]
    104c:	ldp	x19, x20, [sp, #16]
    1050:	ldr	x21, [sp, #32]
    1054:	ldp	x29, x30, [sp], #48
    1058:	ret
    105c:	adrp	x0, 0 <gomp_affinity_format_var>
    1060:	ldr	x19, [x0]
    1064:	b	1008 <gomp_ialias_omp_capture_affinity+0x28>
    1068:	strb	wzr, [x21, x0]
    106c:	ldp	x19, x20, [sp, #16]
    1070:	ldr	x21, [sp, #32]
    1074:	ldp	x29, x30, [sp], #48
    1078:	ret
    107c:	nop

0000000000001080 <omp_display_affinity>:
    1080:	sub	sp, sp, #0x250
    1084:	stp	x29, x30, [sp]
    1088:	mov	x29, sp
    108c:	stp	x23, x24, [sp, #48]
    1090:	adrp	x23, 0 <gomp_tls_data>
    1094:	ldr	x23, [x23]
    1098:	stp	x19, x20, [sp, #16]
    109c:	mov	x20, x0
    10a0:	stp	x21, x22, [sp, #32]
    10a4:	mrs	x22, tpidr_el0
    10a8:	stp	x25, x26, [sp, #64]
    10ac:	bl	0 <pthread_self>
    10b0:	add	x4, x22, x23
    10b4:	mov	x21, x0
    10b8:	ldr	w5, [x4, #92]
    10bc:	cbz	x20, 11f0 <omp_display_affinity+0x170>
    10c0:	ldrb	w0, [x20]
    10c4:	cbnz	w0, 1130 <omp_display_affinity+0xb0>
    10c8:	adrp	x26, 0 <gomp_affinity_format_var>
    10cc:	add	x24, sp, #0x50
    10d0:	add	x4, x4, #0x10
    10d4:	mov	x0, x24
    10d8:	ldr	x2, [x26]
    10dc:	mov	x3, x21
    10e0:	mov	x1, #0x200                 	// #512
    10e4:	bl	810 <gomp_display_affinity>
    10e8:	mov	x19, x0
    10ec:	cmp	x0, #0x1ff
    10f0:	b.hi	1158 <omp_display_affinity+0xd8>  // b.pmore
    10f4:	adrp	x1, 0 <stderr>
    10f8:	mov	w4, #0xa                   	// #10
    10fc:	add	x2, x19, #0x1
    1100:	mov	x0, x24
    1104:	ldr	x3, [x1]
    1108:	mov	x1, #0x1                   	// #1
    110c:	strb	w4, [x24, x19]
    1110:	bl	0 <fwrite>
    1114:	ldp	x29, x30, [sp]
    1118:	ldp	x19, x20, [sp, #16]
    111c:	ldp	x21, x22, [sp, #32]
    1120:	ldp	x23, x24, [sp, #48]
    1124:	ldp	x25, x26, [sp, #64]
    1128:	add	sp, sp, #0x250
    112c:	ret
    1130:	add	x24, sp, #0x50
    1134:	add	x4, x4, #0x10
    1138:	mov	x0, x24
    113c:	mov	x3, x21
    1140:	mov	x2, x20
    1144:	mov	x1, #0x200                 	// #512
    1148:	bl	810 <gomp_display_affinity>
    114c:	mov	x19, x0
    1150:	cmp	x0, #0x1ff
    1154:	b.ls	10f4 <omp_display_affinity+0x74>  // b.plast
    1158:	add	x25, x19, #0x1
    115c:	strb	wzr, [sp, #591]
    1160:	mov	x0, x25
    1164:	bl	0 <gomp_malloc>
    1168:	mov	x24, x0
    116c:	ldrb	w0, [x20]
    1170:	cbz	w0, 11e4 <omp_display_affinity+0x164>
    1174:	add	x22, x22, x23
    1178:	mov	x3, x21
    117c:	mov	x2, x20
    1180:	add	x4, x22, #0x10
    1184:	mov	x1, x25
    1188:	mov	x0, x24
    118c:	ldr	w5, [x22, #92]
    1190:	add	x19, x24, x19
    1194:	bl	810 <gomp_display_affinity>
    1198:	cbz	x25, 11a4 <omp_display_affinity+0x124>
    119c:	cmp	x0, x25
    11a0:	b.cc	1238 <omp_display_affinity+0x1b8>  // b.lo, b.ul, b.last
    11a4:	adrp	x0, 0 <stderr>
    11a8:	mov	w1, #0xa                   	// #10
    11ac:	strb	w1, [x19]
    11b0:	mov	x2, x25
    11b4:	ldr	x3, [x0]
    11b8:	mov	x1, #0x1                   	// #1
    11bc:	mov	x0, x24
    11c0:	bl	0 <fwrite>
    11c4:	mov	x0, x24
    11c8:	ldp	x29, x30, [sp]
    11cc:	ldp	x19, x20, [sp, #16]
    11d0:	ldp	x21, x22, [sp, #32]
    11d4:	ldp	x23, x24, [sp, #48]
    11d8:	ldp	x25, x26, [sp, #64]
    11dc:	add	sp, sp, #0x250
    11e0:	b	0 <free>
    11e4:	adrp	x26, 0 <gomp_affinity_format_var>
    11e8:	ldr	x20, [x26]
    11ec:	b	1174 <omp_display_affinity+0xf4>
    11f0:	adrp	x26, 0 <gomp_affinity_format_var>
    11f4:	add	x24, sp, #0x50
    11f8:	add	x4, x4, #0x10
    11fc:	mov	x0, x24
    1200:	ldr	x2, [x26]
    1204:	mov	x3, x21
    1208:	mov	x1, #0x200                 	// #512
    120c:	bl	810 <gomp_display_affinity>
    1210:	mov	x19, x0
    1214:	cmp	x0, #0x1ff
    1218:	b.ls	10f4 <omp_display_affinity+0x74>  // b.plast
    121c:	add	x25, x19, #0x1
    1220:	strb	wzr, [sp, #591]
    1224:	mov	x0, x25
    1228:	bl	0 <gomp_malloc>
    122c:	ldr	x20, [x26]
    1230:	mov	x24, x0
    1234:	b	1174 <omp_display_affinity+0xf4>
    1238:	strb	wzr, [x24, x0]
    123c:	b	11a4 <omp_display_affinity+0x124>

Disassembly of section .text.unlikely:

0000000000000000 <gomp_display_affinity_thread>:
   0:	sub	sp, sp, #0x250
   4:	mov	x4, x1
   8:	mov	x3, x0
   c:	stp	x29, x30, [sp]
  10:	mov	x29, sp
  14:	stp	x23, x24, [sp, #48]
  18:	adrp	x24, 0 <gomp_affinity_format_var>
  1c:	mov	w23, w2
  20:	ldr	x2, [x24]
  24:	stp	x25, x26, [sp, #64]
  28:	add	x25, sp, #0x50
  2c:	mov	w5, w23
  30:	adrp	x26, 0 <stderr>
  34:	stp	x19, x20, [sp, #16]
  38:	mov	x20, x0
  3c:	mov	x0, x25
  40:	stp	x21, x22, [sp, #32]
  44:	mov	x22, x1
  48:	mov	x1, #0x200                 	// #512
  4c:	bl	810 <gomp_display_affinity>
  50:	mov	x19, x0
  54:	cmp	x0, #0x1ff
  58:	add	x21, x0, #0x1
  5c:	b.hi	98 <gomp_display_affinity_thread+0x98>  // b.pmore
  60:	ldr	x3, [x26]
  64:	mov	w4, #0xa                   	// #10
  68:	mov	x2, x21
  6c:	mov	x0, x25
  70:	mov	x1, #0x1                   	// #1
  74:	strb	w4, [x25, x19]
  78:	bl	0 <fwrite>
  7c:	ldp	x29, x30, [sp]
  80:	ldp	x19, x20, [sp, #16]
  84:	ldp	x21, x22, [sp, #32]
  88:	ldp	x23, x24, [sp, #48]
  8c:	ldp	x25, x26, [sp, #64]
  90:	add	sp, sp, #0x250
  94:	ret
  98:	mov	x0, x21
  9c:	bl	0 <gomp_malloc>
  a0:	ldr	x2, [x24]
  a4:	mov	w5, w23
  a8:	mov	x4, x22
  ac:	mov	x3, x20
  b0:	mov	x1, x21
  b4:	mov	x20, x0
  b8:	bl	810 <gomp_display_affinity>
  bc:	ldr	x3, [x26]
  c0:	mov	w4, #0xa                   	// #10
  c4:	strb	w4, [x20, x19]
  c8:	mov	x2, x21
  cc:	mov	x0, x20
  d0:	mov	x1, #0x1                   	// #1
  d4:	bl	0 <fwrite>
  d8:	mov	x0, x20
  dc:	ldp	x29, x30, [sp]
  e0:	ldp	x19, x20, [sp, #16]
  e4:	ldp	x21, x22, [sp, #32]
  e8:	ldp	x23, x24, [sp, #48]
  ec:	ldp	x25, x26, [sp, #64]
  f0:	add	sp, sp, #0x250
  f4:	b	0 <free>

teams.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_teams_reg>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	w20, w2
  10:	stp	x21, x22, [sp, #32]
  14:	mov	x21, x0
  18:	mov	x22, x1
  1c:	stp	x23, x24, [sp, #48]
  20:	mov	w23, w3
  24:	str	x25, [sp, #64]
  28:	mov	w25, #0x0                   	// #0
  2c:	cbz	w3, 5c <GOMP_teams_reg+0x5c>
  30:	adrp	x0, 0 <gomp_tls_data>
  34:	ldr	x0, [x0]
  38:	mrs	x1, tpidr_el0
  3c:	add	x0, x1, x0
  40:	ldr	x0, [x0, #80]
  44:	cbz	x0, e4 <GOMP_teams_reg+0xe4>
  48:	add	x0, x0, #0x90
  4c:	cmp	w23, #0x0
  50:	ldr	w25, [x0, #20]
  54:	csinv	w1, w23, wzr, ge  // ge = tcont
  58:	str	w1, [x0, #20]
  5c:	adrp	x0, 0 <GOMP_teams_reg>
  60:	adrp	x24, 0 <GOMP_teams_reg>
  64:	cmp	w20, #0x0
  68:	add	x19, x0, #0x0
  6c:	mov	w1, #0x3                   	// #3
  70:	str	wzr, [x0]
  74:	csel	w20, w20, w1, ne  // ne = any
  78:	str	w20, [x24]
  7c:	nop
  80:	mov	x0, x22
  84:	blr	x21
  88:	ldr	w4, [x19]
  8c:	add	w4, w4, #0x1
  90:	str	w4, [x19]
  94:	cmp	w4, w20
  98:	b.cc	80 <GOMP_teams_reg+0x80>  // b.lo, b.ul, b.last
  9c:	mov	w0, #0x1                   	// #1
  a0:	str	w0, [x24]
  a4:	str	wzr, [x19]
  a8:	cbz	w23, cc <GOMP_teams_reg+0xcc>
  ac:	adrp	x0, 0 <gomp_tls_data>
  b0:	ldr	x0, [x0]
  b4:	mrs	x1, tpidr_el0
  b8:	add	x0, x1, x0
  bc:	ldr	x0, [x0, #80]
  c0:	cbz	x0, ec <GOMP_teams_reg+0xec>
  c4:	add	x0, x0, #0x90
  c8:	str	w25, [x0, #20]
  cc:	ldp	x19, x20, [sp, #16]
  d0:	ldp	x21, x22, [sp, #32]
  d4:	ldp	x23, x24, [sp, #48]
  d8:	ldr	x25, [sp, #64]
  dc:	ldp	x29, x30, [sp], #80
  e0:	ret
  e4:	bl	0 <gomp_new_icv>
  e8:	b	4c <GOMP_teams_reg+0x4c>
  ec:	bl	0 <gomp_new_icv>
  f0:	str	w25, [x0, #20]
  f4:	b	cc <GOMP_teams_reg+0xcc>

00000000000000f8 <gomp_ialias_omp_get_num_teams>:
  f8:	adrp	x0, 0 <GOMP_teams_reg>
  fc:	ldr	w0, [x0]
 100:	ret
 104:	nop

0000000000000108 <gomp_ialias_omp_get_team_num>:
 108:	adrp	x0, 0 <GOMP_teams_reg>
 10c:	ldr	w0, [x0]
 110:	ret
