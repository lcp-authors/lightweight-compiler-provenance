In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libubsan.a_clang_-O2:

ubsan_diag.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>:
       0:	cmp	w0, #0x19
       4:	b.ls	2c <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE+0x2c>  // b.plast
       8:	str	x30, [sp, #-16]!
       c:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      10:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      14:	add	x2, x2, #0x0
      18:	add	x0, x0, #0x0
      1c:	mov	x4, #0x0                   	// #0
      20:	mov	x3, #0x0                   	// #0
      24:	mov	w1, #0x39                  	// #57
      28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
      2c:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      30:	add	x1, x1, #0x0
      34:	ldrb	w0, [x1, w0, uxtw]
      38:	adr	x1, 44 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE+0x44>
      3c:	add	x0, x1, w0, sxtb #2
      40:	br	x0
      44:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      48:	add	x0, x0, #0x0
      4c:	ret
      50:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      54:	add	x0, x0, #0x0
      58:	ret
      5c:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      60:	add	x0, x0, #0x0
      64:	ret
      68:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      6c:	add	x0, x0, #0x0
      70:	ret
      74:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      78:	add	x0, x0, #0x0
      7c:	ret
      80:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      84:	add	x0, x0, #0x0
      88:	ret
      8c:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      90:	add	x0, x0, #0x0
      94:	ret
      98:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      9c:	add	x0, x0, #0x0
      a0:	ret
      a4:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      a8:	add	x0, x0, #0x0
      ac:	ret
      b0:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      b4:	add	x0, x0, #0x0
      b8:	ret
      bc:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      c0:	add	x0, x0, #0x0
      c4:	ret
      c8:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      cc:	add	x0, x0, #0x0
      d0:	ret
      d4:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      d8:	add	x0, x0, #0x0
      dc:	ret
      e0:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      e4:	add	x0, x0, #0x0
      e8:	ret
      ec:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      f0:	add	x0, x0, #0x0
      f4:	ret
      f8:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      fc:	add	x0, x0, #0x0
     100:	ret
     104:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     108:	add	x0, x0, #0x0
     10c:	ret
     110:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     114:	add	x0, x0, #0x0
     118:	ret
     11c:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     120:	add	x0, x0, #0x0
     124:	ret
     128:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     12c:	add	x0, x0, #0x0
     130:	ret
     134:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     138:	add	x0, x0, #0x0
     13c:	ret
     140:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     144:	add	x0, x0, #0x0
     148:	ret
     14c:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     150:	add	x0, x0, #0x0
     154:	ret
     158:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     15c:	add	x0, x0, #0x0
     160:	ret
     164:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     168:	add	x0, x0, #0x0
     16c:	ret
     170:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     174:	add	x0, x0, #0x0
     178:	ret
     17c:	nop

0000000000000180 <_ZL10upperBoundmPN7__ubsan5RangeEj>:
     180:	cbz	w2, 26c <_ZL10upperBoundmPN7__ubsan5RangeEj+0xec>
     184:	sub	w2, w2, #0x1
     188:	add	x3, x1, #0x58
     18c:	mov	w5, #0x58                  	// #88
     190:	mov	x4, #0x0                   	// #0
     194:	str	x30, [sp, #-16]!
     198:	umaddl	x2, w2, w5, x3
     19c:	b	1d4 <_ZL10upperBoundmPN7__ubsan5RangeEj+0x54>
     1a0:	ldr	w3, [x4]
     1a4:	ldr	x5, [x4, #24]
     1a8:	cmp	w3, #0x2
     1ac:	b.ne	22c <_ZL10upperBoundmPN7__ubsan5RangeEj+0xac>  // b.any
     1b0:	ldr	w3, [x1]
     1b4:	ldr	x6, [x1, #24]
     1b8:	cmp	w3, #0x2
     1bc:	b.ne	24c <_ZL10upperBoundmPN7__ubsan5RangeEj+0xcc>  // b.any
     1c0:	cmp	x5, x6
     1c4:	csel	x4, x4, x1, ls  // ls = plast
     1c8:	add	x1, x1, #0x58
     1cc:	cmp	x1, x2
     1d0:	b.eq	200 <_ZL10upperBoundmPN7__ubsan5RangeEj+0x80>  // b.none
     1d4:	ldr	w3, [x1, #40]
     1d8:	ldr	x5, [x1, #64]
     1dc:	cmp	w3, #0x2
     1e0:	b.ne	20c <_ZL10upperBoundmPN7__ubsan5RangeEj+0x8c>  // b.any
     1e4:	cmp	x5, x0
     1e8:	b.ls	1c8 <_ZL10upperBoundmPN7__ubsan5RangeEj+0x48>  // b.plast
     1ec:	cbnz	x4, 1a0 <_ZL10upperBoundmPN7__ubsan5RangeEj+0x20>
     1f0:	mov	x4, x1
     1f4:	add	x1, x1, #0x58
     1f8:	cmp	x1, x2
     1fc:	b.ne	1d4 <_ZL10upperBoundmPN7__ubsan5RangeEj+0x54>  // b.any
     200:	mov	x0, x4
     204:	ldr	x30, [sp], #16
     208:	ret
     20c:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     210:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     214:	add	x2, x2, #0x0
     218:	add	x0, x0, #0x0
     21c:	mov	x4, #0x0                   	// #0
     220:	mov	x3, #0x0                   	// #0
     224:	mov	w1, #0x55                  	// #85
     228:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     22c:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     230:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     234:	add	x2, x2, #0x0
     238:	add	x0, x0, #0x0
     23c:	mov	x4, #0x0                   	// #0
     240:	mov	x3, #0x0                   	// #0
     244:	mov	w1, #0x55                  	// #85
     248:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     24c:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     250:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     254:	add	x2, x2, #0x0
     258:	add	x0, x0, #0x0
     25c:	mov	x4, #0x0                   	// #0
     260:	mov	x3, #0x0                   	// #0
     264:	mov	w1, #0x55                  	// #85
     268:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     26c:	mov	x4, #0x0                   	// #0
     270:	mov	x0, x4
     274:	ret

0000000000000278 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE>:
     278:	stp	x19, x20, [sp, #-112]!
     27c:	mov	x20, x2
     280:	str	x30, [sp, #64]
     284:	ldrb	w2, [x1]
     288:	cbz	w2, 334 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0xbc>
     28c:	mov	x19, x1
     290:	stp	x21, x22, [sp, #16]
     294:	adrp	x22, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     298:	mov	x21, x0
     29c:	add	x22, x22, #0x0
     2a0:	stp	x23, x24, [sp, #32]
     2a4:	adrp	x23, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     2a8:	add	x24, sp, #0x50
     2ac:	add	x23, x23, #0x0
     2b0:	stp	x25, x26, [sp, #48]
     2b4:	nop
     2b8:	cmp	w2, #0x25
     2bc:	add	x25, x19, #0x1
     2c0:	b.ne	384 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0x10c>  // b.any
     2c4:	ldrb	w3, [x19, #1]
     2c8:	add	x19, x19, #0x2
     2cc:	ubfiz	x3, x3, #5, #8
     2d0:	sub	x3, x3, #0x600
     2d4:	add	x26, x20, x3
     2d8:	ldr	w3, [x20, x3]
     2dc:	cmp	w3, #0x3
     2e0:	b.eq	3c8 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0x150>  // b.none
     2e4:	b.hi	35c <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0xe4>  // b.pmore
     2e8:	cmp	w3, #0x1
     2ec:	b.eq	3a4 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0x12c>  // b.none
     2f0:	cmp	w3, #0x2
     2f4:	b.ne	340 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0xc8>  // b.any
     2f8:	ldp	x2, x0, [x26, #16]
     2fc:	cbz	x0, 418 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0x1a0>
     300:	mov	w5, w2
     304:	lsr	x4, x2, #32
     308:	mov	w3, w0
     30c:	lsr	x2, x0, #32
     310:	mov	x1, x22
     314:	mov	x0, x21
     318:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     31c:	nop
     320:	ldrb	w2, [x25, #1]
     324:	cbnz	w2, 2b8 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0x40>
     328:	ldp	x21, x22, [sp, #16]
     32c:	ldp	x23, x24, [sp, #32]
     330:	ldp	x25, x26, [sp, #48]
     334:	ldr	x30, [sp, #64]
     338:	ldp	x19, x20, [sp], #112
     33c:	ret
     340:	cbnz	w3, 320 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0xa8>
     344:	ldr	x2, [x26, #16]
     348:	mov	x0, x21
     34c:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     350:	add	x1, x1, #0x0
     354:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     358:	b	320 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0xa8>
     35c:	cmp	w3, #0x4
     360:	b.eq	3e8 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0x170>  // b.none
     364:	cmp	w3, #0x5
     368:	b.ne	320 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0xa8>  // b.any
     36c:	ldr	x2, [x26, #16]
     370:	mov	x0, x21
     374:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     378:	add	x1, x1, #0x0
     37c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     380:	b	320 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0xa8>
     384:	mov	x0, x21
     388:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     38c:	add	x1, x1, #0x0
     390:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     394:	mov	x0, x25
     398:	mov	x25, x19
     39c:	mov	x19, x0
     3a0:	b	320 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0xa8>
     3a4:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
     3a8:	ldr	x1, [x26, #16]
     3ac:	bl	0 <_ZN11__sanitizer10Symbolizer8DemangleEPKc>
     3b0:	mov	x2, x0
     3b4:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     3b8:	mov	x0, x21
     3bc:	add	x1, x1, #0x0
     3c0:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     3c4:	b	320 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0xa8>
     3c8:	ldp	x2, x0, [x26, #16]
     3cc:	cmp	x2, #0x0
     3d0:	cinc	x1, x0, lt  // lt = tstop
     3d4:	cbnz	x1, 300 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0x88>
     3d8:	mov	x1, x23
     3dc:	mov	x0, x21
     3e0:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     3e4:	b	320 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0xa8>
     3e8:	ldr	q0, [x26, #16]
     3ec:	mov	x0, x24
     3f0:	mov	x1, #0x20                  	// #32
     3f4:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     3f8:	add	x2, x2, #0x0
     3fc:	bl	0 <snprintf>
     400:	mov	x2, x24
     404:	mov	x0, x21
     408:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     40c:	add	x1, x1, #0x0
     410:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     414:	b	320 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0xa8>
     418:	mov	x0, x21
     41c:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     420:	add	x1, x1, #0x0
     424:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     428:	b	320 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0xa8>
     42c:	nop

0000000000000430 <_ZN7__ubsan13GetStackTraceEPN11__sanitizer18BufferedStackTraceEmmmPvb>:
     430:	stp	x19, x20, [sp, #-80]!
     434:	mov	x19, x0
     438:	mov	x20, x1
     43c:	stp	x21, x24, [sp, #16]
     440:	mov	x21, x2
     444:	ands	w24, w5, #0xff
     448:	str	x30, [sp, #32]
     44c:	stp	xzr, xzr, [sp, #64]
     450:	b.ne	480 <_ZN7__ubsan13GetStackTraceEPN11__sanitizer18BufferedStackTraceEmmmPvb+0x50>  // b.any
     454:	mov	x6, #0x0                   	// #0
     458:	mov	x5, #0x0                   	// #0
     45c:	mov	w7, w24
     460:	mov	x2, x21
     464:	mov	w1, w20
     468:	mov	x0, x19
     46c:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
     470:	ldp	x21, x24, [sp, #16]
     474:	ldr	x30, [sp, #32]
     478:	ldp	x19, x20, [sp], #80
     47c:	ret
     480:	add	x2, sp, #0x48
     484:	add	x1, sp, #0x40
     488:	mov	w0, #0x0                   	// #0
     48c:	stp	x3, x4, [sp, #48]
     490:	bl	0 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_>
     494:	ldp	x3, x4, [sp, #48]
     498:	ldp	x5, x6, [sp, #64]
     49c:	b	45c <_ZN7__ubsan13GetStackTraceEPN11__sanitizer18BufferedStackTraceEmmmPvb+0x2c>

00000000000004a0 <_ZL20MaybePrintStackTracemm>:
     4a0:	adrp	x4, 0 <_ZN7__ubsan11ubsan_flagsE>
     4a4:	ldr	x4, [x4]
     4a8:	ldrb	w2, [x4, #1]
     4ac:	cbnz	w2, 4b4 <_ZL20MaybePrintStackTracemm+0x14>
     4b0:	ret
     4b4:	adrp	x5, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     4b8:	sub	sp, sp, #0x830
     4bc:	add	x6, sp, #0x28
     4c0:	mov	x3, x1
     4c4:	ldr	x5, [x5]
     4c8:	mov	x2, x0
     4cc:	mov	x4, #0x0                   	// #0
     4d0:	mov	x1, #0x100                 	// #256
     4d4:	stp	x19, x30, [sp]
     4d8:	add	x19, sp, #0x18
     4dc:	ldrb	w5, [x5, #33]
     4e0:	mov	x0, x19
     4e4:	stp	x6, xzr, [sp, #24]
     4e8:	str	xzr, [sp, #2088]
     4ec:	bl	430 <_ZN7__ubsan13GetStackTraceEPN11__sanitizer18BufferedStackTraceEmmmPvb>
     4f0:	mov	x0, x19
     4f4:	bl	0 <_ZNK11__sanitizer10StackTrace5PrintEv>
     4f8:	ldp	x19, x30, [sp]
     4fc:	add	sp, sp, #0x830
     500:	ret
     504:	nop

0000000000000508 <_ZN7__ubsan21getSymbolizedLocationEm>:
     508:	stp	x19, x30, [sp, #-16]!
     50c:	mov	x19, x0
     510:	bl	0 <_ZN7__ubsan27InitAsStandaloneIfNecessaryEv>
     514:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
     518:	mov	x1, x19
     51c:	ldp	x19, x30, [sp], #16
     520:	b	0 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm>
     524:	nop

0000000000000528 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>:
     528:	ldr	w3, [x0, #320]
     52c:	cmp	w3, #0x8
     530:	b.eq	558 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE+0x30>  // b.none
     534:	ubfiz	x4, x3, #5, #32
     538:	add	w3, w3, #0x1
     53c:	add	x4, x4, #0x40
     540:	str	w3, [x0, #320]
     544:	add	x3, x0, x4
     548:	add	x1, x1, #0x4
     54c:	str	wzr, [x0, x4]
     550:	str	x1, [x3, #16]
     554:	ret
     558:	str	x30, [sp, #-16]!
     55c:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     560:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     564:	add	x2, x2, #0x0
     568:	add	x0, x0, #0x0
     56c:	mov	x4, #0x0                   	// #0
     570:	mov	x3, #0x0                   	// #0
     574:	mov	w1, #0xbf                  	// #191
     578:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     57c:	nop

0000000000000580 <_ZN7__ubsan4DiaglsERKNS_5ValueE>:
     580:	stp	x19, x30, [sp, #-16]!
     584:	mov	x19, x0
     588:	ldr	x0, [x1]
     58c:	ldrh	w2, [x0]
     590:	cbz	w2, 5dc <_ZN7__ubsan4DiaglsERKNS_5ValueE+0x5c>
     594:	cmp	w2, #0x1
     598:	b.ne	664 <_ZN7__ubsan4DiaglsERKNS_5ValueE+0xe4>  // b.any
     59c:	mov	x0, x1
     5a0:	bl	0 <_ZNK7__ubsan5Value13getFloatValueEv>
     5a4:	ldr	w0, [x19, #320]
     5a8:	cmp	w0, #0x8
     5ac:	b.eq	6a0 <_ZN7__ubsan4DiaglsERKNS_5ValueE+0x120>  // b.none
     5b0:	ubfiz	x1, x0, #5, #32
     5b4:	add	w0, w0, #0x1
     5b8:	add	x1, x1, #0x40
     5bc:	str	w0, [x19, #320]
     5c0:	add	x0, x19, x1
     5c4:	mov	w2, #0x4                   	// #4
     5c8:	str	w2, [x19, x1]
     5cc:	str	q0, [x0, #16]
     5d0:	mov	x0, x19
     5d4:	ldp	x19, x30, [sp], #16
     5d8:	ret
     5dc:	ldrh	w0, [x0, #2]
     5e0:	tbz	w0, #0, 624 <_ZN7__ubsan4DiaglsERKNS_5ValueE+0xa4>
     5e4:	mov	x0, x1
     5e8:	bl	0 <_ZNK7__ubsan5Value12getSIntValueEv>
     5ec:	ldr	w2, [x19, #320]
     5f0:	cmp	w2, #0x8
     5f4:	b.eq	6a0 <_ZN7__ubsan4DiaglsERKNS_5ValueE+0x120>  // b.none
     5f8:	ubfiz	x3, x2, #5, #32
     5fc:	add	w2, w2, #0x1
     600:	add	x3, x3, #0x40
     604:	str	w2, [x19, #320]
     608:	add	x2, x19, x3
     60c:	mov	w4, #0x3                   	// #3
     610:	str	w4, [x19, x3]
     614:	stp	x0, x1, [x2, #16]
     618:	mov	x0, x19
     61c:	ldp	x19, x30, [sp], #16
     620:	ret
     624:	mov	x0, x1
     628:	bl	0 <_ZNK7__ubsan5Value12getUIntValueEv>
     62c:	ldr	w2, [x19, #320]
     630:	cmp	w2, #0x8
     634:	b.eq	6a0 <_ZN7__ubsan4DiaglsERKNS_5ValueE+0x120>  // b.none
     638:	ubfiz	x3, x2, #5, #32
     63c:	add	w2, w2, #0x1
     640:	add	x3, x3, #0x40
     644:	str	w2, [x19, #320]
     648:	add	x2, x19, x3
     64c:	mov	w4, #0x2                   	// #2
     650:	str	w4, [x19, x3]
     654:	stp	x0, x1, [x2, #16]
     658:	mov	x0, x19
     65c:	ldp	x19, x30, [sp], #16
     660:	ret
     664:	ldr	w0, [x19, #320]
     668:	cmp	w0, #0x8
     66c:	b.eq	6a0 <_ZN7__ubsan4DiaglsERKNS_5ValueE+0x120>  // b.none
     670:	ubfiz	x1, x0, #5, #32
     674:	add	w0, w0, #0x1
     678:	add	x1, x1, #0x40
     67c:	str	w0, [x19, #320]
     680:	add	x2, x19, x1
     684:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     688:	add	x0, x0, #0x0
     68c:	str	wzr, [x19, x1]
     690:	str	x0, [x2, #16]
     694:	mov	x0, x19
     698:	ldp	x19, x30, [sp], #16
     69c:	ret
     6a0:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     6a4:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     6a8:	add	x2, x2, #0x0
     6ac:	add	x0, x0, #0x0
     6b0:	mov	x4, #0x0                   	// #0
     6b4:	mov	x3, #0x0                   	// #0
     6b8:	mov	w1, #0xbf                  	// #191
     6bc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000006c0 <_ZN7__ubsan4DiagD1Ev>:
     6c0:	stp	x19, x20, [sp, #-224]!
     6c4:	stp	x25, x26, [sp, #48]
     6c8:	adrp	x26, 0 <_ZN11__sanitizer14PageSizeCachedE>
     6cc:	stp	x21, x22, [sp, #16]
     6d0:	stp	x23, x24, [sp, #32]
     6d4:	mov	x23, x0
     6d8:	stp	x27, x28, [sp, #64]
     6dc:	str	x30, [sp, #80]
     6e0:	bl	0 <_ZN11__sanitizer21ScopedErrorReportLock11CheckLockedEv>
     6e4:	bl	0 <_ZN11__sanitizer15ColorizeReportsEv>
     6e8:	and	w25, w0, #0xff
     6ec:	ldr	x19, [x26]
     6f0:	stp	xzr, xzr, [sp, #144]
     6f4:	str	xzr, [sp, #160]
     6f8:	ldr	x0, [x19]
     6fc:	cbz	x0, 92c <_ZN7__ubsan4DiagD1Ev+0x26c>
     700:	sub	x24, x0, #0x1
     704:	ands	x24, x24, x0
     708:	b.ne	de0 <_ZN7__ubsan4DiagD1Ev+0x720>  // b.any
     70c:	add	x19, x0, #0x3ff
     710:	neg	x0, x0
     714:	and	x19, x19, x0
     718:	mov	w2, #0x0                   	// #0
     71c:	mov	x0, x19
     720:	adrp	x27, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     724:	add	x1, x27, #0x0
     728:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     72c:	ldr	x1, [sp, #144]
     730:	mov	x20, x0
     734:	ldr	x2, [sp, #160]
     738:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     73c:	ldp	x0, x1, [sp, #144]
     740:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     744:	stp	x20, x19, [sp, #144]
     748:	ldr	x2, [sp, #160]
     74c:	cmp	x2, #0x3ff
     750:	b.hi	774 <_ZN7__ubsan4DiagD1Ev+0xb4>  // b.pmore
     754:	cmp	x19, #0x3ff
     758:	b.ls	d60 <_ZN7__ubsan4DiagD1Ev+0x6a0>  // b.plast
     75c:	mov	x3, #0x400                 	// #1024
     760:	add	x0, x20, x2
     764:	mov	w1, #0x0                   	// #0
     768:	sub	x2, x3, x2
     76c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     770:	ldr	x20, [sp, #144]
     774:	mov	x0, #0x400                 	// #1024
     778:	stp	x0, xzr, [sp, #160]
     77c:	add	x19, x23, #0x40
     780:	add	x22, sp, #0x90
     784:	strb	wzr, [x20]
     788:	ldr	w0, [x23, #40]
     78c:	cbz	w0, 8e0 <_ZN7__ubsan4DiagD1Ev+0x220>
     790:	cmp	w25, #0x0
     794:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     798:	adrp	x20, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     79c:	add	x1, x1, #0x0
     7a0:	add	x20, x20, #0x0
     7a4:	mov	x0, x22
     7a8:	csel	x20, x20, x1, ne  // ne = any
     7ac:	mov	x1, x20
     7b0:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     7b4:	ldp	x2, x3, [x23, #16]
     7b8:	stp	x2, x3, [sp, #192]
     7bc:	ldp	x0, x1, [x23]
     7c0:	stp	x0, x1, [sp, #176]
     7c4:	ldr	w0, [x23]
     7c8:	ldr	x2, [x23, #32]
     7cc:	str	x2, [sp, #208]
     7d0:	cmp	w0, #0x2
     7d4:	b.eq	988 <_ZN7__ubsan4DiagD1Ev+0x2c8>  // b.none
     7d8:	b.hi	7f4 <_ZN7__ubsan4DiagD1Ev+0x134>  // b.pmore
     7dc:	cbz	w0, 938 <_ZN7__ubsan4DiagD1Ev+0x278>
     7e0:	ldr	x1, [sp, #184]
     7e4:	cbz	x1, 938 <_ZN7__ubsan4DiagD1Ev+0x278>
     7e8:	ldp	w2, w3, [sp, #192]
     7ec:	adrp	x4, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     7f0:	b	810 <_ZN7__ubsan4DiagD1Ev+0x150>
     7f4:	cmp	w0, #0x3
     7f8:	b.ne	824 <_ZN7__ubsan4DiagD1Ev+0x164>  // b.any
     7fc:	ldr	x1, [x2, #56]
     800:	add	x0, x2, #0x8
     804:	cbz	x1, df0 <_ZN7__ubsan4DiagD1Ev+0x730>
     808:	ldp	w2, w3, [x0, #56]
     80c:	adrp	x4, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     810:	ldr	x4, [x4]
     814:	mov	x0, x22
     818:	ldr	x5, [x4, #24]
     81c:	ldrb	w4, [x4, #181]
     820:	bl	0 <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_>
     824:	mov	x0, x22
     828:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     82c:	add	x1, x1, #0x0
     830:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     834:	ldr	w0, [x23, #40]
     838:	cbz	w0, 960 <_ZN7__ubsan4DiagD1Ev+0x2a0>
     83c:	cmp	w0, #0x1
     840:	b.ne	864 <_ZN7__ubsan4DiagD1Ev+0x1a4>  // b.any
     844:	cbnz	w25, dcc <_ZN7__ubsan4DiagD1Ev+0x70c>
     848:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     84c:	add	x2, x2, #0x0
     850:	mov	x3, x2
     854:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     858:	mov	x0, x22
     85c:	add	x1, x1, #0x0
     860:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     864:	ldr	x1, [x23, #48]
     868:	mov	x2, x19
     86c:	mov	x0, x22
     870:	adrp	x20, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     874:	adrp	x21, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     878:	bl	278 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE>
     87c:	adrp	x4, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     880:	cmp	w25, #0x0
     884:	add	x0, x4, #0x0
     888:	adrp	x4, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     88c:	add	x4, x4, #0x0
     890:	add	x1, x20, #0x0
     894:	csel	x28, x4, x0, ne  // ne = any
     898:	mov	x0, x22
     89c:	mov	x2, x28
     8a0:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     8a4:	ldr	x1, [sp, #144]
     8a8:	add	x0, x21, #0x0
     8ac:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     8b0:	ldr	w0, [x23]
     8b4:	cmp	w0, #0x2
     8b8:	b.eq	9b8 <_ZN7__ubsan4DiagD1Ev+0x2f8>  // b.none
     8bc:	ldp	x0, x1, [sp, #144]
     8c0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     8c4:	ldp	x21, x22, [sp, #16]
     8c8:	ldp	x23, x24, [sp, #32]
     8cc:	ldp	x25, x26, [sp, #48]
     8d0:	ldp	x27, x28, [sp, #64]
     8d4:	ldr	x30, [sp, #80]
     8d8:	ldp	x19, x20, [sp], #224
     8dc:	ret
     8e0:	ldr	x1, [x23, #48]
     8e4:	mov	x2, x19
     8e8:	mov	x0, x22
     8ec:	bl	278 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE>
     8f0:	ldr	w0, [x23, #44]
     8f4:	bl	0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     8f8:	mov	x1, x0
     8fc:	mov	x3, x22
     900:	add	x0, sp, #0xb0
     904:	mov	x2, x23
     908:	bl	0 <_ZN7__ubsan23UndefinedBehaviorReportC1EPKcRNS_8LocationERN11__sanitizer20InternalScopedStringE>
     90c:	ldr	x0, [sp, #160]
     910:	ldr	x1, [sp, #144]
     914:	cbz	x0, e18 <_ZN7__ubsan4DiagD1Ev+0x758>
     918:	strb	wzr, [x1]
     91c:	str	xzr, [sp, #168]
     920:	ldp	x0, x1, [sp, #192]
     924:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     928:	b	790 <_ZN7__ubsan4DiagD1Ev+0xd0>
     92c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     930:	str	x0, [x19]
     934:	b	700 <_ZN7__ubsan4DiagD1Ev+0x40>
     938:	mov	x0, x22
     93c:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     940:	add	x1, x1, #0x0
     944:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     948:	mov	x0, x22
     94c:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     950:	add	x1, x1, #0x0
     954:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     958:	ldr	w0, [x23, #40]
     95c:	cbnz	w0, 83c <_ZN7__ubsan4DiagD1Ev+0x17c>
     960:	cbnz	w25, db8 <_ZN7__ubsan4DiagD1Ev+0x6f8>
     964:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     968:	add	x2, x2, #0x0
     96c:	mov	x3, x2
     970:	mov	x4, x20
     974:	mov	x0, x22
     978:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     97c:	add	x1, x1, #0x0
     980:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     984:	b	864 <_ZN7__ubsan4DiagD1Ev+0x1a4>
     988:	ldr	x2, [x23, #24]
     98c:	mov	x0, x22
     990:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     994:	add	x1, x1, #0x0
     998:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     99c:	mov	x0, x22
     9a0:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     9a4:	add	x1, x1, #0x0
     9a8:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     9ac:	ldr	w0, [x23, #40]
     9b0:	cbnz	w0, 83c <_ZN7__ubsan4DiagD1Ev+0x17c>
     9b4:	b	960 <_ZN7__ubsan4DiagD1Ev+0x2a0>
     9b8:	ldr	x6, [x23, #24]
     9bc:	add	x0, x23, #0x148
     9c0:	str	x0, [sp, #104]
     9c4:	ldr	w7, [x23, #416]
     9c8:	cmp	x6, #0x3
     9cc:	b.ls	d38 <_ZN7__ubsan4DiagD1Ev+0x678>  // b.plast
     9d0:	cmn	x6, #0x5
     9d4:	sub	x24, x6, #0x4
     9d8:	mov	x2, #0xffffffffffffffff    	// #-1
     9dc:	b.ls	d38 <_ZN7__ubsan4DiagD1Ev+0x678>  // b.plast
     9e0:	cbz	w7, ef4 <_ZN7__ubsan4DiagD1Ev+0x834>
     9e4:	add	x23, x23, #0x1a0
     9e8:	sub	w3, w7, #0x1
     9ec:	mov	w0, #0x58                  	// #88
     9f0:	mov	x22, x24
     9f4:	ldr	x1, [sp, #104]
     9f8:	umaddl	x23, w3, w0, x23
     9fc:	ldr	w3, [x1]
     a00:	ldr	x0, [x1, #24]
     a04:	cmp	w3, #0x2
     a08:	b.ne	d40 <_ZN7__ubsan4DiagD1Ev+0x680>  // b.any
     a0c:	ldr	w3, [x1, #40]
     a10:	cmp	x22, x0
     a14:	csel	x22, x22, x0, ls  // ls = plast
     a18:	cmp	w3, #0x2
     a1c:	ldr	x0, [x1, #64]
     a20:	b.ne	d40 <_ZN7__ubsan4DiagD1Ev+0x680>  // b.any
     a24:	cmp	x2, x0
     a28:	add	x1, x1, #0x58
     a2c:	csel	x2, x2, x0, cs  // cs = hs, nlast
     a30:	cmp	x23, x1
     a34:	b.ne	9fc <_ZN7__ubsan4DiagD1Ev+0x33c>  // b.any
     a38:	sub	x0, x2, x22
     a3c:	cmp	x0, #0x20
     a40:	b.ls	a50 <_ZN7__ubsan4DiagD1Ev+0x390>  // b.plast
     a44:	sub	x2, x2, #0x20
     a48:	cmp	x2, x24
     a4c:	csel	x22, x2, x24, ls  // ls = plast
     a50:	cmn	x22, #0x21
     a54:	add	x24, x22, #0x20
     a58:	mov	x1, #0x20                  	// #32
     a5c:	b.ls	a68 <_ZN7__ubsan4DiagD1Ev+0x3a8>  // b.plast
     a60:	mvn	x1, x22
     a64:	mov	x24, #0xffffffffffffffff    	// #-1
     a68:	mov	x0, x22
     a6c:	str	w7, [sp, #112]
     a70:	str	x6, [sp, #120]
     a74:	bl	0 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm>
     a78:	ldr	w7, [sp, #112]
     a7c:	tst	w0, #0xff
     a80:	ldr	x6, [sp, #120]
     a84:	b.eq	eac <_ZN7__ubsan4DiagD1Ev+0x7ec>  // b.none
     a88:	ldr	x23, [x26]
     a8c:	stp	xzr, xzr, [sp, #176]
     a90:	str	xzr, [sp, #192]
     a94:	ldr	x0, [x23]
     a98:	cbz	x0, efc <_ZN7__ubsan4DiagD1Ev+0x83c>
     a9c:	str	w7, [sp, #112]
     aa0:	sub	x1, x0, #0x1
     aa4:	str	x6, [sp, #120]
     aa8:	tst	x1, x0
     aac:	b.ne	de0 <_ZN7__ubsan4DiagD1Ev+0x720>  // b.any
     ab0:	add	x1, x0, #0x3ff
     ab4:	neg	x0, x0
     ab8:	and	x3, x1, x0
     abc:	mov	w2, #0x0                   	// #0
     ac0:	mov	x0, x3
     ac4:	add	x1, x27, #0x0
     ac8:	str	x3, [sp, #128]
     acc:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     ad0:	mov	x23, x0
     ad4:	ldr	x1, [sp, #176]
     ad8:	ldr	x2, [sp, #192]
     adc:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     ae0:	ldp	x0, x1, [sp, #176]
     ae4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     ae8:	ldp	x6, x3, [sp, #120]
     aec:	stp	x23, x3, [sp, #176]
     af0:	ldr	w7, [sp, #112]
     af4:	ldr	x2, [sp, #192]
     af8:	cmp	x2, #0x3ff
     afc:	b.hi	b30 <_ZN7__ubsan4DiagD1Ev+0x470>  // b.pmore
     b00:	cmp	x3, #0x3ff
     b04:	b.ls	f3c <_ZN7__ubsan4DiagD1Ev+0x87c>  // b.plast
     b08:	mov	x3, #0x400                 	// #1024
     b0c:	add	x0, x23, x2
     b10:	mov	w1, #0x0                   	// #0
     b14:	sub	x2, x3, x2
     b18:	str	w7, [sp, #112]
     b1c:	str	x6, [sp, #120]
     b20:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     b24:	ldr	w7, [sp, #112]
     b28:	ldr	x6, [sp, #120]
     b2c:	ldr	x23, [sp, #176]
     b30:	mov	x0, #0x400                 	// #1024
     b34:	stp	x0, xzr, [sp, #192]
     b38:	cmp	x22, x24
     b3c:	strb	wzr, [x23]
     b40:	b.eq	fac <_ZN7__ubsan4DiagD1Ev+0x8ec>  // b.none
     b44:	adrp	x27, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     b48:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     b4c:	add	x0, x27, #0x0
     b50:	add	x26, x1, #0x0
     b54:	mov	x27, x22
     b58:	add	x23, sp, #0xb0
     b5c:	str	x0, [sp, #128]
     b60:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     b64:	add	x0, x0, #0x0
     b68:	str	x0, [sp, #136]
     b6c:	nop
     b70:	ldp	x1, x0, [sp, #128]
     b74:	tst	x27, #0x7
     b78:	ldrb	w3, [x27]
     b7c:	add	x27, x27, #0x1
     b80:	str	w7, [sp, #112]
     b84:	str	x6, [sp, #120]
     b88:	csel	x2, x0, x1, eq  // eq = none
     b8c:	mov	x1, x26
     b90:	mov	x0, x23
     b94:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     b98:	ldr	w7, [sp, #112]
     b9c:	cmp	x24, x27
     ba0:	ldr	x6, [sp, #120]
     ba4:	b.ne	b70 <_ZN7__ubsan4DiagD1Ev+0x4b0>  // b.any
     ba8:	mov	x0, x23
     bac:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     bb0:	add	x1, x1, #0x0
     bb4:	str	w7, [sp, #112]
     bb8:	str	x6, [sp, #120]
     bbc:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     bc0:	cmp	w25, #0x0
     bc4:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     bc8:	add	x2, x2, #0x0
     bcc:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     bd0:	add	x1, x1, #0x0
     bd4:	mov	x0, x23
     bd8:	csel	x1, x2, x1, ne  // ne = any
     bdc:	mov	x27, x22
     be0:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     be4:	ldr	w7, [sp, #112]
     be8:	mov	x0, x22
     bec:	ldr	x1, [sp, #104]
     bf0:	mov	w2, w7
     bf4:	str	w7, [sp, #112]
     bf8:	bl	180 <_ZL10upperBoundmPN7__ubsan5RangeEj>
     bfc:	mov	x26, x0
     c00:	ldr	w7, [sp, #112]
     c04:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     c08:	ldr	x6, [sp, #120]
     c0c:	add	x0, x0, #0x0
     c10:	str	x0, [sp, #136]
     c14:	cbz	x26, e70 <_ZN7__ubsan4DiagD1Ev+0x7b0>
     c18:	ldr	w0, [x26, #40]
     c1c:	ldr	x1, [x26, #64]
     c20:	cmp	w0, #0x2
     c24:	b.ne	d40 <_ZN7__ubsan4DiagD1Ev+0x680>  // b.any
     c28:	cmp	x27, x1
     c2c:	b.eq	ebc <_ZN7__ubsan4DiagD1Ev+0x7fc>  // b.none
     c30:	ldr	w0, [x26]
     c34:	ldr	x1, [x26, #24]
     c38:	cmp	w0, #0x2
     c3c:	b.ne	d40 <_ZN7__ubsan4DiagD1Ev+0x680>  // b.any
     c40:	cmp	x27, x1
     c44:	b.ls	e5c <_ZN7__ubsan4DiagD1Ev+0x79c>  // b.plast
     c48:	mov	w25, #0x7e                  	// #126
     c4c:	mov	w2, w25
     c50:	tst	x27, #0x7
     c54:	b.eq	e84 <_ZN7__ubsan4DiagD1Ev+0x7c4>  // b.none
     c58:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     c5c:	add	x1, x0, #0x0
     c60:	mov	x0, x23
     c64:	stp	x1, x6, [sp, #112]
     c68:	str	w7, [sp, #128]
     c6c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     c70:	ldp	x1, x6, [sp, #112]
     c74:	mov	w0, #0x5e                  	// #94
     c78:	cmp	x6, x27
     c7c:	add	x27, x27, #0x1
     c80:	csel	w2, w25, w0, ne  // ne = any
     c84:	mov	x0, x23
     c88:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     c8c:	ldr	x1, [sp, #112]
     c90:	mov	w2, w25
     c94:	mov	x0, x23
     c98:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     c9c:	ldr	w7, [sp, #128]
     ca0:	cmp	x24, x27
     ca4:	ldr	x6, [sp, #120]
     ca8:	b.ne	c14 <_ZN7__ubsan4DiagD1Ev+0x554>  // b.any
     cac:	add	x1, x20, #0x0
     cb0:	mov	x2, x28
     cb4:	mov	x0, x23
     cb8:	str	w7, [sp, #112]
     cbc:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     cc0:	mov	w25, #0x0                   	// #0
     cc4:	ldr	w7, [sp, #112]
     cc8:	mov	x20, #0x0                   	// #0
     ccc:	cbz	x20, f18 <_ZN7__ubsan4DiagD1Ev+0x858>
     cd0:	ldr	w0, [x20, #40]
     cd4:	ldr	x1, [x20, #64]
     cd8:	cmp	w0, #0x2
     cdc:	b.ne	d40 <_ZN7__ubsan4DiagD1Ev+0x680>  // b.any
     ce0:	cmp	x22, x1
     ce4:	b.eq	f18 <_ZN7__ubsan4DiagD1Ev+0x858>  // b.none
     ce8:	tst	x22, #0x7
     cec:	ldr	w1, [x20]
     cf0:	cset	w0, eq  // eq = none
     cf4:	add	w0, w0, #0x1
     cf8:	cmp	w1, #0x2
     cfc:	add	w0, w25, w0
     d00:	ldr	x1, [x20, #24]
     d04:	b.ne	d40 <_ZN7__ubsan4DiagD1Ev+0x680>  // b.any
     d08:	cmp	x22, x1
     d0c:	b.eq	1030 <_ZN7__ubsan4DiagD1Ev+0x970>  // b.none
     d10:	add	x22, x22, #0x1
     d14:	add	w25, w0, #0x2
     d18:	cmp	x24, x22
     d1c:	b.ne	ccc <_ZN7__ubsan4DiagD1Ev+0x60c>  // b.any
     d20:	ldr	x1, [sp, #176]
     d24:	add	x0, x21, #0x0
     d28:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     d2c:	ldp	x0, x1, [sp, #176]
     d30:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     d34:	b	8bc <_ZN7__ubsan4DiagD1Ev+0x1fc>
     d38:	add	x2, x6, #0x4
     d3c:	b	9e0 <_ZN7__ubsan4DiagD1Ev+0x320>
     d40:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     d44:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     d48:	add	x2, x2, #0x0
     d4c:	add	x0, x0, #0x0
     d50:	mov	x4, #0x0                   	// #0
     d54:	mov	x3, #0x0                   	// #0
     d58:	mov	w1, #0x55                  	// #85
     d5c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     d60:	ldr	x19, [x26]
     d64:	ldr	x0, [x19]
     d68:	cbz	x0, e50 <_ZN7__ubsan4DiagD1Ev+0x790>
     d6c:	sub	x1, x0, #0x1
     d70:	tst	x1, x0
     d74:	b.ne	de0 <_ZN7__ubsan4DiagD1Ev+0x720>  // b.any
     d78:	add	x19, x0, #0x3ff
     d7c:	neg	x0, x0
     d80:	and	x19, x19, x0
     d84:	add	x1, x27, #0x0
     d88:	mov	w2, #0x0                   	// #0
     d8c:	mov	x0, x19
     d90:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     d94:	mov	x20, x0
     d98:	ldr	x1, [sp, #144]
     d9c:	ldr	x2, [sp, #160]
     da0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     da4:	ldp	x0, x1, [sp, #144]
     da8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     dac:	stp	x20, x19, [sp, #144]
     db0:	ldr	x2, [sp, #160]
     db4:	b	75c <_ZN7__ubsan4DiagD1Ev+0x9c>
     db8:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     dbc:	adrp	x3, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     dc0:	add	x2, x2, #0x0
     dc4:	add	x3, x3, #0x0
     dc8:	b	970 <_ZN7__ubsan4DiagD1Ev+0x2b0>
     dcc:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     dd0:	adrp	x3, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     dd4:	add	x2, x2, #0x0
     dd8:	add	x3, x3, #0x0
     ddc:	b	854 <_ZN7__ubsan4DiagD1Ev+0x194>
     de0:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     de4:	add	x0, x0, #0x0
     de8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     dec:	bl	0 <_ZN11__sanitizer3DieEv>
     df0:	ldr	x1, [x0, #8]
     df4:	cbz	x1, e38 <_ZN7__ubsan4DiagD1Ev+0x778>
     df8:	adrp	x4, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     dfc:	ldr	w3, [x0, #24]
     e00:	ldr	x2, [x0, #16]
     e04:	mov	x0, x22
     e08:	ldr	x4, [x4]
     e0c:	ldr	x4, [x4, #24]
     e10:	bl	0 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_>
     e14:	b	824 <_ZN7__ubsan4DiagD1Ev+0x164>
     e18:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     e1c:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     e20:	add	x2, x2, #0x0
     e24:	add	x0, x0, #0x0
     e28:	mov	x4, #0x0                   	// #0
     e2c:	mov	x3, #0x0                   	// #0
     e30:	mov	w1, #0x1b6                 	// #438
     e34:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     e38:	ldr	x2, [x2, #8]
     e3c:	mov	x0, x22
     e40:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     e44:	add	x1, x1, #0x0
     e48:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     e4c:	b	824 <_ZN7__ubsan4DiagD1Ev+0x164>
     e50:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     e54:	str	x0, [x19]
     e58:	b	d6c <_ZN7__ubsan4DiagD1Ev+0x6ac>
     e5c:	mov	w25, #0x20                  	// #32
     e60:	mov	w0, #0x7e                  	// #126
     e64:	csel	w2, w25, w25, cc  // cc = lo, ul, last
     e68:	csel	w25, w25, w0, cc  // cc = lo, ul, last
     e6c:	b	c50 <_ZN7__ubsan4DiagD1Ev+0x590>
     e70:	cmp	x6, x27
     e74:	b.cc	cac <_ZN7__ubsan4DiagD1Ev+0x5ec>  // b.lo, b.ul, b.last
     e78:	mov	w25, #0x20                  	// #32
     e7c:	mov	w2, w25
     e80:	b	c50 <_ZN7__ubsan4DiagD1Ev+0x590>
     e84:	ldr	x1, [sp, #136]
     e88:	mov	x0, x23
     e8c:	str	w2, [sp, #112]
     e90:	str	w7, [sp, #120]
     e94:	str	x6, [sp, #128]
     e98:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     e9c:	ldr	w2, [sp, #112]
     ea0:	ldr	w7, [sp, #120]
     ea4:	ldr	x6, [sp, #128]
     ea8:	b	c58 <_ZN7__ubsan4DiagD1Ev+0x598>
     eac:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     eb0:	add	x0, x0, #0x0
     eb4:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     eb8:	b	8bc <_ZN7__ubsan4DiagD1Ev+0x1fc>
     ebc:	ldr	x1, [sp, #104]
     ec0:	mov	w2, w7
     ec4:	mov	x0, x27
     ec8:	str	w7, [sp, #112]
     ecc:	str	x6, [sp, #120]
     ed0:	bl	180 <_ZL10upperBoundmPN7__ubsan5RangeEj>
     ed4:	cmp	x0, #0x0
     ed8:	ldr	x6, [sp, #120]
     edc:	mov	x26, x0
     ee0:	ldr	w7, [sp, #112]
     ee4:	ccmp	x6, x27, #0x2, eq  // eq = none
     ee8:	b.cc	cac <_ZN7__ubsan4DiagD1Ev+0x5ec>  // b.lo, b.ul, b.last
     eec:	cbnz	x0, c30 <_ZN7__ubsan4DiagD1Ev+0x570>
     ef0:	b	e78 <_ZN7__ubsan4DiagD1Ev+0x7b8>
     ef4:	mov	x22, x24
     ef8:	b	a38 <_ZN7__ubsan4DiagD1Ev+0x378>
     efc:	str	w7, [sp, #112]
     f00:	str	x6, [sp, #120]
     f04:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     f08:	ldr	w7, [sp, #112]
     f0c:	str	x0, [x23]
     f10:	ldr	x6, [sp, #120]
     f14:	b	a9c <_ZN7__ubsan4DiagD1Ev+0x3dc>
     f18:	ldr	x1, [sp, #104]
     f1c:	mov	w2, w7
     f20:	mov	x0, x22
     f24:	str	w7, [sp, #112]
     f28:	bl	180 <_ZL10upperBoundmPN7__ubsan5RangeEj>
     f2c:	mov	x20, x0
     f30:	ldr	w7, [sp, #112]
     f34:	cbnz	x0, ce8 <_ZN7__ubsan4DiagD1Ev+0x628>
     f38:	b	d20 <_ZN7__ubsan4DiagD1Ev+0x660>
     f3c:	ldr	x23, [x26]
     f40:	ldr	x0, [x23]
     f44:	cbz	x0, 1008 <_ZN7__ubsan4DiagD1Ev+0x948>
     f48:	ldr	x26, [x26]
     f4c:	str	w7, [sp, #112]
     f50:	str	x6, [sp, #120]
     f54:	ldr	x0, [x26]
     f58:	sub	x1, x0, #0x1
     f5c:	tst	x1, x0
     f60:	b.ne	de0 <_ZN7__ubsan4DiagD1Ev+0x720>  // b.any
     f64:	add	x26, x0, #0x3ff
     f68:	neg	x0, x0
     f6c:	and	x26, x26, x0
     f70:	add	x1, x27, #0x0
     f74:	mov	w2, #0x0                   	// #0
     f78:	mov	x0, x26
     f7c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     f80:	mov	x23, x0
     f84:	ldr	x1, [sp, #176]
     f88:	ldr	x2, [sp, #192]
     f8c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     f90:	ldp	x0, x1, [sp, #176]
     f94:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     f98:	stp	x23, x26, [sp, #176]
     f9c:	ldr	w7, [sp, #112]
     fa0:	ldr	x6, [sp, #120]
     fa4:	ldr	x2, [sp, #192]
     fa8:	b	b08 <_ZN7__ubsan4DiagD1Ev+0x448>
     fac:	add	x23, sp, #0xb0
     fb0:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     fb4:	mov	x0, x23
     fb8:	add	x1, x1, #0x0
     fbc:	str	w7, [sp, #112]
     fc0:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     fc4:	ldr	w7, [sp, #112]
     fc8:	str	w7, [sp, #112]
     fcc:	cbnz	w25, 1020 <_ZN7__ubsan4DiagD1Ev+0x960>
     fd0:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     fd4:	mov	x0, x23
     fd8:	add	x1, x1, #0x0
     fdc:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     fe0:	ldr	w7, [sp, #112]
     fe4:	mov	x0, x22
     fe8:	ldr	x1, [sp, #104]
     fec:	mov	w2, w7
     ff0:	bl	180 <_ZL10upperBoundmPN7__ubsan5RangeEj>
     ff4:	mov	x2, x28
     ff8:	add	x1, x20, #0x0
     ffc:	mov	x0, x23
    1000:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
    1004:	b	d20 <_ZN7__ubsan4DiagD1Ev+0x660>
    1008:	str	w7, [sp, #112]
    100c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
    1010:	ldr	w7, [sp, #112]
    1014:	str	x0, [x23]
    1018:	ldr	x6, [sp, #120]
    101c:	b	f48 <_ZN7__ubsan4DiagD1Ev+0x888>
    1020:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1024:	mov	x0, x23
    1028:	add	x1, x1, #0x0
    102c:	b	fdc <_ZN7__ubsan4DiagD1Ev+0x91c>
    1030:	adrp	x22, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1034:	sub	w24, w0, #0x1
    1038:	add	x22, x22, #0x0
    103c:	cbz	w0, 1058 <_ZN7__ubsan4DiagD1Ev+0x998>
    1040:	sub	w24, w24, #0x1
    1044:	mov	x1, x22
    1048:	mov	x0, x23
    104c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
    1050:	cmn	w24, #0x1
    1054:	b.ne	1040 <_ZN7__ubsan4DiagD1Ev+0x980>  // b.any
    1058:	ldr	x1, [x20, #80]
    105c:	mov	x2, x19
    1060:	mov	x0, x23
    1064:	bl	278 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE>
    1068:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    106c:	add	x1, x0, #0x0
    1070:	mov	x0, x23
    1074:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
    1078:	b	d20 <_ZN7__ubsan4DiagD1Ev+0x660>
    107c:	nop

0000000000001080 <_ZN7__ubsan12ScopedReport11InitializerC1Ev>:
    1080:	b	0 <_ZN7__ubsan27InitAsStandaloneIfNecessaryEv>
    1084:	nop

0000000000001088 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>:
    1088:	stp	x19, x20, [sp, #-48]!
    108c:	mov	x19, x0
    1090:	mov	x20, x2
    1094:	stp	x21, x22, [sp, #16]
    1098:	mov	x21, x1
    109c:	mov	w22, w3
    10a0:	str	x30, [sp, #32]
    10a4:	bl	0 <_ZN7__ubsan27InitAsStandaloneIfNecessaryEv>
    10a8:	add	x0, x19, #0x1
    10ac:	bl	0 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev>
    10b0:	ldp	x2, x3, [x21]
    10b4:	stp	x2, x3, [x19, #8]
    10b8:	ldp	x2, x3, [x20]
    10bc:	stp	x2, x3, [x19, #32]
    10c0:	ldr	x1, [x21, #16]
    10c4:	ldp	x2, x3, [x20, #16]
    10c8:	stp	x2, x3, [x19, #48]
    10cc:	ldr	x30, [sp, #32]
    10d0:	str	x1, [x19, #24]
    10d4:	ldr	x1, [x20, #32]
    10d8:	str	w22, [x19, #72]
    10dc:	ldp	x21, x22, [sp, #16]
    10e0:	str	x1, [x19, #64]
    10e4:	ldp	x19, x20, [sp], #48
    10e8:	ret
    10ec:	nop

00000000000010f0 <_ZN7__ubsan12ScopedReportD1Ev>:
    10f0:	stp	x19, x20, [sp, #-176]!
    10f4:	mov	x19, x0
    10f8:	adrp	x20, 0 <_ZN7__ubsan11ubsan_flagsE>
    10fc:	ldr	x0, [x0, #16]
    1100:	ldr	x1, [x19, #24]
    1104:	str	x30, [sp, #48]
    1108:	bl	4a0 <_ZL20MaybePrintStackTracemm>
    110c:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    1110:	ldr	w0, [x19, #72]
    1114:	ldp	x2, x3, [x19, #32]
    1118:	stp	x2, x3, [sp, #72]
    111c:	ldr	x1, [x1]
    1120:	ldp	x2, x3, [x19, #48]
    1124:	stp	x2, x3, [sp, #88]
    1128:	ldrb	w1, [x1, #60]
    112c:	cbz	w1, 1174 <_ZN7__ubsan12ScopedReportD1Ev+0x84>
    1130:	ldr	x1, [x20]
    1134:	stp	x21, x22, [sp, #16]
    1138:	ldrb	w1, [x1, #16]
    113c:	cmp	w1, #0x0
    1140:	csel	w0, w0, wzr, ne  // ne = any
    1144:	bl	0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1148:	ldr	w22, [x19, #32]
    114c:	mov	x21, x0
    1150:	cmp	w22, #0x1
    1154:	b.eq	11b8 <_ZN7__ubsan12ScopedReportD1Ev+0xc8>  // b.none
    1158:	cmp	w22, #0x3
    115c:	b.eq	1194 <_ZN7__ubsan12ScopedReportD1Ev+0xa4>  // b.none
    1160:	bl	0 <_ZN7__ubsan22GetSanititizerToolNameEv>
    1164:	mov	x1, x0
    1168:	mov	x0, x21
    116c:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_>
    1170:	ldp	x21, x22, [sp, #16]
    1174:	ldr	x20, [x20]
    1178:	ldrb	w0, [x20]
    117c:	cbnz	w0, 121c <_ZN7__ubsan12ScopedReportD1Ev+0x12c>
    1180:	add	x0, x19, #0x1
    1184:	bl	0 <_ZN11__sanitizer21ScopedErrorReportLockD1Ev>
    1188:	ldr	x30, [sp, #48]
    118c:	ldp	x19, x20, [sp], #176
    1190:	ret
    1194:	ldr	x22, [x19, #64]
    1198:	bl	0 <_ZN7__ubsan22GetSanititizerToolNameEv>
    119c:	mov	x2, x0
    11a0:	mov	x0, x21
    11a4:	add	x22, x22, #0x8
    11a8:	mov	x1, x22
    11ac:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
    11b0:	ldp	x21, x22, [sp, #16]
    11b4:	b	1174 <_ZN7__ubsan12ScopedReportD1Ev+0x84>
    11b8:	ldr	x22, [sp, #80]
    11bc:	cbz	x22, 1160 <_ZN7__ubsan12ScopedReportD1Ev+0x70>
    11c0:	stp	x23, x24, [sp, #32]
    11c4:	add	x23, sp, #0x70
    11c8:	mov	x0, x23
    11cc:	ldr	x24, [sp, #88]
    11d0:	bl	0 <_ZN11__sanitizer11AddressInfoC1Ev>
    11d4:	mov	x0, x22
    11d8:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
    11dc:	mov	x1, x0
    11e0:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    11e4:	add	x0, x0, #0x0
    11e8:	stp	x1, x24, [sp, #160]
    11ec:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
    11f0:	str	x0, [sp, #144]
    11f4:	bl	0 <_ZN7__ubsan22GetSanititizerToolNameEv>
    11f8:	mov	x2, x0
    11fc:	mov	x1, x23
    1200:	mov	x0, x21
    1204:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
    1208:	mov	x0, x23
    120c:	bl	0 <_ZN11__sanitizer11AddressInfo5ClearEv>
    1210:	ldp	x21, x22, [sp, #16]
    1214:	ldp	x23, x24, [sp, #32]
    1218:	b	1174 <_ZN7__ubsan12ScopedReportD1Ev+0x84>
    121c:	stp	x21, x22, [sp, #16]
    1220:	stp	x23, x24, [sp, #32]
    1224:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000001228 <_ZN7__ubsan22InitializeSuppressionsEv>:
    1228:	stp	x19, x20, [sp, #-32]!
    122c:	adrp	x20, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1230:	ldr	x4, [x20]
    1234:	str	x30, [sp, #16]
    1238:	cbnz	x4, 1278 <_ZN7__ubsan22InitializeSuppressionsEv+0x50>
    123c:	add	x19, x20, #0x0
    1240:	mov	w2, #0x1b                  	// #27
    1244:	add	x19, x19, #0x40
    1248:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    124c:	mov	x0, x19
    1250:	add	x1, x1, #0x0
    1254:	bl	0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
    1258:	str	x19, [x20]
    125c:	adrp	x1, 0 <_ZN7__ubsan11ubsan_flagsE>
    1260:	mov	x0, x19
    1264:	ldr	x30, [sp, #16]
    1268:	ldr	x1, [x1]
    126c:	ldp	x19, x20, [sp], #32
    1270:	ldr	x1, [x1, #8]
    1274:	b	0 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc>
    1278:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    127c:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1280:	add	x2, x2, #0x0
    1284:	add	x0, x0, #0x0
    1288:	mov	x3, #0x0                   	// #0
    128c:	mov	w1, #0x18d                 	// #397
    1290:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1294:	nop

0000000000001298 <_ZN7__ubsan21IsVptrCheckSuppressedEPKc>:
    1298:	stp	x19, x30, [sp, #-32]!
    129c:	mov	x19, x0
    12a0:	bl	0 <_ZN7__ubsan27InitAsStandaloneIfNecessaryEv>
    12a4:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    12a8:	ldr	x0, [x0]
    12ac:	cbz	x0, 12cc <_ZN7__ubsan21IsVptrCheckSuppressedEPKc+0x34>
    12b0:	mov	x1, x19
    12b4:	add	x3, sp, #0x18
    12b8:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    12bc:	add	x2, x2, #0x0
    12c0:	bl	0 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE>
    12c4:	ldp	x19, x30, [sp], #32
    12c8:	ret
    12cc:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    12d0:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    12d4:	add	x2, x2, #0x0
    12d8:	add	x0, x0, #0x0
    12dc:	mov	x4, #0x0                   	// #0
    12e0:	mov	x3, #0x0                   	// #0
    12e4:	mov	w1, #0x195                 	// #405
    12e8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    12ec:	nop

00000000000012f0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>:
    12f0:	stp	x19, x20, [sp, #-96]!
    12f4:	mov	w19, w0
    12f8:	mov	x20, x2
    12fc:	stp	x21, x22, [sp, #16]
    1300:	adrp	x22, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1304:	mov	x21, x1
    1308:	stp	x23, x24, [sp, #32]
    130c:	str	x30, [sp, #48]
    1310:	bl	0 <_ZN7__ubsan27InitAsStandaloneIfNecessaryEv>
    1314:	ldr	x0, [x22]
    1318:	cbz	x0, 1438 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x148>
    131c:	cmp	w19, #0x19
    1320:	b.hi	1578 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x288>  // b.pmore
    1324:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1328:	add	x1, x1, #0x0
    132c:	ldrh	w1, [x1, w19, uxtw #1]
    1330:	adr	x2, 133c <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x4c>
    1334:	add	x1, x2, w1, sxth #2
    1338:	br	x1
    133c:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1340:	add	x19, x19, #0x0
    1344:	mov	x1, x19
    1348:	bl	0 <_ZNK11__sanitizer18SuppressionContext18HasSuppressionTypeEPKc>
    134c:	ands	w23, w0, #0xff
    1350:	b.eq	13f0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x100>  // b.none
    1354:	str	xzr, [sp, #72]
    1358:	cbz	x20, 1414 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x124>
    135c:	ldr	x0, [x22]
    1360:	add	x24, sp, #0x48
    1364:	mov	x1, x20
    1368:	mov	x3, x24
    136c:	mov	x2, x19
    1370:	bl	0 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE>
    1374:	tst	w0, #0xff
    1378:	b.ne	13f0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x100>  // b.any
    137c:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
    1380:	str	xzr, [sp, #80]
    1384:	add	x3, sp, #0x58
    1388:	add	x2, sp, #0x50
    138c:	mov	x1, x21
    1390:	bl	0 <_ZN11__sanitizer10Symbolizer27GetModuleNameAndOffsetForPCEmPPKcPm>
    1394:	tst	w0, #0xff
    1398:	b.eq	13bc <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0xcc>  // b.none
    139c:	ldr	x1, [sp, #80]
    13a0:	cbz	x1, 13bc <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0xcc>
    13a4:	ldr	x0, [x22]
    13a8:	mov	x3, x24
    13ac:	mov	x2, x19
    13b0:	bl	0 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE>
    13b4:	tst	w0, #0xff
    13b8:	b.ne	13f0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x100>  // b.any
    13bc:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
    13c0:	mov	x1, x21
    13c4:	bl	0 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm>
    13c8:	mov	x20, x0
    13cc:	mov	x3, x24
    13d0:	ldr	x0, [x22]
    13d4:	mov	x2, x19
    13d8:	ldr	x1, [x20, #40]
    13dc:	bl	0 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE>
    13e0:	ands	w23, w0, #0xff
    13e4:	b.eq	141c <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x12c>  // b.none
    13e8:	mov	x0, x20
    13ec:	bl	0 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>
    13f0:	mov	w0, w23
    13f4:	ldp	x21, x22, [sp, #16]
    13f8:	ldp	x23, x24, [sp, #32]
    13fc:	ldr	x30, [sp, #48]
    1400:	ldp	x19, x20, [sp], #96
    1404:	ret
    1408:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    140c:	add	x19, x19, #0x0
    1410:	b	1344 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    1414:	add	x24, sp, #0x48
    1418:	b	137c <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x8c>
    141c:	ldr	x0, [x22]
    1420:	mov	x3, x24
    1424:	ldr	x1, [x20, #56]
    1428:	mov	x2, x19
    142c:	bl	0 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE>
    1430:	and	w23, w0, #0xff
    1434:	b	13e8 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0xf8>
    1438:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    143c:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1440:	add	x2, x2, #0x0
    1444:	add	x0, x0, #0x0
    1448:	mov	x4, #0x0                   	// #0
    144c:	mov	x3, #0x0                   	// #0
    1450:	mov	w1, #0x19c                 	// #412
    1454:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1458:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    145c:	add	x19, x19, #0x0
    1460:	b	1344 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    1464:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1468:	add	x19, x19, #0x0
    146c:	b	1344 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    1470:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1474:	add	x19, x19, #0x0
    1478:	b	1344 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    147c:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1480:	add	x19, x19, #0x0
    1484:	b	1344 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    1488:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    148c:	add	x19, x19, #0x0
    1490:	b	1344 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    1494:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1498:	add	x19, x19, #0x0
    149c:	b	1344 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    14a0:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    14a4:	add	x19, x19, #0x0
    14a8:	b	1344 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    14ac:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    14b0:	add	x19, x19, #0x0
    14b4:	b	1344 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    14b8:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    14bc:	add	x19, x19, #0x0
    14c0:	b	1344 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    14c4:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    14c8:	add	x19, x19, #0x0
    14cc:	b	1344 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    14d0:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    14d4:	add	x19, x19, #0x0
    14d8:	b	1344 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    14dc:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    14e0:	add	x19, x19, #0x0
    14e4:	b	1344 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    14e8:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    14ec:	add	x19, x19, #0x0
    14f0:	b	1344 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    14f4:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    14f8:	add	x19, x19, #0x0
    14fc:	b	1344 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    1500:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1504:	add	x19, x19, #0x0
    1508:	b	1344 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    150c:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1510:	add	x19, x19, #0x0
    1514:	b	1344 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    1518:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    151c:	add	x19, x19, #0x0
    1520:	b	1344 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    1524:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1528:	add	x19, x19, #0x0
    152c:	b	1344 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    1530:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1534:	add	x19, x19, #0x0
    1538:	b	1344 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    153c:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1540:	add	x19, x19, #0x0
    1544:	b	1344 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    1548:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    154c:	add	x19, x19, #0x0
    1550:	b	1344 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    1554:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1558:	add	x19, x19, #0x0
    155c:	b	1344 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    1560:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1564:	add	x19, x19, #0x0
    1568:	b	1344 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    156c:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1570:	add	x19, x19, #0x0
    1574:	b	1344 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    1578:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    157c:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1580:	add	x2, x2, #0x0
    1584:	add	x0, x0, #0x0
    1588:	mov	x4, #0x0                   	// #0
    158c:	mov	x3, #0x0                   	// #0
    1590:	mov	w1, #0x44                  	// #68
    1594:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

ubsan_flags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>:
   0:	adrp	x4, 0 <_ZN11__sanitizer10FlagParser5AllocE>
   4:	stp	x19, x20, [sp, #-48]!
   8:	mov	x20, x0
   c:	ldr	x0, [x4]
  10:	mov	x19, x3
  14:	stp	x21, x22, [sp, #16]
  18:	mov	x22, x2
  1c:	mov	x21, x1
  20:	mov	x1, #0x10                  	// #16
  24:	str	x30, [sp, #32]
  28:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
  2c:	mov	x2, x0
  30:	mov	x3, x22
  34:	mov	x1, x21
  38:	adrp	x4, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
  3c:	add	x4, x4, #0x0
  40:	ldp	x21, x22, [sp, #16]
  44:	mov	x0, x20
  48:	ldr	x30, [sp, #32]
  4c:	stp	x4, x19, [x2]
  50:	ldp	x19, x20, [sp], #48
  54:	b	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>

0000000000000058 <__ubsan_default_options>:
  58:	adrp	x0, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
  5c:	add	x0, x0, #0x0
  60:	ret
  64:	nop

0000000000000068 <_ZN7__ubsan28MaybeCallUbsanDefaultOptionsEv>:
  68:	b	58 <__ubsan_default_options>
  6c:	nop

0000000000000070 <_ZN7__ubsan5Flags11SetDefaultsEv>:
  70:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
  74:	add	x1, x1, #0x0
  78:	strh	wzr, [x0]
  7c:	str	x1, [x0, #8]
  80:	strh	wzr, [x0, #16]
  84:	ret

0000000000000088 <_ZN7__ubsan18RegisterUbsanFlagsEPN11__sanitizer10FlagParserEPNS_5FlagsE>:
  88:	stp	x19, x20, [sp, #-32]!
  8c:	mov	x3, x1
  90:	mov	x19, x1
  94:	mov	x20, x0
  98:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
  9c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
  a0:	add	x2, x2, #0x0
  a4:	add	x1, x1, #0x0
  a8:	str	x30, [sp, #16]
  ac:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
  b0:	add	x3, x19, #0x1
  b4:	mov	x0, x20
  b8:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
  bc:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
  c0:	add	x2, x2, #0x0
  c4:	add	x1, x1, #0x0
  c8:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
  cc:	adrp	x0, 0 <_ZN11__sanitizer10FlagParser5AllocE>
  d0:	mov	x1, #0x10                  	// #16
  d4:	ldr	x0, [x0]
  d8:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
  dc:	mov	x2, x0
  e0:	add	x4, x19, #0x8
  e4:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
  e8:	add	x1, x1, #0x0
  ec:	mov	x0, x20
  f0:	stp	x1, x4, [x2]
  f4:	adrp	x3, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
  f8:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
  fc:	add	x3, x3, #0x0
 100:	add	x1, x1, #0x0
 104:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
 108:	add	x3, x19, #0x10
 10c:	mov	x0, x20
 110:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 114:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 118:	add	x2, x2, #0x0
 11c:	add	x1, x1, #0x0
 120:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 124:	add	x3, x19, #0x11
 128:	mov	x0, x20
 12c:	ldr	x30, [sp, #16]
 130:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 134:	ldp	x19, x20, [sp], #32
 138:	add	x2, x2, #0x0
 13c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 140:	add	x1, x1, #0x0
 144:	b	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>

0000000000000148 <_ZN7__ubsan15InitializeFlagsEv>:
 148:	stp	x19, x20, [sp, #-288]!
 14c:	stp	x21, x22, [sp, #16]
 150:	adrp	x21, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 154:	add	x19, sp, #0x30
 158:	ldr	x20, [x21]
 15c:	str	x30, [sp, #32]
 160:	mov	x0, x20
 164:	bl	0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
 168:	mov	x1, x20
 16c:	mov	x0, x19
 170:	bl	0 <_ZN11__sanitizer11CommonFlags8CopyFromERKS0_>
 174:	strb	wzr, [sp, #108]
 178:	adrp	x0, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 17c:	add	x0, x0, #0x0
 180:	bl	0 <getenv>
 184:	mov	x2, x0
 188:	mov	x1, x19
 18c:	mov	x0, x20
 190:	str	x2, [sp, #56]
 194:	bl	0 <_ZN11__sanitizer11CommonFlags8CopyFromERKS0_>
 198:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 19c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 1a0:	add	x22, x2, #0x0
 1a4:	add	x1, x1, #0x0
 1a8:	strh	wzr, [x2]
 1ac:	mov	x0, x19
 1b0:	str	x1, [x22, #8]
 1b4:	strh	wzr, [x22, #16]
 1b8:	bl	0 <_ZN11__sanitizer10FlagParserC1Ev>
 1bc:	mov	x1, x20
 1c0:	mov	x0, x19
 1c4:	bl	0 <_ZN11__sanitizer19RegisterCommonFlagsEPNS_10FlagParserEPNS_11CommonFlagsE>
 1c8:	mov	x1, x22
 1cc:	mov	x0, x19
 1d0:	bl	88 <_ZN7__ubsan18RegisterUbsanFlagsEPN11__sanitizer10FlagParserEPNS_5FlagsE>
 1d4:	bl	58 <__ubsan_default_options>
 1d8:	mov	x1, x0
 1dc:	mov	x0, x19
 1e0:	bl	0 <_ZN11__sanitizer10FlagParser11ParseStringEPKc>
 1e4:	adrp	x0, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 1e8:	add	x0, x0, #0x0
 1ec:	bl	0 <getenv>
 1f0:	mov	x1, x0
 1f4:	mov	x0, x19
 1f8:	bl	0 <_ZN11__sanitizer10FlagParser11ParseStringEPKc>
 1fc:	mov	x0, x20
 200:	bl	0 <_ZN11__sanitizer21InitializeCommonFlagsEPNS_11CommonFlagsE>
 204:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 208:	ldr	x0, [x0]
 20c:	ldr	w0, [x0]
 210:	cbnz	w0, 230 <_ZN7__ubsan15InitializeFlagsEv+0xe8>
 214:	ldr	x21, [x21]
 218:	ldrb	w0, [x21, #122]
 21c:	cbnz	w0, 240 <_ZN7__ubsan15InitializeFlagsEv+0xf8>
 220:	ldp	x21, x22, [sp, #16]
 224:	ldr	x30, [sp, #32]
 228:	ldp	x19, x20, [sp], #288
 22c:	ret
 230:	bl	0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 234:	ldr	x21, [x21]
 238:	ldrb	w0, [x21, #122]
 23c:	cbz	w0, 220 <_ZN7__ubsan15InitializeFlagsEv+0xd8>
 240:	mov	x0, x19
 244:	bl	0 <_ZN11__sanitizer10FlagParser21PrintFlagDescriptionsEv>
 248:	ldp	x21, x22, [sp, #16]
 24c:	ldr	x30, [sp, #32]
 250:	ldp	x19, x20, [sp], #288
 254:	ret

Disassembly of section .text._ZN11__sanitizer11FlagHandlerIPKcE5ParseES2_:

0000000000000000 <_ZN11__sanitizer11FlagHandlerIPKcE5ParseES2_>:
   0:	mov	x2, x0
   4:	mov	w0, #0x1                   	// #1
   8:	ldr	x2, [x2, #8]
   c:	str	x1, [x2]
  10:	ret

Disassembly of section .text._ZN11__sanitizer11FlagHandlerIbE5ParseEPKc:

0000000000000000 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>:
   0:	mov	x2, x0
   4:	stp	x19, x20, [sp, #-32]!
   8:	mov	x19, x1
   c:	mov	x0, x19
  10:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  14:	add	x1, x1, #0x0
  18:	ldr	x20, [x2, #8]
  1c:	str	x30, [sp, #16]
  20:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  24:	cbnz	w0, 3c <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x3c>
  28:	mov	w0, #0x1                   	// #1
  2c:	strb	wzr, [x20]
  30:	ldr	x30, [sp, #16]
  34:	ldp	x19, x20, [sp], #32
  38:	ret
  3c:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  40:	mov	x0, x19
  44:	add	x1, x1, #0x0
  48:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  4c:	cbz	w0, 28 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x28>
  50:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  54:	mov	x0, x19
  58:	add	x1, x1, #0x0
  5c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  60:	cbz	w0, 28 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x28>
  64:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  68:	mov	x0, x19
  6c:	add	x1, x1, #0x0
  70:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  74:	cbz	w0, 8c <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x8c>
  78:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  7c:	mov	x0, x19
  80:	add	x1, x1, #0x0
  84:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  88:	cbnz	w0, 9c <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x9c>
  8c:	mov	w1, #0x1                   	// #1
  90:	mov	w0, #0x1                   	// #1
  94:	strb	w1, [x20]
  98:	b	30 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x30>
  9c:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  a0:	mov	x0, x19
  a4:	add	x1, x1, #0x0
  a8:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  ac:	cbz	w0, 8c <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x8c>
  b0:	mov	x1, x19
  b4:	adrp	x0, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  b8:	add	x0, x0, #0x0
  bc:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  c0:	mov	w0, #0x0                   	// #0
  c4:	ldr	x30, [sp, #16]
  c8:	ldp	x19, x20, [sp], #32
  cc:	ret

ubsan_handlers.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>:
       0:	sub	sp, sp, #0x2c0
       4:	ldrb	w3, [x2]
       8:	mov	w4, #0xffffffff            	// #-1
       c:	stp	x19, x20, [sp]
      10:	mov	x19, x0
      14:	add	x0, x0, #0xc
      18:	stp	x23, x24, [sp, #32]
      1c:	mov	x24, x2
      20:	mov	x20, x1
      24:	stp	x21, x22, [sp, #16]
      28:	stp	x25, x26, [sp, #48]
      2c:	ldr	x1, [x2, #8]
      30:	str	x30, [sp, #80]
      34:	ldxr	w21, [x0]
      38:	stxr	w2, w4, [x0]
      3c:	cbnz	w2, 34 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE+0x34>
      40:	dmb	ish
      44:	ldr	x0, [x19, #16]
      48:	mov	w26, w3
      4c:	ldr	w25, [x19, #8]
      50:	ldr	x23, [x19]
      54:	ldrh	w4, [x0]
      58:	cbnz	w4, 94 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE+0x94>
      5c:	ldrh	w0, [x0, #2]
      60:	tbz	w0, #0, 94 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE+0x94>
      64:	cbnz	w3, 220 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE+0x220>
      68:	mov	w26, #0x1                   	// #1
      6c:	mov	w22, #0x5                   	// #5
      70:	cmn	w21, #0x1
      74:	b.ne	198 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE+0x198>  // b.any
      78:	ldp	x19, x20, [sp]
      7c:	ldp	x21, x22, [sp, #16]
      80:	ldp	x23, x24, [sp, #32]
      84:	ldp	x25, x26, [sp, #48]
      88:	ldr	x30, [sp, #80]
      8c:	add	sp, sp, #0x2c0
      90:	ret
      94:	mov	w22, #0x6                   	// #6
      98:	cbz	w3, 70 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE+0x70>
      9c:	adrp	x0, 0 <_ZN7__ubsan11ubsan_flagsE>
      a0:	ldr	x0, [x0]
      a4:	ldrb	w0, [x0, #17]
      a8:	cbnz	w0, 78 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE+0x78>
      ac:	stp	x27, x28, [sp, #64]
      b0:	mov	w28, #0x1                   	// #1
      b4:	add	x26, sp, #0xc0
      b8:	str	w28, [sp, #272]
      bc:	mov	w3, w22
      c0:	str	x23, [sp, #280]
      c4:	add	x2, sp, #0x60
      c8:	str	w25, [sp, #288]
      cc:	mov	x0, x26
      d0:	str	w21, [sp, #292]
      d4:	add	x1, sp, #0x90
      d8:	ldp	x6, x7, [sp, #272]
      dc:	add	x27, sp, #0x110
      e0:	ldr	x8, [x24, #16]
      e4:	stp	x6, x7, [sp, #96]
      e8:	ldp	x6, x7, [x24]
      ec:	stp	x6, x7, [sp, #144]
      f0:	ldp	x4, x5, [sp, #288]
      f4:	stp	x4, x5, [sp, #112]
      f8:	ldr	x9, [sp, #304]
      fc:	str	x9, [sp, #128]
     100:	str	x8, [sp, #160]
     104:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
     108:	ldr	x3, [x19, #16]
     10c:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
     110:	mov	x0, x27
     114:	add	x2, x2, #0x0
     118:	stp	x3, x20, [sp, #176]
     11c:	add	x3, sp, #0x130
     120:	add	x1, sp, #0xb0
     124:	str	w28, [sp, #272]
     128:	str	x23, [sp, #280]
     12c:	stp	w25, w21, [x3, #-16]
     130:	stp	wzr, w22, [x3, #8]
     134:	str	x2, [sp, #320]
     138:	str	wzr, [sp, #592]
     13c:	str	wzr, [sp, #600]
     140:	str	xzr, [sp, #608]
     144:	str	xzr, [sp, #616]
     148:	str	wzr, [sp, #640]
     14c:	str	xzr, [sp, #648]
     150:	str	xzr, [sp, #656]
     154:	str	xzr, [sp, #680]
     158:	str	wzr, [sp, #688]
     15c:	bl	0 <_ZN7__ubsan4DiaglsERKNS_5ValueE>
     160:	ldr	x1, [x19, #16]
     164:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
     168:	mov	x0, x27
     16c:	bl	0 <_ZN7__ubsan4DiagD1Ev>
     170:	mov	x0, x26
     174:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
     178:	ldp	x19, x20, [sp]
     17c:	ldp	x21, x22, [sp, #16]
     180:	ldp	x23, x24, [sp, #32]
     184:	ldp	x25, x26, [sp, #48]
     188:	ldp	x27, x28, [sp, #64]
     18c:	ldr	x30, [sp, #80]
     190:	add	sp, sp, #0x2c0
     194:	ret
     198:	mov	x2, x23
     19c:	mov	w0, w22
     1a0:	bl	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
     1a4:	tst	w0, #0xff
     1a8:	b.ne	78 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE+0x78>  // b.any
     1ac:	cbz	w26, 9c <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE+0x9c>
     1b0:	stp	x27, x28, [sp, #64]
     1b4:	mov	w28, #0x1                   	// #1
     1b8:	str	w28, [sp, #272]
     1bc:	add	x26, sp, #0xc0
     1c0:	str	x23, [sp, #280]
     1c4:	mov	w3, w22
     1c8:	str	w25, [sp, #288]
     1cc:	add	x2, sp, #0x60
     1d0:	str	w21, [sp, #292]
     1d4:	mov	x0, x26
     1d8:	ldp	x6, x7, [sp, #272]
     1dc:	add	x1, sp, #0x90
     1e0:	ldr	x8, [x24, #16]
     1e4:	stp	x6, x7, [sp, #96]
     1e8:	add	x27, sp, #0x110
     1ec:	ldp	x6, x7, [x24]
     1f0:	stp	x6, x7, [sp, #144]
     1f4:	ldp	x4, x5, [sp, #288]
     1f8:	stp	x4, x5, [sp, #112]
     1fc:	ldr	x9, [sp, #304]
     200:	str	x9, [sp, #128]
     204:	str	x8, [sp, #160]
     208:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
     20c:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
     210:	mov	x0, x27
     214:	add	x2, x2, #0x0
     218:	ldr	x3, [x19, #16]
     21c:	b	118 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE+0x118>
     220:	mov	w22, #0x5                   	// #5
     224:	stp	x27, x28, [sp, #64]
     228:	b	1b4 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE+0x1b4>
     22c:	nop

0000000000000230 <_ZL21handleOutOfBoundsImplPN7__ubsan15OutOfBoundsDataEmNS_13ReportOptionsE>:
     230:	sub	sp, sp, #0x2b0
     234:	stp	x19, x20, [sp]
     238:	mov	x19, x0
     23c:	mov	x20, x2
     240:	add	x0, x0, #0xc
     244:	stp	x21, x22, [sp, #16]
     248:	mov	x21, x1
     24c:	mov	w1, #0xffffffff            	// #-1
     250:	stp	x25, x26, [sp, #48]
     254:	str	x30, [sp, #72]
     258:	ldxr	w22, [x0]
     25c:	stxr	w2, w1, [x0]
     260:	cbnz	w2, 258 <_ZL21handleOutOfBoundsImplPN7__ubsan15OutOfBoundsDataEmNS_13ReportOptionsE+0x28>
     264:	dmb	ish
     268:	ldrb	w0, [x20]
     26c:	ldr	w26, [x19, #8]
     270:	ldr	x25, [x19]
     274:	cbnz	w0, 2b0 <_ZL21handleOutOfBoundsImplPN7__ubsan15OutOfBoundsDataEmNS_13ReportOptionsE+0x80>
     278:	cmp	w22, w1
     27c:	b.ne	298 <_ZL21handleOutOfBoundsImplPN7__ubsan15OutOfBoundsDataEmNS_13ReportOptionsE+0x68>  // b.any
     280:	ldp	x19, x20, [sp]
     284:	ldp	x21, x22, [sp, #16]
     288:	ldp	x25, x26, [sp, #48]
     28c:	ldr	x30, [sp, #72]
     290:	add	sp, sp, #0x2b0
     294:	ret
     298:	ldr	x1, [x20, #8]
     29c:	mov	x2, x25
     2a0:	mov	w0, #0xe                   	// #14
     2a4:	bl	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
     2a8:	tst	w0, #0xff
     2ac:	b.ne	280 <_ZL21handleOutOfBoundsImplPN7__ubsan15OutOfBoundsDataEmNS_13ReportOptionsE+0x50>  // b.any
     2b0:	str	x25, [sp, #264]
     2b4:	add	x2, sp, #0x50
     2b8:	str	w26, [sp, #272]
     2bc:	add	x1, sp, #0x80
     2c0:	str	w22, [sp, #276]
     2c4:	mov	w3, #0xe                   	// #14
     2c8:	ldp	x8, x9, [x20]
     2cc:	str	x27, [sp, #64]
     2d0:	mov	w27, #0x1                   	// #1
     2d4:	str	w27, [sp, #256]
     2d8:	ldp	x4, x5, [sp, #272]
     2dc:	stp	x23, x24, [sp, #32]
     2e0:	add	x23, sp, #0xb0
     2e4:	ldp	x6, x7, [sp, #256]
     2e8:	stp	x6, x7, [sp, #80]
     2ec:	mov	x0, x23
     2f0:	ldr	x6, [x20, #16]
     2f4:	stp	x4, x5, [sp, #96]
     2f8:	add	x24, sp, #0x100
     2fc:	ldr	x10, [sp, #288]
     300:	str	x10, [sp, #112]
     304:	stp	x8, x9, [sp, #128]
     308:	str	x6, [sp, #144]
     30c:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
     310:	ldr	x4, [x19, #24]
     314:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
     318:	add	x2, x2, #0x0
     31c:	mov	x3, #0xe00000000           	// #60129542144
     320:	add	x1, sp, #0xa0
     324:	mov	x0, x24
     328:	stp	x4, x21, [sp, #160]
     32c:	str	w27, [sp, #256]
     330:	str	x25, [sp, #264]
     334:	str	w26, [sp, #272]
     338:	str	w22, [sp, #276]
     33c:	stp	x3, x2, [sp, #296]
     340:	str	wzr, [sp, #576]
     344:	str	wzr, [sp, #584]
     348:	str	xzr, [sp, #592]
     34c:	str	xzr, [sp, #600]
     350:	str	wzr, [sp, #624]
     354:	str	xzr, [sp, #632]
     358:	str	xzr, [sp, #640]
     35c:	str	xzr, [sp, #664]
     360:	str	wzr, [sp, #672]
     364:	bl	0 <_ZN7__ubsan4DiaglsERKNS_5ValueE>
     368:	ldr	x1, [x19, #16]
     36c:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
     370:	mov	x0, x24
     374:	bl	0 <_ZN7__ubsan4DiagD1Ev>
     378:	mov	x0, x23
     37c:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
     380:	ldp	x19, x20, [sp]
     384:	ldp	x21, x22, [sp, #16]
     388:	ldp	x23, x24, [sp, #32]
     38c:	ldp	x25, x26, [sp, #48]
     390:	ldr	x27, [sp, #64]
     394:	ldr	x30, [sp, #72]
     398:	add	sp, sp, #0x2b0
     39c:	ret

00000000000003a0 <_ZL25handleVLABoundNotPositivePN7__ubsan12VLABoundDataEmNS_13ReportOptionsE>:
     3a0:	sub	sp, sp, #0x2b0
     3a4:	stp	x19, x20, [sp]
     3a8:	mov	x19, x0
     3ac:	mov	x20, x2
     3b0:	add	x0, x0, #0xc
     3b4:	stp	x21, x22, [sp, #16]
     3b8:	mov	x21, x1
     3bc:	mov	w1, #0xffffffff            	// #-1
     3c0:	stp	x23, x24, [sp, #32]
     3c4:	stp	x25, x26, [sp, #48]
     3c8:	str	x30, [sp, #72]
     3cc:	ldxr	w26, [x0]
     3d0:	stxr	w2, w1, [x0]
     3d4:	cbnz	w2, 3cc <_ZL25handleVLABoundNotPositivePN7__ubsan12VLABoundDataEmNS_13ReportOptionsE+0x2c>
     3d8:	dmb	ish
     3dc:	ldrb	w0, [x20]
     3e0:	ldr	w25, [x19, #8]
     3e4:	ldr	x24, [x19]
     3e8:	cbnz	w0, 428 <_ZL25handleVLABoundNotPositivePN7__ubsan12VLABoundDataEmNS_13ReportOptionsE+0x88>
     3ec:	cmp	w26, w1
     3f0:	b.ne	410 <_ZL25handleVLABoundNotPositivePN7__ubsan12VLABoundDataEmNS_13ReportOptionsE+0x70>  // b.any
     3f4:	ldp	x19, x20, [sp]
     3f8:	ldp	x21, x22, [sp, #16]
     3fc:	ldp	x23, x24, [sp, #32]
     400:	ldp	x25, x26, [sp, #48]
     404:	ldr	x30, [sp, #72]
     408:	add	sp, sp, #0x2b0
     40c:	ret
     410:	ldr	x1, [x20, #8]
     414:	mov	x2, x24
     418:	mov	w0, #0x11                  	// #17
     41c:	bl	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
     420:	tst	w0, #0xff
     424:	b.ne	3f4 <_ZL25handleVLABoundNotPositivePN7__ubsan12VLABoundDataEmNS_13ReportOptionsE+0x54>  // b.any
     428:	str	x27, [sp, #64]
     42c:	mov	w27, #0x1                   	// #1
     430:	str	w27, [sp, #256]
     434:	add	x22, sp, #0xb0
     438:	str	x24, [sp, #264]
     43c:	mov	x0, x22
     440:	str	w25, [sp, #272]
     444:	add	x2, sp, #0x50
     448:	str	w26, [sp, #276]
     44c:	add	x1, sp, #0x80
     450:	ldp	x6, x7, [sp, #256]
     454:	stp	x6, x7, [sp, #80]
     458:	mov	w3, #0x11                  	// #17
     45c:	ldp	x6, x7, [x20]
     460:	add	x23, sp, #0x100
     464:	ldp	x4, x5, [sp, #272]
     468:	stp	x4, x5, [sp, #96]
     46c:	ldr	x4, [x20, #16]
     470:	stp	x6, x7, [sp, #128]
     474:	ldr	x8, [sp, #288]
     478:	str	x8, [sp, #112]
     47c:	str	x4, [sp, #144]
     480:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
     484:	str	w27, [sp, #256]
     488:	ldr	x4, [x19, #16]
     48c:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
     490:	add	x2, x2, #0x0
     494:	add	x1, sp, #0xa0
     498:	mov	x3, #0x1100000000          	// #73014444032
     49c:	mov	x0, x23
     4a0:	stp	x4, x21, [sp, #160]
     4a4:	str	x24, [sp, #264]
     4a8:	str	w25, [sp, #272]
     4ac:	str	w26, [sp, #276]
     4b0:	stp	x3, x2, [sp, #296]
     4b4:	str	wzr, [sp, #576]
     4b8:	str	wzr, [sp, #584]
     4bc:	str	xzr, [sp, #592]
     4c0:	str	xzr, [sp, #600]
     4c4:	str	wzr, [sp, #624]
     4c8:	str	xzr, [sp, #632]
     4cc:	str	xzr, [sp, #640]
     4d0:	str	xzr, [sp, #664]
     4d4:	str	wzr, [sp, #672]
     4d8:	bl	0 <_ZN7__ubsan4DiaglsERKNS_5ValueE>
     4dc:	mov	x0, x23
     4e0:	bl	0 <_ZN7__ubsan4DiagD1Ev>
     4e4:	mov	x0, x22
     4e8:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
     4ec:	ldp	x19, x20, [sp]
     4f0:	ldp	x21, x22, [sp, #16]
     4f4:	ldp	x23, x24, [sp, #32]
     4f8:	ldp	x25, x26, [sp, #48]
     4fc:	ldr	x27, [sp, #64]
     500:	ldr	x30, [sp, #72]
     504:	add	sp, sp, #0x2b0
     508:	ret
     50c:	nop

0000000000000510 <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE>:
     510:	sub	sp, sp, #0x2c0
     514:	stp	x19, x20, [sp]
     518:	mov	x20, x3
     51c:	mov	x19, x0
     520:	add	x0, x0, #0xc
     524:	stp	x21, x22, [sp, #16]
     528:	stp	x23, x24, [sp, #32]
     52c:	stp	x25, x26, [sp, #48]
     530:	ldrb	w25, [x3]
     534:	mov	w3, #0xffffffff            	// #-1
     538:	ldr	x26, [x20, #8]
     53c:	str	x30, [sp, #64]
     540:	ldxr	w21, [x0]
     544:	stxr	w4, w3, [x0]
     548:	cbnz	w4, 540 <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE+0x30>
     54c:	dmb	ish
     550:	ldr	x0, [x19, #16]
     554:	stp	x0, x1, [sp, #160]
     558:	ldr	w22, [x19, #8]
     55c:	stp	x0, x2, [sp, #176]
     560:	ldrh	w1, [x0]
     564:	ldr	x23, [x19]
     568:	cbnz	w1, 598 <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE+0x88>
     56c:	ldrh	w0, [x0, #2]
     570:	tbz	w0, #0, 6ac <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE+0x19c>
     574:	add	x0, sp, #0xb0
     578:	bl	0 <_ZNK7__ubsan5Value12getSIntValueEv>
     57c:	cmn	x0, #0x1
     580:	b.ne	58c <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE+0x7c>  // b.any
     584:	cmn	x1, #0x1
     588:	b.eq	70c <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE+0x1fc>  // b.none
     58c:	ldr	x0, [x19, #16]
     590:	ldrh	w0, [x0]
     594:	cbz	w0, 6ac <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE+0x19c>
     598:	mov	w24, #0x8                   	// #8
     59c:	cbnz	w25, 6b4 <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE+0x1a4>
     5a0:	cmn	w21, #0x1
     5a4:	b.ne	5c4 <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE+0xb4>  // b.any
     5a8:	ldp	x19, x20, [sp]
     5ac:	ldp	x21, x22, [sp, #16]
     5b0:	ldp	x23, x24, [sp, #32]
     5b4:	ldp	x25, x26, [sp, #48]
     5b8:	ldr	x30, [sp, #64]
     5bc:	add	sp, sp, #0x2c0
     5c0:	ret
     5c4:	mov	x1, x26
     5c8:	mov	x2, x23
     5cc:	mov	w0, w24
     5d0:	bl	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
     5d4:	tst	w0, #0xff
     5d8:	b.ne	5a8 <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE+0x98>  // b.any
     5dc:	mov	w0, #0x1                   	// #1
     5e0:	str	w0, [sp, #272]
     5e4:	str	x23, [sp, #280]
     5e8:	add	x25, sp, #0xc0
     5ec:	str	w22, [sp, #288]
     5f0:	mov	w3, w24
     5f4:	str	w21, [sp, #292]
     5f8:	add	x2, sp, #0x50
     5fc:	ldp	x6, x7, [sp, #272]
     600:	stp	x6, x7, [sp, #80]
     604:	add	x1, sp, #0x80
     608:	ldp	x6, x7, [x20]
     60c:	mov	x0, x25
     610:	ldp	x4, x5, [sp, #288]
     614:	stp	x4, x5, [sp, #96]
     618:	ldr	x4, [x20, #16]
     61c:	stp	x6, x7, [sp, #128]
     620:	ldr	x8, [sp, #304]
     624:	str	x8, [sp, #112]
     628:	str	x4, [sp, #144]
     62c:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
     630:	cmp	w24, #0x5
     634:	b.eq	768 <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE+0x258>  // b.none
     638:	mov	w2, #0x1                   	// #1
     63c:	str	w2, [sp, #272]
     640:	add	x2, sp, #0x130
     644:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
     648:	add	x1, x1, #0x0
     64c:	str	x23, [sp, #280]
     650:	add	x0, sp, #0x110
     654:	stp	w22, w21, [x2, #-16]
     658:	stp	wzr, w24, [x2, #8]
     65c:	str	x1, [sp, #320]
     660:	str	wzr, [sp, #592]
     664:	str	wzr, [sp, #600]
     668:	str	xzr, [sp, #608]
     66c:	str	xzr, [sp, #616]
     670:	str	wzr, [sp, #640]
     674:	str	xzr, [sp, #648]
     678:	str	xzr, [sp, #656]
     67c:	str	xzr, [sp, #680]
     680:	str	wzr, [sp, #688]
     684:	bl	0 <_ZN7__ubsan4DiagD1Ev>
     688:	mov	x0, x25
     68c:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
     690:	ldp	x19, x20, [sp]
     694:	ldp	x21, x22, [sp, #16]
     698:	ldp	x23, x24, [sp, #32]
     69c:	ldp	x25, x26, [sp, #48]
     6a0:	ldr	x30, [sp, #64]
     6a4:	add	sp, sp, #0x2c0
     6a8:	ret
     6ac:	mov	w24, #0x7                   	// #7
     6b0:	cbz	w25, 5a0 <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE+0x90>
     6b4:	mov	w0, #0x1                   	// #1
     6b8:	str	w0, [sp, #272]
     6bc:	str	x23, [sp, #280]
     6c0:	add	x25, sp, #0xc0
     6c4:	str	w22, [sp, #288]
     6c8:	mov	w3, w24
     6cc:	str	w21, [sp, #292]
     6d0:	add	x2, sp, #0x50
     6d4:	ldp	x6, x7, [sp, #272]
     6d8:	stp	x6, x7, [sp, #80]
     6dc:	add	x1, sp, #0x80
     6e0:	ldp	x6, x7, [x20]
     6e4:	mov	x0, x25
     6e8:	ldp	x4, x5, [sp, #288]
     6ec:	stp	x4, x5, [sp, #96]
     6f0:	ldr	x4, [x20, #16]
     6f4:	stp	x6, x7, [sp, #128]
     6f8:	ldr	x8, [sp, #304]
     6fc:	str	x8, [sp, #112]
     700:	str	x4, [sp, #144]
     704:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
     708:	b	638 <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE+0x128>
     70c:	mov	w24, #0x5                   	// #5
     710:	cbz	w25, 5a0 <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE+0x90>
     714:	mov	w0, #0x1                   	// #1
     718:	str	w0, [sp, #272]
     71c:	str	x23, [sp, #280]
     720:	add	x25, sp, #0xc0
     724:	str	w22, [sp, #288]
     728:	add	x2, sp, #0x50
     72c:	str	w21, [sp, #292]
     730:	add	x1, sp, #0x80
     734:	ldp	x6, x7, [sp, #272]
     738:	stp	x6, x7, [sp, #80]
     73c:	mov	x0, x25
     740:	ldp	x6, x7, [x20]
     744:	mov	w3, #0x5                   	// #5
     748:	ldp	x4, x5, [sp, #288]
     74c:	stp	x4, x5, [sp, #96]
     750:	ldr	x4, [x20, #16]
     754:	stp	x6, x7, [sp, #128]
     758:	ldr	x8, [sp, #304]
     75c:	str	x8, [sp, #112]
     760:	str	x4, [sp, #144]
     764:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
     768:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
     76c:	add	x2, x2, #0x0
     770:	mov	w4, #0x1                   	// #1
     774:	mov	x3, #0x500000000           	// #21474836480
     778:	add	x20, sp, #0x110
     77c:	add	x1, sp, #0xa0
     780:	mov	x0, x20
     784:	str	w4, [sp, #272]
     788:	str	x23, [sp, #280]
     78c:	str	w22, [sp, #288]
     790:	str	w21, [sp, #292]
     794:	stp	x3, x2, [sp, #312]
     798:	str	wzr, [sp, #592]
     79c:	str	wzr, [sp, #600]
     7a0:	str	xzr, [sp, #608]
     7a4:	str	xzr, [sp, #616]
     7a8:	str	wzr, [sp, #640]
     7ac:	str	xzr, [sp, #648]
     7b0:	str	xzr, [sp, #656]
     7b4:	str	xzr, [sp, #680]
     7b8:	str	wzr, [sp, #688]
     7bc:	bl	0 <_ZN7__ubsan4DiaglsERKNS_5ValueE>
     7c0:	ldr	x1, [x19, #16]
     7c4:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
     7c8:	mov	x0, x20
     7cc:	bl	0 <_ZN7__ubsan4DiagD1Ev>
     7d0:	b	688 <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE+0x178>
     7d4:	nop

00000000000007d8 <_ZL22handleLoadInvalidValuePN7__ubsan16InvalidValueDataEmNS_13ReportOptionsE>:
     7d8:	sub	sp, sp, #0x2c0
     7dc:	stp	x19, x20, [sp]
     7e0:	mov	x19, x0
     7e4:	mov	x20, x2
     7e8:	add	x0, x0, #0xc
     7ec:	stp	x21, x22, [sp, #16]
     7f0:	mov	x21, x1
     7f4:	mov	w1, #0xffffffff            	// #-1
     7f8:	stp	x23, x24, [sp, #32]
     7fc:	stp	x27, x28, [sp, #64]
     800:	str	x30, [sp, #80]
     804:	ldxr	w22, [x0]
     808:	stxr	w2, w1, [x0]
     80c:	cbnz	w2, 804 <_ZL22handleLoadInvalidValuePN7__ubsan16InvalidValueDataEmNS_13ReportOptionsE+0x2c>
     810:	dmb	ish
     814:	ldr	x0, [x19, #16]
     818:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
     81c:	ldr	w24, [x19, #8]
     820:	add	x1, x1, #0x0
     824:	add	x0, x0, #0x4
     828:	ldr	x23, [x19]
     82c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
     830:	cbnz	w0, 968 <_ZL22handleLoadInvalidValuePN7__ubsan16InvalidValueDataEmNS_13ReportOptionsE+0x190>
     834:	mov	w27, #0x13                  	// #19
     838:	ldrb	w0, [x20]
     83c:	cbnz	w0, 87c <_ZL22handleLoadInvalidValuePN7__ubsan16InvalidValueDataEmNS_13ReportOptionsE+0xa4>
     840:	cmn	w22, #0x1
     844:	b.ne	864 <_ZL22handleLoadInvalidValuePN7__ubsan16InvalidValueDataEmNS_13ReportOptionsE+0x8c>  // b.any
     848:	ldp	x19, x20, [sp]
     84c:	ldp	x21, x22, [sp, #16]
     850:	ldp	x23, x24, [sp, #32]
     854:	ldp	x27, x28, [sp, #64]
     858:	ldr	x30, [sp, #80]
     85c:	add	sp, sp, #0x2c0
     860:	ret
     864:	ldr	x1, [x20, #8]
     868:	mov	x2, x23
     86c:	mov	w0, w27
     870:	bl	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
     874:	tst	w0, #0xff
     878:	b.ne	848 <_ZL22handleLoadInvalidValuePN7__ubsan16InvalidValueDataEmNS_13ReportOptionsE+0x70>  // b.any
     87c:	mov	w28, #0x1                   	// #1
     880:	str	w28, [sp, #272]
     884:	str	x23, [sp, #280]
     888:	mov	w3, w27
     88c:	str	w24, [sp, #288]
     890:	add	x2, sp, #0x60
     894:	str	w22, [sp, #292]
     898:	add	x1, sp, #0x90
     89c:	ldp	x6, x7, [sp, #272]
     8a0:	stp	x25, x26, [sp, #48]
     8a4:	add	x25, sp, #0xc0
     8a8:	ldr	x8, [x20, #16]
     8ac:	stp	x6, x7, [sp, #96]
     8b0:	mov	x0, x25
     8b4:	ldp	x6, x7, [x20]
     8b8:	stp	x6, x7, [sp, #144]
     8bc:	add	x26, sp, #0x110
     8c0:	ldp	x4, x5, [sp, #288]
     8c4:	stp	x4, x5, [sp, #112]
     8c8:	ldr	x9, [sp, #304]
     8cc:	str	x9, [sp, #128]
     8d0:	str	x8, [sp, #160]
     8d4:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
     8d8:	str	w28, [sp, #272]
     8dc:	ldr	x3, [x19, #16]
     8e0:	stp	x3, x21, [sp, #176]
     8e4:	add	x3, sp, #0x130
     8e8:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
     8ec:	add	x2, x2, #0x0
     8f0:	str	x23, [sp, #280]
     8f4:	add	x1, sp, #0xb0
     8f8:	stp	w24, w22, [x3, #-16]
     8fc:	mov	x0, x26
     900:	stp	wzr, w27, [x3, #8]
     904:	str	x2, [sp, #320]
     908:	str	wzr, [sp, #592]
     90c:	str	wzr, [sp, #600]
     910:	str	xzr, [sp, #608]
     914:	str	xzr, [sp, #616]
     918:	str	wzr, [sp, #640]
     91c:	str	xzr, [sp, #648]
     920:	str	xzr, [sp, #656]
     924:	str	xzr, [sp, #680]
     928:	str	wzr, [sp, #688]
     92c:	bl	0 <_ZN7__ubsan4DiaglsERKNS_5ValueE>
     930:	ldr	x1, [x19, #16]
     934:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
     938:	mov	x0, x26
     93c:	bl	0 <_ZN7__ubsan4DiagD1Ev>
     940:	mov	x0, x25
     944:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
     948:	ldp	x19, x20, [sp]
     94c:	ldp	x21, x22, [sp, #16]
     950:	ldp	x23, x24, [sp, #32]
     954:	ldp	x25, x26, [sp, #48]
     958:	ldp	x27, x28, [sp, #64]
     95c:	ldr	x30, [sp, #80]
     960:	add	sp, sp, #0x2c0
     964:	ret
     968:	ldr	x0, [x19, #16]
     96c:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
     970:	mov	x2, #0x6                   	// #6
     974:	add	x1, x1, #0x0
     978:	add	x0, x0, #0x4
     97c:	mov	w27, #0x14                  	// #20
     980:	bl	0 <_ZN11__sanitizer16internal_strncmpEPKcS1_m>
     984:	cbnz	w0, 838 <_ZL22handleLoadInvalidValuePN7__ubsan16InvalidValueDataEmNS_13ReportOptionsE+0x60>
     988:	b	834 <_ZL22handleLoadInvalidValuePN7__ubsan16InvalidValueDataEmNS_13ReportOptionsE+0x5c>
     98c:	nop

0000000000000990 <_ZL23handleMissingReturnImplPN7__ubsan15UnreachableDataENS_13ReportOptionsE.constprop.0>:
     990:	sub	sp, sp, #0x280
     994:	mov	x4, x1
     998:	add	x2, sp, #0x30
     99c:	add	x1, sp, #0x60
     9a0:	mov	w3, #0x10                  	// #16
     9a4:	stp	x19, x20, [sp]
     9a8:	mov	x19, x0
     9ac:	add	x20, sp, #0x80
     9b0:	ldr	x0, [x0]
     9b4:	stp	x21, x22, [sp, #16]
     9b8:	mov	w22, #0x1                   	// #1
     9bc:	str	w22, [sp, #208]
     9c0:	add	x21, sp, #0xd0
     9c4:	str	x0, [sp, #216]
     9c8:	ldr	x0, [x19, #8]
     9cc:	str	x0, [sp, #224]
     9d0:	ldp	x6, x7, [sp, #208]
     9d4:	stp	x6, x7, [sp, #48]
     9d8:	mov	x0, x20
     9dc:	ldp	x6, x7, [x4]
     9e0:	str	x30, [sp, #32]
     9e4:	ldp	x8, x9, [sp, #224]
     9e8:	ldr	x4, [x4, #16]
     9ec:	stp	x8, x9, [sp, #64]
     9f0:	ldr	x5, [sp, #240]
     9f4:	str	x5, [sp, #80]
     9f8:	stp	x6, x7, [sp, #96]
     9fc:	str	x4, [sp, #112]
     a00:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
     a04:	ldp	x4, x3, [x19]
     a08:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
     a0c:	add	x1, x1, #0x0
     a10:	mov	x2, #0x1000000000          	// #68719476736
     a14:	mov	x0, x21
     a18:	str	w22, [sp, #208]
     a1c:	stp	x4, x3, [sp, #216]
     a20:	stp	x2, x1, [sp, #248]
     a24:	str	wzr, [sp, #528]
     a28:	str	wzr, [sp, #536]
     a2c:	str	xzr, [sp, #544]
     a30:	str	xzr, [sp, #552]
     a34:	str	wzr, [sp, #576]
     a38:	str	xzr, [sp, #584]
     a3c:	str	xzr, [sp, #592]
     a40:	str	xzr, [sp, #616]
     a44:	str	wzr, [sp, #624]
     a48:	bl	0 <_ZN7__ubsan4DiagD1Ev>
     a4c:	mov	x0, x20
     a50:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
     a54:	ldp	x19, x20, [sp]
     a58:	ldp	x21, x22, [sp, #16]
     a5c:	ldr	x30, [sp, #32]
     a60:	add	sp, sp, #0x280
     a64:	ret

0000000000000a68 <_ZL28handleBuiltinUnreachableImplPN7__ubsan15UnreachableDataENS_13ReportOptionsE.constprop.0>:
     a68:	sub	sp, sp, #0x280
     a6c:	mov	x4, x1
     a70:	add	x2, sp, #0x30
     a74:	add	x1, sp, #0x60
     a78:	mov	w3, #0xf                   	// #15
     a7c:	stp	x19, x20, [sp]
     a80:	mov	x19, x0
     a84:	add	x20, sp, #0x80
     a88:	ldr	x0, [x0]
     a8c:	stp	x21, x22, [sp, #16]
     a90:	mov	w22, #0x1                   	// #1
     a94:	str	w22, [sp, #208]
     a98:	add	x21, sp, #0xd0
     a9c:	str	x0, [sp, #216]
     aa0:	ldr	x0, [x19, #8]
     aa4:	str	x0, [sp, #224]
     aa8:	ldp	x6, x7, [sp, #208]
     aac:	stp	x6, x7, [sp, #48]
     ab0:	mov	x0, x20
     ab4:	ldp	x6, x7, [x4]
     ab8:	str	x30, [sp, #32]
     abc:	ldp	x8, x9, [sp, #224]
     ac0:	ldr	x4, [x4, #16]
     ac4:	stp	x8, x9, [sp, #64]
     ac8:	ldr	x5, [sp, #240]
     acc:	str	x5, [sp, #80]
     ad0:	stp	x6, x7, [sp, #96]
     ad4:	str	x4, [sp, #112]
     ad8:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
     adc:	ldp	x4, x3, [x19]
     ae0:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
     ae4:	add	x1, x1, #0x0
     ae8:	mov	x2, #0xf00000000           	// #64424509440
     aec:	mov	x0, x21
     af0:	str	w22, [sp, #208]
     af4:	stp	x4, x3, [sp, #216]
     af8:	stp	x2, x1, [sp, #248]
     afc:	str	wzr, [sp, #528]
     b00:	str	wzr, [sp, #536]
     b04:	str	xzr, [sp, #544]
     b08:	str	xzr, [sp, #552]
     b0c:	str	wzr, [sp, #576]
     b10:	str	xzr, [sp, #584]
     b14:	str	xzr, [sp, #592]
     b18:	str	xzr, [sp, #616]
     b1c:	str	wzr, [sp, #624]
     b20:	bl	0 <_ZN7__ubsan4DiagD1Ev>
     b24:	mov	x0, x20
     b28:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
     b2c:	ldp	x19, x20, [sp]
     b30:	ldp	x21, x22, [sp, #16]
     b34:	ldr	x30, [sp, #32]
     b38:	add	sp, sp, #0x280
     b3c:	ret

0000000000000b40 <_ZL23handleFloatCastOverflowPvmN7__ubsan13ReportOptionsE>:
     b40:	sub	sp, sp, #0x300
     b44:	stp	x19, x20, [sp]
     b48:	mov	x20, x2
     b4c:	mov	x19, x0
     b50:	stp	x21, x22, [sp, #16]
     b54:	add	x22, sp, #0x150
     b58:	mov	x2, #0x8                   	// #8
     b5c:	mov	x21, x1
     b60:	mov	x1, x0
     b64:	mov	x0, x22
     b68:	stp	x23, x24, [sp, #32]
     b6c:	stp	x25, x26, [sp, #48]
     b70:	stp	x27, x28, [sp, #64]
     b74:	ldr	x23, [x20, #8]
     b78:	str	x30, [sp, #80]
     b7c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     b80:	ldr	x0, [sp, #336]
     b84:	ldrb	w1, [x0]
     b88:	ldrb	w0, [x0, #1]
     b8c:	add	w2, w1, w0
     b90:	cmp	w2, #0x1
     b94:	b.ls	bf8 <_ZL23handleFloatCastOverflowPvmN7__ubsan13ReportOptionsE+0xb8>  // b.plast
     b98:	cmp	w1, #0xff
     b9c:	b.eq	bf8 <_ZL23handleFloatCastOverflowPvmN7__ubsan13ReportOptionsE+0xb8>  // b.none
     ba0:	cmp	w0, #0xff
     ba4:	b.eq	bf8 <_ZL23handleFloatCastOverflowPvmN7__ubsan13ReportOptionsE+0xb8>  // b.none
     ba8:	add	x0, x19, #0xc
     bac:	mov	w1, #0xffffffff            	// #-1
     bb0:	ldxr	w26, [x0]
     bb4:	stxr	w2, w1, [x0]
     bb8:	cbnz	w2, bb0 <_ZL23handleFloatCastOverflowPvmN7__ubsan13ReportOptionsE+0x70>
     bbc:	dmb	ish
     bc0:	ldrb	w0, [x20]
     bc4:	ldr	w28, [x19, #8]
     bc8:	ldr	x27, [x19]
     bcc:	cbnz	w0, d38 <_ZL23handleFloatCastOverflowPvmN7__ubsan13ReportOptionsE+0x1f8>
     bd0:	cmn	w26, #0x1
     bd4:	b.ne	d1c <_ZL23handleFloatCastOverflowPvmN7__ubsan13ReportOptionsE+0x1dc>  // b.any
     bd8:	ldp	x19, x20, [sp]
     bdc:	ldp	x21, x22, [sp, #16]
     be0:	ldp	x23, x24, [sp, #32]
     be4:	ldp	x25, x26, [sp, #48]
     be8:	ldp	x27, x28, [sp, #64]
     bec:	ldr	x30, [sp, #80]
     bf0:	add	sp, sp, #0x300
     bf4:	ret
     bf8:	cbz	x23, d48 <_ZL23handleFloatCastOverflowPvmN7__ubsan13ReportOptionsE+0x208>
     bfc:	sub	x0, x23, #0x4
     c00:	bl	0 <_ZN7__ubsan21getSymbolizedLocationEm>
     c04:	ldp	x23, x9, [x19]
     c08:	mov	x25, x0
     c0c:	mov	x24, x0
     c10:	mov	w26, #0x0                   	// #0
     c14:	mov	w28, #0x0                   	// #0
     c18:	mov	x27, #0x0                   	// #0
     c1c:	mov	w8, #0x3                   	// #3
     c20:	str	w8, [sp, #216]
     c24:	add	x19, sp, #0x100
     c28:	str	x27, [sp, #224]
     c2c:	add	x2, sp, #0x70
     c30:	stp	w28, w26, [sp, #232]
     c34:	mov	x0, x19
     c38:	ldp	x6, x7, [sp, #216]
     c3c:	stp	x6, x7, [sp, #112]
     c40:	add	x1, sp, #0xa0
     c44:	ldp	x6, x7, [x20]
     c48:	mov	w3, #0x12                  	// #18
     c4c:	ldp	x4, x5, [sp, #232]
     c50:	stp	x4, x5, [sp, #128]
     c54:	ldr	x4, [x20, #16]
     c58:	str	w8, [sp, #100]
     c5c:	str	x9, [sp, #104]
     c60:	str	x24, [sp, #144]
     c64:	stp	x6, x7, [sp, #160]
     c68:	str	x4, [sp, #176]
     c6c:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
     c70:	ldr	w8, [sp, #100]
     c74:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
     c78:	add	x2, x2, #0x0
     c7c:	mov	x3, #0x1200000000          	// #77309411328
     c80:	add	x1, sp, #0xc8
     c84:	mov	x0, x22
     c88:	stp	x23, x21, [sp, #200]
     c8c:	str	w8, [sp, #336]
     c90:	str	x27, [sp, #344]
     c94:	str	w28, [sp, #352]
     c98:	str	w26, [sp, #356]
     c9c:	stp	x24, x3, [sp, #368]
     ca0:	str	x2, [sp, #384]
     ca4:	str	wzr, [sp, #656]
     ca8:	str	wzr, [sp, #664]
     cac:	str	xzr, [sp, #672]
     cb0:	str	xzr, [sp, #680]
     cb4:	str	wzr, [sp, #704]
     cb8:	str	xzr, [sp, #712]
     cbc:	str	xzr, [sp, #720]
     cc0:	str	xzr, [sp, #744]
     cc4:	str	wzr, [sp, #752]
     cc8:	bl	0 <_ZN7__ubsan4DiaglsERKNS_5ValueE>
     ccc:	mov	x1, x23
     cd0:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
     cd4:	ldr	x9, [sp, #104]
     cd8:	mov	x1, x9
     cdc:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
     ce0:	mov	x0, x22
     ce4:	bl	0 <_ZN7__ubsan4DiagD1Ev>
     ce8:	mov	x0, x19
     cec:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
     cf0:	cbz	x25, bd8 <_ZL23handleFloatCastOverflowPvmN7__ubsan13ReportOptionsE+0x98>
     cf4:	mov	x0, x25
     cf8:	bl	0 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>
     cfc:	ldp	x19, x20, [sp]
     d00:	ldp	x21, x22, [sp, #16]
     d04:	ldp	x23, x24, [sp, #32]
     d08:	ldp	x25, x26, [sp, #48]
     d0c:	ldp	x27, x28, [sp, #64]
     d10:	ldr	x30, [sp, #80]
     d14:	add	sp, sp, #0x300
     d18:	ret
     d1c:	mov	x1, x23
     d20:	mov	x2, x27
     d24:	mov	w0, #0x12                  	// #18
     d28:	bl	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
     d2c:	tst	w0, #0xff
     d30:	b.ne	bd8 <_ZL23handleFloatCastOverflowPvmN7__ubsan13ReportOptionsE+0x98>  // b.any
     d34:	nop
     d38:	mov	w8, #0x1                   	// #1
     d3c:	mov	x25, #0x0                   	// #0
     d40:	ldp	x23, x9, [x19, #16]
     d44:	b	c20 <_ZL23handleFloatCastOverflowPvmN7__ubsan13ReportOptionsE+0xe0>
     d48:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
     d4c:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
     d50:	add	x2, x2, #0x0
     d54:	add	x0, x0, #0x0
     d58:	mov	x4, #0x0                   	// #0
     d5c:	mov	x3, #0x0                   	// #0
     d60:	mov	w1, #0x2b                  	// #43
     d64:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000d68 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE>:
     d68:	sub	sp, sp, #0x2c0
     d6c:	stp	x25, x26, [sp, #48]
     d70:	mov	x25, x3
     d74:	stp	x19, x20, [sp]
     d78:	mov	x19, x0
     d7c:	add	x0, x0, #0xc
     d80:	stp	x21, x22, [sp, #16]
     d84:	stp	x23, x24, [sp, #32]
     d88:	ldrb	w24, [x3]
     d8c:	mov	w3, #0xffffffff            	// #-1
     d90:	ldr	x26, [x25, #8]
     d94:	str	x30, [sp, #72]
     d98:	ldxr	w21, [x0]
     d9c:	stxr	w4, w3, [x0]
     da0:	cbnz	w4, d98 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x30>
     da4:	dmb	ish
     da8:	ldr	x0, [x19, #24]
     dac:	stp	x1, x0, [sp, #168]
     db0:	ldr	w23, [x19, #8]
     db4:	ldr	x1, [x19, #16]
     db8:	str	x1, [sp, #160]
     dbc:	ldrh	w1, [x0]
     dc0:	str	x2, [sp, #184]
     dc4:	ldr	x22, [x19]
     dc8:	cbnz	w1, dd8 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x70>
     dcc:	ldrh	w0, [x0, #2]
     dd0:	tbnz	w0, #0, f4c <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x1e4>
     dd4:	nop
     dd8:	add	x20, sp, #0xb0
     ddc:	mov	x0, x20
     de0:	bl	0 <_ZNK7__ubsan5Value19getPositiveIntValueEv>
     de4:	ldr	x2, [x19, #16]
     de8:	ldrh	w3, [x2]
     dec:	cbnz	w3, 1168 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x400>
     df0:	ldrh	w2, [x2, #2]
     df4:	mov	w3, #0x1                   	// #1
     df8:	asr	w2, w2, #1
     dfc:	lsl	w2, w3, w2
     e00:	cbz	x1, f64 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x1fc>
     e04:	cbnz	w24, fc4 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x25c>
     e08:	str	x27, [sp, #64]
     e0c:	mov	w27, #0xd                   	// #13
     e10:	cmn	w21, #0x1
     e14:	b.eq	1148 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x3e0>  // b.none
     e18:	mov	x1, x26
     e1c:	mov	x2, x22
     e20:	mov	w0, w27
     e24:	bl	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
     e28:	tst	w0, #0xff
     e2c:	b.ne	1148 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x3e0>  // b.any
     e30:	mov	w0, #0x1                   	// #1
     e34:	str	w0, [sp, #272]
     e38:	str	x22, [sp, #280]
     e3c:	add	x24, sp, #0xc0
     e40:	str	w23, [sp, #288]
     e44:	mov	w3, w27
     e48:	str	w21, [sp, #292]
     e4c:	add	x2, sp, #0x50
     e50:	ldp	x6, x7, [sp, #272]
     e54:	stp	x6, x7, [sp, #80]
     e58:	add	x1, sp, #0x80
     e5c:	ldp	x6, x7, [x25]
     e60:	mov	x0, x24
     e64:	ldp	x4, x5, [sp, #288]
     e68:	stp	x4, x5, [sp, #96]
     e6c:	ldr	x4, [x25, #16]
     e70:	stp	x6, x7, [sp, #128]
     e74:	ldr	x8, [sp, #304]
     e78:	str	x8, [sp, #112]
     e7c:	str	x4, [sp, #144]
     e80:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
     e84:	cmp	w27, #0xd
     e88:	ldr	x27, [sp, #64]
     e8c:	b.eq	1018 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x2b0>  // b.none
     e90:	ldr	x0, [sp, #160]
     e94:	add	x26, sp, #0xa0
     e98:	ldrh	w1, [x0]
     e9c:	cbnz	w1, eb8 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x150>
     ea0:	ldrh	w0, [x0, #2]
     ea4:	add	x26, sp, #0xa0
     ea8:	tbz	w0, #0, eb8 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x150>
     eac:	mov	x0, x26
     eb0:	bl	0 <_ZNK7__ubsan5Value12getSIntValueEv>
     eb4:	tbnz	x1, #63, 118c <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x424>
     eb8:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
     ebc:	add	x2, x2, #0x0
     ec0:	mov	w4, #0x1                   	// #1
     ec4:	mov	x3, #0xc00000000           	// #51539607552
     ec8:	add	x25, sp, #0x110
     ecc:	mov	x1, x26
     ed0:	mov	x0, x25
     ed4:	str	w4, [sp, #272]
     ed8:	str	x22, [sp, #280]
     edc:	str	w23, [sp, #288]
     ee0:	str	w21, [sp, #292]
     ee4:	stp	x3, x2, [sp, #312]
     ee8:	str	wzr, [sp, #592]
     eec:	str	wzr, [sp, #600]
     ef0:	str	xzr, [sp, #608]
     ef4:	str	xzr, [sp, #616]
     ef8:	str	wzr, [sp, #640]
     efc:	str	xzr, [sp, #648]
     f00:	str	xzr, [sp, #656]
     f04:	str	xzr, [sp, #680]
     f08:	str	wzr, [sp, #688]
     f0c:	bl	0 <_ZN7__ubsan4DiaglsERKNS_5ValueE>
     f10:	mov	x1, x20
     f14:	bl	0 <_ZN7__ubsan4DiaglsERKNS_5ValueE>
     f18:	ldr	x1, [x19, #16]
     f1c:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
     f20:	mov	x0, x25
     f24:	bl	0 <_ZN7__ubsan4DiagD1Ev>
     f28:	mov	x0, x24
     f2c:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
     f30:	ldp	x19, x20, [sp]
     f34:	ldp	x21, x22, [sp, #16]
     f38:	ldp	x23, x24, [sp, #32]
     f3c:	ldp	x25, x26, [sp, #48]
     f40:	ldr	x30, [sp, #72]
     f44:	add	sp, sp, #0x2c0
     f48:	ret
     f4c:	add	x20, sp, #0xb0
     f50:	mov	x0, x20
     f54:	bl	0 <_ZNK7__ubsan5Value12getSIntValueEv>
     f58:	tbz	x1, #63, ddc <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x74>
     f5c:	cbz	w24, e08 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0xa0>
     f60:	b	fc4 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x25c>
     f64:	cmp	x2, x0
     f68:	b.ls	e04 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x9c>  // b.plast
     f6c:	cbz	w24, 11d0 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x468>
     f70:	str	w3, [sp, #272]
     f74:	add	x24, sp, #0xc0
     f78:	str	x22, [sp, #280]
     f7c:	mov	x0, x24
     f80:	str	w23, [sp, #288]
     f84:	add	x2, sp, #0x50
     f88:	str	w21, [sp, #292]
     f8c:	add	x1, sp, #0x80
     f90:	ldp	x6, x7, [sp, #272]
     f94:	stp	x6, x7, [sp, #80]
     f98:	mov	w3, #0xc                   	// #12
     f9c:	ldp	x6, x7, [x25]
     fa0:	ldp	x4, x5, [sp, #288]
     fa4:	stp	x4, x5, [sp, #96]
     fa8:	ldr	x4, [x25, #16]
     fac:	stp	x6, x7, [sp, #128]
     fb0:	ldr	x8, [sp, #304]
     fb4:	str	x8, [sp, #112]
     fb8:	str	x4, [sp, #144]
     fbc:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
     fc0:	b	e90 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x128>
     fc4:	mov	w0, #0x1                   	// #1
     fc8:	str	w0, [sp, #272]
     fcc:	str	x22, [sp, #280]
     fd0:	add	x24, sp, #0xc0
     fd4:	str	w23, [sp, #288]
     fd8:	add	x2, sp, #0x50
     fdc:	str	w21, [sp, #292]
     fe0:	add	x1, sp, #0x80
     fe4:	ldp	x6, x7, [sp, #272]
     fe8:	stp	x6, x7, [sp, #80]
     fec:	mov	x0, x24
     ff0:	ldp	x6, x7, [x25]
     ff4:	mov	w3, #0xd                   	// #13
     ff8:	ldp	x4, x5, [sp, #288]
     ffc:	stp	x4, x5, [sp, #96]
    1000:	ldr	x4, [x25, #16]
    1004:	stp	x6, x7, [sp, #128]
    1008:	ldr	x8, [sp, #304]
    100c:	str	x8, [sp, #112]
    1010:	str	x4, [sp, #144]
    1014:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
    1018:	ldr	x0, [sp, #176]
    101c:	ldrh	w1, [x0]
    1020:	cbnz	w1, 109c <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x334>
    1024:	ldrh	w0, [x0, #2]
    1028:	tbz	w0, #0, 109c <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x334>
    102c:	mov	x0, x20
    1030:	bl	0 <_ZNK7__ubsan5Value12getSIntValueEv>
    1034:	tbz	x1, #63, 109c <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x334>
    1038:	add	x19, sp, #0x110
    103c:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1040:	mov	x1, x20
    1044:	mov	x0, x19
    1048:	add	x2, x2, #0x0
    104c:	mov	w4, #0x1                   	// #1
    1050:	mov	x3, #0xd00000000           	// #55834574848
    1054:	str	w4, [sp, #272]
    1058:	str	x22, [sp, #280]
    105c:	str	w23, [sp, #288]
    1060:	str	w21, [sp, #292]
    1064:	stp	x3, x2, [sp, #312]
    1068:	str	wzr, [sp, #592]
    106c:	str	wzr, [sp, #600]
    1070:	str	xzr, [sp, #608]
    1074:	str	xzr, [sp, #616]
    1078:	str	wzr, [sp, #640]
    107c:	str	xzr, [sp, #648]
    1080:	str	xzr, [sp, #656]
    1084:	str	xzr, [sp, #680]
    1088:	str	wzr, [sp, #688]
    108c:	bl	0 <_ZN7__ubsan4DiaglsERKNS_5ValueE>
    1090:	mov	x0, x19
    1094:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    1098:	b	f28 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x1c0>
    109c:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    10a0:	add	x2, x2, #0x0
    10a4:	mov	x3, #0xd00000000           	// #55834574848
    10a8:	add	x25, sp, #0x110
    10ac:	mov	x1, x20
    10b0:	mov	x0, x25
    10b4:	mov	w20, #0x1                   	// #1
    10b8:	str	w20, [sp, #272]
    10bc:	str	x22, [sp, #280]
    10c0:	str	w23, [sp, #288]
    10c4:	str	w21, [sp, #292]
    10c8:	stp	x3, x2, [sp, #312]
    10cc:	str	wzr, [sp, #592]
    10d0:	str	wzr, [sp, #600]
    10d4:	str	xzr, [sp, #608]
    10d8:	str	xzr, [sp, #616]
    10dc:	str	wzr, [sp, #640]
    10e0:	str	xzr, [sp, #648]
    10e4:	str	xzr, [sp, #656]
    10e8:	str	xzr, [sp, #680]
    10ec:	str	wzr, [sp, #688]
    10f0:	bl	0 <_ZN7__ubsan4DiaglsERKNS_5ValueE>
    10f4:	ldr	x1, [x19, #16]
    10f8:	ldrh	w3, [x1]
    10fc:	cbnz	w3, 1168 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x400>
    1100:	ldrh	w4, [x1, #2]
    1104:	ldr	w3, [x0, #320]
    1108:	asr	w4, w4, #1
    110c:	cmp	w3, #0x8
    1110:	lsl	w20, w20, w4
    1114:	b.eq	11ac <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x444>  // b.none
    1118:	ubfiz	x4, x3, #5, #32
    111c:	add	w3, w3, #0x1
    1120:	add	x4, x4, #0x40
    1124:	str	w3, [x0, #320]
    1128:	add	x3, x0, x4
    112c:	mov	w5, #0x2                   	// #2
    1130:	str	w5, [x0, x4]
    1134:	stp	x20, xzr, [x3, #16]
    1138:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
    113c:	mov	x0, x25
    1140:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    1144:	b	f28 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x1c0>
    1148:	ldp	x19, x20, [sp]
    114c:	ldp	x21, x22, [sp, #16]
    1150:	ldp	x23, x24, [sp, #32]
    1154:	ldp	x25, x26, [sp, #48]
    1158:	ldr	x27, [sp, #64]
    115c:	ldr	x30, [sp, #72]
    1160:	add	sp, sp, #0x2c0
    1164:	ret
    1168:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    116c:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1170:	add	x2, x2, #0x0
    1174:	add	x0, x0, #0x0
    1178:	mov	x4, #0x0                   	// #0
    117c:	mov	x3, #0x0                   	// #0
    1180:	mov	w1, #0x7b                  	// #123
    1184:	str	x27, [sp, #64]
    1188:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    118c:	add	x19, sp, #0x110
    1190:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1194:	mov	x1, x26
    1198:	mov	x0, x19
    119c:	add	x2, x2, #0x0
    11a0:	mov	w4, #0x1                   	// #1
    11a4:	mov	x3, #0xc00000000           	// #51539607552
    11a8:	b	1054 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x2ec>
    11ac:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    11b0:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    11b4:	add	x2, x2, #0x0
    11b8:	add	x0, x0, #0x0
    11bc:	mov	x4, #0x0                   	// #0
    11c0:	mov	x3, #0x0                   	// #0
    11c4:	mov	w1, #0xbf                  	// #191
    11c8:	str	x27, [sp, #64]
    11cc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    11d0:	str	x27, [sp, #64]
    11d4:	mov	w27, #0xc                   	// #12
    11d8:	b	e10 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0xa8>
    11dc:	nop

00000000000011e0 <_ZL20handleInvalidBuiltinPN7__ubsan18InvalidBuiltinDataENS_13ReportOptionsE.constprop.0>:
    11e0:	sub	sp, sp, #0x290
    11e4:	mov	x4, x1
    11e8:	mov	w1, #0xffffffff            	// #-1
    11ec:	stp	x19, x20, [sp]
    11f0:	mov	x19, x0
    11f4:	add	x0, x0, #0xc
    11f8:	stp	x21, x22, [sp, #16]
    11fc:	stp	x23, x24, [sp, #32]
    1200:	str	x30, [sp, #48]
    1204:	ldxr	w22, [x0]
    1208:	stxr	w2, w1, [x0]
    120c:	cbnz	w2, 1204 <_ZL20handleInvalidBuiltinPN7__ubsan18InvalidBuiltinDataENS_13ReportOptionsE.constprop.0+0x24>
    1210:	dmb	ish
    1214:	ldr	x24, [x19]
    1218:	mov	w21, #0x1                   	// #1
    121c:	ldr	w23, [x19, #8]
    1220:	add	x20, sp, #0x90
    1224:	str	w21, [sp, #224]
    1228:	mov	x0, x20
    122c:	str	x24, [sp, #232]
    1230:	add	x2, sp, #0x40
    1234:	stp	w23, w22, [sp, #240]
    1238:	add	x1, sp, #0x70
    123c:	ldp	x6, x7, [sp, #224]
    1240:	stp	x6, x7, [sp, #64]
    1244:	mov	w3, #0x9                   	// #9
    1248:	ldp	x6, x7, [sp, #240]
    124c:	stp	x6, x7, [sp, #80]
    1250:	ldp	x6, x7, [x4]
    1254:	stp	x6, x7, [sp, #112]
    1258:	ldr	x4, [x4, #16]
    125c:	str	x4, [sp, #128]
    1260:	ldr	x5, [sp, #256]
    1264:	str	x5, [sp, #96]
    1268:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
    126c:	str	w21, [sp, #224]
    1270:	ldrb	w2, [x19, #16]
    1274:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1278:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    127c:	add	x0, x0, #0x0
    1280:	cmp	w2, #0x0
    1284:	add	x1, x1, #0x0
    1288:	csel	x1, x1, x0, eq  // eq = none
    128c:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1290:	add	x2, x2, #0x0
    1294:	mov	x3, #0x900000000           	// #38654705664
    1298:	add	x0, sp, #0xe0
    129c:	str	x24, [sp, #232]
    12a0:	stp	w23, w22, [sp, #240]
    12a4:	stp	x3, x2, [sp, #264]
    12a8:	str	wzr, [sp, #288]
    12ac:	str	x1, [sp, #304]
    12b0:	str	w21, [sp, #544]
    12b4:	str	wzr, [sp, #552]
    12b8:	str	xzr, [sp, #560]
    12bc:	str	xzr, [sp, #568]
    12c0:	str	wzr, [sp, #592]
    12c4:	str	xzr, [sp, #600]
    12c8:	str	xzr, [sp, #608]
    12cc:	str	xzr, [sp, #632]
    12d0:	str	wzr, [sp, #640]
    12d4:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    12d8:	mov	x0, x20
    12dc:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
    12e0:	ldp	x19, x20, [sp]
    12e4:	ldp	x21, x22, [sp, #16]
    12e8:	ldp	x23, x24, [sp, #32]
    12ec:	ldr	x30, [sp, #48]
    12f0:	add	sp, sp, #0x290
    12f4:	ret

00000000000012f8 <_ZL26handleFunctionTypeMismatchPN7__ubsan24FunctionTypeMismatchDataEmNS_13ReportOptionsE>:
    12f8:	sub	sp, sp, #0x2a0
    12fc:	stp	x19, x20, [sp]
    1300:	mov	x19, x0
    1304:	mov	x20, x2
    1308:	add	x0, x0, #0xc
    130c:	stp	x21, x22, [sp, #16]
    1310:	mov	x21, x1
    1314:	mov	w1, #0xffffffff            	// #-1
    1318:	stp	x23, x24, [sp, #32]
    131c:	stp	x25, x26, [sp, #48]
    1320:	stp	x27, x30, [sp, #64]
    1324:	ldxr	w23, [x0]
    1328:	stxr	w2, w1, [x0]
    132c:	cbnz	w2, 1324 <_ZL26handleFunctionTypeMismatchPN7__ubsan24FunctionTypeMismatchDataEmNS_13ReportOptionsE+0x2c>
    1330:	dmb	ish
    1334:	ldrb	w0, [x20]
    1338:	ldr	w27, [x19, #8]
    133c:	ldr	x26, [x19]
    1340:	cbnz	w0, 1380 <_ZL26handleFunctionTypeMismatchPN7__ubsan24FunctionTypeMismatchDataEmNS_13ReportOptionsE+0x88>
    1344:	cmp	w23, w1
    1348:	b.ne	1368 <_ZL26handleFunctionTypeMismatchPN7__ubsan24FunctionTypeMismatchDataEmNS_13ReportOptionsE+0x70>  // b.any
    134c:	ldp	x19, x20, [sp]
    1350:	ldp	x21, x22, [sp, #16]
    1354:	ldp	x23, x24, [sp, #32]
    1358:	ldp	x25, x26, [sp, #48]
    135c:	ldp	x27, x30, [sp, #64]
    1360:	add	sp, sp, #0x2a0
    1364:	ret
    1368:	ldr	x1, [x20, #8]
    136c:	mov	x2, x26
    1370:	mov	w0, #0x15                  	// #21
    1374:	bl	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
    1378:	tst	w0, #0xff
    137c:	b.ne	134c <_ZL26handleFunctionTypeMismatchPN7__ubsan24FunctionTypeMismatchDataEmNS_13ReportOptionsE+0x54>  // b.any
    1380:	mov	w25, #0x1                   	// #1
    1384:	str	w25, [sp, #240]
    1388:	str	x26, [sp, #248]
    138c:	add	x2, sp, #0x50
    1390:	str	w27, [sp, #256]
    1394:	add	x1, sp, #0x80
    1398:	str	w23, [sp, #260]
    139c:	add	x24, sp, #0xa0
    13a0:	ldp	x4, x5, [sp, #240]
    13a4:	stp	x4, x5, [sp, #80]
    13a8:	mov	w3, #0x15                  	// #21
    13ac:	ldp	x4, x5, [sp, #256]
    13b0:	stp	x4, x5, [sp, #96]
    13b4:	mov	x0, x24
    13b8:	ldr	x4, [sp, #272]
    13bc:	str	x4, [sp, #112]
    13c0:	ldp	x4, x5, [x20]
    13c4:	stp	x4, x5, [sp, #128]
    13c8:	add	x22, sp, #0xf0
    13cc:	ldr	x4, [x20, #16]
    13d0:	str	x4, [sp, #144]
    13d4:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
    13d8:	mov	x0, x21
    13dc:	bl	0 <_ZN7__ubsan21getSymbolizedLocationEm>
    13e0:	mov	x20, x0
    13e4:	adrp	x3, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    13e8:	ldr	x1, [x19, #16]
    13ec:	add	x3, x3, #0x0
    13f0:	ldr	x19, [x20, #40]
    13f4:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    13f8:	add	x2, x2, #0x0
    13fc:	mov	x4, #0x1500000000          	// #90194313216
    1400:	cmp	x19, #0x0
    1404:	mov	x0, x22
    1408:	csel	x19, x3, x19, eq  // eq = none
    140c:	str	w25, [sp, #240]
    1410:	str	x26, [sp, #248]
    1414:	str	w27, [sp, #256]
    1418:	str	w23, [sp, #260]
    141c:	stp	x4, x2, [sp, #280]
    1420:	str	wzr, [sp, #304]
    1424:	str	x19, [sp, #320]
    1428:	str	w25, [sp, #560]
    142c:	str	wzr, [sp, #568]
    1430:	str	xzr, [sp, #576]
    1434:	str	xzr, [sp, #584]
    1438:	str	wzr, [sp, #608]
    143c:	str	xzr, [sp, #616]
    1440:	str	xzr, [sp, #624]
    1444:	str	xzr, [sp, #648]
    1448:	str	wzr, [sp, #656]
    144c:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
    1450:	mov	x0, x22
    1454:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    1458:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    145c:	mov	x2, #0x1                   	// #1
    1460:	add	x1, x1, #0x0
    1464:	mov	w3, #0x3                   	// #3
    1468:	movk	x2, #0x15, lsl #32
    146c:	mov	x0, x22
    1470:	str	w3, [sp, #240]
    1474:	stp	xzr, xzr, [sp, #248]
    1478:	stp	x20, x2, [sp, #272]
    147c:	str	x1, [sp, #288]
    1480:	str	wzr, [sp, #304]
    1484:	str	x19, [sp, #320]
    1488:	str	w25, [sp, #560]
    148c:	str	wzr, [sp, #568]
    1490:	str	xzr, [sp, #576]
    1494:	str	xzr, [sp, #584]
    1498:	str	wzr, [sp, #608]
    149c:	str	xzr, [sp, #616]
    14a0:	str	xzr, [sp, #624]
    14a4:	str	xzr, [sp, #648]
    14a8:	str	wzr, [sp, #656]
    14ac:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    14b0:	mov	x0, x20
    14b4:	bl	0 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>
    14b8:	mov	x0, x24
    14bc:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
    14c0:	ldp	x19, x20, [sp]
    14c4:	ldp	x21, x22, [sp, #16]
    14c8:	ldp	x23, x24, [sp, #32]
    14cc:	ldp	x25, x26, [sp, #48]
    14d0:	ldp	x27, x30, [sp, #64]
    14d4:	add	sp, sp, #0x2a0
    14d8:	ret
    14dc:	nop

00000000000014e0 <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE>:
    14e0:	sub	sp, sp, #0x2e0
    14e4:	str	x2, [sp, #104]
    14e8:	ldrb	w2, [x5]
    14ec:	stp	x19, x20, [sp]
    14f0:	mov	x19, x0
    14f4:	mov	x20, x5
    14f8:	add	x0, x0, #0xc
    14fc:	stp	x21, x22, [sp, #16]
    1500:	mov	x21, x1
    1504:	stp	x23, x24, [sp, #32]
    1508:	stp	x25, x26, [sp, #48]
    150c:	stp	x27, x28, [sp, #64]
    1510:	stp	x3, x4, [sp, #192]
    1514:	mov	w3, #0xffffffff            	// #-1
    1518:	ldr	x1, [x5, #8]
    151c:	str	x30, [sp, #80]
    1520:	ldxr	w25, [x0]
    1524:	stxr	w4, w3, [x0]
    1528:	cbnz	w4, 1520 <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE+0x40>
    152c:	dmb	ish
    1530:	ldr	x0, [x19, #16]
    1534:	mov	w23, w2
    1538:	ldr	w28, [x19, #8]
    153c:	ldr	x27, [x19]
    1540:	ldrh	w3, [x0]
    1544:	cbnz	w3, 1584 <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE+0xa4>
    1548:	ldrh	w0, [x0, #2]
    154c:	tbz	w0, #0, 1584 <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE+0xa4>
    1550:	cbnz	w2, 16f8 <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE+0x218>
    1554:	mov	w23, #0x1                   	// #1
    1558:	mov	w26, #0x5                   	// #5
    155c:	cmn	w25, #0x1
    1560:	b.ne	16dc <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE+0x1fc>  // b.any
    1564:	ldp	x19, x20, [sp]
    1568:	ldp	x21, x22, [sp, #16]
    156c:	ldp	x23, x24, [sp, #32]
    1570:	ldp	x25, x26, [sp, #48]
    1574:	ldp	x27, x28, [sp, #64]
    1578:	ldr	x30, [sp, #80]
    157c:	add	sp, sp, #0x2e0
    1580:	ret
    1584:	mov	w26, #0x6                   	// #6
    1588:	cbz	w2, 155c <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE+0x7c>
    158c:	adrp	x0, 0 <_ZN7__ubsan11ubsan_flagsE>
    1590:	ldr	x0, [x0]
    1594:	ldrb	w23, [x0, #17]
    1598:	cbnz	w23, 1564 <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE+0x84>
    159c:	mov	w9, #0x1                   	// #1
    15a0:	str	w9, [sp, #304]
    15a4:	str	x27, [sp, #312]
    15a8:	add	x22, sp, #0xe0
    15ac:	str	w28, [sp, #320]
    15b0:	mov	x0, x22
    15b4:	str	w25, [sp, #324]
    15b8:	mov	w3, w26
    15bc:	ldp	x6, x7, [sp, #304]
    15c0:	stp	x6, x7, [sp, #112]
    15c4:	add	x2, sp, #0x70
    15c8:	ldp	x4, x5, [sp, #320]
    15cc:	add	x1, sp, #0xa0
    15d0:	ldr	x6, [x20, #16]
    15d4:	stp	x4, x5, [sp, #128]
    15d8:	add	x24, sp, #0x130
    15dc:	ldp	x4, x5, [x20]
    15e0:	stp	x4, x5, [sp, #160]
    15e4:	ldr	x10, [sp, #336]
    15e8:	str	x10, [sp, #144]
    15ec:	str	x6, [sp, #176]
    15f0:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
    15f4:	str	x27, [sp, #312]
    15f8:	ldr	x4, [x19, #16]
    15fc:	stp	x4, x21, [sp, #208]
    1600:	add	x4, sp, #0x150
    1604:	cmp	w23, #0x0
    1608:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    160c:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1610:	add	x0, x0, #0x0
    1614:	add	x2, x2, #0x0
    1618:	mov	w9, #0x1                   	// #1
    161c:	csel	x2, x2, x0, ne  // ne = any
    1620:	adrp	x3, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1624:	add	x3, x3, #0x0
    1628:	str	w9, [sp, #304]
    162c:	stp	w28, w25, [x4, #-16]
    1630:	add	x1, sp, #0xd0
    1634:	stp	wzr, w26, [x4, #8]
    1638:	mov	x0, x24
    163c:	str	x3, [sp, #352]
    1640:	str	wzr, [sp, #368]
    1644:	str	x2, [sp, #384]
    1648:	str	w9, [sp, #624]
    164c:	str	wzr, [sp, #632]
    1650:	str	xzr, [sp, #640]
    1654:	str	xzr, [sp, #648]
    1658:	str	wzr, [sp, #672]
    165c:	str	xzr, [sp, #680]
    1660:	str	xzr, [sp, #688]
    1664:	str	xzr, [sp, #712]
    1668:	str	wzr, [sp, #720]
    166c:	bl	0 <_ZN7__ubsan4DiaglsERKNS_5ValueE>
    1670:	ldr	w1, [x0, #320]
    1674:	cmp	w1, #0x8
    1678:	b.eq	1700 <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE+0x220>  // b.none
    167c:	ubfiz	x3, x1, #5, #32
    1680:	add	w1, w1, #0x1
    1684:	add	x3, x3, #0x40
    1688:	str	w1, [x0, #320]
    168c:	add	x4, x0, x3
    1690:	add	x1, sp, #0xc0
    1694:	ldr	x2, [sp, #104]
    1698:	str	wzr, [x0, x3]
    169c:	str	x2, [x4, #16]
    16a0:	bl	0 <_ZN7__ubsan4DiaglsERKNS_5ValueE>
    16a4:	ldr	x1, [x19, #16]
    16a8:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
    16ac:	mov	x0, x24
    16b0:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    16b4:	mov	x0, x22
    16b8:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
    16bc:	ldp	x19, x20, [sp]
    16c0:	ldp	x21, x22, [sp, #16]
    16c4:	ldp	x23, x24, [sp, #32]
    16c8:	ldp	x25, x26, [sp, #48]
    16cc:	ldp	x27, x28, [sp, #64]
    16d0:	ldr	x30, [sp, #80]
    16d4:	add	sp, sp, #0x2e0
    16d8:	ret
    16dc:	mov	x2, x27
    16e0:	mov	w0, w26
    16e4:	bl	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
    16e8:	tst	w0, #0xff
    16ec:	b.ne	1564 <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE+0x84>  // b.any
    16f0:	cbz	w23, 158c <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE+0xac>
    16f4:	b	159c <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE+0xbc>
    16f8:	mov	w26, #0x5                   	// #5
    16fc:	b	159c <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE+0xbc>
    1700:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1704:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1708:	add	x2, x2, #0x0
    170c:	add	x0, x0, #0x0
    1710:	mov	x4, #0x0                   	// #0
    1714:	mov	x3, #0x0                   	// #0
    1718:	mov	w1, #0xbf                  	// #191
    171c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000001720 <_ZL16handleNonNullArgPN7__ubsan14NonNullArgDataENS_13ReportOptionsEb>:
    1720:	sub	sp, sp, #0x2a0
    1724:	stp	x19, x20, [sp]
    1728:	mov	x19, x0
    172c:	add	x0, x0, #0xc
    1730:	stp	x23, x24, [sp, #32]
    1734:	and	w23, w2, #0xff
    1738:	mov	x20, x1
    173c:	mov	w1, #0xffffffff            	// #-1
    1740:	stp	x21, x22, [sp, #16]
    1744:	stp	x25, x26, [sp, #48]
    1748:	str	x30, [sp, #72]
    174c:	ldxr	w21, [x0]
    1750:	stxr	w2, w1, [x0]
    1754:	cbnz	w2, 174c <_ZL16handleNonNullArgPN7__ubsan14NonNullArgDataENS_13ReportOptionsEb+0x2c>
    1758:	dmb	ish
    175c:	ldrb	w0, [x20]
    1760:	ldr	w26, [x19, #8]
    1764:	ldr	x25, [x19]
    1768:	cbnz	w0, 17a8 <_ZL16handleNonNullArgPN7__ubsan14NonNullArgDataENS_13ReportOptionsEb+0x88>
    176c:	cmp	w21, w1
    1770:	b.ne	1790 <_ZL16handleNonNullArgPN7__ubsan14NonNullArgDataENS_13ReportOptionsEb+0x70>  // b.any
    1774:	ldp	x19, x20, [sp]
    1778:	ldp	x21, x22, [sp, #16]
    177c:	ldp	x23, x24, [sp, #32]
    1780:	ldp	x25, x26, [sp, #48]
    1784:	ldr	x30, [sp, #72]
    1788:	add	sp, sp, #0x2a0
    178c:	ret
    1790:	ldr	x1, [x20, #8]
    1794:	mov	x2, x25
    1798:	mov	w0, #0x17                  	// #23
    179c:	bl	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
    17a0:	tst	w0, #0xff
    17a4:	b.ne	1774 <_ZL16handleNonNullArgPN7__ubsan14NonNullArgDataENS_13ReportOptionsEb+0x54>  // b.any
    17a8:	mov	w22, #0x1                   	// #1
    17ac:	str	w22, [sp, #240]
    17b0:	str	x25, [sp, #248]
    17b4:	add	x2, sp, #0x50
    17b8:	str	w26, [sp, #256]
    17bc:	add	x1, sp, #0x80
    17c0:	str	w21, [sp, #260]
    17c4:	mov	w3, #0x17                  	// #23
    17c8:	ldp	x6, x7, [sp, #240]
    17cc:	stp	x6, x7, [sp, #80]
    17d0:	add	x24, sp, #0xf0
    17d4:	ldp	x6, x7, [x20]
    17d8:	str	x27, [sp, #64]
    17dc:	ldp	x4, x5, [sp, #256]
    17e0:	stp	x4, x5, [sp, #96]
    17e4:	add	x27, sp, #0xa0
    17e8:	ldr	x4, [x20, #16]
    17ec:	mov	x0, x27
    17f0:	ldr	x8, [sp, #272]
    17f4:	str	x8, [sp, #112]
    17f8:	stp	x6, x7, [sp, #128]
    17fc:	str	x4, [sp, #144]
    1800:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
    1804:	ldrsw	x2, [x19, #32]
    1808:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    180c:	add	x1, x1, #0x0
    1810:	mov	x4, #0x1700000000          	// #98784247808
    1814:	mov	w3, #0x2                   	// #2
    1818:	mov	x0, x24
    181c:	str	w22, [sp, #240]
    1820:	str	x25, [sp, #248]
    1824:	str	w26, [sp, #256]
    1828:	str	w21, [sp, #260]
    182c:	stp	x4, x1, [sp, #280]
    1830:	str	w3, [sp, #304]
    1834:	stp	x2, xzr, [sp, #320]
    1838:	str	w22, [sp, #560]
    183c:	str	wzr, [sp, #568]
    1840:	str	xzr, [sp, #576]
    1844:	str	xzr, [sp, #584]
    1848:	str	wzr, [sp, #608]
    184c:	str	xzr, [sp, #616]
    1850:	str	xzr, [sp, #624]
    1854:	str	xzr, [sp, #648]
    1858:	str	wzr, [sp, #656]
    185c:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    1860:	ldr	x2, [x19, #16]
    1864:	cbz	x2, 18d4 <_ZL16handleNonNullArgPN7__ubsan14NonNullArgDataENS_13ReportOptionsEb+0x1b4>
    1868:	cmp	w23, #0x0
    186c:	adrp	x3, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1870:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1874:	add	x3, x3, #0x0
    1878:	add	x1, x1, #0x0
    187c:	mov	x4, #0x1                   	// #1
    1880:	ldr	x5, [x19, #24]
    1884:	csel	x1, x1, x3, ne  // ne = any
    1888:	adrp	x3, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    188c:	add	x3, x3, #0x0
    1890:	movk	x4, #0x17, lsl #32
    1894:	mov	x0, x24
    1898:	str	w22, [sp, #240]
    189c:	stp	x2, x5, [sp, #248]
    18a0:	stp	x4, x3, [sp, #280]
    18a4:	str	wzr, [sp, #304]
    18a8:	str	x1, [sp, #320]
    18ac:	str	w22, [sp, #560]
    18b0:	str	wzr, [sp, #568]
    18b4:	str	xzr, [sp, #576]
    18b8:	str	xzr, [sp, #584]
    18bc:	str	wzr, [sp, #608]
    18c0:	str	xzr, [sp, #616]
    18c4:	str	xzr, [sp, #624]
    18c8:	str	xzr, [sp, #648]
    18cc:	str	wzr, [sp, #656]
    18d0:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    18d4:	mov	x0, x27
    18d8:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
    18dc:	ldp	x19, x20, [sp]
    18e0:	ldp	x21, x22, [sp, #16]
    18e4:	ldp	x23, x24, [sp, #32]
    18e8:	ldp	x25, x26, [sp, #48]
    18ec:	ldr	x27, [sp, #64]
    18f0:	ldr	x30, [sp, #72]
    18f4:	add	sp, sp, #0x2a0
    18f8:	ret
    18fc:	nop

0000000000001900 <_ZL19handleNonNullReturnPN7__ubsan17NonNullReturnDataEPNS_14SourceLocationENS_13ReportOptionsEb>:
    1900:	sub	sp, sp, #0x2a0
    1904:	stp	x19, x20, [sp]
    1908:	stp	x21, x22, [sp, #16]
    190c:	str	x30, [sp, #72]
    1910:	cbz	x1, 1ad0 <_ZL19handleNonNullReturnPN7__ubsan17NonNullReturnDataEPNS_14SourceLocationENS_13ReportOptionsEb+0x1d0>
    1914:	mov	x19, x2
    1918:	and	w22, w3, #0xff
    191c:	add	x2, x1, #0xc
    1920:	stp	x25, x26, [sp, #48]
    1924:	mov	x26, x0
    1928:	mov	w0, #0xffffffff            	// #-1
    192c:	ldxr	w20, [x2]
    1930:	stxr	w3, w0, [x2]
    1934:	cbnz	w3, 192c <_ZL19handleNonNullReturnPN7__ubsan17NonNullReturnDataEPNS_14SourceLocationENS_13ReportOptionsEb+0x2c>
    1938:	dmb	ish
    193c:	ldrb	w0, [x19]
    1940:	ldr	w25, [x1, #8]
    1944:	ldr	x21, [x1]
    1948:	cbnz	w0, 1988 <_ZL19handleNonNullReturnPN7__ubsan17NonNullReturnDataEPNS_14SourceLocationENS_13ReportOptionsEb+0x88>
    194c:	cmn	w20, #0x1
    1950:	b.ne	196c <_ZL19handleNonNullReturnPN7__ubsan17NonNullReturnDataEPNS_14SourceLocationENS_13ReportOptionsEb+0x6c>  // b.any
    1954:	ldp	x19, x20, [sp]
    1958:	ldp	x21, x22, [sp, #16]
    195c:	ldp	x25, x26, [sp, #48]
    1960:	ldr	x30, [sp, #72]
    1964:	add	sp, sp, #0x2a0
    1968:	ret
    196c:	ldr	x1, [x19, #8]
    1970:	mov	x2, x21
    1974:	mov	w0, #0x16                  	// #22
    1978:	bl	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
    197c:	tst	w0, #0xff
    1980:	b.ne	1954 <_ZL19handleNonNullReturnPN7__ubsan17NonNullReturnDataEPNS_14SourceLocationENS_13ReportOptionsEb+0x54>  // b.any
    1984:	nop
    1988:	stp	x23, x24, [sp, #32]
    198c:	mov	w23, #0x1                   	// #1
    1990:	mov	w3, #0x16                  	// #22
    1994:	str	w23, [sp, #240]
    1998:	add	x2, sp, #0x50
    199c:	str	x21, [sp, #248]
    19a0:	add	x1, sp, #0x80
    19a4:	str	w25, [sp, #256]
    19a8:	add	x24, sp, #0xf0
    19ac:	str	w20, [sp, #260]
    19b0:	ldp	x6, x7, [sp, #240]
    19b4:	stp	x6, x7, [sp, #80]
    19b8:	ldp	x6, x7, [x19]
    19bc:	str	x27, [sp, #64]
    19c0:	ldp	x4, x5, [sp, #256]
    19c4:	stp	x4, x5, [sp, #96]
    19c8:	add	x27, sp, #0xa0
    19cc:	ldr	x4, [x19, #16]
    19d0:	mov	x0, x27
    19d4:	ldr	x8, [sp, #272]
    19d8:	str	x8, [sp, #112]
    19dc:	stp	x6, x7, [sp, #128]
    19e0:	str	x4, [sp, #144]
    19e4:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
    19e8:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    19ec:	add	x1, x1, #0x0
    19f0:	mov	x2, #0x1600000000          	// #94489280512
    19f4:	mov	x0, x24
    19f8:	str	w23, [sp, #240]
    19fc:	str	x21, [sp, #248]
    1a00:	str	w25, [sp, #256]
    1a04:	str	w20, [sp, #260]
    1a08:	stp	x2, x1, [sp, #280]
    1a0c:	str	wzr, [sp, #560]
    1a10:	str	wzr, [sp, #568]
    1a14:	str	xzr, [sp, #576]
    1a18:	str	xzr, [sp, #584]
    1a1c:	str	wzr, [sp, #608]
    1a20:	str	xzr, [sp, #616]
    1a24:	str	xzr, [sp, #624]
    1a28:	str	xzr, [sp, #648]
    1a2c:	str	wzr, [sp, #656]
    1a30:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    1a34:	ldr	x3, [x26]
    1a38:	cbz	x3, 1aa8 <_ZL19handleNonNullReturnPN7__ubsan17NonNullReturnDataEPNS_14SourceLocationENS_13ReportOptionsEb+0x1a8>
    1a3c:	cmp	w22, #0x0
    1a40:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1a44:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1a48:	add	x2, x2, #0x0
    1a4c:	add	x1, x1, #0x0
    1a50:	mov	x4, #0x1                   	// #1
    1a54:	ldr	x5, [x26, #8]
    1a58:	csel	x1, x1, x2, ne  // ne = any
    1a5c:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1a60:	add	x2, x2, #0x0
    1a64:	movk	x4, #0x16, lsl #32
    1a68:	mov	x0, x24
    1a6c:	str	w23, [sp, #240]
    1a70:	stp	x3, x5, [sp, #248]
    1a74:	stp	x4, x2, [sp, #280]
    1a78:	str	wzr, [sp, #304]
    1a7c:	str	x1, [sp, #320]
    1a80:	str	w23, [sp, #560]
    1a84:	str	wzr, [sp, #568]
    1a88:	str	xzr, [sp, #576]
    1a8c:	str	xzr, [sp, #584]
    1a90:	str	wzr, [sp, #608]
    1a94:	str	xzr, [sp, #616]
    1a98:	str	xzr, [sp, #624]
    1a9c:	str	xzr, [sp, #648]
    1aa0:	str	wzr, [sp, #656]
    1aa4:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    1aa8:	mov	x0, x27
    1aac:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
    1ab0:	ldp	x19, x20, [sp]
    1ab4:	ldp	x21, x22, [sp, #16]
    1ab8:	ldp	x23, x24, [sp, #32]
    1abc:	ldp	x25, x26, [sp, #48]
    1ac0:	ldr	x27, [sp, #64]
    1ac4:	ldr	x30, [sp, #72]
    1ac8:	add	sp, sp, #0x2a0
    1acc:	ret
    1ad0:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1ad4:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1ad8:	add	x2, x2, #0x0
    1adc:	add	x0, x0, #0x0
    1ae0:	mov	x4, #0x0                   	// #0
    1ae4:	mov	x3, #0x0                   	// #0
    1ae8:	mov	w1, #0x23f                 	// #575
    1aec:	stp	x23, x24, [sp, #32]
    1af0:	stp	x25, x26, [sp, #48]
    1af4:	str	x27, [sp, #64]
    1af8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1afc:	nop

0000000000001b00 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm>:
    1b00:	sub	sp, sp, #0x2f0
    1b04:	stp	x19, x20, [sp]
    1b08:	mov	x19, x1
    1b0c:	add	x1, x0, #0xc
    1b10:	stp	x21, x22, [sp, #16]
    1b14:	stp	x25, x26, [sp, #48]
    1b18:	stp	x27, x28, [sp, #64]
    1b1c:	str	x30, [sp, #80]
    1b20:	stp	x2, x3, [sp, #96]
    1b24:	mov	w2, #0xffffffff            	// #-1
    1b28:	ldxr	w20, [x1]
    1b2c:	stxr	w3, w2, [x1]
    1b30:	cbnz	w3, 1b28 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0x28>
    1b34:	dmb	ish
    1b38:	ldp	x26, x28, [x0, #16]
    1b3c:	mov	w21, #0x0                   	// #0
    1b40:	ldr	w11, [x0, #8]
    1b44:	ldr	x10, [x0]
    1b48:	ldrh	w1, [x26]
    1b4c:	cbnz	w1, 1b58 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0x58>
    1b50:	ldrh	w8, [x26, #2]
    1b54:	and	w21, w8, #0x1
    1b58:	ldrh	w1, [x28]
    1b5c:	mov	w22, #0x0                   	// #0
    1b60:	cbnz	w1, 1b6c <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0x6c>
    1b64:	ldrh	w22, [x28, #2]
    1b68:	and	w22, w22, #0x1
    1b6c:	ldrb	w0, [x0, #32]
    1b70:	mov	w25, #0xa                   	// #10
    1b74:	cmp	w0, #0x1
    1b78:	b.eq	1b90 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0x90>  // b.none
    1b7c:	cmp	w0, #0x2
    1b80:	mov	w25, #0xb                   	// #11
    1b84:	b.eq	1b90 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0x90>  // b.none
    1b88:	mov	w25, #0x0                   	// #0
    1b8c:	cbz	w0, 1de0 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0x2e0>
    1b90:	ldrb	w0, [x19]
    1b94:	cbnz	w0, 1be4 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0xe4>
    1b98:	str	w11, [sp, #116]
    1b9c:	cmn	w20, #0x1
    1ba0:	b.ne	1bc0 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0xc0>  // b.any
    1ba4:	ldp	x19, x20, [sp]
    1ba8:	ldp	x21, x22, [sp, #16]
    1bac:	ldp	x25, x26, [sp, #48]
    1bb0:	ldp	x27, x28, [sp, #64]
    1bb4:	ldr	x30, [sp, #80]
    1bb8:	add	sp, sp, #0x2f0
    1bbc:	ret
    1bc0:	ldr	x1, [x19, #8]
    1bc4:	mov	x2, x10
    1bc8:	mov	w0, w25
    1bcc:	str	x10, [sp, #120]
    1bd0:	bl	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
    1bd4:	tst	w0, #0xff
    1bd8:	ldr	w11, [sp, #116]
    1bdc:	ldr	x10, [sp, #120]
    1be0:	b.ne	1ba4 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0xa4>  // b.any
    1be4:	stp	x23, x24, [sp, #32]
    1be8:	mov	w23, #0x1                   	// #1
    1bec:	add	x24, sp, #0xf0
    1bf0:	str	w23, [sp, #320]
    1bf4:	mov	w3, w25
    1bf8:	str	x10, [sp, #328]
    1bfc:	add	x2, sp, #0x80
    1c00:	str	w11, [sp, #336]
    1c04:	mov	x0, x24
    1c08:	str	w20, [sp, #340]
    1c0c:	add	x1, sp, #0xb0
    1c10:	ldp	x6, x7, [sp, #320]
    1c14:	stp	x6, x7, [sp, #128]
    1c18:	add	x27, sp, #0x140
    1c1c:	ldp	x4, x5, [sp, #336]
    1c20:	stp	x4, x5, [sp, #144]
    1c24:	ldp	x4, x5, [x19]
    1c28:	str	w11, [sp, #116]
    1c2c:	ldr	x6, [sp, #352]
    1c30:	str	x6, [sp, #160]
    1c34:	ldr	x6, [x19, #16]
    1c38:	str	x10, [sp, #120]
    1c3c:	stp	x4, x5, [sp, #176]
    1c40:	str	x6, [sp, #192]
    1c44:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
    1c48:	add	x3, sp, #0x160
    1c4c:	ldr	w11, [sp, #116]
    1c50:	ldr	x10, [sp, #120]
    1c54:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1c58:	add	x2, x2, #0x0
    1c5c:	str	w23, [sp, #320]
    1c60:	str	x10, [sp, #328]
    1c64:	mov	x1, x26
    1c68:	stp	w11, w20, [x3, #-16]
    1c6c:	mov	x0, x27
    1c70:	stp	wzr, w25, [x3, #8]
    1c74:	str	x2, [sp, #368]
    1c78:	str	wzr, [sp, #640]
    1c7c:	str	wzr, [sp, #648]
    1c80:	str	xzr, [sp, #656]
    1c84:	str	xzr, [sp, #664]
    1c88:	str	wzr, [sp, #688]
    1c8c:	str	xzr, [sp, #696]
    1c90:	str	xzr, [sp, #704]
    1c94:	str	xzr, [sp, #728]
    1c98:	str	wzr, [sp, #736]
    1c9c:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
    1ca0:	ldr	x2, [sp, #96]
    1ca4:	add	x1, sp, #0xd0
    1ca8:	stp	x26, x2, [sp, #208]
    1cac:	bl	0 <_ZN7__ubsan4DiaglsERKNS_5ValueE>
    1cb0:	ldrh	w1, [x26]
    1cb4:	cbnz	w1, 1df4 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0x2f4>
    1cb8:	ldrh	w1, [x26, #2]
    1cbc:	ldr	w4, [x0, #320]
    1cc0:	asr	w1, w1, #1
    1cc4:	cmp	w4, #0x8
    1cc8:	lsl	w5, w23, w1
    1ccc:	b.eq	1e14 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0x314>  // b.none
    1cd0:	ubfiz	x3, x4, #5, #32
    1cd4:	add	w1, w4, #0x1
    1cd8:	add	x3, x3, #0x40
    1cdc:	str	w1, [x0, #320]
    1ce0:	add	x6, x0, x3
    1ce4:	mov	w19, #0x2                   	// #2
    1ce8:	cmp	w21, #0x0
    1cec:	adrp	x20, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1cf0:	str	w19, [x0, x3]
    1cf4:	add	x20, x20, #0x0
    1cf8:	stp	x5, xzr, [x6, #16]
    1cfc:	adrp	x25, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1d00:	add	x25, x25, #0x0
    1d04:	csel	x5, x25, x20, ne  // ne = any
    1d08:	cmp	w1, #0x8
    1d0c:	b.eq	1e14 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0x314>  // b.none
    1d10:	ubfiz	x1, x1, #5, #32
    1d14:	add	w4, w4, #0x2
    1d18:	add	x3, x1, #0x40
    1d1c:	str	w4, [x0, #320]
    1d20:	add	x4, x0, x3
    1d24:	mov	x1, x28
    1d28:	str	wzr, [x0, x3]
    1d2c:	str	x5, [x4, #16]
    1d30:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
    1d34:	ldr	x2, [sp, #104]
    1d38:	add	x1, sp, #0xe0
    1d3c:	stp	x28, x2, [sp, #224]
    1d40:	bl	0 <_ZN7__ubsan4DiaglsERKNS_5ValueE>
    1d44:	mov	x1, x0
    1d48:	ldrh	w2, [x28]
    1d4c:	cbnz	w2, 1df4 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0x2f4>
    1d50:	ldrh	w0, [x28, #2]
    1d54:	ldr	w3, [x1, #320]
    1d58:	asr	w0, w0, #1
    1d5c:	cmp	w3, #0x8
    1d60:	lsl	w23, w23, w0
    1d64:	b.eq	1e14 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0x314>  // b.none
    1d68:	ubfiz	x2, x3, #5, #32
    1d6c:	add	w0, w3, #0x1
    1d70:	add	x2, x2, #0x40
    1d74:	str	w0, [x1, #320]
    1d78:	add	x5, x1, x2
    1d7c:	cmp	w22, #0x0
    1d80:	csel	x4, x25, x20, ne  // ne = any
    1d84:	cmp	w0, #0x8
    1d88:	str	w19, [x1, x2]
    1d8c:	stp	x23, xzr, [x5, #16]
    1d90:	b.eq	1e14 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0x314>  // b.none
    1d94:	ubfiz	x0, x0, #5, #32
    1d98:	add	w3, w3, #0x2
    1d9c:	add	x2, x0, #0x40
    1da0:	str	w3, [x1, #320]
    1da4:	add	x3, x1, x2
    1da8:	mov	x0, x27
    1dac:	str	wzr, [x1, x2]
    1db0:	str	x4, [x3, #16]
    1db4:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    1db8:	mov	x0, x24
    1dbc:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
    1dc0:	ldp	x19, x20, [sp]
    1dc4:	ldp	x21, x22, [sp, #16]
    1dc8:	ldp	x23, x24, [sp, #32]
    1dcc:	ldp	x25, x26, [sp, #48]
    1dd0:	ldp	x27, x28, [sp, #64]
    1dd4:	ldr	x30, [sp, #80]
    1dd8:	add	sp, sp, #0x2f0
    1ddc:	ret
    1de0:	cmp	w22, #0x0
    1de4:	ccmp	w21, #0x0, #0x0, eq  // eq = none
    1de8:	cset	w25, ne  // ne = any
    1dec:	add	w25, w25, #0xa
    1df0:	b	1b90 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0x90>
    1df4:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1df8:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1dfc:	add	x2, x2, #0x0
    1e00:	add	x0, x0, #0x0
    1e04:	mov	x4, #0x0                   	// #0
    1e08:	mov	x3, #0x0                   	// #0
    1e0c:	mov	w1, #0x7b                  	// #123
    1e10:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1e14:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1e18:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1e1c:	add	x2, x2, #0x0
    1e20:	add	x0, x0, #0x0
    1e24:	mov	x4, #0x0                   	// #0
    1e28:	mov	x3, #0x0                   	// #0
    1e2c:	mov	w1, #0xbf                  	// #191
    1e30:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1e34:	nop

0000000000001e38 <_ZL17handleCFIBadIcallPN7__ubsan16CFICheckFailDataEmNS_13ReportOptionsE>:
    1e38:	sub	sp, sp, #0x2c0
    1e3c:	stp	x19, x20, [sp]
    1e40:	mov	x19, x0
    1e44:	ldrb	w0, [x0]
    1e48:	stp	x21, x22, [sp, #16]
    1e4c:	sub	w0, w0, #0x4
    1e50:	stp	x23, x24, [sp, #32]
    1e54:	and	w0, w0, #0xff
    1e58:	cmp	w0, #0x1
    1e5c:	stp	x25, x26, [sp, #48]
    1e60:	stp	x27, x28, [sp, #64]
    1e64:	ldr	x26, [x2, #8]
    1e68:	str	x30, [sp, #80]
    1e6c:	b.hi	2158 <_ZL17handleCFIBadIcallPN7__ubsan16CFICheckFailDataEmNS_13ReportOptionsE+0x320>  // b.pmore
    1e70:	mov	x28, x2
    1e74:	add	x0, x19, #0x14
    1e78:	mov	x20, x1
    1e7c:	mov	w1, #0xffffffff            	// #-1
    1e80:	ldxr	w21, [x0]
    1e84:	stxr	w2, w1, [x0]
    1e88:	cbnz	w2, 1e80 <_ZL17handleCFIBadIcallPN7__ubsan16CFICheckFailDataEmNS_13ReportOptionsE+0x48>
    1e8c:	dmb	ish
    1e90:	ldrb	w0, [x28]
    1e94:	ldr	w24, [x19, #16]
    1e98:	ldr	x23, [x19, #8]
    1e9c:	cbnz	w0, 1ee0 <_ZL17handleCFIBadIcallPN7__ubsan16CFICheckFailDataEmNS_13ReportOptionsE+0xa8>
    1ea0:	cmp	w21, w1
    1ea4:	b.ne	1ec8 <_ZL17handleCFIBadIcallPN7__ubsan16CFICheckFailDataEmNS_13ReportOptionsE+0x90>  // b.any
    1ea8:	ldp	x19, x20, [sp]
    1eac:	ldp	x21, x22, [sp, #16]
    1eb0:	ldp	x23, x24, [sp, #32]
    1eb4:	ldp	x25, x26, [sp, #48]
    1eb8:	ldp	x27, x28, [sp, #64]
    1ebc:	ldr	x30, [sp, #80]
    1ec0:	add	sp, sp, #0x2c0
    1ec4:	ret
    1ec8:	mov	x2, x23
    1ecc:	mov	x1, x26
    1ed0:	mov	w0, #0x19                  	// #25
    1ed4:	bl	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
    1ed8:	tst	w0, #0xff
    1edc:	b.ne	1ea8 <_ZL17handleCFIBadIcallPN7__ubsan16CFICheckFailDataEmNS_13ReportOptionsE+0x70>  // b.any
    1ee0:	mov	w25, #0x1                   	// #1
    1ee4:	str	w25, [sp, #272]
    1ee8:	str	x23, [sp, #280]
    1eec:	add	x27, sp, #0xc0
    1ef0:	str	w24, [sp, #288]
    1ef4:	mov	x0, x27
    1ef8:	str	w21, [sp, #292]
    1efc:	add	x2, sp, #0x60
    1f00:	ldp	x6, x7, [sp, #272]
    1f04:	stp	x6, x7, [sp, #96]
    1f08:	add	x1, sp, #0x90
    1f0c:	ldp	x6, x7, [x28]
    1f10:	mov	w3, #0x19                  	// #25
    1f14:	ldp	x4, x5, [sp, #288]
    1f18:	stp	x4, x5, [sp, #112]
    1f1c:	add	x22, sp, #0x110
    1f20:	ldr	x4, [x28, #16]
    1f24:	stp	x6, x7, [sp, #144]
    1f28:	ldr	x8, [sp, #304]
    1f2c:	str	x8, [sp, #128]
    1f30:	str	x4, [sp, #160]
    1f34:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
    1f38:	str	w25, [sp, #272]
    1f3c:	ldrb	w2, [x19]
    1f40:	mov	x3, #0x1900000000          	// #107374182400
    1f44:	ldr	x1, [x19, #24]
    1f48:	cmp	w2, #0x5
    1f4c:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1f50:	add	x2, x2, #0x0
    1f54:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1f58:	adrp	x19, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1f5c:	add	x0, x0, #0x0
    1f60:	add	x19, x19, #0x0
    1f64:	csel	x19, x19, x0, eq  // eq = none
    1f68:	mov	x0, x22
    1f6c:	str	x23, [sp, #280]
    1f70:	str	w24, [sp, #288]
    1f74:	str	w21, [sp, #292]
    1f78:	stp	x3, x2, [sp, #312]
    1f7c:	str	wzr, [sp, #592]
    1f80:	str	wzr, [sp, #600]
    1f84:	str	xzr, [sp, #608]
    1f88:	str	xzr, [sp, #616]
    1f8c:	str	wzr, [sp, #640]
    1f90:	str	xzr, [sp, #648]
    1f94:	str	xzr, [sp, #656]
    1f98:	str	xzr, [sp, #680]
    1f9c:	str	wzr, [sp, #688]
    1fa0:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
    1fa4:	mov	x1, x0
    1fa8:	ldr	w0, [x0, #320]
    1fac:	cmp	w0, #0x8
    1fb0:	b.eq	20cc <_ZL17handleCFIBadIcallPN7__ubsan16CFICheckFailDataEmNS_13ReportOptionsE+0x294>  // b.none
    1fb4:	ubfiz	x2, x0, #5, #32
    1fb8:	add	w0, w0, #0x1
    1fbc:	add	x2, x2, #0x40
    1fc0:	str	w0, [x1, #320]
    1fc4:	add	x3, x1, x2
    1fc8:	mov	x0, x22
    1fcc:	str	wzr, [x1, x2]
    1fd0:	str	x19, [x3, #16]
    1fd4:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    1fd8:	mov	x0, x20
    1fdc:	bl	0 <_ZN7__ubsan21getSymbolizedLocationEm>
    1fe0:	mov	x19, x0
    1fe4:	adrp	x20, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1fe8:	add	x20, x20, #0x0
    1fec:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1ff0:	mov	x3, #0x1                   	// #1
    1ff4:	add	x2, x2, #0x0
    1ff8:	ldr	x1, [x19, #40]
    1ffc:	mov	w4, #0x3                   	// #3
    2000:	movk	x3, #0x19, lsl #32
    2004:	mov	x0, x22
    2008:	cmp	x1, #0x0
    200c:	str	w4, [sp, #272]
    2010:	csel	x1, x20, x1, eq  // eq = none
    2014:	stp	xzr, xzr, [sp, #280]
    2018:	stp	x19, x3, [sp, #304]
    201c:	str	x2, [sp, #320]
    2020:	str	wzr, [sp, #336]
    2024:	str	x1, [sp, #352]
    2028:	str	w25, [sp, #592]
    202c:	str	wzr, [sp, #600]
    2030:	str	xzr, [sp, #608]
    2034:	str	xzr, [sp, #616]
    2038:	str	wzr, [sp, #640]
    203c:	str	xzr, [sp, #648]
    2040:	str	xzr, [sp, #656]
    2044:	str	xzr, [sp, #680]
    2048:	str	wzr, [sp, #688]
    204c:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    2050:	ldr	x25, [x19, #16]
    2054:	cmp	x25, #0x0
    2058:	csel	x25, x20, x25, eq  // eq = none
    205c:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
    2060:	str	xzr, [sp, #184]
    2064:	mov	x1, x26
    2068:	mov	x3, x22
    206c:	add	x2, sp, #0xb8
    2070:	mov	x26, x20
    2074:	bl	0 <_ZN11__sanitizer10Symbolizer27GetModuleNameAndOffsetForPCEmPPKcPm>
    2078:	tst	w0, #0xff
    207c:	b.eq	208c <_ZL17handleCFIBadIcallPN7__ubsan16CFICheckFailDataEmNS_13ReportOptionsE+0x254>  // b.none
    2080:	ldr	x26, [sp, #184]
    2084:	cmp	x26, #0x0
    2088:	csel	x26, x20, x26, eq  // eq = none
    208c:	mov	x1, x25
    2090:	mov	x0, x26
    2094:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
    2098:	cbnz	w0, 20ec <_ZL17handleCFIBadIcallPN7__ubsan16CFICheckFailDataEmNS_13ReportOptionsE+0x2b4>
    209c:	mov	x0, x19
    20a0:	bl	0 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>
    20a4:	mov	x0, x27
    20a8:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
    20ac:	ldp	x19, x20, [sp]
    20b0:	ldp	x21, x22, [sp, #16]
    20b4:	ldp	x23, x24, [sp, #32]
    20b8:	ldp	x25, x26, [sp, #48]
    20bc:	ldp	x27, x28, [sp, #64]
    20c0:	ldr	x30, [sp, #80]
    20c4:	add	sp, sp, #0x2c0
    20c8:	ret
    20cc:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    20d0:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    20d4:	add	x2, x2, #0x0
    20d8:	add	x0, x0, #0x0
    20dc:	mov	x4, #0x0                   	// #0
    20e0:	mov	x3, #0x0                   	// #0
    20e4:	mov	w1, #0xbf                  	// #191
    20e8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    20ec:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    20f0:	mov	x3, #0x1                   	// #1
    20f4:	add	x1, x1, #0x0
    20f8:	mov	w4, #0x1                   	// #1
    20fc:	movk	x3, #0x19, lsl #32
    2100:	mov	w2, #0x2                   	// #2
    2104:	mov	x0, x22
    2108:	str	w4, [sp, #272]
    210c:	str	x23, [sp, #280]
    2110:	str	w24, [sp, #288]
    2114:	str	w21, [sp, #292]
    2118:	stp	x3, x1, [sp, #312]
    211c:	str	wzr, [sp, #336]
    2120:	str	x26, [sp, #352]
    2124:	str	wzr, [sp, #368]
    2128:	str	x25, [sp, #384]
    212c:	str	w2, [sp, #592]
    2130:	str	wzr, [sp, #600]
    2134:	str	xzr, [sp, #608]
    2138:	str	xzr, [sp, #616]
    213c:	str	wzr, [sp, #640]
    2140:	str	xzr, [sp, #648]
    2144:	str	xzr, [sp, #656]
    2148:	str	xzr, [sp, #680]
    214c:	str	wzr, [sp, #688]
    2150:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    2154:	b	209c <_ZL17handleCFIBadIcallPN7__ubsan16CFICheckFailDataEmNS_13ReportOptionsE+0x264>
    2158:	bl	0 <_ZN11__sanitizer3DieEv>
    215c:	nop

0000000000002160 <_ZL25handlePointerOverflowImplPN7__ubsan19PointerOverflowDataEmmNS_13ReportOptionsE>:
    2160:	sub	sp, sp, #0x2a0
    2164:	stp	x19, x20, [sp]
    2168:	mov	x20, x2
    216c:	add	x2, x0, #0xc
    2170:	stp	x23, x24, [sp, #32]
    2174:	mov	x24, x1
    2178:	mov	x19, x3
    217c:	mov	w3, #0xffffffff            	// #-1
    2180:	stp	x21, x22, [sp, #16]
    2184:	str	x30, [sp, #72]
    2188:	ldxr	w21, [x2]
    218c:	stxr	w1, w3, [x2]
    2190:	cbnz	w1, 2188 <_ZL25handlePointerOverflowImplPN7__ubsan19PointerOverflowDataEmmNS_13ReportOptionsE+0x28>
    2194:	dmb	ish
    2198:	ldrb	w2, [x19]
    219c:	ldr	w23, [x0, #8]
    21a0:	ldr	x22, [x0]
    21a4:	cbnz	w2, 21e0 <_ZL25handlePointerOverflowImplPN7__ubsan19PointerOverflowDataEmmNS_13ReportOptionsE+0x80>
    21a8:	cmp	w21, w3
    21ac:	b.ne	21c8 <_ZL25handlePointerOverflowImplPN7__ubsan19PointerOverflowDataEmmNS_13ReportOptionsE+0x68>  // b.any
    21b0:	ldp	x19, x20, [sp]
    21b4:	ldp	x21, x22, [sp, #16]
    21b8:	ldp	x23, x24, [sp, #32]
    21bc:	ldr	x30, [sp, #72]
    21c0:	add	sp, sp, #0x2a0
    21c4:	ret
    21c8:	ldr	x1, [x19, #8]
    21cc:	mov	x2, x22
    21d0:	mov	w0, #0x2                   	// #2
    21d4:	bl	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
    21d8:	tst	w0, #0xff
    21dc:	b.ne	21b0 <_ZL25handlePointerOverflowImplPN7__ubsan19PointerOverflowDataEmmNS_13ReportOptionsE+0x50>  // b.any
    21e0:	stp	x25, x26, [sp, #48]
    21e4:	mov	w25, #0x1                   	// #1
    21e8:	add	x26, sp, #0xa0
    21ec:	str	w25, [sp, #240]
    21f0:	mov	x0, x26
    21f4:	str	x22, [sp, #248]
    21f8:	add	x2, sp, #0x50
    21fc:	str	w23, [sp, #256]
    2200:	add	x1, sp, #0x80
    2204:	str	w21, [sp, #260]
    2208:	mov	w3, #0x2                   	// #2
    220c:	ldp	x6, x7, [sp, #240]
    2210:	stp	x6, x7, [sp, #80]
    2214:	ldp	x6, x7, [x19]
    2218:	str	x27, [sp, #64]
    221c:	ldp	x4, x5, [sp, #256]
    2220:	stp	x4, x5, [sp, #96]
    2224:	add	x27, sp, #0xf0
    2228:	ldr	x4, [x19, #16]
    222c:	stp	x6, x7, [sp, #128]
    2230:	ldr	x8, [sp, #272]
    2234:	str	x8, [sp, #112]
    2238:	str	x4, [sp, #144]
    223c:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
    2240:	mvn	x0, x24
    2244:	mvn	x2, x20
    2248:	lsr	x0, x0, #63
    224c:	cmp	x0, x2, lsr #63
    2250:	mov	x0, x27
    2254:	b.ne	2270 <_ZL25handlePointerOverflowImplPN7__ubsan19PointerOverflowDataEmmNS_13ReportOptionsE+0x110>  // b.any
    2258:	cmp	x24, x20
    225c:	b.ls	22f8 <_ZL25handlePointerOverflowImplPN7__ubsan19PointerOverflowDataEmmNS_13ReportOptionsE+0x198>  // b.plast
    2260:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    2264:	mov	x4, #0x200000000           	// #8589934592
    2268:	add	x1, x1, #0x0
    226c:	b	227c <_ZL25handlePointerOverflowImplPN7__ubsan19PointerOverflowDataEmmNS_13ReportOptionsE+0x11c>
    2270:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    2274:	add	x1, x1, #0x0
    2278:	mov	x4, #0x200000000           	// #8589934592
    227c:	mov	w2, #0x5                   	// #5
    2280:	mov	w3, #0x2                   	// #2
    2284:	str	w25, [sp, #240]
    2288:	str	x22, [sp, #248]
    228c:	str	w23, [sp, #256]
    2290:	str	w21, [sp, #260]
    2294:	stp	x4, x1, [sp, #280]
    2298:	str	w2, [sp, #304]
    229c:	str	x24, [sp, #320]
    22a0:	str	w2, [sp, #336]
    22a4:	str	x20, [sp, #352]
    22a8:	str	w3, [sp, #560]
    22ac:	str	wzr, [sp, #568]
    22b0:	str	xzr, [sp, #576]
    22b4:	str	xzr, [sp, #584]
    22b8:	str	wzr, [sp, #608]
    22bc:	str	xzr, [sp, #616]
    22c0:	str	xzr, [sp, #624]
    22c4:	str	xzr, [sp, #648]
    22c8:	str	wzr, [sp, #656]
    22cc:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    22d0:	mov	x0, x26
    22d4:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
    22d8:	ldp	x19, x20, [sp]
    22dc:	ldp	x21, x22, [sp, #16]
    22e0:	ldp	x23, x24, [sp, #32]
    22e4:	ldp	x25, x26, [sp, #48]
    22e8:	ldr	x27, [sp, #64]
    22ec:	ldr	x30, [sp, #72]
    22f0:	add	sp, sp, #0x2a0
    22f4:	ret
    22f8:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    22fc:	mov	x4, #0x200000000           	// #8589934592
    2300:	add	x1, x1, #0x0
    2304:	b	227c <_ZL25handlePointerOverflowImplPN7__ubsan19PointerOverflowDataEmmNS_13ReportOptionsE+0x11c>

0000000000002308 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE>:
    2308:	sub	sp, sp, #0x2f0
    230c:	mov	w3, #0xffffffff            	// #-1
    2310:	stp	x19, x20, [sp]
    2314:	mov	x19, x0
    2318:	mov	x20, x1
    231c:	add	x0, x0, #0xc
    2320:	stp	x25, x26, [sp, #48]
    2324:	mov	x25, x2
    2328:	stp	x21, x22, [sp, #16]
    232c:	stp	x23, x24, [sp, #32]
    2330:	stp	x27, x28, [sp, #64]
    2334:	ldr	x24, [x2, #8]
    2338:	str	x30, [sp, #80]
    233c:	ldxr	w28, [x0]
    2340:	stxr	w1, w3, [x0]
    2344:	cbnz	w1, 233c <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0x34>
    2348:	dmb	ish
    234c:	ldrb	w3, [x19, #24]
    2350:	mov	x0, #0x1                   	// #1
    2354:	ldr	w22, [x19, #8]
    2358:	mov	w21, w0
    235c:	lsl	x27, x0, x3
    2360:	ldr	x23, [x19]
    2364:	cbz	x20, 2378 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0x70>
    2368:	sub	x0, x27, #0x1
    236c:	tst	x0, x20
    2370:	cset	w21, eq  // eq = none
    2374:	add	w21, w21, #0x3
    2378:	ldrb	w0, [x25]
    237c:	cbnz	w0, 23c8 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0xc0>
    2380:	cmn	w28, #0x1
    2384:	b.ne	23a8 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0xa0>  // b.any
    2388:	ldp	x19, x20, [sp]
    238c:	ldp	x21, x22, [sp, #16]
    2390:	ldp	x23, x24, [sp, #32]
    2394:	ldp	x25, x26, [sp, #48]
    2398:	ldp	x27, x28, [sp, #64]
    239c:	ldr	x30, [sp, #80]
    23a0:	add	sp, sp, #0x2f0
    23a4:	ret
    23a8:	mov	x2, x23
    23ac:	mov	x1, x24
    23b0:	mov	w0, w21
    23b4:	bl	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
    23b8:	tst	w0, #0xff
    23bc:	b.ne	2388 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0x80>  // b.any
    23c0:	ldr	x0, [x19]
    23c4:	b	23cc <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0xc4>
    23c8:	mov	x0, x23
    23cc:	str	xzr, [sp, #104]
    23d0:	mov	w26, #0x1                   	// #1
    23d4:	cbz	x0, 2638 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0x330>
    23d8:	str	w26, [sp, #200]
    23dc:	add	x24, sp, #0xf0
    23e0:	str	x23, [sp, #208]
    23e4:	mov	x0, x24
    23e8:	stp	w22, w28, [sp, #216]
    23ec:	mov	w3, w21
    23f0:	ldp	x6, x7, [sp, #200]
    23f4:	stp	x6, x7, [sp, #112]
    23f8:	add	x2, sp, #0x70
    23fc:	ldp	x6, x7, [x25]
    2400:	add	x1, sp, #0xa0
    2404:	ldp	x4, x5, [sp, #216]
    2408:	stp	x4, x5, [sp, #128]
    240c:	ldr	x4, [x25, #16]
    2410:	stp	x6, x7, [sp, #160]
    2414:	ldr	x5, [sp, #96]
    2418:	str	x5, [sp, #144]
    241c:	str	x4, [sp, #176]
    2420:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
    2424:	cmp	w21, #0x3
    2428:	b.eq	2574 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0x26c>  // b.none
    242c:	cmp	w21, #0x4
    2430:	b.ne	24f8 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0x1f0>  // b.any
    2434:	ldrb	w3, [x19, #25]
    2438:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    243c:	add	x0, x0, #0x0
    2440:	add	x25, sp, #0x140
    2444:	ldr	x1, [x19, #16]
    2448:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    244c:	ldr	x5, [x0, x3, lsl #3]
    2450:	mov	x0, x25
    2454:	ldr	x7, [sp, #96]
    2458:	add	x2, x2, #0x0
    245c:	mov	x6, #0x400000000           	// #17179869184
    2460:	mov	w3, #0x2                   	// #2
    2464:	mov	w4, #0x5                   	// #5
    2468:	str	w26, [sp, #320]
    246c:	str	x23, [sp, #328]
    2470:	str	w22, [sp, #336]
    2474:	str	w28, [sp, #340]
    2478:	stp	x7, x6, [sp, #352]
    247c:	str	x2, [sp, #368]
    2480:	str	wzr, [sp, #384]
    2484:	str	x5, [sp, #400]
    2488:	str	w4, [sp, #416]
    248c:	str	x20, [sp, #432]
    2490:	str	w3, [sp, #640]
    2494:	str	wzr, [sp, #648]
    2498:	str	xzr, [sp, #656]
    249c:	str	xzr, [sp, #664]
    24a0:	str	wzr, [sp, #688]
    24a4:	str	xzr, [sp, #696]
    24a8:	str	xzr, [sp, #704]
    24ac:	str	xzr, [sp, #728]
    24b0:	str	wzr, [sp, #736]
    24b4:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
    24b8:	mov	x0, x25
    24bc:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    24c0:	cbnz	x20, 25e0 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0x2d8>
    24c4:	mov	x0, x24
    24c8:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
    24cc:	ldr	x0, [sp, #104]
    24d0:	cbz	x0, 2388 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0x80>
    24d4:	bl	0 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>
    24d8:	ldp	x19, x20, [sp]
    24dc:	ldp	x21, x22, [sp, #16]
    24e0:	ldp	x23, x24, [sp, #32]
    24e4:	ldp	x25, x26, [sp, #48]
    24e8:	ldp	x27, x28, [sp, #64]
    24ec:	ldr	x30, [sp, #80]
    24f0:	add	sp, sp, #0x2f0
    24f4:	ret
    24f8:	cmp	w21, #0x1
    24fc:	b.eq	2520 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0x218>  // b.none
    2500:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    2504:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    2508:	add	x2, x2, #0x0
    250c:	add	x0, x0, #0x0
    2510:	mov	x4, #0x0                   	// #0
    2514:	mov	x3, #0x0                   	// #0
    2518:	mov	w1, #0x58                  	// #88
    251c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    2520:	ldrb	w3, [x19, #25]
    2524:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    2528:	add	x0, x0, #0x0
    252c:	add	x25, sp, #0x140
    2530:	ldr	x5, [sp, #96]
    2534:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    2538:	ldr	x3, [x0, x3, lsl #3]
    253c:	add	x2, x2, #0x0
    2540:	mov	x4, #0x100000000           	// #4294967296
    2544:	mov	x0, x25
    2548:	str	w26, [sp, #320]
    254c:	str	x23, [sp, #328]
    2550:	str	w22, [sp, #336]
    2554:	str	w28, [sp, #340]
    2558:	stp	x5, x4, [sp, #352]
    255c:	str	x2, [sp, #368]
    2560:	str	wzr, [sp, #384]
    2564:	str	x3, [sp, #400]
    2568:	ldr	x1, [x19, #16]
    256c:	str	w21, [sp, #640]
    2570:	b	2494 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0x18c>
    2574:	ldrb	w3, [x19, #25]
    2578:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    257c:	add	x0, x0, #0x0
    2580:	add	x25, sp, #0x140
    2584:	ldr	x7, [sp, #96]
    2588:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    258c:	ldr	x5, [x0, x3, lsl #3]
    2590:	add	x2, x2, #0x0
    2594:	mov	x6, #0x300000000           	// #12884901888
    2598:	mov	w4, #0x5                   	// #5
    259c:	mov	w3, #0x2                   	// #2
    25a0:	mov	x0, x25
    25a4:	str	w26, [sp, #320]
    25a8:	str	x23, [sp, #328]
    25ac:	str	w22, [sp, #336]
    25b0:	str	w28, [sp, #340]
    25b4:	stp	x7, x6, [sp, #352]
    25b8:	str	x2, [sp, #368]
    25bc:	str	wzr, [sp, #384]
    25c0:	str	x5, [sp, #400]
    25c4:	str	w4, [sp, #416]
    25c8:	str	x20, [sp, #432]
    25cc:	str	w3, [sp, #448]
    25d0:	stp	x27, xzr, [sp, #464]
    25d4:	ldr	x1, [x19, #16]
    25d8:	str	w21, [sp, #640]
    25dc:	b	2494 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0x18c>
    25e0:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    25e4:	add	x1, x1, #0x0
    25e8:	mov	w3, #0x2                   	// #2
    25ec:	mov	w2, #0x1                   	// #1
    25f0:	mov	x0, x25
    25f4:	str	w3, [sp, #320]
    25f8:	stp	xzr, xzr, [sp, #328]
    25fc:	str	x20, [sp, #344]
    2600:	str	w2, [sp, #360]
    2604:	str	w21, [sp, #364]
    2608:	str	x1, [sp, #368]
    260c:	str	wzr, [sp, #640]
    2610:	str	wzr, [sp, #648]
    2614:	str	xzr, [sp, #656]
    2618:	str	xzr, [sp, #664]
    261c:	str	wzr, [sp, #688]
    2620:	str	xzr, [sp, #696]
    2624:	str	xzr, [sp, #704]
    2628:	str	xzr, [sp, #728]
    262c:	str	wzr, [sp, #736]
    2630:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    2634:	b	24c4 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0x1bc>
    2638:	cbz	x24, 265c <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0x354>
    263c:	sub	x0, x24, #0x4
    2640:	mov	x23, #0x0                   	// #0
    2644:	bl	0 <_ZN7__ubsan21getSymbolizedLocationEm>
    2648:	mov	w28, #0x0                   	// #0
    264c:	mov	w22, #0x0                   	// #0
    2650:	mov	w26, #0x3                   	// #3
    2654:	stp	x0, x0, [sp, #96]
    2658:	b	23d8 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0xd0>
    265c:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    2660:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    2664:	add	x2, x2, #0x0
    2668:	add	x0, x0, #0x0
    266c:	mov	x4, #0x0                   	// #0
    2670:	mov	x3, #0x0                   	// #0
    2674:	mov	w1, #0x2b                  	// #43
    2678:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    267c:	nop

0000000000002680 <_ZN7__ubsan12ignoreReportENS_14SourceLocationENS_13ReportOptionsENS_9ErrorTypeE>:
    2680:	mov	x4, x2
    2684:	mov	x2, x0
    2688:	ldrb	w0, [x4]
    268c:	cbnz	w0, 26b0 <_ZN7__ubsan12ignoreReportENS_14SourceLocationENS_13ReportOptionsENS_9ErrorTypeE+0x30>
    2690:	lsr	x1, x1, #32
    2694:	mov	w0, #0x1                   	// #1
    2698:	cmn	w1, #0x1
    269c:	b.ne	26a4 <_ZN7__ubsan12ignoreReportENS_14SourceLocationENS_13ReportOptionsENS_9ErrorTypeE+0x24>  // b.any
    26a0:	ret
    26a4:	ldr	x1, [x4, #8]
    26a8:	mov	w0, w3
    26ac:	b	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
    26b0:	mov	w0, #0x0                   	// #0
    26b4:	ret

00000000000026b8 <__ubsan_handle_type_mismatch_v1>:
    26b8:	stp	x29, x30, [sp, #-80]!
    26bc:	mov	x29, sp
    26c0:	add	x2, x29, #0x10
    26c4:	stp	xzr, x30, [x29, #56]
    26c8:	ldp	x4, x5, [x29, #56]
    26cc:	stp	x4, x5, [x29, #16]
    26d0:	str	x29, [x29, #32]
    26d4:	bl	2308 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE>
    26d8:	ldp	x29, x30, [sp], #80
    26dc:	ret

00000000000026e0 <__ubsan_handle_type_mismatch_v1_abort>:
    26e0:	stp	x29, x30, [sp, #-80]!
    26e4:	mov	w3, #0x1                   	// #1
    26e8:	mov	x29, sp
    26ec:	add	x2, x29, #0x10
    26f0:	strb	w3, [x29, #56]
    26f4:	stur	wzr, [x29, #57]
    26f8:	sturh	wzr, [x29, #61]
    26fc:	strb	wzr, [x29, #63]
    2700:	str	x30, [x29, #64]
    2704:	str	x29, [x29, #32]
    2708:	ldp	x4, x5, [x29, #56]
    270c:	stp	x4, x5, [x29, #16]
    2710:	bl	2308 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE>
    2714:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002718 <__ubsan_handle_add_overflow>:
    2718:	stp	x29, x30, [sp, #-80]!
    271c:	mov	x4, x2
    2720:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    2724:	mov	x29, sp
    2728:	ldr	x3, [x0, #16]
    272c:	add	x5, x29, #0x10
    2730:	stp	xzr, x30, [x29, #56]
    2734:	add	x2, x2, #0x0
    2738:	ldp	x6, x7, [x29, #56]
    273c:	stp	x6, x7, [x29, #16]
    2740:	str	x29, [x29, #32]
    2744:	bl	14e0 <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE>
    2748:	ldp	x29, x30, [sp], #80
    274c:	ret

0000000000002750 <__ubsan_handle_add_overflow_abort>:
    2750:	stp	x29, x30, [sp, #-80]!
    2754:	mov	w6, #0x1                   	// #1
    2758:	mov	x4, x2
    275c:	mov	x29, sp
    2760:	ldr	x3, [x0, #16]
    2764:	add	x5, x29, #0x10
    2768:	strb	w6, [x29, #56]
    276c:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    2770:	stur	wzr, [x29, #57]
    2774:	add	x2, x2, #0x0
    2778:	sturh	wzr, [x29, #61]
    277c:	strb	wzr, [x29, #63]
    2780:	str	x30, [x29, #64]
    2784:	str	x29, [x29, #32]
    2788:	ldp	x6, x7, [x29, #56]
    278c:	stp	x6, x7, [x29, #16]
    2790:	bl	14e0 <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE>
    2794:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002798 <__ubsan_handle_sub_overflow>:
    2798:	stp	x29, x30, [sp, #-80]!
    279c:	mov	x4, x2
    27a0:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    27a4:	mov	x29, sp
    27a8:	ldr	x3, [x0, #16]
    27ac:	add	x5, x29, #0x10
    27b0:	stp	xzr, x30, [x29, #56]
    27b4:	add	x2, x2, #0x0
    27b8:	ldp	x6, x7, [x29, #56]
    27bc:	stp	x6, x7, [x29, #16]
    27c0:	str	x29, [x29, #32]
    27c4:	bl	14e0 <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE>
    27c8:	ldp	x29, x30, [sp], #80
    27cc:	ret

00000000000027d0 <__ubsan_handle_sub_overflow_abort>:
    27d0:	stp	x29, x30, [sp, #-80]!
    27d4:	mov	w6, #0x1                   	// #1
    27d8:	mov	x4, x2
    27dc:	mov	x29, sp
    27e0:	ldr	x3, [x0, #16]
    27e4:	add	x5, x29, #0x10
    27e8:	strb	w6, [x29, #56]
    27ec:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    27f0:	stur	wzr, [x29, #57]
    27f4:	add	x2, x2, #0x0
    27f8:	sturh	wzr, [x29, #61]
    27fc:	strb	wzr, [x29, #63]
    2800:	str	x30, [x29, #64]
    2804:	str	x29, [x29, #32]
    2808:	ldp	x6, x7, [x29, #56]
    280c:	stp	x6, x7, [x29, #16]
    2810:	bl	14e0 <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE>
    2814:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002818 <__ubsan_handle_mul_overflow>:
    2818:	stp	x29, x30, [sp, #-80]!
    281c:	mov	x4, x2
    2820:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    2824:	mov	x29, sp
    2828:	ldr	x3, [x0, #16]
    282c:	add	x5, x29, #0x10
    2830:	stp	xzr, x30, [x29, #56]
    2834:	add	x2, x2, #0x0
    2838:	ldp	x6, x7, [x29, #56]
    283c:	stp	x6, x7, [x29, #16]
    2840:	str	x29, [x29, #32]
    2844:	bl	14e0 <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE>
    2848:	ldp	x29, x30, [sp], #80
    284c:	ret

0000000000002850 <__ubsan_handle_mul_overflow_abort>:
    2850:	stp	x29, x30, [sp, #-80]!
    2854:	mov	w6, #0x1                   	// #1
    2858:	mov	x4, x2
    285c:	mov	x29, sp
    2860:	ldr	x3, [x0, #16]
    2864:	add	x5, x29, #0x10
    2868:	strb	w6, [x29, #56]
    286c:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    2870:	stur	wzr, [x29, #57]
    2874:	add	x2, x2, #0x0
    2878:	sturh	wzr, [x29, #61]
    287c:	strb	wzr, [x29, #63]
    2880:	str	x30, [x29, #64]
    2884:	str	x29, [x29, #32]
    2888:	ldp	x6, x7, [x29, #56]
    288c:	stp	x6, x7, [x29, #16]
    2890:	bl	14e0 <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE>
    2894:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002898 <__ubsan_handle_negate_overflow>:
    2898:	stp	x29, x30, [sp, #-80]!
    289c:	mov	x29, sp
    28a0:	add	x2, x29, #0x10
    28a4:	stp	xzr, x30, [x29, #56]
    28a8:	ldp	x4, x5, [x29, #56]
    28ac:	stp	x4, x5, [x29, #16]
    28b0:	str	x29, [x29, #32]
    28b4:	bl	0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    28b8:	ldp	x29, x30, [sp], #80
    28bc:	ret

00000000000028c0 <__ubsan_handle_negate_overflow_abort>:
    28c0:	stp	x29, x30, [sp, #-80]!
    28c4:	mov	w3, #0x1                   	// #1
    28c8:	mov	x29, sp
    28cc:	add	x2, x29, #0x10
    28d0:	strb	w3, [x29, #56]
    28d4:	stur	wzr, [x29, #57]
    28d8:	sturh	wzr, [x29, #61]
    28dc:	strb	wzr, [x29, #63]
    28e0:	str	x30, [x29, #64]
    28e4:	str	x29, [x29, #32]
    28e8:	ldp	x4, x5, [x29, #56]
    28ec:	stp	x4, x5, [x29, #16]
    28f0:	bl	0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    28f4:	bl	0 <_ZN11__sanitizer3DieEv>

00000000000028f8 <__ubsan_handle_divrem_overflow>:
    28f8:	stp	x29, x30, [sp, #-80]!
    28fc:	mov	x29, sp
    2900:	add	x3, x29, #0x10
    2904:	stp	xzr, x30, [x29, #56]
    2908:	ldp	x4, x5, [x29, #56]
    290c:	stp	x4, x5, [x29, #16]
    2910:	str	x29, [x29, #32]
    2914:	bl	510 <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE>
    2918:	ldp	x29, x30, [sp], #80
    291c:	ret

0000000000002920 <__ubsan_handle_divrem_overflow_abort>:
    2920:	stp	x29, x30, [sp, #-80]!
    2924:	mov	w4, #0x1                   	// #1
    2928:	mov	x29, sp
    292c:	add	x3, x29, #0x10
    2930:	strb	w4, [x29, #56]
    2934:	stur	wzr, [x29, #57]
    2938:	sturh	wzr, [x29, #61]
    293c:	strb	wzr, [x29, #63]
    2940:	str	x30, [x29, #64]
    2944:	str	x29, [x29, #32]
    2948:	ldp	x4, x5, [x29, #56]
    294c:	stp	x4, x5, [x29, #16]
    2950:	bl	510 <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE>
    2954:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002958 <__ubsan_handle_shift_out_of_bounds>:
    2958:	stp	x29, x30, [sp, #-80]!
    295c:	mov	x29, sp
    2960:	add	x3, x29, #0x10
    2964:	stp	xzr, x30, [x29, #56]
    2968:	ldp	x4, x5, [x29, #56]
    296c:	stp	x4, x5, [x29, #16]
    2970:	str	x29, [x29, #32]
    2974:	bl	d68 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE>
    2978:	ldp	x29, x30, [sp], #80
    297c:	ret

0000000000002980 <__ubsan_handle_shift_out_of_bounds_abort>:
    2980:	stp	x29, x30, [sp, #-80]!
    2984:	mov	w4, #0x1                   	// #1
    2988:	mov	x29, sp
    298c:	add	x3, x29, #0x10
    2990:	strb	w4, [x29, #56]
    2994:	stur	wzr, [x29, #57]
    2998:	sturh	wzr, [x29, #61]
    299c:	strb	wzr, [x29, #63]
    29a0:	str	x30, [x29, #64]
    29a4:	str	x29, [x29, #32]
    29a8:	ldp	x4, x5, [x29, #56]
    29ac:	stp	x4, x5, [x29, #16]
    29b0:	bl	d68 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE>
    29b4:	bl	0 <_ZN11__sanitizer3DieEv>

00000000000029b8 <__ubsan_handle_out_of_bounds>:
    29b8:	stp	x29, x30, [sp, #-80]!
    29bc:	mov	x29, sp
    29c0:	add	x2, x29, #0x10
    29c4:	stp	xzr, x30, [x29, #56]
    29c8:	ldp	x4, x5, [x29, #56]
    29cc:	stp	x4, x5, [x29, #16]
    29d0:	str	x29, [x29, #32]
    29d4:	bl	230 <_ZL21handleOutOfBoundsImplPN7__ubsan15OutOfBoundsDataEmNS_13ReportOptionsE>
    29d8:	ldp	x29, x30, [sp], #80
    29dc:	ret

00000000000029e0 <__ubsan_handle_out_of_bounds_abort>:
    29e0:	stp	x29, x30, [sp, #-80]!
    29e4:	mov	w3, #0x1                   	// #1
    29e8:	mov	x29, sp
    29ec:	add	x2, x29, #0x10
    29f0:	strb	w3, [x29, #56]
    29f4:	stur	wzr, [x29, #57]
    29f8:	sturh	wzr, [x29, #61]
    29fc:	strb	wzr, [x29, #63]
    2a00:	str	x30, [x29, #64]
    2a04:	str	x29, [x29, #32]
    2a08:	ldp	x4, x5, [x29, #56]
    2a0c:	stp	x4, x5, [x29, #16]
    2a10:	bl	230 <_ZL21handleOutOfBoundsImplPN7__ubsan15OutOfBoundsDataEmNS_13ReportOptionsE>
    2a14:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002a18 <__ubsan_handle_builtin_unreachable>:
    2a18:	stp	x29, x30, [sp, #-80]!
    2a1c:	mov	w2, #0x1                   	// #1
    2a20:	mov	x29, sp
    2a24:	add	x1, x29, #0x10
    2a28:	strb	w2, [x29, #56]
    2a2c:	stur	wzr, [x29, #57]
    2a30:	sturh	wzr, [x29, #61]
    2a34:	strb	wzr, [x29, #63]
    2a38:	str	x30, [x29, #64]
    2a3c:	str	x29, [x29, #32]
    2a40:	ldp	x2, x3, [x29, #56]
    2a44:	stp	x2, x3, [x29, #16]
    2a48:	bl	a68 <_ZL28handleBuiltinUnreachableImplPN7__ubsan15UnreachableDataENS_13ReportOptionsE.constprop.0>
    2a4c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002a50 <__ubsan_handle_missing_return>:
    2a50:	stp	x29, x30, [sp, #-80]!
    2a54:	mov	w2, #0x1                   	// #1
    2a58:	mov	x29, sp
    2a5c:	add	x1, x29, #0x10
    2a60:	strb	w2, [x29, #56]
    2a64:	stur	wzr, [x29, #57]
    2a68:	sturh	wzr, [x29, #61]
    2a6c:	strb	wzr, [x29, #63]
    2a70:	str	x30, [x29, #64]
    2a74:	str	x29, [x29, #32]
    2a78:	ldp	x2, x3, [x29, #56]
    2a7c:	stp	x2, x3, [x29, #16]
    2a80:	bl	990 <_ZL23handleMissingReturnImplPN7__ubsan15UnreachableDataENS_13ReportOptionsE.constprop.0>
    2a84:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002a88 <__ubsan_handle_vla_bound_not_positive>:
    2a88:	stp	x29, x30, [sp, #-80]!
    2a8c:	mov	x29, sp
    2a90:	add	x2, x29, #0x10
    2a94:	stp	xzr, x30, [x29, #56]
    2a98:	ldp	x4, x5, [x29, #56]
    2a9c:	stp	x4, x5, [x29, #16]
    2aa0:	str	x29, [x29, #32]
    2aa4:	bl	3a0 <_ZL25handleVLABoundNotPositivePN7__ubsan12VLABoundDataEmNS_13ReportOptionsE>
    2aa8:	ldp	x29, x30, [sp], #80
    2aac:	ret

0000000000002ab0 <__ubsan_handle_vla_bound_not_positive_abort>:
    2ab0:	stp	x29, x30, [sp, #-80]!
    2ab4:	mov	w3, #0x1                   	// #1
    2ab8:	mov	x29, sp
    2abc:	add	x2, x29, #0x10
    2ac0:	strb	w3, [x29, #56]
    2ac4:	stur	wzr, [x29, #57]
    2ac8:	sturh	wzr, [x29, #61]
    2acc:	strb	wzr, [x29, #63]
    2ad0:	str	x30, [x29, #64]
    2ad4:	str	x29, [x29, #32]
    2ad8:	ldp	x4, x5, [x29, #56]
    2adc:	stp	x4, x5, [x29, #16]
    2ae0:	bl	3a0 <_ZL25handleVLABoundNotPositivePN7__ubsan12VLABoundDataEmNS_13ReportOptionsE>
    2ae4:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002ae8 <__ubsan_handle_float_cast_overflow>:
    2ae8:	stp	x29, x30, [sp, #-80]!
    2aec:	mov	x29, sp
    2af0:	add	x2, x29, #0x10
    2af4:	stp	xzr, x30, [x29, #56]
    2af8:	ldp	x4, x5, [x29, #56]
    2afc:	stp	x4, x5, [x29, #16]
    2b00:	str	x29, [x29, #32]
    2b04:	bl	b40 <_ZL23handleFloatCastOverflowPvmN7__ubsan13ReportOptionsE>
    2b08:	ldp	x29, x30, [sp], #80
    2b0c:	ret

0000000000002b10 <__ubsan_handle_float_cast_overflow_abort>:
    2b10:	stp	x29, x30, [sp, #-80]!
    2b14:	mov	w3, #0x1                   	// #1
    2b18:	mov	x29, sp
    2b1c:	add	x2, x29, #0x10
    2b20:	strb	w3, [x29, #56]
    2b24:	stur	wzr, [x29, #57]
    2b28:	sturh	wzr, [x29, #61]
    2b2c:	strb	wzr, [x29, #63]
    2b30:	str	x30, [x29, #64]
    2b34:	str	x29, [x29, #32]
    2b38:	ldp	x4, x5, [x29, #56]
    2b3c:	stp	x4, x5, [x29, #16]
    2b40:	bl	b40 <_ZL23handleFloatCastOverflowPvmN7__ubsan13ReportOptionsE>
    2b44:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002b48 <__ubsan_handle_load_invalid_value>:
    2b48:	stp	x29, x30, [sp, #-80]!
    2b4c:	mov	x29, sp
    2b50:	add	x2, x29, #0x10
    2b54:	stp	xzr, x30, [x29, #56]
    2b58:	ldp	x4, x5, [x29, #56]
    2b5c:	stp	x4, x5, [x29, #16]
    2b60:	str	x29, [x29, #32]
    2b64:	bl	7d8 <_ZL22handleLoadInvalidValuePN7__ubsan16InvalidValueDataEmNS_13ReportOptionsE>
    2b68:	ldp	x29, x30, [sp], #80
    2b6c:	ret

0000000000002b70 <__ubsan_handle_load_invalid_value_abort>:
    2b70:	stp	x29, x30, [sp, #-80]!
    2b74:	mov	w3, #0x1                   	// #1
    2b78:	mov	x29, sp
    2b7c:	add	x2, x29, #0x10
    2b80:	strb	w3, [x29, #56]
    2b84:	stur	wzr, [x29, #57]
    2b88:	sturh	wzr, [x29, #61]
    2b8c:	strb	wzr, [x29, #63]
    2b90:	str	x30, [x29, #64]
    2b94:	str	x29, [x29, #32]
    2b98:	ldp	x4, x5, [x29, #56]
    2b9c:	stp	x4, x5, [x29, #16]
    2ba0:	bl	7d8 <_ZL22handleLoadInvalidValuePN7__ubsan16InvalidValueDataEmNS_13ReportOptionsE>
    2ba4:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002ba8 <__ubsan_handle_implicit_conversion>:
    2ba8:	stp	x29, x30, [sp, #-80]!
    2bac:	mov	x6, x1
    2bb0:	mov	x3, x2
    2bb4:	mov	x29, sp
    2bb8:	add	x1, x29, #0x10
    2bbc:	mov	x2, x6
    2bc0:	stp	xzr, x30, [x29, #56]
    2bc4:	ldp	x4, x5, [x29, #56]
    2bc8:	stp	x4, x5, [x29, #16]
    2bcc:	str	x29, [x29, #32]
    2bd0:	bl	1b00 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm>
    2bd4:	ldp	x29, x30, [sp], #80
    2bd8:	ret
    2bdc:	nop

0000000000002be0 <__ubsan_handle_implicit_conversion_abort>:
    2be0:	stp	x29, x30, [sp, #-80]!
    2be4:	mov	w4, #0x1                   	// #1
    2be8:	mov	x3, x2
    2bec:	mov	x29, sp
    2bf0:	mov	x2, x1
    2bf4:	add	x1, x29, #0x10
    2bf8:	strb	w4, [x29, #56]
    2bfc:	stur	wzr, [x29, #57]
    2c00:	sturh	wzr, [x29, #61]
    2c04:	strb	wzr, [x29, #63]
    2c08:	str	x30, [x29, #64]
    2c0c:	str	x29, [x29, #32]
    2c10:	ldp	x4, x5, [x29, #56]
    2c14:	stp	x4, x5, [x29, #16]
    2c18:	bl	1b00 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm>
    2c1c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002c20 <__ubsan_handle_invalid_builtin>:
    2c20:	stp	x29, x30, [sp, #-80]!
    2c24:	mov	w1, #0x1                   	// #1
    2c28:	mov	x29, sp
    2c2c:	strb	w1, [x29, #56]
    2c30:	add	x1, x29, #0x10
    2c34:	stur	wzr, [x29, #57]
    2c38:	sturh	wzr, [x29, #61]
    2c3c:	strb	wzr, [x29, #63]
    2c40:	str	x30, [x29, #64]
    2c44:	str	x29, [x29, #32]
    2c48:	ldp	x2, x3, [x29, #56]
    2c4c:	stp	x2, x3, [x29, #16]
    2c50:	bl	11e0 <_ZL20handleInvalidBuiltinPN7__ubsan18InvalidBuiltinDataENS_13ReportOptionsE.constprop.0>
    2c54:	ldp	x29, x30, [sp], #80
    2c58:	ret
    2c5c:	nop

0000000000002c60 <__ubsan_handle_invalid_builtin_abort>:
    2c60:	stp	x29, x30, [sp, #-80]!
    2c64:	mov	w2, #0x1                   	// #1
    2c68:	mov	x29, sp
    2c6c:	add	x1, x29, #0x10
    2c70:	strb	w2, [x29, #56]
    2c74:	stur	wzr, [x29, #57]
    2c78:	sturh	wzr, [x29, #61]
    2c7c:	strb	wzr, [x29, #63]
    2c80:	str	x30, [x29, #64]
    2c84:	str	x29, [x29, #32]
    2c88:	ldp	x2, x3, [x29, #56]
    2c8c:	stp	x2, x3, [x29, #16]
    2c90:	bl	11e0 <_ZL20handleInvalidBuiltinPN7__ubsan18InvalidBuiltinDataENS_13ReportOptionsE.constprop.0>
    2c94:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002c98 <__ubsan_handle_function_type_mismatch>:
    2c98:	stp	x29, x30, [sp, #-80]!
    2c9c:	mov	x29, sp
    2ca0:	add	x2, x29, #0x10
    2ca4:	stp	xzr, x30, [x29, #56]
    2ca8:	ldp	x4, x5, [x29, #56]
    2cac:	stp	x4, x5, [x29, #16]
    2cb0:	str	x29, [x29, #32]
    2cb4:	bl	12f8 <_ZL26handleFunctionTypeMismatchPN7__ubsan24FunctionTypeMismatchDataEmNS_13ReportOptionsE>
    2cb8:	ldp	x29, x30, [sp], #80
    2cbc:	ret

0000000000002cc0 <__ubsan_handle_function_type_mismatch_abort>:
    2cc0:	stp	x29, x30, [sp, #-80]!
    2cc4:	mov	w3, #0x1                   	// #1
    2cc8:	mov	x29, sp
    2ccc:	add	x2, x29, #0x10
    2cd0:	strb	w3, [x29, #56]
    2cd4:	stur	wzr, [x29, #57]
    2cd8:	sturh	wzr, [x29, #61]
    2cdc:	strb	wzr, [x29, #63]
    2ce0:	str	x30, [x29, #64]
    2ce4:	str	x29, [x29, #32]
    2ce8:	ldp	x4, x5, [x29, #56]
    2cec:	stp	x4, x5, [x29, #16]
    2cf0:	bl	12f8 <_ZL26handleFunctionTypeMismatchPN7__ubsan24FunctionTypeMismatchDataEmNS_13ReportOptionsE>
    2cf4:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002cf8 <__ubsan_handle_nonnull_return_v1>:
    2cf8:	stp	x29, x30, [sp, #-80]!
    2cfc:	mov	w3, #0x1                   	// #1
    2d00:	mov	x29, sp
    2d04:	add	x2, x29, #0x10
    2d08:	stp	xzr, x30, [x29, #56]
    2d0c:	ldp	x4, x5, [x29, #56]
    2d10:	stp	x4, x5, [x29, #16]
    2d14:	str	x29, [x29, #32]
    2d18:	bl	1900 <_ZL19handleNonNullReturnPN7__ubsan17NonNullReturnDataEPNS_14SourceLocationENS_13ReportOptionsEb>
    2d1c:	ldp	x29, x30, [sp], #80
    2d20:	ret
    2d24:	nop

0000000000002d28 <__ubsan_handle_nonnull_return_v1_abort>:
    2d28:	stp	x29, x30, [sp, #-80]!
    2d2c:	mov	w3, #0x1                   	// #1
    2d30:	mov	x29, sp
    2d34:	add	x2, x29, #0x10
    2d38:	strb	w3, [x29, #56]
    2d3c:	stur	wzr, [x29, #57]
    2d40:	sturh	wzr, [x29, #61]
    2d44:	strb	wzr, [x29, #63]
    2d48:	str	x30, [x29, #64]
    2d4c:	str	x29, [x29, #32]
    2d50:	ldp	x4, x5, [x29, #56]
    2d54:	stp	x4, x5, [x29, #16]
    2d58:	bl	1900 <_ZL19handleNonNullReturnPN7__ubsan17NonNullReturnDataEPNS_14SourceLocationENS_13ReportOptionsEb>
    2d5c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002d60 <__ubsan_handle_nullability_return_v1>:
    2d60:	stp	x29, x30, [sp, #-80]!
    2d64:	mov	w3, #0x0                   	// #0
    2d68:	mov	x29, sp
    2d6c:	add	x2, x29, #0x10
    2d70:	stp	xzr, x30, [x29, #56]
    2d74:	ldp	x4, x5, [x29, #56]
    2d78:	stp	x4, x5, [x29, #16]
    2d7c:	str	x29, [x29, #32]
    2d80:	bl	1900 <_ZL19handleNonNullReturnPN7__ubsan17NonNullReturnDataEPNS_14SourceLocationENS_13ReportOptionsEb>
    2d84:	ldp	x29, x30, [sp], #80
    2d88:	ret
    2d8c:	nop

0000000000002d90 <__ubsan_handle_nullability_return_v1_abort>:
    2d90:	stp	x29, x30, [sp, #-80]!
    2d94:	mov	w3, #0x1                   	// #1
    2d98:	mov	x29, sp
    2d9c:	add	x2, x29, #0x10
    2da0:	strb	w3, [x29, #56]
    2da4:	mov	w3, #0x0                   	// #0
    2da8:	stur	wzr, [x29, #57]
    2dac:	sturh	wzr, [x29, #61]
    2db0:	strb	wzr, [x29, #63]
    2db4:	str	x30, [x29, #64]
    2db8:	str	x29, [x29, #32]
    2dbc:	ldp	x4, x5, [x29, #56]
    2dc0:	stp	x4, x5, [x29, #16]
    2dc4:	bl	1900 <_ZL19handleNonNullReturnPN7__ubsan17NonNullReturnDataEPNS_14SourceLocationENS_13ReportOptionsEb>
    2dc8:	bl	0 <_ZN11__sanitizer3DieEv>
    2dcc:	nop

0000000000002dd0 <__ubsan_handle_nonnull_arg>:
    2dd0:	stp	x29, x30, [sp, #-80]!
    2dd4:	mov	w2, #0x1                   	// #1
    2dd8:	mov	x29, sp
    2ddc:	add	x1, x29, #0x10
    2de0:	stp	xzr, x30, [x29, #56]
    2de4:	ldp	x4, x5, [x29, #56]
    2de8:	stp	x4, x5, [x29, #16]
    2dec:	str	x29, [x29, #32]
    2df0:	bl	1720 <_ZL16handleNonNullArgPN7__ubsan14NonNullArgDataENS_13ReportOptionsEb>
    2df4:	ldp	x29, x30, [sp], #80
    2df8:	ret
    2dfc:	nop

0000000000002e00 <__ubsan_handle_nonnull_arg_abort>:
    2e00:	stp	x29, x30, [sp, #-80]!
    2e04:	mov	w2, #0x1                   	// #1
    2e08:	mov	x29, sp
    2e0c:	add	x1, x29, #0x10
    2e10:	strb	w2, [x29, #56]
    2e14:	stur	wzr, [x29, #57]
    2e18:	sturh	wzr, [x29, #61]
    2e1c:	strb	wzr, [x29, #63]
    2e20:	str	x30, [x29, #64]
    2e24:	str	x29, [x29, #32]
    2e28:	ldp	x4, x5, [x29, #56]
    2e2c:	stp	x4, x5, [x29, #16]
    2e30:	bl	1720 <_ZL16handleNonNullArgPN7__ubsan14NonNullArgDataENS_13ReportOptionsEb>
    2e34:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002e38 <__ubsan_handle_nullability_arg>:
    2e38:	stp	x29, x30, [sp, #-80]!
    2e3c:	mov	w2, #0x0                   	// #0
    2e40:	mov	x29, sp
    2e44:	add	x1, x29, #0x10
    2e48:	stp	xzr, x30, [x29, #56]
    2e4c:	ldp	x4, x5, [x29, #56]
    2e50:	stp	x4, x5, [x29, #16]
    2e54:	str	x29, [x29, #32]
    2e58:	bl	1720 <_ZL16handleNonNullArgPN7__ubsan14NonNullArgDataENS_13ReportOptionsEb>
    2e5c:	ldp	x29, x30, [sp], #80
    2e60:	ret
    2e64:	nop

0000000000002e68 <__ubsan_handle_nullability_arg_abort>:
    2e68:	stp	x29, x30, [sp, #-80]!
    2e6c:	mov	w2, #0x1                   	// #1
    2e70:	mov	x29, sp
    2e74:	add	x1, x29, #0x10
    2e78:	strb	w2, [x29, #56]
    2e7c:	mov	w2, #0x0                   	// #0
    2e80:	stur	wzr, [x29, #57]
    2e84:	sturh	wzr, [x29, #61]
    2e88:	strb	wzr, [x29, #63]
    2e8c:	str	x30, [x29, #64]
    2e90:	str	x29, [x29, #32]
    2e94:	ldp	x4, x5, [x29, #56]
    2e98:	stp	x4, x5, [x29, #16]
    2e9c:	bl	1720 <_ZL16handleNonNullArgPN7__ubsan14NonNullArgDataENS_13ReportOptionsEb>
    2ea0:	bl	0 <_ZN11__sanitizer3DieEv>
    2ea4:	nop

0000000000002ea8 <__ubsan_handle_pointer_overflow>:
    2ea8:	stp	x29, x30, [sp, #-80]!
    2eac:	mov	x29, sp
    2eb0:	add	x3, x29, #0x10
    2eb4:	stp	xzr, x30, [x29, #56]
    2eb8:	ldp	x4, x5, [x29, #56]
    2ebc:	stp	x4, x5, [x29, #16]
    2ec0:	str	x29, [x29, #32]
    2ec4:	bl	2160 <_ZL25handlePointerOverflowImplPN7__ubsan19PointerOverflowDataEmmNS_13ReportOptionsE>
    2ec8:	ldp	x29, x30, [sp], #80
    2ecc:	ret

0000000000002ed0 <__ubsan_handle_pointer_overflow_abort>:
    2ed0:	stp	x29, x30, [sp, #-80]!
    2ed4:	mov	w4, #0x1                   	// #1
    2ed8:	mov	x29, sp
    2edc:	add	x3, x29, #0x10
    2ee0:	strb	w4, [x29, #56]
    2ee4:	stur	wzr, [x29, #57]
    2ee8:	sturh	wzr, [x29, #61]
    2eec:	strb	wzr, [x29, #63]
    2ef0:	str	x30, [x29, #64]
    2ef4:	str	x29, [x29, #32]
    2ef8:	ldp	x4, x5, [x29, #56]
    2efc:	stp	x4, x5, [x29, #16]
    2f00:	bl	2160 <_ZL25handlePointerOverflowImplPN7__ubsan19PointerOverflowDataEmmNS_13ReportOptionsE>
    2f04:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002f08 <__ubsan_handle_cfi_bad_icall>:
    2f08:	stp	x29, x30, [sp, #-112]!
    2f0c:	mov	x3, x0
    2f10:	mov	w6, #0x4                   	// #4
    2f14:	mov	x29, sp
    2f18:	add	x2, x29, #0x10
    2f1c:	add	x0, x29, #0x50
    2f20:	stp	xzr, x30, [x29, #56]
    2f24:	ldp	x4, x5, [x29, #56]
    2f28:	stp	x4, x5, [x29, #16]
    2f2c:	ldp	x4, x5, [x3]
    2f30:	strb	w6, [x29, #80]
    2f34:	ldr	x3, [x3, #16]
    2f38:	str	x29, [x29, #32]
    2f3c:	stur	wzr, [x29, #81]
    2f40:	sturh	wzr, [x29, #85]
    2f44:	strb	wzr, [x29, #87]
    2f48:	stp	x4, x5, [x29, #88]
    2f4c:	str	x3, [x29, #104]
    2f50:	bl	1e38 <_ZL17handleCFIBadIcallPN7__ubsan16CFICheckFailDataEmNS_13ReportOptionsE>
    2f54:	ldp	x29, x30, [sp], #112
    2f58:	ret
    2f5c:	nop

0000000000002f60 <__ubsan_handle_cfi_bad_icall_abort>:
    2f60:	stp	x29, x30, [sp, #-112]!
    2f64:	mov	x3, x0
    2f68:	mov	w4, #0x1                   	// #1
    2f6c:	mov	x29, sp
    2f70:	add	x2, x29, #0x10
    2f74:	add	x0, x29, #0x50
    2f78:	mov	w6, #0x4                   	// #4
    2f7c:	strb	w4, [x29, #56]
    2f80:	stur	wzr, [x29, #57]
    2f84:	sturh	wzr, [x29, #61]
    2f88:	strb	wzr, [x29, #63]
    2f8c:	str	x30, [x29, #64]
    2f90:	ldp	x4, x5, [x3]
    2f94:	strb	w6, [x29, #80]
    2f98:	ldp	x8, x9, [x29, #56]
    2f9c:	stur	wzr, [x29, #81]
    2fa0:	ldr	x3, [x3, #16]
    2fa4:	stp	x8, x9, [x29, #16]
    2fa8:	str	x29, [x29, #32]
    2fac:	sturh	wzr, [x29, #85]
    2fb0:	strb	wzr, [x29, #87]
    2fb4:	stp	x4, x5, [x29, #88]
    2fb8:	str	x3, [x29, #104]
    2fbc:	bl	1e38 <_ZL17handleCFIBadIcallPN7__ubsan16CFICheckFailDataEmNS_13ReportOptionsE>
    2fc0:	bl	0 <_ZN11__sanitizer3DieEv>
    2fc4:	nop

0000000000002fc8 <__ubsan_handle_cfi_check_fail>:
    2fc8:	stp	x29, x30, [sp, #-80]!
    2fcc:	mov	x29, sp
    2fd0:	ldrb	w3, [x0]
    2fd4:	sub	w3, w3, #0x4
    2fd8:	stp	xzr, x30, [x29, #56]
    2fdc:	and	w3, w3, #0xff
    2fe0:	cmp	w3, #0x1
    2fe4:	b.ls	300c <__ubsan_handle_cfi_check_fail+0x44>  // b.plast
    2fe8:	ldp	x4, x5, [x29, #56]
    2fec:	cmp	x2, #0x0
    2ff0:	add	x3, x29, #0x10
    2ff4:	cset	w2, ne  // ne = any
    2ff8:	stp	x4, x5, [x29, #16]
    2ffc:	str	x29, [x29, #32]
    3000:	bl	0 <__ubsan_handle_cfi_bad_type>
    3004:	ldp	x29, x30, [sp], #80
    3008:	ret
    300c:	ldp	x4, x5, [x29, #56]
    3010:	add	x2, x29, #0x10
    3014:	stp	x4, x5, [x29, #16]
    3018:	str	x29, [x29, #32]
    301c:	bl	1e38 <_ZL17handleCFIBadIcallPN7__ubsan16CFICheckFailDataEmNS_13ReportOptionsE>
    3020:	ldp	x29, x30, [sp], #80
    3024:	ret

0000000000003028 <__ubsan_handle_cfi_check_fail_abort>:
    3028:	stp	x29, x30, [sp, #-80]!
    302c:	mov	w3, #0x1                   	// #1
    3030:	mov	x29, sp
    3034:	strb	w3, [x29, #56]
    3038:	ldrb	w3, [x0]
    303c:	stur	wzr, [x29, #57]
    3040:	sub	w3, w3, #0x4
    3044:	sturh	wzr, [x29, #61]
    3048:	strb	wzr, [x29, #63]
    304c:	and	w3, w3, #0xff
    3050:	str	x30, [x29, #64]
    3054:	cmp	w3, #0x1
    3058:	b.ls	307c <__ubsan_handle_cfi_check_fail_abort+0x54>  // b.plast
    305c:	ldp	x4, x5, [x29, #56]
    3060:	cmp	x2, #0x0
    3064:	add	x3, x29, #0x10
    3068:	cset	w2, ne  // ne = any
    306c:	stp	x4, x5, [x29, #16]
    3070:	str	x29, [x29, #32]
    3074:	bl	0 <__ubsan_handle_cfi_bad_type>
    3078:	bl	0 <_ZN11__sanitizer3DieEv>
    307c:	ldp	x4, x5, [x29, #56]
    3080:	add	x2, x29, #0x10
    3084:	stp	x4, x5, [x29, #16]
    3088:	str	x29, [x29, #32]
    308c:	bl	1e38 <_ZL17handleCFIBadIcallPN7__ubsan16CFICheckFailDataEmNS_13ReportOptionsE>
    3090:	bl	0 <_ZN11__sanitizer3DieEv>

ubsan_handlers_cxx.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>:
   0:	sub	sp, sp, #0x2e0
   4:	stp	x19, x20, [sp]
   8:	mov	x19, x0
   c:	mov	x20, x1
  10:	mov	x0, x1
  14:	stp	x21, x22, [sp, #16]
  18:	mov	x21, x3
  1c:	ldr	x1, [x19, #24]
  20:	str	x30, [sp, #80]
  24:	bl	0 <_ZN7__ubsan16checkDynamicTypeEPvS0_m>
  28:	tst	w0, #0xff
  2c:	b.eq	48 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE+0x48>  // b.none
  30:	mov	w0, #0x0                   	// #0
  34:	ldp	x19, x20, [sp]
  38:	ldp	x21, x22, [sp, #16]
  3c:	ldr	x30, [sp, #80]
  40:	add	sp, sp, #0x2e0
  44:	ret
  48:	add	x8, sp, #0xc8
  4c:	mov	x0, x20
  50:	stp	x23, x24, [sp, #32]
  54:	bl	0 <_ZN7__ubsan28getDynamicTypeInfoFromObjectEPv>
  58:	ldp	x22, x23, [sp, #200]
  5c:	cbz	x22, 70 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE+0x70>
  60:	mov	x0, x22
  64:	bl	0 <_ZN7__ubsan21IsVptrCheckSuppressedEPKc>
  68:	tst	w0, #0xff
  6c:	b.ne	268 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE+0x268>  // b.any
  70:	add	x0, x19, #0xc
  74:	mov	w1, #0xffffffff            	// #-1
  78:	stp	x25, x26, [sp, #48]
  7c:	stp	x27, x28, [sp, #64]
  80:	ldxr	w24, [x0]
  84:	stxr	w2, w1, [x0]
  88:	cbnz	w2, 80 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE+0x80>
  8c:	dmb	ish
  90:	ldp	x4, x5, [x21]
  94:	mov	x1, #0x0                   	// #0
  98:	ldr	w25, [x19, #8]
  9c:	add	x26, sp, #0xa0
  a0:	ldr	x6, [x21, #16]
  a4:	mov	x2, x26
  a8:	ldr	x27, [x19]
  ac:	bfxil	x1, x25, #0, #32
  b0:	mov	w3, #0x18                  	// #24
  b4:	stp	x4, x5, [sp, #160]
  b8:	bfi	x1, x24, #32, #32
  bc:	mov	x0, x27
  c0:	str	x6, [sp, #176]
  c4:	bl	0 <_ZN7__ubsan12ignoreReportENS_14SourceLocationENS_13ReportOptionsENS_9ErrorTypeE>
  c8:	tst	w0, #0xff
  cc:	b.ne	258 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE+0x258>  // b.any
  d0:	mov	w28, #0x1                   	// #1
  d4:	str	w28, [sp, #304]
  d8:	str	x27, [sp, #312]
  dc:	add	x8, sp, #0xe0
  e0:	str	w25, [sp, #320]
  e4:	mov	x0, x8
  e8:	str	w24, [sp, #324]
  ec:	mov	x1, x26
  f0:	ldp	x6, x7, [sp, #304]
  f4:	stp	x6, x7, [sp, #112]
  f8:	add	x2, sp, #0x70
  fc:	ldp	x6, x7, [x21]
 100:	mov	w3, #0x18                  	// #24
 104:	ldp	x4, x5, [sp, #320]
 108:	stp	x4, x5, [sp, #128]
 10c:	add	x26, sp, #0x130
 110:	ldr	x5, [x21, #16]
 114:	str	x8, [sp, #104]
 118:	ldr	x9, [sp, #336]
 11c:	str	x9, [sp, #144]
 120:	stp	x6, x7, [sp, #160]
 124:	str	x5, [sp, #176]
 128:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
 12c:	adrp	x3, 0 <_ZN7__ubsan14TypeCheckKindsE>
 130:	ldrb	w7, [x19, #32]
 134:	ldr	x1, [x19, #16]
 138:	adrp	x2, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 13c:	ldr	x3, [x3]
 140:	add	x2, x2, #0x0
 144:	mov	w4, #0x2                   	// #2
 148:	mov	x6, #0x1800000000          	// #103079215104
 14c:	mov	w5, #0x5                   	// #5
 150:	mov	x0, x26
 154:	ldr	x3, [x3, x7, lsl #3]
 158:	str	w28, [sp, #304]
 15c:	str	x27, [sp, #312]
 160:	str	w25, [sp, #320]
 164:	str	w24, [sp, #324]
 168:	stp	x6, x2, [sp, #344]
 16c:	str	wzr, [sp, #368]
 170:	str	x3, [sp, #384]
 174:	str	w5, [sp, #400]
 178:	str	x20, [sp, #416]
 17c:	str	w4, [sp, #624]
 180:	str	wzr, [sp, #632]
 184:	str	xzr, [sp, #640]
 188:	str	xzr, [sp, #648]
 18c:	str	wzr, [sp, #672]
 190:	str	xzr, [sp, #680]
 194:	str	xzr, [sp, #688]
 198:	str	xzr, [sp, #712]
 19c:	str	wzr, [sp, #720]
 1a0:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
 1a4:	mov	x0, x26
 1a8:	bl	0 <_ZN7__ubsan4DiagD1Ev>
 1ac:	add	x1, x20, #0x8
 1b0:	mov	w4, #0x2                   	// #2
 1b4:	ldr	x8, [sp, #104]
 1b8:	cbz	x22, 2c8 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE+0x2c8>
 1bc:	str	x8, [sp, #104]
 1c0:	cbnz	x23, 270 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE+0x270>
 1c4:	adrp	x2, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 1c8:	mov	x5, #0x1                   	// #1
 1cc:	mov	x0, x26
 1d0:	add	x2, x2, #0x0
 1d4:	adrp	x3, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 1d8:	movk	x5, #0x18, lsl #32
 1dc:	add	x3, x3, #0x0
 1e0:	str	w4, [sp, #304]
 1e4:	stp	xzr, xzr, [sp, #312]
 1e8:	str	x20, [sp, #328]
 1ec:	stp	x5, x3, [sp, #344]
 1f0:	str	w28, [sp, #368]
 1f4:	str	x22, [sp, #384]
 1f8:	str	w28, [sp, #624]
 1fc:	str	w4, [sp, #632]
 200:	str	xzr, [sp, #640]
 204:	str	xzr, [sp, #648]
 208:	str	x20, [sp, #656]
 20c:	str	w4, [sp, #672]
 210:	str	xzr, [sp, #680]
 214:	str	xzr, [sp, #688]
 218:	str	x1, [sp, #696]
 21c:	str	x2, [sp, #712]
 220:	str	w28, [sp, #720]
 224:	bl	0 <_ZN7__ubsan4DiagD1Ev>
 228:	ldr	x8, [sp, #104]
 22c:	mov	x0, x8
 230:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
 234:	mov	w0, #0x1                   	// #1
 238:	ldp	x19, x20, [sp]
 23c:	ldp	x21, x22, [sp, #16]
 240:	ldp	x23, x24, [sp, #32]
 244:	ldp	x25, x26, [sp, #48]
 248:	ldp	x27, x28, [sp, #64]
 24c:	ldr	x30, [sp, #80]
 250:	add	sp, sp, #0x2e0
 254:	ret
 258:	ldp	x23, x24, [sp, #32]
 25c:	ldp	x25, x26, [sp, #48]
 260:	ldp	x27, x28, [sp, #64]
 264:	b	30 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE+0x30>
 268:	ldp	x23, x24, [sp, #32]
 26c:	b	30 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE+0x30>
 270:	mov	x7, #0x1                   	// #1
 274:	sub	x9, x20, x23
 278:	ldr	x6, [sp, #216]
 27c:	adrp	x3, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 280:	adrp	x2, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 284:	add	x3, x3, #0x0
 288:	movk	x7, #0x18, lsl #32
 28c:	mov	w5, #0x3                   	// #3
 290:	mov	x0, x26
 294:	add	x2, x2, #0x0
 298:	str	w4, [sp, #304]
 29c:	stp	xzr, xzr, [sp, #312]
 2a0:	str	x9, [sp, #328]
 2a4:	stp	x7, x3, [sp, #344]
 2a8:	str	w4, [sp, #368]
 2ac:	stp	x23, xzr, [sp, #384]
 2b0:	str	w28, [sp, #400]
 2b4:	str	x22, [sp, #416]
 2b8:	str	w28, [sp, #432]
 2bc:	str	x6, [sp, #448]
 2c0:	str	w5, [sp, #624]
 2c4:	b	1fc <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE+0x1fc>
 2c8:	add	x23, x23, #0x100, lsl #12
 2cc:	cmp	x23, #0x200, lsl #12
 2d0:	b.ls	314 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE+0x314>  // b.plast
 2d4:	adrp	x3, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 2d8:	adrp	x2, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 2dc:	mov	x0, x26
 2e0:	add	x3, x3, #0x0
 2e4:	add	x2, x2, #0x0
 2e8:	str	x8, [sp, #104]
 2ec:	mov	x5, #0x1                   	// #1
 2f0:	str	w4, [sp, #304]
 2f4:	movk	x5, #0x18, lsl #32
 2f8:	stp	xzr, xzr, [sp, #312]
 2fc:	str	x20, [sp, #328]
 300:	stp	x5, x3, [sp, #344]
 304:	str	w28, [sp, #368]
 308:	str	xzr, [sp, #384]
 30c:	str	w28, [sp, #624]
 310:	b	1fc <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE+0x1fc>
 314:	adrp	x3, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 318:	adrp	x2, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 31c:	mov	x0, x26
 320:	add	x3, x3, #0x0
 324:	add	x2, x2, #0x0
 328:	b	2ec <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE+0x2ec>
 32c:	nop

0000000000000330 <__ubsan_handle_dynamic_type_cache_miss>:
 330:	stp	x29, x30, [sp, #-80]!
 334:	mov	x29, sp
 338:	add	x3, x29, #0x10
 33c:	stp	xzr, x30, [x29, #56]
 340:	ldp	x4, x5, [x29, #56]
 344:	stp	x4, x5, [x29, #16]
 348:	str	x29, [x29, #32]
 34c:	bl	0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 350:	ldp	x29, x30, [sp], #80
 354:	ret

0000000000000358 <__ubsan_handle_dynamic_type_cache_miss_abort>:
 358:	stp	x29, x30, [sp, #-80]!
 35c:	mov	x29, sp
 360:	add	x3, x29, #0x10
 364:	stp	xzr, x30, [x29, #56]
 368:	ldp	x4, x5, [x29, #56]
 36c:	stp	x4, x5, [x29, #16]
 370:	str	x29, [x29, #32]
 374:	bl	0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 378:	tst	w0, #0xff
 37c:	b.ne	388 <__ubsan_handle_dynamic_type_cache_miss_abort+0x30>  // b.any
 380:	ldp	x29, x30, [sp], #80
 384:	ret
 388:	bl	0 <_ZN11__sanitizer3DieEv>
 38c:	nop

0000000000000390 <__ubsan_handle_cfi_bad_type>:
 390:	sub	sp, sp, #0x2d0
 394:	stp	x19, x20, [sp]
 398:	mov	x20, x3
 39c:	and	w19, w2, #0xff
 3a0:	stp	x27, x28, [sp, #64]
 3a4:	mov	x27, x0
 3a8:	add	x0, x0, #0x14
 3ac:	stp	x21, x22, [sp, #16]
 3b0:	mov	x21, x1
 3b4:	mov	w1, #0xffffffff            	// #-1
 3b8:	stp	x23, x24, [sp, #32]
 3bc:	stp	x25, x26, [sp, #48]
 3c0:	str	x30, [sp, #80]
 3c4:	ldxr	w22, [x0]
 3c8:	stxr	w2, w1, [x0]
 3cc:	cbnz	w2, 3c4 <__ubsan_handle_cfi_bad_type+0x34>
 3d0:	dmb	ish
 3d4:	ldp	x4, x5, [x20]
 3d8:	mov	x1, #0x0                   	// #0
 3dc:	ldr	w23, [x27, #16]
 3e0:	add	x26, sp, #0x90
 3e4:	ldr	x6, [x20, #16]
 3e8:	mov	x2, x26
 3ec:	ldr	x24, [x27, #8]
 3f0:	bfxil	x1, x23, #0, #32
 3f4:	mov	w3, #0x19                  	// #25
 3f8:	stp	x4, x5, [sp, #144]
 3fc:	bfi	x1, x22, #32, #32
 400:	mov	x0, x24
 404:	str	x6, [sp, #160]
 408:	bl	0 <_ZN7__ubsan12ignoreReportENS_14SourceLocationENS_13ReportOptionsENS_9ErrorTypeE>
 40c:	tst	w0, #0xff
 410:	b.ne	63c <__ubsan_handle_cfi_bad_type+0x2ac>  // b.any
 414:	mov	w0, #0x1                   	// #1
 418:	str	w0, [sp, #288]
 41c:	str	x24, [sp, #296]
 420:	add	x25, sp, #0xd0
 424:	str	w23, [sp, #304]
 428:	mov	x1, x26
 42c:	str	w22, [sp, #308]
 430:	add	x2, sp, #0x60
 434:	ldp	x8, x9, [x20]
 438:	mov	x0, x25
 43c:	ldp	x4, x5, [sp, #288]
 440:	stp	x4, x5, [sp, #96]
 444:	mov	w3, #0x19                  	// #25
 448:	ldp	x6, x7, [sp, #304]
 44c:	mov	x26, #0x0                   	// #0
 450:	ldr	x4, [x20, #16]
 454:	stp	x6, x7, [sp, #112]
 458:	ldr	x10, [sp, #320]
 45c:	str	x10, [sp, #128]
 460:	stp	x8, x9, [sp, #144]
 464:	str	x4, [sp, #160]
 468:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
 46c:	cbnz	w19, 68c <__ubsan_handle_cfi_bad_type+0x2fc>
 470:	ldrb	w0, [x27]
 474:	cmp	w0, #0x2
 478:	b.eq	75c <__ubsan_handle_cfi_bad_type+0x3cc>  // b.none
 47c:	b.hi	65c <__ubsan_handle_cfi_bad_type+0x2cc>  // b.pmore
 480:	cmp	w0, #0x0
 484:	adrp	x19, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 488:	adrp	x0, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 48c:	add	x19, x19, #0x0
 490:	add	x0, x0, #0x0
 494:	csel	x19, x19, x0, ne  // ne = any
 498:	ldr	x1, [x27, #24]
 49c:	adrp	x2, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 4a0:	add	x2, x2, #0x0
 4a4:	mov	x3, #0x1900000000          	// #107374182400
 4a8:	add	x27, sp, #0x120
 4ac:	mov	w28, #0x1                   	// #1
 4b0:	mov	x0, x27
 4b4:	str	w28, [sp, #288]
 4b8:	str	x24, [sp, #296]
 4bc:	str	w23, [sp, #304]
 4c0:	str	w22, [sp, #308]
 4c4:	stp	x3, x2, [sp, #328]
 4c8:	str	wzr, [sp, #608]
 4cc:	str	wzr, [sp, #616]
 4d0:	str	xzr, [sp, #624]
 4d4:	str	xzr, [sp, #632]
 4d8:	str	wzr, [sp, #656]
 4dc:	str	xzr, [sp, #664]
 4e0:	str	xzr, [sp, #672]
 4e4:	str	xzr, [sp, #696]
 4e8:	str	wzr, [sp, #704]
 4ec:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
 4f0:	ldr	w3, [x0, #320]
 4f4:	mov	x1, x0
 4f8:	cmp	w3, #0x8
 4fc:	b.eq	73c <__ubsan_handle_cfi_bad_type+0x3ac>  // b.none
 500:	ubfiz	x2, x3, #5, #32
 504:	add	w0, w3, #0x1
 508:	add	x2, x2, #0x40
 50c:	str	w0, [x1, #320]
 510:	add	x4, x1, x2
 514:	cmp	w0, #0x8
 518:	str	wzr, [x1, x2]
 51c:	str	x19, [x4, #16]
 520:	b.eq	73c <__ubsan_handle_cfi_bad_type+0x3ac>  // b.none
 524:	ubfiz	x0, x0, #5, #32
 528:	add	w3, w3, #0x2
 52c:	add	x2, x0, #0x40
 530:	str	w3, [x1, #320]
 534:	add	x3, x1, x2
 538:	mov	w4, #0x5                   	// #5
 53c:	mov	x0, x27
 540:	str	w4, [x1, x2]
 544:	str	x21, [x3, #16]
 548:	bl	0 <_ZN7__ubsan4DiagD1Ev>
 54c:	cbz	x26, 70c <__ubsan_handle_cfi_bad_type+0x37c>
 550:	mov	x2, #0x1                   	// #1
 554:	mov	x0, x27
 558:	adrp	x1, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 55c:	mov	w3, #0x2                   	// #2
 560:	add	x1, x1, #0x0
 564:	movk	x2, #0x19, lsl #32
 568:	str	w3, [sp, #288]
 56c:	stp	xzr, xzr, [sp, #296]
 570:	str	x21, [sp, #312]
 574:	stp	x2, x1, [sp, #328]
 578:	str	w28, [sp, #352]
 57c:	str	x26, [sp, #368]
 580:	str	w28, [sp, #608]
 584:	str	wzr, [sp, #616]
 588:	add	x26, sp, #0xb0
 58c:	str	xzr, [sp, #624]
 590:	adrp	x19, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 594:	str	xzr, [sp, #632]
 598:	add	x19, x19, #0x0
 59c:	str	wzr, [sp, #656]
 5a0:	str	xzr, [sp, #664]
 5a4:	str	xzr, [sp, #672]
 5a8:	str	xzr, [sp, #696]
 5ac:	str	wzr, [sp, #704]
 5b0:	bl	0 <_ZN7__ubsan4DiagD1Ev>
 5b4:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
 5b8:	str	xzr, [sp, #176]
 5bc:	mov	x1, x21
 5c0:	mov	x2, x26
 5c4:	mov	x3, x27
 5c8:	bl	0 <_ZN11__sanitizer10Symbolizer27GetModuleNameAndOffsetForPCEmPPKcPm>
 5cc:	tst	w0, #0xff
 5d0:	b.eq	5e8 <__ubsan_handle_cfi_bad_type+0x258>  // b.none
 5d4:	ldr	x19, [sp, #176]
 5d8:	adrp	x0, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 5dc:	add	x0, x0, #0x0
 5e0:	cmp	x19, #0x0
 5e4:	csel	x19, x0, x19, eq  // eq = none
 5e8:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
 5ec:	str	xzr, [sp, #176]
 5f0:	ldr	x1, [x20, #8]
 5f4:	mov	x2, x26
 5f8:	mov	x3, x27
 5fc:	adrp	x20, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 600:	add	x20, x20, #0x0
 604:	bl	0 <_ZN11__sanitizer10Symbolizer27GetModuleNameAndOffsetForPCEmPPKcPm>
 608:	tst	w0, #0xff
 60c:	b.eq	624 <__ubsan_handle_cfi_bad_type+0x294>  // b.none
 610:	ldr	x20, [sp, #176]
 614:	adrp	x0, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 618:	add	x0, x0, #0x0
 61c:	cmp	x20, #0x0
 620:	csel	x20, x0, x20, eq  // eq = none
 624:	mov	x1, x19
 628:	mov	x0, x20
 62c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 630:	cbnz	w0, 6a0 <__ubsan_handle_cfi_bad_type+0x310>
 634:	mov	x0, x25
 638:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
 63c:	ldp	x19, x20, [sp]
 640:	ldp	x21, x22, [sp, #16]
 644:	ldp	x23, x24, [sp, #32]
 648:	ldp	x25, x26, [sp, #48]
 64c:	ldp	x27, x28, [sp, #64]
 650:	ldr	x30, [sp, #80]
 654:	add	sp, sp, #0x2d0
 658:	ret
 65c:	cmp	w0, #0x5
 660:	b.hi	678 <__ubsan_handle_cfi_bad_type+0x2e8>  // b.pmore
 664:	cmp	w0, #0x3
 668:	b.ne	768 <__ubsan_handle_cfi_bad_type+0x3d8>  // b.any
 66c:	adrp	x19, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 670:	add	x19, x19, #0x0
 674:	b	498 <__ubsan_handle_cfi_bad_type+0x108>
 678:	cmp	w0, #0x6
 67c:	adrp	x19, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 680:	add	x19, x19, #0x0
 684:	csel	x19, x19, xzr, eq  // eq = none
 688:	b	498 <__ubsan_handle_cfi_bad_type+0x108>
 68c:	add	x8, sp, #0xb8
 690:	mov	x0, x21
 694:	bl	0 <_ZN7__ubsan28getDynamicTypeInfoFromVtableEPv>
 698:	ldr	x26, [sp, #184]
 69c:	b	470 <__ubsan_handle_cfi_bad_type+0xe0>
 6a0:	adrp	x1, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 6a4:	mov	x3, #0x1                   	// #1
 6a8:	add	x1, x1, #0x0
 6ac:	mov	w4, #0x1                   	// #1
 6b0:	movk	x3, #0x19, lsl #32
 6b4:	mov	w2, #0x2                   	// #2
 6b8:	mov	x0, x27
 6bc:	str	w4, [sp, #288]
 6c0:	str	x24, [sp, #296]
 6c4:	str	w23, [sp, #304]
 6c8:	str	w22, [sp, #308]
 6cc:	stp	x3, x1, [sp, #328]
 6d0:	str	wzr, [sp, #352]
 6d4:	str	x20, [sp, #368]
 6d8:	str	wzr, [sp, #384]
 6dc:	str	x19, [sp, #400]
 6e0:	str	w2, [sp, #608]
 6e4:	str	wzr, [sp, #616]
 6e8:	str	xzr, [sp, #624]
 6ec:	str	xzr, [sp, #632]
 6f0:	str	wzr, [sp, #656]
 6f4:	str	xzr, [sp, #664]
 6f8:	str	xzr, [sp, #672]
 6fc:	str	xzr, [sp, #696]
 700:	str	wzr, [sp, #704]
 704:	bl	0 <_ZN7__ubsan4DiagD1Ev>
 708:	b	634 <__ubsan_handle_cfi_bad_type+0x2a4>
 70c:	mov	x2, #0x1                   	// #1
 710:	adrp	x1, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 714:	mov	w3, #0x2                   	// #2
 718:	add	x1, x1, #0x0
 71c:	movk	x2, #0x19, lsl #32
 720:	mov	x0, x27
 724:	str	w3, [sp, #288]
 728:	stp	xzr, xzr, [sp, #296]
 72c:	str	x21, [sp, #312]
 730:	stp	x2, x1, [sp, #328]
 734:	str	wzr, [sp, #608]
 738:	b	584 <__ubsan_handle_cfi_bad_type+0x1f4>
 73c:	adrp	x2, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 740:	adrp	x0, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 744:	add	x2, x2, #0x0
 748:	add	x0, x0, #0x0
 74c:	mov	x4, #0x0                   	// #0
 750:	mov	x3, #0x0                   	// #0
 754:	mov	w1, #0xbf                  	// #191
 758:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 75c:	adrp	x19, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 760:	add	x19, x19, #0x0
 764:	b	498 <__ubsan_handle_cfi_bad_type+0x108>
 768:	bl	0 <_ZN11__sanitizer3DieEv>

ubsan_init.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN7__ubsan22GetSanititizerToolNameEv>:
   0:	adrp	x0, 0 <_ZN7__ubsan22GetSanititizerToolNameEv>
   4:	add	x0, x0, #0x0
   8:	ret
   c:	nop

0000000000000010 <_ZN7__ubsan16InitAsStandaloneEv>:
  10:	stp	x19, x20, [sp, #-32]!
  14:	adrp	x19, 0 <_ZN7__ubsan22GetSanititizerToolNameEv>
  18:	add	x0, x19, #0x0
  1c:	mov	w2, #0x1                   	// #1
  20:	str	x30, [sp, #24]
  24:	ldxrb	w1, [x0]
  28:	stxrb	w3, w2, [x0]
  2c:	cbnz	w3, 24 <_ZN7__ubsan16InitAsStandaloneEv+0x14>
  30:	dmb	ish
  34:	tst	w1, #0xff
  38:	b.eq	40 <_ZN7__ubsan16InitAsStandaloneEv+0x30>  // b.none
  3c:	bl	0 <_ZN7__ubsan22GetSanititizerToolNameEv>
  40:	add	x20, x19, #0x0
  44:	ldrb	w0, [x20, #1]
  48:	cbz	w0, 60 <_ZN7__ubsan16InitAsStandaloneEv+0x50>
  4c:	dmb	ish
  50:	strb	wzr, [x19]
  54:	ldr	x30, [sp, #24]
  58:	ldp	x19, x20, [sp], #32
  5c:	ret
  60:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  64:	adrp	x1, 0 <_ZN7__ubsan22GetSanititizerToolNameEv>
  68:	add	x1, x1, #0x0
  6c:	str	x21, [sp, #16]
  70:	ldr	x0, [x0]
  74:	adrp	x21, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  78:	str	x1, [x0]
  7c:	bl	0 <_ZN11__sanitizer15CacheBinaryNameEv>
  80:	bl	0 <_ZN7__ubsan15InitializeFlagsEv>
  84:	ldr	x21, [x21]
  88:	ldr	x0, [x21, #40]
  8c:	bl	0 <__sanitizer_set_report_path>
  90:	bl	0 <_ZN11__sanitizer14AndroidLogInitEv>
  94:	ldrb	w0, [x21, #161]
  98:	ldr	x1, [x21, #168]
  9c:	bl	0 <_ZN11__sanitizer18InitializeCoverageEbPKc>
  a0:	bl	0 <_ZN7__ubsan22InitializeSuppressionsEv>
  a4:	mov	w0, #0x1                   	// #1
  a8:	strb	w0, [x20, #1]
  ac:	ldr	x21, [sp, #16]
  b0:	dmb	ish
  b4:	strb	wzr, [x19]
  b8:	ldr	x30, [sp, #24]
  bc:	ldp	x19, x20, [sp], #32
  c0:	ret
  c4:	nop

00000000000000c8 <_ZN7__ubsan27InitAsStandaloneIfNecessaryEv>:
  c8:	b	10 <_ZN7__ubsan16InitAsStandaloneEv>
  cc:	nop

00000000000000d0 <_ZN7__ubsan12InitAsPluginEv>:
  d0:	stp	x19, x20, [sp, #-32]!
  d4:	adrp	x19, 0 <_ZN7__ubsan22GetSanititizerToolNameEv>
  d8:	add	x0, x19, #0x0
  dc:	mov	w2, #0x1                   	// #1
  e0:	str	x30, [sp, #16]
  e4:	ldxrb	w1, [x0]
  e8:	stxrb	w3, w2, [x0]
  ec:	cbnz	w3, e4 <_ZN7__ubsan12InitAsPluginEv+0x14>
  f0:	dmb	ish
  f4:	tst	w1, #0xff
  f8:	b.eq	100 <_ZN7__ubsan12InitAsPluginEv+0x30>  // b.none
  fc:	bl	0 <_ZN7__ubsan22GetSanititizerToolNameEv>
 100:	add	x20, x19, #0x0
 104:	ldrb	w0, [x20, #1]
 108:	cbz	w0, 120 <_ZN7__ubsan12InitAsPluginEv+0x50>
 10c:	dmb	ish
 110:	strb	wzr, [x19]
 114:	ldr	x30, [sp, #16]
 118:	ldp	x19, x20, [sp], #32
 11c:	ret
 120:	bl	0 <_ZN7__ubsan22InitializeSuppressionsEv>
 124:	mov	w0, #0x1                   	// #1
 128:	strb	w0, [x20, #1]
 12c:	dmb	ish
 130:	strb	wzr, [x19]
 134:	ldr	x30, [sp, #16]
 138:	ldp	x19, x20, [sp], #32
 13c:	ret

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x20, x0
   8:	mov	w19, #0x0                   	// #0
   c:	stp	x21, x30, [sp, #16]
  10:	mov	w21, #0x1                   	// #1
  14:	nop
  18:	cmp	w19, #0x9
  1c:	b.gt	58 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x58>
  20:	ldrb	w0, [x20]
  24:	tst	w0, #0xff
  28:	b.ne	44 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x44>  // b.any
  2c:	ldxrb	w0, [x20]
  30:	stxrb	w1, w21, [x20]
  34:	cbnz	w1, 2c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x2c>
  38:	dmb	ish
  3c:	tst	w0, #0xff
  40:	b.eq	4c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x4c>  // b.none
  44:	add	w19, w19, #0x1
  48:	b	18 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x18>
  4c:	ldp	x21, x30, [sp, #16]
  50:	ldp	x19, x20, [sp], #32
  54:	ret
  58:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  5c:	b	20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>

ubsan_monitor.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN7__ubsan31RegisterUndefinedBehaviorReportEPNS_23UndefinedBehaviorReportE>:
   0:	adrp	x1, 0 <_ZN7__ubsan31RegisterUndefinedBehaviorReportEPNS_23UndefinedBehaviorReportE>
   4:	str	x0, [x1]
   8:	ret
   c:	nop

0000000000000010 <__ubsan_on_report>:
  10:	ret
  14:	nop

0000000000000018 <_ZN7__ubsan23UndefinedBehaviorReportC1EPKcRNS_8LocationERN11__sanitizer20InternalScopedStringE>:
  18:	stp	x19, x20, [sp, #-80]!
  1c:	add	x20, x0, #0x10
  20:	mov	x19, x0
  24:	stp	x21, x22, [sp, #16]
  28:	stp	x23, x24, [sp, #32]
  2c:	stp	x25, x26, [sp, #48]
  30:	str	x30, [sp, #64]
  34:	stp	x1, x2, [x0]
  38:	ldr	x0, [x3, #24]
  3c:	stp	xzr, xzr, [x20, #8]
  40:	str	xzr, [x19, #16]
  44:	adds	x21, x0, #0x1
  48:	b.ne	70 <_ZN7__ubsan23UndefinedBehaviorReportC1EPKcRNS_8LocationERN11__sanitizer20InternalScopedStringE+0x58>  // b.any
  4c:	str	xzr, [x20, #24]
  50:	adrp	x2, 0 <_ZN7__ubsan31RegisterUndefinedBehaviorReportEPNS_23UndefinedBehaviorReportE>
  54:	adrp	x0, 0 <_ZN7__ubsan31RegisterUndefinedBehaviorReportEPNS_23UndefinedBehaviorReportE>
  58:	add	x2, x2, #0x0
  5c:	add	x0, x0, #0x0
  60:	mov	x4, #0x0                   	// #0
  64:	mov	x3, #0x0                   	// #0
  68:	mov	w1, #0x1b6                 	// #438
  6c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  70:	adrp	x25, 0 <_ZN11__sanitizer14PageSizeCachedE>
  74:	mov	x22, x3
  78:	ldr	x23, [x25]
  7c:	ldr	x0, [x23]
  80:	cbz	x0, 138 <_ZN7__ubsan23UndefinedBehaviorReportC1EPKcRNS_8LocationERN11__sanitizer20InternalScopedStringE+0x120>
  84:	sub	x1, x0, #0x1
  88:	tst	x0, x1
  8c:	b.ne	1b0 <_ZN7__ubsan23UndefinedBehaviorReportC1EPKcRNS_8LocationERN11__sanitizer20InternalScopedStringE+0x198>  // b.any
  90:	add	x1, x21, x1
  94:	neg	x0, x0
  98:	and	x24, x1, x0
  9c:	mov	w2, #0x0                   	// #0
  a0:	mov	x0, x24
  a4:	adrp	x26, 0 <_ZN7__ubsan31RegisterUndefinedBehaviorReportEPNS_23UndefinedBehaviorReportE>
  a8:	add	x1, x26, #0x0
  ac:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  b0:	ldr	x2, [x20, #16]
  b4:	mov	x23, x0
  b8:	ldr	x1, [x19, #16]
  bc:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  c0:	ldr	x1, [x20, #8]
  c4:	ldr	x0, [x19, #16]
  c8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  cc:	ldr	x2, [x20, #16]
  d0:	str	x23, [x19, #16]
  d4:	str	x24, [x20, #8]
  d8:	cmp	x21, x2
  dc:	b.ls	fc <_ZN7__ubsan23UndefinedBehaviorReportC1EPKcRNS_8LocationERN11__sanitizer20InternalScopedStringE+0xe4>  // b.plast
  e0:	cmp	x21, x24
  e4:	b.hi	144 <_ZN7__ubsan23UndefinedBehaviorReportC1EPKcRNS_8LocationERN11__sanitizer20InternalScopedStringE+0x12c>  // b.pmore
  e8:	add	x0, x23, x2
  ec:	mov	w1, #0x0                   	// #0
  f0:	sub	x2, x21, x2
  f4:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  f8:	ldr	x23, [x19, #16]
  fc:	stp	x21, xzr, [x20, #16]
 100:	mov	x0, x19
 104:	strb	wzr, [x23]
 108:	bl	0 <_ZN7__ubsan31RegisterUndefinedBehaviorReportEPNS_23UndefinedBehaviorReportE>
 10c:	ldr	x2, [x22]
 110:	mov	x0, x20
 114:	adrp	x1, 0 <_ZN7__ubsan31RegisterUndefinedBehaviorReportEPNS_23UndefinedBehaviorReportE>
 118:	add	x1, x1, #0x0
 11c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 120:	ldp	x21, x22, [sp, #16]
 124:	ldp	x23, x24, [sp, #32]
 128:	ldp	x25, x26, [sp, #48]
 12c:	ldr	x30, [sp, #64]
 130:	ldp	x19, x20, [sp], #80
 134:	b	10 <__ubsan_on_report>
 138:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 13c:	str	x0, [x23]
 140:	b	84 <_ZN7__ubsan23UndefinedBehaviorReportC1EPKcRNS_8LocationERN11__sanitizer20InternalScopedStringE+0x6c>
 144:	ldr	x25, [x25]
 148:	ldr	x0, [x25]
 14c:	cbz	x0, 1a4 <_ZN7__ubsan23UndefinedBehaviorReportC1EPKcRNS_8LocationERN11__sanitizer20InternalScopedStringE+0x18c>
 150:	sub	x1, x0, #0x1
 154:	tst	x1, x0
 158:	b.ne	1b0 <_ZN7__ubsan23UndefinedBehaviorReportC1EPKcRNS_8LocationERN11__sanitizer20InternalScopedStringE+0x198>  // b.any
 15c:	add	x1, x21, x1
 160:	neg	x0, x0
 164:	and	x24, x1, x0
 168:	mov	w2, #0x0                   	// #0
 16c:	add	x1, x26, #0x0
 170:	mov	x0, x24
 174:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 178:	mov	x23, x0
 17c:	ldr	x2, [x20, #16]
 180:	ldr	x1, [x19, #16]
 184:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 188:	ldr	x1, [x20, #8]
 18c:	ldr	x0, [x19, #16]
 190:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 194:	ldr	x2, [x20, #16]
 198:	str	x23, [x19, #16]
 19c:	str	x24, [x20, #8]
 1a0:	b	e8 <_ZN7__ubsan23UndefinedBehaviorReportC1EPKcRNS_8LocationERN11__sanitizer20InternalScopedStringE+0xd0>
 1a4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 1a8:	str	x0, [x25]
 1ac:	b	150 <_ZN7__ubsan23UndefinedBehaviorReportC1EPKcRNS_8LocationERN11__sanitizer20InternalScopedStringE+0x138>
 1b0:	adrp	x0, 0 <_ZN7__ubsan31RegisterUndefinedBehaviorReportEPNS_23UndefinedBehaviorReportE>
 1b4:	add	x0, x0, #0x0
 1b8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 1bc:	bl	0 <_ZN11__sanitizer3DieEv>

00000000000001c0 <__ubsan_get_current_report_data>:
 1c0:	cmp	x0, #0x0
 1c4:	ccmp	x1, #0x0, #0x4, ne  // ne = any
 1c8:	b.eq	298 <__ubsan_get_current_report_data+0xd8>  // b.none
 1cc:	cmp	x2, #0x0
 1d0:	ccmp	x3, #0x0, #0x4, ne  // ne = any
 1d4:	b.eq	298 <__ubsan_get_current_report_data+0xd8>  // b.none
 1d8:	cmp	x4, #0x0
 1dc:	ccmp	x5, #0x0, #0x4, ne  // ne = any
 1e0:	b.eq	298 <__ubsan_get_current_report_data+0xd8>  // b.none
 1e4:	adrp	x6, 0 <_ZN7__ubsan31RegisterUndefinedBehaviorReportEPNS_23UndefinedBehaviorReportE>
 1e8:	ldr	x6, [x6]
 1ec:	ldr	x9, [x6, #16]
 1f0:	ldrb	w8, [x9]
 1f4:	sub	w7, w8, #0x61
 1f8:	and	w7, w7, #0xff
 1fc:	cmp	w7, #0x19
 200:	b.ls	248 <__ubsan_get_current_report_data+0x88>  // b.plast
 204:	ldr	x7, [x6]
 208:	str	x7, [x0]
 20c:	ldp	x7, x0, [x6, #8]
 210:	str	x0, [x1]
 214:	ldr	w1, [x7]
 218:	cmp	w1, #0x1
 21c:	b.eq	26c <__ubsan_get_current_report_data+0xac>  // b.none
 220:	adrp	x0, 0 <_ZN7__ubsan31RegisterUndefinedBehaviorReportEPNS_23UndefinedBehaviorReportE>
 224:	add	x0, x0, #0x0
 228:	str	x0, [x2]
 22c:	cmp	w1, #0x2
 230:	str	wzr, [x4]
 234:	str	wzr, [x3]
 238:	b.eq	28c <__ubsan_get_current_report_data+0xcc>  // b.none
 23c:	mov	x0, #0x0                   	// #0
 240:	str	x0, [x5]
 244:	ret
 248:	sub	w8, w8, #0x20
 24c:	strb	w8, [x9]
 250:	ldr	x7, [x6]
 254:	str	x7, [x0]
 258:	ldp	x7, x0, [x6, #8]
 25c:	str	x0, [x1]
 260:	ldr	w1, [x7]
 264:	cmp	w1, #0x1
 268:	b.ne	220 <__ubsan_get_current_report_data+0x60>  // b.any
 26c:	ldr	x8, [x7, #8]
 270:	mov	x0, #0x0                   	// #0
 274:	ldp	w6, w1, [x7, #16]
 278:	str	x8, [x2]
 27c:	str	w6, [x3]
 280:	str	w1, [x4]
 284:	str	x0, [x5]
 288:	ret
 28c:	ldr	x0, [x7, #24]
 290:	str	x0, [x5]
 294:	ret
 298:	str	x30, [sp, #-16]!
 29c:	adrp	x2, 0 <_ZN7__ubsan31RegisterUndefinedBehaviorReportEPNS_23UndefinedBehaviorReportE>
 2a0:	adrp	x0, 0 <_ZN7__ubsan31RegisterUndefinedBehaviorReportEPNS_23UndefinedBehaviorReportE>
 2a4:	add	x2, x2, #0x0
 2a8:	add	x0, x0, #0x0
 2ac:	mov	x4, #0x0                   	// #0
 2b0:	mov	x3, #0x0                   	// #0
 2b4:	mov	w1, #0x30                  	// #48
 2b8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

ubsan_type_hash.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN7__ubsan28getDynamicTypeInfoFromObjectEPv>:
   0:	ldr	x0, [x0]
   4:	str	x30, [sp, #-16]!
   8:	bl	0 <_ZN7__ubsan28getDynamicTypeInfoFromVtableEPv>
   c:	ldr	x30, [sp], #16
  10:	ret

ubsan_type_hash_itanium.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	mov	x20, x0
   8:	str	x30, [sp, #40]
   c:	cbz	x1, 104 <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl+0x104>
  10:	cbz	x0, 10c <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl+0x10c>
  14:	stp	x21, x22, [sp, #16]
  18:	adrp	x22, 0 <_ZTIN10__cxxabiv120__si_class_type_infoE>
  1c:	adrp	x21, 0 <_ZTIN10__cxxabiv117__class_type_infoE>
  20:	ldr	x22, [x22]
  24:	str	x23, [sp, #32]
  28:	ldr	x21, [x21]
  2c:	mov	x23, x1
  30:	b	3c <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl+0x3c>
  34:	ldr	x20, [x0, #16]
  38:	cbz	x20, cc <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl+0xcc>
  3c:	mov	x2, x22
  40:	mov	x1, x21
  44:	mov	x0, x20
  48:	mov	x3, #0x0                   	// #0
  4c:	bl	0 <__dynamic_cast>
  50:	mov	x19, x0
  54:	cbnz	x0, 34 <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl+0x34>
  58:	adrp	x2, 0 <_ZTIN10__cxxabiv121__vmi_class_type_infoE>
  5c:	mov	x1, x21
  60:	mov	x0, x20
  64:	mov	x3, #0x0                   	// #0
  68:	ldr	x2, [x2]
  6c:	bl	0 <__dynamic_cast>
  70:	cbz	x0, b4 <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl+0xb4>
  74:	ldr	w21, [x0, #20]
  78:	cbz	w21, b4 <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl+0xb4>
  7c:	sub	w21, w21, #0x1
  80:	add	x1, x0, #0x28
  84:	add	x20, x0, #0x18
  88:	add	x21, x1, w21, uxtw #4
  8c:	nop
  90:	ldr	x0, [x20, #8]
  94:	sub	x1, x23, x0, asr #8
  98:	tbnz	w0, #0, a8 <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl+0xa8>
  9c:	ldr	x0, [x20]
  a0:	bl	0 <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl>
  a4:	cbnz	x0, e8 <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl+0xe8>
  a8:	add	x20, x20, #0x10
  ac:	cmp	x20, x21
  b0:	b.ne	90 <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl+0x90>  // b.any
  b4:	ldp	x21, x22, [sp, #16]
  b8:	ldr	x23, [sp, #32]
  bc:	mov	x0, x19
  c0:	ldr	x30, [sp, #40]
  c4:	ldp	x19, x20, [sp], #48
  c8:	ret
  cc:	mov	x19, #0x0                   	// #0
  d0:	mov	x0, x19
  d4:	ldp	x21, x22, [sp, #16]
  d8:	ldr	x23, [sp, #32]
  dc:	ldr	x30, [sp, #40]
  e0:	ldp	x19, x20, [sp], #48
  e4:	ret
  e8:	mov	x19, x0
  ec:	mov	x0, x19
  f0:	ldp	x21, x22, [sp, #16]
  f4:	ldr	x23, [sp, #32]
  f8:	ldr	x30, [sp, #40]
  fc:	ldp	x19, x20, [sp], #48
 100:	ret
 104:	mov	x19, x0
 108:	b	bc <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl+0xbc>
 10c:	mov	x19, #0x0                   	// #0
 110:	b	bc <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl+0xbc>
 114:	nop

0000000000000118 <_ZL21isDerivedFromAtOffsetPKN10__cxxabiv117__class_type_infoES2_l>:
 118:	stp	x19, x20, [sp, #-48]!
 11c:	mov	x19, x0
 120:	mov	x20, x1
 124:	ldr	x0, [x0, #8]
 128:	stp	x23, x30, [sp, #32]
 12c:	mov	x23, x2
 130:	ldr	x1, [x1, #8]
 134:	cmp	x1, x0
 138:	b.eq	214 <_ZL21isDerivedFromAtOffsetPKN10__cxxabiv117__class_type_infoES2_l+0xfc>  // b.none
 13c:	stp	x21, x22, [sp, #16]
 140:	adrp	x22, 0 <_ZTIN10__cxxabiv120__si_class_type_infoE>
 144:	adrp	x21, 0 <_ZTIN10__cxxabiv117__class_type_infoE>
 148:	ldr	x22, [x22]
 14c:	ldr	x21, [x21]
 150:	b	168 <_ZL21isDerivedFromAtOffsetPKN10__cxxabiv117__class_type_infoES2_l+0x50>
 154:	ldr	x19, [x0, #16]
 158:	ldr	x1, [x20, #8]
 15c:	ldr	x0, [x19, #8]
 160:	cmp	x0, x1
 164:	b.eq	210 <_ZL21isDerivedFromAtOffsetPKN10__cxxabiv117__class_type_infoES2_l+0xf8>  // b.none
 168:	ldrb	w3, [x0]
 16c:	cmp	w3, #0x2a
 170:	b.eq	17c <_ZL21isDerivedFromAtOffsetPKN10__cxxabiv117__class_type_infoES2_l+0x64>  // b.none
 174:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 178:	cbz	w0, 210 <_ZL21isDerivedFromAtOffsetPKN10__cxxabiv117__class_type_infoES2_l+0xf8>
 17c:	mov	x2, x22
 180:	mov	x1, x21
 184:	mov	x0, x19
 188:	mov	x3, #0x0                   	// #0
 18c:	bl	0 <__dynamic_cast>
 190:	cbnz	x0, 154 <_ZL21isDerivedFromAtOffsetPKN10__cxxabiv117__class_type_infoES2_l+0x3c>
 194:	adrp	x2, 0 <_ZTIN10__cxxabiv121__vmi_class_type_infoE>
 198:	mov	x1, x21
 19c:	mov	x0, x19
 1a0:	mov	x3, #0x0                   	// #0
 1a4:	ldr	x2, [x2]
 1a8:	bl	0 <__dynamic_cast>
 1ac:	mov	x21, x0
 1b0:	cbz	x0, 1fc <_ZL21isDerivedFromAtOffsetPKN10__cxxabiv117__class_type_infoES2_l+0xe4>
 1b4:	ldr	w0, [x0, #20]
 1b8:	cbz	w0, 1fc <_ZL21isDerivedFromAtOffsetPKN10__cxxabiv117__class_type_infoES2_l+0xe4>
 1bc:	mov	w19, #0x0                   	// #0
 1c0:	ubfiz	x3, x19, #4, #32
 1c4:	mov	x1, x20
 1c8:	add	x3, x21, x3
 1cc:	add	w19, w19, #0x1
 1d0:	ldr	x0, [x3, #32]
 1d4:	asr	x2, x0, #8
 1d8:	tbnz	w0, #0, 228 <_ZL21isDerivedFromAtOffsetPKN10__cxxabiv117__class_type_infoES2_l+0x110>
 1dc:	ldr	x0, [x3, #24]
 1e0:	sub	x2, x23, x2
 1e4:	bl	118 <_ZL21isDerivedFromAtOffsetPKN10__cxxabiv117__class_type_infoES2_l>
 1e8:	tst	w0, #0xff
 1ec:	b.ne	228 <_ZL21isDerivedFromAtOffsetPKN10__cxxabiv117__class_type_infoES2_l+0x110>  // b.any
 1f0:	ldr	w0, [x21, #20]
 1f4:	cmp	w0, w19
 1f8:	b.ne	1c0 <_ZL21isDerivedFromAtOffsetPKN10__cxxabiv117__class_type_infoES2_l+0xa8>  // b.any
 1fc:	mov	w0, #0x0                   	// #0
 200:	ldp	x21, x22, [sp, #16]
 204:	ldp	x23, x30, [sp, #32]
 208:	ldp	x19, x20, [sp], #48
 20c:	ret
 210:	ldp	x21, x22, [sp, #16]
 214:	cmp	x23, #0x0
 218:	cset	w0, eq  // eq = none
 21c:	ldp	x23, x30, [sp, #32]
 220:	ldp	x19, x20, [sp], #48
 224:	ret
 228:	mov	w0, #0x1                   	// #1
 22c:	ldp	x21, x22, [sp, #16]
 230:	ldp	x23, x30, [sp, #32]
 234:	ldp	x19, x20, [sp], #48
 238:	ret
 23c:	nop

0000000000000240 <_ZN7__ubsan16checkDynamicTypeEPvS0_m>:
 240:	and	w8, w2, #0xffff
 244:	stp	x19, x20, [sp, #-48]!
 248:	eor	w8, w8, #0x1
 24c:	mov	x20, x1
 250:	adrp	x7, 0 <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl>
 254:	mov	x19, x2
 258:	mov	w3, w8
 25c:	lsr	w9, w2, #16
 260:	add	x1, x7, #0x0
 264:	mov	w6, #0x5                   	// #5
 268:	stp	x21, x22, [sp, #16]
 26c:	str	x30, [sp, #32]
 270:	mov	w2, w3
 274:	add	w4, w9, w3
 278:	add	w3, w4, #0x1
 27c:	sub	w4, w4, #0x10, lsl #12
 280:	ldr	x5, [x1, x2, lsl #3]
 284:	cmp	x19, x5
 288:	cbz	x5, 374 <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0x134>
 28c:	b.eq	374 <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0x134>  // b.none
 290:	cmp	w3, #0x10, lsl #12
 294:	csel	w3, w4, w3, hi  // hi = pmore
 298:	subs	w6, w6, #0x1
 29c:	b.ne	270 <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0x30>  // b.any
 2a0:	add	x7, x7, #0x0
 2a4:	mov	w1, w8
 2a8:	add	x22, x7, w8, uxth #3
 2ac:	ldr	x5, [x7, x1, lsl #3]
 2b0:	cmp	x5, x19
 2b4:	b.eq	350 <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0x110>  // b.none
 2b8:	ldr	x21, [x0]
 2bc:	mov	x1, #0x10                  	// #16
 2c0:	sub	x0, x21, #0x10
 2c4:	bl	0 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm>
 2c8:	tst	w0, #0xff
 2cc:	b.eq	33c <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0xfc>  // b.none
 2d0:	ldur	x0, [x21, #-8]
 2d4:	cbz	x0, 33c <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0xfc>
 2d8:	ldur	x21, [x21, #-16]
 2dc:	add	x1, x21, #0x100, lsl #12
 2e0:	cmp	x1, #0x200, lsl #12
 2e4:	b.hi	33c <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0xfc>  // b.pmore
 2e8:	adrp	x2, 0 <_ZTIN10__cxxabiv117__class_type_infoE>
 2ec:	adrp	x1, 0 <_ZTISt9type_info>
 2f0:	mov	x3, #0x0                   	// #0
 2f4:	ldr	x2, [x2]
 2f8:	ldr	x1, [x1]
 2fc:	bl	0 <__dynamic_cast>
 300:	cbz	x0, 33c <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0xfc>
 304:	neg	x2, x21
 308:	mov	x1, x20
 30c:	bl	118 <_ZL21isDerivedFromAtOffsetPKN10__cxxabiv117__class_type_infoES2_l>
 310:	ands	w0, w0, #0xff
 314:	b.eq	33c <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0xfc>  // b.none
 318:	adrp	x1, 0 <__ubsan_vptr_type_cache>
 31c:	and	x2, x19, #0x7f
 320:	str	x19, [x22]
 324:	ldr	x1, [x1]
 328:	ldp	x21, x22, [sp, #16]
 32c:	str	x19, [x1, x2, lsl #3]
 330:	ldr	x30, [sp, #32]
 334:	ldp	x19, x20, [sp], #48
 338:	ret
 33c:	mov	w0, #0x0                   	// #0
 340:	ldp	x21, x22, [sp, #16]
 344:	ldr	x30, [sp, #32]
 348:	ldp	x19, x20, [sp], #48
 34c:	ret
 350:	adrp	x1, 0 <__ubsan_vptr_type_cache>
 354:	and	x2, x5, #0x7f
 358:	mov	w0, #0x1                   	// #1
 35c:	ldr	x1, [x1]
 360:	ldp	x21, x22, [sp, #16]
 364:	str	x5, [x1, x2, lsl #3]
 368:	ldr	x30, [sp, #32]
 36c:	ldp	x19, x20, [sp], #48
 370:	ret
 374:	add	x7, x7, #0x0
 378:	add	x22, x7, x2, lsl #3
 37c:	b	2b0 <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0x70>

0000000000000380 <_ZN7__ubsan28getDynamicTypeInfoFromVtableEPv>:
 380:	stp	x19, x20, [sp, #-32]!
 384:	mov	x1, #0x10                  	// #16
 388:	mov	x20, x0
 38c:	mov	x19, x8
 390:	sub	x0, x0, #0x10
 394:	str	x30, [sp, #24]
 398:	bl	0 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm>
 39c:	tst	w0, #0xff
 3a0:	b.eq	410 <_ZN7__ubsan28getDynamicTypeInfoFromVtableEPv+0x90>  // b.none
 3a4:	str	x21, [sp, #16]
 3a8:	ldur	x21, [x20, #-8]
 3ac:	cbz	x21, 40c <_ZN7__ubsan28getDynamicTypeInfoFromVtableEPv+0x8c>
 3b0:	ldur	x1, [x20, #-16]
 3b4:	add	x0, x1, #0x100, lsl #12
 3b8:	cmp	x0, #0x200, lsl #12
 3bc:	b.ls	3d8 <_ZN7__ubsan28getDynamicTypeInfoFromVtableEPv+0x58>  // b.plast
 3c0:	ldr	x21, [sp, #16]
 3c4:	stp	xzr, x1, [x19]
 3c8:	str	xzr, [x19, #16]
 3cc:	ldr	x30, [sp, #24]
 3d0:	ldp	x19, x20, [sp], #32
 3d4:	ret
 3d8:	neg	x20, x1
 3dc:	mov	x0, x21
 3e0:	mov	x1, x20
 3e4:	bl	0 <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl>
 3e8:	ldr	x1, [x21, #8]
 3ec:	cbz	x0, 424 <_ZN7__ubsan28getDynamicTypeInfoFromVtableEPv+0xa4>
 3f0:	ldr	x0, [x0, #8]
 3f4:	ldr	x21, [sp, #16]
 3f8:	stp	x1, x20, [x19]
 3fc:	str	x0, [x19, #16]
 400:	ldr	x30, [sp, #24]
 404:	ldp	x19, x20, [sp], #32
 408:	ret
 40c:	ldr	x21, [sp, #16]
 410:	stp	xzr, xzr, [x19]
 414:	str	xzr, [x19, #16]
 418:	ldr	x30, [sp, #24]
 41c:	ldp	x19, x20, [sp], #32
 420:	ret
 424:	adrp	x0, 0 <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl>
 428:	add	x0, x0, #0x0
 42c:	b	3f4 <_ZN7__ubsan28getDynamicTypeInfoFromVtableEPv+0x74>

ubsan_type_hash_win.o:     file format elf64-littleaarch64


ubsan_value.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZNK7__ubsan5Value12getSIntValueEv>:
   0:	ldr	x1, [x0]
   4:	str	x30, [sp, #-16]!
   8:	ldrh	w2, [x1]
   c:	cbnz	w2, 44 <_ZNK7__ubsan5Value12getSIntValueEv+0x44>
  10:	ldrh	w1, [x1, #2]
  14:	tbz	w1, #0, 44 <_ZNK7__ubsan5Value12getSIntValueEv+0x44>
  18:	asr	w2, w1, #1
  1c:	mov	w1, #0x1                   	// #1
  20:	lsl	w1, w1, w2
  24:	cmp	w1, #0x40
  28:	b.ls	64 <_ZNK7__ubsan5Value12getSIntValueEv+0x64>  // b.plast
  2c:	cmp	w1, #0x80
  30:	b.ne	c4 <_ZNK7__ubsan5Value12getSIntValueEv+0xc4>  // b.any
  34:	ldr	x1, [x0, #8]
  38:	ldr	x30, [sp], #16
  3c:	ldp	x0, x1, [x1]
  40:	ret
  44:	adrp	x2, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
  48:	adrp	x0, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
  4c:	add	x2, x2, #0x0
  50:	add	x0, x0, #0x0
  54:	mov	x4, #0x0                   	// #0
  58:	mov	x3, #0x0                   	// #0
  5c:	mov	w1, #0x16                  	// #22
  60:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  64:	ldr	x0, [x0, #8]
  68:	mov	w2, #0x80                  	// #128
  6c:	sub	w2, w2, w1
  70:	mov	w4, #0x3f                  	// #63
  74:	sub	w3, w2, #0x40
  78:	sub	w4, w4, w2
  7c:	lsr	x5, x0, #1
  80:	cmp	w3, #0x0
  84:	lsl	x1, x0, x3
  88:	lsr	x5, x5, x4
  8c:	csel	x1, x1, x5, ge  // ge = tcont
  90:	lsl	x0, x0, x2
  94:	csel	x0, xzr, x0, ge  // ge = tcont
  98:	lsl	x5, x1, #1
  9c:	asr	x6, x1, #63
  a0:	lsr	x0, x0, x2
  a4:	lsl	x4, x5, x4
  a8:	orr	x0, x4, x0
  ac:	asr	x7, x1, x3
  b0:	csel	x0, x7, x0, ge  // ge = tcont
  b4:	asr	x1, x1, x2
  b8:	csel	x1, x6, x1, ge  // ge = tcont
  bc:	ldr	x30, [sp], #16
  c0:	ret
  c4:	adrp	x2, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
  c8:	adrp	x0, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
  cc:	add	x2, x2, #0x0
  d0:	add	x0, x0, #0x0
  d4:	mov	x4, #0x0                   	// #0
  d8:	mov	x3, #0x0                   	// #0
  dc:	mov	w1, #0x27                  	// #39
  e0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  e4:	nop

00000000000000e8 <_ZNK7__ubsan5Value12getUIntValueEv>:
  e8:	ldr	x1, [x0]
  ec:	str	x30, [sp, #-16]!
  f0:	ldrh	w2, [x1]
  f4:	cbnz	w2, 124 <_ZNK7__ubsan5Value12getUIntValueEv+0x3c>
  f8:	ldrh	w1, [x1, #2]
  fc:	tbnz	w1, #0, 124 <_ZNK7__ubsan5Value12getUIntValueEv+0x3c>
 100:	asr	w1, w1, #1
 104:	mov	w2, #0x1                   	// #1
 108:	lsl	w1, w2, w1
 10c:	cmp	w1, #0x40
 110:	b.hi	144 <_ZNK7__ubsan5Value12getUIntValueEv+0x5c>  // b.pmore
 114:	mov	x1, #0x0                   	// #0
 118:	ldr	x0, [x0, #8]
 11c:	ldr	x30, [sp], #16
 120:	ret
 124:	adrp	x2, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
 128:	adrp	x0, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
 12c:	add	x2, x2, #0x0
 130:	add	x0, x0, #0x0
 134:	mov	x4, #0x0                   	// #0
 138:	mov	x3, #0x0                   	// #0
 13c:	mov	w1, #0x2b                  	// #43
 140:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 144:	cmp	w1, #0x80
 148:	b.ne	15c <_ZNK7__ubsan5Value12getUIntValueEv+0x74>  // b.any
 14c:	ldr	x1, [x0, #8]
 150:	ldr	x30, [sp], #16
 154:	ldp	x0, x1, [x1]
 158:	ret
 15c:	adrp	x2, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
 160:	adrp	x0, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
 164:	add	x2, x2, #0x0
 168:	add	x0, x0, #0x0
 16c:	mov	x4, #0x0                   	// #0
 170:	mov	x3, #0x0                   	// #0
 174:	mov	w1, #0x37                  	// #55
 178:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 17c:	nop

0000000000000180 <_ZNK7__ubsan5Value19getPositiveIntValueEv>:
 180:	ldr	x2, [x0]
 184:	mov	x1, x0
 188:	ldrh	w3, [x2]
 18c:	cbnz	w3, 198 <_ZNK7__ubsan5Value19getPositiveIntValueEv+0x18>
 190:	ldrh	w2, [x2, #2]
 194:	tbz	w2, #0, 1b0 <_ZNK7__ubsan5Value19getPositiveIntValueEv+0x30>
 198:	str	x30, [sp, #-16]!
 19c:	mov	x0, x1
 1a0:	bl	0 <_ZNK7__ubsan5Value12getSIntValueEv>
 1a4:	tbnz	x1, #63, 1b4 <_ZNK7__ubsan5Value19getPositiveIntValueEv+0x34>
 1a8:	ldr	x30, [sp], #16
 1ac:	ret
 1b0:	b	e8 <_ZNK7__ubsan5Value12getUIntValueEv>
 1b4:	adrp	x2, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
 1b8:	adrp	x0, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
 1bc:	add	x2, x2, #0x0
 1c0:	add	x0, x0, #0x0
 1c4:	mov	x4, #0x0                   	// #0
 1c8:	mov	x3, #0x0                   	// #0
 1cc:	mov	w1, #0x3e                  	// #62
 1d0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 1d4:	nop

00000000000001d8 <_ZNK7__ubsan5Value13getFloatValueEv>:
 1d8:	ldr	x1, [x0]
 1dc:	str	x30, [sp, #-32]!
 1e0:	ldrh	w2, [x1]
 1e4:	cmp	w2, #0x1
 1e8:	b.ne	290 <_ZNK7__ubsan5Value13getFloatValueEv+0xb8>  // b.any
 1ec:	ldrh	w1, [x1, #2]
 1f0:	cmp	w1, #0x40
 1f4:	b.ls	218 <_ZNK7__ubsan5Value13getFloatValueEv+0x40>  // b.plast
 1f8:	cmp	w1, #0x60
 1fc:	b.eq	208 <_ZNK7__ubsan5Value13getFloatValueEv+0x30>  // b.none
 200:	cmp	w1, #0x80
 204:	b.ne	240 <_ZNK7__ubsan5Value13getFloatValueEv+0x68>  // b.any
 208:	ldr	x0, [x0, #8]
 20c:	ldr	q0, [x0]
 210:	ldr	x30, [sp], #32
 214:	ret
 218:	cmp	w1, #0x20
 21c:	b.ne	268 <_ZNK7__ubsan5Value13getFloatValueEv+0x90>  // b.any
 220:	add	x1, x0, #0x8
 224:	mov	x2, #0x4                   	// #4
 228:	add	x0, sp, #0x18
 22c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 230:	ldr	s0, [sp, #24]
 234:	bl	0 <__extendsftf2>
 238:	ldr	x30, [sp], #32
 23c:	ret
 240:	cmp	w1, #0x50
 244:	b.eq	208 <_ZNK7__ubsan5Value13getFloatValueEv+0x30>  // b.none
 248:	adrp	x2, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
 24c:	adrp	x0, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
 250:	add	x2, x2, #0x0
 254:	add	x0, x0, #0x0
 258:	mov	x4, #0x0                   	// #0
 25c:	mov	x3, #0x0                   	// #0
 260:	mov	w1, #0x6c                  	// #108
 264:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 268:	cmp	w1, #0x40
 26c:	b.ne	248 <_ZNK7__ubsan5Value13getFloatValueEv+0x70>  // b.any
 270:	add	x1, x0, #0x8
 274:	mov	x2, #0x8                   	// #8
 278:	add	x0, sp, #0x18
 27c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 280:	ldr	d0, [sp, #24]
 284:	bl	0 <__extenddftf2>
 288:	ldr	x30, [sp], #32
 28c:	ret
 290:	adrp	x2, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
 294:	adrp	x0, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
 298:	add	x2, x2, #0x0
 29c:	add	x0, x0, #0x0
 2a0:	mov	x4, #0x0                   	// #0
 2a4:	mov	x3, #0x0                   	// #0
 2a8:	mov	w1, #0x46                  	// #70
 2ac:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

sancov_flags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__sancov_default_options>:
   0:	adrp	x0, 0 <__sancov_default_options>
   4:	add	x0, x0, #0x0
   8:	ret
   c:	nop

0000000000000010 <_ZN8__sancov11SancovFlags11SetDefaultsEv>:
  10:	mov	w1, #0x1                   	// #1
  14:	strh	w1, [x0]
  18:	ret
  1c:	nop

0000000000000020 <_ZN8__sancov21InitializeSancovFlagsEv>:
  20:	stp	x19, x20, [sp, #-80]!
  24:	adrp	x0, 0 <__sancov_default_options>
  28:	mov	w1, #0x1                   	// #1
  2c:	stp	x21, x22, [sp, #16]
  30:	adrp	x21, 0 <_ZN11__sanitizer10FlagParser5AllocE>
  34:	add	x19, sp, #0x30
  38:	add	x22, x0, #0x0
  3c:	strh	w1, [x0]
  40:	mov	x0, x19
  44:	str	x30, [sp, #32]
  48:	bl	0 <_ZN11__sanitizer10FlagParserC1Ev>
  4c:	adrp	x20, 0 <__sancov_default_options>
  50:	ldr	x21, [x21]
  54:	mov	x1, #0x10                  	// #16
  58:	add	x20, x20, #0x0
  5c:	mov	x0, x21
  60:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
  64:	mov	x2, x0
  68:	adrp	x3, 0 <__sancov_default_options>
  6c:	add	x3, x3, #0x0
  70:	mov	x0, x19
  74:	adrp	x1, 0 <__sancov_default_options>
  78:	add	x1, x1, #0x0
  7c:	stp	x20, x22, [x2]
  80:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
  84:	mov	x1, #0x10                  	// #16
  88:	mov	x0, x21
  8c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
  90:	mov	x2, x0
  94:	add	x4, x22, #0x1
  98:	mov	x0, x19
  9c:	adrp	x3, 0 <__sancov_default_options>
  a0:	adrp	x1, 0 <__sancov_default_options>
  a4:	add	x3, x3, #0x0
  a8:	add	x1, x1, #0x0
  ac:	stp	x20, x4, [x2]
  b0:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
  b4:	bl	0 <__sancov_default_options>
  b8:	mov	x1, x0
  bc:	mov	x0, x19
  c0:	bl	0 <_ZN11__sanitizer10FlagParser11ParseStringEPKc>
  c4:	adrp	x0, 0 <__sancov_default_options>
  c8:	add	x0, x0, #0x0
  cc:	bl	0 <_ZN11__sanitizer6GetEnvEPKc>
  d0:	mov	x1, x0
  d4:	mov	x0, x19
  d8:	bl	0 <_ZN11__sanitizer10FlagParser11ParseStringEPKc>
  dc:	bl	0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
  e0:	ldrb	w0, [x22, #1]
  e4:	cbnz	w0, f8 <_ZN8__sancov21InitializeSancovFlagsEv+0xd8>
  e8:	ldp	x21, x22, [sp, #16]
  ec:	ldr	x30, [sp, #32]
  f0:	ldp	x19, x20, [sp], #80
  f4:	ret
  f8:	mov	x0, x19
  fc:	bl	0 <_ZN11__sanitizer10FlagParser21PrintFlagDescriptionsEv>
 100:	ldp	x21, x22, [sp, #16]
 104:	ldr	x30, [sp, #32]
 108:	ldp	x19, x20, [sp], #80
 10c:	ret

Disassembly of section .text._ZN11__sanitizer11FlagHandlerIbE5ParseEPKc:

0000000000000000 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>:
   0:	mov	x2, x0
   4:	stp	x19, x20, [sp, #-32]!
   8:	mov	x19, x1
   c:	mov	x0, x19
  10:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  14:	add	x1, x1, #0x0
  18:	ldr	x20, [x2, #8]
  1c:	str	x30, [sp, #16]
  20:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  24:	cbnz	w0, 3c <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x3c>
  28:	mov	w0, #0x1                   	// #1
  2c:	strb	wzr, [x20]
  30:	ldr	x30, [sp, #16]
  34:	ldp	x19, x20, [sp], #32
  38:	ret
  3c:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  40:	mov	x0, x19
  44:	add	x1, x1, #0x0
  48:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  4c:	cbz	w0, 28 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x28>
  50:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  54:	mov	x0, x19
  58:	add	x1, x1, #0x0
  5c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  60:	cbz	w0, 28 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x28>
  64:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  68:	mov	x0, x19
  6c:	add	x1, x1, #0x0
  70:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  74:	cbz	w0, 8c <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x8c>
  78:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  7c:	mov	x0, x19
  80:	add	x1, x1, #0x0
  84:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  88:	cbnz	w0, 9c <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x9c>
  8c:	mov	w1, #0x1                   	// #1
  90:	mov	w0, #0x1                   	// #1
  94:	strb	w1, [x20]
  98:	b	30 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x30>
  9c:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  a0:	mov	x0, x19
  a4:	add	x1, x1, #0x0
  a8:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  ac:	cbz	w0, 8c <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x8c>
  b0:	mov	x1, x19
  b4:	adrp	x0, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  b8:	add	x0, x0, #0x0
  bc:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  c0:	mov	w0, #0x0                   	// #0
  c4:	ldr	x30, [sp, #16]
  c8:	ldp	x19, x20, [sp], #32
  cc:	ret

sanitizer_allocator.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>:
   0:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
   4:	mov	x2, x0
   8:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
   c:	add	x0, x0, #0x0
  10:	ldr	x1, [x1]
  14:	adrp	x3, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  18:	mov	w4, #0x1                   	// #1
  1c:	str	x30, [sp, #-16]!
  20:	strb	w4, [x3]
  24:	ldr	x1, [x1]
  28:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  2c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000030 <_ZN11__sanitizer18internal_allocatorEv>:
  30:	stp	x19, x20, [sp, #-48]!
  34:	str	x30, [sp, #32]
  38:	adrp	x19, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  3c:	add	x0, x19, #0x0
  40:	ldrb	w1, [x0, #8]
  44:	dmb	ish
  48:	and	w1, w1, #0xff
  4c:	adrp	x20, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  50:	cbz	w1, 64 <_ZN11__sanitizer18internal_allocatorEv+0x34>
  54:	add	x0, x20, #0x0
  58:	ldr	x30, [sp, #32]
  5c:	ldp	x19, x20, [sp], #48
  60:	ret
  64:	add	x0, x0, #0x10
  68:	mov	w2, #0x1                   	// #1
  6c:	ldxrb	w1, [x0]
  70:	stxrb	w3, w2, [x0]
  74:	cbnz	w3, 6c <_ZN11__sanitizer18internal_allocatorEv+0x3c>
  78:	dmb	ish
  7c:	tst	w1, #0xff
  80:	b.eq	88 <_ZN11__sanitizer18internal_allocatorEv+0x58>  // b.none
  84:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  88:	add	x0, x19, #0x0
  8c:	adrp	x20, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  90:	ldrb	w0, [x0, #8]
  94:	tst	w0, #0xff
  98:	b.eq	b8 <_ZN11__sanitizer18internal_allocatorEv+0x88>  // b.none
  9c:	dmb	ish
  a0:	add	x19, x19, #0x0
  a4:	strb	wzr, [x19, #16]
  a8:	add	x0, x20, #0x0
  ac:	ldr	x30, [sp, #32]
  b0:	ldp	x19, x20, [sp], #48
  b4:	ret
  b8:	stp	x21, x22, [sp, #16]
  bc:	add	x21, x20, #0x0
  c0:	mov	x0, x21
  c4:	add	x21, x21, #0x80, lsl #12
  c8:	mov	x2, #0x80000               	// #524288
  cc:	mov	w1, #0x0                   	// #0
  d0:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  d4:	mov	x2, #0xd80                 	// #3456
  d8:	mov	w1, #0x0                   	// #0
  dc:	strb	wzr, [x21]
  e0:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  e4:	adrp	x21, 0 <_ZN11__sanitizer14PageSizeCachedE>
  e8:	add	x0, x0, #0x0
  ec:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  f0:	mov	x2, #0x248                 	// #584
  f4:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  f8:	movk	x2, #0x4, lsl #16
  fc:	add	x0, x0, #0x0
 100:	mov	w1, #0x0                   	// #0
 104:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 108:	ldr	x21, [x21]
 10c:	ldr	x3, [x21]
 110:	cbz	x3, 168 <_ZN11__sanitizer18internal_allocatorEv+0x138>
 114:	add	x21, x20, #0x0
 118:	adrp	x4, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 11c:	add	x5, x21, #0x80, lsl #12
 120:	add	x4, x4, #0x0
 124:	add	x21, x21, #0xc0, lsl #12
 128:	adrp	x22, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 12c:	mov	x2, #0x28                  	// #40
 130:	add	x0, x22, #0x0
 134:	str	x3, [x5, #3520]
 138:	add	x22, x22, #0x0
 13c:	str	x4, [x5, #3528]
 140:	mov	w1, #0x0                   	// #0
 144:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 148:	str	x22, [x21, #4104]
 14c:	str	x22, [x21, #4112]
 150:	dmb	ish
 154:	add	x0, x19, #0x0
 158:	mov	w1, #0x1                   	// #1
 15c:	strb	w1, [x0, #8]
 160:	ldp	x21, x22, [sp, #16]
 164:	b	9c <_ZN11__sanitizer18internal_allocatorEv+0x6c>
 168:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 16c:	mov	x3, x0
 170:	str	x0, [x21]
 174:	b	114 <_ZN11__sanitizer18internal_allocatorEv+0xe4>

0000000000000178 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>:
 178:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 17c:	stp	x19, x20, [sp, #-32]!
 180:	mov	x20, x0
 184:	ldr	x0, [x2]
 188:	str	x30, [sp, #24]
 18c:	sub	x19, x0, #0x1
 190:	tst	x0, x19
 194:	b.ne	23c <_ZN11__sanitizer17LowLevelAllocator8AllocateEm+0xc4>  // b.any
 198:	ldp	x3, x2, [x20]
 19c:	add	x1, x1, x19
 1a0:	neg	x19, x0
 1a4:	and	x19, x1, x19
 1a8:	sub	x0, x3, x2
 1ac:	cmp	x0, x19
 1b0:	b.ge	218 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm+0xa0>  // b.tcont
 1b4:	str	x21, [sp, #16]
 1b8:	adrp	x21, 0 <_ZN11__sanitizer14PageSizeCachedE>
 1bc:	ldr	x21, [x21]
 1c0:	ldr	x0, [x21]
 1c4:	cbz	x0, 230 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm+0xb8>
 1c8:	cmp	x19, x0
 1cc:	mov	w2, #0x0                   	// #0
 1d0:	csel	x21, x19, x0, cs  // cs = hs, nlast
 1d4:	adrp	x1, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 1d8:	mov	x0, x21
 1dc:	add	x1, x1, #0x0
 1e0:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 1e4:	add	x1, x0, x21
 1e8:	adrp	x3, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 1ec:	stp	x1, x0, [x20]
 1f0:	mov	x2, x0
 1f4:	ldr	x3, [x3]
 1f8:	cbz	x3, 208 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm+0x90>
 1fc:	mov	x1, x21
 200:	blr	x3
 204:	ldp	x1, x2, [x20]
 208:	sub	x1, x1, x2
 20c:	cmp	x19, x1
 210:	b.gt	250 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm+0xd8>
 214:	ldr	x21, [sp, #16]
 218:	add	x19, x2, x19
 21c:	ldr	x30, [sp, #24]
 220:	str	x19, [x20, #8]
 224:	mov	x0, x2
 228:	ldp	x19, x20, [sp], #32
 22c:	ret
 230:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 234:	str	x0, [x21]
 238:	b	1c8 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm+0x50>
 23c:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 240:	add	x0, x0, #0x0
 244:	str	x21, [sp, #16]
 248:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 24c:	bl	0 <_ZN11__sanitizer3DieEv>
 250:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 254:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 258:	add	x2, x2, #0x0
 25c:	add	x0, x0, #0x0
 260:	mov	x4, #0x0                   	// #0
 264:	mov	x3, #0x0                   	// #0
 268:	mov	w1, #0xd4                  	// #212
 26c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000270 <_ZN11__sanitizer31SetLowLevelAllocateMinAlignmentEm>:
 270:	sub	x1, x0, #0x1
 274:	tst	x1, x0
 278:	b.ne	294 <_ZN11__sanitizer31SetLowLevelAllocateMinAlignmentEm+0x24>  // b.any
 27c:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 280:	ldr	x1, [x2]
 284:	cmp	x1, x0
 288:	csel	x0, x1, x0, cs  // cs = hs, nlast
 28c:	str	x0, [x2]
 290:	ret
 294:	str	x30, [sp, #-16]!
 298:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 29c:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 2a0:	add	x2, x2, #0x0
 2a4:	add	x0, x0, #0x0
 2a8:	mov	x4, #0x0                   	// #0
 2ac:	mov	x3, #0x0                   	// #0
 2b0:	mov	w1, #0xdb                  	// #219
 2b4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000002b8 <_ZN11__sanitizer27SetLowLevelAllocateCallbackEPFvmmE>:
 2b8:	adrp	x1, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 2bc:	str	x0, [x1]
 2c0:	ret
 2c4:	nop

00000000000002c8 <_ZN11__sanitizer22IsAllocatorOutOfMemoryEv>:
 2c8:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 2cc:	ldrb	w0, [x0]
 2d0:	tst	w0, #0xff
 2d4:	cset	w0, ne  // ne = any
 2d8:	ret
 2dc:	nop

00000000000002e0 <_ZN11__sanitizer23SetAllocatorOutOfMemoryEv>:
 2e0:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 2e4:	mov	w1, #0x1                   	// #1
 2e8:	strb	w1, [x0]
 2ec:	ret

00000000000002f0 <_ZN11__sanitizer22AllocatorMayReturnNullEv>:
 2f0:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 2f4:	add	x0, x0, #0x0
 2f8:	ldrb	w0, [x0, #32]
 2fc:	tst	w0, #0xff
 300:	cset	w0, ne  // ne = any
 304:	ret

0000000000000308 <_ZN11__sanitizer25SetAllocatorMayReturnNullEb>:
 308:	adrp	x1, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 30c:	add	x1, x1, #0x0
 310:	and	w0, w0, #0xff
 314:	strb	w0, [x1, #32]
 318:	ret
 31c:	nop

0000000000000320 <_ZN11__sanitizer34PrintHintAllocatorCannotReturnNullEv>:
 320:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 324:	add	x0, x0, #0x0
 328:	b	0 <_ZN11__sanitizer6ReportEPKcz>
 32c:	nop

0000000000000330 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>:
 330:	cmn	x0, #0x9
 334:	b.hi	3e4 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm+0xb4>  // b.pmore
 338:	stp	x19, x20, [sp, #-32]!
 33c:	cmp	x2, #0x0
 340:	add	x20, x0, #0x8
 344:	stp	x21, x30, [sp, #16]
 348:	mov	x0, #0x8                   	// #8
 34c:	mov	x21, x1
 350:	csel	x19, x2, x0, ne  // ne = any
 354:	cbz	x1, 390 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm+0x60>
 358:	bl	30 <_ZN11__sanitizer18internal_allocatorEv>
 35c:	mov	x3, x19
 360:	mov	x2, x20
 364:	mov	x1, x21
 368:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 36c:	cbz	x0, 3ec <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm+0xbc>
 370:	mov	x1, #0xc041                	// #49217
 374:	movk	x1, #0xbceb, lsl #16
 378:	movk	x1, #0xb03a, lsl #32
 37c:	movk	x1, #0x6a6c, lsl #48
 380:	str	x1, [x0], #8
 384:	ldp	x21, x30, [sp, #16]
 388:	ldp	x19, x20, [sp], #32
 38c:	ret
 390:	adrp	x21, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 394:	add	x0, x21, #0x0
 398:	add	x0, x0, #0x28
 39c:	mov	w2, #0x1                   	// #1
 3a0:	ldxrb	w1, [x0]
 3a4:	stxrb	w3, w2, [x0]
 3a8:	cbnz	w3, 3a0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm+0x70>
 3ac:	dmb	ish
 3b0:	tst	w1, #0xff
 3b4:	b.eq	3bc <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm+0x8c>  // b.none
 3b8:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 3bc:	bl	30 <_ZN11__sanitizer18internal_allocatorEv>
 3c0:	mov	x3, x19
 3c4:	mov	x2, x20
 3c8:	adrp	x1, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 3cc:	add	x1, x1, #0x0
 3d0:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 3d4:	dmb	ish
 3d8:	add	x21, x21, #0x0
 3dc:	strb	wzr, [x21, #40]
 3e0:	b	36c <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm+0x3c>
 3e4:	mov	x0, #0x0                   	// #0
 3e8:	ret
 3ec:	mov	x0, x20
 3f0:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 3f4:	nop

00000000000003f8 <_ZN11__sanitizer14InternalCallocEmmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>:
 3f8:	stp	x19, x20, [sp, #-32]!
 3fc:	mov	x19, x1
 400:	mov	x1, x2
 404:	str	x30, [sp, #16]
 408:	cbz	x0, 414 <_ZN11__sanitizer14InternalCallocEmmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x1c>
 40c:	umulh	x2, x19, x0
 410:	cbnz	x2, 448 <_ZN11__sanitizer14InternalCallocEmmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x50>
 414:	mul	x19, x0, x19
 418:	mov	x2, #0x0                   	// #0
 41c:	mov	x0, x19
 420:	bl	330 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 424:	mov	x20, x0
 428:	cbz	x0, 438 <_ZN11__sanitizer14InternalCallocEmmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x40>
 42c:	mov	x2, x19
 430:	mov	w1, #0x0                   	// #0
 434:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 438:	mov	x0, x20
 43c:	ldr	x30, [sp, #16]
 440:	ldp	x19, x20, [sp], #32
 444:	ret
 448:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 44c:	mov	x2, x0
 450:	mov	x3, x19
 454:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 458:	ldr	x1, [x1]
 45c:	add	x0, x0, #0x0
 460:	ldr	x1, [x1]
 464:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 468:	bl	0 <_ZN11__sanitizer3DieEv>
 46c:	nop

0000000000000470 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>:
 470:	stp	x19, x20, [sp, #-32]!
 474:	mov	x20, x1
 478:	stp	x21, x30, [sp, #16]
 47c:	mov	x21, x2
 480:	cbz	x0, 540 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0xd0>
 484:	cmn	x1, #0x9
 488:	b.hi	558 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0xe8>  // b.pmore
 48c:	mov	x3, #0xc041                	// #49217
 490:	add	x20, x1, #0x8
 494:	ldur	x4, [x0, #-8]
 498:	movk	x3, #0xbceb, lsl #16
 49c:	movk	x3, #0xb03a, lsl #32
 4a0:	sub	x19, x0, #0x8
 4a4:	movk	x3, #0x6a6c, lsl #48
 4a8:	cmp	x4, x3
 4ac:	b.ne	568 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0xf8>  // b.any
 4b0:	cbz	x2, 4e4 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x74>
 4b4:	bl	30 <_ZN11__sanitizer18internal_allocatorEv>
 4b8:	mov	x1, x21
 4bc:	mov	x2, x19
 4c0:	mov	x3, x20
 4c4:	mov	x4, #0x8                   	// #8
 4c8:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 4cc:	mov	x1, x0
 4d0:	add	x0, x1, #0x8
 4d4:	cbz	x1, 580 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x110>
 4d8:	ldp	x21, x30, [sp, #16]
 4dc:	ldp	x19, x20, [sp], #32
 4e0:	ret
 4e4:	adrp	x21, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 4e8:	add	x0, x21, #0x0
 4ec:	add	x0, x0, #0x28
 4f0:	mov	w2, #0x1                   	// #1
 4f4:	ldxrb	w1, [x0]
 4f8:	stxrb	w3, w2, [x0]
 4fc:	cbnz	w3, 4f4 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x84>
 500:	dmb	ish
 504:	tst	w1, #0xff
 508:	b.eq	510 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0xa0>  // b.none
 50c:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 510:	bl	30 <_ZN11__sanitizer18internal_allocatorEv>
 514:	adrp	x1, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 518:	add	x1, x1, #0x0
 51c:	mov	x2, x19
 520:	mov	x3, x20
 524:	mov	x4, #0x8                   	// #8
 528:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 52c:	dmb	ish
 530:	mov	x1, x0
 534:	add	x21, x21, #0x0
 538:	strb	wzr, [x21, #40]
 53c:	b	4d0 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x60>
 540:	mov	x0, x20
 544:	mov	x1, x2
 548:	ldp	x21, x30, [sp, #16]
 54c:	mov	x2, #0x0                   	// #0
 550:	ldp	x19, x20, [sp], #32
 554:	b	330 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 558:	mov	x0, #0x0                   	// #0
 55c:	ldp	x21, x30, [sp, #16]
 560:	ldp	x19, x20, [sp], #32
 564:	ret
 568:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 56c:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 570:	add	x2, x2, #0x0
 574:	add	x0, x0, #0x0
 578:	mov	w1, #0xa5                  	// #165
 57c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 580:	mov	x0, x20
 584:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>

0000000000000588 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>:
 588:	cbz	x0, 904 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x37c>
 58c:	stp	x19, x20, [sp, #-48]!
 590:	mov	x3, #0xc041                	// #49217
 594:	movk	x3, #0xbceb, lsl #16
 598:	ldur	x4, [x0, #-8]
 59c:	stp	x21, x22, [sp, #16]
 5a0:	movk	x3, #0xb03a, lsl #32
 5a4:	str	x30, [sp, #40]
 5a8:	movk	x3, #0x6a6c, lsl #48
 5ac:	sub	x21, x0, #0x8
 5b0:	cmp	x4, x3
 5b4:	b.ne	8e8 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x360>  // b.any
 5b8:	stur	xzr, [x0, #-8]
 5bc:	mov	x19, x1
 5c0:	cbz	x1, 72c <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x1a4>
 5c4:	bl	30 <_ZN11__sanitizer18internal_allocatorEv>
 5c8:	mov	x1, #0xffffffffffff        	// #281474976710655
 5cc:	cmp	x21, x1
 5d0:	b.ls	6a4 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x11c>  // b.plast
 5d4:	add	x19, x0, #0x80, lsl #12
 5d8:	add	x19, x19, #0xc00
 5dc:	ldr	x20, [x19, #448]
 5e0:	sub	x1, x20, #0x1
 5e4:	tst	x21, x1
 5e8:	b.ne	908 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x380>  // b.any
 5ec:	sub	x20, x21, x20
 5f0:	add	x21, x0, #0xc1, lsl #12
 5f4:	mov	w1, #0x1                   	// #1
 5f8:	ldxrb	w0, [x21]
 5fc:	stxrb	w2, w1, [x21]
 600:	cbnz	w2, 5f8 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x70>
 604:	dmb	ish
 608:	tst	w0, #0xff
 60c:	b.eq	618 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x90>  // b.none
 610:	mov	x0, x21
 614:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 618:	ldr	x0, [x20, #24]
 61c:	add	x1, x19, #0x1c0
 620:	ldr	x5, [x1, #8]
 624:	ldr	x3, [x5, x0, lsl #3]
 628:	cmp	x3, x20
 62c:	b.ne	92c <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x3a4>  // b.any
 630:	add	x1, x1, #0x40, lsl #12
 634:	ldr	x4, [x1, #16]
 638:	cmp	x0, x4
 63c:	b.cs	94c <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x3c4>  // b.hs, b.nlast
 640:	sub	x4, x4, #0x1
 644:	add	x2, x21, #0x8
 648:	ldr	x3, [x20, #8]
 64c:	ldr	x6, [x5, x4, lsl #3]
 650:	str	x4, [x1, #16]
 654:	str	x6, [x5, x0, lsl #3]
 658:	ldp	x5, x4, [x1, #40]
 65c:	str	x0, [x6, #24]
 660:	ldr	x0, [x2, #16]
 664:	strb	wzr, [x1, #24]
 668:	sub	x0, x0, x3
 66c:	sub	x4, x4, x3
 670:	add	x5, x5, #0x1
 674:	stp	x5, x4, [x1, #40]
 678:	str	x0, [x2, #16]
 67c:	ldr	x0, [x2, #24]
 680:	sub	x0, x0, x3
 684:	str	x0, [x2, #24]
 688:	dmb	ish
 68c:	strb	wzr, [x21]
 690:	ldp	x0, x1, [x20]
 694:	ldp	x21, x22, [sp, #16]
 698:	ldr	x30, [sp, #40]
 69c:	ldp	x19, x20, [sp], #48
 6a0:	b	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 6a4:	lsr	x2, x21, #32
 6a8:	ldr	x1, [x0, x2, lsl #3]
 6ac:	dmb	ish
 6b0:	cbz	x1, 5d4 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x4c>
 6b4:	lsr	w3, w21, #20
 6b8:	ldrb	w1, [x1, x3]
 6bc:	cbz	w1, 5d4 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x4c>
 6c0:	ldr	x1, [x0, x2, lsl #3]
 6c4:	dmb	ish
 6c8:	cbz	x1, 96c <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x3e4>
 6cc:	ldrb	w20, [x1, x3]
 6d0:	cbz	x20, 96c <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x3e4>
 6d4:	cmp	x20, #0x35
 6d8:	b.hi	9f4 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x46c>  // b.pmore
 6dc:	lsl	x22, x20, #10
 6e0:	add	x1, x19, x22
 6e4:	ldr	x3, [x1, #8]
 6e8:	cbz	x3, a30 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x4a8>
 6ec:	ldr	x2, [x19, x22]
 6f0:	cmp	x2, x3
 6f4:	b.eq	a18 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x490>  // b.none
 6f8:	add	x20, x2, x20, lsl #7
 6fc:	mov	x0, #0xd800                	// #55296
 700:	add	x20, x20, #0x4
 704:	add	x2, x2, #0x1
 708:	add	x1, x19, x0
 70c:	add	x3, x19, x22
 710:	str	x2, [x19, x22]
 714:	str	x21, [x19, x20, lsl #3]
 718:	ldr	x0, [x1, #16]
 71c:	ldr	x2, [x3, #16]
 720:	sub	x0, x0, x2
 724:	str	x0, [x1, #16]
 728:	b	8d8 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x350>
 72c:	adrp	x22, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 730:	add	x0, x22, #0x0
 734:	add	x0, x0, #0x28
 738:	mov	w2, #0x1                   	// #1
 73c:	ldxrb	w1, [x0]
 740:	stxrb	w3, w2, [x0]
 744:	cbnz	w3, 73c <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x1b4>
 748:	dmb	ish
 74c:	tst	w1, #0xff
 750:	b.eq	758 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x1d0>  // b.none
 754:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 758:	bl	30 <_ZN11__sanitizer18internal_allocatorEv>
 75c:	mov	x1, #0xffffffffffff        	// #281474976710655
 760:	cmp	x21, x1
 764:	b.hi	80c <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x284>  // b.pmore
 768:	lsr	x2, x21, #32
 76c:	ldr	x1, [x0, x2, lsl #3]
 770:	dmb	ish
 774:	cbz	x1, 80c <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x284>
 778:	lsr	w3, w21, #20
 77c:	ldrb	w1, [x1, x3]
 780:	cbz	w1, 80c <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x284>
 784:	str	x23, [sp, #32]
 788:	ldr	x1, [x0, x2, lsl #3]
 78c:	dmb	ish
 790:	cbz	x1, 970 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x3e8>
 794:	ldrb	w23, [x1, x3]
 798:	cbz	x23, 970 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x3e8>
 79c:	cmp	x23, #0x35
 7a0:	b.hi	b0c <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x584>  // b.pmore
 7a4:	lsl	x20, x23, #10
 7a8:	adrp	x19, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 7ac:	add	x7, x19, #0x0
 7b0:	add	x1, x7, x20
 7b4:	ldr	x2, [x1, #8]
 7b8:	cbz	x2, b40 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x5b8>
 7bc:	add	x4, x19, #0x0
 7c0:	add	x1, x4, x20
 7c4:	ldr	x5, [x4, x20]
 7c8:	cmp	x5, x2
 7cc:	b.eq	b2c <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x5a4>  // b.none
 7d0:	add	x19, x19, #0x0
 7d4:	add	x1, x19, x20
 7d8:	add	x2, x19, #0x8, lsl #12
 7dc:	ldr	x0, [x19, x20]
 7e0:	ldr	x4, [x1, #16]
 7e4:	add	x1, x0, #0x1
 7e8:	add	x0, x0, x23, lsl #7
 7ec:	str	x1, [x19, x20]
 7f0:	add	x0, x0, #0x4
 7f4:	ldr	x1, [x2, #22544]
 7f8:	str	x21, [x19, x0, lsl #3]
 7fc:	sub	x0, x1, x4
 800:	ldr	x23, [sp, #32]
 804:	str	x0, [x2, #22544]
 808:	b	8cc <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x344>
 80c:	add	x19, x0, #0x80, lsl #12
 810:	add	x19, x19, #0xc00
 814:	ldr	x20, [x19, #448]
 818:	sub	x1, x20, #0x1
 81c:	tst	x21, x1
 820:	b.ne	990 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x408>  // b.any
 824:	sub	x20, x21, x20
 828:	add	x21, x0, #0xc1, lsl #12
 82c:	mov	w1, #0x1                   	// #1
 830:	ldxrb	w0, [x21]
 834:	stxrb	w2, w1, [x21]
 838:	cbnz	w2, 830 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x2a8>
 83c:	dmb	ish
 840:	tst	w0, #0xff
 844:	b.eq	850 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x2c8>  // b.none
 848:	mov	x0, x21
 84c:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 850:	ldr	x0, [x20, #24]
 854:	add	x1, x19, #0x1c0
 858:	ldr	x5, [x1, #8]
 85c:	ldr	x3, [x5, x0, lsl #3]
 860:	cmp	x3, x20
 864:	b.ne	9b4 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x42c>  // b.any
 868:	add	x1, x1, #0x40, lsl #12
 86c:	ldr	x4, [x1, #16]
 870:	cmp	x0, x4
 874:	b.cs	9d4 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x44c>  // b.hs, b.nlast
 878:	sub	x4, x4, #0x1
 87c:	ldr	x3, [x20, #8]
 880:	ldr	x6, [x5, x4, lsl #3]
 884:	str	x4, [x1, #16]
 888:	str	x6, [x5, x0, lsl #3]
 88c:	ldp	x5, x4, [x1, #40]
 890:	str	x0, [x6, #24]
 894:	ldr	x0, [x21, #24]
 898:	strb	wzr, [x1, #24]
 89c:	sub	x0, x0, x3
 8a0:	sub	x4, x4, x3
 8a4:	add	x5, x5, #0x1
 8a8:	stp	x5, x4, [x1, #40]
 8ac:	str	x0, [x21, #24]
 8b0:	ldr	x0, [x21, #32]
 8b4:	sub	x0, x0, x3
 8b8:	str	x0, [x21, #32]
 8bc:	dmb	ish
 8c0:	strb	wzr, [x21]
 8c4:	ldp	x0, x1, [x20]
 8c8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 8cc:	dmb	ish
 8d0:	add	x22, x22, #0x0
 8d4:	strb	wzr, [x22, #40]
 8d8:	ldp	x21, x22, [sp, #16]
 8dc:	ldr	x30, [sp, #40]
 8e0:	ldp	x19, x20, [sp], #48
 8e4:	ret
 8e8:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 8ec:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 8f0:	add	x2, x2, #0x0
 8f4:	add	x0, x0, #0x0
 8f8:	mov	w1, #0xbd                  	// #189
 8fc:	str	x23, [sp, #32]
 900:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 904:	ret
 908:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 90c:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 910:	add	x2, x2, #0x0
 914:	add	x0, x0, #0x0
 918:	mov	x4, #0x0                   	// #0
 91c:	mov	x3, #0x0                   	// #0
 920:	mov	w1, #0x123                 	// #291
 924:	str	x23, [sp, #32]
 928:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 92c:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 930:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 934:	mov	x4, x20
 938:	add	x2, x2, #0x0
 93c:	add	x0, x0, #0x0
 940:	mov	w1, #0x88                  	// #136
 944:	str	x23, [sp, #32]
 948:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 94c:	mov	x3, x0
 950:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 954:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 958:	add	x2, x2, #0x0
 95c:	add	x0, x0, #0x0
 960:	mov	w1, #0x89                  	// #137
 964:	str	x23, [sp, #32]
 968:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 96c:	str	x23, [sp, #32]
 970:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 974:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 978:	add	x2, x2, #0x0
 97c:	add	x0, x0, #0x0
 980:	mov	x4, #0x0                   	// #0
 984:	mov	x3, #0x0                   	// #0
 988:	mov	w1, #0xae                  	// #174
 98c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 990:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 994:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 998:	add	x2, x2, #0x0
 99c:	add	x0, x0, #0x0
 9a0:	mov	x4, #0x0                   	// #0
 9a4:	mov	x3, #0x0                   	// #0
 9a8:	mov	w1, #0x123                 	// #291
 9ac:	str	x23, [sp, #32]
 9b0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 9b4:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 9b8:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 9bc:	mov	x4, x20
 9c0:	add	x2, x2, #0x0
 9c4:	add	x0, x0, #0x0
 9c8:	mov	w1, #0x88                  	// #136
 9cc:	str	x23, [sp, #32]
 9d0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 9d4:	mov	x3, x0
 9d8:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 9dc:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 9e0:	add	x2, x2, #0x0
 9e4:	add	x0, x0, #0x0
 9e8:	mov	w1, #0x89                  	// #137
 9ec:	str	x23, [sp, #32]
 9f0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 9f4:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 9f8:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 9fc:	mov	x3, x20
 a00:	add	x2, x2, #0x0
 a04:	add	x0, x0, #0x0
 a08:	mov	x4, #0x36                  	// #54
 a0c:	mov	w1, #0xaf                  	// #175
 a10:	str	x23, [sp, #32]
 a14:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 a18:	mov	x2, x0
 a1c:	mov	x3, x20
 a20:	mov	x0, x19
 a24:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 a28:	ldr	x2, [x19, x22]
 a2c:	b	6f8 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x170>
 a30:	mov	x4, #0x1                   	// #1
 a34:	mov	x12, x4
 a38:	mov	x13, #0x7c                  	// #124
 a3c:	mov	x11, #0x14                  	// #20
 a40:	mov	x10, #0x100                 	// #256
 a44:	mov	w9, #0x4000                	// #16384
 a48:	mov	x8, #0x3e                  	// #62
 a4c:	nop
 a50:	add	x3, x19, x4, lsl #10
 a54:	lsl	x6, x4, #4
 a58:	mov	x5, x3
 a5c:	mov	x2, #0x14                  	// #20
 a60:	mov	x7, x4
 a64:	add	x4, x4, #0x1
 a68:	stp	x13, x6, [x3, #8]
 a6c:	cmp	x4, #0x36
 a70:	str	x2, [x5, #24]
 a74:	b.eq	ae4 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x55c>  // b.none
 a78:	cmp	x4, #0x35
 a7c:	b.eq	aec <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x564>  // b.none
 a80:	cmp	x4, #0x10
 a84:	b.ls	a50 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x4c8>  // b.plast
 a88:	sub	x2, x7, #0xf
 a8c:	add	x5, x5, #0x400
 a90:	and	x3, x2, #0x3
 a94:	mov	x7, x4
 a98:	lsr	x2, x2, #2
 a9c:	add	x4, x4, #0x1
 aa0:	lsl	x2, x10, x2
 aa4:	lsr	x6, x2, #2
 aa8:	madd	x6, x6, x3, x2
 aac:	str	x6, [x5, #16]
 ab0:	udiv	w2, w9, w6
 ab4:	cmp	x2, #0x0
 ab8:	csel	x2, x2, x12, ne  // ne = any
 abc:	cmp	x2, #0x3e
 ac0:	csel	x2, x2, x8, ls  // ls = plast
 ac4:	add	x3, x2, #0x2
 ac8:	lsl	x2, x2, #1
 acc:	str	x2, [x5, #8]
 ad0:	cmp	x6, x3, lsl #3
 ad4:	csel	x2, x11, xzr, cc  // cc = lo, ul, last
 ad8:	str	x2, [x5, #24]
 adc:	cmp	x4, #0x36
 ae0:	b.ne	a78 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x4f0>  // b.any
 ae4:	ldr	x3, [x1, #8]
 ae8:	b	6ec <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x164>
 aec:	add	x2, x19, #0x8, lsl #12
 af0:	mov	x3, #0x200                 	// #512
 af4:	mov	x4, #0x40                  	// #64
 af8:	str	x4, [x2, #21512]
 afc:	str	x3, [x2, #21520]
 b00:	str	xzr, [x2, #21528]
 b04:	ldr	x3, [x1, #8]
 b08:	b	6ec <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x164>
 b0c:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 b10:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 b14:	mov	x3, x23
 b18:	add	x2, x2, #0x0
 b1c:	add	x0, x0, #0x0
 b20:	mov	x4, #0x36                  	// #54
 b24:	mov	w1, #0xaf                  	// #175
 b28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 b2c:	mov	x2, x0
 b30:	mov	x3, x23
 b34:	mov	x0, x4
 b38:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 b3c:	b	7d0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x248>
 b40:	mov	x2, #0x1                   	// #1
 b44:	mov	x12, x2
 b48:	mov	x13, #0x7c                  	// #124
 b4c:	mov	x11, #0x14                  	// #20
 b50:	mov	x10, #0x100                 	// #256
 b54:	mov	w9, #0x4000                	// #16384
 b58:	mov	x8, #0x3e                  	// #62
 b5c:	nop
 b60:	lsl	x1, x2, #10
 b64:	lsl	x5, x2, #4
 b68:	add	x14, x7, x1
 b6c:	add	x1, x1, #0x18
 b70:	add	x4, x1, x7
 b74:	mov	x1, #0x14                  	// #20
 b78:	mov	x6, x2
 b7c:	add	x2, x2, #0x1
 b80:	stp	x13, x5, [x14, #8]
 b84:	cmp	x2, #0x36
 b88:	str	x1, [x4]
 b8c:	b.eq	bfc <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x674>  // b.none
 b90:	cmp	x2, #0x35
 b94:	b.eq	c0c <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x684>  // b.none
 b98:	cmp	x2, #0x10
 b9c:	b.ls	b60 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x5d8>  // b.plast
 ba0:	sub	x1, x6, #0xf
 ba4:	add	x4, x4, #0x400
 ba8:	and	x14, x1, #0x3
 bac:	mov	x6, x2
 bb0:	lsr	x1, x1, #2
 bb4:	add	x2, x2, #0x1
 bb8:	lsl	x1, x10, x1
 bbc:	lsr	x5, x1, #2
 bc0:	madd	x5, x5, x14, x1
 bc4:	stur	x5, [x4, #-8]
 bc8:	udiv	w1, w9, w5
 bcc:	cmp	x1, #0x0
 bd0:	csel	x1, x1, x12, ne  // ne = any
 bd4:	cmp	x1, #0x3e
 bd8:	csel	x1, x1, x8, ls  // ls = plast
 bdc:	add	x14, x1, #0x2
 be0:	lsl	x1, x1, #1
 be4:	stur	x1, [x4, #-16]
 be8:	cmp	x5, x14, lsl #3
 bec:	csel	x1, x11, xzr, cc  // cc = lo, ul, last
 bf0:	str	x1, [x4]
 bf4:	cmp	x2, #0x36
 bf8:	b.ne	b90 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x608>  // b.any
 bfc:	add	x1, x19, #0x0
 c00:	add	x1, x1, x20
 c04:	ldr	x2, [x1, #8]
 c08:	b	7bc <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x234>
 c0c:	add	x1, x19, #0x0
 c10:	mov	x5, #0x40                  	// #64
 c14:	add	x2, x1, #0x8, lsl #12
 c18:	add	x1, x1, x20
 c1c:	mov	x4, #0x200                 	// #512
 c20:	str	x5, [x2, #21512]
 c24:	str	x4, [x2, #21520]
 c28:	str	xzr, [x2, #21528]
 c2c:	ldr	x2, [x1, #8]
 c30:	b	7bc <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x234>

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x20, x0
   8:	mov	w19, #0x0                   	// #0
   c:	stp	x21, x30, [sp, #16]
  10:	mov	w21, #0x1                   	// #1
  14:	nop
  18:	cmp	w19, #0x9
  1c:	b.gt	58 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x58>
  20:	ldrb	w0, [x20]
  24:	tst	w0, #0xff
  28:	b.ne	44 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x44>  // b.any
  2c:	ldxrb	w0, [x20]
  30:	stxrb	w1, w21, [x20]
  34:	cbnz	w1, 2c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x2c>
  38:	dmb	ish
  3c:	tst	w0, #0xff
  40:	b.eq	4c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x4c>  // b.none
  44:	add	w19, w19, #0x1
  48:	b	18 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x18>
  4c:	ldp	x21, x30, [sp, #16]
  50:	ldp	x19, x20, [sp], #32
  54:	ret
  58:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  5c:	b	20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>

Disassembly of section .text._ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE.isra.0:

0000000000000000 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE.isra.0>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	stp	x21, x22, [sp, #16]
   8:	mov	x21, x0
   c:	ldr	x0, [x2, #8]
  10:	stp	x23, x30, [sp, #32]
  14:	cbz	x0, bc <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE.isra.0+0xbc>
  18:	mov	x0, #0x2001                	// #8193
  1c:	add	x22, x1, x0
  20:	mov	x20, x2
  24:	mov	x19, x1
  28:	add	x23, x21, x22, lsl #6
  2c:	mov	w1, #0x1                   	// #1
  30:	ldxrb	w0, [x23]
  34:	stxrb	w2, w1, [x23]
  38:	cbnz	w2, 30 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE.isra.0+0x30>
  3c:	dmb	ish
  40:	tst	w0, #0xff
  44:	b.eq	50 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE.isra.0+0x50>  // b.none
  48:	mov	x0, x23
  4c:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE.isra.0>
  50:	ldr	x0, [x23, #8]
  54:	add	x19, x21, x19, lsl #6
  58:	cbz	x0, 8c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE.isra.0+0x8c>
  5c:	add	x19, x19, #0x80, lsl #12
  60:	add	x0, x0, #0x1
  64:	ldr	x1, [x19, #80]
  68:	str	x1, [x20]
  6c:	stp	x0, x20, [x19, #72]
  70:	dmb	ish
  74:	lsl	x22, x22, #6
  78:	strb	wzr, [x21, x22]
  7c:	ldp	x21, x22, [sp, #16]
  80:	ldp	x23, x30, [sp, #32]
  84:	ldp	x19, x20, [sp], #48
  88:	ret
  8c:	add	x19, x19, #0x80, lsl #12
  90:	str	xzr, [x20]
  94:	mov	x0, #0x1                   	// #1
  98:	stp	x0, x20, [x19, #72]
  9c:	str	x20, [x19, #88]
  a0:	dmb	ish
  a4:	lsl	x22, x22, #6
  a8:	strb	wzr, [x21, x22]
  ac:	ldp	x21, x22, [sp, #16]
  b0:	ldp	x23, x30, [sp, #32]
  b4:	ldp	x19, x20, [sp], #48
  b8:	ret
  bc:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE.isra.0>
  c0:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE.isra.0>
  c4:	add	x2, x2, #0x0
  c8:	add	x0, x0, #0x0
  cc:	mov	x4, #0x0                   	// #0
  d0:	mov	x3, #0x0                   	// #0
  d4:	mov	w1, #0xad                  	// #173
  d8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

Disassembly of section .text._ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm:

0000000000000000 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>:
   0:	sub	sp, sp, #0x210
   4:	adrp	x5, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
   8:	stp	x25, x26, [sp, #48]
   c:	mov	x26, x2
  10:	mov	x25, x3
  14:	ldr	x2, [x5]
  18:	stp	x19, x20, [sp]
  1c:	mov	x19, x1
  20:	mov	x1, #0x100000              	// #1048576
  24:	stp	x21, x22, [sp, #16]
  28:	mov	x21, x0
  2c:	mov	x0, x1
  30:	str	x30, [sp, #80]
  34:	str	x4, [sp, #104]
  38:	bl	0 <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc>
  3c:	ldr	x4, [sp, #104]
  40:	cbz	x0, 220 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x220>
  44:	mov	x22, x0
  48:	tst	x0, #0xfffff
  4c:	ldr	x0, [x19, #24]
  50:	stp	x23, x24, [sp, #32]
  54:	stp	x27, x28, [sp, #64]
  58:	add	x0, x0, #0x100, lsl #12
  5c:	str	x0, [x19, #24]
  60:	b.ne	41c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x41c>  // b.any
  64:	mov	x0, #0xfffffff             	// #268435455
  68:	lsr	x19, x22, #20
  6c:	cmp	x0, x22, lsr #20
  70:	b.cc	480 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x480>  // b.lo, b.ul, b.last
  74:	and	w23, w4, #0xff
  78:	lsr	x20, x22, #32
  7c:	ldr	x0, [x21, x20, lsl #3]
  80:	dmb	ish
  84:	cbz	x0, 3d4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x3d4>
  88:	and	x3, x19, #0xfff
  8c:	ldrb	w1, [x0, x3]
  90:	cbnz	x1, 4d8 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x4d8>
  94:	strb	w23, [x0, x3]
  98:	cmp	x4, #0x35
  9c:	b.eq	2b0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x2b0>  // b.none
  a0:	lsl	x28, x4, #4
  a4:	cmp	x4, #0x10
  a8:	b.ls	c8 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0xc8>  // b.plast
  ac:	sub	x0, x4, #0x10
  b0:	mov	x28, #0x100                 	// #256
  b4:	and	x1, x0, #0x3
  b8:	lsr	x0, x0, #2
  bc:	lsl	x0, x28, x0
  c0:	lsr	x28, x0, #2
  c4:	madd	x28, x28, x1, x0
  c8:	mov	x27, #0x100000              	// #1048576
  cc:	udiv	x27, x27, x28
  d0:	cbz	x28, 3c4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x3c4>
  d4:	mov	w23, #0x4000                	// #16384
  d8:	mov	x1, #0x40                  	// #64
  dc:	mov	x0, #0x3e                  	// #62
  e0:	mul	x27, x27, x28
  e4:	udiv	w23, w23, w28
  e8:	cmp	x23, x1
  ec:	csel	x23, x23, x1, ls  // ls = plast
  f0:	cmp	x23, #0x0
  f4:	csinc	x23, x23, xzr, ne  // ne = any
  f8:	cmp	x23, x0
  fc:	csel	x23, x23, x0, ls  // ls = plast
 100:	add	x27, x22, x27
 104:	cmp	x22, x27
 108:	b.cs	3c4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x3c4>  // b.hs, b.nlast
 10c:	add	x24, sp, #0x90
 110:	add	x7, x26, x4, lsl #10
 114:	mov	x1, #0x0                   	// #0
 118:	mov	x19, #0x1                   	// #1
 11c:	str	x22, [sp, #144]
 120:	add	x22, x22, x28
 124:	cmp	x22, x27
 128:	b.cs	270 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x270>  // b.hs, b.nlast
 12c:	str	x22, [x24, x19, lsl #3]
 130:	cmp	x19, #0x2f
 134:	add	x19, x19, #0x1
 138:	b.ne	120 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x120>  // b.any
 13c:	mov	x2, #0xd800                	// #55296
 140:	mov	x19, #0x0                   	// #0
 144:	add	x9, x26, x2
 148:	b	154 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x154>
 14c:	cmp	x19, #0x2f
 150:	b.hi	2a8 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x2a8>  // b.pmore
 154:	ldr	x8, [x24, x19, lsl #3]
 158:	cbz	x1, 1a0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x1a0>
 15c:	ldr	x5, [x1, #8]
 160:	add	x6, x5, #0x1
 164:	add	x5, x5, #0x2
 168:	str	x6, [x1, #8]
 16c:	add	x19, x19, #0x1
 170:	cmp	x6, x23
 174:	str	x8, [x1, x5, lsl #3]
 178:	b.ne	14c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x14c>  // b.any
 17c:	ldr	x5, [x25, #8]
 180:	str	xzr, [x1]
 184:	cbnz	x5, 23c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x23c>
 188:	mov	x2, #0x1                   	// #1
 18c:	stp	x2, x1, [x25, #8]
 190:	cmp	x19, #0x2f
 194:	str	x1, [x25, #24]
 198:	b.hi	258 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x258>  // b.pmore
 19c:	ldr	x8, [x24, x19, lsl #3]
 1a0:	mov	x1, x8
 1a4:	ldr	x20, [x7, #24]
 1a8:	cbnz	x20, 1c0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x1c0>
 1ac:	cbz	x1, 218 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x218>
 1b0:	mov	x5, #0x0                   	// #0
 1b4:	mov	x6, #0x1                   	// #1
 1b8:	str	xzr, [x1, #8]
 1bc:	b	164 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x164>
 1c0:	cmp	x20, #0x35
 1c4:	b.hi	43c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x43c>  // b.pmore
 1c8:	lsl	x5, x20, #10
 1cc:	add	x1, x26, x5
 1d0:	ldr	x0, [x26, x5]
 1d4:	cbz	x0, 4a0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x4a0>
 1d8:	lsl	x20, x20, #7
 1dc:	add	x3, x26, x5
 1e0:	add	x1, x20, x0
 1e4:	sub	x0, x0, #0x1
 1e8:	add	x1, x1, #0x2
 1ec:	str	x0, [x26, x5]
 1f0:	add	x20, x20, x0
 1f4:	add	x20, x20, #0x4
 1f8:	ldr	x2, [x26, x1, lsl #3]
 1fc:	ldr	x0, [x9, #16]
 200:	ldr	x1, [x3, #16]
 204:	prfm	pldl1keep, [x2]
 208:	add	x0, x0, x1
 20c:	ldr	x1, [x26, x20, lsl #3]
 210:	str	x0, [x9, #16]
 214:	cbnz	x1, 1b0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x1b0>
 218:	ldp	x23, x24, [sp, #32]
 21c:	ldp	x27, x28, [sp, #64]
 220:	mov	w0, #0x0                   	// #0
 224:	ldp	x19, x20, [sp]
 228:	ldp	x21, x22, [sp, #16]
 22c:	ldp	x25, x26, [sp, #48]
 230:	ldr	x30, [sp, #80]
 234:	add	sp, sp, #0x210
 238:	ret
 23c:	ldr	x2, [x25, #24]
 240:	add	x5, x5, #0x1
 244:	cmp	x19, #0x2f
 248:	str	x1, [x2]
 24c:	str	x5, [x25, #8]
 250:	str	x1, [x25, #24]
 254:	b.ls	19c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x19c>  // b.plast
 258:	add	x22, x22, x28
 25c:	mov	x19, #0x0                   	// #0
 260:	cmp	x22, x27
 264:	mov	x1, #0x0                   	// #0
 268:	b.cc	12c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x12c>  // b.lo, b.ul, b.last
 26c:	nop
 270:	cbnz	x19, 2c0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x2c0>
 274:	cbz	x1, 3c4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x3c4>
 278:	ldr	x2, [x1, #8]
 27c:	cbz	x2, 4f8 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x4f8>
 280:	ldr	x0, [x25, #8]
 284:	str	xzr, [x1]
 288:	cbnz	x0, 45c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x45c>
 28c:	mov	x2, #0x1                   	// #1
 290:	mov	w0, w2
 294:	ldp	x23, x24, [sp, #32]
 298:	ldp	x27, x28, [sp, #64]
 29c:	stp	x2, x1, [x25, #8]
 2a0:	str	x1, [x25, #24]
 2a4:	b	224 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x224>
 2a8:	mov	x19, #0x0                   	// #0
 2ac:	b	120 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x120>
 2b0:	mov	x27, #0x100000              	// #1048576
 2b4:	mov	x23, #0x20                  	// #32
 2b8:	mov	x28, #0x200                 	// #512
 2bc:	b	100 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x100>
 2c0:	add	x28, x26, x4, lsl #10
 2c4:	mov	x0, #0xd800                	// #55296
 2c8:	add	x27, sp, #0x90
 2cc:	add	x4, x26, x0
 2d0:	mov	x20, #0x0                   	// #0
 2d4:	b	2e0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x2e0>
 2d8:	cmp	x19, x20
 2dc:	b.ls	27c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x27c>  // b.plast
 2e0:	ldr	x22, [x27, x20, lsl #3]
 2e4:	cbz	x1, 32c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x32c>
 2e8:	ldr	x0, [x1, #8]
 2ec:	add	x2, x0, #0x1
 2f0:	add	x0, x0, #0x2
 2f4:	str	x2, [x1, #8]
 2f8:	add	x20, x20, #0x1
 2fc:	cmp	x2, x23
 300:	str	x22, [x1, x0, lsl #3]
 304:	b.ne	2d8 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x2d8>  // b.any
 308:	ldr	x0, [x25, #8]
 30c:	cbnz	x0, 3a4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x3a4>
 310:	str	xzr, [x1]
 314:	mov	x2, #0x1                   	// #1
 318:	stp	x2, x1, [x25, #8]
 31c:	cmp	x19, x20
 320:	str	x1, [x25, #24]
 324:	b.ls	3c4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x3c4>  // b.plast
 328:	ldr	x22, [x27, x20, lsl #3]
 32c:	mov	x1, x22
 330:	ldr	x24, [x28, #24]
 334:	cbnz	x24, 34c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x34c>
 338:	cbz	x1, 218 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x218>
 33c:	mov	x0, #0x0                   	// #0
 340:	mov	x2, #0x1                   	// #1
 344:	str	xzr, [x1, #8]
 348:	b	2f0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x2f0>
 34c:	cmp	x24, #0x35
 350:	b.hi	540 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x540>  // b.pmore
 354:	lsl	x5, x24, #10
 358:	add	x1, x26, x5
 35c:	ldr	x0, [x26, x5]
 360:	cbz	x0, 548 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x548>
 364:	lsl	x24, x24, #7
 368:	add	x2, x26, x5
 36c:	add	x1, x24, x0
 370:	sub	x0, x0, #0x1
 374:	add	x1, x1, #0x2
 378:	str	x0, [x26, x5]
 37c:	add	x24, x24, x0
 380:	add	x0, x24, #0x4
 384:	ldr	x3, [x26, x1, lsl #3]
 388:	ldr	x1, [x2, #16]
 38c:	ldr	x2, [x4, #16]
 390:	prfm	pldl1keep, [x3]
 394:	add	x2, x2, x1
 398:	ldr	x1, [x26, x0, lsl #3]
 39c:	str	x2, [x4, #16]
 3a0:	b	338 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x338>
 3a4:	ldr	x3, [x25, #24]
 3a8:	str	xzr, [x1]
 3ac:	add	x0, x0, #0x1
 3b0:	cmp	x19, x20
 3b4:	str	x1, [x3]
 3b8:	str	x0, [x25, #8]
 3bc:	str	x1, [x25, #24]
 3c0:	b.hi	328 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x328>  // b.pmore
 3c4:	mov	w0, #0x1                   	// #1
 3c8:	ldp	x23, x24, [sp, #32]
 3cc:	ldp	x27, x28, [sp, #64]
 3d0:	b	224 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x224>
 3d4:	add	x24, x21, #0x80, lsl #12
 3d8:	mov	w1, #0x1                   	// #1
 3dc:	ldxrb	w0, [x24]
 3e0:	stxrb	w2, w1, [x24]
 3e4:	cbnz	w2, 3dc <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x3dc>
 3e8:	dmb	ish
 3ec:	tst	w0, #0xff
 3f0:	b.eq	404 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x404>  // b.none
 3f4:	mov	x0, x24
 3f8:	str	x4, [sp, #104]
 3fc:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 400:	ldr	x4, [sp, #104]
 404:	ldr	x0, [x21, x20, lsl #3]
 408:	dmb	ish
 40c:	cbz	x0, 518 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x518>
 410:	dmb	ish
 414:	strb	wzr, [x24]
 418:	b	88 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x88>
 41c:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 420:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 424:	add	x2, x2, #0x0
 428:	add	x0, x0, #0x0
 42c:	mov	x4, #0x0                   	// #0
 430:	mov	x3, #0x0                   	// #0
 434:	mov	w1, #0x126                 	// #294
 438:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 43c:	mov	x3, x20
 440:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 444:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 448:	add	x2, x2, #0x0
 44c:	add	x0, x0, #0x0
 450:	mov	x4, #0x36                  	// #54
 454:	mov	w1, #0xa0                  	// #160
 458:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 45c:	ldr	x4, [x25, #24]
 460:	add	x2, x0, #0x1
 464:	ldp	x23, x24, [sp, #32]
 468:	mov	w0, #0x1                   	// #1
 46c:	ldp	x27, x28, [sp, #64]
 470:	str	x1, [x4]
 474:	str	x2, [x25, #8]
 478:	str	x1, [x25, #24]
 47c:	b	224 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x224>
 480:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 484:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 488:	mov	x3, x19
 48c:	add	x2, x2, #0x0
 490:	add	x0, x0, #0x0
 494:	mov	x4, #0x10000000            	// #268435456
 498:	mov	w1, #0x116                 	// #278
 49c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 4a0:	mov	x3, x20
 4a4:	mov	x2, x21
 4a8:	mov	x0, x26
 4ac:	stp	x8, x4, [sp, #104]
 4b0:	stp	x5, x9, [sp, #120]
 4b4:	str	x7, [sp, #136]
 4b8:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 4bc:	tst	w0, #0xff
 4c0:	b.eq	218 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x218>  // b.none
 4c4:	ldp	x5, x9, [sp, #120]
 4c8:	ldp	x8, x4, [sp, #104]
 4cc:	ldr	x7, [sp, #136]
 4d0:	ldr	x0, [x26, x5]
 4d4:	b	1d8 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x1d8>
 4d8:	mov	x4, x1
 4dc:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 4e0:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 4e4:	add	x2, x2, #0x0
 4e8:	add	x0, x0, #0x0
 4ec:	mov	x3, #0x0                   	// #0
 4f0:	mov	w1, #0x42                  	// #66
 4f4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 4f8:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 4fc:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 500:	add	x2, x2, #0x0
 504:	add	x0, x0, #0x0
 508:	mov	x4, #0x0                   	// #0
 50c:	mov	x3, #0x0                   	// #0
 510:	mov	w1, #0x169                 	// #361
 514:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 518:	mov	w2, #0x0                   	// #0
 51c:	adrp	x1, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 520:	mov	x0, #0x1000                	// #4096
 524:	add	x1, x1, #0x0
 528:	str	x4, [sp, #104]
 52c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 530:	dmb	ish
 534:	str	x0, [x21, x20, lsl #3]
 538:	ldr	x4, [sp, #104]
 53c:	b	410 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x410>
 540:	mov	x3, x24
 544:	b	440 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x440>
 548:	mov	x3, x24
 54c:	mov	x2, x21
 550:	mov	x0, x26
 554:	stp	x5, x4, [sp, #104]
 558:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 55c:	tst	w0, #0xff
 560:	b.eq	218 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x218>  // b.none
 564:	ldp	x5, x4, [sp, #104]
 568:	ldr	x0, [x26, x5]
 56c:	b	364 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x364>

Disassembly of section .text._ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm:

0000000000000000 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm>:
   0:	stp	x19, x20, [sp, #-80]!
   4:	mov	x20, x0
   8:	mov	x0, #0x2001                	// #8193
   c:	stp	x21, x22, [sp, #16]
  10:	add	x22, x3, x0
  14:	mov	x19, x3
  18:	lsl	x21, x22, #6
  1c:	stp	x23, x24, [sp, #32]
  20:	add	x23, x20, x21
  24:	stp	x25, x26, [sp, #48]
  28:	mov	x25, x2
  2c:	mov	x24, x1
  30:	mov	w1, #0x1                   	// #1
  34:	str	x30, [sp, #64]
  38:	ldxrb	w0, [x23]
  3c:	stxrb	w2, w1, [x23]
  40:	cbnz	w2, 38 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0x38>
  44:	dmb	ish
  48:	tst	w0, #0xff
  4c:	b.eq	58 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0x58>  // b.none
  50:	mov	x0, x23
  54:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm>
  58:	add	x21, x21, #0x8
  5c:	add	x26, x20, x21
  60:	ldr	x5, [x20, x21]
  64:	cbnz	x5, 90 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0x90>
  68:	mov	x3, x23
  6c:	mov	x2, x25
  70:	mov	x1, x24
  74:	mov	x4, x19
  78:	mov	x0, x20
  7c:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm>
  80:	tst	w0, #0xff
  84:	b.eq	100 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0x100>  // b.none
  88:	ldr	x5, [x20, x21]
  8c:	cbz	x5, e0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0xe0>
  90:	add	x4, x20, x19, lsl #6
  94:	add	x4, x4, #0x80, lsl #12
  98:	ldr	x0, [x26, #8]
  9c:	ldr	x1, [x4, #80]
  a0:	ldr	x1, [x1]
  a4:	str	x1, [x4, #80]
  a8:	cbz	x1, d8 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0xd8>
  ac:	sub	x5, x5, #0x1
  b0:	str	x5, [x4, #72]
  b4:	dmb	ish
  b8:	lsl	x22, x22, #6
  bc:	strb	wzr, [x20, x22]
  c0:	ldp	x21, x22, [sp, #16]
  c4:	ldp	x23, x24, [sp, #32]
  c8:	ldp	x25, x26, [sp, #48]
  cc:	ldr	x30, [sp, #64]
  d0:	ldp	x19, x20, [sp], #80
  d4:	ret
  d8:	str	xzr, [x4, #88]
  dc:	b	ac <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0xac>
  e0:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm>
  e4:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm>
  e8:	add	x2, x2, #0x0
  ec:	add	x0, x0, #0x0
  f0:	mov	x4, #0x0                   	// #0
  f4:	mov	x3, #0x0                   	// #0
  f8:	mov	w1, #0x40                  	// #64
  fc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 100:	mov	x0, #0x0                   	// #0
 104:	b	b4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0xb4>

Disassembly of section .text._ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m:

0000000000000000 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m>:
   0:	stp	x19, x20, [sp, #-64]!
   4:	mov	x19, x0
   8:	mov	x20, x2
   c:	ldr	x0, [x1, #8]
  10:	stp	x21, x22, [sp, #16]
  14:	mov	x22, x1
  18:	stp	x23, x24, [sp, #32]
  1c:	mov	x21, x3
  20:	str	x30, [sp, #48]
  24:	cbz	x0, 100 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x100>
  28:	mov	x0, #0xd800                	// #55296
  2c:	add	x24, x19, x0
  30:	mov	x3, x21
  34:	mov	x1, x24
  38:	mov	x2, x19
  3c:	mov	x0, x20
  40:	bl	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m>
  44:	mov	x23, x0
  48:	cbz	x0, 1d8 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x1d8>
  4c:	ldr	x6, [x0, #8]
  50:	add	x8, x0, #0x10
  54:	add	x7, x22, #0x20
  58:	mov	x4, #0x0                   	// #0
  5c:	cbz	x6, 1f0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x1f0>
  60:	ldr	x5, [x8, x4, lsl #3]
  64:	str	x5, [x7, x4, lsl #3]
  68:	add	x4, x4, #0x1
  6c:	cmp	x6, x4
  70:	b.ne	60 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x60>  // b.any
  74:	add	x21, x19, x21, lsl #10
  78:	mov	w0, #0x1                   	// #1
  7c:	ldr	x21, [x21, #24]
  80:	str	x6, [x22]
  84:	cbnz	x21, 9c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x9c>
  88:	ldp	x21, x22, [sp, #16]
  8c:	ldp	x23, x24, [sp, #32]
  90:	ldr	x30, [sp, #48]
  94:	ldp	x19, x20, [sp], #64
  98:	ret
  9c:	cmp	x21, #0x35
  a0:	b.hi	308 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x308>  // b.pmore
  a4:	lsl	x22, x21, #10
  a8:	add	x1, x19, x22
  ac:	ldr	x2, [x1, #8]
  b0:	cbz	x2, 224 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x224>
  b4:	ldr	x0, [x19, x22]
  b8:	cmp	x0, x2
  bc:	b.eq	20c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x20c>  // b.none
  c0:	add	x2, x0, x21, lsl #7
  c4:	add	x3, x19, x22
  c8:	add	x2, x2, #0x4
  cc:	add	x0, x0, #0x1
  d0:	str	x0, [x19, x22]
  d4:	mov	w0, #0x1                   	// #1
  d8:	ldr	x1, [x24, #16]
  dc:	str	x23, [x19, x2, lsl #3]
  e0:	ldp	x21, x22, [sp, #16]
  e4:	ldr	x2, [x3, #16]
  e8:	ldr	x30, [sp, #48]
  ec:	sub	x1, x1, x2
  f0:	str	x1, [x24, #16]
  f4:	ldp	x23, x24, [sp, #32]
  f8:	ldp	x19, x20, [sp], #64
  fc:	ret
 100:	mov	x5, #0x1                   	// #1
 104:	mov	x11, x5
 108:	mov	x12, #0x7c                  	// #124
 10c:	mov	x10, #0x14                  	// #20
 110:	mov	x9, #0x100                 	// #256
 114:	mov	w8, #0x4000                	// #16384
 118:	mov	x3, #0x3e                  	// #62
 11c:	nop
 120:	add	x1, x19, x5, lsl #10
 124:	lsl	x4, x5, #4
 128:	mov	x6, x1
 12c:	mov	x0, #0x14                  	// #20
 130:	mov	x2, x5
 134:	add	x5, x5, #0x1
 138:	stp	x12, x4, [x1, #8]
 13c:	cmp	x5, #0x36
 140:	str	x0, [x6, #24]
 144:	b.eq	28 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x28>  // b.none
 148:	cmp	x5, #0x35
 14c:	b.eq	1bc <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x1bc>  // b.none
 150:	cmp	x5, #0x10
 154:	b.ls	120 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x120>  // b.plast
 158:	sub	x4, x2, #0xf
 15c:	add	x6, x6, #0x400
 160:	and	x0, x4, #0x3
 164:	mov	x2, x5
 168:	lsr	x4, x4, #2
 16c:	add	x5, x5, #0x1
 170:	lsl	x4, x9, x4
 174:	lsr	x7, x4, #2
 178:	madd	x7, x7, x0, x4
 17c:	str	x7, [x6, #16]
 180:	udiv	w4, w8, w7
 184:	cmp	x4, #0x0
 188:	csel	x4, x4, x11, ne  // ne = any
 18c:	cmp	x4, #0x3e
 190:	csel	x4, x4, x3, ls  // ls = plast
 194:	add	x0, x4, #0x2
 198:	lsl	x4, x4, #1
 19c:	str	x4, [x6, #8]
 1a0:	cmp	x7, x0, lsl #3
 1a4:	csel	x0, x10, xzr, cc  // cc = lo, ul, last
 1a8:	str	x0, [x6, #24]
 1ac:	cmp	x5, #0x36
 1b0:	b.eq	28 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x28>  // b.none
 1b4:	cmp	x5, #0x35
 1b8:	b.ne	150 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x150>  // b.any
 1bc:	add	x0, x19, #0x8, lsl #12
 1c0:	mov	x2, #0x40                  	// #64
 1c4:	mov	x1, #0x200                 	// #512
 1c8:	str	x2, [x0, #21512]
 1cc:	str	x1, [x0, #21520]
 1d0:	str	xzr, [x0, #21528]
 1d4:	b	28 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x28>
 1d8:	mov	w0, #0x0                   	// #0
 1dc:	ldp	x21, x22, [sp, #16]
 1e0:	ldp	x23, x24, [sp, #32]
 1e4:	ldr	x30, [sp, #48]
 1e8:	ldp	x19, x20, [sp], #64
 1ec:	ret
 1f0:	adrp	x2, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m>
 1f4:	adrp	x0, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m>
 1f8:	add	x2, x2, #0x0
 1fc:	add	x0, x0, #0x0
 200:	mov	x3, #0x0                   	// #0
 204:	mov	w1, #0xf6                  	// #246
 208:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 20c:	mov	x0, x19
 210:	mov	x2, x20
 214:	mov	x3, x21
 218:	bl	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m>
 21c:	ldr	x0, [x19, x22]
 220:	b	c0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0xc0>
 224:	mov	x5, #0x1                   	// #1
 228:	mov	x11, x5
 22c:	mov	x12, #0x7c                  	// #124
 230:	mov	x10, #0x14                  	// #20
 234:	mov	x9, #0x100                 	// #256
 238:	mov	w8, #0x4000                	// #16384
 23c:	mov	x7, #0x3e                  	// #62
 240:	add	x4, x19, x5, lsl #10
 244:	lsl	x6, x5, #4
 248:	mov	x2, x4
 24c:	mov	x0, #0x14                  	// #20
 250:	mov	x3, x5
 254:	add	x5, x5, #0x1
 258:	stp	x12, x6, [x4, #8]
 25c:	cmp	x5, #0x36
 260:	str	x0, [x2, #24]
 264:	b.eq	2d4 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x2d4>  // b.none
 268:	cmp	x5, #0x35
 26c:	b.eq	2dc <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x2dc>  // b.none
 270:	cmp	x5, #0x10
 274:	b.ls	240 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x240>  // b.plast
 278:	sub	x0, x3, #0xf
 27c:	add	x2, x2, #0x400
 280:	and	x6, x0, #0x3
 284:	mov	x3, x5
 288:	lsr	x0, x0, #2
 28c:	add	x5, x5, #0x1
 290:	lsl	x0, x9, x0
 294:	lsr	x4, x0, #2
 298:	madd	x0, x4, x6, x0
 29c:	str	x0, [x2, #16]
 2a0:	udiv	w4, w8, w0
 2a4:	cmp	x4, #0x0
 2a8:	csel	x4, x4, x11, ne  // ne = any
 2ac:	cmp	x4, #0x3e
 2b0:	csel	x4, x4, x7, ls  // ls = plast
 2b4:	add	x6, x4, #0x2
 2b8:	lsl	x4, x4, #1
 2bc:	str	x4, [x2, #8]
 2c0:	cmp	x0, x6, lsl #3
 2c4:	csel	x0, x10, xzr, cc  // cc = lo, ul, last
 2c8:	str	x0, [x2, #24]
 2cc:	cmp	x5, #0x36
 2d0:	b.ne	268 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x268>  // b.any
 2d4:	ldr	x2, [x1, #8]
 2d8:	b	b4 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0xb4>
 2dc:	add	x0, x19, #0x8, lsl #12
 2e0:	mov	x2, #0x200                 	// #512
 2e4:	mov	x3, #0x40                  	// #64
 2e8:	str	x3, [x0, #21512]
 2ec:	str	x2, [x0, #21520]
 2f0:	str	xzr, [x0, #21528]
 2f4:	ldr	x0, [x19, x22]
 2f8:	ldr	x2, [x1, #8]
 2fc:	cmp	x0, x2
 300:	b.ne	c0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0xc0>  // b.any
 304:	b	20c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x20c>
 308:	adrp	x2, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m>
 30c:	adrp	x0, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m>
 310:	mov	x3, x21
 314:	add	x2, x2, #0x0
 318:	add	x0, x0, #0x0
 31c:	mov	x4, #0x36                  	// #54
 320:	mov	w1, #0xaf                  	// #175
 324:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

Disassembly of section .text._ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm:

0000000000000000 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>:
   0:	stp	x19, x20, [sp, #-80]!
   4:	cmp	x2, #0x0
   8:	stp	x21, x22, [sp, #16]
   c:	csinc	x22, x2, xzr, ne  // ne = any
  10:	mov	x21, x1
  14:	str	x30, [sp, #64]
  18:	adds	x1, x3, x22
  1c:	b.cs	470 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x470>  // b.hs, b.nlast
  20:	stp	x23, x24, [sp, #32]
  24:	mov	x19, x3
  28:	mov	x23, x0
  2c:	cmp	x3, #0x8
  30:	b.hi	278 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x278>  // b.pmore
  34:	cmp	x2, #0x20, lsl #12
  38:	b.hi	fc <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0xfc>  // b.pmore
  3c:	cmp	x22, #0x100
  40:	b.ls	2ac <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x2ac>  // b.plast
  44:	clz	x3, x22
  48:	mov	w20, #0x3f                  	// #63
  4c:	sub	w20, w20, w3
  50:	mov	w3, #0x1                   	// #1
  54:	sub	w1, w20, #0x2
  58:	lsl	w3, w3, w1
  5c:	sub	w3, w3, #0x1
  60:	tst	x3, x22
  64:	lsr	x3, x22, x1
  68:	and	x3, x3, #0x3
  6c:	cinc	x3, x3, ne  // ne = any
  70:	add	x20, x3, w20, sxtw #2
  74:	sub	x20, x20, #0x10
  78:	cmp	x20, #0x35
  7c:	b.hi	2fc <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x2fc>  // b.pmore
  80:	lsl	x22, x20, #10
  84:	add	x1, x21, x22
  88:	ldr	x3, [x21, x22]
  8c:	cbz	x3, 390 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x390>
  90:	lsl	x20, x20, #7
  94:	add	x1, x21, x22
  98:	add	x0, x20, x3
  9c:	mov	x2, #0xd800                	// #55296
  a0:	add	x0, x0, #0x2
  a4:	sub	x3, x3, #0x1
  a8:	add	x2, x21, x2
  ac:	str	x3, [x21, x22]
  b0:	add	x20, x20, x3
  b4:	ldr	x3, [x21, x0, lsl #3]
  b8:	add	x20, x20, #0x4
  bc:	ldr	x0, [x1, #16]
  c0:	ldr	x1, [x2, #16]
  c4:	prfm	pldl1keep, [x3]
  c8:	add	x1, x1, x0
  cc:	ldr	x0, [x21, x20, lsl #3]
  d0:	str	x1, [x2, #16]
  d4:	cmp	x19, #0x8
  d8:	b.ls	e8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0xe8>  // b.plast
  dc:	sub	x19, x19, #0x1
  e0:	ands	x3, x0, x19
  e4:	b.ne	350 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x350>  // b.any
  e8:	ldp	x23, x24, [sp, #32]
  ec:	ldp	x21, x22, [sp, #16]
  f0:	ldr	x30, [sp, #64]
  f4:	ldp	x19, x20, [sp], #80
  f8:	ret
  fc:	stp	x25, x26, [sp, #48]
 100:	sub	x24, x3, #0x1
 104:	tst	x3, x24
 108:	b.ne	370 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x370>  // b.any
 10c:	add	x25, x23, #0x80, lsl #12
 110:	add	x25, x25, #0xc00
 114:	ldr	x2, [x25, #448]
 118:	sub	x0, x2, #0x1
 11c:	tst	x2, x0
 120:	b.ne	2ec <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x2ec>  // b.any
 124:	add	x20, x22, x0
 128:	neg	x0, x2
 12c:	and	x20, x20, x0
 130:	cmp	x19, x2
 134:	add	x20, x20, x2
 138:	add	x0, x20, x19
 13c:	csel	x20, x0, x20, hi  // hi = pmore
 140:	cmp	x22, x20
 144:	b.hi	320 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x320>  // b.pmore
 148:	adrp	x1, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 14c:	mov	x0, x20
 150:	ldr	x1, [x1]
 154:	bl	0 <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc>
 158:	cbz	x0, 3b0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x3b0>
 15c:	ldr	x1, [x25, #448]
 160:	sub	x2, x1, #0x1
 164:	tst	x0, x2
 168:	b.ne	3c0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x3c0>  // b.any
 16c:	add	x21, x0, x1
 170:	ands	x3, x24, x21
 174:	b.eq	188 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x188>  // b.none
 178:	add	x21, x19, x21
 17c:	sub	x21, x21, x3
 180:	tst	x24, x21
 184:	b.ne	3e0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x3e0>  // b.any
 188:	tst	x21, x2
 18c:	b.ne	400 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x400>  // b.any
 190:	add	x3, x21, x22
 194:	cmp	x0, x3
 198:	b.hi	420 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x420>  // b.pmore
 19c:	add	x4, x0, x20
 1a0:	cmp	x4, x3
 1a4:	b.cc	43c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x43c>  // b.lo, b.ul, b.last
 1a8:	sub	x24, x21, x1
 1ac:	add	x26, x23, #0xc1, lsl #12
 1b0:	mov	w1, #0x1                   	// #1
 1b4:	stp	x0, x20, [x24]
 1b8:	str	x22, [x24, #16]
 1bc:	ldxrb	w0, [x26]
 1c0:	stxrb	w2, w1, [x26]
 1c4:	cbnz	w2, 1bc <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x1bc>
 1c8:	dmb	ish
 1cc:	tst	w0, #0xff
 1d0:	b.eq	1dc <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x1dc>  // b.none
 1d4:	mov	x0, x26
 1d8:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 1dc:	add	x25, x25, #0x1c0
 1e0:	mov	x0, #0x7fff                	// #32767
 1e4:	add	x1, x25, #0x40, lsl #12
 1e8:	ldr	x3, [x1, #16]
 1ec:	cmp	x3, x0
 1f0:	b.hi	454 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x454>  // b.pmore
 1f4:	clz	x0, x20
 1f8:	mov	w2, #0x3f                  	// #63
 1fc:	sub	w2, w2, w0
 200:	add	x5, x3, #0x1
 204:	ldp	x0, x4, [x1, #48]
 208:	add	x23, x23, w2, sxtw #3
 20c:	ldr	x6, [x25, #8]
 210:	str	x5, [x1, #16]
 214:	ldr	x5, [x1, #32]
 218:	str	x3, [x24, #24]
 21c:	add	x0, x20, x0
 220:	add	x23, x23, #0xc0, lsl #12
 224:	cmp	x4, x0
 228:	str	x24, [x6, x3, lsl #3]
 22c:	csel	x4, x4, x0, cs  // cs = hs, nlast
 230:	add	x5, x5, #0x1
 234:	strb	wzr, [x1, #24]
 238:	str	x5, [x1, #32]
 23c:	stp	x0, x4, [x1, #48]
 240:	ldr	x1, [x23, #3584]
 244:	ldr	x0, [x26, #24]
 248:	add	x1, x1, #0x1
 24c:	str	x1, [x23, #3584]
 250:	add	x0, x20, x0
 254:	str	x0, [x26, #24]
 258:	ldr	x0, [x26, #32]
 25c:	add	x20, x20, x0
 260:	str	x20, [x26, #32]
 264:	dmb	ish
 268:	strb	wzr, [x26]
 26c:	mov	x0, x21
 270:	ldp	x25, x26, [sp, #48]
 274:	b	d4 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0xd4>
 278:	sub	x24, x3, #0x1
 27c:	tst	x3, x24
 280:	b.ne	2e8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x2e8>  // b.any
 284:	sub	x3, x1, #0x1
 288:	neg	x1, x19
 28c:	cmp	x19, #0x20, lsl #12
 290:	and	x1, x3, x1
 294:	mov	x0, #0x20000               	// #131072
 298:	ccmp	x1, x0, #0x2, ls  // ls = plast
 29c:	b.hi	2e0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x2e0>  // b.pmore
 2a0:	mov	x22, x1
 2a4:	cmp	x22, #0x100
 2a8:	b.hi	44 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x44>  // b.pmore
 2ac:	add	x20, x22, #0xf
 2b0:	cmp	xzr, x20, lsr #4
 2b4:	lsr	x20, x20, #4
 2b8:	b.ne	80 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x80>  // b.any
 2bc:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 2c0:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 2c4:	add	x2, x2, #0x0
 2c8:	add	x0, x0, #0x0
 2cc:	mov	x4, #0x0                   	// #0
 2d0:	mov	x3, #0x0                   	// #0
 2d4:	mov	w1, #0x9f                  	// #159
 2d8:	stp	x25, x26, [sp, #48]
 2dc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2e0:	stp	x25, x26, [sp, #48]
 2e4:	b	10c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x10c>
 2e8:	stp	x25, x26, [sp, #48]
 2ec:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 2f0:	add	x0, x0, #0x0
 2f4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 2f8:	bl	0 <_ZN11__sanitizer3DieEv>
 2fc:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 300:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 304:	mov	x3, x20
 308:	add	x2, x2, #0x0
 30c:	add	x0, x0, #0x0
 310:	mov	x4, #0x36                  	// #54
 314:	mov	w1, #0xa0                  	// #160
 318:	stp	x25, x26, [sp, #48]
 31c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 320:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 324:	mov	x3, x19
 328:	mov	x2, x20
 32c:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 330:	ldr	x1, [x1]
 334:	add	x0, x0, #0x0
 338:	ldr	x1, [x1]
 33c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 340:	mov	x0, #0x0                   	// #0
 344:	ldp	x23, x24, [sp, #32]
 348:	ldp	x25, x26, [sp, #48]
 34c:	b	ec <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0xec>
 350:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 354:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 358:	add	x2, x2, #0x0
 35c:	add	x0, x0, #0x0
 360:	mov	x4, #0x0                   	// #0
 364:	mov	w1, #0x42                  	// #66
 368:	stp	x25, x26, [sp, #48]
 36c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 370:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 374:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 378:	add	x2, x2, #0x0
 37c:	add	x0, x0, #0x0
 380:	mov	x4, #0x0                   	// #0
 384:	mov	x3, #0x0                   	// #0
 388:	mov	w1, #0x53                  	// #83
 38c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 390:	mov	x2, x23
 394:	mov	x3, x20
 398:	mov	x0, x21
 39c:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 3a0:	tst	w0, #0xff
 3a4:	b.eq	3b4 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x3b4>  // b.none
 3a8:	ldr	x3, [x21, x22]
 3ac:	b	90 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x90>
 3b0:	ldp	x25, x26, [sp, #48]
 3b4:	mov	x0, #0x0                   	// #0
 3b8:	ldp	x23, x24, [sp, #32]
 3bc:	b	ec <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0xec>
 3c0:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 3c4:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 3c8:	add	x2, x2, #0x0
 3cc:	add	x0, x0, #0x0
 3d0:	mov	x4, #0x0                   	// #0
 3d4:	mov	x3, #0x0                   	// #0
 3d8:	mov	w1, #0x62                  	// #98
 3dc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3e0:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 3e4:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 3e8:	add	x2, x2, #0x0
 3ec:	add	x0, x0, #0x0
 3f0:	mov	x4, #0x0                   	// #0
 3f4:	mov	x3, #0x0                   	// #0
 3f8:	mov	w1, #0x68                  	// #104
 3fc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 400:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 404:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 408:	add	x2, x2, #0x0
 40c:	add	x0, x0, #0x0
 410:	mov	x4, #0x0                   	// #0
 414:	mov	x3, #0x0                   	// #0
 418:	mov	w1, #0x69                  	// #105
 41c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 420:	mov	x4, x0
 424:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 428:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 42c:	add	x2, x2, #0x0
 430:	add	x0, x0, #0x0
 434:	mov	w1, #0x6a                  	// #106
 438:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 43c:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 440:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 444:	add	x2, x2, #0x0
 448:	add	x0, x0, #0x0
 44c:	mov	w1, #0x6b                  	// #107
 450:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 454:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 458:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 45c:	add	x2, x2, #0x0
 460:	add	x0, x0, #0x0
 464:	mov	x4, #0x8000                	// #32768
 468:	mov	w1, #0x15                  	// #21
 46c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 470:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 474:	mov	x2, x22
 478:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 47c:	add	x0, x0, #0x0
 480:	ldr	x1, [x1]
 484:	ldr	x1, [x1]
 488:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 48c:	mov	x0, #0x0                   	// #0
 490:	b	ec <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0xec>

Disassembly of section .text._ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m:

0000000000000000 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m>:
   0:	stp	x19, x20, [sp, #-80]!
   4:	stp	x21, x22, [sp, #16]
   8:	mov	x21, x1
   c:	add	x1, x0, x3, lsl #10
  10:	stp	x23, x24, [sp, #32]
  14:	mov	x23, x3
  18:	mov	x24, x2
  1c:	ldp	x5, x19, [x21]
  20:	ldr	x20, [x1, #24]
  24:	str	x30, [sp, #56]
  28:	lsr	x19, x19, #1
  2c:	cmp	x19, x5
  30:	csel	x19, x19, x5, ls  // ls = plast
  34:	sub	x5, x5, x19
  38:	cbnz	x20, 9c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0x9c>
  3c:	add	x0, x5, #0x4
  40:	ldr	x2, [x21, x0, lsl #3]
  44:	cbz	x2, 108 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0x108>
  48:	add	x5, x5, #0x4
  4c:	str	x19, [x2, #8]
  50:	add	x6, x2, #0x10
  54:	mov	x0, #0x0                   	// #0
  58:	add	x5, x21, x5, lsl #3
  5c:	cbz	x19, 74 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0x74>
  60:	ldr	x4, [x5, x0, lsl #3]
  64:	str	x4, [x6, x0, lsl #3]
  68:	add	x0, x0, #0x1
  6c:	cmp	x19, x0
  70:	b.ne	60 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0x60>  // b.any
  74:	ldr	x4, [x21]
  78:	mov	x1, x23
  7c:	mov	x0, x24
  80:	sub	x19, x4, x19
  84:	ldp	x23, x24, [sp, #32]
  88:	ldr	x30, [sp, #56]
  8c:	str	x19, [x21]
  90:	ldp	x21, x22, [sp, #16]
  94:	ldp	x19, x20, [sp], #80
  98:	b	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m>
  9c:	str	x25, [sp, #48]
  a0:	cmp	x20, #0x35
  a4:	b.hi	128 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0x128>  // b.pmore
  a8:	lsl	x25, x20, #10
  ac:	mov	x22, x0
  b0:	add	x1, x0, x25
  b4:	ldr	x3, [x0, x25]
  b8:	cbz	x3, 148 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0x148>
  bc:	lsl	x20, x20, #7
  c0:	add	x2, x22, x25
  c4:	add	x0, x20, x3
  c8:	mov	x1, #0xd800                	// #55296
  cc:	add	x0, x0, #0x2
  d0:	sub	x3, x3, #0x1
  d4:	add	x1, x22, x1
  d8:	str	x3, [x22, x25]
  dc:	add	x20, x20, x3
  e0:	ldr	x3, [x22, x0, lsl #3]
  e4:	add	x20, x20, #0x4
  e8:	ldr	x2, [x2, #16]
  ec:	ldr	x0, [x1, #16]
  f0:	prfm	pldl1keep, [x3]
  f4:	add	x0, x0, x2
  f8:	ldr	x2, [x22, x20, lsl #3]
  fc:	ldr	x25, [sp, #48]
 100:	str	x0, [x1, #16]
 104:	b	44 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0x44>
 108:	str	x25, [sp, #48]
 10c:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 110:	adrp	x0, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m>
 114:	add	x0, x0, #0x0
 118:	ldr	x1, [x1]
 11c:	ldr	x1, [x1]
 120:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 124:	bl	0 <_ZN11__sanitizer3DieEv>
 128:	adrp	x2, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m>
 12c:	adrp	x0, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m>
 130:	mov	x3, x20
 134:	add	x2, x2, #0x0
 138:	add	x0, x0, #0x0
 13c:	mov	x4, #0x36                  	// #54
 140:	mov	w1, #0xa0                  	// #160
 144:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 148:	mov	x3, x20
 14c:	str	x5, [sp, #72]
 150:	bl	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m>
 154:	tst	w0, #0xff
 158:	ldr	x5, [sp, #72]
 15c:	b.eq	10c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0x10c>  // b.none
 160:	ldr	x3, [x22, x25]
 164:	b	bc <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0xbc>

Disassembly of section .text._ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm:

0000000000000000 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>:
   0:	stp	x19, x20, [sp, #-64]!
   4:	stp	x23, x24, [sp, #32]
   8:	mov	x23, x3
   c:	mov	x24, x4
  10:	str	x30, [sp, #56]
  14:	cbz	x2, 2c0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x2c0>
  18:	stp	x21, x22, [sp, #16]
  1c:	mov	x19, x2
  20:	mov	x20, x0
  24:	mov	x22, x1
  28:	cbz	x3, 2d8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x2d8>
  2c:	str	x25, [sp, #48]
  30:	mov	x0, #0xffffffffffff        	// #281474976710655
  34:	cmp	x2, x0
  38:	b.ls	250 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x250>  // b.plast
  3c:	add	x25, x20, #0xc1, lsl #12
  40:	mov	w2, #0x1                   	// #1
  44:	ldxrb	w1, [x25]
  48:	stxrb	w0, w2, [x25]
  4c:	cbnz	w0, 44 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x44>
  50:	dmb	ish
  54:	tst	w1, #0xff
  58:	b.eq	64 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x64>  // b.none
  5c:	mov	x0, x25
  60:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
  64:	add	x21, x20, #0x80, lsl #12
  68:	add	x21, x21, #0xc00
  6c:	add	x1, x21, #0x1c0
  70:	add	x2, x1, #0x40, lsl #12
  74:	ldr	x7, [x2, #16]
  78:	cbz	x7, 298 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x298>
  7c:	ldr	x6, [x1, #8]
  80:	mov	x3, #0x0                   	// #0
  84:	add	x8, x6, x7, lsl #3
  88:	ldr	x7, [x6]
  8c:	cmp	x7, x19
  90:	b.hi	a4 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0xa4>  // b.pmore
  94:	sub	x1, x19, x3
  98:	sub	x2, x19, x7
  9c:	cmp	x2, x1
  a0:	csel	x3, x3, x7, cs  // cs = hs, nlast
  a4:	add	x6, x6, #0x8
  a8:	cmp	x8, x6
  ac:	b.ne	88 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x88>  // b.any
  b0:	cbz	x3, 298 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x298>
  b4:	ldr	x4, [x3]
  b8:	cmp	x4, x3
  bc:	b.hi	584 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x584>  // b.pmore
  c0:	ldr	x0, [x3, #8]
  c4:	add	x4, x4, x0
  c8:	cmp	x4, x3
  cc:	b.ls	59c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x59c>  // b.plast
  d0:	cmp	x19, x3
  d4:	b.cc	5b4 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x5b4>  // b.lo, b.ul, b.last
  d8:	cmp	x4, x19
  dc:	b.ls	298 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x298>  // b.plast
  e0:	ldr	x0, [x21, #448]
  e4:	sub	x1, x0, #0x1
  e8:	tst	x1, x3
  ec:	b.ne	4f8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x4f8>  // b.any
  f0:	dmb	ish
  f4:	strb	wzr, [x25]
  f8:	cmn	x3, x0
  fc:	b.eq	2a0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x2a0>  // b.none
 100:	mov	x0, #0xffffffffffff        	// #281474976710655
 104:	cmp	x19, x0
 108:	b.ls	440 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x440>  // b.plast
 10c:	ldr	x1, [x21, #448]
 110:	sub	x0, x1, #0x1
 114:	tst	x19, x0
 118:	b.ne	4d8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x4d8>  // b.any
 11c:	sub	x2, x19, x1
 120:	tst	x1, x0
 124:	ldr	x5, [x2, #16]
 128:	b.ne	5d0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x5d0>  // b.any
 12c:	add	x5, x5, x0
 130:	neg	x0, x1
 134:	and	x0, x5, x0
 138:	cmp	x0, x23
 13c:	csel	x21, x0, x23, ls  // ls = plast
 140:	mov	x2, x23
 144:	mov	x3, x24
 148:	mov	x1, x22
 14c:	mov	x0, x20
 150:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 154:	mov	x23, x0
 158:	cbz	x0, 168 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x168>
 15c:	mov	x2, x21
 160:	mov	x1, x19
 164:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 168:	mov	x0, #0xffffffffffff        	// #281474976710655
 16c:	cmp	x19, x0
 170:	b.ls	44c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x44c>  // b.plast
 174:	add	x21, x20, #0x80, lsl #12
 178:	add	x21, x21, #0xc00
 17c:	ldr	x4, [x21, #448]
 180:	sub	x0, x4, #0x1
 184:	tst	x19, x0
 188:	b.ne	4d8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x4d8>  // b.any
 18c:	sub	x19, x19, x4
 190:	add	x25, x20, #0xc1, lsl #12
 194:	mov	w1, #0x1                   	// #1
 198:	ldxrb	w0, [x25]
 19c:	stxrb	w2, w1, [x25]
 1a0:	cbnz	w2, 198 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x198>
 1a4:	dmb	ish
 1a8:	tst	w0, #0xff
 1ac:	b.eq	1b8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x1b8>  // b.none
 1b0:	mov	x0, x25
 1b4:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 1b8:	ldr	x0, [x19, #24]
 1bc:	add	x21, x21, #0x1c0
 1c0:	ldr	x2, [x21, #8]
 1c4:	ldr	x3, [x2, x0, lsl #3]
 1c8:	cmp	x3, x19
 1cc:	b.ne	5e0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x5e0>  // b.any
 1d0:	add	x21, x21, #0x40, lsl #12
 1d4:	ldr	x4, [x21, #16]
 1d8:	cmp	x0, x4
 1dc:	b.cs	5fc <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x5fc>  // b.hs, b.nlast
 1e0:	sub	x4, x4, #0x1
 1e4:	ldr	x3, [x19, #8]
 1e8:	ldr	x5, [x2, x4, lsl #3]
 1ec:	str	x4, [x21, #16]
 1f0:	str	x5, [x2, x0, lsl #3]
 1f4:	ldp	x4, x2, [x21, #40]
 1f8:	str	x0, [x5, #24]
 1fc:	ldr	x0, [x25, #24]
 200:	strb	wzr, [x21, #24]
 204:	sub	x0, x0, x3
 208:	sub	x2, x2, x3
 20c:	add	x4, x4, #0x1
 210:	stp	x4, x2, [x21, #40]
 214:	str	x0, [x25, #24]
 218:	ldr	x0, [x25, #32]
 21c:	sub	x0, x0, x3
 220:	str	x0, [x25, #32]
 224:	dmb	ish
 228:	strb	wzr, [x25]
 22c:	ldp	x0, x1, [x19]
 230:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 234:	ldr	x25, [sp, #48]
 238:	mov	x0, x23
 23c:	ldp	x21, x22, [sp, #16]
 240:	ldp	x23, x24, [sp, #32]
 244:	ldr	x30, [sp, #56]
 248:	ldp	x19, x20, [sp], #64
 24c:	ret
 250:	lsr	x0, x2, #32
 254:	ldr	x1, [x20, x0, lsl #3]
 258:	dmb	ish
 25c:	cbz	x1, 3c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x3c>
 260:	lsr	w2, w2, #20
 264:	lsr	x3, x19, #20
 268:	ldrb	w1, [x1, x2]
 26c:	cbz	w1, 3c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x3c>
 270:	lsl	x1, x0, #3
 274:	ldr	x0, [x20, x0, lsl #3]
 278:	dmb	ish
 27c:	cbz	x0, 28c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x28c>
 280:	and	x3, x3, #0xfff
 284:	ldrb	w0, [x0, x3]
 288:	cbnz	w0, 518 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x518>
 28c:	add	x21, x20, #0x80, lsl #12
 290:	add	x21, x21, #0xc00
 294:	b	10c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x10c>
 298:	dmb	ish
 29c:	strb	wzr, [x25]
 2a0:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 2a4:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 2a8:	add	x2, x2, #0x0
 2ac:	add	x0, x0, #0x0
 2b0:	mov	x4, #0x0                   	// #0
 2b4:	mov	x3, #0x0                   	// #0
 2b8:	mov	w1, #0x62                  	// #98
 2bc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2c0:	mov	x2, x23
 2c4:	mov	x3, x4
 2c8:	ldp	x23, x24, [sp, #32]
 2cc:	ldr	x30, [sp, #56]
 2d0:	ldp	x19, x20, [sp], #64
 2d4:	b	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 2d8:	mov	x0, #0xffffffffffff        	// #281474976710655
 2dc:	cmp	x2, x0
 2e0:	b.hi	370 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x370>  // b.pmore
 2e4:	lsr	x1, x2, #32
 2e8:	ldr	x0, [x20, x1, lsl #3]
 2ec:	dmb	ish
 2f0:	cbz	x0, 370 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x370>
 2f4:	lsr	w2, w2, #20
 2f8:	ldrb	w0, [x0, x2]
 2fc:	cbz	w0, 370 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x370>
 300:	ldr	x0, [x20, x1, lsl #3]
 304:	dmb	ish
 308:	cbz	x0, 628 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x628>
 30c:	ldrb	w21, [x0, x2]
 310:	cbz	x21, 628 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x628>
 314:	cmp	x21, #0x35
 318:	b.hi	66c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x66c>  // b.pmore
 31c:	lsl	x23, x21, #10
 320:	add	x1, x22, x23
 324:	ldr	x2, [x1, #8]
 328:	cbz	x2, 79c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x79c>
 32c:	ldr	x0, [x22, x23]
 330:	cmp	x0, x2
 334:	b.eq	784 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x784>  // b.none
 338:	add	x1, x0, x21, lsl #7
 33c:	add	x3, x22, x23
 340:	add	x1, x1, #0x4
 344:	add	x0, x0, #0x1
 348:	mov	x4, #0xd800                	// #55296
 34c:	add	x2, x22, x4
 350:	str	x0, [x22, x23]
 354:	mov	x23, #0x0                   	// #0
 358:	str	x19, [x22, x1, lsl #3]
 35c:	ldr	x0, [x2, #16]
 360:	ldr	x1, [x3, #16]
 364:	sub	x0, x0, x1
 368:	str	x0, [x2, #16]
 36c:	b	238 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x238>
 370:	add	x21, x20, #0x80, lsl #12
 374:	add	x21, x21, #0xc00
 378:	ldr	x4, [x21, #448]
 37c:	str	x25, [sp, #48]
 380:	sub	x0, x4, #0x1
 384:	tst	x19, x0
 388:	b.ne	4d8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x4d8>  // b.any
 38c:	sub	x19, x19, x4
 390:	add	x25, x20, #0xc1, lsl #12
 394:	mov	w1, #0x1                   	// #1
 398:	ldxrb	w0, [x25]
 39c:	stxrb	w2, w1, [x25]
 3a0:	cbnz	w2, 398 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x398>
 3a4:	dmb	ish
 3a8:	tst	w0, #0xff
 3ac:	b.eq	3b8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x3b8>  // b.none
 3b0:	mov	x0, x25
 3b4:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 3b8:	ldr	x0, [x19, #24]
 3bc:	add	x21, x21, #0x1c0
 3c0:	ldr	x2, [x21, #8]
 3c4:	ldr	x3, [x2, x0, lsl #3]
 3c8:	cmp	x3, x19
 3cc:	b.ne	5e0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x5e0>  // b.any
 3d0:	add	x21, x21, #0x40, lsl #12
 3d4:	ldr	x4, [x21, #16]
 3d8:	cmp	x0, x4
 3dc:	b.cs	5fc <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x5fc>  // b.hs, b.nlast
 3e0:	sub	x4, x4, #0x1
 3e4:	ldr	x3, [x19, #8]
 3e8:	ldr	x5, [x2, x4, lsl #3]
 3ec:	str	x4, [x21, #16]
 3f0:	str	x5, [x2, x0, lsl #3]
 3f4:	ldp	x4, x2, [x21, #40]
 3f8:	str	x0, [x5, #24]
 3fc:	ldr	x0, [x25, #24]
 400:	strb	wzr, [x21, #24]
 404:	sub	x0, x0, x3
 408:	sub	x2, x2, x3
 40c:	add	x4, x4, #0x1
 410:	stp	x4, x2, [x21, #40]
 414:	str	x0, [x25, #24]
 418:	ldr	x0, [x25, #32]
 41c:	sub	x0, x0, x3
 420:	str	x0, [x25, #32]
 424:	dmb	ish
 428:	strb	wzr, [x25]
 42c:	ldp	x0, x1, [x19]
 430:	mov	x23, #0x0                   	// #0
 434:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 438:	ldr	x25, [sp, #48]
 43c:	b	238 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x238>
 440:	lsr	x3, x19, #20
 444:	lsr	x0, x19, #32
 448:	b	270 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x270>
 44c:	lsr	x1, x19, #32
 450:	ldr	x0, [x20, x1, lsl #3]
 454:	dmb	ish
 458:	cbz	x0, 174 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x174>
 45c:	lsr	w2, w19, #20
 460:	ldrb	w0, [x0, x2]
 464:	cbz	w0, 174 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x174>
 468:	ldr	x0, [x20, x1, lsl #3]
 46c:	dmb	ish
 470:	cbz	x0, 62c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x62c>
 474:	ldrb	w21, [x0, x2]
 478:	cbz	x21, 62c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x62c>
 47c:	cmp	x21, #0x35
 480:	b.hi	670 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x670>  // b.pmore
 484:	lsl	x24, x21, #10
 488:	add	x1, x22, x24
 48c:	ldr	x2, [x1, #8]
 490:	cbz	x2, 6a8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x6a8>
 494:	ldr	x0, [x22, x24]
 498:	cmp	x2, x0
 49c:	b.eq	690 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x690>  // b.none
 4a0:	add	x1, x0, x21, lsl #7
 4a4:	add	x3, x22, x24
 4a8:	add	x1, x1, #0x4
 4ac:	add	x0, x0, #0x1
 4b0:	mov	x2, #0xd800                	// #55296
 4b4:	add	x2, x22, x2
 4b8:	str	x0, [x22, x24]
 4bc:	str	x19, [x22, x1, lsl #3]
 4c0:	ldr	x0, [x2, #16]
 4c4:	ldr	x1, [x3, #16]
 4c8:	ldr	x25, [sp, #48]
 4cc:	sub	x0, x0, x1
 4d0:	str	x0, [x2, #16]
 4d4:	b	238 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x238>
 4d8:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 4dc:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 4e0:	add	x2, x2, #0x0
 4e4:	add	x0, x0, #0x0
 4e8:	mov	x4, #0x0                   	// #0
 4ec:	mov	x3, #0x0                   	// #0
 4f0:	mov	w1, #0x123                 	// #291
 4f4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 4f8:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 4fc:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 500:	add	x2, x2, #0x0
 504:	add	x0, x0, #0x0
 508:	mov	x4, #0x0                   	// #0
 50c:	mov	x3, #0x0                   	// #0
 510:	mov	w1, #0x12b                 	// #299
 514:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 518:	ldr	x0, [x20, x1]
 51c:	dmb	ish
 520:	cbz	x0, 64c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x64c>
 524:	ldrb	w0, [x0, x3]
 528:	cbz	w0, 64c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x64c>
 52c:	ldr	x21, [x20, x1]
 530:	dmb	ish
 534:	cbz	x21, 140 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x140>
 538:	ldrb	w0, [x21, x3]
 53c:	cmp	w0, #0x35
 540:	and	x1, x0, #0xff
 544:	b.eq	618 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x618>  // b.none
 548:	ubfiz	x0, x0, #4, #8
 54c:	cmp	x0, x23
 550:	csel	x21, x0, x23, ls  // ls = plast
 554:	cmp	x1, #0x10
 558:	b.ls	140 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x140>  // b.plast
 55c:	sub	x1, x1, #0x10
 560:	mov	x0, #0x100                 	// #256
 564:	and	x21, x1, #0x3
 568:	lsr	x1, x1, #2
 56c:	lsl	x1, x0, x1
 570:	lsr	x0, x1, #2
 574:	madd	x0, x0, x21, x1
 578:	cmp	x0, x23
 57c:	csel	x21, x0, x23, ls  // ls = plast
 580:	b	140 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x140>
 584:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 588:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 58c:	add	x2, x2, #0x0
 590:	add	x0, x0, #0x0
 594:	mov	w1, #0xc1                  	// #193
 598:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 59c:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 5a0:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 5a4:	add	x2, x2, #0x0
 5a8:	add	x0, x0, #0x0
 5ac:	mov	w1, #0xc2                  	// #194
 5b0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 5b4:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 5b8:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 5bc:	mov	x4, x19
 5c0:	add	x2, x2, #0x0
 5c4:	add	x0, x0, #0x0
 5c8:	mov	w1, #0xc3                  	// #195
 5cc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 5d0:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 5d4:	add	x0, x0, #0x0
 5d8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 5dc:	bl	0 <_ZN11__sanitizer3DieEv>
 5e0:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 5e4:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 5e8:	mov	x4, x19
 5ec:	add	x2, x2, #0x0
 5f0:	add	x0, x0, #0x0
 5f4:	mov	w1, #0x88                  	// #136
 5f8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 5fc:	mov	x3, x0
 600:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 604:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 608:	add	x2, x2, #0x0
 60c:	add	x0, x0, #0x0
 610:	mov	w1, #0x89                  	// #137
 614:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 618:	cmp	x23, #0x200
 61c:	mov	x0, #0x200                 	// #512
 620:	csel	x21, x23, x0, ls  // ls = plast
 624:	b	140 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x140>
 628:	str	x25, [sp, #48]
 62c:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 630:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 634:	add	x2, x2, #0x0
 638:	add	x0, x0, #0x0
 63c:	mov	x4, #0x0                   	// #0
 640:	mov	x3, #0x0                   	// #0
 644:	mov	w1, #0xae                  	// #174
 648:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 64c:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 650:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 654:	add	x2, x2, #0x0
 658:	add	x0, x0, #0x0
 65c:	mov	x4, #0x0                   	// #0
 660:	mov	x3, #0x0                   	// #0
 664:	mov	w1, #0xcc                  	// #204
 668:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 66c:	str	x25, [sp, #48]
 670:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 674:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 678:	mov	x3, x21
 67c:	add	x2, x2, #0x0
 680:	add	x0, x0, #0x0
 684:	mov	x4, #0x36                  	// #54
 688:	mov	w1, #0xaf                  	// #175
 68c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 690:	mov	x0, x22
 694:	mov	x2, x20
 698:	mov	x3, x21
 69c:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 6a0:	ldr	x0, [x22, x24]
 6a4:	b	4a0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x4a0>
 6a8:	mov	x2, #0x1                   	// #1
 6ac:	mov	x11, x2
 6b0:	mov	x12, #0x7c                  	// #124
 6b4:	mov	x10, #0x14                  	// #20
 6b8:	mov	x9, #0x100                 	// #256
 6bc:	mov	w8, #0x4000                	// #16384
 6c0:	mov	x7, #0x3e                  	// #62
 6c4:	nop
 6c8:	add	x5, x22, x2, lsl #10
 6cc:	lsl	x6, x2, #4
 6d0:	mov	x4, x5
 6d4:	mov	x0, #0x14                  	// #20
 6d8:	mov	x3, x2
 6dc:	add	x2, x2, #0x1
 6e0:	stp	x12, x6, [x5, #8]
 6e4:	cmp	x2, #0x36
 6e8:	str	x0, [x4, #24]
 6ec:	b.eq	75c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x75c>  // b.none
 6f0:	cmp	x2, #0x35
 6f4:	b.eq	764 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x764>  // b.none
 6f8:	cmp	x2, #0x10
 6fc:	b.ls	6c8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x6c8>  // b.plast
 700:	sub	x0, x3, #0xf
 704:	add	x4, x4, #0x400
 708:	and	x6, x0, #0x3
 70c:	mov	x3, x2
 710:	lsr	x0, x0, #2
 714:	add	x2, x2, #0x1
 718:	lsl	x0, x9, x0
 71c:	lsr	x5, x0, #2
 720:	madd	x5, x5, x6, x0
 724:	str	x5, [x4, #16]
 728:	udiv	w0, w8, w5
 72c:	cmp	x0, #0x0
 730:	csel	x0, x0, x11, ne  // ne = any
 734:	cmp	x0, #0x3e
 738:	csel	x0, x0, x7, ls  // ls = plast
 73c:	add	x6, x0, #0x2
 740:	lsl	x0, x0, #1
 744:	str	x0, [x4, #8]
 748:	cmp	x5, x6, lsl #3
 74c:	csel	x0, x10, xzr, cc  // cc = lo, ul, last
 750:	str	x0, [x4, #24]
 754:	cmp	x2, #0x36
 758:	b.ne	6f0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x6f0>  // b.any
 75c:	ldr	x2, [x1, #8]
 760:	b	494 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x494>
 764:	add	x0, x22, #0x8, lsl #12
 768:	mov	x2, #0x200                 	// #512
 76c:	mov	x3, #0x40                  	// #64
 770:	str	x3, [x0, #21512]
 774:	str	x2, [x0, #21520]
 778:	str	xzr, [x0, #21528]
 77c:	ldr	x2, [x1, #8]
 780:	b	494 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x494>
 784:	mov	x0, x22
 788:	mov	x2, x20
 78c:	mov	x3, x21
 790:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 794:	ldr	x0, [x22, x23]
 798:	b	338 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x338>
 79c:	mov	x2, #0x1                   	// #1
 7a0:	mov	x11, x2
 7a4:	mov	x12, #0x7c                  	// #124
 7a8:	mov	x10, #0x14                  	// #20
 7ac:	mov	x9, #0x100                 	// #256
 7b0:	mov	w8, #0x4000                	// #16384
 7b4:	mov	x7, #0x3e                  	// #62
 7b8:	add	x5, x22, x2, lsl #10
 7bc:	lsl	x6, x2, #4
 7c0:	mov	x4, x5
 7c4:	mov	x0, #0x14                  	// #20
 7c8:	mov	x3, x2
 7cc:	add	x2, x2, #0x1
 7d0:	stp	x12, x6, [x5, #8]
 7d4:	cmp	x2, #0x36
 7d8:	str	x0, [x4, #24]
 7dc:	b.eq	84c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x84c>  // b.none
 7e0:	cmp	x2, #0x35
 7e4:	b.eq	854 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x854>  // b.none
 7e8:	cmp	x2, #0x10
 7ec:	b.ls	7b8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x7b8>  // b.plast
 7f0:	sub	x0, x3, #0xf
 7f4:	add	x4, x4, #0x400
 7f8:	and	x6, x0, #0x3
 7fc:	mov	x3, x2
 800:	lsr	x0, x0, #2
 804:	add	x2, x2, #0x1
 808:	lsl	x0, x9, x0
 80c:	lsr	x5, x0, #2
 810:	madd	x5, x5, x6, x0
 814:	str	x5, [x4, #16]
 818:	udiv	w0, w8, w5
 81c:	cmp	x0, #0x0
 820:	csel	x0, x0, x11, ne  // ne = any
 824:	cmp	x0, #0x3e
 828:	csel	x0, x0, x7, ls  // ls = plast
 82c:	add	x6, x0, #0x2
 830:	lsl	x0, x0, #1
 834:	str	x0, [x4, #8]
 838:	cmp	x5, x6, lsl #3
 83c:	csel	x0, x10, xzr, cc  // cc = lo, ul, last
 840:	str	x0, [x4, #24]
 844:	cmp	x2, #0x36
 848:	b.ne	7e0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x7e0>  // b.any
 84c:	ldr	x2, [x1, #8]
 850:	b	32c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x32c>
 854:	add	x0, x22, #0x8, lsl #12
 858:	mov	x2, #0x200                 	// #512
 85c:	mov	x3, #0x40                  	// #64
 860:	str	x3, [x0, #21512]
 864:	str	x2, [x0, #21520]
 868:	str	xzr, [x0, #21528]
 86c:	ldr	x2, [x1, #8]
 870:	b	32c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x32c>

sanitizer_allocator_checks.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer16SetErrnoToENOMEMEv>:
   0:	str	x30, [sp, #-16]!
   4:	bl	0 <__errno_location>
   8:	mov	w1, #0xc                   	// #12
   c:	ldr	x30, [sp], #16
  10:	str	w1, [x0]
  14:	ret

sanitizer_allocator_report.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>:
   0:	stp	x19, x20, [sp, #-64]!
   4:	mov	x20, x0
   8:	add	x19, sp, #0x20
   c:	stp	x21, x30, [sp, #16]
  10:	mov	x0, x19
  14:	mov	x21, x1
  18:	adrp	x1, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  1c:	add	x1, x1, #0x0
  20:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  24:	adrp	x4, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  28:	mov	x3, x21
  2c:	mov	x2, x20
  30:	adrp	x0, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  34:	ldr	x1, [x4]
  38:	add	x0, x0, #0x0
  3c:	ldr	x1, [x1]
  40:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  44:	mov	x0, x19
  48:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  4c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000050 <_ZN11__sanitizer21ReportPvallocOverflowEmPKNS_10StackTraceE>:
  50:	stp	x19, x20, [sp, #-80]!
  54:	adrp	x19, 0 <_ZN11__sanitizer14PageSizeCachedE>
  58:	mov	x2, x1
  5c:	stp	x21, x22, [sp, #16]
  60:	add	x21, sp, #0x30
  64:	mov	x20, x0
  68:	adrp	x1, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  6c:	mov	x0, x21
  70:	add	x1, x1, #0x0
  74:	str	x30, [sp, #32]
  78:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  7c:	ldr	x19, [x19]
  80:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  84:	ldr	x0, [x0]
  88:	ldr	x3, [x19]
  8c:	ldr	x22, [x0]
  90:	cbz	x3, b4 <_ZN11__sanitizer21ReportPvallocOverflowEmPKNS_10StackTraceE+0x64>
  94:	mov	x2, x20
  98:	mov	x1, x22
  9c:	adrp	x0, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  a0:	add	x0, x0, #0x0
  a4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  a8:	mov	x0, x21
  ac:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  b0:	bl	0 <_ZN11__sanitizer3DieEv>
  b4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  b8:	mov	x3, x0
  bc:	str	x0, [x19]
  c0:	b	94 <_ZN11__sanitizer21ReportPvallocOverflowEmPKNS_10StackTraceE+0x44>
  c4:	nop

00000000000000c8 <_ZN11__sanitizer32ReportInvalidAllocationAlignmentEmPKNS_10StackTraceE>:
  c8:	stp	x19, x20, [sp, #-64]!
  cc:	mov	x2, x1
  d0:	mov	x20, x0
  d4:	add	x19, sp, #0x20
  d8:	adrp	x1, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  dc:	mov	x0, x19
  e0:	add	x1, x1, #0x0
  e4:	str	x30, [sp, #16]
  e8:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  ec:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  f0:	mov	x2, x20
  f4:	adrp	x0, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  f8:	add	x0, x0, #0x0
  fc:	ldr	x1, [x1]
 100:	ldr	x1, [x1]
 104:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 108:	mov	x0, x19
 10c:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 110:	bl	0 <_ZN11__sanitizer3DieEv>
 114:	nop

0000000000000118 <_ZN11__sanitizer34ReportInvalidAlignedAllocAlignmentEmmPKNS_10StackTraceE>:
 118:	stp	x19, x20, [sp, #-80]!
 11c:	mov	x20, x1
 120:	add	x19, sp, #0x30
 124:	stp	x21, x30, [sp, #16]
 128:	mov	x21, x0
 12c:	mov	x0, x19
 130:	str	x1, [sp, #40]
 134:	adrp	x1, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 138:	add	x1, x1, #0x0
 13c:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 140:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 144:	mov	x3, x21
 148:	mov	x2, x20
 14c:	adrp	x0, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 150:	ldr	x1, [x1]
 154:	add	x0, x0, #0x0
 158:	ldr	x1, [x1]
 15c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 160:	mov	x0, x19
 164:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 168:	bl	0 <_ZN11__sanitizer3DieEv>
 16c:	nop

0000000000000170 <_ZN11__sanitizer35ReportInvalidPosixMemalignAlignmentEmPKNS_10StackTraceE>:
 170:	stp	x19, x20, [sp, #-64]!
 174:	mov	x2, x1
 178:	mov	x20, x0
 17c:	add	x19, sp, #0x20
 180:	adrp	x1, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 184:	mov	x0, x19
 188:	add	x1, x1, #0x0
 18c:	str	x30, [sp, #16]
 190:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 194:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 198:	mov	x2, x20
 19c:	mov	x3, #0x8                   	// #8
 1a0:	adrp	x0, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 1a4:	ldr	x1, [x1]
 1a8:	add	x0, x0, #0x0
 1ac:	ldr	x1, [x1]
 1b0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 1b4:	mov	x0, x19
 1b8:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 1bc:	bl	0 <_ZN11__sanitizer3DieEv>

00000000000001c0 <_ZN11__sanitizer26ReportAllocationSizeTooBigEmmPKNS_10StackTraceE>:
 1c0:	stp	x19, x20, [sp, #-80]!
 1c4:	mov	x20, x0
 1c8:	add	x19, sp, #0x30
 1cc:	stp	x21, x30, [sp, #16]
 1d0:	mov	x0, x19
 1d4:	mov	x21, x1
 1d8:	str	x1, [sp, #40]
 1dc:	adrp	x1, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 1e0:	add	x1, x1, #0x0
 1e4:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 1e8:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 1ec:	mov	x3, x21
 1f0:	mov	x2, x20
 1f4:	adrp	x0, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 1f8:	ldr	x1, [x1]
 1fc:	add	x0, x0, #0x0
 200:	ldr	x1, [x1]
 204:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 208:	mov	x0, x19
 20c:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 210:	bl	0 <_ZN11__sanitizer3DieEv>
 214:	nop

0000000000000218 <_ZN11__sanitizer17ReportOutOfMemoryEmPKNS_10StackTraceE>:
 218:	stp	x19, x20, [sp, #-64]!
 21c:	mov	x2, x1
 220:	mov	x20, x0
 224:	add	x19, sp, #0x20
 228:	adrp	x1, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 22c:	mov	x0, x19
 230:	add	x1, x1, #0x0
 234:	str	x30, [sp, #16]
 238:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 23c:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 240:	mov	x2, x20
 244:	adrp	x0, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 248:	add	x0, x0, #0x0
 24c:	ldr	x1, [x1]
 250:	ldr	x1, [x1]
 254:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 258:	mov	x0, x19
 25c:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 260:	bl	0 <_ZN11__sanitizer3DieEv>

Disassembly of section .text._ZN11__sanitizer26ScopedAllocatorErrorReportC2EPKcPKNS_10StackTraceE:

0000000000000000 <_ZN11__sanitizer26ScopedAllocatorErrorReportC1EPKcPKNS_10StackTraceE>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x0
   8:	mov	x20, x2
   c:	stp	x21, x30, [sp, #16]
  10:	mov	x21, x1
  14:	bl	0 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev>
  18:	stp	x21, x20, [x19, #8]
  1c:	bl	0 <_ZN11__sanitizer15ColorizeReportsEv>
  20:	strb	w0, [x19, #24]
  24:	ldp	x21, x30, [sp, #16]
  28:	tst	w0, #0xff
  2c:	ldp	x19, x20, [sp], #32
  30:	adrp	x2, 0 <_ZN11__sanitizer26ScopedAllocatorErrorReportC1EPKcPKNS_10StackTraceE>
  34:	adrp	x1, 0 <_ZN11__sanitizer26ScopedAllocatorErrorReportC1EPKcPKNS_10StackTraceE>
  38:	add	x2, x2, #0x0
  3c:	add	x1, x1, #0x0
  40:	adrp	x0, 0 <_ZN11__sanitizer26ScopedAllocatorErrorReportC1EPKcPKNS_10StackTraceE>
  44:	csel	x1, x1, x2, ne  // ne = any
  48:	add	x0, x0, #0x0
  4c:	b	0 <_ZN11__sanitizer6PrintfEPKcz>

Disassembly of section .text._ZN11__sanitizer26ScopedAllocatorErrorReportD2Ev:

0000000000000000 <_ZN11__sanitizer26ScopedAllocatorErrorReportD1Ev>:
   0:	stp	x19, x30, [sp, #-16]!
   4:	mov	x19, x0
   8:	adrp	x2, 0 <_ZN11__sanitizer26ScopedAllocatorErrorReportD1Ev>
   c:	add	x2, x2, #0x0
  10:	adrp	x1, 0 <_ZN11__sanitizer26ScopedAllocatorErrorReportD1Ev>
  14:	ldrb	w3, [x19, #24]
  18:	add	x1, x1, #0x0
  1c:	adrp	x0, 0 <_ZN11__sanitizer26ScopedAllocatorErrorReportD1Ev>
  20:	add	x0, x0, #0x0
  24:	cmp	w3, #0x0
  28:	csel	x1, x1, x2, ne  // ne = any
  2c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  30:	ldr	x0, [x19, #16]
  34:	bl	0 <_ZNK11__sanitizer10StackTrace5PrintEv>
  38:	bl	0 <_ZN11__sanitizer34PrintHintAllocatorCannotReturnNullEv>
  3c:	ldp	x0, x1, [x19, #8]
  40:	mov	x2, #0x0                   	// #0
  44:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcPKNS_10StackTraceES1_>
  48:	mov	x0, x19
  4c:	ldp	x19, x30, [sp], #16
  50:	b	0 <_ZN11__sanitizer21ScopedErrorReportLockD1Ev>

sanitizer_common.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	adrp	x19, 0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
   8:	add	x19, x19, #0x0
   c:	mov	x1, #0x1000                	// #4096
  10:	mov	x0, x19
  14:	str	x30, [sp, #24]
  18:	bl	0 <_ZN11__sanitizer19ReadLongProcessNameEPcm>
  1c:	mov	x0, x19
  20:	mov	w1, #0x2f                  	// #47
  24:	bl	0 <_ZN11__sanitizer16internal_strrchrEPKci>
  28:	cbz	x0, 70 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0+0x70>
  2c:	add	x20, x0, #0x1
  30:	str	x21, [sp, #16]
  34:	mov	x0, x20
  38:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
  3c:	cmp	x20, x19
  40:	mov	x21, x0
  44:	b.eq	5c <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0+0x5c>  // b.none
  48:	mov	x2, x0
  4c:	mov	x1, x20
  50:	mov	x0, x19
  54:	bl	0 <_ZN11__sanitizer16internal_memmoveEPvPKvm>
  58:	strb	wzr, [x21, x19]
  5c:	mov	x0, x21
  60:	ldr	x21, [sp, #16]
  64:	ldr	x30, [sp, #24]
  68:	ldp	x19, x20, [sp], #32
  6c:	ret
  70:	mov	x0, x19
  74:	ldr	x30, [sp, #24]
  78:	ldp	x19, x20, [sp], #32
  7c:	b	0 <_ZN11__sanitizer15internal_strlenEPKc>

0000000000000080 <_ZN11__sanitizer15CacheBinaryNameEv.part.0>:
  80:	str	x30, [sp, #-16]!
  84:	mov	x1, #0x1000                	// #4096
  88:	adrp	x0, 0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
  8c:	add	x0, x0, #0x0
  90:	bl	0 <_ZN11__sanitizer14ReadBinaryNameEPcm>
  94:	ldr	x30, [sp], #16
  98:	b	0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
  9c:	nop

00000000000000a0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>:
  a0:	str	x30, [sp, #-16]!
  a4:	tst	w4, #0xff
  a8:	b.ne	bc <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib+0x1c>  // b.any
  ac:	adrp	x8, 0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
  b0:	mov	x7, x0
  b4:	ldr	w0, [x8]
  b8:	cbz	w0, cc <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib+0x2c>
  bc:	adrp	x0, 0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
  c0:	add	x0, x0, #0x0
  c4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  c8:	bl	0 <_ZN11__sanitizer3DieEv>
  cc:	adrp	x4, 0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
  d0:	mov	x5, x1
  d4:	mov	w6, w3
  d8:	adrp	x0, 0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
  dc:	ldr	x1, [x4]
  e0:	mov	x3, x7
  e4:	mov	x4, x7
  e8:	add	x0, x0, #0x0
  ec:	mov	w7, #0x1                   	// #1
  f0:	str	w7, [x8]
  f4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  f8:	bl	0 <_ZN11__sanitizer14DumpProcessMapEv>
  fc:	adrp	x2, 0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
 100:	adrp	x0, 0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
 104:	add	x2, x2, #0x0
 108:	add	x0, x0, #0x0
 10c:	mov	x4, #0x0                   	// #0
 110:	mov	x3, #0x0                   	// #0
 114:	mov	w1, #0x35                  	// #53
 118:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 11c:	nop

0000000000000120 <_ZN11__sanitizer15StripPathPrefixEPKcS1_>:
 120:	stp	x19, x20, [sp, #-32]!
 124:	str	x30, [sp, #24]
 128:	cbz	x0, 198 <_ZN11__sanitizer15StripPathPrefixEPKcS1_+0x78>
 12c:	mov	x19, x0
 130:	mov	x20, x1
 134:	cbz	x1, 164 <_ZN11__sanitizer15StripPathPrefixEPKcS1_+0x44>
 138:	str	x21, [sp, #16]
 13c:	bl	0 <_ZN11__sanitizer15internal_strstrEPKcS1_>
 140:	mov	x21, x0
 144:	cbz	x0, 154 <_ZN11__sanitizer15StripPathPrefixEPKcS1_+0x34>
 148:	mov	x0, x20
 14c:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 150:	add	x19, x21, x0
 154:	ldrb	w0, [x19]
 158:	cmp	w0, #0x2e
 15c:	b.eq	174 <_ZN11__sanitizer15StripPathPrefixEPKcS1_+0x54>  // b.none
 160:	ldr	x21, [sp, #16]
 164:	mov	x0, x19
 168:	ldr	x30, [sp, #24]
 16c:	ldp	x19, x20, [sp], #32
 170:	ret
 174:	ldrb	w1, [x19, #1]
 178:	add	x0, x19, #0x2
 17c:	ldr	x21, [sp, #16]
 180:	cmp	w1, #0x2f
 184:	csel	x19, x0, x19, eq  // eq = none
 188:	mov	x0, x19
 18c:	ldr	x30, [sp, #24]
 190:	ldp	x19, x20, [sp], #32
 194:	ret
 198:	mov	x19, #0x0                   	// #0
 19c:	b	164 <_ZN11__sanitizer15StripPathPrefixEPKcS1_+0x44>

00000000000001a0 <_ZN11__sanitizer15StripModuleNameEPKc>:
 1a0:	stp	x19, x30, [sp, #-16]!
 1a4:	mov	x19, x0
 1a8:	cbz	x0, 1bc <_ZN11__sanitizer15StripModuleNameEPKc+0x1c>
 1ac:	mov	w1, #0x2f                  	// #47
 1b0:	bl	0 <_ZN11__sanitizer16internal_strrchrEPKci>
 1b4:	cmp	x0, #0x0
 1b8:	csinc	x19, x19, x0, eq  // eq = none
 1bc:	mov	x0, x19
 1c0:	ldp	x19, x30, [sp], #16
 1c4:	ret

00000000000001c8 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc>:
 1c8:	cbz	x0, 254 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x8c>
 1cc:	stp	x19, x30, [sp, #-16]!
 1d0:	mov	x19, x0
 1d4:	ldrb	w1, [x0]
 1d8:	cbz	w1, 248 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x80>
 1dc:	nop
 1e0:	cmp	w1, #0x1b
 1e4:	b.eq	22c <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x64>  // b.none
 1e8:	cmp	x0, x19
 1ec:	b.eq	1f4 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x2c>  // b.none
 1f0:	strb	w1, [x19]
 1f4:	add	x19, x19, #0x1
 1f8:	ldrb	w1, [x0, #1]
 1fc:	add	x0, x0, #0x1
 200:	cbz	w1, 248 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x80>
 204:	cmp	x0, x19
 208:	b.cs	1e0 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x18>  // b.hs, b.nlast
 20c:	mov	x3, x0
 210:	adrp	x2, 0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
 214:	adrp	x0, 0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
 218:	mov	x4, x19
 21c:	add	x2, x2, #0x0
 220:	add	x0, x0, #0x0
 224:	mov	w1, #0x68                  	// #104
 228:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 22c:	ldrb	w2, [x0, #1]
 230:	cmp	w2, #0x5b
 234:	b.ne	1e8 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x20>  // b.any
 238:	mov	w1, #0x6d                  	// #109
 23c:	bl	0 <_ZN11__sanitizer18internal_strchrnulEPKci>
 240:	ldrb	w1, [x0]
 244:	cbnz	w1, 1f8 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x30>
 248:	strb	wzr, [x19]
 24c:	ldp	x19, x30, [sp], #16
 250:	ret
 254:	ret

0000000000000258 <_ZN11__sanitizer12LoadedModule5clearEv>:
 258:	stp	x19, x20, [sp, #-32]!
 25c:	mov	x19, x0
 260:	mov	x1, #0x0                   	// #0
 264:	ldr	x0, [x0]
 268:	str	x30, [sp, #16]
 26c:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 270:	stp	xzr, xzr, [x19]
 274:	mov	w1, #0x0                   	// #0
 278:	str	xzr, [x19, #16]
 27c:	add	x0, x19, #0x1c
 280:	str	wzr, [x19, #24]
 284:	mov	x2, #0x10                  	// #16
 288:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 28c:	strb	wzr, [x19, #44]
 290:	ldr	x1, [x19, #48]
 294:	cbz	x1, 2dc <_ZN11__sanitizer12LoadedModule5clearEv+0x84>
 298:	add	x20, x19, #0x30
 29c:	b	2b0 <_ZN11__sanitizer12LoadedModule5clearEv+0x58>
 2a0:	str	x2, [x20]
 2a4:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 2a8:	ldr	x1, [x19, #48]
 2ac:	cbz	x1, 2dc <_ZN11__sanitizer12LoadedModule5clearEv+0x84>
 2b0:	ldr	x0, [x19, #56]
 2b4:	sub	x2, x1, #0x1
 2b8:	mov	x1, #0x0                   	// #0
 2bc:	ldr	x3, [x0]
 2c0:	str	x3, [x20, #8]
 2c4:	cbnz	x3, 2a0 <_ZN11__sanitizer12LoadedModule5clearEv+0x48>
 2c8:	str	x2, [x20]
 2cc:	str	xzr, [x20, #16]
 2d0:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 2d4:	ldr	x1, [x19, #48]
 2d8:	cbnz	x1, 2b0 <_ZN11__sanitizer12LoadedModule5clearEv+0x58>
 2dc:	ldr	x30, [sp, #16]
 2e0:	ldp	x19, x20, [sp], #32
 2e4:	ret

00000000000002e8 <_ZN11__sanitizer12LoadedModule3setEPKcm>:
 2e8:	stp	x19, x20, [sp, #-32]!
 2ec:	mov	x19, x0
 2f0:	mov	x20, x2
 2f4:	stp	x21, x30, [sp, #16]
 2f8:	mov	x21, x1
 2fc:	bl	258 <_ZN11__sanitizer12LoadedModule5clearEv>
 300:	mov	x0, x21
 304:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 308:	ldp	x21, x30, [sp, #16]
 30c:	stp	x0, x20, [x19]
 310:	ldp	x19, x20, [sp], #32
 314:	ret

0000000000000318 <_ZN11__sanitizer12LoadedModule3setEPKcmNS_10ModuleArchEPhb>:
 318:	stp	x19, x20, [sp, #-64]!
 31c:	mov	x19, x0
 320:	mov	w20, w3
 324:	stp	x21, x22, [sp, #16]
 328:	mov	x21, x4
 32c:	mov	x22, x2
 330:	stp	x23, x24, [sp, #32]
 334:	and	w24, w5, #0xff
 338:	mov	x23, x1
 33c:	str	x30, [sp, #48]
 340:	bl	258 <_ZN11__sanitizer12LoadedModule5clearEv>
 344:	mov	x0, x23
 348:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 34c:	stp	x0, x22, [x19]
 350:	mov	x1, x21
 354:	add	x0, x19, #0x1c
 358:	str	w20, [x19, #24]
 35c:	mov	x2, #0x10                  	// #16
 360:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 364:	strb	w24, [x19, #44]
 368:	ldp	x21, x22, [sp, #16]
 36c:	ldp	x23, x24, [sp, #32]
 370:	ldr	x30, [sp, #48]
 374:	ldp	x19, x20, [sp], #64
 378:	ret
 37c:	nop

0000000000000380 <_ZN11__sanitizer12LoadedModule15addAddressRangeEmmbbPKc>:
 380:	stp	x19, x20, [sp, #-64]!
 384:	mov	x20, x0
 388:	mov	x0, #0x30                  	// #48
 38c:	stp	x21, x22, [sp, #16]
 390:	mov	x21, x5
 394:	mov	x22, x2
 398:	mov	x2, #0x0                   	// #0
 39c:	stp	x23, x24, [sp, #32]
 3a0:	and	w24, w3, #0xff
 3a4:	mov	x23, x1
 3a8:	mov	x1, #0x0                   	// #0
 3ac:	stp	x25, x30, [sp, #48]
 3b0:	and	w25, w4, #0xff
 3b4:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 3b8:	mov	x19, x0
 3bc:	cmp	x21, #0x0
 3c0:	adrp	x1, 0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
 3c4:	add	x1, x1, #0x0
 3c8:	add	x0, x0, #0x1a
 3cc:	csel	x1, x1, x21, eq  // eq = none
 3d0:	stp	xzr, x23, [x19]
 3d4:	mov	x2, #0x10                  	// #16
 3d8:	str	x22, [x19, #16]
 3dc:	strb	w24, [x19, #24]
 3e0:	strb	w25, [x19, #25]
 3e4:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
 3e8:	ldr	x0, [x20, #48]
 3ec:	cbnz	x0, 428 <_ZN11__sanitizer12LoadedModule15addAddressRangeEmmbbPKc+0xa8>
 3f0:	str	xzr, [x19]
 3f4:	mov	x1, #0x1                   	// #1
 3f8:	stp	x1, x19, [x20, #48]
 3fc:	str	x19, [x20, #64]
 400:	cbz	w24, 414 <_ZN11__sanitizer12LoadedModule15addAddressRangeEmmbbPKc+0x94>
 404:	ldr	x0, [x20, #16]
 408:	cmp	x0, x22
 40c:	b.cs	414 <_ZN11__sanitizer12LoadedModule15addAddressRangeEmmbbPKc+0x94>  // b.hs, b.nlast
 410:	str	x22, [x20, #16]
 414:	ldp	x21, x22, [sp, #16]
 418:	ldp	x23, x24, [sp, #32]
 41c:	ldp	x25, x30, [sp, #48]
 420:	ldp	x19, x20, [sp], #64
 424:	ret
 428:	str	xzr, [x19]
 42c:	add	x0, x0, #0x1
 430:	ldr	x2, [x20, #64]
 434:	str	x19, [x2]
 438:	str	x0, [x20, #48]
 43c:	str	x19, [x20, #64]
 440:	b	400 <_ZN11__sanitizer12LoadedModule15addAddressRangeEmmbbPKc+0x80>
 444:	nop

0000000000000448 <_ZNK11__sanitizer12LoadedModule15containsAddressEm>:
 448:	ldr	x0, [x0, #56]
 44c:	cbz	x0, 47c <_ZNK11__sanitizer12LoadedModule15containsAddressEm+0x34>
 450:	ldr	x2, [x0, #8]
 454:	cmp	x2, x1
 458:	b.hi	468 <_ZNK11__sanitizer12LoadedModule15containsAddressEm+0x20>  // b.pmore
 45c:	ldr	x2, [x0, #16]
 460:	cmp	x2, x1
 464:	b.hi	474 <_ZNK11__sanitizer12LoadedModule15containsAddressEm+0x2c>  // b.pmore
 468:	ldr	x0, [x0]
 46c:	cbnz	x0, 450 <_ZNK11__sanitizer12LoadedModule15containsAddressEm+0x8>
 470:	ret
 474:	mov	w0, #0x1                   	// #1
 478:	ret
 47c:	mov	w0, #0x0                   	// #0
 480:	ret
 484:	nop

0000000000000488 <_ZN11__sanitizer17IncreaseTotalMmapEm>:
 488:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 48c:	ldr	x1, [x1]
 490:	ldr	x2, [x1, #128]
 494:	cbnz	x2, 49c <_ZN11__sanitizer17IncreaseTotalMmapEm+0x14>
 498:	ret
 49c:	adrp	x2, 0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
 4a0:	add	x2, x2, #0x0
 4a4:	add	x2, x2, #0x8
 4a8:	ldxr	x3, [x2]
 4ac:	add	x4, x3, x0
 4b0:	stlxr	w5, x4, [x2]
 4b4:	cbnz	w5, 4a8 <_ZN11__sanitizer17IncreaseTotalMmapEm+0x20>
 4b8:	dmb	ish
 4bc:	ldr	x1, [x1, #128]
 4c0:	add	x0, x3, x0
 4c4:	cmp	x1, x0, lsr #20
 4c8:	b.hi	498 <_ZN11__sanitizer17IncreaseTotalMmapEm+0x10>  // b.pmore
 4cc:	adrp	x0, 0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
 4d0:	add	x0, x0, #0x0
 4d4:	str	x30, [sp, #-16]!
 4d8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 4dc:	bl	0 <_ZN11__sanitizer3DieEv>

00000000000004e0 <_ZN11__sanitizer17DecreaseTotalMmapEm>:
 4e0:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 4e4:	ldr	x1, [x1]
 4e8:	ldr	x1, [x1, #128]
 4ec:	cbnz	x1, 4f4 <_ZN11__sanitizer17DecreaseTotalMmapEm+0x14>
 4f0:	ret
 4f4:	adrp	x1, 0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
 4f8:	add	x1, x1, #0x0
 4fc:	neg	x0, x0
 500:	add	x1, x1, #0x8
 504:	ldxr	x2, [x1]
 508:	add	x2, x2, x0
 50c:	stlxr	w3, x2, [x1]
 510:	cbnz	w3, 504 <_ZN11__sanitizer17DecreaseTotalMmapEm+0x24>
 514:	dmb	ish
 518:	ret
 51c:	nop

0000000000000520 <_ZN11__sanitizer13TemplateMatchEPKcS1_>:
 520:	cbz	x1, 6b4 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x194>
 524:	stp	x19, x20, [sp, #-80]!
 528:	mov	x19, x0
 52c:	stp	x21, x22, [sp, #16]
 530:	mov	x21, x1
 534:	str	x30, [sp, #64]
 538:	ldrb	w0, [x1]
 53c:	cbz	w0, 634 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x114>
 540:	cbz	x19, 618 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0xf8>
 544:	stp	x23, x24, [sp, #32]
 548:	mov	w23, #0x0                   	// #0
 54c:	stp	x25, x26, [sp, #48]
 550:	ldrb	w1, [x19]
 554:	cmp	w1, #0x5e
 558:	b.ne	568 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x48>  // b.any
 55c:	ldrb	w1, [x19, #1]
 560:	add	x19, x19, #0x1
 564:	mov	w23, #0x1                   	// #1
 568:	mov	w2, #0x0                   	// #0
 56c:	mov	w25, #0x2a                  	// #42
 570:	mov	w24, #0x24                  	// #36
 574:	cbz	w1, 610 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0xf0>
 578:	cmp	w1, #0x2a
 57c:	b.eq	6a4 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x184>  // b.none
 580:	ldrb	w0, [x21]
 584:	cmp	w1, #0x24
 588:	b.eq	6bc <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x19c>  // b.none
 58c:	cbz	w0, 62c <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x10c>
 590:	mov	w1, #0x2a                  	// #42
 594:	mov	x0, x19
 598:	bl	0 <_ZN11__sanitizer15internal_strchrEPKci>
 59c:	mov	x22, x0
 5a0:	mov	w1, #0x24                  	// #36
 5a4:	mov	x0, x19
 5a8:	bl	0 <_ZN11__sanitizer15internal_strchrEPKci>
 5ac:	mov	x26, x0
 5b0:	cbz	x22, 67c <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x15c>
 5b4:	cmp	x0, #0x0
 5b8:	ccmp	x22, x0, #0x0, ne  // ne = any
 5bc:	b.ls	648 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x128>  // b.plast
 5c0:	strb	wzr, [x26]
 5c4:	mov	x1, x19
 5c8:	mov	x0, x21
 5cc:	bl	0 <_ZN11__sanitizer15internal_strstrEPKcS1_>
 5d0:	mov	x20, x0
 5d4:	mov	x0, x19
 5d8:	mov	x19, x26
 5dc:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 5e0:	add	x0, x20, x0
 5e4:	mov	w1, #0x24                  	// #36
 5e8:	strb	w1, [x19]
 5ec:	cbz	x20, 62c <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x10c>
 5f0:	cmp	x21, x20
 5f4:	csel	w2, w23, wzr, ne  // ne = any
 5f8:	cbnz	w2, 62c <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x10c>
 5fc:	cbz	x19, 610 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0xf0>
 600:	ldrb	w1, [x19]
 604:	mov	x21, x0
 608:	mov	w23, #0x0                   	// #0
 60c:	cbnz	w1, 578 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x58>
 610:	ldp	x23, x24, [sp, #32]
 614:	ldp	x25, x26, [sp, #48]
 618:	mov	w0, #0x1                   	// #1
 61c:	ldp	x21, x22, [sp, #16]
 620:	ldr	x30, [sp, #64]
 624:	ldp	x19, x20, [sp], #80
 628:	ret
 62c:	ldp	x23, x24, [sp, #32]
 630:	ldp	x25, x26, [sp, #48]
 634:	mov	w0, #0x0                   	// #0
 638:	ldp	x21, x22, [sp, #16]
 63c:	ldr	x30, [sp, #64]
 640:	ldp	x19, x20, [sp], #80
 644:	ret
 648:	strb	wzr, [x22]
 64c:	mov	x1, x19
 650:	mov	x0, x21
 654:	bl	0 <_ZN11__sanitizer15internal_strstrEPKcS1_>
 658:	mov	x20, x0
 65c:	mov	x0, x19
 660:	mov	x19, x22
 664:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 668:	add	x0, x20, x0
 66c:	cmp	x22, x26
 670:	csel	w1, w24, w25, eq  // eq = none
 674:	strb	w1, [x19]
 678:	b	5ec <_ZN11__sanitizer13TemplateMatchEPKcS1_+0xcc>
 67c:	cbnz	x0, 5c0 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0xa0>
 680:	mov	x1, x19
 684:	mov	x0, x21
 688:	bl	0 <_ZN11__sanitizer15internal_strstrEPKcS1_>
 68c:	mov	x20, x0
 690:	mov	x0, x19
 694:	mov	x19, #0x0                   	// #0
 698:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 69c:	add	x0, x20, x0
 6a0:	b	5ec <_ZN11__sanitizer13TemplateMatchEPKcS1_+0xcc>
 6a4:	add	x19, x19, #0x1
 6a8:	mov	x0, x21
 6ac:	mov	w2, #0x1                   	// #1
 6b0:	b	600 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0xe0>
 6b4:	mov	w0, #0x0                   	// #0
 6b8:	ret
 6bc:	cmp	w0, #0x0
 6c0:	csinc	w0, w2, wzr, ne  // ne = any
 6c4:	ldp	x23, x24, [sp, #32]
 6c8:	ldp	x25, x26, [sp, #48]
 6cc:	b	638 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x118>

00000000000006d0 <_ZN11__sanitizer14GetProcessNameEv>:
 6d0:	adrp	x0, 0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
 6d4:	add	x0, x0, #0x0
 6d8:	ret
 6dc:	nop

00000000000006e0 <_ZN11__sanitizer17UpdateProcessNameEv>:
 6e0:	b	0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
 6e4:	nop

00000000000006e8 <_ZN11__sanitizer15CacheBinaryNameEv>:
 6e8:	adrp	x0, 0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
 6ec:	ldrb	w0, [x0]
 6f0:	cbz	w0, 6f8 <_ZN11__sanitizer15CacheBinaryNameEv+0x10>
 6f4:	ret
 6f8:	b	80 <_ZN11__sanitizer15CacheBinaryNameEv.part.0>
 6fc:	nop

0000000000000700 <_ZN11__sanitizer20ReadBinaryNameCachedEPcm>:
 700:	stp	x19, x20, [sp, #-32]!
 704:	adrp	x20, 0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
 708:	mov	x19, x1
 70c:	stp	x21, x30, [sp, #16]
 710:	mov	x21, x0
 714:	ldrb	w0, [x20]
 718:	cbnz	w0, 720 <_ZN11__sanitizer20ReadBinaryNameCachedEPcm+0x20>
 71c:	bl	80 <_ZN11__sanitizer15CacheBinaryNameEv.part.0>
 720:	add	x20, x20, #0x0
 724:	mov	x0, x20
 728:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 72c:	mov	x2, x0
 730:	cbz	x19, 754 <_ZN11__sanitizer20ReadBinaryNameCachedEPcm+0x54>
 734:	sub	x19, x19, #0x1
 738:	mov	x1, x20
 73c:	cmp	x19, x0
 740:	mov	x0, x21
 744:	csel	x19, x19, x2, ls  // ls = plast
 748:	mov	x2, x19
 74c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 750:	strb	wzr, [x21, x19]
 754:	mov	x0, x19
 758:	ldp	x21, x30, [sp, #16]
 75c:	ldp	x19, x20, [sp], #32
 760:	ret
 764:	nop

0000000000000768 <_ZN11__sanitizer12PrintCmdlineEv>:
 768:	stp	x19, x20, [sp, #-32]!
 76c:	str	x30, [sp, #16]
 770:	bl	0 <_ZN11__sanitizer7GetArgvEv>
 774:	cbz	x0, 7c4 <_ZN11__sanitizer12PrintCmdlineEv+0x5c>
 778:	mov	x19, x0
 77c:	adrp	x0, 0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
 780:	add	x0, x0, #0x0
 784:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 788:	ldr	x1, [x19]
 78c:	cbz	x1, 7b0 <_ZN11__sanitizer12PrintCmdlineEv+0x48>
 790:	adrp	x20, 0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
 794:	add	x19, x19, #0x8
 798:	add	x20, x20, #0x0
 79c:	nop
 7a0:	mov	x0, x20
 7a4:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 7a8:	ldr	x1, [x19], #8
 7ac:	cbnz	x1, 7a0 <_ZN11__sanitizer12PrintCmdlineEv+0x38>
 7b0:	ldr	x30, [sp, #16]
 7b4:	adrp	x0, 0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
 7b8:	ldp	x19, x20, [sp], #32
 7bc:	add	x0, x0, #0x0
 7c0:	b	0 <_ZN11__sanitizer6PrintfEPKcz>
 7c4:	ldr	x30, [sp, #16]
 7c8:	ldp	x19, x20, [sp], #32
 7cc:	ret

00000000000007d0 <_ZN11__sanitizer14RunMallocHooksEPKvm>:
 7d0:	stp	x19, x20, [sp, #-48]!
 7d4:	adrp	x20, 0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
 7d8:	add	x20, x20, #0x0
 7dc:	add	x19, x20, #0x10
 7e0:	add	x20, x20, #0x60
 7e4:	stp	x21, x22, [sp, #16]
 7e8:	mov	x22, x0
 7ec:	mov	x21, x1
 7f0:	str	x30, [sp, #32]
 7f4:	ldr	x2, [x19]
 7f8:	mov	x1, x21
 7fc:	mov	x0, x22
 800:	add	x19, x19, #0x10
 804:	cbz	x2, 814 <_ZN11__sanitizer14RunMallocHooksEPKvm+0x44>
 808:	blr	x2
 80c:	cmp	x19, x20
 810:	b.ne	7f4 <_ZN11__sanitizer14RunMallocHooksEPKvm+0x24>  // b.any
 814:	ldp	x21, x22, [sp, #16]
 818:	ldr	x30, [sp, #32]
 81c:	ldp	x19, x20, [sp], #48
 820:	ret
 824:	nop

0000000000000828 <_ZN11__sanitizer12RunFreeHooksEPKv>:
 828:	stp	x19, x20, [sp, #-32]!
 82c:	adrp	x20, 0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
 830:	add	x20, x20, #0x0
 834:	add	x20, x20, #0x10
 838:	stp	x21, x30, [sp, #16]
 83c:	mov	x21, x0
 840:	mov	x19, #0x0                   	// #0
 844:	add	x1, x20, x19
 848:	mov	x0, x21
 84c:	add	x19, x19, #0x10
 850:	ldr	x1, [x1, #8]
 854:	cbz	x1, 864 <_ZN11__sanitizer12RunFreeHooksEPKv+0x3c>
 858:	blr	x1
 85c:	cmp	x19, #0x50
 860:	b.ne	844 <_ZN11__sanitizer12RunFreeHooksEPKv+0x1c>  // b.any
 864:	ldp	x21, x30, [sp, #16]
 868:	ldp	x19, x20, [sp], #32
 86c:	ret

0000000000000870 <__sanitizer_report_error_summary>:
 870:	mov	x1, x0
 874:	adrp	x2, 0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
 878:	add	x0, x2, #0x0
 87c:	b	0 <_ZN11__sanitizer6PrintfEPKcz>

0000000000000880 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_>:
 880:	adrp	x4, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 884:	ldr	x4, [x4]
 888:	ldrb	w2, [x4, #60]
 88c:	cbnz	w2, 894 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0x14>
 890:	ret
 894:	stp	x19, x20, [sp, #-96]!
 898:	mov	x20, x1
 89c:	stp	x23, x24, [sp, #32]
 8a0:	adrp	x23, 0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
 8a4:	add	x19, x23, #0x0
 8a8:	stp	x21, x22, [sp, #16]
 8ac:	mov	x21, x0
 8b0:	ldr	x2, [x19, #96]
 8b4:	str	x30, [sp, #48]
 8b8:	stp	xzr, xzr, [sp, #64]
 8bc:	str	xzr, [sp, #80]
 8c0:	cbz	x2, 98c <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0x10c>
 8c4:	sub	x0, x2, #0x1
 8c8:	tst	x0, x2
 8cc:	b.ne	9f4 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0x174>  // b.any
 8d0:	add	x22, x2, #0x3ff
 8d4:	neg	x2, x2
 8d8:	and	x22, x22, x2
 8dc:	adrp	x24, 0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
 8e0:	mov	w2, #0x0                   	// #0
 8e4:	add	x1, x24, #0x0
 8e8:	mov	x0, x22
 8ec:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 8f0:	ldr	x1, [sp, #64]
 8f4:	mov	x19, x0
 8f8:	ldr	x2, [sp, #80]
 8fc:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 900:	ldp	x0, x1, [sp, #64]
 904:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 908:	stp	x19, x22, [sp, #64]
 90c:	ldr	x2, [sp, #80]
 910:	cmp	x2, #0x3ff
 914:	b.hi	938 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0xb8>  // b.pmore
 918:	cmp	x22, #0x3ff
 91c:	b.ls	99c <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0x11c>  // b.plast
 920:	mov	x3, #0x400                 	// #1024
 924:	add	x0, x19, x2
 928:	mov	w1, #0x0                   	// #0
 92c:	sub	x2, x3, x2
 930:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 934:	ldr	x19, [sp, #64]
 938:	mov	x0, #0x400                 	// #1024
 93c:	stp	x0, xzr, [sp, #80]
 940:	adrp	x2, 0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
 944:	cmp	x20, #0x0
 948:	strb	wzr, [x19]
 94c:	mov	x3, x21
 950:	add	x0, sp, #0x40
 954:	adrp	x1, 0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
 958:	ldr	x2, [x2]
 95c:	add	x1, x1, #0x0
 960:	csel	x2, x2, x20, eq  // eq = none
 964:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 968:	ldr	x0, [sp, #64]
 96c:	bl	870 <__sanitizer_report_error_summary>
 970:	ldp	x0, x1, [sp, #64]
 974:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 978:	ldp	x21, x22, [sp, #16]
 97c:	ldp	x23, x24, [sp, #32]
 980:	ldr	x30, [sp, #48]
 984:	ldp	x19, x20, [sp], #96
 988:	ret
 98c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 990:	mov	x2, x0
 994:	str	x0, [x19, #96]
 998:	b	8c4 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0x44>
 99c:	add	x23, x23, #0x0
 9a0:	ldr	x0, [x23, #96]
 9a4:	cbz	x0, a04 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0x184>
 9a8:	sub	x1, x0, #0x1
 9ac:	tst	x1, x0
 9b0:	b.ne	9f4 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0x174>  // b.any
 9b4:	add	x22, x0, #0x3ff
 9b8:	neg	x0, x0
 9bc:	and	x22, x22, x0
 9c0:	add	x1, x24, #0x0
 9c4:	mov	w2, #0x0                   	// #0
 9c8:	mov	x0, x22
 9cc:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 9d0:	mov	x19, x0
 9d4:	ldr	x1, [sp, #64]
 9d8:	ldr	x2, [sp, #80]
 9dc:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 9e0:	ldp	x0, x1, [sp, #64]
 9e4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 9e8:	stp	x19, x22, [sp, #64]
 9ec:	ldr	x2, [sp, #80]
 9f0:	b	920 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0xa0>
 9f4:	adrp	x0, 0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
 9f8:	add	x0, x0, #0x0
 9fc:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 a00:	bl	0 <_ZN11__sanitizer3DieEv>
 a04:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 a08:	str	x0, [x23, #96]
 a0c:	b	9a8 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0x128>

0000000000000a10 <__sanitizer_acquire_crash_state>:
 a10:	adrp	x0, 0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
 a14:	add	x0, x0, #0x0
 a18:	add	x0, x0, #0x68
 a1c:	mov	w2, #0x1                   	// #1
 a20:	ldxrb	w1, [x0]
 a24:	stxrb	w3, w2, [x0]
 a28:	cbnz	w3, a20 <__sanitizer_acquire_crash_state+0x10>
 a2c:	tst	w1, #0xff
 a30:	dmb	ish
 a34:	cset	w0, eq  // eq = none
 a38:	ret
 a3c:	nop

0000000000000a40 <__sanitizer_install_malloc_and_free_hooks>:
 a40:	cmp	x0, #0x0
 a44:	mov	x4, x0
 a48:	ccmp	x1, #0x0, #0x4, ne  // ne = any
 a4c:	b.eq	a7c <__sanitizer_install_malloc_and_free_hooks+0x3c>  // b.none
 a50:	adrp	x6, 0 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
 a54:	add	x2, x6, #0x0
 a58:	add	x2, x2, #0x10
 a5c:	mov	w0, #0x0                   	// #0
 a60:	ldr	x3, [x2]
 a64:	mov	w5, w0
 a68:	add	w0, w0, #0x1
 a6c:	add	x2, x2, #0x10
 a70:	cmp	w0, #0x5
 a74:	cbz	x3, a84 <__sanitizer_install_malloc_and_free_hooks+0x44>
 a78:	b.ne	a60 <__sanitizer_install_malloc_and_free_hooks+0x20>  // b.any
 a7c:	mov	w0, #0x0                   	// #0
 a80:	ret
 a84:	add	x6, x6, #0x0
 a88:	sbfiz	x5, x5, #4, #32
 a8c:	add	x6, x6, #0x10
 a90:	add	x2, x6, x5
 a94:	str	x4, [x6, x5]
 a98:	str	x1, [x2, #8]
 a9c:	ret

sanitizer_common_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>:
   0:	adrp	x1, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
   4:	ldr	x3, [x1]
   8:	cbnz	x3, 14 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE+0x14>
   c:	str	x0, [x1]
  10:	ret
  14:	str	x30, [sp, #-16]!
  18:	adrp	x2, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
  1c:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
  20:	add	x2, x2, #0x0
  24:	add	x0, x0, #0x0
  28:	mov	x4, #0x0                   	// #0
  2c:	mov	w1, #0x16                  	// #22
  30:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  34:	nop

0000000000000038 <_ZN11__sanitizer18StackDepotGetStatsEv>:
  38:	mov	x0, #0x0                   	// #0
  3c:	ret

0000000000000040 <_ZN11__sanitizer16BackgroundThreadEPv>:
  40:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  44:	stp	x19, x20, [sp, #-128]!
  48:	adrp	x1, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
  4c:	ldr	x0, [x0]
  50:	stp	x21, x22, [sp, #16]
  54:	add	x1, x1, #0x0
  58:	str	x1, [sp, #120]
  5c:	adrp	x1, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
  60:	ldp	x21, x19, [x0, #136]
  64:	stp	x23, x24, [sp, #32]
  68:	mov	x22, #0x0                   	// #0
  6c:	stp	x27, x28, [sp, #64]
  70:	mov	x27, #0xcccccccccccccccc    	// #-3689348814741910324
  74:	mov	w23, #0x0                   	// #0
  78:	stp	d8, d9, [sp, #96]
  7c:	mov	x20, #0x0                   	// #0
  80:	cmp	x21, #0x0
  84:	cset	w24, ne  // ne = any
  88:	ldr	d9, [x1]
  8c:	fmov	d8, xzr
  90:	movk	x27, #0xcccd
  94:	stp	x25, x26, [sp, #48]
  98:	adrp	x25, 0 <_ZN11__sanitizer17current_verbosityE>
  9c:	ldrb	w26, [x0, #152]
  a0:	str	x30, [sp, #80]
  a4:	nop
  a8:	mov	w0, #0x64                  	// #100
  ac:	bl	0 <_ZN11__sanitizer14SleepForMillisEi>
  b0:	bl	0 <_ZN11__sanitizer6GetRSSEv>
  b4:	lsr	x28, x0, #20
  b8:	ldr	x1, [x25]
  bc:	ldr	w0, [x1]
  c0:	cbz	w0, 104 <_ZN11__sanitizer16BackgroundThreadEPv+0xc4>
  c4:	add	x0, x20, x20, lsl #1
  c8:	lsl	x0, x0, #2
  cc:	sub	x0, x0, x20
  d0:	umulh	x0, x0, x27
  d4:	cmp	x28, x0, lsr #3
  d8:	b.hi	18c <_ZN11__sanitizer16BackgroundThreadEPv+0x14c>  // b.pmore
  dc:	bl	38 <_ZN11__sanitizer18StackDepotGetStatsEv>
  e0:	mov	x5, x0
  e4:	cbz	x0, 104 <_ZN11__sanitizer16BackgroundThreadEPv+0xc4>
  e8:	add	x1, x22, x22, lsl #1
  ec:	ldr	x3, [x0, #8]
  f0:	lsl	x1, x1, #2
  f4:	sub	x1, x1, x22
  f8:	umulh	x1, x1, x27
  fc:	cmp	x3, x1, lsr #3
 100:	b.hi	1ec <_ZN11__sanitizer16BackgroundThreadEPv+0x1ac>  // b.pmore
 104:	cmp	w24, #0x0
 108:	ccmp	x21, x28, #0x2, ne  // ne = any
 10c:	b.cc	220 <_ZN11__sanitizer16BackgroundThreadEPv+0x1e0>  // b.lo, b.ul, b.last
 110:	cbz	x19, 150 <_ZN11__sanitizer16BackgroundThreadEPv+0x110>
 114:	cmp	x19, x28
 118:	eor	w0, w23, #0x1
 11c:	cset	w1, cc  // cc = lo, ul, last
 120:	ands	w1, w1, w0
 124:	b.ne	1b0 <_ZN11__sanitizer16BackgroundThreadEPv+0x170>  // b.any
 128:	cmp	w23, #0x0
 12c:	ccmp	x19, x28, #0x0, ne  // ne = any
 130:	b.cc	150 <_ZN11__sanitizer16BackgroundThreadEPv+0x110>  // b.lo, b.ul, b.last
 134:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 138:	mov	w23, #0x0                   	// #0
 13c:	ldr	x1, [x0]
 140:	cbz	x1, 150 <_ZN11__sanitizer16BackgroundThreadEPv+0x110>
 144:	mov	w0, #0x0                   	// #0
 148:	blr	x1
 14c:	nop
 150:	cbz	w26, a8 <_ZN11__sanitizer16BackgroundThreadEPv+0x68>
 154:	scvtf	d0, d8
 158:	scvtf	d1, x28
 15c:	fmul	d0, d0, d9
 160:	fcmpe	d1, d0
 164:	b.le	a8 <_ZN11__sanitizer16BackgroundThreadEPv+0x68>
 168:	mov	x1, x28
 16c:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 170:	add	x0, x0, #0x0
 174:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 178:	fmov	d8, x28
 17c:	mov	x1, #0x14                  	// #20
 180:	mov	x0, #0x5a                  	// #90
 184:	bl	0 <__sanitizer_print_memory_profile>
 188:	b	a8 <_ZN11__sanitizer16BackgroundThreadEPv+0x68>
 18c:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 190:	mov	x20, x28
 194:	mov	x2, x28
 198:	ldr	x1, [x0]
 19c:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 1a0:	add	x0, x0, #0x0
 1a4:	ldr	x1, [x1]
 1a8:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 1ac:	b	dc <_ZN11__sanitizer16BackgroundThreadEPv+0x9c>
 1b0:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 1b4:	mov	w23, w1
 1b8:	mov	x3, x28
 1bc:	mov	x2, x19
 1c0:	ldr	x5, [x0]
 1c4:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 1c8:	add	x0, x0, #0x0
 1cc:	ldr	x1, [x5]
 1d0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 1d4:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 1d8:	ldr	x1, [x0]
 1dc:	cbz	x1, 150 <_ZN11__sanitizer16BackgroundThreadEPv+0x110>
 1e0:	mov	w0, #0x1                   	// #1
 1e4:	blr	x1
 1e8:	b	150 <_ZN11__sanitizer16BackgroundThreadEPv+0x110>
 1ec:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 1f0:	lsr	x3, x3, #20
 1f4:	ldr	x2, [x5]
 1f8:	str	x5, [sp, #112]
 1fc:	ldr	x1, [x0]
 200:	ldr	x0, [sp, #120]
 204:	ldr	x1, [x1]
 208:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 20c:	ldr	x5, [sp, #112]
 210:	cmp	w24, #0x0
 214:	ccmp	x21, x28, #0x2, ne  // ne = any
 218:	ldr	x22, [x5, #8]
 21c:	b.cs	110 <_ZN11__sanitizer16BackgroundThreadEPv+0xd0>  // b.hs, b.nlast
 220:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 224:	mov	x3, x28
 228:	mov	x2, x21
 22c:	ldr	x1, [x0]
 230:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 234:	add	x0, x0, #0x0
 238:	ldr	x1, [x1]
 23c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 240:	bl	0 <_ZN11__sanitizer14DumpProcessMapEv>
 244:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000248 <_ZN11__sanitizer13WriteToSyslogEPKc>:
 248:	stp	x19, x20, [sp, #-96]!
 24c:	stp	x23, x24, [sp, #32]
 250:	adrp	x23, 0 <_ZN11__sanitizer14PageSizeCachedE>
 254:	ldr	x19, [x23]
 258:	stp	x21, x22, [sp, #16]
 25c:	mov	x21, x0
 260:	stp	xzr, xzr, [sp, #64]
 264:	ldr	x1, [x19]
 268:	str	x30, [sp, #48]
 26c:	str	xzr, [sp, #80]
 270:	cbz	x1, 384 <_ZN11__sanitizer13WriteToSyslogEPKc+0x13c>
 274:	sub	x0, x1, #0x1
 278:	tst	x0, x1
 27c:	b.ne	3f0 <_ZN11__sanitizer13WriteToSyslogEPKc+0x1a8>  // b.any
 280:	neg	x19, x1
 284:	mov	x22, #0xffff                	// #65535
 288:	add	x1, x1, x22
 28c:	mov	w2, #0x0                   	// #0
 290:	and	x19, x1, x19
 294:	adrp	x24, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 298:	mov	x0, x19
 29c:	add	x1, x24, #0x0
 2a0:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 2a4:	mov	x20, x0
 2a8:	ldr	x1, [sp, #64]
 2ac:	ldr	x2, [sp, #80]
 2b0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 2b4:	ldp	x0, x1, [sp, #64]
 2b8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 2bc:	stp	x20, x19, [sp, #64]
 2c0:	ldr	x2, [sp, #80]
 2c4:	cmp	x2, x22
 2c8:	b.ls	33c <_ZN11__sanitizer13WriteToSyslogEPKc+0xf4>  // b.plast
 2cc:	mov	x0, #0x10000               	// #65536
 2d0:	stp	x0, xzr, [sp, #80]
 2d4:	mov	x2, x21
 2d8:	strb	wzr, [x20]
 2dc:	add	x0, sp, #0x40
 2e0:	adrp	x1, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 2e4:	add	x1, x1, #0x0
 2e8:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 2ec:	ldr	x19, [sp, #64]
 2f0:	b	304 <_ZN11__sanitizer13WriteToSyslogEPKc+0xbc>
 2f4:	strb	wzr, [x0]
 2f8:	mov	x0, x19
 2fc:	add	x19, x1, #0x1
 300:	bl	0 <_ZN11__sanitizer20WriteOneLineToSyslogEPKc>
 304:	mov	w1, #0xa                   	// #10
 308:	mov	x0, x19
 30c:	bl	0 <_ZN11__sanitizer15internal_strchrEPKci>
 310:	mov	x1, x0
 314:	cbnz	x0, 2f4 <_ZN11__sanitizer13WriteToSyslogEPKc+0xac>
 318:	ldrb	w0, [x19]
 31c:	cbnz	w0, 360 <_ZN11__sanitizer13WriteToSyslogEPKc+0x118>
 320:	ldp	x0, x1, [sp, #64]
 324:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 328:	ldp	x21, x22, [sp, #16]
 32c:	ldp	x23, x24, [sp, #32]
 330:	ldr	x30, [sp, #48]
 334:	ldp	x19, x20, [sp], #96
 338:	ret
 33c:	cmp	x19, x22
 340:	b.ls	394 <_ZN11__sanitizer13WriteToSyslogEPKc+0x14c>  // b.plast
 344:	mov	x3, #0x10000               	// #65536
 348:	add	x0, x20, x2
 34c:	mov	w1, #0x0                   	// #0
 350:	sub	x2, x3, x2
 354:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 358:	ldr	x20, [sp, #64]
 35c:	b	2cc <_ZN11__sanitizer13WriteToSyslogEPKc+0x84>
 360:	mov	x0, x19
 364:	bl	0 <_ZN11__sanitizer20WriteOneLineToSyslogEPKc>
 368:	ldp	x0, x1, [sp, #64]
 36c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 370:	ldp	x21, x22, [sp, #16]
 374:	ldp	x23, x24, [sp, #32]
 378:	ldr	x30, [sp, #48]
 37c:	ldp	x19, x20, [sp], #96
 380:	ret
 384:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 388:	mov	x1, x0
 38c:	str	x0, [x19]
 390:	b	274 <_ZN11__sanitizer13WriteToSyslogEPKc+0x2c>
 394:	ldr	x23, [x23]
 398:	ldr	x0, [x23]
 39c:	cbz	x0, 400 <_ZN11__sanitizer13WriteToSyslogEPKc+0x1b8>
 3a0:	sub	x1, x0, #0x1
 3a4:	tst	x1, x0
 3a8:	b.ne	3f0 <_ZN11__sanitizer13WriteToSyslogEPKc+0x1a8>  // b.any
 3ac:	mov	x1, #0xffff                	// #65535
 3b0:	add	x19, x0, x1
 3b4:	neg	x0, x0
 3b8:	add	x1, x24, #0x0
 3bc:	and	x19, x19, x0
 3c0:	mov	w2, #0x0                   	// #0
 3c4:	mov	x0, x19
 3c8:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 3cc:	ldr	x1, [sp, #64]
 3d0:	mov	x20, x0
 3d4:	ldr	x2, [sp, #80]
 3d8:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 3dc:	ldp	x0, x1, [sp, #64]
 3e0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 3e4:	stp	x20, x19, [sp, #64]
 3e8:	ldr	x2, [sp, #80]
 3ec:	b	344 <_ZN11__sanitizer13WriteToSyslogEPKc+0xfc>
 3f0:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 3f4:	add	x0, x0, #0x0
 3f8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 3fc:	bl	0 <_ZN11__sanitizer3DieEv>
 400:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 404:	str	x0, [x23]
 408:	b	3a0 <_ZN11__sanitizer13WriteToSyslogEPKc+0x158>
 40c:	nop

0000000000000410 <_ZN11__sanitizer25MaybeStartBackgroudThreadEv>:
 410:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 414:	ldr	x0, [x0]
 418:	ldp	x1, x2, [x0, #136]
 41c:	orr	x1, x1, x2
 420:	cbnz	x1, 42c <_ZN11__sanitizer25MaybeStartBackgroudThreadEv+0x1c>
 424:	ldrb	w0, [x0, #152]
 428:	cbz	w0, 448 <_ZN11__sanitizer25MaybeStartBackgroudThreadEv+0x38>
 42c:	adrp	x0, 0 <_ZN11__sanitizer19real_pthread_createEPvS0_PFS0_S0_ES0_>
 430:	ldr	x0, [x0]
 434:	cbz	x0, 448 <_ZN11__sanitizer25MaybeStartBackgroudThreadEv+0x38>
 438:	adrp	x0, 40 <_ZN11__sanitizer16BackgroundThreadEPv>
 43c:	mov	x1, #0x0                   	// #0
 440:	add	x0, x0, #0x0
 444:	b	0 <_ZN11__sanitizer21internal_start_threadEPFvPvES0_>
 448:	ret
 44c:	nop

0000000000000450 <_ZN11__sanitizer21SetSandboxingCallbackEPFvvE>:
 450:	adrp	x1, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 454:	str	x0, [x1]
 458:	ret
 45c:	nop

0000000000000460 <__sanitizer_sandbox_on_notify>:
 460:	str	x30, [sp, #-16]!
 464:	bl	0 <_ZN11__sanitizer28PlatformPrepareForSandboxingEP29__sanitizer_sandbox_arguments>
 468:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 46c:	ldr	x0, [x0]
 470:	cbz	x0, 480 <__sanitizer_sandbox_on_notify+0x20>
 474:	ldr	x30, [sp], #16
 478:	mov	x16, x0
 47c:	br	x16
 480:	ldr	x30, [sp], #16
 484:	ret

sanitizer_coverage_libcdep_new.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>:
   0:	stp	x19, x20, [sp, #-64]!
   4:	mov	x20, x0
   8:	mov	x0, x1
   c:	stp	x21, x22, [sp, #16]
  10:	mov	x22, x2
  14:	mov	x21, x3
  18:	stp	x23, x30, [sp, #32]
  1c:	bl	0 <_ZN11__sanitizer15StripModuleNameEPKc>
  20:	cbz	x0, f4 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm+0xf4>
  24:	mov	x19, x0
  28:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  2c:	ldr	x0, [x0]
  30:	ldr	x23, [x0, #168]
  34:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
  38:	mov	x4, x19
  3c:	mov	x5, x0
  40:	mov	x3, x23
  44:	adrp	x6, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
  48:	add	x6, x6, #0x0
  4c:	mov	x1, #0x1000                	// #4096
  50:	mov	x0, x20
  54:	adrp	x2, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
  58:	add	x2, x2, #0x0
  5c:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
  60:	add	x2, sp, #0x3c
  64:	mov	x0, x20
  68:	mov	w1, #0x1                   	// #1
  6c:	bl	0 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi>
  70:	mov	w19, w0
  74:	cmn	w0, #0x1
  78:	b.eq	dc <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm+0xdc>  // b.none
  7c:	mov	w0, w19
  80:	mov	x4, #0x0                   	// #0
  84:	mov	x3, #0x0                   	// #0
  88:	mov	x2, #0x8                   	// #8
  8c:	adrp	x1, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
  90:	add	x1, x1, #0x0
  94:	bl	0 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi>
  98:	mov	x1, x22
  9c:	lsl	x2, x21, #3
  a0:	mov	x4, #0x0                   	// #0
  a4:	mov	x3, #0x0                   	// #0
  a8:	mov	w0, w19
  ac:	bl	0 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi>
  b0:	mov	w0, w19
  b4:	bl	0 <_ZN11__sanitizer9CloseFileEi>
  b8:	mov	x2, x21
  bc:	mov	x1, x20
  c0:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
  c4:	add	x0, x0, #0x0
  c8:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  cc:	ldp	x21, x22, [sp, #16]
  d0:	ldp	x23, x30, [sp, #32]
  d4:	ldp	x19, x20, [sp], #64
  d8:	ret
  dc:	ldr	w2, [sp, #60]
  e0:	mov	x1, x20
  e4:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
  e8:	add	x0, x0, #0x0
  ec:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  f0:	b	7c <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm+0x7c>
  f4:	adrp	x2, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
  f8:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
  fc:	add	x2, x2, #0x0
 100:	add	x0, x0, #0x0
 104:	mov	x4, #0x0                   	// #0
 108:	mov	x3, #0x0                   	// #0
 10c:	mov	w1, #0x28                  	// #40
 110:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 114:	nop

0000000000000118 <_ZN11__sanitizer18InitializeCoverageEbPKc>:
 118:	adrp	x1, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 11c:	ldrb	w2, [x1]
 120:	cbz	w2, 128 <_ZN11__sanitizer18InitializeCoverageEbPKc+0x10>
 124:	ret
 128:	stp	x19, x30, [sp, #-16]!
 12c:	adrp	x19, 630 <__sanitizer_cov_dump>
 130:	and	w0, w0, #0xff
 134:	ldr	x19, [x19]
 138:	strb	w0, [x1]
 13c:	mov	x0, x19
 140:	bl	0 <_ZN11__sanitizer6AtexitEPFvvE>
 144:	mov	x0, x19
 148:	ldp	x19, x30, [sp], #16
 14c:	b	0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>

0000000000000150 <__sanitizer_cov_trace_pc_guard>:
 150:	ldr	w3, [x0]
 154:	cbnz	w3, 15c <__sanitizer_cov_trace_pc_guard+0xc>
 158:	ret
 15c:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 160:	add	x0, x0, #0x0
 164:	add	x0, x0, #0x8
 168:	str	x30, [sp, #-16]!
 16c:	sub	w3, w3, #0x1
 170:	ldr	x4, [x0, #24]
 174:	ldr	x0, [x0, #8]
 178:	cmp	x3, x4
 17c:	b.cs	198 <__sanitizer_cov_trace_pc_guard+0x48>  // b.hs, b.nlast
 180:	ldr	x1, [x0, x3, lsl #3]
 184:	cbnz	x1, 190 <__sanitizer_cov_trace_pc_guard+0x40>
 188:	sub	x30, x30, #0x1
 18c:	str	x30, [x0, x3, lsl #3]
 190:	ldr	x30, [sp], #16
 194:	ret
 198:	adrp	x2, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 19c:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 1a0:	add	x2, x2, #0x0
 1a4:	add	x0, x0, #0x0
 1a8:	mov	w1, #0x1b6                 	// #438
 1ac:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000001b0 <__sanitizer_cov_trace_pc_guard_init>:
 1b0:	cmp	x0, x1
 1b4:	b.eq	28c <__sanitizer_cov_trace_pc_guard_init+0xdc>  // b.none
 1b8:	stp	x19, x20, [sp, #-48]!
 1bc:	mov	x19, x0
 1c0:	ldr	w0, [x0]
 1c4:	str	x30, [sp, #40]
 1c8:	cbz	w0, 1d8 <__sanitizer_cov_trace_pc_guard_init+0x28>
 1cc:	ldr	x30, [sp, #40]
 1d0:	ldp	x19, x20, [sp], #48
 1d4:	ret
 1d8:	stp	x21, x22, [sp, #16]
 1dc:	adrp	x22, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 1e0:	add	x0, x22, #0x0
 1e4:	mov	x20, x1
 1e8:	add	x21, x0, #0x8
 1ec:	ldrb	w1, [x0, #8]
 1f0:	cbz	w1, 290 <__sanitizer_cov_trace_pc_guard_init+0xe0>
 1f4:	cmp	x19, x20
 1f8:	mov	x2, x19
 1fc:	b.eq	340 <__sanitizer_cov_trace_pc_guard_init+0x190>  // b.none
 200:	add	x0, x22, #0x0
 204:	ldr	x0, [x0, #32]
 208:	mov	w21, w0
 20c:	b.cs	23c <__sanitizer_cov_trace_pc_guard_init+0x8c>  // b.hs, b.nlast
 210:	mov	w1, w0
 214:	nop
 218:	add	w1, w1, #0x1
 21c:	str	w1, [x19], #4
 220:	cmp	x20, x19
 224:	b.hi	218 <__sanitizer_cov_trace_pc_guard_init+0x68>  // b.pmore
 228:	sub	x20, x20, #0x1
 22c:	add	w21, w21, #0x1
 230:	sub	x20, x20, x2
 234:	lsr	x20, x20, #2
 238:	add	w21, w21, w20
 23c:	cmp	x0, w21, uxtw
 240:	mov	w19, w21
 244:	b.cs	274 <__sanitizer_cov_trace_pc_guard_init+0xc4>  // b.hs, b.nlast
 248:	add	x1, x22, #0x0
 24c:	add	x1, x1, #0x8
 250:	ldr	x2, [x1, #16]
 254:	cmp	x19, x2, lsr #3
 258:	b.hi	2d0 <__sanitizer_cov_trace_pc_guard_init+0x120>  // b.pmore
 25c:	ldr	x21, [x1, #8]
 260:	sub	x2, x19, x0
 264:	mov	w1, #0x0                   	// #0
 268:	add	x0, x21, x0, lsl #3
 26c:	lsl	x2, x2, #3
 270:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 274:	add	x22, x22, #0x0
 278:	ldr	x30, [sp, #40]
 27c:	str	x19, [x22, #32]
 280:	ldp	x21, x22, [sp, #16]
 284:	ldp	x19, x20, [sp], #48
 288:	ret
 28c:	ret
 290:	mov	w1, #0x1                   	// #1
 294:	strb	w1, [x0, #8]
 298:	bl	0 <_ZN8__sancov21InitializeSancovFlagsEv>
 29c:	ldr	w0, [x19]
 2a0:	stp	xzr, xzr, [x21, #8]
 2a4:	str	xzr, [x21, #24]
 2a8:	cbz	w0, 1f4 <__sanitizer_cov_trace_pc_guard_init+0x44>
 2ac:	adrp	x2, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 2b0:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 2b4:	add	x2, x2, #0x0
 2b8:	add	x0, x0, #0x0
 2bc:	mov	x4, #0x0                   	// #0
 2c0:	mov	x3, #0x0                   	// #0
 2c4:	mov	w1, #0x77                  	// #119
 2c8:	str	x23, [sp, #32]
 2cc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2d0:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
 2d4:	ldr	x20, [x20]
 2d8:	ldr	x0, [x20]
 2dc:	str	x23, [sp, #32]
 2e0:	cbz	x0, 364 <__sanitizer_cov_trace_pc_guard_init+0x1b4>
 2e4:	sub	x20, x0, #0x1
 2e8:	tst	x0, x20
 2ec:	b.ne	370 <__sanitizer_cov_trace_pc_guard_init+0x1c0>  // b.any
 2f0:	add	x23, x22, #0x0
 2f4:	add	x20, x20, w21, uxtw #3
 2f8:	neg	x0, x0
 2fc:	mov	w2, #0x0                   	// #0
 300:	and	x20, x20, x0
 304:	adrp	x1, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 308:	mov	x0, x20
 30c:	add	x1, x1, #0x0
 310:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 314:	mov	x21, x0
 318:	ldr	x1, [x23, #16]
 31c:	ldr	x2, [x23, #32]
 320:	lsl	x2, x2, #3
 324:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 328:	ldp	x0, x1, [x23, #16]
 32c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 330:	stp	x21, x20, [x23, #16]
 334:	ldr	x0, [x23, #32]
 338:	ldr	x23, [sp, #32]
 33c:	b	260 <__sanitizer_cov_trace_pc_guard_init+0xb0>
 340:	adrp	x2, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 344:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 348:	add	x2, x2, #0x0
 34c:	add	x0, x0, #0x0
 350:	mov	x4, x19
 354:	mov	x3, x19
 358:	mov	w1, #0x78                  	// #120
 35c:	str	x23, [sp, #32]
 360:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 364:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 368:	str	x0, [x20]
 36c:	b	2e4 <__sanitizer_cov_trace_pc_guard_init+0x134>
 370:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 374:	add	x0, x0, #0x0
 378:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 37c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000380 <__sanitizer_cov_reset>:
 380:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 384:	add	x0, x0, #0x0
 388:	add	x0, x0, #0x8
 38c:	ldr	x2, [x0, #24]
 390:	ldr	x0, [x0, #8]
 394:	cbz	x2, 3a4 <__sanitizer_cov_reset+0x24>
 398:	lsl	x2, x2, #3
 39c:	mov	w1, #0x0                   	// #0
 3a0:	b	0 <_ZN11__sanitizer15internal_memsetEPvim>
 3a4:	str	x30, [sp, #-16]!
 3a8:	adrp	x2, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 3ac:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 3b0:	add	x2, x2, #0x0
 3b4:	add	x0, x0, #0x0
 3b8:	mov	x4, #0x0                   	// #0
 3bc:	mov	x3, #0x0                   	// #0
 3c0:	mov	w1, #0x1b6                 	// #438
 3c4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000003c8 <__sanitizer_cov_trace_cmp>:
 3c8:	ret
 3cc:	nop

00000000000003d0 <__sanitizer_cov_trace_cmp1>:
 3d0:	ret
 3d4:	nop

00000000000003d8 <__sanitizer_cov_trace_cmp2>:
 3d8:	ret
 3dc:	nop

00000000000003e0 <__sanitizer_cov_trace_cmp4>:
 3e0:	ret
 3e4:	nop

00000000000003e8 <__sanitizer_cov_trace_cmp8>:
 3e8:	ret
 3ec:	nop

00000000000003f0 <__sanitizer_cov_trace_const_cmp1>:
 3f0:	ret
 3f4:	nop

00000000000003f8 <__sanitizer_cov_trace_const_cmp2>:
 3f8:	ret
 3fc:	nop

0000000000000400 <__sanitizer_cov_trace_const_cmp4>:
 400:	ret
 404:	nop

0000000000000408 <__sanitizer_cov_trace_const_cmp8>:
 408:	ret
 40c:	nop

0000000000000410 <__sanitizer_cov_trace_switch>:
 410:	ret
 414:	nop

0000000000000418 <__sanitizer_cov_trace_div4>:
 418:	ret
 41c:	nop

0000000000000420 <__sanitizer_cov_trace_div8>:
 420:	ret
 424:	nop

0000000000000428 <__sanitizer_cov_trace_gep>:
 428:	ret
 42c:	nop

0000000000000430 <__sanitizer_cov_trace_pc_indir>:
 430:	ret
 434:	nop

0000000000000438 <__sanitizer_cov_8bit_counters_init>:
 438:	ret
 43c:	nop

0000000000000440 <__sanitizer_cov_pcs_init>:
 440:	ret
 444:	nop

0000000000000448 <__sanitizer_dump_coverage>:
 448:	cbnz	x1, 450 <__sanitizer_dump_coverage+0x8>
 44c:	ret
 450:	stp	x19, x20, [sp, #-128]!
 454:	mov	x20, x1
 458:	mov	x19, x0
 45c:	mov	x2, #0x0                   	// #0
 460:	mov	x1, #0x0                   	// #0
 464:	mov	x0, #0x1000                	// #4096
 468:	stp	x21, x22, [sp, #16]
 46c:	lsl	x22, x20, #3
 470:	stp	x23, x24, [sp, #32]
 474:	mov	w23, #0x0                   	// #0
 478:	stp	x25, x26, [sp, #48]
 47c:	mov	x26, #0x0                   	// #0
 480:	stp	x27, x28, [sp, #64]
 484:	adrp	x28, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 488:	mov	x27, #0x0                   	// #0
 48c:	str	x30, [sp, #80]
 490:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 494:	mov	x2, #0x0                   	// #0
 498:	mov	x1, #0x0                   	// #0
 49c:	mov	x25, x0
 4a0:	mov	x0, #0x1000                	// #4096
 4a4:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 4a8:	mov	x24, x0
 4ac:	mov	x2, #0x0                   	// #0
 4b0:	mov	x1, #0x0                   	// #0
 4b4:	mov	x0, x22
 4b8:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 4bc:	mov	x1, x19
 4c0:	mov	x2, x22
 4c4:	mov	x21, x0
 4c8:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 4cc:	mov	x0, x21
 4d0:	mov	x1, x20
 4d4:	mov	w2, #0x0                   	// #0
 4d8:	bl	0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 4dc:	add	x0, x28, #0x0
 4e0:	mov	x19, #0x0                   	// #0
 4e4:	str	x0, [sp, #104]
 4e8:	b	51c <__sanitizer_dump_coverage+0xd4>
 4ec:	cbnz	w23, 5d0 <__sanitizer_dump_coverage+0x188>
 4f0:	mov	x3, x28
 4f4:	mov	x0, x22
 4f8:	mov	x26, x5
 4fc:	mov	w23, w4
 500:	mov	x1, x24
 504:	mov	x27, x19
 508:	mov	x2, #0x1000                	// #4096
 50c:	bl	0 <__sanitizer_get_module_and_offset_for_pc>
 510:	add	x19, x19, #0x1
 514:	cmp	x20, x19
 518:	b.eq	56c <__sanitizer_dump_coverage+0x124>  // b.none
 51c:	ldr	x22, [x21, x19, lsl #3]
 520:	add	x28, x21, x19, lsl #3
 524:	mov	x3, x28
 528:	mov	x2, #0x0                   	// #0
 52c:	mov	x0, x22
 530:	mov	x1, #0x0                   	// #0
 534:	cbz	x22, 510 <__sanitizer_dump_coverage+0xc8>
 538:	bl	0 <__sanitizer_get_module_and_offset_for_pc>
 53c:	eor	w1, w23, #0x1
 540:	cbz	w0, 5c0 <__sanitizer_dump_coverage+0x178>
 544:	ldr	x5, [x21, x19, lsl #3]
 548:	sub	x5, x22, x5
 54c:	cmp	x5, x26
 550:	cset	w4, ne  // ne = any
 554:	orr	w4, w4, w1
 558:	cbnz	w4, 4ec <__sanitizer_dump_coverage+0xa4>
 55c:	add	x19, x19, #0x1
 560:	mov	w23, #0x1                   	// #1
 564:	cmp	x20, x19
 568:	b.ne	51c <__sanitizer_dump_coverage+0xd4>  // b.any
 56c:	cbz	w23, 584 <__sanitizer_dump_coverage+0x13c>
 570:	sub	x3, x20, x27
 574:	add	x2, x21, x27, lsl #3
 578:	mov	x1, x24
 57c:	mov	x0, x25
 580:	bl	0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 584:	mov	x0, x25
 588:	mov	x1, #0x0                   	// #0
 58c:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 590:	mov	x0, x24
 594:	mov	x1, #0x0                   	// #0
 598:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 59c:	mov	x0, x21
 5a0:	mov	x1, #0x0                   	// #0
 5a4:	ldp	x21, x22, [sp, #16]
 5a8:	ldp	x23, x24, [sp, #32]
 5ac:	ldp	x25, x26, [sp, #48]
 5b0:	ldp	x27, x28, [sp, #64]
 5b4:	ldr	x30, [sp, #80]
 5b8:	ldp	x19, x20, [sp], #128
 5bc:	b	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 5c0:	ldr	x0, [sp, #104]
 5c4:	mov	x1, x22
 5c8:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 5cc:	b	510 <__sanitizer_dump_coverage+0xc8>
 5d0:	sub	x3, x19, x27
 5d4:	add	x2, x21, x27, lsl #3
 5d8:	mov	x1, x24
 5dc:	mov	x0, x25
 5e0:	str	x5, [sp, #112]
 5e4:	str	w4, [sp, #124]
 5e8:	bl	0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 5ec:	ldr	w4, [sp, #124]
 5f0:	ldr	x5, [sp, #112]
 5f4:	b	4f0 <__sanitizer_dump_coverage+0xa8>

00000000000005f8 <__sanitizer_dump_trace_pc_guard_coverage>:
 5f8:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 5fc:	add	x0, x0, #0x0
 600:	add	x1, x0, #0x8
 604:	ldrb	w0, [x0, #8]
 608:	cbz	w0, 61c <__sanitizer_dump_trace_pc_guard_coverage+0x24>
 60c:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 610:	ldr	x0, [x0]
 614:	ldrb	w0, [x0, #161]
 618:	cbnz	w0, 620 <__sanitizer_dump_trace_pc_guard_coverage+0x28>
 61c:	ret
 620:	ldr	x0, [x1, #8]
 624:	ldr	x1, [x1, #24]
 628:	b	448 <__sanitizer_dump_coverage>
 62c:	nop

0000000000000630 <__sanitizer_cov_dump>:
 630:	b	5f8 <__sanitizer_dump_trace_pc_guard_coverage>

Disassembly of section .text._ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_:

0000000000000000 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_>:
   0:	cmp	x1, #0x1
   4:	mov	x3, #0x1                   	// #1
   8:	b.ls	fc <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xfc>  // b.plast
   c:	nop
  10:	ldr	x5, [x0, x3, lsl #3]
  14:	mov	x2, x3
  18:	sub	x4, x2, #0x1
  1c:	mov	x6, x2
  20:	lsr	x2, x4, #1
  24:	ldr	x4, [x0, x2, lsl #3]
  28:	cmp	x4, x5
  2c:	b.cs	3c <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x3c>  // b.hs, b.nlast
  30:	str	x4, [x0, x6, lsl #3]
  34:	str	x5, [x0, x2, lsl #3]
  38:	cbnz	x2, 18 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x18>
  3c:	add	x2, x3, #0x1
  40:	cmp	x1, x2
  44:	b.eq	94 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x94>  // b.none
  48:	mov	x3, x2
  4c:	b	10 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x10>
  50:	cmp	x1, x3
  54:	b.cs	8c <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x8c>  // b.hs, b.nlast
  58:	lsl	x5, x5, #4
  5c:	ldr	x4, [x0, x2, lsl #3]
  60:	ldr	x5, [x0, x5]
  64:	cmp	x5, x4
  68:	b.ls	8c <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x8c>  // b.plast
  6c:	cmp	x1, x2
  70:	b.eq	8c <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x8c>  // b.none
  74:	ldr	x5, [x0, x1, lsl #3]
  78:	cmp	x1, x3
  7c:	ldr	x4, [x0, x2, lsl #3]
  80:	str	x5, [x0, x2, lsl #3]
  84:	str	x4, [x0, x1, lsl #3]
  88:	b.cc	f4 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xf4>  // b.lo, b.ul, b.last
  8c:	subs	x3, x3, #0x1
  90:	b.eq	fc <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xfc>  // b.none
  94:	ldr	x4, [x0, x3, lsl #3]
  98:	mov	x2, #0x0                   	// #0
  9c:	ldr	x1, [x0]
  a0:	str	x4, [x0]
  a4:	str	x1, [x0, x3, lsl #3]
  a8:	lsl	x1, x2, #1
  ac:	add	x5, x2, #0x1
  b0:	add	x4, x1, #0x1
  b4:	add	x1, x1, #0x2
  b8:	cmp	x4, x3
  bc:	b.cs	50 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x50>  // b.hs, b.nlast
  c0:	ldr	x7, [x0, x2, lsl #3]
  c4:	ldr	x6, [x0, x4, lsl #3]
  c8:	cmp	x7, x6
  cc:	b.cs	50 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x50>  // b.hs, b.nlast
  d0:	cmp	x1, x3
  d4:	b.cc	100 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x100>  // b.lo, b.ul, b.last
  d8:	cmp	x4, x2
  dc:	b.eq	8c <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x8c>  // b.none
  e0:	ldr	x6, [x0, x4, lsl #3]
  e4:	mov	x1, x4
  e8:	ldr	x5, [x0, x2, lsl #3]
  ec:	str	x6, [x0, x2, lsl #3]
  f0:	str	x5, [x0, x4, lsl #3]
  f4:	mov	x2, x1
  f8:	b	a8 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xa8>
  fc:	ret
 100:	lsl	x5, x5, #4
 104:	ldr	x5, [x0, x5]
 108:	cmp	x6, x5
 10c:	csel	x1, x1, x4, cc  // cc = lo, ul, last
 110:	b	6c <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x6c>

sanitizer_deadlock_detector1.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>:
       0:	mov	x0, #0x0                   	// #0
       4:	ret

0000000000000008 <_ZN11__sanitizer2DD21DestroyPhysicalThreadEPNS_16DDPhysicalThreadE>:
       8:	ret
       c:	nop

0000000000000010 <_ZN11__sanitizer2DD9GetReportEPNS_10DDCallbackE>:
      10:	ldr	x1, [x1, #16]
      14:	ldrb	w0, [x1, #2224]
      18:	cbz	w0, 28 <_ZN11__sanitizer2DD9GetReportEPNS_10DDCallbackE+0x18>
      1c:	add	x0, x1, #0x628
      20:	strb	wzr, [x1, #2224]
      24:	ret
      28:	mov	x0, #0x0                   	// #0
      2c:	ret

0000000000000030 <_ZN11__sanitizer2DD19CreateLogicalThreadEy>:
      30:	stp	x19, x30, [sp, #-16]!
      34:	mov	x2, #0x0                   	// #0
      38:	mov	x19, x1
      3c:	mov	x0, #0x8b8                 	// #2232
      40:	mov	x1, #0x0                   	// #0
      44:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
      48:	mov	x3, x0
      4c:	str	x19, [x0]
      50:	str	xzr, [x3, #8]!
      54:	str	xzr, [x3, #520]
      58:	str	xzr, [x3, #1040]
      5c:	str	xzr, [x3, #1560]
      60:	strb	wzr, [x0, #2224]
      64:	ldp	x19, x30, [sp], #16
      68:	ret
      6c:	nop

0000000000000070 <_ZN11__sanitizer2DD20DestroyLogicalThreadEPNS_15DDLogicalThreadE>:
      70:	mov	x0, x1
      74:	mov	x1, #0x0                   	// #0
      78:	b	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
      7c:	nop

0000000000000080 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb>:
      80:	ldr	x1, [x1, #16]
      84:	ldr	x2, [x2]
      88:	ldr	x3, [x1, #528]
      8c:	and	x0, x2, #0xfffffffffffff000
      90:	cmp	x3, x0
      94:	b.eq	9c <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x1c>  // b.none
      98:	ret
      9c:	ldr	x7, [x1, #1048]
      a0:	add	x6, x1, #0x8
      a4:	and	x4, x2, #0xfff
      a8:	cbz	x7, f4 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x74>
      ac:	sub	x8, x7, #0x1
      b0:	mov	x0, x8
      b4:	tbnz	x8, #63, f4 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x74>
      b8:	add	x5, x1, #0x218
      bc:	b	cc <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x4c>
      c0:	sub	x0, x0, #0x1
      c4:	cmn	x0, #0x1
      c8:	b.eq	f4 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x74>  // b.none
      cc:	ldr	x3, [x5, x0, lsl #3]
      d0:	cmp	x4, x3
      d4:	b.ne	c0 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x40>  // b.any
      d8:	add	x1, x1, x7, lsl #3
      dc:	add	x0, x0, #0x42
      e0:	str	x8, [x6, #1040]
      e4:	ldr	x2, [x1, #528]
      e8:	str	x2, [x6, x0, lsl #3]
      ec:	str	x4, [x1, #528]
      f0:	ret
      f4:	ldr	x7, [x1, #8]
      f8:	lsr	x3, x4, #6
      fc:	mov	x0, #0x1                   	// #1
     100:	lsl	x5, x0, x3
     104:	tst	x7, x5
     108:	b.eq	98 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x18>  // b.none
     10c:	add	x3, x3, x0
     110:	lsl	x0, x0, x2
     114:	ldr	x2, [x6, x3, lsl #3]
     118:	bic	x0, x2, x0
     11c:	str	x0, [x6, x3, lsl #3]
     120:	cbz	x0, 19c <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x11c>
     124:	cmp	x2, x0
     128:	b.eq	98 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x18>  // b.none
     12c:	ldr	x5, [x6, #1560]
     130:	cbz	x5, 98 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x18>
     134:	sub	x7, x5, #0x1
     138:	mov	x0, x7
     13c:	tbnz	x7, #63, 98 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x18>
     140:	add	x1, x1, #0x420
     144:	mov	w3, w4
     148:	b	158 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0xd8>
     14c:	sub	x0, x0, #0x1
     150:	cmn	x0, #0x1
     154:	b.eq	98 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x18>  // b.none
     158:	lsl	x2, x0, #3
     15c:	ldr	w2, [x1, x2]
     160:	cmp	w3, w2
     164:	b.ne	14c <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0xcc>  // b.any
     168:	add	x3, x6, x0, lsl #3
     16c:	add	x1, x5, #0x82
     170:	add	x5, x6, x7, lsl #3
     174:	mov	x0, x3
     178:	lsl	x1, x1, #3
     17c:	add	x2, x6, x1
     180:	ldr	w3, [x3, #1052]
     184:	ldr	x5, [x5, #1048]
     188:	str	x5, [x0, #1048]
     18c:	str	w4, [x6, x1]
     190:	str	w3, [x2, #4]
     194:	str	x7, [x6, #1560]
     198:	ret
     19c:	bic	x5, x7, x5
     1a0:	str	x5, [x1, #8]
     1a4:	b	124 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0xa4>

00000000000001a8 <_ZN11__sanitizer2DD9MutexInitEPNS_10DDCallbackEPNS_7DDMutexE>:
     1a8:	ldr	x3, [x1]
     1ac:	stp	x19, x30, [sp, #-16]!
     1b0:	mov	x19, x2
     1b4:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     1b8:	add	x2, x2, #0x0
     1bc:	ldr	x3, [x3]
     1c0:	str	xzr, [x19]
     1c4:	mov	w0, #0x0                   	// #0
     1c8:	cmp	x3, x2
     1cc:	b.ne	1dc <_ZN11__sanitizer2DD9MutexInitEPNS_10DDCallbackEPNS_7DDMutexE+0x34>  // b.any
     1d0:	str	w0, [x19, #8]
     1d4:	ldp	x19, x30, [sp], #16
     1d8:	ret
     1dc:	mov	x0, x1
     1e0:	blr	x3
     1e4:	str	w0, [x19, #8]
     1e8:	ldp	x19, x30, [sp], #16
     1ec:	ret

00000000000001f0 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE>:
     1f0:	stp	x19, x20, [sp, #-32]!
     1f4:	mov	x20, x0
     1f8:	ldr	x0, [x2]
     1fc:	str	x30, [sp, #16]
     200:	cbnz	x0, 210 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0x20>
     204:	ldr	x30, [sp, #16]
     208:	ldp	x19, x20, [sp], #32
     20c:	ret
     210:	add	x0, x20, #0x8
     214:	mov	x19, x2
     218:	mov	w2, #0x1                   	// #1
     21c:	ldxrb	w1, [x0]
     220:	stxrb	w3, w2, [x0]
     224:	cbnz	w3, 21c <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0x2c>
     228:	dmb	ish
     22c:	tst	w1, #0xff
     230:	b.eq	238 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0x48>  // b.none
     234:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     238:	ldr	x3, [x19]
     23c:	cbz	x3, 250 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0x60>
     240:	ldr	x0, [x20, #16]
     244:	and	x1, x3, #0xfffffffffffff000
     248:	cmp	x1, x0
     24c:	b.eq	268 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0x78>  // b.none
     250:	str	xzr, [x19]
     254:	dmb	ish
     258:	strb	wzr, [x20, #8]
     25c:	ldr	x30, [sp, #16]
     260:	ldp	x19, x20, [sp], #32
     264:	ret
     268:	cmp	x3, #0xfff
     26c:	b.ls	328 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0x138>  // b.plast
     270:	ubfx	x0, x3, #6, #6
     274:	mov	x1, #0x1                   	// #1
     278:	ldr	x6, [x20, #24]
     27c:	add	x4, x0, x1
     280:	and	x2, x3, #0xfff
     284:	lsl	x0, x1, x0
     288:	lsl	x5, x4, #3
     28c:	tst	x0, x6
     290:	lsl	x3, x1, x3
     294:	b.ne	2c4 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0xd4>  // b.any
     298:	ldr	x1, [x20, #544]
     29c:	add	x5, x20, #0x220
     2a0:	tst	x0, x1
     2a4:	b.ne	2f4 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0x104>  // b.any
     2a8:	orr	x0, x0, x1
     2ac:	str	x0, [x20, #544]
     2b0:	str	x3, [x5, x4, lsl #3]
     2b4:	add	x2, x2, x2, lsl #6
     2b8:	add	x2, x20, x2, lsl #3
     2bc:	str	xzr, [x2, #1584]
     2c0:	b	250 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0x60>
     2c4:	add	x5, x20, x5
     2c8:	ldr	x1, [x5, #24]
     2cc:	tst	x3, x1
     2d0:	b.eq	298 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0xa8>  // b.none
     2d4:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     2d8:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     2dc:	add	x2, x2, #0x0
     2e0:	add	x0, x0, #0x0
     2e4:	mov	x4, #0x0                   	// #0
     2e8:	mov	x3, #0x0                   	// #0
     2ec:	mov	w1, #0xc0                  	// #192
     2f0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     2f4:	ldr	x0, [x5, x4, lsl #3]
     2f8:	orr	x3, x3, x0
     2fc:	str	x3, [x5, x4, lsl #3]
     300:	cmp	x0, x3
     304:	b.ne	2b4 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0xc4>  // b.any
     308:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     30c:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     310:	add	x2, x2, #0x0
     314:	add	x0, x0, #0x0
     318:	mov	x4, #0x0                   	// #0
     31c:	mov	x3, #0x0                   	// #0
     320:	mov	w1, #0xc1                  	// #193
     324:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     328:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     32c:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     330:	add	x2, x2, #0x0
     334:	add	x0, x0, #0x0
     338:	mov	x4, #0x1000                	// #4096
     33c:	mov	w1, #0x172                 	// #370
     340:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     344:	nop

0000000000000348 <_ZN11__sanitizer9DDetector6CreateEPKNS_7DDFlagsE>:
     348:	stp	x19, x30, [sp, #-16]!
     34c:	mov	x19, x0
     350:	mov	x0, #0xa50                 	// #2640
     354:	mov	w2, #0x0                   	// #0
     358:	movk	x0, #0x41, lsl #16
     35c:	adrp	x1, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     360:	add	x1, x1, #0x0
     364:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     368:	add	x4, x0, #0x410, lsl #12
     36c:	strb	wzr, [x0, #8]
     370:	adrp	x1, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     374:	add	x3, x1, #0x0
     378:	add	x2, x0, #0x208, lsl #12
     37c:	str	x3, [x0]
     380:	add	x1, x0, #0x630
     384:	ldrb	w3, [x19]
     388:	add	x2, x2, #0x630
     38c:	strb	w3, [x4, #2632]
     390:	stp	xzr, xzr, [x0, #16]
     394:	str	xzr, [x0, #544]
     398:	str	xzr, [x1]
     39c:	add	x1, x1, #0x208
     3a0:	cmp	x1, x2
     3a4:	b.ne	398 <_ZN11__sanitizer9DDetector6CreateEPKNS_7DDFlagsE+0x50>  // b.any
     3a8:	add	x1, x0, #0x10
     3ac:	add	x1, x1, #0x410, lsl #12
     3b0:	str	xzr, [x1, #2608]
     3b4:	ldp	x19, x30, [sp], #16
     3b8:	ret
     3bc:	nop

00000000000003c0 <_ZN11__sanitizer2DDC1EPKNS_7DDFlagsE>:
     3c0:	add	x5, x0, #0x410, lsl #12
     3c4:	strb	wzr, [x0, #8]
     3c8:	add	x3, x0, #0x208, lsl #12
     3cc:	adrp	x4, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     3d0:	ldrb	w1, [x1]
     3d4:	add	x4, x4, #0x0
     3d8:	str	x4, [x0]
     3dc:	add	x2, x0, #0x630
     3e0:	add	x3, x3, #0x630
     3e4:	strb	w1, [x5, #2632]
     3e8:	stp	xzr, xzr, [x0, #16]
     3ec:	str	xzr, [x0, #544]
     3f0:	str	xzr, [x2]
     3f4:	add	x2, x2, #0x208
     3f8:	cmp	x2, x3
     3fc:	b.ne	3f0 <_ZN11__sanitizer2DDC1EPKNS_7DDFlagsE+0x30>  // b.any
     400:	add	x0, x0, #0x10
     404:	add	x0, x0, #0x410, lsl #12
     408:	str	xzr, [x0, #2608]
     40c:	ret

0000000000000410 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE>:
     410:	ldr	x3, [x2]
     414:	cbz	x3, 428 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x18>
     418:	ldr	x4, [x0, #16]
     41c:	and	x3, x3, #0xfffffffffffff000
     420:	cmp	x3, x4
     424:	b.eq	6ec <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x2dc>  // b.none
     428:	stp	x19, x20, [sp, #-32]!
     42c:	ldr	x9, [x0, #24]
     430:	str	x30, [sp, #16]
     434:	cbz	x9, 4a0 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x90>
     438:	mov	x4, x0
     43c:	rbit	x3, x9
     440:	clz	x3, x3
     444:	mov	x5, #0x1                   	// #1
     448:	add	x8, x3, x5
     44c:	lsl	x7, x5, x3
     450:	bic	x9, x9, x7
     454:	str	x9, [x4, #24]!
     458:	ldr	x6, [x4, x8, lsl #3]
     45c:	cbz	x6, 850 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x440>
     460:	rbit	x10, x6
     464:	clz	x10, x10
     468:	lsl	x5, x5, x10
     46c:	bic	x5, x6, x5
     470:	str	x5, [x4, x8, lsl #3]
     474:	cbz	x5, 480 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x70>
     478:	orr	x7, x7, x9
     47c:	str	x7, [x0, #24]
     480:	add	x3, x10, x3, lsl #6
     484:	add	x4, x0, #0x10
     488:	add	x5, x3, #0x41, lsl #12
     48c:	add	x5, x5, #0x146
     490:	str	x2, [x4, x5, lsl #3]
     494:	ldr	x4, [x0, #16]
     498:	add	x3, x3, x4
     49c:	b	6a0 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x290>
     4a0:	ldr	x15, [x0, #544]
     4a4:	cbz	x15, 5ec <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x1dc>
     4a8:	add	x11, x0, #0x10
     4ac:	add	x10, x11, #0x410, lsl #12
     4b0:	ldr	x4, [x10, #2608]
     4b4:	subs	x12, x4, #0x1
     4b8:	b.mi	590 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x180>  // b.first
     4bc:	add	x4, x4, #0x21, lsl #12
     4c0:	mov	x16, #0x10a2                	// #4258
     4c4:	add	x4, x4, #0xa3
     4c8:	add	x14, x0, #0x220
     4cc:	mov	x13, #0x1                   	// #1
     4d0:	movk	x16, #0x2, lsl #16
     4d4:	add	x4, x0, x4, lsl #4
     4d8:	ldrh	w6, [x4]
     4dc:	and	x3, x6, #0xffff
     4e0:	cmp	x3, #0x1, lsl #12
     4e4:	b.hi	7ec <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x3dc>  // b.pmore
     4e8:	lsr	x5, x3, #12
     4ec:	ubfx	x3, x3, #6, #6
     4f0:	lsl	x8, x13, x3
     4f4:	ldr	x7, [x14, x5, lsl #3]
     4f8:	tst	x8, x7
     4fc:	b.ne	6d0 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x2c0>  // b.any
     500:	ldrh	w6, [x4, #2]
     504:	and	x3, x6, #0xffff
     508:	cmp	x3, #0x1, lsl #12
     50c:	b.hi	814 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x404>  // b.pmore
     510:	lsr	x5, x3, #12
     514:	ubfx	x3, x3, #6, #6
     518:	lsl	x8, x13, x3
     51c:	ldr	x7, [x14, x5, lsl #3]
     520:	tst	x8, x7
     524:	b.eq	580 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x170>  // b.none
     528:	add	x3, x3, x5, lsl #6
     52c:	lsl	x6, x13, x6
     530:	add	x3, x3, #0x1
     534:	ldr	x3, [x14, x3, lsl #3]
     538:	tst	x6, x3
     53c:	b.eq	580 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x170>  // b.none
     540:	ldr	x3, [x10, #2608]
     544:	ldrh	w20, [x4]
     548:	add	x8, x3, x16
     54c:	sub	x5, x3, #0x1
     550:	ldrh	w19, [x4, #2]
     554:	lsl	x8, x8, #4
     558:	ldr	w17, [x4, #12]
     55c:	add	x3, x11, x8
     560:	ldp	w30, w18, [x4, #4]
     564:	ldp	x6, x7, [x3]
     568:	stp	x6, x7, [x4]
     56c:	strh	w20, [x11, x8]
     570:	strh	w19, [x3, #2]
     574:	stp	w30, w18, [x3, #4]
     578:	str	w17, [x3, #12]
     57c:	str	x5, [x10, #2608]
     580:	sub	x12, x12, #0x1
     584:	sub	x4, x4, #0x10
     588:	cmn	x12, #0x1
     58c:	b.ne	4d8 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0xc8>  // b.any
     590:	mov	x12, #0x1                   	// #1
     594:	add	x6, x0, #0x630
     598:	mov	x14, x12
     59c:	ldr	x3, [x6, x9, lsl #3]
     5a0:	add	x13, x9, #0x1
     5a4:	and	x3, x15, x3
     5a8:	cbz	x3, 72c <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x31c>
     5ac:	rbit	x4, x3
     5b0:	clz	x4, x4
     5b4:	add	x7, x13, x4
     5b8:	add	x10, x0, x4, lsl #3
     5bc:	lsl	x5, x12, x4
     5c0:	bic	x3, x3, x5
     5c4:	ldr	x8, [x6, x7, lsl #3]
     5c8:	ldr	x5, [x10, #552]
     5cc:	bic	x5, x8, x5
     5d0:	str	x5, [x6, x7, lsl #3]
     5d4:	cbnz	x5, 5a8 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x198>
     5d8:	ldr	x5, [x6, x9, lsl #3]
     5dc:	lsl	x4, x14, x4
     5e0:	bic	x4, x5, x4
     5e4:	str	x4, [x6, x9, lsl #3]
     5e8:	b	5a8 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x198>
     5ec:	ldr	x4, [x0, #16]
     5f0:	mov	x6, x0
     5f4:	mov	x7, #0xffffffffffffffff    	// #-1
     5f8:	add	x3, x0, #0x20
     5fc:	add	x4, x4, #0x1, lsl #12
     600:	mov	x5, x7
     604:	str	x4, [x0, #16]
     608:	add	x4, x0, #0x220
     60c:	str	x7, [x6, #24]!
     610:	str	x5, [x3], #8
     614:	cmp	x3, x4
     618:	b.ne	610 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x200>  // b.any
     61c:	add	x4, x0, #0x208, lsl #12
     620:	add	x3, x0, #0x630
     624:	add	x4, x4, #0x630
     628:	str	xzr, [x3]
     62c:	add	x3, x3, #0x208
     630:	cmp	x4, x3
     634:	b.ne	628 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x218>  // b.any
     638:	add	x11, x0, #0x10
     63c:	add	x3, x11, #0x410, lsl #12
     640:	str	xzr, [x3, #2608]
     644:	ldr	x4, [x0, #24]
     648:	cbz	x4, 70c <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x2fc>
     64c:	rbit	x3, x4
     650:	mov	x5, #0x1                   	// #1
     654:	clz	x3, x3
     658:	add	x9, x3, x5
     65c:	lsl	x8, x5, x3
     660:	bic	x4, x4, x8
     664:	str	x4, [x0, #24]
     668:	ldr	x7, [x6, x9, lsl #3]
     66c:	cbz	x7, 830 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x420>
     670:	rbit	x10, x7
     674:	clz	x10, x10
     678:	lsl	x5, x5, x10
     67c:	bic	x5, x7, x5
     680:	str	x5, [x6, x9, lsl #3]
     684:	cbnz	x5, 808 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x3f8>
     688:	add	x3, x10, x3, lsl #6
     68c:	add	x4, x3, #0x41, lsl #12
     690:	add	x4, x4, #0x146
     694:	str	x2, [x11, x4, lsl #3]
     698:	ldr	x4, [x0, #16]
     69c:	add	x3, x3, x4
     6a0:	str	x3, [x2]
     6a4:	ldr	x2, [x1, #528]
     6a8:	ldr	x4, [x0, #16]
     6ac:	cmp	x2, x4
     6b0:	b.eq	6c4 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x2b4>  // b.none
     6b4:	str	xzr, [x1, #8]
     6b8:	str	x4, [x1, #528]
     6bc:	str	xzr, [x1, #1048]
     6c0:	str	xzr, [x1, #1568]
     6c4:	ldr	x30, [sp, #16]
     6c8:	ldp	x19, x20, [sp], #32
     6cc:	ret
     6d0:	add	x3, x3, x5, lsl #6
     6d4:	lsl	x6, x13, x6
     6d8:	add	x3, x3, #0x1
     6dc:	ldr	x3, [x14, x3, lsl #3]
     6e0:	tst	x6, x3
     6e4:	b.ne	540 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x130>  // b.any
     6e8:	b	500 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0xf0>
     6ec:	ldr	x2, [x1, #528]
     6f0:	cmp	x2, x4
     6f4:	b.eq	708 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x2f8>  // b.none
     6f8:	str	xzr, [x1, #8]
     6fc:	str	x4, [x1, #528]
     700:	str	xzr, [x1, #1048]
     704:	str	xzr, [x1, #1568]
     708:	ret
     70c:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     710:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     714:	add	x2, x2, #0x0
     718:	add	x0, x0, #0x0
     71c:	mov	x4, #0x0                   	// #0
     720:	mov	x3, #0x0                   	// #0
     724:	mov	w1, #0xbf                  	// #191
     728:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     72c:	add	x9, x9, #0x41
     730:	cmp	x9, #0x41, lsl #12
     734:	ldr	x15, [x0, #544]
     738:	b.ne	59c <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x18c>  // b.any
     73c:	add	x8, x0, #0x220
     740:	add	x6, x0, #0x18
     744:	mov	x7, #0x1                   	// #1
     748:	cbz	x15, 790 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x380>
     74c:	rbit	x3, x15
     750:	ldr	x5, [x0, #24]
     754:	clz	x3, x3
     758:	lsl	x4, x7, x3
     75c:	add	x3, x3, #0x1
     760:	bic	x15, x15, x4
     764:	orr	x4, x4, x5
     768:	str	x4, [x0, #24]
     76c:	cmp	x5, x4
     770:	lsl	x4, x3, #3
     774:	b.eq	870 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x460>  // b.none
     778:	mov	x5, #0x0                   	// #0
     77c:	str	xzr, [x6, x3, lsl #3]
     780:	ldr	x4, [x8, x3, lsl #3]
     784:	orr	x4, x4, x5
     788:	str	x4, [x6, x3, lsl #3]
     78c:	cbnz	x15, 74c <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x33c>
     790:	ldr	x5, [x0, #24]
     794:	str	xzr, [x0, #544]
     798:	cbz	x5, 70c <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x2fc>
     79c:	rbit	x3, x5
     7a0:	mov	x7, x0
     7a4:	clz	x3, x3
     7a8:	mov	x4, #0x1                   	// #1
     7ac:	add	x6, x3, #0x1
     7b0:	lsl	x8, x4, x3
     7b4:	bic	x5, x5, x8
     7b8:	lsl	x6, x6, #3
     7bc:	str	x5, [x7, #24]!
     7c0:	ldr	x9, [x7, x6]
     7c4:	cbz	x9, 878 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x468>
     7c8:	rbit	x10, x9
     7cc:	clz	x10, x10
     7d0:	lsl	x4, x4, x10
     7d4:	bic	x4, x9, x4
     7d8:	str	x4, [x7, x6]
     7dc:	cbz	x4, 688 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x278>
     7e0:	orr	x5, x8, x5
     7e4:	str	x5, [x0, #24]
     7e8:	b	688 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x278>
     7ec:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     7f0:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     7f4:	add	x2, x2, #0x0
     7f8:	add	x0, x0, #0x0
     7fc:	mov	x4, #0x1000                	// #4096
     800:	mov	w1, #0x143                 	// #323
     804:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     808:	orr	x4, x8, x4
     80c:	str	x4, [x0, #24]
     810:	b	688 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x278>
     814:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     818:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     81c:	add	x2, x2, #0x0
     820:	add	x0, x0, #0x0
     824:	mov	x4, #0x1000                	// #4096
     828:	mov	w1, #0x143                 	// #323
     82c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     830:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     834:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     838:	add	x2, x2, #0x0
     83c:	add	x0, x0, #0x0
     840:	mov	x4, #0x0                   	// #0
     844:	mov	x3, #0x0                   	// #0
     848:	mov	w1, #0x30                  	// #48
     84c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     850:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     854:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     858:	add	x2, x2, #0x0
     85c:	add	x0, x0, #0x0
     860:	mov	x4, #0x0                   	// #0
     864:	mov	x3, #0x0                   	// #0
     868:	mov	w1, #0x30                  	// #48
     86c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     870:	ldr	x5, [x6, x4]
     874:	b	780 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x370>
     878:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     87c:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     880:	add	x2, x2, #0x0
     884:	add	x0, x0, #0x0
     888:	mov	x4, #0x0                   	// #0
     88c:	mov	x3, #0x0                   	// #0
     890:	mov	w1, #0x30                  	// #48
     894:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000898 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb>:
     898:	stp	x19, x20, [sp, #-96]!
     89c:	mov	x20, x1
     8a0:	add	x1, x0, #0x410, lsl #12
     8a4:	stp	x21, x22, [sp, #16]
     8a8:	mov	x19, x0
     8ac:	mov	x21, x2
     8b0:	ldrb	w1, [x1, #2632]
     8b4:	stp	x23, x24, [sp, #32]
     8b8:	and	w24, w3, #0xff
     8bc:	stp	x25, x26, [sp, #48]
     8c0:	and	w26, w4, #0xff
     8c4:	mov	w25, #0x0                   	// #0
     8c8:	ldr	x23, [x20, #16]
     8cc:	str	x30, [sp, #64]
     8d0:	cbz	w1, 8ec <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x54>
     8d4:	ldr	x0, [x20]
     8d8:	adrp	x1, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     8dc:	add	x1, x1, #0x0
     8e0:	ldr	x2, [x0]
     8e4:	cmp	x2, x1
     8e8:	b.ne	a88 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x1f0>  // b.any
     8ec:	ldr	x1, [x23, #8]
     8f0:	add	x22, x23, #0x8
     8f4:	ldr	x2, [x21]
     8f8:	ldr	x5, [x23, #528]
     8fc:	cbz	x1, a2c <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x194>
     900:	cbz	x2, 910 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x78>
     904:	ldr	x0, [x19, #16]
     908:	cmp	x0, x5
     90c:	b.eq	aac <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x214>  // b.none
     910:	add	x0, x19, #0x8
     914:	mov	w2, #0x1                   	// #1
     918:	ldxrb	w1, [x0]
     91c:	stxrb	w3, w2, [x0]
     920:	cbnz	w3, 918 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x80>
     924:	dmb	ish
     928:	tst	w1, #0xff
     92c:	b.eq	938 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0xa0>  // b.none
     930:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     934:	nop
     938:	mov	x2, x21
     93c:	mov	x1, x23
     940:	mov	x0, x19
     944:	bl	410 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE>
     948:	cbnz	w24, b68 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x2d0>
     94c:	ldr	x24, [x21]
     950:	cbnz	w26, 98c <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0xf4>
     954:	mov	w3, w25
     958:	ldr	x1, [x20]
     95c:	cbz	w25, c30 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x398>
     960:	ldr	x2, [x1, #8]
     964:	adrp	x1, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     968:	add	x1, x1, #0x0
     96c:	mov	w4, #0x0                   	// #0
     970:	cmp	x2, x1
     974:	b.ne	cfc <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x464>  // b.any
     978:	mov	x2, x24
     97c:	mov	x1, x22
     980:	add	x0, x19, #0x10
     984:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     988:	ldr	x24, [x21]
     98c:	ldr	x0, [x19, #16]
     990:	ldr	x1, [x22, #520]
     994:	cmp	x0, x1
     998:	b.eq	9ac <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x114>  // b.none
     99c:	str	xzr, [x23, #8]
     9a0:	str	x0, [x22, #520]
     9a4:	str	xzr, [x22, #1040]
     9a8:	str	xzr, [x22, #1560]
     9ac:	cmp	x24, #0xfff
     9b0:	b.ls	cc4 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x42c>  // b.plast
     9b4:	ldr	x3, [x19, #16]
     9b8:	and	x4, x24, #0xfffffffffffff000
     9bc:	cmp	x3, x4
     9c0:	b.ne	ce4 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x44c>  // b.any
     9c4:	ldr	x0, [x22, #520]
     9c8:	and	x4, x24, #0xfff
     9cc:	cmp	x0, x3
     9d0:	b.ne	d14 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x47c>  // b.any
     9d4:	ldr	x1, [x23, #8]
     9d8:	lsr	x2, x4, #6
     9dc:	mov	x0, #0x1                   	// #1
     9e0:	add	x3, x2, x0
     9e4:	lsl	x24, x0, x24
     9e8:	lsl	x0, x0, x2
     9ec:	tst	x1, x0
     9f0:	b.ne	be0 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x348>  // b.any
     9f4:	orr	x0, x1, x0
     9f8:	str	x0, [x23, #8]
     9fc:	str	x24, [x22, x3, lsl #3]
     a00:	ldr	x3, [x22, #1560]
     a04:	cmp	x3, #0x3f
     a08:	b.hi	c58 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x3c0>  // b.pmore
     a0c:	add	x0, x3, #0x83
     a10:	add	x3, x3, #0x1
     a14:	str	x3, [x22, #1560]
     a18:	lsl	x0, x0, #3
     a1c:	add	x1, x22, x0
     a20:	str	w4, [x22, x0]
     a24:	str	w25, [x1, #4]
     a28:	b	c10 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x378>
     a2c:	cbz	x5, 900 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x68>
     a30:	and	x0, x2, #0xfffffffffffff000
     a34:	cmp	x0, x5
     a38:	b.ne	900 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x68>  // b.any
     a3c:	ubfx	x1, x2, #6, #6
     a40:	mov	x0, #0x1                   	// #1
     a44:	add	x3, x1, x0
     a48:	lsl	x4, x0, x2
     a4c:	lsl	x0, x0, x1
     a50:	str	x0, [x23, #8]
     a54:	and	x2, x2, #0xfff
     a58:	str	x4, [x22, x3, lsl #3]
     a5c:	ldr	x3, [x22, #1560]
     a60:	cmp	x3, #0x3f
     a64:	b.hi	c58 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x3c0>  // b.pmore
     a68:	add	x0, x3, #0x83
     a6c:	add	x3, x3, #0x1
     a70:	str	x3, [x22, #1560]
     a74:	lsl	x0, x0, #3
     a78:	add	x1, x22, x0
     a7c:	str	w2, [x22, x0]
     a80:	str	w25, [x1, #4]
     a84:	b	c18 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x380>
     a88:	mov	x0, x20
     a8c:	blr	x2
     a90:	ldr	x1, [x23, #8]
     a94:	mov	w25, w0
     a98:	add	x22, x23, #0x8
     a9c:	ldr	x2, [x21]
     aa0:	ldr	x5, [x23, #528]
     aa4:	cbnz	x1, 900 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x68>
     aa8:	b	a2c <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x194>
     aac:	and	x0, x2, #0xfffffffffffff000
     ab0:	cmp	x0, x5
     ab4:	b.ne	910 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x78>  // b.any
     ab8:	ldr	x9, [x23, #1568]
     abc:	ubfx	x6, x2, #6, #6
     ac0:	mov	x0, #0x1                   	// #1
     ac4:	and	x8, x2, #0xfff
     ac8:	add	x5, x6, x0
     acc:	lsl	x3, x0, x6
     ad0:	lsl	x2, x0, x2
     ad4:	cbz	x9, b28 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x290>
     ad8:	add	x6, x6, #0x1
     adc:	add	x7, x19, #0x630
     ae0:	add	x11, x23, #0x420
     ae4:	mov	x0, #0x0                   	// #0
     ae8:	mov	w10, #0x208                 	// #520
     aec:	mov	w12, #0x41                  	// #65
     af0:	lsl	x4, x0, #3
     af4:	ldr	w4, [x11, x4]
     af8:	umull	x5, w4, w10
     afc:	ldr	x5, [x7, x5]
     b00:	tst	x3, x5
     b04:	b.eq	910 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x78>  // b.none
     b08:	umaddl	x4, w4, w12, x6
     b0c:	mov	x5, x6
     b10:	ldr	x4, [x7, x4, lsl #3]
     b14:	tst	x2, x4
     b18:	b.eq	910 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x78>  // b.none
     b1c:	add	x0, x0, #0x1
     b20:	cmp	x9, x0
     b24:	b.ne	af0 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x258>  // b.any
     b28:	tst	x1, x3
     b2c:	b.ne	c90 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x3f8>  // b.any
     b30:	orr	x1, x1, x3
     b34:	str	x1, [x23, #8]
     b38:	str	x2, [x22, x5, lsl #3]
     b3c:	ldr	x3, [x22, #1560]
     b40:	cmp	x3, #0x3f
     b44:	b.hi	c58 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x3c0>  // b.pmore
     b48:	add	x0, x3, #0x83
     b4c:	add	x3, x3, #0x1
     b50:	str	x3, [x22, #1560]
     b54:	lsl	x0, x0, #3
     b58:	add	x1, x22, x0
     b5c:	str	w8, [x22, x0]
     b60:	str	w25, [x1, #4]
     b64:	b	c18 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x380>
     b68:	ldr	x0, [x19, #16]
     b6c:	ldr	x3, [x22, #520]
     b70:	ldr	x24, [x21]
     b74:	cmp	x0, x3
     b78:	b.ne	d34 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x49c>  // b.any
     b7c:	cmp	x24, #0xfff
     b80:	b.ls	cc4 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x42c>  // b.plast
     b84:	and	x4, x24, #0xfffffffffffff000
     b88:	mov	x3, x0
     b8c:	cmp	x0, x4
     b90:	b.ne	ce4 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x44c>  // b.any
     b94:	ldr	x2, [x23, #8]
     b98:	ubfx	x1, x24, #6, #6
     b9c:	mov	x0, #0x1                   	// #1
     ba0:	lsl	x3, x0, x1
     ba4:	tst	x3, x2
     ba8:	b.eq	950 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0xb8>  // b.none
     bac:	add	x1, x1, x0
     bb0:	lsl	x0, x0, x24
     bb4:	ldr	x1, [x22, x1, lsl #3]
     bb8:	tst	x0, x1
     bbc:	b.eq	950 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0xb8>  // b.none
     bc0:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     bc4:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     bc8:	add	x2, x2, #0x0
     bcc:	add	x0, x0, #0x0
     bd0:	mov	x4, #0x0                   	// #0
     bd4:	mov	x3, #0x0                   	// #0
     bd8:	mov	w1, #0xa5                  	// #165
     bdc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     be0:	ldr	x0, [x22, x3, lsl #3]
     be4:	orr	x24, x24, x0
     be8:	str	x24, [x22, x3, lsl #3]
     bec:	cmp	x0, x24
     bf0:	b.ne	a00 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x168>  // b.any
     bf4:	ldr	x3, [x22, #1040]
     bf8:	cmp	x3, #0x3f
     bfc:	b.hi	c74 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x3dc>  // b.pmore
     c00:	add	x0, x3, #0x42
     c04:	add	x3, x3, #0x1
     c08:	str	x3, [x22, #1040]
     c0c:	str	x4, [x22, x0, lsl #3]
     c10:	dmb	ish
     c14:	strb	wzr, [x19, #8]
     c18:	ldp	x21, x22, [sp, #16]
     c1c:	ldp	x23, x24, [sp, #32]
     c20:	ldp	x25, x26, [sp, #48]
     c24:	ldr	x30, [sp, #64]
     c28:	ldp	x19, x20, [sp], #96
     c2c:	ret
     c30:	ldr	x2, [x1]
     c34:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     c38:	add	x0, x0, #0x0
     c3c:	cmp	x2, x0
     c40:	b.eq	960 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0xc8>  // b.none
     c44:	mov	x0, x20
     c48:	blr	x2
     c4c:	mov	w3, w0
     c50:	ldr	x1, [x20]
     c54:	b	960 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0xc8>
     c58:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     c5c:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     c60:	add	x2, x2, #0x0
     c64:	add	x0, x0, #0x0
     c68:	mov	x4, #0x40                  	// #64
     c6c:	mov	w1, #0x43                  	// #67
     c70:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     c74:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     c78:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     c7c:	add	x2, x2, #0x0
     c80:	add	x0, x0, #0x0
     c84:	mov	x4, #0x40                  	// #64
     c88:	mov	w1, #0x3f                  	// #63
     c8c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     c90:	ldr	x0, [x22, x5, lsl #3]
     c94:	orr	x2, x2, x0
     c98:	str	x2, [x22, x5, lsl #3]
     c9c:	cmp	x0, x2
     ca0:	b.ne	b3c <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x2a4>  // b.any
     ca4:	ldr	x3, [x22, #1040]
     ca8:	cmp	x3, #0x3f
     cac:	b.hi	c74 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x3dc>  // b.pmore
     cb0:	add	x0, x3, #0x42
     cb4:	add	x3, x3, #0x1
     cb8:	str	x3, [x22, #1040]
     cbc:	str	x8, [x22, x0, lsl #3]
     cc0:	b	c18 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x380>
     cc4:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     cc8:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     ccc:	mov	x3, x24
     cd0:	add	x2, x2, #0x0
     cd4:	add	x0, x0, #0x0
     cd8:	mov	x4, #0x1000                	// #4096
     cdc:	mov	w1, #0x172                 	// #370
     ce0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     ce4:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     ce8:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     cec:	add	x2, x2, #0x0
     cf0:	add	x0, x0, #0x0
     cf4:	mov	w1, #0x173                 	// #371
     cf8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     cfc:	str	w3, [sp, #92]
     d00:	mov	x0, x20
     d04:	blr	x2
     d08:	mov	w4, w0
     d0c:	ldr	w3, [sp, #92]
     d10:	b	978 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0xe0>
     d14:	mov	x4, x3
     d18:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     d1c:	mov	x3, x0
     d20:	add	x2, x2, #0x0
     d24:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     d28:	mov	w1, #0x3c                  	// #60
     d2c:	add	x0, x0, #0x0
     d30:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     d34:	mov	x4, x0
     d38:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     d3c:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     d40:	add	x2, x2, #0x0
     d44:	add	x0, x0, #0x0
     d48:	mov	w1, #0x6c                  	// #108
     d4c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000d50 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE>:
     d50:	stp	x19, x20, [sp, #-336]!
     d54:	stp	x23, x24, [sp, #32]
     d58:	ldr	x23, [x1, #16]
     d5c:	stp	x21, x22, [sp, #16]
     d60:	mov	x22, x2
     d64:	ldr	x4, [x0, #16]
     d68:	stp	x25, x26, [sp, #48]
     d6c:	add	x2, x23, #0x8
     d70:	ldr	x3, [x2, #520]
     d74:	stp	x27, x28, [sp, #64]
     d78:	ldr	x25, [x22]
     d7c:	str	x30, [sp, #80]
     d80:	cmp	x4, x3
     d84:	b.ne	f8c <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x23c>  // b.any
     d88:	str	xzr, [x0, #1064]
     d8c:	mov	x19, x0
     d90:	add	x21, x0, #0x428
     d94:	ldr	x1, [x23, #8]
     d98:	cbz	x1, df0 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0xa0>
     d9c:	mov	x3, #0x0                   	// #0
     da0:	mov	x6, #0x1                   	// #1
     da4:	rbit	x0, x1
     da8:	clz	x0, x0
     dac:	lsl	x5, x6, x0
     db0:	orr	x4, x5, x3
     db4:	str	x4, [x19, #1064]
     db8:	bic	x1, x1, x5
     dbc:	cmp	x3, x4
     dc0:	add	x0, x0, #0x1
     dc4:	b.eq	de8 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x98>  // b.none
     dc8:	mov	x4, #0x0                   	// #0
     dcc:	str	xzr, [x21, x0, lsl #3]
     dd0:	ldr	x3, [x2, x0, lsl #3]
     dd4:	orr	x3, x3, x4
     dd8:	str	x3, [x21, x0, lsl #3]
     ddc:	cbz	x1, df0 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0xa0>
     de0:	ldr	x3, [x19, #1064]
     de4:	b	da4 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x54>
     de8:	ldr	x4, [x21, x0, lsl #3]
     dec:	b	dd0 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x80>
     df0:	mov	x3, x25
     df4:	cmp	x25, #0xfff
     df8:	b.ls	fd0 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x280>  // b.plast
     dfc:	ldr	x3, [x19, #16]
     e00:	and	x4, x25, #0xfffffffffffff000
     e04:	cmp	x3, x4
     e08:	b.ne	ff0 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x2a0>  // b.any
     e0c:	ubfx	x24, x25, #6, #6
     e10:	mov	x5, #0x1                   	// #1
     e14:	ldr	x20, [x19, #1064]
     e18:	add	x0, x24, x5
     e1c:	and	x6, x25, #0xfff
     e20:	lsl	x24, x5, x24
     e24:	add	x11, x21, x0, lsl #3
     e28:	ands	x20, x20, x24
     e2c:	lsl	x5, x5, x25
     e30:	b.eq	e60 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x110>  // b.none
     e34:	ldr	x0, [x21, x0, lsl #3]
     e38:	tst	x5, x0
     e3c:	b.eq	e60 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x110>  // b.none
     e40:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     e44:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     e48:	add	x2, x2, #0x0
     e4c:	add	x0, x0, #0x0
     e50:	mov	x4, #0x0                   	// #0
     e54:	mov	x3, #0x0                   	// #0
     e58:	mov	w1, #0x13e                 	// #318
     e5c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     e60:	add	x8, x6, x6, lsl #6
     e64:	str	x6, [sp, #176]
     e68:	add	x7, x19, #0x630
     e6c:	mov	x26, #0x1                   	// #1
     e70:	add	x3, sp, #0xb8
     e74:	add	x10, x7, x8, lsl #3
     e78:	mov	x9, x26
     e7c:	cbz	x20, eb4 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x164>
     e80:	ldr	x20, [x11]
     e84:	ands	x20, x5, x20
     e88:	b.eq	eb4 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x164>  // b.none
     e8c:	mov	x0, #0x1                   	// #1
     e90:	cmp	x0, x26
     e94:	b.eq	1028 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x2d8>  // b.none
     e98:	add	x26, x26, #0x1
     e9c:	cmp	x26, #0x15
     ea0:	b.eq	11a4 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x454>  // b.none
     ea4:	ldr	x20, [x19, #1064]
     ea8:	str	x6, [sp, #176]
     eac:	and	x20, x20, x24
     eb0:	cbnz	x20, e80 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x130>
     eb4:	sub	x4, x26, #0x1
     eb8:	mov	x28, #0x0                   	// #0
     ebc:	mov	x27, #0x0                   	// #0
     ec0:	mov	x12, #0x0                   	// #0
     ec4:	cbnz	x27, f68 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x218>
     ec8:	cbnz	x20, e98 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x148>
     ecc:	ldr	x27, [x10]
     ed0:	cbz	x27, e98 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x148>
     ed4:	cbnz	x28, fa4 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x254>
     ed8:	mov	x1, x8
     edc:	mov	x20, x28
     ee0:	rbit	x12, x27
     ee4:	clz	x12, x12
     ee8:	add	x0, x12, x1
     eec:	add	x0, x0, #0x1
     ef0:	ldr	x2, [x7, x0, lsl #3]
     ef4:	cbz	x2, 1008 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x2b8>
     ef8:	add	x1, x28, x12
     efc:	lsl	x0, x9, x12
     f00:	mov	x28, x2
     f04:	bic	x27, x27, x0
     f08:	rbit	x0, x28
     f0c:	clz	x0, x0
     f10:	add	x1, x0, x1, lsl #6
     f14:	lsl	x2, x9, x0
     f18:	bic	x28, x28, x2
     f1c:	orr	x0, x28, x27
     f20:	cbz	x0, fbc <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x26c>
     f24:	mov	x0, x7
     f28:	mov	x2, x21
     f2c:	stp	x7, x3, [sp, #104]
     f30:	stp	x4, x6, [sp, #120]
     f34:	stp	x11, x12, [sp, #136]
     f38:	stp	x10, x5, [sp, #152]
     f3c:	str	x8, [sp, #168]
     f40:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     f44:	mov	x9, #0x1                   	// #1
     f48:	ldp	x7, x3, [sp, #104]
     f4c:	ldp	x4, x6, [sp, #120]
     f50:	ldp	x11, x12, [sp, #136]
     f54:	ldp	x10, x5, [sp, #152]
     f58:	ldr	x8, [sp, #168]
     f5c:	cbz	x0, ec4 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x174>
     f60:	add	x0, x0, x9
     f64:	b	e90 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x140>
     f68:	lsl	x0, x20, #6
     f6c:	cbz	x28, fb0 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x260>
     f70:	rbit	x1, x28
     f74:	add	x0, x12, x0
     f78:	clz	x1, x1
     f7c:	lsl	x2, x9, x1
     f80:	add	x1, x1, x0, lsl #6
     f84:	bic	x28, x28, x2
     f88:	b	f24 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x1d4>
     f8c:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     f90:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     f94:	add	x2, x2, #0x0
     f98:	add	x0, x0, #0x0
     f9c:	mov	w1, #0x6c                  	// #108
     fa0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     fa4:	mov	x1, x12
     fa8:	mov	x27, #0x0                   	// #0
     fac:	b	f08 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x1b8>
     fb0:	add	x1, x8, x0
     fb4:	mov	x28, x0
     fb8:	b	ee0 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x190>
     fbc:	add	x20, x20, #0x1
     fc0:	mov	x27, #0x0                   	// #0
     fc4:	mov	x28, #0x0                   	// #0
     fc8:	b	f24 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x1d4>
     fcc:	mov	x3, x5
     fd0:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     fd4:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     fd8:	add	x2, x2, #0x0
     fdc:	add	x0, x0, #0x0
     fe0:	mov	x4, #0x1000                	// #4096
     fe4:	mov	w1, #0x172                 	// #370
     fe8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     fec:	mov	x3, x1
     ff0:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     ff4:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     ff8:	add	x2, x2, #0x0
     ffc:	add	x0, x0, #0x0
    1000:	mov	w1, #0x173                 	// #371
    1004:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1008:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    100c:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    1010:	add	x2, x2, #0x0
    1014:	add	x0, x0, #0x0
    1018:	mov	x4, #0x0                   	// #0
    101c:	mov	x3, #0x0                   	// #0
    1020:	mov	w1, #0x132                 	// #306
    1024:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1028:	add	x7, sp, #0xb0
    102c:	mov	x0, x7
    1030:	add	x2, x7, x26, lsl #3
    1034:	b	104c <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x2fc>
    1038:	ldr	x1, [x19, #16]
    103c:	add	x3, x3, x1
    1040:	str	x3, [x0], #8
    1044:	cmp	x2, x0
    1048:	b.eq	1074 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x324>  // b.none
    104c:	ldr	x3, [x0]
    1050:	cmp	x3, #0xfff
    1054:	b.ls	1038 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x2e8>  // b.plast
    1058:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    105c:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    1060:	add	x2, x2, #0x0
    1064:	add	x0, x0, #0x0
    1068:	mov	x4, #0x1000                	// #4096
    106c:	mov	w1, #0x16f                 	// #367
    1070:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1074:	ldr	x5, [sp, #176]
    1078:	cmp	x25, x5
    107c:	b.ne	11f4 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x4a4>  // b.any
    1080:	ldr	x3, [x22]
    1084:	cmp	x3, x25
    1088:	b.ne	11cc <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x47c>  // b.any
    108c:	add	x10, x19, #0x10
    1090:	cmp	x26, #0x14
    1094:	mov	x13, #0xa40                 	// #2624
    1098:	mov	x11, #0x1146                	// #4422
    109c:	add	x12, x10, #0x410, lsl #12
    10a0:	add	x9, x23, #0x630
    10a4:	mov	x2, #0x14                  	// #20
    10a8:	mov	w0, #0x1                   	// #1
    10ac:	csel	x26, x26, x2, ls  // ls = plast
    10b0:	mov	x8, #0x1                   	// #1
    10b4:	movk	x13, #0x21, lsl #16
    10b8:	movk	x11, #0x4, lsl #16
    10bc:	str	w26, [x23, #1576]
    10c0:	strb	w0, [x23, #2224]
    10c4:	udiv	x0, x8, x26
    10c8:	cmp	x5, #0xfff
    10cc:	msub	x0, x0, x26, x8
    10d0:	b.ls	fcc <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x27c>  // b.plast
    10d4:	and	x4, x5, #0xfffffffffffff000
    10d8:	cmp	x1, x4
    10dc:	b.ne	fec <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x29c>  // b.any
    10e0:	ldr	x3, [x7, x0, lsl #3]
    10e4:	and	x5, x5, #0xfff
    10e8:	cmp	x3, #0xfff
    10ec:	b.ls	fd0 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x280>  // b.plast
    10f0:	and	x4, x3, #0xfffffffffffff000
    10f4:	cmp	x1, x4
    10f8:	b.ne	fec <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x29c>  // b.any
    10fc:	ldr	x4, [x12, #2608]
    1100:	and	x6, x3, #0xfff
    1104:	cbz	x4, 11e8 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x498>
    1108:	add	x0, x19, x13
    110c:	mov	x2, #0x0                   	// #0
    1110:	b	1124 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x3d4>
    1114:	add	x2, x2, #0x1
    1118:	add	x0, x0, #0x10
    111c:	cmp	x4, x2
    1120:	b.eq	1194 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x444>  // b.none
    1124:	ldrh	w3, [x0]
    1128:	cmp	x5, x3
    112c:	b.ne	1114 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x3c4>  // b.any
    1130:	ldrh	w3, [x0, #2]
    1134:	cmp	x6, x3
    1138:	b.ne	1114 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x3c4>  // b.any
    113c:	add	x0, x19, x2, lsl #4
    1140:	add	x0, x0, #0x210, lsl #12
    1144:	ldrsw	x4, [x0, #2636]
    1148:	ldr	w2, [x0, #2628]
    114c:	ldr	w0, [x0, #2632]
    1150:	add	x5, x5, x11
    1154:	add	x3, x6, x11
    1158:	cmp	x26, x8
    115c:	add	x8, x8, #0x1
    1160:	ldr	x5, [x10, x5, lsl #3]
    1164:	ldr	x3, [x10, x3, lsl #3]
    1168:	str	x4, [x9]
    116c:	ldr	x4, [x5, #16]
    1170:	str	x4, [x9, #8]
    1174:	ldr	x3, [x3, #16]
    1178:	str	x3, [x9, #16]
    117c:	stp	w0, w2, [x9, #24]
    1180:	add	x9, x9, #0x20
    1184:	b.eq	11b0 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x460>  // b.none
    1188:	add	x0, x7, x8, lsl #3
    118c:	ldur	x5, [x0, #-8]
    1190:	b	10c4 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x374>
    1194:	mov	w0, #0xffffffff            	// #-1
    1198:	mov	x4, #0x0                   	// #0
    119c:	mov	w2, w0
    11a0:	b	1150 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x400>
    11a4:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    11a8:	add	x0, x0, #0x0
    11ac:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    11b0:	ldp	x21, x22, [sp, #16]
    11b4:	ldp	x23, x24, [sp, #32]
    11b8:	ldp	x25, x26, [sp, #48]
    11bc:	ldp	x27, x28, [sp, #64]
    11c0:	ldr	x30, [sp, #80]
    11c4:	ldp	x19, x20, [sp], #336
    11c8:	ret
    11cc:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    11d0:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    11d4:	mov	x4, x25
    11d8:	add	x2, x2, #0x0
    11dc:	add	x0, x0, #0x0
    11e0:	mov	w1, #0x7f                  	// #127
    11e4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    11e8:	mov	w0, #0xffffffff            	// #-1
    11ec:	mov	w2, w0
    11f0:	b	1150 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x400>
    11f4:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    11f8:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    11fc:	mov	x4, x25
    1200:	mov	x3, x5
    1204:	add	x2, x2, #0x0
    1208:	add	x0, x0, #0x0
    120c:	mov	w1, #0x143                 	// #323
    1210:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1214:	nop

0000000000001218 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb>:
    1218:	stp	x19, x20, [sp, #-64]!
    121c:	mov	x19, x0
    1220:	stp	x21, x22, [sp, #16]
    1224:	ldr	x21, [x1, #16]
    1228:	ldr	x0, [x21, #8]
    122c:	str	x30, [sp, #40]
    1230:	cbz	x0, 13fc <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x1e4>
    1234:	ldr	x0, [x2]
    1238:	mov	x22, x1
    123c:	mov	x20, x2
    1240:	cbz	x0, 1254 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x3c>
    1244:	ldr	x2, [x19, #16]
    1248:	ldr	x1, [x21, #528]
    124c:	cmp	x1, x2
    1250:	b.eq	141c <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x204>  // b.none
    1254:	add	x0, x19, #0x8
    1258:	mov	w2, #0x1                   	// #1
    125c:	str	x23, [sp, #32]
    1260:	ldxrb	w1, [x0]
    1264:	stxrb	w3, w2, [x0]
    1268:	cbnz	w3, 1260 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x48>
    126c:	dmb	ish
    1270:	tst	w1, #0xff
    1274:	b.eq	127c <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x64>  // b.none
    1278:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    127c:	add	x23, x21, #0x8
    1280:	mov	x1, x21
    1284:	mov	x0, x19
    1288:	mov	x2, x20
    128c:	bl	410 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE>
    1290:	ldr	x1, [x19, #16]
    1294:	ldr	x3, [x23, #520]
    1298:	ldr	x0, [x20]
    129c:	cmp	x1, x3
    12a0:	b.ne	1498 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x280>  // b.any
    12a4:	cmp	x0, #0xfff
    12a8:	b.ls	14b4 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x29c>  // b.plast
    12ac:	and	x4, x0, #0xfffffffffffff000
    12b0:	cmp	x1, x4
    12b4:	b.ne	14d4 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x2bc>  // b.any
    12b8:	ldr	x2, [x21, #8]
    12bc:	ubfx	x1, x0, #6, #6
    12c0:	mov	x3, #0x1                   	// #1
    12c4:	add	x8, x1, x3
    12c8:	lsl	x5, x3, x1
    12cc:	and	x1, x0, #0xfff
    12d0:	tst	x5, x2
    12d4:	lsl	x3, x3, x0
    12d8:	b.ne	140c <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x1f4>  // b.any
    12dc:	add	x6, x19, #0x208, lsl #12
    12e0:	add	x4, x1, x1, lsl #6
    12e4:	add	x10, x19, #0x630
    12e8:	str	xzr, [x6, #1584]
    12ec:	ldr	x1, [x10, x4, lsl #3]
    12f0:	cbz	x1, 14f0 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x2d8>
    12f4:	add	x9, x19, #0x208, lsl #12
    12f8:	mov	x2, #0x0                   	// #0
    12fc:	add	x9, x9, #0x630
    1300:	mov	x11, #0x1                   	// #1
    1304:	rbit	x0, x1
    1308:	clz	x0, x0
    130c:	lsl	x0, x11, x0
    1310:	orr	x7, x0, x2
    1314:	cmp	x7, x2
    1318:	rbit	x2, x1
    131c:	str	x7, [x6, #1584]
    1320:	clz	x2, x2
    1324:	bic	x1, x1, x0
    1328:	add	x7, x2, #0x1
    132c:	b.eq	1490 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x278>  // b.none
    1330:	mov	x12, #0x0                   	// #0
    1334:	str	xzr, [x9, x7, lsl #3]
    1338:	add	x2, x2, x4
    133c:	add	x2, x2, #0x1
    1340:	ldr	x0, [x10, x2, lsl #3]
    1344:	orr	x0, x0, x12
    1348:	str	x0, [x9, x7, lsl #3]
    134c:	cbz	x1, 14f0 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x2d8>
    1350:	ldr	x2, [x6, #1584]
    1354:	b	1304 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0xec>
    1358:	ldr	x0, [x21, #8]
    135c:	mov	x4, #0x1                   	// #1
    1360:	ldr	x3, [x6, #2104]
    1364:	ands	x0, x3, x0
    1368:	b.eq	13f0 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x1d8>  // b.none
    136c:	rbit	x1, x0
    1370:	clz	x1, x1
    1374:	mov	x2, x1
    1378:	lsl	x1, x4, x1
    137c:	tst	x1, x3
    1380:	bic	x0, x0, x1
    1384:	b.eq	15ec <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x3d4>  // b.none
    1388:	add	x1, x2, #0x1
    138c:	ldr	x2, [x23, x1, lsl #3]
    1390:	ldr	x1, [x7, x1, lsl #3]
    1394:	tst	x2, x1
    1398:	b.eq	15ec <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x3d4>  // b.none
    139c:	ldr	x1, [x22]
    13a0:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    13a4:	add	x0, x0, #0x0
    13a8:	mov	w3, #0x0                   	// #0
    13ac:	ldr	x2, [x20]
    13b0:	ldr	x4, [x1]
    13b4:	cmp	x4, x0
    13b8:	b.ne	162c <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x414>  // b.any
    13bc:	ldr	x1, [x1, #8]
    13c0:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    13c4:	add	x0, x0, #0x0
    13c8:	mov	w4, #0x0                   	// #0
    13cc:	cmp	x1, x0
    13d0:	b.ne	160c <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x3f4>  // b.any
    13d4:	mov	x1, x23
    13d8:	add	x0, x19, #0x10
    13dc:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    13e0:	mov	x2, x20
    13e4:	mov	x1, x22
    13e8:	mov	x0, x19
    13ec:	bl	d50 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE>
    13f0:	dmb	ish
    13f4:	strb	wzr, [x19, #8]
    13f8:	ldr	x23, [sp, #32]
    13fc:	ldp	x21, x22, [sp, #16]
    1400:	ldr	x30, [sp, #40]
    1404:	ldp	x19, x20, [sp], #64
    1408:	ret
    140c:	ldr	x0, [x23, x8, lsl #3]
    1410:	tst	x3, x0
    1414:	b.eq	12dc <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0xc4>  // b.none
    1418:	b	13f0 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x1d8>
    141c:	and	x2, x0, #0xfffffffffffff000
    1420:	cmp	x1, x2
    1424:	b.ne	1254 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x3c>  // b.any
    1428:	ldr	x6, [x21, #1568]
    142c:	cbz	x6, 13fc <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x1e4>
    1430:	ubfx	x3, x0, #6, #6
    1434:	mov	x1, #0x1                   	// #1
    1438:	add	x5, x19, #0x630
    143c:	add	x8, x21, #0x420
    1440:	add	x10, x3, x1
    1444:	lsl	x0, x1, x0
    1448:	lsl	x3, x1, x3
    144c:	mov	w7, #0x208                 	// #520
    1450:	mov	x1, #0x0                   	// #0
    1454:	mov	w9, #0x41                  	// #65
    1458:	lsl	x2, x1, #3
    145c:	ldr	w2, [x8, x2]
    1460:	umull	x4, w2, w7
    1464:	ldr	x4, [x5, x4]
    1468:	tst	x3, x4
    146c:	b.eq	1254 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x3c>  // b.none
    1470:	umaddl	x2, w2, w9, x10
    1474:	ldr	x2, [x5, x2, lsl #3]
    1478:	tst	x0, x2
    147c:	b.eq	1254 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x3c>  // b.none
    1480:	add	x1, x1, #0x1
    1484:	cmp	x6, x1
    1488:	b.ne	1458 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x240>  // b.any
    148c:	b	13fc <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x1e4>
    1490:	ldr	x12, [x9, x7, lsl #3]
    1494:	b	1338 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x120>
    1498:	mov	x4, x1
    149c:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    14a0:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    14a4:	add	x2, x2, #0x0
    14a8:	add	x0, x0, #0x0
    14ac:	mov	w1, #0x6c                  	// #108
    14b0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    14b4:	mov	x3, x0
    14b8:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    14bc:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    14c0:	add	x2, x2, #0x0
    14c4:	add	x0, x0, #0x0
    14c8:	mov	x4, #0x1000                	// #4096
    14cc:	mov	w1, #0x172                 	// #370
    14d0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    14d4:	mov	x3, x1
    14d8:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    14dc:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    14e0:	add	x2, x2, #0x0
    14e4:	add	x0, x0, #0x0
    14e8:	mov	w1, #0x173                 	// #371
    14ec:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    14f0:	add	x7, x19, #0x208, lsl #12
    14f4:	add	x9, x19, #0x208, lsl #12
    14f8:	add	x7, x7, #0x838
    14fc:	add	x9, x9, #0x630
    1500:	str	x5, [x6, #2104]
    1504:	mov	w12, #0x40                  	// #64
    1508:	mov	x13, #0x208                 	// #520
    150c:	mov	x5, #0x1                   	// #1
    1510:	str	x3, [x7, x8, lsl #3]
    1514:	ldr	x0, [x6, #1584]
    1518:	cbz	x0, 1358 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x140>
    151c:	rbit	x1, x0
    1520:	clz	x1, x1
    1524:	add	x3, x1, #0x1
    1528:	lsl	x4, x5, x1
    152c:	bic	x0, x0, x4
    1530:	str	x0, [x6, #1584]
    1534:	ldr	x2, [x9, x3, lsl #3]
    1538:	cbz	x2, 1648 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x430>
    153c:	rbit	x11, x2
    1540:	clz	x11, x11
    1544:	lsl	x8, x5, x11
    1548:	bic	x2, x2, x8
    154c:	str	x2, [x9, x3, lsl #3]
    1550:	cbz	x2, 155c <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x344>
    1554:	orr	x0, x4, x0
    1558:	str	x0, [x6, #1584]
    155c:	sxtw	x11, w11
    1560:	ldr	x3, [x6, #2104]
    1564:	smaddl	x1, w1, w12, x11
    1568:	lsr	x0, x1, #6
    156c:	lsl	x2, x5, x1
    1570:	add	x4, x0, #0x1
    1574:	lsl	x0, x5, x0
    1578:	tst	x3, x0
    157c:	b.ne	15f4 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x3dc>  // b.any
    1580:	orr	x0, x3, x0
    1584:	str	x0, [x6, #2104]
    1588:	str	x2, [x7, x4, lsl #3]
    158c:	mul	x0, x1, x13
    1590:	add	x1, x1, x1, lsl #6
    1594:	ldr	x2, [x10, x0]
    1598:	ldr	x8, [x6, #1584]
    159c:	cbz	x2, 1514 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x2fc>
    15a0:	rbit	x4, x2
    15a4:	clz	x4, x4
    15a8:	mov	x0, x4
    15ac:	add	x3, x0, #0x1
    15b0:	lsl	x4, x5, x4
    15b4:	orr	x11, x4, x8
    15b8:	str	x11, [x6, #1584]
    15bc:	cmp	x11, x8
    15c0:	bic	x2, x2, x4
    15c4:	lsl	x3, x3, #3
    15c8:	b.eq	15d0 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x3b8>  // b.none
    15cc:	str	xzr, [x9, x3]
    15d0:	add	x0, x0, x1
    15d4:	add	x0, x0, #0x1
    15d8:	ldr	x4, [x9, x3]
    15dc:	ldr	x0, [x10, x0, lsl #3]
    15e0:	orr	x0, x4, x0
    15e4:	str	x0, [x9, x3]
    15e8:	b	1598 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x380>
    15ec:	cbnz	x0, 136c <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x154>
    15f0:	b	13f0 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x1d8>
    15f4:	ldr	x0, [x7, x4, lsl #3]
    15f8:	orr	x2, x0, x2
    15fc:	str	x2, [x7, x4, lsl #3]
    1600:	cmp	x0, x2
    1604:	b.eq	1514 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x2fc>  // b.none
    1608:	b	158c <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x374>
    160c:	str	x2, [sp, #48]
    1610:	mov	x0, x22
    1614:	str	w3, [sp, #60]
    1618:	blr	x1
    161c:	mov	w4, w0
    1620:	ldr	w3, [sp, #60]
    1624:	ldr	x2, [sp, #48]
    1628:	b	13d4 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x1bc>
    162c:	str	x2, [sp, #48]
    1630:	mov	x0, x22
    1634:	blr	x4
    1638:	mov	w3, w0
    163c:	ldr	x1, [x22]
    1640:	ldr	x2, [sp, #48]
    1644:	b	13bc <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x1a4>
    1648:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    164c:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    1650:	add	x2, x2, #0x0
    1654:	add	x0, x0, #0x0
    1658:	mov	x4, #0x0                   	// #0
    165c:	mov	x3, #0x0                   	// #0
    1660:	mov	w1, #0x30                  	// #48
    1664:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

Disassembly of section .text._ZN11__sanitizer10DDCallback6UnwindEv:

0000000000000000 <_ZN11__sanitizer10DDCallback6UnwindEv>:
   0:	mov	w0, #0x0                   	// #0
   4:	ret

Disassembly of section .text._ZN11__sanitizer10DDCallback9UniqueTidEv:

0000000000000000 <_ZN11__sanitizer10DDCallback9UniqueTidEv>:
   0:	mov	w0, #0x0                   	// #0
   4:	ret

Disassembly of section .text._ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0:

0000000000000000 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0>:
   0:	stp	x19, x20, [sp, #-112]!
   4:	add	x1, x1, x1, lsl #6
   8:	mov	x19, #0x0                   	// #0
   c:	stp	x21, x22, [sp, #16]
  10:	mov	x22, x0
  14:	add	x21, x1, #0x1
  18:	stp	x23, x24, [sp, #32]
  1c:	mov	x24, x3
  20:	add	x3, x3, #0x8
  24:	stp	x25, x26, [sp, #48]
  28:	sub	x25, x4, #0x1
  2c:	mov	x20, #0x0                   	// #0
  30:	stp	x27, x28, [sp, #64]
  34:	add	x28, x0, x1, lsl #3
  38:	mov	x26, #0x0                   	// #0
  3c:	mov	x23, #0x0                   	// #0
  40:	mov	x27, #0x1                   	// #1
  44:	str	x30, [sp, #80]
  48:	cbnz	x20, f4 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0xf4>
  4c:	cbnz	x23, d4 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0xd4>
  50:	ldr	x0, [x28]
  54:	cbz	x0, d4 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0xd4>
  58:	cbz	x19, 138 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x138>
  5c:	mov	x5, x26
  60:	mov	x20, x23
  64:	rbit	x1, x19
  68:	clz	x1, x1
  6c:	lsl	x0, x27, x1
  70:	bic	x19, x19, x0
  74:	orr	x0, x19, x20
  78:	cbnz	x0, 88 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x88>
  7c:	add	x23, x23, #0x1
  80:	mov	x20, #0x0                   	// #0
  84:	mov	x19, #0x0                   	// #0
  88:	cbz	x25, 48 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x48>
  8c:	sxtw	x1, w1
  90:	add	x1, x1, x5, lsl #6
  94:	str	x1, [x24, #8]
  98:	cmp	x1, #0x1, lsl #12
  9c:	b.hi	1a0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x1a0>  // b.pmore
  a0:	lsr	x0, x1, #12
  a4:	ubfx	x4, x1, #6, #6
  a8:	lsl	x6, x27, x4
  ac:	ldr	x5, [x2, x0, lsl #3]
  b0:	tst	x6, x5
  b4:	b.eq	160 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x160>  // b.none
  b8:	add	x0, x4, x0, lsl #6
  bc:	lsl	x4, x27, x1
  c0:	add	x0, x0, #0x1
  c4:	ldr	x5, [x2, x0, lsl #3]
  c8:	tst	x4, x5
  cc:	b.eq	160 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x160>  // b.none
  d0:	mov	x20, #0x2                   	// #2
  d4:	mov	x0, x20
  d8:	ldp	x21, x22, [sp, #16]
  dc:	ldp	x23, x24, [sp, #32]
  e0:	ldp	x25, x26, [sp, #48]
  e4:	ldp	x27, x28, [sp, #64]
  e8:	ldr	x30, [sp, #80]
  ec:	ldp	x19, x20, [sp], #112
  f0:	ret
  f4:	cbnz	x19, 120 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x120>
  f8:	rbit	x26, x20
  fc:	clz	x26, x26
 100:	add	x5, x26, x23, lsl #6
 104:	mov	x0, x26
 108:	add	x1, x5, x21
 10c:	ldr	x19, [x22, x1, lsl #3]
 110:	cbz	x19, 180 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x180>
 114:	lsl	x0, x27, x0
 118:	bic	x20, x20, x0
 11c:	b	64 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x64>
 120:	rbit	x1, x19
 124:	add	x5, x26, x23, lsl #6
 128:	clz	x1, x1
 12c:	lsl	x0, x27, x1
 130:	bic	x19, x19, x0
 134:	b	88 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x88>
 138:	mov	x20, x0
 13c:	mov	x23, x19
 140:	rbit	x26, x20
 144:	clz	x26, x26
 148:	add	x5, x26, x23, lsl #6
 14c:	mov	x0, x26
 150:	add	x1, x5, x21
 154:	ldr	x19, [x22, x1, lsl #3]
 158:	cbnz	x19, 114 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x114>
 15c:	b	180 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x180>
 160:	mov	x4, x25
 164:	mov	x0, x22
 168:	stp	x2, x3, [sp, #96]
 16c:	bl	0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0>
 170:	ldp	x2, x3, [sp, #96]
 174:	cbz	x0, 48 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x48>
 178:	add	x20, x0, #0x1
 17c:	b	d4 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0xd4>
 180:	adrp	x2, 0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0>
 184:	adrp	x0, 0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0>
 188:	add	x2, x2, #0x0
 18c:	add	x0, x0, #0x0
 190:	mov	x4, #0x0                   	// #0
 194:	mov	x3, #0x0                   	// #0
 198:	mov	w1, #0x132                 	// #306
 19c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 1a0:	mov	x3, x1
 1a4:	adrp	x2, 0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0>
 1a8:	adrp	x0, 0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0>
 1ac:	add	x2, x2, #0x0
 1b0:	add	x0, x0, #0x0
 1b4:	mov	x4, #0x1000                	// #4096
 1b8:	mov	w1, #0x143                 	// #323
 1bc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x20, x0
   8:	mov	w19, #0x0                   	// #0
   c:	stp	x21, x30, [sp, #16]
  10:	mov	w21, #0x1                   	// #1
  14:	nop
  18:	cmp	w19, #0x9
  1c:	b.gt	58 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x58>
  20:	ldrb	w0, [x20]
  24:	tst	w0, #0xff
  28:	b.ne	44 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x44>  // b.any
  2c:	ldxrb	w0, [x20]
  30:	stxrb	w1, w21, [x20]
  34:	cbnz	w1, 2c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x2c>
  38:	dmb	ish
  3c:	tst	w0, #0xff
  40:	b.eq	4c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x4c>  // b.none
  44:	add	w19, w19, #0x1
  48:	b	18 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x18>
  4c:	ldp	x21, x30, [sp, #16]
  50:	ldp	x19, x20, [sp], #32
  54:	ret
  58:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  5c:	b	20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>

Disassembly of section .text._ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji:

0000000000000000 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>:
   0:	stp	x19, x20, [sp, #-352]!
   4:	mov	x8, x0
   8:	ldr	x0, [x0]
   c:	ldr	x5, [x1, #520]
  10:	str	x30, [sp, #16]
  14:	cmp	x0, x5
  18:	b.eq	2c <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x2c>  // b.none
  1c:	str	xzr, [x1]
  20:	str	x0, [x1, #520]
  24:	str	xzr, [x1, #1040]
  28:	str	xzr, [x1, #1560]
  2c:	cmp	x2, #0xfff
  30:	b.ls	bc <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0xbc>  // b.plast
  34:	ldr	x0, [x8]
  38:	and	x5, x2, #0xfffffffffffff000
  3c:	cmp	x0, x5
  40:	b.ne	dc <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0xdc>  // b.any
  44:	ldr	x5, [x1, #520]
  48:	cmp	x5, x0
  4c:	b.ne	fc <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0xfc>  // b.any
  50:	add	x12, x8, #0x208, lsl #12
  54:	str	xzr, [x12, #1568]
  58:	ldr	x5, [x1]
  5c:	cbz	x5, 120 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x120>
  60:	add	x10, x8, #0x208, lsl #12
  64:	mov	x6, #0x0                   	// #0
  68:	add	x10, x10, #0x620
  6c:	mov	x11, #0x1                   	// #1
  70:	rbit	x0, x5
  74:	clz	x0, x0
  78:	lsl	x9, x11, x0
  7c:	orr	x7, x9, x6
  80:	str	x7, [x12, #1568]
  84:	bic	x5, x5, x9
  88:	cmp	x7, x6
  8c:	add	x0, x0, #0x1
  90:	b.eq	b4 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0xb4>  // b.none
  94:	mov	x7, #0x0                   	// #0
  98:	str	xzr, [x10, x0, lsl #3]
  9c:	ldr	x6, [x1, x0, lsl #3]
  a0:	orr	x6, x6, x7
  a4:	str	x6, [x10, x0, lsl #3]
  a8:	cbz	x5, 11c <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x11c>
  ac:	ldr	x6, [x12, #1568]
  b0:	b	70 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x70>
  b4:	ldr	x7, [x10, x0, lsl #3]
  b8:	b	9c <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x9c>
  bc:	mov	x3, x2
  c0:	adrp	x0, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
  c4:	adrp	x2, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
  c8:	add	x0, x0, #0x0
  cc:	add	x2, x2, #0x0
  d0:	mov	x4, #0x1000                	// #4096
  d4:	mov	w1, #0x172                 	// #370
  d8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  dc:	mov	x3, x0
  e0:	adrp	x2, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
  e4:	adrp	x0, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
  e8:	mov	x4, x5
  ec:	add	x2, x2, #0x0
  f0:	add	x0, x0, #0x0
  f4:	mov	w1, #0x173                 	// #371
  f8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  fc:	mov	x4, x0
 100:	adrp	x2, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
 104:	adrp	x0, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
 108:	mov	x3, x5
 10c:	add	x2, x2, #0x0
 110:	add	x0, x0, #0x0
 114:	mov	w1, #0x6c                  	// #108
 118:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 11c:	ldr	x5, [x12, #1568]
 120:	ubfx	x0, x2, #6, #6
 124:	mov	x6, #0x1                   	// #1
 128:	add	x10, x8, #0x208, lsl #12
 12c:	add	x19, x0, x6
 130:	lsl	x16, x6, x0
 134:	mov	x11, x6
 138:	and	x15, x2, #0xfff
 13c:	add	x10, x10, #0x620
 140:	add	x17, x8, #0x620
 144:	add	x30, sp, #0x20
 148:	mov	x0, #0x0                   	// #0
 14c:	lsl	x13, x6, x2
 150:	mov	w20, #0x40                  	// #64
 154:	cbz	x5, 1d0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x1d0>
 158:	rbit	x2, x5
 15c:	clz	x2, x2
 160:	add	x9, x2, #0x1
 164:	lsl	x7, x11, x2
 168:	bic	x5, x5, x7
 16c:	str	x5, [x12, #1568]
 170:	ldr	x6, [x10, x9, lsl #3]
 174:	cbz	x6, 2bc <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x2bc>
 178:	rbit	x18, x6
 17c:	clz	x18, x18
 180:	lsl	x14, x11, x18
 184:	bic	x6, x6, x14
 188:	str	x6, [x10, x9, lsl #3]
 18c:	cbnz	x6, 294 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x294>
 190:	sxtw	x18, w18
 194:	smaddl	x2, w2, w20, x18
 198:	add	x9, x2, x2, lsl #6
 19c:	add	x14, x19, x9
 1a0:	ldr	x5, [x17, x9, lsl #3]
 1a4:	ands	x7, x5, x16
 1a8:	b.ne	2b0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x2b0>  // b.any
 1ac:	mov	x6, x13
 1b0:	orr	x5, x5, x16
 1b4:	str	x5, [x17, x9, lsl #3]
 1b8:	str	x6, [x17, x14, lsl #3]
 1bc:	cmp	x0, #0x27
 1c0:	ccmp	x7, x6, #0x4, ls  // ls = plast
 1c4:	b.ne	2a0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x2a0>  // b.any
 1c8:	ldr	x5, [x12, #1568]
 1cc:	cbnz	x5, 158 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x158>
 1d0:	add	x12, x8, #0x410, lsl #12
 1d4:	mov	x5, #0x1                   	// #1
 1d8:	cbz	x0, 280 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x280>
 1dc:	mov	x16, #0x10a3                	// #4259
 1e0:	and	w15, w15, #0xffff
 1e4:	add	x17, sp, #0x20
 1e8:	add	x11, x1, #0x418
 1ec:	mov	x13, #0x1ffff               	// #131071
 1f0:	movk	x16, #0x2, lsl #16
 1f4:	b	204 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x204>
 1f8:	cmp	x0, x5
 1fc:	add	x5, x5, #0x1
 200:	b.eq	280 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x280>  // b.none
 204:	ldr	x9, [x12, #2608]
 208:	cmp	x9, x13
 20c:	b.hi	1f8 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x1f8>  // b.pmore
 210:	add	x2, x17, x5, lsl #3
 214:	ldr	x10, [x1, #1560]
 218:	ldur	x7, [x2, #-8]
 21c:	and	w14, w7, #0xffff
 220:	cbz	x10, 28c <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x28c>
 224:	mov	x2, #0x0                   	// #0
 228:	b	238 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x238>
 22c:	add	x2, x2, #0x1
 230:	cmp	x2, x10
 234:	b.eq	28c <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x28c>  // b.none
 238:	lsl	x6, x2, #3
 23c:	ldr	w6, [x11, x6]
 240:	cmp	w6, w7
 244:	b.ne	22c <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x22c>  // b.any
 248:	add	x2, x1, x2, lsl #3
 24c:	ldr	w7, [x2, #1052]
 250:	add	x6, x9, x16
 254:	add	x9, x9, #0x1
 258:	str	x9, [x12, #2608]
 25c:	cmp	x0, x5
 260:	lsl	x6, x6, #4
 264:	add	x5, x5, #0x1
 268:	add	x2, x8, x6
 26c:	strh	w14, [x8, x6]
 270:	strh	w15, [x2, #2]
 274:	stp	w7, w3, [x2, #4]
 278:	str	w4, [x2, #12]
 27c:	b.ne	204 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x204>  // b.any
 280:	ldr	x30, [sp, #16]
 284:	ldp	x19, x20, [sp], #352
 288:	ret
 28c:	mov	w7, #0x0                   	// #0
 290:	b	250 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x250>
 294:	orr	x7, x7, x5
 298:	str	x7, [x12, #1568]
 29c:	b	190 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x190>
 2a0:	str	x2, [x30, x0, lsl #3]
 2a4:	add	x0, x0, #0x1
 2a8:	ldr	x5, [x12, #1568]
 2ac:	b	1cc <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x1cc>
 2b0:	ldr	x7, [x17, x14, lsl #3]
 2b4:	orr	x6, x7, x13
 2b8:	b	1b8 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x1b8>
 2bc:	adrp	x2, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
 2c0:	adrp	x0, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
 2c4:	add	x2, x2, #0x0
 2c8:	add	x0, x0, #0x0
 2cc:	mov	x4, #0x0                   	// #0
 2d0:	mov	x3, #0x0                   	// #0
 2d4:	mov	w1, #0x30                  	// #48
 2d8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

Disassembly of section .text._ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm:

0000000000000000 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm>:
   0:	stp	x19, x20, [sp, #-112]!
   4:	stp	x23, x24, [sp, #32]
   8:	mov	x23, x0
   c:	mov	x0, x4
  10:	str	x30, [sp, #80]
  14:	cbnz	x4, 28 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x28>
  18:	ldp	x23, x24, [sp, #32]
  1c:	ldr	x30, [sp, #80]
  20:	ldp	x19, x20, [sp], #112
  24:	ret
  28:	stp	x21, x22, [sp, #16]
  2c:	cmp	x1, #0x1, lsl #12
  30:	mov	x22, x3
  34:	str	x1, [x3]
  38:	b.hi	1e0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x1e0>  // b.pmore
  3c:	lsr	x3, x1, #12
  40:	ubfx	x5, x1, #6, #6
  44:	mov	x4, #0x1                   	// #1
  48:	lsl	x7, x4, x5
  4c:	ldr	x6, [x2, x3, lsl #3]
  50:	tst	x7, x6
  54:	b.eq	7c <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x7c>  // b.none
  58:	add	x3, x5, x3, lsl #6
  5c:	lsl	x5, x4, x1
  60:	add	x3, x3, x4
  64:	ldr	x6, [x2, x3, lsl #3]
  68:	tst	x5, x6
  6c:	b.eq	7c <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x7c>  // b.none
  70:	mov	x0, x4
  74:	ldp	x21, x22, [sp, #16]
  78:	b	18 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x18>
  7c:	add	x1, x1, x1, lsl #6
  80:	sub	x20, x0, #0x1
  84:	add	x3, x22, #0x8
  88:	stp	x27, x28, [sp, #64]
  8c:	add	x19, x23, x1, lsl #3
  90:	add	x28, x1, #0x1
  94:	mov	x21, #0x0                   	// #0
  98:	mov	x24, #0x0                   	// #0
  9c:	mov	x27, #0x1                   	// #1
  a0:	stp	x25, x26, [sp, #48]
  a4:	mov	x26, #0x0                   	// #0
  a8:	mov	x25, #0x0                   	// #0
  ac:	cbnz	x24, 148 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x148>
  b0:	cbnz	x25, 228 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x228>
  b4:	ldr	x0, [x19]
  b8:	cbz	x0, 228 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x228>
  bc:	cbz	x21, 18c <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x18c>
  c0:	mov	x1, x26
  c4:	mov	x24, x25
  c8:	rbit	x0, x21
  cc:	clz	x0, x0
  d0:	lsl	x4, x27, x0
  d4:	bic	x21, x21, x4
  d8:	orr	x4, x24, x21
  dc:	cbnz	x4, ec <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0xec>
  e0:	add	x25, x25, #0x1
  e4:	mov	x21, #0x0                   	// #0
  e8:	mov	x24, #0x0                   	// #0
  ec:	cbz	x20, ac <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0xac>
  f0:	sxtw	x0, w0
  f4:	add	x1, x0, x1, lsl #6
  f8:	str	x1, [x22, #8]
  fc:	cmp	x1, #0x1, lsl #12
 100:	b.hi	1e8 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x1e8>  // b.pmore
 104:	lsr	x0, x1, #12
 108:	ubfx	x4, x1, #6, #6
 10c:	lsl	x6, x27, x4
 110:	ldr	x5, [x2, x0, lsl #3]
 114:	tst	x6, x5
 118:	b.eq	1b4 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x1b4>  // b.none
 11c:	add	x0, x4, x0, lsl #6
 120:	lsl	x4, x27, x1
 124:	add	x0, x0, #0x1
 128:	ldr	x5, [x2, x0, lsl #3]
 12c:	tst	x4, x5
 130:	b.eq	1b4 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x1b4>  // b.none
 134:	mov	x0, #0x2                   	// #2
 138:	ldp	x21, x22, [sp, #16]
 13c:	ldp	x25, x26, [sp, #48]
 140:	ldp	x27, x28, [sp, #64]
 144:	b	18 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x18>
 148:	cbnz	x21, 174 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x174>
 14c:	rbit	x26, x24
 150:	clz	x26, x26
 154:	add	x1, x26, x25, lsl #6
 158:	mov	x0, x26
 15c:	add	x4, x1, x28
 160:	ldr	x21, [x23, x4, lsl #3]
 164:	cbz	x21, 208 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x208>
 168:	lsl	x0, x27, x0
 16c:	bic	x24, x24, x0
 170:	b	c8 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0xc8>
 174:	rbit	x0, x21
 178:	add	x1, x26, x25, lsl #6
 17c:	clz	x0, x0
 180:	lsl	x4, x27, x0
 184:	bic	x21, x21, x4
 188:	b	ec <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0xec>
 18c:	mov	x25, x24
 190:	mov	x24, x0
 194:	rbit	x26, x24
 198:	clz	x26, x26
 19c:	add	x1, x26, x25, lsl #6
 1a0:	mov	x0, x26
 1a4:	add	x4, x1, x28
 1a8:	ldr	x21, [x23, x4, lsl #3]
 1ac:	cbnz	x21, 168 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x168>
 1b0:	b	208 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x208>
 1b4:	mov	x4, x20
 1b8:	mov	x0, x23
 1bc:	stp	x2, x3, [sp, #96]
 1c0:	bl	0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm>
 1c4:	ldp	x2, x3, [sp, #96]
 1c8:	cbz	x0, ac <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0xac>
 1cc:	add	x0, x0, #0x1
 1d0:	ldp	x21, x22, [sp, #16]
 1d4:	ldp	x25, x26, [sp, #48]
 1d8:	ldp	x27, x28, [sp, #64]
 1dc:	b	18 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x18>
 1e0:	stp	x25, x26, [sp, #48]
 1e4:	stp	x27, x28, [sp, #64]
 1e8:	mov	x3, x1
 1ec:	adrp	x2, 0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm>
 1f0:	adrp	x0, 0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm>
 1f4:	add	x2, x2, #0x0
 1f8:	add	x0, x0, #0x0
 1fc:	mov	x4, #0x1000                	// #4096
 200:	mov	w1, #0x143                 	// #323
 204:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 208:	adrp	x2, 0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm>
 20c:	adrp	x0, 0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm>
 210:	add	x2, x2, #0x0
 214:	add	x0, x0, #0x0
 218:	mov	x4, #0x0                   	// #0
 21c:	mov	x3, #0x0                   	// #0
 220:	mov	w1, #0x132                 	// #306
 224:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 228:	mov	x0, #0x0                   	// #0
 22c:	ldp	x21, x22, [sp, #16]
 230:	ldp	x25, x26, [sp, #48]
 234:	ldp	x27, x28, [sp, #64]
 238:	b	18 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x18>

sanitizer_deadlock_detector2.o:     file format elf64-littleaarch64


sanitizer_errno.o:     file format elf64-littleaarch64


sanitizer_file.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>:
   0:	mov	x2, x1
   4:	mov	x4, #0x0                   	// #0
   8:	mov	x1, x0
   c:	mov	x3, #0x0                   	// #0
  10:	mov	w0, #0x2                   	// #2
  14:	b	0 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi>

0000000000000018 <_ZN11__sanitizer8RawWriteEPKc>:
  18:	stp	x19, x30, [sp, #-16]!
  1c:	mov	x19, x0
  20:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
  24:	mov	x2, x0
  28:	mov	x1, x19
  2c:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
  30:	ldp	x19, x30, [sp], #16
  34:	add	x0, x0, #0x0
  38:	b	0 <_ZN11__sanitizer10ReportFile5WriteEPKcm>
  3c:	nop

0000000000000040 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv>:
  40:	stp	x19, x20, [sp, #-32]!
  44:	mov	x19, x0
  48:	ldr	x0, [x0]
  4c:	str	x30, [sp, #24]
  50:	ldrb	w3, [x0]
  54:	and	x3, x3, #0xff
  58:	cmp	x3, #0x1
  5c:	b.ne	160 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0x120>  // b.any
  60:	ldr	w0, [x19, #8]
  64:	sub	w0, w0, #0x1
  68:	cmp	w0, #0x1
  6c:	b.ls	118 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0xd8>  // b.plast
  70:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
  74:	mov	x20, x0
  78:	adrp	x1, 0 <_ZN11__sanitizer23stoptheworld_tracer_pidE>
  7c:	ldr	x1, [x1]
  80:	ldr	x0, [x1]
  84:	cmp	x0, x20
  88:	b.eq	124 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0xe4>  // b.none
  8c:	ldr	w0, [x19, #8]
  90:	cmn	w0, #0x1
  94:	b.eq	13c <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0xfc>  // b.none
  98:	ldr	x1, [x19, #8208]
  9c:	cmp	x1, x20
  a0:	b.eq	118 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0xd8>  // b.none
  a4:	str	x21, [sp, #16]
  a8:	bl	0 <_ZN11__sanitizer9CloseFileEi>
  ac:	bl	0 <_ZN11__sanitizer14GetProcessNameEv>
  b0:	cmp	x0, #0x0
  b4:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  b8:	mov	x4, x0
  bc:	mov	x0, #0x100c                	// #4108
  c0:	add	x21, x19, x0
  c4:	ldr	x0, [x1]
  c8:	cset	w1, ne  // ne = any
  cc:	add	x3, x19, #0xc
  d0:	ldrb	w0, [x0, #48]
  d4:	tst	w1, w0
  d8:	b.ne	144 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0x104>  // b.any
  dc:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
  e0:	mov	x4, x20
  e4:	add	x2, x2, #0x0
  e8:	mov	x0, x21
  ec:	mov	x1, #0x1000                	// #4096
  f0:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
  f4:	mov	x0, x21
  f8:	mov	x2, #0x0                   	// #0
  fc:	mov	w1, #0x1                   	// #1
 100:	bl	0 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi>
 104:	str	w0, [x19, #8]
 108:	cmn	w0, #0x1
 10c:	b.eq	180 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0x140>  // b.none
 110:	ldr	x21, [sp, #16]
 114:	str	x20, [x19, #8208]
 118:	ldr	x30, [sp, #24]
 11c:	ldp	x19, x20, [sp], #32
 120:	ret
 124:	adrp	x0, 0 <_ZN11__sanitizer24stoptheworld_tracer_ppidE>
 128:	ldr	x0, [x0]
 12c:	ldr	x20, [x0]
 130:	ldr	w0, [x19, #8]
 134:	cmn	w0, #0x1
 138:	b.ne	98 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0x58>  // b.any
 13c:	str	x21, [sp, #16]
 140:	b	ac <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0x6c>
 144:	mov	x5, x20
 148:	mov	x0, x21
 14c:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 150:	mov	x1, #0x1000                	// #4096
 154:	add	x2, x2, #0x0
 158:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 15c:	b	f4 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0xb4>
 160:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 164:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 168:	add	x2, x2, #0x0
 16c:	add	x0, x0, #0x0
 170:	mov	x4, #0x1                   	// #1
 174:	mov	w1, #0x2a                  	// #42
 178:	str	x21, [sp, #16]
 17c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 180:	adrp	x19, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 184:	add	x19, x19, #0x0
 188:	mov	x0, x19
 18c:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 190:	mov	x1, x19
 194:	mov	x2, x0
 198:	mov	x4, #0x0                   	// #0
 19c:	mov	x3, #0x0                   	// #0
 1a0:	mov	w0, #0x2                   	// #2
 1a4:	bl	0 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi>
 1a8:	mov	x0, x21
 1ac:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 1b0:	mov	x1, x21
 1b4:	mov	x2, x0
 1b8:	mov	x4, #0x0                   	// #0
 1bc:	mov	x3, #0x0                   	// #0
 1c0:	mov	w0, #0x2                   	// #2
 1c4:	bl	0 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi>
 1c8:	bl	0 <_ZN11__sanitizer3DieEv>
 1cc:	nop

00000000000001d0 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc>:
 1d0:	cbz	x1, 2c4 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0xf4>
 1d4:	sub	sp, sp, #0x30
 1d8:	stp	x19, x20, [sp, #16]
 1dc:	mov	x19, x0
 1e0:	mov	x20, x1
 1e4:	mov	x0, x1
 1e8:	stp	x21, x30, [sp, #32]
 1ec:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 1f0:	cmp	x0, #0xf9c
 1f4:	b.hi	2e4 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0x114>  // b.pmore
 1f8:	ldr	x21, [x19]
 1fc:	mov	w1, #0x1                   	// #1
 200:	ldxrb	w0, [x21]
 204:	stxrb	w2, w1, [x21]
 208:	cbnz	w2, 200 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0x30>
 20c:	dmb	ish
 210:	tst	w0, #0xff
 214:	b.eq	220 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0x50>  // b.none
 218:	mov	x0, x21
 21c:	bl	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 220:	ldr	w0, [x19, #8]
 224:	sub	w1, w0, #0x1
 228:	cmp	w1, #0x1
 22c:	ccmn	w0, #0x1, #0x4, hi  // hi = pmore
 230:	b.ne	270 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0xa0>  // b.any
 234:	mov	w0, #0xffffffff            	// #-1
 238:	str	w0, [x19, #8]
 23c:	adrp	x1, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 240:	mov	x0, x20
 244:	add	x1, x1, #0x0
 248:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 24c:	cbnz	w0, 290 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0xc0>
 250:	mov	w0, #0x1                   	// #1
 254:	str	w0, [x19, #8]
 258:	dmb	ish
 25c:	strb	wzr, [x21]
 260:	ldp	x19, x20, [sp, #16]
 264:	ldp	x21, x30, [sp, #32]
 268:	add	sp, sp, #0x30
 26c:	ret
 270:	bl	0 <_ZN11__sanitizer9CloseFileEi>
 274:	mov	w0, #0xffffffff            	// #-1
 278:	str	w0, [x19, #8]
 27c:	adrp	x1, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 280:	mov	x0, x20
 284:	add	x1, x1, #0x0
 288:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 28c:	cbz	w0, 250 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0x80>
 290:	adrp	x1, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 294:	mov	x0, x20
 298:	add	x1, x1, #0x0
 29c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 2a0:	cbnz	w0, 2c8 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0xf8>
 2a4:	mov	w0, #0x2                   	// #2
 2a8:	str	w0, [x19, #8]
 2ac:	dmb	ish
 2b0:	strb	wzr, [x21]
 2b4:	ldp	x19, x20, [sp, #16]
 2b8:	ldp	x21, x30, [sp, #32]
 2bc:	add	sp, sp, #0x30
 2c0:	ret
 2c4:	ret
 2c8:	mov	x3, x20
 2cc:	add	x0, x19, #0xc
 2d0:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 2d4:	mov	x1, #0x1000                	// #4096
 2d8:	add	x2, x2, #0x0
 2dc:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 2e0:	b	258 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0x88>
 2e4:	ldrb	w7, [x20, #6]
 2e8:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 2ec:	ldrb	w6, [x20, #5]
 2f0:	add	x0, x0, #0x0
 2f4:	ldrb	w5, [x20, #4]
 2f8:	ldrb	w4, [x20, #3]
 2fc:	ldrb	w3, [x20, #2]
 300:	ldrb	w2, [x20, #1]
 304:	ldrb	w1, [x20]
 308:	ldrb	w8, [x20, #7]
 30c:	str	w8, [sp]
 310:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 314:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000318 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>:
 318:	stp	x19, x20, [sp, #-128]!
 31c:	mov	w19, #0x1                   	// #1
 320:	str	x30, [sp, #80]
 324:	str	xzr, [x1]
 328:	str	xzr, [x2]
 32c:	str	xzr, [x3]
 330:	cbz	x4, 43c <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x124>
 334:	adrp	x19, 0 <_ZN11__sanitizer14PageSizeCachedE>
 338:	stp	x21, x22, [sp, #16]
 33c:	mov	x21, x1
 340:	ldr	x19, [x19]
 344:	stp	x23, x24, [sp, #32]
 348:	mov	x22, x4
 34c:	stp	x25, x26, [sp, #48]
 350:	mov	x23, x5
 354:	mov	x26, x0
 358:	ldr	x20, [x19]
 35c:	stp	x27, x28, [sp, #64]
 360:	mov	x25, x2
 364:	mov	x28, x3
 368:	mov	x0, #0x0                   	// #0
 36c:	cbz	x20, 478 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x160>
 370:	cmp	x20, x22
 374:	add	x24, sp, #0x78
 378:	csel	x20, x20, x22, ls  // ls = plast
 37c:	adrp	x27, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 380:	add	x1, x27, #0x0
 384:	str	x1, [sp, #104]
 388:	ldr	x1, [x25]
 38c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 390:	ldr	x1, [sp, #104]
 394:	mov	w2, #0x0                   	// #0
 398:	mov	x0, x20
 39c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 3a0:	str	x0, [x21]
 3a4:	str	x20, [x25]
 3a8:	mov	x2, x23
 3ac:	mov	x0, x26
 3b0:	mov	w1, #0x0                   	// #0
 3b4:	bl	0 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi>
 3b8:	mov	w27, w0
 3bc:	cmn	w0, #0x1
 3c0:	b.eq	48c <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x174>  // b.none
 3c4:	str	xzr, [x28]
 3c8:	mov	x1, #0x0                   	// #0
 3cc:	cbnz	x20, 3dc <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0xc4>
 3d0:	b	44c <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x134>
 3d4:	cmp	x1, x20
 3d8:	b.cs	44c <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x134>  // b.hs, b.nlast
 3dc:	ldr	x5, [x21]
 3e0:	sub	x2, x20, x1
 3e4:	mov	x4, x23
 3e8:	mov	x3, x24
 3ec:	mov	w0, w27
 3f0:	add	x1, x5, x1
 3f4:	bl	0 <_ZN11__sanitizer12ReadFromFileEiPvmPmPi>
 3f8:	ands	w19, w0, #0xff
 3fc:	b.eq	468 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x150>  // b.none
 400:	ldr	x1, [x28]
 404:	ldr	x2, [sp, #120]
 408:	add	x1, x2, x1
 40c:	str	x1, [x28]
 410:	cmp	x1, x22
 414:	cset	w19, eq  // eq = none
 418:	cmp	x2, #0x0
 41c:	csinc	w19, w19, wzr, ne  // ne = any
 420:	cbz	w19, 3d4 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0xbc>
 424:	mov	w0, w27
 428:	bl	0 <_ZN11__sanitizer9CloseFileEi>
 42c:	ldp	x21, x22, [sp, #16]
 430:	ldp	x23, x24, [sp, #32]
 434:	ldp	x25, x26, [sp, #48]
 438:	ldp	x27, x28, [sp, #64]
 43c:	mov	w0, w19
 440:	ldr	x30, [sp, #80]
 444:	ldp	x19, x20, [sp], #128
 448:	ret
 44c:	mov	w0, w27
 450:	lsl	x20, x20, #1
 454:	bl	0 <_ZN11__sanitizer9CloseFileEi>
 458:	cmp	x20, x22
 45c:	csel	x20, x20, x22, ls  // ls = plast
 460:	ldr	x0, [x21]
 464:	b	388 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x70>
 468:	ldr	x0, [x21]
 46c:	ldr	x1, [x25]
 470:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 474:	b	424 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x10c>
 478:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 47c:	mov	x20, x0
 480:	ldr	x0, [x21]
 484:	str	x20, [x19]
 488:	b	370 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x58>
 48c:	ldr	x0, [x21]
 490:	mov	w19, #0x0                   	// #0
 494:	ldr	x1, [x25]
 498:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 49c:	ldp	x21, x22, [sp, #16]
 4a0:	ldp	x23, x24, [sp, #32]
 4a4:	ldp	x25, x26, [sp, #48]
 4a8:	ldp	x27, x28, [sp, #64]
 4ac:	b	43c <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x124>

00000000000004b0 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi>:
 4b0:	stp	x19, x20, [sp, #-144]!
 4b4:	stp	x27, x28, [sp, #64]
 4b8:	str	x30, [sp, #80]
 4bc:	str	xzr, [x1, #16]
 4c0:	cbz	x2, 63c <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x18c>
 4c4:	stp	x25, x26, [sp, #48]
 4c8:	adrp	x25, 0 <_ZN11__sanitizer14PageSizeCachedE>
 4cc:	mov	x20, x1
 4d0:	stp	x23, x24, [sp, #32]
 4d4:	mov	x19, x0
 4d8:	ldr	x24, [x25]
 4dc:	stp	x21, x22, [sp, #16]
 4e0:	mov	x21, x2
 4e4:	mov	x22, x3
 4e8:	ldr	x23, [x24]
 4ec:	cbz	x23, 5f0 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x140>
 4f0:	mov	x0, x19
 4f4:	mov	x2, x22
 4f8:	mov	w1, #0x0                   	// #0
 4fc:	bl	0 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi>
 500:	mov	w27, w0
 504:	cmn	w0, #0x1
 508:	b.eq	618 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x168>  // b.none
 50c:	ldr	x0, [x25]
 510:	str	x0, [sp, #104]
 514:	ldr	x3, [x20, #16]
 518:	adrp	x26, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 51c:	mov	x19, #0x0                   	// #0
 520:	add	x24, sp, #0x88
 524:	add	x26, x26, #0x0
 528:	cmp	x3, x19
 52c:	b.ls	580 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0xd0>  // b.plast
 530:	cmp	x3, x21
 534:	b.hi	5d4 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x124>  // b.pmore
 538:	ldr	x1, [x20]
 53c:	sub	x2, x3, x19
 540:	mov	x4, x22
 544:	mov	x3, x24
 548:	mov	w0, w27
 54c:	add	x1, x1, x19
 550:	bl	0 <_ZN11__sanitizer12ReadFromFileEiPvmPmPi>
 554:	ands	w28, w0, #0xff
 558:	b.eq	738 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x288>  // b.none
 55c:	ldr	x1, [sp, #136]
 560:	add	x3, x1, x19
 564:	cbz	x1, 6dc <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x22c>
 568:	cmp	x21, x3
 56c:	b.ls	6e0 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x230>  // b.plast
 570:	mov	x19, x3
 574:	ldr	x3, [x20, #16]
 578:	cmp	x3, x19
 57c:	b.hi	530 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x80>  // b.pmore
 580:	lsl	x28, x19, #1
 584:	cmp	x28, x23
 588:	csel	x28, x28, x23, cs  // cs = hs, nlast
 58c:	cmp	x28, x21
 590:	csel	x28, x28, x21, ls  // ls = plast
 594:	cmp	x28, x3
 598:	b.ls	654 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x1a4>  // b.plast
 59c:	ldr	x0, [x20, #8]
 5a0:	cmp	x28, x0
 5a4:	b.hi	678 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x1c8>  // b.pmore
 5a8:	ldr	x4, [x20]
 5ac:	add	x0, x4, x3
 5b0:	sub	x2, x28, x3
 5b4:	mov	w1, #0x0                   	// #0
 5b8:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 5bc:	str	x28, [x20, #16]
 5c0:	cmp	x28, x19
 5c4:	b.ls	658 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x1a8>  // b.plast
 5c8:	mov	x3, x28
 5cc:	cmp	x3, x21
 5d0:	b.ls	538 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x88>  // b.plast
 5d4:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 5d8:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 5dc:	mov	x4, x21
 5e0:	add	x2, x2, #0x0
 5e4:	add	x0, x0, #0x0
 5e8:	mov	w1, #0x99                  	// #153
 5ec:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 5f0:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 5f4:	mov	x23, x0
 5f8:	mov	x2, x22
 5fc:	mov	w1, #0x0                   	// #0
 600:	str	x0, [x24]
 604:	mov	x0, x19
 608:	bl	0 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi>
 60c:	mov	w27, w0
 610:	cmn	w0, #0x1
 614:	b.ne	50c <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x5c>  // b.any
 618:	mov	w28, #0x0                   	// #0
 61c:	mov	w0, w28
 620:	ldp	x21, x22, [sp, #16]
 624:	ldp	x23, x24, [sp, #32]
 628:	ldp	x25, x26, [sp, #48]
 62c:	ldp	x27, x28, [sp, #64]
 630:	ldr	x30, [sp, #80]
 634:	ldp	x19, x20, [sp], #144
 638:	ret
 63c:	mov	w28, #0x1                   	// #1
 640:	mov	w0, w28
 644:	ldp	x27, x28, [sp, #64]
 648:	ldr	x30, [sp, #80]
 64c:	ldp	x19, x20, [sp], #144
 650:	ret
 654:	str	x28, [x20, #16]
 658:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 65c:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 660:	mov	x4, x28
 664:	mov	x3, x19
 668:	add	x2, x2, #0x0
 66c:	add	x0, x0, #0x0
 670:	mov	w1, #0x98                  	// #152
 674:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 678:	cbz	x28, 7c8 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x318>
 67c:	ldr	x0, [sp, #104]
 680:	ldr	x0, [x0]
 684:	cbz	x0, 750 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x2a0>
 688:	sub	x1, x0, #0x1
 68c:	tst	x0, x1
 690:	b.ne	7e8 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x338>  // b.any
 694:	add	x1, x28, x1
 698:	neg	x0, x0
 69c:	and	x6, x1, x0
 6a0:	mov	w2, #0x0                   	// #0
 6a4:	mov	x0, x6
 6a8:	mov	x1, x26
 6ac:	str	x6, [sp, #120]
 6b0:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 6b4:	str	x0, [sp, #112]
 6b8:	ldr	x1, [x20]
 6bc:	ldr	x2, [x20, #16]
 6c0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 6c4:	ldp	x0, x1, [x20]
 6c8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 6cc:	ldp	x4, x6, [sp, #112]
 6d0:	stp	x4, x6, [x20]
 6d4:	ldr	x3, [x20, #16]
 6d8:	b	5ac <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0xfc>
 6dc:	mov	x3, x19
 6e0:	mov	w0, w27
 6e4:	str	x3, [sp, #104]
 6e8:	bl	0 <_ZN11__sanitizer9CloseFileEi>
 6ec:	ldr	x2, [x20, #16]
 6f0:	ldr	x3, [sp, #104]
 6f4:	cmp	x3, x2
 6f8:	b.ls	724 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x274>  // b.plast
 6fc:	ldr	x0, [x20, #8]
 700:	cmp	x3, x0
 704:	b.hi	760 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x2b0>  // b.pmore
 708:	ldr	x19, [x20]
 70c:	add	x0, x19, x2
 710:	mov	w1, #0x0                   	// #0
 714:	sub	x2, x3, x2
 718:	str	x3, [sp, #104]
 71c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 720:	ldr	x3, [sp, #104]
 724:	ldp	x21, x22, [sp, #16]
 728:	ldp	x23, x24, [sp, #32]
 72c:	ldp	x25, x26, [sp, #48]
 730:	str	x3, [x20, #16]
 734:	b	640 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x190>
 738:	mov	w0, w27
 73c:	bl	0 <_ZN11__sanitizer9CloseFileEi>
 740:	ldp	x21, x22, [sp, #16]
 744:	ldp	x23, x24, [sp, #32]
 748:	ldp	x25, x26, [sp, #48]
 74c:	b	640 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x190>
 750:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 754:	ldr	x1, [sp, #104]
 758:	str	x0, [x1]
 75c:	b	688 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x1d8>
 760:	cbz	x3, 7c8 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x318>
 764:	ldr	x25, [x25]
 768:	ldr	x0, [x25]
 76c:	cbz	x0, 7f8 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x348>
 770:	sub	x1, x0, #0x1
 774:	tst	x0, x1
 778:	b.ne	7e8 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x338>  // b.any
 77c:	add	x1, x3, x1
 780:	neg	x0, x0
 784:	and	x21, x1, x0
 788:	mov	w2, #0x0                   	// #0
 78c:	mov	x0, x21
 790:	adrp	x1, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 794:	add	x1, x1, #0x0
 798:	str	x3, [sp, #104]
 79c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 7a0:	mov	x19, x0
 7a4:	ldr	x1, [x20]
 7a8:	ldr	x2, [x20, #16]
 7ac:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 7b0:	ldp	x0, x1, [x20]
 7b4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 7b8:	stp	x19, x21, [x20]
 7bc:	ldr	x2, [x20, #16]
 7c0:	ldr	x3, [sp, #104]
 7c4:	b	70c <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x25c>
 7c8:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 7cc:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 7d0:	add	x2, x2, #0x0
 7d4:	add	x0, x0, #0x0
 7d8:	mov	x4, #0x0                   	// #0
 7dc:	mov	x3, #0x0                   	// #0
 7e0:	mov	w1, #0x1fc                 	// #508
 7e4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 7e8:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 7ec:	add	x0, x0, #0x0
 7f0:	bl	18 <_ZN11__sanitizer8RawWriteEPKc>
 7f4:	bl	0 <_ZN11__sanitizer3DieEv>
 7f8:	str	x3, [sp, #104]
 7fc:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 800:	str	x0, [x25]
 804:	ldr	x3, [sp, #104]
 808:	b	770 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x2c0>
 80c:	nop

0000000000000810 <_ZN11__sanitizer16FindPathToBinaryEPKc>:
 810:	stp	x19, x20, [sp, #-80]!
 814:	stp	x23, x24, [sp, #32]
 818:	mov	x23, x0
 81c:	str	x30, [sp, #72]
 820:	bl	0 <_ZN11__sanitizer10FileExistsEPKc>
 824:	tst	w0, #0xff
 828:	b.eq	840 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x30>  // b.none
 82c:	mov	x0, x23
 830:	ldp	x23, x24, [sp, #32]
 834:	ldr	x30, [sp, #72]
 838:	ldp	x19, x20, [sp], #80
 83c:	b	0 <_ZN11__sanitizer15internal_strdupEPKc>
 840:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 844:	add	x0, x0, #0x0
 848:	stp	x21, x22, [sp, #16]
 84c:	bl	0 <_ZN11__sanitizer6GetEnvEPKc>
 850:	mov	x21, x0
 854:	cbz	x0, 990 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x180>
 858:	adrp	x19, 0 <_ZN11__sanitizer14PageSizeCachedE>
 85c:	mov	x0, x23
 860:	stp	x25, x26, [sp, #48]
 864:	str	x27, [sp, #64]
 868:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 86c:	ldr	x20, [x19]
 870:	mov	x24, x0
 874:	ldr	x0, [x20]
 878:	cbz	x0, 9a8 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x198>
 87c:	sub	x1, x0, #0x1
 880:	tst	x1, x0
 884:	b.ne	a6c <_ZN11__sanitizer16FindPathToBinaryEPKc+0x25c>  // b.any
 888:	add	x25, x0, #0xfff
 88c:	neg	x0, x0
 890:	and	x25, x25, x0
 894:	mov	w2, #0x0                   	// #0
 898:	mov	x0, x25
 89c:	adrp	x20, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 8a0:	add	x1, x20, #0x0
 8a4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 8a8:	mov	x2, #0x0                   	// #0
 8ac:	mov	x1, #0x0                   	// #0
 8b0:	mov	x22, x0
 8b4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 8b8:	mov	x1, #0x0                   	// #0
 8bc:	mov	x0, #0x0                   	// #0
 8c0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 8c4:	cmp	x25, #0xfff
 8c8:	b.ls	a10 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x200>  // b.plast
 8cc:	mov	x0, x22
 8d0:	mov	w26, #0x2f                  	// #47
 8d4:	mov	x2, #0x1000                	// #4096
 8d8:	mov	w1, #0x0                   	// #0
 8dc:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 8e0:	b	8f0 <_ZN11__sanitizer16FindPathToBinaryEPKc+0xe0>
 8e4:	ldrb	w0, [x19]
 8e8:	cbz	w0, 978 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x168>
 8ec:	add	x21, x19, #0x1
 8f0:	mov	x0, x21
 8f4:	mov	w1, #0x3a                  	// #58
 8f8:	bl	0 <_ZN11__sanitizer18internal_strchrnulEPKci>
 8fc:	sub	x20, x0, x21
 900:	add	x27, x24, x20
 904:	mov	x19, x0
 908:	add	x0, x27, #0x2
 90c:	cmp	x0, #0x1, lsl #12
 910:	b.hi	8e4 <_ZN11__sanitizer16FindPathToBinaryEPKc+0xd4>  // b.pmore
 914:	mov	x1, x21
 918:	mov	x2, x20
 91c:	mov	x0, x22
 920:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 924:	cmp	x20, #0xfff
 928:	b.hi	9b4 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x1a4>  // b.pmore
 92c:	strb	w26, [x22, x20]
 930:	add	x4, x20, #0x1
 934:	b.eq	9d4 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x1c4>  // b.none
 938:	add	x0, x22, x4
 93c:	mov	x2, x24
 940:	mov	x1, x23
 944:	add	x27, x27, #0x1
 948:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 94c:	cmp	x27, #0xfff
 950:	b.hi	9f0 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x1e0>  // b.pmore
 954:	strb	wzr, [x22, x27]
 958:	mov	x0, x22
 95c:	bl	0 <_ZN11__sanitizer10FileExistsEPKc>
 960:	tst	w0, #0xff
 964:	b.eq	8e4 <_ZN11__sanitizer16FindPathToBinaryEPKc+0xd4>  // b.none
 968:	mov	x0, x22
 96c:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 970:	mov	x21, x0
 974:	b	97c <_ZN11__sanitizer16FindPathToBinaryEPKc+0x16c>
 978:	mov	x21, #0x0                   	// #0
 97c:	mov	x1, x25
 980:	mov	x0, x22
 984:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 988:	ldp	x25, x26, [sp, #48]
 98c:	ldr	x27, [sp, #64]
 990:	mov	x0, x21
 994:	ldp	x21, x22, [sp, #16]
 998:	ldp	x23, x24, [sp, #32]
 99c:	ldr	x30, [sp, #72]
 9a0:	ldp	x19, x20, [sp], #80
 9a4:	ret
 9a8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 9ac:	str	x0, [x20]
 9b0:	b	87c <_ZN11__sanitizer16FindPathToBinaryEPKc+0x6c>
 9b4:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 9b8:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 9bc:	mov	x3, x20
 9c0:	add	x2, x2, #0x0
 9c4:	add	x0, x0, #0x0
 9c8:	mov	x4, #0x1000                	// #4096
 9cc:	mov	w1, #0x1b6                 	// #438
 9d0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 9d4:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 9d8:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 9dc:	add	x2, x2, #0x0
 9e0:	add	x0, x0, #0x0
 9e4:	mov	x3, x4
 9e8:	mov	w1, #0x1b6                 	// #438
 9ec:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 9f0:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 9f4:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 9f8:	add	x2, x2, #0x0
 9fc:	add	x0, x0, #0x0
 a00:	mov	x4, #0x1000                	// #4096
 a04:	mov	x3, #0xffffffffffffffff    	// #-1
 a08:	mov	w1, #0x1b6                 	// #438
 a0c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 a10:	ldr	x19, [x19]
 a14:	ldr	x0, [x19]
 a18:	cbz	x0, a7c <_ZN11__sanitizer16FindPathToBinaryEPKc+0x26c>
 a1c:	sub	x1, x0, #0x1
 a20:	tst	x1, x0
 a24:	b.ne	a6c <_ZN11__sanitizer16FindPathToBinaryEPKc+0x25c>  // b.any
 a28:	add	x19, x0, #0xfff
 a2c:	neg	x0, x0
 a30:	and	x19, x19, x0
 a34:	add	x1, x20, #0x0
 a38:	mov	x0, x19
 a3c:	mov	w2, #0x0                   	// #0
 a40:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 a44:	mov	x20, x0
 a48:	mov	x2, #0x0                   	// #0
 a4c:	mov	x1, x22
 a50:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 a54:	mov	x1, x25
 a58:	mov	x0, x22
 a5c:	mov	x25, x19
 a60:	mov	x22, x20
 a64:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 a68:	b	8cc <_ZN11__sanitizer16FindPathToBinaryEPKc+0xbc>
 a6c:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 a70:	add	x0, x0, #0x0
 a74:	bl	18 <_ZN11__sanitizer8RawWriteEPKc>
 a78:	bl	0 <_ZN11__sanitizer3DieEv>
 a7c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 a80:	str	x0, [x19]
 a84:	b	a1c <_ZN11__sanitizer16FindPathToBinaryEPKc+0x20c>

0000000000000a88 <__sanitizer_set_report_path>:
 a88:	mov	x1, x0
 a8c:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 a90:	add	x0, x2, #0x0
 a94:	b	1d0 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc>

0000000000000a98 <__sanitizer_set_report_fd>:
 a98:	stp	x19, x30, [sp, #-16]!
 a9c:	adrp	x19, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 aa0:	add	x19, x19, #0x0
 aa4:	str	w0, [x19, #8]
 aa8:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
 aac:	str	x0, [x19, #8208]
 ab0:	ldp	x19, x30, [sp], #16
 ab4:	ret

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x20, x0
   8:	mov	w19, #0x0                   	// #0
   c:	stp	x21, x30, [sp, #16]
  10:	mov	w21, #0x1                   	// #1
  14:	nop
  18:	cmp	w19, #0x9
  1c:	b.gt	58 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x58>
  20:	ldrb	w0, [x20]
  24:	tst	w0, #0xff
  28:	b.ne	44 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x44>  // b.any
  2c:	ldxrb	w0, [x20]
  30:	stxrb	w1, w21, [x20]
  34:	cbnz	w1, 2c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x2c>
  38:	dmb	ish
  3c:	tst	w0, #0xff
  40:	b.eq	4c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x4c>  // b.none
  44:	add	w19, w19, #0x1
  48:	b	18 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x18>
  4c:	ldp	x21, x30, [sp, #16]
  50:	ldp	x19, x20, [sp], #32
  54:	ret
  58:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  5c:	b	20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>

sanitizer_flag_parser.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	stp	x21, x22, [sp, #16]
   8:	adrp	x21, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
   c:	add	x19, x21, #0x0
  10:	str	x30, [sp, #32]
  14:	ldr	w1, [x19, #160]
  18:	cbnz	w1, 2c <_ZN11__sanitizer23ReportUnrecognizedFlagsEv+0x2c>
  1c:	ldp	x21, x22, [sp, #16]
  20:	ldr	x30, [sp, #32]
  24:	ldp	x19, x20, [sp], #48
  28:	ret
  2c:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
  30:	add	x0, x0, #0x0
  34:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  38:	ldr	w0, [x19, #160]
  3c:	cmp	w0, #0x0
  40:	b.le	6c <_ZN11__sanitizer23ReportUnrecognizedFlagsEv+0x6c>
  44:	adrp	x22, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
  48:	add	x22, x22, #0x0
  4c:	mov	x20, #0x0                   	// #0
  50:	ldr	x1, [x19, x20, lsl #3]
  54:	mov	x0, x22
  58:	add	x20, x20, #0x1
  5c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  60:	ldr	w0, [x19, #160]
  64:	cmp	w0, w20
  68:	b.gt	50 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv+0x50>
  6c:	add	x21, x21, #0x0
  70:	ldr	x30, [sp, #32]
  74:	str	wzr, [x21, #160]
  78:	ldp	x21, x22, [sp, #16]
  7c:	ldp	x19, x20, [sp], #48
  80:	ret
  84:	nop

0000000000000088 <_ZN11__sanitizer10FlagParser10ll_strndupEPKcm>:
  88:	stp	x19, x20, [sp, #-32]!
  8c:	stp	x21, x30, [sp, #16]
  90:	mov	x21, x1
  94:	mov	x0, x21
  98:	mov	x1, x2
  9c:	bl	0 <_ZN11__sanitizer16internal_strnlenEPKcm>
  a0:	adrp	x1, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
  a4:	mov	x19, x0
  a8:	add	x0, x1, #0x0
  ac:	add	x1, x19, #0x1
  b0:	add	x0, x0, #0xa8
  b4:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
  b8:	mov	x20, x0
  bc:	mov	x1, x21
  c0:	mov	x2, x19
  c4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  c8:	mov	x0, x20
  cc:	strb	wzr, [x20, x19]
  d0:	ldp	x21, x30, [sp, #16]
  d4:	ldp	x19, x20, [sp], #32
  d8:	ret
  dc:	nop

00000000000000e0 <_ZN11__sanitizer10FlagParser21PrintFlagDescriptionsEv>:
  e0:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  e4:	stp	x19, x20, [sp, #-48]!
  e8:	ldr	x1, [x1]
  ec:	stp	x21, x22, [sp, #16]
  f0:	mov	x21, x0
  f4:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
  f8:	add	x0, x0, #0x0
  fc:	ldr	x1, [x1]
 100:	str	x30, [sp, #32]
 104:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 108:	ldr	w0, [x21, #8]
 10c:	cmp	w0, #0x0
 110:	b.le	154 <_ZN11__sanitizer10FlagParser21PrintFlagDescriptionsEv+0x74>
 114:	adrp	x22, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 118:	add	x22, x22, #0x0
 11c:	mov	x19, #0x0                   	// #0
 120:	mov	w20, #0x0                   	// #0
 124:	nop
 128:	ldr	x1, [x21]
 12c:	mov	x0, x22
 130:	add	w20, w20, #0x1
 134:	add	x2, x1, x19
 138:	ldr	x1, [x1, x19]
 13c:	add	x19, x19, #0x18
 140:	ldr	x2, [x2, #8]
 144:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 148:	ldr	w1, [x21, #8]
 14c:	cmp	w1, w20
 150:	b.gt	128 <_ZN11__sanitizer10FlagParser21PrintFlagDescriptionsEv+0x48>
 154:	ldp	x21, x22, [sp, #16]
 158:	ldr	x30, [sp, #32]
 15c:	ldp	x19, x20, [sp], #48
 160:	ret
 164:	nop

0000000000000168 <_ZN11__sanitizer10FlagParser11fatal_errorEPKc>:
 168:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 16c:	add	x0, x0, #0x0
 170:	str	x30, [sp, #-16]!
 174:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 178:	bl	0 <_ZN11__sanitizer3DieEv>
 17c:	nop

0000000000000180 <_ZN11__sanitizer10FlagParser8is_spaceEc>:
 180:	and	w1, w1, #0xff
 184:	cmp	w1, #0x20
 188:	cset	w0, eq  // eq = none
 18c:	cmp	w1, #0x2c
 190:	csinc	w0, w0, wzr, ne  // ne = any
 194:	cbnz	w0, 1ac <_ZN11__sanitizer10FlagParser8is_spaceEc+0x2c>
 198:	cmp	w1, #0x3a
 19c:	cset	w0, eq  // eq = none
 1a0:	cmp	w1, #0xa
 1a4:	csinc	w0, w0, wzr, ne  // ne = any
 1a8:	cbz	w0, 1b0 <_ZN11__sanitizer10FlagParser8is_spaceEc+0x30>
 1ac:	ret
 1b0:	and	w1, w1, #0xfffffffb
 1b4:	cmp	w1, #0x9
 1b8:	cset	w0, eq  // eq = none
 1bc:	ret

00000000000001c0 <_ZN11__sanitizer10FlagParser15skip_whitespaceEv>:
 1c0:	mov	x3, x0
 1c4:	str	x30, [sp, #-16]!
 1c8:	ldp	x4, x2, [x0, #16]
 1cc:	b	1d4 <_ZN11__sanitizer10FlagParser15skip_whitespaceEv+0x14>
 1d0:	str	x2, [x3, #24]
 1d4:	ldrb	w1, [x4, x2]
 1d8:	add	x2, x2, #0x1
 1dc:	mov	x0, x3
 1e0:	bl	180 <_ZN11__sanitizer10FlagParser8is_spaceEc>
 1e4:	tst	w0, #0xff
 1e8:	b.ne	1d0 <_ZN11__sanitizer10FlagParser15skip_whitespaceEv+0x10>  // b.any
 1ec:	ldr	x30, [sp], #16
 1f0:	ret
 1f4:	nop

00000000000001f8 <_ZN11__sanitizer10FlagParser11run_handlerEPKcS2_>:
 1f8:	stp	x19, x20, [sp, #-48]!
 1fc:	stp	x21, x22, [sp, #16]
 200:	mov	x21, x0
 204:	ldr	w0, [x0, #8]
 208:	str	x30, [sp, #40]
 20c:	mov	x22, x1
 210:	cmp	w0, #0x0
 214:	b.le	288 <_ZN11__sanitizer10FlagParser11run_handlerEPKcS2_+0x90>
 218:	mov	x19, #0x0                   	// #0
 21c:	mov	w20, #0x0                   	// #0
 220:	str	x23, [sp, #32]
 224:	mov	x23, x2
 228:	b	240 <_ZN11__sanitizer10FlagParser11run_handlerEPKcS2_+0x48>
 22c:	ldr	w0, [x21, #8]
 230:	add	w20, w20, #0x1
 234:	add	x19, x19, #0x18
 238:	cmp	w0, w20
 23c:	b.le	284 <_ZN11__sanitizer10FlagParser11run_handlerEPKcS2_+0x8c>
 240:	ldr	x3, [x21]
 244:	mov	x0, x22
 248:	ldr	x1, [x3, x19]
 24c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 250:	cbnz	w0, 22c <_ZN11__sanitizer10FlagParser11run_handlerEPKcS2_+0x34>
 254:	ldr	x0, [x21]
 258:	mov	x1, x23
 25c:	ldp	x21, x22, [sp, #16]
 260:	add	x19, x0, x19
 264:	ldr	x23, [sp, #32]
 268:	ldr	x0, [x19, #16]
 26c:	ldr	x30, [sp, #40]
 270:	ldr	x2, [x0]
 274:	ldp	x19, x20, [sp], #48
 278:	ldr	x2, [x2]
 27c:	mov	x16, x2
 280:	br	x16
 284:	ldr	x23, [sp, #32]
 288:	adrp	x1, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 28c:	add	x1, x1, #0x0
 290:	ldr	w0, [x1, #160]
 294:	sxtw	x3, w0
 298:	cmp	x3, #0x13
 29c:	b.hi	2c0 <_ZN11__sanitizer10FlagParser11run_handlerEPKcS2_+0xc8>  // b.pmore
 2a0:	add	w2, w0, #0x1
 2a4:	str	x22, [x1, x3, lsl #3]
 2a8:	ldp	x21, x22, [sp, #16]
 2ac:	mov	w0, #0x1                   	// #1
 2b0:	ldr	x30, [sp, #40]
 2b4:	str	w2, [x1, #160]
 2b8:	ldp	x19, x20, [sp], #48
 2bc:	ret
 2c0:	adrp	x2, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 2c4:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 2c8:	add	x2, x2, #0x0
 2cc:	add	x0, x0, #0x0
 2d0:	mov	x4, #0x14                  	// #20
 2d4:	mov	w1, #0x1e                  	// #30
 2d8:	str	x23, [sp, #32]
 2dc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000002e0 <_ZN11__sanitizer10FlagParser10parse_flagEv>:
 2e0:	stp	x19, x20, [sp, #-32]!
 2e4:	mov	x19, x0
 2e8:	ldp	x3, x4, [x0, #16]
 2ec:	str	x30, [sp, #16]
 2f0:	ldrb	w1, [x3, x4]
 2f4:	add	x5, x3, x4
 2f8:	mov	x2, x4
 2fc:	cmp	w1, #0x3d
 300:	ccmp	w1, #0x0, #0x4, ne  // ne = any
 304:	b.ne	324 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x44>  // b.any
 308:	b	344 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x64>
 30c:	add	x2, x2, #0x1
 310:	str	x2, [x19, #24]
 314:	ldrb	w1, [x3, x2]
 318:	cmp	w1, #0x3d
 31c:	ccmp	w1, #0x0, #0x4, ne  // ne = any
 320:	b.eq	344 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x64>  // b.none
 324:	mov	x0, x19
 328:	bl	180 <_ZN11__sanitizer10FlagParser8is_spaceEc>
 32c:	tst	w0, #0xff
 330:	b.eq	30c <_ZN11__sanitizer10FlagParser10parse_flagEv+0x2c>  // b.none
 334:	adrp	x1, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 338:	mov	x0, x19
 33c:	add	x1, x1, #0x0
 340:	bl	168 <_ZN11__sanitizer10FlagParser11fatal_errorEPKc>
 344:	cmp	w1, #0x3d
 348:	b.ne	334 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x54>  // b.any
 34c:	sub	x2, x2, x4
 350:	mov	x1, x5
 354:	mov	x0, x19
 358:	bl	88 <_ZN11__sanitizer10FlagParser10ll_strndupEPKcm>
 35c:	ldp	x4, x2, [x19, #16]
 360:	mov	w3, #0x22                  	// #34
 364:	mov	x20, x0
 368:	add	x6, x2, #0x1
 36c:	str	x6, [x19, #24]
 370:	add	x7, x4, x6
 374:	ldrb	w1, [x4, x6]
 378:	cmp	w1, #0x27
 37c:	ccmp	w1, w3, #0x4, ne  // ne = any
 380:	b.eq	3cc <_ZN11__sanitizer10FlagParser10parse_flagEv+0xec>  // b.none
 384:	cbz	w1, 458 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x178>
 388:	mov	x5, x6
 38c:	b	3a4 <_ZN11__sanitizer10FlagParser10parse_flagEv+0xc4>
 390:	add	x3, x5, #0x1
 394:	str	x3, [x19, #24]
 398:	ldrb	w1, [x4, x3]
 39c:	cbz	w1, 450 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x170>
 3a0:	mov	x5, x3
 3a4:	mov	x0, x19
 3a8:	bl	180 <_ZN11__sanitizer10FlagParser8is_spaceEc>
 3ac:	tst	w0, #0xff
 3b0:	b.eq	390 <_ZN11__sanitizer10FlagParser10parse_flagEv+0xb0>  // b.none
 3b4:	sub	x2, x5, x6
 3b8:	mov	x1, x7
 3bc:	mov	x0, x19
 3c0:	bl	88 <_ZN11__sanitizer10FlagParser10ll_strndupEPKcm>
 3c4:	mov	x2, x0
 3c8:	b	420 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x140>
 3cc:	add	x2, x2, #0x2
 3d0:	str	x2, [x19, #24]
 3d4:	add	x1, x4, x2
 3d8:	ldrb	w0, [x4, x6]
 3dc:	ldrb	w3, [x4, x2]
 3e0:	cbnz	w3, 3f8 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x118>
 3e4:	b	440 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x160>
 3e8:	add	x2, x2, #0x1
 3ec:	str	x2, [x19, #24]
 3f0:	ldrb	w3, [x4, x2]
 3f4:	cbz	w3, 440 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x160>
 3f8:	cmp	w0, w3
 3fc:	b.ne	3e8 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x108>  // b.any
 400:	mvn	x6, x6
 404:	mov	x0, x19
 408:	add	x2, x6, x2
 40c:	bl	88 <_ZN11__sanitizer10FlagParser10ll_strndupEPKcm>
 410:	mov	x2, x0
 414:	ldr	x1, [x19, #24]
 418:	add	x1, x1, #0x1
 41c:	str	x1, [x19, #24]
 420:	mov	x1, x20
 424:	mov	x0, x19
 428:	bl	1f8 <_ZN11__sanitizer10FlagParser11run_handlerEPKcS2_>
 42c:	tst	w0, #0xff
 430:	b.eq	460 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x180>  // b.none
 434:	ldr	x30, [sp, #16]
 438:	ldp	x19, x20, [sp], #32
 43c:	ret
 440:	adrp	x1, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 444:	mov	x0, x19
 448:	add	x1, x1, #0x0
 44c:	bl	168 <_ZN11__sanitizer10FlagParser11fatal_errorEPKc>
 450:	sub	x2, x5, x2
 454:	b	3b8 <_ZN11__sanitizer10FlagParser10parse_flagEv+0xd8>
 458:	mov	x2, #0x0                   	// #0
 45c:	b	3b8 <_ZN11__sanitizer10FlagParser10parse_flagEv+0xd8>
 460:	adrp	x1, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 464:	mov	x0, x19
 468:	add	x1, x1, #0x0
 46c:	bl	168 <_ZN11__sanitizer10FlagParser11fatal_errorEPKc>

0000000000000470 <_ZN11__sanitizer10FlagParser11parse_flagsEv>:
 470:	stp	x19, x30, [sp, #-16]!
 474:	mov	x19, x0
 478:	b	480 <_ZN11__sanitizer10FlagParser11parse_flagsEv+0x10>
 47c:	bl	2e0 <_ZN11__sanitizer10FlagParser10parse_flagEv>
 480:	mov	x0, x19
 484:	bl	1c0 <_ZN11__sanitizer10FlagParser15skip_whitespaceEv>
 488:	ldp	x2, x1, [x19, #16]
 48c:	mov	x0, x19
 490:	ldrb	w1, [x2, x1]
 494:	cbnz	w1, 47c <_ZN11__sanitizer10FlagParser11parse_flagsEv+0xc>
 498:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 49c:	ldr	x0, [x0]
 4a0:	ldr	w1, [x0, #36]
 4a4:	cmp	w1, #0x0
 4a8:	b.gt	4b4 <_ZN11__sanitizer10FlagParser11parse_flagsEv+0x44>
 4ac:	mov	w1, #0x1                   	// #1
 4b0:	str	w1, [x0, #36]
 4b4:	ldp	x19, x30, [sp], #16
 4b8:	ret
 4bc:	nop

00000000000004c0 <_ZN11__sanitizer10FlagParser9ParseFileEPKcb>:
 4c0:	stp	x19, x20, [sp, #-80]!
 4c4:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
 4c8:	mov	x19, x0
 4cc:	ldr	x20, [x20]
 4d0:	stp	x21, x22, [sp, #16]
 4d4:	mov	x21, x1
 4d8:	and	w22, w2, #0xff
 4dc:	ldr	x0, [x20]
 4e0:	str	x30, [sp, #32]
 4e4:	cbz	x0, 56c <_ZN11__sanitizer10FlagParser9ParseFileEPKcb+0xac>
 4e8:	cmp	x0, #0x8, lsl #12
 4ec:	add	x5, sp, #0x34
 4f0:	add	x3, sp, #0x48
 4f4:	add	x2, sp, #0x40
 4f8:	add	x1, sp, #0x38
 4fc:	mov	x4, #0x8000                	// #32768
 500:	csel	x4, x0, x4, cs  // cs = hs, nlast
 504:	mov	x0, x21
 508:	bl	0 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>
 50c:	ands	w20, w0, #0xff
 510:	b.ne	52c <_ZN11__sanitizer10FlagParser9ParseFileEPKcb+0x6c>  // b.any
 514:	cbz	w22, 578 <_ZN11__sanitizer10FlagParser9ParseFileEPKcb+0xb8>
 518:	mov	w0, w22
 51c:	ldp	x21, x22, [sp, #16]
 520:	ldr	x30, [sp, #32]
 524:	ldp	x19, x20, [sp], #80
 528:	ret
 52c:	ldr	x0, [sp, #56]
 530:	cbz	x0, 54c <_ZN11__sanitizer10FlagParser9ParseFileEPKcb+0x8c>
 534:	ldp	x22, x21, [x19, #16]
 538:	stp	x0, xzr, [x19, #16]
 53c:	mov	x0, x19
 540:	bl	470 <_ZN11__sanitizer10FlagParser11parse_flagsEv>
 544:	stp	x22, x21, [x19, #16]
 548:	ldr	x0, [sp, #56]
 54c:	mov	w22, w20
 550:	ldr	x1, [sp, #64]
 554:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 558:	mov	w0, w22
 55c:	ldp	x21, x22, [sp, #16]
 560:	ldr	x30, [sp, #32]
 564:	ldp	x19, x20, [sp], #80
 568:	ret
 56c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 570:	str	x0, [x20]
 574:	b	4e8 <_ZN11__sanitizer10FlagParser9ParseFileEPKcb+0x28>
 578:	ldr	w2, [sp, #52]
 57c:	mov	x1, x21
 580:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 584:	add	x0, x0, #0x0
 588:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 58c:	mov	w0, w22
 590:	ldp	x21, x22, [sp, #16]
 594:	ldr	x30, [sp, #32]
 598:	ldp	x19, x20, [sp], #80
 59c:	ret

00000000000005a0 <_ZN11__sanitizer10FlagParser11ParseStringEPKc>:
 5a0:	cbz	x1, 5cc <_ZN11__sanitizer10FlagParser11ParseStringEPKc+0x2c>
 5a4:	stp	x19, x20, [sp, #-32]!
 5a8:	mov	x19, x0
 5ac:	stp	x21, x30, [sp, #16]
 5b0:	ldp	x21, x20, [x0, #16]
 5b4:	stp	x1, xzr, [x0, #16]
 5b8:	bl	470 <_ZN11__sanitizer10FlagParser11parse_flagsEv>
 5bc:	stp	x21, x20, [x19, #16]
 5c0:	ldp	x21, x30, [sp, #16]
 5c4:	ldp	x19, x20, [sp], #32
 5c8:	ret
 5cc:	ret

00000000000005d0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>:
 5d0:	ldr	w4, [x0, #8]
 5d4:	sxtw	x5, w4
 5d8:	cmp	x5, #0xc7
 5dc:	b.hi	604 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_+0x34>  // b.pmore
 5e0:	mov	w5, #0x18                  	// #24
 5e4:	add	w7, w4, #0x1
 5e8:	ldr	x6, [x0]
 5ec:	smull	x4, w4, w5
 5f0:	add	x5, x6, x4
 5f4:	str	x1, [x6, x4]
 5f8:	stp	x3, x2, [x5, #8]
 5fc:	str	w7, [x0, #8]
 600:	ret
 604:	str	x30, [sp, #-16]!
 608:	adrp	x2, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 60c:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 610:	mov	x3, x5
 614:	add	x2, x2, #0x0
 618:	add	x0, x0, #0x0
 61c:	mov	x4, #0xc8                  	// #200
 620:	mov	w1, #0x9e                  	// #158
 624:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000628 <_ZN11__sanitizer10FlagParserC1Ev>:
 628:	stp	x19, x30, [sp, #-16]!
 62c:	mov	x19, x0
 630:	adrp	x1, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 634:	add	x0, x1, #0x0
 638:	mov	x1, #0x12c0                	// #4800
 63c:	str	wzr, [x19, #8]
 640:	add	x0, x0, #0xa8
 644:	stp	xzr, xzr, [x19, #16]
 648:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 64c:	str	x0, [x19]
 650:	ldp	x19, x30, [sp], #16
 654:	ret

sanitizer_flags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>:
   0:	adrp	x4, 0 <_ZN11__sanitizer10FlagParser5AllocE>
   4:	stp	x19, x20, [sp, #-48]!
   8:	mov	x20, x0
   c:	ldr	x0, [x4]
  10:	mov	x19, x3
  14:	stp	x21, x22, [sp, #16]
  18:	mov	x22, x2
  1c:	mov	x21, x1
  20:	mov	x1, #0x10                  	// #16
  24:	str	x30, [sp, #32]
  28:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
  2c:	mov	x2, x0
  30:	mov	x3, x22
  34:	mov	x1, x21
  38:	adrp	x4, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
  3c:	add	x4, x4, #0x0
  40:	ldp	x21, x22, [sp, #16]
  44:	mov	x0, x20
  48:	ldr	x30, [sp, #32]
  4c:	stp	x4, x19, [x2]
  50:	ldp	x19, x20, [sp], #48
  54:	b	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>

0000000000000058 <_ZN11__sanitizerL12RegisterFlagIPKcEEvPNS_10FlagParserES2_S2_PT_>:
  58:	adrp	x4, 0 <_ZN11__sanitizer10FlagParser5AllocE>
  5c:	stp	x19, x20, [sp, #-48]!
  60:	mov	x20, x0
  64:	ldr	x0, [x4]
  68:	mov	x19, x3
  6c:	stp	x21, x22, [sp, #16]
  70:	mov	x22, x2
  74:	mov	x21, x1
  78:	mov	x1, #0x10                  	// #16
  7c:	str	x30, [sp, #32]
  80:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
  84:	mov	x2, x0
  88:	mov	x3, x22
  8c:	mov	x1, x21
  90:	adrp	x4, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
  94:	add	x4, x4, #0x0
  98:	ldp	x21, x22, [sp, #16]
  9c:	mov	x0, x20
  a0:	ldr	x30, [sp, #32]
  a4:	stp	x4, x19, [x2]
  a8:	ldp	x19, x20, [sp], #48
  ac:	b	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>

00000000000000b0 <_ZN11__sanitizerL12RegisterFlagIiEEvPNS_10FlagParserEPKcS4_PT_>:
  b0:	adrp	x4, 0 <_ZN11__sanitizer10FlagParser5AllocE>
  b4:	stp	x19, x20, [sp, #-48]!
  b8:	mov	x20, x0
  bc:	ldr	x0, [x4]
  c0:	mov	x19, x3
  c4:	stp	x21, x22, [sp, #16]
  c8:	mov	x22, x2
  cc:	mov	x21, x1
  d0:	mov	x1, #0x10                  	// #16
  d4:	str	x30, [sp, #32]
  d8:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
  dc:	mov	x2, x0
  e0:	mov	x3, x22
  e4:	mov	x1, x21
  e8:	adrp	x4, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
  ec:	add	x4, x4, #0x0
  f0:	ldp	x21, x22, [sp, #16]
  f4:	mov	x0, x20
  f8:	ldr	x30, [sp, #32]
  fc:	stp	x4, x19, [x2]
 100:	ldp	x19, x20, [sp], #48
 104:	b	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>

0000000000000108 <_ZN11__sanitizerL12RegisterFlagINS_16HandleSignalModeEEEvPNS_10FlagParserEPKcS5_PT_>:
 108:	adrp	x4, 0 <_ZN11__sanitizer10FlagParser5AllocE>
 10c:	stp	x19, x20, [sp, #-48]!
 110:	mov	x20, x0
 114:	ldr	x0, [x4]
 118:	mov	x19, x3
 11c:	stp	x21, x22, [sp, #16]
 120:	mov	x22, x2
 124:	mov	x21, x1
 128:	mov	x1, #0x10                  	// #16
 12c:	str	x30, [sp, #32]
 130:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 134:	mov	x2, x0
 138:	mov	x3, x22
 13c:	mov	x1, x21
 140:	adrp	x4, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 144:	add	x4, x4, #0x0
 148:	ldp	x21, x22, [sp, #16]
 14c:	mov	x0, x20
 150:	ldr	x30, [sp, #32]
 154:	stp	x4, x19, [x2]
 158:	ldp	x19, x20, [sp], #48
 15c:	b	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>

0000000000000160 <_ZN11__sanitizerL12RegisterFlagImEEvPNS_10FlagParserEPKcS4_PT_>:
 160:	adrp	x4, 0 <_ZN11__sanitizer10FlagParser5AllocE>
 164:	stp	x19, x20, [sp, #-48]!
 168:	mov	x20, x0
 16c:	ldr	x0, [x4]
 170:	mov	x19, x3
 174:	stp	x21, x22, [sp, #16]
 178:	mov	x22, x2
 17c:	mov	x21, x1
 180:	mov	x1, #0x10                  	// #16
 184:	str	x30, [sp, #32]
 188:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 18c:	mov	x2, x0
 190:	mov	x3, x22
 194:	mov	x1, x21
 198:	adrp	x4, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 19c:	add	x4, x4, #0x0
 1a0:	ldp	x21, x22, [sp, #16]
 1a4:	mov	x0, x20
 1a8:	ldr	x30, [sp, #32]
 1ac:	stp	x4, x19, [x2]
 1b0:	ldp	x19, x20, [sp], #48
 1b4:	b	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>

00000000000001b8 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>:
 1b8:	mov	x18, #0x10000               	// #65536
 1bc:	mov	x17, #0x10100000000         	// #1103806595072
 1c0:	mov	w11, #0x100                 	// #256
 1c4:	mov	x10, #0x101010101010101     	// #72340172838076673
 1c8:	mov	w5, #0x1                   	// #1
 1cc:	mov	w7, #0x1                   	// #1
 1d0:	movk	x18, #0x1, lsl #32
 1d4:	movk	x17, #0x1, lsl #48
 1d8:	mov	x16, #0x100000001           	// #4294967297
 1dc:	mov	x15, #0x100000000           	// #4294967296
 1e0:	mov	w14, #0x101                 	// #257
 1e4:	mov	x13, #0x10000               	// #65536
 1e8:	mov	w12, #0x1388                	// #5000
 1ec:	movk	w11, #0x101, lsl #16
 1f0:	movk	x10, #0x1
 1f4:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 1f8:	adrp	x6, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 1fc:	add	x1, x1, #0x0
 200:	add	x6, x6, #0x0
 204:	adrp	x4, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 208:	adrp	x3, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 20c:	add	x4, x4, #0x0
 210:	add	x3, x3, #0x0
 214:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 218:	mov	x9, #0x101010101010101     	// #72340172838076673
 21c:	add	x2, x2, #0x0
 220:	mov	x8, #0x1                   	// #1
 224:	strb	w5, [x0]
 228:	str	xzr, [x0, #8]
 22c:	movk	x9, #0x1, lsl #48
 230:	strb	wzr, [x0, #16]
 234:	movk	x8, #0x100, lsl #32
 238:	stp	x1, x18, [x0, #24]
 23c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 240:	add	x1, x1, #0x0
 244:	str	x6, [x0, #40]
 248:	mov	w6, #0x100                 	// #256
 24c:	strh	wzr, [x0, #48]
 250:	stur	x17, [x0, #52]
 254:	strb	w5, [x0, #60]
 258:	str	wzr, [x0, #64]
 25c:	strb	w5, [x0, #68]
 260:	stp	x16, xzr, [x0, #72]
 264:	str	x15, [x0, #88]
 268:	strh	w14, [x0, #96]
 26c:	strb	wzr, [x0, #98]
 270:	stp	x13, x4, [x0, #104]
 274:	strh	wzr, [x0, #120]
 278:	strb	wzr, [x0, #122]
 27c:	stp	xzr, xzr, [x0, #128]
 280:	str	xzr, [x0, #144]
 284:	strb	wzr, [x0, #152]
 288:	str	w12, [x0, #156]
 28c:	strh	w7, [x0, #160]
 290:	str	x3, [x0, #168]
 294:	str	w11, [x0, #176]
 298:	strh	w7, [x0, #180]
 29c:	str	wzr, [x0, #184]
 2a0:	stp	x2, x10, [x0, #192]
 2a4:	stp	x9, x8, [x0, #208]
 2a8:	str	x1, [x0, #224]
 2ac:	strh	w6, [x0, #232]
 2b0:	strb	wzr, [x0, #234]
 2b4:	ret

00000000000002b8 <_ZN11__sanitizer11CommonFlags8CopyFromERKS0_>:
 2b8:	mov	x2, #0xf0                  	// #240
 2bc:	b	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>

00000000000002c0 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm>:
 2c0:	stp	x19, x20, [sp, #-80]!
 2c4:	sub	x2, x2, #0x1
 2c8:	mov	x19, x1
 2cc:	stp	x21, x22, [sp, #16]
 2d0:	mov	x21, x0
 2d4:	add	x20, x1, x2
 2d8:	str	x30, [sp, #32]
 2dc:	ldrb	w0, [x0]
 2e0:	cbz	w0, 3c0 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x100>
 2e4:	cmp	x1, x20
 2e8:	b.cs	38c <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xcc>  // b.hs, b.nlast
 2ec:	mov	w22, #0x6667                	// #26215
 2f0:	movk	w22, #0x6666, lsl #16
 2f4:	nop
 2f8:	cmp	w0, #0x25
 2fc:	b.ne	3b0 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xf0>  // b.any
 300:	ldrb	w1, [x21, #1]
 304:	cmp	w1, #0x62
 308:	b.eq	3dc <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x11c>  // b.none
 30c:	cmp	w1, #0x70
 310:	b.ne	3b0 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xf0>  // b.any
 314:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
 318:	add	x3, sp, #0x50
 31c:	nop
 320:	smull	x1, w0, w22
 324:	asr	x1, x1, #34
 328:	sub	w1, w1, w0, asr #31
 32c:	add	w2, w1, w1, lsl #2
 330:	sub	w2, w0, w2, lsl #1
 334:	mov	w0, w1
 338:	add	w2, w2, #0x30
 33c:	and	w2, w2, #0xff
 340:	strb	w2, [x3, #-1]!
 344:	cbnz	w1, 320 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x60>
 348:	add	x0, sp, #0x50
 34c:	cmp	x0, x3
 350:	ccmp	x19, x20, #0x2, hi  // hi = pmore
 354:	b.cc	360 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xa0>  // b.lo, b.ul, b.last
 358:	b	378 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xb8>
 35c:	ldrb	w2, [x3]
 360:	strb	w2, [x19], #1
 364:	add	x3, x3, #0x1
 368:	add	x0, sp, #0x50
 36c:	cmp	x19, x20
 370:	ccmp	x0, x3, #0x0, cc  // cc = lo, ul, last
 374:	b.hi	35c <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x9c>  // b.pmore
 378:	ldrb	w0, [x21, #2]
 37c:	add	x21, x21, #0x2
 380:	cbz	w0, 3c0 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x100>
 384:	cmp	x19, x20
 388:	b.cc	2f8 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x38>  // b.lo, b.ul, b.last
 38c:	cmp	x19, x20
 390:	cset	x3, cc  // cc = lo, ul, last
 394:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 398:	adrp	x0, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 39c:	add	x2, x2, #0x0
 3a0:	add	x0, x0, #0x0
 3a4:	mov	x4, #0x0                   	// #0
 3a8:	mov	w1, #0x46                  	// #70
 3ac:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3b0:	add	x21, x21, #0x1
 3b4:	strb	w0, [x19], #1
 3b8:	ldrb	w0, [x21]
 3bc:	cbnz	w0, 384 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xc4>
 3c0:	cmp	x19, x20
 3c4:	b.cs	430 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x170>  // b.hs, b.nlast
 3c8:	strb	wzr, [x19]
 3cc:	ldp	x21, x22, [sp, #16]
 3d0:	ldr	x30, [sp, #32]
 3d4:	ldp	x19, x20, [sp], #80
 3d8:	ret
 3dc:	bl	0 <_ZN11__sanitizer14GetProcessNameEv>
 3e0:	cbz	x0, 410 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x150>
 3e4:	ldrb	w1, [x0]
 3e8:	cmp	w1, #0x0
 3ec:	ccmp	x19, x20, #0x2, ne  // ne = any
 3f0:	b.cs	378 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xb8>  // b.hs, b.nlast
 3f4:	nop
 3f8:	strb	w1, [x19], #1
 3fc:	ldrb	w1, [x0, #1]!
 400:	cmp	w1, #0x0
 404:	ccmp	x19, x20, #0x2, ne  // ne = any
 408:	b.cc	3f8 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x138>  // b.lo, b.ul, b.last
 40c:	b	378 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xb8>
 410:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 414:	adrp	x0, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 418:	add	x2, x2, #0x0
 41c:	add	x0, x0, #0x0
 420:	mov	x4, #0x0                   	// #0
 424:	mov	x3, #0x0                   	// #0
 428:	mov	w1, #0x2e                  	// #46
 42c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 430:	mov	x3, #0x0                   	// #0
 434:	b	394 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xd4>

0000000000000438 <_ZN11__sanitizer20RegisterIncludeFlagsEPNS_10FlagParserEPNS_11CommonFlagsE>:
 438:	stp	x19, x20, [sp, #-32]!
 43c:	mov	x1, #0x18                  	// #24
 440:	mov	x19, x0
 444:	stp	x21, x30, [sp, #16]
 448:	adrp	x21, 0 <_ZN11__sanitizer10FlagParser5AllocE>
 44c:	adrp	x20, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 450:	ldr	x21, [x21]
 454:	add	x20, x20, #0x0
 458:	mov	x0, x21
 45c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 460:	mov	x2, x0
 464:	adrp	x3, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 468:	add	x3, x3, #0x0
 46c:	mov	x0, x19
 470:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 474:	add	x1, x1, #0x0
 478:	stp	x20, x19, [x2]
 47c:	strb	wzr, [x2, #16]
 480:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
 484:	mov	x0, x21
 488:	mov	x1, #0x18                  	// #24
 48c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 490:	mov	x2, x0
 494:	mov	w4, #0x1                   	// #1
 498:	mov	x0, x19
 49c:	ldp	x21, x30, [sp, #16]
 4a0:	stp	x20, x19, [x2]
 4a4:	adrp	x3, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 4a8:	strb	w4, [x2, #16]
 4ac:	add	x3, x3, #0x0
 4b0:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 4b4:	add	x1, x1, #0x0
 4b8:	ldp	x19, x20, [sp], #32
 4bc:	b	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>

00000000000004c0 <_ZN11__sanitizer19RegisterCommonFlagsEPNS_10FlagParserEPNS_11CommonFlagsE>:
 4c0:	stp	x19, x20, [sp, #-32]!
 4c4:	mov	x3, x1
 4c8:	mov	x19, x1
 4cc:	mov	x20, x0
 4d0:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 4d4:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 4d8:	add	x2, x2, #0x0
 4dc:	add	x1, x1, #0x0
 4e0:	str	x30, [sp, #16]
 4e4:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 4e8:	add	x3, x19, #0x8
 4ec:	mov	x0, x20
 4f0:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 4f4:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 4f8:	add	x2, x2, #0x0
 4fc:	add	x1, x1, #0x0
 500:	bl	58 <_ZN11__sanitizerL12RegisterFlagIPKcEEvPNS_10FlagParserES2_S2_PT_>
 504:	add	x3, x19, #0x10
 508:	mov	x0, x20
 50c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 510:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 514:	add	x2, x2, #0x0
 518:	add	x1, x1, #0x0
 51c:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 520:	add	x3, x19, #0x18
 524:	mov	x0, x20
 528:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 52c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 530:	add	x2, x2, #0x0
 534:	add	x1, x1, #0x0
 538:	bl	58 <_ZN11__sanitizerL12RegisterFlagIPKcEEvPNS_10FlagParserES2_S2_PT_>
 53c:	add	x3, x19, #0x20
 540:	mov	x0, x20
 544:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 548:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 54c:	add	x2, x2, #0x0
 550:	add	x1, x1, #0x0
 554:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 558:	add	x3, x19, #0x21
 55c:	mov	x0, x20
 560:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 564:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 568:	add	x2, x2, #0x0
 56c:	add	x1, x1, #0x0
 570:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 574:	add	x3, x19, #0x22
 578:	mov	x0, x20
 57c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 580:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 584:	add	x2, x2, #0x0
 588:	add	x1, x1, #0x0
 58c:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 590:	add	x3, x19, #0x23
 594:	mov	x0, x20
 598:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 59c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 5a0:	add	x2, x2, #0x0
 5a4:	add	x1, x1, #0x0
 5a8:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 5ac:	add	x3, x19, #0x24
 5b0:	mov	x0, x20
 5b4:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 5b8:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 5bc:	add	x2, x2, #0x0
 5c0:	add	x1, x1, #0x0
 5c4:	bl	b0 <_ZN11__sanitizerL12RegisterFlagIiEEvPNS_10FlagParserEPKcS4_PT_>
 5c8:	add	x3, x19, #0x28
 5cc:	mov	x0, x20
 5d0:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 5d4:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 5d8:	add	x2, x2, #0x0
 5dc:	add	x1, x1, #0x0
 5e0:	bl	58 <_ZN11__sanitizerL12RegisterFlagIPKcEEvPNS_10FlagParserES2_S2_PT_>
 5e4:	add	x3, x19, #0x30
 5e8:	mov	x0, x20
 5ec:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 5f0:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 5f4:	add	x2, x2, #0x0
 5f8:	add	x1, x1, #0x0
 5fc:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 600:	add	x3, x19, #0x31
 604:	mov	x0, x20
 608:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 60c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 610:	add	x2, x2, #0x0
 614:	add	x1, x1, #0x0
 618:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 61c:	add	x3, x19, #0x34
 620:	mov	x0, x20
 624:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 628:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 62c:	add	x2, x2, #0x0
 630:	add	x1, x1, #0x0
 634:	bl	b0 <_ZN11__sanitizerL12RegisterFlagIiEEvPNS_10FlagParserEPKcS4_PT_>
 638:	add	x3, x19, #0x38
 63c:	mov	x0, x20
 640:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 644:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 648:	add	x2, x2, #0x0
 64c:	add	x1, x1, #0x0
 650:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 654:	add	x3, x19, #0x39
 658:	mov	x0, x20
 65c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 660:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 664:	add	x2, x2, #0x0
 668:	add	x1, x1, #0x0
 66c:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 670:	add	x3, x19, #0x3a
 674:	mov	x0, x20
 678:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 67c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 680:	add	x2, x2, #0x0
 684:	add	x1, x1, #0x0
 688:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 68c:	add	x3, x19, #0x3b
 690:	mov	x0, x20
 694:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 698:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 69c:	add	x2, x2, #0x0
 6a0:	add	x1, x1, #0x0
 6a4:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 6a8:	add	x3, x19, #0x3c
 6ac:	mov	x0, x20
 6b0:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 6b4:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 6b8:	add	x2, x2, #0x0
 6bc:	add	x1, x1, #0x0
 6c0:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 6c4:	add	x3, x19, #0x40
 6c8:	mov	x0, x20
 6cc:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 6d0:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 6d4:	add	x2, x2, #0x0
 6d8:	add	x1, x1, #0x0
 6dc:	bl	b0 <_ZN11__sanitizerL12RegisterFlagIiEEvPNS_10FlagParserEPKcS4_PT_>
 6e0:	add	x3, x19, #0x44
 6e4:	mov	x0, x20
 6e8:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 6ec:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 6f0:	add	x2, x2, #0x0
 6f4:	add	x1, x1, #0x0
 6f8:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 6fc:	add	x3, x19, #0x48
 700:	mov	x0, x20
 704:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 708:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 70c:	add	x2, x2, #0x0
 710:	add	x1, x1, #0x0
 714:	bl	108 <_ZN11__sanitizerL12RegisterFlagINS_16HandleSignalModeEEEvPNS_10FlagParserEPKcS5_PT_>
 718:	add	x3, x19, #0x4c
 71c:	mov	x0, x20
 720:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 724:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 728:	add	x2, x2, #0x0
 72c:	add	x1, x1, #0x0
 730:	bl	108 <_ZN11__sanitizerL12RegisterFlagINS_16HandleSignalModeEEEvPNS_10FlagParserEPKcS5_PT_>
 734:	add	x3, x19, #0x50
 738:	mov	x0, x20
 73c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 740:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 744:	add	x2, x2, #0x0
 748:	add	x1, x1, #0x0
 74c:	bl	108 <_ZN11__sanitizerL12RegisterFlagINS_16HandleSignalModeEEEvPNS_10FlagParserEPKcS5_PT_>
 750:	add	x3, x19, #0x54
 754:	mov	x0, x20
 758:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 75c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 760:	add	x2, x2, #0x0
 764:	add	x1, x1, #0x0
 768:	bl	108 <_ZN11__sanitizerL12RegisterFlagINS_16HandleSignalModeEEEvPNS_10FlagParserEPKcS5_PT_>
 76c:	add	x3, x19, #0x58
 770:	mov	x0, x20
 774:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 778:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 77c:	add	x2, x2, #0x0
 780:	add	x1, x1, #0x0
 784:	bl	108 <_ZN11__sanitizerL12RegisterFlagINS_16HandleSignalModeEEEvPNS_10FlagParserEPKcS5_PT_>
 788:	add	x3, x19, #0x5c
 78c:	mov	x0, x20
 790:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 794:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 798:	add	x2, x2, #0x0
 79c:	add	x1, x1, #0x0
 7a0:	bl	108 <_ZN11__sanitizerL12RegisterFlagINS_16HandleSignalModeEEEvPNS_10FlagParserEPKcS5_PT_>
 7a4:	add	x3, x19, #0x60
 7a8:	mov	x0, x20
 7ac:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 7b0:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 7b4:	add	x2, x2, #0x0
 7b8:	add	x1, x1, #0x0
 7bc:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 7c0:	add	x3, x19, #0x61
 7c4:	mov	x0, x20
 7c8:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 7cc:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 7d0:	add	x2, x2, #0x0
 7d4:	add	x1, x1, #0x0
 7d8:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 7dc:	add	x3, x19, #0x62
 7e0:	mov	x0, x20
 7e4:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 7e8:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 7ec:	add	x2, x2, #0x0
 7f0:	add	x1, x1, #0x0
 7f4:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 7f8:	add	x3, x19, #0x68
 7fc:	mov	x0, x20
 800:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 804:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 808:	add	x2, x2, #0x0
 80c:	add	x1, x1, #0x0
 810:	bl	160 <_ZN11__sanitizerL12RegisterFlagImEEvPNS_10FlagParserEPKcS4_PT_>
 814:	add	x3, x19, #0x70
 818:	mov	x0, x20
 81c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 820:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 824:	add	x2, x2, #0x0
 828:	add	x1, x1, #0x0
 82c:	bl	58 <_ZN11__sanitizerL12RegisterFlagIPKcEEvPNS_10FlagParserES2_S2_PT_>
 830:	add	x3, x19, #0x78
 834:	mov	x0, x20
 838:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 83c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 840:	add	x2, x2, #0x0
 844:	add	x1, x1, #0x0
 848:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 84c:	add	x3, x19, #0x79
 850:	mov	x0, x20
 854:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 858:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 85c:	add	x2, x2, #0x0
 860:	add	x1, x1, #0x0
 864:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 868:	add	x3, x19, #0x7a
 86c:	mov	x0, x20
 870:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 874:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 878:	add	x2, x2, #0x0
 87c:	add	x1, x1, #0x0
 880:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 884:	add	x3, x19, #0x80
 888:	mov	x0, x20
 88c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 890:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 894:	add	x2, x2, #0x0
 898:	add	x1, x1, #0x0
 89c:	bl	160 <_ZN11__sanitizerL12RegisterFlagImEEvPNS_10FlagParserEPKcS4_PT_>
 8a0:	add	x3, x19, #0x88
 8a4:	mov	x0, x20
 8a8:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 8ac:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 8b0:	add	x2, x2, #0x0
 8b4:	add	x1, x1, #0x0
 8b8:	bl	160 <_ZN11__sanitizerL12RegisterFlagImEEvPNS_10FlagParserEPKcS4_PT_>
 8bc:	add	x3, x19, #0x90
 8c0:	mov	x0, x20
 8c4:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 8c8:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 8cc:	add	x2, x2, #0x0
 8d0:	add	x1, x1, #0x0
 8d4:	bl	160 <_ZN11__sanitizerL12RegisterFlagImEEvPNS_10FlagParserEPKcS4_PT_>
 8d8:	add	x3, x19, #0x98
 8dc:	mov	x0, x20
 8e0:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 8e4:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 8e8:	add	x2, x2, #0x0
 8ec:	add	x1, x1, #0x0
 8f0:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 8f4:	add	x3, x19, #0x9c
 8f8:	mov	x0, x20
 8fc:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 900:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 904:	add	x2, x2, #0x0
 908:	add	x1, x1, #0x0
 90c:	bl	b0 <_ZN11__sanitizerL12RegisterFlagIiEEvPNS_10FlagParserEPKcS4_PT_>
 910:	add	x3, x19, #0xa0
 914:	mov	x0, x20
 918:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 91c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 920:	add	x2, x2, #0x0
 924:	add	x1, x1, #0x0
 928:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 92c:	add	x3, x19, #0xa1
 930:	mov	x0, x20
 934:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 938:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 93c:	add	x2, x2, #0x0
 940:	add	x1, x1, #0x0
 944:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 948:	add	x3, x19, #0xa8
 94c:	mov	x0, x20
 950:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 954:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 958:	add	x2, x2, #0x0
 95c:	add	x1, x1, #0x0
 960:	bl	58 <_ZN11__sanitizerL12RegisterFlagIPKcEEvPNS_10FlagParserES2_S2_PT_>
 964:	add	x3, x19, #0xb0
 968:	mov	x0, x20
 96c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 970:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 974:	add	x2, x2, #0x0
 978:	add	x1, x1, #0x0
 97c:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 980:	add	x3, x19, #0xb1
 984:	mov	x0, x20
 988:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 98c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 990:	add	x2, x2, #0x0
 994:	add	x1, x1, #0x0
 998:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 99c:	add	x3, x19, #0xb2
 9a0:	mov	x0, x20
 9a4:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 9a8:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 9ac:	add	x2, x2, #0x0
 9b0:	add	x1, x1, #0x0
 9b4:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 9b8:	add	x3, x19, #0xb3
 9bc:	mov	x0, x20
 9c0:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 9c4:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 9c8:	add	x2, x2, #0x0
 9cc:	add	x1, x1, #0x0
 9d0:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 9d4:	add	x3, x19, #0xb4
 9d8:	mov	x0, x20
 9dc:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 9e0:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 9e4:	add	x2, x2, #0x0
 9e8:	add	x1, x1, #0x0
 9ec:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 9f0:	add	x3, x19, #0xb5
 9f4:	mov	x0, x20
 9f8:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 9fc:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a00:	add	x2, x2, #0x0
 a04:	add	x1, x1, #0x0
 a08:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a0c:	add	x3, x19, #0xb8
 a10:	mov	x0, x20
 a14:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a18:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a1c:	add	x2, x2, #0x0
 a20:	add	x1, x1, #0x0
 a24:	bl	b0 <_ZN11__sanitizerL12RegisterFlagIiEEvPNS_10FlagParserEPKcS4_PT_>
 a28:	add	x3, x19, #0xc0
 a2c:	mov	x0, x20
 a30:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a34:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a38:	add	x2, x2, #0x0
 a3c:	add	x1, x1, #0x0
 a40:	bl	58 <_ZN11__sanitizerL12RegisterFlagIPKcEEvPNS_10FlagParserES2_S2_PT_>
 a44:	add	x3, x19, #0xc8
 a48:	mov	x0, x20
 a4c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a50:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a54:	add	x2, x2, #0x0
 a58:	add	x1, x1, #0x0
 a5c:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a60:	add	x3, x19, #0xc9
 a64:	mov	x0, x20
 a68:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a6c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a70:	add	x2, x2, #0x0
 a74:	add	x1, x1, #0x0
 a78:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a7c:	add	x3, x19, #0xca
 a80:	mov	x0, x20
 a84:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a88:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a8c:	add	x2, x2, #0x0
 a90:	add	x1, x1, #0x0
 a94:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a98:	add	x3, x19, #0xcb
 a9c:	mov	x0, x20
 aa0:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 aa4:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 aa8:	add	x2, x2, #0x0
 aac:	add	x1, x1, #0x0
 ab0:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 ab4:	add	x3, x19, #0xcc
 ab8:	mov	x0, x20
 abc:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 ac0:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 ac4:	add	x2, x2, #0x0
 ac8:	add	x1, x1, #0x0
 acc:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 ad0:	add	x3, x19, #0xcd
 ad4:	mov	x0, x20
 ad8:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 adc:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 ae0:	add	x2, x2, #0x0
 ae4:	add	x1, x1, #0x0
 ae8:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 aec:	add	x3, x19, #0xce
 af0:	mov	x0, x20
 af4:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 af8:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 afc:	add	x2, x2, #0x0
 b00:	add	x1, x1, #0x0
 b04:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b08:	add	x3, x19, #0xcf
 b0c:	mov	x0, x20
 b10:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b14:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b18:	add	x2, x2, #0x0
 b1c:	add	x1, x1, #0x0
 b20:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b24:	add	x3, x19, #0xd0
 b28:	mov	x0, x20
 b2c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b30:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b34:	add	x2, x2, #0x0
 b38:	add	x1, x1, #0x0
 b3c:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b40:	add	x3, x19, #0xd1
 b44:	mov	x0, x20
 b48:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b4c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b50:	add	x2, x2, #0x0
 b54:	add	x1, x1, #0x0
 b58:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b5c:	add	x3, x19, #0xd2
 b60:	mov	x0, x20
 b64:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b68:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b6c:	add	x2, x2, #0x0
 b70:	add	x1, x1, #0x0
 b74:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b78:	add	x3, x19, #0xd3
 b7c:	mov	x0, x20
 b80:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b84:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b88:	add	x2, x2, #0x0
 b8c:	add	x1, x1, #0x0
 b90:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b94:	add	x3, x19, #0xd4
 b98:	mov	x0, x20
 b9c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 ba0:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 ba4:	add	x2, x2, #0x0
 ba8:	add	x1, x1, #0x0
 bac:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 bb0:	add	x3, x19, #0xd5
 bb4:	mov	x0, x20
 bb8:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 bbc:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 bc0:	add	x2, x2, #0x0
 bc4:	add	x1, x1, #0x0
 bc8:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 bcc:	add	x3, x19, #0xd6
 bd0:	mov	x0, x20
 bd4:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 bd8:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 bdc:	add	x2, x2, #0x0
 be0:	add	x1, x1, #0x0
 be4:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 be8:	add	x3, x19, #0xd7
 bec:	mov	x0, x20
 bf0:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 bf4:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 bf8:	add	x2, x2, #0x0
 bfc:	add	x1, x1, #0x0
 c00:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c04:	add	x3, x19, #0xd8
 c08:	mov	x0, x20
 c0c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c10:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c14:	add	x2, x2, #0x0
 c18:	add	x1, x1, #0x0
 c1c:	bl	b0 <_ZN11__sanitizerL12RegisterFlagIiEEvPNS_10FlagParserEPKcS4_PT_>
 c20:	add	x3, x19, #0xdc
 c24:	mov	x0, x20
 c28:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c2c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c30:	add	x2, x2, #0x0
 c34:	add	x1, x1, #0x0
 c38:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c3c:	add	x3, x19, #0xdd
 c40:	mov	x0, x20
 c44:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c48:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c4c:	add	x2, x2, #0x0
 c50:	add	x1, x1, #0x0
 c54:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c58:	add	x3, x19, #0xde
 c5c:	mov	x0, x20
 c60:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c64:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c68:	add	x2, x2, #0x0
 c6c:	add	x1, x1, #0x0
 c70:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c74:	add	x3, x19, #0xdf
 c78:	mov	x0, x20
 c7c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c80:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c84:	add	x2, x2, #0x0
 c88:	add	x1, x1, #0x0
 c8c:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c90:	add	x3, x19, #0xe0
 c94:	mov	x0, x20
 c98:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c9c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 ca0:	add	x2, x2, #0x0
 ca4:	add	x1, x1, #0x0
 ca8:	bl	58 <_ZN11__sanitizerL12RegisterFlagIPKcEEvPNS_10FlagParserES2_S2_PT_>
 cac:	add	x3, x19, #0xe8
 cb0:	mov	x0, x20
 cb4:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 cb8:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 cbc:	add	x2, x2, #0x0
 cc0:	add	x1, x1, #0x0
 cc4:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 cc8:	add	x3, x19, #0xe9
 ccc:	mov	x0, x20
 cd0:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 cd4:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 cd8:	add	x2, x2, #0x0
 cdc:	add	x1, x1, #0x0
 ce0:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 ce4:	add	x3, x19, #0xea
 ce8:	mov	x0, x20
 cec:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 cf0:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 cf4:	add	x2, x2, #0x0
 cf8:	add	x1, x1, #0x0
 cfc:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 d00:	mov	x1, x19
 d04:	mov	x0, x20
 d08:	ldr	x30, [sp, #16]
 d0c:	ldp	x19, x20, [sp], #32
 d10:	b	438 <_ZN11__sanitizer20RegisterIncludeFlagsEPNS_10FlagParserEPNS_11CommonFlagsE>
 d14:	nop

0000000000000d18 <_ZN11__sanitizer21InitializeCommonFlagsEPNS_11CommonFlagsE>:
 d18:	adrp	x1, 0 <_ZN11__sanitizer17current_verbosityE>
 d1c:	ldrb	w4, [x0, #223]
 d20:	ldr	w3, [x0, #52]
 d24:	ldr	x2, [x1]
 d28:	ldrb	w1, [x0, #161]
 d2c:	orr	w1, w1, w4
 d30:	str	w3, [x2]
 d34:	strb	w1, [x0, #161]
 d38:	ret

Disassembly of section .text._ZN11__sanitizer11FlagHandlerIPKcE5ParseES2_:

0000000000000000 <_ZN11__sanitizer11FlagHandlerIPKcE5ParseES2_>:
   0:	mov	x2, x0
   4:	mov	w0, #0x1                   	// #1
   8:	ldr	x2, [x2, #8]
   c:	str	x1, [x2]
  10:	ret

Disassembly of section .text._ZN11__sanitizer11FlagHandlerImE5ParseEPKc:

0000000000000000 <_ZN11__sanitizer11FlagHandlerImE5ParseEPKc>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	mov	x20, x0
   8:	mov	w2, #0xa                   	// #10
   c:	mov	x0, x1
  10:	mov	x19, x1
  14:	add	x1, sp, #0x28
  18:	str	x30, [sp, #16]
  1c:	bl	0 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i>
  20:	ldr	x2, [x20, #8]
  24:	ldr	x1, [sp, #40]
  28:	str	x0, [x2]
  2c:	ldrb	w0, [x1]
  30:	cmp	w0, #0x0
  34:	cset	w20, eq  // eq = none
  38:	cbnz	w0, 4c <_ZN11__sanitizer11FlagHandlerImE5ParseEPKc+0x4c>
  3c:	mov	w0, w20
  40:	ldr	x30, [sp, #16]
  44:	ldp	x19, x20, [sp], #48
  48:	ret
  4c:	mov	x1, x19
  50:	adrp	x0, 0 <_ZN11__sanitizer11FlagHandlerImE5ParseEPKc>
  54:	add	x0, x0, #0x0
  58:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  5c:	mov	w0, w20
  60:	ldr	x30, [sp, #16]
  64:	ldp	x19, x20, [sp], #48
  68:	ret

Disassembly of section .text._ZN11__sanitizer11FlagHandlerIiE5ParseEPKc:

0000000000000000 <_ZN11__sanitizer11FlagHandlerIiE5ParseEPKc>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	mov	x20, x0
   8:	mov	w2, #0xa                   	// #10
   c:	mov	x0, x1
  10:	mov	x19, x1
  14:	add	x1, sp, #0x28
  18:	str	x30, [sp, #16]
  1c:	bl	0 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i>
  20:	ldr	x2, [x20, #8]
  24:	ldr	x1, [sp, #40]
  28:	str	w0, [x2]
  2c:	ldrb	w0, [x1]
  30:	cmp	w0, #0x0
  34:	cset	w20, eq  // eq = none
  38:	cbnz	w0, 4c <_ZN11__sanitizer11FlagHandlerIiE5ParseEPKc+0x4c>
  3c:	mov	w0, w20
  40:	ldr	x30, [sp, #16]
  44:	ldp	x19, x20, [sp], #48
  48:	ret
  4c:	mov	x1, x19
  50:	adrp	x0, 0 <_ZN11__sanitizer11FlagHandlerIiE5ParseEPKc>
  54:	add	x0, x0, #0x0
  58:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  5c:	mov	w0, w20
  60:	ldr	x30, [sp, #16]
  64:	ldp	x19, x20, [sp], #48
  68:	ret

Disassembly of section .text._ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc:

0000000000000000 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x1
   8:	mov	x20, x0
   c:	mov	x0, x1
  10:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  14:	add	x1, x1, #0x0
  18:	str	x30, [sp, #16]
  1c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  20:	cbnz	w0, 40 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0x40>
  24:	mov	w1, #0x0                   	// #0
  28:	ldr	x2, [x20, #8]
  2c:	mov	w0, #0x1                   	// #1
  30:	ldr	x30, [sp, #16]
  34:	str	w1, [x2]
  38:	ldp	x19, x20, [sp], #32
  3c:	ret
  40:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  44:	mov	x0, x19
  48:	add	x1, x1, #0x0
  4c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  50:	cbz	w0, 24 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0x24>
  54:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  58:	mov	x0, x19
  5c:	add	x1, x1, #0x0
  60:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  64:	cbz	w0, 24 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0x24>
  68:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  6c:	mov	x0, x19
  70:	add	x1, x1, #0x0
  74:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  78:	cbz	w0, 90 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0x90>
  7c:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  80:	mov	x0, x19
  84:	add	x1, x1, #0x0
  88:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  8c:	cbnz	w0, 98 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0x98>
  90:	mov	w1, #0x1                   	// #1
  94:	b	28 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0x28>
  98:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  9c:	mov	x0, x19
  a0:	add	x1, x1, #0x0
  a4:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  a8:	cbz	w0, 90 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0x90>
  ac:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  b0:	mov	x0, x19
  b4:	add	x1, x1, #0x0
  b8:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  bc:	cbz	w0, f4 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0xf4>
  c0:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  c4:	mov	x0, x19
  c8:	add	x1, x1, #0x0
  cc:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  d0:	cbz	w0, f4 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0xf4>
  d4:	mov	x1, x19
  d8:	adrp	x0, 0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  dc:	add	x0, x0, #0x0
  e0:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  e4:	mov	w0, #0x0                   	// #0
  e8:	ldr	x30, [sp, #16]
  ec:	ldp	x19, x20, [sp], #32
  f0:	ret
  f4:	ldr	x1, [x20, #8]
  f8:	mov	w2, #0x2                   	// #2
  fc:	mov	w0, #0x1                   	// #1
 100:	ldr	x30, [sp, #16]
 104:	str	w2, [x1]
 108:	ldp	x19, x20, [sp], #32
 10c:	ret

Disassembly of section .text._ZN11__sanitizer11FlagHandlerIbE5ParseEPKc:

0000000000000000 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>:
   0:	mov	x2, x0
   4:	stp	x19, x20, [sp, #-32]!
   8:	mov	x19, x1
   c:	mov	x0, x19
  10:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  14:	add	x1, x1, #0x0
  18:	ldr	x20, [x2, #8]
  1c:	str	x30, [sp, #16]
  20:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  24:	cbnz	w0, 3c <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x3c>
  28:	mov	w0, #0x1                   	// #1
  2c:	strb	wzr, [x20]
  30:	ldr	x30, [sp, #16]
  34:	ldp	x19, x20, [sp], #32
  38:	ret
  3c:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  40:	mov	x0, x19
  44:	add	x1, x1, #0x0
  48:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  4c:	cbz	w0, 28 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x28>
  50:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  54:	mov	x0, x19
  58:	add	x1, x1, #0x0
  5c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  60:	cbz	w0, 28 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x28>
  64:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  68:	mov	x0, x19
  6c:	add	x1, x1, #0x0
  70:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  74:	cbz	w0, 8c <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x8c>
  78:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  7c:	mov	x0, x19
  80:	add	x1, x1, #0x0
  84:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  88:	cbnz	w0, 9c <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x9c>
  8c:	mov	w1, #0x1                   	// #1
  90:	mov	w0, #0x1                   	// #1
  94:	strb	w1, [x20]
  98:	b	30 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x30>
  9c:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  a0:	mov	x0, x19
  a4:	add	x1, x1, #0x0
  a8:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  ac:	cbz	w0, 8c <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x8c>
  b0:	mov	x1, x19
  b4:	adrp	x0, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  b8:	add	x0, x0, #0x0
  bc:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  c0:	mov	w0, #0x0                   	// #0
  c4:	ldr	x30, [sp, #16]
  c8:	ldp	x19, x20, [sp], #32
  cc:	ret

Disassembly of section .text._ZN11__sanitizer18FlagHandlerInclude5ParseEPKc:

0000000000000000 <_ZN11__sanitizer18FlagHandlerInclude5ParseEPKc>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x1
   8:	mov	x20, x0
   c:	mov	x0, x1
  10:	mov	w1, #0x25                  	// #37
  14:	str	x30, [sp, #24]
  18:	bl	0 <_ZN11__sanitizer15internal_strchrEPKci>
  1c:	cbz	x0, 80 <_ZN11__sanitizer18FlagHandlerInclude5ParseEPKc+0x80>
  20:	mov	w2, #0x0                   	// #0
  24:	adrp	x1, 0 <_ZN11__sanitizer18FlagHandlerInclude5ParseEPKc>
  28:	mov	x0, #0x1000                	// #4096
  2c:	add	x1, x1, #0x0
  30:	str	x21, [sp, #16]
  34:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  38:	mov	x21, x0
  3c:	mov	x2, #0x1000                	// #4096
  40:	mov	x0, x19
  44:	mov	x1, x21
  48:	bl	2c0 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm>
  4c:	ldrb	w2, [x20, #16]
  50:	mov	x1, x21
  54:	ldr	x0, [x20, #8]
  58:	bl	0 <_ZN11__sanitizer10FlagParser9ParseFileEPKcb>
  5c:	mov	w19, w0
  60:	mov	x1, #0x1000                	// #4096
  64:	mov	x0, x21
  68:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  6c:	mov	w0, w19
  70:	ldr	x21, [sp, #16]
  74:	ldr	x30, [sp, #24]
  78:	ldp	x19, x20, [sp], #32
  7c:	ret
  80:	ldrb	w2, [x20, #16]
  84:	mov	x1, x19
  88:	ldr	x0, [x20, #8]
  8c:	ldr	x30, [sp, #24]
  90:	ldp	x19, x20, [sp], #32
  94:	b	0 <_ZN11__sanitizer10FlagParser9ParseFileEPKcb>

sanitizer_libc.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer15internal_memchrEPKvim>:
   0:	cbz	x2, 28 <_ZN11__sanitizer15internal_memchrEPKvim+0x28>
   4:	add	x3, x0, x2
   8:	b	18 <_ZN11__sanitizer15internal_memchrEPKvim+0x18>
   c:	add	x0, x0, #0x1
  10:	cmp	x3, x0
  14:	b.eq	28 <_ZN11__sanitizer15internal_memchrEPKvim+0x28>  // b.none
  18:	ldrb	w2, [x0]
  1c:	cmp	w2, w1
  20:	b.ne	c <_ZN11__sanitizer15internal_memchrEPKvim+0xc>  // b.any
  24:	ret
  28:	mov	x0, #0x0                   	// #0
  2c:	ret

0000000000000030 <_ZN11__sanitizer16internal_memrchrEPKvim>:
  30:	mov	x3, x0
  34:	cbz	x2, 5c <_ZN11__sanitizer16internal_memrchrEPKvim+0x2c>
  38:	add	x4, x0, x2
  3c:	mov	x0, #0x0                   	// #0
  40:	ldrb	w2, [x3]
  44:	cmp	w2, w1
  48:	csel	x0, x0, x3, ne  // ne = any
  4c:	add	x3, x3, #0x1
  50:	cmp	x4, x3
  54:	b.ne	40 <_ZN11__sanitizer16internal_memrchrEPKvim+0x10>  // b.any
  58:	ret
  5c:	mov	x0, #0x0                   	// #0
  60:	ret
  64:	nop

0000000000000068 <_ZN11__sanitizer15internal_memcmpEPKvS1_m>:
  68:	cbz	x2, 9c <_ZN11__sanitizer15internal_memcmpEPKvS1_m+0x34>
  6c:	mov	x3, #0x0                   	// #0
  70:	b	7c <_ZN11__sanitizer15internal_memcmpEPKvS1_m+0x14>
  74:	cmp	x2, x3
  78:	b.eq	9c <_ZN11__sanitizer15internal_memcmpEPKvS1_m+0x34>  // b.none
  7c:	ldrb	w5, [x0, x3]
  80:	ldrb	w4, [x1, x3]
  84:	add	x3, x3, #0x1
  88:	cmp	w5, w4
  8c:	b.eq	74 <_ZN11__sanitizer15internal_memcmpEPKvS1_m+0xc>  // b.none
  90:	mov	w0, #0x1                   	// #1
  94:	cneg	w0, w0, cc  // cc = lo, ul, last
  98:	ret
  9c:	mov	w0, #0x0                   	// #0
  a0:	ret
  a4:	nop

00000000000000a8 <_ZN11__sanitizer15internal_memcpyEPvPKvm>:
  a8:	cbz	x2, c4 <_ZN11__sanitizer15internal_memcpyEPvPKvm+0x1c>
  ac:	mov	x3, #0x0                   	// #0
  b0:	ldrb	w4, [x1, x3]
  b4:	strb	w4, [x0, x3]
  b8:	add	x3, x3, #0x1
  bc:	cmp	x2, x3
  c0:	b.ne	b0 <_ZN11__sanitizer15internal_memcpyEPvPKvm+0x8>  // b.any
  c4:	ret

00000000000000c8 <_ZN11__sanitizer16internal_memmoveEPvPKvm>:
  c8:	cmp	x0, x1
  cc:	b.cs	f8 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x30>  // b.hs, b.nlast
  d0:	cmp	x2, #0x0
  d4:	b.le	f4 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x2c>
  d8:	mov	x3, #0x0                   	// #0
  dc:	nop
  e0:	ldrb	w4, [x1, x3]
  e4:	strb	w4, [x0, x3]
  e8:	add	x3, x3, #0x1
  ec:	cmp	x2, x3
  f0:	b.ne	e0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x18>  // b.any
  f4:	ret
  f8:	cmp	x2, #0x0
  fc:	ccmp	x0, x1, #0x0, gt
 100:	b.ls	f4 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x2c>  // b.plast
 104:	sub	x2, x2, #0x1
 108:	ldrb	w3, [x1, x2]
 10c:	strb	w3, [x0, x2]
 110:	sub	x2, x2, #0x1
 114:	cmn	x2, #0x1
 118:	b.ne	108 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x40>  // b.any
 11c:	ret

0000000000000120 <_ZN11__sanitizer15internal_memsetEPvim>:
 120:	orr	x3, x0, x2
 124:	tst	x3, #0xf
 128:	b.eq	150 <_ZN11__sanitizer15internal_memsetEPvim+0x30>  // b.none
 12c:	cbz	x2, 14c <_ZN11__sanitizer15internal_memsetEPvim+0x2c>
 130:	and	w3, w1, #0xff
 134:	add	x2, x0, x2
 138:	mov	x1, x0
 13c:	nop
 140:	strb	w3, [x1], #1
 144:	cmp	x2, x1
 148:	b.ne	140 <_ZN11__sanitizer15internal_memsetEPvim+0x20>  // b.any
 14c:	ret
 150:	sxtw	x3, w1
 154:	sbfiz	x1, x1, #8, #32
 158:	orr	x3, x3, x1
 15c:	and	x2, x2, #0xfffffffffffffff8
 160:	add	x1, x0, x2
 164:	mov	x2, x0
 168:	orr	x3, x3, x3, lsl #16
 16c:	cmp	x0, x1
 170:	orr	x3, x3, x3, lsl #32
 174:	b.cs	14c <_ZN11__sanitizer15internal_memsetEPvim+0x2c>  // b.hs, b.nlast
 178:	str	x3, [x2, #8]
 17c:	str	x3, [x2], #16
 180:	cmp	x1, x2
 184:	b.hi	178 <_ZN11__sanitizer15internal_memsetEPvim+0x58>  // b.pmore
 188:	ret
 18c:	nop

0000000000000190 <_ZN11__sanitizer16internal_strcspnEPKcS1_>:
 190:	ldrb	w4, [x0]
 194:	mov	x6, x0
 198:	cbz	w4, 1dc <_ZN11__sanitizer16internal_strcspnEPKcS1_+0x4c>
 19c:	ldrb	w5, [x1]
 1a0:	mov	x0, #0x0                   	// #0
 1a4:	nop
 1a8:	cmp	w4, w5
 1ac:	b.eq	1c8 <_ZN11__sanitizer16internal_strcspnEPKcS1_+0x38>  // b.none
 1b0:	mov	w2, w5
 1b4:	mov	x3, x1
 1b8:	cbz	w2, 1cc <_ZN11__sanitizer16internal_strcspnEPKcS1_+0x3c>
 1bc:	ldrb	w2, [x3, #1]!
 1c0:	cmp	w4, w2
 1c4:	b.ne	1b8 <_ZN11__sanitizer16internal_strcspnEPKcS1_+0x28>  // b.any
 1c8:	ret
 1cc:	add	x0, x0, #0x1
 1d0:	ldrb	w4, [x6, x0]
 1d4:	cbnz	w4, 1a8 <_ZN11__sanitizer16internal_strcspnEPKcS1_+0x18>
 1d8:	ret
 1dc:	mov	x0, #0x0                   	// #0
 1e0:	ret
 1e4:	nop

00000000000001e8 <_ZN11__sanitizer15internal_strdupEPKc>:
 1e8:	stp	x19, x20, [sp, #-32]!
 1ec:	mov	x20, x0
 1f0:	str	x30, [sp, #24]
 1f4:	ldrb	w0, [x0]
 1f8:	cbz	w0, 25c <_ZN11__sanitizer15internal_strdupEPKc+0x74>
 1fc:	mov	x19, #0x0                   	// #0
 200:	str	x21, [sp, #16]
 204:	nop
 208:	mov	x21, x19
 20c:	add	x19, x19, #0x1
 210:	ldrb	w0, [x20, x19]
 214:	cbnz	w0, 208 <_ZN11__sanitizer15internal_strdupEPKc+0x20>
 218:	mov	x1, #0x0                   	// #0
 21c:	add	x0, x21, #0x2
 220:	mov	x2, #0x0                   	// #0
 224:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 228:	mov	x1, #0x0                   	// #0
 22c:	nop
 230:	ldrb	w3, [x20, x1]
 234:	cmp	x1, x21
 238:	strb	w3, [x0, x1]
 23c:	add	x1, x1, #0x1
 240:	b.ne	230 <_ZN11__sanitizer15internal_strdupEPKc+0x48>  // b.any
 244:	add	x19, x0, x19
 248:	ldr	x21, [sp, #16]
 24c:	strb	wzr, [x19]
 250:	ldr	x30, [sp, #24]
 254:	ldp	x19, x20, [sp], #32
 258:	ret
 25c:	mov	x2, #0x0                   	// #0
 260:	mov	x1, #0x0                   	// #0
 264:	mov	x0, #0x1                   	// #1
 268:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 26c:	mov	x19, x0
 270:	strb	wzr, [x19]
 274:	ldr	x30, [sp, #24]
 278:	ldp	x19, x20, [sp], #32
 27c:	ret

0000000000000280 <_ZN11__sanitizer15internal_strcmpEPKcS1_>:
 280:	ldrb	w3, [x0]
 284:	mov	x2, #0x1                   	// #1
 288:	ldrb	w4, [x1]
 28c:	cmp	w4, w3
 290:	b.ne	2b0 <_ZN11__sanitizer15internal_strcmpEPKcS1_+0x30>  // b.any
 294:	nop
 298:	cbz	w3, 2c0 <_ZN11__sanitizer15internal_strcmpEPKcS1_+0x40>
 29c:	ldrb	w3, [x0, x2]
 2a0:	ldrb	w4, [x1, x2]
 2a4:	add	x2, x2, #0x1
 2a8:	cmp	w3, w4
 2ac:	b.eq	298 <_ZN11__sanitizer15internal_strcmpEPKcS1_+0x18>  // b.none
 2b0:	cmp	w3, w4
 2b4:	mov	w0, #0x1                   	// #1
 2b8:	cneg	w0, w0, cc  // cc = lo, ul, last
 2bc:	ret
 2c0:	mov	w0, #0x0                   	// #0
 2c4:	ret

00000000000002c8 <_ZN11__sanitizer16internal_strncmpEPKcS1_m>:
 2c8:	cbz	x2, 300 <_ZN11__sanitizer16internal_strncmpEPKcS1_m+0x38>
 2cc:	mov	x3, #0x0                   	// #0
 2d0:	b	2e0 <_ZN11__sanitizer16internal_strncmpEPKcS1_m+0x18>
 2d4:	cbz	w4, 300 <_ZN11__sanitizer16internal_strncmpEPKcS1_m+0x38>
 2d8:	cmp	x2, x3
 2dc:	b.eq	300 <_ZN11__sanitizer16internal_strncmpEPKcS1_m+0x38>  // b.none
 2e0:	ldrb	w4, [x0, x3]
 2e4:	ldrb	w5, [x1, x3]
 2e8:	add	x3, x3, #0x1
 2ec:	cmp	w4, w5
 2f0:	b.eq	2d4 <_ZN11__sanitizer16internal_strncmpEPKcS1_m+0xc>  // b.none
 2f4:	mov	w0, #0x1                   	// #1
 2f8:	cneg	w0, w0, cc  // cc = lo, ul, last
 2fc:	ret
 300:	mov	w0, #0x0                   	// #0
 304:	ret

0000000000000308 <_ZN11__sanitizer15internal_strchrEPKci>:
 308:	ldrb	w2, [x0]
 30c:	and	w3, w1, #0xff
 310:	cmp	w2, w1, uxtb
 314:	b.eq	328 <_ZN11__sanitizer15internal_strchrEPKci+0x20>  // b.none
 318:	cbz	w2, 32c <_ZN11__sanitizer15internal_strchrEPKci+0x24>
 31c:	ldrb	w2, [x0, #1]!
 320:	cmp	w2, w3
 324:	b.ne	318 <_ZN11__sanitizer15internal_strchrEPKci+0x10>  // b.any
 328:	ret
 32c:	mov	x0, #0x0                   	// #0
 330:	ret
 334:	nop

0000000000000338 <_ZN11__sanitizer18internal_strchrnulEPKci>:
 338:	ldrb	w4, [x0]
 33c:	mov	x2, x0
 340:	and	w3, w1, #0xff
 344:	cmp	w4, w1, uxtb
 348:	b.eq	360 <_ZN11__sanitizer18internal_strchrnulEPKci+0x28>  // b.none
 34c:	mov	w1, w4
 350:	cbz	w1, 364 <_ZN11__sanitizer18internal_strchrnulEPKci+0x2c>
 354:	ldrb	w1, [x0, #1]!
 358:	cmp	w1, w3
 35c:	b.ne	350 <_ZN11__sanitizer18internal_strchrnulEPKci+0x18>  // b.any
 360:	ret
 364:	cbz	w4, 380 <_ZN11__sanitizer18internal_strchrnulEPKci+0x48>
 368:	add	x1, x2, #0x1
 36c:	nop
 370:	mov	x0, x1
 374:	ldrb	w2, [x1], #1
 378:	cbnz	w2, 370 <_ZN11__sanitizer18internal_strchrnulEPKci+0x38>
 37c:	ret
 380:	mov	x0, x2
 384:	ret

0000000000000388 <_ZN11__sanitizer16internal_strrchrEPKci>:
 388:	ldrb	w3, [x0]
 38c:	mov	x2, x0
 390:	mov	x0, #0x0                   	// #0
 394:	cbz	w3, 3a8 <_ZN11__sanitizer16internal_strrchrEPKci+0x20>
 398:	cmp	w3, w1
 39c:	csel	x0, x0, x2, ne  // ne = any
 3a0:	ldrb	w3, [x2, #1]!
 3a4:	cbnz	w3, 398 <_ZN11__sanitizer16internal_strrchrEPKci+0x10>
 3a8:	ret
 3ac:	nop

00000000000003b0 <_ZN11__sanitizer15internal_strlenEPKc>:
 3b0:	mov	x2, x0
 3b4:	ldrb	w0, [x0]
 3b8:	cbz	w0, 3d0 <_ZN11__sanitizer15internal_strlenEPKc+0x20>
 3bc:	mov	x0, #0x0                   	// #0
 3c0:	add	x0, x0, #0x1
 3c4:	ldrb	w1, [x2, x0]
 3c8:	cbnz	w1, 3c0 <_ZN11__sanitizer15internal_strlenEPKc+0x10>
 3cc:	ret
 3d0:	mov	x0, #0x0                   	// #0
 3d4:	ret

00000000000003d8 <_ZN11__sanitizer16internal_strlcatEPcPKcm>:
 3d8:	mov	x7, x0
 3dc:	ldrb	w0, [x1]
 3e0:	mov	x8, x2
 3e4:	mov	x6, #0x0                   	// #0
 3e8:	cbz	w0, 3fc <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x24>
 3ec:	nop
 3f0:	add	x6, x6, #0x1
 3f4:	ldrb	w3, [x1, x6]
 3f8:	cbnz	w3, 3f0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x18>
 3fc:	cbz	x8, 460 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x88>
 400:	mov	x5, #0x0                   	// #0
 404:	b	414 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x3c>
 408:	add	x5, x5, #0x1
 40c:	cmp	x8, x5
 410:	b.eq	460 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x88>  // b.none
 414:	ldrb	w3, [x7, x5]
 418:	add	x0, x7, x5
 41c:	cbnz	w3, 408 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x30>
 420:	str	x30, [sp, #-16]!
 424:	sub	x2, x8, x5
 428:	cmp	x2, x6
 42c:	b.hi	44c <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x74>  // b.pmore
 430:	sub	x2, x2, #0x1
 434:	bl	c8 <_ZN11__sanitizer16internal_memmoveEPvPKvm>
 438:	add	x7, x7, x8
 43c:	add	x0, x6, x5
 440:	sturb	wzr, [x7, #-1]
 444:	ldr	x30, [sp], #16
 448:	ret
 44c:	add	x2, x6, #0x1
 450:	bl	c8 <_ZN11__sanitizer16internal_memmoveEPvPKvm>
 454:	add	x0, x6, x5
 458:	ldr	x30, [sp], #16
 45c:	ret
 460:	add	x0, x8, x6
 464:	ret

0000000000000468 <_ZN11__sanitizer16internal_strncatEPcPKcm>:
 468:	ldrb	w3, [x0]
 46c:	mov	x4, #0x0                   	// #0
 470:	cbz	w3, 4d0 <_ZN11__sanitizer16internal_strncatEPcPKcm+0x68>
 474:	nop
 478:	add	x4, x4, #0x1
 47c:	add	x5, x0, x4
 480:	ldrb	w3, [x0, x4]
 484:	cbnz	w3, 478 <_ZN11__sanitizer16internal_strncatEPcPKcm+0x10>
 488:	add	x6, x0, x4
 48c:	mov	x3, #0x0                   	// #0
 490:	cbnz	x2, 4a4 <_ZN11__sanitizer16internal_strncatEPcPKcm+0x3c>
 494:	b	4b8 <_ZN11__sanitizer16internal_strncatEPcPKcm+0x50>
 498:	strb	w7, [x6]
 49c:	add	x6, x6, #0x1
 4a0:	b.eq	4c0 <_ZN11__sanitizer16internal_strncatEPcPKcm+0x58>  // b.none
 4a4:	ldrb	w7, [x1, x3]
 4a8:	add	x3, x3, #0x1
 4ac:	mov	x5, x6
 4b0:	cmp	x2, x3
 4b4:	cbnz	w7, 498 <_ZN11__sanitizer16internal_strncatEPcPKcm+0x30>
 4b8:	strb	wzr, [x5]
 4bc:	ret
 4c0:	add	x4, x2, x4
 4c4:	add	x5, x0, x4
 4c8:	strb	wzr, [x5]
 4cc:	ret
 4d0:	mov	x5, x0
 4d4:	b	488 <_ZN11__sanitizer16internal_strncatEPcPKcm+0x20>

00000000000004d8 <_ZN11__sanitizer16internal_strlcpyEPcPKcm>:
 4d8:	mov	x7, x0
 4dc:	ldrb	w0, [x1]
 4e0:	str	x30, [sp, #-16]!
 4e4:	mov	x5, #0x0                   	// #0
 4e8:	cbz	w0, 4fc <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x24>
 4ec:	nop
 4f0:	add	x5, x5, #0x1
 4f4:	ldrb	w3, [x1, x5]
 4f8:	cbnz	w3, 4f0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x18>
 4fc:	cmp	x2, x5
 500:	b.hi	534 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x5c>  // b.pmore
 504:	cbnz	x2, 514 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x3c>
 508:	mov	x0, x5
 50c:	ldr	x30, [sp], #16
 510:	ret
 514:	sub	x6, x2, #0x1
 518:	mov	x0, x7
 51c:	mov	x2, x6
 520:	bl	c8 <_ZN11__sanitizer16internal_memmoveEPvPKvm>
 524:	strb	wzr, [x7, x6]
 528:	mov	x0, x5
 52c:	ldr	x30, [sp], #16
 530:	ret
 534:	mov	x0, x7
 538:	add	x2, x5, #0x1
 53c:	bl	c8 <_ZN11__sanitizer16internal_memmoveEPvPKvm>
 540:	mov	x0, x5
 544:	ldr	x30, [sp], #16
 548:	ret
 54c:	nop

0000000000000550 <_ZN11__sanitizer16internal_strncpyEPcPKcm>:
 550:	str	x30, [sp, #-16]!
 554:	mov	x5, x0
 558:	cbz	x2, 584 <_ZN11__sanitizer16internal_strncpyEPcPKcm+0x34>
 55c:	mov	x3, #0x0                   	// #0
 560:	b	574 <_ZN11__sanitizer16internal_strncpyEPcPKcm+0x24>
 564:	strb	w4, [x5, x3]
 568:	add	x3, x3, #0x1
 56c:	cmp	x2, x3
 570:	b.eq	598 <_ZN11__sanitizer16internal_strncpyEPcPKcm+0x48>  // b.none
 574:	ldrb	w4, [x1, x3]
 578:	add	x0, x5, x3
 57c:	cbnz	w4, 564 <_ZN11__sanitizer16internal_strncpyEPcPKcm+0x14>
 580:	sub	x2, x2, x3
 584:	mov	w1, #0x0                   	// #0
 588:	bl	120 <_ZN11__sanitizer15internal_memsetEPvim>
 58c:	mov	x0, x5
 590:	ldr	x30, [sp], #16
 594:	ret
 598:	add	x0, x5, x2
 59c:	mov	w1, #0x0                   	// #0
 5a0:	mov	x2, #0x0                   	// #0
 5a4:	bl	120 <_ZN11__sanitizer15internal_memsetEPvim>
 5a8:	mov	x0, x5
 5ac:	ldr	x30, [sp], #16
 5b0:	ret
 5b4:	nop

00000000000005b8 <_ZN11__sanitizer16internal_strnlenEPKcm>:
 5b8:	mov	x3, x0
 5bc:	mov	x0, #0x0                   	// #0
 5c0:	cbnz	x1, 5d4 <_ZN11__sanitizer16internal_strnlenEPKcm+0x1c>
 5c4:	b	5dc <_ZN11__sanitizer16internal_strnlenEPKcm+0x24>
 5c8:	add	x0, x0, #0x1
 5cc:	cmp	x1, x0
 5d0:	b.eq	5dc <_ZN11__sanitizer16internal_strnlenEPKcm+0x24>  // b.none
 5d4:	ldrb	w2, [x3, x0]
 5d8:	cbnz	w2, 5c8 <_ZN11__sanitizer16internal_strnlenEPKcm+0x10>
 5dc:	ret

00000000000005e0 <_ZN11__sanitizer15internal_strstrEPKcS1_>:
 5e0:	mov	x8, x0
 5e4:	ldrb	w0, [x0]
 5e8:	mov	x2, #0x0                   	// #0
 5ec:	cbz	w0, 5fc <_ZN11__sanitizer15internal_strstrEPKcS1_+0x1c>
 5f0:	add	x2, x2, #0x1
 5f4:	ldrb	w3, [x8, x2]
 5f8:	cbnz	w3, 5f0 <_ZN11__sanitizer15internal_strstrEPKcS1_+0x10>
 5fc:	ldrb	w10, [x1]
 600:	cbz	w10, 670 <_ZN11__sanitizer15internal_strstrEPKcS1_+0x90>
 604:	mov	x4, #0x0                   	// #0
 608:	mov	x5, x4
 60c:	add	x4, x4, #0x1
 610:	ldrb	w3, [x1, x4]
 614:	cbnz	w3, 608 <_ZN11__sanitizer15internal_strstrEPKcS1_+0x28>
 618:	cmp	x4, x2
 61c:	b.hi	668 <_ZN11__sanitizer15internal_strstrEPKcS1_+0x88>  // b.pmore
 620:	sub	x4, x2, x4
 624:	mov	x9, #0x0                   	// #0
 628:	add	x0, x8, x9
 62c:	mov	w7, w10
 630:	mov	x2, #0x0                   	// #0
 634:	b	648 <_ZN11__sanitizer15internal_strstrEPKcS1_+0x68>
 638:	cmp	x5, x2
 63c:	b.eq	66c <_ZN11__sanitizer15internal_strstrEPKcS1_+0x8c>  // b.none
 640:	ldrb	w7, [x1, x3]
 644:	mov	x2, x3
 648:	ldrb	w6, [x0, x2]
 64c:	add	x3, x2, #0x1
 650:	cmp	w6, w7
 654:	b.eq	638 <_ZN11__sanitizer15internal_strstrEPKcS1_+0x58>  // b.none
 658:	add	x9, x9, #0x1
 65c:	cmp	x9, x4
 660:	b.ls	628 <_ZN11__sanitizer15internal_strstrEPKcS1_+0x48>  // b.plast
 664:	nop
 668:	mov	x0, #0x0                   	// #0
 66c:	ret
 670:	mov	x0, x8
 674:	ret

0000000000000678 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i>:
 678:	cmp	w2, #0xa
 67c:	b.ne	770 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0xf8>  // b.any
 680:	ldrb	w2, [x0]
 684:	cmp	w2, #0x20
 688:	b.eq	730 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0xb8>  // b.none
 68c:	sub	w3, w2, #0x9
 690:	and	w3, w3, #0xff
 694:	cmp	w3, #0x4
 698:	b.ls	730 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0xb8>  // b.plast
 69c:	cmp	w2, #0x2b
 6a0:	b.eq	75c <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0xe4>  // b.none
 6a4:	cmp	w2, #0x2d
 6a8:	b.eq	738 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0xc0>  // b.none
 6ac:	mov	w4, w2
 6b0:	mov	x5, x0
 6b4:	mov	w8, #0x1                   	// #1
 6b8:	sub	w2, w2, #0x30
 6bc:	cmp	w2, #0x9
 6c0:	b.hi	794 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0x11c>  // b.pmore
 6c4:	mov	x7, #0x9999999999999999    	// #-7378697629483820647
 6c8:	mov	x3, #0x0                   	// #0
 6cc:	movk	x7, #0x1999, lsl #48
 6d0:	mov	x6, #0xffffffffffffffff    	// #-1
 6d4:	nop
 6d8:	sub	w0, w4, #0x30
 6dc:	add	x2, x3, x3, lsl #2
 6e0:	cmp	x3, x7
 6e4:	ldrb	w4, [x5, #1]!
 6e8:	sxtw	x0, w0
 6ec:	lsl	x2, x2, #1
 6f0:	csel	x2, x2, x6, ls  // ls = plast
 6f4:	mvn	x3, x0
 6f8:	cmp	x3, x2
 6fc:	add	x0, x0, x2
 700:	sub	w2, w4, #0x30
 704:	csel	x3, x0, x6, cs  // cs = hs, nlast
 708:	cmp	w2, #0x9
 70c:	b.ls	6d8 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0x60>  // b.plast
 710:	cbz	x1, 718 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0xa0>
 714:	str	x5, [x1]
 718:	cmp	w8, #0x1
 71c:	b.ne	74c <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0xd4>  // b.any
 720:	mov	x0, #0x7fffffffffffffff    	// #9223372036854775807
 724:	cmp	x3, x0
 728:	csel	x0, x3, x0, ls  // ls = plast
 72c:	ret
 730:	add	x0, x0, #0x1
 734:	b	680 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0x8>
 738:	ldrb	w2, [x0, #1]
 73c:	add	x5, x0, #0x1
 740:	mov	w8, #0xffffffff            	// #-1
 744:	mov	w4, w2
 748:	b	6b8 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0x40>
 74c:	cmp	x3, #0x0
 750:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 754:	csneg	x0, x0, x3, lt  // lt = tstop
 758:	ret
 75c:	ldrb	w2, [x0, #1]
 760:	add	x5, x0, #0x1
 764:	mov	w8, #0x1                   	// #1
 768:	mov	w4, w2
 76c:	b	6b8 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0x40>
 770:	str	x30, [sp, #-16]!
 774:	sxtw	x3, w2
 778:	adrp	x0, 0 <_ZN11__sanitizer15internal_memchrEPKvim>
 77c:	adrp	x2, 0 <_ZN11__sanitizer15internal_memchrEPKvim>
 780:	add	x0, x0, #0x0
 784:	add	x2, x2, #0x0
 788:	mov	x4, #0xa                   	// #10
 78c:	mov	w1, #0xe5                  	// #229
 790:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 794:	mov	x5, x0
 798:	mov	x3, #0x0                   	// #0
 79c:	cbnz	x1, 714 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0x9c>
 7a0:	mov	x0, #0x0                   	// #0
 7a4:	ret

00000000000007a8 <_ZN11__sanitizer14internal_atollEPKc>:
 7a8:	mov	w2, #0xa                   	// #10
 7ac:	mov	x1, #0x0                   	// #0
 7b0:	b	678 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i>
 7b4:	nop

00000000000007b8 <_ZN11__sanitizer11mem_is_zeroEPKcm>:
 7b8:	mov	x4, #0x10000000000         	// #1099511627776
 7bc:	cmp	x1, x4
 7c0:	b.hi	848 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x90>  // b.pmore
 7c4:	add	x5, x0, x1
 7c8:	add	x2, x0, #0x7
 7cc:	cmp	x0, x5
 7d0:	and	x2, x2, #0xfffffffffffffff8
 7d4:	ccmp	x0, x2, #0x2, cc  // cc = lo, ul, last
 7d8:	and	x4, x5, #0xfffffffffffffff8
 7dc:	mov	x3, x0
 7e0:	mov	x1, #0x0                   	// #0
 7e4:	b.cs	7fc <_ZN11__sanitizer11mem_is_zeroEPKcm+0x44>  // b.hs, b.nlast
 7e8:	ldrb	w6, [x3], #1
 7ec:	cmp	x2, x3
 7f0:	orr	x1, x1, x6
 7f4:	ccmp	x5, x3, #0x0, hi  // hi = pmore
 7f8:	b.hi	7e8 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x30>  // b.pmore
 7fc:	cmp	x2, x4
 800:	b.cs	818 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x60>  // b.hs, b.nlast
 804:	nop
 808:	ldr	x3, [x2], #8
 80c:	orr	x1, x1, x3
 810:	cmp	x4, x2
 814:	b.hi	808 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x50>  // b.pmore
 818:	cmp	x0, x4
 81c:	b.ls	834 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x7c>  // b.plast
 820:	cmp	x1, #0x0
 824:	cset	w0, eq  // eq = none
 828:	ret
 82c:	ldrb	w0, [x4], #1
 830:	orr	x1, x1, x0
 834:	cmp	x5, x4
 838:	b.hi	82c <_ZN11__sanitizer11mem_is_zeroEPKcm+0x74>  // b.pmore
 83c:	cmp	x1, #0x0
 840:	cset	w0, eq  // eq = none
 844:	ret
 848:	str	x30, [sp, #-16]!
 84c:	mov	x3, x1
 850:	adrp	x2, 0 <_ZN11__sanitizer15internal_memchrEPKvim>
 854:	adrp	x0, 0 <_ZN11__sanitizer15internal_memchrEPKvim>
 858:	add	x2, x2, #0x0
 85c:	add	x0, x0, #0x0
 860:	mov	w1, #0x104                 	// #260
 864:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

sanitizer_libignore.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>:
   0:	mov	x1, #0x4810                	// #18448
   4:	add	x0, x0, x1
   8:	b	0 <_ZN11__sanitizer13BlockingMutexC1Ev>
   c:	nop

0000000000000010 <_ZN11__sanitizer9LibIgnore17AddIgnoredLibraryEPKc>:
  10:	stp	x19, x20, [sp, #-48]!
  14:	mov	x20, x0
  18:	stp	x21, x22, [sp, #16]
  1c:	mov	x21, x1
  20:	mov	x1, #0x4810                	// #18448
  24:	add	x22, x0, x1
  28:	str	x30, [sp, #32]
  2c:	mov	x0, x22
  30:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
  34:	ldr	x19, [x20, #18536]
  38:	cmp	x19, #0x3ff
  3c:	b.hi	80 <_ZN11__sanitizer9LibIgnore17AddIgnoredLibraryEPKc+0x70>  // b.pmore
  40:	add	x0, x19, #0x1
  44:	str	x0, [x20, #18536]
  48:	mov	x0, x21
  4c:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
  50:	mov	x3, x0
  54:	add	x1, x20, x19, lsl #5
  58:	mov	x0, x22
  5c:	add	x2, x1, #0x4, lsl #12
  60:	ldp	x21, x22, [sp, #16]
  64:	ldr	x30, [sp, #32]
  68:	str	x3, [x1, #18544]
  6c:	str	xzr, [x1, #18552]
  70:	str	xzr, [x1, #18560]
  74:	strb	wzr, [x2, #2184]
  78:	ldp	x19, x20, [sp], #48
  7c:	b	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
  80:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  84:	adrp	x0, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
  88:	add	x0, x0, #0x0
  8c:	mov	x2, #0x400                 	// #1024
  90:	ldr	x1, [x1]
  94:	ldr	x1, [x1]
  98:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  9c:	bl	0 <_ZN11__sanitizer3DieEv>

00000000000000a0 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc>:
  a0:	stp	x19, x20, [sp, #-160]!
  a4:	mov	x3, #0x4810                	// #18448
  a8:	mov	x20, x0
  ac:	stp	x21, x22, [sp, #16]
  b0:	adrp	x21, 0 <_ZN11__sanitizer14PageSizeCachedE>
  b4:	add	x0, x0, x3
  b8:	mov	x19, x1
  bc:	stp	x23, x24, [sp, #32]
  c0:	stp	x25, x26, [sp, #48]
  c4:	str	x30, [sp, #80]
  c8:	str	x0, [sp, #112]
  cc:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
  d0:	ldr	x22, [x21]
  d4:	ldr	x0, [x22]
  d8:	cbz	x0, 384 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x2e4>
  dc:	sub	x1, x0, #0x1
  e0:	tst	x1, x0
  e4:	b.ne	424 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x384>  // b.any
  e8:	add	x25, x0, #0xfff
  ec:	neg	x0, x0
  f0:	and	x23, x25, x0
  f4:	mov	w2, #0x0                   	// #0
  f8:	mov	x0, x23
  fc:	adrp	x22, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 100:	add	x1, x22, #0x0
 104:	str	x23, [sp, #120]
 108:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 10c:	mov	x24, x0
 110:	mov	x2, #0x0                   	// #0
 114:	mov	x1, #0x0                   	// #0
 118:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 11c:	mov	x1, #0x0                   	// #0
 120:	mov	x0, #0x0                   	// #0
 124:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 128:	cmp	x23, #0xfff
 12c:	b.ls	390 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x2f0>  // b.plast
 130:	mov	x0, x24
 134:	mov	x2, #0x1000                	// #4096
 138:	mov	w1, #0x0                   	// #0
 13c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 140:	strb	wzr, [x24]
 144:	cbz	x19, 168 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0xc8>
 148:	mov	x1, x24
 14c:	mov	x0, x19
 150:	mov	x2, #0xfff                 	// #4095
 154:	bl	0 <_ZN11__sanitizer17internal_readlinkEPKcPcm>
 158:	cbz	x0, 168 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0xc8>
 15c:	ldrb	w0, [x24]
 160:	cbnz	w0, 3ec <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x34c>
 164:	nop
 168:	add	x0, sp, #0x80
 16c:	strb	wzr, [sp, #152]
 170:	bl	0 <_ZN11__sanitizer13ListOfModules4initEv>
 174:	ldr	x0, [x20, #18536]
 178:	cbz	x0, 28c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x1ec>
 17c:	adrp	x22, 0 <_ZN11__sanitizer17current_verbosityE>
 180:	mov	x0, #0x4870                	// #18544
 184:	adrp	x26, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 188:	add	x19, x20, x0
 18c:	ldr	x22, [x22]
 190:	add	x0, x26, #0x0
 194:	stp	x27, x28, [sp, #64]
 198:	stp	x0, xzr, [sp, #96]
 19c:	ldr	x21, [sp, #144]
 1a0:	ldr	x5, [sp, #128]
 1a4:	add	x21, x21, x21, lsl #3
 1a8:	add	x21, x5, x21, lsl #3
 1ac:	cmp	x5, x21
 1b0:	b.eq	474 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x3d4>  // b.none
 1b4:	mov	x28, x5
 1b8:	mov	w27, #0x0                   	// #0
 1bc:	mov	w23, #0x1                   	// #1
 1c0:	ldr	x26, [x28, #56]
 1c4:	cbz	x26, 24c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x1ac>
 1c8:	ldrb	w25, [x26, #24]
 1cc:	cbz	w25, 330 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x290>
 1d0:	ldr	x0, [x19]
 1d4:	ldr	x1, [x28]
 1d8:	bl	0 <_ZN11__sanitizer13TemplateMatchEPKcS1_>
 1dc:	tst	w0, #0xff
 1e0:	b.ne	1f8 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x158>  // b.any
 1e4:	ldr	x0, [x19, #16]
 1e8:	cbz	x0, 330 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x290>
 1ec:	ldr	x1, [x28]
 1f0:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 1f4:	cbnz	w0, 330 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x290>
 1f8:	cbnz	w27, 588 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x4e8>
 1fc:	ldrb	w27, [x19, #24]
 200:	cbnz	w27, 330 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x290>
 204:	ldr	w0, [x22]
 208:	cbnz	w0, 33c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x29c>
 20c:	strb	w23, [x19, #24]
 210:	ldr	x0, [x28]
 214:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 218:	ldr	x3, [x20]
 21c:	str	x0, [x19, #8]
 220:	cmp	x3, #0x7f
 224:	b.hi	368 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x2c8>  // b.pmore
 228:	add	x0, x20, x3, lsl #4
 22c:	add	x3, x3, #0x1
 230:	ldr	x1, [x26, #8]
 234:	str	x1, [x0, #8]
 238:	ldr	x1, [x26, #16]
 23c:	str	x1, [x0, #16]
 240:	dmb	ish
 244:	str	x3, [x20]
 248:	mov	w27, w25
 24c:	add	x28, x28, #0x48
 250:	cmp	x21, x28
 254:	b.ne	1c0 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x120>  // b.any
 258:	ldrb	w0, [x19, #24]
 25c:	eor	w0, w0, #0x1
 260:	orr	w2, w27, w0
 264:	tst	w2, #0xff
 268:	b.eq	5b8 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x518>  // b.none
 26c:	ldr	x1, [sp, #104]
 270:	add	x19, x19, #0x20
 274:	ldr	x0, [x20, #18536]
 278:	add	x1, x1, #0x1
 27c:	str	x1, [sp, #104]
 280:	cmp	x0, x1
 284:	b.hi	19c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0xfc>  // b.pmore
 288:	ldp	x27, x28, [sp, #64]
 28c:	add	x1, x20, #0xc, lsl #12
 290:	ldr	x0, [sp, #144]
 294:	ldrb	w1, [x1, #2160]
 298:	ldr	x19, [sp, #128]
 29c:	add	x0, x0, x0, lsl #3
 2a0:	add	x22, x19, x0, lsl #3
 2a4:	cbz	w1, 2e8 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x248>
 2a8:	mov	x21, x19
 2ac:	cmp	x22, x19
 2b0:	b.eq	304 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x264>  // b.none
 2b4:	adrp	x23, 0 <_ZN11__sanitizer17current_verbosityE>
 2b8:	adrp	x26, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 2bc:	add	x26, x26, #0x0
 2c0:	ldr	x23, [x23]
 2c4:	ldrb	w0, [x21, #44]
 2c8:	cbnz	w0, 47c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x3dc>
 2cc:	add	x21, x21, #0x48
 2d0:	cmp	x22, x21
 2d4:	b.ne	2c4 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x224>  // b.any
 2d8:	ldr	x0, [sp, #144]
 2dc:	ldr	x19, [sp, #128]
 2e0:	add	x0, x0, x0, lsl #3
 2e4:	add	x22, x19, x0, lsl #3
 2e8:	cmp	x19, x22
 2ec:	b.eq	304 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x264>  // b.none
 2f0:	mov	x0, x19
 2f4:	add	x19, x19, #0x48
 2f8:	bl	0 <_ZN11__sanitizer12LoadedModule5clearEv>
 2fc:	cmp	x22, x19
 300:	b.ne	2f0 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x250>  // b.any
 304:	ldr	x1, [sp, #120]
 308:	mov	x0, x24
 30c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 310:	ldr	x0, [sp, #112]
 314:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 318:	ldp	x21, x22, [sp, #16]
 31c:	ldp	x23, x24, [sp, #32]
 320:	ldp	x25, x26, [sp, #48]
 324:	ldr	x30, [sp, #80]
 328:	ldp	x19, x20, [sp], #160
 32c:	ret
 330:	ldr	x26, [x26]
 334:	cbnz	x26, 1c8 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x128>
 338:	b	24c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x1ac>
 33c:	ldr	x1, [x19]
 340:	ldr	x2, [x28]
 344:	ldr	x0, [sp, #96]
 348:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 34c:	strb	w23, [x19, #24]
 350:	ldr	x0, [x28]
 354:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 358:	ldr	x3, [x20]
 35c:	str	x0, [x19, #8]
 360:	cmp	x3, #0x7f
 364:	b.ls	228 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x188>  // b.plast
 368:	adrp	x2, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 36c:	adrp	x0, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 370:	add	x2, x2, #0x0
 374:	add	x0, x0, #0x0
 378:	mov	x4, #0x80                  	// #128
 37c:	mov	w1, #0x52                  	// #82
 380:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 384:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 388:	str	x0, [x22]
 38c:	b	dc <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x3c>
 390:	ldr	x21, [x21]
 394:	ldr	x0, [x21]
 398:	cbz	x0, 468 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x3c8>
 39c:	sub	x1, x0, #0x1
 3a0:	tst	x1, x0
 3a4:	b.ne	424 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x384>  // b.any
 3a8:	add	x21, x0, #0xfff
 3ac:	neg	x0, x0
 3b0:	and	x21, x21, x0
 3b4:	add	x1, x22, #0x0
 3b8:	mov	x0, x21
 3bc:	mov	w2, #0x0                   	// #0
 3c0:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 3c4:	mov	x22, x0
 3c8:	mov	x1, x24
 3cc:	mov	x2, #0x0                   	// #0
 3d0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 3d4:	ldr	x1, [sp, #120]
 3d8:	mov	x0, x24
 3dc:	mov	x24, x22
 3e0:	str	x21, [sp, #120]
 3e4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 3e8:	b	130 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x90>
 3ec:	ldr	x1, [x20, #18536]
 3f0:	cbz	x1, 168 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0xc8>
 3f4:	mov	x2, #0x4870                	// #18544
 3f8:	add	x21, x20, x2
 3fc:	mov	x22, #0x0                   	// #0
 400:	ldrb	w0, [x21, #24]
 404:	cbnz	w0, 410 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x370>
 408:	ldr	x0, [x21, #16]
 40c:	cbz	x0, 438 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x398>
 410:	add	x22, x22, #0x1
 414:	add	x21, x21, #0x20
 418:	cmp	x1, x22
 41c:	b.hi	400 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x360>  // b.pmore
 420:	b	168 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0xc8>
 424:	adrp	x0, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 428:	add	x0, x0, #0x0
 42c:	stp	x27, x28, [sp, #64]
 430:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 434:	bl	0 <_ZN11__sanitizer3DieEv>
 438:	ldr	x0, [x21]
 43c:	mov	x1, x19
 440:	bl	0 <_ZN11__sanitizer13TemplateMatchEPKcS1_>
 444:	tst	w0, #0xff
 448:	b.ne	454 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x3b4>  // b.any
 44c:	ldr	x1, [x20, #18536]
 450:	b	410 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x370>
 454:	mov	x0, x24
 458:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 45c:	str	x0, [x21, #16]
 460:	ldr	x1, [x20, #18536]
 464:	b	410 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x370>
 468:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 46c:	str	x0, [x21]
 470:	b	39c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x2fc>
 474:	mov	w27, #0x0                   	// #0
 478:	b	258 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x1b8>
 47c:	ldr	x19, [x21, #56]
 480:	cbz	x19, 2cc <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x22c>
 484:	ldrb	w1, [x19, #24]
 488:	cbz	w1, 534 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x494>
 48c:	ldr	x4, [x19, #8]
 490:	ldr	x6, [x20, #2056]
 494:	dmb	ish
 498:	add	x5, x20, #0x810
 49c:	mov	x2, #0x0                   	// #0
 4a0:	mov	x1, x5
 4a4:	cbz	x6, 500 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x460>
 4a8:	ldr	x3, [x1]
 4ac:	cmp	x4, x3
 4b0:	b.cc	540 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x4a0>  // b.lo, b.ul, b.last
 4b4:	ldr	x3, [x1, #8]
 4b8:	cmp	x4, x3
 4bc:	b.cs	540 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x4a0>  // b.hs, b.nlast
 4c0:	ldr	x2, [x19, #16]
 4c4:	sub	x2, x2, #0x1
 4c8:	ldr	x0, [x20, #2056]
 4cc:	dmb	ish
 4d0:	cbz	x0, 500 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x460>
 4d4:	mov	x1, #0x0                   	// #0
 4d8:	ldr	x3, [x5]
 4dc:	cmp	x2, x3
 4e0:	b.cc	4f0 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x450>  // b.lo, b.ul, b.last
 4e4:	ldr	x3, [x5, #8]
 4e8:	cmp	x2, x3
 4ec:	b.cc	534 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x494>  // b.lo, b.ul, b.last
 4f0:	add	x1, x1, #0x1
 4f4:	add	x5, x5, #0x10
 4f8:	cmp	x1, x0
 4fc:	b.ne	4d8 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x438>  // b.any
 500:	ldr	w0, [x23]
 504:	cbnz	w0, 554 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x4b4>
 508:	ldr	x3, [x20, #2056]
 50c:	cmp	x3, #0x3ff
 510:	b.hi	568 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x4c8>  // b.pmore
 514:	add	x1, x20, x3, lsl #4
 518:	add	x3, x3, #0x1
 51c:	ldr	x0, [x19, #8]
 520:	str	x0, [x1, #2064]
 524:	ldr	x0, [x19, #16]
 528:	str	x0, [x1, #2072]
 52c:	dmb	ish
 530:	str	x3, [x20, #2056]
 534:	ldr	x19, [x19]
 538:	cbnz	x19, 484 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x3e4>
 53c:	b	2cc <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x22c>
 540:	add	x2, x2, #0x1
 544:	add	x1, x1, #0x10
 548:	cmp	x2, x6
 54c:	b.ne	4a8 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x408>  // b.any
 550:	b	500 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x460>
 554:	ldp	x1, x2, [x19, #8]
 558:	mov	x0, x26
 55c:	ldr	x3, [x21]
 560:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 564:	b	508 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x468>
 568:	adrp	x2, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 56c:	adrp	x0, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 570:	add	x2, x2, #0x0
 574:	add	x0, x0, #0x0
 578:	mov	x4, #0x400                 	// #1024
 57c:	mov	w1, #0x6f                  	// #111
 580:	stp	x27, x28, [sp, #64]
 584:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 588:	ldr	x0, [sp, #104]
 58c:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 590:	ldr	x4, [x28]
 594:	ldr	x1, [x1]
 598:	add	x20, x20, x0, lsl #5
 59c:	adrp	x0, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 5a0:	add	x0, x0, #0x0
 5a4:	ldr	x1, [x1]
 5a8:	ldr	x2, [x20, #18544]
 5ac:	ldr	x3, [x20, #18552]
 5b0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 5b4:	bl	0 <_ZN11__sanitizer3DieEv>
 5b8:	ldr	x0, [sp, #104]
 5bc:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 5c0:	ldr	x1, [x1]
 5c4:	add	x20, x20, x0, lsl #5
 5c8:	adrp	x0, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 5cc:	add	x0, x0, #0x0
 5d0:	ldr	x1, [x1]
 5d4:	ldr	x3, [x20, #18544]
 5d8:	ldr	x2, [x20, #18552]
 5dc:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 5e0:	bl	0 <_ZN11__sanitizer3DieEv>
 5e4:	nop

00000000000005e8 <_ZN11__sanitizer9LibIgnore17OnLibraryUnloadedEv>:
 5e8:	mov	x1, #0x0                   	// #0
 5ec:	b	a0 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc>

sanitizer_linux.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>:
       0:	stp	x19, x20, [sp, #-64]!
       4:	mov	x19, x1
       8:	mov	x20, x0
       c:	mov	w2, #0x0                   	// #0
      10:	adrp	x1, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
      14:	mov	x0, #0x3e80                	// #16000
      18:	add	x1, x1, #0x0
      1c:	str	x30, [sp, #16]
      20:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
      24:	str	x0, [x19]
      28:	add	x3, sp, #0x38
      2c:	add	x2, sp, #0x30
      30:	add	x1, sp, #0x28
      34:	mov	x0, x20
      38:	mov	x5, #0x0                   	// #0
      3c:	mov	x4, #0x100000              	// #1048576
      40:	bl	0 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>
      44:	tst	w0, #0xff
      48:	b.eq	e8 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0+0xe8>  // b.none
      4c:	ldr	x4, [x19]
      50:	mov	x0, #0x1                   	// #1
      54:	ldr	x1, [sp, #40]
      58:	mov	w2, w0
      5c:	str	x1, [x4]
      60:	ldr	x1, [sp, #40]
      64:	nop
      68:	ldrb	w3, [x1, x0]
      6c:	add	x0, x0, #0x1
      70:	cbnz	w3, 68 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0+0x68>
      74:	add	x5, x1, x0
      78:	ldrb	w1, [x1, x0]
      7c:	sxtw	x3, w2
      80:	add	x6, x4, w2, sxtw #3
      84:	cbz	w1, bc <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0+0xbc>
      88:	str	x5, [x4, x3, lsl #3]
      8c:	cmp	w2, #0x7cf
      90:	b.gt	cc <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0+0xcc>
      94:	ldr	x1, [sp, #40]
      98:	add	w2, w2, #0x1
      9c:	ldrb	w3, [x1, x0]
      a0:	add	x0, x0, #0x1
      a4:	cbnz	w3, 68 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0+0x68>
      a8:	add	x5, x1, x0
      ac:	ldrb	w1, [x1, x0]
      b0:	sxtw	x3, w2
      b4:	add	x6, x4, w2, sxtw #3
      b8:	cbnz	w1, 88 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0+0x88>
      bc:	str	xzr, [x6]
      c0:	ldr	x30, [sp, #16]
      c4:	ldp	x19, x20, [sp], #64
      c8:	ret
      cc:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
      d0:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
      d4:	add	x2, x2, #0x0
      d8:	add	x0, x0, #0x0
      dc:	mov	x4, #0x7cf                 	// #1999
      e0:	mov	w1, #0x23f                 	// #575
      e4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
      e8:	ldr	x0, [x19]
      ec:	ldr	x30, [sp, #16]
      f0:	str	xzr, [x0]
      f4:	ldp	x19, x20, [sp], #64
      f8:	ret
      fc:	nop

0000000000000100 <_ZN11__sanitizer16internal_iserrorEmPi>:
     100:	mov	x2, x0
     104:	mov	w0, #0x0                   	// #0
     108:	cmn	x2, #0x1, lsl #12
     10c:	b.hi	114 <_ZN11__sanitizer16internal_iserrorEmPi+0x14>  // b.pmore
     110:	ret
     114:	mov	w0, #0x1                   	// #1
     118:	cbz	x1, 110 <_ZN11__sanitizer16internal_iserrorEmPi+0x10>
     11c:	neg	w2, w2
     120:	str	w2, [x1]
     124:	ret

0000000000000128 <_ZN11__sanitizer13internal_mmapEPvmiiim>:
     128:	mov	x8, #0xde                  	// #222
     12c:	sxtw	x2, w2
     130:	sxtw	x3, w3
     134:	sxtw	x4, w4
     138:	svc	#0x0
     13c:	ret

0000000000000140 <_ZN11__sanitizer15internal_munmapEPvm>:
     140:	mov	x8, #0xd7                  	// #215
     144:	svc	#0x0
     148:	ret
     14c:	nop

0000000000000150 <_ZN11__sanitizer17internal_mprotectEPvmi>:
     150:	mov	x8, #0xe2                  	// #226
     154:	sxtw	x2, w2
     158:	svc	#0x0
     15c:	ret

0000000000000160 <_ZN11__sanitizer14internal_closeEi>:
     160:	mov	x8, #0x39                  	// #57
     164:	sxtw	x0, w0
     168:	svc	#0x0
     16c:	ret

0000000000000170 <_ZN11__sanitizer13internal_openEPKci>:
     170:	sxtw	x2, w1
     174:	mov	x8, #0x38                  	// #56
     178:	mov	x1, x0
     17c:	mov	x0, #0xffffffffffffff9c    	// #-100
     180:	svc	#0x0
     184:	ret

0000000000000188 <_ZN11__sanitizer13internal_openEPKcij>:
     188:	mov	w4, w1
     18c:	mov	w3, w2
     190:	mov	x1, x0
     194:	mov	x8, #0x38                  	// #56
     198:	sxtw	x2, w4
     19c:	mov	x0, #0xffffffffffffff9c    	// #-100
     1a0:	svc	#0x0
     1a4:	ret

00000000000001a8 <_ZN11__sanitizer13internal_readEiPvm>:
     1a8:	sxtw	x3, w0
     1ac:	mov	x0, x3
     1b0:	mov	x8, #0x3f                  	// #63
     1b4:	svc	#0x0
     1b8:	cmn	x0, #0x1, lsl #12
     1bc:	b.hi	1c4 <_ZN11__sanitizer13internal_readEiPvm+0x1c>  // b.pmore
     1c0:	ret
     1c4:	cmn	w0, #0x4
     1c8:	b.eq	1ac <_ZN11__sanitizer13internal_readEiPvm+0x4>  // b.none
     1cc:	ret

00000000000001d0 <_ZN11__sanitizer14internal_writeEiPKvm>:
     1d0:	sxtw	x3, w0
     1d4:	mov	x0, x3
     1d8:	mov	x8, #0x40                  	// #64
     1dc:	svc	#0x0
     1e0:	cmn	x0, #0x1, lsl #12
     1e4:	b.hi	1ec <_ZN11__sanitizer14internal_writeEiPKvm+0x1c>  // b.pmore
     1e8:	ret
     1ec:	cmn	w0, #0x4
     1f0:	b.eq	1d4 <_ZN11__sanitizer14internal_writeEiPKvm+0x4>  // b.none
     1f4:	ret

00000000000001f8 <_ZN11__sanitizer18internal_ftruncateEim>:
     1f8:	sxtw	x2, w0
     1fc:	mov	x0, x2
     200:	mov	x8, #0x2e                  	// #46
     204:	svc	#0x0
     208:	cmn	x0, #0x1, lsl #12
     20c:	b.hi	214 <_ZN11__sanitizer18internal_ftruncateEim+0x1c>  // b.pmore
     210:	ret
     214:	cmn	w0, #0x4
     218:	b.eq	1fc <_ZN11__sanitizer18internal_ftruncateEim+0x4>  // b.none
     21c:	ret

0000000000000220 <_ZN11__sanitizer13internal_statEPKcPv>:
     220:	mov	x2, x1
     224:	mov	x8, #0x4f                  	// #79
     228:	mov	x1, x0
     22c:	mov	x3, #0x0                   	// #0
     230:	mov	x0, #0xffffffffffffff9c    	// #-100
     234:	svc	#0x0
     238:	ret
     23c:	nop

0000000000000240 <_ZN11__sanitizer14internal_lstatEPKcPv>:
     240:	mov	x2, x1
     244:	mov	x8, #0x4f                  	// #79
     248:	mov	x1, x0
     24c:	mov	x3, #0x100                 	// #256
     250:	mov	x0, #0xffffffffffffff9c    	// #-100
     254:	svc	#0x0
     258:	ret
     25c:	nop

0000000000000260 <_ZN11__sanitizer14internal_fstatEiPv>:
     260:	mov	x8, #0x50                  	// #80
     264:	sxtw	x0, w0
     268:	svc	#0x0
     26c:	ret

0000000000000270 <_ZN11__sanitizer17internal_filesizeEi>:
     270:	sub	sp, sp, #0x80
     274:	mov	x8, #0x50                  	// #80
     278:	mov	x1, sp
     27c:	sxtw	x0, w0
     280:	svc	#0x0
     284:	ldr	x1, [sp, #48]
     288:	cmp	x0, #0x0
     28c:	add	sp, sp, #0x80
     290:	csinv	x0, x1, xzr, eq  // eq = none
     294:	ret

0000000000000298 <_ZN11__sanitizer13internal_dup2Eii>:
     298:	mov	x8, #0x18                  	// #24
     29c:	mov	x2, #0x0                   	// #0
     2a0:	sxtw	x0, w0
     2a4:	sxtw	x1, w1
     2a8:	svc	#0x0
     2ac:	ret

00000000000002b0 <_ZN11__sanitizer17internal_readlinkEPKcPcm>:
     2b0:	mov	x4, x1
     2b4:	mov	x3, x2
     2b8:	mov	x1, x0
     2bc:	mov	x2, x4
     2c0:	mov	x8, #0x4e                  	// #78
     2c4:	mov	x0, #0xffffffffffffff9c    	// #-100
     2c8:	svc	#0x0
     2cc:	ret

00000000000002d0 <_ZN11__sanitizer15internal_unlinkEPKc>:
     2d0:	mov	x1, x0
     2d4:	mov	x8, #0x23                  	// #35
     2d8:	mov	x0, #0xffffffffffffff9c    	// #-100
     2dc:	mov	x2, #0x0                   	// #0
     2e0:	svc	#0x0
     2e4:	ret

00000000000002e8 <_ZN11__sanitizer15internal_renameEPKcS1_>:
     2e8:	mov	x3, x1
     2ec:	mov	x8, #0x26                  	// #38
     2f0:	mov	x1, x0
     2f4:	mov	x0, #0xffffffffffffff9c    	// #-100
     2f8:	mov	x2, x0
     2fc:	svc	#0x0
     300:	ret
     304:	nop

0000000000000308 <_ZN11__sanitizer20internal_sched_yieldEv>:
     308:	mov	x8, #0x7c                  	// #124
     30c:	svc	#0x0
     310:	ret
     314:	nop

0000000000000318 <_ZN11__sanitizer14internal__exitEi>:
     318:	sxtw	x0, w0
     31c:	mov	x8, #0x5e                  	// #94
     320:	str	x30, [sp, #-16]!
     324:	svc	#0x0
     328:	bl	0 <_ZN11__sanitizer3DieEv>
     32c:	nop

0000000000000330 <_ZN11__sanitizer14internal_sleepEj>:
     330:	sub	sp, sp, #0x10
     334:	mov	x2, #0x1                   	// #1
     338:	mov	x0, sp
     33c:	mov	x8, #0x65                  	// #101
     340:	mov	x1, x0
     344:	stp	x2, xzr, [sp]
     348:	svc	#0x0
     34c:	ldr	w1, [sp]
     350:	cmp	w0, #0x0
     354:	mov	w0, #0x0                   	// #0
     358:	add	sp, sp, #0x10
     35c:	csel	w0, w1, w0, ne  // ne = any
     360:	ret
     364:	nop

0000000000000368 <_ZN11__sanitizer15internal_execveEPKcPKPcS4_>:
     368:	mov	x8, #0xdd                  	// #221
     36c:	svc	#0x0
     370:	ret
     374:	nop

0000000000000378 <_ZN11__sanitizer10FileExistsEPKc>:
     378:	sub	sp, sp, #0x80
     37c:	mov	x1, x0
     380:	mov	x2, sp
     384:	mov	x8, #0x4f                  	// #79
     388:	mov	x0, #0xffffffffffffff9c    	// #-100
     38c:	mov	x3, #0x0                   	// #0
     390:	svc	#0x0
     394:	cbnz	x0, 3b0 <_ZN11__sanitizer10FileExistsEPKc+0x38>
     398:	ldr	w0, [sp, #16]
     39c:	add	sp, sp, #0x80
     3a0:	and	w0, w0, #0xf000
     3a4:	cmp	w0, #0x8, lsl #12
     3a8:	cset	w0, eq  // eq = none
     3ac:	ret
     3b0:	mov	w0, #0x0                   	// #0
     3b4:	add	sp, sp, #0x80
     3b8:	ret
     3bc:	nop

00000000000003c0 <_ZN11__sanitizer6GetTidEv>:
     3c0:	mov	x8, #0xb2                  	// #178
     3c4:	svc	#0x0
     3c8:	ret
     3cc:	nop

00000000000003d0 <_ZN11__sanitizer6TgKillEiyi>:
     3d0:	mov	x8, #0x83                  	// #131
     3d4:	sxtw	x0, w0
     3d8:	sxtw	x2, w2
     3dc:	svc	#0x0
     3e0:	ret
     3e4:	nop

00000000000003e8 <_ZN11__sanitizer8NanoTimeEv>:
     3e8:	stp	x19, x30, [sp, #-32]!
     3ec:	mov	x2, #0x10                  	// #16
     3f0:	mov	w1, #0x0                   	// #0
     3f4:	add	x19, sp, #0x10
     3f8:	mov	x0, x19
     3fc:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     400:	mov	x0, x19
     404:	mov	x8, #0xa9                  	// #169
     408:	mov	x1, #0x0                   	// #0
     40c:	svc	#0x0
     410:	ldp	x3, x2, [sp, #16]
     414:	mov	x0, #0xca00                	// #51712
     418:	movk	x0, #0x3b9a, lsl #16
     41c:	ldp	x19, x30, [sp], #32
     420:	lsl	x1, x2, #5
     424:	sub	x1, x1, x2
     428:	add	x1, x2, x1, lsl #2
     42c:	lsl	x1, x1, #3
     430:	madd	x0, x3, x0, x1
     434:	ret

0000000000000438 <_ZN11__sanitizer22internal_clock_gettimeEiPv>:
     438:	mov	x8, #0x71                  	// #113
     43c:	sxtw	x0, w0
     440:	svc	#0x0
     444:	ret

0000000000000448 <_ZN11__sanitizer6GetEnvEPKc>:
     448:	stp	x19, x20, [sp, #-64]!
     44c:	stp	x21, x22, [sp, #16]
     450:	adrp	x21, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     454:	add	x19, x21, #0x0
     458:	stp	x23, x30, [sp, #32]
     45c:	mov	x23, x0
     460:	ldrb	w0, [x21]
     464:	cbz	w0, 500 <_ZN11__sanitizer6GetEnvEPKc+0xb8>
     468:	ldr	x0, [x19, #8]
     46c:	cbz	x0, 4ec <_ZN11__sanitizer6GetEnvEPKc+0xa4>
     470:	add	x21, x21, #0x0
     474:	ldr	x0, [x21, #16]
     478:	cbz	x0, 4ec <_ZN11__sanitizer6GetEnvEPKc+0xa4>
     47c:	mov	x0, x23
     480:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
     484:	ldr	x20, [x21, #8]
     488:	mov	x22, x0
     48c:	ldrb	w0, [x20]
     490:	cbz	w0, 4ec <_ZN11__sanitizer6GetEnvEPKc+0xa4>
     494:	mov	x2, x20
     498:	b	4c8 <_ZN11__sanitizer6GetEnvEPKc+0x80>
     49c:	mov	x1, x23
     4a0:	mov	x0, x20
     4a4:	bl	0 <_ZN11__sanitizer15internal_memcmpEPKvS1_m>
     4a8:	cbnz	w0, 4b8 <_ZN11__sanitizer6GetEnvEPKc+0x70>
     4ac:	ldrb	w0, [x20, x22]
     4b0:	cmp	w0, #0x3d
     4b4:	b.eq	538 <_ZN11__sanitizer6GetEnvEPKc+0xf0>  // b.none
     4b8:	ldrb	w0, [x19, #1]
     4bc:	add	x20, x19, #0x1
     4c0:	cbz	w0, 4ec <_ZN11__sanitizer6GetEnvEPKc+0xa4>
     4c4:	ldr	x2, [x21, #8]
     4c8:	sub	x2, x20, x2
     4cc:	ldr	x3, [x21, #16]
     4d0:	mov	x0, x20
     4d4:	mov	w1, #0x0                   	// #0
     4d8:	sub	x2, x3, x2
     4dc:	bl	0 <_ZN11__sanitizer15internal_memchrEPKvim>
     4e0:	mov	x19, x0
     4e4:	mov	x2, x22
     4e8:	cbnz	x0, 49c <_ZN11__sanitizer6GetEnvEPKc+0x54>
     4ec:	mov	x0, #0x0                   	// #0
     4f0:	ldp	x21, x22, [sp, #16]
     4f4:	ldp	x23, x30, [sp, #32]
     4f8:	ldp	x19, x20, [sp], #64
     4fc:	ret
     500:	mov	w1, #0x1                   	// #1
     504:	add	x3, x19, #0x10
     508:	strb	w1, [x21]
     50c:	add	x2, sp, #0x38
     510:	add	x1, x19, #0x8
     514:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     518:	mov	x5, #0x0                   	// #0
     51c:	add	x0, x0, #0x0
     520:	mov	x4, #0x4000000             	// #67108864
     524:	bl	0 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>
     528:	tst	w0, #0xff
     52c:	b.ne	468 <_ZN11__sanitizer6GetEnvEPKc+0x20>  // b.any
     530:	str	xzr, [x19, #8]
     534:	b	4ec <_ZN11__sanitizer6GetEnvEPKc+0xa4>
     538:	add	x0, x22, #0x1
     53c:	add	x0, x20, x0
     540:	ldp	x21, x22, [sp, #16]
     544:	ldp	x23, x30, [sp, #32]
     548:	ldp	x19, x20, [sp], #64
     54c:	ret

0000000000000550 <_ZN11__sanitizer7GetArgvEv>:
     550:	adrp	x0, 0 <__libc_stack_end>
     554:	ldr	x0, [x0]
     558:	cbz	x0, 568 <_ZN11__sanitizer7GetArgvEv+0x18>
     55c:	ldr	x0, [x0]
     560:	add	x0, x0, #0x8
     564:	ret
     568:	str	x30, [sp, #-32]!
     56c:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     570:	add	x0, x0, #0x0
     574:	add	x1, sp, #0x10
     578:	bl	0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     57c:	add	x1, sp, #0x18
     580:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     584:	add	x0, x0, #0x0
     588:	bl	0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     58c:	ldr	x0, [sp, #16]
     590:	ldr	x30, [sp], #32
     594:	ret

0000000000000598 <_ZN11__sanitizer6ReExecEv>:
     598:	adrp	x0, 0 <__libc_stack_end>
     59c:	str	x30, [sp, #-32]!
     5a0:	ldr	x0, [x0]
     5a4:	cbz	x0, 60c <_ZN11__sanitizer6ReExecEv+0x74>
     5a8:	ldr	x0, [x0]
     5ac:	mov	x1, x0
     5b0:	ldr	x2, [x1], #8
     5b4:	add	x2, x0, w2, sxtw #3
     5b8:	add	x2, x2, #0x10
     5bc:	stp	x1, x2, [sp, #16]
     5c0:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     5c4:	mov	x8, #0xdd                  	// #221
     5c8:	add	x0, x0, #0x0
     5cc:	svc	#0x0
     5d0:	cmn	x0, #0x1, lsl #12
     5d4:	b.hi	5f8 <_ZN11__sanitizer6ReExecEv+0x60>  // b.pmore
     5d8:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     5dc:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     5e0:	add	x2, x2, #0x0
     5e4:	add	x0, x0, #0x0
     5e8:	mov	x4, #0x1                   	// #1
     5ec:	mov	x3, #0x0                   	// #0
     5f0:	mov	w1, #0x286                 	// #646
     5f4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     5f8:	neg	w1, w0
     5fc:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     600:	add	x0, x0, #0x0
     604:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     608:	bl	0 <_ZN11__sanitizer3DieEv>
     60c:	add	x1, sp, #0x10
     610:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     614:	add	x0, x0, #0x0
     618:	bl	0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     61c:	add	x1, sp, #0x18
     620:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     624:	add	x0, x0, #0x0
     628:	bl	0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     62c:	ldp	x1, x2, [sp, #16]
     630:	b	5c0 <_ZN11__sanitizer6ReExecEv+0x28>
     634:	nop

0000000000000638 <_ZN11__sanitizer13BlockingMutexC1Ev>:
     638:	mov	x2, #0x58                  	// #88
     63c:	mov	w1, #0x0                   	// #0
     640:	b	0 <_ZN11__sanitizer15internal_memsetEPvim>
     644:	nop

0000000000000648 <_ZN11__sanitizer13BlockingMutex4LockEv>:
     648:	ldr	x3, [x0, #80]
     64c:	mov	x6, x0
     650:	mov	w1, #0x1                   	// #1
     654:	cbnz	x3, 6bc <_ZN11__sanitizer13BlockingMutex4LockEv+0x74>
     658:	ldxr	w0, [x6]
     65c:	stxr	w2, w1, [x6]
     660:	cbnz	w2, 658 <_ZN11__sanitizer13BlockingMutex4LockEv+0x10>
     664:	dmb	ish
     668:	cbz	w0, 6b8 <_ZN11__sanitizer13BlockingMutex4LockEv+0x70>
     66c:	mov	w7, #0x2                   	// #2
     670:	ldxr	w0, [x6]
     674:	stxr	w1, w7, [x6]
     678:	cbnz	w1, 670 <_ZN11__sanitizer13BlockingMutex4LockEv+0x28>
     67c:	dmb	ish
     680:	cbz	w0, 6b8 <_ZN11__sanitizer13BlockingMutex4LockEv+0x70>
     684:	mov	x0, x6
     688:	mov	x8, #0x62                  	// #98
     68c:	mov	x1, #0x80                  	// #128
     690:	mov	x2, #0x2                   	// #2
     694:	mov	x3, #0x0                   	// #0
     698:	mov	x4, #0x0                   	// #0
     69c:	mov	x5, #0x0                   	// #0
     6a0:	svc	#0x0
     6a4:	ldxr	w0, [x6]
     6a8:	stxr	w1, w7, [x6]
     6ac:	cbnz	w1, 670 <_ZN11__sanitizer13BlockingMutex4LockEv+0x28>
     6b0:	dmb	ish
     6b4:	cbnz	w0, 684 <_ZN11__sanitizer13BlockingMutex4LockEv+0x3c>
     6b8:	ret
     6bc:	str	x30, [sp, #-16]!
     6c0:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     6c4:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     6c8:	add	x2, x2, #0x0
     6cc:	add	x0, x0, #0x0
     6d0:	mov	x4, #0x0                   	// #0
     6d4:	mov	w1, #0x298                 	// #664
     6d8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     6dc:	nop

00000000000006e0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>:
     6e0:	dmb	ish
     6e4:	mov	x1, x0
     6e8:	ldxr	w2, [x1]
     6ec:	stxr	w3, wzr, [x1]
     6f0:	cbnz	w3, 6e8 <_ZN11__sanitizer13BlockingMutex6UnlockEv+0x8>
     6f4:	dmb	ish
     6f8:	cbz	w2, 728 <_ZN11__sanitizer13BlockingMutex6UnlockEv+0x48>
     6fc:	cmp	w2, #0x2
     700:	b.eq	708 <_ZN11__sanitizer13BlockingMutex6UnlockEv+0x28>  // b.none
     704:	ret
     708:	mov	x8, #0x62                  	// #98
     70c:	mov	x1, #0x81                  	// #129
     710:	mov	x2, #0x1                   	// #1
     714:	mov	x3, #0x0                   	// #0
     718:	mov	x4, #0x0                   	// #0
     71c:	mov	x5, #0x0                   	// #0
     720:	svc	#0x0
     724:	ret
     728:	str	x30, [sp, #-16]!
     72c:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     730:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     734:	add	x2, x2, #0x0
     738:	add	x0, x0, #0x0
     73c:	mov	x4, #0x0                   	// #0
     740:	mov	x3, #0x0                   	// #0
     744:	mov	w1, #0x2ab                 	// #683
     748:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     74c:	nop

0000000000000750 <_ZN11__sanitizer13BlockingMutex11CheckLockedEv>:
     750:	ldr	w0, [x0]
     754:	cbz	w0, 75c <_ZN11__sanitizer13BlockingMutex11CheckLockedEv+0xc>
     758:	ret
     75c:	str	x30, [sp, #-16]!
     760:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     764:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     768:	add	x2, x2, #0x0
     76c:	add	x0, x0, #0x0
     770:	mov	x4, #0x0                   	// #0
     774:	mov	x3, #0x0                   	// #0
     778:	mov	w1, #0x2b9                 	// #697
     77c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000780 <_ZN11__sanitizer15internal_ptraceEiiPvS0_>:
     780:	mov	x8, #0x75                  	// #117
     784:	sxtw	x0, w0
     788:	sxtw	x1, w1
     78c:	svc	#0x0
     790:	ret
     794:	nop

0000000000000798 <_ZN11__sanitizer16internal_waitpidEiPii>:
     798:	mov	x8, #0x104                 	// #260
     79c:	mov	x3, #0x0                   	// #0
     7a0:	sxtw	x0, w0
     7a4:	sxtw	x2, w2
     7a8:	svc	#0x0
     7ac:	ret

00000000000007b0 <_ZN11__sanitizer15internal_getpidEv>:
     7b0:	mov	x8, #0xac                  	// #172
     7b4:	svc	#0x0
     7b8:	ret
     7bc:	nop

00000000000007c0 <_ZN11__sanitizer16internal_getppidEv>:
     7c0:	mov	x8, #0xad                  	// #173
     7c4:	svc	#0x0
     7c8:	ret
     7cc:	nop

00000000000007d0 <_ZN11__sanitizer17internal_getdentsEiPNS_12linux_direntEj>:
     7d0:	mov	w2, w2
     7d4:	mov	x8, #0x3d                  	// #61
     7d8:	sxtw	x0, w0
     7dc:	svc	#0x0
     7e0:	ret
     7e4:	nop

00000000000007e8 <_ZN11__sanitizer14internal_lseekEimi>:
     7e8:	mov	x8, #0x3e                  	// #62
     7ec:	sxtw	x0, w0
     7f0:	sxtw	x2, w2
     7f4:	svc	#0x0
     7f8:	ret
     7fc:	nop

0000000000000800 <_ZN11__sanitizer14internal_prctlEimmmm>:
     800:	mov	x8, #0xa7                  	// #167
     804:	sxtw	x0, w0
     808:	svc	#0x0
     80c:	ret

0000000000000810 <_ZN11__sanitizer20internal_sigaltstackEPKvPv>:
     810:	mov	x8, #0x84                  	// #132
     814:	svc	#0x0
     818:	ret
     81c:	nop

0000000000000820 <_ZN11__sanitizer13internal_forkEv>:
     820:	mov	x8, #0xdc                  	// #220
     824:	mov	x0, #0x11                  	// #17
     828:	mov	x1, #0x0                   	// #0
     82c:	svc	#0x0
     830:	ret
     834:	nop

0000000000000838 <_ZN11__sanitizer29internal_sigaction_norestorerEiPKvPv>:
     838:	stp	x19, x20, [sp, #-112]!
     83c:	sxtw	x20, w0
     840:	mov	x19, x1
     844:	stp	x23, x30, [sp, #32]
     848:	add	x23, sp, #0x30
     84c:	mov	w1, #0x0                   	// #0
     850:	mov	x0, x23
     854:	stp	x21, x22, [sp, #16]
     858:	mov	x21, x2
     85c:	add	x22, sp, #0x50
     860:	mov	x2, #0x20                  	// #32
     864:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     868:	mov	w1, #0x0                   	// #0
     86c:	mov	x0, x22
     870:	mov	x2, #0x20                  	// #32
     874:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     878:	mov	x1, #0x0                   	// #0
     87c:	cbz	x19, 8b0 <_ZN11__sanitizer29internal_sigaction_norestorerEiPKvPv+0x78>
     880:	mov	x1, x19
     884:	mov	x2, #0x8                   	// #8
     888:	add	x0, x23, #0x18
     88c:	ldr	x3, [x1], #8
     890:	str	x3, [sp, #48]
     894:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     898:	ldr	w0, [x19, #136]
     89c:	mov	x1, x23
     8a0:	ldr	x2, [x19, #144]
     8a4:	orr	w0, w0, #0x4000000
     8a8:	sxtw	x0, w0
     8ac:	stp	x0, x2, [sp, #56]
     8b0:	cmp	x21, #0x0
     8b4:	mov	x0, x20
     8b8:	csel	x2, x22, xzr, ne  // ne = any
     8bc:	mov	x8, #0x86                  	// #134
     8c0:	mov	x3, #0x8                   	// #8
     8c4:	svc	#0x0
     8c8:	cmp	x0, #0x0
     8cc:	mov	x19, x0
     8d0:	ccmp	x21, #0x0, #0x4, eq  // eq = none
     8d4:	b.ne	8ec <_ZN11__sanitizer29internal_sigaction_norestorerEiPKvPv+0xb4>  // b.any
     8d8:	mov	w0, w19
     8dc:	ldp	x21, x22, [sp, #16]
     8e0:	ldp	x23, x30, [sp, #32]
     8e4:	ldp	x19, x20, [sp], #112
     8e8:	ret
     8ec:	mov	x0, x21
     8f0:	mov	x2, x3
     8f4:	ldr	x3, [sp, #80]
     8f8:	add	x1, x22, #0x18
     8fc:	str	x3, [x0], #8
     900:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     904:	ldr	x0, [sp, #88]
     908:	str	w0, [x21, #136]
     90c:	ldr	x0, [sp, #96]
     910:	str	x0, [x21, #144]
     914:	mov	w0, w19
     918:	ldp	x21, x22, [sp, #16]
     91c:	ldp	x23, x30, [sp, #32]
     920:	ldp	x19, x20, [sp], #112
     924:	ret

0000000000000928 <_ZN11__sanitizer20internal_sigprocmaskEiPNS_20__sanitizer_sigset_tES1_>:
     928:	mov	x8, #0x87                  	// #135
     92c:	mov	x3, #0x8                   	// #8
     930:	sxtw	x0, w0
     934:	svc	#0x0
     938:	ret
     93c:	nop

0000000000000940 <_ZN11__sanitizer19internal_sigfillsetEPNS_20__sanitizer_sigset_tE>:
     940:	mov	x2, #0x80                  	// #128
     944:	mov	w1, #0xff                  	// #255
     948:	b	0 <_ZN11__sanitizer15internal_memsetEPvim>
     94c:	nop

0000000000000950 <_ZN11__sanitizer20internal_sigemptysetEPNS_20__sanitizer_sigset_tE>:
     950:	mov	x2, #0x80                  	// #128
     954:	mov	w1, #0x0                   	// #0
     958:	b	0 <_ZN11__sanitizer15internal_memsetEPvim>
     95c:	nop

0000000000000960 <_ZN11__sanitizer18internal_sigdelsetEPNS_20__sanitizer_sigset_tEi>:
     960:	sub	w1, w1, #0x1
     964:	sxtw	x3, w1
     968:	cmp	x3, #0x3ff
     96c:	b.hi	990 <_ZN11__sanitizer18internal_sigdelsetEPNS_20__sanitizer_sigset_tEi+0x30>  // b.pmore
     970:	lsr	x3, x3, #3
     974:	and	w1, w1, #0x7
     978:	mov	w2, #0x1                   	// #1
     97c:	lsl	w1, w2, w1
     980:	ldrb	w2, [x0, x3]
     984:	bic	w1, w2, w1
     988:	strb	w1, [x0, x3]
     98c:	ret
     990:	str	x30, [sp, #-16]!
     994:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     998:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     99c:	add	x2, x2, #0x0
     9a0:	add	x0, x0, #0x0
     9a4:	mov	x4, #0x400                 	// #1024
     9a8:	mov	w1, #0x381                 	// #897
     9ac:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000009b0 <_ZN11__sanitizer20internal_sigismemberEPNS_20__sanitizer_sigset_tEi>:
     9b0:	sub	w1, w1, #0x1
     9b4:	sxtw	x3, w1
     9b8:	cmp	x3, #0x3ff
     9bc:	b.hi	9d8 <_ZN11__sanitizer20internal_sigismemberEPNS_20__sanitizer_sigset_tEi+0x28>  // b.pmore
     9c0:	lsr	x3, x3, #3
     9c4:	and	w1, w1, #0x7
     9c8:	ldrb	w0, [x0, x3]
     9cc:	asr	w0, w0, w1
     9d0:	and	w0, w0, #0x1
     9d4:	ret
     9d8:	str	x30, [sp, #-16]!
     9dc:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     9e0:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     9e4:	add	x2, x2, #0x0
     9e8:	add	x0, x0, #0x0
     9ec:	mov	x4, #0x400                 	// #1024
     9f0:	mov	w1, #0x38b                 	// #907
     9f4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000009f8 <_ZN11__sanitizer12ThreadListerC1Ei>:
     9f8:	stp	x19, x20, [sp, #-144]!
     9fc:	mov	x19, x0
     a00:	add	x20, x0, #0x8
     a04:	stp	x23, x24, [sp, #32]
     a08:	adrp	x24, 0 <_ZN11__sanitizer14PageSizeCachedE>
     a0c:	mov	w0, #0xffffffff            	// #-1
     a10:	stp	x21, x22, [sp, #16]
     a14:	mov	w21, w1
     a18:	ldr	x22, [x24]
     a1c:	stp	x25, x30, [sp, #48]
     a20:	stp	w1, w0, [x19]
     a24:	ldr	x0, [x22]
     a28:	stp	xzr, xzr, [x20, #8]
     a2c:	str	xzr, [x19, #8]
     a30:	cbz	x0, b2c <_ZN11__sanitizer12ThreadListerC1Ei+0x134>
     a34:	sub	x1, x0, #0x1
     a38:	tst	x1, x0
     a3c:	b.ne	b9c <_ZN11__sanitizer12ThreadListerC1Ei+0x1a4>  // b.any
     a40:	add	x22, x0, #0xfff
     a44:	neg	x0, x0
     a48:	and	x22, x22, x0
     a4c:	mov	w2, #0x0                   	// #0
     a50:	mov	x0, x22
     a54:	adrp	x25, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     a58:	add	x1, x25, #0x0
     a5c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     a60:	ldr	x1, [x19, #8]
     a64:	mov	x23, x0
     a68:	ldr	x2, [x20, #16]
     a6c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     a70:	ldr	x0, [x19, #8]
     a74:	ldr	x1, [x20, #8]
     a78:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     a7c:	ldr	x2, [x20, #16]
     a80:	str	x23, [x19, #8]
     a84:	str	x22, [x20, #8]
     a88:	cmp	x2, #0xfff
     a8c:	b.hi	aac <_ZN11__sanitizer12ThreadListerC1Ei+0xb4>  // b.pmore
     a90:	cmp	x22, #0xfff
     a94:	b.ls	b3c <_ZN11__sanitizer12ThreadListerC1Ei+0x144>  // b.plast
     a98:	mov	x3, #0x1000                	// #4096
     a9c:	add	x0, x23, x2
     aa0:	mov	w1, #0x0                   	// #0
     aa4:	sub	x2, x3, x2
     aa8:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     aac:	mov	x0, #0x1000                	// #4096
     ab0:	str	x0, [x20, #16]
     ab4:	add	x20, sp, #0x40
     ab8:	mov	w3, w21
     abc:	mov	x0, x20
     ac0:	mov	x1, #0x50                  	// #80
     ac4:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     ac8:	add	x2, x2, #0x0
     acc:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
     ad0:	mov	x1, x20
     ad4:	mov	x8, #0x38                  	// #56
     ad8:	mov	x0, #0xffffffffffffff9c    	// #-100
     adc:	mov	x2, #0x4000                	// #16384
     ae0:	svc	#0x0
     ae4:	str	w0, [x19, #4]
     ae8:	sxtw	x0, w0
     aec:	cmn	x0, #0x1, lsl #12
     af0:	b.hi	b08 <_ZN11__sanitizer12ThreadListerC1Ei+0x110>  // b.pmore
     af4:	ldp	x21, x22, [sp, #16]
     af8:	ldp	x23, x24, [sp, #32]
     afc:	ldp	x25, x30, [sp, #48]
     b00:	ldp	x19, x20, [sp], #144
     b04:	ret
     b08:	mov	w1, w21
     b0c:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     b10:	add	x0, x0, #0x0
     b14:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     b18:	ldp	x21, x22, [sp, #16]
     b1c:	ldp	x23, x24, [sp, #32]
     b20:	ldp	x25, x30, [sp, #48]
     b24:	ldp	x19, x20, [sp], #144
     b28:	ret
     b2c:	mov	x0, #0x6                   	// #6
     b30:	bl	0 <getauxval>
     b34:	str	x0, [x22]
     b38:	b	a34 <_ZN11__sanitizer12ThreadListerC1Ei+0x3c>
     b3c:	ldr	x24, [x24]
     b40:	ldr	x0, [x24]
     b44:	cbz	x0, bac <_ZN11__sanitizer12ThreadListerC1Ei+0x1b4>
     b48:	sub	x1, x0, #0x1
     b4c:	tst	x1, x0
     b50:	b.ne	b9c <_ZN11__sanitizer12ThreadListerC1Ei+0x1a4>  // b.any
     b54:	add	x22, x0, #0xfff
     b58:	neg	x0, x0
     b5c:	and	x22, x22, x0
     b60:	add	x1, x25, #0x0
     b64:	mov	w2, #0x0                   	// #0
     b68:	mov	x0, x22
     b6c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     b70:	mov	x23, x0
     b74:	ldr	x1, [x19, #8]
     b78:	ldr	x2, [x20, #16]
     b7c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     b80:	ldr	x0, [x19, #8]
     b84:	ldr	x1, [x20, #8]
     b88:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     b8c:	ldr	x2, [x20, #16]
     b90:	str	x23, [x19, #8]
     b94:	str	x22, [x20, #8]
     b98:	b	a98 <_ZN11__sanitizer12ThreadListerC1Ei+0xa0>
     b9c:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     ba0:	add	x0, x0, #0x0
     ba4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     ba8:	bl	0 <_ZN11__sanitizer3DieEv>
     bac:	mov	x0, #0x6                   	// #6
     bb0:	bl	0 <getauxval>
     bb4:	str	x0, [x24]
     bb8:	b	b48 <_ZN11__sanitizer12ThreadListerC1Ei+0x150>
     bbc:	nop

0000000000000bc0 <_ZN11__sanitizer12ThreadLister7IsAliveEi>:
     bc0:	stp	x19, x20, [sp, #-160]!
     bc4:	mov	x20, x0
     bc8:	mov	w4, w1
     bcc:	stp	x21, x22, [sp, #16]
     bd0:	add	x21, sp, #0x50
     bd4:	ldr	w3, [x20], #8
     bd8:	mov	x1, #0x50                  	// #80
     bdc:	mov	x19, x0
     be0:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     be4:	mov	x0, x21
     be8:	add	x2, x2, #0x0
     bec:	str	x30, [sp, #32]
     bf0:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
     bf4:	mov	x0, x21
     bf8:	mov	x1, x20
     bfc:	mov	x3, #0x0                   	// #0
     c00:	mov	x2, #0x4000000             	// #67108864
     c04:	bl	0 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi>
     c08:	tst	w0, #0xff
     c0c:	b.eq	c18 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x58>  // b.none
     c10:	ldr	x3, [x19, #24]
     c14:	cbnz	x3, c2c <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x6c>
     c18:	mov	w0, #0x0                   	// #0
     c1c:	ldp	x21, x22, [sp, #16]
     c20:	ldr	x30, [sp, #32]
     c24:	ldp	x19, x20, [sp], #160
     c28:	ret
     c2c:	ldr	x4, [x19, #16]
     c30:	strb	wzr, [sp, #79]
     c34:	cmp	x3, x4
     c38:	b.hi	d58 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x198>  // b.pmore
     c3c:	add	x1, x3, #0x1
     c40:	b.eq	ca4 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0xe4>  // b.none
     c44:	ldr	x21, [x19, #8]
     c48:	str	x1, [x20, #16]
     c4c:	add	x0, x21, x3
     c50:	add	x1, sp, #0x4f
     c54:	mov	x2, #0x1                   	// #1
     c58:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     c5c:	ldr	x0, [x19, #8]
     c60:	adrp	x20, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     c64:	add	x20, x20, #0x0
     c68:	mov	x1, x20
     c6c:	bl	0 <_ZN11__sanitizer15internal_strstrEPKcS1_>
     c70:	str	x0, [sp, #56]
     c74:	mov	x19, x0
     c78:	cbz	x0, c18 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x58>
     c7c:	mov	x0, x20
     c80:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
     c84:	add	x0, x19, x0
     c88:	bl	0 <_ZN11__sanitizer14internal_atollEPKc>
     c8c:	cmp	w0, #0x0
     c90:	cset	w0, ne  // ne = any
     c94:	ldp	x21, x22, [sp, #16]
     c98:	ldr	x30, [sp, #32]
     c9c:	ldp	x19, x20, [sp], #160
     ca0:	ret
     ca4:	cbz	x1, d80 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x1c0>
     ca8:	tst	x3, x1
     cac:	b.eq	d50 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x190>  // b.none
     cb0:	clz	x2, x1
     cb4:	mov	w0, #0x3f                  	// #63
     cb8:	sub	w0, w0, w2
     cbc:	mov	x2, #0x1                   	// #1
     cc0:	add	w21, w0, #0x1
     cc4:	lsl	x21, x2, x21
     cc8:	cmp	x1, x21
     ccc:	b.cs	dcc <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x20c>  // b.hs, b.nlast
     cd0:	lsl	x4, x2, x0
     cd4:	cmp	x1, x4
     cd8:	b.ls	dec <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x22c>  // b.plast
     cdc:	cmp	x3, x21
     ce0:	b.hi	da0 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x1e0>  // b.pmore
     ce4:	adrp	x22, 0 <_ZN11__sanitizer14PageSizeCachedE>
     ce8:	ldr	x22, [x22]
     cec:	ldr	x0, [x22]
     cf0:	cbz	x0, d70 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x1b0>
     cf4:	sub	x22, x0, #0x1
     cf8:	tst	x22, x0
     cfc:	b.ne	dbc <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x1fc>  // b.any
     d00:	add	x21, x21, x22
     d04:	neg	x0, x0
     d08:	and	x22, x21, x0
     d0c:	mov	w2, #0x0                   	// #0
     d10:	mov	x0, x22
     d14:	adrp	x1, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     d18:	add	x1, x1, #0x0
     d1c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     d20:	ldr	x1, [x19, #8]
     d24:	mov	x21, x0
     d28:	ldr	x2, [x20, #16]
     d2c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     d30:	ldr	x1, [x20, #8]
     d34:	ldr	x0, [x19, #8]
     d38:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     d3c:	ldr	x3, [x20, #16]
     d40:	str	x21, [x19, #8]
     d44:	str	x22, [x20, #8]
     d48:	add	x1, x3, #0x1
     d4c:	b	c48 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x88>
     d50:	mov	x21, x1
     d54:	b	ce4 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x124>
     d58:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     d5c:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     d60:	add	x2, x2, #0x0
     d64:	add	x0, x0, #0x0
     d68:	mov	w1, #0x1be                 	// #446
     d6c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     d70:	mov	x0, #0x6                   	// #6
     d74:	bl	0 <getauxval>
     d78:	str	x0, [x22]
     d7c:	b	cf4 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x134>
     d80:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     d84:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     d88:	add	x2, x2, #0x0
     d8c:	add	x0, x0, #0x0
     d90:	mov	x4, #0x0                   	// #0
     d94:	mov	x3, #0x0                   	// #0
     d98:	mov	w1, #0x177                 	// #375
     d9c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     da0:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     da4:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     da8:	mov	x4, x21
     dac:	add	x2, x2, #0x0
     db0:	add	x0, x0, #0x0
     db4:	mov	w1, #0x1fd                 	// #509
     db8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     dbc:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     dc0:	add	x0, x0, #0x0
     dc4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     dc8:	bl	0 <_ZN11__sanitizer3DieEv>
     dcc:	mov	x3, x1
     dd0:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     dd4:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     dd8:	mov	x4, x21
     ddc:	add	x2, x2, #0x0
     de0:	add	x0, x0, #0x0
     de4:	mov	w1, #0x17b                 	// #379
     de8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     dec:	mov	x3, x1
     df0:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     df4:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     df8:	add	x2, x2, #0x0
     dfc:	add	x0, x0, #0x0
     e00:	mov	w1, #0x17c                 	// #380
     e04:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000e08 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE>:
     e08:	stp	x19, x20, [sp, #-144]!
     e0c:	stp	x23, x24, [sp, #32]
     e10:	stp	x25, x26, [sp, #48]
     e14:	mov	x25, x0
     e18:	ldrsw	x0, [x0, #4]
     e1c:	str	x30, [sp, #80]
     e20:	cmn	x0, #0x1, lsl #12
     e24:	b.hi	fe4 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x1dc>  // b.pmore
     e28:	mov	x8, #0x3e                  	// #62
     e2c:	mov	x2, #0x0                   	// #0
     e30:	stp	x21, x22, [sp, #16]
     e34:	stp	x27, x28, [sp, #64]
     e38:	mov	x28, x1
     e3c:	mov	x1, #0x0                   	// #0
     e40:	svc	#0x0
     e44:	add	x23, x25, #0x8
     e48:	str	xzr, [x28, #16]
     e4c:	adrp	x22, 0 <_ZN11__sanitizer14PageSizeCachedE>
     e50:	add	x0, sp, #0x88
     e54:	ldr	x19, [x25, #16]
     e58:	str	x0, [sp, #96]
     e5c:	ldr	x3, [x23, #16]
     e60:	mov	w20, #0x1                   	// #1
     e64:	ldr	x0, [x22]
     e68:	mov	w24, #0x2                   	// #2
     e6c:	str	x0, [sp, #104]
     e70:	cmp	x19, x3
     e74:	b.ls	e8c <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x84>  // b.plast
     e78:	ldr	x0, [x23]
     e7c:	sub	x2, x19, x3
     e80:	mov	w1, #0x0                   	// #0
     e84:	add	x0, x0, x3
     e88:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     e8c:	str	x19, [x23, #16]
     e90:	cmp	x19, #0xfff
     e94:	b.ls	100c <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x204>  // b.plast
     e98:	ldrsw	x0, [x25, #4]
     e9c:	and	x2, x19, #0xffffffff
     ea0:	mov	x8, #0x3d                  	// #61
     ea4:	ldr	x1, [x25, #8]
     ea8:	svc	#0x0
     eac:	mov	x26, x0
     eb0:	cbz	x0, 11c4 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x3bc>
     eb4:	cmn	x0, #0x1, lsl #12
     eb8:	b.hi	fb0 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x1a8>  // b.pmore
     ebc:	ldr	x19, [x25, #8]
     ec0:	add	x27, x19, x0
     ec4:	cmp	x19, x27
     ec8:	b.cs	f58 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x150>  // b.hs, b.nlast
     ecc:	adrp	x21, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     ed0:	add	x21, x21, #0x0
     ed4:	b	ee4 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0xdc>
     ed8:	cbnz	x2, f00 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0xf8>
     edc:	cmp	x27, x19
     ee0:	b.ls	f58 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x150>  // b.plast
     ee4:	mov	x0, x19
     ee8:	ldrh	w2, [x19, #16]
     eec:	add	x19, x19, x2
     ef0:	ldr	x2, [x0]
     ef4:	cmp	x2, #0x1
     ef8:	b.ne	ed8 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0xd0>  // b.any
     efc:	mov	w24, w2
     f00:	ldrb	w2, [x0, #19]
     f04:	sub	w2, w2, #0x30
     f08:	and	w2, w2, #0xff
     f0c:	cmp	w2, #0x9
     f10:	b.hi	edc <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0xd4>  // b.pmore
     f14:	add	x0, x0, #0x13
     f18:	bl	0 <_ZN11__sanitizer14internal_atollEPKc>
     f1c:	ldp	x4, x3, [x28, #8]
     f20:	str	x0, [sp, #136]
     f24:	lsr	x4, x4, #3
     f28:	cmp	x3, x4
     f2c:	b.hi	11ac <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x3a4>  // b.pmore
     f30:	add	x0, x3, #0x1
     f34:	b.eq	1070 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x268>  // b.none
     f38:	ldr	x7, [x28]
     f3c:	str	x0, [x28, #16]
     f40:	ldr	x1, [sp, #96]
     f44:	add	x0, x7, x3, lsl #3
     f48:	mov	x2, #0x8                   	// #8
     f4c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     f50:	cmp	x27, x19
     f54:	b.hi	ee4 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0xdc>  // b.pmore
     f58:	ldr	x3, [x25, #24]
     f5c:	cbz	w20, fa0 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x198>
     f60:	sub	x0, x3, #0x400
     f64:	cmp	x0, x26
     f68:	b.cc	102c <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x224>  // b.lo, b.ul, b.last
     f6c:	ldr	x1, [x28, #16]
     f70:	cbz	x1, 1000 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x1f8>
     f74:	ldr	x2, [x28]
     f78:	mov	x0, x25
     f7c:	add	x1, x2, x1, lsl #3
     f80:	ldur	w1, [x1, #-8]
     f84:	bl	bc0 <_ZN11__sanitizer12ThreadLister7IsAliveEi>
     f88:	tst	w0, #0xff
     f8c:	b.eq	111c <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x314>  // b.none
     f90:	mov	w20, #0x0                   	// #0
     f94:	ldr	x3, [x23, #16]
     f98:	ldr	x19, [x25, #16]
     f9c:	b	e70 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x68>
     fa0:	mov	w24, #0x1                   	// #1
     fa4:	mov	w20, #0x0                   	// #0
     fa8:	ldr	x19, [x25, #16]
     fac:	b	e70 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x68>
     fb0:	ldr	w1, [x25]
     fb4:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     fb8:	add	x0, x0, #0x0
     fbc:	mov	w24, #0x0                   	// #0
     fc0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     fc4:	ldp	x21, x22, [sp, #16]
     fc8:	ldp	x27, x28, [sp, #64]
     fcc:	mov	w0, w24
     fd0:	ldp	x23, x24, [sp, #32]
     fd4:	ldp	x25, x26, [sp, #48]
     fd8:	ldr	x30, [sp, #80]
     fdc:	ldp	x19, x20, [sp], #144
     fe0:	ret
     fe4:	mov	w24, #0x0                   	// #0
     fe8:	mov	w0, w24
     fec:	ldp	x23, x24, [sp, #32]
     ff0:	ldp	x25, x26, [sp, #48]
     ff4:	ldr	x30, [sp, #80]
     ff8:	ldp	x19, x20, [sp], #144
     ffc:	ret
    1000:	mov	w20, #0x0                   	// #0
    1004:	ldr	x19, [x25, #16]
    1008:	b	e70 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x68>
    100c:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1010:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1014:	mov	x3, x19
    1018:	add	x2, x2, #0x0
    101c:	add	x0, x0, #0x0
    1020:	mov	x4, #0x1000                	// #4096
    1024:	mov	w1, #0x3b5                 	// #949
    1028:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    102c:	cmp	x3, x3, lsl #1
    1030:	lsl	x20, x3, #1
    1034:	ldr	x19, [x25, #16]
    1038:	b.cs	105c <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x254>  // b.hs, b.nlast
    103c:	cmp	x20, x19
    1040:	b.hi	1130 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x328>  // b.pmore
    1044:	ldr	x19, [x23]
    1048:	add	x0, x19, x3
    104c:	sub	x2, x20, x3
    1050:	mov	w1, #0x0                   	// #0
    1054:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
    1058:	ldr	x19, [x25, #16]
    105c:	mov	x3, x20
    1060:	mov	w24, #0x1                   	// #1
    1064:	str	x20, [x23, #16]
    1068:	mov	w20, #0x0                   	// #0
    106c:	b	e70 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x68>
    1070:	tst	x0, x3
    1074:	b.eq	10b0 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x2a8>  // b.none
    1078:	clz	x2, x0
    107c:	mov	w1, #0x3f                  	// #63
    1080:	sub	w2, w1, w2
    1084:	mov	x1, #0x1                   	// #1
    1088:	add	w4, w2, #0x1
    108c:	lsl	x4, x1, x4
    1090:	cmp	x0, x4
    1094:	b.cs	1190 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x388>  // b.hs, b.nlast
    1098:	lsl	x1, x1, x2
    109c:	cmp	x0, x1
    10a0:	b.ls	1224 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x41c>  // b.plast
    10a4:	cmp	x3, x4
    10a8:	b.hi	11fc <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x3f4>  // b.pmore
    10ac:	mov	x0, x4
    10b0:	ldr	x1, [sp, #104]
    10b4:	ldr	x2, [x1]
    10b8:	lsl	x1, x0, #3
    10bc:	cbz	x2, 11d0 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x3c8>
    10c0:	sub	x0, x2, #0x1
    10c4:	tst	x2, x0
    10c8:	b.ne	11ec <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x3e4>  // b.any
    10cc:	add	x0, x1, x0
    10d0:	neg	x2, x2
    10d4:	and	x4, x0, x2
    10d8:	mov	x1, x21
    10dc:	mov	x0, x4
    10e0:	mov	w2, #0x0                   	// #0
    10e4:	str	x4, [sp, #120]
    10e8:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
    10ec:	str	x0, [sp, #112]
    10f0:	ldr	x1, [x28]
    10f4:	ldr	x2, [x28, #16]
    10f8:	lsl	x2, x2, #3
    10fc:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    1100:	ldp	x0, x1, [x28]
    1104:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    1108:	ldr	x3, [x28, #16]
    110c:	ldp	x7, x4, [sp, #112]
    1110:	add	x0, x3, #0x1
    1114:	stp	x7, x4, [x28]
    1118:	b	f3c <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x134>
    111c:	mov	w24, #0x1                   	// #1
    1120:	mov	w20, #0x0                   	// #0
    1124:	ldr	x3, [x23, #16]
    1128:	ldr	x19, [x25, #16]
    112c:	b	e70 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x68>
    1130:	cbz	x20, 1244 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x43c>
    1134:	ldr	x19, [x22]
    1138:	ldr	x0, [x19]
    113c:	cbz	x0, 1214 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x40c>
    1140:	sub	x1, x0, #0x1
    1144:	tst	x1, x0
    1148:	b.ne	11ec <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x3e4>  // b.any
    114c:	add	x1, x20, x1
    1150:	neg	x0, x0
    1154:	and	x21, x1, x0
    1158:	mov	w2, #0x0                   	// #0
    115c:	mov	x0, x21
    1160:	adrp	x1, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1164:	add	x1, x1, #0x0
    1168:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
    116c:	ldr	x1, [x23]
    1170:	mov	x19, x0
    1174:	ldr	x2, [x23, #16]
    1178:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    117c:	ldp	x0, x1, [x23]
    1180:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    1184:	stp	x19, x21, [x23]
    1188:	ldr	x3, [x23, #16]
    118c:	b	1048 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x240>
    1190:	mov	x3, x0
    1194:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1198:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    119c:	add	x2, x2, #0x0
    11a0:	add	x0, x0, #0x0
    11a4:	mov	w1, #0x17b                 	// #379
    11a8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    11ac:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    11b0:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    11b4:	add	x2, x2, #0x0
    11b8:	add	x0, x0, #0x0
    11bc:	mov	w1, #0x1be                 	// #446
    11c0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    11c4:	ldp	x21, x22, [sp, #16]
    11c8:	ldp	x27, x28, [sp, #64]
    11cc:	b	fcc <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x1c4>
    11d0:	mov	x0, #0x6                   	// #6
    11d4:	str	x1, [sp, #112]
    11d8:	bl	0 <getauxval>
    11dc:	mov	x2, x0
    11e0:	ldp	x0, x1, [sp, #104]
    11e4:	str	x2, [x0]
    11e8:	b	10c0 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x2b8>
    11ec:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    11f0:	add	x0, x0, #0x0
    11f4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
    11f8:	bl	0 <_ZN11__sanitizer3DieEv>
    11fc:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1200:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1204:	add	x2, x2, #0x0
    1208:	add	x0, x0, #0x0
    120c:	mov	w1, #0x1fd                 	// #509
    1210:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1214:	mov	x0, #0x6                   	// #6
    1218:	bl	0 <getauxval>
    121c:	str	x0, [x19]
    1220:	b	1140 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x338>
    1224:	mov	x4, x1
    1228:	mov	x3, x0
    122c:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1230:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1234:	add	x2, x2, #0x0
    1238:	add	x0, x0, #0x0
    123c:	mov	w1, #0x17c                 	// #380
    1240:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1244:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1248:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    124c:	add	x2, x2, #0x0
    1250:	add	x0, x0, #0x0
    1254:	mov	x4, #0x0                   	// #0
    1258:	mov	x3, #0x0                   	// #0
    125c:	mov	w1, #0x1fc                 	// #508
    1260:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1264:	nop

0000000000001268 <_ZN11__sanitizer12ThreadListerD1Ev>:
    1268:	mov	x1, x0
    126c:	ldrsw	x0, [x0, #4]
    1270:	cmn	x0, #0x1, lsl #12
    1274:	b.hi	1280 <_ZN11__sanitizer12ThreadListerD1Ev+0x18>  // b.pmore
    1278:	mov	x8, #0x39                  	// #57
    127c:	svc	#0x0
    1280:	ldp	x0, x1, [x1, #8]
    1284:	b	0 <_ZN11__sanitizer10UnmapOrDieEPvm>

0000000000001288 <_ZN11__sanitizer20GetMaxVirtualAddressEv>:
    1288:	stp	x29, x30, [sp, #-16]!
    128c:	mov	x0, #0x1                   	// #1
    1290:	mov	x29, sp
    1294:	clz	x1, x29
    1298:	neg	w1, w1
    129c:	ldp	x29, x30, [sp], #16
    12a0:	lsl	x0, x0, x1
    12a4:	sub	x0, x0, #0x1
    12a8:	ret
    12ac:	nop

00000000000012b0 <_ZN11__sanitizer24GetMaxUserVirtualAddressEv>:
    12b0:	b	1288 <_ZN11__sanitizer20GetMaxVirtualAddressEv>
    12b4:	nop

00000000000012b8 <_ZN11__sanitizer11GetPageSizeEv>:
    12b8:	mov	x0, #0x6                   	// #6
    12bc:	b	0 <getauxval>

00000000000012c0 <_ZN11__sanitizer14ReadBinaryNameEPcm>:
    12c0:	stp	x19, x20, [sp, #-32]!
    12c4:	mov	x2, x0
    12c8:	mov	x20, x0
    12cc:	mov	x19, x1
    12d0:	mov	x3, x1
    12d4:	mov	x8, #0x4e                  	// #78
    12d8:	mov	x0, #0xffffffffffffff9c    	// #-100
    12dc:	stp	x21, x30, [sp, #16]
    12e0:	adrp	x21, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    12e4:	add	x1, x21, #0x0
    12e8:	svc	#0x0
    12ec:	cmn	x0, #0x1, lsl #12
    12f0:	b.hi	1300 <_ZN11__sanitizer14ReadBinaryNameEPcm+0x40>  // b.pmore
    12f4:	ldp	x21, x30, [sp, #16]
    12f8:	ldp	x19, x20, [sp], #32
    12fc:	ret
    1300:	neg	w1, w0
    1304:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1308:	add	x0, x0, #0x0
    130c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    1310:	add	x3, x21, #0x0
    1314:	mov	x0, x20
    1318:	mov	x1, x19
    131c:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1320:	add	x2, x2, #0x0
    1324:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
    1328:	cmp	x19, w0, sxtw
    132c:	sxtw	x0, w0
    1330:	b.hi	12f4 <_ZN11__sanitizer14ReadBinaryNameEPcm+0x34>  // b.pmore
    1334:	mov	x3, x0
    1338:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    133c:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1340:	mov	x4, x19
    1344:	add	x2, x2, #0x0
    1348:	add	x0, x0, #0x0
    134c:	mov	w1, #0x470                 	// #1136
    1350:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1354:	nop

0000000000001358 <_ZN11__sanitizer19ReadLongProcessNameEPcm>:
    1358:	stp	x19, x20, [sp, #-64]!
    135c:	mov	x5, #0x0                   	// #0
    1360:	mov	x19, x0
    1364:	mov	x20, x1
    1368:	add	x3, sp, #0x38
    136c:	add	x2, sp, #0x30
    1370:	add	x1, sp, #0x28
    1374:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1378:	mov	x4, #0x100000              	// #1048576
    137c:	add	x0, x0, #0x0
    1380:	str	x30, [sp, #16]
    1384:	bl	0 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>
    1388:	tst	w0, #0xff
    138c:	b.eq	13bc <_ZN11__sanitizer19ReadLongProcessNameEPcm+0x64>  // b.none
    1390:	ldr	x1, [sp, #40]
    1394:	mov	x2, x20
    1398:	mov	x0, x19
    139c:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
    13a0:	ldp	x0, x1, [sp, #40]
    13a4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    13a8:	mov	x0, x19
    13ac:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
    13b0:	ldr	x30, [sp, #16]
    13b4:	ldp	x19, x20, [sp], #64
    13b8:	ret
    13bc:	mov	x1, x20
    13c0:	mov	x0, x19
    13c4:	bl	12c0 <_ZN11__sanitizer14ReadBinaryNameEPcm>
    13c8:	ldr	x30, [sp, #16]
    13cc:	ldp	x19, x20, [sp], #64
    13d0:	ret
    13d4:	nop

00000000000013d8 <_ZN11__sanitizer13LibraryNameIsEPKcS1_>:
    13d8:	stp	x19, x20, [sp, #-32]!
    13dc:	mov	x20, x1
    13e0:	str	x30, [sp, #16]
    13e4:	ldrb	w1, [x0]
    13e8:	cbz	w1, 1470 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x98>
    13ec:	mov	x2, x0
    13f0:	ldrb	w3, [x2, #1]!
    13f4:	cbnz	w3, 13f0 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x18>
    13f8:	cmp	x0, x2
    13fc:	b.cs	1478 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0xa0>  // b.hs, b.nlast
    1400:	mov	x19, x2
    1404:	sub	x2, x2, #0x1
    1408:	cmp	x0, x2
    140c:	ldurb	w3, [x19, #-1]
    1410:	b.eq	1464 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x8c>  // b.none
    1414:	cmp	w3, #0x2f
    1418:	b.ne	1400 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x28>  // b.any
    141c:	mov	x0, x20
    1420:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
    1424:	mov	x1, x20
    1428:	mov	x20, x0
    142c:	mov	x2, x20
    1430:	mov	x0, x19
    1434:	bl	0 <_ZN11__sanitizer16internal_strncmpEPKcS1_m>
    1438:	mov	w1, #0x0                   	// #0
    143c:	cbnz	w0, 1454 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x7c>
    1440:	ldrb	w0, [x19, x20]
    1444:	sub	w0, w0, #0x2d
    1448:	and	w0, w0, #0xff
    144c:	cmp	w0, #0x1
    1450:	cset	w1, ls  // ls = plast
    1454:	mov	w0, w1
    1458:	ldr	x30, [sp, #16]
    145c:	ldp	x19, x20, [sp], #32
    1460:	ret
    1464:	cmp	w3, #0x2f
    1468:	csel	x19, x19, x0, eq  // eq = none
    146c:	b	141c <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x44>
    1470:	mov	x19, x0
    1474:	b	141c <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x44>
    1478:	mov	x19, x2
    147c:	b	141c <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x44>

0000000000001480 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE>:
    1480:	stp	x19, x20, [sp, #-80]!
    1484:	stp	x21, x22, [sp, #16]
    1488:	str	x30, [sp, #72]
    148c:	cbz	x0, 15d0 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0x150>
    1490:	stp	x25, x26, [sp, #48]
    1494:	mov	x21, x1
    1498:	mov	x22, #0xffffffffffffffff    	// #-1
    149c:	ldr	x25, [x0]
    14a0:	ldrh	w0, [x25, #54]
    14a4:	ldrh	w20, [x25, #56]
    14a8:	ldr	x19, [x25, #32]
    14ac:	and	x1, x0, #0xffff
    14b0:	mul	w20, w20, w0
    14b4:	add	x19, x25, x19
    14b8:	mov	x0, x19
    14bc:	add	x20, x19, w20, sxtw
    14c0:	cmp	x19, x20
    14c4:	b.eq	157c <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0xfc>  // b.none
    14c8:	stp	x23, x24, [sp, #32]
    14cc:	str	x27, [sp, #64]
    14d0:	ldr	w2, [x0]
    14d4:	cmp	w2, #0x1
    14d8:	b.ne	14e8 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0x68>  // b.any
    14dc:	ldr	x2, [x0, #16]
    14e0:	cmp	x22, x2
    14e4:	csel	x22, x22, x2, ls  // ls = plast
    14e8:	add	x0, x0, x1
    14ec:	cmp	x20, x0
    14f0:	b.ne	14d0 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0x50>  // b.any
    14f4:	adrp	x23, 0 <_ZN11__sanitizer14PageSizeCachedE>
    14f8:	sub	x22, x25, x22
    14fc:	ldr	x23, [x23]
    1500:	b	1514 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0x94>
    1504:	ldrh	w0, [x25, #54]
    1508:	add	x19, x19, x0
    150c:	cmp	x20, x19
    1510:	b.eq	1574 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0xf4>  // b.none
    1514:	ldr	w0, [x19]
    1518:	cmp	w0, #0x1
    151c:	b.ne	1504 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0x84>  // b.any
    1520:	ldr	x0, [x23]
    1524:	ldr	x26, [x19, #16]
    1528:	neg	x24, x0
    152c:	ldr	x1, [x19, #40]
    1530:	add	x26, x22, x26
    1534:	and	x24, x24, x26
    1538:	add	x27, x26, x1
    153c:	cbz	x0, 1590 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0x110>
    1540:	sub	x2, x0, #0x1
    1544:	tst	x2, x0
    1548:	b.ne	15c0 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0x140>  // b.any
    154c:	add	x2, x2, x27
    1550:	neg	x0, x0
    1554:	and	x1, x2, x0
    1558:	mov	x0, x24
    155c:	sub	x1, x1, x24
    1560:	blr	x21
    1564:	ldrh	w0, [x25, #54]
    1568:	add	x19, x19, x0
    156c:	cmp	x20, x19
    1570:	b.ne	1514 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0x94>  // b.any
    1574:	ldp	x23, x24, [sp, #32]
    1578:	ldr	x27, [sp, #64]
    157c:	ldp	x21, x22, [sp, #16]
    1580:	ldp	x25, x26, [sp, #48]
    1584:	ldr	x30, [sp, #72]
    1588:	ldp	x19, x20, [sp], #80
    158c:	ret
    1590:	mov	x0, #0x6                   	// #6
    1594:	bl	0 <getauxval>
    1598:	str	x0, [x23]
    159c:	neg	x24, x0
    15a0:	and	x24, x24, x26
    15a4:	cbnz	x0, 1540 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0xc0>
    15a8:	mov	x0, #0x6                   	// #6
    15ac:	bl	0 <getauxval>
    15b0:	str	x0, [x23]
    15b4:	sub	x2, x0, #0x1
    15b8:	tst	x2, x0
    15bc:	b.eq	154c <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0xcc>  // b.none
    15c0:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    15c4:	add	x0, x0, #0x0
    15c8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
    15cc:	bl	0 <_ZN11__sanitizer3DieEv>
    15d0:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    15d4:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    15d8:	add	x2, x2, #0x0
    15dc:	add	x0, x0, #0x0
    15e0:	mov	x4, #0x0                   	// #0
    15e4:	mov	x3, #0x0                   	// #0
    15e8:	mov	w1, #0x495                 	// #1173
    15ec:	stp	x23, x24, [sp, #32]
    15f0:	stp	x25, x26, [sp, #48]
    15f4:	str	x27, [sp, #64]
    15f8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    15fc:	nop

0000000000001600 <_ZN11__sanitizer14internal_cloneEPFiPvES0_iS0_PiS0_S3_>:
    1600:	cmp	x0, #0x0
    1604:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    1608:	b.eq	165c <_ZN11__sanitizer14internal_cloneEPFiPvES0_iS0_PiS0_S3_+0x5c>  // b.none
    160c:	str	x30, [sp, #-16]!
    1610:	mov	x7, x1
    1614:	ands	x1, x1, #0xf
    1618:	b.ne	1664 <_ZN11__sanitizer14internal_cloneEPFiPvES0_iS0_PiS0_S3_+0x64>  // b.any
    161c:	sub	x1, x7, #0x10
    1620:	stp	x0, x3, [x7, #-16]
    1624:	mov	x0, x2
    1628:	mov	x2, x4
    162c:	mov	x3, x5
    1630:	mov	x4, x6
    1634:	mov	x8, #0xdc                  	// #220
    1638:	svc	#0x0
    163c:	cmp	x0, #0x0
    1640:	b.ne	1654 <_ZN11__sanitizer14internal_cloneEPFiPvES0_iS0_PiS0_S3_+0x54>  // b.any
    1644:	ldp	x1, x0, [sp], #16
    1648:	blr	x1
    164c:	mov	x8, #0x5d                  	// #93
    1650:	svc	#0x0
    1654:	ldr	x30, [sp], #16
    1658:	ret
    165c:	mov	x0, #0xffffffffffffffea    	// #-22
    1660:	ret
    1664:	mov	x4, x1
    1668:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    166c:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1670:	add	x2, x2, #0x0
    1674:	add	x0, x0, #0x0
    1678:	mov	x3, #0x0                   	// #0
    167c:	mov	w1, #0x54b                 	// #1355
    1680:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1684:	nop

0000000000001688 <_ZN11__sanitizer19GetHandleSignalModeEi>:
    1688:	cmp	w0, #0x7
    168c:	b.eq	1738 <_ZN11__sanitizer19GetHandleSignalModeEi+0xb0>  // b.none
    1690:	b.gt	16dc <_ZN11__sanitizer19GetHandleSignalModeEi+0x54>
    1694:	cmp	w0, #0x5
    1698:	b.eq	1750 <_ZN11__sanitizer19GetHandleSignalModeEi+0xc8>  // b.none
    169c:	cmp	w0, #0x6
    16a0:	b.ne	16bc <_ZN11__sanitizer19GetHandleSignalModeEi+0x34>  // b.any
    16a4:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    16a8:	ldr	x0, [x1]
    16ac:	ldr	w0, [x0, #80]
    16b0:	cmp	w0, #0x1
    16b4:	b.eq	1700 <_ZN11__sanitizer19GetHandleSignalModeEi+0x78>  // b.none
    16b8:	ret
    16bc:	cmp	w0, #0x4
    16c0:	b.ne	1718 <_ZN11__sanitizer19GetHandleSignalModeEi+0x90>  // b.any
    16c4:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    16c8:	ldr	x0, [x1]
    16cc:	ldr	w0, [x0, #84]
    16d0:	cmp	w0, #0x1
    16d4:	b.ne	16b8 <_ZN11__sanitizer19GetHandleSignalModeEi+0x30>  // b.any
    16d8:	b	1700 <_ZN11__sanitizer19GetHandleSignalModeEi+0x78>
    16dc:	cmp	w0, #0x8
    16e0:	b.eq	1720 <_ZN11__sanitizer19GetHandleSignalModeEi+0x98>  // b.none
    16e4:	cmp	w0, #0xb
    16e8:	b.ne	1718 <_ZN11__sanitizer19GetHandleSignalModeEi+0x90>  // b.any
    16ec:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    16f0:	ldr	x0, [x1]
    16f4:	ldr	w0, [x0, #72]
    16f8:	cmp	w0, #0x1
    16fc:	b.ne	16b8 <_ZN11__sanitizer19GetHandleSignalModeEi+0x30>  // b.any
    1700:	ldr	x1, [x1]
    1704:	mov	w2, #0x2                   	// #2
    1708:	ldrb	w1, [x1, #96]
    170c:	cmp	w1, #0x0
    1710:	csel	w0, w0, w2, ne  // ne = any
    1714:	ret
    1718:	mov	w0, #0x0                   	// #0
    171c:	ret
    1720:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    1724:	ldr	x0, [x1]
    1728:	ldr	w0, [x0, #92]
    172c:	cmp	w0, #0x1
    1730:	b.ne	16b8 <_ZN11__sanitizer19GetHandleSignalModeEi+0x30>  // b.any
    1734:	b	1700 <_ZN11__sanitizer19GetHandleSignalModeEi+0x78>
    1738:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    173c:	ldr	x0, [x1]
    1740:	ldr	w0, [x0, #76]
    1744:	cmp	w0, #0x1
    1748:	b.ne	16b8 <_ZN11__sanitizer19GetHandleSignalModeEi+0x30>  // b.any
    174c:	b	1700 <_ZN11__sanitizer19GetHandleSignalModeEi+0x78>
    1750:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    1754:	ldr	x0, [x1]
    1758:	ldr	w0, [x0, #88]
    175c:	cmp	w0, #0x1
    1760:	b.ne	16b8 <_ZN11__sanitizer19GetHandleSignalModeEi+0x30>  // b.any
    1764:	b	1700 <_ZN11__sanitizer19GetHandleSignalModeEi+0x78>

0000000000001768 <_ZN11__sanitizer21internal_start_threadEPFvPvES0_>:
    1768:	stp	x19, x20, [sp, #-320]!
    176c:	mov	x2, #0x80                  	// #128
    1770:	add	x20, sp, #0x40
    1774:	stp	x21, x22, [sp, #16]
    1778:	mov	x21, x0
    177c:	mov	x22, x1
    1780:	mov	x0, x20
    1784:	mov	w1, #0xff                  	// #255
    1788:	str	x30, [sp, #32]
    178c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
    1790:	add	x19, sp, #0xc0
    1794:	ldrb	w4, [sp, #68]
    1798:	mov	x1, x20
    179c:	mov	x2, x19
    17a0:	mov	x8, #0x87                  	// #135
    17a4:	and	w4, w4, #0xfffffffe
    17a8:	mov	x0, #0x2                   	// #2
    17ac:	mov	x3, #0x8                   	// #8
    17b0:	strb	w4, [sp, #68]
    17b4:	svc	#0x0
    17b8:	mov	x1, #0x0                   	// #0
    17bc:	mov	x3, x22
    17c0:	mov	x2, x21
    17c4:	add	x0, sp, #0x38
    17c8:	bl	0 <_ZN11__sanitizer19real_pthread_createEPvS0_PFS0_S0_ES0_>
    17cc:	mov	x1, x19
    17d0:	mov	x8, #0x87                  	// #135
    17d4:	mov	x0, #0x2                   	// #2
    17d8:	mov	x2, #0x0                   	// #0
    17dc:	mov	x3, #0x8                   	// #8
    17e0:	svc	#0x0
    17e4:	ldp	x21, x22, [sp, #16]
    17e8:	ldr	x30, [sp, #32]
    17ec:	ldr	x0, [sp, #56]
    17f0:	ldp	x19, x20, [sp], #320
    17f4:	ret

00000000000017f8 <_ZN11__sanitizer20internal_join_threadEPv>:
    17f8:	mov	x1, #0x0                   	// #0
    17fc:	b	0 <_ZN11__sanitizer17real_pthread_joinEPvPS0_>

0000000000001800 <_ZNK11__sanitizer13SignalContext12GetWriteFlagEv>:
    1800:	ldr	x0, [x0, #8]
    1804:	add	x1, x0, #0x1d0
    1808:	ldr	w0, [x0, #468]
    180c:	cbz	w0, 1840 <_ZNK11__sanitizer13SignalContext12GetWriteFlagEv+0x40>
    1810:	mov	w3, #0x5201                	// #20993
    1814:	movk	w3, #0x4553, lsl #16
    1818:	b	1828 <_ZNK11__sanitizer13SignalContext12GetWriteFlagEv+0x28>
    181c:	add	x1, x1, w0, uxtw
    1820:	ldr	w0, [x1, #4]
    1824:	cbz	w0, 1840 <_ZNK11__sanitizer13SignalContext12GetWriteFlagEv+0x40>
    1828:	ldr	w2, [x1]
    182c:	cmp	w2, w3
    1830:	b.ne	181c <_ZNK11__sanitizer13SignalContext12GetWriteFlagEv+0x1c>  // b.any
    1834:	ldr	x0, [x1, #8]
    1838:	ubfx	w0, w0, #6, #1
    183c:	add	w0, w0, #0x1
    1840:	ret
    1844:	nop

0000000000001848 <_ZN11__sanitizer13SignalContext16DumpAllRegistersEPv>:
    1848:	ret
    184c:	nop

0000000000001850 <_ZN11__sanitizer13SignalContext10InitPcSpBpEv>:
    1850:	ldr	x1, [x0, #8]
    1854:	ldr	x2, [x1, #416]
    1858:	ldp	x3, x1, [x1, #432]
    185c:	stp	x1, x3, [x0, #24]
    1860:	str	x2, [x0, #40]
    1864:	ret

0000000000001868 <_ZN11__sanitizer11MaybeReexecEv>:
    1868:	ret
    186c:	nop

0000000000001870 <_ZN11__sanitizer9CheckASLREv>:
    1870:	ret
    1874:	nop

0000000000001878 <_ZN11__sanitizer14PrintModuleMapEv>:
    1878:	ret
    187c:	nop

0000000000001880 <_ZN11__sanitizer15CheckNoDeepBindEPKci>:
    1880:	tbnz	w1, #3, 1888 <_ZN11__sanitizer15CheckNoDeepBindEPKci+0x8>
    1884:	ret
    1888:	mov	x2, x0
    188c:	adrp	x1, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1890:	add	x0, x1, #0x0
    1894:	mov	x1, x2
    1898:	str	x30, [sp, #-16]!
    189c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    18a0:	bl	0 <_ZN11__sanitizer3DieEv>
    18a4:	nop

00000000000018a8 <_ZN11__sanitizer24FindAvailableMemoryRangeEmmmPmS0_>:
    18a8:	str	x30, [sp, #-16]!
    18ac:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    18b0:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    18b4:	add	x2, x2, #0x0
    18b8:	add	x0, x0, #0x0
    18bc:	mov	x4, #0x0                   	// #0
    18c0:	mov	x3, #0x0                   	// #0
    18c4:	mov	w1, #0x80a                 	// #2058
    18c8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    18cc:	nop

00000000000018d0 <_ZN11__sanitizer9GetRandomEPvmb>:
    18d0:	sub	x5, x1, #0x1
    18d4:	mov	x3, x1
    18d8:	cmp	x5, #0xff
    18dc:	mov	x4, x0
    18e0:	and	w2, w2, #0xff
    18e4:	ccmp	x0, #0x0, #0x4, ls  // ls = plast
    18e8:	b.ne	18f4 <_ZN11__sanitizer9GetRandomEPvmb+0x24>  // b.any
    18ec:	mov	w0, #0x0                   	// #0
    18f0:	ret
    18f4:	adrp	x5, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    18f8:	add	x5, x5, #0x0
    18fc:	ldrb	w6, [x5, #24]
    1900:	tst	w6, #0xff
    1904:	b.ne	192c <_ZN11__sanitizer9GetRandomEPvmb+0x5c>  // b.any
    1908:	eor	w2, w2, #0x1
    190c:	mov	x8, #0x116                 	// #278
    1910:	and	x2, x2, #0xff
    1914:	svc	#0x0
    1918:	cmn	x0, #0x1, lsl #12
    191c:	b.hi	1980 <_ZN11__sanitizer9GetRandomEPvmb+0xb0>  // b.pmore
    1920:	cmp	x1, x0
    1924:	mov	w0, #0x1                   	// #1
    1928:	b.eq	18f0 <_ZN11__sanitizer9GetRandomEPvmb+0x20>  // b.none
    192c:	adrp	x1, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1930:	mov	x8, #0x38                  	// #56
    1934:	add	x1, x1, #0x0
    1938:	mov	x0, #0xffffffffffffff9c    	// #-100
    193c:	mov	x2, #0x0                   	// #0
    1940:	svc	#0x0
    1944:	cmn	x0, #0x1, lsl #12
    1948:	b.hi	18ec <_ZN11__sanitizer9GetRandomEPvmb+0x1c>  // b.pmore
    194c:	sxtw	x5, w0
    1950:	mov	x0, x5
    1954:	mov	x1, x4
    1958:	mov	x2, x3
    195c:	mov	x8, #0x3f                  	// #63
    1960:	svc	#0x0
    1964:	cmn	x0, #0x1, lsl #12
    1968:	b.hi	1994 <_ZN11__sanitizer9GetRandomEPvmb+0xc4>  // b.pmore
    196c:	mov	x0, x5
    1970:	mov	x8, #0x39                  	// #57
    1974:	svc	#0x0
    1978:	mov	w0, #0x1                   	// #1
    197c:	ret
    1980:	cmn	w0, #0x26
    1984:	b.ne	192c <_ZN11__sanitizer9GetRandomEPvmb+0x5c>  // b.any
    1988:	mov	w0, #0x1                   	// #1
    198c:	strb	w0, [x5, #24]
    1990:	b	192c <_ZN11__sanitizer9GetRandomEPvmb+0x5c>
    1994:	cmn	w0, #0x4
    1998:	b.eq	1950 <_ZN11__sanitizer9GetRandomEPvmb+0x80>  // b.none
    199c:	mov	w0, #0x0                   	// #0
    19a0:	b	18f0 <_ZN11__sanitizer9GetRandomEPvmb+0x20>

sanitizer_linux_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>:
   0:	stp	x19, x20, [sp, #-176]!
   4:	stp	x21, x22, [sp, #16]
   8:	adrp	x22, 0 <_ZN11__sanitizer14PageSizeCachedE>
   c:	mov	x21, x2
  10:	ldr	x19, [x22]
  14:	stp	x23, x24, [sp, #32]
  18:	stp	x25, x30, [sp, #48]
  1c:	mov	x25, x0
  20:	ldr	x1, [x19]
  24:	stp	xzr, xzr, [sp, #72]
  28:	str	xzr, [sp, #88]
  2c:	cbz	x1, 21c <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x21c>
  30:	sub	x19, x1, #0x1
  34:	ands	x19, x19, x1
  38:	b.ne	330 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x330>  // b.any
  3c:	add	x24, x1, #0xfff
  40:	neg	x1, x1
  44:	and	x24, x24, x1
  48:	mov	w2, #0x0                   	// #0
  4c:	mov	x0, x24
  50:	adrp	x23, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
  54:	add	x1, x23, #0x0
  58:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  5c:	ldr	x1, [sp, #72]
  60:	mov	x20, x0
  64:	ldr	x2, [sp, #88]
  68:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  6c:	ldp	x0, x1, [sp, #72]
  70:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  74:	stp	x20, x24, [sp, #72]
  78:	ldr	x2, [sp, #88]
  7c:	cmp	x2, #0xfff
  80:	b.hi	a4 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0xa4>  // b.pmore
  84:	cmp	x24, #0xfff
  88:	b.ls	2d8 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x2d8>  // b.plast
  8c:	mov	x3, #0x1000                	// #4096
  90:	add	x0, x20, x2
  94:	mov	w1, #0x0                   	// #0
  98:	sub	x2, x3, x2
  9c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  a0:	ldr	x20, [sp, #72]
  a4:	mov	x0, #0x1000                	// #4096
  a8:	stp	x0, xzr, [sp, #88]
  ac:	strb	wzr, [x20]
  b0:	ldrb	w0, [x21, #8]
  b4:	cbnz	w0, 208 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x208>
  b8:	ldr	x2, [x25, #8]
  bc:	cbz	x2, d0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0xd0>
  c0:	adrp	x1, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
  c4:	add	x0, sp, #0x48
  c8:	add	x1, x1, #0x0
  cc:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
  d0:	ldr	x1, [sp, #88]
  d4:	ldr	x0, [sp, #72]
  d8:	cbz	x1, 340 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x340>
  dc:	ldrb	w1, [x0]
  e0:	cbz	w1, 1e8 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x1e8>
  e4:	add	x24, sp, #0x68
  e8:	mov	x2, #0x10                  	// #16
  ec:	mov	w1, #0x0                   	// #0
  f0:	add	x0, x24, #0x1c
  f4:	stp	xzr, xzr, [sp, #104]
  f8:	mov	w20, #0x0                   	// #0
  fc:	str	xzr, [sp, #120]
 100:	str	wzr, [sp, #128]
 104:	strb	wzr, [sp, #148]
 108:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 10c:	ldr	x2, [x25]
 110:	mov	x0, x24
 114:	ldr	x1, [sp, #72]
 118:	stp	xzr, xzr, [sp, #152]
 11c:	str	xzr, [sp, #168]
 120:	bl	0 <_ZN11__sanitizer12LoadedModule3setEPKcm>
 124:	ldrh	w3, [x25, #24]
 128:	cbnz	w3, 140 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x140>
 12c:	b	198 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x198>
 130:	add	w20, w20, #0x1
 134:	add	x19, x19, #0x38
 138:	cmp	w3, w20
 13c:	b.le	198 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x198>
 140:	ldr	x1, [x25, #16]
 144:	add	x2, x1, x19
 148:	ldr	w1, [x1, x19]
 14c:	cmp	w1, #0x1
 150:	b.ne	130 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x130>  // b.any
 154:	ldr	x1, [x25]
 158:	mov	x0, x24
 15c:	ldr	x4, [x2, #16]
 160:	mov	x5, #0x0                   	// #0
 164:	ldr	w3, [x2, #4]
 168:	add	w20, w20, #0x1
 16c:	ldr	x2, [x2, #40]
 170:	add	x1, x1, x4
 174:	ubfx	x4, x3, #1, #1
 178:	and	w3, w3, #0x1
 17c:	add	x2, x1, x2
 180:	bl	0 <_ZN11__sanitizer12LoadedModule15addAddressRangeEmmbbPKc>
 184:	ldrh	w3, [x25, #24]
 188:	add	x19, x19, #0x38
 18c:	cmp	w3, w20
 190:	b.gt	140 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x140>
 194:	nop
 198:	ldr	x19, [x21]
 19c:	mov	x0, #0xe38f                	// #58255
 1a0:	movk	x0, #0x8e38, lsl #16
 1a4:	movk	x0, #0x38e3, lsl #32
 1a8:	ldp	x4, x3, [x19, #8]
 1ac:	movk	x0, #0xe38e, lsl #48
 1b0:	umulh	x4, x4, x0
 1b4:	lsr	x4, x4, #6
 1b8:	cmp	x3, x4
 1bc:	b.hi	36c <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x36c>  // b.pmore
 1c0:	add	x0, x3, #0x1
 1c4:	b.eq	22c <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x22c>  // b.none
 1c8:	ldr	x21, [x19]
 1cc:	add	x3, x3, x3, lsl #3
 1d0:	str	x0, [x19, #16]
 1d4:	mov	x1, x24
 1d8:	add	x0, x21, x3, lsl #3
 1dc:	mov	x2, #0x48                  	// #72
 1e0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 1e4:	ldr	x0, [sp, #72]
 1e8:	ldr	x1, [sp, #80]
 1ec:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 1f0:	mov	w0, #0x0                   	// #0
 1f4:	ldp	x21, x22, [sp, #16]
 1f8:	ldp	x23, x24, [sp, #32]
 1fc:	ldp	x25, x30, [sp, #48]
 200:	ldp	x19, x20, [sp], #176
 204:	ret
 208:	ldr	x0, [sp, #72]
 20c:	strb	wzr, [x21, #8]
 210:	ldr	x1, [sp, #88]
 214:	bl	0 <_ZN11__sanitizer20ReadBinaryNameCachedEPcm>
 218:	b	d0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0xd0>
 21c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 220:	mov	x1, x0
 224:	str	x0, [x19]
 228:	b	30 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x30>
 22c:	tst	x3, x0
 230:	b.eq	26c <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x26c>  // b.none
 234:	clz	x2, x0
 238:	mov	w1, #0x3f                  	// #63
 23c:	sub	w1, w1, w2
 240:	mov	x2, #0x1                   	// #1
 244:	add	w4, w1, #0x1
 248:	lsl	x4, x2, x4
 24c:	cmp	x0, x4
 250:	b.cs	3c8 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x3c8>  // b.hs, b.nlast
 254:	lsl	x1, x2, x1
 258:	cmp	x0, x1
 25c:	b.ls	3a8 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x3a8>  // b.plast
 260:	cmp	x3, x4
 264:	b.hi	390 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x390>  // b.pmore
 268:	mov	x0, x4
 26c:	ldr	x22, [x22]
 270:	add	x0, x0, x0, lsl #3
 274:	lsl	x20, x0, #3
 278:	ldr	x0, [x22]
 27c:	cbz	x0, 384 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x384>
 280:	sub	x1, x0, #0x1
 284:	tst	x0, x1
 288:	b.ne	330 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x330>  // b.any
 28c:	add	x20, x20, x1
 290:	neg	x0, x0
 294:	and	x20, x20, x0
 298:	add	x1, x23, #0x0
 29c:	mov	w2, #0x0                   	// #0
 2a0:	mov	x0, x20
 2a4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 2a8:	mov	x21, x0
 2ac:	ldr	x2, [x19, #16]
 2b0:	ldr	x1, [x19]
 2b4:	add	x2, x2, x2, lsl #3
 2b8:	lsl	x2, x2, #3
 2bc:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 2c0:	ldp	x0, x1, [x19]
 2c4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 2c8:	stp	x21, x20, [x19]
 2cc:	ldr	x3, [x19, #16]
 2d0:	add	x0, x3, #0x1
 2d4:	b	1cc <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x1cc>
 2d8:	ldr	x20, [x22]
 2dc:	ldr	x0, [x20]
 2e0:	cbz	x0, 360 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x360>
 2e4:	sub	x1, x0, #0x1
 2e8:	tst	x1, x0
 2ec:	b.ne	330 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x330>  // b.any
 2f0:	add	x24, x0, #0xfff
 2f4:	neg	x0, x0
 2f8:	and	x24, x24, x0
 2fc:	add	x1, x23, #0x0
 300:	mov	w2, #0x0                   	// #0
 304:	mov	x0, x24
 308:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 30c:	mov	x20, x0
 310:	ldr	x1, [sp, #72]
 314:	ldr	x2, [sp, #88]
 318:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 31c:	ldp	x0, x1, [sp, #72]
 320:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 324:	stp	x20, x24, [sp, #72]
 328:	ldr	x2, [sp, #88]
 32c:	b	8c <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x8c>
 330:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 334:	add	x0, x0, #0x0
 338:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 33c:	bl	0 <_ZN11__sanitizer3DieEv>
 340:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 344:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 348:	add	x2, x2, #0x0
 34c:	add	x0, x0, #0x0
 350:	mov	x4, #0x0                   	// #0
 354:	mov	x3, #0x0                   	// #0
 358:	mov	w1, #0x1b6                 	// #438
 35c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 360:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 364:	str	x0, [x20]
 368:	b	2e4 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x2e4>
 36c:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 370:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 374:	add	x2, x2, #0x0
 378:	add	x0, x0, #0x0
 37c:	mov	w1, #0x1be                 	// #446
 380:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 384:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 388:	str	x0, [x22]
 38c:	b	280 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x280>
 390:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 394:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 398:	add	x2, x2, #0x0
 39c:	add	x0, x0, #0x0
 3a0:	mov	w1, #0x1fd                 	// #509
 3a4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3a8:	mov	x4, x1
 3ac:	mov	x3, x0
 3b0:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 3b4:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 3b8:	add	x2, x2, #0x0
 3bc:	add	x0, x0, #0x0
 3c0:	mov	w1, #0x17c                 	// #380
 3c4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3c8:	mov	x3, x0
 3cc:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 3d0:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 3d4:	add	x2, x2, #0x0
 3d8:	add	x0, x0, #0x0
 3dc:	mov	w1, #0x17b                 	// #379
 3e0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3e4:	nop

00000000000003e8 <_ZN11__sanitizer18internal_sigactionEiPKvPv>:
 3e8:	adrp	x3, 0 <_ZN11__sanitizer14real_sigactionEiPKvPv>
 3ec:	ldr	x3, [x3]
 3f0:	cbz	x3, 3f8 <_ZN11__sanitizer18internal_sigactionEiPKvPv+0x10>
 3f4:	b	0 <_ZN11__sanitizer14real_sigactionEiPKvPv>
 3f8:	b	0 <sigaction>
 3fc:	nop

0000000000000400 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_>:
 400:	stp	x19, x20, [sp, #-192]!
 404:	str	x30, [sp, #48]
 408:	cbz	x1, 574 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x174>
 40c:	stp	x23, x24, [sp, #32]
 410:	mov	x24, x2
 414:	cbz	x2, 59c <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x19c>
 418:	mov	x20, x1
 41c:	and	w0, w0, #0xff
 420:	cbz	w0, 4bc <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0xbc>
 424:	stp	x21, x22, [sp, #16]
 428:	add	x21, sp, #0x40
 42c:	mov	x1, x21
 430:	mov	w0, #0x3                   	// #3
 434:	bl	0 <getrlimit>
 438:	sxtw	x19, w0
 43c:	cbnz	w0, 5c0 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x1c0>
 440:	add	x22, sp, #0x50
 444:	mov	w1, #0x1                   	// #1
 448:	mov	x0, x22
 44c:	add	x23, sp, #0x70
 450:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb>
 454:	stp	xzr, xzr, [sp, #136]
 458:	str	xzr, [sp, #184]
 45c:	b	470 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x70>
 460:	ldr	x0, [sp, #120]
 464:	cmp	x0, x21
 468:	b.hi	520 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x120>  // b.pmore
 46c:	mov	x19, x0
 470:	mov	x1, x23
 474:	mov	x0, x22
 478:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
 47c:	tst	w0, #0xff
 480:	b.ne	460 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x60>  // b.any
 484:	ldr	x0, [sp, #112]
 488:	cmp	x0, x21
 48c:	b.hi	49c <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x9c>  // b.pmore
 490:	ldr	x3, [sp, #120]
 494:	cmp	x3, x21
 498:	b.hi	530 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x130>  // b.pmore
 49c:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 4a0:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 4a4:	add	x2, x2, #0x0
 4a8:	add	x0, x0, #0x0
 4ac:	mov	x4, #0x0                   	// #0
 4b0:	mov	x3, #0x0                   	// #0
 4b4:	mov	w1, #0x6a                  	// #106
 4b8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 4bc:	add	x19, sp, #0x70
 4c0:	str	xzr, [sp, #64]
 4c4:	mov	x0, x19
 4c8:	str	xzr, [sp, #80]
 4cc:	bl	0 <pthread_attr_init>
 4d0:	bl	0 <pthread_self>
 4d4:	mov	x1, x19
 4d8:	bl	0 <pthread_getattr_np>
 4dc:	sxtw	x3, w0
 4e0:	cbnz	w0, 5e0 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x1e0>
 4e4:	add	x2, sp, #0x40
 4e8:	add	x1, sp, #0x50
 4ec:	mov	x0, x19
 4f0:	bl	0 <_ZN11__sanitizer24my_pthread_attr_getstackEPvPS0_Pm>
 4f4:	mov	x0, x19
 4f8:	bl	0 <pthread_attr_destroy>
 4fc:	ldr	x0, [sp, #64]
 500:	ldr	x1, [sp, #80]
 504:	ldr	x30, [sp, #48]
 508:	add	x0, x0, x1
 50c:	str	x0, [x20]
 510:	str	x1, [x24]
 514:	ldp	x23, x24, [sp, #32]
 518:	ldp	x19, x20, [sp], #192
 51c:	ret
 520:	ldr	x1, [sp, #112]
 524:	cmp	x1, x21
 528:	b.hi	49c <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x9c>  // b.pmore
 52c:	mov	x3, x0
 530:	ldr	x1, [sp, #64]
 534:	mov	x2, #0x40000000            	// #1073741824
 538:	sub	x19, x3, x19
 53c:	str	x3, [x20]
 540:	cmp	x1, x2
 544:	mov	x0, x22
 548:	csel	x1, x1, x2, ls  // ls = plast
 54c:	cmp	x19, x1
 550:	csel	x19, x19, x1, ls  // ls = plast
 554:	sub	x3, x3, x19
 558:	str	x3, [x24]
 55c:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>
 560:	ldp	x21, x22, [sp, #16]
 564:	ldp	x23, x24, [sp, #32]
 568:	ldr	x30, [sp, #48]
 56c:	ldp	x19, x20, [sp], #192
 570:	ret
 574:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 578:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 57c:	add	x2, x2, #0x0
 580:	add	x0, x0, #0x0
 584:	mov	x4, #0x0                   	// #0
 588:	mov	x3, #0x0                   	// #0
 58c:	mov	w1, #0x5b                  	// #91
 590:	stp	x21, x22, [sp, #16]
 594:	stp	x23, x24, [sp, #32]
 598:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 59c:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 5a0:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 5a4:	add	x2, x2, #0x0
 5a8:	add	x0, x0, #0x0
 5ac:	mov	x4, #0x0                   	// #0
 5b0:	mov	x3, #0x0                   	// #0
 5b4:	mov	w1, #0x5c                  	// #92
 5b8:	stp	x21, x22, [sp, #16]
 5bc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 5c0:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 5c4:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 5c8:	mov	x3, x19
 5cc:	add	x2, x2, #0x0
 5d0:	add	x0, x0, #0x0
 5d4:	mov	x4, #0x0                   	// #0
 5d8:	mov	w1, #0x60                  	// #96
 5dc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 5e0:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 5e4:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 5e8:	add	x2, x2, #0x0
 5ec:	add	x0, x0, #0x0
 5f0:	mov	x4, #0x0                   	// #0
 5f4:	mov	w1, #0x88                  	// #136
 5f8:	stp	x21, x22, [sp, #16]
 5fc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000600 <_ZN11__sanitizer6SetEnvEPKcS1_>:
 600:	stp	x19, x20, [sp, #-48]!
 604:	mov	x19, x0
 608:	mov	x20, x1
 60c:	mov	x0, #0xffffffffffffffff    	// #-1
 610:	adrp	x1, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 614:	add	x1, x1, #0x0
 618:	str	x30, [sp, #16]
 61c:	bl	0 <dlsym>
 620:	str	x0, [sp, #32]
 624:	cbz	x0, 660 <_ZN11__sanitizer6SetEnvEPKcS1_+0x60>
 628:	add	x1, sp, #0x20
 62c:	add	x0, sp, #0x28
 630:	mov	x2, #0x8                   	// #8
 634:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 638:	ldr	x3, [sp, #40]
 63c:	mov	x1, x20
 640:	mov	x0, x19
 644:	mov	w2, #0x1                   	// #1
 648:	blr	x3
 64c:	cmp	w0, #0x0
 650:	cset	w0, eq  // eq = none
 654:	ldr	x30, [sp, #16]
 658:	ldp	x19, x20, [sp], #48
 65c:	ret
 660:	mov	w0, #0x0                   	// #0
 664:	ldr	x30, [sp, #16]
 668:	ldp	x19, x20, [sp], #48
 66c:	ret

0000000000000670 <_ZN11__sanitizer11InitTlsSizeEv>:
 670:	str	x30, [sp, #-48]!
 674:	adrp	x1, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 678:	mov	x0, #0xffffffffffffffff    	// #-1
 67c:	add	x1, x1, #0x0
 680:	bl	0 <dlsym>
 684:	mov	x3, x0
 688:	mov	x2, #0x8                   	// #8
 68c:	add	x1, sp, #0x20
 690:	add	x0, sp, #0x28
 694:	stp	xzr, xzr, [sp, #16]
 698:	str	x3, [sp, #32]
 69c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 6a0:	ldr	x2, [sp, #40]
 6a4:	cbz	x2, 718 <_ZN11__sanitizer11InitTlsSizeEv+0xa8>
 6a8:	add	x1, sp, #0x18
 6ac:	add	x0, sp, #0x10
 6b0:	blr	x2
 6b4:	ldr	x1, [sp, #24]
 6b8:	cmp	x1, #0xf
 6bc:	b.ls	6f0 <_ZN11__sanitizer11InitTlsSizeEv+0x80>  // b.plast
 6c0:	sub	x0, x1, #0x1
 6c4:	tst	x0, x1
 6c8:	b.ne	738 <_ZN11__sanitizer11InitTlsSizeEv+0xc8>  // b.any
 6cc:	ldr	x0, [sp, #16]
 6d0:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 6d4:	add	x0, x0, x1
 6d8:	neg	x1, x1
 6dc:	sub	x0, x0, #0x1
 6e0:	and	x0, x0, x1
 6e4:	str	x0, [x2]
 6e8:	ldr	x30, [sp], #48
 6ec:	ret
 6f0:	ldr	x0, [sp, #16]
 6f4:	mov	x1, #0x10                  	// #16
 6f8:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 6fc:	add	x0, x0, x1
 700:	neg	x1, x1
 704:	sub	x0, x0, #0x1
 708:	and	x0, x0, x1
 70c:	str	x0, [x2]
 710:	ldr	x30, [sp], #48
 714:	ret
 718:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 71c:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 720:	add	x2, x2, #0x0
 724:	add	x0, x0, #0x0
 728:	mov	x4, #0x0                   	// #0
 72c:	mov	x3, #0x0                   	// #0
 730:	mov	w1, #0xd4                  	// #212
 734:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 738:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 73c:	add	x0, x0, #0x0
 740:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 744:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000748 <_ZN11__sanitizer20ThreadDescriptorSizeEv>:
 748:	adrp	x1, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 74c:	add	x1, x1, #0x0
 750:	ldr	x0, [x1, #8]
 754:	cbnz	x0, 764 <_ZN11__sanitizer20ThreadDescriptorSizeEv+0x1c>
 758:	mov	x2, #0x6f0                 	// #1776
 75c:	mov	x0, x2
 760:	str	x2, [x1, #8]
 764:	ret

0000000000000768 <_ZN11__sanitizer16ThreadSelfOffsetEv>:
 768:	mov	x0, #0x10                  	// #16
 76c:	ret

0000000000000770 <_ZN11__sanitizer10ThreadSelfEv>:
 770:	adrp	x1, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 774:	add	x1, x1, #0x0
 778:	mrs	x2, tpidr_el0
 77c:	ldr	x0, [x1, #8]
 780:	cbnz	x0, 790 <_ZN11__sanitizer10ThreadSelfEv+0x20>
 784:	mov	x3, #0x6f0                 	// #1776
 788:	mov	x0, x3
 78c:	str	x3, [x1, #8]
 790:	sub	x0, x2, x0
 794:	ret

0000000000000798 <_ZN11__sanitizer10GetTlsSizeEv>:
 798:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 79c:	ldr	x0, [x0]
 7a0:	ret
 7a4:	nop

00000000000007a8 <_ZN11__sanitizer20GetThreadStackAndTlsEbPmS0_S0_S0_>:
 7a8:	adrp	x6, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 7ac:	add	x7, x6, #0x0
 7b0:	stp	x19, x20, [sp, #-64]!
 7b4:	mov	x20, x1
 7b8:	mov	x19, x3
 7bc:	ldr	x5, [x7, #8]
 7c0:	stp	x21, x22, [sp, #16]
 7c4:	mov	x22, x2
 7c8:	stp	x23, x30, [sp, #32]
 7cc:	mov	x21, x4
 7d0:	and	w23, w0, #0xff
 7d4:	mrs	x0, tpidr_el0
 7d8:	cbnz	x5, 7e8 <_ZN11__sanitizer20GetThreadStackAndTlsEbPmS0_S0_S0_+0x40>
 7dc:	mov	x1, #0x6f0                 	// #1776
 7e0:	mov	x5, x1
 7e4:	str	x1, [x7, #8]
 7e8:	sub	x0, x0, x5
 7ec:	str	x0, [x19]
 7f0:	ldr	x0, [x6]
 7f4:	str	x0, [x21]
 7f8:	add	x1, sp, #0x30
 7fc:	mov	w0, w23
 800:	add	x2, sp, #0x38
 804:	bl	400 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_>
 808:	ldp	x0, x1, [sp, #48]
 80c:	str	x1, [x20]
 810:	sub	x0, x0, x1
 814:	str	x0, [x22]
 818:	cbnz	w23, 864 <_ZN11__sanitizer20GetThreadStackAndTlsEbPmS0_S0_S0_+0xbc>
 81c:	ldr	x3, [x19]
 820:	ldr	x4, [x20]
 824:	cmp	x3, x4
 828:	b.ls	864 <_ZN11__sanitizer20GetThreadStackAndTlsEbPmS0_S0_S0_+0xbc>  // b.plast
 82c:	add	x1, x0, x4
 830:	cmp	x3, x1
 834:	b.cs	864 <_ZN11__sanitizer20GetThreadStackAndTlsEbPmS0_S0_S0_+0xbc>  // b.hs, b.nlast
 838:	ldr	x2, [x21]
 83c:	add	x3, x3, x2
 840:	cmp	x4, x3
 844:	b.cs	874 <_ZN11__sanitizer20GetThreadStackAndTlsEbPmS0_S0_S0_+0xcc>  // b.hs, b.nlast
 848:	cmp	x1, x3
 84c:	b.cc	88c <_ZN11__sanitizer20GetThreadStackAndTlsEbPmS0_S0_S0_+0xe4>  // b.lo, b.ul, b.last
 850:	sub	x0, x0, x2
 854:	str	x0, [x22]
 858:	ldr	x1, [x20]
 85c:	add	x0, x1, x0
 860:	str	x0, [x19]
 864:	ldp	x21, x22, [sp, #16]
 868:	ldp	x23, x30, [sp, #32]
 86c:	ldp	x19, x20, [sp], #64
 870:	ret
 874:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 878:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 87c:	add	x2, x2, #0x0
 880:	add	x0, x0, #0x0
 884:	mov	w1, #0x203                 	// #515
 888:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 88c:	mov	x4, x1
 890:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 894:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 898:	add	x2, x2, #0x0
 89c:	add	x0, x0, #0x0
 8a0:	mov	w1, #0x204                 	// #516
 8a4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000008a8 <_ZN11__sanitizer13ListOfModules4initEv>:
 8a8:	stp	x19, x20, [sp, #-48]!
 8ac:	mov	x19, x0
 8b0:	ldrb	w0, [x0, #24]
 8b4:	stp	x21, x30, [sp, #16]
 8b8:	cbz	w0, 928 <_ZN11__sanitizer13ListOfModules4initEv+0x80>
 8bc:	ldr	x20, [x19, #16]
 8c0:	ldr	x0, [x19]
 8c4:	add	x20, x20, x20, lsl #3
 8c8:	mov	x21, x0
 8cc:	add	x20, x0, x20, lsl #3
 8d0:	cmp	x0, x20
 8d4:	b.eq	8ec <_ZN11__sanitizer13ListOfModules4initEv+0x44>  // b.none
 8d8:	mov	x0, x21
 8dc:	add	x21, x21, #0x48
 8e0:	bl	0 <_ZN11__sanitizer12LoadedModule5clearEv>
 8e4:	cmp	x20, x21
 8e8:	b.ne	8d8 <_ZN11__sanitizer13ListOfModules4initEv+0x30>  // b.any
 8ec:	str	xzr, [x19, #16]
 8f0:	mov	w2, #0x1                   	// #1
 8f4:	strb	w2, [x19, #24]
 8f8:	add	x1, sp, #0x20
 8fc:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 900:	add	x0, x0, #0x0
 904:	str	x19, [sp, #32]
 908:	strb	w2, [sp, #40]
 90c:	stur	wzr, [sp, #41]
 910:	sturh	wzr, [sp, #45]
 914:	strb	wzr, [sp, #47]
 918:	bl	0 <dl_iterate_phdr>
 91c:	ldp	x21, x30, [sp, #16]
 920:	ldp	x19, x20, [sp], #48
 924:	ret
 928:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
 92c:	str	xzr, [x19, #16]
 930:	ldr	x20, [x20]
 934:	ldr	x0, [x20]
 938:	stp	xzr, xzr, [x19]
 93c:	cbz	x0, 998 <_ZN11__sanitizer13ListOfModules4initEv+0xf0>
 940:	sub	x1, x0, #0x1
 944:	tst	x1, x0
 948:	b.ne	9a4 <_ZN11__sanitizer13ListOfModules4initEv+0xfc>  // b.any
 94c:	add	x20, x0, #0x11f, lsl #12
 950:	neg	x0, x0
 954:	add	x20, x20, #0xfff
 958:	mov	w2, #0x0                   	// #0
 95c:	and	x20, x20, x0
 960:	adrp	x1, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 964:	mov	x0, x20
 968:	add	x1, x1, #0x0
 96c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 970:	mov	x21, x0
 974:	ldr	x2, [x19, #16]
 978:	ldr	x1, [x19]
 97c:	add	x2, x2, x2, lsl #3
 980:	lsl	x2, x2, #3
 984:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 988:	ldp	x0, x1, [x19]
 98c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 990:	stp	x21, x20, [x19]
 994:	b	8f0 <_ZN11__sanitizer13ListOfModules4initEv+0x48>
 998:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 99c:	str	x0, [x20]
 9a0:	b	940 <_ZN11__sanitizer13ListOfModules4initEv+0x98>
 9a4:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 9a8:	add	x0, x0, #0x0
 9ac:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 9b0:	bl	0 <_ZN11__sanitizer3DieEv>
 9b4:	nop

00000000000009b8 <_ZN11__sanitizer13ListOfModules12fallbackInitEv>:
 9b8:	stp	x19, x20, [sp, #-64]!
 9bc:	mov	x19, x0
 9c0:	ldrb	w0, [x0, #24]
 9c4:	stp	x21, x30, [sp, #16]
 9c8:	cbz	w0, a34 <_ZN11__sanitizer13ListOfModules12fallbackInitEv+0x7c>
 9cc:	ldr	x20, [x19, #16]
 9d0:	ldr	x0, [x19]
 9d4:	add	x20, x20, x20, lsl #3
 9d8:	mov	x21, x0
 9dc:	add	x20, x0, x20, lsl #3
 9e0:	cmp	x0, x20
 9e4:	b.eq	9fc <_ZN11__sanitizer13ListOfModules12fallbackInitEv+0x44>  // b.none
 9e8:	mov	x0, x21
 9ec:	add	x21, x21, #0x48
 9f0:	bl	0 <_ZN11__sanitizer12LoadedModule5clearEv>
 9f4:	cmp	x20, x21
 9f8:	b.ne	9e8 <_ZN11__sanitizer13ListOfModules12fallbackInitEv+0x30>  // b.any
 9fc:	str	xzr, [x19, #16]
 a00:	mov	w1, #0x1                   	// #1
 a04:	strb	w1, [x19, #24]
 a08:	add	x20, sp, #0x20
 a0c:	mov	x0, x20
 a10:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb>
 a14:	mov	x1, x19
 a18:	mov	x0, x20
 a1c:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 a20:	mov	x0, x20
 a24:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>
 a28:	ldp	x21, x30, [sp, #16]
 a2c:	ldp	x19, x20, [sp], #64
 a30:	ret
 a34:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
 a38:	str	xzr, [x19, #16]
 a3c:	ldr	x20, [x20]
 a40:	ldr	x0, [x20]
 a44:	stp	xzr, xzr, [x19]
 a48:	cbz	x0, aa4 <_ZN11__sanitizer13ListOfModules12fallbackInitEv+0xec>
 a4c:	sub	x1, x0, #0x1
 a50:	tst	x1, x0
 a54:	b.ne	ab0 <_ZN11__sanitizer13ListOfModules12fallbackInitEv+0xf8>  // b.any
 a58:	add	x20, x0, #0x11f, lsl #12
 a5c:	neg	x0, x0
 a60:	add	x20, x20, #0xfff
 a64:	mov	w2, #0x0                   	// #0
 a68:	and	x20, x20, x0
 a6c:	adrp	x1, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 a70:	mov	x0, x20
 a74:	add	x1, x1, #0x0
 a78:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 a7c:	mov	x21, x0
 a80:	ldr	x2, [x19, #16]
 a84:	ldr	x1, [x19]
 a88:	add	x2, x2, x2, lsl #3
 a8c:	lsl	x2, x2, #3
 a90:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 a94:	ldp	x0, x1, [x19]
 a98:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 a9c:	stp	x21, x20, [x19]
 aa0:	b	a00 <_ZN11__sanitizer13ListOfModules12fallbackInitEv+0x48>
 aa4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 aa8:	str	x0, [x20]
 aac:	b	a4c <_ZN11__sanitizer13ListOfModules12fallbackInitEv+0x94>
 ab0:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 ab4:	add	x0, x0, #0x0
 ab8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 abc:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000ac0 <_ZN11__sanitizer6GetRSSEv>:
 ac0:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 ac4:	stp	x19, x20, [sp, #-176]!
 ac8:	ldr	x0, [x0]
 acc:	ldrb	w0, [x0, #160]
 ad0:	str	x30, [sp, #16]
 ad4:	cbnz	w0, b00 <_ZN11__sanitizer6GetRSSEv+0x40>
 ad8:	add	x1, sp, #0x20
 adc:	bl	0 <getrusage>
 ae0:	mov	w1, w0
 ae4:	mov	x0, #0x0                   	// #0
 ae8:	cbnz	w1, af4 <_ZN11__sanitizer6GetRSSEv+0x34>
 aec:	ldr	x0, [sp, #64]
 af0:	lsl	x0, x0, #10
 af4:	ldr	x30, [sp, #16]
 af8:	ldp	x19, x20, [sp], #176
 afc:	ret
 b00:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 b04:	mov	x2, #0x0                   	// #0
 b08:	add	x0, x0, #0x0
 b0c:	mov	w1, #0x0                   	// #0
 b10:	bl	0 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi>
 b14:	mov	w20, w0
 b18:	cmn	w0, #0x1
 b1c:	b.eq	bec <_ZN11__sanitizer6GetRSSEv+0x12c>  // b.none
 b20:	add	x19, sp, #0x20
 b24:	mov	x2, #0x3f                  	// #63
 b28:	mov	x1, x19
 b2c:	bl	0 <_ZN11__sanitizer13internal_readEiPvm>
 b30:	mov	x1, x0
 b34:	mov	w0, w20
 b38:	mov	x20, x1
 b3c:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 b40:	cmp	x20, #0x0
 b44:	mov	x0, #0x0                   	// #0
 b48:	b.le	af4 <_ZN11__sanitizer6GetRSSEv+0x34>
 b4c:	strb	wzr, [x19, x20]
 b50:	mov	x1, x19
 b54:	ldrb	w2, [sp, #32]
 b58:	sub	w0, w2, #0x30
 b5c:	and	w0, w0, #0xff
 b60:	cmp	w0, #0x9
 b64:	b.hi	b7c <_ZN11__sanitizer6GetRSSEv+0xbc>  // b.pmore
 b68:	ldrb	w2, [x1, #1]!
 b6c:	sub	w0, w2, #0x30
 b70:	and	w0, w0, #0xff
 b74:	cmp	w0, #0x9
 b78:	b.ls	b68 <_ZN11__sanitizer6GetRSSEv+0xa8>  // b.plast
 b7c:	cbz	w2, c20 <_ZN11__sanitizer6GetRSSEv+0x160>
 b80:	ldrb	w2, [x1, #1]!
 b84:	sub	w0, w2, #0x30
 b88:	cmp	w2, #0x0
 b8c:	and	w0, w0, #0xff
 b90:	ccmp	w0, #0x9, #0x0, ne  // ne = any
 b94:	b.hi	b80 <_ZN11__sanitizer6GetRSSEv+0xc0>  // b.pmore
 b98:	cmp	w0, #0x9
 b9c:	mov	x19, #0x0                   	// #0
 ba0:	b.hi	bcc <_ZN11__sanitizer6GetRSSEv+0x10c>  // b.pmore
 ba4:	nop
 ba8:	and	x3, x2, #0xff
 bac:	ldrb	w2, [x1, #1]!
 bb0:	add	x19, x19, x19, lsl #2
 bb4:	sub	w0, w2, #0x30
 bb8:	add	x19, x3, x19, lsl #1
 bbc:	and	w0, w0, #0xff
 bc0:	sub	x19, x19, #0x30
 bc4:	cmp	w0, #0x9
 bc8:	b.ls	ba8 <_ZN11__sanitizer6GetRSSEv+0xe8>  // b.plast
 bcc:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
 bd0:	ldr	x20, [x20]
 bd4:	ldr	x0, [x20]
 bd8:	cbz	x0, c10 <_ZN11__sanitizer6GetRSSEv+0x150>
 bdc:	mul	x0, x19, x0
 be0:	ldr	x30, [sp, #16]
 be4:	ldp	x19, x20, [sp], #176
 be8:	ret
 bec:	add	x1, sp, #0x20
 bf0:	mov	w0, #0x0                   	// #0
 bf4:	bl	0 <getrusage>
 bf8:	mov	w1, w0
 bfc:	mov	x0, #0x0                   	// #0
 c00:	cbnz	w1, af4 <_ZN11__sanitizer6GetRSSEv+0x34>
 c04:	ldr	x0, [sp, #64]
 c08:	lsl	x0, x0, #10
 c0c:	b	af4 <_ZN11__sanitizer6GetRSSEv+0x34>
 c10:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 c14:	str	x0, [x20]
 c18:	mul	x0, x19, x0
 c1c:	b	be0 <_ZN11__sanitizer6GetRSSEv+0x120>
 c20:	mov	x19, #0x0                   	// #0
 c24:	b	bcc <_ZN11__sanitizer6GetRSSEv+0x10c>

0000000000000c28 <_ZN11__sanitizer15GetNumberOfCPUsEv>:
 c28:	stp	x19, x30, [sp, #-144]!
 c2c:	mov	x1, #0x80                  	// #128
 c30:	mov	w0, #0x0                   	// #0
 c34:	add	x19, sp, #0x10
 c38:	mov	x2, x19
 c3c:	bl	0 <sched_getaffinity>
 c40:	cbnz	w0, c58 <_ZN11__sanitizer15GetNumberOfCPUsEv+0x30>
 c44:	mov	x1, x19
 c48:	mov	x0, #0x80                  	// #128
 c4c:	bl	0 <__sched_cpucount>
 c50:	ldp	x19, x30, [sp], #144
 c54:	ret
 c58:	sxtw	x3, w0
 c5c:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 c60:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 c64:	add	x2, x2, #0x0
 c68:	add	x0, x0, #0x0
 c6c:	mov	x4, #0x0                   	// #0
 c70:	mov	w1, #0x2bb                 	// #699
 c74:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000c78 <_ZN11__sanitizer14AndroidLogInitEv>:
 c78:	ret
 c7c:	nop

0000000000000c80 <_ZN11__sanitizer20WriteOneLineToSyslogEPKc>:
 c80:	mov	x2, x0
 c84:	adrp	x1, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 c88:	mov	w0, #0x6                   	// #6
 c8c:	add	x1, x1, #0x0
 c90:	b	0 <syslog>
 c94:	nop

0000000000000c98 <_ZN11__sanitizer15SetAbortMessageEPKc>:
 c98:	ret
 c9c:	nop

0000000000000ca0 <_ZN11__sanitizer18LogMessageOnPrintfEPKc>:
 ca0:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 ca4:	ldr	x1, [x1]
 ca8:	ldrb	w1, [x1, #49]
 cac:	cbnz	w1, cb4 <_ZN11__sanitizer18LogMessageOnPrintfEPKc+0x14>
 cb0:	ret
 cb4:	b	0 <_ZN11__sanitizer13WriteToSyslogEPKc>

0000000000000cb8 <_ZN11__sanitizer17MonotonicNanoTimeEv>:
 cb8:	adrp	x0, 0 <__progname>
 cbc:	str	x30, [sp, #-32]!
 cc0:	ldr	x0, [x0]
 cc4:	cbz	x0, cd8 <_ZN11__sanitizer17MonotonicNanoTimeEv+0x20>
 cc8:	ldr	x0, [x0]
 ccc:	cbz	x0, cd8 <_ZN11__sanitizer17MonotonicNanoTimeEv+0x20>
 cd0:	ldrb	w0, [x0]
 cd4:	cbnz	w0, cfc <_ZN11__sanitizer17MonotonicNanoTimeEv+0x44>
 cd8:	add	x1, sp, #0x10
 cdc:	mov	w0, #0x1                   	// #1
 ce0:	bl	0 <_ZN11__sanitizer22internal_clock_gettimeEiPv>
 ce4:	ldp	x2, x1, [sp, #16]
 ce8:	mov	x0, #0xca00                	// #51712
 cec:	movk	x0, #0x3b9a, lsl #16
 cf0:	ldr	x30, [sp], #32
 cf4:	madd	x0, x2, x0, x1
 cf8:	ret
 cfc:	adrp	x0, 0 <real_clock_gettime>
 d00:	add	x1, sp, #0x10
 d04:	ldr	x0, [x0]
 d08:	cbz	x0, d2c <_ZN11__sanitizer17MonotonicNanoTimeEv+0x74>
 d0c:	mov	w0, #0x1                   	// #1
 d10:	bl	0 <real_clock_gettime>
 d14:	ldp	x2, x1, [sp, #16]
 d18:	mov	x0, #0xca00                	// #51712
 d1c:	movk	x0, #0x3b9a, lsl #16
 d20:	ldr	x30, [sp], #32
 d24:	madd	x0, x2, x0, x1
 d28:	ret
 d2c:	mov	w0, #0x1                   	// #1
 d30:	bl	0 <clock_gettime>
 d34:	b	ce4 <_ZN11__sanitizer17MonotonicNanoTimeEv+0x2c>

sanitizer_linux_s390.o:     file format elf64-littleaarch64


sanitizer_mac.o:     file format elf64-littleaarch64


sanitizer_mac_libcdep.o:     file format elf64-littleaarch64


sanitizer_netbsd.o:     file format elf64-littleaarch64


sanitizer_openbsd.o:     file format elf64-littleaarch64


sanitizer_persistent_allocator.o:     file format elf64-littleaarch64


sanitizer_platform_limits_linux.o:     file format elf64-littleaarch64


sanitizer_platform_limits_openbsd.o:     file format elf64-littleaarch64


sanitizer_platform_limits_posix.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer22__sanitizer_in_addr_szEi>:
   0:	cmp	w0, #0x2
   4:	b.eq	18 <_ZN11__sanitizer22__sanitizer_in_addr_szEi+0x18>  // b.none
   8:	cmp	w0, #0xa
   c:	cset	x0, eq  // eq = none
  10:	lsl	x0, x0, #4
  14:	ret
  18:	mov	x0, #0x4                   	// #4
  1c:	ret

sanitizer_platform_limits_solaris.o:     file format elf64-littleaarch64


sanitizer_posix.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer18GetMmapGranularityEv>:
   0:	b	0 <_ZN11__sanitizer11GetPageSizeEv>
   4:	nop

0000000000000008 <_ZN11__sanitizer9MmapOrDieEmPKcb>:
   8:	stp	x19, x20, [sp, #-64]!
   c:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
  10:	mov	x19, x0
  14:	ldr	x20, [x20]
  18:	stp	x21, x22, [sp, #16]
  1c:	mov	x21, x1
  20:	and	w22, w2, #0xff
  24:	ldr	x0, [x20]
  28:	str	x30, [sp, #32]
  2c:	cbz	x0, 94 <_ZN11__sanitizer9MmapOrDieEmPKcb+0x8c>
  30:	sub	x1, x0, #0x1
  34:	tst	x0, x1
  38:	b.ne	a8 <_ZN11__sanitizer9MmapOrDieEmPKcb+0xa0>  // b.any
  3c:	add	x19, x19, x1
  40:	neg	x0, x0
  44:	and	x19, x19, x0
  48:	mov	x5, #0x0                   	// #0
  4c:	mov	w4, #0xffffffff            	// #-1
  50:	mov	w3, #0x22                  	// #34
  54:	mov	w2, #0x3                   	// #3
  58:	mov	x1, x19
  5c:	mov	x0, #0x0                   	// #0
  60:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
  64:	add	x1, sp, #0x3c
  68:	mov	x20, x0
  6c:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
  70:	tst	w0, #0xff
  74:	b.ne	b8 <_ZN11__sanitizer9MmapOrDieEmPKcb+0xb0>  // b.any
  78:	mov	x0, x19
  7c:	bl	0 <_ZN11__sanitizer17IncreaseTotalMmapEm>
  80:	mov	x0, x20
  84:	ldp	x21, x22, [sp, #16]
  88:	ldr	x30, [sp, #32]
  8c:	ldp	x19, x20, [sp], #64
  90:	ret
  94:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  98:	str	x0, [x20]
  9c:	sub	x1, x0, #0x1
  a0:	tst	x0, x1
  a4:	b.eq	3c <_ZN11__sanitizer9MmapOrDieEmPKcb+0x34>  // b.none
  a8:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
  ac:	add	x0, x0, #0x0
  b0:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  b4:	bl	0 <_ZN11__sanitizer3DieEv>
  b8:	ldr	w3, [sp, #60]
  bc:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
  c0:	mov	w4, w22
  c4:	mov	x1, x21
  c8:	mov	x0, x19
  cc:	add	x2, x2, #0x0
  d0:	bl	0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
  d4:	nop

00000000000000d8 <_ZN11__sanitizer10UnmapOrDieEPvm>:
  d8:	cmp	x0, #0x0
  dc:	ccmp	x1, #0x0, #0x4, ne  // ne = any
  e0:	b.ne	e8 <_ZN11__sanitizer10UnmapOrDieEPvm+0x10>  // b.any
  e4:	ret
  e8:	stp	x19, x20, [sp, #-32]!
  ec:	mov	x19, x1
  f0:	mov	x20, x0
  f4:	str	x30, [sp, #16]
  f8:	bl	0 <_ZN11__sanitizer15internal_munmapEPvm>
  fc:	mov	x1, #0x0                   	// #0
 100:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 104:	tst	w0, #0xff
 108:	b.ne	11c <_ZN11__sanitizer10UnmapOrDieEPvm+0x44>  // b.any
 10c:	mov	x0, x19
 110:	ldr	x30, [sp, #16]
 114:	ldp	x19, x20, [sp], #32
 118:	b	0 <_ZN11__sanitizer17DecreaseTotalMmapEm>
 11c:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 120:	mov	x4, x20
 124:	mov	x3, x19
 128:	mov	x2, x19
 12c:	ldr	x1, [x1]
 130:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 134:	add	x0, x0, #0x0
 138:	ldr	x1, [x1]
 13c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 140:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 144:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 148:	add	x2, x2, #0x0
 14c:	add	x0, x0, #0x0
 150:	mov	x4, #0x0                   	// #0
 154:	mov	x3, #0x0                   	// #0
 158:	mov	w1, #0x3c                  	// #60
 15c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000160 <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc>:
 160:	stp	x19, x20, [sp, #-48]!
 164:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
 168:	mov	x19, x0
 16c:	ldr	x20, [x20]
 170:	stp	x21, x30, [sp, #16]
 174:	mov	x21, x1
 178:	ldr	x0, [x20]
 17c:	cbz	x0, 1e0 <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc+0x80>
 180:	sub	x1, x0, #0x1
 184:	tst	x0, x1
 188:	b.ne	1f4 <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc+0x94>  // b.any
 18c:	add	x19, x19, x1
 190:	neg	x0, x0
 194:	and	x19, x19, x0
 198:	mov	x5, #0x0                   	// #0
 19c:	mov	w4, #0xffffffff            	// #-1
 1a0:	mov	w3, #0x22                  	// #34
 1a4:	mov	w2, #0x3                   	// #3
 1a8:	mov	x1, x19
 1ac:	mov	x0, #0x0                   	// #0
 1b0:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
 1b4:	add	x1, sp, #0x2c
 1b8:	mov	x20, x0
 1bc:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 1c0:	tst	w0, #0xff
 1c4:	b.ne	204 <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc+0xa4>  // b.any
 1c8:	mov	x0, x19
 1cc:	bl	0 <_ZN11__sanitizer17IncreaseTotalMmapEm>
 1d0:	mov	x0, x20
 1d4:	ldp	x21, x30, [sp, #16]
 1d8:	ldp	x19, x20, [sp], #48
 1dc:	ret
 1e0:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 1e4:	str	x0, [x20]
 1e8:	sub	x1, x0, #0x1
 1ec:	tst	x0, x1
 1f0:	b.eq	18c <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc+0x2c>  // b.none
 1f4:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 1f8:	add	x0, x0, #0x0
 1fc:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 200:	bl	0 <_ZN11__sanitizer3DieEv>
 204:	ldr	w3, [sp, #44]
 208:	mov	x0, #0x0                   	// #0
 20c:	cmp	w3, #0xc
 210:	b.eq	1d4 <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc+0x74>  // b.none
 214:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 218:	mov	x1, x21
 21c:	mov	x0, x19
 220:	add	x2, x2, #0x0
 224:	mov	w4, #0x0                   	// #0
 228:	bl	0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 22c:	nop

0000000000000230 <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc>:
 230:	stp	x19, x20, [sp, #-48]!
 234:	mov	x20, x0
 238:	sub	x0, x0, #0x1
 23c:	stp	x21, x22, [sp, #16]
 240:	tst	x0, x20
 244:	stp	x23, x30, [sp, #32]
 248:	b.ne	2ec <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0xbc>  // b.any
 24c:	sub	x23, x1, #0x1
 250:	mov	x21, x1
 254:	tst	x1, x23
 258:	b.ne	30c <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0xdc>  // b.any
 25c:	mov	x1, x2
 260:	add	x22, x20, x21
 264:	mov	x0, x22
 268:	bl	160 <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc>
 26c:	mov	x19, x0
 270:	mov	x1, x0
 274:	cbz	x0, 290 <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0x60>
 278:	add	x22, x22, x0
 27c:	tst	x0, x23
 280:	b.ne	2c0 <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0x90>  // b.any
 284:	add	x0, x1, x20
 288:	cmp	x22, x0
 28c:	b.ne	2a4 <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0x74>  // b.any
 290:	mov	x0, x19
 294:	ldp	x21, x22, [sp, #16]
 298:	ldp	x23, x30, [sp, #32]
 29c:	ldp	x19, x20, [sp], #48
 2a0:	ret
 2a4:	sub	x1, x22, x0
 2a8:	bl	d8 <_ZN11__sanitizer10UnmapOrDieEPvm>
 2ac:	mov	x0, x19
 2b0:	ldp	x21, x22, [sp, #16]
 2b4:	ldp	x23, x30, [sp, #32]
 2b8:	ldp	x19, x20, [sp], #48
 2bc:	ret
 2c0:	add	x23, x0, x23
 2c4:	neg	x21, x21
 2c8:	and	x21, x23, x21
 2cc:	sub	x1, x21, x0
 2d0:	bl	d8 <_ZN11__sanitizer10UnmapOrDieEPvm>
 2d4:	mov	x1, x21
 2d8:	mov	x19, x21
 2dc:	add	x0, x1, x20
 2e0:	cmp	x22, x0
 2e4:	b.eq	290 <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0x60>  // b.none
 2e8:	b	2a4 <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0x74>
 2ec:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 2f0:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 2f4:	add	x2, x2, #0x0
 2f8:	add	x0, x0, #0x0
 2fc:	mov	x4, #0x0                   	// #0
 300:	mov	x3, #0x0                   	// #0
 304:	mov	w1, #0x55                  	// #85
 308:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 30c:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 310:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 314:	add	x2, x2, #0x0
 318:	add	x0, x0, #0x0
 31c:	mov	x4, #0x0                   	// #0
 320:	mov	x3, #0x0                   	// #0
 324:	mov	w1, #0x56                  	// #86
 328:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 32c:	nop

0000000000000330 <_ZN11__sanitizer18MmapNoReserveOrDieEmPKc>:
 330:	stp	x19, x20, [sp, #-48]!
 334:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
 338:	mov	x19, x0
 33c:	ldr	x20, [x20]
 340:	stp	x21, x30, [sp, #16]
 344:	mov	x21, x1
 348:	ldr	x2, [x20]
 34c:	cbz	x2, 3ac <_ZN11__sanitizer18MmapNoReserveOrDieEmPKc+0x7c>
 350:	sub	x0, x2, #0x1
 354:	tst	x2, x0
 358:	b.ne	3c4 <_ZN11__sanitizer18MmapNoReserveOrDieEmPKc+0x94>  // b.any
 35c:	add	x0, x19, x0
 360:	neg	x1, x2
 364:	mov	x5, #0x0                   	// #0
 368:	mov	w4, #0xffffffff            	// #-1
 36c:	mov	w3, #0x4022                	// #16418
 370:	mov	w2, #0x3                   	// #3
 374:	and	x1, x0, x1
 378:	mov	x0, #0x0                   	// #0
 37c:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
 380:	mov	x20, x0
 384:	add	x1, sp, #0x2c
 388:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 38c:	tst	w0, #0xff
 390:	b.ne	3d4 <_ZN11__sanitizer18MmapNoReserveOrDieEmPKc+0xa4>  // b.any
 394:	mov	x0, x19
 398:	bl	0 <_ZN11__sanitizer17IncreaseTotalMmapEm>
 39c:	mov	x0, x20
 3a0:	ldp	x21, x30, [sp, #16]
 3a4:	ldp	x19, x20, [sp], #48
 3a8:	ret
 3ac:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 3b0:	mov	x2, x0
 3b4:	str	x0, [x20]
 3b8:	sub	x0, x2, #0x1
 3bc:	tst	x2, x0
 3c0:	b.eq	35c <_ZN11__sanitizer18MmapNoReserveOrDieEmPKc+0x2c>  // b.none
 3c4:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 3c8:	add	x0, x0, #0x0
 3cc:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 3d0:	bl	0 <_ZN11__sanitizer3DieEv>
 3d4:	ldr	w3, [sp, #44]
 3d8:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 3dc:	mov	x1, x21
 3e0:	mov	x0, x19
 3e4:	add	x2, x2, #0x0
 3e8:	mov	w4, #0x0                   	// #0
 3ec:	bl	0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>

00000000000003f0 <_ZN11__sanitizer13MmapFixedImplEmmb>:
 3f0:	stp	x19, x20, [sp, #-96]!
 3f4:	adrp	x19, 0 <_ZN11__sanitizer14PageSizeCachedE>
 3f8:	mov	x20, x1
 3fc:	ldr	x19, [x19]
 400:	stp	x21, x22, [sp, #16]
 404:	and	w22, w2, #0xff
 408:	mov	x21, x0
 40c:	ldr	x2, [x19]
 410:	str	x30, [sp, #32]
 414:	cbz	x2, 478 <_ZN11__sanitizer13MmapFixedImplEmmb+0x88>
 418:	neg	x6, x2
 41c:	sub	x3, x2, #0x1
 420:	and	x0, x6, x21
 424:	tst	x3, x2
 428:	b.ne	498 <_ZN11__sanitizer13MmapFixedImplEmmb+0xa8>  // b.any
 42c:	add	x1, x20, x3
 430:	mov	x5, #0x0                   	// #0
 434:	mov	w4, #0xffffffff            	// #-1
 438:	mov	w3, #0x32                  	// #50
 43c:	mov	w2, #0x3                   	// #3
 440:	and	x1, x1, x6
 444:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
 448:	mov	x19, x0
 44c:	add	x1, sp, #0x34
 450:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 454:	tst	w0, #0xff
 458:	b.ne	4a8 <_ZN11__sanitizer13MmapFixedImplEmmb+0xb8>  // b.any
 45c:	mov	x0, x20
 460:	bl	0 <_ZN11__sanitizer17IncreaseTotalMmapEm>
 464:	mov	x0, x19
 468:	ldp	x21, x22, [sp, #16]
 46c:	ldr	x30, [sp, #32]
 470:	ldp	x19, x20, [sp], #96
 474:	ret
 478:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 47c:	mov	x2, x0
 480:	str	x0, [x19]
 484:	neg	x6, x2
 488:	sub	x3, x2, #0x1
 48c:	and	x0, x6, x21
 490:	tst	x3, x2
 494:	b.eq	42c <_ZN11__sanitizer13MmapFixedImplEmmb+0x3c>  // b.none
 498:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 49c:	add	x0, x0, #0x0
 4a0:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 4a4:	bl	0 <_ZN11__sanitizer3DieEv>
 4a8:	cbz	w22, 4c0 <_ZN11__sanitizer13MmapFixedImplEmmb+0xd0>
 4ac:	ldr	w0, [sp, #52]
 4b0:	cmp	w0, #0xc
 4b4:	b.ne	4c0 <_ZN11__sanitizer13MmapFixedImplEmmb+0xd0>  // b.any
 4b8:	mov	x0, #0x0                   	// #0
 4bc:	b	468 <_ZN11__sanitizer13MmapFixedImplEmmb+0x78>
 4c0:	add	x19, sp, #0x38
 4c4:	mov	x3, x21
 4c8:	mov	x1, #0x28                  	// #40
 4cc:	mov	x0, x19
 4d0:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 4d4:	add	x2, x2, #0x0
 4d8:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 4dc:	ldr	w3, [sp, #52]
 4e0:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 4e4:	mov	x1, x19
 4e8:	mov	x0, x20
 4ec:	add	x2, x2, #0x0
 4f0:	mov	w4, #0x0                   	// #0
 4f4:	bl	0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>

00000000000004f8 <_ZN11__sanitizer14MmapFixedOrDieEmm>:
 4f8:	mov	w2, #0x0                   	// #0
 4fc:	b	3f0 <_ZN11__sanitizer13MmapFixedImplEmmb>

0000000000000500 <_ZN11__sanitizer26MmapFixedOrDieOnFatalErrorEmm>:
 500:	mov	w2, #0x1                   	// #1
 504:	b	3f0 <_ZN11__sanitizer13MmapFixedImplEmmb>

0000000000000508 <_ZN11__sanitizer16MprotectNoAccessEmm>:
 508:	str	x30, [sp, #-16]!
 50c:	mov	w2, #0x0                   	// #0
 510:	bl	0 <_ZN11__sanitizer17internal_mprotectEPvmi>
 514:	cmp	w0, #0x0
 518:	cset	w0, eq  // eq = none
 51c:	ldr	x30, [sp], #16
 520:	ret
 524:	nop

0000000000000528 <_ZN11__sanitizer16MprotectReadOnlyEmm>:
 528:	str	x30, [sp, #-16]!
 52c:	mov	w2, #0x1                   	// #1
 530:	bl	0 <_ZN11__sanitizer17internal_mprotectEPvmi>
 534:	cmp	w0, #0x0
 538:	cset	w0, eq  // eq = none
 53c:	ldr	x30, [sp], #16
 540:	ret
 544:	nop

0000000000000548 <_ZN11__sanitizer19MprotectMallocZonesEPvi>:
 548:	ret
 54c:	nop

0000000000000550 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi>:
 550:	stp	x19, x30, [sp, #-16]!
 554:	cmp	w1, #0x2
 558:	mov	x19, x2
 55c:	b.hi	56c <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi+0x1c>  // b.pmore
 560:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 564:	add	x2, x2, #0x0
 568:	ldr	w3, [x2, w1, uxtw #2]
 56c:	mov	w2, #0x1b0                 	// #432
 570:	mov	w1, w3
 574:	bl	0 <_ZN11__sanitizer13internal_openEPKcij>
 578:	mov	x1, x19
 57c:	mov	x19, x0
 580:	sxtw	x0, w0
 584:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 588:	tst	w0, #0xff
 58c:	csinv	w0, w19, wzr, eq  // eq = none
 590:	ldp	x19, x30, [sp], #16
 594:	ret

0000000000000598 <_ZN11__sanitizer9CloseFileEi>:
 598:	b	0 <_ZN11__sanitizer14internal_closeEi>
 59c:	nop

00000000000005a0 <_ZN11__sanitizer12ReadFromFileEiPvmPmPi>:
 5a0:	stp	x19, x20, [sp, #-32]!
 5a4:	mov	x20, x4
 5a8:	mov	x19, x3
 5ac:	str	x30, [sp, #16]
 5b0:	bl	0 <_ZN11__sanitizer13internal_readEiPvm>
 5b4:	mov	x1, x20
 5b8:	mov	x20, x0
 5bc:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 5c0:	tst	w0, #0xff
 5c4:	b.ne	5e0 <_ZN11__sanitizer12ReadFromFileEiPvmPmPi+0x40>  // b.any
 5c8:	mov	w0, #0x1                   	// #1
 5cc:	cbz	x19, 5d4 <_ZN11__sanitizer12ReadFromFileEiPvmPmPi+0x34>
 5d0:	str	x20, [x19]
 5d4:	ldr	x30, [sp, #16]
 5d8:	ldp	x19, x20, [sp], #32
 5dc:	ret
 5e0:	mov	w0, #0x0                   	// #0
 5e4:	ldr	x30, [sp, #16]
 5e8:	ldp	x19, x20, [sp], #32
 5ec:	ret

00000000000005f0 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi>:
 5f0:	stp	x19, x20, [sp, #-32]!
 5f4:	mov	x20, x4
 5f8:	mov	x19, x3
 5fc:	str	x30, [sp, #16]
 600:	bl	0 <_ZN11__sanitizer14internal_writeEiPKvm>
 604:	mov	x1, x20
 608:	mov	x20, x0
 60c:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 610:	tst	w0, #0xff
 614:	b.ne	630 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi+0x40>  // b.any
 618:	mov	w0, #0x1                   	// #1
 61c:	cbz	x19, 624 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi+0x34>
 620:	str	x20, [x19]
 624:	ldr	x30, [sp, #16]
 628:	ldp	x19, x20, [sp], #32
 62c:	ret
 630:	mov	w0, #0x0                   	// #0
 634:	ldr	x30, [sp, #16]
 638:	ldp	x19, x20, [sp], #32
 63c:	ret

0000000000000640 <_ZN11__sanitizer10RenameFileEPKcS1_Pi>:
 640:	stp	x19, x30, [sp, #-16]!
 644:	mov	x19, x2
 648:	bl	0 <_ZN11__sanitizer15internal_renameEPKcS1_>
 64c:	mov	x1, x19
 650:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 654:	and	w0, w0, #0xff
 658:	eor	w0, w0, #0x1
 65c:	ldp	x19, x30, [sp], #16
 660:	ret
 664:	nop

0000000000000668 <_ZN11__sanitizer15MapFileToMemoryEPKcPm>:
 668:	stp	x19, x20, [sp, #-48]!
 66c:	mov	x2, #0x0                   	// #0
 670:	stp	x21, x22, [sp, #16]
 674:	mov	x21, x1
 678:	mov	w1, #0x0                   	// #0
 67c:	str	x30, [sp, #32]
 680:	bl	550 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi>
 684:	cmn	w0, #0x1
 688:	b.eq	71c <_ZN11__sanitizer15MapFileToMemoryEPKcPm+0xb4>  // b.none
 68c:	mov	w20, w0
 690:	bl	0 <_ZN11__sanitizer17internal_filesizeEi>
 694:	mov	x19, x0
 698:	cmn	x0, #0x1
 69c:	b.eq	73c <_ZN11__sanitizer15MapFileToMemoryEPKcPm+0xd4>  // b.none
 6a0:	cbz	x0, 75c <_ZN11__sanitizer15MapFileToMemoryEPKcPm+0xf4>
 6a4:	adrp	x22, 0 <_ZN11__sanitizer14PageSizeCachedE>
 6a8:	ldr	x22, [x22]
 6ac:	ldr	x2, [x22]
 6b0:	cbz	x2, 70c <_ZN11__sanitizer15MapFileToMemoryEPKcPm+0xa4>
 6b4:	sub	x1, x2, #0x1
 6b8:	tst	x2, x1
 6bc:	b.ne	77c <_ZN11__sanitizer15MapFileToMemoryEPKcPm+0x114>  // b.any
 6c0:	add	x19, x19, x1
 6c4:	neg	x2, x2
 6c8:	and	x1, x19, x2
 6cc:	mov	w4, w20
 6d0:	str	x1, [x21]
 6d4:	mov	x5, #0x0                   	// #0
 6d8:	mov	w3, #0x2                   	// #2
 6dc:	mov	w2, #0x1                   	// #1
 6e0:	mov	x0, #0x0                   	// #0
 6e4:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
 6e8:	mov	x1, #0x0                   	// #0
 6ec:	mov	x19, x0
 6f0:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 6f4:	tst	w0, #0xff
 6f8:	csel	x0, x19, xzr, eq  // eq = none
 6fc:	ldp	x21, x22, [sp, #16]
 700:	ldr	x30, [sp, #32]
 704:	ldp	x19, x20, [sp], #48
 708:	ret
 70c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 710:	mov	x2, x0
 714:	str	x0, [x22]
 718:	b	6b4 <_ZN11__sanitizer15MapFileToMemoryEPKcPm+0x4c>
 71c:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 720:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 724:	add	x2, x2, #0x0
 728:	add	x0, x0, #0x0
 72c:	mov	x4, #0x0                   	// #0
 730:	mov	x3, #0x0                   	// #0
 734:	mov	w1, #0xc9                  	// #201
 738:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 73c:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 740:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 744:	add	x2, x2, #0x0
 748:	add	x0, x0, #0x0
 74c:	mov	x4, x19
 750:	mov	x3, x19
 754:	mov	w1, #0xcb                  	// #203
 758:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 75c:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 760:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 764:	add	x2, x2, #0x0
 768:	add	x0, x0, #0x0
 76c:	mov	x4, #0x0                   	// #0
 770:	mov	x3, #0x0                   	// #0
 774:	mov	w1, #0xcc                  	// #204
 778:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 77c:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 780:	add	x0, x0, #0x0
 784:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 788:	bl	0 <_ZN11__sanitizer3DieEv>
 78c:	nop

0000000000000790 <_ZN11__sanitizer23MapWritableFileToMemoryEPvmim>:
 790:	stp	x19, x20, [sp, #-64]!
 794:	cmp	x0, #0x0
 798:	mov	x5, x3
 79c:	mov	w4, w2
 7a0:	stp	x21, x22, [sp, #16]
 7a4:	mov	x21, x3
 7a8:	mov	w3, #0x11                  	// #17
 7ac:	csinc	w3, w3, wzr, ne  // ne = any
 7b0:	mov	w20, w2
 7b4:	mov	w2, #0x3                   	// #3
 7b8:	mov	x22, x1
 7bc:	str	x30, [sp, #32]
 7c0:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
 7c4:	mov	x19, x0
 7c8:	add	x1, sp, #0x3c
 7cc:	str	wzr, [sp, #60]
 7d0:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 7d4:	tst	w0, #0xff
 7d8:	b.ne	7f0 <_ZN11__sanitizer23MapWritableFileToMemoryEPvmim+0x60>  // b.any
 7dc:	mov	x0, x19
 7e0:	ldp	x21, x22, [sp, #16]
 7e4:	ldr	x30, [sp, #32]
 7e8:	ldp	x19, x20, [sp], #64
 7ec:	ret
 7f0:	ldr	w5, [sp, #60]
 7f4:	mov	x4, x19
 7f8:	mov	x3, x22
 7fc:	mov	x2, x21
 800:	mov	w1, w20
 804:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 808:	add	x0, x0, #0x0
 80c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 810:	mov	x0, #0x0                   	// #0
 814:	b	7e0 <_ZN11__sanitizer23MapWritableFileToMemoryEPvmim+0x50>

0000000000000818 <_ZN11__sanitizer22MemoryRangeIsAvailableEmm>:
 818:	stp	x19, x20, [sp, #-160]!
 81c:	mov	x20, x1
 820:	mov	w1, #0x1                   	// #1
 824:	stp	x21, x22, [sp, #16]
 828:	add	x22, sp, #0x30
 82c:	mov	x21, x0
 830:	stp	x23, x30, [sp, #32]
 834:	add	x23, sp, #0x50
 838:	mov	x0, x22
 83c:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb>
 840:	stp	xzr, xzr, [sp, #104]
 844:	str	xzr, [sp, #152]
 848:	mov	x1, x23
 84c:	mov	x0, x22
 850:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
 854:	tst	w0, #0xff
 858:	b.eq	914 <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0xfc>  // b.none
 85c:	ldp	x3, x2, [sp, #80]
 860:	cmp	x3, x2
 864:	b.eq	848 <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0x30>  // b.none
 868:	cbz	x2, 8b4 <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0x9c>
 86c:	sub	x2, x2, #0x1
 870:	cmp	x3, x2
 874:	b.hi	8d4 <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0xbc>  // b.pmore
 878:	cmp	x21, x20
 87c:	b.hi	8f4 <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0xdc>  // b.pmore
 880:	cmp	x2, x21
 884:	cset	w19, cc  // cc = lo, ul, last
 888:	cmp	x3, x20
 88c:	cset	w0, hi  // hi = pmore
 890:	orr	w19, w19, w0
 894:	cbnz	w19, 848 <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0x30>
 898:	mov	x0, x22
 89c:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>
 8a0:	mov	w0, w19
 8a4:	ldp	x21, x22, [sp, #16]
 8a8:	ldp	x23, x30, [sp, #32]
 8ac:	ldp	x19, x20, [sp], #160
 8b0:	ret
 8b4:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 8b8:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 8bc:	add	x2, x2, #0x0
 8c0:	add	x0, x0, #0x0
 8c4:	mov	x4, #0x0                   	// #0
 8c8:	mov	x3, #0x0                   	// #0
 8cc:	mov	w1, #0xef                  	// #239
 8d0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 8d4:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 8d8:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 8dc:	add	x2, x2, #0x0
 8e0:	add	x0, x0, #0x0
 8e4:	mov	x4, #0x0                   	// #0
 8e8:	mov	x3, #0x0                   	// #0
 8ec:	mov	w1, #0xe1                  	// #225
 8f0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 8f4:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 8f8:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 8fc:	add	x2, x2, #0x0
 900:	add	x0, x0, #0x0
 904:	mov	x4, #0x0                   	// #0
 908:	mov	x3, #0x0                   	// #0
 90c:	mov	w1, #0xe2                  	// #226
 910:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 914:	mov	x0, x22
 918:	mov	w19, #0x1                   	// #1
 91c:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>
 920:	mov	w0, w19
 924:	ldp	x21, x22, [sp, #16]
 928:	ldp	x23, x30, [sp, #32]
 92c:	ldp	x19, x20, [sp], #160
 930:	ret
 934:	nop

0000000000000938 <_ZN11__sanitizer14DumpProcessMapEv>:
 938:	stp	x19, x20, [sp, #-160]!
 93c:	mov	w1, #0x1                   	// #1
 940:	adrp	x20, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 944:	add	x19, sp, #0x30
 948:	stp	x21, x22, [sp, #16]
 94c:	mov	x0, x19
 950:	str	x30, [sp, #32]
 954:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb>
 958:	mov	w2, #0x0                   	// #0
 95c:	adrp	x1, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 960:	mov	x0, #0xfff                 	// #4095
 964:	add	x1, x1, #0x0
 968:	bl	8 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 96c:	add	x21, sp, #0x50
 970:	mov	x1, #0xfff                 	// #4095
 974:	mov	x22, x0
 978:	add	x20, x20, #0x0
 97c:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 980:	add	x0, x0, #0x0
 984:	stp	x22, x1, [sp, #104]
 988:	str	xzr, [sp, #152]
 98c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 990:	b	9a4 <_ZN11__sanitizer14DumpProcessMapEv+0x6c>
 994:	ldp	x1, x2, [sp, #80]
 998:	mov	x0, x20
 99c:	ldr	x3, [sp, #104]
 9a0:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 9a4:	mov	x1, x21
 9a8:	mov	x0, x19
 9ac:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
 9b0:	tst	w0, #0xff
 9b4:	b.ne	994 <_ZN11__sanitizer14DumpProcessMapEv+0x5c>  // b.any
 9b8:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 9bc:	add	x0, x0, #0x0
 9c0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 9c4:	mov	x1, #0xfff                 	// #4095
 9c8:	mov	x0, x22
 9cc:	bl	d8 <_ZN11__sanitizer10UnmapOrDieEPvm>
 9d0:	mov	x0, x19
 9d4:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>
 9d8:	ldp	x21, x22, [sp, #16]
 9dc:	ldr	x30, [sp, #32]
 9e0:	ldp	x19, x20, [sp], #160
 9e4:	ret

00000000000009e8 <_ZN11__sanitizer6GetPwdEv>:
 9e8:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 9ec:	add	x0, x0, #0x0
 9f0:	b	0 <_ZN11__sanitizer6GetEnvEPKc>
 9f4:	nop

00000000000009f8 <_ZN11__sanitizer15IsPathSeparatorEc>:
 9f8:	and	w0, w0, #0xff
 9fc:	cmp	w0, #0x2f
 a00:	cset	w0, eq  // eq = none
 a04:	ret

0000000000000a08 <_ZN11__sanitizer14IsAbsolutePathEPKc>:
 a08:	cbz	x0, a1c <_ZN11__sanitizer14IsAbsolutePathEPKc+0x14>
 a0c:	ldrb	w0, [x0]
 a10:	cmp	w0, #0x2f
 a14:	cset	w0, eq  // eq = none
 a18:	ret
 a1c:	mov	w0, #0x0                   	// #0
 a20:	ret
 a24:	nop

0000000000000a28 <_ZN11__sanitizer10ReportFile5WriteEPKcm>:
 a28:	stp	x19, x20, [sp, #-48]!
 a2c:	mov	x19, x0
 a30:	mov	x20, x2
 a34:	stp	x21, x22, [sp, #16]
 a38:	mov	x22, x1
 a3c:	mov	w1, #0x1                   	// #1
 a40:	ldr	x21, [x0]
 a44:	str	x30, [sp, #32]
 a48:	ldxrb	w0, [x21]
 a4c:	stxrb	w2, w1, [x21]
 a50:	cbnz	w2, a48 <_ZN11__sanitizer10ReportFile5WriteEPKcm+0x20>
 a54:	dmb	ish
 a58:	tst	w0, #0xff
 a5c:	b.eq	a68 <_ZN11__sanitizer10ReportFile5WriteEPKcm+0x40>  // b.none
 a60:	mov	x0, x21
 a64:	bl	0 <_ZN11__sanitizer18GetMmapGranularityEv>
 a68:	mov	x0, x19
 a6c:	bl	0 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv>
 a70:	ldr	w0, [x19, #8]
 a74:	mov	x2, x20
 a78:	mov	x1, x22
 a7c:	bl	0 <_ZN11__sanitizer14internal_writeEiPKvm>
 a80:	cmp	x0, x20
 a84:	b.ne	aa0 <_ZN11__sanitizer10ReportFile5WriteEPKcm+0x78>  // b.any
 a88:	dmb	ish
 a8c:	strb	wzr, [x21]
 a90:	ldp	x21, x22, [sp, #16]
 a94:	ldr	x30, [sp, #32]
 a98:	ldp	x19, x20, [sp], #48
 a9c:	ret
 aa0:	ldr	w20, [x19, #8]
 aa4:	adrp	x19, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 aa8:	add	x19, x19, #0x0
 aac:	mov	x0, x19
 ab0:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 ab4:	mov	x1, x19
 ab8:	mov	x2, x0
 abc:	mov	w0, w20
 ac0:	bl	0 <_ZN11__sanitizer14internal_writeEiPKvm>
 ac4:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000ac8 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_>:
 ac8:	stp	x19, x20, [sp, #-192]!
 acc:	adrp	x19, 0 <_ZN11__sanitizer14PageSizeCachedE>
 ad0:	add	x20, sp, #0x50
 ad4:	stp	x21, x22, [sp, #16]
 ad8:	mov	x22, x0
 adc:	mov	x0, x20
 ae0:	stp	x23, x24, [sp, #32]
 ae4:	mov	x24, x1
 ae8:	mov	x23, x2
 aec:	mov	w1, #0x0                   	// #0
 af0:	stp	x25, x26, [sp, #48]
 af4:	str	x30, [sp, #64]
 af8:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb>
 afc:	ldr	x21, [x19]
 b00:	ldr	x3, [x21]
 b04:	cbz	x3, bf0 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x128>
 b08:	sub	x0, x3, #0x1
 b0c:	tst	x0, x3
 b10:	b.ne	c5c <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x194>  // b.any
 b14:	add	x26, x3, #0xfff
 b18:	neg	x3, x3
 b1c:	and	x26, x26, x3
 b20:	mov	w2, #0x0                   	// #0
 b24:	mov	x0, x26
 b28:	adrp	x21, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 b2c:	add	x1, x21, #0x0
 b30:	bl	8 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 b34:	mov	x2, #0x0                   	// #0
 b38:	mov	x1, #0x0                   	// #0
 b3c:	mov	x25, x0
 b40:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 b44:	mov	x1, #0x0                   	// #0
 b48:	mov	x0, #0x0                   	// #0
 b4c:	bl	d8 <_ZN11__sanitizer10UnmapOrDieEPvm>
 b50:	cmp	x26, #0xfff
 b54:	b.ls	c00 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x138>  // b.plast
 b58:	mov	x0, x25
 b5c:	mov	x2, #0x1000                	// #4096
 b60:	mov	w1, #0x0                   	// #0
 b64:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 b68:	strb	wzr, [x25]
 b6c:	mov	x0, #0x1000                	// #4096
 b70:	add	x21, sp, #0x70
 b74:	stp	x25, x0, [sp, #136]
 b78:	str	xzr, [sp, #184]
 b7c:	b	b88 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0xc0>
 b80:	ldr	x3, [sp, #152]
 b84:	tbnz	w3, #2, bcc <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x104>
 b88:	mov	x1, x21
 b8c:	mov	x0, x20
 b90:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
 b94:	ands	w19, w0, #0xff
 b98:	b.ne	b80 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0xb8>  // b.any
 b9c:	mov	x1, x26
 ba0:	mov	x0, x25
 ba4:	bl	d8 <_ZN11__sanitizer10UnmapOrDieEPvm>
 ba8:	mov	x0, x20
 bac:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>
 bb0:	mov	w0, w19
 bb4:	ldp	x21, x22, [sp, #16]
 bb8:	ldp	x23, x24, [sp, #32]
 bbc:	ldp	x25, x26, [sp, #48]
 bc0:	ldr	x30, [sp, #64]
 bc4:	ldp	x19, x20, [sp], #192
 bc8:	ret
 bcc:	ldr	x1, [sp, #136]
 bd0:	mov	x0, x22
 bd4:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 bd8:	cbnz	w0, b88 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0xc0>
 bdc:	ldr	x0, [sp, #112]
 be0:	str	x0, [x24]
 be4:	ldr	x0, [sp, #120]
 be8:	str	x0, [x23]
 bec:	b	b9c <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0xd4>
 bf0:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 bf4:	mov	x3, x0
 bf8:	str	x0, [x21]
 bfc:	b	b08 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x40>
 c00:	ldr	x19, [x19]
 c04:	ldr	x0, [x19]
 c08:	cbz	x0, c6c <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x1a4>
 c0c:	sub	x1, x0, #0x1
 c10:	tst	x1, x0
 c14:	b.ne	c5c <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x194>  // b.any
 c18:	add	x19, x0, #0xfff
 c1c:	neg	x0, x0
 c20:	and	x19, x19, x0
 c24:	add	x1, x21, #0x0
 c28:	mov	x0, x19
 c2c:	mov	w2, #0x0                   	// #0
 c30:	bl	8 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 c34:	mov	x21, x0
 c38:	mov	x2, #0x0                   	// #0
 c3c:	mov	x1, x25
 c40:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 c44:	mov	x1, x26
 c48:	mov	x0, x25
 c4c:	mov	x26, x19
 c50:	mov	x25, x21
 c54:	bl	d8 <_ZN11__sanitizer10UnmapOrDieEPvm>
 c58:	b	b58 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x90>
 c5c:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 c60:	add	x0, x0, #0x0
 c64:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 c68:	bl	0 <_ZN11__sanitizer3DieEv>
 c6c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 c70:	str	x0, [x19]
 c74:	b	c0c <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x144>

0000000000000c78 <_ZNK11__sanitizer13SignalContext10GetAddressEv>:
 c78:	ldr	x0, [x0]
 c7c:	ldr	x0, [x0, #16]
 c80:	ret
 c84:	nop

0000000000000c88 <_ZNK11__sanitizer13SignalContext14IsMemoryAccessEv>:
 c88:	ldr	x0, [x0]
 c8c:	ldr	w0, [x0]
 c90:	cmp	w0, #0xb
 c94:	cset	w0, eq  // eq = none
 c98:	ret
 c9c:	nop

0000000000000ca0 <_ZNK11__sanitizer13SignalContext7GetTypeEv>:
 ca0:	ldr	x0, [x0]
 ca4:	ldr	w0, [x0]
 ca8:	ret
 cac:	nop

0000000000000cb0 <_ZNK11__sanitizer13SignalContext8DescribeEv>:
 cb0:	ldr	x0, [x0]
 cb4:	ldr	w0, [x0]
 cb8:	cmp	w0, #0x7
 cbc:	b.eq	d14 <_ZNK11__sanitizer13SignalContext8DescribeEv+0x64>  // b.none
 cc0:	b.le	ce0 <_ZNK11__sanitizer13SignalContext8DescribeEv+0x30>
 cc4:	cmp	w0, #0x8
 cc8:	b.eq	cfc <_ZNK11__sanitizer13SignalContext8DescribeEv+0x4c>  // b.none
 ccc:	cmp	w0, #0xb
 cd0:	b.ne	d20 <_ZNK11__sanitizer13SignalContext8DescribeEv+0x70>  // b.any
 cd4:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 cd8:	add	x0, x0, #0x0
 cdc:	ret
 ce0:	cmp	w0, #0x4
 ce4:	b.eq	d08 <_ZNK11__sanitizer13SignalContext8DescribeEv+0x58>  // b.none
 ce8:	cmp	w0, #0x6
 cec:	b.ne	d20 <_ZNK11__sanitizer13SignalContext8DescribeEv+0x70>  // b.any
 cf0:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 cf4:	add	x0, x0, #0x0
 cf8:	ret
 cfc:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 d00:	add	x0, x0, #0x0
 d04:	ret
 d08:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 d0c:	add	x0, x0, #0x0
 d10:	ret
 d14:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 d18:	add	x0, x0, #0x0
 d1c:	ret
 d20:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 d24:	add	x0, x0, #0x0
 d28:	ret

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x20, x0
   8:	mov	w19, #0x0                   	// #0
   c:	stp	x21, x30, [sp, #16]
  10:	mov	w21, #0x1                   	// #1
  14:	nop
  18:	cmp	w19, #0x9
  1c:	b.gt	58 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x58>
  20:	ldrb	w0, [x20]
  24:	tst	w0, #0xff
  28:	b.ne	44 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x44>  // b.any
  2c:	ldxrb	w0, [x20]
  30:	stxrb	w1, w21, [x20]
  34:	cbnz	w1, 2c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x2c>
  38:	dmb	ish
  3c:	tst	w0, #0xff
  40:	b.eq	4c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x4c>  // b.none
  44:	add	w19, w19, #0x1
  48:	b	18 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x18>
  4c:	ldp	x21, x30, [sp, #16]
  50:	ldp	x19, x20, [sp], #32
  54:	ret
  58:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  5c:	b	20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>

sanitizer_posix_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL6getlimEi>:
   0:	str	x30, [sp, #-32]!
   4:	add	x1, sp, #0x10
   8:	bl	0 <getrlimit>
   c:	cbnz	w0, 1c <_ZN11__sanitizerL6getlimEi+0x1c>
  10:	ldr	x0, [sp, #16]
  14:	ldr	x30, [sp], #32
  18:	ret
  1c:	sxtw	x4, w0
  20:	adrp	x2, 0 <_ZN11__sanitizerL6getlimEi>
  24:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
  28:	add	x2, x2, #0x0
  2c:	add	x0, x0, #0x0
  30:	mov	x3, #0x0                   	// #0
  34:	mov	w1, #0x5a                  	// #90
  38:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  3c:	nop

0000000000000040 <_ZN11__sanitizerL6setlimEim>:
  40:	stp	x19, x30, [sp, #-32]!
  44:	mov	x2, x1
  48:	str	x2, [sp, #16]
  4c:	add	x1, sp, #0x10
  50:	str	x2, [sp, #24]
  54:	bl	0 <setrlimit>
  58:	cbnz	w0, 64 <_ZN11__sanitizerL6setlimEim+0x24>
  5c:	ldp	x19, x30, [sp], #32
  60:	ret
  64:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  68:	ldr	x0, [x0]
  6c:	ldr	x19, [x0]
  70:	bl	0 <__errno_location>
  74:	mov	x2, x0
  78:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
  7c:	mov	x1, x19
  80:	add	x0, x0, #0x0
  84:	ldr	w2, [x2]
  88:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  8c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000090 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E>:
  90:	stp	x19, x20, [sp, #-192]!
  94:	mov	x19, x1
  98:	stp	x21, x30, [sp, #16]
  9c:	mov	w21, w0
  a0:	bl	0 <_ZN11__sanitizer19GetHandleSignalModeEi>
  a4:	cbnz	w0, b4 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E+0x24>
  a8:	ldp	x21, x30, [sp, #16]
  ac:	ldp	x19, x20, [sp], #192
  b0:	ret
  b4:	add	x20, sp, #0x28
  b8:	mov	x2, #0x98                  	// #152
  bc:	mov	w1, #0x0                   	// #0
  c0:	mov	x0, x20
  c4:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  c8:	str	x19, [sp, #40]
  cc:	adrp	x4, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  d0:	mov	w5, #0x4                   	// #4
  d4:	mov	w3, #0x4                   	// #4
  d8:	movk	w5, #0x4000, lsl #16
  dc:	ldr	x4, [x4]
  e0:	movk	w3, #0x4800, lsl #16
  e4:	mov	x1, x20
  e8:	mov	w0, w21
  ec:	mov	x2, #0x0                   	// #0
  f0:	ldrb	w4, [x4, #97]
  f4:	cmp	w4, #0x0
  f8:	csel	w3, w3, w5, ne  // ne = any
  fc:	str	w3, [sp, #176]
 100:	bl	0 <_ZN11__sanitizer18internal_sigactionEiPKvPv>
 104:	sxtw	x4, w0
 108:	cbnz	w0, 138 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E+0xa8>
 10c:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 110:	ldr	x0, [x0]
 114:	ldr	w0, [x0]
 118:	cbz	w0, a8 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E+0x18>
 11c:	mov	w1, w21
 120:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 124:	add	x0, x0, #0x0
 128:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 12c:	ldp	x21, x30, [sp, #16]
 130:	ldp	x19, x20, [sp], #192
 134:	ret
 138:	adrp	x2, 0 <_ZN11__sanitizerL6getlimEi>
 13c:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 140:	add	x2, x2, #0x0
 144:	add	x0, x0, #0x0
 148:	mov	x3, #0x0                   	// #0
 14c:	mov	w1, #0xd2                  	// #210
 150:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 154:	nop

0000000000000158 <_ZN11__sanitizer6GetUidEv>:
 158:	b	0 <getuid>
 15c:	nop

0000000000000160 <_ZN11__sanitizer13GetThreadSelfEv>:
 160:	b	0 <pthread_self>
 164:	nop

0000000000000168 <_ZN11__sanitizer22ReleaseMemoryPagesToOSEmm>:
 168:	stp	x19, x20, [sp, #-32]!
 16c:	mov	x19, x0
 170:	mov	x20, x1
 174:	stp	x21, x30, [sp, #16]
 178:	adrp	x21, 0 <_ZN11__sanitizer14PageSizeCachedE>
 17c:	ldr	x21, [x21]
 180:	ldr	x2, [x21]
 184:	cbz	x2, 1b8 <_ZN11__sanitizer22ReleaseMemoryPagesToOSEmm+0x50>
 188:	sub	x0, x2, #0x1
 18c:	tst	x2, x0
 190:	b.ne	1d0 <_ZN11__sanitizer22ReleaseMemoryPagesToOSEmm+0x68>  // b.any
 194:	neg	x2, x2
 198:	add	x0, x19, x0
 19c:	and	x20, x20, x2
 1a0:	and	x0, x0, x2
 1a4:	cmp	x20, x0
 1a8:	b.hi	1e0 <_ZN11__sanitizer22ReleaseMemoryPagesToOSEmm+0x78>  // b.pmore
 1ac:	ldp	x21, x30, [sp, #16]
 1b0:	ldp	x19, x20, [sp], #32
 1b4:	ret
 1b8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 1bc:	mov	x2, x0
 1c0:	str	x0, [x21]
 1c4:	sub	x0, x2, #0x1
 1c8:	tst	x2, x0
 1cc:	b.eq	194 <_ZN11__sanitizer22ReleaseMemoryPagesToOSEmm+0x2c>  // b.none
 1d0:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 1d4:	add	x0, x0, #0x0
 1d8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 1dc:	bl	0 <_ZN11__sanitizer3DieEv>
 1e0:	sub	x1, x20, x0
 1e4:	mov	w2, #0x4                   	// #4
 1e8:	ldp	x21, x30, [sp, #16]
 1ec:	ldp	x19, x20, [sp], #32
 1f0:	b	0 <madvise>
 1f4:	nop

00000000000001f8 <_ZN11__sanitizer19NoHugePagesInRegionEmm>:
 1f8:	str	x30, [sp, #-16]!
 1fc:	mov	w2, #0xf                   	// #15
 200:	bl	0 <madvise>
 204:	cmp	w0, #0x0
 208:	cset	w0, eq  // eq = none
 20c:	ldr	x30, [sp], #16
 210:	ret
 214:	nop

0000000000000218 <_ZN11__sanitizer20DontDumpShadowMemoryEmm>:
 218:	str	x30, [sp, #-16]!
 21c:	mov	w2, #0x10                  	// #16
 220:	bl	0 <madvise>
 224:	cmp	w0, #0x0
 228:	cset	w0, eq  // eq = none
 22c:	ldr	x30, [sp], #16
 230:	ret
 234:	nop

0000000000000238 <_ZN11__sanitizer28DisableCoreDumperIfNecessaryEv>:
 238:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 23c:	ldr	x0, [x0]
 240:	ldrb	w0, [x0, #178]
 244:	cbnz	w0, 24c <_ZN11__sanitizer28DisableCoreDumperIfNecessaryEv+0x14>
 248:	ret
 24c:	mov	x1, #0x0                   	// #0
 250:	mov	w0, #0x4                   	// #4
 254:	b	40 <_ZN11__sanitizerL6setlimEim>

0000000000000258 <_ZN11__sanitizer20StackSizeIsUnlimitedEv>:
 258:	str	x30, [sp, #-16]!
 25c:	mov	w0, #0x3                   	// #3
 260:	bl	0 <_ZN11__sanitizerL6getlimEi>
 264:	cmn	x0, #0x1
 268:	cset	w0, eq  // eq = none
 26c:	ldr	x30, [sp], #16
 270:	ret
 274:	nop

0000000000000278 <_ZN11__sanitizer24GetStackSizeLimitInBytesEv>:
 278:	mov	w0, #0x3                   	// #3
 27c:	b	0 <_ZN11__sanitizerL6getlimEi>

0000000000000280 <_ZN11__sanitizer24SetStackSizeLimitInBytesEm>:
 280:	mov	x1, x0
 284:	str	x30, [sp, #-16]!
 288:	mov	w0, #0x3                   	// #3
 28c:	bl	40 <_ZN11__sanitizerL6setlimEim>
 290:	mov	w0, #0x3                   	// #3
 294:	bl	0 <_ZN11__sanitizerL6getlimEi>
 298:	cmn	x0, #0x1
 29c:	b.eq	2a8 <_ZN11__sanitizer24SetStackSizeLimitInBytesEm+0x28>  // b.none
 2a0:	ldr	x30, [sp], #16
 2a4:	ret
 2a8:	adrp	x2, 0 <_ZN11__sanitizerL6getlimEi>
 2ac:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 2b0:	add	x2, x2, #0x0
 2b4:	add	x0, x0, #0x0
 2b8:	mov	x4, #0x0                   	// #0
 2bc:	mov	x3, #0x0                   	// #0
 2c0:	mov	w1, #0x7a                  	// #122
 2c4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000002c8 <_ZN11__sanitizer23AddressSpaceIsUnlimitedEv>:
 2c8:	str	x30, [sp, #-16]!
 2cc:	mov	w0, #0x9                   	// #9
 2d0:	bl	0 <_ZN11__sanitizerL6getlimEi>
 2d4:	cmn	x0, #0x1
 2d8:	cset	w0, eq  // eq = none
 2dc:	ldr	x30, [sp], #16
 2e0:	ret
 2e4:	nop

00000000000002e8 <_ZN11__sanitizer24SetAddressSpaceUnlimitedEv>:
 2e8:	str	x30, [sp, #-16]!
 2ec:	mov	x1, #0xffffffffffffffff    	// #-1
 2f0:	mov	w0, #0x9                   	// #9
 2f4:	bl	40 <_ZN11__sanitizerL6setlimEim>
 2f8:	mov	w0, #0x9                   	// #9
 2fc:	bl	0 <_ZN11__sanitizerL6getlimEi>
 300:	cmn	x0, #0x1
 304:	b.ne	310 <_ZN11__sanitizer24SetAddressSpaceUnlimitedEv+0x28>  // b.any
 308:	ldr	x30, [sp], #16
 30c:	ret
 310:	adrp	x2, 0 <_ZN11__sanitizerL6getlimEi>
 314:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 318:	add	x2, x2, #0x0
 31c:	add	x0, x0, #0x0
 320:	mov	x4, #0x0                   	// #0
 324:	mov	x3, #0x0                   	// #0
 328:	mov	w1, #0x84                  	// #132
 32c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000330 <_ZN11__sanitizer15SleepForSecondsEi>:
 330:	b	0 <sleep>
 334:	nop

0000000000000338 <_ZN11__sanitizer14SleepForMillisEi>:
 338:	mov	w1, #0x3e8                 	// #1000
 33c:	mul	w0, w0, w1
 340:	b	0 <usleep>
 344:	nop

0000000000000348 <_ZN11__sanitizer5AbortEv>:
 348:	stp	x19, x30, [sp, #-176]!
 34c:	mov	w0, #0x6                   	// #6
 350:	bl	0 <_ZN11__sanitizer19GetHandleSignalModeEi>
 354:	cbnz	w0, 35c <_ZN11__sanitizer5AbortEv+0x14>
 358:	bl	0 <abort>
 35c:	add	x19, sp, #0x18
 360:	mov	x2, #0x98                  	// #152
 364:	mov	w1, #0x0                   	// #0
 368:	mov	x0, x19
 36c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 370:	str	xzr, [sp, #24]
 374:	mov	x1, x19
 378:	mov	x2, #0x0                   	// #0
 37c:	mov	w0, #0x6                   	// #6
 380:	bl	0 <_ZN11__sanitizer18internal_sigactionEiPKvPv>
 384:	bl	0 <abort>

0000000000000388 <_ZN11__sanitizer6AtexitEPFvvE>:
 388:	b	0 <atexit>
 38c:	nop

0000000000000390 <_ZN11__sanitizer21SupportsColoredOutputEi>:
 390:	str	x30, [sp, #-16]!
 394:	bl	0 <isatty>
 398:	cmp	w0, #0x0
 39c:	cset	w0, ne  // ne = any
 3a0:	ldr	x30, [sp], #16
 3a4:	ret

00000000000003a8 <_ZN11__sanitizer23SetAlternateSignalStackEv>:
 3a8:	str	x30, [sp, #-64]!
 3ac:	mov	x0, #0x0                   	// #0
 3b0:	add	x1, sp, #0x10
 3b4:	bl	0 <sigaltstack>
 3b8:	cbnz	w0, 424 <_ZN11__sanitizer23SetAlternateSignalStackEv+0x7c>
 3bc:	ldr	w0, [sp, #24]
 3c0:	tbnz	w0, #1, 3cc <_ZN11__sanitizer23SetAlternateSignalStackEv+0x24>
 3c4:	ldr	x30, [sp], #64
 3c8:	ret
 3cc:	mov	w2, #0x0                   	// #0
 3d0:	adrp	x1, 0 <_ZN11__sanitizerL6getlimEi>
 3d4:	mov	x0, #0x10000               	// #65536
 3d8:	add	x1, x1, #0x0
 3dc:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 3e0:	mov	x3, x0
 3e4:	mov	x2, #0x10000               	// #65536
 3e8:	add	x0, sp, #0x28
 3ec:	mov	x1, #0x0                   	// #0
 3f0:	str	x3, [sp, #40]
 3f4:	str	wzr, [sp, #48]
 3f8:	str	x2, [sp, #56]
 3fc:	bl	0 <sigaltstack>
 400:	sxtw	x4, w0
 404:	cbz	w0, 3c4 <_ZN11__sanitizer23SetAlternateSignalStackEv+0x1c>
 408:	adrp	x2, 0 <_ZN11__sanitizerL6getlimEi>
 40c:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 410:	add	x2, x2, #0x0
 414:	add	x0, x0, #0x0
 418:	mov	x3, #0x0                   	// #0
 41c:	mov	w1, #0xbb                  	// #187
 420:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 424:	sxtw	x4, w0
 428:	adrp	x2, 0 <_ZN11__sanitizerL6getlimEi>
 42c:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 430:	add	x2, x2, #0x0
 434:	add	x0, x0, #0x0
 438:	mov	x3, #0x0                   	// #0
 43c:	mov	w1, #0xb0                  	// #176
 440:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 444:	nop

0000000000000448 <_ZN11__sanitizer25UnsetAlternateSignalStackEv>:
 448:	mov	w3, #0x2                   	// #2
 44c:	mov	x2, #0x10000               	// #65536
 450:	str	x30, [sp, #-64]!
 454:	add	x1, sp, #0x28
 458:	add	x0, sp, #0x10
 45c:	str	xzr, [sp, #16]
 460:	str	w3, [sp, #24]
 464:	str	x2, [sp, #32]
 468:	bl	0 <sigaltstack>
 46c:	cbnz	w0, 484 <_ZN11__sanitizer25UnsetAlternateSignalStackEv+0x3c>
 470:	ldr	x0, [sp, #40]
 474:	ldr	x1, [sp, #56]
 478:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 47c:	ldr	x30, [sp], #64
 480:	ret
 484:	sxtw	x4, w0
 488:	adrp	x2, 0 <_ZN11__sanitizerL6getlimEi>
 48c:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 490:	add	x2, x2, #0x0
 494:	add	x0, x0, #0x0
 498:	mov	x3, #0x0                   	// #0
 49c:	mov	w1, #0xc3                  	// #195
 4a0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 4a4:	nop

00000000000004a8 <_ZN11__sanitizer27InstallDeadlySignalHandlersEPFviPvS0_E>:
 4a8:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 4ac:	stp	x19, x30, [sp, #-16]!
 4b0:	mov	x19, x0
 4b4:	ldr	x1, [x1]
 4b8:	ldrb	w0, [x1, #97]
 4bc:	cbnz	w0, 50c <_ZN11__sanitizer27InstallDeadlySignalHandlersEPFviPvS0_E+0x64>
 4c0:	mov	x1, x19
 4c4:	mov	w0, #0xb                   	// #11
 4c8:	bl	90 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E>
 4cc:	mov	x1, x19
 4d0:	mov	w0, #0x7                   	// #7
 4d4:	bl	90 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E>
 4d8:	mov	x1, x19
 4dc:	mov	w0, #0x6                   	// #6
 4e0:	bl	90 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E>
 4e4:	mov	x1, x19
 4e8:	mov	w0, #0x8                   	// #8
 4ec:	bl	90 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E>
 4f0:	mov	x1, x19
 4f4:	mov	w0, #0x4                   	// #4
 4f8:	bl	90 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E>
 4fc:	mov	x1, x19
 500:	mov	w0, #0x5                   	// #5
 504:	ldp	x19, x30, [sp], #16
 508:	b	90 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E>
 50c:	bl	3a8 <_ZN11__sanitizer23SetAlternateSignalStackEv>
 510:	b	4c0 <_ZN11__sanitizer27InstallDeadlySignalHandlersEPFviPvS0_E+0x18>
 514:	nop

0000000000000518 <_ZNK11__sanitizer13SignalContext15IsStackOverflowEv>:
 518:	stp	x19, x20, [sp, #-32]!
 51c:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
 520:	mov	x19, x0
 524:	ldr	x20, [x20]
 528:	stp	x21, x30, [sp, #16]
 52c:	ldr	x21, [x0, #16]
 530:	ldr	x0, [x20]
 534:	cbz	x0, 5a0 <_ZNK11__sanitizer13SignalContext15IsStackOverflowEv+0x88>
 538:	ldr	x1, [x19, #32]
 53c:	add	x21, x21, x0
 540:	mov	w0, #0x0                   	// #0
 544:	cmp	x21, x1
 548:	b.ls	594 <_ZNK11__sanitizer13SignalContext15IsStackOverflowEv+0x7c>  // b.plast
 54c:	mov	x2, #0xffff                	// #65535
 550:	add	x1, x1, x2
 554:	ldr	x2, [x19, #16]
 558:	cmp	x2, x1
 55c:	b.cs	594 <_ZNK11__sanitizer13SignalContext15IsStackOverflowEv+0x7c>  // b.hs, b.nlast
 560:	adrp	x1, 0 <_ZN11__sanitizer14si_SEGV_MAPERRE>
 564:	mov	w0, #0x1                   	// #1
 568:	ldr	x2, [x19]
 56c:	ldr	x1, [x1]
 570:	ldr	w2, [x2, #8]
 574:	ldr	w1, [x1]
 578:	cmp	w2, w1
 57c:	b.eq	594 <_ZNK11__sanitizer13SignalContext15IsStackOverflowEv+0x7c>  // b.none
 580:	adrp	x0, 0 <_ZN11__sanitizer14si_SEGV_ACCERRE>
 584:	ldr	x0, [x0]
 588:	ldr	w0, [x0]
 58c:	cmp	w0, w2
 590:	cset	w0, eq  // eq = none
 594:	ldp	x21, x30, [sp, #16]
 598:	ldp	x19, x20, [sp], #32
 59c:	ret
 5a0:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 5a4:	str	x0, [x20]
 5a8:	b	538 <_ZNK11__sanitizer13SignalContext15IsStackOverflowEv+0x20>
 5ac:	nop

00000000000005b0 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm>:
 5b0:	stp	x19, x20, [sp, #-64]!
 5b4:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
 5b8:	mov	x19, x1
 5bc:	ldr	x20, [x20]
 5c0:	stp	x21, x22, [sp, #16]
 5c4:	mov	x21, x0
 5c8:	ldr	x4, [x20]
 5cc:	str	x30, [sp, #32]
 5d0:	cbz	x4, 664 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm+0xb4>
 5d4:	add	x4, x4, x4, lsl #2
 5d8:	cmp	x19, x4, lsl #1
 5dc:	lsl	x4, x4, #1
 5e0:	b.cs	680 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm+0xd0>  // b.hs, b.nlast
 5e4:	add	x0, sp, #0x38
 5e8:	mov	w22, #0x0                   	// #0
 5ec:	bl	0 <pipe>
 5f0:	mov	w20, w0
 5f4:	cbz	w0, 60c <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm+0x5c>
 5f8:	mov	w0, w22
 5fc:	ldp	x21, x22, [sp, #16]
 600:	ldr	x30, [sp, #32]
 604:	ldp	x19, x20, [sp], #64
 608:	ret
 60c:	ldr	w0, [sp, #60]
 610:	mov	x2, x19
 614:	mov	x1, x21
 618:	bl	0 <_ZN11__sanitizer14internal_writeEiPKvm>
 61c:	mov	x21, x0
 620:	add	x1, sp, #0x34
 624:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 628:	tst	w0, #0xff
 62c:	b.eq	69c <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm+0xec>  // b.none
 630:	ldrsw	x4, [sp, #52]
 634:	mov	w22, w20
 638:	cmp	x4, #0xe
 63c:	b.ne	6b8 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm+0x108>  // b.any
 640:	ldr	w0, [sp, #56]
 644:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 648:	ldr	w0, [sp, #60]
 64c:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 650:	mov	w0, w22
 654:	ldp	x21, x22, [sp, #16]
 658:	ldr	x30, [sp, #32]
 65c:	ldp	x19, x20, [sp], #64
 660:	ret
 664:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 668:	mov	x4, x0
 66c:	str	x0, [x20]
 670:	add	x4, x4, x4, lsl #2
 674:	cmp	x19, x4, lsl #1
 678:	lsl	x4, x4, #1
 67c:	b.cc	5e4 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm+0x34>  // b.lo, b.ul, b.last
 680:	adrp	x2, 0 <_ZN11__sanitizerL6getlimEi>
 684:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 688:	mov	x3, x19
 68c:	add	x2, x2, #0x0
 690:	add	x0, x0, #0x0
 694:	mov	w1, #0x118                 	// #280
 698:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 69c:	ldr	w0, [sp, #56]
 6a0:	cmp	x19, x21
 6a4:	cset	w22, eq  // eq = none
 6a8:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 6ac:	ldr	w0, [sp, #60]
 6b0:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 6b4:	b	650 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm+0xa0>
 6b8:	adrp	x2, 0 <_ZN11__sanitizerL6getlimEi>
 6bc:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 6c0:	add	x2, x2, #0x0
 6c4:	add	x0, x0, #0x0
 6c8:	mov	x3, #0xe                   	// #14
 6cc:	mov	w1, #0x121                 	// #289
 6d0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 6d4:	nop

00000000000006d8 <_ZN11__sanitizer28PlatformPrepareForSandboxingEP29__sanitizer_sandbox_arguments>:
 6d8:	b	0 <_ZN11__sanitizer19MemoryMappingLayout19CacheMemoryMappingsEv>
 6dc:	nop

00000000000006e0 <_ZN11__sanitizer17GetNamedMappingFdEPKcm>:
 6e0:	adrp	x2, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 6e4:	stp	x19, x20, [sp, #-240]!
 6e8:	ldr	x2, [x2]
 6ec:	ldrb	w2, [x2, #215]
 6f0:	str	x30, [sp, #16]
 6f4:	cbz	w2, 7cc <_ZN11__sanitizer17GetNamedMappingFdEPKcm+0xec>
 6f8:	mov	x20, x1
 6fc:	mov	x19, x0
 700:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 704:	cmp	x0, #0xbd
 708:	b.hi	774 <_ZN11__sanitizer17GetNamedMappingFdEPKcm+0x94>  // b.pmore
 70c:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
 710:	mov	x3, x0
 714:	mov	x4, x19
 718:	add	x19, sp, #0x28
 71c:	mov	x1, #0xc8                  	// #200
 720:	mov	x0, x19
 724:	adrp	x2, 0 <_ZN11__sanitizerL6getlimEi>
 728:	add	x2, x2, #0x0
 72c:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 730:	mov	w2, #0x1c0                 	// #448
 734:	mov	w1, #0x242                 	// #578
 738:	mov	x0, x19
 73c:	bl	0 <shm_open>
 740:	mov	x1, x20
 744:	mov	w20, w0
 748:	bl	0 <_ZN11__sanitizer18internal_ftruncateEim>
 74c:	sxtw	x4, w0
 750:	cbnz	w0, 794 <_ZN11__sanitizer17GetNamedMappingFdEPKcm+0xb4>
 754:	mov	x0, x19
 758:	bl	0 <shm_unlink>
 75c:	sxtw	x4, w0
 760:	cbnz	w0, 7b0 <_ZN11__sanitizer17GetNamedMappingFdEPKcm+0xd0>
 764:	mov	w0, w20
 768:	ldr	x30, [sp, #16]
 76c:	ldp	x19, x20, [sp], #240
 770:	ret
 774:	adrp	x2, 0 <_ZN11__sanitizerL6getlimEi>
 778:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 77c:	add	x2, x2, #0x0
 780:	add	x0, x0, #0x0
 784:	mov	x4, #0x0                   	// #0
 788:	mov	x3, #0x0                   	// #0
 78c:	mov	w1, #0x13c                 	// #316
 790:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 794:	adrp	x2, 0 <_ZN11__sanitizerL6getlimEi>
 798:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 79c:	add	x2, x2, #0x0
 7a0:	add	x0, x0, #0x0
 7a4:	mov	x3, #0x0                   	// #0
 7a8:	mov	w1, #0x142                 	// #322
 7ac:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 7b0:	adrp	x2, 0 <_ZN11__sanitizerL6getlimEi>
 7b4:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 7b8:	add	x2, x2, #0x0
 7bc:	add	x0, x0, #0x0
 7c0:	mov	x3, #0x0                   	// #0
 7c4:	mov	w1, #0x144                 	// #324
 7c8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 7cc:	mov	w20, #0xffffffff            	// #-1
 7d0:	b	764 <_ZN11__sanitizer17GetNamedMappingFdEPKcm+0x84>
 7d4:	nop

00000000000007d8 <_ZN11__sanitizer18MmapFixedNoReserveEmmPKc>:
 7d8:	stp	x19, x20, [sp, #-64]!
 7dc:	mov	x19, x1
 7e0:	stp	x21, x22, [sp, #16]
 7e4:	mov	x21, x0
 7e8:	stp	x23, x30, [sp, #32]
 7ec:	cbz	x2, 878 <_ZN11__sanitizer18MmapFixedNoReserveEmmPKc+0xa0>
 7f0:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
 7f4:	mov	x0, x2
 7f8:	bl	6e0 <_ZN11__sanitizer17GetNamedMappingFdEPKcm>
 7fc:	cmn	w0, #0x1
 800:	ldr	x20, [x20]
 804:	mov	w23, #0x4012                	// #16402
 808:	mov	w3, #0x4032                	// #16434
 80c:	mov	w22, w0
 810:	csel	w23, w23, w3, ne  // ne = any
 814:	ldr	x2, [x20]
 818:	cbz	x2, 890 <_ZN11__sanitizer18MmapFixedNoReserveEmmPKc+0xb8>
 81c:	neg	x6, x2
 820:	sub	x5, x2, #0x1
 824:	and	x0, x6, x21
 828:	tst	x2, x5
 82c:	b.ne	8b0 <_ZN11__sanitizer18MmapFixedNoReserveEmmPKc+0xd8>  // b.any
 830:	mov	w4, w22
 834:	mov	w3, w23
 838:	add	x1, x19, x5
 83c:	mov	w2, #0x3                   	// #3
 840:	mov	x5, #0x0                   	// #0
 844:	and	x1, x1, x6
 848:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
 84c:	add	x1, sp, #0x3c
 850:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 854:	tst	w0, #0xff
 858:	b.ne	8c0 <_ZN11__sanitizer18MmapFixedNoReserveEmmPKc+0xe8>  // b.any
 85c:	mov	x0, x19
 860:	bl	0 <_ZN11__sanitizer17IncreaseTotalMmapEm>
 864:	mov	w0, #0x1                   	// #1
 868:	ldp	x21, x22, [sp, #16]
 86c:	ldp	x23, x30, [sp, #32]
 870:	ldp	x19, x20, [sp], #64
 874:	ret
 878:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
 87c:	mov	w22, #0xffffffff            	// #-1
 880:	mov	w23, #0x4032                	// #16434
 884:	ldr	x20, [x20]
 888:	ldr	x2, [x20]
 88c:	cbnz	x2, 81c <_ZN11__sanitizer18MmapFixedNoReserveEmmPKc+0x44>
 890:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 894:	mov	x2, x0
 898:	str	x0, [x20]
 89c:	neg	x6, x2
 8a0:	sub	x5, x2, #0x1
 8a4:	and	x0, x6, x21
 8a8:	tst	x2, x5
 8ac:	b.eq	830 <_ZN11__sanitizer18MmapFixedNoReserveEmmPKc+0x58>  // b.none
 8b0:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 8b4:	add	x0, x0, #0x0
 8b8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 8bc:	bl	0 <_ZN11__sanitizer3DieEv>
 8c0:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 8c4:	ldr	w5, [sp, #60]
 8c8:	mov	x4, x21
 8cc:	mov	x3, x19
 8d0:	ldr	x1, [x1]
 8d4:	mov	x2, x19
 8d8:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 8dc:	add	x0, x0, #0x0
 8e0:	ldr	x1, [x1]
 8e4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 8e8:	mov	w0, #0x0                   	// #0
 8ec:	ldp	x21, x22, [sp, #16]
 8f0:	ldp	x23, x30, [sp, #32]
 8f4:	ldp	x19, x20, [sp], #64
 8f8:	ret
 8fc:	nop

0000000000000900 <_ZN11__sanitizer20ReservedAddressRange4InitEmPKcm>:
 900:	stp	x19, x20, [sp, #-32]!
 904:	mov	x19, x0
 908:	mov	x20, x2
 90c:	stp	x21, x30, [sp, #16]
 910:	mov	x21, x1
 914:	cbz	x3, 944 <_ZN11__sanitizer20ReservedAddressRange4InitEmPKcm+0x44>
 918:	mov	x0, x3
 91c:	mov	x5, #0x0                   	// #0
 920:	mov	w4, #0xffffffff            	// #-1
 924:	mov	w3, #0x4032                	// #16434
 928:	mov	w2, #0x0                   	// #0
 92c:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
 930:	stp	x0, x21, [x19]
 934:	str	x20, [x19, #16]
 938:	ldp	x21, x30, [sp, #16]
 93c:	ldp	x19, x20, [sp], #32
 940:	ret
 944:	mov	x5, #0x0                   	// #0
 948:	mov	w4, #0xffffffff            	// #-1
 94c:	mov	w3, #0x4022                	// #16418
 950:	mov	w2, #0x0                   	// #0
 954:	mov	x0, #0x0                   	// #0
 958:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
 95c:	stp	x0, x21, [x19]
 960:	str	x20, [x19, #16]
 964:	ldp	x21, x30, [sp, #16]
 968:	ldp	x19, x20, [sp], #32
 96c:	ret

0000000000000970 <_ZN11__sanitizer20ReservedAddressRange3MapEmm>:
 970:	mov	x0, x1
 974:	mov	x1, x2
 978:	b	0 <_ZN11__sanitizer26MmapFixedOrDieOnFatalErrorEmm>
 97c:	nop

0000000000000980 <_ZN11__sanitizer20ReservedAddressRange8MapOrDieEmm>:
 980:	mov	x0, x1
 984:	mov	x1, x2
 988:	b	0 <_ZN11__sanitizer14MmapFixedOrDieEmm>
 98c:	nop

0000000000000990 <_ZN11__sanitizer20ReservedAddressRange5UnmapEmm>:
 990:	ldr	x4, [x0, #8]
 994:	str	x30, [sp, #-16]!
 998:	mov	x5, x0
 99c:	cmp	x2, x4
 9a0:	b.hi	9fc <_ZN11__sanitizer20ReservedAddressRange5UnmapEmm+0x6c>  // b.pmore
 9a4:	mov	x0, x1
 9a8:	ldr	x1, [x5]
 9ac:	cmp	x1, x0
 9b0:	b.eq	9d8 <_ZN11__sanitizer20ReservedAddressRange5UnmapEmm+0x48>  // b.none
 9b4:	add	x1, x1, x4
 9b8:	add	x3, x2, x0
 9bc:	cmp	x3, x1
 9c0:	b.ne	a18 <_ZN11__sanitizer20ReservedAddressRange5UnmapEmm+0x88>  // b.any
 9c4:	ldr	x30, [sp], #16
 9c8:	sub	x4, x4, x2
 9cc:	str	x4, [x5, #8]
 9d0:	mov	x1, x2
 9d4:	b	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 9d8:	ldr	x30, [sp], #16
 9dc:	cmp	x2, x4
 9e0:	add	x1, x2, x0
 9e4:	sub	x4, x4, x2
 9e8:	csel	x1, x1, xzr, ne  // ne = any
 9ec:	str	x1, [x5]
 9f0:	str	x4, [x5, #8]
 9f4:	mov	x1, x2
 9f8:	b	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 9fc:	mov	x3, x2
 a00:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 a04:	adrp	x2, 0 <_ZN11__sanitizerL6getlimEi>
 a08:	add	x0, x0, #0x0
 a0c:	add	x2, x2, #0x0
 a10:	mov	w1, #0x175                 	// #373
 a14:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 a18:	mov	x4, x1
 a1c:	adrp	x2, 0 <_ZN11__sanitizerL6getlimEi>
 a20:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 a24:	add	x2, x2, #0x0
 a28:	add	x0, x0, #0x0
 a2c:	mov	w1, #0x17a                 	// #378
 a30:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 a34:	nop

0000000000000a38 <_ZN11__sanitizer17MmapFixedNoAccessEmmPKc>:
 a38:	stp	x19, x20, [sp, #-32]!
 a3c:	mov	x19, x0
 a40:	mov	x20, x1
 a44:	str	x30, [sp, #16]
 a48:	cbz	x2, a84 <_ZN11__sanitizer17MmapFixedNoAccessEmmPKc+0x4c>
 a4c:	mov	x0, x2
 a50:	bl	6e0 <_ZN11__sanitizer17GetNamedMappingFdEPKcm>
 a54:	mov	w4, w0
 a58:	mov	w0, #0x4032                	// #16434
 a5c:	cmn	w4, #0x1
 a60:	mov	x1, x20
 a64:	mov	w3, #0x4012                	// #16402
 a68:	csel	w3, w3, w0, ne  // ne = any
 a6c:	mov	x0, x19
 a70:	mov	x5, #0x0                   	// #0
 a74:	ldr	x30, [sp, #16]
 a78:	mov	w2, #0x0                   	// #0
 a7c:	ldp	x19, x20, [sp], #32
 a80:	b	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
 a84:	mov	x1, x20
 a88:	mov	x0, x19
 a8c:	ldr	x30, [sp, #16]
 a90:	mov	w3, #0x4032                	// #16434
 a94:	ldp	x19, x20, [sp], #32
 a98:	mov	w4, #0xffffffff            	// #-1
 a9c:	mov	x5, #0x0                   	// #0
 aa0:	mov	w2, #0x0                   	// #0
 aa4:	b	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>

0000000000000aa8 <_ZN11__sanitizer12MmapNoAccessEm>:
 aa8:	mov	x1, x0
 aac:	mov	x5, #0x0                   	// #0
 ab0:	mov	w4, #0xffffffff            	// #-1
 ab4:	mov	w3, #0x4022                	// #16418
 ab8:	mov	w2, #0x0                   	// #0
 abc:	mov	x0, #0x0                   	// #0
 ac0:	b	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
 ac4:	nop

0000000000000ac8 <_ZN11__sanitizer24my_pthread_attr_getstackEPvPS0_Pm>:
 ac8:	adrp	x3, 0 <real_pthread_attr_getstack>
 acc:	ldr	x3, [x3]
 ad0:	cbz	x3, ad8 <_ZN11__sanitizer24my_pthread_attr_getstackEPvPS0_Pm+0x10>
 ad4:	b	0 <real_pthread_attr_getstack>
 ad8:	b	0 <pthread_attr_getstack>
 adc:	nop

0000000000000ae0 <_ZN11__sanitizer15AdjustStackSizeEPv>:
 ae0:	stp	x19, x20, [sp, #-48]!
 ae4:	mov	x20, x0
 ae8:	add	x2, sp, #0x28
 aec:	add	x1, sp, #0x20
 af0:	str	x30, [sp, #16]
 af4:	stp	xzr, xzr, [sp, #32]
 af8:	bl	ac8 <_ZN11__sanitizer24my_pthread_attr_getstackEPvPS0_Pm>
 afc:	ldr	x0, [sp, #32]
 b00:	cbz	x0, b10 <_ZN11__sanitizer15AdjustStackSizeEPv+0x30>
 b04:	ldr	x1, [sp, #40]
 b08:	cmn	x0, x1
 b0c:	b.ne	b34 <_ZN11__sanitizer15AdjustStackSizeEPv+0x54>  // b.any
 b10:	bl	0 <_ZN11__sanitizer10GetTlsSizeEv>
 b14:	add	x19, x0, #0x20, lsl #12
 b18:	ldr	x1, [sp, #40]
 b1c:	cmp	x1, #0x0
 b20:	ccmp	x19, x1, #0x0, ne  // ne = any
 b24:	b.hi	b6c <_ZN11__sanitizer15AdjustStackSizeEPv+0x8c>  // b.pmore
 b28:	ldr	x30, [sp, #16]
 b2c:	ldp	x19, x20, [sp], #48
 b30:	ret
 b34:	bl	0 <_ZN11__sanitizer10GetTlsSizeEv>
 b38:	add	x2, x0, #0x20, lsl #12
 b3c:	ldr	x1, [sp, #40]
 b40:	cmp	x2, x1
 b44:	b.ls	b28 <_ZN11__sanitizer15AdjustStackSizeEPv+0x48>  // b.plast
 b48:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 b4c:	add	x0, x0, #0x0
 b50:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 b54:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 b58:	add	x0, x0, #0x0
 b5c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 b60:	ldr	x30, [sp, #16]
 b64:	ldp	x19, x20, [sp], #48
 b68:	ret
 b6c:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 b70:	ldr	x0, [x0]
 b74:	ldr	w0, [x0]
 b78:	cbnz	w0, b94 <_ZN11__sanitizer15AdjustStackSizeEPv+0xb4>
 b7c:	mov	x1, x19
 b80:	mov	x0, x20
 b84:	bl	0 <pthread_attr_setstacksize>
 b88:	ldr	x30, [sp, #16]
 b8c:	ldp	x19, x20, [sp], #48
 b90:	ret
 b94:	mov	x2, x19
 b98:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 b9c:	add	x0, x0, #0x0
 ba0:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 ba4:	b	b7c <_ZN11__sanitizer15AdjustStackSizeEPv+0x9c>

0000000000000ba8 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii>:
 ba8:	stp	x19, x20, [sp, #-80]!
 bac:	mov	w20, w4
 bb0:	stp	x21, x22, [sp, #16]
 bb4:	mov	w22, w2
 bb8:	mov	w21, w3
 bbc:	stp	x23, x24, [sp, #32]
 bc0:	mov	x23, x0
 bc4:	mov	x24, x1
 bc8:	str	x30, [sp, #48]
 bcc:	bl	0 <_ZN11__sanitizer13internal_forkEv>
 bd0:	mov	w19, w0
 bd4:	cmp	w0, #0x0
 bd8:	b.lt	c28 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x80>  // b.tstop
 bdc:	b.eq	c50 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0xa8>  // b.none
 be0:	cmn	w22, #0x1
 be4:	b.eq	bf0 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x48>  // b.none
 be8:	mov	w0, w22
 bec:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 bf0:	cmn	w21, #0x1
 bf4:	b.eq	c00 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x58>  // b.none
 bf8:	mov	w0, w21
 bfc:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 c00:	cmn	w20, #0x1
 c04:	b.eq	c10 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x68>  // b.none
 c08:	mov	w0, w20
 c0c:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 c10:	mov	w0, w19
 c14:	ldp	x21, x22, [sp, #16]
 c18:	ldp	x23, x24, [sp, #32]
 c1c:	ldr	x30, [sp, #48]
 c20:	ldp	x19, x20, [sp], #80
 c24:	ret
 c28:	add	x1, sp, #0x4c
 c2c:	sxtw	x0, w0
 c30:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 c34:	tst	w0, #0xff
 c38:	b.eq	be0 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x38>  // b.none
 c3c:	ldr	w1, [sp, #76]
 c40:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 c44:	add	x0, x0, #0x0
 c48:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 c4c:	b	be0 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x38>
 c50:	cmn	w22, #0x1
 c54:	b.eq	c70 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0xc8>  // b.none
 c58:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 c5c:	mov	w1, #0x0                   	// #0
 c60:	mov	w0, w22
 c64:	bl	0 <_ZN11__sanitizer13internal_dup2Eii>
 c68:	mov	w0, w22
 c6c:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 c70:	cmn	w21, #0x1
 c74:	b.eq	c94 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0xec>  // b.none
 c78:	mov	w0, #0x1                   	// #1
 c7c:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 c80:	mov	w1, #0x1                   	// #1
 c84:	mov	w0, w21
 c88:	bl	0 <_ZN11__sanitizer13internal_dup2Eii>
 c8c:	mov	w0, w21
 c90:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 c94:	cmn	w20, #0x1
 c98:	b.eq	cb8 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x110>  // b.none
 c9c:	mov	w0, #0x2                   	// #2
 ca0:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 ca4:	mov	w1, #0x2                   	// #2
 ca8:	mov	w0, w20
 cac:	bl	0 <_ZN11__sanitizer13internal_dup2Eii>
 cb0:	mov	w0, w20
 cb4:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 cb8:	mov	w0, #0x4                   	// #4
 cbc:	bl	0 <sysconf>
 cc0:	mov	x19, x0
 cc4:	cmp	w0, #0x2
 cc8:	b.le	ce0 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x138>
 ccc:	mov	w0, w19
 cd0:	sub	w19, w19, #0x1
 cd4:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 cd8:	cmp	w19, #0x2
 cdc:	b.ne	ccc <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x124>  // b.any
 ce0:	mov	x1, x24
 ce4:	mov	x0, x23
 ce8:	bl	0 <execv>
 cec:	mov	w0, #0x1                   	// #1
 cf0:	bl	0 <_ZN11__sanitizer14internal__exitEi>
 cf4:	nop

0000000000000cf8 <_ZN11__sanitizer16IsProcessRunningEi>:
 cf8:	stp	x19, x30, [sp, #-32]!
 cfc:	mov	w2, #0x1                   	// #1
 d00:	add	x1, sp, #0x18
 d04:	bl	0 <_ZN11__sanitizer16internal_waitpidEiPii>
 d08:	add	x1, sp, #0x1c
 d0c:	mov	x19, x0
 d10:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 d14:	cmp	x19, #0x0
 d18:	cset	w19, eq  // eq = none
 d1c:	tst	w0, #0xff
 d20:	b.ne	d30 <_ZN11__sanitizer16IsProcessRunningEi+0x38>  // b.any
 d24:	mov	w0, w19
 d28:	ldp	x19, x30, [sp], #32
 d2c:	ret
 d30:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 d34:	mov	w19, #0x0                   	// #0
 d38:	ldr	x0, [x0]
 d3c:	ldr	w0, [x0]
 d40:	cbz	w0, d24 <_ZN11__sanitizer16IsProcessRunningEi+0x2c>
 d44:	ldr	w1, [sp, #28]
 d48:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 d4c:	add	x0, x0, #0x0
 d50:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 d54:	mov	w0, w19
 d58:	ldp	x19, x30, [sp], #32
 d5c:	ret

0000000000000d60 <_ZN11__sanitizer14WaitForProcessEi>:
 d60:	stp	x19, x30, [sp, #-32]!
 d64:	mov	w2, #0x0                   	// #0
 d68:	add	x1, sp, #0x18
 d6c:	bl	0 <_ZN11__sanitizer16internal_waitpidEiPii>
 d70:	add	x1, sp, #0x1c
 d74:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 d78:	tst	w0, #0xff
 d7c:	b.ne	d90 <_ZN11__sanitizer14WaitForProcessEi+0x30>  // b.any
 d80:	ldr	w19, [sp, #24]
 d84:	mov	w0, w19
 d88:	ldp	x19, x30, [sp], #32
 d8c:	ret
 d90:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 d94:	mov	w19, #0xffffffff            	// #-1
 d98:	ldr	x0, [x0]
 d9c:	ldr	w0, [x0]
 da0:	cbz	w0, d84 <_ZN11__sanitizer14WaitForProcessEi+0x24>
 da4:	ldr	w1, [sp, #28]
 da8:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 dac:	add	x0, x0, #0x0
 db0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 db4:	b	d84 <_ZN11__sanitizer14WaitForProcessEi+0x24>

0000000000000db8 <_ZN11__sanitizer15IsStateDetachedEi>:
 db8:	cmp	w0, #0x1
 dbc:	cset	w0, eq  // eq = none
 dc0:	ret

sanitizer_printf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>:
   0:	mov	x7, x0
   4:	cbz	x4, ac <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_+0xac>
   8:	ldrb	w6, [x4]
   c:	cbz	w6, bc <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_+0xbc>
  10:	cbz	w3, c8 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_+0xc8>
  14:	mov	w8, #0x0                   	// #0
  18:	ldr	x5, [x7]
  1c:	b	28 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_+0x28>
  20:	b.eq	50 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_+0x50>  // b.none
  24:	mov	w8, w0
  28:	cmp	x1, x5
  2c:	b.ls	40 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_+0x40>  // b.plast
  30:	strb	w6, [x5]
  34:	ldr	x5, [x7]
  38:	add	x5, x5, #0x1
  3c:	str	x5, [x7]
  40:	ldrb	w6, [x4, #1]!
  44:	add	w0, w8, #0x1
  48:	cmp	w3, w0
  4c:	cbnz	w6, 20 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_+0x20>
  50:	mvn	w3, w8
  54:	cmp	w2, w3
  58:	b.ge	a8 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_+0xa8>  // b.tcont
  5c:	ldr	x5, [x7]
  60:	mov	w3, w0
  64:	mov	w6, #0x20                  	// #32
  68:	add	w3, w3, #0x1
  6c:	cmp	x1, x5
  70:	neg	w4, w3
  74:	b.ls	88 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_+0x88>  // b.plast
  78:	strb	w6, [x5]
  7c:	ldr	x5, [x7]
  80:	add	x5, x5, #0x1
  84:	str	x5, [x7]
  88:	cmp	w2, w4
  8c:	b.lt	68 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_+0x68>  // b.tstop
  90:	mvn	w1, w0
  94:	add	w0, w0, #0x1
  98:	cmp	w2, w1
  9c:	sub	w2, w1, w2
  a0:	csel	w2, w2, wzr, le
  a4:	add	w0, w2, w0
  a8:	ret
  ac:	adrp	x4, 0 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
  b0:	mov	w6, #0x3c                  	// #60
  b4:	add	x4, x4, #0x0
  b8:	b	10 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_+0x10>
  bc:	mov	w3, #0x0                   	// #0
  c0:	mov	w0, #0x0                   	// #0
  c4:	b	54 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_+0x54>
  c8:	mov	w0, #0x0                   	// #0
  cc:	b	54 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_+0x54>

00000000000000d0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>:
  d0:	stp	x19, x20, [sp, #-320]!
  d4:	and	w3, w3, #0xff
  d8:	cmp	w3, #0xa
  dc:	cset	w8, ne  // ne = any
  e0:	stp	x21, x22, [sp, #16]
  e4:	cmp	w8, #0x0
  e8:	stp	x23, x24, [sp, #32]
  ec:	ccmp	w3, #0x10, #0x4, ne  // ne = any
  f0:	stp	x25, x26, [sp, #48]
  f4:	str	x30, [sp, #64]
  f8:	b.ne	30c <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x23c>  // b.any
  fc:	and	w24, w6, #0xff
 100:	cmp	w8, #0x0
 104:	ccmp	w24, #0x0, #0x4, ne  // ne = any
 108:	b.ne	330 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x260>  // b.any
 10c:	cmp	x2, #0x0
 110:	ccmp	w24, #0x0, #0x4, eq  // eq = none
 114:	b.ne	340 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x270>  // b.any
 118:	and	w23, w4, #0xff
 11c:	cmp	w23, #0x1d
 120:	b.hi	350 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x280>  // b.pmore
 124:	cmp	w23, #0x0
 128:	mov	x19, x0
 12c:	sub	w0, w23, #0x1
 130:	ccmp	w24, #0x0, #0x4, ne  // ne = any
 134:	and	w0, w0, #0xff
 138:	and	w25, w5, #0xff
 13c:	csel	w23, w0, w23, ne  // ne = any
 140:	cmp	w24, #0x0
 144:	mov	x20, x1
 148:	and	w26, w7, #0xff
 14c:	ccmp	w25, #0x0, #0x4, ne  // ne = any
 150:	mov	w21, #0x0                   	// #0
 154:	b.ne	1a4 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0xd4>  // b.any
 158:	add	x22, sp, #0x50
 15c:	and	x3, x3, #0xff
 160:	mov	x9, x22
 164:	mov	w8, #0x0                   	// #0
 168:	udiv	x10, x2, x3
 16c:	mov	w12, w8
 170:	cmp	x2, x3
 174:	add	w8, w8, #0x1
 178:	msub	x11, x10, x3, x2
 17c:	mov	x2, x10
 180:	str	x11, [x9]
 184:	b.cc	1cc <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0xfc>  // b.lo, b.ul, b.last
 188:	add	x9, x9, #0x8
 18c:	cmp	w8, #0x1e
 190:	b.ne	168 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x98>  // b.any
 194:	adrp	x0, 0 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 198:	add	x0, x0, #0x0
 19c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 1a0:	bl	0 <_ZN11__sanitizer3DieEv>
 1a4:	ldr	x8, [x19]
 1a8:	mov	w21, #0x1                   	// #1
 1ac:	cmp	x1, x8
 1b0:	b.ls	158 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x88>  // b.plast
 1b4:	mov	w0, #0x2d                  	// #45
 1b8:	strb	w0, [x8]
 1bc:	ldr	x8, [x19]
 1c0:	add	x8, x8, #0x1
 1c4:	str	x8, [x19]
 1c8:	b	158 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x88>
 1cc:	cmp	w8, w23
 1d0:	sxtw	x0, w12
 1d4:	b.lt	2e8 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x218>  // b.tstop
 1d8:	add	w1, w21, #0x1
 1dc:	mov	w3, #0x20                  	// #32
 1e0:	add	w12, w1, w12
 1e4:	mov	w2, #0x30                  	// #48
 1e8:	b	1f8 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x128>
 1ec:	add	x1, x22, x0, lsl #3
 1f0:	sub	x0, x0, #0x1
 1f4:	ldur	x11, [x1, #-8]
 1f8:	mov	w5, w0
 1fc:	cbnz	x11, 31c <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x24c>
 200:	ldr	x8, [x19]
 204:	cmp	w0, #0x0
 208:	ccmp	w25, #0x0, #0x0, ne  // ne = any
 20c:	csel	w1, w3, w2, eq  // eq = none
 210:	cmp	x20, x8
 214:	b.ls	228 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x158>  // b.plast
 218:	strb	w1, [x8]
 21c:	ldr	x8, [x19]
 220:	add	x8, x8, #0x1
 224:	str	x8, [x19]
 228:	add	w21, w21, #0x1
 22c:	cmp	w12, w21
 230:	b.ne	1ec <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x11c>  // b.any
 234:	eor	w25, w25, #0x1
 238:	mov	w5, #0xffffffff            	// #-1
 23c:	tst	w24, w25
 240:	b.eq	2cc <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x1fc>  // b.none
 244:	cmp	x20, x8
 248:	b.hi	360 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x290>  // b.pmore
 24c:	add	w21, w21, #0x1
 250:	cmn	w5, #0x1
 254:	b.eq	2cc <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x1fc>  // b.none
 258:	cmp	w26, #0x0
 25c:	sub	w2, w5, #0x1
 260:	mov	w4, #0x41                  	// #65
 264:	mov	w0, #0x61                  	// #97
 268:	csel	w4, w4, w0, ne  // ne = any
 26c:	sxtw	x2, w2
 270:	ldr	x8, [x19]
 274:	sub	w4, w4, #0xa
 278:	mov	x6, #0xfffffffffffffffe    	// #-2
 27c:	nop
 280:	add	x0, x22, x2, lsl #3
 284:	ldrb	w3, [x0, #8]
 288:	add	w1, w3, #0x30
 28c:	add	w0, w3, w4
 290:	cmp	w3, #0x9
 294:	and	w1, w1, #0xff
 298:	and	w0, w0, #0xff
 29c:	csel	w0, w0, w1, hi  // hi = pmore
 2a0:	cmp	x20, x8
 2a4:	b.ls	2b8 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x1e8>  // b.plast
 2a8:	strb	w0, [x8]
 2ac:	ldr	x8, [x19]
 2b0:	add	x8, x8, #0x1
 2b4:	str	x8, [x19]
 2b8:	sub	x2, x2, #0x1
 2bc:	cmp	x6, x2
 2c0:	b.ne	280 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x1b0>  // b.any
 2c4:	add	w21, w21, #0x1
 2c8:	add	w21, w5, w21
 2cc:	mov	w0, w21
 2d0:	ldp	x21, x22, [sp, #16]
 2d4:	ldp	x23, x24, [sp, #32]
 2d8:	ldp	x25, x26, [sp, #48]
 2dc:	ldr	x30, [sp, #64]
 2e0:	ldp	x19, x20, [sp], #320
 2e4:	ret
 2e8:	sub	w2, w23, w8
 2ec:	add	x0, x22, w8, sxtw #3
 2f0:	mov	w1, #0x0                   	// #0
 2f4:	sbfiz	x2, x2, #3, #32
 2f8:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 2fc:	sub	w12, w23, #0x1
 300:	sxtw	x0, w12
 304:	ldr	x11, [x22, x0, lsl #3]
 308:	b	1d8 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x108>
 30c:	adrp	x0, 0 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 310:	add	x0, x0, #0x0
 314:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 318:	bl	0 <_ZN11__sanitizer3DieEv>
 31c:	eor	w25, w25, #0x1
 320:	tst	w24, w25
 324:	b.eq	250 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x180>  // b.none
 328:	ldr	x8, [x19]
 32c:	b	244 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x174>
 330:	adrp	x0, 0 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 334:	add	x0, x0, #0x0
 338:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 33c:	bl	0 <_ZN11__sanitizer3DieEv>
 340:	adrp	x0, 0 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 344:	add	x0, x0, #0x0
 348:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 34c:	bl	0 <_ZN11__sanitizer3DieEv>
 350:	adrp	x0, 0 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 354:	add	x0, x0, #0x0
 358:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 35c:	bl	0 <_ZN11__sanitizer3DieEv>
 360:	mov	w0, #0x2d                  	// #45
 364:	strb	w0, [x8]
 368:	ldr	x8, [x19]
 36c:	add	x8, x8, #0x1
 370:	str	x8, [x19]
 374:	b	24c <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x17c>

0000000000000378 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list>:
 378:	stp	x19, x20, [sp, #-112]!
 37c:	stp	x23, x24, [sp, #32]
 380:	stp	x27, x28, [sp, #64]
 384:	str	x30, [sp, #80]
 388:	str	x0, [sp, #104]
 38c:	cbz	x2, 8e8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x570>
 390:	cmp	w1, #0x0
 394:	b.le	900 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x588>
 398:	ldrb	w4, [x2]
 39c:	sxtw	x19, w1
 3a0:	sub	x28, x19, #0x1
 3a4:	mov	x20, x0
 3a8:	add	x28, x0, x28
 3ac:	cbz	w4, 9b0 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x638>
 3b0:	add	x27, sp, #0x68
 3b4:	mov	w24, #0x0                   	// #0
 3b8:	stp	x21, x22, [sp, #16]
 3bc:	adrp	x21, 0 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 3c0:	add	x21, x21, #0x0
 3c4:	stp	x25, x26, [sp, #48]
 3c8:	ldr	w26, [x3, #24]
 3cc:	ldp	x25, x22, [x3]
 3d0:	b	408 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x90>
 3d4:	ldr	x0, [sp, #104]
 3d8:	cmp	x28, x0
 3dc:	b.ls	3f0 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x78>  // b.plast
 3e0:	strb	w4, [x0]
 3e4:	ldr	x0, [sp, #104]
 3e8:	add	x0, x0, #0x1
 3ec:	str	x0, [sp, #104]
 3f0:	mov	x0, x23
 3f4:	add	w24, w24, #0x1
 3f8:	mov	x23, x2
 3fc:	mov	x2, x0
 400:	ldrb	w4, [x23, #1]
 404:	cbz	w4, 5a8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x230>
 408:	cmp	w4, #0x25
 40c:	add	x23, x2, #0x1
 410:	b.ne	3d4 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x5c>  // b.any
 414:	ldrb	w1, [x2, #1]
 418:	cmp	w1, #0x2d
 41c:	mov	w4, w1
 420:	b.ne	42c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0xb4>  // b.any
 424:	ldrb	w4, [x2, #2]
 428:	add	x23, x2, #0x2
 42c:	sub	w0, w4, #0x30
 430:	mov	w8, #0x0                   	// #0
 434:	and	w0, w0, #0xff
 438:	cmp	w0, #0x9
 43c:	cset	w6, ls  // ls = plast
 440:	cmp	w4, #0x30
 444:	cset	w5, eq  // eq = none
 448:	cmp	w0, #0x9
 44c:	b.ls	4b8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x140>  // b.plast
 450:	cmp	w4, #0x2e
 454:	mov	w7, #0x1                   	// #1
 458:	mov	w3, #0xffffffff            	// #-1
 45c:	b.eq	4fc <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x184>  // b.none
 460:	cmp	w4, #0x7a
 464:	cinc	x23, x23, eq  // eq = none
 468:	cset	w2, eq  // eq = none
 46c:	ldrb	w4, [x23]
 470:	b.eq	47c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x104>  // b.none
 474:	cmp	w4, #0x6c
 478:	b.eq	518 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x1a0>  // b.none
 47c:	cmp	w1, #0x2d
 480:	orr	w6, w6, w2
 484:	ccmp	w7, #0x0, #0x4, ne  // ne = any
 488:	mov	w9, #0x0                   	// #0
 48c:	b.ne	548 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x1d0>  // b.any
 490:	cmp	w4, #0x73
 494:	b.eq	748 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x3d0>  // b.none
 498:	adrp	x2, 0 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 49c:	adrp	x0, 0 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 4a0:	add	x2, x2, #0x0
 4a4:	add	x0, x0, #0x0
 4a8:	mov	x4, #0x0                   	// #0
 4ac:	mov	x3, #0x0                   	// #0
 4b0:	mov	w1, #0xa9                  	// #169
 4b4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 4b8:	add	w8, w8, w8, lsl #2
 4bc:	add	w8, w4, w8, lsl #1
 4c0:	ldrb	w4, [x23, #1]!
 4c4:	sub	w8, w8, #0x30
 4c8:	sub	w2, w4, #0x30
 4cc:	and	w2, w2, #0xff
 4d0:	cmp	w2, #0x9
 4d4:	b.hi	450 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0xd8>  // b.pmore
 4d8:	add	w8, w8, w8, lsl #2
 4dc:	add	w8, w4, w8, lsl #1
 4e0:	ldrb	w4, [x23, #1]!
 4e4:	sub	w8, w8, #0x30
 4e8:	sub	w2, w4, #0x30
 4ec:	and	w2, w2, #0xff
 4f0:	cmp	w2, #0x9
 4f4:	b.ls	4b8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x140>  // b.plast
 4f8:	b	450 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0xd8>
 4fc:	ldrb	w2, [x23, #1]
 500:	cmp	w2, #0x2a
 504:	b.eq	808 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x490>  // b.none
 508:	ldrb	w4, [x23]
 50c:	mov	w2, #0x0                   	// #0
 510:	cmp	w4, #0x6c
 514:	b.ne	47c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x104>  // b.any
 518:	ldrb	w9, [x23, #1]
 51c:	cmp	w9, #0x6c
 520:	b.ne	47c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x104>  // b.any
 524:	cmp	w1, #0x2d
 528:	mov	w2, #0x1                   	// #1
 52c:	ldrb	w4, [x23, #2]
 530:	mov	w6, w2
 534:	add	x23, x23, #0x2
 538:	mov	w9, w2
 53c:	ccmp	w7, #0x0, #0x4, ne  // ne = any
 540:	b.eq	490 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x118>  // b.none
 544:	nop
 548:	cmp	w4, #0x64
 54c:	b.eq	700 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x388>  // b.none
 550:	b.hi	5e4 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x26c>  // b.pmore
 554:	cmp	w4, #0x58
 558:	b.eq	6c4 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x34c>  // b.none
 55c:	cmp	w4, #0x63
 560:	b.ne	65c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x2e4>  // b.any
 564:	cbnz	w6, 698 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x320>
 568:	tbnz	w26, #31, 7e8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x470>
 56c:	add	x0, x25, #0xb
 570:	mov	x1, x25
 574:	and	x25, x0, #0xfffffffffffffff8
 578:	ldr	x0, [sp, #104]
 57c:	cmp	x28, x0
 580:	b.ls	598 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x220>  // b.plast
 584:	ldr	w1, [x1]
 588:	strb	w1, [x0]
 58c:	ldr	x0, [sp, #104]
 590:	add	x0, x0, #0x1
 594:	str	x0, [sp, #104]
 598:	add	w24, w24, #0x1
 59c:	add	x2, x23, #0x1
 5a0:	ldrb	w4, [x23, #1]
 5a4:	cbnz	w4, 408 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x90>
 5a8:	ldp	x21, x22, [sp, #16]
 5ac:	ldp	x25, x26, [sp, #48]
 5b0:	ldr	x0, [sp, #104]
 5b4:	cmp	x28, x0
 5b8:	b.cc	9b8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x640>  // b.lo, b.ul, b.last
 5bc:	add	x19, x20, x19
 5c0:	cmp	x0, x19
 5c4:	b.cs	5cc <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x254>  // b.hs, b.nlast
 5c8:	strb	wzr, [x0]
 5cc:	mov	w0, w24
 5d0:	ldp	x23, x24, [sp, #32]
 5d4:	ldp	x27, x28, [sp, #64]
 5d8:	ldr	x30, [sp, #80]
 5dc:	ldp	x19, x20, [sp], #112
 5e0:	ret
 5e4:	cmp	w4, #0x70
 5e8:	b.ne	690 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x318>  // b.any
 5ec:	cbnz	w6, 698 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x320>
 5f0:	tbnz	w26, #31, 7c8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x450>
 5f4:	add	x1, x25, #0xf
 5f8:	mov	x0, x25
 5fc:	and	x25, x1, #0xfffffffffffffff8
 600:	ldr	x9, [x0]
 604:	mov	x4, x21
 608:	mov	x1, x28
 60c:	mov	w3, #0xffffffff            	// #-1
 610:	mov	w2, #0x0                   	// #0
 614:	mov	x0, x27
 618:	bl	0 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 61c:	mov	w8, w0
 620:	mov	x2, x9
 624:	mov	x1, x28
 628:	mov	x0, x27
 62c:	mov	w7, #0x0                   	// #0
 630:	mov	w6, #0x0                   	// #0
 634:	mov	w5, #0x1                   	// #1
 638:	mov	w4, #0xc                   	// #12
 63c:	mov	w3, #0x10                  	// #16
 640:	str	w8, [sp, #100]
 644:	bl	d0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 648:	ldr	w8, [sp, #100]
 64c:	add	x2, x23, #0x1
 650:	add	w8, w8, w0
 654:	add	w24, w24, w8
 658:	b	400 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x88>
 65c:	cmp	w4, #0x25
 660:	b.ne	698 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x320>  // b.any
 664:	cbnz	w6, 698 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x320>
 668:	ldr	x0, [sp, #104]
 66c:	cmp	x28, x0
 670:	b.ls	598 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x220>  // b.plast
 674:	strb	w4, [x0]
 678:	add	w24, w24, #0x1
 67c:	add	x2, x23, #0x1
 680:	ldr	x0, [sp, #104]
 684:	add	x0, x0, #0x1
 688:	str	x0, [sp, #104]
 68c:	b	5a0 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x228>
 690:	cmp	w4, #0x6f
 694:	b.hi	6a8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x330>  // b.pmore
 698:	adrp	x0, 0 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 69c:	add	x0, x0, #0x0
 6a0:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 6a4:	bl	0 <_ZN11__sanitizer3DieEv>
 6a8:	cmp	w4, #0x78
 6ac:	b.eq	6c4 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x34c>  // b.none
 6b0:	b.hi	698 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x320>  // b.pmore
 6b4:	cmp	w4, #0x73
 6b8:	b.eq	748 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x3d0>  // b.none
 6bc:	cmp	w4, #0x75
 6c0:	b.ne	698 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x320>  // b.any
 6c4:	cbz	w9, 7ac <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x434>
 6c8:	tbnz	w26, #31, 8c8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x550>
 6cc:	add	x1, x25, #0xf
 6d0:	mov	x0, x25
 6d4:	and	x25, x1, #0xfffffffffffffff8
 6d8:	ldr	x2, [x0]
 6dc:	cmp	w4, #0x58
 6e0:	cset	w7, eq  // eq = none
 6e4:	cmp	w4, #0x75
 6e8:	mov	w3, #0xa                   	// #10
 6ec:	mov	w0, #0x10                  	// #16
 6f0:	mov	w4, w8
 6f4:	csel	w3, w3, w0, eq  // eq = none
 6f8:	mov	w6, #0x0                   	// #0
 6fc:	b	730 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x3b8>
 700:	cbz	w9, 790 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x418>
 704:	tbnz	w26, #31, 8a8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x530>
 708:	add	x1, x25, #0xf
 70c:	mov	x0, x25
 710:	and	x25, x1, #0xfffffffffffffff8
 714:	ldr	x6, [x0]
 718:	cmp	x6, #0x0
 71c:	cneg	x2, x6, lt  // lt = tstop
 720:	mov	w4, w8
 724:	lsr	x6, x6, #63
 728:	mov	w7, #0x0                   	// #0
 72c:	mov	w3, #0xa                   	// #10
 730:	mov	x1, x28
 734:	mov	x0, x27
 738:	bl	d0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 73c:	add	w24, w24, w0
 740:	add	x2, x23, #0x1
 744:	b	400 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x88>
 748:	cbnz	w2, 698 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x320>
 74c:	cmp	w1, #0x2d
 750:	ccmp	w0, #0x9, #0x2, ne  // ne = any
 754:	b.ls	848 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x4d0>  // b.plast
 758:	cmp	w1, #0x2d
 75c:	cneg	w8, w8, eq  // eq = none
 760:	tbnz	w26, #31, 868 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x4f0>
 764:	add	x1, x25, #0xf
 768:	mov	x0, x25
 76c:	and	x25, x1, #0xfffffffffffffff8
 770:	ldr	x4, [x0]
 774:	mov	w2, w8
 778:	mov	x1, x28
 77c:	mov	x0, x27
 780:	bl	0 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 784:	add	w24, w24, w0
 788:	add	x2, x23, #0x1
 78c:	b	400 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x88>
 790:	cbnz	w2, 704 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x38c>
 794:	tbnz	w26, #31, 93c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x5c4>
 798:	mov	x0, x25
 79c:	add	x1, x25, #0xb
 7a0:	and	x25, x1, #0xfffffffffffffff8
 7a4:	ldrsw	x6, [x0]
 7a8:	b	718 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x3a0>
 7ac:	cbnz	w2, 6c8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x350>
 7b0:	tbnz	w26, #31, 918 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x5a0>
 7b4:	mov	x0, x25
 7b8:	add	x1, x25, #0xb
 7bc:	and	x25, x1, #0xfffffffffffffff8
 7c0:	ldr	w2, [x0]
 7c4:	b	6dc <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x364>
 7c8:	add	w1, w26, #0x8
 7cc:	cmp	w1, #0x0
 7d0:	b.le	830 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x4b8>
 7d4:	add	x2, x25, #0xf
 7d8:	mov	x0, x25
 7dc:	mov	w26, w1
 7e0:	and	x25, x2, #0xfffffffffffffff8
 7e4:	b	600 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x288>
 7e8:	add	w0, w26, #0x8
 7ec:	cmp	w0, #0x0
 7f0:	b.le	83c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x4c4>
 7f4:	add	x2, x25, #0xb
 7f8:	mov	x1, x25
 7fc:	mov	w26, w0
 800:	and	x25, x2, #0xfffffffffffffff8
 804:	b	578 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x200>
 808:	add	x2, x23, #0x2
 80c:	tbnz	w26, #31, 888 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x510>
 810:	add	x4, x25, #0xb
 814:	mov	x3, x25
 818:	and	x25, x4, #0xfffffffffffffff8
 81c:	ldr	w3, [x3]
 820:	ldrb	w4, [x23, #2]
 824:	mov	x23, x2
 828:	lsr	w7, w3, #31
 82c:	b	460 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0xe8>
 830:	add	x0, x22, w26, sxtw
 834:	mov	w26, w1
 838:	b	600 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x288>
 83c:	add	x1, x22, w26, sxtw
 840:	mov	w26, w0
 844:	b	578 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x200>
 848:	adrp	x2, 0 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 84c:	adrp	x0, 0 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 850:	add	x2, x2, #0x0
 854:	add	x0, x0, #0x0
 858:	mov	x4, #0x0                   	// #0
 85c:	mov	x3, #0x0                   	// #0
 860:	mov	w1, #0xc6                  	// #198
 864:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 868:	add	w1, w26, #0x8
 86c:	cmp	w1, #0x0
 870:	b.le	960 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x5e8>
 874:	add	x2, x25, #0xf
 878:	mov	x0, x25
 87c:	mov	w26, w1
 880:	and	x25, x2, #0xfffffffffffffff8
 884:	b	770 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x3f8>
 888:	add	w4, w26, #0x8
 88c:	cmp	w4, #0x0
 890:	b.le	96c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x5f4>
 894:	add	x7, x25, #0xb
 898:	mov	x3, x25
 89c:	mov	w26, w4
 8a0:	and	x25, x7, #0xfffffffffffffff8
 8a4:	b	81c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x4a4>
 8a8:	add	w1, w26, #0x8
 8ac:	cmp	w1, #0x0
 8b0:	b.le	984 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x60c>
 8b4:	add	x2, x25, #0xf
 8b8:	mov	x0, x25
 8bc:	mov	w26, w1
 8c0:	and	x25, x2, #0xfffffffffffffff8
 8c4:	b	714 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x39c>
 8c8:	add	w1, w26, #0x8
 8cc:	cmp	w1, #0x0
 8d0:	b.le	978 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x600>
 8d4:	add	x2, x25, #0xf
 8d8:	mov	x0, x25
 8dc:	mov	w26, w1
 8e0:	and	x25, x2, #0xfffffffffffffff8
 8e4:	b	6d8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x360>
 8e8:	adrp	x0, 0 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 8ec:	add	x0, x0, #0x0
 8f0:	stp	x21, x22, [sp, #16]
 8f4:	stp	x25, x26, [sp, #48]
 8f8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 8fc:	bl	0 <_ZN11__sanitizer3DieEv>
 900:	adrp	x0, 0 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 904:	add	x0, x0, #0x0
 908:	stp	x21, x22, [sp, #16]
 90c:	stp	x25, x26, [sp, #48]
 910:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 914:	bl	0 <_ZN11__sanitizer3DieEv>
 918:	add	w1, w26, #0x8
 91c:	cmp	w1, #0x0
 920:	b.le	990 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x618>
 924:	mov	x0, x25
 928:	add	x2, x25, #0xb
 92c:	and	x25, x2, #0xfffffffffffffff8
 930:	mov	w26, w1
 934:	ldr	w2, [x0]
 938:	b	6dc <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x364>
 93c:	add	w1, w26, #0x8
 940:	cmp	w1, #0x0
 944:	b.le	9a0 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x628>
 948:	mov	x0, x25
 94c:	add	x2, x25, #0xb
 950:	mov	w26, w1
 954:	and	x25, x2, #0xfffffffffffffff8
 958:	ldrsw	x6, [x0]
 95c:	b	718 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x3a0>
 960:	add	x0, x22, w26, sxtw
 964:	mov	w26, w1
 968:	b	770 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x3f8>
 96c:	add	x3, x22, w26, sxtw
 970:	mov	w26, w4
 974:	b	81c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x4a4>
 978:	add	x0, x22, w26, sxtw
 97c:	mov	w26, w1
 980:	b	6d8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x360>
 984:	add	x0, x22, w26, sxtw
 988:	mov	w26, w1
 98c:	b	714 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x39c>
 990:	add	x0, x22, w26, sxtw
 994:	mov	w26, w1
 998:	ldr	w2, [x0]
 99c:	b	6dc <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x364>
 9a0:	add	x0, x22, w26, sxtw
 9a4:	mov	w26, w1
 9a8:	ldrsw	x6, [x0]
 9ac:	b	718 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x3a0>
 9b0:	mov	w24, #0x0                   	// #0
 9b4:	b	5b4 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x23c>
 9b8:	adrp	x0, 0 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 9bc:	add	x0, x0, #0x0
 9c0:	stp	x21, x22, [sp, #16]
 9c4:	stp	x25, x26, [sp, #48]
 9c8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 9cc:	bl	0 <_ZN11__sanitizer3DieEv>

00000000000009d0 <_ZN11__sanitizer26SetPrintfAndReportCallbackEPFvPKcE>:
 9d0:	adrp	x1, 0 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 9d4:	str	x0, [x1]
 9d8:	ret
 9dc:	nop

00000000000009e0 <OnPrint>:
 9e0:	ret
 9e4:	nop

00000000000009e8 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>:
 9e8:	sub	sp, sp, #0x100
 9ec:	mov	w9, #0xffffffd8            	// #-40
 9f0:	add	x10, sp, #0xd0
 9f4:	add	x11, sp, #0x100
 9f8:	mov	w8, #0xffffff80            	// #-128
 9fc:	stp	x11, x11, [sp, #48]
 a00:	str	x10, [sp, #64]
 a04:	stp	w9, w8, [sp, #72]
 a08:	ldp	x10, x11, [sp, #48]
 a0c:	str	x30, [sp]
 a10:	ldp	x8, x9, [sp, #64]
 a14:	stp	x10, x11, [sp, #16]
 a18:	stp	x8, x9, [sp, #32]
 a1c:	str	q0, [sp, #80]
 a20:	str	q1, [sp, #96]
 a24:	str	q2, [sp, #112]
 a28:	str	q3, [sp, #128]
 a2c:	str	q4, [sp, #144]
 a30:	str	q5, [sp, #160]
 a34:	str	q6, [sp, #176]
 a38:	str	q7, [sp, #192]
 a3c:	stp	x3, x4, [sp, #216]
 a40:	add	x3, sp, #0x10
 a44:	stp	x5, x6, [sp, #232]
 a48:	str	x7, [sp, #248]
 a4c:	bl	378 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list>
 a50:	ldr	x30, [sp]
 a54:	add	sp, sp, #0x100
 a58:	ret
 a5c:	nop

0000000000000a60 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0>:
 a60:	stp	x19, x20, [sp, #-176]!
 a64:	and	w0, w0, #0xff
 a68:	mov	x19, x1
 a6c:	stp	x23, x24, [sp, #32]
 a70:	adrp	x23, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 a74:	adrp	x24, 0 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 a78:	stp	x27, x28, [sp, #64]
 a7c:	mov	x27, x3
 a80:	add	x24, x24, #0x0
 a84:	ldr	x23, [x23]
 a88:	stp	x21, x22, [sp, #16]
 a8c:	mov	x21, x1
 a90:	mov	x22, x2
 a94:	stp	x25, x26, [sp, #48]
 a98:	add	x25, sp, #0x70
 a9c:	str	w0, [sp, #104]
 aa0:	mov	w26, #0x0                   	// #0
 aa4:	ldp	x2, x3, [x3]
 aa8:	mov	w20, #0x190                 	// #400
 aac:	ldp	x0, x1, [x27, #16]
 ab0:	str	x30, [sp, #80]
 ab4:	stp	x2, x3, [sp, #144]
 ab8:	stp	x0, x1, [sp, #160]
 abc:	ldr	w0, [sp, #104]
 ac0:	cbz	w0, b20 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0xc0>
 ac4:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
 ac8:	mov	x28, x0
 acc:	bl	0 <_ZN11__sanitizer14GetProcessNameEv>
 ad0:	cmp	x0, #0x0
 ad4:	ldrb	w2, [x23, #48]
 ad8:	cset	w6, ne  // ne = any
 adc:	mov	x3, x0
 ae0:	sxtw	x1, w20
 ae4:	mov	x0, x19
 ae8:	tst	w6, w2
 aec:	mov	w5, #0x0                   	// #0
 af0:	b.ne	c3c <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x1dc>  // b.any
 af4:	mov	w3, w28
 af8:	mov	x2, x24
 afc:	str	w5, [sp, #108]
 b00:	bl	9e8 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 b04:	ldr	w5, [sp, #108]
 b08:	add	w28, w5, w0
 b0c:	cmp	w20, w28
 b10:	b.le	b8c <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x12c>
 b14:	add	x0, x19, w28, sxtw
 b18:	sub	w1, w20, w28
 b1c:	b	b2c <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0xcc>
 b20:	mov	w1, w20
 b24:	mov	x0, x19
 b28:	mov	w28, #0x0                   	// #0
 b2c:	ldp	x6, x7, [x27]
 b30:	mov	x3, x25
 b34:	ldp	x8, x9, [x27, #16]
 b38:	mov	x2, x22
 b3c:	stp	x6, x7, [x25]
 b40:	stp	x8, x9, [x25, #16]
 b44:	bl	378 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list>
 b48:	add	w0, w28, w0
 b4c:	cmp	w20, w0
 b50:	b.gt	bd8 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x178>
 b54:	cbnz	w26, bcc <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x16c>
 b58:	ldp	x2, x3, [sp, #160]
 b5c:	stp	x2, x3, [x27, #16]
 b60:	mov	w26, #0x1                   	// #1
 b64:	ldp	x0, x1, [sp, #144]
 b68:	stp	x0, x1, [x27]
 b6c:	mov	w2, #0x0                   	// #0
 b70:	mov	w20, #0x4000                	// #16384
 b74:	adrp	x1, 0 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 b78:	mov	x0, #0x4000                	// #16384
 b7c:	add	x1, x1, #0x0
 b80:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 b84:	mov	x19, x0
 b88:	b	abc <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x5c>
 b8c:	cbz	w26, b58 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0xf8>
 b90:	mov	w0, #0x3fff                	// #16383
 b94:	cmp	w28, w0
 b98:	b.gt	c64 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x204>
 b9c:	ldp	x6, x7, [x27]
 ba0:	mov	x2, x22
 ba4:	ldp	x4, x5, [x27, #16]
 ba8:	add	x3, sp, #0x70
 bac:	sub	w1, w20, w28
 bb0:	add	x0, x19, w28, sxtw
 bb4:	stp	x6, x7, [sp, #112]
 bb8:	stp	x4, x5, [sp, #128]
 bbc:	bl	378 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list>
 bc0:	add	w0, w28, w0
 bc4:	cmp	w20, w0
 bc8:	b.gt	bd8 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x178>
 bcc:	mov	w1, #0x3fff                	// #16383
 bd0:	cmp	w0, w1
 bd4:	b.gt	c64 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x204>
 bd8:	mov	x0, x19
 bdc:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 be0:	mov	x0, x19
 be4:	bl	0 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc>
 be8:	mov	x0, x19
 bec:	bl	9e0 <OnPrint>
 bf0:	adrp	x0, 0 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 bf4:	ldr	x1, [x0]
 bf8:	cbz	x1, c04 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x1a4>
 bfc:	mov	x0, x19
 c00:	blr	x1
 c04:	mov	x0, x19
 c08:	bl	0 <_ZN11__sanitizer18LogMessageOnPrintfEPKc>
 c0c:	cmp	x19, x21
 c10:	b.eq	c20 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x1c0>  // b.none
 c14:	sxtw	x1, w20
 c18:	mov	x0, x19
 c1c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 c20:	ldp	x21, x22, [sp, #16]
 c24:	ldp	x23, x24, [sp, #32]
 c28:	ldp	x25, x26, [sp, #48]
 c2c:	ldp	x27, x28, [sp, #64]
 c30:	ldr	x30, [sp, #80]
 c34:	ldp	x19, x20, [sp], #176
 c38:	ret
 c3c:	adrp	x2, 0 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 c40:	add	x2, x2, #0x0
 c44:	bl	9e8 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 c48:	mov	w5, w0
 c4c:	cmp	w20, w0
 c50:	b.le	c74 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x214>
 c54:	sub	w1, w20, w0
 c58:	add	x0, x19, w0, sxtw
 c5c:	sxtw	x1, w1
 c60:	b	af4 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x94>
 c64:	adrp	x0, 0 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 c68:	add	x0, x0, #0x0
 c6c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 c70:	bl	0 <_ZN11__sanitizer3DieEv>
 c74:	cbz	w26, b58 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0xf8>
 c78:	mov	w0, #0x3fff                	// #16383
 c7c:	cmp	w5, w0
 c80:	b.gt	c64 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x204>
 c84:	sub	w1, w20, w5
 c88:	mov	w3, w28
 c8c:	add	x0, x19, w5, sxtw
 c90:	adrp	x2, 0 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 c94:	sxtw	x1, w1
 c98:	add	x2, x2, #0x0
 c9c:	str	w5, [sp, #104]
 ca0:	bl	9e8 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 ca4:	ldr	w5, [sp, #104]
 ca8:	add	w28, w5, w0
 cac:	cmp	w20, w28
 cb0:	b.le	b90 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x130>
 cb4:	b	b9c <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x13c>

0000000000000cb8 <_ZN11__sanitizerL16SharedPrintfCodeEbPKcSt9__va_list>:
 cb8:	mov	x4, x2
 cbc:	sub	sp, sp, #0x1c0
 cc0:	mov	x2, x1
 cc4:	add	x3, sp, #0x10
 cc8:	add	x1, sp, #0x30
 ccc:	ldp	x6, x7, [x4]
 cd0:	stp	x6, x7, [sp, #16]
 cd4:	ldp	x4, x5, [x4, #16]
 cd8:	str	x30, [sp]
 cdc:	stp	x4, x5, [sp, #32]
 ce0:	bl	a60 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0>
 ce4:	ldr	x30, [sp]
 ce8:	add	sp, sp, #0x1c0
 cec:	ret

0000000000000cf0 <_ZN11__sanitizer6PrintfEPKcz>:
 cf0:	sub	sp, sp, #0x110
 cf4:	mov	w9, #0xffffffc8            	// #-56
 cf8:	add	x11, sp, #0xd0
 cfc:	add	x10, sp, #0x110
 d00:	mov	w8, #0xffffff80            	// #-128
 d04:	stp	x10, x10, [sp, #48]
 d08:	mov	x10, x0
 d0c:	mov	w0, #0x0                   	// #0
 d10:	str	x11, [sp, #64]
 d14:	stp	w9, w8, [sp, #72]
 d18:	ldp	x12, x13, [sp, #48]
 d1c:	str	x30, [sp]
 d20:	ldp	x8, x9, [sp, #64]
 d24:	stp	x12, x13, [sp, #16]
 d28:	stp	x8, x9, [sp, #32]
 d2c:	str	q0, [sp, #80]
 d30:	str	q1, [sp, #96]
 d34:	str	q2, [sp, #112]
 d38:	str	q3, [sp, #128]
 d3c:	str	q4, [sp, #144]
 d40:	str	q5, [sp, #160]
 d44:	str	q6, [sp, #176]
 d48:	str	q7, [sp, #192]
 d4c:	stp	x1, x2, [sp, #216]
 d50:	add	x2, sp, #0x10
 d54:	mov	x1, x10
 d58:	stp	x3, x4, [sp, #232]
 d5c:	stp	x5, x6, [sp, #248]
 d60:	str	x7, [sp, #264]
 d64:	bl	cb8 <_ZN11__sanitizerL16SharedPrintfCodeEbPKcSt9__va_list>
 d68:	ldr	x30, [sp]
 d6c:	add	sp, sp, #0x110
 d70:	ret
 d74:	nop

0000000000000d78 <_ZN11__sanitizer6ReportEPKcz>:
 d78:	sub	sp, sp, #0x110
 d7c:	mov	w9, #0xffffffc8            	// #-56
 d80:	add	x11, sp, #0xd0
 d84:	add	x10, sp, #0x110
 d88:	mov	w8, #0xffffff80            	// #-128
 d8c:	stp	x10, x10, [sp, #48]
 d90:	mov	x10, x0
 d94:	mov	w0, #0x1                   	// #1
 d98:	str	x11, [sp, #64]
 d9c:	stp	w9, w8, [sp, #72]
 da0:	ldp	x12, x13, [sp, #48]
 da4:	str	x30, [sp]
 da8:	ldp	x8, x9, [sp, #64]
 dac:	stp	x12, x13, [sp, #16]
 db0:	stp	x8, x9, [sp, #32]
 db4:	str	q0, [sp, #80]
 db8:	str	q1, [sp, #96]
 dbc:	str	q2, [sp, #112]
 dc0:	str	q3, [sp, #128]
 dc4:	str	q4, [sp, #144]
 dc8:	str	q5, [sp, #160]
 dcc:	str	q6, [sp, #176]
 dd0:	str	q7, [sp, #192]
 dd4:	stp	x1, x2, [sp, #216]
 dd8:	add	x2, sp, #0x10
 ddc:	mov	x1, x10
 de0:	stp	x3, x4, [sp, #232]
 de4:	stp	x5, x6, [sp, #248]
 de8:	str	x7, [sp, #264]
 dec:	bl	cb8 <_ZN11__sanitizerL16SharedPrintfCodeEbPKcSt9__va_list>
 df0:	ldr	x30, [sp]
 df4:	add	sp, sp, #0x110
 df8:	ret
 dfc:	nop

0000000000000e00 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>:
 e00:	stp	x19, x30, [sp, #-256]!
 e04:	mov	x19, x0
 e08:	str	q0, [sp, #80]
 e0c:	str	q1, [sp, #96]
 e10:	ldr	x8, [x0, #16]
 e14:	str	q2, [sp, #112]
 e18:	ldr	x0, [x0, #24]
 e1c:	str	q3, [sp, #128]
 e20:	str	q4, [sp, #144]
 e24:	cmp	x0, x8
 e28:	str	q5, [sp, #160]
 e2c:	str	q6, [sp, #176]
 e30:	str	q7, [sp, #192]
 e34:	stp	x2, x3, [sp, #208]
 e38:	stp	x4, x5, [sp, #224]
 e3c:	stp	x6, x7, [sp, #240]
 e40:	b.cs	eb4 <_ZN11__sanitizer20InternalScopedString6appendEPKcz+0xb4>  // b.hs, b.nlast
 e44:	mov	w4, #0xffffff80            	// #-128
 e48:	mov	w3, #0xffffffd0            	// #-48
 e4c:	stp	w3, w4, [sp, #72]
 e50:	add	x5, sp, #0xd0
 e54:	ldr	x4, [x19]
 e58:	add	x2, sp, #0x100
 e5c:	stp	x2, x2, [sp, #48]
 e60:	mov	x2, x1
 e64:	sub	w1, w8, w0
 e68:	str	x5, [sp, #64]
 e6c:	add	x0, x4, x0
 e70:	ldp	x6, x7, [sp, #48]
 e74:	add	x3, sp, #0x10
 e78:	ldp	x4, x5, [sp, #64]
 e7c:	stp	x6, x7, [sp, #16]
 e80:	stp	x4, x5, [sp, #32]
 e84:	bl	378 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list>
 e88:	ldr	x1, [x19]
 e8c:	ldr	x0, [x19, #24]
 e90:	add	x0, x1, x0
 e94:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 e98:	ldp	x4, x3, [x19, #16]
 e9c:	add	x3, x0, x3
 ea0:	str	x3, [x19, #24]
 ea4:	cmp	x3, x4
 ea8:	b.cs	ed4 <_ZN11__sanitizer20InternalScopedString6appendEPKcz+0xd4>  // b.hs, b.nlast
 eac:	ldp	x19, x30, [sp], #256
 eb0:	ret
 eb4:	mov	x3, x0
 eb8:	adrp	x2, 0 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 ebc:	adrp	x0, 0 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 ec0:	mov	x4, x8
 ec4:	add	x2, x2, #0x0
 ec8:	add	x0, x0, #0x0
 ecc:	mov	w1, #0x15c                 	// #348
 ed0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 ed4:	adrp	x2, 0 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 ed8:	adrp	x0, 0 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 edc:	add	x2, x2, #0x0
 ee0:	add	x0, x0, #0x0
 ee4:	mov	w1, #0x162                 	// #354
 ee8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

sanitizer_procmaps_bsd.o:     file format elf64-littleaarch64


sanitizer_procmaps_common.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL14TranslateDigitEc>:
   0:	and	w0, w0, #0xff
   4:	sub	w1, w0, #0x30
   8:	and	w2, w1, #0xff
   c:	cmp	w2, #0x9
  10:	b.ls	44 <_ZN11__sanitizerL14TranslateDigitEc+0x44>  // b.plast
  14:	sub	w1, w0, #0x61
  18:	and	w1, w1, #0xff
  1c:	cmp	w1, #0x5
  20:	b.ls	3c <_ZN11__sanitizerL14TranslateDigitEc+0x3c>  // b.plast
  24:	sub	w1, w0, #0x41
  28:	sub	w0, w0, #0x37
  2c:	and	w1, w1, #0xff
  30:	cmp	w1, #0x6
  34:	csinv	w0, w0, wzr, cc  // cc = lo, ul, last
  38:	ret
  3c:	sub	w0, w0, #0x57
  40:	ret
  44:	mov	w0, w1
  48:	ret
  4c:	nop

0000000000000050 <_ZN11__sanitizerL11ParseNumberEPPKci>:
  50:	sxtw	x7, w1
  54:	mov	x6, x0
  58:	mov	x5, x7
  5c:	mov	x4, #0x0                   	// #0
  60:	str	x30, [sp, #-16]!
  64:	ldr	x3, [x0]
  68:	b	78 <_ZN11__sanitizerL11ParseNumberEPPKci+0x28>
  6c:	sxtw	x0, w0
  70:	str	x3, [x6]
  74:	madd	x4, x7, x4, x0
  78:	ldrb	w0, [x3], #1
  7c:	bl	0 <_ZN11__sanitizerL14TranslateDigitEc>
  80:	cmp	w5, w0
  84:	b.hi	6c <_ZN11__sanitizerL11ParseNumberEPPKci+0x1c>  // b.pmore
  88:	mov	x0, x4
  8c:	ldr	x30, [sp], #16
  90:	ret
  94:	nop

0000000000000098 <_ZN11__sanitizer9IsDecimalEc>:
  98:	str	x30, [sp, #-16]!
  9c:	bl	0 <_ZN11__sanitizerL14TranslateDigitEc>
  a0:	cmp	w0, #0x9
  a4:	cset	w0, ls  // ls = plast
  a8:	ldr	x30, [sp], #16
  ac:	ret

00000000000000b0 <_ZN11__sanitizer12ParseDecimalEPPKc>:
  b0:	mov	w1, #0xa                   	// #10
  b4:	b	50 <_ZN11__sanitizerL11ParseNumberEPPKci>

00000000000000b8 <_ZN11__sanitizer5IsHexEc>:
  b8:	str	x30, [sp, #-16]!
  bc:	bl	0 <_ZN11__sanitizerL14TranslateDigitEc>
  c0:	cmp	w0, #0xf
  c4:	cset	w0, ls  // ls = plast
  c8:	ldr	x30, [sp], #16
  cc:	ret

00000000000000d0 <_ZN11__sanitizer8ParseHexEPPKc>:
  d0:	mov	w1, #0x10                  	// #16
  d4:	b	50 <_ZN11__sanitizerL11ParseNumberEPPKci>

00000000000000d8 <_ZN11__sanitizer19MemoryMappedSegment16AddAddressRangesEPNS_12LoadedModuleE>:
  d8:	mov	x2, x0
  dc:	mov	x0, x1
  e0:	ldr	x1, [x2, #72]
  e4:	cbnz	x1, 104 <_ZN11__sanitizer19MemoryMappedSegment16AddAddressRangesEPNS_12LoadedModuleE+0x2c>
  e8:	ldr	x1, [x2]
  ec:	mov	x5, #0x0                   	// #0
  f0:	ldr	x3, [x2, #40]
  f4:	ldr	x2, [x2, #8]
  f8:	ubfx	w4, w3, #1, #1
  fc:	ubfx	w3, w3, #2, #1
 100:	b	0 <_ZN11__sanitizer12LoadedModule15addAddressRangeEmmbbPKc>
 104:	str	x30, [sp, #-16]!
 108:	adrp	x2, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 10c:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 110:	add	x2, x2, #0x0
 114:	add	x0, x0, #0x0
 118:	mov	x4, #0x0                   	// #0
 11c:	mov	x3, #0x0                   	// #0
 120:	mov	w1, #0x43                  	// #67
 124:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000128 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>:
 128:	adrp	x2, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 12c:	mov	x1, x0
 130:	ldr	x0, [x0]
 134:	ldr	x2, [x2]
 138:	cmp	x0, x2
 13c:	b.eq	148 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev+0x20>  // b.none
 140:	ldr	x1, [x1, #8]
 144:	b	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 148:	ret
 14c:	nop

0000000000000150 <_ZN11__sanitizer19MemoryMappingLayout5ResetEv>:
 150:	ldr	x1, [x0]
 154:	str	x1, [x0, #24]
 158:	ret
 15c:	nop

0000000000000160 <_ZN11__sanitizer19MemoryMappingLayout19CacheMemoryMappingsEv>:
 160:	stp	x19, x30, [sp, #-48]!
 164:	add	x0, sp, #0x18
 168:	bl	0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 16c:	ldr	x0, [sp, #32]
 170:	cbnz	x0, 17c <_ZN11__sanitizer19MemoryMappingLayout19CacheMemoryMappingsEv+0x1c>
 174:	ldp	x19, x30, [sp], #48
 178:	ret
 17c:	adrp	x19, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 180:	add	x0, x19, #0x0
 184:	add	x0, x0, #0x18
 188:	mov	w2, #0x1                   	// #1
 18c:	ldxrb	w1, [x0]
 190:	stxrb	w3, w2, [x0]
 194:	cbnz	w3, 18c <_ZN11__sanitizer19MemoryMappingLayout19CacheMemoryMappingsEv+0x2c>
 198:	dmb	ish
 19c:	tst	w1, #0xff
 1a0:	b.eq	1a8 <_ZN11__sanitizer19MemoryMappingLayout19CacheMemoryMappingsEv+0x48>  // b.none
 1a4:	bl	0 <_ZN11__sanitizerL14TranslateDigitEc>
 1a8:	add	x0, x19, #0x0
 1ac:	ldr	x1, [x0, #8]
 1b0:	cbnz	x1, 1d8 <_ZN11__sanitizer19MemoryMappingLayout19CacheMemoryMappingsEv+0x78>
 1b4:	add	x19, x19, #0x0
 1b8:	ldp	x2, x3, [sp, #24]
 1bc:	ldr	x0, [sp, #40]
 1c0:	stp	x2, x3, [x19]
 1c4:	str	x0, [x19, #16]
 1c8:	dmb	ish
 1cc:	strb	wzr, [x19, #24]
 1d0:	ldp	x19, x30, [sp], #48
 1d4:	ret
 1d8:	ldr	x0, [x19]
 1dc:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 1e0:	b	1b4 <_ZN11__sanitizer19MemoryMappingLayout19CacheMemoryMappingsEv+0x54>
 1e4:	nop

00000000000001e8 <_ZN11__sanitizer19MemoryMappingLayout13LoadFromCacheEv>:
 1e8:	stp	x19, x20, [sp, #-32]!
 1ec:	adrp	x19, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 1f0:	add	x1, x19, #0x0
 1f4:	mov	x20, x0
 1f8:	add	x0, x1, #0x18
 1fc:	mov	w2, #0x1                   	// #1
 200:	str	x30, [sp, #16]
 204:	ldxrb	w1, [x0]
 208:	stxrb	w3, w2, [x0]
 20c:	cbnz	w3, 204 <_ZN11__sanitizer19MemoryMappingLayout13LoadFromCacheEv+0x1c>
 210:	dmb	ish
 214:	tst	w1, #0xff
 218:	b.eq	220 <_ZN11__sanitizer19MemoryMappingLayout13LoadFromCacheEv+0x38>  // b.none
 21c:	bl	0 <_ZN11__sanitizerL14TranslateDigitEc>
 220:	ldr	x1, [x19]
 224:	add	x0, x19, #0x0
 228:	cbz	x1, 23c <_ZN11__sanitizer19MemoryMappingLayout13LoadFromCacheEv+0x54>
 22c:	ldp	x2, x3, [x0]
 230:	stp	x2, x3, [x20]
 234:	ldr	x0, [x0, #16]
 238:	str	x0, [x20, #16]
 23c:	dmb	ish
 240:	add	x19, x19, #0x0
 244:	strb	wzr, [x19, #24]
 248:	ldr	x30, [sp, #16]
 24c:	ldp	x19, x20, [sp], #32
 250:	ret
 254:	nop

0000000000000258 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb>:
 258:	stp	x19, x30, [sp, #-16]!
 25c:	tst	w1, #0xff
 260:	mov	x19, x0
 264:	b.ne	28c <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0x34>  // b.any
 268:	bl	0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 26c:	ldr	x0, [x19, #8]
 270:	cbz	x0, 2b0 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0x58>
 274:	ldr	x0, [x19, #16]
 278:	cbz	x0, 2d0 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0x78>
 27c:	ldr	x0, [x19]
 280:	str	x0, [x19, #24]
 284:	ldp	x19, x30, [sp], #16
 288:	ret
 28c:	bl	160 <_ZN11__sanitizer19MemoryMappingLayout19CacheMemoryMappingsEv>
 290:	mov	x0, x19
 294:	bl	0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 298:	ldr	x0, [x19, #8]
 29c:	cbnz	x0, 274 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0x1c>
 2a0:	mov	x0, x19
 2a4:	bl	1e8 <_ZN11__sanitizer19MemoryMappingLayout13LoadFromCacheEv>
 2a8:	ldr	x0, [x19, #8]
 2ac:	cbnz	x0, 274 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0x1c>
 2b0:	adrp	x2, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 2b4:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 2b8:	add	x2, x2, #0x0
 2bc:	add	x0, x0, #0x0
 2c0:	mov	x4, #0x0                   	// #0
 2c4:	mov	x3, #0x0                   	// #0
 2c8:	mov	w1, #0x51                  	// #81
 2cc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2d0:	adrp	x2, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 2d4:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 2d8:	add	x2, x2, #0x0
 2dc:	add	x0, x0, #0x0
 2e0:	mov	x4, #0x0                   	// #0
 2e4:	mov	x3, #0x0                   	// #0
 2e8:	mov	w1, #0x52                  	// #82
 2ec:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000002f0 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>:
 2f0:	stp	x19, x20, [sp, #-272]!
 2f4:	mov	x19, x1
 2f8:	stp	x21, x22, [sp, #16]
 2fc:	mov	x21, x0
 300:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 304:	stp	x23, x24, [sp, #32]
 308:	ldr	x20, [x0]
 30c:	stp	x25, x26, [sp, #48]
 310:	stp	x27, x28, [sp, #64]
 314:	ldr	x0, [x21]
 318:	str	x30, [sp, #80]
 31c:	str	x0, [x21, #24]
 320:	ldr	x0, [x20]
 324:	cbz	x0, 560 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x270>
 328:	sub	x20, x0, #0x1
 32c:	ands	x20, x20, x0
 330:	b.ne	5e4 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x2f4>  // b.any
 334:	add	x25, x0, #0xfff
 338:	neg	x0, x0
 33c:	and	x25, x25, x0
 340:	mov	w2, #0x0                   	// #0
 344:	mov	x0, x25
 348:	adrp	x1, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 34c:	add	x1, x1, #0x0
 350:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 354:	mov	x2, #0x0                   	// #0
 358:	mov	x1, #0x0                   	// #0
 35c:	mov	x24, x0
 360:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 364:	mov	x1, #0x0                   	// #0
 368:	mov	x0, #0x0                   	// #0
 36c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 370:	cmp	x25, #0xfff
 374:	b.ls	56c <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x27c>  // b.plast
 378:	mov	x2, #0x1000                	// #4096
 37c:	mov	w1, #0x0                   	// #0
 380:	mov	x0, x24
 384:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 388:	strb	wzr, [x24]
 38c:	mov	x0, #0x1000                	// #4096
 390:	add	x22, sp, #0x78
 394:	add	x23, sp, #0xc0
 398:	mov	x1, x23
 39c:	add	x27, x22, #0x1c
 3a0:	stp	x24, x0, [sp, #216]
 3a4:	mov	x0, x21
 3a8:	str	xzr, [sp, #264]
 3ac:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
 3b0:	tst	w0, #0xff
 3b4:	b.eq	47c <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x18c>  // b.none
 3b8:	ldr	x28, [sp, #216]
 3bc:	ldrb	w0, [x28]
 3c0:	cbz	w0, 464 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x174>
 3c4:	ldr	x3, [sp, #192]
 3c8:	cmp	x20, #0x0
 3cc:	ldr	x0, [sp, #208]
 3d0:	csel	x3, x3, xzr, ne  // ne = any
 3d4:	mov	x2, #0x10                  	// #16
 3d8:	mov	w1, #0x0                   	// #0
 3dc:	sub	x26, x3, x0
 3e0:	mov	x0, x27
 3e4:	stp	xzr, xzr, [sp, #120]
 3e8:	str	xzr, [sp, #136]
 3ec:	str	wzr, [sp, #144]
 3f0:	strb	wzr, [sp, #164]
 3f4:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 3f8:	mov	x2, x26
 3fc:	mov	x1, x28
 400:	mov	x0, x22
 404:	stp	xzr, xzr, [sp, #168]
 408:	str	xzr, [sp, #184]
 40c:	bl	0 <_ZN11__sanitizer12LoadedModule3setEPKcm>
 410:	mov	x0, x23
 414:	mov	x1, x22
 418:	bl	d8 <_ZN11__sanitizer19MemoryMappedSegment16AddAddressRangesEPNS_12LoadedModuleE>
 41c:	ldp	x4, x3, [x19, #8]
 420:	mov	x0, #0xe38f                	// #58255
 424:	movk	x0, #0x8e38, lsl #16
 428:	movk	x0, #0x38e3, lsl #32
 42c:	movk	x0, #0xe38e, lsl #48
 430:	umulh	x4, x4, x0
 434:	lsr	x4, x4, #6
 438:	cmp	x3, x4
 43c:	b.hi	5f4 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x304>  // b.pmore
 440:	add	x1, x3, #0x1
 444:	b.eq	4a4 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x1b4>  // b.none
 448:	ldr	x5, [x19]
 44c:	add	x3, x3, x3, lsl #3
 450:	str	x1, [x19, #16]
 454:	mov	x2, #0x48                  	// #72
 458:	add	x0, x5, x3, lsl #3
 45c:	mov	x1, x22
 460:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 464:	mov	x1, x23
 468:	mov	x0, x21
 46c:	add	x20, x20, #0x1
 470:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
 474:	tst	w0, #0xff
 478:	b.ne	3b8 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0xc8>  // b.any
 47c:	mov	x1, x25
 480:	mov	x0, x24
 484:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 488:	ldp	x21, x22, [sp, #16]
 48c:	ldp	x23, x24, [sp, #32]
 490:	ldp	x25, x26, [sp, #48]
 494:	ldp	x27, x28, [sp, #64]
 498:	ldr	x30, [sp, #80]
 49c:	ldp	x19, x20, [sp], #272
 4a0:	ret
 4a4:	tst	x1, x3
 4a8:	b.eq	4e4 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x1f4>  // b.none
 4ac:	clz	x2, x1
 4b0:	mov	w0, #0x3f                  	// #63
 4b4:	sub	w0, w0, w2
 4b8:	mov	x2, #0x1                   	// #1
 4bc:	add	w4, w0, #0x1
 4c0:	lsl	x4, x2, x4
 4c4:	cmp	x1, x4
 4c8:	b.cs	60c <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x31c>  // b.hs, b.nlast
 4cc:	lsl	x0, x2, x0
 4d0:	cmp	x1, x0
 4d4:	b.ls	64c <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x35c>  // b.plast
 4d8:	cmp	x3, x4
 4dc:	b.hi	634 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x344>  // b.pmore
 4e0:	mov	x1, x4
 4e4:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 4e8:	add	x1, x1, x1, lsl #3
 4ec:	ldr	x2, [x0]
 4f0:	lsl	x1, x1, #3
 4f4:	ldr	x0, [x2]
 4f8:	cbz	x0, 5d0 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x2e0>
 4fc:	sub	x4, x0, #0x1
 500:	tst	x0, x4
 504:	b.ne	5e4 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x2f4>  // b.any
 508:	add	x1, x1, x4
 50c:	neg	x0, x0
 510:	and	x4, x1, x0
 514:	mov	w2, #0x0                   	// #0
 518:	mov	x0, x4
 51c:	adrp	x1, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 520:	add	x1, x1, #0x0
 524:	str	x4, [sp, #104]
 528:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 52c:	str	x0, [sp, #96]
 530:	ldr	x2, [x19, #16]
 534:	ldr	x1, [x19]
 538:	add	x2, x2, x2, lsl #3
 53c:	lsl	x2, x2, #3
 540:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 544:	ldp	x0, x1, [x19]
 548:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 54c:	ldr	x3, [x19, #16]
 550:	ldp	x5, x4, [sp, #96]
 554:	add	x1, x3, #0x1
 558:	stp	x5, x4, [x19]
 55c:	b	44c <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x15c>
 560:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 564:	str	x0, [x20]
 568:	b	328 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x38>
 56c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 570:	ldr	x22, [x0]
 574:	ldr	x0, [x22]
 578:	cbz	x0, 628 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x338>
 57c:	sub	x1, x0, #0x1
 580:	tst	x1, x0
 584:	b.ne	5e4 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x2f4>  // b.any
 588:	add	x22, x0, #0xfff
 58c:	neg	x0, x0
 590:	and	x22, x22, x0
 594:	mov	w2, #0x0                   	// #0
 598:	mov	x0, x22
 59c:	adrp	x1, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 5a0:	add	x1, x1, #0x0
 5a4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 5a8:	mov	x2, #0x0                   	// #0
 5ac:	mov	x23, x0
 5b0:	mov	x1, x24
 5b4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 5b8:	mov	x1, x25
 5bc:	mov	x0, x24
 5c0:	mov	x25, x22
 5c4:	mov	x24, x23
 5c8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 5cc:	b	378 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x88>
 5d0:	stp	x1, x2, [sp, #96]
 5d4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 5d8:	ldp	x1, x2, [sp, #96]
 5dc:	str	x0, [x2]
 5e0:	b	4fc <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x20c>
 5e4:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 5e8:	add	x0, x0, #0x0
 5ec:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 5f0:	bl	0 <_ZN11__sanitizer3DieEv>
 5f4:	adrp	x2, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 5f8:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 5fc:	add	x2, x2, #0x0
 600:	add	x0, x0, #0x0
 604:	mov	w1, #0x1be                 	// #446
 608:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 60c:	mov	x3, x1
 610:	adrp	x2, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 614:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 618:	add	x2, x2, #0x0
 61c:	add	x0, x0, #0x0
 620:	mov	w1, #0x17b                 	// #379
 624:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 628:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 62c:	str	x0, [x22]
 630:	b	57c <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x28c>
 634:	adrp	x2, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 638:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 63c:	add	x2, x2, #0x0
 640:	add	x0, x0, #0x0
 644:	mov	w1, #0x1fd                 	// #509
 648:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 64c:	mov	x4, x0
 650:	mov	x3, x1
 654:	adrp	x2, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 658:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 65c:	add	x2, x2, #0x0
 660:	add	x0, x0, #0x0
 664:	mov	w1, #0x17c                 	// #380
 668:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 66c:	nop

0000000000000670 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m>:
 670:	stp	x19, x20, [sp, #-96]!
 674:	mov	x5, #0x0                   	// #0
 678:	mov	x4, #0x4000000             	// #67108864
 67c:	add	x3, sp, #0x50
 680:	stp	x21, x22, [sp, #16]
 684:	mov	x22, x0
 688:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 68c:	add	x0, x0, #0x0
 690:	stp	x23, x24, [sp, #32]
 694:	mov	x23, x1
 698:	mov	x24, x2
 69c:	add	x1, sp, #0x40
 6a0:	add	x2, sp, #0x48
 6a4:	str	x30, [sp, #56]
 6a8:	stp	xzr, xzr, [sp, #64]
 6ac:	str	xzr, [sp, #80]
 6b0:	bl	0 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>
 6b4:	tst	w0, #0xff
 6b8:	b.eq	758 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0xe8>  // b.none
 6bc:	ldr	x3, [sp, #64]
 6c0:	str	x3, [sp, #88]
 6c4:	ldr	x0, [sp, #80]
 6c8:	add	x0, x3, x0
 6cc:	cmp	x3, x0
 6d0:	b.cs	80c <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x19c>  // b.hs, b.nlast
 6d4:	adrp	x21, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 6d8:	add	x21, x21, #0x0
 6dc:	str	x25, [sp, #48]
 6e0:	add	x25, sp, #0x58
 6e4:	mov	w19, #0x0                   	// #0
 6e8:	mov	x20, #0x0                   	// #0
 6ec:	nop
 6f0:	ldrb	w0, [x3]
 6f4:	bl	0 <_ZN11__sanitizerL14TranslateDigitEc>
 6f8:	cmp	w0, #0xf
 6fc:	b.ls	7b4 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x144>  // b.plast
 700:	mov	x0, x3
 704:	mov	x1, x21
 708:	mov	x2, #0x4                   	// #4
 70c:	bl	0 <_ZN11__sanitizer16internal_strncmpEPKcS1_m>
 710:	cbz	w0, 76c <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0xfc>
 714:	ldr	x4, [sp, #88]
 718:	add	x4, x4, #0x1
 71c:	nop
 720:	mov	x3, x4
 724:	str	x3, [sp, #88]
 728:	add	x4, x4, #0x1
 72c:	ldurb	w0, [x3, #-1]
 730:	cmp	w0, #0xa
 734:	b.ne	720 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0xb0>  // b.any
 738:	ldr	x0, [sp, #64]
 73c:	ldr	x1, [sp, #80]
 740:	add	x1, x0, x1
 744:	cmp	x3, x1
 748:	b.cc	6f0 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x80>  // b.lo, b.ul, b.last
 74c:	ldr	x25, [sp, #48]
 750:	ldr	x1, [sp, #72]
 754:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 758:	ldp	x21, x22, [sp, #16]
 75c:	ldp	x23, x24, [sp, #32]
 760:	ldr	x30, [sp, #56]
 764:	ldp	x19, x20, [sp], #96
 768:	ret
 76c:	ldr	x3, [sp, #88]
 770:	b	778 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x108>
 774:	str	x3, [sp, #88]
 778:	ldrb	w0, [x3], #1
 77c:	bl	0 <_ZN11__sanitizerL14TranslateDigitEc>
 780:	cmp	w0, #0x9
 784:	b.hi	774 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x104>  // b.pmore
 788:	mov	w1, #0xa                   	// #10
 78c:	mov	x0, x25
 790:	bl	50 <_ZN11__sanitizerL11ParseNumberEPPKci>
 794:	lsl	x1, x0, #10
 798:	mov	x4, x24
 79c:	mov	x3, x23
 7a0:	mov	w2, w19
 7a4:	mov	x0, x20
 7a8:	blr	x22
 7ac:	ldr	x4, [sp, #88]
 7b0:	b	718 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0xa8>
 7b4:	mov	x0, x25
 7b8:	mov	w1, #0x10                  	// #16
 7bc:	bl	50 <_ZN11__sanitizerL11ParseNumberEPPKci>
 7c0:	mov	x20, x0
 7c4:	ldr	x4, [sp, #88]
 7c8:	ldrb	w0, [x4]
 7cc:	cmp	w0, #0x2f
 7d0:	cset	w19, eq  // eq = none
 7d4:	cmp	w19, #0x0
 7d8:	ccmp	w0, #0xa, #0x0, eq  // eq = none
 7dc:	b.ls	718 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0xa8>  // b.plast
 7e0:	add	x0, x4, #0x1
 7e4:	nop
 7e8:	str	x0, [sp, #88]
 7ec:	mov	x4, x0
 7f0:	ldrb	w1, [x0], #1
 7f4:	cmp	w1, #0x2f
 7f8:	cset	w19, eq  // eq = none
 7fc:	cmp	w19, #0x0
 800:	ccmp	w1, #0xa, #0x0, eq  // eq = none
 804:	b.hi	7e8 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x178>  // b.pmore
 808:	b	718 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0xa8>
 80c:	mov	x0, x3
 810:	b	750 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0xe0>

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x20, x0
   8:	mov	w19, #0x0                   	// #0
   c:	stp	x21, x30, [sp, #16]
  10:	mov	w21, #0x1                   	// #1
  14:	nop
  18:	cmp	w19, #0x9
  1c:	b.gt	58 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x58>
  20:	ldrb	w0, [x20]
  24:	tst	w0, #0xff
  28:	b.ne	44 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x44>  // b.any
  2c:	ldxrb	w0, [x20]
  30:	stxrb	w1, w21, [x20]
  34:	cbnz	w1, 2c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x2c>
  38:	dmb	ish
  3c:	tst	w0, #0xff
  40:	b.eq	4c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x4c>  // b.none
  44:	add	w19, w19, #0x1
  48:	b	18 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x18>
  4c:	ldp	x21, x30, [sp, #16]
  50:	ldp	x19, x20, [sp], #32
  54:	ret
  58:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  5c:	b	20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>

sanitizer_procmaps_linux.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>:
   0:	stp	x19, x30, [sp, #-16]!
   4:	adrp	x1, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
   8:	mov	x19, x0
   c:	add	x3, x19, #0x10
  10:	add	x0, x1, #0x0
  14:	add	x2, x19, #0x8
  18:	mov	x1, x19
  1c:	mov	x5, #0x0                   	// #0
  20:	mov	x4, #0x4000000             	// #67108864
  24:	bl	0 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>
  28:	tst	w0, #0xff
  2c:	b.ne	38 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE+0x38>  // b.any
  30:	stp	xzr, xzr, [x19]
  34:	str	xzr, [x19, #16]
  38:	ldp	x19, x30, [sp], #16
  3c:	ret

0000000000000040 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>:
  40:	stp	x19, x20, [sp, #-64]!
  44:	mov	x19, x0
  48:	mov	x20, x1
  4c:	stp	x21, x22, [sp, #16]
  50:	ldr	x22, [x0]
  54:	ldp	x1, x0, [x0, #16]
  58:	str	x30, [sp, #56]
  5c:	add	x22, x22, x1
  60:	cmp	x0, x22
  64:	b.cc	80 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x40>  // b.lo, b.ul, b.last
  68:	mov	w22, #0x0                   	// #0
  6c:	mov	w0, w22
  70:	ldp	x21, x22, [sp, #16]
  74:	ldr	x30, [sp, #56]
  78:	ldp	x19, x20, [sp], #64
  7c:	ret
  80:	sub	x2, x22, x0
  84:	mov	w1, #0xa                   	// #10
  88:	stp	x23, x24, [sp, #32]
  8c:	add	x23, x19, #0x18
  90:	str	x25, [sp, #48]
  94:	bl	0 <_ZN11__sanitizer15internal_memchrEPKvim>
  98:	mov	x21, x0
  9c:	mov	x0, x23
  a0:	cmp	x21, #0x0
  a4:	csel	x21, x21, x22, ne  // ne = any
  a8:	bl	0 <_ZN11__sanitizer8ParseHexEPPKc>
  ac:	ldr	x1, [x19, #24]
  b0:	str	x0, [x20]
  b4:	add	x0, x1, #0x1
  b8:	str	x0, [x19, #24]
  bc:	ldrb	w22, [x1]
  c0:	cmp	x22, #0x2d
  c4:	b.ne	2f8 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x2b8>  // b.any
  c8:	mov	x0, x23
  cc:	bl	0 <_ZN11__sanitizer8ParseHexEPPKc>
  d0:	ldr	x2, [x19, #24]
  d4:	str	x0, [x20, #8]
  d8:	add	x0, x2, #0x1
  dc:	str	x0, [x19, #24]
  e0:	ldrb	w3, [x2]
  e4:	cmp	x3, #0x20
  e8:	b.ne	318 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x2d8>  // b.any
  ec:	ldrb	w0, [x2, #1]
  f0:	cmp	w0, #0x72
  f4:	ccmp	w0, w22, #0x4, ne  // ne = any
  f8:	b.ne	334 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x2f4>  // b.any
  fc:	str	xzr, [x20, #40]
 100:	add	x0, x2, #0x2
 104:	str	x0, [x19, #24]
 108:	ldrb	w0, [x2, #1]
 10c:	cmp	w0, #0x72
 110:	b.ne	11c <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0xdc>  // b.any
 114:	mov	x0, #0x1                   	// #1
 118:	str	x0, [x20, #40]
 11c:	ldrb	w0, [x2, #2]
 120:	mov	w1, #0x2d                  	// #45
 124:	cmp	w0, #0x77
 128:	ccmp	w0, w1, #0x4, ne  // ne = any
 12c:	b.ne	354 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x314>  // b.any
 130:	add	x0, x2, #0x3
 134:	str	x0, [x19, #24]
 138:	ldrb	w0, [x2, #2]
 13c:	cmp	w0, #0x77
 140:	b.ne	150 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x110>  // b.any
 144:	ldr	x0, [x20, #40]
 148:	orr	x0, x0, #0x2
 14c:	str	x0, [x20, #40]
 150:	ldrb	w0, [x2, #3]
 154:	mov	w1, #0x78                  	// #120
 158:	cmp	w0, #0x2d
 15c:	ccmp	w0, w1, #0x4, ne  // ne = any
 160:	b.ne	374 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x334>  // b.any
 164:	add	x0, x2, #0x4
 168:	str	x0, [x19, #24]
 16c:	ldrb	w0, [x2, #3]
 170:	cmp	w0, #0x78
 174:	b.eq	2b8 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x278>  // b.none
 178:	ldrb	w0, [x2, #4]
 17c:	cmp	w0, #0x73
 180:	cset	w22, eq  // eq = none
 184:	cmp	w0, #0x70
 188:	csinc	w22, w22, wzr, ne  // ne = any
 18c:	cbz	w22, 394 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x354>
 190:	add	x0, x2, #0x5
 194:	str	x0, [x19, #24]
 198:	ldrb	w0, [x2, #4]
 19c:	cmp	w0, #0x73
 1a0:	b.eq	2c8 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x288>  // b.none
 1a4:	add	x0, x2, #0x6
 1a8:	str	x0, [x19, #24]
 1ac:	ldrb	w24, [x2, #5]
 1b0:	cmp	x24, #0x20
 1b4:	b.ne	3b4 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x374>  // b.any
 1b8:	mov	x0, x23
 1bc:	bl	0 <_ZN11__sanitizer8ParseHexEPPKc>
 1c0:	str	x0, [x20, #16]
 1c4:	ldr	x0, [x19, #24]
 1c8:	add	x1, x0, #0x1
 1cc:	str	x1, [x19, #24]
 1d0:	ldrb	w25, [x0]
 1d4:	cmp	x25, #0x20
 1d8:	b.ne	3d4 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x394>  // b.any
 1dc:	mov	x0, x23
 1e0:	bl	0 <_ZN11__sanitizer8ParseHexEPPKc>
 1e4:	ldr	x0, [x19, #24]
 1e8:	add	x1, x0, #0x1
 1ec:	str	x1, [x19, #24]
 1f0:	ldrb	w24, [x0]
 1f4:	cmp	x24, #0x3a
 1f8:	b.ne	2d8 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x298>  // b.any
 1fc:	mov	x0, x23
 200:	bl	0 <_ZN11__sanitizer8ParseHexEPPKc>
 204:	ldr	x0, [x19, #24]
 208:	add	x2, x0, #0x1
 20c:	str	x2, [x19, #24]
 210:	ldrb	w3, [x0]
 214:	cmp	x3, #0x20
 218:	b.eq	22c <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x1ec>  // b.none
 21c:	b	3f4 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x3b4>
 220:	ldr	x2, [x19, #24]
 224:	add	x2, x2, #0x1
 228:	str	x2, [x19, #24]
 22c:	ldrb	w0, [x2]
 230:	bl	0 <_ZN11__sanitizer9IsDecimalEc>
 234:	tst	w0, #0xff
 238:	b.ne	220 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x1e0>  // b.any
 23c:	ldr	x1, [x19, #24]
 240:	cmp	x1, x21
 244:	b.cc	25c <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x21c>  // b.lo, b.ul, b.last
 248:	b	268 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x228>
 24c:	add	x1, x1, #0x1
 250:	str	x1, [x19, #24]
 254:	cmp	x1, x21
 258:	b.eq	268 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x228>  // b.none
 25c:	ldrb	w0, [x1]
 260:	cmp	w0, #0x20
 264:	b.eq	24c <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x20c>  // b.none
 268:	ldr	x0, [x20, #24]
 26c:	cbz	x0, 294 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x254>
 270:	ldr	x23, [x20, #32]
 274:	sub	x3, x21, x1
 278:	sub	x23, x23, #0x1
 27c:	cmp	x23, x3
 280:	csel	x23, x23, x3, ls  // ls = plast
 284:	mov	x2, x23
 288:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
 28c:	ldr	x0, [x20, #24]
 290:	strb	wzr, [x0, x23]
 294:	add	x21, x21, #0x1
 298:	mov	w0, w22
 29c:	ldp	x23, x24, [sp, #32]
 2a0:	ldr	x25, [sp, #48]
 2a4:	str	x21, [x19, #24]
 2a8:	ldp	x21, x22, [sp, #16]
 2ac:	ldr	x30, [sp, #56]
 2b0:	ldp	x19, x20, [sp], #64
 2b4:	ret
 2b8:	ldr	x0, [x20, #40]
 2bc:	orr	x0, x0, #0x4
 2c0:	str	x0, [x20, #40]
 2c4:	b	178 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x138>
 2c8:	ldr	x0, [x20, #40]
 2cc:	orr	x0, x0, #0x8
 2d0:	str	x0, [x20, #40]
 2d4:	b	1a4 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x164>
 2d8:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 2dc:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 2e0:	mov	x3, x24
 2e4:	add	x2, x2, #0x0
 2e8:	add	x0, x0, #0x0
 2ec:	mov	x4, #0x3a                  	// #58
 2f0:	mov	w1, #0x38                  	// #56
 2f4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2f8:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 2fc:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 300:	mov	x3, x22
 304:	add	x2, x2, #0x0
 308:	add	x0, x0, #0x0
 30c:	mov	x4, #0x2d                  	// #45
 310:	mov	w1, #0x28                  	// #40
 314:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 318:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 31c:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 320:	add	x2, x2, #0x0
 324:	add	x0, x0, #0x0
 328:	mov	x4, #0x20                  	// #32
 32c:	mov	w1, #0x2a                  	// #42
 330:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 334:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 338:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 33c:	add	x2, x2, #0x0
 340:	add	x0, x0, #0x0
 344:	mov	x4, #0x0                   	// #0
 348:	mov	x3, #0x0                   	// #0
 34c:	mov	w1, #0x2b                  	// #43
 350:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 354:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 358:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 35c:	add	x2, x2, #0x0
 360:	add	x0, x0, #0x0
 364:	mov	x4, #0x0                   	// #0
 368:	mov	x3, #0x0                   	// #0
 36c:	mov	w1, #0x2e                  	// #46
 370:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 374:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 378:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 37c:	add	x2, x2, #0x0
 380:	add	x0, x0, #0x0
 384:	mov	x4, #0x0                   	// #0
 388:	mov	x3, #0x0                   	// #0
 38c:	mov	w1, #0x30                  	// #48
 390:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 394:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 398:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 39c:	add	x2, x2, #0x0
 3a0:	add	x0, x0, #0x0
 3a4:	mov	x4, #0x0                   	// #0
 3a8:	mov	x3, #0x0                   	// #0
 3ac:	mov	w1, #0x32                  	// #50
 3b0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3b4:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 3b8:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 3bc:	mov	x3, x24
 3c0:	add	x2, x2, #0x0
 3c4:	add	x0, x0, #0x0
 3c8:	mov	x4, #0x20                  	// #32
 3cc:	mov	w1, #0x34                  	// #52
 3d0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3d4:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 3d8:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 3dc:	mov	x4, x24
 3e0:	mov	x3, x25
 3e4:	add	x2, x2, #0x0
 3e8:	add	x0, x0, #0x0
 3ec:	mov	w1, #0x36                  	// #54
 3f0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3f4:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 3f8:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 3fc:	mov	x4, x25
 400:	mov	w1, w24
 404:	add	x2, x2, #0x0
 408:	add	x0, x0, #0x0
 40c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

sanitizer_procmaps_mac.o:     file format elf64-littleaarch64


sanitizer_procmaps_solaris.o:     file format elf64-littleaarch64


sanitizer_rtems.o:     file format elf64-littleaarch64


sanitizer_solaris.o:     file format elf64-littleaarch64


sanitizer_stackdepot.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>:
   0:	ldr	w2, [x0]
   4:	ldr	w0, [x1]
   8:	cmp	w2, w0
   c:	cset	w0, cc  // cc = lo, ul, last
  10:	ret
  14:	nop

0000000000000018 <_ZN11__sanitizer16StackDepotHandle2idEv>:
  18:	ldr	x0, [x0]
  1c:	ldr	w0, [x0, #8]
  20:	ret
  24:	nop

0000000000000028 <_ZN11__sanitizer16StackDepotHandle9use_countEv>:
  28:	ldr	x0, [x0]
  2c:	ldr	w0, [x0, #12]
  30:	and	w0, w0, #0xfffff
  34:	ret

0000000000000038 <_ZN11__sanitizer16StackDepotHandle20inc_use_count_unsafeEv>:
  38:	ldr	x0, [x0]
  3c:	add	x0, x0, #0xc
  40:	ldxr	w1, [x0]
  44:	add	w2, w1, #0x1
  48:	stlxr	w3, w2, [x0]
  4c:	cbnz	w3, 40 <_ZN11__sanitizer16StackDepotHandle20inc_use_count_unsafeEv+0x8>
  50:	mvn	x0, x1
  54:	dmb	ish
  58:	tst	x0, #0xfffff
  5c:	b.eq	64 <_ZN11__sanitizer16StackDepotHandle20inc_use_count_unsafeEv+0x2c>  // b.none
  60:	ret
  64:	str	x30, [sp, #-16]!
  68:	adrp	x2, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
  6c:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
  70:	mov	x4, #0x100000              	// #1048576
  74:	add	x2, x2, #0x0
  78:	add	x0, x0, #0x0
  7c:	mov	x3, x4
  80:	mov	w1, #0x61                  	// #97
  84:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000088 <_ZN11__sanitizer18StackDepotGetStatsEv>:
  88:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
  8c:	add	x0, x0, #0x0
  90:	ret
  94:	nop

0000000000000098 <_ZN11__sanitizer13StackDepotGetEj>:
  98:	mov	w2, w0
  9c:	cbz	w0, 114 <_ZN11__sanitizer13StackDepotGetEj+0x7c>
  a0:	str	x30, [sp, #-16]!
  a4:	and	x3, x2, #0x7fffffff
  a8:	mov	w4, w0
  ac:	cmp	x3, w0, uxtw
  b0:	b.ne	148 <_ZN11__sanitizer13StackDepotGetEj+0xb0>  // b.any
  b4:	lsr	w3, w0, #23
  b8:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
  bc:	add	x0, x0, #0x0
  c0:	mov	x5, #0xfffff               	// #1048575
  c4:	lsl	x3, x3, #12
  c8:	add	x6, x3, #0x1, lsl #12
  cc:	cmp	x3, x5
  d0:	b.hi	160 <_ZN11__sanitizer13StackDepotGetEj+0xc8>  // b.pmore
  d4:	ldr	x1, [x0, x3, lsl #3]
  d8:	ands	x1, x1, #0xfffffffffffffffe
  dc:	b.ne	ec <_ZN11__sanitizer13StackDepotGetEj+0x54>  // b.any
  e0:	b	12c <_ZN11__sanitizer13StackDepotGetEj+0x94>
  e4:	ldr	x1, [x1]
  e8:	cbz	x1, 12c <_ZN11__sanitizer13StackDepotGetEj+0x94>
  ec:	ldr	w4, [x1, #8]
  f0:	cmp	w2, w4
  f4:	b.ne	e4 <_ZN11__sanitizer13StackDepotGetEj+0x4c>  // b.any
  f8:	ldp	w2, w3, [x1, #16]
  fc:	add	x0, x1, #0x18
 100:	mov	x1, #0x0                   	// #0
 104:	bfxil	x1, x2, #0, #32
 108:	ldr	x30, [sp], #16
 10c:	bfi	x1, x3, #32, #32
 110:	ret
 114:	mov	x1, #0x0                   	// #0
 118:	mov	w3, #0x0                   	// #0
 11c:	bfxil	x1, x2, #0, #32
 120:	mov	x0, #0x0                   	// #0
 124:	bfi	x1, x3, #32, #32
 128:	ret
 12c:	add	x3, x3, #0x1
 130:	cmp	x6, x3
 134:	b.ne	cc <_ZN11__sanitizer13StackDepotGetEj+0x34>  // b.any
 138:	mov	w3, #0x0                   	// #0
 13c:	mov	w2, #0x0                   	// #0
 140:	mov	x0, #0x0                   	// #0
 144:	b	100 <_ZN11__sanitizer13StackDepotGetEj+0x68>
 148:	adrp	x2, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 14c:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 150:	add	x2, x2, #0x0
 154:	add	x0, x0, #0x0
 158:	mov	w1, #0x8c                  	// #140
 15c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 160:	adrp	x2, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 164:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 168:	add	x2, x2, #0x0
 16c:	add	x0, x0, #0x0
 170:	mov	x4, #0x100000              	// #1048576
 174:	mov	w1, #0x91                  	// #145
 178:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 17c:	nop

0000000000000180 <_ZN11__sanitizer19StackDepotUnlockAllEv>:
 180:	adrp	x3, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 184:	add	x3, x3, #0x0
 188:	mov	w0, #0x0                   	// #0
 18c:	nop
 190:	sxtw	x2, w0
 194:	ldr	x1, [x3, x2, lsl #3]
 198:	dmb	ish
 19c:	and	x1, x1, #0xfffffffffffffffe
 1a0:	str	x1, [x3, x2, lsl #3]
 1a4:	add	w0, w0, #0x1
 1a8:	cmp	w0, #0x100, lsl #12
 1ac:	b.ne	190 <_ZN11__sanitizer19StackDepotUnlockAllEv+0x10>  // b.any
 1b0:	ret
 1b4:	nop

00000000000001b8 <_ZN11__sanitizer20StackDepotReverseMap3GetEj>:
 1b8:	ldr	x4, [x0, #16]
 1bc:	cbnz	x4, 1cc <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x14>
 1c0:	mov	x0, #0x0                   	// #0
 1c4:	mov	x1, #0x0                   	// #0
 1c8:	ret
 1cc:	mov	x5, x4
 1d0:	mov	x2, #0x0                   	// #0
 1d4:	str	x30, [sp, #-16]!
 1d8:	cmp	x5, x2
 1dc:	b.ls	210 <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x58>  // b.plast
 1e0:	add	x3, x5, x2
 1e4:	ldr	x7, [x0]
 1e8:	cmp	x4, x3, lsr #1
 1ec:	lsr	x3, x3, #1
 1f0:	b.ls	24c <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x94>  // b.plast
 1f4:	lsl	x6, x3, #4
 1f8:	ldr	w6, [x7, x6]
 1fc:	cmp	w1, w6
 200:	b.ls	244 <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x8c>  // b.plast
 204:	add	x2, x3, #0x1
 208:	cmp	x5, x2
 20c:	b.hi	1e0 <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x28>  // b.pmore
 210:	cmp	x4, x2
 214:	b.cc	234 <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x7c>  // b.lo, b.ul, b.last
 218:	ldr	x0, [x0]
 21c:	b.eq	274 <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0xbc>  // b.none
 220:	lsl	x2, x2, #4
 224:	add	x3, x0, x2
 228:	ldr	w0, [x0, x2]
 22c:	cmp	w0, w1
 230:	b.eq	264 <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0xac>  // b.none
 234:	mov	x0, #0x0                   	// #0
 238:	mov	x1, #0x0                   	// #0
 23c:	ldr	x30, [sp], #16
 240:	ret
 244:	mov	x5, x3
 248:	b	1d8 <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x20>
 24c:	adrp	x2, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 250:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 254:	add	x2, x2, #0x0
 258:	add	x0, x0, #0x0
 25c:	mov	w1, #0x1ba                 	// #442
 260:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 264:	ldr	x1, [x3, #8]
 268:	add	x0, x1, #0x18
 26c:	ldr	x1, [x1, #16]
 270:	b	23c <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x84>
 274:	adrp	x2, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 278:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 27c:	add	x2, x2, #0x0
 280:	add	x0, x0, #0x0
 284:	mov	x3, x4
 288:	mov	w1, #0x1b6                 	// #438
 28c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000290 <_ZN11__sanitizer20StackDepotReverseMapC1Ev>:
 290:	stp	x19, x20, [sp, #-128]!
 294:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
 298:	mov	x19, x0
 29c:	stp	x21, x22, [sp, #16]
 2a0:	ldr	x21, [x20]
 2a4:	stp	x23, x24, [sp, #32]
 2a8:	stp	x25, x26, [sp, #48]
 2ac:	stp	x27, x28, [sp, #64]
 2b0:	str	x30, [sp, #80]
 2b4:	stp	xzr, xzr, [x0]
 2b8:	ldr	x0, [x21]
 2bc:	str	xzr, [x19, #16]
 2c0:	cbz	x0, 4f4 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x264>
 2c4:	sub	x1, x0, #0x1
 2c8:	tst	x1, x0
 2cc:	b.ne	524 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x294>  // b.any
 2d0:	add	x21, x0, #0xf
 2d4:	neg	x0, x0
 2d8:	and	x21, x21, x0
 2dc:	mov	w2, #0x0                   	// #0
 2e0:	mov	x0, x21
 2e4:	adrp	x24, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 2e8:	add	x1, x24, #0x0
 2ec:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 2f0:	ldr	x1, [x19]
 2f4:	mov	x23, x0
 2f8:	ldr	x2, [x19, #16]
 2fc:	adrp	x22, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 300:	lsl	x2, x2, #4
 304:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 308:	ldp	x0, x1, [x19]
 30c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 310:	stp	x23, x21, [x19]
 314:	add	x0, x22, #0x0
 318:	add	x0, x0, #0x800, lsl #12
 31c:	ldr	x4, [x0, #1024]
 320:	add	x4, x4, #0x64
 324:	cmp	x4, x21, lsr #4
 328:	b.hi	474 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x1e4>  // b.pmore
 32c:	ldr	x20, [x20]
 330:	add	x22, x22, #0x0
 334:	add	x23, sp, #0x70
 338:	mov	w21, #0x0                   	// #0
 33c:	sxtw	x0, w21
 340:	ldr	x5, [x22, x0, lsl #3]
 344:	mov	x25, #0x1                   	// #1
 348:	ands	x27, x5, #0xfffffffffffffffe
 34c:	add	x26, x24, #0x0
 350:	b.eq	398 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x108>  // b.none
 354:	ldp	x4, x3, [x19, #8]
 358:	ldr	w0, [x27, #8]
 35c:	str	w0, [sp, #112]
 360:	str	x27, [sp, #120]
 364:	lsr	x4, x4, #4
 368:	cmp	x3, x4
 36c:	b.hi	4dc <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x24c>  // b.pmore
 370:	add	x28, x3, #0x1
 374:	b.eq	3d4 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x144>  // b.none
 378:	ldr	x4, [x19]
 37c:	str	x28, [x19, #16]
 380:	add	x0, x4, x3, lsl #4
 384:	mov	x1, x23
 388:	mov	x2, #0x10                  	// #16
 38c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 390:	ldr	x27, [x27]
 394:	cbnz	x27, 354 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0xc4>
 398:	add	w21, w21, #0x1
 39c:	cmp	w21, #0x100, lsl #12
 3a0:	b.ne	33c <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0xac>  // b.any
 3a4:	ldr	x0, [x19]
 3a8:	adrp	x2, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 3ac:	ldr	x1, [x19, #16]
 3b0:	add	x2, x2, #0x0
 3b4:	bl	0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 3b8:	ldp	x21, x22, [sp, #16]
 3bc:	ldp	x23, x24, [sp, #32]
 3c0:	ldp	x25, x26, [sp, #48]
 3c4:	ldp	x27, x28, [sp, #64]
 3c8:	ldr	x30, [sp, #80]
 3cc:	ldp	x19, x20, [sp], #128
 3d0:	ret
 3d4:	tst	x28, x3
 3d8:	b.eq	410 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x180>  // b.none
 3dc:	clz	x0, x28
 3e0:	mov	w1, #0x3f                  	// #63
 3e4:	sub	w0, w1, w0
 3e8:	add	w4, w0, #0x1
 3ec:	lsl	x4, x25, x4
 3f0:	cmp	x28, x4
 3f4:	b.cs	540 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x2b0>  // b.hs, b.nlast
 3f8:	lsl	x0, x25, x0
 3fc:	cmp	x28, x0
 400:	b.ls	55c <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x2cc>  // b.plast
 404:	cmp	x3, x4
 408:	b.hi	500 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x270>  // b.pmore
 40c:	mov	x28, x4
 410:	ldr	x0, [x20]
 414:	lsl	x28, x28, #4
 418:	cbz	x0, 518 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x288>
 41c:	sub	x1, x0, #0x1
 420:	tst	x0, x1
 424:	b.ne	524 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x294>  // b.any
 428:	add	x28, x28, x1
 42c:	neg	x0, x0
 430:	and	x28, x28, x0
 434:	mov	x1, x26
 438:	mov	x0, x28
 43c:	mov	w2, #0x0                   	// #0
 440:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 444:	str	x0, [sp, #104]
 448:	ldr	x1, [x19]
 44c:	ldr	x2, [x19, #16]
 450:	lsl	x2, x2, #4
 454:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 458:	ldp	x0, x1, [x19]
 45c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 460:	ldr	x3, [x19, #16]
 464:	ldr	x4, [sp, #104]
 468:	stp	x4, x28, [x19]
 46c:	add	x28, x3, #0x1
 470:	b	37c <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0xec>
 474:	ldr	x3, [x19, #16]
 478:	cmp	x4, x3
 47c:	b.cc	500 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x270>  // b.lo, b.ul, b.last
 480:	ldr	x23, [x20]
 484:	lsl	x21, x4, #4
 488:	ldr	x0, [x23]
 48c:	cbz	x0, 534 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x2a4>
 490:	sub	x1, x0, #0x1
 494:	tst	x1, x0
 498:	b.ne	524 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x294>  // b.any
 49c:	add	x21, x21, x1
 4a0:	neg	x0, x0
 4a4:	and	x21, x21, x0
 4a8:	add	x1, x24, #0x0
 4ac:	mov	w2, #0x0                   	// #0
 4b0:	mov	x0, x21
 4b4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 4b8:	mov	x23, x0
 4bc:	ldr	x1, [x19]
 4c0:	ldr	x2, [x19, #16]
 4c4:	lsl	x2, x2, #4
 4c8:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 4cc:	ldp	x0, x1, [x19]
 4d0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 4d4:	stp	x23, x21, [x19]
 4d8:	b	32c <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x9c>
 4dc:	adrp	x2, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 4e0:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 4e4:	add	x2, x2, #0x0
 4e8:	add	x0, x0, #0x0
 4ec:	mov	w1, #0x1be                 	// #446
 4f0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 4f4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 4f8:	str	x0, [x21]
 4fc:	b	2c4 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x34>
 500:	adrp	x2, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 504:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 508:	add	x2, x2, #0x0
 50c:	add	x0, x0, #0x0
 510:	mov	w1, #0x1fd                 	// #509
 514:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 518:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 51c:	str	x0, [x20]
 520:	b	41c <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x18c>
 524:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 528:	add	x0, x0, #0x0
 52c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 530:	bl	0 <_ZN11__sanitizer3DieEv>
 534:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 538:	str	x0, [x23]
 53c:	b	490 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x200>
 540:	adrp	x2, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 544:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 548:	mov	x3, x28
 54c:	add	x2, x2, #0x0
 550:	add	x0, x0, #0x0
 554:	mov	w1, #0x17b                 	// #379
 558:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 55c:	mov	x4, x0
 560:	adrp	x2, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 564:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 568:	mov	x3, x28
 56c:	add	x2, x2, #0x0
 570:	add	x0, x0, #0x0
 574:	mov	w1, #0x17c                 	// #380
 578:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 57c:	nop

0000000000000580 <_ZN11__sanitizer17StackDepotLockAllEv>:
 580:	stp	x19, x20, [sp, #-32]!
 584:	adrp	x19, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 588:	add	x19, x19, #0x0
 58c:	add	x20, x19, #0x800, lsl #12
 590:	str	x30, [sp, #16]
 594:	nop
 598:	mov	x0, x19
 59c:	add	x19, x19, #0x8
 5a0:	bl	0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 5a4:	cmp	x19, x20
 5a8:	b.ne	598 <_ZN11__sanitizer17StackDepotLockAllEv+0x18>  // b.any
 5ac:	ldr	x30, [sp, #16]
 5b0:	ldp	x19, x20, [sp], #32
 5b4:	ret

00000000000005b8 <_ZN11__sanitizer13StackDepotPutENS_10StackTraceE>:
 5b8:	str	x30, [sp, #-16]!
 5bc:	mov	x2, x1
 5c0:	mov	x3, #0x0                   	// #0
 5c4:	mov	x1, x0
 5c8:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 5cc:	add	x0, x0, #0x0
 5d0:	bl	0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 5d4:	cbz	x0, 5e4 <_ZN11__sanitizer13StackDepotPutENS_10StackTraceE+0x2c>
 5d8:	ldr	w0, [x0, #8]
 5dc:	ldr	x30, [sp], #16
 5e0:	ret
 5e4:	mov	w0, #0x0                   	// #0
 5e8:	ldr	x30, [sp], #16
 5ec:	ret

00000000000005f0 <_ZN11__sanitizer24StackDepotPut_WithHandleENS_10StackTraceE>:
 5f0:	mov	x2, x1
 5f4:	mov	x3, #0x0                   	// #0
 5f8:	mov	x1, x0
 5fc:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 600:	add	x0, x0, #0x0
 604:	b	0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x20, x0
   8:	mov	w19, #0x0                   	// #0
   c:	stp	x21, x30, [sp, #16]
  10:	mov	w21, #0x1                   	// #1
  14:	nop
  18:	cmp	w19, #0x9
  1c:	b.gt	58 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x58>
  20:	ldrb	w0, [x20]
  24:	tst	w0, #0xff
  28:	b.ne	44 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x44>  // b.any
  2c:	ldxrb	w0, [x20]
  30:	stxrb	w1, w21, [x20]
  34:	cbnz	w1, 2c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x2c>
  38:	dmb	ish
  3c:	tst	w0, #0xff
  40:	b.eq	4c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x4c>  // b.none
  44:	add	w19, w19, #0x1
  48:	b	18 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x18>
  4c:	ldp	x21, x30, [sp, #16]
  50:	ldp	x19, x20, [sp], #32
  54:	ret
  58:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  5c:	b	20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>

Disassembly of section .text._ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_:

0000000000000000 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_>:
   0:	cmp	x1, #0x1
   4:	b.ls	1d0 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x1d0>  // b.plast
   8:	stp	x19, x20, [sp, #-112]!
   c:	mov	x20, x0
  10:	stp	x23, x24, [sp, #32]
  14:	mov	x23, x2
  18:	stp	x27, x28, [sp, #64]
  1c:	mov	x27, x1
  20:	stp	x21, x22, [sp, #16]
  24:	mov	x22, #0x1                   	// #1
  28:	stp	x25, x26, [sp, #48]
  2c:	str	x30, [sp, #80]
  30:	mov	x19, x22
  34:	nop
  38:	sub	x0, x19, #0x1
  3c:	mov	x21, x19
  40:	lsr	x19, x0, #1
  44:	lsl	x21, x21, #4
  48:	add	x25, x20, x21
  4c:	lsl	x26, x19, #4
  50:	mov	x1, x25
  54:	add	x24, x20, x26
  58:	mov	x0, x24
  5c:	blr	x23
  60:	tst	w0, #0xff
  64:	b.eq	84 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x84>  // b.none
  68:	ldp	x0, x1, [x24]
  6c:	ldr	w3, [x20, x21]
  70:	ldr	x2, [x25, #8]
  74:	stp	x0, x1, [x25]
  78:	str	w3, [x20, x26]
  7c:	str	x2, [x24, #8]
  80:	cbnz	x19, 38 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x38>
  84:	add	x0, x22, #0x1
  88:	cmp	x27, x0
  8c:	b.eq	98 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x98>  // b.none
  90:	mov	x22, x0
  94:	b	30 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x30>
  98:	add	x0, x20, x27, lsl #4
  9c:	str	x0, [sp, #104]
  a0:	ldr	x4, [sp, #104]
  a4:	mov	x21, #0x0                   	// #0
  a8:	ldr	w1, [x20]
  ac:	lsl	x19, x21, #1
  b0:	ldr	x0, [x20, #8]
  b4:	add	x26, x19, #0x1
  b8:	ldp	x2, x3, [x4, #-16]
  bc:	stp	x2, x3, [x20]
  c0:	add	x28, x21, #0x1
  c4:	stur	w1, [x4, #-16]
  c8:	add	x19, x19, #0x2
  cc:	stur	x0, [x4, #-8]
  d0:	cmp	x26, x22
  d4:	b.cs	14c <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x14c>  // b.hs, b.nlast
  d8:	lsl	x24, x26, #4
  dc:	lsl	x25, x21, #4
  e0:	add	x2, x20, x24
  e4:	add	x27, x20, x25
  e8:	mov	x1, x2
  ec:	mov	x0, x27
  f0:	str	x2, [sp, #96]
  f4:	blr	x23
  f8:	tst	w0, #0xff
  fc:	b.eq	14c <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x14c>  // b.none
 100:	cmp	x19, x22
 104:	ldr	x2, [sp, #96]
 108:	b.cc	1d4 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x1d4>  // b.lo, b.ul, b.last
 10c:	cmp	x26, x21
 110:	b.eq	1a0 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x1a0>  // b.none
 114:	ldp	x0, x1, [x2]
 118:	mov	x19, x26
 11c:	ldr	w5, [x27]
 120:	ldr	x4, [x27, #8]
 124:	stp	x0, x1, [x27]
 128:	str	w5, [x20, x24]
 12c:	str	x4, [x2, #8]
 130:	mov	x21, x19
 134:	add	x28, x21, #0x1
 138:	lsl	x19, x21, #1
 13c:	add	x26, x19, #0x1
 140:	add	x19, x19, #0x2
 144:	cmp	x26, x22
 148:	b.cc	d8 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0xd8>  // b.lo, b.ul, b.last
 14c:	cmp	x19, x22
 150:	b.cs	1a0 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x1a0>  // b.hs, b.nlast
 154:	lsl	x25, x21, #4
 158:	add	x1, x20, x28, lsl #5
 15c:	add	x0, x20, x25
 160:	blr	x23
 164:	tst	w0, #0xff
 168:	b.eq	1a0 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x1a0>  // b.none
 16c:	cmp	x19, x21
 170:	b.eq	1a0 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x1a0>  // b.none
 174:	lsl	x0, x19, #4
 178:	add	x4, x20, x25
 17c:	add	x1, x20, x0
 180:	ldr	w6, [x20, x25]
 184:	cmp	x19, x22
 188:	ldr	x5, [x4, #8]
 18c:	ldp	x2, x3, [x1]
 190:	stp	x2, x3, [x4]
 194:	str	w6, [x20, x0]
 198:	str	x5, [x1, #8]
 19c:	b.cc	130 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x130>  // b.lo, b.ul, b.last
 1a0:	ldr	x0, [sp, #104]
 1a4:	subs	x22, x22, #0x1
 1a8:	sub	x0, x0, #0x10
 1ac:	str	x0, [sp, #104]
 1b0:	b.ne	a0 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0xa0>  // b.any
 1b4:	ldp	x21, x22, [sp, #16]
 1b8:	ldp	x23, x24, [sp, #32]
 1bc:	ldp	x25, x26, [sp, #48]
 1c0:	ldp	x27, x28, [sp, #64]
 1c4:	ldr	x30, [sp, #80]
 1c8:	ldp	x19, x20, [sp], #112
 1cc:	ret
 1d0:	ret
 1d4:	add	x1, x20, x28, lsl #5
 1d8:	mov	x0, x2
 1dc:	blr	x23
 1e0:	tst	w0, #0xff
 1e4:	csel	x19, x19, x26, ne  // ne = any
 1e8:	b	16c <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x16c>

Disassembly of section .text._ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4findEPS1_NS_10StackTraceEj:

0000000000000000 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4findEPS1_NS_10StackTraceEj>:
   0:	cbz	x0, 64 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4findEPS1_NS_10StackTraceEj+0x64>
   4:	and	w7, w3, #0xfff00000
   8:	ldr	w3, [x0, #12]
   c:	and	w3, w3, #0xfff00000
  10:	cmp	w7, w3
  14:	b.ne	58 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4findEPS1_NS_10StackTraceEj+0x58>  // b.any
  18:	ldr	x3, [x0, #16]
  1c:	cmp	x2, x3
  20:	b.ne	58 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4findEPS1_NS_10StackTraceEj+0x58>  // b.any
  24:	ldr	w6, [x0, #16]
  28:	cbz	x6, 60 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4findEPS1_NS_10StackTraceEj+0x60>
  2c:	add	x8, x0, #0x18
  30:	mov	x3, #0x0                   	// #0
  34:	b	40 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4findEPS1_NS_10StackTraceEj+0x40>
  38:	cmp	x3, x6
  3c:	b.eq	60 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4findEPS1_NS_10StackTraceEj+0x60>  // b.none
  40:	ldr	x5, [x8, x3, lsl #3]
  44:	ldr	x4, [x1, x3, lsl #3]
  48:	add	x3, x3, #0x1
  4c:	cmp	x5, x4
  50:	b.eq	38 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4findEPS1_NS_10StackTraceEj+0x38>  // b.none
  54:	nop
  58:	ldr	x0, [x0]
  5c:	cbnz	x0, 8 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4findEPS1_NS_10StackTraceEj+0x8>
  60:	ret
  64:	mov	x0, #0x0                   	// #0
  68:	ret

Disassembly of section .text._ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4lockEPNS_16atomic_uintptr_tE:

0000000000000000 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4lockEPNS_16atomic_uintptr_tE>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x20, x0
   8:	mov	w19, #0x0                   	// #0
   c:	str	x30, [sp, #16]
  10:	ldr	x0, [x20]
  14:	orr	x1, x0, #0x1
  18:	tbnz	w0, #0, 3c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4lockEPNS_16atomic_uintptr_tE+0x3c>
  1c:	ldxr	x2, [x20]
  20:	cmp	x2, x0
  24:	b.ne	30 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4lockEPNS_16atomic_uintptr_tE+0x30>  // b.any
  28:	stlxr	w3, x1, [x20]
  2c:	cbnz	w3, 1c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4lockEPNS_16atomic_uintptr_tE+0x1c>
  30:	dmb	ish
  34:	cmp	x0, x2
  38:	b.eq	58 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4lockEPNS_16atomic_uintptr_tE+0x58>  // b.none
  3c:	cmp	w19, #0x9
  40:	b.gt	4c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4lockEPNS_16atomic_uintptr_tE+0x4c>
  44:	add	w19, w19, #0x1
  48:	b	10 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4lockEPNS_16atomic_uintptr_tE+0x10>
  4c:	add	w19, w19, #0x1
  50:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  54:	b	10 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4lockEPNS_16atomic_uintptr_tE+0x10>
  58:	ldr	x30, [sp, #16]
  5c:	ldp	x19, x20, [sp], #32
  60:	ret

Disassembly of section .text._ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb:

0000000000000000 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>:
   0:	stp	x19, x20, [sp, #-160]!
   4:	mov	x20, x1
   8:	stp	x21, x22, [sp, #16]
   c:	mov	x22, x2
  10:	stp	x23, x24, [sp, #32]
  14:	mov	x24, x0
  18:	mov	x23, x3
  1c:	stp	x25, x26, [sp, #48]
  20:	mov	w25, w2
  24:	str	x30, [sp, #80]
  28:	cbz	x3, 30 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x30>
  2c:	strb	wzr, [x3]
  30:	cmp	w25, #0x0
  34:	mov	x0, #0x0                   	// #0
  38:	ccmp	x20, #0x0, #0x4, ne  // ne = any
  3c:	b.ne	58 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x58>  // b.any
  40:	ldp	x21, x22, [sp, #16]
  44:	ldp	x23, x24, [sp, #32]
  48:	ldp	x25, x26, [sp, #48]
  4c:	ldr	x30, [sp, #80]
  50:	ldp	x19, x20, [sp], #160
  54:	ret
  58:	mov	w4, #0xb28c                	// #45708
  5c:	mov	w19, #0xe995                	// #59797
  60:	movk	w4, #0x9747, lsl #16
  64:	stp	x27, x28, [sp, #64]
  68:	eor	w5, w4, w25, lsl #3
  6c:	mov	w27, w25
  70:	mov	x1, #0x0                   	// #0
  74:	movk	w19, #0x5bd1, lsl #16
  78:	ldr	x4, [x20, x1, lsl #3]
  7c:	mul	w5, w5, w19
  80:	add	x1, x1, #0x1
  84:	cmp	x27, x1
  88:	mul	w4, w19, w4
  8c:	eor	w4, w4, w4, lsr #24
  90:	mul	w4, w4, w19
  94:	eor	w5, w4, w5
  98:	b.hi	78 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x78>  // b.pmore
  9c:	eor	w4, w5, w5, lsr #13
  a0:	mul	w19, w4, w19
  a4:	eor	w19, w19, w19, lsr #15
  a8:	and	x26, x19, #0xfffff
  ac:	add	x21, x24, x26, lsl #3
  b0:	ldr	x28, [x24, x26, lsl #3]
  b4:	and	x28, x28, #0xfffffffffffffffe
  b8:	bfxil	x22, x25, #0, #32
  bc:	mov	x2, x22
  c0:	mov	x0, x28
  c4:	mov	w3, w19
  c8:	mov	x1, x20
  cc:	bl	0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
  d0:	cbz	x0, f0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0xf0>
  d4:	ldp	x21, x22, [sp, #16]
  d8:	ldp	x23, x24, [sp, #32]
  dc:	ldp	x25, x26, [sp, #48]
  e0:	ldp	x27, x28, [sp, #64]
  e4:	ldr	x30, [sp, #80]
  e8:	ldp	x19, x20, [sp], #160
  ec:	ret
  f0:	mov	x0, x21
  f4:	bl	0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
  f8:	str	x0, [sp, #104]
  fc:	mov	x21, x0
 100:	cmp	x28, x0
 104:	b.eq	12c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x12c>  // b.none
 108:	mov	w3, w19
 10c:	mov	x1, x20
 110:	mov	x2, x22
 114:	bl	0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
 118:	cbz	x0, 12c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x12c>
 11c:	dmb	ish
 120:	str	x21, [x24, x26, lsl #3]
 124:	ldp	x27, x28, [sp, #64]
 128:	b	40 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x40>
 12c:	lsr	x6, x26, #12
 130:	add	x0, x6, #0x200, lsl #12
 134:	add	x0, x24, x0, lsl #2
 138:	ldxr	w3, [x0]
 13c:	add	w1, w3, #0x1
 140:	stlxr	w2, w1, [x0]
 144:	cbnz	w2, 138 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x138>
 148:	add	x7, x24, #0x800, lsl #12
 14c:	mov	w0, #0x7fffff              	// #8388607
 150:	add	w3, w3, #0x1
 154:	dmb	ish
 158:	cmp	w3, w0
 15c:	ldr	x0, [x7, #1024]
 160:	add	x0, x0, #0x1
 164:	str	x0, [x7, #1024]
 168:	b.hi	31c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x31c>  // b.pmore
 16c:	orr	w6, w3, w6, lsl #23
 170:	cbz	w6, 338 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x338>
 174:	adrp	x8, 0 <_ZN11__sanitizer22thePersistentAllocatorE>
 178:	sub	w28, w25, #0x1
 17c:	add	x28, x28, #0x4
 180:	ldr	x1, [x8]
 184:	lsl	x28, x28, #3
 188:	add	x2, x1, #0x8
 18c:	ldr	x21, [x1, #8]
 190:	dmb	ish
 194:	ldr	x3, [x1, #16]
 198:	dmb	ish
 19c:	cbz	x21, 224 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x224>
 1a0:	add	x0, x28, x21
 1a4:	cmp	x0, x3
 1a8:	b.hi	224 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x224>  // b.pmore
 1ac:	ldxr	x3, [x2]
 1b0:	cmp	x3, x21
 1b4:	b.ne	1c0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x1c0>  // b.any
 1b8:	stlxr	w4, x0, [x2]
 1bc:	cbnz	w4, 1ac <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x1ac>
 1c0:	dmb	ish
 1c4:	cmp	x3, x21
 1c8:	b.ne	18c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x18c>  // b.any
 1cc:	ldr	x0, [x7, #1032]
 1d0:	and	w19, w19, #0xfff00000
 1d4:	lsr	x22, x22, #32
 1d8:	lsl	x2, x27, #3
 1dc:	add	x0, x0, x28
 1e0:	str	x0, [x7, #1032]
 1e4:	str	w6, [x21, #8]
 1e8:	mov	x1, x20
 1ec:	str	w19, [x21, #12]
 1f0:	add	x0, x21, #0x18
 1f4:	stp	w25, w22, [x21, #16]
 1f8:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 1fc:	ldr	x0, [sp, #104]
 200:	str	x0, [x21]
 204:	dmb	ish
 208:	str	x21, [x24, x26, lsl #3]
 20c:	cbz	x23, 218 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x218>
 210:	mov	w0, #0x1                   	// #1
 214:	strb	w0, [x23]
 218:	mov	x0, x21
 21c:	ldp	x27, x28, [sp, #64]
 220:	b	40 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x40>
 224:	ldr	x0, [x8]
 228:	mov	w2, #0x1                   	// #1
 22c:	ldxrb	w1, [x0]
 230:	stxrb	w3, w2, [x0]
 234:	cbnz	w3, 22c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x22c>
 238:	dmb	ish
 23c:	tst	w1, #0xff
 240:	b.eq	25c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x25c>  // b.none
 244:	str	w6, [sp, #112]
 248:	str	x7, [sp, #120]
 24c:	bl	0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
 250:	ldr	w6, [sp, #112]
 254:	adrp	x8, 0 <_ZN11__sanitizer22thePersistentAllocatorE>
 258:	ldr	x7, [sp, #120]
 25c:	adrp	x1, 0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
 260:	ldr	x3, [x8]
 264:	add	x1, x1, #0x0
 268:	add	x5, x3, #0x8
 26c:	nop
 270:	ldr	x21, [x3, #8]
 274:	dmb	ish
 278:	ldr	x2, [x3, #16]
 27c:	dmb	ish
 280:	cbz	x21, 2bc <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x2bc>
 284:	add	x0, x28, x21
 288:	cmp	x0, x2
 28c:	b.hi	2bc <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x2bc>  // b.pmore
 290:	ldxr	x2, [x5]
 294:	cmp	x2, x21
 298:	b.ne	2a4 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x2a4>  // b.any
 29c:	stlxr	w4, x0, [x5]
 2a0:	cbnz	w4, 290 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x290>
 2a4:	dmb	ish
 2a8:	cmp	x2, x21
 2ac:	b.ne	270 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x270>  // b.any
 2b0:	dmb	ish
 2b4:	strb	wzr, [x3]
 2b8:	b	1cc <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x1cc>
 2bc:	ldr	x9, [x8]
 2c0:	cmp	x28, #0x10, lsl #12
 2c4:	mov	x21, #0x10000               	// #65536
 2c8:	csel	x21, x28, x21, cs  // cs = hs, nlast
 2cc:	mov	x0, x21
 2d0:	mov	w2, #0x0                   	// #0
 2d4:	str	xzr, [x9, #8]
 2d8:	stp	x9, x1, [sp, #112]
 2dc:	str	w6, [sp, #132]
 2e0:	stp	x3, x7, [sp, #136]
 2e4:	str	x5, [sp, #152]
 2e8:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 2ec:	dmb	ish
 2f0:	add	x21, x21, x0
 2f4:	ldr	x9, [sp, #112]
 2f8:	str	x21, [x9, #16]
 2fc:	dmb	ish
 300:	str	x0, [x9, #8]
 304:	adrp	x8, 0 <_ZN11__sanitizer22thePersistentAllocatorE>
 308:	ldr	w6, [sp, #132]
 30c:	ldr	x1, [sp, #120]
 310:	ldp	x3, x7, [sp, #136]
 314:	ldr	x5, [sp, #152]
 318:	b	270 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x270>
 31c:	adrp	x2, 0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
 320:	adrp	x0, 0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
 324:	add	x2, x2, #0x0
 328:	add	x0, x0, #0x0
 32c:	mov	x4, #0x800000              	// #8388608
 330:	mov	w1, #0x77                  	// #119
 334:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 338:	adrp	x2, 0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
 33c:	adrp	x0, 0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
 340:	add	x2, x2, #0x0
 344:	add	x0, x0, #0x0
 348:	mov	x4, #0x0                   	// #0
 34c:	mov	x3, #0x0                   	// #0
 350:	mov	w1, #0x79                  	// #121
 354:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

sanitizer_stacktrace.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer10StackTrace20GetNextInstructionPcEm>:
   0:	add	x0, x0, #0x4
   4:	ret

0000000000000008 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>:
   8:	str	x30, [sp, #-16]!
   c:	mov	x0, x30
  10:	ldr	x30, [sp], #16
  14:	ret

0000000000000018 <_ZN11__sanitizer18BufferedStackTrace4InitEPKmmm>:
  18:	stp	x19, x20, [sp, #-32]!
  1c:	cmp	x3, #0x0
  20:	stp	x21, x30, [sp, #16]
  24:	mov	x21, x3
  28:	cinc	w3, w2, ne  // ne = any
  2c:	str	w3, [x0, #8]
  30:	cmp	w3, #0x100
  34:	b.hi	68 <_ZN11__sanitizer18BufferedStackTrace4InitEPKmmm+0x50>  // b.pmore
  38:	mov	x19, x0
  3c:	mov	x20, x2
  40:	add	x0, x0, #0x10
  44:	lsl	x2, x2, #3
  48:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  4c:	cbz	x21, 58 <_ZN11__sanitizer18BufferedStackTrace4InitEPKmmm+0x40>
  50:	add	x20, x20, #0x2
  54:	str	x21, [x19, x20, lsl #3]
  58:	ldp	x21, x30, [sp, #16]
  5c:	str	xzr, [x19, #2064]
  60:	ldp	x19, x20, [sp], #32
  64:	ret
  68:	adrp	x2, 0 <_ZN11__sanitizer10StackTrace20GetNextInstructionPcEm>
  6c:	adrp	x0, 0 <_ZN11__sanitizer10StackTrace20GetNextInstructionPcEm>
  70:	mov	w3, w3
  74:	add	x2, x2, #0x0
  78:	add	x0, x0, #0x0
  7c:	mov	x4, #0x100                 	// #256
  80:	mov	w1, #0x22                  	// #34
  84:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000088 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj>:
  88:	stp	x19, x20, [sp, #-64]!
  8c:	mov	x19, x0
  90:	mov	w20, w5
  94:	stp	x23, x24, [sp, #32]
  98:	adrp	x23, 0 <_ZN11__sanitizer14PageSizeCachedE>
  9c:	mov	x24, x1
  a0:	ldr	x23, [x23]
  a4:	stp	x21, x22, [sp, #16]
  a8:	mov	x22, x2
  ac:	stp	x25, x30, [sp, #48]
  b0:	mov	x21, x3
  b4:	mov	x25, x4
  b8:	ldr	x0, [x23]
  bc:	cbz	x0, 168 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xe0>
  c0:	cmp	w20, #0x1
  c4:	mov	w3, w20
  c8:	b.ls	17c <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xf4>  // b.plast
  cc:	mov	w1, #0x1                   	// #1
  d0:	str	w1, [x19, #8]
  d4:	str	x24, [x19, #16]
  d8:	cmp	x21, #0xfff
  dc:	b.ls	154 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xcc>  // b.plast
  e0:	cmp	x22, x25
  e4:	b.ls	154 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xcc>  // b.plast
  e8:	sub	x21, x21, #0x10
  ec:	cmp	x22, x21
  f0:	b.cs	154 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xcc>  // b.hs, b.nlast
  f4:	tst	x22, #0x7
  f8:	b.ne	154 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xcc>  // b.any
  fc:	mov	x2, x22
 100:	ldr	x3, [x2, #8]
 104:	cmp	x0, x3
 108:	b.hi	154 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xcc>  // b.pmore
 10c:	cmp	x24, x3
 110:	b.eq	124 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0x9c>  // b.none
 114:	add	x4, x19, w1, uxtw #3
 118:	add	w1, w1, #0x1
 11c:	str	w1, [x19, #8]
 120:	str	x3, [x4, #16]
 124:	ldr	x2, [x2]
 128:	cmp	x2, x22
 12c:	b.ls	154 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xcc>  // b.plast
 130:	cmp	x2, x21
 134:	b.cs	154 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xcc>  // b.hs, b.nlast
 138:	tst	x2, #0x7
 13c:	b.ne	154 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xcc>  // b.any
 140:	ldr	w1, [x19, #8]
 144:	cmp	w1, w20
 148:	b.cs	154 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xcc>  // b.hs, b.nlast
 14c:	mov	x22, x2
 150:	b	100 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0x78>
 154:	ldp	x21, x22, [sp, #16]
 158:	ldp	x23, x24, [sp, #32]
 15c:	ldp	x25, x30, [sp, #48]
 160:	ldp	x19, x20, [sp], #64
 164:	ret
 168:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 16c:	str	x0, [x23]
 170:	cmp	w20, #0x1
 174:	mov	w3, w20
 178:	b.hi	cc <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0x44>  // b.pmore
 17c:	adrp	x2, 0 <_ZN11__sanitizer10StackTrace20GetNextInstructionPcEm>
 180:	adrp	x0, 0 <_ZN11__sanitizer10StackTrace20GetNextInstructionPcEm>
 184:	add	x2, x2, #0x0
 188:	add	x0, x0, #0x0
 18c:	mov	x4, #0x2                   	// #2
 190:	mov	w1, #0x47                  	// #71
 194:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000198 <_ZN11__sanitizer18BufferedStackTrace14PopStackFramesEm>:
 198:	ldr	w2, [x0, #8]
 19c:	cmp	x1, w2, uxtw
 1a0:	b.cs	1cc <_ZN11__sanitizer18BufferedStackTrace14PopStackFramesEm+0x34>  // b.hs, b.nlast
 1a4:	sub	w2, w2, w1
 1a8:	str	w2, [x0, #8]
 1ac:	cbz	w2, 1c8 <_ZN11__sanitizer18BufferedStackTrace14PopStackFramesEm+0x30>
 1b0:	add	x0, x0, #0x10
 1b4:	add	x2, x0, w2, uxtw #3
 1b8:	ldr	x4, [x0, x1, lsl #3]
 1bc:	str	x4, [x0], #8
 1c0:	cmp	x0, x2
 1c4:	b.ne	1b8 <_ZN11__sanitizer18BufferedStackTrace14PopStackFramesEm+0x20>  // b.any
 1c8:	ret
 1cc:	str	x30, [sp, #-16]!
 1d0:	mov	w4, w2
 1d4:	mov	x3, x1
 1d8:	adrp	x2, 0 <_ZN11__sanitizer10StackTrace20GetNextInstructionPcEm>
 1dc:	adrp	x0, 0 <_ZN11__sanitizer10StackTrace20GetNextInstructionPcEm>
 1e0:	add	x2, x2, #0x0
 1e4:	add	x0, x0, #0x0
 1e8:	mov	w1, #0x78                  	// #120
 1ec:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000001f0 <_ZN11__sanitizer18BufferedStackTrace15LocatePcInTraceEm>:
 1f0:	ldr	w7, [x0, #8]
 1f4:	cmp	x7, #0x1
 1f8:	b.ls	244 <_ZN11__sanitizer18BufferedStackTrace15LocatePcInTraceEm+0x54>  // b.plast
 1fc:	mov	x4, #0x1                   	// #1
 200:	ldr	x5, [x0]
 204:	mov	x0, #0x0                   	// #0
 208:	ldr	x2, [x5, x4, lsl #3]
 20c:	ldr	x3, [x5, x0, lsl #3]
 210:	cmp	x2, x1
 214:	sub	x6, x1, x2
 218:	sub	x2, x2, x1
 21c:	csel	x2, x2, x6, cs  // cs = hs, nlast
 220:	sub	x6, x1, x3
 224:	subs	x3, x3, x1
 228:	csel	x3, x3, x6, cs  // cs = hs, nlast
 22c:	cmp	x3, x2
 230:	csel	x0, x0, x4, ls  // ls = plast
 234:	add	x4, x4, #0x1
 238:	cmp	x4, x7
 23c:	b.ne	208 <_ZN11__sanitizer18BufferedStackTrace15LocatePcInTraceEm+0x18>  // b.any
 240:	ret
 244:	mov	x0, #0x0                   	// #0
 248:	ret

sanitizer_stacktrace_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZNK11__sanitizer10StackTrace5PrintEv>:
   0:	stp	x19, x20, [sp, #-176]!
   4:	stp	x21, x22, [sp, #16]
   8:	mov	x21, x0
   c:	ldr	x0, [x0]
  10:	str	x30, [sp, #80]
  14:	cbz	x0, 74 <_ZNK11__sanitizer10StackTrace5PrintEv+0x74>
  18:	ldr	w0, [x21, #8]
  1c:	cbz	w0, 74 <_ZNK11__sanitizer10StackTrace5PrintEv+0x74>
  20:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
  24:	stp	x23, x24, [sp, #32]
  28:	ldr	x22, [x20]
  2c:	stp	x25, x26, [sp, #48]
  30:	stp	x27, x28, [sp, #64]
  34:	ldr	x0, [x22]
  38:	cbz	x0, 90 <_ZNK11__sanitizer10StackTrace5PrintEv+0x90>
  3c:	stp	xzr, xzr, [sp, #112]
  40:	cmp	xzr, x0, lsl #1
  44:	lsl	x19, x0, #1
  48:	str	xzr, [sp, #128]
  4c:	b.ne	bc <_ZNK11__sanitizer10StackTrace5PrintEv+0xbc>  // b.any
  50:	stp	xzr, xzr, [sp, #128]
  54:	adrp	x2, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
  58:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
  5c:	add	x2, x2, #0x0
  60:	add	x0, x0, #0x0
  64:	mov	x4, #0x0                   	// #0
  68:	mov	x3, #0x0                   	// #0
  6c:	mov	w1, #0x1b6                 	// #438
  70:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  74:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
  78:	add	x0, x0, #0x0
  7c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  80:	ldp	x21, x22, [sp, #16]
  84:	ldr	x30, [sp, #80]
  88:	ldp	x19, x20, [sp], #176
  8c:	ret
  90:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  94:	str	x0, [x22]
  98:	stp	xzr, xzr, [sp, #112]
  9c:	mov	x19, x0
  a0:	cmp	xzr, x0, lsl #1
  a4:	str	xzr, [sp, #128]
  a8:	lsl	x1, x0, #1
  ac:	b.eq	50 <_ZNK11__sanitizer10StackTrace5PrintEv+0x50>  // b.none
  b0:	cbnz	x0, 454 <_ZNK11__sanitizer10StackTrace5PrintEv+0x454>
  b4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  b8:	str	x0, [x22]
  bc:	sub	x1, x0, #0x1
  c0:	tst	x0, x1
  c4:	b.ne	428 <_ZNK11__sanitizer10StackTrace5PrintEv+0x428>  // b.any
  c8:	add	x1, x19, x1
  cc:	neg	x0, x0
  d0:	and	x23, x1, x0
  d4:	mov	w2, #0x0                   	// #0
  d8:	mov	x0, x23
  dc:	adrp	x24, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
  e0:	add	x1, x24, #0x0
  e4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  e8:	ldr	x1, [sp, #112]
  ec:	mov	x22, x0
  f0:	ldr	x2, [sp, #128]
  f4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  f8:	ldp	x0, x1, [sp, #112]
  fc:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 100:	stp	x22, x23, [sp, #112]
 104:	ldr	x2, [sp, #128]
 108:	cmp	x19, x2
 10c:	b.ls	44c <_ZNK11__sanitizer10StackTrace5PrintEv+0x44c>  // b.plast
 110:	cmp	x19, x23
 114:	b.hi	30c <_ZNK11__sanitizer10StackTrace5PrintEv+0x30c>  // b.pmore
 118:	add	x0, x22, x2
 11c:	mov	w1, #0x0                   	// #0
 120:	sub	x2, x19, x2
 124:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 128:	stp	x19, xzr, [sp, #128]
 12c:	ldr	x22, [sp, #112]
 130:	cbz	x19, 54 <_ZNK11__sanitizer10StackTrace5PrintEv+0x54>
 134:	ldr	x23, [x20]
 138:	strb	wzr, [x22]
 13c:	ldr	x19, [x23]
 140:	cbz	x19, 2c0 <_ZNK11__sanitizer10StackTrace5PrintEv+0x2c0>
 144:	stp	xzr, xzr, [sp, #144]
 148:	str	xzr, [sp, #160]
 14c:	sub	x23, x19, #0x1
 150:	ands	x23, x23, x19
 154:	b.ne	428 <_ZNK11__sanitizer10StackTrace5PrintEv+0x428>  // b.any
 158:	lsl	x0, x19, #1
 15c:	neg	x25, x19
 160:	sub	x0, x0, #0x1
 164:	add	x1, x24, #0x0
 168:	and	x25, x0, x25
 16c:	mov	w2, #0x0                   	// #0
 170:	mov	x0, x25
 174:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 178:	ldr	x1, [sp, #144]
 17c:	mov	x22, x0
 180:	ldr	x2, [sp, #160]
 184:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 188:	ldp	x0, x1, [sp, #144]
 18c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 190:	stp	x22, x25, [sp, #144]
 194:	ldr	x2, [sp, #160]
 198:	cmp	x19, x2
 19c:	b.ls	45c <_ZNK11__sanitizer10StackTrace5PrintEv+0x45c>  // b.plast
 1a0:	cmp	x19, x25
 1a4:	b.hi	384 <_ZNK11__sanitizer10StackTrace5PrintEv+0x384>  // b.pmore
 1a8:	add	x0, x22, x2
 1ac:	mov	w1, #0x0                   	// #0
 1b0:	sub	x2, x19, x2
 1b4:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 1b8:	ldr	x22, [sp, #144]
 1bc:	stp	x19, xzr, [sp, #160]
 1c0:	adrp	x26, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 1c4:	strb	wzr, [x22]
 1c8:	ldr	x1, [x26]
 1cc:	str	xzr, [sp, #96]
 1d0:	ldr	w0, [x21, #8]
 1d4:	ldr	w27, [x1, #184]
 1d8:	cbz	w0, 3f4 <_ZNK11__sanitizer10StackTrace5PrintEv+0x3f4>
 1dc:	adrp	x24, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 1e0:	add	x28, sp, #0x70
 1e4:	add	x24, x24, #0x0
 1e8:	ldr	x0, [x21]
 1ec:	ldr	x1, [sp, #96]
 1f0:	ldr	x19, [x0, x1, lsl #3]
 1f4:	cbz	x19, 3f4 <_ZNK11__sanitizer10StackTrace5PrintEv+0x3f4>
 1f8:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
 1fc:	sub	x1, x19, #0x4
 200:	bl	0 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm>
 204:	str	x0, [sp, #104]
 208:	cbz	x0, 364 <_ZNK11__sanitizer10StackTrace5PrintEv+0x364>
 20c:	ldr	x0, [sp, #128]
 210:	adrp	x22, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 214:	mov	x19, x23
 218:	add	x22, x22, #0x0
 21c:	ldr	x25, [sp, #104]
 220:	ldr	x2, [sp, #112]
 224:	cbz	x0, 54 <_ZNK11__sanitizer10StackTrace5PrintEv+0x54>
 228:	ldr	x1, [x26]
 22c:	strb	wzr, [x2]
 230:	mov	x6, x24
 234:	mov	w2, w19
 238:	add	x3, x25, #0x8
 23c:	mov	x0, x28
 240:	ldrb	w4, [x1, #181]
 244:	add	x20, x19, #0x1
 248:	ldr	x5, [x1, #24]
 24c:	str	xzr, [sp, #136]
 250:	ldr	x1, [x1, #192]
 254:	bl	0 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_>
 258:	ldr	x1, [sp, #112]
 25c:	mov	x0, x22
 260:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 264:	add	w1, w27, w23
 268:	sub	w0, w1, w19
 26c:	sub	w19, w1, w20
 270:	cmp	w0, #0x0
 274:	b.le	290 <_ZNK11__sanitizer10StackTrace5PrintEv+0x290>
 278:	ldr	x0, [sp, #168]
 27c:	cbnz	x0, 2ac <_ZNK11__sanitizer10StackTrace5PrintEv+0x2ac>
 280:	ldr	x1, [x25, #40]
 284:	cbz	x1, 290 <_ZNK11__sanitizer10StackTrace5PrintEv+0x290>
 288:	add	x0, sp, #0x90
 28c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 290:	ldr	x25, [x25]
 294:	cbz	x25, 2e0 <_ZNK11__sanitizer10StackTrace5PrintEv+0x2e0>
 298:	ldr	x0, [sp, #128]
 29c:	mov	x19, x20
 2a0:	ldr	x2, [sp, #112]
 2a4:	cbnz	x0, 228 <_ZNK11__sanitizer10StackTrace5PrintEv+0x228>
 2a8:	b	54 <_ZNK11__sanitizer10StackTrace5PrintEv+0x54>
 2ac:	add	x0, sp, #0x90
 2b0:	adrp	x1, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 2b4:	add	x1, x1, #0x0
 2b8:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 2bc:	b	280 <_ZNK11__sanitizer10StackTrace5PrintEv+0x280>
 2c0:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 2c4:	str	x0, [x23]
 2c8:	stp	xzr, xzr, [sp, #144]
 2cc:	mov	x19, x0
 2d0:	str	xzr, [sp, #160]
 2d4:	cbnz	x0, 14c <_ZNK11__sanitizer10StackTrace5PrintEv+0x14c>
 2d8:	str	xzr, [sp, #168]
 2dc:	b	54 <_ZNK11__sanitizer10StackTrace5PrintEv+0x54>
 2e0:	ldr	x0, [sp, #104]
 2e4:	bl	0 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>
 2e8:	ldr	x1, [sp, #96]
 2ec:	ldr	w0, [x21, #8]
 2f0:	add	x1, x1, #0x1
 2f4:	str	x1, [sp, #96]
 2f8:	cmp	x0, x1
 2fc:	b.ls	3f4 <_ZNK11__sanitizer10StackTrace5PrintEv+0x3f4>  // b.plast
 300:	mov	x23, x20
 304:	mov	w27, w19
 308:	b	1e8 <_ZNK11__sanitizer10StackTrace5PrintEv+0x1e8>
 30c:	ldr	x22, [x20]
 310:	ldr	x0, [x22]
 314:	cbz	x0, 3dc <_ZNK11__sanitizer10StackTrace5PrintEv+0x3dc>
 318:	sub	x1, x0, #0x1
 31c:	tst	x1, x0
 320:	b.ne	428 <_ZNK11__sanitizer10StackTrace5PrintEv+0x428>  // b.any
 324:	add	x1, x19, x1
 328:	neg	x0, x0
 32c:	and	x23, x1, x0
 330:	mov	w2, #0x0                   	// #0
 334:	add	x1, x24, #0x0
 338:	mov	x0, x23
 33c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 340:	mov	x22, x0
 344:	ldr	x1, [sp, #112]
 348:	ldr	x2, [sp, #128]
 34c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 350:	ldp	x0, x1, [sp, #112]
 354:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 358:	stp	x22, x23, [sp, #112]
 35c:	ldr	x2, [sp, #128]
 360:	b	118 <_ZNK11__sanitizer10StackTrace5PrintEv+0x118>
 364:	adrp	x2, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 368:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 36c:	add	x2, x2, #0x0
 370:	add	x0, x0, #0x0
 374:	mov	x4, #0x0                   	// #0
 378:	mov	x3, #0x0                   	// #0
 37c:	mov	w1, #0x22                  	// #34
 380:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 384:	ldr	x20, [x20]
 388:	ldr	x0, [x20]
 38c:	cbz	x0, 3e8 <_ZNK11__sanitizer10StackTrace5PrintEv+0x3e8>
 390:	sub	x1, x0, #0x1
 394:	tst	x1, x0
 398:	b.ne	428 <_ZNK11__sanitizer10StackTrace5PrintEv+0x428>  // b.any
 39c:	add	x1, x19, x1
 3a0:	neg	x0, x0
 3a4:	and	x20, x1, x0
 3a8:	mov	w2, #0x0                   	// #0
 3ac:	add	x1, x24, #0x0
 3b0:	mov	x0, x20
 3b4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 3b8:	mov	x22, x0
 3bc:	ldr	x1, [sp, #144]
 3c0:	ldr	x2, [sp, #160]
 3c4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 3c8:	ldp	x0, x1, [sp, #144]
 3cc:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 3d0:	stp	x22, x20, [sp, #144]
 3d4:	ldr	x2, [sp, #160]
 3d8:	b	1a8 <_ZNK11__sanitizer10StackTrace5PrintEv+0x1a8>
 3dc:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 3e0:	str	x0, [x22]
 3e4:	b	318 <_ZNK11__sanitizer10StackTrace5PrintEv+0x318>
 3e8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 3ec:	str	x0, [x20]
 3f0:	b	390 <_ZNK11__sanitizer10StackTrace5PrintEv+0x390>
 3f4:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 3f8:	add	x0, x0, #0x0
 3fc:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 400:	ldr	x0, [sp, #168]
 404:	cbnz	x0, 438 <_ZNK11__sanitizer10StackTrace5PrintEv+0x438>
 408:	ldp	x0, x1, [sp, #144]
 40c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 410:	ldp	x0, x1, [sp, #112]
 414:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 418:	ldp	x23, x24, [sp, #32]
 41c:	ldp	x25, x26, [sp, #48]
 420:	ldp	x27, x28, [sp, #64]
 424:	b	80 <_ZNK11__sanitizer10StackTrace5PrintEv+0x80>
 428:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 42c:	add	x0, x0, #0x0
 430:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 434:	bl	0 <_ZN11__sanitizer3DieEv>
 438:	ldr	x1, [sp, #144]
 43c:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 440:	add	x0, x0, #0x0
 444:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 448:	b	408 <_ZNK11__sanitizer10StackTrace5PrintEv+0x408>
 44c:	stp	x19, xzr, [sp, #128]
 450:	b	134 <_ZNK11__sanitizer10StackTrace5PrintEv+0x134>
 454:	mov	x19, x1
 458:	b	bc <_ZNK11__sanitizer10StackTrace5PrintEv+0xbc>
 45c:	stp	x19, xzr, [sp, #160]
 460:	b	1c0 <_ZNK11__sanitizer10StackTrace5PrintEv+0x1c0>
 464:	nop

0000000000000468 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>:
 468:	mov	w8, w1
 46c:	and	w7, w7, #0xff
 470:	mov	x1, x2
 474:	mov	x9, x0
 478:	mov	x2, x3
 47c:	mov	x3, x5
 480:	cbnz	w8, 490 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb+0x28>
 484:	str	wzr, [x0, #8]
 488:	str	xzr, [x0, #2064]
 48c:	ret
 490:	str	x2, [x0, #2064]
 494:	cmp	w8, #0x1
 498:	b.eq	4bc <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb+0x54>  // b.none
 49c:	cbnz	w7, 4b0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb+0x48>
 4a0:	cbz	x4, 4c8 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb+0x60>
 4a4:	mov	w3, w8
 4a8:	mov	x2, x4
 4ac:	b	0 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj>
 4b0:	mov	w5, w8
 4b4:	mov	x4, x6
 4b8:	b	0 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj>
 4bc:	str	w8, [x9, #8]
 4c0:	str	x1, [x9, #16]
 4c4:	ret
 4c8:	mov	w2, w8
 4cc:	b	0 <_ZN11__sanitizer18BufferedStackTrace15SlowUnwindStackEmj>

00000000000004d0 <__sanitizer_symbolize_pc>:
 4d0:	cbnz	x3, 4d8 <__sanitizer_symbolize_pc+0x8>
 4d4:	ret
 4d8:	stp	x19, x20, [sp, #-112]!
 4dc:	mov	x19, x2
 4e0:	mov	x20, x3
 4e4:	stp	x21, x22, [sp, #16]
 4e8:	mov	x21, x0
 4ec:	stp	x23, x24, [sp, #32]
 4f0:	mov	x23, x1
 4f4:	str	x30, [sp, #72]
 4f8:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
 4fc:	sub	x1, x21, #0x4
 500:	bl	0 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm>
 504:	mov	x21, x0
 508:	cbz	x0, 734 <__sanitizer_symbolize_pc+0x264>
 50c:	stp	x25, x26, [sp, #48]
 510:	adrp	x26, 0 <_ZN11__sanitizer14PageSizeCachedE>
 514:	ldr	x24, [x26]
 518:	ldr	x22, [x24]
 51c:	str	x27, [sp, #64]
 520:	cbz	x22, 670 <__sanitizer_symbolize_pc+0x1a0>
 524:	stp	xzr, xzr, [sp, #80]
 528:	str	xzr, [sp, #96]
 52c:	sub	x0, x22, #0x1
 530:	tst	x0, x22
 534:	b.ne	724 <__sanitizer_symbolize_pc+0x254>  // b.any
 538:	lsl	x0, x22, #1
 53c:	neg	x25, x22
 540:	sub	x0, x0, #0x1
 544:	mov	w2, #0x0                   	// #0
 548:	and	x25, x0, x25
 54c:	adrp	x27, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 550:	mov	x0, x25
 554:	add	x1, x27, #0x0
 558:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 55c:	mov	x24, x0
 560:	ldr	x1, [sp, #80]
 564:	ldr	x2, [sp, #96]
 568:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 56c:	ldp	x0, x1, [sp, #80]
 570:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 574:	stp	x24, x25, [sp, #80]
 578:	ldr	x2, [sp, #96]
 57c:	cmp	x22, x2
 580:	b.ls	774 <__sanitizer_symbolize_pc+0x2a4>  // b.plast
 584:	cmp	x22, x25
 588:	b.hi	6c0 <__sanitizer_symbolize_pc+0x1f0>  // b.pmore
 58c:	add	x0, x24, x2
 590:	mov	w1, #0x0                   	// #0
 594:	sub	x2, x22, x2
 598:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 59c:	ldr	x24, [sp, #80]
 5a0:	stp	x22, xzr, [sp, #96]
 5a4:	sub	x20, x20, #0x1
 5a8:	strb	wzr, [x24]
 5ac:	add	x20, x19, x20
 5b0:	cmp	x19, x20
 5b4:	b.cs	690 <__sanitizer_symbolize_pc+0x1c0>  // b.hs, b.nlast
 5b8:	adrp	x25, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 5bc:	adrp	x26, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 5c0:	add	x27, sp, #0x50
 5c4:	add	x26, x26, #0x0
 5c8:	ldr	x25, [x25]
 5cc:	mov	w22, #0x0                   	// #0
 5d0:	b	644 <__sanitizer_symbolize_pc+0x174>
 5d4:	strb	wzr, [x1]
 5d8:	mov	x0, x27
 5dc:	mov	x6, x26
 5e0:	add	x3, x21, #0x8
 5e4:	ldrb	w4, [x25, #181]
 5e8:	mov	w2, w22
 5ec:	ldr	x5, [x25, #24]
 5f0:	mov	x1, x23
 5f4:	str	xzr, [sp, #104]
 5f8:	bl	0 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_>
 5fc:	ldr	x0, [sp, #104]
 600:	cbz	x0, 630 <__sanitizer_symbolize_pc+0x160>
 604:	ldr	x1, [sp, #80]
 608:	sub	x24, x20, x19
 60c:	sub	x24, x24, #0x1
 610:	mov	x0, x19
 614:	mov	x2, x24
 618:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
 61c:	ldr	x2, [sp, #104]
 620:	cmp	x2, x24
 624:	csel	x2, x2, x24, ls  // ls = plast
 628:	add	x19, x19, x2
 62c:	strb	wzr, [x19], #1
 630:	ldr	x21, [x21]
 634:	add	w22, w22, #0x1
 638:	cmp	x21, #0x0
 63c:	ccmp	x19, x20, #0x2, ne  // ne = any
 640:	b.cs	690 <__sanitizer_symbolize_pc+0x1c0>  // b.hs, b.nlast
 644:	ldr	x0, [sp, #96]
 648:	ldr	x1, [sp, #80]
 64c:	cbnz	x0, 5d4 <__sanitizer_symbolize_pc+0x104>
 650:	adrp	x2, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 654:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 658:	add	x2, x2, #0x0
 65c:	add	x0, x0, #0x0
 660:	mov	x4, #0x0                   	// #0
 664:	mov	x3, #0x0                   	// #0
 668:	mov	w1, #0x1b6                 	// #438
 66c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 670:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 674:	str	x0, [x24]
 678:	stp	xzr, xzr, [sp, #80]
 67c:	mov	x22, x0
 680:	str	xzr, [sp, #96]
 684:	cbnz	x0, 52c <__sanitizer_symbolize_pc+0x5c>
 688:	str	xzr, [sp, #104]
 68c:	b	650 <__sanitizer_symbolize_pc+0x180>
 690:	cmp	x19, x20
 694:	b.hi	754 <__sanitizer_symbolize_pc+0x284>  // b.pmore
 698:	ldp	x0, x1, [sp, #80]
 69c:	strb	wzr, [x19]
 6a0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 6a4:	ldp	x25, x26, [sp, #48]
 6a8:	ldr	x27, [sp, #64]
 6ac:	ldp	x21, x22, [sp, #16]
 6b0:	ldp	x23, x24, [sp, #32]
 6b4:	ldr	x30, [sp, #72]
 6b8:	ldp	x19, x20, [sp], #112
 6bc:	ret
 6c0:	ldr	x26, [x26]
 6c4:	ldr	x0, [x26]
 6c8:	cbz	x0, 718 <__sanitizer_symbolize_pc+0x248>
 6cc:	sub	x1, x0, #0x1
 6d0:	tst	x0, x1
 6d4:	b.ne	724 <__sanitizer_symbolize_pc+0x254>  // b.any
 6d8:	add	x1, x22, x1
 6dc:	neg	x0, x0
 6e0:	and	x25, x1, x0
 6e4:	mov	w2, #0x0                   	// #0
 6e8:	add	x1, x27, #0x0
 6ec:	mov	x0, x25
 6f0:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 6f4:	mov	x24, x0
 6f8:	ldr	x1, [sp, #80]
 6fc:	ldr	x2, [sp, #96]
 700:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 704:	ldp	x0, x1, [sp, #80]
 708:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 70c:	stp	x24, x25, [sp, #80]
 710:	ldr	x2, [sp, #96]
 714:	b	58c <__sanitizer_symbolize_pc+0xbc>
 718:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 71c:	str	x0, [x26]
 720:	b	6cc <__sanitizer_symbolize_pc+0x1fc>
 724:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 728:	add	x0, x0, #0x0
 72c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 730:	bl	0 <_ZN11__sanitizer3DieEv>
 734:	mov	x0, x19
 738:	add	x19, x19, x20
 73c:	mov	x2, x20
 740:	adrp	x1, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 744:	add	x1, x1, #0x0
 748:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
 74c:	sturb	wzr, [x19, #-1]
 750:	b	6ac <__sanitizer_symbolize_pc+0x1dc>
 754:	adrp	x2, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 758:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 75c:	add	x2, x2, #0x0
 760:	add	x0, x0, #0x0
 764:	mov	x4, #0x0                   	// #0
 768:	mov	x3, #0x0                   	// #0
 76c:	mov	w1, #0x84                  	// #132
 770:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 774:	stp	x22, xzr, [sp, #96]
 778:	b	5a4 <__sanitizer_symbolize_pc+0xd4>
 77c:	nop

0000000000000780 <__sanitizer_symbolize_global>:
 780:	cbnz	x3, 788 <__sanitizer_symbolize_global+0x8>
 784:	ret
 788:	stp	x19, x20, [sp, #-176]!
 78c:	mov	x20, x0
 790:	mov	x19, x3
 794:	stp	x21, x22, [sp, #16]
 798:	mov	x22, x1
 79c:	mov	x21, x2
 7a0:	stp	x23, x24, [sp, #32]
 7a4:	add	x23, sp, #0x70
 7a8:	mov	x0, x23
 7ac:	str	x30, [sp, #72]
 7b0:	strb	wzr, [x2]
 7b4:	bl	0 <_ZN11__sanitizer8DataInfoC1Ev>
 7b8:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
 7bc:	mov	x2, x23
 7c0:	mov	x1, x20
 7c4:	bl	0 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE>
 7c8:	tst	w0, #0xff
 7cc:	b.eq	8b0 <__sanitizer_symbolize_global+0x130>  // b.none
 7d0:	stp	x25, x26, [sp, #48]
 7d4:	adrp	x26, 0 <_ZN11__sanitizer14PageSizeCachedE>
 7d8:	ldr	x24, [x26]
 7dc:	ldr	x20, [x24]
 7e0:	str	x27, [sp, #64]
 7e4:	cbz	x20, 8c4 <__sanitizer_symbolize_global+0x144>
 7e8:	stp	xzr, xzr, [sp, #80]
 7ec:	str	xzr, [sp, #96]
 7f0:	sub	x0, x20, #0x1
 7f4:	tst	x0, x20
 7f8:	b.ne	964 <__sanitizer_symbolize_global+0x1e4>  // b.any
 7fc:	lsl	x0, x20, #1
 800:	neg	x25, x20
 804:	sub	x0, x0, #0x1
 808:	mov	w2, #0x0                   	// #0
 80c:	and	x25, x0, x25
 810:	adrp	x27, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 814:	mov	x0, x25
 818:	add	x1, x27, #0x0
 81c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 820:	mov	x24, x0
 824:	ldr	x1, [sp, #80]
 828:	ldr	x2, [sp, #96]
 82c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 830:	ldp	x0, x1, [sp, #80]
 834:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 838:	stp	x24, x25, [sp, #80]
 83c:	ldr	x2, [sp, #96]
 840:	cmp	x20, x2
 844:	b.ls	974 <__sanitizer_symbolize_global+0x1f4>  // b.plast
 848:	cmp	x20, x25
 84c:	b.hi	900 <__sanitizer_symbolize_global+0x180>  // b.pmore
 850:	add	x0, x24, x2
 854:	mov	w1, #0x0                   	// #0
 858:	sub	x2, x20, x2
 85c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 860:	ldr	x24, [sp, #80]
 864:	stp	x20, xzr, [sp, #96]
 868:	adrp	x3, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 86c:	strb	wzr, [x24]
 870:	mov	x2, x23
 874:	ldr	x3, [x3]
 878:	mov	x1, x22
 87c:	add	x0, sp, #0x50
 880:	ldr	x3, [x3, #24]
 884:	bl	0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 888:	ldr	x1, [sp, #80]
 88c:	mov	x2, x19
 890:	mov	x0, x21
 894:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
 898:	ldp	x0, x1, [sp, #80]
 89c:	add	x2, x21, x19
 8a0:	sturb	wzr, [x2, #-1]
 8a4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 8a8:	ldp	x25, x26, [sp, #48]
 8ac:	ldr	x27, [sp, #64]
 8b0:	ldp	x21, x22, [sp, #16]
 8b4:	ldp	x23, x24, [sp, #32]
 8b8:	ldr	x30, [sp, #72]
 8bc:	ldp	x19, x20, [sp], #176
 8c0:	ret
 8c4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 8c8:	str	x0, [x24]
 8cc:	stp	xzr, xzr, [sp, #80]
 8d0:	mov	x20, x0
 8d4:	str	xzr, [sp, #96]
 8d8:	cbnz	x0, 7f0 <__sanitizer_symbolize_global+0x70>
 8dc:	adrp	x2, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 8e0:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 8e4:	add	x2, x2, #0x0
 8e8:	add	x0, x0, #0x0
 8ec:	mov	x4, #0x0                   	// #0
 8f0:	mov	x3, #0x0                   	// #0
 8f4:	mov	w1, #0x1b6                 	// #438
 8f8:	str	xzr, [sp, #104]
 8fc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 900:	ldr	x26, [x26]
 904:	ldr	x0, [x26]
 908:	cbz	x0, 958 <__sanitizer_symbolize_global+0x1d8>
 90c:	sub	x1, x0, #0x1
 910:	tst	x0, x1
 914:	b.ne	964 <__sanitizer_symbolize_global+0x1e4>  // b.any
 918:	add	x1, x20, x1
 91c:	neg	x0, x0
 920:	and	x25, x1, x0
 924:	mov	w2, #0x0                   	// #0
 928:	add	x1, x27, #0x0
 92c:	mov	x0, x25
 930:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 934:	mov	x24, x0
 938:	ldr	x1, [sp, #80]
 93c:	ldr	x2, [sp, #96]
 940:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 944:	ldp	x0, x1, [sp, #80]
 948:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 94c:	stp	x24, x25, [sp, #80]
 950:	ldr	x2, [sp, #96]
 954:	b	850 <__sanitizer_symbolize_global+0xd0>
 958:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 95c:	str	x0, [x26]
 960:	b	90c <__sanitizer_symbolize_global+0x18c>
 964:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 968:	add	x0, x0, #0x0
 96c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 970:	bl	0 <_ZN11__sanitizer3DieEv>
 974:	stp	x20, xzr, [sp, #96]
 978:	b	868 <__sanitizer_symbolize_global+0xe8>
 97c:	nop

0000000000000980 <__sanitizer_get_module_and_offset_for_pc>:
 980:	stp	x19, x20, [sp, #-64]!
 984:	mov	x19, x1
 988:	mov	x20, x2
 98c:	stp	x21, x22, [sp, #16]
 990:	mov	x21, x0
 994:	mov	x22, x3
 998:	str	x30, [sp, #32]
 99c:	str	xzr, [sp, #56]
 9a0:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
 9a4:	mov	x1, x21
 9a8:	mov	x3, x22
 9ac:	add	x2, sp, #0x38
 9b0:	mov	w21, #0x0                   	// #0
 9b4:	bl	0 <_ZN11__sanitizer10Symbolizer27GetModuleNameAndOffsetForPCEmPPKcPm>
 9b8:	tst	w0, #0xff
 9bc:	b.eq	9d0 <__sanitizer_get_module_and_offset_for_pc+0x50>  // b.none
 9c0:	cmp	x19, #0x0
 9c4:	mov	w21, #0x1                   	// #1
 9c8:	ccmp	x20, #0x0, #0x4, ne  // ne = any
 9cc:	b.ne	9e4 <__sanitizer_get_module_and_offset_for_pc+0x64>  // b.any
 9d0:	mov	w0, w21
 9d4:	ldp	x21, x22, [sp, #16]
 9d8:	ldr	x30, [sp, #32]
 9dc:	ldp	x19, x20, [sp], #64
 9e0:	ret
 9e4:	ldr	x1, [sp, #56]
 9e8:	mov	x0, x19
 9ec:	add	x19, x19, x20
 9f0:	mov	x2, x20
 9f4:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
 9f8:	sturb	wzr, [x19, #-1]
 9fc:	mov	w0, w21
 a00:	ldp	x21, x22, [sp, #16]
 a04:	ldr	x30, [sp, #32]
 a08:	ldp	x19, x20, [sp], #64
 a0c:	ret

sanitizer_stacktrace_printer.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>:
   0:	stp	x19, x20, [sp, #-80]!
   4:	stp	x21, x22, [sp, #16]
   8:	mov	x22, x2
   c:	str	x30, [sp, #64]
  10:	ldrb	w2, [x1]
  14:	cbz	w2, b0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0xb0>
  18:	mov	x19, x1
  1c:	mov	x21, x0
  20:	stp	x23, x24, [sp, #32]
  24:	adrp	x23, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
  28:	mov	x24, x3
  2c:	add	x23, x23, #0x0
  30:	stp	x25, x26, [sp, #48]
  34:	adrp	x25, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
  38:	adrp	x26, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
  3c:	add	x25, x25, #0x0
  40:	b	5c <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x5c>
  44:	add	x19, x19, #0x2
  48:	add	x1, x26, #0x0
  4c:	mov	x0, x21
  50:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
  54:	ldrb	w2, [x20, #1]
  58:	cbz	w2, a8 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0xa8>
  5c:	cmp	w2, #0x25
  60:	add	x20, x19, #0x1
  64:	b.ne	ec <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0xec>  // b.any
  68:	ldrb	w2, [x19, #1]
  6c:	cmp	w2, #0x6c
  70:	b.eq	10c <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x10c>  // b.none
  74:	b.hi	c0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0xc0>  // b.pmore
  78:	cmp	w2, #0x25
  7c:	b.eq	44 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x44>  // b.none
  80:	cmp	w2, #0x67
  84:	b.ne	124 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x124>  // b.any
  88:	ldr	x2, [x22, #40]
  8c:	mov	x1, x23
  90:	mov	x0, x21
  94:	add	x19, x19, #0x2
  98:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
  9c:	ldrb	w2, [x20, #1]
  a0:	cbnz	w2, 5c <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x5c>
  a4:	nop
  a8:	ldp	x23, x24, [sp, #32]
  ac:	ldp	x25, x26, [sp, #48]
  b0:	ldp	x21, x22, [sp, #16]
  b4:	ldr	x30, [sp, #64]
  b8:	ldp	x19, x20, [sp], #80
  bc:	ret
  c0:	cmp	w2, #0x73
  c4:	b.ne	124 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x124>  // b.any
  c8:	ldr	x0, [x22, #24]
  cc:	mov	x1, x24
  d0:	add	x19, x19, #0x2
  d4:	bl	0 <_ZN11__sanitizer15StripPathPrefixEPKcS1_>
  d8:	mov	x2, x0
  dc:	mov	x1, x23
  e0:	mov	x0, x21
  e4:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
  e8:	b	54 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x54>
  ec:	mov	x0, x21
  f0:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
  f4:	add	x1, x1, #0x0
  f8:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
  fc:	mov	x0, x20
 100:	mov	x20, x19
 104:	mov	x19, x0
 108:	b	54 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x54>
 10c:	ldr	x2, [x22, #32]
 110:	add	x19, x19, #0x2
 114:	mov	x1, x25
 118:	mov	x0, x21
 11c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 120:	b	54 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x54>
 124:	mov	w1, w2
 128:	adrp	x0, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 12c:	add	x0, x0, #0x0
 130:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 134:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000138 <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_>:
 138:	stp	x19, x20, [sp, #-48]!
 13c:	cmp	w2, #0x0
 140:	and	w4, w4, #0xff
 144:	stp	x21, x22, [sp, #16]
 148:	mov	x20, x0
 14c:	mov	w19, w2
 150:	str	x30, [sp, #32]
 154:	mov	x0, x1
 158:	mov	w21, w3
 15c:	ccmp	w4, #0x0, #0x4, gt
 160:	mov	x1, x5
 164:	b.ne	1d4 <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_+0x9c>  // b.any
 168:	bl	0 <_ZN11__sanitizer15StripPathPrefixEPKcS1_>
 16c:	mov	x2, x0
 170:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 174:	mov	x0, x20
 178:	add	x1, x1, #0x0
 17c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 180:	cmp	w19, #0x0
 184:	b.gt	198 <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_+0x60>
 188:	ldp	x21, x22, [sp, #16]
 18c:	ldr	x30, [sp, #32]
 190:	ldp	x19, x20, [sp], #48
 194:	ret
 198:	adrp	x22, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 19c:	add	x22, x22, #0x0
 1a0:	mov	w2, w19
 1a4:	mov	x1, x22
 1a8:	mov	x0, x20
 1ac:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 1b0:	cmp	w21, #0x0
 1b4:	b.le	188 <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_+0x50>
 1b8:	mov	w2, w21
 1bc:	mov	x1, x22
 1c0:	mov	x0, x20
 1c4:	ldp	x21, x22, [sp, #16]
 1c8:	ldr	x30, [sp, #32]
 1cc:	ldp	x19, x20, [sp], #48
 1d0:	b	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 1d4:	bl	0 <_ZN11__sanitizer15StripPathPrefixEPKcS1_>
 1d8:	mov	x2, x0
 1dc:	mov	w3, w19
 1e0:	mov	x0, x20
 1e4:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 1e8:	add	x1, x1, #0x0
 1ec:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 1f0:	cmp	w21, #0x0
 1f4:	b.gt	214 <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_+0xdc>
 1f8:	mov	x0, x20
 1fc:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 200:	ldp	x21, x22, [sp, #16]
 204:	add	x1, x1, #0x0
 208:	ldr	x30, [sp, #32]
 20c:	ldp	x19, x20, [sp], #48
 210:	b	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 214:	mov	w2, w21
 218:	mov	x0, x20
 21c:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 220:	add	x1, x1, #0x0
 224:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 228:	mov	x0, x20
 22c:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 230:	ldp	x21, x22, [sp, #16]
 234:	add	x1, x1, #0x0
 238:	ldr	x30, [sp, #32]
 23c:	ldp	x19, x20, [sp], #48
 240:	b	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 244:	nop

0000000000000248 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_>:
 248:	stp	x19, x20, [sp, #-32]!
 24c:	mov	x20, x0
 250:	mov	w19, w3
 254:	mov	x0, x1
 258:	mov	x1, x4
 25c:	stp	x21, x30, [sp, #16]
 260:	mov	x21, x2
 264:	bl	0 <_ZN11__sanitizer15StripPathPrefixEPKcS1_>
 268:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 26c:	mov	x2, x0
 270:	add	x1, x1, #0x0
 274:	mov	x0, x20
 278:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 27c:	cbnz	w19, 29c <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x54>
 280:	mov	x2, x21
 284:	mov	x0, x20
 288:	ldp	x21, x30, [sp, #16]
 28c:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 290:	ldp	x19, x20, [sp], #32
 294:	add	x1, x1, #0x0
 298:	b	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 29c:	cmp	w19, #0x5
 2a0:	b.eq	36c <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x124>  // b.none
 2a4:	b.hi	2ec <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0xa4>  // b.pmore
 2a8:	cmp	w19, #0x3
 2ac:	b.eq	360 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x118>  // b.none
 2b0:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 2b4:	cmp	w19, #0x4
 2b8:	add	x2, x1, #0x0
 2bc:	b.ne	318 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0xd0>  // b.any
 2c0:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 2c4:	mov	x0, x20
 2c8:	add	x1, x1, #0x0
 2cc:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 2d0:	mov	x2, x21
 2d4:	mov	x0, x20
 2d8:	ldp	x21, x30, [sp, #16]
 2dc:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 2e0:	ldp	x19, x20, [sp], #32
 2e4:	add	x1, x1, #0x0
 2e8:	b	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 2ec:	cmp	w19, #0x7
 2f0:	b.eq	354 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x10c>  // b.none
 2f4:	cmp	w19, #0x8
 2f8:	b.ne	334 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0xec>  // b.any
 2fc:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 300:	mov	x0, x20
 304:	add	x2, x1, #0x0
 308:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 30c:	add	x1, x1, #0x0
 310:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 314:	b	2d0 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x88>
 318:	cmp	w19, #0x1
 31c:	b.eq	348 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x100>  // b.none
 320:	cmp	w19, #0x2
 324:	b.ne	378 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x130>  // b.any
 328:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 32c:	add	x2, x1, #0x0
 330:	b	2c0 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x78>
 334:	cmp	w19, #0x6
 338:	b.ne	378 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x130>  // b.any
 33c:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 340:	add	x2, x1, #0x0
 344:	b	2c0 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x78>
 348:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 34c:	add	x2, x1, #0x0
 350:	b	2c0 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x78>
 354:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 358:	add	x2, x1, #0x0
 35c:	b	2c0 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x78>
 360:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 364:	add	x2, x1, #0x0
 368:	b	2c0 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x78>
 36c:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 370:	add	x2, x1, #0x0
 374:	b	2c0 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x78>
 378:	adrp	x2, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 37c:	adrp	x0, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 380:	add	x2, x2, #0x0
 384:	add	x0, x0, #0x0
 388:	mov	x4, #0x0                   	// #0
 38c:	mov	x3, #0x0                   	// #0
 390:	mov	w1, #0x2a9                 	// #681
 394:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000398 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_>:
 398:	stp	x19, x20, [sp, #-112]!
 39c:	mov	x19, x1
 3a0:	mov	x20, x0
 3a4:	mov	x0, x1
 3a8:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 3ac:	add	x1, x1, #0x0
 3b0:	stp	x21, x22, [sp, #16]
 3b4:	mov	x21, x3
 3b8:	mov	x22, x6
 3bc:	stp	x23, x24, [sp, #32]
 3c0:	mov	x23, x5
 3c4:	stp	x25, x26, [sp, #48]
 3c8:	mov	w26, w2
 3cc:	stp	x27, x28, [sp, #64]
 3d0:	and	w27, w4, #0xff
 3d4:	str	x30, [sp, #80]
 3d8:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 3dc:	cbz	w0, 708 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x370>
 3e0:	ldrb	w2, [x19]
 3e4:	cbz	w2, 4b8 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x120>
 3e8:	adrp	x25, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 3ec:	adrp	x24, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 3f0:	add	x25, x25, #0x0
 3f4:	add	x24, x24, #0x0
 3f8:	b	488 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xf0>
 3fc:	ldrb	w2, [x19, #1]
 400:	cmp	w2, #0x6c
 404:	b.eq	6f0 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x358>  // b.none
 408:	b.hi	530 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x198>  // b.pmore
 40c:	cmp	w2, #0x4d
 410:	b.eq	6b8 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x320>  // b.none
 414:	b.ls	4fc <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x164>  // b.plast
 418:	cmp	w2, #0x63
 41c:	b.eq	6a0 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x308>  // b.none
 420:	cmp	w2, #0x66
 424:	b.ne	4d4 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x13c>  // b.any
 428:	ldr	x3, [x21, #32]
 42c:	cbz	x3, 468 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xd0>
 430:	cbz	x22, 468 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xd0>
 434:	mov	x0, x22
 438:	str	x3, [sp, #96]
 43c:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 440:	mov	x2, x0
 444:	ldr	x3, [sp, #96]
 448:	mov	x1, x22
 44c:	stp	x2, x3, [sp, #96]
 450:	mov	x0, x3
 454:	bl	0 <_ZN11__sanitizer16internal_strncmpEPKcS1_m>
 458:	cmp	w0, #0x0
 45c:	ldp	x2, x3, [sp, #96]
 460:	add	x2, x3, x2
 464:	csel	x3, x2, x3, eq  // eq = none
 468:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 46c:	mov	x2, x3
 470:	add	x19, x19, #0x2
 474:	mov	x0, x20
 478:	add	x1, x1, #0x0
 47c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 480:	ldrb	w2, [x28, #1]
 484:	cbz	w2, 4b8 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x120>
 488:	cmp	w2, #0x25
 48c:	add	x28, x19, #0x1
 490:	b.eq	3fc <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x64>  // b.none
 494:	mov	x0, x20
 498:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 49c:	add	x1, x1, #0x0
 4a0:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 4a4:	mov	x0, x28
 4a8:	mov	x28, x19
 4ac:	mov	x19, x0
 4b0:	ldrb	w2, [x28, #1]
 4b4:	cbnz	w2, 488 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xf0>
 4b8:	ldp	x21, x22, [sp, #16]
 4bc:	ldp	x23, x24, [sp, #32]
 4c0:	ldp	x25, x26, [sp, #48]
 4c4:	ldp	x27, x28, [sp, #64]
 4c8:	ldr	x30, [sp, #80]
 4cc:	ldp	x19, x20, [sp], #112
 4d0:	ret
 4d4:	cmp	w2, #0x53
 4d8:	b.ne	760 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x3c8>  // b.any
 4dc:	ldp	w2, w3, [x21, #56]
 4e0:	add	x19, x19, #0x2
 4e4:	ldr	x1, [x21, #48]
 4e8:	mov	x5, x23
 4ec:	mov	w4, w27
 4f0:	mov	x0, x20
 4f4:	bl	138 <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_>
 4f8:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 4fc:	cmp	w2, #0x46
 500:	b.eq	608 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x270>  // b.none
 504:	cmp	w2, #0x4c
 508:	b.ne	564 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x1cc>  // b.any
 50c:	ldr	x1, [x21, #48]
 510:	add	x19, x19, #0x2
 514:	cbz	x1, 718 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x380>
 518:	ldp	w2, w3, [x21, #56]
 51c:	mov	x5, x23
 520:	mov	w4, w27
 524:	mov	x0, x20
 528:	bl	138 <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_>
 52c:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 530:	cmp	w2, #0x70
 534:	b.eq	688 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x2f0>  // b.none
 538:	b.ls	5b4 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x21c>  // b.plast
 53c:	cmp	w2, #0x71
 540:	b.ne	584 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x1ec>  // b.any
 544:	ldr	x2, [x21, #40]
 548:	add	x19, x19, #0x2
 54c:	mov	x1, x24
 550:	mov	x0, x20
 554:	cmn	x2, #0x1
 558:	csel	x2, x2, xzr, ne  // ne = any
 55c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 560:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 564:	cmp	w2, #0x25
 568:	b.ne	760 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x3c8>  // b.any
 56c:	add	x19, x19, #0x2
 570:	mov	x0, x20
 574:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 578:	add	x1, x1, #0x0
 57c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 580:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 584:	cmp	w2, #0x73
 588:	b.ne	760 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x3c8>  // b.any
 58c:	ldr	x0, [x21, #48]
 590:	mov	x1, x23
 594:	bl	0 <_ZN11__sanitizer15StripPathPrefixEPKcS1_>
 598:	add	x19, x19, #0x2
 59c:	mov	x2, x0
 5a0:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 5a4:	mov	x0, x20
 5a8:	add	x1, x1, #0x0
 5ac:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 5b0:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 5b4:	cmp	w2, #0x6e
 5b8:	b.eq	5ec <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x254>  // b.none
 5bc:	cmp	w2, #0x6f
 5c0:	b.ne	5dc <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x244>  // b.any
 5c4:	ldr	x2, [x21, #16]
 5c8:	add	x19, x19, #0x2
 5cc:	mov	x1, x24
 5d0:	mov	x0, x20
 5d4:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 5d8:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 5dc:	cmp	w2, #0x6d
 5e0:	b.ne	760 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x3c8>  // b.any
 5e4:	ldr	x0, [x21, #8]
 5e8:	b	590 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x1f8>
 5ec:	add	x19, x19, #0x2
 5f0:	mov	w2, w26
 5f4:	mov	x0, x20
 5f8:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 5fc:	add	x1, x1, #0x0
 600:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 604:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 608:	ldr	x3, [x21, #32]
 60c:	add	x19, x19, #0x2
 610:	cbz	x3, 480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 614:	cbz	x22, 64c <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x2b4>
 618:	mov	x0, x22
 61c:	str	x3, [sp, #96]
 620:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 624:	mov	x2, x0
 628:	ldr	x3, [sp, #96]
 62c:	mov	x1, x22
 630:	stp	x2, x3, [sp, #96]
 634:	mov	x0, x3
 638:	bl	0 <_ZN11__sanitizer16internal_strncmpEPKcS1_m>
 63c:	cmp	w0, #0x0
 640:	ldp	x2, x3, [sp, #96]
 644:	add	x2, x3, x2
 648:	csel	x3, x2, x3, eq  // eq = none
 64c:	mov	x0, x20
 650:	mov	x2, x3
 654:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 658:	add	x1, x1, #0x0
 65c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 660:	ldr	x0, [x21, #48]
 664:	cbnz	x0, 480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 668:	ldr	x2, [x21, #40]
 66c:	cmn	x2, #0x1
 670:	b.eq	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>  // b.none
 674:	mov	x0, x20
 678:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 67c:	add	x1, x1, #0x0
 680:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 684:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 688:	ldr	x2, [x21]
 68c:	add	x19, x19, #0x2
 690:	mov	x1, x24
 694:	mov	x0, x20
 698:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 69c:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 6a0:	ldr	w2, [x21, #60]
 6a4:	add	x19, x19, #0x2
 6a8:	mov	x1, x25
 6ac:	mov	x0, x20
 6b0:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 6b4:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 6b8:	ldr	x2, [x21]
 6bc:	add	x19, x19, #0x2
 6c0:	tbnz	x2, #60, 480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 6c4:	ldr	x0, [x21, #8]
 6c8:	cbz	x0, 738 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x3a0>
 6cc:	bl	0 <_ZN11__sanitizer15StripModuleNameEPKc>
 6d0:	mov	x1, x0
 6d4:	ldr	w3, [x21, #24]
 6d8:	mov	x0, x20
 6dc:	ldr	x2, [x21, #16]
 6e0:	adrp	x4, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 6e4:	add	x4, x4, #0x0
 6e8:	bl	248 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_>
 6ec:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 6f0:	ldr	w2, [x21, #56]
 6f4:	add	x19, x19, #0x2
 6f8:	mov	x1, x25
 6fc:	mov	x0, x20
 700:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 704:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 708:	adrp	x19, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 70c:	mov	w2, #0x20                  	// #32
 710:	add	x19, x19, #0x0
 714:	b	3e8 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x50>
 718:	ldr	x1, [x21, #8]
 71c:	cbz	x1, 74c <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x3b4>
 720:	ldr	w3, [x21, #24]
 724:	mov	x4, x23
 728:	ldr	x2, [x21, #16]
 72c:	mov	x0, x20
 730:	bl	248 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_>
 734:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 738:	mov	x0, x20
 73c:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 740:	add	x1, x1, #0x0
 744:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 748:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 74c:	mov	x0, x20
 750:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 754:	add	x1, x1, #0x0
 758:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 75c:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 760:	mov	w1, w2
 764:	adrp	x0, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 768:	add	x0, x0, #0x0
 76c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 770:	bl	0 <_ZN11__sanitizer3DieEv>

sanitizer_stacktrace_sparc.o:     file format elf64-littleaarch64


sanitizer_stoptheworld_linux_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>:
       0:	ldr	x0, [x0, #24]
       4:	ret

0000000000000008 <_ZNK11__sanitizer25SuspendedThreadsListLinux13RegisterCountEv>:
       8:	mov	x0, #0x22                  	// #34
       c:	ret

0000000000000010 <_ZNK11__sanitizer25SuspendedThreadsListLinux11GetThreadIDEm>:
      10:	ldr	x4, [x0, #24]
      14:	cmp	x1, x4
      18:	b.cs	28 <_ZNK11__sanitizer25SuspendedThreadsListLinux11GetThreadIDEm+0x18>  // b.hs, b.nlast
      1c:	ldr	x0, [x0, #8]
      20:	ldr	x0, [x0, x1, lsl #3]
      24:	ret
      28:	str	x30, [sp, #-16]!
      2c:	mov	x3, x1
      30:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
      34:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
      38:	add	x2, x2, #0x0
      3c:	add	x0, x0, #0x0
      40:	mov	w1, #0x202                 	// #514
      44:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000048 <_ZNK11__sanitizer25SuspendedThreadsListLinux17GetRegistersAndSPEmPmS1_>:
      48:	stp	x19, x20, [sp, #-352]!
      4c:	mov	x20, x2
      50:	adrp	x4, 10 <_ZNK11__sanitizer25SuspendedThreadsListLinux11GetThreadIDEm>
      54:	ldr	x2, [x0]
      58:	stp	x21, x22, [sp, #16]
      5c:	add	x4, x4, #0x0
      60:	stp	x23, x30, [sp, #32]
      64:	mov	x21, x3
      68:	ldr	x2, [x2, #24]
      6c:	cmp	x2, x4
      70:	b.ne	104 <_ZNK11__sanitizer25SuspendedThreadsListLinux17GetRegistersAndSPEmPmS1_+0xbc>  // b.any
      74:	bl	10 <_ZNK11__sanitizer25SuspendedThreadsListLinux11GetThreadIDEm>
      78:	mov	x19, x0
      7c:	add	x3, sp, #0x40
      80:	mov	x2, #0x1                   	// #1
      84:	mov	w1, w19
      88:	add	x22, sp, #0x50
      8c:	mov	x23, #0x110                 	// #272
      90:	mov	w0, #0x4204                	// #16900
      94:	stp	x22, x23, [sp, #64]
      98:	bl	0 <_ZN11__sanitizer15internal_ptraceEiiPvS0_>
      9c:	add	x1, sp, #0x3c
      a0:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
      a4:	tst	w0, #0xff
      a8:	b.eq	d8 <_ZNK11__sanitizer25SuspendedThreadsListLinux17GetRegistersAndSPEmPmS1_+0x90>  // b.none
      ac:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
      b0:	ldr	w2, [sp, #60]
      b4:	ldr	x0, [x0]
      b8:	ldr	w0, [x0]
      bc:	cbnz	w0, 110 <_ZNK11__sanitizer25SuspendedThreadsListLinux17GetRegistersAndSPEmPmS1_+0xc8>
      c0:	cmp	w2, #0x3
      c4:	csetm	w0, eq  // eq = none
      c8:	ldp	x21, x22, [sp, #16]
      cc:	ldp	x23, x30, [sp, #32]
      d0:	ldp	x19, x20, [sp], #352
      d4:	ret
      d8:	ldr	x0, [sp, #328]
      dc:	str	x0, [x21]
      e0:	mov	x2, x23
      e4:	mov	x1, x22
      e8:	mov	x0, x20
      ec:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
      f0:	mov	w0, #0x1                   	// #1
      f4:	ldp	x21, x22, [sp, #16]
      f8:	ldp	x23, x30, [sp, #32]
      fc:	ldp	x19, x20, [sp], #352
     100:	ret
     104:	blr	x2
     108:	mov	x19, x0
     10c:	b	7c <_ZNK11__sanitizer25SuspendedThreadsListLinux17GetRegistersAndSPEmPmS1_+0x34>
     110:	mov	w1, w19
     114:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     118:	add	x0, x0, #0x0
     11c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     120:	ldr	w2, [sp, #60]
     124:	b	c0 <_ZNK11__sanitizer25SuspendedThreadsListLinux17GetRegistersAndSPEmPmS1_+0x78>

0000000000000128 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy>:
     128:	stp	x19, x20, [sp, #-96]!
     12c:	mov	x19, x1
     130:	mov	x20, x0
     134:	ldr	x1, [x0, #32]
     138:	stp	x21, x22, [sp, #16]
     13c:	str	x30, [sp, #64]
     140:	cbz	x1, 180 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x58>
     144:	mov	x2, #0x0                   	// #0
     148:	ldr	x4, [x0, #16]
     14c:	b	15c <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x34>
     150:	add	x2, x2, #0x1
     154:	cmp	x2, x1
     158:	b.eq	180 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x58>  // b.none
     15c:	ldr	x3, [x4, x2, lsl #3]
     160:	cmp	x19, x3
     164:	b.ne	150 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x28>  // b.any
     168:	mov	w21, #0x0                   	// #0
     16c:	mov	w0, w21
     170:	ldp	x21, x22, [sp, #16]
     174:	ldr	x30, [sp, #64]
     178:	ldp	x19, x20, [sp], #96
     17c:	ret
     180:	mov	x3, #0x0                   	// #0
     184:	mov	x2, #0x0                   	// #0
     188:	mov	w1, w19
     18c:	mov	w0, #0x10                  	// #16
     190:	stp	x23, x24, [sp, #32]
     194:	bl	0 <_ZN11__sanitizer15internal_ptraceEiiPvS0_>
     198:	add	x1, sp, #0x50
     19c:	mov	w23, w19
     1a0:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     1a4:	ands	w21, w0, #0xff
     1a8:	b.ne	2a4 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x17c>  // b.any
     1ac:	stp	x25, x26, [sp, #48]
     1b0:	adrp	x25, 0 <_ZN11__sanitizer17current_verbosityE>
     1b4:	ldr	x0, [x25]
     1b8:	ldr	w0, [x0]
     1bc:	sxtw	x0, w0
     1c0:	cmp	x0, #0x1
     1c4:	b.hi	2d0 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x1a8>  // b.pmore
     1c8:	add	x24, sp, #0x54
     1cc:	add	x22, sp, #0x58
     1d0:	mov	w2, #0x40000000            	// #1073741824
     1d4:	mov	x1, x24
     1d8:	mov	w0, w23
     1dc:	bl	0 <_ZN11__sanitizer16internal_waitpidEiPii>
     1e0:	mov	x1, x22
     1e4:	mov	x26, x0
     1e8:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     1ec:	tst	w0, #0xff
     1f0:	b.eq	200 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0xd8>  // b.none
     1f4:	ldr	w0, [sp, #88]
     1f8:	cmp	w0, #0x4
     1fc:	b.eq	1d0 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0xa8>  // b.none
     200:	mov	x0, x26
     204:	mov	x1, x22
     208:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     20c:	tst	w0, #0xff
     210:	b.ne	3cc <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x2a4>  // b.any
     214:	ldr	w3, [sp, #84]
     218:	and	w0, w3, #0xff
     21c:	cmp	w0, #0x7f
     220:	b.ne	248 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x120>  // b.any
     224:	ubfx	x3, x3, #8, #8
     228:	cmp	w3, #0x13
     22c:	b.eq	248 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x120>  // b.none
     230:	and	x3, x3, #0xff
     234:	mov	w1, w23
     238:	mov	x2, #0x0                   	// #0
     23c:	mov	w0, #0x7                   	// #7
     240:	bl	0 <_ZN11__sanitizer15internal_ptraceEiiPvS0_>
     244:	b	1d0 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0xa8>
     248:	ldr	x4, [x20, #24]
     24c:	str	x19, [sp, #88]
     250:	ldr	x3, [x20, #32]
     254:	add	x21, x20, #0x10
     258:	lsr	x4, x4, #3
     25c:	cmp	x3, x4
     260:	b.hi	3b4 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x28c>  // b.pmore
     264:	add	x19, x3, #0x1
     268:	b.eq	2e4 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x1bc>  // b.none
     26c:	ldr	x23, [x20, #16]
     270:	str	x19, [x21, #16]
     274:	mov	x1, x22
     278:	add	x0, x23, x3, lsl #3
     27c:	mov	x2, #0x8                   	// #8
     280:	mov	w21, #0x1                   	// #1
     284:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     288:	mov	w0, w21
     28c:	ldp	x21, x22, [sp, #16]
     290:	ldp	x23, x24, [sp, #32]
     294:	ldp	x25, x26, [sp, #48]
     298:	ldr	x30, [sp, #64]
     29c:	ldp	x19, x20, [sp], #96
     2a0:	ret
     2a4:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
     2a8:	mov	w21, #0x0                   	// #0
     2ac:	ldr	x0, [x0]
     2b0:	ldr	w0, [x0]
     2b4:	cbnz	w0, 398 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x270>
     2b8:	mov	w0, w21
     2bc:	ldp	x21, x22, [sp, #16]
     2c0:	ldp	x23, x24, [sp, #32]
     2c4:	ldr	x30, [sp, #64]
     2c8:	ldp	x19, x20, [sp], #96
     2cc:	ret
     2d0:	mov	x1, x19
     2d4:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     2d8:	add	x0, x0, #0x0
     2dc:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     2e0:	b	1c8 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0xa0>
     2e4:	tst	x3, x19
     2e8:	b.eq	324 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x1fc>  // b.none
     2ec:	clz	x2, x19
     2f0:	mov	w1, #0x3f                  	// #63
     2f4:	sub	w2, w1, w2
     2f8:	mov	x1, #0x1                   	// #1
     2fc:	add	w4, w2, #0x1
     300:	lsl	x4, x1, x4
     304:	cmp	x4, x19
     308:	b.ls	464 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x33c>  // b.plast
     30c:	lsl	x1, x1, x2
     310:	cmp	x1, x19
     314:	b.cs	444 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x31c>  // b.hs, b.nlast
     318:	cmp	x3, x4
     31c:	b.hi	41c <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x2f4>  // b.pmore
     320:	mov	x19, x4
     324:	adrp	x23, 0 <_ZN11__sanitizer14PageSizeCachedE>
     328:	lsl	x19, x19, #3
     32c:	ldr	x23, [x23]
     330:	ldr	x0, [x23]
     334:	cbz	x0, 3f8 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x2d0>
     338:	sub	x1, x0, #0x1
     33c:	tst	x1, x0
     340:	b.ne	434 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x30c>  // b.any
     344:	add	x19, x19, x1
     348:	neg	x0, x0
     34c:	and	x19, x19, x0
     350:	mov	w2, #0x0                   	// #0
     354:	mov	x0, x19
     358:	adrp	x1, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     35c:	add	x1, x1, #0x0
     360:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     364:	ldr	x1, [x20, #16]
     368:	mov	x23, x0
     36c:	ldr	x2, [x21, #16]
     370:	lsl	x2, x2, #3
     374:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     378:	ldr	x1, [x21, #8]
     37c:	ldr	x0, [x20, #16]
     380:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     384:	ldr	x3, [x21, #16]
     388:	str	x23, [x20, #16]
     38c:	str	x19, [x21, #8]
     390:	add	x19, x3, #0x1
     394:	b	270 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x148>
     398:	ldr	w2, [sp, #80]
     39c:	mov	x1, x19
     3a0:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     3a4:	add	x0, x0, #0x0
     3a8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     3ac:	ldp	x23, x24, [sp, #32]
     3b0:	b	16c <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x44>
     3b4:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     3b8:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     3bc:	add	x2, x2, #0x0
     3c0:	add	x0, x0, #0x0
     3c4:	mov	w1, #0x1be                 	// #446
     3c8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     3cc:	ldr	x25, [x25]
     3d0:	ldr	w0, [x25]
     3d4:	cbnz	w0, 404 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x2dc>
     3d8:	mov	w1, w19
     3dc:	mov	x3, #0x0                   	// #0
     3e0:	mov	x2, #0x0                   	// #0
     3e4:	mov	w0, #0x11                  	// #17
     3e8:	bl	0 <_ZN11__sanitizer15internal_ptraceEiiPvS0_>
     3ec:	ldp	x23, x24, [sp, #32]
     3f0:	ldp	x25, x26, [sp, #48]
     3f4:	b	16c <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x44>
     3f8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     3fc:	str	x0, [x23]
     400:	b	338 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x210>
     404:	ldr	w2, [sp, #88]
     408:	mov	x1, x19
     40c:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     410:	add	x0, x0, #0x0
     414:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     418:	b	3d8 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x2b0>
     41c:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     420:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     424:	add	x2, x2, #0x0
     428:	add	x0, x0, #0x0
     42c:	mov	w1, #0x1fd                 	// #509
     430:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     434:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     438:	add	x0, x0, #0x0
     43c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     440:	bl	0 <_ZN11__sanitizer3DieEv>
     444:	mov	x4, x1
     448:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     44c:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     450:	mov	x3, x19
     454:	add	x2, x2, #0x0
     458:	add	x0, x0, #0x0
     45c:	mov	w1, #0x17c                 	// #380
     460:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     464:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     468:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     46c:	mov	x3, x19
     470:	add	x2, x2, #0x0
     474:	add	x0, x0, #0x0
     478:	mov	w1, #0x17b                 	// #379
     47c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000480 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv>:
     480:	stp	x19, x20, [sp, #-96]!
     484:	stp	x21, x22, [sp, #16]
     488:	mov	x21, x0
     48c:	ldr	x0, [x0, #32]
     490:	str	x30, [sp, #64]
     494:	cbz	x0, 560 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv+0xe0>
     498:	mov	x20, #0x0                   	// #0
     49c:	adrp	x22, 0 <_ZN11__sanitizer17current_verbosityE>
     4a0:	stp	x23, x24, [sp, #32]
     4a4:	add	x24, x21, #0x8
     4a8:	add	x23, sp, #0x5c
     4ac:	stp	x25, x26, [sp, #48]
     4b0:	adrp	x26, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     4b4:	adrp	x25, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     4b8:	add	x26, x26, #0x0
     4bc:	add	x25, x25, #0x0
     4c0:	b	4f4 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv+0x74>
     4c4:	ldr	x2, [x22]
     4c8:	mov	w1, w19
     4cc:	mov	x0, x25
     4d0:	ldr	w2, [x2]
     4d4:	sxtw	x2, w2
     4d8:	cmp	x2, #0x1
     4dc:	b.ls	4e4 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv+0x64>  // b.plast
     4e0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     4e4:	ldr	x1, [x21, #32]
     4e8:	add	x20, x20, #0x1
     4ec:	cmp	x1, x20
     4f0:	b.ls	558 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv+0xd8>  // b.plast
     4f4:	mov	x1, x20
     4f8:	mov	x0, x24
     4fc:	bl	10 <_ZNK11__sanitizer25SuspendedThreadsListLinux11GetThreadIDEm>
     500:	mov	x19, x0
     504:	mov	x3, #0x0                   	// #0
     508:	mov	x2, #0x0                   	// #0
     50c:	mov	w1, w19
     510:	mov	w0, #0x11                  	// #17
     514:	bl	0 <_ZN11__sanitizer15internal_ptraceEiiPvS0_>
     518:	mov	x1, x23
     51c:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     520:	tst	w0, #0xff
     524:	b.eq	4c4 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv+0x44>  // b.none
     528:	ldr	x0, [x22]
     52c:	ldr	w0, [x0]
     530:	cbz	w0, 4e4 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv+0x64>
     534:	ldr	w2, [sp, #92]
     538:	mov	w1, w19
     53c:	mov	x0, x26
     540:	add	x20, x20, #0x1
     544:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     548:	ldr	x1, [x21, #32]
     54c:	cmp	x1, x20
     550:	b.hi	4f4 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv+0x74>  // b.pmore
     554:	nop
     558:	ldp	x23, x24, [sp, #32]
     55c:	ldp	x25, x26, [sp, #48]
     560:	ldp	x21, x22, [sp, #16]
     564:	ldr	x30, [sp, #64]
     568:	ldp	x19, x20, [sp], #96
     56c:	ret

0000000000000570 <_ZN11__sanitizer15ThreadSuspender14KillAllThreadsEv>:
     570:	stp	x19, x20, [sp, #-32]!
     574:	mov	x20, x0
     578:	stp	x21, x30, [sp, #16]
     57c:	add	x21, x0, #0x8
     580:	ldr	x0, [x0, #32]
     584:	cbz	x0, 5c0 <_ZN11__sanitizer15ThreadSuspender14KillAllThreadsEv+0x50>
     588:	mov	x19, #0x0                   	// #0
     58c:	nop
     590:	mov	x1, x19
     594:	mov	x0, x21
     598:	bl	10 <_ZNK11__sanitizer25SuspendedThreadsListLinux11GetThreadIDEm>
     59c:	mov	w1, w0
     5a0:	mov	x3, #0x0                   	// #0
     5a4:	mov	x2, #0x0                   	// #0
     5a8:	mov	w0, #0x8                   	// #8
     5ac:	bl	0 <_ZN11__sanitizer15internal_ptraceEiiPvS0_>
     5b0:	ldr	x1, [x20, #32]
     5b4:	add	x19, x19, #0x1
     5b8:	cmp	x1, x19
     5bc:	b.hi	590 <_ZN11__sanitizer15ThreadSuspender14KillAllThreadsEv+0x20>  // b.pmore
     5c0:	ldp	x21, x30, [sp, #16]
     5c4:	ldp	x19, x20, [sp], #32
     5c8:	ret
     5cc:	nop

00000000000005d0 <_ZN11__sanitizerL25TracerThreadSignalHandlerEiPNS_19__sanitizer_siginfoEPv>:
     5d0:	stp	x19, x20, [sp, #-96]!
     5d4:	mov	w20, w0
     5d8:	add	x19, sp, #0x28
     5dc:	stp	x21, x30, [sp, #16]
     5e0:	mov	x0, x19
     5e4:	stp	x1, x2, [sp, #40]
     5e8:	bl	0 <_ZNK11__sanitizer13SignalContext10GetAddressEv>
     5ec:	mov	x1, x0
     5f0:	mov	x0, x19
     5f4:	str	x1, [sp, #56]
     5f8:	adrp	x21, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     5fc:	bl	0 <_ZNK11__sanitizer13SignalContext14IsMemoryAccessEv>
     600:	mov	w1, w0
     604:	mov	x0, x19
     608:	strb	w1, [sp, #88]
     60c:	bl	0 <_ZNK11__sanitizer13SignalContext12GetWriteFlagEv>
     610:	mov	w1, w0
     614:	mov	x0, x19
     618:	str	w1, [sp, #92]
     61c:	bl	0 <_ZN11__sanitizer13SignalContext10InitPcSpBpEv>
     620:	ldp	x2, x3, [sp, #56]
     624:	mov	w1, w20
     628:	ldr	x4, [sp, #72]
     62c:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     630:	add	x0, x0, #0x0
     634:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     638:	ldr	x19, [x21]
     63c:	cbz	x19, 674 <_ZN11__sanitizerL25TracerThreadSignalHandlerEiPNS_19__sanitizer_siginfoEPv+0xa4>
     640:	mov	x0, x19
     644:	cmp	w20, #0x6
     648:	b.eq	684 <_ZN11__sanitizerL25TracerThreadSignalHandlerEiPNS_19__sanitizer_siginfoEPv+0xb4>  // b.none
     64c:	bl	480 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv>
     650:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     654:	add	x0, x0, #0x0
     658:	bl	0 <_ZN11__sanitizer17RemoveDieCallbackEPFvvE>
     65c:	tst	w0, #0xff
     660:	b.eq	68c <_ZN11__sanitizerL25TracerThreadSignalHandlerEiPNS_19__sanitizer_siginfoEPv+0xbc>  // b.none
     664:	ldr	x0, [x19]
     668:	mov	x1, #0x1                   	// #1
     66c:	str	xzr, [x21]
     670:	str	x1, [x0, #104]
     674:	cmp	w20, #0x6
     678:	cset	w0, ne  // ne = any
     67c:	add	w0, w0, #0x1
     680:	bl	0 <_ZN11__sanitizer14internal__exitEi>
     684:	bl	570 <_ZN11__sanitizer15ThreadSuspender14KillAllThreadsEv>
     688:	b	650 <_ZN11__sanitizerL25TracerThreadSignalHandlerEiPNS_19__sanitizer_siginfoEPv+0x80>
     68c:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     690:	add	x0, x0, #0x0
     694:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     698:	bl	0 <_ZN11__sanitizer3DieEv>
     69c:	nop

00000000000006a0 <_ZN11__sanitizerL23TracerThreadDieCallbackEv>:
     6a0:	stp	x19, x20, [sp, #-32]!
     6a4:	adrp	x19, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     6a8:	ldr	x20, [x19]
     6ac:	str	x30, [sp, #16]
     6b0:	cbz	x20, 6cc <_ZN11__sanitizerL23TracerThreadDieCallbackEv+0x2c>
     6b4:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
     6b8:	adrp	x1, 0 <_ZN11__sanitizer23stoptheworld_tracer_pidE>
     6bc:	ldr	x1, [x1]
     6c0:	ldr	x1, [x1]
     6c4:	cmp	x0, x1
     6c8:	b.eq	6d8 <_ZN11__sanitizerL23TracerThreadDieCallbackEv+0x38>  // b.none
     6cc:	ldr	x30, [sp, #16]
     6d0:	ldp	x19, x20, [sp], #32
     6d4:	ret
     6d8:	mov	x0, x20
     6dc:	bl	570 <_ZN11__sanitizer15ThreadSuspender14KillAllThreadsEv>
     6e0:	str	xzr, [x19]
     6e4:	ldr	x30, [sp, #16]
     6e8:	ldp	x19, x20, [sp], #32
     6ec:	ret

00000000000006f0 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv>:
     6f0:	stp	x19, x20, [sp, #-128]!
     6f4:	stp	x21, x22, [sp, #16]
     6f8:	mov	x21, x0
     6fc:	adrp	x22, 0 <_ZN11__sanitizer14PageSizeCachedE>
     700:	stp	x23, x24, [sp, #32]
     704:	add	x23, sp, #0x60
     708:	ldr	w1, [x21, #40]
     70c:	mov	x0, x23
     710:	stp	x25, x30, [sp, #48]
     714:	bl	0 <_ZN11__sanitizer12ThreadListerC1Ei>
     718:	stp	xzr, xzr, [sp, #72]
     71c:	ldr	x19, [x22]
     720:	str	xzr, [sp, #88]
     724:	ldr	x0, [x19]
     728:	cbz	x0, 8dc <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x1ec>
     72c:	sub	x1, x0, #0x1
     730:	tst	x1, x0
     734:	b.ne	8e8 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x1f8>  // b.any
     738:	add	x19, x0, #0x7
     73c:	neg	x0, x0
     740:	and	x19, x19, x0
     744:	mov	w2, #0x0                   	// #0
     748:	mov	x0, x19
     74c:	adrp	x24, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     750:	add	x1, x24, #0x0
     754:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     758:	ldr	x1, [sp, #72]
     75c:	mov	x20, x0
     760:	ldr	x2, [sp, #88]
     764:	lsl	x2, x2, #3
     768:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     76c:	ldp	x0, x1, [sp, #72]
     770:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     774:	stp	x20, x19, [sp, #72]
     778:	cmp	x19, #0x3ff
     77c:	b.ls	878 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x188>  // b.plast
     780:	add	x25, sp, #0x48
     784:	mov	w24, #0x0                   	// #0
     788:	mov	x1, x25
     78c:	mov	x0, x23
     790:	bl	0 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE>
     794:	cbz	w0, 83c <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x14c>
     798:	cmp	w0, #0x1
     79c:	b.ne	804 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x114>  // b.any
     7a0:	ldr	x19, [sp, #72]
     7a4:	mov	w20, w0
     7a8:	ldr	x22, [sp, #88]
     7ac:	add	x22, x19, x22, lsl #3
     7b0:	cmp	x22, x19
     7b4:	b.eq	7d4 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0xe4>  // b.none
     7b8:	ldr	x1, [x19], #8
     7bc:	mov	x0, x21
     7c0:	bl	128 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy>
     7c4:	ands	w0, w0, #0xff
     7c8:	csel	w20, w20, w0, eq  // eq = none
     7cc:	cmp	x22, x19
     7d0:	b.ne	7b8 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0xc8>  // b.any
     7d4:	add	w24, w24, #0x1
     7d8:	eor	w20, w20, #0x1
     7dc:	cmp	w24, #0x1d
     7e0:	cset	w0, gt
     7e4:	orr	w20, w0, w20
     7e8:	tst	w20, #0xff
     7ec:	b.eq	788 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x98>  // b.none
     7f0:	ldr	x19, [sp, #72]
     7f4:	ldr	x0, [x21, #32]
     7f8:	cmp	x0, #0x0
     7fc:	cset	w20, ne  // ne = any
     800:	b	84c <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x15c>
     804:	ldr	x19, [sp, #72]
     808:	ldr	x22, [sp, #88]
     80c:	add	x22, x19, x22, lsl #3
     810:	cmp	x19, x22
     814:	b.eq	7f4 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x104>  // b.none
     818:	ldr	x1, [x19], #8
     81c:	mov	x0, x21
     820:	mov	w20, #0x0                   	// #0
     824:	bl	128 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy>
     828:	ands	w0, w0, #0xff
     82c:	csel	w20, w20, w0, eq  // eq = none
     830:	cmp	x22, x19
     834:	b.ne	7b8 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0xc8>  // b.any
     838:	b	7d4 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0xe4>
     83c:	mov	x0, x21
     840:	bl	480 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv>
     844:	ldr	x19, [sp, #72]
     848:	mov	w20, #0x0                   	// #0
     84c:	ldr	x1, [sp, #80]
     850:	mov	x0, x19
     854:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     858:	mov	x0, x23
     85c:	bl	0 <_ZN11__sanitizer12ThreadListerD1Ev>
     860:	mov	w0, w20
     864:	ldp	x21, x22, [sp, #16]
     868:	ldp	x23, x24, [sp, #32]
     86c:	ldp	x25, x30, [sp, #48]
     870:	ldp	x19, x20, [sp], #128
     874:	ret
     878:	ldr	x3, [sp, #88]
     87c:	cmp	x3, #0x80
     880:	b.hi	904 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x214>  // b.pmore
     884:	ldr	x22, [x22]
     888:	ldr	x0, [x22]
     88c:	cbz	x0, 8f8 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x208>
     890:	sub	x1, x0, #0x1
     894:	tst	x1, x0
     898:	b.ne	8e8 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x1f8>  // b.any
     89c:	add	x19, x0, #0x3ff
     8a0:	neg	x0, x0
     8a4:	and	x19, x19, x0
     8a8:	add	x1, x24, #0x0
     8ac:	mov	w2, #0x0                   	// #0
     8b0:	mov	x0, x19
     8b4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     8b8:	mov	x20, x0
     8bc:	ldr	x1, [sp, #72]
     8c0:	ldr	x2, [sp, #88]
     8c4:	lsl	x2, x2, #3
     8c8:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     8cc:	ldp	x0, x1, [sp, #72]
     8d0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     8d4:	stp	x20, x19, [sp, #72]
     8d8:	b	780 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x90>
     8dc:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     8e0:	str	x0, [x19]
     8e4:	b	72c <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x3c>
     8e8:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     8ec:	add	x0, x0, #0x0
     8f0:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     8f4:	bl	0 <_ZN11__sanitizer3DieEv>
     8f8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     8fc:	str	x0, [x22]
     900:	b	890 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x1a0>
     904:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     908:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     90c:	add	x2, x2, #0x0
     910:	add	x0, x0, #0x0
     914:	mov	x4, #0x80                  	// #128
     918:	mov	w1, #0x1fd                 	// #509
     91c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000920 <_ZN11__sanitizerL12TracerThreadEPv>:
     920:	stp	x19, x20, [sp, #-320]!
     924:	mov	x1, #0x9                   	// #9
     928:	mov	x4, #0x0                   	// #0
     92c:	mov	x3, #0x0                   	// #0
     930:	mov	x2, #0x0                   	// #0
     934:	stp	x21, x22, [sp, #16]
     938:	mov	x21, x0
     93c:	mov	w0, #0x1                   	// #1
     940:	stp	x23, x24, [sp, #32]
     944:	stp	x25, x26, [sp, #48]
     948:	stp	x27, x28, [sp, #64]
     94c:	str	x30, [sp, #80]
     950:	bl	0 <_ZN11__sanitizer14internal_prctlEimmmm>
     954:	bl	0 <_ZN11__sanitizer16internal_getppidEv>
     958:	ldr	x1, [x21, #112]
     95c:	cmp	x0, x1
     960:	b.ne	d1c <_ZN11__sanitizerL12TracerThreadEPv+0x3fc>  // b.any
     964:	add	x19, x21, #0x10
     968:	adrp	x27, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     96c:	mov	x0, x19
     970:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
     974:	mov	x0, x19
     978:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     97c:	add	x0, x27, #0x0
     980:	bl	0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
     984:	tst	w0, #0xff
     988:	b.eq	c68 <_ZN11__sanitizerL12TracerThreadEPv+0x348>  // b.none
     98c:	adrp	x22, 0 <_ZN11__sanitizer14PageSizeCachedE>
     990:	bl	0 <_ZN11__sanitizer16internal_getppidEv>
     994:	adrp	x1, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     998:	add	x1, x1, #0x0
     99c:	ldr	x20, [x22]
     9a0:	stp	x21, x1, [sp, #120]
     9a4:	mov	x19, x0
     9a8:	stp	xzr, xzr, [sp, #136]
     9ac:	ldr	x1, [x20]
     9b0:	str	xzr, [sp, #152]
     9b4:	cbz	x1, b90 <_ZN11__sanitizerL12TracerThreadEPv+0x270>
     9b8:	sub	x0, x1, #0x1
     9bc:	tst	x0, x1
     9c0:	b.ne	c58 <_ZN11__sanitizerL12TracerThreadEPv+0x338>  // b.any
     9c4:	add	x20, x1, #0x7
     9c8:	neg	x1, x1
     9cc:	and	x20, x20, x1
     9d0:	mov	w2, #0x0                   	// #0
     9d4:	mov	x0, x20
     9d8:	adrp	x23, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     9dc:	add	x1, x23, #0x0
     9e0:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     9e4:	ldr	x1, [sp, #136]
     9e8:	mov	x24, x0
     9ec:	ldr	x2, [sp, #152]
     9f0:	lsl	x2, x2, #3
     9f4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     9f8:	ldp	x0, x1, [sp, #136]
     9fc:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     a00:	stp	x24, x20, [sp, #136]
     a04:	lsr	x1, x20, #3
     a08:	cmp	x1, #0x3ff
     a0c:	b.ls	bbc <_ZN11__sanitizerL12TracerThreadEPv+0x29c>  // b.plast
     a10:	ldr	x20, [x22]
     a14:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     a18:	add	x28, sp, #0x78
     a1c:	str	w19, [sp, #160]
     a20:	str	x28, [x0]
     a24:	ldr	x0, [x20]
     a28:	cbz	x0, c3c <_ZN11__sanitizerL12TracerThreadEPv+0x31c>
     a2c:	sub	x19, x0, #0x1
     a30:	ands	x19, x19, x0
     a34:	b.ne	c58 <_ZN11__sanitizerL12TracerThreadEPv+0x338>  // b.any
     a38:	neg	x20, x0
     a3c:	mov	x24, #0x1fff                	// #8191
     a40:	add	x0, x0, x24
     a44:	add	x1, x23, #0x0
     a48:	and	x20, x0, x20
     a4c:	mov	w2, #0x0                   	// #0
     a50:	mov	x0, x20
     a54:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     a58:	mov	x2, #0x0                   	// #0
     a5c:	mov	x1, #0x0                   	// #0
     a60:	mov	x26, x0
     a64:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     a68:	mov	x1, #0x0                   	// #0
     a6c:	mov	x0, #0x0                   	// #0
     a70:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     a74:	cmp	x20, x24
     a78:	b.ls	c78 <_ZN11__sanitizerL12TracerThreadEPv+0x358>  // b.plast
     a7c:	add	x23, sp, #0x60
     a80:	mov	x2, #0x2000                	// #8192
     a84:	mov	w1, #0x0                   	// #0
     a88:	mov	x0, x26
     a8c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     a90:	mov	w25, #0x4                   	// #4
     a94:	mov	x0, x23
     a98:	mov	x2, #0x18                  	// #24
     a9c:	mov	w1, #0x0                   	// #0
     aa0:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     aa4:	mov	x2, #0x2000                	// #8192
     aa8:	mov	x0, x23
     aac:	adrp	x24, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     ab0:	adrp	x23, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     ab4:	add	x22, sp, #0xa8
     ab8:	add	x24, x24, #0x0
     abc:	add	x23, x23, #0x0
     ac0:	mov	x1, #0x0                   	// #0
     ac4:	movk	w25, #0x800, lsl #16
     ac8:	str	x26, [sp, #96]
     acc:	str	x2, [sp, #112]
     ad0:	bl	0 <_ZN11__sanitizer20internal_sigaltstackEPKvPv>
     ad4:	nop
     ad8:	mov	x2, #0x98                  	// #152
     adc:	mov	w1, #0x0                   	// #0
     ae0:	mov	x0, x22
     ae4:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     ae8:	ldr	w0, [x23, x19, lsl #2]
     aec:	mov	x1, x22
     af0:	add	x19, x19, #0x1
     af4:	mov	x2, #0x0                   	// #0
     af8:	str	x24, [sp, #168]
     afc:	str	w25, [sp, #304]
     b00:	bl	0 <_ZN11__sanitizer29internal_sigaction_norestorerEiPKvPv>
     b04:	cmp	x19, #0x7
     b08:	b.ne	ad8 <_ZN11__sanitizerL12TracerThreadEPv+0x1b8>  // b.any
     b0c:	mov	x0, x28
     b10:	bl	6f0 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv>
     b14:	tst	w0, #0xff
     b18:	b.ne	ba0 <_ZN11__sanitizerL12TracerThreadEPv+0x280>  // b.any
     b1c:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
     b20:	mov	w19, #0x3                   	// #3
     b24:	ldr	x0, [x0]
     b28:	ldr	w0, [x0]
     b2c:	cbnz	w0, c48 <_ZN11__sanitizerL12TracerThreadEPv+0x328>
     b30:	add	x0, x27, #0x0
     b34:	bl	0 <_ZN11__sanitizer17RemoveDieCallbackEPFvvE>
     b38:	tst	w0, #0xff
     b3c:	b.eq	cf0 <_ZN11__sanitizerL12TracerThreadEPv+0x3d0>  // b.none
     b40:	mov	x0, #0x1                   	// #1
     b44:	str	x0, [x21, #104]
     b48:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     b4c:	mov	x1, x20
     b50:	str	xzr, [x0]
     b54:	mov	x0, x26
     b58:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     b5c:	adrp	x1, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     b60:	add	x2, x1, #0x0
     b64:	ldp	x0, x1, [sp, #136]
     b68:	str	x2, [sp, #128]
     b6c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     b70:	mov	w0, w19
     b74:	ldp	x21, x22, [sp, #16]
     b78:	ldp	x23, x24, [sp, #32]
     b7c:	ldp	x25, x26, [sp, #48]
     b80:	ldp	x27, x28, [sp, #64]
     b84:	ldr	x30, [sp, #80]
     b88:	ldp	x19, x20, [sp], #320
     b8c:	ret
     b90:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     b94:	mov	x1, x0
     b98:	str	x0, [x20]
     b9c:	b	9b8 <_ZN11__sanitizerL12TracerThreadEPv+0x98>
     ba0:	ldp	x2, x1, [x21]
     ba4:	add	x0, x28, #0x8
     ba8:	mov	w19, #0x0                   	// #0
     bac:	blr	x2
     bb0:	mov	x0, x28
     bb4:	bl	480 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv>
     bb8:	b	b30 <_ZN11__sanitizerL12TracerThreadEPv+0x210>
     bbc:	ldr	x3, [sp, #152]
     bc0:	cmp	x3, #0x400
     bc4:	b.hi	d00 <_ZN11__sanitizerL12TracerThreadEPv+0x3e0>  // b.pmore
     bc8:	ldr	x20, [x22]
     bcc:	ldr	x0, [x20]
     bd0:	cbz	x0, cd8 <_ZN11__sanitizerL12TracerThreadEPv+0x3b8>
     bd4:	sub	x1, x0, #0x1
     bd8:	tst	x1, x0
     bdc:	b.ne	c58 <_ZN11__sanitizerL12TracerThreadEPv+0x338>  // b.any
     be0:	mov	x2, #0x1fff                	// #8191
     be4:	add	x20, x0, x2
     be8:	neg	x0, x0
     bec:	add	x1, x23, #0x0
     bf0:	and	x20, x20, x0
     bf4:	mov	w2, #0x0                   	// #0
     bf8:	mov	x0, x20
     bfc:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     c00:	ldr	x1, [sp, #136]
     c04:	mov	x24, x0
     c08:	ldr	x2, [sp, #152]
     c0c:	add	x28, sp, #0x78
     c10:	lsl	x2, x2, #3
     c14:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     c18:	ldp	x0, x1, [sp, #136]
     c1c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     c20:	stp	x24, x20, [sp, #136]
     c24:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     c28:	ldr	x20, [x22]
     c2c:	str	x28, [x0]
     c30:	str	w19, [sp, #160]
     c34:	ldr	x0, [x20]
     c38:	cbnz	x0, a2c <_ZN11__sanitizerL12TracerThreadEPv+0x10c>
     c3c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     c40:	str	x0, [x20]
     c44:	b	a2c <_ZN11__sanitizerL12TracerThreadEPv+0x10c>
     c48:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     c4c:	add	x0, x0, #0x0
     c50:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     c54:	b	b30 <_ZN11__sanitizerL12TracerThreadEPv+0x210>
     c58:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     c5c:	add	x0, x0, #0x0
     c60:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     c64:	bl	0 <_ZN11__sanitizer3DieEv>
     c68:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     c6c:	add	x0, x0, #0x0
     c70:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     c74:	bl	0 <_ZN11__sanitizer3DieEv>
     c78:	ldr	x22, [x22]
     c7c:	ldr	x0, [x22]
     c80:	cbz	x0, ce4 <_ZN11__sanitizerL12TracerThreadEPv+0x3c4>
     c84:	sub	x1, x0, #0x1
     c88:	tst	x1, x0
     c8c:	b.ne	c58 <_ZN11__sanitizerL12TracerThreadEPv+0x338>  // b.any
     c90:	mov	x1, #0x1fff                	// #8191
     c94:	add	x22, x0, x1
     c98:	neg	x0, x0
     c9c:	add	x1, x23, #0x0
     ca0:	and	x22, x22, x0
     ca4:	mov	w2, #0x0                   	// #0
     ca8:	mov	x0, x22
     cac:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     cb0:	mov	x2, #0x0                   	// #0
     cb4:	mov	x23, x0
     cb8:	mov	x1, x26
     cbc:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     cc0:	mov	x1, x20
     cc4:	mov	x0, x26
     cc8:	mov	x20, x22
     ccc:	mov	x26, x23
     cd0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     cd4:	b	a7c <_ZN11__sanitizerL12TracerThreadEPv+0x15c>
     cd8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     cdc:	str	x0, [x20]
     ce0:	b	bd4 <_ZN11__sanitizerL12TracerThreadEPv+0x2b4>
     ce4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     ce8:	str	x0, [x22]
     cec:	b	c84 <_ZN11__sanitizerL12TracerThreadEPv+0x364>
     cf0:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     cf4:	add	x0, x0, #0x0
     cf8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     cfc:	bl	0 <_ZN11__sanitizer3DieEv>
     d00:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     d04:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     d08:	add	x2, x2, #0x0
     d0c:	add	x0, x0, #0x0
     d10:	mov	x4, #0x400                 	// #1024
     d14:	mov	w1, #0x1fd                 	// #509
     d18:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     d1c:	mov	w0, #0x4                   	// #4
     d20:	bl	0 <_ZN11__sanitizer14internal__exitEi>
     d24:	nop

0000000000000d28 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_>:
     d28:	stp	x19, x20, [sp, #-208]!
     d2c:	mov	x4, #0x0                   	// #0
     d30:	mov	x20, x0
     d34:	mov	x19, x1
     d38:	mov	x3, #0x0                   	// #0
     d3c:	mov	x2, #0x0                   	// #0
     d40:	mov	x1, #0x0                   	// #0
     d44:	mov	w0, #0x3                   	// #3
     d48:	stp	x21, x22, [sp, #16]
     d4c:	stp	x23, x24, [sp, #32]
     d50:	stp	x25, x26, [sp, #48]
     d54:	str	x30, [sp, #64]
     d58:	bl	0 <_ZN11__sanitizer14internal_prctlEimmmm>
     d5c:	mov	x22, x0
     d60:	cbz	w0, ecc <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x1a4>
     d64:	add	x24, sp, #0x58
     d68:	add	x0, x24, #0x10
     d6c:	bl	0 <_ZN11__sanitizer13BlockingMutexC1Ev>
     d70:	stp	x20, x19, [sp, #88]
     d74:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
     d78:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
     d7c:	str	xzr, [sp, #192]
     d80:	ldr	x20, [x20]
     d84:	str	x0, [sp, #200]
     d88:	ldr	x19, [x20]
     d8c:	cbz	x19, ebc <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x194>
     d90:	mov	w2, #0x0                   	// #0
     d94:	add	x25, x19, #0x200, lsl #12
     d98:	mov	x0, x25
     d9c:	adrp	x1, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     da0:	add	x1, x1, #0x0
     da4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     da8:	mov	x1, x19
     dac:	mov	x23, x0
     db0:	bl	0 <_ZN11__sanitizer16MprotectNoAccessEmm>
     db4:	tst	w0, #0xff
     db8:	b.eq	fe8 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x2c0>  // b.none
     dbc:	add	x0, x24, #0x10
     dc0:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
     dc4:	adrp	x1, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     dc8:	add	x1, x1, #0x0
     dcc:	add	x0, x1, #0x8
     dd0:	mov	x26, x1
     dd4:	mov	x20, x0
     dd8:	adrp	x21, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     ddc:	bl	0 <_ZN11__sanitizer19internal_sigfillsetEPNS_20__sanitizer_sigset_tE>
     de0:	add	x21, x21, #0x0
     de4:	mov	w1, #0x6                   	// #6
     de8:	mov	x19, #0x0                   	// #0
     dec:	b	df4 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0xcc>
     df0:	ldr	w1, [x21, x19, lsl #2]
     df4:	add	x19, x19, #0x1
     df8:	mov	x0, x20
     dfc:	bl	0 <_ZN11__sanitizer18internal_sigdelsetEPNS_20__sanitizer_sigset_tEi>
     e00:	cmp	x19, #0x7
     e04:	b.ne	df0 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0xc8>  // b.any
     e08:	add	x26, x26, #0x88
     e0c:	mov	x1, x20
     e10:	mov	x2, x26
     e14:	mov	w0, #0x0                   	// #0
     e18:	bl	0 <_ZN11__sanitizer20internal_sigprocmaskEiPNS_20__sanitizer_sigset_tES1_>
     e1c:	sxtw	x3, w0
     e20:	cbnz	w0, 1008 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x2e0>
     e24:	mov	x3, x24
     e28:	mov	w2, #0x700                 	// #1792
     e2c:	mov	x6, #0x0                   	// #0
     e30:	mov	x5, #0x0                   	// #0
     e34:	mov	x4, #0x0                   	// #0
     e38:	add	x1, x23, x25
     e3c:	movk	w2, #0x80, lsl #16
     e40:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     e44:	add	x0, x0, #0x0
     e48:	bl	0 <_ZN11__sanitizer14internal_cloneEPFiPvES0_iS0_PiS0_S3_>
     e4c:	mov	x2, #0x0                   	// #0
     e50:	mov	x19, x0
     e54:	mov	x1, x26
     e58:	add	x20, sp, #0x54
     e5c:	mov	w0, #0x2                   	// #2
     e60:	bl	0 <_ZN11__sanitizer20internal_sigprocmaskEiPNS_20__sanitizer_sigset_tES1_>
     e64:	mov	x0, x19
     e68:	mov	x1, x20
     e6c:	str	wzr, [sp, #84]
     e70:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     e74:	tst	w0, #0xff
     e78:	b.eq	f18 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x1f0>  // b.none
     e7c:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
     e80:	ldr	x0, [x0]
     e84:	ldr	w0, [x0]
     e88:	cbnz	w0, fc4 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x29c>
     e8c:	add	x0, x24, #0x10
     e90:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     e94:	mov	x1, x25
     e98:	mov	x0, x23
     e9c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     ea0:	cbz	w22, ee8 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x1c0>
     ea4:	ldp	x21, x22, [sp, #16]
     ea8:	ldp	x23, x24, [sp, #32]
     eac:	ldp	x25, x26, [sp, #48]
     eb0:	ldr	x30, [sp, #64]
     eb4:	ldp	x19, x20, [sp], #208
     eb8:	ret
     ebc:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     ec0:	mov	x19, x0
     ec4:	str	x0, [x20]
     ec8:	b	d90 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x68>
     ecc:	mov	x4, #0x0                   	// #0
     ed0:	mov	x3, #0x0                   	// #0
     ed4:	mov	x2, #0x0                   	// #0
     ed8:	mov	x1, #0x1                   	// #1
     edc:	mov	w0, #0x4                   	// #4
     ee0:	bl	0 <_ZN11__sanitizer14internal_prctlEimmmm>
     ee4:	b	d64 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x3c>
     ee8:	mov	x4, #0x0                   	// #0
     eec:	mov	x3, #0x0                   	// #0
     ef0:	mov	x2, #0x0                   	// #0
     ef4:	mov	x1, #0x0                   	// #0
     ef8:	mov	w0, #0x4                   	// #4
     efc:	bl	0 <_ZN11__sanitizer14internal_prctlEimmmm>
     f00:	ldp	x21, x22, [sp, #16]
     f04:	ldp	x23, x24, [sp, #32]
     f08:	ldp	x25, x26, [sp, #48]
     f0c:	ldr	x30, [sp, #64]
     f10:	ldp	x19, x20, [sp], #208
     f14:	ret
     f18:	adrp	x26, 0 <_ZN11__sanitizer23stoptheworld_tracer_pidE>
     f1c:	adrp	x21, 0 <_ZN11__sanitizer24stoptheworld_tracer_ppidE>
     f20:	ldr	x0, [x26]
     f24:	str	x19, [x0]
     f28:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
     f2c:	ldr	x5, [x21]
     f30:	mov	x6, x0
     f34:	mov	x1, x19
     f38:	mov	x4, #0x0                   	// #0
     f3c:	mov	x3, #0x0                   	// #0
     f40:	mov	x2, #0x0                   	// #0
     f44:	mov	w0, #0x6d61                	// #28001
     f48:	str	x6, [x5]
     f4c:	movk	w0, #0x5961, lsl #16
     f50:	bl	0 <_ZN11__sanitizer14internal_prctlEimmmm>
     f54:	add	x0, x24, #0x10
     f58:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     f5c:	ldr	x0, [sp, #192]
     f60:	cbnz	x0, f74 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x24c>
     f64:	nop
     f68:	bl	0 <sched_yield>
     f6c:	ldr	x0, [sp, #192]
     f70:	cbz	x0, f68 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x240>
     f74:	mov	w2, #0x40000000            	// #1073741824
     f78:	mov	x1, #0x0                   	// #0
     f7c:	mov	w0, w19
     f80:	bl	0 <_ZN11__sanitizer16internal_waitpidEiPii>
     f84:	mov	x1, x20
     f88:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     f8c:	tst	w0, #0xff
     f90:	b.eq	fb0 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x288>  // b.none
     f94:	ldr	w1, [sp, #84]
     f98:	cmp	w1, #0x4
     f9c:	b.eq	f74 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x24c>  // b.none
     fa0:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
     fa4:	ldr	x0, [x0]
     fa8:	ldr	w0, [x0]
     fac:	cbnz	w0, fd8 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x2b0>
     fb0:	ldr	x26, [x26]
     fb4:	ldr	x21, [x21]
     fb8:	str	xzr, [x26]
     fbc:	str	xzr, [x21]
     fc0:	b	e94 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x16c>
     fc4:	ldr	w1, [sp, #84]
     fc8:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     fcc:	add	x0, x0, #0x0
     fd0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     fd4:	b	e8c <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x164>
     fd8:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     fdc:	add	x0, x0, #0x0
     fe0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     fe4:	b	fb0 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x288>
     fe8:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     fec:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     ff0:	add	x2, x2, #0x0
     ff4:	add	x0, x0, #0x0
     ff8:	mov	x4, #0x0                   	// #0
     ffc:	mov	x3, #0x0                   	// #0
    1000:	mov	w1, #0x152                 	// #338
    1004:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1008:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    100c:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    1010:	add	x2, x2, #0x0
    1014:	add	x0, x0, #0x0
    1018:	mov	x4, #0x0                   	// #0
    101c:	mov	w1, #0x1ac                 	// #428
    1020:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1024:	nop

0000000000001028 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ContainsTidEy>:
    1028:	ldr	x3, [x0, #24]
    102c:	cbz	x3, 105c <_ZNK11__sanitizer25SuspendedThreadsListLinux11ContainsTidEy+0x34>
    1030:	ldr	x4, [x0, #8]
    1034:	mov	x0, #0x0                   	// #0
    1038:	b	1044 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ContainsTidEy+0x1c>
    103c:	cmp	x0, x3
    1040:	b.eq	105c <_ZNK11__sanitizer25SuspendedThreadsListLinux11ContainsTidEy+0x34>  // b.none
    1044:	ldr	x2, [x4, x0, lsl #3]
    1048:	add	x0, x0, #0x1
    104c:	cmp	x2, x1
    1050:	b.ne	103c <_ZNK11__sanitizer25SuspendedThreadsListLinux11ContainsTidEy+0x14>  // b.any
    1054:	mov	w0, #0x1                   	// #1
    1058:	ret
    105c:	mov	w0, #0x0                   	// #0
    1060:	ret
    1064:	nop

0000000000001068 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy>:
    1068:	stp	x19, x20, [sp, #-64]!
    106c:	stp	x21, x22, [sp, #16]
    1070:	add	x21, x0, #0x8
    1074:	ldr	x4, [x0, #16]
    1078:	str	x1, [sp, #56]
    107c:	ldr	x3, [x21, #16]
    1080:	str	x30, [sp, #32]
    1084:	lsr	x4, x4, #3
    1088:	cmp	x3, x4
    108c:	b.hi	1178 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0x110>  // b.pmore
    1090:	mov	x19, x0
    1094:	add	x20, x3, #0x1
    1098:	b.eq	10c4 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0x5c>  // b.none
    109c:	ldr	x22, [x0, #8]
    10a0:	str	x20, [x21, #16]
    10a4:	add	x0, x22, x3, lsl #3
    10a8:	add	x1, sp, #0x38
    10ac:	mov	x2, #0x8                   	// #8
    10b0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    10b4:	ldp	x21, x22, [sp, #16]
    10b8:	ldr	x30, [sp, #32]
    10bc:	ldp	x19, x20, [sp], #64
    10c0:	ret
    10c4:	tst	x3, x20
    10c8:	b.eq	1104 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0x9c>  // b.none
    10cc:	clz	x4, x20
    10d0:	mov	w0, #0x3f                  	// #63
    10d4:	sub	w0, w0, w4
    10d8:	mov	x2, #0x1                   	// #1
    10dc:	add	w4, w0, #0x1
    10e0:	lsl	x4, x2, x4
    10e4:	cmp	x4, x20
    10e8:	b.ls	11c4 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0x15c>  // b.plast
    10ec:	lsl	x0, x2, x0
    10f0:	cmp	x20, x0
    10f4:	b.ls	11e0 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0x178>  // b.plast
    10f8:	cmp	x3, x4
    10fc:	b.hi	119c <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0x134>  // b.pmore
    1100:	mov	x20, x4
    1104:	adrp	x22, 0 <_ZN11__sanitizer14PageSizeCachedE>
    1108:	lsl	x20, x20, #3
    110c:	ldr	x22, [x22]
    1110:	ldr	x0, [x22]
    1114:	cbz	x0, 1190 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0x128>
    1118:	sub	x1, x0, #0x1
    111c:	tst	x0, x1
    1120:	b.ne	11b4 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0x14c>  // b.any
    1124:	add	x20, x20, x1
    1128:	neg	x0, x0
    112c:	and	x20, x20, x0
    1130:	mov	w2, #0x0                   	// #0
    1134:	mov	x0, x20
    1138:	adrp	x1, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    113c:	add	x1, x1, #0x0
    1140:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
    1144:	ldr	x1, [x19, #8]
    1148:	mov	x22, x0
    114c:	ldr	x2, [x21, #16]
    1150:	lsl	x2, x2, #3
    1154:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    1158:	ldr	x0, [x19, #8]
    115c:	ldr	x1, [x21, #8]
    1160:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    1164:	ldr	x3, [x21, #16]
    1168:	str	x22, [x19, #8]
    116c:	str	x20, [x21, #8]
    1170:	add	x20, x3, #0x1
    1174:	b	10a0 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0x38>
    1178:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    117c:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    1180:	add	x2, x2, #0x0
    1184:	add	x0, x0, #0x0
    1188:	mov	w1, #0x1be                 	// #446
    118c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1190:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
    1194:	str	x0, [x22]
    1198:	b	1118 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0xb0>
    119c:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    11a0:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    11a4:	add	x2, x2, #0x0
    11a8:	add	x0, x0, #0x0
    11ac:	mov	w1, #0x1fd                 	// #509
    11b0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    11b4:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    11b8:	add	x0, x0, #0x0
    11bc:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
    11c0:	bl	0 <_ZN11__sanitizer3DieEv>
    11c4:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    11c8:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    11cc:	mov	x3, x20
    11d0:	add	x2, x2, #0x0
    11d4:	add	x0, x0, #0x0
    11d8:	mov	w1, #0x17b                 	// #379
    11dc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    11e0:	mov	x4, x0
    11e4:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    11e8:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    11ec:	mov	x3, x20
    11f0:	add	x2, x2, #0x0
    11f4:	add	x0, x0, #0x0
    11f8:	mov	w1, #0x17c                 	// #380
    11fc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

sanitizer_stoptheworld_mac.o:     file format elf64-littleaarch64


sanitizer_suppressions.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer18SuppressionContextC1EPPKci>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	add	x20, x0, #0x10
   8:	mov	x19, x0
   c:	stp	x21, x22, [sp, #16]
  10:	adrp	x21, 0 <_ZN11__sanitizer14PageSizeCachedE>
  14:	ldr	x21, [x21]
  18:	str	x30, [sp, #32]
  1c:	str	x1, [x0]
  20:	str	w2, [x0, #8]
  24:	ldr	x0, [x21]
  28:	stp	xzr, xzr, [x20, #8]
  2c:	str	xzr, [x19, #16]
  30:	cbz	x0, b4 <_ZN11__sanitizer18SuppressionContextC1EPPKci+0xb4>
  34:	sub	x1, x0, #0x1
  38:	tst	x1, x0
  3c:	b.ne	c0 <_ZN11__sanitizer18SuppressionContextC1EPPKci+0xc0>  // b.any
  40:	add	x21, x0, #0x1f
  44:	neg	x0, x0
  48:	and	x21, x21, x0
  4c:	mov	w2, #0x0                   	// #0
  50:	mov	x0, x21
  54:	adrp	x1, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
  58:	add	x1, x1, #0x0
  5c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  60:	ldr	x1, [x19, #16]
  64:	mov	x22, x0
  68:	ldr	x2, [x20, #16]
  6c:	lsl	x2, x2, #5
  70:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  74:	ldr	x1, [x20, #8]
  78:	ldr	x0, [x19, #16]
  7c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  80:	str	x22, [x19, #16]
  84:	ldrsw	x2, [x19, #8]
  88:	mov	w0, #0x1                   	// #1
  8c:	str	x21, [x20, #8]
  90:	strb	w0, [x19, #72]
  94:	cmp	x2, #0x20
  98:	b.hi	d0 <_ZN11__sanitizer18SuppressionContextC1EPPKci+0xd0>  // b.pmore
  9c:	add	x0, x19, #0x28
  a0:	mov	w1, #0x0                   	// #0
  a4:	ldp	x21, x22, [sp, #16]
  a8:	ldr	x30, [sp, #32]
  ac:	ldp	x19, x20, [sp], #48
  b0:	b	0 <_ZN11__sanitizer15internal_memsetEPvim>
  b4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  b8:	str	x0, [x21]
  bc:	b	34 <_ZN11__sanitizer18SuppressionContextC1EPPKci+0x34>
  c0:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
  c4:	add	x0, x0, #0x0
  c8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  cc:	bl	0 <_ZN11__sanitizer3DieEv>
  d0:	mov	x3, x2
  d4:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
  d8:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
  dc:	add	x0, x0, #0x0
  e0:	add	x2, x2, #0x0
  e4:	mov	x4, #0x20                  	// #32
  e8:	mov	w1, #0x1c                  	// #28
  ec:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000000f0 <_ZN11__sanitizer18SuppressionContext5ParseEPKc>:
  f0:	stp	x19, x20, [sp, #-112]!
  f4:	mov	x20, x0
  f8:	ldrb	w0, [x0, #72]
  fc:	str	x30, [sp, #72]
 100:	cbz	w0, 3c4 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x2d4>
 104:	mov	x19, x1
 108:	cbz	x1, 2bc <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x1cc>
 10c:	stp	x21, x22, [sp, #16]
 110:	adrp	x22, 0 <_ZN11__sanitizer14PageSizeCachedE>
 114:	add	x21, sp, #0x50
 118:	ldr	x22, [x22]
 11c:	stp	x23, x24, [sp, #32]
 120:	adrp	x23, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 124:	add	x23, x23, #0x0
 128:	stp	x25, x26, [sp, #48]
 12c:	str	x27, [sp, #64]
 130:	ldrb	w0, [x19]
 134:	cmp	w0, #0x20
 138:	ccmp	w0, #0x9, #0x4, ne  // ne = any
 13c:	b.ne	150 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x60>  // b.any
 140:	ldrb	w0, [x19, #1]!
 144:	cmp	w0, #0x20
 148:	ccmp	w0, #0x9, #0x4, ne  // ne = any
 14c:	b.eq	140 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x50>  // b.none
 150:	mov	x0, x19
 154:	mov	w1, #0xa                   	// #10
 158:	bl	0 <_ZN11__sanitizer15internal_strchrEPKci>
 15c:	mov	x26, x0
 160:	cbz	x0, 2dc <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x1ec>
 164:	cmp	x19, x26
 168:	b.eq	178 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x88>  // b.none
 16c:	ldrb	w6, [x19]
 170:	cmp	w6, #0x23
 174:	b.ne	188 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x98>  // b.any
 178:	ldrb	w0, [x26]
 17c:	cbz	w0, 2ac <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x1bc>
 180:	add	x19, x26, #0x1
 184:	b	130 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x40>
 188:	mov	x24, x26
 18c:	nop
 190:	ldurb	w1, [x24, #-1]
 194:	cmp	w1, #0x20
 198:	and	w1, w1, #0xfffffffb
 19c:	ccmp	w1, #0x9, #0x4, ne  // ne = any
 1a0:	b.ne	1b0 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0xc0>  // b.any
 1a4:	sub	x24, x24, #0x1
 1a8:	cmp	x19, x24
 1ac:	b.ne	190 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0xa0>  // b.any
 1b0:	ldr	w7, [x20, #8]
 1b4:	cmp	w7, #0x0
 1b8:	b.le	3bc <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x2cc>
 1bc:	ldr	x8, [x20]
 1c0:	mov	x5, #0x0                   	// #0
 1c4:	nop
 1c8:	ldr	x2, [x8, x5, lsl #3]
 1cc:	mov	w0, w5
 1d0:	mov	w25, w5
 1d4:	mov	x3, x19
 1d8:	ldrb	w1, [x2]
 1dc:	cmp	w1, w6
 1e0:	b.ne	1f8 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x108>  // b.any
 1e4:	nop
 1e8:	ldrb	w1, [x2, #1]!
 1ec:	ldrb	w4, [x3, #1]!
 1f0:	cmp	w4, w1
 1f4:	b.eq	1e8 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0xf8>  // b.none
 1f8:	cbz	w1, 2c8 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x1d8>
 1fc:	add	x5, x5, #0x1
 200:	add	w25, w0, #0x1
 204:	cmp	w7, w5
 208:	b.gt	1c8 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0xd8>
 20c:	cmp	w7, w25
 210:	b.eq	454 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x364>  // b.none
 214:	mov	x27, x20
 218:	mov	x2, #0x20                  	// #32
 21c:	mov	w1, #0x0                   	// #0
 220:	mov	x0, x21
 224:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 228:	sxtw	x25, w25
 22c:	ldr	x3, [x27], #16
 230:	sub	x24, x24, x19
 234:	mov	x2, #0x0                   	// #0
 238:	mov	x1, #0x0                   	// #0
 23c:	add	x0, x24, #0x1
 240:	ldr	x3, [x3, x25, lsl #3]
 244:	str	x3, [sp, #80]
 248:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 24c:	str	x0, [sp, #88]
 250:	mov	x1, x19
 254:	mov	x2, x24
 258:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 25c:	ldr	x0, [sp, #88]
 260:	strb	wzr, [x0, x24]
 264:	ldr	x4, [x20, #24]
 268:	ldr	x0, [x27, #16]
 26c:	lsr	x4, x4, #5
 270:	cmp	x0, x4
 274:	b.hi	394 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x2a4>  // b.pmore
 278:	add	x3, x0, #0x1
 27c:	b.eq	2ec <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x1fc>  // b.none
 280:	ldr	x24, [x20, #16]
 284:	add	x25, x20, x25
 288:	str	x3, [x27, #16]
 28c:	add	x0, x24, x0, lsl #5
 290:	mov	x1, x21
 294:	mov	x2, #0x20                  	// #32
 298:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 29c:	mov	w0, #0x1                   	// #1
 2a0:	strb	w0, [x25, #40]
 2a4:	ldrb	w0, [x26]
 2a8:	cbnz	w0, 180 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x90>
 2ac:	ldp	x21, x22, [sp, #16]
 2b0:	ldp	x23, x24, [sp, #32]
 2b4:	ldp	x25, x26, [sp, #48]
 2b8:	ldr	x27, [sp, #64]
 2bc:	ldr	x30, [sp, #72]
 2c0:	ldp	x19, x20, [sp], #112
 2c4:	ret
 2c8:	ldrb	w1, [x3]
 2cc:	cmp	w1, #0x3a
 2d0:	b.ne	1fc <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x10c>  // b.any
 2d4:	add	x19, x3, #0x1
 2d8:	b	20c <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x11c>
 2dc:	mov	x0, x19
 2e0:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 2e4:	add	x26, x19, x0
 2e8:	b	164 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x74>
 2ec:	tst	x0, x3
 2f0:	b.eq	32c <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x23c>  // b.none
 2f4:	clz	x2, x3
 2f8:	mov	w1, #0x3f                  	// #63
 2fc:	sub	w2, w1, w2
 300:	mov	x1, #0x1                   	// #1
 304:	add	w4, w2, #0x1
 308:	lsl	x4, x1, x4
 30c:	cmp	x4, x3
 310:	b.ls	420 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x330>  // b.plast
 314:	lsl	x1, x1, x2
 318:	cmp	x1, x3
 31c:	b.cs	438 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x348>  // b.hs, b.nlast
 320:	cmp	x0, x4
 324:	b.hi	3f4 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x304>  // b.pmore
 328:	mov	x3, x4
 32c:	ldr	x0, [x22]
 330:	lsl	x19, x3, #5
 334:	cbz	x0, 3b0 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x2c0>
 338:	sub	x1, x0, #0x1
 33c:	tst	x1, x0
 340:	b.ne	410 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x320>  // b.any
 344:	add	x19, x19, x1
 348:	neg	x0, x0
 34c:	and	x19, x19, x0
 350:	mov	x1, x23
 354:	mov	w2, #0x0                   	// #0
 358:	mov	x0, x19
 35c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 360:	mov	x24, x0
 364:	ldr	x1, [x20, #16]
 368:	ldr	x2, [x27, #16]
 36c:	lsl	x2, x2, #5
 370:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 374:	ldr	x1, [x27, #8]
 378:	ldr	x0, [x20, #16]
 37c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 380:	ldr	x0, [x27, #16]
 384:	str	x24, [x20, #16]
 388:	str	x19, [x27, #8]
 38c:	add	x3, x0, #0x1
 390:	b	284 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x194>
 394:	mov	x3, x0
 398:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 39c:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 3a0:	add	x2, x2, #0x0
 3a4:	add	x0, x0, #0x0
 3a8:	mov	w1, #0x1be                 	// #446
 3ac:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3b0:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 3b4:	str	x0, [x22]
 3b8:	b	338 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x248>
 3bc:	mov	w25, #0x0                   	// #0
 3c0:	b	20c <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x11c>
 3c4:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 3c8:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 3cc:	add	x2, x2, #0x0
 3d0:	add	x0, x0, #0x0
 3d4:	mov	x4, #0x0                   	// #0
 3d8:	mov	x3, #0x0                   	// #0
 3dc:	mov	w1, #0x6a                  	// #106
 3e0:	stp	x21, x22, [sp, #16]
 3e4:	stp	x23, x24, [sp, #32]
 3e8:	stp	x25, x26, [sp, #48]
 3ec:	str	x27, [sp, #64]
 3f0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3f4:	mov	x3, x0
 3f8:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 3fc:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 400:	add	x2, x2, #0x0
 404:	add	x0, x0, #0x0
 408:	mov	w1, #0x1fd                 	// #509
 40c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 410:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 414:	add	x0, x0, #0x0
 418:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 41c:	bl	0 <_ZN11__sanitizer3DieEv>
 420:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 424:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 428:	add	x2, x2, #0x0
 42c:	add	x0, x0, #0x0
 430:	mov	w1, #0x17b                 	// #379
 434:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 438:	mov	x4, x1
 43c:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 440:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 444:	add	x2, x2, #0x0
 448:	add	x0, x0, #0x0
 44c:	mov	w1, #0x17c                 	// #380
 450:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 454:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 458:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 45c:	add	x0, x0, #0x0
 460:	ldr	x1, [x1]
 464:	ldr	x1, [x1]
 468:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 46c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000470 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc>:
 470:	stp	x19, x20, [sp, #-112]!
 474:	mov	x19, x1
 478:	str	x30, [sp, #64]
 47c:	ldrb	w1, [x1]
 480:	cbnz	w1, 490 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x20>
 484:	ldr	x30, [sp, #64]
 488:	ldp	x19, x20, [sp], #112
 48c:	ret
 490:	stp	x21, x22, [sp, #16]
 494:	adrp	x22, 0 <_ZN11__sanitizer14PageSizeCachedE>
 498:	mov	x21, x0
 49c:	ldr	x20, [x22]
 4a0:	stp	x23, x24, [sp, #32]
 4a4:	ldr	x2, [x20]
 4a8:	cbz	x2, 5a0 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x130>
 4ac:	sub	x0, x2, #0x1
 4b0:	tst	x0, x2
 4b4:	b.ne	6b8 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x248>  // b.any
 4b8:	add	x24, x2, #0xfff
 4bc:	neg	x2, x2
 4c0:	and	x24, x24, x2
 4c4:	adrp	x23, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 4c8:	mov	w2, #0x0                   	// #0
 4cc:	add	x1, x23, #0x0
 4d0:	mov	x0, x24
 4d4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 4d8:	mov	x2, #0x0                   	// #0
 4dc:	mov	x1, #0x0                   	// #0
 4e0:	mov	x20, x0
 4e4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 4e8:	mov	x1, #0x0                   	// #0
 4ec:	mov	x0, #0x0                   	// #0
 4f0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 4f4:	cmp	x24, #0xfff
 4f8:	b.ls	654 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x1e4>  // b.plast
 4fc:	mov	x2, #0x1000                	// #4096
 500:	mov	w1, #0x0                   	// #0
 504:	mov	x0, x20
 508:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 50c:	strb	wzr, [x20]
 510:	mov	x0, x19
 514:	bl	0 <_ZN11__sanitizer10FileExistsEPKc>
 518:	tst	w0, #0xff
 51c:	b.eq	5b0 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x140>  // b.none
 520:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 524:	ldr	x0, [x0]
 528:	ldr	w0, [x0]
 52c:	cbnz	w0, 580 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x110>
 530:	add	x3, sp, #0x68
 534:	add	x2, sp, #0x60
 538:	add	x1, sp, #0x58
 53c:	mov	x0, x19
 540:	mov	x5, #0x0                   	// #0
 544:	mov	x4, #0x4000000             	// #67108864
 548:	bl	0 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>
 54c:	tst	w0, #0xff
 550:	b.eq	790 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x320>  // b.none
 554:	ldr	x1, [sp, #88]
 558:	mov	x0, x21
 55c:	bl	f0 <_ZN11__sanitizer18SuppressionContext5ParseEPKc>
 560:	mov	x1, x24
 564:	mov	x0, x20
 568:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 56c:	ldp	x21, x22, [sp, #16]
 570:	ldp	x23, x24, [sp, #32]
 574:	ldr	x30, [sp, #64]
 578:	ldp	x19, x20, [sp], #112
 57c:	ret
 580:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 584:	mov	x2, x19
 588:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 58c:	add	x0, x0, #0x0
 590:	ldr	x1, [x1]
 594:	ldr	x1, [x1]
 598:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 59c:	b	530 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0xc0>
 5a0:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 5a4:	mov	x2, x0
 5a8:	str	x0, [x20]
 5ac:	b	4ac <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x3c>
 5b0:	mov	x0, x19
 5b4:	bl	0 <_ZN11__sanitizer14IsAbsolutePathEPKc>
 5b8:	tst	w0, #0xff
 5bc:	b.ne	520 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0xb0>  // b.any
 5c0:	stp	x25, x26, [sp, #48]
 5c4:	ldr	x25, [x22]
 5c8:	ldr	x0, [x25]
 5cc:	cbz	x0, 6d8 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x268>
 5d0:	sub	x1, x0, #0x1
 5d4:	tst	x1, x0
 5d8:	b.ne	6bc <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x24c>  // b.any
 5dc:	add	x26, x0, #0xfff
 5e0:	neg	x0, x0
 5e4:	and	x26, x26, x0
 5e8:	add	x1, x23, #0x0
 5ec:	mov	w2, #0x0                   	// #0
 5f0:	mov	x0, x26
 5f4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 5f8:	mov	x25, x0
 5fc:	mov	x2, #0x0                   	// #0
 600:	mov	x1, #0x0                   	// #0
 604:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 608:	mov	x1, #0x0                   	// #0
 60c:	mov	x0, #0x0                   	// #0
 610:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 614:	cmp	x26, #0xfff
 618:	b.ls	728 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x2b8>  // b.plast
 61c:	mov	w1, #0x0                   	// #0
 620:	mov	x0, x25
 624:	mov	x2, #0x1000                	// #4096
 628:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 62c:	strb	wzr, [x25]
 630:	mov	x0, x25
 634:	mov	x1, #0x1000                	// #4096
 638:	bl	0 <_ZN11__sanitizer20ReadBinaryNameCachedEPcm>
 63c:	cbnz	x0, 6e4 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x274>
 640:	mov	x1, x26
 644:	mov	x0, x25
 648:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 64c:	ldp	x25, x26, [sp, #48]
 650:	b	520 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0xb0>
 654:	stp	x25, x26, [sp, #48]
 658:	ldr	x25, [x22]
 65c:	ldr	x0, [x25]
 660:	cbz	x0, 6cc <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x25c>
 664:	sub	x1, x0, #0x1
 668:	tst	x1, x0
 66c:	b.ne	6bc <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x24c>  // b.any
 670:	add	x25, x0, #0xfff
 674:	neg	x0, x0
 678:	and	x25, x25, x0
 67c:	add	x1, x23, #0x0
 680:	mov	x0, x25
 684:	mov	w2, #0x0                   	// #0
 688:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 68c:	mov	x26, x0
 690:	mov	x2, #0x0                   	// #0
 694:	mov	x1, x20
 698:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 69c:	mov	x1, x24
 6a0:	mov	x0, x20
 6a4:	mov	x24, x25
 6a8:	mov	x20, x26
 6ac:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 6b0:	ldp	x25, x26, [sp, #48]
 6b4:	b	4fc <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x8c>
 6b8:	stp	x25, x26, [sp, #48]
 6bc:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 6c0:	add	x0, x0, #0x0
 6c4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 6c8:	bl	0 <_ZN11__sanitizer3DieEv>
 6cc:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 6d0:	str	x0, [x25]
 6d4:	b	664 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x1f4>
 6d8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 6dc:	str	x0, [x25]
 6e0:	b	5d0 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x160>
 6e4:	mov	x0, x25
 6e8:	bl	0 <_ZN11__sanitizer15StripModuleNameEPKc>
 6ec:	sub	x2, x0, x25
 6f0:	mov	x22, #0xfff                 	// #4095
 6f4:	cmp	x2, x22
 6f8:	mov	x1, x25
 6fc:	csel	x2, x2, x22, ls  // ls = plast
 700:	mov	x0, x20
 704:	bl	0 <_ZN11__sanitizer16internal_strncatEPcPKcm>
 708:	mov	x0, x20
 70c:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 710:	mov	x1, x19
 714:	sub	x2, x22, x0
 718:	mov	x19, x20
 71c:	mov	x0, x20
 720:	bl	0 <_ZN11__sanitizer16internal_strncatEPcPKcm>
 724:	b	640 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x1d0>
 728:	ldr	x22, [x22]
 72c:	ldr	x0, [x22]
 730:	cbz	x0, 784 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x314>
 734:	sub	x1, x0, #0x1
 738:	tst	x1, x0
 73c:	b.ne	6bc <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x24c>  // b.any
 740:	add	x22, x0, #0xfff
 744:	neg	x0, x0
 748:	and	x22, x22, x0
 74c:	add	x1, x23, #0x0
 750:	mov	x0, x22
 754:	mov	w2, #0x0                   	// #0
 758:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 75c:	mov	x23, x0
 760:	mov	x2, #0x0                   	// #0
 764:	mov	x1, x25
 768:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 76c:	mov	x1, x26
 770:	mov	x0, x25
 774:	mov	x26, x22
 778:	mov	x25, x23
 77c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 780:	b	61c <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x1ac>
 784:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 788:	str	x0, [x22]
 78c:	b	734 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x2c4>
 790:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 794:	mov	x2, x19
 798:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 79c:	add	x0, x0, #0x0
 7a0:	ldr	x1, [x1]
 7a4:	stp	x25, x26, [sp, #48]
 7a8:	ldr	x1, [x1]
 7ac:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 7b0:	bl	0 <_ZN11__sanitizer3DieEv>
 7b4:	nop

00000000000007b8 <_ZNK11__sanitizer18SuppressionContext16SuppressionCountEv>:
 7b8:	ldr	x0, [x0, #32]
 7bc:	ret

00000000000007c0 <_ZNK11__sanitizer18SuppressionContext18HasSuppressionTypeEPKc>:
 7c0:	stp	x19, x20, [sp, #-48]!
 7c4:	mov	x20, x0
 7c8:	ldr	w0, [x0, #8]
 7cc:	str	x30, [sp, #32]
 7d0:	cmp	w0, #0x0
 7d4:	b.le	82c <_ZNK11__sanitizer18SuppressionContext18HasSuppressionTypeEPKc+0x6c>
 7d8:	mov	x19, #0x0                   	// #0
 7dc:	stp	x21, x22, [sp, #16]
 7e0:	mov	x21, x1
 7e4:	b	7f4 <_ZNK11__sanitizer18SuppressionContext18HasSuppressionTypeEPKc+0x34>
 7e8:	ldr	w0, [x20, #8]
 7ec:	cmp	w0, w19
 7f0:	b.le	828 <_ZNK11__sanitizer18SuppressionContext18HasSuppressionTypeEPKc+0x68>
 7f4:	ldr	x2, [x20]
 7f8:	mov	w22, w19
 7fc:	mov	x0, x21
 800:	ldr	x1, [x2, x19, lsl #3]
 804:	add	x19, x19, #0x1
 808:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 80c:	cbnz	w0, 7e8 <_ZNK11__sanitizer18SuppressionContext18HasSuppressionTypeEPKc+0x28>
 810:	add	x20, x20, w22, sxtw
 814:	ldp	x21, x22, [sp, #16]
 818:	ldrb	w0, [x20, #40]
 81c:	ldr	x30, [sp, #32]
 820:	ldp	x19, x20, [sp], #48
 824:	ret
 828:	ldp	x21, x22, [sp, #16]
 82c:	mov	w0, #0x0                   	// #0
 830:	ldr	x30, [sp, #32]
 834:	ldp	x19, x20, [sp], #48
 838:	ret
 83c:	nop

0000000000000840 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE>:
 840:	stp	x19, x20, [sp, #-64]!
 844:	mov	x20, x0
 848:	stp	x21, x22, [sp, #16]
 84c:	mov	x21, x2
 850:	mov	x22, x1
 854:	stp	x23, x24, [sp, #32]
 858:	mov	x1, x2
 85c:	mov	x23, x3
 860:	str	x30, [sp, #48]
 864:	strb	wzr, [x0, #72]
 868:	bl	7c0 <_ZNK11__sanitizer18SuppressionContext18HasSuppressionTypeEPKc>
 86c:	tst	w0, #0xff
 870:	b.eq	8dc <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE+0x9c>  // b.none
 874:	ldr	x0, [x20, #32]
 878:	cbz	x0, 8dc <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE+0x9c>
 87c:	mov	x19, #0x0                   	// #0
 880:	b	890 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE+0x50>
 884:	ldr	x0, [x20, #32]
 888:	cmp	x19, x0
 88c:	b.cs	8dc <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE+0x9c>  // b.hs, b.nlast
 890:	ldr	x5, [x20, #16]
 894:	lsl	x4, x19, #5
 898:	mov	x1, x21
 89c:	add	x19, x19, #0x1
 8a0:	add	x24, x5, x4
 8a4:	ldr	x0, [x5, x4]
 8a8:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 8ac:	cbnz	w0, 884 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE+0x44>
 8b0:	ldr	x0, [x24, #8]
 8b4:	mov	x1, x22
 8b8:	bl	0 <_ZN11__sanitizer13TemplateMatchEPKcS1_>
 8bc:	ands	w0, w0, #0xff
 8c0:	b.eq	884 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE+0x44>  // b.none
 8c4:	str	x24, [x23]
 8c8:	ldp	x21, x22, [sp, #16]
 8cc:	ldp	x23, x24, [sp, #32]
 8d0:	ldr	x30, [sp, #48]
 8d4:	ldp	x19, x20, [sp], #64
 8d8:	ret
 8dc:	mov	w0, #0x0                   	// #0
 8e0:	ldp	x21, x22, [sp, #16]
 8e4:	ldp	x23, x24, [sp, #32]
 8e8:	ldr	x30, [sp, #48]
 8ec:	ldp	x19, x20, [sp], #64
 8f0:	ret
 8f4:	nop

00000000000008f8 <_ZNK11__sanitizer18SuppressionContext13SuppressionAtEm>:
 8f8:	ldr	x4, [x0, #32]
 8fc:	cmp	x1, x4
 900:	b.cs	910 <_ZNK11__sanitizer18SuppressionContext13SuppressionAtEm+0x18>  // b.hs, b.nlast
 904:	ldr	x0, [x0, #16]
 908:	add	x0, x0, x1, lsl #5
 90c:	ret
 910:	str	x30, [sp, #-16]!
 914:	mov	x3, x1
 918:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 91c:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 920:	add	x2, x2, #0x0
 924:	add	x0, x0, #0x0
 928:	mov	w1, #0x9e                  	// #158
 92c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000930 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE>:
 930:	stp	x19, x20, [sp, #-96]!
 934:	stp	x21, x22, [sp, #16]
 938:	mov	x21, x1
 93c:	ldr	x1, [x0, #32]
 940:	str	x30, [sp, #64]
 944:	cbz	x1, 9d8 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0xa8>
 948:	adrp	x22, 0 <_ZN11__sanitizer14PageSizeCachedE>
 94c:	mov	x20, x0
 950:	mov	x19, #0x0                   	// #0
 954:	stp	x23, x24, [sp, #32]
 958:	adrp	x23, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 95c:	ldr	x22, [x22]
 960:	add	x23, x23, #0x0
 964:	stp	x25, x26, [sp, #48]
 968:	add	x26, sp, #0x58
 96c:	b	97c <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x4c>
 970:	add	x19, x19, #0x1
 974:	cmp	x19, x1
 978:	b.cs	9d0 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0xa0>  // b.hs, b.nlast
 97c:	ldr	x2, [x20, #16]
 980:	add	x2, x2, x19, lsl #5
 984:	ldr	w0, [x2, #16]
 988:	cbz	w0, 970 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x40>
 98c:	ldp	x4, x3, [x21, #8]
 990:	str	x2, [sp, #88]
 994:	lsr	x4, x4, #3
 998:	cmp	x3, x4
 99c:	b.hi	a94 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x164>  // b.pmore
 9a0:	add	x24, x3, #0x1
 9a4:	b.eq	9e8 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0xb8>  // b.none
 9a8:	ldr	x25, [x21]
 9ac:	str	x24, [x21, #16]
 9b0:	mov	x1, x26
 9b4:	add	x0, x25, x3, lsl #3
 9b8:	mov	x2, #0x8                   	// #8
 9bc:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 9c0:	ldr	x1, [x20, #32]
 9c4:	add	x19, x19, #0x1
 9c8:	cmp	x19, x1
 9cc:	b.cc	97c <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x4c>  // b.lo, b.ul, b.last
 9d0:	ldp	x23, x24, [sp, #32]
 9d4:	ldp	x25, x26, [sp, #48]
 9d8:	ldp	x21, x22, [sp, #16]
 9dc:	ldr	x30, [sp, #64]
 9e0:	ldp	x19, x20, [sp], #96
 9e4:	ret
 9e8:	tst	x3, x24
 9ec:	b.eq	a28 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0xf8>  // b.none
 9f0:	clz	x2, x24
 9f4:	mov	w0, #0x3f                  	// #63
 9f8:	sub	w0, w0, w2
 9fc:	mov	x2, #0x1                   	// #1
 a00:	add	w4, w0, #0x1
 a04:	lsl	x4, x2, x4
 a08:	cmp	x24, x4
 a0c:	b.cs	abc <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x18c>  // b.hs, b.nlast
 a10:	lsl	x0, x2, x0
 a14:	cmp	x24, x0
 a18:	b.ls	af0 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x1c0>  // b.plast
 a1c:	cmp	x3, x4
 a20:	b.hi	ad8 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x1a8>  // b.pmore
 a24:	mov	x24, x4
 a28:	ldr	x0, [x22]
 a2c:	lsl	x24, x24, #3
 a30:	cbz	x0, a88 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x158>
 a34:	sub	x1, x0, #0x1
 a38:	tst	x0, x1
 a3c:	b.ne	aac <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x17c>  // b.any
 a40:	add	x24, x24, x1
 a44:	neg	x0, x0
 a48:	and	x24, x24, x0
 a4c:	mov	x1, x23
 a50:	mov	x0, x24
 a54:	mov	w2, #0x0                   	// #0
 a58:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 a5c:	mov	x25, x0
 a60:	ldr	x1, [x21]
 a64:	ldr	x2, [x21, #16]
 a68:	lsl	x2, x2, #3
 a6c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 a70:	ldp	x0, x1, [x21]
 a74:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 a78:	stp	x25, x24, [x21]
 a7c:	ldr	x3, [x21, #16]
 a80:	add	x24, x3, #0x1
 a84:	b	9ac <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x7c>
 a88:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 a8c:	str	x0, [x22]
 a90:	b	a34 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x104>
 a94:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 a98:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 a9c:	add	x2, x2, #0x0
 aa0:	add	x0, x0, #0x0
 aa4:	mov	w1, #0x1be                 	// #446
 aa8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 aac:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 ab0:	add	x0, x0, #0x0
 ab4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 ab8:	bl	0 <_ZN11__sanitizer3DieEv>
 abc:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 ac0:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 ac4:	mov	x3, x24
 ac8:	add	x2, x2, #0x0
 acc:	add	x0, x0, #0x0
 ad0:	mov	w1, #0x17b                 	// #379
 ad4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 ad8:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 adc:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 ae0:	add	x2, x2, #0x0
 ae4:	add	x0, x0, #0x0
 ae8:	mov	w1, #0x1fd                 	// #509
 aec:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 af0:	mov	x4, x0
 af4:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 af8:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 afc:	mov	x3, x24
 b00:	add	x2, x2, #0x0
 b04:	add	x0, x0, #0x0
 b08:	mov	w1, #0x17c                 	// #380
 b0c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

sanitizer_symbolizer.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer11AddressInfoC1Ev>:
   0:	stp	x19, x30, [sp, #-16]!
   4:	mov	x19, x0
   8:	mov	x2, #0x40                  	// #64
   c:	mov	w1, #0x0                   	// #0
  10:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  14:	mov	x0, #0xffffffffffffffff    	// #-1
  18:	str	x0, [x19, #40]
  1c:	ldp	x19, x30, [sp], #16
  20:	ret
  24:	nop

0000000000000028 <_ZN11__sanitizer11AddressInfo5ClearEv>:
  28:	stp	x19, x30, [sp, #-16]!
  2c:	mov	x19, x0
  30:	mov	x1, #0x0                   	// #0
  34:	ldr	x0, [x0, #8]
  38:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
  3c:	ldr	x0, [x19, #32]
  40:	mov	x1, #0x0                   	// #0
  44:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
  48:	ldr	x0, [x19, #48]
  4c:	mov	x1, #0x0                   	// #0
  50:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
  54:	mov	x0, x19
  58:	mov	x2, #0x40                  	// #64
  5c:	mov	w1, #0x0                   	// #0
  60:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  64:	mov	x0, #0xffffffffffffffff    	// #-1
  68:	str	x0, [x19, #40]
  6c:	ldp	x19, x30, [sp], #16
  70:	ret
  74:	nop

0000000000000078 <_ZN11__sanitizer11AddressInfo14FillModuleInfoEPKcmNS_10ModuleArchE>:
  78:	stp	x19, x20, [sp, #-32]!
  7c:	mov	x19, x0
  80:	mov	w20, w3
  84:	mov	x0, x1
  88:	stp	x21, x30, [sp, #16]
  8c:	mov	x21, x2
  90:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
  94:	stp	x0, x21, [x19, #8]
  98:	str	w20, [x19, #24]
  9c:	ldp	x21, x30, [sp, #16]
  a0:	ldp	x19, x20, [sp], #32
  a4:	ret

00000000000000a8 <_ZN11__sanitizer15SymbolizedStackC1Ev>:
  a8:	stp	x19, x30, [sp, #-16]!
  ac:	mov	x19, x0
  b0:	mov	x2, #0x40                  	// #64
  b4:	mov	w1, #0x0                   	// #0
  b8:	str	xzr, [x19], #8
  bc:	mov	x0, x19
  c0:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  c4:	mov	x0, #0xffffffffffffffff    	// #-1
  c8:	str	x0, [x19, #40]
  cc:	ldp	x19, x30, [sp], #16
  d0:	ret
  d4:	nop

00000000000000d8 <_ZN11__sanitizer15SymbolizedStack3NewEm>:
  d8:	stp	x19, x20, [sp, #-32]!
  dc:	mov	x2, #0x0                   	// #0
  e0:	mov	x1, #0x0                   	// #0
  e4:	stp	x21, x30, [sp, #16]
  e8:	mov	x21, x0
  ec:	mov	x0, #0x48                  	// #72
  f0:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
  f4:	mov	x20, x0
  f8:	mov	x19, x0
  fc:	mov	x2, #0x40                  	// #64
 100:	mov	w1, #0x0                   	// #0
 104:	str	xzr, [x20], #8
 108:	mov	x0, x20
 10c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 110:	mov	x0, #0xffffffffffffffff    	// #-1
 114:	str	x0, [x20, #40]
 118:	str	x21, [x19, #8]
 11c:	mov	x0, x19
 120:	ldp	x21, x30, [sp, #16]
 124:	ldp	x19, x20, [sp], #32
 128:	ret
 12c:	nop

0000000000000130 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>:
 130:	stp	x19, x30, [sp, #-16]!
 134:	mov	x19, x0
 138:	add	x0, x0, #0x8
 13c:	bl	28 <_ZN11__sanitizer11AddressInfo5ClearEv>
 140:	ldr	x0, [x19]
 144:	cbz	x0, 14c <_ZN11__sanitizer15SymbolizedStack8ClearAllEv+0x1c>
 148:	bl	130 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>
 14c:	mov	x0, x19
 150:	mov	x1, #0x0                   	// #0
 154:	ldp	x19, x30, [sp], #16
 158:	b	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 15c:	nop

0000000000000160 <_ZN11__sanitizer8DataInfoC1Ev>:
 160:	mov	x2, #0x40                  	// #64
 164:	mov	w1, #0x0                   	// #0
 168:	b	0 <_ZN11__sanitizer15internal_memsetEPvim>
 16c:	nop

0000000000000170 <_ZN11__sanitizer8DataInfo5ClearEv>:
 170:	stp	x19, x30, [sp, #-16]!
 174:	mov	x19, x0
 178:	mov	x1, #0x0                   	// #0
 17c:	ldr	x0, [x0]
 180:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 184:	ldr	x0, [x19, #24]
 188:	mov	x1, #0x0                   	// #0
 18c:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 190:	ldr	x0, [x19, #40]
 194:	mov	x1, #0x0                   	// #0
 198:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 19c:	mov	x0, x19
 1a0:	mov	x2, #0x40                  	// #64
 1a4:	ldp	x19, x30, [sp], #16
 1a8:	mov	w1, #0x0                   	// #0
 1ac:	b	0 <_ZN11__sanitizer15internal_memsetEPvim>

00000000000001b0 <_ZN11__sanitizer10Symbolizer20InvalidateModuleListEv>:
 1b0:	strb	wzr, [x0, #104]
 1b4:	ret

00000000000001b8 <_ZN11__sanitizer10Symbolizer8AddHooksEPFvvES2_>:
 1b8:	ldr	x3, [x0, #224]
 1bc:	cbz	x3, 1e4 <_ZN11__sanitizer10Symbolizer8AddHooksEPFvvES2_+0x2c>
 1c0:	str	x30, [sp, #-16]!
 1c4:	adrp	x2, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 1c8:	adrp	x0, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 1cc:	add	x2, x2, #0x0
 1d0:	add	x0, x0, #0x0
 1d4:	mov	x4, #0x0                   	// #0
 1d8:	mov	x3, #0x0                   	// #0
 1dc:	mov	w1, #0x4e                  	// #78
 1e0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 1e4:	ldr	x3, [x0, #232]
 1e8:	cbnz	x3, 1c0 <_ZN11__sanitizer10Symbolizer8AddHooksEPFvvES2_+0x8>
 1ec:	stp	x1, x2, [x0, #224]
 1f0:	ret
 1f4:	nop

00000000000001f8 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc>:
 1f8:	stp	x19, x20, [sp, #-48]!
 1fc:	mov	x20, x0
 200:	ldr	x0, [x0, #32]
 204:	stp	x21, x22, [sp, #16]
 208:	mov	x21, x1
 20c:	str	x30, [sp, #32]
 210:	bl	0 <_ZN11__sanitizer13BlockingMutex11CheckLockedEv>
 214:	ldr	x0, [x20, #24]
 218:	cbz	x0, 228 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x30>
 21c:	mov	x1, x21
 220:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 224:	cbz	w0, 2c8 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0xd0>
 228:	ldr	x0, [x20, #16]
 22c:	mov	x19, #0x0                   	// #0
 230:	cbnz	x0, 248 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x50>
 234:	b	288 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x90>
 238:	ldr	x0, [x20, #16]
 23c:	add	x19, x19, #0x1
 240:	cmp	x19, x0
 244:	b.cs	288 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x90>  // b.hs, b.nlast
 248:	ldr	x0, [x20]
 24c:	mov	x1, x21
 250:	lsl	x22, x19, #3
 254:	ldr	x0, [x0, x19, lsl #3]
 258:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 25c:	cbnz	w0, 238 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x40>
 260:	ldr	x4, [x20, #16]
 264:	ldr	x0, [x20]
 268:	cmp	x4, x19
 26c:	b.ls	3bc <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x1c4>  // b.plast
 270:	ldr	x0, [x0, x22]
 274:	str	x0, [x20, #24]
 278:	ldp	x21, x22, [sp, #16]
 27c:	ldr	x30, [sp, #32]
 280:	ldp	x19, x20, [sp], #48
 284:	ret
 288:	mov	x0, x21
 28c:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 290:	ldp	x4, x3, [x20, #8]
 294:	mov	x19, x20
 298:	str	x0, [x19, #24]!
 29c:	lsr	x4, x4, #3
 2a0:	cmp	x3, x4
 2a4:	b.hi	3a4 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x1ac>  // b.pmore
 2a8:	add	x21, x3, #0x1
 2ac:	b.eq	2dc <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0xe4>  // b.none
 2b0:	ldr	x22, [x20]
 2b4:	str	x21, [x20, #16]
 2b8:	mov	x1, x19
 2bc:	add	x0, x22, x3, lsl #3
 2c0:	mov	x2, #0x8                   	// #8
 2c4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 2c8:	ldp	x21, x22, [sp, #16]
 2cc:	ldr	x0, [x20, #24]
 2d0:	ldr	x30, [sp, #32]
 2d4:	ldp	x19, x20, [sp], #48
 2d8:	ret
 2dc:	tst	x3, x21
 2e0:	b.eq	31c <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x124>  // b.none
 2e4:	clz	x2, x21
 2e8:	mov	w1, #0x3f                  	// #63
 2ec:	sub	w1, w1, w2
 2f0:	mov	x2, #0x1                   	// #1
 2f4:	add	w4, w1, #0x1
 2f8:	lsl	x4, x2, x4
 2fc:	cmp	x4, x21
 300:	b.ls	388 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x190>  // b.plast
 304:	lsl	x1, x2, x1
 308:	cmp	x1, x21
 30c:	b.cs	40c <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x214>  // b.hs, b.nlast
 310:	cmp	x3, x4
 314:	b.hi	3e4 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x1ec>  // b.pmore
 318:	mov	x21, x4
 31c:	adrp	x22, 0 <_ZN11__sanitizer14PageSizeCachedE>
 320:	lsl	x21, x21, #3
 324:	ldr	x22, [x22]
 328:	ldr	x0, [x22]
 32c:	cbz	x0, 3d8 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x1e0>
 330:	sub	x1, x0, #0x1
 334:	tst	x1, x0
 338:	b.ne	3fc <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x204>  // b.any
 33c:	add	x21, x21, x1
 340:	neg	x0, x0
 344:	and	x21, x21, x0
 348:	mov	w2, #0x0                   	// #0
 34c:	mov	x0, x21
 350:	adrp	x1, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 354:	add	x1, x1, #0x0
 358:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 35c:	ldr	x1, [x20]
 360:	mov	x22, x0
 364:	ldr	x2, [x20, #16]
 368:	lsl	x2, x2, #3
 36c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 370:	ldp	x0, x1, [x20]
 374:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 378:	stp	x22, x21, [x20]
 37c:	ldr	x3, [x20, #16]
 380:	add	x21, x3, #0x1
 384:	b	2b4 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0xbc>
 388:	adrp	x2, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 38c:	adrp	x0, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 390:	mov	x3, x21
 394:	add	x2, x2, #0x0
 398:	add	x0, x0, #0x0
 39c:	mov	w1, #0x17b                 	// #379
 3a0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3a4:	adrp	x2, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 3a8:	adrp	x0, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 3ac:	add	x2, x2, #0x0
 3b0:	add	x0, x0, #0x0
 3b4:	mov	w1, #0x1be                 	// #446
 3b8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3bc:	adrp	x2, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 3c0:	adrp	x0, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 3c4:	mov	x3, x19
 3c8:	add	x2, x2, #0x0
 3cc:	add	x0, x0, #0x0
 3d0:	mov	w1, #0x1b6                 	// #438
 3d4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3d8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 3dc:	str	x0, [x22]
 3e0:	b	330 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x138>
 3e4:	adrp	x2, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 3e8:	adrp	x0, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 3ec:	add	x2, x2, #0x0
 3f0:	add	x0, x0, #0x0
 3f4:	mov	w1, #0x1fd                 	// #509
 3f8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3fc:	adrp	x0, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 400:	add	x0, x0, #0x0
 404:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 408:	bl	0 <_ZN11__sanitizer3DieEv>
 40c:	mov	x4, x1
 410:	adrp	x2, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 414:	adrp	x0, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 418:	mov	x3, x21
 41c:	add	x2, x2, #0x0
 420:	add	x0, x0, #0x0
 424:	mov	w1, #0x17c                 	// #380
 428:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 42c:	nop

0000000000000430 <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE>:
 430:	stp	x19, x20, [sp, #-64]!
 434:	mov	x19, x0
 438:	stp	x23, x24, [sp, #32]
 43c:	adrp	x23, 0 <_ZN11__sanitizer14PageSizeCachedE>
 440:	ldr	x20, [x23]
 444:	stp	x21, x22, [sp, #16]
 448:	mov	x21, x1
 44c:	stp	x25, x30, [sp, #48]
 450:	stp	xzr, xzr, [x0]
 454:	ldr	x0, [x20]
 458:	str	xzr, [x19, #16]
 45c:	cbz	x0, 564 <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE+0x134>
 460:	sub	x1, x0, #0x1
 464:	tst	x1, x0
 468:	b.ne	570 <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE+0x140>  // b.any
 46c:	add	x20, x0, #0x7
 470:	neg	x0, x0
 474:	and	x20, x20, x0
 478:	mov	w2, #0x0                   	// #0
 47c:	mov	x0, x20
 480:	adrp	x25, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 484:	add	x1, x25, #0x0
 488:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 48c:	ldr	x1, [x19]
 490:	mov	x22, x0
 494:	ldr	x2, [x19, #16]
 498:	add	x24, x19, #0x70
 49c:	lsl	x2, x2, #3
 4a0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 4a4:	ldp	x0, x1, [x19]
 4a8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 4ac:	stp	x22, x20, [x19]
 4b0:	lsr	x0, x20, #3
 4b4:	stp	xzr, x24, [x19, #24]
 4b8:	cmp	x0, #0x3e7
 4bc:	b.ls	4fc <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE+0xcc>  // b.plast
 4c0:	strb	wzr, [x19, #64]
 4c4:	mov	x0, x24
 4c8:	strb	wzr, [x19, #96]
 4cc:	strb	wzr, [x19, #104]
 4d0:	bl	0 <_ZN11__sanitizer13BlockingMutexC1Ev>
 4d4:	ldp	x0, x1, [x21]
 4d8:	stp	x0, x1, [x19, #200]
 4dc:	ldr	x0, [x21, #16]
 4e0:	ldp	x21, x22, [sp, #16]
 4e4:	ldp	x23, x24, [sp, #32]
 4e8:	ldp	x25, x30, [sp, #48]
 4ec:	stp	x0, xzr, [x19, #216]
 4f0:	str	xzr, [x19, #232]
 4f4:	ldp	x19, x20, [sp], #64
 4f8:	ret
 4fc:	ldr	x3, [x19, #16]
 500:	cmp	x3, #0x3e8
 504:	b.hi	58c <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE+0x15c>  // b.pmore
 508:	ldr	x23, [x23]
 50c:	ldr	x0, [x23]
 510:	cbz	x0, 580 <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE+0x150>
 514:	sub	x1, x0, #0x1
 518:	tst	x1, x0
 51c:	b.ne	570 <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE+0x140>  // b.any
 520:	mov	x1, #0x1f3f                	// #7999
 524:	add	x20, x0, x1
 528:	neg	x0, x0
 52c:	add	x1, x25, #0x0
 530:	and	x20, x20, x0
 534:	mov	w2, #0x0                   	// #0
 538:	mov	x0, x20
 53c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 540:	ldr	x1, [x19]
 544:	mov	x22, x0
 548:	ldr	x2, [x19, #16]
 54c:	lsl	x2, x2, #3
 550:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 554:	ldp	x0, x1, [x19]
 558:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 55c:	stp	x22, x20, [x19]
 560:	b	4c0 <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE+0x90>
 564:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 568:	str	x0, [x20]
 56c:	b	460 <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE+0x30>
 570:	adrp	x0, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 574:	add	x0, x0, #0x0
 578:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 57c:	bl	0 <_ZN11__sanitizer3DieEv>
 580:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 584:	str	x0, [x23]
 588:	b	514 <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE+0xe4>
 58c:	adrp	x2, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 590:	adrp	x0, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 594:	add	x2, x2, #0x0
 598:	add	x0, x0, #0x0
 59c:	mov	x4, #0x3e8                 	// #1000
 5a0:	mov	w1, #0x1fd                 	// #509
 5a4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000005a8 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeC1EPKS0_>:
 5a8:	str	x1, [x0]
 5ac:	ldr	x0, [x1, #224]
 5b0:	cbz	x0, 5bc <_ZN11__sanitizer10Symbolizer15SymbolizerScopeC1EPKS0_+0x14>
 5b4:	mov	x16, x0
 5b8:	br	x16
 5bc:	ret

00000000000005c0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>:
 5c0:	ldr	x0, [x0]
 5c4:	ldr	x0, [x0, #232]
 5c8:	cbz	x0, 5d4 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev+0x14>
 5cc:	mov	x16, x0
 5d0:	br	x16
 5d4:	ret

sanitizer_symbolizer_libbacktrace.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ErrorCallback>:
   0:	ret
   4:	nop

0000000000000008 <_ZN11__sanitizer22LibbacktraceSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE>:
   8:	stp	x19, x20, [sp, #-80]!
   c:	mov	x20, x0
  10:	mov	x5, x2
  14:	ldr	x0, [x0, #16]
  18:	adrp	x19, 0 <ErrorCallback>
  1c:	add	x19, x19, #0x0
  20:	stp	x21, x22, [sp, #16]
  24:	add	x22, sp, #0x38
  28:	mov	x3, x19
  2c:	mov	x21, x1
  30:	mov	x4, x22
  34:	adrp	x2, 0 <ErrorCallback>
  38:	add	x2, x2, #0x0
  3c:	str	x30, [sp, #32]
  40:	stp	x5, x5, [sp, #56]
  44:	str	xzr, [sp, #72]
  48:	bl	0 <__asan_backtrace_pcinfo>
  4c:	ldr	x0, [sp, #72]
  50:	cbz	x0, 68 <_ZN11__sanitizer22LibbacktraceSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x60>
  54:	mov	w0, #0x1                   	// #1
  58:	ldp	x21, x22, [sp, #16]
  5c:	ldr	x30, [sp, #32]
  60:	ldp	x19, x20, [sp], #80
  64:	ret
  68:	ldr	x0, [x20, #16]
  6c:	mov	x4, x22
  70:	mov	x3, x19
  74:	mov	x1, x21
  78:	adrp	x2, 0 <ErrorCallback>
  7c:	add	x2, x2, #0x0
  80:	bl	0 <__asan_backtrace_syminfo>
  84:	ldr	x0, [sp, #72]
  88:	ldp	x21, x22, [sp, #16]
  8c:	cmp	x0, #0x0
  90:	cset	w0, ne  // ne = any
  94:	ldr	x30, [sp, #32]
  98:	ldp	x19, x20, [sp], #80
  9c:	ret

00000000000000a0 <_ZN11__sanitizer22LibbacktraceSymbolizer13SymbolizeDataEmPNS_8DataInfoE>:
  a0:	ldr	x0, [x0, #16]
  a4:	str	x30, [sp, #-16]!
  a8:	mov	x4, x2
  ac:	adrp	x3, 0 <ErrorCallback>
  b0:	adrp	x2, 0 <ErrorCallback>
  b4:	add	x3, x3, #0x0
  b8:	add	x2, x2, #0x0
  bc:	bl	0 <__asan_backtrace_syminfo>
  c0:	mov	w0, #0x1                   	// #1
  c4:	ldr	x30, [sp], #16
  c8:	ret
  cc:	nop

00000000000000d0 <CplusV3DemangleCallback>:
  d0:	stp	x19, x20, [sp, #-48]!
  d4:	mov	x19, x2
  d8:	mov	x20, x1
  dc:	add	x2, x1, #0x1
  e0:	stp	x21, x22, [sp, #16]
  e4:	mov	x21, x0
  e8:	ldp	x3, x1, [x19, #8]
  ec:	str	x30, [sp, #32]
  f0:	add	x0, x2, x3
  f4:	cmp	x1, x0
  f8:	b.cc	138 <CplusV3DemangleCallback+0x68>  // b.lo, b.ul, b.last
  fc:	ldr	x22, [x19]
 100:	mov	x1, x21
 104:	add	x0, x22, x3
 108:	mov	x2, x20
 10c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 110:	ldp	x0, x1, [x19]
 114:	add	x0, x0, x20
 118:	strb	wzr, [x0, x1]
 11c:	ldr	x1, [x19, #8]
 120:	ldp	x21, x22, [sp, #16]
 124:	add	x20, x1, x20
 128:	ldr	x30, [sp, #32]
 12c:	str	x20, [x19, #8]
 130:	ldp	x19, x20, [sp], #48
 134:	ret
 138:	cmp	x0, x1, lsl #1
 13c:	lsl	x1, x1, #1
 140:	b.hi	184 <CplusV3DemangleCallback+0xb4>  // b.pmore
 144:	mov	x0, x1
 148:	str	x1, [x19, #16]
 14c:	mov	x1, #0x0                   	// #0
 150:	mov	x2, #0x0                   	// #0
 154:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 158:	mov	x22, x0
 15c:	ldr	x1, [x19]
 160:	cbz	x1, 178 <CplusV3DemangleCallback+0xa8>
 164:	ldr	x2, [x19, #8]
 168:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 16c:	ldr	x0, [x19]
 170:	mov	x1, #0x0                   	// #0
 174:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 178:	str	x22, [x19]
 17c:	ldr	x3, [x19, #8]
 180:	b	100 <CplusV3DemangleCallback+0x30>
 184:	str	x0, [x19, #16]
 188:	b	14c <CplusV3DemangleCallback+0x7c>
 18c:	nop

0000000000000190 <_ZN11__sanitizerL13DemangleAllocEPKcb>:
 190:	stp	x19, x20, [sp, #-64]!
 194:	adrp	x2, 0 <ErrorCallback>
 198:	mov	x20, x0
 19c:	add	x3, sp, #0x28
 1a0:	add	x2, x2, #0x0
 1a4:	stp	x21, x30, [sp, #16]
 1a8:	and	w21, w1, #0xff
 1ac:	mov	w1, #0x3                   	// #3
 1b0:	stp	xzr, xzr, [sp, #40]
 1b4:	str	xzr, [sp, #56]
 1b8:	bl	0 <__asan_cplus_demangle_v3_callback>
 1bc:	cbz	w0, 1e8 <_ZN11__sanitizerL13DemangleAllocEPKcb+0x58>
 1c0:	ldp	x19, x0, [sp, #40]
 1c4:	ldr	x1, [sp, #56]
 1c8:	add	x0, x0, #0x40
 1cc:	cmp	x0, x1
 1d0:	b.ls	21c <_ZN11__sanitizerL13DemangleAllocEPKcb+0x8c>  // b.plast
 1d4:	cbz	x19, 1f8 <_ZN11__sanitizerL13DemangleAllocEPKcb+0x68>
 1d8:	mov	x0, x19
 1dc:	ldp	x21, x30, [sp, #16]
 1e0:	ldp	x19, x20, [sp], #64
 1e4:	ret
 1e8:	ldr	x0, [sp, #40]
 1ec:	cbz	x0, 1f8 <_ZN11__sanitizerL13DemangleAllocEPKcb+0x68>
 1f0:	mov	x1, #0x0                   	// #0
 1f4:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 1f8:	mov	x19, #0x0                   	// #0
 1fc:	cbz	w21, 1d8 <_ZN11__sanitizerL13DemangleAllocEPKcb+0x48>
 200:	mov	x0, x20
 204:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 208:	mov	x19, x0
 20c:	mov	x0, x19
 210:	ldp	x21, x30, [sp, #16]
 214:	ldp	x19, x20, [sp], #64
 218:	ret
 21c:	mov	x0, x19
 220:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 224:	mov	x19, x0
 228:	mov	x1, #0x0                   	// #0
 22c:	ldr	x0, [sp, #40]
 230:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 234:	b	1d4 <_ZN11__sanitizerL13DemangleAllocEPKcb+0x44>

0000000000000238 <_ZN11__sanitizer22LibbacktraceSymbolizer8DemangleEPKc>:
 238:	mov	x0, x1
 23c:	mov	w1, #0x0                   	// #0
 240:	b	190 <_ZN11__sanitizerL13DemangleAllocEPKcb>
 244:	nop

0000000000000248 <SymbolizeCodePCInfoCallback>:
 248:	cbz	x4, 2e8 <SymbolizeCodePCInfoCallback+0xa0>
 24c:	stp	x19, x20, [sp, #-64]!
 250:	mov	x19, x0
 254:	stp	x21, x22, [sp, #16]
 258:	mov	x21, x1
 25c:	ldr	x1, [x0, #8]
 260:	stp	x23, x24, [sp, #32]
 264:	str	x30, [sp, #48]
 268:	cbz	x1, 2f0 <SymbolizeCodePCInfoCallback+0xa8>
 26c:	ldr	x0, [x0, #16]
 270:	mov	x22, x2
 274:	mov	w23, w3
 278:	mov	x20, x4
 27c:	cbnz	x0, 310 <SymbolizeCodePCInfoCallback+0xc8>
 280:	ldr	x0, [x19]
 284:	ldr	x4, [x0, #8]
 288:	cmp	x21, x4
 28c:	b.ne	344 <SymbolizeCodePCInfoCallback+0xfc>  // b.any
 290:	ldr	x4, [x1, #8]
 294:	cmp	x21, x4
 298:	b.ne	360 <SymbolizeCodePCInfoCallback+0x118>  // b.any
 29c:	add	x21, x1, #0x8
 2a0:	mov	x0, x20
 2a4:	mov	w1, #0x1                   	// #1
 2a8:	bl	190 <_ZN11__sanitizerL13DemangleAllocEPKcb>
 2ac:	str	x0, [x21, #32]
 2b0:	cbz	x22, 2c0 <SymbolizeCodePCInfoCallback+0x78>
 2b4:	mov	x0, x22
 2b8:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 2bc:	str	x0, [x21, #48]
 2c0:	ldr	x0, [x19, #16]
 2c4:	ldr	x30, [sp, #48]
 2c8:	str	w23, [x21, #56]
 2cc:	add	x0, x0, #0x1
 2d0:	ldp	x21, x22, [sp, #16]
 2d4:	ldp	x23, x24, [sp, #32]
 2d8:	str	x0, [x19, #16]
 2dc:	mov	w0, #0x0                   	// #0
 2e0:	ldp	x19, x20, [sp], #64
 2e4:	ret
 2e8:	mov	w0, #0x0                   	// #0
 2ec:	ret
 2f0:	adrp	x2, 0 <ErrorCallback>
 2f4:	adrp	x0, 0 <ErrorCallback>
 2f8:	add	x2, x2, #0x0
 2fc:	add	x0, x0, #0x0
 300:	mov	x4, #0x0                   	// #0
 304:	mov	x3, #0x0                   	// #0
 308:	mov	w1, #0x5c                  	// #92
 30c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 310:	mov	x0, x21
 314:	bl	0 <_ZN11__sanitizer15SymbolizedStack3NewEm>
 318:	ldr	x3, [x19]
 31c:	mov	x24, x0
 320:	add	x0, x0, #0x8
 324:	ldp	x1, x2, [x3, #16]
 328:	ldr	w3, [x3, #32]
 32c:	bl	0 <_ZN11__sanitizer11AddressInfo14FillModuleInfoEPKcmNS_10ModuleArchE>
 330:	ldr	x1, [x19, #8]
 334:	str	x24, [x1]
 338:	mov	x1, x24
 33c:	str	x24, [x19, #8]
 340:	b	280 <SymbolizeCodePCInfoCallback+0x38>
 344:	adrp	x2, 0 <ErrorCallback>
 348:	adrp	x0, 0 <ErrorCallback>
 34c:	mov	x3, x21
 350:	add	x2, x2, #0x0
 354:	add	x0, x0, #0x0
 358:	mov	w1, #0x65                  	// #101
 35c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 360:	adrp	x2, 0 <ErrorCallback>
 364:	adrp	x0, 0 <ErrorCallback>
 368:	mov	x3, x21
 36c:	add	x2, x2, #0x0
 370:	add	x0, x0, #0x0
 374:	mov	w1, #0x66                  	// #102
 378:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 37c:	nop

0000000000000380 <SymbolizeDataCallback>:
 380:	cmp	x2, #0x0
 384:	ccmp	x3, #0x0, #0x4, ne  // ne = any
 388:	b.ne	390 <SymbolizeDataCallback+0x10>  // b.any
 38c:	ret
 390:	stp	x19, x20, [sp, #-32]!
 394:	mov	x20, x0
 398:	mov	x19, x3
 39c:	mov	x0, x2
 3a0:	mov	w1, #0x1                   	// #1
 3a4:	stp	x21, x30, [sp, #16]
 3a8:	mov	x21, x4
 3ac:	bl	190 <_ZN11__sanitizerL13DemangleAllocEPKcb>
 3b0:	stp	x0, x19, [x20, #40]
 3b4:	str	x21, [x20, #56]
 3b8:	ldp	x21, x30, [sp, #16]
 3bc:	ldp	x19, x20, [sp], #32
 3c0:	ret
 3c4:	nop

00000000000003c8 <SymbolizeCodeCallback>:
 3c8:	cbz	x2, 43c <SymbolizeCodeCallback+0x74>
 3cc:	stp	x19, x20, [sp, #-48]!
 3d0:	mov	x19, x0
 3d4:	stp	x21, x22, [sp, #16]
 3d8:	ldr	x22, [x0, #8]
 3dc:	str	x30, [sp, #40]
 3e0:	cbz	x22, 440 <SymbolizeCodeCallback+0x78>
 3e4:	ldr	x0, [x0, #16]
 3e8:	mov	x21, x1
 3ec:	mov	x20, x2
 3f0:	cbnz	x0, 464 <SymbolizeCodeCallback+0x9c>
 3f4:	ldr	x0, [x19]
 3f8:	ldr	x4, [x0, #8]
 3fc:	cmp	x21, x4
 400:	b.ne	4a0 <SymbolizeCodeCallback+0xd8>  // b.any
 404:	ldr	x4, [x22, #8]
 408:	cmp	x21, x4
 40c:	b.ne	4c0 <SymbolizeCodeCallback+0xf8>  // b.any
 410:	mov	x0, x20
 414:	mov	w1, #0x1                   	// #1
 418:	bl	190 <_ZN11__sanitizerL13DemangleAllocEPKcb>
 41c:	ldr	x1, [x19, #16]
 420:	ldr	x30, [sp, #40]
 424:	str	x0, [x22, #40]
 428:	add	x1, x1, #0x1
 42c:	ldp	x21, x22, [sp, #16]
 430:	str	x1, [x19, #16]
 434:	ldp	x19, x20, [sp], #48
 438:	ret
 43c:	ret
 440:	adrp	x2, 0 <ErrorCallback>
 444:	adrp	x0, 0 <ErrorCallback>
 448:	add	x2, x2, #0x0
 44c:	add	x0, x0, #0x0
 450:	mov	x4, #0x0                   	// #0
 454:	mov	x3, #0x0                   	// #0
 458:	mov	w1, #0x5c                  	// #92
 45c:	str	x23, [sp, #32]
 460:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 464:	mov	x0, x1
 468:	str	x23, [sp, #32]
 46c:	bl	0 <_ZN11__sanitizer15SymbolizedStack3NewEm>
 470:	mov	x23, x0
 474:	ldr	x3, [x19]
 478:	add	x0, x0, #0x8
 47c:	ldp	x1, x2, [x3, #16]
 480:	ldr	w3, [x3, #32]
 484:	bl	0 <_ZN11__sanitizer11AddressInfo14FillModuleInfoEPKcmNS_10ModuleArchE>
 488:	ldr	x22, [x19, #8]
 48c:	str	x23, [x22]
 490:	mov	x22, x23
 494:	ldr	x23, [sp, #32]
 498:	str	x22, [x19, #8]
 49c:	b	3f4 <SymbolizeCodeCallback+0x2c>
 4a0:	adrp	x2, 0 <ErrorCallback>
 4a4:	adrp	x0, 0 <ErrorCallback>
 4a8:	mov	x3, x21
 4ac:	add	x2, x2, #0x0
 4b0:	add	x0, x0, #0x0
 4b4:	mov	w1, #0x65                  	// #101
 4b8:	str	x23, [sp, #32]
 4bc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 4c0:	adrp	x2, 0 <ErrorCallback>
 4c4:	adrp	x0, 0 <ErrorCallback>
 4c8:	mov	x3, x21
 4cc:	add	x2, x2, #0x0
 4d0:	add	x0, x0, #0x0
 4d4:	mov	w1, #0x66                  	// #102
 4d8:	str	x23, [sp, #32]
 4dc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000004e0 <_ZN11__sanitizer22LibbacktraceSymbolizer3getEPNS_17LowLevelAllocatorE>:
 4e0:	stp	x19, x20, [sp, #-32]!
 4e4:	adrp	x2, 0 <ErrorCallback>
 4e8:	mov	x20, x0
 4ec:	add	x2, x2, #0x0
 4f0:	adrp	x0, 0 <ErrorCallback>
 4f4:	mov	x3, #0x0                   	// #0
 4f8:	add	x0, x0, #0x0
 4fc:	mov	w1, #0x0                   	// #0
 500:	str	x30, [sp, #16]
 504:	bl	0 <__asan_backtrace_create_state>
 508:	cbz	x0, 538 <_ZN11__sanitizer22LibbacktraceSymbolizer3getEPNS_17LowLevelAllocatorE+0x58>
 50c:	mov	x19, x0
 510:	mov	x1, #0x18                  	// #24
 514:	mov	x0, x20
 518:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 51c:	adrp	x1, 0 <ErrorCallback>
 520:	add	x1, x1, #0x0
 524:	stp	x1, xzr, [x0]
 528:	str	x19, [x0, #16]
 52c:	ldr	x30, [sp, #16]
 530:	ldp	x19, x20, [sp], #32
 534:	ret
 538:	mov	x0, #0x0                   	// #0
 53c:	ldr	x30, [sp, #16]
 540:	ldp	x19, x20, [sp], #32
 544:	ret

Disassembly of section .text._ZN11__sanitizer14SymbolizerTool5FlushEv:

0000000000000000 <_ZN11__sanitizer14SymbolizerTool5FlushEv>:
   0:	ret

sanitizer_symbolizer_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>:
       0:	stp	x19, x20, [sp, #-48]!
       4:	stp	x21, x22, [sp, #16]
       8:	mov	x21, x0
       c:	ldr	x0, [x0, #16]
      10:	str	x30, [sp, #32]
      14:	cbz	x0, 78 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm+0x78>
      18:	mov	x22, x1
      1c:	mov	x19, #0x0                   	// #0
      20:	mov	x20, #0x0                   	// #0
      24:	b	3c <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm+0x3c>
      28:	ldr	x0, [x21, #16]
      2c:	add	x20, x20, #0x1
      30:	add	x19, x19, #0x48
      34:	cmp	x20, x0
      38:	b.cs	78 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm+0x78>  // b.hs, b.nlast
      3c:	ldr	x0, [x21]
      40:	mov	x1, x22
      44:	add	x0, x0, x19
      48:	bl	0 <_ZNK11__sanitizer12LoadedModule15containsAddressEm>
      4c:	tst	w0, #0xff
      50:	b.eq	28 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm+0x28>  // b.none
      54:	ldr	x4, [x21, #16]
      58:	cmp	x4, x20
      5c:	b.ls	8c <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm+0x8c>  // b.plast
      60:	ldr	x0, [x21]
      64:	ldp	x21, x22, [sp, #16]
      68:	add	x0, x0, x19
      6c:	ldr	x30, [sp, #32]
      70:	ldp	x19, x20, [sp], #48
      74:	ret
      78:	mov	x0, #0x0                   	// #0
      7c:	ldp	x21, x22, [sp, #16]
      80:	ldr	x30, [sp, #32]
      84:	ldp	x19, x20, [sp], #48
      88:	ret
      8c:	adrp	x2, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
      90:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
      94:	mov	x3, x20
      98:	add	x2, x2, #0x0
      9c:	add	x0, x0, #0x0
      a0:	mov	w1, #0x2f9                 	// #761
      a4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000000a8 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>:
      a8:	stp	x19, x20, [sp, #-96]!
      ac:	mov	x19, #0x0                   	// #0
      b0:	stp	x21, x22, [sp, #16]
      b4:	mov	x22, x0
      b8:	mov	x21, x1
      bc:	stp	x23, x24, [sp, #32]
      c0:	adrp	x24, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
      c4:	mov	x23, x2
      c8:	add	x24, x24, #0x0
      cc:	stp	x25, x26, [sp, #48]
      d0:	sub	x26, x2, #0x1
      d4:	add	x25, sp, #0x58
      d8:	str	x30, [sp, #64]
      dc:	b	100 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0+0x58>
      e0:	cmp	x19, #0x1
      e4:	b.ls	f4 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0+0x4c>  // b.plast
      e8:	ldurb	w0, [x1, #-1]
      ec:	cmp	w0, #0xa
      f0:	b.eq	180 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0+0xd8>  // b.none
      f4:	add	x0, x19, #0x1
      f8:	cmp	x23, x0
      fc:	b.eq	1c8 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0+0x120>  // b.none
     100:	ldr	w0, [x22, #16]
     104:	mov	x3, x25
     108:	sub	x2, x26, x19
     10c:	add	x1, x21, x19
     110:	mov	x4, #0x0                   	// #0
     114:	str	xzr, [sp, #88]
     118:	bl	0 <_ZN11__sanitizer12ReadFromFileEiPvmPmPi>
     11c:	ands	w20, w0, #0xff
     120:	b.eq	198 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0+0xf0>  // b.none
     124:	ldr	x3, [sp, #88]
     128:	add	x19, x19, x3
     12c:	add	x1, x21, x19
     130:	cbz	x3, 198 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0+0xf0>
     134:	ldr	x0, [x22]
     138:	ldr	x3, [x0]
     13c:	cmp	x3, x24
     140:	b.eq	e0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0+0x38>  // b.none
     144:	mov	x2, x19
     148:	mov	x1, x21
     14c:	mov	x0, x22
     150:	blr	x3
     154:	tst	w0, #0xff
     158:	b.eq	f4 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0+0x4c>  // b.none
     15c:	add	x21, x21, x19
     160:	strb	wzr, [x21]
     164:	mov	w0, w20
     168:	ldp	x21, x22, [sp, #16]
     16c:	ldp	x23, x24, [sp, #32]
     170:	ldp	x25, x26, [sp, #48]
     174:	ldr	x30, [sp, #64]
     178:	ldp	x19, x20, [sp], #96
     17c:	ret
     180:	ldurb	w0, [x1, #-2]
     184:	cmp	w0, #0xa
     188:	b.ne	f4 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0+0x4c>  // b.any
     18c:	mov	x21, x1
     190:	strb	wzr, [x21]
     194:	b	164 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0+0xbc>
     198:	ldr	w1, [x22, #16]
     19c:	mov	w20, #0x0                   	// #0
     1a0:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     1a4:	add	x0, x0, #0x0
     1a8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     1ac:	mov	w0, w20
     1b0:	ldp	x21, x22, [sp, #16]
     1b4:	ldp	x23, x24, [sp, #32]
     1b8:	ldp	x25, x26, [sp, #48]
     1bc:	ldr	x30, [sp, #64]
     1c0:	ldp	x19, x20, [sp], #96
     1c4:	ret
     1c8:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     1cc:	add	x0, x0, #0x0
     1d0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     1d4:	strb	wzr, [x21]
     1d8:	b	164 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0+0xbc>
     1dc:	nop

00000000000001e0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>:
     1e0:	cbz	x2, 1e8 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm+0x8>
     1e4:	b	a8 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     1e8:	mov	w0, #0x1                   	// #1
     1ec:	ret

00000000000001f0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>:
     1f0:	stp	x19, x20, [sp, #-32]!
     1f4:	adrp	x19, 0 <_ZN11__sanitizer10Symbolizer8init_mu_E>
     1f8:	mov	w2, #0x1                   	// #1
     1fc:	ldr	x0, [x19]
     200:	str	x30, [sp, #16]
     204:	ldxrb	w1, [x0]
     208:	stxrb	w3, w2, [x0]
     20c:	cbnz	w3, 204 <_ZN11__sanitizer10Symbolizer9GetOrInitEv+0x14>
     210:	dmb	ish
     214:	tst	w1, #0xff
     218:	b.eq	220 <_ZN11__sanitizer10Symbolizer9GetOrInitEv+0x30>  // b.none
     21c:	bl	0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     220:	adrp	x20, 0 <_ZN11__sanitizer10Symbolizer11symbolizer_E>
     224:	ldr	x20, [x20]
     228:	ldr	x0, [x20]
     22c:	cbz	x0, 248 <_ZN11__sanitizer10Symbolizer9GetOrInitEv+0x58>
     230:	dmb	ish
     234:	ldr	x19, [x19]
     238:	strb	wzr, [x19]
     23c:	ldr	x30, [sp, #16]
     240:	ldp	x19, x20, [sp], #32
     244:	ret
     248:	bl	0 <_ZN11__sanitizer10Symbolizer12PlatformInitEv>
     24c:	str	x0, [x20]
     250:	cbnz	x0, 230 <_ZN11__sanitizer10Symbolizer9GetOrInitEv+0x40>
     254:	adrp	x2, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     258:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     25c:	add	x2, x2, #0x0
     260:	add	x0, x0, #0x0
     264:	mov	x4, #0x0                   	// #0
     268:	mov	x3, #0x0                   	// #0
     26c:	mov	w1, #0x17                  	// #23
     270:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     274:	nop

0000000000000278 <_ZN11__sanitizer12ExtractTokenEPKcS1_PPc>:
     278:	stp	x19, x20, [sp, #-32]!
     27c:	mov	x20, x0
     280:	stp	x21, x30, [sp, #16]
     284:	mov	x21, x2
     288:	bl	0 <_ZN11__sanitizer16internal_strcspnEPKcS1_>
     28c:	mov	x2, #0x0                   	// #0
     290:	mov	x19, x0
     294:	mov	x1, #0x0                   	// #0
     298:	add	x0, x0, #0x1
     29c:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
     2a0:	str	x0, [x21]
     2a4:	mov	x2, x19
     2a8:	mov	x1, x20
     2ac:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     2b0:	ldr	x1, [x21]
     2b4:	add	x0, x20, x19
     2b8:	strb	wzr, [x1, x19]
     2bc:	ldrb	w1, [x20, x19]
     2c0:	ldp	x21, x30, [sp, #16]
     2c4:	cmp	w1, #0x0
     2c8:	cinc	x0, x0, ne  // ne = any
     2cc:	ldp	x19, x20, [sp], #32
     2d0:	ret
     2d4:	nop

00000000000002d8 <_ZN11__sanitizer10ExtractIntEPKcS1_Pi>:
     2d8:	stp	x19, x20, [sp, #-48]!
     2dc:	mov	x20, x2
     2e0:	add	x2, sp, #0x28
     2e4:	str	x30, [sp, #16]
     2e8:	bl	278 <_ZN11__sanitizer12ExtractTokenEPKcS1_PPc>
     2ec:	mov	x19, x0
     2f0:	ldr	x0, [sp, #40]
     2f4:	cbz	x0, 304 <_ZN11__sanitizer10ExtractIntEPKcS1_Pi+0x2c>
     2f8:	bl	0 <_ZN11__sanitizer14internal_atollEPKc>
     2fc:	str	w0, [x20]
     300:	ldr	x0, [sp, #40]
     304:	mov	x1, #0x0                   	// #0
     308:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
     30c:	mov	x0, x19
     310:	ldr	x30, [sp, #16]
     314:	ldp	x19, x20, [sp], #48
     318:	ret
     31c:	nop

0000000000000320 <_ZN11__sanitizer11ExtractUptrEPKcS1_Pm>:
     320:	stp	x19, x20, [sp, #-48]!
     324:	mov	x20, x2
     328:	add	x2, sp, #0x28
     32c:	str	x30, [sp, #16]
     330:	bl	278 <_ZN11__sanitizer12ExtractTokenEPKcS1_PPc>
     334:	mov	x19, x0
     338:	ldr	x0, [sp, #40]
     33c:	cbz	x0, 34c <_ZN11__sanitizer11ExtractUptrEPKcS1_Pm+0x2c>
     340:	bl	0 <_ZN11__sanitizer14internal_atollEPKc>
     344:	str	x0, [x20]
     348:	ldr	x0, [sp, #40]
     34c:	mov	x1, #0x0                   	// #0
     350:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
     354:	mov	x0, x19
     358:	ldr	x30, [sp, #16]
     35c:	ldp	x19, x20, [sp], #48
     360:	ret
     364:	nop

0000000000000368 <_ZN11__sanitizer25ExtractTokenUpToDelimiterEPKcS1_PPc>:
     368:	stp	x19, x20, [sp, #-48]!
     36c:	mov	x20, x0
     370:	stp	x21, x22, [sp, #16]
     374:	mov	x21, x2
     378:	stp	x23, x30, [sp, #32]
     37c:	mov	x23, x1
     380:	bl	0 <_ZN11__sanitizer15internal_strstrEPKcS1_>
     384:	cbz	x0, 3f4 <_ZN11__sanitizer25ExtractTokenUpToDelimiterEPKcS1_PPc+0x8c>
     388:	mov	x19, x0
     38c:	sub	x22, x0, x20
     390:	mov	x2, #0x0                   	// #0
     394:	mov	x1, #0x0                   	// #0
     398:	add	x0, x22, #0x1
     39c:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
     3a0:	str	x0, [x21]
     3a4:	mov	x1, x20
     3a8:	mov	x2, x22
     3ac:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     3b0:	ldr	x0, [x21]
     3b4:	strb	wzr, [x0, x22]
     3b8:	ldrb	w0, [x19]
     3bc:	cbnz	w0, 3d4 <_ZN11__sanitizer25ExtractTokenUpToDelimiterEPKcS1_PPc+0x6c>
     3c0:	mov	x0, x19
     3c4:	ldp	x21, x22, [sp, #16]
     3c8:	ldp	x23, x30, [sp, #32]
     3cc:	ldp	x19, x20, [sp], #48
     3d0:	ret
     3d4:	mov	x0, x23
     3d8:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
     3dc:	add	x19, x19, x0
     3e0:	mov	x0, x19
     3e4:	ldp	x21, x22, [sp, #16]
     3e8:	ldp	x23, x30, [sp, #32]
     3ec:	ldp	x19, x20, [sp], #48
     3f0:	ret
     3f4:	mov	x0, x20
     3f8:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
     3fc:	mov	x22, x0
     400:	add	x19, x20, x0
     404:	b	390 <_ZN11__sanitizer25ExtractTokenUpToDelimiterEPKcS1_PPc+0x28>

0000000000000408 <_ZN11__sanitizer10Symbolizer5FlushEv>:
     408:	stp	x19, x20, [sp, #-64]!
     40c:	stp	x21, x22, [sp, #16]
     410:	mov	x21, x0
     414:	stp	x23, x30, [sp, #32]
     418:	add	x23, x0, #0x70
     41c:	mov	x0, x23
     420:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
     424:	ldr	x19, [x21, #208]
     428:	cbz	x19, 480 <_ZN11__sanitizer10Symbolizer5FlushEv+0x78>
     42c:	adrp	x22, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     430:	add	x20, sp, #0x38
     434:	add	x22, x22, #0x0
     438:	b	44c <_ZN11__sanitizer10Symbolizer5FlushEv+0x44>
     43c:	mov	x0, x20
     440:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
     444:	ldr	x19, [x19, #8]
     448:	cbz	x19, 480 <_ZN11__sanitizer10Symbolizer5FlushEv+0x78>
     44c:	mov	x1, x21
     450:	mov	x0, x20
     454:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeC1EPKS0_>
     458:	ldr	x1, [x19]
     45c:	ldr	x1, [x1, #16]
     460:	cmp	x1, x22
     464:	b.eq	43c <_ZN11__sanitizer10Symbolizer5FlushEv+0x34>  // b.none
     468:	mov	x0, x19
     46c:	blr	x1
     470:	mov	x0, x20
     474:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
     478:	ldr	x19, [x19, #8]
     47c:	cbnz	x19, 44c <_ZN11__sanitizer10Symbolizer5FlushEv+0x44>
     480:	mov	x0, x23
     484:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     488:	ldp	x21, x22, [sp, #16]
     48c:	ldp	x23, x30, [sp, #32]
     490:	ldp	x19, x20, [sp], #64
     494:	ret

0000000000000498 <_ZN11__sanitizer10Symbolizer8DemangleEPKc>:
     498:	stp	x19, x20, [sp, #-80]!
     49c:	stp	x21, x22, [sp, #16]
     4a0:	mov	x21, x0
     4a4:	stp	x25, x30, [sp, #48]
     4a8:	add	x25, x0, #0x70
     4ac:	mov	x0, x25
     4b0:	stp	x23, x24, [sp, #32]
     4b4:	mov	x24, x1
     4b8:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
     4bc:	ldr	x19, [x21, #208]
     4c0:	cbz	x19, 53c <_ZN11__sanitizer10Symbolizer8DemangleEPKc+0xa4>
     4c4:	adrp	x22, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     4c8:	add	x20, sp, #0x48
     4cc:	add	x22, x22, #0x0
     4d0:	b	4e4 <_ZN11__sanitizer10Symbolizer8DemangleEPKc+0x4c>
     4d4:	mov	x0, x20
     4d8:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
     4dc:	ldr	x19, [x19, #8]
     4e0:	cbz	x19, 53c <_ZN11__sanitizer10Symbolizer8DemangleEPKc+0xa4>
     4e4:	mov	x1, x21
     4e8:	mov	x0, x20
     4ec:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeC1EPKS0_>
     4f0:	ldr	x2, [x19]
     4f4:	ldr	x2, [x2, #24]
     4f8:	cmp	x2, x22
     4fc:	b.eq	4d4 <_ZN11__sanitizer10Symbolizer8DemangleEPKc+0x3c>  // b.none
     500:	mov	x1, x24
     504:	mov	x0, x19
     508:	blr	x2
     50c:	mov	x23, x0
     510:	cbz	x0, 4d4 <_ZN11__sanitizer10Symbolizer8DemangleEPKc+0x3c>
     514:	mov	x0, x20
     518:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
     51c:	mov	x0, x25
     520:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     524:	mov	x0, x23
     528:	ldp	x21, x22, [sp, #16]
     52c:	ldp	x23, x24, [sp, #32]
     530:	ldp	x25, x30, [sp, #48]
     534:	ldp	x19, x20, [sp], #80
     538:	ret
     53c:	mov	x1, x24
     540:	mov	x0, x21
     544:	bl	0 <_ZN11__sanitizer10Symbolizer16PlatformDemangleEPKc>
     548:	mov	x23, x0
     54c:	mov	x0, x25
     550:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     554:	mov	x0, x23
     558:	ldp	x21, x22, [sp, #16]
     55c:	ldp	x23, x24, [sp, #32]
     560:	ldp	x25, x30, [sp, #48]
     564:	ldp	x19, x20, [sp], #80
     568:	ret
     56c:	nop

0000000000000570 <_ZN11__sanitizer10Symbolizer14RefreshModulesEv>:
     570:	stp	x19, x30, [sp, #-16]!
     574:	mov	x19, x0
     578:	add	x0, x0, #0x28
     57c:	bl	0 <_ZN11__sanitizer13ListOfModules4initEv>
     580:	add	x0, x19, #0x48
     584:	bl	0 <_ZN11__sanitizer13ListOfModules12fallbackInitEv>
     588:	ldr	x0, [x19, #56]
     58c:	cbz	x0, 5a0 <_ZN11__sanitizer10Symbolizer14RefreshModulesEv+0x30>
     590:	mov	w0, #0x1                   	// #1
     594:	strb	w0, [x19, #104]
     598:	ldp	x19, x30, [sp], #16
     59c:	ret
     5a0:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     5a4:	add	x0, x0, #0x0
     5a8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     5ac:	bl	0 <_ZN11__sanitizer3DieEv>

00000000000005b0 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm>:
     5b0:	stp	x19, x20, [sp, #-32]!
     5b4:	mov	x19, x0
     5b8:	mov	x20, x1
     5bc:	ldrb	w2, [x0, #104]
     5c0:	stp	x21, x30, [sp, #16]
     5c4:	add	x21, x0, #0x28
     5c8:	cbz	w2, 5e8 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x38>
     5cc:	mov	x0, x21
     5d0:	bl	0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     5d4:	cbz	x0, 5e4 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x34>
     5d8:	ldp	x21, x30, [sp, #16]
     5dc:	ldp	x19, x20, [sp], #32
     5e0:	ret
     5e4:	mov	x0, x19
     5e8:	bl	570 <_ZN11__sanitizer10Symbolizer14RefreshModulesEv>
     5ec:	mov	x1, x20
     5f0:	mov	x0, x21
     5f4:	bl	0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     5f8:	cbnz	x0, 5d8 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x28>
     5fc:	ldr	x0, [x19, #88]
     600:	cbz	x0, 5d8 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x28>
     604:	mov	x1, x20
     608:	add	x0, x19, #0x48
     60c:	ldp	x21, x30, [sp, #16]
     610:	ldp	x19, x20, [sp], #32
     614:	b	0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>

0000000000000618 <_ZN11__sanitizer10Symbolizer33FindModuleNameAndOffsetForAddressEmPPKcPmPNS_10ModuleArchE>:
     618:	stp	x19, x20, [sp, #-48]!
     61c:	mov	x20, x4
     620:	mov	x19, x1
     624:	stp	x21, x22, [sp, #16]
     628:	mov	x22, x2
     62c:	mov	x21, x3
     630:	str	x30, [sp, #32]
     634:	bl	5b0 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm>
     638:	cbz	x0, 66c <_ZN11__sanitizer10Symbolizer33FindModuleNameAndOffsetForAddressEmPPKcPmPNS_10ModuleArchE+0x54>
     63c:	mov	x5, x0
     640:	mov	w0, #0x1                   	// #1
     644:	ldr	x30, [sp, #32]
     648:	ldp	x2, x1, [x5]
     64c:	str	x2, [x22]
     650:	sub	x1, x19, x1
     654:	str	x1, [x21]
     658:	ldr	w1, [x5, #24]
     65c:	str	w1, [x20]
     660:	ldp	x21, x22, [sp, #16]
     664:	ldp	x19, x20, [sp], #48
     668:	ret
     66c:	mov	w0, #0x0                   	// #0
     670:	ldp	x21, x22, [sp, #16]
     674:	ldr	x30, [sp, #32]
     678:	ldp	x19, x20, [sp], #48
     67c:	ret

0000000000000680 <_ZN11__sanitizer10Symbolizer27GetModuleNameAndOffsetForPCEmPPKcPm>:
     680:	stp	x19, x20, [sp, #-64]!
     684:	mov	x20, x0
     688:	mov	x19, x1
     68c:	stp	x21, x22, [sp, #16]
     690:	add	x22, x0, #0x70
     694:	mov	x0, x22
     698:	mov	x21, x2
     69c:	stp	x23, x24, [sp, #32]
     6a0:	mov	x23, x3
     6a4:	str	x30, [sp, #48]
     6a8:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
     6ac:	mov	x1, x19
     6b0:	mov	x0, x20
     6b4:	bl	5b0 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm>
     6b8:	cbz	x0, 6fc <_ZN11__sanitizer10Symbolizer27GetModuleNameAndOffsetForPCEmPPKcPm+0x7c>
     6bc:	ldp	x1, x2, [x0]
     6c0:	mov	w24, #0x1                   	// #1
     6c4:	sub	x19, x19, x2
     6c8:	str	x19, [x23]
     6cc:	cbz	x21, 6dc <_ZN11__sanitizer10Symbolizer27GetModuleNameAndOffsetForPCEmPPKcPm+0x5c>
     6d0:	mov	x0, x20
     6d4:	bl	0 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc>
     6d8:	str	x0, [x21]
     6dc:	mov	x0, x22
     6e0:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     6e4:	mov	w0, w24
     6e8:	ldp	x21, x22, [sp, #16]
     6ec:	ldp	x23, x24, [sp, #32]
     6f0:	ldr	x30, [sp, #48]
     6f4:	ldp	x19, x20, [sp], #64
     6f8:	ret
     6fc:	mov	x0, x22
     700:	mov	w24, #0x0                   	// #0
     704:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     708:	mov	w0, w24
     70c:	ldp	x21, x22, [sp, #16]
     710:	ldp	x23, x24, [sp, #32]
     714:	ldr	x30, [sp, #48]
     718:	ldp	x19, x20, [sp], #64
     71c:	ret

0000000000000720 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm>:
     720:	stp	x19, x20, [sp, #-80]!
     724:	mov	x20, x0
     728:	stp	x23, x24, [sp, #32]
     72c:	add	x24, x0, #0x70
     730:	mov	x0, x24
     734:	stp	x21, x22, [sp, #16]
     738:	mov	x21, x1
     73c:	str	x30, [sp, #48]
     740:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
     744:	mov	x0, x21
     748:	bl	0 <_ZN11__sanitizer15SymbolizedStack3NewEm>
     74c:	mov	x1, x21
     750:	mov	x23, x0
     754:	mov	x0, x20
     758:	bl	5b0 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm>
     75c:	cbz	x0, 7cc <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0xac>
     760:	mov	x2, x0
     764:	add	x0, x23, #0x8
     768:	ldr	w3, [x2, #24]
     76c:	ldp	x1, x2, [x2]
     770:	sub	x2, x21, x2
     774:	bl	0 <_ZN11__sanitizer11AddressInfo14FillModuleInfoEPKcmNS_10ModuleArchE>
     778:	ldr	x19, [x20, #208]
     77c:	cbz	x19, 7cc <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0xac>
     780:	add	x22, sp, #0x48
     784:	b	794 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x74>
     788:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
     78c:	ldr	x19, [x19, #8]
     790:	cbz	x19, 7cc <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0xac>
     794:	mov	x1, x20
     798:	mov	x0, x22
     79c:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeC1EPKS0_>
     7a0:	ldr	x3, [x19]
     7a4:	mov	x1, x21
     7a8:	mov	x2, x23
     7ac:	mov	x0, x19
     7b0:	ldr	x3, [x3]
     7b4:	blr	x3
     7b8:	mov	w1, w0
     7bc:	tst	w1, #0xff
     7c0:	mov	x0, x22
     7c4:	b.eq	788 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x68>  // b.none
     7c8:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
     7cc:	mov	x0, x24
     7d0:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     7d4:	mov	x0, x23
     7d8:	ldp	x21, x22, [sp, #16]
     7dc:	ldp	x23, x24, [sp, #32]
     7e0:	ldr	x30, [sp, #48]
     7e4:	ldp	x19, x20, [sp], #80
     7e8:	ret
     7ec:	nop

00000000000007f0 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE>:
     7f0:	stp	x19, x20, [sp, #-96]!
     7f4:	stp	x25, x26, [sp, #48]
     7f8:	add	x25, x0, #0x70
     7fc:	stp	x21, x22, [sp, #16]
     800:	mov	x22, x0
     804:	mov	x21, x2
     808:	mov	x0, x25
     80c:	stp	x23, x24, [sp, #32]
     810:	mov	x24, x1
     814:	str	x30, [sp, #64]
     818:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
     81c:	mov	x1, x24
     820:	mov	x0, x22
     824:	bl	5b0 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm>
     828:	cbz	x0, 8d4 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE+0xe4>
     82c:	mov	x1, x0
     830:	mov	x0, x21
     834:	add	x23, sp, #0x58
     838:	ldp	x19, x20, [x1]
     83c:	ldr	w26, [x1, #24]
     840:	bl	0 <_ZN11__sanitizer8DataInfo5ClearEv>
     844:	mov	x0, x19
     848:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
     84c:	ldr	x19, [x22, #208]
     850:	sub	x20, x24, x20
     854:	stp	x0, x20, [x21]
     858:	str	w26, [x21, #16]
     85c:	cbnz	x19, 870 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE+0x80>
     860:	b	8cc <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE+0xdc>
     864:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
     868:	ldr	x19, [x19, #8]
     86c:	cbz	x19, 8cc <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE+0xdc>
     870:	mov	x1, x22
     874:	mov	x0, x23
     878:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeC1EPKS0_>
     87c:	ldr	x3, [x19]
     880:	mov	x2, x21
     884:	mov	x1, x24
     888:	mov	x0, x19
     88c:	ldr	x3, [x3, #8]
     890:	blr	x3
     894:	mov	w20, w0
     898:	ands	w20, w20, #0xff
     89c:	mov	x0, x23
     8a0:	b.eq	864 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE+0x74>  // b.none
     8a4:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
     8a8:	mov	x0, x25
     8ac:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     8b0:	mov	w0, w20
     8b4:	ldp	x21, x22, [sp, #16]
     8b8:	ldp	x23, x24, [sp, #32]
     8bc:	ldp	x25, x26, [sp, #48]
     8c0:	ldr	x30, [sp, #64]
     8c4:	ldp	x19, x20, [sp], #96
     8c8:	ret
     8cc:	mov	w20, #0x1                   	// #1
     8d0:	b	8a8 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE+0xb8>
     8d4:	mov	w20, #0x0                   	// #0
     8d8:	b	8a8 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE+0xb8>
     8dc:	nop

00000000000008e0 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE>:
     8e0:	stp	x19, x20, [sp, #-128]!
     8e4:	mov	w19, #0x1                   	// #1
     8e8:	stp	x21, x22, [sp, #16]
     8ec:	mov	x21, x0
     8f0:	mov	x0, x21
     8f4:	stp	x25, x26, [sp, #48]
     8f8:	add	x25, sp, #0x70
     8fc:	mov	x22, x1
     900:	mov	x2, x25
     904:	stp	x23, x24, [sp, #32]
     908:	adrp	x24, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     90c:	stp	x27, x28, [sp, #64]
     910:	add	x26, sp, #0x78
     914:	adrp	x27, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     918:	str	x30, [sp, #80]
     91c:	add	x27, x27, #0x0
     920:	str	x1, [sp, #104]
     924:	add	x1, x24, #0x0
     928:	str	xzr, [sp, #112]
     92c:	bl	278 <_ZN11__sanitizer12ExtractTokenEPKcS1_PPc>
     930:	ldr	x1, [sp, #112]
     934:	mov	x21, x0
     938:	cbz	x1, a54 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x174>
     93c:	ldrb	w0, [x1]
     940:	cbz	w0, b00 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x220>
     944:	mov	x23, x22
     948:	add	x20, x22, #0x8
     94c:	cbz	w19, a9c <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x1bc>
     950:	str	x1, [x20, #32]
     954:	mov	x0, x21
     958:	add	x1, x24, #0x0
     95c:	mov	x2, x26
     960:	str	xzr, [sp, #120]
     964:	bl	278 <_ZN11__sanitizer12ExtractTokenEPKcS1_PPc>
     968:	ldr	x1, [sp, #120]
     96c:	mov	x21, x0
     970:	cbz	x1, ae0 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x200>
     974:	mov	x0, x1
     978:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
     97c:	cbz	x0, a00 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x120>
     980:	sub	x19, x0, #0x1
     984:	mov	w28, #0x2                   	// #2
     988:	ldr	x0, [sp, #120]
     98c:	add	x19, x0, x19
     990:	ldrb	w1, [x19]
     994:	cmp	x0, x19
     998:	b.cc	9ac <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0xcc>  // b.lo, b.ul, b.last
     99c:	b	9b8 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0xd8>
     9a0:	ldrb	w1, [x19, #-1]!
     9a4:	cmp	x0, x19
     9a8:	b.eq	9b8 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0xd8>  // b.none
     9ac:	sub	w2, w1, #0x30
     9b0:	cmp	w2, #0x9
     9b4:	b.ls	9a0 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0xc0>  // b.plast
     9b8:	cmp	w1, #0x3a
     9bc:	b.ne	9f4 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x114>  // b.any
     9c0:	ldrb	w1, [x19, #1]
     9c4:	sub	w1, w1, #0x30
     9c8:	cmp	w1, #0x9
     9cc:	b.hi	9f4 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x114>  // b.pmore
     9d0:	ldr	w1, [x20, #56]
     9d4:	add	x0, x19, #0x1
     9d8:	str	w1, [x20, #60]
     9dc:	bl	0 <_ZN11__sanitizer14internal_atollEPKc>
     9e0:	str	w0, [x20, #56]
     9e4:	strb	wzr, [x19]
     9e8:	cmp	w28, #0x1
     9ec:	b.ne	a8c <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x1ac>  // b.any
     9f0:	ldr	x0, [sp, #120]
     9f4:	add	x2, x23, #0x38
     9f8:	mov	x1, x27
     9fc:	bl	278 <_ZN11__sanitizer12ExtractTokenEPKcS1_PPc>
     a00:	ldr	x0, [sp, #120]
     a04:	mov	x1, #0x0                   	// #0
     a08:	adrp	x19, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     a0c:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
     a10:	ldr	x0, [x20, #32]
     a14:	add	x1, x19, #0x0
     a18:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
     a1c:	cbz	w0, acc <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x1ec>
     a20:	ldr	x0, [x20, #48]
     a24:	add	x1, x19, #0x0
     a28:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
     a2c:	cbz	w0, a74 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x194>
     a30:	mov	w19, #0x0                   	// #0
     a34:	mov	x0, x21
     a38:	add	x1, x24, #0x0
     a3c:	mov	x2, x25
     a40:	str	xzr, [sp, #112]
     a44:	bl	278 <_ZN11__sanitizer12ExtractTokenEPKcS1_PPc>
     a48:	mov	x21, x0
     a4c:	ldr	x1, [sp, #112]
     a50:	cbnz	x1, 93c <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x5c>
     a54:	adrp	x2, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     a58:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     a5c:	add	x2, x2, #0x0
     a60:	add	x0, x0, #0x0
     a64:	mov	x4, #0x0                   	// #0
     a68:	mov	x3, #0x0                   	// #0
     a6c:	mov	w1, #0x12c                 	// #300
     a70:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     a74:	ldr	x0, [x20, #48]
     a78:	mov	x1, #0x0                   	// #0
     a7c:	mov	w19, #0x0                   	// #0
     a80:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
     a84:	str	xzr, [x20, #48]
     a88:	b	a34 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x154>
     a8c:	sub	x19, x19, #0x1
     a90:	mov	w28, #0x1                   	// #1
     a94:	ldr	x0, [sp, #120]
     a98:	b	990 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0xb0>
     a9c:	ldr	x0, [x22, #8]
     aa0:	bl	0 <_ZN11__sanitizer15SymbolizedStack3NewEm>
     aa4:	add	x20, x0, #0x8
     aa8:	ldp	x1, x2, [x22, #16]
     aac:	mov	x23, x0
     ab0:	ldr	w3, [x22, #32]
     ab4:	mov	x0, x20
     ab8:	bl	0 <_ZN11__sanitizer11AddressInfo14FillModuleInfoEPKcmNS_10ModuleArchE>
     abc:	ldp	x0, x1, [sp, #104]
     ac0:	str	x23, [x0]
     ac4:	str	x23, [sp, #104]
     ac8:	b	950 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x70>
     acc:	ldr	x0, [x20, #32]
     ad0:	mov	x1, #0x0                   	// #0
     ad4:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
     ad8:	str	xzr, [x20, #32]
     adc:	b	a20 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x140>
     ae0:	adrp	x2, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     ae4:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     ae8:	add	x2, x2, #0x0
     aec:	add	x0, x0, #0x0
     af0:	mov	x4, #0x0                   	// #0
     af4:	mov	x3, #0x0                   	// #0
     af8:	mov	w1, #0x10d                 	// #269
     afc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     b00:	mov	x0, x1
     b04:	mov	x1, #0x0                   	// #0
     b08:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
     b0c:	ldp	x21, x22, [sp, #16]
     b10:	ldp	x23, x24, [sp, #32]
     b14:	ldp	x25, x26, [sp, #48]
     b18:	ldp	x27, x28, [sp, #64]
     b1c:	ldr	x30, [sp, #80]
     b20:	ldp	x19, x20, [sp], #128
     b24:	ret

0000000000000b28 <_ZN11__sanitizer24ParseSymbolizeDataOutputEPKcPNS_8DataInfoE>:
     b28:	stp	x19, x20, [sp, #-32]!
     b2c:	adrp	x20, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     b30:	add	x20, x20, #0x0
     b34:	mov	x19, x1
     b38:	add	x2, x1, #0x28
     b3c:	mov	x1, x20
     b40:	str	x30, [sp, #16]
     b44:	bl	278 <_ZN11__sanitizer12ExtractTokenEPKcS1_PPc>
     b48:	add	x2, x19, #0x30
     b4c:	adrp	x1, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     b50:	add	x1, x1, #0x0
     b54:	bl	320 <_ZN11__sanitizer11ExtractUptrEPKcS1_Pm>
     b58:	add	x2, x19, #0x38
     b5c:	mov	x1, x20
     b60:	ldr	x30, [sp, #16]
     b64:	ldp	x19, x20, [sp], #32
     b68:	b	320 <_ZN11__sanitizer11ExtractUptrEPKcS1_Pm>
     b6c:	nop

0000000000000b70 <_ZN11__sanitizer17SymbolizerProcessC1EPKcb>:
     b70:	add	x4, x0, #0x4, lsl #12
     b74:	str	x30, [sp, #-16]!
     b78:	adrp	x3, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     b7c:	mov	x5, #0xffffffffffffffff    	// #-1
     b80:	add	x3, x3, #0x0
     b84:	stp	x3, x1, [x0]
     b88:	str	x5, [x0, #16]
     b8c:	str	xzr, [x0, #16408]
     b90:	strh	wzr, [x4, #32]
     b94:	strb	w2, [x4, #34]
     b98:	cbz	x1, bac <_ZN11__sanitizer17SymbolizerProcessC1EPKcb+0x3c>
     b9c:	ldrb	w0, [x1]
     ba0:	cbz	w0, bcc <_ZN11__sanitizer17SymbolizerProcessC1EPKcb+0x5c>
     ba4:	ldr	x30, [sp], #16
     ba8:	ret
     bac:	adrp	x2, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     bb0:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     bb4:	add	x2, x2, #0x0
     bb8:	add	x0, x0, #0x0
     bbc:	mov	x4, #0x0                   	// #0
     bc0:	mov	x3, #0x0                   	// #0
     bc4:	mov	w1, #0x18f                 	// #399
     bc8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     bcc:	adrp	x2, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     bd0:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     bd4:	add	x2, x2, #0x0
     bd8:	add	x0, x0, #0x0
     bdc:	mov	x4, #0x0                   	// #0
     be0:	mov	x3, #0x0                   	// #0
     be4:	mov	w1, #0x190                 	// #400
     be8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     bec:	nop

0000000000000bf0 <_ZN11__sanitizer14LLVMSymbolizerC1EPKcPNS_17LowLevelAllocatorE>:
     bf0:	stp	x19, x20, [sp, #-32]!
     bf4:	mov	x19, x0
     bf8:	adrp	x3, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     bfc:	add	x3, x3, #0x0
     c00:	stp	x21, x30, [sp, #16]
     c04:	mov	x0, x2
     c08:	stp	x3, xzr, [x19]
     c0c:	mov	x21, x1
     c10:	mov	x1, #0x4028                	// #16424
     c14:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     c18:	mov	x20, x0
     c1c:	mov	x1, x21
     c20:	mov	w2, #0x0                   	// #0
     c24:	bl	b70 <_ZN11__sanitizer17SymbolizerProcessC1EPKcb>
     c28:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     c2c:	add	x0, x0, #0x0
     c30:	ldp	x21, x30, [sp, #16]
     c34:	str	x0, [x20]
     c38:	str	x20, [x19, #16]
     c3c:	ldp	x19, x20, [sp], #32
     c40:	ret
     c44:	nop

0000000000000c48 <_ZN11__sanitizer17SymbolizerProcess7RestartEv>:
     c48:	stp	x19, x30, [sp, #-16]!
     c4c:	mov	x19, x0
     c50:	ldr	w0, [x0, #16]
     c54:	cmn	w0, #0x1
     c58:	b.eq	c60 <_ZN11__sanitizer17SymbolizerProcess7RestartEv+0x18>  // b.none
     c5c:	bl	0 <_ZN11__sanitizer9CloseFileEi>
     c60:	ldr	w0, [x19, #20]
     c64:	cmn	w0, #0x1
     c68:	b.eq	c70 <_ZN11__sanitizer17SymbolizerProcess7RestartEv+0x28>  // b.none
     c6c:	bl	0 <_ZN11__sanitizer9CloseFileEi>
     c70:	mov	x0, x19
     c74:	ldp	x19, x30, [sp], #16
     c78:	b	0 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv>
     c7c:	nop

0000000000000c80 <_ZN11__sanitizer17SymbolizerProcess17WriteToSymbolizerEPKcm>:
     c80:	cbnz	x2, c8c <_ZN11__sanitizer17SymbolizerProcess17WriteToSymbolizerEPKcm+0xc>
     c84:	mov	w0, #0x1                   	// #1
     c88:	ret
     c8c:	stp	x19, x20, [sp, #-48]!
     c90:	mov	x20, x0
     c94:	mov	x19, x2
     c98:	ldr	w0, [x0, #20]
     c9c:	add	x3, sp, #0x28
     ca0:	mov	x4, #0x0                   	// #0
     ca4:	str	x30, [sp, #16]
     ca8:	str	xzr, [sp, #40]
     cac:	bl	0 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi>
     cb0:	tst	w0, #0xff
     cb4:	b.eq	cd4 <_ZN11__sanitizer17SymbolizerProcess17WriteToSymbolizerEPKcm+0x54>  // b.none
     cb8:	ldr	x0, [sp, #40]
     cbc:	cmp	x0, x19
     cc0:	b.ne	cd4 <_ZN11__sanitizer17SymbolizerProcess17WriteToSymbolizerEPKcm+0x54>  // b.any
     cc4:	mov	w0, #0x1                   	// #1
     cc8:	ldr	x30, [sp, #16]
     ccc:	ldp	x19, x20, [sp], #48
     cd0:	ret
     cd4:	ldr	w1, [x20, #20]
     cd8:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     cdc:	add	x0, x0, #0x0
     ce0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     ce4:	mov	w0, #0x0                   	// #0
     ce8:	ldr	x30, [sp, #16]
     cec:	ldp	x19, x20, [sp], #48
     cf0:	ret
     cf4:	nop

0000000000000cf8 <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc>:
     cf8:	stp	x19, x20, [sp, #-32]!
     cfc:	mov	x19, x0
     d00:	ldr	w0, [x0, #16]
     d04:	str	x30, [sp, #16]
     d08:	cmn	w0, #0x1
     d0c:	b.eq	d84 <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc+0x8c>  // b.none
     d10:	ldr	w0, [x19, #20]
     d14:	cmn	w0, #0x1
     d18:	b.eq	d84 <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc+0x8c>  // b.none
     d1c:	mov	x20, x1
     d20:	mov	x0, x1
     d24:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
     d28:	mov	x2, x0
     d2c:	mov	x1, x20
     d30:	mov	x0, x19
     d34:	bl	c80 <_ZN11__sanitizer17SymbolizerProcess17WriteToSymbolizerEPKcm>
     d38:	tst	w0, #0xff
     d3c:	b.eq	d84 <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc+0x8c>  // b.none
     d40:	mov	x20, x19
     d44:	adrp	x0, 1e0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
     d48:	add	x0, x0, #0x0
     d4c:	mov	x2, #0x4000                	// #16384
     d50:	ldr	x1, [x20], #24
     d54:	ldr	x3, [x1, #16]
     d58:	mov	x1, x20
     d5c:	cmp	x3, x0
     d60:	mov	x0, x19
     d64:	b.ne	d98 <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc+0xa0>  // b.any
     d68:	bl	a8 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     d6c:	and	w0, w0, #0xff
     d70:	cbz	w0, d84 <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc+0x8c>
     d74:	mov	x0, x20
     d78:	ldr	x30, [sp, #16]
     d7c:	ldp	x19, x20, [sp], #32
     d80:	ret
     d84:	mov	x20, #0x0                   	// #0
     d88:	mov	x0, x20
     d8c:	ldr	x30, [sp, #16]
     d90:	ldp	x19, x20, [sp], #32
     d94:	ret
     d98:	blr	x3
     d9c:	and	w0, w0, #0xff
     da0:	b	d70 <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc+0x78>
     da4:	nop

0000000000000da8 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc>:
     da8:	stp	x19, x20, [sp, #-48]!
     dac:	mov	x19, x0
     db0:	stp	x21, x22, [sp, #16]
     db4:	add	x22, x0, #0x4, lsl #12
     db8:	ldrb	w0, [x22, #32]
     dbc:	str	x30, [sp, #40]
     dc0:	cbnz	w0, e44 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x9c>
     dc4:	mov	x20, x1
     dc8:	str	x23, [sp, #32]
     dcc:	ldr	x23, [x19, #8]
     dd0:	bl	0 <_ZN11__sanitizer14GetProcessNameEv>
     dd4:	mov	x21, x0
     dd8:	cbz	x0, e28 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x80>
     ddc:	mov	x0, x23
     de0:	bl	0 <_ZN11__sanitizer15StripModuleNameEPKc>
     de4:	mov	x1, x0
     de8:	cbz	x0, e28 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x80>
     dec:	mov	x0, x21
     df0:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
     df4:	cbnz	w0, e28 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x80>
     df8:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     dfc:	add	x0, x0, #0x0
     e00:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     e04:	mov	w0, #0x1                   	// #1
     e08:	strb	w0, [x22, #32]
     e0c:	mov	x2, #0x0                   	// #0
     e10:	mov	x0, x2
     e14:	ldp	x21, x22, [sp, #16]
     e18:	ldr	x23, [sp, #32]
     e1c:	ldr	x30, [sp, #40]
     e20:	ldp	x19, x20, [sp], #48
     e24:	ret
     e28:	ldr	x0, [x19, #16408]
     e2c:	cmp	x0, #0x4
     e30:	b.ls	e74 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0xcc>  // b.plast
     e34:	nop
     e38:	ldrb	w0, [x22, #32]
     e3c:	cbz	w0, ea4 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0xfc>
     e40:	ldr	x23, [sp, #32]
     e44:	mov	x2, #0x0                   	// #0
     e48:	mov	x0, x2
     e4c:	ldp	x21, x22, [sp, #16]
     e50:	ldr	x30, [sp, #40]
     e54:	ldp	x19, x20, [sp], #48
     e58:	ret
     e5c:	bl	c48 <_ZN11__sanitizer17SymbolizerProcess7RestartEv>
     e60:	ldr	x0, [x19, #16408]
     e64:	add	x0, x0, #0x1
     e68:	str	x0, [x19, #16408]
     e6c:	cmp	x0, #0x4
     e70:	b.hi	e38 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x90>  // b.pmore
     e74:	mov	x1, x20
     e78:	mov	x0, x19
     e7c:	bl	cf8 <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc>
     e80:	mov	x2, x0
     e84:	mov	x0, x19
     e88:	cbz	x2, e5c <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0xb4>
     e8c:	mov	x0, x2
     e90:	ldp	x21, x22, [sp, #16]
     e94:	ldr	x23, [sp, #32]
     e98:	ldr	x30, [sp, #40]
     e9c:	ldp	x19, x20, [sp], #48
     ea0:	ret
     ea4:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     ea8:	add	x0, x0, #0x0
     eac:	b	e00 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x58>

0000000000000eb0 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE>:
     eb0:	stp	x19, x20, [sp, #-32]!
     eb4:	mov	w7, w4
     eb8:	mov	x4, x2
     ebc:	str	x30, [sp, #16]
     ec0:	cbz	x2, 1000 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x150>
     ec4:	and	w1, w1, #0xff
     ec8:	mov	x5, x3
     ecc:	cmp	w1, #0x0
     ed0:	adrp	x3, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     ed4:	adrp	x1, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     ed8:	add	x3, x3, #0x0
     edc:	add	x1, x1, #0x0
     ee0:	mov	x19, x0
     ee4:	add	x20, x0, #0x18
     ee8:	csel	x3, x1, x3, ne  // ne = any
     eec:	cbz	w7, f54 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0xa4>
     ef0:	cmp	w7, #0x5
     ef4:	b.eq	101c <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x16c>  // b.none
     ef8:	b.hi	fa4 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0xf4>  // b.pmore
     efc:	cmp	w7, #0x3
     f00:	b.eq	ff4 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x144>  // b.none
     f04:	adrp	x1, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     f08:	cmp	w7, #0x4
     f0c:	add	x1, x1, #0x0
     f10:	b.ne	f90 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0xe0>  // b.any
     f14:	nop
     f18:	mov	x6, x5
     f1c:	mov	x0, x20
     f20:	mov	x5, x1
     f24:	adrp	x2, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     f28:	mov	x1, #0x4000                	// #16384
     f2c:	add	x2, x2, #0x0
     f30:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
     f34:	mov	w1, #0x3fff                	// #16383
     f38:	cmp	w0, w1
     f3c:	b.gt	f74 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0xc4>
     f40:	mov	x1, x20
     f44:	ldr	x0, [x19, #16]
     f48:	ldr	x30, [sp, #16]
     f4c:	ldp	x19, x20, [sp], #32
     f50:	b	da8 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc>
     f54:	mov	x1, #0x4000                	// #16384
     f58:	mov	x0, x20
     f5c:	adrp	x2, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     f60:	add	x2, x2, #0x0
     f64:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
     f68:	mov	w1, #0x3fff                	// #16383
     f6c:	cmp	w0, w1
     f70:	b.le	f40 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x90>
     f74:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     f78:	add	x0, x0, #0x0
     f7c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     f80:	mov	x0, #0x0                   	// #0
     f84:	ldr	x30, [sp, #16]
     f88:	ldp	x19, x20, [sp], #32
     f8c:	ret
     f90:	cmp	w7, #0x1
     f94:	b.ne	fc0 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x110>  // b.any
     f98:	adrp	x1, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     f9c:	add	x1, x1, #0x0
     fa0:	b	f18 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x68>
     fa4:	cmp	w7, #0x7
     fa8:	b.eq	fe8 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x138>  // b.none
     fac:	cmp	w7, #0x8
     fb0:	b.ne	fd4 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x124>  // b.any
     fb4:	adrp	x1, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     fb8:	add	x1, x1, #0x0
     fbc:	b	f18 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x68>
     fc0:	cmp	w7, #0x2
     fc4:	b.ne	1028 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x178>  // b.any
     fc8:	adrp	x1, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     fcc:	add	x1, x1, #0x0
     fd0:	b	f18 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x68>
     fd4:	cmp	w7, #0x6
     fd8:	b.ne	1028 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x178>  // b.any
     fdc:	adrp	x1, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     fe0:	add	x1, x1, #0x0
     fe4:	b	f18 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x68>
     fe8:	adrp	x1, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     fec:	add	x1, x1, #0x0
     ff0:	b	f18 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x68>
     ff4:	adrp	x1, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
     ff8:	add	x1, x1, #0x0
     ffc:	b	f18 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x68>
    1000:	adrp	x2, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
    1004:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
    1008:	add	x2, x2, #0x0
    100c:	add	x0, x0, #0x0
    1010:	mov	x3, #0x0                   	// #0
    1014:	mov	w1, #0x173                 	// #371
    1018:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    101c:	adrp	x1, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
    1020:	add	x1, x1, #0x0
    1024:	b	f18 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x68>
    1028:	adrp	x2, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
    102c:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
    1030:	add	x2, x2, #0x0
    1034:	add	x0, x0, #0x0
    1038:	mov	x4, #0x0                   	// #0
    103c:	mov	x3, #0x0                   	// #0
    1040:	mov	w1, #0x2a9                 	// #681
    1044:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000001048 <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE>:
    1048:	stp	x19, x30, [sp, #-16]!
    104c:	mov	x19, x2
    1050:	mov	w1, #0x0                   	// #0
    1054:	ldr	w4, [x2, #32]
    1058:	ldr	x2, [x2, #16]
    105c:	ldr	x3, [x19, #24]
    1060:	bl	eb0 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE>
    1064:	cbnz	x0, 1074 <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x2c>
    1068:	mov	w0, #0x0                   	// #0
    106c:	ldp	x19, x30, [sp], #16
    1070:	ret
    1074:	mov	x1, x19
    1078:	bl	8e0 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE>
    107c:	mov	w0, #0x1                   	// #1
    1080:	ldp	x19, x30, [sp], #16
    1084:	ret

0000000000001088 <_ZN11__sanitizer14LLVMSymbolizer13SymbolizeDataEmPNS_8DataInfoE>:
    1088:	stp	x19, x20, [sp, #-32]!
    108c:	mov	x19, x2
    1090:	mov	x20, x1
    1094:	ldr	w4, [x2, #16]
    1098:	mov	w1, #0x1                   	// #1
    109c:	ldr	x2, [x2]
    10a0:	ldr	x3, [x19, #8]
    10a4:	str	x30, [sp, #16]
    10a8:	bl	eb0 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE>
    10ac:	cbnz	x0, 10c0 <_ZN11__sanitizer14LLVMSymbolizer13SymbolizeDataEmPNS_8DataInfoE+0x38>
    10b0:	mov	w0, #0x0                   	// #0
    10b4:	ldr	x30, [sp, #16]
    10b8:	ldp	x19, x20, [sp], #32
    10bc:	ret
    10c0:	mov	x1, x19
    10c4:	bl	b28 <_ZN11__sanitizer24ParseSymbolizeDataOutputEPKcPNS_8DataInfoE>
    10c8:	ldr	x1, [x19, #48]
    10cc:	mov	w0, #0x1                   	// #1
    10d0:	ldr	x2, [x19, #8]
    10d4:	add	x1, x20, x1
    10d8:	ldr	x30, [sp, #16]
    10dc:	sub	x1, x1, x2
    10e0:	str	x1, [x19, #48]
    10e4:	ldp	x19, x20, [sp], #32
    10e8:	ret

Disassembly of section .text._ZN11__sanitizer14SymbolizerTool5FlushEv:

0000000000000000 <_ZN11__sanitizer14SymbolizerTool5FlushEv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer14SymbolizerTool8DemangleEPKc:

0000000000000000 <_ZN11__sanitizer14SymbolizerTool8DemangleEPKc>:
   0:	mov	x0, #0x0                   	// #0
   4:	ret

Disassembly of section .text._ZNK11__sanitizer21LLVMSymbolizerProcess18ReachedEndOfOutputEPKcm:

0000000000000000 <_ZNK11__sanitizer21LLVMSymbolizerProcess18ReachedEndOfOutputEPKcm>:
   0:	cmp	x2, #0x1
   4:	mov	w0, #0x0                   	// #0
   8:	b.ls	1c <_ZNK11__sanitizer21LLVMSymbolizerProcess18ReachedEndOfOutputEPKcm+0x1c>  // b.plast
   c:	add	x1, x1, x2
  10:	ldurb	w2, [x1, #-1]
  14:	cmp	w2, #0xa
  18:	b.eq	20 <_ZNK11__sanitizer21LLVMSymbolizerProcess18ReachedEndOfOutputEPKcm+0x20>  // b.none
  1c:	ret
  20:	ldurb	w0, [x1, #-2]
  24:	cmp	w0, #0xa
  28:	cset	w0, eq  // eq = none
  2c:	ret

Disassembly of section .text._ZNK11__sanitizer21LLVMSymbolizerProcess7GetArgVEPKcRA6_S2_:

0000000000000000 <_ZNK11__sanitizer21LLVMSymbolizerProcess7GetArgVEPKcRA6_S2_>:
   0:	adrp	x3, 0 <_ZN11__sanitizer21common_flags_dont_useE>
   4:	adrp	x0, 0 <_ZNK11__sanitizer21LLVMSymbolizerProcess7GetArgVEPKcRA6_S2_>
   8:	adrp	x4, 0 <_ZNK11__sanitizer21LLVMSymbolizerProcess7GetArgVEPKcRA6_S2_>
   c:	add	x4, x4, #0x0
  10:	ldr	x5, [x3]
  14:	add	x3, x0, #0x0
  18:	adrp	x0, 0 <_ZNK11__sanitizer21LLVMSymbolizerProcess7GetArgVEPKcRA6_S2_>
  1c:	add	x0, x0, #0x0
  20:	ldrb	w5, [x5, #180]
  24:	stp	x4, xzr, [x2, #16]
  28:	cmp	w5, #0x0
  2c:	csel	x0, x0, x3, ne  // ne = any
  30:	stp	x1, x0, [x2]
  34:	ret

Disassembly of section .text._ZNK11__sanitizer17SymbolizerProcess18ReachedEndOfOutputEPKcm:

0000000000000000 <_ZNK11__sanitizer17SymbolizerProcess18ReachedEndOfOutputEPKcm>:
   0:	str	x30, [sp, #-16]!
   4:	adrp	x2, 0 <_ZNK11__sanitizer17SymbolizerProcess18ReachedEndOfOutputEPKcm>
   8:	adrp	x0, 0 <_ZNK11__sanitizer17SymbolizerProcess18ReachedEndOfOutputEPKcm>
   c:	add	x2, x2, #0x0
  10:	add	x0, x0, #0x0
  14:	mov	x4, #0x0                   	// #0
  18:	mov	x3, #0x0                   	// #0
  1c:	mov	w1, #0x4e                  	// #78
  20:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

Disassembly of section .text._ZNK11__sanitizer17SymbolizerProcess7GetArgVEPKcRA6_S2_:

0000000000000000 <_ZNK11__sanitizer17SymbolizerProcess7GetArgVEPKcRA6_S2_>:
   0:	str	x30, [sp, #-16]!
   4:	adrp	x2, 0 <_ZNK11__sanitizer17SymbolizerProcess7GetArgVEPKcRA6_S2_>
   8:	adrp	x0, 0 <_ZNK11__sanitizer17SymbolizerProcess7GetArgVEPKcRA6_S2_>
   c:	add	x2, x2, #0x0
  10:	add	x0, x0, #0x0
  14:	mov	x4, #0x0                   	// #0
  18:	mov	x3, #0x0                   	// #0
  1c:	mov	w1, #0x57                  	// #87
  20:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x20, x0
   8:	mov	w19, #0x0                   	// #0
   c:	stp	x21, x30, [sp, #16]
  10:	mov	w21, #0x1                   	// #1
  14:	nop
  18:	cmp	w19, #0x9
  1c:	b.gt	58 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x58>
  20:	ldrb	w0, [x20]
  24:	tst	w0, #0xff
  28:	b.ne	44 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x44>  // b.any
  2c:	ldxrb	w0, [x20]
  30:	stxrb	w1, w21, [x20]
  34:	cbnz	w1, 2c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x2c>
  38:	dmb	ish
  3c:	tst	w0, #0xff
  40:	b.eq	4c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x4c>  // b.none
  44:	add	w19, w19, #0x1
  48:	b	18 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x18>
  4c:	ldp	x21, x30, [sp, #16]
  50:	ldp	x19, x20, [sp], #32
  54:	ret
  58:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  5c:	b	20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>

sanitizer_symbolizer_mac.o:     file format elf64-littleaarch64


sanitizer_symbolizer_posix_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>:
   0:	cmp	x2, #0x8
   4:	b.hi	10 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm+0x10>  // b.pmore
   8:	mov	w0, #0x0                   	// #0
   c:	ret
  10:	adrp	x3, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
  14:	str	x30, [sp, #-16]!
  18:	sub	x2, x2, #0x8
  1c:	add	x0, x1, x2
  20:	add	x1, x3, #0x0
  24:	mov	x2, #0x8                   	// #8
  28:	bl	0 <_ZN11__sanitizer15internal_memcmpEPKvS1_m>
  2c:	cmp	w0, #0x0
  30:	cset	w0, eq  // eq = none
  34:	ldr	x30, [sp], #16
  38:	ret
  3c:	nop

0000000000000040 <_ZN11__sanitizer13DemangleSwiftEPKc.part.0>:
  40:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
  44:	stp	x19, x20, [sp, #-32]!
  48:	ldr	x20, [x1]
  4c:	str	x30, [sp, #16]
  50:	cbz	x20, 80 <_ZN11__sanitizer13DemangleSwiftEPKc.part.0+0x40>
  54:	mov	x19, x0
  58:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
  5c:	mov	x16, x20
  60:	mov	x1, x0
  64:	mov	x0, x19
  68:	mov	w4, #0x0                   	// #0
  6c:	ldr	x30, [sp, #16]
  70:	mov	x3, #0x0                   	// #0
  74:	ldp	x19, x20, [sp], #32
  78:	mov	x2, #0x0                   	// #0
  7c:	br	x16
  80:	mov	x0, #0x0                   	// #0
  84:	ldr	x30, [sp, #16]
  88:	ldp	x19, x20, [sp], #32
  8c:	ret

0000000000000090 <_ZN11__sanitizer14DemangleCXXABIEPKc>:
  90:	adrp	x1, 0 <__cxa_demangle>
  94:	stp	x19, x30, [sp, #-16]!
  98:	mov	x19, x0
  9c:	ldr	x1, [x1]
  a0:	cbz	x1, c0 <_ZN11__sanitizer14DemangleCXXABIEPKc+0x30>
  a4:	mov	x3, #0x0                   	// #0
  a8:	mov	x2, #0x0                   	// #0
  ac:	mov	x1, #0x0                   	// #0
  b0:	bl	0 <__cxa_demangle>
  b4:	cbz	x0, c0 <_ZN11__sanitizer14DemangleCXXABIEPKc+0x30>
  b8:	ldp	x19, x30, [sp], #16
  bc:	ret
  c0:	mov	x0, x19
  c4:	ldp	x19, x30, [sp], #16
  c8:	ret
  cc:	nop

00000000000000d0 <_ZN11__sanitizer13DemangleSwiftEPKc>:
  d0:	cbz	x0, f0 <_ZN11__sanitizer13DemangleSwiftEPKc+0x20>
  d4:	ldrb	w2, [x0]
  d8:	cmp	w2, #0x5f
  dc:	b.ne	f0 <_ZN11__sanitizer13DemangleSwiftEPKc+0x20>  // b.any
  e0:	ldrb	w1, [x0, #1]
  e4:	cmp	w1, #0x54
  e8:	b.ne	f0 <_ZN11__sanitizer13DemangleSwiftEPKc+0x20>  // b.any
  ec:	b	40 <_ZN11__sanitizer13DemangleSwiftEPKc.part.0>
  f0:	mov	x0, #0x0                   	// #0
  f4:	ret

00000000000000f8 <_ZN11__sanitizer19DemangleSwiftAndCXXEPKc>:
  f8:	cbz	x0, 15c <_ZN11__sanitizer19DemangleSwiftAndCXXEPKc+0x64>
  fc:	stp	x19, x30, [sp, #-16]!
 100:	mov	x19, x0
 104:	ldrb	w1, [x0]
 108:	cmp	w1, #0x5f
 10c:	b.ne	12c <_ZN11__sanitizer19DemangleSwiftAndCXXEPKc+0x34>  // b.any
 110:	ldrb	w1, [x0, #1]
 114:	cmp	w1, #0x54
 118:	b.ne	12c <_ZN11__sanitizer19DemangleSwiftAndCXXEPKc+0x34>  // b.any
 11c:	bl	40 <_ZN11__sanitizer13DemangleSwiftEPKc.part.0>
 120:	cbz	x0, 12c <_ZN11__sanitizer19DemangleSwiftAndCXXEPKc+0x34>
 124:	ldp	x19, x30, [sp], #16
 128:	ret
 12c:	adrp	x0, 0 <__cxa_demangle>
 130:	ldr	x0, [x0]
 134:	cbz	x0, 150 <_ZN11__sanitizer19DemangleSwiftAndCXXEPKc+0x58>
 138:	mov	x0, x19
 13c:	mov	x3, #0x0                   	// #0
 140:	mov	x2, #0x0                   	// #0
 144:	mov	x1, #0x0                   	// #0
 148:	bl	0 <__cxa_demangle>
 14c:	cbnz	x0, 124 <_ZN11__sanitizer19DemangleSwiftAndCXXEPKc+0x2c>
 150:	mov	x0, x19
 154:	ldp	x19, x30, [sp], #16
 158:	ret
 15c:	mov	x0, #0x0                   	// #0
 160:	ret
 164:	nop

0000000000000168 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv>:
 168:	stp	x19, x20, [sp, #-128]!
 16c:	mov	x19, x0
 170:	ldr	x0, [x0, #8]
 174:	stp	x21, x22, [sp, #16]
 178:	str	x30, [sp, #56]
 17c:	bl	0 <_ZN11__sanitizer10FileExistsEPKc>
 180:	ands	w21, w0, #0xff
 184:	b.ne	1a8 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x40>  // b.any
 188:	add	x19, x19, #0x4, lsl #12
 18c:	ldrb	w0, [x19, #33]
 190:	cbz	w0, 248 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0xe0>
 194:	mov	w0, w21
 198:	ldp	x21, x22, [sp, #16]
 19c:	ldr	x30, [sp, #56]
 1a0:	ldp	x19, x20, [sp], #128
 1a4:	ret
 1a8:	mov	x2, #0x8                   	// #8
 1ac:	mov	w1, #0x0                   	// #0
 1b0:	add	x0, sp, #0x40
 1b4:	stp	x23, x24, [sp, #32]
 1b8:	add	x23, sp, #0x50
 1bc:	str	x25, [sp, #48]
 1c0:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 1c4:	mov	x24, x23
 1c8:	mov	x20, x23
 1cc:	add	x0, sp, #0x48
 1d0:	mov	x22, #0x0                   	// #0
 1d4:	mov	w21, #0x0                   	// #0
 1d8:	mov	x2, #0x8                   	// #8
 1dc:	mov	w1, #0x0                   	// #0
 1e0:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 1e4:	mov	x0, x20
 1e8:	bl	0 <pipe>
 1ec:	cmn	w0, #0x1
 1f0:	b.eq	270 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x108>  // b.none
 1f4:	ldr	w0, [x20]
 1f8:	cmp	w0, #0x2
 1fc:	b.le	214 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0xac>
 200:	ldr	w0, [x20, #4]
 204:	cmp	w0, #0x2
 208:	b.le	214 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0xac>
 20c:	cbnz	x22, 2e0 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x178>
 210:	mov	x22, x20
 214:	add	w21, w21, #0x1
 218:	add	x20, x20, #0x8
 21c:	cmp	w21, #0x5
 220:	b.ne	1e4 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x7c>  // b.any
 224:	cbnz	x22, 2c0 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x158>
 228:	adrp	x2, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 22c:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 230:	add	x2, x2, #0x0
 234:	add	x0, x0, #0x0
 238:	mov	x4, #0x0                   	// #0
 23c:	mov	x3, #0x0                   	// #0
 240:	mov	w1, #0x87                  	// #135
 244:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 248:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 24c:	add	x0, x0, #0x0
 250:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 254:	mov	w0, #0x1                   	// #1
 258:	strb	w0, [x19, #33]
 25c:	mov	w0, w21
 260:	ldp	x21, x22, [sp, #16]
 264:	ldr	x30, [sp, #56]
 268:	ldp	x19, x20, [sp], #128
 26c:	ret
 270:	cbz	w21, 298 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x130>
 274:	mov	w19, #0x0                   	// #0
 278:	ldr	w0, [x24]
 27c:	add	w19, w19, #0x1
 280:	add	x24, x24, #0x8
 284:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 288:	ldur	w0, [x24, #-4]
 28c:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 290:	cmp	w19, w21
 294:	b.ne	278 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x110>  // b.any
 298:	bl	0 <__errno_location>
 29c:	mov	x1, x0
 2a0:	mov	w21, #0x0                   	// #0
 2a4:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 2a8:	add	x0, x0, #0x0
 2ac:	ldr	w1, [x1]
 2b0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 2b4:	ldp	x23, x24, [sp, #32]
 2b8:	ldr	x25, [sp, #48]
 2bc:	b	194 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x2c>
 2c0:	adrp	x2, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 2c4:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 2c8:	add	x2, x2, #0x0
 2cc:	add	x0, x0, #0x0
 2d0:	mov	x4, #0x0                   	// #0
 2d4:	mov	x3, #0x0                   	// #0
 2d8:	mov	w1, #0x88                  	// #136
 2dc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2e0:	cbz	w21, 310 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x1a8>
 2e4:	mov	w25, #0x0                   	// #0
 2e8:	cmp	x24, x22
 2ec:	b.eq	300 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x198>  // b.none
 2f0:	ldr	w0, [x24]
 2f4:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 2f8:	ldr	w0, [x24, #4]
 2fc:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 300:	add	w25, w25, #0x1
 304:	add	x24, x24, #0x8
 308:	cmp	w25, w21
 30c:	b.ne	2e8 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x180>  // b.any
 310:	add	x0, x19, #0x4, lsl #12
 314:	ldr	w2, [x20]
 318:	ldr	x1, [x22]
 31c:	ldrb	w21, [x0, #34]
 320:	ldr	x0, [x20]
 324:	stp	x1, x0, [sp, #64]
 328:	ldr	w3, [x22, #4]
 32c:	cbnz	w21, 428 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x2c0>
 330:	ldp	x4, x0, [x19]
 334:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 338:	add	x1, x1, #0x0
 33c:	ldr	x4, [x4, #8]
 340:	cmp	x4, x1
 344:	b.ne	3b8 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x250>  // b.any
 348:	ldr	x4, [x19, #16424]
 34c:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 350:	add	x1, x1, #0x0
 354:	stp	x0, x1, [sp, #80]
 358:	stp	x4, xzr, [sp, #96]
 35c:	mov	x1, x23
 360:	mov	w4, #0xffffffff            	// #-1
 364:	bl	0 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii>
 368:	mov	w20, w0
 36c:	cmp	w0, #0x0
 370:	b.lt	3ec <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x284>  // b.tstop
 374:	ldr	w1, [sp, #64]
 378:	ldr	w0, [sp, #76]
 37c:	stp	w1, w0, [x19, #16]
 380:	b.eq	408 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x2a0>  // b.none
 384:	mov	w0, #0xa                   	// #10
 388:	bl	0 <_ZN11__sanitizer14SleepForMillisEi>
 38c:	mov	w0, w20
 390:	bl	0 <_ZN11__sanitizer16IsProcessRunningEi>
 394:	ands	w21, w0, #0xff
 398:	b.eq	3d4 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x26c>  // b.none
 39c:	mov	w0, w21
 3a0:	ldp	x21, x22, [sp, #16]
 3a4:	ldp	x23, x24, [sp, #32]
 3a8:	ldr	x25, [sp, #48]
 3ac:	ldr	x30, [sp, #56]
 3b0:	ldp	x19, x20, [sp], #128
 3b4:	ret
 3b8:	mov	x1, x0
 3bc:	mov	x2, x23
 3c0:	mov	x0, x19
 3c4:	blr	x4
 3c8:	ldp	w3, w2, [sp, #68]
 3cc:	ldr	x0, [x19, #8]
 3d0:	b	35c <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x1f4>
 3d4:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 3d8:	add	x0, x0, #0x0
 3dc:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 3e0:	ldp	x23, x24, [sp, #32]
 3e4:	ldr	x25, [sp, #48]
 3e8:	b	194 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x2c>
 3ec:	ldr	w0, [sp, #64]
 3f0:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 3f4:	ldr	w0, [sp, #76]
 3f8:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 3fc:	ldp	x23, x24, [sp, #32]
 400:	ldr	x25, [sp, #48]
 404:	b	194 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x2c>
 408:	adrp	x2, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 40c:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 410:	add	x2, x2, #0x0
 414:	add	x0, x0, #0x0
 418:	mov	x4, #0x0                   	// #0
 41c:	mov	x3, #0x0                   	// #0
 420:	mov	w1, #0xef                  	// #239
 424:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 428:	adrp	x2, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 42c:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 430:	add	x2, x2, #0x0
 434:	add	x0, x0, #0x0
 438:	mov	x4, #0x0                   	// #0
 43c:	mov	x3, #0x0                   	// #0
 440:	mov	w1, #0xde                  	// #222
 444:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000448 <_ZN11__sanitizer10Symbolizer16PlatformDemangleEPKc>:
 448:	mov	x0, x1
 44c:	b	f8 <_ZN11__sanitizer19DemangleSwiftAndCXXEPKc>

0000000000000450 <_ZN11__sanitizer10Symbolizer12PlatformInitEv>:
 450:	stp	x19, x20, [sp, #-128]!
 454:	adrp	x20, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 458:	ldr	x0, [x20]
 45c:	stp	x21, x22, [sp, #16]
 460:	ldrb	w0, [x0]
 464:	str	x30, [sp, #56]
 468:	cbnz	w0, 4f0 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0xa0>
 46c:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 470:	adrp	x22, 0 <_ZN11__sanitizer10Symbolizer21symbolizer_allocator_E>
 474:	ldr	x0, [x0]
 478:	ldr	w0, [x0]
 47c:	sxtw	x0, w0
 480:	cmp	x0, #0x1
 484:	b.hi	4d4 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x84>  // b.pmore
 488:	mov	x19, #0x0                   	// #0
 48c:	mov	x2, #0x0                   	// #0
 490:	ldr	x0, [x22]
 494:	mov	x1, #0xf0                  	// #240
 498:	stp	x2, x19, [sp, #104]
 49c:	str	x19, [sp, #120]
 4a0:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 4a4:	ldp	x4, x5, [sp, #104]
 4a8:	add	x1, sp, #0x40
 4ac:	ldr	x2, [sp, #120]
 4b0:	mov	x19, x0
 4b4:	stp	x4, x5, [sp, #64]
 4b8:	str	x2, [sp, #80]
 4bc:	bl	0 <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE>
 4c0:	mov	x0, x19
 4c4:	ldp	x21, x22, [sp, #16]
 4c8:	ldr	x30, [sp, #56]
 4cc:	ldp	x19, x20, [sp], #128
 4d0:	ret
 4d4:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 4d8:	add	x0, x0, #0x0
 4dc:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 4e0:	mov	x19, #0x0                   	// #0
 4e4:	adrp	x22, 0 <_ZN11__sanitizer10Symbolizer21symbolizer_allocator_E>
 4e8:	mov	x2, #0x0                   	// #0
 4ec:	b	490 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x40>
 4f0:	bl	0 <_ZN11__sanitizer22IsAllocatorOutOfMemoryEv>
 4f4:	tst	w0, #0xff
 4f8:	b.eq	54c <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0xfc>  // b.none
 4fc:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 500:	ldr	x0, [x0]
 504:	ldr	w0, [x0]
 508:	sxtw	x0, w0
 50c:	cmp	x0, #0x1
 510:	b.hi	5b0 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x160>  // b.pmore
 514:	adrp	x22, 0 <_ZN11__sanitizer10Symbolizer21symbolizer_allocator_E>
 518:	ldr	x0, [x22]
 51c:	bl	0 <_ZN11__sanitizer22LibbacktraceSymbolizer3getEPNS_17LowLevelAllocatorE>
 520:	mov	x19, x0
 524:	cbz	x0, 5d0 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x180>
 528:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 52c:	ldr	x0, [x0]
 530:	ldr	w0, [x0]
 534:	sxtw	x0, w0
 538:	cmp	x0, #0x1
 53c:	b.hi	5c0 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x170>  // b.pmore
 540:	mov	x2, #0x1                   	// #1
 544:	str	xzr, [x19, #8]
 548:	b	490 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x40>
 54c:	adrp	x1, 0 <__sanitizer_symbolize_data>
 550:	adrp	x0, 0 <__sanitizer_symbolize_code>
 554:	ldr	x1, [x1]
 558:	ldr	x0, [x0]
 55c:	cmp	x1, #0x0
 560:	ccmp	x0, #0x0, #0x4, ne  // ne = any
 564:	b.eq	514 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0xc4>  // b.none
 568:	adrp	x22, 0 <_ZN11__sanitizer10Symbolizer21symbolizer_allocator_E>
 56c:	mov	x1, #0x4010                	// #16400
 570:	ldr	x0, [x22]
 574:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 578:	mov	x19, x0
 57c:	adrp	x1, 0 <_ZN11__sanitizer17current_verbosityE>
 580:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 584:	add	x0, x0, #0x0
 588:	ldr	x1, [x1]
 58c:	stp	x0, xzr, [x19]
 590:	ldr	w0, [x1]
 594:	sxtw	x0, w0
 598:	cmp	x0, #0x1
 59c:	b.ls	540 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0xf0>  // b.plast
 5a0:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 5a4:	add	x0, x0, #0x0
 5a8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 5ac:	b	540 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0xf0>
 5b0:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 5b4:	add	x0, x0, #0x0
 5b8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 5bc:	b	514 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0xc4>
 5c0:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 5c4:	add	x0, x0, #0x0
 5c8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 5cc:	b	540 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0xf0>
 5d0:	ldr	x0, [x20]
 5d4:	stp	x23, x24, [sp, #32]
 5d8:	ldr	x23, [x0, #8]
 5dc:	cbz	x23, 66c <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x21c>
 5e0:	mov	x0, x23
 5e4:	bl	0 <_ZN11__sanitizer15StripModuleNameEPKc>
 5e8:	ldrb	w1, [x23]
 5ec:	mov	x21, x0
 5f0:	cbz	w1, 7ec <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x39c>
 5f4:	adrp	x19, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 5f8:	add	x19, x19, #0x0
 5fc:	mov	x1, x19
 600:	mov	x0, x21
 604:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 608:	cbnz	w0, 678 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x228>
 60c:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 610:	ldr	x0, [x0]
 614:	ldr	w0, [x0]
 618:	sxtw	x0, w0
 61c:	cmp	x0, #0x1
 620:	b.hi	658 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x208>  // b.pmore
 624:	ldr	x20, [x22]
 628:	mov	x1, #0x4018                	// #16408
 62c:	mov	x0, x20
 630:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 634:	mov	x2, x20
 638:	mov	x1, x23
 63c:	mov	x19, x0
 640:	bl	0 <_ZN11__sanitizer14LLVMSymbolizerC1EPKcPNS_17LowLevelAllocatorE>
 644:	cbz	x19, 7e4 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x394>
 648:	mov	x2, #0x1                   	// #1
 64c:	ldp	x23, x24, [sp, #32]
 650:	str	xzr, [x19, #8]
 654:	b	490 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x40>
 658:	mov	x1, x23
 65c:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 660:	add	x0, x0, #0x0
 664:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 668:	b	624 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x1d4>
 66c:	adrp	x21, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 670:	add	x21, x21, #0x0
 674:	b	5f4 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x1a4>
 678:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 67c:	mov	x0, x21
 680:	add	x1, x1, #0x0
 684:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 688:	cbz	w0, 9f8 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x5a8>
 68c:	adrp	x24, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 690:	add	x24, x24, #0x0
 694:	mov	x0, x21
 698:	mov	x1, x24
 69c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 6a0:	cbnz	w0, 81c <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x3cc>
 6a4:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 6a8:	ldr	x0, [x0]
 6ac:	ldr	w0, [x0]
 6b0:	str	x25, [sp, #48]
 6b4:	sxtw	x0, w0
 6b8:	cmp	x0, #0x1
 6bc:	b.ls	6d0 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x280>  // b.plast
 6c0:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 6c4:	mov	x1, x23
 6c8:	add	x0, x0, #0x0
 6cc:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 6d0:	ldr	x21, [x22]
 6d4:	adrp	x24, 0 <_ZN11__sanitizer14PageSizeCachedE>
 6d8:	mov	x1, #0x38                  	// #56
 6dc:	mov	x0, x21
 6e0:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 6e4:	ldr	x25, [x24]
 6e8:	mov	x19, x0
 6ec:	add	x20, x0, #0x20
 6f0:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 6f4:	add	x1, x1, #0x0
 6f8:	stp	x23, x21, [x19, #16]
 6fc:	ldr	x0, [x25]
 700:	stp	x1, xzr, [x19]
 704:	stp	xzr, xzr, [x20, #8]
 708:	str	xzr, [x19, #32]
 70c:	cbz	x0, 984 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x534>
 710:	sub	x1, x0, #0x1
 714:	tst	x1, x0
 718:	b.ne	990 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x540>  // b.any
 71c:	add	x21, x0, #0x7
 720:	neg	x0, x0
 724:	and	x21, x21, x0
 728:	mov	w2, #0x0                   	// #0
 72c:	mov	x0, x21
 730:	adrp	x25, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 734:	add	x1, x25, #0x0
 738:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 73c:	ldr	x2, [x20, #16]
 740:	mov	x23, x0
 744:	ldr	x1, [x19, #32]
 748:	lsl	x2, x2, #3
 74c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 750:	ldr	x1, [x20, #8]
 754:	ldr	x0, [x19, #32]
 758:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 75c:	str	x23, [x19, #32]
 760:	str	x21, [x20, #8]
 764:	cmp	x21, #0x7f
 768:	b.ls	774 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x324>  // b.plast
 76c:	ldr	x25, [sp, #48]
 770:	b	648 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x1f8>
 774:	ldr	x3, [x20, #16]
 778:	cmp	x3, #0x10
 77c:	b.hi	9b8 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x568>  // b.pmore
 780:	ldr	x24, [x24]
 784:	ldr	x0, [x24]
 788:	cbz	x0, 9a0 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x550>
 78c:	sub	x1, x0, #0x1
 790:	tst	x1, x0
 794:	b.ne	990 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x540>  // b.any
 798:	add	x21, x0, #0x7f
 79c:	neg	x0, x0
 7a0:	and	x21, x21, x0
 7a4:	add	x1, x25, #0x0
 7a8:	mov	w2, #0x0                   	// #0
 7ac:	mov	x0, x21
 7b0:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 7b4:	mov	x23, x0
 7b8:	ldr	x2, [x20, #16]
 7bc:	ldr	x1, [x19, #32]
 7c0:	lsl	x2, x2, #3
 7c4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 7c8:	ldr	x1, [x20, #8]
 7cc:	ldr	x0, [x19, #32]
 7d0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 7d4:	ldr	x25, [sp, #48]
 7d8:	str	x23, [x19, #32]
 7dc:	str	x21, [x20, #8]
 7e0:	b	648 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x1f8>
 7e4:	ldp	x23, x24, [sp, #32]
 7e8:	b	488 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x38>
 7ec:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 7f0:	ldr	x0, [x0]
 7f4:	ldr	w0, [x0]
 7f8:	sxtw	x0, w0
 7fc:	cmp	x0, #0x1
 800:	b.ls	7e4 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x394>  // b.plast
 804:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 808:	add	x0, x0, #0x0
 80c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 810:	mov	x2, #0x0                   	// #0
 814:	ldp	x23, x24, [sp, #32]
 818:	b	490 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x40>
 81c:	cbnz	x23, 9e0 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x590>
 820:	mov	x0, x19
 824:	bl	0 <_ZN11__sanitizer16FindPathToBinaryEPKc>
 828:	mov	x21, x0
 82c:	cbz	x0, 87c <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x42c>
 830:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 834:	ldr	x0, [x0]
 838:	ldr	w0, [x0]
 83c:	sxtw	x0, w0
 840:	cmp	x0, #0x1
 844:	b.ls	858 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x408>  // b.plast
 848:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 84c:	mov	x1, x21
 850:	add	x0, x0, #0x0
 854:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 858:	ldr	x20, [x22]
 85c:	mov	x1, #0x4018                	// #16408
 860:	mov	x0, x20
 864:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 868:	mov	x2, x20
 86c:	mov	x1, x21
 870:	mov	x19, x0
 874:	bl	0 <_ZN11__sanitizer14LLVMSymbolizerC1EPKcPNS_17LowLevelAllocatorE>
 878:	b	644 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x1f4>
 87c:	ldr	x20, [x20]
 880:	ldrb	w0, [x20, #16]
 884:	cbz	w0, 7e4 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x394>
 888:	mov	x0, x24
 88c:	bl	0 <_ZN11__sanitizer16FindPathToBinaryEPKc>
 890:	mov	x21, x0
 894:	cbz	x0, 7e4 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x394>
 898:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 89c:	ldr	x0, [x0]
 8a0:	ldr	w0, [x0]
 8a4:	str	x25, [sp, #48]
 8a8:	sxtw	x0, w0
 8ac:	cmp	x0, #0x1
 8b0:	b.ls	8c4 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x474>  // b.plast
 8b4:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 8b8:	mov	x1, x21
 8bc:	add	x0, x0, #0x0
 8c0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 8c4:	ldr	x23, [x22]
 8c8:	adrp	x24, 0 <_ZN11__sanitizer14PageSizeCachedE>
 8cc:	mov	x1, #0x38                  	// #56
 8d0:	mov	x0, x23
 8d4:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 8d8:	ldr	x25, [x24]
 8dc:	mov	x19, x0
 8e0:	add	x20, x0, #0x20
 8e4:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 8e8:	add	x1, x1, #0x0
 8ec:	stp	x21, x23, [x19, #16]
 8f0:	ldr	x0, [x25]
 8f4:	stp	x1, xzr, [x19]
 8f8:	stp	xzr, xzr, [x20, #8]
 8fc:	str	xzr, [x19, #32]
 900:	cbz	x0, 9ac <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x55c>
 904:	sub	x1, x0, #0x1
 908:	tst	x1, x0
 90c:	b.ne	990 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x540>  // b.any
 910:	add	x21, x0, #0x7
 914:	neg	x0, x0
 918:	and	x21, x21, x0
 91c:	mov	w2, #0x0                   	// #0
 920:	mov	x0, x21
 924:	adrp	x25, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 928:	add	x1, x25, #0x0
 92c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 930:	ldr	x2, [x20, #16]
 934:	mov	x23, x0
 938:	ldr	x1, [x19, #32]
 93c:	lsl	x2, x2, #3
 940:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 944:	ldr	x1, [x20, #8]
 948:	ldr	x0, [x19, #32]
 94c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 950:	str	x23, [x19, #32]
 954:	str	x21, [x20, #8]
 958:	cmp	x21, #0x7f
 95c:	b.hi	76c <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x31c>  // b.pmore
 960:	ldr	x3, [x20, #16]
 964:	cmp	x3, #0x10
 968:	b.hi	9b8 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x568>  // b.pmore
 96c:	ldr	x21, [x24]
 970:	ldr	x0, [x21]
 974:	cbz	x0, 9d4 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x584>
 978:	ldr	x24, [x24]
 97c:	ldr	x0, [x24]
 980:	b	78c <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x33c>
 984:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 988:	str	x0, [x25]
 98c:	b	710 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x2c0>
 990:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 994:	add	x0, x0, #0x0
 998:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 99c:	bl	0 <_ZN11__sanitizer3DieEv>
 9a0:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 9a4:	str	x0, [x24]
 9a8:	b	78c <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x33c>
 9ac:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 9b0:	str	x0, [x25]
 9b4:	b	904 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x4b4>
 9b8:	adrp	x2, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 9bc:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 9c0:	add	x2, x2, #0x0
 9c4:	add	x0, x0, #0x0
 9c8:	mov	x4, #0x10                  	// #16
 9cc:	mov	w1, #0x1fd                 	// #509
 9d0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 9d4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 9d8:	str	x0, [x21]
 9dc:	b	978 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x528>
 9e0:	mov	x1, x23
 9e4:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 9e8:	add	x0, x0, #0x0
 9ec:	str	x25, [sp, #48]
 9f0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 9f4:	bl	0 <_ZN11__sanitizer3DieEv>
 9f8:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 9fc:	add	x0, x0, #0x0
 a00:	str	x25, [sp, #48]
 a04:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 a08:	bl	0 <_ZN11__sanitizer3DieEv>
 a0c:	nop

0000000000000a10 <_ZN11__sanitizer10Symbolizer14LateInitializeEv>:
 a10:	str	x30, [sp, #-16]!
 a14:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
 a18:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 a1c:	mov	x0, #0x0                   	// #0
 a20:	add	x1, x1, #0x0
 a24:	bl	0 <dlsym>
 a28:	ldr	x30, [sp], #16
 a2c:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 a30:	str	x0, [x1]
 a34:	b	0 <dlerror>

Disassembly of section .text._ZN11__sanitizer14SymbolizerTool5FlushEv:

0000000000000000 <_ZN11__sanitizer14SymbolizerTool5FlushEv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer14SymbolizerTool8DemangleEPKc:

0000000000000000 <_ZN11__sanitizer14SymbolizerTool8DemangleEPKc>:
   0:	mov	x0, #0x0                   	// #0
   4:	ret

Disassembly of section .text._ZNK11__sanitizer16Addr2LineProcess7GetArgVEPKcRA6_S2_:

0000000000000000 <_ZNK11__sanitizer16Addr2LineProcess7GetArgVEPKcRA6_S2_>:
   0:	adrp	x3, 0 <_ZNK11__sanitizer16Addr2LineProcess7GetArgVEPKcRA6_S2_>
   4:	add	x3, x3, #0x0
   8:	stp	x1, x3, [x2]
   c:	ldr	x0, [x0, #16424]
  10:	stp	x0, xzr, [x2, #16]
  14:	ret

Disassembly of section .text._ZN11__sanitizer13Addr2LinePool13SymbolizeDataEmPNS_8DataInfoE:

0000000000000000 <_ZN11__sanitizer13Addr2LinePool13SymbolizeDataEmPNS_8DataInfoE>:
   0:	mov	w0, #0x0                   	// #0
   4:	ret

Disassembly of section .text._ZN11__sanitizer18InternalSymbolizer5FlushEv:

0000000000000000 <_ZN11__sanitizer18InternalSymbolizer5FlushEv>:
   0:	adrp	x0, 0 <__sanitizer_symbolize_flush>
   4:	ldr	x0, [x0]
   8:	cbz	x0, 10 <_ZN11__sanitizer18InternalSymbolizer5FlushEv+0x10>
   c:	b	0 <__sanitizer_symbolize_flush>
  10:	ret

Disassembly of section .text._ZN11__sanitizer18InternalSymbolizer13SymbolizeDataEmPNS_8DataInfoE:

0000000000000000 <_ZN11__sanitizer18InternalSymbolizer13SymbolizeDataEmPNS_8DataInfoE>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	mov	x19, x2
   8:	mov	w3, #0x4000                	// #16384
   c:	stp	x21, x22, [sp, #16]
  10:	add	x22, x0, #0x10
  14:	mov	x21, x1
  18:	ldp	x0, x1, [x19]
  1c:	mov	x2, x22
  20:	str	x30, [sp, #32]
  24:	bl	0 <__sanitizer_symbolize_data>
  28:	mov	w20, w0
  2c:	tst	w0, #0xff
  30:	b.ne	48 <_ZN11__sanitizer18InternalSymbolizer13SymbolizeDataEmPNS_8DataInfoE+0x48>  // b.any
  34:	mov	w0, w20
  38:	ldp	x21, x22, [sp, #16]
  3c:	ldr	x30, [sp, #32]
  40:	ldp	x19, x20, [sp], #48
  44:	ret
  48:	mov	x0, x22
  4c:	mov	x1, x19
  50:	bl	0 <_ZN11__sanitizer24ParseSymbolizeDataOutputEPKcPNS_8DataInfoE>
  54:	ldr	x1, [x19, #48]
  58:	ldr	x0, [x19, #8]
  5c:	add	x1, x21, x1
  60:	ldp	x21, x22, [sp, #16]
  64:	sub	x1, x1, x0
  68:	str	x1, [x19, #48]
  6c:	mov	w0, w20
  70:	ldr	x30, [sp, #32]
  74:	ldp	x19, x20, [sp], #48
  78:	ret

Disassembly of section .text._ZN11__sanitizer18InternalSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE:

0000000000000000 <_ZN11__sanitizer18InternalSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x2
   8:	mov	w3, #0x4000                	// #16384
   c:	stp	x21, x30, [sp, #16]
  10:	add	x21, x0, #0x10
  14:	mov	x2, x21
  18:	ldp	x0, x1, [x19, #16]
  1c:	bl	0 <__sanitizer_symbolize_code>
  20:	mov	w20, w0
  24:	tst	w0, #0xff
  28:	b.ne	3c <_ZN11__sanitizer18InternalSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x3c>  // b.any
  2c:	mov	w0, w20
  30:	ldp	x21, x30, [sp, #16]
  34:	ldp	x19, x20, [sp], #32
  38:	ret
  3c:	mov	x1, x19
  40:	mov	x0, x21
  44:	bl	0 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE>
  48:	mov	w0, w20
  4c:	ldp	x21, x30, [sp, #16]
  50:	ldp	x19, x20, [sp], #32
  54:	ret

Disassembly of section .text._ZN11__sanitizer18InternalSymbolizer8DemangleEPKc:

0000000000000000 <_ZN11__sanitizer18InternalSymbolizer8DemangleEPKc>:
   0:	adrp	x0, 0 <__sanitizer_symbolize_demangle>
   4:	stp	x19, x20, [sp, #-32]!
   8:	mov	x20, x1
   c:	ldr	x0, [x0]
  10:	str	x30, [sp, #24]
  14:	cbz	x0, 80 <_ZN11__sanitizer18InternalSymbolizer8DemangleEPKc+0x80>
  18:	str	x21, [sp, #16]
  1c:	mov	x21, #0x400                 	// #1024
  20:	mov	x2, #0x0                   	// #0
  24:	mov	x1, #0x0                   	// #0
  28:	mov	x0, x21
  2c:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
  30:	mov	x19, x0
  34:	mov	w2, w21
  38:	mov	x0, x20
  3c:	mov	x1, x19
  40:	bl	0 <__sanitizer_symbolize_demangle>
  44:	cmp	x21, w0, sxtw
  48:	sxtw	x0, w0
  4c:	b.cc	64 <_ZN11__sanitizer18InternalSymbolizer8DemangleEPKc+0x64>  // b.lo, b.ul, b.last
  50:	mov	x0, x19
  54:	ldr	x21, [sp, #16]
  58:	ldr	x30, [sp, #24]
  5c:	ldp	x19, x20, [sp], #32
  60:	ret
  64:	add	x21, x0, #0x1
  68:	mov	x1, #0x0                   	// #0
  6c:	mov	x0, x19
  70:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
  74:	cmp	x21, #0x20, lsl #12
  78:	b.ls	20 <_ZN11__sanitizer18InternalSymbolizer8DemangleEPKc+0x20>  // b.plast
  7c:	ldr	x21, [sp, #16]
  80:	mov	x19, x20
  84:	mov	x0, x19
  88:	ldr	x30, [sp, #24]
  8c:	ldp	x19, x20, [sp], #32
  90:	ret

Disassembly of section .text._ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE:

0000000000000000 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>:
   0:	stp	x19, x20, [sp, #-144]!
   4:	mov	x19, x0
   8:	mov	x20, #0x0                   	// #0
   c:	ldr	x0, [x0, #48]
  10:	stp	x21, x22, [sp, #16]
  14:	mov	x22, x2
  18:	stp	x23, x24, [sp, #32]
  1c:	stp	x25, x30, [sp, #48]
  20:	str	xzr, [sp, #72]
  24:	ldp	x21, x23, [x2, #16]
  28:	cbnz	x0, 40 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x40>
  2c:	b	ec <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0xec>
  30:	ldr	x0, [x19, #48]
  34:	add	x20, x20, #0x1
  38:	cmp	x0, x20
  3c:	b.ls	e4 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0xe4>  // b.plast
  40:	ldr	x1, [x19, #32]
  44:	mov	x0, x21
  48:	lsl	x24, x20, #3
  4c:	ldr	x1, [x1, x20, lsl #3]
  50:	ldr	x1, [x1, #16424]
  54:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  58:	cbnz	w0, 30 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x30>
  5c:	ldr	x4, [x19, #48]
  60:	ldr	x0, [x19, #32]
  64:	cmp	x4, x20
  68:	b.ls	180 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x180>  // b.plast
  6c:	ldr	x1, [x0, x24]
  70:	str	x1, [sp, #72]
  74:	cbz	x1, ec <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0xec>
  78:	ldr	x1, [x1, #16424]
  7c:	mov	x0, x21
  80:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  84:	sxtw	x4, w0
  88:	cbnz	w0, 164 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x164>
  8c:	add	x19, sp, #0x50
  90:	mov	x3, x23
  94:	mov	x4, #0xffffffffffffffff    	// #-1
  98:	mov	x1, #0x40                  	// #64
  9c:	mov	x0, x19
  a0:	adrp	x2, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
  a4:	add	x2, x2, #0x0
  a8:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
  ac:	ldr	x0, [sp, #72]
  b0:	mov	x1, x19
  b4:	bl	0 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc>
  b8:	mov	w1, #0x0                   	// #0
  bc:	cbz	x0, cc <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0xcc>
  c0:	mov	x1, x22
  c4:	bl	0 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE>
  c8:	mov	w1, #0x1                   	// #1
  cc:	mov	w0, w1
  d0:	ldp	x21, x22, [sp, #16]
  d4:	ldp	x23, x24, [sp, #32]
  d8:	ldp	x25, x30, [sp, #48]
  dc:	ldp	x19, x20, [sp], #144
  e0:	ret
  e4:	ldr	x1, [sp, #72]
  e8:	cbnz	x1, 78 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x78>
  ec:	ldr	x0, [x19, #24]
  f0:	mov	x1, #0x4030                	// #16432
  f4:	add	x24, x19, #0x20
  f8:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
  fc:	mov	x20, x0
 100:	ldr	x1, [x19, #16]
 104:	mov	w2, #0x0                   	// #0
 108:	bl	0 <_ZN11__sanitizer17SymbolizerProcessC2EPKcb>
 10c:	adrp	x0, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 110:	add	x0, x0, #0x0
 114:	str	x0, [x20]
 118:	mov	x0, x21
 11c:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 120:	str	x20, [sp, #72]
 124:	ldr	x4, [x19, #40]
 128:	ldr	x3, [x24, #16]
 12c:	str	x0, [x20, #16424]
 130:	lsr	x4, x4, #3
 134:	cmp	x3, x4
 138:	b.hi	250 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x250>  // b.pmore
 13c:	add	x20, x3, #0x1
 140:	b.eq	19c <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x19c>  // b.none
 144:	ldr	x25, [x19, #32]
 148:	str	x20, [x24, #16]
 14c:	add	x1, sp, #0x48
 150:	add	x0, x25, x3, lsl #3
 154:	mov	x2, #0x8                   	// #8
 158:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 15c:	ldr	x1, [sp, #72]
 160:	b	78 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x78>
 164:	adrp	x2, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 168:	adrp	x0, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 16c:	add	x2, x2, #0x0
 170:	add	x0, x0, #0x0
 174:	mov	x3, #0x0                   	// #0
 178:	mov	w1, #0x15c                 	// #348
 17c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 180:	adrp	x2, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 184:	adrp	x0, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 188:	mov	x3, x20
 18c:	add	x2, x2, #0x0
 190:	add	x0, x0, #0x0
 194:	mov	w1, #0x1b6                 	// #438
 198:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 19c:	tst	x3, x20
 1a0:	b.eq	1dc <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x1dc>  // b.none
 1a4:	clz	x2, x20
 1a8:	mov	w0, #0x3f                  	// #63
 1ac:	sub	w0, w0, w2
 1b0:	mov	x2, #0x1                   	// #1
 1b4:	add	w4, w0, #0x1
 1b8:	lsl	x4, x2, x4
 1bc:	cmp	x4, x20
 1c0:	b.ls	29c <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x29c>  // b.plast
 1c4:	lsl	x0, x2, x0
 1c8:	cmp	x0, x20
 1cc:	b.cs	2b8 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x2b8>  // b.hs, b.nlast
 1d0:	cmp	x3, x4
 1d4:	b.hi	274 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x274>  // b.pmore
 1d8:	mov	x20, x4
 1dc:	adrp	x25, 0 <_ZN11__sanitizer14PageSizeCachedE>
 1e0:	lsl	x20, x20, #3
 1e4:	ldr	x25, [x25]
 1e8:	ldr	x0, [x25]
 1ec:	cbz	x0, 268 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x268>
 1f0:	sub	x1, x0, #0x1
 1f4:	tst	x0, x1
 1f8:	b.ne	28c <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x28c>  // b.any
 1fc:	add	x20, x20, x1
 200:	neg	x0, x0
 204:	and	x20, x20, x0
 208:	mov	w2, #0x0                   	// #0
 20c:	mov	x0, x20
 210:	adrp	x1, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 214:	add	x1, x1, #0x0
 218:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 21c:	ldr	x2, [x24, #16]
 220:	mov	x25, x0
 224:	ldr	x1, [x19, #32]
 228:	lsl	x2, x2, #3
 22c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 230:	ldr	x1, [x24, #8]
 234:	ldr	x0, [x19, #32]
 238:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 23c:	ldr	x3, [x24, #16]
 240:	str	x25, [x19, #32]
 244:	str	x20, [x24, #8]
 248:	add	x20, x3, #0x1
 24c:	b	148 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x148>
 250:	adrp	x2, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 254:	adrp	x0, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 258:	add	x2, x2, #0x0
 25c:	add	x0, x0, #0x0
 260:	mov	w1, #0x1be                 	// #446
 264:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 268:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 26c:	str	x0, [x25]
 270:	b	1f0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x1f0>
 274:	adrp	x2, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 278:	adrp	x0, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 27c:	add	x2, x2, #0x0
 280:	add	x0, x0, #0x0
 284:	mov	w1, #0x1fd                 	// #509
 288:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 28c:	adrp	x0, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 290:	add	x0, x0, #0x0
 294:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 298:	bl	0 <_ZN11__sanitizer3DieEv>
 29c:	adrp	x2, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 2a0:	adrp	x0, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 2a4:	mov	x3, x20
 2a8:	add	x2, x2, #0x0
 2ac:	add	x0, x0, #0x0
 2b0:	mov	w1, #0x17b                 	// #379
 2b4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2b8:	mov	x4, x0
 2bc:	adrp	x2, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 2c0:	adrp	x0, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 2c4:	mov	x3, x20
 2c8:	add	x2, x2, #0x0
 2cc:	add	x0, x0, #0x0
 2d0:	mov	w1, #0x17c                 	// #380
 2d4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

Disassembly of section .text._ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm:

0000000000000000 <_ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x20, x1
   8:	str	x30, [sp, #16]
   c:	bl	0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
  10:	mov	w19, w0
  14:	tst	w0, #0xff
  18:	b.eq	24 <_ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm+0x24>  // b.none
  1c:	ldrb	w0, [x20]
  20:	cbnz	w0, 34 <_ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm+0x34>
  24:	mov	w0, w19
  28:	ldr	x30, [sp, #16]
  2c:	ldp	x19, x20, [sp], #32
  30:	ret
  34:	adrp	x1, 0 <_ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm>
  38:	add	x0, x20, #0x1
  3c:	add	x1, x1, #0x0
  40:	bl	0 <_ZN11__sanitizer15internal_strstrEPKcS1_>
  44:	cbz	x0, 5c <_ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm+0x5c>
  48:	strb	wzr, [x0]
  4c:	mov	w0, w19
  50:	ldr	x30, [sp, #16]
  54:	ldp	x19, x20, [sp], #32
  58:	ret
  5c:	adrp	x2, 0 <_ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm>
  60:	adrp	x0, 0 <_ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm>
  64:	add	x2, x2, #0x0
  68:	add	x0, x0, #0x0
  6c:	mov	x4, #0x0                   	// #0
  70:	mov	x3, #0x0                   	// #0
  74:	mov	w1, #0x11e                 	// #286
  78:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

sanitizer_symbolizer_report.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>:
   0:	stp	x19, x20, [sp, #-96]!
   4:	stp	x23, x24, [sp, #32]
   8:	adrp	x24, 0 <_ZN11__sanitizer14PageSizeCachedE>
   c:	mov	x23, x0
  10:	ldr	x19, [x24]
  14:	stp	x21, x22, [sp, #16]
  18:	mov	x22, x1
  1c:	stp	x25, x30, [sp, #48]
  20:	mov	x21, x2
  24:	ldr	x3, [x19]
  28:	stp	xzr, xzr, [sp, #64]
  2c:	str	xzr, [sp, #80]
  30:	cbz	x3, 124 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0+0x124>
  34:	sub	x0, x3, #0x1
  38:	tst	x0, x3
  3c:	b.ne	18c <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0+0x18c>  // b.any
  40:	add	x20, x3, #0x3ff
  44:	neg	x3, x3
  48:	and	x20, x20, x3
  4c:	mov	w2, #0x0                   	// #0
  50:	mov	x0, x20
  54:	adrp	x25, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
  58:	add	x1, x25, #0x0
  5c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  60:	ldr	x1, [sp, #64]
  64:	mov	x19, x0
  68:	ldr	x2, [sp, #80]
  6c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  70:	ldp	x0, x1, [sp, #64]
  74:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  78:	stp	x19, x20, [sp, #64]
  7c:	ldr	x2, [sp, #80]
  80:	cmp	x2, #0x3ff
  84:	b.hi	a8 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0+0xa8>  // b.pmore
  88:	cmp	x20, #0x3ff
  8c:	b.ls	134 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0+0x134>  // b.plast
  90:	mov	x3, #0x400                 	// #1024
  94:	add	x0, x19, x2
  98:	mov	w1, #0x0                   	// #0
  9c:	sub	x2, x3, x2
  a0:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  a4:	ldr	x19, [sp, #64]
  a8:	mov	x0, #0x400                 	// #1024
  ac:	stp	x0, xzr, [sp, #80]
  b0:	add	x0, sp, #0x40
  b4:	mov	x2, x23
  b8:	strb	wzr, [x19]
  bc:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
  c0:	mov	x19, x0
  c4:	add	x1, x1, #0x0
  c8:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
  cc:	adrp	x4, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  d0:	mov	x3, x22
  d4:	mov	w2, #0x0                   	// #0
  d8:	mov	x0, x19
  dc:	ldr	x4, [x4]
  e0:	adrp	x6, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
  e4:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
  e8:	add	x6, x6, #0x0
  ec:	add	x1, x1, #0x0
  f0:	ldr	x5, [x4, #24]
  f4:	ldrb	w4, [x4, #181]
  f8:	bl	0 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_>
  fc:	ldr	x0, [sp, #64]
 100:	mov	x1, x21
 104:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_>
 108:	ldp	x0, x1, [sp, #64]
 10c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 110:	ldp	x21, x22, [sp, #16]
 114:	ldp	x23, x24, [sp, #32]
 118:	ldp	x25, x30, [sp, #48]
 11c:	ldp	x19, x20, [sp], #96
 120:	ret
 124:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 128:	mov	x3, x0
 12c:	str	x0, [x19]
 130:	b	34 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0+0x34>
 134:	ldr	x24, [x24]
 138:	ldr	x0, [x24]
 13c:	cbz	x0, 19c <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0+0x19c>
 140:	sub	x1, x0, #0x1
 144:	tst	x1, x0
 148:	b.ne	18c <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0+0x18c>  // b.any
 14c:	add	x20, x0, #0x3ff
 150:	neg	x0, x0
 154:	and	x20, x20, x0
 158:	add	x1, x25, #0x0
 15c:	mov	w2, #0x0                   	// #0
 160:	mov	x0, x20
 164:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 168:	mov	x19, x0
 16c:	ldr	x1, [sp, #64]
 170:	ldr	x2, [sp, #80]
 174:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 178:	ldp	x0, x1, [sp, #64]
 17c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 180:	stp	x19, x20, [sp, #64]
 184:	ldr	x2, [sp, #80]
 188:	b	90 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0+0x90>
 18c:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 190:	add	x0, x0, #0x0
 194:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 198:	bl	0 <_ZN11__sanitizer3DieEv>
 19c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 1a0:	str	x0, [x24]
 1a4:	b	140 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0+0x140>

00000000000001a8 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>:
 1a8:	adrp	x3, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 1ac:	ldr	x3, [x3]
 1b0:	ldrb	w3, [x3, #60]
 1b4:	cbnz	w3, 1bc <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_+0x14>
 1b8:	ret
 1bc:	b	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>

00000000000001c0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>:
 1c0:	stp	x19, x20, [sp, #-32]!
 1c4:	mov	x19, x0
 1c8:	mov	w1, #0x1                   	// #1
 1cc:	ldr	x20, [x0]
 1d0:	str	x30, [sp, #16]
 1d4:	ldxrb	w0, [x20]
 1d8:	stxrb	w2, w1, [x20]
 1dc:	cbnz	w2, 1d4 <_ZN11__sanitizer10ReportFile14SupportsColorsEv+0x14>
 1e0:	dmb	ish
 1e4:	tst	w0, #0xff
 1e8:	b.eq	1f4 <_ZN11__sanitizer10ReportFile14SupportsColorsEv+0x34>  // b.none
 1ec:	mov	x0, x20
 1f0:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 1f4:	mov	x0, x19
 1f8:	bl	0 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv>
 1fc:	ldr	w0, [x19, #8]
 200:	bl	0 <_ZN11__sanitizer21SupportsColoredOutputEi>
 204:	dmb	ish
 208:	strb	wzr, [x20]
 20c:	ldr	x30, [sp, #16]
 210:	ldp	x19, x20, [sp], #32
 214:	ret

0000000000000218 <_ZN11__sanitizer15ColorizeReportsEv>:
 218:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 21c:	stp	x19, x30, [sp, #-16]!
 220:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 224:	ldr	x0, [x0]
 228:	add	x1, x1, #0x0
 22c:	ldr	x19, [x0, #112]
 230:	mov	x0, x19
 234:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 238:	mov	w1, #0x1                   	// #1
 23c:	cbnz	w0, 24c <_ZN11__sanitizer15ColorizeReportsEv+0x34>
 240:	mov	w0, w1
 244:	ldp	x19, x30, [sp], #16
 248:	ret
 24c:	mov	x0, x19
 250:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 254:	add	x1, x1, #0x0
 258:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 25c:	mov	w1, #0x0                   	// #0
 260:	cbnz	w0, 240 <_ZN11__sanitizer15ColorizeReportsEv+0x28>
 264:	ldp	x19, x30, [sp], #16
 268:	adrp	x0, 0 <_ZN11__sanitizer11report_fileE>
 26c:	ldr	x0, [x0]
 270:	b	1c0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 274:	nop

0000000000000278 <_ZN11__sanitizer18ReportErrorSummaryEPKcPKNS_10StackTraceES1_>:
 278:	stp	x19, x20, [sp, #-48]!
 27c:	adrp	x19, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 280:	ldr	x19, [x19]
 284:	stp	x21, x22, [sp, #16]
 288:	mov	x21, x2
 28c:	ldrb	w2, [x19, #60]
 290:	str	x30, [sp, #32]
 294:	cbz	w2, 300 <_ZN11__sanitizer18ReportErrorSummaryEPKcPKNS_10StackTraceES1_+0x88>
 298:	ldr	w2, [x1, #8]
 29c:	cbz	w2, 2ec <_ZN11__sanitizer18ReportErrorSummaryEPKcPKNS_10StackTraceES1_+0x74>
 2a0:	mov	x20, x0
 2a4:	ldr	x0, [x1]
 2a8:	ldr	x22, [x0]
 2ac:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
 2b0:	sub	x22, x22, #0x4
 2b4:	mov	x1, x22
 2b8:	bl	0 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm>
 2bc:	ldrb	w1, [x19, #60]
 2c0:	mov	x19, x0
 2c4:	cbz	w1, 2d8 <_ZN11__sanitizer18ReportErrorSummaryEPKcPKNS_10StackTraceES1_+0x60>
 2c8:	mov	x2, x21
 2cc:	mov	x0, x20
 2d0:	add	x1, x19, #0x8
 2d4:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 2d8:	mov	x0, x19
 2dc:	ldp	x21, x22, [sp, #16]
 2e0:	ldr	x30, [sp, #32]
 2e4:	ldp	x19, x20, [sp], #48
 2e8:	b	0 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>
 2ec:	ldp	x21, x22, [sp, #16]
 2f0:	mov	x1, #0x0                   	// #0
 2f4:	ldr	x30, [sp, #32]
 2f8:	ldp	x19, x20, [sp], #48
 2fc:	b	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_>
 300:	ldp	x21, x22, [sp, #16]
 304:	ldr	x30, [sp, #32]
 308:	ldp	x19, x20, [sp], #48
 30c:	ret

0000000000000310 <_ZN11__sanitizer23StartReportDeadlySignalEv>:
 310:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 314:	stp	x19, x30, [sp, #-16]!
 318:	ldr	x0, [x0]
 31c:	ldr	x19, [x0]
 320:	mov	x0, x19
 324:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 328:	mov	x1, x0
 32c:	mov	x0, x19
 330:	bl	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 334:	ldp	x19, x30, [sp], #16
 338:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 33c:	mov	x1, #0xe                   	// #14
 340:	add	x0, x0, #0x0
 344:	b	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>

0000000000000348 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_>:
 348:	stp	x19, x20, [sp, #-240]!
 34c:	mov	w20, w1
 350:	mov	x19, x0
 354:	stp	x21, x22, [sp, #16]
 358:	mov	x21, x2
 35c:	mov	x22, x3
 360:	stp	x23, x24, [sp, #32]
 364:	stp	x25, x26, [sp, #48]
 368:	stp	x27, x28, [sp, #64]
 36c:	str	x30, [sp, #80]
 370:	bl	0 <_ZNK11__sanitizer13SignalContext15IsStackOverflowEv>
 374:	tst	w0, #0xff
 378:	b.eq	4ac <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x164>  // b.none
 37c:	bl	218 <_ZN11__sanitizer15ColorizeReportsEv>
 380:	tst	w0, #0xff
 384:	b.ne	864 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x51c>  // b.any
 388:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 38c:	add	x23, x1, #0x0
 390:	mov	x1, x23
 394:	adrp	x24, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 398:	add	x0, x24, #0x0
 39c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 3a0:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 3a4:	adrp	x25, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 3a8:	ldp	x3, x4, [x19, #16]
 3ac:	add	x2, x25, #0x0
 3b0:	ldr	x0, [x0]
 3b4:	mov	w7, w20
 3b8:	ldp	x6, x5, [x19, #32]
 3bc:	add	x2, x2, #0x10
 3c0:	ldr	x1, [x0]
 3c4:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 3c8:	add	x0, x0, #0x0
 3cc:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 3d0:	mov	x1, x23
 3d4:	adrp	x23, 0 <_ZN11__sanitizer14PageSizeCachedE>
 3d8:	add	x0, x24, #0x0
 3dc:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 3e0:	ldr	x20, [x23]
 3e4:	ldr	x0, [x20]
 3e8:	cbz	x0, 8c8 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x580>
 3ec:	sub	x1, x0, #0x1
 3f0:	tst	x1, x0
 3f4:	b.ne	9ac <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x664>  // b.any
 3f8:	add	x24, x0, #0x817
 3fc:	neg	x0, x0
 400:	and	x24, x24, x0
 404:	mov	w2, #0x0                   	// #0
 408:	mov	x0, x24
 40c:	adrp	x28, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 410:	add	x1, x28, #0x0
 414:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 418:	mov	x2, #0x0                   	// #0
 41c:	mov	x1, #0x0                   	// #0
 420:	mov	x20, x0
 424:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 428:	mov	x1, #0x0                   	// #0
 42c:	mov	x0, #0x0                   	// #0
 430:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 434:	cmp	x24, #0x817
 438:	b.ls	a54 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x70c>  // b.plast
 43c:	mov	x0, x20
 440:	mov	x2, #0x818                 	// #2072
 444:	mov	w1, #0x0                   	// #0
 448:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 44c:	mov	x1, x22
 450:	mov	x2, x20
 454:	add	x0, x20, #0x10
 458:	stp	x0, xzr, [x20]
 45c:	mov	x0, x19
 460:	str	xzr, [x20, #2064]
 464:	blr	x21
 468:	mov	x0, x20
 46c:	bl	0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 470:	mov	x2, #0x0                   	// #0
 474:	add	x0, x25, #0x0
 478:	mov	x1, x20
 47c:	add	x0, x0, #0x10
 480:	bl	278 <_ZN11__sanitizer18ReportErrorSummaryEPKcPKNS_10StackTraceES1_>
 484:	mov	x1, x24
 488:	mov	x0, x20
 48c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 490:	ldp	x21, x22, [sp, #16]
 494:	ldp	x23, x24, [sp, #32]
 498:	ldp	x25, x26, [sp, #48]
 49c:	ldp	x27, x28, [sp, #64]
 4a0:	ldr	x30, [sp, #80]
 4a4:	ldp	x19, x20, [sp], #240
 4a8:	ret
 4ac:	bl	218 <_ZN11__sanitizer15ColorizeReportsEv>
 4b0:	tst	w0, #0xff
 4b4:	b.ne	7d0 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x488>  // b.any
 4b8:	adrp	x23, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 4bc:	add	x23, x23, #0x0
 4c0:	mov	x1, x23
 4c4:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 4c8:	mov	x25, x0
 4cc:	adrp	x24, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 4d0:	add	x0, x24, #0x0
 4d4:	str	x25, [sp, #112]
 4d8:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 4dc:	mov	x0, x19
 4e0:	bl	0 <_ZNK11__sanitizer13SignalContext8DescribeEv>
 4e4:	ldr	x1, [x25]
 4e8:	mov	w7, w20
 4ec:	ldp	x3, x4, [x19, #16]
 4f0:	mov	x2, x0
 4f4:	ldp	x6, x5, [x19, #32]
 4f8:	mov	x26, x0
 4fc:	ldr	x1, [x1]
 500:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 504:	add	x0, x0, #0x0
 508:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 50c:	mov	x1, x23
 510:	adrp	x23, 0 <_ZN11__sanitizer14PageSizeCachedE>
 514:	add	x0, x24, #0x0
 518:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 51c:	ldr	x20, [x23]
 520:	ldr	x25, [x19, #24]
 524:	ldr	x0, [x20]
 528:	cbz	x0, 844 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x4fc>
 52c:	cmp	x25, x0
 530:	b.cc	854 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x50c>  // b.lo, b.ul, b.last
 534:	ldrb	w0, [x19, #48]
 538:	cbz	w0, 590 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x248>
 53c:	ldr	w0, [x19, #52]
 540:	cmp	w0, #0x2
 544:	b.eq	960 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x618>  // b.none
 548:	cmp	w0, #0x1
 54c:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 550:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 554:	add	x1, x1, #0x0
 558:	add	x0, x0, #0x0
 55c:	csel	x1, x1, x0, eq  // eq = none
 560:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 564:	add	x0, x0, #0x0
 568:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 56c:	ldr	x20, [x23]
 570:	ldr	x25, [x19, #16]
 574:	ldr	x0, [x20]
 578:	cbz	x0, 9bc <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x674>
 57c:	cmp	x25, x0
 580:	b.cs	590 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x248>  // b.hs, b.nlast
 584:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 588:	add	x0, x0, #0x0
 58c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 590:	add	x28, sp, #0x80
 594:	adrp	x27, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 598:	add	x25, sp, #0xa0
 59c:	add	x27, x27, #0x0
 5a0:	mov	x0, x28
 5a4:	mov	w1, #0x1                   	// #1
 5a8:	ldr	x20, [x19, #24]
 5ac:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb>
 5b0:	stp	xzr, xzr, [sp, #184]
 5b4:	str	xzr, [sp, #232]
 5b8:	mov	x1, x25
 5bc:	mov	x0, x28
 5c0:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
 5c4:	tst	w0, #0xff
 5c8:	b.eq	608 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x2c0>  // b.none
 5cc:	ldr	x0, [sp, #160]
 5d0:	cmp	x20, x0
 5d4:	b.cc	5b8 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x270>  // b.lo, b.ul, b.last
 5d8:	ldr	x0, [sp, #168]
 5dc:	cmp	x20, x0
 5e0:	b.cs	5b8 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x270>  // b.hs, b.nlast
 5e4:	ldr	x0, [sp, #200]
 5e8:	tbnz	w0, #2, 5b8 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x270>
 5ec:	mov	x0, x27
 5f0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 5f4:	mov	x1, x25
 5f8:	mov	x0, x28
 5fc:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
 600:	tst	w0, #0xff
 604:	b.ne	5cc <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x284>  // b.any
 608:	mov	x0, x28
 60c:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>
 610:	ldr	x20, [x23]
 614:	ldr	x0, [x20]
 618:	cbz	x0, 9a0 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x658>
 61c:	sub	x1, x0, #0x1
 620:	tst	x1, x0
 624:	b.ne	9ac <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x664>  // b.any
 628:	add	x27, x0, #0x817
 62c:	neg	x0, x0
 630:	and	x27, x27, x0
 634:	mov	w2, #0x0                   	// #0
 638:	mov	x0, x27
 63c:	adrp	x28, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 640:	add	x1, x28, #0x0
 644:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 648:	mov	x2, #0x0                   	// #0
 64c:	mov	x1, #0x0                   	// #0
 650:	mov	x20, x0
 654:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 658:	mov	x1, #0x0                   	// #0
 65c:	mov	x0, #0x0                   	// #0
 660:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 664:	cmp	x27, #0x817
 668:	b.ls	9ec <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x6a4>  // b.plast
 66c:	mov	x2, #0x818                 	// #2072
 670:	mov	w1, #0x0                   	// #0
 674:	mov	x0, x20
 678:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 67c:	mov	x1, x22
 680:	mov	x2, x20
 684:	add	x0, x20, #0x10
 688:	stp	x0, xzr, [x20]
 68c:	adrp	x22, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 690:	str	xzr, [x20, #2064]
 694:	mov	x0, x19
 698:	blr	x21
 69c:	mov	x0, x20
 6a0:	bl	0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 6a4:	ldr	x0, [x22]
 6a8:	ldrb	w0, [x0, #232]
 6ac:	cbz	w0, 8f8 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x5b0>
 6b0:	ldr	x1, [x23]
 6b4:	ldr	x21, [x19, #24]
 6b8:	ldr	x0, [x1]
 6bc:	cbz	x0, 96c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x624>
 6c0:	cmp	x21, x0
 6c4:	b.cc	8f8 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x5b0>  // b.lo, b.ul, b.last
 6c8:	stp	xzr, xzr, [sp, #160]
 6cc:	str	xzr, [sp, #176]
 6d0:	sub	x1, x0, #0x1
 6d4:	tst	x1, x0
 6d8:	b.ne	9ac <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x664>  // b.any
 6dc:	add	x4, x0, #0x3ff
 6e0:	neg	x0, x0
 6e4:	and	x4, x4, x0
 6e8:	add	x1, x28, #0x0
 6ec:	mov	x0, x4
 6f0:	mov	w2, #0x0                   	// #0
 6f4:	str	x4, [sp, #120]
 6f8:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 6fc:	str	x0, [sp, #104]
 700:	ldr	x1, [sp, #160]
 704:	ldr	x2, [sp, #176]
 708:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 70c:	ldp	x0, x1, [sp, #160]
 710:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 714:	ldr	x3, [sp, #104]
 718:	ldr	x4, [sp, #120]
 71c:	stp	x3, x4, [sp, #160]
 720:	ldr	x2, [sp, #176]
 724:	cmp	x2, #0x3ff
 728:	b.ls	9c8 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x680>  // b.plast
 72c:	mov	x0, #0x400                 	// #1024
 730:	stp	x0, xzr, [sp, #176]
 734:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 738:	strb	wzr, [x3]
 73c:	add	x1, x1, #0x0
 740:	mov	x0, x25
 744:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 748:	mov	x0, x21
 74c:	mov	x1, #0x10                  	// #16
 750:	bl	0 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm>
 754:	tst	w0, #0xff
 758:	b.eq	ab0 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x768>  // b.none
 75c:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 760:	add	x0, x0, #0x0
 764:	adrp	x23, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 768:	add	x23, x23, #0x0
 76c:	str	x0, [sp, #120]
 770:	add	x0, x21, #0x10
 774:	str	x0, [sp, #104]
 778:	b	7ac <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x464>
 77c:	ldr	x3, [sp, #120]
 780:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 784:	add	x6, x0, #0x0
 788:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 78c:	mov	x2, x23
 790:	add	x1, x0, #0x0
 794:	mov	x0, x25
 798:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 79c:	add	x21, x21, #0x1
 7a0:	ldr	x0, [sp, #104]
 7a4:	cmp	x0, x21
 7a8:	b.eq	8d4 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x58c>  // b.none
 7ac:	ldrb	w28, [x21]
 7b0:	bl	218 <_ZN11__sanitizer15ColorizeReportsEv>
 7b4:	tst	w0, #0xff
 7b8:	and	w5, w28, #0xf
 7bc:	asr	w4, w28, #4
 7c0:	b.ne	77c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x434>  // b.any
 7c4:	mov	x3, x23
 7c8:	mov	x6, x23
 7cc:	b	788 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x440>
 7d0:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 7d4:	add	x1, x1, #0x0
 7d8:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 7dc:	mov	x23, x0
 7e0:	adrp	x24, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 7e4:	add	x0, x24, #0x0
 7e8:	str	x23, [sp, #112]
 7ec:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 7f0:	mov	x0, x19
 7f4:	bl	0 <_ZNK11__sanitizer13SignalContext8DescribeEv>
 7f8:	ldr	x1, [x23]
 7fc:	mov	w7, w20
 800:	ldp	x3, x4, [x19, #16]
 804:	mov	x2, x0
 808:	ldp	x6, x5, [x19, #32]
 80c:	adrp	x23, 0 <_ZN11__sanitizer14PageSizeCachedE>
 810:	ldr	x1, [x1]
 814:	mov	x26, x0
 818:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 81c:	add	x0, x0, #0x0
 820:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 824:	add	x0, x24, #0x0
 828:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 82c:	add	x1, x1, #0x0
 830:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 834:	ldr	x20, [x23]
 838:	ldr	x25, [x19, #24]
 83c:	ldr	x0, [x20]
 840:	cbnz	x0, 52c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x1e4>
 844:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 848:	str	x0, [x20]
 84c:	cmp	x25, x0
 850:	b.cs	534 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x1ec>  // b.hs, b.nlast
 854:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 858:	add	x0, x0, #0x0
 85c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 860:	b	534 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x1ec>
 864:	adrp	x24, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 868:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 86c:	add	x0, x24, #0x0
 870:	add	x1, x1, #0x0
 874:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 878:	adrp	x25, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 87c:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 880:	add	x2, x25, #0x0
 884:	ldp	x3, x4, [x19, #16]
 888:	mov	w7, w20
 88c:	ldr	x0, [x0]
 890:	add	x2, x2, #0x10
 894:	ldp	x6, x5, [x19, #32]
 898:	adrp	x23, 0 <_ZN11__sanitizer14PageSizeCachedE>
 89c:	ldr	x1, [x0]
 8a0:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 8a4:	add	x0, x0, #0x0
 8a8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 8ac:	add	x0, x24, #0x0
 8b0:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 8b4:	add	x1, x1, #0x0
 8b8:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 8bc:	ldr	x20, [x23]
 8c0:	ldr	x0, [x20]
 8c4:	cbnz	x0, 3ec <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0xa4>
 8c8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 8cc:	str	x0, [x20]
 8d0:	b	3ec <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0xa4>
 8d4:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 8d8:	mov	x0, x25
 8dc:	add	x1, x1, #0x0
 8e0:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 8e4:	ldr	x1, [sp, #160]
 8e8:	add	x0, x24, #0x0
 8ec:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 8f0:	ldp	x0, x1, [sp, #160]
 8f4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 8f8:	ldr	x22, [x22]
 8fc:	ldrb	w0, [x22, #233]
 900:	cbnz	w0, 954 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x60c>
 904:	ldr	x0, [sp, #112]
 908:	ldr	x1, [x0]
 90c:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 910:	add	x0, x0, #0x0
 914:	ldr	x1, [x1]
 918:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 91c:	mov	x2, #0x0                   	// #0
 920:	mov	x0, x26
 924:	mov	x1, x20
 928:	bl	278 <_ZN11__sanitizer18ReportErrorSummaryEPKcPKNS_10StackTraceES1_>
 92c:	mov	x1, x27
 930:	mov	x0, x20
 934:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 938:	ldp	x21, x22, [sp, #16]
 93c:	ldp	x23, x24, [sp, #32]
 940:	ldp	x25, x26, [sp, #48]
 944:	ldp	x27, x28, [sp, #64]
 948:	ldr	x30, [sp, #80]
 94c:	ldp	x19, x20, [sp], #240
 950:	ret
 954:	ldr	x0, [x19, #8]
 958:	bl	0 <_ZN11__sanitizer13SignalContext16DumpAllRegistersEPv>
 95c:	b	904 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x5bc>
 960:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 964:	add	x1, x1, #0x0
 968:	b	560 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x218>
 96c:	str	x1, [sp, #104]
 970:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 974:	ldr	x1, [sp, #104]
 978:	cmp	x21, x0
 97c:	str	x0, [x1]
 980:	b.cc	8f8 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x5b0>  // b.lo, b.ul, b.last
 984:	stp	xzr, xzr, [sp, #160]
 988:	str	xzr, [sp, #176]
 98c:	cbnz	x0, 6d0 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x388>
 990:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 994:	ldr	x1, [sp, #104]
 998:	str	x0, [x1]
 99c:	b	6d0 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x388>
 9a0:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 9a4:	str	x0, [x20]
 9a8:	b	61c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x2d4>
 9ac:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 9b0:	add	x0, x0, #0x0
 9b4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 9b8:	bl	0 <_ZN11__sanitizer3DieEv>
 9bc:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 9c0:	str	x0, [x20]
 9c4:	b	57c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x234>
 9c8:	cmp	x4, #0x3ff
 9cc:	b.ls	ae4 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x79c>  // b.plast
 9d0:	add	x0, x3, x2
 9d4:	mov	x3, #0x400                 	// #1024
 9d8:	mov	w1, #0x0                   	// #0
 9dc:	sub	x2, x3, x2
 9e0:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 9e4:	ldr	x3, [sp, #160]
 9e8:	b	72c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x3e4>
 9ec:	ldr	x1, [x23]
 9f0:	ldr	x0, [x1]
 9f4:	cbz	x0, ac4 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x77c>
 9f8:	sub	x1, x0, #0x1
 9fc:	tst	x1, x0
 a00:	b.ne	9ac <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x664>  // b.any
 a04:	add	x3, x0, #0x817
 a08:	neg	x0, x0
 a0c:	and	x3, x3, x0
 a10:	add	x1, x28, #0x0
 a14:	mov	x0, x3
 a18:	mov	w2, #0x0                   	// #0
 a1c:	str	x3, [sp, #120]
 a20:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 a24:	str	x0, [sp, #104]
 a28:	mov	x1, x20
 a2c:	mov	x2, #0x0                   	// #0
 a30:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 a34:	ldr	x4, [sp, #104]
 a38:	mov	x1, x27
 a3c:	ldr	x3, [sp, #120]
 a40:	mov	x0, x20
 a44:	mov	x20, x4
 a48:	mov	x27, x3
 a4c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 a50:	b	66c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x324>
 a54:	ldr	x23, [x23]
 a58:	ldr	x0, [x23]
 a5c:	cbz	x0, ad8 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x790>
 a60:	sub	x1, x0, #0x1
 a64:	tst	x1, x0
 a68:	b.ne	9ac <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x664>  // b.any
 a6c:	add	x23, x0, #0x817
 a70:	neg	x0, x0
 a74:	and	x23, x23, x0
 a78:	add	x1, x28, #0x0
 a7c:	mov	x0, x23
 a80:	mov	w2, #0x0                   	// #0
 a84:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 a88:	mov	x26, x0
 a8c:	mov	x2, #0x0                   	// #0
 a90:	mov	x1, x20
 a94:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 a98:	mov	x1, x24
 a9c:	mov	x0, x20
 aa0:	mov	x24, x23
 aa4:	mov	x20, x26
 aa8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 aac:	b	43c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0xf4>
 ab0:	mov	x0, x25
 ab4:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 ab8:	add	x1, x1, #0x0
 abc:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 ac0:	b	8e4 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x59c>
 ac4:	str	x1, [sp, #104]
 ac8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 acc:	ldr	x1, [sp, #104]
 ad0:	str	x0, [x1]
 ad4:	b	9f8 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x6b0>
 ad8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 adc:	str	x0, [x23]
 ae0:	b	a60 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x718>
 ae4:	ldr	x23, [x23]
 ae8:	ldr	x0, [x23]
 aec:	cbz	x0, b40 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x7f8>
 af0:	sub	x1, x0, #0x1
 af4:	tst	x1, x0
 af8:	b.ne	9ac <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x664>  // b.any
 afc:	add	x23, x0, #0x3ff
 b00:	neg	x0, x0
 b04:	and	x23, x23, x0
 b08:	add	x1, x28, #0x0
 b0c:	mov	w2, #0x0                   	// #0
 b10:	mov	x0, x23
 b14:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 b18:	str	x0, [sp, #104]
 b1c:	ldr	x1, [sp, #160]
 b20:	ldr	x2, [sp, #176]
 b24:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 b28:	ldp	x0, x1, [sp, #160]
 b2c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 b30:	ldr	x3, [sp, #104]
 b34:	stp	x3, x23, [sp, #160]
 b38:	ldr	x2, [sp, #176]
 b3c:	b	9d0 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x688>
 b40:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 b44:	str	x0, [x23]
 b48:	b	af0 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x7a8>
 b4c:	nop

0000000000000b50 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev>:
 b50:	stp	x19, x20, [sp, #-32]!
 b54:	adrp	x19, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 b58:	add	x19, x19, #0x0
 b5c:	str	x30, [sp, #16]
 b60:	bl	0 <_ZN11__sanitizer13GetThreadSelfEv>
 b64:	mov	x20, x0
 b68:	ldxr	x1, [x19]
 b6c:	cbnz	x1, b78 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev+0x28>
 b70:	stlxr	w0, x20, [x19]
 b74:	cbnz	w0, b68 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev+0x18>
 b78:	dmb	ish
 b7c:	cbz	x1, b98 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev+0x48>
 b80:	cmp	x20, x1
 b84:	b.eq	bd0 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev+0x80>  // b.none
 b88:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
 b8c:	ldxr	x1, [x19]
 b90:	cbz	x1, b70 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev+0x20>
 b94:	b	b78 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev+0x28>
 b98:	add	x0, x19, #0x8
 b9c:	mov	w2, #0x1                   	// #1
 ba0:	ldxrb	w1, [x0]
 ba4:	stxrb	w3, w2, [x0]
 ba8:	cbnz	w3, ba0 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev+0x50>
 bac:	dmb	ish
 bb0:	tst	w1, #0xff
 bb4:	b.eq	bc4 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev+0x74>  // b.none
 bb8:	ldr	x30, [sp, #16]
 bbc:	ldp	x19, x20, [sp], #32
 bc0:	b	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 bc4:	ldr	x30, [sp, #16]
 bc8:	ldp	x19, x20, [sp], #32
 bcc:	ret
 bd0:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 bd4:	ldr	x0, [x0]
 bd8:	ldr	x19, [x0]
 bdc:	mov	x0, x19
 be0:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 be4:	mov	x1, x0
 be8:	mov	x0, x19
 bec:	bl	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 bf0:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 bf4:	add	x0, x0, #0x0
 bf8:	add	x0, x0, #0x20
 bfc:	mov	x1, #0x2b                  	// #43
 c00:	bl	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 c04:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 c08:	ldr	x0, [x0]
 c0c:	ldr	w0, [x0, #216]
 c10:	bl	0 <_ZN11__sanitizer14internal__exitEi>
 c14:	nop

0000000000000c18 <_ZN11__sanitizer19ReportMmapWriteExecEi>:
 c18:	and	w0, w0, #0x6
 c1c:	cmp	w0, #0x6
 c20:	b.eq	c28 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x10>  // b.none
 c24:	ret
 c28:	stp	x29, x30, [sp, #-96]!
 c2c:	mov	x29, sp
 c30:	add	x0, x29, #0x48
 c34:	stp	x23, x24, [sp, #48]
 c38:	adrp	x23, 0 <_ZN11__sanitizer14PageSizeCachedE>
 c3c:	stp	x19, x20, [sp, #16]
 c40:	mov	x20, x30
 c44:	stp	x21, x22, [sp, #32]
 c48:	bl	b50 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev>
 c4c:	bl	218 <_ZN11__sanitizer15ColorizeReportsEv>
 c50:	ldr	x19, [x23]
 c54:	and	w22, w0, #0xff
 c58:	ldr	x0, [x19]
 c5c:	cbz	x0, de0 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x1c8>
 c60:	sub	x1, x0, #0x1
 c64:	tst	x1, x0
 c68:	b.ne	e48 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x230>  // b.any
 c6c:	add	x21, x0, #0x817
 c70:	neg	x0, x0
 c74:	and	x21, x21, x0
 c78:	mov	w2, #0x0                   	// #0
 c7c:	mov	x0, x21
 c80:	adrp	x24, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 c84:	add	x1, x24, #0x0
 c88:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 c8c:	mov	x2, #0x0                   	// #0
 c90:	mov	x1, #0x0                   	// #0
 c94:	mov	x19, x0
 c98:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 c9c:	mov	x1, #0x0                   	// #0
 ca0:	mov	x0, #0x0                   	// #0
 ca4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 ca8:	cmp	x21, #0x817
 cac:	b.ls	dec <_ZN11__sanitizer19ReportMmapWriteExecEi+0x1d4>  // b.plast
 cb0:	mov	w1, #0x0                   	// #0
 cb4:	mov	x0, x19
 cb8:	mov	x2, #0x818                 	// #2072
 cbc:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 cc0:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 cc4:	add	x1, x19, #0x10
 cc8:	str	xzr, [x19, #2064]
 ccc:	mov	x24, x29
 cd0:	ldr	x0, [x0]
 cd4:	ldrb	w23, [x0, #33]
 cd8:	stp	x1, xzr, [x19]
 cdc:	stp	xzr, xzr, [x29, #80]
 ce0:	cbnz	w23, dcc <_ZN11__sanitizer19ReportMmapWriteExecEi+0x1b4>
 ce4:	ldp	x5, x6, [x29, #80]
 ce8:	mov	w7, w23
 cec:	mov	x3, x24
 cf0:	mov	x2, x20
 cf4:	mov	x0, x19
 cf8:	mov	x4, #0x0                   	// #0
 cfc:	mov	w1, #0x100                 	// #256
 d00:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
 d04:	cbnz	w22, d94 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x17c>
 d08:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 d0c:	add	x20, x1, #0x0
 d10:	mov	x1, x20
 d14:	adrp	x22, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 d18:	add	x0, x22, #0x0
 d1c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 d20:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 d24:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 d28:	add	x0, x0, #0x0
 d2c:	ldr	x1, [x1]
 d30:	ldr	x1, [x1]
 d34:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 d38:	mov	x1, x20
 d3c:	add	x0, x22, #0x0
 d40:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 d44:	mov	x0, x19
 d48:	bl	0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 d4c:	mov	x2, #0x0                   	// #0
 d50:	mov	x1, x19
 d54:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 d58:	add	x0, x0, #0x0
 d5c:	bl	278 <_ZN11__sanitizer18ReportErrorSummaryEPKcPKNS_10StackTraceES1_>
 d60:	mov	x1, x21
 d64:	mov	x0, x19
 d68:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 d6c:	dmb	ish
 d70:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 d74:	add	x1, x0, #0x0
 d78:	strb	wzr, [x1, #8]
 d7c:	str	xzr, [x0]
 d80:	ldp	x19, x20, [sp, #16]
 d84:	ldp	x21, x22, [sp, #32]
 d88:	ldp	x23, x24, [sp, #48]
 d8c:	ldp	x29, x30, [sp], #96
 d90:	ret
 d94:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 d98:	adrp	x22, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 d9c:	add	x1, x1, #0x0
 da0:	add	x0, x22, #0x0
 da4:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 da8:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 dac:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 db0:	add	x0, x0, #0x0
 db4:	ldr	x1, [x1]
 db8:	ldr	x1, [x1]
 dbc:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 dc0:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 dc4:	add	x1, x1, #0x0
 dc8:	b	d3c <_ZN11__sanitizer19ReportMmapWriteExecEi+0x124>
 dcc:	add	x2, x29, #0x58
 dd0:	add	x1, x29, #0x50
 dd4:	mov	w0, #0x0                   	// #0
 dd8:	bl	0 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_>
 ddc:	b	ce4 <_ZN11__sanitizer19ReportMmapWriteExecEi+0xcc>
 de0:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 de4:	str	x0, [x19]
 de8:	b	c60 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x48>
 dec:	ldr	x23, [x23]
 df0:	ldr	x0, [x23]
 df4:	cbz	x0, e58 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x240>
 df8:	sub	x1, x0, #0x1
 dfc:	tst	x1, x0
 e00:	b.ne	e48 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x230>  // b.any
 e04:	add	x23, x0, #0x817
 e08:	neg	x0, x0
 e0c:	and	x23, x23, x0
 e10:	add	x1, x24, #0x0
 e14:	mov	x0, x23
 e18:	mov	w2, #0x0                   	// #0
 e1c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 e20:	mov	x24, x0
 e24:	mov	x2, #0x0                   	// #0
 e28:	mov	x1, x19
 e2c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 e30:	mov	x1, x21
 e34:	mov	x0, x19
 e38:	mov	x21, x23
 e3c:	mov	x19, x24
 e40:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 e44:	b	cb0 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x98>
 e48:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 e4c:	add	x0, x0, #0x0
 e50:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 e54:	bl	0 <_ZN11__sanitizer3DieEv>
 e58:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 e5c:	str	x0, [x23]
 e60:	b	df8 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x1e0>
 e64:	nop

0000000000000e68 <_ZN11__sanitizer18HandleDeadlySignalEPvS0_jPFvRKNS_13SignalContextEPKvPNS_18BufferedStackTraceEES5_>:
 e68:	stp	x19, x20, [sp, #-128]!
 e6c:	mov	w20, w2
 e70:	stp	x21, x22, [sp, #16]
 e74:	mov	x22, x4
 e78:	mov	x21, x3
 e7c:	stp	x23, x24, [sp, #32]
 e80:	mov	x23, x1
 e84:	mov	x24, x0
 e88:	str	x30, [sp, #48]
 e8c:	bl	310 <_ZN11__sanitizer23StartReportDeadlySignalEv>
 e90:	add	x19, sp, #0x48
 e94:	add	x0, sp, #0x40
 e98:	bl	b50 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev>
 e9c:	stp	x24, x23, [sp, #72]
 ea0:	mov	x0, x19
 ea4:	bl	0 <_ZNK11__sanitizer13SignalContext10GetAddressEv>
 ea8:	mov	x1, x0
 eac:	mov	x0, x19
 eb0:	str	x1, [sp, #88]
 eb4:	bl	0 <_ZNK11__sanitizer13SignalContext14IsMemoryAccessEv>
 eb8:	mov	w1, w0
 ebc:	mov	x0, x19
 ec0:	strb	w1, [sp, #120]
 ec4:	bl	0 <_ZNK11__sanitizer13SignalContext12GetWriteFlagEv>
 ec8:	mov	w1, w0
 ecc:	mov	x0, x19
 ed0:	str	w1, [sp, #124]
 ed4:	bl	0 <_ZN11__sanitizer13SignalContext10InitPcSpBpEv>
 ed8:	mov	x3, x22
 edc:	mov	x2, x21
 ee0:	mov	w1, w20
 ee4:	mov	x0, x19
 ee8:	bl	348 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_>
 eec:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 ef0:	add	x0, x0, #0x0
 ef4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 ef8:	bl	0 <_ZN11__sanitizer3DieEv>
 efc:	nop

0000000000000f00 <_ZN11__sanitizer21ScopedErrorReportLockD1Ev>:
 f00:	dmb	ish
 f04:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 f08:	add	x1, x0, #0x0
 f0c:	strb	wzr, [x1, #8]
 f10:	str	xzr, [x0]
 f14:	ret

0000000000000f18 <_ZN11__sanitizer21ScopedErrorReportLock11CheckLockedEv>:
 f18:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 f1c:	add	x0, x0, #0x0
 f20:	ldrb	w3, [x0, #8]
 f24:	and	x3, x3, #0xff
 f28:	cmp	x3, #0x1
 f2c:	b.ne	f34 <_ZN11__sanitizer21ScopedErrorReportLock11CheckLockedEv+0x1c>  // b.any
 f30:	ret
 f34:	str	x30, [sp, #-16]!
 f38:	adrp	x2, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 f3c:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
 f40:	add	x2, x2, #0x0
 f44:	add	x0, x0, #0x0
 f48:	mov	x4, #0x1                   	// #1
 f4c:	mov	w1, #0x2a                  	// #42
 f50:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x20, x0
   8:	mov	w19, #0x0                   	// #0
   c:	stp	x21, x30, [sp, #16]
  10:	mov	w21, #0x1                   	// #1
  14:	nop
  18:	cmp	w19, #0x9
  1c:	b.gt	58 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x58>
  20:	ldrb	w0, [x20]
  24:	tst	w0, #0xff
  28:	b.ne	44 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x44>  // b.any
  2c:	ldxrb	w0, [x20]
  30:	stxrb	w1, w21, [x20]
  34:	cbnz	w1, 2c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x2c>
  38:	dmb	ish
  3c:	tst	w0, #0xff
  40:	b.eq	4c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x4c>  // b.none
  44:	add	w19, w19, #0x1
  48:	b	18 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x18>
  4c:	ldp	x21, x30, [sp, #16]
  50:	ldp	x19, x20, [sp], #32
  54:	ret
  58:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  5c:	b	20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>

sanitizer_symbolizer_win.o:     file format elf64-littleaarch64


sanitizer_termination.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer14AddDieCallbackEPFvvE>:
   0:	adrp	x3, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
   4:	add	x3, x3, #0x0
   8:	mov	x1, #0x0                   	// #0
   c:	ldr	x2, [x3, x1, lsl #3]
  10:	mov	w4, w1
  14:	add	x1, x1, #0x1
  18:	cmp	x1, #0x5
  1c:	cbz	x2, 30 <_ZN11__sanitizer14AddDieCallbackEPFvvE+0x30>
  20:	b.ne	c <_ZN11__sanitizer14AddDieCallbackEPFvvE+0xc>  // b.any
  24:	mov	w1, #0x0                   	// #0
  28:	mov	w0, w1
  2c:	ret
  30:	mov	w1, #0x1                   	// #1
  34:	str	x0, [x3, w4, sxtw #3]
  38:	mov	w0, w1
  3c:	ret

0000000000000040 <_ZN11__sanitizer17RemoveDieCallbackEPFvvE>:
  40:	stp	x19, x30, [sp, #-16]!
  44:	adrp	x19, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
  48:	add	x19, x19, #0x0
  4c:	mov	x2, #0x0                   	// #0
  50:	ldr	x3, [x19, x2, lsl #3]
  54:	mov	w4, w2
  58:	add	w1, w2, #0x1
  5c:	add	x2, x2, #0x1
  60:	cmp	x3, x0
  64:	b.eq	7c <_ZN11__sanitizer17RemoveDieCallbackEPFvvE+0x3c>  // b.none
  68:	cmp	x2, #0x5
  6c:	b.ne	50 <_ZN11__sanitizer17RemoveDieCallbackEPFvvE+0x10>  // b.any
  70:	mov	w0, #0x0                   	// #0
  74:	ldp	x19, x30, [sp], #16
  78:	ret
  7c:	mov	w2, #0x4                   	// #4
  80:	sub	w2, w2, w4
  84:	add	x1, x19, w1, sxtw #3
  88:	add	x0, x19, w4, sxtw #3
  8c:	sbfiz	x2, x2, #3, #32
  90:	bl	0 <_ZN11__sanitizer16internal_memmoveEPvPKvm>
  94:	mov	w0, #0x1                   	// #1
  98:	str	xzr, [x19, #32]
  9c:	ldp	x19, x30, [sp], #16
  a0:	ret
  a4:	nop

00000000000000a8 <_ZN11__sanitizer18SetUserDieCallbackEPFvvE>:
  a8:	adrp	x1, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
  ac:	str	x0, [x1]
  b0:	ret
  b4:	nop

00000000000000b8 <_ZN11__sanitizer3DieEv>:
  b8:	stp	x19, x20, [sp, #-32]!
  bc:	adrp	x20, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
  c0:	add	x0, x20, #0x0
  c4:	ldr	x0, [x0, #40]
  c8:	str	x30, [sp, #16]
  cc:	cbz	x0, d4 <_ZN11__sanitizer3DieEv+0x1c>
  d0:	blr	x0
  d4:	add	x20, x20, #0x0
  d8:	mov	x19, #0x4                   	// #4
  dc:	ldr	x0, [x20, x19, lsl #3]
  e0:	cbz	x0, e8 <_ZN11__sanitizer3DieEv+0x30>
  e4:	blr	x0
  e8:	sub	x19, x19, #0x1
  ec:	cmn	x19, #0x1
  f0:	b.ne	dc <_ZN11__sanitizer3DieEv+0x24>  // b.any
  f4:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  f8:	ldr	x0, [x0]
  fc:	ldrb	w1, [x0, #220]
 100:	cbz	w1, 108 <_ZN11__sanitizer3DieEv+0x50>
 104:	bl	0 <_ZN11__sanitizer5AbortEv>
 108:	ldr	w0, [x0, #216]
 10c:	bl	0 <_ZN11__sanitizer14internal__exitEi>

0000000000000110 <_ZN11__sanitizer22SetCheckFailedCallbackEPFvPKciS1_yyE>:
 110:	adrp	x1, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
 114:	str	x0, [x1]
 118:	ret
 11c:	nop

0000000000000120 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>:
 120:	stp	x19, x20, [sp, #-48]!
 124:	adrp	x6, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
 128:	add	x6, x6, #0x0
 12c:	add	x5, x6, #0x38
 130:	mov	x19, x0
 134:	mov	w20, w1
 138:	stp	x21, x22, [sp, #16]
 13c:	mov	x21, x2
 140:	mov	x22, x3
 144:	stp	x23, x30, [sp, #32]
 148:	mov	x23, x4
 14c:	ldxr	w7, [x5]
 150:	add	w8, w7, #0x1
 154:	stlxr	w9, w8, [x5]
 158:	cbnz	w9, 14c <_ZN11__sanitizer11CheckFailedEPKciS1_yy+0x2c>
 15c:	dmb	ish
 160:	cmp	w7, #0xa
 164:	b.hi	198 <_ZN11__sanitizer11CheckFailedEPKciS1_yy+0x78>  // b.pmore
 168:	ldr	x5, [x6, #48]
 16c:	cbz	x5, 174 <_ZN11__sanitizer11CheckFailedEPKciS1_yy+0x54>
 170:	blr	x5
 174:	mov	x5, x23
 178:	mov	x4, x22
 17c:	mov	x3, x21
 180:	mov	w2, w20
 184:	mov	x1, x19
 188:	adrp	x0, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
 18c:	add	x0, x0, #0x0
 190:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 194:	bl	b8 <_ZN11__sanitizer3DieEv>
 198:	mov	w0, #0x2                   	// #2
 19c:	bl	0 <_ZN11__sanitizer15SleepForSecondsEi>
 1a0:	brk	#0x3e8
 1a4:	nop

00000000000001a8 <__sanitizer_set_death_callback>:
 1a8:	adrp	x1, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
 1ac:	str	x0, [x1]
 1b0:	ret

sanitizer_thread_registry.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>:
   0:	ldr	x2, [x0, #32]
   4:	cmp	x1, x2
   8:	b.eq	14 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv+0x14>  // b.none
   c:	mov	w0, #0x0                   	// #0
  10:	ret
  14:	ldr	w0, [x0, #112]
  18:	tst	w0, #0xfffffffb
  1c:	cset	w0, ne  // ne = any
  20:	ret
  24:	nop

0000000000000028 <_ZN11__sanitizer17ThreadContextBaseC1Ej>:
  28:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
  2c:	add	x2, x2, #0x0
  30:	str	x2, [x0]
  34:	str	w1, [x0, #8]
  38:	str	xzr, [x0, #16]
  3c:	str	wzr, [x0, #24]
  40:	stp	xzr, xzr, [x0, #32]
  44:	strb	wzr, [x0, #48]
  48:	str	wzr, [x0, #112]
  4c:	strh	wzr, [x0, #116]
  50:	str	wzr, [x0, #120]
  54:	str	xzr, [x0, #128]
  58:	dmb	ish
  5c:	str	wzr, [x0, #136]
  60:	ret
  64:	nop

0000000000000068 <_ZN11__sanitizer17ThreadContextBaseD1Ev>:
  68:	str	x30, [sp, #-16]!
  6c:	adrp	x1, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
  70:	add	x1, x1, #0x0
  74:	str	x1, [x0]
  78:	adrp	x3, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
  7c:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
  80:	add	x0, x3, #0x0
  84:	add	x2, x2, #0x0
  88:	mov	x4, #0x0                   	// #0
  8c:	mov	x3, #0x0                   	// #0
  90:	mov	w1, #0x1b                  	// #27
  94:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000098 <_ZN11__sanitizer17ThreadContextBase7SetNameEPKc>:
  98:	strb	wzr, [x0, #48]
  9c:	cbz	x1, c0 <_ZN11__sanitizer17ThreadContextBase7SetNameEPKc+0x28>
  a0:	stp	x19, x30, [sp, #-16]!
  a4:	mov	x19, x0
  a8:	mov	x2, #0x40                  	// #64
  ac:	add	x0, x0, #0x30
  b0:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
  b4:	strb	wzr, [x19, #111]
  b8:	ldp	x19, x30, [sp], #16
  bc:	ret
  c0:	ret
  c4:	nop

00000000000000c8 <_ZN11__sanitizer17ThreadContextBase7SetDeadEv>:
  c8:	ldr	w2, [x0, #112]
  cc:	sub	w2, w2, #0x2
  d0:	cmp	w2, #0x1
  d4:	b.hi	108 <_ZN11__sanitizer17ThreadContextBase7SetDeadEv+0x40>  // b.pmore
  d8:	ldr	x3, [x0]
  dc:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
  e0:	add	x1, x2, #0x0
  e4:	mov	w4, #0x4                   	// #4
  e8:	str	xzr, [x0, #40]
  ec:	ldr	x2, [x3]
  f0:	str	w4, [x0, #112]
  f4:	cmp	x2, x1
  f8:	b.ne	100 <_ZN11__sanitizer17ThreadContextBase7SetDeadEv+0x38>  // b.any
  fc:	ret
 100:	mov	x16, x2
 104:	br	x16
 108:	str	x30, [sp, #-16]!
 10c:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 110:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 114:	add	x2, x2, #0x0
 118:	add	x0, x0, #0x0
 11c:	mov	x4, #0x0                   	// #0
 120:	mov	x3, #0x0                   	// #0
 124:	mov	w1, #0x27                  	// #39
 128:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 12c:	nop

0000000000000130 <_ZN11__sanitizer17ThreadContextBase12SetDestroyedEv>:
 130:	dmb	ish
 134:	mov	w1, #0x1                   	// #1
 138:	str	w1, [x0, #136]
 13c:	ret

0000000000000140 <_ZN11__sanitizer17ThreadContextBase12GetDestroyedEv>:
 140:	ldr	w0, [x0, #136]
 144:	dmb	ish
 148:	cmp	w0, #0x0
 14c:	cset	w0, ne  // ne = any
 150:	ret
 154:	nop

0000000000000158 <_ZN11__sanitizer17ThreadContextBase9SetJoinedEPv>:
 158:	ldrb	w3, [x0, #116]
 15c:	str	x30, [sp, #-16]!
 160:	cbnz	w3, 1a8 <_ZN11__sanitizer17ThreadContextBase9SetJoinedEPv+0x50>
 164:	ldr	w4, [x0, #112]
 168:	cmp	x4, #0x3
 16c:	b.ne	1c8 <_ZN11__sanitizer17ThreadContextBase9SetJoinedEPv+0x70>  // b.any
 170:	ldr	x4, [x0]
 174:	adrp	x3, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 178:	add	x2, x3, #0x0
 17c:	mov	w5, #0x4                   	// #4
 180:	str	xzr, [x0, #40]
 184:	ldr	x3, [x4, #8]
 188:	str	w5, [x0, #112]
 18c:	cmp	x3, x2
 190:	b.ne	19c <_ZN11__sanitizer17ThreadContextBase9SetJoinedEPv+0x44>  // b.any
 194:	ldr	x30, [sp], #16
 198:	ret
 19c:	ldr	x30, [sp], #16
 1a0:	mov	x16, x3
 1a4:	br	x16
 1a8:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 1ac:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 1b0:	add	x2, x2, #0x0
 1b4:	add	x0, x0, #0x0
 1b8:	mov	x4, #0x1                   	// #1
 1bc:	mov	x3, #0x0                   	// #0
 1c0:	mov	w1, #0x38                  	// #56
 1c4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 1c8:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 1cc:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 1d0:	add	x2, x2, #0x0
 1d4:	add	x0, x0, #0x0
 1d8:	mov	x3, #0x3                   	// #3
 1dc:	mov	w1, #0x39                  	// #57
 1e0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 1e4:	nop

00000000000001e8 <_ZN11__sanitizer17ThreadContextBase11SetFinishedEv>:
 1e8:	ldrb	w1, [x0, #116]
 1ec:	cbz	w1, 218 <_ZN11__sanitizer17ThreadContextBase11SetFinishedEv+0x30>
 1f0:	ldr	w1, [x0, #112]
 1f4:	cmp	w1, #0x1
 1f8:	b.eq	218 <_ZN11__sanitizer17ThreadContextBase11SetFinishedEv+0x30>  // b.none
 1fc:	ldr	x2, [x0]
 200:	adrp	x1, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 204:	add	x1, x1, #0x0
 208:	ldr	x2, [x2, #16]
 20c:	cmp	x2, x1
 210:	b.ne	238 <_ZN11__sanitizer17ThreadContextBase11SetFinishedEv+0x50>  // b.any
 214:	ret
 218:	ldr	x2, [x0]
 21c:	mov	w1, #0x3                   	// #3
 220:	str	w1, [x0, #112]
 224:	adrp	x1, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 228:	add	x1, x1, #0x0
 22c:	ldr	x2, [x2, #16]
 230:	cmp	x2, x1
 234:	b.eq	214 <_ZN11__sanitizer17ThreadContextBase11SetFinishedEv+0x2c>  // b.none
 238:	mov	x16, x2
 23c:	br	x16

0000000000000240 <_ZN11__sanitizer17ThreadContextBase10SetStartedEybPv>:
 240:	ldr	x6, [x0]
 244:	strb	w2, [x0, #117]
 248:	mov	w7, #0x2                   	// #2
 24c:	adrp	x5, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 250:	add	x5, x5, #0x0
 254:	ldr	x2, [x6, #24]
 258:	str	x1, [x0, #32]
 25c:	str	w7, [x0, #112]
 260:	cmp	x2, x5
 264:	b.ne	26c <_ZN11__sanitizer17ThreadContextBase10SetStartedEybPv+0x2c>  // b.any
 268:	ret
 26c:	mov	x1, x3
 270:	mov	x16, x2
 274:	br	x16

0000000000000278 <_ZN11__sanitizer17ThreadContextBase10SetCreatedEmybjPv>:
 278:	ldr	w6, [x0, #8]
 27c:	mov	w7, #0x1                   	// #1
 280:	str	x2, [x0, #16]
 284:	str	x1, [x0, #40]
 288:	str	w7, [x0, #112]
 28c:	strb	w3, [x0, #116]
 290:	cbz	w6, 298 <_ZN11__sanitizer17ThreadContextBase10SetCreatedEmybjPv+0x20>
 294:	str	w4, [x0, #120]
 298:	ldr	x1, [x0]
 29c:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 2a0:	add	x2, x2, #0x0
 2a4:	ldr	x3, [x1, #32]
 2a8:	cmp	x3, x2
 2ac:	b.ne	2b4 <_ZN11__sanitizer17ThreadContextBase10SetCreatedEmybjPv+0x3c>  // b.any
 2b0:	ret
 2b4:	mov	x1, x5
 2b8:	mov	x16, x3
 2bc:	br	x16

00000000000002c0 <_ZN11__sanitizer17ThreadContextBase5ResetEv>:
 2c0:	strb	wzr, [x0, #48]
 2c4:	str	wzr, [x0, #112]
 2c8:	dmb	ish
 2cc:	str	wzr, [x0, #136]
 2d0:	ldr	x2, [x0]
 2d4:	adrp	x1, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 2d8:	add	x1, x1, #0x0
 2dc:	ldr	x2, [x2, #40]
 2e0:	cmp	x2, x1
 2e4:	b.ne	2ec <_ZN11__sanitizer17ThreadContextBase5ResetEv+0x2c>  // b.any
 2e8:	ret
 2ec:	mov	x16, x2
 2f0:	br	x16
 2f4:	nop

00000000000002f8 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>:
 2f8:	stp	x19, x20, [sp, #-32]!
 2fc:	add	x3, x0, #0xa0
 300:	mov	x19, x0
 304:	ldr	x2, [x0, #160]
 308:	str	x30, [sp, #16]
 30c:	str	xzr, [x1, #128]
 310:	cbnz	x2, 33c <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0+0x44>
 314:	mov	x0, #0x1                   	// #1
 318:	stp	x1, x1, [x3, #8]
 31c:	mov	x2, x0
 320:	str	x0, [x19, #160]
 324:	ldr	w0, [x19, #12]
 328:	cmp	x2, x0
 32c:	b.hi	35c <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0+0x64>  // b.pmore
 330:	ldr	x30, [sp, #16]
 334:	ldp	x19, x20, [sp], #32
 338:	ret
 33c:	ldr	x0, [x3, #16]
 340:	add	x2, x2, #0x1
 344:	str	x1, [x0, #128]
 348:	str	x1, [x3, #16]
 34c:	ldr	w0, [x19, #12]
 350:	str	x2, [x19, #160]
 354:	cmp	x2, x0
 358:	b.ls	330 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0+0x38>  // b.plast
 35c:	ldr	x20, [x19, #168]
 360:	ldr	x0, [x20, #128]
 364:	str	x0, [x3, #8]
 368:	cbz	x0, 3ec <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0+0xf4>
 36c:	ldr	w3, [x20, #112]
 370:	sub	x2, x2, #0x1
 374:	str	x2, [x19, #160]
 378:	cmp	x3, #0x4
 37c:	b.ne	3f4 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0+0xfc>  // b.any
 380:	mov	x0, x20
 384:	bl	2c0 <_ZN11__sanitizer17ThreadContextBase5ResetEv>
 388:	ldr	w0, [x20, #24]
 38c:	add	w0, w0, #0x1
 390:	str	w0, [x20, #24]
 394:	ldr	w1, [x19, #16]
 398:	cmp	w1, #0x0
 39c:	ccmp	w0, w1, #0x0, ne  // ne = any
 3a0:	b.cs	330 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0+0x38>  // b.hs, b.nlast
 3a4:	ldr	x0, [x19, #184]
 3a8:	cbnz	x0, 3c8 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0+0xd0>
 3ac:	str	xzr, [x20, #128]
 3b0:	mov	x1, #0x1                   	// #1
 3b4:	stp	x1, x20, [x19, #184]
 3b8:	str	x20, [x19, #200]
 3bc:	ldr	x30, [sp, #16]
 3c0:	ldp	x19, x20, [sp], #32
 3c4:	ret
 3c8:	str	xzr, [x20, #128]
 3cc:	add	x0, x0, #0x1
 3d0:	ldr	x30, [sp, #16]
 3d4:	ldr	x2, [x19, #200]
 3d8:	str	x20, [x2, #128]
 3dc:	str	x0, [x19, #184]
 3e0:	str	x20, [x19, #200]
 3e4:	ldp	x19, x20, [sp], #32
 3e8:	ret
 3ec:	str	xzr, [x3, #16]
 3f0:	b	36c <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0+0x74>
 3f4:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 3f8:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 3fc:	add	x2, x2, #0x0
 400:	add	x0, x0, #0x0
 404:	mov	x4, #0x4                   	// #4
 408:	mov	w1, #0x143                 	// #323
 40c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000410 <_ZN11__sanitizer14ThreadRegistryC1EPFPNS_17ThreadContextBaseEjEjjj>:
 410:	stp	x19, x30, [sp, #-16]!
 414:	mov	x19, x0
 418:	add	x0, x0, #0x18
 41c:	str	x1, [x19]
 420:	stp	w2, w3, [x19, #8]
 424:	str	w4, [x19, #16]
 428:	bl	0 <_ZN11__sanitizer13BlockingMutexC1Ev>
 42c:	str	wzr, [x19, #112]
 430:	ldr	w0, [x19, #8]
 434:	mov	w2, #0x0                   	// #0
 438:	stp	xzr, xzr, [x19, #120]
 43c:	adrp	x1, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 440:	add	x1, x1, #0x0
 444:	stp	xzr, xzr, [x19, #136]
 448:	lsl	x0, x0, #3
 44c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 450:	stp	x0, xzr, [x19, #152]
 454:	stp	xzr, xzr, [x19, #168]
 458:	stp	xzr, xzr, [x19, #184]
 45c:	str	xzr, [x19, #200]
 460:	ldp	x19, x30, [sp], #16
 464:	ret

0000000000000468 <_ZN11__sanitizer14ThreadRegistry18GetNumberOfThreadsEPmS1_S1_>:
 468:	stp	x19, x20, [sp, #-48]!
 46c:	mov	x19, x0
 470:	mov	x20, x3
 474:	stp	x23, x30, [sp, #32]
 478:	add	x23, x0, #0x18
 47c:	mov	x0, x23
 480:	stp	x21, x22, [sp, #16]
 484:	mov	x22, x1
 488:	mov	x21, x2
 48c:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 490:	cbz	x22, 49c <_ZN11__sanitizer14ThreadRegistry18GetNumberOfThreadsEPmS1_S1_+0x34>
 494:	ldr	w0, [x19, #112]
 498:	str	x0, [x22]
 49c:	cbz	x21, 4a8 <_ZN11__sanitizer14ThreadRegistry18GetNumberOfThreadsEPmS1_S1_+0x40>
 4a0:	ldr	x0, [x19, #144]
 4a4:	str	x0, [x21]
 4a8:	cbz	x20, 4b4 <_ZN11__sanitizer14ThreadRegistry18GetNumberOfThreadsEPmS1_S1_+0x4c>
 4ac:	ldr	x0, [x19, #128]
 4b0:	str	x0, [x20]
 4b4:	mov	x0, x23
 4b8:	ldp	x21, x22, [sp, #16]
 4bc:	ldp	x23, x30, [sp, #32]
 4c0:	ldp	x19, x20, [sp], #48
 4c4:	b	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>

00000000000004c8 <_ZN11__sanitizer14ThreadRegistry18GetMaxAliveThreadsEv>:
 4c8:	stp	x19, x20, [sp, #-32]!
 4cc:	mov	x19, x0
 4d0:	add	x20, x0, #0x18
 4d4:	mov	x0, x20
 4d8:	str	x30, [sp, #16]
 4dc:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 4e0:	ldr	x19, [x19, #136]
 4e4:	mov	x0, x20
 4e8:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 4ec:	mov	x0, x19
 4f0:	ldr	x30, [sp, #16]
 4f4:	ldp	x19, x20, [sp], #32
 4f8:	ret
 4fc:	nop

0000000000000500 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv>:
 500:	stp	x19, x20, [sp, #-64]!
 504:	mov	x19, x0
 508:	stp	x25, x30, [sp, #48]
 50c:	add	x25, x0, #0x18
 510:	mov	x0, x25
 514:	stp	x21, x22, [sp, #16]
 518:	mov	x21, x1
 51c:	mov	w22, w3
 520:	stp	x23, x24, [sp, #32]
 524:	mov	x23, x4
 528:	and	w24, w2, #0xff
 52c:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 530:	ldr	x1, [x19, #184]
 534:	cbz	x1, 600 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x100>
 538:	ldr	x0, [x19, #192]
 53c:	ldr	x2, [x0, #128]
 540:	str	x2, [x19, #192]
 544:	cbz	x2, 654 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x154>
 548:	ldr	w20, [x0, #8]
 54c:	sub	x1, x1, #0x1
 550:	str	x1, [x19, #184]
 554:	mov	w3, w20
 558:	mov	x1, #0xffffffff            	// #4294967295
 55c:	cmp	x3, x1
 560:	b.eq	684 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x184>  // b.none
 564:	ldr	w4, [x19, #8]
 568:	cmp	x3, x4
 56c:	b.cs	6a0 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x1a0>  // b.hs, b.nlast
 570:	ldr	w3, [x0, #112]
 574:	cbnz	x3, 6b8 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x1b8>
 578:	ldp	x2, x1, [x19, #128]
 57c:	add	x3, x2, #0x1
 580:	str	x3, [x19, #128]
 584:	cmp	x3, x1
 588:	b.ls	59c <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x9c>  // b.plast
 58c:	add	x4, x1, #0x1
 590:	str	x4, [x19, #136]
 594:	cmp	x2, x1
 598:	b.ne	6d4 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x1d4>  // b.any
 59c:	ldr	x1, [x19, #120]
 5a0:	mov	w3, #0x1                   	// #1
 5a4:	ldr	w2, [x0, #8]
 5a8:	add	x4, x1, #0x1
 5ac:	str	x4, [x19, #120]
 5b0:	str	x1, [x0, #16]
 5b4:	str	x21, [x0, #40]
 5b8:	str	w3, [x0, #112]
 5bc:	strb	w24, [x0, #116]
 5c0:	cbz	w2, 5c8 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0xc8>
 5c4:	str	w22, [x0, #120]
 5c8:	ldr	x2, [x0]
 5cc:	adrp	x1, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 5d0:	add	x1, x1, #0x0
 5d4:	ldr	x2, [x2, #32]
 5d8:	cmp	x2, x1
 5dc:	b.ne	65c <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x15c>  // b.any
 5e0:	mov	x0, x25
 5e4:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 5e8:	mov	w0, w20
 5ec:	ldp	x21, x22, [sp, #16]
 5f0:	ldp	x23, x24, [sp, #32]
 5f4:	ldp	x25, x30, [sp, #48]
 5f8:	ldp	x19, x20, [sp], #64
 5fc:	ret
 600:	ldr	w2, [x19, #8]
 604:	ldr	w20, [x19, #112]
 608:	cmp	w20, w2
 60c:	b.cs	6ec <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x1ec>  // b.hs, b.nlast
 610:	ldr	x1, [x19]
 614:	add	w0, w20, #0x1
 618:	str	w0, [x19, #112]
 61c:	mov	w0, w20
 620:	blr	x1
 624:	ldr	x1, [x19, #152]
 628:	mov	w3, w20
 62c:	str	x0, [x1, x3, lsl #3]
 630:	cbnz	x0, 558 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x58>
 634:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 638:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 63c:	add	x2, x2, #0x0
 640:	add	x0, x0, #0x0
 644:	mov	x4, #0x0                   	// #0
 648:	mov	x3, #0x0                   	// #0
 64c:	mov	w1, #0x9c                  	// #156
 650:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 654:	str	xzr, [x19, #200]
 658:	b	548 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x48>
 65c:	mov	x1, x23
 660:	blr	x2
 664:	mov	x0, x25
 668:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 66c:	mov	w0, w20
 670:	ldp	x21, x22, [sp, #16]
 674:	ldp	x23, x24, [sp, #32]
 678:	ldp	x25, x30, [sp, #48]
 67c:	ldp	x19, x20, [sp], #64
 680:	ret
 684:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 688:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 68c:	add	x2, x2, #0x0
 690:	add	x0, x0, #0x0
 694:	mov	x4, x3
 698:	mov	w1, #0x9d                  	// #157
 69c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 6a0:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 6a4:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 6a8:	add	x2, x2, #0x0
 6ac:	add	x0, x0, #0x0
 6b0:	mov	w1, #0x9e                  	// #158
 6b4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 6b8:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 6bc:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 6c0:	add	x2, x2, #0x0
 6c4:	add	x0, x0, #0x0
 6c8:	mov	x4, #0x0                   	// #0
 6cc:	mov	w1, #0x9f                  	// #159
 6d0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 6d4:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 6d8:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 6dc:	add	x2, x2, #0x0
 6e0:	add	x0, x0, #0x0
 6e4:	mov	w1, #0xa3                  	// #163
 6e8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 6ec:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 6f0:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 6f4:	add	x0, x0, #0x0
 6f8:	ldr	x1, [x1]
 6fc:	ldr	x1, [x1]
 700:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 704:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000708 <_ZN11__sanitizer14ThreadRegistry30RunCallbackForEachThreadLockedEPFvPNS_17ThreadContextBaseEPvES3_>:
 708:	stp	x19, x20, [sp, #-48]!
 70c:	mov	x20, x0
 710:	add	x0, x0, #0x18
 714:	stp	x21, x22, [sp, #16]
 718:	mov	x22, x1
 71c:	mov	x21, x2
 720:	str	x30, [sp, #32]
 724:	bl	0 <_ZN11__sanitizer13BlockingMutex11CheckLockedEv>
 728:	ldr	w3, [x20, #112]
 72c:	cbz	w3, 75c <_ZN11__sanitizer14ThreadRegistry30RunCallbackForEachThreadLockedEPFvPNS_17ThreadContextBaseEPvES3_+0x54>
 730:	mov	w19, #0x0                   	// #0
 734:	nop
 738:	ldr	x0, [x20, #152]
 73c:	mov	x1, x21
 740:	ldr	x0, [x0, w19, uxtw #3]
 744:	add	w19, w19, #0x1
 748:	cbz	x0, 754 <_ZN11__sanitizer14ThreadRegistry30RunCallbackForEachThreadLockedEPFvPNS_17ThreadContextBaseEPvES3_+0x4c>
 74c:	blr	x22
 750:	ldr	w3, [x20, #112]
 754:	cmp	w3, w19
 758:	b.hi	738 <_ZN11__sanitizer14ThreadRegistry30RunCallbackForEachThreadLockedEPFvPNS_17ThreadContextBaseEPvES3_+0x30>  // b.pmore
 75c:	ldp	x21, x22, [sp, #16]
 760:	ldr	x30, [sp, #32]
 764:	ldp	x19, x20, [sp], #48
 768:	ret
 76c:	nop

0000000000000770 <_ZN11__sanitizer14ThreadRegistry10FindThreadEPFbPNS_17ThreadContextBaseEPvES3_>:
 770:	stp	x19, x20, [sp, #-64]!
 774:	stp	x21, x22, [sp, #16]
 778:	mov	x21, x0
 77c:	mov	x22, x2
 780:	stp	x23, x24, [sp, #32]
 784:	add	x24, x0, #0x18
 788:	mov	x23, x1
 78c:	mov	x0, x24
 790:	str	x30, [sp, #48]
 794:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 798:	ldr	w3, [x21, #112]
 79c:	cbz	w3, 7d8 <_ZN11__sanitizer14ThreadRegistry10FindThreadEPFbPNS_17ThreadContextBaseEPvES3_+0x68>
 7a0:	mov	w19, #0x0                   	// #0
 7a4:	nop
 7a8:	ldr	x0, [x21, #152]
 7ac:	mov	x1, x22
 7b0:	ldr	x20, [x0, w19, uxtw #3]
 7b4:	mov	x0, x20
 7b8:	cbz	x20, 7cc <_ZN11__sanitizer14ThreadRegistry10FindThreadEPFbPNS_17ThreadContextBaseEPvES3_+0x5c>
 7bc:	blr	x23
 7c0:	tst	w0, #0xff
 7c4:	b.ne	7fc <_ZN11__sanitizer14ThreadRegistry10FindThreadEPFbPNS_17ThreadContextBaseEPvES3_+0x8c>  // b.any
 7c8:	ldr	w3, [x21, #112]
 7cc:	add	w19, w19, #0x1
 7d0:	cmp	w3, w19
 7d4:	b.hi	7a8 <_ZN11__sanitizer14ThreadRegistry10FindThreadEPFbPNS_17ThreadContextBaseEPvES3_+0x38>  // b.pmore
 7d8:	mov	x0, x24
 7dc:	mov	w19, #0xffffffff            	// #-1
 7e0:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 7e4:	mov	w0, w19
 7e8:	ldp	x21, x22, [sp, #16]
 7ec:	ldp	x23, x24, [sp, #32]
 7f0:	ldr	x30, [sp, #48]
 7f4:	ldp	x19, x20, [sp], #64
 7f8:	ret
 7fc:	ldr	w19, [x20, #8]
 800:	mov	x0, x24
 804:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 808:	mov	w0, w19
 80c:	ldp	x21, x22, [sp, #16]
 810:	ldp	x23, x24, [sp, #32]
 814:	ldr	x30, [sp, #48]
 818:	ldp	x19, x20, [sp], #64
 81c:	ret

0000000000000820 <_ZN11__sanitizer14ThreadRegistry23FindThreadContextLockedEPFbPNS_17ThreadContextBaseEPvES3_>:
 820:	stp	x19, x20, [sp, #-48]!
 824:	stp	x21, x22, [sp, #16]
 828:	mov	x21, x0
 82c:	mov	x22, x2
 830:	add	x0, x0, #0x18
 834:	stp	x23, x30, [sp, #32]
 838:	mov	x23, x1
 83c:	bl	0 <_ZN11__sanitizer13BlockingMutex11CheckLockedEv>
 840:	ldr	w3, [x21, #112]
 844:	cbz	w3, 880 <_ZN11__sanitizer14ThreadRegistry23FindThreadContextLockedEPFbPNS_17ThreadContextBaseEPvES3_+0x60>
 848:	mov	w19, #0x0                   	// #0
 84c:	nop
 850:	ldr	x0, [x21, #152]
 854:	mov	x1, x22
 858:	ldr	x20, [x0, w19, uxtw #3]
 85c:	mov	x0, x20
 860:	cbz	x20, 874 <_ZN11__sanitizer14ThreadRegistry23FindThreadContextLockedEPFbPNS_17ThreadContextBaseEPvES3_+0x54>
 864:	blr	x23
 868:	tst	w0, #0xff
 86c:	b.ne	884 <_ZN11__sanitizer14ThreadRegistry23FindThreadContextLockedEPFbPNS_17ThreadContextBaseEPvES3_+0x64>  // b.any
 870:	ldr	w3, [x21, #112]
 874:	add	w19, w19, #0x1
 878:	cmp	w3, w19
 87c:	b.hi	850 <_ZN11__sanitizer14ThreadRegistry23FindThreadContextLockedEPFbPNS_17ThreadContextBaseEPvES3_+0x30>  // b.pmore
 880:	mov	x20, #0x0                   	// #0
 884:	mov	x0, x20
 888:	ldp	x21, x22, [sp, #16]
 88c:	ldp	x23, x30, [sp, #32]
 890:	ldp	x19, x20, [sp], #48
 894:	ret

0000000000000898 <_ZN11__sanitizer14ThreadRegistry29FindThreadContextByOsIDLockedEy>:
 898:	mov	x2, x1
 89c:	adrp	x3, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 8a0:	add	x1, x3, #0x0
 8a4:	b	820 <_ZN11__sanitizer14ThreadRegistry23FindThreadContextLockedEPFbPNS_17ThreadContextBaseEPvES3_>

00000000000008a8 <_ZN11__sanitizer14ThreadRegistry13SetThreadNameEjPKc>:
 8a8:	stp	x19, x20, [sp, #-48]!
 8ac:	mov	x19, x0
 8b0:	mov	w20, w1
 8b4:	stp	x21, x22, [sp, #16]
 8b8:	add	x22, x0, #0x18
 8bc:	mov	x21, x2
 8c0:	mov	x0, x22
 8c4:	str	x30, [sp, #32]
 8c8:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 8cc:	ldr	w4, [x19, #112]
 8d0:	mov	w3, w20
 8d4:	cmp	x4, w20, uxtw
 8d8:	b.ls	924 <_ZN11__sanitizer14ThreadRegistry13SetThreadNameEjPKc+0x7c>  // b.plast
 8dc:	ldr	x0, [x19, #152]
 8e0:	ldr	x19, [x0, x3, lsl #3]
 8e4:	cbz	x19, 93c <_ZN11__sanitizer14ThreadRegistry13SetThreadNameEjPKc+0x94>
 8e8:	ldr	w4, [x19, #112]
 8ec:	cmp	x4, #0x2
 8f0:	b.ne	95c <_ZN11__sanitizer14ThreadRegistry13SetThreadNameEjPKc+0xb4>  // b.any
 8f4:	strb	wzr, [x19, #48]
 8f8:	cbz	x21, 910 <_ZN11__sanitizer14ThreadRegistry13SetThreadNameEjPKc+0x68>
 8fc:	mov	x1, x21
 900:	add	x0, x19, #0x30
 904:	mov	x2, #0x40                  	// #64
 908:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
 90c:	strb	wzr, [x19, #111]
 910:	mov	x0, x22
 914:	ldp	x21, x22, [sp, #16]
 918:	ldr	x30, [sp, #32]
 91c:	ldp	x19, x20, [sp], #48
 920:	b	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 924:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 928:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 92c:	add	x2, x2, #0x0
 930:	add	x0, x0, #0x0
 934:	mov	w1, #0xd7                  	// #215
 938:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 93c:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 940:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 944:	add	x2, x2, #0x0
 948:	add	x0, x0, #0x0
 94c:	mov	x4, #0x0                   	// #0
 950:	mov	x3, #0x0                   	// #0
 954:	mov	w1, #0xd9                  	// #217
 958:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 95c:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 960:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 964:	add	x2, x2, #0x0
 968:	add	x0, x0, #0x0
 96c:	mov	x3, #0x2                   	// #2
 970:	mov	w1, #0xda                  	// #218
 974:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000978 <_ZN11__sanitizer14ThreadRegistry21SetThreadNameByUserIdEmPKc>:
 978:	stp	x19, x20, [sp, #-48]!
 97c:	mov	x19, x0
 980:	mov	x20, x1
 984:	stp	x21, x22, [sp, #16]
 988:	add	x22, x0, #0x18
 98c:	mov	x21, x2
 990:	mov	x0, x22
 994:	str	x30, [sp, #32]
 998:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 99c:	ldr	w4, [x19, #112]
 9a0:	cbz	w4, 9f4 <_ZN11__sanitizer14ThreadRegistry21SetThreadNameByUserIdEmPKc+0x7c>
 9a4:	mov	x0, #0x0                   	// #0
 9a8:	ldr	x5, [x19, #152]
 9ac:	b	9b8 <_ZN11__sanitizer14ThreadRegistry21SetThreadNameByUserIdEmPKc+0x40>
 9b0:	cmp	w4, w0
 9b4:	b.ls	9f4 <_ZN11__sanitizer14ThreadRegistry21SetThreadNameByUserIdEmPKc+0x7c>  // b.plast
 9b8:	ldr	x19, [x5, x0, lsl #3]
 9bc:	add	x0, x0, #0x1
 9c0:	cbz	x19, 9b0 <_ZN11__sanitizer14ThreadRegistry21SetThreadNameByUserIdEmPKc+0x38>
 9c4:	ldr	x3, [x19, #40]
 9c8:	cmp	x3, x20
 9cc:	b.ne	9b0 <_ZN11__sanitizer14ThreadRegistry21SetThreadNameByUserIdEmPKc+0x38>  // b.any
 9d0:	ldr	w1, [x19, #112]
 9d4:	cbz	w1, 9b0 <_ZN11__sanitizer14ThreadRegistry21SetThreadNameByUserIdEmPKc+0x38>
 9d8:	strb	wzr, [x19, #48]
 9dc:	cbz	x21, 9f4 <_ZN11__sanitizer14ThreadRegistry21SetThreadNameByUserIdEmPKc+0x7c>
 9e0:	mov	x1, x21
 9e4:	add	x0, x19, #0x30
 9e8:	mov	x2, #0x40                  	// #64
 9ec:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
 9f0:	strb	wzr, [x19, #111]
 9f4:	mov	x0, x22
 9f8:	ldp	x21, x22, [sp, #16]
 9fc:	ldr	x30, [sp, #32]
 a00:	ldp	x19, x20, [sp], #48
 a04:	b	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>

0000000000000a08 <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv>:
 a08:	stp	x19, x20, [sp, #-48]!
 a0c:	mov	x19, x0
 a10:	mov	w20, w1
 a14:	stp	x21, x22, [sp, #16]
 a18:	add	x21, x0, #0x18
 a1c:	mov	x22, x2
 a20:	mov	x0, x21
 a24:	str	x30, [sp, #32]
 a28:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 a2c:	ldr	w4, [x19, #112]
 a30:	mov	w3, w20
 a34:	cmp	x4, w20, uxtw
 a38:	b.ls	aec <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0xe4>  // b.plast
 a3c:	ldr	x0, [x19, #152]
 a40:	ldr	x20, [x0, x3, lsl #3]
 a44:	cbz	x20, b04 <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0xfc>
 a48:	ldr	w1, [x20, #112]
 a4c:	cbz	w1, a8c <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0x84>
 a50:	ldr	x2, [x20]
 a54:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 a58:	add	x0, x0, #0x0
 a5c:	ldr	x2, [x2, #48]
 a60:	cmp	x2, x0
 a64:	b.ne	ad8 <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0xd0>  // b.any
 a68:	cmp	w1, #0x3
 a6c:	b.eq	ab8 <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0xb0>  // b.none
 a70:	mov	w0, #0x1                   	// #1
 a74:	strb	w0, [x20, #116]
 a78:	mov	x0, x21
 a7c:	ldp	x21, x22, [sp, #16]
 a80:	ldr	x30, [sp, #32]
 a84:	ldp	x19, x20, [sp], #48
 a88:	b	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 a8c:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 a90:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 a94:	add	x0, x0, #0x0
 a98:	ldr	x1, [x1]
 a9c:	ldr	x1, [x1]
 aa0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 aa4:	mov	x0, x21
 aa8:	ldp	x21, x22, [sp, #16]
 aac:	ldr	x30, [sp, #32]
 ab0:	ldp	x19, x20, [sp], #48
 ab4:	b	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 ab8:	mov	x0, x20
 abc:	bl	c8 <_ZN11__sanitizer17ThreadContextBase7SetDeadEv>
 ac0:	ldr	w0, [x20, #8]
 ac4:	cbz	w0, a78 <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0x70>
 ac8:	mov	x1, x20
 acc:	mov	x0, x19
 ad0:	bl	2f8 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
 ad4:	b	a78 <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0x70>
 ad8:	mov	x1, x22
 adc:	mov	x0, x20
 ae0:	blr	x2
 ae4:	ldr	w1, [x20, #112]
 ae8:	b	a68 <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0x60>
 aec:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 af0:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 af4:	add	x2, x2, #0x0
 af8:	add	x0, x0, #0x0
 afc:	mov	w1, #0xed                  	// #237
 b00:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 b04:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 b08:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 b0c:	add	x2, x2, #0x0
 b10:	add	x0, x0, #0x0
 b14:	mov	x4, #0x0                   	// #0
 b18:	mov	x3, #0x0                   	// #0
 b1c:	mov	w1, #0xef                  	// #239
 b20:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 b24:	nop

0000000000000b28 <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv>:
 b28:	stp	x19, x20, [sp, #-64]!
 b2c:	mov	x20, x0
 b30:	stp	x21, x22, [sp, #16]
 b34:	add	x22, x0, #0x18
 b38:	ubfiz	x21, x1, #3, #32
 b3c:	mov	x0, x22
 b40:	stp	x23, x24, [sp, #32]
 b44:	mov	w23, w1
 b48:	mov	x24, x2
 b4c:	str	x30, [sp, #48]
 b50:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 b54:	ldr	w4, [x20, #112]
 b58:	cmp	x23, x4
 b5c:	b.cs	ba0 <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0x78>  // b.hs, b.nlast
 b60:	ldr	x0, [x20, #152]
 b64:	ldr	x19, [x0, x21]
 b68:	cbz	x19, bf4 <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0xcc>
 b6c:	ldr	w0, [x19, #112]
 b70:	cbz	w0, c14 <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0xec>
 b74:	ldr	w0, [x19, #136]
 b78:	dmb	ish
 b7c:	cbnz	w0, bbc <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0x94>
 b80:	mov	x0, x22
 b84:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 b88:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
 b8c:	mov	x0, x22
 b90:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 b94:	ldr	w4, [x20, #112]
 b98:	cmp	x23, x4
 b9c:	b.cc	b60 <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0x38>  // b.lo, b.ul, b.last
 ba0:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 ba4:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 ba8:	mov	x3, x23
 bac:	add	x2, x2, #0x0
 bb0:	add	x0, x0, #0x0
 bb4:	mov	w1, #0x102                 	// #258
 bb8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 bbc:	mov	x0, x19
 bc0:	mov	x1, x24
 bc4:	bl	158 <_ZN11__sanitizer17ThreadContextBase9SetJoinedEPv>
 bc8:	ldr	w0, [x19, #8]
 bcc:	cbz	w0, bdc <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0xb4>
 bd0:	mov	x1, x19
 bd4:	mov	x0, x20
 bd8:	bl	2f8 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
 bdc:	mov	x0, x22
 be0:	ldp	x21, x22, [sp, #16]
 be4:	ldp	x23, x24, [sp, #32]
 be8:	ldr	x30, [sp, #48]
 bec:	ldp	x19, x20, [sp], #64
 bf0:	b	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 bf4:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 bf8:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 bfc:	add	x2, x2, #0x0
 c00:	add	x0, x0, #0x0
 c04:	mov	x4, #0x0                   	// #0
 c08:	mov	x3, #0x0                   	// #0
 c0c:	mov	w1, #0x104                 	// #260
 c10:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 c14:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 c18:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 c1c:	add	x0, x0, #0x0
 c20:	ldr	x1, [x1]
 c24:	ldr	x1, [x1]
 c28:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 c2c:	b	bdc <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0xb4>

0000000000000c30 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj>:
 c30:	stp	x19, x20, [sp, #-48]!
 c34:	mov	x19, x0
 c38:	mov	w20, w1
 c3c:	stp	x21, x22, [sp, #16]
 c40:	add	x22, x0, #0x18
 c44:	mov	x0, x22
 c48:	str	x30, [sp, #32]
 c4c:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 c50:	ldr	x0, [x19, #128]
 c54:	cbz	x0, d4c <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x11c>
 c58:	ldr	w4, [x19, #112]
 c5c:	sub	x0, x0, #0x1
 c60:	str	x0, [x19, #128]
 c64:	mov	w3, w20
 c68:	cmp	x4, w20, uxtw
 c6c:	b.ls	d6c <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x13c>  // b.plast
 c70:	ldr	x0, [x19, #152]
 c74:	ldr	x20, [x0, x3, lsl #3]
 c78:	cbz	x20, d84 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x154>
 c7c:	ldr	w3, [x20, #112]
 c80:	cmp	w3, #0x2
 c84:	b.eq	ce0 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0xb0>  // b.none
 c88:	cmp	w3, #0x1
 c8c:	mov	w21, w3
 c90:	b.ne	da4 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x174>  // b.any
 c94:	ldr	x1, [x20]
 c98:	mov	w0, #0x3                   	// #3
 c9c:	ldr	x1, [x1, #16]
 ca0:	str	w0, [x20, #112]
 ca4:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 ca8:	add	x0, x0, #0x0
 cac:	cmp	x1, x0
 cb0:	b.eq	d10 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0xe0>  // b.none
 cb4:	mov	x0, x20
 cb8:	blr	x1
 cbc:	cbnz	w21, d10 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0xe0>
 cc0:	dmb	ish
 cc4:	mov	w0, #0x1                   	// #1
 cc8:	str	w0, [x20, #136]
 ccc:	mov	x0, x22
 cd0:	ldp	x21, x22, [sp, #16]
 cd4:	ldr	x30, [sp, #32]
 cd8:	ldp	x19, x20, [sp], #48
 cdc:	b	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 ce0:	ldr	x0, [x19, #144]
 ce4:	cbz	x0, dc4 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x194>
 ce8:	ldrb	w21, [x20, #116]
 cec:	sub	x0, x0, #0x1
 cf0:	str	x0, [x19, #144]
 cf4:	cbz	w21, de4 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x1b4>
 cf8:	ldr	x1, [x20]
 cfc:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 d00:	add	x0, x0, #0x0
 d04:	ldr	x1, [x1, #16]
 d08:	cmp	x1, x0
 d0c:	b.ne	cb4 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x84>  // b.any
 d10:	mov	x0, x20
 d14:	bl	c8 <_ZN11__sanitizer17ThreadContextBase7SetDeadEv>
 d18:	ldr	w0, [x20, #8]
 d1c:	cbz	w0, cc0 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x90>
 d20:	mov	x0, x19
 d24:	mov	x1, x20
 d28:	bl	2f8 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
 d2c:	dmb	ish
 d30:	mov	w0, #0x1                   	// #1
 d34:	str	w0, [x20, #136]
 d38:	mov	x0, x22
 d3c:	ldp	x21, x22, [sp, #16]
 d40:	ldr	x30, [sp, #32]
 d44:	ldp	x19, x20, [sp], #48
 d48:	b	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 d4c:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 d50:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 d54:	add	x2, x2, #0x0
 d58:	add	x0, x0, #0x0
 d5c:	mov	x4, #0x0                   	// #0
 d60:	mov	x3, #0x0                   	// #0
 d64:	mov	w1, #0x11a                 	// #282
 d68:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 d6c:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 d70:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 d74:	add	x2, x2, #0x0
 d78:	add	x0, x0, #0x0
 d7c:	mov	w1, #0x11c                 	// #284
 d80:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 d84:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 d88:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 d8c:	add	x2, x2, #0x0
 d90:	add	x0, x0, #0x0
 d94:	mov	x4, #0x0                   	// #0
 d98:	mov	x3, #0x0                   	// #0
 d9c:	mov	w1, #0x11e                 	// #286
 da0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 da4:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 da8:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 dac:	mov	x3, x21
 db0:	add	x2, x2, #0x0
 db4:	add	x0, x0, #0x0
 db8:	mov	x4, #0x1                   	// #1
 dbc:	mov	w1, #0x125                 	// #293
 dc0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 dc4:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 dc8:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 dcc:	add	x2, x2, #0x0
 dd0:	add	x0, x0, #0x0
 dd4:	mov	x4, #0x0                   	// #0
 dd8:	mov	x3, #0x0                   	// #0
 ddc:	mov	w1, #0x121                 	// #289
 de0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 de4:	ldr	x1, [x20]
 de8:	mov	w0, #0x3                   	// #3
 dec:	ldr	x1, [x1, #16]
 df0:	str	w0, [x20, #112]
 df4:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 df8:	add	x0, x0, #0x0
 dfc:	cmp	x1, x0
 e00:	b.eq	cc0 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x90>  // b.none
 e04:	b	cb4 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x84>

0000000000000e08 <_ZN11__sanitizer14ThreadRegistry11StartThreadEjybPv>:
 e08:	stp	x19, x20, [sp, #-64]!
 e0c:	mov	x19, x0
 e10:	mov	w20, w1
 e14:	stp	x23, x24, [sp, #32]
 e18:	add	x24, x0, #0x18
 e1c:	and	w23, w3, #0xff
 e20:	mov	x0, x24
 e24:	stp	x21, x22, [sp, #16]
 e28:	mov	x22, x4
 e2c:	mov	x21, x2
 e30:	str	x30, [sp, #48]
 e34:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 e38:	ldr	x0, [x19, #144]
 e3c:	mov	w3, w20
 e40:	ldr	w4, [x19, #112]
 e44:	add	x0, x0, #0x1
 e48:	str	x0, [x19, #144]
 e4c:	cmp	x4, w20, uxtw
 e50:	b.ls	ecc <_ZN11__sanitizer14ThreadRegistry11StartThreadEjybPv+0xc4>  // b.plast
 e54:	ldr	x0, [x19, #152]
 e58:	ldr	x0, [x0, x3, lsl #3]
 e5c:	cbz	x0, ee4 <_ZN11__sanitizer14ThreadRegistry11StartThreadEjybPv+0xdc>
 e60:	ldr	w4, [x0, #112]
 e64:	cmp	x4, #0x1
 e68:	b.ne	f04 <_ZN11__sanitizer14ThreadRegistry11StartThreadEjybPv+0xfc>  // b.any
 e6c:	ldr	x2, [x0]
 e70:	mov	w3, #0x2                   	// #2
 e74:	adrp	x1, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 e78:	add	x1, x1, #0x0
 e7c:	ldr	x2, [x2, #24]
 e80:	str	x21, [x0, #32]
 e84:	str	w3, [x0, #112]
 e88:	strb	w23, [x0, #117]
 e8c:	cmp	x2, x1
 e90:	b.ne	eac <_ZN11__sanitizer14ThreadRegistry11StartThreadEjybPv+0xa4>  // b.any
 e94:	mov	x0, x24
 e98:	ldp	x21, x22, [sp, #16]
 e9c:	ldp	x23, x24, [sp, #32]
 ea0:	ldr	x30, [sp, #48]
 ea4:	ldp	x19, x20, [sp], #64
 ea8:	b	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 eac:	mov	x1, x22
 eb0:	blr	x2
 eb4:	mov	x0, x24
 eb8:	ldp	x21, x22, [sp, #16]
 ebc:	ldp	x23, x24, [sp, #32]
 ec0:	ldr	x30, [sp, #48]
 ec4:	ldp	x19, x20, [sp], #64
 ec8:	b	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 ecc:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 ed0:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 ed4:	add	x2, x2, #0x0
 ed8:	add	x0, x0, #0x0
 edc:	mov	w1, #0x134                 	// #308
 ee0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 ee4:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 ee8:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 eec:	add	x2, x2, #0x0
 ef0:	add	x0, x0, #0x0
 ef4:	mov	x4, #0x0                   	// #0
 ef8:	mov	x3, #0x0                   	// #0
 efc:	mov	w1, #0x136                 	// #310
 f00:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 f04:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 f08:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 f0c:	add	x2, x2, #0x0
 f10:	add	x0, x0, #0x0
 f14:	mov	x3, #0x1                   	// #1
 f18:	mov	w1, #0x137                 	// #311
 f1c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000f20 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE>:
 f20:	ldr	w2, [x1, #8]
 f24:	cbz	w2, f2c <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0xc>
 f28:	b	2f8 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
 f2c:	ret

0000000000000f30 <_ZN11__sanitizer14ThreadRegistry13QuarantinePopEv>:
 f30:	ldr	x2, [x0, #184]
 f34:	mov	x1, x0
 f38:	mov	x0, #0x0                   	// #0
 f3c:	cbz	x2, f58 <_ZN11__sanitizer14ThreadRegistry13QuarantinePopEv+0x28>
 f40:	ldr	x0, [x1, #192]
 f44:	ldr	x3, [x0, #128]
 f48:	str	x3, [x1, #192]
 f4c:	cbz	x3, f5c <_ZN11__sanitizer14ThreadRegistry13QuarantinePopEv+0x2c>
 f50:	sub	x2, x2, #0x1
 f54:	str	x2, [x1, #184]
 f58:	ret
 f5c:	sub	x2, x2, #0x1
 f60:	str	x2, [x1, #184]
 f64:	str	xzr, [x1, #200]
 f68:	b	f58 <_ZN11__sanitizer14ThreadRegistry13QuarantinePopEv+0x28>

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase6OnDeadEv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase6OnDeadEv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase8OnJoinedEPv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase8OnJoinedEPv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase10OnFinishedEv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase10OnFinishedEv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase9OnStartedEPv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase9OnStartedEPv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase9OnCreatedEPv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase9OnCreatedEPv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase7OnResetEv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase7OnResetEv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase10OnDetachedEPv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase10OnDetachedEPv>:
   0:	ret

sanitizer_tls_get_addr.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer12DTLS_DestroyEv>:
   0:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
   4:	ldr	x0, [x0]
   8:	ldrb	w0, [x0, #121]
   c:	cbz	w0, e4 <_ZN11__sanitizer12DTLS_DestroyEv+0xe4>
  10:	stp	x19, x20, [sp, #-48]!
  14:	mrs	x19, tpidr_el0
  18:	adrp	x20, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
  1c:	ldr	x20, [x20]
  20:	stp	x21, x22, [sp, #16]
  24:	adrp	x21, 0 <_ZN11__sanitizer17current_verbosityE>
  28:	add	x1, x19, x20
  2c:	ldr	x0, [x21]
  30:	ldr	x22, [x19, x20]
  34:	ldr	w0, [x0]
  38:	str	x30, [sp, #32]
  3c:	sxtw	x0, w0
  40:	cmp	x0, #0x1
  44:	b.hi	bc <_ZN11__sanitizer12DTLS_DestroyEv+0xbc>  // b.pmore
  48:	mov	x0, #0xffffffffffffffff    	// #-1
  4c:	str	x0, [x19, x20]
  50:	add	x19, x19, x20
  54:	cbz	x22, ac <_ZN11__sanitizer12DTLS_DestroyEv+0xac>
  58:	ldr	x21, [x21]
  5c:	ldr	x19, [x19, #8]
  60:	ldr	w0, [x21]
  64:	sxtw	x0, w0
  68:	cmp	x0, #0x1
  6c:	b.ls	84 <_ZN11__sanitizer12DTLS_DestroyEv+0x84>  // b.plast
  70:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
  74:	mov	x2, x22
  78:	add	x0, x0, #0x0
  7c:	mov	x1, x19
  80:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  84:	mov	x0, x19
  88:	lsl	x1, x22, #4
  8c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  90:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
  94:	add	x0, x0, #0x0
  98:	ldxr	x1, [x0]
  9c:	sub	x1, x1, #0x1
  a0:	stlxr	w2, x1, [x0]
  a4:	cbnz	w2, 98 <_ZN11__sanitizer12DTLS_DestroyEv+0x98>
  a8:	dmb	ish
  ac:	ldp	x21, x22, [sp, #16]
  b0:	ldr	x30, [sp, #32]
  b4:	ldp	x19, x20, [sp], #48
  b8:	ret
  bc:	mov	x2, x22
  c0:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
  c4:	add	x0, x0, #0x0
  c8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  cc:	ldr	x22, [x19, x20]
  d0:	mov	x0, #0xffffffffffffffff    	// #-1
  d4:	str	x0, [x19, x20]
  d8:	add	x19, x19, x20
  dc:	cbnz	x22, 58 <_ZN11__sanitizer12DTLS_DestroyEv+0x58>
  e0:	b	ac <_ZN11__sanitizer12DTLS_DestroyEv+0xac>
  e4:	ret

00000000000000e8 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm>:
  e8:	adrp	x5, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  ec:	stp	x19, x20, [sp, #-144]!
  f0:	mov	x20, x0
  f4:	ldr	x5, [x5]
  f8:	ldrb	w0, [x5, #121]
  fc:	str	x30, [sp, #80]
 100:	cbz	w0, 2ec <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x204>
 104:	adrp	x19, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 108:	ldr	x19, [x19]
 10c:	stp	x23, x24, [sp, #32]
 110:	mrs	x24, tpidr_el0
 114:	stp	x27, x28, [sp, #64]
 118:	mov	x28, x1
 11c:	add	x1, x24, x19
 120:	ldr	x5, [x24, x19]
 124:	cmn	x5, #0x1
 128:	b.eq	36c <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x284>  // b.none
 12c:	stp	x21, x22, [sp, #16]
 130:	mov	x23, x3
 134:	mov	x22, x2
 138:	ldr	x21, [x20]
 13c:	stp	x25, x26, [sp, #48]
 140:	add	x3, x21, #0x1
 144:	cmp	x5, x3
 148:	b.cc	224 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x13c>  // b.lo, b.ul, b.last
 14c:	ldr	x26, [x1, #8]
 150:	lsl	x21, x21, #4
 154:	ldr	x26, [x26, x21]
 158:	cbnz	x26, 2dc <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x1f4>
 15c:	adrp	x25, 0 <_ZN11__sanitizer17current_verbosityE>
 160:	ldr	x3, [x20, #8]
 164:	ldr	x0, [x25]
 168:	sub	x5, x28, x3
 16c:	str	x5, [sp, #136]
 170:	ldr	w0, [x0]
 174:	sxtw	x0, w0
 178:	cmp	x0, #0x1
 17c:	b.ls	1a8 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0xc0>  // b.plast
 180:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 184:	mov	x4, x28
 188:	ldr	x2, [x20]
 18c:	mov	x1, x20
 190:	ldr	x7, [x0]
 194:	add	x6, sp, #0x88
 198:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 19c:	add	x0, x0, #0x0
 1a0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 1a4:	ldr	x5, [sp, #136]
 1a8:	add	x1, x24, x19
 1ac:	ldr	x0, [x1, #24]
 1b0:	cmp	x0, x5
 1b4:	b.eq	338 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x250>  // b.none
 1b8:	cmp	x23, x5
 1bc:	ccmp	x22, x5, #0x2, hi  // hi = pmore
 1c0:	b.ls	394 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x2ac>  // b.plast
 1c4:	and	x0, x5, #0xfff
 1c8:	cmp	x0, #0x10
 1cc:	ldr	x0, [x25]
 1d0:	b.eq	304 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x21c>  // b.none
 1d4:	ldr	w0, [x0]
 1d8:	sxtw	x0, w0
 1dc:	cmp	x0, #0x1
 1e0:	b.ls	1f4 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x10c>  // b.plast
 1e4:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 1e8:	add	x0, x0, #0x0
 1ec:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 1f0:	ldr	x5, [sp, #136]
 1f4:	add	x19, x24, x19
 1f8:	ldp	x23, x24, [sp, #32]
 1fc:	ldr	x1, [x19, #8]
 200:	ldp	x27, x28, [sp, #64]
 204:	add	x0, x1, x21
 208:	str	x5, [x1, x21]
 20c:	ldp	x21, x22, [sp, #16]
 210:	str	x26, [x0, #8]
 214:	ldp	x25, x26, [sp, #48]
 218:	ldr	x30, [sp, #80]
 21c:	ldp	x19, x20, [sp], #144
 220:	ret
 224:	tst	x3, x21
 228:	b.eq	2fc <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x214>  // b.none
 22c:	clz	x1, x3
 230:	mov	w4, #0x3f                  	// #63
 234:	sub	w4, w4, w1
 238:	mov	x1, #0x1                   	// #1
 23c:	add	w27, w4, #0x1
 240:	lsl	x27, x1, x27
 244:	cmp	x3, x27
 248:	b.cs	478 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x390>  // b.hs, b.nlast
 24c:	lsl	x4, x1, x4
 250:	cmp	x3, x4
 254:	b.ls	494 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x3ac>  // b.plast
 258:	cmp	x27, #0x100
 25c:	mov	x4, #0x100                 	// #256
 260:	csel	x27, x27, x4, cs  // cs = hs, nlast
 264:	adrp	x1, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 268:	mov	w2, #0x0                   	// #0
 26c:	add	x1, x1, #0x0
 270:	lsl	x0, x27, #4
 274:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 278:	adrp	x4, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 27c:	mov	x26, x0
 280:	add	x0, x4, #0x0
 284:	ldxr	x2, [x0]
 288:	add	x1, x2, #0x1
 28c:	stlxr	w3, x1, [x0]
 290:	cbnz	w3, 284 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x19c>
 294:	adrp	x25, 0 <_ZN11__sanitizer17current_verbosityE>
 298:	dmb	ish
 29c:	ldr	x0, [x25]
 2a0:	ldr	w0, [x0]
 2a4:	sxtw	x0, w0
 2a8:	cmp	x0, #0x1
 2ac:	b.hi	378 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x290>  // b.pmore
 2b0:	mov	x0, #0xfffff               	// #1048575
 2b4:	cmp	x2, x0
 2b8:	b.hi	458 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x370>  // b.pmore
 2bc:	ldr	x3, [x24, x19]
 2c0:	add	x5, x24, x19
 2c4:	cbnz	x3, 3c0 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x2d8>
 2c8:	lsl	x21, x21, #4
 2cc:	str	x26, [x5, #8]
 2d0:	str	x27, [x24, x19]
 2d4:	ldr	x26, [x26, x21]
 2d8:	cbz	x26, 15c <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x74>
 2dc:	ldp	x21, x22, [sp, #16]
 2e0:	ldp	x23, x24, [sp, #32]
 2e4:	ldp	x25, x26, [sp, #48]
 2e8:	ldp	x27, x28, [sp, #64]
 2ec:	mov	x0, #0x0                   	// #0
 2f0:	ldr	x30, [sp, #80]
 2f4:	ldp	x19, x20, [sp], #144
 2f8:	ret
 2fc:	mov	x27, x3
 300:	b	258 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x170>
 304:	ldr	w0, [x0]
 308:	ldp	x26, x5, [x5, #-16]
 30c:	str	x5, [sp, #136]
 310:	sxtw	x0, w0
 314:	cmp	x0, #0x1
 318:	b.ls	1f4 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x10c>  // b.plast
 31c:	mov	x1, x5
 320:	mov	x2, x26
 324:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 328:	add	x0, x0, #0x0
 32c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 330:	ldr	x5, [sp, #136]
 334:	b	1f4 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x10c>
 338:	ldr	x0, [x25]
 33c:	ldr	x26, [x1, #16]
 340:	ldr	w0, [x0]
 344:	sxtw	x0, w0
 348:	cmp	x0, #0x1
 34c:	b.ls	1f4 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x10c>  // b.plast
 350:	mov	x1, x5
 354:	mov	x2, x26
 358:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 35c:	add	x0, x0, #0x0
 360:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 364:	ldr	x5, [sp, #136]
 368:	b	1f4 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x10c>
 36c:	ldp	x23, x24, [sp, #32]
 370:	ldp	x27, x28, [sp, #64]
 374:	b	2ec <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x204>
 378:	add	x1, x24, x19
 37c:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 380:	add	x0, x0, #0x0
 384:	str	x2, [sp, #96]
 388:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 38c:	ldr	x2, [sp, #96]
 390:	b	2b0 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x1c8>
 394:	ldr	x0, [x25]
 398:	ldr	w0, [x0]
 39c:	sxtw	x0, w0
 3a0:	cmp	x0, #0x1
 3a4:	b.ls	1f4 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x10c>  // b.plast
 3a8:	mov	x1, x5
 3ac:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 3b0:	add	x0, x0, #0x0
 3b4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 3b8:	ldr	x5, [sp, #136]
 3bc:	b	1f4 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x10c>
 3c0:	ldr	x6, [x5, #8]
 3c4:	lsl	x7, x3, #4
 3c8:	mov	x2, x7
 3cc:	mov	x0, x26
 3d0:	mov	x1, x6
 3d4:	stp	x6, x7, [sp, #96]
 3d8:	stp	x5, x3, [sp, #112]
 3dc:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 3e0:	ldr	x0, [x25]
 3e4:	str	x27, [x24, x19]
 3e8:	ldr	x5, [sp, #112]
 3ec:	ldr	w0, [x0]
 3f0:	ldp	x6, x7, [sp, #96]
 3f4:	str	x26, [x5, #8]
 3f8:	sxtw	x0, w0
 3fc:	cmp	x0, #0x1
 400:	b.hi	438 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x350>  // b.pmore
 404:	mov	x1, x7
 408:	mov	x0, x6
 40c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 410:	adrp	x4, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 414:	add	x4, x4, #0x0
 418:	ldxr	x0, [x4]
 41c:	sub	x0, x0, #0x1
 420:	stlxr	w1, x0, [x4]
 424:	cbnz	w1, 418 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x330>
 428:	add	x0, x24, x19
 42c:	dmb	ish
 430:	ldr	x26, [x0, #8]
 434:	b	150 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x68>
 438:	ldr	x3, [sp, #120]
 43c:	mov	x1, x6
 440:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 444:	add	x0, x0, #0x0
 448:	mov	x2, x3
 44c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 450:	ldp	x6, x7, [sp, #96]
 454:	b	404 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x31c>
 458:	mov	x3, x2
 45c:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 460:	adrp	x2, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 464:	add	x0, x0, #0x0
 468:	add	x2, x2, #0x0
 46c:	mov	x4, #0x100000              	// #1048576
 470:	mov	w1, #0x3c                  	// #60
 474:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 478:	adrp	x2, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 47c:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 480:	mov	x4, x27
 484:	add	x2, x2, #0x0
 488:	add	x0, x0, #0x0
 48c:	mov	w1, #0x17b                 	// #379
 490:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 494:	adrp	x2, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 498:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 49c:	add	x2, x2, #0x0
 4a0:	add	x0, x0, #0x0
 4a4:	mov	w1, #0x17c                 	// #380
 4a8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 4ac:	nop

00000000000004b0 <_ZN11__sanitizer21DTLS_on_libc_memalignEPvm>:
 4b0:	adrp	x3, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 4b4:	stp	x19, x20, [sp, #-32]!
 4b8:	mov	x19, x0
 4bc:	ldr	x3, [x3]
 4c0:	ldrb	w0, [x3, #121]
 4c4:	str	x30, [sp, #16]
 4c8:	cbz	w0, 4fc <_ZN11__sanitizer21DTLS_on_libc_memalignEPvm+0x4c>
 4cc:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 4d0:	mov	x20, x1
 4d4:	ldr	x0, [x0]
 4d8:	ldr	w0, [x0]
 4dc:	sxtw	x0, w0
 4e0:	cmp	x0, #0x1
 4e4:	b.hi	508 <_ZN11__sanitizer21DTLS_on_libc_memalignEPvm+0x58>  // b.pmore
 4e8:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 4ec:	ldr	x0, [x0]
 4f0:	mrs	x1, tpidr_el0
 4f4:	add	x0, x1, x0
 4f8:	stp	x20, x19, [x0, #16]
 4fc:	ldr	x30, [sp, #16]
 500:	ldp	x19, x20, [sp], #32
 504:	ret
 508:	mov	x2, x1
 50c:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 510:	mov	x1, x19
 514:	add	x0, x0, #0x0
 518:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 51c:	b	4e8 <_ZN11__sanitizer21DTLS_on_libc_memalignEPvm+0x38>

0000000000000520 <_ZN11__sanitizer8DTLS_GetEv>:
 520:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 524:	ldr	x0, [x0]
 528:	mrs	x1, tpidr_el0
 52c:	add	x0, x1, x0
 530:	ret
 534:	nop

0000000000000538 <_ZN11__sanitizer17DTLSInDestructionEPNS_4DTLSE>:
 538:	ldr	x0, [x0]
 53c:	cmn	x0, #0x1
 540:	cset	w0, eq  // eq = none
 544:	ret

sanitizer_unwind_linux_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x1
   8:	ldr	w4, [x1, #8]
   c:	ldr	x1, [x1]
  10:	stp	x21, x30, [sp, #16]
  14:	ldr	w3, [x1, #8]
  18:	cmp	x3, x4
  1c:	b.cs	94 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv+0x94>  // b.hs, b.nlast
  20:	adrp	x21, 0 <_ZN11__sanitizer14PageSizeCachedE>
  24:	bl	0 <_Unwind_GetIP>
  28:	mov	x20, x0
  2c:	ldr	x21, [x21]
  30:	ldr	x0, [x21]
  34:	cbz	x0, 74 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv+0x74>
  38:	cmp	x0, x20
  3c:	b.hi	84 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv+0x84>  // b.pmore
  40:	ldr	x1, [x19]
  44:	ldr	w3, [x19, #8]
  48:	ldr	w0, [x1, #8]
  4c:	add	w2, w0, #0x1
  50:	str	w2, [x1, #8]
  54:	add	x0, x1, w0, uxtw #3
  58:	cmp	w2, w3
  5c:	str	x20, [x0, #16]
  60:	b.eq	84 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv+0x84>  // b.none
  64:	mov	w0, #0x0                   	// #0
  68:	ldp	x21, x30, [sp, #16]
  6c:	ldp	x19, x20, [sp], #32
  70:	ret
  74:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  78:	str	x0, [x21]
  7c:	cmp	x0, x20
  80:	b.ls	40 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv+0x40>  // b.plast
  84:	mov	w0, #0x4                   	// #4
  88:	ldp	x21, x30, [sp, #16]
  8c:	ldp	x19, x20, [sp], #32
  90:	ret
  94:	adrp	x2, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
  98:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
  9c:	add	x2, x2, #0x0
  a0:	add	x0, x0, #0x0
  a4:	mov	w1, #0x6d                  	// #109
  a8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  ac:	nop

00000000000000b0 <_ZN11__sanitizer12Unwind_GetIPEP15_Unwind_Context>:
  b0:	b	0 <_Unwind_GetIP>
  b4:	nop

00000000000000b8 <_ZN11__sanitizer18BufferedStackTrace15SlowUnwindStackEmj>:
  b8:	stp	x19, x20, [sp, #-48]!
  bc:	cmp	w2, #0x1
  c0:	str	x30, [sp, #16]
  c4:	b.ls	134 <_ZN11__sanitizer18BufferedStackTrace15SlowUnwindStackEmj+0x7c>  // b.plast
  c8:	mov	x19, x0
  cc:	add	w2, w2, #0x1
  d0:	cmp	w2, #0x100
  d4:	mov	x20, x1
  d8:	mov	w1, #0x100                 	// #256
  dc:	csel	w2, w2, w1, ls  // ls = plast
  e0:	str	wzr, [x19, #8]
  e4:	add	x1, sp, #0x20
  e8:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
  ec:	add	x0, x0, #0x0
  f0:	str	x19, [sp, #32]
  f4:	str	w2, [sp, #40]
  f8:	bl	0 <_Unwind_Backtrace>
  fc:	mov	x1, x20
 100:	mov	x0, x19
 104:	bl	0 <_ZN11__sanitizer18BufferedStackTrace15LocatePcInTraceEm>
 108:	mov	x1, x0
 10c:	cbnz	x0, 11c <_ZN11__sanitizer18BufferedStackTrace15SlowUnwindStackEmj+0x64>
 110:	ldr	w0, [x19, #8]
 114:	cmp	w0, #0x1
 118:	cset	x1, hi  // hi = pmore
 11c:	mov	x0, x19
 120:	bl	0 <_ZN11__sanitizer18BufferedStackTrace14PopStackFramesEm>
 124:	ldr	x30, [sp, #16]
 128:	str	x20, [x19, #16]
 12c:	ldp	x19, x20, [sp], #48
 130:	ret
 134:	mov	w3, w2
 138:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 13c:	adrp	x2, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 140:	add	x0, x0, #0x0
 144:	add	x2, x2, #0x0
 148:	mov	x4, #0x2                   	// #2
 14c:	mov	w1, #0x7a                  	// #122
 150:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 154:	nop

0000000000000158 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj>:
 158:	stp	x19, x20, [sp, #-96]!
 15c:	cmp	w3, #0x1
 160:	stp	x23, x24, [sp, #32]
 164:	mov	w24, w3
 168:	str	x30, [sp, #80]
 16c:	b.ls	328 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x1d0>  // b.plast
 170:	stp	x25, x26, [sp, #48]
 174:	adrp	x25, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 178:	mov	x19, x2
 17c:	ldr	x2, [x25]
 180:	add	x4, x25, #0x0
 184:	cbz	x2, 354 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x1fc>
 188:	stp	x21, x22, [sp, #16]
 18c:	mov	x21, x0
 190:	ldr	x0, [x4, #8]
 194:	stp	x27, x28, [sp, #64]
 198:	blr	x0
 19c:	mov	x23, x0
 1a0:	cbz	x0, 36c <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x214>
 1a4:	adrp	x26, 0 <_ZN11__sanitizer14PageSizeCachedE>
 1a8:	ldr	x20, [x26]
 1ac:	ldr	x3, [x20]
 1b0:	cbz	x3, 2b8 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x160>
 1b4:	sub	x0, x3, #0x1
 1b8:	tst	x0, x3
 1bc:	b.ne	38c <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x234>  // b.any
 1c0:	neg	x20, x3
 1c4:	mov	x27, #0x17ff                	// #6143
 1c8:	add	x3, x3, x27
 1cc:	mov	w2, #0x0                   	// #0
 1d0:	and	x20, x3, x20
 1d4:	adrp	x28, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 1d8:	mov	x0, x20
 1dc:	add	x1, x28, #0x0
 1e0:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 1e4:	mov	x22, x0
 1e8:	mov	x2, #0x0                   	// #0
 1ec:	mov	x1, #0x0                   	// #0
 1f0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 1f4:	mov	x1, #0x0                   	// #0
 1f8:	mov	x0, #0x0                   	// #0
 1fc:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 200:	cmp	x20, x27
 204:	b.ls	2c8 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x170>  // b.plast
 208:	mov	x2, #0x1800                	// #6144
 20c:	mov	w1, #0x0                   	// #0
 210:	mov	x0, x22
 214:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 218:	ldr	x6, [x25]
 21c:	add	x25, x25, #0x0
 220:	mov	x1, x19
 224:	mov	x5, x24
 228:	mov	x3, x22
 22c:	mov	x2, x23
 230:	mov	x4, #0x0                   	// #0
 234:	mov	x0, #0x0                   	// #0
 238:	blr	x6
 23c:	mov	x19, x0
 240:	ldr	x1, [x25, #16]
 244:	mov	x0, x23
 248:	blr	x1
 24c:	tbnz	x19, #63, 294 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x13c>
 250:	cmp	x19, #0x100
 254:	b.gt	3a8 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x250>
 258:	str	wzr, [x21, #8]
 25c:	cbz	x19, 294 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x13c>
 260:	mov	x3, x22
 264:	add	x0, x21, #0x10
 268:	mov	x1, #0x0                   	// #0
 26c:	nop
 270:	ldr	x2, [x3], #24
 274:	add	x2, x2, #0x2
 278:	str	x2, [x0, x1, lsl #3]
 27c:	add	x1, x1, #0x1
 280:	cmp	x19, x1
 284:	b.gt	270 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x118>
 288:	cmp	x19, #0x0
 28c:	csinc	w19, w19, wzr, gt
 290:	str	w19, [x21, #8]
 294:	mov	x1, x20
 298:	mov	x0, x22
 29c:	ldp	x21, x22, [sp, #16]
 2a0:	ldp	x23, x24, [sp, #32]
 2a4:	ldp	x25, x26, [sp, #48]
 2a8:	ldp	x27, x28, [sp, #64]
 2ac:	ldr	x30, [sp, #80]
 2b0:	ldp	x19, x20, [sp], #96
 2b4:	b	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 2b8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 2bc:	mov	x3, x0
 2c0:	str	x0, [x20]
 2c4:	b	1b4 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x5c>
 2c8:	ldr	x26, [x26]
 2cc:	ldr	x0, [x26]
 2d0:	cbz	x0, 39c <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x244>
 2d4:	sub	x1, x0, #0x1
 2d8:	tst	x1, x0
 2dc:	b.ne	38c <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x234>  // b.any
 2e0:	mov	x1, #0x17ff                	// #6143
 2e4:	add	x26, x0, x1
 2e8:	neg	x0, x0
 2ec:	add	x1, x28, #0x0
 2f0:	and	x26, x26, x0
 2f4:	mov	w2, #0x0                   	// #0
 2f8:	mov	x0, x26
 2fc:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 300:	mov	x2, #0x0                   	// #0
 304:	mov	x27, x0
 308:	mov	x1, x22
 30c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 310:	mov	x1, x20
 314:	mov	x0, x22
 318:	mov	x20, x26
 31c:	mov	x22, x27
 320:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 324:	b	208 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0xb0>
 328:	adrp	x2, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 32c:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 330:	mov	x3, x24
 334:	add	x2, x2, #0x0
 338:	add	x0, x0, #0x0
 33c:	mov	x4, #0x2                   	// #2
 340:	mov	w1, #0x94                  	// #148
 344:	stp	x21, x22, [sp, #16]
 348:	stp	x25, x26, [sp, #48]
 34c:	stp	x27, x28, [sp, #64]
 350:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 354:	ldp	x23, x24, [sp, #32]
 358:	mov	w2, w3
 35c:	ldp	x25, x26, [sp, #48]
 360:	ldr	x30, [sp, #80]
 364:	ldp	x19, x20, [sp], #96
 368:	b	b8 <_ZN11__sanitizer18BufferedStackTrace15SlowUnwindStackEmj>
 36c:	adrp	x2, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 370:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 374:	add	x2, x2, #0x0
 378:	add	x0, x0, #0x0
 37c:	mov	x4, #0x0                   	// #0
 380:	mov	x3, #0x0                   	// #0
 384:	mov	w1, #0x9b                  	// #155
 388:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 38c:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 390:	add	x0, x0, #0x0
 394:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 398:	bl	0 <_ZN11__sanitizer3DieEv>
 39c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 3a0:	str	x0, [x26]
 3a4:	b	2d4 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x17c>
 3a8:	adrp	x2, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 3ac:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 3b0:	mov	x3, x19
 3b4:	add	x2, x2, #0x0
 3b8:	add	x0, x0, #0x0
 3bc:	mov	x4, #0x100                 	// #256
 3c0:	mov	w1, #0xa3                  	// #163
 3c4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

sanitizer_unwind_win.o:     file format elf64-littleaarch64


sanitizer_win.o:     file format elf64-littleaarch64


interception_linux.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	mov	x19, x1
   8:	mov	x20, x0
   c:	mov	x1, x0
  10:	mov	x0, #0xffffffffffffffff    	// #-1
  14:	stp	x21, x22, [sp, #16]
  18:	mov	x22, x2
  1c:	mov	x21, x3
  20:	str	x30, [sp, #32]
  24:	bl	0 <dlsym>
  28:	str	x0, [x19]
  2c:	cbz	x0, 48 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm+0x48>
  30:	cmp	x22, x21
  34:	cset	w0, eq  // eq = none
  38:	ldp	x21, x22, [sp, #16]
  3c:	ldr	x30, [sp, #32]
  40:	ldp	x19, x20, [sp], #48
  44:	ret
  48:	mov	x1, x20
  4c:	bl	0 <dlsym>
  50:	str	x0, [x19]
  54:	cmp	x22, x21
  58:	cset	w0, eq  // eq = none
  5c:	ldp	x21, x22, [sp, #16]
  60:	ldr	x30, [sp, #32]
  64:	ldp	x19, x20, [sp], #48
  68:	ret
  6c:	nop

0000000000000070 <_ZN14__interception14GetFuncAddrVerEPKcS1_>:
  70:	mov	x2, x1
  74:	mov	x1, x0
  78:	mov	x0, #0xffffffffffffffff    	// #-1
  7c:	b	0 <dlvsym>

interception_mac.o:     file format elf64-littleaarch64


interception_type_test.o:     file format elf64-littleaarch64


interception_win.o:     file format elf64-littleaarch64


atomic.o:     file format elf64-littleaarch64


bridge.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__asan_internal_memcpy>:
   0:	b	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
   4:	nop

0000000000000008 <__asan_internal_memset>:
   8:	b	0 <_ZN11__sanitizer15internal_memsetEPvim>
   c:	nop

0000000000000010 <__asan_internal_memcmp>:
  10:	b	0 <_ZN11__sanitizer15internal_memcmpEPKvS1_m>
  14:	nop

0000000000000018 <__asan_internal_strcmp>:
  18:	b	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  1c:	nop

0000000000000020 <__asan_internal_strncmp>:
  20:	b	0 <_ZN11__sanitizer16internal_strncmpEPKcS1_m>
  24:	nop

0000000000000028 <__asan_internal_strlen>:
  28:	b	0 <_ZN11__sanitizer15internal_strlenEPKc>
  2c:	nop

0000000000000030 <__asan_internal_strnlen>:
  30:	b	0 <_ZN11__sanitizer16internal_strnlenEPKcm>

cp-demangle.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <d_make_comp>:
       0:	sub	w5, w1, #0x1
       4:	mov	x4, x0
       8:	cmp	w5, #0x4f
       c:	b.ls	18 <d_make_comp+0x18>  // b.plast
      10:	mov	x0, #0x0                   	// #0
      14:	ret
      18:	adrp	x0, 0 <d_make_comp>
      1c:	add	x0, x0, #0x0
      20:	ldrb	w0, [x0, w5, uxtw]
      24:	adr	x5, 30 <d_make_comp+0x30>
      28:	add	x0, x5, w0, sxtb #2
      2c:	br	x0
      30:	cbz	x3, 10 <d_make_comp+0x10>
      34:	ldp	w0, w5, [x4, #40]
      38:	cmp	w0, w5
      3c:	b.ge	10 <d_make_comp+0x10>  // b.tcont
      40:	mov	w5, #0x18                  	// #24
      44:	add	w7, w0, #0x1
      48:	ldr	x6, [x4, #32]
      4c:	smull	x5, w0, w5
      50:	add	x0, x6, x5
      54:	str	wzr, [x0, #4]
      58:	str	w7, [x4, #40]
      5c:	str	w1, [x6, x5]
      60:	stp	x2, x3, [x0, #8]
      64:	ret
      68:	cbnz	x2, 34 <d_make_comp+0x34>
      6c:	mov	x0, #0x0                   	// #0
      70:	b	14 <d_make_comp+0x14>
      74:	cmp	x2, #0x0
      78:	ccmp	x3, #0x0, #0x4, ne  // ne = any
      7c:	b.ne	34 <d_make_comp+0x34>  // b.any
      80:	mov	x0, #0x0                   	// #0
      84:	b	14 <d_make_comp+0x14>

0000000000000088 <d_ref_qualifier>:
      88:	ldr	x3, [x0, #24]
      8c:	mov	x2, x1
      90:	mov	w4, #0x4f                  	// #79
      94:	ldrb	w1, [x3]
      98:	cmp	w1, #0x52
      9c:	ccmp	w1, w4, #0x4, ne  // ne = any
      a0:	b.ne	cc <d_ref_qualifier+0x44>  // b.any
      a4:	ldr	w5, [x0, #72]
      a8:	cmp	w1, #0x52
      ac:	mov	w1, #0x20                  	// #32
      b0:	add	w4, w5, #0x3
      b4:	b.eq	d4 <d_ref_qualifier+0x4c>  // b.none
      b8:	add	x3, x3, #0x1
      bc:	str	x3, [x0, #24]
      c0:	str	w4, [x0, #72]
      c4:	mov	x3, #0x0                   	// #0
      c8:	b	0 <d_make_comp>
      cc:	mov	x0, x2
      d0:	ret
      d4:	add	w4, w5, #0x2
      d8:	add	x3, x3, #0x1
      dc:	str	x3, [x0, #24]
      e0:	mov	w1, #0x1f                  	// #31
      e4:	str	w4, [x0, #72]
      e8:	mov	x3, #0x0                   	// #0
      ec:	b	0 <d_make_comp>

00000000000000f0 <d_count_templates_scopes>:
      f0:	cbz	x1, 1d0 <d_count_templates_scopes+0xe0>
      f4:	stp	x29, x30, [sp, #-32]!
      f8:	mov	x29, sp
      fc:	stp	x19, x20, [sp, #16]
     100:	mov	x20, x0
     104:	mov	x19, x1
     108:	adrp	x0, 0 <d_make_comp>
     10c:	add	x0, x0, #0x0
     110:	ldr	w1, [x19]
     114:	sub	w1, w1, #0x1
     118:	cmp	w1, #0x4f
     11c:	b.ls	12c <d_count_templates_scopes+0x3c>  // b.plast
     120:	ldp	x19, x20, [sp, #16]
     124:	ldp	x29, x30, [sp], #32
     128:	ret
     12c:	ldrb	w1, [x0, w1, uxtw]
     130:	adr	x2, 13c <d_count_templates_scopes+0x4c>
     134:	add	x1, x2, w1, sxtb #2
     138:	br	x1
     13c:	ldr	x0, [x19, #8]
     140:	ldr	w0, [x0]
     144:	cmp	w0, #0x5
     148:	b.ne	158 <d_count_templates_scopes+0x68>  // b.any
     14c:	ldr	w0, [x20, #348]
     150:	add	w0, w0, #0x1
     154:	str	w0, [x20, #348]
     158:	ldr	w0, [x20, #308]
     15c:	cmp	w0, #0x800
     160:	b.gt	120 <d_count_templates_scopes+0x30>
     164:	ldr	x1, [x19, #8]
     168:	add	w0, w0, #0x1
     16c:	str	w0, [x20, #308]
     170:	mov	x0, x20
     174:	bl	f0 <d_count_templates_scopes>
     178:	ldr	x1, [x19, #16]
     17c:	mov	x0, x20
     180:	bl	f0 <d_count_templates_scopes>
     184:	ldr	w0, [x20, #308]
     188:	sub	w0, w0, #0x1
     18c:	str	w0, [x20, #308]
     190:	ldp	x19, x20, [sp, #16]
     194:	ldp	x29, x30, [sp], #32
     198:	ret
     19c:	ldr	x19, [x19, #8]
     1a0:	cbnz	x19, 110 <d_count_templates_scopes+0x20>
     1a4:	b	120 <d_count_templates_scopes+0x30>
     1a8:	ldr	x19, [x19, #16]
     1ac:	cbnz	x19, 110 <d_count_templates_scopes+0x20>
     1b0:	b	120 <d_count_templates_scopes+0x30>
     1b4:	ldr	w0, [x20, #364]
     1b8:	add	w0, w0, #0x1
     1bc:	str	w0, [x20, #364]
     1c0:	ldr	w0, [x20, #308]
     1c4:	cmp	w0, #0x800
     1c8:	b.gt	120 <d_count_templates_scopes+0x30>
     1cc:	b	164 <d_count_templates_scopes+0x74>
     1d0:	ret
     1d4:	nop

00000000000001d8 <d_append_buffer>:
     1d8:	cbz	x2, 278 <d_append_buffer+0xa0>
     1dc:	stp	x29, x30, [sp, #-48]!
     1e0:	mov	x29, sp
     1e4:	stp	x19, x20, [sp, #16]
     1e8:	mov	x20, x1
     1ec:	mov	x19, x0
     1f0:	stp	x21, x22, [sp, #32]
     1f4:	add	x22, x1, x2
     1f8:	ldr	x1, [x0, #256]
     1fc:	b	220 <d_append_buffer+0x48>
     200:	mov	x0, x1
     204:	add	x1, x1, #0x1
     208:	str	x1, [x19, #256]
     20c:	add	x20, x20, #0x1
     210:	cmp	x20, x22
     214:	strb	w21, [x19, x0]
     218:	strb	w21, [x19, #264]
     21c:	b.eq	268 <d_append_buffer+0x90>  // b.none
     220:	ldrb	w21, [x20]
     224:	cmp	x1, #0xff
     228:	b.ne	200 <d_append_buffer+0x28>  // b.any
     22c:	ldp	x3, x2, [x19, #272]
     230:	strb	wzr, [x19, #255]
     234:	mov	x0, x19
     238:	add	x20, x20, #0x1
     23c:	blr	x3
     240:	ldr	x2, [x19, #320]
     244:	mov	x0, #0x0                   	// #0
     248:	mov	x1, #0x1                   	// #1
     24c:	str	x1, [x19, #256]
     250:	add	x2, x2, x1
     254:	str	x2, [x19, #320]
     258:	strb	w21, [x19, x0]
     25c:	cmp	x20, x22
     260:	strb	w21, [x19, #264]
     264:	b.ne	220 <d_append_buffer+0x48>  // b.any
     268:	ldp	x19, x20, [sp, #16]
     26c:	ldp	x21, x22, [sp, #32]
     270:	ldp	x29, x30, [sp], #48
     274:	ret
     278:	ret
     27c:	nop

0000000000000280 <d_number.isra.0>:
     280:	ldr	x3, [x0]
     284:	mov	x6, x0
     288:	ldrb	w4, [x3]
     28c:	cmp	w4, #0x6e
     290:	b.eq	31c <d_number.isra.0+0x9c>  // b.none
     294:	sub	w0, w4, #0x30
     298:	and	w0, w0, #0xff
     29c:	cmp	w0, #0x9
     2a0:	b.hi	344 <d_number.isra.0+0xc4>  // b.pmore
     2a4:	mov	w9, #0x0                   	// #0
     2a8:	mov	w8, #0xcccd                	// #52429
     2ac:	add	x3, x3, #0x1
     2b0:	mov	w0, #0x0                   	// #0
     2b4:	mov	w7, #0x7fffffff            	// #2147483647
     2b8:	movk	w8, #0xcccc, lsl #16
     2bc:	b	2d0 <d_number.isra.0+0x50>
     2c0:	umull	x1, w1, w8
     2c4:	lsr	x1, x1, #35
     2c8:	cmp	w1, w0
     2cc:	b.lt	314 <d_number.isra.0+0x94>  // b.tstop
     2d0:	str	x3, [x6]
     2d4:	add	w0, w0, w0, lsl #2
     2d8:	add	x3, x3, #0x1
     2dc:	ldurb	w1, [x3, #-1]
     2e0:	add	w5, w4, w0, lsl #1
     2e4:	sub	w0, w5, #0x30
     2e8:	sub	w2, w1, #0x30
     2ec:	mov	w4, w1
     2f0:	sub	w1, w7, w2
     2f4:	and	w2, w2, #0xff
     2f8:	cmp	w2, #0x9
     2fc:	b.ls	2c0 <d_number.isra.0+0x40>  // b.plast
     300:	cmp	w9, #0x0
     304:	mov	w1, #0x30                  	// #48
     308:	sub	w5, w1, w5
     30c:	csel	w0, w5, w0, ne  // ne = any
     310:	ret
     314:	mov	w0, #0xffffffff            	// #-1
     318:	ret
     31c:	add	x1, x3, #0x1
     320:	str	x1, [x0]
     324:	ldrb	w4, [x3, #1]
     328:	sub	w0, w4, #0x30
     32c:	and	w0, w0, #0xff
     330:	cmp	w0, #0x9
     334:	b.hi	344 <d_number.isra.0+0xc4>  // b.pmore
     338:	mov	x3, x1
     33c:	mov	w9, #0x1                   	// #1
     340:	b	2a8 <d_number.isra.0+0x28>
     344:	mov	w0, #0x0                   	// #0
     348:	ret
     34c:	nop

0000000000000350 <d_number_component>:
     350:	mov	x1, x0
     354:	ldr	w0, [x0, #40]
     358:	ldr	w2, [x1, #44]
     35c:	cmp	w0, w2
     360:	b.ge	3ac <d_number_component+0x5c>  // b.tcont
     364:	stp	x29, x30, [sp, #-16]!
     368:	mov	w2, #0x18                  	// #24
     36c:	add	w5, w0, #0x1
     370:	mov	x29, sp
     374:	ldr	x3, [x1, #32]
     378:	smull	x2, w0, w2
     37c:	mov	w4, #0x42                  	// #66
     380:	add	x0, x1, #0x18
     384:	add	x10, x3, x2
     388:	str	wzr, [x10, #4]
     38c:	str	w5, [x1, #40]
     390:	str	w4, [x3, x2]
     394:	bl	280 <d_number.isra.0>
     398:	sxtw	x0, w0
     39c:	str	x0, [x10, #8]
     3a0:	mov	x0, x10
     3a4:	ldp	x29, x30, [sp], #16
     3a8:	ret
     3ac:	mov	x10, #0x0                   	// #0
     3b0:	mov	x0, x10
     3b4:	ret

00000000000003b8 <d_compact_number>:
     3b8:	ldr	x1, [x0, #24]
     3bc:	mov	x10, x0
     3c0:	ldrb	w0, [x1]
     3c4:	cmp	w0, #0x5f
     3c8:	b.eq	40c <d_compact_number+0x54>  // b.none
     3cc:	cmp	w0, #0x6e
     3d0:	b.eq	424 <d_compact_number+0x6c>  // b.none
     3d4:	stp	x29, x30, [sp, #-16]!
     3d8:	add	x0, x10, #0x18
     3dc:	mov	x29, sp
     3e0:	bl	280 <d_number.isra.0>
     3e4:	adds	w0, w0, #0x1
     3e8:	b.mi	41c <d_compact_number+0x64>  // b.first
     3ec:	ldr	x1, [x10, #24]
     3f0:	ldrb	w2, [x1]
     3f4:	cmp	w2, #0x5f
     3f8:	b.ne	41c <d_compact_number+0x64>  // b.any
     3fc:	add	x1, x1, #0x1
     400:	str	x1, [x10, #24]
     404:	ldp	x29, x30, [sp], #16
     408:	ret
     40c:	add	x1, x1, #0x1
     410:	mov	w0, #0x0                   	// #0
     414:	str	x1, [x10, #24]
     418:	ret
     41c:	mov	w0, #0xffffffff            	// #-1
     420:	b	404 <d_compact_number+0x4c>
     424:	mov	w0, #0xffffffff            	// #-1
     428:	ret
     42c:	nop

0000000000000430 <d_template_param>:
     430:	ldr	x1, [x0, #24]
     434:	ldrb	w2, [x1]
     438:	cmp	w2, #0x54
     43c:	b.ne	4a8 <d_template_param+0x78>  // b.any
     440:	stp	x29, x30, [sp, #-16]!
     444:	add	x1, x1, #0x1
     448:	mov	x11, x0
     44c:	mov	x29, sp
     450:	str	x1, [x0, #24]
     454:	bl	3b8 <d_compact_number>
     458:	tbnz	w0, #31, 49c <d_template_param+0x6c>
     45c:	ldp	w1, w2, [x11, #40]
     460:	cmp	w1, w2
     464:	b.ge	49c <d_template_param+0x6c>  // b.tcont
     468:	mov	w2, #0x18                  	// #24
     46c:	add	w5, w1, #0x1
     470:	ldr	x3, [x11, #32]
     474:	smull	x2, w1, w2
     478:	sxtw	x1, w0
     47c:	mov	w4, #0x5                   	// #5
     480:	add	x0, x3, x2
     484:	str	wzr, [x0, #4]
     488:	str	w5, [x11, #40]
     48c:	str	w4, [x3, x2]
     490:	str	x1, [x0, #8]
     494:	ldp	x29, x30, [sp], #16
     498:	ret
     49c:	mov	x0, #0x0                   	// #0
     4a0:	ldp	x29, x30, [sp], #16
     4a4:	ret
     4a8:	mov	x0, #0x0                   	// #0
     4ac:	ret

00000000000004b0 <d_call_offset>:
     4b0:	mov	x10, x0
     4b4:	cbnz	w1, 4d0 <d_call_offset+0x20>
     4b8:	ldr	x0, [x0, #24]
     4bc:	ldrb	w1, [x0]
     4c0:	cbz	w1, 510 <d_call_offset+0x60>
     4c4:	add	x1, x0, #0x1
     4c8:	str	x1, [x10, #24]
     4cc:	ldrb	w1, [x0]
     4d0:	stp	x29, x30, [sp, #-16]!
     4d4:	cmp	w1, #0x68
     4d8:	mov	x29, sp
     4dc:	b.eq	54c <d_call_offset+0x9c>  // b.none
     4e0:	cmp	w1, #0x76
     4e4:	b.ne	504 <d_call_offset+0x54>  // b.any
     4e8:	add	x11, x10, #0x18
     4ec:	mov	x0, x11
     4f0:	bl	280 <d_number.isra.0>
     4f4:	ldr	x0, [x10, #24]
     4f8:	ldrb	w1, [x0]
     4fc:	cmp	w1, #0x5f
     500:	b.eq	518 <d_call_offset+0x68>  // b.none
     504:	mov	w0, #0x0                   	// #0
     508:	ldp	x29, x30, [sp], #16
     50c:	ret
     510:	mov	w0, #0x0                   	// #0
     514:	ret
     518:	add	x0, x0, #0x1
     51c:	str	x0, [x10, #24]
     520:	mov	x0, x11
     524:	bl	280 <d_number.isra.0>
     528:	ldr	x0, [x10, #24]
     52c:	ldrb	w1, [x0]
     530:	cmp	w1, #0x5f
     534:	b.ne	504 <d_call_offset+0x54>  // b.any
     538:	add	x1, x0, #0x1
     53c:	str	x1, [x10, #24]
     540:	mov	w0, #0x1                   	// #1
     544:	ldp	x29, x30, [sp], #16
     548:	ret
     54c:	add	x0, x10, #0x18
     550:	bl	280 <d_number.isra.0>
     554:	b	528 <d_call_offset+0x78>

0000000000000558 <next_is_type_qual.isra.0>:
     558:	mov	x2, x0
     55c:	mov	w3, #0x56                  	// #86
     560:	mov	w0, #0x4b                  	// #75
     564:	ldrb	w1, [x2]
     568:	cmp	w1, #0x72
     56c:	ccmp	w1, w3, #0x4, ne  // ne = any
     570:	ccmp	w1, w0, #0x4, ne  // ne = any
     574:	mov	w0, #0x1                   	// #1
     578:	b.eq	588 <next_is_type_qual.isra.0+0x30>  // b.none
     57c:	cmp	w1, #0x44
     580:	mov	w0, #0x0                   	// #0
     584:	b.eq	58c <next_is_type_qual.isra.0+0x34>  // b.none
     588:	ret
     58c:	ldrb	w0, [x2, #1]
     590:	and	w1, w0, #0xffffffdf
     594:	sub	w0, w0, #0x77
     598:	cmp	w1, #0x4f
     59c:	and	w0, w0, #0xff
     5a0:	ccmp	w0, #0x1, #0x0, ne  // ne = any
     5a4:	cset	w0, ls  // ls = plast
     5a8:	ret
     5ac:	nop

00000000000005b0 <d_discriminator>:
     5b0:	ldr	x1, [x0, #24]
     5b4:	mov	x10, x0
     5b8:	ldrb	w0, [x1]
     5bc:	cmp	w0, #0x5f
     5c0:	b.eq	5cc <d_discriminator+0x1c>  // b.none
     5c4:	mov	w0, #0x1                   	// #1
     5c8:	ret
     5cc:	stp	x29, x30, [sp, #-16]!
     5d0:	add	x0, x1, #0x1
     5d4:	mov	x29, sp
     5d8:	str	x0, [x10, #24]
     5dc:	ldrb	w0, [x1, #1]
     5e0:	cmp	w0, #0x5f
     5e4:	b.eq	608 <d_discriminator+0x58>  // b.none
     5e8:	add	x0, x10, #0x18
     5ec:	bl	280 <d_number.isra.0>
     5f0:	mov	w1, w0
     5f4:	mov	w0, #0x0                   	// #0
     5f8:	tbnz	w1, #31, 600 <d_discriminator+0x50>
     5fc:	mov	w0, #0x1                   	// #1
     600:	ldp	x29, x30, [sp], #16
     604:	ret
     608:	mov	x0, x10
     60c:	add	x1, x1, #0x2
     610:	str	x1, [x0, #24]!
     614:	bl	280 <d_number.isra.0>
     618:	tbnz	w0, #31, 648 <d_discriminator+0x98>
     61c:	cmp	w0, #0x9
     620:	b.le	5fc <d_discriminator+0x4c>
     624:	ldr	x1, [x10, #24]
     628:	mov	w0, #0x0                   	// #0
     62c:	ldrb	w2, [x1]
     630:	cmp	w2, #0x5f
     634:	b.ne	600 <d_discriminator+0x50>  // b.any
     638:	add	x1, x1, #0x1
     63c:	mov	w0, #0x1                   	// #1
     640:	str	x1, [x10, #24]
     644:	b	600 <d_discriminator+0x50>
     648:	mov	w0, #0x0                   	// #0
     64c:	b	600 <d_discriminator+0x50>

0000000000000650 <d_index_template_argument.part.0>:
     650:	cbnz	x0, 66c <d_index_template_argument.part.0+0x1c>
     654:	b	678 <d_index_template_argument.part.0+0x28>
     658:	cmp	w1, #0x0
     65c:	b.le	680 <d_index_template_argument.part.0+0x30>
     660:	ldr	x0, [x0, #16]
     664:	sub	w1, w1, #0x1
     668:	cbz	x0, 67c <d_index_template_argument.part.0+0x2c>
     66c:	ldr	w2, [x0]
     670:	cmp	w2, #0x2f
     674:	b.eq	658 <d_index_template_argument.part.0+0x8>  // b.none
     678:	mov	x0, #0x0                   	// #0
     67c:	ret
     680:	b.ne	678 <d_index_template_argument.part.0+0x28>  // b.any
     684:	ldr	x0, [x0, #8]
     688:	ret
     68c:	nop

0000000000000690 <d_lookup_template_argument.isra.0>:
     690:	mov	x2, x0
     694:	ldr	x0, [x0, #288]
     698:	cbz	x0, 6b0 <d_lookup_template_argument.isra.0+0x20>
     69c:	ldr	x1, [x1]
     6a0:	ldr	x0, [x0, #8]
     6a4:	ldr	x0, [x0, #16]
     6a8:	tbnz	w1, #31, 6b8 <d_lookup_template_argument.isra.0+0x28>
     6ac:	b	650 <d_index_template_argument.part.0>
     6b0:	mov	w1, #0x1                   	// #1
     6b4:	str	w1, [x2, #304]
     6b8:	ret
     6bc:	nop

00000000000006c0 <d_find_pack>:
     6c0:	cbz	x1, 794 <d_find_pack+0xd4>
     6c4:	stp	x29, x30, [sp, #-48]!
     6c8:	mov	x29, sp
     6cc:	stp	x21, x22, [sp, #32]
     6d0:	mov	x21, #0x8001                	// #32769
     6d4:	movk	x21, #0x410, lsl #16
     6d8:	movk	x21, #0xc600, lsl #32
     6dc:	stp	x19, x20, [sp, #16]
     6e0:	mov	x20, x0
     6e4:	mov	x19, x1
     6e8:	mov	x22, #0x1                   	// #1
     6ec:	movk	x21, #0x19, lsl #48
     6f0:	ldr	w2, [x19]
     6f4:	cmp	w2, #0x8
     6f8:	b.eq	710 <d_find_pack+0x50>  // b.none
     6fc:	b.hi	764 <d_find_pack+0xa4>  // b.pmore
     700:	cmp	w2, #0x6
     704:	b.eq	718 <d_find_pack+0x58>  // b.none
     708:	cmp	w2, #0x7
     70c:	b.ne	72c <d_find_pack+0x6c>  // b.any
     710:	ldr	x19, [x19, #16]
     714:	cbnz	x19, 6f0 <d_find_pack+0x30>
     718:	mov	x0, #0x0                   	// #0
     71c:	ldp	x19, x20, [sp, #16]
     720:	ldp	x21, x22, [sp, #32]
     724:	ldp	x29, x30, [sp], #48
     728:	ret
     72c:	cbz	w2, 718 <d_find_pack+0x58>
     730:	cmp	w2, #0x5
     734:	b.ne	780 <d_find_pack+0xc0>  // b.any
     738:	add	x1, x19, #0x8
     73c:	mov	x0, x20
     740:	bl	690 <d_lookup_template_argument.isra.0>
     744:	cbz	x0, 718 <d_find_pack+0x58>
     748:	ldr	w1, [x0]
     74c:	cmp	w1, #0x2f
     750:	b.ne	718 <d_find_pack+0x58>  // b.any
     754:	ldp	x19, x20, [sp, #16]
     758:	ldp	x21, x22, [sp, #32]
     75c:	ldp	x29, x30, [sp], #48
     760:	ret
     764:	sub	w2, w2, #0x18
     768:	cmp	w2, #0x34
     76c:	b.hi	780 <d_find_pack+0xc0>  // b.pmore
     770:	lsl	x2, x22, x2
     774:	tst	x2, x21
     778:	b.ne	718 <d_find_pack+0x58>  // b.any
     77c:	tbnz	w2, #27, 710 <d_find_pack+0x50>
     780:	ldr	x1, [x19, #8]
     784:	mov	x0, x20
     788:	bl	6c0 <d_find_pack>
     78c:	cbz	x0, 710 <d_find_pack+0x50>
     790:	b	71c <d_find_pack+0x5c>
     794:	mov	x0, #0x0                   	// #0
     798:	ret
     79c:	nop

00000000000007a0 <d_growable_string_callback_adapter>:
     7a0:	stp	x29, x30, [sp, #-48]!
     7a4:	mov	x29, sp
     7a8:	stp	x19, x20, [sp, #16]
     7ac:	mov	x19, x2
     7b0:	add	x2, x1, #0x1
     7b4:	stp	x21, x22, [sp, #32]
     7b8:	mov	x21, x1
     7bc:	mov	x22, x0
     7c0:	ldp	x1, x20, [x19, #8]
     7c4:	add	x1, x2, x1
     7c8:	ldr	w2, [x19, #24]
     7cc:	cmp	x1, x20
     7d0:	b.hi	814 <d_growable_string_callback_adapter+0x74>  // b.pmore
     7d4:	cbnz	w2, 804 <d_growable_string_callback_adapter+0x64>
     7d8:	ldp	x3, x0, [x19]
     7dc:	mov	x1, x22
     7e0:	mov	x2, x21
     7e4:	add	x0, x3, x0
     7e8:	bl	0 <__asan_internal_memcpy>
     7ec:	ldp	x0, x1, [x19]
     7f0:	add	x0, x0, x21
     7f4:	strb	wzr, [x0, x1]
     7f8:	ldr	x1, [x19, #8]
     7fc:	add	x1, x1, x21
     800:	str	x1, [x19, #8]
     804:	ldp	x19, x20, [sp, #16]
     808:	ldp	x21, x22, [sp, #32]
     80c:	ldp	x29, x30, [sp], #48
     810:	ret
     814:	cbnz	w2, 804 <d_growable_string_callback_adapter+0x64>
     818:	cbz	x20, 850 <d_growable_string_callback_adapter+0xb0>
     81c:	nop
     820:	lsl	x20, x20, #1
     824:	cmp	x1, x20
     828:	b.hi	820 <d_growable_string_callback_adapter+0x80>  // b.pmore
     82c:	ldr	x0, [x19]
     830:	mov	x1, x20
     834:	bl	0 <realloc>
     838:	cbz	x0, 860 <d_growable_string_callback_adapter+0xc0>
     83c:	ldr	w2, [x19, #24]
     840:	str	x0, [x19]
     844:	str	x20, [x19, #16]
     848:	cbz	w2, 7d8 <d_growable_string_callback_adapter+0x38>
     84c:	b	804 <d_growable_string_callback_adapter+0x64>
     850:	cmp	x1, #0x2
     854:	mov	x20, #0x2                   	// #2
     858:	b.hi	820 <d_growable_string_callback_adapter+0x80>  // b.pmore
     85c:	b	82c <d_growable_string_callback_adapter+0x8c>
     860:	ldr	x0, [x19]
     864:	bl	0 <free>
     868:	stp	xzr, xzr, [x19]
     86c:	mov	w0, #0x1                   	// #1
     870:	str	xzr, [x19, #16]
     874:	str	w0, [x19, #24]
     878:	b	804 <d_growable_string_callback_adapter+0x64>
     87c:	nop

0000000000000880 <d_append_num>:
     880:	stp	x29, x30, [sp, #-80]!
     884:	mov	w2, w1
     888:	adrp	x3, 0 <d_make_comp>
     88c:	mov	x29, sp
     890:	add	x1, x3, #0x0
     894:	stp	x19, x20, [sp, #16]
     898:	add	x20, sp, #0x30
     89c:	mov	x19, x0
     8a0:	mov	x0, x20
     8a4:	bl	0 <sprintf>
     8a8:	mov	x0, x20
     8ac:	bl	0 <__asan_internal_strlen>
     8b0:	cbz	x0, 930 <d_append_num+0xb0>
     8b4:	stp	x21, x22, [sp, #32]
     8b8:	add	x21, x20, x0
     8bc:	ldr	x1, [x19, #256]
     8c0:	b	8e4 <d_append_num+0x64>
     8c4:	mov	x2, x1
     8c8:	add	x1, x1, #0x1
     8cc:	str	x1, [x19, #256]
     8d0:	add	x20, x20, #0x1
     8d4:	cmp	x21, x20
     8d8:	strb	w22, [x19, x2]
     8dc:	strb	w22, [x19, #264]
     8e0:	b.eq	92c <d_append_num+0xac>  // b.none
     8e4:	ldrb	w22, [x20]
     8e8:	cmp	x1, #0xff
     8ec:	b.ne	8c4 <d_append_num+0x44>  // b.any
     8f0:	ldp	x3, x2, [x19, #272]
     8f4:	strb	wzr, [x19, #255]
     8f8:	mov	x0, x19
     8fc:	add	x20, x20, #0x1
     900:	blr	x3
     904:	ldr	x0, [x19, #320]
     908:	mov	x2, #0x0                   	// #0
     90c:	mov	x1, #0x1                   	// #1
     910:	str	x1, [x19, #256]
     914:	add	x0, x0, x1
     918:	str	x0, [x19, #320]
     91c:	strb	w22, [x19, x2]
     920:	cmp	x21, x20
     924:	strb	w22, [x19, #264]
     928:	b.ne	8e4 <d_append_num+0x64>  // b.any
     92c:	ldp	x21, x22, [sp, #32]
     930:	ldp	x19, x20, [sp, #16]
     934:	ldp	x29, x30, [sp], #80
     938:	ret
     93c:	nop

0000000000000940 <d_print_comp_inner>:
     940:	stp	x29, x30, [sp, #-240]!
     944:	mov	x29, sp
     948:	stp	x19, x20, [sp, #16]
     94c:	mov	x19, x0
     950:	cbz	x2, 9d8 <d_print_comp_inner+0x98>
     954:	stp	x21, x22, [sp, #32]
     958:	ldr	w22, [x0, #304]
     95c:	cbnz	w22, 9a0 <d_print_comp_inner+0x60>
     960:	ldr	w0, [x2]
     964:	mov	x20, x2
     968:	cmp	w0, #0x50
     96c:	b.ls	980 <d_print_comp_inner+0x40>  // b.plast
     970:	mov	w0, #0x1                   	// #1
     974:	ldp	x21, x22, [sp, #32]
     978:	str	w0, [x19, #304]
     97c:	b	9a4 <d_print_comp_inner+0x64>
     980:	mov	w21, w1
     984:	adrp	x1, 0 <d_make_comp>
     988:	add	x1, x1, #0x0
     98c:	stp	x23, x24, [sp, #48]
     990:	ldrh	w1, [x1, w0, uxtw #1]
     994:	adr	x2, 9a0 <d_print_comp_inner+0x60>
     998:	add	x1, x2, w1, sxth #2
     99c:	br	x1
     9a0:	ldp	x21, x22, [sp, #32]
     9a4:	ldp	x19, x20, [sp, #16]
     9a8:	ldp	x29, x30, [sp], #240
     9ac:	ret
     9b0:	ldr	x0, [x20, #16]
     9b4:	ldr	w1, [x0]
     9b8:	cmp	w1, #0x3b
     9bc:	b.ne	9d0 <d_print_comp_inner+0x90>  // b.any
     9c0:	ldr	x0, [x0, #16]
     9c4:	ldr	w0, [x0]
     9c8:	cmp	w0, #0x3c
     9cc:	b.eq	3f98 <d_print_comp_inner+0x3658>  // b.none
     9d0:	ldp	x21, x22, [sp, #32]
     9d4:	ldp	x23, x24, [sp, #48]
     9d8:	mov	w0, #0x1                   	// #1
     9dc:	str	w0, [x19, #304]
     9e0:	ldp	x19, x20, [sp, #16]
     9e4:	ldp	x29, x30, [sp], #240
     9e8:	ret
     9ec:	ldp	x1, x2, [x19, #288]
     9f0:	add	x0, sp, #0x70
     9f4:	stp	x2, x20, [sp, #112]
     9f8:	str	wzr, [sp, #128]
     9fc:	str	x1, [sp, #136]
     a00:	str	x0, [x19, #296]
     a04:	ldr	x2, [x20, #8]
     a08:	mov	x0, x19
     a0c:	mov	w1, w21
     a10:	bl	4978 <d_print_comp>
     a14:	ldr	w0, [sp, #128]
     a18:	cbz	w0, 3008 <d_print_comp_inner+0x26c8>
     a1c:	ldr	x0, [sp, #112]
     a20:	str	x0, [x19, #296]
     a24:	cbz	w22, 27e0 <d_print_comp_inner+0x1ea0>
     a28:	ldp	x21, x22, [sp, #32]
     a2c:	str	x23, [x19, #288]
     a30:	ldp	x23, x24, [sp, #48]
     a34:	b	9a4 <d_print_comp_inner+0x64>
     a38:	ldr	x4, [x19, #296]
     a3c:	cbz	x4, b78 <d_print_comp_inner+0x238>
     a40:	mov	x1, x4
     a44:	nop
     a48:	ldr	w2, [x1, #16]
     a4c:	cbnz	w2, a6c <d_print_comp_inner+0x12c>
     a50:	ldr	x2, [x1, #8]
     a54:	ldr	w2, [x2]
     a58:	sub	w3, w2, #0x19
     a5c:	cmp	w3, #0x2
     a60:	b.hi	3a5c <d_print_comp_inner+0x311c>  // b.pmore
     a64:	cmp	w0, w2
     a68:	b.eq	3a64 <d_print_comp_inner+0x3124>  // b.none
     a6c:	ldr	x1, [x1]
     a70:	cbnz	x1, a48 <d_print_comp_inner+0x108>
     a74:	b	b78 <d_print_comp_inner+0x238>
     a78:	ldp	x23, x24, [sp, #48]
     a7c:	b	970 <d_print_comp_inner+0x30>
     a80:	ldr	x2, [x20, #8]
     a84:	mov	w22, #0x0                   	// #0
     a88:	ldr	w1, [x2]
     a8c:	cmp	w1, #0x27
     a90:	b.eq	35bc <d_print_comp_inner+0x2c7c>  // b.none
     a94:	ldr	x1, [x19, #256]
     a98:	add	x0, x1, #0x1
     a9c:	cmp	x1, #0xff
     aa0:	b.ne	acc <d_print_comp_inner+0x18c>  // b.any
     aa4:	ldp	x3, x2, [x19, #272]
     aa8:	strb	wzr, [x19, #255]
     aac:	mov	x0, x19
     ab0:	blr	x3
     ab4:	ldr	x3, [x19, #320]
     ab8:	mov	x0, #0x1                   	// #1
     abc:	mov	x1, #0x0                   	// #0
     ac0:	add	x3, x3, x0
     ac4:	ldr	x2, [x20, #8]
     ac8:	str	x3, [x19, #320]
     acc:	str	x0, [x19, #256]
     ad0:	mov	w0, #0x28                  	// #40
     ad4:	strb	w0, [x19, x1]
     ad8:	mov	w1, w21
     adc:	strb	w0, [x19, #264]
     ae0:	mov	x0, x19
     ae4:	bl	4978 <d_print_comp>
     ae8:	ldr	x1, [x19, #256]
     aec:	cmp	x1, #0xff
     af0:	b.eq	38e0 <d_print_comp_inner+0x2fa0>  // b.none
     af4:	add	x3, x1, #0x1
     af8:	str	x3, [x19, #256]
     afc:	mov	w0, #0x29                  	// #41
     b00:	strb	w0, [x19, x1]
     b04:	strb	w0, [x19, #264]
     b08:	ldr	w0, [x20]
     b0c:	cmp	w0, #0x3e
     b10:	b.eq	3a9c <d_print_comp_inner+0x315c>  // b.none
     b14:	cmp	w22, #0x8
     b18:	b.eq	3844 <d_print_comp_inner+0x2f04>  // b.none
     b1c:	ldr	x2, [x20, #16]
     b20:	mov	w1, w21
     b24:	mov	x0, x19
     b28:	bl	4978 <d_print_comp>
     b2c:	ldp	x21, x22, [sp, #32]
     b30:	ldp	x23, x24, [sp, #48]
     b34:	b	9a4 <d_print_comp_inner+0x64>
     b38:	ldr	w2, [x19, #312]
     b3c:	ldr	x0, [x20, #8]
     b40:	ldr	w1, [x0]
     b44:	cbnz	w2, b54 <d_print_comp_inner+0x214>
     b48:	cmp	w1, #0x5
     b4c:	mov	w22, #0x0                   	// #0
     b50:	b.eq	4048 <d_print_comp_inner+0x3708>  // b.none
     b54:	cmp	w1, #0x23
     b58:	ldr	x4, [x19, #296]
     b5c:	b.eq	30cc <d_print_comp_inner+0x278c>  // b.none
     b60:	ldr	w2, [x20]
     b64:	cmp	w2, w1
     b68:	b.eq	30cc <d_print_comp_inner+0x278c>  // b.none
     b6c:	cmp	w1, #0x24
     b70:	b.eq	27bc <d_print_comp_inner+0x1e7c>  // b.none
     b74:	nop
     b78:	ldr	x1, [x19, #288]
     b7c:	add	x0, sp, #0x70
     b80:	stp	x4, x20, [sp, #112]
     b84:	str	wzr, [sp, #128]
     b88:	str	x1, [sp, #136]
     b8c:	str	x0, [x19, #296]
     b90:	b	a04 <d_print_comp_inner+0xc4>
     b94:	ldr	x2, [x20, #8]
     b98:	mov	w1, w21
     b9c:	mov	x0, x19
     ba0:	bl	4978 <d_print_comp>
     ba4:	tbz	w21, #2, 37c8 <d_print_comp_inner+0x2e88>
     ba8:	ldr	x1, [x19, #256]
     bac:	add	x0, x1, #0x1
     bb0:	cmp	x1, #0xff
     bb4:	b.ne	bdc <d_print_comp_inner+0x29c>  // b.any
     bb8:	ldp	x3, x2, [x19, #272]
     bbc:	strb	wzr, [x19, #255]
     bc0:	mov	x0, x19
     bc4:	blr	x3
     bc8:	ldr	x2, [x19, #320]
     bcc:	mov	x0, #0x1                   	// #1
     bd0:	mov	x1, #0x0                   	// #0
     bd4:	add	x2, x2, x0
     bd8:	str	x2, [x19, #320]
     bdc:	str	x0, [x19, #256]
     be0:	mov	w0, #0x2e                  	// #46
     be4:	strb	w0, [x19, x1]
     be8:	strb	w0, [x19, #264]
     bec:	ldr	x23, [x20, #16]
     bf0:	ldr	w0, [x23]
     bf4:	cmp	w0, #0x47
     bf8:	b.eq	3bcc <d_print_comp_inner+0x328c>  // b.none
     bfc:	mov	x2, x23
     c00:	mov	w1, w21
     c04:	mov	x0, x19
     c08:	bl	4978 <d_print_comp>
     c0c:	ldp	x21, x22, [sp, #32]
     c10:	ldp	x23, x24, [sp, #48]
     c14:	b	9a4 <d_print_comp_inner+0x64>
     c18:	ldp	x3, x4, [x19, #288]
     c1c:	add	x0, sp, #0x70
     c20:	ldr	x2, [x20, #16]
     c24:	str	x0, [x19, #296]
     c28:	mov	w1, w21
     c2c:	mov	x0, x19
     c30:	stp	x4, x20, [sp, #112]
     c34:	str	wzr, [sp, #128]
     c38:	str	x3, [sp, #136]
     c3c:	bl	4978 <d_print_comp>
     c40:	ldr	w0, [sp, #128]
     c44:	cbz	w0, 37b4 <d_print_comp_inner+0x2e74>
     c48:	ldr	x0, [sp, #112]
     c4c:	ldp	x21, x22, [sp, #32]
     c50:	ldp	x23, x24, [sp, #48]
     c54:	str	x0, [x19, #296]
     c58:	b	9a4 <d_print_comp_inner+0x64>
     c5c:	ldr	x2, [x20, #8]
     c60:	cbz	x2, c70 <d_print_comp_inner+0x330>
     c64:	mov	w1, w21
     c68:	mov	x0, x19
     c6c:	bl	4978 <d_print_comp>
     c70:	ldr	x0, [x20, #16]
     c74:	cbz	x0, 3a44 <d_print_comp_inner+0x3104>
     c78:	ldr	x1, [x19, #256]
     c7c:	stp	x25, x26, [sp, #64]
     c80:	cmp	x1, #0xfd
     c84:	b.ls	ca8 <d_print_comp_inner+0x368>  // b.plast
     c88:	strb	wzr, [x19, x1]
     c8c:	mov	x0, x19
     c90:	ldp	x3, x2, [x19, #272]
     c94:	blr	x3
     c98:	str	xzr, [x19, #256]
     c9c:	ldr	x0, [x19, #320]
     ca0:	add	x0, x0, #0x1
     ca4:	str	x0, [x19, #320]
     ca8:	adrp	x25, 0 <d_make_comp>
     cac:	add	x25, x25, #0x0
     cb0:	mov	x0, x25
     cb4:	bl	0 <__asan_internal_strlen>
     cb8:	ldr	x22, [x19, #256]
     cbc:	cbz	x0, 3054 <d_print_comp_inner+0x2714>
     cc0:	adrp	x23, 228 <d_append_buffer+0x50>
     cc4:	add	x25, x0, x25
     cc8:	add	x23, x23, #0x0
     ccc:	mov	w24, #0x2c                  	// #44
     cd0:	b	cf4 <d_print_comp_inner+0x3b4>
     cd4:	mov	x0, x22
     cd8:	add	x22, x22, #0x1
     cdc:	str	x22, [x19, #256]
     ce0:	cmp	x25, x23
     ce4:	strb	w24, [x19, x0]
     ce8:	strb	w24, [x19, #264]
     cec:	b.eq	3054 <d_print_comp_inner+0x2714>  // b.none
     cf0:	ldrb	w24, [x23], #1
     cf4:	cmp	x22, #0xff
     cf8:	b.ne	cd4 <d_print_comp_inner+0x394>  // b.any
     cfc:	ldp	x3, x2, [x19, #272]
     d00:	strb	wzr, [x19, #255]
     d04:	mov	x1, x22
     d08:	mov	x0, x19
     d0c:	mov	x22, #0x1                   	// #1
     d10:	blr	x3
     d14:	ldr	x1, [x19, #320]
     d18:	mov	x0, #0x0                   	// #0
     d1c:	add	x1, x1, x22
     d20:	str	x1, [x19, #320]
     d24:	b	cdc <d_print_comp_inner+0x39c>
     d28:	ldr	x2, [x20, #16]
     d2c:	mov	w1, w21
     d30:	mov	x0, x19
     d34:	bl	4978 <d_print_comp>
     d38:	ldp	x21, x22, [sp, #32]
     d3c:	ldp	x23, x24, [sp, #48]
     d40:	b	9a4 <d_print_comp_inner+0x64>
     d44:	adrp	x24, 0 <d_make_comp>
     d48:	add	x24, x24, #0x0
     d4c:	mov	x0, x24
     d50:	bl	0 <__asan_internal_strlen>
     d54:	cbz	x0, 2cc8 <d_print_comp_inner+0x2388>
     d58:	adrp	x22, 318 <d_number.isra.0+0x98>
     d5c:	add	x24, x0, x24
     d60:	add	x22, x22, #0x0
     d64:	mov	w23, #0x67                  	// #103
     d68:	ldr	x1, [x19, #256]
     d6c:	b	d90 <d_print_comp_inner+0x450>
     d70:	mov	x0, x1
     d74:	add	x1, x1, #0x1
     d78:	str	x1, [x19, #256]
     d7c:	cmp	x22, x24
     d80:	strb	w23, [x19, x0]
     d84:	strb	w23, [x19, #264]
     d88:	b.eq	2cc8 <d_print_comp_inner+0x2388>  // b.none
     d8c:	ldrb	w23, [x22], #1
     d90:	cmp	x1, #0xff
     d94:	b.ne	d70 <d_print_comp_inner+0x430>  // b.any
     d98:	ldp	x3, x2, [x19, #272]
     d9c:	strb	wzr, [x19, #255]
     da0:	mov	x0, x19
     da4:	blr	x3
     da8:	ldr	x2, [x19, #320]
     dac:	mov	x1, #0x1                   	// #1
     db0:	mov	x0, #0x0                   	// #0
     db4:	add	x2, x2, x1
     db8:	str	x2, [x19, #320]
     dbc:	b	d78 <d_print_comp_inner+0x438>
     dc0:	adrp	x24, 0 <d_make_comp>
     dc4:	add	x24, x24, #0x0
     dc8:	mov	x0, x24
     dcc:	bl	0 <__asan_internal_strlen>
     dd0:	cbz	x0, 2b50 <d_print_comp_inner+0x2210>
     dd4:	adrp	x22, 338 <d_number.isra.0+0xb8>
     dd8:	add	x24, x0, x24
     ddc:	add	x22, x22, #0x0
     de0:	mov	w23, #0x7b                  	// #123
     de4:	ldr	x1, [x19, #256]
     de8:	b	e0c <d_print_comp_inner+0x4cc>
     dec:	mov	x0, x1
     df0:	add	x1, x1, #0x1
     df4:	str	x1, [x19, #256]
     df8:	cmp	x24, x22
     dfc:	strb	w23, [x19, x0]
     e00:	strb	w23, [x19, #264]
     e04:	b.eq	2b50 <d_print_comp_inner+0x2210>  // b.none
     e08:	ldrb	w23, [x22], #1
     e0c:	cmp	x1, #0xff
     e10:	b.ne	dec <d_print_comp_inner+0x4ac>  // b.any
     e14:	ldp	x3, x2, [x19, #272]
     e18:	strb	wzr, [x19, #255]
     e1c:	mov	x0, x19
     e20:	blr	x3
     e24:	ldr	x2, [x19, #320]
     e28:	mov	x1, #0x1                   	// #1
     e2c:	mov	x0, #0x0                   	// #0
     e30:	add	x2, x2, x1
     e34:	str	x2, [x19, #320]
     e38:	b	df4 <d_print_comp_inner+0x4b4>
     e3c:	adrp	x23, 0 <d_make_comp>
     e40:	add	x23, x23, #0x0
     e44:	mov	x0, x23
     e48:	bl	0 <__asan_internal_strlen>
     e4c:	cbz	x0, 2a7c <d_print_comp_inner+0x213c>
     e50:	adrp	x21, 350 <d_number_component>
     e54:	add	x23, x0, x23
     e58:	add	x21, x21, #0x0
     e5c:	mov	w22, #0x7b                  	// #123
     e60:	ldr	x1, [x19, #256]
     e64:	b	e88 <d_print_comp_inner+0x548>
     e68:	mov	x0, x1
     e6c:	add	x1, x1, #0x1
     e70:	str	x1, [x19, #256]
     e74:	cmp	x21, x23
     e78:	strb	w22, [x19, x0]
     e7c:	strb	w22, [x19, #264]
     e80:	b.eq	2a7c <d_print_comp_inner+0x213c>  // b.none
     e84:	ldrb	w22, [x21], #1
     e88:	cmp	x1, #0xff
     e8c:	b.ne	e68 <d_print_comp_inner+0x528>  // b.any
     e90:	ldp	x3, x2, [x19, #272]
     e94:	strb	wzr, [x19, #255]
     e98:	mov	x0, x19
     e9c:	blr	x3
     ea0:	ldr	x2, [x19, #320]
     ea4:	mov	x1, #0x1                   	// #1
     ea8:	mov	x0, #0x0                   	// #0
     eac:	add	x2, x2, x1
     eb0:	str	x2, [x19, #320]
     eb4:	b	e70 <d_print_comp_inner+0x530>
     eb8:	adrp	x24, 0 <d_make_comp>
     ebc:	add	x24, x24, #0x0
     ec0:	mov	x0, x24
     ec4:	bl	0 <__asan_internal_strlen>
     ec8:	cbz	x0, 2a60 <d_print_comp_inner+0x2120>
     ecc:	adrp	x22, 1d8 <d_append_buffer>
     ed0:	add	x24, x0, x24
     ed4:	add	x22, x22, #0x0
     ed8:	mov	w23, #0x74                  	// #116
     edc:	ldr	x1, [x19, #256]
     ee0:	b	f04 <d_print_comp_inner+0x5c4>
     ee4:	mov	x0, x1
     ee8:	add	x1, x1, #0x1
     eec:	str	x1, [x19, #256]
     ef0:	cmp	x24, x22
     ef4:	strb	w23, [x19, x0]
     ef8:	strb	w23, [x19, #264]
     efc:	b.eq	2a60 <d_print_comp_inner+0x2120>  // b.none
     f00:	ldrb	w23, [x22], #1
     f04:	cmp	x1, #0xff
     f08:	b.ne	ee4 <d_print_comp_inner+0x5a4>  // b.any
     f0c:	ldp	x3, x2, [x19, #272]
     f10:	strb	wzr, [x19, #255]
     f14:	mov	x0, x19
     f18:	blr	x3
     f1c:	ldr	x2, [x19, #320]
     f20:	mov	x1, #0x1                   	// #1
     f24:	mov	x0, #0x0                   	// #0
     f28:	add	x2, x2, x1
     f2c:	str	x2, [x19, #320]
     f30:	b	eec <d_print_comp_inner+0x5ac>
     f34:	adrp	x24, 0 <d_make_comp>
     f38:	add	x24, x24, #0x0
     f3c:	mov	x0, x24
     f40:	bl	0 <__asan_internal_strlen>
     f44:	cbz	x0, 2a44 <d_print_comp_inner+0x2104>
     f48:	adrp	x22, 48 <d_make_comp+0x48>
     f4c:	add	x24, x0, x24
     f50:	add	x22, x22, #0x0
     f54:	mov	w23, #0x74                  	// #116
     f58:	ldr	x1, [x19, #256]
     f5c:	b	f80 <d_print_comp_inner+0x640>
     f60:	mov	x0, x1
     f64:	add	x1, x1, #0x1
     f68:	str	x1, [x19, #256]
     f6c:	cmp	x24, x22
     f70:	strb	w23, [x19, x0]
     f74:	strb	w23, [x19, #264]
     f78:	b.eq	2a44 <d_print_comp_inner+0x2104>  // b.none
     f7c:	ldrb	w23, [x22], #1
     f80:	cmp	x1, #0xff
     f84:	b.ne	f60 <d_print_comp_inner+0x620>  // b.any
     f88:	ldp	x3, x2, [x19, #272]
     f8c:	strb	wzr, [x19, #255]
     f90:	mov	x0, x19
     f94:	blr	x3
     f98:	ldr	x2, [x19, #320]
     f9c:	mov	x1, #0x1                   	// #1
     fa0:	mov	x0, #0x0                   	// #0
     fa4:	add	x2, x2, x1
     fa8:	str	x2, [x19, #320]
     fac:	b	f68 <d_print_comp_inner+0x628>
     fb0:	ldp	x2, x20, [x20, #8]
     fb4:	cbz	x2, fc4 <d_print_comp_inner+0x684>
     fb8:	mov	w1, w21
     fbc:	mov	x0, x19
     fc0:	bl	4978 <d_print_comp>
     fc4:	ldr	x1, [x19, #256]
     fc8:	add	x0, x1, #0x1
     fcc:	cmp	x1, #0xff
     fd0:	b.ne	ff8 <d_print_comp_inner+0x6b8>  // b.any
     fd4:	ldp	x3, x2, [x19, #272]
     fd8:	strb	wzr, [x19, #255]
     fdc:	mov	x0, x19
     fe0:	blr	x3
     fe4:	ldr	x2, [x19, #320]
     fe8:	mov	x0, #0x1                   	// #1
     fec:	mov	x1, #0x0                   	// #0
     ff0:	add	x2, x2, x0
     ff4:	str	x2, [x19, #320]
     ff8:	str	x0, [x19, #256]
     ffc:	mov	w0, #0x7b                  	// #123
    1000:	strb	w0, [x19, x1]
    1004:	mov	x2, x20
    1008:	strb	w0, [x19, #264]
    100c:	mov	w1, w21
    1010:	mov	x0, x19
    1014:	bl	4978 <d_print_comp>
    1018:	ldr	x1, [x19, #256]
    101c:	add	x0, x1, #0x1
    1020:	cmp	x1, #0xff
    1024:	b.ne	104c <d_print_comp_inner+0x70c>  // b.any
    1028:	ldp	x3, x2, [x19, #272]
    102c:	strb	wzr, [x19, #255]
    1030:	mov	x0, x19
    1034:	blr	x3
    1038:	ldr	x2, [x19, #320]
    103c:	mov	x0, #0x1                   	// #1
    1040:	mov	x1, #0x0                   	// #0
    1044:	add	x2, x2, x0
    1048:	str	x2, [x19, #320]
    104c:	str	x0, [x19, #256]
    1050:	mov	w0, #0x7d                  	// #125
    1054:	strb	w0, [x19, x1]
    1058:	strb	w0, [x19, #264]
    105c:	ldp	x21, x22, [sp, #32]
    1060:	ldp	x23, x24, [sp, #48]
    1064:	b	9a4 <d_print_comp_inner+0x64>
    1068:	ldr	x24, [x20, #8]
    106c:	adrp	x22, 0 <d_make_comp>
    1070:	add	x22, x22, #0x0
    1074:	mov	x0, x22
    1078:	ldr	w23, [x24, #16]
    107c:	bl	0 <__asan_internal_strlen>
    1080:	cbz	x0, 2964 <d_print_comp_inner+0x2024>
    1084:	adrp	x20, 230 <d_append_buffer+0x58>
    1088:	add	x22, x0, x22
    108c:	add	x20, x20, #0x0
    1090:	mov	w21, #0x6f                  	// #111
    1094:	ldr	x1, [x19, #256]
    1098:	b	10bc <d_print_comp_inner+0x77c>
    109c:	mov	x0, x1
    10a0:	add	x1, x1, #0x1
    10a4:	str	x1, [x19, #256]
    10a8:	cmp	x22, x20
    10ac:	strb	w21, [x19, x0]
    10b0:	strb	w21, [x19, #264]
    10b4:	b.eq	2964 <d_print_comp_inner+0x2024>  // b.none
    10b8:	ldrb	w21, [x20], #1
    10bc:	cmp	x1, #0xff
    10c0:	b.ne	109c <d_print_comp_inner+0x75c>  // b.any
    10c4:	ldp	x3, x2, [x19, #272]
    10c8:	strb	wzr, [x19, #255]
    10cc:	mov	x0, x19
    10d0:	blr	x3
    10d4:	ldr	x2, [x19, #320]
    10d8:	mov	x1, #0x1                   	// #1
    10dc:	mov	x0, #0x0                   	// #0
    10e0:	add	x2, x2, x1
    10e4:	str	x2, [x19, #320]
    10e8:	b	10a4 <d_print_comp_inner+0x764>
    10ec:	adrp	x24, 0 <d_make_comp>
    10f0:	add	x24, x24, #0x0
    10f4:	mov	x0, x24
    10f8:	bl	0 <__asan_internal_strlen>
    10fc:	cbz	x0, 284c <d_print_comp_inner+0x1f0c>
    1100:	adrp	x22, 240 <d_append_buffer+0x68>
    1104:	add	x24, x0, x24
    1108:	add	x22, x22, #0x0
    110c:	mov	w23, #0x6f                  	// #111
    1110:	ldr	x1, [x19, #256]
    1114:	b	1138 <d_print_comp_inner+0x7f8>
    1118:	mov	x0, x1
    111c:	add	x1, x1, #0x1
    1120:	str	x1, [x19, #256]
    1124:	cmp	x22, x24
    1128:	strb	w23, [x19, x0]
    112c:	strb	w23, [x19, #264]
    1130:	b.eq	284c <d_print_comp_inner+0x1f0c>  // b.none
    1134:	ldrb	w23, [x22], #1
    1138:	cmp	x1, #0xff
    113c:	b.ne	1118 <d_print_comp_inner+0x7d8>  // b.any
    1140:	ldp	x3, x2, [x19, #272]
    1144:	strb	wzr, [x19, #255]
    1148:	mov	x0, x19
    114c:	blr	x3
    1150:	ldr	x2, [x19, #320]
    1154:	mov	x1, #0x1                   	// #1
    1158:	mov	x0, #0x0                   	// #0
    115c:	add	x2, x2, x1
    1160:	str	x2, [x19, #320]
    1164:	b	1120 <d_print_comp_inner+0x7e0>
    1168:	ldr	x2, [x20, #8]
    116c:	mov	w1, w21
    1170:	mov	x0, x19
    1174:	adrp	x24, 0 <d_make_comp>
    1178:	add	x24, x24, #0x0
    117c:	bl	4978 <d_print_comp>
    1180:	mov	x0, x24
    1184:	bl	0 <__asan_internal_strlen>
    1188:	cbz	x0, 27ec <d_print_comp_inner+0x1eac>
    118c:	adrp	x22, 360 <d_number_component+0x10>
    1190:	add	x24, x0, x24
    1194:	add	x22, x22, #0x0
    1198:	mov	w23, #0x20                  	// #32
    119c:	ldr	x1, [x19, #256]
    11a0:	b	11c4 <d_print_comp_inner+0x884>
    11a4:	mov	x0, x1
    11a8:	add	x1, x1, #0x1
    11ac:	str	x1, [x19, #256]
    11b0:	cmp	x24, x22
    11b4:	strb	w23, [x19, x0]
    11b8:	strb	w23, [x19, #264]
    11bc:	b.eq	27ec <d_print_comp_inner+0x1eac>  // b.none
    11c0:	ldrb	w23, [x22], #1
    11c4:	cmp	x1, #0xff
    11c8:	b.ne	11a4 <d_print_comp_inner+0x864>  // b.any
    11cc:	ldp	x3, x2, [x19, #272]
    11d0:	strb	wzr, [x19, #255]
    11d4:	mov	x0, x19
    11d8:	blr	x3
    11dc:	ldr	x2, [x19, #320]
    11e0:	mov	x1, #0x1                   	// #1
    11e4:	mov	x0, #0x0                   	// #0
    11e8:	add	x2, x2, x1
    11ec:	str	x2, [x19, #320]
    11f0:	b	11ac <d_print_comp_inner+0x86c>
    11f4:	ldr	x2, [x20, #8]
    11f8:	mov	w1, w21
    11fc:	mov	x0, x19
    1200:	bl	4978 <d_print_comp>
    1204:	ldp	x21, x22, [sp, #32]
    1208:	ldp	x23, x24, [sp, #48]
    120c:	b	9a4 <d_print_comp_inner+0x64>
    1210:	and	w22, w21, #0xffffff9f
    1214:	ldr	x3, [x19, #296]
    1218:	tbnz	w21, #5, 39b4 <d_print_comp_inner+0x3074>
    121c:	ldr	x2, [x20, #8]
    1220:	cbz	x2, 1228 <d_print_comp_inner+0x8e8>
    1224:	tbz	w21, #6, 3dfc <d_print_comp_inner+0x34bc>
    1228:	mov	w1, w22
    122c:	add	x2, x20, #0x10
    1230:	mov	x0, x19
    1234:	bl	52a8 <d_print_function_type.isra.0>
    1238:	ldp	x21, x22, [sp, #32]
    123c:	ldp	x23, x24, [sp, #48]
    1240:	b	9a4 <d_print_comp_inner+0x64>
    1244:	ldr	x23, [x20, #8]
    1248:	cbnz	x23, 315c <d_print_comp_inner+0x281c>
    124c:	adrp	x22, 0 <d_make_comp>
    1250:	add	x22, x22, #0x0
    1254:	mov	x0, x22
    1258:	bl	0 <__asan_internal_strlen>
    125c:	cbz	x0, 4518 <d_print_comp_inner+0x3bd8>
    1260:	adrp	x20, 2e8 <d_number.isra.0+0x68>
    1264:	add	x22, x0, x22
    1268:	add	x20, x20, #0x0
    126c:	mov	w21, #0x74                  	// #116
    1270:	ldr	x1, [x19, #256]
    1274:	b	1298 <d_print_comp_inner+0x958>
    1278:	mov	x0, x1
    127c:	add	x1, x1, #0x1
    1280:	str	x1, [x19, #256]
    1284:	cmp	x22, x20
    1288:	strb	w21, [x19, x0]
    128c:	strb	w21, [x19, #264]
    1290:	b.eq	358c <d_print_comp_inner+0x2c4c>  // b.none
    1294:	ldrb	w21, [x20], #1
    1298:	cmp	x1, #0xff
    129c:	b.ne	1278 <d_print_comp_inner+0x938>  // b.any
    12a0:	ldp	x3, x2, [x19, #272]
    12a4:	strb	wzr, [x19, #255]
    12a8:	mov	x0, x19
    12ac:	blr	x3
    12b0:	ldr	x2, [x19, #320]
    12b4:	mov	x1, #0x1                   	// #1
    12b8:	mov	x0, #0x0                   	// #0
    12bc:	add	x2, x2, x1
    12c0:	str	x2, [x19, #320]
    12c4:	b	1280 <d_print_comp_inner+0x940>
    12c8:	adrp	x24, 0 <d_make_comp>
    12cc:	add	x24, x24, #0x0
    12d0:	mov	x0, x24
    12d4:	bl	0 <__asan_internal_strlen>
    12d8:	cbz	x0, 2868 <d_print_comp_inner+0x1f28>
    12dc:	adrp	x22, 1c0 <d_count_templates_scopes+0xd0>
    12e0:	add	x24, x0, x24
    12e4:	add	x22, x22, #0x0
    12e8:	mov	w23, #0x68                  	// #104
    12ec:	ldr	x1, [x19, #256]
    12f0:	b	1314 <d_print_comp_inner+0x9d4>
    12f4:	mov	x0, x1
    12f8:	add	x1, x1, #0x1
    12fc:	str	x1, [x19, #256]
    1300:	cmp	x22, x24
    1304:	strb	w23, [x19, x0]
    1308:	strb	w23, [x19, #264]
    130c:	b.eq	2868 <d_print_comp_inner+0x1f28>  // b.none
    1310:	ldrb	w23, [x22], #1
    1314:	cmp	x1, #0xff
    1318:	b.ne	12f4 <d_print_comp_inner+0x9b4>  // b.any
    131c:	ldp	x3, x2, [x19, #272]
    1320:	strb	wzr, [x19, #255]
    1324:	mov	x0, x19
    1328:	blr	x3
    132c:	ldr	x2, [x19, #320]
    1330:	mov	x1, #0x1                   	// #1
    1334:	mov	x0, #0x0                   	// #0
    1338:	add	x2, x2, x1
    133c:	str	x2, [x19, #320]
    1340:	b	12fc <d_print_comp_inner+0x9bc>
    1344:	ldrsw	x22, [x20, #16]
    1348:	ldr	x20, [x20, #8]
    134c:	cbz	x22, 42a0 <d_print_comp_inner+0x3960>
    1350:	add	x22, x20, x22
    1354:	ldr	x1, [x19, #256]
    1358:	b	137c <d_print_comp_inner+0xa3c>
    135c:	mov	x0, x1
    1360:	add	x1, x1, #0x1
    1364:	str	x1, [x19, #256]
    1368:	add	x20, x20, #0x1
    136c:	strb	w21, [x19, x0]
    1370:	cmp	x20, x22
    1374:	strb	w21, [x19, #264]
    1378:	b.eq	301c <d_print_comp_inner+0x26dc>  // b.none
    137c:	ldrb	w21, [x20]
    1380:	cmp	x1, #0xff
    1384:	b.ne	135c <d_print_comp_inner+0xa1c>  // b.any
    1388:	ldp	x3, x2, [x19, #272]
    138c:	strb	wzr, [x19, #255]
    1390:	mov	x0, x19
    1394:	blr	x3
    1398:	ldr	x2, [x19, #320]
    139c:	mov	x1, #0x1                   	// #1
    13a0:	mov	x0, #0x0                   	// #0
    13a4:	add	x2, x2, x1
    13a8:	str	x2, [x19, #320]
    13ac:	b	1364 <d_print_comp_inner+0xa24>
    13b0:	ldp	x1, x5, [x19, #288]
    13b4:	add	x23, sp, #0x70
    13b8:	stp	x5, x20, [sp, #112]
    13bc:	mov	w22, #0x1                   	// #1
    13c0:	mov	w6, w22
    13c4:	str	wzr, [sp, #128]
    13c8:	str	x1, [sp, #136]
    13cc:	str	x23, [x19, #296]
    13d0:	mov	x24, x5
    13d4:	mov	x0, x5
    13d8:	mov	x5, x23
    13dc:	cbnz	x24, 1428 <d_print_comp_inner+0xae8>
    13e0:	b	4688 <d_print_comp_inner+0x3d48>
    13e4:	ldr	w1, [x0, #16]
    13e8:	cbnz	w1, 1420 <d_print_comp_inner+0xae0>
    13ec:	cmp	w22, #0x3
    13f0:	b.hi	3de8 <d_print_comp_inner+0x34a8>  // b.pmore
    13f4:	ubfiz	x1, x22, #5, #32
    13f8:	add	w22, w22, #0x1
    13fc:	add	x4, x23, x1
    1400:	ldp	x2, x3, [x0]
    1404:	stp	x2, x3, [x4]
    1408:	ldp	x2, x3, [x0, #16]
    140c:	stp	x2, x3, [x4, #16]
    1410:	str	x5, [x23, x1]
    1414:	mov	x5, x4
    1418:	str	x4, [x19, #296]
    141c:	str	w6, [x0, #16]
    1420:	ldr	x0, [x0]
    1424:	cbz	x0, 143c <d_print_comp_inner+0xafc>
    1428:	ldr	x1, [x0, #8]
    142c:	ldr	w1, [x1]
    1430:	sub	w1, w1, #0x19
    1434:	cmp	w1, #0x2
    1438:	b.ls	13e4 <d_print_comp_inner+0xaa4>  // b.plast
    143c:	ldr	x2, [x20, #16]
    1440:	mov	x0, x19
    1444:	mov	w1, w21
    1448:	bl	4978 <d_print_comp>
    144c:	str	x24, [x19, #296]
    1450:	ldr	w0, [sp, #128]
    1454:	cbnz	w0, 3a50 <d_print_comp_inner+0x3110>
    1458:	ubfiz	x0, x22, #5, #32
    145c:	cmp	w22, #0x1
    1460:	add	x23, x23, x0
    1464:	b.eq	1488 <d_print_comp_inner+0xb48>  // b.none
    1468:	ldur	x2, [x23, #-24]
    146c:	sub	w22, w22, #0x1
    1470:	mov	w1, w21
    1474:	mov	x0, x19
    1478:	sub	x23, x23, #0x20
    147c:	bl	4a10 <d_print_mod>
    1480:	cmp	w22, #0x1
    1484:	b.ne	1468 <d_print_comp_inner+0xb28>  // b.any
    1488:	ldr	x3, [x19, #296]
    148c:	mov	w1, w21
    1490:	add	x2, x20, #0x8
    1494:	mov	x0, x19
    1498:	bl	5968 <d_print_array_type.isra.0>
    149c:	ldp	x21, x22, [sp, #32]
    14a0:	ldp	x23, x24, [sp, #48]
    14a4:	b	9a4 <d_print_comp_inner+0x64>
    14a8:	ldrsh	w0, [x20, #18]
    14ac:	cbnz	w0, 3938 <d_print_comp_inner+0x2ff8>
    14b0:	ldr	x2, [x20, #8]
    14b4:	adrp	x0, 188 <d_count_templates_scopes+0x98>
    14b8:	ldr	x0, [x0]
    14bc:	ldr	x1, [x2, #8]
    14c0:	add	x0, x0, #0x100
    14c4:	cmp	x1, x0
    14c8:	b.eq	151c <d_print_comp_inner+0xbdc>  // b.none
    14cc:	mov	w1, w21
    14d0:	mov	x0, x19
    14d4:	bl	4978 <d_print_comp>
    14d8:	ldr	x1, [x19, #256]
    14dc:	add	x0, x1, #0x1
    14e0:	cmp	x1, #0xff
    14e4:	b.ne	150c <d_print_comp_inner+0xbcc>  // b.any
    14e8:	ldp	x3, x2, [x19, #272]
    14ec:	strb	wzr, [x19, #255]
    14f0:	mov	x0, x19
    14f4:	blr	x3
    14f8:	ldr	x2, [x19, #320]
    14fc:	mov	x0, #0x1                   	// #1
    1500:	mov	x1, #0x0                   	// #0
    1504:	add	x2, x2, x0
    1508:	str	x2, [x19, #320]
    150c:	str	x0, [x19, #256]
    1510:	mov	w0, #0x20                  	// #32
    1514:	strb	w0, [x19, x1]
    1518:	strb	w0, [x19, #264]
    151c:	ldrsh	w0, [x20, #16]
    1520:	cbz	w0, 33fc <d_print_comp_inner+0x2abc>
    1524:	adrp	x22, 0 <d_make_comp>
    1528:	add	x22, x22, #0x0
    152c:	mov	x0, x22
    1530:	bl	0 <__asan_internal_strlen>
    1534:	cbz	x0, 450c <d_print_comp_inner+0x3bcc>
    1538:	adrp	x20, 218 <d_append_buffer+0x40>
    153c:	add	x22, x0, x22
    1540:	add	x20, x20, #0x0
    1544:	mov	w21, #0x5f                  	// #95
    1548:	ldr	x1, [x19, #256]
    154c:	b	1570 <d_print_comp_inner+0xc30>
    1550:	mov	x0, x1
    1554:	add	x1, x1, #0x1
    1558:	str	x1, [x19, #256]
    155c:	cmp	x22, x20
    1560:	strb	w21, [x19, x0]
    1564:	strb	w21, [x19, #264]
    1568:	b.eq	35b0 <d_print_comp_inner+0x2c70>  // b.none
    156c:	ldrb	w21, [x20], #1
    1570:	cmp	x1, #0xff
    1574:	b.ne	1550 <d_print_comp_inner+0xc10>  // b.any
    1578:	ldp	x3, x2, [x19, #272]
    157c:	strb	wzr, [x19, #255]
    1580:	mov	x0, x19
    1584:	blr	x3
    1588:	ldr	x2, [x19, #320]
    158c:	mov	x1, #0x1                   	// #1
    1590:	mov	x0, #0x0                   	// #0
    1594:	add	x2, x2, x1
    1598:	str	x2, [x19, #320]
    159c:	b	1558 <d_print_comp_inner+0xc18>
    15a0:	adrp	x24, 0 <d_make_comp>
    15a4:	add	x24, x24, #0x0
    15a8:	mov	x0, x24
    15ac:	bl	0 <__asan_internal_strlen>
    15b0:	cbz	x0, 2eb8 <d_print_comp_inner+0x2578>
    15b4:	adrp	x22, f0 <d_count_templates_scopes>
    15b8:	add	x24, x0, x24
    15bc:	add	x22, x22, #0x0
    15c0:	mov	w23, #0x6e                  	// #110
    15c4:	ldr	x1, [x19, #256]
    15c8:	b	15ec <d_print_comp_inner+0xcac>
    15cc:	mov	x0, x1
    15d0:	add	x1, x1, #0x1
    15d4:	str	x1, [x19, #256]
    15d8:	cmp	x24, x22
    15dc:	strb	w23, [x19, x0]
    15e0:	strb	w23, [x19, #264]
    15e4:	b.eq	2eb8 <d_print_comp_inner+0x2578>  // b.none
    15e8:	ldrb	w23, [x22], #1
    15ec:	cmp	x1, #0xff
    15f0:	b.ne	15cc <d_print_comp_inner+0xc8c>  // b.any
    15f4:	ldp	x3, x2, [x19, #272]
    15f8:	strb	wzr, [x19, #255]
    15fc:	mov	x0, x19
    1600:	blr	x3
    1604:	ldr	x2, [x19, #320]
    1608:	mov	x1, #0x1                   	// #1
    160c:	mov	x0, #0x0                   	// #0
    1610:	add	x2, x2, x1
    1614:	str	x2, [x19, #320]
    1618:	b	15d4 <d_print_comp_inner+0xc94>
    161c:	adrp	x24, 0 <d_make_comp>
    1620:	add	x24, x24, #0x0
    1624:	mov	x0, x24
    1628:	bl	0 <__asan_internal_strlen>
    162c:	cbz	x0, 2e9c <d_print_comp_inner+0x255c>
    1630:	adrp	x22, 108 <d_count_templates_scopes+0x18>
    1634:	add	x24, x0, x24
    1638:	add	x22, x22, #0x0
    163c:	mov	w23, #0x76                  	// #118
    1640:	ldr	x1, [x19, #256]
    1644:	b	1668 <d_print_comp_inner+0xd28>
    1648:	mov	x0, x1
    164c:	add	x1, x1, #0x1
    1650:	str	x1, [x19, #256]
    1654:	cmp	x24, x22
    1658:	strb	w23, [x19, x0]
    165c:	strb	w23, [x19, #264]
    1660:	b.eq	2e9c <d_print_comp_inner+0x255c>  // b.none
    1664:	ldrb	w23, [x22], #1
    1668:	cmp	x1, #0xff
    166c:	b.ne	1648 <d_print_comp_inner+0xd08>  // b.any
    1670:	ldp	x3, x2, [x19, #272]
    1674:	strb	wzr, [x19, #255]
    1678:	mov	x0, x19
    167c:	blr	x3
    1680:	ldr	x2, [x19, #320]
    1684:	mov	x1, #0x1                   	// #1
    1688:	mov	x0, #0x0                   	// #0
    168c:	add	x2, x2, x1
    1690:	str	x2, [x19, #320]
    1694:	b	1650 <d_print_comp_inner+0xd10>
    1698:	adrp	x24, 0 <d_make_comp>
    169c:	add	x24, x24, #0x0
    16a0:	mov	x0, x24
    16a4:	bl	0 <__asan_internal_strlen>
    16a8:	cbz	x0, 2e80 <d_print_comp_inner+0x2540>
    16ac:	adrp	x22, 120 <d_count_templates_scopes+0x30>
    16b0:	add	x24, x0, x24
    16b4:	add	x22, x22, #0x0
    16b8:	mov	w23, #0x63                  	// #99
    16bc:	ldr	x1, [x19, #256]
    16c0:	b	16e4 <d_print_comp_inner+0xda4>
    16c4:	mov	x0, x1
    16c8:	add	x1, x1, #0x1
    16cc:	str	x1, [x19, #256]
    16d0:	cmp	x24, x22
    16d4:	strb	w23, [x19, x0]
    16d8:	strb	w23, [x19, #264]
    16dc:	b.eq	2e80 <d_print_comp_inner+0x2540>  // b.none
    16e0:	ldrb	w23, [x22], #1
    16e4:	cmp	x1, #0xff
    16e8:	b.ne	16c4 <d_print_comp_inner+0xd84>  // b.any
    16ec:	ldp	x3, x2, [x19, #272]
    16f0:	strb	wzr, [x19, #255]
    16f4:	mov	x0, x19
    16f8:	blr	x3
    16fc:	ldr	x2, [x19, #320]
    1700:	mov	x1, #0x1                   	// #1
    1704:	mov	x0, #0x0                   	// #0
    1708:	add	x2, x2, x1
    170c:	str	x2, [x19, #320]
    1710:	b	16cc <d_print_comp_inner+0xd8c>
    1714:	adrp	x24, 0 <d_make_comp>
    1718:	add	x24, x24, #0x0
    171c:	mov	x0, x24
    1720:	bl	0 <__asan_internal_strlen>
    1724:	cbz	x0, 2e64 <d_print_comp_inner+0x2524>
    1728:	adrp	x22, 140 <d_count_templates_scopes+0x50>
    172c:	add	x24, x0, x24
    1730:	add	x22, x22, #0x0
    1734:	mov	w23, #0x6a                  	// #106
    1738:	ldr	x1, [x19, #256]
    173c:	b	1760 <d_print_comp_inner+0xe20>
    1740:	mov	x0, x1
    1744:	add	x1, x1, #0x1
    1748:	str	x1, [x19, #256]
    174c:	cmp	x24, x22
    1750:	strb	w23, [x19, x0]
    1754:	strb	w23, [x19, #264]
    1758:	b.eq	2e64 <d_print_comp_inner+0x2524>  // b.none
    175c:	ldrb	w23, [x22], #1
    1760:	cmp	x1, #0xff
    1764:	b.ne	1740 <d_print_comp_inner+0xe00>  // b.any
    1768:	ldp	x3, x2, [x19, #272]
    176c:	strb	wzr, [x19, #255]
    1770:	mov	x0, x19
    1774:	blr	x3
    1778:	ldr	x2, [x19, #320]
    177c:	mov	x1, #0x1                   	// #1
    1780:	mov	x0, #0x0                   	// #0
    1784:	add	x2, x2, x1
    1788:	str	x2, [x19, #320]
    178c:	b	1748 <d_print_comp_inner+0xe08>
    1790:	adrp	x24, 0 <d_make_comp>
    1794:	add	x24, x24, #0x0
    1798:	mov	x0, x24
    179c:	bl	0 <__asan_internal_strlen>
    17a0:	cbz	x0, 2e48 <d_print_comp_inner+0x2508>
    17a4:	adrp	x22, 150 <d_count_templates_scopes+0x60>
    17a8:	add	x24, x0, x24
    17ac:	add	x22, x22, #0x0
    17b0:	mov	w23, #0x67                  	// #103
    17b4:	ldr	x1, [x19, #256]
    17b8:	b	17dc <d_print_comp_inner+0xe9c>
    17bc:	mov	x0, x1
    17c0:	add	x1, x1, #0x1
    17c4:	str	x1, [x19, #256]
    17c8:	cmp	x24, x22
    17cc:	strb	w23, [x19, x0]
    17d0:	strb	w23, [x19, #264]
    17d4:	b.eq	2e48 <d_print_comp_inner+0x2508>  // b.none
    17d8:	ldrb	w23, [x22], #1
    17dc:	cmp	x1, #0xff
    17e0:	b.ne	17bc <d_print_comp_inner+0xe7c>  // b.any
    17e4:	ldp	x3, x2, [x19, #272]
    17e8:	strb	wzr, [x19, #255]
    17ec:	mov	x0, x19
    17f0:	blr	x3
    17f4:	ldr	x2, [x19, #320]
    17f8:	mov	x1, #0x1                   	// #1
    17fc:	mov	x0, #0x0                   	// #0
    1800:	add	x2, x2, x1
    1804:	str	x2, [x19, #320]
    1808:	b	17c4 <d_print_comp_inner+0xe84>
    180c:	adrp	x24, 0 <d_make_comp>
    1810:	add	x24, x24, #0x0
    1814:	mov	x0, x24
    1818:	bl	0 <__asan_internal_strlen>
    181c:	cbz	x0, 2e2c <d_print_comp_inner+0x24ec>
    1820:	adrp	x22, 168 <d_count_templates_scopes+0x78>
    1824:	add	x24, x0, x24
    1828:	add	x22, x22, #0x0
    182c:	mov	w23, #0x54                  	// #84
    1830:	ldr	x1, [x19, #256]
    1834:	b	1858 <d_print_comp_inner+0xf18>
    1838:	mov	x0, x1
    183c:	add	x1, x1, #0x1
    1840:	str	x1, [x19, #256]
    1844:	cmp	x24, x22
    1848:	strb	w23, [x19, x0]
    184c:	strb	w23, [x19, #264]
    1850:	b.eq	2e2c <d_print_comp_inner+0x24ec>  // b.none
    1854:	ldrb	w23, [x22], #1
    1858:	cmp	x1, #0xff
    185c:	b.ne	1838 <d_print_comp_inner+0xef8>  // b.any
    1860:	ldp	x3, x2, [x19, #272]
    1864:	strb	wzr, [x19, #255]
    1868:	mov	x0, x19
    186c:	blr	x3
    1870:	ldr	x2, [x19, #320]
    1874:	mov	x1, #0x1                   	// #1
    1878:	mov	x0, #0x0                   	// #0
    187c:	add	x2, x2, x1
    1880:	str	x2, [x19, #320]
    1884:	b	1840 <d_print_comp_inner+0xf00>
    1888:	adrp	x24, 0 <d_make_comp>
    188c:	add	x24, x24, #0x0
    1890:	mov	x0, x24
    1894:	bl	0 <__asan_internal_strlen>
    1898:	cbz	x0, 292c <d_print_comp_inner+0x1fec>
    189c:	adrp	x22, 180 <d_count_templates_scopes+0x90>
    18a0:	add	x24, x0, x24
    18a4:	add	x22, x22, #0x0
    18a8:	mov	w23, #0x54                  	// #84
    18ac:	ldr	x1, [x19, #256]
    18b0:	b	18d4 <d_print_comp_inner+0xf94>
    18b4:	mov	x0, x1
    18b8:	add	x1, x1, #0x1
    18bc:	str	x1, [x19, #256]
    18c0:	cmp	x24, x22
    18c4:	strb	w23, [x19, x0]
    18c8:	strb	w23, [x19, #264]
    18cc:	b.eq	292c <d_print_comp_inner+0x1fec>  // b.none
    18d0:	ldrb	w23, [x22], #1
    18d4:	cmp	x1, #0xff
    18d8:	b.ne	18b4 <d_print_comp_inner+0xf74>  // b.any
    18dc:	ldp	x3, x2, [x19, #272]
    18e0:	strb	wzr, [x19, #255]
    18e4:	mov	x0, x19
    18e8:	blr	x3
    18ec:	ldr	x2, [x19, #320]
    18f0:	mov	x1, #0x1                   	// #1
    18f4:	mov	x0, #0x0                   	// #0
    18f8:	add	x2, x2, x1
    18fc:	str	x2, [x19, #320]
    1900:	b	18bc <d_print_comp_inner+0xf7c>
    1904:	adrp	x24, 0 <d_make_comp>
    1908:	add	x24, x24, #0x0
    190c:	mov	x0, x24
    1910:	bl	0 <__asan_internal_strlen>
    1914:	cbz	x0, 2884 <d_print_comp_inner+0x1f44>
    1918:	adrp	x22, 1a0 <d_count_templates_scopes+0xb0>
    191c:	add	x24, x0, x24
    1920:	add	x22, x22, #0x0
    1924:	mov	w23, #0x72                  	// #114
    1928:	ldr	x1, [x19, #256]
    192c:	b	1950 <d_print_comp_inner+0x1010>
    1930:	mov	x0, x1
    1934:	add	x1, x1, #0x1
    1938:	str	x1, [x19, #256]
    193c:	cmp	x24, x22
    1940:	strb	w23, [x19, x0]
    1944:	strb	w23, [x19, #264]
    1948:	b.eq	2884 <d_print_comp_inner+0x1f44>  // b.none
    194c:	ldrb	w23, [x22], #1
    1950:	cmp	x1, #0xff
    1954:	b.ne	1930 <d_print_comp_inner+0xff0>  // b.any
    1958:	ldp	x3, x2, [x19, #272]
    195c:	strb	wzr, [x19, #255]
    1960:	mov	x0, x19
    1964:	blr	x3
    1968:	ldr	x2, [x19, #320]
    196c:	mov	x1, #0x1                   	// #1
    1970:	mov	x0, #0x0                   	// #0
    1974:	add	x2, x2, x1
    1978:	str	x2, [x19, #320]
    197c:	b	1938 <d_print_comp_inner+0xff8>
    1980:	adrp	x24, 0 <d_make_comp>
    1984:	add	x24, x24, #0x0
    1988:	mov	x0, x24
    198c:	bl	0 <__asan_internal_strlen>
    1990:	cbz	x0, 2948 <d_print_comp_inner+0x2008>
    1994:	adrp	x22, 1f0 <d_append_buffer+0x18>
    1998:	add	x24, x0, x24
    199c:	add	x22, x22, #0x0
    19a0:	mov	w23, #0x6e                  	// #110
    19a4:	ldr	x1, [x19, #256]
    19a8:	b	19cc <d_print_comp_inner+0x108c>
    19ac:	mov	x0, x1
    19b0:	add	x1, x1, #0x1
    19b4:	str	x1, [x19, #256]
    19b8:	cmp	x22, x24
    19bc:	strb	w23, [x19, x0]
    19c0:	strb	w23, [x19, #264]
    19c4:	b.eq	2948 <d_print_comp_inner+0x2008>  // b.none
    19c8:	ldrb	w23, [x22], #1
    19cc:	cmp	x1, #0xff
    19d0:	b.ne	19ac <d_print_comp_inner+0x106c>  // b.any
    19d4:	ldp	x3, x2, [x19, #272]
    19d8:	strb	wzr, [x19, #255]
    19dc:	mov	x0, x19
    19e0:	blr	x3
    19e4:	ldr	x2, [x19, #320]
    19e8:	mov	x1, #0x1                   	// #1
    19ec:	mov	x0, #0x0                   	// #0
    19f0:	add	x2, x2, x1
    19f4:	str	x2, [x19, #320]
    19f8:	b	19b4 <d_print_comp_inner+0x1074>
    19fc:	ldr	x1, [x20, #8]
    1a00:	mov	x0, x19
    1a04:	mov	w23, #0x0                   	// #0
    1a08:	bl	6c0 <d_find_pack>
    1a0c:	cbz	x0, 431c <d_print_comp_inner+0x39dc>
    1a10:	stp	x25, x26, [sp, #64]
    1a14:	nop
    1a18:	ldr	w1, [x0]
    1a1c:	cmp	w1, #0x2f
    1a20:	b.ne	30bc <d_print_comp_inner+0x277c>  // b.any
    1a24:	ldr	x1, [x0, #8]
    1a28:	cbz	x1, 30bc <d_print_comp_inner+0x277c>
    1a2c:	ldr	x0, [x0, #16]
    1a30:	add	w23, w23, #0x1
    1a34:	cbnz	x0, 1a18 <d_print_comp_inner+0x10d8>
    1a38:	ldr	x25, [x20, #8]
    1a3c:	stp	x27, x28, [sp, #80]
    1a40:	adrp	x24, 0 <d_make_comp>
    1a44:	sub	w26, w23, #0x1
    1a48:	add	x24, x24, #0x0
    1a4c:	b	1a5c <d_print_comp_inner+0x111c>
    1a50:	add	w22, w22, #0x1
    1a54:	cmp	w22, w23
    1a58:	b.ge	3040 <d_print_comp_inner+0x2700>  // b.tcont
    1a5c:	str	w22, [x19, #316]
    1a60:	mov	x2, x25
    1a64:	mov	w1, w21
    1a68:	mov	x0, x19
    1a6c:	bl	4978 <d_print_comp>
    1a70:	cmp	w26, w22
    1a74:	b.le	1a50 <d_print_comp_inner+0x1110>
    1a78:	mov	x0, x24
    1a7c:	bl	0 <__asan_internal_strlen>
    1a80:	cbz	x0, 1a50 <d_print_comp_inner+0x1110>
    1a84:	add	x27, x0, x24
    1a88:	mov	w20, #0x2c                  	// #44
    1a8c:	adrp	x0, 228 <d_append_buffer+0x50>
    1a90:	add	x28, x0, #0x0
    1a94:	ldr	x1, [x19, #256]
    1a98:	b	1abc <d_print_comp_inner+0x117c>
    1a9c:	mov	x0, x1
    1aa0:	add	x1, x1, #0x1
    1aa4:	str	x1, [x19, #256]
    1aa8:	cmp	x27, x28
    1aac:	strb	w20, [x19, x0]
    1ab0:	strb	w20, [x19, #264]
    1ab4:	b.eq	1a50 <d_print_comp_inner+0x1110>  // b.none
    1ab8:	ldrb	w20, [x28], #1
    1abc:	cmp	x1, #0xff
    1ac0:	b.ne	1a9c <d_print_comp_inner+0x115c>  // b.any
    1ac4:	ldp	x4, x2, [x19, #272]
    1ac8:	strb	wzr, [x19, #255]
    1acc:	mov	x0, x19
    1ad0:	blr	x4
    1ad4:	ldr	x2, [x19, #320]
    1ad8:	mov	x1, #0x1                   	// #1
    1adc:	mov	x0, #0x0                   	// #0
    1ae0:	add	x2, x2, x1
    1ae4:	str	x2, [x19, #320]
    1ae8:	b	1aa4 <d_print_comp_inner+0x1164>
    1aec:	ldr	x2, [x20, #8]
    1af0:	mov	w1, w21
    1af4:	mov	x0, x19
    1af8:	adrp	x24, 0 <d_make_comp>
    1afc:	add	x24, x24, #0x0
    1b00:	bl	4978 <d_print_comp>
    1b04:	mov	x0, x24
    1b08:	bl	0 <__asan_internal_strlen>
    1b0c:	cbz	x0, 2d60 <d_print_comp_inner+0x2420>
    1b10:	adrp	x22, 8 <d_make_comp+0x8>
    1b14:	add	x24, x0, x24
    1b18:	add	x22, x22, #0x0
    1b1c:	mov	w23, #0x5b                  	// #91
    1b20:	ldr	x1, [x19, #256]
    1b24:	b	1b48 <d_print_comp_inner+0x1208>
    1b28:	mov	x0, x1
    1b2c:	add	x1, x1, #0x1
    1b30:	str	x1, [x19, #256]
    1b34:	cmp	x24, x22
    1b38:	strb	w23, [x19, x0]
    1b3c:	strb	w23, [x19, #264]
    1b40:	b.eq	2d60 <d_print_comp_inner+0x2420>  // b.none
    1b44:	ldrb	w23, [x22], #1
    1b48:	cmp	x1, #0xff
    1b4c:	b.ne	1b28 <d_print_comp_inner+0x11e8>  // b.any
    1b50:	ldp	x3, x2, [x19, #272]
    1b54:	strb	wzr, [x19, #255]
    1b58:	mov	x0, x19
    1b5c:	blr	x3
    1b60:	ldr	x2, [x19, #320]
    1b64:	mov	x1, #0x1                   	// #1
    1b68:	mov	x0, #0x0                   	// #0
    1b6c:	add	x2, x2, x1
    1b70:	str	x2, [x19, #320]
    1b74:	b	1b30 <d_print_comp_inner+0x11f0>
    1b78:	ldr	x0, [x20, #16]
    1b7c:	ldr	w0, [x0]
    1b80:	cmp	w0, #0x39
    1b84:	b.ne	9d0 <d_print_comp_inner+0x90>  // b.any
    1b88:	ldr	x2, [x20, #8]
    1b8c:	ldr	x0, [x2, #8]
    1b90:	ldr	x0, [x0]
    1b94:	ldrb	w1, [x0, #1]
    1b98:	cmp	w1, #0x63
    1b9c:	b.eq	3e98 <d_print_comp_inner+0x3558>  // b.none
    1ba0:	add	x3, x20, #0x10
    1ba4:	mov	w1, w21
    1ba8:	mov	x0, x19
    1bac:	bl	5de0 <d_maybe_print_fold_expression.isra.0>
    1bb0:	cbnz	w0, 4184 <d_print_comp_inner+0x3844>
    1bb4:	ldr	x0, [x20, #8]
    1bb8:	ldr	w1, [x0]
    1bbc:	cmp	w1, #0x32
    1bc0:	b.eq	43c4 <d_print_comp_inner+0x3a84>  // b.none
    1bc4:	ldr	x0, [x0, #8]
    1bc8:	adrp	x22, 0 <d_make_comp>
    1bcc:	add	x1, x22, #0x0
    1bd0:	ldr	x0, [x0]
    1bd4:	bl	0 <__asan_internal_strcmp>
    1bd8:	cbnz	w0, 43bc <d_print_comp_inner+0x3a7c>
    1bdc:	ldr	x0, [x20, #16]
    1be0:	ldr	x1, [x0, #8]
    1be4:	ldr	w2, [x1]
    1be8:	cmp	w2, #0x3
    1bec:	b.eq	44d4 <d_print_comp_inner+0x3b94>  // b.none
    1bf0:	ldr	x2, [x0, #8]
    1bf4:	mov	w1, w21
    1bf8:	mov	x0, x19
    1bfc:	bl	5ce8 <d_print_subexpr>
    1c00:	ldr	x0, [x20, #8]
    1c04:	adrp	x1, 0 <d_make_comp>
    1c08:	add	x1, x1, #0x0
    1c0c:	ldr	x0, [x0, #8]
    1c10:	ldr	x0, [x0]
    1c14:	bl	0 <__asan_internal_strcmp>
    1c18:	cbnz	w0, 4358 <d_print_comp_inner+0x3a18>
    1c1c:	ldr	x1, [x19, #256]
    1c20:	cmp	x1, #0xff
    1c24:	b.ne	1c4c <d_print_comp_inner+0x130c>  // b.any
    1c28:	ldp	x3, x2, [x19, #272]
    1c2c:	strb	wzr, [x19, #255]
    1c30:	mov	x0, x19
    1c34:	blr	x3
    1c38:	str	xzr, [x19, #256]
    1c3c:	ldr	x0, [x19, #320]
    1c40:	mov	x1, #0x0                   	// #0
    1c44:	add	x0, x0, #0x1
    1c48:	str	x0, [x19, #320]
    1c4c:	add	x0, x1, #0x1
    1c50:	str	x0, [x19, #256]
    1c54:	mov	w0, #0x5b                  	// #91
    1c58:	strb	w0, [x19, x1]
    1c5c:	strb	w0, [x19, #264]
    1c60:	mov	w1, w21
    1c64:	mov	x0, x19
    1c68:	ldr	x2, [x20, #16]
    1c6c:	ldr	x2, [x2, #16]
    1c70:	bl	4978 <d_print_comp>
    1c74:	ldr	x1, [x19, #256]
    1c78:	cmp	x1, #0xff
    1c7c:	b.ne	1ca4 <d_print_comp_inner+0x1364>  // b.any
    1c80:	ldp	x3, x2, [x19, #272]
    1c84:	strb	wzr, [x19, #255]
    1c88:	mov	x0, x19
    1c8c:	blr	x3
    1c90:	str	xzr, [x19, #256]
    1c94:	ldr	x0, [x19, #320]
    1c98:	mov	x1, #0x0                   	// #0
    1c9c:	add	x0, x0, #0x1
    1ca0:	str	x0, [x19, #320]
    1ca4:	add	x0, x1, #0x1
    1ca8:	str	x0, [x19, #256]
    1cac:	mov	w0, #0x5d                  	// #93
    1cb0:	strb	w0, [x19, x1]
    1cb4:	strb	w0, [x19, #264]
    1cb8:	ldr	x0, [x20, #8]
    1cbc:	ldr	w1, [x0]
    1cc0:	cmp	w1, #0x32
    1cc4:	b.eq	43a0 <d_print_comp_inner+0x3a60>  // b.none
    1cc8:	ldp	x21, x22, [sp, #32]
    1ccc:	ldp	x23, x24, [sp, #48]
    1cd0:	b	9a4 <d_print_comp_inner+0x64>
    1cd4:	adrp	x24, 0 <d_make_comp>
    1cd8:	add	x24, x24, #0x0
    1cdc:	mov	x0, x24
    1ce0:	bl	0 <__asan_internal_strlen>
    1ce4:	cbz	x0, 2fec <d_print_comp_inner+0x26ac>
    1ce8:	adrp	x22, 2c0 <d_number.isra.0+0x40>
    1cec:	add	x24, x0, x24
    1cf0:	add	x22, x22, #0x0
    1cf4:	mov	w23, #0x6a                  	// #106
    1cf8:	ldr	x1, [x19, #256]
    1cfc:	b	1d20 <d_print_comp_inner+0x13e0>
    1d00:	mov	x0, x1
    1d04:	add	x1, x1, #0x1
    1d08:	str	x1, [x19, #256]
    1d0c:	cmp	x24, x22
    1d10:	strb	w23, [x19, x0]
    1d14:	strb	w23, [x19, #264]
    1d18:	b.eq	2fec <d_print_comp_inner+0x26ac>  // b.none
    1d1c:	ldrb	w23, [x22], #1
    1d20:	cmp	x1, #0xff
    1d24:	b.ne	1d00 <d_print_comp_inner+0x13c0>  // b.any
    1d28:	ldp	x3, x2, [x19, #272]
    1d2c:	strb	wzr, [x19, #255]
    1d30:	mov	x0, x19
    1d34:	blr	x3
    1d38:	ldr	x2, [x19, #320]
    1d3c:	mov	x1, #0x1                   	// #1
    1d40:	mov	x0, #0x0                   	// #0
    1d44:	add	x2, x2, x1
    1d48:	str	x2, [x19, #320]
    1d4c:	b	1d08 <d_print_comp_inner+0x13c8>
    1d50:	adrp	x24, 0 <d_make_comp>
    1d54:	add	x24, x24, #0x0
    1d58:	mov	x0, x24
    1d5c:	bl	0 <__asan_internal_strlen>
    1d60:	cbz	x0, 2fd0 <d_print_comp_inner+0x2690>
    1d64:	adrp	x22, 78 <d_make_comp+0x78>
    1d68:	add	x24, x0, x24
    1d6c:	add	x22, x22, #0x0
    1d70:	mov	w23, #0x56                  	// #86
    1d74:	ldr	x1, [x19, #256]
    1d78:	b	1d9c <d_print_comp_inner+0x145c>
    1d7c:	mov	x0, x1
    1d80:	add	x1, x1, #0x1
    1d84:	str	x1, [x19, #256]
    1d88:	cmp	x24, x22
    1d8c:	strb	w23, [x19, x0]
    1d90:	strb	w23, [x19, #264]
    1d94:	b.eq	2fd0 <d_print_comp_inner+0x2690>  // b.none
    1d98:	ldrb	w23, [x22], #1
    1d9c:	cmp	x1, #0xff
    1da0:	b.ne	1d7c <d_print_comp_inner+0x143c>  // b.any
    1da4:	ldp	x3, x2, [x19, #272]
    1da8:	strb	wzr, [x19, #255]
    1dac:	mov	x0, x19
    1db0:	blr	x3
    1db4:	ldr	x2, [x19, #320]
    1db8:	mov	x1, #0x1                   	// #1
    1dbc:	mov	x0, #0x0                   	// #0
    1dc0:	add	x2, x2, x1
    1dc4:	str	x2, [x19, #320]
    1dc8:	b	1d84 <d_print_comp_inner+0x1444>
    1dcc:	adrp	x24, 0 <d_make_comp>
    1dd0:	add	x24, x24, #0x0
    1dd4:	mov	x0, x24
    1dd8:	bl	0 <__asan_internal_strlen>
    1ddc:	cbz	x0, 2f28 <d_print_comp_inner+0x25e8>
    1de0:	adrp	x22, 88 <d_ref_qualifier>
    1de4:	add	x24, x0, x24
    1de8:	add	x22, x22, #0x0
    1dec:	mov	w23, #0x63                  	// #99
    1df0:	ldr	x1, [x19, #256]
    1df4:	b	1e18 <d_print_comp_inner+0x14d8>
    1df8:	mov	x0, x1
    1dfc:	add	x1, x1, #0x1
    1e00:	str	x1, [x19, #256]
    1e04:	cmp	x24, x22
    1e08:	strb	w23, [x19, x0]
    1e0c:	strb	w23, [x19, #264]
    1e10:	b.eq	2f28 <d_print_comp_inner+0x25e8>  // b.none
    1e14:	ldrb	w23, [x22], #1
    1e18:	cmp	x1, #0xff
    1e1c:	b.ne	1df8 <d_print_comp_inner+0x14b8>  // b.any
    1e20:	ldp	x3, x2, [x19, #272]
    1e24:	strb	wzr, [x19, #255]
    1e28:	mov	x0, x19
    1e2c:	blr	x3
    1e30:	ldr	x2, [x19, #320]
    1e34:	mov	x1, #0x1                   	// #1
    1e38:	mov	x0, #0x0                   	// #0
    1e3c:	add	x2, x2, x1
    1e40:	str	x2, [x19, #320]
    1e44:	b	1e00 <d_print_comp_inner+0x14c0>
    1e48:	adrp	x24, 0 <d_make_comp>
    1e4c:	add	x24, x24, #0x0
    1e50:	mov	x0, x24
    1e54:	bl	0 <__asan_internal_strlen>
    1e58:	cbz	x0, 2ef0 <d_print_comp_inner+0x25b0>
    1e5c:	adrp	x22, b0 <d_ref_qualifier+0x28>
    1e60:	add	x24, x0, x24
    1e64:	add	x22, x22, #0x0
    1e68:	mov	w23, #0x74                  	// #116
    1e6c:	ldr	x1, [x19, #256]
    1e70:	b	1e94 <d_print_comp_inner+0x1554>
    1e74:	mov	x0, x1
    1e78:	add	x1, x1, #0x1
    1e7c:	str	x1, [x19, #256]
    1e80:	cmp	x24, x22
    1e84:	strb	w23, [x19, x0]
    1e88:	strb	w23, [x19, #264]
    1e8c:	b.eq	2ef0 <d_print_comp_inner+0x25b0>  // b.none
    1e90:	ldrb	w23, [x22], #1
    1e94:	cmp	x1, #0xff
    1e98:	b.ne	1e74 <d_print_comp_inner+0x1534>  // b.any
    1e9c:	ldp	x3, x2, [x19, #272]
    1ea0:	strb	wzr, [x19, #255]
    1ea4:	mov	x0, x19
    1ea8:	blr	x3
    1eac:	ldr	x2, [x19, #320]
    1eb0:	mov	x1, #0x1                   	// #1
    1eb4:	mov	x0, #0x0                   	// #0
    1eb8:	add	x2, x2, x1
    1ebc:	str	x2, [x19, #320]
    1ec0:	b	1e7c <d_print_comp_inner+0x153c>
    1ec4:	adrp	x24, 0 <d_make_comp>
    1ec8:	add	x24, x24, #0x0
    1ecc:	mov	x0, x24
    1ed0:	bl	0 <__asan_internal_strlen>
    1ed4:	cbz	x0, 2ed4 <d_print_comp_inner+0x2594>
    1ed8:	adrp	x22, c0 <d_ref_qualifier+0x38>
    1edc:	add	x24, x0, x24
    1ee0:	add	x22, x22, #0x0
    1ee4:	mov	w23, #0x74                  	// #116
    1ee8:	ldr	x1, [x19, #256]
    1eec:	b	1f10 <d_print_comp_inner+0x15d0>
    1ef0:	mov	x0, x1
    1ef4:	add	x1, x1, #0x1
    1ef8:	str	x1, [x19, #256]
    1efc:	cmp	x24, x22
    1f00:	strb	w23, [x19, x0]
    1f04:	strb	w23, [x19, #264]
    1f08:	b.eq	2ed4 <d_print_comp_inner+0x2594>  // b.none
    1f0c:	ldrb	w23, [x22], #1
    1f10:	cmp	x1, #0xff
    1f14:	b.ne	1ef0 <d_print_comp_inner+0x15b0>  // b.any
    1f18:	ldp	x3, x2, [x19, #272]
    1f1c:	strb	wzr, [x19, #255]
    1f20:	mov	x0, x19
    1f24:	blr	x3
    1f28:	ldr	x2, [x19, #320]
    1f2c:	mov	x1, #0x1                   	// #1
    1f30:	mov	x0, #0x0                   	// #0
    1f34:	add	x2, x2, x1
    1f38:	str	x2, [x19, #320]
    1f3c:	b	1ef8 <d_print_comp_inner+0x15b8>
    1f40:	adrp	x24, 0 <d_make_comp>
    1f44:	add	x24, x24, #0x0
    1f48:	mov	x0, x24
    1f4c:	bl	0 <__asan_internal_strlen>
    1f50:	cbz	x0, 2f0c <d_print_comp_inner+0x25cc>
    1f54:	adrp	x22, d8 <d_ref_qualifier+0x50>
    1f58:	add	x24, x0, x24
    1f5c:	add	x22, x22, #0x0
    1f60:	mov	w23, #0x74                  	// #116
    1f64:	ldr	x1, [x19, #256]
    1f68:	b	1f8c <d_print_comp_inner+0x164c>
    1f6c:	mov	x0, x1
    1f70:	add	x1, x1, #0x1
    1f74:	str	x1, [x19, #256]
    1f78:	cmp	x24, x22
    1f7c:	strb	w23, [x19, x0]
    1f80:	strb	w23, [x19, #264]
    1f84:	b.eq	2f0c <d_print_comp_inner+0x25cc>  // b.none
    1f88:	ldrb	w23, [x22], #1
    1f8c:	cmp	x1, #0xff
    1f90:	b.ne	1f6c <d_print_comp_inner+0x162c>  // b.any
    1f94:	ldp	x3, x2, [x19, #272]
    1f98:	strb	wzr, [x19, #255]
    1f9c:	mov	x0, x19
    1fa0:	blr	x3
    1fa4:	ldr	x2, [x19, #320]
    1fa8:	mov	x1, #0x1                   	// #1
    1fac:	mov	x0, #0x0                   	// #0
    1fb0:	add	x2, x2, x1
    1fb4:	str	x2, [x19, #320]
    1fb8:	b	1f74 <d_print_comp_inner+0x1634>
    1fbc:	stp	x25, x26, [sp, #64]
    1fc0:	ldr	x25, [x20, #8]
    1fc4:	ldr	x22, [x19, #296]
    1fc8:	str	xzr, [x19, #296]
    1fcc:	cbz	x25, 3e80 <d_print_comp_inner+0x3540>
    1fd0:	add	x23, sp, #0x70
    1fd4:	mov	x2, #0x1f                  	// #31
    1fd8:	ldr	x6, [x19, #288]
    1fdc:	mov	x3, x23
    1fe0:	mov	x0, #0x0                   	// #0
    1fe4:	mov	w24, #0x0                   	// #0
    1fe8:	mov	x1, #0x1                   	// #1
    1fec:	movk	x2, #0x1a, lsl #48
    1ff0:	str	wzr, [x3, #16]
    1ff4:	add	w24, w24, #0x1
    1ff8:	str	x0, [x3]
    1ffc:	mov	x4, x3
    2000:	ldr	w5, [x25]
    2004:	str	x25, [x3, #8]
    2008:	str	x6, [x3, #24]
    200c:	sub	w0, w5, #0x1c
    2010:	cmp	w0, #0x34
    2014:	b.hi	2024 <d_print_comp_inner+0x16e4>  // b.pmore
    2018:	lsl	x0, x1, x0
    201c:	tst	x0, x2
    2020:	b.ne	30a0 <d_print_comp_inner+0x2760>  // b.any
    2024:	str	x3, [x19, #296]
    2028:	cmp	w5, #0x2
    202c:	b.eq	3d60 <d_print_comp_inner+0x3420>  // b.none
    2030:	cmp	w5, #0x4
    2034:	b.ne	2044 <d_print_comp_inner+0x1704>  // b.any
    2038:	add	x0, sp, #0x60
    203c:	stp	x6, x25, [sp, #96]
    2040:	str	x0, [x19, #288]
    2044:	ldr	x2, [x20, #16]
    2048:	mov	x0, x19
    204c:	mov	w1, w21
    2050:	bl	4978 <d_print_comp>
    2054:	ldr	w0, [x25]
    2058:	cmp	w0, #0x4
    205c:	b.ne	2068 <d_print_comp_inner+0x1728>  // b.any
    2060:	ldr	x0, [sp, #96]
    2064:	str	x0, [x19, #288]
    2068:	sub	w20, w24, #0x1
    206c:	mov	w24, #0x20                  	// #32
    2070:	ubfiz	x0, x20, #5, #32
    2074:	add	x23, x23, x0
    2078:	b	2080 <d_print_comp_inner+0x1740>
    207c:	sub	w20, w20, #0x1
    2080:	ldr	w0, [x23, #16]
    2084:	cbnz	w0, 20dc <d_print_comp_inner+0x179c>
    2088:	ldr	x0, [x19, #256]
    208c:	add	x1, x0, #0x1
    2090:	cmp	x0, #0xff
    2094:	b.ne	20c0 <d_print_comp_inner+0x1780>  // b.any
    2098:	ldp	x3, x2, [x19, #272]
    209c:	strb	wzr, [x19, #255]
    20a0:	mov	x1, x0
    20a4:	mov	x0, x19
    20a8:	blr	x3
    20ac:	ldr	x2, [x19, #320]
    20b0:	mov	x1, #0x1                   	// #1
    20b4:	mov	x0, #0x0                   	// #0
    20b8:	add	x2, x2, x1
    20bc:	str	x2, [x19, #320]
    20c0:	str	x1, [x19, #256]
    20c4:	mov	w1, w21
    20c8:	ldr	x2, [x23, #8]
    20cc:	strb	w24, [x19, x0]
    20d0:	strb	w24, [x19, #264]
    20d4:	mov	x0, x19
    20d8:	bl	4a10 <d_print_mod>
    20dc:	sub	x23, x23, #0x20
    20e0:	cbnz	w20, 207c <d_print_comp_inner+0x173c>
    20e4:	ldp	x23, x24, [sp, #48]
    20e8:	ldp	x25, x26, [sp, #64]
    20ec:	str	x22, [x19, #296]
    20f0:	ldp	x21, x22, [sp, #32]
    20f4:	b	9a4 <d_print_comp_inner+0x64>
    20f8:	ldr	x22, [x20, #8]
    20fc:	ldr	x24, [x19, #296]
    2100:	str	xzr, [x19, #296]
    2104:	ldr	x23, [x19, #368]
    2108:	str	x20, [x19, #368]
    210c:	tbz	w21, #2, 2124 <d_print_comp_inner+0x17e4>
    2110:	ldr	w0, [x22]
    2114:	cbnz	w0, 2124 <d_print_comp_inner+0x17e4>
    2118:	ldr	w0, [x22, #16]
    211c:	cmp	w0, #0x6
    2120:	b.eq	4470 <d_print_comp_inner+0x3b30>  // b.none
    2124:	mov	x0, x19
    2128:	mov	x2, x22
    212c:	mov	w1, w21
    2130:	bl	4978 <d_print_comp>
    2134:	ldrb	w0, [x19, #264]
    2138:	cmp	w0, #0x3c
    213c:	b.eq	3a08 <d_print_comp_inner+0x30c8>  // b.none
    2140:	ldr	x1, [x19, #256]
    2144:	cmp	x1, #0xff
    2148:	b.eq	2794 <d_print_comp_inner+0x1e54>  // b.none
    214c:	add	x0, x1, #0x1
    2150:	str	x0, [x19, #256]
    2154:	mov	w0, #0x3c                  	// #60
    2158:	strb	w0, [x19, x1]
    215c:	mov	w1, w21
    2160:	strb	w0, [x19, #264]
    2164:	mov	x0, x19
    2168:	ldr	x2, [x20, #16]
    216c:	bl	4978 <d_print_comp>
    2170:	ldrb	w0, [x19, #264]
    2174:	cmp	w0, #0x3e
    2178:	b.eq	39e4 <d_print_comp_inner+0x30a4>  // b.none
    217c:	ldr	x1, [x19, #256]
    2180:	cmp	x1, #0xff
    2184:	b.eq	276c <d_print_comp_inner+0x1e2c>  // b.none
    2188:	add	x0, x1, #0x1
    218c:	str	x0, [x19, #256]
    2190:	mov	w0, #0x3e                  	// #62
    2194:	strb	w0, [x19, x1]
    2198:	strb	w0, [x19, #264]
    219c:	ldp	x21, x22, [sp, #32]
    21a0:	str	x24, [x19, #296]
    21a4:	str	x23, [x19, #368]
    21a8:	ldp	x23, x24, [sp, #48]
    21ac:	b	9a4 <d_print_comp_inner+0x64>
    21b0:	ldr	w0, [x19, #312]
    21b4:	cbz	w0, 3478 <d_print_comp_inner+0x2b38>
    21b8:	adrp	x23, 0 <d_make_comp>
    21bc:	add	x23, x23, #0x0
    21c0:	adrp	x21, 40 <d_make_comp+0x40>
    21c4:	add	x23, x23, #0x5
    21c8:	add	x21, x21, #0x0
    21cc:	mov	w22, #0x61                  	// #97
    21d0:	ldr	x1, [x19, #256]
    21d4:	b	21f8 <d_print_comp_inner+0x18b8>
    21d8:	mov	x0, x1
    21dc:	add	x1, x1, #0x1
    21e0:	str	x1, [x19, #256]
    21e4:	cmp	x23, x21
    21e8:	strb	w22, [x19, x0]
    21ec:	strb	w22, [x19, #264]
    21f0:	b.eq	30d4 <d_print_comp_inner+0x2794>  // b.none
    21f4:	ldrb	w22, [x21], #1
    21f8:	cmp	x1, #0xff
    21fc:	b.ne	21d8 <d_print_comp_inner+0x1898>  // b.any
    2200:	ldp	x3, x2, [x19, #272]
    2204:	strb	wzr, [x19, #255]
    2208:	mov	x0, x19
    220c:	blr	x3
    2210:	ldr	x2, [x19, #320]
    2214:	mov	x1, #0x1                   	// #1
    2218:	mov	x0, #0x0                   	// #0
    221c:	add	x2, x2, x1
    2220:	str	x2, [x19, #320]
    2224:	b	21e0 <d_print_comp_inner+0x18a0>
    2228:	ldr	x1, [x19, #256]
    222c:	add	x0, x1, #0x1
    2230:	cmp	x1, #0xff
    2234:	b.ne	225c <d_print_comp_inner+0x191c>  // b.any
    2238:	ldp	x3, x2, [x19, #272]
    223c:	strb	wzr, [x19, #255]
    2240:	mov	x0, x19
    2244:	blr	x3
    2248:	ldr	x2, [x19, #320]
    224c:	mov	x0, #0x1                   	// #1
    2250:	mov	x1, #0x0                   	// #0
    2254:	add	x2, x2, x0
    2258:	str	x2, [x19, #320]
    225c:	str	x0, [x19, #256]
    2260:	mov	w0, #0x7e                  	// #126
    2264:	strb	w0, [x19, x1]
    2268:	mov	w1, w21
    226c:	strb	w0, [x19, #264]
    2270:	mov	x0, x19
    2274:	ldr	x2, [x20, #16]
    2278:	bl	4978 <d_print_comp>
    227c:	ldp	x21, x22, [sp, #32]
    2280:	ldp	x23, x24, [sp, #48]
    2284:	b	9a4 <d_print_comp_inner+0x64>
    2288:	adrp	x24, 0 <d_make_comp>
    228c:	add	x24, x24, #0x0
    2290:	mov	x0, x24
    2294:	bl	0 <__asan_internal_strlen>
    2298:	cbz	x0, 2e10 <d_print_comp_inner+0x24d0>
    229c:	adrp	x22, 68 <d_make_comp+0x68>
    22a0:	add	x24, x0, x24
    22a4:	add	x22, x22, #0x0
    22a8:	mov	w23, #0x76                  	// #118
    22ac:	ldr	x1, [x19, #256]
    22b0:	b	22d4 <d_print_comp_inner+0x1994>
    22b4:	mov	x0, x1
    22b8:	add	x1, x1, #0x1
    22bc:	str	x1, [x19, #256]
    22c0:	cmp	x24, x22
    22c4:	strb	w23, [x19, x0]
    22c8:	strb	w23, [x19, #264]
    22cc:	b.eq	2e10 <d_print_comp_inner+0x24d0>  // b.none
    22d0:	ldrb	w23, [x22], #1
    22d4:	cmp	x1, #0xff
    22d8:	b.ne	22b4 <d_print_comp_inner+0x1974>  // b.any
    22dc:	ldp	x3, x2, [x19, #272]
    22e0:	strb	wzr, [x19, #255]
    22e4:	mov	x0, x19
    22e8:	blr	x3
    22ec:	ldr	x2, [x19, #320]
    22f0:	mov	x1, #0x1                   	// #1
    22f4:	mov	x0, #0x0                   	// #0
    22f8:	add	x2, x2, x1
    22fc:	str	x2, [x19, #320]
    2300:	b	22bc <d_print_comp_inner+0x197c>
    2304:	ldrsw	x22, [x20, #16]
    2308:	ldr	x20, [x20, #8]
    230c:	tbnz	w21, #2, 3314 <d_print_comp_inner+0x29d4>
    2310:	cbz	x22, 4548 <d_print_comp_inner+0x3c08>
    2314:	add	x22, x20, x22
    2318:	ldr	x1, [x19, #256]
    231c:	b	2340 <d_print_comp_inner+0x1a00>
    2320:	mov	x0, x1
    2324:	add	x1, x1, #0x1
    2328:	str	x1, [x19, #256]
    232c:	add	x20, x20, #0x1
    2330:	strb	w21, [x19, x0]
    2334:	cmp	x20, x22
    2338:	strb	w21, [x19, #264]
    233c:	b.eq	3580 <d_print_comp_inner+0x2c40>  // b.none
    2340:	ldrb	w21, [x20]
    2344:	cmp	x1, #0xff
    2348:	b.ne	2320 <d_print_comp_inner+0x19e0>  // b.any
    234c:	ldp	x3, x2, [x19, #272]
    2350:	strb	wzr, [x19, #255]
    2354:	mov	x0, x19
    2358:	blr	x3
    235c:	ldr	x2, [x19, #320]
    2360:	mov	x1, #0x1                   	// #1
    2364:	mov	x0, #0x0                   	// #0
    2368:	add	x2, x2, x1
    236c:	str	x2, [x19, #320]
    2370:	b	2328 <d_print_comp_inner+0x19e8>
    2374:	ldr	x0, [x20, #8]
    2378:	tbnz	w21, #2, 32a8 <d_print_comp_inner+0x2968>
    237c:	ldrsw	x22, [x0, #8]
    2380:	ldr	x20, [x0]
    2384:	cbz	x22, 453c <d_print_comp_inner+0x3bfc>
    2388:	add	x22, x20, x22
    238c:	ldr	x1, [x19, #256]
    2390:	b	23b4 <d_print_comp_inner+0x1a74>
    2394:	mov	x0, x1
    2398:	add	x1, x1, #0x1
    239c:	str	x1, [x19, #256]
    23a0:	add	x20, x20, #0x1
    23a4:	strb	w21, [x19, x0]
    23a8:	cmp	x22, x20
    23ac:	strb	w21, [x19, #264]
    23b0:	b.eq	3598 <d_print_comp_inner+0x2c58>  // b.none
    23b4:	ldrb	w21, [x20]
    23b8:	cmp	x1, #0xff
    23bc:	b.ne	2394 <d_print_comp_inner+0x1a54>  // b.any
    23c0:	ldp	x3, x2, [x19, #272]
    23c4:	strb	wzr, [x19, #255]
    23c8:	mov	x0, x19
    23cc:	blr	x3
    23d0:	ldr	x2, [x19, #320]
    23d4:	mov	x1, #0x1                   	// #1
    23d8:	mov	x0, #0x0                   	// #0
    23dc:	add	x2, x2, x1
    23e0:	str	x2, [x19, #320]
    23e4:	b	239c <d_print_comp_inner+0x1a5c>
    23e8:	ldr	x2, [x20, #8]
    23ec:	mov	w1, w21
    23f0:	mov	x0, x19
    23f4:	bl	5c30 <d_print_expr_op>
    23f8:	ldp	x21, x22, [sp, #32]
    23fc:	ldp	x23, x24, [sp, #48]
    2400:	b	9a4 <d_print_comp_inner+0x64>
    2404:	ldp	x23, x20, [x20, #8]
    2408:	mov	x22, #0x0                   	// #0
    240c:	ldr	w0, [x23]
    2410:	cmp	w0, #0x32
    2414:	b.eq	3acc <d_print_comp_inner+0x318c>  // b.none
    2418:	cmp	w0, #0x34
    241c:	b.eq	34d8 <d_print_comp_inner+0x2b98>  // b.none
    2420:	mov	x2, x23
    2424:	mov	w1, w21
    2428:	mov	x0, x19
    242c:	bl	5c30 <d_print_expr_op>
    2430:	cbz	x22, 3084 <d_print_comp_inner+0x2744>
    2434:	adrp	x1, 0 <d_make_comp>
    2438:	mov	x0, x22
    243c:	add	x1, x1, #0x0
    2440:	bl	0 <__asan_internal_strcmp>
    2444:	cbz	w0, 40ec <d_print_comp_inner+0x37ac>
    2448:	adrp	x1, 0 <d_make_comp>
    244c:	mov	x0, x22
    2450:	add	x1, x1, #0x0
    2454:	bl	0 <__asan_internal_strcmp>
    2458:	cbnz	w0, 3084 <d_print_comp_inner+0x2744>
    245c:	ldr	x1, [x19, #256]
    2460:	cmp	x1, #0xff
    2464:	b.ne	2488 <d_print_comp_inner+0x1b48>  // b.any
    2468:	ldp	x3, x2, [x19, #272]
    246c:	strb	wzr, [x19, #255]
    2470:	mov	x0, x19
    2474:	blr	x3
    2478:	ldr	x0, [x19, #320]
    247c:	mov	x1, #0x0                   	// #0
    2480:	add	x0, x0, #0x1
    2484:	str	x0, [x19, #320]
    2488:	add	x0, x1, #0x1
    248c:	str	x0, [x19, #256]
    2490:	mov	w0, #0x28                  	// #40
    2494:	strb	w0, [x19, x1]
    2498:	strb	w0, [x19, #264]
    249c:	mov	w1, w21
    24a0:	mov	x2, x20
    24a4:	mov	x0, x19
    24a8:	bl	4978 <d_print_comp>
    24ac:	ldr	x1, [x19, #256]
    24b0:	cmp	x1, #0xff
    24b4:	b.ne	24d8 <d_print_comp_inner+0x1b98>  // b.any
    24b8:	ldp	x3, x2, [x19, #272]
    24bc:	strb	wzr, [x19, #255]
    24c0:	mov	x0, x19
    24c4:	blr	x3
    24c8:	ldr	x0, [x19, #320]
    24cc:	mov	x1, #0x0                   	// #0
    24d0:	add	x0, x0, #0x1
    24d4:	str	x0, [x19, #320]
    24d8:	add	x0, x1, #0x1
    24dc:	str	x0, [x19, #256]
    24e0:	mov	w0, #0x29                  	// #41
    24e4:	strb	w0, [x19, x1]
    24e8:	strb	w0, [x19, #264]
    24ec:	ldp	x21, x22, [sp, #32]
    24f0:	ldp	x23, x24, [sp, #48]
    24f4:	b	9a4 <d_print_comp_inner+0x64>
    24f8:	adrp	x24, 0 <d_make_comp>
    24fc:	add	x24, x24, #0x0
    2500:	mov	x0, x24
    2504:	bl	0 <__asan_internal_strlen>
    2508:	cbz	x0, 2dc0 <d_print_comp_inner+0x2480>
    250c:	adrp	x22, 240 <d_append_buffer+0x68>
    2510:	add	x24, x0, x24
    2514:	add	x22, x22, #0x0
    2518:	mov	w23, #0x6f                  	// #111
    251c:	ldr	x1, [x19, #256]
    2520:	b	2544 <d_print_comp_inner+0x1c04>
    2524:	mov	x0, x1
    2528:	add	x1, x1, #0x1
    252c:	str	x1, [x19, #256]
    2530:	cmp	x24, x22
    2534:	strb	w23, [x19, x0]
    2538:	strb	w23, [x19, #264]
    253c:	b.eq	2dc0 <d_print_comp_inner+0x2480>  // b.none
    2540:	ldrb	w23, [x22], #1
    2544:	cmp	x1, #0xff
    2548:	b.ne	2524 <d_print_comp_inner+0x1be4>  // b.any
    254c:	ldp	x3, x2, [x19, #272]
    2550:	strb	wzr, [x19, #255]
    2554:	mov	x0, x19
    2558:	blr	x3
    255c:	ldr	x2, [x19, #320]
    2560:	mov	x1, #0x1                   	// #1
    2564:	mov	x0, #0x0                   	// #0
    2568:	add	x2, x2, x1
    256c:	str	x2, [x19, #320]
    2570:	b	252c <d_print_comp_inner+0x1bec>
    2574:	ldr	x1, [x19, #256]
    2578:	ldrb	w20, [x20, #8]
    257c:	add	x0, x1, #0x1
    2580:	cmp	x1, #0xff
    2584:	b.ne	25ac <d_print_comp_inner+0x1c6c>  // b.any
    2588:	ldp	x3, x2, [x19, #272]
    258c:	strb	wzr, [x19, #255]
    2590:	mov	x0, x19
    2594:	blr	x3
    2598:	ldr	x2, [x19, #320]
    259c:	mov	x0, #0x1                   	// #1
    25a0:	mov	x1, #0x0                   	// #0
    25a4:	add	x2, x2, x0
    25a8:	str	x2, [x19, #320]
    25ac:	str	x0, [x19, #256]
    25b0:	strb	w20, [x19, x1]
    25b4:	strb	w20, [x19, #264]
    25b8:	ldp	x21, x22, [sp, #32]
    25bc:	ldp	x23, x24, [sp, #48]
    25c0:	b	9a4 <d_print_comp_inner+0x64>
    25c4:	ldr	w2, [x20, #8]
    25c8:	adrp	x1, 0 <d_make_comp>
    25cc:	add	x1, x1, #0x0
    25d0:	add	x20, sp, #0x70
    25d4:	mov	x0, x20
    25d8:	bl	0 <sprintf>
    25dc:	mov	x0, x20
    25e0:	bl	0 <__asan_internal_strlen>
    25e4:	cbz	x0, 42ac <d_print_comp_inner+0x396c>
    25e8:	add	x22, x20, x0
    25ec:	ldr	x1, [x19, #256]
    25f0:	b	2614 <d_print_comp_inner+0x1cd4>
    25f4:	mov	x0, x1
    25f8:	add	x1, x1, #0x1
    25fc:	str	x1, [x19, #256]
    2600:	add	x20, x20, #0x1
    2604:	strb	w21, [x19, x0]
    2608:	cmp	x22, x20
    260c:	strb	w21, [x19, #264]
    2610:	b.eq	3028 <d_print_comp_inner+0x26e8>  // b.none
    2614:	ldrb	w21, [x20]
    2618:	cmp	x1, #0xff
    261c:	b.ne	25f4 <d_print_comp_inner+0x1cb4>  // b.any
    2620:	ldp	x3, x2, [x19, #272]
    2624:	strb	wzr, [x19, #255]
    2628:	mov	x0, x19
    262c:	blr	x3
    2630:	ldr	x2, [x19, #320]
    2634:	mov	x1, #0x1                   	// #1
    2638:	mov	x0, #0x0                   	// #0
    263c:	add	x2, x2, x1
    2640:	str	x2, [x19, #320]
    2644:	b	25fc <d_print_comp_inner+0x1cbc>
    2648:	adrp	x24, 0 <d_make_comp>
    264c:	add	x24, x24, #0x0
    2650:	mov	x0, x24
    2654:	bl	0 <__asan_internal_strlen>
    2658:	cbz	x0, 2d00 <d_print_comp_inner+0x23c0>
    265c:	adrp	x22, 2d0 <d_number.isra.0+0x50>
    2660:	add	x24, x0, x24
    2664:	add	x22, x22, #0x0
    2668:	mov	w23, #0x64                  	// #100
    266c:	ldr	x1, [x19, #256]
    2670:	b	2694 <d_print_comp_inner+0x1d54>
    2674:	mov	x0, x1
    2678:	add	x1, x1, #0x1
    267c:	str	x1, [x19, #256]
    2680:	cmp	x24, x22
    2684:	strb	w23, [x19, x0]
    2688:	strb	w23, [x19, #264]
    268c:	b.eq	2d00 <d_print_comp_inner+0x23c0>  // b.none
    2690:	ldrb	w23, [x22], #1
    2694:	cmp	x1, #0xff
    2698:	b.ne	2674 <d_print_comp_inner+0x1d34>  // b.any
    269c:	ldp	x3, x2, [x19, #272]
    26a0:	strb	wzr, [x19, #255]
    26a4:	mov	x0, x19
    26a8:	blr	x3
    26ac:	ldr	x2, [x19, #320]
    26b0:	mov	x1, #0x1                   	// #1
    26b4:	mov	x0, #0x0                   	// #0
    26b8:	add	x2, x2, x1
    26bc:	str	x2, [x19, #320]
    26c0:	b	267c <d_print_comp_inner+0x1d3c>
    26c4:	adrp	x24, 0 <d_make_comp>
    26c8:	add	x24, x24, #0x0
    26cc:	mov	x0, x24
    26d0:	bl	0 <__asan_internal_strlen>
    26d4:	cbz	x0, 2ce4 <d_print_comp_inner+0x23a4>
    26d8:	adrp	x22, 2f8 <d_number.isra.0+0x78>
    26dc:	add	x24, x0, x24
    26e0:	add	x22, x22, #0x0
    26e4:	mov	w23, #0x67                  	// #103
    26e8:	ldr	x1, [x19, #256]
    26ec:	b	2710 <d_print_comp_inner+0x1dd0>
    26f0:	mov	x0, x1
    26f4:	add	x1, x1, #0x1
    26f8:	str	x1, [x19, #256]
    26fc:	cmp	x24, x22
    2700:	strb	w23, [x19, x0]
    2704:	strb	w23, [x19, #264]
    2708:	b.eq	2ce4 <d_print_comp_inner+0x23a4>  // b.none
    270c:	ldrb	w23, [x22], #1
    2710:	cmp	x1, #0xff
    2714:	b.ne	26f0 <d_print_comp_inner+0x1db0>  // b.any
    2718:	ldp	x3, x2, [x19, #272]
    271c:	strb	wzr, [x19, #255]
    2720:	mov	x0, x19
    2724:	blr	x3
    2728:	ldr	x2, [x19, #320]
    272c:	mov	x1, #0x1                   	// #1
    2730:	mov	x0, #0x0                   	// #0
    2734:	add	x2, x2, x1
    2738:	str	x2, [x19, #320]
    273c:	b	26f8 <d_print_comp_inner+0x1db8>
    2740:	ldr	x2, [x20, #8]
    2744:	mov	w1, w21
    2748:	mov	x0, x19
    274c:	bl	4978 <d_print_comp>
    2750:	ldr	x2, [x20, #16]
    2754:	mov	w1, w21
    2758:	mov	x0, x19
    275c:	bl	4978 <d_print_comp>
    2760:	ldp	x21, x22, [sp, #32]
    2764:	ldp	x23, x24, [sp, #48]
    2768:	b	9a4 <d_print_comp_inner+0x64>
    276c:	ldp	x3, x2, [x19, #272]
    2770:	strb	wzr, [x19, #255]
    2774:	mov	x0, x19
    2778:	blr	x3
    277c:	ldr	x2, [x19, #320]
    2780:	mov	x0, #0x1                   	// #1
    2784:	mov	x1, #0x0                   	// #0
    2788:	add	x2, x2, x0
    278c:	str	x2, [x19, #320]
    2790:	b	218c <d_print_comp_inner+0x184c>
    2794:	ldp	x3, x2, [x19, #272]
    2798:	strb	wzr, [x19, #255]
    279c:	mov	x0, x19
    27a0:	blr	x3
    27a4:	ldr	x2, [x19, #320]
    27a8:	mov	x0, #0x1                   	// #1
    27ac:	mov	x1, #0x0                   	// #0
    27b0:	add	x2, x2, x0
    27b4:	str	x2, [x19, #320]
    27b8:	b	2150 <d_print_comp_inner+0x1810>
    27bc:	ldr	x2, [x0, #8]
    27c0:	add	x0, sp, #0x70
    27c4:	ldr	x1, [x19, #288]
    27c8:	stp	x4, x20, [sp, #112]
    27cc:	str	wzr, [sp, #128]
    27d0:	str	x1, [sp, #136]
    27d4:	str	x0, [x19, #296]
    27d8:	cbnz	x2, a08 <d_print_comp_inner+0xc8>
    27dc:	b	a04 <d_print_comp_inner+0xc4>
    27e0:	ldp	x21, x22, [sp, #32]
    27e4:	ldp	x23, x24, [sp, #48]
    27e8:	b	9a4 <d_print_comp_inner+0x64>
    27ec:	ldr	x2, [x20, #16]
    27f0:	mov	w1, w21
    27f4:	mov	x0, x19
    27f8:	bl	4978 <d_print_comp>
    27fc:	ldr	x1, [x19, #256]
    2800:	add	x0, x1, #0x1
    2804:	cmp	x1, #0xff
    2808:	b.ne	2830 <d_print_comp_inner+0x1ef0>  // b.any
    280c:	ldp	x3, x2, [x19, #272]
    2810:	strb	wzr, [x19, #255]
    2814:	mov	x0, x19
    2818:	blr	x3
    281c:	ldr	x2, [x19, #320]
    2820:	mov	x0, #0x1                   	// #1
    2824:	mov	x1, #0x0                   	// #0
    2828:	add	x2, x2, x0
    282c:	str	x2, [x19, #320]
    2830:	str	x0, [x19, #256]
    2834:	mov	w0, #0x5d                  	// #93
    2838:	strb	w0, [x19, x1]
    283c:	strb	w0, [x19, #264]
    2840:	ldp	x21, x22, [sp, #32]
    2844:	ldp	x23, x24, [sp, #48]
    2848:	b	9a4 <d_print_comp_inner+0x64>
    284c:	ldr	x2, [x20, #16]
    2850:	mov	w1, w21
    2854:	mov	x0, x19
    2858:	bl	4978 <d_print_comp>
    285c:	ldp	x21, x22, [sp, #32]
    2860:	ldp	x23, x24, [sp, #48]
    2864:	b	9a4 <d_print_comp_inner+0x64>
    2868:	ldr	x2, [x20, #8]
    286c:	mov	w1, w21
    2870:	mov	x0, x19
    2874:	bl	4978 <d_print_comp>
    2878:	ldp	x21, x22, [sp, #32]
    287c:	ldp	x23, x24, [sp, #48]
    2880:	b	9a4 <d_print_comp_inner+0x64>
    2884:	ldr	x2, [x20, #16]
    2888:	mov	w1, w21
    288c:	mov	x0, x19
    2890:	adrp	x24, 0 <d_make_comp>
    2894:	add	x24, x24, #0x0
    2898:	bl	4978 <d_print_comp>
    289c:	mov	x0, x24
    28a0:	bl	0 <__asan_internal_strlen>
    28a4:	cbz	x0, 2910 <d_print_comp_inner+0x1fd0>
    28a8:	adrp	x22, 1b8 <d_count_templates_scopes+0xc8>
    28ac:	add	x24, x0, x24
    28b0:	add	x22, x22, #0x0
    28b4:	mov	w23, #0x20                  	// #32
    28b8:	ldr	x1, [x19, #256]
    28bc:	b	28e0 <d_print_comp_inner+0x1fa0>
    28c0:	mov	x0, x1
    28c4:	add	x1, x1, #0x1
    28c8:	str	x1, [x19, #256]
    28cc:	cmp	x24, x22
    28d0:	strb	w23, [x19, x0]
    28d4:	strb	w23, [x19, #264]
    28d8:	b.eq	2910 <d_print_comp_inner+0x1fd0>  // b.none
    28dc:	ldrb	w23, [x22], #1
    28e0:	cmp	x1, #0xff
    28e4:	b.ne	28c0 <d_print_comp_inner+0x1f80>  // b.any
    28e8:	ldp	x3, x2, [x19, #272]
    28ec:	strb	wzr, [x19, #255]
    28f0:	mov	x0, x19
    28f4:	blr	x3
    28f8:	ldr	x2, [x19, #320]
    28fc:	mov	x1, #0x1                   	// #1
    2900:	mov	x0, #0x0                   	// #0
    2904:	add	x2, x2, x1
    2908:	str	x2, [x19, #320]
    290c:	b	28c8 <d_print_comp_inner+0x1f88>
    2910:	ldr	x2, [x20, #8]
    2914:	mov	w1, w21
    2918:	mov	x0, x19
    291c:	bl	4978 <d_print_comp>
    2920:	ldp	x21, x22, [sp, #32]
    2924:	ldp	x23, x24, [sp, #48]
    2928:	b	9a4 <d_print_comp_inner+0x64>
    292c:	ldr	x2, [x20, #8]
    2930:	mov	w1, w21
    2934:	mov	x0, x19
    2938:	bl	4978 <d_print_comp>
    293c:	ldp	x21, x22, [sp, #32]
    2940:	ldp	x23, x24, [sp, #48]
    2944:	b	9a4 <d_print_comp_inner+0x64>
    2948:	ldr	x2, [x20, #8]
    294c:	mov	w1, w21
    2950:	mov	x0, x19
    2954:	bl	4978 <d_print_comp>
    2958:	ldp	x21, x22, [sp, #32]
    295c:	ldp	x23, x24, [sp, #48]
    2960:	b	9a4 <d_print_comp_inner+0x64>
    2964:	ldr	x20, [x24, #8]
    2968:	ldrb	w0, [x20]
    296c:	sub	w0, w0, #0x61
    2970:	and	w0, w0, #0xff
    2974:	cmp	w0, #0x19
    2978:	b.hi	29c4 <d_print_comp_inner+0x2084>  // b.pmore
    297c:	ldr	x1, [x19, #256]
    2980:	add	x0, x1, #0x1
    2984:	cmp	x1, #0xff
    2988:	b.ne	29b4 <d_print_comp_inner+0x2074>  // b.any
    298c:	ldp	x3, x2, [x19, #272]
    2990:	strb	wzr, [x19, #255]
    2994:	mov	x0, x19
    2998:	blr	x3
    299c:	ldr	x2, [x19, #320]
    29a0:	mov	x0, #0x1                   	// #1
    29a4:	mov	x1, #0x0                   	// #0
    29a8:	add	x2, x2, x0
    29ac:	ldr	x20, [x24, #8]
    29b0:	str	x2, [x19, #320]
    29b4:	str	x0, [x19, #256]
    29b8:	mov	w0, #0x20                  	// #32
    29bc:	strb	w0, [x19, x1]
    29c0:	strb	w0, [x19, #264]
    29c4:	sxtw	x22, w23
    29c8:	sub	w0, w23, #0x1
    29cc:	add	x1, x20, x22
    29d0:	sxtw	x0, w0
    29d4:	ldurb	w1, [x1, #-1]
    29d8:	cmp	w1, #0x20
    29dc:	csel	x22, x22, x0, ne  // ne = any
    29e0:	cbz	x22, 4208 <d_print_comp_inner+0x38c8>
    29e4:	add	x22, x20, x22
    29e8:	ldr	x1, [x19, #256]
    29ec:	b	2a10 <d_print_comp_inner+0x20d0>
    29f0:	mov	x0, x1
    29f4:	add	x1, x1, #0x1
    29f8:	str	x1, [x19, #256]
    29fc:	add	x20, x20, #0x1
    2a00:	strb	w21, [x19, x0]
    2a04:	cmp	x20, x22
    2a08:	strb	w21, [x19, #264]
    2a0c:	b.eq	3034 <d_print_comp_inner+0x26f4>  // b.none
    2a10:	ldrb	w21, [x20]
    2a14:	cmp	x1, #0xff
    2a18:	b.ne	29f0 <d_print_comp_inner+0x20b0>  // b.any
    2a1c:	ldp	x3, x2, [x19, #272]
    2a20:	strb	wzr, [x19, #255]
    2a24:	mov	x0, x19
    2a28:	blr	x3
    2a2c:	ldr	x2, [x19, #320]
    2a30:	mov	x1, #0x1                   	// #1
    2a34:	mov	x0, #0x0                   	// #0
    2a38:	add	x2, x2, x1
    2a3c:	str	x2, [x19, #320]
    2a40:	b	29f8 <d_print_comp_inner+0x20b8>
    2a44:	ldr	x2, [x20, #8]
    2a48:	mov	w1, w21
    2a4c:	mov	x0, x19
    2a50:	bl	4978 <d_print_comp>
    2a54:	ldp	x21, x22, [sp, #32]
    2a58:	ldp	x23, x24, [sp, #48]
    2a5c:	b	9a4 <d_print_comp_inner+0x64>
    2a60:	ldr	x2, [x20, #8]
    2a64:	mov	w1, w21
    2a68:	mov	x0, x19
    2a6c:	bl	4978 <d_print_comp>
    2a70:	ldp	x21, x22, [sp, #32]
    2a74:	ldp	x23, x24, [sp, #48]
    2a78:	b	9a4 <d_print_comp_inner+0x64>
    2a7c:	ldr	x2, [x20, #8]
    2a80:	adrp	x1, 0 <d_make_comp>
    2a84:	add	x1, x1, #0x0
    2a88:	add	x20, sp, #0x70
    2a8c:	add	w2, w2, #0x1
    2a90:	mov	x0, x20
    2a94:	bl	0 <sprintf>
    2a98:	mov	x0, x20
    2a9c:	bl	0 <__asan_internal_strlen>
    2aa0:	ldr	x1, [x19, #256]
    2aa4:	cbz	x0, 2b04 <d_print_comp_inner+0x21c4>
    2aa8:	add	x22, x20, x0
    2aac:	b	2ad0 <d_print_comp_inner+0x2190>
    2ab0:	mov	x0, x1
    2ab4:	add	x1, x1, #0x1
    2ab8:	str	x1, [x19, #256]
    2abc:	add	x20, x20, #0x1
    2ac0:	strb	w21, [x19, x0]
    2ac4:	cmp	x20, x22
    2ac8:	strb	w21, [x19, #264]
    2acc:	b.eq	2b04 <d_print_comp_inner+0x21c4>  // b.none
    2ad0:	ldrb	w21, [x20]
    2ad4:	cmp	x1, #0xff
    2ad8:	b.ne	2ab0 <d_print_comp_inner+0x2170>  // b.any
    2adc:	ldp	x3, x2, [x19, #272]
    2ae0:	strb	wzr, [x19, #255]
    2ae4:	mov	x0, x19
    2ae8:	blr	x3
    2aec:	ldr	x2, [x19, #320]
    2af0:	mov	x1, #0x1                   	// #1
    2af4:	mov	x0, #0x0                   	// #0
    2af8:	add	x2, x2, x1
    2afc:	str	x2, [x19, #320]
    2b00:	b	2ab8 <d_print_comp_inner+0x2178>
    2b04:	add	x0, x1, #0x1
    2b08:	cmp	x1, #0xff
    2b0c:	b.ne	2b34 <d_print_comp_inner+0x21f4>  // b.any
    2b10:	ldp	x3, x2, [x19, #272]
    2b14:	strb	wzr, [x19, #255]
    2b18:	mov	x0, x19
    2b1c:	blr	x3
    2b20:	ldr	x2, [x19, #320]
    2b24:	mov	x0, #0x1                   	// #1
    2b28:	mov	x1, #0x0                   	// #0
    2b2c:	add	x2, x2, x0
    2b30:	str	x2, [x19, #320]
    2b34:	str	x0, [x19, #256]
    2b38:	mov	w0, #0x7d                  	// #125
    2b3c:	strb	w0, [x19, x1]
    2b40:	strb	w0, [x19, #264]
    2b44:	ldp	x21, x22, [sp, #32]
    2b48:	ldp	x23, x24, [sp, #48]
    2b4c:	b	9a4 <d_print_comp_inner+0x64>
    2b50:	ldr	w3, [x19, #312]
    2b54:	mov	x0, x19
    2b58:	ldr	x2, [x20, #8]
    2b5c:	add	w3, w3, #0x1
    2b60:	str	w3, [x19, #312]
    2b64:	mov	w1, w21
    2b68:	adrp	x23, 0 <d_make_comp>
    2b6c:	add	x23, x23, #0x0
    2b70:	bl	4978 <d_print_comp>
    2b74:	ldr	w0, [x19, #312]
    2b78:	sub	w0, w0, #0x1
    2b7c:	str	w0, [x19, #312]
    2b80:	mov	x0, x23
    2b84:	bl	0 <__asan_internal_strlen>
    2b88:	cbz	x0, 2bf4 <d_print_comp_inner+0x22b4>
    2b8c:	adrp	x21, 348 <d_number.isra.0+0xc8>
    2b90:	add	x23, x0, x23
    2b94:	add	x21, x21, #0x0
    2b98:	mov	w22, #0x29                  	// #41
    2b9c:	ldr	x1, [x19, #256]
    2ba0:	b	2bc4 <d_print_comp_inner+0x2284>
    2ba4:	mov	x0, x1
    2ba8:	add	x1, x1, #0x1
    2bac:	str	x1, [x19, #256]
    2bb0:	cmp	x21, x23
    2bb4:	strb	w22, [x19, x0]
    2bb8:	strb	w22, [x19, #264]
    2bbc:	b.eq	2bf4 <d_print_comp_inner+0x22b4>  // b.none
    2bc0:	ldrb	w22, [x21], #1
    2bc4:	cmp	x1, #0xff
    2bc8:	b.ne	2ba4 <d_print_comp_inner+0x2264>  // b.any
    2bcc:	ldp	x3, x2, [x19, #272]
    2bd0:	strb	wzr, [x19, #255]
    2bd4:	mov	x0, x19
    2bd8:	blr	x3
    2bdc:	ldr	x2, [x19, #320]
    2be0:	mov	x1, #0x1                   	// #1
    2be4:	mov	x0, #0x0                   	// #0
    2be8:	add	x2, x2, x1
    2bec:	str	x2, [x19, #320]
    2bf0:	b	2bac <d_print_comp_inner+0x226c>
    2bf4:	ldr	w2, [x20, #16]
    2bf8:	adrp	x1, 0 <d_make_comp>
    2bfc:	add	x1, x1, #0x0
    2c00:	add	x20, sp, #0x70
    2c04:	add	w2, w2, #0x1
    2c08:	mov	x0, x20
    2c0c:	bl	0 <sprintf>
    2c10:	mov	x0, x20
    2c14:	bl	0 <__asan_internal_strlen>
    2c18:	ldr	x1, [x19, #256]
    2c1c:	cbz	x0, 2c7c <d_print_comp_inner+0x233c>
    2c20:	add	x22, x20, x0
    2c24:	b	2c48 <d_print_comp_inner+0x2308>
    2c28:	mov	x0, x1
    2c2c:	add	x1, x1, #0x1
    2c30:	str	x1, [x19, #256]
    2c34:	add	x20, x20, #0x1
    2c38:	strb	w21, [x19, x0]
    2c3c:	cmp	x22, x20
    2c40:	strb	w21, [x19, #264]
    2c44:	b.eq	2c7c <d_print_comp_inner+0x233c>  // b.none
    2c48:	ldrb	w21, [x20]
    2c4c:	cmp	x1, #0xff
    2c50:	b.ne	2c28 <d_print_comp_inner+0x22e8>  // b.any
    2c54:	ldp	x3, x2, [x19, #272]
    2c58:	strb	wzr, [x19, #255]
    2c5c:	mov	x0, x19
    2c60:	blr	x3
    2c64:	ldr	x2, [x19, #320]
    2c68:	mov	x1, #0x1                   	// #1
    2c6c:	mov	x0, #0x0                   	// #0
    2c70:	add	x2, x2, x1
    2c74:	str	x2, [x19, #320]
    2c78:	b	2c30 <d_print_comp_inner+0x22f0>
    2c7c:	add	x0, x1, #0x1
    2c80:	cmp	x1, #0xff
    2c84:	b.ne	2cac <d_print_comp_inner+0x236c>  // b.any
    2c88:	ldp	x3, x2, [x19, #272]
    2c8c:	strb	wzr, [x19, #255]
    2c90:	mov	x0, x19
    2c94:	blr	x3
    2c98:	ldr	x2, [x19, #320]
    2c9c:	mov	x0, #0x1                   	// #1
    2ca0:	mov	x1, #0x0                   	// #0
    2ca4:	add	x2, x2, x0
    2ca8:	str	x2, [x19, #320]
    2cac:	str	x0, [x19, #256]
    2cb0:	mov	w0, #0x7d                  	// #125
    2cb4:	strb	w0, [x19, x1]
    2cb8:	strb	w0, [x19, #264]
    2cbc:	ldp	x21, x22, [sp, #32]
    2cc0:	ldp	x23, x24, [sp, #48]
    2cc4:	b	9a4 <d_print_comp_inner+0x64>
    2cc8:	ldr	x2, [x20, #8]
    2ccc:	mov	w1, w21
    2cd0:	mov	x0, x19
    2cd4:	bl	4978 <d_print_comp>
    2cd8:	ldp	x21, x22, [sp, #32]
    2cdc:	ldp	x23, x24, [sp, #48]
    2ce0:	b	9a4 <d_print_comp_inner+0x64>
    2ce4:	ldr	x2, [x20, #8]
    2ce8:	mov	w1, w21
    2cec:	mov	x0, x19
    2cf0:	bl	4978 <d_print_comp>
    2cf4:	ldp	x21, x22, [sp, #32]
    2cf8:	ldp	x23, x24, [sp, #48]
    2cfc:	b	9a4 <d_print_comp_inner+0x64>
    2d00:	ldr	x2, [x20, #8]
    2d04:	mov	w1, w21
    2d08:	mov	x0, x19
    2d0c:	bl	4978 <d_print_comp>
    2d10:	ldr	x1, [x19, #256]
    2d14:	add	x0, x1, #0x1
    2d18:	cmp	x1, #0xff
    2d1c:	b.ne	2d44 <d_print_comp_inner+0x2404>  // b.any
    2d20:	ldp	x3, x2, [x19, #272]
    2d24:	strb	wzr, [x19, #255]
    2d28:	mov	x0, x19
    2d2c:	blr	x3
    2d30:	ldr	x2, [x19, #320]
    2d34:	mov	x0, #0x1                   	// #1
    2d38:	mov	x1, #0x0                   	// #0
    2d3c:	add	x2, x2, x0
    2d40:	str	x2, [x19, #320]
    2d44:	str	x0, [x19, #256]
    2d48:	mov	w0, #0x29                  	// #41
    2d4c:	strb	w0, [x19, x1]
    2d50:	strb	w0, [x19, #264]
    2d54:	ldp	x21, x22, [sp, #32]
    2d58:	ldp	x23, x24, [sp, #48]
    2d5c:	b	9a4 <d_print_comp_inner+0x64>
    2d60:	ldr	x2, [x20, #16]
    2d64:	mov	w1, w21
    2d68:	mov	x0, x19
    2d6c:	bl	4978 <d_print_comp>
    2d70:	ldr	x1, [x19, #256]
    2d74:	add	x0, x1, #0x1
    2d78:	cmp	x1, #0xff
    2d7c:	b.ne	2da4 <d_print_comp_inner+0x2464>  // b.any
    2d80:	ldp	x3, x2, [x19, #272]
    2d84:	strb	wzr, [x19, #255]
    2d88:	mov	x0, x19
    2d8c:	blr	x3
    2d90:	ldr	x2, [x19, #320]
    2d94:	mov	x0, #0x1                   	// #1
    2d98:	mov	x1, #0x0                   	// #0
    2d9c:	add	x2, x2, x0
    2da0:	str	x2, [x19, #320]
    2da4:	str	x0, [x19, #256]
    2da8:	mov	w0, #0x5d                  	// #93
    2dac:	strb	w0, [x19, x1]
    2db0:	strb	w0, [x19, #264]
    2db4:	ldp	x21, x22, [sp, #32]
    2db8:	ldp	x23, x24, [sp, #48]
    2dbc:	b	9a4 <d_print_comp_inner+0x64>
    2dc0:	ldr	x1, [x19, #368]
    2dc4:	cbz	x1, 2dd8 <d_print_comp_inner+0x2498>
    2dc8:	ldr	x2, [x19, #288]
    2dcc:	add	x0, sp, #0x70
    2dd0:	stp	x2, x1, [sp, #112]
    2dd4:	str	x0, [x19, #288]
    2dd8:	ldr	x2, [x20, #8]
    2ddc:	ldr	w0, [x2]
    2de0:	cmp	w0, #0x4
    2de4:	b.eq	36c8 <d_print_comp_inner+0x2d88>  // b.none
    2de8:	mov	x0, x19
    2dec:	mov	w1, w21
    2df0:	bl	4978 <d_print_comp>
    2df4:	ldr	x0, [x19, #368]
    2df8:	cbz	x0, 3d54 <d_print_comp_inner+0x3414>
    2dfc:	ldr	x0, [sp, #112]
    2e00:	ldp	x21, x22, [sp, #32]
    2e04:	ldp	x23, x24, [sp, #48]
    2e08:	str	x0, [x19, #288]
    2e0c:	b	9a4 <d_print_comp_inner+0x64>
    2e10:	ldr	x2, [x20, #8]
    2e14:	mov	w1, w21
    2e18:	mov	x0, x19
    2e1c:	bl	4978 <d_print_comp>
    2e20:	ldp	x21, x22, [sp, #32]
    2e24:	ldp	x23, x24, [sp, #48]
    2e28:	b	9a4 <d_print_comp_inner+0x64>
    2e2c:	ldr	x2, [x20, #8]
    2e30:	mov	w1, w21
    2e34:	mov	x0, x19
    2e38:	bl	4978 <d_print_comp>
    2e3c:	ldp	x21, x22, [sp, #32]
    2e40:	ldp	x23, x24, [sp, #48]
    2e44:	b	9a4 <d_print_comp_inner+0x64>
    2e48:	ldr	x2, [x20, #8]
    2e4c:	mov	w1, w21
    2e50:	mov	x0, x19
    2e54:	bl	4978 <d_print_comp>
    2e58:	ldp	x21, x22, [sp, #32]
    2e5c:	ldp	x23, x24, [sp, #48]
    2e60:	b	9a4 <d_print_comp_inner+0x64>
    2e64:	ldr	x2, [x20, #8]
    2e68:	mov	w1, w21
    2e6c:	mov	x0, x19
    2e70:	bl	4978 <d_print_comp>
    2e74:	ldp	x21, x22, [sp, #32]
    2e78:	ldp	x23, x24, [sp, #48]
    2e7c:	b	9a4 <d_print_comp_inner+0x64>
    2e80:	ldr	x2, [x20, #8]
    2e84:	mov	w1, w21
    2e88:	mov	x0, x19
    2e8c:	bl	4978 <d_print_comp>
    2e90:	ldp	x21, x22, [sp, #32]
    2e94:	ldp	x23, x24, [sp, #48]
    2e98:	b	9a4 <d_print_comp_inner+0x64>
    2e9c:	ldr	x2, [x20, #8]
    2ea0:	mov	w1, w21
    2ea4:	mov	x0, x19
    2ea8:	bl	4978 <d_print_comp>
    2eac:	ldp	x21, x22, [sp, #32]
    2eb0:	ldp	x23, x24, [sp, #48]
    2eb4:	b	9a4 <d_print_comp_inner+0x64>
    2eb8:	ldr	x2, [x20, #8]
    2ebc:	mov	w1, w21
    2ec0:	mov	x0, x19
    2ec4:	bl	4978 <d_print_comp>
    2ec8:	ldp	x21, x22, [sp, #32]
    2ecc:	ldp	x23, x24, [sp, #48]
    2ed0:	b	9a4 <d_print_comp_inner+0x64>
    2ed4:	ldr	x2, [x20, #8]
    2ed8:	mov	w1, w21
    2edc:	mov	x0, x19
    2ee0:	bl	4978 <d_print_comp>
    2ee4:	ldp	x21, x22, [sp, #32]
    2ee8:	ldp	x23, x24, [sp, #48]
    2eec:	b	9a4 <d_print_comp_inner+0x64>
    2ef0:	ldr	x2, [x20, #8]
    2ef4:	mov	w1, w21
    2ef8:	mov	x0, x19
    2efc:	bl	4978 <d_print_comp>
    2f00:	ldp	x21, x22, [sp, #32]
    2f04:	ldp	x23, x24, [sp, #48]
    2f08:	b	9a4 <d_print_comp_inner+0x64>
    2f0c:	ldr	x2, [x20, #8]
    2f10:	mov	w1, w21
    2f14:	mov	x0, x19
    2f18:	bl	4978 <d_print_comp>
    2f1c:	ldp	x21, x22, [sp, #32]
    2f20:	ldp	x23, x24, [sp, #48]
    2f24:	b	9a4 <d_print_comp_inner+0x64>
    2f28:	ldr	x2, [x20, #8]
    2f2c:	mov	w1, w21
    2f30:	mov	x0, x19
    2f34:	adrp	x24, 0 <d_make_comp>
    2f38:	add	x24, x24, #0x0
    2f3c:	bl	4978 <d_print_comp>
    2f40:	mov	x0, x24
    2f44:	bl	0 <__asan_internal_strlen>
    2f48:	cbz	x0, 2fb4 <d_print_comp_inner+0x2674>
    2f4c:	adrp	x22, a8 <d_ref_qualifier+0x20>
    2f50:	add	x24, x0, x24
    2f54:	add	x22, x22, #0x0
    2f58:	mov	w23, #0x2d                  	// #45
    2f5c:	ldr	x1, [x19, #256]
    2f60:	b	2f84 <d_print_comp_inner+0x2644>
    2f64:	mov	x0, x1
    2f68:	add	x1, x1, #0x1
    2f6c:	str	x1, [x19, #256]
    2f70:	cmp	x24, x22
    2f74:	strb	w23, [x19, x0]
    2f78:	strb	w23, [x19, #264]
    2f7c:	b.eq	2fb4 <d_print_comp_inner+0x2674>  // b.none
    2f80:	ldrb	w23, [x22], #1
    2f84:	cmp	x1, #0xff
    2f88:	b.ne	2f64 <d_print_comp_inner+0x2624>  // b.any
    2f8c:	ldp	x3, x2, [x19, #272]
    2f90:	strb	wzr, [x19, #255]
    2f94:	mov	x0, x19
    2f98:	blr	x3
    2f9c:	ldr	x2, [x19, #320]
    2fa0:	mov	x1, #0x1                   	// #1
    2fa4:	mov	x0, #0x0                   	// #0
    2fa8:	add	x2, x2, x1
    2fac:	str	x2, [x19, #320]
    2fb0:	b	2f6c <d_print_comp_inner+0x262c>
    2fb4:	ldr	x2, [x20, #16]
    2fb8:	mov	w1, w21
    2fbc:	mov	x0, x19
    2fc0:	bl	4978 <d_print_comp>
    2fc4:	ldp	x21, x22, [sp, #32]
    2fc8:	ldp	x23, x24, [sp, #48]
    2fcc:	b	9a4 <d_print_comp_inner+0x64>
    2fd0:	ldr	x2, [x20, #8]
    2fd4:	mov	w1, w21
    2fd8:	mov	x0, x19
    2fdc:	bl	4978 <d_print_comp>
    2fe0:	ldp	x21, x22, [sp, #32]
    2fe4:	ldp	x23, x24, [sp, #48]
    2fe8:	b	9a4 <d_print_comp_inner+0x64>
    2fec:	ldr	x2, [x20, #8]
    2ff0:	mov	w1, w21
    2ff4:	mov	x0, x19
    2ff8:	bl	4978 <d_print_comp>
    2ffc:	ldp	x21, x22, [sp, #32]
    3000:	ldp	x23, x24, [sp, #48]
    3004:	b	9a4 <d_print_comp_inner+0x64>
    3008:	mov	x2, x20
    300c:	mov	w1, w21
    3010:	mov	x0, x19
    3014:	bl	4a10 <d_print_mod>
    3018:	b	a1c <d_print_comp_inner+0xdc>
    301c:	ldp	x21, x22, [sp, #32]
    3020:	ldp	x23, x24, [sp, #48]
    3024:	b	9a4 <d_print_comp_inner+0x64>
    3028:	ldp	x21, x22, [sp, #32]
    302c:	ldp	x23, x24, [sp, #48]
    3030:	b	9a4 <d_print_comp_inner+0x64>
    3034:	ldp	x21, x22, [sp, #32]
    3038:	ldp	x23, x24, [sp, #48]
    303c:	b	9a4 <d_print_comp_inner+0x64>
    3040:	ldp	x21, x22, [sp, #32]
    3044:	ldp	x23, x24, [sp, #48]
    3048:	ldp	x25, x26, [sp, #64]
    304c:	ldp	x27, x28, [sp, #80]
    3050:	b	9a4 <d_print_comp_inner+0x64>
    3054:	ldr	x2, [x20, #16]
    3058:	mov	x0, x19
    305c:	mov	w1, w21
    3060:	ldr	x20, [x19, #320]
    3064:	bl	4978 <d_print_comp>
    3068:	ldr	x0, [x19, #320]
    306c:	cmp	x0, x20
    3070:	b.eq	3a80 <d_print_comp_inner+0x3140>  // b.none
    3074:	ldp	x21, x22, [sp, #32]
    3078:	ldp	x23, x24, [sp, #48]
    307c:	ldp	x25, x26, [sp, #64]
    3080:	b	9a4 <d_print_comp_inner+0x64>
    3084:	mov	w1, w21
    3088:	mov	x2, x20
    308c:	mov	x0, x19
    3090:	bl	5ce8 <d_print_subexpr>
    3094:	ldp	x21, x22, [sp, #32]
    3098:	ldp	x23, x24, [sp, #48]
    309c:	b	9a4 <d_print_comp_inner+0x64>
    30a0:	ldr	x25, [x25, #8]
    30a4:	cbz	x25, 3e7c <d_print_comp_inner+0x353c>
    30a8:	add	x3, x3, #0x20
    30ac:	cmp	w24, #0x4
    30b0:	b.eq	3a2c <d_print_comp_inner+0x30ec>  // b.none
    30b4:	mov	x0, x4
    30b8:	b	1ff0 <d_print_comp_inner+0x16b0>
    30bc:	ldr	x25, [x20, #8]
    30c0:	cbz	w23, 42b8 <d_print_comp_inner+0x3978>
    30c4:	stp	x27, x28, [sp, #80]
    30c8:	b	1a40 <d_print_comp_inner+0x1100>
    30cc:	mov	x20, x0
    30d0:	b	b78 <d_print_comp_inner+0x238>
    30d4:	ldr	x2, [x20, #8]
    30d8:	adrp	x1, 0 <d_make_comp>
    30dc:	add	x1, x1, #0x0
    30e0:	add	x20, sp, #0x70
    30e4:	add	w2, w2, #0x1
    30e8:	mov	x0, x20
    30ec:	bl	0 <sprintf>
    30f0:	mov	x0, x20
    30f4:	bl	0 <__asan_internal_strlen>
    30f8:	cbz	x0, 44c8 <d_print_comp_inner+0x3b88>
    30fc:	add	x22, x20, x0
    3100:	ldr	x1, [x19, #256]
    3104:	b	3128 <d_print_comp_inner+0x27e8>
    3108:	mov	x0, x1
    310c:	add	x1, x1, #0x1
    3110:	str	x1, [x19, #256]
    3114:	add	x20, x20, #0x1
    3118:	strb	w21, [x19, x0]
    311c:	cmp	x22, x20
    3120:	strb	w21, [x19, #264]
    3124:	b.eq	3574 <d_print_comp_inner+0x2c34>  // b.none
    3128:	ldrb	w21, [x20]
    312c:	cmp	x1, #0xff
    3130:	b.ne	3108 <d_print_comp_inner+0x27c8>  // b.any
    3134:	ldp	x3, x2, [x19, #272]
    3138:	strb	wzr, [x19, #255]
    313c:	mov	x0, x19
    3140:	blr	x3
    3144:	ldr	x2, [x19, #320]
    3148:	mov	x1, #0x1                   	// #1
    314c:	mov	x0, #0x0                   	// #0
    3150:	add	x2, x2, x1
    3154:	str	x2, [x19, #320]
    3158:	b	3110 <d_print_comp_inner+0x27d0>
    315c:	adrp	x22, 0 <d_make_comp>
    3160:	add	x22, x22, #0x0
    3164:	mov	x0, x22
    3168:	bl	0 <__asan_internal_strlen>
    316c:	cbz	x0, 31d8 <d_print_comp_inner+0x2898>
    3170:	adrp	x20, 2f0 <d_number.isra.0+0x70>
    3174:	add	x22, x0, x22
    3178:	add	x20, x20, #0x0
    317c:	mov	w21, #0x7b                  	// #123
    3180:	ldr	x1, [x19, #256]
    3184:	b	31a8 <d_print_comp_inner+0x2868>
    3188:	mov	x0, x1
    318c:	add	x1, x1, #0x1
    3190:	str	x1, [x19, #256]
    3194:	cmp	x22, x20
    3198:	strb	w21, [x19, x0]
    319c:	strb	w21, [x19, #264]
    31a0:	b.eq	31d8 <d_print_comp_inner+0x2898>  // b.none
    31a4:	ldrb	w21, [x20], #1
    31a8:	cmp	x1, #0xff
    31ac:	b.ne	3188 <d_print_comp_inner+0x2848>  // b.any
    31b0:	ldp	x3, x2, [x19, #272]
    31b4:	strb	wzr, [x19, #255]
    31b8:	mov	x0, x19
    31bc:	blr	x3
    31c0:	ldr	x2, [x19, #320]
    31c4:	mov	x1, #0x1                   	// #1
    31c8:	mov	x0, #0x0                   	// #0
    31cc:	add	x2, x2, x1
    31d0:	str	x2, [x19, #320]
    31d4:	b	3190 <d_print_comp_inner+0x2850>
    31d8:	mov	w2, w23
    31dc:	adrp	x1, 0 <d_make_comp>
    31e0:	add	x1, x1, #0x0
    31e4:	add	x20, sp, #0x70
    31e8:	mov	x0, x20
    31ec:	bl	0 <sprintf>
    31f0:	mov	x0, x20
    31f4:	bl	0 <__asan_internal_strlen>
    31f8:	ldr	x1, [x19, #256]
    31fc:	cbz	x0, 325c <d_print_comp_inner+0x291c>
    3200:	add	x22, x20, x0
    3204:	b	3228 <d_print_comp_inner+0x28e8>
    3208:	mov	x0, x1
    320c:	add	x1, x1, #0x1
    3210:	str	x1, [x19, #256]
    3214:	add	x20, x20, #0x1
    3218:	strb	w21, [x19, x0]
    321c:	cmp	x22, x20
    3220:	strb	w21, [x19, #264]
    3224:	b.eq	325c <d_print_comp_inner+0x291c>  // b.none
    3228:	ldrb	w21, [x20]
    322c:	cmp	x1, #0xff
    3230:	b.ne	3208 <d_print_comp_inner+0x28c8>  // b.any
    3234:	ldp	x3, x2, [x19, #272]
    3238:	strb	wzr, [x19, #255]
    323c:	mov	x0, x19
    3240:	blr	x3
    3244:	ldr	x2, [x19, #320]
    3248:	mov	x1, #0x1                   	// #1
    324c:	mov	x0, #0x0                   	// #0
    3250:	add	x2, x2, x1
    3254:	str	x2, [x19, #320]
    3258:	b	3210 <d_print_comp_inner+0x28d0>
    325c:	add	x0, x1, #0x1
    3260:	cmp	x1, #0xff
    3264:	b.ne	328c <d_print_comp_inner+0x294c>  // b.any
    3268:	ldp	x3, x2, [x19, #272]
    326c:	strb	wzr, [x19, #255]
    3270:	mov	x0, x19
    3274:	blr	x3
    3278:	ldr	x2, [x19, #320]
    327c:	mov	x0, #0x1                   	// #1
    3280:	mov	x1, #0x0                   	// #0
    3284:	add	x2, x2, x0
    3288:	str	x2, [x19, #320]
    328c:	str	x0, [x19, #256]
    3290:	mov	w0, #0x7d                  	// #125
    3294:	strb	w0, [x19, x1]
    3298:	strb	w0, [x19, #264]
    329c:	ldp	x21, x22, [sp, #32]
    32a0:	ldp	x23, x24, [sp, #48]
    32a4:	b	9a4 <d_print_comp_inner+0x64>
    32a8:	ldrsw	x22, [x0, #24]
    32ac:	ldr	x20, [x0, #16]
    32b0:	cbz	x22, 4524 <d_print_comp_inner+0x3be4>
    32b4:	add	x22, x20, x22
    32b8:	ldr	x1, [x19, #256]
    32bc:	b	32e0 <d_print_comp_inner+0x29a0>
    32c0:	mov	x0, x1
    32c4:	add	x1, x1, #0x1
    32c8:	str	x1, [x19, #256]
    32cc:	add	x20, x20, #0x1
    32d0:	strb	w21, [x19, x0]
    32d4:	cmp	x22, x20
    32d8:	strb	w21, [x19, #264]
    32dc:	b.eq	35a4 <d_print_comp_inner+0x2c64>  // b.none
    32e0:	ldrb	w21, [x20]
    32e4:	cmp	x1, #0xff
    32e8:	b.ne	32c0 <d_print_comp_inner+0x2980>  // b.any
    32ec:	ldp	x3, x2, [x19, #272]
    32f0:	strb	wzr, [x19, #255]
    32f4:	mov	x0, x19
    32f8:	blr	x3
    32fc:	ldr	x2, [x19, #320]
    3300:	mov	x1, #0x1                   	// #1
    3304:	mov	x0, #0x0                   	// #0
    3308:	add	x2, x2, x1
    330c:	str	x2, [x19, #320]
    3310:	b	32c8 <d_print_comp_inner+0x2988>
    3314:	add	x21, x20, x22
    3318:	cmp	x21, x20
    331c:	b.ls	44bc <d_print_comp_inner+0x3b7c>  // b.plast
    3320:	mov	w23, #0x5f                  	// #95
    3324:	b	3374 <d_print_comp_inner+0x2a34>
    3328:	ldr	x1, [x19, #256]
    332c:	add	x0, x1, #0x1
    3330:	cmp	x1, #0xff
    3334:	b.ne	335c <d_print_comp_inner+0x2a1c>  // b.any
    3338:	ldp	x3, x2, [x19, #272]
    333c:	strb	wzr, [x19, #255]
    3340:	mov	x0, x19
    3344:	blr	x3
    3348:	ldr	x2, [x19, #320]
    334c:	mov	x0, #0x1                   	// #1
    3350:	mov	x1, #0x0                   	// #0
    3354:	add	x2, x2, x0
    3358:	str	x2, [x19, #320]
    335c:	str	x0, [x19, #256]
    3360:	strb	w22, [x19, x1]
    3364:	strb	w22, [x19, #264]
    3368:	add	x20, x20, #0x1
    336c:	cmp	x21, x20
    3370:	b.ls	34c0 <d_print_comp_inner+0x2b80>  // b.plast
    3374:	sub	x0, x21, x20
    3378:	ldrb	w22, [x20]
    337c:	cmp	x0, #0x3
    3380:	b.le	3328 <d_print_comp_inner+0x29e8>
    3384:	cmp	w22, #0x5f
    3388:	b.ne	3328 <d_print_comp_inner+0x29e8>  // b.any
    338c:	ldrb	w0, [x20, #1]
    3390:	cmp	w0, #0x5f
    3394:	b.ne	3328 <d_print_comp_inner+0x29e8>  // b.any
    3398:	ldrb	w0, [x20, #2]
    339c:	cmp	w0, #0x55
    33a0:	b.ne	3328 <d_print_comp_inner+0x29e8>  // b.any
    33a4:	add	x24, x20, #0x3
    33a8:	cmp	x21, x24
    33ac:	b.ls	3328 <d_print_comp_inner+0x29e8>  // b.plast
    33b0:	mov	x2, #0x0                   	// #0
    33b4:	b	33d0 <d_print_comp_inner+0x2a90>
    33b8:	mov	w0, w1
    33bc:	sxtw	x0, w0
    33c0:	add	x24, x24, #0x1
    33c4:	add	x2, x0, x2, lsl #4
    33c8:	cmp	x21, x24
    33cc:	b.eq	3328 <d_print_comp_inner+0x29e8>  // b.none
    33d0:	ldrb	w0, [x24]
    33d4:	sub	w1, w0, #0x30
    33d8:	and	w3, w1, #0xff
    33dc:	cmp	w3, #0x9
    33e0:	b.ls	33b8 <d_print_comp_inner+0x2a78>  // b.plast
    33e4:	sub	w1, w0, #0x41
    33e8:	and	w1, w1, #0xff
    33ec:	cmp	w1, #0x5
    33f0:	b.hi	416c <d_print_comp_inner+0x382c>  // b.pmore
    33f4:	sub	w0, w0, #0x37
    33f8:	b	33bc <d_print_comp_inner+0x2a7c>
    33fc:	adrp	x22, 0 <d_make_comp>
    3400:	add	x22, x22, #0x0
    3404:	mov	x0, x22
    3408:	bl	0 <__asan_internal_strlen>
    340c:	cbz	x0, 4500 <d_print_comp_inner+0x3bc0>
    3410:	adrp	x20, 220 <d_append_buffer+0x48>
    3414:	add	x22, x0, x22
    3418:	add	x20, x20, #0x0
    341c:	mov	w21, #0x5f                  	// #95
    3420:	ldr	x1, [x19, #256]
    3424:	b	3448 <d_print_comp_inner+0x2b08>
    3428:	mov	x0, x1
    342c:	add	x1, x1, #0x1
    3430:	str	x1, [x19, #256]
    3434:	cmp	x22, x20
    3438:	strb	w21, [x19, x0]
    343c:	strb	w21, [x19, #264]
    3440:	b.eq	34cc <d_print_comp_inner+0x2b8c>  // b.none
    3444:	ldrb	w21, [x20], #1
    3448:	cmp	x1, #0xff
    344c:	b.ne	3428 <d_print_comp_inner+0x2ae8>  // b.any
    3450:	ldp	x3, x2, [x19, #272]
    3454:	strb	wzr, [x19, #255]
    3458:	mov	x0, x19
    345c:	blr	x3
    3460:	ldr	x2, [x19, #320]
    3464:	mov	x1, #0x1                   	// #1
    3468:	mov	x0, #0x0                   	// #0
    346c:	add	x2, x2, x1
    3470:	str	x2, [x19, #320]
    3474:	b	3430 <d_print_comp_inner+0x2af0>
    3478:	add	x1, x20, #0x8
    347c:	mov	x0, x19
    3480:	bl	690 <d_lookup_template_argument.isra.0>
    3484:	mov	x2, x0
    3488:	cbz	x0, 9d0 <d_print_comp_inner+0x90>
    348c:	ldr	w1, [x0]
    3490:	cmp	w1, #0x2f
    3494:	b.eq	4190 <d_print_comp_inner+0x3850>  // b.none
    3498:	ldr	x20, [x19, #288]
    349c:	mov	w1, w21
    34a0:	mov	x0, x19
    34a4:	ldr	x3, [x20]
    34a8:	str	x3, [x19, #288]
    34ac:	bl	4978 <d_print_comp>
    34b0:	ldp	x21, x22, [sp, #32]
    34b4:	ldp	x23, x24, [sp, #48]
    34b8:	str	x20, [x19, #288]
    34bc:	b	9a4 <d_print_comp_inner+0x64>
    34c0:	ldp	x21, x22, [sp, #32]
    34c4:	ldp	x23, x24, [sp, #48]
    34c8:	b	9a4 <d_print_comp_inner+0x64>
    34cc:	ldp	x21, x22, [sp, #32]
    34d0:	ldp	x23, x24, [sp, #48]
    34d4:	b	9a4 <d_print_comp_inner+0x64>
    34d8:	ldr	x1, [x19, #256]
    34dc:	add	x0, x1, #0x1
    34e0:	cmp	x1, #0xff
    34e4:	b.ne	350c <d_print_comp_inner+0x2bcc>  // b.any
    34e8:	ldp	x3, x2, [x19, #272]
    34ec:	strb	wzr, [x19, #255]
    34f0:	mov	x0, x19
    34f4:	blr	x3
    34f8:	ldr	x2, [x19, #320]
    34fc:	mov	x0, #0x1                   	// #1
    3500:	mov	x1, #0x0                   	// #0
    3504:	add	x2, x2, x0
    3508:	str	x2, [x19, #320]
    350c:	str	x0, [x19, #256]
    3510:	mov	w0, #0x28                  	// #40
    3514:	strb	w0, [x19, x1]
    3518:	mov	w1, w21
    351c:	strb	w0, [x19, #264]
    3520:	mov	x0, x19
    3524:	ldr	x2, [x23, #8]
    3528:	bl	4978 <d_print_comp>
    352c:	ldr	x1, [x19, #256]
    3530:	add	x0, x1, #0x1
    3534:	cmp	x1, #0xff
    3538:	b.ne	3560 <d_print_comp_inner+0x2c20>  // b.any
    353c:	ldp	x3, x2, [x19, #272]
    3540:	strb	wzr, [x19, #255]
    3544:	mov	x0, x19
    3548:	blr	x3
    354c:	ldr	x2, [x19, #320]
    3550:	mov	x0, #0x1                   	// #1
    3554:	mov	x1, #0x0                   	// #0
    3558:	add	x2, x2, x0
    355c:	str	x2, [x19, #320]
    3560:	str	x0, [x19, #256]
    3564:	mov	w0, #0x29                  	// #41
    3568:	strb	w0, [x19, x1]
    356c:	strb	w0, [x19, #264]
    3570:	b	2430 <d_print_comp_inner+0x1af0>
    3574:	ldp	x21, x22, [sp, #32]
    3578:	ldp	x23, x24, [sp, #48]
    357c:	b	9a4 <d_print_comp_inner+0x64>
    3580:	ldp	x21, x22, [sp, #32]
    3584:	ldp	x23, x24, [sp, #48]
    3588:	b	9a4 <d_print_comp_inner+0x64>
    358c:	ldp	x21, x22, [sp, #32]
    3590:	ldp	x23, x24, [sp, #48]
    3594:	b	9a4 <d_print_comp_inner+0x64>
    3598:	ldp	x21, x22, [sp, #32]
    359c:	ldp	x23, x24, [sp, #48]
    35a0:	b	9a4 <d_print_comp_inner+0x64>
    35a4:	ldp	x21, x22, [sp, #32]
    35a8:	ldp	x23, x24, [sp, #48]
    35ac:	b	9a4 <d_print_comp_inner+0x64>
    35b0:	ldp	x21, x22, [sp, #32]
    35b4:	ldp	x23, x24, [sp, #48]
    35b8:	b	9a4 <d_print_comp_inner+0x64>
    35bc:	ldr	x1, [x2, #8]
    35c0:	ldr	w22, [x1, #28]
    35c4:	cmp	w22, #0x6
    35c8:	b.hi	3660 <d_print_comp_inner+0x2d20>  // b.pmore
    35cc:	cbz	w22, a94 <d_print_comp_inner+0x154>
    35d0:	ldr	x1, [x20, #16]
    35d4:	ldr	w1, [x1]
    35d8:	cbnz	w1, a94 <d_print_comp_inner+0x154>
    35dc:	cmp	w0, #0x3e
    35e0:	b.eq	48f8 <d_print_comp_inner+0x3fb8>  // b.none
    35e4:	ldr	x2, [x20, #16]
    35e8:	mov	w1, w21
    35ec:	mov	x0, x19
    35f0:	bl	4978 <d_print_comp>
    35f4:	cmp	w22, #0x4
    35f8:	b.eq	48cc <d_print_comp_inner+0x3f8c>  // b.none
    35fc:	b.hi	46b0 <d_print_comp_inner+0x3d70>  // b.pmore
    3600:	cmp	w22, #0x2
    3604:	b.eq	487c <d_print_comp_inner+0x3f3c>  // b.none
    3608:	cmp	w22, #0x3
    360c:	b.ne	4940 <d_print_comp_inner+0x4000>  // b.any
    3610:	ldr	x1, [x19, #256]
    3614:	cmp	x1, #0xff
    3618:	b.ne	3640 <d_print_comp_inner+0x2d00>  // b.any
    361c:	ldp	x3, x2, [x19, #272]
    3620:	strb	wzr, [x19, #255]
    3624:	mov	x0, x19
    3628:	blr	x3
    362c:	str	xzr, [x19, #256]
    3630:	ldr	x0, [x19, #320]
    3634:	mov	x1, #0x0                   	// #0
    3638:	add	x0, x0, #0x1
    363c:	str	x0, [x19, #320]
    3640:	add	x0, x1, #0x1
    3644:	str	x0, [x19, #256]
    3648:	mov	w0, #0x6c                  	// #108
    364c:	strb	w0, [x19, x1]
    3650:	strb	w0, [x19, #264]
    3654:	ldp	x21, x22, [sp, #32]
    3658:	ldp	x23, x24, [sp, #48]
    365c:	b	9a4 <d_print_comp_inner+0x64>
    3660:	cmp	w22, #0x7
    3664:	b.ne	a94 <d_print_comp_inner+0x154>  // b.any
    3668:	ldr	x1, [x20, #16]
    366c:	ldr	w3, [x1]
    3670:	cbnz	w3, a94 <d_print_comp_inner+0x154>
    3674:	ldr	w3, [x1, #16]
    3678:	cmp	w0, #0x3d
    367c:	ccmp	w3, #0x1, #0x0, eq  // eq = none
    3680:	b.ne	a94 <d_print_comp_inner+0x154>  // b.any
    3684:	ldr	x0, [x1, #8]
    3688:	ldrb	w0, [x0]
    368c:	cmp	w0, #0x30
    3690:	b.eq	494c <d_print_comp_inner+0x400c>  // b.none
    3694:	cmp	w0, #0x31
    3698:	b.ne	a94 <d_print_comp_inner+0x154>  // b.any
    369c:	adrp	x20, 0 <d_make_comp>
    36a0:	add	x20, x20, #0x0
    36a4:	mov	x0, x20
    36a8:	bl	0 <__asan_internal_strlen>
    36ac:	mov	x1, x20
    36b0:	mov	x2, x0
    36b4:	mov	x0, x19
    36b8:	bl	1d8 <d_append_buffer>
    36bc:	ldp	x21, x22, [sp, #32]
    36c0:	ldp	x23, x24, [sp, #48]
    36c4:	b	9a4 <d_print_comp_inner+0x64>
    36c8:	ldr	x2, [x2, #8]
    36cc:	mov	x0, x19
    36d0:	mov	w1, w21
    36d4:	bl	4978 <d_print_comp>
    36d8:	ldr	x0, [x19, #368]
    36dc:	cbz	x0, 36e8 <d_print_comp_inner+0x2da8>
    36e0:	ldr	x0, [sp, #112]
    36e4:	str	x0, [x19, #288]
    36e8:	ldr	x1, [x19, #256]
    36ec:	ldrb	w2, [x19, #264]
    36f0:	mov	x0, x1
    36f4:	cmp	w2, #0x3c
    36f8:	b.eq	425c <d_print_comp_inner+0x391c>  // b.none
    36fc:	add	x1, x0, #0x1
    3700:	cmp	x0, #0xff
    3704:	b.ne	3730 <d_print_comp_inner+0x2df0>  // b.any
    3708:	ldp	x3, x2, [x19, #272]
    370c:	strb	wzr, [x19, #255]
    3710:	mov	x1, x0
    3714:	mov	x0, x19
    3718:	blr	x3
    371c:	ldr	x2, [x19, #320]
    3720:	mov	x1, #0x1                   	// #1
    3724:	mov	x0, #0x0                   	// #0
    3728:	add	x2, x2, x1
    372c:	str	x2, [x19, #320]
    3730:	str	x1, [x19, #256]
    3734:	mov	w2, #0x3c                  	// #60
    3738:	strb	w2, [x19, x0]
    373c:	mov	w1, w21
    3740:	strb	w2, [x19, #264]
    3744:	mov	x0, x19
    3748:	ldr	x2, [x20, #8]
    374c:	ldr	x2, [x2, #16]
    3750:	bl	4978 <d_print_comp>
    3754:	ldrb	w0, [x19, #264]
    3758:	cmp	w0, #0x3e
    375c:	b.eq	4214 <d_print_comp_inner+0x38d4>  // b.none
    3760:	ldr	x0, [x19, #256]
    3764:	add	x1, x0, #0x1
    3768:	cmp	x0, #0xff
    376c:	b.ne	3798 <d_print_comp_inner+0x2e58>  // b.any
    3770:	ldp	x3, x2, [x19, #272]
    3774:	strb	wzr, [x19, #255]
    3778:	mov	x1, x0
    377c:	mov	x0, x19
    3780:	blr	x3
    3784:	ldr	x2, [x19, #320]
    3788:	mov	x1, #0x1                   	// #1
    378c:	mov	x0, #0x0                   	// #0
    3790:	add	x2, x2, x1
    3794:	str	x2, [x19, #320]
    3798:	str	x1, [x19, #256]
    379c:	mov	w1, #0x3e                  	// #62
    37a0:	strb	w1, [x19, x0]
    37a4:	strb	w1, [x19, #264]
    37a8:	ldp	x21, x22, [sp, #32]
    37ac:	ldp	x23, x24, [sp, #48]
    37b0:	b	9a4 <d_print_comp_inner+0x64>
    37b4:	mov	x2, x20
    37b8:	mov	w1, w21
    37bc:	mov	x0, x19
    37c0:	bl	4a10 <d_print_mod>
    37c4:	b	c48 <d_print_comp_inner+0x308>
    37c8:	adrp	x22, 0 <d_make_comp>
    37cc:	add	x22, x22, #0x0
    37d0:	mov	x0, x22
    37d4:	bl	0 <__asan_internal_strlen>
    37d8:	cbz	x0, bec <d_print_comp_inner+0x2ac>
    37dc:	add	x24, x0, x22
    37e0:	mov	w23, #0x3a                  	// #58
    37e4:	adrp	x22, 10 <d_make_comp+0x10>
    37e8:	add	x22, x22, #0x0
    37ec:	ldr	x1, [x19, #256]
    37f0:	b	3814 <d_print_comp_inner+0x2ed4>
    37f4:	mov	x0, x1
    37f8:	add	x1, x1, #0x1
    37fc:	str	x1, [x19, #256]
    3800:	cmp	x22, x24
    3804:	strb	w23, [x19, x0]
    3808:	strb	w23, [x19, #264]
    380c:	b.eq	bec <d_print_comp_inner+0x2ac>  // b.none
    3810:	ldrb	w23, [x22], #1
    3814:	cmp	x1, #0xff
    3818:	b.ne	37f4 <d_print_comp_inner+0x2eb4>  // b.any
    381c:	ldp	x3, x2, [x19, #272]
    3820:	strb	wzr, [x19, #255]
    3824:	mov	x0, x19
    3828:	blr	x3
    382c:	ldr	x2, [x19, #320]
    3830:	mov	x1, #0x1                   	// #1
    3834:	mov	x0, #0x0                   	// #0
    3838:	add	x2, x2, x1
    383c:	str	x2, [x19, #320]
    3840:	b	37fc <d_print_comp_inner+0x2ebc>
    3844:	ldr	x1, [x19, #256]
    3848:	cmp	x1, #0xff
    384c:	b.ne	3870 <d_print_comp_inner+0x2f30>  // b.any
    3850:	ldp	x3, x2, [x19, #272]
    3854:	strb	wzr, [x19, #255]
    3858:	mov	x0, x19
    385c:	blr	x3
    3860:	ldr	x0, [x19, #320]
    3864:	mov	x1, #0x0                   	// #0
    3868:	add	x0, x0, #0x1
    386c:	str	x0, [x19, #320]
    3870:	add	x0, x1, #0x1
    3874:	str	x0, [x19, #256]
    3878:	mov	w0, #0x5b                  	// #91
    387c:	strb	w0, [x19, x1]
    3880:	strb	w0, [x19, #264]
    3884:	mov	w1, w21
    3888:	mov	x0, x19
    388c:	ldr	x2, [x20, #16]
    3890:	bl	4978 <d_print_comp>
    3894:	ldr	x1, [x19, #256]
    3898:	cmp	x1, #0xff
    389c:	b.ne	38c0 <d_print_comp_inner+0x2f80>  // b.any
    38a0:	ldp	x3, x2, [x19, #272]
    38a4:	strb	wzr, [x19, #255]
    38a8:	mov	x0, x19
    38ac:	blr	x3
    38b0:	ldr	x0, [x19, #320]
    38b4:	mov	x1, #0x0                   	// #0
    38b8:	add	x0, x0, #0x1
    38bc:	str	x0, [x19, #320]
    38c0:	add	x0, x1, #0x1
    38c4:	str	x0, [x19, #256]
    38c8:	mov	w0, #0x5d                  	// #93
    38cc:	strb	w0, [x19, x1]
    38d0:	strb	w0, [x19, #264]
    38d4:	ldp	x21, x22, [sp, #32]
    38d8:	ldp	x23, x24, [sp, #48]
    38dc:	b	9a4 <d_print_comp_inner+0x64>
    38e0:	ldp	x3, x2, [x19, #272]
    38e4:	strb	wzr, [x19, #255]
    38e8:	mov	x0, x19
    38ec:	blr	x3
    38f0:	ldr	x0, [x19, #320]
    38f4:	mov	w1, #0x29                  	// #41
    38f8:	strb	w1, [x19]
    38fc:	strb	w1, [x19, #264]
    3900:	mov	x1, #0x1                   	// #1
    3904:	add	x0, x0, x1
    3908:	str	x1, [x19, #256]
    390c:	str	x0, [x19, #320]
    3910:	ldr	w0, [x20]
    3914:	cmp	w0, #0x3e
    3918:	b.ne	b14 <d_print_comp_inner+0x1d4>  // b.any
    391c:	ldr	x1, [x19, #256]
    3920:	mov	w0, #0x2d                  	// #45
    3924:	add	x2, x1, #0x1
    3928:	str	x2, [x19, #256]
    392c:	strb	w0, [x19, x1]
    3930:	strb	w0, [x19, #264]
    3934:	b	b14 <d_print_comp_inner+0x1d4>
    3938:	adrp	x22, 0 <d_make_comp>
    393c:	add	x22, x22, #0x0
    3940:	mov	x0, x22
    3944:	bl	0 <__asan_internal_strlen>
    3948:	cbz	x0, 14b0 <d_print_comp_inner+0xb70>
    394c:	add	x24, x0, x22
    3950:	mov	w23, #0x5f                  	// #95
    3954:	adrp	x22, 210 <d_append_buffer+0x38>
    3958:	add	x22, x22, #0x0
    395c:	ldr	x1, [x19, #256]
    3960:	b	3984 <d_print_comp_inner+0x3044>
    3964:	mov	x0, x1
    3968:	add	x1, x1, #0x1
    396c:	str	x1, [x19, #256]
    3970:	cmp	x24, x22
    3974:	strb	w23, [x19, x0]
    3978:	strb	w23, [x19, #264]
    397c:	b.eq	14b0 <d_print_comp_inner+0xb70>  // b.none
    3980:	ldrb	w23, [x22], #1
    3984:	cmp	x1, #0xff
    3988:	b.ne	3964 <d_print_comp_inner+0x3024>  // b.any
    398c:	ldp	x3, x2, [x19, #272]
    3990:	strb	wzr, [x19, #255]
    3994:	mov	x0, x19
    3998:	blr	x3
    399c:	ldr	x2, [x19, #320]
    39a0:	mov	x1, #0x1                   	// #1
    39a4:	mov	x0, #0x0                   	// #0
    39a8:	add	x2, x2, x1
    39ac:	str	x2, [x19, #320]
    39b0:	b	396c <d_print_comp_inner+0x302c>
    39b4:	add	x2, x20, #0x10
    39b8:	mov	w1, w22
    39bc:	mov	x0, x19
    39c0:	bl	52a8 <d_print_function_type.isra.0>
    39c4:	ldr	x2, [x20, #8]
    39c8:	cbz	x2, 4310 <d_print_comp_inner+0x39d0>
    39cc:	mov	w1, w22
    39d0:	mov	x0, x19
    39d4:	bl	4978 <d_print_comp>
    39d8:	ldp	x21, x22, [sp, #32]
    39dc:	ldp	x23, x24, [sp, #48]
    39e0:	b	9a4 <d_print_comp_inner+0x64>
    39e4:	ldr	x0, [x19, #256]
    39e8:	cmp	x0, #0xff
    39ec:	b.eq	41a8 <d_print_comp_inner+0x3868>  // b.none
    39f0:	add	x1, x0, #0x1
    39f4:	str	x1, [x19, #256]
    39f8:	mov	w2, #0x20                  	// #32
    39fc:	strb	w2, [x19, x0]
    3a00:	strb	w2, [x19, #264]
    3a04:	b	2180 <d_print_comp_inner+0x1840>
    3a08:	ldr	x0, [x19, #256]
    3a0c:	cmp	x0, #0xff
    3a10:	b.eq	41d8 <d_print_comp_inner+0x3898>  // b.none
    3a14:	add	x1, x0, #0x1
    3a18:	str	x1, [x19, #256]
    3a1c:	mov	w2, #0x20                  	// #32
    3a20:	strb	w2, [x19, x0]
    3a24:	strb	w2, [x19, #264]
    3a28:	b	2144 <d_print_comp_inner+0x1804>
    3a2c:	ldp	x21, x22, [sp, #32]
    3a30:	ldp	x23, x24, [sp, #48]
    3a34:	ldp	x25, x26, [sp, #64]
    3a38:	str	x4, [x19, #296]
    3a3c:	str	w1, [x19, #304]
    3a40:	b	9a4 <d_print_comp_inner+0x64>
    3a44:	ldp	x21, x22, [sp, #32]
    3a48:	ldp	x23, x24, [sp, #48]
    3a4c:	b	9a4 <d_print_comp_inner+0x64>
    3a50:	ldp	x21, x22, [sp, #32]
    3a54:	ldp	x23, x24, [sp, #48]
    3a58:	b	9a4 <d_print_comp_inner+0x64>
    3a5c:	mov	w22, #0x0                   	// #0
    3a60:	b	b78 <d_print_comp_inner+0x238>
    3a64:	ldr	x2, [x20, #8]
    3a68:	mov	w1, w21
    3a6c:	mov	x0, x19
    3a70:	bl	4978 <d_print_comp>
    3a74:	ldp	x21, x22, [sp, #32]
    3a78:	ldp	x23, x24, [sp, #48]
    3a7c:	b	9a4 <d_print_comp_inner+0x64>
    3a80:	ldr	x0, [x19, #256]
    3a84:	cmp	x0, x22
    3a88:	b.eq	4388 <d_print_comp_inner+0x3a48>  // b.none
    3a8c:	ldp	x21, x22, [sp, #32]
    3a90:	ldp	x23, x24, [sp, #48]
    3a94:	ldp	x25, x26, [sp, #64]
    3a98:	b	9a4 <d_print_comp_inner+0x64>
    3a9c:	cmp	x3, #0xff
    3aa0:	b.ne	391c <d_print_comp_inner+0x2fdc>  // b.any
    3aa4:	ldp	x4, x2, [x19, #272]
    3aa8:	strb	wzr, [x19, #255]
    3aac:	mov	x0, x19
    3ab0:	mov	x1, x3
    3ab4:	blr	x4
    3ab8:	str	xzr, [x19, #256]
    3abc:	ldr	x0, [x19, #320]
    3ac0:	add	x0, x0, #0x1
    3ac4:	str	x0, [x19, #320]
    3ac8:	b	391c <d_print_comp_inner+0x2fdc>
    3acc:	ldr	x0, [x23, #8]
    3ad0:	adrp	x1, 0 <d_make_comp>
    3ad4:	add	x1, x1, #0x0
    3ad8:	ldr	x22, [x0]
    3adc:	mov	x0, x22
    3ae0:	bl	0 <__asan_internal_strcmp>
    3ae4:	cbz	w0, 42c8 <d_print_comp_inner+0x3988>
    3ae8:	ldr	w0, [x20]
    3aec:	cmp	w0, #0x39
    3af0:	b.eq	3ba0 <d_print_comp_inner+0x3260>  // b.none
    3af4:	cbz	x22, 3b24 <d_print_comp_inner+0x31e4>
    3af8:	mov	x0, x22
    3afc:	adrp	x1, 0 <d_make_comp>
    3b00:	add	x1, x1, #0x0
    3b04:	bl	0 <__asan_internal_strcmp>
    3b08:	mov	w3, w0
    3b0c:	cbz	w0, 4744 <d_print_comp_inner+0x3e04>
    3b10:	adrp	x1, 0 <d_make_comp>
    3b14:	mov	x0, x22
    3b18:	add	x1, x1, #0x0
    3b1c:	bl	0 <__asan_internal_strcmp>
    3b20:	cbz	w0, 3b2c <d_print_comp_inner+0x31ec>
    3b24:	ldr	w0, [x23]
    3b28:	b	2418 <d_print_comp_inner+0x1ad8>
    3b2c:	mov	w3, #0x0                   	// #0
    3b30:	b	3b40 <d_print_comp_inner+0x3200>
    3b34:	add	w3, w3, #0x1
    3b38:	ldr	x20, [x20, #16]
    3b3c:	cbz	x20, 42f8 <d_print_comp_inner+0x39b8>
    3b40:	ldr	w0, [x20]
    3b44:	cmp	w0, #0x2f
    3b48:	b.ne	42f8 <d_print_comp_inner+0x39b8>  // b.any
    3b4c:	ldr	x0, [x20, #8]
    3b50:	cbz	x0, 42f8 <d_print_comp_inner+0x39b8>
    3b54:	ldr	w1, [x0]
    3b58:	cmp	w1, #0x4b
    3b5c:	b.ne	3b34 <d_print_comp_inner+0x31f4>  // b.any
    3b60:	ldr	x1, [x0, #8]
    3b64:	mov	x0, x19
    3b68:	bl	6c0 <d_find_pack>
    3b6c:	mov	w1, #0x0                   	// #0
    3b70:	cbnz	x0, 3b8c <d_print_comp_inner+0x324c>
    3b74:	b	3b98 <d_print_comp_inner+0x3258>
    3b78:	ldr	x2, [x0, #8]
    3b7c:	cbz	x2, 3b98 <d_print_comp_inner+0x3258>
    3b80:	ldr	x0, [x0, #16]
    3b84:	add	w1, w1, #0x1
    3b88:	cbz	x0, 3b98 <d_print_comp_inner+0x3258>
    3b8c:	ldr	w2, [x0]
    3b90:	cmp	w2, #0x2f
    3b94:	b.eq	3b78 <d_print_comp_inner+0x3238>  // b.none
    3b98:	add	w3, w3, w1
    3b9c:	b	3b38 <d_print_comp_inner+0x31f8>
    3ba0:	ldr	x2, [x20, #8]
    3ba4:	mov	w1, w21
    3ba8:	mov	x0, x19
    3bac:	bl	5ce8 <d_print_subexpr>
    3bb0:	mov	x2, x23
    3bb4:	mov	w1, w21
    3bb8:	mov	x0, x19
    3bbc:	bl	5c30 <d_print_expr_op>
    3bc0:	ldp	x21, x22, [sp, #32]
    3bc4:	ldp	x23, x24, [sp, #48]
    3bc8:	b	9a4 <d_print_comp_inner+0x64>
    3bcc:	adrp	x20, 0 <d_make_comp>
    3bd0:	add	x20, x20, #0x0
    3bd4:	mov	x0, x20
    3bd8:	bl	0 <__asan_internal_strlen>
    3bdc:	cbz	x0, 3c48 <d_print_comp_inner+0x3308>
    3be0:	add	x24, x0, x20
    3be4:	adrp	x22, 18 <d_make_comp+0x18>
    3be8:	mov	w20, #0x7b                  	// #123
    3bec:	add	x22, x22, #0x0
    3bf0:	ldr	x1, [x19, #256]
    3bf4:	b	3c18 <d_print_comp_inner+0x32d8>
    3bf8:	mov	x0, x1
    3bfc:	add	x1, x1, #0x1
    3c00:	str	x1, [x19, #256]
    3c04:	cmp	x24, x22
    3c08:	strb	w20, [x19, x0]
    3c0c:	strb	w20, [x19, #264]
    3c10:	b.eq	3c48 <d_print_comp_inner+0x3308>  // b.none
    3c14:	ldrb	w20, [x22], #1
    3c18:	cmp	x1, #0xff
    3c1c:	b.ne	3bf8 <d_print_comp_inner+0x32b8>  // b.any
    3c20:	ldp	x3, x2, [x19, #272]
    3c24:	strb	wzr, [x19, #255]
    3c28:	mov	x0, x19
    3c2c:	blr	x3
    3c30:	ldr	x2, [x19, #320]
    3c34:	mov	x1, #0x1                   	// #1
    3c38:	mov	x0, #0x0                   	// #0
    3c3c:	add	x2, x2, x1
    3c40:	str	x2, [x19, #320]
    3c44:	b	3c00 <d_print_comp_inner+0x32c0>
    3c48:	ldr	w2, [x23, #16]
    3c4c:	adrp	x1, 0 <d_make_comp>
    3c50:	add	x1, x1, #0x0
    3c54:	add	x20, sp, #0x70
    3c58:	add	w2, w2, #0x1
    3c5c:	mov	x0, x20
    3c60:	bl	0 <sprintf>
    3c64:	mov	x0, x20
    3c68:	bl	0 <__asan_internal_strlen>
    3c6c:	cbz	x0, 3cd0 <d_print_comp_inner+0x3390>
    3c70:	add	x24, x20, x0
    3c74:	ldr	x1, [x19, #256]
    3c78:	b	3c9c <d_print_comp_inner+0x335c>
    3c7c:	mov	x0, x1
    3c80:	add	x1, x1, #0x1
    3c84:	str	x1, [x19, #256]
    3c88:	add	x20, x20, #0x1
    3c8c:	strb	w22, [x19, x0]
    3c90:	cmp	x24, x20
    3c94:	strb	w22, [x19, #264]
    3c98:	b.eq	3cd0 <d_print_comp_inner+0x3390>  // b.none
    3c9c:	ldrb	w22, [x20]
    3ca0:	cmp	x1, #0xff
    3ca4:	b.ne	3c7c <d_print_comp_inner+0x333c>  // b.any
    3ca8:	ldp	x3, x2, [x19, #272]
    3cac:	strb	wzr, [x19, #255]
    3cb0:	mov	x0, x19
    3cb4:	blr	x3
    3cb8:	ldr	x2, [x19, #320]
    3cbc:	mov	x1, #0x1                   	// #1
    3cc0:	mov	x0, #0x0                   	// #0
    3cc4:	add	x2, x2, x1
    3cc8:	str	x2, [x19, #320]
    3ccc:	b	3c84 <d_print_comp_inner+0x3344>
    3cd0:	adrp	x20, 0 <d_make_comp>
    3cd4:	add	x20, x20, #0x0
    3cd8:	mov	x0, x20
    3cdc:	bl	0 <__asan_internal_strlen>
    3ce0:	cbz	x0, 3d4c <d_print_comp_inner+0x340c>
    3ce4:	add	x24, x0, x20
    3ce8:	adrp	x22, 28 <d_make_comp+0x28>
    3cec:	mov	w20, #0x7d                  	// #125
    3cf0:	add	x22, x22, #0x0
    3cf4:	ldr	x1, [x19, #256]
    3cf8:	b	3d1c <d_print_comp_inner+0x33dc>
    3cfc:	mov	x0, x1
    3d00:	add	x1, x1, #0x1
    3d04:	str	x1, [x19, #256]
    3d08:	cmp	x24, x22
    3d0c:	strb	w20, [x19, x0]
    3d10:	strb	w20, [x19, #264]
    3d14:	b.eq	3d4c <d_print_comp_inner+0x340c>  // b.none
    3d18:	ldrb	w20, [x22], #1
    3d1c:	cmp	x1, #0xff
    3d20:	b.ne	3cfc <d_print_comp_inner+0x33bc>  // b.any
    3d24:	ldp	x3, x2, [x19, #272]
    3d28:	strb	wzr, [x19, #255]
    3d2c:	mov	x0, x19
    3d30:	blr	x3
    3d34:	ldr	x2, [x19, #320]
    3d38:	mov	x1, #0x1                   	// #1
    3d3c:	mov	x0, #0x0                   	// #0
    3d40:	add	x2, x2, x1
    3d44:	str	x2, [x19, #320]
    3d48:	b	3d04 <d_print_comp_inner+0x33c4>
    3d4c:	ldr	x23, [x23, #8]
    3d50:	b	bfc <d_print_comp_inner+0x2bc>
    3d54:	ldp	x21, x22, [sp, #32]
    3d58:	ldp	x23, x24, [sp, #48]
    3d5c:	b	9a4 <d_print_comp_inner+0x64>
    3d60:	ldr	x25, [x25, #16]
    3d64:	ldr	w5, [x25]
    3d68:	cmp	w5, #0x47
    3d6c:	b.eq	4460 <d_print_comp_inner+0x3b20>  // b.none
    3d70:	ubfiz	x3, x24, #5, #32
    3d74:	sub	w0, w5, #0x1c
    3d78:	mov	x1, #0x1f                  	// #31
    3d7c:	add	x3, x23, x3
    3d80:	cmp	w0, #0x34
    3d84:	mov	x2, #0x1                   	// #1
    3d88:	movk	x1, #0x1a, lsl #48
    3d8c:	b.hi	2030 <d_print_comp_inner+0x16f0>  // b.pmore
    3d90:	lsl	x0, x2, x0
    3d94:	tst	x0, x1
    3d98:	b.eq	2030 <d_print_comp_inner+0x16f0>  // b.none
    3d9c:	cmp	w24, #0x4
    3da0:	b.eq	3e80 <d_print_comp_inner+0x3540>  // b.none
    3da4:	ldp	x8, x9, [x3, #-32]
    3da8:	stur	x25, [x3, #-24]
    3dac:	ldp	x4, x5, [x3, #-16]
    3db0:	stur	wzr, [x3, #-16]
    3db4:	stp	x8, x9, [x3]
    3db8:	sub	x0, x3, #0x20
    3dbc:	add	w24, w24, #0x1
    3dc0:	ldr	x25, [x25, #8]
    3dc4:	stp	x4, x5, [x3, #16]
    3dc8:	ldr	w5, [x25]
    3dcc:	stp	x6, x0, [x3, #-8]
    3dd0:	sub	w0, w5, #0x1c
    3dd4:	str	x3, [x19, #296]
    3dd8:	cmp	w0, #0x34
    3ddc:	add	x3, x3, #0x20
    3de0:	b.ls	3d90 <d_print_comp_inner+0x3450>  // b.plast
    3de4:	b	2030 <d_print_comp_inner+0x16f0>
    3de8:	mov	w0, #0x1                   	// #1
    3dec:	ldp	x21, x22, [sp, #32]
    3df0:	ldp	x23, x24, [sp, #48]
    3df4:	str	w0, [x19, #304]
    3df8:	b	9a4 <d_print_comp_inner+0x64>
    3dfc:	ldr	x4, [x19, #288]
    3e00:	add	x0, sp, #0x70
    3e04:	str	x0, [x19, #296]
    3e08:	mov	w1, w22
    3e0c:	mov	x0, x19
    3e10:	stp	x3, x20, [sp, #112]
    3e14:	str	wzr, [sp, #128]
    3e18:	str	x4, [sp, #136]
    3e1c:	bl	4978 <d_print_comp>
    3e20:	ldr	w0, [sp, #128]
    3e24:	ldr	x1, [sp, #112]
    3e28:	str	x1, [x19, #296]
    3e2c:	cbnz	w0, 4530 <d_print_comp_inner+0x3bf0>
    3e30:	ldr	x1, [x19, #256]
    3e34:	cmp	x1, #0xff
    3e38:	b.ne	3e60 <d_print_comp_inner+0x3520>  // b.any
    3e3c:	ldp	x3, x2, [x19, #272]
    3e40:	strb	wzr, [x19, #255]
    3e44:	mov	x0, x19
    3e48:	blr	x3
    3e4c:	str	xzr, [x19, #256]
    3e50:	ldr	x0, [x19, #320]
    3e54:	mov	x1, #0x0                   	// #0
    3e58:	add	x0, x0, #0x1
    3e5c:	str	x0, [x19, #320]
    3e60:	add	x0, x1, #0x1
    3e64:	str	x0, [x19, #256]
    3e68:	mov	w0, #0x20                  	// #32
    3e6c:	strb	w0, [x19, x1]
    3e70:	strb	w0, [x19, #264]
    3e74:	ldr	x3, [x19, #296]
    3e78:	b	1228 <d_print_comp_inner+0x8e8>
    3e7c:	str	x3, [x19, #296]
    3e80:	mov	w0, #0x1                   	// #1
    3e84:	ldp	x21, x22, [sp, #32]
    3e88:	ldp	x23, x24, [sp, #48]
    3e8c:	ldp	x25, x26, [sp, #64]
    3e90:	str	w0, [x19, #304]
    3e94:	b	9a4 <d_print_comp_inner+0x64>
    3e98:	ldrb	w0, [x0]
    3e9c:	sub	w1, w0, #0x72
    3ea0:	sub	w0, w0, #0x63
    3ea4:	and	w1, w1, #0xff
    3ea8:	and	w0, w0, #0xff
    3eac:	cmp	w1, #0x1
    3eb0:	ccmp	w0, #0x1, #0x0, hi  // hi = pmore
    3eb4:	b.hi	1ba0 <d_print_comp_inner+0x1260>  // b.pmore
    3eb8:	mov	w1, w21
    3ebc:	mov	x0, x19
    3ec0:	bl	5c30 <d_print_expr_op>
    3ec4:	ldr	x1, [x19, #256]
    3ec8:	cmp	x1, #0xff
    3ecc:	b.ne	3ef4 <d_print_comp_inner+0x35b4>  // b.any
    3ed0:	ldp	x3, x2, [x19, #272]
    3ed4:	strb	wzr, [x19, #255]
    3ed8:	mov	x0, x19
    3edc:	blr	x3
    3ee0:	str	xzr, [x19, #256]
    3ee4:	ldr	x0, [x19, #320]
    3ee8:	mov	x1, #0x0                   	// #0
    3eec:	add	x0, x0, #0x1
    3ef0:	str	x0, [x19, #320]
    3ef4:	add	x0, x1, #0x1
    3ef8:	str	x0, [x19, #256]
    3efc:	mov	w0, #0x3c                  	// #60
    3f00:	strb	w0, [x19, x1]
    3f04:	strb	w0, [x19, #264]
    3f08:	mov	w1, w21
    3f0c:	mov	x0, x19
    3f10:	adrp	x22, 0 <d_make_comp>
    3f14:	ldr	x2, [x20, #16]
    3f18:	add	x22, x22, #0x0
    3f1c:	ldr	x2, [x2, #8]
    3f20:	bl	4978 <d_print_comp>
    3f24:	mov	x0, x22
    3f28:	bl	0 <__asan_internal_strlen>
    3f2c:	cbz	x0, 4108 <d_print_comp_inner+0x37c8>
    3f30:	add	x24, x0, x22
    3f34:	mov	w23, #0x3e                  	// #62
    3f38:	adrp	x22, 268 <d_append_buffer+0x90>
    3f3c:	add	x22, x22, #0x0
    3f40:	ldr	x1, [x19, #256]
    3f44:	b	3f68 <d_print_comp_inner+0x3628>
    3f48:	mov	x0, x1
    3f4c:	add	x1, x1, #0x1
    3f50:	str	x1, [x19, #256]
    3f54:	cmp	x22, x24
    3f58:	strb	w23, [x19, x0]
    3f5c:	strb	w23, [x19, #264]
    3f60:	b.eq	4108 <d_print_comp_inner+0x37c8>  // b.none
    3f64:	ldrb	w23, [x22], #1
    3f68:	cmp	x1, #0xff
    3f6c:	b.ne	3f48 <d_print_comp_inner+0x3608>  // b.any
    3f70:	ldp	x3, x2, [x19, #272]
    3f74:	strb	wzr, [x19, #255]
    3f78:	mov	x0, x19
    3f7c:	blr	x3
    3f80:	ldr	x2, [x19, #320]
    3f84:	mov	x1, #0x1                   	// #1
    3f88:	mov	x0, #0x0                   	// #0
    3f8c:	add	x2, x2, x1
    3f90:	str	x2, [x19, #320]
    3f94:	b	3f50 <d_print_comp_inner+0x3610>
    3f98:	ldr	x2, [x20, #8]
    3f9c:	add	x3, x20, #0x10
    3fa0:	mov	w1, w21
    3fa4:	mov	x0, x19
    3fa8:	bl	5de0 <d_maybe_print_fold_expression.isra.0>
    3fac:	cbnz	w0, 4430 <d_print_comp_inner+0x3af0>
    3fb0:	stp	x25, x26, [sp, #64]
    3fb4:	adrp	x1, 0 <d_make_comp>
    3fb8:	add	x1, x1, #0x0
    3fbc:	ldp	x25, x3, [x20, #8]
    3fc0:	ldr	x0, [x25, #8]
    3fc4:	ldp	x23, x2, [x3, #8]
    3fc8:	ldr	x0, [x0]
    3fcc:	ldp	x24, x22, [x2, #8]
    3fd0:	bl	0 <__asan_internal_strcmp>
    3fd4:	cbnz	w0, 4554 <d_print_comp_inner+0x3c14>
    3fd8:	mov	x2, x23
    3fdc:	mov	w1, w21
    3fe0:	mov	x0, x19
    3fe4:	bl	5ce8 <d_print_subexpr>
    3fe8:	mov	x2, x25
    3fec:	mov	w1, w21
    3ff0:	mov	x0, x19
    3ff4:	bl	5c30 <d_print_expr_op>
    3ff8:	mov	x2, x24
    3ffc:	mov	w1, w21
    4000:	mov	x0, x19
    4004:	adrp	x20, 0 <d_make_comp>
    4008:	bl	5ce8 <d_print_subexpr>
    400c:	add	x20, x20, #0x0
    4010:	mov	x0, x20
    4014:	bl	0 <__asan_internal_strlen>
    4018:	mov	x1, x20
    401c:	mov	x2, x0
    4020:	mov	x0, x19
    4024:	bl	1d8 <d_append_buffer>
    4028:	mov	x2, x22
    402c:	mov	w1, w21
    4030:	mov	x0, x19
    4034:	bl	5ce8 <d_print_subexpr>
    4038:	ldp	x21, x22, [sp, #32]
    403c:	ldp	x23, x24, [sp, #48]
    4040:	ldp	x25, x26, [sp, #64]
    4044:	b	9a4 <d_print_comp_inner+0x64>
    4048:	ldr	w4, [x19, #344]
    404c:	ldr	x5, [x19, #336]
    4050:	cmp	w4, #0x0
    4054:	b.le	4604 <d_print_comp_inner+0x3cc4>
    4058:	sub	w3, w4, #0x1
    405c:	add	x1, x5, #0x10
    4060:	mov	x2, x5
    4064:	add	x3, x1, w3, uxtw #4
    4068:	b	4078 <d_print_comp_inner+0x3738>
    406c:	add	x2, x2, #0x10
    4070:	cmp	x3, x2
    4074:	b.eq	4604 <d_print_comp_inner+0x3cc4>  // b.none
    4078:	ldr	x1, [x2]
    407c:	cmp	x0, x1
    4080:	b.ne	406c <d_print_comp_inner+0x372c>  // b.any
    4084:	ldr	x4, [x19, #328]
    4088:	mov	x1, x4
    408c:	cbnz	x4, 40a8 <d_print_comp_inner+0x3768>
    4090:	b	443c <d_print_comp_inner+0x3afc>
    4094:	cmp	x4, x1
    4098:	ccmp	x3, x20, #0x0, ne  // ne = any
    409c:	b.eq	40b4 <d_print_comp_inner+0x3774>  // b.none
    40a0:	ldr	x1, [x1, #8]
    40a4:	cbz	x1, 443c <d_print_comp_inner+0x3afc>
    40a8:	ldr	x3, [x1]
    40ac:	cmp	x3, x0
    40b0:	b.ne	4094 <d_print_comp_inner+0x3754>  // b.any
    40b4:	add	x1, x0, #0x8
    40b8:	mov	x0, x19
    40bc:	bl	690 <d_lookup_template_argument.isra.0>
    40c0:	cbz	x0, 9d0 <d_print_comp_inner+0x90>
    40c4:	mov	w22, #0x0                   	// #0
    40c8:	ldr	w1, [x0]
    40cc:	cmp	w1, #0x2f
    40d0:	b.ne	b54 <d_print_comp_inner+0x214>  // b.any
    40d4:	ldr	w1, [x19, #316]
    40d8:	tbnz	w1, #31, 4868 <d_print_comp_inner+0x3f28>
    40dc:	bl	650 <d_index_template_argument.part.0>
    40e0:	cbz	x0, 47d0 <d_print_comp_inner+0x3e90>
    40e4:	ldr	w1, [x0]
    40e8:	b	b54 <d_print_comp_inner+0x214>
    40ec:	mov	w1, w21
    40f0:	mov	x2, x20
    40f4:	mov	x0, x19
    40f8:	bl	4978 <d_print_comp>
    40fc:	ldp	x21, x22, [sp, #32]
    4100:	ldp	x23, x24, [sp, #48]
    4104:	b	9a4 <d_print_comp_inner+0x64>
    4108:	ldr	x2, [x20, #16]
    410c:	mov	w1, w21
    4110:	mov	x0, x19
    4114:	ldr	x2, [x2, #16]
    4118:	bl	4978 <d_print_comp>
    411c:	ldr	x1, [x19, #256]
    4120:	cmp	x1, #0xff
    4124:	b.ne	414c <d_print_comp_inner+0x380c>  // b.any
    4128:	ldp	x3, x2, [x19, #272]
    412c:	strb	wzr, [x19, #255]
    4130:	mov	x0, x19
    4134:	blr	x3
    4138:	str	xzr, [x19, #256]
    413c:	ldr	x0, [x19, #320]
    4140:	mov	x1, #0x0                   	// #0
    4144:	add	x0, x0, #0x1
    4148:	str	x0, [x19, #320]
    414c:	add	x0, x1, #0x1
    4150:	str	x0, [x19, #256]
    4154:	mov	w0, #0x29                  	// #41
    4158:	strb	w0, [x19, x1]
    415c:	strb	w0, [x19, #264]
    4160:	ldp	x21, x22, [sp, #32]
    4164:	ldp	x23, x24, [sp, #48]
    4168:	b	9a4 <d_print_comp_inner+0x64>
    416c:	sub	w1, w0, #0x61
    4170:	and	w1, w1, #0xff
    4174:	cmp	w1, #0x5
    4178:	b.hi	46e4 <d_print_comp_inner+0x3da4>  // b.pmore
    417c:	sub	w0, w0, #0x57
    4180:	b	33bc <d_print_comp_inner+0x2a7c>
    4184:	ldp	x21, x22, [sp, #32]
    4188:	ldp	x23, x24, [sp, #48]
    418c:	b	9a4 <d_print_comp_inner+0x64>
    4190:	ldr	w1, [x19, #316]
    4194:	tbnz	w1, #31, 3498 <d_print_comp_inner+0x2b58>
    4198:	bl	650 <d_index_template_argument.part.0>
    419c:	mov	x2, x0
    41a0:	cbnz	x0, 3498 <d_print_comp_inner+0x2b58>
    41a4:	b	9d0 <d_print_comp_inner+0x90>
    41a8:	ldp	x3, x2, [x19, #272]
    41ac:	strb	wzr, [x19, #255]
    41b0:	mov	x1, x0
    41b4:	mov	x0, x19
    41b8:	blr	x3
    41bc:	ldr	x0, [x19, #320]
    41c0:	mov	w2, #0x20                  	// #32
    41c4:	mov	x1, #0x1                   	// #1
    41c8:	strb	w2, [x19]
    41cc:	add	x0, x0, x1
    41d0:	str	x0, [x19, #320]
    41d4:	b	2188 <d_print_comp_inner+0x1848>
    41d8:	ldp	x3, x2, [x19, #272]
    41dc:	strb	wzr, [x19, #255]
    41e0:	mov	x1, x0
    41e4:	mov	x0, x19
    41e8:	blr	x3
    41ec:	ldr	x0, [x19, #320]
    41f0:	mov	w2, #0x20                  	// #32
    41f4:	mov	x1, #0x1                   	// #1
    41f8:	strb	w2, [x19]
    41fc:	add	x0, x0, x1
    4200:	str	x0, [x19, #320]
    4204:	b	214c <d_print_comp_inner+0x180c>
    4208:	ldp	x21, x22, [sp, #32]
    420c:	ldp	x23, x24, [sp, #48]
    4210:	b	9a4 <d_print_comp_inner+0x64>
    4214:	ldr	x1, [x19, #256]
    4218:	cmp	x1, #0xff
    421c:	b.ne	4244 <d_print_comp_inner+0x3904>  // b.any
    4220:	ldp	x3, x2, [x19, #272]
    4224:	strb	wzr, [x19, #255]
    4228:	mov	x0, x19
    422c:	blr	x3
    4230:	str	xzr, [x19, #256]
    4234:	ldr	x0, [x19, #320]
    4238:	mov	x1, #0x0                   	// #0
    423c:	add	x0, x0, #0x1
    4240:	str	x0, [x19, #320]
    4244:	add	x0, x1, #0x1
    4248:	str	x0, [x19, #256]
    424c:	mov	w2, #0x20                  	// #32
    4250:	strb	w2, [x19, x1]
    4254:	strb	w2, [x19, #264]
    4258:	b	3764 <d_print_comp_inner+0x2e24>
    425c:	cmp	x1, #0xff
    4260:	b.ne	4288 <d_print_comp_inner+0x3948>  // b.any
    4264:	ldp	x3, x2, [x19, #272]
    4268:	strb	wzr, [x19, #255]
    426c:	mov	x0, x19
    4270:	blr	x3
    4274:	str	xzr, [x19, #256]
    4278:	ldr	x0, [x19, #320]
    427c:	mov	x1, #0x0                   	// #0
    4280:	add	x0, x0, #0x1
    4284:	str	x0, [x19, #320]
    4288:	add	x0, x1, #0x1
    428c:	str	x0, [x19, #256]
    4290:	mov	w2, #0x20                  	// #32
    4294:	strb	w2, [x19, x1]
    4298:	strb	w2, [x19, #264]
    429c:	b	36fc <d_print_comp_inner+0x2dbc>
    42a0:	ldp	x21, x22, [sp, #32]
    42a4:	ldp	x23, x24, [sp, #48]
    42a8:	b	9a4 <d_print_comp_inner+0x64>
    42ac:	ldp	x21, x22, [sp, #32]
    42b0:	ldp	x23, x24, [sp, #48]
    42b4:	b	9a4 <d_print_comp_inner+0x64>
    42b8:	ldp	x21, x22, [sp, #32]
    42bc:	ldp	x23, x24, [sp, #48]
    42c0:	ldp	x25, x26, [sp, #64]
    42c4:	b	9a4 <d_print_comp_inner+0x64>
    42c8:	ldr	w0, [x20]
    42cc:	cmp	w0, #0x3
    42d0:	b.ne	3aec <d_print_comp_inner+0x31ac>  // b.any
    42d4:	ldr	x0, [x20, #8]
    42d8:	ldr	w1, [x0]
    42dc:	cmp	w1, #0x1
    42e0:	b.ne	3af4 <d_print_comp_inner+0x31b4>  // b.any
    42e4:	ldr	x1, [x20, #16]
    42e8:	ldr	w1, [x1]
    42ec:	cmp	w1, #0x29
    42f0:	csel	x20, x20, x0, ne  // ne = any
    42f4:	b	3af4 <d_print_comp_inner+0x31b4>
    42f8:	mov	w1, w3
    42fc:	mov	x0, x19
    4300:	bl	880 <d_append_num>
    4304:	ldp	x21, x22, [sp, #32]
    4308:	ldp	x23, x24, [sp, #48]
    430c:	b	9a4 <d_print_comp_inner+0x64>
    4310:	ldp	x21, x22, [sp, #32]
    4314:	ldp	x23, x24, [sp, #48]
    4318:	b	9a4 <d_print_comp_inner+0x64>
    431c:	ldr	x2, [x20, #8]
    4320:	mov	w1, w21
    4324:	mov	x0, x19
    4328:	adrp	x20, 0 <d_make_comp>
    432c:	add	x20, x20, #0x0
    4330:	bl	5ce8 <d_print_subexpr>
    4334:	mov	x0, x20
    4338:	bl	0 <__asan_internal_strlen>
    433c:	mov	x1, x20
    4340:	mov	x2, x0
    4344:	mov	x0, x19
    4348:	bl	1d8 <d_append_buffer>
    434c:	ldp	x21, x22, [sp, #32]
    4350:	ldp	x23, x24, [sp, #48]
    4354:	b	9a4 <d_print_comp_inner+0x64>
    4358:	ldr	x0, [x20, #8]
    435c:	add	x1, x22, #0x0
    4360:	ldr	x0, [x0, #8]
    4364:	ldr	x0, [x0]
    4368:	bl	0 <__asan_internal_strcmp>
    436c:	cbnz	w0, 4790 <d_print_comp_inner+0x3e50>
    4370:	ldr	x2, [x20, #16]
    4374:	mov	w1, w21
    4378:	mov	x0, x19
    437c:	ldr	x2, [x2, #16]
    4380:	bl	5ce8 <d_print_subexpr>
    4384:	b	1cb8 <d_print_comp_inner+0x1378>
    4388:	sub	x22, x22, #0x2
    438c:	ldp	x23, x24, [sp, #48]
    4390:	ldp	x25, x26, [sp, #64]
    4394:	str	x22, [x19, #256]
    4398:	ldp	x21, x22, [sp, #32]
    439c:	b	9a4 <d_print_comp_inner+0x64>
    43a0:	ldr	x0, [x0, #8]
    43a4:	ldr	w1, [x0, #16]
    43a8:	cmp	w1, #0x1
    43ac:	b.eq	47b4 <d_print_comp_inner+0x3e74>  // b.none
    43b0:	ldp	x21, x22, [sp, #32]
    43b4:	ldp	x23, x24, [sp, #48]
    43b8:	b	9a4 <d_print_comp_inner+0x64>
    43bc:	ldr	x0, [x20, #16]
    43c0:	b	1bf0 <d_print_comp_inner+0x12b0>
    43c4:	ldr	x1, [x0, #8]
    43c8:	ldr	w2, [x1, #16]
    43cc:	cmp	w2, #0x1
    43d0:	b.ne	1bc4 <d_print_comp_inner+0x1284>  // b.any
    43d4:	ldr	x1, [x1, #8]
    43d8:	ldrb	w1, [x1]
    43dc:	cmp	w1, #0x3e
    43e0:	b.ne	1bc4 <d_print_comp_inner+0x1284>  // b.any
    43e4:	ldr	x1, [x19, #256]
    43e8:	cmp	x1, #0xff
    43ec:	b.ne	4414 <d_print_comp_inner+0x3ad4>  // b.any
    43f0:	ldp	x3, x2, [x19, #272]
    43f4:	strb	wzr, [x19, #255]
    43f8:	mov	x0, x19
    43fc:	blr	x3
    4400:	str	xzr, [x19, #256]
    4404:	ldr	x0, [x19, #320]
    4408:	mov	x1, #0x0                   	// #0
    440c:	add	x0, x0, #0x1
    4410:	str	x0, [x19, #320]
    4414:	add	x0, x1, #0x1
    4418:	str	x0, [x19, #256]
    441c:	mov	w0, #0x28                  	// #40
    4420:	strb	w0, [x19, x1]
    4424:	strb	w0, [x19, #264]
    4428:	ldr	x0, [x20, #8]
    442c:	b	1bc4 <d_print_comp_inner+0x1284>
    4430:	ldp	x21, x22, [sp, #32]
    4434:	ldp	x23, x24, [sp, #48]
    4438:	b	9a4 <d_print_comp_inner+0x64>
    443c:	ldr	x2, [x2, #8]
    4440:	add	x1, x0, #0x8
    4444:	ldr	x23, [x19, #288]
    4448:	str	x2, [x19, #288]
    444c:	mov	x0, x19
    4450:	bl	690 <d_lookup_template_argument.isra.0>
    4454:	cbz	x0, 47d4 <d_print_comp_inner+0x3e94>
    4458:	mov	w22, #0x1                   	// #1
    445c:	b	40c8 <d_print_comp_inner+0x3788>
    4460:	ldr	x25, [x25, #8]
    4464:	cbz	x25, 3e80 <d_print_comp_inner+0x3540>
    4468:	ldr	w5, [x25]
    446c:	b	3d70 <d_print_comp_inner+0x3430>
    4470:	ldr	x0, [x22, #8]
    4474:	adrp	x1, 0 <d_make_comp>
    4478:	mov	x2, #0x6                   	// #6
    447c:	add	x1, x1, #0x0
    4480:	bl	0 <__asan_internal_strncmp>
    4484:	cbnz	w0, 2124 <d_print_comp_inner+0x17e4>
    4488:	ldr	x2, [x20, #16]
    448c:	mov	w1, w21
    4490:	mov	x0, x19
    4494:	adrp	x20, 0 <d_make_comp>
    4498:	add	x20, x20, #0x0
    449c:	bl	4978 <d_print_comp>
    44a0:	mov	x0, x20
    44a4:	bl	0 <__asan_internal_strlen>
    44a8:	mov	x1, x20
    44ac:	mov	x2, x0
    44b0:	mov	x0, x19
    44b4:	bl	1d8 <d_append_buffer>
    44b8:	b	219c <d_print_comp_inner+0x185c>
    44bc:	ldp	x21, x22, [sp, #32]
    44c0:	ldp	x23, x24, [sp, #48]
    44c4:	b	9a4 <d_print_comp_inner+0x64>
    44c8:	ldp	x21, x22, [sp, #32]
    44cc:	ldp	x23, x24, [sp, #48]
    44d0:	b	9a4 <d_print_comp_inner+0x64>
    44d4:	ldr	x0, [x1, #16]
    44d8:	ldr	w0, [x0]
    44dc:	cmp	w0, #0x29
    44e0:	b.eq	44ec <d_print_comp_inner+0x3bac>  // b.none
    44e4:	mov	w0, #0x1                   	// #1
    44e8:	str	w0, [x19, #304]
    44ec:	ldr	x2, [x1, #8]
    44f0:	mov	x0, x19
    44f4:	mov	w1, w21
    44f8:	bl	5ce8 <d_print_subexpr>
    44fc:	b	1c00 <d_print_comp_inner+0x12c0>
    4500:	ldp	x21, x22, [sp, #32]
    4504:	ldp	x23, x24, [sp, #48]
    4508:	b	9a4 <d_print_comp_inner+0x64>
    450c:	ldp	x21, x22, [sp, #32]
    4510:	ldp	x23, x24, [sp, #48]
    4514:	b	9a4 <d_print_comp_inner+0x64>
    4518:	ldp	x21, x22, [sp, #32]
    451c:	ldp	x23, x24, [sp, #48]
    4520:	b	9a4 <d_print_comp_inner+0x64>
    4524:	ldp	x21, x22, [sp, #32]
    4528:	ldp	x23, x24, [sp, #48]
    452c:	b	9a4 <d_print_comp_inner+0x64>
    4530:	ldp	x21, x22, [sp, #32]
    4534:	ldp	x23, x24, [sp, #48]
    4538:	b	9a4 <d_print_comp_inner+0x64>
    453c:	ldp	x21, x22, [sp, #32]
    4540:	ldp	x23, x24, [sp, #48]
    4544:	b	9a4 <d_print_comp_inner+0x64>
    4548:	ldp	x21, x22, [sp, #32]
    454c:	ldp	x23, x24, [sp, #48]
    4550:	b	9a4 <d_print_comp_inner+0x64>
    4554:	adrp	x20, 0 <d_make_comp>
    4558:	add	x20, x20, #0x0
    455c:	mov	x0, x20
    4560:	bl	0 <__asan_internal_strlen>
    4564:	mov	x1, x20
    4568:	mov	x2, x0
    456c:	mov	x0, x19
    4570:	bl	1d8 <d_append_buffer>
    4574:	ldr	x0, [x23, #8]
    4578:	cbz	x0, 45d0 <d_print_comp_inner+0x3c90>
    457c:	mov	w1, w21
    4580:	mov	x2, x23
    4584:	mov	x0, x19
    4588:	bl	5ce8 <d_print_subexpr>
    458c:	ldr	x1, [x19, #256]
    4590:	cmp	x1, #0xff
    4594:	b.ne	45bc <d_print_comp_inner+0x3c7c>  // b.any
    4598:	ldp	x3, x2, [x19, #272]
    459c:	strb	wzr, [x19, #255]
    45a0:	mov	x0, x19
    45a4:	blr	x3
    45a8:	str	xzr, [x19, #256]
    45ac:	ldr	x0, [x19, #320]
    45b0:	mov	x1, #0x0                   	// #0
    45b4:	add	x0, x0, #0x1
    45b8:	str	x0, [x19, #320]
    45bc:	add	x0, x1, #0x1
    45c0:	str	x0, [x19, #256]
    45c4:	mov	w0, #0x20                  	// #32
    45c8:	strb	w0, [x19, x1]
    45cc:	strb	w0, [x19, #264]
    45d0:	mov	x2, x24
    45d4:	mov	w1, w21
    45d8:	mov	x0, x19
    45dc:	bl	4978 <d_print_comp>
    45e0:	cbz	x22, 47a4 <d_print_comp_inner+0x3e64>
    45e4:	mov	x2, x22
    45e8:	mov	w1, w21
    45ec:	mov	x0, x19
    45f0:	bl	5ce8 <d_print_subexpr>
    45f4:	ldp	x21, x22, [sp, #32]
    45f8:	ldp	x23, x24, [sp, #48]
    45fc:	ldp	x25, x26, [sp, #64]
    4600:	b	9a4 <d_print_comp_inner+0x64>
    4604:	ldr	w1, [x19, #348]
    4608:	cmp	w4, w1
    460c:	b.ge	4674 <d_print_comp_inner+0x3d34>  // b.tcont
    4610:	sbfiz	x1, x4, #4, #32
    4614:	add	w2, w4, #0x1
    4618:	ldr	x3, [x19, #288]
    461c:	str	w2, [x19, #344]
    4620:	str	x0, [x5, x1]
    4624:	add	x1, x5, w4, sxtw #4
    4628:	add	x1, x1, #0x8
    462c:	cbz	x3, 4860 <d_print_comp_inner+0x3f20>
    4630:	ldr	w2, [x19, #360]
    4634:	ldr	w6, [x19, #364]
    4638:	sbfiz	x5, x2, #4, #32
    463c:	b	466c <d_print_comp_inner+0x3d2c>
    4640:	ldr	x4, [x19, #352]
    4644:	add	w2, w2, #0x1
    4648:	ldr	x7, [x3, #8]
    464c:	add	x4, x4, x5
    4650:	str	w2, [x19, #360]
    4654:	add	x5, x5, #0x10
    4658:	str	x7, [x4, #8]
    465c:	str	x4, [x1]
    4660:	mov	x1, x4
    4664:	ldr	x3, [x3]
    4668:	cbz	x3, 4860 <d_print_comp_inner+0x3f20>
    466c:	cmp	w6, w2
    4670:	b.gt	4640 <d_print_comp_inner+0x3d00>
    4674:	mov	w0, #0x1                   	// #1
    4678:	ldp	x21, x22, [sp, #32]
    467c:	ldp	x23, x24, [sp, #48]
    4680:	str	w0, [x19, #304]
    4684:	b	9a4 <d_print_comp_inner+0x64>
    4688:	ldr	x2, [x20, #16]
    468c:	mov	x0, x19
    4690:	mov	w1, w21
    4694:	bl	4978 <d_print_comp>
    4698:	str	xzr, [x19, #296]
    469c:	ldr	w0, [sp, #128]
    46a0:	cbz	w0, 1488 <d_print_comp_inner+0xb48>
    46a4:	ldp	x21, x22, [sp, #32]
    46a8:	ldp	x23, x24, [sp, #48]
    46ac:	b	9a4 <d_print_comp_inner+0x64>
    46b0:	cmp	w22, #0x5
    46b4:	b.eq	47e4 <d_print_comp_inner+0x3ea4>  // b.none
    46b8:	adrp	x20, 0 <d_make_comp>
    46bc:	add	x20, x20, #0x0
    46c0:	mov	x0, x20
    46c4:	bl	0 <__asan_internal_strlen>
    46c8:	mov	x1, x20
    46cc:	mov	x2, x0
    46d0:	mov	x0, x19
    46d4:	bl	1d8 <d_append_buffer>
    46d8:	ldp	x21, x22, [sp, #32]
    46dc:	ldp	x23, x24, [sp, #48]
    46e0:	b	9a4 <d_print_comp_inner+0x64>
    46e4:	cmp	x24, x21
    46e8:	b.cs	3328 <d_print_comp_inner+0x29e8>  // b.hs, b.nlast
    46ec:	cmp	x2, #0xff
    46f0:	ccmp	w0, w23, #0x0, ls  // ls = plast
    46f4:	b.ne	3328 <d_print_comp_inner+0x29e8>  // b.any
    46f8:	ldr	x1, [x19, #256]
    46fc:	and	w22, w2, #0xff
    4700:	cmp	x1, #0xff
    4704:	b.ne	472c <d_print_comp_inner+0x3dec>  // b.any
    4708:	ldp	x3, x2, [x19, #272]
    470c:	strb	wzr, [x19, #255]
    4710:	mov	x0, x19
    4714:	blr	x3
    4718:	str	xzr, [x19, #256]
    471c:	ldr	x0, [x19, #320]
    4720:	mov	x1, #0x0                   	// #0
    4724:	add	x0, x0, #0x1
    4728:	str	x0, [x19, #320]
    472c:	add	x0, x1, #0x1
    4730:	str	x0, [x19, #256]
    4734:	strb	w22, [x19, x1]
    4738:	mov	x20, x24
    473c:	strb	w22, [x19, #264]
    4740:	b	3368 <d_print_comp_inner+0x2a28>
    4744:	mov	x1, x20
    4748:	mov	x0, x19
    474c:	bl	6c0 <d_find_pack>
    4750:	cbnz	x0, 476c <d_print_comp_inner+0x3e2c>
    4754:	b	4778 <d_print_comp_inner+0x3e38>
    4758:	ldr	x1, [x0, #8]
    475c:	cbz	x1, 4778 <d_print_comp_inner+0x3e38>
    4760:	ldr	x0, [x0, #16]
    4764:	add	w3, w3, #0x1
    4768:	cbz	x0, 4778 <d_print_comp_inner+0x3e38>
    476c:	ldr	w1, [x0]
    4770:	cmp	w1, #0x2f
    4774:	b.eq	4758 <d_print_comp_inner+0x3e18>  // b.none
    4778:	mov	w1, w3
    477c:	mov	x0, x19
    4780:	bl	880 <d_append_num>
    4784:	ldp	x21, x22, [sp, #32]
    4788:	ldp	x23, x24, [sp, #48]
    478c:	b	9a4 <d_print_comp_inner+0x64>
    4790:	ldr	x2, [x20, #8]
    4794:	mov	w1, w21
    4798:	mov	x0, x19
    479c:	bl	5c30 <d_print_expr_op>
    47a0:	b	4370 <d_print_comp_inner+0x3a30>
    47a4:	ldp	x21, x22, [sp, #32]
    47a8:	ldp	x23, x24, [sp, #48]
    47ac:	ldp	x25, x26, [sp, #64]
    47b0:	b	9a4 <d_print_comp_inner+0x64>
    47b4:	ldr	x0, [x0, #8]
    47b8:	ldrb	w0, [x0]
    47bc:	cmp	w0, #0x3e
    47c0:	b.eq	4810 <d_print_comp_inner+0x3ed0>  // b.none
    47c4:	ldp	x21, x22, [sp, #32]
    47c8:	ldp	x23, x24, [sp, #48]
    47cc:	b	9a4 <d_print_comp_inner+0x64>
    47d0:	cbz	w22, 9d0 <d_print_comp_inner+0x90>
    47d4:	ldp	x21, x22, [sp, #32]
    47d8:	str	x23, [x19, #288]
    47dc:	ldp	x23, x24, [sp, #48]
    47e0:	b	9d8 <d_print_comp_inner+0x98>
    47e4:	adrp	x20, 0 <d_make_comp>
    47e8:	add	x20, x20, #0x0
    47ec:	mov	x0, x20
    47f0:	bl	0 <__asan_internal_strlen>
    47f4:	mov	x1, x20
    47f8:	mov	x2, x0
    47fc:	mov	x0, x19
    4800:	bl	1d8 <d_append_buffer>
    4804:	ldp	x21, x22, [sp, #32]
    4808:	ldp	x23, x24, [sp, #48]
    480c:	b	9a4 <d_print_comp_inner+0x64>
    4810:	ldr	x1, [x19, #256]
    4814:	cmp	x1, #0xff
    4818:	b.ne	4840 <d_print_comp_inner+0x3f00>  // b.any
    481c:	ldp	x3, x2, [x19, #272]
    4820:	strb	wzr, [x19, #255]
    4824:	mov	x0, x19
    4828:	blr	x3
    482c:	str	xzr, [x19, #256]
    4830:	ldr	x0, [x19, #320]
    4834:	mov	x1, #0x0                   	// #0
    4838:	add	x0, x0, #0x1
    483c:	str	x0, [x19, #320]
    4840:	add	x0, x1, #0x1
    4844:	str	x0, [x19, #256]
    4848:	mov	w0, #0x29                  	// #41
    484c:	strb	w0, [x19, x1]
    4850:	strb	w0, [x19, #264]
    4854:	ldp	x21, x22, [sp, #32]
    4858:	ldp	x23, x24, [sp, #48]
    485c:	b	9a4 <d_print_comp_inner+0x64>
    4860:	str	xzr, [x1]
    4864:	b	40b4 <d_print_comp_inner+0x3774>
    4868:	ldr	w1, [x20]
    486c:	ldr	x4, [x19, #296]
    4870:	cmp	w1, #0x2f
    4874:	csel	x20, x20, x0, ne  // ne = any
    4878:	b	b78 <d_print_comp_inner+0x238>
    487c:	ldr	x1, [x19, #256]
    4880:	cmp	x1, #0xff
    4884:	b.ne	48ac <d_print_comp_inner+0x3f6c>  // b.any
    4888:	ldp	x3, x2, [x19, #272]
    488c:	strb	wzr, [x19, #255]
    4890:	mov	x0, x19
    4894:	blr	x3
    4898:	str	xzr, [x19, #256]
    489c:	ldr	x0, [x19, #320]
    48a0:	mov	x1, #0x0                   	// #0
    48a4:	add	x0, x0, #0x1
    48a8:	str	x0, [x19, #320]
    48ac:	add	x0, x1, #0x1
    48b0:	str	x0, [x19, #256]
    48b4:	mov	w0, #0x75                  	// #117
    48b8:	strb	w0, [x19, x1]
    48bc:	strb	w0, [x19, #264]
    48c0:	ldp	x21, x22, [sp, #32]
    48c4:	ldp	x23, x24, [sp, #48]
    48c8:	b	9a4 <d_print_comp_inner+0x64>
    48cc:	adrp	x20, 0 <d_make_comp>
    48d0:	add	x20, x20, #0x0
    48d4:	mov	x0, x20
    48d8:	bl	0 <__asan_internal_strlen>
    48dc:	mov	x1, x20
    48e0:	mov	x2, x0
    48e4:	mov	x0, x19
    48e8:	bl	1d8 <d_append_buffer>
    48ec:	ldp	x21, x22, [sp, #32]
    48f0:	ldp	x23, x24, [sp, #48]
    48f4:	b	9a4 <d_print_comp_inner+0x64>
    48f8:	ldr	x1, [x19, #256]
    48fc:	cmp	x1, #0xff
    4900:	b.ne	4928 <d_print_comp_inner+0x3fe8>  // b.any
    4904:	ldp	x3, x2, [x19, #272]
    4908:	strb	wzr, [x19, #255]
    490c:	mov	x0, x19
    4910:	blr	x3
    4914:	str	xzr, [x19, #256]
    4918:	ldr	x0, [x19, #320]
    491c:	mov	x1, #0x0                   	// #0
    4920:	add	x0, x0, #0x1
    4924:	str	x0, [x19, #320]
    4928:	add	x0, x1, #0x1
    492c:	str	x0, [x19, #256]
    4930:	mov	w0, #0x2d                  	// #45
    4934:	strb	w0, [x19, x1]
    4938:	strb	w0, [x19, #264]
    493c:	b	35e4 <d_print_comp_inner+0x2ca4>
    4940:	ldp	x21, x22, [sp, #32]
    4944:	ldp	x23, x24, [sp, #48]
    4948:	b	9a4 <d_print_comp_inner+0x64>
    494c:	adrp	x20, 0 <d_make_comp>
    4950:	add	x20, x20, #0x0
    4954:	mov	x0, x20
    4958:	bl	0 <__asan_internal_strlen>
    495c:	mov	x1, x20
    4960:	mov	x2, x0
    4964:	mov	x0, x19
    4968:	bl	1d8 <d_append_buffer>
    496c:	ldp	x21, x22, [sp, #32]
    4970:	ldp	x23, x24, [sp, #48]
    4974:	b	9a4 <d_print_comp_inner+0x64>

0000000000004978 <d_print_comp>:
    4978:	stp	x29, x30, [sp, #-48]!
    497c:	mov	x29, sp
    4980:	stp	x19, x20, [sp, #16]
    4984:	mov	x20, x0
    4988:	cbz	x2, 49f8 <d_print_comp+0x80>
    498c:	ldr	w3, [x2, #4]
    4990:	mov	x19, x2
    4994:	cmp	w3, #0x1
    4998:	b.gt	49f8 <d_print_comp+0x80>
    499c:	ldr	w4, [x0, #308]
    49a0:	cmp	w4, #0x400
    49a4:	b.gt	49f8 <d_print_comp+0x80>
    49a8:	add	w3, w3, #0x1
    49ac:	add	w4, w4, #0x1
    49b0:	str	w3, [x2, #4]
    49b4:	add	x3, sp, #0x20
    49b8:	str	w4, [x0, #308]
    49bc:	ldr	x4, [x0, #328]
    49c0:	str	x3, [x0, #328]
    49c4:	stp	x2, x4, [sp, #32]
    49c8:	bl	940 <d_print_comp_inner>
    49cc:	ldr	w1, [x19, #4]
    49d0:	ldr	x0, [sp, #40]
    49d4:	str	x0, [x20, #328]
    49d8:	ldr	w0, [x20, #308]
    49dc:	sub	w1, w1, #0x1
    49e0:	str	w1, [x19, #4]
    49e4:	sub	w0, w0, #0x1
    49e8:	str	w0, [x20, #308]
    49ec:	ldp	x19, x20, [sp, #16]
    49f0:	ldp	x29, x30, [sp], #48
    49f4:	ret
    49f8:	mov	w0, #0x1                   	// #1
    49fc:	str	w0, [x20, #304]
    4a00:	ldp	x19, x20, [sp, #16]
    4a04:	ldp	x29, x30, [sp], #48
    4a08:	ret
    4a0c:	nop

0000000000004a10 <d_print_mod>:
    4a10:	stp	x29, x30, [sp, #-64]!
    4a14:	mov	x29, sp
    4a18:	stp	x19, x20, [sp, #16]
    4a1c:	mov	x19, x0
    4a20:	ldr	w0, [x2]
    4a24:	stp	x21, x22, [sp, #32]
    4a28:	mov	x20, x2
    4a2c:	sub	w0, w0, #0x3
    4a30:	mov	w21, w1
    4a34:	cmp	w0, #0x4d
    4a38:	b.ls	4a58 <d_print_mod+0x48>  // b.plast
    4a3c:	mov	x2, x20
    4a40:	mov	w1, w21
    4a44:	mov	x0, x19
    4a48:	ldp	x19, x20, [sp, #16]
    4a4c:	ldp	x21, x22, [sp, #32]
    4a50:	ldp	x29, x30, [sp], #64
    4a54:	b	4978 <d_print_comp>
    4a58:	adrp	x1, 0 <d_make_comp>
    4a5c:	add	x1, x1, #0x0
    4a60:	ldrh	w0, [x1, w0, uxtw #1]
    4a64:	adr	x1, 4a70 <d_print_mod+0x60>
    4a68:	add	x0, x1, w0, sxth #2
    4a6c:	br	x0
    4a70:	adrp	x22, 0 <d_make_comp>
    4a74:	add	x22, x22, #0x0
    4a78:	mov	x0, x22
    4a7c:	bl	0 <__asan_internal_strlen>
    4a80:	cbz	x0, 4c2c <d_print_mod+0x21c>
    4a84:	adrp	x20, 380 <d_number_component+0x30>
    4a88:	add	x22, x0, x22
    4a8c:	add	x20, x20, #0x0
    4a90:	mov	w21, #0x20                  	// #32
    4a94:	ldr	x1, [x19, #256]
    4a98:	b	4abc <d_print_mod+0xac>
    4a9c:	mov	x0, x1
    4aa0:	add	x1, x1, #0x1
    4aa4:	str	x1, [x19, #256]
    4aa8:	cmp	x20, x22
    4aac:	strb	w21, [x19, x0]
    4ab0:	strb	w21, [x19, #264]
    4ab4:	b.eq	4c2c <d_print_mod+0x21c>  // b.none
    4ab8:	ldrb	w21, [x20], #1
    4abc:	cmp	x1, #0xff
    4ac0:	b.ne	4a9c <d_print_mod+0x8c>  // b.any
    4ac4:	ldp	x3, x2, [x19, #272]
    4ac8:	strb	wzr, [x19, #255]
    4acc:	mov	x0, x19
    4ad0:	blr	x3
    4ad4:	ldr	x2, [x19, #320]
    4ad8:	mov	x1, #0x1                   	// #1
    4adc:	mov	x0, #0x0                   	// #0
    4ae0:	add	x2, x2, x1
    4ae4:	str	x2, [x19, #320]
    4ae8:	b	4aa4 <d_print_mod+0x94>
    4aec:	adrp	x22, 0 <d_make_comp>
    4af0:	add	x22, x22, #0x0
    4af4:	mov	x0, x22
    4af8:	bl	0 <__asan_internal_strlen>
    4afc:	cbz	x0, 4c2c <d_print_mod+0x21c>
    4b00:	adrp	x20, 390 <d_number_component+0x40>
    4b04:	add	x22, x0, x22
    4b08:	add	x20, x20, #0x0
    4b0c:	mov	w21, #0x20                  	// #32
    4b10:	ldr	x1, [x19, #256]
    4b14:	b	4b38 <d_print_mod+0x128>
    4b18:	mov	x0, x1
    4b1c:	add	x1, x1, #0x1
    4b20:	str	x1, [x19, #256]
    4b24:	cmp	x20, x22
    4b28:	strb	w21, [x19, x0]
    4b2c:	strb	w21, [x19, #264]
    4b30:	b.eq	4c2c <d_print_mod+0x21c>  // b.none
    4b34:	ldrb	w21, [x20], #1
    4b38:	cmp	x1, #0xff
    4b3c:	b.ne	4b18 <d_print_mod+0x108>  // b.any
    4b40:	ldp	x3, x2, [x19, #272]
    4b44:	strb	wzr, [x19, #255]
    4b48:	mov	x0, x19
    4b4c:	blr	x3
    4b50:	ldr	x2, [x19, #320]
    4b54:	mov	x1, #0x1                   	// #1
    4b58:	mov	x0, #0x0                   	// #0
    4b5c:	add	x2, x2, x1
    4b60:	str	x2, [x19, #320]
    4b64:	b	4b20 <d_print_mod+0x110>
    4b68:	adrp	x22, 0 <d_make_comp>
    4b6c:	add	x22, x22, #0x0
    4b70:	mov	x0, x22
    4b74:	bl	0 <__asan_internal_strlen>
    4b78:	cbz	x0, 4c2c <d_print_mod+0x21c>
    4b7c:	adrp	x20, 3a0 <d_number_component+0x50>
    4b80:	add	x22, x0, x22
    4b84:	add	x20, x20, #0x0
    4b88:	mov	w21, #0x20                  	// #32
    4b8c:	ldr	x1, [x19, #256]
    4b90:	b	4bb4 <d_print_mod+0x1a4>
    4b94:	mov	x0, x1
    4b98:	add	x1, x1, #0x1
    4b9c:	str	x1, [x19, #256]
    4ba0:	cmp	x22, x20
    4ba4:	strb	w21, [x19, x0]
    4ba8:	strb	w21, [x19, #264]
    4bac:	b.eq	4c2c <d_print_mod+0x21c>  // b.none
    4bb0:	ldrb	w21, [x20], #1
    4bb4:	cmp	x1, #0xff
    4bb8:	b.ne	4b94 <d_print_mod+0x184>  // b.any
    4bbc:	ldp	x3, x2, [x19, #272]
    4bc0:	strb	wzr, [x19, #255]
    4bc4:	mov	x0, x19
    4bc8:	blr	x3
    4bcc:	ldr	x2, [x19, #320]
    4bd0:	mov	x1, #0x1                   	// #1
    4bd4:	mov	x0, #0x0                   	// #0
    4bd8:	add	x2, x2, x1
    4bdc:	str	x2, [x19, #320]
    4be0:	b	4b9c <d_print_mod+0x18c>
    4be4:	tbnz	w21, #2, 4c2c <d_print_mod+0x21c>
    4be8:	ldr	x1, [x19, #256]
    4bec:	add	x0, x1, #0x1
    4bf0:	cmp	x1, #0xff
    4bf4:	b.ne	4c1c <d_print_mod+0x20c>  // b.any
    4bf8:	ldp	x3, x2, [x19, #272]
    4bfc:	strb	wzr, [x19, #255]
    4c00:	mov	x0, x19
    4c04:	blr	x3
    4c08:	ldr	x2, [x19, #320]
    4c0c:	mov	x0, #0x1                   	// #1
    4c10:	mov	x1, #0x0                   	// #0
    4c14:	add	x2, x2, x0
    4c18:	str	x2, [x19, #320]
    4c1c:	str	x0, [x19, #256]
    4c20:	mov	w0, #0x2a                  	// #42
    4c24:	strb	w0, [x19, x1]
    4c28:	strb	w0, [x19, #264]
    4c2c:	ldp	x19, x20, [sp, #16]
    4c30:	ldp	x21, x22, [sp, #32]
    4c34:	ldp	x29, x30, [sp], #64
    4c38:	ret
    4c3c:	ldr	x1, [x19, #256]
    4c40:	add	x0, x1, #0x1
    4c44:	cmp	x1, #0xff
    4c48:	b.ne	4c70 <d_print_mod+0x260>  // b.any
    4c4c:	ldp	x3, x2, [x19, #272]
    4c50:	strb	wzr, [x19, #255]
    4c54:	mov	x0, x19
    4c58:	blr	x3
    4c5c:	ldr	x2, [x19, #320]
    4c60:	mov	x0, #0x1                   	// #1
    4c64:	mov	x1, #0x0                   	// #0
    4c68:	add	x2, x2, x0
    4c6c:	str	x2, [x19, #320]
    4c70:	str	x0, [x19, #256]
    4c74:	mov	w0, #0x20                  	// #32
    4c78:	strb	w0, [x19, x1]
    4c7c:	strb	w0, [x19, #264]
    4c80:	adrp	x22, 0 <d_make_comp>
    4c84:	add	x22, x22, #0x0
    4c88:	mov	x0, x22
    4c8c:	bl	0 <__asan_internal_strlen>
    4c90:	cbz	x0, 4c2c <d_print_mod+0x21c>
    4c94:	adrp	x20, 3d8 <d_compact_number+0x20>
    4c98:	add	x22, x0, x22
    4c9c:	add	x20, x20, #0x0
    4ca0:	mov	w21, #0x26                  	// #38
    4ca4:	ldr	x1, [x19, #256]
    4ca8:	b	4ccc <d_print_mod+0x2bc>
    4cac:	mov	x2, x1
    4cb0:	add	x1, x1, #0x1
    4cb4:	str	x1, [x19, #256]
    4cb8:	cmp	x20, x22
    4cbc:	strb	w21, [x19, x2]
    4cc0:	strb	w21, [x19, #264]
    4cc4:	b.eq	4c2c <d_print_mod+0x21c>  // b.none
    4cc8:	ldrb	w21, [x20], #1
    4ccc:	cmp	x1, #0xff
    4cd0:	b.ne	4cac <d_print_mod+0x29c>  // b.any
    4cd4:	ldp	x3, x2, [x19, #272]
    4cd8:	strb	wzr, [x19, #255]
    4cdc:	mov	x0, x19
    4ce0:	blr	x3
    4ce4:	ldr	x0, [x19, #320]
    4ce8:	mov	x1, #0x1                   	// #1
    4cec:	mov	x2, #0x0                   	// #0
    4cf0:	add	x0, x0, x1
    4cf4:	str	x0, [x19, #320]
    4cf8:	b	4cb4 <d_print_mod+0x2a4>
    4cfc:	ldr	x0, [x19, #256]
    4d00:	cmp	x0, #0xff
    4d04:	b.eq	5270 <d_print_mod+0x860>  // b.none
    4d08:	add	x1, x0, #0x1
    4d0c:	str	x1, [x19, #256]
    4d10:	mov	w2, #0x20                  	// #32
    4d14:	strb	w2, [x19, x0]
    4d18:	strb	w2, [x19, #264]
    4d1c:	b	5138 <d_print_mod+0x728>
    4d20:	ldr	x1, [x19, #256]
    4d24:	add	x0, x1, #0x1
    4d28:	cmp	x1, #0xff
    4d2c:	b.eq	5248 <d_print_mod+0x838>  // b.none
    4d30:	str	x0, [x19, #256]
    4d34:	mov	w0, #0x20                  	// #32
    4d38:	strb	w0, [x19, x1]
    4d3c:	mov	w1, w21
    4d40:	strb	w0, [x19, #264]
    4d44:	mov	x0, x19
    4d48:	ldr	x2, [x20, #16]
    4d4c:	ldp	x19, x20, [sp, #16]
    4d50:	ldp	x21, x22, [sp, #32]
    4d54:	ldp	x29, x30, [sp], #64
    4d58:	b	4978 <d_print_comp>
    4d5c:	ldrb	w0, [x19, #264]
    4d60:	cmp	w0, #0x28
    4d64:	b.eq	4dac <d_print_mod+0x39c>  // b.none
    4d68:	ldr	x1, [x19, #256]
    4d6c:	add	x0, x1, #0x1
    4d70:	cmp	x1, #0xff
    4d74:	b.ne	4d9c <d_print_mod+0x38c>  // b.any
    4d78:	ldp	x3, x2, [x19, #272]
    4d7c:	strb	wzr, [x19, #255]
    4d80:	mov	x0, x19
    4d84:	blr	x3
    4d88:	ldr	x2, [x19, #320]
    4d8c:	mov	x0, #0x1                   	// #1
    4d90:	mov	x1, #0x0                   	// #0
    4d94:	add	x2, x2, x0
    4d98:	str	x2, [x19, #320]
    4d9c:	str	x0, [x19, #256]
    4da0:	mov	w0, #0x20                  	// #32
    4da4:	strb	w0, [x19, x1]
    4da8:	strb	w0, [x19, #264]
    4dac:	ldr	x2, [x20, #8]
    4db0:	mov	w1, w21
    4db4:	mov	x0, x19
    4db8:	adrp	x22, 0 <d_make_comp>
    4dbc:	add	x22, x22, #0x0
    4dc0:	bl	4978 <d_print_comp>
    4dc4:	mov	x0, x22
    4dc8:	bl	0 <__asan_internal_strlen>
    4dcc:	cbz	x0, 4c2c <d_print_mod+0x21c>
    4dd0:	adrp	x20, 400 <d_compact_number+0x48>
    4dd4:	add	x22, x0, x22
    4dd8:	add	x20, x20, #0x0
    4ddc:	mov	w21, #0x3a                  	// #58
    4de0:	ldr	x1, [x19, #256]
    4de4:	b	4e08 <d_print_mod+0x3f8>
    4de8:	mov	x0, x1
    4dec:	add	x1, x1, #0x1
    4df0:	str	x1, [x19, #256]
    4df4:	cmp	x20, x22
    4df8:	strb	w21, [x19, x0]
    4dfc:	strb	w21, [x19, #264]
    4e00:	b.eq	4c2c <d_print_mod+0x21c>  // b.none
    4e04:	ldrb	w21, [x20], #1
    4e08:	cmp	x1, #0xff
    4e0c:	b.ne	4de8 <d_print_mod+0x3d8>  // b.any
    4e10:	ldp	x3, x2, [x19, #272]
    4e14:	strb	wzr, [x19, #255]
    4e18:	mov	x0, x19
    4e1c:	blr	x3
    4e20:	ldr	x2, [x19, #320]
    4e24:	mov	x1, #0x1                   	// #1
    4e28:	mov	x0, #0x0                   	// #0
    4e2c:	add	x2, x2, x1
    4e30:	str	x2, [x19, #320]
    4e34:	b	4df0 <d_print_mod+0x3e0>
    4e38:	stp	x23, x24, [sp, #48]
    4e3c:	adrp	x24, 0 <d_make_comp>
    4e40:	add	x24, x24, #0x0
    4e44:	mov	x0, x24
    4e48:	bl	0 <__asan_internal_strlen>
    4e4c:	cbz	x0, 5218 <d_print_mod+0x808>
    4e50:	adrp	x22, 408 <d_compact_number+0x50>
    4e54:	add	x24, x0, x24
    4e58:	add	x22, x22, #0x0
    4e5c:	mov	w23, #0x20                  	// #32
    4e60:	ldr	x1, [x19, #256]
    4e64:	b	4e88 <d_print_mod+0x478>
    4e68:	mov	x0, x1
    4e6c:	add	x1, x1, #0x1
    4e70:	str	x1, [x19, #256]
    4e74:	cmp	x22, x24
    4e78:	strb	w23, [x19, x0]
    4e7c:	strb	w23, [x19, #264]
    4e80:	b.eq	5218 <d_print_mod+0x808>  // b.none
    4e84:	ldrb	w23, [x22], #1
    4e88:	cmp	x1, #0xff
    4e8c:	b.ne	4e68 <d_print_mod+0x458>  // b.any
    4e90:	ldp	x3, x2, [x19, #272]
    4e94:	strb	wzr, [x19, #255]
    4e98:	mov	x0, x19
    4e9c:	blr	x3
    4ea0:	ldr	x2, [x19, #320]
    4ea4:	mov	x1, #0x1                   	// #1
    4ea8:	mov	x0, #0x0                   	// #0
    4eac:	add	x2, x2, x1
    4eb0:	str	x2, [x19, #320]
    4eb4:	b	4e70 <d_print_mod+0x460>
    4eb8:	adrp	x22, 0 <d_make_comp>
    4ebc:	add	x22, x22, #0x0
    4ec0:	mov	x0, x22
    4ec4:	bl	0 <__asan_internal_strlen>
    4ec8:	cbz	x0, 4c2c <d_print_mod+0x21c>
    4ecc:	adrp	x20, 3a8 <d_number_component+0x58>
    4ed0:	add	x22, x0, x22
    4ed4:	add	x20, x20, #0x0
    4ed8:	mov	w21, #0x20                  	// #32
    4edc:	ldr	x1, [x19, #256]
    4ee0:	b	4f04 <d_print_mod+0x4f4>
    4ee4:	mov	x0, x1
    4ee8:	add	x1, x1, #0x1
    4eec:	str	x1, [x19, #256]
    4ef0:	cmp	x22, x20
    4ef4:	strb	w21, [x19, x0]
    4ef8:	strb	w21, [x19, #264]
    4efc:	b.eq	4c2c <d_print_mod+0x21c>  // b.none
    4f00:	ldrb	w21, [x20], #1
    4f04:	cmp	x1, #0xff
    4f08:	b.ne	4ee4 <d_print_mod+0x4d4>  // b.any
    4f0c:	ldp	x3, x2, [x19, #272]
    4f10:	strb	wzr, [x19, #255]
    4f14:	mov	x0, x19
    4f18:	blr	x3
    4f1c:	ldr	x2, [x19, #320]
    4f20:	mov	x1, #0x1                   	// #1
    4f24:	mov	x0, #0x0                   	// #0
    4f28:	add	x2, x2, x1
    4f2c:	str	x2, [x19, #320]
    4f30:	b	4eec <d_print_mod+0x4dc>
    4f34:	stp	x23, x24, [sp, #48]
    4f38:	adrp	x24, 0 <d_make_comp>
    4f3c:	add	x24, x24, #0x0
    4f40:	mov	x0, x24
    4f44:	bl	0 <__asan_internal_strlen>
    4f48:	cbz	x0, 5164 <d_print_mod+0x754>
    4f4c:	adrp	x22, 3c0 <d_compact_number+0x8>
    4f50:	add	x24, x0, x24
    4f54:	add	x22, x22, #0x0
    4f58:	mov	w23, #0x20                  	// #32
    4f5c:	ldr	x1, [x19, #256]
    4f60:	b	4f84 <d_print_mod+0x574>
    4f64:	mov	x0, x1
    4f68:	add	x1, x1, #0x1
    4f6c:	str	x1, [x19, #256]
    4f70:	cmp	x22, x24
    4f74:	strb	w23, [x19, x0]
    4f78:	strb	w23, [x19, #264]
    4f7c:	b.eq	5164 <d_print_mod+0x754>  // b.none
    4f80:	ldrb	w23, [x22], #1
    4f84:	cmp	x1, #0xff
    4f88:	b.ne	4f64 <d_print_mod+0x554>  // b.any
    4f8c:	ldp	x3, x2, [x19, #272]
    4f90:	strb	wzr, [x19, #255]
    4f94:	mov	x0, x19
    4f98:	blr	x3
    4f9c:	ldr	x2, [x19, #320]
    4fa0:	mov	x1, #0x1                   	// #1
    4fa4:	mov	x0, #0x0                   	// #0
    4fa8:	add	x2, x2, x1
    4fac:	str	x2, [x19, #320]
    4fb0:	b	4f6c <d_print_mod+0x55c>
    4fb4:	adrp	x22, 0 <d_make_comp>
    4fb8:	add	x22, x22, #0x0
    4fbc:	mov	x0, x22
    4fc0:	bl	0 <__asan_internal_strlen>
    4fc4:	cbz	x0, 4c2c <d_print_mod+0x21c>
    4fc8:	adrp	x20, 3e0 <d_compact_number+0x28>
    4fcc:	add	x22, x0, x22
    4fd0:	add	x20, x20, #0x0
    4fd4:	mov	w21, #0x63                  	// #99
    4fd8:	ldr	x1, [x19, #256]
    4fdc:	b	5000 <d_print_mod+0x5f0>
    4fe0:	mov	x0, x1
    4fe4:	add	x1, x1, #0x1
    4fe8:	str	x1, [x19, #256]
    4fec:	cmp	x22, x20
    4ff0:	strb	w21, [x19, x0]
    4ff4:	strb	w21, [x19, #264]
    4ff8:	b.eq	4c2c <d_print_mod+0x21c>  // b.none
    4ffc:	ldrb	w21, [x20], #1
    5000:	cmp	x1, #0xff
    5004:	b.ne	4fe0 <d_print_mod+0x5d0>  // b.any
    5008:	ldp	x3, x2, [x19, #272]
    500c:	strb	wzr, [x19, #255]
    5010:	mov	x0, x19
    5014:	blr	x3
    5018:	ldr	x2, [x19, #320]
    501c:	mov	x1, #0x1                   	// #1
    5020:	mov	x0, #0x0                   	// #0
    5024:	add	x2, x2, x1
    5028:	str	x2, [x19, #320]
    502c:	b	4fe8 <d_print_mod+0x5d8>
    5030:	ldr	x2, [x2, #8]
    5034:	b	4a40 <d_print_mod+0x30>
    5038:	stp	x23, x24, [sp, #48]
    503c:	adrp	x24, 0 <d_make_comp>
    5040:	add	x24, x24, #0x0
    5044:	mov	x0, x24
    5048:	bl	0 <__asan_internal_strlen>
    504c:	cbz	x0, 5164 <d_print_mod+0x754>
    5050:	adrp	x22, 3d0 <d_compact_number+0x18>
    5054:	add	x24, x0, x24
    5058:	add	x22, x22, #0x0
    505c:	mov	w23, #0x20                  	// #32
    5060:	ldr	x1, [x19, #256]
    5064:	b	5088 <d_print_mod+0x678>
    5068:	mov	x0, x1
    506c:	add	x1, x1, #0x1
    5070:	str	x1, [x19, #256]
    5074:	cmp	x24, x22
    5078:	strb	w23, [x19, x0]
    507c:	strb	w23, [x19, #264]
    5080:	b.eq	5164 <d_print_mod+0x754>  // b.none
    5084:	ldrb	w23, [x22], #1
    5088:	cmp	x1, #0xff
    508c:	b.ne	5068 <d_print_mod+0x658>  // b.any
    5090:	ldp	x3, x2, [x19, #272]
    5094:	strb	wzr, [x19, #255]
    5098:	mov	x0, x19
    509c:	blr	x3
    50a0:	ldr	x2, [x19, #320]
    50a4:	mov	x1, #0x1                   	// #1
    50a8:	mov	x0, #0x0                   	// #0
    50ac:	add	x2, x2, x1
    50b0:	str	x2, [x19, #320]
    50b4:	b	5070 <d_print_mod+0x660>
    50b8:	adrp	x22, 0 <d_make_comp>
    50bc:	add	x22, x22, #0x0
    50c0:	mov	x0, x22
    50c4:	bl	0 <__asan_internal_strlen>
    50c8:	cbz	x0, 4c2c <d_print_mod+0x21c>
    50cc:	adrp	x20, 3f0 <d_compact_number+0x38>
    50d0:	add	x22, x0, x22
    50d4:	add	x20, x20, #0x0
    50d8:	mov	w21, #0x69                  	// #105
    50dc:	ldr	x1, [x19, #256]
    50e0:	b	5104 <d_print_mod+0x6f4>
    50e4:	mov	x0, x1
    50e8:	add	x1, x1, #0x1
    50ec:	str	x1, [x19, #256]
    50f0:	cmp	x22, x20
    50f4:	strb	w21, [x19, x0]
    50f8:	strb	w21, [x19, #264]
    50fc:	b.eq	4c2c <d_print_mod+0x21c>  // b.none
    5100:	ldrb	w21, [x20], #1
    5104:	cmp	x1, #0xff
    5108:	b.ne	50e4 <d_print_mod+0x6d4>  // b.any
    510c:	ldp	x3, x2, [x19, #272]
    5110:	strb	wzr, [x19, #255]
    5114:	mov	x0, x19
    5118:	blr	x3
    511c:	ldr	x2, [x19, #320]
    5120:	mov	x1, #0x1                   	// #1
    5124:	mov	x0, #0x0                   	// #0
    5128:	add	x2, x2, x1
    512c:	str	x2, [x19, #320]
    5130:	b	50ec <d_print_mod+0x6dc>
    5134:	ldr	x1, [x19, #256]
    5138:	cmp	x1, #0xff
    513c:	b.eq	5220 <d_print_mod+0x810>  // b.none
    5140:	add	x0, x1, #0x1
    5144:	str	x0, [x19, #256]
    5148:	mov	w0, #0x26                  	// #38
    514c:	strb	w0, [x19, x1]
    5150:	strb	w0, [x19, #264]
    5154:	ldp	x19, x20, [sp, #16]
    5158:	ldp	x21, x22, [sp, #32]
    515c:	ldp	x29, x30, [sp], #64
    5160:	ret
    5164:	ldr	x2, [x20, #16]
    5168:	cbz	x2, 52a0 <d_print_mod+0x890>
    516c:	ldr	x1, [x19, #256]
    5170:	add	x0, x1, #0x1
    5174:	cmp	x1, #0xff
    5178:	b.ne	51a4 <d_print_mod+0x794>  // b.any
    517c:	ldp	x3, x2, [x19, #272]
    5180:	strb	wzr, [x19, #255]
    5184:	mov	x0, x19
    5188:	blr	x3
    518c:	ldr	x3, [x19, #320]
    5190:	mov	x0, #0x1                   	// #1
    5194:	mov	x1, #0x0                   	// #0
    5198:	add	x3, x3, x0
    519c:	ldr	x2, [x20, #16]
    51a0:	str	x3, [x19, #320]
    51a4:	str	x0, [x19, #256]
    51a8:	mov	w0, #0x28                  	// #40
    51ac:	strb	w0, [x19, x1]
    51b0:	strb	w0, [x19, #264]
    51b4:	mov	w1, w21
    51b8:	mov	x0, x19
    51bc:	bl	4978 <d_print_comp>
    51c0:	ldr	x1, [x19, #256]
    51c4:	add	x0, x1, #0x1
    51c8:	cmp	x1, #0xff
    51cc:	b.ne	51f4 <d_print_mod+0x7e4>  // b.any
    51d0:	ldp	x3, x2, [x19, #272]
    51d4:	strb	wzr, [x19, #255]
    51d8:	mov	x0, x19
    51dc:	blr	x3
    51e0:	ldr	x2, [x19, #320]
    51e4:	mov	x0, #0x1                   	// #1
    51e8:	mov	x1, #0x0                   	// #0
    51ec:	add	x2, x2, x0
    51f0:	str	x2, [x19, #320]
    51f4:	str	x0, [x19, #256]
    51f8:	mov	w0, #0x29                  	// #41
    51fc:	strb	w0, [x19, x1]
    5200:	strb	w0, [x19, #264]
    5204:	ldp	x19, x20, [sp, #16]
    5208:	ldp	x21, x22, [sp, #32]
    520c:	ldp	x23, x24, [sp, #48]
    5210:	ldp	x29, x30, [sp], #64
    5214:	ret
    5218:	ldr	x2, [x20, #8]
    521c:	b	51b4 <d_print_mod+0x7a4>
    5220:	ldp	x3, x2, [x19, #272]
    5224:	strb	wzr, [x19, #255]
    5228:	mov	x0, x19
    522c:	blr	x3
    5230:	ldr	x2, [x19, #320]
    5234:	mov	x0, #0x1                   	// #1
    5238:	mov	x1, #0x0                   	// #0
    523c:	add	x2, x2, x0
    5240:	str	x2, [x19, #320]
    5244:	b	5144 <d_print_mod+0x734>
    5248:	ldp	x3, x2, [x19, #272]
    524c:	strb	wzr, [x19, #255]
    5250:	mov	x0, x19
    5254:	blr	x3
    5258:	ldr	x2, [x19, #320]
    525c:	mov	x0, #0x1                   	// #1
    5260:	mov	x1, #0x0                   	// #0
    5264:	add	x2, x2, x0
    5268:	str	x2, [x19, #320]
    526c:	b	4d30 <d_print_mod+0x320>
    5270:	ldp	x3, x2, [x19, #272]
    5274:	strb	wzr, [x19, #255]
    5278:	mov	x1, x0
    527c:	mov	x0, x19
    5280:	blr	x3
    5284:	ldr	x0, [x19, #320]
    5288:	mov	w2, #0x20                  	// #32
    528c:	mov	x1, #0x1                   	// #1
    5290:	strb	w2, [x19]
    5294:	add	x0, x0, x1
    5298:	str	x0, [x19, #320]
    529c:	b	5140 <d_print_mod+0x730>
    52a0:	ldp	x23, x24, [sp, #48]
    52a4:	b	4c2c <d_print_mod+0x21c>

00000000000052a8 <d_print_function_type.isra.0>:
    52a8:	stp	x29, x30, [sp, #-64]!
    52ac:	mov	x29, sp
    52b0:	stp	x19, x20, [sp, #16]
    52b4:	mov	x19, x0
    52b8:	mov	x20, x3
    52bc:	stp	x21, x22, [sp, #32]
    52c0:	mov	x21, x2
    52c4:	stp	x23, x24, [sp, #48]
    52c8:	mov	w23, w1
    52cc:	cbz	x3, 5310 <d_print_function_type.isra.0+0x68>
    52d0:	mov	x2, #0xe000000             	// #234881024
    52d4:	mov	x4, #0x1                   	// #1
    52d8:	movk	x2, #0x862, lsl #32
    52dc:	ldr	w0, [x3, #16]
    52e0:	cbnz	w0, 5310 <d_print_function_type.isra.0+0x68>
    52e4:	ldr	x0, [x3, #8]
    52e8:	ldr	w0, [x0]
    52ec:	cmp	w0, #0x2b
    52f0:	b.hi	5308 <d_print_function_type.isra.0+0x60>  // b.pmore
    52f4:	lsl	x0, x4, x0
    52f8:	tst	x0, x2
    52fc:	b.ne	53d8 <d_print_function_type.isra.0+0x130>  // b.any
    5300:	tst	x0, #0x1c00000000
    5304:	b.ne	54a4 <d_print_function_type.isra.0+0x1fc>  // b.any
    5308:	ldr	x3, [x3]
    530c:	cbnz	x3, 52dc <d_print_function_type.isra.0+0x34>
    5310:	ldr	x22, [x19, #296]
    5314:	str	xzr, [x19, #296]
    5318:	mov	w1, w23
    531c:	mov	x2, x20
    5320:	mov	x0, x19
    5324:	mov	w3, #0x0                   	// #0
    5328:	bl	5558 <d_print_mod_list>
    532c:	ldr	x1, [x19, #256]
    5330:	cmp	x1, #0xff
    5334:	b.eq	5468 <d_print_function_type.isra.0+0x1c0>  // b.none
    5338:	add	x0, x1, #0x1
    533c:	str	x0, [x19, #256]
    5340:	mov	w2, #0x28                  	// #40
    5344:	strb	w2, [x19, x1]
    5348:	strb	w2, [x19, #264]
    534c:	ldr	x2, [x21]
    5350:	cbz	x2, 5364 <d_print_function_type.isra.0+0xbc>
    5354:	mov	x0, x19
    5358:	mov	w1, w23
    535c:	bl	4978 <d_print_comp>
    5360:	ldr	x0, [x19, #256]
    5364:	cmp	x0, #0xff
    5368:	b.eq	53ac <d_print_function_type.isra.0+0x104>  // b.none
    536c:	add	x1, x0, #0x1
    5370:	str	x1, [x19, #256]
    5374:	mov	w3, #0x29                  	// #41
    5378:	strb	w3, [x19, x0]
    537c:	mov	x2, x20
    5380:	strb	w3, [x19, #264]
    5384:	mov	w1, w23
    5388:	mov	x0, x19
    538c:	mov	w3, #0x1                   	// #1
    5390:	bl	5558 <d_print_mod_list>
    5394:	ldp	x23, x24, [sp, #48]
    5398:	str	x22, [x19, #296]
    539c:	ldp	x19, x20, [sp, #16]
    53a0:	ldp	x21, x22, [sp, #32]
    53a4:	ldp	x29, x30, [sp], #64
    53a8:	ret
    53ac:	ldp	x3, x2, [x19, #272]
    53b0:	strb	wzr, [x19, #255]
    53b4:	mov	x1, x0
    53b8:	mov	x0, x19
    53bc:	blr	x3
    53c0:	ldr	x2, [x19, #320]
    53c4:	mov	x1, #0x1                   	// #1
    53c8:	mov	x0, #0x0                   	// #0
    53cc:	add	x2, x2, x1
    53d0:	str	x2, [x19, #320]
    53d4:	b	5370 <d_print_function_type.isra.0+0xc8>
    53d8:	ldrb	w0, [x19, #264]
    53dc:	ldr	x1, [x19, #256]
    53e0:	cmp	w0, #0x20
    53e4:	b.eq	5408 <d_print_function_type.isra.0+0x160>  // b.none
    53e8:	cmp	x1, #0xff
    53ec:	b.eq	54e8 <d_print_function_type.isra.0+0x240>  // b.none
    53f0:	add	x2, x1, #0x1
    53f4:	str	x2, [x19, #256]
    53f8:	mov	w0, #0x20                  	// #32
    53fc:	strb	w0, [x19, x1]
    5400:	mov	x1, x2
    5404:	strb	w0, [x19, #264]
    5408:	cmp	x1, #0xff
    540c:	b.eq	54c0 <d_print_function_type.isra.0+0x218>  // b.none
    5410:	add	x0, x1, #0x1
    5414:	str	x0, [x19, #256]
    5418:	mov	w24, #0x28                  	// #40
    541c:	strb	w24, [x19, x1]
    5420:	mov	x0, x19
    5424:	strb	w24, [x19, #264]
    5428:	mov	x2, x20
    542c:	ldr	x22, [x19, #296]
    5430:	str	xzr, [x19, #296]
    5434:	mov	w1, w23
    5438:	mov	w3, #0x0                   	// #0
    543c:	bl	5558 <d_print_mod_list>
    5440:	ldr	x0, [x19, #256]
    5444:	cmp	x0, #0xff
    5448:	b.eq	5514 <d_print_function_type.isra.0+0x26c>  // b.none
    544c:	add	x1, x0, #0x1
    5450:	str	x1, [x19, #256]
    5454:	mov	w2, #0x29                  	// #41
    5458:	strb	w2, [x19, x0]
    545c:	strb	w2, [x19, #264]
    5460:	cmp	x1, #0xff
    5464:	b.ne	5338 <d_print_function_type.isra.0+0x90>  // b.any
    5468:	ldp	x3, x2, [x19, #272]
    546c:	strb	wzr, [x19, #255]
    5470:	mov	x0, x19
    5474:	blr	x3
    5478:	mov	w1, #0x28                  	// #40
    547c:	strb	w1, [x19]
    5480:	strb	w1, [x19, #264]
    5484:	mov	x0, #0x1                   	// #1
    5488:	ldr	x1, [x19, #320]
    548c:	ldr	x2, [x21]
    5490:	add	x1, x1, x0
    5494:	str	x0, [x19, #256]
    5498:	str	x1, [x19, #320]
    549c:	cbnz	x2, 5354 <d_print_function_type.isra.0+0xac>
    54a0:	b	536c <d_print_function_type.isra.0+0xc4>
    54a4:	ldrb	w0, [x19, #264]
    54a8:	ldr	x1, [x19, #256]
    54ac:	and	w2, w0, #0xfffffffd
    54b0:	cmp	w2, #0x28
    54b4:	b.ne	53e0 <d_print_function_type.isra.0+0x138>  // b.any
    54b8:	cmp	x1, #0xff
    54bc:	b.ne	5410 <d_print_function_type.isra.0+0x168>  // b.any
    54c0:	ldp	x3, x2, [x19, #272]
    54c4:	strb	wzr, [x19, #255]
    54c8:	mov	x0, x19
    54cc:	blr	x3
    54d0:	ldr	x2, [x19, #320]
    54d4:	mov	x0, #0x1                   	// #1
    54d8:	mov	x1, #0x0                   	// #0
    54dc:	add	x2, x2, x0
    54e0:	str	x2, [x19, #320]
    54e4:	b	5414 <d_print_function_type.isra.0+0x16c>
    54e8:	ldp	x3, x2, [x19, #272]
    54ec:	strb	wzr, [x19, #255]
    54f0:	mov	x0, x19
    54f4:	blr	x3
    54f8:	ldr	x0, [x19, #320]
    54fc:	mov	w2, #0x20                  	// #32
    5500:	mov	x1, #0x1                   	// #1
    5504:	strb	w2, [x19]
    5508:	add	x0, x0, x1
    550c:	str	x0, [x19, #320]
    5510:	b	5410 <d_print_function_type.isra.0+0x168>
    5514:	ldp	x3, x2, [x19, #272]
    5518:	strb	wzr, [x19, #255]
    551c:	mov	x1, x0
    5520:	mov	x0, x19
    5524:	blr	x3
    5528:	strb	w24, [x19, #264]
    552c:	mov	w0, #0x2829                	// #10281
    5530:	strh	w0, [x19]
    5534:	ldr	x1, [x19, #320]
    5538:	mov	x0, #0x2                   	// #2
    553c:	ldr	x2, [x21]
    5540:	add	x1, x1, #0x1
    5544:	str	x0, [x19, #256]
    5548:	str	x1, [x19, #320]
    554c:	cbnz	x2, 5354 <d_print_function_type.isra.0+0xac>
    5550:	b	536c <d_print_function_type.isra.0+0xc4>
    5554:	nop

0000000000005558 <d_print_mod_list>:
    5558:	cbz	x2, 57d4 <d_print_mod_list+0x27c>
    555c:	stp	x29, x30, [sp, #-112]!
    5560:	mov	x29, sp
    5564:	stp	x23, x24, [sp, #48]
    5568:	mov	x24, #0x1f                  	// #31
    556c:	movk	x24, #0x1a, lsl #48
    5570:	stp	x19, x20, [sp, #16]
    5574:	mov	w20, w1
    5578:	mov	x19, x2
    557c:	stp	x21, x22, [sp, #32]
    5580:	mov	w21, w3
    5584:	mov	w22, #0x1                   	// #1
    5588:	stp	x25, x26, [sp, #64]
    558c:	mov	x26, x0
    5590:	mov	x25, #0x1                   	// #1
    5594:	b	55d8 <d_print_mod_list+0x80>
    5598:	ldr	x1, [x19, #24]
    559c:	cmp	w5, #0x29
    55a0:	ldr	x23, [x26, #288]
    55a4:	str	w22, [x19, #16]
    55a8:	str	x1, [x26, #288]
    55ac:	b.eq	5624 <d_print_mod_list+0xcc>  // b.none
    55b0:	cmp	w5, #0x2a
    55b4:	b.eq	5654 <d_print_mod_list+0xfc>  // b.none
    55b8:	cmp	w5, #0x2
    55bc:	b.eq	5684 <d_print_mod_list+0x12c>  // b.none
    55c0:	mov	w1, w20
    55c4:	mov	x0, x26
    55c8:	bl	4a10 <d_print_mod>
    55cc:	str	x23, [x26, #288]
    55d0:	ldr	x19, [x19]
    55d4:	cbz	x19, 563c <d_print_mod_list+0xe4>
    55d8:	ldr	w2, [x26, #304]
    55dc:	cbnz	w2, 563c <d_print_mod_list+0xe4>
    55e0:	ldr	w2, [x19, #16]
    55e4:	cbnz	w2, 55d0 <d_print_mod_list+0x78>
    55e8:	ldr	x2, [x19, #8]
    55ec:	ldr	w5, [x2]
    55f0:	cbnz	w21, 5598 <d_print_mod_list+0x40>
    55f4:	sub	w4, w5, #0x1c
    55f8:	cmp	w4, #0x34
    55fc:	b.hi	5598 <d_print_mod_list+0x40>  // b.pmore
    5600:	lsl	x4, x25, x4
    5604:	tst	x4, x24
    5608:	b.ne	55d0 <d_print_mod_list+0x78>  // b.any
    560c:	ldr	x1, [x19, #24]
    5610:	cmp	w5, #0x29
    5614:	ldr	x23, [x26, #288]
    5618:	str	w22, [x19, #16]
    561c:	str	x1, [x26, #288]
    5620:	b.ne	55b0 <d_print_mod_list+0x58>  // b.any
    5624:	ldr	x3, [x19]
    5628:	add	x2, x2, #0x10
    562c:	mov	w1, w20
    5630:	mov	x0, x26
    5634:	bl	52a8 <d_print_function_type.isra.0>
    5638:	str	x23, [x26, #288]
    563c:	ldp	x19, x20, [sp, #16]
    5640:	ldp	x21, x22, [sp, #32]
    5644:	ldp	x23, x24, [sp, #48]
    5648:	ldp	x25, x26, [sp, #64]
    564c:	ldp	x29, x30, [sp], #112
    5650:	ret
    5654:	ldr	x3, [x19]
    5658:	mov	w1, w20
    565c:	mov	x0, x26
    5660:	add	x2, x2, #0x8
    5664:	bl	5968 <d_print_array_type.isra.0>
    5668:	str	x23, [x26, #288]
    566c:	ldp	x19, x20, [sp, #16]
    5670:	ldp	x21, x22, [sp, #32]
    5674:	ldp	x23, x24, [sp, #48]
    5678:	ldp	x25, x26, [sp, #64]
    567c:	ldp	x29, x30, [sp], #112
    5680:	ret
    5684:	ldr	x2, [x2, #8]
    5688:	mov	w1, w20
    568c:	ldr	x21, [x26, #296]
    5690:	str	xzr, [x26, #296]
    5694:	mov	x0, x26
    5698:	bl	4978 <d_print_comp>
    569c:	str	x21, [x26, #296]
    56a0:	tbz	w20, #2, 5758 <d_print_mod_list+0x200>
    56a4:	ldr	x1, [x26, #256]
    56a8:	add	x0, x1, #0x1
    56ac:	cmp	x1, #0xff
    56b0:	b.ne	56d8 <d_print_mod_list+0x180>  // b.any
    56b4:	ldp	x3, x2, [x26, #272]
    56b8:	strb	wzr, [x26, #255]
    56bc:	mov	x0, x26
    56c0:	blr	x3
    56c4:	ldr	x2, [x26, #320]
    56c8:	mov	x0, #0x1                   	// #1
    56cc:	mov	x1, #0x0                   	// #0
    56d0:	add	x2, x2, x0
    56d4:	str	x2, [x26, #320]
    56d8:	str	x0, [x26, #256]
    56dc:	mov	w0, #0x2e                  	// #46
    56e0:	strb	w0, [x26, x1]
    56e4:	strb	w0, [x26, #264]
    56e8:	ldr	x0, [x19, #8]
    56ec:	ldr	x21, [x0, #16]
    56f0:	ldr	w2, [x21]
    56f4:	cmp	w2, #0x47
    56f8:	b.eq	57d8 <d_print_mod_list+0x280>  // b.none
    56fc:	mov	x1, #0x1f                  	// #31
    5700:	mov	x3, #0x1                   	// #1
    5704:	movk	x1, #0x1a, lsl #48
    5708:	sub	w2, w2, #0x1c
    570c:	cmp	w2, #0x34
    5710:	b.hi	5720 <d_print_mod_list+0x1c8>  // b.pmore
    5714:	lsl	x2, x3, x2
    5718:	tst	x2, x1
    571c:	b.ne	574c <d_print_mod_list+0x1f4>  // b.any
    5720:	mov	x2, x21
    5724:	mov	w1, w20
    5728:	mov	x0, x26
    572c:	bl	4978 <d_print_comp>
    5730:	str	x23, [x26, #288]
    5734:	ldp	x19, x20, [sp, #16]
    5738:	ldp	x21, x22, [sp, #32]
    573c:	ldp	x23, x24, [sp, #48]
    5740:	ldp	x25, x26, [sp, #64]
    5744:	ldp	x29, x30, [sp], #112
    5748:	ret
    574c:	ldr	x21, [x21, #8]
    5750:	ldr	w2, [x21]
    5754:	b	5708 <d_print_mod_list+0x1b0>
    5758:	adrp	x21, 0 <d_make_comp>
    575c:	add	x21, x21, #0x0
    5760:	mov	x0, x21
    5764:	bl	0 <__asan_internal_strlen>
    5768:	cbz	x0, 56e8 <d_print_mod_list+0x190>
    576c:	add	x24, x0, x21
    5770:	mov	w22, #0x3a                  	// #58
    5774:	adrp	x21, 10 <d_make_comp+0x10>
    5778:	add	x21, x21, #0x0
    577c:	ldr	x1, [x26, #256]
    5780:	b	57a4 <d_print_mod_list+0x24c>
    5784:	mov	x0, x1
    5788:	add	x1, x1, #0x1
    578c:	str	x1, [x26, #256]
    5790:	cmp	x21, x24
    5794:	strb	w22, [x26, x0]
    5798:	strb	w22, [x26, #264]
    579c:	b.eq	56e8 <d_print_mod_list+0x190>  // b.none
    57a0:	ldrb	w22, [x21], #1
    57a4:	cmp	x1, #0xff
    57a8:	b.ne	5784 <d_print_mod_list+0x22c>  // b.any
    57ac:	ldp	x3, x2, [x26, #272]
    57b0:	strb	wzr, [x26, #255]
    57b4:	mov	x0, x26
    57b8:	blr	x3
    57bc:	ldr	x2, [x26, #320]
    57c0:	mov	x1, #0x1                   	// #1
    57c4:	mov	x0, #0x0                   	// #0
    57c8:	add	x2, x2, x1
    57cc:	str	x2, [x26, #320]
    57d0:	b	578c <d_print_mod_list+0x234>
    57d4:	ret
    57d8:	adrp	x19, 0 <d_make_comp>
    57dc:	add	x19, x19, #0x0
    57e0:	mov	x0, x19
    57e4:	bl	0 <__asan_internal_strlen>
    57e8:	cbz	x0, 5854 <d_print_mod_list+0x2fc>
    57ec:	add	x24, x0, x19
    57f0:	mov	w22, #0x7b                  	// #123
    57f4:	adrp	x19, 18 <d_make_comp+0x18>
    57f8:	add	x19, x19, #0x0
    57fc:	ldr	x1, [x26, #256]
    5800:	b	5824 <d_print_mod_list+0x2cc>
    5804:	mov	x0, x1
    5808:	add	x1, x1, #0x1
    580c:	str	x1, [x26, #256]
    5810:	cmp	x24, x19
    5814:	strb	w22, [x26, x0]
    5818:	strb	w22, [x26, #264]
    581c:	b.eq	5854 <d_print_mod_list+0x2fc>  // b.none
    5820:	ldrb	w22, [x19], #1
    5824:	cmp	x1, #0xff
    5828:	b.ne	5804 <d_print_mod_list+0x2ac>  // b.any
    582c:	ldp	x3, x2, [x26, #272]
    5830:	strb	wzr, [x26, #255]
    5834:	mov	x0, x26
    5838:	blr	x3
    583c:	ldr	x2, [x26, #320]
    5840:	mov	x1, #0x1                   	// #1
    5844:	mov	x0, #0x0                   	// #0
    5848:	add	x2, x2, x1
    584c:	str	x2, [x26, #320]
    5850:	b	580c <d_print_mod_list+0x2b4>
    5854:	ldr	w2, [x21, #16]
    5858:	adrp	x1, 0 <d_make_comp>
    585c:	add	x1, x1, #0x0
    5860:	add	x19, sp, #0x50
    5864:	add	w2, w2, #0x1
    5868:	mov	x0, x19
    586c:	bl	0 <sprintf>
    5870:	mov	x0, x19
    5874:	bl	0 <__asan_internal_strlen>
    5878:	cbz	x0, 58dc <d_print_mod_list+0x384>
    587c:	add	x24, x19, x0
    5880:	ldr	x1, [x26, #256]
    5884:	b	58a8 <d_print_mod_list+0x350>
    5888:	mov	x0, x1
    588c:	add	x1, x1, #0x1
    5890:	str	x1, [x26, #256]
    5894:	add	x19, x19, #0x1
    5898:	strb	w22, [x26, x0]
    589c:	cmp	x24, x19
    58a0:	strb	w22, [x26, #264]
    58a4:	b.eq	58dc <d_print_mod_list+0x384>  // b.none
    58a8:	ldrb	w22, [x19]
    58ac:	cmp	x1, #0xff
    58b0:	b.ne	5888 <d_print_mod_list+0x330>  // b.any
    58b4:	ldp	x3, x2, [x26, #272]
    58b8:	strb	wzr, [x26, #255]
    58bc:	mov	x0, x26
    58c0:	blr	x3
    58c4:	ldr	x2, [x26, #320]
    58c8:	mov	x1, #0x1                   	// #1
    58cc:	mov	x0, #0x0                   	// #0
    58d0:	add	x2, x2, x1
    58d4:	str	x2, [x26, #320]
    58d8:	b	5890 <d_print_mod_list+0x338>
    58dc:	adrp	x19, 0 <d_make_comp>
    58e0:	add	x19, x19, #0x0
    58e4:	mov	x0, x19
    58e8:	bl	0 <__asan_internal_strlen>
    58ec:	cbz	x0, 5958 <d_print_mod_list+0x400>
    58f0:	add	x24, x0, x19
    58f4:	mov	w22, #0x7d                  	// #125
    58f8:	adrp	x19, 28 <d_make_comp+0x28>
    58fc:	add	x19, x19, #0x0
    5900:	ldr	x1, [x26, #256]
    5904:	b	5928 <d_print_mod_list+0x3d0>
    5908:	mov	x0, x1
    590c:	add	x1, x1, #0x1
    5910:	str	x1, [x26, #256]
    5914:	cmp	x24, x19
    5918:	strb	w22, [x26, x0]
    591c:	strb	w22, [x26, #264]
    5920:	b.eq	5958 <d_print_mod_list+0x400>  // b.none
    5924:	ldrb	w22, [x19], #1
    5928:	cmp	x1, #0xff
    592c:	b.ne	5908 <d_print_mod_list+0x3b0>  // b.any
    5930:	ldp	x3, x2, [x26, #272]
    5934:	strb	wzr, [x26, #255]
    5938:	mov	x0, x26
    593c:	blr	x3
    5940:	ldr	x2, [x26, #320]
    5944:	mov	x1, #0x1                   	// #1
    5948:	mov	x0, #0x0                   	// #0
    594c:	add	x2, x2, x1
    5950:	str	x2, [x26, #320]
    5954:	b	5910 <d_print_mod_list+0x3b8>
    5958:	ldr	x21, [x21, #8]
    595c:	ldr	w2, [x21]
    5960:	b	56fc <d_print_mod_list+0x1a4>
    5964:	nop

0000000000005968 <d_print_array_type.isra.0>:
    5968:	stp	x29, x30, [sp, #-80]!
    596c:	mov	x29, sp
    5970:	stp	x19, x20, [sp, #16]
    5974:	mov	x19, x0
    5978:	mov	x20, x3
    597c:	stp	x21, x22, [sp, #32]
    5980:	mov	x0, x3
    5984:	mov	w21, w1
    5988:	mov	x22, x2
    598c:	cbz	x3, 59b4 <d_print_array_type.isra.0+0x4c>
    5990:	ldr	w4, [x0, #16]
    5994:	cbz	w4, 5ab8 <d_print_array_type.isra.0+0x150>
    5998:	ldr	x0, [x0]
    599c:	cbnz	x0, 5990 <d_print_array_type.isra.0+0x28>
    59a0:	mov	x2, x20
    59a4:	mov	w1, w21
    59a8:	mov	x0, x19
    59ac:	mov	w3, #0x0                   	// #0
    59b0:	bl	5558 <d_print_mod_list>
    59b4:	ldr	x0, [x19, #256]
    59b8:	cmp	x0, #0xff
    59bc:	b.eq	5ae4 <d_print_array_type.isra.0+0x17c>  // b.none
    59c0:	add	x1, x0, #0x1
    59c4:	str	x1, [x19, #256]
    59c8:	mov	w2, #0x20                  	// #32
    59cc:	strb	w2, [x19, x0]
    59d0:	strb	w2, [x19, #264]
    59d4:	cmp	x1, #0xff
    59d8:	b.eq	5a7c <d_print_array_type.isra.0+0x114>  // b.none
    59dc:	add	x0, x1, #0x1
    59e0:	str	x0, [x19, #256]
    59e4:	mov	w2, #0x5b                  	// #91
    59e8:	strb	w2, [x19, x1]
    59ec:	strb	w2, [x19, #264]
    59f0:	ldr	x2, [x22]
    59f4:	cbz	x2, 5a08 <d_print_array_type.isra.0+0xa0>
    59f8:	mov	x0, x19
    59fc:	mov	w1, w21
    5a00:	bl	4978 <d_print_comp>
    5a04:	ldr	x0, [x19, #256]
    5a08:	cmp	x0, #0xff
    5a0c:	b.eq	5a34 <d_print_array_type.isra.0+0xcc>  // b.none
    5a10:	add	x1, x0, #0x1
    5a14:	str	x1, [x19, #256]
    5a18:	mov	w1, #0x5d                  	// #93
    5a1c:	strb	w1, [x19, x0]
    5a20:	strb	w1, [x19, #264]
    5a24:	ldp	x19, x20, [sp, #16]
    5a28:	ldp	x21, x22, [sp, #32]
    5a2c:	ldp	x29, x30, [sp], #80
    5a30:	ret
    5a34:	ldp	x3, x2, [x19, #272]
    5a38:	strb	wzr, [x19, #255]
    5a3c:	mov	x1, x0
    5a40:	mov	x0, x19
    5a44:	blr	x3
    5a48:	ldr	x2, [x19, #320]
    5a4c:	mov	x0, #0x0                   	// #0
    5a50:	mov	x1, #0x1                   	// #1
    5a54:	str	x1, [x19, #256]
    5a58:	add	x2, x2, x1
    5a5c:	str	x2, [x19, #320]
    5a60:	mov	w1, #0x5d                  	// #93
    5a64:	strb	w1, [x19, x0]
    5a68:	strb	w1, [x19, #264]
    5a6c:	ldp	x19, x20, [sp, #16]
    5a70:	ldp	x21, x22, [sp, #32]
    5a74:	ldp	x29, x30, [sp], #80
    5a78:	ret
    5a7c:	ldp	x3, x2, [x19, #272]
    5a80:	strb	wzr, [x19, #255]
    5a84:	mov	x0, x19
    5a88:	blr	x3
    5a8c:	mov	w1, #0x5b                  	// #91
    5a90:	strb	w1, [x19]
    5a94:	strb	w1, [x19, #264]
    5a98:	mov	x0, #0x1                   	// #1
    5a9c:	ldr	x1, [x19, #320]
    5aa0:	ldr	x2, [x22]
    5aa4:	add	x1, x1, x0
    5aa8:	str	x0, [x19, #256]
    5aac:	str	x1, [x19, #320]
    5ab0:	cbnz	x2, 59f8 <d_print_array_type.isra.0+0x90>
    5ab4:	b	5a10 <d_print_array_type.isra.0+0xa8>
    5ab8:	ldr	x0, [x0, #8]
    5abc:	ldr	w0, [x0]
    5ac0:	cmp	w0, #0x2a
    5ac4:	b.ne	5b28 <d_print_array_type.isra.0+0x1c0>  // b.any
    5ac8:	mov	w1, w21
    5acc:	mov	x2, x20
    5ad0:	mov	x0, x19
    5ad4:	mov	w3, #0x0                   	// #0
    5ad8:	bl	5558 <d_print_mod_list>
    5adc:	ldr	x1, [x19, #256]
    5ae0:	b	59d4 <d_print_array_type.isra.0+0x6c>
    5ae4:	ldp	x3, x2, [x19, #272]
    5ae8:	strb	wzr, [x19, #255]
    5aec:	mov	x1, x0
    5af0:	mov	x0, x19
    5af4:	blr	x3
    5af8:	mov	w1, #0x5b20                	// #23328
    5afc:	mov	w0, #0x5b                  	// #91
    5b00:	strh	w1, [x19]
    5b04:	strb	w0, [x19, #264]
    5b08:	mov	x0, #0x2                   	// #2
    5b0c:	ldr	x1, [x19, #320]
    5b10:	ldr	x2, [x22]
    5b14:	add	x1, x1, #0x1
    5b18:	str	x0, [x19, #256]
    5b1c:	str	x1, [x19, #320]
    5b20:	cbnz	x2, 59f8 <d_print_array_type.isra.0+0x90>
    5b24:	b	5a10 <d_print_array_type.isra.0+0xa8>
    5b28:	str	x25, [sp, #64]
    5b2c:	adrp	x25, 0 <d_make_comp>
    5b30:	add	x25, x25, #0x0
    5b34:	mov	x0, x25
    5b38:	bl	0 <__asan_internal_strlen>
    5b3c:	cbz	x0, 5bc0 <d_print_array_type.isra.0+0x258>
    5b40:	add	x25, x0, x25
    5b44:	stp	x23, x24, [sp, #48]
    5b48:	adrp	x23, 418 <d_compact_number+0x60>
    5b4c:	mov	w24, #0x20                  	// #32
    5b50:	add	x23, x23, #0x0
    5b54:	ldr	x1, [x19, #256]
    5b58:	b	5b7c <d_print_array_type.isra.0+0x214>
    5b5c:	mov	x0, x1
    5b60:	add	x1, x1, #0x1
    5b64:	str	x1, [x19, #256]
    5b68:	cmp	x25, x23
    5b6c:	strb	w24, [x19, x0]
    5b70:	strb	w24, [x19, #264]
    5b74:	b.eq	5bbc <d_print_array_type.isra.0+0x254>  // b.none
    5b78:	ldrb	w24, [x23], #1
    5b7c:	cmp	x1, #0xff
    5b80:	b.ne	5b5c <d_print_array_type.isra.0+0x1f4>  // b.any
    5b84:	ldp	x3, x2, [x19, #272]
    5b88:	strb	wzr, [x19, #255]
    5b8c:	mov	x0, x19
    5b90:	blr	x3
    5b94:	ldr	x2, [x19, #320]
    5b98:	mov	x0, #0x0                   	// #0
    5b9c:	mov	x1, #0x1                   	// #1
    5ba0:	str	x1, [x19, #256]
    5ba4:	add	x2, x2, x1
    5ba8:	str	x2, [x19, #320]
    5bac:	strb	w24, [x19, x0]
    5bb0:	cmp	x25, x23
    5bb4:	strb	w24, [x19, #264]
    5bb8:	b.ne	5b78 <d_print_array_type.isra.0+0x210>  // b.any
    5bbc:	ldp	x23, x24, [sp, #48]
    5bc0:	mov	w1, w21
    5bc4:	mov	x2, x20
    5bc8:	mov	x0, x19
    5bcc:	mov	w3, #0x0                   	// #0
    5bd0:	bl	5558 <d_print_mod_list>
    5bd4:	ldr	x1, [x19, #256]
    5bd8:	cmp	x1, #0xff
    5bdc:	b.eq	5bfc <d_print_array_type.isra.0+0x294>  // b.none
    5be0:	add	x0, x1, #0x1
    5be4:	str	x0, [x19, #256]
    5be8:	mov	w2, #0x29                  	// #41
    5bec:	strb	w2, [x19, x1]
    5bf0:	strb	w2, [x19, #264]
    5bf4:	ldr	x25, [sp, #64]
    5bf8:	b	59b8 <d_print_array_type.isra.0+0x50>
    5bfc:	ldp	x3, x2, [x19, #272]
    5c00:	strb	wzr, [x19, #255]
    5c04:	mov	x0, x19
    5c08:	blr	x3
    5c0c:	ldr	x1, [x19, #320]
    5c10:	mov	w2, #0x29                  	// #41
    5c14:	strb	w2, [x19]
    5c18:	mov	x0, #0x1                   	// #1
    5c1c:	add	x1, x1, x0
    5c20:	ldr	x25, [sp, #64]
    5c24:	str	x1, [x19, #320]
    5c28:	b	59c0 <d_print_array_type.isra.0+0x58>
    5c2c:	nop

0000000000005c30 <d_print_expr_op>:
    5c30:	ldr	w4, [x2]
    5c34:	cmp	w4, #0x32
    5c38:	b.eq	5c40 <d_print_expr_op+0x10>  // b.none
    5c3c:	b	4978 <d_print_comp>
    5c40:	stp	x29, x30, [sp, #-48]!
    5c44:	mov	x29, sp
    5c48:	stp	x19, x20, [sp, #16]
    5c4c:	mov	x19, x0
    5c50:	ldr	x0, [x2, #8]
    5c54:	stp	x21, x22, [sp, #32]
    5c58:	ldrsw	x22, [x0, #16]
    5c5c:	ldr	x20, [x0, #8]
    5c60:	cbz	x22, 5cd8 <d_print_expr_op+0xa8>
    5c64:	add	x22, x20, x22
    5c68:	ldr	x1, [x19, #256]
    5c6c:	b	5c90 <d_print_expr_op+0x60>
    5c70:	mov	x2, x1
    5c74:	add	x1, x1, #0x1
    5c78:	str	x1, [x19, #256]
    5c7c:	add	x20, x20, #0x1
    5c80:	cmp	x20, x22
    5c84:	strb	w21, [x19, x2]
    5c88:	strb	w21, [x19, #264]
    5c8c:	b.eq	5cd8 <d_print_expr_op+0xa8>  // b.none
    5c90:	ldrb	w21, [x20]
    5c94:	cmp	x1, #0xff
    5c98:	b.ne	5c70 <d_print_expr_op+0x40>  // b.any
    5c9c:	ldp	x3, x2, [x19, #272]
    5ca0:	strb	wzr, [x19, #255]
    5ca4:	mov	x0, x19
    5ca8:	add	x20, x20, #0x1
    5cac:	blr	x3
    5cb0:	ldr	x0, [x19, #320]
    5cb4:	mov	x2, #0x0                   	// #0
    5cb8:	mov	x1, #0x1                   	// #1
    5cbc:	str	x1, [x19, #256]
    5cc0:	add	x0, x0, x1
    5cc4:	str	x0, [x19, #320]
    5cc8:	strb	w21, [x19, x2]
    5ccc:	cmp	x20, x22
    5cd0:	strb	w21, [x19, #264]
    5cd4:	b.ne	5c90 <d_print_expr_op+0x60>  // b.any
    5cd8:	ldp	x19, x20, [sp, #16]
    5cdc:	ldp	x21, x22, [sp, #32]
    5ce0:	ldp	x29, x30, [sp], #48
    5ce4:	ret

0000000000005ce8 <d_print_subexpr>:
    5ce8:	stp	x29, x30, [sp, #-48]!
    5cec:	mov	x29, sp
    5cf0:	str	x21, [sp, #32]
    5cf4:	mov	w21, w1
    5cf8:	ldr	w1, [x2]
    5cfc:	stp	x19, x20, [sp, #16]
    5d00:	mov	x20, x2
    5d04:	cmp	w1, #0x31
    5d08:	mov	x19, x0
    5d0c:	ccmp	w1, #0x1, #0x0, ne  // ne = any
    5d10:	b.ls	5da0 <d_print_subexpr+0xb8>  // b.plast
    5d14:	cmp	w1, #0x6
    5d18:	b.eq	5da0 <d_print_subexpr+0xb8>  // b.none
    5d1c:	ldr	x1, [x0, #256]
    5d20:	cmp	x1, #0xff
    5d24:	b.eq	5dbc <d_print_subexpr+0xd4>  // b.none
    5d28:	add	x0, x1, #0x1
    5d2c:	str	x0, [x19, #256]
    5d30:	mov	w0, #0x28                  	// #40
    5d34:	strb	w0, [x19, x1]
    5d38:	mov	x2, x20
    5d3c:	strb	w0, [x19, #264]
    5d40:	mov	w1, w21
    5d44:	mov	x0, x19
    5d48:	bl	4978 <d_print_comp>
    5d4c:	ldr	x1, [x19, #256]
    5d50:	add	x0, x1, #0x1
    5d54:	cmp	x1, #0xff
    5d58:	b.ne	5d80 <d_print_subexpr+0x98>  // b.any
    5d5c:	ldp	x3, x2, [x19, #272]
    5d60:	strb	wzr, [x19, #255]
    5d64:	mov	x0, x19
    5d68:	blr	x3
    5d6c:	ldr	x2, [x19, #320]
    5d70:	mov	x0, #0x1                   	// #1
    5d74:	mov	x1, #0x0                   	// #0
    5d78:	add	x2, x2, x0
    5d7c:	str	x2, [x19, #320]
    5d80:	str	x0, [x19, #256]
    5d84:	mov	w0, #0x29                  	// #41
    5d88:	strb	w0, [x19, x1]
    5d8c:	strb	w0, [x19, #264]
    5d90:	ldp	x19, x20, [sp, #16]
    5d94:	ldr	x21, [sp, #32]
    5d98:	ldp	x29, x30, [sp], #48
    5d9c:	ret
    5da0:	mov	x2, x20
    5da4:	mov	w1, w21
    5da8:	mov	x0, x19
    5dac:	ldp	x19, x20, [sp, #16]
    5db0:	ldr	x21, [sp, #32]
    5db4:	ldp	x29, x30, [sp], #48
    5db8:	b	4978 <d_print_comp>
    5dbc:	ldp	x3, x2, [x0, #272]
    5dc0:	strb	wzr, [x0, #255]
    5dc4:	blr	x3
    5dc8:	ldr	x2, [x19, #320]
    5dcc:	mov	x0, #0x1                   	// #1
    5dd0:	mov	x1, #0x0                   	// #0
    5dd4:	add	x2, x2, x0
    5dd8:	str	x2, [x19, #320]
    5ddc:	b	5d2c <d_print_subexpr+0x44>

0000000000005de0 <d_maybe_print_fold_expression.isra.0>:
    5de0:	stp	x29, x30, [sp, #-80]!
    5de4:	mov	x29, sp
    5de8:	stp	x19, x20, [sp, #16]
    5dec:	mov	x19, x0
    5df0:	mov	w20, w1
    5df4:	ldr	x0, [x2, #8]
    5df8:	ldr	x0, [x0]
    5dfc:	ldrb	w1, [x0]
    5e00:	cmp	w1, #0x66
    5e04:	b.ne	5fa8 <d_maybe_print_fold_expression.isra.0+0x1c8>  // b.any
    5e08:	ldr	x1, [x3]
    5e0c:	stp	x23, x24, [sp, #48]
    5e10:	stp	x25, x26, [sp, #64]
    5e14:	mov	x25, #0x0                   	// #0
    5e18:	ldp	x23, x26, [x1, #8]
    5e1c:	stp	x21, x22, [sp, #32]
    5e20:	ldr	w1, [x26]
    5e24:	cmp	w1, #0x3c
    5e28:	b.eq	607c <d_maybe_print_fold_expression.isra.0+0x29c>  // b.none
    5e2c:	ldr	w22, [x19, #316]
    5e30:	mov	w1, #0xffffffff            	// #-1
    5e34:	str	w1, [x19, #316]
    5e38:	ldrb	w0, [x0, #1]
    5e3c:	cmp	w0, #0x6c
    5e40:	b.eq	609c <d_maybe_print_fold_expression.isra.0+0x2bc>  // b.none
    5e44:	b.hi	5fb8 <d_maybe_print_fold_expression.isra.0+0x1d8>  // b.pmore
    5e48:	cmp	w0, #0x4c
    5e4c:	b.eq	5e58 <d_maybe_print_fold_expression.isra.0+0x78>  // b.none
    5e50:	cmp	w0, #0x52
    5e54:	b.ne	5f88 <d_maybe_print_fold_expression.isra.0+0x1a8>  // b.any
    5e58:	ldr	x1, [x19, #256]
    5e5c:	add	x0, x1, #0x1
    5e60:	cmp	x1, #0xff
    5e64:	b.eq	6168 <d_maybe_print_fold_expression.isra.0+0x388>  // b.none
    5e68:	str	x0, [x19, #256]
    5e6c:	mov	w0, #0x28                  	// #40
    5e70:	strb	w0, [x19, x1]
    5e74:	mov	x2, x26
    5e78:	strb	w0, [x19, #264]
    5e7c:	mov	w1, w20
    5e80:	mov	x0, x19
    5e84:	adrp	x26, 0 <d_make_comp>
    5e88:	bl	5ce8 <d_print_subexpr>
    5e8c:	add	x26, x26, #0x0
    5e90:	mov	x2, x23
    5e94:	mov	w1, w20
    5e98:	mov	x0, x19
    5e9c:	bl	5c30 <d_print_expr_op>
    5ea0:	mov	x0, x26
    5ea4:	bl	0 <__asan_internal_strlen>
    5ea8:	cbz	x0, 5f24 <d_maybe_print_fold_expression.isra.0+0x144>
    5eac:	adrp	x21, 2e0 <d_number.isra.0+0x60>
    5eb0:	add	x26, x0, x26
    5eb4:	add	x21, x21, #0x0
    5eb8:	mov	w24, #0x2e                  	// #46
    5ebc:	ldr	x1, [x19, #256]
    5ec0:	b	5ee4 <d_maybe_print_fold_expression.isra.0+0x104>
    5ec4:	mov	x2, x1
    5ec8:	add	x1, x1, #0x1
    5ecc:	str	x1, [x19, #256]
    5ed0:	cmp	x21, x26
    5ed4:	strb	w24, [x19, x2]
    5ed8:	strb	w24, [x19, #264]
    5edc:	b.eq	5f24 <d_maybe_print_fold_expression.isra.0+0x144>  // b.none
    5ee0:	ldrb	w24, [x21], #1
    5ee4:	cmp	x1, #0xff
    5ee8:	b.ne	5ec4 <d_maybe_print_fold_expression.isra.0+0xe4>  // b.any
    5eec:	ldp	x3, x2, [x19, #272]
    5ef0:	strb	wzr, [x19, #255]
    5ef4:	mov	x0, x19
    5ef8:	blr	x3
    5efc:	ldr	x0, [x19, #320]
    5f00:	mov	x2, #0x0                   	// #0
    5f04:	mov	x1, #0x1                   	// #1
    5f08:	str	x1, [x19, #256]
    5f0c:	add	x0, x0, x1
    5f10:	str	x0, [x19, #320]
    5f14:	strb	w24, [x19, x2]
    5f18:	cmp	x21, x26
    5f1c:	strb	w24, [x19, #264]
    5f20:	b.ne	5ee0 <d_maybe_print_fold_expression.isra.0+0x100>  // b.any
    5f24:	mov	x2, x23
    5f28:	mov	w1, w20
    5f2c:	mov	x0, x19
    5f30:	bl	5c30 <d_print_expr_op>
    5f34:	mov	x2, x25
    5f38:	mov	w1, w20
    5f3c:	mov	x0, x19
    5f40:	bl	5ce8 <d_print_subexpr>
    5f44:	ldr	x1, [x19, #256]
    5f48:	add	x0, x1, #0x1
    5f4c:	cmp	x1, #0xff
    5f50:	b.ne	5f78 <d_maybe_print_fold_expression.isra.0+0x198>  // b.any
    5f54:	ldp	x3, x2, [x19, #272]
    5f58:	strb	wzr, [x19, #255]
    5f5c:	mov	x0, x19
    5f60:	blr	x3
    5f64:	ldr	x2, [x19, #320]
    5f68:	mov	x0, #0x1                   	// #1
    5f6c:	mov	x1, #0x0                   	// #0
    5f70:	add	x2, x2, x0
    5f74:	str	x2, [x19, #320]
    5f78:	str	x0, [x19, #256]
    5f7c:	mov	w0, #0x29                  	// #41
    5f80:	strb	w0, [x19, x1]
    5f84:	strb	w0, [x19, #264]
    5f88:	ldp	x23, x24, [sp, #48]
    5f8c:	mov	w0, #0x1                   	// #1
    5f90:	ldp	x25, x26, [sp, #64]
    5f94:	str	w22, [x19, #316]
    5f98:	ldp	x19, x20, [sp, #16]
    5f9c:	ldp	x21, x22, [sp, #32]
    5fa0:	ldp	x29, x30, [sp], #80
    5fa4:	ret
    5fa8:	mov	w0, #0x0                   	// #0
    5fac:	ldp	x19, x20, [sp, #16]
    5fb0:	ldp	x29, x30, [sp], #80
    5fb4:	ret
    5fb8:	cmp	w0, #0x72
    5fbc:	b.ne	5f88 <d_maybe_print_fold_expression.isra.0+0x1a8>  // b.any
    5fc0:	ldr	x1, [x19, #256]
    5fc4:	add	x0, x1, #0x1
    5fc8:	cmp	x1, #0xff
    5fcc:	b.eq	6140 <d_maybe_print_fold_expression.isra.0+0x360>  // b.none
    5fd0:	str	x0, [x19, #256]
    5fd4:	mov	w0, #0x28                  	// #40
    5fd8:	strb	w0, [x19, x1]
    5fdc:	mov	x2, x26
    5fe0:	strb	w0, [x19, #264]
    5fe4:	mov	w1, w20
    5fe8:	mov	x0, x19
    5fec:	bl	5ce8 <d_print_subexpr>
    5ff0:	mov	x2, x23
    5ff4:	mov	w1, w20
    5ff8:	mov	x0, x19
    5ffc:	adrp	x23, 0 <d_make_comp>
    6000:	bl	5c30 <d_print_expr_op>
    6004:	add	x23, x23, #0x0
    6008:	mov	x0, x23
    600c:	bl	0 <__asan_internal_strlen>
    6010:	cbz	x0, 5f88 <d_maybe_print_fold_expression.isra.0+0x1a8>
    6014:	adrp	x20, 428 <d_compact_number+0x70>
    6018:	add	x23, x0, x23
    601c:	add	x20, x20, #0x0
    6020:	mov	w21, #0x2e                  	// #46
    6024:	ldr	x1, [x19, #256]
    6028:	b	604c <d_maybe_print_fold_expression.isra.0+0x26c>
    602c:	mov	x2, x1
    6030:	add	x1, x1, #0x1
    6034:	str	x1, [x19, #256]
    6038:	cmp	x23, x20
    603c:	strb	w21, [x19, x2]
    6040:	strb	w21, [x19, #264]
    6044:	b.eq	5f88 <d_maybe_print_fold_expression.isra.0+0x1a8>  // b.none
    6048:	ldrb	w21, [x20], #1
    604c:	cmp	x1, #0xff
    6050:	b.ne	602c <d_maybe_print_fold_expression.isra.0+0x24c>  // b.any
    6054:	ldp	x3, x2, [x19, #272]
    6058:	strb	wzr, [x19, #255]
    605c:	mov	x0, x19
    6060:	blr	x3
    6064:	ldr	x0, [x19, #320]
    6068:	mov	x1, #0x1                   	// #1
    606c:	mov	x2, #0x0                   	// #0
    6070:	add	x0, x0, x1
    6074:	str	x0, [x19, #320]
    6078:	b	6034 <d_maybe_print_fold_expression.isra.0+0x254>
    607c:	ldr	w22, [x19, #316]
    6080:	mov	w1, #0xffffffff            	// #-1
    6084:	ldr	x25, [x26, #16]
    6088:	ldr	x26, [x26, #8]
    608c:	str	w1, [x19, #316]
    6090:	ldrb	w0, [x0, #1]
    6094:	cmp	w0, #0x6c
    6098:	b.ne	5e44 <d_maybe_print_fold_expression.isra.0+0x64>  // b.any
    609c:	adrp	x25, 0 <d_make_comp>
    60a0:	add	x25, x25, #0x0
    60a4:	mov	x0, x25
    60a8:	bl	0 <__asan_internal_strlen>
    60ac:	cbz	x0, 6128 <d_maybe_print_fold_expression.isra.0+0x348>
    60b0:	adrp	x21, 420 <d_compact_number+0x68>
    60b4:	add	x25, x0, x25
    60b8:	add	x21, x21, #0x0
    60bc:	mov	w24, #0x28                  	// #40
    60c0:	ldr	x1, [x19, #256]
    60c4:	b	60e8 <d_maybe_print_fold_expression.isra.0+0x308>
    60c8:	mov	x2, x1
    60cc:	add	x1, x1, #0x1
    60d0:	str	x1, [x19, #256]
    60d4:	cmp	x25, x21
    60d8:	strb	w24, [x19, x2]
    60dc:	strb	w24, [x19, #264]
    60e0:	b.eq	6128 <d_maybe_print_fold_expression.isra.0+0x348>  // b.none
    60e4:	ldrb	w24, [x21], #1
    60e8:	cmp	x1, #0xff
    60ec:	b.ne	60c8 <d_maybe_print_fold_expression.isra.0+0x2e8>  // b.any
    60f0:	ldp	x3, x2, [x19, #272]
    60f4:	strb	wzr, [x19, #255]
    60f8:	mov	x0, x19
    60fc:	blr	x3
    6100:	ldr	x0, [x19, #320]
    6104:	mov	x2, #0x0                   	// #0
    6108:	mov	x1, #0x1                   	// #1
    610c:	str	x1, [x19, #256]
    6110:	add	x0, x0, x1
    6114:	str	x0, [x19, #320]
    6118:	strb	w24, [x19, x2]
    611c:	cmp	x25, x21
    6120:	strb	w24, [x19, #264]
    6124:	b.ne	60e4 <d_maybe_print_fold_expression.isra.0+0x304>  // b.any
    6128:	mov	x2, x23
    612c:	mov	w1, w20
    6130:	mov	x0, x19
    6134:	bl	5c30 <d_print_expr_op>
    6138:	mov	x2, x26
    613c:	b	5f38 <d_maybe_print_fold_expression.isra.0+0x158>
    6140:	ldp	x3, x2, [x19, #272]
    6144:	strb	wzr, [x19, #255]
    6148:	mov	x0, x19
    614c:	blr	x3
    6150:	ldr	x2, [x19, #320]
    6154:	mov	x0, #0x1                   	// #1
    6158:	mov	x1, #0x0                   	// #0
    615c:	add	x2, x2, x0
    6160:	str	x2, [x19, #320]
    6164:	b	5fd0 <d_maybe_print_fold_expression.isra.0+0x1f0>
    6168:	ldp	x3, x2, [x19, #272]
    616c:	strb	wzr, [x19, #255]
    6170:	mov	x0, x19
    6174:	blr	x3
    6178:	ldr	x2, [x19, #320]
    617c:	mov	x0, #0x1                   	// #1
    6180:	mov	x1, #0x0                   	// #0
    6184:	add	x2, x2, x0
    6188:	str	x2, [x19, #320]
    618c:	b	5e68 <d_maybe_print_fold_expression.isra.0+0x88>

0000000000006190 <__asan_cplus_demangle_fill_name>:
    6190:	cmp	x1, #0x0
    6194:	mov	x3, x0
    6198:	ccmp	w2, #0x0, #0x4, ne  // ne = any
    619c:	ccmp	x0, #0x0, #0x4, gt
    61a0:	mov	w0, #0x0                   	// #0
    61a4:	b.ne	61ac <__asan_cplus_demangle_fill_name+0x1c>  // b.any
    61a8:	ret
    61ac:	mov	w0, #0x1                   	// #1
    61b0:	stp	xzr, x1, [x3]
    61b4:	str	w2, [x3, #16]
    61b8:	ret
    61bc:	nop

00000000000061c0 <d_make_name>:
    61c0:	stp	x29, x30, [sp, #-32]!
    61c4:	mov	x29, sp
    61c8:	ldr	w3, [x0, #44]
    61cc:	str	x19, [sp, #16]
    61d0:	ldr	w19, [x0, #40]
    61d4:	cmp	w19, w3
    61d8:	b.ge	6210 <d_make_name+0x50>  // b.tcont
    61dc:	ldr	x4, [x0, #32]
    61e0:	mov	w5, #0x18                  	// #24
    61e4:	add	w3, w19, #0x1
    61e8:	smaddl	x19, w19, w5, x4
    61ec:	str	wzr, [x19, #4]
    61f0:	str	w3, [x0, #40]
    61f4:	mov	x0, x19
    61f8:	bl	6190 <__asan_cplus_demangle_fill_name>
    61fc:	cmp	w0, #0x0
    6200:	csel	x0, x19, xzr, ne  // ne = any
    6204:	ldr	x19, [sp, #16]
    6208:	ldp	x29, x30, [sp], #32
    620c:	ret
    6210:	mov	x19, #0x0                   	// #0
    6214:	mov	x0, x19
    6218:	bl	6190 <__asan_cplus_demangle_fill_name>
    621c:	cmp	w0, #0x0
    6220:	csel	x0, x19, xzr, ne  // ne = any
    6224:	ldr	x19, [sp, #16]
    6228:	ldp	x29, x30, [sp], #32
    622c:	ret

0000000000006230 <d_source_name>:
    6230:	stp	x29, x30, [sp, #-48]!
    6234:	mov	x29, sp
    6238:	stp	x19, x20, [sp, #16]
    623c:	mov	x19, x0
    6240:	add	x0, x0, #0x18
    6244:	bl	280 <d_number.isra.0>
    6248:	cmp	w0, #0x0
    624c:	b.le	6320 <d_source_name+0xf0>
    6250:	mov	w20, w0
    6254:	sxtw	x1, w0
    6258:	ldr	x0, [x19, #8]
    625c:	str	x21, [sp, #32]
    6260:	ldr	x21, [x19, #24]
    6264:	sub	x0, x0, x21
    6268:	cmp	x0, w20, sxtw
    626c:	b.lt	6344 <d_source_name+0x114>  // b.tstop
    6270:	ldr	w0, [x19, #16]
    6274:	add	x1, x21, x1
    6278:	str	x1, [x19, #24]
    627c:	tbz	w0, #2, 628c <d_source_name+0x5c>
    6280:	ldrb	w0, [x21, w20, sxtw]
    6284:	cmp	w0, #0x24
    6288:	b.eq	6330 <d_source_name+0x100>  // b.none
    628c:	cmp	w20, #0x9
    6290:	b.gt	62b8 <d_source_name+0x88>
    6294:	mov	w2, w20
    6298:	mov	x1, x21
    629c:	mov	x0, x19
    62a0:	bl	61c0 <d_make_name>
    62a4:	ldr	x21, [sp, #32]
    62a8:	str	x0, [x19, #64]
    62ac:	ldp	x19, x20, [sp, #16]
    62b0:	ldp	x29, x30, [sp], #48
    62b4:	ret
    62b8:	adrp	x1, 0 <d_make_comp>
    62bc:	mov	x0, x21
    62c0:	add	x1, x1, #0x0
    62c4:	mov	x2, #0x8                   	// #8
    62c8:	bl	0 <__asan_internal_memcmp>
    62cc:	cbnz	w0, 6294 <d_source_name+0x64>
    62d0:	ldrb	w0, [x21, #8]
    62d4:	mov	w2, #0x5f                  	// #95
    62d8:	mov	w1, #0x24                  	// #36
    62dc:	cmp	w0, #0x2e
    62e0:	ccmp	w0, w2, #0x4, ne  // ne = any
    62e4:	ccmp	w0, w1, #0x4, ne  // ne = any
    62e8:	b.ne	6294 <d_source_name+0x64>  // b.any
    62ec:	ldrb	w0, [x21, #9]
    62f0:	cmp	w0, #0x4e
    62f4:	b.ne	6294 <d_source_name+0x64>  // b.any
    62f8:	ldr	w3, [x19, #72]
    62fc:	mov	x0, x19
    6300:	adrp	x1, 0 <d_make_comp>
    6304:	mov	w2, #0x15                  	// #21
    6308:	add	w3, w3, #0x16
    630c:	add	x1, x1, #0x0
    6310:	sub	w20, w3, w20
    6314:	str	w20, [x19, #72]
    6318:	bl	61c0 <d_make_name>
    631c:	b	62a4 <d_source_name+0x74>
    6320:	mov	x0, #0x0                   	// #0
    6324:	ldp	x19, x20, [sp, #16]
    6328:	ldp	x29, x30, [sp], #48
    632c:	ret
    6330:	add	x1, x1, #0x1
    6334:	str	x1, [x19, #24]
    6338:	cmp	w20, #0x9
    633c:	b.le	6294 <d_source_name+0x64>
    6340:	b	62b8 <d_source_name+0x88>
    6344:	mov	x0, #0x0                   	// #0
    6348:	b	62a4 <d_source_name+0x74>
    634c:	nop

0000000000006350 <d_abi_tags>:
    6350:	stp	x29, x30, [sp, #-48]!
    6354:	mov	x29, sp
    6358:	ldr	x3, [x0, #24]
    635c:	stp	x19, x20, [sp, #16]
    6360:	mov	x19, x0
    6364:	str	x21, [sp, #32]
    6368:	mov	x20, x1
    636c:	ldr	x21, [x0, #64]
    6370:	ldrb	w0, [x3]
    6374:	cmp	w0, #0x42
    6378:	b.ne	63b8 <d_abi_tags+0x68>  // b.any
    637c:	nop
    6380:	add	x3, x3, #0x1
    6384:	str	x3, [x19, #24]
    6388:	mov	x0, x19
    638c:	bl	6230 <d_source_name>
    6390:	mov	x3, x0
    6394:	mov	x2, x20
    6398:	mov	x0, x19
    639c:	mov	w1, #0x4c                  	// #76
    63a0:	bl	0 <d_make_comp>
    63a4:	ldr	x3, [x19, #24]
    63a8:	mov	x20, x0
    63ac:	ldrb	w0, [x3]
    63b0:	cmp	w0, #0x42
    63b4:	b.eq	6380 <d_abi_tags+0x30>  // b.none
    63b8:	str	x21, [x19, #64]
    63bc:	mov	x0, x20
    63c0:	ldp	x19, x20, [sp, #16]
    63c4:	ldr	x21, [sp, #32]
    63c8:	ldp	x29, x30, [sp], #48
    63cc:	ret

00000000000063d0 <d_substitution>:
    63d0:	stp	x29, x30, [sp, #-32]!
    63d4:	mov	x29, sp
    63d8:	str	x19, [sp, #16]
    63dc:	mov	x19, x0
    63e0:	ldr	x0, [x0, #24]
    63e4:	ldrb	w2, [x0]
    63e8:	cmp	w2, #0x53
    63ec:	b.ne	6460 <d_substitution+0x90>  // b.any
    63f0:	add	x2, x0, #0x1
    63f4:	str	x2, [x19, #24]
    63f8:	ldrb	w2, [x0, #1]
    63fc:	cbnz	w2, 6470 <d_substitution+0xa0>
    6400:	ldr	w0, [x19, #16]
    6404:	and	w1, w1, #0x1
    6408:	ands	w3, w0, #0x8
    640c:	ubfx	x4, x0, #3, #1
    6410:	csel	w1, w1, wzr, eq  // eq = none
    6414:	cbz	w1, 6430 <d_substitution+0x60>
    6418:	ldr	x0, [x19, #24]
    641c:	ldrb	w0, [x0]
    6420:	sub	w0, w0, #0x43
    6424:	and	w0, w0, #0xff
    6428:	cmp	w0, #0x1
    642c:	csinc	w4, w4, wzr, hi  // hi = pmore
    6430:	adrp	x0, 0 <d_make_comp>
    6434:	add	x0, x0, #0x0
    6438:	add	x3, x0, #0x188
    643c:	mov	w1, #0x74                  	// #116
    6440:	b	6448 <d_substitution+0x78>
    6444:	ldrb	w1, [x0]
    6448:	cmp	w1, w2
    644c:	b.eq	654c <d_substitution+0x17c>  // b.none
    6450:	add	x0, x0, #0x38
    6454:	cmp	x0, x3
    6458:	b.ne	6444 <d_substitution+0x74>  // b.any
    645c:	nop
    6460:	mov	x0, #0x0                   	// #0
    6464:	ldr	x19, [sp, #16]
    6468:	ldp	x29, x30, [sp], #32
    646c:	ret
    6470:	add	x2, x0, #0x2
    6474:	str	x2, [x19, #24]
    6478:	ldrb	w2, [x0, #1]
    647c:	sub	w5, w2, #0x30
    6480:	cmp	w2, #0x5f
    6484:	and	w0, w5, #0xff
    6488:	ccmp	w0, #0x9, #0x0, ne  // ne = any
    648c:	b.hi	64bc <d_substitution+0xec>  // b.pmore
    6490:	cmp	w2, #0x5f
    6494:	mov	w1, #0x0                   	// #0
    6498:	b.ne	64d0 <d_substitution+0x100>  // b.any
    649c:	ldr	w0, [x19, #56]
    64a0:	cmp	w0, w1
    64a4:	b.ls	6460 <d_substitution+0x90>  // b.plast
    64a8:	ldr	x0, [x19, #48]
    64ac:	ldr	x19, [sp, #16]
    64b0:	ldp	x29, x30, [sp], #32
    64b4:	ldr	x0, [x0, w1, uxtw #3]
    64b8:	ret
    64bc:	sub	w0, w2, #0x41
    64c0:	and	w0, w0, #0xff
    64c4:	cmp	w0, #0x19
    64c8:	b.hi	6400 <d_substitution+0x30>  // b.pmore
    64cc:	nop
    64d0:	mov	w3, #0x0                   	// #0
    64d4:	nop
    64d8:	add	w1, w3, w3, lsl #3
    64dc:	sub	w6, w2, #0x41
    64e0:	mov	w4, w1
    64e4:	and	w5, w5, #0xff
    64e8:	add	w1, w2, w1, lsl #2
    64ec:	and	w6, w6, #0xff
    64f0:	sub	w1, w1, #0x37
    64f4:	add	w2, w2, w4, lsl #2
    64f8:	cmp	w5, #0x9
    64fc:	b.hi	6540 <d_substitution+0x170>  // b.pmore
    6500:	sub	w1, w2, #0x30
    6504:	cmp	w3, w1
    6508:	b.hi	6460 <d_substitution+0x90>  // b.pmore
    650c:	ldr	x4, [x19, #24]
    6510:	mov	w3, w1
    6514:	add	x0, x4, #0x1
    6518:	ldrb	w2, [x4]
    651c:	cbz	w2, 6530 <d_substitution+0x160>
    6520:	str	x0, [x19, #24]
    6524:	ldrb	w2, [x4]
    6528:	cmp	w2, #0x5f
    652c:	b.eq	6538 <d_substitution+0x168>  // b.none
    6530:	sub	w5, w2, #0x30
    6534:	b	64d8 <d_substitution+0x108>
    6538:	add	w1, w1, #0x1
    653c:	b	649c <d_substitution+0xcc>
    6540:	cmp	w6, #0x19
    6544:	b.ls	6504 <d_substitution+0x134>  // b.plast
    6548:	b	6460 <d_substitution+0x90>
    654c:	ldr	x5, [x0, #40]
    6550:	ldp	w1, w3, [x19, #40]
    6554:	cbz	x5, 6590 <d_substitution+0x1c0>
    6558:	ldr	w9, [x0, #48]
    655c:	cmp	w3, w1
    6560:	b.le	662c <d_substitution+0x25c>
    6564:	mov	w8, #0x18                  	// #24
    6568:	ldr	x7, [x19, #32]
    656c:	smull	x6, w1, w8
    6570:	add	w1, w1, #0x1
    6574:	add	x2, x7, x6
    6578:	str	wzr, [x2, #4]
    657c:	str	w1, [x19, #40]
    6580:	str	w8, [x7, x6]
    6584:	str	x5, [x2, #8]
    6588:	str	w9, [x2, #16]
    658c:	str	x2, [x19, #64]
    6590:	cbz	w4, 6618 <d_substitution+0x248>
    6594:	ldr	w2, [x0, #32]
    6598:	ldr	x5, [x0, #24]
    659c:	cmp	w1, w3
    65a0:	ldr	w0, [x19, #72]
    65a4:	add	w0, w0, w2
    65a8:	str	w0, [x19, #72]
    65ac:	b.ge	6624 <d_substitution+0x254>  // b.tcont
    65b0:	mov	w4, #0x18                  	// #24
    65b4:	add	w6, w1, #0x1
    65b8:	ldr	x3, [x19, #32]
    65bc:	smull	x1, w1, w4
    65c0:	add	x0, x3, x1
    65c4:	str	wzr, [x0, #4]
    65c8:	str	w6, [x19, #40]
    65cc:	str	w4, [x3, x1]
    65d0:	str	x5, [x0, #8]
    65d4:	str	w2, [x0, #16]
    65d8:	ldr	x1, [x19, #24]
    65dc:	ldrb	w1, [x1]
    65e0:	cmp	w1, #0x42
    65e4:	b.ne	6464 <d_substitution+0x94>  // b.any
    65e8:	mov	x1, x0
    65ec:	mov	x0, x19
    65f0:	bl	6350 <d_abi_tags>
    65f4:	cbz	x0, 6460 <d_substitution+0x90>
    65f8:	ldp	w1, w2, [x19, #56]
    65fc:	cmp	w1, w2
    6600:	b.ge	6460 <d_substitution+0x90>  // b.tcont
    6604:	ldr	x3, [x19, #48]
    6608:	add	w2, w1, #0x1
    660c:	str	x0, [x3, w1, sxtw #3]
    6610:	str	w2, [x19, #56]
    6614:	b	6464 <d_substitution+0x94>
    6618:	ldr	w2, [x0, #16]
    661c:	ldr	x5, [x0, #8]
    6620:	b	659c <d_substitution+0x1cc>
    6624:	mov	x0, #0x0                   	// #0
    6628:	b	65d8 <d_substitution+0x208>
    662c:	mov	x2, #0x0                   	// #0
    6630:	str	x2, [x19, #64]
    6634:	b	6590 <d_substitution+0x1c0>

0000000000006638 <__asan_cplus_demangle_fill_extended_operator>:
    6638:	cmp	w1, #0x0
    663c:	mov	x3, x0
    6640:	ccmp	x2, #0x0, #0x4, ge  // ge = tcont
    6644:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    6648:	mov	w0, #0x0                   	// #0
    664c:	b.eq	6664 <__asan_cplus_demangle_fill_extended_operator+0x2c>  // b.none
    6650:	mov	x4, #0x33                  	// #51
    6654:	mov	w0, #0x1                   	// #1
    6658:	str	x4, [x3]
    665c:	str	w1, [x3, #8]
    6660:	str	x2, [x3, #16]
    6664:	ret

0000000000006668 <__asan_cplus_demangle_fill_ctor>:
    6668:	cmp	x0, #0x0
    666c:	mov	x3, x0
    6670:	ccmp	x2, #0x0, #0x4, ne  // ne = any
    6674:	mov	w0, #0x0                   	// #0
    6678:	b.eq	66a0 <__asan_cplus_demangle_fill_ctor+0x38>  // b.none
    667c:	sub	w4, w1, #0x1
    6680:	mov	w0, #0x0                   	// #0
    6684:	cmp	w4, #0x4
    6688:	b.hi	66a0 <__asan_cplus_demangle_fill_ctor+0x38>  // b.pmore
    668c:	mov	x4, #0x7                   	// #7
    6690:	mov	w0, #0x1                   	// #1
    6694:	str	x4, [x3]
    6698:	str	w1, [x3, #8]
    669c:	str	x2, [x3, #16]
    66a0:	ret
    66a4:	nop

00000000000066a8 <__asan_cplus_demangle_fill_dtor>:
    66a8:	cmp	x0, #0x0
    66ac:	mov	x3, x0
    66b0:	ccmp	x2, #0x0, #0x4, ne  // ne = any
    66b4:	mov	w0, #0x0                   	// #0
    66b8:	b.eq	66e0 <__asan_cplus_demangle_fill_dtor+0x38>  // b.none
    66bc:	sub	w4, w1, #0x1
    66c0:	mov	w0, #0x0                   	// #0
    66c4:	cmp	w4, #0x4
    66c8:	b.hi	66e0 <__asan_cplus_demangle_fill_dtor+0x38>  // b.pmore
    66cc:	mov	x4, #0x8                   	// #8
    66d0:	mov	w0, #0x1                   	// #1
    66d4:	str	x4, [x3]
    66d8:	str	w1, [x3, #8]
    66dc:	str	x2, [x3, #16]
    66e0:	ret
    66e4:	nop

00000000000066e8 <__asan_cplus_demangle_type>:
    66e8:	stp	x29, x30, [sp, #-80]!
    66ec:	mov	x29, sp
    66f0:	ldr	x5, [x0, #24]
    66f4:	stp	x19, x20, [sp, #16]
    66f8:	mov	x19, x0
    66fc:	mov	x0, x5
    6700:	bl	558 <next_is_type_qual.isra.0>
    6704:	cbnz	w0, 6744 <__asan_cplus_demangle_type+0x5c>
    6708:	ldrb	w1, [x5]
    670c:	sub	w0, w1, #0x30
    6710:	cmp	w0, #0x4a
    6714:	b.ls	672c <__asan_cplus_demangle_type+0x44>  // b.plast
    6718:	mov	x20, #0x0                   	// #0
    671c:	mov	x0, x20
    6720:	ldp	x19, x20, [sp, #16]
    6724:	ldp	x29, x30, [sp], #80
    6728:	ret
    672c:	adrp	x2, 0 <d_make_comp>
    6730:	add	x2, x2, #0x0
    6734:	ldrh	w0, [x2, w0, uxtw #1]
    6738:	adr	x2, 6744 <__asan_cplus_demangle_type+0x5c>
    673c:	add	x0, x2, w0, sxth #2
    6740:	br	x0
    6744:	add	x1, sp, #0x48
    6748:	mov	x0, x19
    674c:	mov	w2, #0x0                   	// #0
    6750:	stp	x21, x22, [sp, #32]
    6754:	bl	8a78 <d_cv_qualifiers>
    6758:	mov	x21, x0
    675c:	cbz	x0, 67f0 <__asan_cplus_demangle_type+0x108>
    6760:	ldr	x0, [x19, #24]
    6764:	ldrb	w0, [x0]
    6768:	cmp	w0, #0x46
    676c:	mov	x0, x19
    6770:	b.eq	67e4 <__asan_cplus_demangle_type+0xfc>  // b.none
    6774:	bl	66e8 <__asan_cplus_demangle_type>
    6778:	str	x0, [x21]
    677c:	cbz	x0, 67f0 <__asan_cplus_demangle_type+0x108>
    6780:	ldr	w1, [x0]
    6784:	ldr	x20, [sp, #72]
    6788:	sub	w1, w1, #0x1f
    678c:	cmp	w1, #0x1
    6790:	b.ls	67c8 <__asan_cplus_demangle_type+0xe0>  // b.plast
    6794:	cbz	x20, 67f0 <__asan_cplus_demangle_type+0x108>
    6798:	ldp	w0, w1, [x19, #56]
    679c:	cmp	w0, w1
    67a0:	b.ge	67f0 <__asan_cplus_demangle_type+0x108>  // b.tcont
    67a4:	ldr	x2, [x19, #48]
    67a8:	add	w1, w0, #0x1
    67ac:	ldp	x21, x22, [sp, #32]
    67b0:	str	x20, [x2, w0, sxtw #3]
    67b4:	mov	x0, x20
    67b8:	str	w1, [x19, #56]
    67bc:	ldp	x19, x20, [sp, #16]
    67c0:	ldp	x29, x30, [sp], #80
    67c4:	ret
    67c8:	ldr	x1, [x0, #8]
    67cc:	str	x20, [x0, #8]
    67d0:	ldr	x0, [x21]
    67d4:	str	x0, [sp, #72]
    67d8:	str	x1, [x21]
    67dc:	ldr	x20, [sp, #72]
    67e0:	b	6794 <__asan_cplus_demangle_type+0xac>
    67e4:	bl	7a40 <d_function_type>
    67e8:	str	x0, [x21]
    67ec:	b	677c <__asan_cplus_demangle_type+0x94>
    67f0:	ldp	x21, x22, [sp, #32]
    67f4:	b	6718 <__asan_cplus_demangle_type+0x30>
    67f8:	adrp	x2, 188 <d_count_templates_scopes+0x98>
    67fc:	sub	w1, w1, #0x61
    6800:	ldp	w0, w4, [x19, #40]
    6804:	sbfiz	x1, x1, #5, #32
    6808:	ldr	x2, [x2]
    680c:	cmp	w0, w4
    6810:	add	x1, x1, x2
    6814:	b.ge	7204 <__asan_cplus_demangle_type+0xb1c>  // b.tcont
    6818:	mov	w2, #0x18                  	// #24
    681c:	add	w7, w0, #0x1
    6820:	ldr	x4, [x19, #32]
    6824:	smull	x0, w0, w2
    6828:	ldr	w8, [x1, #8]
    682c:	mov	w6, #0x27                  	// #39
    6830:	add	x20, x4, x0
    6834:	ldr	w2, [x19, #72]
    6838:	add	x3, x5, #0x1
    683c:	add	w2, w2, w8
    6840:	str	wzr, [x20, #4]
    6844:	str	w7, [x19, #40]
    6848:	str	w6, [x4, x0]
    684c:	str	x1, [x20, #8]
    6850:	str	x3, [x19, #24]
    6854:	str	w2, [x19, #72]
    6858:	b	671c <__asan_cplus_demangle_type+0x34>
    685c:	mov	x0, x19
    6860:	bl	8ea8 <d_name>
    6864:	mov	x20, x0
    6868:	str	x0, [sp, #72]
    686c:	nop
    6870:	cbz	x20, 6718 <__asan_cplus_demangle_type+0x30>
    6874:	ldp	w0, w1, [x19, #56]
    6878:	cmp	w0, w1
    687c:	b.ge	6718 <__asan_cplus_demangle_type+0x30>  // b.tcont
    6880:	ldr	x2, [x19, #48]
    6884:	add	w1, w0, #0x1
    6888:	str	x20, [x2, w0, sxtw #3]
    688c:	str	w1, [x19, #56]
    6890:	ldr	x20, [sp, #72]
    6894:	mov	x0, x20
    6898:	ldp	x19, x20, [sp, #16]
    689c:	ldp	x29, x30, [sp], #80
    68a0:	ret
    68a4:	mov	x0, x19
    68a8:	bl	7a40 <d_function_type>
    68ac:	mov	x20, x0
    68b0:	str	x0, [sp, #72]
    68b4:	b	6870 <__asan_cplus_demangle_type+0x188>
    68b8:	add	x0, x5, #0x1
    68bc:	str	x0, [x19, #24]
    68c0:	mov	x0, x19
    68c4:	bl	66e8 <__asan_cplus_demangle_type>
    68c8:	mov	x2, x0
    68cc:	mov	x3, #0x0                   	// #0
    68d0:	mov	x0, x19
    68d4:	mov	w1, #0x26                  	// #38
    68d8:	bl	0 <d_make_comp>
    68dc:	mov	x20, x0
    68e0:	str	x0, [sp, #72]
    68e4:	b	6870 <__asan_cplus_demangle_type+0x188>
    68e8:	add	x0, x5, #0x1
    68ec:	str	x0, [x19, #24]
    68f0:	mov	x0, x19
    68f4:	bl	66e8 <__asan_cplus_demangle_type>
    68f8:	mov	x2, x0
    68fc:	mov	x3, #0x0                   	// #0
    6900:	mov	x0, x19
    6904:	mov	w1, #0x24                  	// #36
    6908:	bl	0 <d_make_comp>
    690c:	mov	x20, x0
    6910:	str	x0, [sp, #72]
    6914:	b	6870 <__asan_cplus_demangle_type+0x188>
    6918:	add	x0, x5, #0x1
    691c:	str	x0, [x19, #24]
    6920:	mov	x0, x19
    6924:	bl	66e8 <__asan_cplus_demangle_type>
    6928:	mov	x2, x0
    692c:	mov	x3, #0x0                   	// #0
    6930:	mov	x0, x19
    6934:	mov	w1, #0x25                  	// #37
    6938:	bl	0 <d_make_comp>
    693c:	mov	x20, x0
    6940:	str	x0, [sp, #72]
    6944:	b	6870 <__asan_cplus_demangle_type+0x188>
    6948:	add	x0, x5, #0x1
    694c:	str	x0, [x19, #24]
    6950:	ldrb	w0, [x5, #1]
    6954:	cbz	w0, 6718 <__asan_cplus_demangle_type+0x30>
    6958:	add	x0, x5, #0x2
    695c:	str	x0, [x19, #24]
    6960:	ldrb	w0, [x5, #1]
    6964:	cmp	w0, #0x68
    6968:	b.eq	702c <__asan_cplus_demangle_type+0x944>  // b.none
    696c:	b.hi	6c6c <__asan_cplus_demangle_type+0x584>  // b.pmore
    6970:	cmp	w0, #0x63
    6974:	b.eq	7010 <__asan_cplus_demangle_type+0x928>  // b.none
    6978:	b.ls	6c40 <__asan_cplus_demangle_type+0x558>  // b.plast
    697c:	cmp	w0, #0x65
    6980:	b.eq	70cc <__asan_cplus_demangle_type+0x9e4>  // b.none
    6984:	cmp	w0, #0x66
    6988:	b.ne	6e88 <__asan_cplus_demangle_type+0x7a0>  // b.any
    698c:	ldp	w0, w1, [x19, #40]
    6990:	cmp	w0, w1
    6994:	b.ge	7204 <__asan_cplus_demangle_type+0xb1c>  // b.tcont
    6998:	adrp	x1, 188 <d_count_templates_scopes+0x98>
    699c:	mov	w2, #0x18                  	// #24
    69a0:	ldr	x4, [x19, #32]
    69a4:	smull	x2, w0, w2
    69a8:	ldr	x1, [x1]
    69ac:	add	w0, w0, #0x1
    69b0:	ldr	w3, [x19, #72]
    69b4:	add	x20, x4, x2
    69b8:	add	x1, x1, #0x340
    69bc:	mov	w5, #0x27                  	// #39
    69c0:	str	wzr, [x20, #4]
    69c4:	str	w0, [x19, #40]
    69c8:	add	w0, w3, #0x9
    69cc:	str	w5, [x4, x2]
    69d0:	str	x1, [x20, #8]
    69d4:	str	w0, [x19, #72]
    69d8:	b	671c <__asan_cplus_demangle_type+0x34>
    69dc:	add	x0, x5, #0x1
    69e0:	str	x0, [x19, #24]
    69e4:	mov	x0, x19
    69e8:	bl	6230 <d_source_name>
    69ec:	str	x0, [sp, #72]
    69f0:	ldr	x1, [x19, #24]
    69f4:	mov	x20, x0
    69f8:	ldrb	w0, [x1]
    69fc:	cmp	w0, #0x49
    6a00:	b.eq	6f48 <__asan_cplus_demangle_type+0x860>  // b.none
    6a04:	mov	x0, x19
    6a08:	bl	66e8 <__asan_cplus_demangle_type>
    6a0c:	ldr	x3, [sp, #72]
    6a10:	mov	x2, x0
    6a14:	mov	w1, #0x21                  	// #33
    6a18:	mov	x0, x19
    6a1c:	bl	0 <d_make_comp>
    6a20:	mov	x20, x0
    6a24:	str	x0, [sp, #72]
    6a28:	b	6870 <__asan_cplus_demangle_type+0x188>
    6a2c:	add	x0, x5, #0x1
    6a30:	str	x0, [x19, #24]
    6a34:	mov	x0, x19
    6a38:	bl	66e8 <__asan_cplus_demangle_type>
    6a3c:	mov	x2, x0
    6a40:	mov	x3, #0x0                   	// #0
    6a44:	mov	x0, x19
    6a48:	mov	w1, #0x22                  	// #34
    6a4c:	bl	0 <d_make_comp>
    6a50:	mov	x20, x0
    6a54:	str	x0, [sp, #72]
    6a58:	b	6870 <__asan_cplus_demangle_type+0x188>
    6a5c:	ldrb	w0, [x5, #1]
    6a60:	sub	w1, w0, #0x30
    6a64:	cmp	w0, #0x5f
    6a68:	and	w1, w1, #0xff
    6a6c:	ccmp	w1, #0x9, #0x0, ne  // ne = any
    6a70:	b.ls	6a84 <__asan_cplus_demangle_type+0x39c>  // b.plast
    6a74:	sub	w0, w0, #0x41
    6a78:	and	w0, w0, #0xff
    6a7c:	cmp	w0, #0x19
    6a80:	b.hi	6f24 <__asan_cplus_demangle_type+0x83c>  // b.pmore
    6a84:	mov	w1, #0x0                   	// #0
    6a88:	mov	x0, x19
    6a8c:	bl	63d0 <d_substitution>
    6a90:	str	x0, [sp, #72]
    6a94:	ldr	x1, [x19, #24]
    6a98:	mov	x20, x0
    6a9c:	ldrb	w0, [x1]
    6aa0:	cmp	w0, #0x49
    6aa4:	b.ne	671c <__asan_cplus_demangle_type+0x34>  // b.any
    6aa8:	mov	x0, x19
    6aac:	bl	8e78 <d_template_args>
    6ab0:	mov	x2, x20
    6ab4:	mov	x3, x0
    6ab8:	mov	w1, #0x4                   	// #4
    6abc:	mov	x0, x19
    6ac0:	bl	0 <d_make_comp>
    6ac4:	mov	x20, x0
    6ac8:	str	x0, [sp, #72]
    6acc:	b	6870 <__asan_cplus_demangle_type+0x188>
    6ad0:	mov	x0, x19
    6ad4:	stp	x21, x22, [sp, #32]
    6ad8:	bl	430 <d_template_param>
    6adc:	ldr	x21, [x19, #24]
    6ae0:	str	x0, [sp, #72]
    6ae4:	mov	x20, x0
    6ae8:	ldrb	w0, [x21]
    6aec:	cmp	w0, #0x49
    6af0:	b.eq	6ec8 <__asan_cplus_demangle_type+0x7e0>  // b.none
    6af4:	ldp	x21, x22, [sp, #32]
    6af8:	b	6870 <__asan_cplus_demangle_type+0x188>
    6afc:	add	x0, x5, #0x1
    6b00:	str	x0, [x19, #24]
    6b04:	mov	x0, x19
    6b08:	bl	6230 <d_source_name>
    6b0c:	mov	x2, x0
    6b10:	mov	x3, #0x0                   	// #0
    6b14:	mov	x0, x19
    6b18:	mov	w1, #0x28                  	// #40
    6b1c:	bl	0 <d_make_comp>
    6b20:	mov	x20, x0
    6b24:	str	x0, [sp, #72]
    6b28:	b	6870 <__asan_cplus_demangle_type+0x188>
    6b2c:	add	x0, x5, #0x1
    6b30:	str	x0, [x19, #24]
    6b34:	mov	x0, x19
    6b38:	bl	66e8 <__asan_cplus_demangle_type>
    6b3c:	mov	x2, x0
    6b40:	mov	x3, #0x0                   	// #0
    6b44:	mov	x0, x19
    6b48:	mov	w1, #0x23                  	// #35
    6b4c:	bl	0 <d_make_comp>
    6b50:	mov	x20, x0
    6b54:	str	x0, [sp, #72]
    6b58:	b	6870 <__asan_cplus_demangle_type+0x188>
    6b5c:	add	x1, x5, #0x1
    6b60:	str	x1, [x19, #24]
    6b64:	ldrb	w0, [x5, #1]
    6b68:	cmp	w0, #0x5f
    6b6c:	b.eq	6f1c <__asan_cplus_demangle_type+0x834>  // b.none
    6b70:	sub	w0, w0, #0x30
    6b74:	and	w0, w0, #0xff
    6b78:	cmp	w0, #0x9
    6b7c:	b.hi	6f6c <__asan_cplus_demangle_type+0x884>  // b.pmore
    6b80:	add	x3, x5, #0x2
    6b84:	nop
    6b88:	mov	x2, x3
    6b8c:	str	x3, [x19, #24]
    6b90:	add	x3, x3, #0x1
    6b94:	ldrb	w0, [x2]
    6b98:	sub	w0, w0, #0x30
    6b9c:	and	w0, w0, #0xff
    6ba0:	cmp	w0, #0x9
    6ba4:	b.ls	6b88 <__asan_cplus_demangle_type+0x4a0>  // b.plast
    6ba8:	sub	w2, w2, w1
    6bac:	mov	x0, x19
    6bb0:	bl	61c0 <d_make_name>
    6bb4:	mov	x20, x0
    6bb8:	cbz	x0, 6718 <__asan_cplus_demangle_type+0x30>
    6bbc:	ldr	x1, [x19, #24]
    6bc0:	ldrb	w0, [x1]
    6bc4:	cmp	w0, #0x5f
    6bc8:	b.ne	6718 <__asan_cplus_demangle_type+0x30>  // b.any
    6bcc:	add	x1, x1, #0x1
    6bd0:	str	x1, [x19, #24]
    6bd4:	mov	x0, x19
    6bd8:	bl	66e8 <__asan_cplus_demangle_type>
    6bdc:	mov	x3, x0
    6be0:	mov	x2, x20
    6be4:	mov	x0, x19
    6be8:	mov	w1, #0x2a                  	// #42
    6bec:	bl	0 <d_make_comp>
    6bf0:	mov	x20, x0
    6bf4:	str	x0, [sp, #72]
    6bf8:	b	6870 <__asan_cplus_demangle_type+0x188>
    6bfc:	add	x0, x5, #0x1
    6c00:	str	x0, [x19, #24]
    6c04:	mov	x0, x19
    6c08:	bl	66e8 <__asan_cplus_demangle_type>
    6c0c:	mov	x20, x0
    6c10:	cbz	x0, 6718 <__asan_cplus_demangle_type+0x30>
    6c14:	mov	x0, x19
    6c18:	bl	66e8 <__asan_cplus_demangle_type>
    6c1c:	mov	x3, x0
    6c20:	cbz	x0, 6718 <__asan_cplus_demangle_type+0x30>
    6c24:	mov	x2, x20
    6c28:	mov	x0, x19
    6c2c:	mov	w1, #0x2b                  	// #43
    6c30:	bl	0 <d_make_comp>
    6c34:	mov	x20, x0
    6c38:	str	x0, [sp, #72]
    6c3c:	b	6870 <__asan_cplus_demangle_type+0x188>
    6c40:	cmp	w0, #0x54
    6c44:	b.eq	6cec <__asan_cplus_demangle_type+0x604>  // b.none
    6c48:	cmp	w0, #0x61
    6c4c:	b.ne	6d80 <__asan_cplus_demangle_type+0x698>  // b.any
    6c50:	mov	x0, x19
    6c54:	adrp	x1, 0 <d_make_comp>
    6c58:	mov	w2, #0x4                   	// #4
    6c5c:	add	x1, x1, #0x0
    6c60:	bl	61c0 <d_make_name>
    6c64:	mov	x20, x0
    6c68:	b	671c <__asan_cplus_demangle_type+0x34>
    6c6c:	cmp	w0, #0x73
    6c70:	b.eq	6fd8 <__asan_cplus_demangle_type+0x8f0>  // b.none
    6c74:	b.ls	6d48 <__asan_cplus_demangle_type+0x660>  // b.plast
    6c78:	cmp	w0, #0x75
    6c7c:	b.eq	711c <__asan_cplus_demangle_type+0xa34>  // b.none
    6c80:	cmp	w0, #0x76
    6c84:	b.ne	6ce4 <__asan_cplus_demangle_type+0x5fc>  // b.any
    6c88:	ldrb	w0, [x5, #2]
    6c8c:	cmp	w0, #0x5f
    6c90:	b.eq	71b4 <__asan_cplus_demangle_type+0xacc>  // b.none
    6c94:	mov	x0, x19
    6c98:	bl	350 <d_number_component>
    6c9c:	mov	x20, x0
    6ca0:	cbz	x20, 6718 <__asan_cplus_demangle_type+0x30>
    6ca4:	ldr	x0, [x19, #24]
    6ca8:	ldrb	w1, [x0]
    6cac:	cmp	w1, #0x5f
    6cb0:	b.ne	6718 <__asan_cplus_demangle_type+0x30>  // b.any
    6cb4:	add	x0, x0, #0x1
    6cb8:	str	x0, [x19, #24]
    6cbc:	mov	x0, x19
    6cc0:	bl	66e8 <__asan_cplus_demangle_type>
    6cc4:	mov	x3, x0
    6cc8:	mov	x2, x20
    6ccc:	mov	x0, x19
    6cd0:	mov	w1, #0x2d                  	// #45
    6cd4:	bl	0 <d_make_comp>
    6cd8:	mov	x20, x0
    6cdc:	str	x0, [sp, #72]
    6ce0:	b	6870 <__asan_cplus_demangle_type+0x188>
    6ce4:	cmp	w0, #0x74
    6ce8:	b.ne	6718 <__asan_cplus_demangle_type+0x30>  // b.any
    6cec:	ldr	w20, [x19, #76]
    6cf0:	mov	w0, #0x1                   	// #1
    6cf4:	str	w0, [x19, #76]
    6cf8:	mov	x0, x19
    6cfc:	bl	8340 <d_expression_1>
    6d00:	str	w20, [x19, #76]
    6d04:	mov	x2, x0
    6d08:	mov	x3, #0x0                   	// #0
    6d0c:	mov	x0, x19
    6d10:	mov	w1, #0x43                  	// #67
    6d14:	bl	0 <d_make_comp>
    6d18:	str	x0, [sp, #72]
    6d1c:	mov	x20, x0
    6d20:	cbz	x0, 6718 <__asan_cplus_demangle_type+0x30>
    6d24:	ldr	x0, [x19, #24]
    6d28:	ldrb	w1, [x0]
    6d2c:	cbz	w1, 6718 <__asan_cplus_demangle_type+0x30>
    6d30:	add	x1, x0, #0x1
    6d34:	str	x1, [x19, #24]
    6d38:	ldrb	w0, [x0]
    6d3c:	cmp	w0, #0x45
    6d40:	b.ne	6718 <__asan_cplus_demangle_type+0x30>  // b.any
    6d44:	b	6874 <__asan_cplus_demangle_type+0x18c>
    6d48:	cmp	w0, #0x6e
    6d4c:	b.eq	707c <__asan_cplus_demangle_type+0x994>  // b.none
    6d50:	cmp	w0, #0x70
    6d54:	b.ne	6e30 <__asan_cplus_demangle_type+0x748>  // b.any
    6d58:	mov	x0, x19
    6d5c:	bl	66e8 <__asan_cplus_demangle_type>
    6d60:	mov	x3, #0x0                   	// #0
    6d64:	mov	x2, x0
    6d68:	mov	w1, #0x4b                  	// #75
    6d6c:	mov	x0, x19
    6d70:	bl	0 <d_make_comp>
    6d74:	mov	x20, x0
    6d78:	str	x0, [sp, #72]
    6d7c:	b	6870 <__asan_cplus_demangle_type+0x188>
    6d80:	cmp	w0, #0x46
    6d84:	b.ne	6718 <__asan_cplus_demangle_type+0x30>  // b.any
    6d88:	ldp	w0, w1, [x19, #40]
    6d8c:	cmp	w0, w1
    6d90:	b.ge	71f0 <__asan_cplus_demangle_type+0xb08>  // b.tcont
    6d94:	mov	w2, #0x18                  	// #24
    6d98:	add	w3, w0, #0x1
    6d9c:	ldr	x1, [x19, #32]
    6da0:	smull	x0, w0, w2
    6da4:	mov	w2, #0x2c                  	// #44
    6da8:	add	x20, x1, x0
    6dac:	str	wzr, [x20, #4]
    6db0:	str	w3, [x19, #40]
    6db4:	str	x20, [sp, #72]
    6db8:	str	w2, [x1, x0]
    6dbc:	ldrb	w0, [x5, #2]
    6dc0:	sub	w0, w0, #0x30
    6dc4:	and	w0, w0, #0xff
    6dc8:	cmp	w0, #0x9
    6dcc:	cset	w1, ls  // ls = plast
    6dd0:	strh	w1, [x20, #16]
    6dd4:	b.hi	6de4 <__asan_cplus_demangle_type+0x6fc>  // b.pmore
    6dd8:	add	x0, x19, #0x18
    6ddc:	bl	280 <d_number.isra.0>
    6de0:	ldr	x20, [sp, #72]
    6de4:	mov	x0, x19
    6de8:	bl	66e8 <__asan_cplus_demangle_type>
    6dec:	str	x0, [x20, #8]
    6df0:	ldr	x1, [sp, #72]
    6df4:	ldr	x0, [x1, #8]
    6df8:	cbz	x0, 6718 <__asan_cplus_demangle_type+0x30>
    6dfc:	add	x0, x19, #0x18
    6e00:	bl	280 <d_number.isra.0>
    6e04:	ldr	x1, [x19, #24]
    6e08:	ldrb	w0, [x1]
    6e0c:	cbz	w0, 6e1c <__asan_cplus_demangle_type+0x734>
    6e10:	add	x0, x1, #0x1
    6e14:	str	x0, [x19, #24]
    6e18:	ldrb	w0, [x1]
    6e1c:	ldr	x20, [sp, #72]
    6e20:	cmp	w0, #0x73
    6e24:	cset	w0, eq  // eq = none
    6e28:	strh	w0, [x20, #18]
    6e2c:	b	671c <__asan_cplus_demangle_type+0x34>
    6e30:	cmp	w0, #0x69
    6e34:	b.ne	6718 <__asan_cplus_demangle_type+0x30>  // b.any
    6e38:	ldp	w0, w1, [x19, #40]
    6e3c:	cmp	w0, w1
    6e40:	b.ge	7204 <__asan_cplus_demangle_type+0xb1c>  // b.tcont
    6e44:	adrp	x1, 188 <d_count_templates_scopes+0x98>
    6e48:	mov	w2, #0x18                  	// #24
    6e4c:	ldr	x4, [x19, #32]
    6e50:	smull	x2, w0, w2
    6e54:	ldr	x1, [x1]
    6e58:	add	w0, w0, #0x1
    6e5c:	ldr	w3, [x19, #72]
    6e60:	add	x20, x4, x2
    6e64:	add	x1, x1, #0x400
    6e68:	mov	w5, #0x27                  	// #39
    6e6c:	str	wzr, [x20, #4]
    6e70:	str	w0, [x19, #40]
    6e74:	add	w0, w3, #0x8
    6e78:	str	w5, [x4, x2]
    6e7c:	str	x1, [x20, #8]
    6e80:	str	w0, [x19, #72]
    6e84:	b	671c <__asan_cplus_demangle_type+0x34>
    6e88:	cmp	w0, #0x64
    6e8c:	b.ne	6718 <__asan_cplus_demangle_type+0x30>  // b.any
    6e90:	ldp	w0, w1, [x19, #40]
    6e94:	cmp	w0, w1
    6e98:	b.ge	7204 <__asan_cplus_demangle_type+0xb1c>  // b.tcont
    6e9c:	adrp	x1, 188 <d_count_templates_scopes+0x98>
    6ea0:	mov	w2, #0x18                  	// #24
    6ea4:	ldr	x4, [x19, #32]
    6ea8:	smull	x2, w0, w2
    6eac:	ldr	x1, [x1]
    6eb0:	add	w0, w0, #0x1
    6eb4:	ldr	w3, [x19, #72]
    6eb8:	add	x20, x4, x2
    6ebc:	add	x1, x1, #0x360
    6ec0:	mov	w5, #0x27                  	// #39
    6ec4:	b	69c0 <__asan_cplus_demangle_type+0x2d8>
    6ec8:	ldr	w0, [x19, #80]
    6ecc:	cbnz	w0, 6f90 <__asan_cplus_demangle_type+0x8a8>
    6ed0:	cbz	x20, 67f0 <__asan_cplus_demangle_type+0x108>
    6ed4:	ldp	w1, w0, [x19, #56]
    6ed8:	cmp	w1, w0
    6edc:	b.ge	67f0 <__asan_cplus_demangle_type+0x108>  // b.tcont
    6ee0:	ldr	x3, [x19, #48]
    6ee4:	add	w2, w1, #0x1
    6ee8:	mov	x0, x19
    6eec:	str	x20, [x3, w1, sxtw #3]
    6ef0:	str	w2, [x19, #56]
    6ef4:	bl	8e78 <d_template_args>
    6ef8:	mov	x3, x0
    6efc:	mov	x2, x20
    6f00:	mov	x0, x19
    6f04:	mov	w1, #0x4                   	// #4
    6f08:	bl	0 <d_make_comp>
    6f0c:	mov	x20, x0
    6f10:	str	x0, [sp, #72]
    6f14:	ldp	x21, x22, [sp, #32]
    6f18:	b	6870 <__asan_cplus_demangle_type+0x188>
    6f1c:	mov	x20, #0x0                   	// #0
    6f20:	b	6bcc <__asan_cplus_demangle_type+0x4e4>
    6f24:	mov	x0, x19
    6f28:	bl	8ea8 <d_name>
    6f2c:	str	x0, [sp, #72]
    6f30:	mov	x20, x0
    6f34:	cbz	x0, 6718 <__asan_cplus_demangle_type+0x30>
    6f38:	ldr	w0, [x0]
    6f3c:	cmp	w0, #0x18
    6f40:	b.ne	6874 <__asan_cplus_demangle_type+0x18c>  // b.any
    6f44:	b	671c <__asan_cplus_demangle_type+0x34>
    6f48:	mov	x0, x19
    6f4c:	bl	8e78 <d_template_args>
    6f50:	mov	x2, x20
    6f54:	mov	x3, x0
    6f58:	mov	w1, #0x4                   	// #4
    6f5c:	mov	x0, x19
    6f60:	bl	0 <d_make_comp>
    6f64:	str	x0, [sp, #72]
    6f68:	b	6a04 <__asan_cplus_demangle_type+0x31c>
    6f6c:	ldr	w20, [x19, #76]
    6f70:	mov	w0, #0x1                   	// #1
    6f74:	str	w0, [x19, #76]
    6f78:	mov	x0, x19
    6f7c:	bl	8340 <d_expression_1>
    6f80:	str	w20, [x19, #76]
    6f84:	mov	x20, x0
    6f88:	cbnz	x0, 6bbc <__asan_cplus_demangle_type+0x4d4>
    6f8c:	b	6718 <__asan_cplus_demangle_type+0x30>
    6f90:	ldr	w22, [x19, #56]
    6f94:	mov	x0, x19
    6f98:	ldr	w20, [x19, #72]
    6f9c:	str	x23, [sp, #48]
    6fa0:	ldr	w23, [x19, #40]
    6fa4:	bl	8e78 <d_template_args>
    6fa8:	ldr	x1, [x19, #24]
    6fac:	ldrb	w1, [x1]
    6fb0:	cmp	w1, #0x49
    6fb4:	b.eq	716c <__asan_cplus_demangle_type+0xa84>  // b.none
    6fb8:	str	x21, [x19, #24]
    6fbc:	str	w23, [x19, #40]
    6fc0:	str	w22, [x19, #56]
    6fc4:	str	w20, [x19, #72]
    6fc8:	ldp	x21, x22, [sp, #32]
    6fcc:	ldr	x23, [sp, #48]
    6fd0:	ldr	x20, [sp, #72]
    6fd4:	b	6870 <__asan_cplus_demangle_type+0x188>
    6fd8:	ldp	w0, w1, [x19, #40]
    6fdc:	cmp	w0, w1
    6fe0:	b.ge	7204 <__asan_cplus_demangle_type+0xb1c>  // b.tcont
    6fe4:	adrp	x1, 188 <d_count_templates_scopes+0x98>
    6fe8:	mov	w2, #0x18                  	// #24
    6fec:	ldr	x4, [x19, #32]
    6ff0:	smull	x2, w0, w2
    6ff4:	ldr	x1, [x1]
    6ff8:	add	w0, w0, #0x1
    6ffc:	ldr	w3, [x19, #72]
    7000:	add	x20, x4, x2
    7004:	add	x1, x1, #0x3e0
    7008:	mov	w5, #0x27                  	// #39
    700c:	b	6e6c <__asan_cplus_demangle_type+0x784>
    7010:	mov	x0, x19
    7014:	adrp	x1, 0 <d_make_comp>
    7018:	mov	w2, #0xe                   	// #14
    701c:	add	x1, x1, #0x0
    7020:	bl	61c0 <d_make_name>
    7024:	mov	x20, x0
    7028:	b	671c <__asan_cplus_demangle_type+0x34>
    702c:	ldp	w0, w1, [x19, #40]
    7030:	cmp	w0, w1
    7034:	b.ge	7204 <__asan_cplus_demangle_type+0xb1c>  // b.tcont
    7038:	mov	w2, #0x18                  	// #24
    703c:	adrp	x1, 188 <d_count_templates_scopes+0x98>
    7040:	ldr	x4, [x19, #32]
    7044:	smull	x2, w0, w2
    7048:	ldr	w3, [x19, #72]
    704c:	add	w0, w0, #0x1
    7050:	add	x20, x4, x2
    7054:	mov	w5, #0x27                  	// #39
    7058:	ldr	x1, [x1]
    705c:	str	wzr, [x20, #4]
    7060:	str	w0, [x19, #40]
    7064:	add	x1, x1, #0x3a0
    7068:	str	w5, [x4, x2]
    706c:	add	w0, w3, #0x4
    7070:	str	x1, [x20, #8]
    7074:	str	w0, [x19, #72]
    7078:	b	671c <__asan_cplus_demangle_type+0x34>
    707c:	ldp	w0, w1, [x19, #40]
    7080:	cmp	w0, w1
    7084:	b.ge	7204 <__asan_cplus_demangle_type+0xb1c>  // b.tcont
    7088:	mov	w2, #0x18                  	// #24
    708c:	adrp	x1, 188 <d_count_templates_scopes+0x98>
    7090:	ldr	x4, [x19, #32]
    7094:	smull	x2, w0, w2
    7098:	ldr	w3, [x19, #72]
    709c:	add	w0, w0, #0x1
    70a0:	add	x20, x4, x2
    70a4:	mov	w5, #0x27                  	// #39
    70a8:	ldr	x1, [x1]
    70ac:	str	wzr, [x20, #4]
    70b0:	str	w0, [x19, #40]
    70b4:	add	x1, x1, #0x420
    70b8:	str	w5, [x4, x2]
    70bc:	add	w0, w3, #0x11
    70c0:	str	x1, [x20, #8]
    70c4:	str	w0, [x19, #72]
    70c8:	b	671c <__asan_cplus_demangle_type+0x34>
    70cc:	ldp	w0, w1, [x19, #40]
    70d0:	cmp	w0, w1
    70d4:	b.ge	7204 <__asan_cplus_demangle_type+0xb1c>  // b.tcont
    70d8:	mov	w2, #0x18                  	// #24
    70dc:	adrp	x1, 188 <d_count_templates_scopes+0x98>
    70e0:	ldr	x4, [x19, #32]
    70e4:	smull	x2, w0, w2
    70e8:	ldr	w3, [x19, #72]
    70ec:	add	w0, w0, #0x1
    70f0:	add	x20, x4, x2
    70f4:	mov	w5, #0x27                  	// #39
    70f8:	ldr	x1, [x1]
    70fc:	str	wzr, [x20, #4]
    7100:	str	w0, [x19, #40]
    7104:	add	x1, x1, #0x380
    7108:	str	w5, [x4, x2]
    710c:	add	w0, w3, #0xa
    7110:	str	x1, [x20, #8]
    7114:	str	w0, [x19, #72]
    7118:	b	671c <__asan_cplus_demangle_type+0x34>
    711c:	ldp	w0, w1, [x19, #40]
    7120:	cmp	w0, w1
    7124:	b.ge	7204 <__asan_cplus_demangle_type+0xb1c>  // b.tcont
    7128:	mov	w2, #0x18                  	// #24
    712c:	adrp	x1, 188 <d_count_templates_scopes+0x98>
    7130:	ldr	x4, [x19, #32]
    7134:	smull	x2, w0, w2
    7138:	ldr	w3, [x19, #72]
    713c:	add	w0, w0, #0x1
    7140:	add	x20, x4, x2
    7144:	mov	w5, #0x27                  	// #39
    7148:	ldr	x1, [x1]
    714c:	str	wzr, [x20, #4]
    7150:	str	w0, [x19, #40]
    7154:	add	x1, x1, #0x3c0
    7158:	str	w5, [x4, x2]
    715c:	add	w0, w3, #0x7
    7160:	str	x1, [x20, #8]
    7164:	str	w0, [x19, #72]
    7168:	b	671c <__asan_cplus_demangle_type+0x34>
    716c:	ldr	x2, [sp, #72]
    7170:	cbz	x2, 71e4 <__asan_cplus_demangle_type+0xafc>
    7174:	ldp	w4, w1, [x19, #56]
    7178:	cmp	w4, w1
    717c:	b.ge	71e4 <__asan_cplus_demangle_type+0xafc>  // b.tcont
    7180:	ldr	x6, [x19, #48]
    7184:	add	w5, w4, #0x1
    7188:	mov	x3, x0
    718c:	mov	w1, #0x4                   	// #4
    7190:	mov	x0, x19
    7194:	str	x2, [x6, w4, sxtw #3]
    7198:	str	w5, [x19, #56]
    719c:	bl	0 <d_make_comp>
    71a0:	mov	x20, x0
    71a4:	str	x0, [sp, #72]
    71a8:	ldp	x21, x22, [sp, #32]
    71ac:	ldr	x23, [sp, #48]
    71b0:	b	6870 <__asan_cplus_demangle_type+0x188>
    71b4:	stp	x21, x22, [sp, #32]
    71b8:	add	x0, x5, #0x3
    71bc:	ldr	w21, [x19, #76]
    71c0:	mov	w1, #0x1                   	// #1
    71c4:	str	x0, [x19, #24]
    71c8:	str	w1, [x19, #76]
    71cc:	mov	x0, x19
    71d0:	bl	8340 <d_expression_1>
    71d4:	mov	x20, x0
    71d8:	str	w21, [x19, #76]
    71dc:	ldp	x21, x22, [sp, #32]
    71e0:	b	6ca0 <__asan_cplus_demangle_type+0x5b8>
    71e4:	ldp	x21, x22, [sp, #32]
    71e8:	ldr	x23, [sp, #48]
    71ec:	b	6718 <__asan_cplus_demangle_type+0x30>
    71f0:	mov	x0, #0x0                   	// #0
    71f4:	stp	x21, x22, [sp, #32]
    71f8:	str	x23, [sp, #48]
    71fc:	str	wzr, [x0]
    7200:	brk	#0x3e8
    7204:	mov	x0, #0x0                   	// #0
    7208:	str	xzr, [sp, #72]
    720c:	stp	x21, x22, [sp, #32]
    7210:	str	x23, [sp, #48]
    7214:	ldr	x0, [x0, #8]
    7218:	brk	#0x3e8
    721c:	nop

0000000000007220 <d_parmlist>:
    7220:	stp	x29, x30, [sp, #-64]!
    7224:	mov	x29, sp
    7228:	stp	x19, x20, [sp, #16]
    722c:	mov	x19, x0
    7230:	mov	w0, #0x2e                  	// #46
    7234:	str	xzr, [sp, #56]
    7238:	ldr	x2, [x19, #24]
    723c:	ldrb	w1, [x2]
    7240:	cmp	w1, #0x45
    7244:	ccmp	w1, #0x0, #0x4, ne  // ne = any
    7248:	ccmp	w1, w0, #0x4, ne  // ne = any
    724c:	b.eq	72e0 <d_parmlist+0xc0>  // b.none
    7250:	add	x20, sp, #0x38
    7254:	stp	x21, x22, [sp, #32]
    7258:	mov	w22, w0
    725c:	mov	w21, #0x4f                  	// #79
    7260:	cmp	w1, #0x52
    7264:	mov	x0, x19
    7268:	ccmp	w1, w21, #0x4, ne  // ne = any
    726c:	b.ne	727c <d_parmlist+0x5c>  // b.any
    7270:	ldrb	w1, [x2, #1]
    7274:	cmp	w1, #0x45
    7278:	b.eq	72bc <d_parmlist+0x9c>  // b.none
    727c:	bl	66e8 <__asan_cplus_demangle_type>
    7280:	mov	x2, x0
    7284:	mov	x3, #0x0                   	// #0
    7288:	mov	x0, x19
    728c:	mov	w1, #0x2e                  	// #46
    7290:	cbz	x2, 72dc <d_parmlist+0xbc>
    7294:	bl	0 <d_make_comp>
    7298:	str	x0, [x20]
    729c:	add	x20, x0, #0x10
    72a0:	cbz	x0, 72dc <d_parmlist+0xbc>
    72a4:	ldr	x2, [x19, #24]
    72a8:	ldrb	w1, [x2]
    72ac:	cmp	w1, #0x45
    72b0:	ccmp	w1, #0x0, #0x4, ne  // ne = any
    72b4:	ccmp	w1, w22, #0x4, ne  // ne = any
    72b8:	b.ne	7260 <d_parmlist+0x40>  // b.any
    72bc:	ldr	x0, [sp, #56]
    72c0:	cbz	x0, 72dc <d_parmlist+0xbc>
    72c4:	ldr	x1, [x0, #16]
    72c8:	cbz	x1, 72f0 <d_parmlist+0xd0>
    72cc:	ldp	x21, x22, [sp, #32]
    72d0:	ldp	x19, x20, [sp, #16]
    72d4:	ldp	x29, x30, [sp], #64
    72d8:	ret
    72dc:	ldp	x21, x22, [sp, #32]
    72e0:	mov	x0, #0x0                   	// #0
    72e4:	ldp	x19, x20, [sp, #16]
    72e8:	ldp	x29, x30, [sp], #64
    72ec:	ret
    72f0:	ldr	x1, [x0, #8]
    72f4:	ldr	w2, [x1]
    72f8:	cmp	w2, #0x27
    72fc:	b.ne	72cc <d_parmlist+0xac>  // b.any
    7300:	ldr	x1, [x1, #8]
    7304:	ldr	w2, [x1, #28]
    7308:	cmp	w2, #0x9
    730c:	b.ne	72cc <d_parmlist+0xac>  // b.any
    7310:	ldr	w2, [x1, #8]
    7314:	ldr	w1, [x19, #72]
    7318:	ldp	x21, x22, [sp, #32]
    731c:	sub	w1, w1, w2
    7320:	str	w1, [x19, #72]
    7324:	str	xzr, [x0, #8]
    7328:	b	72d0 <d_parmlist+0xb0>
    732c:	nop

0000000000007330 <d_operator_name>:
    7330:	stp	x29, x30, [sp, #-48]!
    7334:	mov	x29, sp
    7338:	ldr	x1, [x0, #24]
    733c:	stp	x19, x20, [sp, #16]
    7340:	mov	x19, x0
    7344:	ldrb	w10, [x1]
    7348:	cbz	w10, 7414 <d_operator_name+0xe4>
    734c:	add	x2, x1, #0x1
    7350:	str	x2, [x0, #24]
    7354:	ldrb	w10, [x1, #1]
    7358:	ldrb	w8, [x1]
    735c:	cbnz	w10, 741c <d_operator_name+0xec>
    7360:	adrp	x5, 5c8 <d_discriminator+0x18>
    7364:	mov	w4, #0x43                  	// #67
    7368:	mov	w2, #0x0                   	// #0
    736c:	mov	w7, #0x18                  	// #24
    7370:	ldr	x5, [x5]
    7374:	nop
    7378:	sub	w1, w4, w2
    737c:	add	w1, w1, w1, lsr #31
    7380:	add	w1, w2, w1, asr #1
    7384:	smull	x3, w1, w7
    7388:	add	x9, x3, x5
    738c:	ldr	x3, [x3, x5]
    7390:	ldrb	w6, [x3]
    7394:	cmp	w6, w8
    7398:	b.eq	73c0 <d_operator_name+0x90>  // b.none
    739c:	b.ls	740c <d_operator_name+0xdc>  // b.plast
    73a0:	mov	w4, w1
    73a4:	cmp	w2, w4
    73a8:	b.ne	7378 <d_operator_name+0x48>  // b.any
    73ac:	mov	x20, #0x0                   	// #0
    73b0:	mov	x0, x20
    73b4:	ldp	x19, x20, [sp, #16]
    73b8:	ldp	x29, x30, [sp], #48
    73bc:	ret
    73c0:	ldrb	w3, [x3, #1]
    73c4:	cmp	w3, w10
    73c8:	b.ne	739c <d_operator_name+0x6c>  // b.any
    73cc:	ldp	w0, w1, [x19, #40]
    73d0:	cmp	w0, w1
    73d4:	b.ge	73ac <d_operator_name+0x7c>  // b.tcont
    73d8:	ldr	x1, [x19, #32]
    73dc:	smull	x7, w0, w7
    73e0:	add	w0, w0, #0x1
    73e4:	mov	w2, #0x32                  	// #50
    73e8:	add	x20, x1, x7
    73ec:	str	wzr, [x20, #4]
    73f0:	str	w0, [x19, #40]
    73f4:	mov	x0, x20
    73f8:	str	w2, [x1, x7]
    73fc:	str	x9, [x20, #8]
    7400:	ldp	x19, x20, [sp, #16]
    7404:	ldp	x29, x30, [sp], #48
    7408:	ret
    740c:	add	w2, w1, #0x1
    7410:	b	73a4 <d_operator_name+0x74>
    7414:	mov	w8, #0x0                   	// #0
    7418:	b	7360 <d_operator_name+0x30>
    741c:	str	x21, [sp, #32]
    7420:	add	x2, x1, #0x2
    7424:	str	x2, [x0, #24]
    7428:	cmp	w8, #0x76
    742c:	ldrb	w10, [x1, #1]
    7430:	b.ne	744c <d_operator_name+0x11c>  // b.any
    7434:	sub	w21, w10, #0x30
    7438:	and	w1, w21, #0xff
    743c:	cmp	w1, #0x9
    7440:	b.ls	74a8 <d_operator_name+0x178>  // b.plast
    7444:	ldr	x21, [sp, #32]
    7448:	b	7360 <d_operator_name+0x30>
    744c:	cmp	w10, #0x76
    7450:	mov	w1, #0x63                  	// #99
    7454:	ccmp	w8, w1, #0x0, eq  // eq = none
    7458:	b.ne	7444 <d_operator_name+0x114>  // b.any
    745c:	ldp	w1, w21, [x0, #76]
    7460:	cmp	w1, #0x0
    7464:	cset	w1, eq  // eq = none
    7468:	str	w1, [x0, #80]
    746c:	bl	66e8 <__asan_cplus_demangle_type>
    7470:	mov	x2, x0
    7474:	ldr	w1, [x19, #80]
    7478:	mov	x3, #0x0                   	// #0
    747c:	cbz	w1, 74ec <d_operator_name+0x1bc>
    7480:	mov	x0, x19
    7484:	mov	w1, #0x35                  	// #53
    7488:	bl	0 <d_make_comp>
    748c:	mov	x20, x0
    7490:	str	w21, [x19, #80]
    7494:	mov	x0, x20
    7498:	ldp	x19, x20, [sp, #16]
    749c:	ldr	x21, [sp, #32]
    74a0:	ldp	x29, x30, [sp], #48
    74a4:	ret
    74a8:	bl	6230 <d_source_name>
    74ac:	mov	x2, x0
    74b0:	ldp	w20, w0, [x19, #40]
    74b4:	cmp	w20, w0
    74b8:	b.ge	7500 <d_operator_name+0x1d0>  // b.tcont
    74bc:	ldr	x1, [x19, #32]
    74c0:	mov	w3, #0x18                  	// #24
    74c4:	add	w0, w20, #0x1
    74c8:	smaddl	x20, w20, w3, x1
    74cc:	str	wzr, [x20, #4]
    74d0:	str	w0, [x19, #40]
    74d4:	mov	w1, w21
    74d8:	mov	x0, x20
    74dc:	bl	6638 <__asan_cplus_demangle_fill_extended_operator>
    74e0:	ldr	x21, [sp, #32]
    74e4:	cbnz	w0, 73b0 <d_operator_name+0x80>
    74e8:	b	73ac <d_operator_name+0x7c>
    74ec:	mov	x0, x19
    74f0:	mov	w1, #0x34                  	// #52
    74f4:	bl	0 <d_make_comp>
    74f8:	mov	x20, x0
    74fc:	b	7490 <d_operator_name+0x160>
    7500:	mov	x20, #0x0                   	// #0
    7504:	b	74d4 <d_operator_name+0x1a4>

0000000000007508 <d_unqualified_name>:
    7508:	stp	x29, x30, [sp, #-48]!
    750c:	mov	x29, sp
    7510:	ldr	x4, [x0, #24]
    7514:	stp	x19, x20, [sp, #16]
    7518:	mov	x19, x0
    751c:	ldrb	w3, [x4]
    7520:	sub	w1, w3, #0x30
    7524:	and	w1, w1, #0xff
    7528:	cmp	w1, #0x9
    752c:	b.ls	763c <d_unqualified_name+0x134>  // b.plast
    7530:	sub	w1, w3, #0x61
    7534:	and	w1, w1, #0xff
    7538:	cmp	w1, #0x19
    753c:	b.hi	7584 <d_unqualified_name+0x7c>  // b.pmore
    7540:	cmp	w3, #0x6f
    7544:	b.eq	769c <d_unqualified_name+0x194>  // b.none
    7548:	mov	x0, x19
    754c:	bl	7330 <d_operator_name>
    7550:	mov	x20, x0
    7554:	cbz	x0, 7564 <d_unqualified_name+0x5c>
    7558:	ldr	w0, [x0]
    755c:	cmp	w0, #0x32
    7560:	b.eq	7740 <d_unqualified_name+0x238>  // b.none
    7564:	ldr	x0, [x19, #24]
    7568:	ldrb	w1, [x0]
    756c:	cmp	w1, #0x42
    7570:	b.eq	7654 <d_unqualified_name+0x14c>  // b.none
    7574:	mov	x0, x20
    7578:	ldp	x19, x20, [sp, #16]
    757c:	ldp	x29, x30, [sp], #48
    7580:	ret
    7584:	sub	w1, w3, #0x43
    7588:	and	w1, w1, #0xff
    758c:	cmp	w1, #0x1
    7590:	b.ls	76b4 <d_unqualified_name+0x1ac>  // b.plast
    7594:	cmp	w3, #0x4c
    7598:	b.eq	7668 <d_unqualified_name+0x160>  // b.none
    759c:	cmp	w3, #0x55
    75a0:	b.ne	7688 <d_unqualified_name+0x180>  // b.any
    75a4:	ldrb	w1, [x4, #1]
    75a8:	cmp	w1, #0x6c
    75ac:	b.eq	77c8 <d_unqualified_name+0x2c0>  // b.none
    75b0:	cmp	w1, #0x74
    75b4:	b.ne	7688 <d_unqualified_name+0x180>  // b.any
    75b8:	add	x1, x4, #0x1
    75bc:	str	x1, [x0, #24]
    75c0:	mov	x20, #0x0                   	// #0
    75c4:	ldrb	w1, [x4, #1]
    75c8:	cmp	w1, #0x74
    75cc:	b.ne	756c <d_unqualified_name+0x64>  // b.any
    75d0:	add	x4, x4, #0x2
    75d4:	str	x4, [x0, #24]
    75d8:	bl	3b8 <d_compact_number>
    75dc:	tbnz	w0, #31, 7564 <d_unqualified_name+0x5c>
    75e0:	ldp	w1, w2, [x19, #40]
    75e4:	cmp	w1, w2
    75e8:	b.ge	7730 <d_unqualified_name+0x228>  // b.tcont
    75ec:	ldp	x7, x3, [x19, #24]
    75f0:	mov	w2, #0x18                  	// #24
    75f4:	add	w6, w1, #0x1
    75f8:	mov	w4, #0x48                  	// #72
    75fc:	smull	x1, w1, w2
    7600:	sxtw	x0, w0
    7604:	ldp	w2, w5, [x19, #56]
    7608:	add	x20, x3, x1
    760c:	cmp	w2, w5
    7610:	str	wzr, [x20, #4]
    7614:	str	w6, [x19, #40]
    7618:	str	w4, [x3, x1]
    761c:	str	x0, [x20, #8]
    7620:	b.ge	7964 <d_unqualified_name+0x45c>  // b.tcont
    7624:	ldr	x1, [x19, #48]
    7628:	add	w0, w2, #0x1
    762c:	str	x20, [x1, w2, sxtw #3]
    7630:	str	w0, [x19, #56]
    7634:	ldrb	w1, [x7]
    7638:	b	756c <d_unqualified_name+0x64>
    763c:	bl	6230 <d_source_name>
    7640:	mov	x20, x0
    7644:	ldr	x1, [x19, #24]
    7648:	ldrb	w1, [x1]
    764c:	cmp	w1, #0x42
    7650:	b.ne	7574 <d_unqualified_name+0x6c>  // b.any
    7654:	mov	x1, x20
    7658:	mov	x0, x19
    765c:	ldp	x19, x20, [sp, #16]
    7660:	ldp	x29, x30, [sp], #48
    7664:	b	6350 <d_abi_tags>
    7668:	add	x4, x4, #0x1
    766c:	str	x4, [x0, #24]
    7670:	bl	6230 <d_source_name>
    7674:	mov	x20, x0
    7678:	cbz	x0, 7688 <d_unqualified_name+0x180>
    767c:	mov	x0, x19
    7680:	bl	5b0 <d_discriminator>
    7684:	cbnz	w0, 7564 <d_unqualified_name+0x5c>
    7688:	mov	x20, #0x0                   	// #0
    768c:	mov	x0, x20
    7690:	ldp	x19, x20, [sp, #16]
    7694:	ldp	x29, x30, [sp], #48
    7698:	ret
    769c:	ldrb	w0, [x4, #1]
    76a0:	cmp	w0, #0x6e
    76a4:	b.ne	7548 <d_unqualified_name+0x40>  // b.any
    76a8:	add	x4, x4, #0x2
    76ac:	str	x4, [x19, #24]
    76b0:	b	7548 <d_unqualified_name+0x40>
    76b4:	ldr	x2, [x0, #64]
    76b8:	cbz	x2, 76cc <d_unqualified_name+0x1c4>
    76bc:	ldr	w0, [x2]
    76c0:	cbz	w0, 7798 <d_unqualified_name+0x290>
    76c4:	cmp	w0, #0x18
    76c8:	b.eq	7798 <d_unqualified_name+0x290>  // b.none
    76cc:	cmp	w3, #0x43
    76d0:	b.eq	7878 <d_unqualified_name+0x370>  // b.none
    76d4:	ldrb	w0, [x4, #1]
    76d8:	cmp	w0, #0x32
    76dc:	b.eq	795c <d_unqualified_name+0x454>  // b.none
    76e0:	b.hi	78e8 <d_unqualified_name+0x3e0>  // b.pmore
    76e4:	cmp	w0, #0x30
    76e8:	b.eq	7908 <d_unqualified_name+0x400>  // b.none
    76ec:	cmp	w0, #0x31
    76f0:	mov	w1, #0x2                   	// #2
    76f4:	b.ne	78fc <d_unqualified_name+0x3f4>  // b.any
    76f8:	ldp	w20, w0, [x19, #40]
    76fc:	add	x4, x4, #0x2
    7700:	str	x4, [x19, #24]
    7704:	cmp	w20, w0
    7708:	b.ge	7970 <d_unqualified_name+0x468>  // b.tcont
    770c:	ldr	x3, [x19, #32]
    7710:	mov	w4, #0x18                  	// #24
    7714:	add	w0, w20, #0x1
    7718:	smaddl	x20, w20, w4, x3
    771c:	str	wzr, [x20, #4]
    7720:	str	w0, [x19, #40]
    7724:	mov	x0, x20
    7728:	bl	66a8 <__asan_cplus_demangle_fill_dtor>
    772c:	cbnz	w0, 7564 <d_unqualified_name+0x5c>
    7730:	ldr	x0, [x19, #24]
    7734:	mov	x20, #0x0                   	// #0
    7738:	ldrb	w1, [x0]
    773c:	b	756c <d_unqualified_name+0x64>
    7740:	ldr	x3, [x20, #8]
    7744:	adrp	x1, 0 <d_make_comp>
    7748:	ldr	w2, [x19, #72]
    774c:	add	x1, x1, #0x0
    7750:	ldr	x0, [x3]
    7754:	add	w2, w2, #0x7
    7758:	ldr	w3, [x3, #16]
    775c:	add	w2, w2, w3
    7760:	str	w2, [x19, #72]
    7764:	bl	0 <__asan_internal_strcmp>
    7768:	cbnz	w0, 7564 <d_unqualified_name+0x5c>
    776c:	mov	x0, x19
    7770:	bl	6230 <d_source_name>
    7774:	mov	x2, x20
    7778:	mov	x3, x0
    777c:	mov	w1, #0x37                  	// #55
    7780:	mov	x0, x19
    7784:	bl	0 <d_make_comp>
    7788:	mov	x20, x0
    778c:	ldr	x1, [x19, #24]
    7790:	ldrb	w1, [x1]
    7794:	b	756c <d_unqualified_name+0x64>
    7798:	ldr	w1, [x2, #16]
    779c:	ldr	w0, [x19, #72]
    77a0:	add	w0, w0, w1
    77a4:	str	w0, [x19, #72]
    77a8:	ldrb	w1, [x4]
    77ac:	cmp	w1, #0x43
    77b0:	mov	w3, w1
    77b4:	b.eq	7878 <d_unqualified_name+0x370>  // b.none
    77b8:	cmp	w1, #0x44
    77bc:	b.eq	76d4 <d_unqualified_name+0x1cc>  // b.none
    77c0:	mov	x20, #0x0                   	// #0
    77c4:	b	756c <d_unqualified_name+0x64>
    77c8:	add	x1, x4, #0x1
    77cc:	str	x1, [x0, #24]
    77d0:	mov	x20, #0x0                   	// #0
    77d4:	ldrb	w1, [x4, #1]
    77d8:	cmp	w1, #0x6c
    77dc:	b.ne	756c <d_unqualified_name+0x64>  // b.any
    77e0:	add	x4, x4, #0x2
    77e4:	str	x4, [x0, #24]
    77e8:	bl	7220 <d_parmlist>
    77ec:	mov	x11, x0
    77f0:	ldr	x0, [x19, #24]
    77f4:	ldrb	w1, [x0]
    77f8:	cbz	x11, 756c <d_unqualified_name+0x64>
    77fc:	cmp	w1, #0x45
    7800:	b.ne	756c <d_unqualified_name+0x64>  // b.any
    7804:	add	x0, x0, #0x1
    7808:	str	x0, [x19, #24]
    780c:	mov	x0, x19
    7810:	bl	3b8 <d_compact_number>
    7814:	tbnz	w0, #31, 7730 <d_unqualified_name+0x228>
    7818:	ldp	w1, w2, [x19, #40]
    781c:	ldr	x4, [x19, #24]
    7820:	cmp	w1, w2
    7824:	b.ge	7978 <d_unqualified_name+0x470>  // b.tcont
    7828:	mov	w2, #0x18                  	// #24
    782c:	add	w6, w1, #0x1
    7830:	ldr	x3, [x19, #32]
    7834:	smull	x1, w1, w2
    7838:	ldp	w2, w7, [x19, #56]
    783c:	add	x20, x3, x1
    7840:	mov	w5, #0x46                  	// #70
    7844:	cmp	w2, w7
    7848:	str	wzr, [x20, #4]
    784c:	str	w6, [x19, #40]
    7850:	str	w5, [x3, x1]
    7854:	str	x11, [x20, #8]
    7858:	str	w0, [x20, #16]
    785c:	b.ge	7978 <d_unqualified_name+0x470>  // b.tcont
    7860:	ldr	x1, [x19, #48]
    7864:	add	w0, w2, #0x1
    7868:	str	x20, [x1, w2, sxtw #3]
    786c:	str	w0, [x19, #56]
    7870:	ldrb	w1, [x4]
    7874:	b	756c <d_unqualified_name+0x64>
    7878:	str	x21, [sp, #32]
    787c:	ldrb	w0, [x4, #1]
    7880:	cmp	w0, #0x49
    7884:	b.eq	7918 <d_unqualified_name+0x410>  // b.none
    7888:	sub	w1, w0, #0x31
    788c:	and	w1, w1, #0xff
    7890:	cmp	w1, #0x4
    7894:	b.hi	7950 <d_unqualified_name+0x448>  // b.pmore
    7898:	sub	w21, w0, #0x30
    789c:	add	x4, x4, #0x2
    78a0:	str	x4, [x19, #24]
    78a4:	ldp	w20, w0, [x19, #40]
    78a8:	cmp	w20, w0
    78ac:	b.ge	7998 <d_unqualified_name+0x490>  // b.tcont
    78b0:	ldr	x1, [x19, #32]
    78b4:	mov	w3, #0x18                  	// #24
    78b8:	add	w0, w20, #0x1
    78bc:	smaddl	x20, w20, w3, x1
    78c0:	str	wzr, [x20, #4]
    78c4:	str	w0, [x19, #40]
    78c8:	mov	w1, w21
    78cc:	mov	x0, x20
    78d0:	bl	6668 <__asan_cplus_demangle_fill_ctor>
    78d4:	cbz	w0, 7984 <d_unqualified_name+0x47c>
    78d8:	ldr	x0, [x19, #24]
    78dc:	ldr	x21, [sp, #32]
    78e0:	ldrb	w1, [x0]
    78e4:	b	756c <d_unqualified_name+0x64>
    78e8:	cmp	w0, #0x34
    78ec:	b.eq	7910 <d_unqualified_name+0x408>  // b.none
    78f0:	cmp	w0, #0x35
    78f4:	mov	w1, #0x5                   	// #5
    78f8:	b.eq	76f8 <d_unqualified_name+0x1f0>  // b.none
    78fc:	mov	w1, w3
    7900:	mov	x20, #0x0                   	// #0
    7904:	b	756c <d_unqualified_name+0x64>
    7908:	mov	w1, #0x1                   	// #1
    790c:	b	76f8 <d_unqualified_name+0x1f0>
    7910:	mov	w1, #0x4                   	// #4
    7914:	b	76f8 <d_unqualified_name+0x1f0>
    7918:	add	x0, x4, #0x1
    791c:	str	x0, [x19, #24]
    7920:	ldrb	w0, [x4, #2]
    7924:	sub	w1, w0, #0x31
    7928:	and	w1, w1, #0xff
    792c:	cmp	w1, #0x4
    7930:	b.hi	79a0 <d_unqualified_name+0x498>  // b.pmore
    7934:	add	x4, x4, #0x3
    7938:	str	x4, [x19, #24]
    793c:	sub	w21, w0, #0x30
    7940:	mov	x0, x19
    7944:	bl	66e8 <__asan_cplus_demangle_type>
    7948:	ldr	x2, [x19, #64]
    794c:	b	78a4 <d_unqualified_name+0x39c>
    7950:	mov	x20, #0x0                   	// #0
    7954:	ldr	x21, [sp, #32]
    7958:	b	768c <d_unqualified_name+0x184>
    795c:	mov	w1, #0x3                   	// #3
    7960:	b	76f8 <d_unqualified_name+0x1f0>
    7964:	ldrb	w1, [x7]
    7968:	mov	x20, #0x0                   	// #0
    796c:	b	756c <d_unqualified_name+0x64>
    7970:	mov	x20, #0x0                   	// #0
    7974:	b	7724 <d_unqualified_name+0x21c>
    7978:	ldrb	w1, [x4]
    797c:	mov	x20, #0x0                   	// #0
    7980:	b	756c <d_unqualified_name+0x64>
    7984:	ldr	x0, [x19, #24]
    7988:	mov	x20, #0x0                   	// #0
    798c:	ldr	x21, [sp, #32]
    7990:	ldrb	w1, [x0]
    7994:	b	756c <d_unqualified_name+0x64>
    7998:	mov	x20, #0x0                   	// #0
    799c:	b	78c8 <d_unqualified_name+0x3c0>
    79a0:	ldrb	w1, [x4, #1]
    79a4:	mov	x20, #0x0                   	// #0
    79a8:	ldr	x21, [sp, #32]
    79ac:	b	756c <d_unqualified_name+0x64>

00000000000079b0 <d_bare_function_type>:
    79b0:	stp	x29, x30, [sp, #-32]!
    79b4:	mov	x29, sp
    79b8:	stp	x19, x20, [sp, #16]
    79bc:	mov	x19, x0
    79c0:	ldr	x0, [x0, #24]
    79c4:	ldrb	w2, [x0]
    79c8:	cmp	w2, #0x4a
    79cc:	b.eq	7a30 <d_bare_function_type+0x80>  // b.none
    79d0:	cbz	w1, 7a0c <d_bare_function_type+0x5c>
    79d4:	mov	x0, x19
    79d8:	bl	66e8 <__asan_cplus_demangle_type>
    79dc:	mov	x20, x0
    79e0:	cbz	x0, 7a20 <d_bare_function_type+0x70>
    79e4:	mov	x0, x19
    79e8:	bl	7220 <d_parmlist>
    79ec:	mov	x3, x0
    79f0:	cbz	x0, 7a20 <d_bare_function_type+0x70>
    79f4:	mov	x2, x20
    79f8:	mov	x0, x19
    79fc:	ldp	x19, x20, [sp, #16]
    7a00:	mov	w1, #0x29                  	// #41
    7a04:	ldp	x29, x30, [sp], #32
    7a08:	b	0 <d_make_comp>
    7a0c:	mov	x0, x19
    7a10:	mov	x20, #0x0                   	// #0
    7a14:	bl	7220 <d_parmlist>
    7a18:	mov	x3, x0
    7a1c:	cbnz	x0, 79f4 <d_bare_function_type+0x44>
    7a20:	mov	x0, #0x0                   	// #0
    7a24:	ldp	x19, x20, [sp, #16]
    7a28:	ldp	x29, x30, [sp], #32
    7a2c:	ret
    7a30:	add	x0, x0, #0x1
    7a34:	str	x0, [x19, #24]
    7a38:	b	79d4 <d_bare_function_type+0x24>
    7a3c:	nop

0000000000007a40 <d_function_type>:
    7a40:	stp	x29, x30, [sp, #-32]!
    7a44:	mov	x29, sp
    7a48:	str	x19, [sp, #16]
    7a4c:	mov	x19, x0
    7a50:	ldr	w0, [x0, #16]
    7a54:	tbnz	w0, #18, 7a90 <d_function_type+0x50>
    7a58:	ldr	w1, [x19, #84]
    7a5c:	cmp	w1, #0x800
    7a60:	b.hi	7aa0 <d_function_type+0x60>  // b.pmore
    7a64:	ldr	x2, [x19, #24]
    7a68:	add	w0, w1, #0x1
    7a6c:	str	w0, [x19, #84]
    7a70:	mov	x0, #0x0                   	// #0
    7a74:	ldrb	w3, [x2]
    7a78:	cmp	w3, #0x46
    7a7c:	b.eq	7ab0 <d_function_type+0x70>  // b.none
    7a80:	str	w1, [x19, #84]
    7a84:	ldr	x19, [sp, #16]
    7a88:	ldp	x29, x30, [sp], #32
    7a8c:	ret
    7a90:	ldr	x2, [x19, #24]
    7a94:	ldrb	w0, [x2]
    7a98:	cmp	w0, #0x46
    7a9c:	b.eq	7ab0 <d_function_type+0x70>  // b.none
    7aa0:	mov	x0, #0x0                   	// #0
    7aa4:	ldr	x19, [sp, #16]
    7aa8:	ldp	x29, x30, [sp], #32
    7aac:	ret
    7ab0:	add	x4, x2, #0x1
    7ab4:	str	x4, [x19, #24]
    7ab8:	add	x3, x2, #0x2
    7abc:	mov	w1, #0x1                   	// #1
    7ac0:	ldrb	w2, [x2, #1]
    7ac4:	mov	x0, x19
    7ac8:	cmp	w2, #0x59
    7acc:	csel	x2, x3, x4, eq  // eq = none
    7ad0:	str	x2, [x19, #24]
    7ad4:	bl	79b0 <d_bare_function_type>
    7ad8:	mov	x1, x0
    7adc:	mov	x0, x19
    7ae0:	bl	88 <d_ref_qualifier>
    7ae4:	ldr	x1, [x19, #24]
    7ae8:	ldrb	w2, [x1]
    7aec:	cmp	w2, #0x45
    7af0:	b.eq	7b10 <d_function_type+0xd0>  // b.none
    7af4:	mov	x0, #0x0                   	// #0
    7af8:	ldr	w1, [x19, #16]
    7afc:	tbnz	w1, #18, 7aa4 <d_function_type+0x64>
    7b00:	ldr	w1, [x19, #84]
    7b04:	sub	w1, w1, #0x1
    7b08:	str	w1, [x19, #84]
    7b0c:	b	7a84 <d_function_type+0x44>
    7b10:	add	x1, x1, #0x1
    7b14:	str	x1, [x19, #24]
    7b18:	b	7af8 <d_function_type+0xb8>
    7b1c:	nop

0000000000007b20 <d_exprlist>:
    7b20:	stp	x29, x30, [sp, #-112]!
    7b24:	mov	x29, sp
    7b28:	ldr	x2, [x0, #24]
    7b2c:	stp	x19, x20, [sp, #16]
    7b30:	mov	x19, x0
    7b34:	str	xzr, [sp, #104]
    7b38:	ldrb	w3, [x2]
    7b3c:	cmp	w3, w1, uxtb
    7b40:	b.eq	81bc <d_exprlist+0x69c>  // b.none
    7b44:	stp	x21, x22, [sp, #32]
    7b48:	add	x21, sp, #0x68
    7b4c:	mov	w22, #0x1                   	// #1
    7b50:	stp	x23, x24, [sp, #48]
    7b54:	adrp	x24, 0 <d_make_comp>
    7b58:	and	w23, w1, #0xff
    7b5c:	add	x24, x24, #0x0
    7b60:	stp	x25, x26, [sp, #64]
    7b64:	adrp	x25, 0 <d_make_comp>
    7b68:	add	x25, x25, #0x0
    7b6c:	stp	x27, x28, [sp, #80]
    7b70:	ldr	w26, [x19, #76]
    7b74:	str	w22, [x19, #76]
    7b78:	ldrb	w0, [x2]
    7b7c:	cmp	w0, #0x4c
    7b80:	b.eq	7d24 <d_exprlist+0x204>  // b.none
    7b84:	cmp	w0, #0x54
    7b88:	b.eq	7db4 <d_exprlist+0x294>  // b.none
    7b8c:	cmp	w0, #0x73
    7b90:	b.eq	7ce4 <d_exprlist+0x1c4>  // b.none
    7b94:	cmp	w0, #0x66
    7b98:	b.ne	7bfc <d_exprlist+0xdc>  // b.any
    7b9c:	ldrb	w0, [x2, #1]
    7ba0:	cmp	w0, #0x70
    7ba4:	b.eq	7dc4 <d_exprlist+0x2a4>  // b.none
    7ba8:	mov	x0, x19
    7bac:	bl	7330 <d_operator_name>
    7bb0:	mov	x20, x0
    7bb4:	cbz	x0, 7bd8 <d_exprlist+0xb8>
    7bb8:	ldr	w0, [x0]
    7bbc:	cmp	w0, #0x32
    7bc0:	b.eq	7eb0 <d_exprlist+0x390>  // b.none
    7bc4:	cmp	w0, #0x33
    7bc8:	b.eq	7f44 <d_exprlist+0x424>  // b.none
    7bcc:	cmp	w0, #0x34
    7bd0:	b.eq	80b4 <d_exprlist+0x594>  // b.none
    7bd4:	mov	x20, #0x0                   	// #0
    7bd8:	str	w26, [x19, #76]
    7bdc:	mov	x0, x20
    7be0:	ldp	x19, x20, [sp, #16]
    7be4:	ldp	x21, x22, [sp, #32]
    7be8:	ldp	x23, x24, [sp, #48]
    7bec:	ldp	x25, x26, [sp, #64]
    7bf0:	ldp	x27, x28, [sp, #80]
    7bf4:	ldp	x29, x30, [sp], #112
    7bf8:	ret
    7bfc:	sub	w1, w0, #0x30
    7c00:	and	w1, w1, #0xff
    7c04:	cmp	w1, #0x9
    7c08:	b.hi	7d34 <d_exprlist+0x214>  // b.pmore
    7c0c:	mov	x0, x19
    7c10:	bl	7508 <d_unqualified_name>
    7c14:	mov	x20, x0
    7c18:	cbz	x0, 7bd8 <d_exprlist+0xb8>
    7c1c:	ldr	x0, [x19, #24]
    7c20:	ldrb	w1, [x0]
    7c24:	cmp	w1, #0x49
    7c28:	b.eq	7c8c <d_exprlist+0x16c>  // b.none
    7c2c:	str	w26, [x19, #76]
    7c30:	mov	x2, x20
    7c34:	mov	x0, x19
    7c38:	mov	x3, #0x0                   	// #0
    7c3c:	mov	w1, #0x2e                  	// #46
    7c40:	bl	0 <d_make_comp>
    7c44:	str	x0, [x21]
    7c48:	cbz	x0, 7cc0 <d_exprlist+0x1a0>
    7c4c:	ldr	x2, [x19, #24]
    7c50:	add	x21, x0, #0x10
    7c54:	ldrb	w0, [x2]
    7c58:	cmp	w0, w23
    7c5c:	b.ne	7b70 <d_exprlist+0x50>  // b.any
    7c60:	ldr	x20, [sp, #104]
    7c64:	add	x2, x2, #0x1
    7c68:	str	x2, [x19, #24]
    7c6c:	mov	x0, x20
    7c70:	ldp	x19, x20, [sp, #16]
    7c74:	ldp	x21, x22, [sp, #32]
    7c78:	ldp	x23, x24, [sp, #48]
    7c7c:	ldp	x25, x26, [sp, #64]
    7c80:	ldp	x27, x28, [sp, #80]
    7c84:	ldp	x29, x30, [sp], #112
    7c88:	ret
    7c8c:	add	x0, x0, #0x1
    7c90:	str	x0, [x19, #24]
    7c94:	mov	x0, x19
    7c98:	bl	8db0 <d_template_args_1>
    7c9c:	mov	x3, x0
    7ca0:	mov	x2, x20
    7ca4:	mov	x0, x19
    7ca8:	mov	w1, #0x4                   	// #4
    7cac:	bl	0 <d_make_comp>
    7cb0:	mov	x20, x0
    7cb4:	nop
    7cb8:	str	w26, [x19, #76]
    7cbc:	cbnz	x20, 7c30 <d_exprlist+0x110>
    7cc0:	mov	x20, #0x0                   	// #0
    7cc4:	mov	x0, x20
    7cc8:	ldp	x19, x20, [sp, #16]
    7ccc:	ldp	x21, x22, [sp, #32]
    7cd0:	ldp	x23, x24, [sp, #48]
    7cd4:	ldp	x25, x26, [sp, #64]
    7cd8:	ldp	x27, x28, [sp, #80]
    7cdc:	ldp	x29, x30, [sp], #112
    7ce0:	ret
    7ce4:	ldrb	w0, [x2, #1]
    7ce8:	cmp	w0, #0x72
    7cec:	b.eq	7e3c <d_exprlist+0x31c>  // b.none
    7cf0:	cmp	w0, #0x70
    7cf4:	b.ne	7ba8 <d_exprlist+0x88>  // b.any
    7cf8:	add	x2, x2, #0x2
    7cfc:	str	x2, [x19, #24]
    7d00:	mov	x0, x19
    7d04:	bl	8340 <d_expression_1>
    7d08:	mov	x2, x0
    7d0c:	mov	x3, #0x0                   	// #0
    7d10:	mov	x0, x19
    7d14:	mov	w1, #0x4b                  	// #75
    7d18:	bl	0 <d_make_comp>
    7d1c:	mov	x20, x0
    7d20:	b	7cb8 <d_exprlist+0x198>
    7d24:	mov	x0, x19
    7d28:	bl	9d78 <d_expr_primary>
    7d2c:	mov	x20, x0
    7d30:	b	7cb8 <d_exprlist+0x198>
    7d34:	cmp	w0, #0x6f
    7d38:	b.ne	7d54 <d_exprlist+0x234>  // b.any
    7d3c:	ldrb	w0, [x2, #1]
    7d40:	cmp	w0, #0x6e
    7d44:	b.ne	7ba8 <d_exprlist+0x88>  // b.any
    7d48:	add	x2, x2, #0x2
    7d4c:	str	x2, [x19, #24]
    7d50:	b	7c0c <d_exprlist+0xec>
    7d54:	cmp	w0, #0x69
    7d58:	mov	w1, #0x74                  	// #116
    7d5c:	ccmp	w0, w1, #0x4, ne  // ne = any
    7d60:	b.ne	7ba8 <d_exprlist+0x88>  // b.any
    7d64:	ldrb	w1, [x2, #1]
    7d68:	cmp	w1, #0x6c
    7d6c:	b.ne	7ba8 <d_exprlist+0x88>  // b.any
    7d70:	add	x1, x2, #0x2
    7d74:	str	x1, [x19, #24]
    7d78:	cmp	w0, #0x74
    7d7c:	mov	x20, #0x0                   	// #0
    7d80:	b.eq	80e0 <d_exprlist+0x5c0>  // b.none
    7d84:	ldrb	w0, [x1, #1]
    7d88:	cbz	w0, 7bd4 <d_exprlist+0xb4>
    7d8c:	mov	w1, #0x45                  	// #69
    7d90:	mov	x0, x19
    7d94:	bl	7b20 <d_exprlist>
    7d98:	mov	x3, x0
    7d9c:	mov	x2, x20
    7da0:	mov	x0, x19
    7da4:	mov	w1, #0x31                  	// #49
    7da8:	bl	0 <d_make_comp>
    7dac:	mov	x20, x0
    7db0:	b	7cb8 <d_exprlist+0x198>
    7db4:	mov	x0, x19
    7db8:	bl	430 <d_template_param>
    7dbc:	mov	x20, x0
    7dc0:	b	7cb8 <d_exprlist+0x198>
    7dc4:	add	x0, x2, #0x2
    7dc8:	str	x0, [x19, #24]
    7dcc:	ldrb	w0, [x2, #2]
    7dd0:	cmp	w0, #0x54
    7dd4:	b.eq	7e2c <d_exprlist+0x30c>  // b.none
    7dd8:	mov	x0, x19
    7ddc:	bl	3b8 <d_compact_number>
    7de0:	mvn	x1, x0
    7de4:	tst	x1, #0x7fffffff
    7de8:	b.eq	7bd4 <d_exprlist+0xb4>  // b.none
    7dec:	add	w0, w0, #0x1
    7df0:	ldp	w1, w2, [x19, #40]
    7df4:	cmp	w1, w2
    7df8:	b.ge	7bd4 <d_exprlist+0xb4>  // b.tcont
    7dfc:	mov	w3, #0x18                  	// #24
    7e00:	add	w4, w1, #0x1
    7e04:	ldr	x2, [x19, #32]
    7e08:	smull	x1, w1, w3
    7e0c:	mov	w3, #0x6                   	// #6
    7e10:	sxtw	x0, w0
    7e14:	add	x20, x2, x1
    7e18:	str	wzr, [x20, #4]
    7e1c:	str	w4, [x19, #40]
    7e20:	str	w3, [x2, x1]
    7e24:	str	x0, [x20, #8]
    7e28:	b	7c2c <d_exprlist+0x10c>
    7e2c:	add	x2, x2, #0x3
    7e30:	mov	w0, #0x0                   	// #0
    7e34:	str	x2, [x19, #24]
    7e38:	b	7df0 <d_exprlist+0x2d0>
    7e3c:	add	x2, x2, #0x2
    7e40:	str	x2, [x19, #24]
    7e44:	mov	x0, x19
    7e48:	bl	66e8 <__asan_cplus_demangle_type>
    7e4c:	mov	x20, x0
    7e50:	mov	x0, x19
    7e54:	bl	7508 <d_unqualified_name>
    7e58:	ldr	x1, [x19, #24]
    7e5c:	mov	x27, x0
    7e60:	mov	x3, x27
    7e64:	ldrb	w0, [x1]
    7e68:	cmp	w0, #0x49
    7e6c:	b.ne	7e98 <d_exprlist+0x378>  // b.any
    7e70:	add	x1, x1, #0x1
    7e74:	str	x1, [x19, #24]
    7e78:	mov	x0, x19
    7e7c:	bl	8db0 <d_template_args_1>
    7e80:	mov	x3, x0
    7e84:	mov	x2, x27
    7e88:	mov	x0, x19
    7e8c:	mov	w1, #0x4                   	// #4
    7e90:	bl	0 <d_make_comp>
    7e94:	mov	x3, x0
    7e98:	mov	x2, x20
    7e9c:	mov	x0, x19
    7ea0:	mov	w1, #0x1                   	// #1
    7ea4:	bl	0 <d_make_comp>
    7ea8:	mov	x20, x0
    7eac:	b	7cb8 <d_exprlist+0x198>
    7eb0:	ldr	x3, [x20, #8]
    7eb4:	adrp	x1, 0 <d_make_comp>
    7eb8:	ldr	w0, [x19, #72]
    7ebc:	add	x1, x1, #0x0
    7ec0:	ldr	w2, [x3, #16]
    7ec4:	ldr	x28, [x3]
    7ec8:	sub	w2, w2, #0x2
    7ecc:	add	w0, w0, w2
    7ed0:	str	w0, [x19, #72]
    7ed4:	mov	x0, x28
    7ed8:	bl	0 <__asan_internal_strcmp>
    7edc:	cbz	w0, 81dc <d_exprlist+0x6bc>
    7ee0:	ldr	w1, [x20]
    7ee4:	cmp	w1, #0x33
    7ee8:	b.eq	7f48 <d_exprlist+0x428>  // b.none
    7eec:	cmp	w1, #0x34
    7ef0:	b.eq	80fc <d_exprlist+0x5dc>  // b.none
    7ef4:	cmp	w1, #0x32
    7ef8:	b.ne	7bd4 <d_exprlist+0xb4>  // b.any
    7efc:	ldr	x0, [x20, #8]
    7f00:	ldr	w0, [x0, #20]
    7f04:	cmp	w0, #0x2
    7f08:	b.eq	7f58 <d_exprlist+0x438>  // b.none
    7f0c:	b.gt	7fd8 <d_exprlist+0x4b8>
    7f10:	cbz	w0, 8190 <d_exprlist+0x670>
    7f14:	cmp	w0, #0x1
    7f18:	b.ne	7bd4 <d_exprlist+0xb4>  // b.any
    7f1c:	cbnz	x28, 8160 <d_exprlist+0x640>
    7f20:	mov	x0, x19
    7f24:	bl	8340 <d_expression_1>
    7f28:	mov	x3, x0
    7f2c:	mov	x2, x20
    7f30:	mov	x0, x19
    7f34:	mov	w1, #0x37                  	// #55
    7f38:	bl	0 <d_make_comp>
    7f3c:	mov	x20, x0
    7f40:	b	7cb8 <d_exprlist+0x198>
    7f44:	mov	x28, #0x0                   	// #0
    7f48:	ldr	w0, [x20, #8]
    7f4c:	mov	w1, #0x33                  	// #51
    7f50:	cmp	w0, #0x2
    7f54:	b.ne	7f0c <d_exprlist+0x3ec>  // b.any
    7f58:	cbz	x28, 7bd4 <d_exprlist+0xb4>
    7f5c:	ldr	x0, [x20, #8]
    7f60:	ldr	x0, [x0]
    7f64:	ldrb	w1, [x0, #1]
    7f68:	cmp	w1, #0x63
    7f6c:	b.eq	828c <d_exprlist+0x76c>  // b.none
    7f70:	ldrb	w0, [x28]
    7f74:	cmp	w0, #0x66
    7f78:	b.eq	82ec <d_exprlist+0x7cc>  // b.none
    7f7c:	mov	x0, x19
    7f80:	bl	8340 <d_expression_1>
    7f84:	mov	x27, x0
    7f88:	mov	x1, x25
    7f8c:	mov	x0, x28
    7f90:	bl	0 <__asan_internal_strcmp>
    7f94:	cbnz	w0, 81ec <d_exprlist+0x6cc>
    7f98:	mov	x0, x19
    7f9c:	mov	w1, #0x45                  	// #69
    7fa0:	bl	7b20 <d_exprlist>
    7fa4:	mov	x28, x0
    7fa8:	mov	x3, x28
    7fac:	mov	x2, x27
    7fb0:	mov	w1, #0x39                  	// #57
    7fb4:	mov	x0, x19
    7fb8:	bl	0 <d_make_comp>
    7fbc:	mov	x3, x0
    7fc0:	mov	x2, x20
    7fc4:	mov	x0, x19
    7fc8:	mov	w1, #0x38                  	// #56
    7fcc:	bl	0 <d_make_comp>
    7fd0:	mov	x20, x0
    7fd4:	b	7cb8 <d_exprlist+0x198>
    7fd8:	cmp	w0, #0x3
    7fdc:	b.ne	7bd4 <d_exprlist+0xb4>  // b.any
    7fe0:	cbz	x28, 7bd4 <d_exprlist+0xb4>
    7fe4:	adrp	x1, 0 <d_make_comp>
    7fe8:	mov	x0, x28
    7fec:	add	x1, x1, #0x0
    7ff0:	bl	0 <__asan_internal_strcmp>
    7ff4:	cbz	w0, 82bc <d_exprlist+0x79c>
    7ff8:	ldrb	w0, [x28]
    7ffc:	cmp	w0, #0x66
    8000:	b.eq	82fc <d_exprlist+0x7dc>  // b.none
    8004:	cmp	w0, #0x6e
    8008:	b.ne	7bd4 <d_exprlist+0xb4>  // b.any
    800c:	ldrb	w0, [x28, #1]
    8010:	mov	w1, #0x61                  	// #97
    8014:	cmp	w0, #0x77
    8018:	ccmp	w0, w1, #0x4, ne  // ne = any
    801c:	b.ne	7bd4 <d_exprlist+0xb4>  // b.any
    8020:	mov	w1, #0x5f                  	// #95
    8024:	mov	x0, x19
    8028:	bl	7b20 <d_exprlist>
    802c:	mov	x27, x0
    8030:	mov	x0, x19
    8034:	bl	66e8 <__asan_cplus_demangle_type>
    8038:	ldr	x1, [x19, #24]
    803c:	mov	x28, x0
    8040:	ldrb	w0, [x1]
    8044:	cmp	w0, #0x45
    8048:	b.eq	8330 <d_exprlist+0x810>  // b.none
    804c:	cmp	w0, #0x70
    8050:	b.eq	8308 <d_exprlist+0x7e8>  // b.none
    8054:	cmp	w0, #0x69
    8058:	b.ne	7bd4 <d_exprlist+0xb4>  // b.any
    805c:	ldrb	w0, [x1, #1]
    8060:	cmp	w0, #0x6c
    8064:	b.ne	7bd4 <d_exprlist+0xb4>  // b.any
    8068:	mov	x0, x19
    806c:	bl	8340 <d_expression_1>
    8070:	mov	x3, x0
    8074:	mov	x2, x28
    8078:	mov	w1, #0x3c                  	// #60
    807c:	mov	x0, x19
    8080:	bl	0 <d_make_comp>
    8084:	mov	x2, x27
    8088:	mov	x3, x0
    808c:	mov	w1, #0x3b                  	// #59
    8090:	mov	x0, x19
    8094:	bl	0 <d_make_comp>
    8098:	mov	x3, x0
    809c:	mov	x2, x20
    80a0:	mov	x0, x19
    80a4:	mov	w1, #0x3a                  	// #58
    80a8:	bl	0 <d_make_comp>
    80ac:	mov	x20, x0
    80b0:	b	7cb8 <d_exprlist+0x198>
    80b4:	ldr	x0, [x19, #24]
    80b8:	ldrb	w1, [x0]
    80bc:	cmp	w1, #0x5f
    80c0:	b.ne	7f20 <d_exprlist+0x400>  // b.any
    80c4:	add	x0, x0, #0x1
    80c8:	str	x0, [x19, #24]
    80cc:	mov	w1, #0x45                  	// #69
    80d0:	mov	x0, x19
    80d4:	bl	7b20 <d_exprlist>
    80d8:	mov	x3, x0
    80dc:	b	7f2c <d_exprlist+0x40c>
    80e0:	mov	x0, x19
    80e4:	bl	66e8 <__asan_cplus_demangle_type>
    80e8:	ldr	x1, [x19, #24]
    80ec:	mov	x20, x0
    80f0:	ldrb	w0, [x1, #1]
    80f4:	cbnz	w0, 7d8c <d_exprlist+0x26c>
    80f8:	b	7bd4 <d_exprlist+0xb4>
    80fc:	cbz	x28, 80b4 <d_exprlist+0x594>
    8100:	ldrb	w0, [x28]
    8104:	mov	w2, #0x6d                  	// #109
    8108:	cmp	w0, #0x70
    810c:	ccmp	w0, w2, #0x4, ne  // ne = any
    8110:	b.eq	8178 <d_exprlist+0x658>  // b.none
    8114:	ldr	x0, [x19, #24]
    8118:	ldrb	w1, [x0]
    811c:	cmp	w1, #0x5f
    8120:	b.eq	80c4 <d_exprlist+0x5a4>  // b.none
    8124:	mov	w27, #0x0                   	// #0
    8128:	mov	x0, x28
    812c:	mov	x1, x24
    8130:	bl	0 <__asan_internal_strcmp>
    8134:	cbz	w0, 81ac <d_exprlist+0x68c>
    8138:	mov	x0, x19
    813c:	bl	8340 <d_expression_1>
    8140:	mov	x3, x0
    8144:	cbz	w27, 7f2c <d_exprlist+0x40c>
    8148:	mov	x2, x3
    814c:	mov	x0, x19
    8150:	mov	w1, #0x39                  	// #57
    8154:	bl	0 <d_make_comp>
    8158:	mov	x3, x0
    815c:	b	7f2c <d_exprlist+0x40c>
    8160:	ldrb	w0, [x28]
    8164:	mov	w2, #0x6d                  	// #109
    8168:	cmp	w0, #0x70
    816c:	ccmp	w0, w2, #0x4, ne  // ne = any
    8170:	b.ne	8124 <d_exprlist+0x604>  // b.any
    8174:	nop
    8178:	ldrb	w2, [x28, #1]
    817c:	cmp	w2, w0
    8180:	b.eq	826c <d_exprlist+0x74c>  // b.none
    8184:	cmp	w1, #0x34
    8188:	b.ne	8124 <d_exprlist+0x604>  // b.any
    818c:	b	8114 <d_exprlist+0x5f4>
    8190:	mov	x2, x20
    8194:	mov	x0, x19
    8198:	mov	x3, #0x0                   	// #0
    819c:	mov	w1, #0x36                  	// #54
    81a0:	bl	0 <d_make_comp>
    81a4:	mov	x20, x0
    81a8:	b	7cb8 <d_exprlist+0x198>
    81ac:	mov	x0, x19
    81b0:	bl	8db0 <d_template_args_1>
    81b4:	mov	x3, x0
    81b8:	b	8144 <d_exprlist+0x624>
    81bc:	add	x2, x2, #0x1
    81c0:	str	x2, [x0, #24]
    81c4:	ldp	x19, x20, [sp, #16]
    81c8:	mov	x3, #0x0                   	// #0
    81cc:	ldp	x29, x30, [sp], #112
    81d0:	mov	w1, #0x2e                  	// #46
    81d4:	mov	x2, #0x0                   	// #0
    81d8:	b	0 <d_make_comp>
    81dc:	mov	x0, x19
    81e0:	bl	66e8 <__asan_cplus_demangle_type>
    81e4:	mov	x3, x0
    81e8:	b	7f2c <d_exprlist+0x40c>
    81ec:	adrp	x1, 0 <d_make_comp>
    81f0:	mov	x0, x28
    81f4:	add	x1, x1, #0x0
    81f8:	bl	0 <__asan_internal_strcmp>
    81fc:	cbz	w0, 8224 <d_exprlist+0x704>
    8200:	adrp	x1, 0 <d_make_comp>
    8204:	mov	x0, x28
    8208:	add	x1, x1, #0x0
    820c:	bl	0 <__asan_internal_strcmp>
    8210:	cbz	w0, 8224 <d_exprlist+0x704>
    8214:	mov	x0, x19
    8218:	bl	8340 <d_expression_1>
    821c:	mov	x28, x0
    8220:	b	7fa8 <d_exprlist+0x488>
    8224:	mov	x0, x19
    8228:	bl	7508 <d_unqualified_name>
    822c:	ldr	x1, [x19, #24]
    8230:	mov	x28, x0
    8234:	ldrb	w0, [x1]
    8238:	cmp	w0, #0x49
    823c:	b.ne	7fa8 <d_exprlist+0x488>  // b.any
    8240:	add	x1, x1, #0x1
    8244:	str	x1, [x19, #24]
    8248:	mov	x0, x19
    824c:	bl	8db0 <d_template_args_1>
    8250:	mov	x3, x0
    8254:	mov	x2, x28
    8258:	mov	x0, x19
    825c:	mov	w1, #0x4                   	// #4
    8260:	bl	0 <d_make_comp>
    8264:	mov	x28, x0
    8268:	b	7fa8 <d_exprlist+0x488>
    826c:	ldr	x0, [x19, #24]
    8270:	mov	w27, #0x1                   	// #1
    8274:	ldrb	w2, [x0]
    8278:	cmp	w2, #0x5f
    827c:	b.ne	8128 <d_exprlist+0x608>  // b.any
    8280:	add	x0, x0, #0x1
    8284:	str	x0, [x19, #24]
    8288:	b	8184 <d_exprlist+0x664>
    828c:	ldrb	w0, [x0]
    8290:	sub	w1, w0, #0x63
    8294:	sub	w0, w0, #0x72
    8298:	and	w1, w1, #0xff
    829c:	and	w0, w0, #0xff
    82a0:	cmp	w1, #0x1
    82a4:	ccmp	w0, #0x1, #0x0, hi  // hi = pmore
    82a8:	b.hi	7f70 <d_exprlist+0x450>  // b.pmore
    82ac:	mov	x0, x19
    82b0:	bl	66e8 <__asan_cplus_demangle_type>
    82b4:	mov	x27, x0
    82b8:	b	7f88 <d_exprlist+0x468>
    82bc:	mov	x0, x19
    82c0:	bl	8340 <d_expression_1>
    82c4:	mov	x27, x0
    82c8:	mov	x0, x19
    82cc:	bl	8340 <d_expression_1>
    82d0:	mov	x28, x0
    82d4:	mov	x0, x19
    82d8:	bl	8340 <d_expression_1>
    82dc:	mov	x3, x0
    82e0:	cbnz	x0, 8074 <d_exprlist+0x554>
    82e4:	mov	x20, #0x0                   	// #0
    82e8:	b	7bd8 <d_exprlist+0xb8>
    82ec:	mov	x0, x19
    82f0:	bl	7330 <d_operator_name>
    82f4:	mov	x27, x0
    82f8:	b	7f88 <d_exprlist+0x468>
    82fc:	mov	x0, x19
    8300:	bl	7330 <d_operator_name>
    8304:	b	82c4 <d_exprlist+0x7a4>
    8308:	ldrb	w0, [x1, #1]
    830c:	cmp	w0, #0x69
    8310:	b.ne	7bd4 <d_exprlist+0xb4>  // b.any
    8314:	add	x1, x1, #0x2
    8318:	str	x1, [x19, #24]
    831c:	mov	x0, x19
    8320:	mov	w1, #0x45                  	// #69
    8324:	bl	7b20 <d_exprlist>
    8328:	mov	x3, x0
    832c:	b	8074 <d_exprlist+0x554>
    8330:	add	x1, x1, #0x1
    8334:	mov	x3, #0x0                   	// #0
    8338:	str	x1, [x19, #24]
    833c:	b	8074 <d_exprlist+0x554>

0000000000008340 <d_expression_1>:
    8340:	ldr	x2, [x0, #24]
    8344:	ldrb	w1, [x2]
    8348:	cmp	w1, #0x4c
    834c:	b.eq	8558 <d_expression_1+0x218>  // b.none
    8350:	cmp	w1, #0x54
    8354:	b.eq	85dc <d_expression_1+0x29c>  // b.none
    8358:	stp	x29, x30, [sp, #-48]!
    835c:	cmp	w1, #0x73
    8360:	mov	x29, sp
    8364:	stp	x19, x20, [sp, #16]
    8368:	mov	x19, x0
    836c:	b.eq	840c <d_expression_1+0xcc>  // b.none
    8370:	cmp	w1, #0x66
    8374:	b.eq	83b8 <d_expression_1+0x78>  // b.none
    8378:	sub	w3, w1, #0x30
    837c:	and	w3, w3, #0xff
    8380:	cmp	w3, #0x9
    8384:	b.hi	855c <d_expression_1+0x21c>  // b.pmore
    8388:	mov	x0, x19
    838c:	bl	7508 <d_unqualified_name>
    8390:	mov	x20, x0
    8394:	cbz	x0, 8544 <d_expression_1+0x204>
    8398:	ldr	x0, [x19, #24]
    839c:	ldrb	w1, [x0]
    83a0:	cmp	w1, #0x49
    83a4:	b.eq	85e0 <d_expression_1+0x2a0>  // b.none
    83a8:	mov	x0, x20
    83ac:	ldp	x19, x20, [sp, #16]
    83b0:	ldp	x29, x30, [sp], #48
    83b4:	ret
    83b8:	ldrb	w1, [x2, #1]
    83bc:	cmp	w1, #0x70
    83c0:	b.eq	8448 <d_expression_1+0x108>  // b.none
    83c4:	mov	x0, x19
    83c8:	bl	7330 <d_operator_name>
    83cc:	mov	x20, x0
    83d0:	cbz	x0, 8544 <d_expression_1+0x204>
    83d4:	ldr	w0, [x0]
    83d8:	stp	x21, x22, [sp, #32]
    83dc:	cmp	w0, #0x32
    83e0:	b.eq	8698 <d_expression_1+0x358>  // b.none
    83e4:	cmp	w0, #0x33
    83e8:	b.eq	8780 <d_expression_1+0x440>  // b.none
    83ec:	cmp	w0, #0x34
    83f0:	b.eq	8808 <d_expression_1+0x4c8>  // b.none
    83f4:	mov	x20, #0x0                   	// #0
    83f8:	mov	x0, x20
    83fc:	ldp	x19, x20, [sp, #16]
    8400:	ldp	x21, x22, [sp, #32]
    8404:	ldp	x29, x30, [sp], #48
    8408:	ret
    840c:	ldrb	w1, [x2, #1]
    8410:	cmp	w1, #0x72
    8414:	b.eq	860c <d_expression_1+0x2cc>  // b.none
    8418:	cmp	w1, #0x70
    841c:	b.ne	83c4 <d_expression_1+0x84>  // b.any
    8420:	add	x2, x2, #0x2
    8424:	str	x2, [x0, #24]
    8428:	bl	8340 <d_expression_1>
    842c:	mov	x2, x0
    8430:	mov	x0, x19
    8434:	mov	x3, #0x0                   	// #0
    8438:	ldp	x19, x20, [sp, #16]
    843c:	mov	w1, #0x4b                  	// #75
    8440:	ldp	x29, x30, [sp], #48
    8444:	b	0 <d_make_comp>
    8448:	add	x1, x2, #0x2
    844c:	str	x1, [x0, #24]
    8450:	ldrb	w1, [x2, #2]
    8454:	cmp	w1, #0x54
    8458:	b.eq	8790 <d_expression_1+0x450>  // b.none
    845c:	bl	3b8 <d_compact_number>
    8460:	mvn	x1, x0
    8464:	add	w0, w0, #0x1
    8468:	tst	x1, #0x7fffffff
    846c:	b.eq	8544 <d_expression_1+0x204>  // b.none
    8470:	ldp	w1, w2, [x19, #40]
    8474:	cmp	w1, w2
    8478:	b.ge	8544 <d_expression_1+0x204>  // b.tcont
    847c:	mov	w3, #0x18                  	// #24
    8480:	add	w4, w1, #0x1
    8484:	ldr	x2, [x19, #32]
    8488:	smull	x1, w1, w3
    848c:	mov	w3, #0x6                   	// #6
    8490:	sxtw	x0, w0
    8494:	add	x20, x2, x1
    8498:	str	wzr, [x20, #4]
    849c:	str	w4, [x19, #40]
    84a0:	str	w3, [x2, x1]
    84a4:	str	x0, [x20, #8]
    84a8:	b	83a8 <d_expression_1+0x68>
    84ac:	cmp	w0, #0x3
    84b0:	b.ne	83f4 <d_expression_1+0xb4>  // b.any
    84b4:	cbz	x21, 8540 <d_expression_1+0x200>
    84b8:	adrp	x1, 0 <d_make_comp>
    84bc:	mov	x0, x21
    84c0:	add	x1, x1, #0x0
    84c4:	bl	0 <__asan_internal_strcmp>
    84c8:	cbz	w0, 89e8 <d_expression_1+0x6a8>
    84cc:	ldrb	w0, [x21]
    84d0:	cmp	w0, #0x66
    84d4:	b.eq	8a24 <d_expression_1+0x6e4>  // b.none
    84d8:	cmp	w0, #0x6e
    84dc:	b.ne	8540 <d_expression_1+0x200>  // b.any
    84e0:	ldrb	w0, [x21, #1]
    84e4:	mov	w1, #0x61                  	// #97
    84e8:	cmp	w0, #0x77
    84ec:	ccmp	w0, w1, #0x4, ne  // ne = any
    84f0:	b.ne	8540 <d_expression_1+0x200>  // b.any
    84f4:	mov	w1, #0x5f                  	// #95
    84f8:	mov	x0, x19
    84fc:	bl	7b20 <d_exprlist>
    8500:	mov	x21, x0
    8504:	mov	x0, x19
    8508:	bl	66e8 <__asan_cplus_demangle_type>
    850c:	ldr	x1, [x19, #24]
    8510:	mov	x22, x0
    8514:	ldrb	w0, [x1]
    8518:	cmp	w0, #0x45
    851c:	b.eq	8a68 <d_expression_1+0x728>  // b.none
    8520:	cmp	w0, #0x70
    8524:	b.eq	8a40 <d_expression_1+0x700>  // b.none
    8528:	cmp	w0, #0x69
    852c:	b.ne	8540 <d_expression_1+0x200>  // b.any
    8530:	ldrb	w0, [x1, #1]
    8534:	cmp	w0, #0x6c
    8538:	b.eq	8730 <d_expression_1+0x3f0>  // b.none
    853c:	nop
    8540:	ldp	x21, x22, [sp, #32]
    8544:	mov	x20, #0x0                   	// #0
    8548:	mov	x0, x20
    854c:	ldp	x19, x20, [sp, #16]
    8550:	ldp	x29, x30, [sp], #48
    8554:	ret
    8558:	b	9d78 <d_expr_primary>
    855c:	cmp	w1, #0x6f
    8560:	b.ne	857c <d_expression_1+0x23c>  // b.any
    8564:	ldrb	w0, [x2, #1]
    8568:	cmp	w0, #0x6e
    856c:	b.ne	83c4 <d_expression_1+0x84>  // b.any
    8570:	add	x2, x2, #0x2
    8574:	str	x2, [x19, #24]
    8578:	b	8388 <d_expression_1+0x48>
    857c:	cmp	w1, #0x69
    8580:	mov	w3, #0x74                  	// #116
    8584:	ccmp	w1, w3, #0x4, ne  // ne = any
    8588:	b.ne	83c4 <d_expression_1+0x84>  // b.any
    858c:	ldrb	w3, [x2, #1]
    8590:	cmp	w3, #0x6c
    8594:	b.ne	83c4 <d_expression_1+0x84>  // b.any
    8598:	add	x3, x2, #0x2
    859c:	str	x3, [x0, #24]
    85a0:	cmp	w1, #0x74
    85a4:	mov	x20, #0x0                   	// #0
    85a8:	b.eq	8688 <d_expression_1+0x348>  // b.none
    85ac:	ldrb	w0, [x3, #1]
    85b0:	cbz	w0, 8544 <d_expression_1+0x204>
    85b4:	mov	x0, x19
    85b8:	mov	w1, #0x45                  	// #69
    85bc:	bl	7b20 <d_exprlist>
    85c0:	mov	x3, x0
    85c4:	mov	x2, x20
    85c8:	mov	x0, x19
    85cc:	ldp	x19, x20, [sp, #16]
    85d0:	mov	w1, #0x31                  	// #49
    85d4:	ldp	x29, x30, [sp], #48
    85d8:	b	0 <d_make_comp>
    85dc:	b	430 <d_template_param>
    85e0:	add	x0, x0, #0x1
    85e4:	str	x0, [x19, #24]
    85e8:	mov	x0, x19
    85ec:	bl	8db0 <d_template_args_1>
    85f0:	mov	x3, x0
    85f4:	mov	x2, x20
    85f8:	mov	x0, x19
    85fc:	ldp	x19, x20, [sp, #16]
    8600:	mov	w1, #0x4                   	// #4
    8604:	ldp	x29, x30, [sp], #48
    8608:	b	0 <d_make_comp>
    860c:	add	x2, x2, #0x2
    8610:	stp	x21, x22, [sp, #32]
    8614:	str	x2, [x0, #24]
    8618:	bl	66e8 <__asan_cplus_demangle_type>
    861c:	mov	x20, x0
    8620:	mov	x0, x19
    8624:	bl	7508 <d_unqualified_name>
    8628:	ldr	x1, [x19, #24]
    862c:	mov	x21, x0
    8630:	mov	x3, x21
    8634:	ldrb	w0, [x1]
    8638:	cmp	w0, #0x49
    863c:	b.eq	865c <d_expression_1+0x31c>  // b.none
    8640:	mov	x2, x20
    8644:	mov	x0, x19
    8648:	ldp	x19, x20, [sp, #16]
    864c:	mov	w1, #0x1                   	// #1
    8650:	ldp	x21, x22, [sp, #32]
    8654:	ldp	x29, x30, [sp], #48
    8658:	b	0 <d_make_comp>
    865c:	add	x1, x1, #0x1
    8660:	str	x1, [x19, #24]
    8664:	mov	x0, x19
    8668:	bl	8db0 <d_template_args_1>
    866c:	mov	x3, x0
    8670:	mov	x2, x21
    8674:	mov	x0, x19
    8678:	mov	w1, #0x4                   	// #4
    867c:	bl	0 <d_make_comp>
    8680:	mov	x3, x0
    8684:	b	8640 <d_expression_1+0x300>
    8688:	bl	66e8 <__asan_cplus_demangle_type>
    868c:	mov	x20, x0
    8690:	ldr	x3, [x19, #24]
    8694:	b	85ac <d_expression_1+0x26c>
    8698:	ldr	x3, [x20, #8]
    869c:	adrp	x1, 0 <d_make_comp>
    86a0:	ldr	w0, [x19, #72]
    86a4:	add	x1, x1, #0x0
    86a8:	ldr	w2, [x3, #16]
    86ac:	ldr	x21, [x3]
    86b0:	sub	w2, w2, #0x2
    86b4:	add	w0, w0, w2
    86b8:	str	w0, [x19, #72]
    86bc:	mov	x0, x21
    86c0:	bl	0 <__asan_internal_strcmp>
    86c4:	cbz	w0, 8918 <d_expression_1+0x5d8>
    86c8:	ldr	w1, [x20]
    86cc:	cmp	w1, #0x33
    86d0:	b.eq	8784 <d_expression_1+0x444>  // b.none
    86d4:	cmp	w1, #0x34
    86d8:	b.eq	87a0 <d_expression_1+0x460>  // b.none
    86dc:	cmp	w1, #0x32
    86e0:	b.ne	83f4 <d_expression_1+0xb4>  // b.any
    86e4:	ldr	x0, [x20, #8]
    86e8:	ldr	w0, [x0, #20]
    86ec:	cmp	w0, #0x2
    86f0:	b.eq	8860 <d_expression_1+0x520>  // b.none
    86f4:	b.gt	84ac <d_expression_1+0x16c>
    86f8:	cbz	w0, 88e8 <d_expression_1+0x5a8>
    86fc:	cmp	w0, #0x1
    8700:	b.ne	83f4 <d_expression_1+0xb4>  // b.any
    8704:	cbnz	x21, 8834 <d_expression_1+0x4f4>
    8708:	mov	x0, x19
    870c:	bl	8340 <d_expression_1>
    8710:	mov	x3, x0
    8714:	mov	x2, x20
    8718:	mov	x0, x19
    871c:	ldp	x19, x20, [sp, #16]
    8720:	mov	w1, #0x37                  	// #55
    8724:	ldp	x21, x22, [sp, #32]
    8728:	ldp	x29, x30, [sp], #48
    872c:	b	0 <d_make_comp>
    8730:	mov	x0, x19
    8734:	bl	8340 <d_expression_1>
    8738:	mov	x3, x0
    873c:	mov	x2, x22
    8740:	mov	x0, x19
    8744:	mov	w1, #0x3c                  	// #60
    8748:	bl	0 <d_make_comp>
    874c:	mov	x2, x21
    8750:	mov	x3, x0
    8754:	mov	w1, #0x3b                  	// #59
    8758:	mov	x0, x19
    875c:	bl	0 <d_make_comp>
    8760:	mov	x3, x0
    8764:	mov	x2, x20
    8768:	mov	x0, x19
    876c:	ldp	x19, x20, [sp, #16]
    8770:	mov	w1, #0x3a                  	// #58
    8774:	ldp	x21, x22, [sp, #32]
    8778:	ldp	x29, x30, [sp], #48
    877c:	b	0 <d_make_comp>
    8780:	mov	x21, #0x0                   	// #0
    8784:	ldr	w0, [x20, #8]
    8788:	mov	w1, #0x33                  	// #51
    878c:	b	86ec <d_expression_1+0x3ac>
    8790:	add	x2, x2, #0x3
    8794:	mov	w0, #0x0                   	// #0
    8798:	str	x2, [x19, #24]
    879c:	b	8470 <d_expression_1+0x130>
    87a0:	cbz	x21, 8808 <d_expression_1+0x4c8>
    87a4:	ldrb	w0, [x21]
    87a8:	mov	w2, #0x6d                  	// #109
    87ac:	cmp	w0, #0x70
    87b0:	ccmp	w0, w2, #0x4, ne  // ne = any
    87b4:	b.eq	8848 <d_expression_1+0x508>  // b.none
    87b8:	ldr	x0, [x19, #24]
    87bc:	ldrb	w1, [x0]
    87c0:	cmp	w1, #0x5f
    87c4:	b.eq	8818 <d_expression_1+0x4d8>  // b.none
    87c8:	mov	w22, #0x0                   	// #0
    87cc:	adrp	x1, 0 <d_make_comp>
    87d0:	mov	x0, x21
    87d4:	add	x1, x1, #0x0
    87d8:	bl	0 <__asan_internal_strcmp>
    87dc:	cbz	w0, 8908 <d_expression_1+0x5c8>
    87e0:	mov	x0, x19
    87e4:	bl	8340 <d_expression_1>
    87e8:	mov	x3, x0
    87ec:	cbz	w22, 8714 <d_expression_1+0x3d4>
    87f0:	mov	x2, x3
    87f4:	mov	x0, x19
    87f8:	mov	w1, #0x39                  	// #57
    87fc:	bl	0 <d_make_comp>
    8800:	mov	x3, x0
    8804:	b	8714 <d_expression_1+0x3d4>
    8808:	ldr	x0, [x19, #24]
    880c:	ldrb	w1, [x0]
    8810:	cmp	w1, #0x5f
    8814:	b.ne	8708 <d_expression_1+0x3c8>  // b.any
    8818:	add	x0, x0, #0x1
    881c:	str	x0, [x19, #24]
    8820:	mov	w1, #0x45                  	// #69
    8824:	mov	x0, x19
    8828:	bl	7b20 <d_exprlist>
    882c:	mov	x3, x0
    8830:	b	8714 <d_expression_1+0x3d4>
    8834:	ldrb	w0, [x21]
    8838:	mov	w2, #0x6d                  	// #109
    883c:	cmp	w0, #0x70
    8840:	ccmp	w0, w2, #0x4, ne  // ne = any
    8844:	b.ne	87c8 <d_expression_1+0x488>  // b.any
    8848:	ldrb	w2, [x21, #1]
    884c:	cmp	w2, w0
    8850:	b.eq	8998 <d_expression_1+0x658>  // b.none
    8854:	cmp	w1, #0x34
    8858:	b.ne	87c8 <d_expression_1+0x488>  // b.any
    885c:	b	87b8 <d_expression_1+0x478>
    8860:	cbz	x21, 8540 <d_expression_1+0x200>
    8864:	ldr	x0, [x20, #8]
    8868:	ldr	x0, [x0]
    886c:	ldrb	w1, [x0, #1]
    8870:	cmp	w1, #0x63
    8874:	b.eq	89b8 <d_expression_1+0x678>  // b.none
    8878:	ldrb	w0, [x21]
    887c:	cmp	w0, #0x66
    8880:	b.eq	8a14 <d_expression_1+0x6d4>  // b.none
    8884:	mov	x0, x19
    8888:	bl	8340 <d_expression_1>
    888c:	mov	x22, x0
    8890:	adrp	x1, 0 <d_make_comp>
    8894:	mov	x0, x21
    8898:	add	x1, x1, #0x0
    889c:	bl	0 <__asan_internal_strcmp>
    88a0:	cbnz	w0, 8928 <d_expression_1+0x5e8>
    88a4:	mov	x0, x19
    88a8:	mov	w1, #0x45                  	// #69
    88ac:	bl	7b20 <d_exprlist>
    88b0:	mov	x21, x0
    88b4:	mov	x3, x21
    88b8:	mov	x2, x22
    88bc:	mov	x0, x19
    88c0:	mov	w1, #0x39                  	// #57
    88c4:	bl	0 <d_make_comp>
    88c8:	mov	x3, x0
    88cc:	mov	x2, x20
    88d0:	mov	x0, x19
    88d4:	ldp	x19, x20, [sp, #16]
    88d8:	mov	w1, #0x38                  	// #56
    88dc:	ldp	x21, x22, [sp, #32]
    88e0:	ldp	x29, x30, [sp], #48
    88e4:	b	0 <d_make_comp>
    88e8:	mov	x2, x20
    88ec:	mov	x0, x19
    88f0:	ldp	x19, x20, [sp, #16]
    88f4:	mov	x3, #0x0                   	// #0
    88f8:	ldp	x21, x22, [sp, #32]
    88fc:	mov	w1, #0x36                  	// #54
    8900:	ldp	x29, x30, [sp], #48
    8904:	b	0 <d_make_comp>
    8908:	mov	x0, x19
    890c:	bl	8db0 <d_template_args_1>
    8910:	mov	x3, x0
    8914:	b	87ec <d_expression_1+0x4ac>
    8918:	mov	x0, x19
    891c:	bl	66e8 <__asan_cplus_demangle_type>
    8920:	mov	x3, x0
    8924:	b	8714 <d_expression_1+0x3d4>
    8928:	adrp	x1, 0 <d_make_comp>
    892c:	mov	x0, x21
    8930:	add	x1, x1, #0x0
    8934:	bl	0 <__asan_internal_strcmp>
    8938:	cbz	w0, 8950 <d_expression_1+0x610>
    893c:	adrp	x1, 0 <d_make_comp>
    8940:	mov	x0, x21
    8944:	add	x1, x1, #0x0
    8948:	bl	0 <__asan_internal_strcmp>
    894c:	cbnz	w0, 8a30 <d_expression_1+0x6f0>
    8950:	mov	x0, x19
    8954:	bl	7508 <d_unqualified_name>
    8958:	ldr	x1, [x19, #24]
    895c:	mov	x21, x0
    8960:	ldrb	w0, [x1]
    8964:	cmp	w0, #0x49
    8968:	b.ne	88b4 <d_expression_1+0x574>  // b.any
    896c:	add	x1, x1, #0x1
    8970:	str	x1, [x19, #24]
    8974:	mov	x0, x19
    8978:	bl	8db0 <d_template_args_1>
    897c:	mov	x3, x0
    8980:	mov	x2, x21
    8984:	mov	x0, x19
    8988:	mov	w1, #0x4                   	// #4
    898c:	bl	0 <d_make_comp>
    8990:	mov	x21, x0
    8994:	b	88b4 <d_expression_1+0x574>
    8998:	ldr	x0, [x19, #24]
    899c:	mov	w22, #0x1                   	// #1
    89a0:	ldrb	w2, [x0]
    89a4:	cmp	w2, #0x5f
    89a8:	b.ne	87cc <d_expression_1+0x48c>  // b.any
    89ac:	add	x0, x0, #0x1
    89b0:	str	x0, [x19, #24]
    89b4:	b	8854 <d_expression_1+0x514>
    89b8:	ldrb	w0, [x0]
    89bc:	sub	w1, w0, #0x63
    89c0:	sub	w0, w0, #0x72
    89c4:	and	w1, w1, #0xff
    89c8:	and	w0, w0, #0xff
    89cc:	cmp	w1, #0x1
    89d0:	ccmp	w0, #0x1, #0x0, hi  // hi = pmore
    89d4:	b.hi	8878 <d_expression_1+0x538>  // b.pmore
    89d8:	mov	x0, x19
    89dc:	bl	66e8 <__asan_cplus_demangle_type>
    89e0:	mov	x22, x0
    89e4:	b	8890 <d_expression_1+0x550>
    89e8:	mov	x0, x19
    89ec:	bl	8340 <d_expression_1>
    89f0:	mov	x21, x0
    89f4:	mov	x0, x19
    89f8:	bl	8340 <d_expression_1>
    89fc:	mov	x22, x0
    8a00:	mov	x0, x19
    8a04:	bl	8340 <d_expression_1>
    8a08:	mov	x3, x0
    8a0c:	cbnz	x0, 873c <d_expression_1+0x3fc>
    8a10:	b	8540 <d_expression_1+0x200>
    8a14:	mov	x0, x19
    8a18:	bl	7330 <d_operator_name>
    8a1c:	mov	x22, x0
    8a20:	b	8890 <d_expression_1+0x550>
    8a24:	mov	x0, x19
    8a28:	bl	7330 <d_operator_name>
    8a2c:	b	89f0 <d_expression_1+0x6b0>
    8a30:	mov	x0, x19
    8a34:	bl	8340 <d_expression_1>
    8a38:	mov	x21, x0
    8a3c:	b	88b4 <d_expression_1+0x574>
    8a40:	ldrb	w0, [x1, #1]
    8a44:	cmp	w0, #0x69
    8a48:	b.ne	8540 <d_expression_1+0x200>  // b.any
    8a4c:	add	x1, x1, #0x2
    8a50:	str	x1, [x19, #24]
    8a54:	mov	x0, x19
    8a58:	mov	w1, #0x45                  	// #69
    8a5c:	bl	7b20 <d_exprlist>
    8a60:	mov	x3, x0
    8a64:	b	873c <d_expression_1+0x3fc>
    8a68:	add	x1, x1, #0x1
    8a6c:	mov	x3, #0x0                   	// #0
    8a70:	str	x1, [x19, #24]
    8a74:	b	873c <d_expression_1+0x3fc>

0000000000008a78 <d_cv_qualifiers>:
    8a78:	stp	x29, x30, [sp, #-96]!
    8a7c:	cmp	w2, #0x0
    8a80:	mov	x29, sp
    8a84:	stp	x19, x20, [sp, #16]
    8a88:	mov	x19, x0
    8a8c:	mov	w0, #0x1b                  	// #27
    8a90:	stp	x21, x22, [sp, #32]
    8a94:	mov	x20, x1
    8a98:	mov	w22, #0x1c                  	// #28
    8a9c:	ldr	x4, [x19, #24]
    8aa0:	stp	x23, x24, [sp, #48]
    8aa4:	mov	w23, #0x1d                  	// #29
    8aa8:	stp	x25, x26, [sp, #64]
    8aac:	mov	w25, #0x1e                  	// #30
    8ab0:	csel	w25, w25, w0, ne  // ne = any
    8ab4:	ldrb	w5, [x4]
    8ab8:	mov	w0, #0x1a                  	// #26
    8abc:	csel	w23, w23, w0, ne  // ne = any
    8ac0:	mov	w0, #0x19                  	// #25
    8ac4:	mov	w24, w2
    8ac8:	csel	w22, w22, w0, ne  // ne = any
    8acc:	mov	x21, x1
    8ad0:	mov	x0, x4
    8ad4:	mov	w26, #0x1                   	// #1
    8ad8:	bl	558 <next_is_type_qual.isra.0>
    8adc:	cbz	w0, 8bf8 <d_cv_qualifiers+0x180>
    8ae0:	add	x0, x4, #0x1
    8ae4:	str	x0, [x19, #24]
    8ae8:	cmp	w5, #0x72
    8aec:	b.eq	8bb8 <d_cv_qualifiers+0x140>  // b.none
    8af0:	cmp	w5, #0x56
    8af4:	b.eq	8c58 <d_cv_qualifiers+0x1e0>  // b.none
    8af8:	cmp	w5, #0x4b
    8afc:	b.eq	8c70 <d_cv_qualifiers+0x1f8>  // b.none
    8b00:	ldrb	w0, [x4, #1]
    8b04:	cbz	w0, 8b98 <d_cv_qualifiers+0x120>
    8b08:	add	x0, x4, #0x2
    8b0c:	str	x0, [x19, #24]
    8b10:	ldrb	w0, [x4, #1]
    8b14:	cmp	w0, #0x78
    8b18:	b.eq	8c88 <d_cv_qualifiers+0x210>  // b.none
    8b1c:	and	w1, w0, #0xffffffdf
    8b20:	cmp	w1, #0x4f
    8b24:	and	w1, w1, #0xff
    8b28:	b.ne	8ca0 <d_cv_qualifiers+0x228>  // b.any
    8b2c:	ldr	w2, [x19, #72]
    8b30:	cmp	w0, #0x4f
    8b34:	add	w0, w2, #0x9
    8b38:	str	w0, [x19, #72]
    8b3c:	b.ne	8ce4 <d_cv_qualifiers+0x26c>  // b.any
    8b40:	str	x27, [sp, #80]
    8b44:	mov	x0, x19
    8b48:	ldr	w27, [x19, #76]
    8b4c:	str	w26, [x19, #76]
    8b50:	bl	8340 <d_expression_1>
    8b54:	str	w27, [x19, #76]
    8b58:	mov	x3, x0
    8b5c:	cbz	x0, 8cfc <d_cv_qualifiers+0x284>
    8b60:	ldr	x0, [x19, #24]
    8b64:	ldrb	w1, [x0]
    8b68:	cmp	w1, #0x45
    8b6c:	b.ne	8cfc <d_cv_qualifiers+0x284>  // b.any
    8b70:	add	x0, x0, #0x1
    8b74:	mov	w1, #0x4f                  	// #79
    8b78:	ldr	x27, [sp, #80]
    8b7c:	str	x0, [x19, #24]
    8b80:	mov	x2, #0x0                   	// #0
    8b84:	mov	x0, x19
    8b88:	bl	0 <d_make_comp>
    8b8c:	str	x0, [x20]
    8b90:	cbnz	x0, 8be0 <d_cv_qualifiers+0x168>
    8b94:	nop
    8b98:	mov	x20, #0x0                   	// #0
    8b9c:	mov	x0, x20
    8ba0:	ldp	x19, x20, [sp, #16]
    8ba4:	ldp	x21, x22, [sp, #32]
    8ba8:	ldp	x23, x24, [sp, #48]
    8bac:	ldp	x25, x26, [sp, #64]
    8bb0:	ldp	x29, x30, [sp], #96
    8bb4:	ret
    8bb8:	ldr	w0, [x19, #72]
    8bbc:	mov	w1, w22
    8bc0:	mov	x3, #0x0                   	// #0
    8bc4:	add	w0, w0, #0x9
    8bc8:	str	w0, [x19, #72]
    8bcc:	mov	x0, x19
    8bd0:	mov	x2, #0x0                   	// #0
    8bd4:	bl	0 <d_make_comp>
    8bd8:	str	x0, [x20]
    8bdc:	cbz	x0, 8b98 <d_cv_qualifiers+0x120>
    8be0:	ldr	x4, [x19, #24]
    8be4:	add	x20, x0, #0x8
    8be8:	mov	x0, x4
    8bec:	ldrb	w5, [x4]
    8bf0:	bl	558 <next_is_type_qual.isra.0>
    8bf4:	cbnz	w0, 8ae0 <d_cv_qualifiers+0x68>
    8bf8:	cmp	w5, #0x46
    8bfc:	eor	w24, w24, #0x1
    8c00:	cset	w0, eq  // eq = none
    8c04:	tst	w24, w0
    8c08:	b.eq	8b9c <d_cv_qualifiers+0x124>  // b.none
    8c0c:	cmp	x20, x21
    8c10:	b.eq	8b9c <d_cv_qualifiers+0x124>  // b.none
    8c14:	mov	w3, #0x1d                  	// #29
    8c18:	mov	w2, #0x1e                  	// #30
    8c1c:	mov	w1, #0x1c                  	// #28
    8c20:	b	8c38 <d_cv_qualifiers+0x1c0>
    8c24:	cmp	w0, #0x19
    8c28:	b.eq	8cf4 <d_cv_qualifiers+0x27c>  // b.none
    8c2c:	add	x21, x21, #0x8
    8c30:	cmp	x20, x21
    8c34:	b.eq	8b9c <d_cv_qualifiers+0x124>  // b.none
    8c38:	ldr	x21, [x21]
    8c3c:	ldr	w0, [x21]
    8c40:	cmp	w0, #0x1a
    8c44:	b.eq	8cec <d_cv_qualifiers+0x274>  // b.none
    8c48:	cmp	w0, #0x1b
    8c4c:	b.ne	8c24 <d_cv_qualifiers+0x1ac>  // b.any
    8c50:	str	w2, [x21]
    8c54:	b	8c2c <d_cv_qualifiers+0x1b4>
    8c58:	ldr	w0, [x19, #72]
    8c5c:	mov	w1, w23
    8c60:	mov	x3, #0x0                   	// #0
    8c64:	add	w0, w0, #0x9
    8c68:	str	w0, [x19, #72]
    8c6c:	b	8bcc <d_cv_qualifiers+0x154>
    8c70:	ldr	w0, [x19, #72]
    8c74:	mov	w1, w25
    8c78:	mov	x3, #0x0                   	// #0
    8c7c:	add	w0, w0, #0x6
    8c80:	str	w0, [x19, #72]
    8c84:	b	8bcc <d_cv_qualifiers+0x154>
    8c88:	ldr	w0, [x19, #72]
    8c8c:	mov	x3, #0x0                   	// #0
    8c90:	mov	w1, #0x4d                  	// #77
    8c94:	add	w0, w0, #0x11
    8c98:	str	w0, [x19, #72]
    8c9c:	b	8bcc <d_cv_qualifiers+0x154>
    8ca0:	cmp	w0, #0x77
    8ca4:	b.ne	8b98 <d_cv_qualifiers+0x120>  // b.any
    8ca8:	ldr	w1, [x19, #72]
    8cac:	mov	x0, x19
    8cb0:	add	w1, w1, #0x6
    8cb4:	str	w1, [x19, #72]
    8cb8:	bl	7220 <d_parmlist>
    8cbc:	mov	x3, x0
    8cc0:	cbz	x0, 8b98 <d_cv_qualifiers+0x120>
    8cc4:	ldr	x0, [x19, #24]
    8cc8:	ldrb	w1, [x0]
    8ccc:	cmp	w1, #0x45
    8cd0:	b.ne	8b98 <d_cv_qualifiers+0x120>  // b.any
    8cd4:	add	x0, x0, #0x1
    8cd8:	mov	w1, #0x50                  	// #80
    8cdc:	str	x0, [x19, #24]
    8ce0:	b	8bcc <d_cv_qualifiers+0x154>
    8ce4:	mov	x3, #0x0                   	// #0
    8ce8:	b	8bcc <d_cv_qualifiers+0x154>
    8cec:	str	w3, [x21]
    8cf0:	b	8c2c <d_cv_qualifiers+0x1b4>
    8cf4:	str	w1, [x21]
    8cf8:	b	8c2c <d_cv_qualifiers+0x1b4>
    8cfc:	ldr	x27, [sp, #80]
    8d00:	b	8b98 <d_cv_qualifiers+0x120>
    8d04:	nop

0000000000008d08 <d_template_arg>:
    8d08:	ldr	x2, [x0, #24]
    8d0c:	ldrb	w1, [x2]
    8d10:	cmp	w1, #0x4c
    8d14:	b.eq	8da0 <d_template_arg+0x98>  // b.none
    8d18:	stp	x29, x30, [sp, #-32]!
    8d1c:	mov	x29, sp
    8d20:	stp	x19, x20, [sp, #16]
    8d24:	mov	x19, x0
    8d28:	b.hi	8d48 <d_template_arg+0x40>  // b.pmore
    8d2c:	sub	w1, w1, #0x49
    8d30:	and	w1, w1, #0xff
    8d34:	cmp	w1, #0x1
    8d38:	b.hi	8d90 <d_template_arg+0x88>  // b.pmore
    8d3c:	ldp	x19, x20, [sp, #16]
    8d40:	ldp	x29, x30, [sp], #32
    8d44:	b	8e78 <d_template_args>
    8d48:	cmp	w1, #0x58
    8d4c:	b.ne	8d90 <d_template_arg+0x88>  // b.any
    8d50:	add	x2, x2, #0x1
    8d54:	ldr	w20, [x0, #76]
    8d58:	mov	w1, #0x1                   	// #1
    8d5c:	str	x2, [x0, #24]
    8d60:	str	w1, [x0, #76]
    8d64:	bl	8340 <d_expression_1>
    8d68:	str	w20, [x19, #76]
    8d6c:	ldr	x1, [x19, #24]
    8d70:	ldrb	w2, [x1]
    8d74:	cmp	w2, #0x45
    8d78:	b.ne	8da4 <d_template_arg+0x9c>  // b.any
    8d7c:	add	x1, x1, #0x1
    8d80:	str	x1, [x19, #24]
    8d84:	ldp	x19, x20, [sp, #16]
    8d88:	ldp	x29, x30, [sp], #32
    8d8c:	ret
    8d90:	mov	x0, x19
    8d94:	ldp	x19, x20, [sp, #16]
    8d98:	ldp	x29, x30, [sp], #32
    8d9c:	b	66e8 <__asan_cplus_demangle_type>
    8da0:	b	9d78 <d_expr_primary>
    8da4:	mov	x0, #0x0                   	// #0
    8da8:	b	8d84 <d_template_arg+0x7c>
    8dac:	nop

0000000000008db0 <d_template_args_1>:
    8db0:	stp	x29, x30, [sp, #-64]!
    8db4:	mov	x29, sp
    8db8:	ldr	x1, [x0, #24]
    8dbc:	stp	x19, x20, [sp, #16]
    8dc0:	mov	x19, x0
    8dc4:	str	x21, [sp, #32]
    8dc8:	ldr	x21, [x0, #64]
    8dcc:	ldrb	w2, [x1]
    8dd0:	cmp	w2, #0x45
    8dd4:	b.eq	8e54 <d_template_args_1+0xa4>  // b.none
    8dd8:	add	x20, sp, #0x38
    8ddc:	str	xzr, [sp, #56]
    8de0:	b	8e04 <d_template_args_1+0x54>
    8de4:	bl	0 <d_make_comp>
    8de8:	str	x0, [x20]
    8dec:	add	x20, x0, #0x10
    8df0:	cbz	x0, 8e20 <d_template_args_1+0x70>
    8df4:	ldr	x1, [x19, #24]
    8df8:	ldrb	w0, [x1]
    8dfc:	cmp	w0, #0x45
    8e00:	b.eq	8e34 <d_template_args_1+0x84>  // b.none
    8e04:	mov	x0, x19
    8e08:	bl	8d08 <d_template_arg>
    8e0c:	mov	x3, #0x0                   	// #0
    8e10:	mov	x2, x0
    8e14:	mov	w1, #0x2f                  	// #47
    8e18:	mov	x0, x19
    8e1c:	cbnz	x2, 8de4 <d_template_args_1+0x34>
    8e20:	mov	x0, #0x0                   	// #0
    8e24:	ldp	x19, x20, [sp, #16]
    8e28:	ldr	x21, [sp, #32]
    8e2c:	ldp	x29, x30, [sp], #64
    8e30:	ret
    8e34:	add	x1, x1, #0x1
    8e38:	str	x1, [x19, #24]
    8e3c:	str	x21, [x19, #64]
    8e40:	ldp	x19, x20, [sp, #16]
    8e44:	ldr	x21, [sp, #32]
    8e48:	ldr	x0, [sp, #56]
    8e4c:	ldp	x29, x30, [sp], #64
    8e50:	ret
    8e54:	add	x1, x1, #0x1
    8e58:	mov	x3, #0x0                   	// #0
    8e5c:	ldr	x21, [sp, #32]
    8e60:	str	x1, [x0, #24]
    8e64:	ldp	x19, x20, [sp, #16]
    8e68:	mov	x2, #0x0                   	// #0
    8e6c:	ldp	x29, x30, [sp], #64
    8e70:	mov	w1, #0x2f                  	// #47
    8e74:	b	0 <d_make_comp>

0000000000008e78 <d_template_args>:
    8e78:	ldr	x3, [x0, #24]
    8e7c:	ldrb	w1, [x3]
    8e80:	sub	w1, w1, #0x49
    8e84:	and	w1, w1, #0xff
    8e88:	cmp	w1, #0x1
    8e8c:	b.hi	8e9c <d_template_args+0x24>  // b.pmore
    8e90:	add	x3, x3, #0x1
    8e94:	str	x3, [x0, #24]
    8e98:	b	8db0 <d_template_args_1>
    8e9c:	mov	x0, #0x0                   	// #0
    8ea0:	ret
    8ea4:	nop

0000000000008ea8 <d_name>:
    8ea8:	stp	x29, x30, [sp, #-112]!
    8eac:	mov	x29, sp
    8eb0:	ldr	x2, [x0, #24]
    8eb4:	stp	x19, x20, [sp, #16]
    8eb8:	ldrb	w1, [x2]
    8ebc:	cmp	w1, #0x55
    8ec0:	b.eq	9080 <d_name+0x1d8>  // b.none
    8ec4:	mov	x19, x0
    8ec8:	b.hi	8f14 <d_name+0x6c>  // b.pmore
    8ecc:	cmp	w1, #0x4e
    8ed0:	b.eq	90f0 <d_name+0x248>  // b.none
    8ed4:	cmp	w1, #0x53
    8ed8:	b.ne	9098 <d_name+0x1f0>  // b.any
    8edc:	ldrb	w1, [x2, #1]
    8ee0:	cmp	w1, #0x74
    8ee4:	b.eq	8fa4 <d_name+0xfc>  // b.none
    8ee8:	mov	w1, #0x0                   	// #0
    8eec:	bl	63d0 <d_substitution>
    8ef0:	ldr	x1, [x19, #24]
    8ef4:	mov	x20, x0
    8ef8:	ldrb	w0, [x1]
    8efc:	cmp	w0, #0x49
    8f00:	b.eq	9038 <d_name+0x190>  // b.none
    8f04:	mov	x0, x20
    8f08:	ldp	x19, x20, [sp, #16]
    8f0c:	ldp	x29, x30, [sp], #112
    8f10:	ret
    8f14:	cmp	w1, #0x5a
    8f18:	b.ne	9098 <d_name+0x1f0>  // b.any
    8f1c:	add	x2, x2, #0x1
    8f20:	str	x2, [x0, #24]
    8f24:	mov	w1, #0x0                   	// #0
    8f28:	bl	9410 <d_encoding>
    8f2c:	mov	x20, x0
    8f30:	cbz	x0, 9078 <d_name+0x1d0>
    8f34:	ldr	x0, [x19, #24]
    8f38:	ldrb	w1, [x0]
    8f3c:	cmp	w1, #0x45
    8f40:	b.ne	9078 <d_name+0x1d0>  // b.any
    8f44:	add	x1, x0, #0x1
    8f48:	str	x1, [x19, #24]
    8f4c:	ldrb	w1, [x0, #1]
    8f50:	cmp	w1, #0x73
    8f54:	b.eq	93a4 <d_name+0x4fc>  // b.none
    8f58:	cmp	w1, #0x64
    8f5c:	b.eq	927c <d_name+0x3d4>  // b.none
    8f60:	mov	x0, x19
    8f64:	bl	8ea8 <d_name>
    8f68:	mov	x3, x0
    8f6c:	cbz	x0, 8f80 <d_name+0xd8>
    8f70:	ldr	w0, [x0]
    8f74:	sub	w0, w0, #0x46
    8f78:	tst	w0, #0xfffffffd
    8f7c:	b.ne	93d4 <d_name+0x52c>  // b.any
    8f80:	ldr	w0, [x20]
    8f84:	cmp	w0, #0x3
    8f88:	b.eq	936c <d_name+0x4c4>  // b.none
    8f8c:	mov	x2, x20
    8f90:	mov	x0, x19
    8f94:	mov	w1, #0x2                   	// #2
    8f98:	bl	0 <d_make_comp>
    8f9c:	mov	x20, x0
    8fa0:	b	8f04 <d_name+0x5c>
    8fa4:	add	x2, x2, #0x2
    8fa8:	adrp	x1, 0 <d_make_comp>
    8fac:	add	x1, x1, #0x0
    8fb0:	str	x2, [x0, #24]
    8fb4:	mov	w2, #0x3                   	// #3
    8fb8:	bl	61c0 <d_make_name>
    8fbc:	mov	x20, x0
    8fc0:	mov	x0, x19
    8fc4:	bl	7508 <d_unqualified_name>
    8fc8:	mov	x2, x20
    8fcc:	mov	x3, x0
    8fd0:	mov	w1, #0x1                   	// #1
    8fd4:	mov	x0, x19
    8fd8:	bl	0 <d_make_comp>
    8fdc:	mov	x20, x0
    8fe0:	ldr	w0, [x19, #72]
    8fe4:	ldr	x1, [x19, #24]
    8fe8:	add	w0, w0, #0x3
    8fec:	str	w0, [x19, #72]
    8ff0:	ldrb	w0, [x1]
    8ff4:	cmp	w0, #0x49
    8ff8:	b.ne	8f04 <d_name+0x5c>  // b.any
    8ffc:	cbz	x20, 9078 <d_name+0x1d0>
    9000:	ldp	w0, w2, [x19, #56]
    9004:	cmp	w0, w2
    9008:	b.ge	9078 <d_name+0x1d0>  // b.tcont
    900c:	ldr	x4, [x19, #48]
    9010:	add	w2, w0, #0x1
    9014:	mov	x3, #0x0                   	// #0
    9018:	str	x20, [x4, w0, sxtw #3]
    901c:	str	w2, [x19, #56]
    9020:	ldrb	w0, [x1]
    9024:	sub	w0, w0, #0x49
    9028:	and	w0, w0, #0xff
    902c:	cmp	w0, #0x1
    9030:	b.hi	904c <d_name+0x1a4>  // b.pmore
    9034:	nop
    9038:	add	x1, x1, #0x1
    903c:	str	x1, [x19, #24]
    9040:	mov	x0, x19
    9044:	bl	8db0 <d_template_args_1>
    9048:	mov	x3, x0
    904c:	mov	x2, x20
    9050:	mov	x0, x19
    9054:	mov	w1, #0x4                   	// #4
    9058:	bl	0 <d_make_comp>
    905c:	mov	x20, x0
    9060:	b	8f04 <d_name+0x5c>
    9064:	mov	x0, x19
    9068:	bl	5b0 <d_discriminator>
    906c:	cbnz	w0, 92b8 <d_name+0x410>
    9070:	ldp	x21, x22, [sp, #32]
    9074:	nop
    9078:	mov	x20, #0x0                   	// #0
    907c:	b	8f04 <d_name+0x5c>
    9080:	bl	7508 <d_unqualified_name>
    9084:	mov	x20, x0
    9088:	mov	x0, x20
    908c:	ldp	x19, x20, [sp, #16]
    9090:	ldp	x29, x30, [sp], #112
    9094:	ret
    9098:	mov	x0, x19
    909c:	bl	7508 <d_unqualified_name>
    90a0:	ldr	x1, [x19, #24]
    90a4:	mov	x20, x0
    90a8:	ldrb	w0, [x1]
    90ac:	cmp	w0, #0x49
    90b0:	b.ne	8f04 <d_name+0x5c>  // b.any
    90b4:	cbz	x20, 9078 <d_name+0x1d0>
    90b8:	ldp	w2, w0, [x19, #56]
    90bc:	cmp	w2, w0
    90c0:	b.ge	9078 <d_name+0x1d0>  // b.tcont
    90c4:	ldr	x4, [x19, #48]
    90c8:	add	w0, w2, #0x1
    90cc:	mov	x3, #0x0                   	// #0
    90d0:	str	x20, [x4, w2, sxtw #3]
    90d4:	str	w0, [x19, #56]
    90d8:	ldrb	w2, [x1]
    90dc:	sub	w2, w2, #0x49
    90e0:	and	w2, w2, #0xff
    90e4:	cmp	w2, #0x1
    90e8:	b.ls	9038 <d_name+0x190>  // b.plast
    90ec:	b	904c <d_name+0x1a4>
    90f0:	stp	x21, x22, [sp, #32]
    90f4:	add	x2, x2, #0x1
    90f8:	add	x1, sp, #0x68
    90fc:	str	x2, [x0, #24]
    9100:	mov	w2, #0x1                   	// #1
    9104:	bl	8a78 <d_cv_qualifiers>
    9108:	mov	x22, x0
    910c:	cbz	x0, 9360 <d_name+0x4b8>
    9110:	mov	x1, #0x0                   	// #0
    9114:	mov	x0, x19
    9118:	stp	x23, x24, [sp, #48]
    911c:	bl	88 <d_ref_qualifier>
    9120:	mov	x23, x0
    9124:	ldr	x1, [x19, #24]
    9128:	ldrb	w20, [x1]
    912c:	cbz	w20, 91e4 <d_name+0x33c>
    9130:	mov	x21, #0x0                   	// #0
    9134:	mov	w24, #0x4c                  	// #76
    9138:	stp	x25, x26, [sp, #64]
    913c:	mov	w25, #0x55                  	// #85
    9140:	cmp	w20, #0x44
    9144:	b.eq	91f8 <d_name+0x350>  // b.none
    9148:	sub	w2, w20, #0x30
    914c:	sub	w0, w20, #0x61
    9150:	and	w2, w2, #0xff
    9154:	and	w0, w0, #0xff
    9158:	cmp	w2, #0x9
    915c:	mov	x26, x21
    9160:	ccmp	w0, #0x19, #0x0, hi  // hi = pmore
    9164:	b.ls	9178 <d_name+0x2d0>  // b.plast
    9168:	cmp	w20, #0x43
    916c:	ccmp	w20, w25, #0x4, ne  // ne = any
    9170:	ccmp	w20, w24, #0x4, ne  // ne = any
    9174:	b.ne	9244 <d_name+0x39c>  // b.any
    9178:	mov	x0, x19
    917c:	bl	7508 <d_unqualified_name>
    9180:	mov	x21, x0
    9184:	cbz	x26, 91a0 <d_name+0x2f8>
    9188:	mov	w1, #0x1                   	// #1
    918c:	mov	x3, x21
    9190:	mov	x2, x26
    9194:	mov	x0, x19
    9198:	bl	0 <d_make_comp>
    919c:	mov	x21, x0
    91a0:	cmp	w20, #0x53
    91a4:	ldr	x1, [x19, #24]
    91a8:	b.eq	91d8 <d_name+0x330>  // b.none
    91ac:	ldrb	w20, [x1]
    91b0:	cmp	w20, #0x45
    91b4:	b.eq	922c <d_name+0x384>  // b.none
    91b8:	cbz	x21, 91e0 <d_name+0x338>
    91bc:	ldp	w0, w2, [x19, #56]
    91c0:	cmp	w0, w2
    91c4:	b.ge	91e0 <d_name+0x338>  // b.tcont
    91c8:	ldr	x3, [x19, #48]
    91cc:	add	w2, w0, #0x1
    91d0:	str	x21, [x3, w0, sxtw #3]
    91d4:	str	w2, [x19, #56]
    91d8:	ldrb	w20, [x1]
    91dc:	cbnz	w20, 9140 <d_name+0x298>
    91e0:	ldp	x25, x26, [sp, #64]
    91e4:	mov	x20, #0x0                   	// #0
    91e8:	ldp	x23, x24, [sp, #48]
    91ec:	str	xzr, [x22]
    91f0:	ldp	x21, x22, [sp, #32]
    91f4:	b	8f04 <d_name+0x5c>
    91f8:	ldrb	w0, [x1, #1]
    91fc:	and	w0, w0, #0xffffffdf
    9200:	and	w0, w0, #0xff
    9204:	cmp	w0, #0x54
    9208:	mov	x0, x19
    920c:	b.ne	9234 <d_name+0x38c>  // b.any
    9210:	mov	x26, x21
    9214:	bl	66e8 <__asan_cplus_demangle_type>
    9218:	mov	x21, x0
    921c:	mov	w1, #0x1                   	// #1
    9220:	cbnz	x26, 918c <d_name+0x2e4>
    9224:	ldr	x1, [x19, #24]
    9228:	b	91ac <d_name+0x304>
    922c:	mov	x26, x21
    9230:	b	9168 <d_name+0x2c0>
    9234:	mov	x26, x21
    9238:	bl	7508 <d_unqualified_name>
    923c:	mov	x21, x0
    9240:	b	921c <d_name+0x374>
    9244:	cmp	w20, #0x53
    9248:	b.eq	92f8 <d_name+0x450>  // b.none
    924c:	cmp	w20, #0x49
    9250:	b.eq	9384 <d_name+0x4dc>  // b.none
    9254:	cmp	w20, #0x54
    9258:	b.eq	93f0 <d_name+0x548>  // b.none
    925c:	cmp	w20, #0x45
    9260:	b.eq	9314 <d_name+0x46c>  // b.none
    9264:	cmp	w20, #0x4d
    9268:	ccmp	x21, #0x0, #0x4, eq  // eq = none
    926c:	b.eq	91e0 <d_name+0x338>  // b.none
    9270:	add	x1, x1, #0x1
    9274:	str	x1, [x19, #24]
    9278:	b	91d8 <d_name+0x330>
    927c:	stp	x21, x22, [sp, #32]
    9280:	add	x0, x0, #0x2
    9284:	str	x0, [x19, #24]
    9288:	mov	x0, x19
    928c:	bl	3b8 <d_compact_number>
    9290:	mov	w21, w0
    9294:	tbnz	w0, #31, 9070 <d_name+0x1c8>
    9298:	mov	x0, x19
    929c:	bl	8ea8 <d_name>
    92a0:	mov	x11, x0
    92a4:	cbz	x0, 92b8 <d_name+0x410>
    92a8:	ldr	w0, [x0]
    92ac:	sub	w0, w0, #0x46
    92b0:	tst	w0, #0xfffffffd
    92b4:	b.ne	9064 <d_name+0x1bc>  // b.any
    92b8:	ldp	w1, w0, [x19, #40]
    92bc:	cmp	w1, w0
    92c0:	b.ge	9400 <d_name+0x558>  // b.tcont
    92c4:	mov	w2, #0x18                  	// #24
    92c8:	add	w4, w1, #0x1
    92cc:	ldr	x0, [x19, #32]
    92d0:	smull	x1, w1, w2
    92d4:	mov	w2, #0x47                  	// #71
    92d8:	add	x3, x0, x1
    92dc:	str	wzr, [x3, #4]
    92e0:	str	w4, [x19, #40]
    92e4:	str	w2, [x0, x1]
    92e8:	str	x11, [x3, #8]
    92ec:	str	w21, [x3, #16]
    92f0:	ldp	x21, x22, [sp, #32]
    92f4:	b	8f80 <d_name+0xd8>
    92f8:	mov	x0, x19
    92fc:	mov	w1, #0x1                   	// #1
    9300:	bl	63d0 <d_substitution>
    9304:	mov	x21, x0
    9308:	cbnz	x26, 9188 <d_name+0x2e0>
    930c:	ldr	x1, [x19, #24]
    9310:	b	91d8 <d_name+0x330>
    9314:	str	x21, [x22]
    9318:	cbz	x21, 9358 <d_name+0x4b0>
    931c:	cbz	x23, 932c <d_name+0x484>
    9320:	ldr	x0, [sp, #104]
    9324:	str	x0, [x23, #8]
    9328:	str	x23, [sp, #104]
    932c:	ldr	x0, [x19, #24]
    9330:	ldrb	w1, [x0]
    9334:	cmp	w1, #0x45
    9338:	b.ne	9358 <d_name+0x4b0>  // b.any
    933c:	add	x0, x0, #0x1
    9340:	ldp	x21, x22, [sp, #32]
    9344:	ldp	x23, x24, [sp, #48]
    9348:	ldp	x25, x26, [sp, #64]
    934c:	str	x0, [x19, #24]
    9350:	ldr	x20, [sp, #104]
    9354:	b	8f04 <d_name+0x5c>
    9358:	ldp	x23, x24, [sp, #48]
    935c:	ldp	x25, x26, [sp, #64]
    9360:	mov	x20, #0x0                   	// #0
    9364:	ldp	x21, x22, [sp, #32]
    9368:	b	8f04 <d_name+0x5c>
    936c:	ldr	x0, [x20, #16]
    9370:	ldr	w1, [x0]
    9374:	cmp	w1, #0x29
    9378:	b.ne	8f8c <d_name+0xe4>  // b.any
    937c:	str	xzr, [x0, #8]
    9380:	b	8f8c <d_name+0xe4>
    9384:	cbz	x21, 91e0 <d_name+0x338>
    9388:	add	x1, x1, #0x1
    938c:	str	x1, [x19, #24]
    9390:	mov	x0, x19
    9394:	bl	8db0 <d_template_args_1>
    9398:	mov	x21, x0
    939c:	mov	w1, #0x4                   	// #4
    93a0:	b	918c <d_name+0x2e4>
    93a4:	add	x0, x0, #0x2
    93a8:	str	x0, [x19, #24]
    93ac:	mov	x0, x19
    93b0:	bl	5b0 <d_discriminator>
    93b4:	cbz	w0, 9078 <d_name+0x1d0>
    93b8:	mov	x0, x19
    93bc:	adrp	x1, 0 <d_make_comp>
    93c0:	mov	w2, #0xe                   	// #14
    93c4:	add	x1, x1, #0x0
    93c8:	bl	61c0 <d_make_name>
    93cc:	mov	x3, x0
    93d0:	b	8f80 <d_name+0xd8>
    93d4:	mov	x0, x19
    93d8:	str	x3, [sp, #88]
    93dc:	bl	5b0 <d_discriminator>
    93e0:	ldr	x3, [sp, #88]
    93e4:	cbnz	w0, 8f80 <d_name+0xd8>
    93e8:	mov	x20, #0x0                   	// #0
    93ec:	b	8f04 <d_name+0x5c>
    93f0:	mov	x0, x19
    93f4:	bl	430 <d_template_param>
    93f8:	mov	x21, x0
    93fc:	b	921c <d_name+0x374>
    9400:	mov	x3, #0x0                   	// #0
    9404:	ldp	x21, x22, [sp, #32]
    9408:	b	8f80 <d_name+0xd8>
    940c:	nop

0000000000009410 <d_encoding>:
    9410:	stp	x29, x30, [sp, #-80]!
    9414:	mov	w3, #0x54                  	// #84
    9418:	mov	x29, sp
    941c:	ldr	x2, [x0, #24]
    9420:	stp	x19, x20, [sp, #16]
    9424:	mov	x19, x0
    9428:	stp	x21, x22, [sp, #32]
    942c:	mov	w21, w1
    9430:	ldrb	w1, [x2]
    9434:	cmp	w1, #0x47
    9438:	ccmp	w1, w3, #0x4, ne  // ne = any
    943c:	b.ne	94c8 <d_encoding+0xb8>  // b.any
    9440:	ldr	w3, [x0, #72]
    9444:	add	w1, w3, #0x14
    9448:	str	w1, [x0, #72]
    944c:	ldrb	w1, [x2]
    9450:	cmp	w1, #0x54
    9454:	b.eq	9660 <d_encoding+0x250>  // b.none
    9458:	cmp	w1, #0x47
    945c:	b.ne	9648 <d_encoding+0x238>  // b.any
    9460:	add	x1, x2, #0x1
    9464:	str	x1, [x0, #24]
    9468:	ldrb	w1, [x2, #1]
    946c:	cbz	w1, 9648 <d_encoding+0x238>
    9470:	add	x1, x2, #0x2
    9474:	str	x1, [x0, #24]
    9478:	ldrb	w1, [x2, #1]
    947c:	cmp	w1, #0x54
    9480:	b.eq	99c4 <d_encoding+0x5b4>  // b.none
    9484:	b.hi	95bc <d_encoding+0x1ac>  // b.pmore
    9488:	cmp	w1, #0x41
    948c:	b.eq	999c <d_encoding+0x58c>  // b.none
    9490:	cmp	w1, #0x52
    9494:	b.ne	9648 <d_encoding+0x238>  // b.any
    9498:	bl	8ea8 <d_name>
    949c:	mov	x11, x0
    94a0:	mov	x0, x19
    94a4:	bl	350 <d_number_component>
    94a8:	mov	x3, x0
    94ac:	mov	x0, x19
    94b0:	mov	x2, x11
    94b4:	ldp	x19, x20, [sp, #16]
    94b8:	mov	w1, #0x16                  	// #22
    94bc:	ldp	x21, x22, [sp, #32]
    94c0:	ldp	x29, x30, [sp], #80
    94c4:	b	0 <d_make_comp>
    94c8:	bl	8ea8 <d_name>
    94cc:	mov	x20, x0
    94d0:	cbz	x0, 9648 <d_encoding+0x238>
    94d4:	cbz	w21, 9524 <d_encoding+0x114>
    94d8:	ldr	w0, [x19, #16]
    94dc:	tbnz	w0, #0, 9524 <d_encoding+0x114>
    94e0:	mov	x1, #0x1f                  	// #31
    94e4:	mov	x2, #0x1                   	// #1
    94e8:	movk	x1, #0x1a, lsl #48
    94ec:	ldr	w3, [x20]
    94f0:	sub	w0, w3, #0x1c
    94f4:	cmp	w0, #0x34
    94f8:	b.hi	9508 <d_encoding+0xf8>  // b.pmore
    94fc:	lsl	x0, x2, x0
    9500:	tst	x0, x1
    9504:	b.ne	9800 <d_encoding+0x3f0>  // b.any
    9508:	cmp	w3, #0x2
    950c:	b.eq	9808 <d_encoding+0x3f8>  // b.none
    9510:	mov	x0, x20
    9514:	ldp	x19, x20, [sp, #16]
    9518:	ldp	x21, x22, [sp, #32]
    951c:	ldp	x29, x30, [sp], #80
    9520:	ret
    9524:	ldr	x0, [x19, #24]
    9528:	ldrb	w0, [x0]
    952c:	cmp	w0, #0x45
    9530:	ccmp	w0, #0x0, #0x4, ne  // ne = any
    9534:	b.eq	9510 <d_encoding+0x100>  // b.none
    9538:	mov	x1, #0x1f                  	// #31
    953c:	mov	x4, x20
    9540:	mov	x2, #0x1                   	// #1
    9544:	movk	x1, #0x1a, lsl #48
    9548:	ldr	w3, [x4]
    954c:	cmp	w3, #0x4
    9550:	b.eq	9850 <d_encoding+0x440>  // b.none
    9554:	sub	w0, w3, #0x1c
    9558:	b.hi	96c8 <d_encoding+0x2b8>  // b.pmore
    955c:	cmp	w3, #0x2
    9560:	b.ne	956c <d_encoding+0x15c>  // b.any
    9564:	ldr	x4, [x4, #16]
    9568:	cbnz	x4, 9548 <d_encoding+0x138>
    956c:	mov	w1, #0x0                   	// #0
    9570:	mov	x0, x19
    9574:	bl	79b0 <d_bare_function_type>
    9578:	mov	x3, x0
    957c:	cbz	x0, 9648 <d_encoding+0x238>
    9580:	cbnz	w21, 95a0 <d_encoding+0x190>
    9584:	ldr	w0, [x20]
    9588:	cmp	w0, #0x2
    958c:	b.ne	95a0 <d_encoding+0x190>  // b.any
    9590:	ldr	w0, [x3]
    9594:	cmp	w0, #0x29
    9598:	b.ne	95a0 <d_encoding+0x190>  // b.any
    959c:	str	xzr, [x3, #8]
    95a0:	mov	x2, x20
    95a4:	mov	x0, x19
    95a8:	ldp	x19, x20, [sp, #16]
    95ac:	mov	w1, #0x3                   	// #3
    95b0:	ldp	x21, x22, [sp, #32]
    95b4:	ldp	x29, x30, [sp], #80
    95b8:	b	0 <d_make_comp>
    95bc:	cmp	w1, #0x56
    95c0:	b.eq	9978 <d_encoding+0x568>  // b.none
    95c4:	cmp	w1, #0x72
    95c8:	b.ne	9648 <d_encoding+0x238>  // b.any
    95cc:	add	x0, x0, #0x18
    95d0:	bl	280 <d_number.isra.0>
    95d4:	cmp	w0, #0x1
    95d8:	b.le	9648 <d_encoding+0x238>
    95dc:	ldr	x1, [x19, #24]
    95e0:	ldrb	w2, [x1]
    95e4:	cbz	w2, 9648 <d_encoding+0x238>
    95e8:	add	x8, x1, #0x1
    95ec:	str	x8, [x19, #24]
    95f0:	ldrb	w1, [x1]
    95f4:	cmp	w1, #0x5f
    95f8:	b.ne	9648 <d_encoding+0x238>  // b.any
    95fc:	sub	w21, w0, #0x1
    9600:	mov	w22, #0x41                  	// #65
    9604:	stp	x23, x24, [sp, #48]
    9608:	mov	w23, #0x18                  	// #24
    960c:	str	x25, [sp, #64]
    9610:	mov	x25, #0x0                   	// #0
    9614:	ldrb	w0, [x8]
    9618:	cbz	w0, 9640 <d_encoding+0x230>
    961c:	cmp	w0, #0x24
    9620:	b.ne	9920 <d_encoding+0x510>  // b.any
    9624:	ldrb	w0, [x8, #1]
    9628:	cmp	w0, #0x53
    962c:	b.eq	9a14 <d_encoding+0x604>  // b.none
    9630:	cmp	w0, #0x5f
    9634:	b.eq	9894 <d_encoding+0x484>  // b.none
    9638:	cmp	w0, #0x24
    963c:	b.eq	9898 <d_encoding+0x488>  // b.none
    9640:	ldp	x23, x24, [sp, #48]
    9644:	ldr	x25, [sp, #64]
    9648:	mov	x20, #0x0                   	// #0
    964c:	mov	x0, x20
    9650:	ldp	x19, x20, [sp, #16]
    9654:	ldp	x21, x22, [sp, #32]
    9658:	ldp	x29, x30, [sp], #80
    965c:	ret
    9660:	add	x1, x2, #0x1
    9664:	str	x1, [x0, #24]
    9668:	ldrb	w1, [x2, #1]
    966c:	cbz	w1, 9648 <d_encoding+0x238>
    9670:	add	x1, x2, #0x2
    9674:	str	x1, [x0, #24]
    9678:	ldrb	w1, [x2, #1]
    967c:	cmp	w1, #0x53
    9680:	b.eq	9b6c <d_encoding+0x75c>  // b.none
    9684:	b.hi	9748 <d_encoding+0x338>  // b.pmore
    9688:	cmp	w1, #0x48
    968c:	b.eq	9b48 <d_encoding+0x738>  // b.none
    9690:	b.hi	9714 <d_encoding+0x304>  // b.pmore
    9694:	cmp	w1, #0x43
    9698:	b.eq	9ae8 <d_encoding+0x6d8>  // b.none
    969c:	cmp	w1, #0x46
    96a0:	b.ne	96e8 <d_encoding+0x2d8>  // b.any
    96a4:	bl	66e8 <__asan_cplus_demangle_type>
    96a8:	mov	x2, x0
    96ac:	mov	x0, x19
    96b0:	mov	x3, #0x0                   	// #0
    96b4:	ldp	x19, x20, [sp, #16]
    96b8:	mov	w1, #0xe                   	// #14
    96bc:	ldp	x21, x22, [sp, #32]
    96c0:	ldp	x29, x30, [sp], #80
    96c4:	b	0 <d_make_comp>
    96c8:	cmp	w0, #0x34
    96cc:	b.hi	956c <d_encoding+0x15c>  // b.pmore
    96d0:	lsl	x0, x2, x0
    96d4:	tst	x0, x1
    96d8:	b.eq	956c <d_encoding+0x15c>  // b.none
    96dc:	ldr	x4, [x4, #8]
    96e0:	cbnz	x4, 9548 <d_encoding+0x138>
    96e4:	b	956c <d_encoding+0x15c>
    96e8:	cmp	w1, #0x41
    96ec:	b.ne	9648 <d_encoding+0x238>  // b.any
    96f0:	bl	8d08 <d_template_arg>
    96f4:	mov	x2, x0
    96f8:	mov	x0, x19
    96fc:	mov	x3, #0x0                   	// #0
    9700:	ldp	x19, x20, [sp, #16]
    9704:	mov	w1, #0x30                  	// #48
    9708:	ldp	x21, x22, [sp, #32]
    970c:	ldp	x29, x30, [sp], #80
    9710:	b	0 <d_make_comp>
    9714:	cmp	w1, #0x49
    9718:	b.eq	9a64 <d_encoding+0x654>  // b.none
    971c:	cmp	w1, #0x4a
    9720:	b.ne	9648 <d_encoding+0x238>  // b.any
    9724:	bl	66e8 <__asan_cplus_demangle_type>
    9728:	mov	x2, x0
    972c:	mov	x0, x19
    9730:	mov	x3, #0x0                   	// #0
    9734:	ldp	x19, x20, [sp, #16]
    9738:	mov	w1, #0x12                  	// #18
    973c:	ldp	x21, x22, [sp, #32]
    9740:	ldp	x29, x30, [sp], #80
    9744:	b	0 <d_make_comp>
    9748:	cmp	w1, #0x63
    974c:	b.eq	9a1c <d_encoding+0x60c>  // b.none
    9750:	b.hi	9788 <d_encoding+0x378>  // b.pmore
    9754:	cmp	w1, #0x56
    9758:	b.eq	9abc <d_encoding+0x6ac>  // b.none
    975c:	cmp	w1, #0x57
    9760:	b.ne	97cc <d_encoding+0x3bc>  // b.any
    9764:	bl	8ea8 <d_name>
    9768:	mov	x2, x0
    976c:	mov	x0, x19
    9770:	mov	x3, #0x0                   	// #0
    9774:	ldp	x19, x20, [sp, #16]
    9778:	mov	w1, #0x15                  	// #21
    977c:	ldp	x21, x22, [sp, #32]
    9780:	ldp	x29, x30, [sp], #80
    9784:	b	0 <d_make_comp>
    9788:	cmp	w1, #0x68
    978c:	b.eq	9a88 <d_encoding+0x678>  // b.none
    9790:	cmp	w1, #0x76
    9794:	b.ne	9648 <d_encoding+0x238>  // b.any
    9798:	bl	4b0 <d_call_offset>
    979c:	cbz	w0, 9648 <d_encoding+0x238>
    97a0:	mov	x0, x19
    97a4:	mov	w1, #0x0                   	// #0
    97a8:	bl	9410 <d_encoding>
    97ac:	mov	x2, x0
    97b0:	mov	x0, x19
    97b4:	mov	x3, #0x0                   	// #0
    97b8:	ldp	x19, x20, [sp, #16]
    97bc:	mov	w1, #0x10                  	// #16
    97c0:	ldp	x21, x22, [sp, #32]
    97c4:	ldp	x29, x30, [sp], #80
    97c8:	b	0 <d_make_comp>
    97cc:	cmp	w1, #0x54
    97d0:	b.ne	9648 <d_encoding+0x238>  // b.any
    97d4:	add	w3, w3, #0xa
    97d8:	str	w3, [x0, #72]
    97dc:	bl	66e8 <__asan_cplus_demangle_type>
    97e0:	mov	x2, x0
    97e4:	mov	x0, x19
    97e8:	mov	x3, #0x0                   	// #0
    97ec:	ldp	x19, x20, [sp, #16]
    97f0:	mov	w1, #0xa                   	// #10
    97f4:	ldp	x21, x22, [sp, #32]
    97f8:	ldp	x29, x30, [sp], #80
    97fc:	b	0 <d_make_comp>
    9800:	ldr	x20, [x20, #8]
    9804:	b	94ec <d_encoding+0xdc>
    9808:	ldr	x3, [x20, #16]
    980c:	mov	x1, #0x1f                  	// #31
    9810:	mov	x2, #0x1                   	// #1
    9814:	movk	x1, #0x1a, lsl #48
    9818:	ldr	w0, [x3]
    981c:	sub	w0, w0, #0x1c
    9820:	cmp	w0, #0x34
    9824:	b.hi	9510 <d_encoding+0x100>  // b.pmore
    9828:	lsl	x0, x2, x0
    982c:	tst	x0, x1
    9830:	b.eq	9510 <d_encoding+0x100>  // b.none
    9834:	ldr	x3, [x3, #8]
    9838:	str	x3, [x20, #16]
    983c:	ldr	w0, [x3]
    9840:	sub	w0, w0, #0x1c
    9844:	cmp	w0, #0x34
    9848:	b.ls	9828 <d_encoding+0x418>  // b.plast
    984c:	b	9510 <d_encoding+0x100>
    9850:	ldr	x1, [x4, #8]
    9854:	cbz	x1, 9880 <d_encoding+0x470>
    9858:	ldr	w0, [x1]
    985c:	sub	w2, w0, #0x1
    9860:	cmp	w0, #0x8
    9864:	b.hi	9888 <d_encoding+0x478>  // b.pmore
    9868:	cmp	w0, #0x6
    986c:	b.hi	956c <d_encoding+0x15c>  // b.pmore
    9870:	cmp	w2, #0x1
    9874:	b.hi	9880 <d_encoding+0x470>  // b.pmore
    9878:	ldr	x1, [x1, #16]
    987c:	cbnz	x1, 9858 <d_encoding+0x448>
    9880:	mov	w1, #0x1                   	// #1
    9884:	b	9570 <d_encoding+0x160>
    9888:	cmp	w0, #0x35
    988c:	cset	w1, ne  // ne = any
    9890:	b	9570 <d_encoding+0x160>
    9894:	mov	w0, #0x2e                  	// #46
    9898:	ldp	w1, w2, [x19, #40]
    989c:	ldr	x8, [x19, #24]
    98a0:	cmp	w1, w2
    98a4:	add	x8, x8, #0x2
    98a8:	b.ge	9b90 <d_encoding+0x780>  // b.tcont
    98ac:	ldr	x4, [x19, #32]
    98b0:	smull	x2, w1, w23
    98b4:	add	w1, w1, #0x1
    98b8:	sub	w21, w21, #0x2
    98bc:	add	x3, x4, x2
    98c0:	str	wzr, [x3, #4]
    98c4:	str	w1, [x19, #40]
    98c8:	str	w22, [x4, x2]
    98cc:	str	w0, [x3, #8]
    98d0:	str	x8, [x19, #24]
    98d4:	cbz	x25, 9a0c <d_encoding+0x5fc>
    98d8:	mov	x2, x25
    98dc:	mov	x0, x19
    98e0:	mov	w1, #0x40                  	// #64
    98e4:	bl	0 <d_make_comp>
    98e8:	mov	x25, x0
    98ec:	cbz	x0, 9640 <d_encoding+0x230>
    98f0:	cmp	w21, #0x0
    98f4:	b.gt	9614 <d_encoding+0x204>
    98f8:	mov	x2, x25
    98fc:	mov	x0, x19
    9900:	ldp	x19, x20, [sp, #16]
    9904:	mov	x3, #0x0                   	// #0
    9908:	ldp	x21, x22, [sp, #32]
    990c:	mov	w1, #0x3f                  	// #63
    9910:	ldp	x23, x24, [sp, #48]
    9914:	ldr	x25, [sp, #64]
    9918:	ldp	x29, x30, [sp], #80
    991c:	b	0 <d_make_comp>
    9920:	mov	x20, #0x1                   	// #1
    9924:	b	992c <d_encoding+0x51c>
    9928:	mov	x20, x3
    992c:	cmp	w21, w20
    9930:	mov	w24, w20
    9934:	b.le	994c <d_encoding+0x53c>
    9938:	ldrb	w1, [x8, x20]
    993c:	add	x3, x20, #0x1
    9940:	cmp	w1, #0x24
    9944:	ccmp	w1, #0x0, #0x4, ne  // ne = any
    9948:	b.ne	9928 <d_encoding+0x518>  // b.any
    994c:	mov	x1, x8
    9950:	mov	w2, w24
    9954:	mov	x0, x19
    9958:	bl	61c0 <d_make_name>
    995c:	ldr	x8, [x19, #24]
    9960:	sub	w21, w21, w24
    9964:	mov	x3, x0
    9968:	add	x8, x8, x20
    996c:	str	x8, [x19, #24]
    9970:	cbnz	x0, 98d4 <d_encoding+0x4c4>
    9974:	b	9640 <d_encoding+0x230>
    9978:	bl	8ea8 <d_name>
    997c:	mov	x2, x0
    9980:	mov	x0, x19
    9984:	mov	x3, #0x0                   	// #0
    9988:	ldp	x19, x20, [sp, #16]
    998c:	mov	w1, #0x13                  	// #19
    9990:	ldp	x21, x22, [sp, #32]
    9994:	ldp	x29, x30, [sp], #80
    9998:	b	0 <d_make_comp>
    999c:	mov	w1, #0x0                   	// #0
    99a0:	bl	9410 <d_encoding>
    99a4:	mov	x2, x0
    99a8:	mov	x0, x19
    99ac:	ldp	x19, x20, [sp, #16]
    99b0:	mov	x3, #0x0                   	// #0
    99b4:	ldp	x21, x22, [sp, #32]
    99b8:	mov	w1, #0x17                  	// #23
    99bc:	ldp	x29, x30, [sp], #80
    99c0:	b	0 <d_make_comp>
    99c4:	ldrb	w1, [x2, #2]
    99c8:	cbz	w1, 99e0 <d_encoding+0x5d0>
    99cc:	add	x1, x2, #0x3
    99d0:	str	x1, [x0, #24]
    99d4:	ldrb	w1, [x2, #2]
    99d8:	cmp	w1, #0x6e
    99dc:	b.eq	9ba4 <d_encoding+0x794>  // b.none
    99e0:	mov	x0, x19
    99e4:	mov	w1, #0x0                   	// #0
    99e8:	bl	9410 <d_encoding>
    99ec:	mov	x2, x0
    99f0:	mov	x0, x19
    99f4:	mov	x3, #0x0                   	// #0
    99f8:	ldp	x19, x20, [sp, #16]
    99fc:	mov	w1, #0x49                  	// #73
    9a00:	ldp	x21, x22, [sp, #32]
    9a04:	ldp	x29, x30, [sp], #80
    9a08:	b	0 <d_make_comp>
    9a0c:	mov	x25, x3
    9a10:	b	98f0 <d_encoding+0x4e0>
    9a14:	mov	w0, #0x2f                  	// #47
    9a18:	b	9898 <d_encoding+0x488>
    9a1c:	mov	w1, #0x0                   	// #0
    9a20:	bl	4b0 <d_call_offset>
    9a24:	cbz	w0, 9648 <d_encoding+0x238>
    9a28:	mov	x0, x19
    9a2c:	mov	w1, #0x0                   	// #0
    9a30:	bl	4b0 <d_call_offset>
    9a34:	cbz	w0, 9648 <d_encoding+0x238>
    9a38:	mov	x0, x19
    9a3c:	mov	w1, #0x0                   	// #0
    9a40:	bl	9410 <d_encoding>
    9a44:	mov	x2, x0
    9a48:	mov	x0, x19
    9a4c:	mov	x3, #0x0                   	// #0
    9a50:	ldp	x19, x20, [sp, #16]
    9a54:	mov	w1, #0x11                  	// #17
    9a58:	ldp	x21, x22, [sp, #32]
    9a5c:	ldp	x29, x30, [sp], #80
    9a60:	b	0 <d_make_comp>
    9a64:	bl	66e8 <__asan_cplus_demangle_type>
    9a68:	mov	x2, x0
    9a6c:	mov	x0, x19
    9a70:	mov	x3, #0x0                   	// #0
    9a74:	ldp	x19, x20, [sp, #16]
    9a78:	mov	w1, #0xc                   	// #12
    9a7c:	ldp	x21, x22, [sp, #32]
    9a80:	ldp	x29, x30, [sp], #80
    9a84:	b	0 <d_make_comp>
    9a88:	bl	4b0 <d_call_offset>
    9a8c:	cbz	w0, 9648 <d_encoding+0x238>
    9a90:	mov	x0, x19
    9a94:	mov	w1, #0x0                   	// #0
    9a98:	bl	9410 <d_encoding>
    9a9c:	mov	x2, x0
    9aa0:	mov	x0, x19
    9aa4:	mov	x3, #0x0                   	// #0
    9aa8:	ldp	x19, x20, [sp, #16]
    9aac:	mov	w1, #0xf                   	// #15
    9ab0:	ldp	x21, x22, [sp, #32]
    9ab4:	ldp	x29, x30, [sp], #80
    9ab8:	b	0 <d_make_comp>
    9abc:	add	w3, w3, #0xf
    9ac0:	str	w3, [x0, #72]
    9ac4:	bl	66e8 <__asan_cplus_demangle_type>
    9ac8:	mov	x2, x0
    9acc:	mov	x0, x19
    9ad0:	mov	x3, #0x0                   	// #0
    9ad4:	ldp	x19, x20, [sp, #16]
    9ad8:	mov	w1, #0x9                   	// #9
    9adc:	ldp	x21, x22, [sp, #32]
    9ae0:	ldp	x29, x30, [sp], #80
    9ae4:	b	0 <d_make_comp>
    9ae8:	bl	66e8 <__asan_cplus_demangle_type>
    9aec:	mov	x20, x0
    9af0:	add	x0, x19, #0x18
    9af4:	bl	280 <d_number.isra.0>
    9af8:	tbnz	w0, #31, 9648 <d_encoding+0x238>
    9afc:	ldr	x0, [x19, #24]
    9b00:	ldrb	w1, [x0]
    9b04:	cmp	w1, #0x5f
    9b08:	b.ne	9648 <d_encoding+0x238>  // b.any
    9b0c:	add	x0, x0, #0x1
    9b10:	str	x0, [x19, #24]
    9b14:	mov	x0, x19
    9b18:	bl	66e8 <__asan_cplus_demangle_type>
    9b1c:	mov	x2, x0
    9b20:	ldr	w1, [x19, #72]
    9b24:	mov	x3, x20
    9b28:	ldp	x21, x22, [sp, #32]
    9b2c:	add	w1, w1, #0x5
    9b30:	str	w1, [x19, #72]
    9b34:	mov	x0, x19
    9b38:	ldp	x19, x20, [sp, #16]
    9b3c:	mov	w1, #0xb                   	// #11
    9b40:	ldp	x29, x30, [sp], #80
    9b44:	b	0 <d_make_comp>
    9b48:	bl	8ea8 <d_name>
    9b4c:	mov	x2, x0
    9b50:	mov	x0, x19
    9b54:	mov	x3, #0x0                   	// #0
    9b58:	ldp	x19, x20, [sp, #16]
    9b5c:	mov	w1, #0x14                  	// #20
    9b60:	ldp	x21, x22, [sp, #32]
    9b64:	ldp	x29, x30, [sp], #80
    9b68:	b	0 <d_make_comp>
    9b6c:	bl	66e8 <__asan_cplus_demangle_type>
    9b70:	mov	x2, x0
    9b74:	mov	x0, x19
    9b78:	mov	x3, #0x0                   	// #0
    9b7c:	ldp	x19, x20, [sp, #16]
    9b80:	mov	w1, #0xd                   	// #13
    9b84:	ldp	x21, x22, [sp, #32]
    9b88:	ldp	x29, x30, [sp], #80
    9b8c:	b	0 <d_make_comp>
    9b90:	mov	x20, #0x0                   	// #0
    9b94:	ldp	x23, x24, [sp, #48]
    9b98:	ldr	x25, [sp, #64]
    9b9c:	str	x8, [x19, #24]
    9ba0:	b	9510 <d_encoding+0x100>
    9ba4:	mov	w1, #0x0                   	// #0
    9ba8:	bl	9410 <d_encoding>
    9bac:	mov	x2, x0
    9bb0:	mov	x0, x19
    9bb4:	ldp	x19, x20, [sp, #16]
    9bb8:	mov	x3, #0x0                   	// #0
    9bbc:	ldp	x21, x22, [sp, #32]
    9bc0:	mov	w1, #0x4a                  	// #74
    9bc4:	ldp	x29, x30, [sp], #80
    9bc8:	b	0 <d_make_comp>
    9bcc:	nop

0000000000009bd0 <__asan_cplus_demangle_mangled_name>:
    9bd0:	stp	x29, x30, [sp, #-48]!
    9bd4:	mov	x29, sp
    9bd8:	ldr	x2, [x0, #24]
    9bdc:	stp	x19, x20, [sp, #16]
    9be0:	mov	x19, x0
    9be4:	str	x21, [sp, #32]
    9be8:	mov	w21, w1
    9bec:	ldrb	w3, [x2]
    9bf0:	cmp	w3, #0x5f
    9bf4:	b.eq	9c34 <__asan_cplus_demangle_mangled_name+0x64>  // b.none
    9bf8:	cbnz	w1, 9c04 <__asan_cplus_demangle_mangled_name+0x34>
    9bfc:	cmp	w3, #0x5a
    9c00:	b.eq	9c1c <__asan_cplus_demangle_mangled_name+0x4c>  // b.none
    9c04:	mov	x20, #0x0                   	// #0
    9c08:	mov	x0, x20
    9c0c:	ldp	x19, x20, [sp, #16]
    9c10:	ldr	x21, [sp, #32]
    9c14:	ldp	x29, x30, [sp], #48
    9c18:	ret
    9c1c:	add	x2, x2, #0x1
    9c20:	ldr	x21, [sp, #32]
    9c24:	str	x2, [x19, #24]
    9c28:	ldp	x19, x20, [sp, #16]
    9c2c:	ldp	x29, x30, [sp], #48
    9c30:	b	9410 <d_encoding>
    9c34:	add	x3, x2, #0x1
    9c38:	str	x3, [x0, #24]
    9c3c:	ldrb	w3, [x2, #1]
    9c40:	cmp	w3, #0x5a
    9c44:	b.ne	9c04 <__asan_cplus_demangle_mangled_name+0x34>  // b.any
    9c48:	add	x2, x2, #0x2
    9c4c:	str	x2, [x0, #24]
    9c50:	bl	9410 <d_encoding>
    9c54:	mov	x20, x0
    9c58:	cbz	w21, 9c08 <__asan_cplus_demangle_mangled_name+0x38>
    9c5c:	ldr	w0, [x19, #16]
    9c60:	tbz	w0, #0, 9c08 <__asan_cplus_demangle_mangled_name+0x38>
    9c64:	ldr	x1, [x19, #24]
    9c68:	ldrb	w0, [x1]
    9c6c:	cmp	w0, #0x2e
    9c70:	b.ne	9c08 <__asan_cplus_demangle_mangled_name+0x38>  // b.any
    9c74:	ldrb	w2, [x1, #1]
    9c78:	sub	w0, w2, #0x61
    9c7c:	cmp	w2, #0x5f
    9c80:	and	w0, w0, #0xff
    9c84:	ccmp	w0, #0x19, #0x0, ne  // ne = any
    9c88:	b.ls	9d4c <__asan_cplus_demangle_mangled_name+0x17c>  // b.plast
    9c8c:	nop
    9c90:	sub	w2, w2, #0x30
    9c94:	and	w2, w2, #0xff
    9c98:	cmp	w2, #0x9
    9c9c:	b.hi	9c08 <__asan_cplus_demangle_mangled_name+0x38>  // b.pmore
    9ca0:	ldrb	w0, [x1]
    9ca4:	mov	x2, x1
    9ca8:	cmp	w0, #0x2e
    9cac:	b.ne	9cfc <__asan_cplus_demangle_mangled_name+0x12c>  // b.any
    9cb0:	ldrb	w3, [x2, #1]
    9cb4:	sub	w3, w3, #0x30
    9cb8:	and	w3, w3, #0xff
    9cbc:	cmp	w3, #0x9
    9cc0:	b.hi	9cfc <__asan_cplus_demangle_mangled_name+0x12c>  // b.pmore
    9cc4:	ldrb	w0, [x2, #2]
    9cc8:	add	x2, x2, #0x2
    9ccc:	sub	w3, w0, #0x30
    9cd0:	and	w3, w3, #0xff
    9cd4:	cmp	w3, #0x9
    9cd8:	b.hi	9ca8 <__asan_cplus_demangle_mangled_name+0xd8>  // b.pmore
    9cdc:	nop
    9ce0:	ldrb	w0, [x2, #1]!
    9ce4:	sub	w3, w0, #0x30
    9ce8:	and	w3, w3, #0xff
    9cec:	cmp	w3, #0x9
    9cf0:	b.ls	9ce0 <__asan_cplus_demangle_mangled_name+0x110>  // b.plast
    9cf4:	cmp	w0, #0x2e
    9cf8:	b.eq	9cb0 <__asan_cplus_demangle_mangled_name+0xe0>  // b.none
    9cfc:	str	x2, [x19, #24]
    9d00:	mov	x0, x19
    9d04:	sub	w2, w2, w1
    9d08:	bl	61c0 <d_make_name>
    9d0c:	mov	x3, x0
    9d10:	mov	x2, x20
    9d14:	mov	w1, #0x4e                  	// #78
    9d18:	mov	x0, x19
    9d1c:	bl	0 <d_make_comp>
    9d20:	ldr	x1, [x19, #24]
    9d24:	mov	x20, x0
    9d28:	ldrb	w0, [x1]
    9d2c:	cmp	w0, #0x2e
    9d30:	b.ne	9c08 <__asan_cplus_demangle_mangled_name+0x38>  // b.any
    9d34:	ldrb	w2, [x1, #1]
    9d38:	sub	w0, w2, #0x61
    9d3c:	cmp	w2, #0x5f
    9d40:	and	w0, w0, #0xff
    9d44:	ccmp	w0, #0x19, #0x0, ne  // ne = any
    9d48:	b.hi	9c90 <__asan_cplus_demangle_mangled_name+0xc0>  // b.pmore
    9d4c:	ldrb	w0, [x1, #2]
    9d50:	add	x2, x1, #0x2
    9d54:	b	9d5c <__asan_cplus_demangle_mangled_name+0x18c>
    9d58:	ldrb	w0, [x2, #1]!
    9d5c:	sub	w3, w0, #0x61
    9d60:	cmp	w0, #0x5f
    9d64:	and	w3, w3, #0xff
    9d68:	ccmp	w3, #0x19, #0x0, ne  // ne = any
    9d6c:	b.ls	9d58 <__asan_cplus_demangle_mangled_name+0x188>  // b.plast
    9d70:	b	9ca8 <__asan_cplus_demangle_mangled_name+0xd8>
    9d74:	nop

0000000000009d78 <d_expr_primary>:
    9d78:	ldr	x1, [x0, #24]
    9d7c:	ldrb	w2, [x1]
    9d80:	cmp	w2, #0x4c
    9d84:	b.ne	9e60 <d_expr_primary+0xe8>  // b.any
    9d88:	stp	x29, x30, [sp, #-48]!
    9d8c:	add	x2, x1, #0x1
    9d90:	mov	x29, sp
    9d94:	stp	x19, x20, [sp, #16]
    9d98:	mov	x19, x0
    9d9c:	str	x2, [x0, #24]
    9da0:	mov	w2, #0x5a                  	// #90
    9da4:	ldrb	w1, [x1, #1]
    9da8:	cmp	w1, #0x5f
    9dac:	ccmp	w1, w2, #0x4, ne  // ne = any
    9db0:	b.ne	9de0 <d_expr_primary+0x68>  // b.any
    9db4:	mov	w1, #0x0                   	// #0
    9db8:	bl	9bd0 <__asan_cplus_demangle_mangled_name>
    9dbc:	ldr	x1, [x19, #24]
    9dc0:	ldrb	w2, [x1]
    9dc4:	cmp	w2, #0x45
    9dc8:	b.ne	9e50 <d_expr_primary+0xd8>  // b.any
    9dcc:	add	x1, x1, #0x1
    9dd0:	str	x1, [x19, #24]
    9dd4:	ldp	x19, x20, [sp, #16]
    9dd8:	ldp	x29, x30, [sp], #48
    9ddc:	ret
    9de0:	bl	66e8 <__asan_cplus_demangle_type>
    9de4:	mov	x20, x0
    9de8:	cbz	x0, 9e50 <d_expr_primary+0xd8>
    9dec:	ldr	w0, [x0]
    9df0:	str	x21, [sp, #32]
    9df4:	cmp	w0, #0x27
    9df8:	b.eq	9e90 <d_expr_primary+0x118>  // b.none
    9dfc:	ldr	x1, [x19, #24]
    9e00:	mov	w21, #0x3d                  	// #61
    9e04:	ldrb	w4, [x1]
    9e08:	cmp	w4, #0x6e
    9e0c:	b.ne	9e24 <d_expr_primary+0xac>  // b.any
    9e10:	add	x0, x1, #0x1
    9e14:	str	x0, [x19, #24]
    9e18:	mov	w21, #0x3e                  	// #62
    9e1c:	ldrb	w4, [x1, #1]
    9e20:	mov	x1, x0
    9e24:	cmp	w4, #0x45
    9e28:	b.eq	9eb0 <d_expr_primary+0x138>  // b.none
    9e2c:	add	x3, x1, #0x1
    9e30:	b	9e44 <d_expr_primary+0xcc>
    9e34:	str	x3, [x19, #24]
    9e38:	ldrb	w4, [x3], #1
    9e3c:	cmp	w4, #0x45
    9e40:	b.eq	9e68 <d_expr_primary+0xf0>  // b.none
    9e44:	mov	x2, x3
    9e48:	cbnz	w4, 9e34 <d_expr_primary+0xbc>
    9e4c:	ldr	x21, [sp, #32]
    9e50:	mov	x0, #0x0                   	// #0
    9e54:	ldp	x19, x20, [sp, #16]
    9e58:	ldp	x29, x30, [sp], #48
    9e5c:	ret
    9e60:	mov	x0, #0x0                   	// #0
    9e64:	ret
    9e68:	sub	w2, w2, w1
    9e6c:	mov	x0, x19
    9e70:	bl	61c0 <d_make_name>
    9e74:	mov	w1, w21
    9e78:	mov	x3, x0
    9e7c:	mov	x2, x20
    9e80:	mov	x0, x19
    9e84:	bl	0 <d_make_comp>
    9e88:	ldr	x21, [sp, #32]
    9e8c:	b	9dbc <d_expr_primary+0x44>
    9e90:	ldr	x0, [x20, #8]
    9e94:	ldr	w1, [x0, #28]
    9e98:	cbz	w1, 9dfc <d_expr_primary+0x84>
    9e9c:	ldr	w1, [x0, #8]
    9ea0:	ldr	w0, [x19, #72]
    9ea4:	sub	w0, w0, w1
    9ea8:	str	w0, [x19, #72]
    9eac:	b	9dfc <d_expr_primary+0x84>
    9eb0:	mov	w2, #0x0                   	// #0
    9eb4:	b	9e6c <d_expr_primary+0xf4>

0000000000009eb8 <__asan_cplus_demangle_print_callback>:
    9eb8:	stp	x29, x30, [sp, #-416]!
    9ebc:	mov	w4, w0
    9ec0:	mov	x5, x1
    9ec4:	mov	x29, sp
    9ec8:	stp	x19, x20, [sp, #16]
    9ecc:	add	x19, x29, #0x28
    9ed0:	mov	x0, x19
    9ed4:	str	xzr, [x29, #296]
    9ed8:	strb	wzr, [x29, #304]
    9edc:	stp	x2, x3, [x29, #312]
    9ee0:	stp	xzr, xzr, [x29, #328]
    9ee4:	stp	xzr, xzr, [x29, #344]
    9ee8:	stp	xzr, xzr, [x29, #360]
    9eec:	stp	xzr, xzr, [x29, #376]
    9ef0:	stp	xzr, xzr, [x29, #392]
    9ef4:	bl	f0 <d_count_templates_scopes>
    9ef8:	ldr	w0, [x29, #348]
    9efc:	cmp	w0, #0x7ff
    9f00:	b.gt	9f08 <__asan_cplus_demangle_print_callback+0x50>
    9f04:	str	wzr, [x29, #348]
    9f08:	ldr	w7, [x29, #404]
    9f0c:	mov	w6, #0x1                   	// #1
    9f10:	ldr	w3, [x29, #388]
    9f14:	mov	x2, x5
    9f18:	mov	x20, sp
    9f1c:	mov	w1, w4
    9f20:	cmp	w3, #0x0
    9f24:	mov	x0, x19
    9f28:	csel	w5, w3, w6, gt
    9f2c:	str	xzr, [x29, #408]
    9f30:	mul	w3, w3, w7
    9f34:	str	w3, [x29, #404]
    9f38:	sub	sp, sp, w5, sxtw #4
    9f3c:	cmp	w3, #0x0
    9f40:	mov	x4, sp
    9f44:	csel	w3, w3, w6, gt
    9f48:	str	x4, [x29, #376]
    9f4c:	sub	sp, sp, w3, sxtw #4
    9f50:	mov	x3, sp
    9f54:	str	x3, [x29, #392]
    9f58:	bl	4978 <d_print_comp>
    9f5c:	mov	sp, x20
    9f60:	ldr	x1, [x29, #296]
    9f64:	mov	x0, x19
    9f68:	ldp	x3, x2, [x29, #312]
    9f6c:	strb	wzr, [x19, x1]
    9f70:	blr	x3
    9f74:	ldr	w0, [x29, #344]
    9f78:	mov	sp, x29
    9f7c:	cmp	w0, #0x0
    9f80:	cset	w0, eq  // eq = none
    9f84:	ldp	x19, x20, [sp, #16]
    9f88:	ldp	x29, x30, [sp], #416
    9f8c:	ret

0000000000009f90 <__asan_cplus_demangle_print>:
    9f90:	stp	x29, x30, [sp, #-96]!
    9f94:	mov	x29, sp
    9f98:	stp	x19, x20, [sp, #16]
    9f9c:	mov	w19, w0
    9fa0:	str	x21, [sp, #32]
    9fa4:	mov	x21, x3
    9fa8:	stp	xzr, xzr, [sp, #64]
    9fac:	str	xzr, [sp, #80]
    9fb0:	str	wzr, [sp, #88]
    9fb4:	cbnz	w2, 9ff8 <__asan_cplus_demangle_print+0x68>
    9fb8:	adrp	x2, 0 <d_make_comp>
    9fbc:	mov	w0, w19
    9fc0:	add	x3, sp, #0x40
    9fc4:	add	x2, x2, #0x0
    9fc8:	bl	9eb8 <__asan_cplus_demangle_print_callback>
    9fcc:	cbz	w0, a034 <__asan_cplus_demangle_print+0xa4>
    9fd0:	ldr	w2, [sp, #88]
    9fd4:	ldr	x1, [sp, #80]
    9fd8:	cmp	w2, #0x0
    9fdc:	ldr	x0, [sp, #64]
    9fe0:	csinc	x1, x1, xzr, eq  // eq = none
    9fe4:	str	x1, [x21]
    9fe8:	ldp	x19, x20, [sp, #16]
    9fec:	ldr	x21, [sp, #32]
    9ff0:	ldp	x29, x30, [sp], #96
    9ff4:	ret
    9ff8:	sxtw	x0, w2
    9ffc:	mov	x20, #0x2                   	// #2
    a000:	cmp	x0, #0x2
    a004:	b.ls	a014 <__asan_cplus_demangle_print+0x84>  // b.plast
    a008:	lsl	x20, x20, #1
    a00c:	cmp	x0, x20
    a010:	b.hi	a008 <__asan_cplus_demangle_print+0x78>  // b.pmore
    a014:	mov	x0, x20
    a018:	str	x1, [sp, #56]
    a01c:	bl	0 <malloc>
    a020:	ldr	x1, [sp, #56]
    a024:	cbz	x0, a048 <__asan_cplus_demangle_print+0xb8>
    a028:	str	x0, [sp, #64]
    a02c:	str	x20, [sp, #80]
    a030:	b	9fb8 <__asan_cplus_demangle_print+0x28>
    a034:	ldr	x0, [sp, #64]
    a038:	bl	0 <free>
    a03c:	str	xzr, [x21]
    a040:	mov	x0, #0x0                   	// #0
    a044:	b	9fe8 <__asan_cplus_demangle_print+0x58>
    a048:	mov	w0, #0x1                   	// #1
    a04c:	str	w0, [sp, #88]
    a050:	b	9fb8 <__asan_cplus_demangle_print+0x28>
    a054:	nop

000000000000a058 <__asan_cplus_demangle_init_info>:
    a058:	lsl	w4, w2, #1
    a05c:	add	x5, x0, x2
    a060:	stp	x0, x5, [x3]
    a064:	str	w1, [x3, #16]
    a068:	str	x0, [x3, #24]
    a06c:	stp	wzr, w4, [x3, #40]
    a070:	stp	wzr, w2, [x3, #56]
    a074:	stp	xzr, xzr, [x3, #64]
    a078:	str	xzr, [x3, #80]
    a07c:	ret

000000000000a080 <d_demangle_callback>:
    a080:	stp	x29, x30, [sp, #-176]!
    a084:	mov	x29, sp
    a088:	stp	x19, x20, [sp, #16]
    a08c:	mov	x19, x0
    a090:	mov	w20, w1
    a094:	stp	x21, x22, [sp, #32]
    a098:	mov	x21, x2
    a09c:	mov	x22, x3
    a0a0:	stp	x23, x24, [sp, #48]
    a0a4:	str	x25, [sp, #64]
    a0a8:	ldrb	w0, [x0]
    a0ac:	cmp	w0, #0x5f
    a0b0:	b.ne	a0c0 <d_demangle_callback+0x40>  // b.any
    a0b4:	ldrb	w0, [x19, #1]
    a0b8:	cmp	w0, #0x5a
    a0bc:	b.eq	a29c <d_demangle_callback+0x21c>  // b.none
    a0c0:	adrp	x1, 0 <d_make_comp>
    a0c4:	mov	x0, x19
    a0c8:	add	x1, x1, #0x0
    a0cc:	mov	x2, #0x8                   	// #8
    a0d0:	bl	0 <__asan_internal_strncmp>
    a0d4:	cbnz	w0, a108 <d_demangle_callback+0x88>
    a0d8:	ldrb	w0, [x19, #8]
    a0dc:	mov	w2, #0x5f                  	// #95
    a0e0:	mov	w1, #0x24                  	// #36
    a0e4:	cmp	w0, #0x2e
    a0e8:	ccmp	w0, w2, #0x4, ne  // ne = any
    a0ec:	ccmp	w0, w1, #0x4, ne  // ne = any
    a0f0:	b.ne	a108 <d_demangle_callback+0x88>  // b.any
    a0f4:	ldrb	w0, [x19, #9]
    a0f8:	mov	w1, #0x49                  	// #73
    a0fc:	cmp	w0, #0x44
    a100:	ccmp	w0, w1, #0x4, ne  // ne = any
    a104:	b.eq	a2a4 <d_demangle_callback+0x224>  // b.none
    a108:	mov	w24, #0x0                   	// #0
    a10c:	tbz	w20, #4, a27c <d_demangle_callback+0x1fc>
    a110:	mov	x0, x19
    a114:	add	x23, x29, #0x58
    a118:	bl	0 <__asan_internal_strlen>
    a11c:	mov	x2, x0
    a120:	mov	x3, x23
    a124:	mov	x0, x19
    a128:	mov	w1, w20
    a12c:	bl	a058 <__asan_cplus_demangle_init_info>
    a130:	ldr	w0, [x29, #132]
    a134:	tbnz	w20, #18, a140 <d_demangle_callback+0xc0>
    a138:	cmp	w0, #0x800
    a13c:	b.hi	a27c <d_demangle_callback+0x1fc>  // b.pmore
    a140:	mov	w2, #0x18                  	// #24
    a144:	ldrsw	x1, [x29, #148]
    a148:	mov	x25, sp
    a14c:	cmp	w24, #0x1
    a150:	smull	x0, w0, w2
    a154:	lsl	x1, x1, #3
    a158:	add	x0, x0, #0xf
    a15c:	add	x1, x1, #0xf
    a160:	and	x0, x0, #0xfffffffffffffff0
    a164:	and	x1, x1, #0xfffffffffffffff0
    a168:	sub	sp, sp, x0
    a16c:	mov	x0, sp
    a170:	sub	sp, sp, x1
    a174:	mov	x1, sp
    a178:	str	x0, [x29, #120]
    a17c:	str	x1, [x29, #136]
    a180:	b.eq	a238 <d_demangle_callback+0x1b8>  // b.none
    a184:	sub	w0, w24, #0x2
    a188:	cmp	w0, #0x1
    a18c:	b.hi	a26c <d_demangle_callback+0x1ec>  // b.pmore
    a190:	ldr	x0, [x29, #112]
    a194:	cmp	w24, #0x2
    a198:	cset	w2, ne  // ne = any
    a19c:	add	x24, x0, #0xb
    a1a0:	str	x24, [x29, #112]
    a1a4:	add	w19, w2, #0x44
    a1a8:	ldrb	w1, [x0, #11]
    a1ac:	cmp	w1, #0x5f
    a1b0:	b.ne	a1c0 <d_demangle_callback+0x140>  // b.any
    a1b4:	ldrb	w1, [x0, #12]
    a1b8:	cmp	w1, #0x5a
    a1bc:	b.eq	a2c0 <d_demangle_callback+0x240>  // b.none
    a1c0:	mov	x0, x24
    a1c4:	bl	0 <__asan_internal_strlen>
    a1c8:	mov	w2, w0
    a1cc:	mov	x1, x24
    a1d0:	mov	x0, x23
    a1d4:	bl	61c0 <d_make_name>
    a1d8:	mov	x2, x0
    a1dc:	mov	w1, w19
    a1e0:	mov	x3, #0x0                   	// #0
    a1e4:	mov	x0, x23
    a1e8:	bl	0 <d_make_comp>
    a1ec:	mov	x19, x0
    a1f0:	ldr	x0, [x29, #112]
    a1f4:	bl	0 <__asan_internal_strlen>
    a1f8:	ldr	x1, [x29, #112]
    a1fc:	add	x1, x1, x0
    a200:	str	x1, [x29, #112]
    a204:	tbz	w20, #0, a24c <d_demangle_callback+0x1cc>
    a208:	ldr	x1, [x29, #112]
    a20c:	mov	w0, #0x0                   	// #0
    a210:	ldrb	w1, [x1]
    a214:	cbz	w1, a24c <d_demangle_callback+0x1cc>
    a218:	mov	sp, x25
    a21c:	mov	sp, x29
    a220:	ldp	x19, x20, [sp, #16]
    a224:	ldp	x21, x22, [sp, #32]
    a228:	ldp	x23, x24, [sp, #48]
    a22c:	ldr	x25, [sp, #64]
    a230:	ldp	x29, x30, [sp], #176
    a234:	ret
    a238:	mov	w1, w24
    a23c:	mov	x0, x23
    a240:	bl	9bd0 <__asan_cplus_demangle_mangled_name>
    a244:	mov	x19, x0
    a248:	tbnz	w20, #0, a208 <d_demangle_callback+0x188>
    a24c:	mov	w0, #0x0                   	// #0
    a250:	cbz	x19, a218 <d_demangle_callback+0x198>
    a254:	mov	x3, x22
    a258:	mov	x2, x21
    a25c:	mov	x1, x19
    a260:	mov	w0, w20
    a264:	bl	9eb8 <__asan_cplus_demangle_print_callback>
    a268:	b	a218 <d_demangle_callback+0x198>
    a26c:	mov	x0, x23
    a270:	bl	66e8 <__asan_cplus_demangle_type>
    a274:	mov	x19, x0
    a278:	b	a204 <d_demangle_callback+0x184>
    a27c:	mov	sp, x29
    a280:	mov	w0, #0x0                   	// #0
    a284:	ldp	x19, x20, [sp, #16]
    a288:	ldp	x21, x22, [sp, #32]
    a28c:	ldp	x23, x24, [sp, #48]
    a290:	ldr	x25, [sp, #64]
    a294:	ldp	x29, x30, [sp], #176
    a298:	ret
    a29c:	mov	w24, #0x1                   	// #1
    a2a0:	b	a110 <d_demangle_callback+0x90>
    a2a4:	ldrb	w1, [x19, #10]
    a2a8:	cmp	w1, w2
    a2ac:	b.ne	a108 <d_demangle_callback+0x88>  // b.any
    a2b0:	cmp	w0, #0x49
    a2b4:	cset	w24, ne  // ne = any
    a2b8:	add	w24, w24, #0x2
    a2bc:	b	a110 <d_demangle_callback+0x90>
    a2c0:	add	x2, x0, #0xd
    a2c4:	mov	w1, #0x0                   	// #0
    a2c8:	mov	x0, x23
    a2cc:	str	x2, [x29, #112]
    a2d0:	bl	9410 <d_encoding>
    a2d4:	mov	x2, x0
    a2d8:	b	a1dc <d_demangle_callback+0x15c>
    a2dc:	nop

000000000000a2e0 <d_demangle>:
    a2e0:	stp	x29, x30, [sp, #-64]!
    a2e4:	adrp	x3, 0 <d_make_comp>
    a2e8:	mov	x29, sp
    a2ec:	str	x19, [sp, #16]
    a2f0:	mov	x19, x2
    a2f4:	add	x2, x3, #0x0
    a2f8:	add	x3, sp, #0x20
    a2fc:	stp	xzr, xzr, [sp, #32]
    a300:	str	xzr, [sp, #48]
    a304:	str	wzr, [sp, #56]
    a308:	bl	a080 <d_demangle_callback>
    a30c:	cbz	w0, a334 <d_demangle+0x54>
    a310:	ldr	w2, [sp, #56]
    a314:	ldr	x1, [sp, #48]
    a318:	cmp	w2, #0x0
    a31c:	ldr	x0, [sp, #32]
    a320:	csinc	x1, x1, xzr, eq  // eq = none
    a324:	str	x1, [x19]
    a328:	ldr	x19, [sp, #16]
    a32c:	ldp	x29, x30, [sp], #64
    a330:	ret
    a334:	ldr	x0, [sp, #32]
    a338:	bl	0 <free>
    a33c:	str	xzr, [x19]
    a340:	mov	x0, #0x0                   	// #0
    a344:	b	a328 <d_demangle+0x48>

000000000000a348 <is_ctor_or_dtor>:
    a348:	stp	x29, x30, [sp, #-144]!
    a34c:	mov	x29, sp
    a350:	stp	x19, x20, [sp, #16]
    a354:	mov	x20, x2
    a358:	add	x19, x29, #0x38
    a35c:	stp	x21, x22, [sp, #32]
    a360:	mov	x21, x1
    a364:	mov	x22, x0
    a368:	str	wzr, [x1]
    a36c:	str	wzr, [x2]
    a370:	bl	0 <__asan_internal_strlen>
    a374:	mov	x2, x0
    a378:	mov	w1, #0x4000                	// #16384
    a37c:	mov	x0, x22
    a380:	mov	x3, x19
    a384:	bl	a058 <__asan_cplus_demangle_init_info>
    a388:	ldr	w5, [x29, #100]
    a38c:	mov	w2, #0x18                  	// #24
    a390:	ldrsw	x4, [x29, #116]
    a394:	mov	x0, x19
    a398:	mov	w1, #0x1                   	// #1
    a39c:	smull	x5, w5, w2
    a3a0:	lsl	x4, x4, #3
    a3a4:	add	x4, x4, #0xf
    a3a8:	add	x5, x5, #0xf
    a3ac:	and	x4, x4, #0xfffffffffffffff0
    a3b0:	and	x5, x5, #0xfffffffffffffff0
    a3b4:	sub	sp, sp, x5
    a3b8:	mov	x2, sp
    a3bc:	sub	sp, sp, x4
    a3c0:	str	x2, [x29, #88]
    a3c4:	mov	x2, sp
    a3c8:	str	x2, [x29, #104]
    a3cc:	bl	9bd0 <__asan_cplus_demangle_mangled_name>
    a3d0:	cbz	x0, a3f4 <is_ctor_or_dtor+0xac>
    a3d4:	ldr	w3, [x0]
    a3d8:	cmp	w3, #0x7
    a3dc:	b.eq	a428 <is_ctor_or_dtor+0xe0>  // b.none
    a3e0:	b.hi	a448 <is_ctor_or_dtor+0x100>  // b.pmore
    a3e4:	sub	w1, w3, #0x3
    a3e8:	cmp	w3, #0x2
    a3ec:	b.hi	a40c <is_ctor_or_dtor+0xc4>  // b.pmore
    a3f0:	cbnz	w3, a470 <is_ctor_or_dtor+0x128>
    a3f4:	mov	w0, #0x0                   	// #0
    a3f8:	mov	sp, x29
    a3fc:	ldp	x19, x20, [sp, #16]
    a400:	ldp	x21, x22, [sp, #32]
    a404:	ldp	x29, x30, [sp], #144
    a408:	ret
    a40c:	cmp	w1, #0x1
    a410:	b.hi	a3f4 <is_ctor_or_dtor+0xac>  // b.pmore
    a414:	ldr	x0, [x0, #8]
    a418:	cbz	x0, a3f8 <is_ctor_or_dtor+0xb0>
    a41c:	ldr	w3, [x0]
    a420:	cmp	w3, #0x7
    a424:	b.ne	a3e0 <is_ctor_or_dtor+0x98>  // b.any
    a428:	ldr	w1, [x0, #8]
    a42c:	mov	w0, #0x1                   	// #1
    a430:	str	w1, [x21]
    a434:	mov	sp, x29
    a438:	ldp	x19, x20, [sp, #16]
    a43c:	ldp	x21, x22, [sp, #32]
    a440:	ldp	x29, x30, [sp], #144
    a444:	ret
    a448:	cmp	w3, #0x8
    a44c:	b.ne	a3f4 <is_ctor_or_dtor+0xac>  // b.any
    a450:	ldr	w1, [x0, #8]
    a454:	mov	w0, #0x1                   	// #1
    a458:	str	w1, [x20]
    a45c:	mov	sp, x29
    a460:	ldp	x19, x20, [sp, #16]
    a464:	ldp	x21, x22, [sp, #32]
    a468:	ldp	x29, x30, [sp], #144
    a46c:	ret
    a470:	ldr	x0, [x0, #16]
    a474:	cbnz	x0, a41c <is_ctor_or_dtor+0xd4>
    a478:	b	a3f8 <is_ctor_or_dtor+0xb0>
    a47c:	nop

000000000000a480 <__asan_cplus_demangle_v3>:
    a480:	stp	x29, x30, [sp, #-32]!
    a484:	mov	x29, sp
    a488:	add	x2, sp, #0x18
    a48c:	bl	a2e0 <d_demangle>
    a490:	ldp	x29, x30, [sp], #32
    a494:	ret

000000000000a498 <__asan_cplus_demangle_v3_callback>:
    a498:	b	a080 <d_demangle_callback>
    a49c:	nop

000000000000a4a0 <__asan_java_demangle_v3>:
    a4a0:	stp	x29, x30, [sp, #-32]!
    a4a4:	mov	w1, #0x25                  	// #37
    a4a8:	mov	x29, sp
    a4ac:	add	x2, sp, #0x18
    a4b0:	bl	a2e0 <d_demangle>
    a4b4:	ldp	x29, x30, [sp], #32
    a4b8:	ret
    a4bc:	nop

000000000000a4c0 <__asan_java_demangle_v3_callback>:
    a4c0:	mov	x3, x2
    a4c4:	mov	x2, x1
    a4c8:	mov	w1, #0x25                  	// #37
    a4cc:	b	a080 <d_demangle_callback>

000000000000a4d0 <__asan_is_gnu_v3_mangled_ctor>:
    a4d0:	stp	x29, x30, [sp, #-32]!
    a4d4:	mov	x29, sp
    a4d8:	add	x2, sp, #0x1c
    a4dc:	add	x1, sp, #0x18
    a4e0:	bl	a348 <is_ctor_or_dtor>
    a4e4:	cmp	w0, #0x0
    a4e8:	ldr	w1, [sp, #24]
    a4ec:	ldp	x29, x30, [sp], #32
    a4f0:	csel	w0, w1, wzr, ne  // ne = any
    a4f4:	ret

000000000000a4f8 <__asan_is_gnu_v3_mangled_dtor>:
    a4f8:	stp	x29, x30, [sp, #-32]!
    a4fc:	mov	x29, sp
    a500:	add	x2, sp, #0x1c
    a504:	add	x1, sp, #0x18
    a508:	bl	a348 <is_ctor_or_dtor>
    a50c:	cmp	w0, #0x0
    a510:	ldr	w1, [sp, #28]
    a514:	ldp	x29, x30, [sp], #32
    a518:	csel	w0, w1, wzr, ne  // ne = any
    a51c:	ret

dwarf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <abbrev_compare>:
       0:	ldr	x2, [x0]
       4:	mov	w3, #0xffffffff            	// #-1
       8:	ldr	x1, [x1]
       c:	cmp	x2, x1
      10:	cset	w0, hi  // hi = pmore
      14:	csel	w0, w0, w3, cs  // cs = hs, nlast
      18:	ret
      1c:	nop

0000000000000020 <add_unit_addr>:
      20:	stp	x29, x30, [sp, #-48]!
      24:	mov	x29, sp
      28:	stp	x21, x22, [sp, #32]
      2c:	ldp	x22, x21, [x2]
      30:	stp	x19, x20, [sp, #16]
      34:	mov	x19, x2
      38:	ldr	x6, [x5, #24]
      3c:	mov	x2, x3
      40:	mov	x20, x5
      44:	mov	x3, x4
      48:	add	x22, x1, x22
      4c:	add	x21, x1, x21
      50:	cbz	x6, 80 <add_unit_addr+0x60>
      54:	add	x6, x6, x6, lsl #1
      58:	ldr	x1, [x5]
      5c:	lsl	x6, x6, #3
      60:	sub	x6, x6, #0x18
      64:	add	x6, x1, x6
      68:	ldr	x1, [x6, #8]
      6c:	cmp	x22, x1
      70:	b.eq	c8 <add_unit_addr+0xa8>  // b.none
      74:	add	x4, x1, #0x1
      78:	cmp	x22, x4
      7c:	b.eq	c8 <add_unit_addr+0xa8>  // b.none
      80:	mov	x1, #0x18                  	// #24
      84:	mov	x4, x20
      88:	bl	0 <__asan_backtrace_vector_grow>
      8c:	mov	x1, x0
      90:	cbz	x0, ec <add_unit_addr+0xcc>
      94:	stp	x22, x21, [x19]
      98:	mov	w0, #0x1                   	// #1
      9c:	ldr	x2, [x20, #24]
      a0:	ldp	x4, x5, [x19]
      a4:	stp	x4, x5, [x1]
      a8:	add	x2, x2, #0x1
      ac:	ldr	x3, [x19, #16]
      b0:	str	x3, [x1, #16]
      b4:	str	x2, [x20, #24]
      b8:	ldp	x19, x20, [sp, #16]
      bc:	ldp	x21, x22, [sp, #32]
      c0:	ldp	x29, x30, [sp], #48
      c4:	ret
      c8:	ldr	x4, [x6, #16]
      cc:	ldr	x5, [x19, #16]
      d0:	cmp	x5, x4
      d4:	b.ne	80 <add_unit_addr+0x60>  // b.any
      d8:	cmp	x21, x1
      dc:	mov	w0, #0x1                   	// #1
      e0:	b.ls	b8 <add_unit_addr+0x98>  // b.plast
      e4:	str	x21, [x6, #8]
      e8:	b	b8 <add_unit_addr+0x98>
      ec:	mov	w0, #0x0                   	// #0
      f0:	ldp	x19, x20, [sp, #16]
      f4:	ldp	x21, x22, [sp, #32]
      f8:	ldp	x29, x30, [sp], #48
      fc:	ret

0000000000000100 <dwarf_buf_error>:
     100:	stp	x29, x30, [sp, #-240]!
     104:	mov	x3, x1
     108:	adrp	x2, 0 <abbrev_compare>
     10c:	mov	x29, sp
     110:	stp	x19, x20, [sp, #16]
     114:	mov	x19, x0
     118:	add	x20, sp, #0x28
     11c:	mov	x0, x20
     120:	add	x2, x2, #0x0
     124:	ldp	x4, x5, [x19]
     128:	mov	x1, #0xc8                  	// #200
     12c:	ldr	x6, [x19, #16]
     130:	sub	w5, w6, w5
     134:	bl	0 <snprintf>
     138:	ldp	x3, x0, [x19, #40]
     13c:	mov	x1, x20
     140:	mov	w2, #0x0                   	// #0
     144:	blr	x3
     148:	ldp	x19, x20, [sp, #16]
     14c:	ldp	x29, x30, [sp], #240
     150:	ret
     154:	nop

0000000000000158 <free_line_header>:
     158:	stp	x29, x30, [sp, #-48]!
     15c:	mov	x29, sp
     160:	stp	x19, x20, [sp, #16]
     164:	mov	x20, x2
     168:	mov	x19, x1
     16c:	ldr	x2, [x1, #32]
     170:	stp	x21, x22, [sp, #32]
     174:	mov	x21, x3
     178:	mov	x22, x0
     17c:	cbnz	x2, 1a4 <free_line_header+0x4c>
     180:	mov	x4, x21
     184:	mov	x3, x20
     188:	mov	x0, x22
     18c:	ldp	x21, x22, [sp, #32]
     190:	ldp	x2, x1, [x19, #48]
     194:	ldp	x19, x20, [sp, #16]
     198:	ldp	x29, x30, [sp], #48
     19c:	lsl	x2, x2, #3
     1a0:	b	0 <__asan_backtrace_free>
     1a4:	ldr	x1, [x1, #40]
     1a8:	mov	x4, x3
     1ac:	lsl	x2, x2, #3
     1b0:	mov	x3, x20
     1b4:	bl	0 <__asan_backtrace_free>
     1b8:	b	180 <free_line_header+0x28>
     1bc:	nop

00000000000001c0 <unit_addrs_compare>:
     1c0:	mov	x2, x0
     1c4:	ldr	x0, [x1]
     1c8:	ldr	x3, [x2]
     1cc:	cmp	x3, x0
     1d0:	b.cc	214 <unit_addrs_compare+0x54>  // b.lo, b.ul, b.last
     1d4:	mov	w0, #0x1                   	// #1
     1d8:	b.hi	210 <unit_addrs_compare+0x50>  // b.pmore
     1dc:	ldr	x3, [x1, #8]
     1e0:	ldr	x4, [x2, #8]
     1e4:	cmp	x4, x3
     1e8:	b.cc	210 <unit_addrs_compare+0x50>  // b.lo, b.ul, b.last
     1ec:	mov	w0, #0xffffffff            	// #-1
     1f0:	b.hi	210 <unit_addrs_compare+0x50>  // b.pmore
     1f4:	ldr	x1, [x1, #16]
     1f8:	ldr	x2, [x2, #16]
     1fc:	ldr	x1, [x1, #56]
     200:	ldr	x2, [x2, #56]
     204:	cmp	x2, x1
     208:	cset	w3, gt
     20c:	csel	w0, w3, w0, ge  // ge = tcont
     210:	ret
     214:	mov	w0, #0xffffffff            	// #-1
     218:	ret
     21c:	nop

0000000000000220 <line_compare>:
     220:	mov	x2, x0
     224:	ldr	x0, [x1]
     228:	ldr	x3, [x2]
     22c:	cmp	x3, x0
     230:	b.cc	258 <line_compare+0x38>  // b.lo, b.ul, b.last
     234:	mov	w0, #0x1                   	// #1
     238:	b.hi	254 <line_compare+0x34>  // b.pmore
     23c:	ldr	w1, [x1, #20]
     240:	mov	w3, #0xffffffff            	// #-1
     244:	ldr	w2, [x2, #20]
     248:	cmp	w2, w1
     24c:	cset	w0, gt
     250:	csel	w0, w0, w3, ge  // ge = tcont
     254:	ret
     258:	mov	w0, #0xffffffff            	// #-1
     25c:	ret

0000000000000260 <report_inlined_functions.isra.0>:
     260:	cbz	x2, 3b8 <report_inlined_functions.isra.0+0x158>
     264:	stp	x29, x30, [sp, #-64]!
     268:	mov	x10, x2
     26c:	mov	x29, sp
     270:	stp	x19, x20, [sp, #16]
     274:	mov	x20, x6
     278:	mov	x19, x0
     27c:	stp	x21, x22, [sp, #32]
     280:	mov	x21, x3
     284:	mov	x22, x4
     288:	stp	x23, x24, [sp, #48]
     28c:	mov	x23, x5
     290:	mov	x0, #0x0                   	// #0
     294:	add	x7, x10, x0
     298:	cmp	x10, x0
     29c:	and	x8, x7, #0xfffffffffffffffe
     2a0:	b.ls	3a0 <report_inlined_functions.isra.0+0x140>  // b.plast
     2a4:	lsr	x7, x7, #1
     2a8:	add	x8, x8, x7
     2ac:	lsl	x9, x8, #3
     2b0:	ldr	x3, [x1, x8, lsl #3]
     2b4:	add	x8, x1, x9
     2b8:	cmp	x3, x19
     2bc:	b.hi	38c <report_inlined_functions.isra.0+0x12c>  // b.pmore
     2c0:	ldr	x3, [x8, #8]
     2c4:	add	x0, x7, #0x1
     2c8:	cmp	x19, x3
     2cc:	b.cs	294 <report_inlined_functions.isra.0+0x34>  // b.hs, b.nlast
     2d0:	asr	x9, x9, #3
     2d4:	mov	x0, #0xaaaaaaaaaaaaaaaa    	// #-6148914691236517206
     2d8:	movk	x0, #0xaaab
     2dc:	mov	x3, x0
     2e0:	mul	x9, x9, x0
     2e4:	add	x9, x9, #0x1
     2e8:	cmp	x2, x9
     2ec:	b.hi	31c <report_inlined_functions.isra.0+0xbc>  // b.pmore
     2f0:	b	328 <report_inlined_functions.isra.0+0xc8>
     2f4:	ldr	x0, [x8, #32]
     2f8:	cmp	x19, x0
     2fc:	b.cs	328 <report_inlined_functions.isra.0+0xc8>  // b.hs, b.nlast
     300:	add	x8, x8, #0x18
     304:	sub	x7, x8, x1
     308:	asr	x7, x7, #3
     30c:	mul	x7, x7, x3
     310:	add	x7, x7, #0x1
     314:	cmp	x7, x2
     318:	b.cs	328 <report_inlined_functions.isra.0+0xc8>  // b.hs, b.nlast
     31c:	ldr	x0, [x8, #24]
     320:	cmp	x19, x0
     324:	b.cs	2f4 <report_inlined_functions.isra.0+0x94>  // b.hs, b.nlast
     328:	ldr	x24, [x8, #16]
     32c:	mov	x6, x20
     330:	mov	x5, x23
     334:	mov	x4, x22
     338:	mov	x3, x21
     33c:	mov	x0, x19
     340:	ldp	x1, x2, [x24, #24]
     344:	bl	260 <report_inlined_functions.isra.0>
     348:	cbnz	w0, 378 <report_inlined_functions.isra.0+0x118>
     34c:	ldr	w3, [x20]
     350:	mov	x1, x19
     354:	ldr	x2, [x23]
     358:	mov	x0, x22
     35c:	ldr	x4, [x24]
     360:	blr	x21
     364:	cbnz	w0, 378 <report_inlined_functions.isra.0+0x118>
     368:	ldr	x1, [x24, #8]
     36c:	str	x1, [x23]
     370:	ldr	w1, [x24, #16]
     374:	str	w1, [x20]
     378:	ldp	x19, x20, [sp, #16]
     37c:	ldp	x21, x22, [sp, #32]
     380:	ldp	x23, x24, [sp, #48]
     384:	ldp	x29, x30, [sp], #64
     388:	ret
     38c:	mov	x10, x7
     390:	add	x7, x10, x0
     394:	cmp	x10, x0
     398:	and	x8, x7, #0xfffffffffffffffe
     39c:	b.hi	2a4 <report_inlined_functions.isra.0+0x44>  // b.pmore
     3a0:	mov	w0, #0x0                   	// #0
     3a4:	ldp	x19, x20, [sp, #16]
     3a8:	ldp	x21, x22, [sp, #32]
     3ac:	ldp	x23, x24, [sp, #48]
     3b0:	ldp	x29, x30, [sp], #64
     3b4:	ret
     3b8:	mov	w0, #0x0                   	// #0
     3bc:	ret

00000000000003c0 <lookup_abbrev.isra.0>:
     3c0:	stp	x29, x30, [sp, #-96]!
     3c4:	mov	x29, sp
     3c8:	stp	x21, x22, [sp, #32]
     3cc:	mov	x21, x0
     3d0:	mov	x22, x1
     3d4:	ldr	x0, [x0]
     3d8:	stp	x19, x20, [sp, #16]
     3dc:	mov	x19, x2
     3e0:	str	x23, [sp, #48]
     3e4:	sub	x2, x2, #0x1
     3e8:	mov	x20, x3
     3ec:	cmp	x2, x0
     3f0:	mov	x23, x4
     3f4:	b.cs	414 <lookup_abbrev.isra.0+0x54>  // b.hs, b.nlast
     3f8:	lsl	x2, x19, #5
     3fc:	ldr	x1, [x1]
     400:	sub	x2, x2, #0x20
     404:	add	x0, x1, x2
     408:	ldr	x1, [x1, x2]
     40c:	cmp	x19, x1
     410:	b.eq	45c <lookup_abbrev.isra.0+0x9c>  // b.none
     414:	add	x0, sp, #0x40
     418:	mov	x2, #0x20                  	// #32
     41c:	mov	w1, #0x0                   	// #0
     420:	bl	0 <__asan_internal_memset>
     424:	ldr	x7, [x21]
     428:	mov	x6, #0x0                   	// #0
     42c:	ldr	x8, [x22]
     430:	str	x19, [sp, #64]
     434:	add	x1, x7, x6
     438:	cmp	x7, x6
     43c:	b.ls	480 <lookup_abbrev.isra.0+0xc0>  // b.plast
     440:	lsr	x1, x1, #1
     444:	lsl	x5, x1, #5
     448:	add	x0, x8, x5
     44c:	ldr	x5, [x8, x5]
     450:	cmp	x19, x5
     454:	b.cc	4ac <lookup_abbrev.isra.0+0xec>  // b.lo, b.ul, b.last
     458:	b.hi	470 <lookup_abbrev.isra.0+0xb0>  // b.pmore
     45c:	ldp	x19, x20, [sp, #16]
     460:	ldp	x21, x22, [sp, #32]
     464:	ldr	x23, [sp, #48]
     468:	ldp	x29, x30, [sp], #96
     46c:	ret
     470:	add	x6, x1, #0x1
     474:	add	x1, x7, x6
     478:	cmp	x7, x6
     47c:	b.hi	440 <lookup_abbrev.isra.0+0x80>  // b.pmore
     480:	mov	x0, x23
     484:	mov	w2, #0x0                   	// #0
     488:	adrp	x1, 0 <abbrev_compare>
     48c:	add	x1, x1, #0x0
     490:	blr	x20
     494:	mov	x0, #0x0                   	// #0
     498:	ldp	x19, x20, [sp, #16]
     49c:	ldp	x21, x22, [sp, #32]
     4a0:	ldr	x23, [sp, #48]
     4a4:	ldp	x29, x30, [sp], #96
     4a8:	ret
     4ac:	mov	x7, x1
     4b0:	b	434 <lookup_abbrev.isra.0+0x74>
     4b4:	nop

00000000000004b8 <add_line.isra.0>:
     4b8:	stp	x29, x30, [sp, #-64]!
     4bc:	mov	x29, sp
     4c0:	ldr	x8, [x7, #24]
     4c4:	stp	x19, x20, [sp, #16]
     4c8:	mov	x20, x2
     4cc:	stp	x21, x22, [sp, #32]
     4d0:	mov	x19, x7
     4d4:	mov	x22, x1
     4d8:	str	x23, [sp, #48]
     4dc:	mov	w21, w4
     4e0:	mov	x23, x3
     4e4:	mov	x2, x5
     4e8:	mov	x3, x6
     4ec:	cbz	x8, 510 <add_line.isra.0+0x58>
     4f0:	add	x8, x8, x8, lsl #1
     4f4:	ldr	x1, [x7]
     4f8:	lsl	x8, x8, #3
     4fc:	sub	x8, x8, #0x18
     500:	add	x4, x1, x8
     504:	ldr	x1, [x1, x8]
     508:	cmp	x1, x20
     50c:	b.eq	55c <add_line.isra.0+0xa4>  // b.none
     510:	mov	x4, x19
     514:	mov	x1, #0x18                  	// #24
     518:	bl	0 <__asan_backtrace_vector_grow>
     51c:	mov	x5, x0
     520:	cbz	x0, 57c <add_line.isra.0+0xc4>
     524:	ldr	x2, [x22]
     528:	mov	w4, #0x1                   	// #1
     52c:	ldr	x1, [x19, #24]
     530:	add	x20, x2, x20
     534:	stp	x20, x23, [x5]
     538:	add	x0, x1, #0x1
     53c:	stp	w21, w1, [x5, #16]
     540:	str	x0, [x19, #24]
     544:	mov	w0, w4
     548:	ldp	x19, x20, [sp, #16]
     54c:	ldp	x21, x22, [sp, #32]
     550:	ldr	x23, [sp, #48]
     554:	ldp	x29, x30, [sp], #64
     558:	ret
     55c:	ldr	x1, [x4, #8]
     560:	cmp	x1, x23
     564:	b.ne	510 <add_line.isra.0+0x58>  // b.any
     568:	ldr	w1, [x4, #16]
     56c:	mov	w4, #0x1                   	// #1
     570:	cmp	w1, w21
     574:	b.ne	510 <add_line.isra.0+0x58>  // b.any
     578:	b	544 <add_line.isra.0+0x8c>
     57c:	mov	w4, #0x0                   	// #0
     580:	mov	w0, w4
     584:	ldp	x19, x20, [sp, #16]
     588:	ldp	x21, x22, [sp, #32]
     58c:	ldr	x23, [sp, #48]
     590:	ldp	x29, x30, [sp], #64
     594:	ret

0000000000000598 <add_function_range.isra.0>:
     598:	stp	x29, x30, [sp, #-48]!
     59c:	mov	x29, sp
     5a0:	ldr	x8, [x7, #24]
     5a4:	stp	x19, x20, [sp, #16]
     5a8:	add	x20, x3, x1
     5ac:	stp	x21, x22, [sp, #32]
     5b0:	mov	x19, x7
     5b4:	mov	x22, x2
     5b8:	add	x21, x4, x1
     5bc:	mov	x2, x5
     5c0:	mov	x3, x6
     5c4:	cbz	x8, 5f4 <add_function_range.isra.0+0x5c>
     5c8:	add	x8, x8, x8, lsl #1
     5cc:	ldr	x1, [x7]
     5d0:	lsl	x8, x8, #3
     5d4:	sub	x8, x8, #0x18
     5d8:	add	x8, x1, x8
     5dc:	ldr	x1, [x8, #8]
     5e0:	cmp	x20, x1
     5e4:	b.eq	630 <add_function_range.isra.0+0x98>  // b.none
     5e8:	add	x4, x1, #0x1
     5ec:	cmp	x20, x4
     5f0:	b.eq	630 <add_function_range.isra.0+0x98>  // b.none
     5f4:	mov	x1, #0x18                  	// #24
     5f8:	mov	x4, x19
     5fc:	bl	0 <__asan_backtrace_vector_grow>
     600:	mov	x1, x0
     604:	cbz	x0, 650 <add_function_range.isra.0+0xb8>
     608:	ldr	x3, [x19, #24]
     60c:	stp	x20, x21, [x1]
     610:	mov	w0, #0x1                   	// #1
     614:	str	x22, [x1, #16]
     618:	add	x1, x3, #0x1
     61c:	str	x1, [x19, #24]
     620:	ldp	x19, x20, [sp, #16]
     624:	ldp	x21, x22, [sp, #32]
     628:	ldp	x29, x30, [sp], #48
     62c:	ret
     630:	ldr	x4, [x8, #16]
     634:	cmp	x4, x22
     638:	b.ne	5f4 <add_function_range.isra.0+0x5c>  // b.any
     63c:	cmp	x21, x1
     640:	mov	w0, #0x1                   	// #1
     644:	b.ls	620 <add_function_range.isra.0+0x88>  // b.plast
     648:	str	x21, [x8, #8]
     64c:	b	620 <add_function_range.isra.0+0x88>
     650:	mov	w0, #0x0                   	// #0
     654:	ldp	x19, x20, [sp, #16]
     658:	ldp	x21, x22, [sp, #32]
     65c:	ldp	x29, x30, [sp], #48
     660:	ret
     664:	nop

0000000000000668 <advance.part.0>:
     668:	ldr	w1, [x0, #56]
     66c:	cbz	w1, 678 <advance.part.0+0x10>
     670:	mov	w0, #0x0                   	// #0
     674:	ret
     678:	stp	x29, x30, [sp, #-32]!
     67c:	adrp	x1, 0 <abbrev_compare>
     680:	add	x1, x1, #0x0
     684:	mov	x29, sp
     688:	str	x19, [sp, #16]
     68c:	mov	x19, x0
     690:	bl	100 <dwarf_buf_error>
     694:	mov	w0, #0x1                   	// #1
     698:	str	w0, [x19, #56]
     69c:	mov	w0, #0x0                   	// #0
     6a0:	ldr	x19, [sp, #16]
     6a4:	ldp	x29, x30, [sp], #32
     6a8:	ret
     6ac:	nop

00000000000006b0 <read_uint32>:
     6b0:	stp	x29, x30, [sp, #-32]!
     6b4:	mov	x29, sp
     6b8:	stp	x19, x20, [sp, #16]
     6bc:	mov	x19, x0
     6c0:	ldp	x20, x1, [x0, #16]
     6c4:	cmp	x1, #0x3
     6c8:	b.hi	6fc <read_uint32+0x4c>  // b.pmore
     6cc:	bl	668 <advance.part.0>
     6d0:	mov	w1, w0
     6d4:	mov	w0, #0x0                   	// #0
     6d8:	cbz	w1, 6f0 <read_uint32+0x40>
     6dc:	ldr	w0, [x20]
     6e0:	ldr	w2, [x19, #32]
     6e4:	rev	w1, w0
     6e8:	cmp	w2, #0x0
     6ec:	csel	w0, w1, w0, ne  // ne = any
     6f0:	ldp	x19, x20, [sp, #16]
     6f4:	ldp	x29, x30, [sp], #32
     6f8:	ret
     6fc:	sub	x1, x1, #0x4
     700:	add	x0, x20, #0x4
     704:	stp	x0, x1, [x19, #16]
     708:	b	6dc <read_uint32+0x2c>
     70c:	nop

0000000000000710 <read_uint64>:
     710:	stp	x29, x30, [sp, #-32]!
     714:	mov	x29, sp
     718:	stp	x19, x20, [sp, #16]
     71c:	mov	x19, x0
     720:	ldp	x20, x1, [x0, #16]
     724:	cmp	x1, #0x7
     728:	b.hi	75c <read_uint64+0x4c>  // b.pmore
     72c:	bl	668 <advance.part.0>
     730:	mov	w1, w0
     734:	mov	x0, #0x0                   	// #0
     738:	cbz	w1, 750 <read_uint64+0x40>
     73c:	ldr	x0, [x20]
     740:	ldr	w2, [x19, #32]
     744:	rev	x1, x0
     748:	cmp	w2, #0x0
     74c:	csel	x0, x1, x0, ne  // ne = any
     750:	ldp	x19, x20, [sp, #16]
     754:	ldp	x29, x30, [sp], #32
     758:	ret
     75c:	sub	x1, x1, #0x8
     760:	add	x0, x20, #0x8
     764:	stp	x0, x1, [x19, #16]
     768:	b	73c <read_uint64+0x2c>
     76c:	nop

0000000000000770 <read_uint16>:
     770:	stp	x29, x30, [sp, #-32]!
     774:	mov	x29, sp
     778:	stp	x19, x20, [sp, #16]
     77c:	mov	x19, x0
     780:	ldp	x20, x1, [x0, #16]
     784:	cmp	x1, #0x1
     788:	b.hi	7c4 <read_uint16+0x54>  // b.pmore
     78c:	bl	668 <advance.part.0>
     790:	mov	w1, #0x0                   	// #0
     794:	cbz	w0, 7b4 <read_uint16+0x44>
     798:	ldrb	w2, [x20, #1]
     79c:	ldrb	w1, [x20]
     7a0:	ldr	w3, [x19, #32]
     7a4:	orr	w0, w2, w1, lsl #8
     7a8:	cmp	w3, #0x0
     7ac:	orr	w1, w1, w2, lsl #8
     7b0:	csel	w1, w1, w0, eq  // eq = none
     7b4:	mov	w0, w1
     7b8:	ldp	x19, x20, [sp, #16]
     7bc:	ldp	x29, x30, [sp], #32
     7c0:	ret
     7c4:	sub	x1, x1, #0x2
     7c8:	add	x0, x20, #0x2
     7cc:	stp	x0, x1, [x19, #16]
     7d0:	b	798 <read_uint16+0x28>
     7d4:	nop

00000000000007d8 <read_byte>:
     7d8:	stp	x29, x30, [sp, #-32]!
     7dc:	mov	x29, sp
     7e0:	ldr	x2, [x0, #24]
     7e4:	str	x19, [sp, #16]
     7e8:	ldr	x19, [x0, #16]
     7ec:	cbnz	x2, 810 <read_byte+0x38>
     7f0:	bl	668 <advance.part.0>
     7f4:	mov	w1, #0x0                   	// #0
     7f8:	cbz	w0, 800 <read_byte+0x28>
     7fc:	ldrb	w1, [x19]
     800:	mov	w0, w1
     804:	ldr	x19, [sp, #16]
     808:	ldp	x29, x30, [sp], #32
     80c:	ret
     810:	mov	x1, x0
     814:	sub	x2, x2, #0x1
     818:	add	x0, x19, #0x1
     81c:	stp	x0, x2, [x1, #16]
     820:	b	7fc <read_byte+0x24>
     824:	nop

0000000000000828 <read_address>:
     828:	stp	x29, x30, [sp, #-16]!
     82c:	cmp	w1, #0x4
     830:	mov	x29, sp
     834:	b.eq	870 <read_address+0x48>  // b.none
     838:	mov	x2, x0
     83c:	b.gt	860 <read_address+0x38>
     840:	cmp	w1, #0x1
     844:	b.eq	880 <read_address+0x58>  // b.none
     848:	cmp	w1, #0x2
     84c:	b.ne	890 <read_address+0x68>  // b.any
     850:	bl	770 <read_uint16>
     854:	and	x0, x0, #0xffff
     858:	ldp	x29, x30, [sp], #16
     85c:	ret
     860:	cmp	w1, #0x8
     864:	b.ne	890 <read_address+0x68>  // b.any
     868:	ldp	x29, x30, [sp], #16
     86c:	b	710 <read_uint64>
     870:	bl	6b0 <read_uint32>
     874:	mov	w0, w0
     878:	ldp	x29, x30, [sp], #16
     87c:	ret
     880:	bl	7d8 <read_byte>
     884:	and	x0, x0, #0xff
     888:	ldp	x29, x30, [sp], #16
     88c:	ret
     890:	mov	x0, x2
     894:	adrp	x1, 0 <abbrev_compare>
     898:	add	x1, x1, #0x0
     89c:	bl	100 <dwarf_buf_error>
     8a0:	mov	x0, #0x0                   	// #0
     8a4:	ldp	x29, x30, [sp], #16
     8a8:	ret
     8ac:	nop

00000000000008b0 <read_uleb128>:
     8b0:	stp	x29, x30, [sp, #-64]!
     8b4:	mov	x29, sp
     8b8:	stp	x19, x20, [sp, #16]
     8bc:	mov	x19, x0
     8c0:	mov	w20, #0x0                   	// #0
     8c4:	stp	x21, x22, [sp, #32]
     8c8:	mov	x22, #0x0                   	// #0
     8cc:	stp	x23, x24, [sp, #48]
     8d0:	adrp	x24, 0 <abbrev_compare>
     8d4:	mov	w23, #0x0                   	// #0
     8d8:	add	x24, x24, #0x0
     8dc:	b	8f4 <read_uleb128+0x44>
     8e0:	and	x0, x21, #0x7f
     8e4:	lsl	x0, x0, x20
     8e8:	orr	x22, x22, x0
     8ec:	add	w20, w20, #0x7
     8f0:	tbz	w21, #7, 930 <read_uleb128+0x80>
     8f4:	ldp	x21, x1, [x19, #16]
     8f8:	mov	x0, x19
     8fc:	cbnz	x1, 948 <read_uleb128+0x98>
     900:	bl	668 <advance.part.0>
     904:	cbz	w0, 958 <read_uleb128+0xa8>
     908:	ldrb	w21, [x21]
     90c:	cmp	w20, #0x3f
     910:	b.ls	8e0 <read_uleb128+0x30>  // b.plast
     914:	cbnz	w23, 8ec <read_uleb128+0x3c>
     918:	mov	x1, x24
     91c:	mov	x0, x19
     920:	add	w20, w20, #0x7
     924:	mov	w23, #0x1                   	// #1
     928:	bl	100 <dwarf_buf_error>
     92c:	tbnz	w21, #7, 8f4 <read_uleb128+0x44>
     930:	mov	x0, x22
     934:	ldp	x19, x20, [sp, #16]
     938:	ldp	x21, x22, [sp, #32]
     93c:	ldp	x23, x24, [sp, #48]
     940:	ldp	x29, x30, [sp], #64
     944:	ret
     948:	sub	x1, x1, #0x1
     94c:	add	x0, x21, #0x1
     950:	stp	x0, x1, [x19, #16]
     954:	b	908 <read_uleb128+0x58>
     958:	mov	x22, #0x0                   	// #0
     95c:	mov	x0, x22
     960:	ldp	x19, x20, [sp, #16]
     964:	ldp	x21, x22, [sp, #32]
     968:	ldp	x23, x24, [sp, #48]
     96c:	ldp	x29, x30, [sp], #64
     970:	ret
     974:	nop

0000000000000978 <read_sleb128>:
     978:	stp	x29, x30, [sp, #-64]!
     97c:	mov	x29, sp
     980:	stp	x19, x20, [sp, #16]
     984:	mov	x19, x0
     988:	mov	w20, #0x0                   	// #0
     98c:	stp	x21, x22, [sp, #32]
     990:	mov	x22, #0x0                   	// #0
     994:	stp	x23, x24, [sp, #48]
     998:	adrp	x24, 0 <abbrev_compare>
     99c:	mov	w23, #0x0                   	// #0
     9a0:	add	x24, x24, #0x0
     9a4:	b	9bc <read_sleb128+0x44>
     9a8:	and	x1, x21, #0x7f
     9ac:	lsl	x1, x1, x20
     9b0:	orr	x22, x22, x1
     9b4:	add	w20, w20, #0x7
     9b8:	tbz	w21, #7, 9f8 <read_sleb128+0x80>
     9bc:	ldp	x21, x1, [x19, #16]
     9c0:	mov	x0, x19
     9c4:	cbnz	x1, a28 <read_sleb128+0xb0>
     9c8:	bl	668 <advance.part.0>
     9cc:	cbz	w0, a38 <read_sleb128+0xc0>
     9d0:	ldrb	w21, [x21]
     9d4:	cmp	w20, #0x3f
     9d8:	b.ls	9a8 <read_sleb128+0x30>  // b.plast
     9dc:	cbnz	w23, 9b4 <read_sleb128+0x3c>
     9e0:	mov	x1, x24
     9e4:	mov	x0, x19
     9e8:	add	w20, w20, #0x7
     9ec:	mov	w23, #0x1                   	// #1
     9f0:	bl	100 <dwarf_buf_error>
     9f4:	tbnz	w21, #7, 9bc <read_sleb128+0x44>
     9f8:	and	w21, w21, #0x40
     9fc:	cmp	w20, #0x3f
     a00:	mov	x0, #0xffffffffffffffff    	// #-1
     a04:	ccmp	w21, #0x0, #0x4, ls  // ls = plast
     a08:	lsl	x0, x0, x20
     a0c:	orr	x0, x22, x0
     a10:	csel	x0, x0, x22, ne  // ne = any
     a14:	ldp	x19, x20, [sp, #16]
     a18:	ldp	x21, x22, [sp, #32]
     a1c:	ldp	x23, x24, [sp, #48]
     a20:	ldp	x29, x30, [sp], #64
     a24:	ret
     a28:	sub	x1, x1, #0x1
     a2c:	add	x0, x21, #0x1
     a30:	stp	x0, x1, [x19, #16]
     a34:	b	9d0 <read_sleb128+0x58>
     a38:	mov	x0, #0x0                   	// #0
     a3c:	ldp	x19, x20, [sp, #16]
     a40:	ldp	x21, x22, [sp, #32]
     a44:	ldp	x23, x24, [sp, #48]
     a48:	ldp	x29, x30, [sp], #64
     a4c:	ret

0000000000000a50 <read_string>:
     a50:	stp	x29, x30, [sp, #-32]!
     a54:	mov	x29, sp
     a58:	stp	x19, x20, [sp, #16]
     a5c:	mov	x19, x0
     a60:	ldp	x20, x1, [x0, #16]
     a64:	mov	x0, x20
     a68:	bl	0 <__asan_internal_strnlen>
     a6c:	ldr	x1, [x19, #24]
     a70:	add	x0, x0, #0x1
     a74:	cmp	x0, x1
     a78:	b.ls	a9c <read_string+0x4c>  // b.plast
     a7c:	mov	x0, x19
     a80:	bl	668 <advance.part.0>
     a84:	cmp	w0, #0x0
     a88:	csel	x20, x20, xzr, ne  // ne = any
     a8c:	mov	x0, x20
     a90:	ldp	x19, x20, [sp, #16]
     a94:	ldp	x29, x30, [sp], #32
     a98:	ret
     a9c:	ldr	x2, [x19, #16]
     aa0:	sub	x1, x1, x0
     aa4:	add	x0, x2, x0
     aa8:	stp	x0, x1, [x19, #16]
     aac:	mov	x0, x20
     ab0:	ldp	x19, x20, [sp, #16]
     ab4:	ldp	x29, x30, [sp], #32
     ab8:	ret
     abc:	nop

0000000000000ac0 <read_attribute>:
     ac0:	stp	x29, x30, [sp, #-96]!
     ac4:	mov	x29, sp
     ac8:	stp	x27, x28, [sp, #80]
     acc:	mov	x27, x1
     ad0:	ldr	x28, [sp, #96]
     ad4:	stp	x19, x20, [sp, #16]
     ad8:	adrp	x20, 0 <abbrev_compare>
     adc:	mov	w19, w0
     ae0:	add	x20, x20, #0x0
     ae4:	stp	x21, x22, [sp, #32]
     ae8:	mov	w21, w2
     aec:	mov	x22, x7
     af0:	stp	x23, x24, [sp, #48]
     af4:	mov	w24, w4
     af8:	mov	x23, x5
     afc:	stp	x25, x26, [sp, #64]
     b00:	mov	w25, w3
     b04:	mov	x26, x6
     b08:	mov	x0, x28
     b0c:	mov	x2, #0x10                  	// #16
     b10:	mov	w1, #0x0                   	// #0
     b14:	bl	0 <__asan_internal_memset>
     b18:	cmp	w19, #0x20
     b1c:	b.hi	b40 <read_attribute+0x80>  // b.pmore
     b20:	cbz	w19, dc8 <read_attribute+0x308>
     b24:	sub	w19, w19, #0x1
     b28:	cmp	w19, #0x1f
     b2c:	b.hi	dc8 <read_attribute+0x308>  // b.pmore
     b30:	ldrh	w0, [x20, w19, uxtw #1]
     b34:	adr	x1, b40 <read_attribute+0x80>
     b38:	add	x0, x1, w0, sxth #2
     b3c:	br	x0
     b40:	mov	w0, #0x1f20                	// #7968
     b44:	cmp	w19, w0
     b48:	b.eq	ec8 <read_attribute+0x408>  // b.none
     b4c:	b.ls	b98 <read_attribute+0xd8>  // b.plast
     b50:	mov	w0, #0x1f21                	// #7969
     b54:	cmp	w19, w0
     b58:	b.ne	dc8 <read_attribute+0x308>  // b.any
     b5c:	mov	x0, x27
     b60:	cbz	w21, ebc <read_attribute+0x3fc>
     b64:	bl	710 <read_uint64>
     b68:	mov	x1, x0
     b6c:	cbz	x22, f10 <read_attribute+0x450>
     b70:	ldr	x0, [x22, #112]
     b74:	cmp	x0, x1
     b78:	b.ls	f34 <read_attribute+0x474>  // b.plast
     b7c:	ldr	x2, [x22, #104]
     b80:	mov	w3, #0x4                   	// #4
     b84:	mov	w0, #0x1                   	// #1
     b88:	str	w3, [x28]
     b8c:	add	x1, x2, x1
     b90:	str	x1, [x28, #8]
     b94:	b	bfc <read_attribute+0x13c>
     b98:	mov	w0, #0xffffe0ff            	// #-7937
     b9c:	add	w19, w19, w0
     ba0:	cmp	w19, #0x1
     ba4:	mov	w0, #0x8                   	// #8
     ba8:	b.hi	dc8 <read_attribute+0x308>  // b.pmore
     bac:	str	w0, [x28]
     bb0:	mov	x0, x27
     bb4:	bl	8b0 <read_uleb128>
     bb8:	mov	x1, x0
     bbc:	str	x1, [x28, #8]
     bc0:	mov	w0, #0x1                   	// #1
     bc4:	ldp	x19, x20, [sp, #16]
     bc8:	ldp	x21, x22, [sp, #32]
     bcc:	ldp	x23, x24, [sp, #48]
     bd0:	ldp	x25, x26, [sp, #64]
     bd4:	ldp	x27, x28, [sp, #80]
     bd8:	ldp	x29, x30, [sp], #96
     bdc:	ret
     be0:	mov	w0, #0x2                   	// #2
     be4:	str	w0, [x28]
     be8:	mov	x0, x27
     bec:	bl	7d8 <read_byte>
     bf0:	and	x1, x0, #0xff
     bf4:	mov	w0, #0x1                   	// #1
     bf8:	str	x1, [x28, #8]
     bfc:	ldp	x19, x20, [sp, #16]
     c00:	ldp	x21, x22, [sp, #32]
     c04:	ldp	x23, x24, [sp, #48]
     c08:	ldp	x25, x26, [sp, #64]
     c0c:	ldp	x27, x28, [sp, #80]
     c10:	ldp	x29, x30, [sp], #96
     c14:	ret
     c18:	mov	w0, #0x3                   	// #3
     c1c:	str	w0, [x28]
     c20:	mov	x0, x27
     c24:	bl	978 <read_sleb128>
     c28:	mov	x1, x0
     c2c:	mov	w0, #0x1                   	// #1
     c30:	str	x1, [x28, #8]
     c34:	b	bfc <read_attribute+0x13c>
     c38:	mov	w0, #0xa                   	// #10
     c3c:	str	w0, [x28]
     c40:	mov	x0, x27
     c44:	bl	7d8 <read_byte>
     c48:	and	x2, x0, #0xff
     c4c:	ldr	x1, [x27, #24]
     c50:	cmp	x1, w0, uxtb
     c54:	b.cs	d48 <read_attribute+0x288>  // b.hs, b.nlast
     c58:	mov	x0, x27
     c5c:	ldp	x19, x20, [sp, #16]
     c60:	ldp	x21, x22, [sp, #32]
     c64:	ldp	x23, x24, [sp, #48]
     c68:	ldp	x25, x26, [sp, #64]
     c6c:	ldp	x27, x28, [sp, #80]
     c70:	ldp	x29, x30, [sp], #96
     c74:	b	668 <advance.part.0>
     c78:	mov	w0, #0xa                   	// #10
     c7c:	str	w0, [x28]
     c80:	mov	x0, x27
     c84:	bl	8b0 <read_uleb128>
     c88:	mov	x1, x0
     c8c:	ldr	x2, [x27, #24]
     c90:	cmp	x0, x2
     c94:	b.hi	c58 <read_attribute+0x198>  // b.pmore
     c98:	ldr	x3, [x27, #16]
     c9c:	sub	x2, x2, x0
     ca0:	mov	w0, #0x1                   	// #1
     ca4:	add	x1, x3, x1
     ca8:	stp	x1, x2, [x27, #16]
     cac:	b	bfc <read_attribute+0x13c>
     cb0:	mov	w0, #0x2                   	// #2
     cb4:	str	w0, [x28]
     cb8:	mov	x0, x27
     cbc:	bl	710 <read_uint64>
     cc0:	mov	x1, x0
     cc4:	str	x1, [x28, #8]
     cc8:	mov	w0, #0x1                   	// #1
     ccc:	ldp	x19, x20, [sp, #16]
     cd0:	ldp	x21, x22, [sp, #32]
     cd4:	ldp	x23, x24, [sp, #48]
     cd8:	ldp	x25, x26, [sp, #64]
     cdc:	ldp	x27, x28, [sp, #80]
     ce0:	ldp	x29, x30, [sp], #96
     ce4:	ret
     ce8:	mov	w0, #0x2                   	// #2
     cec:	str	w0, [x28]
     cf0:	mov	x0, x27
     cf4:	bl	6b0 <read_uint32>
     cf8:	mov	w1, w0
     cfc:	mov	w0, #0x1                   	// #1
     d00:	str	x1, [x28, #8]
     d04:	b	bfc <read_attribute+0x13c>
     d08:	mov	w0, #0x2                   	// #2
     d0c:	str	w0, [x28]
     d10:	mov	x0, x27
     d14:	bl	770 <read_uint16>
     d18:	and	x1, x0, #0xffff
     d1c:	mov	w0, #0x1                   	// #1
     d20:	str	x1, [x28, #8]
     d24:	b	bfc <read_attribute+0x13c>
     d28:	mov	w0, #0xa                   	// #10
     d2c:	str	w0, [x28]
     d30:	mov	x0, x27
     d34:	bl	6b0 <read_uint32>
     d38:	mov	w2, w0
     d3c:	ldr	x1, [x27, #24]
     d40:	cmp	x1, w0, uxtw
     d44:	b.cc	c58 <read_attribute+0x198>  // b.lo, b.ul, b.last
     d48:	ldr	x3, [x27, #16]
     d4c:	sub	x1, x1, x2
     d50:	mov	w0, #0x1                   	// #1
     d54:	add	x2, x3, x2
     d58:	stp	x2, x1, [x27, #16]
     d5c:	b	bfc <read_attribute+0x13c>
     d60:	mov	w0, #0x4                   	// #4
     d64:	str	w0, [x28]
     d68:	mov	x0, x27
     d6c:	bl	a50 <read_string>
     d70:	cmp	x0, #0x0
     d74:	str	x0, [x28, #8]
     d78:	cset	w0, ne  // ne = any
     d7c:	b	bfc <read_attribute+0x13c>
     d80:	mov	w0, #0xa                   	// #10
     d84:	str	w0, [x28]
     d88:	mov	x0, x27
     d8c:	bl	770 <read_uint16>
     d90:	and	x2, x0, #0xffff
     d94:	ldr	x1, [x27, #24]
     d98:	cmp	x1, w0, uxth
     d9c:	b.cc	c58 <read_attribute+0x198>  // b.lo, b.ul, b.last
     da0:	b	d48 <read_attribute+0x288>
     da4:	mov	w19, #0x1                   	// #1
     da8:	str	w19, [x28]
     dac:	mov	w1, w24
     db0:	mov	x0, x27
     db4:	bl	828 <read_address>
     db8:	mov	x1, x0
     dbc:	mov	w0, w19
     dc0:	str	x1, [x28, #8]
     dc4:	b	bfc <read_attribute+0x13c>
     dc8:	mov	x0, x27
     dcc:	adrp	x1, 0 <abbrev_compare>
     dd0:	add	x1, x1, #0x0
     dd4:	bl	100 <dwarf_buf_error>
     dd8:	mov	w0, #0x0                   	// #0
     ddc:	b	bfc <read_attribute+0x13c>
     de0:	mov	w0, #0x9                   	// #9
     de4:	b	cb4 <read_attribute+0x1f4>
     de8:	mov	x1, #0x1                   	// #1
     dec:	mov	w2, #0x2                   	// #2
     df0:	mov	w0, w1
     df4:	str	w2, [x28]
     df8:	str	x1, [x28, #8]
     dfc:	b	bfc <read_attribute+0x13c>
     e00:	mov	w0, #0xb                   	// #11
     e04:	b	c7c <read_attribute+0x1bc>
     e08:	mov	w0, #0x8                   	// #8
     e0c:	str	w0, [x28]
     e10:	mov	x0, x27
     e14:	cbz	w21, eec <read_attribute+0x42c>
     e18:	bl	710 <read_uint64>
     e1c:	mov	x1, x0
     e20:	b	bbc <read_attribute+0xfc>
     e24:	mov	x0, x27
     e28:	bl	8b0 <read_uleb128>
     e2c:	mov	w19, w0
     e30:	b	b08 <read_attribute+0x48>
     e34:	mov	w0, #0x5                   	// #5
     e38:	b	bac <read_attribute+0xec>
     e3c:	mov	w0, #0x5                   	// #5
     e40:	b	cb4 <read_attribute+0x1f4>
     e44:	mov	w0, #0x5                   	// #5
     e48:	b	cec <read_attribute+0x22c>
     e4c:	mov	w0, #0x5                   	// #5
     e50:	b	d0c <read_attribute+0x24c>
     e54:	mov	w0, #0x5                   	// #5
     e58:	b	be4 <read_attribute+0x124>
     e5c:	mov	w0, #0x6                   	// #6
     e60:	str	w0, [x28]
     e64:	cmp	w25, #0x2
     e68:	b.ne	e10 <read_attribute+0x350>  // b.any
     e6c:	mov	w1, w24
     e70:	mov	x0, x27
     e74:	bl	828 <read_address>
     e78:	mov	x1, x0
     e7c:	mov	w0, #0x1                   	// #1
     e80:	str	x1, [x28, #8]
     e84:	b	bfc <read_attribute+0x13c>
     e88:	mov	w0, #0x2                   	// #2
     e8c:	b	bac <read_attribute+0xec>
     e90:	mov	x0, x27
     e94:	cbz	w21, f04 <read_attribute+0x444>
     e98:	bl	710 <read_uint64>
     e9c:	cmp	x0, x26
     ea0:	b.cs	f1c <read_attribute+0x45c>  // b.hs, b.nlast
     ea4:	add	x23, x23, x0
     ea8:	mov	w1, #0x4                   	// #4
     eac:	mov	w0, #0x1                   	// #1
     eb0:	str	w1, [x28]
     eb4:	str	x23, [x28, #8]
     eb8:	b	bfc <read_attribute+0x13c>
     ebc:	bl	6b0 <read_uint32>
     ec0:	mov	w1, w0
     ec4:	b	b6c <read_attribute+0xac>
     ec8:	mov	x0, x27
     ecc:	cbz	w21, ef8 <read_attribute+0x438>
     ed0:	bl	710 <read_uint64>
     ed4:	str	x0, [x28, #8]
     ed8:	cbz	x22, f10 <read_attribute+0x450>
     edc:	mov	w1, #0x7                   	// #7
     ee0:	mov	w0, #0x1                   	// #1
     ee4:	str	w1, [x28]
     ee8:	b	bfc <read_attribute+0x13c>
     eec:	bl	6b0 <read_uint32>
     ef0:	mov	w1, w0
     ef4:	b	bbc <read_attribute+0xfc>
     ef8:	bl	6b0 <read_uint32>
     efc:	mov	w0, w0
     f00:	b	ed4 <read_attribute+0x414>
     f04:	bl	6b0 <read_uint32>
     f08:	mov	w0, w0
     f0c:	b	e9c <read_attribute+0x3dc>
     f10:	mov	w0, #0x1                   	// #1
     f14:	str	wzr, [x28]
     f18:	b	bfc <read_attribute+0x13c>
     f1c:	mov	x0, x27
     f20:	adrp	x1, 0 <abbrev_compare>
     f24:	add	x1, x1, #0x0
     f28:	bl	100 <dwarf_buf_error>
     f2c:	mov	w0, #0x0                   	// #0
     f30:	b	bfc <read_attribute+0x13c>
     f34:	mov	x0, x27
     f38:	adrp	x1, 0 <abbrev_compare>
     f3c:	add	x1, x1, #0x0
     f40:	bl	100 <dwarf_buf_error>
     f44:	mov	w0, #0x0                   	// #0
     f48:	b	bfc <read_attribute+0x13c>
     f4c:	nop

0000000000000f50 <find_address_ranges>:
     f50:	sub	sp, sp, #0x170
     f54:	stp	x29, x30, [sp, #48]
     f58:	add	x29, sp, #0x30
     f5c:	stp	x25, x26, [sp, #112]
     f60:	ldr	x25, [sp, #368]
     f64:	stp	x27, x28, [sp, #128]
     f68:	add	x28, sp, #0x130
     f6c:	ldr	x26, [sp, #392]
     f70:	mov	x27, x4
     f74:	stp	x19, x20, [sp, #64]
     f78:	mov	x19, x2
     f7c:	mov	x20, x3
     f80:	stp	x23, x24, [sp, #96]
     f84:	mov	x24, x26
     f88:	mov	x26, x25
     f8c:	mov	x25, x28
     f90:	stp	x21, x22, [sp, #80]
     f94:	stp	x0, x1, [sp, #192]
     f98:	str	x6, [sp, #208]
     f9c:	str	x5, [sp, #224]
     fa0:	str	w7, [sp, #236]
     fa4:	add	x0, sp, #0xf0
     fa8:	str	x0, [sp, #216]
     fac:	ldr	x0, [x19, #24]
     fb0:	cbz	x0, 1268 <find_address_ranges+0x318>
     fb4:	mov	x0, x19
     fb8:	bl	8b0 <read_uleb128>
     fbc:	mov	x2, x0
     fc0:	cbz	x0, 1268 <find_address_ranges+0x318>
     fc4:	ldp	x3, x4, [sp, #376]
     fc8:	add	x1, x24, #0x60
     fcc:	add	x0, x24, #0x58
     fd0:	bl	3c0 <lookup_abbrev.isra.0>
     fd4:	mov	x28, x0
     fd8:	cbz	x0, 11a0 <find_address_ranges+0x250>
     fdc:	ldr	x0, [sp, #408]
     fe0:	cbz	x0, ff0 <find_address_ranges+0xa0>
     fe4:	ldr	x1, [sp, #408]
     fe8:	ldr	w0, [x28, #8]
     fec:	str	w0, [x1]
     ff0:	ldr	x0, [x28, #16]
     ff4:	cbz	x0, 1154 <find_address_ranges+0x204>
     ff8:	mov	x23, #0x0                   	// #0
     ffc:	mov	x21, #0x0                   	// #0
    1000:	str	wzr, [sp, #152]
    1004:	str	wzr, [sp, #160]
    1008:	stp	xzr, xzr, [sp, #168]
    100c:	str	wzr, [sp, #184]
    1010:	str	wzr, [sp, #232]
    1014:	ldr	x2, [x28, #24]
    1018:	b	1050 <find_address_ranges+0x100>
    101c:	cmp	w0, #0x10
    1020:	b.eq	11f0 <find_address_ranges+0x2a0>  // b.none
    1024:	cmp	w0, #0x11
    1028:	b.ne	11c4 <find_address_ranges+0x274>  // b.any
    102c:	ldr	w0, [sp, #304]
    1030:	cmp	w0, #0x1
    1034:	b.ne	1040 <find_address_ranges+0xf0>  // b.any
    1038:	ldr	x21, [sp, #312]
    103c:	str	w0, [sp, #184]
    1040:	ldr	x0, [x28, #16]
    1044:	add	x23, x23, #0x1
    1048:	cmp	x0, x23
    104c:	b.ls	10d8 <find_address_ranges+0x188>  // b.plast
    1050:	lsl	x22, x23, #3
    1054:	ldr	w4, [x24, #48]
    1058:	add	x0, x2, x22
    105c:	mov	x7, x26
    1060:	ldp	w3, w2, [x24, #40]
    1064:	mov	x6, x27
    1068:	ldr	w0, [x0, #4]
    106c:	mov	x5, x20
    1070:	str	x25, [sp]
    1074:	mov	x1, x19
    1078:	bl	ac0 <read_attribute>
    107c:	cbz	w0, 11a4 <find_address_ranges+0x254>
    1080:	ldr	x2, [x28, #24]
    1084:	ldr	w0, [x2, x22]
    1088:	cmp	w0, #0x12
    108c:	b.eq	123c <find_address_ranges+0x2ec>  // b.none
    1090:	b.ls	101c <find_address_ranges+0xcc>  // b.plast
    1094:	cmp	w0, #0x1b
    1098:	b.eq	1218 <find_address_ranges+0x2c8>  // b.none
    109c:	cmp	w0, #0x55
    10a0:	b.ne	1040 <find_address_ranges+0xf0>  // b.any
    10a4:	ldr	w0, [sp, #304]
    10a8:	cmp	w0, #0x2
    10ac:	ccmp	w0, #0x8, #0x4, ne  // ne = any
    10b0:	b.ne	1040 <find_address_ranges+0xf0>  // b.any
    10b4:	mov	w0, #0x1                   	// #1
    10b8:	str	w0, [sp, #152]
    10bc:	ldr	x0, [sp, #312]
    10c0:	str	x0, [sp, #176]
    10c4:	ldr	x0, [x28, #16]
    10c8:	add	x23, x23, #0x1
    10cc:	cmp	x0, x23
    10d0:	b.hi	1050 <find_address_ranges+0x100>  // b.pmore
    10d4:	nop
    10d8:	ldr	w0, [x28, #8]
    10dc:	cmp	w0, #0x2e
    10e0:	ccmp	w0, #0x11, #0x4, ne  // ne = any
    10e4:	b.ne	1154 <find_address_ranges+0x204>  // b.any
    10e8:	ldr	w0, [sp, #152]
    10ec:	cbnz	w0, 1270 <find_address_ranges+0x320>
    10f0:	ldr	w1, [sp, #160]
    10f4:	ldr	w0, [sp, #184]
    10f8:	tst	w0, w1
    10fc:	b.eq	1154 <find_address_ranges+0x204>  // b.none
    1100:	ldr	x1, [sp, #168]
    1104:	str	x24, [sp, #320]
    1108:	ldr	w0, [sp, #232]
    110c:	ldr	x8, [sp, #216]
    1110:	cmp	w0, #0x0
    1114:	add	x0, x1, x21
    1118:	csel	x0, x0, x1, ne  // ne = any
    111c:	stp	x21, x0, [sp, #304]
    1120:	mov	x2, x8
    1124:	ldp	x6, x7, [x25]
    1128:	ldp	x3, x4, [sp, #376]
    112c:	ldr	x0, [sp, #192]
    1130:	ldr	x1, [sp, #200]
    1134:	ldr	x5, [sp, #400]
    1138:	stp	x6, x7, [x8]
    113c:	str	x24, [x8, #16]
    1140:	bl	20 <add_unit_addr>
    1144:	cbz	w0, 11a4 <find_address_ranges+0x254>
    1148:	ldr	w0, [x28, #8]
    114c:	cmp	w0, #0x11
    1150:	b.eq	1268 <find_address_ranges+0x318>  // b.none
    1154:	ldr	w0, [x28, #12]
    1158:	cbz	w0, fac <find_address_ranges+0x5c>
    115c:	ldr	x0, [sp, #376]
    1160:	stp	x26, x0, [sp]
    1164:	ldr	w7, [sp, #236]
    1168:	ldp	x1, x6, [sp, #200]
    116c:	str	x24, [sp, #24]
    1170:	ldr	x0, [sp, #384]
    1174:	str	x0, [sp, #16]
    1178:	ldr	x0, [sp, #400]
    117c:	str	x0, [sp, #32]
    1180:	ldr	x0, [sp, #192]
    1184:	str	xzr, [sp, #40]
    1188:	ldr	x5, [sp, #224]
    118c:	mov	x4, x27
    1190:	mov	x3, x20
    1194:	mov	x2, x19
    1198:	bl	f50 <find_address_ranges>
    119c:	cbnz	w0, fa4 <find_address_ranges+0x54>
    11a0:	mov	w0, #0x0                   	// #0
    11a4:	ldp	x29, x30, [sp, #48]
    11a8:	ldp	x19, x20, [sp, #64]
    11ac:	ldp	x21, x22, [sp, #80]
    11b0:	ldp	x23, x24, [sp, #96]
    11b4:	ldp	x25, x26, [sp, #112]
    11b8:	ldp	x27, x28, [sp, #128]
    11bc:	add	sp, sp, #0x170
    11c0:	ret
    11c4:	cmp	w0, #0x3
    11c8:	b.ne	1040 <find_address_ranges+0xf0>  // b.any
    11cc:	ldr	w0, [x28, #8]
    11d0:	cmp	w0, #0x11
    11d4:	b.ne	1040 <find_address_ranges+0xf0>  // b.any
    11d8:	ldr	w0, [sp, #304]
    11dc:	cmp	w0, #0x4
    11e0:	b.ne	1040 <find_address_ranges+0xf0>  // b.any
    11e4:	ldr	x0, [sp, #312]
    11e8:	str	x0, [x24, #64]
    11ec:	b	1040 <find_address_ranges+0xf0>
    11f0:	ldr	w0, [x28, #8]
    11f4:	cmp	w0, #0x11
    11f8:	b.ne	1040 <find_address_ranges+0xf0>  // b.any
    11fc:	ldr	w0, [sp, #304]
    1200:	cmp	w0, #0x2
    1204:	ccmp	w0, #0x8, #0x4, ne  // ne = any
    1208:	b.ne	1040 <find_address_ranges+0xf0>  // b.any
    120c:	ldr	x0, [sp, #312]
    1210:	str	x0, [x24, #56]
    1214:	b	1040 <find_address_ranges+0xf0>
    1218:	ldr	w0, [x28, #8]
    121c:	cmp	w0, #0x11
    1220:	b.ne	1040 <find_address_ranges+0xf0>  // b.any
    1224:	ldr	w0, [sp, #304]
    1228:	cmp	w0, #0x4
    122c:	b.ne	1040 <find_address_ranges+0xf0>  // b.any
    1230:	ldr	x0, [sp, #312]
    1234:	str	x0, [x24, #72]
    1238:	b	1040 <find_address_ranges+0xf0>
    123c:	ldr	w0, [sp, #304]
    1240:	cmp	w0, #0x1
    1244:	b.eq	1258 <find_address_ranges+0x308>  // b.none
    1248:	cmp	w0, #0x2
    124c:	b.ne	1040 <find_address_ranges+0xf0>  // b.any
    1250:	mov	w0, #0x1                   	// #1
    1254:	str	w0, [sp, #232]
    1258:	str	w0, [sp, #160]
    125c:	ldr	x0, [sp, #312]
    1260:	str	x0, [sp, #168]
    1264:	b	1040 <find_address_ranges+0xf0>
    1268:	mov	w0, #0x1                   	// #1
    126c:	b	11a4 <find_address_ranges+0x254>
    1270:	ldr	x0, [sp, #176]
    1274:	ldr	x1, [sp, #208]
    1278:	cmp	x0, x1
    127c:	b.cs	13b8 <find_address_ranges+0x468>  // b.hs, b.nlast
    1280:	ldr	x3, [sp, #176]
    1284:	adrp	x0, 0 <abbrev_compare>
    1288:	ldr	x4, [sp, #208]
    128c:	add	x0, x0, #0x0
    1290:	ldr	x2, [sp, #224]
    1294:	stp	x0, x2, [sp, #304]
    1298:	ldr	w0, [sp, #236]
    129c:	sub	x23, x4, x3
    12a0:	str	w0, [sp, #336]
    12a4:	ldr	x0, [sp, #376]
    12a8:	add	x1, x2, x3
    12ac:	stp	x20, x27, [sp, #168]
    12b0:	mov	x22, #0xffff                	// #65535
    12b4:	stp	x1, x23, [sp, #320]
    12b8:	str	x0, [sp, #344]
    12bc:	ldp	x20, x23, [sp, #192]
    12c0:	stp	x28, x19, [sp, #152]
    12c4:	ldr	x0, [sp, #384]
    12c8:	str	x26, [sp, #184]
    12cc:	ldr	x19, [sp, #216]
    12d0:	mov	x28, x0
    12d4:	ldr	x27, [sp, #376]
    12d8:	str	x0, [sp, #352]
    12dc:	str	wzr, [sp, #360]
    12e0:	ldr	w1, [x24, #48]
    12e4:	mov	x0, x25
    12e8:	bl	828 <read_address>
    12ec:	mov	x26, x0
    12f0:	ldr	w1, [x24, #48]
    12f4:	mov	x0, x25
    12f8:	bl	828 <read_address>
    12fc:	orr	x1, x26, x0
    1300:	cbz	x1, 13d4 <find_address_ranges+0x484>
    1304:	ldr	w1, [x24, #48]
    1308:	cmp	w1, #0x4
    130c:	b.eq	13a8 <find_address_ranges+0x458>  // b.none
    1310:	b.gt	1344 <find_address_ranges+0x3f4>
    1314:	cmp	w1, #0x1
    1318:	b.eq	139c <find_address_ranges+0x44c>  // b.none
    131c:	cmp	w1, #0x2
    1320:	b.ne	1358 <find_address_ranges+0x408>  // b.any
    1324:	cmp	x26, x22
    1328:	cset	w1, eq  // eq = none
    132c:	cbz	w1, 1358 <find_address_ranges+0x408>
    1330:	mov	x21, x0
    1334:	ldr	w0, [sp, #360]
    1338:	cbz	w0, 12e0 <find_address_ranges+0x390>
    133c:	mov	w0, #0x0                   	// #0
    1340:	b	11a4 <find_address_ranges+0x254>
    1344:	cmp	w1, #0x8
    1348:	b.ne	1358 <find_address_ranges+0x408>  // b.any
    134c:	cmn	x26, #0x1
    1350:	cset	w1, eq  // eq = none
    1354:	cbnz	w1, 1330 <find_address_ranges+0x3e0>
    1358:	add	x0, x21, x0
    135c:	add	x2, x21, x26
    1360:	stp	x2, x0, [sp, #280]
    1364:	add	x0, sp, #0x200
    1368:	mov	x4, x28
    136c:	ldr	x5, [sp, #400]
    1370:	str	x24, [sp, #296]
    1374:	ldp	x0, x1, [x0, #-232]
    1378:	stp	x0, x1, [x19]
    137c:	mov	x3, x27
    1380:	str	x24, [x19, #16]
    1384:	mov	x2, x19
    1388:	mov	x1, x23
    138c:	mov	x0, x20
    1390:	bl	20 <add_unit_addr>
    1394:	cbnz	w0, 1334 <find_address_ranges+0x3e4>
    1398:	b	11a4 <find_address_ranges+0x254>
    139c:	cmp	x26, #0xff
    13a0:	cset	w1, eq  // eq = none
    13a4:	b	132c <find_address_ranges+0x3dc>
    13a8:	mov	x1, #0xffffffff            	// #4294967295
    13ac:	cmp	x26, x1
    13b0:	cset	w1, eq  // eq = none
    13b4:	b	132c <find_address_ranges+0x3dc>
    13b8:	ldp	x3, x0, [sp, #376]
    13bc:	adrp	x1, 0 <abbrev_compare>
    13c0:	mov	w2, #0x0                   	// #0
    13c4:	add	x1, x1, #0x0
    13c8:	blr	x3
    13cc:	mov	w0, #0x0                   	// #0
    13d0:	b	11a4 <find_address_ranges+0x254>
    13d4:	ldr	w0, [sp, #360]
    13d8:	ldp	x28, x19, [sp, #152]
    13dc:	ldp	x20, x27, [sp, #168]
    13e0:	ldr	x26, [sp, #184]
    13e4:	cbz	w0, 1148 <find_address_ranges+0x1f8>
    13e8:	mov	w0, #0x0                   	// #0
    13ec:	b	11a4 <find_address_ranges+0x254>

00000000000013f0 <read_referenced_name_from_attr.isra.0.part.0>:
    13f0:	ldr	w2, [x2]
    13f4:	mov	x6, x3
    13f8:	mov	x7, x0
    13fc:	mov	x3, x4
    1400:	cmp	w2, #0x6
    1404:	mov	x4, x5
    1408:	b.eq	1470 <read_referenced_name_from_attr.isra.0.part.0+0x80>  // b.none
    140c:	cmp	w2, #0x2
    1410:	ccmp	w2, #0x5, #0x4, ne  // ne = any
    1414:	b.eq	14c8 <read_referenced_name_from_attr.isra.0.part.0+0xd8>  // b.none
    1418:	cmp	w2, #0x7
    141c:	b.ne	1468 <read_referenced_name_from_attr.isra.0.part.0+0x78>  // b.any
    1420:	ldr	x0, [x0, #8]
    1424:	mov	x5, #0x0                   	// #0
    1428:	ldr	x2, [x6]
    142c:	ldp	x9, x7, [x0, #40]
    1430:	add	x6, x7, x5
    1434:	cmp	x7, x5
    1438:	b.ls	1468 <read_referenced_name_from_attr.isra.0.part.0+0x78>  // b.plast
    143c:	lsr	x6, x6, #1
    1440:	ldr	x1, [x9, x6, lsl #3]
    1444:	ldr	x8, [x1, #24]
    1448:	cmp	x2, x8
    144c:	b.cc	14c0 <read_referenced_name_from_attr.isra.0.part.0+0xd0>  // b.lo, b.ul, b.last
    1450:	ldr	x10, [x1, #32]
    1454:	add	x5, x6, #0x1
    1458:	cmp	x2, x10
    145c:	b.cs	1430 <read_referenced_name_from_attr.isra.0.part.0+0x40>  // b.hs, b.nlast
    1460:	sub	x2, x2, x8
    1464:	b	14d0 <read_referenced_name>
    1468:	mov	x0, #0x0                   	// #0
    146c:	ret
    1470:	ldp	x9, x5, [x7, #40]
    1474:	mov	x0, #0x0                   	// #0
    1478:	ldr	x2, [x6]
    147c:	add	x6, x5, x0
    1480:	cmp	x5, x0
    1484:	b.ls	1468 <read_referenced_name_from_attr.isra.0.part.0+0x78>  // b.plast
    1488:	lsr	x6, x6, #1
    148c:	ldr	x1, [x9, x6, lsl #3]
    1490:	ldr	x8, [x1, #24]
    1494:	cmp	x2, x8
    1498:	b.cc	14b8 <read_referenced_name_from_attr.isra.0.part.0+0xc8>  // b.lo, b.ul, b.last
    149c:	ldr	x10, [x1, #32]
    14a0:	add	x0, x6, #0x1
    14a4:	cmp	x2, x10
    14a8:	b.cs	147c <read_referenced_name_from_attr.isra.0.part.0+0x8c>  // b.hs, b.nlast
    14ac:	sub	x2, x2, x8
    14b0:	mov	x0, x7
    14b4:	b	14d0 <read_referenced_name>
    14b8:	mov	x5, x6
    14bc:	b	147c <read_referenced_name_from_attr.isra.0.part.0+0x8c>
    14c0:	mov	x7, x6
    14c4:	b	1430 <read_referenced_name_from_attr.isra.0.part.0+0x40>
    14c8:	ldr	x2, [x6]
    14cc:	b	14d0 <read_referenced_name>

00000000000014d0 <read_referenced_name>:
    14d0:	sub	sp, sp, #0xd0
    14d4:	stp	x29, x30, [sp, #16]
    14d8:	add	x29, sp, #0x10
    14dc:	stp	x27, x28, [sp, #96]
    14e0:	mov	x27, x0
    14e4:	ldr	x0, [x1, #16]
    14e8:	stp	x21, x22, [sp, #48]
    14ec:	stp	x25, x26, [sp, #80]
    14f0:	cmp	x0, x2
    14f4:	mov	x25, x4
    14f8:	str	x3, [sp, #112]
    14fc:	b.hi	16a0 <read_referenced_name+0x1d0>  // b.pmore
    1500:	stp	x19, x20, [sp, #32]
    1504:	mov	x19, x1
    1508:	sub	x4, x2, x0
    150c:	ldr	x1, [x1, #8]
    1510:	cmp	x4, x1
    1514:	b.cs	169c <read_referenced_name+0x1cc>  // b.hs, b.nlast
    1518:	ldr	x3, [x19]
    151c:	add	x0, x0, x1
    1520:	sub	x1, x0, x2
    1524:	ldr	w5, [x27, #120]
    1528:	add	x2, x3, x4
    152c:	stp	x2, x1, [sp, #160]
    1530:	adrp	x3, 0 <abbrev_compare>
    1534:	ldr	x6, [x27, #56]
    1538:	add	x3, x3, #0x0
    153c:	ldr	x1, [sp, #112]
    1540:	add	x21, sp, #0x90
    1544:	mov	x0, x21
    1548:	stp	x3, x6, [sp, #144]
    154c:	str	w5, [sp, #176]
    1550:	str	x1, [sp, #184]
    1554:	str	x25, [sp, #192]
    1558:	str	wzr, [sp, #200]
    155c:	bl	8b0 <read_uleb128>
    1560:	mov	x2, x0
    1564:	cbz	x0, 16ec <read_referenced_name+0x21c>
    1568:	ldr	x3, [sp, #112]
    156c:	mov	x4, x25
    1570:	add	x1, x19, #0x60
    1574:	add	x0, x19, #0x58
    1578:	bl	3c0 <lookup_abbrev.isra.0>
    157c:	mov	x26, x0
    1580:	cbz	x0, 1730 <read_referenced_name+0x260>
    1584:	ldr	x0, [x0, #16]
    1588:	cbz	x0, 1730 <read_referenced_name+0x260>
    158c:	add	x20, sp, #0x80
    1590:	mov	x28, #0x0                   	// #0
    1594:	add	x0, x20, #0x8
    1598:	mov	x22, #0x0                   	// #0
    159c:	stp	x23, x24, [sp, #64]
    15a0:	mov	w23, #0x2007                	// #8199
    15a4:	str	x0, [sp, #120]
    15a8:	b	15c8 <read_referenced_name+0xf8>
    15ac:	cmp	w2, #0x3
    15b0:	b.ne	15b8 <read_referenced_name+0xe8>  // b.any
    15b4:	cbz	x22, 16d8 <read_referenced_name+0x208>
    15b8:	ldr	x0, [x26, #16]
    15bc:	add	x28, x28, #0x1
    15c0:	cmp	x0, x28
    15c4:	b.ls	1678 <read_referenced_name+0x1a8>  // b.plast
    15c8:	ldr	x8, [x26, #24]
    15cc:	lsl	x24, x28, #3
    15d0:	ldp	x5, x6, [x27, #104]
    15d4:	add	x8, x8, x24
    15d8:	ldp	w3, w2, [x19, #40]
    15dc:	mov	x1, x21
    15e0:	ldr	w4, [x19, #48]
    15e4:	ldr	w0, [x8, #4]
    15e8:	ldr	x7, [x27, #8]
    15ec:	str	x20, [sp]
    15f0:	bl	ac0 <read_attribute>
    15f4:	cbz	w0, 1720 <read_referenced_name+0x250>
    15f8:	ldr	x0, [x26, #24]
    15fc:	add	x1, x0, x24
    1600:	ldr	w2, [x0, x24]
    1604:	cmp	w2, #0x47
    1608:	b.eq	163c <read_referenced_name+0x16c>  // b.none
    160c:	b.ls	15ac <read_referenced_name+0xdc>  // b.plast
    1610:	cmp	w2, #0x6e
    1614:	b.eq	1620 <read_referenced_name+0x150>  // b.none
    1618:	cmp	w2, w23
    161c:	b.ne	15b8 <read_referenced_name+0xe8>  // b.any
    1620:	ldr	w0, [sp, #128]
    1624:	cmp	w0, #0x4
    1628:	b.ne	15b8 <read_referenced_name+0xe8>  // b.any
    162c:	ldp	x19, x20, [sp, #32]
    1630:	ldp	x23, x24, [sp, #64]
    1634:	ldr	x22, [sp, #136]
    1638:	b	16bc <read_referenced_name+0x1ec>
    163c:	ldr	w0, [x1, #4]
    1640:	cmp	w0, #0x20
    1644:	b.eq	15b8 <read_referenced_name+0xe8>  // b.none
    1648:	ldp	x4, x3, [sp, #112]
    164c:	mov	x5, x25
    1650:	mov	x2, x20
    1654:	mov	x1, x19
    1658:	mov	x0, x27
    165c:	add	x28, x28, #0x1
    1660:	bl	13f0 <read_referenced_name_from_attr.isra.0.part.0>
    1664:	cmp	x0, #0x0
    1668:	csel	x22, x22, x0, eq  // eq = none
    166c:	ldr	x0, [x26, #16]
    1670:	cmp	x0, x28
    1674:	b.hi	15c8 <read_referenced_name+0xf8>  // b.pmore
    1678:	ldp	x19, x20, [sp, #32]
    167c:	ldp	x23, x24, [sp, #64]
    1680:	mov	x0, x22
    1684:	ldp	x29, x30, [sp, #16]
    1688:	ldp	x21, x22, [sp, #48]
    168c:	ldp	x25, x26, [sp, #80]
    1690:	ldp	x27, x28, [sp, #96]
    1694:	add	sp, sp, #0xd0
    1698:	ret
    169c:	ldp	x19, x20, [sp, #32]
    16a0:	adrp	x1, 0 <abbrev_compare>
    16a4:	ldr	x3, [sp, #112]
    16a8:	mov	x0, x25
    16ac:	add	x1, x1, #0x0
    16b0:	mov	w2, #0x0                   	// #0
    16b4:	mov	x22, #0x0                   	// #0
    16b8:	blr	x3
    16bc:	mov	x0, x22
    16c0:	ldp	x29, x30, [sp, #16]
    16c4:	ldp	x21, x22, [sp, #48]
    16c8:	ldp	x25, x26, [sp, #80]
    16cc:	ldp	x27, x28, [sp, #96]
    16d0:	add	sp, sp, #0xd0
    16d4:	ret
    16d8:	ldr	w0, [sp, #128]
    16dc:	ldr	x22, [sp, #136]
    16e0:	cmp	w0, #0x4
    16e4:	csel	x22, x22, xzr, eq  // eq = none
    16e8:	b	15b8 <read_referenced_name+0xe8>
    16ec:	mov	x0, x21
    16f0:	mov	x22, #0x0                   	// #0
    16f4:	adrp	x1, 0 <abbrev_compare>
    16f8:	add	x1, x1, #0x0
    16fc:	bl	100 <dwarf_buf_error>
    1700:	mov	x0, x22
    1704:	ldp	x29, x30, [sp, #16]
    1708:	ldp	x19, x20, [sp, #32]
    170c:	ldp	x21, x22, [sp, #48]
    1710:	ldp	x25, x26, [sp, #80]
    1714:	ldp	x27, x28, [sp, #96]
    1718:	add	sp, sp, #0xd0
    171c:	ret
    1720:	mov	x22, #0x0                   	// #0
    1724:	ldp	x19, x20, [sp, #32]
    1728:	ldp	x23, x24, [sp, #64]
    172c:	b	1680 <read_referenced_name+0x1b0>
    1730:	mov	x22, #0x0                   	// #0
    1734:	ldp	x19, x20, [sp, #32]
    1738:	b	16bc <read_referenced_name+0x1ec>
    173c:	nop

0000000000001740 <read_function_entry>:
    1740:	sub	sp, sp, #0x130
    1744:	stp	x29, x30, [sp, #16]
    1748:	add	x29, sp, #0x10
    174c:	stp	x25, x26, [sp, #80]
    1750:	mov	x25, x4
    1754:	ldr	x4, [x4, #24]
    1758:	str	x6, [sp, #128]
    175c:	stp	x0, x3, [sp, #176]
    1760:	str	x5, [sp, #216]
    1764:	cbz	x4, 19b8 <read_function_entry+0x278>
    1768:	mov	x26, x7
    176c:	stp	x23, x24, [sp, #64]
    1770:	add	x24, sp, #0xf0
    1774:	stp	x27, x28, [sp, #96]
    1778:	mov	x27, x2
    177c:	mov	x28, x1
    1780:	adrp	x0, 0 <abbrev_compare>
    1784:	add	x1, x24, #0x8
    1788:	add	x0, x0, #0x0
    178c:	stp	x19, x20, [sp, #32]
    1790:	stp	x21, x22, [sp, #48]
    1794:	stp	x1, x0, [sp, #224]
    1798:	mov	x0, x25
    179c:	bl	8b0 <read_uleb128>
    17a0:	mov	x2, x0
    17a4:	cbz	x0, 19a8 <read_function_entry+0x268>
    17a8:	ldr	x3, [sp, #128]
    17ac:	mov	x4, x26
    17b0:	add	x1, x27, #0x60
    17b4:	add	x0, x27, #0x58
    17b8:	bl	3c0 <lookup_abbrev.isra.0>
    17bc:	mov	x23, x0
    17c0:	cbz	x0, 1a50 <read_function_entry+0x310>
    17c4:	ldr	w0, [x0, #8]
    17c8:	cmp	w0, #0x2e
    17cc:	ccmp	w0, #0x3, #0x4, ne  // ne = any
    17d0:	b.eq	1b84 <read_function_entry+0x444>  // b.none
    17d4:	cmp	w0, #0x1d
    17d8:	b.eq	1c00 <read_function_entry+0x4c0>  // b.none
    17dc:	ldr	x0, [sp, #304]
    17e0:	mov	w19, #0x0                   	// #0
    17e4:	str	xzr, [sp, #120]
    17e8:	str	x0, [sp, #208]
    17ec:	ldr	x0, [x23, #16]
    17f0:	str	x0, [sp, #136]
    17f4:	cbz	x0, 1d68 <read_function_entry+0x628>
    17f8:	mov	x21, x27
    17fc:	mov	x22, #0x0                   	// #0
    1800:	mov	w20, #0x2007                	// #8199
    1804:	str	xzr, [sp, #136]
    1808:	str	wzr, [sp, #144]
    180c:	str	wzr, [sp, #152]
    1810:	str	wzr, [sp, #164]
    1814:	str	xzr, [sp, #168]
    1818:	str	xzr, [sp, #192]
    181c:	stp	wzr, wzr, [sp, #200]
    1820:	ldr	x0, [x23, #24]
    1824:	lsl	x27, x22, #3
    1828:	ldp	x5, x6, [x28, #104]
    182c:	add	x0, x0, x27
    1830:	ldp	w3, w2, [x21, #40]
    1834:	mov	x1, x25
    1838:	ldr	w4, [x21, #48]
    183c:	ldr	w0, [x0, #4]
    1840:	ldr	x7, [x28, #8]
    1844:	str	x24, [sp]
    1848:	bl	ac0 <read_attribute>
    184c:	cbz	w0, 1a50 <read_function_entry+0x310>
    1850:	ldr	w0, [x23, #8]
    1854:	cmp	w0, #0x11
    1858:	b.eq	19c0 <read_function_entry+0x280>  // b.none
    185c:	cbz	w19, 18a0 <read_function_entry+0x160>
    1860:	ldr	x0, [x23, #24]
    1864:	add	x1, x0, x27
    1868:	ldr	w0, [x0, x27]
    186c:	cmp	w0, #0x55
    1870:	b.eq	1b20 <read_function_entry+0x3e0>  // b.none
    1874:	b.hi	1a9c <read_function_entry+0x35c>  // b.pmore
    1878:	cmp	w0, #0x12
    187c:	b.eq	1b5c <read_function_entry+0x41c>  // b.none
    1880:	b.ls	1a74 <read_function_entry+0x334>  // b.plast
    1884:	cmp	w0, #0x31
    1888:	b.eq	1894 <read_function_entry+0x154>  // b.none
    188c:	cmp	w0, #0x47
    1890:	b.ne	18a0 <read_function_entry+0x160>  // b.any
    1894:	ldr	w0, [sp, #144]
    1898:	cbz	w0, 1bc4 <read_function_entry+0x484>
    189c:	nop
    18a0:	ldr	x0, [x23, #16]
    18a4:	add	x22, x22, #0x1
    18a8:	cmp	x0, x22
    18ac:	b.hi	1820 <read_function_entry+0xe0>  // b.pmore
    18b0:	mov	x27, x21
    18b4:	cbz	w19, 1a0c <read_function_entry+0x2cc>
    18b8:	ldr	x0, [sp, #120]
    18bc:	ldr	x0, [x0]
    18c0:	cbz	x0, 19f8 <read_function_entry+0x2b8>
    18c4:	ldr	w0, [sp, #152]
    18c8:	cbnz	w0, 1c3c <read_function_entry+0x4fc>
    18cc:	ldr	w1, [sp, #164]
    18d0:	ldr	w0, [sp, #200]
    18d4:	tst	w0, w1
    18d8:	b.eq	19f8 <read_function_entry+0x2b8>  // b.none
    18dc:	ldr	w0, [sp, #204]
    18e0:	mov	x6, x26
    18e4:	ldr	x3, [sp, #192]
    18e8:	cmp	w0, #0x0
    18ec:	ldr	x0, [sp, #136]
    18f0:	ldp	x2, x5, [sp, #120]
    18f4:	add	x4, x0, x3
    18f8:	csel	x4, x4, x0, ne  // ne = any
    18fc:	ldr	x1, [x28, #16]
    1900:	ldr	x0, [sp, #176]
    1904:	ldr	x7, [sp, #208]
    1908:	bl	598 <add_function_range.isra.0>
    190c:	cbz	w0, 1a50 <read_function_entry+0x310>
    1910:	ldr	w0, [x23, #12]
    1914:	cbz	w0, 19a0 <read_function_entry+0x260>
    1918:	mov	x2, #0x20                  	// #32
    191c:	mov	w1, #0x0                   	// #0
    1920:	mov	x0, x24
    1924:	bl	0 <__asan_internal_memset>
    1928:	ldr	x0, [sp, #304]
    192c:	stp	x0, x24, [sp]
    1930:	mov	x7, x26
    1934:	ldr	x6, [sp, #128]
    1938:	mov	x4, x25
    193c:	ldr	x0, [sp, #176]
    1940:	mov	x2, x27
    1944:	ldr	x3, [sp, #184]
    1948:	mov	x1, x28
    194c:	ldr	x5, [sp, #216]
    1950:	bl	1740 <read_function_entry>
    1954:	cbz	w0, 1a50 <read_function_entry+0x310>
    1958:	ldr	x0, [sp, #264]
    195c:	cbz	x0, 19a0 <read_function_entry+0x260>
    1960:	ldr	x2, [sp, #128]
    1964:	mov	x3, x26
    1968:	ldr	x0, [sp, #176]
    196c:	mov	x1, x24
    1970:	bl	0 <__asan_backtrace_vector_release>
    1974:	cbz	w0, 1a50 <read_function_entry+0x310>
    1978:	ldr	x1, [sp, #264]
    197c:	adrp	x3, 0 <abbrev_compare>
    1980:	ldr	x19, [sp, #240]
    1984:	add	x3, x3, #0x0
    1988:	mov	x2, #0x18                  	// #24
    198c:	mov	x0, x19
    1990:	bl	0 <__asan_backtrace_qsort>
    1994:	ldr	x1, [sp, #120]
    1998:	ldr	x0, [sp, #264]
    199c:	stp	x19, x0, [x1, #24]
    19a0:	ldr	x0, [x25, #24]
    19a4:	cbnz	x0, 1798 <read_function_entry+0x58>
    19a8:	ldp	x19, x20, [sp, #32]
    19ac:	ldp	x21, x22, [sp, #48]
    19b0:	ldp	x23, x24, [sp, #64]
    19b4:	ldp	x27, x28, [sp, #96]
    19b8:	mov	w0, #0x1                   	// #1
    19bc:	b	1a64 <read_function_entry+0x324>
    19c0:	ldr	x0, [x23, #24]
    19c4:	ldr	w0, [x0, x27]
    19c8:	cmp	w0, #0x11
    19cc:	b.ne	185c <read_function_entry+0x11c>  // b.any
    19d0:	ldr	w0, [sp, #240]
    19d4:	cmp	w0, #0x1
    19d8:	b.ne	18a0 <read_function_entry+0x160>  // b.any
    19dc:	ldr	x0, [sp, #248]
    19e0:	str	x0, [sp, #184]
    19e4:	cbz	w19, 18a0 <read_function_entry+0x160>
    19e8:	str	x0, [sp, #192]
    19ec:	mov	w0, #0x1                   	// #1
    19f0:	str	w0, [sp, #200]
    19f4:	b	18a0 <read_function_entry+0x160>
    19f8:	ldp	x1, x3, [sp, #120]
    19fc:	mov	x4, x26
    1a00:	ldr	x0, [sp, #176]
    1a04:	mov	x2, #0x28                  	// #40
    1a08:	bl	0 <__asan_backtrace_free>
    1a0c:	ldr	w0, [x23, #12]
    1a10:	cbz	w0, 19a0 <read_function_entry+0x260>
    1a14:	ldr	x0, [sp, #304]
    1a18:	str	x0, [sp]
    1a1c:	ldr	x0, [sp, #312]
    1a20:	str	x0, [sp, #8]
    1a24:	ldr	x6, [sp, #128]
    1a28:	mov	x7, x26
    1a2c:	ldr	x0, [sp, #176]
    1a30:	mov	x4, x25
    1a34:	ldr	x3, [sp, #184]
    1a38:	mov	x2, x27
    1a3c:	ldr	x5, [sp, #216]
    1a40:	mov	x1, x28
    1a44:	bl	1740 <read_function_entry>
    1a48:	cbnz	w0, 19a0 <read_function_entry+0x260>
    1a4c:	nop
    1a50:	ldp	x19, x20, [sp, #32]
    1a54:	mov	w0, #0x0                   	// #0
    1a58:	ldp	x21, x22, [sp, #48]
    1a5c:	ldp	x23, x24, [sp, #64]
    1a60:	ldp	x27, x28, [sp, #96]
    1a64:	ldp	x29, x30, [sp, #16]
    1a68:	ldp	x25, x26, [sp, #80]
    1a6c:	add	sp, sp, #0x130
    1a70:	ret
    1a74:	cmp	w0, #0x3
    1a78:	b.ne	1b04 <read_function_entry+0x3c4>  // b.any
    1a7c:	ldr	x0, [sp, #120]
    1a80:	ldr	x0, [x0]
    1a84:	cbnz	x0, 18a0 <read_function_entry+0x160>
    1a88:	ldr	w0, [sp, #240]
    1a8c:	cmp	w0, #0x4
    1a90:	b.ne	18a0 <read_function_entry+0x160>  // b.any
    1a94:	ldr	x0, [sp, #248]
    1a98:	b	1bf4 <read_function_entry+0x4b4>
    1a9c:	cmp	w0, #0x59
    1aa0:	b.eq	1b40 <read_function_entry+0x400>  // b.none
    1aa4:	b.ls	1ad8 <read_function_entry+0x398>  // b.plast
    1aa8:	cmp	w0, #0x6e
    1aac:	b.eq	1ab8 <read_function_entry+0x378>  // b.none
    1ab0:	cmp	w0, w20
    1ab4:	b.ne	18a0 <read_function_entry+0x160>  // b.any
    1ab8:	ldr	w0, [sp, #240]
    1abc:	cmp	w0, #0x4
    1ac0:	b.ne	18a0 <read_function_entry+0x160>  // b.any
    1ac4:	ldr	x1, [sp, #120]
    1ac8:	str	w19, [sp, #144]
    1acc:	ldr	x0, [sp, #248]
    1ad0:	str	x0, [x1]
    1ad4:	b	18a0 <read_function_entry+0x160>
    1ad8:	cmp	w0, #0x58
    1adc:	b.ne	18a0 <read_function_entry+0x160>  // b.any
    1ae0:	ldr	w0, [sp, #240]
    1ae4:	cmp	w0, #0x2
    1ae8:	b.ne	18a0 <read_function_entry+0x160>  // b.any
    1aec:	ldr	x0, [sp, #248]
    1af0:	cbnz	x0, 1c0c <read_function_entry+0x4cc>
    1af4:	ldr	x0, [sp, #120]
    1af8:	ldr	x1, [sp, #232]
    1afc:	str	x1, [x0, #8]
    1b00:	b	18a0 <read_function_entry+0x160>
    1b04:	cmp	w0, #0x11
    1b08:	b.ne	18a0 <read_function_entry+0x160>  // b.any
    1b0c:	ldr	w0, [sp, #240]
    1b10:	cmp	w0, #0x1
    1b14:	b.ne	18a0 <read_function_entry+0x160>  // b.any
    1b18:	ldr	x0, [sp, #248]
    1b1c:	b	19e8 <read_function_entry+0x2a8>
    1b20:	ldr	w0, [sp, #240]
    1b24:	cmp	w0, #0x2
    1b28:	ccmp	w0, #0x8, #0x4, ne  // ne = any
    1b2c:	b.ne	18a0 <read_function_entry+0x160>  // b.any
    1b30:	ldr	x0, [sp, #248]
    1b34:	str	w19, [sp, #152]
    1b38:	str	x0, [sp, #168]
    1b3c:	b	18a0 <read_function_entry+0x160>
    1b40:	ldr	w0, [sp, #240]
    1b44:	cmp	w0, #0x2
    1b48:	b.ne	18a0 <read_function_entry+0x160>  // b.any
    1b4c:	ldr	x1, [sp, #120]
    1b50:	ldr	x0, [sp, #248]
    1b54:	str	w0, [x1, #16]
    1b58:	b	18a0 <read_function_entry+0x160>
    1b5c:	ldr	w0, [sp, #240]
    1b60:	cmp	w0, #0x1
    1b64:	b.eq	1b74 <read_function_entry+0x434>  // b.none
    1b68:	cmp	w0, #0x2
    1b6c:	b.ne	18a0 <read_function_entry+0x160>  // b.any
    1b70:	str	w19, [sp, #204]
    1b74:	ldr	x0, [sp, #248]
    1b78:	str	x0, [sp, #136]
    1b7c:	str	w19, [sp, #164]
    1b80:	b	18a0 <read_function_entry+0x160>
    1b84:	cmp	w0, #0x1d
    1b88:	ldp	x0, x1, [sp, #304]
    1b8c:	csel	x0, x0, x1, ne  // ne = any
    1b90:	str	x0, [sp, #208]
    1b94:	ldr	x2, [sp, #128]
    1b98:	mov	x3, x26
    1b9c:	ldr	x0, [sp, #176]
    1ba0:	mov	x1, #0x28                  	// #40
    1ba4:	bl	0 <__asan_backtrace_alloc>
    1ba8:	str	x0, [sp, #120]
    1bac:	cbz	x0, 1a50 <read_function_entry+0x310>
    1bb0:	mov	x2, #0x28                  	// #40
    1bb4:	mov	w1, #0x0                   	// #0
    1bb8:	mov	w19, #0x1                   	// #1
    1bbc:	bl	0 <__asan_internal_memset>
    1bc0:	b	17ec <read_function_entry+0xac>
    1bc4:	ldr	w0, [x1, #4]
    1bc8:	cmp	w0, #0x20
    1bcc:	b.eq	1da0 <read_function_entry+0x660>  // b.none
    1bd0:	ldr	x4, [sp, #128]
    1bd4:	mov	x5, x26
    1bd8:	ldr	x3, [sp, #224]
    1bdc:	mov	x2, x24
    1be0:	mov	x1, x21
    1be4:	mov	x0, x28
    1be8:	bl	13f0 <read_referenced_name_from_attr.isra.0.part.0>
    1bec:	str	wzr, [sp, #144]
    1bf0:	cbz	x0, 18a0 <read_function_entry+0x160>
    1bf4:	ldr	x1, [sp, #120]
    1bf8:	str	x0, [x1]
    1bfc:	b	18a0 <read_function_entry+0x160>
    1c00:	ldr	x0, [sp, #312]
    1c04:	str	x0, [sp, #208]
    1c08:	b	1b94 <read_function_entry+0x454>
    1c0c:	ldr	x1, [sp, #216]
    1c10:	sub	x2, x0, #0x1
    1c14:	ldr	x1, [x1, #48]
    1c18:	cmp	x2, x1
    1c1c:	b.cs	1dbc <read_function_entry+0x67c>  // b.hs, b.nlast
    1c20:	ldr	x1, [sp, #216]
    1c24:	ldr	x1, [x1, #56]
    1c28:	add	x0, x1, x0, lsl #3
    1c2c:	ldr	x1, [sp, #120]
    1c30:	ldur	x0, [x0, #-8]
    1c34:	str	x0, [x1, #8]
    1c38:	b	18a0 <read_function_entry+0x160>
    1c3c:	ldr	x0, [x28, #96]
    1c40:	ldr	x1, [sp, #168]
    1c44:	cmp	x0, x1
    1c48:	b.ls	1d84 <read_function_entry+0x644>  // b.plast
    1c4c:	ldr	x3, [x28, #88]
    1c50:	stp	x28, x23, [sp, #136]
    1c54:	ldr	w4, [x28, #120]
    1c58:	ldr	x5, [sp, #168]
    1c5c:	str	x25, [sp, #152]
    1c60:	ldr	x25, [sp, #176]
    1c64:	sub	x1, x0, x5
    1c68:	add	x0, x3, x5
    1c6c:	stp	x0, x1, [sp, #256]
    1c70:	adrp	x2, 0 <abbrev_compare>
    1c74:	ldr	x0, [sp, #128]
    1c78:	add	x2, x2, #0x0
    1c7c:	ldr	x19, [sp, #184]
    1c80:	mov	x28, x0
    1c84:	ldr	x23, [sp, #208]
    1c88:	mov	x21, #0xffffffff            	// #4294967295
    1c8c:	mov	x20, #0xffff                	// #65535
    1c90:	stp	x2, x3, [sp, #240]
    1c94:	str	w4, [sp, #272]
    1c98:	str	x0, [sp, #280]
    1c9c:	str	x26, [sp, #288]
    1ca0:	str	wzr, [sp, #296]
    1ca4:	nop
    1ca8:	ldr	w1, [x27, #48]
    1cac:	mov	x0, x24
    1cb0:	bl	828 <read_address>
    1cb4:	mov	x22, x0
    1cb8:	ldr	w1, [x27, #48]
    1cbc:	mov	x0, x24
    1cc0:	bl	828 <read_address>
    1cc4:	orr	x1, x22, x0
    1cc8:	cbz	x1, 1da8 <read_function_entry+0x668>
    1ccc:	ldr	w1, [x27, #48]
    1cd0:	cmp	w1, #0x4
    1cd4:	b.eq	1d50 <read_function_entry+0x610>  // b.none
    1cd8:	b.gt	1d08 <read_function_entry+0x5c8>
    1cdc:	cmp	w1, #0x1
    1ce0:	b.eq	1d5c <read_function_entry+0x61c>  // b.none
    1ce4:	cmp	w1, #0x2
    1ce8:	b.ne	1d20 <read_function_entry+0x5e0>  // b.any
    1cec:	cmp	x22, x20
    1cf0:	cset	w1, eq  // eq = none
    1cf4:	cbz	w1, 1d20 <read_function_entry+0x5e0>
    1cf8:	mov	x19, x0
    1cfc:	ldr	w0, [sp, #296]
    1d00:	cbz	w0, 1ca8 <read_function_entry+0x568>
    1d04:	b	1a50 <read_function_entry+0x310>
    1d08:	cmp	w1, #0x8
    1d0c:	b.ne	1d20 <read_function_entry+0x5e0>  // b.any
    1d10:	cmn	x22, #0x1
    1d14:	cset	w1, eq  // eq = none
    1d18:	cbnz	w1, 1cf8 <read_function_entry+0x5b8>
    1d1c:	nop
    1d20:	ldr	x1, [sp, #136]
    1d24:	add	x4, x0, x19
    1d28:	ldr	x2, [sp, #120]
    1d2c:	add	x3, x22, x19
    1d30:	ldr	x1, [x1, #16]
    1d34:	mov	x7, x23
    1d38:	mov	x6, x26
    1d3c:	mov	x5, x28
    1d40:	mov	x0, x25
    1d44:	bl	598 <add_function_range.isra.0>
    1d48:	cbnz	w0, 1cfc <read_function_entry+0x5bc>
    1d4c:	b	1a50 <read_function_entry+0x310>
    1d50:	cmp	x22, x21
    1d54:	cset	w1, eq  // eq = none
    1d58:	b	1cf4 <read_function_entry+0x5b4>
    1d5c:	cmp	x22, #0xff
    1d60:	cset	w1, eq  // eq = none
    1d64:	b	1cf4 <read_function_entry+0x5b4>
    1d68:	str	wzr, [sp, #152]
    1d6c:	str	wzr, [sp, #164]
    1d70:	str	xzr, [sp, #168]
    1d74:	str	xzr, [sp, #192]
    1d78:	stp	wzr, wzr, [sp, #200]
    1d7c:	cbz	w19, 1a0c <read_function_entry+0x2cc>
    1d80:	b	18b8 <read_function_entry+0x178>
    1d84:	ldr	x3, [sp, #128]
    1d88:	mov	x0, x26
    1d8c:	adrp	x1, 0 <abbrev_compare>
    1d90:	mov	w2, #0x0                   	// #0
    1d94:	add	x1, x1, #0x0
    1d98:	blr	x3
    1d9c:	b	1a50 <read_function_entry+0x310>
    1da0:	str	wzr, [sp, #144]
    1da4:	b	18a0 <read_function_entry+0x160>
    1da8:	ldr	w0, [sp, #296]
    1dac:	ldp	x28, x23, [sp, #136]
    1db0:	ldr	x25, [sp, #152]
    1db4:	cbz	w0, 1910 <read_function_entry+0x1d0>
    1db8:	b	1a50 <read_function_entry+0x310>
    1dbc:	mov	x0, x25
    1dc0:	adrp	x1, 0 <abbrev_compare>
    1dc4:	add	x1, x1, #0x0
    1dc8:	bl	100 <dwarf_buf_error>
    1dcc:	b	1a50 <read_function_entry+0x310>

0000000000001dd0 <dwarf_lookup_pc>:
    1dd0:	sub	sp, sp, #0x1d0
    1dd4:	mov	x7, x6
    1dd8:	stp	x29, x30, [sp, #16]
    1ddc:	add	x29, sp, #0x10
    1de0:	stp	x23, x24, [sp, #64]
    1de4:	mov	x23, x1
    1de8:	mov	w1, #0x1                   	// #1
    1dec:	stp	x3, x6, [sp, #112]
    1df0:	ldr	x6, [x23, #32]
    1df4:	str	w1, [x7]
    1df8:	str	x4, [sp, #128]
    1dfc:	cbz	x6, 209c <dwarf_lookup_pc+0x2cc>
    1e00:	ldr	x4, [x23, #24]
    1e04:	stp	x19, x20, [sp, #32]
    1e08:	mov	x20, x0
    1e0c:	stp	x21, x22, [sp, #48]
    1e10:	mov	x22, x5
    1e14:	mov	x21, x2
    1e18:	mov	x5, x6
    1e1c:	mov	x3, #0x0                   	// #0
    1e20:	stp	x25, x26, [sp, #80]
    1e24:	add	x0, x5, x3
    1e28:	cmp	x5, x3
    1e2c:	and	x1, x0, #0xfffffffffffffffe
    1e30:	b.ls	2090 <dwarf_lookup_pc+0x2c0>  // b.plast
    1e34:	lsr	x0, x0, #1
    1e38:	add	x1, x1, x0
    1e3c:	lsl	x2, x1, #3
    1e40:	ldr	x1, [x4, x1, lsl #3]
    1e44:	add	x24, x4, x2
    1e48:	cmp	x1, x21
    1e4c:	b.hi	207c <dwarf_lookup_pc+0x2ac>  // b.pmore
    1e50:	ldr	x1, [x24, #8]
    1e54:	add	x3, x0, #0x1
    1e58:	cmp	x1, x21
    1e5c:	b.ls	1e24 <dwarf_lookup_pc+0x54>  // b.plast
    1e60:	asr	x2, x2, #3
    1e64:	mov	x0, #0xaaaaaaaaaaaaaaaa    	// #-6148914691236517206
    1e68:	movk	x0, #0xaaab
    1e6c:	mov	x1, x0
    1e70:	mul	x2, x2, x0
    1e74:	add	x2, x2, #0x1
    1e78:	cmp	x6, x2
    1e7c:	b.hi	1eac <dwarf_lookup_pc+0xdc>  // b.pmore
    1e80:	b	1eb8 <dwarf_lookup_pc+0xe8>
    1e84:	ldr	x0, [x24, #32]
    1e88:	cmp	x0, x21
    1e8c:	b.ls	1eb8 <dwarf_lookup_pc+0xe8>  // b.plast
    1e90:	add	x24, x24, #0x18
    1e94:	sub	x0, x24, x4
    1e98:	asr	x0, x0, #3
    1e9c:	mul	x0, x0, x1
    1ea0:	add	x0, x0, #0x1
    1ea4:	cmp	x6, x0
    1ea8:	b.ls	1eb8 <dwarf_lookup_pc+0xe8>  // b.plast
    1eac:	ldr	x0, [x24, #24]
    1eb0:	cmp	x0, x21
    1eb4:	b.ls	1e84 <dwarf_lookup_pc+0xb4>  // b.plast
    1eb8:	ldr	x26, [x24, #16]
    1ebc:	cmp	x4, x24
    1ec0:	ldr	w1, [x20, #8]
    1ec4:	ldr	x19, [x26, #104]
    1ec8:	b.cc	1ef0 <dwarf_lookup_pc+0x120>  // b.lo, b.ul, b.last
    1ecc:	b	1f20 <dwarf_lookup_pc+0x150>
    1ed0:	cmn	x19, #0x1
    1ed4:	b.ne	1f20 <dwarf_lookup_pc+0x150>  // b.any
    1ed8:	ldur	x26, [x24, #-8]
    1edc:	sub	x24, x24, #0x18
    1ee0:	ldr	x0, [x23, #24]
    1ee4:	ldr	x19, [x26, #104]
    1ee8:	cmp	x0, x24
    1eec:	b.cs	1f20 <dwarf_lookup_pc+0x150>  // b.hs, b.nlast
    1ef0:	ldur	x0, [x24, #-24]
    1ef4:	cmp	x0, x21
    1ef8:	b.hi	1f20 <dwarf_lookup_pc+0x150>  // b.pmore
    1efc:	ldur	x0, [x24, #-16]
    1f00:	cmp	x0, x21
    1f04:	b.ls	1f20 <dwarf_lookup_pc+0x150>  // b.plast
    1f08:	cbz	w1, 1ed0 <dwarf_lookup_pc+0x100>
    1f0c:	add	x0, x26, #0x68
    1f10:	ldar	x19, [x0]
    1f14:	ldr	w1, [x20, #8]
    1f18:	cmn	x19, #0x1
    1f1c:	b.eq	1ed8 <dwarf_lookup_pc+0x108>  // b.none
    1f20:	cbnz	w1, 2118 <dwarf_lookup_pc+0x348>
    1f24:	cbz	x19, 2124 <dwarf_lookup_pc+0x354>
    1f28:	cmn	x19, #0x1
    1f2c:	b.eq	21f8 <dwarf_lookup_pc+0x428>  // b.none
    1f30:	ldr	x7, [x24, #16]
    1f34:	mov	x2, #0x0                   	// #0
    1f38:	ldr	x3, [x7, #112]
    1f3c:	add	x0, x2, x3
    1f40:	cmp	x2, x3
    1f44:	and	x1, x0, #0xfffffffffffffffe
    1f48:	b.cs	20cc <dwarf_lookup_pc+0x2fc>  // b.hs, b.nlast
    1f4c:	lsr	x0, x0, #1
    1f50:	add	x1, x1, x0
    1f54:	add	x4, x19, x1, lsl #3
    1f58:	ldr	x1, [x19, x1, lsl #3]
    1f5c:	cmp	x1, x21
    1f60:	b.hi	20b8 <dwarf_lookup_pc+0x2e8>  // b.pmore
    1f64:	ldr	x1, [x4, #24]
    1f68:	add	x2, x0, #0x1
    1f6c:	cmp	x1, x21
    1f70:	b.ls	1f3c <dwarf_lookup_pc+0x16c>  // b.plast
    1f74:	ldr	x6, [x7, #128]
    1f78:	ldr	w10, [x4, #16]
    1f7c:	ldr	x8, [x4, #8]
    1f80:	cbz	x6, 2100 <dwarf_lookup_pc+0x330>
    1f84:	ldr	x4, [x7, #120]
    1f88:	mov	x5, x6
    1f8c:	mov	x3, #0x0                   	// #0
    1f90:	add	x0, x5, x3
    1f94:	cmp	x5, x3
    1f98:	and	x1, x0, #0xfffffffffffffffe
    1f9c:	b.ls	2100 <dwarf_lookup_pc+0x330>  // b.plast
    1fa0:	lsr	x0, x0, #1
    1fa4:	add	x1, x1, x0
    1fa8:	lsl	x2, x1, #3
    1fac:	ldr	x7, [x4, x1, lsl #3]
    1fb0:	add	x1, x4, x2
    1fb4:	cmp	x7, x21
    1fb8:	b.hi	20ec <dwarf_lookup_pc+0x31c>  // b.pmore
    1fbc:	ldr	x7, [x1, #8]
    1fc0:	add	x3, x0, #0x1
    1fc4:	cmp	x7, x21
    1fc8:	b.ls	1f90 <dwarf_lookup_pc+0x1c0>  // b.plast
    1fcc:	asr	x0, x2, #3
    1fd0:	mov	x2, #0xaaaaaaaaaaaaaaaa    	// #-6148914691236517206
    1fd4:	movk	x2, #0xaaab
    1fd8:	mov	x3, x2
    1fdc:	mul	x0, x0, x2
    1fe0:	add	x0, x0, #0x1
    1fe4:	cmp	x6, x0
    1fe8:	b.hi	2018 <dwarf_lookup_pc+0x248>  // b.pmore
    1fec:	b	2024 <dwarf_lookup_pc+0x254>
    1ff0:	ldr	x0, [x1, #32]
    1ff4:	cmp	x0, x21
    1ff8:	b.ls	2024 <dwarf_lookup_pc+0x254>  // b.plast
    1ffc:	add	x1, x1, #0x18
    2000:	sub	x0, x1, x4
    2004:	asr	x0, x0, #3
    2008:	mul	x0, x0, x3
    200c:	add	x0, x0, #0x1
    2010:	cmp	x6, x0
    2014:	b.ls	2024 <dwarf_lookup_pc+0x254>  // b.plast
    2018:	ldr	x0, [x1, #24]
    201c:	cmp	x0, x21
    2020:	b.ls	1ff0 <dwarf_lookup_pc+0x220>  // b.plast
    2024:	ldr	x19, [x1, #16]
    2028:	add	x6, sp, #0x150
    202c:	ldr	x20, [sp, #112]
    2030:	add	x5, sp, #0x190
    2034:	ldp	x1, x2, [x19, #24]
    2038:	mov	x4, x22
    203c:	mov	x0, x21
    2040:	mov	x3, x20
    2044:	str	w10, [sp, #336]
    2048:	str	x8, [sp, #400]
    204c:	bl	260 <report_inlined_functions.isra.0>
    2050:	cbnz	w0, 2348 <dwarf_lookup_pc+0x578>
    2054:	ldr	w3, [sp, #336]
    2058:	mov	x1, x21
    205c:	ldr	x4, [x19]
    2060:	mov	x0, x22
    2064:	ldr	x2, [sp, #400]
    2068:	blr	x20
    206c:	ldp	x19, x20, [sp, #32]
    2070:	ldp	x21, x22, [sp, #48]
    2074:	ldp	x25, x26, [sp, #80]
    2078:	b	20a8 <dwarf_lookup_pc+0x2d8>
    207c:	mov	x5, x0
    2080:	add	x0, x5, x3
    2084:	cmp	x5, x3
    2088:	and	x1, x0, #0xfffffffffffffffe
    208c:	b.hi	1e34 <dwarf_lookup_pc+0x64>  // b.pmore
    2090:	ldp	x19, x20, [sp, #32]
    2094:	ldp	x21, x22, [sp, #48]
    2098:	ldp	x25, x26, [sp, #80]
    209c:	mov	w0, #0x0                   	// #0
    20a0:	ldr	x1, [sp, #120]
    20a4:	str	wzr, [x1]
    20a8:	ldp	x29, x30, [sp, #16]
    20ac:	ldp	x23, x24, [sp, #64]
    20b0:	add	sp, sp, #0x1d0
    20b4:	ret
    20b8:	mov	x3, x0
    20bc:	add	x0, x2, x3
    20c0:	cmp	x2, x3
    20c4:	and	x1, x0, #0xfffffffffffffffe
    20c8:	b.cc	1f4c <dwarf_lookup_pc+0x17c>  // b.lo, b.ul, b.last
    20cc:	ldr	x19, [x7, #80]
    20d0:	cbz	x19, 2230 <dwarf_lookup_pc+0x460>
    20d4:	mov	x2, x19
    20d8:	mov	x1, x21
    20dc:	mov	x0, x22
    20e0:	mov	x4, #0x0                   	// #0
    20e4:	mov	w3, #0x0                   	// #0
    20e8:	b	220c <dwarf_lookup_pc+0x43c>
    20ec:	mov	x5, x0
    20f0:	add	x0, x5, x3
    20f4:	cmp	x5, x3
    20f8:	and	x1, x0, #0xfffffffffffffffe
    20fc:	b.hi	1fa0 <dwarf_lookup_pc+0x1d0>  // b.pmore
    2100:	mov	w3, w10
    2104:	mov	x2, x8
    2108:	mov	x1, x21
    210c:	mov	x0, x22
    2110:	mov	x4, #0x0                   	// #0
    2114:	b	220c <dwarf_lookup_pc+0x43c>
    2118:	add	x0, x26, #0x68
    211c:	ldar	x19, [x0]
    2120:	cbnz	x19, 1f28 <dwarf_lookup_pc+0x158>
    2124:	add	x3, sp, #0x110
    2128:	add	x0, sp, #0xf0
    212c:	ldr	x19, [x24, #16]
    2130:	mov	x25, x3
    2134:	mov	x2, #0x18                  	// #24
    2138:	mov	w1, #0x0                   	// #0
    213c:	stp	x27, x28, [sp, #96]
    2140:	stp	x3, x0, [sp, #136]
    2144:	str	x19, [sp, #160]
    2148:	bl	0 <__asan_internal_memset>
    214c:	mov	w1, #0x0                   	// #0
    2150:	mov	x0, x25
    2154:	mov	x2, #0x40                  	// #64
    2158:	str	xzr, [sp, #264]
    215c:	bl	0 <__asan_internal_memset>
    2160:	ldr	x0, [x19, #56]
    2164:	ldr	x1, [x23, #80]
    2168:	cmp	x0, x1
    216c:	b.cc	22c4 <dwarf_lookup_pc+0x4f4>  // b.lo, b.ul, b.last
    2170:	ldr	x3, [sp, #128]
    2174:	adrp	x1, 0 <abbrev_compare>
    2178:	mov	x0, x22
    217c:	add	x1, x1, #0x0
    2180:	mov	w2, #0x0                   	// #0
    2184:	blr	x3
    2188:	ldp	x5, x4, [sp, #248]
    218c:	mov	x3, x22
    2190:	ldr	x1, [sp, #144]
    2194:	mov	x0, x20
    2198:	ldr	x19, [sp, #128]
    219c:	mov	x25, #0x0                   	// #0
    21a0:	add	x4, x4, x5
    21a4:	stp	xzr, x4, [sp, #248]
    21a8:	mov	x2, x19
    21ac:	mov	x28, #0x0                   	// #0
    21b0:	mov	x27, #0x0                   	// #0
    21b4:	bl	0 <__asan_backtrace_vector_release>
    21b8:	ldr	x1, [sp, #136]
    21bc:	mov	x2, x19
    21c0:	mov	x3, x22
    21c4:	mov	x0, x20
    21c8:	mov	x19, #0xffffffffffffffff    	// #-1
    21cc:	bl	158 <free_line_header>
    21d0:	mov	w1, #0x0                   	// #0
    21d4:	ldr	w0, [x20, #8]
    21d8:	cbnz	w0, 2358 <dwarf_lookup_pc+0x588>
    21dc:	stp	x19, x28, [x26, #104]
    21e0:	stp	x25, x27, [x26, #120]
    21e4:	cmn	x19, #0x1
    21e8:	b.eq	237c <dwarf_lookup_pc+0x5ac>  // b.none
    21ec:	ldp	x27, x28, [sp, #96]
    21f0:	b	1f30 <dwarf_lookup_pc+0x160>
    21f4:	ldp	x27, x28, [sp, #96]
    21f8:	mov	x1, x21
    21fc:	mov	x0, x22
    2200:	mov	x4, #0x0                   	// #0
    2204:	mov	w3, #0x0                   	// #0
    2208:	mov	x2, #0x0                   	// #0
    220c:	ldr	x5, [sp, #112]
    2210:	blr	x5
    2214:	ldp	x29, x30, [sp, #16]
    2218:	ldp	x19, x20, [sp, #32]
    221c:	ldp	x21, x22, [sp, #48]
    2220:	ldp	x23, x24, [sp, #64]
    2224:	ldp	x25, x26, [sp, #80]
    2228:	add	sp, sp, #0x1d0
    222c:	ret
    2230:	ldr	x19, [x7, #64]
    2234:	cbz	x19, 22bc <dwarf_lookup_pc+0x4ec>
    2238:	ldrb	w0, [x19]
    223c:	cmp	w0, #0x2f
    2240:	b.eq	22bc <dwarf_lookup_pc+0x4ec>  // b.none
    2244:	ldr	x0, [x7, #72]
    2248:	cbz	x0, 22bc <dwarf_lookup_pc+0x4ec>
    224c:	mov	x0, x19
    2250:	bl	0 <__asan_internal_strlen>
    2254:	ldr	x1, [x24, #16]
    2258:	mov	x25, x0
    225c:	ldr	x26, [x1, #72]
    2260:	mov	x0, x26
    2264:	bl	0 <__asan_internal_strlen>
    2268:	ldr	x2, [sp, #128]
    226c:	mov	x23, x0
    2270:	add	x1, x25, x23
    2274:	mov	x0, x20
    2278:	mov	x3, x22
    227c:	add	x1, x1, #0x2
    2280:	bl	0 <__asan_backtrace_alloc>
    2284:	mov	x20, x0
    2288:	cbz	x0, 2090 <dwarf_lookup_pc+0x2c0>
    228c:	mov	x1, x26
    2290:	mov	x2, x23
    2294:	bl	0 <__asan_internal_memcpy>
    2298:	mov	w3, #0x2f                  	// #47
    229c:	strb	w3, [x20, x23]
    22a0:	add	x0, x23, #0x1
    22a4:	mov	x1, x19
    22a8:	add	x2, x25, #0x1
    22ac:	add	x0, x20, x0
    22b0:	bl	0 <__asan_internal_memcpy>
    22b4:	mov	x19, x20
    22b8:	ldr	x7, [x24, #16]
    22bc:	str	x19, [x7, #80]
    22c0:	b	20d4 <dwarf_lookup_pc+0x304>
    22c4:	ldr	x4, [x23, #72]
    22c8:	sub	x2, x1, x0
    22cc:	ldr	w5, [x23, #120]
    22d0:	adrp	x3, 0 <abbrev_compare>
    22d4:	add	x1, x4, x0
    22d8:	stp	x1, x2, [sp, #352]
    22dc:	add	x3, x3, #0x0
    22e0:	ldr	x1, [sp, #128]
    22e4:	add	x25, sp, #0x150
    22e8:	mov	x0, x25
    22ec:	stp	x3, x4, [sp, #336]
    22f0:	str	w5, [sp, #368]
    22f4:	str	x1, [sp, #376]
    22f8:	str	x22, [sp, #384]
    22fc:	str	wzr, [sp, #392]
    2300:	bl	6b0 <read_uint32>
    2304:	mov	x1, #0xffffffff            	// #4294967295
    2308:	mov	w2, w0
    230c:	cmp	x1, w0, uxtw
    2310:	mov	x0, x25
    2314:	b.eq	2744 <dwarf_lookup_pc+0x974>  // b.none
    2318:	str	x2, [sp, #360]
    231c:	bl	770 <read_uint16>
    2320:	and	w0, w0, #0xffff
    2324:	str	w0, [sp, #272]
    2328:	sub	w0, w0, #0x2
    232c:	cmp	w0, #0x2
    2330:	b.ls	23b0 <dwarf_lookup_pc+0x5e0>  // b.plast
    2334:	mov	x0, x25
    2338:	adrp	x1, 0 <abbrev_compare>
    233c:	add	x1, x1, #0x0
    2340:	bl	100 <dwarf_buf_error>
    2344:	b	2188 <dwarf_lookup_pc+0x3b8>
    2348:	ldp	x19, x20, [sp, #32]
    234c:	ldp	x21, x22, [sp, #48]
    2350:	ldp	x25, x26, [sp, #80]
    2354:	b	20a8 <dwarf_lookup_pc+0x2d8>
    2358:	add	x0, x26, #0x70
    235c:	stlr	x28, [x0]
    2360:	add	x0, x26, #0x78
    2364:	stlr	x25, [x0]
    2368:	add	x0, x26, #0x80
    236c:	stlr	x27, [x0]
    2370:	add	x11, x26, #0x68
    2374:	stlr	x19, [x11]
    2378:	b	21e4 <dwarf_lookup_pc+0x414>
    237c:	cbz	w1, 21f4 <dwarf_lookup_pc+0x424>
    2380:	ldp	x3, x6, [sp, #112]
    2384:	mov	x5, x22
    2388:	ldr	x4, [sp, #128]
    238c:	mov	x2, x21
    2390:	mov	x0, x20
    2394:	mov	x1, x23
    2398:	bl	1dd0 <dwarf_lookup_pc>
    239c:	ldp	x19, x20, [sp, #32]
    23a0:	ldp	x21, x22, [sp, #48]
    23a4:	ldp	x25, x26, [sp, #80]
    23a8:	ldp	x27, x28, [sp, #96]
    23ac:	b	20a8 <dwarf_lookup_pc+0x2d8>
    23b0:	mov	x0, x25
    23b4:	bl	6b0 <read_uint32>
    23b8:	mov	w0, w0
    23bc:	ldp	x2, x3, [sp, #352]
    23c0:	stp	x2, x3, [sp, #416]
    23c4:	ldp	x2, x3, [sp, #336]
    23c8:	stp	x2, x3, [sp, #400]
    23cc:	ldp	x2, x3, [sp, #368]
    23d0:	stp	x2, x3, [sp, #432]
    23d4:	ldr	x1, [sp, #360]
    23d8:	str	x0, [sp, #424]
    23dc:	ldp	x2, x3, [sp, #384]
    23e0:	stp	x2, x3, [sp, #448]
    23e4:	cmp	x0, x1
    23e8:	b.ls	271c <dwarf_lookup_pc+0x94c>  // b.plast
    23ec:	mov	x0, x25
    23f0:	bl	668 <advance.part.0>
    23f4:	cbz	w0, 2188 <dwarf_lookup_pc+0x3b8>
    23f8:	add	x0, sp, #0x190
    23fc:	str	x0, [sp, #152]
    2400:	bl	7d8 <read_byte>
    2404:	and	w0, w0, #0xff
    2408:	ldr	w1, [sp, #272]
    240c:	str	w0, [sp, #276]
    2410:	cmp	w1, #0x3
    2414:	b.gt	2730 <dwarf_lookup_pc+0x960>
    2418:	mov	w0, #0x1                   	// #1
    241c:	str	w0, [sp, #280]
    2420:	ldr	x0, [sp, #152]
    2424:	bl	7d8 <read_byte>
    2428:	ldp	x19, x0, [sp, #416]
    242c:	cbnz	x0, 2778 <dwarf_lookup_pc+0x9a8>
    2430:	ldr	x0, [sp, #152]
    2434:	bl	668 <advance.part.0>
    2438:	mov	w1, w0
    243c:	cbz	w0, 2450 <dwarf_lookup_pc+0x680>
    2440:	ldrb	w1, [x19]
    2444:	eor	w1, w1, #0xffffff80
    2448:	sub	w1, w1, #0x80
    244c:	sxtb	w1, w1
    2450:	ldr	x19, [sp, #152]
    2454:	str	w1, [sp, #284]
    2458:	mov	x0, x19
    245c:	bl	7d8 <read_byte>
    2460:	and	w1, w0, #0xff
    2464:	mov	x0, x19
    2468:	str	w1, [sp, #288]
    246c:	bl	7d8 <read_byte>
    2470:	and	w1, w0, #0xff
    2474:	ldp	x19, x0, [sp, #416]
    2478:	str	w1, [sp, #292]
    247c:	str	x19, [sp, #296]
    2480:	sub	w1, w1, #0x1
    2484:	cmp	x1, x0
    2488:	b.ls	2788 <dwarf_lookup_pc+0x9b8>  // b.plast
    248c:	ldr	x0, [sp, #152]
    2490:	bl	668 <advance.part.0>
    2494:	cbz	w0, 2188 <dwarf_lookup_pc+0x3b8>
    2498:	ldp	x19, x0, [sp, #416]
    249c:	str	xzr, [sp, #304]
    24a0:	add	x27, x19, x0
    24a4:	cmp	x27, x19
    24a8:	b.hi	24d0 <dwarf_lookup_pc+0x700>  // b.pmore
    24ac:	b	2df4 <dwarf_lookup_pc+0x1024>
    24b0:	bl	0 <__asan_internal_strnlen>
    24b4:	add	x0, x0, #0x1
    24b8:	ldr	x1, [sp, #304]
    24bc:	add	x19, x19, x0
    24c0:	cmp	x27, x19
    24c4:	add	x1, x1, #0x1
    24c8:	str	x1, [sp, #304]
    24cc:	b.ls	24e4 <dwarf_lookup_pc+0x714>  // b.plast
    24d0:	ldrb	w2, [x19]
    24d4:	sub	x1, x27, x19
    24d8:	mov	x0, x19
    24dc:	cbnz	w2, 24b0 <dwarf_lookup_pc+0x6e0>
    24e0:	ldr	x1, [sp, #304]
    24e4:	str	xzr, [sp, #312]
    24e8:	cbnz	x1, 2798 <dwarf_lookup_pc+0x9c8>
    24ec:	ldr	x0, [sp, #416]
    24f0:	mov	x19, #0x0                   	// #0
    24f4:	ldrb	w1, [x0]
    24f8:	cbz	w1, 2534 <dwarf_lookup_pc+0x764>
    24fc:	ldr	x27, [sp, #152]
    2500:	mov	x0, x27
    2504:	ldr	w1, [sp, #456]
    2508:	cbnz	w1, 2188 <dwarf_lookup_pc+0x3b8>
    250c:	ldr	x28, [sp, #312]
    2510:	bl	a50 <read_string>
    2514:	ldr	x1, [sp, #312]
    2518:	str	x0, [x28, x19]
    251c:	ldr	x0, [x1, x19]
    2520:	add	x19, x19, #0x8
    2524:	cbz	x0, 2188 <dwarf_lookup_pc+0x3b8>
    2528:	ldr	x0, [sp, #416]
    252c:	ldrb	w1, [x0]
    2530:	cbnz	w1, 2500 <dwarf_lookup_pc+0x730>
    2534:	ldr	x19, [sp, #424]
    2538:	cbnz	x19, 27e0 <dwarf_lookup_pc+0xa10>
    253c:	ldr	x0, [sp, #152]
    2540:	bl	668 <advance.part.0>
    2544:	cbz	w0, 2188 <dwarf_lookup_pc+0x3b8>
    2548:	ldp	x27, x19, [sp, #416]
    254c:	str	xzr, [sp, #320]
    2550:	add	x19, x27, x19
    2554:	mov	x1, #0x0                   	// #0
    2558:	cmp	x19, x27
    255c:	b.ls	25f4 <dwarf_lookup_pc+0x824>  // b.plast
    2560:	ldrb	w0, [x27]
    2564:	cbz	w0, 27d8 <dwarf_lookup_pc+0xa08>
    2568:	sub	x1, x19, x27
    256c:	mov	x0, x27
    2570:	bl	0 <__asan_internal_strnlen>
    2574:	add	x1, x0, #0x1
    2578:	add	x2, x27, x1
    257c:	ldrsb	w1, [x27, x1]
    2580:	tbz	w1, #31, 27c4 <dwarf_lookup_pc+0x9f4>
    2584:	add	x27, x27, x0
    2588:	mov	x0, #0x1                   	// #1
    258c:	nop
    2590:	add	x0, x0, #0x1
    2594:	ldrsb	w1, [x27, x0]
    2598:	tbnz	w1, #31, 2590 <dwarf_lookup_pc+0x7c0>
    259c:	ldrsb	w1, [x2, x0]
    25a0:	add	x0, x2, x0
    25a4:	tbz	w1, #31, 27bc <dwarf_lookup_pc+0x9ec>
    25a8:	sub	x2, x0, #0x1
    25ac:	mov	x27, #0x1                   	// #1
    25b0:	add	x27, x27, #0x1
    25b4:	ldrsb	w1, [x2, x27]
    25b8:	tbnz	w1, #31, 25b0 <dwarf_lookup_pc+0x7e0>
    25bc:	ldrsb	w1, [x0, x27]
    25c0:	add	x0, x0, x27
    25c4:	tbz	w1, #31, 27b4 <dwarf_lookup_pc+0x9e4>
    25c8:	sub	x2, x0, #0x1
    25cc:	mov	x27, #0x1                   	// #1
    25d0:	add	x27, x27, #0x1
    25d4:	ldrsb	w1, [x2, x27]
    25d8:	tbnz	w1, #31, 25d0 <dwarf_lookup_pc+0x800>
    25dc:	ldr	x1, [sp, #320]
    25e0:	add	x27, x0, x27
    25e4:	cmp	x19, x27
    25e8:	add	x1, x1, #0x1
    25ec:	str	x1, [sp, #320]
    25f0:	b.hi	2560 <dwarf_lookup_pc+0x790>  // b.pmore
    25f4:	ldp	x2, x3, [sp, #376]
    25f8:	lsl	x1, x1, #3
    25fc:	mov	x0, x20
    2600:	bl	0 <__asan_backtrace_alloc>
    2604:	str	x0, [sp, #328]
    2608:	cbz	x0, 2188 <dwarf_lookup_pc+0x3b8>
    260c:	ldr	x0, [sp, #416]
    2610:	mov	x1, #0x0                   	// #0
    2614:	ldrb	w0, [x0]
    2618:	cbz	w0, 27f8 <dwarf_lookup_pc+0xa28>
    261c:	mov	x27, x1
    2620:	stp	x24, x23, [sp, #168]
    2624:	stp	x21, x22, [sp, #184]
    2628:	ldr	x19, [sp, #152]
    262c:	b	26d4 <dwarf_lookup_pc+0x904>
    2630:	cbz	x0, 270c <dwarf_lookup_pc+0x93c>
    2634:	ldr	x1, [sp, #304]
    2638:	sub	x2, x0, #0x1
    263c:	cmp	x2, x1
    2640:	b.cs	2e1c <dwarf_lookup_pc+0x104c>  // b.hs, b.nlast
    2644:	ldr	x1, [sp, #312]
    2648:	add	x0, x1, x0, lsl #3
    264c:	ldur	x23, [x0, #-8]
    2650:	mov	x0, x23
    2654:	bl	0 <__asan_internal_strlen>
    2658:	mov	x24, x0
    265c:	mov	x0, x22
    2660:	bl	0 <__asan_internal_strlen>
    2664:	ldp	x2, x3, [sp, #376]
    2668:	mov	x28, x0
    266c:	add	x1, x24, x28
    2670:	mov	x0, x20
    2674:	add	x1, x1, #0x2
    2678:	bl	0 <__asan_backtrace_alloc>
    267c:	mov	x21, x0
    2680:	cbz	x0, 27cc <dwarf_lookup_pc+0x9fc>
    2684:	mov	x1, x23
    2688:	mov	x2, x24
    268c:	bl	0 <__asan_internal_memcpy>
    2690:	mov	w3, #0x2f                  	// #47
    2694:	strb	w3, [x21, x24]
    2698:	add	x0, x24, #0x1
    269c:	add	x2, x28, #0x1
    26a0:	add	x0, x21, x0
    26a4:	mov	x1, x22
    26a8:	bl	0 <__asan_internal_memcpy>
    26ac:	ldr	x0, [sp, #328]
    26b0:	str	x21, [x0, x27]
    26b4:	mov	x0, x19
    26b8:	bl	8b0 <read_uleb128>
    26bc:	mov	x0, x19
    26c0:	bl	8b0 <read_uleb128>
    26c4:	ldr	x0, [sp, #416]
    26c8:	add	x27, x27, #0x8
    26cc:	ldrb	w0, [x0]
    26d0:	cbz	w0, 27f0 <dwarf_lookup_pc+0xa20>
    26d4:	ldr	w0, [sp, #456]
    26d8:	cbnz	w0, 27cc <dwarf_lookup_pc+0x9fc>
    26dc:	mov	x0, x19
    26e0:	bl	a50 <read_string>
    26e4:	mov	x22, x0
    26e8:	cbz	x0, 27cc <dwarf_lookup_pc+0x9fc>
    26ec:	mov	x0, x19
    26f0:	bl	8b0 <read_uleb128>
    26f4:	ldrb	w1, [x22]
    26f8:	cmp	w1, #0x2f
    26fc:	b.ne	2630 <dwarf_lookup_pc+0x860>  // b.any
    2700:	ldr	x0, [sp, #328]
    2704:	str	x22, [x0, x27]
    2708:	b	26b4 <dwarf_lookup_pc+0x8e4>
    270c:	ldr	x0, [sp, #160]
    2710:	ldr	x23, [x0, #72]
    2714:	cbnz	x23, 2650 <dwarf_lookup_pc+0x880>
    2718:	b	2700 <dwarf_lookup_pc+0x930>
    271c:	ldr	x2, [sp, #352]
    2720:	sub	x1, x1, x0
    2724:	add	x0, x2, x0
    2728:	stp	x0, x1, [sp, #352]
    272c:	b	23f8 <dwarf_lookup_pc+0x628>
    2730:	ldr	x0, [sp, #152]
    2734:	bl	7d8 <read_byte>
    2738:	and	w0, w0, #0xff
    273c:	str	w0, [sp, #280]
    2740:	b	2420 <dwarf_lookup_pc+0x650>
    2744:	bl	710 <read_uint64>
    2748:	mov	x1, x0
    274c:	mov	x0, x25
    2750:	str	x1, [sp, #360]
    2754:	bl	770 <read_uint16>
    2758:	and	w0, w0, #0xffff
    275c:	str	w0, [sp, #272]
    2760:	sub	w0, w0, #0x2
    2764:	cmp	w0, #0x2
    2768:	b.hi	2334 <dwarf_lookup_pc+0x564>  // b.pmore
    276c:	mov	x0, x25
    2770:	bl	710 <read_uint64>
    2774:	b	23bc <dwarf_lookup_pc+0x5ec>
    2778:	sub	x0, x0, #0x1
    277c:	add	x1, x19, #0x1
    2780:	stp	x1, x0, [sp, #416]
    2784:	b	2440 <dwarf_lookup_pc+0x670>
    2788:	add	x19, x19, x1
    278c:	sub	x0, x0, x1
    2790:	stp	x19, x0, [sp, #416]
    2794:	b	249c <dwarf_lookup_pc+0x6cc>
    2798:	ldp	x2, x3, [sp, #376]
    279c:	lsl	x1, x1, #3
    27a0:	mov	x0, x20
    27a4:	bl	0 <__asan_backtrace_alloc>
    27a8:	str	x0, [sp, #312]
    27ac:	cbnz	x0, 24ec <dwarf_lookup_pc+0x71c>
    27b0:	b	2188 <dwarf_lookup_pc+0x3b8>
    27b4:	mov	x27, #0x1                   	// #1
    27b8:	b	25dc <dwarf_lookup_pc+0x80c>
    27bc:	mov	x27, #0x1                   	// #1
    27c0:	b	25bc <dwarf_lookup_pc+0x7ec>
    27c4:	mov	x0, #0x1                   	// #1
    27c8:	b	259c <dwarf_lookup_pc+0x7cc>
    27cc:	ldp	x24, x23, [sp, #168]
    27d0:	ldp	x21, x22, [sp, #184]
    27d4:	b	2188 <dwarf_lookup_pc+0x3b8>
    27d8:	ldr	x1, [sp, #320]
    27dc:	b	25f4 <dwarf_lookup_pc+0x824>
    27e0:	add	x27, x0, #0x1
    27e4:	sub	x19, x19, #0x1
    27e8:	stp	x27, x19, [sp, #416]
    27ec:	b	254c <dwarf_lookup_pc+0x77c>
    27f0:	ldp	x24, x23, [sp, #168]
    27f4:	ldp	x21, x22, [sp, #184]
    27f8:	ldr	w0, [sp, #456]
    27fc:	cbnz	w0, 2188 <dwarf_lookup_pc+0x3b8>
    2800:	ldr	x0, [sp, #320]
    2804:	cbz	x0, 2dc4 <dwarf_lookup_pc+0xff4>
    2808:	ldr	x0, [sp, #328]
    280c:	ldr	x0, [x0]
    2810:	str	x0, [sp, #168]
    2814:	ldr	x0, [sp, #360]
    2818:	cbz	x0, 28b8 <dwarf_lookup_pc+0xae8>
    281c:	ldr	x1, [sp, #168]
    2820:	adrp	x0, 0 <abbrev_compare>
    2824:	add	x0, x0, #0x0
    2828:	stp	x23, x21, [sp, #192]
    282c:	mov	w2, #0x1                   	// #1
    2830:	str	x0, [sp, #224]
    2834:	add	x0, x23, #0x10
    2838:	ldr	x23, [sp, #144]
    283c:	mov	w21, w2
    2840:	stp	x24, x26, [sp, #176]
    2844:	mov	x24, x0
    2848:	mov	x27, #0x0                   	// #0
    284c:	str	x22, [sp, #208]
    2850:	mov	x22, x1
    2854:	mov	w19, #0x0                   	// #0
    2858:	mov	x0, x25
    285c:	bl	7d8 <read_byte>
    2860:	ldr	w2, [sp, #292]
    2864:	and	w1, w0, #0xff
    2868:	cmp	w2, w0, uxtb
    286c:	b.ls	2a8c <dwarf_lookup_pc+0xcbc>  // b.plast
    2870:	cbz	w1, 2aec <dwarf_lookup_pc+0xd1c>
    2874:	cmp	w1, #0x5
    2878:	b.eq	2a34 <dwarf_lookup_pc+0xc64>  // b.none
    287c:	b.hi	2a18 <dwarf_lookup_pc+0xc48>  // b.pmore
    2880:	cmp	w1, #0x3
    2884:	b.eq	2c60 <dwarf_lookup_pc+0xe90>  // b.none
    2888:	cmp	w1, #0x4
    288c:	b.ne	29d8 <dwarf_lookup_pc+0xc08>  // b.any
    2890:	mov	x0, x25
    2894:	bl	8b0 <read_uleb128>
    2898:	cbnz	x0, 2d64 <dwarf_lookup_pc+0xf94>
    289c:	ldr	x22, [sp, #224]
    28a0:	ldr	x1, [sp, #360]
    28a4:	nop
    28a8:	cbnz	x1, 2858 <dwarf_lookup_pc+0xa88>
    28ac:	ldp	x24, x26, [sp, #176]
    28b0:	ldp	x23, x21, [sp, #192]
    28b4:	ldr	x22, [sp, #208]
    28b8:	ldr	w0, [sp, #392]
    28bc:	cbnz	w0, 2188 <dwarf_lookup_pc+0x3b8>
    28c0:	ldr	x0, [sp, #264]
    28c4:	cbz	x0, 2188 <dwarf_lookup_pc+0x3b8>
    28c8:	ldr	x19, [sp, #128]
    28cc:	mov	x3, x22
    28d0:	ldr	x27, [sp, #144]
    28d4:	mov	x0, x20
    28d8:	mov	x2, x19
    28dc:	mov	x1, #0x18                  	// #24
    28e0:	mov	x4, x27
    28e4:	bl	0 <__asan_backtrace_vector_grow>
    28e8:	cbz	x0, 2188 <dwarf_lookup_pc+0x3b8>
    28ec:	mov	x1, #0xffffffffffffffff    	// #-1
    28f0:	stp	x1, xzr, [x0]
    28f4:	mov	x3, x22
    28f8:	str	xzr, [x0, #16]
    28fc:	mov	x2, x19
    2900:	mov	x1, x27
    2904:	mov	x0, x20
    2908:	bl	0 <__asan_backtrace_vector_release>
    290c:	cbz	w0, 2188 <dwarf_lookup_pc+0x3b8>
    2910:	ldr	x0, [sp, #240]
    2914:	adrp	x3, 0 <abbrev_compare>
    2918:	ldr	x1, [sp, #264]
    291c:	add	x3, x3, #0x0
    2920:	mov	x2, #0x18                  	// #24
    2924:	str	x0, [sp, #144]
    2928:	bl	0 <__asan_backtrace_qsort>
    292c:	ldr	w0, [x20, #8]
    2930:	ldr	x28, [sp, #264]
    2934:	cbz	w0, 2d54 <dwarf_lookup_pc+0xf84>
    2938:	mov	x0, x25
    293c:	mov	x19, x25
    2940:	mov	x2, #0x20                  	// #32
    2944:	mov	w1, #0x0                   	// #0
    2948:	str	xzr, [sp, #176]
    294c:	ldr	x27, [x24, #16]
    2950:	bl	0 <__asan_internal_memset>
    2954:	adrp	x1, 0 <abbrev_compare>
    2958:	add	x1, x1, #0x0
    295c:	ldr	x3, [x23, #56]
    2960:	stp	x24, x21, [sp, #160]
    2964:	mov	x24, x22
    2968:	ldp	x2, x0, [x27]
    296c:	stp	x1, x3, [sp, #400]
    2970:	ldr	w1, [x23, #120]
    2974:	str	w1, [sp, #432]
    2978:	ldr	x1, [sp, #128]
    297c:	str	x22, [sp, #448]
    2980:	mov	x22, x19
    2984:	str	x25, [sp, #184]
    2988:	ldr	x19, [sp, #136]
    298c:	mov	x25, x1
    2990:	ldr	x21, [sp, #152]
    2994:	stp	x2, x0, [sp, #416]
    2998:	str	x1, [sp, #440]
    299c:	str	wzr, [sp, #456]
    29a0:	cbz	x0, 2cc8 <dwarf_lookup_pc+0xef8>
    29a4:	stp	x22, x22, [sp]
    29a8:	mov	x7, x24
    29ac:	mov	x6, x25
    29b0:	mov	x5, x19
    29b4:	mov	x4, x21
    29b8:	mov	x2, x27
    29bc:	mov	x1, x23
    29c0:	mov	x0, x20
    29c4:	mov	x3, #0x0                   	// #0
    29c8:	bl	1740 <read_function_entry>
    29cc:	cbz	w0, 2d40 <dwarf_lookup_pc+0xf70>
    29d0:	ldr	x0, [sp, #424]
    29d4:	b	29a0 <dwarf_lookup_pc+0xbd0>
    29d8:	cmp	w1, #0x1
    29dc:	b.eq	2ca0 <dwarf_lookup_pc+0xed0>  // b.none
    29e0:	cmp	w1, #0x2
    29e4:	b.ne	2c74 <dwarf_lookup_pc+0xea4>  // b.any
    29e8:	mov	x0, x25
    29ec:	bl	8b0 <read_uleb128>
    29f0:	ldr	w2, [sp, #276]
    29f4:	add	x19, x0, w19, uxtw
    29f8:	ldr	w3, [sp, #280]
    29fc:	ldr	x1, [sp, #360]
    2a00:	mul	x0, x2, x19
    2a04:	udiv	x2, x19, x3
    2a08:	udiv	x0, x0, x3
    2a0c:	msub	w19, w2, w3, w19
    2a10:	add	x27, x27, x0
    2a14:	b	28a8 <dwarf_lookup_pc+0xad8>
    2a18:	cmp	w1, #0x9
    2a1c:	b.eq	2c48 <dwarf_lookup_pc+0xe78>  // b.none
    2a20:	b.ls	2a44 <dwarf_lookup_pc+0xc74>  // b.plast
    2a24:	cmp	w1, #0xb
    2a28:	b.ls	2b60 <dwarf_lookup_pc+0xd90>  // b.plast
    2a2c:	cmp	w1, #0xc
    2a30:	b.ne	2c74 <dwarf_lookup_pc+0xea4>  // b.any
    2a34:	mov	x0, x25
    2a38:	bl	8b0 <read_uleb128>
    2a3c:	ldr	x1, [sp, #360]
    2a40:	b	28a8 <dwarf_lookup_pc+0xad8>
    2a44:	cmp	w1, #0x7
    2a48:	b.ls	2b60 <dwarf_lookup_pc+0xd90>  // b.plast
    2a4c:	cmp	w1, #0x8
    2a50:	b.ne	2c74 <dwarf_lookup_pc+0xea4>  // b.any
    2a54:	ldr	w0, [sp, #288]
    2a58:	mov	w1, #0xff                  	// #255
    2a5c:	sub	w2, w1, w2
    2a60:	ldr	w3, [sp, #276]
    2a64:	ldr	w4, [sp, #280]
    2a68:	ldr	x1, [sp, #360]
    2a6c:	udiv	w0, w2, w0
    2a70:	add	w19, w0, w19
    2a74:	udiv	w2, w19, w4
    2a78:	mul	w0, w19, w3
    2a7c:	udiv	w0, w0, w4
    2a80:	msub	w19, w2, w4, w19
    2a84:	add	x27, x27, x0
    2a88:	b	28a8 <dwarf_lookup_pc+0xad8>
    2a8c:	add	x4, sp, #0x11c
    2a90:	sub	w2, w1, w2
    2a94:	mov	x7, x23
    2a98:	mov	x1, x24
    2a9c:	mov	x3, x22
    2aa0:	mov	x0, x20
    2aa4:	ldp	w10, w6, [x4]
    2aa8:	ldp	w8, w9, [x4, #-8]
    2aac:	udiv	w4, w2, w6
    2ab0:	add	w19, w4, w19
    2ab4:	msub	w2, w4, w6, w2
    2ab8:	ldp	x5, x6, [sp, #376]
    2abc:	add	w2, w2, w10
    2ac0:	mul	w8, w19, w8
    2ac4:	add	w21, w21, w2
    2ac8:	udiv	w10, w19, w9
    2acc:	mov	w4, w21
    2ad0:	udiv	w2, w8, w9
    2ad4:	msub	w19, w10, w9, w19
    2ad8:	add	x27, x27, x2
    2adc:	mov	x2, x27
    2ae0:	bl	4b8 <add_line.isra.0>
    2ae4:	ldr	x1, [sp, #360]
    2ae8:	b	28a8 <dwarf_lookup_pc+0xad8>
    2aec:	mov	x0, x25
    2af0:	bl	8b0 <read_uleb128>
    2af4:	mov	x26, x0
    2af8:	mov	x0, x25
    2afc:	bl	7d8 <read_byte>
    2b00:	and	w0, w0, #0xff
    2b04:	cmp	w0, #0x3
    2b08:	b.eq	2b90 <dwarf_lookup_pc+0xdc0>  // b.none
    2b0c:	b.hi	2b3c <dwarf_lookup_pc+0xd6c>  // b.pmore
    2b10:	cmp	w0, #0x1
    2b14:	b.eq	2b78 <dwarf_lookup_pc+0xda8>  // b.none
    2b18:	cmp	w0, #0x2
    2b1c:	b.ne	2b44 <dwarf_lookup_pc+0xd74>  // b.any
    2b20:	ldr	x0, [sp, #160]
    2b24:	ldr	w1, [x0, #48]
    2b28:	mov	x0, x25
    2b2c:	bl	828 <read_address>
    2b30:	mov	x27, x0
    2b34:	ldr	x1, [sp, #360]
    2b38:	b	28a8 <dwarf_lookup_pc+0xad8>
    2b3c:	cmp	w0, #0x4
    2b40:	b.eq	2a34 <dwarf_lookup_pc+0xc64>  // b.none
    2b44:	ldr	x1, [sp, #360]
    2b48:	sub	x26, x26, #0x1
    2b4c:	cmp	x26, x1
    2b50:	b.ls	2d88 <dwarf_lookup_pc+0xfb8>  // b.plast
    2b54:	mov	x0, x25
    2b58:	bl	668 <advance.part.0>
    2b5c:	cbz	w0, 2b68 <dwarf_lookup_pc+0xd98>
    2b60:	ldr	x1, [sp, #360]
    2b64:	b	28a8 <dwarf_lookup_pc+0xad8>
    2b68:	ldp	x24, x26, [sp, #176]
    2b6c:	ldp	x23, x21, [sp, #192]
    2b70:	ldr	x22, [sp, #208]
    2b74:	b	2188 <dwarf_lookup_pc+0x3b8>
    2b78:	mov	w21, w0
    2b7c:	mov	w19, #0x0                   	// #0
    2b80:	mov	x27, #0x0                   	// #0
    2b84:	ldr	x22, [sp, #168]
    2b88:	ldr	x1, [sp, #360]
    2b8c:	b	28a8 <dwarf_lookup_pc+0xad8>
    2b90:	mov	x0, x25
    2b94:	bl	a50 <read_string>
    2b98:	mov	x28, x0
    2b9c:	cbz	x0, 2b68 <dwarf_lookup_pc+0xd98>
    2ba0:	mov	x0, x25
    2ba4:	bl	8b0 <read_uleb128>
    2ba8:	mov	x22, x0
    2bac:	mov	x0, x25
    2bb0:	bl	8b0 <read_uleb128>
    2bb4:	mov	x0, x25
    2bb8:	bl	8b0 <read_uleb128>
    2bbc:	ldrb	w0, [x28]
    2bc0:	cmp	w0, #0x2f
    2bc4:	b.eq	2d9c <dwarf_lookup_pc+0xfcc>  // b.none
    2bc8:	cbnz	w22, 2da8 <dwarf_lookup_pc+0xfd8>
    2bcc:	ldr	x0, [sp, #160]
    2bd0:	ldr	x5, [x0, #72]
    2bd4:	mov	x0, x5
    2bd8:	str	x5, [sp, #232]
    2bdc:	bl	0 <__asan_internal_strlen>
    2be0:	mov	x26, x0
    2be4:	mov	x0, x28
    2be8:	bl	0 <__asan_internal_strlen>
    2bec:	mov	x1, x0
    2bf0:	ldp	x2, x3, [sp, #376]
    2bf4:	str	x1, [sp, #216]
    2bf8:	add	x1, x26, x1
    2bfc:	mov	x0, x20
    2c00:	add	x1, x1, #0x2
    2c04:	bl	0 <__asan_backtrace_alloc>
    2c08:	mov	x22, x0
    2c0c:	cbz	x0, 2b68 <dwarf_lookup_pc+0xd98>
    2c10:	ldr	x5, [sp, #232]
    2c14:	mov	x2, x26
    2c18:	mov	x1, x5
    2c1c:	bl	0 <__asan_internal_memcpy>
    2c20:	ldr	x1, [sp, #216]
    2c24:	mov	w0, #0x2f                  	// #47
    2c28:	strb	w0, [x22, x26]
    2c2c:	add	x0, x26, #0x1
    2c30:	add	x2, x1, #0x1
    2c34:	add	x0, x22, x0
    2c38:	mov	x1, x28
    2c3c:	bl	0 <__asan_internal_memcpy>
    2c40:	ldr	x1, [sp, #360]
    2c44:	b	28a8 <dwarf_lookup_pc+0xad8>
    2c48:	mov	x0, x25
    2c4c:	bl	770 <read_uint16>
    2c50:	mov	w19, #0x0                   	// #0
    2c54:	add	x27, x27, w0, uxth
    2c58:	ldr	x1, [sp, #360]
    2c5c:	b	28a8 <dwarf_lookup_pc+0xad8>
    2c60:	mov	x0, x25
    2c64:	bl	978 <read_sleb128>
    2c68:	add	w21, w21, w0
    2c6c:	ldr	x1, [sp, #360]
    2c70:	b	28a8 <dwarf_lookup_pc+0xad8>
    2c74:	ldr	x0, [sp, #296]
    2c78:	sub	w1, w1, #0x1
    2c7c:	ldrb	w26, [x0, w1, uxtw]
    2c80:	cbz	w26, 2b60 <dwarf_lookup_pc+0xd90>
    2c84:	nop
    2c88:	mov	x0, x25
    2c8c:	bl	8b0 <read_uleb128>
    2c90:	subs	w26, w26, #0x1
    2c94:	b.ne	2c88 <dwarf_lookup_pc+0xeb8>  // b.any
    2c98:	ldr	x1, [sp, #360]
    2c9c:	b	28a8 <dwarf_lookup_pc+0xad8>
    2ca0:	ldp	x5, x6, [sp, #376]
    2ca4:	mov	x1, x24
    2ca8:	mov	x7, x23
    2cac:	mov	w4, w21
    2cb0:	mov	x3, x22
    2cb4:	mov	x2, x27
    2cb8:	mov	x0, x20
    2cbc:	bl	4b8 <add_line.isra.0>
    2cc0:	ldr	x1, [sp, #360]
    2cc4:	b	28a8 <dwarf_lookup_pc+0xad8>
    2cc8:	mov	x19, x22
    2ccc:	mov	x22, x24
    2cd0:	ldp	x24, x21, [sp, #160]
    2cd4:	ldr	x27, [x19, #24]
    2cd8:	ldr	x25, [sp, #184]
    2cdc:	cbz	x27, 2d48 <dwarf_lookup_pc+0xf78>
    2ce0:	ldr	x0, [sp, #176]
    2ce4:	cbz	x0, 2dd4 <dwarf_lookup_pc+0x1004>
    2ce8:	ldr	x2, [sp, #128]
    2cec:	mov	x3, x22
    2cf0:	ldr	x19, [sp, #176]
    2cf4:	mov	x0, x20
    2cf8:	mov	x1, x19
    2cfc:	bl	0 <__asan_backtrace_vector_finish>
    2d00:	mov	x25, x0
    2d04:	cbz	x0, 2d48 <dwarf_lookup_pc+0xf78>
    2d08:	str	xzr, [x19, #24]
    2d0c:	adrp	x3, 0 <abbrev_compare>
    2d10:	mov	x1, x27
    2d14:	add	x3, x3, #0x0
    2d18:	mov	x0, x25
    2d1c:	mov	x2, #0x18                  	// #24
    2d20:	bl	0 <__asan_backtrace_qsort>
    2d24:	ldp	x2, x1, [sp, #128]
    2d28:	mov	x3, x22
    2d2c:	mov	x0, x20
    2d30:	bl	158 <free_line_header>
    2d34:	mov	w1, #0x1                   	// #1
    2d38:	ldr	x19, [sp, #144]
    2d3c:	b	21d4 <dwarf_lookup_pc+0x404>
    2d40:	mov	x22, x24
    2d44:	ldp	x24, x21, [sp, #160]
    2d48:	mov	x25, #0x0                   	// #0
    2d4c:	mov	x27, #0x0                   	// #0
    2d50:	b	2d24 <dwarf_lookup_pc+0xf54>
    2d54:	add	x19, x23, #0x80
    2d58:	str	x19, [sp, #176]
    2d5c:	ldr	x27, [x24, #16]
    2d60:	b	2954 <dwarf_lookup_pc+0xb84>
    2d64:	ldr	x1, [sp, #320]
    2d68:	sub	x2, x0, #0x1
    2d6c:	cmp	x2, x1
    2d70:	b.cs	2dfc <dwarf_lookup_pc+0x102c>  // b.hs, b.nlast
    2d74:	ldr	x2, [sp, #328]
    2d78:	ldr	x1, [sp, #360]
    2d7c:	add	x0, x2, x0, lsl #3
    2d80:	ldur	x22, [x0, #-8]
    2d84:	b	28a8 <dwarf_lookup_pc+0xad8>
    2d88:	ldr	x0, [sp, #352]
    2d8c:	sub	x1, x1, x26
    2d90:	add	x26, x0, x26
    2d94:	stp	x26, x1, [sp, #352]
    2d98:	b	28a8 <dwarf_lookup_pc+0xad8>
    2d9c:	mov	x22, x28
    2da0:	ldr	x1, [sp, #360]
    2da4:	b	28a8 <dwarf_lookup_pc+0xad8>
    2da8:	ldr	x0, [sp, #304]
    2dac:	sub	w22, w22, #0x1
    2db0:	cmp	x22, x0
    2db4:	b.cs	2e38 <dwarf_lookup_pc+0x1068>  // b.hs, b.nlast
    2db8:	ldr	x0, [sp, #312]
    2dbc:	ldr	x5, [x0, x22, lsl #3]
    2dc0:	b	2bd4 <dwarf_lookup_pc+0xe04>
    2dc4:	adrp	x0, 0 <abbrev_compare>
    2dc8:	add	x0, x0, #0x0
    2dcc:	str	x0, [sp, #168]
    2dd0:	b	2814 <dwarf_lookup_pc+0xa44>
    2dd4:	ldr	x2, [sp, #128]
    2dd8:	mov	x1, x25
    2ddc:	mov	x3, x22
    2de0:	mov	x0, x20
    2de4:	bl	0 <__asan_backtrace_vector_release>
    2de8:	cbz	w0, 2d48 <dwarf_lookup_pc+0xf78>
    2dec:	ldr	x25, [x19]
    2df0:	b	2d0c <dwarf_lookup_pc+0xf3c>
    2df4:	str	xzr, [sp, #312]
    2df8:	b	24ec <dwarf_lookup_pc+0x71c>
    2dfc:	mov	x0, x25
    2e00:	adrp	x1, 0 <abbrev_compare>
    2e04:	add	x1, x1, #0x0
    2e08:	ldp	x24, x26, [sp, #176]
    2e0c:	ldp	x23, x21, [sp, #192]
    2e10:	ldr	x22, [sp, #208]
    2e14:	bl	100 <dwarf_buf_error>
    2e18:	b	2188 <dwarf_lookup_pc+0x3b8>
    2e1c:	mov	x0, x25
    2e20:	adrp	x1, 0 <abbrev_compare>
    2e24:	add	x1, x1, #0x0
    2e28:	ldp	x24, x23, [sp, #168]
    2e2c:	ldp	x21, x22, [sp, #184]
    2e30:	bl	100 <dwarf_buf_error>
    2e34:	b	2188 <dwarf_lookup_pc+0x3b8>
    2e38:	mov	x0, x25
    2e3c:	adrp	x1, 0 <abbrev_compare>
    2e40:	add	x1, x1, #0x0
    2e44:	ldp	x24, x26, [sp, #176]
    2e48:	ldp	x23, x21, [sp, #192]
    2e4c:	ldr	x22, [sp, #208]
    2e50:	bl	100 <dwarf_buf_error>
    2e54:	b	2188 <dwarf_lookup_pc+0x3b8>

0000000000002e58 <dwarf_fileline>:
    2e58:	stp	x29, x30, [sp, #-96]!
    2e5c:	mov	x29, sp
    2e60:	stp	x23, x24, [sp, #48]
    2e64:	mov	x24, x0
    2e68:	ldr	w0, [x0, #8]
    2e6c:	stp	x19, x20, [sp, #16]
    2e70:	mov	x23, x3
    2e74:	mov	x20, x2
    2e78:	stp	x21, x22, [sp, #32]
    2e7c:	mov	x22, x1
    2e80:	mov	x21, x4
    2e84:	cbnz	w0, 2ee8 <dwarf_fileline+0x90>
    2e88:	ldr	x19, [x24, #32]
    2e8c:	cbz	x19, 2f30 <dwarf_fileline+0xd8>
    2e90:	str	x25, [sp, #64]
    2e94:	add	x25, sp, #0x5c
    2e98:	b	2eac <dwarf_fileline+0x54>
    2e9c:	ldr	w0, [sp, #92]
    2ea0:	cbnz	w0, 2f5c <dwarf_fileline+0x104>
    2ea4:	ldr	x19, [x19]
    2ea8:	cbz	x19, 2f2c <dwarf_fileline+0xd4>
    2eac:	mov	x6, x25
    2eb0:	mov	x5, x21
    2eb4:	mov	x4, x23
    2eb8:	mov	x3, x20
    2ebc:	mov	x2, x22
    2ec0:	mov	x1, x19
    2ec4:	mov	x0, x24
    2ec8:	bl	1dd0 <dwarf_lookup_pc>
    2ecc:	cbz	w0, 2e9c <dwarf_fileline+0x44>
    2ed0:	ldp	x19, x20, [sp, #16]
    2ed4:	ldp	x21, x22, [sp, #32]
    2ed8:	ldp	x23, x24, [sp, #48]
    2edc:	ldr	x25, [sp, #64]
    2ee0:	ldp	x29, x30, [sp], #96
    2ee4:	ret
    2ee8:	add	x19, x24, #0x20
    2eec:	str	x25, [sp, #64]
    2ef0:	add	x25, sp, #0x5c
    2ef4:	b	2f08 <dwarf_fileline+0xb0>
    2ef8:	bl	1dd0 <dwarf_lookup_pc>
    2efc:	cbnz	w0, 2ed0 <dwarf_fileline+0x78>
    2f00:	ldr	w0, [sp, #92]
    2f04:	cbnz	w0, 2f5c <dwarf_fileline+0x104>
    2f08:	ldar	x19, [x19]
    2f0c:	mov	x6, x25
    2f10:	mov	x5, x21
    2f14:	mov	x4, x23
    2f18:	mov	x3, x20
    2f1c:	mov	x2, x22
    2f20:	mov	x1, x19
    2f24:	mov	x0, x24
    2f28:	cbnz	x19, 2ef8 <dwarf_fileline+0xa0>
    2f2c:	ldr	x25, [sp, #64]
    2f30:	mov	x1, x22
    2f34:	mov	x0, x21
    2f38:	mov	x4, #0x0                   	// #0
    2f3c:	mov	w3, #0x0                   	// #0
    2f40:	mov	x2, #0x0                   	// #0
    2f44:	blr	x20
    2f48:	ldp	x19, x20, [sp, #16]
    2f4c:	ldp	x21, x22, [sp, #32]
    2f50:	ldp	x23, x24, [sp, #48]
    2f54:	ldp	x29, x30, [sp], #96
    2f58:	ret
    2f5c:	mov	w0, #0x0                   	// #0
    2f60:	ldp	x19, x20, [sp, #16]
    2f64:	ldp	x21, x22, [sp, #32]
    2f68:	ldp	x23, x24, [sp, #48]
    2f6c:	ldr	x25, [sp, #64]
    2f70:	ldp	x29, x30, [sp], #96
    2f74:	ret

0000000000002f78 <function_addrs_compare>:
    2f78:	ldr	x3, [x0]
    2f7c:	ldr	x2, [x1]
    2f80:	cmp	x3, x2
    2f84:	b.cc	2fbc <function_addrs_compare+0x44>  // b.lo, b.ul, b.last
    2f88:	b.hi	2fb4 <function_addrs_compare+0x3c>  // b.pmore
    2f8c:	ldr	x3, [x0, #8]
    2f90:	ldr	x2, [x1, #8]
    2f94:	cmp	x3, x2
    2f98:	b.cc	2fb4 <function_addrs_compare+0x3c>  // b.lo, b.ul, b.last
    2f9c:	b.hi	2fbc <function_addrs_compare+0x44>  // b.pmore
    2fa0:	ldr	x0, [x0, #16]
    2fa4:	ldr	x1, [x1, #16]
    2fa8:	ldr	x0, [x0]
    2fac:	ldr	x1, [x1]
    2fb0:	b	0 <__asan_internal_strcmp>
    2fb4:	mov	w0, #0x1                   	// #1
    2fb8:	ret
    2fbc:	mov	w0, #0xffffffff            	// #-1
    2fc0:	ret
    2fc4:	nop

0000000000002fc8 <free_abbrevs.isra.0>:
    2fc8:	stp	x29, x30, [sp, #-64]!
    2fcc:	mov	x29, sp
    2fd0:	stp	x19, x20, [sp, #16]
    2fd4:	mov	x20, x2
    2fd8:	ldr	x2, [x1]
    2fdc:	stp	x21, x22, [sp, #32]
    2fe0:	mov	x21, x1
    2fe4:	stp	x23, x24, [sp, #48]
    2fe8:	mov	x22, x0
    2fec:	mov	x23, x3
    2ff0:	mov	x24, x4
    2ff4:	cbz	x2, 3034 <free_abbrevs.isra.0+0x6c>
    2ff8:	mov	x19, #0x0                   	// #0
    2ffc:	nop
    3000:	ldr	x5, [x20]
    3004:	mov	x4, x24
    3008:	mov	x3, x23
    300c:	mov	x0, x22
    3010:	add	x5, x5, x19, lsl #5
    3014:	add	x19, x19, #0x1
    3018:	ldp	x2, x1, [x5, #16]
    301c:	lsl	x2, x2, #3
    3020:	bl	0 <__asan_backtrace_free>
    3024:	ldr	x5, [x21]
    3028:	cmp	x19, x5
    302c:	b.cc	3000 <free_abbrevs.isra.0+0x38>  // b.lo, b.ul, b.last
    3030:	lsl	x2, x5, #5
    3034:	ldr	x1, [x20]
    3038:	mov	x4, x24
    303c:	mov	x3, x23
    3040:	mov	x0, x22
    3044:	bl	0 <__asan_backtrace_free>
    3048:	ldp	x23, x24, [sp, #48]
    304c:	str	xzr, [x21]
    3050:	ldp	x21, x22, [sp, #32]
    3054:	str	xzr, [x20]
    3058:	ldp	x19, x20, [sp, #16]
    305c:	ldp	x29, x30, [sp], #64
    3060:	ret
    3064:	nop

0000000000003068 <__asan_backtrace_dwarf_add>:
    3068:	sub	sp, sp, #0x2a0
    306c:	add	x8, sp, #0x160
    3070:	stp	x29, x30, [sp, #48]
    3074:	add	x29, sp, #0x30
    3078:	stp	x4, x5, [sp, #272]
    307c:	add	x4, sp, #0x148
    3080:	stp	x19, x20, [sp, #64]
    3084:	mov	x19, x2
    3088:	add	x20, sp, #0x180
    308c:	stp	x21, x22, [sp, #80]
    3090:	mov	x22, x3
    3094:	mov	x21, x4
    3098:	stp	x23, x24, [sp, #96]
    309c:	stp	x25, x26, [sp, #112]
    30a0:	stp	x27, x28, [sp, #128]
    30a4:	mov	x27, x0
    30a8:	mov	x0, x8
    30ac:	str	x7, [sp, #160]
    30b0:	stp	x8, x1, [sp, #192]
    30b4:	mov	w1, #0x0                   	// #0
    30b8:	str	x4, [sp, #208]
    30bc:	str	x6, [sp, #224]
    30c0:	stp	x2, x3, [sp, #256]
    30c4:	mov	x2, #0x18                  	// #24
    30c8:	str	x20, [sp, #288]
    30cc:	ldr	x23, [sp, #720]
    30d0:	ldr	x26, [sp, #728]
    30d4:	bl	0 <__asan_internal_memset>
    30d8:	mov	x2, #0x18                  	// #24
    30dc:	mov	w1, #0x0                   	// #0
    30e0:	mov	x0, x20
    30e4:	bl	0 <__asan_internal_memset>
    30e8:	adrp	x3, 0 <abbrev_compare>
    30ec:	add	x3, x3, #0x0
    30f0:	stp	xzr, x3, [sp, #408]
    30f4:	mov	x0, x21
    30f8:	ldr	w3, [sp, #704]
    30fc:	mov	x2, #0x18                  	// #24
    3100:	mov	w1, #0x0                   	// #0
    3104:	str	xzr, [sp, #376]
    3108:	stp	x19, x19, [sp, #424]
    310c:	str	x22, [sp, #440]
    3110:	str	w3, [sp, #448]
    3114:	stp	x23, x26, [sp, #456]
    3118:	str	wzr, [sp, #472]
    311c:	bl	0 <__asan_internal_memset>
    3120:	ldr	x0, [sp, #440]
    3124:	str	x0, [sp, #152]
    3128:	cbz	x0, 38c0 <__asan_backtrace_dwarf_add+0x858>
    312c:	add	x22, sp, #0x1a0
    3130:	add	x25, sp, #0x1e0
    3134:	add	x28, sp, #0x260
    3138:	mov	x24, x27
    313c:	adrp	x0, 0 <abbrev_compare>
    3140:	add	x0, x0, #0x0
    3144:	str	xzr, [sp, #152]
    3148:	str	xzr, [sp, #168]
    314c:	str	x0, [sp, #232]
    3150:	ldr	w0, [sp, #472]
    3154:	str	w0, [sp, #184]
    3158:	cbnz	w0, 34e0 <__asan_backtrace_dwarf_add+0x478>
    315c:	ldr	x1, [sp, #432]
    3160:	mov	x0, x22
    3164:	str	x1, [sp, #176]
    3168:	bl	6b0 <read_uint32>
    316c:	mov	w27, w0
    3170:	mov	x1, #0xffffffff            	// #4294967295
    3174:	cmp	x1, w0, uxtw
    3178:	b.eq	3848 <__asan_backtrace_dwarf_add+0x7e0>  // b.none
    317c:	ldp	x2, x3, [x22]
    3180:	stp	x2, x3, [x25]
    3184:	ldp	x0, x1, [x22, #16]
    3188:	stp	x0, x1, [x25, #16]
    318c:	ldp	x2, x3, [x22, #32]
    3190:	stp	x2, x3, [x25, #32]
    3194:	ldp	x2, x3, [x22, #48]
    3198:	stp	x2, x3, [x25, #48]
    319c:	ldr	x0, [sp, #440]
    31a0:	str	x27, [sp, #504]
    31a4:	cmp	x0, x27
    31a8:	b.cs	3530 <__asan_backtrace_dwarf_add+0x4c8>  // b.hs, b.nlast
    31ac:	mov	x0, x22
    31b0:	bl	668 <advance.part.0>
    31b4:	cbz	w0, 34e0 <__asan_backtrace_dwarf_add+0x478>
    31b8:	mov	x0, x25
    31bc:	bl	770 <read_uint16>
    31c0:	and	w0, w0, #0xffff
    31c4:	str	w0, [sp, #188]
    31c8:	sub	w0, w0, #0x2
    31cc:	cmp	w0, #0x2
    31d0:	b.hi	3560 <__asan_backtrace_dwarf_add+0x4f8>  // b.pmore
    31d4:	ldr	x4, [sp, #208]
    31d8:	mov	x3, x26
    31dc:	mov	x2, x23
    31e0:	mov	x0, x24
    31e4:	mov	x1, #0x8                   	// #8
    31e8:	bl	0 <__asan_backtrace_vector_grow>
    31ec:	mov	x20, x0
    31f0:	cbz	x0, 34e0 <__asan_backtrace_dwarf_add+0x478>
    31f4:	mov	x3, x26
    31f8:	mov	x2, x23
    31fc:	mov	x0, x24
    3200:	mov	x1, #0x88                  	// #136
    3204:	bl	0 <__asan_backtrace_alloc>
    3208:	mov	x19, x0
    320c:	cbz	x0, 34e0 <__asan_backtrace_dwarf_add+0x478>
    3210:	ldr	x1, [sp, #152]
    3214:	str	x19, [x20]
    3218:	add	x0, x0, #0x58
    321c:	mov	x2, #0x10                  	// #16
    3220:	add	x1, x1, #0x1
    3224:	str	x1, [sp, #152]
    3228:	mov	w1, #0x0                   	// #0
    322c:	str	x0, [sp, #240]
    3230:	bl	0 <__asan_internal_memset>
    3234:	ldr	w0, [sp, #184]
    3238:	cbz	w0, 34f8 <__asan_backtrace_dwarf_add+0x490>
    323c:	mov	x0, x25
    3240:	bl	710 <read_uint64>
    3244:	ldr	x1, [sp, #160]
    3248:	stp	xzr, xzr, [x19, #88]
    324c:	cmp	x1, x0
    3250:	b.ls	3514 <__asan_backtrace_dwarf_add+0x4ac>  // b.plast
    3254:	ldr	x3, [sp, #160]
    3258:	add	x4, sp, #0x220
    325c:	ldr	x2, [sp, #224]
    3260:	str	x23, [sp, #584]
    3264:	str	x26, [sp, #592]
    3268:	add	x20, sp, #0x220
    326c:	add	x1, x2, x0
    3270:	sub	x0, x3, x0
    3274:	stp	x1, x0, [x4, #16]
    3278:	mov	x21, #0x0                   	// #0
    327c:	ldr	w0, [sp, #704]
    3280:	str	w0, [sp, #576]
    3284:	add	x0, sp, #0x200
    3288:	ldr	x3, [sp, #232]
    328c:	stp	x3, x2, [x4]
    3290:	ldp	x0, x1, [x0, #48]
    3294:	stp	x0, x1, [x28, #16]
    3298:	add	x0, sp, #0x200
    329c:	str	wzr, [sp, #600]
    32a0:	ldp	x0, x1, [x0, #32]
    32a4:	stp	x0, x1, [x28]
    32a8:	add	x0, sp, #0x200
    32ac:	ldp	x0, x1, [x0, #64]
    32b0:	stp	x0, x1, [x28, #32]
    32b4:	add	x0, sp, #0x200
    32b8:	ldp	x0, x1, [x0, #80]
    32bc:	stp	x0, x1, [x28, #48]
    32c0:	mov	x0, x28
    32c4:	bl	8b0 <read_uleb128>
    32c8:	cbz	x0, 3318 <__asan_backtrace_dwarf_add+0x2b0>
    32cc:	nop
    32d0:	ldr	w0, [sp, #664]
    32d4:	cbnz	w0, 34e0 <__asan_backtrace_dwarf_add+0x478>
    32d8:	mov	x0, x28
    32dc:	bl	8b0 <read_uleb128>
    32e0:	add	x21, x21, #0x1
    32e4:	mov	x0, x28
    32e8:	bl	7d8 <read_byte>
    32ec:	b	32f8 <__asan_backtrace_dwarf_add+0x290>
    32f0:	mov	x0, x28
    32f4:	bl	8b0 <read_uleb128>
    32f8:	mov	x0, x28
    32fc:	bl	8b0 <read_uleb128>
    3300:	cbnz	x0, 32f0 <__asan_backtrace_dwarf_add+0x288>
    3304:	mov	x0, x28
    3308:	bl	8b0 <read_uleb128>
    330c:	mov	x0, x28
    3310:	bl	8b0 <read_uleb128>
    3314:	cbnz	x0, 32d0 <__asan_backtrace_dwarf_add+0x268>
    3318:	ldr	w0, [sp, #664]
    331c:	cbnz	w0, 34e0 <__asan_backtrace_dwarf_add+0x478>
    3320:	cbz	x21, 35a0 <__asan_backtrace_dwarf_add+0x538>
    3324:	lsl	x1, x21, #5
    3328:	mov	x3, x26
    332c:	mov	x2, x23
    3330:	mov	x0, x24
    3334:	str	x1, [sp, #216]
    3338:	bl	0 <__asan_backtrace_alloc>
    333c:	str	x0, [x19, #96]
    3340:	cbz	x0, 34e0 <__asan_backtrace_dwarf_add+0x478>
    3344:	ldr	x1, [sp, #216]
    3348:	str	x21, [x19, #88]
    334c:	mov	x2, x1
    3350:	mov	w1, #0x0                   	// #0
    3354:	bl	0 <__asan_internal_memset>
    3358:	ldr	w0, [sp, #600]
    335c:	cbnz	w0, 38b8 <__asan_backtrace_dwarf_add+0x850>
    3360:	mov	x0, #0x0                   	// #0
    3364:	stp	x27, x22, [sp, #296]
    3368:	mov	x22, x0
    336c:	str	x25, [sp, #312]
    3370:	mov	x25, x20
    3374:	str	x24, [sp, #248]
    3378:	str	x23, [sp, #720]
    337c:	str	x26, [sp, #728]
    3380:	mov	x0, x25
    3384:	bl	8b0 <read_uleb128>
    3388:	mov	x21, x0
    338c:	cbz	x0, 3578 <__asan_backtrace_dwarf_add+0x510>
    3390:	mov	x0, x25
    3394:	bl	8b0 <read_uleb128>
    3398:	mov	x20, x0
    339c:	mov	x0, x25
    33a0:	bl	7d8 <read_byte>
    33a4:	mov	x24, #0x0                   	// #0
    33a8:	ldp	x2, x3, [x25]
    33ac:	stp	x2, x3, [x28]
    33b0:	and	w27, w0, #0xff
    33b4:	ldp	x2, x3, [x25, #16]
    33b8:	stp	x2, x3, [x28, #16]
    33bc:	ldp	x2, x3, [x25, #32]
    33c0:	stp	x2, x3, [x28, #32]
    33c4:	ldp	x2, x3, [x25, #48]
    33c8:	stp	x2, x3, [x28, #48]
    33cc:	b	33dc <__asan_backtrace_dwarf_add+0x374>
    33d0:	add	x24, x24, #0x1
    33d4:	mov	x0, x28
    33d8:	bl	8b0 <read_uleb128>
    33dc:	mov	x0, x28
    33e0:	bl	8b0 <read_uleb128>
    33e4:	cbnz	x0, 33d0 <__asan_backtrace_dwarf_add+0x368>
    33e8:	cbnz	x24, 37c8 <__asan_backtrace_dwarf_add+0x760>
    33ec:	mov	x23, #0x0                   	// #0
    33f0:	mov	x0, x25
    33f4:	bl	8b0 <read_uleb128>
    33f8:	mov	x0, x25
    33fc:	bl	8b0 <read_uleb128>
    3400:	ldr	x3, [x19, #96]
    3404:	ldr	w5, [sp, #600]
    3408:	add	x0, x3, x22
    340c:	str	x21, [x3, x22]
    3410:	add	x22, x22, #0x20
    3414:	stp	w20, w27, [x0, #8]
    3418:	stp	x24, x23, [x0, #16]
    341c:	cbz	w5, 3380 <__asan_backtrace_dwarf_add+0x318>
    3420:	ldr	x27, [sp, #248]
    3424:	ldr	x23, [sp, #720]
    3428:	ldr	x26, [sp, #728]
    342c:	mov	x0, x27
    3430:	ldr	x1, [sp, #240]
    3434:	add	x2, x19, #0x60
    3438:	mov	x4, x26
    343c:	mov	x3, x23
    3440:	bl	2fc8 <free_abbrevs.isra.0>
    3444:	ldr	x0, [sp, #152]
    3448:	cbz	x0, 34b4 <__asan_backtrace_dwarf_add+0x44c>
    344c:	ldr	x20, [sp, #328]
    3450:	add	x19, x20, x0, lsl #3
    3454:	nop
    3458:	ldr	x1, [x20]
    345c:	mov	x4, x26
    3460:	mov	x3, x23
    3464:	mov	x0, x27
    3468:	add	x2, x1, #0x60
    346c:	add	x1, x1, #0x58
    3470:	bl	2fc8 <free_abbrevs.isra.0>
    3474:	ldr	x1, [x20], #8
    3478:	mov	x4, x26
    347c:	mov	x3, x23
    3480:	mov	x0, x27
    3484:	mov	x2, #0x88                  	// #136
    3488:	bl	0 <__asan_backtrace_free>
    348c:	cmp	x19, x20
    3490:	b.ne	3458 <__asan_backtrace_dwarf_add+0x3f0>  // b.any
    3494:	ldp	x5, x4, [sp, #336]
    3498:	mov	x3, x26
    349c:	ldr	x1, [sp, #208]
    34a0:	mov	x2, x23
    34a4:	mov	x0, x27
    34a8:	add	x4, x4, x5
    34ac:	stp	xzr, x4, [sp, #336]
    34b0:	bl	0 <__asan_backtrace_vector_release>
    34b4:	ldr	x0, [sp, #376]
    34b8:	cbnz	x0, 3860 <__asan_backtrace_dwarf_add+0x7f8>
    34bc:	mov	w0, #0x0                   	// #0
    34c0:	ldp	x29, x30, [sp, #48]
    34c4:	ldp	x19, x20, [sp, #64]
    34c8:	ldp	x21, x22, [sp, #80]
    34cc:	ldp	x23, x24, [sp, #96]
    34d0:	ldp	x25, x26, [sp, #112]
    34d4:	ldp	x27, x28, [sp, #128]
    34d8:	add	sp, sp, #0x2a0
    34dc:	ret
    34e0:	mov	x27, x24
    34e4:	ldr	x0, [sp, #152]
    34e8:	cbnz	x0, 344c <__asan_backtrace_dwarf_add+0x3e4>
    34ec:	ldr	x0, [sp, #376]
    34f0:	cbz	x0, 34bc <__asan_backtrace_dwarf_add+0x454>
    34f4:	b	3860 <__asan_backtrace_dwarf_add+0x7f8>
    34f8:	mov	x0, x25
    34fc:	bl	6b0 <read_uint32>
    3500:	ldr	x1, [sp, #160]
    3504:	stp	xzr, xzr, [x19, #88]
    3508:	mov	w0, w0
    350c:	cmp	x1, x0
    3510:	b.hi	3254 <__asan_backtrace_dwarf_add+0x1ec>  // b.pmore
    3514:	mov	x27, x24
    3518:	mov	x0, x26
    351c:	adrp	x1, 0 <abbrev_compare>
    3520:	mov	w2, #0x0                   	// #0
    3524:	add	x1, x1, #0x0
    3528:	blr	x23
    352c:	b	34e4 <__asan_backtrace_dwarf_add+0x47c>
    3530:	ldr	x1, [sp, #432]
    3534:	sub	x0, x0, x27
    3538:	str	x0, [sp, #440]
    353c:	add	x0, x1, x27
    3540:	str	x0, [sp, #432]
    3544:	mov	x0, x25
    3548:	bl	770 <read_uint16>
    354c:	and	w0, w0, #0xffff
    3550:	str	w0, [sp, #188]
    3554:	sub	w0, w0, #0x2
    3558:	cmp	w0, #0x2
    355c:	b.ls	31d4 <__asan_backtrace_dwarf_add+0x16c>  // b.plast
    3560:	mov	x27, x24
    3564:	mov	x0, x25
    3568:	adrp	x1, 0 <abbrev_compare>
    356c:	add	x1, x1, #0x0
    3570:	bl	100 <dwarf_buf_error>
    3574:	b	34e4 <__asan_backtrace_dwarf_add+0x47c>
    3578:	ldp	x1, x0, [x19, #88]
    357c:	adrp	x3, 0 <abbrev_compare>
    3580:	mov	x2, #0x20                  	// #32
    3584:	add	x3, x3, #0x0
    3588:	ldr	x24, [sp, #248]
    358c:	ldp	x27, x22, [sp, #296]
    3590:	ldr	x25, [sp, #312]
    3594:	ldr	x23, [sp, #720]
    3598:	ldr	x26, [sp, #728]
    359c:	bl	0 <__asan_backtrace_qsort>
    35a0:	mov	x0, x25
    35a4:	bl	7d8 <read_byte>
    35a8:	ldr	w8, [sp, #184]
    35ac:	mov	x1, #0xc                   	// #12
    35b0:	ldr	x2, [sp, #712]
    35b4:	cmp	w8, #0x0
    35b8:	ldp	x3, x4, [sp, #496]
    35bc:	stp	x2, x23, [sp]
    35c0:	mov	x2, #0x4                   	// #4
    35c4:	csel	x1, x1, x2, ne  // ne = any
    35c8:	stp	x26, x19, [sp, #16]
    35cc:	add	x1, x1, x27
    35d0:	ldr	x2, [sp, #192]
    35d4:	str	x2, [sp, #32]
    35d8:	ldr	x2, [sp, #176]
    35dc:	str	x28, [sp, #40]
    35e0:	ldr	w7, [sp, #704]
    35e4:	and	w0, w0, #0xff
    35e8:	sub	x2, x3, x2
    35ec:	str	x2, [x19, #16]
    35f0:	ldr	x2, [sp, #168]
    35f4:	stp	x3, x4, [x19]
    35f8:	add	x1, x2, x1
    35fc:	stp	x2, x1, [x19, #24]
    3600:	mov	x2, x25
    3604:	str	x1, [sp, #168]
    3608:	ldr	w1, [sp, #188]
    360c:	str	w1, [x19, #40]
    3610:	ldr	x1, [sp, #200]
    3614:	stp	w8, w0, [x19, #44]
    3618:	ldr	x5, [sp, #672]
    361c:	stp	xzr, xzr, [x19, #56]
    3620:	mov	x0, x24
    3624:	ldr	x6, [sp, #680]
    3628:	str	xzr, [x19, #72]
    362c:	ldr	x3, [sp, #688]
    3630:	ldr	x4, [sp, #696]
    3634:	str	xzr, [x19, #80]
    3638:	stp	xzr, xzr, [x19, #104]
    363c:	stp	xzr, xzr, [x19, #120]
    3640:	bl	f50 <find_address_ranges>
    3644:	cbz	w0, 34e0 <__asan_backtrace_dwarf_add+0x478>
    3648:	ldr	w0, [sp, #536]
    364c:	cbnz	w0, 34e0 <__asan_backtrace_dwarf_add+0x478>
    3650:	ldr	x0, [sp, #440]
    3654:	cbnz	x0, 3150 <__asan_backtrace_dwarf_add+0xe8>
    3658:	ldr	w0, [sp, #472]
    365c:	mov	x27, x24
    3660:	cbnz	w0, 34e4 <__asan_backtrace_dwarf_add+0x47c>
    3664:	add	x0, sp, #0x200
    3668:	ldr	x1, [sp, #192]
    366c:	ldp	x2, x3, [x0, #-184]
    3670:	stp	x2, x3, [sp, #384]
    3674:	ldr	x0, [sp, #344]
    3678:	str	x0, [sp, #400]
    367c:	ldr	x0, [sp, #152]
    3680:	mov	x3, x26
    3684:	mov	x2, x23
    3688:	str	x0, [sp, #408]
    368c:	mov	x0, x27
    3690:	bl	0 <__asan_backtrace_vector_release>
    3694:	cbz	w0, 34bc <__asan_backtrace_dwarf_add+0x454>
    3698:	ldr	x1, [sp, #288]
    369c:	mov	x3, x26
    36a0:	mov	x2, x23
    36a4:	mov	x0, x27
    36a8:	bl	0 <__asan_backtrace_vector_release>
    36ac:	cbz	w0, 34bc <__asan_backtrace_dwarf_add+0x454>
    36b0:	ldp	x20, x24, [sp, #376]
    36b4:	mov	x2, #0x18                  	// #24
    36b8:	ldr	x21, [sp, #352]
    36bc:	adrp	x3, 0 <abbrev_compare>
    36c0:	add	x3, x3, #0x0
    36c4:	mov	x0, x21
    36c8:	mov	x1, x20
    36cc:	ldr	x22, [sp, #408]
    36d0:	bl	0 <__asan_backtrace_qsort>
    36d4:	mov	x3, x26
    36d8:	mov	x2, x23
    36dc:	mov	x0, x27
    36e0:	mov	x1, #0xa0                  	// #160
    36e4:	bl	0 <__asan_backtrace_alloc>
    36e8:	mov	x19, x0
    36ec:	cbz	x0, 34bc <__asan_backtrace_dwarf_add+0x454>
    36f0:	ldr	x3, [sp, #712]
    36f4:	stp	xzr, x3, [x19]
    36f8:	add	x0, x0, #0x80
    36fc:	ldr	x3, [sp, #200]
    3700:	str	x3, [x19, #16]
    3704:	ldr	x3, [sp, #256]
    3708:	str	x3, [x19, #56]
    370c:	ldr	x3, [sp, #264]
    3710:	str	x3, [x19, #64]
    3714:	ldr	x3, [sp, #272]
    3718:	str	x3, [x19, #72]
    371c:	ldr	x3, [sp, #280]
    3720:	str	x3, [x19, #80]
    3724:	ldr	x3, [sp, #672]
    3728:	str	x3, [x19, #88]
    372c:	ldr	x3, [sp, #680]
    3730:	str	x3, [x19, #96]
    3734:	ldr	x3, [sp, #688]
    3738:	str	x3, [x19, #104]
    373c:	ldr	x3, [sp, #696]
    3740:	str	x3, [x19, #112]
    3744:	ldr	w3, [sp, #704]
    3748:	mov	x2, #0x20                  	// #32
    374c:	stp	x21, x20, [x19, #24]
    3750:	mov	w1, #0x0                   	// #0
    3754:	stp	x24, x22, [x19, #40]
    3758:	str	w3, [x19, #120]
    375c:	bl	0 <__asan_internal_memset>
    3760:	ldr	x0, [sp, #744]
    3764:	cbz	x0, 376c <__asan_backtrace_dwarf_add+0x704>
    3768:	str	x19, [x0]
    376c:	ldr	w0, [x27, #8]
    3770:	add	x2, x27, #0x20
    3774:	cbnz	w0, 38a0 <__asan_backtrace_dwarf_add+0x838>
    3778:	ldr	x0, [x27, #32]
    377c:	cbz	x0, 3790 <__asan_backtrace_dwarf_add+0x728>
    3780:	mov	x1, x0
    3784:	ldr	x0, [x0]
    3788:	cbnz	x0, 3780 <__asan_backtrace_dwarf_add+0x718>
    378c:	mov	x2, x1
    3790:	str	x19, [x2]
    3794:	ldr	x2, [sp, #736]
    3798:	adrp	x1, 0 <abbrev_compare>
    379c:	add	x1, x1, #0x0
    37a0:	mov	w0, #0x1                   	// #1
    37a4:	ldp	x29, x30, [sp, #48]
    37a8:	str	x1, [x2]
    37ac:	ldp	x19, x20, [sp, #64]
    37b0:	ldp	x21, x22, [sp, #80]
    37b4:	ldp	x23, x24, [sp, #96]
    37b8:	ldp	x25, x26, [sp, #112]
    37bc:	ldp	x27, x28, [sp, #128]
    37c0:	add	sp, sp, #0x2a0
    37c4:	ret
    37c8:	ldr	x0, [sp, #248]
    37cc:	lsl	x1, x24, #3
    37d0:	ldr	x2, [sp, #720]
    37d4:	ldr	x3, [sp, #728]
    37d8:	bl	0 <__asan_backtrace_alloc>
    37dc:	mov	x23, x0
    37e0:	cbz	x0, 3420 <__asan_backtrace_dwarf_add+0x3b8>
    37e4:	mov	x0, x25
    37e8:	mov	x24, #0x0                   	// #0
    37ec:	mov	x25, x24
    37f0:	mov	x24, x22
    37f4:	mov	x22, x20
    37f8:	mov	x20, x0
    37fc:	str	x19, [sp, #216]
    3800:	mov	x19, x23
    3804:	b	3814 <__asan_backtrace_dwarf_add+0x7ac>
    3808:	add	x25, x25, #0x1
    380c:	stp	w26, w0, [x19]
    3810:	add	x19, x19, #0x8
    3814:	mov	x0, x20
    3818:	bl	8b0 <read_uleb128>
    381c:	mov	x26, x0
    3820:	mov	x0, x20
    3824:	bl	8b0 <read_uleb128>
    3828:	cbnz	x26, 3808 <__asan_backtrace_dwarf_add+0x7a0>
    382c:	mov	x0, x20
    3830:	mov	x20, x22
    3834:	mov	x22, x24
    3838:	mov	x24, x25
    383c:	mov	x25, x0
    3840:	ldr	x19, [sp, #216]
    3844:	b	3400 <__asan_backtrace_dwarf_add+0x398>
    3848:	mov	x0, x22
    384c:	bl	710 <read_uint64>
    3850:	mov	w1, #0x1                   	// #1
    3854:	mov	x27, x0
    3858:	str	w1, [sp, #184]
    385c:	b	317c <__asan_backtrace_dwarf_add+0x114>
    3860:	ldp	x5, x4, [sp, #360]
    3864:	mov	x3, x26
    3868:	ldr	x1, [sp, #192]
    386c:	mov	x2, x23
    3870:	mov	x0, x27
    3874:	add	x4, x4, x5
    3878:	stp	xzr, x4, [sp, #360]
    387c:	bl	0 <__asan_backtrace_vector_release>
    3880:	b	34bc <__asan_backtrace_dwarf_add+0x454>
    3884:	ldxr	x0, [x1]
    3888:	cbnz	x0, 3894 <__asan_backtrace_dwarf_add+0x82c>
    388c:	stlxr	w3, x19, [x1]
    3890:	cbnz	w3, 3884 <__asan_backtrace_dwarf_add+0x81c>
    3894:	dmb	ish
    3898:	cmp	x0, #0x0
    389c:	b.eq	3794 <__asan_backtrace_dwarf_add+0x72c>  // b.none
    38a0:	mov	x1, x2
    38a4:	b	38ac <__asan_backtrace_dwarf_add+0x844>
    38a8:	mov	x1, x0
    38ac:	ldar	x0, [x1]
    38b0:	cbnz	x0, 38a8 <__asan_backtrace_dwarf_add+0x840>
    38b4:	b	3884 <__asan_backtrace_dwarf_add+0x81c>
    38b8:	mov	x27, x24
    38bc:	b	342c <__asan_backtrace_dwarf_add+0x3c4>
    38c0:	ldr	w0, [sp, #472]
    38c4:	cbz	w0, 3664 <__asan_backtrace_dwarf_add+0x5fc>
    38c8:	b	34b4 <__asan_backtrace_dwarf_add+0x44c>

elf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <elf_nodebug>:
       0:	stp	x29, x30, [sp, #-16]!
       4:	mov	x0, x4
       8:	mov	w2, #0xffffffff            	// #-1
       c:	mov	x29, sp
      10:	adrp	x1, 0 <elf_nodebug>
      14:	add	x1, x1, #0x0
      18:	blr	x3
      1c:	mov	w0, #0x0                   	// #0
      20:	ldp	x29, x30, [sp], #16
      24:	ret

0000000000000028 <elf_nosyms>:
      28:	mov	x0, x4
      2c:	mov	x16, x3
      30:	adrp	x1, 0 <elf_nodebug>
      34:	mov	w2, #0xffffffff            	// #-1
      38:	add	x1, x1, #0x0
      3c:	br	x16

0000000000000040 <elf_symbol_compare>:
      40:	ldr	x2, [x0, #8]
      44:	mov	w3, #0xffffffff            	// #-1
      48:	ldr	x1, [x1, #8]
      4c:	cmp	x2, x1
      50:	cset	w0, hi  // hi = pmore
      54:	csel	w0, w0, w3, cs  // cs = hs, nlast
      58:	ret
      5c:	nop

0000000000000060 <elf_zlib_inflate_table>:
      60:	stp	x29, x30, [sp, #-176]!
      64:	mov	x29, sp
      68:	stp	x19, x20, [sp, #16]
      6c:	add	x19, sp, #0x50
      70:	mov	x20, x0
      74:	mov	x0, x19
      78:	stp	x21, x22, [sp, #32]
      7c:	mov	x21, x1
      80:	mov	x22, x3
      84:	mov	w1, #0x0                   	// #0
      88:	stp	x23, x24, [sp, #48]
      8c:	add	x23, x2, #0x1, lsl #12
      90:	mov	x2, #0x20                  	// #32
      94:	bl	0 <__asan_internal_memset>
      98:	add	x0, sp, #0x90
      9c:	add	x2, sp, #0x70
      a0:	mov	x5, #0x0                   	// #0
      a4:	b	c4 <elf_zlib_inflate_table+0x64>
      a8:	add	w6, w6, #0x1
      ac:	strh	w8, [x2, x7]
      b0:	strh	w8, [x0, x7]
      b4:	add	x5, x5, #0x1
      b8:	strh	w6, [x19, x4, lsl #1]
      bc:	cmp	x21, x5
      c0:	b.eq	10c <elf_zlib_inflate_table+0xac>  // b.none
      c4:	ldrb	w4, [x20, x5]
      c8:	and	w8, w5, #0xffff
      cc:	cmp	w4, #0xf
      d0:	b.hi	200 <elf_zlib_inflate_table+0x1a0>  // b.pmore
      d4:	sbfiz	x7, x4, #1, #32
      d8:	ldrh	w6, [x19, x7]
      dc:	cbz	w6, a8 <elf_zlib_inflate_table+0x48>
      e0:	ldrh	w1, [x0, x7]
      e4:	strh	w8, [x23, x1, lsl #1]
      e8:	ldrb	w4, [x20, x5]
      ec:	add	x5, x5, #0x1
      f0:	cmp	x21, x5
      f4:	lsl	x1, x4, #1
      f8:	ldrh	w6, [x19, x1]
      fc:	strh	w8, [x0, x1]
     100:	add	w6, w6, #0x1
     104:	strh	w6, [x19, x4, lsl #1]
     108:	b.ne	c4 <elf_zlib_inflate_table+0x64>  // b.any
     10c:	mov	w1, #0x0                   	// #0
     110:	mov	x0, x22
     114:	mov	x2, #0x800                 	// #2048
     118:	bl	0 <__asan_internal_memset>
     11c:	add	x11, sp, #0x70
     120:	mov	x4, #0x0                   	// #0
     124:	mov	w1, #0x0                   	// #0
     128:	mov	w9, #0x1                   	// #1
     12c:	lsl	x2, x4, #1
     130:	add	x0, x19, x2
     134:	ldrh	w0, [x0, #2]
     138:	cbnz	w0, 218 <elf_zlib_inflate_table+0x1b8>
     13c:	add	x4, x4, #0x1
     140:	cmp	x4, #0x8
     144:	b.ne	12c <elf_zlib_inflate_table+0xcc>  // b.any
     148:	mov	x7, x19
     14c:	add	x10, sp, #0x40
     150:	mov	x2, #0x9                   	// #9
     154:	mov	w8, #0x1                   	// #1
     158:	b	16c <elf_zlib_inflate_table+0x10c>
     15c:	add	x2, x2, #0x1
     160:	add	x7, x7, #0x2
     164:	cmp	x2, #0x10
     168:	b.eq	2d8 <elf_zlib_inflate_table+0x278>  // b.none
     16c:	ldrh	w6, [x7, #18]
     170:	cbz	w6, 15c <elf_zlib_inflate_table+0xfc>
     174:	add	x0, x10, x2, lsl #1
     178:	sub	w9, w2, #0x1
     17c:	mov	w5, #0x0                   	// #0
     180:	mov	x3, #0x0                   	// #0
     184:	sturh	w1, [x0, #-18]
     188:	b	19c <elf_zlib_inflate_table+0x13c>
     18c:	add	w3, w5, #0x1
     190:	mov	x5, x3
     194:	cmp	x2, w3, uxtw
     198:	b.ls	1f8 <elf_zlib_inflate_table+0x198>  // b.plast
     19c:	lsr	w0, w6, w5
     1a0:	tbz	w0, #0, 18c <elf_zlib_inflate_table+0x12c>
     1a4:	sub	w0, w9, w5
     1a8:	subs	x3, x2, x3
     1ac:	lsl	w0, w8, w0
     1b0:	b.eq	1e0 <elf_zlib_inflate_table+0x180>  // b.none
     1b4:	tst	w1, w0
     1b8:	b.eq	27c <elf_zlib_inflate_table+0x21c>  // b.none
     1bc:	mov	w4, #0x0                   	// #0
     1c0:	b	1cc <elf_zlib_inflate_table+0x16c>
     1c4:	tst	w1, w0
     1c8:	b.eq	27c <elf_zlib_inflate_table+0x21c>  // b.none
     1cc:	add	w4, w4, #0x1
     1d0:	bic	w1, w1, w0
     1d4:	lsr	w0, w0, #1
     1d8:	cmp	x3, w4, uxtw
     1dc:	b.hi	1c4 <elf_zlib_inflate_table+0x164>  // b.pmore
     1e0:	lsl	w0, w8, w5
     1e4:	bic	w6, w6, w0
     1e8:	add	w3, w5, #0x1
     1ec:	mov	x5, x3
     1f0:	cmp	x2, w3, uxtw
     1f4:	b.hi	19c <elf_zlib_inflate_table+0x13c>  // b.pmore
     1f8:	cbz	w6, 15c <elf_zlib_inflate_table+0xfc>
     1fc:	nop
     200:	mov	w0, #0x0                   	// #0
     204:	ldp	x19, x20, [sp, #16]
     208:	ldp	x21, x22, [sp, #32]
     20c:	ldp	x23, x24, [sp, #48]
     210:	ldp	x29, x30, [sp], #176
     214:	ret
     218:	add	w3, w4, #0x1
     21c:	lsl	w3, w9, w3
     220:	cmp	w3, w0
     224:	b.cc	200 <elf_zlib_inflate_table+0x1a0>  // b.lo, b.ul, b.last
     228:	add	x2, x2, x11
     22c:	and	x5, x0, #0xffff
     230:	ldrh	w7, [x2, #2]
     234:	tst	w7, #0xfe00
     238:	b.ne	200 <elf_zlib_inflate_table+0x1a0>  // b.any
     23c:	sxtw	x3, w3
     240:	ubfiz	w12, w4, #9, #7
     244:	lsl	w8, w9, w4
     248:	mov	x10, #0x0                   	// #0
     24c:	cmp	w1, #0xff
     250:	orr	w6, w12, w7
     254:	mov	w0, w1
     258:	b.ls	270 <elf_zlib_inflate_table+0x210>  // b.plast
     25c:	b	28c <elf_zlib_inflate_table+0x22c>
     260:	strh	w6, [x22, x0, lsl #1]
     264:	add	x0, x0, x3
     268:	cmp	x0, #0xff
     26c:	b.hi	28c <elf_zlib_inflate_table+0x22c>  // b.pmore
     270:	ldrh	w2, [x22, x0, lsl #1]
     274:	cbz	w2, 260 <elf_zlib_inflate_table+0x200>
     278:	b	200 <elf_zlib_inflate_table+0x1a0>
     27c:	add	w1, w1, w0
     280:	lsl	w0, w8, w5
     284:	bic	w6, w6, w0
     288:	b	1e8 <elf_zlib_inflate_table+0x188>
     28c:	add	x10, x10, #0x1
     290:	cmp	x10, x5
     294:	b.cs	2a0 <elf_zlib_inflate_table+0x240>  // b.hs, b.nlast
     298:	ubfiz	x7, x7, #1, #16
     29c:	ldrh	w7, [x23, x7]
     2a0:	mov	w0, w8
     2a4:	tst	w8, w1
     2a8:	b.eq	30c <elf_zlib_inflate_table+0x2ac>  // b.none
     2ac:	nop
     2b0:	lsr	w0, w0, #1
     2b4:	tst	w0, w1
     2b8:	b.ne	2b0 <elf_zlib_inflate_table+0x250>  // b.any
     2bc:	cbnz	w0, 30c <elf_zlib_inflate_table+0x2ac>
     2c0:	mov	w1, #0x0                   	// #0
     2c4:	cmp	x10, x5
     2c8:	b.eq	13c <elf_zlib_inflate_table+0xdc>  // b.none
     2cc:	tst	w7, #0xfe00
     2d0:	b.eq	24c <elf_zlib_inflate_table+0x1ec>  // b.none
     2d4:	b	200 <elf_zlib_inflate_table+0x1a0>
     2d8:	add	x18, sp, #0x70
     2dc:	add	x17, sp, #0x40
     2e0:	mov	x5, #0x7                   	// #7
     2e4:	mov	x10, #0x0                   	// #0
     2e8:	mov	w8, #0x1                   	// #1
     2ec:	lsl	x0, x5, #1
     2f0:	add	x1, x19, x0
     2f4:	ldrh	w7, [x1, #16]
     2f8:	cbnz	w7, 31c <elf_zlib_inflate_table+0x2bc>
     2fc:	subs	x5, x5, #0x1
     300:	b.ne	2ec <elf_zlib_inflate_table+0x28c>  // b.any
     304:	mov	w0, #0x1                   	// #1
     308:	b	204 <elf_zlib_inflate_table+0x1a4>
     30c:	sub	w2, w0, #0x1
     310:	and	w1, w2, w1
     314:	add	w1, w0, w1
     318:	b	2c4 <elf_zlib_inflate_table+0x264>
     31c:	add	x1, x0, x18
     320:	add	x0, x0, x17
     324:	ubfiz	w12, w5, #9, #7
     328:	lsl	w4, w8, w5
     32c:	add	w11, w12, #0x1, lsl #12
     330:	add	w9, w5, #0x7
     334:	ldrh	w14, [x1, #16]
     338:	sxtw	x21, w4
     33c:	ldurh	w6, [x0, #-2]
     340:	and	x7, x7, #0xffff
     344:	and	w11, w11, #0xffff
     348:	mov	w4, w4
     34c:	mov	w20, w5
     350:	lsl	w9, w8, w9
     354:	mov	x16, #0x0                   	// #0
     358:	mov	x13, #0x0                   	// #0
     35c:	mov	x24, #0x100                 	// #256
     360:	mov	x15, #0x0                   	// #0
     364:	mov	w2, w16
     368:	cmp	x24, w6, uxtb
     36c:	and	x1, x6, #0xff
     370:	b.eq	3a4 <elf_zlib_inflate_table+0x344>  // b.none
     374:	lsl	x2, x1, #1
     378:	ldrh	w0, [x22, x2]
     37c:	cbnz	w0, 420 <elf_zlib_inflate_table+0x3c0>
     380:	tst	x10, #0xfffffffffffffe00
     384:	b.ne	200 <elf_zlib_inflate_table+0x1a0>  // b.any
     388:	add	w0, w11, w10
     38c:	mov	x13, x10
     390:	mov	x24, x1
     394:	add	x10, x10, x21
     398:	mov	x16, x5
     39c:	strh	w0, [x22, x2]
     3a0:	mov	w2, w20
     3a4:	lsr	w0, w6, #8
     3a8:	add	x1, x22, x13, lsl #1
     3ac:	lsl	w2, w8, w2
     3b0:	add	x1, x1, #0x200
     3b4:	cmp	x2, x0
     3b8:	orr	w30, w12, w14
     3bc:	b.hi	3d4 <elf_zlib_inflate_table+0x374>  // b.pmore
     3c0:	b	3e0 <elf_zlib_inflate_table+0x380>
     3c4:	strh	w30, [x1, x0, lsl #1]
     3c8:	add	x0, x0, x4
     3cc:	cmp	x2, x0
     3d0:	b.ls	3e0 <elf_zlib_inflate_table+0x380>  // b.plast
     3d4:	ldrh	w3, [x1, x0, lsl #1]
     3d8:	cbz	w3, 3c4 <elf_zlib_inflate_table+0x364>
     3dc:	b	200 <elf_zlib_inflate_table+0x1a0>
     3e0:	add	x15, x15, #0x1
     3e4:	cmp	x7, x15
     3e8:	b.ls	3f4 <elf_zlib_inflate_table+0x394>  // b.plast
     3ec:	ubfiz	x14, x14, #1, #16
     3f0:	ldrh	w14, [x23, x14]
     3f4:	mov	w0, w9
     3f8:	tst	w9, w6
     3fc:	b.eq	440 <elf_zlib_inflate_table+0x3e0>  // b.none
     400:	lsr	w0, w0, #1
     404:	tst	w0, w6
     408:	b.ne	400 <elf_zlib_inflate_table+0x3a0>  // b.any
     40c:	cbnz	w0, 440 <elf_zlib_inflate_table+0x3e0>
     410:	mov	w6, #0x0                   	// #0
     414:	cmp	x7, x15
     418:	b.ne	364 <elf_zlib_inflate_table+0x304>  // b.any
     41c:	b	2fc <elf_zlib_inflate_table+0x29c>
     420:	tbz	w0, #12, 200 <elf_zlib_inflate_table+0x1a0>
     424:	ubfx	x16, x0, #9, #3
     428:	and	x13, x0, #0x1ff
     42c:	cmp	x16, x5
     430:	mov	x2, x16
     434:	b.cc	200 <elf_zlib_inflate_table+0x1a0>  // b.lo, b.ul, b.last
     438:	mov	x24, x1
     43c:	b	3a4 <elf_zlib_inflate_table+0x344>
     440:	sub	w1, w0, #0x1
     444:	and	w6, w1, w6
     448:	add	w6, w0, w6
     44c:	b	414 <elf_zlib_inflate_table+0x3b4>

0000000000000450 <elf_syminfo>:
     450:	mov	x10, x0
     454:	mov	x11, x2
     458:	mov	x0, x4
     45c:	ldr	w2, [x10, #8]
     460:	cbnz	w2, 4e8 <elf_syminfo+0x98>
     464:	ldr	x2, [x10, #48]
     468:	cbz	x2, 4cc <elf_syminfo+0x7c>
     46c:	nop
     470:	ldp	x9, x8, [x2, #8]
     474:	mov	x7, #0x0                   	// #0
     478:	add	x3, x8, x7
     47c:	cmp	x8, x7
     480:	and	x5, x3, #0xfffffffffffffffe
     484:	b.ls	4c4 <elf_syminfo+0x74>  // b.plast
     488:	lsr	x3, x3, #1
     48c:	add	x5, x5, x3
     490:	add	x5, x9, x5, lsl #3
     494:	ldr	x6, [x5, #8]
     498:	cmp	x6, x1
     49c:	b.hi	4e0 <elf_syminfo+0x90>  // b.pmore
     4a0:	ldr	x4, [x5, #16]
     4a4:	add	x7, x3, #0x1
     4a8:	add	x3, x6, x4
     4ac:	cmp	x3, x1
     4b0:	b.ls	478 <elf_syminfo+0x28>  // b.plast
     4b4:	ldr	x2, [x5]
     4b8:	mov	x3, x6
     4bc:	mov	x16, x11
     4c0:	br	x16
     4c4:	ldr	x2, [x2]
     4c8:	cbnz	x2, 470 <elf_syminfo+0x20>
     4cc:	mov	x16, x11
     4d0:	mov	x4, #0x0                   	// #0
     4d4:	mov	x3, #0x0                   	// #0
     4d8:	mov	x2, #0x0                   	// #0
     4dc:	br	x16
     4e0:	mov	x8, x3
     4e4:	b	478 <elf_syminfo+0x28>
     4e8:	add	x10, x10, #0x30
     4ec:	nop
     4f0:	ldar	x10, [x10]
     4f4:	cbz	x10, 4cc <elf_syminfo+0x7c>
     4f8:	ldp	x9, x8, [x10, #8]
     4fc:	mov	x7, #0x0                   	// #0
     500:	add	x3, x8, x7
     504:	cmp	x8, x7
     508:	and	x5, x3, #0xfffffffffffffffe
     50c:	b.ls	4f0 <elf_syminfo+0xa0>  // b.plast
     510:	lsr	x3, x3, #1
     514:	add	x5, x5, x3
     518:	add	x5, x9, x5, lsl #3
     51c:	ldr	x6, [x5, #8]
     520:	cmp	x6, x1
     524:	b.hi	54c <elf_syminfo+0xfc>  // b.pmore
     528:	ldr	x4, [x5, #16]
     52c:	add	x7, x3, #0x1
     530:	add	x3, x6, x4
     534:	cmp	x3, x1
     538:	b.ls	500 <elf_syminfo+0xb0>  // b.plast
     53c:	ldr	x2, [x5]
     540:	mov	x3, x6
     544:	mov	x16, x11
     548:	br	x16
     54c:	mov	x8, x3
     550:	b	500 <elf_syminfo+0xb0>
     554:	nop

0000000000000558 <elf_try_debugfile>:
     558:	stp	x29, x30, [sp, #-144]!
     55c:	mov	x29, sp
     560:	stp	x27, x28, [sp, #80]
     564:	add	x28, x2, x4
     568:	mov	x27, x5
     56c:	stp	x19, x20, [sp, #16]
     570:	mov	x20, x6
     574:	stp	x21, x22, [sp, #32]
     578:	mov	x22, x2
     57c:	mov	x21, x7
     580:	stp	x23, x24, [sp, #48]
     584:	mov	x23, x0
     588:	mov	x0, x5
     58c:	stp	x25, x26, [sp, #64]
     590:	mov	x25, x4
     594:	stp	x3, x1, [sp, #112]
     598:	bl	0 <__asan_internal_strlen>
     59c:	mov	x24, x0
     5a0:	add	x0, x28, x0
     5a4:	mov	x3, x21
     5a8:	add	x26, x0, #0x1
     5ac:	mov	x2, x20
     5b0:	mov	x1, x26
     5b4:	str	x0, [sp, #104]
     5b8:	mov	x0, x23
     5bc:	bl	0 <__asan_backtrace_alloc>
     5c0:	cbz	x0, 650 <elf_try_debugfile+0xf8>
     5c4:	ldr	x8, [sp, #120]
     5c8:	mov	x19, x0
     5cc:	mov	x2, x22
     5d0:	mov	x1, x8
     5d4:	bl	0 <__asan_internal_memcpy>
     5d8:	ldr	x1, [sp, #112]
     5dc:	mov	x2, x25
     5e0:	add	x0, x19, x22
     5e4:	bl	0 <__asan_internal_memcpy>
     5e8:	mov	x2, x24
     5ec:	mov	x1, x27
     5f0:	add	x0, x19, x28
     5f4:	bl	0 <__asan_internal_memcpy>
     5f8:	ldr	x0, [sp, #104]
     5fc:	add	x3, sp, #0x8c
     600:	mov	x2, x21
     604:	mov	x1, x20
     608:	strb	wzr, [x19, x0]
     60c:	mov	x0, x19
     610:	bl	0 <__asan_backtrace_open>
     614:	mov	w22, w0
     618:	mov	x4, x21
     61c:	mov	x3, x20
     620:	mov	x2, x26
     624:	mov	x1, x19
     628:	mov	x0, x23
     62c:	bl	0 <__asan_backtrace_free>
     630:	mov	w0, w22
     634:	ldp	x19, x20, [sp, #16]
     638:	ldp	x21, x22, [sp, #32]
     63c:	ldp	x23, x24, [sp, #48]
     640:	ldp	x25, x26, [sp, #64]
     644:	ldp	x27, x28, [sp, #80]
     648:	ldp	x29, x30, [sp], #144
     64c:	ret
     650:	mov	w22, #0xffffffff            	// #-1
     654:	b	630 <elf_try_debugfile+0xd8>

0000000000000658 <elf_find_debugfile_by_debuglink>:
     658:	stp	x29, x30, [sp, #-256]!
     65c:	mov	x29, sp
     660:	stp	x19, x20, [sp, #16]
     664:	mov	x20, x0
     668:	mov	x19, x1
     66c:	stp	x21, x22, [sp, #32]
     670:	mov	x21, x3
     674:	mov	x22, x4
     678:	stp	x27, x28, [sp, #80]
     67c:	add	x27, sp, #0x80
     680:	stp	x23, x24, [sp, #48]
     684:	mov	x24, #0x0                   	// #0
     688:	stp	x25, x26, [sp, #64]
     68c:	mov	x25, #0x0                   	// #0
     690:	str	x2, [sp, #104]
     694:	mov	x2, x27
     698:	mov	x1, x19
     69c:	mov	w0, #0x0                   	// #0
     6a0:	bl	0 <__lxstat>
     6a4:	tbnz	w0, #31, 730 <elf_find_debugfile_by_debuglink+0xd8>
     6a8:	ldr	w0, [sp, #144]
     6ac:	and	w0, w0, #0xf000
     6b0:	cmp	w0, #0xa, lsl #12
     6b4:	b.ne	730 <elf_find_debugfile_by_debuglink+0xd8>  // b.any
     6b8:	mov	x28, #0x80                  	// #128
     6bc:	b	6e4 <elf_find_debugfile_by_debuglink+0x8c>
     6c0:	cmp	x1, x0
     6c4:	b.hi	7a4 <elf_find_debugfile_by_debuglink+0x14c>  // b.pmore
     6c8:	mov	x2, x28
     6cc:	mov	x1, x26
     6d0:	mov	x4, x22
     6d4:	mov	x3, x21
     6d8:	mov	x0, x20
     6dc:	lsl	x28, x28, #1
     6e0:	bl	0 <__asan_backtrace_free>
     6e4:	mov	x2, x21
     6e8:	mov	x3, x22
     6ec:	mov	x1, x28
     6f0:	mov	x0, x20
     6f4:	bl	0 <__asan_backtrace_alloc>
     6f8:	mov	x26, x0
     6fc:	mov	x2, x28
     700:	mov	x0, x19
     704:	cbz	x26, 730 <elf_find_debugfile_by_debuglink+0xd8>
     708:	mov	x1, x26
     70c:	bl	0 <readlink>
     710:	sub	x1, x28, #0x1
     714:	tbz	x0, #63, 6c0 <elf_find_debugfile_by_debuglink+0x68>
     718:	mov	x2, x28
     71c:	mov	x1, x26
     720:	mov	x4, x22
     724:	mov	x3, x21
     728:	mov	x0, x20
     72c:	bl	0 <__asan_backtrace_free>
     730:	mov	x0, x19
     734:	mov	w1, #0x2f                  	// #47
     738:	bl	0 <strrchr>
     73c:	cbz	x0, 940 <elf_find_debugfile_by_debuglink+0x2e8>
     740:	add	x0, x0, #0x1
     744:	adrp	x3, 0 <elf_nodebug>
     748:	sub	x27, x0, x19
     74c:	ldr	x5, [sp, #104]
     750:	add	x3, x3, #0x0
     754:	mov	x7, x22
     758:	mov	x6, x21
     75c:	mov	x2, x27
     760:	mov	x1, x19
     764:	mov	x0, x20
     768:	mov	x4, #0x0                   	// #0
     76c:	bl	558 <elf_try_debugfile>
     770:	mov	w23, w0
     774:	tbnz	w0, #31, 884 <elf_find_debugfile_by_debuglink+0x22c>
     778:	cmp	x24, #0x0
     77c:	ccmp	x25, #0x0, #0x4, ne  // ne = any
     780:	b.ne	908 <elf_find_debugfile_by_debuglink+0x2b0>  // b.any
     784:	mov	w0, w23
     788:	ldp	x19, x20, [sp, #16]
     78c:	ldp	x21, x22, [sp, #32]
     790:	ldp	x23, x24, [sp, #48]
     794:	ldp	x25, x26, [sp, #64]
     798:	ldp	x27, x28, [sp, #80]
     79c:	ldp	x29, x30, [sp], #256
     7a0:	ret
     7a4:	strb	wzr, [x26, x0]
     7a8:	ldrb	w0, [x26]
     7ac:	cmp	w0, #0x2f
     7b0:	b.eq	858 <elf_find_debugfile_by_debuglink+0x200>  // b.none
     7b4:	mov	x0, x19
     7b8:	mov	w1, #0x2f                  	// #47
     7bc:	bl	0 <strrchr>
     7c0:	cbz	x0, 858 <elf_find_debugfile_by_debuglink+0x200>
     7c4:	add	x23, x0, #0x1
     7c8:	mov	x0, x26
     7cc:	sub	x23, x23, x19
     7d0:	bl	0 <__asan_internal_strlen>
     7d4:	add	x1, x23, #0x1
     7d8:	mov	x3, x22
     7dc:	add	x0, x1, x0
     7e0:	mov	x2, x21
     7e4:	mov	x1, x0
     7e8:	str	x0, [sp, #112]
     7ec:	mov	x0, x20
     7f0:	bl	0 <__asan_backtrace_alloc>
     7f4:	str	x0, [sp, #120]
     7f8:	cbz	x0, 950 <elf_find_debugfile_by_debuglink+0x2f8>
     7fc:	mov	x2, x23
     800:	mov	x1, x19
     804:	bl	0 <__asan_internal_memcpy>
     808:	ldr	x3, [sp, #120]
     80c:	mov	x0, x26
     810:	add	x23, x3, x23
     814:	bl	0 <__asan_internal_strlen>
     818:	mov	x2, x0
     81c:	mov	x1, x26
     820:	mov	x0, x23
     824:	bl	0 <__asan_internal_memcpy>
     828:	mov	x0, x26
     82c:	bl	0 <__asan_internal_strlen>
     830:	mov	x7, x0
     834:	mov	x2, x28
     838:	mov	x1, x26
     83c:	ldp	x28, x3, [sp, #112]
     840:	strb	wzr, [x23, x7]
     844:	mov	x4, x22
     848:	mov	x0, x20
     84c:	mov	x26, x3
     850:	mov	x3, x21
     854:	bl	0 <__asan_backtrace_free>
     858:	cbz	x24, 874 <elf_find_debugfile_by_debuglink+0x21c>
     85c:	mov	x2, x25
     860:	mov	x1, x24
     864:	mov	x4, x22
     868:	mov	x3, x21
     86c:	mov	x0, x20
     870:	bl	0 <__asan_backtrace_free>
     874:	mov	x24, x26
     878:	mov	x25, x28
     87c:	mov	x19, x26
     880:	b	694 <elf_find_debugfile_by_debuglink+0x3c>
     884:	adrp	x23, 0 <elf_nodebug>
     888:	add	x23, x23, #0x0
     88c:	mov	x0, x23
     890:	bl	0 <__asan_internal_strlen>
     894:	ldr	x5, [sp, #104]
     898:	mov	x4, x0
     89c:	mov	x3, x23
     8a0:	mov	x7, x22
     8a4:	mov	x6, x21
     8a8:	mov	x2, x27
     8ac:	mov	x1, x19
     8b0:	mov	x0, x20
     8b4:	bl	558 <elf_try_debugfile>
     8b8:	mov	w23, w0
     8bc:	tbz	w0, #31, 778 <elf_find_debugfile_by_debuglink+0x120>
     8c0:	adrp	x23, 0 <elf_nodebug>
     8c4:	add	x23, x23, #0x0
     8c8:	mov	x0, x23
     8cc:	bl	0 <__asan_internal_strlen>
     8d0:	ldr	x5, [sp, #104]
     8d4:	mov	x2, x0
     8d8:	mov	x1, x23
     8dc:	mov	x7, x22
     8e0:	mov	x6, x21
     8e4:	mov	x4, x27
     8e8:	mov	x3, x19
     8ec:	mov	x0, x20
     8f0:	bl	558 <elf_try_debugfile>
     8f4:	cmp	w0, #0x0
     8f8:	csinv	w23, w0, wzr, ge  // ge = tcont
     8fc:	cmp	x24, #0x0
     900:	ccmp	x25, #0x0, #0x4, ne  // ne = any
     904:	b.eq	784 <elf_find_debugfile_by_debuglink+0x12c>  // b.none
     908:	mov	x4, x22
     90c:	mov	x3, x21
     910:	mov	x2, x25
     914:	mov	x1, x24
     918:	mov	x0, x20
     91c:	bl	0 <__asan_backtrace_free>
     920:	mov	w0, w23
     924:	ldp	x19, x20, [sp, #16]
     928:	ldp	x21, x22, [sp, #32]
     92c:	ldp	x23, x24, [sp, #48]
     930:	ldp	x25, x26, [sp, #64]
     934:	ldp	x27, x28, [sp, #80]
     938:	ldp	x29, x30, [sp], #256
     93c:	ret
     940:	adrp	x3, 0 <elf_nodebug>
     944:	mov	x27, #0x0                   	// #0
     948:	add	x19, x3, #0x0
     94c:	b	74c <elf_find_debugfile_by_debuglink+0xf4>
     950:	mov	w23, #0xffffffff            	// #-1
     954:	b	778 <elf_find_debugfile_by_debuglink+0x120>

0000000000000958 <elf_zlib_inflate_and_verify>:
     958:	stp	x29, x30, [sp, #-224]!
     95c:	cmp	x1, #0x4
     960:	mov	x29, sp
     964:	stp	x19, x20, [sp, #16]
     968:	mov	x19, x3
     96c:	stp	x21, x22, [sp, #32]
     970:	add	x21, x0, x1
     974:	mov	x22, x1
     978:	stp	x23, x24, [sp, #48]
     97c:	mov	x23, x0
     980:	add	x0, x3, x4
     984:	str	x0, [sp, #104]
     988:	mov	x24, x4
     98c:	b.le	1448 <elf_zlib_inflate_and_verify+0xaf0>
     990:	adrp	x20, 0 <elf_nodebug>
     994:	mov	x13, x2
     998:	add	x0, x20, #0x0
     99c:	mov	x5, x23
     9a0:	mov	x20, x3
     9a4:	str	x0, [sp, #112]
     9a8:	add	x0, x0, #0x200
     9ac:	str	x0, [sp, #120]
     9b0:	ldrb	w0, [x5]
     9b4:	and	w1, w0, #0xf
     9b8:	cmp	w1, #0x8
     9bc:	b.ne	e44 <elf_zlib_inflate_and_verify+0x4ec>  // b.any
     9c0:	cmp	w0, #0x7f
     9c4:	b.hi	e44 <elf_zlib_inflate_and_verify+0x4ec>  // b.pmore
     9c8:	ldrb	w1, [x5, #1]
     9cc:	ldrh	w0, [x5]
     9d0:	rev16	w0, w0
     9d4:	tbnz	w1, #5, e44 <elf_zlib_inflate_and_verify+0x4ec>
     9d8:	mov	x1, #0x4211                	// #16913
     9dc:	and	x0, x0, #0xffff
     9e0:	movk	x1, #0x2108, lsl #16
     9e4:	movk	x1, #0x1084, lsl #32
     9e8:	movk	x1, #0x842, lsl #48
     9ec:	umulh	x2, x0, x1
     9f0:	sub	x1, x0, x2
     9f4:	add	x1, x2, x1, lsr #1
     9f8:	lsr	x1, x1, #4
     9fc:	lsl	x2, x1, #5
     a00:	sub	x1, x2, x1
     a04:	cmp	x0, x1
     a08:	b.ne	e44 <elf_zlib_inflate_and_verify+0x4ec>  // b.any
     a0c:	add	x5, x5, #0x2
     a10:	ands	x10, x5, #0x3
     a14:	b.eq	139c <elf_zlib_inflate_and_verify+0xa44>  // b.none
     a18:	mov	x10, #0x0                   	// #0
     a1c:	mov	w3, #0x0                   	// #0
     a20:	ldrb	w0, [x5], #1
     a24:	lsl	x0, x0, x3
     a28:	tst	x5, #0x3
     a2c:	orr	x10, x10, x0
     a30:	add	w3, w3, #0x8
     a34:	b.ne	a20 <elf_zlib_inflate_and_verify+0xc8>  // b.any
     a38:	cmp	w3, #0xe
     a3c:	b.hi	a60 <elf_zlib_inflate_and_verify+0x108>  // b.pmore
     a40:	sub	x0, x21, x5
     a44:	cmp	x0, #0x3
     a48:	b.le	e44 <elf_zlib_inflate_and_verify+0x4ec>
     a4c:	ldr	w0, [x5], #4
     a50:	lsl	x0, x0, x3
     a54:	add	w3, w3, #0x20
     a58:	prfm	pldl1strm, [x5]
     a5c:	orr	x10, x10, x0
     a60:	ubfx	w0, w10, #1, #2
     a64:	sub	w7, w3, #0x3
     a68:	cmp	w0, #0x3
     a6c:	b.eq	e44 <elf_zlib_inflate_and_verify+0x4ec>  // b.none
     a70:	cbz	w0, ed0 <elf_zlib_inflate_and_verify+0x578>
     a74:	stp	x25, x26, [sp, #64]
     a78:	cmp	w0, #0x1
     a7c:	lsr	x6, x10, #3
     a80:	stp	x27, x28, [sp, #80]
     a84:	b.eq	105c <elf_zlib_inflate_and_verify+0x704>  // b.none
     a88:	cmp	w7, #0xe
     a8c:	b.hi	ab0 <elf_zlib_inflate_and_verify+0x158>  // b.pmore
     a90:	sub	x0, x21, x5
     a94:	cmp	x0, #0x3
     a98:	b.le	e5c <elf_zlib_inflate_and_verify+0x504>
     a9c:	ldr	w0, [x5], #4
     aa0:	lsl	x0, x0, x7
     aa4:	add	w7, w3, #0x1d
     aa8:	prfm	pldl1strm, [x5]
     aac:	orr	x6, x6, x0
     ab0:	and	w25, w6, #0x1f
     ab4:	ubfx	w26, w6, #5, #5
     ab8:	add	w25, w25, #0x101
     abc:	sub	w3, w7, #0xe
     ac0:	str	w3, [sp, #128]
     ac4:	add	w26, w26, #0x1
     ac8:	stp	x10, x5, [sp, #136]
     acc:	cmp	w25, #0x11e
     ad0:	ubfx	w27, w6, #10, #4
     ad4:	str	x13, [sp, #152]
     ad8:	ccmp	w26, #0x1e, #0x2, ls  // ls = plast
     adc:	str	w7, [sp, #168]
     ae0:	add	w27, w27, #0x4
     ae4:	lsr	x28, x6, #14
     ae8:	b.hi	e5c <elf_zlib_inflate_and_verify+0x504>  // b.pmore
     aec:	add	x14, sp, #0xc8
     af0:	mov	x2, #0x13                  	// #19
     af4:	mov	x0, x14
     af8:	mov	w1, #0x0                   	// #0
     afc:	str	x14, [sp, #160]
     b00:	bl	0 <__asan_internal_memset>
     b04:	ldr	w3, [sp, #128]
     b08:	ldp	x10, x5, [sp, #136]
     b0c:	cmp	w3, #0xe
     b10:	ldp	x13, x14, [sp, #152]
     b14:	b.hi	b3c <elf_zlib_inflate_and_verify+0x1e4>  // b.pmore
     b18:	sub	x0, x21, x5
     b1c:	cmp	x0, #0x3
     b20:	b.le	e5c <elf_zlib_inflate_and_verify+0x504>
     b24:	ldr	w0, [x5], #4
     b28:	ldr	w7, [sp, #168]
     b2c:	lsl	x0, x0, x3
     b30:	add	w3, w7, #0x12
     b34:	prfm	pldl1strm, [x5]
     b38:	orr	x28, x28, x0
     b3c:	and	w0, w28, #0x7
     b40:	strb	w0, [sp, #216]
     b44:	ubfx	w0, w28, #3, #3
     b48:	strb	w0, [sp, #217]
     b4c:	ubfx	w0, w28, #6, #3
     b50:	strb	w0, [sp, #218]
     b54:	ubfx	w0, w28, #9, #3
     b58:	strb	w0, [sp, #200]
     b5c:	sub	w7, w3, #0xc
     b60:	cmp	w27, #0x4
     b64:	lsr	x6, x28, #12
     b68:	b.eq	d18 <elf_zlib_inflate_and_verify+0x3c0>  // b.none
     b6c:	and	w6, w6, #0x7
     b70:	strb	w6, [sp, #208]
     b74:	cmp	w27, #0x5
     b78:	lsr	x6, x28, #15
     b7c:	sub	w7, w3, #0xf
     b80:	b.eq	d18 <elf_zlib_inflate_and_verify+0x3c0>  // b.none
     b84:	cmp	w7, #0xe
     b88:	b.hi	bac <elf_zlib_inflate_and_verify+0x254>  // b.pmore
     b8c:	sub	x0, x21, x5
     b90:	cmp	x0, #0x3
     b94:	b.le	e5c <elf_zlib_inflate_and_verify+0x504>
     b98:	ldr	w0, [x5], #4
     b9c:	lsl	x0, x0, x7
     ba0:	add	w7, w3, #0x11
     ba4:	prfm	pldl1strm, [x5]
     ba8:	orr	x6, x6, x0
     bac:	and	w0, w6, #0x7
     bb0:	strb	w0, [sp, #207]
     bb4:	cmp	w27, #0x6
     bb8:	lsr	x0, x6, #3
     bbc:	b.eq	13bc <elf_zlib_inflate_and_verify+0xa64>  // b.none
     bc0:	and	w0, w0, #0x7
     bc4:	strb	w0, [sp, #209]
     bc8:	cmp	w27, #0x7
     bcc:	lsr	x0, x6, #6
     bd0:	b.eq	13d0 <elf_zlib_inflate_and_verify+0xa78>  // b.none
     bd4:	and	w0, w0, #0x7
     bd8:	strb	w0, [sp, #206]
     bdc:	cmp	w27, #0x8
     be0:	lsr	x0, x6, #9
     be4:	b.eq	13b0 <elf_zlib_inflate_and_verify+0xa58>  // b.none
     be8:	and	w0, w0, #0x7
     bec:	strb	w0, [sp, #210]
     bf0:	cmp	w27, #0x9
     bf4:	lsr	x0, x6, #12
     bf8:	b.eq	13a4 <elf_zlib_inflate_and_verify+0xa4c>  // b.none
     bfc:	and	w0, w0, #0x7
     c00:	strb	w0, [sp, #205]
     c04:	lsr	x6, x6, #15
     c08:	cmp	w27, #0xa
     c0c:	sub	w0, w7, #0xf
     c10:	b.eq	16e8 <elf_zlib_inflate_and_verify+0xd90>  // b.none
     c14:	cmp	w0, #0xe
     c18:	b.hi	c3c <elf_zlib_inflate_and_verify+0x2e4>  // b.pmore
     c1c:	sub	x1, x21, x5
     c20:	cmp	x1, #0x3
     c24:	b.le	e5c <elf_zlib_inflate_and_verify+0x504>
     c28:	ldr	w1, [x5], #4
     c2c:	lsl	x1, x1, x0
     c30:	add	w0, w7, #0x11
     c34:	prfm	pldl1strm, [x5]
     c38:	orr	x6, x6, x1
     c3c:	and	w1, w6, #0x7
     c40:	strb	w1, [sp, #211]
     c44:	cmp	w27, #0xb
     c48:	lsr	x1, x6, #3
     c4c:	b.eq	16f0 <elf_zlib_inflate_and_verify+0xd98>  // b.none
     c50:	and	w1, w1, #0x7
     c54:	strb	w1, [sp, #204]
     c58:	cmp	w27, #0xc
     c5c:	lsr	x1, x6, #6
     c60:	b.eq	1710 <elf_zlib_inflate_and_verify+0xdb8>  // b.none
     c64:	and	w1, w1, #0x7
     c68:	strb	w1, [sp, #212]
     c6c:	cmp	w27, #0xd
     c70:	lsr	x1, x6, #9
     c74:	b.eq	171c <elf_zlib_inflate_and_verify+0xdc4>  // b.none
     c78:	and	w1, w1, #0x7
     c7c:	strb	w1, [sp, #203]
     c80:	cmp	w27, #0xe
     c84:	lsr	x1, x6, #12
     c88:	b.eq	1730 <elf_zlib_inflate_and_verify+0xdd8>  // b.none
     c8c:	and	w1, w1, #0x7
     c90:	strb	w1, [sp, #213]
     c94:	lsr	x6, x6, #15
     c98:	cmp	w27, #0xf
     c9c:	sub	w7, w0, #0xf
     ca0:	b.eq	d18 <elf_zlib_inflate_and_verify+0x3c0>  // b.none
     ca4:	cmp	w7, #0xe
     ca8:	b.hi	ccc <elf_zlib_inflate_and_verify+0x374>  // b.pmore
     cac:	sub	x1, x21, x5
     cb0:	cmp	x1, #0x3
     cb4:	b.le	e5c <elf_zlib_inflate_and_verify+0x504>
     cb8:	ldr	w1, [x5], #4
     cbc:	lsl	x1, x1, x7
     cc0:	add	w7, w0, #0x11
     cc4:	prfm	pldl1strm, [x5]
     cc8:	orr	x6, x6, x1
     ccc:	and	w0, w6, #0x7
     cd0:	strb	w0, [sp, #202]
     cd4:	cmp	w27, #0x10
     cd8:	lsr	x0, x6, #3
     cdc:	b.eq	13bc <elf_zlib_inflate_and_verify+0xa64>  // b.none
     ce0:	and	w0, w0, #0x7
     ce4:	strb	w0, [sp, #214]
     ce8:	cmp	w27, #0x11
     cec:	lsr	x0, x6, #6
     cf0:	b.eq	13d0 <elf_zlib_inflate_and_verify+0xa78>  // b.none
     cf4:	and	w0, w0, #0x7
     cf8:	strb	w0, [sp, #201]
     cfc:	cmp	w27, #0x12
     d00:	lsr	x0, x6, #9
     d04:	b.eq	13b0 <elf_zlib_inflate_and_verify+0xa58>  // b.none
     d08:	lsr	x6, x6, #12
     d0c:	sub	w7, w7, #0xc
     d10:	and	w0, w0, #0x7
     d14:	strb	w0, [sp, #215]
     d18:	mov	x0, x14
     d1c:	mov	x3, x13
     d20:	mov	x2, x13
     d24:	mov	x1, #0x13                  	// #19
     d28:	stp	x13, x10, [sp, #128]
     d2c:	str	x5, [sp, #144]
     d30:	str	w7, [sp, #152]
     d34:	str	x6, [sp, #160]
     d38:	bl	60 <elf_zlib_inflate_table>
     d3c:	cbz	w0, e5c <elf_zlib_inflate_and_verify+0x504>
     d40:	ldp	x13, x10, [sp, #128]
     d44:	add	x3, x25, x26
     d48:	mov	x1, #0x1278                	// #4728
     d4c:	ldr	w7, [sp, #152]
     d50:	ldr	x5, [sp, #144]
     d54:	ldr	x6, [sp, #160]
     d58:	add	x28, x13, x1
     d5c:	add	x3, x28, x3
     d60:	cmp	x28, x3
     d64:	b.cs	13dc <elf_zlib_inflate_and_verify+0xa84>  // b.hs, b.nlast
     d68:	mov	x27, x28
     d6c:	b	d80 <elf_zlib_inflate_and_verify+0x428>
     d70:	sub	w7, w7, #0x1
     d74:	strb	w0, [x27], #1
     d78:	cmp	x3, x27
     d7c:	b.ls	13dc <elf_zlib_inflate_and_verify+0xa84>  // b.plast
     d80:	cmp	w7, #0xe
     d84:	b.hi	da8 <elf_zlib_inflate_and_verify+0x450>  // b.pmore
     d88:	sub	x0, x21, x5
     d8c:	cmp	x0, #0x3
     d90:	b.le	e5c <elf_zlib_inflate_and_verify+0x504>
     d94:	ldr	w0, [x5], #4
     d98:	lsl	x0, x0, x7
     d9c:	add	w7, w7, #0x20
     da0:	prfm	pldl1strm, [x5]
     da4:	orr	x6, x6, x0
     da8:	and	x0, x6, #0xff
     dac:	ldrh	w0, [x13, x0, lsl #1]
     db0:	tbnz	w0, #12, e5c <elf_zlib_inflate_and_verify+0x504>
     db4:	ubfx	x1, x0, #9, #3
     db8:	tst	w0, #0x1f0
     dbc:	add	w2, w1, #0x1
     dc0:	sub	w7, w7, w1
     dc4:	and	w0, w0, #0x1ff
     dc8:	lsr	x6, x6, x2
     dcc:	b.eq	d70 <elf_zlib_inflate_and_verify+0x418>  // b.none
     dd0:	cmp	w0, #0x10
     dd4:	b.eq	e7c <elf_zlib_inflate_and_verify+0x524>  // b.none
     dd8:	cmp	w0, #0x11
     ddc:	b.eq	fb8 <elf_zlib_inflate_and_verify+0x660>  // b.none
     de0:	stp	x10, x5, [sp, #128]
     de4:	cmp	w0, #0x12
     de8:	str	x13, [sp, #144]
     dec:	b.ne	e5c <elf_zlib_inflate_and_verify+0x504>  // b.any
     df0:	and	w2, w6, #0x7f
     df4:	sub	w7, w7, #0x8
     df8:	lsr	x6, x6, #7
     dfc:	str	x6, [sp, #152]
     e00:	str	w7, [sp, #160]
     e04:	sub	x0, x3, x27
     e08:	str	x3, [sp, #168]
     e0c:	add	w2, w2, #0xb
     e10:	cmp	w2, w0
     e14:	b.hi	e5c <elf_zlib_inflate_and_verify+0x504>  // b.pmore
     e18:	mov	x0, x27
     e1c:	mov	w1, #0x0                   	// #0
     e20:	add	x27, x27, x2
     e24:	bl	0 <__asan_internal_memset>
     e28:	ldr	w7, [sp, #160]
     e2c:	ldp	x10, x5, [sp, #128]
     e30:	ldp	x13, x6, [sp, #144]
     e34:	ldr	x3, [sp, #168]
     e38:	b	d78 <elf_zlib_inflate_and_verify+0x420>
     e3c:	ldp	x25, x26, [sp, #64]
     e40:	ldp	x27, x28, [sp, #80]
     e44:	mov	w0, #0x0                   	// #0
     e48:	ldp	x19, x20, [sp, #16]
     e4c:	ldp	x21, x22, [sp, #32]
     e50:	ldp	x23, x24, [sp, #48]
     e54:	ldp	x29, x30, [sp], #224
     e58:	ret
     e5c:	mov	w0, #0x0                   	// #0
     e60:	ldp	x19, x20, [sp, #16]
     e64:	ldp	x21, x22, [sp, #32]
     e68:	ldp	x23, x24, [sp, #48]
     e6c:	ldp	x25, x26, [sp, #64]
     e70:	ldp	x27, x28, [sp, #80]
     e74:	ldp	x29, x30, [sp], #224
     e78:	ret
     e7c:	cmp	x28, x27
     e80:	b.eq	e5c <elf_zlib_inflate_and_verify+0x504>  // b.none
     e84:	and	w0, w6, #0x3
     e88:	sub	x1, x3, x27
     e8c:	add	w0, w0, #0x3
     e90:	sub	w7, w7, #0x3
     e94:	lsr	x6, x6, #2
     e98:	cmp	w0, w1
     e9c:	b.hi	e5c <elf_zlib_inflate_and_verify+0x504>  // b.pmore
     ea0:	ldurb	w1, [x27, #-1]
     ea4:	cmp	w0, #0x5
     ea8:	b.eq	f9c <elf_zlib_inflate_and_verify+0x644>  // b.none
     eac:	cmp	w0, #0x6
     eb0:	b.eq	f98 <elf_zlib_inflate_and_verify+0x640>  // b.none
     eb4:	cmp	w0, #0x4
     eb8:	b.eq	fa0 <elf_zlib_inflate_and_verify+0x648>  // b.none
     ebc:	add	x27, x27, #0x3
     ec0:	sturb	w1, [x27, #-3]
     ec4:	sturb	w1, [x27, #-2]
     ec8:	sturb	w1, [x27, #-1]
     ecc:	b	d78 <elf_zlib_inflate_and_verify+0x420>
     ed0:	sub	w3, w3, #0xc
     ed4:	stp	x10, x13, [sp, #128]
     ed8:	lsr	w3, w3, #3
     edc:	mvn	x2, x3
     ee0:	add	x6, x5, x2
     ee4:	sub	x0, x21, x6
     ee8:	cmp	x0, #0x3
     eec:	b.le	e44 <elf_zlib_inflate_and_verify+0x4ec>
     ef0:	ldrb	w7, [x6, #3]
     ef4:	sub	x3, x5, x3
     ef8:	ldrb	w0, [x6, #2]
     efc:	add	x1, x3, #0x3
     f00:	ldrb	w2, [x5, x2]
     f04:	ldrb	w3, [x6, #1]
     f08:	bfi	w0, w7, #8, #24
     f0c:	mvn	w0, w0
     f10:	bfi	w2, w3, #8, #24
     f14:	cmp	w2, w0, uxth
     f18:	b.ne	e44 <elf_zlib_inflate_and_verify+0x4ec>  // b.any
     f1c:	sub	x0, x21, x1
     f20:	cmp	w2, w0
     f24:	b.hi	e44 <elf_zlib_inflate_and_verify+0x4ec>  // b.pmore
     f28:	ldr	x0, [sp, #104]
     f2c:	sub	x0, x0, x20
     f30:	cmp	w2, w0
     f34:	b.hi	e44 <elf_zlib_inflate_and_verify+0x4ec>  // b.pmore
     f38:	stp	x25, x26, [sp, #64]
     f3c:	and	x25, x2, #0xffff
     f40:	add	x5, x1, x25
     f44:	mov	x0, x20
     f48:	mov	x2, x25
     f4c:	str	x5, [sp, #144]
     f50:	add	x20, x20, x25
     f54:	bl	0 <__asan_internal_memcpy>
     f58:	ldr	x5, [sp, #144]
     f5c:	ldp	x10, x13, [sp, #128]
     f60:	ands	x6, x5, #0x3
     f64:	b.eq	1728 <elf_zlib_inflate_and_verify+0xdd0>  // b.none
     f68:	mov	x6, #0x0                   	// #0
     f6c:	mov	w3, #0x0                   	// #0
     f70:	ldrb	w0, [x5], #1
     f74:	lsl	x0, x0, x3
     f78:	tst	x5, #0x3
     f7c:	orr	x6, x6, x0
     f80:	add	w3, w3, #0x8
     f84:	b.ne	f70 <elf_zlib_inflate_and_verify+0x618>  // b.any
     f88:	tbnz	w10, #0, 16fc <elf_zlib_inflate_and_verify+0xda4>
     f8c:	mov	x10, x6
     f90:	ldp	x25, x26, [sp, #64]
     f94:	b	a38 <elf_zlib_inflate_and_verify+0xe0>
     f98:	strb	w1, [x27], #1
     f9c:	strb	w1, [x27], #1
     fa0:	strb	w1, [x27], #1
     fa4:	add	x27, x27, #0x3
     fa8:	sturb	w1, [x27, #-3]
     fac:	sturb	w1, [x27, #-2]
     fb0:	sturb	w1, [x27, #-1]
     fb4:	b	d78 <elf_zlib_inflate_and_verify+0x420>
     fb8:	and	w0, w6, #0x7
     fbc:	sub	x1, x3, x27
     fc0:	add	w0, w0, #0x3
     fc4:	sub	w7, w7, #0x4
     fc8:	lsr	x6, x6, #3
     fcc:	cmp	w0, w1
     fd0:	b.hi	e5c <elf_zlib_inflate_and_verify+0x504>  // b.pmore
     fd4:	cmp	w0, #0x7
     fd8:	b.eq	1040 <elf_zlib_inflate_and_verify+0x6e8>  // b.none
     fdc:	b.hi	1024 <elf_zlib_inflate_and_verify+0x6cc>  // b.pmore
     fe0:	cmp	w0, #0x5
     fe4:	b.eq	ff8 <elf_zlib_inflate_and_verify+0x6a0>  // b.none
     fe8:	cmp	w0, #0x6
     fec:	b.ne	1014 <elf_zlib_inflate_and_verify+0x6bc>  // b.any
     ff0:	strb	wzr, [x27], #1
     ff4:	nop
     ff8:	strb	wzr, [x27], #1
     ffc:	mov	x0, x27
    1000:	strb	wzr, [x0], #1
    1004:	mov	x27, x0
    1008:	strh	wzr, [x27], #3
    100c:	strb	wzr, [x0, #2]
    1010:	b	d78 <elf_zlib_inflate_and_verify+0x420>
    1014:	cmp	w0, #0x4
    1018:	b.eq	ffc <elf_zlib_inflate_and_verify+0x6a4>  // b.none
    101c:	mov	x0, x27
    1020:	b	1004 <elf_zlib_inflate_and_verify+0x6ac>
    1024:	cmp	w0, #0x9
    1028:	b.eq	1038 <elf_zlib_inflate_and_verify+0x6e0>  // b.none
    102c:	cmp	w0, #0xa
    1030:	b.ne	104c <elf_zlib_inflate_and_verify+0x6f4>  // b.any
    1034:	strb	wzr, [x27], #1
    1038:	strb	wzr, [x27], #1
    103c:	strb	wzr, [x27], #1
    1040:	strb	wzr, [x27], #1
    1044:	strb	wzr, [x27], #1
    1048:	b	ff8 <elf_zlib_inflate_and_verify+0x6a0>
    104c:	cmp	w0, #0x8
    1050:	b.ne	101c <elf_zlib_inflate_and_verify+0x6c4>  // b.any
    1054:	strb	wzr, [x27], #1
    1058:	b	1040 <elf_zlib_inflate_and_verify+0x6e8>
    105c:	ldp	x0, x25, [sp, #112]
    1060:	str	x0, [sp, #176]
    1064:	cmp	w7, #0xe
    1068:	b.hi	108c <elf_zlib_inflate_and_verify+0x734>  // b.pmore
    106c:	sub	x0, x21, x5
    1070:	cmp	x0, #0x3
    1074:	b.le	e3c <elf_zlib_inflate_and_verify+0x4e4>
    1078:	ldr	w0, [x5], #4
    107c:	lsl	x0, x0, x7
    1080:	add	w7, w7, #0x20
    1084:	prfm	pldl1strm, [x5]
    1088:	orr	x6, x6, x0
    108c:	and	x0, x6, #0xff
    1090:	ldrh	w1, [x25, x0, lsl #1]
    1094:	and	w3, w1, #0x1ff
    1098:	ubfx	x0, x1, #9, #3
    109c:	tbnz	w1, #12, 10e0 <elf_zlib_inflate_and_verify+0x788>
    10a0:	add	w1, w0, #0x1
    10a4:	sub	w7, w7, #0x1
    10a8:	sub	w7, w7, w0
    10ac:	cmp	w3, #0xff
    10b0:	lsr	x6, x6, x1
    10b4:	b.hi	111c <elf_zlib_inflate_and_verify+0x7c4>  // b.pmore
    10b8:	ldr	x0, [sp, #104]
    10bc:	cmp	x0, x20
    10c0:	b.eq	e3c <elf_zlib_inflate_and_verify+0x4e4>  // b.none
    10c4:	mov	x11, x20
    10c8:	cmp	w7, #0xe
    10cc:	strb	w3, [x11], #1
    10d0:	prfm	pstl1keep, [x11]
    10d4:	mov	x20, x11
    10d8:	b.ls	106c <elf_zlib_inflate_and_verify+0x714>  // b.plast
    10dc:	b	108c <elf_zlib_inflate_and_verify+0x734>
    10e0:	mov	w1, #0x1                   	// #1
    10e4:	add	w3, w3, #0x100
    10e8:	lsl	w0, w1, w0
    10ec:	sub	w0, w0, #0x1
    10f0:	and	x0, x0, x6, lsr #8
    10f4:	sub	w7, w7, #0x8
    10f8:	add	x3, x0, w3, sxtw
    10fc:	ldrh	w0, [x25, x3, lsl #1]
    1100:	and	w3, w0, #0x1ff
    1104:	ubfx	x0, x0, #9, #3
    1108:	cmp	w3, #0xff
    110c:	add	w1, w0, #0x8
    1110:	sub	w7, w7, w0
    1114:	lsr	x6, x6, x1
    1118:	b.ls	10b8 <elf_zlib_inflate_and_verify+0x760>  // b.plast
    111c:	cmp	w3, #0x100
    1120:	b.eq	173c <elf_zlib_inflate_and_verify+0xde4>  // b.none
    1124:	cmp	w3, #0x108
    1128:	b.hi	11cc <elf_zlib_inflate_and_verify+0x874>  // b.pmore
    112c:	sub	w28, w3, #0xfe
    1130:	cmp	w7, #0xe
    1134:	b.hi	1158 <elf_zlib_inflate_and_verify+0x800>  // b.pmore
    1138:	sub	x0, x21, x5
    113c:	cmp	x0, #0x3
    1140:	b.le	e3c <elf_zlib_inflate_and_verify+0x4e4>
    1144:	ldr	w0, [x5], #4
    1148:	lsl	x0, x0, x7
    114c:	add	w7, w7, #0x20
    1150:	prfm	pldl1strm, [x5]
    1154:	orr	x6, x6, x0
    1158:	ldr	x1, [sp, #176]
    115c:	and	x0, x6, #0xff
    1160:	ldrh	w1, [x1, x0, lsl #1]
    1164:	and	w14, w1, #0x1ff
    1168:	ubfx	x0, x1, #9, #3
    116c:	tbnz	w1, #12, 1244 <elf_zlib_inflate_and_verify+0x8ec>
    1170:	add	w1, w0, #0x1
    1174:	sub	w7, w7, #0x1
    1178:	sub	w7, w7, w0
    117c:	lsr	x6, x6, x1
    1180:	cbnz	w14, 1280 <elf_zlib_inflate_and_verify+0x928>
    1184:	stp	x10, x5, [sp, #128]
    1188:	cmp	x19, x20
    118c:	str	w7, [sp, #144]
    1190:	stp	x6, x13, [sp, #152]
    1194:	b.eq	e3c <elf_zlib_inflate_and_verify+0x4e4>  // b.none
    1198:	ldr	x0, [sp, #104]
    119c:	sub	x0, x0, x20
    11a0:	cmp	w28, w0
    11a4:	b.hi	e3c <elf_zlib_inflate_and_verify+0x4e4>  // b.pmore
    11a8:	ldurb	w1, [x20, #-1]
    11ac:	mov	w2, w28
    11b0:	mov	x0, x20
    11b4:	add	x20, x20, x2
    11b8:	bl	0 <__asan_internal_memset>
    11bc:	ldr	w7, [sp, #144]
    11c0:	ldp	x10, x5, [sp, #128]
    11c4:	ldp	x6, x13, [sp, #152]
    11c8:	b	1064 <elf_zlib_inflate_and_verify+0x70c>
    11cc:	cmp	w3, #0x11d
    11d0:	b.eq	13c8 <elf_zlib_inflate_and_verify+0xa70>  // b.none
    11d4:	b.hi	e3c <elf_zlib_inflate_and_verify+0x4e4>  // b.pmore
    11d8:	cmp	w7, #0xe
    11dc:	b.hi	1200 <elf_zlib_inflate_and_verify+0x8a8>  // b.pmore
    11e0:	sub	x0, x21, x5
    11e4:	cmp	x0, #0x3
    11e8:	b.le	e3c <elf_zlib_inflate_and_verify+0x4e4>
    11ec:	ldr	w0, [x5], #4
    11f0:	lsl	x0, x0, x7
    11f4:	add	w7, w7, #0x20
    11f8:	prfm	pldl1strm, [x5]
    11fc:	orr	x6, x6, x0
    1200:	sub	w3, w3, #0x109
    1204:	mov	w2, #0x1                   	// #1
    1208:	and	w0, w3, #0x3
    120c:	lsr	w3, w3, #2
    1210:	add	w1, w3, #0x1
    1214:	lsl	w3, w2, w3
    1218:	mov	w2, #0xffffffff            	// #-1
    121c:	sub	w3, w3, #0x1
    1220:	lsl	w2, w2, w1
    1224:	bic	w2, w6, w2
    1228:	lsl	w0, w0, w1
    122c:	add	w2, w2, w3, lsl #3
    1230:	add	w3, w0, #0xb
    1234:	sub	w7, w7, w1
    1238:	add	w28, w2, w3
    123c:	lsr	x6, x6, x1
    1240:	b	1130 <elf_zlib_inflate_and_verify+0x7d8>
    1244:	mov	w1, #0x1                   	// #1
    1248:	add	w14, w14, #0x100
    124c:	lsl	w0, w1, w0
    1250:	sub	w0, w0, #0x1
    1254:	and	x0, x0, x6, lsr #8
    1258:	sub	w7, w7, #0x8
    125c:	add	x14, x0, w14, sxtw
    1260:	ldr	x0, [sp, #176]
    1264:	ldrh	w0, [x0, x14, lsl #1]
    1268:	and	w14, w0, #0x1ff
    126c:	ubfx	x0, x0, #9, #3
    1270:	add	w1, w0, #0x8
    1274:	sub	w7, w7, w0
    1278:	lsr	x6, x6, x1
    127c:	cbz	w14, 1184 <elf_zlib_inflate_and_verify+0x82c>
    1280:	cmp	w14, #0x1d
    1284:	b.hi	e3c <elf_zlib_inflate_and_verify+0x4e4>  // b.pmore
    1288:	add	w27, w14, #0x1
    128c:	cmp	w14, #0x3
    1290:	b.ls	12fc <elf_zlib_inflate_and_verify+0x9a4>  // b.plast
    1294:	cmp	w7, #0xe
    1298:	b.hi	12bc <elf_zlib_inflate_and_verify+0x964>  // b.pmore
    129c:	sub	x0, x21, x5
    12a0:	cmp	x0, #0x3
    12a4:	b.le	e3c <elf_zlib_inflate_and_verify+0x4e4>
    12a8:	ldr	w0, [x5], #4
    12ac:	lsl	x0, x0, x7
    12b0:	add	w7, w7, #0x20
    12b4:	prfm	pldl1strm, [x5]
    12b8:	orr	x6, x6, x0
    12bc:	sub	w14, w14, #0x4
    12c0:	mov	w2, #0x1                   	// #1
    12c4:	and	w0, w14, #0x1
    12c8:	lsr	w14, w14, #1
    12cc:	add	w1, w14, #0x1
    12d0:	lsl	w14, w2, w14
    12d4:	mov	w2, #0xffffffff            	// #-1
    12d8:	sub	w14, w14, #0x1
    12dc:	lsl	w2, w2, w1
    12e0:	bic	w2, w6, w2
    12e4:	lsl	w0, w0, w1
    12e8:	add	w14, w2, w14, lsl #2
    12ec:	add	w0, w0, #0x5
    12f0:	sub	w7, w7, w1
    12f4:	add	w27, w14, w0
    12f8:	lsr	x6, x6, x1
    12fc:	sub	x0, x20, x19
    1300:	cmp	w27, w0
    1304:	b.hi	e3c <elf_zlib_inflate_and_verify+0x4e4>  // b.pmore
    1308:	ldr	x0, [sp, #104]
    130c:	sub	x0, x0, x20
    1310:	cmp	w28, w0
    1314:	b.hi	e3c <elf_zlib_inflate_and_verify+0x4e4>  // b.pmore
    1318:	mov	w26, w27
    131c:	cmp	w28, w27
    1320:	neg	x0, x26
    1324:	str	x0, [sp, #184]
    1328:	b.hi	1350 <elf_zlib_inflate_and_verify+0x9f8>  // b.pmore
    132c:	mov	w2, w28
    1330:	add	x1, x20, x0
    1334:	mov	x0, x20
    1338:	add	x20, x20, x2
    133c:	stp	x10, x5, [sp, #128]
    1340:	str	w7, [sp, #144]
    1344:	stp	x6, x13, [sp, #152]
    1348:	bl	0 <__asan_internal_memcpy>
    134c:	b	11bc <elf_zlib_inflate_and_verify+0x864>
    1350:	cmp	w27, w28
    1354:	str	x5, [sp, #144]
    1358:	ldr	x0, [sp, #184]
    135c:	csel	w2, w27, w28, ls  // ls = plast
    1360:	csel	w26, w27, w28, ls  // ls = plast
    1364:	stp	x2, x10, [sp, #128]
    1368:	add	x1, x20, x0
    136c:	mov	x0, x20
    1370:	str	w7, [sp, #152]
    1374:	stp	x6, x13, [sp, #160]
    1378:	bl	0 <__asan_internal_memcpy>
    137c:	ldr	w7, [sp, #152]
    1380:	ldp	x2, x10, [sp, #128]
    1384:	subs	w28, w28, w26
    1388:	ldr	x5, [sp, #144]
    138c:	ldp	x6, x13, [sp, #160]
    1390:	add	x20, x20, x2
    1394:	b.ne	1350 <elf_zlib_inflate_and_verify+0x9f8>  // b.any
    1398:	b	1064 <elf_zlib_inflate_and_verify+0x70c>
    139c:	mov	w3, #0x0                   	// #0
    13a0:	b	a38 <elf_zlib_inflate_and_verify+0xe0>
    13a4:	sub	w7, w7, #0xc
    13a8:	mov	x6, x0
    13ac:	b	d18 <elf_zlib_inflate_and_verify+0x3c0>
    13b0:	sub	w7, w7, #0x9
    13b4:	mov	x6, x0
    13b8:	b	d18 <elf_zlib_inflate_and_verify+0x3c0>
    13bc:	sub	w7, w7, #0x3
    13c0:	mov	x6, x0
    13c4:	b	d18 <elf_zlib_inflate_and_verify+0x3c0>
    13c8:	mov	w28, #0x102                 	// #258
    13cc:	b	1130 <elf_zlib_inflate_and_verify+0x7d8>
    13d0:	sub	w7, w7, #0x6
    13d4:	mov	x6, x0
    13d8:	b	d18 <elf_zlib_inflate_and_verify+0x3c0>
    13dc:	add	x0, x13, #0x1, lsl #12
    13e0:	stp	x10, x5, [sp, #128]
    13e4:	str	w7, [sp, #144]
    13e8:	ldrb	w0, [x0, #888]
    13ec:	str	x6, [sp, #152]
    13f0:	cbz	w0, e5c <elf_zlib_inflate_and_verify+0x504>
    13f4:	mov	x3, x13
    13f8:	mov	x2, x13
    13fc:	mov	x1, x25
    1400:	mov	x0, x28
    1404:	str	x13, [sp, #160]
    1408:	bl	60 <elf_zlib_inflate_table>
    140c:	cbz	w0, e5c <elf_zlib_inflate_and_verify+0x504>
    1410:	ldr	x13, [sp, #160]
    1414:	mov	x1, x26
    1418:	add	x0, x13, #0x800
    141c:	mov	x2, x13
    1420:	mov	x3, x0
    1424:	add	x0, x28, x25
    1428:	str	x3, [sp, #176]
    142c:	bl	60 <elf_zlib_inflate_table>
    1430:	cbz	w0, e5c <elf_zlib_inflate_and_verify+0x504>
    1434:	ldp	x6, x13, [sp, #152]
    1438:	ldr	w7, [sp, #144]
    143c:	ldp	x10, x5, [sp, #128]
    1440:	mov	x25, x13
    1444:	b	1064 <elf_zlib_inflate_and_verify+0x70c>
    1448:	mov	x20, x3
    144c:	ldr	x0, [sp, #104]
    1450:	cmp	x0, x20
    1454:	b.ne	e44 <elf_zlib_inflate_and_verify+0x4ec>  // b.any
    1458:	sub	x9, x22, #0x4
    145c:	mov	w7, #0x0                   	// #0
    1460:	add	x8, x23, x9
    1464:	ldrb	w0, [x8], #1
    1468:	cmp	x21, x8
    146c:	orr	w7, w0, w7, lsl #8
    1470:	b.ne	1464 <elf_zlib_inflate_and_verify+0xb0c>  // b.any
    1474:	mov	x11, #0x15af                	// #5551
    1478:	mov	w5, #0x0                   	// #0
    147c:	cmp	x24, x11
    1480:	mov	w3, #0x1                   	// #1
    1484:	b.ls	1590 <elf_zlib_inflate_and_verify+0xc38>  // b.plast
    1488:	mov	w13, #0x8071                	// #32881
    148c:	mov	x14, #0x15b0                	// #5552
    1490:	movk	w13, #0x8007, lsl #16
    1494:	mov	w12, #0xfff1                	// #65521
    1498:	mov	x0, #0x15b0                	// #5552
    149c:	add	x15, x19, x0
    14a0:	ldrb	w2, [x19]
    14a4:	add	x19, x19, #0x10
    14a8:	ldurb	w1, [x19, #-15]
    14ac:	ldurb	w0, [x19, #-14]
    14b0:	add	w3, w2, w3
    14b4:	add	w1, w1, w3
    14b8:	ldurb	w2, [x19, #-13]
    14bc:	add	w0, w0, w1
    14c0:	ldurb	w10, [x19, #-12]
    14c4:	ldurb	w22, [x19, #-11]
    14c8:	add	w2, w2, w0
    14cc:	add	w10, w10, w2
    14d0:	ldurb	w9, [x19, #-10]
    14d4:	ldurb	w21, [x19, #-9]
    14d8:	add	w22, w22, w10
    14dc:	ldurb	w17, [x19, #-8]
    14e0:	add	w9, w9, w22
    14e4:	ldurb	w18, [x19, #-7]
    14e8:	add	w21, w21, w9
    14ec:	ldurb	w20, [x19, #-6]
    14f0:	add	w17, w17, w21
    14f4:	ldurb	w16, [x19, #-5]
    14f8:	add	w18, w18, w17
    14fc:	ldurb	w8, [x19, #-4]
    1500:	add	w3, w3, w1
    1504:	ldurb	w6, [x19, #-2]
    1508:	add	w2, w0, w2
    150c:	ldurb	w1, [x19, #-3]
    1510:	add	w20, w20, w18
    1514:	add	w2, w2, w3
    1518:	add	w16, w16, w20
    151c:	add	w3, w10, w22
    1520:	add	w9, w9, w21
    1524:	add	w2, w2, w3
    1528:	add	w8, w8, w16
    152c:	add	w2, w2, w9
    1530:	ldurb	w3, [x19, #-1]
    1534:	add	w9, w1, w8
    1538:	add	w0, w17, w18
    153c:	add	w6, w6, w9
    1540:	add	w0, w2, w0
    1544:	add	w10, w20, w16
    1548:	add	w8, w8, w9
    154c:	add	w0, w0, w10
    1550:	add	w3, w3, w6
    1554:	add	w0, w0, w8
    1558:	add	w6, w6, w3
    155c:	add	w0, w0, w6
    1560:	cmp	x19, x15
    1564:	add	w5, w5, w0
    1568:	b.ne	14a0 <elf_zlib_inflate_and_verify+0xb48>  // b.any
    156c:	umull	x1, w3, w13
    1570:	sub	x24, x24, x14
    1574:	umull	x0, w5, w13
    1578:	cmp	x24, x11
    157c:	lsr	x1, x1, #47
    1580:	lsr	x0, x0, #47
    1584:	msub	w3, w1, w12, w3
    1588:	msub	w5, w0, w12, w5
    158c:	b.hi	1498 <elf_zlib_inflate_and_verify+0xb40>  // b.pmore
    1590:	cmp	x24, #0xf
    1594:	b.ls	1678 <elf_zlib_inflate_and_verify+0xd20>  // b.plast
    1598:	sub	x13, x24, #0x10
    159c:	and	x13, x13, #0xfffffffffffffff0
    15a0:	add	x13, x13, #0x10
    15a4:	add	x13, x19, x13
    15a8:	ldrb	w1, [x19]
    15ac:	add	x19, x19, #0x10
    15b0:	ldurb	w2, [x19, #-15]
    15b4:	ldurb	w0, [x19, #-14]
    15b8:	add	w3, w1, w3
    15bc:	add	w2, w2, w3
    15c0:	ldurb	w1, [x19, #-13]
    15c4:	add	w0, w0, w2
    15c8:	ldurb	w12, [x19, #-12]
    15cc:	ldurb	w17, [x19, #-11]
    15d0:	add	w1, w1, w0
    15d4:	ldurb	w11, [x19, #-10]
    15d8:	add	w12, w12, w1
    15dc:	ldurb	w16, [x19, #-9]
    15e0:	add	w17, w17, w12
    15e4:	ldurb	w10, [x19, #-8]
    15e8:	add	w11, w11, w17
    15ec:	ldurb	w15, [x19, #-7]
    15f0:	add	w16, w16, w11
    15f4:	ldurb	w9, [x19, #-6]
    15f8:	add	w10, w10, w16
    15fc:	ldurb	w14, [x19, #-5]
    1600:	add	w15, w15, w10
    1604:	ldurb	w8, [x19, #-4]
    1608:	add	w3, w3, w2
    160c:	ldurb	w6, [x19, #-2]
    1610:	add	w1, w0, w1
    1614:	ldurb	w2, [x19, #-3]
    1618:	add	w9, w9, w15
    161c:	add	w1, w1, w3
    1620:	add	w14, w14, w9
    1624:	add	w12, w12, w17
    1628:	add	w0, w11, w16
    162c:	add	w8, w8, w14
    1630:	add	w1, w1, w12
    1634:	add	w1, w1, w0
    1638:	add	w11, w2, w8
    163c:	ldurb	w3, [x19, #-1]
    1640:	add	w0, w10, w15
    1644:	add	w6, w6, w11
    1648:	add	w0, w1, w0
    164c:	add	w9, w9, w14
    1650:	add	w8, w8, w11
    1654:	add	w0, w0, w9
    1658:	add	w3, w3, w6
    165c:	add	w0, w0, w8
    1660:	add	w6, w6, w3
    1664:	add	w0, w0, w6
    1668:	cmp	x19, x13
    166c:	add	w5, w5, w0
    1670:	b.ne	15a8 <elf_zlib_inflate_and_verify+0xc50>  // b.any
    1674:	and	x24, x24, #0xf
    1678:	cbz	x24, 16a4 <elf_zlib_inflate_and_verify+0xd4c>
    167c:	mov	w0, #0x1                   	// #1
    1680:	sub	w0, w0, w19
    1684:	nop
    1688:	ldrb	w1, [x19]
    168c:	add	w2, w0, w19
    1690:	cmp	x2, x24
    1694:	add	x19, x19, #0x1
    1698:	add	w3, w3, w1
    169c:	add	w5, w5, w3
    16a0:	b.cc	1688 <elf_zlib_inflate_and_verify+0xd30>  // b.lo, b.ul, b.last
    16a4:	mov	w0, #0x8071                	// #32881
    16a8:	mov	w2, #0xfff1                	// #65521
    16ac:	movk	w0, #0x8007, lsl #16
    16b0:	ldp	x19, x20, [sp, #16]
    16b4:	umull	x1, w5, w0
    16b8:	umull	x0, w3, w0
    16bc:	ldp	x21, x22, [sp, #32]
    16c0:	lsr	x1, x1, #47
    16c4:	lsr	x0, x0, #47
    16c8:	ldp	x23, x24, [sp, #48]
    16cc:	msub	w5, w1, w2, w5
    16d0:	msub	w3, w0, w2, w3
    16d4:	ldp	x29, x30, [sp], #224
    16d8:	add	w3, w3, w5, lsl #16
    16dc:	cmp	w3, w7
    16e0:	cset	w0, eq  // eq = none
    16e4:	ret
    16e8:	mov	w7, w0
    16ec:	b	d18 <elf_zlib_inflate_and_verify+0x3c0>
    16f0:	sub	w7, w0, #0x3
    16f4:	mov	x6, x1
    16f8:	b	d18 <elf_zlib_inflate_and_verify+0x3c0>
    16fc:	sub	x0, x21, x5
    1700:	cmp	x0, #0x4
    1704:	ldp	x25, x26, [sp, #64]
    1708:	b.gt	9b0 <elf_zlib_inflate_and_verify+0x58>
    170c:	b	144c <elf_zlib_inflate_and_verify+0xaf4>
    1710:	sub	w7, w0, #0x6
    1714:	mov	x6, x1
    1718:	b	d18 <elf_zlib_inflate_and_verify+0x3c0>
    171c:	sub	w7, w0, #0x9
    1720:	mov	x6, x1
    1724:	b	d18 <elf_zlib_inflate_and_verify+0x3c0>
    1728:	mov	w3, #0x0                   	// #0
    172c:	b	f88 <elf_zlib_inflate_and_verify+0x630>
    1730:	sub	w7, w0, #0xc
    1734:	mov	x6, x1
    1738:	b	d18 <elf_zlib_inflate_and_verify+0x3c0>
    173c:	mov	w3, w7
    1740:	ldp	x27, x28, [sp, #80]
    1744:	b	f88 <elf_zlib_inflate_and_verify+0x630>

0000000000001748 <elf_uncompress_zdebug.part.0>:
    1748:	stp	x29, x30, [sp, #-80]!
    174c:	add	x8, x1, #0x4
    1750:	mov	x29, sp
    1754:	stp	x19, x20, [sp, #16]
    1758:	add	x20, x1, #0xc
    175c:	mov	x19, #0x0                   	// #0
    1760:	stp	x21, x22, [sp, #32]
    1764:	mov	x22, x6
    1768:	stp	x23, x24, [sp, #48]
    176c:	mov	x24, x2
    1770:	mov	x23, x7
    1774:	mov	x2, x4
    1778:	str	x25, [sp, #64]
    177c:	mov	x25, x3
    1780:	mov	x3, x5
    1784:	nop
    1788:	ldrb	w1, [x8], #1
    178c:	cmp	x20, x8
    1790:	orr	x19, x1, x19, lsl #8
    1794:	b.ne	1788 <elf_uncompress_zdebug.part.0+0x40>  // b.any
    1798:	ldr	x21, [x22]
    179c:	cbz	x21, 17f0 <elf_uncompress_zdebug.part.0+0xa8>
    17a0:	ldr	x1, [x23]
    17a4:	cmp	x19, x1
    17a8:	b.hi	17f0 <elf_uncompress_zdebug.part.0+0xa8>  // b.pmore
    17ac:	sub	x1, x24, #0xc
    17b0:	mov	x2, x25
    17b4:	mov	x0, x20
    17b8:	mov	x4, x19
    17bc:	mov	x3, x21
    17c0:	bl	958 <elf_zlib_inflate_and_verify>
    17c4:	mov	w1, w0
    17c8:	mov	w0, #0x1                   	// #1
    17cc:	cbz	w1, 17d8 <elf_uncompress_zdebug.part.0+0x90>
    17d0:	str	x21, [x22]
    17d4:	str	x19, [x23]
    17d8:	ldp	x19, x20, [sp, #16]
    17dc:	ldp	x21, x22, [sp, #32]
    17e0:	ldp	x23, x24, [sp, #48]
    17e4:	ldr	x25, [sp, #64]
    17e8:	ldp	x29, x30, [sp], #80
    17ec:	ret
    17f0:	mov	x1, x19
    17f4:	bl	0 <__asan_backtrace_alloc>
    17f8:	mov	x21, x0
    17fc:	cbnz	x0, 17ac <elf_uncompress_zdebug.part.0+0x64>
    1800:	mov	w0, #0x0                   	// #0
    1804:	b	17d8 <elf_uncompress_zdebug.part.0+0x90>

0000000000001808 <elf_add>:
    1808:	sub	sp, sp, #0x4a0
    180c:	stp	x29, x30, [sp, #80]
    1810:	add	x29, sp, #0x50
    1814:	stp	x21, x22, [sp, #112]
    1818:	mov	x21, x0
    181c:	ldr	w0, [sp, #1208]
    1820:	stp	x19, x20, [sp, #96]
    1824:	mov	w22, w2
    1828:	mov	x19, x4
    182c:	stp	x23, x24, [sp, #128]
    1830:	mov	x20, x5
    1834:	mov	x23, x7
    1838:	stp	x25, x26, [sp, #144]
    183c:	stp	x27, x28, [sp, #160]
    1840:	mov	x28, x1
    1844:	stp	x3, x6, [sp, #176]
    1848:	cbnz	w0, 1858 <elf_add+0x50>
    184c:	ldr	x0, [sp, #1184]
    1850:	str	wzr, [x7]
    1854:	str	wzr, [x0]
    1858:	add	x24, sp, #0x198
    185c:	mov	x5, x20
    1860:	mov	x6, x24
    1864:	mov	x4, x19
    1868:	mov	w1, w22
    186c:	mov	x0, x21
    1870:	mov	x3, #0x40                  	// #64
    1874:	mov	x2, #0x0                   	// #0
    1878:	bl	0 <__asan_backtrace_get_view>
    187c:	cbnz	w0, 18e4 <elf_add+0xdc>
    1880:	mov	w24, #0x0                   	// #0
    1884:	mov	x25, #0x0                   	// #0
    1888:	cbnz	w24, 193c <elf_add+0x134>
    188c:	cbz	x25, 18a4 <elf_add+0x9c>
    1890:	add	x1, x25, #0x18
    1894:	mov	x0, x21
    1898:	mov	x3, x20
    189c:	mov	x2, x19
    18a0:	bl	0 <__asan_backtrace_release_view>
    18a4:	cmn	w22, #0x1
    18a8:	mov	w23, #0x0                   	// #0
    18ac:	b.eq	18c0 <elf_add+0xb8>  // b.none
    18b0:	mov	x2, x20
    18b4:	mov	x1, x19
    18b8:	mov	w0, w22
    18bc:	bl	0 <__asan_backtrace_close>
    18c0:	mov	w0, w23
    18c4:	ldp	x29, x30, [sp, #80]
    18c8:	ldp	x19, x20, [sp, #96]
    18cc:	ldp	x21, x22, [sp, #112]
    18d0:	ldp	x23, x24, [sp, #128]
    18d4:	ldp	x25, x26, [sp, #144]
    18d8:	ldp	x27, x28, [sp, #160]
    18dc:	add	sp, sp, #0x4a0
    18e0:	ret
    18e4:	ldr	x1, [sp, #408]
    18e8:	mov	x2, #0x40                  	// #64
    18ec:	add	x0, sp, #0x2a0
    18f0:	bl	0 <__asan_internal_memcpy>
    18f4:	mov	x1, x24
    18f8:	mov	x0, x21
    18fc:	mov	x3, x20
    1900:	mov	x2, x19
    1904:	bl	0 <__asan_backtrace_release_view>
    1908:	ldr	w1, [sp, #672]
    190c:	mov	w0, #0x457f                	// #17791
    1910:	movk	w0, #0x464c, lsl #16
    1914:	cmp	w1, w0
    1918:	b.eq	1954 <elf_add+0x14c>  // b.none
    191c:	mov	x0, x20
    1920:	adrp	x1, 0 <elf_nodebug>
    1924:	mov	w2, #0x0                   	// #0
    1928:	add	x1, x1, #0x0
    192c:	mov	w24, #0x0                   	// #0
    1930:	mov	x25, #0x0                   	// #0
    1934:	blr	x19
    1938:	b	1888 <elf_add+0x80>
    193c:	mov	x3, x20
    1940:	mov	x2, x19
    1944:	add	x1, sp, #0x2e0
    1948:	mov	x0, x21
    194c:	bl	0 <__asan_backtrace_release_view>
    1950:	b	188c <elf_add+0x84>
    1954:	ldrb	w0, [sp, #678]
    1958:	cmp	w0, #0x1
    195c:	b.ne	198c <elf_add+0x184>  // b.any
    1960:	ldrb	w0, [sp, #676]
    1964:	cmp	w0, #0x2
    1968:	b.eq	19ac <elf_add+0x1a4>  // b.none
    196c:	mov	x0, x20
    1970:	adrp	x1, 0 <elf_nodebug>
    1974:	mov	w2, #0x0                   	// #0
    1978:	add	x1, x1, #0x0
    197c:	mov	w24, #0x0                   	// #0
    1980:	mov	x25, #0x0                   	// #0
    1984:	blr	x19
    1988:	b	1888 <elf_add+0x80>
    198c:	mov	x0, x20
    1990:	adrp	x1, 0 <elf_nodebug>
    1994:	mov	w2, #0x0                   	// #0
    1998:	add	x1, x1, #0x0
    199c:	mov	w24, #0x0                   	// #0
    19a0:	mov	x25, #0x0                   	// #0
    19a4:	blr	x19
    19a8:	b	1888 <elf_add+0x80>
    19ac:	ldrb	w0, [sp, #677]
    19b0:	sub	w0, w0, #0x1
    19b4:	and	w0, w0, #0xff
    19b8:	cmp	w0, #0x1
    19bc:	b.hi	1aac <elf_add+0x2a4>  // b.pmore
    19c0:	ldr	w0, [sp, #1200]
    19c4:	cbz	w0, 19d4 <elf_add+0x1cc>
    19c8:	ldrh	w0, [sp, #688]
    19cc:	cmp	w0, #0x3
    19d0:	b.eq	2a80 <elf_add+0x1278>  // b.none
    19d4:	ldrh	w0, [sp, #732]
    19d8:	mov	w27, #0xffff                	// #65535
    19dc:	ldrh	w25, [sp, #734]
    19e0:	ldr	x26, [sp, #712]
    19e4:	cmp	w0, #0x0
    19e8:	str	w0, [sp, #232]
    19ec:	ccmp	w25, w27, #0x4, ne  // ne = any
    19f0:	ccmp	x26, #0x0, #0x4, eq  // eq = none
    19f4:	b.ne	1f40 <elf_add+0x738>  // b.any
    19f8:	ldr	w24, [sp, #232]
    19fc:	add	x0, sp, #0x1b0
    1a00:	mov	x6, x0
    1a04:	add	x2, x26, #0x40
    1a08:	sub	w3, w24, #0x1
    1a0c:	mov	x5, x20
    1a10:	mov	x4, x19
    1a14:	mov	w1, w22
    1a18:	lsl	x3, x3, #6
    1a1c:	str	x0, [sp, #216]
    1a20:	mov	x0, x21
    1a24:	bl	0 <__asan_backtrace_get_view>
    1a28:	cbz	w0, 1880 <elf_add+0x78>
    1a2c:	ldr	x0, [sp, #432]
    1a30:	sub	w3, w25, #0x1
    1a34:	add	x1, sp, #0x1c8
    1a38:	mov	x5, x20
    1a3c:	mov	x6, x1
    1a40:	mov	x4, x19
    1a44:	add	x3, x0, x3, lsl #6
    1a48:	str	x1, [sp, #224]
    1a4c:	mov	w1, w22
    1a50:	str	x0, [sp, #296]
    1a54:	mov	x0, x21
    1a58:	ldp	x2, x3, [x3, #24]
    1a5c:	str	x3, [sp, #208]
    1a60:	bl	0 <__asan_backtrace_get_view>
    1a64:	cbnz	w0, 1acc <elf_add+0x2c4>
    1a68:	ldr	x1, [sp, #216]
    1a6c:	mov	x3, x20
    1a70:	mov	x2, x19
    1a74:	mov	x0, x21
    1a78:	mov	w24, #0x0                   	// #0
    1a7c:	mov	x25, #0x0                   	// #0
    1a80:	bl	0 <__asan_backtrace_release_view>
    1a84:	str	wzr, [sp, #200]
    1a88:	ldr	w0, [sp, #200]
    1a8c:	cbz	w0, 1888 <elf_add+0x80>
    1a90:	mov	x3, x20
    1a94:	mov	x2, x19
    1a98:	add	x1, sp, #0x210
    1a9c:	mov	x0, x21
    1aa0:	bl	0 <__asan_backtrace_release_view>
    1aa4:	cbz	w24, 188c <elf_add+0x84>
    1aa8:	b	193c <elf_add+0x134>
    1aac:	mov	x0, x20
    1ab0:	adrp	x1, 0 <elf_nodebug>
    1ab4:	mov	w2, #0x0                   	// #0
    1ab8:	add	x1, x1, #0x0
    1abc:	mov	w24, #0x0                   	// #0
    1ac0:	mov	x25, #0x0                   	// #0
    1ac4:	blr	x19
    1ac8:	b	1888 <elf_add+0x80>
    1acc:	ldr	x3, [sp, #456]
    1ad0:	add	x0, sp, #0x360
    1ad4:	mov	x2, #0x140                 	// #320
    1ad8:	mov	w1, #0x0                   	// #0
    1adc:	str	x0, [sp, #240]
    1ae0:	str	x3, [sp, #256]
    1ae4:	bl	0 <__asan_internal_memset>
    1ae8:	cmp	w24, #0x1
    1aec:	b.ls	2a88 <elf_add+0x1280>  // b.plast
    1af0:	add	x0, sp, #0x270
    1af4:	mov	x25, #0x0                   	// #0
    1af8:	mov	x1, x0
    1afc:	adrp	x0, 0 <elf_nodebug>
    1b00:	add	x0, x0, #0x0
    1b04:	stp	x28, x23, [sp, #344]
    1b08:	ldr	w23, [sp, #1208]
    1b0c:	str	x1, [sp, #360]
    1b10:	add	x1, x1, #0x18
    1b14:	ldr	x28, [sp, #208]
    1b18:	mov	w2, #0x0                   	// #0
    1b1c:	ldr	x27, [sp, #296]
    1b20:	stp	x19, x20, [sp, #272]
    1b24:	mov	x20, x0
    1b28:	stp	x25, xzr, [sp, #304]
    1b2c:	mov	w25, w2
    1b30:	mov	w26, #0x0                   	// #0
    1b34:	str	x1, [sp, #368]
    1b38:	mov	w1, #0x1                   	// #1
    1b3c:	ldr	x24, [sp, #256]
    1b40:	str	x21, [sp, #256]
    1b44:	mov	w21, w1
    1b48:	str	wzr, [sp, #192]
    1b4c:	str	wzr, [sp, #200]
    1b50:	str	wzr, [sp, #248]
    1b54:	str	w22, [sp, #264]
    1b58:	str	xzr, [sp, #288]
    1b5c:	str	wzr, [sp, #320]
    1b60:	str	wzr, [sp, #324]
    1b64:	stp	xzr, xzr, [sp, #328]
    1b68:	str	wzr, [sp, #376]
    1b6c:	nop
    1b70:	ldr	w0, [x27, #4]
    1b74:	cmp	w0, #0x2
    1b78:	b.eq	1dd0 <elf_add+0x5c8>  // b.none
    1b7c:	cmp	w0, #0xb
    1b80:	csel	w25, w25, w21, ne  // ne = any
    1b84:	ldr	w19, [x27]
    1b88:	cmp	x19, x28
    1b8c:	b.cs	1fb0 <elf_add+0x7a8>  // b.hs, b.nlast
    1b90:	adrp	x1, 0 <elf_nodebug>
    1b94:	add	x19, x24, x19
    1b98:	add	x1, x1, #0x0
    1b9c:	mov	x22, #0x0                   	// #0
    1ba0:	b	1ba8 <elf_add+0x3a0>
    1ba4:	ldr	x1, [x20, x22, lsl #3]
    1ba8:	mov	x0, x19
    1bac:	bl	0 <__asan_internal_strcmp>
    1bb0:	mov	w1, w22
    1bb4:	add	x22, x22, #0x1
    1bb8:	cbz	w0, 1da0 <elf_add+0x598>
    1bbc:	cmp	x22, #0xa
    1bc0:	b.ne	1ba4 <elf_add+0x39c>  // b.any
    1bc4:	ldr	x0, [sp, #1216]
    1bc8:	eor	w22, w23, #0x1
    1bcc:	and	w22, w22, #0x1
    1bd0:	cmp	x0, #0x0
    1bd4:	ccmp	w22, #0x0, #0x0, eq  // eq = none
    1bd8:	b.eq	1c08 <elf_add+0x400>  // b.none
    1bdc:	ldr	w0, [sp, #200]
    1be0:	cbz	w0, 1eb4 <elf_add+0x6ac>
    1be4:	ldr	w0, [sp, #192]
    1be8:	orr	w0, w23, w0
    1bec:	cbnz	w0, 1c08 <elf_add+0x400>
    1bf0:	mov	x0, x19
    1bf4:	adrp	x1, 0 <elf_nodebug>
    1bf8:	add	x1, x1, #0x0
    1bfc:	bl	0 <__asan_internal_strcmp>
    1c00:	str	wzr, [sp, #192]
    1c04:	cbz	w0, 1d1c <elf_add+0x514>
    1c08:	cbz	w26, 1e44 <elf_add+0x63c>
    1c0c:	ldrh	w0, [sp, #690]
    1c10:	cmp	w0, #0x15
    1c14:	b.eq	1dd8 <elf_add+0x5d0>  // b.none
    1c18:	ldr	w0, [sp, #232]
    1c1c:	add	w21, w21, #0x1
    1c20:	add	x27, x27, #0x40
    1c24:	cmp	w0, w21
    1c28:	b.ne	1b70 <elf_add+0x368>  // b.any
    1c2c:	ldr	w0, [sp, #248]
    1c30:	mov	w2, w22
    1c34:	str	w26, [sp, #208]
    1c38:	cmp	w0, #0x0
    1c3c:	ldr	w22, [sp, #264]
    1c40:	csel	w0, w0, w25, ne  // ne = any
    1c44:	cmp	w0, #0x0
    1c48:	ccmp	w2, #0x0, #0x4, ne  // ne = any
    1c4c:	ldr	x21, [sp, #256]
    1c50:	ldp	x19, x20, [sp, #272]
    1c54:	ldr	x25, [sp, #304]
    1c58:	ldp	x28, x23, [sp, #344]
    1c5c:	b.eq	2150 <elf_add+0x948>  // b.none
    1c60:	sub	w27, w0, #0x1
    1c64:	ldr	x0, [sp, #296]
    1c68:	add	x27, x0, x27, lsl #6
    1c6c:	ldr	w0, [sp, #232]
    1c70:	ldr	w7, [x27, #40]
    1c74:	cmp	w0, w7
    1c78:	b.hi	2064 <elf_add+0x85c>  // b.pmore
    1c7c:	mov	x0, x20
    1c80:	adrp	x1, 0 <elf_nodebug>
    1c84:	mov	w2, #0x0                   	// #0
    1c88:	add	x1, x1, #0x0
    1c8c:	mov	w24, #0x0                   	// #0
    1c90:	blr	x19
    1c94:	str	wzr, [sp, #232]
    1c98:	ldr	x1, [sp, #216]
    1c9c:	mov	x3, x20
    1ca0:	mov	x2, x19
    1ca4:	mov	x0, x21
    1ca8:	bl	0 <__asan_backtrace_release_view>
    1cac:	ldr	x1, [sp, #224]
    1cb0:	mov	x0, x21
    1cb4:	mov	x3, x20
    1cb8:	mov	x2, x19
    1cbc:	bl	0 <__asan_backtrace_release_view>
    1cc0:	ldr	w0, [sp, #232]
    1cc4:	cbz	w0, 1cdc <elf_add+0x4d4>
    1cc8:	mov	x3, x20
    1ccc:	mov	x2, x19
    1cd0:	add	x1, sp, #0x1e0
    1cd4:	mov	x0, x21
    1cd8:	bl	0 <__asan_backtrace_release_view>
    1cdc:	cbnz	w24, 1d84 <elf_add+0x57c>
    1ce0:	ldr	w0, [sp, #192]
    1ce4:	cbz	w0, 1cfc <elf_add+0x4f4>
    1ce8:	mov	x3, x20
    1cec:	mov	x2, x19
    1cf0:	add	x1, sp, #0x228
    1cf4:	mov	x0, x21
    1cf8:	bl	0 <__asan_backtrace_release_view>
    1cfc:	ldr	w0, [sp, #208]
    1d00:	cbz	w0, 1a88 <elf_add+0x280>
    1d04:	mov	x3, x20
    1d08:	mov	x2, x19
    1d0c:	add	x1, sp, #0x240
    1d10:	mov	x0, x21
    1d14:	bl	0 <__asan_backtrace_release_view>
    1d18:	b	1a88 <elf_add+0x280>
    1d1c:	ldp	x2, x3, [x27, #24]
    1d20:	add	x6, sp, #0x228
    1d24:	ldp	x4, x5, [sp, #272]
    1d28:	ldr	w1, [sp, #264]
    1d2c:	ldr	x0, [sp, #256]
    1d30:	bl	0 <__asan_backtrace_get_view>
    1d34:	mov	w7, w0
    1d38:	cbz	w0, 2578 <elf_add+0xd70>
    1d3c:	ldr	x1, [x27, #32]
    1d40:	mov	w0, #0x1                   	// #1
    1d44:	ldr	x2, [sp, #552]
    1d48:	str	w0, [sp, #192]
    1d4c:	str	x2, [sp, #208]
    1d50:	mov	x0, x2
    1d54:	bl	0 <__asan_internal_strnlen>
    1d58:	add	x0, x0, #0x3
    1d5c:	ldr	x1, [x27, #32]
    1d60:	and	x0, x0, #0xfffffffffffffffc
    1d64:	add	x3, x0, #0x4
    1d68:	cmp	x3, x1
    1d6c:	b.hi	1c08 <elf_add+0x400>  // b.pmore
    1d70:	ldr	x2, [sp, #208]
    1d74:	str	x2, [sp, #328]
    1d78:	ldr	w0, [x2, x0]
    1d7c:	str	w0, [sp, #320]
    1d80:	b	1c08 <elf_add+0x400>
    1d84:	mov	w24, #0x0                   	// #0
    1d88:	mov	x3, x20
    1d8c:	mov	x2, x19
    1d90:	add	x1, sp, #0x1f8
    1d94:	mov	x0, x21
    1d98:	bl	0 <__asan_backtrace_release_view>
    1d9c:	b	1ce0 <elf_add+0x4d8>
    1da0:	ldr	x4, [sp, #240]
    1da4:	sbfiz	x1, x1, #5, #32
    1da8:	ldr	x3, [x27, #24]
    1dac:	add	x0, sp, #0x368
    1db0:	str	x3, [x4, x1]
    1db4:	add	x2, sp, #0x378
    1db8:	ldr	x3, [x27, #32]
    1dbc:	str	x3, [x0, x1]
    1dc0:	ldr	x0, [x27, #8]
    1dc4:	ubfx	w0, w0, #11, #1
    1dc8:	str	w0, [x2, x1]
    1dcc:	b	1bc4 <elf_add+0x3bc>
    1dd0:	str	w21, [sp, #248]
    1dd4:	b	1b84 <elf_add+0x37c>
    1dd8:	ldr	w0, [sp, #720]
    1ddc:	tbnz	w0, #1, 1c18 <elf_add+0x410>
    1de0:	ldr	w0, [x27, #4]
    1de4:	cmp	w0, #0x1
    1de8:	b.ne	1c18 <elf_add+0x410>  // b.any
    1dec:	adrp	x1, 0 <elf_nodebug>
    1df0:	mov	x0, x19
    1df4:	add	x1, x1, #0x0
    1df8:	bl	0 <__asan_internal_strcmp>
    1dfc:	cbnz	w0, 1c18 <elf_add+0x410>
    1e00:	ldp	x2, x3, [x27, #24]
    1e04:	ldp	x4, x5, [sp, #272]
    1e08:	ldr	w1, [sp, #264]
    1e0c:	ldr	x0, [sp, #256]
    1e10:	ldr	x6, [sp, #368]
    1e14:	bl	0 <__asan_backtrace_get_view>
    1e18:	mov	w7, w0
    1e1c:	cbz	w0, 2578 <elf_add+0xd70>
    1e20:	ldr	x0, [x27, #16]
    1e24:	str	x0, [sp, #624]
    1e28:	ldr	x0, [sp, #360]
    1e2c:	str	x0, [sp, #304]
    1e30:	ldr	x0, [x27, #32]
    1e34:	str	x0, [sp, #640]
    1e38:	ldr	x0, [sp, #648]
    1e3c:	str	x0, [sp, #632]
    1e40:	b	1c18 <elf_add+0x410>
    1e44:	adrp	x1, 0 <elf_nodebug>
    1e48:	mov	x0, x19
    1e4c:	add	x1, x1, #0x0
    1e50:	bl	0 <__asan_internal_strcmp>
    1e54:	cbnz	w0, 1c0c <elf_add+0x404>
    1e58:	ldp	x2, x3, [x27, #24]
    1e5c:	add	x6, sp, #0x240
    1e60:	ldp	x4, x5, [sp, #272]
    1e64:	ldr	w1, [sp, #264]
    1e68:	ldr	x0, [sp, #256]
    1e6c:	bl	0 <__asan_backtrace_get_view>
    1e70:	mov	w7, w0
    1e74:	cbz	w0, 2578 <elf_add+0xd70>
    1e78:	ldr	x1, [x27, #32]
    1e7c:	mov	w26, #0x1                   	// #1
    1e80:	ldr	x0, [sp, #576]
    1e84:	str	x0, [sp, #288]
    1e88:	bl	0 <__asan_internal_strnlen>
    1e8c:	ldr	x1, [x27, #32]
    1e90:	cmp	x1, x0
    1e94:	b.ls	1c0c <elf_add+0x404>  // b.plast
    1e98:	add	x0, x0, #0x1
    1e9c:	sub	w2, w1, w0
    1ea0:	str	w2, [sp, #324]
    1ea4:	ldr	x1, [sp, #288]
    1ea8:	add	x0, x1, x0
    1eac:	str	x0, [sp, #312]
    1eb0:	b	1c0c <elf_add+0x404>
    1eb4:	mov	x0, x19
    1eb8:	adrp	x1, 0 <elf_nodebug>
    1ebc:	add	x1, x1, #0x0
    1ec0:	bl	0 <__asan_internal_strcmp>
    1ec4:	mov	w7, w0
    1ec8:	cbnz	w0, 1be4 <elf_add+0x3dc>
    1ecc:	ldp	x2, x3, [x27, #24]
    1ed0:	add	x6, sp, #0x210
    1ed4:	ldp	x4, x5, [sp, #272]
    1ed8:	str	w7, [sp, #208]
    1edc:	ldr	w1, [sp, #264]
    1ee0:	ldr	x0, [sp, #256]
    1ee4:	bl	0 <__asan_backtrace_get_view>
    1ee8:	cbz	w0, 27c0 <elf_add+0xfb8>
    1eec:	ldr	x3, [sp, #528]
    1ef0:	ldr	w7, [sp, #208]
    1ef4:	ldr	w0, [x3, #8]
    1ef8:	cmp	w0, #0x3
    1efc:	b.eq	1ff8 <elf_add+0x7f0>  // b.none
    1f00:	ldr	w0, [sp, #1224]
    1f04:	cbz	w0, 1f34 <elf_add+0x72c>
    1f08:	ldr	w0, [sp, #376]
    1f0c:	ldr	w1, [sp, #1224]
    1f10:	cmp	w0, w1
    1f14:	b.ne	2b08 <elf_add+0x1300>  // b.any
    1f18:	mov	w2, w0
    1f1c:	str	w7, [sp, #200]
    1f20:	ldr	x0, [sp, #336]
    1f24:	ldr	x1, [sp, #1216]
    1f28:	bl	0 <__asan_internal_memcmp>
    1f2c:	ldr	w7, [sp, #200]
    1f30:	cbnz	w0, 2b08 <elf_add+0x1300>
    1f34:	mov	w0, #0x1                   	// #1
    1f38:	str	w0, [sp, #200]
    1f3c:	b	1be4 <elf_add+0x3dc>
    1f40:	add	x0, sp, #0x360
    1f44:	mov	x5, x20
    1f48:	mov	x6, x0
    1f4c:	mov	x4, x19
    1f50:	mov	x2, x26
    1f54:	mov	w1, w22
    1f58:	mov	x3, #0x8                   	// #8
    1f5c:	str	x0, [sp, #240]
    1f60:	mov	x0, x21
    1f64:	bl	0 <__asan_backtrace_get_view>
    1f68:	mov	w24, w0
    1f6c:	cbz	w0, 1884 <elf_add+0x7c>
    1f70:	ldr	w1, [sp, #232]
    1f74:	ldr	x0, [sp, #864]
    1f78:	cbz	w1, 1fe4 <elf_add+0x7dc>
    1f7c:	ldr	w25, [x0, #40]
    1f80:	mov	w1, #0xffff                	// #65535
    1f84:	ldr	w0, [sp, #232]
    1f88:	cmp	w0, w25
    1f8c:	sub	w0, w25, #0x100
    1f90:	ccmp	w25, w1, #0x0, ls  // ls = plast
    1f94:	csel	w25, w0, w25, hi  // hi = pmore
    1f98:	ldr	x1, [sp, #240]
    1f9c:	mov	x3, x20
    1fa0:	mov	x2, x19
    1fa4:	mov	x0, x21
    1fa8:	bl	0 <__asan_backtrace_release_view>
    1fac:	b	19f8 <elf_add+0x1f0>
    1fb0:	ldp	x19, x20, [sp, #272]
    1fb4:	str	w26, [sp, #208]
    1fb8:	ldr	w22, [sp, #264]
    1fbc:	adrp	x1, 0 <elf_nodebug>
    1fc0:	mov	w2, #0x0                   	// #0
    1fc4:	add	x1, x1, #0x0
    1fc8:	mov	w24, #0x0                   	// #0
    1fcc:	ldr	x21, [sp, #256]
    1fd0:	mov	x0, x20
    1fd4:	ldr	x25, [sp, #304]
    1fd8:	blr	x19
    1fdc:	str	wzr, [sp, #232]
    1fe0:	b	1c98 <elf_add+0x490>
    1fe4:	ldr	w1, [x0, #32]
    1fe8:	cmp	w25, w27
    1fec:	str	w1, [sp, #232]
    1ff0:	b.ne	1f98 <elf_add+0x790>  // b.any
    1ff4:	b	1f7c <elf_add+0x774>
    1ff8:	ldr	w0, [x3]
    1ffc:	cmp	w0, #0x4
    2000:	b.ne	1f00 <elf_add+0x6f8>  // b.any
    2004:	add	x4, x3, #0xc
    2008:	adrp	x1, 0 <elf_nodebug>
    200c:	mov	x0, x4
    2010:	add	x1, x1, #0x0
    2014:	mov	x2, #0x4                   	// #4
    2018:	stp	x4, x3, [sp, #200]
    201c:	str	w7, [sp, #380]
    2020:	bl	0 <__asan_internal_strncmp>
    2024:	ldr	w7, [sp, #380]
    2028:	cbnz	w0, 1f00 <elf_add+0x6f8>
    202c:	ldr	x3, [sp, #208]
    2030:	ldp	w0, w2, [x3]
    2034:	ldr	x3, [x27, #32]
    2038:	add	w0, w0, #0x3
    203c:	and	w0, w0, #0xfffffffc
    2040:	add	w1, w2, #0xc
    2044:	add	w1, w1, w0
    2048:	cmp	x3, x1
    204c:	b.hi	1f00 <elf_add+0x6f8>  // b.pmore
    2050:	ldr	x4, [sp, #200]
    2054:	str	w2, [sp, #376]
    2058:	add	x0, x4, w0, uxtw
    205c:	str	x0, [sp, #336]
    2060:	b	1f00 <elf_add+0x6f8>
    2064:	ldp	x2, x3, [x27, #24]
    2068:	add	x26, sp, #0x1e0
    206c:	mov	x6, x26
    2070:	mov	x5, x20
    2074:	mov	x4, x19
    2078:	mov	w1, w22
    207c:	mov	x0, x21
    2080:	str	w7, [sp, #248]
    2084:	mov	w24, #0x0                   	// #0
    2088:	bl	0 <__asan_backtrace_get_view>
    208c:	str	w0, [sp, #232]
    2090:	cbz	w0, 1c98 <elf_add+0x490>
    2094:	ldr	w7, [sp, #248]
    2098:	add	x6, sp, #0x1f8
    209c:	ldr	x0, [sp, #296]
    20a0:	sub	w7, w7, #0x1
    20a4:	mov	x5, x20
    20a8:	mov	x4, x19
    20ac:	mov	w1, w22
    20b0:	add	x7, x0, x7, lsl #6
    20b4:	mov	x0, x21
    20b8:	str	x7, [sp, #232]
    20bc:	ldp	x2, x3, [x7, #24]
    20c0:	bl	0 <__asan_backtrace_get_view>
    20c4:	mov	w24, w0
    20c8:	cbz	w0, 2670 <elf_add+0xe68>
    20cc:	mov	x3, x20
    20d0:	mov	x2, x19
    20d4:	mov	x0, x21
    20d8:	mov	x1, #0x18                  	// #24
    20dc:	bl	0 <__asan_backtrace_alloc>
    20e0:	mov	x24, x0
    20e4:	cbz	x0, 2b78 <elf_add+0x1370>
    20e8:	ldr	x5, [x27, #32]
    20ec:	mov	x0, #0x18                  	// #24
    20f0:	ldr	x7, [sp, #232]
    20f4:	cmp	x5, #0x17
    20f8:	udiv	x5, x5, x0
    20fc:	ldr	x8, [sp, #480]
    2100:	ldr	x7, [x7, #32]
    2104:	ldr	x13, [sp, #504]
    2108:	b.ls	2b54 <elf_add+0x134c>  // b.plast
    210c:	mov	x1, x8
    2110:	mov	x2, #0x0                   	// #0
    2114:	mov	x4, #0x0                   	// #0
    2118:	b	2128 <elf_add+0x920>
    211c:	add	x1, x1, #0x18
    2120:	cmp	x5, x2
    2124:	b.ls	267c <elf_add+0xe74>  // b.plast
    2128:	ldrb	w0, [x1, #4]
    212c:	add	x2, x2, #0x1
    2130:	and	w0, w0, #0xf
    2134:	sub	w0, w0, #0x1
    2138:	cmp	w0, #0x1
    213c:	b.hi	211c <elf_add+0x914>  // b.pmore
    2140:	ldrh	w0, [x1, #6]
    2144:	cbz	w0, 211c <elf_add+0x914>
    2148:	add	x4, x4, #0x1
    214c:	b	211c <elf_add+0x914>
    2150:	str	wzr, [sp, #232]
    2154:	ldr	x1, [sp, #216]
    2158:	mov	x3, x20
    215c:	mov	x2, x19
    2160:	mov	x0, x21
    2164:	bl	0 <__asan_backtrace_release_view>
    2168:	ldr	x1, [sp, #224]
    216c:	mov	x0, x21
    2170:	mov	x3, x20
    2174:	mov	x2, x19
    2178:	bl	0 <__asan_backtrace_release_view>
    217c:	ldr	x0, [sp, #336]
    2180:	cbz	x0, 2254 <elf_add+0xa4c>
    2184:	adrp	x4, 0 <elf_nodebug>
    2188:	add	x4, x4, #0x0
    218c:	mov	x0, x4
    2190:	str	x4, [sp, #248]
    2194:	bl	0 <__asan_internal_strlen>
    2198:	ldr	w27, [sp, #376]
    219c:	adrp	x1, 0 <elf_nodebug>
    21a0:	mov	x24, x0
    21a4:	add	x0, x1, #0x0
    21a8:	bl	0 <__asan_internal_strlen>
    21ac:	mov	x2, x0
    21b0:	add	x1, x27, #0x1
    21b4:	add	x26, x24, x0
    21b8:	mov	x3, x20
    21bc:	mov	x0, x21
    21c0:	add	x1, x26, x1, lsl #1
    21c4:	stp	x2, x1, [sp, #216]
    21c8:	mov	x2, x19
    21cc:	bl	0 <__asan_backtrace_alloc>
    21d0:	mov	x26, x0
    21d4:	cbz	x0, 2254 <elf_add+0xa4c>
    21d8:	ldr	x4, [sp, #248]
    21dc:	mov	x2, x24
    21e0:	add	x24, x0, x24
    21e4:	mov	x1, x4
    21e8:	bl	0 <__asan_internal_memcpy>
    21ec:	cbz	x27, 2508 <elf_add+0xd00>
    21f0:	mov	x2, #0x0                   	// #0
    21f4:	mov	w7, #0x2f                  	// #47
    21f8:	ldr	x5, [sp, #336]
    21fc:	b	2210 <elf_add+0xa08>
    2200:	add	x24, x24, #0x2
    2204:	add	x2, x2, #0x1
    2208:	cmp	x27, x2
    220c:	b.eq	2508 <elf_add+0xd00>  // b.none
    2210:	ldrb	w0, [x5, x2]
    2214:	and	w1, w0, #0xf
    2218:	lsr	w0, w0, #4
    221c:	add	w3, w1, #0x30
    2220:	cmp	w0, #0x9
    2224:	add	w4, w0, #0x30
    2228:	add	w0, w0, #0x57
    222c:	csel	w0, w0, w4, hi  // hi = pmore
    2230:	cmp	w1, #0x9
    2234:	add	w1, w1, #0x57
    2238:	strb	w0, [x24]
    223c:	csel	w0, w1, w3, hi  // hi = pmore
    2240:	strb	w0, [x24, #1]
    2244:	cbnz	x2, 2200 <elf_add+0x9f8>
    2248:	add	x24, x24, #0x3
    224c:	sturb	w7, [x24, #-1]
    2250:	b	2204 <elf_add+0x9fc>
    2254:	ldr	w0, [sp, #200]
    2258:	cbnz	w0, 231c <elf_add+0xb14>
    225c:	cbz	x25, 2274 <elf_add+0xa6c>
    2260:	add	x1, x25, #0x18
    2264:	mov	x3, x20
    2268:	mov	x2, x19
    226c:	mov	x0, x21
    2270:	bl	0 <__asan_backtrace_release_view>
    2274:	ldr	x0, [sp, #328]
    2278:	cbz	x0, 23e0 <elf_add+0xbd8>
    227c:	mov	x2, x0
    2280:	mov	x4, x20
    2284:	mov	x3, x19
    2288:	mov	x1, x28
    228c:	mov	x0, x21
    2290:	bl	658 <elf_find_debugfile_by_debuglink>
    2294:	mov	w24, w0
    2298:	tbnz	w0, #31, 23e0 <elf_add+0xbd8>
    229c:	ldr	w0, [sp, #320]
    22a0:	cbnz	w0, 2334 <elf_add+0xb2c>
    22a4:	mov	x3, x20
    22a8:	mov	x2, x19
    22ac:	add	x1, sp, #0x228
    22b0:	mov	x0, x21
    22b4:	bl	0 <__asan_backtrace_release_view>
    22b8:	ldr	w0, [sp, #208]
    22bc:	cbnz	w0, 2804 <elf_add+0xffc>
    22c0:	ldp	x3, x6, [sp, #176]
    22c4:	mov	w0, #0x1                   	// #1
    22c8:	ldr	x1, [sp, #1184]
    22cc:	stp	x1, xzr, [sp]
    22d0:	mov	x7, x23
    22d4:	str	wzr, [sp, #16]
    22d8:	mov	w2, w24
    22dc:	str	w0, [sp, #24]
    22e0:	mov	x5, x20
    22e4:	str	xzr, [sp, #32]
    22e8:	mov	x4, x19
    22ec:	str	wzr, [sp, #40]
    22f0:	mov	x0, x21
    22f4:	adrp	x1, 0 <elf_nodebug>
    22f8:	add	x1, x1, #0x0
    22fc:	bl	1808 <elf_add>
    2300:	mov	w23, w0
    2304:	mov	x2, x20
    2308:	mov	x1, x19
    230c:	tbz	w0, #31, 18b8 <elf_add+0xb0>
    2310:	mov	w0, w24
    2314:	bl	0 <__asan_backtrace_close>
    2318:	b	18c0 <elf_add+0xb8>
    231c:	mov	x3, x20
    2320:	mov	x2, x19
    2324:	add	x1, sp, #0x210
    2328:	mov	x0, x21
    232c:	bl	0 <__asan_backtrace_release_view>
    2330:	b	225c <elf_add+0xa54>
    2334:	add	x2, sp, #0x2e0
    2338:	mov	w1, w24
    233c:	mov	w0, #0x0                   	// #0
    2340:	bl	0 <__fxstat>
    2344:	tbnz	w0, #31, 27e4 <elf_add+0xfdc>
    2348:	ldr	x3, [sp, #784]
    234c:	add	x26, sp, #0x258
    2350:	mov	x6, x26
    2354:	mov	x5, x20
    2358:	mov	x4, x19
    235c:	mov	w1, w24
    2360:	mov	x0, x21
    2364:	mov	x2, #0x0                   	// #0
    2368:	bl	0 <__asan_backtrace_get_view>
    236c:	cbz	w0, 23d0 <elf_add+0xbc8>
    2370:	ldr	x2, [sp, #600]
    2374:	adrp	x0, 0 <elf_nodebug>
    2378:	ldr	x3, [sp, #784]
    237c:	add	x0, x0, #0x0
    2380:	add	x0, x0, #0x4e0
    2384:	mov	w25, #0xffffffff            	// #-1
    2388:	add	x3, x2, x3
    238c:	b	23a4 <elf_add+0xb9c>
    2390:	ldrb	w1, [x2], #1
    2394:	eor	w1, w1, w25
    2398:	and	x1, x1, #0xff
    239c:	ldr	w1, [x0, x1, lsl #2]
    23a0:	eor	w25, w1, w25, lsr #8
    23a4:	cmp	x3, x2
    23a8:	b.hi	2390 <elf_add+0xb88>  // b.pmore
    23ac:	mov	x0, x21
    23b0:	mov	x1, x26
    23b4:	mov	x3, x20
    23b8:	mov	x2, x19
    23bc:	bl	0 <__asan_backtrace_release_view>
    23c0:	mvn	w25, w25
    23c4:	ldr	w0, [sp, #320]
    23c8:	cmp	w25, w0
    23cc:	b.eq	22a4 <elf_add+0xa9c>  // b.none
    23d0:	mov	w0, w24
    23d4:	mov	x2, x20
    23d8:	mov	x1, x19
    23dc:	bl	0 <__asan_backtrace_close>
    23e0:	ldr	w0, [sp, #192]
    23e4:	cbnz	w0, 2650 <elf_add+0xe48>
    23e8:	ldr	x0, [sp, #288]
    23ec:	str	xzr, [sp, #392]
    23f0:	cbz	x0, 2598 <elf_add+0xd90>
    23f4:	mov	x2, x0
    23f8:	mov	x4, x20
    23fc:	mov	x3, x19
    2400:	mov	x1, x28
    2404:	mov	x0, x21
    2408:	bl	658 <elf_find_debugfile_by_debuglink>
    240c:	mov	w24, w0
    2410:	tbnz	w0, #31, 2598 <elf_add+0xd90>
    2414:	mov	w8, #0x1                   	// #1
    2418:	str	w8, [sp, #24]
    241c:	ldp	x3, x6, [sp, #176]
    2420:	mov	x7, x23
    2424:	ldr	x8, [sp, #312]
    2428:	str	x8, [sp, #32]
    242c:	ldr	w8, [sp, #324]
    2430:	add	x0, sp, #0x188
    2434:	ldr	x1, [sp, #1184]
    2438:	mov	x5, x20
    243c:	mov	x4, x19
    2440:	stp	x1, x0, [sp]
    2444:	mov	w2, w24
    2448:	str	wzr, [sp, #16]
    244c:	mov	x1, x28
    2450:	str	w8, [sp, #40]
    2454:	mov	x0, x21
    2458:	bl	1808 <elf_add>
    245c:	mov	w23, w0
    2460:	mov	x3, x20
    2464:	mov	x2, x19
    2468:	add	x1, sp, #0x240
    246c:	mov	x0, x21
    2470:	bl	0 <__asan_backtrace_release_view>
    2474:	tbnz	w23, #31, 2b30 <elf_add+0x1328>
    2478:	ldr	x0, [sp, #240]
    247c:	add	x4, sp, #0x4a0
    2480:	mov	x3, #0x0                   	// #0
    2484:	mov	x25, #0x0                   	// #0
    2488:	mov	x23, x0
    248c:	b	24b0 <elf_add+0xca8>
    2490:	cmp	x1, x25
    2494:	csel	x25, x25, x1, ge  // ge = tcont
    2498:	add	x1, x1, x2
    249c:	cmp	x3, x1
    24a0:	csel	x3, x3, x1, ge  // ge = tcont
    24a4:	add	x0, x0, #0x20
    24a8:	cmp	x4, x0
    24ac:	b.eq	24c8 <elf_add+0xcc0>  // b.none
    24b0:	ldr	x2, [x0, #8]
    24b4:	cbz	x2, 24a4 <elf_add+0xc9c>
    24b8:	ldr	x1, [x0]
    24bc:	cbnz	x25, 2490 <elf_add+0xc88>
    24c0:	mov	x25, x1
    24c4:	b	2498 <elf_add+0xc90>
    24c8:	cmp	x25, #0x0
    24cc:	ccmp	x3, #0x0, #0x4, ne  // ne = any
    24d0:	b.ne	25b8 <elf_add+0xdb0>  // b.any
    24d4:	mov	x2, x20
    24d8:	mov	x1, x19
    24dc:	mov	w0, w22
    24e0:	bl	0 <__asan_backtrace_close>
    24e4:	mov	w24, w0
    24e8:	cbnz	w0, 2668 <elf_add+0xe60>
    24ec:	ldr	w0, [sp, #232]
    24f0:	cbz	w0, 1884 <elf_add+0x7c>
    24f4:	mov	x25, #0x0                   	// #0
    24f8:	str	wzr, [sp, #192]
    24fc:	str	wzr, [sp, #200]
    2500:	str	wzr, [sp, #208]
    2504:	b	1d88 <elf_add+0x580>
    2508:	ldr	x27, [sp, #216]
    250c:	adrp	x0, 0 <elf_nodebug>
    2510:	add	x1, x0, #0x0
    2514:	mov	x0, x24
    2518:	mov	x2, x27
    251c:	bl	0 <__asan_internal_memcpy>
    2520:	strb	wzr, [x24, x27]
    2524:	add	x3, sp, #0x2e0
    2528:	mov	x2, x20
    252c:	mov	x1, x19
    2530:	mov	x0, x26
    2534:	bl	0 <__asan_backtrace_open>
    2538:	ldr	x2, [sp, #224]
    253c:	mov	w24, w0
    2540:	mov	x1, x26
    2544:	mov	x4, x20
    2548:	mov	x3, x19
    254c:	mov	x0, x21
    2550:	bl	0 <__asan_backtrace_free>
    2554:	tbnz	w24, #31, 2254 <elf_add+0xa4c>
    2558:	mov	x0, x21
    255c:	mov	x3, x20
    2560:	mov	x2, x19
    2564:	add	x1, sp, #0x210
    2568:	bl	0 <__asan_backtrace_release_view>
    256c:	ldr	w0, [sp, #192]
    2570:	cbz	w0, 22b8 <elf_add+0xab0>
    2574:	b	22a4 <elf_add+0xa9c>
    2578:	ldr	w22, [sp, #264]
    257c:	mov	w24, #0x0                   	// #0
    2580:	str	w26, [sp, #208]
    2584:	str	w7, [sp, #232]
    2588:	ldr	x21, [sp, #256]
    258c:	ldp	x19, x20, [sp, #272]
    2590:	ldr	x25, [sp, #304]
    2594:	b	1c98 <elf_add+0x490>
    2598:	ldr	w0, [sp, #208]
    259c:	cbz	w0, 2478 <elf_add+0xc70>
    25a0:	mov	x3, x20
    25a4:	mov	x2, x19
    25a8:	add	x1, sp, #0x240
    25ac:	mov	x0, x21
    25b0:	bl	0 <__asan_backtrace_release_view>
    25b4:	b	2478 <elf_add+0xc70>
    25b8:	add	x0, sp, #0x2e0
    25bc:	sub	x3, x3, x25
    25c0:	mov	x6, x0
    25c4:	mov	x5, x20
    25c8:	mov	x4, x19
    25cc:	mov	x2, x25
    25d0:	mov	w1, w22
    25d4:	str	x0, [sp, #192]
    25d8:	mov	x0, x21
    25dc:	bl	0 <__asan_backtrace_get_view>
    25e0:	mov	w24, w0
    25e4:	cbz	w0, 24ec <elf_add+0xce4>
    25e8:	mov	x2, x20
    25ec:	mov	x1, x19
    25f0:	mov	w0, w22
    25f4:	bl	0 <__asan_backtrace_close>
    25f8:	cbz	w0, 2b3c <elf_add+0x1334>
    25fc:	mov	w22, #0x0                   	// #0
    2600:	mov	w1, #0x0                   	// #0
    2604:	ldr	x0, [sp, #240]
    2608:	ldr	x3, [sp, #736]
    260c:	b	2624 <elf_add+0xe1c>
    2610:	str	xzr, [x0, #16]
    2614:	cmp	w2, #0xa
    2618:	b.eq	2874 <elf_add+0x106c>  // b.none
    261c:	add	x0, x0, #0x20
    2620:	mov	w1, w2
    2624:	ldr	x4, [x0, #8]
    2628:	add	w2, w1, #0x1
    262c:	cmp	w1, #0x4
    2630:	cbz	x4, 2610 <elf_add+0xe08>
    2634:	ldr	x1, [x0]
    2638:	sub	x1, x1, x25
    263c:	add	x1, x3, x1
    2640:	str	x1, [x0, #16]
    2644:	b.hi	2614 <elf_add+0xe0c>  // b.pmore
    2648:	add	w22, w22, #0x1
    264c:	b	261c <elf_add+0xe14>
    2650:	mov	x3, x20
    2654:	mov	x2, x19
    2658:	add	x1, sp, #0x228
    265c:	mov	x0, x21
    2660:	bl	0 <__asan_backtrace_release_view>
    2664:	b	23e8 <elf_add+0xbe0>
    2668:	mov	w23, #0x1                   	// #1
    266c:	b	18c0 <elf_add+0xb8>
    2670:	mov	w0, #0x1                   	// #1
    2674:	str	w0, [sp, #232]
    2678:	b	1c98 <elf_add+0x490>
    267c:	mov	x9, #0x18                  	// #24
    2680:	mov	x3, x20
    2684:	mov	x2, x19
    2688:	mov	x0, x21
    268c:	mul	x6, x4, x9
    2690:	stp	x4, x13, [sp, #248]
    2694:	mov	x1, x6
    2698:	str	x6, [sp, #232]
    269c:	stp	x7, x5, [sp, #264]
    26a0:	str	x8, [sp, #280]
    26a4:	bl	0 <__asan_backtrace_alloc>
    26a8:	mov	x27, x0
    26ac:	cbz	x0, 2850 <elf_add+0x1048>
    26b0:	ldp	x4, x13, [sp, #248]
    26b4:	mov	x9, #0x18                  	// #24
    26b8:	ldp	x7, x5, [sp, #264]
    26bc:	mov	x1, #0x0                   	// #0
    26c0:	ldr	x6, [sp, #232]
    26c4:	mov	w3, #0x0                   	// #0
    26c8:	ldr	x8, [sp, #280]
    26cc:	add	x1, x1, #0x1
    26d0:	ldrb	w0, [x8, #4]
    26d4:	and	w0, w0, #0xf
    26d8:	sub	w0, w0, #0x1
    26dc:	cmp	w0, #0x1
    26e0:	b.hi	2750 <elf_add+0xf48>  // b.pmore
    26e4:	ldrh	w2, [x8, #6]
    26e8:	umull	x0, w3, w9
    26ec:	add	x10, x27, x0
    26f0:	cbz	w2, 2750 <elf_add+0xf48>
    26f4:	ldr	w2, [x8]
    26f8:	add	w3, w3, #0x1
    26fc:	add	x11, x13, x2
    2700:	cmp	x7, x2
    2704:	b.ls	281c <elf_add+0x1014>  // b.plast
    2708:	str	x11, [x27, x0]
    270c:	ldr	x0, [x8, #8]
    2710:	cbz	x25, 273c <elf_add+0xf34>
    2714:	ldr	x2, [x25]
    2718:	cmp	x2, x0
    271c:	b.hi	273c <elf_add+0xf34>  // b.pmore
    2720:	ldr	x12, [x25, #16]
    2724:	sub	x11, x0, x2
    2728:	add	x2, x2, x12
    272c:	cmp	x2, x0
    2730:	b.ls	273c <elf_add+0xf34>  // b.plast
    2734:	ldr	x0, [x25, #8]
    2738:	ldr	x0, [x0, x11]
    273c:	ldr	x2, [sp, #176]
    2740:	add	x0, x2, x0
    2744:	str	x0, [x10, #8]
    2748:	ldr	x0, [x8, #16]
    274c:	str	x0, [x10, #16]
    2750:	add	x8, x8, #0x18
    2754:	cmp	x5, x1
    2758:	b.hi	26cc <elf_add+0xec4>  // b.pmore
    275c:	mov	x1, x4
    2760:	mov	x0, x27
    2764:	mov	x2, #0x18                  	// #24
    2768:	adrp	x3, 0 <elf_nodebug>
    276c:	add	x3, x3, #0x0
    2770:	str	x4, [sp, #232]
    2774:	bl	0 <__asan_backtrace_qsort>
    2778:	stp	xzr, x27, [x24]
    277c:	mov	x1, x26
    2780:	ldr	x4, [sp, #232]
    2784:	str	x4, [x24, #16]
    2788:	mov	x0, x21
    278c:	mov	x3, x20
    2790:	mov	x2, x19
    2794:	bl	0 <__asan_backtrace_release_view>
    2798:	mov	w0, #0x1                   	// #1
    279c:	str	w0, [x23]
    27a0:	add	x1, x21, #0x30
    27a4:	ldr	w0, [x21, #8]
    27a8:	cbnz	w0, 2acc <elf_add+0x12c4>
    27ac:	ldr	x0, [x21, #48]
    27b0:	cbz	x0, 2b44 <elf_add+0x133c>
    27b4:	mov	x1, x0
    27b8:	ldr	x0, [x0]
    27bc:	b	27b0 <elf_add+0xfa8>
    27c0:	mov	w24, w0
    27c4:	ldr	w0, [sp, #200]
    27c8:	ldr	w22, [sp, #264]
    27cc:	str	w26, [sp, #208]
    27d0:	str	w0, [sp, #232]
    27d4:	ldr	x21, [sp, #256]
    27d8:	ldp	x19, x20, [sp, #272]
    27dc:	ldr	x25, [sp, #304]
    27e0:	b	1c98 <elf_add+0x490>
    27e4:	bl	0 <__errno_location>
    27e8:	mov	x2, x0
    27ec:	adrp	x1, 0 <elf_nodebug>
    27f0:	mov	x0, x20
    27f4:	add	x1, x1, #0x0
    27f8:	ldr	w2, [x2]
    27fc:	blr	x19
    2800:	b	23d0 <elf_add+0xbc8>
    2804:	mov	x3, x20
    2808:	mov	x2, x19
    280c:	add	x1, sp, #0x240
    2810:	mov	x0, x21
    2814:	bl	0 <__asan_backtrace_release_view>
    2818:	b	22c0 <elf_add+0xab8>
    281c:	str	x6, [sp, #176]
    2820:	mov	x0, x20
    2824:	mov	w2, #0x0                   	// #0
    2828:	adrp	x1, 0 <elf_nodebug>
    282c:	add	x1, x1, #0x0
    2830:	blr	x19
    2834:	ldr	x6, [sp, #176]
    2838:	mov	x4, x20
    283c:	mov	x3, x19
    2840:	mov	x1, x27
    2844:	mov	x0, x21
    2848:	mov	x2, x6
    284c:	bl	0 <__asan_backtrace_free>
    2850:	mov	x1, x24
    2854:	mov	x4, x20
    2858:	mov	x3, x19
    285c:	mov	x0, x21
    2860:	mov	x2, #0x18                  	// #24
    2864:	mov	w24, #0x1                   	// #1
    2868:	bl	0 <__asan_backtrace_free>
    286c:	str	w24, [sp, #232]
    2870:	b	1c98 <elf_add+0x490>
    2874:	ldr	x27, [sp, #240]
    2878:	adrp	x25, 0 <elf_nodebug>
    287c:	add	x28, sp, #0x258
    2880:	add	x25, x25, #0x0
    2884:	add	x0, sp, #0x190
    2888:	mov	w24, #0x5                   	// #5
    288c:	mov	x26, #0x0                   	// #0
    2890:	str	x0, [sp, #200]
    2894:	ldr	x0, [x27, #8]
    2898:	cbnz	x0, 2914 <elf_add+0x110c>
    289c:	ldr	x3, [x27, #168]
    28a0:	cbz	x3, 2914 <elf_add+0x110c>
    28a4:	cbz	x26, 2ba8 <elf_add+0x13a0>
    28a8:	str	xzr, [sp, #400]
    28ac:	mov	x1, x25
    28b0:	str	xzr, [sp, #600]
    28b4:	cmp	x3, #0xb
    28b8:	mov	x2, #0x4                   	// #4
    28bc:	b.ls	2900 <elf_add+0x10f8>  // b.plast
    28c0:	ldr	x4, [x27, #176]
    28c4:	stp	x4, x3, [sp, #208]
    28c8:	mov	x0, x4
    28cc:	bl	0 <__asan_internal_memcmp>
    28d0:	cbnz	w0, 2900 <elf_add+0x10f8>
    28d4:	ldp	x6, x4, [sp, #200]
    28d8:	mov	x7, x28
    28dc:	ldr	x3, [sp, #216]
    28e0:	mov	x5, x20
    28e4:	mov	x0, x21
    28e8:	mov	x2, x3
    28ec:	mov	x3, x26
    28f0:	mov	x1, x4
    28f4:	mov	x4, x19
    28f8:	bl	1748 <elf_uncompress_zdebug.part.0>
    28fc:	cbz	w0, 2bcc <elf_add+0x13c4>
    2900:	ldr	x0, [sp, #400]
    2904:	str	x0, [x27, #16]
    2908:	ldr	x0, [sp, #600]
    290c:	str	x0, [x27, #8]
    2910:	str	wzr, [x27, #24]
    2914:	add	x27, x27, #0x20
    2918:	subs	w24, w24, #0x1
    291c:	b.ne	2894 <elf_add+0x108c>  // b.any
    2920:	mov	w25, #0x5                   	// #5
    2924:	ldr	x28, [x23, #8]
    2928:	cbz	x28, 2964 <elf_add+0x115c>
    292c:	ldr	w0, [x23, #24]
    2930:	cbz	w0, 2964 <elf_add+0x115c>
    2934:	cbz	x26, 2a18 <elf_add+0x1210>
    2938:	cmp	x28, #0x17
    293c:	b.ls	2950 <elf_add+0x1148>  // b.plast
    2940:	ldr	x27, [x23, #16]
    2944:	ldr	w4, [x27]
    2948:	cmp	w4, #0x1
    294c:	b.eq	2a3c <elf_add+0x1234>  // b.none
    2950:	mov	x0, #0x0                   	// #0
    2954:	mov	x24, #0x0                   	// #0
    2958:	sub	w22, w22, #0x1
    295c:	stp	x0, x24, [x23, #8]
    2960:	str	wzr, [x23, #24]
    2964:	add	x23, x23, #0x20
    2968:	subs	w25, w25, #0x1
    296c:	b.ne	2924 <elf_add+0x111c>  // b.any
    2970:	cbz	x26, 298c <elf_add+0x1184>
    2974:	mov	x1, x26
    2978:	mov	x4, x20
    297c:	mov	x3, x19
    2980:	mov	x0, x21
    2984:	mov	x2, #0x13b4                	// #5044
    2988:	bl	0 <__asan_backtrace_free>
    298c:	cbz	w22, 2b8c <elf_add+0x1384>
    2990:	mov	w24, #0x1                   	// #1
    2994:	ldrb	w0, [sp, #677]
    2998:	add	x6, sp, #0x368
    299c:	ldr	x1, [sp, #176]
    29a0:	cmp	w0, #0x2
    29a4:	cset	w0, eq  // eq = none
    29a8:	ldp	x3, x2, [x6]
    29ac:	ldp	x5, x4, [x6, #32]
    29b0:	str	w0, [sp, #32]
    29b4:	ldr	x0, [sp, #184]
    29b8:	str	x0, [sp, #64]
    29bc:	ldr	x0, [sp, #392]
    29c0:	str	x0, [sp, #40]
    29c4:	ldr	x0, [sp, #968]
    29c8:	str	x0, [sp, #8]
    29cc:	ldr	x0, [sp, #976]
    29d0:	str	x0, [sp]
    29d4:	ldr	x7, [sp, #936]
    29d8:	stp	x19, x20, [sp, #48]
    29dc:	ldr	x6, [sp, #944]
    29e0:	ldr	x0, [sp, #1000]
    29e4:	str	x0, [sp, #24]
    29e8:	ldr	x0, [sp, #1008]
    29ec:	str	x0, [sp, #16]
    29f0:	ldr	x0, [sp, #1192]
    29f4:	str	x0, [sp, #72]
    29f8:	mov	x0, x21
    29fc:	bl	0 <__asan_backtrace_dwarf_add>
    2a00:	cbz	w0, 2b84 <elf_add+0x137c>
    2a04:	ldr	x1, [sp, #1184]
    2a08:	mov	w0, #0x1                   	// #1
    2a0c:	mov	w23, w0
    2a10:	str	w0, [x1]
    2a14:	b	18c0 <elf_add+0xb8>
    2a18:	mov	x3, x20
    2a1c:	mov	x2, x19
    2a20:	mov	x0, x21
    2a24:	mov	x1, #0x13b4                	// #5044
    2a28:	bl	0 <__asan_backtrace_alloc>
    2a2c:	mov	x26, x0
    2a30:	cbz	x0, 2bcc <elf_add+0x13c4>
    2a34:	ldr	x28, [x23, #8]
    2a38:	b	2938 <elf_add+0x1130>
    2a3c:	ldr	x1, [x27, #8]
    2a40:	mov	x3, x20
    2a44:	mov	x2, x19
    2a48:	mov	x0, x21
    2a4c:	str	w4, [sp, #200]
    2a50:	bl	0 <__asan_backtrace_alloc>
    2a54:	mov	x24, x0
    2a58:	cbz	x0, 2bcc <elf_add+0x13c4>
    2a5c:	ldr	x4, [x27, #8]
    2a60:	mov	x3, x0
    2a64:	sub	x1, x28, #0x18
    2a68:	mov	x2, x26
    2a6c:	add	x0, x27, #0x18
    2a70:	bl	958 <elf_zlib_inflate_and_verify>
    2a74:	cbz	w0, 2950 <elf_add+0x1148>
    2a78:	ldr	x0, [x27, #8]
    2a7c:	b	2958 <elf_add+0x1150>
    2a80:	mov	w23, #0xffffffff            	// #-1
    2a84:	b	18c0 <elf_add+0xb8>
    2a88:	ldr	x1, [sp, #216]
    2a8c:	mov	x3, x20
    2a90:	mov	x2, x19
    2a94:	mov	x0, x21
    2a98:	str	xzr, [sp, #288]
    2a9c:	bl	0 <__asan_backtrace_release_view>
    2aa0:	str	wzr, [sp, #324]
    2aa4:	ldr	x1, [sp, #224]
    2aa8:	mov	x3, x20
    2aac:	mov	x2, x19
    2ab0:	mov	x0, x21
    2ab4:	bl	0 <__asan_backtrace_release_view>
    2ab8:	str	wzr, [sp, #192]
    2abc:	str	wzr, [sp, #208]
    2ac0:	str	wzr, [sp, #232]
    2ac4:	str	xzr, [sp, #312]
    2ac8:	b	23e0 <elf_add+0xbd8>
    2acc:	mov	x0, x1
    2ad0:	b	2ad8 <elf_add+0x12d0>
    2ad4:	mov	x0, x2
    2ad8:	ldar	x2, [x0]
    2adc:	cbnz	x2, 2ad4 <elf_add+0x12cc>
    2ae0:	ldxr	x2, [x0]
    2ae4:	cbnz	x2, 2af0 <elf_add+0x12e8>
    2ae8:	stlxr	w3, x24, [x0]
    2aec:	cbnz	w3, 2ae0 <elf_add+0x12d8>
    2af0:	dmb	ish
    2af4:	cmp	x2, #0x0
    2af8:	b.ne	2acc <elf_add+0x12c4>  // b.any
    2afc:	mov	w0, #0x1                   	// #1
    2b00:	str	w0, [sp, #232]
    2b04:	b	2154 <elf_add+0x94c>
    2b08:	mov	w0, #0x1                   	// #1
    2b0c:	ldr	w22, [sp, #264]
    2b10:	mov	w24, #0x0                   	// #0
    2b14:	str	w0, [sp, #200]
    2b18:	str	w26, [sp, #208]
    2b1c:	str	w7, [sp, #232]
    2b20:	ldr	x21, [sp, #256]
    2b24:	ldp	x19, x20, [sp, #272]
    2b28:	ldr	x25, [sp, #304]
    2b2c:	b	1c98 <elf_add+0x490>
    2b30:	mov	x2, x20
    2b34:	mov	x1, x19
    2b38:	b	2310 <elf_add+0xb08>
    2b3c:	mov	w24, #0x1                   	// #1
    2b40:	b	24ec <elf_add+0xce4>
    2b44:	mov	w0, #0x1                   	// #1
    2b48:	str	x24, [x1]
    2b4c:	str	w0, [sp, #232]
    2b50:	b	2154 <elf_add+0x94c>
    2b54:	mov	x3, x20
    2b58:	mov	x2, x19
    2b5c:	mov	x0, x21
    2b60:	mov	x1, #0x0                   	// #0
    2b64:	bl	0 <__asan_backtrace_alloc>
    2b68:	mov	x27, x0
    2b6c:	cbz	x0, 2850 <elf_add+0x1048>
    2b70:	mov	x4, #0x0                   	// #0
    2b74:	b	275c <elf_add+0xf54>
    2b78:	mov	w24, #0x1                   	// #1
    2b7c:	str	w24, [sp, #232]
    2b80:	b	1c98 <elf_add+0x490>
    2b84:	mov	w22, #0xffffffff            	// #-1
    2b88:	b	24ec <elf_add+0xce4>
    2b8c:	ldr	x1, [sp, #192]
    2b90:	mov	x3, x20
    2b94:	mov	x2, x19
    2b98:	mov	x0, x21
    2b9c:	mov	w24, #0x0                   	// #0
    2ba0:	bl	0 <__asan_backtrace_release_view>
    2ba4:	b	2994 <elf_add+0x118c>
    2ba8:	mov	x3, x20
    2bac:	mov	x2, x19
    2bb0:	mov	x0, x21
    2bb4:	mov	x1, #0x13b4                	// #5044
    2bb8:	bl	0 <__asan_backtrace_alloc>
    2bbc:	mov	x26, x0
    2bc0:	cbz	x0, 2bcc <elf_add+0x13c4>
    2bc4:	ldr	x3, [x27, #168]
    2bc8:	b	28a8 <elf_add+0x10a0>
    2bcc:	mov	w24, #0x1                   	// #1
    2bd0:	mov	w22, #0xffffffff            	// #-1
    2bd4:	b	24ec <elf_add+0xce4>

0000000000002bd8 <phdr_callback>:
    2bd8:	sub	sp, sp, #0x70
    2bdc:	stp	x29, x30, [sp, #48]
    2be0:	add	x29, sp, #0x30
    2be4:	ldr	w6, [x2, #56]
    2be8:	str	x21, [sp, #80]
    2bec:	ldr	x21, [x0, #8]
    2bf0:	stp	x19, x20, [sp, #64]
    2bf4:	cmn	w6, #0x1
    2bf8:	mov	x20, x0
    2bfc:	mov	x19, x2
    2c00:	cbz	x21, 2c0c <phdr_callback+0x34>
    2c04:	ldrb	w0, [x21]
    2c08:	cbnz	w0, 2c98 <phdr_callback+0xc0>
    2c0c:	b.eq	2c80 <phdr_callback+0xa8>  // b.none
    2c10:	ldr	x21, [x19, #48]
    2c14:	mov	w0, #0xffffffff            	// #-1
    2c18:	str	w0, [x19, #56]
    2c1c:	add	x1, sp, #0x64
    2c20:	mov	w2, w6
    2c24:	ldr	x0, [x19]
    2c28:	add	x6, sp, #0x68
    2c2c:	ldr	x3, [x20]
    2c30:	str	x1, [sp]
    2c34:	mov	x1, x21
    2c38:	ldr	x4, [x19, #8]
    2c3c:	str	xzr, [sp, #8]
    2c40:	ldr	x5, [x19, #16]
    2c44:	str	wzr, [sp, #16]
    2c48:	ldr	x7, [x19, #32]
    2c4c:	str	wzr, [sp, #24]
    2c50:	str	xzr, [sp, #32]
    2c54:	str	wzr, [sp, #40]
    2c58:	bl	1808 <elf_add>
    2c5c:	cbz	w0, 2c80 <phdr_callback+0xa8>
    2c60:	ldr	w0, [sp, #100]
    2c64:	cbz	w0, 2c80 <phdr_callback+0xa8>
    2c68:	ldr	x1, [x19, #40]
    2c6c:	mov	w2, #0x1                   	// #1
    2c70:	ldr	x0, [x19, #24]
    2c74:	str	w2, [x1]
    2c78:	ldr	x1, [sp, #104]
    2c7c:	str	x1, [x0]
    2c80:	mov	w0, #0x0                   	// #0
    2c84:	ldp	x29, x30, [sp, #48]
    2c88:	ldp	x19, x20, [sp, #64]
    2c8c:	ldr	x21, [sp, #80]
    2c90:	add	sp, sp, #0x70
    2c94:	ret
    2c98:	ldp	x1, x2, [x2, #8]
    2c9c:	b.ne	2cb8 <phdr_callback+0xe0>  // b.any
    2ca0:	add	x3, sp, #0x60
    2ca4:	mov	x0, x21
    2ca8:	bl	0 <__asan_backtrace_open>
    2cac:	mov	w6, w0
    2cb0:	tbz	w0, #31, 2c1c <phdr_callback+0x44>
    2cb4:	b	2c80 <phdr_callback+0xa8>
    2cb8:	mov	w0, w6
    2cbc:	bl	0 <__asan_backtrace_close>
    2cc0:	ldp	x1, x2, [x19, #8]
    2cc4:	mov	w0, #0xffffffff            	// #-1
    2cc8:	ldr	x21, [x20, #8]
    2ccc:	str	w0, [x19, #56]
    2cd0:	add	x3, sp, #0x60
    2cd4:	mov	x0, x21
    2cd8:	bl	0 <__asan_backtrace_open>
    2cdc:	mov	w6, w0
    2ce0:	tbz	w0, #31, 2c1c <phdr_callback+0x44>
    2ce4:	b	2c80 <phdr_callback+0xa8>

0000000000002ce8 <__asan_backtrace_uncompress_zdebug>:
    2ce8:	stp	x29, x30, [sp, #-80]!
    2cec:	mov	x29, sp
    2cf0:	stp	x19, x20, [sp, #16]
    2cf4:	mov	x20, x3
    2cf8:	mov	x3, x4
    2cfc:	stp	x21, x22, [sp, #32]
    2d00:	mov	x21, x4
    2d04:	mov	x22, x0
    2d08:	stp	x23, x24, [sp, #48]
    2d0c:	mov	x23, x2
    2d10:	mov	x24, x5
    2d14:	mov	x2, x20
    2d18:	stp	x25, x26, [sp, #64]
    2d1c:	mov	x26, x1
    2d20:	mov	x25, x6
    2d24:	mov	x1, #0x13b4                	// #5044
    2d28:	bl	0 <__asan_backtrace_alloc>
    2d2c:	cbz	x0, 2dc0 <__asan_backtrace_uncompress_zdebug+0xd8>
    2d30:	str	xzr, [x24]
    2d34:	mov	x19, x0
    2d38:	str	xzr, [x25]
    2d3c:	cmp	x23, #0xb
    2d40:	b.hi	2d7c <__asan_backtrace_uncompress_zdebug+0x94>  // b.pmore
    2d44:	mov	w23, #0x1                   	// #1
    2d48:	mov	x4, x21
    2d4c:	mov	x3, x20
    2d50:	mov	x1, x19
    2d54:	mov	x0, x22
    2d58:	mov	x2, #0x13b4                	// #5044
    2d5c:	bl	0 <__asan_backtrace_free>
    2d60:	mov	w0, w23
    2d64:	ldp	x19, x20, [sp, #16]
    2d68:	ldp	x21, x22, [sp, #32]
    2d6c:	ldp	x23, x24, [sp, #48]
    2d70:	ldp	x25, x26, [sp, #64]
    2d74:	ldp	x29, x30, [sp], #80
    2d78:	ret
    2d7c:	adrp	x1, 0 <elf_nodebug>
    2d80:	mov	x0, x26
    2d84:	add	x1, x1, #0x0
    2d88:	mov	x2, #0x4                   	// #4
    2d8c:	bl	0 <__asan_internal_memcmp>
    2d90:	cbnz	w0, 2d44 <__asan_backtrace_uncompress_zdebug+0x5c>
    2d94:	mov	x2, x23
    2d98:	mov	x7, x25
    2d9c:	mov	x6, x24
    2da0:	mov	x1, x26
    2da4:	mov	x5, x21
    2da8:	mov	x4, x20
    2dac:	mov	x3, x19
    2db0:	mov	x0, x22
    2db4:	bl	1748 <elf_uncompress_zdebug.part.0>
    2db8:	mov	w23, w0
    2dbc:	b	2d48 <__asan_backtrace_uncompress_zdebug+0x60>
    2dc0:	mov	w23, #0x0                   	// #0
    2dc4:	b	2d60 <__asan_backtrace_uncompress_zdebug+0x78>

0000000000002dc8 <__asan_backtrace_initialize>:
    2dc8:	sub	sp, sp, #0xe0
    2dcc:	mov	w6, #0x1                   	// #1
    2dd0:	stp	x29, x30, [sp, #48]
    2dd4:	add	x29, sp, #0x30
    2dd8:	stp	x23, x24, [sp, #96]
    2ddc:	adrp	x24, 0 <elf_nodebug>
    2de0:	add	x8, x24, #0x0
    2de4:	str	w6, [sp, #16]
    2de8:	mov	x23, x5
    2dec:	str	wzr, [sp, #24]
    2df0:	mov	x5, x4
    2df4:	str	xzr, [sp, #32]
    2df8:	str	wzr, [sp, #40]
    2dfc:	stp	x27, x28, [sp, #128]
    2e00:	add	x28, sp, #0x94
    2e04:	add	x27, sp, #0x98
    2e08:	stp	x28, xzr, [sp]
    2e0c:	mov	x6, x27
    2e10:	stp	x25, x26, [sp, #112]
    2e14:	add	x26, sp, #0x90
    2e18:	mov	x25, x1
    2e1c:	mov	x7, x26
    2e20:	stp	x19, x20, [sp, #64]
    2e24:	mov	x19, x0
    2e28:	mov	w20, w2
    2e2c:	stp	x21, x22, [sp, #80]
    2e30:	mov	x22, x3
    2e34:	mov	x21, x4
    2e38:	mov	x4, x3
    2e3c:	mov	x3, #0x0                   	// #0
    2e40:	str	x8, [sp, #152]
    2e44:	bl	1808 <elf_add>
    2e48:	cbz	w0, 2eb4 <__asan_backtrace_initialize+0xec>
    2e4c:	cmp	w0, #0x0
    2e50:	add	x1, sp, #0xa0
    2e54:	csinv	w20, w20, wzr, lt  // lt = tstop
    2e58:	adrp	x0, 0 <elf_nodebug>
    2e5c:	add	x0, x0, #0x0
    2e60:	stp	x19, x22, [sp, #160]
    2e64:	stp	x21, x27, [sp, #176]
    2e68:	stp	x26, x28, [sp, #192]
    2e6c:	str	x25, [sp, #208]
    2e70:	str	w20, [sp, #216]
    2e74:	bl	0 <dl_iterate_phdr>
    2e78:	ldr	w0, [x19, #8]
    2e7c:	cbnz	w0, 2ed4 <__asan_backtrace_initialize+0x10c>
    2e80:	ldr	w0, [sp, #144]
    2e84:	cbnz	w0, 2f04 <__asan_backtrace_initialize+0x13c>
    2e88:	ldr	x0, [x19, #40]
    2e8c:	cbz	x0, 2f34 <__asan_backtrace_initialize+0x16c>
    2e90:	ldr	x0, [x19, #24]
    2e94:	str	x0, [x23]
    2e98:	cmp	x0, #0x0
    2e9c:	add	x24, x24, #0x0
    2ea0:	ccmp	x0, x24, #0x4, ne  // ne = any
    2ea4:	mov	w0, #0x1                   	// #1
    2ea8:	b.ne	2eb4 <__asan_backtrace_initialize+0xec>  // b.any
    2eac:	ldr	x1, [sp, #152]
    2eb0:	str	x1, [x23]
    2eb4:	ldp	x29, x30, [sp, #48]
    2eb8:	ldp	x19, x20, [sp, #64]
    2ebc:	ldp	x21, x22, [sp, #80]
    2ec0:	ldp	x23, x24, [sp, #96]
    2ec4:	ldp	x25, x26, [sp, #112]
    2ec8:	ldp	x27, x28, [sp, #128]
    2ecc:	add	sp, sp, #0xe0
    2ed0:	ret
    2ed4:	ldr	w1, [sp, #144]
    2ed8:	add	x0, x19, #0x28
    2edc:	cbz	w1, 2f14 <__asan_backtrace_initialize+0x14c>
    2ee0:	adrp	x1, 0 <elf_nodebug>
    2ee4:	add	x1, x1, #0x0
    2ee8:	stlr	x1, [x0]
    2eec:	ldr	w0, [x19, #8]
    2ef0:	cbz	w0, 2e90 <__asan_backtrace_initialize+0xc8>
    2ef4:	add	x19, x19, #0x18
    2ef8:	ldar	x0, [x19]
    2efc:	str	x0, [x23]
    2f00:	b	2e98 <__asan_backtrace_initialize+0xd0>
    2f04:	adrp	x0, 0 <elf_nodebug>
    2f08:	add	x0, x0, #0x0
    2f0c:	str	x0, [x19, #40]
    2f10:	b	2e90 <__asan_backtrace_initialize+0xc8>
    2f14:	adrp	x1, 0 <elf_nodebug>
    2f18:	add	x1, x1, #0x0
    2f1c:	ldxr	x2, [x0]
    2f20:	cbnz	x2, 2f2c <__asan_backtrace_initialize+0x164>
    2f24:	stlxr	w3, x1, [x0]
    2f28:	cbnz	w3, 2f1c <__asan_backtrace_initialize+0x154>
    2f2c:	dmb	ish
    2f30:	b	2eec <__asan_backtrace_initialize+0x124>
    2f34:	adrp	x0, 0 <elf_nodebug>
    2f38:	add	x0, x0, #0x0
    2f3c:	str	x0, [x19, #40]
    2f40:	b	2e90 <__asan_backtrace_initialize+0xc8>

fileline.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fileline_initialize>:
   0:	stp	x29, x30, [sp, #-160]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x0
  10:	ldr	w0, [x0, #8]
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x22, x1
  1c:	stp	x23, x24, [sp, #48]
  20:	mov	x23, x2
  24:	cbnz	w0, 80 <fileline_initialize+0x80>
  28:	ldr	w0, [x20, #56]
  2c:	cbnz	w0, 54 <fileline_initialize+0x54>
  30:	ldr	x1, [x20, #24]
  34:	str	x1, [sp, #88]
  38:	mov	w0, #0x1                   	// #1
  3c:	cbz	x1, a8 <fileline_initialize+0xa8>
  40:	ldp	x19, x20, [sp, #16]
  44:	ldp	x21, x22, [sp, #32]
  48:	ldp	x23, x24, [sp, #48]
  4c:	ldp	x29, x30, [sp], #160
  50:	ret
  54:	mov	x0, x23
  58:	mov	w2, #0xffffffff            	// #-1
  5c:	adrp	x1, 0 <fileline_initialize>
  60:	add	x1, x1, #0x0
  64:	blr	x22
  68:	mov	w0, #0x0                   	// #0
  6c:	ldp	x19, x20, [sp, #16]
  70:	ldp	x21, x22, [sp, #32]
  74:	ldp	x23, x24, [sp, #48]
  78:	ldp	x29, x30, [sp], #160
  7c:	ret
  80:	add	x0, x20, #0x38
  84:	ldar	w0, [x0]
  88:	cbnz	w0, 54 <fileline_initialize+0x54>
  8c:	ldr	w0, [x20, #8]
  90:	cbz	w0, 30 <fileline_initialize+0x30>
  94:	add	x0, x20, #0x18
  98:	ldar	x1, [x0]
  9c:	str	x1, [sp, #88]
  a0:	mov	w0, #0x1                   	// #1
  a4:	cbnz	x1, 40 <fileline_initialize+0x40>
  a8:	adrp	x24, 0 <fileline_initialize>
  ac:	add	x24, x24, #0x0
  b0:	stp	x25, x26, [sp, #64]
  b4:	adrp	x25, 0 <fileline_initialize>
  b8:	add	x26, sp, #0x54
  bc:	add	x25, x25, #0x0
  c0:	mov	w19, #0x0                   	// #0
  c4:	cmp	w19, #0x3
  c8:	b.eq	1c0 <fileline_initialize+0x1c0>  // b.none
  cc:	cmp	w19, #0x4
  d0:	b.eq	19c <fileline_initialize+0x19c>  // b.none
  d4:	cmp	w19, #0x1
  d8:	b.eq	158 <fileline_initialize+0x158>  // b.none
  dc:	cmp	w19, #0x2
  e0:	b.ne	150 <fileline_initialize+0x150>  // b.any
  e4:	adrp	x21, 0 <fileline_initialize>
  e8:	add	x21, x21, #0x0
  ec:	mov	x3, x26
  f0:	mov	x2, x23
  f4:	mov	x1, x22
  f8:	mov	x0, x21
  fc:	bl	0 <__asan_backtrace_open>
 100:	tbnz	w0, #31, 190 <fileline_initialize+0x190>
 104:	mov	w2, w0
 108:	mov	x4, x23
 10c:	mov	x3, x22
 110:	mov	x1, x21
 114:	add	x5, sp, #0x58
 118:	mov	x0, x20
 11c:	bl	0 <__asan_backtrace_initialize>
 120:	cbz	w0, 178 <fileline_initialize+0x178>
 124:	ldr	w0, [x20, #8]
 128:	ldr	x1, [sp, #88]
 12c:	cbnz	w0, 1c8 <fileline_initialize+0x1c8>
 130:	ldp	x25, x26, [sp, #64]
 134:	str	x1, [x20, #24]
 138:	mov	w0, #0x1                   	// #1
 13c:	ldp	x19, x20, [sp, #16]
 140:	ldp	x21, x22, [sp, #32]
 144:	ldp	x23, x24, [sp, #48]
 148:	ldp	x29, x30, [sp], #160
 14c:	ret
 150:	ldr	x21, [x20]
 154:	cbnz	x21, ec <fileline_initialize+0xec>
 158:	add	w19, w19, #0x1
 15c:	cmp	w19, #0x5
 160:	b.ne	c4 <fileline_initialize+0xc4>  // b.any
 164:	ldr	x1, [x20]
 168:	mov	x0, x23
 16c:	cbz	x1, 1dc <fileline_initialize+0x1dc>
 170:	mov	w2, #0x2                   	// #2
 174:	blr	x22
 178:	ldr	w0, [x20, #8]
 17c:	cbnz	w0, 1f0 <fileline_initialize+0x1f0>
 180:	mov	w1, #0x1                   	// #1
 184:	ldp	x25, x26, [sp, #64]
 188:	str	w1, [x20, #56]
 18c:	b	40 <fileline_initialize+0x40>
 190:	ldr	w0, [sp, #84]
 194:	cbnz	w0, 158 <fileline_initialize+0x158>
 198:	b	178 <fileline_initialize+0x178>
 19c:	bl	0 <getpid>
 1a0:	sxtw	x3, w0
 1a4:	add	x1, sp, #0x60
 1a8:	mov	x2, x24
 1ac:	mov	x21, x1
 1b0:	mov	x0, x1
 1b4:	mov	x1, #0x40                  	// #64
 1b8:	bl	0 <snprintf>
 1bc:	b	ec <fileline_initialize+0xec>
 1c0:	mov	x21, x25
 1c4:	b	ec <fileline_initialize+0xec>
 1c8:	add	x20, x20, #0x18
 1cc:	stlr	x1, [x20]
 1d0:	mov	w0, #0x1                   	// #1
 1d4:	ldp	x25, x26, [sp, #64]
 1d8:	b	40 <fileline_initialize+0x40>
 1dc:	adrp	x1, 0 <fileline_initialize>
 1e0:	mov	w2, #0x0                   	// #0
 1e4:	add	x1, x1, #0x0
 1e8:	blr	x22
 1ec:	b	178 <fileline_initialize+0x178>
 1f0:	mov	w0, #0x1                   	// #1
 1f4:	add	x20, x20, #0x38
 1f8:	stlr	w0, [x20]
 1fc:	ldp	x25, x26, [sp, #64]
 200:	mov	w0, #0x0                   	// #0
 204:	b	40 <fileline_initialize+0x40>

0000000000000208 <__asan_backtrace_pcinfo>:
 208:	stp	x29, x30, [sp, #-64]!
 20c:	mov	x29, sp
 210:	stp	x19, x20, [sp, #16]
 214:	mov	x20, x3
 218:	mov	x19, x0
 21c:	stp	x21, x22, [sp, #32]
 220:	mov	x22, x1
 224:	mov	x21, x4
 228:	mov	x1, x3
 22c:	str	x23, [sp, #48]
 230:	mov	x23, x2
 234:	mov	x2, x4
 238:	bl	0 <fileline_initialize>
 23c:	cbz	w0, 278 <__asan_backtrace_pcinfo+0x70>
 240:	ldr	w0, [x19, #56]
 244:	cbnz	w0, 278 <__asan_backtrace_pcinfo+0x70>
 248:	mov	x4, x21
 24c:	mov	x3, x20
 250:	mov	x2, x23
 254:	mov	x1, x22
 258:	mov	x0, x19
 25c:	ldr	x5, [x19, #24]
 260:	ldp	x19, x20, [sp, #16]
 264:	mov	x16, x5
 268:	ldp	x21, x22, [sp, #32]
 26c:	ldr	x23, [sp, #48]
 270:	ldp	x29, x30, [sp], #64
 274:	br	x16
 278:	mov	w0, #0x0                   	// #0
 27c:	ldp	x19, x20, [sp, #16]
 280:	ldp	x21, x22, [sp, #32]
 284:	ldr	x23, [sp, #48]
 288:	ldp	x29, x30, [sp], #64
 28c:	ret

0000000000000290 <__asan_backtrace_syminfo>:
 290:	stp	x29, x30, [sp, #-64]!
 294:	mov	x29, sp
 298:	stp	x19, x20, [sp, #16]
 29c:	mov	x20, x3
 2a0:	mov	x19, x0
 2a4:	stp	x21, x22, [sp, #32]
 2a8:	mov	x22, x2
 2ac:	mov	x21, x4
 2b0:	mov	x2, x4
 2b4:	str	x23, [sp, #48]
 2b8:	mov	x23, x1
 2bc:	mov	x1, x3
 2c0:	bl	0 <fileline_initialize>
 2c4:	cbz	w0, 2f4 <__asan_backtrace_syminfo+0x64>
 2c8:	ldr	w1, [x19, #56]
 2cc:	mov	w0, #0x0                   	// #0
 2d0:	cbnz	w1, 2f4 <__asan_backtrace_syminfo+0x64>
 2d4:	ldr	x5, [x19, #40]
 2d8:	mov	x0, x19
 2dc:	mov	x4, x21
 2e0:	mov	x3, x20
 2e4:	mov	x2, x22
 2e8:	mov	x1, x23
 2ec:	blr	x5
 2f0:	mov	w0, #0x1                   	// #1
 2f4:	ldp	x19, x20, [sp, #16]
 2f8:	ldp	x21, x22, [sp, #32]
 2fc:	ldr	x23, [sp, #48]
 300:	ldp	x29, x30, [sp], #64
 304:	ret

mmap.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <backtrace_free_locked.part.0>:
   0:	ldr	x9, [x0, #64]
   4:	add	x4, x0, #0x40
   8:	mov	x5, #0x0                   	// #0
   c:	mov	x3, x9
  10:	cbnz	x9, 2c <backtrace_free_locked.part.0+0x2c>
  14:	b	60 <backtrace_free_locked.part.0+0x60>
  18:	ldr	x7, [x4]
  1c:	ldr	x8, [x3, #8]
  20:	ldr	x7, [x7, #8]
  24:	cmp	x8, x7
  28:	csel	x4, x4, x6, cs  // cs = hs, nlast
  2c:	mov	x6, x3
  30:	add	x5, x5, #0x1
  34:	ldr	x3, [x3]
  38:	cbnz	x3, 18 <backtrace_free_locked.part.0+0x18>
  3c:	cmp	x5, #0xf
  40:	b.ls	60 <backtrace_free_locked.part.0+0x60>  // b.plast
  44:	ldr	x3, [x4]
  48:	ldr	x5, [x3, #8]
  4c:	cmp	x5, x2
  50:	b.cs	68 <backtrace_free_locked.part.0+0x68>  // b.hs, b.nlast
  54:	ldr	x3, [x3]
  58:	str	x3, [x4]
  5c:	ldr	x9, [x0, #64]
  60:	stp	x9, x2, [x1]
  64:	str	x1, [x0, #64]
  68:	ret
  6c:	nop

0000000000000070 <__asan_backtrace_free>:
  70:	stp	x29, x30, [sp, #-48]!
  74:	mov	x29, sp
  78:	stp	x19, x20, [sp, #16]
  7c:	mov	x19, x0
  80:	mov	x20, x2
  84:	str	x21, [sp, #32]
  88:	mov	x0, #0xffff                	// #65535
  8c:	mov	x21, x1
  90:	cmp	x2, x0
  94:	b.hi	b8 <__asan_backtrace_free+0x48>  // b.pmore
  98:	ldr	w0, [x19, #8]
  9c:	cbnz	w0, d8 <__asan_backtrace_free+0x68>
  a0:	cmp	x2, #0xf
  a4:	b.hi	120 <__asan_backtrace_free+0xb0>  // b.pmore
  a8:	ldp	x19, x20, [sp, #16]
  ac:	ldr	x21, [sp, #32]
  b0:	ldp	x29, x30, [sp], #48
  b4:	ret
  b8:	bl	0 <getpagesize>
  bc:	sxtw	x0, w0
  c0:	orr	x1, x21, x20
  c4:	sub	x0, x0, #0x1
  c8:	tst	x0, x1
  cc:	b.eq	134 <__asan_backtrace_free+0xc4>  // b.none
  d0:	ldr	w0, [x19, #8]
  d4:	cbz	w0, 120 <__asan_backtrace_free+0xb0>
  d8:	add	x0, x19, #0x3c
  dc:	mov	w2, #0x1                   	// #1
  e0:	ldxr	w1, [x0]
  e4:	stxr	w3, w2, [x0]
  e8:	cbnz	w3, e0 <__asan_backtrace_free+0x70>
  ec:	dmb	ish
  f0:	cbnz	w1, a8 <__asan_backtrace_free+0x38>
  f4:	cmp	x20, #0xf
  f8:	b.hi	120 <__asan_backtrace_free+0xb0>  // b.pmore
  fc:	nop
 100:	ldr	w0, [x19, #8]
 104:	cbz	w0, a8 <__asan_backtrace_free+0x38>
 108:	add	x19, x19, #0x3c
 10c:	stlr	wzr, [x19]
 110:	ldp	x19, x20, [sp, #16]
 114:	ldr	x21, [sp, #32]
 118:	ldp	x29, x30, [sp], #48
 11c:	ret
 120:	mov	x2, x20
 124:	mov	x1, x21
 128:	mov	x0, x19
 12c:	bl	0 <backtrace_free_locked.part.0>
 130:	b	100 <__asan_backtrace_free+0x90>
 134:	mov	x1, x20
 138:	mov	x0, x21
 13c:	bl	0 <munmap>
 140:	cbnz	w0, d0 <__asan_backtrace_free+0x60>
 144:	b	a8 <__asan_backtrace_free+0x38>

0000000000000148 <__asan_backtrace_alloc>:
 148:	stp	x29, x30, [sp, #-64]!
 14c:	mov	x29, sp
 150:	stp	x19, x20, [sp, #16]
 154:	mov	x20, x1
 158:	ldr	w1, [x0, #8]
 15c:	stp	x21, x22, [sp, #32]
 160:	mov	x22, x3
 164:	stp	x23, x24, [sp, #48]
 168:	mov	x23, x0
 16c:	mov	x24, x2
 170:	cbnz	w1, 1e0 <__asan_backtrace_alloc+0x98>
 174:	ldr	x4, [x0, #64]
 178:	add	x6, x0, #0x40
 17c:	cbnz	x4, 18c <__asan_backtrace_alloc+0x44>
 180:	b	218 <__asan_backtrace_alloc+0xd0>
 184:	mov	x6, x19
 188:	cbz	x4, 208 <__asan_backtrace_alloc+0xc0>
 18c:	ldr	x5, [x4, #8]
 190:	mov	x19, x4
 194:	ldr	x4, [x4]
 198:	cmp	x5, x20
 19c:	b.cc	184 <__asan_backtrace_alloc+0x3c>  // b.lo, b.ul, b.last
 1a0:	add	x1, x20, #0x7
 1a4:	str	x4, [x6]
 1a8:	and	x1, x1, #0xfffffffffffffff8
 1ac:	cmp	x5, x1
 1b0:	b.ls	1c0 <__asan_backtrace_alloc+0x78>  // b.plast
 1b4:	sub	x2, x5, x1
 1b8:	cmp	x2, #0xf
 1bc:	b.hi	284 <__asan_backtrace_alloc+0x13c>  // b.pmore
 1c0:	ldr	w0, [x23, #8]
 1c4:	cbnz	w0, 2bc <__asan_backtrace_alloc+0x174>
 1c8:	mov	x0, x19
 1cc:	ldp	x19, x20, [sp, #16]
 1d0:	ldp	x21, x22, [sp, #32]
 1d4:	ldp	x23, x24, [sp, #48]
 1d8:	ldp	x29, x30, [sp], #64
 1dc:	ret
 1e0:	add	x0, x0, #0x3c
 1e4:	mov	w2, #0x1                   	// #1
 1e8:	ldxr	w1, [x0]
 1ec:	stxr	w3, w2, [x0]
 1f0:	cbnz	w3, 1e8 <__asan_backtrace_alloc+0xa0>
 1f4:	dmb	ish
 1f8:	cbnz	w1, 218 <__asan_backtrace_alloc+0xd0>
 1fc:	ldr	x4, [x23, #64]
 200:	add	x6, x23, #0x40
 204:	cbnz	x4, 18c <__asan_backtrace_alloc+0x44>
 208:	ldr	w0, [x23, #8]
 20c:	cbz	w0, 218 <__asan_backtrace_alloc+0xd0>
 210:	add	x0, x23, #0x3c
 214:	stlr	wzr, [x0]
 218:	bl	0 <getpagesize>
 21c:	sub	x21, x20, #0x1
 220:	sxtw	x1, w0
 224:	mov	x5, #0x0                   	// #0
 228:	add	x21, x21, x1
 22c:	neg	x1, x1
 230:	and	x21, x21, x1
 234:	mov	w4, #0xffffffff            	// #-1
 238:	mov	x1, x21
 23c:	mov	w3, #0x22                  	// #34
 240:	mov	w2, #0x3                   	// #3
 244:	mov	x0, #0x0                   	// #0
 248:	bl	0 <mmap>
 24c:	mov	x19, x0
 250:	cmn	x0, #0x1
 254:	b.eq	294 <__asan_backtrace_alloc+0x14c>  // b.none
 258:	add	x1, x20, #0x7
 25c:	and	x1, x1, #0xfffffffffffffff8
 260:	cmp	x21, x1
 264:	b.ls	1c8 <__asan_backtrace_alloc+0x80>  // b.plast
 268:	sub	x2, x21, x1
 26c:	mov	x4, x22
 270:	add	x1, x0, x1
 274:	mov	x3, x24
 278:	mov	x0, x23
 27c:	bl	70 <__asan_backtrace_free>
 280:	b	1c8 <__asan_backtrace_alloc+0x80>
 284:	add	x1, x19, x1
 288:	mov	x0, x23
 28c:	bl	0 <backtrace_free_locked.part.0>
 290:	b	1c0 <__asan_backtrace_alloc+0x78>
 294:	mov	x19, #0x0                   	// #0
 298:	cbz	x24, 1c8 <__asan_backtrace_alloc+0x80>
 29c:	bl	0 <__errno_location>
 2a0:	mov	x2, x0
 2a4:	adrp	x1, 0 <backtrace_free_locked.part.0>
 2a8:	mov	x0, x22
 2ac:	add	x1, x1, #0x0
 2b0:	ldr	w2, [x2]
 2b4:	blr	x24
 2b8:	b	1c8 <__asan_backtrace_alloc+0x80>
 2bc:	add	x0, x23, #0x3c
 2c0:	stlr	wzr, [x0]
 2c4:	b	1c8 <__asan_backtrace_alloc+0x80>

00000000000002c8 <__asan_backtrace_vector_grow>:
 2c8:	stp	x29, x30, [sp, #-80]!
 2cc:	mov	x29, sp
 2d0:	ldp	x6, x5, [x4, #8]
 2d4:	stp	x19, x20, [sp, #16]
 2d8:	mov	x19, x4
 2dc:	stp	x21, x22, [sp, #32]
 2e0:	mov	x21, x1
 2e4:	add	x20, x1, x6
 2e8:	cmp	x5, x1
 2ec:	b.cc	314 <__asan_backtrace_vector_grow+0x4c>  // b.lo, b.ul, b.last
 2f0:	ldr	x22, [x4]
 2f4:	add	x22, x22, x6
 2f8:	sub	x5, x5, x21
 2fc:	stp	x20, x5, [x19, #8]
 300:	mov	x0, x22
 304:	ldp	x19, x20, [sp, #16]
 308:	ldp	x21, x22, [sp, #32]
 30c:	ldp	x29, x30, [sp], #80
 310:	ret
 314:	stp	x23, x24, [sp, #48]
 318:	mov	x23, x0
 31c:	mov	x24, x2
 320:	str	x25, [sp, #64]
 324:	mov	x25, x3
 328:	cbnz	x6, 394 <__asan_backtrace_vector_grow+0xcc>
 32c:	lsl	x20, x20, #4
 330:	mov	x3, x25
 334:	mov	x2, x24
 338:	mov	x1, x20
 33c:	mov	x0, x23
 340:	bl	148 <__asan_backtrace_alloc>
 344:	mov	x22, x0
 348:	cbz	x0, 3c8 <__asan_backtrace_vector_grow+0x100>
 34c:	ldp	x1, x6, [x19]
 350:	cbz	x1, 37c <__asan_backtrace_vector_grow+0xb4>
 354:	mov	x2, x6
 358:	bl	0 <__asan_internal_memcpy>
 35c:	ldp	x1, x5, [x19]
 360:	mov	x4, x25
 364:	ldr	x2, [x19, #16]
 368:	mov	x3, x24
 36c:	mov	x0, x23
 370:	add	x2, x5, x2
 374:	bl	70 <__asan_backtrace_free>
 378:	ldr	x6, [x19, #8]
 37c:	sub	x5, x20, x6
 380:	add	x20, x21, x6
 384:	ldp	x23, x24, [sp, #48]
 388:	ldr	x25, [sp, #64]
 38c:	str	x22, [x19]
 390:	b	2f4 <__asan_backtrace_vector_grow+0x2c>
 394:	bl	0 <getpagesize>
 398:	cmp	x20, w0, sxtw
 39c:	lsl	x6, x20, #1
 3a0:	sxtw	x5, w0
 3a4:	b.cs	3b4 <__asan_backtrace_vector_grow+0xec>  // b.hs, b.nlast
 3a8:	cmp	x5, x6
 3ac:	csel	x20, x5, x6, ls  // ls = plast
 3b0:	b	330 <__asan_backtrace_vector_grow+0x68>
 3b4:	sub	x20, x6, #0x1
 3b8:	neg	x0, x5
 3bc:	add	x20, x20, x5
 3c0:	and	x20, x20, x0
 3c4:	b	330 <__asan_backtrace_vector_grow+0x68>
 3c8:	ldp	x23, x24, [sp, #48]
 3cc:	ldr	x25, [sp, #64]
 3d0:	b	300 <__asan_backtrace_vector_grow+0x38>
 3d4:	nop

00000000000003d8 <__asan_backtrace_vector_finish>:
 3d8:	ldp	x0, x2, [x1]
 3dc:	add	x2, x0, x2
 3e0:	stp	x2, xzr, [x1]
 3e4:	ret

00000000000003e8 <__asan_backtrace_vector_release>:
 3e8:	stp	x29, x30, [sp, #-32]!
 3ec:	mov	x4, x3
 3f0:	mov	x3, x2
 3f4:	mov	x29, sp
 3f8:	ldp	x2, x6, [x1, #8]
 3fc:	str	x19, [sp, #16]
 400:	mov	x19, x1
 404:	ldr	x5, [x19]
 408:	add	x1, x2, #0x7
 40c:	and	x1, x1, #0xfffffffffffffff8
 410:	add	x2, x2, x6
 414:	sub	x2, x2, x1
 418:	add	x1, x5, x1
 41c:	bl	70 <__asan_backtrace_free>
 420:	str	xzr, [x19, #16]
 424:	ldr	x0, [x19, #8]
 428:	cbnz	x0, 430 <__asan_backtrace_vector_release+0x48>
 42c:	str	xzr, [x19]
 430:	mov	w0, #0x1                   	// #1
 434:	ldr	x19, [sp, #16]
 438:	ldp	x29, x30, [sp], #32
 43c:	ret

mmapio.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__asan_backtrace_get_view>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x3
  10:	mov	x20, x4
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x22, x2
  1c:	mov	x21, x5
  20:	stp	x23, x24, [sp, #48]
  24:	mov	w24, w1
  28:	mov	x23, x6
  2c:	bl	0 <getpagesize>
  30:	sxtw	x7, w0
  34:	sub	x8, x19, #0x1
  38:	neg	x1, x7
  3c:	mov	w4, w24
  40:	mov	w3, #0x2                   	// #2
  44:	udiv	x19, x22, x7
  48:	mov	w2, #0x1                   	// #1
  4c:	mov	x0, #0x0                   	// #0
  50:	msub	w19, w19, w7, w22
  54:	add	x7, x7, x19
  58:	sub	x5, x22, x19
  5c:	add	x7, x8, x7
  60:	and	x22, x1, x7
  64:	mov	x1, x22
  68:	bl	0 <mmap>
  6c:	cmn	x0, #0x1
  70:	b.eq	9c <__asan_backtrace_get_view+0x9c>  // b.none
  74:	mov	x2, x0
  78:	add	x19, x0, x19
  7c:	stp	x19, x2, [x23]
  80:	mov	w0, #0x1                   	// #1
  84:	str	x22, [x23, #16]
  88:	ldp	x19, x20, [sp, #16]
  8c:	ldp	x21, x22, [sp, #32]
  90:	ldp	x23, x24, [sp, #48]
  94:	ldp	x29, x30, [sp], #64
  98:	ret
  9c:	bl	0 <__errno_location>
  a0:	mov	x2, x0
  a4:	adrp	x1, 0 <__asan_backtrace_get_view>
  a8:	mov	x0, x21
  ac:	add	x1, x1, #0x0
  b0:	ldr	w2, [x2]
  b4:	blr	x20
  b8:	mov	w0, #0x0                   	// #0
  bc:	ldp	x19, x20, [sp, #16]
  c0:	ldp	x21, x22, [sp, #32]
  c4:	ldp	x23, x24, [sp, #48]
  c8:	ldp	x29, x30, [sp], #64
  cc:	ret

00000000000000d0 <__asan_backtrace_release_view>:
  d0:	stp	x29, x30, [sp, #-32]!
  d4:	mov	x29, sp
  d8:	ldp	x0, x1, [x1, #8]
  dc:	stp	x19, x20, [sp, #16]
  e0:	mov	x19, x2
  e4:	mov	x20, x3
  e8:	bl	0 <munmap>
  ec:	tbnz	w0, #31, fc <__asan_backtrace_release_view+0x2c>
  f0:	ldp	x19, x20, [sp, #16]
  f4:	ldp	x29, x30, [sp], #32
  f8:	ret
  fc:	bl	0 <__errno_location>
 100:	mov	x2, x0
 104:	mov	x16, x19
 108:	mov	x0, x20
 10c:	ldp	x19, x20, [sp, #16]
 110:	adrp	x1, 0 <__asan_backtrace_get_view>
 114:	ldp	x29, x30, [sp], #32
 118:	add	x1, x1, #0x0
 11c:	ldr	w2, [x2]
 120:	br	x16

posix.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__asan_backtrace_open>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	mov	x22, x2
  14:	mov	x21, x0
  18:	str	x23, [sp, #48]
  1c:	mov	x23, x1
  20:	cbz	x3, 64 <__asan_backtrace_open+0x64>
  24:	str	wzr, [x3]
  28:	mov	x20, x3
  2c:	mov	w1, #0x80000               	// #524288
  30:	bl	0 <open>
  34:	mov	w19, w0
  38:	tbnz	w0, #31, 90 <__asan_backtrace_open+0x90>
  3c:	mov	w0, w19
  40:	mov	w2, #0x1                   	// #1
  44:	mov	w1, #0x2                   	// #2
  48:	bl	0 <fcntl>
  4c:	mov	w0, w19
  50:	ldp	x19, x20, [sp, #16]
  54:	ldp	x21, x22, [sp, #32]
  58:	ldr	x23, [sp, #48]
  5c:	ldp	x29, x30, [sp], #64
  60:	ret
  64:	mov	w1, #0x80000               	// #524288
  68:	bl	0 <open>
  6c:	mov	w19, w0
  70:	tbz	w0, #31, 3c <__asan_backtrace_open+0x3c>
  74:	bl	0 <__errno_location>
  78:	ldr	w2, [x0]
  7c:	mov	x1, x21
  80:	mov	x0, x22
  84:	mov	w19, #0xffffffff            	// #-1
  88:	blr	x23
  8c:	b	4c <__asan_backtrace_open+0x4c>
  90:	bl	0 <__errno_location>
  94:	ldr	w1, [x0]
  98:	cmp	w1, #0x2
  9c:	b.ne	78 <__asan_backtrace_open+0x78>  // b.any
  a0:	mov	w0, #0x1                   	// #1
  a4:	mov	w19, #0xffffffff            	// #-1
  a8:	str	w0, [x20]
  ac:	b	4c <__asan_backtrace_open+0x4c>

00000000000000b0 <__asan_backtrace_close>:
  b0:	stp	x29, x30, [sp, #-32]!
  b4:	mov	x29, sp
  b8:	stp	x19, x20, [sp, #16]
  bc:	mov	x19, x1
  c0:	mov	x20, x2
  c4:	bl	0 <close>
  c8:	tbnz	w0, #31, dc <__asan_backtrace_close+0x2c>
  cc:	mov	w0, #0x1                   	// #1
  d0:	ldp	x19, x20, [sp, #16]
  d4:	ldp	x29, x30, [sp], #32
  d8:	ret
  dc:	bl	0 <__errno_location>
  e0:	mov	x2, x0
  e4:	adrp	x1, 0 <__asan_backtrace_open>
  e8:	mov	x0, x20
  ec:	add	x1, x1, #0x0
  f0:	ldr	w2, [x2]
  f4:	blr	x19
  f8:	mov	w0, #0x0                   	// #0
  fc:	ldp	x19, x20, [sp, #16]
 100:	ldp	x29, x30, [sp], #32
 104:	ret

sort.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__asan_backtrace_qsort>:
   0:	cmp	x1, #0x1
   4:	b.ls	180 <__asan_backtrace_qsort+0x180>  // b.plast
   8:	stp	x29, x30, [sp, #-80]!
   c:	mov	x29, sp
  10:	stp	x19, x20, [sp, #16]
  14:	mov	x20, x2
  18:	stp	x21, x22, [sp, #32]
  1c:	mov	x21, x0
  20:	stp	x23, x24, [sp, #48]
  24:	mov	x23, x1
  28:	mov	x24, x3
  2c:	str	x25, [sp, #64]
  30:	lsr	x0, x23, #1
  34:	mov	x4, #0x0                   	// #0
  38:	madd	x0, x0, x20, x21
  3c:	cbz	x20, 5c <__asan_backtrace_qsort+0x5c>
  40:	ldrb	w2, [x0, x4]
  44:	ldrb	w1, [x21, x4]
  48:	strb	w2, [x21, x4]
  4c:	strb	w1, [x0, x4]
  50:	add	x4, x4, #0x1
  54:	cmp	x20, x4
  58:	b.ne	40 <__asan_backtrace_qsort+0x40>  // b.any
  5c:	add	x19, x21, x20
  60:	mov	x25, #0x0                   	// #0
  64:	mov	x22, #0x1                   	// #1
  68:	b	7c <__asan_backtrace_qsort+0x7c>
  6c:	add	x22, x22, #0x1
  70:	add	x19, x19, x20
  74:	cmp	x22, x23
  78:	b.cs	e8 <__asan_backtrace_qsort+0xe8>  // b.hs, b.nlast
  7c:	mov	x1, x19
  80:	mov	x0, x21
  84:	blr	x24
  88:	cmp	w0, #0x0
  8c:	add	x3, x25, #0x1
  90:	mov	x5, x3
  94:	b.le	6c <__asan_backtrace_qsort+0x6c>
  98:	add	x3, x25, #0x2
  9c:	cmp	x5, x22
  a0:	mov	x25, x22
  a4:	b.eq	6c <__asan_backtrace_qsort+0x6c>  // b.none
  a8:	madd	x0, x20, x5, x21
  ac:	cbz	x20, d4 <__asan_backtrace_qsort+0xd4>
  b0:	mov	x4, #0x0                   	// #0
  b4:	nop
  b8:	ldrb	w1, [x19, x4]
  bc:	ldrb	w2, [x0, x4]
  c0:	strb	w1, [x0, x4]
  c4:	strb	w2, [x19, x4]
  c8:	add	x4, x4, #0x1
  cc:	cmp	x20, x4
  d0:	b.ne	b8 <__asan_backtrace_qsort+0xb8>  // b.any
  d4:	add	x22, x22, #0x1
  d8:	mov	x25, x5
  dc:	add	x19, x19, x20
  e0:	cmp	x22, x23
  e4:	b.cc	7c <__asan_backtrace_qsort+0x7c>  // b.lo, b.ul, b.last
  e8:	cbnz	x25, 154 <__asan_backtrace_qsort+0x154>
  ec:	sub	x0, x23, #0x1
  f0:	cmp	x23, x25, lsl #1
  f4:	madd	x3, x20, x3, x21
  f8:	sub	x23, x0, x25
  fc:	b.ls	138 <__asan_backtrace_qsort+0x138>  // b.plast
 100:	mov	x0, x21
 104:	mov	x1, x25
 108:	mov	x21, x3
 10c:	mov	x2, x20
 110:	mov	x3, x24
 114:	bl	0 <__asan_backtrace_qsort>
 118:	cmp	x23, #0x1
 11c:	b.hi	30 <__asan_backtrace_qsort+0x30>  // b.pmore
 120:	ldp	x19, x20, [sp, #16]
 124:	ldp	x21, x22, [sp, #32]
 128:	ldp	x23, x24, [sp, #48]
 12c:	ldr	x25, [sp, #64]
 130:	ldp	x29, x30, [sp], #80
 134:	ret
 138:	mov	x1, x23
 13c:	mov	x0, x3
 140:	mov	x23, x25
 144:	mov	x3, x24
 148:	mov	x2, x20
 14c:	bl	0 <__asan_backtrace_qsort>
 150:	b	118 <__asan_backtrace_qsort+0x118>
 154:	madd	x1, x25, x20, x21
 158:	cbz	x20, ec <__asan_backtrace_qsort+0xec>
 15c:	mov	x0, #0x0                   	// #0
 160:	ldrb	w4, [x1, x0]
 164:	ldrb	w2, [x21, x0]
 168:	strb	w4, [x21, x0]
 16c:	strb	w2, [x1, x0]
 170:	add	x0, x0, #0x1
 174:	cmp	x20, x0
 178:	b.ne	160 <__asan_backtrace_qsort+0x160>  // b.any
 17c:	b	ec <__asan_backtrace_qsort+0xec>
 180:	ret

state.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__asan_backtrace_create_state>:
   0:	stp	x29, x30, [sp, #-144]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	add	x19, sp, #0x48
  10:	mov	w20, w1
  14:	mov	w1, #0x0                   	// #0
  18:	stp	x21, x22, [sp, #32]
  1c:	mov	x21, x2
  20:	mov	x22, x3
  24:	mov	x2, #0x48                  	// #72
  28:	str	x23, [sp, #48]
  2c:	mov	x23, x0
  30:	mov	x0, x19
  34:	bl	0 <__asan_internal_memset>
  38:	mov	x3, x22
  3c:	mov	x2, x21
  40:	mov	x0, x19
  44:	mov	x1, #0x48                  	// #72
  48:	str	x23, [sp, #72]
  4c:	str	w20, [sp, #80]
  50:	bl	0 <__asan_backtrace_alloc>
  54:	cbz	x0, 80 <__asan_backtrace_create_state+0x80>
  58:	ldp	x2, x3, [sp, #72]
  5c:	stp	x2, x3, [x0]
  60:	ldp	x2, x3, [sp, #88]
  64:	stp	x2, x3, [x0, #16]
  68:	ldp	x2, x3, [sp, #104]
  6c:	stp	x2, x3, [x0, #32]
  70:	ldp	x2, x3, [sp, #120]
  74:	stp	x2, x3, [x0, #48]
  78:	ldr	x1, [sp, #136]
  7c:	str	x1, [x0, #64]
  80:	ldp	x19, x20, [sp, #16]
  84:	ldp	x21, x22, [sp, #32]
  88:	ldr	x23, [sp, #48]
  8c:	ldp	x29, x30, [sp], #144
  90:	ret
