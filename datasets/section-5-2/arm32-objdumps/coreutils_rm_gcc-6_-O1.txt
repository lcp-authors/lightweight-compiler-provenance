
../repos/coreutils/src/rm:     file format elf32-littlearm


Disassembly of section .init:

00010f80 <.init>:
   10f80:	push	{r3, lr}
   10f84:	bl	1131c <__assert_fail@plt+0x4c>
   10f88:	pop	{r3, pc}

Disassembly of section .plt:

00010f8c <fstatfs64@plt-0x14>:
   10f8c:	push	{lr}		; (str lr, [sp, #-4]!)
   10f90:	ldr	lr, [pc, #4]	; 10f9c <fstatfs64@plt-0x4>
   10f94:	add	lr, pc, lr
   10f98:	ldr	pc, [lr, #8]!
   10f9c:	andeq	fp, r1, r4, rrx

00010fa0 <fstatfs64@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #110592	; 0x1b000
   10fa8:	ldr	pc, [ip, #100]!	; 0x64

00010fac <calloc@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #110592	; 0x1b000
   10fb4:	ldr	pc, [ip, #92]!	; 0x5c

00010fb8 <fputs_unlocked@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #110592	; 0x1b000
   10fc0:	ldr	pc, [ip, #84]!	; 0x54

00010fc4 <raise@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #110592	; 0x1b000
   10fcc:	ldr	pc, [ip, #76]!	; 0x4c

00010fd0 <__getdelim@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #110592	; 0x1b000
   10fd8:	ldr	pc, [ip, #68]!	; 0x44

00010fdc <strcmp@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #110592	; 0x1b000
   10fe4:	ldr	pc, [ip, #60]!	; 0x3c

00010fe8 <fflush@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #110592	; 0x1b000
   10ff0:	ldr	pc, [ip, #52]!	; 0x34

00010ff4 <unlinkat@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #110592	; 0x1b000
   10ffc:	ldr	pc, [ip, #44]!	; 0x2c

00011000 <memmove@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #110592	; 0x1b000
   11008:	ldr	pc, [ip, #36]!	; 0x24

0001100c <free@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #110592	; 0x1b000
   11014:	ldr	pc, [ip, #28]!

00011018 <faccessat@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #110592	; 0x1b000
   11020:	ldr	pc, [ip, #20]!

00011024 <_exit@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #110592	; 0x1b000
   1102c:	ldr	pc, [ip, #12]!

00011030 <memcpy@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #110592	; 0x1b000
   11038:	ldr	pc, [ip, #4]!

0001103c <mbsinit@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #106496	; 0x1a000
   11044:	ldr	pc, [ip, #4092]!	; 0xffc

00011048 <memcmp@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #106496	; 0x1a000
   11050:	ldr	pc, [ip, #4084]!	; 0xff4

00011054 <fputc_unlocked@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #106496	; 0x1a000
   1105c:	ldr	pc, [ip, #4076]!	; 0xfec

00011060 <dcgettext@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #106496	; 0x1a000
   11068:	ldr	pc, [ip, #4068]!	; 0xfe4

0001106c <realloc@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #106496	; 0x1a000
   11074:	ldr	pc, [ip, #4060]!	; 0xfdc

00011078 <textdomain@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #106496	; 0x1a000
   11080:	ldr	pc, [ip, #4052]!	; 0xfd4

00011084 <geteuid@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #106496	; 0x1a000
   1108c:	ldr	pc, [ip, #4044]!	; 0xfcc

00011090 <__fxstatat64@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #106496	; 0x1a000
   11098:	ldr	pc, [ip, #4036]!	; 0xfc4

0001109c <iswprint@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #106496	; 0x1a000
   110a4:	ldr	pc, [ip, #4028]!	; 0xfbc

000110a8 <__fxstat64@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #106496	; 0x1a000
   110b0:	ldr	pc, [ip, #4020]!	; 0xfb4

000110b4 <fwrite@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #106496	; 0x1a000
   110bc:	ldr	pc, [ip, #4012]!	; 0xfac

000110c0 <lseek64@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #106496	; 0x1a000
   110c8:	ldr	pc, [ip, #4004]!	; 0xfa4

000110cc <__ctype_get_mb_cur_max@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #106496	; 0x1a000
   110d4:	ldr	pc, [ip, #3996]!	; 0xf9c

000110d8 <__fpending@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #106496	; 0x1a000
   110e0:	ldr	pc, [ip, #3988]!	; 0xf94

000110e4 <mbrtowc@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #106496	; 0x1a000
   110ec:	ldr	pc, [ip, #3980]!	; 0xf8c

000110f0 <error@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #106496	; 0x1a000
   110f8:	ldr	pc, [ip, #3972]!	; 0xf84

000110fc <open64@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #106496	; 0x1a000
   11104:	ldr	pc, [ip, #3964]!	; 0xf7c

00011108 <malloc@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #106496	; 0x1a000
   11110:	ldr	pc, [ip, #3956]!	; 0xf74

00011114 <__libc_start_main@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #106496	; 0x1a000
   1111c:	ldr	pc, [ip, #3948]!	; 0xf6c

00011120 <__freading@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #106496	; 0x1a000
   11128:	ldr	pc, [ip, #3940]!	; 0xf64

0001112c <__gmon_start__@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #106496	; 0x1a000
   11134:	ldr	pc, [ip, #3932]!	; 0xf5c

00011138 <mempcpy@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #106496	; 0x1a000
   11140:	ldr	pc, [ip, #3924]!	; 0xf54

00011144 <getopt_long@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #106496	; 0x1a000
   1114c:	ldr	pc, [ip, #3916]!	; 0xf4c

00011150 <__ctype_b_loc@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #106496	; 0x1a000
   11158:	ldr	pc, [ip, #3908]!	; 0xf44

0001115c <exit@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #106496	; 0x1a000
   11164:	ldr	pc, [ip, #3900]!	; 0xf3c

00011168 <strlen@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #106496	; 0x1a000
   11170:	ldr	pc, [ip, #3892]!	; 0xf34

00011174 <openat64@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #106496	; 0x1a000
   1117c:	ldr	pc, [ip, #3884]!	; 0xf2c

00011180 <__errno_location@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #106496	; 0x1a000
   11188:	ldr	pc, [ip, #3876]!	; 0xf24

0001118c <__cxa_atexit@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #106496	; 0x1a000
   11194:	ldr	pc, [ip, #3868]!	; 0xf1c

00011198 <memset@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #106496	; 0x1a000
   111a0:	ldr	pc, [ip, #3860]!	; 0xf14

000111a4 <__printf_chk@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #106496	; 0x1a000
   111ac:	ldr	pc, [ip, #3852]!	; 0xf0c

000111b0 <fileno@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #106496	; 0x1a000
   111b8:	ldr	pc, [ip, #3844]!	; 0xf04

000111bc <__fprintf_chk@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #106496	; 0x1a000
   111c4:	ldr	pc, [ip, #3836]!	; 0xefc

000111c8 <fclose@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #106496	; 0x1a000
   111d0:	ldr	pc, [ip, #3828]!	; 0xef4

000111d4 <fseeko64@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #106496	; 0x1a000
   111dc:	ldr	pc, [ip, #3820]!	; 0xeec

000111e0 <fcntl64@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #106496	; 0x1a000
   111e8:	ldr	pc, [ip, #3812]!	; 0xee4

000111ec <rpmatch@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #106496	; 0x1a000
   111f4:	ldr	pc, [ip, #3804]!	; 0xedc

000111f8 <__overflow@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #106496	; 0x1a000
   11200:	ldr	pc, [ip, #3796]!	; 0xed4

00011204 <setlocale@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #106496	; 0x1a000
   1120c:	ldr	pc, [ip, #3788]!	; 0xecc

00011210 <strrchr@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #106496	; 0x1a000
   11218:	ldr	pc, [ip, #3780]!	; 0xec4

0001121c <nl_langinfo@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #106496	; 0x1a000
   11224:	ldr	pc, [ip, #3772]!	; 0xebc

00011228 <readdir64@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #106496	; 0x1a000
   11230:	ldr	pc, [ip, #3764]!	; 0xeb4

00011234 <fdopendir@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #106496	; 0x1a000
   1123c:	ldr	pc, [ip, #3756]!	; 0xeac

00011240 <dirfd@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #106496	; 0x1a000
   11248:	ldr	pc, [ip, #3748]!	; 0xea4

0001124c <fchdir@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #106496	; 0x1a000
   11254:	ldr	pc, [ip, #3740]!	; 0xe9c

00011258 <qsort@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #106496	; 0x1a000
   11260:	ldr	pc, [ip, #3732]!	; 0xe94

00011264 <bindtextdomain@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #106496	; 0x1a000
   1126c:	ldr	pc, [ip, #3724]!	; 0xe8c

00011270 <__xstat64@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #106496	; 0x1a000
   11278:	ldr	pc, [ip, #3716]!	; 0xe84

0001127c <isatty@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #106496	; 0x1a000
   11284:	ldr	pc, [ip, #3708]!	; 0xe7c

00011288 <strncmp@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #106496	; 0x1a000
   11290:	ldr	pc, [ip, #3700]!	; 0xe74

00011294 <abort@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #106496	; 0x1a000
   1129c:	ldr	pc, [ip, #3692]!	; 0xe6c

000112a0 <close@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #106496	; 0x1a000
   112a8:	ldr	pc, [ip, #3684]!	; 0xe64

000112ac <__lxstat64@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #106496	; 0x1a000
   112b4:	ldr	pc, [ip, #3676]!	; 0xe5c

000112b8 <dcngettext@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #106496	; 0x1a000
   112c0:	ldr	pc, [ip, #3668]!	; 0xe54

000112c4 <closedir@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #106496	; 0x1a000
   112cc:	ldr	pc, [ip, #3660]!	; 0xe4c

000112d0 <__assert_fail@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #106496	; 0x1a000
   112d8:	ldr	pc, [ip, #3652]!	; 0xe44

Disassembly of section .text:

000112e0 <.text>:
   112e0:	mov	fp, #0
   112e4:	mov	lr, #0
   112e8:	pop	{r1}		; (ldr r1, [sp], #4)
   112ec:	mov	r2, sp
   112f0:	push	{r2}		; (str r2, [sp, #-4]!)
   112f4:	push	{r0}		; (str r0, [sp, #-4]!)
   112f8:	ldr	ip, [pc, #16]	; 11310 <__assert_fail@plt+0x40>
   112fc:	push	{ip}		; (str ip, [sp, #-4]!)
   11300:	ldr	r0, [pc, #12]	; 11314 <__assert_fail@plt+0x44>
   11304:	ldr	r3, [pc, #12]	; 11318 <__assert_fail@plt+0x48>
   11308:	bl	11114 <__libc_start_main@plt>
   1130c:	bl	11294 <abort@plt>
   11310:	andeq	sl, r1, r0, ror #1
   11314:	andeq	r1, r1, r4, ror #15
   11318:	andeq	sl, r1, r0, lsl #1
   1131c:	ldr	r3, [pc, #20]	; 11338 <__assert_fail@plt+0x68>
   11320:	ldr	r2, [pc, #20]	; 1133c <__assert_fail@plt+0x6c>
   11324:	add	r3, pc, r3
   11328:	ldr	r2, [r3, r2]
   1132c:	cmp	r2, #0
   11330:	bxeq	lr
   11334:	b	1112c <__gmon_start__@plt>
   11338:	ldrdeq	sl, [r1], -r4
   1133c:	andeq	r0, r0, r0, lsr #2
   11340:	ldr	r3, [pc, #28]	; 11364 <__assert_fail@plt+0x94>
   11344:	ldr	r0, [pc, #28]	; 11368 <__assert_fail@plt+0x98>
   11348:	sub	r3, r3, r0
   1134c:	cmp	r3, #6
   11350:	bxls	lr
   11354:	ldr	r3, [pc, #16]	; 1136c <__assert_fail@plt+0x9c>
   11358:	cmp	r3, #0
   1135c:	bxeq	lr
   11360:	bx	r3
   11364:	andeq	ip, r2, fp, ror r1
   11368:	andeq	ip, r2, r8, ror r1
   1136c:	andeq	r0, r0, r0
   11370:	ldr	r1, [pc, #36]	; 1139c <__assert_fail@plt+0xcc>
   11374:	ldr	r0, [pc, #36]	; 113a0 <__assert_fail@plt+0xd0>
   11378:	sub	r1, r1, r0
   1137c:	asr	r1, r1, #2
   11380:	add	r1, r1, r1, lsr #31
   11384:	asrs	r1, r1, #1
   11388:	bxeq	lr
   1138c:	ldr	r3, [pc, #16]	; 113a4 <__assert_fail@plt+0xd4>
   11390:	cmp	r3, #0
   11394:	bxeq	lr
   11398:	bx	r3
   1139c:	andeq	ip, r2, r8, ror r1
   113a0:	andeq	ip, r2, r8, ror r1
   113a4:	andeq	r0, r0, r0
   113a8:	push	{r4, lr}
   113ac:	ldr	r4, [pc, #24]	; 113cc <__assert_fail@plt+0xfc>
   113b0:	ldrb	r3, [r4]
   113b4:	cmp	r3, #0
   113b8:	popne	{r4, pc}
   113bc:	bl	11340 <__assert_fail@plt+0x70>
   113c0:	mov	r3, #1
   113c4:	strb	r3, [r4]
   113c8:	pop	{r4, pc}
   113cc:	muleq	r2, ip, r1
   113d0:	ldr	r0, [pc, #40]	; 11400 <__assert_fail@plt+0x130>
   113d4:	ldr	r3, [r0]
   113d8:	cmp	r3, #0
   113dc:	bne	113e4 <__assert_fail@plt+0x114>
   113e0:	b	11370 <__assert_fail@plt+0xa0>
   113e4:	ldr	r3, [pc, #24]	; 11404 <__assert_fail@plt+0x134>
   113e8:	cmp	r3, #0
   113ec:	beq	113e0 <__assert_fail@plt+0x110>
   113f0:	push	{r4, lr}
   113f4:	blx	r3
   113f8:	pop	{r4, lr}
   113fc:	b	11370 <__assert_fail@plt+0xa0>
   11400:	andeq	fp, r2, r4, lsl pc
   11404:	andeq	r0, r0, r0
   11408:	push	{lr}		; (str lr, [sp, #-4]!)
   1140c:	sub	sp, sp, #60	; 0x3c
   11410:	subs	r6, r0, #0
   11414:	beq	11450 <__assert_fail@plt+0x180>
   11418:	ldr	r3, [pc, #860]	; 1177c <__assert_fail@plt+0x4ac>
   1141c:	ldr	r4, [r3]
   11420:	mov	r2, #5
   11424:	ldr	r1, [pc, #852]	; 11780 <__assert_fail@plt+0x4b0>
   11428:	mov	r0, #0
   1142c:	bl	11060 <dcgettext@plt>
   11430:	ldr	r3, [pc, #844]	; 11784 <__assert_fail@plt+0x4b4>
   11434:	ldr	r3, [r3]
   11438:	mov	r2, r0
   1143c:	mov	r1, #1
   11440:	mov	r0, r4
   11444:	bl	111bc <__fprintf_chk@plt>
   11448:	mov	r0, r6
   1144c:	bl	1115c <exit@plt>
   11450:	mov	r2, #5
   11454:	ldr	r1, [pc, #812]	; 11788 <__assert_fail@plt+0x4b8>
   11458:	mov	r0, #0
   1145c:	bl	11060 <dcgettext@plt>
   11460:	ldr	r5, [pc, #796]	; 11784 <__assert_fail@plt+0x4b4>
   11464:	ldr	r2, [r5]
   11468:	mov	r1, r0
   1146c:	mov	r0, #1
   11470:	bl	111a4 <__printf_chk@plt>
   11474:	mov	r2, #5
   11478:	ldr	r1, [pc, #780]	; 1178c <__assert_fail@plt+0x4bc>
   1147c:	mov	r0, #0
   11480:	bl	11060 <dcgettext@plt>
   11484:	ldr	r4, [pc, #772]	; 11790 <__assert_fail@plt+0x4c0>
   11488:	ldr	r1, [r4]
   1148c:	bl	10fb8 <fputs_unlocked@plt>
   11490:	mov	r2, #5
   11494:	ldr	r1, [pc, #760]	; 11794 <__assert_fail@plt+0x4c4>
   11498:	mov	r0, #0
   1149c:	bl	11060 <dcgettext@plt>
   114a0:	ldr	r1, [r4]
   114a4:	bl	10fb8 <fputs_unlocked@plt>
   114a8:	mov	r2, #5
   114ac:	ldr	r1, [pc, #740]	; 11798 <__assert_fail@plt+0x4c8>
   114b0:	mov	r0, #0
   114b4:	bl	11060 <dcgettext@plt>
   114b8:	ldr	r1, [r4]
   114bc:	bl	10fb8 <fputs_unlocked@plt>
   114c0:	mov	r2, #5
   114c4:	ldr	r1, [pc, #720]	; 1179c <__assert_fail@plt+0x4cc>
   114c8:	mov	r0, #0
   114cc:	bl	11060 <dcgettext@plt>
   114d0:	ldr	r1, [r4]
   114d4:	bl	10fb8 <fputs_unlocked@plt>
   114d8:	mov	r2, #5
   114dc:	ldr	r1, [pc, #700]	; 117a0 <__assert_fail@plt+0x4d0>
   114e0:	mov	r0, #0
   114e4:	bl	11060 <dcgettext@plt>
   114e8:	ldr	r1, [r4]
   114ec:	bl	10fb8 <fputs_unlocked@plt>
   114f0:	mov	r2, #5
   114f4:	ldr	r1, [pc, #680]	; 117a4 <__assert_fail@plt+0x4d4>
   114f8:	mov	r0, #0
   114fc:	bl	11060 <dcgettext@plt>
   11500:	ldr	r1, [r4]
   11504:	bl	10fb8 <fputs_unlocked@plt>
   11508:	mov	r2, #5
   1150c:	ldr	r1, [pc, #660]	; 117a8 <__assert_fail@plt+0x4d8>
   11510:	mov	r0, #0
   11514:	bl	11060 <dcgettext@plt>
   11518:	ldr	r1, [r4]
   1151c:	bl	10fb8 <fputs_unlocked@plt>
   11520:	mov	r2, #5
   11524:	ldr	r1, [pc, #640]	; 117ac <__assert_fail@plt+0x4dc>
   11528:	mov	r0, #0
   1152c:	bl	11060 <dcgettext@plt>
   11530:	ldr	r1, [r4]
   11534:	bl	10fb8 <fputs_unlocked@plt>
   11538:	mov	r2, #5
   1153c:	ldr	r1, [pc, #620]	; 117b0 <__assert_fail@plt+0x4e0>
   11540:	mov	r0, #0
   11544:	bl	11060 <dcgettext@plt>
   11548:	ldr	r2, [r5]
   1154c:	mov	r3, r2
   11550:	mov	r1, r0
   11554:	mov	r0, #1
   11558:	bl	111a4 <__printf_chk@plt>
   1155c:	mov	r2, #5
   11560:	ldr	r1, [pc, #588]	; 117b4 <__assert_fail@plt+0x4e4>
   11564:	mov	r0, #0
   11568:	bl	11060 <dcgettext@plt>
   1156c:	ldr	r1, [r4]
   11570:	bl	10fb8 <fputs_unlocked@plt>
   11574:	mov	ip, sp
   11578:	ldr	lr, [pc, #568]	; 117b8 <__assert_fail@plt+0x4e8>
   1157c:	ldm	lr!, {r0, r1, r2, r3}
   11580:	stmia	ip!, {r0, r1, r2, r3}
   11584:	ldm	lr!, {r0, r1, r2, r3}
   11588:	stmia	ip!, {r0, r1, r2, r3}
   1158c:	ldm	lr!, {r0, r1, r2, r3}
   11590:	stmia	ip!, {r0, r1, r2, r3}
   11594:	ldm	lr, {r0, r1}
   11598:	stm	ip, {r0, r1}
   1159c:	ldr	r1, [sp]
   115a0:	cmp	r1, #0
   115a4:	moveq	r4, sp
   115a8:	beq	115d0 <__assert_fail@plt+0x300>
   115ac:	mov	r4, sp
   115b0:	ldr	r5, [pc, #516]	; 117bc <__assert_fail@plt+0x4ec>
   115b4:	mov	r0, r5
   115b8:	bl	10fdc <strcmp@plt>
   115bc:	cmp	r0, #0
   115c0:	beq	115d0 <__assert_fail@plt+0x300>
   115c4:	ldr	r1, [r4, #8]!
   115c8:	cmp	r1, #0
   115cc:	bne	115b4 <__assert_fail@plt+0x2e4>
   115d0:	ldr	r4, [r4, #4]
   115d4:	cmp	r4, #0
   115d8:	beq	116ec <__assert_fail@plt+0x41c>
   115dc:	mov	r2, #5
   115e0:	ldr	r1, [pc, #472]	; 117c0 <__assert_fail@plt+0x4f0>
   115e4:	mov	r0, #0
   115e8:	bl	11060 <dcgettext@plt>
   115ec:	ldr	r3, [pc, #464]	; 117c4 <__assert_fail@plt+0x4f4>
   115f0:	ldr	r2, [pc, #464]	; 117c8 <__assert_fail@plt+0x4f8>
   115f4:	mov	r1, r0
   115f8:	mov	r0, #1
   115fc:	bl	111a4 <__printf_chk@plt>
   11600:	mov	r1, #0
   11604:	mov	r0, #5
   11608:	bl	11204 <setlocale@plt>
   1160c:	cmp	r0, #0
   11610:	beq	11628 <__assert_fail@plt+0x358>
   11614:	mov	r2, #3
   11618:	ldr	r1, [pc, #428]	; 117cc <__assert_fail@plt+0x4fc>
   1161c:	bl	11288 <strncmp@plt>
   11620:	cmp	r0, #0
   11624:	bne	11688 <__assert_fail@plt+0x3b8>
   11628:	mov	r2, #5
   1162c:	ldr	r1, [pc, #412]	; 117d0 <__assert_fail@plt+0x500>
   11630:	mov	r0, #0
   11634:	bl	11060 <dcgettext@plt>
   11638:	ldr	r5, [pc, #380]	; 117bc <__assert_fail@plt+0x4ec>
   1163c:	mov	r3, r5
   11640:	ldr	r2, [pc, #380]	; 117c4 <__assert_fail@plt+0x4f4>
   11644:	mov	r1, r0
   11648:	mov	r0, #1
   1164c:	bl	111a4 <__printf_chk@plt>
   11650:	mov	r2, #5
   11654:	ldr	r1, [pc, #376]	; 117d4 <__assert_fail@plt+0x504>
   11658:	mov	r0, #0
   1165c:	bl	11060 <dcgettext@plt>
   11660:	mov	r1, r0
   11664:	ldr	r2, [pc, #364]	; 117d8 <__assert_fail@plt+0x508>
   11668:	ldr	r3, [pc, #364]	; 117dc <__assert_fail@plt+0x50c>
   1166c:	cmp	r4, r5
   11670:	movne	r3, r2
   11674:	mov	r2, r4
   11678:	mov	r0, #1
   1167c:	bl	111a4 <__printf_chk@plt>
   11680:	b	11448 <__assert_fail@plt+0x178>
   11684:	ldr	r4, [pc, #304]	; 117bc <__assert_fail@plt+0x4ec>
   11688:	mov	r2, #5
   1168c:	ldr	r1, [pc, #332]	; 117e0 <__assert_fail@plt+0x510>
   11690:	mov	r0, #0
   11694:	bl	11060 <dcgettext@plt>
   11698:	ldr	r3, [pc, #240]	; 11790 <__assert_fail@plt+0x4c0>
   1169c:	ldr	r1, [r3]
   116a0:	bl	10fb8 <fputs_unlocked@plt>
   116a4:	b	11628 <__assert_fail@plt+0x358>
   116a8:	mov	r2, #5
   116ac:	ldr	r1, [pc, #284]	; 117d0 <__assert_fail@plt+0x500>
   116b0:	mov	r0, #0
   116b4:	bl	11060 <dcgettext@plt>
   116b8:	ldr	r4, [pc, #252]	; 117bc <__assert_fail@plt+0x4ec>
   116bc:	mov	r3, r4
   116c0:	ldr	r2, [pc, #252]	; 117c4 <__assert_fail@plt+0x4f4>
   116c4:	mov	r1, r0
   116c8:	mov	r0, #1
   116cc:	bl	111a4 <__printf_chk@plt>
   116d0:	mov	r2, #5
   116d4:	ldr	r1, [pc, #248]	; 117d4 <__assert_fail@plt+0x504>
   116d8:	mov	r0, #0
   116dc:	bl	11060 <dcgettext@plt>
   116e0:	mov	r1, r0
   116e4:	ldr	r3, [pc, #240]	; 117dc <__assert_fail@plt+0x50c>
   116e8:	b	11674 <__assert_fail@plt+0x3a4>
   116ec:	mov	r2, #5
   116f0:	ldr	r1, [pc, #200]	; 117c0 <__assert_fail@plt+0x4f0>
   116f4:	mov	r0, #0
   116f8:	bl	11060 <dcgettext@plt>
   116fc:	ldr	r3, [pc, #192]	; 117c4 <__assert_fail@plt+0x4f4>
   11700:	ldr	r2, [pc, #192]	; 117c8 <__assert_fail@plt+0x4f8>
   11704:	mov	r1, r0
   11708:	mov	r0, #1
   1170c:	bl	111a4 <__printf_chk@plt>
   11710:	mov	r1, #0
   11714:	mov	r0, #5
   11718:	bl	11204 <setlocale@plt>
   1171c:	cmp	r0, #0
   11720:	beq	116a8 <__assert_fail@plt+0x3d8>
   11724:	mov	r2, #3
   11728:	ldr	r1, [pc, #156]	; 117cc <__assert_fail@plt+0x4fc>
   1172c:	bl	11288 <strncmp@plt>
   11730:	cmp	r0, #0
   11734:	bne	11684 <__assert_fail@plt+0x3b4>
   11738:	mov	r2, #5
   1173c:	ldr	r1, [pc, #140]	; 117d0 <__assert_fail@plt+0x500>
   11740:	mov	r0, #0
   11744:	bl	11060 <dcgettext@plt>
   11748:	ldr	r4, [pc, #108]	; 117bc <__assert_fail@plt+0x4ec>
   1174c:	mov	r3, r4
   11750:	ldr	r2, [pc, #108]	; 117c4 <__assert_fail@plt+0x4f4>
   11754:	mov	r1, r0
   11758:	mov	r0, #1
   1175c:	bl	111a4 <__printf_chk@plt>
   11760:	mov	r2, #5
   11764:	ldr	r1, [pc, #104]	; 117d4 <__assert_fail@plt+0x504>
   11768:	mov	r0, #0
   1176c:	bl	11060 <dcgettext@plt>
   11770:	mov	r1, r0
   11774:	ldr	r3, [pc, #96]	; 117dc <__assert_fail@plt+0x50c>
   11778:	b	11674 <__assert_fail@plt+0x3a4>
   1177c:	andeq	ip, r2, r8, lsl #3
   11780:	andeq	sl, r1, r0, asr #4
   11784:			; <UNDEFINED> instruction: 0x0002c1bc
   11788:	andeq	sl, r1, r8, ror #4
   1178c:	andeq	sl, r1, ip, lsl #5
   11790:	muleq	r2, r4, r1
   11794:	andeq	sl, r1, ip, lsr #6
   11798:	andeq	sl, r1, r4, lsr #9
   1179c:	andeq	sl, r1, r4, lsl #11
   117a0:	andeq	sl, r1, r4, lsl #13
   117a4:	andeq	sl, r1, r4, lsr r7
   117a8:	andeq	sl, r1, r4, ror #14
   117ac:	muleq	r1, ip, r7
   117b0:	andeq	sl, r1, r8, lsr r8
   117b4:			; <UNDEFINED> instruction: 0x0001a8b4
   117b8:	andeq	sl, r1, r8, lsl #2
   117bc:	andeq	sl, r1, ip, lsr r2
   117c0:	muleq	r1, ip, r9
   117c4:			; <UNDEFINED> instruction: 0x0001a9b4
   117c8:	ldrdeq	sl, [r1], -ip
   117cc:	andeq	sl, r1, ip, ror #19
   117d0:	andeq	sl, r1, r8, lsr sl
   117d4:	andeq	sl, r1, r4, asr sl
   117d8:	andeq	fp, r1, r0, lsr #5
   117dc:	andeq	sl, r1, r4, lsl #25
   117e0:	strdeq	sl, [r1], -r0
   117e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117e8:	sub	sp, sp, #156	; 0x9c
   117ec:	mov	r5, r0
   117f0:	mov	r6, r1
   117f4:	ldr	r0, [r1]
   117f8:	bl	16ac0 <__assert_fail@plt+0x57f0>
   117fc:	ldr	r1, [pc, #1508]	; 11de8 <__assert_fail@plt+0xb18>
   11800:	mov	r0, #6
   11804:	bl	11204 <setlocale@plt>
   11808:	ldr	r4, [pc, #1500]	; 11dec <__assert_fail@plt+0xb1c>
   1180c:	ldr	r1, [pc, #1500]	; 11df0 <__assert_fail@plt+0xb20>
   11810:	mov	r0, r4
   11814:	bl	11264 <bindtextdomain@plt>
   11818:	mov	r0, r4
   1181c:	bl	11078 <textdomain@plt>
   11820:	ldr	r0, [pc, #1484]	; 11df4 <__assert_fail@plt+0xb24>
   11824:	bl	1a0e4 <__assert_fail@plt+0x8e14>
   11828:	mov	r4, #0
   1182c:	strb	r4, [sp, #132]	; 0x84
   11830:	mov	r3, #4
   11834:	str	r3, [sp, #136]	; 0x88
   11838:	strb	r4, [sp, #140]	; 0x8c
   1183c:	strb	r4, [sp, #142]	; 0x8e
   11840:	strb	r4, [sp, #141]	; 0x8d
   11844:	str	r4, [sp, #144]	; 0x90
   11848:	strb	r4, [sp, #148]	; 0x94
   1184c:	mov	r0, r4
   11850:	bl	1127c <isatty@plt>
   11854:	subs	r0, r0, r4
   11858:	movne	r0, #1
   1185c:	strb	r0, [sp, #149]	; 0x95
   11860:	strb	r4, [sp, #150]	; 0x96
   11864:	strb	r4, [sp, #151]	; 0x97
   11868:	mov	r9, #1
   1186c:	ldr	r7, [pc, #1412]	; 11df8 <__assert_fail@plt+0xb28>
   11870:	ldr	r8, [pc, #1412]	; 11dfc <__assert_fail@plt+0xb2c>
   11874:	ldr	sl, [pc, #1412]	; 11e00 <__assert_fail@plt+0xb30>
   11878:	add	fp, r7, #56	; 0x38
   1187c:	mov	r3, #0
   11880:	str	r3, [sp]
   11884:	add	r3, r7, #108	; 0x6c
   11888:	mov	r2, r8
   1188c:	mov	r1, r6
   11890:	mov	r0, r5
   11894:	bl	11144 <getopt_long@plt>
   11898:	cmn	r0, #1
   1189c:	beq	11be4 <__assert_fail@plt+0x914>
   118a0:	cmp	r0, #105	; 0x69
   118a4:	beq	119e4 <__assert_fail@plt+0x714>
   118a8:	ble	118e0 <__assert_fail@plt+0x610>
   118ac:	ldr	r3, [pc, #1360]	; 11e04 <__assert_fail@plt+0xb34>
   118b0:	cmp	r0, r3
   118b4:	beq	11a38 <__assert_fail@plt+0x768>
   118b8:	ble	1194c <__assert_fail@plt+0x67c>
   118bc:	ldr	r3, [pc, #1348]	; 11e08 <__assert_fail@plt+0xb38>
   118c0:	cmp	r0, r3
   118c4:	beq	11a88 <__assert_fail@plt+0x7b8>
   118c8:	blt	11a44 <__assert_fail@plt+0x774>
   118cc:	cmp	r0, #260	; 0x104
   118d0:	bne	11934 <__assert_fail@plt+0x664>
   118d4:	mov	r3, #1
   118d8:	strb	r3, [sp, #149]	; 0x95
   118dc:	b	1187c <__assert_fail@plt+0x5ac>
   118e0:	cmp	r0, #73	; 0x49
   118e4:	beq	119f8 <__assert_fail@plt+0x728>
   118e8:	ble	11914 <__assert_fail@plt+0x644>
   118ec:	cmp	r0, #100	; 0x64
   118f0:	beq	119d8 <__assert_fail@plt+0x708>
   118f4:	cmp	r0, #102	; 0x66
   118f8:	bne	1192c <__assert_fail@plt+0x65c>
   118fc:	mov	r3, #5
   11900:	str	r3, [sp, #136]	; 0x88
   11904:	mov	r3, #1
   11908:	strb	r3, [sp, #132]	; 0x84
   1190c:	mov	r4, #0
   11910:	b	1187c <__assert_fail@plt+0x5ac>
   11914:	cmn	r0, #3
   11918:	beq	11af0 <__assert_fail@plt+0x820>
   1191c:	cmn	r0, #2
   11920:	bne	11934 <__assert_fail@plt+0x664>
   11924:	mov	r0, #0
   11928:	bl	11408 <__assert_fail@plt+0x138>
   1192c:	cmp	r0, #82	; 0x52
   11930:	beq	119cc <__assert_fail@plt+0x6fc>
   11934:	cmp	r5, #1
   11938:	movgt	r8, r6
   1193c:	movgt	r4, #1
   11940:	movgt	r9, #3
   11944:	bgt	11b48 <__assert_fail@plt+0x878>
   11948:	b	11bd4 <__assert_fail@plt+0x904>
   1194c:	cmp	r0, #118	; 0x76
   11950:	beq	11ae4 <__assert_fail@plt+0x814>
   11954:	cmp	r0, #256	; 0x100
   11958:	bne	119c4 <__assert_fail@plt+0x6f4>
   1195c:	ldr	r1, [sl]
   11960:	cmp	r1, #0
   11964:	beq	119b0 <__assert_fail@plt+0x6e0>
   11968:	mov	r3, #1
   1196c:	str	r3, [sp, #8]
   11970:	ldr	r3, [pc, #1172]	; 11e0c <__assert_fail@plt+0xb3c>
   11974:	ldr	r3, [r3]
   11978:	str	r3, [sp, #4]
   1197c:	mov	r3, #4
   11980:	str	r3, [sp]
   11984:	mov	r3, fp
   11988:	add	r2, r7, #80	; 0x50
   1198c:	ldr	r0, [pc, #1148]	; 11e10 <__assert_fail@plt+0xb40>
   11990:	bl	130a8 <__assert_fail@plt+0x1dd8>
   11994:	add	r0, r7, r0, lsl #2
   11998:	ldr	r3, [r0, #56]	; 0x38
   1199c:	cmp	r3, #1
   119a0:	beq	11a20 <__assert_fail@plt+0x750>
   119a4:	bcc	11a10 <__assert_fail@plt+0x740>
   119a8:	cmp	r3, #2
   119ac:	bne	1187c <__assert_fail@plt+0x5ac>
   119b0:	mov	r3, #3
   119b4:	str	r3, [sp, #136]	; 0x88
   119b8:	mov	r4, #0
   119bc:	strb	r4, [sp, #132]	; 0x84
   119c0:	b	1187c <__assert_fail@plt+0x5ac>
   119c4:	cmp	r0, #114	; 0x72
   119c8:	bne	11934 <__assert_fail@plt+0x664>
   119cc:	mov	r3, #1
   119d0:	strb	r3, [sp, #141]	; 0x8d
   119d4:	b	1187c <__assert_fail@plt+0x5ac>
   119d8:	mov	r3, #1
   119dc:	strb	r3, [sp, #142]	; 0x8e
   119e0:	b	1187c <__assert_fail@plt+0x5ac>
   119e4:	mov	r3, #3
   119e8:	str	r3, [sp, #136]	; 0x88
   119ec:	mov	r4, #0
   119f0:	strb	r4, [sp, #132]	; 0x84
   119f4:	b	1187c <__assert_fail@plt+0x5ac>
   119f8:	mov	r3, #4
   119fc:	str	r3, [sp, #136]	; 0x88
   11a00:	mov	r3, #0
   11a04:	strb	r3, [sp, #132]	; 0x84
   11a08:	mov	r4, #1
   11a0c:	b	1187c <__assert_fail@plt+0x5ac>
   11a10:	mov	r3, #5
   11a14:	str	r3, [sp, #136]	; 0x88
   11a18:	mov	r4, #0
   11a1c:	b	1187c <__assert_fail@plt+0x5ac>
   11a20:	mov	r3, #4
   11a24:	str	r3, [sp, #136]	; 0x88
   11a28:	mov	r3, #0
   11a2c:	strb	r3, [sp, #132]	; 0x84
   11a30:	mov	r4, #1
   11a34:	b	1187c <__assert_fail@plt+0x5ac>
   11a38:	mov	r3, #1
   11a3c:	strb	r3, [sp, #140]	; 0x8c
   11a40:	b	1187c <__assert_fail@plt+0x5ac>
   11a44:	ldr	r3, [pc, #968]	; 11e14 <__assert_fail@plt+0xb44>
   11a48:	ldr	r3, [r3]
   11a4c:	sub	r3, r3, #-1073741823	; 0xc0000001
   11a50:	ldr	r1, [pc, #960]	; 11e18 <__assert_fail@plt+0xb48>
   11a54:	ldr	r0, [r6, r3, lsl #2]
   11a58:	bl	10fdc <strcmp@plt>
   11a5c:	cmp	r0, #0
   11a60:	moveq	r9, #0
   11a64:	beq	1187c <__assert_fail@plt+0x5ac>
   11a68:	mov	r2, #5
   11a6c:	ldr	r1, [pc, #936]	; 11e1c <__assert_fail@plt+0xb4c>
   11a70:	mov	r0, #0
   11a74:	bl	11060 <dcgettext@plt>
   11a78:	mov	r2, r0
   11a7c:	mov	r1, #0
   11a80:	mov	r0, #1
   11a84:	bl	110f0 <error@plt>
   11a88:	ldr	r0, [sl]
   11a8c:	cmp	r0, #0
   11a90:	beq	11bdc <__assert_fail@plt+0x90c>
   11a94:	ldr	r1, [pc, #900]	; 11e20 <__assert_fail@plt+0xb50>
   11a98:	bl	10fdc <strcmp@plt>
   11a9c:	cmp	r0, #0
   11aa0:	moveq	r9, #1
   11aa4:	strbeq	r9, [sp, #148]	; 0x94
   11aa8:	beq	1187c <__assert_fail@plt+0x5ac>
   11aac:	mov	r2, #5
   11ab0:	ldr	r1, [pc, #876]	; 11e24 <__assert_fail@plt+0xb54>
   11ab4:	mov	r0, #0
   11ab8:	bl	11060 <dcgettext@plt>
   11abc:	mov	r4, r0
   11ac0:	ldr	r3, [pc, #824]	; 11e00 <__assert_fail@plt+0xb30>
   11ac4:	ldr	r1, [r3]
   11ac8:	mov	r0, #4
   11acc:	bl	183dc <__assert_fail@plt+0x710c>
   11ad0:	mov	r3, r0
   11ad4:	mov	r2, r4
   11ad8:	mov	r1, #0
   11adc:	mov	r0, #1
   11ae0:	bl	110f0 <error@plt>
   11ae4:	mov	r3, #1
   11ae8:	strb	r3, [sp, #150]	; 0x96
   11aec:	b	1187c <__assert_fail@plt+0x5ac>
   11af0:	mov	r4, #0
   11af4:	str	r4, [sp, #16]
   11af8:	ldr	r3, [pc, #808]	; 11e28 <__assert_fail@plt+0xb58>
   11afc:	str	r3, [sp, #12]
   11b00:	ldr	r3, [pc, #804]	; 11e2c <__assert_fail@plt+0xb5c>
   11b04:	str	r3, [sp, #8]
   11b08:	ldr	r3, [pc, #800]	; 11e30 <__assert_fail@plt+0xb60>
   11b0c:	str	r3, [sp, #4]
   11b10:	ldr	r3, [pc, #796]	; 11e34 <__assert_fail@plt+0xb64>
   11b14:	str	r3, [sp]
   11b18:	ldr	r3, [pc, #792]	; 11e38 <__assert_fail@plt+0xb68>
   11b1c:	ldr	r3, [r3]
   11b20:	ldr	r2, [pc, #788]	; 11e3c <__assert_fail@plt+0xb6c>
   11b24:	ldr	r1, [pc, #788]	; 11e40 <__assert_fail@plt+0xb70>
   11b28:	ldr	r0, [pc, #788]	; 11e44 <__assert_fail@plt+0xb74>
   11b2c:	ldr	r0, [r0]
   11b30:	bl	18b68 <__assert_fail@plt+0x7898>
   11b34:	mov	r0, r4
   11b38:	bl	1115c <exit@plt>
   11b3c:	add	r4, r4, #1
   11b40:	cmp	r5, r4
   11b44:	beq	11bd4 <__assert_fail@plt+0x904>
   11b48:	ldr	r7, [r8, #4]!
   11b4c:	ldrb	r3, [r7]
   11b50:	cmp	r3, #45	; 0x2d
   11b54:	bne	11b3c <__assert_fail@plt+0x86c>
   11b58:	ldrb	r3, [r7, #1]
   11b5c:	cmp	r3, #0
   11b60:	beq	11b3c <__assert_fail@plt+0x86c>
   11b64:	add	r2, sp, #24
   11b68:	mov	r1, r7
   11b6c:	mov	r0, r9
   11b70:	bl	112ac <__lxstat64@plt>
   11b74:	cmp	r0, #0
   11b78:	bne	11b3c <__assert_fail@plt+0x86c>
   11b7c:	ldr	r3, [pc, #708]	; 11e48 <__assert_fail@plt+0xb78>
   11b80:	ldr	r4, [r3]
   11b84:	mov	r2, #5
   11b88:	ldr	r1, [pc, #700]	; 11e4c <__assert_fail@plt+0xb7c>
   11b8c:	bl	11060 <dcgettext@plt>
   11b90:	mov	r5, r0
   11b94:	ldr	r6, [r6]
   11b98:	mov	r2, r7
   11b9c:	mov	r1, #3
   11ba0:	mov	r0, #1
   11ba4:	bl	18370 <__assert_fail@plt+0x70a0>
   11ba8:	mov	r8, r0
   11bac:	mov	r1, r7
   11bb0:	mov	r0, #4
   11bb4:	bl	183dc <__assert_fail@plt+0x710c>
   11bb8:	str	r0, [sp, #4]
   11bbc:	str	r8, [sp]
   11bc0:	mov	r3, r6
   11bc4:	mov	r2, r5
   11bc8:	mov	r1, #1
   11bcc:	mov	r0, r4
   11bd0:	bl	111bc <__fprintf_chk@plt>
   11bd4:	mov	r0, #1
   11bd8:	bl	11408 <__assert_fail@plt+0x138>
   11bdc:	mov	r9, #1
   11be0:	b	1187c <__assert_fail@plt+0x5ac>
   11be4:	ldr	r3, [pc, #552]	; 11e14 <__assert_fail@plt+0xb44>
   11be8:	ldr	r3, [r3]
   11bec:	cmp	r5, r3
   11bf0:	bgt	11c34 <__assert_fail@plt+0x964>
   11bf4:	ldrb	r3, [sp, #132]	; 0x84
   11bf8:	cmp	r3, #0
   11bfc:	movne	r0, #0
   11c00:	beq	11c0c <__assert_fail@plt+0x93c>
   11c04:	add	sp, sp, #156	; 0x9c
   11c08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c0c:	mov	r2, #5
   11c10:	ldr	r1, [pc, #568]	; 11e50 <__assert_fail@plt+0xb80>
   11c14:	mov	r0, #0
   11c18:	bl	11060 <dcgettext@plt>
   11c1c:	mov	r2, r0
   11c20:	mov	r1, #0
   11c24:	mov	r0, r1
   11c28:	bl	110f0 <error@plt>
   11c2c:	mov	r0, #1
   11c30:	bl	11408 <__assert_fail@plt+0x138>
   11c34:	ldrb	r3, [sp, #141]	; 0x8d
   11c38:	tst	r9, r3
   11c3c:	bne	11d28 <__assert_fail@plt+0xa58>
   11c40:	ldr	r3, [pc, #460]	; 11e14 <__assert_fail@plt+0xb44>
   11c44:	ldr	r3, [r3]
   11c48:	add	r6, r6, r3, lsl #2
   11c4c:	cmp	r4, #0
   11c50:	beq	11d00 <__assert_fail@plt+0xa30>
   11c54:	sub	r5, r5, r3
   11c58:	mov	r8, r5
   11c5c:	asr	r9, r5, #31
   11c60:	ldrb	r3, [sp, #141]	; 0x8d
   11c64:	cmp	r9, #0
   11c68:	cmpeq	r5, #3
   11c6c:	movls	r2, r3
   11c70:	orrhi	r2, r3, #1
   11c74:	cmp	r2, #0
   11c78:	beq	11d00 <__assert_fail@plt+0xa30>
   11c7c:	ldr	r2, [pc, #452]	; 11e48 <__assert_fail@plt+0xb78>
   11c80:	ldr	r4, [r2]
   11c84:	cmp	r3, #0
   11c88:	beq	11d78 <__assert_fail@plt+0xaa8>
   11c8c:	mvn	r2, #0
   11c90:	mov	r3, #0
   11c94:	cmp	r9, r3
   11c98:	cmpeq	r5, r2
   11c9c:	movls	r3, r5
   11ca0:	bls	11cc0 <__assert_fail@plt+0x9f0>
   11ca4:	ldr	r2, [pc, #424]	; 11e54 <__assert_fail@plt+0xb84>
   11ca8:	mov	r3, #0
   11cac:	mov	r0, r5
   11cb0:	mov	r1, r9
   11cb4:	bl	19f0c <__assert_fail@plt+0x8c3c>
   11cb8:	add	r3, r2, #999424	; 0xf4000
   11cbc:	add	r3, r3, #576	; 0x240
   11cc0:	mov	r2, #5
   11cc4:	str	r2, [sp]
   11cc8:	ldr	r2, [pc, #392]	; 11e58 <__assert_fail@plt+0xb88>
   11ccc:	ldr	r1, [pc, #392]	; 11e5c <__assert_fail@plt+0xb8c>
   11cd0:	mov	r0, #0
   11cd4:	bl	112b8 <dcngettext@plt>
   11cd8:	mov	r2, r0
   11cdc:	strd	r8, [sp]
   11ce0:	ldr	r3, [pc, #376]	; 11e60 <__assert_fail@plt+0xb90>
   11ce4:	ldr	r3, [r3]
   11ce8:	mov	r1, #1
   11cec:	mov	r0, r4
   11cf0:	bl	111bc <__fprintf_chk@plt>
   11cf4:	bl	192e4 <__assert_fail@plt+0x8014>
   11cf8:	cmp	r0, #0
   11cfc:	beq	11de0 <__assert_fail@plt+0xb10>
   11d00:	add	r1, sp, #132	; 0x84
   11d04:	mov	r0, r6
   11d08:	bl	125e0 <__assert_fail@plt+0x1310>
   11d0c:	sub	r3, r0, #2
   11d10:	cmp	r3, #2
   11d14:	bhi	11dcc <__assert_fail@plt+0xafc>
   11d18:	cmp	r0, #4
   11d1c:	movne	r0, #0
   11d20:	moveq	r0, #1
   11d24:	b	11c04 <__assert_fail@plt+0x934>
   11d28:	ldr	r0, [pc, #308]	; 11e64 <__assert_fail@plt+0xb94>
   11d2c:	bl	18624 <__assert_fail@plt+0x7354>
   11d30:	str	r0, [sp, #144]	; 0x90
   11d34:	cmp	r0, #0
   11d38:	bne	11c40 <__assert_fail@plt+0x970>
   11d3c:	bl	11180 <__errno_location@plt>
   11d40:	ldr	r4, [r0]
   11d44:	mov	r2, #5
   11d48:	ldr	r1, [pc, #280]	; 11e68 <__assert_fail@plt+0xb98>
   11d4c:	mov	r0, #0
   11d50:	bl	11060 <dcgettext@plt>
   11d54:	mov	r5, r0
   11d58:	ldr	r1, [pc, #268]	; 11e6c <__assert_fail@plt+0xb9c>
   11d5c:	mov	r0, #4
   11d60:	bl	183dc <__assert_fail@plt+0x710c>
   11d64:	mov	r3, r0
   11d68:	mov	r2, r5
   11d6c:	mov	r1, r4
   11d70:	mov	r0, #1
   11d74:	bl	110f0 <error@plt>
   11d78:	mvn	r2, #0
   11d7c:	mov	r3, #0
   11d80:	cmp	r9, r3
   11d84:	cmpeq	r5, r2
   11d88:	movls	r3, r5
   11d8c:	bls	11dac <__assert_fail@plt+0xadc>
   11d90:	ldr	r2, [pc, #188]	; 11e54 <__assert_fail@plt+0xb84>
   11d94:	mov	r3, #0
   11d98:	mov	r0, r5
   11d9c:	mov	r1, r9
   11da0:	bl	19f0c <__assert_fail@plt+0x8c3c>
   11da4:	add	r3, r2, #999424	; 0xf4000
   11da8:	add	r3, r3, #576	; 0x240
   11dac:	mov	r2, #5
   11db0:	str	r2, [sp]
   11db4:	ldr	r2, [pc, #180]	; 11e70 <__assert_fail@plt+0xba0>
   11db8:	ldr	r1, [pc, #180]	; 11e74 <__assert_fail@plt+0xba4>
   11dbc:	mov	r0, #0
   11dc0:	bl	112b8 <dcngettext@plt>
   11dc4:	mov	r2, r0
   11dc8:	b	11cdc <__assert_fail@plt+0xa0c>
   11dcc:	ldr	r3, [pc, #164]	; 11e78 <__assert_fail@plt+0xba8>
   11dd0:	ldr	r2, [pc, #164]	; 11e7c <__assert_fail@plt+0xbac>
   11dd4:	ldr	r1, [pc, #164]	; 11e80 <__assert_fail@plt+0xbb0>
   11dd8:	ldr	r0, [pc, #164]	; 11e84 <__assert_fail@plt+0xbb4>
   11ddc:	bl	112d0 <__assert_fail@plt>
   11de0:	mov	r0, #0
   11de4:	b	11c04 <__assert_fail@plt+0x934>
   11de8:	andeq	fp, r1, r0, lsr #5
   11dec:	andeq	sl, r1, r0, ror #19
   11df0:	andeq	sl, r1, r8, lsl #21
   11df4:	andeq	r3, r1, ip, asr #4
   11df8:	andeq	sl, r1, r8, lsl #2
   11dfc:	muleq	r1, r4, fp
   11e00:	muleq	r2, r8, r1
   11e04:	andeq	r0, r0, r1, lsl #2
   11e08:	andeq	r0, r0, r3, lsl #2
   11e0c:	andeq	ip, r2, r0, lsr r1
   11e10:	andeq	sl, r1, r0, lsr #21
   11e14:	andeq	ip, r2, r0, lsl #3
   11e18:			; <UNDEFINED> instruction: 0x0001aab0
   11e1c:	andeq	sl, r1, r4, asr #21
   11e20:	strdeq	sl, [r1], -ip
   11e24:	andeq	sl, r1, r0, lsl #22
   11e28:	andeq	sl, r1, ip, lsr #22
   11e2c:	andeq	sl, r1, ip, lsr fp
   11e30:	andeq	sl, r1, r0, asr fp
   11e34:	andeq	sl, r1, r0, ror #22
   11e38:	andeq	ip, r2, ip, lsr #2
   11e3c:	ldrdeq	sl, [r1], -ip
   11e40:	andeq	sl, r1, ip, lsr r2
   11e44:	muleq	r2, r4, r1
   11e48:	andeq	ip, r2, r8, lsl #3
   11e4c:	andeq	sl, r1, ip, ror #22
   11e50:	muleq	r1, ip, fp
   11e54:	andeq	r4, pc, r0, asr #4
   11e58:	ldrdeq	sl, [r1], -r0
   11e5c:	strdeq	sl, [r1], -r8
   11e60:			; <UNDEFINED> instruction: 0x0002c1bc
   11e64:	andeq	ip, r2, r0, lsr #3
   11e68:	andeq	sl, r1, ip, lsr #23
   11e6c:	andeq	sl, r1, ip, asr #23
   11e70:	andeq	sl, r1, r0, lsr #24
   11e74:	andeq	sl, r1, ip, lsr ip
   11e78:	andeq	sl, r1, r4, lsr r2
   11e7c:	andeq	r0, r0, r3, ror r1
   11e80:	andeq	sl, r1, r8, asr ip
   11e84:	andeq	sl, r1, r4, ror #24
   11e88:	ldr	r3, [r0, #4]
   11e8c:	ldr	r2, [r3, #48]	; 0x30
   11e90:	cmp	r2, #0
   11e94:	bxlt	lr
   11e98:	ldr	r2, [r3, #16]
   11e9c:	cmp	r2, #0
   11ea0:	bxne	lr
   11ea4:	mov	r1, #1
   11ea8:	str	r1, [r3, #16]
   11eac:	ldr	r3, [r3, #4]
   11eb0:	ldr	r2, [r3, #48]	; 0x30
   11eb4:	cmp	r2, #0
   11eb8:	blt	11ecc <__assert_fail@plt+0xbfc>
   11ebc:	ldr	r2, [r3, #16]
   11ec0:	cmp	r2, #0
   11ec4:	beq	11ea8 <__assert_fail@plt+0xbd8>
   11ec8:	bx	lr
   11ecc:	bx	lr
   11ed0:	push	{r4, r6, r7, lr}
   11ed4:	sub	sp, sp, #8
   11ed8:	mov	r4, r2
   11edc:	mov	ip, r3
   11ee0:	ldrd	r6, [r2, #48]	; 0x30
   11ee4:	mvn	r2, #0
   11ee8:	mvn	r3, #0
   11eec:	cmp	r7, r3
   11ef0:	cmpeq	r6, r2
   11ef4:	beq	11f14 <__assert_fail@plt+0xc44>
   11ef8:	ldrd	r2, [r4, #48]	; 0x30
   11efc:	cmp	r2, #0
   11f00:	sbcs	r3, r3, #0
   11f04:	movge	r0, #0
   11f08:	blt	11f50 <__assert_fail@plt+0xc80>
   11f0c:	add	sp, sp, #8
   11f10:	pop	{r4, r6, r7, pc}
   11f14:	str	ip, [sp]
   11f18:	mov	r3, r4
   11f1c:	mov	r2, r1
   11f20:	mov	r1, r0
   11f24:	mov	r0, #3
   11f28:	bl	11090 <__fxstatat64@plt>
   11f2c:	cmp	r0, #0
   11f30:	beq	11ef8 <__assert_fail@plt+0xc28>
   11f34:	mvn	r2, #1
   11f38:	mvn	r3, #0
   11f3c:	strd	r2, [r4, #48]	; 0x30
   11f40:	bl	11180 <__errno_location@plt>
   11f44:	ldr	r2, [r0]
   11f48:	asr	r3, r2, #31
   11f4c:	strd	r2, [r4, #96]	; 0x60
   11f50:	bl	11180 <__errno_location@plt>
   11f54:	ldr	r3, [r4, #96]	; 0x60
   11f58:	str	r3, [r0]
   11f5c:	mvn	r0, #0
   11f60:	b	11f0c <__assert_fail@plt+0xc3c>
   11f64:	push	{r4, r5, r6, r7, lr}
   11f68:	sub	sp, sp, #116	; 0x74
   11f6c:	mov	r6, r0
   11f70:	mov	r4, r1
   11f74:	mov	r7, r2
   11f78:	subs	r5, r3, #0
   11f7c:	cmp	r3, #0
   11f80:	movne	r2, #512	; 0x200
   11f84:	moveq	r2, #0
   11f88:	ldr	r1, [r1, #24]
   11f8c:	ldr	r0, [r0, #32]
   11f90:	bl	10ff4 <unlinkat@plt>
   11f94:	cmp	r0, #0
   11f98:	bne	11ff0 <__assert_fail@plt+0xd20>
   11f9c:	ldrb	r3, [r7, #18]
   11fa0:	cmp	r3, #0
   11fa4:	moveq	r0, #2
   11fa8:	beq	11fe8 <__assert_fail@plt+0xd18>
   11fac:	cmp	r5, #0
   11fb0:	mov	r2, #5
   11fb4:	ldrne	r1, [pc, #324]	; 12100 <__assert_fail@plt+0xe30>
   11fb8:	ldreq	r1, [pc, #324]	; 12104 <__assert_fail@plt+0xe34>
   11fbc:	moveq	r0, #0
   11fc0:	bl	11060 <dcgettext@plt>
   11fc4:	mov	r5, r0
   11fc8:	ldr	r1, [r4, #28]
   11fcc:	mov	r0, #4
   11fd0:	bl	183dc <__assert_fail@plt+0x710c>
   11fd4:	mov	r2, r0
   11fd8:	mov	r1, r5
   11fdc:	mov	r0, #1
   11fe0:	bl	111a4 <__printf_chk@plt>
   11fe4:	mov	r0, #2
   11fe8:	add	sp, sp, #116	; 0x74
   11fec:	pop	{r4, r5, r6, r7, pc}
   11ff0:	bl	11180 <__errno_location@plt>
   11ff4:	mov	r5, r0
   11ff8:	ldr	r3, [r0]
   11ffc:	cmp	r3, #30
   12000:	beq	12038 <__assert_fail@plt+0xd68>
   12004:	ldr	r3, [r5]
   12008:	ldrb	r2, [r7]
   1200c:	cmp	r2, #0
   12010:	beq	1207c <__assert_fail@plt+0xdac>
   12014:	cmp	r3, #20
   12018:	beq	12030 <__assert_fail@plt+0xd60>
   1201c:	ble	12074 <__assert_fail@plt+0xda4>
   12020:	cmp	r3, #22
   12024:	beq	12030 <__assert_fail@plt+0xd60>
   12028:	cmp	r3, #84	; 0x54
   1202c:	bne	1207c <__assert_fail@plt+0xdac>
   12030:	mov	r0, #2
   12034:	b	11fe8 <__assert_fail@plt+0xd18>
   12038:	ldr	r1, [r6, #32]
   1203c:	mov	r3, #256	; 0x100
   12040:	str	r3, [sp]
   12044:	add	r3, sp, #8
   12048:	ldr	r2, [r4, #24]
   1204c:	mov	r0, #3
   12050:	bl	11090 <__fxstatat64@plt>
   12054:	cmp	r0, #0
   12058:	beq	12068 <__assert_fail@plt+0xd98>
   1205c:	ldr	r3, [r5]
   12060:	cmp	r3, #2
   12064:	beq	12004 <__assert_fail@plt+0xd34>
   12068:	mov	r3, #30
   1206c:	str	r3, [r5]
   12070:	b	12004 <__assert_fail@plt+0xd34>
   12074:	cmp	r3, #2
   12078:	beq	12030 <__assert_fail@plt+0xd60>
   1207c:	ldrh	r2, [r4, #56]	; 0x38
   12080:	cmp	r2, #4
   12084:	beq	120d0 <__assert_fail@plt+0xe00>
   12088:	ldr	r5, [r5]
   1208c:	mov	r2, #5
   12090:	ldr	r1, [pc, #112]	; 12108 <__assert_fail@plt+0xe38>
   12094:	mov	r0, #0
   12098:	bl	11060 <dcgettext@plt>
   1209c:	mov	r6, r0
   120a0:	ldr	r1, [r4, #28]
   120a4:	mov	r0, #4
   120a8:	bl	183dc <__assert_fail@plt+0x710c>
   120ac:	mov	r3, r0
   120b0:	mov	r2, r6
   120b4:	mov	r1, r5
   120b8:	mov	r0, #0
   120bc:	bl	110f0 <error@plt>
   120c0:	mov	r0, r4
   120c4:	bl	11e88 <__assert_fail@plt+0xbb8>
   120c8:	mov	r0, #4
   120cc:	b	11fe8 <__assert_fail@plt+0xd18>
   120d0:	sub	r3, r3, #17
   120d4:	cmp	r3, #22
   120d8:	bhi	12088 <__assert_fail@plt+0xdb8>
   120dc:	ldr	r2, [pc, #40]	; 1210c <__assert_fail@plt+0xe3c>
   120e0:	lsr	r3, r2, r3
   120e4:	tst	r3, #1
   120e8:	beq	12088 <__assert_fail@plt+0xdb8>
   120ec:	ldr	r3, [r4, #32]
   120f0:	cmp	r3, #13
   120f4:	cmpne	r3, #1
   120f8:	streq	r3, [r5]
   120fc:	b	12088 <__assert_fail@plt+0xdb8>
   12100:	muleq	r1, r8, sp
   12104:			; <UNDEFINED> instruction: 0x0001adb0
   12108:			; <UNDEFINED> instruction: 0x0001adbc
   1210c:	subeq	r0, r0, r9, lsl r0
   12110:	push	{r4, lr}
   12114:	mov	r4, r0
   12118:	mov	r2, #4
   1211c:	bl	15850 <__assert_fail@plt+0x4580>
   12120:	mov	r0, r4
   12124:	bl	151e0 <__assert_fail@plt+0x3f10>
   12128:	pop	{r4, pc}
   1212c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12130:	sub	sp, sp, #132	; 0x84
   12134:	mov	r6, r1
   12138:	mov	r4, r2
   1213c:	mov	r8, r3
   12140:	ldr	r7, [sp, #172]	; 0xac
   12144:	ldr	r3, [r0, #32]
   12148:	mov	r0, r3
   1214c:	str	r3, [sp, #12]
   12150:	ldr	r3, [r1, #28]
   12154:	str	r3, [sp, #16]
   12158:	ldr	r9, [r1, #24]
   1215c:	cmp	r7, #0
   12160:	beq	1244c <__assert_fail@plt+0x117c>
   12164:	mov	r3, #2
   12168:	str	r3, [r7]
   1216c:	mvn	r2, #0
   12170:	mvn	r3, #0
   12174:	strd	r2, [sp, #72]	; 0x48
   12178:	cmp	r4, #0
   1217c:	movne	sl, #4
   12180:	moveq	sl, #0
   12184:	mov	r2, #51456	; 0xc900
   12188:	mov	r1, r9
   1218c:	bl	11174 <openat64@plt>
   12190:	subs	r4, r0, #0
   12194:	blt	1247c <__assert_fail@plt+0x11ac>
   12198:	mov	r0, r4
   1219c:	bl	11234 <fdopendir@plt>
   121a0:	subs	r5, r0, #0
   121a4:	beq	12220 <__assert_fail@plt+0xf50>
   121a8:	bl	11180 <__errno_location@plt>
   121ac:	mov	fp, r0
   121b0:	mov	r3, #0
   121b4:	str	r3, [r0]
   121b8:	mov	r0, r5
   121bc:	bl	11228 <readdir64@plt>
   121c0:	cmp	r0, #0
   121c4:	beq	124e4 <__assert_fail@plt+0x1214>
   121c8:	add	r2, r0, #19
   121cc:	ldrb	r3, [r0, #19]
   121d0:	cmp	r3, #46	; 0x2e
   121d4:	bne	1246c <__assert_fail@plt+0x119c>
   121d8:	ldrb	r3, [r0, #20]
   121dc:	cmp	r3, #46	; 0x2e
   121e0:	moveq	r3, #2
   121e4:	movne	r3, #1
   121e8:	ldrb	r4, [r2, r3]
   121ec:	cmp	r4, #47	; 0x2f
   121f0:	cmpne	r4, #0
   121f4:	moveq	r4, #1
   121f8:	movne	r4, #0
   121fc:	beq	121b8 <__assert_fail@plt+0xee8>
   12200:	ldr	r3, [fp]
   12204:	str	r3, [sp, #20]
   12208:	mov	r0, r5
   1220c:	bl	112c4 <closedir@plt>
   12210:	ldr	r3, [sp, #20]
   12214:	str	r3, [fp]
   12218:	mov	r3, #3
   1221c:	b	12484 <__assert_fail@plt+0x11b4>
   12220:	mov	r0, r4
   12224:	bl	112a0 <close@plt>
   12228:	b	1247c <__assert_fail@plt+0x11ac>
   1222c:	mov	r3, #256	; 0x100
   12230:	add	r2, sp, #24
   12234:	mov	r1, r9
   12238:	ldr	r5, [sp, #12]
   1223c:	mov	r0, r5
   12240:	bl	11ed0 <__assert_fail@plt+0xc00>
   12244:	cmp	r0, #0
   12248:	bne	125bc <__assert_fail@plt+0x12ec>
   1224c:	ldr	r3, [sp, #40]	; 0x28
   12250:	and	r3, r3, #61440	; 0xf000
   12254:	cmp	r3, #40960	; 0xa000
   12258:	beq	124d8 <__assert_fail@plt+0x1208>
   1225c:	mov	r3, #512	; 0x200
   12260:	mov	r2, #2
   12264:	mov	r1, r9
   12268:	mov	r0, r5
   1226c:	bl	11018 <faccessat@plt>
   12270:	cmp	r0, #0
   12274:	beq	124d8 <__assert_fail@plt+0x1208>
   12278:	bl	11180 <__errno_location@plt>
   1227c:	ldr	r3, [r0]
   12280:	cmp	r3, #13
   12284:	moveq	r5, #1
   12288:	mvnne	r5, #0
   1228c:	bl	11180 <__errno_location@plt>
   12290:	ldr	r6, [r0]
   12294:	cmp	r5, #0
   12298:	cmpge	sl, #0
   1229c:	beq	122f0 <__assert_fail@plt+0x1020>
   122a0:	cmp	r5, #0
   122a4:	blt	12534 <__assert_fail@plt+0x1264>
   122a8:	cmp	sl, #4
   122ac:	beq	1232c <__assert_fail@plt+0x105c>
   122b0:	cmp	sl, #10
   122b4:	beq	1251c <__assert_fail@plt+0x124c>
   122b8:	ldr	r1, [sp, #16]
   122bc:	mov	r0, #4
   122c0:	bl	183dc <__assert_fail@plt+0x710c>
   122c4:	mov	r6, r0
   122c8:	b	1255c <__assert_fail@plt+0x128c>
   122cc:	mov	r6, #0
   122d0:	ldr	r3, [r8, #4]
   122d4:	cmp	r3, #3
   122d8:	movne	r0, #2
   122dc:	bne	12410 <__assert_fail@plt+0x1140>
   122e0:	cmp	sl, #0
   122e4:	movne	r5, #0
   122e8:	bne	122a8 <__assert_fail@plt+0xfd8>
   122ec:	mov	r5, sl
   122f0:	mov	r3, #256	; 0x100
   122f4:	add	r2, sp, #24
   122f8:	mov	r1, r9
   122fc:	ldr	r0, [sp, #12]
   12300:	bl	11ed0 <__assert_fail@plt+0xc00>
   12304:	cmp	r0, #0
   12308:	bne	12350 <__assert_fail@plt+0x1080>
   1230c:	ldr	r3, [sp, #40]	; 0x28
   12310:	and	r3, r3, #61440	; 0xf000
   12314:	cmp	r3, #40960	; 0xa000
   12318:	beq	12514 <__assert_fail@plt+0x1244>
   1231c:	cmp	r3, #16384	; 0x4000
   12320:	bne	122a0 <__assert_fail@plt+0xfd0>
   12324:	cmp	r5, #0
   12328:	blt	12358 <__assert_fail@plt+0x1088>
   1232c:	ldrb	r3, [r8, #9]
   12330:	cmp	r3, #0
   12334:	bne	12548 <__assert_fail@plt+0x1278>
   12338:	ldrb	r3, [r8, #10]
   1233c:	tst	r4, r3
   12340:	moveq	r6, #21
   12344:	beq	12534 <__assert_fail@plt+0x1264>
   12348:	mov	sl, #4
   1234c:	b	1254c <__assert_fail@plt+0x127c>
   12350:	bl	11180 <__errno_location@plt>
   12354:	ldr	r6, [r0]
   12358:	ldr	r1, [sp, #16]
   1235c:	mov	r0, #4
   12360:	bl	183dc <__assert_fail@plt+0x710c>
   12364:	mov	r4, r0
   12368:	mov	r2, #5
   1236c:	ldr	r1, [pc, #592]	; 125c4 <__assert_fail@plt+0x12f4>
   12370:	mov	r0, #0
   12374:	bl	11060 <dcgettext@plt>
   12378:	mov	r3, r4
   1237c:	mov	r2, r0
   12380:	mov	r1, r6
   12384:	mov	r0, #0
   12388:	bl	110f0 <error@plt>
   1238c:	mov	r0, #4
   12390:	b	12410 <__assert_fail@plt+0x1140>
   12394:	mov	r3, #256	; 0x100
   12398:	add	r2, sp, #24
   1239c:	mov	r1, r9
   123a0:	ldr	r0, [sp, #12]
   123a4:	bl	11ed0 <__assert_fail@plt+0xc00>
   123a8:	cmp	r0, #0
   123ac:	bne	12418 <__assert_fail@plt+0x1148>
   123b0:	ldr	r3, [pc, #528]	; 125c8 <__assert_fail@plt+0x12f8>
   123b4:	ldr	r4, [r3]
   123b8:	cmp	r5, #0
   123bc:	mov	r2, #5
   123c0:	ldrne	r1, [pc, #516]	; 125cc <__assert_fail@plt+0x12fc>
   123c4:	ldreq	r1, [pc, #516]	; 125d0 <__assert_fail@plt+0x1300>
   123c8:	mov	r0, #0
   123cc:	bl	11060 <dcgettext@plt>
   123d0:	mov	r5, r0
   123d4:	ldr	r3, [pc, #504]	; 125d4 <__assert_fail@plt+0x1304>
   123d8:	ldr	r7, [r3]
   123dc:	add	r0, sp, #24
   123e0:	bl	134dc <__assert_fail@plt+0x220c>
   123e4:	str	r6, [sp, #4]
   123e8:	str	r0, [sp]
   123ec:	mov	r3, r7
   123f0:	mov	r2, r5
   123f4:	mov	r1, #1
   123f8:	mov	r0, r4
   123fc:	bl	111bc <__fprintf_chk@plt>
   12400:	bl	192e4 <__assert_fail@plt+0x8014>
   12404:	cmp	r0, #0
   12408:	moveq	r0, #3
   1240c:	movne	r0, #2
   12410:	add	sp, sp, #132	; 0x84
   12414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12418:	bl	11180 <__errno_location@plt>
   1241c:	ldr	r4, [r0]
   12420:	mov	r2, #5
   12424:	ldr	r1, [pc, #408]	; 125c4 <__assert_fail@plt+0x12f4>
   12428:	mov	r0, #0
   1242c:	bl	11060 <dcgettext@plt>
   12430:	mov	r3, r6
   12434:	mov	r2, r0
   12438:	mov	r1, r4
   1243c:	mov	r0, #0
   12440:	bl	110f0 <error@plt>
   12444:	mov	r0, #4
   12448:	b	12410 <__assert_fail@plt+0x1140>
   1244c:	mvn	r2, #0
   12450:	mvn	r3, #0
   12454:	strd	r2, [sp, #72]	; 0x48
   12458:	cmp	r4, #0
   1245c:	moveq	sl, #0
   12460:	movne	sl, #4
   12464:	movne	r4, #0
   12468:	b	12488 <__assert_fail@plt+0x11b8>
   1246c:	ldr	r4, [fp]
   12470:	mov	r0, r5
   12474:	bl	112c4 <closedir@plt>
   12478:	str	r4, [fp]
   1247c:	mov	r4, #0
   12480:	mov	r3, #3
   12484:	str	r3, [r7]
   12488:	ldr	r3, [r6, #16]
   1248c:	cmp	r3, #0
   12490:	movne	r0, #3
   12494:	bne	12410 <__assert_fail@plt+0x1140>
   12498:	ldr	r3, [r8, #4]
   1249c:	cmp	r3, #5
   124a0:	moveq	r0, #2
   124a4:	beq	12410 <__assert_fail@plt+0x1140>
   124a8:	ldrb	r2, [r8]
   124ac:	cmp	r2, #0
   124b0:	bne	122cc <__assert_fail@plt+0xffc>
   124b4:	cmp	r3, #3
   124b8:	beq	124cc <__assert_fail@plt+0x11fc>
   124bc:	ldrb	r3, [r8, #17]
   124c0:	cmp	r3, #0
   124c4:	moveq	r0, #2
   124c8:	beq	12410 <__assert_fail@plt+0x1140>
   124cc:	bl	18c34 <__assert_fail@plt+0x7964>
   124d0:	cmp	r0, #0
   124d4:	beq	1222c <__assert_fail@plt+0xf5c>
   124d8:	bl	11180 <__errno_location@plt>
   124dc:	ldr	r6, [r0]
   124e0:	b	122d0 <__assert_fail@plt+0x1000>
   124e4:	ldr	r3, [fp]
   124e8:	mov	r4, r3
   124ec:	mov	r0, r5
   124f0:	bl	112c4 <closedir@plt>
   124f4:	mov	r3, r4
   124f8:	str	r4, [fp]
   124fc:	clz	r4, r4
   12500:	lsr	r4, r4, #5
   12504:	cmp	r3, #0
   12508:	moveq	r3, #4
   1250c:	movne	r3, #3
   12510:	b	12484 <__assert_fail@plt+0x11b4>
   12514:	cmp	r5, #0
   12518:	blt	12358 <__assert_fail@plt+0x1088>
   1251c:	ldr	r3, [r8, #4]
   12520:	cmp	r3, #3
   12524:	moveq	sl, #10
   12528:	beq	1254c <__assert_fail@plt+0x127c>
   1252c:	mov	r0, #2
   12530:	b	12410 <__assert_fail@plt+0x1140>
   12534:	ldr	r1, [sp, #16]
   12538:	mov	r0, #4
   1253c:	bl	183dc <__assert_fail@plt+0x710c>
   12540:	mov	r4, r0
   12544:	b	12368 <__assert_fail@plt+0x1098>
   12548:	mov	sl, #4
   1254c:	ldr	r1, [sp, #16]
   12550:	mov	r0, #4
   12554:	bl	183dc <__assert_fail@plt+0x710c>
   12558:	mov	r6, r0
   1255c:	ldr	r3, [sp, #168]	; 0xa8
   12560:	cmp	sl, #4
   12564:	cmpeq	r3, #2
   12568:	moveq	sl, #1
   1256c:	movne	sl, #0
   12570:	eor	sl, sl, #1
   12574:	orrs	r3, r4, sl
   12578:	bne	12394 <__assert_fail@plt+0x10c4>
   1257c:	ldr	r3, [pc, #68]	; 125c8 <__assert_fail@plt+0x12f8>
   12580:	ldr	r4, [r3]
   12584:	cmp	r5, #0
   12588:	mov	r2, #5
   1258c:	ldrne	r1, [pc, #68]	; 125d8 <__assert_fail@plt+0x1308>
   12590:	ldreq	r1, [pc, #68]	; 125dc <__assert_fail@plt+0x130c>
   12594:	mov	r0, #0
   12598:	bl	11060 <dcgettext@plt>
   1259c:	mov	r2, r0
   125a0:	ldr	r3, [pc, #44]	; 125d4 <__assert_fail@plt+0x1304>
   125a4:	ldr	r3, [r3]
   125a8:	str	r6, [sp]
   125ac:	mov	r1, #1
   125b0:	mov	r0, r4
   125b4:	bl	111bc <__fprintf_chk@plt>
   125b8:	b	12400 <__assert_fail@plt+0x1130>
   125bc:	mvn	r5, #0
   125c0:	b	1228c <__assert_fail@plt+0xfbc>
   125c4:			; <UNDEFINED> instruction: 0x0001adbc
   125c8:	andeq	ip, r2, r8, lsl #3
   125cc:	andeq	sl, r1, r0, lsr #28
   125d0:	andeq	sl, r1, r4, asr #28
   125d4:			; <UNDEFINED> instruction: 0x0002c1bc
   125d8:	ldrdeq	sl, [r1], -r0
   125dc:	andeq	sl, r1, r0, lsl #28
   125e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125e4:	sub	sp, sp, #124	; 0x7c
   125e8:	ldr	r3, [r0]
   125ec:	cmp	r3, #0
   125f0:	beq	12c38 <__assert_fail@plt+0x1968>
   125f4:	mov	r8, r1
   125f8:	ldrb	r1, [r1, #8]
   125fc:	mov	r2, #0
   12600:	cmp	r1, r2
   12604:	moveq	r1, #536	; 0x218
   12608:	movne	r1, #600	; 0x258
   1260c:	bl	19264 <__assert_fail@plt+0x7f94>
   12610:	mov	r6, r0
   12614:	mov	r4, #2
   12618:	ldr	r9, [pc, #1912]	; 12d98 <__assert_fail@plt+0x1ac8>
   1261c:	ldr	fp, [pc, #1912]	; 12d9c <__assert_fail@plt+0x1acc>
   12620:	b	12a60 <__assert_fail@plt+0x1790>
   12624:	bl	11180 <__errno_location@plt>
   12628:	mov	r5, r0
   1262c:	ldr	r7, [r0]
   12630:	cmp	r7, #0
   12634:	bne	12674 <__assert_fail@plt+0x13a4>
   12638:	mov	r0, r6
   1263c:	bl	1507c <__assert_fail@plt+0x3dac>
   12640:	cmp	r0, #0
   12644:	beq	12c3c <__assert_fail@plt+0x196c>
   12648:	ldr	r4, [r5]
   1264c:	mov	r2, #5
   12650:	ldr	r1, [pc, #1864]	; 12da0 <__assert_fail@plt+0x1ad0>
   12654:	mov	r0, #0
   12658:	bl	11060 <dcgettext@plt>
   1265c:	mov	r2, r0
   12660:	mov	r1, r4
   12664:	mov	r0, #0
   12668:	bl	110f0 <error@plt>
   1266c:	mov	r4, #4
   12670:	b	12c3c <__assert_fail@plt+0x196c>
   12674:	mov	r2, #5
   12678:	ldr	r1, [pc, #1828]	; 12da4 <__assert_fail@plt+0x1ad4>
   1267c:	mov	r0, #0
   12680:	bl	11060 <dcgettext@plt>
   12684:	mov	r2, r0
   12688:	mov	r1, r7
   1268c:	mov	r0, #0
   12690:	bl	110f0 <error@plt>
   12694:	mov	r4, #4
   12698:	b	12638 <__assert_fail@plt+0x1368>
   1269c:	ldrb	r3, [r8, #9]
   126a0:	cmp	r3, #0
   126a4:	bne	12c8c <__assert_fail@plt+0x19bc>
   126a8:	ldrb	r3, [r8, #10]
   126ac:	cmp	r3, #0
   126b0:	moveq	r4, #21
   126b4:	bne	12704 <__assert_fail@plt+0x1434>
   126b8:	mov	r2, #5
   126bc:	ldr	r1, [pc, #1764]	; 12da8 <__assert_fail@plt+0x1ad8>
   126c0:	mov	r0, #0
   126c4:	bl	11060 <dcgettext@plt>
   126c8:	mov	r7, r0
   126cc:	ldr	r1, [r5, #28]
   126d0:	mov	r0, #4
   126d4:	bl	183dc <__assert_fail@plt+0x710c>
   126d8:	mov	r3, r0
   126dc:	mov	r2, r7
   126e0:	mov	r1, r4
   126e4:	mov	r0, #0
   126e8:	bl	110f0 <error@plt>
   126ec:	mov	r0, r5
   126f0:	bl	11e88 <__assert_fail@plt+0xbb8>
   126f4:	mov	r1, r5
   126f8:	mov	r0, r6
   126fc:	bl	12110 <__assert_fail@plt+0xe40>
   12700:	b	12b84 <__assert_fail@plt+0x18b4>
   12704:	mov	r2, #51456	; 0xc900
   12708:	ldr	r1, [r5, #24]
   1270c:	ldr	r0, [r6, #32]
   12710:	bl	11174 <openat64@plt>
   12714:	subs	sl, r0, #0
   12718:	blt	12c58 <__assert_fail@plt+0x1988>
   1271c:	mov	r0, sl
   12720:	bl	11234 <fdopendir@plt>
   12724:	subs	r7, r0, #0
   12728:	beq	12790 <__assert_fail@plt+0x14c0>
   1272c:	bl	11180 <__errno_location@plt>
   12730:	mov	sl, r0
   12734:	mov	r3, #0
   12738:	str	r3, [r0]
   1273c:	mov	r0, r7
   12740:	bl	11228 <readdir64@plt>
   12744:	cmp	r0, #0
   12748:	beq	12c6c <__assert_fail@plt+0x199c>
   1274c:	add	r2, r0, #19
   12750:	ldrb	r3, [r0, #19]
   12754:	cmp	r3, #46	; 0x2e
   12758:	bne	12c48 <__assert_fail@plt+0x1978>
   1275c:	ldrb	r3, [r0, #20]
   12760:	cmp	r3, #46	; 0x2e
   12764:	moveq	r3, #2
   12768:	movne	r3, #1
   1276c:	ldrb	r3, [r2, r3]
   12770:	cmp	r3, #47	; 0x2f
   12774:	cmpne	r3, #0
   12778:	beq	1273c <__assert_fail@plt+0x146c>
   1277c:	ldr	r4, [sl]
   12780:	mov	r0, r7
   12784:	bl	112c4 <closedir@plt>
   12788:	str	r4, [sl]
   1278c:	b	12c58 <__assert_fail@plt+0x1988>
   12790:	mov	r0, sl
   12794:	bl	112a0 <close@plt>
   12798:	b	12c58 <__assert_fail@plt+0x1988>
   1279c:	ldrb	r3, [r0, #1]
   127a0:	cmp	r3, #46	; 0x2e
   127a4:	moveq	r3, #2
   127a8:	movne	r3, #1
   127ac:	ldrb	r3, [r0, r3]
   127b0:	cmp	r3, #47	; 0x2f
   127b4:	cmpne	r3, #0
   127b8:	bne	12cb0 <__assert_fail@plt+0x19e0>
   127bc:	mov	r2, #5
   127c0:	ldr	r1, [pc, #1508]	; 12dac <__assert_fail@plt+0x1adc>
   127c4:	mov	r0, #0
   127c8:	bl	11060 <dcgettext@plt>
   127cc:	mov	r4, r0
   127d0:	ldr	r2, [pc, #1496]	; 12db0 <__assert_fail@plt+0x1ae0>
   127d4:	mov	r1, #4
   127d8:	mov	r0, #0
   127dc:	bl	18370 <__assert_fail@plt+0x70a0>
   127e0:	mov	r7, r0
   127e4:	ldr	r2, [pc, #1480]	; 12db4 <__assert_fail@plt+0x1ae4>
   127e8:	mov	r1, #4
   127ec:	mov	r0, #1
   127f0:	bl	18370 <__assert_fail@plt+0x70a0>
   127f4:	mov	sl, r0
   127f8:	ldr	r2, [r5, #28]
   127fc:	mov	r1, #4
   12800:	mov	r0, #2
   12804:	bl	18370 <__assert_fail@plt+0x70a0>
   12808:	str	r0, [sp, #4]
   1280c:	str	sl, [sp]
   12810:	mov	r3, r7
   12814:	mov	r2, r4
   12818:	mov	r1, #0
   1281c:	mov	r0, r1
   12820:	bl	110f0 <error@plt>
   12824:	mov	r1, r5
   12828:	mov	r0, r6
   1282c:	bl	12110 <__assert_fail@plt+0xe40>
   12830:	b	12b84 <__assert_fail@plt+0x18b4>
   12834:	ldrd	r2, [r5, #64]	; 0x40
   12838:	ldrd	r0, [ip, #8]
   1283c:	cmp	r3, r1
   12840:	cmpeq	r2, r0
   12844:	bne	12cd0 <__assert_fail@plt+0x1a00>
   12848:	ldr	r1, [pc, #1384]	; 12db8 <__assert_fail@plt+0x1ae8>
   1284c:	ldr	r0, [r5, #28]
   12850:	bl	10fdc <strcmp@plt>
   12854:	cmp	r0, #0
   12858:	bne	128bc <__assert_fail@plt+0x15ec>
   1285c:	mov	r2, #5
   12860:	ldr	r1, [pc, #1364]	; 12dbc <__assert_fail@plt+0x1aec>
   12864:	bl	11060 <dcgettext@plt>
   12868:	mov	r4, r0
   1286c:	ldr	r1, [r5, #28]
   12870:	mov	r0, #4
   12874:	bl	183dc <__assert_fail@plt+0x710c>
   12878:	mov	r3, r0
   1287c:	mov	r2, r4
   12880:	mov	r1, #0
   12884:	mov	r0, r1
   12888:	bl	110f0 <error@plt>
   1288c:	mov	r2, #5
   12890:	ldr	r1, [pc, #1320]	; 12dc0 <__assert_fail@plt+0x1af0>
   12894:	mov	r0, #0
   12898:	bl	11060 <dcgettext@plt>
   1289c:	mov	r2, r0
   128a0:	mov	r1, #0
   128a4:	mov	r0, r1
   128a8:	bl	110f0 <error@plt>
   128ac:	mov	r1, r5
   128b0:	mov	r0, r6
   128b4:	bl	12110 <__assert_fail@plt+0xe40>
   128b8:	b	12b84 <__assert_fail@plt+0x18b4>
   128bc:	mov	r2, #5
   128c0:	ldr	r1, [pc, #1276]	; 12dc4 <__assert_fail@plt+0x1af4>
   128c4:	mov	r0, #0
   128c8:	bl	11060 <dcgettext@plt>
   128cc:	mov	r4, r0
   128d0:	ldr	r2, [r5, #28]
   128d4:	mov	r1, #4
   128d8:	mov	r0, #0
   128dc:	bl	18370 <__assert_fail@plt+0x70a0>
   128e0:	mov	r7, r0
   128e4:	ldr	r2, [pc, #1228]	; 12db8 <__assert_fail@plt+0x1ae8>
   128e8:	mov	r1, #4
   128ec:	mov	r0, #1
   128f0:	bl	18370 <__assert_fail@plt+0x70a0>
   128f4:	str	r0, [sp]
   128f8:	mov	r3, r7
   128fc:	mov	r2, r4
   12900:	mov	r1, #0
   12904:	mov	r0, r1
   12908:	bl	110f0 <error@plt>
   1290c:	b	1288c <__assert_fail@plt+0x15bc>
   12910:	mov	r2, #0
   12914:	ldr	r1, [pc, #1176]	; 12db4 <__assert_fail@plt+0x1ae4>
   12918:	mov	r0, r7
   1291c:	bl	135dc <__assert_fail@plt+0x230c>
   12920:	subs	r7, r0, #0
   12924:	beq	12940 <__assert_fail@plt+0x1670>
   12928:	add	r2, sp, #16
   1292c:	mov	r1, r7
   12930:	mov	r0, #3
   12934:	bl	112ac <__lxstat64@plt>
   12938:	cmp	r0, #0
   1293c:	beq	12d24 <__assert_fail@plt+0x1a54>
   12940:	mov	r2, #5
   12944:	ldr	r1, [pc, #1148]	; 12dc8 <__assert_fail@plt+0x1af8>
   12948:	mov	r0, #0
   1294c:	bl	11060 <dcgettext@plt>
   12950:	mov	r4, r0
   12954:	mov	r2, r7
   12958:	mov	r1, #4
   1295c:	mov	r0, #0
   12960:	bl	18370 <__assert_fail@plt+0x70a0>
   12964:	mov	sl, r0
   12968:	ldr	r2, [r5, #24]
   1296c:	mov	r1, #4
   12970:	mov	r0, #1
   12974:	bl	18370 <__assert_fail@plt+0x70a0>
   12978:	str	r0, [sp]
   1297c:	mov	r3, sl
   12980:	mov	r2, r4
   12984:	mov	r1, #0
   12988:	mov	r0, r1
   1298c:	bl	110f0 <error@plt>
   12990:	mov	r0, r7
   12994:	bl	136fc <__assert_fail@plt+0x242c>
   12998:	mov	r1, r5
   1299c:	mov	r0, r6
   129a0:	bl	12110 <__assert_fail@plt+0xe40>
   129a4:	b	12b84 <__assert_fail@plt+0x18b4>
   129a8:	ldr	r3, [sp, #16]
   129ac:	cmp	r3, #4
   129b0:	bne	12a30 <__assert_fail@plt+0x1760>
   129b4:	mov	r3, #1
   129b8:	mov	r2, r8
   129bc:	mov	r1, r5
   129c0:	mov	r0, r6
   129c4:	bl	11f64 <__assert_fail@plt+0xc94>
   129c8:	cmp	r0, #2
   129cc:	movne	sl, r0
   129d0:	bne	12d0c <__assert_fail@plt+0x1a3c>
   129d4:	mov	r1, r5
   129d8:	mov	r0, r6
   129dc:	bl	12110 <__assert_fail@plt+0xe40>
   129e0:	b	12a30 <__assert_fail@plt+0x1760>
   129e4:	cmp	ip, #6
   129e8:	beq	12ab8 <__assert_fail@plt+0x17e8>
   129ec:	bic	r7, ip, #2
   129f0:	uxth	r7, r7
   129f4:	cmp	r7, #4
   129f8:	movne	r7, #0
   129fc:	moveq	r7, #1
   12a00:	mov	r3, #0
   12a04:	str	r3, [sp, #4]
   12a08:	mov	r3, #3
   12a0c:	str	r3, [sp]
   12a10:	mov	r3, r8
   12a14:	mov	r2, r7
   12a18:	mov	r1, r5
   12a1c:	mov	r0, r6
   12a20:	bl	1212c <__assert_fail@plt+0xe5c>
   12a24:	mov	sl, r0
   12a28:	cmp	r0, #2
   12a2c:	beq	12b24 <__assert_fail@plt+0x1854>
   12a30:	sub	r3, sl, #2
   12a34:	cmp	r3, #2
   12a38:	bhi	12c24 <__assert_fail@plt+0x1954>
   12a3c:	cmp	sl, #4
   12a40:	moveq	r4, sl
   12a44:	beq	12a60 <__assert_fail@plt+0x1790>
   12a48:	cmp	sl, #3
   12a4c:	cmpeq	r4, #2
   12a50:	moveq	r3, #1
   12a54:	movne	r3, #0
   12a58:	cmp	r3, #0
   12a5c:	movne	r4, sl
   12a60:	mov	r0, r6
   12a64:	bl	151e0 <__assert_fail@plt+0x3f10>
   12a68:	subs	r5, r0, #0
   12a6c:	beq	12624 <__assert_fail@plt+0x1354>
   12a70:	ldrh	ip, [r5, #56]	; 0x38
   12a74:	sub	r3, ip, #1
   12a78:	cmp	r3, #12
   12a7c:	ldrls	pc, [pc, r3, lsl #2]
   12a80:	b	12bd8 <__assert_fail@plt+0x1908>
   12a84:	muleq	r1, ip, r6
   12a88:	andeq	r2, r1, r0, asr #22
   12a8c:	andeq	r2, r1, r4, ror #19
   12a90:	andeq	r2, r1, r4, ror #19
   12a94:	ldrdeq	r2, [r1], -r8
   12a98:	andeq	r2, r1, r4, ror #19
   12a9c:	andeq	r2, r1, ip, lsl #23
   12aa0:	andeq	r2, r1, r4, ror #19
   12aa4:	ldrdeq	r2, [r1], -r8
   12aa8:	andeq	r2, r1, r4, ror #19
   12aac:	andeq	r2, r1, r4, ror #19
   12ab0:	andeq	r2, r1, r4, ror #19
   12ab4:	andeq	r2, r1, r4, ror #19
   12ab8:	ldrb	r3, [r8, #8]
   12abc:	cmp	r3, #0
   12ac0:	beq	129ec <__assert_fail@plt+0x171c>
   12ac4:	ldr	r3, [r5, #48]	; 0x30
   12ac8:	cmp	r3, #0
   12acc:	ble	129ec <__assert_fail@plt+0x171c>
   12ad0:	ldrd	r0, [r5, #64]	; 0x40
   12ad4:	ldrd	r2, [r6, #16]
   12ad8:	cmp	r1, r3
   12adc:	cmpeq	r0, r2
   12ae0:	beq	129ec <__assert_fail@plt+0x171c>
   12ae4:	mov	r0, r5
   12ae8:	bl	11e88 <__assert_fail@plt+0xbb8>
   12aec:	mov	r2, #5
   12af0:	ldr	r1, [pc, #724]	; 12dcc <__assert_fail@plt+0x1afc>
   12af4:	mov	r0, #0
   12af8:	bl	11060 <dcgettext@plt>
   12afc:	mov	r4, r0
   12b00:	ldr	r1, [r5, #28]
   12b04:	mov	r0, #4
   12b08:	bl	183dc <__assert_fail@plt+0x710c>
   12b0c:	mov	r3, r0
   12b10:	mov	r2, r4
   12b14:	mov	r1, #0
   12b18:	mov	r0, r1
   12b1c:	bl	110f0 <error@plt>
   12b20:	b	12b84 <__assert_fail@plt+0x18b4>
   12b24:	mov	r3, r7
   12b28:	mov	r2, r8
   12b2c:	mov	r1, r5
   12b30:	mov	r0, r6
   12b34:	bl	11f64 <__assert_fail@plt+0xc94>
   12b38:	mov	sl, r0
   12b3c:	b	12a30 <__assert_fail@plt+0x1760>
   12b40:	mov	r2, #5
   12b44:	mov	r1, fp
   12b48:	mov	r0, #0
   12b4c:	bl	11060 <dcgettext@plt>
   12b50:	mov	r4, r0
   12b54:	ldr	r2, [r5, #28]
   12b58:	mov	r1, #3
   12b5c:	mov	r0, #0
   12b60:	bl	184a8 <__assert_fail@plt+0x71d8>
   12b64:	mov	r3, r0
   12b68:	mov	r2, r4
   12b6c:	mov	r1, #0
   12b70:	mov	r0, r1
   12b74:	bl	110f0 <error@plt>
   12b78:	mov	r1, r5
   12b7c:	mov	r0, r6
   12b80:	bl	12110 <__assert_fail@plt+0xe40>
   12b84:	mov	r4, #4
   12b88:	b	12a60 <__assert_fail@plt+0x1790>
   12b8c:	ldr	r4, [r5, #32]
   12b90:	mov	r2, #5
   12b94:	mov	r1, r9
   12b98:	mov	r0, #0
   12b9c:	bl	11060 <dcgettext@plt>
   12ba0:	mov	r7, r0
   12ba4:	ldr	r2, [r5, #28]
   12ba8:	mov	r1, #3
   12bac:	mov	r0, #0
   12bb0:	bl	184a8 <__assert_fail@plt+0x71d8>
   12bb4:	mov	r3, r0
   12bb8:	mov	r2, r7
   12bbc:	mov	r1, r4
   12bc0:	mov	r0, #0
   12bc4:	bl	110f0 <error@plt>
   12bc8:	mov	r1, r5
   12bcc:	mov	r0, r6
   12bd0:	bl	12110 <__assert_fail@plt+0xe40>
   12bd4:	b	12b84 <__assert_fail@plt+0x18b4>
   12bd8:	mov	r2, #5
   12bdc:	ldr	r1, [pc, #492]	; 12dd0 <__assert_fail@plt+0x1b00>
   12be0:	mov	r0, #0
   12be4:	bl	11060 <dcgettext@plt>
   12be8:	mov	r4, r0
   12bec:	ldrh	r6, [r5, #56]	; 0x38
   12bf0:	ldr	r2, [r5, #28]
   12bf4:	mov	r1, #3
   12bf8:	mov	r0, #0
   12bfc:	bl	184a8 <__assert_fail@plt+0x71d8>
   12c00:	ldr	r3, [pc, #460]	; 12dd4 <__assert_fail@plt+0x1b04>
   12c04:	str	r3, [sp, #4]
   12c08:	str	r0, [sp]
   12c0c:	mov	r3, r6
   12c10:	mov	r2, r4
   12c14:	mov	r1, #0
   12c18:	mov	r0, r1
   12c1c:	bl	110f0 <error@plt>
   12c20:	bl	11294 <abort@plt>
   12c24:	ldr	r3, [pc, #428]	; 12dd8 <__assert_fail@plt+0x1b08>
   12c28:	ldr	r2, [pc, #428]	; 12ddc <__assert_fail@plt+0x1b0c>
   12c2c:	ldr	r1, [pc, #428]	; 12de0 <__assert_fail@plt+0x1b10>
   12c30:	ldr	r0, [pc, #428]	; 12de4 <__assert_fail@plt+0x1b14>
   12c34:	bl	112d0 <__assert_fail@plt>
   12c38:	mov	r4, #2
   12c3c:	mov	r0, r4
   12c40:	add	sp, sp, #124	; 0x7c
   12c44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c48:	ldr	r4, [sl]
   12c4c:	mov	r0, r7
   12c50:	bl	112c4 <closedir@plt>
   12c54:	str	r4, [sl]
   12c58:	ldrb	r4, [r8, #10]
   12c5c:	cmp	r4, #0
   12c60:	movne	r4, #39	; 0x27
   12c64:	moveq	r4, #21
   12c68:	b	126b8 <__assert_fail@plt+0x13e8>
   12c6c:	ldr	r3, [sl]
   12c70:	str	r3, [sp, #12]
   12c74:	mov	r0, r7
   12c78:	bl	112c4 <closedir@plt>
   12c7c:	ldr	r3, [sp, #12]
   12c80:	str	r3, [sl]
   12c84:	cmp	r3, #0
   12c88:	bne	12c58 <__assert_fail@plt+0x1988>
   12c8c:	ldr	r3, [r5, #48]	; 0x30
   12c90:	cmp	r3, #0
   12c94:	bne	12cdc <__assert_fail@plt+0x1a0c>
   12c98:	ldr	r7, [r5, #24]
   12c9c:	mov	r0, r7
   12ca0:	bl	1317c <__assert_fail@plt+0x1eac>
   12ca4:	ldrb	r3, [r0]
   12ca8:	cmp	r3, #46	; 0x2e
   12cac:	beq	1279c <__assert_fail@plt+0x14cc>
   12cb0:	ldr	ip, [r8, #12]
   12cb4:	cmp	ip, #0
   12cb8:	beq	12cd0 <__assert_fail@plt+0x1a00>
   12cbc:	ldrd	r0, [r5, #160]	; 0xa0
   12cc0:	ldrd	r2, [ip]
   12cc4:	cmp	r1, r3
   12cc8:	cmpeq	r0, r2
   12ccc:	beq	12834 <__assert_fail@plt+0x1564>
   12cd0:	ldrb	r3, [r8, #16]
   12cd4:	cmp	r3, #0
   12cd8:	bne	12910 <__assert_fail@plt+0x1640>
   12cdc:	add	r3, sp, #16
   12ce0:	str	r3, [sp, #4]
   12ce4:	mov	r3, #2
   12ce8:	str	r3, [sp]
   12cec:	mov	r3, r8
   12cf0:	mov	r2, #1
   12cf4:	mov	r1, r5
   12cf8:	mov	r0, r6
   12cfc:	bl	1212c <__assert_fail@plt+0xe5c>
   12d00:	mov	sl, r0
   12d04:	cmp	r0, #2
   12d08:	beq	129a8 <__assert_fail@plt+0x16d8>
   12d0c:	mov	r0, r5
   12d10:	bl	11e88 <__assert_fail@plt+0xbb8>
   12d14:	mov	r1, r5
   12d18:	mov	r0, r6
   12d1c:	bl	12110 <__assert_fail@plt+0xe40>
   12d20:	b	12a30 <__assert_fail@plt+0x1760>
   12d24:	mov	r0, r7
   12d28:	bl	136fc <__assert_fail@plt+0x242c>
   12d2c:	ldrd	r0, [r6, #16]
   12d30:	ldrd	r2, [sp, #16]
   12d34:	cmp	r1, r3
   12d38:	cmpeq	r0, r2
   12d3c:	beq	12cdc <__assert_fail@plt+0x1a0c>
   12d40:	mov	r2, #5
   12d44:	ldr	r1, [pc, #128]	; 12dcc <__assert_fail@plt+0x1afc>
   12d48:	mov	r0, #0
   12d4c:	bl	11060 <dcgettext@plt>
   12d50:	mov	r4, r0
   12d54:	ldr	r1, [r5, #28]
   12d58:	mov	r0, #4
   12d5c:	bl	183dc <__assert_fail@plt+0x710c>
   12d60:	mov	r3, r0
   12d64:	mov	r2, r4
   12d68:	mov	r1, #0
   12d6c:	mov	r0, r1
   12d70:	bl	110f0 <error@plt>
   12d74:	mov	r2, #5
   12d78:	ldr	r1, [pc, #104]	; 12de8 <__assert_fail@plt+0x1b18>
   12d7c:	mov	r0, #0
   12d80:	bl	11060 <dcgettext@plt>
   12d84:	mov	r2, r0
   12d88:	mov	r1, #0
   12d8c:	mov	r0, r1
   12d90:	bl	110f0 <error@plt>
   12d94:	b	12998 <__assert_fail@plt+0x16c8>
   12d98:	andeq	fp, r1, r8, ror r0
   12d9c:			; <UNDEFINED> instruction: 0x0001afbc
   12da0:	andeq	fp, r1, r4, lsl #2
   12da4:	andeq	sl, r1, r8, asr lr
   12da8:			; <UNDEFINED> instruction: 0x0001adbc
   12dac:	andeq	sl, r1, r8, ror #28
   12db0:	muleq	r1, ip, lr
   12db4:	andeq	sl, r1, r0, lsr #29
   12db8:	andeq	sl, r1, ip, asr #23
   12dbc:	andeq	sl, r1, r4, lsr #29
   12dc0:	andeq	sl, r1, r0, lsl pc
   12dc4:	ldrdeq	sl, [r1], -r4
   12dc8:	andeq	sl, r1, r4, asr #30
   12dcc:	andeq	sl, r1, r4, ror #30
   12dd0:	muleq	r1, r0, r0
   12dd4:	andeq	fp, r1, r8, asr #1
   12dd8:	muleq	r1, r4, sp
   12ddc:	andeq	r0, r0, r2, ror #4
   12de0:	andeq	fp, r1, r0, ror #1
   12de4:	strdeq	fp, [r1], -r0
   12de8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   12dec:	push	{r4, lr}
   12df0:	mov	r0, #1
   12df4:	bl	11408 <__assert_fail@plt+0x138>
   12df8:	pop	{r4, pc}
   12dfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e00:	sub	sp, sp, #12
   12e04:	str	r0, [sp, #4]
   12e08:	mov	r6, r1
   12e0c:	mov	fp, r2
   12e10:	mov	r8, r3
   12e14:	bl	11168 <strlen@plt>
   12e18:	str	r0, [sp]
   12e1c:	ldr	r4, [r6]
   12e20:	cmp	r4, #0
   12e24:	beq	12ecc <__assert_fail@plt+0x1bfc>
   12e28:	mov	r5, fp
   12e2c:	mov	sl, #0
   12e30:	mvn	r9, #0
   12e34:	mov	r7, sl
   12e38:	b	12e58 <__assert_fail@plt+0x1b88>
   12e3c:	mov	r9, r7
   12e40:	b	12ec0 <__assert_fail@plt+0x1bf0>
   12e44:	add	r7, r7, #1
   12e48:	ldr	r4, [r6, #4]!
   12e4c:	add	r5, r5, r8
   12e50:	cmp	r4, #0
   12e54:	beq	12eb8 <__assert_fail@plt+0x1be8>
   12e58:	ldr	r2, [sp]
   12e5c:	ldr	r1, [sp, #4]
   12e60:	mov	r0, r4
   12e64:	bl	11288 <strncmp@plt>
   12e68:	cmp	r0, #0
   12e6c:	bne	12e44 <__assert_fail@plt+0x1b74>
   12e70:	mov	r0, r4
   12e74:	bl	11168 <strlen@plt>
   12e78:	ldr	r3, [sp]
   12e7c:	cmp	r3, r0
   12e80:	beq	12e3c <__assert_fail@plt+0x1b6c>
   12e84:	cmn	r9, #1
   12e88:	moveq	r9, r7
   12e8c:	beq	12e44 <__assert_fail@plt+0x1b74>
   12e90:	cmp	fp, #0
   12e94:	moveq	sl, #1
   12e98:	beq	12e44 <__assert_fail@plt+0x1b74>
   12e9c:	mov	r2, r8
   12ea0:	mov	r1, r5
   12ea4:	mla	r0, r8, r9, fp
   12ea8:	bl	11048 <memcmp@plt>
   12eac:	cmp	r0, #0
   12eb0:	movne	sl, #1
   12eb4:	b	12e44 <__assert_fail@plt+0x1b74>
   12eb8:	cmp	sl, #0
   12ebc:	mvnne	r9, #1
   12ec0:	mov	r0, r9
   12ec4:	add	sp, sp, #12
   12ec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ecc:	mvn	r9, #0
   12ed0:	b	12ec0 <__assert_fail@plt+0x1bf0>
   12ed4:	push	{r4, r5, r6, lr}
   12ed8:	mov	r6, r0
   12edc:	ldr	r0, [r1]
   12ee0:	cmp	r0, #0
   12ee4:	beq	12f20 <__assert_fail@plt+0x1c50>
   12ee8:	mov	r4, r1
   12eec:	mov	r5, #0
   12ef0:	mov	r1, r6
   12ef4:	bl	10fdc <strcmp@plt>
   12ef8:	cmp	r0, #0
   12efc:	beq	12f18 <__assert_fail@plt+0x1c48>
   12f00:	add	r5, r5, #1
   12f04:	ldr	r0, [r4, #4]!
   12f08:	cmp	r0, #0
   12f0c:	bne	12ef0 <__assert_fail@plt+0x1c20>
   12f10:	mvn	r0, #0
   12f14:	pop	{r4, r5, r6, pc}
   12f18:	mov	r0, r5
   12f1c:	pop	{r4, r5, r6, pc}
   12f20:	mvn	r0, #0
   12f24:	pop	{r4, r5, r6, pc}
   12f28:	push	{r4, r5, r6, lr}
   12f2c:	sub	sp, sp, #8
   12f30:	mov	r5, r0
   12f34:	mov	r4, r1
   12f38:	cmn	r2, #1
   12f3c:	mov	r2, #5
   12f40:	ldreq	r1, [pc, #76]	; 12f94 <__assert_fail@plt+0x1cc4>
   12f44:	ldrne	r1, [pc, #76]	; 12f98 <__assert_fail@plt+0x1cc8>
   12f48:	mov	r0, #0
   12f4c:	bl	11060 <dcgettext@plt>
   12f50:	mov	r6, r0
   12f54:	mov	r2, r4
   12f58:	mov	r1, #8
   12f5c:	mov	r0, #0
   12f60:	bl	18370 <__assert_fail@plt+0x70a0>
   12f64:	mov	r4, r0
   12f68:	mov	r1, r5
   12f6c:	mov	r0, #1
   12f70:	bl	18600 <__assert_fail@plt+0x7330>
   12f74:	str	r0, [sp]
   12f78:	mov	r3, r4
   12f7c:	mov	r2, r6
   12f80:	mov	r1, #0
   12f84:	mov	r0, r1
   12f88:	bl	110f0 <error@plt>
   12f8c:	add	sp, sp, #8
   12f90:	pop	{r4, r5, r6, pc}
   12f94:	andeq	fp, r1, r8, lsr #2
   12f98:	andeq	fp, r1, r4, asr #2
   12f9c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fa0:	mov	r7, r0
   12fa4:	mov	r4, r1
   12fa8:	mov	r8, r2
   12fac:	mov	r2, #5
   12fb0:	ldr	r1, [pc, #224]	; 13098 <__assert_fail@plt+0x1dc8>
   12fb4:	mov	r0, #0
   12fb8:	bl	11060 <dcgettext@plt>
   12fbc:	ldr	r3, [pc, #216]	; 1309c <__assert_fail@plt+0x1dcc>
   12fc0:	ldr	r1, [r3]
   12fc4:	bl	10fb8 <fputs_unlocked@plt>
   12fc8:	ldr	r5, [r7]
   12fcc:	cmp	r5, #0
   12fd0:	beq	13060 <__assert_fail@plt+0x1d90>
   12fd4:	mov	r9, #0
   12fd8:	mov	r6, r9
   12fdc:	ldr	sl, [pc, #184]	; 1309c <__assert_fail@plt+0x1dcc>
   12fe0:	b	1301c <__assert_fail@plt+0x1d4c>
   12fe4:	ldr	r9, [sl]
   12fe8:	mov	r0, r5
   12fec:	bl	18610 <__assert_fail@plt+0x7340>
   12ff0:	mov	r3, r0
   12ff4:	ldr	r2, [pc, #164]	; 130a0 <__assert_fail@plt+0x1dd0>
   12ff8:	mov	r1, #1
   12ffc:	mov	r0, r9
   13000:	bl	111bc <__fprintf_chk@plt>
   13004:	mov	r9, r4
   13008:	add	r6, r6, #1
   1300c:	ldr	r5, [r7, #4]!
   13010:	add	r4, r4, r8
   13014:	cmp	r5, #0
   13018:	beq	13060 <__assert_fail@plt+0x1d90>
   1301c:	cmp	r6, #0
   13020:	beq	12fe4 <__assert_fail@plt+0x1d14>
   13024:	mov	r2, r8
   13028:	mov	r1, r4
   1302c:	mov	r0, r9
   13030:	bl	11048 <memcmp@plt>
   13034:	cmp	r0, #0
   13038:	bne	12fe4 <__assert_fail@plt+0x1d14>
   1303c:	ldr	fp, [sl]
   13040:	mov	r0, r5
   13044:	bl	18610 <__assert_fail@plt+0x7340>
   13048:	mov	r3, r0
   1304c:	ldr	r2, [pc, #80]	; 130a4 <__assert_fail@plt+0x1dd4>
   13050:	mov	r1, #1
   13054:	mov	r0, fp
   13058:	bl	111bc <__fprintf_chk@plt>
   1305c:	b	13008 <__assert_fail@plt+0x1d38>
   13060:	ldr	r3, [pc, #52]	; 1309c <__assert_fail@plt+0x1dcc>
   13064:	ldr	r0, [r3]
   13068:	ldr	r3, [r0, #20]
   1306c:	ldr	r2, [r0, #24]
   13070:	cmp	r3, r2
   13074:	bcs	1308c <__assert_fail@plt+0x1dbc>
   13078:	add	r2, r3, #1
   1307c:	str	r2, [r0, #20]
   13080:	mov	r2, #10
   13084:	strb	r2, [r3]
   13088:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1308c:	mov	r1, #10
   13090:	bl	111f8 <__overflow@plt>
   13094:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13098:	andeq	fp, r1, r4, ror #2
   1309c:	andeq	ip, r2, r8, lsl #3
   130a0:	andeq	fp, r1, ip, ror r1
   130a4:	andeq	fp, r1, r4, lsl #3
   130a8:	push	{r4, r5, r6, r7, r8, lr}
   130ac:	mov	r7, r0
   130b0:	mov	r5, r1
   130b4:	mov	r4, r2
   130b8:	mov	r6, r3
   130bc:	ldrb	r3, [sp, #32]
   130c0:	cmp	r3, #0
   130c4:	beq	13114 <__assert_fail@plt+0x1e44>
   130c8:	ldr	r3, [sp, #24]
   130cc:	mov	r2, r6
   130d0:	mov	r1, r4
   130d4:	mov	r0, r5
   130d8:	bl	12dfc <__assert_fail@plt+0x1b2c>
   130dc:	cmp	r0, #0
   130e0:	popge	{r4, r5, r6, r7, r8, pc}
   130e4:	mov	r2, r0
   130e8:	mov	r1, r5
   130ec:	mov	r0, r7
   130f0:	bl	12f28 <__assert_fail@plt+0x1c58>
   130f4:	ldr	r2, [sp, #24]
   130f8:	mov	r1, r6
   130fc:	mov	r0, r4
   13100:	bl	12f9c <__assert_fail@plt+0x1ccc>
   13104:	ldr	r3, [sp, #28]
   13108:	blx	r3
   1310c:	mvn	r0, #0
   13110:	pop	{r4, r5, r6, r7, r8, pc}
   13114:	mov	r1, r2
   13118:	mov	r0, r5
   1311c:	bl	12ed4 <__assert_fail@plt+0x1c04>
   13120:	b	130dc <__assert_fail@plt+0x1e0c>
   13124:	push	{r4, r5, r6, r7, r8, lr}
   13128:	ldr	r6, [r1]
   1312c:	cmp	r6, #0
   13130:	beq	13174 <__assert_fail@plt+0x1ea4>
   13134:	mov	r7, r3
   13138:	mov	r8, r0
   1313c:	mov	r4, r2
   13140:	mov	r5, r1
   13144:	mov	r2, r7
   13148:	mov	r1, r4
   1314c:	mov	r0, r8
   13150:	bl	11048 <memcmp@plt>
   13154:	cmp	r0, #0
   13158:	beq	1316c <__assert_fail@plt+0x1e9c>
   1315c:	ldr	r6, [r5, #4]!
   13160:	add	r4, r4, r7
   13164:	cmp	r6, #0
   13168:	bne	13144 <__assert_fail@plt+0x1e74>
   1316c:	mov	r0, r6
   13170:	pop	{r4, r5, r6, r7, r8, pc}
   13174:	mov	r6, #0
   13178:	b	1316c <__assert_fail@plt+0x1e9c>
   1317c:	ldrb	r3, [r0]
   13180:	cmp	r3, #47	; 0x2f
   13184:	bne	13194 <__assert_fail@plt+0x1ec4>
   13188:	ldrb	r3, [r0, #1]!
   1318c:	cmp	r3, #47	; 0x2f
   13190:	beq	13188 <__assert_fail@plt+0x1eb8>
   13194:	ldrb	r2, [r0]
   13198:	cmp	r2, #0
   1319c:	bxeq	lr
   131a0:	push	{lr}		; (str lr, [sp, #-4]!)
   131a4:	mov	r1, r0
   131a8:	mov	r3, #0
   131ac:	mov	lr, #1
   131b0:	mov	ip, r3
   131b4:	b	131c4 <__assert_fail@plt+0x1ef4>
   131b8:	ldrb	r2, [r1, #1]!
   131bc:	cmp	r2, #0
   131c0:	beq	131e0 <__assert_fail@plt+0x1f10>
   131c4:	cmp	r2, #47	; 0x2f
   131c8:	moveq	r3, lr
   131cc:	beq	131b8 <__assert_fail@plt+0x1ee8>
   131d0:	cmp	r3, #0
   131d4:	movne	r0, r1
   131d8:	movne	r3, ip
   131dc:	b	131b8 <__assert_fail@plt+0x1ee8>
   131e0:	pop	{pc}		; (ldr pc, [sp], #4)
   131e4:	push	{r4, lr}
   131e8:	mov	r4, r0
   131ec:	bl	11168 <strlen@plt>
   131f0:	cmp	r0, #1
   131f4:	popls	{r4, pc}
   131f8:	sub	r3, r0, #1
   131fc:	add	r2, r4, r3
   13200:	ldrb	r1, [r4, r3]
   13204:	cmp	r1, #47	; 0x2f
   13208:	popne	{r4, pc}
   1320c:	cmp	r3, #1
   13210:	beq	13234 <__assert_fail@plt+0x1f64>
   13214:	sub	r0, r3, #1
   13218:	ldrb	r1, [r2, #-1]!
   1321c:	cmp	r1, #47	; 0x2f
   13220:	beq	1322c <__assert_fail@plt+0x1f5c>
   13224:	mov	r0, r3
   13228:	pop	{r4, pc}
   1322c:	mov	r3, r0
   13230:	b	1320c <__assert_fail@plt+0x1f3c>
   13234:	mov	r0, #1
   13238:	pop	{r4, pc}
   1323c:	ldr	r3, [pc, #4]	; 13248 <__assert_fail@plt+0x1f78>
   13240:	str	r0, [r3]
   13244:	bx	lr
   13248:			; <UNDEFINED> instruction: 0x0002c1b0
   1324c:	push	{r4, r5, r6, lr}
   13250:	sub	sp, sp, #8
   13254:	ldr	r3, [pc, #240]	; 1334c <__assert_fail@plt+0x207c>
   13258:	ldr	r4, [r3]
   1325c:	mov	r0, r4
   13260:	bl	136bc <__assert_fail@plt+0x23ec>
   13264:	cmp	r0, #0
   13268:	bne	1328c <__assert_fail@plt+0x1fbc>
   1326c:	ldr	r3, [pc, #216]	; 1334c <__assert_fail@plt+0x207c>
   13270:	ldr	r0, [r3]
   13274:	bl	19430 <__assert_fail@plt+0x8160>
   13278:	cmp	r0, #0
   1327c:	bne	132d4 <__assert_fail@plt+0x2004>
   13280:	bl	13384 <__assert_fail@plt+0x20b4>
   13284:	add	sp, sp, #8
   13288:	pop	{r4, r5, r6, pc}
   1328c:	mov	r3, #1
   13290:	str	r3, [sp]
   13294:	mov	r2, #0
   13298:	mov	r3, #0
   1329c:	mov	r0, r4
   132a0:	bl	13754 <__assert_fail@plt+0x2484>
   132a4:	cmp	r0, #0
   132a8:	bne	1326c <__assert_fail@plt+0x1f9c>
   132ac:	ldr	r4, [pc, #152]	; 1334c <__assert_fail@plt+0x207c>
   132b0:	ldr	r0, [r4]
   132b4:	bl	13478 <__assert_fail@plt+0x21a8>
   132b8:	mov	r5, r0
   132bc:	ldr	r0, [r4]
   132c0:	bl	19430 <__assert_fail@plt+0x8160>
   132c4:	cmp	r0, #0
   132c8:	bne	132d4 <__assert_fail@plt+0x2004>
   132cc:	cmp	r5, #0
   132d0:	beq	13280 <__assert_fail@plt+0x1fb0>
   132d4:	mov	r2, #5
   132d8:	ldr	r1, [pc, #112]	; 13350 <__assert_fail@plt+0x2080>
   132dc:	mov	r0, #0
   132e0:	bl	11060 <dcgettext@plt>
   132e4:	mov	r5, r0
   132e8:	ldr	r3, [pc, #100]	; 13354 <__assert_fail@plt+0x2084>
   132ec:	ldr	r4, [r3]
   132f0:	cmp	r4, #0
   132f4:	beq	13330 <__assert_fail@plt+0x2060>
   132f8:	bl	11180 <__errno_location@plt>
   132fc:	ldr	r6, [r0]
   13300:	mov	r0, r4
   13304:	bl	18488 <__assert_fail@plt+0x71b8>
   13308:	str	r5, [sp]
   1330c:	mov	r3, r0
   13310:	ldr	r2, [pc, #64]	; 13358 <__assert_fail@plt+0x2088>
   13314:	mov	r1, r6
   13318:	mov	r0, #0
   1331c:	bl	110f0 <error@plt>
   13320:	bl	13384 <__assert_fail@plt+0x20b4>
   13324:	ldr	r3, [pc, #48]	; 1335c <__assert_fail@plt+0x208c>
   13328:	ldr	r0, [r3]
   1332c:	bl	11024 <_exit@plt>
   13330:	bl	11180 <__errno_location@plt>
   13334:	mov	r3, r5
   13338:	ldr	r2, [pc, #32]	; 13360 <__assert_fail@plt+0x2090>
   1333c:	ldr	r1, [r0]
   13340:	mov	r0, #0
   13344:	bl	110f0 <error@plt>
   13348:	b	13320 <__assert_fail@plt+0x2050>
   1334c:	muleq	r2, r0, r1
   13350:	andeq	fp, r1, ip, lsl #3
   13354:			; <UNDEFINED> instruction: 0x0002c1b0
   13358:	andeq	fp, r1, r0, lsr #3
   1335c:	andeq	ip, r2, r4, lsr r1
   13360:	andeq	fp, r1, r4, lsr #3
   13364:	ldr	r3, [pc, #4]	; 13370 <__assert_fail@plt+0x20a0>
   13368:	str	r0, [r3]
   1336c:	bx	lr
   13370:			; <UNDEFINED> instruction: 0x0002c1b4
   13374:	ldr	r3, [pc, #4]	; 13380 <__assert_fail@plt+0x20b0>
   13378:	strb	r0, [r3, #4]
   1337c:	bx	lr
   13380:			; <UNDEFINED> instruction: 0x0002c1b4
   13384:	push	{r4, r5, r6, lr}
   13388:	sub	sp, sp, #8
   1338c:	ldr	r3, [pc, #200]	; 1345c <__assert_fail@plt+0x218c>
   13390:	ldr	r0, [r3]
   13394:	bl	19430 <__assert_fail@plt+0x8160>
   13398:	cmp	r0, #0
   1339c:	beq	133c0 <__assert_fail@plt+0x20f0>
   133a0:	ldr	r3, [pc, #184]	; 13460 <__assert_fail@plt+0x2190>
   133a4:	ldrb	r3, [r3, #4]
   133a8:	cmp	r3, #0
   133ac:	beq	133dc <__assert_fail@plt+0x210c>
   133b0:	bl	11180 <__errno_location@plt>
   133b4:	ldr	r3, [r0]
   133b8:	cmp	r3, #32
   133bc:	bne	133dc <__assert_fail@plt+0x210c>
   133c0:	ldr	r3, [pc, #156]	; 13464 <__assert_fail@plt+0x2194>
   133c4:	ldr	r0, [r3]
   133c8:	bl	19430 <__assert_fail@plt+0x8160>
   133cc:	cmp	r0, #0
   133d0:	bne	13450 <__assert_fail@plt+0x2180>
   133d4:	add	sp, sp, #8
   133d8:	pop	{r4, r5, r6, pc}
   133dc:	mov	r2, #5
   133e0:	ldr	r1, [pc, #128]	; 13468 <__assert_fail@plt+0x2198>
   133e4:	mov	r0, #0
   133e8:	bl	11060 <dcgettext@plt>
   133ec:	mov	r4, r0
   133f0:	ldr	r3, [pc, #104]	; 13460 <__assert_fail@plt+0x2190>
   133f4:	ldr	r5, [r3]
   133f8:	cmp	r5, #0
   133fc:	beq	13434 <__assert_fail@plt+0x2164>
   13400:	bl	11180 <__errno_location@plt>
   13404:	ldr	r6, [r0]
   13408:	mov	r0, r5
   1340c:	bl	18488 <__assert_fail@plt+0x71b8>
   13410:	str	r4, [sp]
   13414:	mov	r3, r0
   13418:	ldr	r2, [pc, #76]	; 1346c <__assert_fail@plt+0x219c>
   1341c:	mov	r1, r6
   13420:	mov	r0, #0
   13424:	bl	110f0 <error@plt>
   13428:	ldr	r3, [pc, #64]	; 13470 <__assert_fail@plt+0x21a0>
   1342c:	ldr	r0, [r3]
   13430:	bl	11024 <_exit@plt>
   13434:	bl	11180 <__errno_location@plt>
   13438:	mov	r3, r4
   1343c:	ldr	r2, [pc, #48]	; 13474 <__assert_fail@plt+0x21a4>
   13440:	ldr	r1, [r0]
   13444:	mov	r0, #0
   13448:	bl	110f0 <error@plt>
   1344c:	b	13428 <__assert_fail@plt+0x2158>
   13450:	ldr	r3, [pc, #24]	; 13470 <__assert_fail@plt+0x21a0>
   13454:	ldr	r0, [r3]
   13458:	bl	11024 <_exit@plt>
   1345c:	muleq	r2, r4, r1
   13460:			; <UNDEFINED> instruction: 0x0002c1b4
   13464:	andeq	ip, r2, r8, lsl #3
   13468:	andeq	fp, r1, r8, lsr #3
   1346c:	andeq	fp, r1, r0, lsr #3
   13470:	andeq	ip, r2, r4, lsr r1
   13474:	andeq	fp, r1, r4, lsr #3
   13478:	push	{r4, lr}
   1347c:	sub	sp, sp, #8
   13480:	subs	r4, r0, #0
   13484:	beq	13498 <__assert_fail@plt+0x21c8>
   13488:	mov	r0, r4
   1348c:	bl	11120 <__freading@plt>
   13490:	cmp	r0, #0
   13494:	bne	134a8 <__assert_fail@plt+0x21d8>
   13498:	mov	r0, r4
   1349c:	bl	10fe8 <fflush@plt>
   134a0:	add	sp, sp, #8
   134a4:	pop	{r4, pc}
   134a8:	ldr	r3, [r4]
   134ac:	tst	r3, #256	; 0x100
   134b0:	bne	134c0 <__assert_fail@plt+0x21f0>
   134b4:	mov	r0, r4
   134b8:	bl	10fe8 <fflush@plt>
   134bc:	b	134a0 <__assert_fail@plt+0x21d0>
   134c0:	mov	r3, #1
   134c4:	str	r3, [sp]
   134c8:	mov	r2, #0
   134cc:	mov	r3, #0
   134d0:	mov	r0, r4
   134d4:	bl	13754 <__assert_fail@plt+0x2484>
   134d8:	b	134b4 <__assert_fail@plt+0x21e4>
   134dc:	push	{r4, lr}
   134e0:	ldr	r3, [r0, #16]
   134e4:	and	r3, r3, #61440	; 0xf000
   134e8:	cmp	r3, #32768	; 0x8000
   134ec:	beq	13534 <__assert_fail@plt+0x2264>
   134f0:	cmp	r3, #16384	; 0x4000
   134f4:	beq	13554 <__assert_fail@plt+0x2284>
   134f8:	cmp	r3, #40960	; 0xa000
   134fc:	beq	13568 <__assert_fail@plt+0x2298>
   13500:	cmp	r3, #24576	; 0x6000
   13504:	beq	1357c <__assert_fail@plt+0x22ac>
   13508:	cmp	r3, #8192	; 0x2000
   1350c:	beq	13590 <__assert_fail@plt+0x22c0>
   13510:	cmp	r3, #4096	; 0x1000
   13514:	beq	135a4 <__assert_fail@plt+0x22d4>
   13518:	cmp	r3, #49152	; 0xc000
   1351c:	mov	r2, #5
   13520:	ldreq	r1, [pc, #144]	; 135b8 <__assert_fail@plt+0x22e8>
   13524:	ldrne	r1, [pc, #144]	; 135bc <__assert_fail@plt+0x22ec>
   13528:	mov	r0, #0
   1352c:	bl	11060 <dcgettext@plt>
   13530:	pop	{r4, pc}
   13534:	ldrd	r2, [r0, #48]	; 0x30
   13538:	orrs	r3, r2, r3
   1353c:	mov	r2, #5
   13540:	ldreq	r1, [pc, #120]	; 135c0 <__assert_fail@plt+0x22f0>
   13544:	ldrne	r1, [pc, #120]	; 135c4 <__assert_fail@plt+0x22f4>
   13548:	mov	r0, #0
   1354c:	bl	11060 <dcgettext@plt>
   13550:	pop	{r4, pc}
   13554:	mov	r2, #5
   13558:	ldr	r1, [pc, #104]	; 135c8 <__assert_fail@plt+0x22f8>
   1355c:	mov	r0, #0
   13560:	bl	11060 <dcgettext@plt>
   13564:	pop	{r4, pc}
   13568:	mov	r2, #5
   1356c:	ldr	r1, [pc, #88]	; 135cc <__assert_fail@plt+0x22fc>
   13570:	mov	r0, #0
   13574:	bl	11060 <dcgettext@plt>
   13578:	pop	{r4, pc}
   1357c:	mov	r2, #5
   13580:	ldr	r1, [pc, #72]	; 135d0 <__assert_fail@plt+0x2300>
   13584:	mov	r0, #0
   13588:	bl	11060 <dcgettext@plt>
   1358c:	pop	{r4, pc}
   13590:	mov	r2, #5
   13594:	ldr	r1, [pc, #56]	; 135d4 <__assert_fail@plt+0x2304>
   13598:	mov	r0, #0
   1359c:	bl	11060 <dcgettext@plt>
   135a0:	pop	{r4, pc}
   135a4:	mov	r2, #5
   135a8:	ldr	r1, [pc, #40]	; 135d8 <__assert_fail@plt+0x2308>
   135ac:	mov	r0, #0
   135b0:	bl	11060 <dcgettext@plt>
   135b4:	pop	{r4, pc}
   135b8:	andeq	fp, r1, r8, lsr #4
   135bc:	andeq	fp, r1, r0, lsr r2
   135c0:			; <UNDEFINED> instruction: 0x0001b1b4
   135c4:	andeq	fp, r1, r8, asr #3
   135c8:	ldrdeq	fp, [r1], -r8
   135cc:	andeq	fp, r1, r4, ror #3
   135d0:	strdeq	fp, [r1], -r4
   135d4:	andeq	fp, r1, r8, lsl #4
   135d8:	andeq	fp, r1, r0, lsr #4
   135dc:	push	{r4, lr}
   135e0:	bl	135f0 <__assert_fail@plt+0x2320>
   135e4:	cmp	r0, #0
   135e8:	popne	{r4, pc}
   135ec:	bl	19224 <__assert_fail@plt+0x7f54>
   135f0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135f4:	mov	fp, r0
   135f8:	mov	r6, r1
   135fc:	mov	r9, r2
   13600:	bl	1317c <__assert_fail@plt+0x1eac>
   13604:	mov	r4, r0
   13608:	bl	131e4 <__assert_fail@plt+0x1f14>
   1360c:	mov	r5, r0
   13610:	sub	r4, r4, fp
   13614:	add	r4, r4, r0
   13618:	mov	r0, r6
   1361c:	bl	11168 <strlen@plt>
   13620:	mov	r8, r0
   13624:	cmp	r5, #0
   13628:	beq	13654 <__assert_fail@plt+0x2384>
   1362c:	add	r3, fp, r4
   13630:	ldrb	r3, [r3, #-1]
   13634:	cmp	r3, #47	; 0x2f
   13638:	moveq	r5, #0
   1363c:	beq	13664 <__assert_fail@plt+0x2394>
   13640:	ldrb	r5, [r6]
   13644:	cmp	r5, #47	; 0x2f
   13648:	movne	r5, #47	; 0x2f
   1364c:	moveq	r5, #0
   13650:	b	13664 <__assert_fail@plt+0x2394>
   13654:	ldrb	r5, [r6]
   13658:	cmp	r5, #47	; 0x2f
   1365c:	moveq	r5, #46	; 0x2e
   13660:	movne	r5, #0
   13664:	adds	sl, r5, #0
   13668:	movne	sl, #1
   1366c:	add	r0, r8, #1
   13670:	add	r0, r0, r4
   13674:	add	r0, r0, sl
   13678:	bl	193b0 <__assert_fail@plt+0x80e0>
   1367c:	subs	r7, r0, #0
   13680:	beq	136b4 <__assert_fail@plt+0x23e4>
   13684:	mov	r2, r4
   13688:	mov	r1, fp
   1368c:	mov	r0, r7
   13690:	bl	11138 <mempcpy@plt>
   13694:	strb	r5, [r0], sl
   13698:	cmp	r9, #0
   1369c:	strne	r0, [r9]
   136a0:	mov	r2, r8
   136a4:	mov	r1, r6
   136a8:	bl	11138 <mempcpy@plt>
   136ac:	mov	r3, #0
   136b0:	strb	r3, [r0]
   136b4:	mov	r0, r7
   136b8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136bc:	ldr	r2, [r0, #20]
   136c0:	ldr	r3, [r0, #16]
   136c4:	cmp	r2, r3
   136c8:	bhi	136f4 <__assert_fail@plt+0x2424>
   136cc:	ldr	r2, [r0, #8]
   136d0:	ldr	r3, [r0, #4]
   136d4:	sub	r2, r2, r3
   136d8:	ldr	r3, [r0]
   136dc:	ands	r3, r3, #256	; 0x100
   136e0:	ldrne	r3, [r0, #44]	; 0x2c
   136e4:	ldrne	r0, [r0, #36]	; 0x24
   136e8:	subne	r3, r3, r0
   136ec:	add	r0, r3, r2
   136f0:	bx	lr
   136f4:	mov	r0, #0
   136f8:	bx	lr
   136fc:	push	{r4, r5, lr}
   13700:	sub	sp, sp, #12
   13704:	mov	r5, r0
   13708:	bl	11180 <__errno_location@plt>
   1370c:	mov	r4, r0
   13710:	ldr	r3, [r0]
   13714:	str	r3, [sp]
   13718:	str	r3, [sp, #4]
   1371c:	mov	r3, #0
   13720:	str	r3, [r0]
   13724:	mov	r0, r5
   13728:	bl	1100c <free@plt>
   1372c:	ldr	r3, [r4]
   13730:	cmp	r3, #0
   13734:	moveq	r3, #4
   13738:	movne	r3, #0
   1373c:	add	r2, sp, #8
   13740:	add	r3, r2, r3
   13744:	ldr	r3, [r3, #-8]
   13748:	str	r3, [r4]
   1374c:	add	sp, sp, #12
   13750:	pop	{r4, r5, pc}
   13754:	push	{r4, r5, r6, r7, lr}
   13758:	sub	sp, sp, #12
   1375c:	mov	r4, r0
   13760:	mov	r6, r2
   13764:	mov	r7, r3
   13768:	ldr	r5, [sp, #32]
   1376c:	ldr	r2, [r0, #8]
   13770:	ldr	r3, [r0, #4]
   13774:	cmp	r2, r3
   13778:	beq	13798 <__assert_fail@plt+0x24c8>
   1377c:	str	r5, [sp]
   13780:	mov	r2, r6
   13784:	mov	r3, r7
   13788:	mov	r0, r4
   1378c:	bl	111d4 <fseeko64@plt>
   13790:	add	sp, sp, #12
   13794:	pop	{r4, r5, r6, r7, pc}
   13798:	ldr	r2, [r0, #20]
   1379c:	ldr	r3, [r0, #16]
   137a0:	cmp	r2, r3
   137a4:	bne	1377c <__assert_fail@plt+0x24ac>
   137a8:	ldr	r3, [r0, #36]	; 0x24
   137ac:	cmp	r3, #0
   137b0:	bne	1377c <__assert_fail@plt+0x24ac>
   137b4:	bl	111b0 <fileno@plt>
   137b8:	str	r5, [sp]
   137bc:	mov	r2, r6
   137c0:	mov	r3, r7
   137c4:	bl	110c0 <lseek64@plt>
   137c8:	mvn	r2, #0
   137cc:	mvn	r3, #0
   137d0:	cmp	r1, r3
   137d4:	cmpeq	r0, r2
   137d8:	beq	137f4 <__assert_fail@plt+0x2524>
   137dc:	ldr	r3, [r4]
   137e0:	bic	r3, r3, #16
   137e4:	str	r3, [r4]
   137e8:	strd	r0, [r4, #80]	; 0x50
   137ec:	mov	r0, #0
   137f0:	b	13790 <__assert_fail@plt+0x24c0>
   137f4:	mvn	r0, #0
   137f8:	b	13790 <__assert_fail@plt+0x24c0>
   137fc:	push	{r4, r5}
   13800:	ldrd	r4, [r0, #8]
   13804:	ldrd	r2, [r1, #8]
   13808:	cmp	r5, r3
   1380c:	cmpeq	r4, r2
   13810:	movne	r0, #0
   13814:	beq	13820 <__assert_fail@plt+0x2550>
   13818:	pop	{r4, r5}
   1381c:	bx	lr
   13820:	ldrd	r4, [r0]
   13824:	ldrd	r2, [r1]
   13828:	cmp	r5, r3
   1382c:	cmpeq	r4, r2
   13830:	moveq	r0, #1
   13834:	movne	r0, #0
   13838:	b	13818 <__assert_fail@plt+0x2548>
   1383c:	push	{r4, lr}
   13840:	mov	r2, r1
   13844:	mov	r3, #0
   13848:	ldrd	r0, [r0, #8]
   1384c:	bl	19f0c <__assert_fail@plt+0x8c3c>
   13850:	mov	r0, r2
   13854:	pop	{r4, pc}
   13858:	push	{r4, lr}
   1385c:	mov	r2, r1
   13860:	mov	r3, #0
   13864:	ldrd	r0, [r0]
   13868:	bl	19f0c <__assert_fail@plt+0x8c3c>
   1386c:	mov	r0, r2
   13870:	pop	{r4, pc}
   13874:	push	{r4, r5}
   13878:	ldrd	r4, [r0]
   1387c:	ldrd	r2, [r1]
   13880:	cmp	r5, r3
   13884:	cmpeq	r4, r2
   13888:	moveq	r0, #1
   1388c:	movne	r0, #0
   13890:	pop	{r4, r5}
   13894:	bx	lr
   13898:	push	{r4, r5}
   1389c:	ldr	r3, [r0]
   138a0:	ldrd	r4, [r3, #160]	; 0xa0
   138a4:	ldr	r3, [r1]
   138a8:	ldrd	r2, [r3, #160]	; 0xa0
   138ac:	cmp	r5, r3
   138b0:	cmpeq	r4, r2
   138b4:	movhi	r0, #1
   138b8:	movls	r0, #0
   138bc:	movcc	r3, #1
   138c0:	movcs	r3, #0
   138c4:	sub	r0, r0, r3
   138c8:	pop	{r4, r5}
   138cc:	bx	lr
   138d0:	push	{r4, r5, r6, lr}
   138d4:	mov	r4, r0
   138d8:	ldr	r3, [r0, #36]	; 0x24
   138dc:	add	r1, r1, #256	; 0x100
   138e0:	adds	r1, r1, r3
   138e4:	bcs	13908 <__assert_fail@plt+0x2638>
   138e8:	str	r1, [r0, #36]	; 0x24
   138ec:	ldr	r0, [r0, #24]
   138f0:	bl	193e0 <__assert_fail@plt+0x8110>
   138f4:	cmp	r0, #0
   138f8:	beq	1392c <__assert_fail@plt+0x265c>
   138fc:	str	r0, [r4, #24]
   13900:	mov	r0, #1
   13904:	pop	{r4, r5, r6, pc}
   13908:	ldr	r0, [r0, #24]
   1390c:	bl	136fc <__assert_fail@plt+0x242c>
   13910:	mov	r5, #0
   13914:	str	r5, [r4, #24]
   13918:	bl	11180 <__errno_location@plt>
   1391c:	mov	r3, #36	; 0x24
   13920:	str	r3, [r0]
   13924:	mov	r0, r5
   13928:	pop	{r4, r5, r6, pc}
   1392c:	ldr	r0, [r4, #24]
   13930:	bl	136fc <__assert_fail@plt+0x242c>
   13934:	mov	r0, #0
   13938:	str	r0, [r4, #24]
   1393c:	pop	{r4, r5, r6, pc}
   13940:	push	{r4, r5, r6, lr}
   13944:	sub	sp, sp, #8
   13948:	mov	r4, r1
   1394c:	add	r5, r1, #64	; 0x40
   13950:	ldr	r3, [r1, #48]	; 0x30
   13954:	cmp	r3, #0
   13958:	bne	13968 <__assert_fail@plt+0x2698>
   1395c:	ldr	r3, [r0, #48]	; 0x30
   13960:	tst	r3, #1
   13964:	bne	13978 <__assert_fail@plt+0x26a8>
   13968:	ldr	r3, [r0, #48]	; 0x30
   1396c:	lsl	r3, r3, #30
   13970:	orrs	r3, r2, r3, lsr #31
   13974:	beq	139f0 <__assert_fail@plt+0x2720>
   13978:	mov	r2, r5
   1397c:	ldr	r1, [r4, #24]
   13980:	mov	r0, #3
   13984:	bl	11270 <__xstat64@plt>
   13988:	cmp	r0, #0
   1398c:	beq	13a24 <__assert_fail@plt+0x2754>
   13990:	bl	11180 <__errno_location@plt>
   13994:	mov	r6, r0
   13998:	ldr	r3, [r0]
   1399c:	cmp	r3, #2
   139a0:	beq	139c8 <__assert_fail@plt+0x26f8>
   139a4:	ldr	r3, [r6]
   139a8:	str	r3, [r4, #32]
   139ac:	mov	r2, #104	; 0x68
   139b0:	mov	r1, #0
   139b4:	mov	r0, r5
   139b8:	bl	11198 <memset@plt>
   139bc:	mov	r0, #10
   139c0:	add	sp, sp, #8
   139c4:	pop	{r4, r5, r6, pc}
   139c8:	mov	r2, r5
   139cc:	ldr	r1, [r4, #24]
   139d0:	mov	r0, #3
   139d4:	bl	112ac <__lxstat64@plt>
   139d8:	cmp	r0, #0
   139dc:	bne	139a4 <__assert_fail@plt+0x26d4>
   139e0:	mov	r3, #0
   139e4:	str	r3, [r6]
   139e8:	mov	r0, #13
   139ec:	b	139c0 <__assert_fail@plt+0x26f0>
   139f0:	ldr	r1, [r0, #32]
   139f4:	mov	r3, #256	; 0x100
   139f8:	str	r3, [sp]
   139fc:	mov	r3, r5
   13a00:	ldr	r2, [r4, #24]
   13a04:	mov	r0, #3
   13a08:	bl	11090 <__fxstatat64@plt>
   13a0c:	cmp	r0, #0
   13a10:	beq	13a24 <__assert_fail@plt+0x2754>
   13a14:	bl	11180 <__errno_location@plt>
   13a18:	ldr	r3, [r0]
   13a1c:	str	r3, [r4, #32]
   13a20:	b	139ac <__assert_fail@plt+0x26dc>
   13a24:	ldr	r0, [r4, #80]	; 0x50
   13a28:	and	r0, r0, #61440	; 0xf000
   13a2c:	cmp	r0, #16384	; 0x4000
   13a30:	beq	13a50 <__assert_fail@plt+0x2780>
   13a34:	cmp	r0, #40960	; 0xa000
   13a38:	moveq	r0, #12
   13a3c:	beq	139c0 <__assert_fail@plt+0x26f0>
   13a40:	cmp	r0, #32768	; 0x8000
   13a44:	moveq	r0, #8
   13a48:	movne	r0, #3
   13a4c:	b	139c0 <__assert_fail@plt+0x26f0>
   13a50:	ldrb	r3, [r4, #168]	; 0xa8
   13a54:	cmp	r3, #46	; 0x2e
   13a58:	movne	r0, #1
   13a5c:	bne	139c0 <__assert_fail@plt+0x26f0>
   13a60:	ldrb	r3, [r4, #169]	; 0xa9
   13a64:	cmp	r3, #0
   13a68:	beq	13a84 <__assert_fail@plt+0x27b4>
   13a6c:	ldr	r3, [r4, #168]	; 0xa8
   13a70:	bic	r3, r3, #-16777216	; 0xff000000
   13a74:	bic	r3, r3, #255	; 0xff
   13a78:	cmp	r3, #11776	; 0x2e00
   13a7c:	movne	r0, #1
   13a80:	bne	139c0 <__assert_fail@plt+0x26f0>
   13a84:	ldr	r0, [r4, #48]	; 0x30
   13a88:	cmp	r0, #0
   13a8c:	moveq	r0, #1
   13a90:	movne	r0, #5
   13a94:	b	139c0 <__assert_fail@plt+0x26f0>
   13a98:	push	{r4, r5, r6, r7, r8, lr}
   13a9c:	mov	r6, r0
   13aa0:	mov	r4, r1
   13aa4:	mov	r5, r2
   13aa8:	ldr	r7, [r0, #44]	; 0x2c
   13aac:	ldr	r3, [r0, #40]	; 0x28
   13ab0:	cmp	r3, r2
   13ab4:	bcs	13ae0 <__assert_fail@plt+0x2810>
   13ab8:	add	r1, r2, #40	; 0x28
   13abc:	str	r1, [r0, #40]	; 0x28
   13ac0:	cmn	r1, #-1073741823	; 0xc0000001
   13ac4:	bhi	13b50 <__assert_fail@plt+0x2880>
   13ac8:	lsl	r1, r1, #2
   13acc:	ldr	r0, [r0, #8]
   13ad0:	bl	193e0 <__assert_fail@plt+0x8110>
   13ad4:	cmp	r0, #0
   13ad8:	strne	r0, [r6, #8]
   13adc:	beq	13b50 <__assert_fail@plt+0x2880>
   13ae0:	ldr	r3, [r6, #8]
   13ae4:	cmp	r4, #0
   13ae8:	beq	13afc <__assert_fail@plt+0x282c>
   13aec:	str	r4, [r3], #4
   13af0:	ldr	r4, [r4, #8]
   13af4:	cmp	r4, #0
   13af8:	bne	13aec <__assert_fail@plt+0x281c>
   13afc:	mov	r3, r7
   13b00:	mov	r2, #4
   13b04:	mov	r1, r5
   13b08:	ldr	r0, [r6, #8]
   13b0c:	bl	11258 <qsort@plt>
   13b10:	ldr	lr, [r6, #8]
   13b14:	ldr	r0, [lr]
   13b18:	subs	r3, r5, #1
   13b1c:	beq	13b40 <__assert_fail@plt+0x2870>
   13b20:	mov	r2, lr
   13b24:	ldr	r1, [r2]
   13b28:	ldr	ip, [r2, #4]!
   13b2c:	str	ip, [r1, #8]
   13b30:	subs	r3, r3, #1
   13b34:	bne	13b24 <__assert_fail@plt+0x2854>
   13b38:	sub	r5, r5, #-1073741823	; 0xc0000001
   13b3c:	add	lr, lr, r5, lsl #2
   13b40:	ldr	r3, [lr]
   13b44:	mov	r2, #0
   13b48:	str	r2, [r3, #8]
   13b4c:	pop	{r4, r5, r6, r7, r8, pc}
   13b50:	ldr	r0, [r6, #8]
   13b54:	bl	136fc <__assert_fail@plt+0x242c>
   13b58:	mov	r3, #0
   13b5c:	str	r3, [r6, #8]
   13b60:	str	r3, [r6, #40]	; 0x28
   13b64:	mov	r0, r4
   13b68:	pop	{r4, r5, r6, r7, r8, pc}
   13b6c:	push	{r4, r5, r6, r7, r8, lr}
   13b70:	mov	r6, r0
   13b74:	mov	r7, r1
   13b78:	mov	r5, r2
   13b7c:	add	r0, r2, #176	; 0xb0
   13b80:	bic	r0, r0, #7
   13b84:	bl	193b0 <__assert_fail@plt+0x80e0>
   13b88:	subs	r4, r0, #0
   13b8c:	beq	13bd8 <__assert_fail@plt+0x2908>
   13b90:	mov	r2, r5
   13b94:	mov	r1, r7
   13b98:	add	r0, r4, #168	; 0xa8
   13b9c:	bl	11030 <memcpy@plt>
   13ba0:	add	r2, r4, r5
   13ba4:	mov	r3, #0
   13ba8:	strb	r3, [r2, #168]	; 0xa8
   13bac:	str	r5, [r4, #52]	; 0x34
   13bb0:	str	r6, [r4, #44]	; 0x2c
   13bb4:	ldr	r2, [r6, #24]
   13bb8:	str	r2, [r4, #28]
   13bbc:	str	r3, [r4, #32]
   13bc0:	str	r3, [r4, #12]
   13bc4:	strh	r3, [r4, #58]	; 0x3a
   13bc8:	mov	r2, #3
   13bcc:	strh	r2, [r4, #60]	; 0x3c
   13bd0:	str	r3, [r4, #16]
   13bd4:	str	r3, [r4, #20]
   13bd8:	mov	r0, r4
   13bdc:	pop	{r4, r5, r6, r7, r8, pc}
   13be0:	push	{r4, lr}
   13be4:	sub	sp, sp, #8
   13be8:	mov	r4, r0
   13bec:	ldr	r2, [r0, #48]	; 0x30
   13bf0:	ldr	r3, [pc, #92]	; 13c54 <__assert_fail@plt+0x2984>
   13bf4:	and	r3, r3, r2
   13bf8:	cmp	r3, #0
   13bfc:	beq	13c30 <__assert_fail@plt+0x2960>
   13c00:	ldr	r3, [pc, #80]	; 13c58 <__assert_fail@plt+0x2988>
   13c04:	str	r3, [sp]
   13c08:	ldr	r3, [pc, #76]	; 13c5c <__assert_fail@plt+0x298c>
   13c0c:	ldr	r2, [pc, #76]	; 13c60 <__assert_fail@plt+0x2990>
   13c10:	mov	r1, #0
   13c14:	mov	r0, #31
   13c18:	bl	162d0 <__assert_fail@plt+0x5000>
   13c1c:	str	r0, [r4, #56]	; 0x38
   13c20:	adds	r0, r0, #0
   13c24:	movne	r0, #1
   13c28:	add	sp, sp, #8
   13c2c:	pop	{r4, pc}
   13c30:	mov	r0, #32
   13c34:	bl	193b0 <__assert_fail@plt+0x80e0>
   13c38:	str	r0, [r4, #56]	; 0x38
   13c3c:	cmp	r0, #0
   13c40:	moveq	r0, #0
   13c44:	beq	13c28 <__assert_fail@plt+0x2958>
   13c48:	bl	194a8 <__assert_fail@plt+0x81d8>
   13c4c:	mov	r0, #1
   13c50:	b	13c28 <__assert_fail@plt+0x2958>
   13c54:	andeq	r0, r0, r2, lsl #2
   13c58:	strdeq	r3, [r1], -ip
   13c5c:	strdeq	r3, [r1], -ip
   13c60:	andeq	r3, r1, ip, lsr r8
   13c64:	push	{r4, lr}
   13c68:	mov	ip, r1
   13c6c:	ldr	r3, [r0, #48]	; 0x30
   13c70:	and	lr, r3, #16
   13c74:	ldr	r2, [pc, #48]	; 13cac <__assert_fail@plt+0x29dc>
   13c78:	ldr	r1, [pc, #48]	; 13cb0 <__assert_fail@plt+0x29e0>
   13c7c:	cmp	lr, #0
   13c80:	moveq	r1, r2
   13c84:	tst	r3, #512	; 0x200
   13c88:	bne	13c98 <__assert_fail@plt+0x29c8>
   13c8c:	mov	r0, ip
   13c90:	bl	19890 <__assert_fail@plt+0x85c0>
   13c94:	pop	{r4, pc}
   13c98:	mov	r2, r1
   13c9c:	mov	r1, ip
   13ca0:	ldr	r0, [r0, #32]
   13ca4:	bl	16a28 <__assert_fail@plt+0x5758>
   13ca8:	pop	{r4, pc}
   13cac:	andeq	r4, r8, r0, lsl #18
   13cb0:	andeq	ip, r8, r0, lsl #18
   13cb4:	push	{r4, r5, r6, lr}
   13cb8:	subs	r4, r0, #0
   13cbc:	bne	13cd8 <__assert_fail@plt+0x2a08>
   13cc0:	pop	{r4, r5, r6, pc}
   13cc4:	mov	r0, r4
   13cc8:	bl	136fc <__assert_fail@plt+0x242c>
   13ccc:	mov	r4, r5
   13cd0:	cmp	r5, #0
   13cd4:	beq	13cf0 <__assert_fail@plt+0x2a20>
   13cd8:	ldr	r5, [r4, #8]
   13cdc:	ldr	r0, [r4, #12]
   13ce0:	cmp	r0, #0
   13ce4:	beq	13cc4 <__assert_fail@plt+0x29f4>
   13ce8:	bl	112c4 <closedir@plt>
   13cec:	b	13cc4 <__assert_fail@plt+0x29f4>
   13cf0:	pop	{r4, r5, r6, pc}
   13cf4:	push	{r4, lr}
   13cf8:	ldr	r2, [r0, #48]	; 0x30
   13cfc:	ldr	r3, [pc, #40]	; 13d2c <__assert_fail@plt+0x2a5c>
   13d00:	and	r3, r3, r2
   13d04:	cmp	r3, #0
   13d08:	beq	13d20 <__assert_fail@plt+0x2a50>
   13d0c:	ldr	r0, [r0, #56]	; 0x38
   13d10:	cmp	r0, #0
   13d14:	popeq	{r4, pc}
   13d18:	bl	16460 <__assert_fail@plt+0x5190>
   13d1c:	pop	{r4, pc}
   13d20:	ldr	r0, [r0, #56]	; 0x38
   13d24:	bl	136fc <__assert_fail@plt+0x242c>
   13d28:	pop	{r4, pc}
   13d2c:	andeq	r0, r0, r2, lsl #2
   13d30:	push	{r4, lr}
   13d34:	mov	r4, r0
   13d38:	mov	r0, r4
   13d3c:	bl	16994 <__assert_fail@plt+0x56c4>
   13d40:	cmp	r0, #0
   13d44:	bne	13d60 <__assert_fail@plt+0x2a90>
   13d48:	mov	r0, r4
   13d4c:	bl	169e0 <__assert_fail@plt+0x5710>
   13d50:	cmp	r0, #0
   13d54:	blt	13d38 <__assert_fail@plt+0x2a68>
   13d58:	bl	112a0 <close@plt>
   13d5c:	b	13d38 <__assert_fail@plt+0x2a68>
   13d60:	pop	{r4, pc}
   13d64:	push	{r4, r5, r6, r7, lr}
   13d68:	sub	sp, sp, #116	; 0x74
   13d6c:	ldr	r4, [r0, #44]	; 0x2c
   13d70:	ldr	r3, [r4, #48]	; 0x30
   13d74:	tst	r3, #512	; 0x200
   13d78:	beq	13e58 <__assert_fail@plt+0x2b88>
   13d7c:	mov	r7, r1
   13d80:	mov	r5, r0
   13d84:	ldr	r6, [r4, #52]	; 0x34
   13d88:	cmp	r6, #0
   13d8c:	beq	13db4 <__assert_fail@plt+0x2ae4>
   13d90:	ldrd	r2, [r5, #64]	; 0x40
   13d94:	add	r1, sp, #112	; 0x70
   13d98:	strd	r2, [r1, #-104]!	; 0xffffff98
   13d9c:	mov	r0, r6
   13da0:	bl	16018 <__assert_fail@plt+0x4d48>
   13da4:	cmp	r0, #0
   13da8:	beq	13de0 <__assert_fail@plt+0x2b10>
   13dac:	ldr	r0, [r0, #8]
   13db0:	b	13e5c <__assert_fail@plt+0x2b8c>
   13db4:	ldr	r3, [pc, #184]	; 13e74 <__assert_fail@plt+0x2ba4>
   13db8:	str	r3, [sp]
   13dbc:	ldr	r3, [pc, #180]	; 13e78 <__assert_fail@plt+0x2ba8>
   13dc0:	ldr	r2, [pc, #180]	; 13e7c <__assert_fail@plt+0x2bac>
   13dc4:	mov	r1, #0
   13dc8:	mov	r0, #13
   13dcc:	bl	162d0 <__assert_fail@plt+0x5000>
   13dd0:	mov	r6, r0
   13dd4:	str	r0, [r4, #52]	; 0x34
   13dd8:	cmp	r0, #0
   13ddc:	bne	13d90 <__assert_fail@plt+0x2ac0>
   13de0:	cmp	r7, #0
   13de4:	blt	13e64 <__assert_fail@plt+0x2b94>
   13de8:	add	r1, sp, #24
   13dec:	mov	r0, r7
   13df0:	bl	10fa0 <fstatfs64@plt>
   13df4:	cmp	r0, #0
   13df8:	bne	13e6c <__assert_fail@plt+0x2b9c>
   13dfc:	cmp	r6, #0
   13e00:	beq	13e40 <__assert_fail@plt+0x2b70>
   13e04:	mov	r0, #16
   13e08:	bl	193b0 <__assert_fail@plt+0x80e0>
   13e0c:	subs	r4, r0, #0
   13e10:	beq	13e40 <__assert_fail@plt+0x2b70>
   13e14:	ldrd	r2, [r5, #64]	; 0x40
   13e18:	strd	r2, [r4]
   13e1c:	ldr	r3, [sp, #24]
   13e20:	str	r3, [r4, #8]
   13e24:	mov	r1, r4
   13e28:	mov	r0, r6
   13e2c:	bl	1681c <__assert_fail@plt+0x554c>
   13e30:	cmp	r0, #0
   13e34:	beq	13e4c <__assert_fail@plt+0x2b7c>
   13e38:	cmp	r4, r0
   13e3c:	bne	13e48 <__assert_fail@plt+0x2b78>
   13e40:	ldr	r0, [sp, #24]
   13e44:	b	13e5c <__assert_fail@plt+0x2b8c>
   13e48:	bl	11294 <abort@plt>
   13e4c:	mov	r0, r4
   13e50:	bl	136fc <__assert_fail@plt+0x242c>
   13e54:	b	13e40 <__assert_fail@plt+0x2b70>
   13e58:	mov	r0, #0
   13e5c:	add	sp, sp, #116	; 0x74
   13e60:	pop	{r4, r5, r6, r7, pc}
   13e64:	mov	r0, #0
   13e68:	b	13e5c <__assert_fail@plt+0x2b8c>
   13e6c:	mov	r0, #0
   13e70:	b	13e5c <__assert_fail@plt+0x2b8c>
   13e74:	strdeq	r3, [r1], -ip
   13e78:	andeq	r3, r1, r4, ror r8
   13e7c:	andeq	r3, r1, r8, asr r8
   13e80:	push	{r4, r5, r6, lr}
   13e84:	mov	r5, r0
   13e88:	mov	r4, r1
   13e8c:	ldr	r2, [r0, #48]	; 0x30
   13e90:	ldr	r3, [pc, #176]	; 13f48 <__assert_fail@plt+0x2c78>
   13e94:	and	r3, r3, r2
   13e98:	cmp	r3, #0
   13e9c:	beq	13f04 <__assert_fail@plt+0x2c34>
   13ea0:	mov	r0, #24
   13ea4:	bl	193b0 <__assert_fail@plt+0x80e0>
   13ea8:	subs	r6, r0, #0
   13eac:	beq	13f28 <__assert_fail@plt+0x2c58>
   13eb0:	ldrd	r2, [r4, #64]	; 0x40
   13eb4:	strd	r2, [r6]
   13eb8:	ldrd	r2, [r4, #160]	; 0xa0
   13ebc:	strd	r2, [r6, #8]
   13ec0:	str	r4, [r6, #16]
   13ec4:	mov	r1, r6
   13ec8:	ldr	r0, [r5, #56]	; 0x38
   13ecc:	bl	1681c <__assert_fail@plt+0x554c>
   13ed0:	mov	r5, r0
   13ed4:	cmp	r6, r0
   13ed8:	beq	13f30 <__assert_fail@plt+0x2c60>
   13edc:	mov	r0, r6
   13ee0:	bl	136fc <__assert_fail@plt+0x242c>
   13ee4:	cmp	r5, #0
   13ee8:	beq	13f38 <__assert_fail@plt+0x2c68>
   13eec:	ldr	r3, [r5, #16]
   13ef0:	str	r3, [r4]
   13ef4:	mov	r3, #2
   13ef8:	strh	r3, [r4, #56]	; 0x38
   13efc:	mov	r0, #1
   13f00:	pop	{r4, r5, r6, pc}
   13f04:	add	r1, r1, #64	; 0x40
   13f08:	ldr	r0, [r0, #56]	; 0x38
   13f0c:	bl	194c4 <__assert_fail@plt+0x81f4>
   13f10:	cmp	r0, #0
   13f14:	beq	13f40 <__assert_fail@plt+0x2c70>
   13f18:	str	r4, [r4]
   13f1c:	mov	r3, #2
   13f20:	strh	r3, [r4, #56]	; 0x38
   13f24:	pop	{r4, r5, r6, pc}
   13f28:	mov	r0, #0
   13f2c:	pop	{r4, r5, r6, pc}
   13f30:	mov	r0, #1
   13f34:	pop	{r4, r5, r6, pc}
   13f38:	mov	r0, #0
   13f3c:	pop	{r4, r5, r6, pc}
   13f40:	mov	r0, #1
   13f44:	pop	{r4, r5, r6, pc}
   13f48:	andeq	r0, r0, r2, lsl #2
   13f4c:	push	{r4, r5, r6, lr}
   13f50:	mov	r5, r1
   13f54:	ldr	r1, [r0, #32]
   13f58:	cmp	r1, r5
   13f5c:	movne	r3, #0
   13f60:	moveq	r3, #1
   13f64:	cmn	r1, #100	; 0x64
   13f68:	moveq	r3, #0
   13f6c:	cmp	r3, #0
   13f70:	bne	13fb0 <__assert_fail@plt+0x2ce0>
   13f74:	mov	r4, r0
   13f78:	cmp	r2, #0
   13f7c:	bne	13fb4 <__assert_fail@plt+0x2ce4>
   13f80:	ldr	r3, [r0, #48]	; 0x30
   13f84:	lsr	r3, r3, #2
   13f88:	eor	r3, r3, #1
   13f8c:	cmp	r1, #0
   13f90:	movlt	r3, #0
   13f94:	andge	r3, r3, #1
   13f98:	cmp	r3, #0
   13f9c:	beq	13fa8 <__assert_fail@plt+0x2cd8>
   13fa0:	mov	r0, r1
   13fa4:	bl	112a0 <close@plt>
   13fa8:	str	r5, [r4, #32]
   13fac:	pop	{r4, r5, r6, pc}
   13fb0:	bl	11294 <abort@plt>
   13fb4:	add	r0, r0, #60	; 0x3c
   13fb8:	bl	1699c <__assert_fail@plt+0x56cc>
   13fbc:	cmp	r0, #0
   13fc0:	blt	13fa8 <__assert_fail@plt+0x2cd8>
   13fc4:	bl	112a0 <close@plt>
   13fc8:	b	13fa8 <__assert_fail@plt+0x2cd8>
   13fcc:	push	{r4, r5, r6, lr}
   13fd0:	mov	r4, r0
   13fd4:	ldr	r3, [r0, #48]	; 0x30
   13fd8:	ands	r5, r3, #4
   13fdc:	movne	r5, #0
   13fe0:	bne	13ffc <__assert_fail@plt+0x2d2c>
   13fe4:	tst	r3, #512	; 0x200
   13fe8:	bne	1400c <__assert_fail@plt+0x2d3c>
   13fec:	ldr	r0, [r0, #28]
   13ff0:	bl	1124c <fchdir@plt>
   13ff4:	adds	r5, r0, #0
   13ff8:	movne	r5, #1
   13ffc:	add	r0, r4, #60	; 0x3c
   14000:	bl	13d30 <__assert_fail@plt+0x2a60>
   14004:	mov	r0, r5
   14008:	pop	{r4, r5, r6, pc}
   1400c:	mov	r2, #1
   14010:	mvn	r1, #99	; 0x63
   14014:	bl	13f4c <__assert_fail@plt+0x2c7c>
   14018:	b	13ffc <__assert_fail@plt+0x2d2c>
   1401c:	push	{r4, r5, r6, r7, r8, r9, lr}
   14020:	sub	sp, sp, #108	; 0x6c
   14024:	mov	r4, r0
   14028:	mov	r6, r1
   1402c:	mov	r5, r2
   14030:	subs	r9, r3, #0
   14034:	beq	141d0 <__assert_fail@plt+0x2f00>
   14038:	ldr	r1, [pc, #448]	; 14200 <__assert_fail@plt+0x2f30>
   1403c:	mov	r0, r9
   14040:	bl	10fdc <strcmp@plt>
   14044:	cmp	r0, #0
   14048:	bne	141d0 <__assert_fail@plt+0x2f00>
   1404c:	ldr	r3, [r4, #48]	; 0x30
   14050:	tst	r3, #4
   14054:	bne	141dc <__assert_fail@plt+0x2f0c>
   14058:	cmp	r5, #0
   1405c:	bge	1416c <__assert_fail@plt+0x2e9c>
   14060:	tst	r3, #512	; 0x200
   14064:	beq	1407c <__assert_fail@plt+0x2dac>
   14068:	add	r7, r4, #60	; 0x3c
   1406c:	mov	r0, r7
   14070:	bl	16994 <__assert_fail@plt+0x56c4>
   14074:	cmp	r0, #0
   14078:	beq	1409c <__assert_fail@plt+0x2dcc>
   1407c:	mov	r7, #1
   14080:	mov	r1, r9
   14084:	mov	r0, r4
   14088:	bl	13c64 <__assert_fail@plt+0x2994>
   1408c:	subs	r8, r0, #0
   14090:	bge	140ec <__assert_fail@plt+0x2e1c>
   14094:	mvn	r4, #0
   14098:	b	14158 <__assert_fail@plt+0x2e88>
   1409c:	mov	r0, r7
   140a0:	bl	169e0 <__assert_fail@plt+0x5710>
   140a4:	subs	r8, r0, #0
   140a8:	blt	1407c <__assert_fail@plt+0x2dac>
   140ac:	ldr	r3, [r4, #48]	; 0x30
   140b0:	tst	r3, #2
   140b4:	bne	14178 <__assert_fail@plt+0x2ea8>
   140b8:	mov	r5, r8
   140bc:	mov	r7, #1
   140c0:	ldr	r3, [r4, #48]	; 0x30
   140c4:	tst	r3, #512	; 0x200
   140c8:	bne	1419c <__assert_fail@plt+0x2ecc>
   140cc:	mov	r0, r8
   140d0:	bl	1124c <fchdir@plt>
   140d4:	mov	r4, r0
   140d8:	b	14150 <__assert_fail@plt+0x2e80>
   140dc:	cmp	r5, #0
   140e0:	movge	r8, r5
   140e4:	movge	r7, #0
   140e8:	blt	14164 <__assert_fail@plt+0x2e94>
   140ec:	ldr	r3, [r4, #48]	; 0x30
   140f0:	tst	r3, #2
   140f4:	bne	14114 <__assert_fail@plt+0x2e44>
   140f8:	cmp	r9, #0
   140fc:	beq	140c0 <__assert_fail@plt+0x2df0>
   14100:	ldr	r1, [pc, #248]	; 14200 <__assert_fail@plt+0x2f30>
   14104:	mov	r0, r9
   14108:	bl	10fdc <strcmp@plt>
   1410c:	cmp	r0, #0
   14110:	bne	140c0 <__assert_fail@plt+0x2df0>
   14114:	mov	r2, sp
   14118:	mov	r1, r8
   1411c:	mov	r0, #3
   14120:	bl	110a8 <__fxstat64@plt>
   14124:	cmp	r0, #0
   14128:	bne	1414c <__assert_fail@plt+0x2e7c>
   1412c:	ldrd	r0, [r6, #64]	; 0x40
   14130:	ldrd	r2, [sp]
   14134:	cmp	r1, r3
   14138:	cmpeq	r0, r2
   1413c:	beq	14184 <__assert_fail@plt+0x2eb4>
   14140:	bl	11180 <__errno_location@plt>
   14144:	mov	r3, #2
   14148:	str	r3, [r0]
   1414c:	mvn	r4, #0
   14150:	cmp	r5, #0
   14154:	blt	141b4 <__assert_fail@plt+0x2ee4>
   14158:	mov	r0, r4
   1415c:	add	sp, sp, #108	; 0x6c
   14160:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14164:	mov	r7, #0
   14168:	b	14080 <__assert_fail@plt+0x2db0>
   1416c:	mov	r8, r5
   14170:	mov	r7, #1
   14174:	b	140ec <__assert_fail@plt+0x2e1c>
   14178:	mov	r5, r8
   1417c:	mov	r7, #1
   14180:	b	14114 <__assert_fail@plt+0x2e44>
   14184:	ldrd	r0, [r6, #160]	; 0xa0
   14188:	ldrd	r2, [sp, #96]	; 0x60
   1418c:	cmp	r1, r3
   14190:	cmpeq	r0, r2
   14194:	bne	14140 <__assert_fail@plt+0x2e70>
   14198:	b	140c0 <__assert_fail@plt+0x2df0>
   1419c:	eor	r2, r7, #1
   141a0:	mov	r1, r8
   141a4:	mov	r0, r4
   141a8:	bl	13f4c <__assert_fail@plt+0x2c7c>
   141ac:	mov	r4, #0
   141b0:	b	14158 <__assert_fail@plt+0x2e88>
   141b4:	bl	11180 <__errno_location@plt>
   141b8:	mov	r5, r0
   141bc:	ldr	r6, [r0]
   141c0:	mov	r0, r8
   141c4:	bl	112a0 <close@plt>
   141c8:	str	r6, [r5]
   141cc:	b	14158 <__assert_fail@plt+0x2e88>
   141d0:	ldr	r3, [r4, #48]	; 0x30
   141d4:	tst	r3, #4
   141d8:	beq	140dc <__assert_fail@plt+0x2e0c>
   141dc:	mvn	r2, r5
   141e0:	lsr	r2, r2, #31
   141e4:	ands	r3, r2, r3, lsr #9
   141e8:	moveq	r4, #0
   141ec:	beq	14158 <__assert_fail@plt+0x2e88>
   141f0:	mov	r0, r5
   141f4:	bl	112a0 <close@plt>
   141f8:	mov	r4, #0
   141fc:	b	14158 <__assert_fail@plt+0x2e88>
   14200:	andeq	sl, r1, r0, lsr #29
   14204:	push	{r4, r5, lr}
   14208:	sub	sp, sp, #28
   1420c:	ldr	r2, [r0, #48]	; 0x30
   14210:	ldr	r3, [pc, #172]	; 142c4 <__assert_fail@plt+0x2ff4>
   14214:	and	r3, r3, r2
   14218:	cmp	r3, #0
   1421c:	bne	14264 <__assert_fail@plt+0x2f94>
   14220:	ldr	ip, [r1, #4]
   14224:	cmp	ip, #0
   14228:	beq	1425c <__assert_fail@plt+0x2f8c>
   1422c:	ldr	r3, [ip, #48]	; 0x30
   14230:	cmp	r3, #0
   14234:	blt	1425c <__assert_fail@plt+0x2f8c>
   14238:	ldr	lr, [r0, #56]	; 0x38
   1423c:	ldrd	r2, [lr, #16]
   14240:	orrs	r3, r2, r3
   14244:	beq	14294 <__assert_fail@plt+0x2fc4>
   14248:	ldrd	r4, [lr]
   1424c:	ldrd	r2, [r1, #160]	; 0xa0
   14250:	cmp	r5, r3
   14254:	cmpeq	r4, r2
   14258:	beq	14298 <__assert_fail@plt+0x2fc8>
   1425c:	add	sp, sp, #28
   14260:	pop	{r4, r5, pc}
   14264:	ldrd	r2, [r1, #64]	; 0x40
   14268:	strd	r2, [sp]
   1426c:	ldrd	r2, [r1, #160]	; 0xa0
   14270:	strd	r2, [sp, #8]
   14274:	mov	r1, sp
   14278:	ldr	r0, [r0, #56]	; 0x38
   1427c:	bl	16854 <__assert_fail@plt+0x5584>
   14280:	cmp	r0, #0
   14284:	beq	14290 <__assert_fail@plt+0x2fc0>
   14288:	bl	136fc <__assert_fail@plt+0x242c>
   1428c:	b	1425c <__assert_fail@plt+0x2f8c>
   14290:	bl	11294 <abort@plt>
   14294:	bl	11294 <abort@plt>
   14298:	ldrd	r2, [lr, #8]
   1429c:	ldrd	r4, [r1, #64]	; 0x40
   142a0:	cmp	r3, r5
   142a4:	cmpeq	r2, r4
   142a8:	bne	1425c <__assert_fail@plt+0x2f8c>
   142ac:	ldrd	r2, [ip, #64]	; 0x40
   142b0:	strd	r2, [lr, #8]
   142b4:	ldr	r3, [r0, #56]	; 0x38
   142b8:	ldrd	r0, [ip, #160]	; 0xa0
   142bc:	strd	r0, [r3]
   142c0:	b	1425c <__assert_fail@plt+0x2f8c>
   142c4:	andeq	r0, r0, r2, lsl #2
   142c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142cc:	sub	sp, sp, #68	; 0x44
   142d0:	mov	r5, r0
   142d4:	str	r1, [sp, #40]	; 0x28
   142d8:	ldr	r9, [r0]
   142dc:	ldr	r3, [r9, #12]
   142e0:	str	r3, [sp, #44]	; 0x2c
   142e4:	cmp	r3, #0
   142e8:	beq	143e8 <__assert_fail@plt+0x3118>
   142ec:	mov	r0, r3
   142f0:	bl	11240 <dirfd@plt>
   142f4:	str	r0, [sp, #60]	; 0x3c
   142f8:	cmp	r0, #0
   142fc:	blt	143a4 <__assert_fail@plt+0x30d4>
   14300:	ldr	r3, [r5, #44]	; 0x2c
   14304:	cmp	r3, #0
   14308:	ldr	r3, [pc, #2472]	; 14cb8 <__assert_fail@plt+0x39e8>
   1430c:	mvnne	r3, #0
   14310:	str	r3, [sp, #24]
   14314:	mov	r3, #1
   14318:	str	r3, [sp, #52]	; 0x34
   1431c:	ldr	r3, [r9, #40]	; 0x28
   14320:	mov	r1, r3
   14324:	sub	r3, r3, #1
   14328:	ldr	r2, [r9, #28]
   1432c:	ldrb	r2, [r2, r3]
   14330:	cmp	r2, #47	; 0x2f
   14334:	moveq	r1, r3
   14338:	str	r1, [sp, #32]
   1433c:	ldr	r3, [r5, #48]	; 0x30
   14340:	tst	r3, #4
   14344:	ldrne	r3, [r5, #24]
   14348:	addne	r2, r3, r1
   1434c:	addne	r2, r2, #1
   14350:	strne	r2, [sp, #28]
   14354:	movne	r2, #47	; 0x2f
   14358:	strbne	r2, [r3, r1]
   1435c:	moveq	r3, #0
   14360:	streq	r3, [sp, #28]
   14364:	ldr	r3, [sp, #32]
   14368:	add	r3, r3, #1
   1436c:	str	r3, [sp, #12]
   14370:	ldr	fp, [r5, #36]	; 0x24
   14374:	sub	fp, fp, r3
   14378:	ldr	r3, [r9, #48]	; 0x30
   1437c:	add	r3, r3, #1
   14380:	str	r3, [sp, #20]
   14384:	mov	r3, #0
   14388:	str	r3, [sp, #48]	; 0x30
   1438c:	str	r3, [sp, #36]	; 0x24
   14390:	str	r3, [sp, #4]
   14394:	mov	r8, r3
   14398:	str	r3, [sp, #8]
   1439c:	mov	sl, r3
   143a0:	b	14918 <__assert_fail@plt+0x3648>
   143a4:	ldr	r0, [r9, #12]
   143a8:	bl	112c4 <closedir@plt>
   143ac:	mov	r3, #0
   143b0:	str	r3, [r9, #12]
   143b4:	ldr	r3, [sp, #40]	; 0x28
   143b8:	cmp	r3, #3
   143bc:	movne	r3, #0
   143c0:	strne	r3, [sp, #8]
   143c4:	bne	14788 <__assert_fail@plt+0x34b8>
   143c8:	mov	r3, #4
   143cc:	strh	r3, [r9, #56]	; 0x38
   143d0:	bl	11180 <__errno_location@plt>
   143d4:	ldr	r3, [r0]
   143d8:	str	r3, [r9, #32]
   143dc:	mov	r3, #0
   143e0:	str	r3, [sp, #8]
   143e4:	b	14788 <__assert_fail@plt+0x34b8>
   143e8:	ldr	r3, [r0, #48]	; 0x30
   143ec:	and	r2, r3, #516	; 0x204
   143f0:	cmp	r2, #512	; 0x200
   143f4:	ldreq	r0, [r0, #32]
   143f8:	mvnne	r0, #99	; 0x63
   143fc:	ldr	r1, [r9, #24]
   14400:	ands	r2, r3, #16
   14404:	beq	14424 <__assert_fail@plt+0x3154>
   14408:	tst	r3, #1
   1440c:	moveq	r2, #32768	; 0x8000
   14410:	beq	14424 <__assert_fail@plt+0x3154>
   14414:	ldr	r2, [r9, #48]	; 0x30
   14418:	cmp	r2, #0
   1441c:	movne	r2, #32768	; 0x8000
   14420:	moveq	r2, #0
   14424:	add	r3, sp, #60	; 0x3c
   14428:	bl	16a64 <__assert_fail@plt+0x5794>
   1442c:	str	r0, [r9, #12]
   14430:	cmp	r0, #0
   14434:	beq	14528 <__assert_fail@plt+0x3258>
   14438:	ldrh	r3, [r9, #56]	; 0x38
   1443c:	cmp	r3, #11
   14440:	beq	1455c <__assert_fail@plt+0x328c>
   14444:	ldr	r3, [r5, #48]	; 0x30
   14448:	tst	r3, #256	; 0x100
   1444c:	bne	14574 <__assert_fail@plt+0x32a4>
   14450:	ldr	r3, [r5, #44]	; 0x2c
   14454:	cmp	r3, #0
   14458:	ldr	r3, [pc, #2136]	; 14cb8 <__assert_fail@plt+0x39e8>
   1445c:	mvnne	r3, #0
   14460:	str	r3, [sp, #24]
   14464:	ldr	r3, [sp, #40]	; 0x28
   14468:	cmp	r3, #2
   1446c:	beq	14664 <__assert_fail@plt+0x3394>
   14470:	ldr	r3, [r5, #48]	; 0x30
   14474:	and	r3, r3, #56	; 0x38
   14478:	cmp	r3, #24
   1447c:	beq	145bc <__assert_fail@plt+0x32ec>
   14480:	ldr	r3, [sp, #40]	; 0x28
   14484:	cmp	r3, #3
   14488:	movne	r6, #0
   1448c:	moveq	r6, #1
   14490:	mov	r4, #1
   14494:	ldr	r3, [r5, #48]	; 0x30
   14498:	tst	r3, #512	; 0x200
   1449c:	bne	1464c <__assert_fail@plt+0x337c>
   144a0:	ldr	r2, [sp, #60]	; 0x3c
   144a4:	cmp	r2, #0
   144a8:	blt	144cc <__assert_fail@plt+0x31fc>
   144ac:	mov	r3, #0
   144b0:	mov	r1, r9
   144b4:	mov	r0, r5
   144b8:	bl	1401c <__assert_fail@plt+0x2d4c>
   144bc:	cmp	r0, #0
   144c0:	moveq	r3, #1
   144c4:	streq	r3, [sp, #52]	; 0x34
   144c8:	beq	1431c <__assert_fail@plt+0x304c>
   144cc:	tst	r4, r6
   144d0:	beq	144e0 <__assert_fail@plt+0x3210>
   144d4:	bl	11180 <__errno_location@plt>
   144d8:	ldr	r3, [r0]
   144dc:	str	r3, [r9, #32]
   144e0:	ldrh	r3, [r9, #58]	; 0x3a
   144e4:	orr	r3, r3, #1
   144e8:	strh	r3, [r9, #58]	; 0x3a
   144ec:	ldr	r0, [r9, #12]
   144f0:	bl	112c4 <closedir@plt>
   144f4:	mov	r3, #0
   144f8:	str	r3, [r9, #12]
   144fc:	ldr	r3, [r5, #48]	; 0x30
   14500:	tst	r3, #512	; 0x200
   14504:	beq	14518 <__assert_fail@plt+0x3248>
   14508:	ldr	r0, [sp, #60]	; 0x3c
   1450c:	cmp	r0, #0
   14510:	blt	14518 <__assert_fail@plt+0x3248>
   14514:	bl	112a0 <close@plt>
   14518:	mov	r3, #0
   1451c:	str	r3, [r9, #12]
   14520:	str	r3, [sp, #52]	; 0x34
   14524:	b	1431c <__assert_fail@plt+0x304c>
   14528:	ldr	r3, [sp, #40]	; 0x28
   1452c:	cmp	r3, #3
   14530:	movne	r3, #0
   14534:	strne	r3, [sp, #8]
   14538:	bne	14788 <__assert_fail@plt+0x34b8>
   1453c:	mov	r3, #4
   14540:	strh	r3, [r9, #56]	; 0x38
   14544:	bl	11180 <__errno_location@plt>
   14548:	ldr	r3, [r0]
   1454c:	str	r3, [r9, #32]
   14550:	mov	r3, #0
   14554:	str	r3, [sp, #8]
   14558:	b	14788 <__assert_fail@plt+0x34b8>
   1455c:	mov	r2, #0
   14560:	mov	r1, r9
   14564:	mov	r0, r5
   14568:	bl	13940 <__assert_fail@plt+0x2670>
   1456c:	strh	r0, [r9, #56]	; 0x38
   14570:	b	14450 <__assert_fail@plt+0x3180>
   14574:	mov	r1, r9
   14578:	mov	r0, r5
   1457c:	bl	14204 <__assert_fail@plt+0x2f34>
   14580:	mov	r2, #0
   14584:	mov	r1, r9
   14588:	mov	r0, r5
   1458c:	bl	13940 <__assert_fail@plt+0x2670>
   14590:	mov	r1, r9
   14594:	mov	r0, r5
   14598:	bl	13e80 <__assert_fail@plt+0x2bb0>
   1459c:	cmp	r0, #0
   145a0:	bne	14450 <__assert_fail@plt+0x3180>
   145a4:	bl	11180 <__errno_location@plt>
   145a8:	mov	r3, #12
   145ac:	str	r3, [r0]
   145b0:	mov	r3, #0
   145b4:	str	r3, [sp, #8]
   145b8:	b	14788 <__assert_fail@plt+0x34b8>
   145bc:	ldr	r3, [r9, #84]	; 0x54
   145c0:	cmp	r3, #2
   145c4:	bne	14480 <__assert_fail@plt+0x31b0>
   145c8:	ldr	r1, [sp, #60]	; 0x3c
   145cc:	mov	r0, r9
   145d0:	bl	13d64 <__assert_fail@plt+0x2a94>
   145d4:	ldr	r3, [pc, #1760]	; 14cbc <__assert_fail@plt+0x39ec>
   145d8:	cmp	r0, r3
   145dc:	beq	14634 <__assert_fail@plt+0x3364>
   145e0:	bgt	1461c <__assert_fail@plt+0x334c>
   145e4:	ldr	r3, [pc, #1748]	; 14cc0 <__assert_fail@plt+0x39f0>
   145e8:	cmp	r0, r3
   145ec:	beq	14634 <__assert_fail@plt+0x3364>
   145f0:	cmp	r0, #0
   145f4:	beq	14634 <__assert_fail@plt+0x3364>
   145f8:	ldr	r3, [sp, #40]	; 0x28
   145fc:	cmp	r3, #3
   14600:	moveq	r6, #1
   14604:	movne	r6, #0
   14608:	movne	r3, #0
   1460c:	strne	r3, [sp, #52]	; 0x34
   14610:	bne	1431c <__assert_fail@plt+0x304c>
   14614:	mov	r4, #0
   14618:	b	14494 <__assert_fail@plt+0x31c4>
   1461c:	ldr	r3, [pc, #1696]	; 14cc4 <__assert_fail@plt+0x39f4>
   14620:	cmp	r0, r3
   14624:	beq	14634 <__assert_fail@plt+0x3364>
   14628:	ldr	r3, [pc, #1688]	; 14cc8 <__assert_fail@plt+0x39f8>
   1462c:	cmp	r0, r3
   14630:	bne	145f8 <__assert_fail@plt+0x3328>
   14634:	ldr	r3, [sp, #40]	; 0x28
   14638:	cmp	r3, #3
   1463c:	movne	r6, #0
   14640:	moveq	r6, #1
   14644:	mov	r4, #1
   14648:	b	14494 <__assert_fail@plt+0x31c4>
   1464c:	mov	r2, #3
   14650:	ldr	r1, [pc, #1652]	; 14ccc <__assert_fail@plt+0x39fc>
   14654:	ldr	r0, [sp, #60]	; 0x3c
   14658:	bl	19638 <__assert_fail@plt+0x8368>
   1465c:	str	r0, [sp, #60]	; 0x3c
   14660:	b	144a0 <__assert_fail@plt+0x31d0>
   14664:	mov	r3, #0
   14668:	str	r3, [sp, #52]	; 0x34
   1466c:	b	1431c <__assert_fail@plt+0x304c>
   14670:	ldr	r3, [sp, #16]
   14674:	ldr	r3, [r3]
   14678:	cmp	r3, #0
   1467c:	beq	146a8 <__assert_fail@plt+0x33d8>
   14680:	str	r3, [r9, #32]
   14684:	ldr	r3, [sp, #44]	; 0x2c
   14688:	cmp	r8, #0
   1468c:	cmpeq	r3, #0
   14690:	movne	r3, #1
   14694:	moveq	r3, #0
   14698:	cmp	r3, #0
   1469c:	movne	r3, #7
   146a0:	moveq	r3, #4
   146a4:	strh	r3, [r9, #56]	; 0x38
   146a8:	ldr	r0, [r9, #12]
   146ac:	cmp	r0, #0
   146b0:	beq	146c0 <__assert_fail@plt+0x33f0>
   146b4:	bl	112c4 <closedir@plt>
   146b8:	mov	r3, #0
   146bc:	str	r3, [r9, #12]
   146c0:	ldr	r3, [sp, #36]	; 0x24
   146c4:	cmp	r3, #0
   146c8:	bne	14b08 <__assert_fail@plt+0x3838>
   146cc:	ldr	r3, [r5, #48]	; 0x30
   146d0:	tst	r3, #4
   146d4:	beq	14700 <__assert_fail@plt+0x3430>
   146d8:	ldr	r3, [r5, #36]	; 0x24
   146dc:	ldr	r2, [sp, #12]
   146e0:	cmp	r8, #0
   146e4:	cmpne	r3, r2
   146e8:	ldreq	r3, [sp, #28]
   146ec:	subeq	r3, r3, #1
   146f0:	streq	r3, [sp, #28]
   146f4:	mov	r3, #0
   146f8:	ldr	r2, [sp, #28]
   146fc:	strb	r3, [r2]
   14700:	ldr	r3, [sp, #52]	; 0x34
   14704:	ldr	r2, [sp, #44]	; 0x2c
   14708:	cmp	r2, #0
   1470c:	movne	r3, #0
   14710:	andeq	r3, r3, #1
   14714:	cmp	r3, #0
   14718:	beq	14750 <__assert_fail@plt+0x3480>
   1471c:	ldr	r3, [sp, #40]	; 0x28
   14720:	cmp	r8, #0
   14724:	cmpne	r3, #1
   14728:	bne	14750 <__assert_fail@plt+0x3480>
   1472c:	ldr	r3, [r9, #48]	; 0x30
   14730:	cmp	r3, #0
   14734:	bne	14b88 <__assert_fail@plt+0x38b8>
   14738:	mov	r0, r5
   1473c:	bl	13fcc <__assert_fail@plt+0x2cfc>
   14740:	adds	r0, r0, #0
   14744:	movne	r0, #1
   14748:	cmp	r0, #0
   1474c:	bne	14ba8 <__assert_fail@plt+0x38d8>
   14750:	cmp	r8, #0
   14754:	beq	14bd0 <__assert_fail@plt+0x3900>
   14758:	ldr	r3, [sp, #48]	; 0x30
   1475c:	cmp	r3, #0
   14760:	bne	14c08 <__assert_fail@plt+0x3938>
   14764:	ldr	r3, [r5, #44]	; 0x2c
   14768:	cmp	r3, #0
   1476c:	cmpne	r8, #1
   14770:	bls	14788 <__assert_fail@plt+0x34b8>
   14774:	mov	r2, r8
   14778:	ldr	r1, [sp, #8]
   1477c:	mov	r0, r5
   14780:	bl	13a98 <__assert_fail@plt+0x27c8>
   14784:	str	r0, [sp, #8]
   14788:	ldr	r0, [sp, #8]
   1478c:	add	sp, sp, #68	; 0x44
   14790:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14794:	ldrb	r3, [r7, #20]
   14798:	cmp	r3, #0
   1479c:	beq	14b00 <__assert_fail@plt+0x3830>
   147a0:	ldrh	r3, [r7, #20]
   147a4:	cmp	r3, #46	; 0x2e
   147a8:	bne	14958 <__assert_fail@plt+0x3688>
   147ac:	ldr	r4, [sp, #4]
   147b0:	b	14914 <__assert_fail@plt+0x3644>
   147b4:	ldr	fp, [r5, #24]
   147b8:	ldr	r3, [sp, #32]
   147bc:	add	r1, r3, #2
   147c0:	add	r1, r1, r6
   147c4:	mov	r0, r5
   147c8:	bl	138d0 <__assert_fail@plt+0x2600>
   147cc:	cmp	r0, #0
   147d0:	beq	14808 <__assert_fail@plt+0x3538>
   147d4:	ldr	r3, [r5, #24]
   147d8:	cmp	fp, r3
   147dc:	beq	14850 <__assert_fail@plt+0x3580>
   147e0:	ldr	r2, [r5, #48]	; 0x30
   147e4:	tst	r2, #4
   147e8:	ldrne	r2, [sp, #12]
   147ec:	addne	r3, r3, r2
   147f0:	strne	r3, [sp, #28]
   147f4:	ldr	fp, [r5, #36]	; 0x24
   147f8:	ldr	r3, [sp, #12]
   147fc:	sub	fp, fp, r3
   14800:	str	r0, [sp, #36]	; 0x24
   14804:	b	14988 <__assert_fail@plt+0x36b8>
   14808:	ldr	r7, [sp, #16]
   1480c:	ldr	r6, [r7]
   14810:	mov	r0, r4
   14814:	bl	136fc <__assert_fail@plt+0x242c>
   14818:	ldr	r0, [sp, #8]
   1481c:	bl	13cb4 <__assert_fail@plt+0x29e4>
   14820:	ldr	r0, [r9, #12]
   14824:	bl	112c4 <closedir@plt>
   14828:	mov	r2, #0
   1482c:	str	r2, [r9, #12]
   14830:	mov	r3, #7
   14834:	strh	r3, [r9, #56]	; 0x38
   14838:	ldr	r3, [r5, #48]	; 0x30
   1483c:	orr	r3, r3, #8192	; 0x2000
   14840:	str	r3, [r5, #48]	; 0x30
   14844:	str	r6, [r7]
   14848:	str	r2, [sp, #8]
   1484c:	b	14788 <__assert_fail@plt+0x34b8>
   14850:	ldr	r0, [sp, #36]	; 0x24
   14854:	b	147f4 <__assert_fail@plt+0x3524>
   14858:	mov	r0, r4
   1485c:	bl	136fc <__assert_fail@plt+0x242c>
   14860:	ldr	r0, [sp, #8]
   14864:	bl	13cb4 <__assert_fail@plt+0x29e4>
   14868:	ldr	r0, [r9, #12]
   1486c:	bl	112c4 <closedir@plt>
   14870:	mov	r2, #0
   14874:	str	r2, [r9, #12]
   14878:	mov	r3, #7
   1487c:	strh	r3, [r9, #56]	; 0x38
   14880:	ldr	r3, [r5, #48]	; 0x30
   14884:	orr	r3, r3, #8192	; 0x2000
   14888:	str	r3, [r5, #48]	; 0x30
   1488c:	mov	r3, #36	; 0x24
   14890:	ldr	r1, [sp, #16]
   14894:	str	r3, [r1]
   14898:	str	r2, [sp, #8]
   1489c:	b	14788 <__assert_fail@plt+0x34b8>
   148a0:	ldr	r3, [r4, #28]
   148a4:	str	r3, [r4, #24]
   148a8:	ldr	r2, [r4, #52]	; 0x34
   148ac:	add	r2, r2, #1
   148b0:	add	r1, r4, #168	; 0xa8
   148b4:	ldr	r0, [sp, #28]
   148b8:	bl	11000 <memmove@plt>
   148bc:	b	149c4 <__assert_fail@plt+0x36f4>
   148c0:	mov	r3, sl
   148c4:	mov	r2, #16384	; 0x4000
   148c8:	str	r2, [r4, #80]	; 0x50
   148cc:	cmp	r3, #0
   148d0:	movne	r2, #1
   148d4:	moveq	r2, #2
   148d8:	mov	r3, #0
   148dc:	strd	r2, [r4, #112]	; 0x70
   148e0:	str	sl, [r4, #8]
   148e4:	ldr	r3, [sp, #8]
   148e8:	cmp	r3, #0
   148ec:	ldrne	r3, [sp, #4]
   148f0:	strne	r4, [r3, #8]
   148f4:	streq	r4, [sp, #8]
   148f8:	ldr	r3, [pc, #976]	; 14cd0 <__assert_fail@plt+0x3a00>
   148fc:	cmp	r8, r3
   14900:	beq	14ab4 <__assert_fail@plt+0x37e4>
   14904:	add	r8, r8, #1
   14908:	ldr	r3, [sp, #24]
   1490c:	cmp	r8, r3
   14910:	bcs	146c0 <__assert_fail@plt+0x33f0>
   14914:	str	r4, [sp, #4]
   14918:	ldr	r3, [r9, #12]
   1491c:	cmp	r3, #0
   14920:	beq	146c0 <__assert_fail@plt+0x33f0>
   14924:	bl	11180 <__errno_location@plt>
   14928:	str	r0, [sp, #16]
   1492c:	str	sl, [r0]
   14930:	ldr	r0, [r9, #12]
   14934:	bl	11228 <readdir64@plt>
   14938:	subs	r7, r0, #0
   1493c:	beq	14670 <__assert_fail@plt+0x33a0>
   14940:	ldr	r3, [r5, #48]	; 0x30
   14944:	tst	r3, #32
   14948:	bne	14958 <__assert_fail@plt+0x3688>
   1494c:	ldrb	r3, [r7, #19]
   14950:	cmp	r3, #46	; 0x2e
   14954:	beq	14794 <__assert_fail@plt+0x34c4>
   14958:	add	r4, r7, #19
   1495c:	mov	r0, r4
   14960:	bl	11168 <strlen@plt>
   14964:	mov	r6, r0
   14968:	mov	r2, r0
   1496c:	mov	r1, r4
   14970:	mov	r0, r5
   14974:	bl	13b6c <__assert_fail@plt+0x289c>
   14978:	subs	r4, r0, #0
   1497c:	beq	14808 <__assert_fail@plt+0x3538>
   14980:	cmp	fp, r6
   14984:	bls	147b4 <__assert_fail@plt+0x34e4>
   14988:	ldr	r3, [sp, #12]
   1498c:	adds	r6, r3, r6
   14990:	bcs	14858 <__assert_fail@plt+0x3588>
   14994:	ldr	r3, [sp, #20]
   14998:	str	r3, [r4, #48]	; 0x30
   1499c:	ldr	r3, [r5]
   149a0:	str	r3, [r4, #4]
   149a4:	str	r6, [r4, #40]	; 0x28
   149a8:	ldrd	r2, [r7]
   149ac:	strd	r2, [r4, #160]	; 0xa0
   149b0:	ldr	r3, [r5, #48]	; 0x30
   149b4:	tst	r3, #4
   149b8:	addeq	r3, r4, #168	; 0xa8
   149bc:	streq	r3, [r4, #24]
   149c0:	bne	148a0 <__assert_fail@plt+0x35d0>
   149c4:	ldr	r3, [r5, #44]	; 0x2c
   149c8:	cmp	r3, #0
   149cc:	beq	149dc <__assert_fail@plt+0x370c>
   149d0:	ldr	r3, [r5, #48]	; 0x30
   149d4:	tst	r3, #1024	; 0x400
   149d8:	beq	14a9c <__assert_fail@plt+0x37cc>
   149dc:	ldr	r3, [r5, #48]	; 0x30
   149e0:	tst	r3, #8
   149e4:	beq	14c6c <__assert_fail@plt+0x399c>
   149e8:	ldrb	r2, [r7, #18]
   149ec:	tst	r2, #251	; 0xfb
   149f0:	beq	14c6c <__assert_fail@plt+0x399c>
   149f4:	lsr	r3, r3, #4
   149f8:	and	r3, r3, #1
   149fc:	cmp	r2, #10
   14a00:	orrne	r3, r3, #1
   14a04:	cmp	r3, #0
   14a08:	beq	14c6c <__assert_fail@plt+0x399c>
   14a0c:	mov	r2, #11
   14a10:	strh	r2, [r4, #56]	; 0x38
   14a14:	ldrb	r2, [r7, #18]
   14a18:	sub	r2, r2, #1
   14a1c:	cmp	r2, #11
   14a20:	ldrls	pc, [pc, r2, lsl #2]
   14a24:	b	14a8c <__assert_fail@plt+0x37bc>
   14a28:	andeq	r4, r1, ip, asr sl
   14a2c:	muleq	r1, r4, sl
   14a30:	andeq	r4, r1, ip, lsl #21
   14a34:	andeq	r4, r1, r4, asr #17
   14a38:	andeq	r4, r1, ip, lsl #21
   14a3c:	andeq	r4, r1, r0, lsr ip
   14a40:	andeq	r4, r1, ip, lsl #21
   14a44:	andeq	r4, r1, r4, ror sl
   14a48:	andeq	r4, r1, ip, lsl #21
   14a4c:	andeq	r4, r1, r8, ror #20
   14a50:	andeq	r4, r1, ip, lsl #21
   14a54:	andeq	r4, r1, r0, lsl #21
   14a58:	mov	r3, sl
   14a5c:	mov	r2, #4096	; 0x1000
   14a60:	b	148c8 <__assert_fail@plt+0x35f8>
   14a64:	mov	r3, sl
   14a68:	mov	r2, #40960	; 0xa000
   14a6c:	b	148c8 <__assert_fail@plt+0x35f8>
   14a70:	mov	r3, sl
   14a74:	mov	r2, #32768	; 0x8000
   14a78:	b	148c8 <__assert_fail@plt+0x35f8>
   14a7c:	mov	r3, sl
   14a80:	mov	r2, #49152	; 0xc000
   14a84:	b	148c8 <__assert_fail@plt+0x35f8>
   14a88:	mov	r3, sl
   14a8c:	mov	r2, sl
   14a90:	b	148c8 <__assert_fail@plt+0x35f8>
   14a94:	mov	r2, #8192	; 0x2000
   14a98:	b	148c8 <__assert_fail@plt+0x35f8>
   14a9c:	mov	r2, sl
   14aa0:	mov	r1, r4
   14aa4:	mov	r0, r5
   14aa8:	bl	13940 <__assert_fail@plt+0x2670>
   14aac:	strh	r0, [r4, #56]	; 0x38
   14ab0:	b	148e0 <__assert_fail@plt+0x3610>
   14ab4:	ldr	r3, [r5, #44]	; 0x2c
   14ab8:	cmp	r3, #0
   14abc:	bne	14904 <__assert_fail@plt+0x3634>
   14ac0:	ldr	r1, [sp, #60]	; 0x3c
   14ac4:	mov	r0, r9
   14ac8:	bl	13d64 <__assert_fail@plt+0x2a94>
   14acc:	ldr	r3, [pc, #488]	; 14cbc <__assert_fail@plt+0x39ec>
   14ad0:	cmp	r0, r3
   14ad4:	beq	14af8 <__assert_fail@plt+0x3828>
   14ad8:	ldr	r3, [pc, #500]	; 14cd4 <__assert_fail@plt+0x3a04>
   14adc:	cmp	r0, r3
   14ae0:	beq	14af8 <__assert_fail@plt+0x3828>
   14ae4:	ldr	r3, [pc, #468]	; 14cc0 <__assert_fail@plt+0x39f0>
   14ae8:	cmp	r0, r3
   14aec:	movne	r3, #1
   14af0:	strne	r3, [sp, #48]	; 0x30
   14af4:	bne	14904 <__assert_fail@plt+0x3634>
   14af8:	str	sl, [sp, #48]	; 0x30
   14afc:	b	14904 <__assert_fail@plt+0x3634>
   14b00:	ldr	r4, [sp, #4]
   14b04:	b	14914 <__assert_fail@plt+0x3644>
   14b08:	ldr	r0, [r5, #24]
   14b0c:	ldr	r1, [r5, #4]
   14b10:	cmp	r1, #0
   14b14:	beq	14b44 <__assert_fail@plt+0x3874>
   14b18:	ldr	r3, [r1, #24]
   14b1c:	add	r2, r1, #168	; 0xa8
   14b20:	cmp	r3, r2
   14b24:	ldrne	r2, [r1, #28]
   14b28:	subne	r3, r3, r2
   14b2c:	addne	r3, r0, r3
   14b30:	strne	r3, [r1, #24]
   14b34:	str	r0, [r1, #28]
   14b38:	ldr	r1, [r1, #8]
   14b3c:	cmp	r1, #0
   14b40:	bne	14b18 <__assert_fail@plt+0x3848>
   14b44:	ldr	r3, [sp, #8]
   14b48:	ldr	r2, [r3, #48]	; 0x30
   14b4c:	cmp	r2, #0
   14b50:	blt	146cc <__assert_fail@plt+0x33fc>
   14b54:	ldr	r2, [r3, #24]
   14b58:	add	r1, r3, #168	; 0xa8
   14b5c:	cmp	r2, r1
   14b60:	ldrne	r1, [r3, #28]
   14b64:	subne	r2, r2, r1
   14b68:	addne	r2, r0, r2
   14b6c:	strne	r2, [r3, #24]
   14b70:	str	r0, [r3, #28]
   14b74:	ldr	r2, [r3, #8]
   14b78:	cmp	r2, #0
   14b7c:	ldreq	r2, [r3, #4]
   14b80:	mov	r3, r2
   14b84:	b	14b48 <__assert_fail@plt+0x3878>
   14b88:	ldr	r3, [pc, #328]	; 14cd8 <__assert_fail@plt+0x3a08>
   14b8c:	mvn	r2, #0
   14b90:	ldr	r1, [r9, #4]
   14b94:	mov	r0, r5
   14b98:	bl	1401c <__assert_fail@plt+0x2d4c>
   14b9c:	adds	r0, r0, #0
   14ba0:	movne	r0, #1
   14ba4:	b	14748 <__assert_fail@plt+0x3478>
   14ba8:	mov	r3, #7
   14bac:	strh	r3, [r9, #56]	; 0x38
   14bb0:	ldr	r3, [r5, #48]	; 0x30
   14bb4:	orr	r3, r3, #8192	; 0x2000
   14bb8:	str	r3, [r5, #48]	; 0x30
   14bbc:	ldr	r0, [sp, #8]
   14bc0:	bl	13cb4 <__assert_fail@plt+0x29e4>
   14bc4:	mov	r3, #0
   14bc8:	str	r3, [sp, #8]
   14bcc:	b	14788 <__assert_fail@plt+0x34b8>
   14bd0:	ldr	r3, [sp, #40]	; 0x28
   14bd4:	cmp	r3, #3
   14bd8:	beq	14bf0 <__assert_fail@plt+0x3920>
   14bdc:	ldr	r0, [sp, #8]
   14be0:	bl	13cb4 <__assert_fail@plt+0x29e4>
   14be4:	mov	r3, #0
   14be8:	str	r3, [sp, #8]
   14bec:	b	14788 <__assert_fail@plt+0x34b8>
   14bf0:	ldrh	r3, [r9, #56]	; 0x38
   14bf4:	cmp	r3, #4
   14bf8:	cmpne	r3, #7
   14bfc:	movne	r3, #6
   14c00:	strhne	r3, [r9, #56]	; 0x38
   14c04:	b	14bdc <__assert_fail@plt+0x390c>
   14c08:	ldr	r3, [pc, #204]	; 14cdc <__assert_fail@plt+0x3a0c>
   14c0c:	str	r3, [r5, #44]	; 0x2c
   14c10:	mov	r2, r8
   14c14:	ldr	r1, [sp, #8]
   14c18:	mov	r0, r5
   14c1c:	bl	13a98 <__assert_fail@plt+0x27c8>
   14c20:	str	r0, [sp, #8]
   14c24:	mov	r3, #0
   14c28:	str	r3, [r5, #44]	; 0x2c
   14c2c:	b	14788 <__assert_fail@plt+0x34b8>
   14c30:	mov	r3, #24576	; 0x6000
   14c34:	str	r3, [r4, #80]	; 0x50
   14c38:	mov	r2, #1
   14c3c:	mov	r3, #0
   14c40:	b	148dc <__assert_fail@plt+0x360c>
   14c44:	mov	r3, #24576	; 0x6000
   14c48:	str	r3, [r4, #80]	; 0x50
   14c4c:	mov	r2, #2
   14c50:	mov	r3, #0
   14c54:	b	148dc <__assert_fail@plt+0x360c>
   14c58:	mov	r3, #8192	; 0x2000
   14c5c:	str	r3, [r4, #80]	; 0x50
   14c60:	mov	r2, #2
   14c64:	mov	r3, #0
   14c68:	b	148dc <__assert_fail@plt+0x360c>
   14c6c:	mov	r3, #11
   14c70:	strh	r3, [r4, #56]	; 0x38
   14c74:	ldrb	r3, [r7, #18]
   14c78:	sub	r3, r3, #1
   14c7c:	cmp	r3, #11
   14c80:	ldrls	pc, [pc, r3, lsl #2]
   14c84:	b	14a88 <__assert_fail@plt+0x37b8>
   14c88:	andeq	r4, r1, r8, asr sl
   14c8c:	andeq	r4, r1, r8, asr ip
   14c90:	andeq	r4, r1, r8, lsl #21
   14c94:	andeq	r4, r1, r0, asr #17
   14c98:	andeq	r4, r1, r8, lsl #21
   14c9c:	andeq	r4, r1, r4, asr #24
   14ca0:	andeq	r4, r1, r8, lsl #21
   14ca4:	andeq	r4, r1, r0, ror sl
   14ca8:	andeq	r4, r1, r8, lsl #21
   14cac:	andeq	r4, r1, r4, ror #20
   14cb0:	andeq	r4, r1, r8, lsl #21
   14cb4:	andeq	r4, r1, ip, ror sl
   14cb8:	andeq	r8, r1, r0, lsr #13
   14cbc:	andeq	r6, r0, r9, ror #18
   14cc0:			; <UNDEFINED> instruction: 0xff534d42
   14cc4:	andeq	r9, r0, r0, lsr #31
   14cc8:	movtpl	r4, #24911	; 0x614f
   14ccc:	andeq	r0, r0, r6, lsl #8
   14cd0:	andeq	r2, r0, r0, lsl r7
   14cd4:			; <UNDEFINED> instruction: 0x01021994
   14cd8:	andeq	sl, r1, r0, lsr #29
   14cdc:	muleq	r1, r8, r8
   14ce0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ce4:	sub	sp, sp, #20
   14ce8:	bic	r3, r1, #4080	; 0xff0
   14cec:	bics	r3, r3, #15
   14cf0:	bne	14e10 <__assert_fail@plt+0x3b40>
   14cf4:	mov	r7, r0
   14cf8:	mov	r9, r1
   14cfc:	mov	fp, r2
   14d00:	and	r3, r1, #516	; 0x204
   14d04:	cmp	r3, #516	; 0x204
   14d08:	beq	14e24 <__assert_fail@plt+0x3b54>
   14d0c:	tst	r1, #18
   14d10:	beq	14e38 <__assert_fail@plt+0x3b68>
   14d14:	mov	r1, #96	; 0x60
   14d18:	mov	r0, #1
   14d1c:	bl	19360 <__assert_fail@plt+0x8090>
   14d20:	subs	r6, r0, #0
   14d24:	beq	15054 <__assert_fail@plt+0x3d84>
   14d28:	str	fp, [r6, #44]	; 0x2c
   14d2c:	tst	r9, #2
   14d30:	streq	r9, [r6, #48]	; 0x30
   14d34:	bicne	r3, r9, #512	; 0x200
   14d38:	orrne	r3, r3, #4
   14d3c:	strne	r3, [r6, #48]	; 0x30
   14d40:	mvn	r3, #99	; 0x63
   14d44:	str	r3, [r6, #32]
   14d48:	ldr	r0, [r7]
   14d4c:	cmp	r0, #0
   14d50:	beq	14e4c <__assert_fail@plt+0x3b7c>
   14d54:	mov	r5, r7
   14d58:	mov	r4, #0
   14d5c:	bl	11168 <strlen@plt>
   14d60:	cmp	r4, r0
   14d64:	movcc	r4, r0
   14d68:	ldr	r0, [r5, #4]!
   14d6c:	cmp	r0, #0
   14d70:	bne	14d5c <__assert_fail@plt+0x3a8c>
   14d74:	add	r1, r4, #1
   14d78:	cmp	r1, #4096	; 0x1000
   14d7c:	movcc	r1, #4096	; 0x1000
   14d80:	mov	r0, r6
   14d84:	bl	138d0 <__assert_fail@plt+0x2600>
   14d88:	subs	sl, r0, #0
   14d8c:	beq	15048 <__assert_fail@plt+0x3d78>
   14d90:	ldr	r3, [r7]
   14d94:	cmp	r3, #0
   14d98:	beq	15060 <__assert_fail@plt+0x3d90>
   14d9c:	mov	r2, #0
   14da0:	ldr	r1, [pc, #716]	; 15074 <__assert_fail@plt+0x3da4>
   14da4:	mov	r0, r6
   14da8:	bl	13b6c <__assert_fail@plt+0x289c>
   14dac:	subs	r3, r0, #0
   14db0:	mov	r2, r3
   14db4:	str	r3, [sp, #8]
   14db8:	beq	15040 <__assert_fail@plt+0x3d70>
   14dbc:	mvn	r3, #0
   14dc0:	str	r3, [r2, #48]	; 0x30
   14dc4:	cmp	fp, #0
   14dc8:	beq	14dd8 <__assert_fail@plt+0x3b08>
   14dcc:	ldr	sl, [r6, #48]	; 0x30
   14dd0:	lsr	sl, sl, #10
   14dd4:	and	sl, sl, #1
   14dd8:	ldr	r4, [r7]
   14ddc:	cmp	r4, #0
   14de0:	beq	14ff0 <__assert_fail@plt+0x3d20>
   14de4:	mov	r3, #0
   14de8:	mov	r5, r3
   14dec:	str	r3, [sp, #12]
   14df0:	mov	r8, r3
   14df4:	lsr	r9, r9, #11
   14df8:	eor	r9, r9, #1
   14dfc:	and	r3, r9, #1
   14e00:	mov	r9, r5
   14e04:	str	r6, [sp, #4]
   14e08:	mov	r6, r3
   14e0c:	b	14ec4 <__assert_fail@plt+0x3bf4>
   14e10:	bl	11180 <__errno_location@plt>
   14e14:	mov	r3, #22
   14e18:	str	r3, [r0]
   14e1c:	mov	r6, #0
   14e20:	b	15054 <__assert_fail@plt+0x3d84>
   14e24:	bl	11180 <__errno_location@plt>
   14e28:	mov	r3, #22
   14e2c:	str	r3, [r0]
   14e30:	mov	r6, #0
   14e34:	b	15054 <__assert_fail@plt+0x3d84>
   14e38:	bl	11180 <__errno_location@plt>
   14e3c:	mov	r3, #22
   14e40:	str	r3, [r0]
   14e44:	mov	r6, #0
   14e48:	b	15054 <__assert_fail@plt+0x3d84>
   14e4c:	mov	r4, #0
   14e50:	b	14d74 <__assert_fail@plt+0x3aa4>
   14e54:	mov	r1, r4
   14e58:	ldr	r0, [sp, #4]
   14e5c:	bl	13b6c <__assert_fail@plt+0x289c>
   14e60:	subs	r4, r0, #0
   14e64:	beq	1502c <__assert_fail@plt+0x3d5c>
   14e68:	str	r9, [r4, #48]	; 0x30
   14e6c:	ldr	r3, [sp, #8]
   14e70:	str	r3, [r4, #4]
   14e74:	add	r3, r4, #168	; 0xa8
   14e78:	str	r3, [r4, #24]
   14e7c:	cmp	r5, #0
   14e80:	moveq	r3, #0
   14e84:	andne	r3, sl, #1
   14e88:	cmp	r3, #0
   14e8c:	beq	14f2c <__assert_fail@plt+0x3c5c>
   14e90:	mov	r3, #11
   14e94:	strh	r3, [r4, #56]	; 0x38
   14e98:	mov	r2, #2
   14e9c:	mov	r3, #0
   14ea0:	strd	r2, [r4, #112]	; 0x70
   14ea4:	cmp	fp, #0
   14ea8:	beq	14f44 <__assert_fail@plt+0x3c74>
   14eac:	str	r5, [r4, #8]
   14eb0:	mov	r5, r4
   14eb4:	add	r8, r8, #1
   14eb8:	ldr	r4, [r7, #4]!
   14ebc:	cmp	r4, #0
   14ec0:	beq	14f64 <__assert_fail@plt+0x3c94>
   14ec4:	mov	r0, r4
   14ec8:	bl	11168 <strlen@plt>
   14ecc:	mov	r2, r0
   14ed0:	cmp	r0, #2
   14ed4:	movls	r3, #0
   14ed8:	andhi	r3, r6, #1
   14edc:	cmp	r3, #0
   14ee0:	beq	14e54 <__assert_fail@plt+0x3b84>
   14ee4:	add	r3, r4, r0
   14ee8:	ldrb	r3, [r3, #-1]
   14eec:	cmp	r3, #47	; 0x2f
   14ef0:	bne	14e54 <__assert_fail@plt+0x3b84>
   14ef4:	cmp	r0, #1
   14ef8:	bls	14e54 <__assert_fail@plt+0x3b84>
   14efc:	sub	r1, r0, #2
   14f00:	add	r3, r4, r1
   14f04:	ldrb	r1, [r4, r1]
   14f08:	cmp	r1, #47	; 0x2f
   14f0c:	bne	14e54 <__assert_fail@plt+0x3b84>
   14f10:	sub	r2, r2, #1
   14f14:	cmp	r2, #1
   14f18:	beq	14e54 <__assert_fail@plt+0x3b84>
   14f1c:	ldrb	r1, [r3, #-1]!
   14f20:	cmp	r1, #47	; 0x2f
   14f24:	beq	14f10 <__assert_fail@plt+0x3c40>
   14f28:	b	14e54 <__assert_fail@plt+0x3b84>
   14f2c:	mov	r2, r9
   14f30:	mov	r1, r4
   14f34:	ldr	r0, [sp, #4]
   14f38:	bl	13940 <__assert_fail@plt+0x2670>
   14f3c:	strh	r0, [r4, #56]	; 0x38
   14f40:	b	14ea4 <__assert_fail@plt+0x3bd4>
   14f44:	str	r9, [r4, #8]
   14f48:	cmp	r5, #0
   14f4c:	ldrne	r3, [sp, #12]
   14f50:	strne	r4, [r3, #8]
   14f54:	strne	r4, [sp, #12]
   14f58:	streq	r4, [sp, #12]
   14f5c:	moveq	r5, r4
   14f60:	b	14eb4 <__assert_fail@plt+0x3be4>
   14f64:	ldr	r6, [sp, #4]
   14f68:	cmp	fp, #0
   14f6c:	cmpne	r8, #1
   14f70:	bhi	14fd8 <__assert_fail@plt+0x3d08>
   14f74:	mov	r2, #0
   14f78:	ldr	r1, [pc, #244]	; 15074 <__assert_fail@plt+0x3da4>
   14f7c:	mov	r0, r6
   14f80:	bl	13b6c <__assert_fail@plt+0x289c>
   14f84:	str	r0, [r6]
   14f88:	cmp	r0, #0
   14f8c:	beq	15030 <__assert_fail@plt+0x3d60>
   14f90:	str	r5, [r0, #8]
   14f94:	ldr	r3, [r6]
   14f98:	mov	r2, #9
   14f9c:	strh	r2, [r3, #56]	; 0x38
   14fa0:	ldr	r3, [r6]
   14fa4:	mov	r2, #1
   14fa8:	str	r2, [r3, #48]	; 0x30
   14fac:	mov	r0, r6
   14fb0:	bl	13be0 <__assert_fail@plt+0x2910>
   14fb4:	cmp	r0, #0
   14fb8:	beq	15030 <__assert_fail@plt+0x3d60>
   14fbc:	ldr	r3, [r6, #48]	; 0x30
   14fc0:	tst	r3, #516	; 0x204
   14fc4:	beq	15008 <__assert_fail@plt+0x3d38>
   14fc8:	mvn	r1, #0
   14fcc:	add	r0, r6, #60	; 0x3c
   14fd0:	bl	16968 <__assert_fail@plt+0x5698>
   14fd4:	b	15054 <__assert_fail@plt+0x3d84>
   14fd8:	mov	r2, r8
   14fdc:	mov	r1, r5
   14fe0:	mov	r0, r6
   14fe4:	bl	13a98 <__assert_fail@plt+0x27c8>
   14fe8:	mov	r5, r0
   14fec:	b	14f74 <__assert_fail@plt+0x3ca4>
   14ff0:	mov	r5, #0
   14ff4:	b	14f74 <__assert_fail@plt+0x3ca4>
   14ff8:	mov	r3, #0
   14ffc:	str	r3, [sp, #8]
   15000:	mov	r5, r3
   15004:	b	14f74 <__assert_fail@plt+0x3ca4>
   15008:	ldr	r1, [pc, #104]	; 15078 <__assert_fail@plt+0x3da8>
   1500c:	mov	r0, r6
   15010:	bl	13c64 <__assert_fail@plt+0x2994>
   15014:	str	r0, [r6, #28]
   15018:	cmp	r0, #0
   1501c:	ldrlt	r3, [r6, #48]	; 0x30
   15020:	orrlt	r3, r3, #4
   15024:	strlt	r3, [r6, #48]	; 0x30
   15028:	b	14fc8 <__assert_fail@plt+0x3cf8>
   1502c:	ldr	r6, [sp, #4]
   15030:	mov	r0, r5
   15034:	bl	13cb4 <__assert_fail@plt+0x29e4>
   15038:	ldr	r0, [sp, #8]
   1503c:	bl	136fc <__assert_fail@plt+0x242c>
   15040:	ldr	r0, [r6, #24]
   15044:	bl	136fc <__assert_fail@plt+0x242c>
   15048:	mov	r0, r6
   1504c:	bl	136fc <__assert_fail@plt+0x242c>
   15050:	mov	r6, #0
   15054:	mov	r0, r6
   15058:	add	sp, sp, #20
   1505c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15060:	cmp	fp, #0
   15064:	beq	14ff8 <__assert_fail@plt+0x3d28>
   15068:	mov	r3, #0
   1506c:	str	r3, [sp, #8]
   15070:	b	14dcc <__assert_fail@plt+0x3afc>
   15074:	andeq	fp, r1, r0, lsr #5
   15078:	muleq	r1, ip, lr
   1507c:	push	{r4, r5, r6, lr}
   15080:	mov	r5, r0
   15084:	ldr	r0, [r0]
   15088:	cmp	r0, #0
   1508c:	beq	150c4 <__assert_fail@plt+0x3df4>
   15090:	ldr	r3, [r0, #48]	; 0x30
   15094:	cmp	r3, #0
   15098:	blt	15128 <__assert_fail@plt+0x3e58>
   1509c:	ldr	r4, [r0, #8]
   150a0:	cmp	r4, #0
   150a4:	ldreq	r4, [r0, #4]
   150a8:	bl	136fc <__assert_fail@plt+0x242c>
   150ac:	mov	r0, r4
   150b0:	ldr	r3, [r4, #48]	; 0x30
   150b4:	cmp	r3, #0
   150b8:	bge	1509c <__assert_fail@plt+0x3dcc>
   150bc:	mov	r0, r4
   150c0:	bl	136fc <__assert_fail@plt+0x242c>
   150c4:	ldr	r0, [r5, #4]
   150c8:	cmp	r0, #0
   150cc:	beq	150d4 <__assert_fail@plt+0x3e04>
   150d0:	bl	13cb4 <__assert_fail@plt+0x29e4>
   150d4:	ldr	r0, [r5, #8]
   150d8:	bl	136fc <__assert_fail@plt+0x242c>
   150dc:	ldr	r0, [r5, #24]
   150e0:	bl	136fc <__assert_fail@plt+0x242c>
   150e4:	ldr	r3, [r5, #48]	; 0x30
   150e8:	tst	r3, #512	; 0x200
   150ec:	beq	15130 <__assert_fail@plt+0x3e60>
   150f0:	ldr	r0, [r5, #32]
   150f4:	cmp	r0, #0
   150f8:	blt	15138 <__assert_fail@plt+0x3e68>
   150fc:	bl	112a0 <close@plt>
   15100:	cmp	r0, #0
   15104:	beq	15138 <__assert_fail@plt+0x3e68>
   15108:	bl	11180 <__errno_location@plt>
   1510c:	ldr	r4, [r0]
   15110:	add	r0, r5, #60	; 0x3c
   15114:	bl	13d30 <__assert_fail@plt+0x2a60>
   15118:	ldr	r0, [r5, #52]	; 0x34
   1511c:	cmp	r0, #0
   15120:	bne	15150 <__assert_fail@plt+0x3e80>
   15124:	b	15154 <__assert_fail@plt+0x3e84>
   15128:	mov	r4, r0
   1512c:	b	150bc <__assert_fail@plt+0x3dec>
   15130:	tst	r3, #4
   15134:	beq	15174 <__assert_fail@plt+0x3ea4>
   15138:	add	r0, r5, #60	; 0x3c
   1513c:	bl	13d30 <__assert_fail@plt+0x2a60>
   15140:	ldr	r0, [r5, #52]	; 0x34
   15144:	cmp	r0, #0
   15148:	movne	r4, #0
   1514c:	beq	151c8 <__assert_fail@plt+0x3ef8>
   15150:	bl	16460 <__assert_fail@plt+0x5190>
   15154:	mov	r0, r5
   15158:	bl	13cf4 <__assert_fail@plt+0x2a24>
   1515c:	mov	r0, r5
   15160:	bl	136fc <__assert_fail@plt+0x242c>
   15164:	cmp	r4, #0
   15168:	bne	151b8 <__assert_fail@plt+0x3ee8>
   1516c:	mov	r0, r4
   15170:	pop	{r4, r5, r6, pc}
   15174:	ldr	r0, [r5, #28]
   15178:	bl	1124c <fchdir@plt>
   1517c:	subs	r4, r0, #0
   15180:	beq	1518c <__assert_fail@plt+0x3ebc>
   15184:	bl	11180 <__errno_location@plt>
   15188:	ldr	r4, [r0]
   1518c:	ldr	r0, [r5, #28]
   15190:	bl	112a0 <close@plt>
   15194:	clz	r3, r4
   15198:	lsr	r3, r3, #5
   1519c:	cmp	r0, #0
   151a0:	moveq	r3, #0
   151a4:	cmp	r3, #0
   151a8:	beq	15110 <__assert_fail@plt+0x3e40>
   151ac:	bl	11180 <__errno_location@plt>
   151b0:	ldr	r4, [r0]
   151b4:	b	15110 <__assert_fail@plt+0x3e40>
   151b8:	bl	11180 <__errno_location@plt>
   151bc:	str	r4, [r0]
   151c0:	mvn	r4, #0
   151c4:	b	1516c <__assert_fail@plt+0x3e9c>
   151c8:	mov	r0, r5
   151cc:	bl	13cf4 <__assert_fail@plt+0x2a24>
   151d0:	mov	r0, r5
   151d4:	bl	136fc <__assert_fail@plt+0x242c>
   151d8:	mov	r4, #0
   151dc:	b	1516c <__assert_fail@plt+0x3e9c>
   151e0:	push	{r4, r5, r6, r7, r8, lr}
   151e4:	ldr	r5, [r0]
   151e8:	cmp	r5, #0
   151ec:	beq	15830 <__assert_fail@plt+0x4560>
   151f0:	ldr	r3, [r0, #48]	; 0x30
   151f4:	tst	r3, #8192	; 0x2000
   151f8:	bne	15838 <__assert_fail@plt+0x4568>
   151fc:	mov	r8, r0
   15200:	ldrh	r3, [r5, #60]	; 0x3c
   15204:	mov	r2, #3
   15208:	strh	r2, [r5, #60]	; 0x3c
   1520c:	cmp	r3, #1
   15210:	beq	15290 <__assert_fail@plt+0x3fc0>
   15214:	cmp	r3, #2
   15218:	beq	152a8 <__assert_fail@plt+0x3fd8>
   1521c:	ldrh	r2, [r5, #56]	; 0x38
   15220:	cmp	r2, #1
   15224:	bne	1549c <__assert_fail@plt+0x41cc>
   15228:	cmp	r3, #4
   1522c:	beq	15250 <__assert_fail@plt+0x3f80>
   15230:	ldr	r1, [r8, #48]	; 0x30
   15234:	tst	r1, #64	; 0x40
   15238:	beq	15348 <__assert_fail@plt+0x4078>
   1523c:	ldrd	r6, [r5, #64]	; 0x40
   15240:	ldrd	r2, [r8, #16]
   15244:	cmp	r7, r3
   15248:	cmpeq	r6, r2
   1524c:	beq	15348 <__assert_fail@plt+0x4078>
   15250:	ldrh	r3, [r5, #58]	; 0x3a
   15254:	tst	r3, #2
   15258:	bne	1533c <__assert_fail@plt+0x406c>
   1525c:	ldr	r0, [r8, #4]
   15260:	cmp	r0, #0
   15264:	beq	15274 <__assert_fail@plt+0x3fa4>
   15268:	bl	13cb4 <__assert_fail@plt+0x29e4>
   1526c:	mov	r3, #0
   15270:	str	r3, [r8, #4]
   15274:	mov	r3, #6
   15278:	strh	r3, [r5, #56]	; 0x38
   1527c:	mov	r1, r5
   15280:	mov	r0, r8
   15284:	bl	14204 <__assert_fail@plt+0x2f34>
   15288:	mov	r4, r5
   1528c:	b	15578 <__assert_fail@plt+0x42a8>
   15290:	mov	r2, #0
   15294:	mov	r1, r5
   15298:	bl	13940 <__assert_fail@plt+0x2670>
   1529c:	strh	r0, [r5, #56]	; 0x38
   152a0:	mov	r4, r5
   152a4:	b	15578 <__assert_fail@plt+0x42a8>
   152a8:	ldrh	r2, [r5, #56]	; 0x38
   152ac:	sub	r3, r2, #12
   152b0:	uxth	r3, r3
   152b4:	cmp	r3, #1
   152b8:	bls	152c8 <__assert_fail@plt+0x3ff8>
   152bc:	cmp	r2, #1
   152c0:	bne	1549c <__assert_fail@plt+0x41cc>
   152c4:	b	15230 <__assert_fail@plt+0x3f60>
   152c8:	mov	r2, #1
   152cc:	mov	r1, r5
   152d0:	bl	13940 <__assert_fail@plt+0x2670>
   152d4:	strh	r0, [r5, #56]	; 0x38
   152d8:	cmp	r0, #1
   152dc:	movne	r4, r5
   152e0:	bne	15678 <__assert_fail@plt+0x43a8>
   152e4:	ldr	r3, [r8, #48]	; 0x30
   152e8:	tst	r3, #4
   152ec:	movne	r4, r5
   152f0:	bne	15678 <__assert_fail@plt+0x43a8>
   152f4:	ldr	r1, [pc, #1356]	; 15848 <__assert_fail@plt+0x4578>
   152f8:	mov	r0, r8
   152fc:	bl	13c64 <__assert_fail@plt+0x2994>
   15300:	str	r0, [r5, #36]	; 0x24
   15304:	cmp	r0, #0
   15308:	blt	15320 <__assert_fail@plt+0x4050>
   1530c:	ldrh	r3, [r5, #58]	; 0x3a
   15310:	orr	r3, r3, #2
   15314:	strh	r3, [r5, #58]	; 0x3a
   15318:	mov	r4, r5
   1531c:	b	15678 <__assert_fail@plt+0x43a8>
   15320:	bl	11180 <__errno_location@plt>
   15324:	ldr	r3, [r0]
   15328:	str	r3, [r5, #32]
   1532c:	mov	r3, #7
   15330:	strh	r3, [r5, #56]	; 0x38
   15334:	mov	r4, r5
   15338:	b	15678 <__assert_fail@plt+0x43a8>
   1533c:	ldr	r0, [r5, #36]	; 0x24
   15340:	bl	112a0 <close@plt>
   15344:	b	1525c <__assert_fail@plt+0x3f8c>
   15348:	ldr	r0, [r8, #4]
   1534c:	cmp	r0, #0
   15350:	beq	1539c <__assert_fail@plt+0x40cc>
   15354:	tst	r1, #4096	; 0x1000
   15358:	bne	15388 <__assert_fail@plt+0x40b8>
   1535c:	ldr	r3, [r5, #24]
   15360:	mvn	r2, #0
   15364:	mov	r1, r5
   15368:	mov	r0, r8
   1536c:	bl	1401c <__assert_fail@plt+0x2d4c>
   15370:	cmp	r0, #0
   15374:	bne	153f0 <__assert_fail@plt+0x4120>
   15378:	ldr	r4, [r8, #4]
   1537c:	mov	r3, #0
   15380:	str	r3, [r8, #4]
   15384:	b	15638 <__assert_fail@plt+0x4368>
   15388:	bic	r1, r1, #4096	; 0x1000
   1538c:	str	r1, [r8, #48]	; 0x30
   15390:	bl	13cb4 <__assert_fail@plt+0x29e4>
   15394:	mov	r3, #0
   15398:	str	r3, [r8, #4]
   1539c:	mov	r1, #3
   153a0:	mov	r0, r8
   153a4:	bl	142c8 <__assert_fail@plt+0x2ff8>
   153a8:	str	r0, [r8, #4]
   153ac:	cmp	r0, #0
   153b0:	bne	15378 <__assert_fail@plt+0x40a8>
   153b4:	ldr	r3, [r8, #48]	; 0x30
   153b8:	tst	r3, #8192	; 0x2000
   153bc:	bne	15840 <__assert_fail@plt+0x4570>
   153c0:	ldr	r3, [r5, #32]
   153c4:	cmp	r3, #0
   153c8:	beq	153dc <__assert_fail@plt+0x410c>
   153cc:	ldrh	r3, [r5, #56]	; 0x38
   153d0:	cmp	r3, #4
   153d4:	movne	r3, #7
   153d8:	strhne	r3, [r5, #56]	; 0x38
   153dc:	mov	r1, r5
   153e0:	mov	r0, r8
   153e4:	bl	14204 <__assert_fail@plt+0x2f34>
   153e8:	mov	r4, r5
   153ec:	b	15578 <__assert_fail@plt+0x42a8>
   153f0:	bl	11180 <__errno_location@plt>
   153f4:	ldr	r3, [r0]
   153f8:	str	r3, [r5, #32]
   153fc:	ldrh	r3, [r5, #58]	; 0x3a
   15400:	orr	r3, r3, #1
   15404:	strh	r3, [r5, #58]	; 0x3a
   15408:	ldr	r3, [r8, #4]
   1540c:	cmp	r3, #0
   15410:	beq	15378 <__assert_fail@plt+0x40a8>
   15414:	ldr	r2, [r3, #4]
   15418:	ldr	r2, [r2, #24]
   1541c:	str	r2, [r3, #24]
   15420:	ldr	r3, [r3, #8]
   15424:	cmp	r3, #0
   15428:	bne	15414 <__assert_fail@plt+0x4144>
   1542c:	b	15378 <__assert_fail@plt+0x40a8>
   15430:	str	r3, [r8]
   15434:	ldr	r2, [r8, #24]
   15438:	ldr	r3, [r3, #40]	; 0x28
   1543c:	mov	r1, #0
   15440:	strb	r1, [r2, r3]
   15444:	mov	r1, #3
   15448:	mov	r0, r8
   1544c:	bl	142c8 <__assert_fail@plt+0x2ff8>
   15450:	subs	r4, r0, #0
   15454:	beq	15464 <__assert_fail@plt+0x4194>
   15458:	mov	r0, r5
   1545c:	bl	136fc <__assert_fail@plt+0x242c>
   15460:	b	15638 <__assert_fail@plt+0x4368>
   15464:	ldr	r3, [r8, #48]	; 0x30
   15468:	tst	r3, #8192	; 0x2000
   1546c:	beq	154b8 <__assert_fail@plt+0x41e8>
   15470:	b	15578 <__assert_fail@plt+0x42a8>
   15474:	str	r4, [r8]
   15478:	mov	r0, r5
   1547c:	bl	136fc <__assert_fail@plt+0x242c>
   15480:	ldr	r3, [r4, #48]	; 0x30
   15484:	cmp	r3, #0
   15488:	beq	15580 <__assert_fail@plt+0x42b0>
   1548c:	ldrh	r3, [r4, #60]	; 0x3c
   15490:	mov	r5, r4
   15494:	cmp	r3, #4
   15498:	bne	15630 <__assert_fail@plt+0x4360>
   1549c:	ldr	r4, [r5, #8]
   154a0:	cmp	r4, #0
   154a4:	bne	15474 <__assert_fail@plt+0x41a4>
   154a8:	ldr	r3, [r5, #4]
   154ac:	ldr	r2, [r3, #12]
   154b0:	cmp	r2, #0
   154b4:	bne	15430 <__assert_fail@plt+0x4160>
   154b8:	ldr	r4, [r5, #4]
   154bc:	str	r4, [r8]
   154c0:	mov	r0, r5
   154c4:	bl	136fc <__assert_fail@plt+0x242c>
   154c8:	ldr	r3, [r4, #48]	; 0x30
   154cc:	cmn	r3, #1
   154d0:	beq	15778 <__assert_fail@plt+0x44a8>
   154d4:	ldrh	r3, [r4, #56]	; 0x38
   154d8:	cmp	r3, #11
   154dc:	beq	15794 <__assert_fail@plt+0x44c4>
   154e0:	ldr	r2, [r8, #24]
   154e4:	ldr	r3, [r4, #40]	; 0x28
   154e8:	mov	r1, #0
   154ec:	strb	r1, [r2, r3]
   154f0:	ldr	r3, [r4, #48]	; 0x30
   154f4:	cmp	r3, r1
   154f8:	beq	15798 <__assert_fail@plt+0x44c8>
   154fc:	ldrh	r3, [r4, #58]	; 0x3a
   15500:	tst	r3, #2
   15504:	beq	157f0 <__assert_fail@plt+0x4520>
   15508:	ldr	r3, [r8, #48]	; 0x30
   1550c:	tst	r3, #4
   15510:	bne	1552c <__assert_fail@plt+0x425c>
   15514:	tst	r3, #512	; 0x200
   15518:	beq	157c4 <__assert_fail@plt+0x44f4>
   1551c:	mov	r2, #1
   15520:	ldr	r1, [r4, #36]	; 0x24
   15524:	mov	r0, r8
   15528:	bl	13f4c <__assert_fail@plt+0x2c7c>
   1552c:	ldr	r0, [r4, #36]	; 0x24
   15530:	bl	112a0 <close@plt>
   15534:	ldrh	r3, [r4, #56]	; 0x38
   15538:	cmp	r3, #2
   1553c:	beq	15568 <__assert_fail@plt+0x4298>
   15540:	ldr	r3, [r4, #32]
   15544:	cmp	r3, #0
   15548:	movne	r3, #7
   1554c:	strhne	r3, [r4, #56]	; 0x38
   15550:	bne	15568 <__assert_fail@plt+0x4298>
   15554:	mov	r3, #6
   15558:	strh	r3, [r4, #56]	; 0x38
   1555c:	mov	r1, r4
   15560:	mov	r0, r8
   15564:	bl	14204 <__assert_fail@plt+0x2f34>
   15568:	ldr	r3, [r8, #48]	; 0x30
   1556c:	and	r3, r3, #8192	; 0x2000
   15570:	cmp	r3, #0
   15574:	movne	r4, #0
   15578:	mov	r0, r4
   1557c:	pop	{r4, r5, r6, r7, r8, pc}
   15580:	mov	r0, r8
   15584:	bl	13fcc <__assert_fail@plt+0x2cfc>
   15588:	cmp	r0, #0
   1558c:	bne	1560c <__assert_fail@plt+0x433c>
   15590:	mov	r0, r8
   15594:	bl	13cf4 <__assert_fail@plt+0x2a24>
   15598:	ldr	r2, [r4, #52]	; 0x34
   1559c:	str	r2, [r4, #40]	; 0x28
   155a0:	add	r6, r4, #168	; 0xa8
   155a4:	add	r2, r2, #1
   155a8:	mov	r1, r6
   155ac:	ldr	r0, [r8, #24]
   155b0:	bl	11000 <memmove@plt>
   155b4:	mov	r1, #47	; 0x2f
   155b8:	mov	r0, r6
   155bc:	bl	11210 <strrchr@plt>
   155c0:	cmp	r0, #0
   155c4:	beq	155f4 <__assert_fail@plt+0x4324>
   155c8:	cmp	r6, r0
   155cc:	beq	15620 <__assert_fail@plt+0x4350>
   155d0:	add	r5, r0, #1
   155d4:	mov	r0, r5
   155d8:	bl	11168 <strlen@plt>
   155dc:	mov	r7, r0
   155e0:	add	r2, r0, #1
   155e4:	mov	r1, r5
   155e8:	mov	r0, r6
   155ec:	bl	11000 <memmove@plt>
   155f0:	str	r7, [r4, #52]	; 0x34
   155f4:	ldr	r3, [r8, #24]
   155f8:	str	r3, [r4, #28]
   155fc:	str	r3, [r4, #24]
   15600:	mov	r0, r8
   15604:	bl	13be0 <__assert_fail@plt+0x2910>
   15608:	b	15678 <__assert_fail@plt+0x43a8>
   1560c:	ldr	r3, [r8, #48]	; 0x30
   15610:	orr	r3, r3, #8192	; 0x2000
   15614:	str	r3, [r8, #48]	; 0x30
   15618:	mov	r4, #0
   1561c:	b	15578 <__assert_fail@plt+0x42a8>
   15620:	ldrb	r3, [r4, #169]	; 0xa9
   15624:	cmp	r3, #0
   15628:	bne	155d0 <__assert_fail@plt+0x4300>
   1562c:	b	155f4 <__assert_fail@plt+0x4324>
   15630:	cmp	r3, #2
   15634:	beq	156cc <__assert_fail@plt+0x43fc>
   15638:	ldr	r2, [r8, #24]
   1563c:	ldr	r0, [r4, #4]
   15640:	ldr	r1, [r0, #40]	; 0x28
   15644:	sub	r3, r1, #1
   15648:	ldr	r0, [r0, #28]
   1564c:	ldrb	r0, [r0, r3]
   15650:	cmp	r0, #47	; 0x2f
   15654:	movne	r3, r1
   15658:	add	r0, r2, r3
   1565c:	mov	r1, #47	; 0x2f
   15660:	strb	r1, [r2, r3]
   15664:	ldr	r2, [r4, #52]	; 0x34
   15668:	add	r2, r2, #1
   1566c:	add	r1, r4, #168	; 0xa8
   15670:	add	r0, r0, #1
   15674:	bl	11000 <memmove@plt>
   15678:	str	r4, [r8]
   1567c:	ldrh	r3, [r4, #56]	; 0x38
   15680:	cmp	r3, #11
   15684:	beq	15740 <__assert_fail@plt+0x4470>
   15688:	ldrh	r3, [r4, #56]	; 0x38
   1568c:	cmp	r3, #1
   15690:	bne	15578 <__assert_fail@plt+0x42a8>
   15694:	ldr	r3, [r4, #48]	; 0x30
   15698:	cmp	r3, #0
   1569c:	ldrdeq	r2, [r4, #64]	; 0x40
   156a0:	strdeq	r2, [r8, #16]
   156a4:	mov	r1, r4
   156a8:	mov	r0, r8
   156ac:	bl	13e80 <__assert_fail@plt+0x2bb0>
   156b0:	cmp	r0, #0
   156b4:	bne	15578 <__assert_fail@plt+0x42a8>
   156b8:	bl	11180 <__errno_location@plt>
   156bc:	mov	r3, #12
   156c0:	str	r3, [r0]
   156c4:	mov	r4, #0
   156c8:	b	15578 <__assert_fail@plt+0x42a8>
   156cc:	mov	r2, #1
   156d0:	mov	r1, r4
   156d4:	mov	r0, r8
   156d8:	bl	13940 <__assert_fail@plt+0x2670>
   156dc:	strh	r0, [r4, #56]	; 0x38
   156e0:	cmp	r0, #1
   156e4:	beq	156f4 <__assert_fail@plt+0x4424>
   156e8:	mov	r3, #3
   156ec:	strh	r3, [r4, #60]	; 0x3c
   156f0:	b	15638 <__assert_fail@plt+0x4368>
   156f4:	ldr	r3, [r8, #48]	; 0x30
   156f8:	tst	r3, #4
   156fc:	bne	156e8 <__assert_fail@plt+0x4418>
   15700:	ldr	r1, [pc, #320]	; 15848 <__assert_fail@plt+0x4578>
   15704:	mov	r0, r8
   15708:	bl	13c64 <__assert_fail@plt+0x2994>
   1570c:	str	r0, [r4, #36]	; 0x24
   15710:	cmp	r0, #0
   15714:	bge	15730 <__assert_fail@plt+0x4460>
   15718:	bl	11180 <__errno_location@plt>
   1571c:	ldr	r3, [r0]
   15720:	str	r3, [r4, #32]
   15724:	mov	r3, #7
   15728:	strh	r3, [r4, #56]	; 0x38
   1572c:	b	156e8 <__assert_fail@plt+0x4418>
   15730:	ldrh	r3, [r4, #58]	; 0x3a
   15734:	orr	r3, r3, #2
   15738:	strh	r3, [r4, #58]	; 0x3a
   1573c:	b	156e8 <__assert_fail@plt+0x4418>
   15740:	ldrd	r2, [r4, #112]	; 0x70
   15744:	cmp	r3, #0
   15748:	cmpeq	r2, #2
   1574c:	beq	15760 <__assert_fail@plt+0x4490>
   15750:	cmp	r3, #0
   15754:	cmpeq	r2, #1
   15758:	beq	15578 <__assert_fail@plt+0x42a8>
   1575c:	bl	11294 <abort@plt>
   15760:	mov	r2, #0
   15764:	mov	r1, r4
   15768:	mov	r0, r8
   1576c:	bl	13940 <__assert_fail@plt+0x2670>
   15770:	strh	r0, [r4, #56]	; 0x38
   15774:	b	15688 <__assert_fail@plt+0x43b8>
   15778:	mov	r0, r4
   1577c:	bl	136fc <__assert_fail@plt+0x242c>
   15780:	bl	11180 <__errno_location@plt>
   15784:	mov	r4, #0
   15788:	str	r4, [r0]
   1578c:	str	r4, [r8]
   15790:	b	15578 <__assert_fail@plt+0x42a8>
   15794:	bl	11294 <abort@plt>
   15798:	mov	r0, r8
   1579c:	bl	13fcc <__assert_fail@plt+0x2cfc>
   157a0:	cmp	r0, #0
   157a4:	beq	15534 <__assert_fail@plt+0x4264>
   157a8:	bl	11180 <__errno_location@plt>
   157ac:	ldr	r3, [r0]
   157b0:	str	r3, [r4, #32]
   157b4:	ldr	r3, [r8, #48]	; 0x30
   157b8:	orr	r3, r3, #8192	; 0x2000
   157bc:	str	r3, [r8, #48]	; 0x30
   157c0:	b	15534 <__assert_fail@plt+0x4264>
   157c4:	ldr	r0, [r4, #36]	; 0x24
   157c8:	bl	1124c <fchdir@plt>
   157cc:	cmp	r0, #0
   157d0:	beq	1552c <__assert_fail@plt+0x425c>
   157d4:	bl	11180 <__errno_location@plt>
   157d8:	ldr	r3, [r0]
   157dc:	str	r3, [r4, #32]
   157e0:	ldr	r3, [r8, #48]	; 0x30
   157e4:	orr	r3, r3, #8192	; 0x2000
   157e8:	str	r3, [r8, #48]	; 0x30
   157ec:	b	1552c <__assert_fail@plt+0x425c>
   157f0:	tst	r3, #1
   157f4:	bne	15534 <__assert_fail@plt+0x4264>
   157f8:	ldr	r3, [pc, #76]	; 1584c <__assert_fail@plt+0x457c>
   157fc:	mvn	r2, #0
   15800:	ldr	r1, [r4, #4]
   15804:	mov	r0, r8
   15808:	bl	1401c <__assert_fail@plt+0x2d4c>
   1580c:	cmp	r0, #0
   15810:	beq	15534 <__assert_fail@plt+0x4264>
   15814:	bl	11180 <__errno_location@plt>
   15818:	ldr	r3, [r0]
   1581c:	str	r3, [r4, #32]
   15820:	ldr	r3, [r8, #48]	; 0x30
   15824:	orr	r3, r3, #8192	; 0x2000
   15828:	str	r3, [r8, #48]	; 0x30
   1582c:	b	15534 <__assert_fail@plt+0x4264>
   15830:	mov	r4, #0
   15834:	b	15578 <__assert_fail@plt+0x42a8>
   15838:	mov	r4, #0
   1583c:	b	15578 <__assert_fail@plt+0x42a8>
   15840:	mov	r4, #0
   15844:	b	15578 <__assert_fail@plt+0x42a8>
   15848:	muleq	r1, ip, lr
   1584c:	andeq	sl, r1, r0, lsr #29
   15850:	cmp	r2, #4
   15854:	bhi	15864 <__assert_fail@plt+0x4594>
   15858:	strh	r2, [r1, #60]	; 0x3c
   1585c:	mov	r0, #0
   15860:	bx	lr
   15864:	push	{r4, lr}
   15868:	bl	11180 <__errno_location@plt>
   1586c:	mov	r3, #22
   15870:	str	r3, [r0]
   15874:	mov	r0, #1
   15878:	pop	{r4, pc}
   1587c:	push	{r4, r5, r6, r7, r8, lr}
   15880:	bics	r3, r1, #4096	; 0x1000
   15884:	bne	15928 <__assert_fail@plt+0x4658>
   15888:	mov	r4, r0
   1588c:	mov	r6, r1
   15890:	ldr	r5, [r0]
   15894:	bl	11180 <__errno_location@plt>
   15898:	mov	r7, r0
   1589c:	mov	r3, #0
   158a0:	str	r3, [r0]
   158a4:	ldr	r3, [r4, #48]	; 0x30
   158a8:	tst	r3, #8192	; 0x2000
   158ac:	bne	159cc <__assert_fail@plt+0x46fc>
   158b0:	ldrh	r3, [r5, #56]	; 0x38
   158b4:	cmp	r3, #9
   158b8:	beq	1593c <__assert_fail@plt+0x466c>
   158bc:	cmp	r3, #1
   158c0:	bne	159d4 <__assert_fail@plt+0x4704>
   158c4:	ldr	r0, [r4, #4]
   158c8:	cmp	r0, #0
   158cc:	beq	158d4 <__assert_fail@plt+0x4604>
   158d0:	bl	13cb4 <__assert_fail@plt+0x29e4>
   158d4:	cmp	r6, #4096	; 0x1000
   158d8:	ldreq	r3, [r4, #48]	; 0x30
   158dc:	orreq	r3, r3, #4096	; 0x1000
   158e0:	streq	r3, [r4, #48]	; 0x30
   158e4:	moveq	r6, #2
   158e8:	movne	r6, #1
   158ec:	ldr	r3, [r5, #48]	; 0x30
   158f0:	cmp	r3, #0
   158f4:	bne	15914 <__assert_fail@plt+0x4644>
   158f8:	ldr	r3, [r5, #24]
   158fc:	ldrb	r3, [r3]
   15900:	cmp	r3, #47	; 0x2f
   15904:	beq	15914 <__assert_fail@plt+0x4644>
   15908:	ldr	r3, [r4, #48]	; 0x30
   1590c:	tst	r3, #4
   15910:	beq	15944 <__assert_fail@plt+0x4674>
   15914:	mov	r1, r6
   15918:	mov	r0, r4
   1591c:	bl	142c8 <__assert_fail@plt+0x2ff8>
   15920:	str	r0, [r4, #4]
   15924:	pop	{r4, r5, r6, r7, r8, pc}
   15928:	bl	11180 <__errno_location@plt>
   1592c:	mov	r3, #22
   15930:	str	r3, [r0]
   15934:	mov	r0, #0
   15938:	pop	{r4, r5, r6, r7, r8, pc}
   1593c:	ldr	r0, [r5, #8]
   15940:	pop	{r4, r5, r6, r7, r8, pc}
   15944:	ldr	r1, [pc, #144]	; 159dc <__assert_fail@plt+0x470c>
   15948:	mov	r0, r4
   1594c:	bl	13c64 <__assert_fail@plt+0x2994>
   15950:	subs	r5, r0, #0
   15954:	blt	1598c <__assert_fail@plt+0x46bc>
   15958:	mov	r1, r6
   1595c:	mov	r0, r4
   15960:	bl	142c8 <__assert_fail@plt+0x2ff8>
   15964:	str	r0, [r4, #4]
   15968:	ldr	r3, [r4, #48]	; 0x30
   1596c:	tst	r3, #512	; 0x200
   15970:	beq	15998 <__assert_fail@plt+0x46c8>
   15974:	mov	r2, #1
   15978:	mov	r1, r5
   1597c:	mov	r0, r4
   15980:	bl	13f4c <__assert_fail@plt+0x2c7c>
   15984:	ldr	r0, [r4, #4]
   15988:	pop	{r4, r5, r6, r7, r8, pc}
   1598c:	mov	r0, #0
   15990:	str	r0, [r4, #4]
   15994:	pop	{r4, r5, r6, r7, r8, pc}
   15998:	mov	r0, r5
   1599c:	bl	1124c <fchdir@plt>
   159a0:	cmp	r0, #0
   159a4:	bne	159b4 <__assert_fail@plt+0x46e4>
   159a8:	mov	r0, r5
   159ac:	bl	112a0 <close@plt>
   159b0:	b	15984 <__assert_fail@plt+0x46b4>
   159b4:	ldr	r4, [r7]
   159b8:	mov	r0, r5
   159bc:	bl	112a0 <close@plt>
   159c0:	str	r4, [r7]
   159c4:	mov	r0, #0
   159c8:	pop	{r4, r5, r6, r7, r8, pc}
   159cc:	mov	r0, #0
   159d0:	pop	{r4, r5, r6, r7, r8, pc}
   159d4:	mov	r0, #0
   159d8:	pop	{r4, r5, r6, r7, r8, pc}
   159dc:	muleq	r1, ip, lr
   159e0:	push	{r4, lr}
   159e4:	ror	r0, r0, #3
   159e8:	bl	19cac <__assert_fail@plt+0x89dc>
   159ec:	mov	r0, r1
   159f0:	pop	{r4, pc}
   159f4:	cmp	r1, r0
   159f8:	movne	r0, #0
   159fc:	moveq	r0, #1
   15a00:	bx	lr
   15a04:	ldr	r3, [r0, #20]
   15a08:	ldr	r2, [pc, #176]	; 15ac0 <__assert_fail@plt+0x47f0>
   15a0c:	cmp	r3, r2
   15a10:	beq	15aa8 <__assert_fail@plt+0x47d8>
   15a14:	vldr	s15, [r3, #8]
   15a18:	vldr	s14, [pc, #144]	; 15ab0 <__assert_fail@plt+0x47e0>
   15a1c:	vcmpe.f32	s15, s14
   15a20:	vmrs	APSR_nzcv, fpscr
   15a24:	ble	15a84 <__assert_fail@plt+0x47b4>
   15a28:	vldr	s14, [pc, #132]	; 15ab4 <__assert_fail@plt+0x47e4>
   15a2c:	vcmpe.f32	s15, s14
   15a30:	vmrs	APSR_nzcv, fpscr
   15a34:	bpl	15a84 <__assert_fail@plt+0x47b4>
   15a38:	vldr	s13, [r3, #12]
   15a3c:	vldr	s14, [pc, #116]	; 15ab8 <__assert_fail@plt+0x47e8>
   15a40:	vcmpe.f32	s13, s14
   15a44:	vmrs	APSR_nzcv, fpscr
   15a48:	ble	15a84 <__assert_fail@plt+0x47b4>
   15a4c:	vldr	s14, [r3]
   15a50:	vcmpe.f32	s14, #0.0
   15a54:	vmrs	APSR_nzcv, fpscr
   15a58:	blt	15a84 <__assert_fail@plt+0x47b4>
   15a5c:	vldr	s13, [pc, #76]	; 15ab0 <__assert_fail@plt+0x47e0>
   15a60:	vadd.f32	s14, s14, s13
   15a64:	vldr	s13, [r3, #4]
   15a68:	vcmpe.f32	s14, s13
   15a6c:	vmrs	APSR_nzcv, fpscr
   15a70:	bpl	15a84 <__assert_fail@plt+0x47b4>
   15a74:	vldr	s12, [pc, #64]	; 15abc <__assert_fail@plt+0x47ec>
   15a78:	vcmpe.f32	s13, s12
   15a7c:	vmrs	APSR_nzcv, fpscr
   15a80:	bls	15a94 <__assert_fail@plt+0x47c4>
   15a84:	ldr	r3, [pc, #52]	; 15ac0 <__assert_fail@plt+0x47f0>
   15a88:	str	r3, [r0, #20]
   15a8c:	mov	r0, #0
   15a90:	bx	lr
   15a94:	vcmpe.f32	s15, s14
   15a98:	vmrs	APSR_nzcv, fpscr
   15a9c:	ble	15a84 <__assert_fail@plt+0x47b4>
   15aa0:	mov	r0, #1
   15aa4:	bx	lr
   15aa8:	mov	r0, #1
   15aac:	bx	lr
   15ab0:	stclcc	12, cr12, [ip, #820]	; 0x334
   15ab4:	svccc	0x00666666
   15ab8:	svccc	0x008ccccd
   15abc:	svccc	0x00800000
   15ac0:	andeq	fp, r1, ip, lsr r2
   15ac4:	push	{r4, lr}
   15ac8:	mov	r4, r0
   15acc:	mov	r0, r1
   15ad0:	ldr	r3, [r4, #24]
   15ad4:	ldr	r1, [r4, #8]
   15ad8:	blx	r3
   15adc:	ldr	r3, [r4, #8]
   15ae0:	cmp	r0, r3
   15ae4:	bcs	15af4 <__assert_fail@plt+0x4824>
   15ae8:	ldr	r3, [r4]
   15aec:	add	r0, r3, r0, lsl #3
   15af0:	pop	{r4, pc}
   15af4:	bl	11294 <abort@plt>
   15af8:	push	{r4, r5, r6, r7, r8, lr}
   15afc:	ldrb	r3, [r1, #16]
   15b00:	cmp	r3, #0
   15b04:	bne	15b34 <__assert_fail@plt+0x4864>
   15b08:	vmov	s15, r0
   15b0c:	vcvt.f32.u32	s13, s15
   15b10:	vldr	s14, [r1, #8]
   15b14:	vdiv.f32	s15, s13, s14
   15b18:	vldr	s14, [pc, #204]	; 15bec <__assert_fail@plt+0x491c>
   15b1c:	vcmpe.f32	s15, s14
   15b20:	vmrs	APSR_nzcv, fpscr
   15b24:	movge	r7, #0
   15b28:	bge	15b6c <__assert_fail@plt+0x489c>
   15b2c:	vcvt.u32.f32	s15, s15
   15b30:	vmov	r0, s15
   15b34:	cmp	r0, #10
   15b38:	movcc	r0, #10
   15b3c:	orr	r7, r0, #1
   15b40:	cmn	r7, #1
   15b44:	ldrne	r8, [pc, #164]	; 15bf0 <__assert_fail@plt+0x4920>
   15b48:	bne	15b98 <__assert_fail@plt+0x48c8>
   15b4c:	lsr	r3, r7, #30
   15b50:	lsl	r2, r7, #2
   15b54:	adds	r3, r3, #0
   15b58:	movne	r3, #1
   15b5c:	cmp	r2, #0
   15b60:	movlt	r3, #1
   15b64:	cmp	r3, #0
   15b68:	movne	r7, #0
   15b6c:	mov	r0, r7
   15b70:	pop	{r4, r5, r6, r7, r8, pc}
   15b74:	mov	r4, #3
   15b78:	mov	r1, r4
   15b7c:	mov	r0, r7
   15b80:	bl	19cac <__assert_fail@plt+0x89dc>
   15b84:	cmp	r1, #0
   15b88:	bne	15b4c <__assert_fail@plt+0x487c>
   15b8c:	add	r7, r7, #2
   15b90:	cmn	r7, #1
   15b94:	beq	15b4c <__assert_fail@plt+0x487c>
   15b98:	cmp	r7, #9
   15b9c:	bls	15b74 <__assert_fail@plt+0x48a4>
   15ba0:	umull	r2, r3, r8, r7
   15ba4:	lsr	r3, r3, #1
   15ba8:	add	r3, r3, r3, lsl #1
   15bac:	cmp	r7, r3
   15bb0:	beq	15b8c <__assert_fail@plt+0x48bc>
   15bb4:	mov	r6, #16
   15bb8:	mov	r5, #9
   15bbc:	mov	r4, #3
   15bc0:	add	r5, r5, r6
   15bc4:	add	r4, r4, #2
   15bc8:	cmp	r5, r7
   15bcc:	bcs	15b78 <__assert_fail@plt+0x48a8>
   15bd0:	add	r6, r6, #8
   15bd4:	mov	r1, r4
   15bd8:	mov	r0, r7
   15bdc:	bl	19cac <__assert_fail@plt+0x89dc>
   15be0:	cmp	r1, #0
   15be4:	bne	15bc0 <__assert_fail@plt+0x48f0>
   15be8:	b	15b8c <__assert_fail@plt+0x48bc>
   15bec:	svcmi	0x00800000
   15bf0:	bge	feac06a4 <optarg@@GLIBC_2.4+0xfea9450c>
   15bf4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bf8:	ldr	r7, [r1]
   15bfc:	ldr	r3, [r1, #4]
   15c00:	cmp	r7, r3
   15c04:	bcs	15d38 <__assert_fail@plt+0x4a68>
   15c08:	mov	fp, r2
   15c0c:	mov	sl, r1
   15c10:	mov	r6, r0
   15c14:	add	r7, r7, #8
   15c18:	mov	r9, #0
   15c1c:	b	15c84 <__assert_fail@plt+0x49b4>
   15c20:	str	r5, [r0]
   15c24:	ldr	r2, [r6, #12]
   15c28:	add	r2, r2, #1
   15c2c:	str	r2, [r6, #12]
   15c30:	str	r9, [r4]
   15c34:	ldr	r2, [r6, #36]	; 0x24
   15c38:	str	r2, [r4, #4]
   15c3c:	str	r4, [r6, #36]	; 0x24
   15c40:	b	15ccc <__assert_fail@plt+0x49fc>
   15c44:	mov	r0, #8
   15c48:	bl	193b0 <__assert_fail@plt+0x80e0>
   15c4c:	cmp	r0, #0
   15c50:	beq	15d40 <__assert_fail@plt+0x4a70>
   15c54:	str	r4, [r0]
   15c58:	ldr	r3, [r5, #4]
   15c5c:	str	r3, [r0, #4]
   15c60:	str	r0, [r5, #4]
   15c64:	str	r9, [r8, #-8]
   15c68:	ldr	r3, [sl, #12]
   15c6c:	sub	r3, r3, #1
   15c70:	str	r3, [sl, #12]
   15c74:	add	r7, r7, #8
   15c78:	ldr	r3, [sl, #4]
   15c7c:	cmp	r3, r8
   15c80:	bls	15d30 <__assert_fail@plt+0x4a60>
   15c84:	mov	r8, r7
   15c88:	ldr	r3, [r7, #-8]
   15c8c:	cmp	r3, #0
   15c90:	beq	15c74 <__assert_fail@plt+0x49a4>
   15c94:	ldr	r4, [r7, #-4]
   15c98:	cmp	r4, #0
   15c9c:	beq	15cd8 <__assert_fail@plt+0x4a08>
   15ca0:	ldr	r5, [r4]
   15ca4:	mov	r1, r5
   15ca8:	mov	r0, r6
   15cac:	bl	15ac4 <__assert_fail@plt+0x47f4>
   15cb0:	ldr	r3, [r4, #4]
   15cb4:	ldr	r2, [r0]
   15cb8:	cmp	r2, #0
   15cbc:	beq	15c20 <__assert_fail@plt+0x4950>
   15cc0:	ldr	r2, [r0, #4]
   15cc4:	str	r2, [r4, #4]
   15cc8:	str	r4, [r0, #4]
   15ccc:	mov	r4, r3
   15cd0:	cmp	r3, #0
   15cd4:	bne	15ca0 <__assert_fail@plt+0x49d0>
   15cd8:	ldr	r4, [r8, #-8]
   15cdc:	str	r9, [r8, #-4]
   15ce0:	cmp	fp, #0
   15ce4:	bne	15c74 <__assert_fail@plt+0x49a4>
   15ce8:	mov	r1, r4
   15cec:	mov	r0, r6
   15cf0:	bl	15ac4 <__assert_fail@plt+0x47f4>
   15cf4:	mov	r5, r0
   15cf8:	ldr	r3, [r0]
   15cfc:	cmp	r3, #0
   15d00:	beq	15d1c <__assert_fail@plt+0x4a4c>
   15d04:	ldr	r0, [r6, #36]	; 0x24
   15d08:	cmp	r0, #0
   15d0c:	beq	15c44 <__assert_fail@plt+0x4974>
   15d10:	ldr	r3, [r0, #4]
   15d14:	str	r3, [r6, #36]	; 0x24
   15d18:	b	15c54 <__assert_fail@plt+0x4984>
   15d1c:	str	r4, [r0]
   15d20:	ldr	r3, [r6, #12]
   15d24:	add	r3, r3, #1
   15d28:	str	r3, [r6, #12]
   15d2c:	b	15c64 <__assert_fail@plt+0x4994>
   15d30:	mov	r0, #1
   15d34:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d38:	mov	r0, #1
   15d3c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d40:	mov	r0, fp
   15d44:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d48:	push	{r4, r5, r6, r7, r8, lr}
   15d4c:	mov	r6, r0
   15d50:	mov	r5, r1
   15d54:	mov	r8, r2
   15d58:	mov	r7, r3
   15d5c:	bl	15ac4 <__assert_fail@plt+0x47f4>
   15d60:	str	r0, [r8]
   15d64:	ldr	r3, [r0]
   15d68:	cmp	r3, #0
   15d6c:	beq	15e44 <__assert_fail@plt+0x4b74>
   15d70:	mov	r4, r0
   15d74:	cmp	r5, r3
   15d78:	beq	15e0c <__assert_fail@plt+0x4b3c>
   15d7c:	ldr	r2, [r6, #28]
   15d80:	mov	r1, r3
   15d84:	mov	r0, r5
   15d88:	blx	r2
   15d8c:	cmp	r0, #0
   15d90:	bne	15e0c <__assert_fail@plt+0x4b3c>
   15d94:	ldr	r3, [r4, #4]
   15d98:	cmp	r3, #0
   15d9c:	beq	15e4c <__assert_fail@plt+0x4b7c>
   15da0:	ldr	r1, [r3]
   15da4:	cmp	r5, r1
   15da8:	beq	15ddc <__assert_fail@plt+0x4b0c>
   15dac:	ldr	r3, [r6, #28]
   15db0:	mov	r0, r5
   15db4:	blx	r3
   15db8:	cmp	r0, #0
   15dbc:	bne	15ddc <__assert_fail@plt+0x4b0c>
   15dc0:	ldr	r4, [r4, #4]
   15dc4:	ldr	r3, [r4, #4]
   15dc8:	cmp	r3, #0
   15dcc:	beq	15e44 <__assert_fail@plt+0x4b74>
   15dd0:	ldr	r1, [r3]
   15dd4:	cmp	r5, r1
   15dd8:	bne	15dac <__assert_fail@plt+0x4adc>
   15ddc:	ldr	r2, [r4, #4]
   15de0:	ldr	r3, [r2]
   15de4:	cmp	r7, #0
   15de8:	beq	15e44 <__assert_fail@plt+0x4b74>
   15dec:	ldr	r1, [r2, #4]
   15df0:	str	r1, [r4, #4]
   15df4:	mov	r1, #0
   15df8:	str	r1, [r2]
   15dfc:	ldr	r1, [r6, #36]	; 0x24
   15e00:	str	r1, [r2, #4]
   15e04:	str	r2, [r6, #36]	; 0x24
   15e08:	b	15e44 <__assert_fail@plt+0x4b74>
   15e0c:	ldr	r3, [r4]
   15e10:	cmp	r7, #0
   15e14:	beq	15e44 <__assert_fail@plt+0x4b74>
   15e18:	ldr	r2, [r4, #4]
   15e1c:	cmp	r2, #0
   15e20:	ldmne	r2, {r0, r1}
   15e24:	stmne	r4, {r0, r1}
   15e28:	movne	r1, #0
   15e2c:	strne	r1, [r2]
   15e30:	ldrne	r1, [r6, #36]	; 0x24
   15e34:	strne	r1, [r2, #4]
   15e38:	strne	r2, [r6, #36]	; 0x24
   15e3c:	moveq	r2, #0
   15e40:	streq	r2, [r4]
   15e44:	mov	r0, r3
   15e48:	pop	{r4, r5, r6, r7, r8, pc}
   15e4c:	mov	r3, #0
   15e50:	b	15e44 <__assert_fail@plt+0x4b74>
   15e54:	ldr	r0, [r0, #8]
   15e58:	bx	lr
   15e5c:	ldr	r0, [r0, #12]
   15e60:	bx	lr
   15e64:	ldr	r0, [r0, #16]
   15e68:	bx	lr
   15e6c:	ldr	r1, [r0]
   15e70:	ldr	ip, [r0, #4]
   15e74:	cmp	r1, ip
   15e78:	bcs	15ed0 <__assert_fail@plt+0x4c00>
   15e7c:	mov	r0, #0
   15e80:	b	15e9c <__assert_fail@plt+0x4bcc>
   15e84:	mov	r2, #1
   15e88:	cmp	r0, r2
   15e8c:	movcc	r0, r2
   15e90:	add	r1, r1, #8
   15e94:	cmp	r1, ip
   15e98:	bcs	15ecc <__assert_fail@plt+0x4bfc>
   15e9c:	ldr	r3, [r1]
   15ea0:	cmp	r3, #0
   15ea4:	beq	15e90 <__assert_fail@plt+0x4bc0>
   15ea8:	ldr	r3, [r1, #4]
   15eac:	cmp	r3, #0
   15eb0:	beq	15e84 <__assert_fail@plt+0x4bb4>
   15eb4:	mov	r2, #1
   15eb8:	add	r2, r2, #1
   15ebc:	ldr	r3, [r3, #4]
   15ec0:	cmp	r3, #0
   15ec4:	bne	15eb8 <__assert_fail@plt+0x4be8>
   15ec8:	b	15e88 <__assert_fail@plt+0x4bb8>
   15ecc:	bx	lr
   15ed0:	mov	r0, #0
   15ed4:	bx	lr
   15ed8:	push	{lr}		; (str lr, [sp, #-4]!)
   15edc:	ldr	r1, [r0]
   15ee0:	ldr	lr, [r0, #4]
   15ee4:	cmp	r1, lr
   15ee8:	bcs	15f38 <__assert_fail@plt+0x4c68>
   15eec:	mov	r2, #0
   15ef0:	mov	ip, r2
   15ef4:	b	15f04 <__assert_fail@plt+0x4c34>
   15ef8:	add	r1, r1, #8
   15efc:	cmp	r1, lr
   15f00:	bcs	15f40 <__assert_fail@plt+0x4c70>
   15f04:	ldr	r3, [r1]
   15f08:	cmp	r3, #0
   15f0c:	beq	15ef8 <__assert_fail@plt+0x4c28>
   15f10:	add	ip, ip, #1
   15f14:	add	r2, r2, #1
   15f18:	ldr	r3, [r1, #4]
   15f1c:	cmp	r3, #0
   15f20:	beq	15ef8 <__assert_fail@plt+0x4c28>
   15f24:	add	r2, r2, #1
   15f28:	ldr	r3, [r3, #4]
   15f2c:	cmp	r3, #0
   15f30:	bne	15f24 <__assert_fail@plt+0x4c54>
   15f34:	b	15ef8 <__assert_fail@plt+0x4c28>
   15f38:	mov	r2, #0
   15f3c:	mov	ip, r2
   15f40:	ldr	r3, [r0, #12]
   15f44:	cmp	r3, ip
   15f48:	beq	15f54 <__assert_fail@plt+0x4c84>
   15f4c:	mov	r0, #0
   15f50:	pop	{pc}		; (ldr pc, [sp], #4)
   15f54:	ldr	r0, [r0, #16]
   15f58:	cmp	r0, r2
   15f5c:	movne	r0, #0
   15f60:	moveq	r0, #1
   15f64:	pop	{pc}		; (ldr pc, [sp], #4)
   15f68:	push	{r4, r5, r6, r7, r8, lr}
   15f6c:	sub	sp, sp, #8
   15f70:	mov	r6, r0
   15f74:	mov	r4, r1
   15f78:	ldr	r5, [r0, #8]
   15f7c:	ldr	r7, [r0, #12]
   15f80:	bl	15e6c <__assert_fail@plt+0x4b9c>
   15f84:	mov	r8, r0
   15f88:	ldr	r3, [r6, #16]
   15f8c:	ldr	r2, [pc, #116]	; 16008 <__assert_fail@plt+0x4d38>
   15f90:	mov	r1, #1
   15f94:	mov	r0, r4
   15f98:	bl	111bc <__fprintf_chk@plt>
   15f9c:	mov	r3, r5
   15fa0:	ldr	r2, [pc, #100]	; 1600c <__assert_fail@plt+0x4d3c>
   15fa4:	mov	r1, #1
   15fa8:	mov	r0, r4
   15fac:	bl	111bc <__fprintf_chk@plt>
   15fb0:	vmov	s15, r7
   15fb4:	vcvt.f64.u32	d6, s15
   15fb8:	vldr	d7, [pc, #64]	; 16000 <__assert_fail@plt+0x4d30>
   15fbc:	vmul.f64	d6, d6, d7
   15fc0:	vmov	s15, r5
   15fc4:	vcvt.f64.u32	d7, s15
   15fc8:	vdiv.f64	d5, d6, d7
   15fcc:	vstr	d5, [sp]
   15fd0:	mov	r3, r7
   15fd4:	ldr	r2, [pc, #52]	; 16010 <__assert_fail@plt+0x4d40>
   15fd8:	mov	r1, #1
   15fdc:	mov	r0, r4
   15fe0:	bl	111bc <__fprintf_chk@plt>
   15fe4:	mov	r3, r8
   15fe8:	ldr	r2, [pc, #36]	; 16014 <__assert_fail@plt+0x4d44>
   15fec:	mov	r1, #1
   15ff0:	mov	r0, r4
   15ff4:	bl	111bc <__fprintf_chk@plt>
   15ff8:	add	sp, sp, #8
   15ffc:	pop	{r4, r5, r6, r7, r8, pc}
   16000:	andeq	r0, r0, r0
   16004:	subsmi	r0, r9, r0
   16008:	andeq	fp, r1, r0, asr r2
   1600c:	andeq	fp, r1, r8, ror #4
   16010:	andeq	fp, r1, r0, lsl #5
   16014:	andeq	fp, r1, r4, lsr #5
   16018:	push	{r4, r5, r6, lr}
   1601c:	mov	r6, r0
   16020:	mov	r5, r1
   16024:	bl	15ac4 <__assert_fail@plt+0x47f4>
   16028:	ldr	r1, [r0]
   1602c:	cmp	r1, #0
   16030:	beq	16084 <__assert_fail@plt+0x4db4>
   16034:	mov	r4, r0
   16038:	cmp	r0, #0
   1603c:	beq	1608c <__assert_fail@plt+0x4dbc>
   16040:	cmp	r5, r1
   16044:	beq	16074 <__assert_fail@plt+0x4da4>
   16048:	ldr	r3, [r6, #28]
   1604c:	mov	r0, r5
   16050:	blx	r3
   16054:	cmp	r0, #0
   16058:	bne	16074 <__assert_fail@plt+0x4da4>
   1605c:	ldr	r4, [r4, #4]
   16060:	cmp	r4, #0
   16064:	beq	1607c <__assert_fail@plt+0x4dac>
   16068:	ldr	r1, [r4]
   1606c:	cmp	r5, r1
   16070:	bne	16048 <__assert_fail@plt+0x4d78>
   16074:	ldr	r0, [r4]
   16078:	pop	{r4, r5, r6, pc}
   1607c:	mov	r0, #0
   16080:	pop	{r4, r5, r6, pc}
   16084:	mov	r0, #0
   16088:	pop	{r4, r5, r6, pc}
   1608c:	mov	r0, #0
   16090:	pop	{r4, r5, r6, pc}
   16094:	ldr	r3, [r0, #16]
   16098:	cmp	r3, #0
   1609c:	beq	160e0 <__assert_fail@plt+0x4e10>
   160a0:	ldr	r3, [r0]
   160a4:	ldr	r2, [r0, #4]
   160a8:	cmp	r3, r2
   160ac:	bcs	160d8 <__assert_fail@plt+0x4e08>
   160b0:	ldr	r0, [r3]
   160b4:	cmp	r0, #0
   160b8:	bne	160d4 <__assert_fail@plt+0x4e04>
   160bc:	add	r3, r3, #8
   160c0:	cmp	r3, r2
   160c4:	bcs	160d8 <__assert_fail@plt+0x4e08>
   160c8:	ldr	r0, [r3]
   160cc:	cmp	r0, #0
   160d0:	beq	160bc <__assert_fail@plt+0x4dec>
   160d4:	bx	lr
   160d8:	push	{r4, lr}
   160dc:	bl	11294 <abort@plt>
   160e0:	mov	r0, #0
   160e4:	b	160d4 <__assert_fail@plt+0x4e04>
   160e8:	push	{r4, r5, r6, lr}
   160ec:	mov	r5, r0
   160f0:	mov	r4, r1
   160f4:	bl	15ac4 <__assert_fail@plt+0x47f4>
   160f8:	mov	r2, r0
   160fc:	mov	r3, r0
   16100:	ldr	r1, [r3]
   16104:	cmp	r4, r1
   16108:	beq	1611c <__assert_fail@plt+0x4e4c>
   1610c:	ldr	r3, [r3, #4]
   16110:	cmp	r3, #0
   16114:	bne	16100 <__assert_fail@plt+0x4e30>
   16118:	b	16128 <__assert_fail@plt+0x4e58>
   1611c:	ldr	r3, [r3, #4]
   16120:	cmp	r3, #0
   16124:	bne	16148 <__assert_fail@plt+0x4e78>
   16128:	ldr	r3, [r5, #4]
   1612c:	add	r2, r2, #8
   16130:	cmp	r2, r3
   16134:	bcs	16150 <__assert_fail@plt+0x4e80>
   16138:	ldr	r0, [r2]
   1613c:	cmp	r0, #0
   16140:	beq	1612c <__assert_fail@plt+0x4e5c>
   16144:	pop	{r4, r5, r6, pc}
   16148:	ldr	r0, [r3]
   1614c:	pop	{r4, r5, r6, pc}
   16150:	mov	r0, #0
   16154:	pop	{r4, r5, r6, pc}
   16158:	push	{r4, r5, lr}
   1615c:	ldr	r4, [r0]
   16160:	ldr	r3, [r0, #4]
   16164:	cmp	r4, r3
   16168:	bcs	161d4 <__assert_fail@plt+0x4f04>
   1616c:	mov	r5, r0
   16170:	mov	r0, #0
   16174:	b	16188 <__assert_fail@plt+0x4eb8>
   16178:	add	r4, r4, #8
   1617c:	ldr	r3, [r5, #4]
   16180:	cmp	r3, r4
   16184:	bls	161d0 <__assert_fail@plt+0x4f00>
   16188:	ldr	r3, [r4]
   1618c:	cmp	r3, #0
   16190:	beq	16178 <__assert_fail@plt+0x4ea8>
   16194:	cmp	r4, #0
   16198:	beq	16178 <__assert_fail@plt+0x4ea8>
   1619c:	cmp	r2, r0
   161a0:	popls	{r4, r5, pc}
   161a4:	add	ip, r1, r0, lsl #2
   161a8:	mov	r3, r4
   161ac:	add	r0, r0, #1
   161b0:	ldr	lr, [r3]
   161b4:	str	lr, [ip], #4
   161b8:	ldr	r3, [r3, #4]
   161bc:	cmp	r3, #0
   161c0:	beq	16178 <__assert_fail@plt+0x4ea8>
   161c4:	cmp	r2, r0
   161c8:	bne	161ac <__assert_fail@plt+0x4edc>
   161cc:	pop	{r4, r5, pc}
   161d0:	pop	{r4, r5, pc}
   161d4:	mov	r0, #0
   161d8:	pop	{r4, r5, pc}
   161dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   161e0:	ldr	r8, [r0]
   161e4:	ldr	r3, [r0, #4]
   161e8:	cmp	r8, r3
   161ec:	bcs	16254 <__assert_fail@plt+0x4f84>
   161f0:	mov	r7, r2
   161f4:	mov	r6, r1
   161f8:	mov	r9, r0
   161fc:	mov	r5, #0
   16200:	b	16214 <__assert_fail@plt+0x4f44>
   16204:	add	r8, r8, #8
   16208:	ldr	r3, [r9, #4]
   1620c:	cmp	r3, r8
   16210:	bls	16258 <__assert_fail@plt+0x4f88>
   16214:	ldr	r3, [r8]
   16218:	cmp	r3, #0
   1621c:	beq	16204 <__assert_fail@plt+0x4f34>
   16220:	cmp	r8, #0
   16224:	beq	16204 <__assert_fail@plt+0x4f34>
   16228:	mov	r4, r8
   1622c:	mov	r1, r7
   16230:	ldr	r0, [r4]
   16234:	blx	r6
   16238:	cmp	r0, #0
   1623c:	beq	16258 <__assert_fail@plt+0x4f88>
   16240:	add	r5, r5, #1
   16244:	ldr	r4, [r4, #4]
   16248:	cmp	r4, #0
   1624c:	bne	1622c <__assert_fail@plt+0x4f5c>
   16250:	b	16204 <__assert_fail@plt+0x4f34>
   16254:	mov	r5, #0
   16258:	mov	r0, r5
   1625c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16260:	ldrb	r3, [r0]
   16264:	cmp	r3, #0
   16268:	beq	162a0 <__assert_fail@plt+0x4fd0>
   1626c:	push	{r4, r5, r6, lr}
   16270:	mov	r4, r0
   16274:	mov	r5, r1
   16278:	mov	r1, #0
   1627c:	rsb	r0, r1, r1, lsl #5
   16280:	mov	r1, r5
   16284:	add	r0, r0, r3
   16288:	bl	19cac <__assert_fail@plt+0x89dc>
   1628c:	ldrb	r3, [r4, #1]!
   16290:	cmp	r3, #0
   16294:	bne	1627c <__assert_fail@plt+0x4fac>
   16298:	mov	r0, r1
   1629c:	pop	{r4, r5, r6, pc}
   162a0:	mov	r1, #0
   162a4:	mov	r0, r1
   162a8:	bx	lr
   162ac:	push	{lr}		; (str lr, [sp, #-4]!)
   162b0:	mov	ip, r0
   162b4:	ldr	lr, [pc, #16]	; 162cc <__assert_fail@plt+0x4ffc>
   162b8:	ldm	lr!, {r0, r1, r2, r3}
   162bc:	stmia	ip!, {r0, r1, r2, r3}
   162c0:	ldr	r3, [lr]
   162c4:	str	r3, [ip]
   162c8:	pop	{pc}		; (ldr pc, [sp], #4)
   162cc:	andeq	fp, r1, ip, lsr r2
   162d0:	push	{r4, r5, r6, r7, r8, lr}
   162d4:	mov	r8, r0
   162d8:	mov	r5, r1
   162dc:	subs	r7, r2, #0
   162e0:	ldr	r2, [pc, #180]	; 1639c <__assert_fail@plt+0x50cc>
   162e4:	cmp	r7, #0
   162e8:	moveq	r7, r2
   162ec:	subs	r6, r3, #0
   162f0:	ldr	r3, [pc, #168]	; 163a0 <__assert_fail@plt+0x50d0>
   162f4:	cmp	r6, #0
   162f8:	moveq	r6, r3
   162fc:	mov	r0, #40	; 0x28
   16300:	bl	193b0 <__assert_fail@plt+0x80e0>
   16304:	subs	r4, r0, #0
   16308:	beq	16384 <__assert_fail@plt+0x50b4>
   1630c:	ldr	r3, [pc, #144]	; 163a4 <__assert_fail@plt+0x50d4>
   16310:	cmp	r5, #0
   16314:	moveq	r5, r3
   16318:	str	r5, [r4, #20]
   1631c:	mov	r0, r4
   16320:	bl	15a04 <__assert_fail@plt+0x4734>
   16324:	cmp	r0, #0
   16328:	beq	1638c <__assert_fail@plt+0x50bc>
   1632c:	mov	r1, r5
   16330:	mov	r0, r8
   16334:	bl	15af8 <__assert_fail@plt+0x4828>
   16338:	str	r0, [r4, #8]
   1633c:	cmp	r0, #0
   16340:	beq	1638c <__assert_fail@plt+0x50bc>
   16344:	mov	r1, #8
   16348:	bl	19360 <__assert_fail@plt+0x8090>
   1634c:	str	r0, [r4]
   16350:	cmp	r0, #0
   16354:	beq	1638c <__assert_fail@plt+0x50bc>
   16358:	ldr	r3, [r4, #8]
   1635c:	add	r0, r0, r3, lsl #3
   16360:	str	r0, [r4, #4]
   16364:	mov	r3, #0
   16368:	str	r3, [r4, #12]
   1636c:	str	r3, [r4, #16]
   16370:	str	r7, [r4, #24]
   16374:	str	r6, [r4, #28]
   16378:	ldr	r2, [sp, #24]
   1637c:	str	r2, [r4, #32]
   16380:	str	r3, [r4, #36]	; 0x24
   16384:	mov	r0, r4
   16388:	pop	{r4, r5, r6, r7, r8, pc}
   1638c:	mov	r0, r4
   16390:	bl	136fc <__assert_fail@plt+0x242c>
   16394:	mov	r4, #0
   16398:	b	16384 <__assert_fail@plt+0x50b4>
   1639c:	andeq	r5, r1, r0, ror #19
   163a0:	strdeq	r5, [r1], -r4
   163a4:	andeq	fp, r1, ip, lsr r2
   163a8:	push	{r4, r5, r6, r7, r8, lr}
   163ac:	mov	r5, r0
   163b0:	ldr	r7, [r0]
   163b4:	ldr	r3, [r0, #4]
   163b8:	cmp	r7, r3
   163bc:	bcs	16450 <__assert_fail@plt+0x5180>
   163c0:	add	r7, r7, #8
   163c4:	mov	r6, #0
   163c8:	b	16430 <__assert_fail@plt+0x5160>
   163cc:	str	r6, [r4]
   163d0:	ldr	r3, [r4, #4]
   163d4:	ldr	r2, [r5, #36]	; 0x24
   163d8:	str	r2, [r4, #4]
   163dc:	str	r4, [r5, #36]	; 0x24
   163e0:	mov	r4, r3
   163e4:	cmp	r3, #0
   163e8:	beq	16404 <__assert_fail@plt+0x5134>
   163ec:	ldr	r3, [r5, #32]
   163f0:	cmp	r3, #0
   163f4:	beq	163cc <__assert_fail@plt+0x50fc>
   163f8:	ldr	r0, [r4]
   163fc:	blx	r3
   16400:	b	163cc <__assert_fail@plt+0x50fc>
   16404:	ldr	r3, [r5, #32]
   16408:	cmp	r3, #0
   1640c:	beq	16418 <__assert_fail@plt+0x5148>
   16410:	ldr	r0, [r8, #-8]
   16414:	blx	r3
   16418:	str	r6, [r8, #-8]
   1641c:	str	r6, [r8, #-4]
   16420:	add	r7, r7, #8
   16424:	ldr	r3, [r5, #4]
   16428:	cmp	r3, r8
   1642c:	bls	16450 <__assert_fail@plt+0x5180>
   16430:	mov	r8, r7
   16434:	ldr	r3, [r7, #-8]
   16438:	cmp	r3, #0
   1643c:	beq	16420 <__assert_fail@plt+0x5150>
   16440:	ldr	r4, [r7, #-4]
   16444:	cmp	r4, #0
   16448:	bne	163ec <__assert_fail@plt+0x511c>
   1644c:	b	16404 <__assert_fail@plt+0x5134>
   16450:	mov	r3, #0
   16454:	str	r3, [r5, #12]
   16458:	str	r3, [r5, #16]
   1645c:	pop	{r4, r5, r6, r7, r8, pc}
   16460:	push	{r4, r5, r6, lr}
   16464:	mov	r5, r0
   16468:	ldr	r3, [r0, #32]
   1646c:	cmp	r3, #0
   16470:	beq	164d8 <__assert_fail@plt+0x5208>
   16474:	ldr	r3, [r0, #16]
   16478:	cmp	r3, #0
   1647c:	beq	164d8 <__assert_fail@plt+0x5208>
   16480:	ldr	r6, [r0]
   16484:	ldr	r3, [r0, #4]
   16488:	cmp	r6, r3
   1648c:	bcc	164a4 <__assert_fail@plt+0x51d4>
   16490:	b	16518 <__assert_fail@plt+0x5248>
   16494:	add	r6, r6, #8
   16498:	ldr	r3, [r5, #4]
   1649c:	cmp	r3, r6
   164a0:	bls	164d8 <__assert_fail@plt+0x5208>
   164a4:	ldr	r3, [r6]
   164a8:	cmp	r3, #0
   164ac:	beq	16494 <__assert_fail@plt+0x51c4>
   164b0:	cmp	r6, #0
   164b4:	beq	16494 <__assert_fail@plt+0x51c4>
   164b8:	mov	r4, r6
   164bc:	ldr	r3, [r5, #32]
   164c0:	ldr	r0, [r4]
   164c4:	blx	r3
   164c8:	ldr	r4, [r4, #4]
   164cc:	cmp	r4, #0
   164d0:	bne	164bc <__assert_fail@plt+0x51ec>
   164d4:	b	16494 <__assert_fail@plt+0x51c4>
   164d8:	ldr	r6, [r5]
   164dc:	ldr	r3, [r5, #4]
   164e0:	cmp	r6, r3
   164e4:	bcs	16518 <__assert_fail@plt+0x5248>
   164e8:	ldr	r0, [r6, #4]
   164ec:	cmp	r0, #0
   164f0:	beq	16508 <__assert_fail@plt+0x5238>
   164f4:	ldr	r4, [r0, #4]
   164f8:	bl	136fc <__assert_fail@plt+0x242c>
   164fc:	mov	r0, r4
   16500:	cmp	r4, #0
   16504:	bne	164f4 <__assert_fail@plt+0x5224>
   16508:	add	r6, r6, #8
   1650c:	ldr	r3, [r5, #4]
   16510:	cmp	r3, r6
   16514:	bhi	164e8 <__assert_fail@plt+0x5218>
   16518:	ldr	r0, [r5, #36]	; 0x24
   1651c:	cmp	r0, #0
   16520:	beq	16538 <__assert_fail@plt+0x5268>
   16524:	ldr	r4, [r0, #4]
   16528:	bl	136fc <__assert_fail@plt+0x242c>
   1652c:	mov	r0, r4
   16530:	cmp	r4, #0
   16534:	bne	16524 <__assert_fail@plt+0x5254>
   16538:	ldr	r0, [r5]
   1653c:	bl	136fc <__assert_fail@plt+0x242c>
   16540:	mov	r0, r5
   16544:	bl	136fc <__assert_fail@plt+0x242c>
   16548:	pop	{r4, r5, r6, pc}
   1654c:	push	{r4, r5, lr}
   16550:	sub	sp, sp, #44	; 0x2c
   16554:	mov	r4, r0
   16558:	mov	r0, r1
   1655c:	ldr	r1, [r4, #20]
   16560:	bl	15af8 <__assert_fail@plt+0x4828>
   16564:	subs	r5, r0, #0
   16568:	beq	16660 <__assert_fail@plt+0x5390>
   1656c:	ldr	r3, [r4, #8]
   16570:	cmp	r5, r3
   16574:	beq	16670 <__assert_fail@plt+0x53a0>
   16578:	mov	r1, #8
   1657c:	mov	r0, r5
   16580:	bl	19360 <__assert_fail@plt+0x8090>
   16584:	str	r0, [sp]
   16588:	cmp	r0, #0
   1658c:	beq	16678 <__assert_fail@plt+0x53a8>
   16590:	str	r5, [sp, #8]
   16594:	add	r0, r0, r5, lsl #3
   16598:	str	r0, [sp, #4]
   1659c:	mov	r2, #0
   165a0:	str	r2, [sp, #12]
   165a4:	str	r2, [sp, #16]
   165a8:	ldr	r3, [r4, #20]
   165ac:	str	r3, [sp, #20]
   165b0:	ldr	r3, [r4, #24]
   165b4:	str	r3, [sp, #24]
   165b8:	ldr	r3, [r4, #28]
   165bc:	str	r3, [sp, #28]
   165c0:	ldr	r3, [r4, #32]
   165c4:	str	r3, [sp, #32]
   165c8:	ldr	r3, [r4, #36]	; 0x24
   165cc:	str	r3, [sp, #36]	; 0x24
   165d0:	mov	r1, r4
   165d4:	mov	r0, sp
   165d8:	bl	15bf4 <__assert_fail@plt+0x4924>
   165dc:	subs	r5, r0, #0
   165e0:	bne	16628 <__assert_fail@plt+0x5358>
   165e4:	ldr	r3, [sp, #36]	; 0x24
   165e8:	str	r3, [r4, #36]	; 0x24
   165ec:	mov	r2, #1
   165f0:	mov	r1, sp
   165f4:	mov	r0, r4
   165f8:	bl	15bf4 <__assert_fail@plt+0x4924>
   165fc:	cmp	r0, #0
   16600:	beq	1665c <__assert_fail@plt+0x538c>
   16604:	mov	r2, #0
   16608:	mov	r1, sp
   1660c:	mov	r0, r4
   16610:	bl	15bf4 <__assert_fail@plt+0x4924>
   16614:	cmp	r0, #0
   16618:	beq	1665c <__assert_fail@plt+0x538c>
   1661c:	ldr	r0, [sp]
   16620:	bl	136fc <__assert_fail@plt+0x242c>
   16624:	b	16664 <__assert_fail@plt+0x5394>
   16628:	ldr	r0, [r4]
   1662c:	bl	136fc <__assert_fail@plt+0x242c>
   16630:	ldr	r3, [sp]
   16634:	str	r3, [r4]
   16638:	ldr	r3, [sp, #4]
   1663c:	str	r3, [r4, #4]
   16640:	ldr	r3, [sp, #8]
   16644:	str	r3, [r4, #8]
   16648:	ldr	r3, [sp, #12]
   1664c:	str	r3, [r4, #12]
   16650:	ldr	r3, [sp, #36]	; 0x24
   16654:	str	r3, [r4, #36]	; 0x24
   16658:	b	16664 <__assert_fail@plt+0x5394>
   1665c:	bl	11294 <abort@plt>
   16660:	mov	r5, #0
   16664:	mov	r0, r5
   16668:	add	sp, sp, #44	; 0x2c
   1666c:	pop	{r4, r5, pc}
   16670:	mov	r5, #1
   16674:	b	16664 <__assert_fail@plt+0x5394>
   16678:	mov	r5, #0
   1667c:	b	16664 <__assert_fail@plt+0x5394>
   16680:	push	{r4, r5, r6, lr}
   16684:	sub	sp, sp, #8
   16688:	subs	r6, r1, #0
   1668c:	beq	166c8 <__assert_fail@plt+0x53f8>
   16690:	mov	r4, r0
   16694:	mov	r5, r2
   16698:	mov	r3, #0
   1669c:	add	r2, sp, #4
   166a0:	mov	r1, r6
   166a4:	bl	15d48 <__assert_fail@plt+0x4a78>
   166a8:	cmp	r0, #0
   166ac:	beq	166cc <__assert_fail@plt+0x53fc>
   166b0:	cmp	r5, #0
   166b4:	moveq	r0, #0
   166b8:	strne	r0, [r5]
   166bc:	movne	r0, #0
   166c0:	add	sp, sp, #8
   166c4:	pop	{r4, r5, r6, pc}
   166c8:	bl	11294 <abort@plt>
   166cc:	vldr	s15, [r4, #12]
   166d0:	vcvt.f32.u32	s14, s15
   166d4:	ldr	r3, [r4, #20]
   166d8:	vldr	s15, [r4, #8]
   166dc:	vcvt.f32.u32	s15, s15
   166e0:	vldr	s13, [r3, #8]
   166e4:	vmul.f32	s15, s15, s13
   166e8:	vcmpe.f32	s14, s15
   166ec:	vmrs	APSR_nzcv, fpscr
   166f0:	bgt	16740 <__assert_fail@plt+0x5470>
   166f4:	ldr	r3, [sp, #4]
   166f8:	ldr	r2, [r3]
   166fc:	cmp	r2, #0
   16700:	beq	167e4 <__assert_fail@plt+0x5514>
   16704:	ldr	r0, [r4, #36]	; 0x24
   16708:	cmp	r0, #0
   1670c:	beq	167cc <__assert_fail@plt+0x54fc>
   16710:	ldr	r3, [r0, #4]
   16714:	str	r3, [r4, #36]	; 0x24
   16718:	str	r6, [r0]
   1671c:	ldr	r3, [sp, #4]
   16720:	ldr	r2, [r3, #4]
   16724:	str	r2, [r0, #4]
   16728:	str	r0, [r3, #4]
   1672c:	ldr	r3, [r4, #16]
   16730:	add	r3, r3, #1
   16734:	str	r3, [r4, #16]
   16738:	mov	r0, #1
   1673c:	b	166c0 <__assert_fail@plt+0x53f0>
   16740:	mov	r0, r4
   16744:	bl	15a04 <__assert_fail@plt+0x4734>
   16748:	ldr	r3, [r4, #20]
   1674c:	vldr	s13, [r3, #8]
   16750:	vldr	s15, [r4, #8]
   16754:	vcvt.f32.u32	s15, s15
   16758:	vldr	s14, [r4, #12]
   1675c:	vcvt.f32.u32	s14, s14
   16760:	vmul.f32	s12, s13, s15
   16764:	vcmpe.f32	s14, s12
   16768:	vmrs	APSR_nzcv, fpscr
   1676c:	ble	166f4 <__assert_fail@plt+0x5424>
   16770:	ldrb	r2, [r3, #16]
   16774:	cmp	r2, #0
   16778:	vldr	s14, [r3, #12]
   1677c:	vmul.f32	s15, s15, s14
   16780:	vmuleq.f32	s15, s15, s13
   16784:	vldr	s14, [pc, #140]	; 16818 <__assert_fail@plt+0x5548>
   16788:	vcmpe.f32	s15, s14
   1678c:	vmrs	APSR_nzcv, fpscr
   16790:	bge	16808 <__assert_fail@plt+0x5538>
   16794:	vcvt.u32.f32	s15, s15
   16798:	vmov	r1, s15
   1679c:	mov	r0, r4
   167a0:	bl	1654c <__assert_fail@plt+0x527c>
   167a4:	cmp	r0, #0
   167a8:	beq	16810 <__assert_fail@plt+0x5540>
   167ac:	mov	r3, #0
   167b0:	add	r2, sp, #4
   167b4:	mov	r1, r6
   167b8:	mov	r0, r4
   167bc:	bl	15d48 <__assert_fail@plt+0x4a78>
   167c0:	cmp	r0, #0
   167c4:	beq	166f4 <__assert_fail@plt+0x5424>
   167c8:	bl	11294 <abort@plt>
   167cc:	mov	r0, #8
   167d0:	bl	193b0 <__assert_fail@plt+0x80e0>
   167d4:	cmp	r0, #0
   167d8:	bne	16718 <__assert_fail@plt+0x5448>
   167dc:	mvn	r0, #0
   167e0:	b	166c0 <__assert_fail@plt+0x53f0>
   167e4:	str	r6, [r3]
   167e8:	ldr	r3, [r4, #16]
   167ec:	add	r3, r3, #1
   167f0:	str	r3, [r4, #16]
   167f4:	ldr	r3, [r4, #12]
   167f8:	add	r3, r3, #1
   167fc:	str	r3, [r4, #12]
   16800:	mov	r0, #1
   16804:	b	166c0 <__assert_fail@plt+0x53f0>
   16808:	mvn	r0, #0
   1680c:	b	166c0 <__assert_fail@plt+0x53f0>
   16810:	mvn	r0, #0
   16814:	b	166c0 <__assert_fail@plt+0x53f0>
   16818:	svcmi	0x00800000
   1681c:	push	{r4, lr}
   16820:	sub	sp, sp, #8
   16824:	mov	r4, r1
   16828:	add	r2, sp, #4
   1682c:	bl	16680 <__assert_fail@plt+0x53b0>
   16830:	cmn	r0, #1
   16834:	beq	1684c <__assert_fail@plt+0x557c>
   16838:	cmp	r0, #0
   1683c:	movne	r0, r4
   16840:	ldreq	r0, [sp, #4]
   16844:	add	sp, sp, #8
   16848:	pop	{r4, pc}
   1684c:	mov	r0, #0
   16850:	b	16844 <__assert_fail@plt+0x5574>
   16854:	push	{r4, r5, r6, lr}
   16858:	sub	sp, sp, #8
   1685c:	mov	r4, r0
   16860:	mov	r3, #1
   16864:	add	r2, sp, #4
   16868:	bl	15d48 <__assert_fail@plt+0x4a78>
   1686c:	subs	r5, r0, #0
   16870:	beq	16890 <__assert_fail@plt+0x55c0>
   16874:	ldr	r3, [r4, #16]
   16878:	sub	r3, r3, #1
   1687c:	str	r3, [r4, #16]
   16880:	ldr	r3, [sp, #4]
   16884:	ldr	r3, [r3]
   16888:	cmp	r3, #0
   1688c:	beq	1689c <__assert_fail@plt+0x55cc>
   16890:	mov	r0, r5
   16894:	add	sp, sp, #8
   16898:	pop	{r4, r5, r6, pc}
   1689c:	ldr	r3, [r4, #12]
   168a0:	sub	r3, r3, #1
   168a4:	str	r3, [r4, #12]
   168a8:	vmov	s15, r3
   168ac:	vcvt.f32.u32	s15, s15
   168b0:	ldr	r3, [r4, #20]
   168b4:	vldr	s14, [r4, #8]
   168b8:	vcvt.f32.u32	s14, s14
   168bc:	vldr	s13, [r3]
   168c0:	vmul.f32	s14, s14, s13
   168c4:	vcmpe.f32	s15, s14
   168c8:	vmrs	APSR_nzcv, fpscr
   168cc:	bpl	16890 <__assert_fail@plt+0x55c0>
   168d0:	mov	r0, r4
   168d4:	bl	15a04 <__assert_fail@plt+0x4734>
   168d8:	ldr	r3, [r4, #20]
   168dc:	vldr	s15, [r4, #8]
   168e0:	vcvt.f32.u32	s15, s15
   168e4:	vldr	s14, [r4, #12]
   168e8:	vcvt.f32.u32	s13, s14
   168ec:	vldr	s14, [r3]
   168f0:	vmul.f32	s14, s15, s14
   168f4:	vcmpe.f32	s13, s14
   168f8:	vmrs	APSR_nzcv, fpscr
   168fc:	bpl	16890 <__assert_fail@plt+0x55c0>
   16900:	ldrb	r2, [r3, #16]
   16904:	cmp	r2, #0
   16908:	vldr	s14, [r3, #4]
   1690c:	vmuleq.f32	s15, s15, s14
   16910:	vldreq	s14, [r3, #8]
   16914:	vmul.f32	s15, s15, s14
   16918:	vcvt.u32.f32	s15, s15
   1691c:	vmov	r1, s15
   16920:	mov	r0, r4
   16924:	bl	1654c <__assert_fail@plt+0x527c>
   16928:	cmp	r0, #0
   1692c:	bne	16890 <__assert_fail@plt+0x55c0>
   16930:	ldr	r0, [r4, #36]	; 0x24
   16934:	cmp	r0, #0
   16938:	beq	16950 <__assert_fail@plt+0x5680>
   1693c:	ldr	r6, [r0, #4]
   16940:	bl	136fc <__assert_fail@plt+0x242c>
   16944:	mov	r0, r6
   16948:	cmp	r6, #0
   1694c:	bne	1693c <__assert_fail@plt+0x566c>
   16950:	mov	r3, #0
   16954:	str	r3, [r4, #36]	; 0x24
   16958:	b	16890 <__assert_fail@plt+0x55c0>
   1695c:	push	{r4, lr}
   16960:	bl	16854 <__assert_fail@plt+0x5584>
   16964:	pop	{r4, pc}
   16968:	mov	r3, #1
   1696c:	strb	r3, [r0, #28]
   16970:	mov	r3, #0
   16974:	str	r3, [r0, #20]
   16978:	str	r3, [r0, #24]
   1697c:	str	r1, [r0]
   16980:	str	r1, [r0, #4]
   16984:	str	r1, [r0, #8]
   16988:	str	r1, [r0, #12]
   1698c:	str	r1, [r0, #16]
   16990:	bx	lr
   16994:	ldrb	r0, [r0, #28]
   16998:	bx	lr
   1699c:	mov	r2, r0
   169a0:	ldrb	ip, [r0, #28]
   169a4:	eor	ip, ip, #1
   169a8:	ldr	r3, [r0, #20]
   169ac:	add	r3, ip, r3
   169b0:	and	r3, r3, #3
   169b4:	ldr	r0, [r0, r3, lsl #2]
   169b8:	str	r1, [r2, r3, lsl #2]
   169bc:	str	r3, [r2, #20]
   169c0:	ldr	r1, [r2, #24]
   169c4:	cmp	r3, r1
   169c8:	addeq	r3, ip, r3
   169cc:	andeq	r3, r3, #3
   169d0:	streq	r3, [r2, #24]
   169d4:	mov	r3, #0
   169d8:	strb	r3, [r2, #28]
   169dc:	bx	lr
   169e0:	ldrb	r3, [r0, #28]
   169e4:	cmp	r3, #0
   169e8:	bne	16a20 <__assert_fail@plt+0x5750>
   169ec:	mov	r2, r0
   169f0:	ldr	r3, [r0, #20]
   169f4:	ldr	r0, [r0, r3, lsl #2]
   169f8:	ldr	r1, [r2, #16]
   169fc:	str	r1, [r2, r3, lsl #2]
   16a00:	ldr	r1, [r2, #24]
   16a04:	cmp	r3, r1
   16a08:	moveq	r3, #1
   16a0c:	strbeq	r3, [r2, #28]
   16a10:	addne	r3, r3, #3
   16a14:	andne	r3, r3, #3
   16a18:	strne	r3, [r2, #20]
   16a1c:	bx	lr
   16a20:	push	{r4, lr}
   16a24:	bl	11294 <abort@plt>
   16a28:	push	{r2, r3}
   16a2c:	push	{lr}		; (str lr, [sp, #-4]!)
   16a30:	sub	sp, sp, #12
   16a34:	ldr	r2, [sp, #16]
   16a38:	tst	r2, #64	; 0x40
   16a3c:	addne	r3, sp, #24
   16a40:	strne	r3, [sp, #4]
   16a44:	ldrne	r3, [sp, #20]
   16a48:	moveq	r3, #0
   16a4c:	bl	11174 <openat64@plt>
   16a50:	bl	18670 <__assert_fail@plt+0x73a0>
   16a54:	add	sp, sp, #12
   16a58:	pop	{lr}		; (ldr lr, [sp], #4)
   16a5c:	add	sp, sp, #8
   16a60:	bx	lr
   16a64:	push	{r4, r5, r6, r7, r8, lr}
   16a68:	mov	r6, r3
   16a6c:	orr	r2, r2, #540672	; 0x84000
   16a70:	orr	r2, r2, #2304	; 0x900
   16a74:	bl	16a28 <__assert_fail@plt+0x5758>
   16a78:	subs	r4, r0, #0
   16a7c:	blt	16ab8 <__assert_fail@plt+0x57e8>
   16a80:	mov	r0, r4
   16a84:	bl	11234 <fdopendir@plt>
   16a88:	subs	r5, r0, #0
   16a8c:	beq	16a9c <__assert_fail@plt+0x57cc>
   16a90:	str	r4, [r6]
   16a94:	mov	r0, r5
   16a98:	pop	{r4, r5, r6, r7, r8, pc}
   16a9c:	bl	11180 <__errno_location@plt>
   16aa0:	mov	r6, r0
   16aa4:	ldr	r7, [r0]
   16aa8:	mov	r0, r4
   16aac:	bl	112a0 <close@plt>
   16ab0:	str	r7, [r6]
   16ab4:	b	16a94 <__assert_fail@plt+0x57c4>
   16ab8:	mov	r5, #0
   16abc:	b	16a94 <__assert_fail@plt+0x57c4>
   16ac0:	push	{r4, r5, r6, lr}
   16ac4:	subs	r4, r0, #0
   16ac8:	beq	16b40 <__assert_fail@plt+0x5870>
   16acc:	mov	r1, #47	; 0x2f
   16ad0:	mov	r0, r4
   16ad4:	bl	11210 <strrchr@plt>
   16ad8:	cmp	r0, #0
   16adc:	addne	r5, r0, #1
   16ae0:	moveq	r5, r4
   16ae4:	sub	r3, r5, r4
   16ae8:	cmp	r3, #6
   16aec:	ble	16b2c <__assert_fail@plt+0x585c>
   16af0:	mov	r2, #7
   16af4:	ldr	r1, [pc, #96]	; 16b5c <__assert_fail@plt+0x588c>
   16af8:	sub	r0, r5, #7
   16afc:	bl	11288 <strncmp@plt>
   16b00:	cmp	r0, #0
   16b04:	bne	16b2c <__assert_fail@plt+0x585c>
   16b08:	mov	r2, #3
   16b0c:	ldr	r1, [pc, #76]	; 16b60 <__assert_fail@plt+0x5890>
   16b10:	mov	r0, r5
   16b14:	bl	11288 <strncmp@plt>
   16b18:	cmp	r0, #0
   16b1c:	addeq	r4, r5, #3
   16b20:	ldreq	r3, [pc, #60]	; 16b64 <__assert_fail@plt+0x5894>
   16b24:	streq	r4, [r3]
   16b28:	movne	r4, r5
   16b2c:	ldr	r3, [pc, #52]	; 16b68 <__assert_fail@plt+0x5898>
   16b30:	str	r4, [r3]
   16b34:	ldr	r3, [pc, #48]	; 16b6c <__assert_fail@plt+0x589c>
   16b38:	str	r4, [r3]
   16b3c:	pop	{r4, r5, r6, pc}
   16b40:	ldr	r3, [pc, #40]	; 16b70 <__assert_fail@plt+0x58a0>
   16b44:	ldr	r3, [r3]
   16b48:	mov	r2, #55	; 0x37
   16b4c:	mov	r1, #1
   16b50:	ldr	r0, [pc, #28]	; 16b74 <__assert_fail@plt+0x58a4>
   16b54:	bl	110b4 <fwrite@plt>
   16b58:	bl	11294 <abort@plt>
   16b5c:	strdeq	fp, [r1], -r4
   16b60:	strdeq	fp, [r1], -ip
   16b64:	andeq	ip, r2, r8, ror r1
   16b68:			; <UNDEFINED> instruction: 0x0002c1bc
   16b6c:	andeq	ip, r2, ip, ror r1
   16b70:	andeq	ip, r2, r8, lsl #3
   16b74:			; <UNDEFINED> instruction: 0x0001b2bc
   16b78:	push	{r4, r5, r6, lr}
   16b7c:	mov	r5, r0
   16b80:	mov	r4, r1
   16b84:	mov	r2, #48	; 0x30
   16b88:	mov	r1, #0
   16b8c:	bl	11198 <memset@plt>
   16b90:	cmp	r4, #10
   16b94:	beq	16ba4 <__assert_fail@plt+0x58d4>
   16b98:	str	r4, [r5]
   16b9c:	mov	r0, r5
   16ba0:	pop	{r4, r5, r6, pc}
   16ba4:	bl	11294 <abort@plt>
   16ba8:	push	{r4, r5, r6, lr}
   16bac:	mov	r4, r0
   16bb0:	mov	r5, r1
   16bb4:	mov	r2, #5
   16bb8:	mov	r1, r0
   16bbc:	mov	r0, #0
   16bc0:	bl	11060 <dcgettext@plt>
   16bc4:	cmp	r4, r0
   16bc8:	popne	{r4, r5, r6, pc}
   16bcc:	bl	198cc <__assert_fail@plt+0x85fc>
   16bd0:	ldrb	r3, [r0]
   16bd4:	bic	r3, r3, #32
   16bd8:	cmp	r3, #85	; 0x55
   16bdc:	beq	16c58 <__assert_fail@plt+0x5988>
   16be0:	cmp	r3, #71	; 0x47
   16be4:	bne	16cb4 <__assert_fail@plt+0x59e4>
   16be8:	ldrb	r3, [r0, #1]
   16bec:	bic	r3, r3, #32
   16bf0:	cmp	r3, #66	; 0x42
   16bf4:	bne	16cb4 <__assert_fail@plt+0x59e4>
   16bf8:	ldrb	r3, [r0, #2]
   16bfc:	cmp	r3, #49	; 0x31
   16c00:	bne	16cb4 <__assert_fail@plt+0x59e4>
   16c04:	ldrb	r3, [r0, #3]
   16c08:	cmp	r3, #56	; 0x38
   16c0c:	bne	16cb4 <__assert_fail@plt+0x59e4>
   16c10:	ldrb	r3, [r0, #4]
   16c14:	cmp	r3, #48	; 0x30
   16c18:	bne	16cb4 <__assert_fail@plt+0x59e4>
   16c1c:	ldrb	r3, [r0, #5]
   16c20:	cmp	r3, #51	; 0x33
   16c24:	bne	16cb4 <__assert_fail@plt+0x59e4>
   16c28:	ldrb	r3, [r0, #6]
   16c2c:	cmp	r3, #48	; 0x30
   16c30:	bne	16cb4 <__assert_fail@plt+0x59e4>
   16c34:	ldrb	r3, [r0, #7]
   16c38:	cmp	r3, #0
   16c3c:	bne	16cb4 <__assert_fail@plt+0x59e4>
   16c40:	ldrb	r2, [r4]
   16c44:	ldr	r3, [pc, #124]	; 16cc8 <__assert_fail@plt+0x59f8>
   16c48:	ldr	r0, [pc, #124]	; 16ccc <__assert_fail@plt+0x59fc>
   16c4c:	cmp	r2, #96	; 0x60
   16c50:	movne	r0, r3
   16c54:	pop	{r4, r5, r6, pc}
   16c58:	ldrb	r3, [r0, #1]
   16c5c:	bic	r3, r3, #32
   16c60:	cmp	r3, #84	; 0x54
   16c64:	bne	16cb4 <__assert_fail@plt+0x59e4>
   16c68:	ldrb	r3, [r0, #2]
   16c6c:	bic	r3, r3, #32
   16c70:	cmp	r3, #70	; 0x46
   16c74:	bne	16cb4 <__assert_fail@plt+0x59e4>
   16c78:	ldrb	r3, [r0, #3]
   16c7c:	cmp	r3, #45	; 0x2d
   16c80:	bne	16cb4 <__assert_fail@plt+0x59e4>
   16c84:	ldrb	r3, [r0, #4]
   16c88:	cmp	r3, #56	; 0x38
   16c8c:	bne	16cb4 <__assert_fail@plt+0x59e4>
   16c90:	ldrb	r3, [r0, #5]
   16c94:	cmp	r3, #0
   16c98:	bne	16cb4 <__assert_fail@plt+0x59e4>
   16c9c:	ldrb	r2, [r4]
   16ca0:	ldr	r3, [pc, #40]	; 16cd0 <__assert_fail@plt+0x5a00>
   16ca4:	ldr	r0, [pc, #40]	; 16cd4 <__assert_fail@plt+0x5a04>
   16ca8:	cmp	r2, #96	; 0x60
   16cac:	movne	r0, r3
   16cb0:	pop	{r4, r5, r6, pc}
   16cb4:	ldr	r3, [pc, #28]	; 16cd8 <__assert_fail@plt+0x5a08>
   16cb8:	ldr	r0, [pc, #28]	; 16cdc <__assert_fail@plt+0x5a0c>
   16cbc:	cmp	r5, #9
   16cc0:	movne	r0, r3
   16cc4:	pop	{r4, r5, r6, pc}
   16cc8:	andeq	fp, r1, r8, asr r3
   16ccc:	andeq	fp, r1, r4, ror #6
   16cd0:	andeq	fp, r1, r4, asr r3
   16cd4:	andeq	fp, r1, r8, ror #6
   16cd8:	andeq	fp, r1, ip, asr r3
   16cdc:	andeq	fp, r1, r0, ror #6
   16ce0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ce4:	sub	sp, sp, #116	; 0x74
   16ce8:	str	r0, [sp, #36]	; 0x24
   16cec:	mov	sl, r1
   16cf0:	str	r2, [sp, #52]	; 0x34
   16cf4:	str	r3, [sp, #28]
   16cf8:	ldr	r8, [sp, #152]	; 0x98
   16cfc:	bl	110cc <__ctype_get_mb_cur_max@plt>
   16d00:	str	r0, [sp, #84]	; 0x54
   16d04:	ldr	r3, [sp, #156]	; 0x9c
   16d08:	lsr	r3, r3, #1
   16d0c:	and	r3, r3, #1
   16d10:	str	r3, [sp, #32]
   16d14:	mov	r3, #1
   16d18:	str	r3, [sp, #40]	; 0x28
   16d1c:	mov	r3, #0
   16d20:	str	r3, [sp, #80]	; 0x50
   16d24:	str	r3, [sp, #44]	; 0x2c
   16d28:	str	r3, [sp, #48]	; 0x30
   16d2c:	str	r3, [sp, #60]	; 0x3c
   16d30:	str	r3, [sp, #72]	; 0x48
   16d34:	str	r3, [sp, #76]	; 0x4c
   16d38:	mov	r7, sl
   16d3c:	mov	sl, r8
   16d40:	cmp	sl, #10
   16d44:	ldrls	pc, [pc, sl, lsl #2]
   16d48:	b	16f00 <__assert_fail@plt+0x5c30>
   16d4c:			; <UNDEFINED> instruction: 0x00016db0
   16d50:	andeq	r6, r1, r0, lsl #27
   16d54:	ldrdeq	r6, [r1], -ip
   16d58:	andeq	r6, r1, r8, ror sp
   16d5c:	muleq	r1, r0, lr
   16d60:	andeq	r6, r1, r0, asr #27
   16d64:	andeq	r7, r1, ip, lsr #28
   16d68:	andeq	r6, r1, r4, lsl #30
   16d6c:	strdeq	r6, [r1], -ip
   16d70:	strdeq	r6, [r1], -ip
   16d74:	strdeq	r6, [r1], -ip
   16d78:	mov	r3, #1
   16d7c:	str	r3, [sp, #48]	; 0x30
   16d80:	mov	r3, #1
   16d84:	str	r3, [sp, #32]
   16d88:	str	r3, [sp, #60]	; 0x3c
   16d8c:	ldr	r3, [pc, #4068]	; 17d78 <__assert_fail@plt+0x6aa8>
   16d90:	str	r3, [sp, #72]	; 0x48
   16d94:	mov	fp, #0
   16d98:	mov	sl, #2
   16d9c:	mov	r6, #0
   16da0:	ldr	r3, [sp, #48]	; 0x30
   16da4:	eor	r3, r3, #1
   16da8:	str	r3, [sp, #68]	; 0x44
   16dac:	b	17694 <__assert_fail@plt+0x63c4>
   16db0:	mov	r3, #0
   16db4:	str	r3, [sp, #32]
   16db8:	mov	fp, r3
   16dbc:	b	16d9c <__assert_fail@plt+0x5acc>
   16dc0:	ldr	r3, [sp, #32]
   16dc4:	cmp	r3, #0
   16dc8:	bne	16f1c <__assert_fail@plt+0x5c4c>
   16dcc:	cmp	r7, #0
   16dd0:	beq	16f3c <__assert_fail@plt+0x5c6c>
   16dd4:	ldr	r3, [sp, #36]	; 0x24
   16dd8:	mov	r2, #34	; 0x22
   16ddc:	strb	r2, [r3]
   16de0:	mov	r3, #1
   16de4:	str	r3, [sp, #48]	; 0x30
   16de8:	str	r3, [sp, #60]	; 0x3c
   16dec:	ldr	r3, [pc, #3980]	; 17d80 <__assert_fail@plt+0x6ab0>
   16df0:	str	r3, [sp, #72]	; 0x48
   16df4:	mov	fp, #1
   16df8:	b	16d9c <__assert_fail@plt+0x5acc>
   16dfc:	cmp	sl, #10
   16e00:	beq	16e24 <__assert_fail@plt+0x5b54>
   16e04:	mov	r1, sl
   16e08:	ldr	r0, [pc, #3948]	; 17d7c <__assert_fail@plt+0x6aac>
   16e0c:	bl	16ba8 <__assert_fail@plt+0x58d8>
   16e10:	str	r0, [sp, #164]	; 0xa4
   16e14:	mov	r1, sl
   16e18:	ldr	r0, [pc, #3928]	; 17d78 <__assert_fail@plt+0x6aa8>
   16e1c:	bl	16ba8 <__assert_fail@plt+0x58d8>
   16e20:	str	r0, [sp, #168]	; 0xa8
   16e24:	ldr	r3, [sp, #32]
   16e28:	cmp	r3, #0
   16e2c:	movne	fp, #0
   16e30:	bne	16e68 <__assert_fail@plt+0x5b98>
   16e34:	ldr	r3, [sp, #164]	; 0xa4
   16e38:	ldrb	r3, [r3]
   16e3c:	cmp	r3, #0
   16e40:	beq	16e88 <__assert_fail@plt+0x5bb8>
   16e44:	ldr	r2, [sp, #164]	; 0xa4
   16e48:	mov	fp, #0
   16e4c:	ldr	r1, [sp, #36]	; 0x24
   16e50:	cmp	r7, fp
   16e54:	strbhi	r3, [r1, fp]
   16e58:	add	fp, fp, #1
   16e5c:	ldrb	r3, [r2, #1]!
   16e60:	cmp	r3, #0
   16e64:	bne	16e50 <__assert_fail@plt+0x5b80>
   16e68:	ldr	r0, [sp, #168]	; 0xa8
   16e6c:	bl	11168 <strlen@plt>
   16e70:	str	r0, [sp, #60]	; 0x3c
   16e74:	ldr	r3, [sp, #168]	; 0xa8
   16e78:	str	r3, [sp, #72]	; 0x48
   16e7c:	mov	r3, #1
   16e80:	str	r3, [sp, #48]	; 0x30
   16e84:	b	16d9c <__assert_fail@plt+0x5acc>
   16e88:	mov	fp, #0
   16e8c:	b	16e68 <__assert_fail@plt+0x5b98>
   16e90:	ldr	r3, [sp, #32]
   16e94:	cmp	r3, #0
   16e98:	bne	16f58 <__assert_fail@plt+0x5c88>
   16e9c:	mov	r3, #1
   16ea0:	str	r3, [sp, #48]	; 0x30
   16ea4:	cmp	r7, #0
   16ea8:	beq	16f74 <__assert_fail@plt+0x5ca4>
   16eac:	ldr	r3, [sp, #36]	; 0x24
   16eb0:	mov	r2, #39	; 0x27
   16eb4:	strb	r2, [r3]
   16eb8:	mov	r3, #0
   16ebc:	str	r3, [sp, #32]
   16ec0:	mov	r3, #1
   16ec4:	str	r3, [sp, #60]	; 0x3c
   16ec8:	ldr	r3, [pc, #3752]	; 17d78 <__assert_fail@plt+0x6aa8>
   16ecc:	str	r3, [sp, #72]	; 0x48
   16ed0:	mov	fp, #1
   16ed4:	mov	sl, #2
   16ed8:	b	16d9c <__assert_fail@plt+0x5acc>
   16edc:	ldr	r3, [sp, #32]
   16ee0:	cmp	r3, #0
   16ee4:	beq	16ea4 <__assert_fail@plt+0x5bd4>
   16ee8:	mov	r3, #1
   16eec:	str	r3, [sp, #60]	; 0x3c
   16ef0:	ldr	r3, [pc, #3712]	; 17d78 <__assert_fail@plt+0x6aa8>
   16ef4:	str	r3, [sp, #72]	; 0x48
   16ef8:	mov	fp, #0
   16efc:	b	16d9c <__assert_fail@plt+0x5acc>
   16f00:	bl	11294 <abort@plt>
   16f04:	mov	r3, #0
   16f08:	str	r3, [sp, #32]
   16f0c:	mov	r3, #1
   16f10:	str	r3, [sp, #48]	; 0x30
   16f14:	mov	fp, #0
   16f18:	b	16d9c <__assert_fail@plt+0x5acc>
   16f1c:	ldr	r3, [sp, #32]
   16f20:	str	r3, [sp, #48]	; 0x30
   16f24:	mov	r3, #1
   16f28:	str	r3, [sp, #60]	; 0x3c
   16f2c:	ldr	r3, [pc, #3660]	; 17d80 <__assert_fail@plt+0x6ab0>
   16f30:	str	r3, [sp, #72]	; 0x48
   16f34:	mov	fp, #0
   16f38:	b	16d9c <__assert_fail@plt+0x5acc>
   16f3c:	mov	r3, #1
   16f40:	str	r3, [sp, #48]	; 0x30
   16f44:	str	r3, [sp, #60]	; 0x3c
   16f48:	ldr	r3, [pc, #3632]	; 17d80 <__assert_fail@plt+0x6ab0>
   16f4c:	str	r3, [sp, #72]	; 0x48
   16f50:	mov	fp, #1
   16f54:	b	16d9c <__assert_fail@plt+0x5acc>
   16f58:	mov	r3, #1
   16f5c:	str	r3, [sp, #60]	; 0x3c
   16f60:	ldr	r3, [pc, #3600]	; 17d78 <__assert_fail@plt+0x6aa8>
   16f64:	str	r3, [sp, #72]	; 0x48
   16f68:	mov	fp, #0
   16f6c:	mov	sl, #2
   16f70:	b	16d9c <__assert_fail@plt+0x5acc>
   16f74:	mov	r3, #0
   16f78:	str	r3, [sp, #32]
   16f7c:	mov	r3, #1
   16f80:	str	r3, [sp, #60]	; 0x3c
   16f84:	ldr	r3, [pc, #3564]	; 17d78 <__assert_fail@plt+0x6aa8>
   16f88:	str	r3, [sp, #72]	; 0x48
   16f8c:	mov	fp, #1
   16f90:	mov	sl, #2
   16f94:	b	16d9c <__assert_fail@plt+0x5acc>
   16f98:	mov	r3, #0
   16f9c:	str	r3, [sp, #56]	; 0x38
   16fa0:	ldr	r3, [sp, #52]	; 0x34
   16fa4:	add	r2, r3, r6
   16fa8:	str	r2, [sp, #64]	; 0x40
   16fac:	ldrb	r4, [r3, r6]
   16fb0:	cmp	r4, #126	; 0x7e
   16fb4:	ldrls	pc, [pc, r4, lsl #2]
   16fb8:	b	177f4 <__assert_fail@plt+0x6524>
   16fbc:	ldrdeq	r7, [r1], -r4
   16fc0:	strdeq	r7, [r1], -r4
   16fc4:	strdeq	r7, [r1], -r4
   16fc8:	strdeq	r7, [r1], -r4
   16fcc:	strdeq	r7, [r1], -r4
   16fd0:	strdeq	r7, [r1], -r4
   16fd4:	strdeq	r7, [r1], -r4
   16fd8:	andeq	r7, r1, r0, lsr r5
   16fdc:	andeq	r7, r1, ip, asr #3
   16fe0:	andeq	r7, r1, r8, ror #9
   16fe4:	andeq	r7, r1, r0, ror #9
   16fe8:	andeq	r7, r1, r0, asr r4
   16fec:	andeq	r7, r1, r8, asr #8
   16ff0:	andeq	r7, r1, r4, asr #3
   16ff4:	strdeq	r7, [r1], -r4
   16ff8:	strdeq	r7, [r1], -r4
   16ffc:	strdeq	r7, [r1], -r4
   17000:	strdeq	r7, [r1], -r4
   17004:	strdeq	r7, [r1], -r4
   17008:	strdeq	r7, [r1], -r4
   1700c:	strdeq	r7, [r1], -r4
   17010:	strdeq	r7, [r1], -r4
   17014:	strdeq	r7, [r1], -r4
   17018:	strdeq	r7, [r1], -r4
   1701c:	strdeq	r7, [r1], -r4
   17020:	strdeq	r7, [r1], -r4
   17024:	strdeq	r7, [r1], -r4
   17028:	strdeq	r7, [r1], -r4
   1702c:	strdeq	r7, [r1], -r4
   17030:	strdeq	r7, [r1], -r4
   17034:	strdeq	r7, [r1], -r4
   17038:	strdeq	r7, [r1], -r4
   1703c:	andeq	r7, r1, r4, lsl #11
   17040:	andeq	r7, r1, r0, lsl #11
   17044:	andeq	r7, r1, r0, lsl #11
   17048:	andeq	r7, r1, r8, asr r5
   1704c:	andeq	r7, r1, r0, lsl #11
   17050:	andeq	r7, r1, r8, asr #23
   17054:	andeq	r7, r1, r0, lsl #11
   17058:	andeq	r7, r1, r8, asr r7
   1705c:	andeq	r7, r1, r0, lsl #11
   17060:	andeq	r7, r1, r0, lsl #11
   17064:	andeq	r7, r1, r0, lsl #11
   17068:	andeq	r7, r1, r8, asr #23
   1706c:	andeq	r7, r1, r8, asr #23
   17070:	andeq	r7, r1, r8, asr #23
   17074:	andeq	r7, r1, r8, asr #23
   17078:	andeq	r7, r1, r8, asr #23
   1707c:	andeq	r7, r1, r8, asr #23
   17080:	andeq	r7, r1, r8, asr #23
   17084:	andeq	r7, r1, r8, asr #23
   17088:	andeq	r7, r1, r8, asr #23
   1708c:	andeq	r7, r1, r8, asr #23
   17090:	andeq	r7, r1, r8, asr #23
   17094:	andeq	r7, r1, r8, asr #23
   17098:	andeq	r7, r1, r8, asr #23
   1709c:	andeq	r7, r1, r8, asr #23
   170a0:	andeq	r7, r1, r8, asr #23
   170a4:	andeq	r7, r1, r8, asr #23
   170a8:	andeq	r7, r1, r0, lsl #11
   170ac:	andeq	r7, r1, r0, lsl #11
   170b0:	andeq	r7, r1, r0, lsl #11
   170b4:	andeq	r7, r1, r0, lsl #11
   170b8:	ldrdeq	r7, [r1], -ip
   170bc:	strdeq	r7, [r1], -r4
   170c0:	andeq	r7, r1, r8, asr #23
   170c4:	andeq	r7, r1, r8, asr #23
   170c8:	andeq	r7, r1, r8, asr #23
   170cc:	andeq	r7, r1, r8, asr #23
   170d0:	andeq	r7, r1, r8, asr #23
   170d4:	andeq	r7, r1, r8, asr #23
   170d8:	andeq	r7, r1, r8, asr #23
   170dc:	andeq	r7, r1, r8, asr #23
   170e0:	andeq	r7, r1, r8, asr #23
   170e4:	andeq	r7, r1, r8, asr #23
   170e8:	andeq	r7, r1, r8, asr #23
   170ec:	andeq	r7, r1, r8, asr #23
   170f0:	andeq	r7, r1, r8, asr #23
   170f4:	andeq	r7, r1, r8, asr #23
   170f8:	andeq	r7, r1, r8, asr #23
   170fc:	andeq	r7, r1, r8, asr #23
   17100:	andeq	r7, r1, r8, asr #23
   17104:	andeq	r7, r1, r8, asr #23
   17108:	andeq	r7, r1, r8, asr #23
   1710c:	andeq	r7, r1, r8, asr #23
   17110:	andeq	r7, r1, r8, asr #23
   17114:	andeq	r7, r1, r8, asr #23
   17118:	andeq	r7, r1, r8, asr #23
   1711c:	andeq	r7, r1, r8, asr #23
   17120:	andeq	r7, r1, r8, asr #23
   17124:	andeq	r7, r1, r8, asr #23
   17128:	andeq	r7, r1, r0, lsl #11
   1712c:	andeq	r7, r1, r8, asr r4
   17130:	andeq	r7, r1, r8, asr #23
   17134:	andeq	r7, r1, r0, lsl #11
   17138:	andeq	r7, r1, r8, asr #23
   1713c:	andeq	r7, r1, r0, lsl #11
   17140:	andeq	r7, r1, r8, asr #23
   17144:	andeq	r7, r1, r8, asr #23
   17148:	andeq	r7, r1, r8, asr #23
   1714c:	andeq	r7, r1, r8, asr #23
   17150:	andeq	r7, r1, r8, asr #23
   17154:	andeq	r7, r1, r8, asr #23
   17158:	andeq	r7, r1, r8, asr #23
   1715c:	andeq	r7, r1, r8, asr #23
   17160:	andeq	r7, r1, r8, asr #23
   17164:	andeq	r7, r1, r8, asr #23
   17168:	andeq	r7, r1, r8, asr #23
   1716c:	andeq	r7, r1, r8, asr #23
   17170:	andeq	r7, r1, r8, asr #23
   17174:	andeq	r7, r1, r8, asr #23
   17178:	andeq	r7, r1, r8, asr #23
   1717c:	andeq	r7, r1, r8, asr #23
   17180:	andeq	r7, r1, r8, asr #23
   17184:	andeq	r7, r1, r8, asr #23
   17188:	andeq	r7, r1, r8, asr #23
   1718c:	andeq	r7, r1, r8, asr #23
   17190:	andeq	r7, r1, r8, asr #23
   17194:	andeq	r7, r1, r8, asr #23
   17198:	andeq	r7, r1, r8, asr #23
   1719c:	andeq	r7, r1, r8, asr #23
   171a0:	andeq	r7, r1, r8, asr #23
   171a4:	andeq	r7, r1, r8, asr #23
   171a8:	andeq	r7, r1, r8, lsr r5
   171ac:	andeq	r7, r1, r0, lsl #11
   171b0:	andeq	r7, r1, r8, lsr r5
   171b4:	andeq	r7, r1, r8, asr r5
   171b8:	mov	r3, #0
   171bc:	str	r3, [sp, #56]	; 0x38
   171c0:	b	16fa0 <__assert_fail@plt+0x5cd0>
   171c4:	mov	r3, #114	; 0x72
   171c8:	b	174ec <__assert_fail@plt+0x621c>
   171cc:	mov	r3, #98	; 0x62
   171d0:	b	17504 <__assert_fail@plt+0x6234>
   171d4:	ldr	r3, [sp, #48]	; 0x30
   171d8:	cmp	r3, #0
   171dc:	beq	172c4 <__assert_fail@plt+0x5ff4>
   171e0:	ldr	r3, [sp, #32]
   171e4:	cmp	r3, #0
   171e8:	bne	17d4c <__assert_fail@plt+0x6a7c>
   171ec:	ldr	r3, [sp, #44]	; 0x2c
   171f0:	eor	r3, r3, #1
   171f4:	cmp	sl, #2
   171f8:	movne	r3, #0
   171fc:	andeq	r3, r3, #1
   17200:	cmp	r3, #0
   17204:	moveq	r2, fp
   17208:	beq	1724c <__assert_fail@plt+0x5f7c>
   1720c:	cmp	r7, fp
   17210:	ldrhi	r2, [sp, #36]	; 0x24
   17214:	movhi	r1, #39	; 0x27
   17218:	strbhi	r1, [r2, fp]
   1721c:	add	r2, fp, #1
   17220:	cmp	r7, r2
   17224:	ldrhi	r1, [sp, #36]	; 0x24
   17228:	movhi	r0, #36	; 0x24
   1722c:	strbhi	r0, [r1, r2]
   17230:	add	r2, fp, #2
   17234:	cmp	r7, r2
   17238:	ldrhi	r1, [sp, #36]	; 0x24
   1723c:	movhi	r0, #39	; 0x27
   17240:	strbhi	r0, [r1, r2]
   17244:	add	r2, fp, #3
   17248:	str	r3, [sp, #44]	; 0x2c
   1724c:	cmp	r7, r2
   17250:	ldrhi	r3, [sp, #36]	; 0x24
   17254:	movhi	r1, #92	; 0x5c
   17258:	strbhi	r1, [r3, r2]
   1725c:	add	fp, r2, #1
   17260:	cmp	r5, #0
   17264:	beq	17bd0 <__assert_fail@plt+0x6900>
   17268:	add	r3, r6, #1
   1726c:	ldr	r1, [sp, #28]
   17270:	cmp	r1, r3
   17274:	bls	17be0 <__assert_fail@plt+0x6910>
   17278:	ldr	r1, [sp, #52]	; 0x34
   1727c:	ldrb	r3, [r1, r3]
   17280:	sub	r3, r3, #48	; 0x30
   17284:	uxtb	r3, r3
   17288:	cmp	r3, #9
   1728c:	bhi	17bec <__assert_fail@plt+0x691c>
   17290:	cmp	r7, fp
   17294:	movhi	r3, #48	; 0x30
   17298:	ldrhi	r1, [sp, #36]	; 0x24
   1729c:	strbhi	r3, [r1, fp]
   172a0:	add	r3, r2, #2
   172a4:	cmp	r7, r3
   172a8:	movhi	r1, #48	; 0x30
   172ac:	ldrhi	r0, [sp, #36]	; 0x24
   172b0:	strbhi	r1, [r0, r3]
   172b4:	add	fp, r2, #3
   172b8:	ldr	r8, [sp, #32]
   172bc:	mov	r4, #48	; 0x30
   172c0:	b	1759c <__assert_fail@plt+0x62cc>
   172c4:	ldr	r3, [sp, #156]	; 0x9c
   172c8:	tst	r3, #1
   172cc:	bne	17690 <__assert_fail@plt+0x63c0>
   172d0:	ldr	r5, [sp, #48]	; 0x30
   172d4:	mov	r8, r5
   172d8:	b	1759c <__assert_fail@plt+0x62cc>
   172dc:	cmp	sl, #2
   172e0:	beq	172f8 <__assert_fail@plt+0x6028>
   172e4:	cmp	sl, #5
   172e8:	beq	17310 <__assert_fail@plt+0x6040>
   172ec:	mov	r8, #0
   172f0:	mov	r5, r8
   172f4:	b	1759c <__assert_fail@plt+0x62cc>
   172f8:	ldr	r3, [sp, #32]
   172fc:	cmp	r3, #0
   17300:	bne	17d60 <__assert_fail@plt+0x6a90>
   17304:	mov	r8, r3
   17308:	mov	r5, r3
   1730c:	b	1759c <__assert_fail@plt+0x62cc>
   17310:	ldr	r3, [sp, #156]	; 0x9c
   17314:	tst	r3, #4
   17318:	beq	17bf8 <__assert_fail@plt+0x6928>
   1731c:	add	r3, r6, #2
   17320:	ldr	r2, [sp, #28]
   17324:	cmp	r2, r3
   17328:	bls	17c04 <__assert_fail@plt+0x6934>
   1732c:	ldr	r2, [sp, #52]	; 0x34
   17330:	add	r2, r2, r6
   17334:	ldrb	r2, [r2, #1]
   17338:	cmp	r2, #63	; 0x3f
   1733c:	movne	r8, #0
   17340:	movne	r5, r8
   17344:	bne	1759c <__assert_fail@plt+0x62cc>
   17348:	ldr	r2, [sp, #52]	; 0x34
   1734c:	ldrb	r2, [r2, r3]
   17350:	sub	r1, r2, #33	; 0x21
   17354:	cmp	r1, #29
   17358:	ldrls	pc, [pc, r1, lsl #2]
   1735c:	b	17c10 <__assert_fail@plt+0x6940>
   17360:	ldrdeq	r7, [r1], -r8
   17364:	andeq	r7, r1, r0, lsl ip
   17368:	andeq	r7, r1, r0, lsl ip
   1736c:	andeq	r7, r1, r0, lsl ip
   17370:	andeq	r7, r1, r0, lsl ip
   17374:	andeq	r7, r1, r0, lsl ip
   17378:	ldrdeq	r7, [r1], -r8
   1737c:	ldrdeq	r7, [r1], -r8
   17380:	ldrdeq	r7, [r1], -r8
   17384:	andeq	r7, r1, r0, lsl ip
   17388:	andeq	r7, r1, r0, lsl ip
   1738c:	andeq	r7, r1, r0, lsl ip
   17390:	ldrdeq	r7, [r1], -r8
   17394:	andeq	r7, r1, r0, lsl ip
   17398:	ldrdeq	r7, [r1], -r8
   1739c:	andeq	r7, r1, r0, lsl ip
   173a0:	andeq	r7, r1, r0, lsl ip
   173a4:	andeq	r7, r1, r0, lsl ip
   173a8:	andeq	r7, r1, r0, lsl ip
   173ac:	andeq	r7, r1, r0, lsl ip
   173b0:	andeq	r7, r1, r0, lsl ip
   173b4:	andeq	r7, r1, r0, lsl ip
   173b8:	andeq	r7, r1, r0, lsl ip
   173bc:	andeq	r7, r1, r0, lsl ip
   173c0:	andeq	r7, r1, r0, lsl ip
   173c4:	andeq	r7, r1, r0, lsl ip
   173c8:	andeq	r7, r1, r0, lsl ip
   173cc:	ldrdeq	r7, [r1], -r8
   173d0:	ldrdeq	r7, [r1], -r8
   173d4:	ldrdeq	r7, [r1], -r8
   173d8:	ldr	r1, [sp, #32]
   173dc:	cmp	r1, #0
   173e0:	bne	17e20 <__assert_fail@plt+0x6b50>
   173e4:	cmp	r7, fp
   173e8:	movhi	r1, #63	; 0x3f
   173ec:	ldrhi	r0, [sp, #36]	; 0x24
   173f0:	strbhi	r1, [r0, fp]
   173f4:	add	r1, fp, #1
   173f8:	cmp	r7, r1
   173fc:	ldrhi	r0, [sp, #36]	; 0x24
   17400:	movhi	ip, #34	; 0x22
   17404:	strbhi	ip, [r0, r1]
   17408:	add	r1, fp, #2
   1740c:	cmp	r7, r1
   17410:	ldrhi	r0, [sp, #36]	; 0x24
   17414:	movhi	ip, #34	; 0x22
   17418:	strbhi	ip, [r0, r1]
   1741c:	add	r1, fp, #3
   17420:	cmp	r7, r1
   17424:	movhi	r0, #63	; 0x3f
   17428:	ldrhi	ip, [sp, #36]	; 0x24
   1742c:	strbhi	r0, [ip, r1]
   17430:	add	fp, fp, #4
   17434:	ldr	r5, [sp, #32]
   17438:	mov	r8, r5
   1743c:	mov	r4, r2
   17440:	mov	r6, r3
   17444:	b	1759c <__assert_fail@plt+0x62cc>
   17448:	mov	r3, #102	; 0x66
   1744c:	b	17504 <__assert_fail@plt+0x6234>
   17450:	mov	r3, #118	; 0x76
   17454:	b	17504 <__assert_fail@plt+0x6234>
   17458:	cmp	sl, #2
   1745c:	beq	174c8 <__assert_fail@plt+0x61f8>
   17460:	ldr	r3, [sp, #48]	; 0x30
   17464:	ldr	r2, [sp, #32]
   17468:	and	r3, r3, r2
   1746c:	tst	r9, r3
   17470:	moveq	r3, r4
   17474:	beq	17504 <__assert_fail@plt+0x6234>
   17478:	mov	r8, #0
   1747c:	mov	r5, r8
   17480:	eor	r5, r5, #1
   17484:	ldr	r3, [sp, #44]	; 0x2c
   17488:	and	r5, r5, r3
   1748c:	tst	r5, #255	; 0xff
   17490:	beq	17670 <__assert_fail@plt+0x63a0>
   17494:	cmp	r7, fp
   17498:	ldrhi	r3, [sp, #36]	; 0x24
   1749c:	movhi	r2, #39	; 0x27
   174a0:	strbhi	r2, [r3, fp]
   174a4:	add	r3, fp, #1
   174a8:	cmp	r7, r3
   174ac:	ldrhi	r2, [sp, #36]	; 0x24
   174b0:	movhi	r1, #39	; 0x27
   174b4:	strbhi	r1, [r2, r3]
   174b8:	add	fp, fp, #2
   174bc:	mov	r3, #0
   174c0:	str	r3, [sp, #44]	; 0x2c
   174c4:	b	17670 <__assert_fail@plt+0x63a0>
   174c8:	ldr	r3, [sp, #32]
   174cc:	cmp	r3, #0
   174d0:	bne	17d6c <__assert_fail@plt+0x6a9c>
   174d4:	mov	r8, r3
   174d8:	mov	r5, r3
   174dc:	b	17480 <__assert_fail@plt+0x61b0>
   174e0:	mov	r3, #110	; 0x6e
   174e4:	b	174ec <__assert_fail@plt+0x621c>
   174e8:	mov	r3, #116	; 0x74
   174ec:	ldr	r2, [sp, #32]
   174f0:	cmp	sl, #2
   174f4:	movne	r2, #0
   174f8:	andeq	r2, r2, #1
   174fc:	cmp	r2, #0
   17500:	bne	17524 <__assert_fail@plt+0x6254>
   17504:	ldr	r2, [sp, #48]	; 0x30
   17508:	cmp	r2, #0
   1750c:	moveq	r8, r2
   17510:	moveq	r5, r2
   17514:	beq	1759c <__assert_fail@plt+0x62cc>
   17518:	mov	r4, r3
   1751c:	mov	r8, #0
   17520:	b	175f4 <__assert_fail@plt+0x6324>
   17524:	mov	r8, sl
   17528:	mov	sl, r7
   1752c:	b	17d98 <__assert_fail@plt+0x6ac8>
   17530:	mov	r3, #97	; 0x61
   17534:	b	17504 <__assert_fail@plt+0x6234>
   17538:	ldr	r3, [sp, #28]
   1753c:	cmn	r3, #1
   17540:	beq	1756c <__assert_fail@plt+0x629c>
   17544:	ldr	r3, [sp, #28]
   17548:	subs	r3, r3, #1
   1754c:	movne	r3, #1
   17550:	cmp	r3, #0
   17554:	bne	17c1c <__assert_fail@plt+0x694c>
   17558:	cmp	r6, #0
   1755c:	beq	17584 <__assert_fail@plt+0x62b4>
   17560:	mov	r8, #0
   17564:	mov	r5, r8
   17568:	b	1759c <__assert_fail@plt+0x62cc>
   1756c:	ldr	r3, [sp, #52]	; 0x34
   17570:	ldrb	r3, [r3, #1]
   17574:	adds	r3, r3, #0
   17578:	movne	r3, #1
   1757c:	b	17550 <__assert_fail@plt+0x6280>
   17580:	mov	r8, #0
   17584:	ldr	r5, [sp, #32]
   17588:	cmp	sl, #2
   1758c:	movne	r5, #0
   17590:	andeq	r5, r5, #1
   17594:	cmp	r5, #0
   17598:	bne	1774c <__assert_fail@plt+0x647c>
   1759c:	ldr	r3, [sp, #68]	; 0x44
   175a0:	cmp	sl, #2
   175a4:	orreq	r3, r3, #1
   175a8:	eor	r3, r3, #1
   175ac:	ldr	r2, [sp, #32]
   175b0:	orr	r3, r2, r3
   175b4:	tst	r3, #255	; 0xff
   175b8:	beq	175e8 <__assert_fail@plt+0x6318>
   175bc:	ldr	r3, [sp, #160]	; 0xa0
   175c0:	cmp	r3, #0
   175c4:	beq	175e8 <__assert_fail@plt+0x6318>
   175c8:	lsr	r2, r4, #5
   175cc:	uxtb	r2, r2
   175d0:	and	r3, r4, #31
   175d4:	ldr	r1, [sp, #160]	; 0xa0
   175d8:	ldr	r2, [r1, r2, lsl #2]
   175dc:	lsr	r3, r2, r3
   175e0:	tst	r3, #1
   175e4:	bne	175f4 <__assert_fail@plt+0x6324>
   175e8:	ldr	r3, [sp, #56]	; 0x38
   175ec:	cmp	r3, #0
   175f0:	beq	17480 <__assert_fail@plt+0x61b0>
   175f4:	ldr	r3, [sp, #32]
   175f8:	cmp	r3, #0
   175fc:	bne	17e08 <__assert_fail@plt+0x6b38>
   17600:	ldr	r3, [sp, #44]	; 0x2c
   17604:	eor	r3, r3, #1
   17608:	cmp	sl, #2
   1760c:	movne	r3, #0
   17610:	andeq	r3, r3, #1
   17614:	cmp	r3, #0
   17618:	beq	1765c <__assert_fail@plt+0x638c>
   1761c:	cmp	r7, fp
   17620:	ldrhi	r2, [sp, #36]	; 0x24
   17624:	movhi	r1, #39	; 0x27
   17628:	strbhi	r1, [r2, fp]
   1762c:	add	r2, fp, #1
   17630:	cmp	r7, r2
   17634:	ldrhi	r1, [sp, #36]	; 0x24
   17638:	movhi	r0, #36	; 0x24
   1763c:	strbhi	r0, [r1, r2]
   17640:	add	r2, fp, #2
   17644:	cmp	r7, r2
   17648:	ldrhi	r1, [sp, #36]	; 0x24
   1764c:	movhi	r0, #39	; 0x27
   17650:	strbhi	r0, [r1, r2]
   17654:	add	fp, fp, #3
   17658:	str	r3, [sp, #44]	; 0x2c
   1765c:	cmp	r7, fp
   17660:	ldrhi	r3, [sp, #36]	; 0x24
   17664:	movhi	r2, #92	; 0x5c
   17668:	strbhi	r2, [r3, fp]
   1766c:	add	fp, fp, #1
   17670:	cmp	fp, r7
   17674:	ldrcc	r3, [sp, #36]	; 0x24
   17678:	strbcc	r4, [r3, fp]
   1767c:	add	fp, fp, #1
   17680:	ldr	r3, [sp, #40]	; 0x28
   17684:	cmp	r8, #0
   17688:	moveq	r3, #0
   1768c:	str	r3, [sp, #40]	; 0x28
   17690:	add	r6, r6, #1
   17694:	ldr	r3, [sp, #28]
   17698:	cmn	r3, #1
   1769c:	beq	17c28 <__assert_fail@plt+0x6958>
   176a0:	ldr	r3, [sp, #28]
   176a4:	subs	r8, r3, r6
   176a8:	movne	r8, #1
   176ac:	cmp	r8, #0
   176b0:	beq	17c3c <__assert_fail@plt+0x696c>
   176b4:	ldr	r5, [sp, #48]	; 0x30
   176b8:	cmp	sl, #2
   176bc:	moveq	r5, #0
   176c0:	andne	r5, r5, #1
   176c4:	ldr	r3, [sp, #60]	; 0x3c
   176c8:	adds	r9, r3, #0
   176cc:	movne	r9, #1
   176d0:	ands	r2, r5, r9
   176d4:	str	r2, [sp, #56]	; 0x38
   176d8:	beq	16fa0 <__assert_fail@plt+0x5cd0>
   176dc:	add	r4, r6, r3
   176e0:	ldr	r2, [sp, #28]
   176e4:	cmp	r3, #1
   176e8:	movls	r3, #0
   176ec:	movhi	r3, #1
   176f0:	cmn	r2, #1
   176f4:	movne	r3, #0
   176f8:	cmp	r3, #0
   176fc:	beq	1770c <__assert_fail@plt+0x643c>
   17700:	ldr	r0, [sp, #52]	; 0x34
   17704:	bl	11168 <strlen@plt>
   17708:	str	r0, [sp, #28]
   1770c:	ldr	r3, [sp, #28]
   17710:	cmp	r3, r4
   17714:	bcc	16f98 <__assert_fail@plt+0x5cc8>
   17718:	ldr	r2, [sp, #60]	; 0x3c
   1771c:	ldr	r1, [sp, #72]	; 0x48
   17720:	ldr	r3, [sp, #52]	; 0x34
   17724:	add	r0, r3, r6
   17728:	bl	11048 <memcmp@plt>
   1772c:	cmp	r0, #0
   17730:	bne	171b8 <__assert_fail@plt+0x5ee8>
   17734:	ldr	r3, [sp, #32]
   17738:	cmp	r3, #0
   1773c:	beq	16fa0 <__assert_fail@plt+0x5cd0>
   17740:	mov	r8, sl
   17744:	mov	sl, r7
   17748:	b	17d98 <__assert_fail@plt+0x6ac8>
   1774c:	mov	r8, sl
   17750:	mov	sl, r7
   17754:	b	17d98 <__assert_fail@plt+0x6ac8>
   17758:	cmp	sl, #2
   1775c:	strne	r8, [sp, #80]	; 0x50
   17760:	movne	r5, #0
   17764:	bne	1759c <__assert_fail@plt+0x62cc>
   17768:	ldr	r3, [sp, #32]
   1776c:	cmp	r3, #0
   17770:	bne	17d84 <__assert_fail@plt+0x6ab4>
   17774:	ldr	r2, [sp, #76]	; 0x4c
   17778:	adds	r3, r7, #0
   1777c:	movne	r3, #1
   17780:	cmp	r2, #0
   17784:	movne	r3, #0
   17788:	cmp	r3, #0
   1778c:	movne	r3, #0
   17790:	bne	177c0 <__assert_fail@plt+0x64f0>
   17794:	cmp	r7, fp
   17798:	ldrhi	r3, [sp, #36]	; 0x24
   1779c:	movhi	r2, #39	; 0x27
   177a0:	strbhi	r2, [r3, fp]
   177a4:	add	r3, fp, #1
   177a8:	cmp	r7, r3
   177ac:	ldrhi	r2, [sp, #36]	; 0x24
   177b0:	movhi	r1, #92	; 0x5c
   177b4:	strbhi	r1, [r2, r3]
   177b8:	mov	r3, r7
   177bc:	ldr	r7, [sp, #76]	; 0x4c
   177c0:	add	r2, fp, #2
   177c4:	cmp	r2, r3
   177c8:	ldrcc	r1, [sp, #36]	; 0x24
   177cc:	movcc	r0, #39	; 0x27
   177d0:	strbcc	r0, [r1, r2]
   177d4:	add	fp, fp, #3
   177d8:	ldr	r2, [sp, #32]
   177dc:	mov	r5, r2
   177e0:	str	r8, [sp, #80]	; 0x50
   177e4:	str	r2, [sp, #44]	; 0x2c
   177e8:	str	r7, [sp, #76]	; 0x4c
   177ec:	mov	r7, r3
   177f0:	b	1759c <__assert_fail@plt+0x62cc>
   177f4:	ldr	r5, [sp, #84]	; 0x54
   177f8:	cmp	r5, #1
   177fc:	beq	1782c <__assert_fail@plt+0x655c>
   17800:	mov	r3, #0
   17804:	str	r3, [sp, #104]	; 0x68
   17808:	str	r3, [sp, #108]	; 0x6c
   1780c:	ldr	r3, [sp, #28]
   17810:	cmn	r3, #1
   17814:	beq	17860 <__assert_fail@plt+0x6590>
   17818:	mov	r3, #0
   1781c:	str	r4, [sp, #88]	; 0x58
   17820:	str	fp, [sp, #92]	; 0x5c
   17824:	mov	fp, r3
   17828:	b	17988 <__assert_fail@plt+0x66b8>
   1782c:	bl	11150 <__ctype_b_loc@plt>
   17830:	ldr	r2, [r0]
   17834:	lsl	r3, r4, #1
   17838:	ldrh	r8, [r2, r3]
   1783c:	lsr	r8, r8, #14
   17840:	and	r8, r8, #1
   17844:	mov	r2, r5
   17848:	eor	r5, r8, #1
   1784c:	ldr	r3, [sp, #48]	; 0x30
   17850:	and	r5, r5, r3
   17854:	ands	r5, r5, #255	; 0xff
   17858:	beq	1759c <__assert_fail@plt+0x62cc>
   1785c:	b	17a20 <__assert_fail@plt+0x6750>
   17860:	ldr	r0, [sp, #52]	; 0x34
   17864:	bl	11168 <strlen@plt>
   17868:	str	r0, [sp, #28]
   1786c:	b	17818 <__assert_fail@plt+0x6548>
   17870:	mov	r2, fp
   17874:	mov	r1, r4
   17878:	ldr	r4, [sp, #88]	; 0x58
   1787c:	ldr	fp, [sp, #92]	; 0x5c
   17880:	ldr	r0, [sp, #28]
   17884:	cmp	r0, r5
   17888:	bls	17a54 <__assert_fail@plt+0x6784>
   1788c:	ldrb	r3, [r1]
   17890:	cmp	r3, #0
   17894:	beq	17a5c <__assert_fail@plt+0x678c>
   17898:	mov	r3, r1
   1789c:	add	r2, r2, #1
   178a0:	add	r1, r6, r2
   178a4:	cmp	r0, r1
   178a8:	bls	17a64 <__assert_fail@plt+0x6794>
   178ac:	ldrb	r1, [r3, #1]!
   178b0:	cmp	r1, #0
   178b4:	bne	1789c <__assert_fail@plt+0x65cc>
   178b8:	mov	r8, #0
   178bc:	b	17a18 <__assert_fail@plt+0x6748>
   178c0:	cmp	r4, r5
   178c4:	beq	17964 <__assert_fail@plt+0x6694>
   178c8:	ldrb	r3, [r4, #1]!
   178cc:	sub	r3, r3, #91	; 0x5b
   178d0:	cmp	r3, #33	; 0x21
   178d4:	ldrls	pc, [pc, r3, lsl #2]
   178d8:	b	178c0 <__assert_fail@plt+0x65f0>
   178dc:	muleq	r1, r0, sp
   178e0:	muleq	r1, r0, sp
   178e4:	andeq	r7, r1, r0, asr #17
   178e8:	muleq	r1, r0, sp
   178ec:	andeq	r7, r1, r0, asr #17
   178f0:	muleq	r1, r0, sp
   178f4:	andeq	r7, r1, r0, asr #17
   178f8:	andeq	r7, r1, r0, asr #17
   178fc:	andeq	r7, r1, r0, asr #17
   17900:	andeq	r7, r1, r0, asr #17
   17904:	andeq	r7, r1, r0, asr #17
   17908:	andeq	r7, r1, r0, asr #17
   1790c:	andeq	r7, r1, r0, asr #17
   17910:	andeq	r7, r1, r0, asr #17
   17914:	andeq	r7, r1, r0, asr #17
   17918:	andeq	r7, r1, r0, asr #17
   1791c:	andeq	r7, r1, r0, asr #17
   17920:	andeq	r7, r1, r0, asr #17
   17924:	andeq	r7, r1, r0, asr #17
   17928:	andeq	r7, r1, r0, asr #17
   1792c:	andeq	r7, r1, r0, asr #17
   17930:	andeq	r7, r1, r0, asr #17
   17934:	andeq	r7, r1, r0, asr #17
   17938:	andeq	r7, r1, r0, asr #17
   1793c:	andeq	r7, r1, r0, asr #17
   17940:	andeq	r7, r1, r0, asr #17
   17944:	andeq	r7, r1, r0, asr #17
   17948:	andeq	r7, r1, r0, asr #17
   1794c:	andeq	r7, r1, r0, asr #17
   17950:	andeq	r7, r1, r0, asr #17
   17954:	andeq	r7, r1, r0, asr #17
   17958:	andeq	r7, r1, r0, asr #17
   1795c:	andeq	r7, r1, r0, asr #17
   17960:	muleq	r1, r0, sp
   17964:	ldr	r0, [sp, #100]	; 0x64
   17968:	bl	1109c <iswprint@plt>
   1796c:	cmp	r0, #0
   17970:	moveq	r8, #0
   17974:	add	fp, fp, r9
   17978:	add	r0, sp, #104	; 0x68
   1797c:	bl	1103c <mbsinit@plt>
   17980:	cmp	r0, #0
   17984:	bne	179f8 <__assert_fail@plt+0x6728>
   17988:	add	r5, r6, fp
   1798c:	ldr	r3, [sp, #52]	; 0x34
   17990:	add	r4, r3, r5
   17994:	add	r3, sp, #104	; 0x68
   17998:	ldr	r2, [sp, #28]
   1799c:	sub	r2, r2, r5
   179a0:	mov	r1, r4
   179a4:	add	r0, sp, #100	; 0x64
   179a8:	bl	19900 <__assert_fail@plt+0x8630>
   179ac:	subs	r9, r0, #0
   179b0:	beq	17a6c <__assert_fail@plt+0x679c>
   179b4:	cmn	r9, #1
   179b8:	beq	17a08 <__assert_fail@plt+0x6738>
   179bc:	cmn	r9, #2
   179c0:	beq	17870 <__assert_fail@plt+0x65a0>
   179c4:	ldr	r3, [sp, #32]
   179c8:	cmp	sl, #2
   179cc:	movne	r3, #0
   179d0:	andeq	r3, r3, #1
   179d4:	cmp	r3, #0
   179d8:	beq	17964 <__assert_fail@plt+0x6694>
   179dc:	cmp	r9, #1
   179e0:	bls	17964 <__assert_fail@plt+0x6694>
   179e4:	sub	r3, r9, #1
   179e8:	add	r5, r3, r5
   179ec:	ldr	r3, [sp, #52]	; 0x34
   179f0:	add	r5, r3, r5
   179f4:	b	178c8 <__assert_fail@plt+0x65f8>
   179f8:	ldr	r4, [sp, #88]	; 0x58
   179fc:	mov	r2, fp
   17a00:	ldr	fp, [sp, #92]	; 0x5c
   17a04:	b	17a18 <__assert_fail@plt+0x6748>
   17a08:	ldr	r4, [sp, #88]	; 0x58
   17a0c:	mov	r2, fp
   17a10:	ldr	fp, [sp, #92]	; 0x5c
   17a14:	mov	r8, #0
   17a18:	cmp	r2, #1
   17a1c:	bls	17848 <__assert_fail@plt+0x6578>
   17a20:	add	r1, r6, r2
   17a24:	ldr	ip, [sp, #64]	; 0x40
   17a28:	mov	r5, #0
   17a2c:	eor	r3, r8, #1
   17a30:	ldr	r2, [sp, #48]	; 0x30
   17a34:	and	r3, r3, r2
   17a38:	uxtb	r3, r3
   17a3c:	ldr	r9, [sp, #32]
   17a40:	ldr	lr, [sp, #44]	; 0x2c
   17a44:	ldr	r2, [sp, #56]	; 0x38
   17a48:	str	r8, [sp, #56]	; 0x38
   17a4c:	ldr	r0, [sp, #36]	; 0x24
   17a50:	b	17aec <__assert_fail@plt+0x681c>
   17a54:	mov	r8, #0
   17a58:	b	17a18 <__assert_fail@plt+0x6748>
   17a5c:	mov	r8, #0
   17a60:	b	17a18 <__assert_fail@plt+0x6748>
   17a64:	mov	r8, #0
   17a68:	b	17a18 <__assert_fail@plt+0x6748>
   17a6c:	ldr	r4, [sp, #88]	; 0x58
   17a70:	mov	r2, fp
   17a74:	ldr	fp, [sp, #92]	; 0x5c
   17a78:	b	17a18 <__assert_fail@plt+0x6748>
   17a7c:	cmp	r2, #0
   17a80:	beq	17a94 <__assert_fail@plt+0x67c4>
   17a84:	cmp	r7, fp
   17a88:	movhi	r2, #92	; 0x5c
   17a8c:	strbhi	r2, [r0, fp]
   17a90:	add	fp, fp, #1
   17a94:	add	r8, r6, #1
   17a98:	cmp	r1, r8
   17a9c:	bls	17ba4 <__assert_fail@plt+0x68d4>
   17aa0:	eor	r2, r5, #1
   17aa4:	and	r2, r2, lr
   17aa8:	ands	r2, r2, #255	; 0xff
   17aac:	beq	17bc0 <__assert_fail@plt+0x68f0>
   17ab0:	cmp	r7, fp
   17ab4:	movhi	r2, #39	; 0x27
   17ab8:	strbhi	r2, [r0, fp]
   17abc:	add	r2, fp, #1
   17ac0:	cmp	r7, r2
   17ac4:	movhi	lr, #39	; 0x27
   17ac8:	strbhi	lr, [r0, r2]
   17acc:	add	fp, fp, #2
   17ad0:	mov	r6, r8
   17ad4:	mov	r2, r3
   17ad8:	mov	lr, r3
   17adc:	cmp	r7, fp
   17ae0:	strbhi	r4, [r0, fp]
   17ae4:	add	fp, fp, #1
   17ae8:	ldrb	r4, [ip, #1]!
   17aec:	cmp	r3, #0
   17af0:	beq	17a7c <__assert_fail@plt+0x67ac>
   17af4:	cmp	r9, #0
   17af8:	bne	17dfc <__assert_fail@plt+0x6b2c>
   17afc:	eor	r5, lr, #1
   17b00:	cmp	sl, #2
   17b04:	movne	r5, #0
   17b08:	andeq	r5, r5, #1
   17b0c:	cmp	r5, #0
   17b10:	beq	17b48 <__assert_fail@plt+0x6878>
   17b14:	cmp	r7, fp
   17b18:	movhi	lr, #39	; 0x27
   17b1c:	strbhi	lr, [r0, fp]
   17b20:	add	lr, fp, #1
   17b24:	cmp	r7, lr
   17b28:	movhi	r8, #36	; 0x24
   17b2c:	strbhi	r8, [r0, lr]
   17b30:	add	lr, fp, #2
   17b34:	cmp	r7, lr
   17b38:	movhi	r8, #39	; 0x27
   17b3c:	strbhi	r8, [r0, lr]
   17b40:	add	fp, fp, #3
   17b44:	mov	lr, r5
   17b48:	cmp	r7, fp
   17b4c:	movhi	r5, #92	; 0x5c
   17b50:	strbhi	r5, [r0, fp]
   17b54:	add	r5, fp, #1
   17b58:	cmp	r7, r5
   17b5c:	lsrhi	r8, r4, #6
   17b60:	addhi	r8, r8, #48	; 0x30
   17b64:	strbhi	r8, [r0, r5]
   17b68:	add	r8, fp, #2
   17b6c:	cmp	r7, r8
   17b70:	lsrhi	r5, r4, #3
   17b74:	andhi	r5, r5, #7
   17b78:	addhi	r5, r5, #48	; 0x30
   17b7c:	strbhi	r5, [r0, r8]
   17b80:	add	fp, fp, #3
   17b84:	and	r4, r4, #7
   17b88:	add	r4, r4, #48	; 0x30
   17b8c:	add	r5, r6, #1
   17b90:	cmp	r1, r5
   17b94:	bls	17bb0 <__assert_fail@plt+0x68e0>
   17b98:	mov	r6, r5
   17b9c:	mov	r5, r3
   17ba0:	b	17adc <__assert_fail@plt+0x680c>
   17ba4:	str	lr, [sp, #44]	; 0x2c
   17ba8:	ldr	r8, [sp, #56]	; 0x38
   17bac:	b	17480 <__assert_fail@plt+0x61b0>
   17bb0:	str	lr, [sp, #44]	; 0x2c
   17bb4:	ldr	r8, [sp, #56]	; 0x38
   17bb8:	mov	r5, r3
   17bbc:	b	17480 <__assert_fail@plt+0x61b0>
   17bc0:	mov	r6, r8
   17bc4:	b	17adc <__assert_fail@plt+0x680c>
   17bc8:	mov	r5, #0
   17bcc:	b	1759c <__assert_fail@plt+0x62cc>
   17bd0:	mov	r8, r5
   17bd4:	ldr	r5, [sp, #48]	; 0x30
   17bd8:	mov	r4, #48	; 0x30
   17bdc:	b	1759c <__assert_fail@plt+0x62cc>
   17be0:	ldr	r8, [sp, #32]
   17be4:	mov	r4, #48	; 0x30
   17be8:	b	1759c <__assert_fail@plt+0x62cc>
   17bec:	ldr	r8, [sp, #32]
   17bf0:	mov	r4, #48	; 0x30
   17bf4:	b	1759c <__assert_fail@plt+0x62cc>
   17bf8:	mov	r8, #0
   17bfc:	mov	r5, r8
   17c00:	b	1759c <__assert_fail@plt+0x62cc>
   17c04:	mov	r8, #0
   17c08:	mov	r5, r8
   17c0c:	b	1759c <__assert_fail@plt+0x62cc>
   17c10:	mov	r8, #0
   17c14:	mov	r5, r8
   17c18:	b	1759c <__assert_fail@plt+0x62cc>
   17c1c:	mov	r8, #0
   17c20:	mov	r5, r8
   17c24:	b	1759c <__assert_fail@plt+0x62cc>
   17c28:	ldr	r3, [sp, #52]	; 0x34
   17c2c:	ldrb	r8, [r3, r6]
   17c30:	adds	r8, r8, #0
   17c34:	movne	r8, #1
   17c38:	b	176ac <__assert_fail@plt+0x63dc>
   17c3c:	cmp	sl, #2
   17c40:	movne	r3, #0
   17c44:	moveq	r3, #1
   17c48:	ldr	r1, [sp, #32]
   17c4c:	mov	r2, r1
   17c50:	and	r2, r2, r3
   17c54:	cmp	fp, #0
   17c58:	movne	r2, #0
   17c5c:	andeq	r2, r2, #1
   17c60:	cmp	r2, #0
   17c64:	bne	17e14 <__assert_fail@plt+0x6b44>
   17c68:	eor	r2, r1, #1
   17c6c:	and	r3, r3, r2
   17c70:	ldr	r1, [sp, #80]	; 0x50
   17c74:	tst	r1, r3
   17c78:	beq	17cf0 <__assert_fail@plt+0x6a20>
   17c7c:	ldr	r3, [sp, #40]	; 0x28
   17c80:	cmp	r3, #0
   17c84:	bne	17cac <__assert_fail@plt+0x69dc>
   17c88:	ldr	r1, [sp, #76]	; 0x4c
   17c8c:	clz	r3, r7
   17c90:	lsr	r3, r3, #5
   17c94:	cmp	r1, #0
   17c98:	moveq	r3, #0
   17c9c:	cmp	r3, #0
   17ca0:	beq	17cf0 <__assert_fail@plt+0x6a20>
   17ca4:	ldr	r7, [sp, #76]	; 0x4c
   17ca8:	b	16d40 <__assert_fail@plt+0x5a70>
   17cac:	ldr	r3, [sp, #168]	; 0xa8
   17cb0:	str	r3, [sp, #16]
   17cb4:	ldr	r3, [sp, #164]	; 0xa4
   17cb8:	str	r3, [sp, #12]
   17cbc:	ldr	r3, [sp, #160]	; 0xa0
   17cc0:	str	r3, [sp, #8]
   17cc4:	ldr	r3, [sp, #156]	; 0x9c
   17cc8:	str	r3, [sp, #4]
   17ccc:	mov	r3, #5
   17cd0:	str	r3, [sp]
   17cd4:	ldr	r3, [sp, #28]
   17cd8:	ldr	r2, [sp, #52]	; 0x34
   17cdc:	ldr	r1, [sp, #76]	; 0x4c
   17ce0:	ldr	r0, [sp, #36]	; 0x24
   17ce4:	bl	16ce0 <__assert_fail@plt+0x5a10>
   17ce8:	mov	fp, r0
   17cec:	b	17df0 <__assert_fail@plt+0x6b20>
   17cf0:	mov	sl, r7
   17cf4:	ldr	r3, [sp, #72]	; 0x48
   17cf8:	cmp	r3, #0
   17cfc:	moveq	r2, #0
   17d00:	andne	r2, r2, #1
   17d04:	cmp	r2, #0
   17d08:	beq	17d38 <__assert_fail@plt+0x6a68>
   17d0c:	mov	r2, r3
   17d10:	ldrb	r3, [r3]
   17d14:	cmp	r3, #0
   17d18:	beq	17d38 <__assert_fail@plt+0x6a68>
   17d1c:	ldr	r1, [sp, #36]	; 0x24
   17d20:	cmp	sl, fp
   17d24:	strbhi	r3, [r1, fp]
   17d28:	add	fp, fp, #1
   17d2c:	ldrb	r3, [r2, #1]!
   17d30:	cmp	r3, #0
   17d34:	bne	17d20 <__assert_fail@plt+0x6a50>
   17d38:	cmp	sl, fp
   17d3c:	movhi	r3, #0
   17d40:	ldrhi	r2, [sp, #36]	; 0x24
   17d44:	strbhi	r3, [r2, fp]
   17d48:	b	17df0 <__assert_fail@plt+0x6b20>
   17d4c:	mov	r8, sl
   17d50:	mov	sl, r7
   17d54:	ldr	r3, [sp, #32]
   17d58:	str	r3, [sp, #48]	; 0x30
   17d5c:	b	17d98 <__assert_fail@plt+0x6ac8>
   17d60:	mov	r8, sl
   17d64:	mov	sl, r7
   17d68:	b	17d98 <__assert_fail@plt+0x6ac8>
   17d6c:	mov	r8, sl
   17d70:	mov	sl, r7
   17d74:	b	17d98 <__assert_fail@plt+0x6ac8>
   17d78:	andeq	fp, r1, ip, asr r3
   17d7c:	andeq	fp, r1, ip, ror #6
   17d80:	andeq	fp, r1, r0, ror #6
   17d84:	mov	r8, sl
   17d88:	mov	sl, r7
   17d8c:	b	17d98 <__assert_fail@plt+0x6ac8>
   17d90:	mov	r8, sl
   17d94:	mov	sl, r7
   17d98:	ldr	r3, [sp, #48]	; 0x30
   17d9c:	cmp	r8, #2
   17da0:	movne	r3, #0
   17da4:	andeq	r3, r3, #1
   17da8:	cmp	r3, #0
   17dac:	movne	r8, #4
   17db0:	ldr	r3, [sp, #168]	; 0xa8
   17db4:	str	r3, [sp, #16]
   17db8:	ldr	r3, [sp, #164]	; 0xa4
   17dbc:	str	r3, [sp, #12]
   17dc0:	mov	r3, #0
   17dc4:	str	r3, [sp, #8]
   17dc8:	ldr	r3, [sp, #156]	; 0x9c
   17dcc:	bic	r3, r3, #2
   17dd0:	str	r3, [sp, #4]
   17dd4:	str	r8, [sp]
   17dd8:	ldr	r3, [sp, #28]
   17ddc:	ldr	r2, [sp, #52]	; 0x34
   17de0:	mov	r1, sl
   17de4:	ldr	r0, [sp, #36]	; 0x24
   17de8:	bl	16ce0 <__assert_fail@plt+0x5a10>
   17dec:	mov	fp, r0
   17df0:	mov	r0, fp
   17df4:	add	sp, sp, #116	; 0x74
   17df8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17dfc:	mov	r8, sl
   17e00:	mov	sl, r7
   17e04:	b	17d98 <__assert_fail@plt+0x6ac8>
   17e08:	mov	r8, sl
   17e0c:	mov	sl, r7
   17e10:	b	17d98 <__assert_fail@plt+0x6ac8>
   17e14:	mov	r8, sl
   17e18:	mov	sl, r7
   17e1c:	b	17d98 <__assert_fail@plt+0x6ac8>
   17e20:	mov	r8, sl
   17e24:	mov	sl, r7
   17e28:	b	17db0 <__assert_fail@plt+0x6ae0>
   17e2c:	mov	r3, #1
   17e30:	str	r3, [sp, #32]
   17e34:	str	r3, [sp, #48]	; 0x30
   17e38:	str	r3, [sp, #60]	; 0x3c
   17e3c:	ldr	r3, [pc, #-196]	; 17d80 <__assert_fail@plt+0x6ab0>
   17e40:	str	r3, [sp, #72]	; 0x48
   17e44:	mov	fp, #0
   17e48:	mov	sl, #5
   17e4c:	b	16d9c <__assert_fail@plt+0x5acc>
   17e50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e54:	sub	sp, sp, #52	; 0x34
   17e58:	mov	r5, r0
   17e5c:	str	r1, [sp, #24]
   17e60:	str	r2, [sp, #28]
   17e64:	mov	r4, r3
   17e68:	bl	11180 <__errno_location@plt>
   17e6c:	str	r0, [sp, #32]
   17e70:	ldr	r3, [r0]
   17e74:	str	r3, [sp, #36]	; 0x24
   17e78:	ldr	r3, [pc, #396]	; 1800c <__assert_fail@plt+0x6d3c>
   17e7c:	ldr	r6, [r3]
   17e80:	cmn	r5, #-2147483647	; 0x80000001
   17e84:	movne	r3, #0
   17e88:	moveq	r3, #1
   17e8c:	orrs	r3, r3, r5, lsr #31
   17e90:	bne	17fd0 <__assert_fail@plt+0x6d00>
   17e94:	ldr	r3, [pc, #368]	; 1800c <__assert_fail@plt+0x6d3c>
   17e98:	ldr	r2, [r3, #4]
   17e9c:	cmp	r5, r2
   17ea0:	blt	17f08 <__assert_fail@plt+0x6c38>
   17ea4:	str	r2, [sp, #44]	; 0x2c
   17ea8:	add	r3, r3, #8
   17eac:	cmp	r6, r3
   17eb0:	beq	17fd4 <__assert_fail@plt+0x6d04>
   17eb4:	sub	r2, r5, r2
   17eb8:	mov	r3, #8
   17ebc:	str	r3, [sp]
   17ec0:	mvn	r3, #-2147483648	; 0x80000000
   17ec4:	add	r2, r2, #1
   17ec8:	add	r1, sp, #44	; 0x2c
   17ecc:	mov	r0, r6
   17ed0:	bl	18e2c <__assert_fail@plt+0x7b5c>
   17ed4:	mov	r6, r0
   17ed8:	ldr	r3, [pc, #300]	; 1800c <__assert_fail@plt+0x6d3c>
   17edc:	str	r0, [r3]
   17ee0:	ldr	r7, [pc, #292]	; 1800c <__assert_fail@plt+0x6d3c>
   17ee4:	ldr	r0, [r7, #4]
   17ee8:	ldr	r2, [sp, #44]	; 0x2c
   17eec:	sub	r2, r2, r0
   17ef0:	lsl	r2, r2, #3
   17ef4:	mov	r1, #0
   17ef8:	add	r0, r6, r0, lsl #3
   17efc:	bl	11198 <memset@plt>
   17f00:	ldr	r3, [sp, #44]	; 0x2c
   17f04:	str	r3, [r7, #4]
   17f08:	add	fp, r6, r5, lsl #3
   17f0c:	ldr	r8, [r6, r5, lsl #3]
   17f10:	ldr	r7, [fp, #4]
   17f14:	ldr	r9, [r4, #4]
   17f18:	orr	r9, r9, #1
   17f1c:	add	sl, r4, #8
   17f20:	ldr	r3, [r4, #44]	; 0x2c
   17f24:	str	r3, [sp, #16]
   17f28:	ldr	r3, [r4, #40]	; 0x28
   17f2c:	str	r3, [sp, #12]
   17f30:	str	sl, [sp, #8]
   17f34:	str	r9, [sp, #4]
   17f38:	ldr	r3, [r4]
   17f3c:	str	r3, [sp]
   17f40:	ldr	r3, [sp, #28]
   17f44:	ldr	r2, [sp, #24]
   17f48:	mov	r1, r8
   17f4c:	mov	r0, r7
   17f50:	bl	16ce0 <__assert_fail@plt+0x5a10>
   17f54:	cmp	r8, r0
   17f58:	bhi	17fb8 <__assert_fail@plt+0x6ce8>
   17f5c:	add	r8, r0, #1
   17f60:	str	r8, [r6, r5, lsl #3]
   17f64:	ldr	r3, [pc, #164]	; 18010 <__assert_fail@plt+0x6d40>
   17f68:	cmp	r7, r3
   17f6c:	beq	17f78 <__assert_fail@plt+0x6ca8>
   17f70:	mov	r0, r7
   17f74:	bl	136fc <__assert_fail@plt+0x242c>
   17f78:	mov	r0, r8
   17f7c:	bl	18ca8 <__assert_fail@plt+0x79d8>
   17f80:	mov	r7, r0
   17f84:	str	r0, [fp, #4]
   17f88:	ldr	r3, [r4, #44]	; 0x2c
   17f8c:	str	r3, [sp, #16]
   17f90:	ldr	r3, [r4, #40]	; 0x28
   17f94:	str	r3, [sp, #12]
   17f98:	str	sl, [sp, #8]
   17f9c:	str	r9, [sp, #4]
   17fa0:	ldr	r3, [r4]
   17fa4:	str	r3, [sp]
   17fa8:	ldr	r3, [sp, #28]
   17fac:	ldr	r2, [sp, #24]
   17fb0:	mov	r1, r8
   17fb4:	bl	16ce0 <__assert_fail@plt+0x5a10>
   17fb8:	ldr	r3, [sp, #32]
   17fbc:	ldr	r2, [sp, #36]	; 0x24
   17fc0:	str	r2, [r3]
   17fc4:	mov	r0, r7
   17fc8:	add	sp, sp, #52	; 0x34
   17fcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17fd0:	bl	11294 <abort@plt>
   17fd4:	sub	r2, r5, r2
   17fd8:	mov	r3, #8
   17fdc:	str	r3, [sp]
   17fe0:	mvn	r3, #-2147483648	; 0x80000000
   17fe4:	add	r2, r2, #1
   17fe8:	add	r1, sp, #44	; 0x2c
   17fec:	mov	r0, #0
   17ff0:	bl	18e2c <__assert_fail@plt+0x7b5c>
   17ff4:	mov	r6, r0
   17ff8:	ldr	r3, [pc, #12]	; 1800c <__assert_fail@plt+0x6d3c>
   17ffc:	str	r0, [r3], #8
   18000:	ldm	r3, {r0, r1}
   18004:	stm	r6, {r0, r1}
   18008:	b	17ee0 <__assert_fail@plt+0x6c10>
   1800c:	andeq	ip, r2, r8, lsr r1
   18010:	andeq	ip, r2, r0, asr #3
   18014:	push	{r4, r5, r6, lr}
   18018:	mov	r4, r0
   1801c:	bl	11180 <__errno_location@plt>
   18020:	mov	r5, r0
   18024:	ldr	r6, [r0]
   18028:	cmp	r4, #0
   1802c:	ldr	r3, [pc, #20]	; 18048 <__assert_fail@plt+0x6d78>
   18030:	moveq	r4, r3
   18034:	mov	r1, #48	; 0x30
   18038:	mov	r0, r4
   1803c:	bl	19194 <__assert_fail@plt+0x7ec4>
   18040:	str	r6, [r5]
   18044:	pop	{r4, r5, r6, pc}
   18048:	andeq	ip, r2, r0, asr #5
   1804c:	subs	r3, r0, #0
   18050:	ldr	r2, [pc, #8]	; 18060 <__assert_fail@plt+0x6d90>
   18054:	moveq	r3, r2
   18058:	ldr	r0, [r3]
   1805c:	bx	lr
   18060:	andeq	ip, r2, r0, asr #5
   18064:	subs	r3, r0, #0
   18068:	ldr	r2, [pc, #8]	; 18078 <__assert_fail@plt+0x6da8>
   1806c:	moveq	r3, r2
   18070:	str	r1, [r3]
   18074:	bx	lr
   18078:	andeq	ip, r2, r0, asr #5
   1807c:	push	{lr}		; (str lr, [sp, #-4]!)
   18080:	subs	r3, r0, #0
   18084:	ldr	r0, [pc, #44]	; 180b8 <__assert_fail@plt+0x6de8>
   18088:	moveq	r3, r0
   1808c:	add	r3, r3, #8
   18090:	lsr	lr, r1, #5
   18094:	and	r1, r1, #31
   18098:	ldr	ip, [r3, lr, lsl #2]
   1809c:	lsr	r0, ip, r1
   180a0:	eor	r2, r2, r0
   180a4:	and	r2, r2, #1
   180a8:	eor	r1, ip, r2, lsl r1
   180ac:	str	r1, [r3, lr, lsl #2]
   180b0:	and	r0, r0, #1
   180b4:	pop	{pc}		; (ldr pc, [sp], #4)
   180b8:	andeq	ip, r2, r0, asr #5
   180bc:	subs	r3, r0, #0
   180c0:	ldr	r2, [pc, #12]	; 180d4 <__assert_fail@plt+0x6e04>
   180c4:	moveq	r3, r2
   180c8:	ldr	r0, [r3, #4]
   180cc:	str	r1, [r3, #4]
   180d0:	bx	lr
   180d4:	andeq	ip, r2, r0, asr #5
   180d8:	subs	r3, r0, #0
   180dc:	ldr	r0, [pc, #40]	; 1810c <__assert_fail@plt+0x6e3c>
   180e0:	moveq	r3, r0
   180e4:	mov	r0, #10
   180e8:	str	r0, [r3]
   180ec:	cmp	r2, #0
   180f0:	cmpne	r1, #0
   180f4:	beq	18104 <__assert_fail@plt+0x6e34>
   180f8:	str	r1, [r3, #40]	; 0x28
   180fc:	str	r2, [r3, #44]	; 0x2c
   18100:	bx	lr
   18104:	push	{r4, lr}
   18108:	bl	11294 <abort@plt>
   1810c:	andeq	ip, r2, r0, asr #5
   18110:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18114:	sub	sp, sp, #24
   18118:	mov	r7, r0
   1811c:	mov	r8, r1
   18120:	mov	r9, r2
   18124:	mov	sl, r3
   18128:	ldr	r4, [sp, #56]	; 0x38
   1812c:	cmp	r4, #0
   18130:	ldr	r3, [pc, #84]	; 1818c <__assert_fail@plt+0x6ebc>
   18134:	moveq	r4, r3
   18138:	bl	11180 <__errno_location@plt>
   1813c:	mov	r5, r0
   18140:	ldr	r6, [r0]
   18144:	ldr	r3, [r4, #44]	; 0x2c
   18148:	str	r3, [sp, #16]
   1814c:	ldr	r3, [r4, #40]	; 0x28
   18150:	str	r3, [sp, #12]
   18154:	add	r3, r4, #8
   18158:	str	r3, [sp, #8]
   1815c:	ldr	r3, [r4, #4]
   18160:	str	r3, [sp, #4]
   18164:	ldr	r3, [r4]
   18168:	str	r3, [sp]
   1816c:	mov	r3, sl
   18170:	mov	r2, r9
   18174:	mov	r1, r8
   18178:	mov	r0, r7
   1817c:	bl	16ce0 <__assert_fail@plt+0x5a10>
   18180:	str	r6, [r5]
   18184:	add	sp, sp, #24
   18188:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1818c:	andeq	ip, r2, r0, asr #5
   18190:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18194:	sub	sp, sp, #44	; 0x2c
   18198:	str	r0, [sp, #28]
   1819c:	str	r1, [sp, #32]
   181a0:	mov	r6, r2
   181a4:	subs	r4, r3, #0
   181a8:	ldr	r3, [pc, #172]	; 1825c <__assert_fail@plt+0x6f8c>
   181ac:	moveq	r4, r3
   181b0:	bl	11180 <__errno_location@plt>
   181b4:	mov	r7, r0
   181b8:	ldr	fp, [r0]
   181bc:	ldr	r5, [r4, #4]
   181c0:	cmp	r6, #0
   181c4:	orreq	r5, r5, #1
   181c8:	add	r9, r4, #8
   181cc:	ldr	r3, [r4, #44]	; 0x2c
   181d0:	str	r3, [sp, #16]
   181d4:	ldr	r3, [r4, #40]	; 0x28
   181d8:	str	r3, [sp, #12]
   181dc:	str	r9, [sp, #8]
   181e0:	str	r5, [sp, #4]
   181e4:	ldr	r3, [r4]
   181e8:	str	r3, [sp]
   181ec:	ldr	r3, [sp, #32]
   181f0:	ldr	r2, [sp, #28]
   181f4:	mov	r1, #0
   181f8:	mov	r0, r1
   181fc:	bl	16ce0 <__assert_fail@plt+0x5a10>
   18200:	mov	sl, r0
   18204:	add	r8, r0, #1
   18208:	mov	r0, r8
   1820c:	bl	18ca8 <__assert_fail@plt+0x79d8>
   18210:	str	r0, [sp, #36]	; 0x24
   18214:	ldr	r3, [r4, #44]	; 0x2c
   18218:	str	r3, [sp, #16]
   1821c:	ldr	r3, [r4, #40]	; 0x28
   18220:	str	r3, [sp, #12]
   18224:	str	r9, [sp, #8]
   18228:	str	r5, [sp, #4]
   1822c:	ldr	r3, [r4]
   18230:	str	r3, [sp]
   18234:	ldr	r3, [sp, #32]
   18238:	ldr	r2, [sp, #28]
   1823c:	mov	r1, r8
   18240:	bl	16ce0 <__assert_fail@plt+0x5a10>
   18244:	str	fp, [r7]
   18248:	cmp	r6, #0
   1824c:	strne	sl, [r6]
   18250:	ldr	r0, [sp, #36]	; 0x24
   18254:	add	sp, sp, #44	; 0x2c
   18258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1825c:	andeq	ip, r2, r0, asr #5
   18260:	push	{r4, lr}
   18264:	mov	r3, r2
   18268:	mov	r2, #0
   1826c:	bl	18190 <__assert_fail@plt+0x6ec0>
   18270:	pop	{r4, pc}
   18274:	push	{r4, r5, r6, r7, r8, lr}
   18278:	ldr	r3, [pc, #140]	; 1830c <__assert_fail@plt+0x703c>
   1827c:	ldr	r7, [r3]
   18280:	ldr	r3, [r3, #4]
   18284:	cmp	r3, #1
   18288:	ble	182b4 <__assert_fail@plt+0x6fe4>
   1828c:	mov	r5, r7
   18290:	mov	r4, #1
   18294:	ldr	r6, [pc, #112]	; 1830c <__assert_fail@plt+0x703c>
   18298:	ldr	r0, [r5, #12]
   1829c:	bl	136fc <__assert_fail@plt+0x242c>
   182a0:	add	r4, r4, #1
   182a4:	add	r5, r5, #8
   182a8:	ldr	r3, [r6, #4]
   182ac:	cmp	r3, r4
   182b0:	bgt	18298 <__assert_fail@plt+0x6fc8>
   182b4:	ldr	r0, [r7, #4]
   182b8:	ldr	r3, [pc, #80]	; 18310 <__assert_fail@plt+0x7040>
   182bc:	cmp	r0, r3
   182c0:	beq	182dc <__assert_fail@plt+0x700c>
   182c4:	bl	136fc <__assert_fail@plt+0x242c>
   182c8:	ldr	r3, [pc, #60]	; 1830c <__assert_fail@plt+0x703c>
   182cc:	mov	r2, #256	; 0x100
   182d0:	str	r2, [r3, #8]
   182d4:	ldr	r2, [pc, #52]	; 18310 <__assert_fail@plt+0x7040>
   182d8:	str	r2, [r3, #12]
   182dc:	ldr	r3, [pc, #48]	; 18314 <__assert_fail@plt+0x7044>
   182e0:	cmp	r7, r3
   182e4:	beq	182fc <__assert_fail@plt+0x702c>
   182e8:	mov	r0, r7
   182ec:	bl	136fc <__assert_fail@plt+0x242c>
   182f0:	ldr	r3, [pc, #20]	; 1830c <__assert_fail@plt+0x703c>
   182f4:	add	r2, r3, #8
   182f8:	str	r2, [r3]
   182fc:	mov	r2, #1
   18300:	ldr	r3, [pc, #4]	; 1830c <__assert_fail@plt+0x703c>
   18304:	str	r2, [r3, #4]
   18308:	pop	{r4, r5, r6, r7, r8, pc}
   1830c:	andeq	ip, r2, r8, lsr r1
   18310:	andeq	ip, r2, r0, asr #3
   18314:	andeq	ip, r2, r0, asr #2
   18318:	push	{r4, lr}
   1831c:	ldr	r3, [pc, #8]	; 1832c <__assert_fail@plt+0x705c>
   18320:	mvn	r2, #0
   18324:	bl	17e50 <__assert_fail@plt+0x6b80>
   18328:	pop	{r4, pc}
   1832c:	andeq	ip, r2, r0, asr #5
   18330:	push	{r4, lr}
   18334:	ldr	r3, [pc, #4]	; 18340 <__assert_fail@plt+0x7070>
   18338:	bl	17e50 <__assert_fail@plt+0x6b80>
   1833c:	pop	{r4, pc}
   18340:	andeq	ip, r2, r0, asr #5
   18344:	push	{r4, lr}
   18348:	mov	r1, r0
   1834c:	mov	r0, #0
   18350:	bl	18318 <__assert_fail@plt+0x7048>
   18354:	pop	{r4, pc}
   18358:	push	{r4, lr}
   1835c:	mov	r2, r1
   18360:	mov	r1, r0
   18364:	mov	r0, #0
   18368:	bl	18330 <__assert_fail@plt+0x7060>
   1836c:	pop	{r4, pc}
   18370:	push	{r4, r5, lr}
   18374:	sub	sp, sp, #52	; 0x34
   18378:	mov	r4, r0
   1837c:	mov	r5, r2
   18380:	mov	r0, sp
   18384:	bl	16b78 <__assert_fail@plt+0x58a8>
   18388:	mov	r3, sp
   1838c:	mvn	r2, #0
   18390:	mov	r1, r5
   18394:	mov	r0, r4
   18398:	bl	17e50 <__assert_fail@plt+0x6b80>
   1839c:	add	sp, sp, #52	; 0x34
   183a0:	pop	{r4, r5, pc}
   183a4:	push	{r4, r5, r6, lr}
   183a8:	sub	sp, sp, #48	; 0x30
   183ac:	mov	r4, r0
   183b0:	mov	r5, r2
   183b4:	mov	r6, r3
   183b8:	mov	r0, sp
   183bc:	bl	16b78 <__assert_fail@plt+0x58a8>
   183c0:	mov	r3, sp
   183c4:	mov	r2, r6
   183c8:	mov	r1, r5
   183cc:	mov	r0, r4
   183d0:	bl	17e50 <__assert_fail@plt+0x6b80>
   183d4:	add	sp, sp, #48	; 0x30
   183d8:	pop	{r4, r5, r6, pc}
   183dc:	push	{r4, lr}
   183e0:	mov	r2, r1
   183e4:	mov	r1, r0
   183e8:	mov	r0, #0
   183ec:	bl	18370 <__assert_fail@plt+0x70a0>
   183f0:	pop	{r4, pc}
   183f4:	push	{r4, lr}
   183f8:	mov	r3, r2
   183fc:	mov	r2, r1
   18400:	mov	r1, r0
   18404:	mov	r0, #0
   18408:	bl	183a4 <__assert_fail@plt+0x70d4>
   1840c:	pop	{r4, pc}
   18410:	push	{r4, r5, r6, lr}
   18414:	sub	sp, sp, #48	; 0x30
   18418:	mov	r4, r0
   1841c:	mov	r5, r1
   18420:	mov	r6, r2
   18424:	mov	ip, sp
   18428:	ldr	lr, [pc, #64]	; 18470 <__assert_fail@plt+0x71a0>
   1842c:	ldm	lr!, {r0, r1, r2, r3}
   18430:	stmia	ip!, {r0, r1, r2, r3}
   18434:	ldm	lr!, {r0, r1, r2, r3}
   18438:	stmia	ip!, {r0, r1, r2, r3}
   1843c:	ldm	lr, {r0, r1, r2, r3}
   18440:	stm	ip, {r0, r1, r2, r3}
   18444:	mov	r2, #1
   18448:	mov	r1, r6
   1844c:	mov	r0, sp
   18450:	bl	1807c <__assert_fail@plt+0x6dac>
   18454:	mov	r3, sp
   18458:	mov	r2, r5
   1845c:	mov	r1, r4
   18460:	mov	r0, #0
   18464:	bl	17e50 <__assert_fail@plt+0x6b80>
   18468:	add	sp, sp, #48	; 0x30
   1846c:	pop	{r4, r5, r6, pc}
   18470:	andeq	ip, r2, r0, asr #5
   18474:	push	{r4, lr}
   18478:	mov	r2, r1
   1847c:	mvn	r1, #0
   18480:	bl	18410 <__assert_fail@plt+0x7140>
   18484:	pop	{r4, pc}
   18488:	push	{r4, lr}
   1848c:	mov	r1, #58	; 0x3a
   18490:	bl	18474 <__assert_fail@plt+0x71a4>
   18494:	pop	{r4, pc}
   18498:	push	{r4, lr}
   1849c:	mov	r2, #58	; 0x3a
   184a0:	bl	18410 <__assert_fail@plt+0x7140>
   184a4:	pop	{r4, pc}
   184a8:	push	{r4, r5, lr}
   184ac:	sub	sp, sp, #100	; 0x64
   184b0:	mov	r4, r0
   184b4:	mov	r5, r2
   184b8:	mov	r0, sp
   184bc:	bl	16b78 <__assert_fail@plt+0x58a8>
   184c0:	add	lr, sp, #48	; 0x30
   184c4:	mov	ip, sp
   184c8:	ldm	ip!, {r0, r1, r2, r3}
   184cc:	stmia	lr!, {r0, r1, r2, r3}
   184d0:	ldm	ip!, {r0, r1, r2, r3}
   184d4:	stmia	lr!, {r0, r1, r2, r3}
   184d8:	ldm	ip, {r0, r1, r2, r3}
   184dc:	stm	lr, {r0, r1, r2, r3}
   184e0:	mov	r2, #1
   184e4:	mov	r1, #58	; 0x3a
   184e8:	add	r0, sp, #48	; 0x30
   184ec:	bl	1807c <__assert_fail@plt+0x6dac>
   184f0:	add	r3, sp, #48	; 0x30
   184f4:	mvn	r2, #0
   184f8:	mov	r1, r5
   184fc:	mov	r0, r4
   18500:	bl	17e50 <__assert_fail@plt+0x6b80>
   18504:	add	sp, sp, #100	; 0x64
   18508:	pop	{r4, r5, pc}
   1850c:	push	{r4, r5, r6, r7, lr}
   18510:	sub	sp, sp, #52	; 0x34
   18514:	mov	r4, r0
   18518:	mov	r6, r1
   1851c:	mov	r7, r2
   18520:	mov	r5, r3
   18524:	mov	ip, sp
   18528:	ldr	lr, [pc, #64]	; 18570 <__assert_fail@plt+0x72a0>
   1852c:	ldm	lr!, {r0, r1, r2, r3}
   18530:	stmia	ip!, {r0, r1, r2, r3}
   18534:	ldm	lr!, {r0, r1, r2, r3}
   18538:	stmia	ip!, {r0, r1, r2, r3}
   1853c:	ldm	lr, {r0, r1, r2, r3}
   18540:	stm	ip, {r0, r1, r2, r3}
   18544:	mov	r2, r7
   18548:	mov	r1, r6
   1854c:	mov	r0, sp
   18550:	bl	180d8 <__assert_fail@plt+0x6e08>
   18554:	mov	r3, sp
   18558:	ldr	r2, [sp, #72]	; 0x48
   1855c:	mov	r1, r5
   18560:	mov	r0, r4
   18564:	bl	17e50 <__assert_fail@plt+0x6b80>
   18568:	add	sp, sp, #52	; 0x34
   1856c:	pop	{r4, r5, r6, r7, pc}
   18570:	andeq	ip, r2, r0, asr #5
   18574:	push	{lr}		; (str lr, [sp, #-4]!)
   18578:	sub	sp, sp, #12
   1857c:	mvn	ip, #0
   18580:	str	ip, [sp]
   18584:	bl	1850c <__assert_fail@plt+0x723c>
   18588:	add	sp, sp, #12
   1858c:	pop	{pc}		; (ldr pc, [sp], #4)
   18590:	push	{r4, lr}
   18594:	mov	r3, r2
   18598:	mov	r2, r1
   1859c:	mov	r1, r0
   185a0:	mov	r0, #0
   185a4:	bl	18574 <__assert_fail@plt+0x72a4>
   185a8:	pop	{r4, pc}
   185ac:	push	{lr}		; (str lr, [sp, #-4]!)
   185b0:	sub	sp, sp, #12
   185b4:	str	r3, [sp]
   185b8:	mov	r3, r2
   185bc:	mov	r2, r1
   185c0:	mov	r1, r0
   185c4:	mov	r0, #0
   185c8:	bl	1850c <__assert_fail@plt+0x723c>
   185cc:	add	sp, sp, #12
   185d0:	pop	{pc}		; (ldr pc, [sp], #4)
   185d4:	push	{r4, lr}
   185d8:	ldr	r3, [pc, #4]	; 185e4 <__assert_fail@plt+0x7314>
   185dc:	bl	17e50 <__assert_fail@plt+0x6b80>
   185e0:	pop	{r4, pc}
   185e4:	andeq	ip, r2, r8, asr #2
   185e8:	push	{r4, lr}
   185ec:	mov	r2, r1
   185f0:	mov	r1, r0
   185f4:	mov	r0, #0
   185f8:	bl	185d4 <__assert_fail@plt+0x7304>
   185fc:	pop	{r4, pc}
   18600:	push	{r4, lr}
   18604:	mvn	r2, #0
   18608:	bl	185d4 <__assert_fail@plt+0x7304>
   1860c:	pop	{r4, pc}
   18610:	push	{r4, lr}
   18614:	mov	r1, r0
   18618:	mov	r0, #0
   1861c:	bl	18600 <__assert_fail@plt+0x7330>
   18620:	pop	{r4, pc}
   18624:	push	{r4, lr}
   18628:	sub	sp, sp, #104	; 0x68
   1862c:	mov	r4, r0
   18630:	mov	r2, sp
   18634:	ldr	r1, [pc, #48]	; 1866c <__assert_fail@plt+0x739c>
   18638:	mov	r0, #3
   1863c:	bl	112ac <__lxstat64@plt>
   18640:	cmp	r0, #0
   18644:	bne	18664 <__assert_fail@plt+0x7394>
   18648:	ldrd	r2, [sp, #96]	; 0x60
   1864c:	strd	r2, [r4]
   18650:	ldrd	r2, [sp]
   18654:	strd	r2, [r4, #8]
   18658:	mov	r0, r4
   1865c:	add	sp, sp, #104	; 0x68
   18660:	pop	{r4, pc}
   18664:	mov	r0, #0
   18668:	b	1865c <__assert_fail@plt+0x738c>
   1866c:	andeq	sl, r1, ip, asr #23
   18670:	push	{r4, r5, r6, r7, r8, lr}
   18674:	mov	r4, r0
   18678:	cmp	r0, #2
   1867c:	bls	18688 <__assert_fail@plt+0x73b8>
   18680:	mov	r0, r4
   18684:	pop	{r4, r5, r6, r7, r8, pc}
   18688:	bl	199a4 <__assert_fail@plt+0x86d4>
   1868c:	mov	r6, r0
   18690:	bl	11180 <__errno_location@plt>
   18694:	mov	r5, r0
   18698:	ldr	r7, [r0]
   1869c:	mov	r0, r4
   186a0:	bl	112a0 <close@plt>
   186a4:	str	r7, [r5]
   186a8:	mov	r4, r6
   186ac:	b	18680 <__assert_fail@plt+0x73b0>
   186b0:	push	{r4, r5, r6, lr}
   186b4:	sub	sp, sp, #32
   186b8:	mov	r4, r0
   186bc:	ldr	r5, [sp, #48]	; 0x30
   186c0:	ldr	r6, [sp, #52]	; 0x34
   186c4:	cmp	r1, #0
   186c8:	beq	18780 <__assert_fail@plt+0x74b0>
   186cc:	str	r3, [sp, #4]
   186d0:	str	r2, [sp]
   186d4:	mov	r3, r1
   186d8:	ldr	r2, [pc, #940]	; 18a8c <__assert_fail@plt+0x77bc>
   186dc:	mov	r1, #1
   186e0:	bl	111bc <__fprintf_chk@plt>
   186e4:	mov	r2, #5
   186e8:	ldr	r1, [pc, #928]	; 18a90 <__assert_fail@plt+0x77c0>
   186ec:	mov	r0, #0
   186f0:	bl	11060 <dcgettext@plt>
   186f4:	ldr	r3, [pc, #920]	; 18a94 <__assert_fail@plt+0x77c4>
   186f8:	str	r3, [sp]
   186fc:	mov	r3, r0
   18700:	ldr	r2, [pc, #912]	; 18a98 <__assert_fail@plt+0x77c8>
   18704:	mov	r1, #1
   18708:	mov	r0, r4
   1870c:	bl	111bc <__fprintf_chk@plt>
   18710:	mov	r1, r4
   18714:	mov	r0, #10
   18718:	bl	11054 <fputc_unlocked@plt>
   1871c:	mov	r2, #5
   18720:	ldr	r1, [pc, #884]	; 18a9c <__assert_fail@plt+0x77cc>
   18724:	mov	r0, #0
   18728:	bl	11060 <dcgettext@plt>
   1872c:	ldr	r3, [pc, #876]	; 18aa0 <__assert_fail@plt+0x77d0>
   18730:	mov	r2, r0
   18734:	mov	r1, #1
   18738:	mov	r0, r4
   1873c:	bl	111bc <__fprintf_chk@plt>
   18740:	mov	r1, r4
   18744:	mov	r0, #10
   18748:	bl	11054 <fputc_unlocked@plt>
   1874c:	cmp	r6, #9
   18750:	ldrls	pc, [pc, r6, lsl #2]
   18754:	b	18a24 <__assert_fail@plt+0x7754>
   18758:			; <UNDEFINED> instruction: 0x000187bc
   1875c:	muleq	r1, r8, r7
   18760:	andeq	r8, r1, r4, asr #15
   18764:	strdeq	r8, [r1], -r4
   18768:	andeq	r8, r1, ip, lsr #16
   1876c:	andeq	r8, r1, ip, ror #16
   18770:			; <UNDEFINED> instruction: 0x000188b4
   18774:	andeq	r8, r1, r4, lsl #18
   18778:	andeq	r8, r1, ip, asr r9
   1877c:			; <UNDEFINED> instruction: 0x000189bc
   18780:	str	r3, [sp]
   18784:	mov	r3, r2
   18788:	ldr	r2, [pc, #788]	; 18aa4 <__assert_fail@plt+0x77d4>
   1878c:	mov	r1, #1
   18790:	bl	111bc <__fprintf_chk@plt>
   18794:	b	186e4 <__assert_fail@plt+0x7414>
   18798:	mov	r2, #5
   1879c:	ldr	r1, [pc, #772]	; 18aa8 <__assert_fail@plt+0x77d8>
   187a0:	mov	r0, #0
   187a4:	bl	11060 <dcgettext@plt>
   187a8:	ldr	r3, [r5]
   187ac:	mov	r2, r0
   187b0:	mov	r1, #1
   187b4:	mov	r0, r4
   187b8:	bl	111bc <__fprintf_chk@plt>
   187bc:	add	sp, sp, #32
   187c0:	pop	{r4, r5, r6, pc}
   187c4:	mov	r2, #5
   187c8:	ldr	r1, [pc, #732]	; 18aac <__assert_fail@plt+0x77dc>
   187cc:	mov	r0, #0
   187d0:	bl	11060 <dcgettext@plt>
   187d4:	ldr	r3, [r5]
   187d8:	ldr	r2, [r5, #4]
   187dc:	str	r2, [sp]
   187e0:	mov	r2, r0
   187e4:	mov	r1, #1
   187e8:	mov	r0, r4
   187ec:	bl	111bc <__fprintf_chk@plt>
   187f0:	b	187bc <__assert_fail@plt+0x74ec>
   187f4:	mov	r2, #5
   187f8:	ldr	r1, [pc, #688]	; 18ab0 <__assert_fail@plt+0x77e0>
   187fc:	mov	r0, #0
   18800:	bl	11060 <dcgettext@plt>
   18804:	ldr	r3, [r5]
   18808:	ldr	r2, [r5, #8]
   1880c:	str	r2, [sp, #4]
   18810:	ldr	r2, [r5, #4]
   18814:	str	r2, [sp]
   18818:	mov	r2, r0
   1881c:	mov	r1, #1
   18820:	mov	r0, r4
   18824:	bl	111bc <__fprintf_chk@plt>
   18828:	b	187bc <__assert_fail@plt+0x74ec>
   1882c:	mov	r2, #5
   18830:	ldr	r1, [pc, #636]	; 18ab4 <__assert_fail@plt+0x77e4>
   18834:	mov	r0, #0
   18838:	bl	11060 <dcgettext@plt>
   1883c:	ldr	r3, [r5]
   18840:	ldr	r2, [r5, #12]
   18844:	str	r2, [sp, #8]
   18848:	ldr	r2, [r5, #8]
   1884c:	str	r2, [sp, #4]
   18850:	ldr	r2, [r5, #4]
   18854:	str	r2, [sp]
   18858:	mov	r2, r0
   1885c:	mov	r1, #1
   18860:	mov	r0, r4
   18864:	bl	111bc <__fprintf_chk@plt>
   18868:	b	187bc <__assert_fail@plt+0x74ec>
   1886c:	mov	r2, #5
   18870:	ldr	r1, [pc, #576]	; 18ab8 <__assert_fail@plt+0x77e8>
   18874:	mov	r0, #0
   18878:	bl	11060 <dcgettext@plt>
   1887c:	ldr	r3, [r5]
   18880:	ldr	r2, [r5, #16]
   18884:	str	r2, [sp, #12]
   18888:	ldr	r2, [r5, #12]
   1888c:	str	r2, [sp, #8]
   18890:	ldr	r2, [r5, #8]
   18894:	str	r2, [sp, #4]
   18898:	ldr	r2, [r5, #4]
   1889c:	str	r2, [sp]
   188a0:	mov	r2, r0
   188a4:	mov	r1, #1
   188a8:	mov	r0, r4
   188ac:	bl	111bc <__fprintf_chk@plt>
   188b0:	b	187bc <__assert_fail@plt+0x74ec>
   188b4:	mov	r2, #5
   188b8:	ldr	r1, [pc, #508]	; 18abc <__assert_fail@plt+0x77ec>
   188bc:	mov	r0, #0
   188c0:	bl	11060 <dcgettext@plt>
   188c4:	ldr	r3, [r5]
   188c8:	ldr	r2, [r5, #20]
   188cc:	str	r2, [sp, #16]
   188d0:	ldr	r2, [r5, #16]
   188d4:	str	r2, [sp, #12]
   188d8:	ldr	r2, [r5, #12]
   188dc:	str	r2, [sp, #8]
   188e0:	ldr	r2, [r5, #8]
   188e4:	str	r2, [sp, #4]
   188e8:	ldr	r2, [r5, #4]
   188ec:	str	r2, [sp]
   188f0:	mov	r2, r0
   188f4:	mov	r1, #1
   188f8:	mov	r0, r4
   188fc:	bl	111bc <__fprintf_chk@plt>
   18900:	b	187bc <__assert_fail@plt+0x74ec>
   18904:	mov	r2, #5
   18908:	ldr	r1, [pc, #432]	; 18ac0 <__assert_fail@plt+0x77f0>
   1890c:	mov	r0, #0
   18910:	bl	11060 <dcgettext@plt>
   18914:	ldr	r3, [r5]
   18918:	ldr	r2, [r5, #24]
   1891c:	str	r2, [sp, #20]
   18920:	ldr	r2, [r5, #20]
   18924:	str	r2, [sp, #16]
   18928:	ldr	r2, [r5, #16]
   1892c:	str	r2, [sp, #12]
   18930:	ldr	r2, [r5, #12]
   18934:	str	r2, [sp, #8]
   18938:	ldr	r2, [r5, #8]
   1893c:	str	r2, [sp, #4]
   18940:	ldr	r2, [r5, #4]
   18944:	str	r2, [sp]
   18948:	mov	r2, r0
   1894c:	mov	r1, #1
   18950:	mov	r0, r4
   18954:	bl	111bc <__fprintf_chk@plt>
   18958:	b	187bc <__assert_fail@plt+0x74ec>
   1895c:	mov	r2, #5
   18960:	ldr	r1, [pc, #348]	; 18ac4 <__assert_fail@plt+0x77f4>
   18964:	mov	r0, #0
   18968:	bl	11060 <dcgettext@plt>
   1896c:	ldr	r3, [r5]
   18970:	ldr	r2, [r5, #28]
   18974:	str	r2, [sp, #24]
   18978:	ldr	r2, [r5, #24]
   1897c:	str	r2, [sp, #20]
   18980:	ldr	r2, [r5, #20]
   18984:	str	r2, [sp, #16]
   18988:	ldr	r2, [r5, #16]
   1898c:	str	r2, [sp, #12]
   18990:	ldr	r2, [r5, #12]
   18994:	str	r2, [sp, #8]
   18998:	ldr	r2, [r5, #8]
   1899c:	str	r2, [sp, #4]
   189a0:	ldr	r2, [r5, #4]
   189a4:	str	r2, [sp]
   189a8:	mov	r2, r0
   189ac:	mov	r1, #1
   189b0:	mov	r0, r4
   189b4:	bl	111bc <__fprintf_chk@plt>
   189b8:	b	187bc <__assert_fail@plt+0x74ec>
   189bc:	mov	r2, #5
   189c0:	ldr	r1, [pc, #256]	; 18ac8 <__assert_fail@plt+0x77f8>
   189c4:	mov	r0, #0
   189c8:	bl	11060 <dcgettext@plt>
   189cc:	ldr	r3, [r5]
   189d0:	ldr	r2, [r5, #32]
   189d4:	str	r2, [sp, #28]
   189d8:	ldr	r2, [r5, #28]
   189dc:	str	r2, [sp, #24]
   189e0:	ldr	r2, [r5, #24]
   189e4:	str	r2, [sp, #20]
   189e8:	ldr	r2, [r5, #20]
   189ec:	str	r2, [sp, #16]
   189f0:	ldr	r2, [r5, #16]
   189f4:	str	r2, [sp, #12]
   189f8:	ldr	r2, [r5, #12]
   189fc:	str	r2, [sp, #8]
   18a00:	ldr	r2, [r5, #8]
   18a04:	str	r2, [sp, #4]
   18a08:	ldr	r2, [r5, #4]
   18a0c:	str	r2, [sp]
   18a10:	mov	r2, r0
   18a14:	mov	r1, #1
   18a18:	mov	r0, r4
   18a1c:	bl	111bc <__fprintf_chk@plt>
   18a20:	b	187bc <__assert_fail@plt+0x74ec>
   18a24:	mov	r2, #5
   18a28:	ldr	r1, [pc, #156]	; 18acc <__assert_fail@plt+0x77fc>
   18a2c:	mov	r0, #0
   18a30:	bl	11060 <dcgettext@plt>
   18a34:	ldr	r3, [r5]
   18a38:	ldr	r2, [r5, #32]
   18a3c:	str	r2, [sp, #28]
   18a40:	ldr	r2, [r5, #28]
   18a44:	str	r2, [sp, #24]
   18a48:	ldr	r2, [r5, #24]
   18a4c:	str	r2, [sp, #20]
   18a50:	ldr	r2, [r5, #20]
   18a54:	str	r2, [sp, #16]
   18a58:	ldr	r2, [r5, #16]
   18a5c:	str	r2, [sp, #12]
   18a60:	ldr	r2, [r5, #12]
   18a64:	str	r2, [sp, #8]
   18a68:	ldr	r2, [r5, #8]
   18a6c:	str	r2, [sp, #4]
   18a70:	ldr	r2, [r5, #4]
   18a74:	str	r2, [sp]
   18a78:	mov	r2, r0
   18a7c:	mov	r1, #1
   18a80:	mov	r0, r4
   18a84:	bl	111bc <__fprintf_chk@plt>
   18a88:	b	187bc <__assert_fail@plt+0x74ec>
   18a8c:	ldrdeq	fp, [r1], -r4
   18a90:	andeq	fp, r1, r8, ror #7
   18a94:	andeq	r0, r0, r6, ror #15
   18a98:	andeq	fp, r1, r8, lsr #13
   18a9c:	andeq	fp, r1, ip, ror #7
   18aa0:	muleq	r1, r8, r4
   18aa4:	andeq	fp, r1, r0, ror #7
   18aa8:			; <UNDEFINED> instruction: 0x0001b4bc
   18aac:	andeq	fp, r1, ip, asr #9
   18ab0:	andeq	fp, r1, r4, ror #9
   18ab4:	andeq	fp, r1, r0, lsl #10
   18ab8:	andeq	fp, r1, r0, lsr #10
   18abc:	andeq	fp, r1, r4, asr #10
   18ac0:	andeq	fp, r1, ip, ror #10
   18ac4:	muleq	r1, r8, r5
   18ac8:	andeq	fp, r1, r8, asr #11
   18acc:	strdeq	fp, [r1], -ip
   18ad0:	push	{r4, r5, lr}
   18ad4:	sub	sp, sp, #12
   18ad8:	ldr	r5, [sp, #24]
   18adc:	ldr	ip, [r5]
   18ae0:	cmp	ip, #0
   18ae4:	beq	18b14 <__assert_fail@plt+0x7844>
   18ae8:	mov	lr, r5
   18aec:	mov	ip, #0
   18af0:	add	ip, ip, #1
   18af4:	ldr	r4, [lr, #4]!
   18af8:	cmp	r4, #0
   18afc:	bne	18af0 <__assert_fail@plt+0x7820>
   18b00:	str	ip, [sp, #4]
   18b04:	str	r5, [sp]
   18b08:	bl	186b0 <__assert_fail@plt+0x73e0>
   18b0c:	add	sp, sp, #12
   18b10:	pop	{r4, r5, pc}
   18b14:	mov	ip, #0
   18b18:	b	18b00 <__assert_fail@plt+0x7830>
   18b1c:	push	{r4, r5, lr}
   18b20:	sub	sp, sp, #52	; 0x34
   18b24:	ldr	r4, [sp, #64]	; 0x40
   18b28:	sub	r4, r4, #4
   18b2c:	add	r5, sp, #4
   18b30:	mov	ip, #0
   18b34:	ldr	lr, [r4, #4]!
   18b38:	str	lr, [r5, #4]!
   18b3c:	cmp	lr, #0
   18b40:	beq	18b50 <__assert_fail@plt+0x7880>
   18b44:	add	ip, ip, #1
   18b48:	cmp	ip, #10
   18b4c:	bne	18b34 <__assert_fail@plt+0x7864>
   18b50:	str	ip, [sp, #4]
   18b54:	add	ip, sp, #8
   18b58:	str	ip, [sp]
   18b5c:	bl	186b0 <__assert_fail@plt+0x73e0>
   18b60:	add	sp, sp, #52	; 0x34
   18b64:	pop	{r4, r5, pc}
   18b68:	push	{r3}		; (str r3, [sp, #-4]!)
   18b6c:	push	{lr}		; (str lr, [sp, #-4]!)
   18b70:	sub	sp, sp, #16
   18b74:	add	r3, sp, #24
   18b78:	str	r3, [sp, #12]
   18b7c:	str	r3, [sp]
   18b80:	ldr	r3, [sp, #20]
   18b84:	bl	18b1c <__assert_fail@plt+0x784c>
   18b88:	add	sp, sp, #16
   18b8c:	pop	{lr}		; (ldr lr, [sp], #4)
   18b90:	add	sp, sp, #4
   18b94:	bx	lr
   18b98:	push	{r4, lr}
   18b9c:	ldr	r3, [pc, #112]	; 18c14 <__assert_fail@plt+0x7944>
   18ba0:	ldr	r1, [r3]
   18ba4:	mov	r0, #10
   18ba8:	bl	11054 <fputc_unlocked@plt>
   18bac:	mov	r2, #5
   18bb0:	ldr	r1, [pc, #96]	; 18c18 <__assert_fail@plt+0x7948>
   18bb4:	mov	r0, #0
   18bb8:	bl	11060 <dcgettext@plt>
   18bbc:	ldr	r2, [pc, #88]	; 18c1c <__assert_fail@plt+0x794c>
   18bc0:	mov	r1, r0
   18bc4:	mov	r0, #1
   18bc8:	bl	111a4 <__printf_chk@plt>
   18bcc:	mov	r2, #5
   18bd0:	ldr	r1, [pc, #72]	; 18c20 <__assert_fail@plt+0x7950>
   18bd4:	mov	r0, #0
   18bd8:	bl	11060 <dcgettext@plt>
   18bdc:	ldr	r3, [pc, #64]	; 18c24 <__assert_fail@plt+0x7954>
   18be0:	ldr	r2, [pc, #64]	; 18c28 <__assert_fail@plt+0x7958>
   18be4:	mov	r1, r0
   18be8:	mov	r0, #1
   18bec:	bl	111a4 <__printf_chk@plt>
   18bf0:	mov	r2, #5
   18bf4:	ldr	r1, [pc, #48]	; 18c2c <__assert_fail@plt+0x795c>
   18bf8:	mov	r0, #0
   18bfc:	bl	11060 <dcgettext@plt>
   18c00:	ldr	r2, [pc, #40]	; 18c30 <__assert_fail@plt+0x7960>
   18c04:	mov	r1, r0
   18c08:	mov	r0, #1
   18c0c:	bl	111a4 <__printf_chk@plt>
   18c10:	pop	{r4, pc}
   18c14:	muleq	r2, r4, r1
   18c18:	andeq	fp, r1, r8, lsr r6
   18c1c:	andeq	fp, r1, r8, asr #1
   18c20:	andeq	fp, r1, ip, asr #12
   18c24:			; <UNDEFINED> instruction: 0x0001a9b4
   18c28:	ldrdeq	sl, [r1], -ip
   18c2c:	andeq	fp, r1, r0, ror #12
   18c30:	andeq	fp, r1, r8, lsl #13
   18c34:	ldr	r3, [pc, #64]	; 18c7c <__assert_fail@plt+0x79ac>
   18c38:	ldrb	r3, [r3]
   18c3c:	cmp	r3, #0
   18c40:	beq	18c50 <__assert_fail@plt+0x7980>
   18c44:	ldr	r3, [pc, #48]	; 18c7c <__assert_fail@plt+0x79ac>
   18c48:	ldrb	r0, [r3, #1]
   18c4c:	bx	lr
   18c50:	push	{r4, lr}
   18c54:	bl	11084 <geteuid@plt>
   18c58:	ldr	r3, [pc, #28]	; 18c7c <__assert_fail@plt+0x79ac>
   18c5c:	clz	r0, r0
   18c60:	lsr	r0, r0, #5
   18c64:	strb	r0, [r3, #1]
   18c68:	mov	r2, #1
   18c6c:	strb	r2, [r3]
   18c70:	ldr	r3, [pc, #4]	; 18c7c <__assert_fail@plt+0x79ac>
   18c74:	ldrb	r0, [r3, #1]
   18c78:	pop	{r4, pc}
   18c7c:	strdeq	ip, [r2], -r0
   18c80:	push	{r4, lr}
   18c84:	bl	193b0 <__assert_fail@plt+0x80e0>
   18c88:	cmp	r0, #0
   18c8c:	popne	{r4, pc}
   18c90:	bl	19224 <__assert_fail@plt+0x7f54>
   18c94:	push	{r4, lr}
   18c98:	bl	193b0 <__assert_fail@plt+0x80e0>
   18c9c:	cmp	r0, #0
   18ca0:	popne	{r4, pc}
   18ca4:	bl	19224 <__assert_fail@plt+0x7f54>
   18ca8:	push	{r4, lr}
   18cac:	bl	18c80 <__assert_fail@plt+0x79b0>
   18cb0:	pop	{r4, pc}
   18cb4:	push	{r4, r5, r6, lr}
   18cb8:	mov	r5, r0
   18cbc:	mov	r4, r1
   18cc0:	bl	193e0 <__assert_fail@plt+0x8110>
   18cc4:	cmp	r0, #0
   18cc8:	popne	{r4, r5, r6, pc}
   18ccc:	adds	r4, r4, #0
   18cd0:	movne	r4, #1
   18cd4:	cmp	r5, #0
   18cd8:	orreq	r4, r4, #1
   18cdc:	cmp	r4, #0
   18ce0:	popeq	{r4, r5, r6, pc}
   18ce4:	bl	19224 <__assert_fail@plt+0x7f54>
   18ce8:	push	{r4, lr}
   18cec:	cmp	r1, #0
   18cf0:	orreq	r1, r1, #1
   18cf4:	bl	193e0 <__assert_fail@plt+0x8110>
   18cf8:	cmp	r0, #0
   18cfc:	popne	{r4, pc}
   18d00:	bl	19224 <__assert_fail@plt+0x7f54>
   18d04:	push	{r4, r5, r6, lr}
   18d08:	mov	r6, r0
   18d0c:	mov	r5, r1
   18d10:	mov	r4, r2
   18d14:	bl	19958 <__assert_fail@plt+0x8688>
   18d18:	cmp	r0, #0
   18d1c:	popne	{r4, r5, r6, pc}
   18d20:	cmp	r6, #0
   18d24:	beq	18d34 <__assert_fail@plt+0x7a64>
   18d28:	cmp	r5, #0
   18d2c:	cmpne	r4, #0
   18d30:	popeq	{r4, r5, r6, pc}
   18d34:	bl	19224 <__assert_fail@plt+0x7f54>
   18d38:	push	{r4, lr}
   18d3c:	bl	18d04 <__assert_fail@plt+0x7a34>
   18d40:	pop	{r4, pc}
   18d44:	push	{r4, lr}
   18d48:	mov	ip, r1
   18d4c:	mov	r3, r2
   18d50:	cmp	r2, #0
   18d54:	cmpne	r1, #0
   18d58:	moveq	r3, #1
   18d5c:	moveq	ip, r3
   18d60:	mov	r2, r3
   18d64:	mov	r1, ip
   18d68:	bl	19958 <__assert_fail@plt+0x8688>
   18d6c:	cmp	r0, #0
   18d70:	popne	{r4, pc}
   18d74:	bl	19224 <__assert_fail@plt+0x7f54>
   18d78:	push	{r4, lr}
   18d7c:	mov	r2, r1
   18d80:	mov	r1, r0
   18d84:	mov	r0, #0
   18d88:	bl	18d04 <__assert_fail@plt+0x7a34>
   18d8c:	pop	{r4, pc}
   18d90:	push	{r4, lr}
   18d94:	mov	r2, r1
   18d98:	mov	r1, r0
   18d9c:	mov	r0, #0
   18da0:	bl	18d44 <__assert_fail@plt+0x7a74>
   18da4:	pop	{r4, pc}
   18da8:	push	{r4, r5, r6, r7, r8, lr}
   18dac:	mov	r5, r1
   18db0:	mov	r6, r2
   18db4:	ldr	r4, [r1]
   18db8:	subs	r7, r0, #0
   18dbc:	beq	18dd8 <__assert_fail@plt+0x7b08>
   18dc0:	lsr	r2, r4, #1
   18dc4:	add	r3, r2, #1
   18dc8:	mvn	r3, r3
   18dcc:	cmp	r4, r3
   18dd0:	bls	18dfc <__assert_fail@plt+0x7b2c>
   18dd4:	bl	19224 <__assert_fail@plt+0x7f54>
   18dd8:	cmp	r4, #0
   18ddc:	bne	18e04 <__assert_fail@plt+0x7b34>
   18de0:	mov	r1, r2
   18de4:	mov	r0, #64	; 0x40
   18de8:	bl	19ac0 <__assert_fail@plt+0x87f0>
   18dec:	cmp	r0, #0
   18df0:	movne	r4, r0
   18df4:	addeq	r4, r0, #1
   18df8:	b	18e04 <__assert_fail@plt+0x7b34>
   18dfc:	add	r4, r4, #1
   18e00:	add	r4, r4, r2
   18e04:	mov	r2, r6
   18e08:	mov	r1, r4
   18e0c:	mov	r0, r7
   18e10:	bl	18d04 <__assert_fail@plt+0x7a34>
   18e14:	str	r4, [r5]
   18e18:	pop	{r4, r5, r6, r7, r8, pc}
   18e1c:	push	{r4, lr}
   18e20:	mov	r2, #1
   18e24:	bl	18da8 <__assert_fail@plt+0x7ad8>
   18e28:	pop	{r4, pc}
   18e2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e30:	sub	sp, sp, #12
   18e34:	mov	fp, r0
   18e38:	mov	sl, r1
   18e3c:	mov	r9, r2
   18e40:	mov	r7, r3
   18e44:	ldr	r6, [sp, #48]	; 0x30
   18e48:	ldr	r5, [r1]
   18e4c:	asrs	r4, r5, #1
   18e50:	bmi	18fac <__assert_fail@plt+0x7cdc>
   18e54:	cmp	r5, #0
   18e58:	blt	18fc0 <__assert_fail@plt+0x7cf0>
   18e5c:	mvn	r3, #-2147483648	; 0x80000000
   18e60:	sub	r3, r3, r4
   18e64:	cmp	r5, r3
   18e68:	movle	r3, #0
   18e6c:	movgt	r3, #1
   18e70:	cmp	r3, #0
   18e74:	addeq	r4, r4, r5
   18e78:	mvnne	r4, #-2147483648	; 0x80000000
   18e7c:	mvn	r8, r7
   18e80:	lsr	r8, r8, #31
   18e84:	cmp	r7, r4
   18e88:	movge	r3, #0
   18e8c:	andlt	r3, r8, #1
   18e90:	cmp	r3, #0
   18e94:	movne	r4, r7
   18e98:	cmp	r6, #0
   18e9c:	blt	18fd4 <__assert_fail@plt+0x7d04>
   18ea0:	cmp	r6, #0
   18ea4:	beq	19080 <__assert_fail@plt+0x7db0>
   18ea8:	cmp	r4, #0
   18eac:	blt	19030 <__assert_fail@plt+0x7d60>
   18eb0:	mov	r1, r6
   18eb4:	mvn	r0, #-2147483648	; 0x80000000
   18eb8:	bl	19ccc <__assert_fail@plt+0x89fc>
   18ebc:	cmp	r0, r4
   18ec0:	movge	r0, #0
   18ec4:	movlt	r0, #1
   18ec8:	cmp	r0, #0
   18ecc:	mvnne	r3, #-2147483648	; 0x80000000
   18ed0:	strne	r3, [sp, #4]
   18ed4:	beq	19068 <__assert_fail@plt+0x7d98>
   18ed8:	mov	r1, r6
   18edc:	ldr	r0, [sp, #4]
   18ee0:	bl	19ccc <__assert_fail@plt+0x89fc>
   18ee4:	mov	r4, r0
   18ee8:	mov	r1, r6
   18eec:	ldr	r0, [sp, #4]
   18ef0:	bl	19eec <__assert_fail@plt+0x8c1c>
   18ef4:	ldr	r3, [sp, #4]
   18ef8:	sub	r1, r3, r1
   18efc:	cmp	fp, #0
   18f00:	moveq	r3, #0
   18f04:	streq	r3, [sl]
   18f08:	sub	r3, r4, r5
   18f0c:	cmp	r3, r9
   18f10:	bge	18f98 <__assert_fail@plt+0x7cc8>
   18f14:	cmp	r9, #0
   18f18:	blt	1908c <__assert_fail@plt+0x7dbc>
   18f1c:	cmp	r5, #0
   18f20:	blt	190a0 <__assert_fail@plt+0x7dd0>
   18f24:	mvn	r3, #-2147483648	; 0x80000000
   18f28:	sub	r3, r3, r9
   18f2c:	cmp	r5, r3
   18f30:	movle	r3, #0
   18f34:	movgt	r3, #1
   18f38:	cmp	r3, #0
   18f3c:	bne	19148 <__assert_fail@plt+0x7e78>
   18f40:	add	r5, r5, r9
   18f44:	mov	r4, r5
   18f48:	cmp	r7, r5
   18f4c:	movge	r7, #0
   18f50:	andlt	r7, r8, #1
   18f54:	cmp	r7, #0
   18f58:	bne	19148 <__assert_fail@plt+0x7e78>
   18f5c:	cmp	r6, #0
   18f60:	blt	190b4 <__assert_fail@plt+0x7de4>
   18f64:	cmp	r6, #0
   18f68:	beq	18f94 <__assert_fail@plt+0x7cc4>
   18f6c:	cmp	r5, #0
   18f70:	blt	19110 <__assert_fail@plt+0x7e40>
   18f74:	mov	r1, r6
   18f78:	mvn	r0, #-2147483648	; 0x80000000
   18f7c:	bl	19ccc <__assert_fail@plt+0x89fc>
   18f80:	cmp	r5, r0
   18f84:	movle	r0, #0
   18f88:	movgt	r0, #1
   18f8c:	cmp	r0, #0
   18f90:	bne	19148 <__assert_fail@plt+0x7e78>
   18f94:	mul	r1, r5, r6
   18f98:	mov	r0, fp
   18f9c:	bl	18cb4 <__assert_fail@plt+0x79e4>
   18fa0:	str	r4, [sl]
   18fa4:	add	sp, sp, #12
   18fa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fac:	rsb	r3, r4, #-2147483648	; 0x80000000
   18fb0:	cmp	r5, r3
   18fb4:	movge	r3, #0
   18fb8:	movlt	r3, #1
   18fbc:	b	18e70 <__assert_fail@plt+0x7ba0>
   18fc0:	rsb	r3, r5, #-2147483648	; 0x80000000
   18fc4:	cmp	r4, r3
   18fc8:	movge	r3, #0
   18fcc:	movlt	r3, #1
   18fd0:	b	18e70 <__assert_fail@plt+0x7ba0>
   18fd4:	cmp	r4, #0
   18fd8:	blt	19000 <__assert_fail@plt+0x7d30>
   18fdc:	cmn	r6, #1
   18fe0:	beq	1901c <__assert_fail@plt+0x7d4c>
   18fe4:	mov	r1, r6
   18fe8:	mov	r0, #-2147483648	; 0x80000000
   18fec:	bl	19ccc <__assert_fail@plt+0x89fc>
   18ff0:	cmp	r0, r4
   18ff4:	movge	r0, #0
   18ff8:	movlt	r0, #1
   18ffc:	b	18ec8 <__assert_fail@plt+0x7bf8>
   19000:	mov	r1, r6
   19004:	mvn	r0, #-2147483648	; 0x80000000
   19008:	bl	19ccc <__assert_fail@plt+0x89fc>
   1900c:	cmp	r0, r4
   19010:	movle	r0, #0
   19014:	movgt	r0, #1
   19018:	b	18ec8 <__assert_fail@plt+0x7bf8>
   1901c:	add	r0, r4, #-2147483648	; 0x80000000
   19020:	cmp	r0, #0
   19024:	movle	r0, #0
   19028:	movgt	r0, #1
   1902c:	b	18ec8 <__assert_fail@plt+0x7bf8>
   19030:	cmn	r4, #1
   19034:	beq	19054 <__assert_fail@plt+0x7d84>
   19038:	mov	r1, r4
   1903c:	mov	r0, #-2147483648	; 0x80000000
   19040:	bl	19ccc <__assert_fail@plt+0x89fc>
   19044:	cmp	r6, r0
   19048:	movle	r0, #0
   1904c:	movgt	r0, #1
   19050:	b	18ec8 <__assert_fail@plt+0x7bf8>
   19054:	add	r0, r6, #-2147483648	; 0x80000000
   19058:	cmp	r0, #0
   1905c:	movle	r0, #0
   19060:	movgt	r0, #1
   19064:	b	18ec8 <__assert_fail@plt+0x7bf8>
   19068:	mul	r1, r6, r4
   1906c:	cmp	r1, #63	; 0x3f
   19070:	movle	r3, #64	; 0x40
   19074:	strle	r3, [sp, #4]
   19078:	bgt	18efc <__assert_fail@plt+0x7c2c>
   1907c:	b	18ed8 <__assert_fail@plt+0x7c08>
   19080:	mov	r3, #64	; 0x40
   19084:	str	r3, [sp, #4]
   19088:	b	18ed8 <__assert_fail@plt+0x7c08>
   1908c:	rsb	r3, r9, #-2147483648	; 0x80000000
   19090:	cmp	r5, r3
   19094:	movge	r3, #0
   19098:	movlt	r3, #1
   1909c:	b	18f38 <__assert_fail@plt+0x7c68>
   190a0:	rsb	r3, r5, #-2147483648	; 0x80000000
   190a4:	cmp	r9, r3
   190a8:	movge	r3, #0
   190ac:	movlt	r3, #1
   190b0:	b	18f38 <__assert_fail@plt+0x7c68>
   190b4:	cmp	r5, #0
   190b8:	blt	190e0 <__assert_fail@plt+0x7e10>
   190bc:	cmn	r6, #1
   190c0:	beq	190fc <__assert_fail@plt+0x7e2c>
   190c4:	mov	r1, r6
   190c8:	mov	r0, #-2147483648	; 0x80000000
   190cc:	bl	19ccc <__assert_fail@plt+0x89fc>
   190d0:	cmp	r5, r0
   190d4:	movle	r0, #0
   190d8:	movgt	r0, #1
   190dc:	b	18f8c <__assert_fail@plt+0x7cbc>
   190e0:	mov	r1, r6
   190e4:	mvn	r0, #-2147483648	; 0x80000000
   190e8:	bl	19ccc <__assert_fail@plt+0x89fc>
   190ec:	cmp	r5, r0
   190f0:	movge	r0, #0
   190f4:	movlt	r0, #1
   190f8:	b	18f8c <__assert_fail@plt+0x7cbc>
   190fc:	add	r0, r5, #-2147483648	; 0x80000000
   19100:	cmp	r0, #0
   19104:	movle	r0, #0
   19108:	movgt	r0, #1
   1910c:	b	18f8c <__assert_fail@plt+0x7cbc>
   19110:	cmn	r5, #1
   19114:	beq	19134 <__assert_fail@plt+0x7e64>
   19118:	mov	r1, r5
   1911c:	mov	r0, #-2147483648	; 0x80000000
   19120:	bl	19ccc <__assert_fail@plt+0x89fc>
   19124:	cmp	r6, r0
   19128:	movle	r0, #0
   1912c:	movgt	r0, #1
   19130:	b	18f8c <__assert_fail@plt+0x7cbc>
   19134:	add	r0, r6, #-2147483648	; 0x80000000
   19138:	cmp	r0, #0
   1913c:	movle	r0, #0
   19140:	movgt	r0, #1
   19144:	b	18f8c <__assert_fail@plt+0x7cbc>
   19148:	bl	19224 <__assert_fail@plt+0x7f54>
   1914c:	push	{r4, lr}
   19150:	bl	19360 <__assert_fail@plt+0x8090>
   19154:	cmp	r0, #0
   19158:	popne	{r4, pc}
   1915c:	bl	19224 <__assert_fail@plt+0x7f54>
   19160:	push	{r4, lr}
   19164:	mov	r1, #1
   19168:	bl	1914c <__assert_fail@plt+0x7e7c>
   1916c:	pop	{r4, pc}
   19170:	push	{r4, lr}
   19174:	bl	19360 <__assert_fail@plt+0x8090>
   19178:	cmp	r0, #0
   1917c:	popne	{r4, pc}
   19180:	bl	19224 <__assert_fail@plt+0x7f54>
   19184:	push	{r4, lr}
   19188:	mov	r1, #1
   1918c:	bl	19170 <__assert_fail@plt+0x7ea0>
   19190:	pop	{r4, pc}
   19194:	push	{r4, r5, r6, lr}
   19198:	mov	r5, r0
   1919c:	mov	r4, r1
   191a0:	mov	r0, r1
   191a4:	bl	18c80 <__assert_fail@plt+0x79b0>
   191a8:	mov	r2, r4
   191ac:	mov	r1, r5
   191b0:	bl	11030 <memcpy@plt>
   191b4:	pop	{r4, r5, r6, pc}
   191b8:	push	{r4, r5, r6, lr}
   191bc:	mov	r5, r0
   191c0:	mov	r4, r1
   191c4:	mov	r0, r1
   191c8:	bl	18c94 <__assert_fail@plt+0x79c4>
   191cc:	mov	r2, r4
   191d0:	mov	r1, r5
   191d4:	bl	11030 <memcpy@plt>
   191d8:	pop	{r4, r5, r6, pc}
   191dc:	push	{r4, r5, r6, lr}
   191e0:	mov	r5, r0
   191e4:	mov	r4, r1
   191e8:	add	r0, r1, #1
   191ec:	bl	18c94 <__assert_fail@plt+0x79c4>
   191f0:	mov	r2, #0
   191f4:	strb	r2, [r0, r4]
   191f8:	mov	r2, r4
   191fc:	mov	r1, r5
   19200:	bl	11030 <memcpy@plt>
   19204:	pop	{r4, r5, r6, pc}
   19208:	push	{r4, lr}
   1920c:	mov	r4, r0
   19210:	bl	11168 <strlen@plt>
   19214:	add	r1, r0, #1
   19218:	mov	r0, r4
   1921c:	bl	19194 <__assert_fail@plt+0x7ec4>
   19220:	pop	{r4, pc}
   19224:	push	{r4, lr}
   19228:	ldr	r3, [pc, #40]	; 19258 <__assert_fail@plt+0x7f88>
   1922c:	ldr	r4, [r3]
   19230:	mov	r2, #5
   19234:	ldr	r1, [pc, #32]	; 1925c <__assert_fail@plt+0x7f8c>
   19238:	mov	r0, #0
   1923c:	bl	11060 <dcgettext@plt>
   19240:	mov	r3, r0
   19244:	ldr	r2, [pc, #20]	; 19260 <__assert_fail@plt+0x7f90>
   19248:	mov	r1, #0
   1924c:	mov	r0, r4
   19250:	bl	110f0 <error@plt>
   19254:	bl	11294 <abort@plt>
   19258:	andeq	ip, r2, r4, lsr r1
   1925c:	ldrdeq	fp, [r1], -r8
   19260:	andeq	fp, r1, r4, lsr #3
   19264:	push	{r4, lr}
   19268:	orr	r1, r1, #512	; 0x200
   1926c:	bl	14ce0 <__assert_fail@plt+0x3a10>
   19270:	cmp	r0, #0
   19274:	popne	{r4, pc}
   19278:	bl	11180 <__errno_location@plt>
   1927c:	ldr	r3, [r0]
   19280:	cmp	r3, #22
   19284:	beq	1928c <__assert_fail@plt+0x7fbc>
   19288:	bl	19224 <__assert_fail@plt+0x7f54>
   1928c:	ldr	r3, [pc, #12]	; 192a0 <__assert_fail@plt+0x7fd0>
   19290:	mov	r2, #41	; 0x29
   19294:	ldr	r1, [pc, #8]	; 192a4 <__assert_fail@plt+0x7fd4>
   19298:	ldr	r0, [pc, #8]	; 192a8 <__assert_fail@plt+0x7fd8>
   1929c:	bl	112d0 <__assert_fail@plt>
   192a0:	andeq	fp, r1, ip, ror #13
   192a4:	strdeq	fp, [r1], -r8
   192a8:	andeq	fp, r1, r4, lsl #14
   192ac:	ldr	r3, [r0, #48]	; 0x30
   192b0:	and	r3, r3, #17
   192b4:	cmp	r3, #16
   192b8:	beq	192dc <__assert_fail@plt+0x800c>
   192bc:	cmp	r3, #17
   192c0:	beq	192cc <__assert_fail@plt+0x7ffc>
   192c4:	mov	r0, #0
   192c8:	bx	lr
   192cc:	ldr	r0, [r1, #48]	; 0x30
   192d0:	adds	r0, r0, #0
   192d4:	movne	r0, #1
   192d8:	bx	lr
   192dc:	mov	r0, #1
   192e0:	bx	lr
   192e4:	push	{r4, lr}
   192e8:	sub	sp, sp, #8
   192ec:	mov	r3, #0
   192f0:	str	r3, [sp, #4]
   192f4:	add	r1, sp, #8
   192f8:	str	r3, [r1, #-8]!
   192fc:	ldr	r3, [pc, #88]	; 1935c <__assert_fail@plt+0x808c>
   19300:	ldr	r3, [r3]
   19304:	mov	r2, #10
   19308:	add	r0, sp, #4
   1930c:	bl	10fd0 <__getdelim@plt>
   19310:	cmp	r0, #0
   19314:	movle	r4, #0
   19318:	ble	19348 <__assert_fail@plt+0x8078>
   1931c:	sub	r0, r0, #1
   19320:	ldr	r3, [sp, #4]
   19324:	ldrb	r2, [r3, r0]
   19328:	cmp	r2, #10
   1932c:	moveq	r2, #0
   19330:	strbeq	r2, [r3, r0]
   19334:	ldr	r0, [sp, #4]
   19338:	bl	111ec <rpmatch@plt>
   1933c:	cmp	r0, #0
   19340:	movle	r4, #0
   19344:	movgt	r4, #1
   19348:	ldr	r0, [sp, #4]
   1934c:	bl	136fc <__assert_fail@plt+0x242c>
   19350:	mov	r0, r4
   19354:	add	sp, sp, #8
   19358:	pop	{r4, pc}
   1935c:	muleq	r2, r0, r1
   19360:	push	{r4, lr}
   19364:	mov	r2, r0
   19368:	mov	r3, r1
   1936c:	cmp	r1, #0
   19370:	cmpne	r0, #0
   19374:	moveq	r3, #1
   19378:	moveq	r2, r3
   1937c:	umull	r0, r1, r2, r3
   19380:	cmp	r0, #0
   19384:	cmpge	r1, #0
   19388:	bne	1939c <__assert_fail@plt+0x80cc>
   1938c:	mov	r1, r3
   19390:	mov	r0, r2
   19394:	bl	10fac <calloc@plt>
   19398:	pop	{r4, pc}
   1939c:	bl	11180 <__errno_location@plt>
   193a0:	mov	r3, #12
   193a4:	str	r3, [r0]
   193a8:	mov	r0, #0
   193ac:	pop	{r4, pc}
   193b0:	push	{r4, lr}
   193b4:	cmp	r0, #0
   193b8:	moveq	r0, #1
   193bc:	cmp	r0, #0
   193c0:	blt	193cc <__assert_fail@plt+0x80fc>
   193c4:	bl	11108 <malloc@plt>
   193c8:	pop	{r4, pc}
   193cc:	bl	11180 <__errno_location@plt>
   193d0:	mov	r3, #12
   193d4:	str	r3, [r0]
   193d8:	mov	r0, #0
   193dc:	pop	{r4, pc}
   193e0:	push	{r4, lr}
   193e4:	cmp	r0, #0
   193e8:	beq	19404 <__assert_fail@plt+0x8134>
   193ec:	cmp	r1, #0
   193f0:	beq	19410 <__assert_fail@plt+0x8140>
   193f4:	cmp	r1, #0
   193f8:	blt	1941c <__assert_fail@plt+0x814c>
   193fc:	bl	1106c <realloc@plt>
   19400:	pop	{r4, pc}
   19404:	mov	r0, r1
   19408:	bl	193b0 <__assert_fail@plt+0x80e0>
   1940c:	pop	{r4, pc}
   19410:	bl	136fc <__assert_fail@plt+0x242c>
   19414:	mov	r0, #0
   19418:	pop	{r4, pc}
   1941c:	bl	11180 <__errno_location@plt>
   19420:	mov	r3, #12
   19424:	str	r3, [r0]
   19428:	mov	r0, #0
   1942c:	pop	{r4, pc}
   19430:	push	{r4, r5, r6, lr}
   19434:	mov	r5, r0
   19438:	bl	110d8 <__fpending@plt>
   1943c:	mov	r6, r0
   19440:	ldr	r4, [r5]
   19444:	and	r4, r4, #32
   19448:	mov	r0, r5
   1944c:	bl	19590 <__assert_fail@plt+0x82c0>
   19450:	cmp	r4, #0
   19454:	bne	1947c <__assert_fail@plt+0x81ac>
   19458:	cmp	r0, #0
   1945c:	popeq	{r4, r5, r6, pc}
   19460:	cmp	r6, #0
   19464:	bne	19498 <__assert_fail@plt+0x81c8>
   19468:	bl	11180 <__errno_location@plt>
   1946c:	ldr	r0, [r0]
   19470:	subs	r0, r0, #9
   19474:	mvnne	r0, #0
   19478:	pop	{r4, r5, r6, pc}
   1947c:	cmp	r0, #0
   19480:	bne	194a0 <__assert_fail@plt+0x81d0>
   19484:	bl	11180 <__errno_location@plt>
   19488:	mov	r3, #0
   1948c:	str	r3, [r0]
   19490:	mvn	r0, #0
   19494:	pop	{r4, r5, r6, pc}
   19498:	mvn	r0, #0
   1949c:	pop	{r4, r5, r6, pc}
   194a0:	mvn	r0, #0
   194a4:	pop	{r4, r5, r6, pc}
   194a8:	mov	r2, #0
   194ac:	mov	r3, #0
   194b0:	strd	r2, [r0, #16]
   194b4:	ldr	r3, [pc, #4]	; 194c0 <__assert_fail@plt+0x81f0>
   194b8:	str	r3, [r0, #24]
   194bc:	bx	lr
   194c0:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   194c4:	push	{r4, r5, r6, r7, r8, lr}
   194c8:	ldr	r2, [r0, #24]
   194cc:	ldr	r3, [pc, #172]	; 19580 <__assert_fail@plt+0x82b0>
   194d0:	cmp	r2, r3
   194d4:	bne	1951c <__assert_fail@plt+0x824c>
   194d8:	ldrd	r6, [r0, #16]
   194dc:	orrs	r3, r6, r7
   194e0:	beq	1955c <__assert_fail@plt+0x828c>
   194e4:	ldrd	r4, [r1, #96]	; 0x60
   194e8:	ldrd	r2, [r0]
   194ec:	cmp	r5, r3
   194f0:	cmpeq	r4, r2
   194f4:	beq	19530 <__assert_fail@plt+0x8260>
   194f8:	adds	r2, r6, #1
   194fc:	adc	r3, r7, #0
   19500:	strd	r2, [r0, #16]
   19504:	and	r6, r6, r2
   19508:	and	r7, r7, r3
   1950c:	orrs	ip, r6, r7
   19510:	beq	1954c <__assert_fail@plt+0x827c>
   19514:	mov	r0, #0
   19518:	pop	{r4, r5, r6, r7, r8, pc}
   1951c:	ldr	r3, [pc, #96]	; 19584 <__assert_fail@plt+0x82b4>
   19520:	mov	r2, #60	; 0x3c
   19524:	ldr	r1, [pc, #92]	; 19588 <__assert_fail@plt+0x82b8>
   19528:	ldr	r0, [pc, #92]	; 1958c <__assert_fail@plt+0x82bc>
   1952c:	bl	112d0 <__assert_fail@plt>
   19530:	ldrd	r4, [r1]
   19534:	ldrd	r2, [r0, #8]
   19538:	cmp	r5, r3
   1953c:	cmpeq	r4, r2
   19540:	bne	194f8 <__assert_fail@plt+0x8228>
   19544:	mov	r0, #1
   19548:	pop	{r4, r5, r6, r7, r8, pc}
   1954c:	orrs	r3, r2, r3
   19550:	bne	19568 <__assert_fail@plt+0x8298>
   19554:	mov	r0, #1
   19558:	pop	{r4, r5, r6, r7, r8, pc}
   1955c:	mov	r2, #1
   19560:	mov	r3, #0
   19564:	strd	r2, [r0, #16]
   19568:	ldrd	r2, [r1]
   1956c:	strd	r2, [r0, #8]
   19570:	ldrd	r2, [r1, #96]	; 0x60
   19574:	strd	r2, [r0]
   19578:	mov	r0, #0
   1957c:	pop	{r4, r5, r6, r7, r8, pc}
   19580:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   19584:	andeq	fp, r1, r4, lsl r7
   19588:	andeq	fp, r1, r0, lsr #14
   1958c:	andeq	fp, r1, r4, lsr r7
   19590:	push	{r4, r5, r6, lr}
   19594:	sub	sp, sp, #8
   19598:	mov	r4, r0
   1959c:	bl	111b0 <fileno@plt>
   195a0:	cmp	r0, #0
   195a4:	blt	1961c <__assert_fail@plt+0x834c>
   195a8:	mov	r0, r4
   195ac:	bl	11120 <__freading@plt>
   195b0:	cmp	r0, #0
   195b4:	beq	195e8 <__assert_fail@plt+0x8318>
   195b8:	mov	r0, r4
   195bc:	bl	111b0 <fileno@plt>
   195c0:	mov	r3, #1
   195c4:	str	r3, [sp]
   195c8:	mov	r2, #0
   195cc:	mov	r3, #0
   195d0:	bl	110c0 <lseek64@plt>
   195d4:	mvn	r2, #0
   195d8:	mvn	r3, #0
   195dc:	cmp	r1, r3
   195e0:	cmpeq	r0, r2
   195e4:	beq	19628 <__assert_fail@plt+0x8358>
   195e8:	mov	r0, r4
   195ec:	bl	13478 <__assert_fail@plt+0x21a8>
   195f0:	cmp	r0, #0
   195f4:	beq	19628 <__assert_fail@plt+0x8358>
   195f8:	bl	11180 <__errno_location@plt>
   195fc:	mov	r5, r0
   19600:	ldr	r6, [r0]
   19604:	mov	r0, r4
   19608:	bl	111c8 <fclose@plt>
   1960c:	cmp	r6, #0
   19610:	strne	r6, [r5]
   19614:	mvnne	r0, #0
   19618:	b	19630 <__assert_fail@plt+0x8360>
   1961c:	mov	r0, r4
   19620:	bl	111c8 <fclose@plt>
   19624:	b	19630 <__assert_fail@plt+0x8360>
   19628:	mov	r0, r4
   1962c:	bl	111c8 <fclose@plt>
   19630:	add	sp, sp, #8
   19634:	pop	{r4, r5, r6, pc}
   19638:	push	{r1, r2, r3}
   1963c:	push	{r4, r5, r6, lr}
   19640:	sub	sp, sp, #12
   19644:	mov	r5, r0
   19648:	ldr	r1, [sp, #28]
   1964c:	add	r3, sp, #32
   19650:	str	r3, [sp, #4]
   19654:	cmp	r1, #0
   19658:	beq	196a0 <__assert_fail@plt+0x83d0>
   1965c:	ldr	r3, [pc, #540]	; 19880 <__assert_fail@plt+0x85b0>
   19660:	cmp	r1, r3
   19664:	beq	196d0 <__assert_fail@plt+0x8400>
   19668:	cmp	r1, #11
   1966c:	beq	19870 <__assert_fail@plt+0x85a0>
   19670:	bgt	197fc <__assert_fail@plt+0x852c>
   19674:	cmp	r1, #3
   19678:	beq	19870 <__assert_fail@plt+0x85a0>
   1967c:	ble	197bc <__assert_fail@plt+0x84ec>
   19680:	cmp	r1, #8
   19684:	beq	197dc <__assert_fail@plt+0x850c>
   19688:	ble	197d4 <__assert_fail@plt+0x8504>
   1968c:	cmp	r1, #9
   19690:	beq	19870 <__assert_fail@plt+0x85a0>
   19694:	cmp	r1, #10
   19698:	bne	19834 <__assert_fail@plt+0x8564>
   1969c:	b	197dc <__assert_fail@plt+0x850c>
   196a0:	ldr	r3, [sp, #4]
   196a4:	add	r2, r3, #4
   196a8:	str	r2, [sp, #4]
   196ac:	ldr	r2, [r3]
   196b0:	mov	r1, #0
   196b4:	bl	111e0 <fcntl64@plt>
   196b8:	mov	r4, r0
   196bc:	mov	r0, r4
   196c0:	add	sp, sp, #12
   196c4:	pop	{r4, r5, r6, lr}
   196c8:	add	sp, sp, #12
   196cc:	bx	lr
   196d0:	ldr	r3, [sp, #4]
   196d4:	add	r2, r3, #4
   196d8:	str	r2, [sp, #4]
   196dc:	ldr	r6, [r3]
   196e0:	ldr	r3, [pc, #412]	; 19884 <__assert_fail@plt+0x85b4>
   196e4:	ldr	r3, [r3]
   196e8:	cmp	r3, #0
   196ec:	blt	1974c <__assert_fail@plt+0x847c>
   196f0:	mov	r2, r6
   196f4:	ldr	r1, [pc, #388]	; 19880 <__assert_fail@plt+0x85b0>
   196f8:	bl	111e0 <fcntl64@plt>
   196fc:	subs	r4, r0, #0
   19700:	blt	19714 <__assert_fail@plt+0x8444>
   19704:	mov	r2, #1
   19708:	ldr	r3, [pc, #372]	; 19884 <__assert_fail@plt+0x85b4>
   1970c:	str	r2, [r3]
   19710:	b	196bc <__assert_fail@plt+0x83ec>
   19714:	bl	11180 <__errno_location@plt>
   19718:	ldr	r3, [r0]
   1971c:	cmp	r3, #22
   19720:	bne	19704 <__assert_fail@plt+0x8434>
   19724:	mov	r2, r6
   19728:	mov	r1, #0
   1972c:	mov	r0, r5
   19730:	bl	111e0 <fcntl64@plt>
   19734:	subs	r4, r0, #0
   19738:	blt	196bc <__assert_fail@plt+0x83ec>
   1973c:	mvn	r2, #0
   19740:	ldr	r3, [pc, #316]	; 19884 <__assert_fail@plt+0x85b4>
   19744:	str	r2, [r3]
   19748:	b	19770 <__assert_fail@plt+0x84a0>
   1974c:	mov	r2, r6
   19750:	mov	r1, #0
   19754:	bl	111e0 <fcntl64@plt>
   19758:	subs	r4, r0, #0
   1975c:	blt	196bc <__assert_fail@plt+0x83ec>
   19760:	ldr	r3, [pc, #284]	; 19884 <__assert_fail@plt+0x85b4>
   19764:	ldr	r3, [r3]
   19768:	cmn	r3, #1
   1976c:	bne	196bc <__assert_fail@plt+0x83ec>
   19770:	mov	r1, #1
   19774:	mov	r0, r4
   19778:	bl	111e0 <fcntl64@plt>
   1977c:	subs	r2, r0, #0
   19780:	blt	1979c <__assert_fail@plt+0x84cc>
   19784:	orr	r2, r2, #1
   19788:	mov	r1, #2
   1978c:	mov	r0, r4
   19790:	bl	111e0 <fcntl64@plt>
   19794:	cmn	r0, #1
   19798:	bne	196bc <__assert_fail@plt+0x83ec>
   1979c:	bl	11180 <__errno_location@plt>
   197a0:	mov	r5, r0
   197a4:	ldr	r6, [r0]
   197a8:	mov	r0, r4
   197ac:	bl	112a0 <close@plt>
   197b0:	str	r6, [r5]
   197b4:	mvn	r4, #0
   197b8:	b	196bc <__assert_fail@plt+0x83ec>
   197bc:	cmp	r1, #1
   197c0:	beq	19870 <__assert_fail@plt+0x85a0>
   197c4:	bgt	197dc <__assert_fail@plt+0x850c>
   197c8:	cmp	r1, #0
   197cc:	bne	19834 <__assert_fail@plt+0x8564>
   197d0:	b	197dc <__assert_fail@plt+0x850c>
   197d4:	cmp	r1, #4
   197d8:	bne	19834 <__assert_fail@plt+0x8564>
   197dc:	ldr	r3, [sp, #4]
   197e0:	add	r2, r3, #4
   197e4:	str	r2, [sp, #4]
   197e8:	ldr	r2, [r3]
   197ec:	mov	r0, r5
   197f0:	bl	111e0 <fcntl64@plt>
   197f4:	mov	r4, r0
   197f8:	b	196bc <__assert_fail@plt+0x83ec>
   197fc:	ldr	r3, [pc, #132]	; 19888 <__assert_fail@plt+0x85b8>
   19800:	cmp	r1, r3
   19804:	bgt	19854 <__assert_fail@plt+0x8584>
   19808:	sub	r3, r3, #1
   1980c:	cmp	r1, r3
   19810:	bge	197dc <__assert_fail@plt+0x850c>
   19814:	sub	r3, r3, #5
   19818:	cmp	r1, r3
   1981c:	beq	19870 <__assert_fail@plt+0x85a0>
   19820:	add	r3, r3, #1
   19824:	cmp	r1, r3
   19828:	beq	197dc <__assert_fail@plt+0x850c>
   1982c:	cmp	r1, #1024	; 0x400
   19830:	beq	197dc <__assert_fail@plt+0x850c>
   19834:	ldr	r3, [sp, #4]
   19838:	add	r2, r3, #4
   1983c:	str	r2, [sp, #4]
   19840:	ldr	r2, [r3]
   19844:	mov	r0, r5
   19848:	bl	111e0 <fcntl64@plt>
   1984c:	mov	r4, r0
   19850:	b	196bc <__assert_fail@plt+0x83ec>
   19854:	ldr	r3, [pc, #48]	; 1988c <__assert_fail@plt+0x85bc>
   19858:	cmp	r1, r3
   1985c:	beq	197dc <__assert_fail@plt+0x850c>
   19860:	blt	19870 <__assert_fail@plt+0x85a0>
   19864:	add	r3, r3, #1
   19868:	cmp	r1, r3
   1986c:	bne	19834 <__assert_fail@plt+0x8564>
   19870:	mov	r0, r5
   19874:	bl	111e0 <fcntl64@plt>
   19878:	mov	r4, r0
   1987c:	b	196bc <__assert_fail@plt+0x83ec>
   19880:	andeq	r0, r0, r6, lsl #8
   19884:	strdeq	ip, [r2], -r4
   19888:	andeq	r0, r0, r7, lsl #8
   1988c:	andeq	r0, r0, r9, lsl #8
   19890:	push	{r1, r2, r3}
   19894:	push	{lr}		; (str lr, [sp, #-4]!)
   19898:	sub	sp, sp, #8
   1989c:	ldr	r1, [sp, #12]
   198a0:	tst	r1, #64	; 0x40
   198a4:	addne	r3, sp, #20
   198a8:	strne	r3, [sp, #4]
   198ac:	ldrne	r2, [sp, #16]
   198b0:	moveq	r2, #0
   198b4:	bl	110fc <open64@plt>
   198b8:	bl	18670 <__assert_fail@plt+0x73a0>
   198bc:	add	sp, sp, #8
   198c0:	pop	{lr}		; (ldr lr, [sp], #4)
   198c4:	add	sp, sp, #12
   198c8:	bx	lr
   198cc:	push	{r4, lr}
   198d0:	mov	r0, #14
   198d4:	bl	1121c <nl_langinfo@plt>
   198d8:	cmp	r0, #0
   198dc:	beq	198f4 <__assert_fail@plt+0x8624>
   198e0:	ldrb	r2, [r0]
   198e4:	ldr	r3, [pc, #16]	; 198fc <__assert_fail@plt+0x862c>
   198e8:	cmp	r2, #0
   198ec:	moveq	r0, r3
   198f0:	pop	{r4, pc}
   198f4:	ldr	r0, [pc]	; 198fc <__assert_fail@plt+0x862c>
   198f8:	pop	{r4, pc}
   198fc:	andeq	fp, r1, ip, asr #14
   19900:	push	{r4, r5, r6, r7, lr}
   19904:	sub	sp, sp, #12
   19908:	mov	r7, r1
   1990c:	mov	r5, r2
   19910:	subs	r6, r0, #0
   19914:	addeq	r6, sp, #4
   19918:	mov	r0, r6
   1991c:	bl	110e4 <mbrtowc@plt>
   19920:	mov	r4, r0
   19924:	cmp	r5, #0
   19928:	cmnne	r0, #3
   1992c:	bhi	1993c <__assert_fail@plt+0x866c>
   19930:	mov	r0, r4
   19934:	add	sp, sp, #12
   19938:	pop	{r4, r5, r6, r7, pc}
   1993c:	mov	r0, #0
   19940:	bl	199b8 <__assert_fail@plt+0x86e8>
   19944:	cmp	r0, #0
   19948:	ldrbeq	r3, [r7]
   1994c:	streq	r3, [r6]
   19950:	moveq	r4, #1
   19954:	b	19930 <__assert_fail@plt+0x8660>
   19958:	push	{r4, r5, r6, lr}
   1995c:	mov	r6, r0
   19960:	mov	r5, r1
   19964:	subs	r4, r2, #0
   19968:	beq	19994 <__assert_fail@plt+0x86c4>
   1996c:	mov	r1, r4
   19970:	mvn	r0, #0
   19974:	bl	19ac0 <__assert_fail@plt+0x87f0>
   19978:	cmp	r0, r5
   1997c:	bcs	19994 <__assert_fail@plt+0x86c4>
   19980:	bl	11180 <__errno_location@plt>
   19984:	mov	r3, #12
   19988:	str	r3, [r0]
   1998c:	mov	r0, #0
   19990:	pop	{r4, r5, r6, pc}
   19994:	mul	r1, r5, r4
   19998:	mov	r0, r6
   1999c:	bl	193e0 <__assert_fail@plt+0x8110>
   199a0:	pop	{r4, r5, r6, pc}
   199a4:	push	{r4, lr}
   199a8:	mov	r2, #3
   199ac:	mov	r1, #0
   199b0:	bl	19638 <__assert_fail@plt+0x8368>
   199b4:	pop	{r4, pc}
   199b8:	push	{lr}		; (str lr, [sp, #-4]!)
   199bc:	sub	sp, sp, #268	; 0x10c
   199c0:	ldr	r2, [pc, #68]	; 19a0c <__assert_fail@plt+0x873c>
   199c4:	add	r1, sp, #4
   199c8:	bl	19a18 <__assert_fail@plt+0x8748>
   199cc:	cmp	r0, #0
   199d0:	movne	r0, #0
   199d4:	bne	19a04 <__assert_fail@plt+0x8734>
   199d8:	ldr	r1, [pc, #48]	; 19a10 <__assert_fail@plt+0x8740>
   199dc:	add	r0, sp, #4
   199e0:	bl	10fdc <strcmp@plt>
   199e4:	cmp	r0, #0
   199e8:	moveq	r0, #0
   199ec:	beq	19a04 <__assert_fail@plt+0x8734>
   199f0:	ldr	r1, [pc, #28]	; 19a14 <__assert_fail@plt+0x8744>
   199f4:	add	r0, sp, #4
   199f8:	bl	10fdc <strcmp@plt>
   199fc:	adds	r0, r0, #0
   19a00:	movne	r0, #1
   19a04:	add	sp, sp, #268	; 0x10c
   19a08:	pop	{pc}		; (ldr pc, [sp], #4)
   19a0c:	andeq	r0, r0, r1, lsl #2
   19a10:	andeq	fp, r1, r4, asr r7
   19a14:	andeq	fp, r1, r8, asr r7
   19a18:	push	{r4, r5, r6, lr}
   19a1c:	mov	r6, r1
   19a20:	mov	r4, r2
   19a24:	mov	r1, #0
   19a28:	bl	11204 <setlocale@plt>
   19a2c:	subs	r5, r0, #0
   19a30:	beq	19a54 <__assert_fail@plt+0x8784>
   19a34:	mov	r0, r5
   19a38:	bl	11168 <strlen@plt>
   19a3c:	cmp	r4, r0
   19a40:	bhi	19a6c <__assert_fail@plt+0x879c>
   19a44:	cmp	r4, #0
   19a48:	bne	19a84 <__assert_fail@plt+0x87b4>
   19a4c:	mov	r0, #34	; 0x22
   19a50:	pop	{r4, r5, r6, pc}
   19a54:	cmp	r4, #0
   19a58:	beq	19aa8 <__assert_fail@plt+0x87d8>
   19a5c:	mov	r3, #0
   19a60:	strb	r3, [r6]
   19a64:	mov	r0, #22
   19a68:	pop	{r4, r5, r6, pc}
   19a6c:	add	r2, r0, #1
   19a70:	mov	r1, r5
   19a74:	mov	r0, r6
   19a78:	bl	11030 <memcpy@plt>
   19a7c:	mov	r0, #0
   19a80:	pop	{r4, r5, r6, pc}
   19a84:	sub	r4, r4, #1
   19a88:	mov	r2, r4
   19a8c:	mov	r1, r5
   19a90:	mov	r0, r6
   19a94:	bl	11030 <memcpy@plt>
   19a98:	mov	r3, #0
   19a9c:	strb	r3, [r6, r4]
   19aa0:	mov	r0, #34	; 0x22
   19aa4:	pop	{r4, r5, r6, pc}
   19aa8:	mov	r0, #22
   19aac:	pop	{r4, r5, r6, pc}
   19ab0:	push	{r4, lr}
   19ab4:	mov	r1, #0
   19ab8:	bl	11204 <setlocale@plt>
   19abc:	pop	{r4, pc}
   19ac0:	subs	r2, r1, #1
   19ac4:	bxeq	lr
   19ac8:	bcc	19ca0 <__assert_fail@plt+0x89d0>
   19acc:	cmp	r0, r1
   19ad0:	bls	19c84 <__assert_fail@plt+0x89b4>
   19ad4:	tst	r1, r2
   19ad8:	beq	19c90 <__assert_fail@plt+0x89c0>
   19adc:	clz	r3, r0
   19ae0:	clz	r2, r1
   19ae4:	sub	r3, r2, r3
   19ae8:	rsbs	r3, r3, #31
   19aec:	addne	r3, r3, r3, lsl #1
   19af0:	mov	r2, #0
   19af4:	addne	pc, pc, r3, lsl #2
   19af8:	nop			; (mov r0, r0)
   19afc:	cmp	r0, r1, lsl #31
   19b00:	adc	r2, r2, r2
   19b04:	subcs	r0, r0, r1, lsl #31
   19b08:	cmp	r0, r1, lsl #30
   19b0c:	adc	r2, r2, r2
   19b10:	subcs	r0, r0, r1, lsl #30
   19b14:	cmp	r0, r1, lsl #29
   19b18:	adc	r2, r2, r2
   19b1c:	subcs	r0, r0, r1, lsl #29
   19b20:	cmp	r0, r1, lsl #28
   19b24:	adc	r2, r2, r2
   19b28:	subcs	r0, r0, r1, lsl #28
   19b2c:	cmp	r0, r1, lsl #27
   19b30:	adc	r2, r2, r2
   19b34:	subcs	r0, r0, r1, lsl #27
   19b38:	cmp	r0, r1, lsl #26
   19b3c:	adc	r2, r2, r2
   19b40:	subcs	r0, r0, r1, lsl #26
   19b44:	cmp	r0, r1, lsl #25
   19b48:	adc	r2, r2, r2
   19b4c:	subcs	r0, r0, r1, lsl #25
   19b50:	cmp	r0, r1, lsl #24
   19b54:	adc	r2, r2, r2
   19b58:	subcs	r0, r0, r1, lsl #24
   19b5c:	cmp	r0, r1, lsl #23
   19b60:	adc	r2, r2, r2
   19b64:	subcs	r0, r0, r1, lsl #23
   19b68:	cmp	r0, r1, lsl #22
   19b6c:	adc	r2, r2, r2
   19b70:	subcs	r0, r0, r1, lsl #22
   19b74:	cmp	r0, r1, lsl #21
   19b78:	adc	r2, r2, r2
   19b7c:	subcs	r0, r0, r1, lsl #21
   19b80:	cmp	r0, r1, lsl #20
   19b84:	adc	r2, r2, r2
   19b88:	subcs	r0, r0, r1, lsl #20
   19b8c:	cmp	r0, r1, lsl #19
   19b90:	adc	r2, r2, r2
   19b94:	subcs	r0, r0, r1, lsl #19
   19b98:	cmp	r0, r1, lsl #18
   19b9c:	adc	r2, r2, r2
   19ba0:	subcs	r0, r0, r1, lsl #18
   19ba4:	cmp	r0, r1, lsl #17
   19ba8:	adc	r2, r2, r2
   19bac:	subcs	r0, r0, r1, lsl #17
   19bb0:	cmp	r0, r1, lsl #16
   19bb4:	adc	r2, r2, r2
   19bb8:	subcs	r0, r0, r1, lsl #16
   19bbc:	cmp	r0, r1, lsl #15
   19bc0:	adc	r2, r2, r2
   19bc4:	subcs	r0, r0, r1, lsl #15
   19bc8:	cmp	r0, r1, lsl #14
   19bcc:	adc	r2, r2, r2
   19bd0:	subcs	r0, r0, r1, lsl #14
   19bd4:	cmp	r0, r1, lsl #13
   19bd8:	adc	r2, r2, r2
   19bdc:	subcs	r0, r0, r1, lsl #13
   19be0:	cmp	r0, r1, lsl #12
   19be4:	adc	r2, r2, r2
   19be8:	subcs	r0, r0, r1, lsl #12
   19bec:	cmp	r0, r1, lsl #11
   19bf0:	adc	r2, r2, r2
   19bf4:	subcs	r0, r0, r1, lsl #11
   19bf8:	cmp	r0, r1, lsl #10
   19bfc:	adc	r2, r2, r2
   19c00:	subcs	r0, r0, r1, lsl #10
   19c04:	cmp	r0, r1, lsl #9
   19c08:	adc	r2, r2, r2
   19c0c:	subcs	r0, r0, r1, lsl #9
   19c10:	cmp	r0, r1, lsl #8
   19c14:	adc	r2, r2, r2
   19c18:	subcs	r0, r0, r1, lsl #8
   19c1c:	cmp	r0, r1, lsl #7
   19c20:	adc	r2, r2, r2
   19c24:	subcs	r0, r0, r1, lsl #7
   19c28:	cmp	r0, r1, lsl #6
   19c2c:	adc	r2, r2, r2
   19c30:	subcs	r0, r0, r1, lsl #6
   19c34:	cmp	r0, r1, lsl #5
   19c38:	adc	r2, r2, r2
   19c3c:	subcs	r0, r0, r1, lsl #5
   19c40:	cmp	r0, r1, lsl #4
   19c44:	adc	r2, r2, r2
   19c48:	subcs	r0, r0, r1, lsl #4
   19c4c:	cmp	r0, r1, lsl #3
   19c50:	adc	r2, r2, r2
   19c54:	subcs	r0, r0, r1, lsl #3
   19c58:	cmp	r0, r1, lsl #2
   19c5c:	adc	r2, r2, r2
   19c60:	subcs	r0, r0, r1, lsl #2
   19c64:	cmp	r0, r1, lsl #1
   19c68:	adc	r2, r2, r2
   19c6c:	subcs	r0, r0, r1, lsl #1
   19c70:	cmp	r0, r1
   19c74:	adc	r2, r2, r2
   19c78:	subcs	r0, r0, r1
   19c7c:	mov	r0, r2
   19c80:	bx	lr
   19c84:	moveq	r0, #1
   19c88:	movne	r0, #0
   19c8c:	bx	lr
   19c90:	clz	r2, r1
   19c94:	rsb	r2, r2, #31
   19c98:	lsr	r0, r0, r2
   19c9c:	bx	lr
   19ca0:	cmp	r0, #0
   19ca4:	mvnne	r0, #0
   19ca8:	b	19f48 <__assert_fail@plt+0x8c78>
   19cac:	cmp	r1, #0
   19cb0:	beq	19ca0 <__assert_fail@plt+0x89d0>
   19cb4:	push	{r0, r1, lr}
   19cb8:	bl	19ac0 <__assert_fail@plt+0x87f0>
   19cbc:	pop	{r1, r2, lr}
   19cc0:	mul	r3, r2, r0
   19cc4:	sub	r1, r1, r3
   19cc8:	bx	lr
   19ccc:	cmp	r1, #0
   19cd0:	beq	19edc <__assert_fail@plt+0x8c0c>
   19cd4:	eor	ip, r0, r1
   19cd8:	rsbmi	r1, r1, #0
   19cdc:	subs	r2, r1, #1
   19ce0:	beq	19ea8 <__assert_fail@plt+0x8bd8>
   19ce4:	movs	r3, r0
   19ce8:	rsbmi	r3, r0, #0
   19cec:	cmp	r3, r1
   19cf0:	bls	19eb4 <__assert_fail@plt+0x8be4>
   19cf4:	tst	r1, r2
   19cf8:	beq	19ec4 <__assert_fail@plt+0x8bf4>
   19cfc:	clz	r2, r3
   19d00:	clz	r0, r1
   19d04:	sub	r2, r0, r2
   19d08:	rsbs	r2, r2, #31
   19d0c:	addne	r2, r2, r2, lsl #1
   19d10:	mov	r0, #0
   19d14:	addne	pc, pc, r2, lsl #2
   19d18:	nop			; (mov r0, r0)
   19d1c:	cmp	r3, r1, lsl #31
   19d20:	adc	r0, r0, r0
   19d24:	subcs	r3, r3, r1, lsl #31
   19d28:	cmp	r3, r1, lsl #30
   19d2c:	adc	r0, r0, r0
   19d30:	subcs	r3, r3, r1, lsl #30
   19d34:	cmp	r3, r1, lsl #29
   19d38:	adc	r0, r0, r0
   19d3c:	subcs	r3, r3, r1, lsl #29
   19d40:	cmp	r3, r1, lsl #28
   19d44:	adc	r0, r0, r0
   19d48:	subcs	r3, r3, r1, lsl #28
   19d4c:	cmp	r3, r1, lsl #27
   19d50:	adc	r0, r0, r0
   19d54:	subcs	r3, r3, r1, lsl #27
   19d58:	cmp	r3, r1, lsl #26
   19d5c:	adc	r0, r0, r0
   19d60:	subcs	r3, r3, r1, lsl #26
   19d64:	cmp	r3, r1, lsl #25
   19d68:	adc	r0, r0, r0
   19d6c:	subcs	r3, r3, r1, lsl #25
   19d70:	cmp	r3, r1, lsl #24
   19d74:	adc	r0, r0, r0
   19d78:	subcs	r3, r3, r1, lsl #24
   19d7c:	cmp	r3, r1, lsl #23
   19d80:	adc	r0, r0, r0
   19d84:	subcs	r3, r3, r1, lsl #23
   19d88:	cmp	r3, r1, lsl #22
   19d8c:	adc	r0, r0, r0
   19d90:	subcs	r3, r3, r1, lsl #22
   19d94:	cmp	r3, r1, lsl #21
   19d98:	adc	r0, r0, r0
   19d9c:	subcs	r3, r3, r1, lsl #21
   19da0:	cmp	r3, r1, lsl #20
   19da4:	adc	r0, r0, r0
   19da8:	subcs	r3, r3, r1, lsl #20
   19dac:	cmp	r3, r1, lsl #19
   19db0:	adc	r0, r0, r0
   19db4:	subcs	r3, r3, r1, lsl #19
   19db8:	cmp	r3, r1, lsl #18
   19dbc:	adc	r0, r0, r0
   19dc0:	subcs	r3, r3, r1, lsl #18
   19dc4:	cmp	r3, r1, lsl #17
   19dc8:	adc	r0, r0, r0
   19dcc:	subcs	r3, r3, r1, lsl #17
   19dd0:	cmp	r3, r1, lsl #16
   19dd4:	adc	r0, r0, r0
   19dd8:	subcs	r3, r3, r1, lsl #16
   19ddc:	cmp	r3, r1, lsl #15
   19de0:	adc	r0, r0, r0
   19de4:	subcs	r3, r3, r1, lsl #15
   19de8:	cmp	r3, r1, lsl #14
   19dec:	adc	r0, r0, r0
   19df0:	subcs	r3, r3, r1, lsl #14
   19df4:	cmp	r3, r1, lsl #13
   19df8:	adc	r0, r0, r0
   19dfc:	subcs	r3, r3, r1, lsl #13
   19e00:	cmp	r3, r1, lsl #12
   19e04:	adc	r0, r0, r0
   19e08:	subcs	r3, r3, r1, lsl #12
   19e0c:	cmp	r3, r1, lsl #11
   19e10:	adc	r0, r0, r0
   19e14:	subcs	r3, r3, r1, lsl #11
   19e18:	cmp	r3, r1, lsl #10
   19e1c:	adc	r0, r0, r0
   19e20:	subcs	r3, r3, r1, lsl #10
   19e24:	cmp	r3, r1, lsl #9
   19e28:	adc	r0, r0, r0
   19e2c:	subcs	r3, r3, r1, lsl #9
   19e30:	cmp	r3, r1, lsl #8
   19e34:	adc	r0, r0, r0
   19e38:	subcs	r3, r3, r1, lsl #8
   19e3c:	cmp	r3, r1, lsl #7
   19e40:	adc	r0, r0, r0
   19e44:	subcs	r3, r3, r1, lsl #7
   19e48:	cmp	r3, r1, lsl #6
   19e4c:	adc	r0, r0, r0
   19e50:	subcs	r3, r3, r1, lsl #6
   19e54:	cmp	r3, r1, lsl #5
   19e58:	adc	r0, r0, r0
   19e5c:	subcs	r3, r3, r1, lsl #5
   19e60:	cmp	r3, r1, lsl #4
   19e64:	adc	r0, r0, r0
   19e68:	subcs	r3, r3, r1, lsl #4
   19e6c:	cmp	r3, r1, lsl #3
   19e70:	adc	r0, r0, r0
   19e74:	subcs	r3, r3, r1, lsl #3
   19e78:	cmp	r3, r1, lsl #2
   19e7c:	adc	r0, r0, r0
   19e80:	subcs	r3, r3, r1, lsl #2
   19e84:	cmp	r3, r1, lsl #1
   19e88:	adc	r0, r0, r0
   19e8c:	subcs	r3, r3, r1, lsl #1
   19e90:	cmp	r3, r1
   19e94:	adc	r0, r0, r0
   19e98:	subcs	r3, r3, r1
   19e9c:	cmp	ip, #0
   19ea0:	rsbmi	r0, r0, #0
   19ea4:	bx	lr
   19ea8:	teq	ip, r0
   19eac:	rsbmi	r0, r0, #0
   19eb0:	bx	lr
   19eb4:	movcc	r0, #0
   19eb8:	asreq	r0, ip, #31
   19ebc:	orreq	r0, r0, #1
   19ec0:	bx	lr
   19ec4:	clz	r2, r1
   19ec8:	rsb	r2, r2, #31
   19ecc:	cmp	ip, #0
   19ed0:	lsr	r0, r3, r2
   19ed4:	rsbmi	r0, r0, #0
   19ed8:	bx	lr
   19edc:	cmp	r0, #0
   19ee0:	mvngt	r0, #-2147483648	; 0x80000000
   19ee4:	movlt	r0, #-2147483648	; 0x80000000
   19ee8:	b	19f48 <__assert_fail@plt+0x8c78>
   19eec:	cmp	r1, #0
   19ef0:	beq	19edc <__assert_fail@plt+0x8c0c>
   19ef4:	push	{r0, r1, lr}
   19ef8:	bl	19cd4 <__assert_fail@plt+0x8a04>
   19efc:	pop	{r1, r2, lr}
   19f00:	mul	r3, r2, r0
   19f04:	sub	r1, r1, r3
   19f08:	bx	lr
   19f0c:	cmp	r3, #0
   19f10:	cmpeq	r2, #0
   19f14:	bne	19f2c <__assert_fail@plt+0x8c5c>
   19f18:	cmp	r1, #0
   19f1c:	cmpeq	r0, #0
   19f20:	mvnne	r1, #0
   19f24:	mvnne	r0, #0
   19f28:	b	19f48 <__assert_fail@plt+0x8c78>
   19f2c:	sub	sp, sp, #8
   19f30:	push	{sp, lr}
   19f34:	bl	19f58 <__assert_fail@plt+0x8c88>
   19f38:	ldr	lr, [sp, #4]
   19f3c:	add	sp, sp, #8
   19f40:	pop	{r2, r3}
   19f44:	bx	lr
   19f48:	push	{r1, lr}
   19f4c:	mov	r0, #8
   19f50:	bl	10fc4 <raise@plt>
   19f54:	pop	{r1, pc}
   19f58:	cmp	r1, r3
   19f5c:	push	{r4, r5, r6, r7, r8, r9, lr}
   19f60:	cmpeq	r0, r2
   19f64:	mov	r4, r0
   19f68:	mov	r5, r1
   19f6c:	ldr	r9, [sp, #28]
   19f70:	movcc	r0, #0
   19f74:	movcc	r1, #0
   19f78:	bcc	1a070 <__assert_fail@plt+0x8da0>
   19f7c:	cmp	r3, #0
   19f80:	clzeq	ip, r2
   19f84:	clzne	ip, r3
   19f88:	addeq	ip, ip, #32
   19f8c:	cmp	r5, #0
   19f90:	clzeq	r1, r4
   19f94:	addeq	r1, r1, #32
   19f98:	clzne	r1, r5
   19f9c:	sub	ip, ip, r1
   19fa0:	sub	lr, ip, #32
   19fa4:	lsl	r7, r3, ip
   19fa8:	rsb	r8, ip, #32
   19fac:	orr	r7, r7, r2, lsl lr
   19fb0:	orr	r7, r7, r2, lsr r8
   19fb4:	lsl	r6, r2, ip
   19fb8:	cmp	r5, r7
   19fbc:	cmpeq	r4, r6
   19fc0:	movcc	r0, #0
   19fc4:	movcc	r1, #0
   19fc8:	bcc	19fe4 <__assert_fail@plt+0x8d14>
   19fcc:	mov	r3, #1
   19fd0:	subs	r4, r4, r6
   19fd4:	lsl	r1, r3, lr
   19fd8:	lsl	r0, r3, ip
   19fdc:	orr	r1, r1, r3, lsr r8
   19fe0:	sbc	r5, r5, r7
   19fe4:	cmp	ip, #0
   19fe8:	beq	1a070 <__assert_fail@plt+0x8da0>
   19fec:	lsrs	r3, r7, #1
   19ff0:	rrx	r2, r6
   19ff4:	mov	r6, ip
   19ff8:	b	1a01c <__assert_fail@plt+0x8d4c>
   19ffc:	subs	r4, r4, r2
   1a000:	sbc	r5, r5, r3
   1a004:	adds	r4, r4, r4
   1a008:	adc	r5, r5, r5
   1a00c:	adds	r4, r4, #1
   1a010:	adc	r5, r5, #0
   1a014:	subs	r6, r6, #1
   1a018:	beq	1a038 <__assert_fail@plt+0x8d68>
   1a01c:	cmp	r5, r3
   1a020:	cmpeq	r4, r2
   1a024:	bcs	19ffc <__assert_fail@plt+0x8d2c>
   1a028:	adds	r4, r4, r4
   1a02c:	adc	r5, r5, r5
   1a030:	subs	r6, r6, #1
   1a034:	bne	1a01c <__assert_fail@plt+0x8d4c>
   1a038:	lsr	r6, r4, ip
   1a03c:	lsr	r7, r5, ip
   1a040:	orr	r6, r6, r5, lsl r8
   1a044:	adds	r2, r0, r4
   1a048:	orr	r6, r6, r5, lsr lr
   1a04c:	adc	r3, r1, r5
   1a050:	lsl	r1, r7, ip
   1a054:	orr	r1, r1, r6, lsl lr
   1a058:	lsl	r0, r6, ip
   1a05c:	orr	r1, r1, r6, lsr r8
   1a060:	subs	r0, r2, r0
   1a064:	mov	r4, r6
   1a068:	mov	r5, r7
   1a06c:	sbc	r1, r3, r1
   1a070:	cmp	r9, #0
   1a074:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1a078:	strd	r4, [r9]
   1a07c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a080:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a084:	mov	r7, r0
   1a088:	ldr	r6, [pc, #72]	; 1a0d8 <__assert_fail@plt+0x8e08>
   1a08c:	ldr	r5, [pc, #72]	; 1a0dc <__assert_fail@plt+0x8e0c>
   1a090:	add	r6, pc, r6
   1a094:	add	r5, pc, r5
   1a098:	sub	r6, r6, r5
   1a09c:	mov	r8, r1
   1a0a0:	mov	r9, r2
   1a0a4:	bl	10f80 <fstatfs64@plt-0x20>
   1a0a8:	asrs	r6, r6, #2
   1a0ac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a0b0:	mov	r4, #0
   1a0b4:	add	r4, r4, #1
   1a0b8:	ldr	r3, [r5], #4
   1a0bc:	mov	r2, r9
   1a0c0:	mov	r1, r8
   1a0c4:	mov	r0, r7
   1a0c8:	blx	r3
   1a0cc:	cmp	r6, r4
   1a0d0:	bne	1a0b4 <__assert_fail@plt+0x8de4>
   1a0d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a0d8:	andeq	r1, r1, r8, ror lr
   1a0dc:	andeq	r1, r1, r0, ror lr
   1a0e0:	bx	lr
   1a0e4:	ldr	r3, [pc, #12]	; 1a0f8 <__assert_fail@plt+0x8e28>
   1a0e8:	mov	r1, #0
   1a0ec:	add	r3, pc, r3
   1a0f0:	ldr	r2, [r3]
   1a0f4:	b	1118c <__cxa_atexit@plt>
   1a0f8:	andeq	r2, r1, r4, lsr r0

Disassembly of section .fini:

0001a0fc <.fini>:
   1a0fc:	push	{r3, lr}
   1a100:	pop	{r3, pc}
