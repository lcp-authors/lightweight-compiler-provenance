
../repos/coreutils/src/uniq:     file format elf32-littlearm


Disassembly of section .init:

00010d2c <.init>:
   10d2c:	push	{r3, lr}
   10d30:	bl	11c84 <__assert_fail@plt+0xc98>
   10d34:	pop	{r3, pc}

Disassembly of section .plt:

00010d38 <calloc@plt-0x14>:
   10d38:	push	{lr}		; (str lr, [sp, #-4]!)
   10d3c:	ldr	lr, [pc, #4]	; 10d48 <calloc@plt-0x4>
   10d40:	add	lr, pc, lr
   10d44:	ldr	pc, [lr, #8]!
   10d48:			; <UNDEFINED> instruction: 0x0001a2b8

00010d4c <calloc@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #106496	; 0x1a000
   10d54:	ldr	pc, [ip, #696]!	; 0x2b8

00010d58 <fputs_unlocked@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #106496	; 0x1a000
   10d60:	ldr	pc, [ip, #688]!	; 0x2b0

00010d64 <raise@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #106496	; 0x1a000
   10d6c:	ldr	pc, [ip, #680]!	; 0x2a8

00010d70 <strcmp@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #106496	; 0x1a000
   10d78:	ldr	pc, [ip, #672]!	; 0x2a0

00010d7c <strtol@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #106496	; 0x1a000
   10d84:	ldr	pc, [ip, #664]!	; 0x298

00010d88 <posix_fadvise64@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #106496	; 0x1a000
   10d90:	ldr	pc, [ip, #656]!	; 0x290

00010d94 <fflush@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #106496	; 0x1a000
   10d9c:	ldr	pc, [ip, #648]!	; 0x288

00010da0 <free@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #106496	; 0x1a000
   10da8:	ldr	pc, [ip, #640]!	; 0x280

00010dac <_exit@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #106496	; 0x1a000
   10db4:	ldr	pc, [ip, #632]!	; 0x278

00010db8 <memcpy@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #106496	; 0x1a000
   10dc0:	ldr	pc, [ip, #624]!	; 0x270

00010dc4 <__strtoull_internal@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #106496	; 0x1a000
   10dcc:	ldr	pc, [ip, #616]!	; 0x268

00010dd0 <mbsinit@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #106496	; 0x1a000
   10dd8:	ldr	pc, [ip, #608]!	; 0x260

00010ddc <fwrite_unlocked@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #106496	; 0x1a000
   10de4:	ldr	pc, [ip, #600]!	; 0x258

00010de8 <memcmp@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #106496	; 0x1a000
   10df0:	ldr	pc, [ip, #592]!	; 0x250

00010df4 <fputc_unlocked@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #106496	; 0x1a000
   10dfc:	ldr	pc, [ip, #584]!	; 0x248

00010e00 <dcgettext@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #106496	; 0x1a000
   10e08:	ldr	pc, [ip, #576]!	; 0x240

00010e0c <dup2@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #106496	; 0x1a000
   10e14:	ldr	pc, [ip, #568]!	; 0x238

00010e18 <realloc@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #106496	; 0x1a000
   10e20:	ldr	pc, [ip, #560]!	; 0x230

00010e24 <textdomain@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #106496	; 0x1a000
   10e2c:	ldr	pc, [ip, #552]!	; 0x228

00010e30 <iswprint@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #106496	; 0x1a000
   10e38:	ldr	pc, [ip, #544]!	; 0x220

00010e3c <fwrite@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #106496	; 0x1a000
   10e44:	ldr	pc, [ip, #536]!	; 0x218

00010e48 <lseek64@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #106496	; 0x1a000
   10e50:	ldr	pc, [ip, #528]!	; 0x210

00010e54 <__ctype_get_mb_cur_max@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #106496	; 0x1a000
   10e5c:	ldr	pc, [ip, #520]!	; 0x208

00010e60 <__fpending@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #106496	; 0x1a000
   10e68:	ldr	pc, [ip, #512]!	; 0x200

00010e6c <mbrtowc@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #106496	; 0x1a000
   10e74:	ldr	pc, [ip, #504]!	; 0x1f8

00010e78 <error@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #106496	; 0x1a000
   10e80:	ldr	pc, [ip, #496]!	; 0x1f0

00010e84 <open64@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #106496	; 0x1a000
   10e8c:	ldr	pc, [ip, #488]!	; 0x1e8

00010e90 <getenv@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #106496	; 0x1a000
   10e98:	ldr	pc, [ip, #480]!	; 0x1e0

00010e9c <malloc@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #106496	; 0x1a000
   10ea4:	ldr	pc, [ip, #472]!	; 0x1d8

00010ea8 <__libc_start_main@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #106496	; 0x1a000
   10eb0:	ldr	pc, [ip, #464]!	; 0x1d0

00010eb4 <__freading@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #106496	; 0x1a000
   10ebc:	ldr	pc, [ip, #456]!	; 0x1c8

00010ec0 <__ctype_toupper_loc@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #106496	; 0x1a000
   10ec8:	ldr	pc, [ip, #448]!	; 0x1c0

00010ecc <__gmon_start__@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #106496	; 0x1a000
   10ed4:	ldr	pc, [ip, #440]!	; 0x1b8

00010ed8 <freopen64@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #106496	; 0x1a000
   10ee0:	ldr	pc, [ip, #432]!	; 0x1b0

00010ee4 <getopt_long@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #106496	; 0x1a000
   10eec:	ldr	pc, [ip, #424]!	; 0x1a8

00010ef0 <__ctype_b_loc@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #106496	; 0x1a000
   10ef8:	ldr	pc, [ip, #416]!	; 0x1a0

00010efc <exit@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #106496	; 0x1a000
   10f04:	ldr	pc, [ip, #408]!	; 0x198

00010f08 <strlen@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #106496	; 0x1a000
   10f10:	ldr	pc, [ip, #400]!	; 0x190

00010f14 <strchr@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #106496	; 0x1a000
   10f1c:	ldr	pc, [ip, #392]!	; 0x188

00010f20 <__errno_location@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #106496	; 0x1a000
   10f28:	ldr	pc, [ip, #384]!	; 0x180

00010f2c <__cxa_atexit@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #106496	; 0x1a000
   10f34:	ldr	pc, [ip, #376]!	; 0x178

00010f38 <memset@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #106496	; 0x1a000
   10f40:	ldr	pc, [ip, #368]!	; 0x170

00010f44 <__printf_chk@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #106496	; 0x1a000
   10f4c:	ldr	pc, [ip, #360]!	; 0x168

00010f50 <fileno@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #106496	; 0x1a000
   10f58:	ldr	pc, [ip, #352]!	; 0x160

00010f5c <__fprintf_chk@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #106496	; 0x1a000
   10f64:	ldr	pc, [ip, #344]!	; 0x158

00010f68 <fclose@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #106496	; 0x1a000
   10f70:	ldr	pc, [ip, #336]!	; 0x150

00010f74 <fseeko64@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #106496	; 0x1a000
   10f7c:	ldr	pc, [ip, #328]!	; 0x148

00010f80 <__uflow@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #106496	; 0x1a000
   10f88:	ldr	pc, [ip, #320]!	; 0x140

00010f8c <__overflow@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #106496	; 0x1a000
   10f94:	ldr	pc, [ip, #312]!	; 0x138

00010f98 <setlocale@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #106496	; 0x1a000
   10fa0:	ldr	pc, [ip, #304]!	; 0x130

00010fa4 <strrchr@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #106496	; 0x1a000
   10fac:	ldr	pc, [ip, #296]!	; 0x128

00010fb0 <nl_langinfo@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #106496	; 0x1a000
   10fb8:	ldr	pc, [ip, #288]!	; 0x120

00010fbc <bindtextdomain@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #106496	; 0x1a000
   10fc4:	ldr	pc, [ip, #280]!	; 0x118

00010fc8 <strncmp@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #106496	; 0x1a000
   10fd0:	ldr	pc, [ip, #272]!	; 0x110

00010fd4 <abort@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #106496	; 0x1a000
   10fdc:	ldr	pc, [ip, #264]!	; 0x108

00010fe0 <close@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #106496	; 0x1a000
   10fe8:	ldr	pc, [ip, #256]!	; 0x100

00010fec <__assert_fail@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #106496	; 0x1a000
   10ff4:	ldr	pc, [ip, #248]!	; 0xf8

Disassembly of section .text:

00010ff8 <.text>:
   10ff8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ffc:	mov	r9, r0
   11000:	sub	sp, sp, #92	; 0x5c
   11004:	ldr	r0, [pc, #2984]	; 11bb4 <__assert_fail@plt+0xbc8>
   11008:	mov	r8, r1
   1100c:	bl	10e90 <getenv@plt>
   11010:	ldr	r3, [pc, #2976]	; 11bb8 <__assert_fail@plt+0xbcc>
   11014:	ldr	fp, [pc, #2976]	; 11bbc <__assert_fail@plt+0xbd0>
   11018:	str	r3, [sp, #56]	; 0x38
   1101c:	str	r3, [sp, #52]	; 0x34
   11020:	mov	r3, #10
   11024:	str	r3, [sp, #28]
   11028:	ldr	r6, [pc, #2960]	; 11bc0 <__assert_fail@plt+0xbd4>
   1102c:	adds	r3, r0, #0
   11030:	movne	r3, #1
   11034:	ldr	r0, [r8]
   11038:	str	r3, [sp, #16]
   1103c:	bl	130d4 <__assert_fail@plt+0x20e8>
   11040:	ldr	r1, [pc, #2940]	; 11bc4 <__assert_fail@plt+0xbd8>
   11044:	mov	r0, #6
   11048:	bl	10f98 <setlocale@plt>
   1104c:	ldr	r1, [pc, #2932]	; 11bc8 <__assert_fail@plt+0xbdc>
   11050:	ldr	r0, [pc, #2932]	; 11bcc <__assert_fail@plt+0xbe0>
   11054:	bl	10fbc <bindtextdomain@plt>
   11058:	ldr	r0, [pc, #2924]	; 11bcc <__assert_fail@plt+0xbe0>
   1105c:	bl	10e24 <textdomain@plt>
   11060:	ldr	r0, [pc, #2920]	; 11bd0 <__assert_fail@plt+0xbe4>
   11064:	bl	19788 <__assert_fail@plt+0x879c>
   11068:	mov	r3, #0
   1106c:	mov	r2, r3
   11070:	str	r3, [sp, #32]
   11074:	mov	r4, r3
   11078:	str	r3, [sp, #36]	; 0x24
   1107c:	mov	r7, r3
   11080:	str	r3, [fp, #4]
   11084:	str	r3, [fp]
   11088:	strb	r3, [fp, #14]
   1108c:	str	r3, [fp, #20]
   11090:	mvn	r3, #0
   11094:	str	r3, [fp, #8]
   11098:	mov	r3, #1
   1109c:	strb	r3, [fp, #12]
   110a0:	strb	r3, [fp, #13]
   110a4:	str	r3, [fp, #16]
   110a8:	b	110dc <__assert_fail@plt+0xf0>
   110ac:	ldr	r3, [r6]
   110b0:	cmp	r9, r3
   110b4:	ble	1116c <__assert_fail@plt+0x180>
   110b8:	cmp	r4, #2
   110bc:	beq	11b44 <__assert_fail@plt+0xb58>
   110c0:	add	r2, sp, #88	; 0x58
   110c4:	ldr	r1, [r8, r3, lsl #2]
   110c8:	add	r2, r2, r4, lsl #2
   110cc:	add	r4, r4, #1
   110d0:	add	r3, r3, #1
   110d4:	str	r1, [r2, #-36]	; 0xffffffdc
   110d8:	str	r3, [r6]
   110dc:	cmn	r7, #1
   110e0:	beq	110ac <__assert_fail@plt+0xc0>
   110e4:	ldr	sl, [pc, #2792]	; 11bd4 <__assert_fail@plt+0xbe8>
   110e8:	ldr	r5, [sp, #16]
   110ec:	cmp	r4, #0
   110f0:	moveq	r5, #0
   110f4:	andne	r5, r5, #1
   110f8:	cmp	r5, #0
   110fc:	bne	110ac <__assert_fail@plt+0xc0>
   11100:	str	r5, [sp]
   11104:	ldr	r3, [pc, #2764]	; 11bd8 <__assert_fail@plt+0xbec>
   11108:	mov	r2, sl
   1110c:	mov	r1, r8
   11110:	mov	r0, r9
   11114:	bl	10ee4 <getopt_long@plt>
   11118:	cmn	r0, #1
   1111c:	beq	1115c <__assert_fail@plt+0x170>
   11120:	cmp	r0, #100	; 0x64
   11124:	beq	11460 <__assert_fail@plt+0x474>
   11128:	ble	113e8 <__assert_fail@plt+0x3fc>
   1112c:	cmp	r0, #117	; 0x75
   11130:	beq	11474 <__assert_fail@plt+0x488>
   11134:	bgt	114bc <__assert_fail@plt+0x4d0>
   11138:	cmp	r0, #105	; 0x69
   1113c:	mov	r7, r0
   11140:	beq	11454 <__assert_fail@plt+0x468>
   11144:	cmp	r0, #115	; 0x73
   11148:	beq	116bc <__assert_fail@plt+0x6d0>
   1114c:	cmp	r0, #102	; 0x66
   11150:	beq	11558 <__assert_fail@plt+0x56c>
   11154:	mov	r0, #1
   11158:	bl	11ef0 <__assert_fail@plt+0xf04>
   1115c:	ldr	r3, [r6]
   11160:	mov	r7, r0
   11164:	cmp	r9, r3
   11168:	bgt	110b8 <__assert_fail@plt+0xcc>
   1116c:	ldr	r3, [fp, #24]
   11170:	cmp	r3, #0
   11174:	bne	114f0 <__assert_fail@plt+0x504>
   11178:	ldr	r4, [fp, #16]
   1117c:	cmp	r4, #0
   11180:	bne	11198 <__assert_fail@plt+0x1ac>
   11184:	ldrb	r3, [fp, #14]
   11188:	cmp	r3, #0
   1118c:	movne	r2, #5
   11190:	ldrne	r1, [pc, #2628]	; 11bdc <__assert_fail@plt+0xbf0>
   11194:	bne	11510 <__assert_fail@plt+0x524>
   11198:	ldr	r3, [sp, #52]	; 0x34
   1119c:	ldr	r1, [pc, #2580]	; 11bb8 <__assert_fail@plt+0xbcc>
   111a0:	mov	r0, r3
   111a4:	str	r3, [sp, #44]	; 0x2c
   111a8:	bl	10d70 <strcmp@plt>
   111ac:	ldr	r4, [sp, #56]	; 0x38
   111b0:	cmp	r0, #0
   111b4:	bne	11850 <__assert_fail@plt+0x864>
   111b8:	ldr	r1, [pc, #2552]	; 11bb8 <__assert_fail@plt+0xbcc>
   111bc:	mov	r0, r4
   111c0:	bl	10d70 <strcmp@plt>
   111c4:	cmp	r0, #0
   111c8:	beq	111e8 <__assert_fail@plt+0x1fc>
   111cc:	ldr	r3, [pc, #2572]	; 11be0 <__assert_fail@plt+0xbf4>
   111d0:	ldr	r1, [pc, #2572]	; 11be4 <__assert_fail@plt+0xbf8>
   111d4:	mov	r0, r4
   111d8:	ldr	r2, [r3]
   111dc:	bl	12b2c <__assert_fail@plt+0x1b40>
   111e0:	subs	r5, r0, #0
   111e4:	beq	11b7c <__assert_fail@plt+0xb90>
   111e8:	ldr	sl, [pc, #2552]	; 11be8 <__assert_fail@plt+0xbfc>
   111ec:	mov	r1, #2
   111f0:	ldr	r0, [sl]
   111f4:	bl	129a0 <__assert_fail@plt+0x19b4>
   111f8:	add	r0, sp, #60	; 0x3c
   111fc:	bl	12de0 <__assert_fail@plt+0x1df4>
   11200:	add	r0, sp, #72	; 0x48
   11204:	bl	12de0 <__assert_fail@plt+0x1df4>
   11208:	ldrb	r3, [fp, #13]
   1120c:	cmp	r3, #0
   11210:	beq	1122c <__assert_fail@plt+0x240>
   11214:	ldrb	r8, [fp, #12]
   11218:	cmp	r8, #0
   1121c:	beq	1122c <__assert_fail@plt+0x240>
   11220:	ldr	r3, [fp, #16]
   11224:	cmp	r3, #1
   11228:	beq	1191c <__assert_fail@plt+0x930>
   1122c:	ldr	r2, [sp, #28]
   11230:	ldr	r1, [sl]
   11234:	add	r0, sp, #72	; 0x48
   11238:	bl	12f0c <__assert_fail@plt+0x1f20>
   1123c:	cmp	r0, #0
   11240:	beq	113b0 <__assert_fail@plt+0x3c4>
   11244:	ldr	r6, [sp, #76]	; 0x4c
   11248:	ldr	r4, [sp, #80]	; 0x50
   1124c:	mov	r0, r6
   11250:	mov	r1, r4
   11254:	bl	11df0 <__assert_fail@plt+0xe04>
   11258:	sub	r6, r6, #1
   1125c:	mov	r3, #1
   11260:	str	r3, [sp, #36]	; 0x24
   11264:	mov	r2, #0
   11268:	mov	r3, #0
   1126c:	add	r7, sp, #72	; 0x48
   11270:	add	r5, sp, #60	; 0x3c
   11274:	strd	r2, [sp, #16]
   11278:	sub	r4, r0, r4
   1127c:	sub	r6, r6, r4
   11280:	str	r0, [sp, #32]
   11284:	ldr	r1, [sl]
   11288:	ldr	r3, [r1]
   1128c:	tst	r3, #16
   11290:	bne	11390 <__assert_fail@plt+0x3a4>
   11294:	ldr	r2, [sp, #28]
   11298:	mov	r0, r5
   1129c:	bl	12f0c <__assert_fail@plt+0x1f20>
   112a0:	cmp	r0, #0
   112a4:	beq	117f0 <__assert_fail@plt+0x804>
   112a8:	ldmib	r5, {r4, r9}
   112ac:	mov	r1, r9
   112b0:	mov	r0, r4
   112b4:	bl	11df0 <__assert_fail@plt+0xe04>
   112b8:	sub	r4, r4, #1
   112bc:	ldr	r2, [fp, #8]
   112c0:	ldrb	ip, [fp, #28]
   112c4:	sub	r9, r0, r9
   112c8:	sub	r4, r4, r9
   112cc:	cmp	r4, r2
   112d0:	movcc	r1, r4
   112d4:	movcs	r1, r2
   112d8:	cmp	r6, r2
   112dc:	movcc	r2, r6
   112e0:	cmp	ip, #0
   112e4:	mov	r8, r0
   112e8:	beq	11578 <__assert_fail@plt+0x58c>
   112ec:	cmp	r2, r1
   112f0:	movne	r9, ip
   112f4:	movne	ip, #0
   112f8:	beq	11664 <__assert_fail@plt+0x678>
   112fc:	ldr	r2, [fp, #20]
   11300:	cmp	r2, #0
   11304:	beq	115f8 <__assert_fail@plt+0x60c>
   11308:	cmp	r9, #0
   1130c:	beq	11670 <__assert_fail@plt+0x684>
   11310:	ldrd	r2, [sp, #16]
   11314:	orrs	r3, r2, r3
   11318:	beq	11618 <__assert_fail@plt+0x62c>
   1131c:	mov	r3, #0
   11320:	str	r3, [sp, #36]	; 0x24
   11324:	ldrb	r3, [fp, #12]
   11328:	eor	r3, r3, #1
   1132c:	cmp	r3, #0
   11330:	bne	11358 <__assert_fail@plt+0x36c>
   11334:	ldr	r3, [fp, #16]
   11338:	cmp	r3, #0
   1133c:	beq	116a0 <__assert_fail@plt+0x6b4>
   11340:	ldr	r3, [pc, #2200]	; 11be0 <__assert_fail@plt+0xbf4>
   11344:	ldr	r2, [r7, #4]
   11348:	mov	r1, #1
   1134c:	ldr	r3, [r3]
   11350:	ldr	r0, [r7, #8]
   11354:	bl	10ddc <fwrite_unlocked@plt>
   11358:	mov	r3, r5
   1135c:	cmp	r9, #0
   11360:	mov	r5, r7
   11364:	mov	r6, r4
   11368:	str	r8, [sp, #32]
   1136c:	mov	r7, r3
   11370:	beq	11284 <__assert_fail@plt+0x298>
   11374:	ldr	r1, [sl]
   11378:	mov	r3, #0
   1137c:	mov	r2, #0
   11380:	strd	r2, [sp, #16]
   11384:	ldr	r3, [r1]
   11388:	tst	r3, #16
   1138c:	beq	11294 <__assert_fail@plt+0x2a8>
   11390:	ldrd	r2, [sp, #16]
   11394:	orrs	r3, r2, r3
   11398:	ldrbeq	r3, [fp, #13]
   1139c:	eoreq	r3, r3, #1
   113a0:	ldrbne	r3, [fp, #12]
   113a4:	eorne	r3, r3, #1
   113a8:	cmp	r3, #0
   113ac:	beq	118d8 <__assert_fail@plt+0x8ec>
   113b0:	ldr	r0, [sl]
   113b4:	ldr	r3, [r0]
   113b8:	tst	r3, #32
   113bc:	bne	11800 <__assert_fail@plt+0x814>
   113c0:	bl	129d4 <__assert_fail@plt+0x19e8>
   113c4:	subs	r4, r0, #0
   113c8:	bne	11800 <__assert_fail@plt+0x814>
   113cc:	ldr	r0, [sp, #68]	; 0x44
   113d0:	bl	12ad4 <__assert_fail@plt+0x1ae8>
   113d4:	ldr	r0, [sp, #80]	; 0x50
   113d8:	bl	12ad4 <__assert_fail@plt+0x1ae8>
   113dc:	mov	r0, r4
   113e0:	add	sp, sp, #92	; 0x5c
   113e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113e8:	cmp	r0, #57	; 0x39
   113ec:	mov	r7, r0
   113f0:	bgt	11764 <__assert_fail@plt+0x778>
   113f4:	cmp	r0, #48	; 0x30
   113f8:	bge	11488 <__assert_fail@plt+0x49c>
   113fc:	cmn	r0, #2
   11400:	beq	1144c <__assert_fail@plt+0x460>
   11404:	cmp	r0, #1
   11408:	beq	1172c <__assert_fail@plt+0x740>
   1140c:	cmn	r0, #3
   11410:	bne	11154 <__assert_fail@plt+0x168>
   11414:	ldr	r3, [pc, #2000]	; 11bec <__assert_fail@plt+0xc00>
   11418:	ldr	r0, [pc, #1984]	; 11be0 <__assert_fail@plt+0xbf4>
   1141c:	ldr	r1, [pc, #1996]	; 11bf0 <__assert_fail@plt+0xc04>
   11420:	ldr	r2, [pc, #1996]	; 11bf4 <__assert_fail@plt+0xc08>
   11424:	str	r5, [sp, #8]
   11428:	ldr	r0, [r0]
   1142c:	ldr	r3, [r3]
   11430:	str	r1, [sp, #4]
   11434:	str	r2, [sp]
   11438:	ldr	r1, [pc, #1976]	; 11bf8 <__assert_fail@plt+0xc0c>
   1143c:	ldr	r2, [pc, #1976]	; 11bfc <__assert_fail@plt+0xc10>
   11440:	bl	17974 <__assert_fail@plt+0x6988>
   11444:	mov	r0, #0
   11448:	bl	10efc <exit@plt>
   1144c:	mov	r0, #0
   11450:	bl	11ef0 <__assert_fail@plt+0xf04>
   11454:	mov	r3, #1
   11458:	strb	r3, [fp, #28]
   1145c:	b	110e8 <__assert_fail@plt+0xfc>
   11460:	mov	r3, #1
   11464:	mov	r7, r0
   11468:	strb	r5, [fp, #13]
   1146c:	str	r3, [sp, #32]
   11470:	b	110e8 <__assert_fail@plt+0xfc>
   11474:	mov	r3, #1
   11478:	mov	r7, r0
   1147c:	strb	r5, [fp, #12]
   11480:	str	r3, [sp, #32]
   11484:	b	110e8 <__assert_fail@plt+0xfc>
   11488:	ldr	r3, [sp, #36]	; 0x24
   1148c:	cmp	r3, #2
   11490:	subeq	r2, r0, #48	; 0x30
   11494:	beq	11548 <__assert_fail@plt+0x55c>
   11498:	ldr	r3, [fp]
   1149c:	ldr	r2, [pc, #1884]	; 11c00 <__assert_fail@plt+0xc14>
   114a0:	cmp	r3, r2
   114a4:	bls	11534 <__assert_fail@plt+0x548>
   114a8:	mvn	r3, #0
   114ac:	str	r3, [fp]
   114b0:	mov	r3, #1
   114b4:	str	r3, [sp, #36]	; 0x24
   114b8:	b	110dc <__assert_fail@plt+0xf0>
   114bc:	cmp	r0, #122	; 0x7a
   114c0:	beq	1152c <__assert_fail@plt+0x540>
   114c4:	cmp	r0, #256	; 0x100
   114c8:	mov	r7, r0
   114cc:	beq	116d4 <__assert_fail@plt+0x6e8>
   114d0:	cmp	r0, #119	; 0x77
   114d4:	bne	11154 <__assert_fail@plt+0x168>
   114d8:	ldr	r3, [pc, #1828]	; 11c04 <__assert_fail@plt+0xc18>
   114dc:	ldr	r1, [pc, #1828]	; 11c08 <__assert_fail@plt+0xc1c>
   114e0:	ldr	r0, [r3]
   114e4:	bl	11d70 <__assert_fail@plt+0xd84>
   114e8:	str	r0, [fp, #8]
   114ec:	b	110e8 <__assert_fail@plt+0xfc>
   114f0:	ldr	r3, [sp, #32]
   114f4:	cmp	r3, #0
   114f8:	bne	11b88 <__assert_fail@plt+0xb9c>
   114fc:	ldr	r3, [fp, #16]
   11500:	cmp	r3, #1
   11504:	movne	r2, #5
   11508:	ldrne	r1, [pc, #1788]	; 11c0c <__assert_fail@plt+0xc20>
   1150c:	beq	11198 <__assert_fail@plt+0x1ac>
   11510:	mov	r0, #0
   11514:	bl	10e00 <dcgettext@plt>
   11518:	mov	r1, #0
   1151c:	mov	r2, r0
   11520:	mov	r0, r1
   11524:	bl	10e78 <error@plt>
   11528:	b	11154 <__assert_fail@plt+0x168>
   1152c:	str	r5, [sp, #28]
   11530:	b	11100 <__assert_fail@plt+0x114>
   11534:	mov	r2, #10
   11538:	sub	r1, r0, #48	; 0x30
   1153c:	mla	r2, r2, r3, r1
   11540:	cmp	r3, r2
   11544:	bhi	114a8 <__assert_fail@plt+0x4bc>
   11548:	mov	r3, #1
   1154c:	str	r2, [fp]
   11550:	str	r3, [sp, #36]	; 0x24
   11554:	b	110dc <__assert_fail@plt+0xf0>
   11558:	ldr	r3, [pc, #1700]	; 11c04 <__assert_fail@plt+0xc18>
   1155c:	ldr	r1, [pc, #1708]	; 11c10 <__assert_fail@plt+0xc24>
   11560:	ldr	r0, [r3]
   11564:	bl	11d70 <__assert_fail@plt+0xd84>
   11568:	mov	r3, #2
   1156c:	str	r3, [sp, #36]	; 0x24
   11570:	str	r0, [fp]
   11574:	b	110e8 <__assert_fail@plt+0xfc>
   11578:	cmp	r2, r1
   1157c:	movne	r9, #1
   11580:	bne	112fc <__assert_fail@plt+0x310>
   11584:	ldr	r1, [sp, #32]
   11588:	bl	10de8 <memcmp@plt>
   1158c:	cmp	r0, #0
   11590:	ldrd	r2, [sp, #16]
   11594:	moveq	ip, #1
   11598:	movne	ip, #0
   1159c:	mov	r1, #0
   115a0:	uxtb	r0, ip
   115a4:	movne	r9, #1
   115a8:	moveq	r9, #0
   115ac:	adds	r2, r2, r0
   115b0:	adc	r3, r3, r1
   115b4:	mvn	r1, #0
   115b8:	mvn	r0, #0
   115bc:	cmp	r3, r1
   115c0:	cmpeq	r2, r0
   115c4:	strd	r2, [sp, #16]
   115c8:	bne	112fc <__assert_fail@plt+0x310>
   115cc:	ldr	r2, [fp, #20]
   115d0:	cmp	r2, #0
   115d4:	beq	11630 <__assert_fail@plt+0x644>
   115d8:	cmp	r9, #0
   115dc:	beq	11638 <__assert_fail@plt+0x64c>
   115e0:	mvn	r3, #0
   115e4:	mvn	r2, #1
   115e8:	strd	r2, [sp, #16]
   115ec:	mov	r3, #0
   115f0:	str	r3, [sp, #36]	; 0x24
   115f4:	b	11324 <__assert_fail@plt+0x338>
   115f8:	cmp	r9, #0
   115fc:	bne	11840 <__assert_fail@plt+0x854>
   11600:	ldrb	r2, [fp, #14]
   11604:	cmp	r2, #0
   11608:	beq	11284 <__assert_fail@plt+0x298>
   1160c:	ldrd	r2, [sp, #16]
   11610:	orrs	r3, r2, r3
   11614:	bne	11650 <__assert_fail@plt+0x664>
   11618:	ldrb	r3, [fp, #13]
   1161c:	mov	r0, #0
   11620:	mov	r1, #0
   11624:	eor	r3, r3, #1
   11628:	strd	r0, [sp, #16]
   1162c:	b	1132c <__assert_fail@plt+0x340>
   11630:	cmp	r9, #0
   11634:	bne	11834 <__assert_fail@plt+0x848>
   11638:	ldrb	r2, [fp, #14]
   1163c:	mvn	r3, #0
   11640:	cmp	r2, #0
   11644:	mvn	r2, #1
   11648:	strd	r2, [sp, #16]
   1164c:	beq	11284 <__assert_fail@plt+0x298>
   11650:	cmp	ip, #0
   11654:	beq	11324 <__assert_fail@plt+0x338>
   11658:	ldrb	r3, [fp, #14]
   1165c:	eor	r3, r3, #1
   11660:	b	1132c <__assert_fail@plt+0x340>
   11664:	ldr	r1, [sp, #32]
   11668:	bl	13020 <__assert_fail@plt+0x2034>
   1166c:	b	1158c <__assert_fail@plt+0x5a0>
   11670:	ldrd	r0, [sp, #16]
   11674:	cmp	r1, #0
   11678:	cmpeq	r0, #1
   1167c:	bne	11600 <__assert_fail@plt+0x614>
   11680:	cmp	r2, #1
   11684:	beq	118a4 <__assert_fail@plt+0x8b8>
   11688:	cmp	r2, #2
   1168c:	beq	11898 <__assert_fail@plt+0x8ac>
   11690:	ldrb	r3, [fp, #14]
   11694:	cmp	r3, #0
   11698:	bne	11658 <__assert_fail@plt+0x66c>
   1169c:	b	11284 <__assert_fail@plt+0x298>
   116a0:	ldrd	r2, [sp, #16]
   116a4:	ldr	r1, [pc, #1384]	; 11c14 <__assert_fail@plt+0xc28>
   116a8:	mov	r0, #1
   116ac:	adds	r2, r2, #1
   116b0:	adc	r3, r3, #0
   116b4:	bl	10f44 <__printf_chk@plt>
   116b8:	b	11340 <__assert_fail@plt+0x354>
   116bc:	ldr	r3, [pc, #1344]	; 11c04 <__assert_fail@plt+0xc18>
   116c0:	ldr	r1, [pc, #1360]	; 11c18 <__assert_fail@plt+0xc2c>
   116c4:	ldr	r0, [r3]
   116c8:	bl	11d70 <__assert_fail@plt+0xd84>
   116cc:	str	r0, [fp, #4]
   116d0:	b	110e8 <__assert_fail@plt+0xfc>
   116d4:	ldr	r3, [pc, #1320]	; 11c04 <__assert_fail@plt+0xc18>
   116d8:	ldr	r1, [r3]
   116dc:	cmp	r1, #0
   116e0:	moveq	r3, #3
   116e4:	streq	r3, [fp, #24]
   116e8:	beq	110e8 <__assert_fail@plt+0xfc>
   116ec:	ldr	r3, [pc, #1320]	; 11c1c <__assert_fail@plt+0xc30>
   116f0:	mov	ip, #1
   116f4:	mov	r0, #4
   116f8:	ldr	r2, [r3]
   116fc:	ldr	r3, [pc, #1308]	; 11c20 <__assert_fail@plt+0xc34>
   11700:	str	r2, [sp, #4]
   11704:	str	r0, [sp]
   11708:	add	r2, r3, #16
   1170c:	str	ip, [sp, #8]
   11710:	ldr	r0, [pc, #1292]	; 11c24 <__assert_fail@plt+0xc38>
   11714:	bl	125e8 <__assert_fail@plt+0x15fc>
   11718:	ldr	r3, [pc, #1288]	; 11c28 <__assert_fail@plt+0xc3c>
   1171c:	add	r0, r3, r0, lsl #2
   11720:	ldr	r3, [r0, #292]	; 0x124
   11724:	str	r3, [fp, #24]
   11728:	b	110e8 <__assert_fail@plt+0xfc>
   1172c:	ldr	r3, [pc, #1232]	; 11c04 <__assert_fail@plt+0xc18>
   11730:	ldr	r3, [r3]
   11734:	ldrb	r3, [r3]
   11738:	cmp	r3, #43	; 0x2b
   1173c:	beq	11ae8 <__assert_fail@plt+0xafc>
   11740:	cmp	r4, #2
   11744:	beq	11b94 <__assert_fail@plt+0xba8>
   11748:	ldr	r3, [pc, #1204]	; 11c04 <__assert_fail@plt+0xc18>
   1174c:	ldr	r2, [r3]
   11750:	add	r3, sp, #88	; 0x58
   11754:	add	r3, r3, r4, lsl #2
   11758:	add	r4, r4, #1
   1175c:	str	r2, [r3, #-36]	; 0xffffffdc
   11760:	b	110e8 <__assert_fail@plt+0xfc>
   11764:	cmp	r0, #68	; 0x44
   11768:	beq	11784 <__assert_fail@plt+0x798>
   1176c:	cmp	r0, #99	; 0x63
   11770:	bne	11154 <__assert_fail@plt+0x168>
   11774:	mov	r3, #1
   11778:	str	r5, [fp, #16]
   1177c:	str	r3, [sp, #32]
   11780:	b	110e8 <__assert_fail@plt+0xfc>
   11784:	ldr	r3, [pc, #1144]	; 11c04 <__assert_fail@plt+0xc18>
   11788:	strb	r5, [fp, #13]
   1178c:	ldr	r1, [r3]
   11790:	mov	r3, #1
   11794:	cmp	r1, #0
   11798:	strb	r3, [fp, #14]
   1179c:	moveq	r3, #1
   117a0:	streq	r1, [fp, #20]
   117a4:	streq	r3, [sp, #32]
   117a8:	beq	110e8 <__assert_fail@plt+0xfc>
   117ac:	ldr	r3, [pc, #1128]	; 11c1c <__assert_fail@plt+0xc30>
   117b0:	mov	ip, #1
   117b4:	mov	r0, #4
   117b8:	ldr	r2, [r3]
   117bc:	ldr	r3, [pc, #1128]	; 11c2c <__assert_fail@plt+0xc40>
   117c0:	str	r0, [sp]
   117c4:	stmib	sp, {r2, ip}
   117c8:	ldr	r0, [pc, #1120]	; 11c30 <__assert_fail@plt+0xc44>
   117cc:	add	r2, r3, #12
   117d0:	bl	125e8 <__assert_fail@plt+0x15fc>
   117d4:	mov	r3, #1
   117d8:	str	r3, [sp, #32]
   117dc:	ldr	r3, [pc, #1092]	; 11c28 <__assert_fail@plt+0xc3c>
   117e0:	add	r0, r3, r0, lsl #2
   117e4:	ldr	r3, [r0, #264]	; 0x108
   117e8:	str	r3, [fp, #20]
   117ec:	b	110e8 <__assert_fail@plt+0xfc>
   117f0:	ldr	r3, [sl]
   117f4:	ldr	r3, [r3]
   117f8:	tst	r3, #32
   117fc:	beq	11390 <__assert_fail@plt+0x3a4>
   11800:	mov	r2, #5
   11804:	ldr	r1, [pc, #1064]	; 11c34 <__assert_fail@plt+0xc48>
   11808:	mov	r0, #0
   1180c:	bl	10e00 <dcgettext@plt>
   11810:	ldr	r1, [sp, #44]	; 0x2c
   11814:	mov	r4, r0
   11818:	mov	r0, #4
   1181c:	bl	15630 <__assert_fail@plt+0x4644>
   11820:	mov	r2, r4
   11824:	mov	r1, #0
   11828:	mov	r3, r0
   1182c:	mov	r0, #1
   11830:	bl	10e78 <error@plt>
   11834:	mvn	r2, #1
   11838:	mvn	r3, #0
   1183c:	strd	r2, [sp, #16]
   11840:	ldrd	r2, [sp, #16]
   11844:	orrs	r3, r2, r3
   11848:	beq	11618 <__assert_fail@plt+0x62c>
   1184c:	b	11324 <__assert_fail@plt+0x338>
   11850:	ldr	r3, [pc, #912]	; 11be8 <__assert_fail@plt+0xbfc>
   11854:	ldr	r1, [pc, #988]	; 11c38 <__assert_fail@plt+0xc4c>
   11858:	ldr	r0, [sp, #44]	; 0x2c
   1185c:	ldr	r2, [r3]
   11860:	bl	12b2c <__assert_fail@plt+0x1b40>
   11864:	subs	r5, r0, #0
   11868:	bne	111b8 <__assert_fail@plt+0x1cc>
   1186c:	bl	10f20 <__errno_location@plt>
   11870:	ldr	r2, [sp, #44]	; 0x2c
   11874:	ldr	r4, [r0]
   11878:	mov	r1, #3
   1187c:	mov	r0, r5
   11880:	bl	160ac <__assert_fail@plt+0x50c0>
   11884:	mov	r1, r4
   11888:	ldr	r2, [pc, #940]	; 11c3c <__assert_fail@plt+0xc50>
   1188c:	mov	r3, r0
   11890:	mov	r0, #1
   11894:	bl	10e78 <error@plt>
   11898:	ldr	r3, [sp, #36]	; 0x24
   1189c:	cmp	r3, #0
   118a0:	bne	11690 <__assert_fail@plt+0x6a4>
   118a4:	ldr	r3, [pc, #820]	; 11be0 <__assert_fail@plt+0xbf4>
   118a8:	ldr	r0, [r3]
   118ac:	ldr	r2, [r0, #24]
   118b0:	ldr	r3, [r0, #20]
   118b4:	cmp	r3, r2
   118b8:	addcc	r2, r3, #1
   118bc:	strcc	r2, [r0, #20]
   118c0:	ldrbcc	r2, [sp, #28]
   118c4:	strbcc	r2, [r3]
   118c8:	bcc	11690 <__assert_fail@plt+0x6a4>
   118cc:	ldr	r1, [sp, #28]
   118d0:	bl	10f8c <__overflow@plt>
   118d4:	b	11690 <__assert_fail@plt+0x6a4>
   118d8:	ldr	r3, [fp, #16]
   118dc:	cmp	r3, #0
   118e0:	beq	11900 <__assert_fail@plt+0x914>
   118e4:	ldr	r3, [pc, #756]	; 11be0 <__assert_fail@plt+0xbf4>
   118e8:	ldr	r2, [r7, #4]
   118ec:	ldr	r0, [r7, #8]
   118f0:	ldr	r3, [r3]
   118f4:	mov	r1, #1
   118f8:	bl	10ddc <fwrite_unlocked@plt>
   118fc:	b	113b0 <__assert_fail@plt+0x3c4>
   11900:	ldrd	r2, [sp, #16]
   11904:	ldr	r1, [pc, #776]	; 11c14 <__assert_fail@plt+0xc28>
   11908:	mov	r0, #1
   1190c:	adds	r2, r2, #1
   11910:	adc	r3, r3, #0
   11914:	bl	10f44 <__printf_chk@plt>
   11918:	b	118e4 <__assert_fail@plt+0x8f8>
   1191c:	mov	r2, #0
   11920:	add	r5, sp, #60	; 0x3c
   11924:	mov	r9, r2
   11928:	add	r1, sp, #72	; 0x48
   1192c:	str	r2, [sp, #32]
   11930:	str	r1, [sp, #16]
   11934:	str	r3, [sp, #36]	; 0x24
   11938:	ldr	r1, [sl]
   1193c:	ldr	r3, [r1]
   11940:	tst	r3, #16
   11944:	bne	11a94 <__assert_fail@plt+0xaa8>
   11948:	ldr	r2, [sp, #28]
   1194c:	mov	r0, r5
   11950:	bl	12f0c <__assert_fail@plt+0x1f20>
   11954:	cmp	r0, #0
   11958:	beq	11a94 <__assert_fail@plt+0xaa8>
   1195c:	ldr	r7, [r5, #4]
   11960:	ldr	r4, [r5, #8]
   11964:	mov	r0, r7
   11968:	mov	r1, r4
   1196c:	bl	11df0 <__assert_fail@plt+0xe04>
   11970:	sub	r3, r7, #1
   11974:	cmp	r9, #0
   11978:	sub	r4, r0, r4
   1197c:	mov	r6, r0
   11980:	sub	r4, r3, r4
   11984:	beq	119b8 <__assert_fail@plt+0x9cc>
   11988:	ldr	r3, [fp, #8]
   1198c:	ldr	r2, [sp, #40]	; 0x28
   11990:	ldrb	ip, [fp, #28]
   11994:	cmp	r4, r3
   11998:	movcc	r1, r4
   1199c:	movcs	r1, r3
   119a0:	cmp	r2, r3
   119a4:	movcs	r2, r3
   119a8:	cmp	ip, #0
   119ac:	beq	11a1c <__assert_fail@plt+0xa30>
   119b0:	cmp	r2, r1
   119b4:	beq	11a4c <__assert_fail@plt+0xa60>
   119b8:	ldr	r3, [fp, #24]
   119bc:	cmp	r3, #0
   119c0:	beq	119e8 <__assert_fail@plt+0x9fc>
   119c4:	cmp	r3, #4
   119c8:	cmpne	r3, #1
   119cc:	beq	11a60 <__assert_fail@plt+0xa74>
   119d0:	ldr	r2, [sp, #32]
   119d4:	cmp	r2, #0
   119d8:	beq	119e8 <__assert_fail@plt+0x9fc>
   119dc:	sub	r3, r3, #2
   119e0:	cmp	r3, #1
   119e4:	bls	11a60 <__assert_fail@plt+0xa74>
   119e8:	ldr	r3, [pc, #496]	; 11be0 <__assert_fail@plt+0xbf4>
   119ec:	ldr	r2, [r5, #4]
   119f0:	ldr	r0, [r5, #8]
   119f4:	ldr	r3, [r3]
   119f8:	ldr	r1, [sp, #36]	; 0x24
   119fc:	bl	10ddc <fwrite_unlocked@plt>
   11a00:	mov	r3, r5
   11a04:	str	r4, [sp, #40]	; 0x28
   11a08:	ldr	r5, [sp, #16]
   11a0c:	mov	r9, r6
   11a10:	str	r8, [sp, #32]
   11a14:	str	r3, [sp, #16]
   11a18:	b	11938 <__assert_fail@plt+0x94c>
   11a1c:	cmp	r2, r1
   11a20:	bne	119b8 <__assert_fail@plt+0x9cc>
   11a24:	mov	r1, r9
   11a28:	bl	10de8 <memcmp@plt>
   11a2c:	adds	r0, r0, #0
   11a30:	movne	r0, #1
   11a34:	cmp	r0, #0
   11a38:	bne	119b8 <__assert_fail@plt+0x9cc>
   11a3c:	ldr	r3, [fp, #24]
   11a40:	cmp	r3, #0
   11a44:	beq	11938 <__assert_fail@plt+0x94c>
   11a48:	b	119e8 <__assert_fail@plt+0x9fc>
   11a4c:	mov	r1, r9
   11a50:	bl	13020 <__assert_fail@plt+0x2034>
   11a54:	adds	r0, r0, #0
   11a58:	movne	r0, #1
   11a5c:	b	11a34 <__assert_fail@plt+0xa48>
   11a60:	ldr	r3, [pc, #376]	; 11be0 <__assert_fail@plt+0xbf4>
   11a64:	ldr	r0, [r3]
   11a68:	ldr	r2, [r0, #24]
   11a6c:	ldr	r3, [r0, #20]
   11a70:	cmp	r3, r2
   11a74:	addcc	r2, r3, #1
   11a78:	strcc	r2, [r0, #20]
   11a7c:	ldrbcc	r2, [sp, #28]
   11a80:	strbcc	r2, [r3]
   11a84:	bcc	119e8 <__assert_fail@plt+0x9fc>
   11a88:	ldr	r1, [sp, #28]
   11a8c:	bl	10f8c <__overflow@plt>
   11a90:	b	119e8 <__assert_fail@plt+0x9fc>
   11a94:	ldr	r3, [fp, #24]
   11a98:	sub	r3, r3, #2
   11a9c:	bics	r3, r3, #2
   11aa0:	ldr	r3, [sp, #32]
   11aa4:	movne	fp, #0
   11aa8:	andeq	fp, r3, #1
   11aac:	cmp	fp, #0
   11ab0:	beq	113b0 <__assert_fail@plt+0x3c4>
   11ab4:	ldr	r3, [pc, #292]	; 11be0 <__assert_fail@plt+0xbf4>
   11ab8:	ldr	r0, [r3]
   11abc:	ldr	r2, [r0, #24]
   11ac0:	ldr	r3, [r0, #20]
   11ac4:	cmp	r3, r2
   11ac8:	addcc	r2, r3, #1
   11acc:	strcc	r2, [r0, #20]
   11ad0:	ldrbcc	r2, [sp, #28]
   11ad4:	strbcc	r2, [r3]
   11ad8:	bcc	113b0 <__assert_fail@plt+0x3c4>
   11adc:	ldr	r1, [sp, #28]
   11ae0:	bl	10f8c <__overflow@plt>
   11ae4:	b	113b0 <__assert_fail@plt+0x3c4>
   11ae8:	bl	13074 <__assert_fail@plt+0x2088>
   11aec:	sub	r3, r0, #199680	; 0x30c00
   11af0:	sub	r3, r3, #432	; 0x1b0
   11af4:	cmp	r3, #696	; 0x2b8
   11af8:	bls	11740 <__assert_fail@plt+0x754>
   11afc:	ldr	r0, [pc, #256]	; 11c04 <__assert_fail@plt+0xc18>
   11b00:	ldr	r2, [pc, #188]	; 11bc4 <__assert_fail@plt+0xbd8>
   11b04:	add	r3, sp, #72	; 0x48
   11b08:	str	r2, [sp]
   11b0c:	mov	r1, #0
   11b10:	mov	r2, #10
   11b14:	ldr	r0, [r0]
   11b18:	bl	181e8 <__assert_fail@plt+0x71fc>
   11b1c:	cmp	r0, #0
   11b20:	bne	11740 <__assert_fail@plt+0x754>
   11b24:	ldrd	r2, [sp, #72]	; 0x48
   11b28:	mov	r1, #0
   11b2c:	mvn	r0, #0
   11b30:	cmp	r3, r1
   11b34:	cmpeq	r2, r0
   11b38:	strls	r2, [fp, #4]
   11b3c:	bls	110e8 <__assert_fail@plt+0xfc>
   11b40:	b	11740 <__assert_fail@plt+0x754>
   11b44:	mov	r2, #5
   11b48:	ldr	r1, [pc, #240]	; 11c40 <__assert_fail@plt+0xc54>
   11b4c:	mov	r0, #0
   11b50:	bl	10e00 <dcgettext@plt>
   11b54:	ldr	r3, [r6]
   11b58:	mov	r4, r0
   11b5c:	ldr	r0, [r8, r3, lsl #2]
   11b60:	bl	16fa0 <__assert_fail@plt+0x5fb4>
   11b64:	mov	r1, #0
   11b68:	mov	r2, r4
   11b6c:	mov	r3, r0
   11b70:	mov	r0, r1
   11b74:	bl	10e78 <error@plt>
   11b78:	b	11154 <__assert_fail@plt+0x168>
   11b7c:	bl	10f20 <__errno_location@plt>
   11b80:	mov	r2, r4
   11b84:	b	11874 <__assert_fail@plt+0x888>
   11b88:	mov	r2, #5
   11b8c:	ldr	r1, [pc, #176]	; 11c44 <__assert_fail@plt+0xc58>
   11b90:	b	11510 <__assert_fail@plt+0x524>
   11b94:	mov	r2, #5
   11b98:	ldr	r1, [pc, #160]	; 11c40 <__assert_fail@plt+0xc54>
   11b9c:	mov	r0, #0
   11ba0:	bl	10e00 <dcgettext@plt>
   11ba4:	ldr	r3, [pc, #88]	; 11c04 <__assert_fail@plt+0xc18>
   11ba8:	mov	r4, r0
   11bac:	ldr	r0, [r3]
   11bb0:	b	11b60 <__assert_fail@plt+0xb74>
   11bb4:	andeq	sl, r1, ip, lsr r0
   11bb8:	andeq	sl, r1, ip, asr #32
   11bbc:	andeq	fp, r2, r0, ror r1
   11bc0:	andeq	fp, r2, r0, asr r1
   11bc4:	andeq	r9, r1, r0, lsl #20
   11bc8:	andeq	sl, r1, r0, asr r0
   11bcc:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11bd0:			; <UNDEFINED> instruction: 0x000128b0
   11bd4:	andeq	sl, r1, r8, rrx
   11bd8:	andeq	r9, r1, r4, ror #15
   11bdc:	muleq	r1, ip, r1
   11be0:	andeq	fp, r2, r4, ror #2
   11be4:	andeq	sl, r1, r0, ror #3
   11be8:	andeq	fp, r2, r0, ror #2
   11bec:	strdeq	fp, [r2], -ip
   11bf0:	andeq	sl, r1, r4, lsl r1
   11bf4:	andeq	sl, r1, r4, lsr #2
   11bf8:	strdeq	r9, [r1], -ip
   11bfc:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   11c00:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11c04:	andeq	fp, r2, r8, ror #2
   11c08:	strdeq	sl, [r1], -r0
   11c0c:	andeq	sl, r1, r8, ror #2
   11c10:	andeq	sl, r1, ip, lsr #1
   11c14:	strdeq	sl, [r1], -r8
   11c18:	ldrdeq	sl, [r1], -r0
   11c1c:	andeq	fp, r2, r0, lsl #2
   11c20:	ldrdeq	r9, [r1], -r0
   11c24:	andeq	sl, r1, r4, lsr #1
   11c28:	andeq	r9, r1, ip, lsr #15
   11c2c:			; <UNDEFINED> instruction: 0x000198b4
   11c30:	muleq	r1, r4, r0
   11c34:	andeq	sl, r1, r4, ror #3
   11c38:	ldrdeq	sl, [r1], -ip
   11c3c:	strdeq	r9, [r1], -r8
   11c40:	andeq	sl, r1, r0, lsl #1
   11c44:	andeq	sl, r1, r8, lsr r1
   11c48:	mov	fp, #0
   11c4c:	mov	lr, #0
   11c50:	pop	{r1}		; (ldr r1, [sp], #4)
   11c54:	mov	r2, sp
   11c58:	push	{r2}		; (str r2, [sp, #-4]!)
   11c5c:	push	{r0}		; (str r0, [sp, #-4]!)
   11c60:	ldr	ip, [pc, #16]	; 11c78 <__assert_fail@plt+0xc8c>
   11c64:	push	{ip}		; (str ip, [sp, #-4]!)
   11c68:	ldr	r0, [pc, #12]	; 11c7c <__assert_fail@plt+0xc90>
   11c6c:	ldr	r3, [pc, #12]	; 11c80 <__assert_fail@plt+0xc94>
   11c70:	bl	10ea8 <__libc_start_main@plt>
   11c74:	bl	10fd4 <abort@plt>
   11c78:	andeq	r9, r1, r4, lsl #15
   11c7c:	strdeq	r0, [r1], -r8
   11c80:	andeq	r9, r1, r4, lsr #14
   11c84:	ldr	r3, [pc, #20]	; 11ca0 <__assert_fail@plt+0xcb4>
   11c88:	ldr	r2, [pc, #20]	; 11ca4 <__assert_fail@plt+0xcb8>
   11c8c:	add	r3, pc, r3
   11c90:	ldr	r2, [r3, r2]
   11c94:	cmp	r2, #0
   11c98:	bxeq	lr
   11c9c:	b	10ecc <__gmon_start__@plt>
   11ca0:	andeq	r9, r1, ip, ror #6
   11ca4:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11ca8:	ldr	r3, [pc, #28]	; 11ccc <__assert_fail@plt+0xce0>
   11cac:	ldr	r0, [pc, #28]	; 11cd0 <__assert_fail@plt+0xce4>
   11cb0:	sub	r3, r3, r0
   11cb4:	cmp	r3, #6
   11cb8:	bxls	lr
   11cbc:	ldr	r3, [pc, #16]	; 11cd4 <__assert_fail@plt+0xce8>
   11cc0:	cmp	r3, #0
   11cc4:	bxeq	lr
   11cc8:	bx	r3
   11ccc:	andeq	fp, r2, fp, asr #2
   11cd0:	andeq	fp, r2, r8, asr #2
   11cd4:	andeq	r0, r0, r0
   11cd8:	ldr	r1, [pc, #36]	; 11d04 <__assert_fail@plt+0xd18>
   11cdc:	ldr	r0, [pc, #36]	; 11d08 <__assert_fail@plt+0xd1c>
   11ce0:	sub	r1, r1, r0
   11ce4:	asr	r1, r1, #2
   11ce8:	add	r1, r1, r1, lsr #31
   11cec:	asrs	r1, r1, #1
   11cf0:	bxeq	lr
   11cf4:	ldr	r3, [pc, #16]	; 11d0c <__assert_fail@plt+0xd20>
   11cf8:	cmp	r3, #0
   11cfc:	bxeq	lr
   11d00:	bx	r3
   11d04:	andeq	fp, r2, r8, asr #2
   11d08:	andeq	fp, r2, r8, asr #2
   11d0c:	andeq	r0, r0, r0
   11d10:	push	{r4, lr}
   11d14:	ldr	r4, [pc, #24]	; 11d34 <__assert_fail@plt+0xd48>
   11d18:	ldrb	r3, [r4]
   11d1c:	cmp	r3, #0
   11d20:	popne	{r4, pc}
   11d24:	bl	11ca8 <__assert_fail@plt+0xcbc>
   11d28:	mov	r3, #1
   11d2c:	strb	r3, [r4]
   11d30:	pop	{r4, pc}
   11d34:	andeq	fp, r2, ip, ror #2
   11d38:	ldr	r0, [pc, #40]	; 11d68 <__assert_fail@plt+0xd7c>
   11d3c:	ldr	r3, [r0]
   11d40:	cmp	r3, #0
   11d44:	bne	11d4c <__assert_fail@plt+0xd60>
   11d48:	b	11cd8 <__assert_fail@plt+0xcec>
   11d4c:	ldr	r3, [pc, #24]	; 11d6c <__assert_fail@plt+0xd80>
   11d50:	cmp	r3, #0
   11d54:	beq	11d48 <__assert_fail@plt+0xd5c>
   11d58:	push	{r4, lr}
   11d5c:	blx	r3
   11d60:	pop	{r4, lr}
   11d64:	b	11cd8 <__assert_fail@plt+0xcec>
   11d68:	andeq	sl, r2, r4, lsl pc
   11d6c:	andeq	r0, r0, r0
   11d70:	push	{r4, r5, lr}
   11d74:	sub	sp, sp, #20
   11d78:	ldr	r3, [pc, #104]	; 11de8 <__assert_fail@plt+0xdfc>
   11d7c:	mov	r5, r1
   11d80:	str	r3, [sp]
   11d84:	mov	r2, #10
   11d88:	add	r3, sp, #8
   11d8c:	mov	r1, #0
   11d90:	mov	r4, r0
   11d94:	bl	181e8 <__assert_fail@plt+0x71fc>
   11d98:	cmp	r0, #1
   11d9c:	bhi	11dc0 <__assert_fail@plt+0xdd4>
   11da0:	ldrd	r0, [sp, #8]
   11da4:	mov	r3, #0
   11da8:	mvn	r2, #0
   11dac:	cmp	r1, r3
   11db0:	cmpeq	r0, r2
   11db4:	movhi	r0, r2
   11db8:	add	sp, sp, #20
   11dbc:	pop	{r4, r5, pc}
   11dc0:	mov	r1, r5
   11dc4:	mov	r2, #5
   11dc8:	mov	r0, #0
   11dcc:	bl	10e00 <dcgettext@plt>
   11dd0:	mov	r3, r4
   11dd4:	ldr	r2, [pc, #16]	; 11dec <__assert_fail@plt+0xe00>
   11dd8:	mov	r1, #0
   11ddc:	str	r0, [sp]
   11de0:	mov	r0, #1
   11de4:	bl	10e78 <error@plt>
   11de8:	andeq	r9, r1, r0, lsl #20
   11dec:	strdeq	r9, [r1], -r4
   11df0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11df4:	sub	r9, r0, #1
   11df8:	ldr	r7, [pc, #236]	; 11eec <__assert_fail@plt+0xf00>
   11dfc:	mov	r8, r1
   11e00:	ldr	r6, [r7]
   11e04:	cmp	r6, #0
   11e08:	cmpne	r0, #1
   11e0c:	movne	r0, #1
   11e10:	moveq	r0, #0
   11e14:	beq	11ee4 <__assert_fail@plt+0xef8>
   11e18:	mov	r4, #0
   11e1c:	mov	r5, r4
   11e20:	bl	10ef0 <__ctype_b_loc@plt>
   11e24:	add	ip, r8, r4
   11e28:	ldr	r1, [r0]
   11e2c:	ldrb	r2, [ip], #1
   11e30:	lsl	r3, r2, #1
   11e34:	ldrh	r3, [r1, r3]
   11e38:	and	r3, r3, #1
   11e3c:	cmp	r2, #10
   11e40:	movne	r2, r3
   11e44:	orreq	r2, r3, #1
   11e48:	cmp	r2, #0
   11e4c:	bne	11ed4 <__assert_fail@plt+0xee8>
   11e50:	cmp	r9, r4
   11e54:	bls	11eb8 <__assert_fail@plt+0xecc>
   11e58:	add	r2, r8, r4
   11e5c:	b	11e7c <__assert_fail@plt+0xe90>
   11e60:	add	r4, r4, #1
   11e64:	cmp	r4, r9
   11e68:	beq	11eb8 <__assert_fail@plt+0xecc>
   11e6c:	ldrb	r3, [r2]
   11e70:	lsl	r3, r3, #1
   11e74:	ldrh	r3, [r1, r3]
   11e78:	and	r3, r3, #1
   11e7c:	ldrb	r0, [r2], #1
   11e80:	cmp	r0, #10
   11e84:	orreq	r3, r3, #1
   11e88:	cmp	r3, #0
   11e8c:	beq	11e60 <__assert_fail@plt+0xe74>
   11e90:	add	r5, r5, #1
   11e94:	cmp	r5, r6
   11e98:	movcs	r3, #0
   11e9c:	movcc	r3, #1
   11ea0:	cmp	r9, r4
   11ea4:	movls	r3, #0
   11ea8:	cmp	r3, #0
   11eac:	beq	11eb8 <__assert_fail@plt+0xecc>
   11eb0:	cmp	r9, r4
   11eb4:	bhi	11e20 <__assert_fail@plt+0xe34>
   11eb8:	ldr	r3, [r7, #4]
   11ebc:	sub	r9, r9, r4
   11ec0:	cmp	r9, r3
   11ec4:	addls	r4, r4, r9
   11ec8:	addhi	r4, r4, r3
   11ecc:	add	r0, r8, r4
   11ed0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11ed4:	add	r4, r4, #1
   11ed8:	cmp	r4, r9
   11edc:	bne	11e2c <__assert_fail@plt+0xe40>
   11ee0:	b	11e90 <__assert_fail@plt+0xea4>
   11ee4:	mov	r4, r0
   11ee8:	b	11eb8 <__assert_fail@plt+0xecc>
   11eec:	andeq	fp, r2, r0, ror r1
   11ef0:	subs	r5, r0, #0
   11ef4:	push	{r7, lr}
   11ef8:	sub	sp, sp, #56	; 0x38
   11efc:	beq	11f38 <__assert_fail@plt+0xf4c>
   11f00:	ldr	r3, [pc, #852]	; 1225c <__assert_fail@plt+0x1270>
   11f04:	mov	r2, #5
   11f08:	ldr	r1, [pc, #848]	; 12260 <__assert_fail@plt+0x1274>
   11f0c:	mov	r0, #0
   11f10:	ldr	r4, [r3]
   11f14:	bl	10e00 <dcgettext@plt>
   11f18:	ldr	r3, [pc, #836]	; 12264 <__assert_fail@plt+0x1278>
   11f1c:	mov	r1, #1
   11f20:	ldr	r3, [r3]
   11f24:	mov	r2, r0
   11f28:	mov	r0, r4
   11f2c:	bl	10f5c <__fprintf_chk@plt>
   11f30:	mov	r0, r5
   11f34:	bl	10efc <exit@plt>
   11f38:	mov	r2, #5
   11f3c:	ldr	r1, [pc, #804]	; 12268 <__assert_fail@plt+0x127c>
   11f40:	bl	10e00 <dcgettext@plt>
   11f44:	ldr	r3, [pc, #792]	; 12264 <__assert_fail@plt+0x1278>
   11f48:	ldr	r6, [pc, #796]	; 1226c <__assert_fail@plt+0x1280>
   11f4c:	ldr	r4, [pc, #796]	; 12270 <__assert_fail@plt+0x1284>
   11f50:	ldr	r2, [r3]
   11f54:	mov	r1, r0
   11f58:	mov	r0, #1
   11f5c:	bl	10f44 <__printf_chk@plt>
   11f60:	mov	r2, #5
   11f64:	ldr	r1, [pc, #776]	; 12274 <__assert_fail@plt+0x1288>
   11f68:	mov	r0, r5
   11f6c:	bl	10e00 <dcgettext@plt>
   11f70:	ldr	r1, [r6]
   11f74:	bl	10d58 <fputs_unlocked@plt>
   11f78:	mov	r2, #5
   11f7c:	ldr	r1, [pc, #756]	; 12278 <__assert_fail@plt+0x128c>
   11f80:	mov	r0, r5
   11f84:	bl	10e00 <dcgettext@plt>
   11f88:	ldr	r1, [r6]
   11f8c:	bl	10d58 <fputs_unlocked@plt>
   11f90:	mov	r2, #5
   11f94:	ldr	r1, [pc, #736]	; 1227c <__assert_fail@plt+0x1290>
   11f98:	mov	r0, r5
   11f9c:	bl	10e00 <dcgettext@plt>
   11fa0:	ldr	r1, [r6]
   11fa4:	bl	10d58 <fputs_unlocked@plt>
   11fa8:	mov	r2, #5
   11fac:	ldr	r1, [pc, #716]	; 12280 <__assert_fail@plt+0x1294>
   11fb0:	mov	r0, r5
   11fb4:	bl	10e00 <dcgettext@plt>
   11fb8:	ldr	r1, [r6]
   11fbc:	bl	10d58 <fputs_unlocked@plt>
   11fc0:	mov	r2, #5
   11fc4:	ldr	r1, [pc, #696]	; 12284 <__assert_fail@plt+0x1298>
   11fc8:	mov	r0, r5
   11fcc:	bl	10e00 <dcgettext@plt>
   11fd0:	ldr	r1, [r6]
   11fd4:	bl	10d58 <fputs_unlocked@plt>
   11fd8:	mov	r2, #5
   11fdc:	ldr	r1, [pc, #676]	; 12288 <__assert_fail@plt+0x129c>
   11fe0:	mov	r0, r5
   11fe4:	bl	10e00 <dcgettext@plt>
   11fe8:	ldr	r1, [r6]
   11fec:	bl	10d58 <fputs_unlocked@plt>
   11ff0:	mov	r2, #5
   11ff4:	ldr	r1, [pc, #656]	; 1228c <__assert_fail@plt+0x12a0>
   11ff8:	mov	r0, r5
   11ffc:	bl	10e00 <dcgettext@plt>
   12000:	ldr	r1, [r6]
   12004:	bl	10d58 <fputs_unlocked@plt>
   12008:	mov	r2, #5
   1200c:	ldr	r1, [pc, #636]	; 12290 <__assert_fail@plt+0x12a4>
   12010:	mov	r0, r5
   12014:	bl	10e00 <dcgettext@plt>
   12018:	ldr	r1, [r6]
   1201c:	bl	10d58 <fputs_unlocked@plt>
   12020:	mov	r2, #5
   12024:	ldr	r1, [pc, #616]	; 12294 <__assert_fail@plt+0x12a8>
   12028:	mov	r0, r5
   1202c:	bl	10e00 <dcgettext@plt>
   12030:	ldr	r1, [r6]
   12034:	bl	10d58 <fputs_unlocked@plt>
   12038:	mov	r2, #5
   1203c:	ldr	r1, [pc, #596]	; 12298 <__assert_fail@plt+0x12ac>
   12040:	mov	r0, r5
   12044:	bl	10e00 <dcgettext@plt>
   12048:	ldr	r1, [r6]
   1204c:	bl	10d58 <fputs_unlocked@plt>
   12050:	mov	r2, #5
   12054:	ldr	r1, [pc, #576]	; 1229c <__assert_fail@plt+0x12b0>
   12058:	mov	r0, r5
   1205c:	bl	10e00 <dcgettext@plt>
   12060:	ldr	r1, [r6]
   12064:	bl	10d58 <fputs_unlocked@plt>
   12068:	mov	r2, #5
   1206c:	ldr	r1, [pc, #556]	; 122a0 <__assert_fail@plt+0x12b4>
   12070:	mov	r0, r5
   12074:	bl	10e00 <dcgettext@plt>
   12078:	ldr	r1, [r6]
   1207c:	bl	10d58 <fputs_unlocked@plt>
   12080:	mov	r2, #5
   12084:	ldr	r1, [pc, #536]	; 122a4 <__assert_fail@plt+0x12b8>
   12088:	mov	r0, r5
   1208c:	bl	10e00 <dcgettext@plt>
   12090:	ldr	r1, [r6]
   12094:	bl	10d58 <fputs_unlocked@plt>
   12098:	ldm	r4!, {r0, r1, r2, r3}
   1209c:	mov	lr, sp
   120a0:	stmia	lr!, {r0, r1, r2, r3}
   120a4:	ldm	r4!, {r0, r1, r2, r3}
   120a8:	ldr	ip, [sp]
   120ac:	stmia	lr!, {r0, r1, r2, r3}
   120b0:	cmp	ip, #0
   120b4:	ldm	r4!, {r0, r1, r2, r3}
   120b8:	stmia	lr!, {r0, r1, r2, r3}
   120bc:	ldm	r4, {r0, r1}
   120c0:	moveq	r4, sp
   120c4:	stm	lr, {r0, r1}
   120c8:	beq	120f8 <__assert_fail@plt+0x110c>
   120cc:	ldr	r7, [pc, #468]	; 122a8 <__assert_fail@plt+0x12bc>
   120d0:	mov	r4, sp
   120d4:	b	120e4 <__assert_fail@plt+0x10f8>
   120d8:	ldr	ip, [r4, #8]!
   120dc:	cmp	ip, #0
   120e0:	beq	120f8 <__assert_fail@plt+0x110c>
   120e4:	mov	r1, ip
   120e8:	mov	r0, r7
   120ec:	bl	10d70 <strcmp@plt>
   120f0:	cmp	r0, #0
   120f4:	bne	120d8 <__assert_fail@plt+0x10ec>
   120f8:	ldr	r4, [r4, #4]
   120fc:	mov	r2, #5
   12100:	cmp	r4, #0
   12104:	ldr	r1, [pc, #416]	; 122ac <__assert_fail@plt+0x12c0>
   12108:	beq	121b0 <__assert_fail@plt+0x11c4>
   1210c:	mov	r0, #0
   12110:	bl	10e00 <dcgettext@plt>
   12114:	ldr	r3, [pc, #404]	; 122b0 <__assert_fail@plt+0x12c4>
   12118:	ldr	r2, [pc, #404]	; 122b4 <__assert_fail@plt+0x12c8>
   1211c:	mov	r1, r0
   12120:	mov	r0, #1
   12124:	bl	10f44 <__printf_chk@plt>
   12128:	mov	r1, #0
   1212c:	mov	r0, #5
   12130:	bl	10f98 <setlocale@plt>
   12134:	cmp	r0, #0
   12138:	ldreq	r7, [pc, #360]	; 122a8 <__assert_fail@plt+0x12bc>
   1213c:	beq	12158 <__assert_fail@plt+0x116c>
   12140:	mov	r2, #3
   12144:	ldr	r1, [pc, #364]	; 122b8 <__assert_fail@plt+0x12cc>
   12148:	bl	10fc8 <strncmp@plt>
   1214c:	ldr	r7, [pc, #340]	; 122a8 <__assert_fail@plt+0x12bc>
   12150:	cmp	r0, #0
   12154:	bne	12240 <__assert_fail@plt+0x1254>
   12158:	mov	r2, #5
   1215c:	ldr	r1, [pc, #344]	; 122bc <__assert_fail@plt+0x12d0>
   12160:	mov	r0, #0
   12164:	bl	10e00 <dcgettext@plt>
   12168:	ldr	r3, [pc, #312]	; 122a8 <__assert_fail@plt+0x12bc>
   1216c:	ldr	r2, [pc, #316]	; 122b0 <__assert_fail@plt+0x12c4>
   12170:	mov	r1, r0
   12174:	mov	r0, #1
   12178:	bl	10f44 <__printf_chk@plt>
   1217c:	mov	r2, #5
   12180:	ldr	r1, [pc, #312]	; 122c0 <__assert_fail@plt+0x12d4>
   12184:	mov	r0, #0
   12188:	bl	10e00 <dcgettext@plt>
   1218c:	ldr	r2, [pc, #304]	; 122c4 <__assert_fail@plt+0x12d8>
   12190:	cmp	r4, r7
   12194:	ldr	r3, [pc, #300]	; 122c8 <__assert_fail@plt+0x12dc>
   12198:	movne	r3, r2
   1219c:	mov	r1, r0
   121a0:	mov	r2, r4
   121a4:	mov	r0, #1
   121a8:	bl	10f44 <__printf_chk@plt>
   121ac:	b	11f30 <__assert_fail@plt+0xf44>
   121b0:	mov	r0, r4
   121b4:	bl	10e00 <dcgettext@plt>
   121b8:	ldr	r3, [pc, #240]	; 122b0 <__assert_fail@plt+0x12c4>
   121bc:	ldr	r2, [pc, #240]	; 122b4 <__assert_fail@plt+0x12c8>
   121c0:	mov	r1, r0
   121c4:	mov	r0, #1
   121c8:	bl	10f44 <__printf_chk@plt>
   121cc:	mov	r1, r4
   121d0:	mov	r0, #5
   121d4:	bl	10f98 <setlocale@plt>
   121d8:	cmp	r0, #0
   121dc:	beq	121f4 <__assert_fail@plt+0x1208>
   121e0:	mov	r2, #3
   121e4:	ldr	r1, [pc, #204]	; 122b8 <__assert_fail@plt+0x12cc>
   121e8:	bl	10fc8 <strncmp@plt>
   121ec:	cmp	r0, #0
   121f0:	bne	12238 <__assert_fail@plt+0x124c>
   121f4:	mov	r2, #5
   121f8:	ldr	r1, [pc, #188]	; 122bc <__assert_fail@plt+0x12d0>
   121fc:	mov	r0, #0
   12200:	bl	10e00 <dcgettext@plt>
   12204:	ldr	r3, [pc, #156]	; 122a8 <__assert_fail@plt+0x12bc>
   12208:	ldr	r2, [pc, #160]	; 122b0 <__assert_fail@plt+0x12c4>
   1220c:	mov	r4, r3
   12210:	mov	r1, r0
   12214:	mov	r0, #1
   12218:	bl	10f44 <__printf_chk@plt>
   1221c:	ldr	r1, [pc, #156]	; 122c0 <__assert_fail@plt+0x12d4>
   12220:	mov	r2, #5
   12224:	mov	r0, #0
   12228:	bl	10e00 <dcgettext@plt>
   1222c:	ldr	r3, [pc, #148]	; 122c8 <__assert_fail@plt+0x12dc>
   12230:	mov	r1, r0
   12234:	b	121a0 <__assert_fail@plt+0x11b4>
   12238:	ldr	r7, [pc, #104]	; 122a8 <__assert_fail@plt+0x12bc>
   1223c:	mov	r4, r7
   12240:	mov	r2, #5
   12244:	ldr	r1, [pc, #128]	; 122cc <__assert_fail@plt+0x12e0>
   12248:	mov	r0, #0
   1224c:	bl	10e00 <dcgettext@plt>
   12250:	ldr	r1, [r6]
   12254:	bl	10d58 <fputs_unlocked@plt>
   12258:	b	12158 <__assert_fail@plt+0x116c>
   1225c:	andeq	fp, r2, r8, asr r1
   12260:	andeq	r9, r1, r4, lsl #18
   12264:	muleq	r2, r8, r1
   12268:	andeq	r9, r1, ip, lsr #18
   1226c:	andeq	fp, r2, r4, ror #2
   12270:	andeq	r9, r1, ip, lsr #15
   12274:	andeq	r9, r1, r4, asr r9
   12278:	andeq	r9, r1, r4, lsl #20
   1227c:	andeq	r9, r1, r0, asr sl
   12280:	ldrdeq	r9, [r1], -ip
   12284:	ldrdeq	r9, [r1], -r4
   12288:	andeq	r9, r1, r0, lsl ip
   1228c:	andeq	r9, r1, r8, lsr #25
   12290:	andeq	r9, r1, ip, asr sp
   12294:	muleq	r1, ip, sp
   12298:	andeq	r9, r1, r0, ror #27
   1229c:	andeq	r9, r1, r0, lsl lr
   122a0:	andeq	r9, r1, r8, asr #28
   122a4:	andeq	r9, r1, r0, asr #29
   122a8:	strdeq	r9, [r1], -ip
   122ac:	andeq	r9, r1, r0, asr pc
   122b0:	andeq	r9, r1, r8, ror #30
   122b4:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   122b8:	andeq	r9, r1, r0, lsr #31
   122bc:	andeq	r9, r1, ip, ror #31
   122c0:	andeq	sl, r1, r8
   122c4:	andeq	r9, r1, r0, lsl #20
   122c8:	andeq	sl, r1, r8, lsl #4
   122cc:	andeq	r9, r1, r4, lsr #31
   122d0:	mov	r0, #1
   122d4:	b	11ef0 <__assert_fail@plt+0xf04>
   122d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122dc:	mov	r4, r1
   122e0:	sub	sp, sp, #12
   122e4:	mov	r5, r2
   122e8:	str	r2, [sp, #4]
   122ec:	mov	r7, r3
   122f0:	mov	sl, r0
   122f4:	bl	10f08 <strlen@plt>
   122f8:	ldr	fp, [r4]
   122fc:	cmp	fp, #0
   12300:	beq	12414 <__assert_fail@plt+0x1428>
   12304:	cmp	r5, #0
   12308:	mov	r8, r0
   1230c:	mov	r3, r5
   12310:	beq	123bc <__assert_fail@plt+0x13d0>
   12314:	mov	r2, #0
   12318:	mov	r5, r2
   1231c:	mov	r6, r3
   12320:	mvn	r9, #0
   12324:	str	r2, [sp]
   12328:	mov	r2, r8
   1232c:	mov	r1, sl
   12330:	mov	r0, fp
   12334:	bl	10fc8 <strncmp@plt>
   12338:	cmp	r0, #0
   1233c:	mov	r0, fp
   12340:	bne	12380 <__assert_fail@plt+0x1394>
   12344:	bl	10f08 <strlen@plt>
   12348:	ldr	r3, [sp, #4]
   1234c:	mov	r2, r7
   12350:	mov	r1, r6
   12354:	cmp	r8, r0
   12358:	mla	r0, r7, r9, r3
   1235c:	beq	123ac <__assert_fail@plt+0x13c0>
   12360:	cmn	r9, #1
   12364:	moveq	r9, r5
   12368:	beq	12380 <__assert_fail@plt+0x1394>
   1236c:	bl	10de8 <memcmp@plt>
   12370:	ldr	r3, [sp]
   12374:	cmp	r0, #0
   12378:	movne	r3, #1
   1237c:	str	r3, [sp]
   12380:	ldr	fp, [r4, #4]!
   12384:	add	r5, r5, #1
   12388:	cmp	fp, #0
   1238c:	add	r6, r6, r7
   12390:	bne	12328 <__assert_fail@plt+0x133c>
   12394:	ldr	r3, [sp]
   12398:	cmp	r3, #0
   1239c:	mvnne	r9, #1
   123a0:	mov	r0, r9
   123a4:	add	sp, sp, #12
   123a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123ac:	mov	r9, r5
   123b0:	mov	r0, r9
   123b4:	add	sp, sp, #12
   123b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123bc:	mov	r6, r5
   123c0:	mvn	r9, #0
   123c4:	mov	r2, r8
   123c8:	mov	r1, sl
   123cc:	mov	r0, fp
   123d0:	bl	10fc8 <strncmp@plt>
   123d4:	cmp	r0, #0
   123d8:	mov	r0, fp
   123dc:	bne	123f8 <__assert_fail@plt+0x140c>
   123e0:	bl	10f08 <strlen@plt>
   123e4:	cmp	r8, r0
   123e8:	beq	123ac <__assert_fail@plt+0x13c0>
   123ec:	cmn	r9, #1
   123f0:	moveq	r9, r5
   123f4:	movne	r6, #1
   123f8:	ldr	fp, [r4, #4]!
   123fc:	add	r5, r5, #1
   12400:	cmp	fp, #0
   12404:	bne	123c4 <__assert_fail@plt+0x13d8>
   12408:	str	r6, [sp]
   1240c:	mov	r3, r6
   12410:	b	12398 <__assert_fail@plt+0x13ac>
   12414:	mvn	r9, #0
   12418:	b	123a0 <__assert_fail@plt+0x13b4>
   1241c:	push	{r4, r5, r6, lr}
   12420:	mov	r6, r0
   12424:	ldr	r0, [r1]
   12428:	cmp	r0, #0
   1242c:	beq	12464 <__assert_fail@plt+0x1478>
   12430:	mov	r4, r1
   12434:	mov	r5, #0
   12438:	b	1244c <__assert_fail@plt+0x1460>
   1243c:	ldr	r0, [r4, #4]!
   12440:	add	r5, r5, #1
   12444:	cmp	r0, #0
   12448:	beq	12464 <__assert_fail@plt+0x1478>
   1244c:	mov	r1, r6
   12450:	bl	10d70 <strcmp@plt>
   12454:	cmp	r0, #0
   12458:	bne	1243c <__assert_fail@plt+0x1450>
   1245c:	mov	r0, r5
   12460:	pop	{r4, r5, r6, pc}
   12464:	mvn	r0, #0
   12468:	pop	{r4, r5, r6, pc}
   1246c:	cmn	r2, #1
   12470:	push	{r4, r5, r6, lr}
   12474:	mov	r2, #5
   12478:	sub	sp, sp, #8
   1247c:	mov	r4, r1
   12480:	mov	r5, r0
   12484:	ldreq	r1, [pc, #76]	; 124d8 <__assert_fail@plt+0x14ec>
   12488:	ldrne	r1, [pc, #76]	; 124dc <__assert_fail@plt+0x14f0>
   1248c:	mov	r0, #0
   12490:	bl	10e00 <dcgettext@plt>
   12494:	mov	r2, r4
   12498:	mov	r1, #8
   1249c:	mov	r6, r0
   124a0:	mov	r0, #0
   124a4:	bl	15250 <__assert_fail@plt+0x4264>
   124a8:	mov	r1, r5
   124ac:	mov	r4, r0
   124b0:	mov	r0, #1
   124b4:	bl	16dec <__assert_fail@plt+0x5e00>
   124b8:	mov	r1, #0
   124bc:	mov	r3, r4
   124c0:	mov	r2, r6
   124c4:	str	r0, [sp]
   124c8:	mov	r0, r1
   124cc:	bl	10e78 <error@plt>
   124d0:	add	sp, sp, #8
   124d4:	pop	{r4, r5, r6, pc}
   124d8:	andeq	sl, r1, r0, lsr #6
   124dc:	andeq	sl, r1, ip, lsr r3
   124e0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124e4:	mov	r6, r0
   124e8:	ldr	r9, [pc, #232]	; 125d8 <__assert_fail@plt+0x15ec>
   124ec:	mov	r4, r1
   124f0:	mov	r7, r2
   124f4:	ldr	r1, [pc, #224]	; 125dc <__assert_fail@plt+0x15f0>
   124f8:	mov	r2, #5
   124fc:	mov	r0, #0
   12500:	bl	10e00 <dcgettext@plt>
   12504:	ldr	r1, [r9]
   12508:	bl	10d58 <fputs_unlocked@plt>
   1250c:	ldr	fp, [r6]
   12510:	cmp	fp, #0
   12514:	movne	r8, #0
   12518:	movne	r5, r8
   1251c:	movne	sl, #1
   12520:	bne	12560 <__assert_fail@plt+0x1574>
   12524:	b	125a4 <__assert_fail@plt+0x15b8>
   12528:	mov	r0, fp
   1252c:	ldr	r8, [r9]
   12530:	bl	16fa0 <__assert_fail@plt+0x5fb4>
   12534:	ldr	r2, [pc, #164]	; 125e0 <__assert_fail@plt+0x15f4>
   12538:	mov	r1, sl
   1253c:	mov	r3, r0
   12540:	mov	r0, r8
   12544:	bl	10f5c <__fprintf_chk@plt>
   12548:	mov	r8, r4
   1254c:	ldr	fp, [r6, #4]!
   12550:	add	r5, r5, #1
   12554:	cmp	fp, #0
   12558:	add	r4, r4, r7
   1255c:	beq	125a4 <__assert_fail@plt+0x15b8>
   12560:	cmp	r5, #0
   12564:	mov	r1, r4
   12568:	mov	r2, r7
   1256c:	mov	r0, r8
   12570:	beq	12528 <__assert_fail@plt+0x153c>
   12574:	bl	10de8 <memcmp@plt>
   12578:	cmp	r0, #0
   1257c:	bne	12528 <__assert_fail@plt+0x153c>
   12580:	mov	r0, fp
   12584:	ldr	fp, [r9]
   12588:	bl	16fa0 <__assert_fail@plt+0x5fb4>
   1258c:	ldr	r2, [pc, #80]	; 125e4 <__assert_fail@plt+0x15f8>
   12590:	mov	r1, sl
   12594:	mov	r3, r0
   12598:	mov	r0, fp
   1259c:	bl	10f5c <__fprintf_chk@plt>
   125a0:	b	1254c <__assert_fail@plt+0x1560>
   125a4:	ldr	r0, [r9]
   125a8:	ldr	r3, [r0, #20]
   125ac:	ldr	r2, [r0, #24]
   125b0:	cmp	r3, r2
   125b4:	bcs	125cc <__assert_fail@plt+0x15e0>
   125b8:	add	r1, r3, #1
   125bc:	mov	r2, #10
   125c0:	str	r1, [r0, #20]
   125c4:	strb	r2, [r3]
   125c8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125cc:	mov	r1, #10
   125d0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125d4:	b	10f8c <__overflow@plt>
   125d8:	andeq	fp, r2, r8, asr r1
   125dc:	andeq	sl, r1, ip, asr r3
   125e0:	andeq	sl, r1, r4, ror r3
   125e4:	andeq	sl, r1, ip, ror r3
   125e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125ec:	sub	sp, sp, #36	; 0x24
   125f0:	mov	r6, r1
   125f4:	ldrb	ip, [sp, #80]	; 0x50
   125f8:	str	r0, [sp, #28]
   125fc:	str	r2, [sp, #24]
   12600:	cmp	ip, #0
   12604:	str	ip, [sp, #20]
   12608:	str	r3, [sp, #12]
   1260c:	ldr	r7, [sp, #72]	; 0x48
   12610:	bne	126c8 <__assert_fail@plt+0x16dc>
   12614:	ldr	r0, [r2]
   12618:	cmp	r0, #0
   1261c:	movne	sl, ip
   12620:	movne	r4, r2
   12624:	bne	126ac <__assert_fail@plt+0x16c0>
   12628:	mov	r2, #5
   1262c:	ldr	r1, [pc, #512]	; 12834 <__assert_fail@plt+0x1848>
   12630:	mov	r0, #0
   12634:	bl	10e00 <dcgettext@plt>
   12638:	mov	r4, r0
   1263c:	mov	r2, r6
   12640:	mov	r1, #8
   12644:	mov	r0, #0
   12648:	bl	15250 <__assert_fail@plt+0x4264>
   1264c:	ldr	r1, [sp, #28]
   12650:	mvn	sl, #0
   12654:	mov	r5, r0
   12658:	mov	r0, #1
   1265c:	bl	16dec <__assert_fail@plt+0x5e00>
   12660:	mov	r1, #0
   12664:	mov	r3, r5
   12668:	mov	r2, r4
   1266c:	str	r0, [sp]
   12670:	mov	r0, r1
   12674:	bl	10e78 <error@plt>
   12678:	ldr	r0, [sp, #24]
   1267c:	mov	r2, r7
   12680:	ldr	r1, [sp, #12]
   12684:	bl	124e0 <__assert_fail@plt+0x14f4>
   12688:	ldr	r3, [sp, #76]	; 0x4c
   1268c:	blx	r3
   12690:	mov	r0, sl
   12694:	add	sp, sp, #36	; 0x24
   12698:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1269c:	ldr	r0, [r4, #4]!
   126a0:	add	sl, sl, #1
   126a4:	cmp	r0, #0
   126a8:	beq	12628 <__assert_fail@plt+0x163c>
   126ac:	mov	r1, r6
   126b0:	bl	10d70 <strcmp@plt>
   126b4:	cmp	r0, #0
   126b8:	bne	1269c <__assert_fail@plt+0x16b0>
   126bc:	mov	r0, sl
   126c0:	add	sp, sp, #36	; 0x24
   126c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126c8:	mov	r0, r1
   126cc:	bl	10f08 <strlen@plt>
   126d0:	ldr	r3, [sp, #24]
   126d4:	ldr	fp, [r3]
   126d8:	cmp	fp, #0
   126dc:	mov	r9, r0
   126e0:	beq	12628 <__assert_fail@plt+0x163c>
   126e4:	ldr	r2, [sp, #12]
   126e8:	cmp	r2, #0
   126ec:	beq	127a8 <__assert_fail@plt+0x17bc>
   126f0:	mov	r1, #0
   126f4:	mov	r4, r1
   126f8:	mov	r8, r3
   126fc:	mov	r5, r2
   12700:	mvn	sl, #0
   12704:	str	r1, [sp, #16]
   12708:	mov	r2, r9
   1270c:	mov	r1, r6
   12710:	mov	r0, fp
   12714:	bl	10fc8 <strncmp@plt>
   12718:	cmp	r0, #0
   1271c:	mov	r0, fp
   12720:	bne	12764 <__assert_fail@plt+0x1778>
   12724:	bl	10f08 <strlen@plt>
   12728:	ldr	r3, [sp, #12]
   1272c:	mov	r2, r7
   12730:	mov	r1, r5
   12734:	cmp	r9, r0
   12738:	mla	r0, r7, sl, r3
   1273c:	beq	12798 <__assert_fail@plt+0x17ac>
   12740:	cmn	sl, #1
   12744:	moveq	sl, r4
   12748:	beq	12764 <__assert_fail@plt+0x1778>
   1274c:	bl	10de8 <memcmp@plt>
   12750:	ldr	r2, [sp, #20]
   12754:	ldr	r3, [sp, #16]
   12758:	cmp	r0, #0
   1275c:	movne	r3, r2
   12760:	str	r3, [sp, #16]
   12764:	ldr	fp, [r8, #4]!
   12768:	add	r4, r4, #1
   1276c:	cmp	fp, #0
   12770:	add	r5, r5, r7
   12774:	bne	12708 <__assert_fail@plt+0x171c>
   12778:	ldr	r3, [sp, #16]
   1277c:	cmp	r3, #0
   12780:	bne	1281c <__assert_fail@plt+0x1830>
   12784:	cmn	sl, #1
   12788:	beq	12628 <__assert_fail@plt+0x163c>
   1278c:	mov	r0, sl
   12790:	add	sp, sp, #36	; 0x24
   12794:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12798:	mov	sl, r4
   1279c:	mov	r0, sl
   127a0:	add	sp, sp, #36	; 0x24
   127a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127a8:	mov	r5, r3
   127ac:	ldr	r3, [sp, #12]
   127b0:	str	r7, [sp, #72]	; 0x48
   127b4:	mov	r7, fp
   127b8:	ldr	fp, [sp, #20]
   127bc:	mov	r8, r3
   127c0:	mvn	sl, #0
   127c4:	mov	r4, r3
   127c8:	mov	r2, r9
   127cc:	mov	r1, r6
   127d0:	mov	r0, r7
   127d4:	bl	10fc8 <strncmp@plt>
   127d8:	cmp	r0, #0
   127dc:	mov	r0, r7
   127e0:	bne	127fc <__assert_fail@plt+0x1810>
   127e4:	bl	10f08 <strlen@plt>
   127e8:	cmp	r9, r0
   127ec:	beq	12798 <__assert_fail@plt+0x17ac>
   127f0:	cmn	sl, #1
   127f4:	moveq	sl, r4
   127f8:	movne	r8, fp
   127fc:	ldr	r7, [r5, #4]!
   12800:	add	r4, r4, #1
   12804:	cmp	r7, #0
   12808:	bne	127c8 <__assert_fail@plt+0x17dc>
   1280c:	str	r8, [sp, #16]
   12810:	ldr	r7, [sp, #72]	; 0x48
   12814:	mov	r3, r8
   12818:	b	1277c <__assert_fail@plt+0x1790>
   1281c:	mov	r2, #5
   12820:	ldr	r1, [pc, #16]	; 12838 <__assert_fail@plt+0x184c>
   12824:	mov	r0, #0
   12828:	bl	10e00 <dcgettext@plt>
   1282c:	mov	r4, r0
   12830:	b	1263c <__assert_fail@plt+0x1650>
   12834:	andeq	sl, r1, r0, lsr #6
   12838:	andeq	sl, r1, ip, lsr r3
   1283c:	push	{r4, r5, r6, r7, r8, lr}
   12840:	ldr	r7, [r1]
   12844:	cmp	r7, #0
   12848:	beq	12888 <__assert_fail@plt+0x189c>
   1284c:	mov	r6, r3
   12850:	mov	r8, r0
   12854:	mov	r4, r2
   12858:	mov	r5, r1
   1285c:	b	1286c <__assert_fail@plt+0x1880>
   12860:	ldr	r7, [r5, #4]!
   12864:	cmp	r7, #0
   12868:	beq	12888 <__assert_fail@plt+0x189c>
   1286c:	mov	r1, r4
   12870:	mov	r2, r6
   12874:	mov	r0, r8
   12878:	bl	10de8 <memcmp@plt>
   1287c:	add	r4, r4, r6
   12880:	cmp	r0, #0
   12884:	bne	12860 <__assert_fail@plt+0x1874>
   12888:	mov	r0, r7
   1288c:	pop	{r4, r5, r6, r7, r8, pc}
   12890:	ldr	r3, [pc, #4]	; 1289c <__assert_fail@plt+0x18b0>
   12894:	str	r0, [r3]
   12898:	bx	lr
   1289c:	muleq	r2, r0, r1
   128a0:	ldr	r3, [pc, #4]	; 128ac <__assert_fail@plt+0x18c0>
   128a4:	strb	r0, [r3, #4]
   128a8:	bx	lr
   128ac:	muleq	r2, r0, r1
   128b0:	ldr	r3, [pc, #192]	; 12978 <__assert_fail@plt+0x198c>
   128b4:	push	{r4, r5, r6, lr}
   128b8:	sub	sp, sp, #8
   128bc:	ldr	r0, [r3]
   128c0:	bl	19084 <__assert_fail@plt+0x8098>
   128c4:	cmp	r0, #0
   128c8:	beq	128ec <__assert_fail@plt+0x1900>
   128cc:	ldr	r4, [pc, #168]	; 1297c <__assert_fail@plt+0x1990>
   128d0:	ldrb	r3, [r4, #4]
   128d4:	cmp	r3, #0
   128d8:	beq	12908 <__assert_fail@plt+0x191c>
   128dc:	bl	10f20 <__errno_location@plt>
   128e0:	ldr	r3, [r0]
   128e4:	cmp	r3, #32
   128e8:	bne	12908 <__assert_fail@plt+0x191c>
   128ec:	ldr	r3, [pc, #140]	; 12980 <__assert_fail@plt+0x1994>
   128f0:	ldr	r0, [r3]
   128f4:	bl	19084 <__assert_fail@plt+0x8098>
   128f8:	cmp	r0, #0
   128fc:	bne	12950 <__assert_fail@plt+0x1964>
   12900:	add	sp, sp, #8
   12904:	pop	{r4, r5, r6, pc}
   12908:	mov	r2, #5
   1290c:	ldr	r1, [pc, #112]	; 12984 <__assert_fail@plt+0x1998>
   12910:	mov	r0, #0
   12914:	bl	10e00 <dcgettext@plt>
   12918:	ldr	r4, [r4]
   1291c:	cmp	r4, #0
   12920:	mov	r5, r0
   12924:	beq	1295c <__assert_fail@plt+0x1970>
   12928:	bl	10f20 <__errno_location@plt>
   1292c:	ldr	r6, [r0]
   12930:	mov	r0, r4
   12934:	bl	15d40 <__assert_fail@plt+0x4d54>
   12938:	mov	r1, r6
   1293c:	str	r5, [sp]
   12940:	ldr	r2, [pc, #64]	; 12988 <__assert_fail@plt+0x199c>
   12944:	mov	r3, r0
   12948:	mov	r0, #0
   1294c:	bl	10e78 <error@plt>
   12950:	ldr	r3, [pc, #52]	; 1298c <__assert_fail@plt+0x19a0>
   12954:	ldr	r0, [r3]
   12958:	bl	10dac <_exit@plt>
   1295c:	bl	10f20 <__errno_location@plt>
   12960:	mov	r3, r5
   12964:	ldr	r2, [pc, #36]	; 12990 <__assert_fail@plt+0x19a4>
   12968:	ldr	r1, [r0]
   1296c:	mov	r0, r4
   12970:	bl	10e78 <error@plt>
   12974:	b	12950 <__assert_fail@plt+0x1964>
   12978:	andeq	fp, r2, r4, ror #2
   1297c:	muleq	r2, r0, r1
   12980:	andeq	fp, r2, r8, asr r1
   12984:	andeq	sl, r1, r4, lsl #7
   12988:	strdeq	r9, [r1], -r4
   1298c:	andeq	fp, r2, r4, lsl #2
   12990:	strdeq	r9, [r1], -r8
   12994:	push	{r4, r5}
   12998:	pop	{r4, r5}
   1299c:	b	10d88 <posix_fadvise64@plt>
   129a0:	cmp	r0, #0
   129a4:	bxeq	lr
   129a8:	push	{r4, lr}
   129ac:	sub	sp, sp, #16
   129b0:	mov	r4, r1
   129b4:	bl	10f50 <fileno@plt>
   129b8:	mov	r2, #0
   129bc:	mov	r3, #0
   129c0:	str	r4, [sp, #8]
   129c4:	strd	r2, [sp]
   129c8:	bl	10d88 <posix_fadvise64@plt>
   129cc:	add	sp, sp, #16
   129d0:	pop	{r4, pc}
   129d4:	push	{r4, r5, lr}
   129d8:	sub	sp, sp, #12
   129dc:	mov	r4, r0
   129e0:	bl	10f50 <fileno@plt>
   129e4:	cmp	r0, #0
   129e8:	mov	r0, r4
   129ec:	blt	12a68 <__assert_fail@plt+0x1a7c>
   129f0:	bl	10eb4 <__freading@plt>
   129f4:	cmp	r0, #0
   129f8:	bne	12a34 <__assert_fail@plt+0x1a48>
   129fc:	mov	r0, r4
   12a00:	bl	12a74 <__assert_fail@plt+0x1a88>
   12a04:	cmp	r0, #0
   12a08:	beq	12a64 <__assert_fail@plt+0x1a78>
   12a0c:	bl	10f20 <__errno_location@plt>
   12a10:	mov	r5, r0
   12a14:	mov	r0, r4
   12a18:	ldr	r4, [r5]
   12a1c:	bl	10f68 <fclose@plt>
   12a20:	cmp	r4, #0
   12a24:	mvnne	r0, #0
   12a28:	strne	r4, [r5]
   12a2c:	add	sp, sp, #12
   12a30:	pop	{r4, r5, pc}
   12a34:	mov	r0, r4
   12a38:	bl	10f50 <fileno@plt>
   12a3c:	mov	r3, #1
   12a40:	str	r3, [sp]
   12a44:	mov	r2, #0
   12a48:	mov	r3, #0
   12a4c:	bl	10e48 <lseek64@plt>
   12a50:	mvn	r3, #0
   12a54:	mvn	r2, #0
   12a58:	cmp	r1, r3
   12a5c:	cmpeq	r0, r2
   12a60:	bne	129fc <__assert_fail@plt+0x1a10>
   12a64:	mov	r0, r4
   12a68:	add	sp, sp, #12
   12a6c:	pop	{r4, r5, lr}
   12a70:	b	10f68 <fclose@plt>
   12a74:	push	{r4, lr}
   12a78:	subs	r4, r0, #0
   12a7c:	sub	sp, sp, #8
   12a80:	beq	12a9c <__assert_fail@plt+0x1ab0>
   12a84:	bl	10eb4 <__freading@plt>
   12a88:	cmp	r0, #0
   12a8c:	beq	12a9c <__assert_fail@plt+0x1ab0>
   12a90:	ldr	r3, [r4]
   12a94:	tst	r3, #256	; 0x100
   12a98:	bne	12aac <__assert_fail@plt+0x1ac0>
   12a9c:	mov	r0, r4
   12aa0:	add	sp, sp, #8
   12aa4:	pop	{r4, lr}
   12aa8:	b	10d94 <fflush@plt>
   12aac:	mov	r3, #1
   12ab0:	str	r3, [sp]
   12ab4:	mov	r2, #0
   12ab8:	mov	r3, #0
   12abc:	mov	r0, r4
   12ac0:	bl	12d40 <__assert_fail@plt+0x1d54>
   12ac4:	mov	r0, r4
   12ac8:	add	sp, sp, #8
   12acc:	pop	{r4, lr}
   12ad0:	b	10d94 <fflush@plt>
   12ad4:	push	{r4, r5, lr}
   12ad8:	sub	sp, sp, #12
   12adc:	mov	r5, r0
   12ae0:	bl	10f20 <__errno_location@plt>
   12ae4:	mov	r2, #0
   12ae8:	mov	r4, r0
   12aec:	ldr	r3, [r0]
   12af0:	str	r2, [r4]
   12af4:	mov	r0, r5
   12af8:	str	r3, [sp]
   12afc:	str	r3, [sp, #4]
   12b00:	bl	10da0 <free@plt>
   12b04:	ldr	r3, [r4]
   12b08:	add	r2, sp, #8
   12b0c:	cmp	r3, #0
   12b10:	moveq	r3, #4
   12b14:	movne	r3, #0
   12b18:	add	r3, r2, r3
   12b1c:	ldr	r3, [r3, #-8]
   12b20:	str	r3, [r4]
   12b24:	add	sp, sp, #12
   12b28:	pop	{r4, r5, pc}
   12b2c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12b30:	mov	r6, r0
   12b34:	mov	r0, r2
   12b38:	mov	r5, r2
   12b3c:	mov	r7, r1
   12b40:	bl	10f50 <fileno@plt>
   12b44:	cmp	r0, #1
   12b48:	beq	12cd4 <__assert_fail@plt+0x1ce8>
   12b4c:	cmp	r0, #2
   12b50:	beq	12ccc <__assert_fail@plt+0x1ce0>
   12b54:	cmp	r0, #0
   12b58:	beq	12bd4 <__assert_fail@plt+0x1be8>
   12b5c:	mov	r1, #2
   12b60:	mov	r0, r1
   12b64:	bl	10e0c <dup2@plt>
   12b68:	subs	r4, r0, #2
   12b6c:	movne	r4, #1
   12b70:	mov	r1, #1
   12b74:	mov	r0, r1
   12b78:	bl	10e0c <dup2@plt>
   12b7c:	mov	r1, #0
   12b80:	subs	r9, r0, #1
   12b84:	mov	r0, r1
   12b88:	movne	r9, #1
   12b8c:	bl	10e0c <dup2@plt>
   12b90:	subs	r8, r0, #0
   12b94:	beq	12c28 <__assert_fail@plt+0x1c3c>
   12b98:	mov	r1, #0
   12b9c:	ldr	r0, [pc, #408]	; 12d3c <__assert_fail@plt+0x1d50>
   12ba0:	bl	10e84 <open64@plt>
   12ba4:	cmp	r0, #0
   12ba8:	moveq	r8, #1
   12bac:	beq	12c28 <__assert_fail@plt+0x1c3c>
   12bb0:	blt	12cfc <__assert_fail@plt+0x1d10>
   12bb4:	bl	10fe0 <close@plt>
   12bb8:	bl	10f20 <__errno_location@plt>
   12bbc:	mov	r7, #9
   12bc0:	mov	r8, #1
   12bc4:	mov	r5, #0
   12bc8:	mov	r6, r0
   12bcc:	str	r7, [r0]
   12bd0:	b	12c00 <__assert_fail@plt+0x1c14>
   12bd4:	mov	r4, r0
   12bd8:	mov	r9, r0
   12bdc:	mov	r8, r0
   12be0:	mov	r2, r5
   12be4:	mov	r1, r7
   12be8:	mov	r0, r6
   12bec:	bl	10ed8 <freopen64@plt>
   12bf0:	mov	r5, r0
   12bf4:	bl	10f20 <__errno_location@plt>
   12bf8:	ldr	r7, [r0]
   12bfc:	mov	r6, r0
   12c00:	cmp	r4, #0
   12c04:	bne	12c6c <__assert_fail@plt+0x1c80>
   12c08:	cmp	r9, #0
   12c0c:	bne	12cc0 <__assert_fail@plt+0x1cd4>
   12c10:	cmp	r8, #0
   12c14:	bne	12c78 <__assert_fail@plt+0x1c8c>
   12c18:	cmp	r5, #0
   12c1c:	streq	r7, [r6]
   12c20:	mov	r0, r5
   12c24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12c28:	cmp	r9, #0
   12c2c:	bne	12c84 <__assert_fail@plt+0x1c98>
   12c30:	cmp	r4, #0
   12c34:	beq	12be0 <__assert_fail@plt+0x1bf4>
   12c38:	mov	r1, #0
   12c3c:	ldr	r0, [pc, #248]	; 12d3c <__assert_fail@plt+0x1d50>
   12c40:	bl	10e84 <open64@plt>
   12c44:	cmp	r0, #2
   12c48:	beq	12be0 <__assert_fail@plt+0x1bf4>
   12c4c:	cmp	r0, #0
   12c50:	blt	12d24 <__assert_fail@plt+0x1d38>
   12c54:	bl	10fe0 <close@plt>
   12c58:	bl	10f20 <__errno_location@plt>
   12c5c:	mov	r7, #9
   12c60:	mov	r6, r0
   12c64:	str	r7, [r0]
   12c68:	mov	r5, #0
   12c6c:	mov	r0, #2
   12c70:	bl	10fe0 <close@plt>
   12c74:	b	12c08 <__assert_fail@plt+0x1c1c>
   12c78:	mov	r0, #0
   12c7c:	bl	10fe0 <close@plt>
   12c80:	b	12c18 <__assert_fail@plt+0x1c2c>
   12c84:	mov	r1, #0
   12c88:	ldr	r0, [pc, #172]	; 12d3c <__assert_fail@plt+0x1d50>
   12c8c:	bl	10e84 <open64@plt>
   12c90:	cmp	r0, #1
   12c94:	beq	12c30 <__assert_fail@plt+0x1c44>
   12c98:	cmp	r0, #0
   12c9c:	blt	12d14 <__assert_fail@plt+0x1d28>
   12ca0:	bl	10fe0 <close@plt>
   12ca4:	bl	10f20 <__errno_location@plt>
   12ca8:	mov	r7, #9
   12cac:	mov	r6, r0
   12cb0:	str	r7, [r0]
   12cb4:	cmp	r4, #0
   12cb8:	bne	12d34 <__assert_fail@plt+0x1d48>
   12cbc:	mov	r5, r4
   12cc0:	mov	r0, #1
   12cc4:	bl	10fe0 <close@plt>
   12cc8:	b	12c10 <__assert_fail@plt+0x1c24>
   12ccc:	mov	r4, #0
   12cd0:	b	12b70 <__assert_fail@plt+0x1b84>
   12cd4:	mov	r1, #0
   12cd8:	mov	r0, r1
   12cdc:	bl	10e0c <dup2@plt>
   12ce0:	subs	r4, r0, #0
   12ce4:	moveq	r9, r4
   12ce8:	moveq	r8, r4
   12cec:	beq	12be0 <__assert_fail@plt+0x1bf4>
   12cf0:	mov	r4, #0
   12cf4:	mov	r9, r4
   12cf8:	b	12b98 <__assert_fail@plt+0x1bac>
   12cfc:	bl	10f20 <__errno_location@plt>
   12d00:	mov	r8, #1
   12d04:	mov	r5, #0
   12d08:	mov	r6, r0
   12d0c:	ldr	r7, [r0]
   12d10:	b	12c00 <__assert_fail@plt+0x1c14>
   12d14:	bl	10f20 <__errno_location@plt>
   12d18:	mov	r6, r0
   12d1c:	ldr	r7, [r0]
   12d20:	b	12cb4 <__assert_fail@plt+0x1cc8>
   12d24:	bl	10f20 <__errno_location@plt>
   12d28:	mov	r6, r0
   12d2c:	ldr	r7, [r0]
   12d30:	b	12c68 <__assert_fail@plt+0x1c7c>
   12d34:	mov	r9, r4
   12d38:	b	12c68 <__assert_fail@plt+0x1c7c>
   12d3c:	muleq	r1, r0, r3
   12d40:	push	{r4, r5, r6, r7, r8, lr}
   12d44:	sub	sp, sp, #8
   12d48:	ldmib	r0, {ip, lr}
   12d4c:	mov	r4, r0
   12d50:	ldr	r5, [sp, #32]
   12d54:	cmp	lr, ip
   12d58:	beq	12d70 <__assert_fail@plt+0x1d84>
   12d5c:	str	r5, [sp, #32]
   12d60:	mov	r0, r4
   12d64:	add	sp, sp, #8
   12d68:	pop	{r4, r5, r6, r7, r8, lr}
   12d6c:	b	10f74 <fseeko64@plt>
   12d70:	ldr	lr, [r0, #20]
   12d74:	ldr	ip, [r0, #16]
   12d78:	cmp	lr, ip
   12d7c:	bne	12d5c <__assert_fail@plt+0x1d70>
   12d80:	ldr	r8, [r0, #36]	; 0x24
   12d84:	cmp	r8, #0
   12d88:	bne	12d5c <__assert_fail@plt+0x1d70>
   12d8c:	mov	r6, r2
   12d90:	mov	r7, r3
   12d94:	bl	10f50 <fileno@plt>
   12d98:	mov	r2, r6
   12d9c:	mov	r3, r7
   12da0:	str	r5, [sp]
   12da4:	bl	10e48 <lseek64@plt>
   12da8:	mvn	r3, #0
   12dac:	mvn	r2, #0
   12db0:	cmp	r1, r3
   12db4:	cmpeq	r0, r2
   12db8:	beq	12dd8 <__assert_fail@plt+0x1dec>
   12dbc:	ldr	r3, [r4]
   12dc0:	strd	r0, [r4, #80]	; 0x50
   12dc4:	mov	r0, r8
   12dc8:	bic	r3, r3, #16
   12dcc:	str	r3, [r4]
   12dd0:	add	sp, sp, #8
   12dd4:	pop	{r4, r5, r6, r7, r8, pc}
   12dd8:	mvn	r0, #0
   12ddc:	b	12dd0 <__assert_fail@plt+0x1de4>
   12de0:	mov	r3, #0
   12de4:	str	r3, [r0]
   12de8:	str	r3, [r0, #4]
   12dec:	str	r3, [r0, #8]
   12df0:	bx	lr
   12df4:	ldr	r3, [r1]
   12df8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dfc:	mov	r5, r1
   12e00:	ldr	sl, [r0, #8]
   12e04:	ldr	r1, [r0]
   12e08:	tst	r3, #16
   12e0c:	sub	sp, sp, #12
   12e10:	add	fp, sl, r1
   12e14:	moveq	r8, r0
   12e18:	moveq	r4, sl
   12e1c:	moveq	r9, #10
   12e20:	beq	12e50 <__assert_fail@plt+0x1e64>
   12e24:	b	12f00 <__assert_fail@plt+0x1f14>
   12e28:	add	r0, r3, #1
   12e2c:	str	r0, [r5, #4]
   12e30:	ldrb	r6, [r3]
   12e34:	mov	r7, r6
   12e38:	cmp	r4, fp
   12e3c:	beq	12ea8 <__assert_fail@plt+0x1ebc>
   12e40:	cmp	r6, #10
   12e44:	strb	r7, [r4]
   12e48:	add	r4, r4, #1
   12e4c:	beq	12eec <__assert_fail@plt+0x1f00>
   12e50:	ldr	r3, [r5, #4]
   12e54:	ldr	r0, [r5, #8]
   12e58:	cmp	r3, r0
   12e5c:	bcc	12e28 <__assert_fail@plt+0x1e3c>
   12e60:	mov	r0, r5
   12e64:	bl	10f80 <__uflow@plt>
   12e68:	cmn	r0, #1
   12e6c:	mov	r6, r0
   12e70:	uxtbne	r7, r0
   12e74:	bne	12e38 <__assert_fail@plt+0x1e4c>
   12e78:	cmp	sl, r4
   12e7c:	beq	12f00 <__assert_fail@plt+0x1f14>
   12e80:	ldr	r3, [r5]
   12e84:	tst	r3, #32
   12e88:	bne	12f00 <__assert_fail@plt+0x1f14>
   12e8c:	ldrb	r3, [r4, #-1]
   12e90:	cmp	r3, #10
   12e94:	beq	12eec <__assert_fail@plt+0x1f00>
   12e98:	cmp	r4, fp
   12e9c:	mov	r7, r9
   12ea0:	mov	r6, #10
   12ea4:	bne	12e40 <__assert_fail@plt+0x1e54>
   12ea8:	mov	r3, #1
   12eac:	str	r3, [sp]
   12eb0:	mov	r0, sl
   12eb4:	mov	r1, r8
   12eb8:	mvn	r3, #0
   12ebc:	mov	r2, #1
   12ec0:	ldr	r4, [r8]
   12ec4:	bl	17da0 <__assert_fail@plt+0x6db4>
   12ec8:	ldr	r1, [r8]
   12ecc:	cmp	r6, #10
   12ed0:	add	r4, r0, r4
   12ed4:	str	r0, [r8, #8]
   12ed8:	mov	sl, r0
   12edc:	strb	r7, [r4]
   12ee0:	add	fp, r0, r1
   12ee4:	add	r4, r4, #1
   12ee8:	bne	12e50 <__assert_fail@plt+0x1e64>
   12eec:	sub	r4, r4, sl
   12ef0:	mov	r0, r8
   12ef4:	str	r4, [r8, #4]
   12ef8:	add	sp, sp, #12
   12efc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f00:	mov	r0, #0
   12f04:	add	sp, sp, #12
   12f08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f0c:	ldr	ip, [r1]
   12f10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f14:	tst	ip, #16
   12f18:	ldr	fp, [r0, #8]
   12f1c:	ldr	r3, [r0]
   12f20:	sub	sp, sp, #12
   12f24:	add	r8, fp, r3
   12f28:	bne	1300c <__assert_fail@plt+0x2020>
   12f2c:	mov	r6, r2
   12f30:	mov	r7, r0
   12f34:	mov	r5, r1
   12f38:	mov	r4, fp
   12f3c:	mov	r9, #1
   12f40:	b	12f68 <__assert_fail@plt+0x1f7c>
   12f44:	add	r1, r3, #1
   12f48:	str	r1, [r5, #4]
   12f4c:	ldrb	sl, [r3]
   12f50:	cmp	r4, r8
   12f54:	beq	12fb8 <__assert_fail@plt+0x1fcc>
   12f58:	cmp	sl, r6
   12f5c:	strb	sl, [r4]
   12f60:	add	r4, r4, #1
   12f64:	beq	12ff8 <__assert_fail@plt+0x200c>
   12f68:	ldr	r3, [r5, #4]
   12f6c:	ldr	r1, [r5, #8]
   12f70:	cmp	r3, r1
   12f74:	bcc	12f44 <__assert_fail@plt+0x1f58>
   12f78:	mov	r0, r5
   12f7c:	bl	10f80 <__uflow@plt>
   12f80:	cmn	r0, #1
   12f84:	mov	sl, r0
   12f88:	bne	12f50 <__assert_fail@plt+0x1f64>
   12f8c:	cmp	fp, r4
   12f90:	beq	1300c <__assert_fail@plt+0x2020>
   12f94:	ldr	r3, [r5]
   12f98:	tst	r3, #32
   12f9c:	bne	1300c <__assert_fail@plt+0x2020>
   12fa0:	ldrb	r3, [r4, #-1]
   12fa4:	cmp	r3, r6
   12fa8:	beq	12ff8 <__assert_fail@plt+0x200c>
   12fac:	cmp	r4, r8
   12fb0:	mov	sl, r6
   12fb4:	bne	12f58 <__assert_fail@plt+0x1f6c>
   12fb8:	str	r9, [sp]
   12fbc:	mov	r0, fp
   12fc0:	mov	r2, #1
   12fc4:	mvn	r3, #0
   12fc8:	mov	r1, r7
   12fcc:	ldr	r4, [r7]
   12fd0:	bl	17da0 <__assert_fail@plt+0x6db4>
   12fd4:	ldr	r2, [r7]
   12fd8:	cmp	sl, r6
   12fdc:	add	r4, r0, r4
   12fe0:	str	r0, [r7, #8]
   12fe4:	mov	fp, r0
   12fe8:	strb	sl, [r4]
   12fec:	add	r8, r0, r2
   12ff0:	add	r4, r4, #1
   12ff4:	bne	12f68 <__assert_fail@plt+0x1f7c>
   12ff8:	sub	r4, r4, fp
   12ffc:	mov	r0, r7
   13000:	str	r4, [r7, #4]
   13004:	add	sp, sp, #12
   13008:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1300c:	mov	r0, #0
   13010:	add	sp, sp, #12
   13014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13018:	ldr	r0, [r0, #8]
   1301c:	b	12ad4 <__assert_fail@plt+0x1ae8>
   13020:	push	{r4, r5, r6, lr}
   13024:	subs	r6, r2, #0
   13028:	beq	1306c <__assert_fail@plt+0x2080>
   1302c:	mov	r4, r0
   13030:	mov	r5, r1
   13034:	bl	10ec0 <__ctype_toupper_loc@plt>
   13038:	mov	r3, r4
   1303c:	sub	r1, r5, #1
   13040:	add	r4, r4, r6
   13044:	ldr	ip, [r0]
   13048:	ldrb	lr, [r3], #1
   1304c:	ldrb	r2, [r1, #1]!
   13050:	ldr	r0, [ip, lr, lsl #2]
   13054:	ldr	r2, [ip, r2, lsl #2]
   13058:	subs	r0, r0, r2
   1305c:	popne	{r4, r5, r6, pc}
   13060:	cmp	r4, r3
   13064:	bne	13048 <__assert_fail@plt+0x205c>
   13068:	pop	{r4, r5, r6, pc}
   1306c:	mov	r0, r6
   13070:	pop	{r4, r5, r6, pc}
   13074:	push	{lr}		; (str lr, [sp, #-4]!)
   13078:	sub	sp, sp, #12
   1307c:	ldr	r0, [pc, #72]	; 130cc <__assert_fail@plt+0x20e0>
   13080:	bl	10e90 <getenv@plt>
   13084:	subs	r3, r0, #0
   13088:	beq	13098 <__assert_fail@plt+0x20ac>
   1308c:	ldrb	r3, [r3]
   13090:	cmp	r3, #0
   13094:	bne	130a4 <__assert_fail@plt+0x20b8>
   13098:	ldr	r0, [pc, #48]	; 130d0 <__assert_fail@plt+0x20e4>
   1309c:	add	sp, sp, #12
   130a0:	pop	{pc}		; (ldr pc, [sp], #4)
   130a4:	mov	r2, #10
   130a8:	add	r1, sp, #4
   130ac:	bl	10d7c <strtol@plt>
   130b0:	ldr	r2, [sp, #4]
   130b4:	ldr	r3, [pc, #20]	; 130d0 <__assert_fail@plt+0x20e4>
   130b8:	ldrb	r2, [r2]
   130bc:	cmp	r2, #0
   130c0:	movne	r0, r3
   130c4:	add	sp, sp, #12
   130c8:	pop	{pc}		; (ldr pc, [sp], #4)
   130cc:	muleq	r1, ip, r3
   130d0:	andeq	r1, r3, r9, rrx
   130d4:	push	{r4, r5, r6, lr}
   130d8:	subs	r4, r0, #0
   130dc:	beq	13150 <__assert_fail@plt+0x2164>
   130e0:	mov	r1, #47	; 0x2f
   130e4:	bl	10fa4 <strrchr@plt>
   130e8:	subs	r5, r0, #0
   130ec:	beq	1313c <__assert_fail@plt+0x2150>
   130f0:	add	r6, r5, #1
   130f4:	sub	r3, r6, r4
   130f8:	cmp	r3, #6
   130fc:	ble	1313c <__assert_fail@plt+0x2150>
   13100:	mov	r2, #7
   13104:	ldr	r1, [pc, #96]	; 1316c <__assert_fail@plt+0x2180>
   13108:	sub	r0, r5, #6
   1310c:	bl	10fc8 <strncmp@plt>
   13110:	cmp	r0, #0
   13114:	bne	1313c <__assert_fail@plt+0x2150>
   13118:	mov	r2, #3
   1311c:	ldr	r1, [pc, #76]	; 13170 <__assert_fail@plt+0x2184>
   13120:	mov	r0, r6
   13124:	bl	10fc8 <strncmp@plt>
   13128:	cmp	r0, #0
   1312c:	movne	r4, r6
   13130:	ldreq	r3, [pc, #60]	; 13174 <__assert_fail@plt+0x2188>
   13134:	addeq	r4, r5, #4
   13138:	streq	r4, [r3]
   1313c:	ldr	r2, [pc, #52]	; 13178 <__assert_fail@plt+0x218c>
   13140:	ldr	r3, [pc, #52]	; 1317c <__assert_fail@plt+0x2190>
   13144:	str	r4, [r2]
   13148:	str	r4, [r3]
   1314c:	pop	{r4, r5, r6, pc}
   13150:	ldr	r3, [pc, #40]	; 13180 <__assert_fail@plt+0x2194>
   13154:	mov	r2, #55	; 0x37
   13158:	mov	r1, #1
   1315c:	ldr	r3, [r3]
   13160:	ldr	r0, [pc, #28]	; 13184 <__assert_fail@plt+0x2198>
   13164:	bl	10e3c <fwrite@plt>
   13168:	bl	10fd4 <abort@plt>
   1316c:	andeq	sl, r1, r4, ror #7
   13170:	andeq	sl, r1, ip, ror #7
   13174:	andeq	fp, r2, r8, asr #2
   13178:	muleq	r2, r8, r1
   1317c:	andeq	fp, r2, ip, asr #2
   13180:	andeq	fp, r2, r8, asr r1
   13184:	andeq	sl, r1, ip, lsr #7
   13188:	push	{r4, r5, r6, lr}
   1318c:	mov	r4, r0
   13190:	mov	r5, r1
   13194:	bl	19100 <__assert_fail@plt+0x8114>
   13198:	ldrb	r3, [r0]
   1319c:	bic	r3, r3, #32
   131a0:	cmp	r3, #85	; 0x55
   131a4:	bne	13204 <__assert_fail@plt+0x2218>
   131a8:	ldrb	r3, [r0, #1]
   131ac:	bic	r3, r3, #32
   131b0:	cmp	r3, #84	; 0x54
   131b4:	bne	13240 <__assert_fail@plt+0x2254>
   131b8:	ldrb	r3, [r0, #2]
   131bc:	bic	r3, r3, #32
   131c0:	cmp	r3, #70	; 0x46
   131c4:	bne	13240 <__assert_fail@plt+0x2254>
   131c8:	ldrb	r3, [r0, #3]
   131cc:	cmp	r3, #45	; 0x2d
   131d0:	bne	13240 <__assert_fail@plt+0x2254>
   131d4:	ldrb	r3, [r0, #4]
   131d8:	cmp	r3, #56	; 0x38
   131dc:	bne	13240 <__assert_fail@plt+0x2254>
   131e0:	ldrb	r3, [r0, #5]
   131e4:	cmp	r3, #0
   131e8:	bne	13240 <__assert_fail@plt+0x2254>
   131ec:	ldrb	r2, [r4]
   131f0:	ldr	r3, [pc, #152]	; 13290 <__assert_fail@plt+0x22a4>
   131f4:	ldr	r0, [pc, #152]	; 13294 <__assert_fail@plt+0x22a8>
   131f8:	cmp	r2, #96	; 0x60
   131fc:	movne	r0, r3
   13200:	pop	{r4, r5, r6, pc}
   13204:	cmp	r3, #71	; 0x47
   13208:	bne	13240 <__assert_fail@plt+0x2254>
   1320c:	ldrb	r3, [r0, #1]
   13210:	bic	r3, r3, #32
   13214:	cmp	r3, #66	; 0x42
   13218:	bne	13240 <__assert_fail@plt+0x2254>
   1321c:	ldrb	r3, [r0, #2]
   13220:	cmp	r3, #49	; 0x31
   13224:	bne	13240 <__assert_fail@plt+0x2254>
   13228:	ldrb	r3, [r0, #3]
   1322c:	cmp	r3, #56	; 0x38
   13230:	bne	13240 <__assert_fail@plt+0x2254>
   13234:	ldrb	r3, [r0, #4]
   13238:	cmp	r3, #48	; 0x30
   1323c:	beq	13254 <__assert_fail@plt+0x2268>
   13240:	ldr	r3, [pc, #80]	; 13298 <__assert_fail@plt+0x22ac>
   13244:	cmp	r5, #9
   13248:	ldr	r0, [pc, #76]	; 1329c <__assert_fail@plt+0x22b0>
   1324c:	movne	r0, r3
   13250:	pop	{r4, r5, r6, pc}
   13254:	ldrb	r3, [r0, #5]
   13258:	cmp	r3, #51	; 0x33
   1325c:	bne	13240 <__assert_fail@plt+0x2254>
   13260:	ldrb	r3, [r0, #6]
   13264:	cmp	r3, #48	; 0x30
   13268:	bne	13240 <__assert_fail@plt+0x2254>
   1326c:	ldrb	r3, [r0, #7]
   13270:	cmp	r3, #0
   13274:	bne	13240 <__assert_fail@plt+0x2254>
   13278:	ldrb	r2, [r4]
   1327c:	ldr	r3, [pc, #28]	; 132a0 <__assert_fail@plt+0x22b4>
   13280:	ldr	r0, [pc, #28]	; 132a4 <__assert_fail@plt+0x22b8>
   13284:	cmp	r2, #96	; 0x60
   13288:	movne	r0, r3
   1328c:	pop	{r4, r5, r6, pc}
   13290:	andeq	sl, r1, r8, asr #8
   13294:	andeq	sl, r1, r4, asr #8
   13298:	andeq	sl, r1, r8, asr r4
   1329c:	andeq	sl, r1, r4, asr r4
   132a0:	andeq	sl, r1, r0, asr r4
   132a4:	andeq	sl, r1, ip, asr #8
   132a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132ac:	sub	sp, sp, #140	; 0x8c
   132b0:	mov	r9, r1
   132b4:	str	r3, [sp, #24]
   132b8:	mov	r3, #1
   132bc:	mov	sl, r0
   132c0:	str	r2, [sp, #44]	; 0x2c
   132c4:	str	r3, [sp, #28]
   132c8:	bl	10e54 <__ctype_get_mb_cur_max@plt>
   132cc:	ldr	r3, [sp, #180]	; 0xb4
   132d0:	mov	fp, r9
   132d4:	mov	r9, sl
   132d8:	lsr	r3, r3, #1
   132dc:	and	r3, r3, #1
   132e0:	str	r3, [sp, #40]	; 0x28
   132e4:	ldr	r3, [sp, #180]	; 0xb4
   132e8:	mov	r2, #0
   132ec:	and	r3, r3, #4
   132f0:	str	r3, [sp, #100]	; 0x64
   132f4:	ldr	r3, [sp, #180]	; 0xb4
   132f8:	str	r2, [sp, #76]	; 0x4c
   132fc:	and	r3, r3, #1
   13300:	str	r3, [sp, #96]	; 0x60
   13304:	str	r2, [sp, #36]	; 0x24
   13308:	str	r2, [sp, #56]	; 0x38
   1330c:	str	r2, [sp, #68]	; 0x44
   13310:	str	r2, [sp, #72]	; 0x48
   13314:	str	r2, [sp, #84]	; 0x54
   13318:	str	r0, [sp, #80]	; 0x50
   1331c:	ldr	r3, [sp, #176]	; 0xb0
   13320:	cmp	r3, #10
   13324:	ldrls	pc, [pc, r3, lsl #2]
   13328:	b	14500 <__assert_fail@plt+0x3514>
   1332c:	andeq	r3, r1, r8, asr r3
   13330:	andeq	r3, r1, r8, ror r6
   13334:	ldrdeq	r3, [r1], -r0
   13338:	andeq	r3, r1, ip, lsr #13
   1333c:	andeq	r3, r1, r4, lsr #16
   13340:	andeq	r3, r1, r4, lsl #16
   13344:	andeq	r3, r1, ip, asr #13
   13348:	strdeq	r3, [r1], -r0
   1334c:	andeq	r3, r1, r8, lsl r7
   13350:	andeq	r3, r1, r8, lsl r7
   13354:	andeq	r3, r1, r8, lsl r7
   13358:	mov	r3, #0
   1335c:	ldr	r1, [sp, #56]	; 0x38
   13360:	ldr	r2, [sp, #176]	; 0xb0
   13364:	ldr	lr, [sp, #176]	; 0xb0
   13368:	mov	r8, r3
   1336c:	mov	ip, r3
   13370:	str	r3, [sp, #40]	; 0x28
   13374:	mov	r3, r1
   13378:	cmp	r2, #2
   1337c:	moveq	r3, #0
   13380:	andne	r3, r3, #1
   13384:	mov	r0, r3
   13388:	str	r3, [sp, #92]	; 0x5c
   1338c:	ldr	r3, [sp, #68]	; 0x44
   13390:	sub	lr, lr, #2
   13394:	adds	r2, r3, #0
   13398:	movne	r2, #1
   1339c:	and	r3, r1, ip
   133a0:	and	r3, r2, r3
   133a4:	clz	lr, lr
   133a8:	str	r3, [sp, #88]	; 0x58
   133ac:	lsr	lr, lr, #5
   133b0:	mov	r3, ip
   133b4:	and	r3, r3, lr
   133b8:	mov	sl, #0
   133bc:	and	r0, r2, r0
   133c0:	str	r3, [sp, #64]	; 0x40
   133c4:	eor	r3, r1, #1
   133c8:	str	lr, [sp, #52]	; 0x34
   133cc:	str	r0, [sp, #48]	; 0x30
   133d0:	str	r3, [sp, #60]	; 0x3c
   133d4:	ldr	r3, [sp, #24]
   133d8:	cmn	r3, #1
   133dc:	beq	1390c <__assert_fail@plt+0x2920>
   133e0:	subs	r7, r3, sl
   133e4:	movne	r7, #1
   133e8:	cmp	r7, #0
   133ec:	beq	13924 <__assert_fail@plt+0x2938>
   133f0:	ldr	r3, [sp, #48]	; 0x30
   133f4:	cmp	r3, #0
   133f8:	beq	13c90 <__assert_fail@plt+0x2ca4>
   133fc:	ldr	r2, [sp, #68]	; 0x44
   13400:	ldr	r1, [sp, #24]
   13404:	cmp	r2, #1
   13408:	mov	r3, r2
   1340c:	movls	r3, #0
   13410:	movhi	r3, #1
   13414:	cmn	r1, #1
   13418:	movne	r3, #0
   1341c:	cmp	r3, #0
   13420:	add	r4, sl, r2
   13424:	beq	13434 <__assert_fail@plt+0x2448>
   13428:	ldr	r0, [sp, #44]	; 0x2c
   1342c:	bl	10f08 <strlen@plt>
   13430:	str	r0, [sp, #24]
   13434:	ldr	r3, [sp, #24]
   13438:	cmp	r3, r4
   1343c:	ldr	r3, [sp, #44]	; 0x2c
   13440:	add	r5, r3, sl
   13444:	bcc	13c98 <__assert_fail@plt+0x2cac>
   13448:	mov	r0, r5
   1344c:	ldr	r2, [sp, #68]	; 0x44
   13450:	ldr	r1, [sp, #72]	; 0x48
   13454:	bl	10de8 <memcmp@plt>
   13458:	cmp	r0, #0
   1345c:	bne	13c98 <__assert_fail@plt+0x2cac>
   13460:	ldr	r3, [sp, #40]	; 0x28
   13464:	cmp	r3, #0
   13468:	bne	14654 <__assert_fail@plt+0x3668>
   1346c:	ldrb	r4, [r5]
   13470:	cmp	r4, #126	; 0x7e
   13474:	ldrls	pc, [pc, r4, lsl #2]
   13478:	b	14590 <__assert_fail@plt+0x35a4>
   1347c:	andeq	r3, r1, r0, asr fp
   13480:	muleq	r1, r0, r5
   13484:	muleq	r1, r0, r5
   13488:	muleq	r1, r0, r5
   1348c:	muleq	r1, r0, r5
   13490:	muleq	r1, r0, r5
   13494:	muleq	r1, r0, r5
   13498:	andeq	r3, r1, ip, lsr fp
   1349c:	andeq	r3, r1, r8, lsr #22
   134a0:	andeq	r3, r1, r4, lsl #22
   134a4:	andeq	r3, r1, r4, ror #21
   134a8:	andeq	r3, r1, r4, lsl fp
   134ac:	andeq	r3, r1, ip, asr #20
   134b0:	andeq	r3, r1, r0, lsl #25
   134b4:	muleq	r1, r0, r5
   134b8:	muleq	r1, r0, r5
   134bc:	muleq	r1, r0, r5
   134c0:	muleq	r1, r0, r5
   134c4:	muleq	r1, r0, r5
   134c8:	muleq	r1, r0, r5
   134cc:	muleq	r1, r0, r5
   134d0:	muleq	r1, r0, r5
   134d4:	muleq	r1, r0, r5
   134d8:	muleq	r1, r0, r5
   134dc:	muleq	r1, r0, r5
   134e0:	muleq	r1, r0, r5
   134e4:	muleq	r1, r0, r5
   134e8:	muleq	r1, r0, r5
   134ec:	muleq	r1, r0, r5
   134f0:	muleq	r1, r0, r5
   134f4:	muleq	r1, r0, r5
   134f8:	muleq	r1, r0, r5
   134fc:	andeq	r3, r1, r0, ror ip
   13500:	andeq	r3, r1, r0, asr ip
   13504:	andeq	r3, r1, r0, asr ip
   13508:	andeq	r3, r1, r0, lsr ip
   1350c:	andeq	r3, r1, r0, asr ip
   13510:	andeq	r3, r1, ip, lsr sl
   13514:	andeq	r3, r1, r0, asr ip
   13518:	andeq	r3, r1, r8, lsl sl
   1351c:	andeq	r3, r1, r0, asr ip
   13520:	andeq	r3, r1, r0, asr ip
   13524:	andeq	r3, r1, r0, asr ip
   13528:	andeq	r3, r1, ip, lsr sl
   1352c:	andeq	r3, r1, ip, lsr sl
   13530:	andeq	r3, r1, ip, lsr sl
   13534:	andeq	r3, r1, ip, lsr sl
   13538:	andeq	r3, r1, ip, lsr sl
   1353c:	andeq	r3, r1, ip, lsr sl
   13540:	andeq	r3, r1, ip, lsr sl
   13544:	andeq	r3, r1, ip, lsr sl
   13548:	andeq	r3, r1, ip, lsr sl
   1354c:	andeq	r3, r1, ip, lsr sl
   13550:	andeq	r3, r1, ip, lsr sl
   13554:	andeq	r3, r1, ip, lsr sl
   13558:	andeq	r3, r1, ip, lsr sl
   1355c:	andeq	r3, r1, ip, lsr sl
   13560:	andeq	r3, r1, ip, lsr sl
   13564:	andeq	r3, r1, ip, lsr sl
   13568:	andeq	r3, r1, r0, asr ip
   1356c:	andeq	r3, r1, r0, asr ip
   13570:	andeq	r3, r1, r0, asr ip
   13574:	andeq	r3, r1, r0, asr ip
   13578:	andeq	r3, r1, r8, asr #19
   1357c:	muleq	r1, r0, r5
   13580:	andeq	r3, r1, ip, lsr sl
   13584:	andeq	r3, r1, ip, lsr sl
   13588:	andeq	r3, r1, ip, lsr sl
   1358c:	andeq	r3, r1, ip, lsr sl
   13590:	andeq	r3, r1, ip, lsr sl
   13594:	andeq	r3, r1, ip, lsr sl
   13598:	andeq	r3, r1, ip, lsr sl
   1359c:	andeq	r3, r1, ip, lsr sl
   135a0:	andeq	r3, r1, ip, lsr sl
   135a4:	andeq	r3, r1, ip, lsr sl
   135a8:	andeq	r3, r1, ip, lsr sl
   135ac:	andeq	r3, r1, ip, lsr sl
   135b0:	andeq	r3, r1, ip, lsr sl
   135b4:	andeq	r3, r1, ip, lsr sl
   135b8:	andeq	r3, r1, ip, lsr sl
   135bc:	andeq	r3, r1, ip, lsr sl
   135c0:	andeq	r3, r1, ip, lsr sl
   135c4:	andeq	r3, r1, ip, lsr sl
   135c8:	andeq	r3, r1, ip, lsr sl
   135cc:	andeq	r3, r1, ip, lsr sl
   135d0:	andeq	r3, r1, ip, lsr sl
   135d4:	andeq	r3, r1, ip, lsr sl
   135d8:	andeq	r3, r1, ip, lsr sl
   135dc:	andeq	r3, r1, ip, lsr sl
   135e0:	andeq	r3, r1, ip, lsr sl
   135e4:	andeq	r3, r1, ip, lsr sl
   135e8:	andeq	r3, r1, r0, asr ip
   135ec:	muleq	r1, r4, r9
   135f0:	andeq	r3, r1, ip, lsr sl
   135f4:	andeq	r3, r1, r0, asr ip
   135f8:	andeq	r3, r1, ip, lsr sl
   135fc:	andeq	r3, r1, r0, asr ip
   13600:	andeq	r3, r1, ip, lsr sl
   13604:	andeq	r3, r1, ip, lsr sl
   13608:	andeq	r3, r1, ip, lsr sl
   1360c:	andeq	r3, r1, ip, lsr sl
   13610:	andeq	r3, r1, ip, lsr sl
   13614:	andeq	r3, r1, ip, lsr sl
   13618:	andeq	r3, r1, ip, lsr sl
   1361c:	andeq	r3, r1, ip, lsr sl
   13620:	andeq	r3, r1, ip, lsr sl
   13624:	andeq	r3, r1, ip, lsr sl
   13628:	andeq	r3, r1, ip, lsr sl
   1362c:	andeq	r3, r1, ip, lsr sl
   13630:	andeq	r3, r1, ip, lsr sl
   13634:	andeq	r3, r1, ip, lsr sl
   13638:	andeq	r3, r1, ip, lsr sl
   1363c:	andeq	r3, r1, ip, lsr sl
   13640:	andeq	r3, r1, ip, lsr sl
   13644:	andeq	r3, r1, ip, lsr sl
   13648:	andeq	r3, r1, ip, lsr sl
   1364c:	andeq	r3, r1, ip, lsr sl
   13650:	andeq	r3, r1, ip, lsr sl
   13654:	andeq	r3, r1, ip, lsr sl
   13658:	andeq	r3, r1, ip, lsr sl
   1365c:	andeq	r3, r1, ip, lsr sl
   13660:	andeq	r3, r1, ip, lsr sl
   13664:	andeq	r3, r1, ip, lsr sl
   13668:	andeq	r3, r1, ip, asr #16
   1366c:	andeq	r3, r1, r0, asr ip
   13670:	andeq	r3, r1, ip, asr #16
   13674:	andeq	r3, r1, r0, lsr ip
   13678:	mov	r3, #1
   1367c:	str	r3, [sp, #40]	; 0x28
   13680:	str	r3, [sp, #68]	; 0x44
   13684:	mov	r8, #0
   13688:	ldr	r3, [pc, #4056]	; 14668 <__assert_fail@plt+0x367c>
   1368c:	str	r3, [sp, #72]	; 0x48
   13690:	mov	r3, #2
   13694:	str	r3, [sp, #176]	; 0xb0
   13698:	ldr	r1, [sp, #56]	; 0x38
   1369c:	mov	r2, r3
   136a0:	ldr	ip, [sp, #40]	; 0x28
   136a4:	mov	lr, r3
   136a8:	b	13374 <__assert_fail@plt+0x2388>
   136ac:	mov	r3, #1
   136b0:	str	r3, [sp, #56]	; 0x38
   136b4:	str	r3, [sp, #68]	; 0x44
   136b8:	str	r3, [sp, #40]	; 0x28
   136bc:	ldr	r3, [pc, #4004]	; 14668 <__assert_fail@plt+0x367c>
   136c0:	mov	r8, #0
   136c4:	str	r3, [sp, #72]	; 0x48
   136c8:	b	13690 <__assert_fail@plt+0x26a4>
   136cc:	mov	r3, #1
   136d0:	str	r3, [sp, #56]	; 0x38
   136d4:	str	r3, [sp, #68]	; 0x44
   136d8:	str	r3, [sp, #40]	; 0x28
   136dc:	ldr	r3, [pc, #3976]	; 1466c <__assert_fail@plt+0x3680>
   136e0:	mov	r8, #0
   136e4:	str	r3, [sp, #72]	; 0x48
   136e8:	mov	r3, #5
   136ec:	b	13694 <__assert_fail@plt+0x26a8>
   136f0:	mov	r3, #0
   136f4:	str	r3, [sp, #40]	; 0x28
   136f8:	mov	r3, #1
   136fc:	str	r3, [sp, #56]	; 0x38
   13700:	mov	r8, #0
   13704:	mov	r1, r3
   13708:	ldr	r2, [sp, #176]	; 0xb0
   1370c:	ldr	ip, [sp, #40]	; 0x28
   13710:	ldr	lr, [sp, #176]	; 0xb0
   13714:	b	13374 <__assert_fail@plt+0x2388>
   13718:	ldr	r3, [sp, #176]	; 0xb0
   1371c:	cmp	r3, #10
   13720:	beq	13764 <__assert_fail@plt+0x2778>
   13724:	mov	r2, #5
   13728:	ldr	r1, [pc, #3904]	; 14670 <__assert_fail@plt+0x3684>
   1372c:	mov	r0, #0
   13730:	bl	10e00 <dcgettext@plt>
   13734:	ldr	r2, [pc, #3892]	; 14670 <__assert_fail@plt+0x3684>
   13738:	cmp	r0, r2
   1373c:	str	r0, [sp, #188]	; 0xbc
   13740:	beq	147fc <__assert_fail@plt+0x3810>
   13744:	mov	r2, #5
   13748:	ldr	r1, [pc, #3864]	; 14668 <__assert_fail@plt+0x367c>
   1374c:	mov	r0, #0
   13750:	bl	10e00 <dcgettext@plt>
   13754:	ldr	r2, [pc, #3852]	; 14668 <__assert_fail@plt+0x367c>
   13758:	cmp	r0, r2
   1375c:	str	r0, [sp, #192]	; 0xc0
   13760:	beq	147ec <__assert_fail@plt+0x3800>
   13764:	ldr	r8, [sp, #40]	; 0x28
   13768:	cmp	r8, #0
   1376c:	movne	r8, #0
   13770:	bne	137a0 <__assert_fail@plt+0x27b4>
   13774:	ldr	r3, [sp, #188]	; 0xbc
   13778:	ldrb	r3, [r3]
   1377c:	cmp	r3, #0
   13780:	beq	137a0 <__assert_fail@plt+0x27b4>
   13784:	ldr	r2, [sp, #188]	; 0xbc
   13788:	cmp	fp, r8
   1378c:	strbhi	r3, [r9, r8]
   13790:	ldrb	r3, [r2, #1]!
   13794:	add	r8, r8, #1
   13798:	cmp	r3, #0
   1379c:	bne	13788 <__assert_fail@plt+0x279c>
   137a0:	ldr	r0, [sp, #192]	; 0xc0
   137a4:	bl	10f08 <strlen@plt>
   137a8:	ldr	r3, [sp, #192]	; 0xc0
   137ac:	ldr	r2, [sp, #176]	; 0xb0
   137b0:	str	r3, [sp, #72]	; 0x48
   137b4:	mov	r3, #1
   137b8:	str	r3, [sp, #56]	; 0x38
   137bc:	mov	r1, r3
   137c0:	ldr	ip, [sp, #40]	; 0x28
   137c4:	ldr	lr, [sp, #176]	; 0xb0
   137c8:	str	r0, [sp, #68]	; 0x44
   137cc:	b	13374 <__assert_fail@plt+0x2388>
   137d0:	ldr	r3, [sp, #40]	; 0x28
   137d4:	cmp	r3, #0
   137d8:	beq	14480 <__assert_fail@plt+0x3494>
   137dc:	mov	r3, #1
   137e0:	str	r3, [sp, #68]	; 0x44
   137e4:	ldr	r3, [pc, #3708]	; 14668 <__assert_fail@plt+0x367c>
   137e8:	str	r3, [sp, #72]	; 0x48
   137ec:	mov	r8, #0
   137f0:	ldr	r1, [sp, #56]	; 0x38
   137f4:	ldr	r2, [sp, #176]	; 0xb0
   137f8:	ldr	ip, [sp, #40]	; 0x28
   137fc:	ldr	lr, [sp, #176]	; 0xb0
   13800:	b	13374 <__assert_fail@plt+0x2388>
   13804:	ldr	r3, [sp, #40]	; 0x28
   13808:	cmp	r3, #0
   1380c:	beq	14504 <__assert_fail@plt+0x3518>
   13810:	str	r3, [sp, #56]	; 0x38
   13814:	mov	r3, #1
   13818:	str	r3, [sp, #68]	; 0x44
   1381c:	ldr	r3, [pc, #3656]	; 1466c <__assert_fail@plt+0x3680>
   13820:	b	137e8 <__assert_fail@plt+0x27fc>
   13824:	ldr	r3, [sp, #40]	; 0x28
   13828:	cmp	r3, #0
   1382c:	mov	r3, #1
   13830:	streq	r3, [sp, #56]	; 0x38
   13834:	beq	14480 <__assert_fail@plt+0x3494>
   13838:	str	r3, [sp, #68]	; 0x44
   1383c:	ldr	r3, [pc, #3620]	; 14668 <__assert_fail@plt+0x367c>
   13840:	mov	r8, #0
   13844:	str	r3, [sp, #72]	; 0x48
   13848:	b	13690 <__assert_fail@plt+0x26a4>
   1384c:	ldr	r3, [sp, #24]
   13850:	ldr	r6, [sp, #48]	; 0x30
   13854:	cmn	r3, #1
   13858:	beq	13eb4 <__assert_fail@plt+0x2ec8>
   1385c:	subs	r3, r3, #1
   13860:	movne	r3, #1
   13864:	cmp	r3, #0
   13868:	beq	13c34 <__assert_fail@plt+0x2c48>
   1386c:	ldr	r1, [sp, #52]	; 0x34
   13870:	mov	r7, r3
   13874:	mov	r3, #0
   13878:	str	r3, [sp, #32]
   1387c:	ldr	r3, [sp, #60]	; 0x3c
   13880:	orr	r2, r1, r3
   13884:	ldr	r3, [sp, #40]	; 0x28
   13888:	eor	r2, r2, #1
   1388c:	orr	r2, r3, r2
   13890:	tst	r2, #255	; 0xff
   13894:	bne	141b8 <__assert_fail@plt+0x31cc>
   13898:	cmp	r6, #0
   1389c:	bne	13a78 <__assert_fail@plt+0x2a8c>
   138a0:	ldr	r3, [sp, #36]	; 0x24
   138a4:	add	sl, sl, #1
   138a8:	and	r3, r3, r7
   138ac:	uxtb	r6, r3
   138b0:	cmp	r6, #0
   138b4:	beq	138e0 <__assert_fail@plt+0x28f4>
   138b8:	cmp	fp, r8
   138bc:	movhi	r3, #39	; 0x27
   138c0:	strbhi	r3, [r9, r8]
   138c4:	add	r3, r8, #1
   138c8:	cmp	fp, r3
   138cc:	movhi	r2, #39	; 0x27
   138d0:	add	r8, r8, #2
   138d4:	strbhi	r2, [r9, r3]
   138d8:	mov	r3, #0
   138dc:	str	r3, [sp, #36]	; 0x24
   138e0:	ldr	r2, [sp, #32]
   138e4:	cmp	r8, fp
   138e8:	ldr	r3, [sp, #28]
   138ec:	strbcc	r4, [r9, r8]
   138f0:	cmp	r2, #0
   138f4:	moveq	r3, #0
   138f8:	str	r3, [sp, #28]
   138fc:	ldr	r3, [sp, #24]
   13900:	add	r8, r8, #1
   13904:	cmn	r3, #1
   13908:	bne	133e0 <__assert_fail@plt+0x23f4>
   1390c:	ldr	r3, [sp, #44]	; 0x2c
   13910:	ldrb	r3, [r3, sl]
   13914:	adds	r7, r3, #0
   13918:	movne	r7, #1
   1391c:	cmp	r7, #0
   13920:	bne	133f0 <__assert_fail@plt+0x2404>
   13924:	ldr	r3, [sp, #64]	; 0x40
   13928:	cmp	r8, #0
   1392c:	movne	r3, #0
   13930:	andeq	r3, r3, #1
   13934:	cmp	r3, #0
   13938:	str	r3, [sp, #64]	; 0x40
   1393c:	bne	143e0 <__assert_fail@plt+0x33f4>
   13940:	ldr	r3, [sp, #40]	; 0x28
   13944:	ldr	r2, [sp, #52]	; 0x34
   13948:	eor	r3, r3, #1
   1394c:	ands	r2, r2, r3
   13950:	beq	1480c <__assert_fail@plt+0x3820>
   13954:	ldr	r3, [sp, #76]	; 0x4c
   13958:	cmp	r3, #0
   1395c:	beq	147dc <__assert_fail@plt+0x37f0>
   13960:	ldr	r3, [sp, #28]
   13964:	cmp	r3, #0
   13968:	bne	14798 <__assert_fail@plt+0x37ac>
   1396c:	ldr	r2, [sp, #84]	; 0x54
   13970:	clz	r3, fp
   13974:	cmp	r2, #0
   13978:	lsr	r3, r3, #5
   1397c:	moveq	r3, #0
   13980:	cmp	r3, #0
   13984:	beq	14738 <__assert_fail@plt+0x374c>
   13988:	mov	fp, r2
   1398c:	str	r3, [sp, #76]	; 0x4c
   13990:	b	1331c <__assert_fail@plt+0x2330>
   13994:	ldr	r3, [sp, #176]	; 0xb0
   13998:	ldr	r6, [sp, #48]	; 0x30
   1399c:	cmp	r3, #2
   139a0:	beq	13ed8 <__assert_fail@plt+0x2eec>
   139a4:	ldr	r3, [sp, #88]	; 0x58
   139a8:	cmp	r3, #0
   139ac:	beq	1445c <__assert_fail@plt+0x3470>
   139b0:	mov	r3, #0
   139b4:	add	sl, sl, #1
   139b8:	ldr	r6, [sp, #36]	; 0x24
   139bc:	str	r3, [sp, #32]
   139c0:	mov	r4, #92	; 0x5c
   139c4:	b	138b0 <__assert_fail@plt+0x28c4>
   139c8:	ldr	r3, [sp, #176]	; 0xb0
   139cc:	ldr	r6, [sp, #48]	; 0x30
   139d0:	cmp	r3, #2
   139d4:	beq	13f08 <__assert_fail@plt+0x2f1c>
   139d8:	cmp	r3, #5
   139dc:	bne	1446c <__assert_fail@plt+0x3480>
   139e0:	ldr	r3, [sp, #100]	; 0x64
   139e4:	cmp	r3, #0
   139e8:	beq	144d0 <__assert_fail@plt+0x34e4>
   139ec:	ldr	r2, [sp, #24]
   139f0:	add	r3, sl, #2
   139f4:	cmp	r2, r3
   139f8:	bls	13a08 <__assert_fail@plt+0x2a1c>
   139fc:	ldrb	r4, [r5, #1]
   13a00:	cmp	r4, #63	; 0x3f
   13a04:	beq	14678 <__assert_fail@plt+0x368c>
   13a08:	mov	r1, #0
   13a0c:	str	r1, [sp, #32]
   13a10:	mov	r4, #63	; 0x3f
   13a14:	b	1387c <__assert_fail@plt+0x2890>
   13a18:	ldr	r3, [sp, #176]	; 0xb0
   13a1c:	ldr	r6, [sp, #48]	; 0x30
   13a20:	cmp	r3, #2
   13a24:	beq	13f34 <__assert_fail@plt+0x2f48>
   13a28:	str	r7, [sp, #32]
   13a2c:	str	r7, [sp, #76]	; 0x4c
   13a30:	mov	r1, #0
   13a34:	mov	r4, #39	; 0x27
   13a38:	b	1387c <__assert_fail@plt+0x2890>
   13a3c:	ldr	r6, [sp, #48]	; 0x30
   13a40:	ldr	r1, [sp, #52]	; 0x34
   13a44:	str	r7, [sp, #32]
   13a48:	b	1387c <__assert_fail@plt+0x2890>
   13a4c:	ldr	r6, [sp, #48]	; 0x30
   13a50:	ldr	r1, [sp, #52]	; 0x34
   13a54:	mov	r4, #12
   13a58:	mov	r3, #102	; 0x66
   13a5c:	ldr	r2, [sp, #56]	; 0x38
   13a60:	cmp	r2, #0
   13a64:	streq	r2, [sp, #32]
   13a68:	beq	1387c <__assert_fail@plt+0x2890>
   13a6c:	mov	r4, r3
   13a70:	mov	r3, #0
   13a74:	str	r3, [sp, #32]
   13a78:	ldr	r3, [sp, #40]	; 0x28
   13a7c:	cmp	r3, #0
   13a80:	bne	141f0 <__assert_fail@plt+0x3204>
   13a84:	ldr	r3, [sp, #36]	; 0x24
   13a88:	eor	r3, r3, #1
   13a8c:	and	r3, r3, r1
   13a90:	ands	r3, r3, #255	; 0xff
   13a94:	beq	13acc <__assert_fail@plt+0x2ae0>
   13a98:	cmp	fp, r8
   13a9c:	movhi	r2, #39	; 0x27
   13aa0:	strbhi	r2, [r9, r8]
   13aa4:	add	r2, r8, #1
   13aa8:	cmp	fp, r2
   13aac:	movhi	r1, #36	; 0x24
   13ab0:	strbhi	r1, [r9, r2]
   13ab4:	add	r2, r8, #2
   13ab8:	cmp	fp, r2
   13abc:	add	r8, r8, #3
   13ac0:	movhi	r1, #39	; 0x27
   13ac4:	strbhi	r1, [r9, r2]
   13ac8:	str	r3, [sp, #36]	; 0x24
   13acc:	cmp	fp, r8
   13ad0:	movhi	r3, #92	; 0x5c
   13ad4:	strbhi	r3, [r9, r8]
   13ad8:	add	sl, sl, #1
   13adc:	add	r8, r8, #1
   13ae0:	b	138e0 <__assert_fail@plt+0x28f4>
   13ae4:	ldr	r6, [sp, #48]	; 0x30
   13ae8:	mov	r4, #10
   13aec:	mov	r3, #110	; 0x6e
   13af0:	ldr	r2, [sp, #64]	; 0x40
   13af4:	cmp	r2, #0
   13af8:	bne	14578 <__assert_fail@plt+0x358c>
   13afc:	ldr	r1, [sp, #52]	; 0x34
   13b00:	b	13a5c <__assert_fail@plt+0x2a70>
   13b04:	ldr	r6, [sp, #48]	; 0x30
   13b08:	ldr	r1, [sp, #52]	; 0x34
   13b0c:	mov	r3, #116	; 0x74
   13b10:	b	13a5c <__assert_fail@plt+0x2a70>
   13b14:	ldr	r6, [sp, #48]	; 0x30
   13b18:	ldr	r1, [sp, #52]	; 0x34
   13b1c:	mov	r4, #11
   13b20:	mov	r3, #118	; 0x76
   13b24:	b	13a5c <__assert_fail@plt+0x2a70>
   13b28:	ldr	r6, [sp, #48]	; 0x30
   13b2c:	ldr	r1, [sp, #52]	; 0x34
   13b30:	mov	r4, #8
   13b34:	mov	r3, #98	; 0x62
   13b38:	b	13a5c <__assert_fail@plt+0x2a70>
   13b3c:	ldr	r6, [sp, #48]	; 0x30
   13b40:	ldr	r1, [sp, #52]	; 0x34
   13b44:	mov	r4, #7
   13b48:	mov	r3, #97	; 0x61
   13b4c:	b	13a5c <__assert_fail@plt+0x2a70>
   13b50:	ldr	r3, [sp, #56]	; 0x38
   13b54:	ldr	r6, [sp, #48]	; 0x30
   13b58:	cmp	r3, #0
   13b5c:	beq	14020 <__assert_fail@plt+0x3034>
   13b60:	ldr	r3, [sp, #40]	; 0x28
   13b64:	cmp	r3, #0
   13b68:	bne	14654 <__assert_fail@plt+0x3668>
   13b6c:	ldr	r3, [sp, #36]	; 0x24
   13b70:	ldr	r2, [sp, #52]	; 0x34
   13b74:	eor	r3, r3, #1
   13b78:	ands	r3, r2, r3
   13b7c:	moveq	r2, r8
   13b80:	beq	13bb8 <__assert_fail@plt+0x2bcc>
   13b84:	cmp	fp, r8
   13b88:	movhi	r2, #39	; 0x27
   13b8c:	strbhi	r2, [r9, r8]
   13b90:	add	r2, r8, #1
   13b94:	cmp	fp, r2
   13b98:	movhi	r1, #36	; 0x24
   13b9c:	strbhi	r1, [r9, r2]
   13ba0:	add	r2, r8, #2
   13ba4:	cmp	fp, r2
   13ba8:	movhi	r1, #39	; 0x27
   13bac:	strbhi	r1, [r9, r2]
   13bb0:	add	r2, r8, #3
   13bb4:	str	r3, [sp, #36]	; 0x24
   13bb8:	cmp	fp, r2
   13bbc:	movhi	r3, #92	; 0x5c
   13bc0:	strbhi	r3, [r9, r2]
   13bc4:	ldr	r3, [sp, #92]	; 0x5c
   13bc8:	add	r8, r2, #1
   13bcc:	cmp	r3, #0
   13bd0:	beq	14554 <__assert_fail@plt+0x3568>
   13bd4:	ldr	r1, [sp, #24]
   13bd8:	add	r3, sl, #1
   13bdc:	cmp	r1, r3
   13be0:	bls	13c18 <__assert_fail@plt+0x2c2c>
   13be4:	ldr	r1, [sp, #44]	; 0x2c
   13be8:	ldrb	r3, [r1, r3]
   13bec:	sub	r3, r3, #48	; 0x30
   13bf0:	cmp	r3, #9
   13bf4:	bhi	13c18 <__assert_fail@plt+0x2c2c>
   13bf8:	cmp	fp, r8
   13bfc:	movhi	r3, #48	; 0x30
   13c00:	strbhi	r3, [r9, r8]
   13c04:	add	r3, r2, #2
   13c08:	cmp	fp, r3
   13c0c:	add	r8, r2, #3
   13c10:	movhi	r1, #48	; 0x30
   13c14:	strbhi	r1, [r9, r3]
   13c18:	ldr	r3, [sp, #40]	; 0x28
   13c1c:	ldr	r1, [sp, #52]	; 0x34
   13c20:	mov	r7, r3
   13c24:	str	r3, [sp, #32]
   13c28:	mov	r4, #48	; 0x30
   13c2c:	b	1387c <__assert_fail@plt+0x2890>
   13c30:	ldr	r6, [sp, #48]	; 0x30
   13c34:	cmp	sl, #0
   13c38:	streq	r7, [sp, #32]
   13c3c:	beq	13c5c <__assert_fail@plt+0x2c70>
   13c40:	mov	r3, #0
   13c44:	ldr	r1, [sp, #52]	; 0x34
   13c48:	str	r3, [sp, #32]
   13c4c:	b	1387c <__assert_fail@plt+0x2890>
   13c50:	ldr	r6, [sp, #48]	; 0x30
   13c54:	mov	r3, #0
   13c58:	str	r3, [sp, #32]
   13c5c:	ldr	r3, [sp, #64]	; 0x40
   13c60:	cmp	r3, #0
   13c64:	bne	143e0 <__assert_fail@plt+0x33f4>
   13c68:	ldr	r1, [sp, #52]	; 0x34
   13c6c:	b	1387c <__assert_fail@plt+0x2890>
   13c70:	ldr	r3, [sp, #48]	; 0x30
   13c74:	mov	r6, r3
   13c78:	str	r3, [sp, #32]
   13c7c:	b	13c5c <__assert_fail@plt+0x2c70>
   13c80:	ldr	r6, [sp, #48]	; 0x30
   13c84:	mov	r4, #13
   13c88:	mov	r3, #114	; 0x72
   13c8c:	b	13af0 <__assert_fail@plt+0x2b04>
   13c90:	ldr	r3, [sp, #44]	; 0x2c
   13c94:	add	r5, r3, sl
   13c98:	ldrb	r4, [r5]
   13c9c:	cmp	r4, #126	; 0x7e
   13ca0:	ldrls	pc, [pc, r4, lsl #2]
   13ca4:	b	14040 <__assert_fail@plt+0x3054>
   13ca8:	andeq	r4, r1, r0, lsl r0
   13cac:	andeq	r4, r1, r0, asr #32
   13cb0:	andeq	r4, r1, r0, asr #32
   13cb4:	andeq	r4, r1, r0, asr #32
   13cb8:	andeq	r4, r1, r0, asr #32
   13cbc:	andeq	r4, r1, r0, asr #32
   13cc0:	andeq	r4, r1, r0, asr #32
   13cc4:	andeq	r4, r1, r8
   13cc8:	andeq	r4, r1, r0
   13ccc:	strdeq	r3, [r1], -r4
   13cd0:	andeq	r3, r1, ip, ror #31
   13cd4:	andeq	r3, r1, r4, ror #31
   13cd8:	ldrdeq	r3, [r1], -ip
   13cdc:	ldrdeq	r3, [r1], -r4
   13ce0:	andeq	r4, r1, r0, asr #32
   13ce4:	andeq	r4, r1, r0, asr #32
   13ce8:	andeq	r4, r1, r0, asr #32
   13cec:	andeq	r4, r1, r0, asr #32
   13cf0:	andeq	r4, r1, r0, asr #32
   13cf4:	andeq	r4, r1, r0, asr #32
   13cf8:	andeq	r4, r1, r0, asr #32
   13cfc:	andeq	r4, r1, r0, asr #32
   13d00:	andeq	r4, r1, r0, asr #32
   13d04:	andeq	r4, r1, r0, asr #32
   13d08:	andeq	r4, r1, r0, asr #32
   13d0c:	andeq	r4, r1, r0, asr #32
   13d10:	andeq	r4, r1, r0, asr #32
   13d14:	andeq	r4, r1, r0, asr #32
   13d18:	andeq	r4, r1, r0, asr #32
   13d1c:	andeq	r4, r1, r0, asr #32
   13d20:	andeq	r4, r1, r0, asr #32
   13d24:	andeq	r4, r1, r0, asr #32
   13d28:	andeq	r3, r1, r8, asr #31
   13d2c:	andeq	r3, r1, r0, asr #31
   13d30:	andeq	r3, r1, r0, asr #31
   13d34:			; <UNDEFINED> instruction: 0x00013fb8
   13d38:	andeq	r3, r1, r0, asr #31
   13d3c:			; <UNDEFINED> instruction: 0x00013fb0
   13d40:	andeq	r3, r1, r0, asr #31
   13d44:	andeq	r3, r1, r4, lsr #30
   13d48:	andeq	r3, r1, r0, asr #31
   13d4c:	andeq	r3, r1, r0, asr #31
   13d50:	andeq	r3, r1, r0, asr #31
   13d54:			; <UNDEFINED> instruction: 0x00013fb0
   13d58:			; <UNDEFINED> instruction: 0x00013fb0
   13d5c:			; <UNDEFINED> instruction: 0x00013fb0
   13d60:			; <UNDEFINED> instruction: 0x00013fb0
   13d64:			; <UNDEFINED> instruction: 0x00013fb0
   13d68:			; <UNDEFINED> instruction: 0x00013fb0
   13d6c:			; <UNDEFINED> instruction: 0x00013fb0
   13d70:			; <UNDEFINED> instruction: 0x00013fb0
   13d74:			; <UNDEFINED> instruction: 0x00013fb0
   13d78:			; <UNDEFINED> instruction: 0x00013fb0
   13d7c:			; <UNDEFINED> instruction: 0x00013fb0
   13d80:			; <UNDEFINED> instruction: 0x00013fb0
   13d84:			; <UNDEFINED> instruction: 0x00013fb0
   13d88:			; <UNDEFINED> instruction: 0x00013fb0
   13d8c:			; <UNDEFINED> instruction: 0x00013fb0
   13d90:			; <UNDEFINED> instruction: 0x00013fb0
   13d94:	andeq	r3, r1, r0, asr #31
   13d98:	andeq	r3, r1, r0, asr #31
   13d9c:	andeq	r3, r1, r0, asr #31
   13da0:	andeq	r3, r1, r0, asr #31
   13da4:	strdeq	r3, [r1], -r8
   13da8:	andeq	r4, r1, r0, asr #32
   13dac:			; <UNDEFINED> instruction: 0x00013fb0
   13db0:			; <UNDEFINED> instruction: 0x00013fb0
   13db4:			; <UNDEFINED> instruction: 0x00013fb0
   13db8:			; <UNDEFINED> instruction: 0x00013fb0
   13dbc:			; <UNDEFINED> instruction: 0x00013fb0
   13dc0:			; <UNDEFINED> instruction: 0x00013fb0
   13dc4:			; <UNDEFINED> instruction: 0x00013fb0
   13dc8:			; <UNDEFINED> instruction: 0x00013fb0
   13dcc:			; <UNDEFINED> instruction: 0x00013fb0
   13dd0:			; <UNDEFINED> instruction: 0x00013fb0
   13dd4:			; <UNDEFINED> instruction: 0x00013fb0
   13dd8:			; <UNDEFINED> instruction: 0x00013fb0
   13ddc:			; <UNDEFINED> instruction: 0x00013fb0
   13de0:			; <UNDEFINED> instruction: 0x00013fb0
   13de4:			; <UNDEFINED> instruction: 0x00013fb0
   13de8:			; <UNDEFINED> instruction: 0x00013fb0
   13dec:			; <UNDEFINED> instruction: 0x00013fb0
   13df0:			; <UNDEFINED> instruction: 0x00013fb0
   13df4:			; <UNDEFINED> instruction: 0x00013fb0
   13df8:			; <UNDEFINED> instruction: 0x00013fb0
   13dfc:			; <UNDEFINED> instruction: 0x00013fb0
   13e00:			; <UNDEFINED> instruction: 0x00013fb0
   13e04:			; <UNDEFINED> instruction: 0x00013fb0
   13e08:			; <UNDEFINED> instruction: 0x00013fb0
   13e0c:			; <UNDEFINED> instruction: 0x00013fb0
   13e10:			; <UNDEFINED> instruction: 0x00013fb0
   13e14:	andeq	r3, r1, r0, asr #31
   13e18:	andeq	r3, r1, r8, asr #29
   13e1c:			; <UNDEFINED> instruction: 0x00013fb0
   13e20:	andeq	r3, r1, r0, asr #31
   13e24:			; <UNDEFINED> instruction: 0x00013fb0
   13e28:	andeq	r3, r1, r0, asr #31
   13e2c:			; <UNDEFINED> instruction: 0x00013fb0
   13e30:			; <UNDEFINED> instruction: 0x00013fb0
   13e34:			; <UNDEFINED> instruction: 0x00013fb0
   13e38:			; <UNDEFINED> instruction: 0x00013fb0
   13e3c:			; <UNDEFINED> instruction: 0x00013fb0
   13e40:			; <UNDEFINED> instruction: 0x00013fb0
   13e44:			; <UNDEFINED> instruction: 0x00013fb0
   13e48:			; <UNDEFINED> instruction: 0x00013fb0
   13e4c:			; <UNDEFINED> instruction: 0x00013fb0
   13e50:			; <UNDEFINED> instruction: 0x00013fb0
   13e54:			; <UNDEFINED> instruction: 0x00013fb0
   13e58:			; <UNDEFINED> instruction: 0x00013fb0
   13e5c:			; <UNDEFINED> instruction: 0x00013fb0
   13e60:			; <UNDEFINED> instruction: 0x00013fb0
   13e64:			; <UNDEFINED> instruction: 0x00013fb0
   13e68:			; <UNDEFINED> instruction: 0x00013fb0
   13e6c:			; <UNDEFINED> instruction: 0x00013fb0
   13e70:			; <UNDEFINED> instruction: 0x00013fb0
   13e74:			; <UNDEFINED> instruction: 0x00013fb0
   13e78:			; <UNDEFINED> instruction: 0x00013fb0
   13e7c:			; <UNDEFINED> instruction: 0x00013fb0
   13e80:			; <UNDEFINED> instruction: 0x00013fb0
   13e84:			; <UNDEFINED> instruction: 0x00013fb0
   13e88:			; <UNDEFINED> instruction: 0x00013fb0
   13e8c:			; <UNDEFINED> instruction: 0x00013fb0
   13e90:			; <UNDEFINED> instruction: 0x00013fb0
   13e94:	andeq	r3, r1, r4, lsr #29
   13e98:	andeq	r3, r1, r0, asr #31
   13e9c:	andeq	r3, r1, r4, lsr #29
   13ea0:			; <UNDEFINED> instruction: 0x00013fb8
   13ea4:	ldr	r3, [sp, #24]
   13ea8:	mov	r6, #0
   13eac:	cmn	r3, #1
   13eb0:	bne	1385c <__assert_fail@plt+0x2870>
   13eb4:	ldr	r3, [sp, #44]	; 0x2c
   13eb8:	ldrb	r3, [r3, #1]
   13ebc:	adds	r3, r3, #0
   13ec0:	movne	r3, #1
   13ec4:	b	13864 <__assert_fail@plt+0x2878>
   13ec8:	ldr	r3, [sp, #176]	; 0xb0
   13ecc:	mov	r6, #0
   13ed0:	cmp	r3, #2
   13ed4:	bne	139a4 <__assert_fail@plt+0x29b8>
   13ed8:	ldr	r3, [sp, #64]	; 0x40
   13edc:	cmp	r3, #0
   13ee0:	bne	14718 <__assert_fail@plt+0x372c>
   13ee4:	add	sl, sl, #1
   13ee8:	ldr	r6, [sp, #36]	; 0x24
   13eec:	str	r3, [sp, #32]
   13ef0:	mov	r4, #92	; 0x5c
   13ef4:	b	138b0 <__assert_fail@plt+0x28c4>
   13ef8:	ldr	r3, [sp, #176]	; 0xb0
   13efc:	mov	r6, #0
   13f00:	cmp	r3, #2
   13f04:	bne	139d8 <__assert_fail@plt+0x29ec>
   13f08:	ldr	r3, [sp, #40]	; 0x28
   13f0c:	cmp	r3, #0
   13f10:	bne	141f4 <__assert_fail@plt+0x3208>
   13f14:	mov	r1, r7
   13f18:	str	r3, [sp, #32]
   13f1c:	mov	r4, #63	; 0x3f
   13f20:	b	1387c <__assert_fail@plt+0x2890>
   13f24:	ldr	r3, [sp, #176]	; 0xb0
   13f28:	mov	r6, #0
   13f2c:	cmp	r3, #2
   13f30:	bne	13a28 <__assert_fail@plt+0x2a3c>
   13f34:	ldr	r3, [sp, #64]	; 0x40
   13f38:	cmp	r3, #0
   13f3c:	bne	14718 <__assert_fail@plt+0x372c>
   13f40:	ldr	r2, [sp, #84]	; 0x54
   13f44:	adds	r3, fp, #0
   13f48:	movne	r3, #1
   13f4c:	cmp	r2, #0
   13f50:	movne	r3, #0
   13f54:	cmp	r3, #0
   13f58:	strne	fp, [sp, #84]	; 0x54
   13f5c:	movne	fp, #0
   13f60:	bne	13f90 <__assert_fail@plt+0x2fa4>
   13f64:	cmp	fp, r8
   13f68:	movhi	r3, #39	; 0x27
   13f6c:	strbhi	r3, [r9, r8]
   13f70:	add	r3, r8, #1
   13f74:	cmp	fp, r3
   13f78:	movhi	r2, #92	; 0x5c
   13f7c:	strbhi	r2, [r9, r3]
   13f80:	add	r3, r8, #2
   13f84:	cmp	fp, r3
   13f88:	movhi	r2, #39	; 0x27
   13f8c:	strbhi	r2, [r9, r3]
   13f90:	ldr	r3, [sp, #64]	; 0x40
   13f94:	add	r8, r8, #3
   13f98:	mov	r1, r7
   13f9c:	str	r7, [sp, #32]
   13fa0:	str	r7, [sp, #76]	; 0x4c
   13fa4:	str	r3, [sp, #36]	; 0x24
   13fa8:	mov	r4, #39	; 0x27
   13fac:	b	1387c <__assert_fail@plt+0x2890>
   13fb0:	mov	r6, #0
   13fb4:	b	13a40 <__assert_fail@plt+0x2a54>
   13fb8:	mov	r6, #0
   13fbc:	b	13c34 <__assert_fail@plt+0x2c48>
   13fc0:	mov	r6, #0
   13fc4:	b	13c54 <__assert_fail@plt+0x2c68>
   13fc8:	str	r7, [sp, #32]
   13fcc:	mov	r6, #0
   13fd0:	b	13c5c <__assert_fail@plt+0x2c70>
   13fd4:	mov	r6, #0
   13fd8:	b	13c84 <__assert_fail@plt+0x2c98>
   13fdc:	mov	r6, #0
   13fe0:	b	13a50 <__assert_fail@plt+0x2a64>
   13fe4:	mov	r6, #0
   13fe8:	b	13b18 <__assert_fail@plt+0x2b2c>
   13fec:	mov	r6, #0
   13ff0:	b	13ae8 <__assert_fail@plt+0x2afc>
   13ff4:	mov	r6, #0
   13ff8:	mov	r3, #116	; 0x74
   13ffc:	b	13af0 <__assert_fail@plt+0x2b04>
   14000:	mov	r6, #0
   14004:	b	13b2c <__assert_fail@plt+0x2b40>
   14008:	mov	r6, #0
   1400c:	b	13b40 <__assert_fail@plt+0x2b54>
   14010:	ldr	r3, [sp, #56]	; 0x38
   14014:	mov	r6, #0
   14018:	cmp	r3, #0
   1401c:	bne	13b60 <__assert_fail@plt+0x2b74>
   14020:	ldr	r3, [sp, #96]	; 0x60
   14024:	cmp	r3, #0
   14028:	addne	sl, sl, #1
   1402c:	bne	133d4 <__assert_fail@plt+0x23e8>
   14030:	ldr	r1, [sp, #52]	; 0x34
   14034:	str	r3, [sp, #32]
   14038:	mov	r4, r3
   1403c:	b	1387c <__assert_fail@plt+0x2890>
   14040:	mov	r6, #0
   14044:	ldr	r3, [sp, #80]	; 0x50
   14048:	cmp	r3, #1
   1404c:	bne	1423c <__assert_fail@plt+0x3250>
   14050:	bl	10ef0 <__ctype_b_loc@plt>
   14054:	ldr	r2, [sp, #80]	; 0x50
   14058:	sxth	r3, r4
   1405c:	mov	r1, r2
   14060:	lsl	r3, r3, #1
   14064:	ldr	r2, [r0]
   14068:	ldrh	r3, [r2, r3]
   1406c:	and	r3, r3, #16384	; 0x4000
   14070:	cmp	r3, #0
   14074:	movne	r3, #1
   14078:	moveq	r3, #0
   1407c:	str	r3, [sp, #32]
   14080:	moveq	r3, #1
   14084:	movne	r3, #0
   14088:	ldr	r2, [sp, #56]	; 0x38
   1408c:	and	r3, r3, r2
   14090:	ands	r3, r3, #255	; 0xff
   14094:	beq	13c68 <__assert_fail@plt+0x2c7c>
   14098:	add	r1, sl, r1
   1409c:	mov	r0, #0
   140a0:	ldr	r7, [sp, #40]	; 0x28
   140a4:	ldr	r2, [sp, #36]	; 0x24
   140a8:	ldr	lr, [sp, #52]	; 0x34
   140ac:	b	1415c <__assert_fail@plt+0x3170>
   140b0:	cmp	r7, #0
   140b4:	bne	144b0 <__assert_fail@plt+0x34c4>
   140b8:	eor	r0, r2, #1
   140bc:	ands	r0, lr, r0
   140c0:	beq	140f8 <__assert_fail@plt+0x310c>
   140c4:	cmp	fp, r8
   140c8:	movhi	r2, #39	; 0x27
   140cc:	strbhi	r2, [r9, r8]
   140d0:	add	r2, r8, #1
   140d4:	cmp	fp, r2
   140d8:	movhi	ip, #36	; 0x24
   140dc:	strbhi	ip, [r9, r2]
   140e0:	add	r2, r8, #2
   140e4:	cmp	fp, r2
   140e8:	movhi	ip, #39	; 0x27
   140ec:	strbhi	ip, [r9, r2]
   140f0:	add	r8, r8, #3
   140f4:	mov	r2, r0
   140f8:	cmp	fp, r8
   140fc:	movhi	r0, #92	; 0x5c
   14100:	strbhi	r0, [r9, r8]
   14104:	add	r0, r8, #1
   14108:	cmp	fp, r0
   1410c:	lsrhi	ip, r4, #6
   14110:	addhi	ip, ip, #48	; 0x30
   14114:	strbhi	ip, [r9, r0]
   14118:	add	ip, r8, #2
   1411c:	cmp	fp, ip
   14120:	lsrhi	r0, r4, #3
   14124:	andhi	r0, r0, #7
   14128:	addhi	r0, r0, #48	; 0x30
   1412c:	add	sl, sl, #1
   14130:	strbhi	r0, [r9, ip]
   14134:	and	r4, r4, #7
   14138:	cmp	sl, r1
   1413c:	add	r4, r4, #48	; 0x30
   14140:	add	r8, r8, #3
   14144:	bcs	144c8 <__assert_fail@plt+0x34dc>
   14148:	mov	r0, r3
   1414c:	cmp	fp, r8
   14150:	strbhi	r4, [r9, r8]
   14154:	ldrb	r4, [r5, #1]!
   14158:	add	r8, r8, #1
   1415c:	cmp	r3, #0
   14160:	bne	140b0 <__assert_fail@plt+0x30c4>
   14164:	cmp	r6, #0
   14168:	bne	1420c <__assert_fail@plt+0x3220>
   1416c:	eor	r6, r0, #1
   14170:	and	r6, r6, r2
   14174:	add	sl, sl, #1
   14178:	cmp	r1, sl
   1417c:	uxtb	r6, r6
   14180:	bls	14234 <__assert_fail@plt+0x3248>
   14184:	cmp	r6, #0
   14188:	beq	1414c <__assert_fail@plt+0x3160>
   1418c:	cmp	fp, r8
   14190:	movhi	r2, #39	; 0x27
   14194:	strbhi	r2, [r9, r8]
   14198:	add	r2, r8, #1
   1419c:	cmp	fp, r2
   141a0:	movhi	ip, #39	; 0x27
   141a4:	strbhi	ip, [r9, r2]
   141a8:	add	r8, r8, #2
   141ac:	mov	r6, r3
   141b0:	mov	r2, r3
   141b4:	b	1414c <__assert_fail@plt+0x3160>
   141b8:	ldr	r3, [sp, #184]	; 0xb8
   141bc:	cmp	r3, #0
   141c0:	beq	13898 <__assert_fail@plt+0x28ac>
   141c4:	lsr	r2, r4, #5
   141c8:	mov	r0, r3
   141cc:	uxtb	r2, r2
   141d0:	and	r3, r4, #31
   141d4:	ldr	r2, [r0, r2, lsl #2]
   141d8:	lsr	r3, r2, r3
   141dc:	tst	r3, #1
   141e0:	beq	13898 <__assert_fail@plt+0x28ac>
   141e4:	ldr	r3, [sp, #40]	; 0x28
   141e8:	cmp	r3, #0
   141ec:	beq	13a84 <__assert_fail@plt+0x2a98>
   141f0:	mov	r3, r1
   141f4:	str	r3, [sp, #64]	; 0x40
   141f8:	mov	sl, r9
   141fc:	ldr	r3, [sp, #56]	; 0x38
   14200:	mov	r9, fp
   14204:	ldr	r2, [sp, #64]	; 0x40
   14208:	b	143f8 <__assert_fail@plt+0x340c>
   1420c:	cmp	fp, r8
   14210:	eor	r6, r0, #1
   14214:	movhi	ip, #92	; 0x5c
   14218:	and	r6, r6, r2
   1421c:	add	sl, sl, #1
   14220:	strbhi	ip, [r9, r8]
   14224:	cmp	r1, sl
   14228:	add	r8, r8, #1
   1422c:	uxtb	r6, r6
   14230:	bhi	14184 <__assert_fail@plt+0x3198>
   14234:	str	r2, [sp, #36]	; 0x24
   14238:	b	138b0 <__assert_fail@plt+0x28c4>
   1423c:	ldr	r3, [sp, #24]
   14240:	cmn	r3, #1
   14244:	mov	r3, #0
   14248:	str	r3, [sp, #128]	; 0x80
   1424c:	str	r3, [sp, #132]	; 0x84
   14250:	beq	14544 <__assert_fail@plt+0x3558>
   14254:	mov	r2, r7
   14258:	mov	r3, #0
   1425c:	str	r7, [sp, #104]	; 0x68
   14260:	str	r5, [sp, #116]	; 0x74
   14264:	mov	r7, r3
   14268:	mov	r5, r2
   1426c:	str	r4, [sp, #32]
   14270:	str	r6, [sp, #108]	; 0x6c
   14274:	str	r8, [sp, #112]	; 0x70
   14278:	ldr	r3, [sp, #44]	; 0x2c
   1427c:	add	r6, sl, r7
   14280:	add	r4, r3, r6
   14284:	ldr	r3, [sp, #24]
   14288:	mov	r1, r4
   1428c:	sub	r2, r3, r6
   14290:	add	r0, sp, #124	; 0x7c
   14294:	add	r3, sp, #128	; 0x80
   14298:	bl	19134 <__assert_fail@plt+0x8148>
   1429c:	subs	r8, r0, #0
   142a0:	beq	14628 <__assert_fail@plt+0x363c>
   142a4:	cmn	r8, #1
   142a8:	beq	14600 <__assert_fail@plt+0x3614>
   142ac:	cmn	r8, #2
   142b0:	beq	14598 <__assert_fail@plt+0x35ac>
   142b4:	ldr	r3, [sp, #64]	; 0x40
   142b8:	cmp	r3, #0
   142bc:	beq	1437c <__assert_fail@plt+0x3390>
   142c0:	cmp	r8, #1
   142c4:	beq	1437c <__assert_fail@plt+0x3390>
   142c8:	sub	r3, r8, #1
   142cc:	add	r6, r3, r6
   142d0:	ldr	r3, [sp, #44]	; 0x2c
   142d4:	add	r6, r3, r6
   142d8:	ldrb	r3, [r4, #1]!
   142dc:	sub	r3, r3, #91	; 0x5b
   142e0:	cmp	r3, #33	; 0x21
   142e4:	ldrls	pc, [pc, r3, lsl #2]
   142e8:	b	14374 <__assert_fail@plt+0x3388>
   142ec:	andeq	r4, r1, r0, ror #7
   142f0:	andeq	r4, r1, r0, ror #7
   142f4:	andeq	r4, r1, r4, ror r3
   142f8:	andeq	r4, r1, r0, ror #7
   142fc:	andeq	r4, r1, r4, ror r3
   14300:	andeq	r4, r1, r0, ror #7
   14304:	andeq	r4, r1, r4, ror r3
   14308:	andeq	r4, r1, r4, ror r3
   1430c:	andeq	r4, r1, r4, ror r3
   14310:	andeq	r4, r1, r4, ror r3
   14314:	andeq	r4, r1, r4, ror r3
   14318:	andeq	r4, r1, r4, ror r3
   1431c:	andeq	r4, r1, r4, ror r3
   14320:	andeq	r4, r1, r4, ror r3
   14324:	andeq	r4, r1, r4, ror r3
   14328:	andeq	r4, r1, r4, ror r3
   1432c:	andeq	r4, r1, r4, ror r3
   14330:	andeq	r4, r1, r4, ror r3
   14334:	andeq	r4, r1, r4, ror r3
   14338:	andeq	r4, r1, r4, ror r3
   1433c:	andeq	r4, r1, r4, ror r3
   14340:	andeq	r4, r1, r4, ror r3
   14344:	andeq	r4, r1, r4, ror r3
   14348:	andeq	r4, r1, r4, ror r3
   1434c:	andeq	r4, r1, r4, ror r3
   14350:	andeq	r4, r1, r4, ror r3
   14354:	andeq	r4, r1, r4, ror r3
   14358:	andeq	r4, r1, r4, ror r3
   1435c:	andeq	r4, r1, r4, ror r3
   14360:	andeq	r4, r1, r4, ror r3
   14364:	andeq	r4, r1, r4, ror r3
   14368:	andeq	r4, r1, r4, ror r3
   1436c:	andeq	r4, r1, r4, ror r3
   14370:	andeq	r4, r1, r0, ror #7
   14374:	cmp	r6, r4
   14378:	bne	142d8 <__assert_fail@plt+0x32ec>
   1437c:	ldr	r0, [sp, #124]	; 0x7c
   14380:	bl	10e30 <iswprint@plt>
   14384:	add	r7, r7, r8
   14388:	cmp	r0, #0
   1438c:	add	r0, sp, #128	; 0x80
   14390:	moveq	r5, #0
   14394:	bl	10dd0 <mbsinit@plt>
   14398:	cmp	r0, #0
   1439c:	beq	14278 <__assert_fail@plt+0x328c>
   143a0:	ldr	r4, [sp, #32]
   143a4:	str	r5, [sp, #32]
   143a8:	ldr	r3, [sp, #32]
   143ac:	mov	r1, r7
   143b0:	eor	r3, r3, #1
   143b4:	ldr	r7, [sp, #104]	; 0x68
   143b8:	ldr	r6, [sp, #108]	; 0x6c
   143bc:	ldr	r8, [sp, #112]	; 0x70
   143c0:	ldr	r5, [sp, #116]	; 0x74
   143c4:	uxtb	r3, r3
   143c8:	cmp	r1, #1
   143cc:	bls	14088 <__assert_fail@plt+0x309c>
   143d0:	ldr	r2, [sp, #56]	; 0x38
   143d4:	and	r3, r3, r2
   143d8:	uxtb	r3, r3
   143dc:	b	14098 <__assert_fail@plt+0x30ac>
   143e0:	mov	r3, #2
   143e4:	str	r3, [sp, #176]	; 0xb0
   143e8:	ldr	r2, [sp, #64]	; 0x40
   143ec:	ldr	r3, [sp, #56]	; 0x38
   143f0:	mov	sl, r9
   143f4:	mov	r9, fp
   143f8:	and	r3, r3, r2
   143fc:	tst	r3, #255	; 0xff
   14400:	ldr	r3, [sp, #176]	; 0xb0
   14404:	movne	r3, #4
   14408:	str	r3, [sp, #176]	; 0xb0
   1440c:	ldr	r3, [sp, #180]	; 0xb4
   14410:	mov	ip, #0
   14414:	bic	r3, r3, #2
   14418:	str	r3, [sp, #4]
   1441c:	ldr	r3, [sp, #192]	; 0xc0
   14420:	ldr	r2, [sp, #44]	; 0x2c
   14424:	str	r3, [sp, #16]
   14428:	ldr	r3, [sp, #188]	; 0xbc
   1442c:	mov	r1, r9
   14430:	str	r3, [sp, #12]
   14434:	ldr	r3, [sp, #176]	; 0xb0
   14438:	mov	r0, sl
   1443c:	str	r3, [sp]
   14440:	str	ip, [sp, #8]
   14444:	ldr	r3, [sp, #24]
   14448:	bl	132a8 <__assert_fail@plt+0x22bc>
   1444c:	mov	fp, r0
   14450:	mov	r0, fp
   14454:	add	sp, sp, #140	; 0x8c
   14458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1445c:	mov	r4, #92	; 0x5c
   14460:	mov	r1, #0
   14464:	mov	r3, r4
   14468:	b	13a5c <__assert_fail@plt+0x2a70>
   1446c:	mov	r3, #0
   14470:	ldr	r1, [sp, #52]	; 0x34
   14474:	str	r3, [sp, #32]
   14478:	mov	r4, #63	; 0x3f
   1447c:	b	1387c <__assert_fail@plt+0x2890>
   14480:	cmp	fp, #0
   14484:	beq	144e0 <__assert_fail@plt+0x34f4>
   14488:	mov	r3, #39	; 0x27
   1448c:	strb	r3, [r9]
   14490:	mov	r3, #0
   14494:	str	r3, [sp, #40]	; 0x28
   14498:	mov	r3, #1
   1449c:	str	r3, [sp, #68]	; 0x44
   144a0:	ldr	r3, [pc, #448]	; 14668 <__assert_fail@plt+0x367c>
   144a4:	mov	r8, #1
   144a8:	str	r3, [sp, #72]	; 0x48
   144ac:	b	13690 <__assert_fail@plt+0x26a4>
   144b0:	ldr	r3, [sp, #40]	; 0x28
   144b4:	mov	sl, r9
   144b8:	str	r3, [sp, #56]	; 0x38
   144bc:	mov	r9, fp
   144c0:	ldr	r2, [sp, #64]	; 0x40
   144c4:	b	143f8 <__assert_fail@plt+0x340c>
   144c8:	str	r2, [sp, #36]	; 0x24
   144cc:	b	138e0 <__assert_fail@plt+0x28f4>
   144d0:	mov	r1, #0
   144d4:	str	r3, [sp, #32]
   144d8:	mov	r4, #63	; 0x3f
   144dc:	b	1387c <__assert_fail@plt+0x2890>
   144e0:	ldr	r3, [pc, #384]	; 14668 <__assert_fail@plt+0x367c>
   144e4:	str	r3, [sp, #72]	; 0x48
   144e8:	mov	r3, #0
   144ec:	str	r3, [sp, #40]	; 0x28
   144f0:	mov	r3, #1
   144f4:	str	r3, [sp, #68]	; 0x44
   144f8:	mov	r8, r3
   144fc:	b	13690 <__assert_fail@plt+0x26a4>
   14500:	bl	10fd4 <abort@plt>
   14504:	cmp	fp, #0
   14508:	beq	14568 <__assert_fail@plt+0x357c>
   1450c:	mov	r2, #1
   14510:	mov	r3, #34	; 0x22
   14514:	strb	r3, [r9]
   14518:	mov	r8, r2
   1451c:	mov	r3, r2
   14520:	str	r2, [sp, #68]	; 0x44
   14524:	str	r3, [sp, #56]	; 0x38
   14528:	ldr	r3, [pc, #316]	; 1466c <__assert_fail@plt+0x3680>
   1452c:	ldr	r1, [sp, #56]	; 0x38
   14530:	str	r3, [sp, #72]	; 0x48
   14534:	ldr	r2, [sp, #176]	; 0xb0
   14538:	ldr	ip, [sp, #40]	; 0x28
   1453c:	ldr	lr, [sp, #176]	; 0xb0
   14540:	b	13374 <__assert_fail@plt+0x2388>
   14544:	ldr	r0, [sp, #44]	; 0x2c
   14548:	bl	10f08 <strlen@plt>
   1454c:	str	r0, [sp, #24]
   14550:	b	14254 <__assert_fail@plt+0x3268>
   14554:	mov	r7, #0
   14558:	ldr	r1, [sp, #52]	; 0x34
   1455c:	str	r3, [sp, #32]
   14560:	mov	r4, #48	; 0x30
   14564:	b	1387c <__assert_fail@plt+0x2890>
   14568:	mov	r3, #1
   1456c:	str	r3, [sp, #68]	; 0x44
   14570:	mov	r8, r3
   14574:	b	14524 <__assert_fail@plt+0x3538>
   14578:	mov	r3, #2
   1457c:	mov	sl, r9
   14580:	str	r3, [sp, #176]	; 0xb0
   14584:	mov	r9, fp
   14588:	ldr	r3, [sp, #56]	; 0x38
   1458c:	b	143f8 <__assert_fail@plt+0x340c>
   14590:	ldr	r6, [sp, #48]	; 0x30
   14594:	b	14044 <__assert_fail@plt+0x3058>
   14598:	ldr	r0, [sp, #24]
   1459c:	mov	ip, r6
   145a0:	cmp	r0, ip
   145a4:	mov	r1, r7
   145a8:	mov	r2, r4
   145ac:	ldr	r7, [sp, #104]	; 0x68
   145b0:	ldr	r4, [sp, #32]
   145b4:	ldr	r6, [sp, #108]	; 0x6c
   145b8:	ldr	r8, [sp, #112]	; 0x70
   145bc:	ldr	r5, [sp, #116]	; 0x74
   145c0:	bls	145f0 <__assert_fail@plt+0x3604>
   145c4:	ldrb	r3, [r2]
   145c8:	cmp	r3, #0
   145cc:	bne	145e0 <__assert_fail@plt+0x35f4>
   145d0:	b	14700 <__assert_fail@plt+0x3714>
   145d4:	ldrb	r3, [r2, #1]!
   145d8:	cmp	r3, #0
   145dc:	beq	14700 <__assert_fail@plt+0x3714>
   145e0:	add	r1, r1, #1
   145e4:	add	r3, sl, r1
   145e8:	cmp	r0, r3
   145ec:	bhi	145d4 <__assert_fail@plt+0x35e8>
   145f0:	mov	r2, #0
   145f4:	mov	r3, r7
   145f8:	str	r2, [sp, #32]
   145fc:	b	143c8 <__assert_fail@plt+0x33dc>
   14600:	mov	r1, r7
   14604:	ldr	r7, [sp, #104]	; 0x68
   14608:	mov	r2, #0
   1460c:	ldr	r4, [sp, #32]
   14610:	ldr	r6, [sp, #108]	; 0x6c
   14614:	ldr	r8, [sp, #112]	; 0x70
   14618:	ldr	r5, [sp, #116]	; 0x74
   1461c:	mov	r3, r7
   14620:	str	r2, [sp, #32]
   14624:	b	143c8 <__assert_fail@plt+0x33dc>
   14628:	mov	r3, r5
   1462c:	eor	r3, r3, #1
   14630:	ldr	r4, [sp, #32]
   14634:	mov	r1, r7
   14638:	str	r5, [sp, #32]
   1463c:	ldr	r7, [sp, #104]	; 0x68
   14640:	ldr	r6, [sp, #108]	; 0x6c
   14644:	ldr	r8, [sp, #112]	; 0x70
   14648:	ldr	r5, [sp, #116]	; 0x74
   1464c:	uxtb	r3, r3
   14650:	b	143c8 <__assert_fail@plt+0x33dc>
   14654:	mov	sl, r9
   14658:	str	r3, [sp, #56]	; 0x38
   1465c:	mov	r9, fp
   14660:	ldr	r2, [sp, #64]	; 0x40
   14664:	b	143f8 <__assert_fail@plt+0x340c>
   14668:	andeq	sl, r1, r8, asr r4
   1466c:	andeq	sl, r1, r4, asr r4
   14670:	andeq	sl, r1, ip, asr r4
   14674:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   14678:	ldr	r2, [sp, #44]	; 0x2c
   1467c:	ldrb	r1, [r2, r3]
   14680:	sub	r2, r1, #33	; 0x21
   14684:	uxtb	r2, r2
   14688:	cmp	r2, #29
   1468c:	bhi	1470c <__assert_fail@plt+0x3720>
   14690:	ldr	r0, [pc, #-36]	; 14674 <__assert_fail@plt+0x3688>
   14694:	mov	ip, #1
   14698:	ands	r2, r0, ip, lsl r2
   1469c:	beq	1472c <__assert_fail@plt+0x3740>
   146a0:	ldr	r2, [sp, #40]	; 0x28
   146a4:	cmp	r2, #0
   146a8:	bne	14820 <__assert_fail@plt+0x3834>
   146ac:	add	r2, r8, #1
   146b0:	cmp	fp, r8
   146b4:	strbhi	r4, [r9, r8]
   146b8:	cmp	fp, r2
   146bc:	movhi	r0, #34	; 0x22
   146c0:	strbhi	r0, [r9, r2]
   146c4:	add	r2, r8, #2
   146c8:	cmp	fp, r2
   146cc:	movhi	r0, #34	; 0x22
   146d0:	strbhi	r0, [r9, r2]
   146d4:	add	r2, r8, #3
   146d8:	cmp	fp, r2
   146dc:	mov	sl, r3
   146e0:	ldr	r3, [sp, #40]	; 0x28
   146e4:	movhi	r0, #63	; 0x3f
   146e8:	mov	r4, r1
   146ec:	strbhi	r0, [r9, r2]
   146f0:	add	r8, r8, #4
   146f4:	mov	r1, r3
   146f8:	str	r3, [sp, #32]
   146fc:	b	1387c <__assert_fail@plt+0x2890>
   14700:	str	r3, [sp, #32]
   14704:	mov	r3, r7
   14708:	b	143c8 <__assert_fail@plt+0x33dc>
   1470c:	mov	r1, #0
   14710:	str	r1, [sp, #32]
   14714:	b	1387c <__assert_fail@plt+0x2890>
   14718:	mov	sl, r9
   1471c:	ldr	r3, [sp, #56]	; 0x38
   14720:	mov	r9, fp
   14724:	ldr	r2, [sp, #64]	; 0x40
   14728:	b	143f8 <__assert_fail@plt+0x340c>
   1472c:	str	r2, [sp, #32]
   14730:	mov	r1, #0
   14734:	b	1387c <__assert_fail@plt+0x2890>
   14738:	ldr	r2, [sp, #76]	; 0x4c
   1473c:	mov	sl, r9
   14740:	mov	r9, fp
   14744:	mov	fp, r8
   14748:	ldr	r1, [sp, #72]	; 0x48
   1474c:	cmp	r1, #0
   14750:	moveq	r3, #0
   14754:	andne	r3, r2, #1
   14758:	cmp	r3, #0
   1475c:	beq	14788 <__assert_fail@plt+0x379c>
   14760:	ldrb	r3, [r1]
   14764:	cmp	r3, #0
   14768:	beq	14788 <__assert_fail@plt+0x379c>
   1476c:	mov	r2, r1
   14770:	cmp	r9, fp
   14774:	strbhi	r3, [sl, fp]
   14778:	ldrb	r3, [r2, #1]!
   1477c:	add	fp, fp, #1
   14780:	cmp	r3, #0
   14784:	bne	14770 <__assert_fail@plt+0x3784>
   14788:	cmp	r9, fp
   1478c:	movhi	r3, #0
   14790:	strbhi	r3, [sl, fp]
   14794:	b	14450 <__assert_fail@plt+0x3464>
   14798:	ldr	r3, [sp, #192]	; 0xc0
   1479c:	mov	ip, #5
   147a0:	str	r3, [sp, #16]
   147a4:	ldr	r3, [sp, #188]	; 0xbc
   147a8:	ldr	r2, [sp, #44]	; 0x2c
   147ac:	str	r3, [sp, #12]
   147b0:	ldr	r3, [sp, #184]	; 0xb8
   147b4:	ldr	r1, [sp, #84]	; 0x54
   147b8:	str	r3, [sp, #8]
   147bc:	ldr	r3, [sp, #180]	; 0xb4
   147c0:	mov	r0, r9
   147c4:	str	r3, [sp, #4]
   147c8:	str	ip, [sp]
   147cc:	ldr	r3, [sp, #24]
   147d0:	bl	132a8 <__assert_fail@plt+0x22bc>
   147d4:	mov	fp, r0
   147d8:	b	14450 <__assert_fail@plt+0x3464>
   147dc:	mov	sl, r9
   147e0:	mov	r9, fp
   147e4:	mov	fp, r8
   147e8:	b	14748 <__assert_fail@plt+0x375c>
   147ec:	ldr	r1, [sp, #176]	; 0xb0
   147f0:	bl	13188 <__assert_fail@plt+0x219c>
   147f4:	str	r0, [sp, #192]	; 0xc0
   147f8:	b	13764 <__assert_fail@plt+0x2778>
   147fc:	ldr	r1, [sp, #176]	; 0xb0
   14800:	bl	13188 <__assert_fail@plt+0x219c>
   14804:	str	r0, [sp, #188]	; 0xbc
   14808:	b	13744 <__assert_fail@plt+0x2758>
   1480c:	mov	sl, r9
   14810:	mov	r2, r3
   14814:	mov	r9, fp
   14818:	mov	fp, r8
   1481c:	b	14748 <__assert_fail@plt+0x375c>
   14820:	mov	sl, r9
   14824:	mov	r9, fp
   14828:	b	1440c <__assert_fail@plt+0x3420>
   1482c:	push	{r4, r5, r6, lr}
   14830:	mov	r5, r0
   14834:	bl	10f20 <__errno_location@plt>
   14838:	cmp	r5, #0
   1483c:	mov	r1, #48	; 0x30
   14840:	mov	r4, r0
   14844:	ldr	r0, [pc, #16]	; 1485c <__assert_fail@plt+0x3870>
   14848:	ldr	r6, [r4]
   1484c:	movne	r0, r5
   14850:	bl	180c8 <__assert_fail@plt+0x70dc>
   14854:	str	r6, [r4]
   14858:	pop	{r4, r5, r6, pc}
   1485c:	muleq	r2, ip, r1
   14860:	ldr	r3, [pc, #12]	; 14874 <__assert_fail@plt+0x3888>
   14864:	cmp	r0, #0
   14868:	moveq	r0, r3
   1486c:	ldr	r0, [r0]
   14870:	bx	lr
   14874:	muleq	r2, ip, r1
   14878:	ldr	r3, [pc, #12]	; 1488c <__assert_fail@plt+0x38a0>
   1487c:	cmp	r0, #0
   14880:	moveq	r0, r3
   14884:	str	r1, [r0]
   14888:	bx	lr
   1488c:	muleq	r2, ip, r1
   14890:	ldr	r3, [pc, #52]	; 148cc <__assert_fail@plt+0x38e0>
   14894:	cmp	r0, #0
   14898:	moveq	r0, r3
   1489c:	add	r3, r0, #8
   148a0:	push	{lr}		; (str lr, [sp, #-4]!)
   148a4:	lsr	lr, r1, #5
   148a8:	and	r1, r1, #31
   148ac:	ldr	ip, [r3, lr, lsl #2]
   148b0:	lsr	r0, ip, r1
   148b4:	eor	r2, r2, r0
   148b8:	and	r2, r2, #1
   148bc:	and	r0, r0, #1
   148c0:	eor	r1, ip, r2, lsl r1
   148c4:	str	r1, [r3, lr, lsl #2]
   148c8:	pop	{pc}		; (ldr pc, [sp], #4)
   148cc:	muleq	r2, ip, r1
   148d0:	ldr	r3, [pc, #16]	; 148e8 <__assert_fail@plt+0x38fc>
   148d4:	cmp	r0, #0
   148d8:	movne	r3, r0
   148dc:	ldr	r0, [r3, #4]
   148e0:	str	r1, [r3, #4]
   148e4:	bx	lr
   148e8:	muleq	r2, ip, r1
   148ec:	ldr	r3, [pc, #44]	; 14920 <__assert_fail@plt+0x3934>
   148f0:	cmp	r0, #0
   148f4:	moveq	r0, r3
   148f8:	mov	ip, #10
   148fc:	cmp	r2, #0
   14900:	cmpne	r1, #0
   14904:	str	ip, [r0]
   14908:	beq	14918 <__assert_fail@plt+0x392c>
   1490c:	str	r1, [r0, #40]	; 0x28
   14910:	str	r2, [r0, #44]	; 0x2c
   14914:	bx	lr
   14918:	push	{r4, lr}
   1491c:	bl	10fd4 <abort@plt>
   14920:	muleq	r2, ip, r1
   14924:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14928:	sub	sp, sp, #24
   1492c:	ldr	ip, [pc, #108]	; 149a0 <__assert_fail@plt+0x39b4>
   14930:	ldr	r4, [sp, #56]	; 0x38
   14934:	mov	r9, r2
   14938:	cmp	r4, #0
   1493c:	moveq	r4, ip
   14940:	mov	sl, r3
   14944:	mov	r7, r0
   14948:	mov	r8, r1
   1494c:	bl	10f20 <__errno_location@plt>
   14950:	ldr	r3, [r4, #44]	; 0x2c
   14954:	mov	r1, r8
   14958:	ldr	r6, [r0]
   1495c:	str	r3, [sp, #16]
   14960:	ldr	r2, [r4, #40]	; 0x28
   14964:	add	r3, r4, #8
   14968:	str	r3, [sp, #8]
   1496c:	str	r2, [sp, #12]
   14970:	ldr	r2, [r4, #4]
   14974:	mov	r5, r0
   14978:	str	r2, [sp, #4]
   1497c:	ldr	ip, [r4]
   14980:	mov	r3, sl
   14984:	mov	r2, r9
   14988:	mov	r0, r7
   1498c:	str	ip, [sp]
   14990:	bl	132a8 <__assert_fail@plt+0x22bc>
   14994:	str	r6, [r5]
   14998:	add	sp, sp, #24
   1499c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   149a0:	muleq	r2, ip, r1
   149a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149a8:	cmp	r2, #0
   149ac:	sub	sp, sp, #36	; 0x24
   149b0:	ldr	r4, [pc, #164]	; 14a5c <__assert_fail@plt+0x3a70>
   149b4:	mov	r8, r1
   149b8:	movne	r4, r2
   149bc:	mov	r7, r0
   149c0:	bl	10f20 <__errno_location@plt>
   149c4:	ldr	r3, [r4, #44]	; 0x2c
   149c8:	ldr	r5, [r4, #4]
   149cc:	add	r9, r4, #8
   149d0:	orr	r5, r5, #1
   149d4:	mov	r1, #0
   149d8:	mov	r2, r7
   149dc:	ldr	fp, [r0]
   149e0:	str	r3, [sp, #16]
   149e4:	ldr	r3, [r4, #40]	; 0x28
   149e8:	stmib	sp, {r5, r9}
   149ec:	str	r3, [sp, #12]
   149f0:	ldr	r3, [r4]
   149f4:	mov	r6, r0
   149f8:	str	r3, [sp]
   149fc:	mov	r0, r1
   14a00:	mov	r3, r8
   14a04:	bl	132a8 <__assert_fail@plt+0x22bc>
   14a08:	add	r1, r0, #1
   14a0c:	mov	r0, r1
   14a10:	str	r1, [sp, #28]
   14a14:	bl	17b84 <__assert_fail@plt+0x6b98>
   14a18:	ldr	r3, [r4, #44]	; 0x2c
   14a1c:	ldr	r1, [sp, #28]
   14a20:	str	r3, [sp, #16]
   14a24:	ldr	r3, [r4, #40]	; 0x28
   14a28:	str	r5, [sp, #4]
   14a2c:	str	r3, [sp, #12]
   14a30:	str	r9, [sp, #8]
   14a34:	ldr	ip, [r4]
   14a38:	mov	r3, r8
   14a3c:	mov	r2, r7
   14a40:	str	ip, [sp]
   14a44:	mov	sl, r0
   14a48:	bl	132a8 <__assert_fail@plt+0x22bc>
   14a4c:	mov	r0, sl
   14a50:	str	fp, [r6]
   14a54:	add	sp, sp, #36	; 0x24
   14a58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a5c:	muleq	r2, ip, r1
   14a60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a64:	cmp	r3, #0
   14a68:	sub	sp, sp, #44	; 0x2c
   14a6c:	ldr	r4, [pc, #192]	; 14b34 <__assert_fail@plt+0x3b48>
   14a70:	mov	r6, r2
   14a74:	movne	r4, r3
   14a78:	mov	r9, r1
   14a7c:	mov	r8, r0
   14a80:	bl	10f20 <__errno_location@plt>
   14a84:	ldr	r3, [r4, #44]	; 0x2c
   14a88:	ldr	r5, [r4, #4]
   14a8c:	add	sl, r4, #8
   14a90:	cmp	r6, #0
   14a94:	orreq	r5, r5, #1
   14a98:	mov	r1, #0
   14a9c:	ldr	r2, [r0]
   14aa0:	str	r3, [sp, #16]
   14aa4:	ldr	r3, [r4, #40]	; 0x28
   14aa8:	stmib	sp, {r5, sl}
   14aac:	str	r3, [sp, #12]
   14ab0:	ldr	r3, [r4]
   14ab4:	mov	r7, r0
   14ab8:	str	r2, [sp, #28]
   14abc:	str	r3, [sp]
   14ac0:	mov	r2, r8
   14ac4:	mov	r3, r9
   14ac8:	mov	r0, r1
   14acc:	bl	132a8 <__assert_fail@plt+0x22bc>
   14ad0:	add	r1, r0, #1
   14ad4:	mov	fp, r0
   14ad8:	mov	r0, r1
   14adc:	str	r1, [sp, #36]	; 0x24
   14ae0:	bl	17b84 <__assert_fail@plt+0x6b98>
   14ae4:	ldr	r3, [r4, #44]	; 0x2c
   14ae8:	mov	r2, r8
   14aec:	str	r3, [sp, #16]
   14af0:	ldr	r3, [r4, #40]	; 0x28
   14af4:	str	r5, [sp, #4]
   14af8:	str	r3, [sp, #12]
   14afc:	str	sl, [sp, #8]
   14b00:	ldr	ip, [r4]
   14b04:	ldr	r1, [sp, #36]	; 0x24
   14b08:	mov	r3, r9
   14b0c:	str	ip, [sp]
   14b10:	str	r0, [sp, #32]
   14b14:	bl	132a8 <__assert_fail@plt+0x22bc>
   14b18:	ldr	r2, [sp, #28]
   14b1c:	cmp	r6, #0
   14b20:	str	r2, [r7]
   14b24:	ldr	r0, [sp, #32]
   14b28:	strne	fp, [r6]
   14b2c:	add	sp, sp, #44	; 0x2c
   14b30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b34:	muleq	r2, ip, r1
   14b38:	push	{r4, r5, r6, r7, r8, lr}
   14b3c:	ldr	r6, [pc, #116]	; 14bb8 <__assert_fail@plt+0x3bcc>
   14b40:	ldr	r3, [r6, #4]
   14b44:	ldr	r7, [r6]
   14b48:	cmp	r3, #1
   14b4c:	movgt	r5, r7
   14b50:	movgt	r4, #1
   14b54:	ble	14b74 <__assert_fail@plt+0x3b88>
   14b58:	ldr	r0, [r5, #12]
   14b5c:	bl	12ad4 <__assert_fail@plt+0x1ae8>
   14b60:	ldr	r3, [r6, #4]
   14b64:	add	r4, r4, #1
   14b68:	cmp	r3, r4
   14b6c:	add	r5, r5, #8
   14b70:	bgt	14b58 <__assert_fail@plt+0x3b6c>
   14b74:	ldr	r0, [r7, #4]
   14b78:	ldr	r4, [pc, #60]	; 14bbc <__assert_fail@plt+0x3bd0>
   14b7c:	cmp	r0, r4
   14b80:	beq	14b94 <__assert_fail@plt+0x3ba8>
   14b84:	bl	12ad4 <__assert_fail@plt+0x1ae8>
   14b88:	mov	r3, #256	; 0x100
   14b8c:	str	r4, [r6, #12]
   14b90:	str	r3, [r6, #8]
   14b94:	ldr	r4, [pc, #36]	; 14bc0 <__assert_fail@plt+0x3bd4>
   14b98:	cmp	r7, r4
   14b9c:	beq	14bac <__assert_fail@plt+0x3bc0>
   14ba0:	mov	r0, r7
   14ba4:	bl	12ad4 <__assert_fail@plt+0x1ae8>
   14ba8:	str	r4, [r6]
   14bac:	mov	r3, #1
   14bb0:	str	r3, [r6, #4]
   14bb4:	pop	{r4, r5, r6, r7, r8, pc}
   14bb8:	andeq	fp, r2, r8, lsl #2
   14bbc:	andeq	fp, r2, ip, asr #3
   14bc0:	andeq	fp, r2, r0, lsl r1
   14bc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bc8:	sub	sp, sp, #44	; 0x2c
   14bcc:	mov	r5, r0
   14bd0:	mov	sl, r1
   14bd4:	bl	10f20 <__errno_location@plt>
   14bd8:	ldr	r4, [pc, #400]	; 14d70 <__assert_fail@plt+0x3d84>
   14bdc:	cmn	r5, #-2147483647	; 0x80000001
   14be0:	ldr	r6, [r4]
   14be4:	mov	r8, r0
   14be8:	movne	r0, #0
   14bec:	moveq	r0, #1
   14bf0:	ldr	r3, [r8]
   14bf4:	orrs	r0, r0, r5, lsr #31
   14bf8:	str	r3, [sp, #24]
   14bfc:	bne	14d6c <__assert_fail@plt+0x3d80>
   14c00:	ldr	r2, [r4, #4]
   14c04:	cmp	r5, r2
   14c08:	blt	14c68 <__assert_fail@plt+0x3c7c>
   14c0c:	add	r7, r4, #8
   14c10:	cmp	r6, r7
   14c14:	str	r2, [sp, #36]	; 0x24
   14c18:	beq	14d3c <__assert_fail@plt+0x3d50>
   14c1c:	mov	r3, #8
   14c20:	sub	r2, r5, r2
   14c24:	mov	r0, r6
   14c28:	str	r3, [sp]
   14c2c:	add	r2, r2, #1
   14c30:	mvn	r3, #-2147483648	; 0x80000000
   14c34:	add	r1, sp, #36	; 0x24
   14c38:	bl	17da0 <__assert_fail@plt+0x6db4>
   14c3c:	mov	r6, r0
   14c40:	str	r0, [r4]
   14c44:	ldr	r0, [r4, #4]
   14c48:	ldr	r2, [sp, #36]	; 0x24
   14c4c:	mov	r1, #0
   14c50:	sub	r2, r2, r0
   14c54:	add	r0, r6, r0, lsl #3
   14c58:	lsl	r2, r2, #3
   14c5c:	bl	10f38 <memset@plt>
   14c60:	ldr	r3, [sp, #36]	; 0x24
   14c64:	str	r3, [r4, #4]
   14c68:	ldr	r4, [pc, #260]	; 14d74 <__assert_fail@plt+0x3d88>
   14c6c:	add	fp, r6, r5, lsl #3
   14c70:	ldr	r9, [r6, r5, lsl #3]
   14c74:	ldr	r0, [r4, #4]
   14c78:	ldr	r3, [r4]
   14c7c:	ldr	r7, [fp, #4]
   14c80:	ldr	r1, [r4, #44]	; 0x2c
   14c84:	ldr	r2, [r4, #40]	; 0x28
   14c88:	orr	r0, r0, #1
   14c8c:	str	r3, [sp]
   14c90:	add	r3, r4, #8
   14c94:	str	r0, [sp, #28]
   14c98:	str	r0, [sp, #4]
   14c9c:	str	r1, [sp, #16]
   14ca0:	str	r2, [sp, #12]
   14ca4:	str	r3, [sp, #8]
   14ca8:	mov	r0, r7
   14cac:	mov	r1, r9
   14cb0:	mvn	r3, #0
   14cb4:	mov	r2, sl
   14cb8:	bl	132a8 <__assert_fail@plt+0x22bc>
   14cbc:	cmp	r9, r0
   14cc0:	bhi	14d28 <__assert_fail@plt+0x3d3c>
   14cc4:	add	r3, r4, #48	; 0x30
   14cc8:	add	r9, r0, #1
   14ccc:	cmp	r7, r3
   14cd0:	str	r9, [r6, r5, lsl #3]
   14cd4:	beq	14ce0 <__assert_fail@plt+0x3cf4>
   14cd8:	mov	r0, r7
   14cdc:	bl	12ad4 <__assert_fail@plt+0x1ae8>
   14ce0:	mov	r0, r9
   14ce4:	bl	17b84 <__assert_fail@plt+0x6b98>
   14ce8:	ldr	ip, [r4, #44]	; 0x2c
   14cec:	ldr	r3, [r4]
   14cf0:	ldr	lr, [r4, #40]	; 0x28
   14cf4:	ldr	r4, [pc, #124]	; 14d78 <__assert_fail@plt+0x3d8c>
   14cf8:	mov	r2, sl
   14cfc:	mov	r1, r9
   14d00:	str	r0, [fp, #4]
   14d04:	str	r4, [sp, #8]
   14d08:	ldr	r4, [sp, #28]
   14d0c:	str	r3, [sp]
   14d10:	str	r4, [sp, #4]
   14d14:	str	ip, [sp, #16]
   14d18:	str	lr, [sp, #12]
   14d1c:	mvn	r3, #0
   14d20:	mov	r7, r0
   14d24:	bl	132a8 <__assert_fail@plt+0x22bc>
   14d28:	ldr	r3, [sp, #24]
   14d2c:	mov	r0, r7
   14d30:	str	r3, [r8]
   14d34:	add	sp, sp, #44	; 0x2c
   14d38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d3c:	mov	r3, #8
   14d40:	sub	r2, r5, r2
   14d44:	str	r3, [sp]
   14d48:	add	r1, sp, #36	; 0x24
   14d4c:	add	r2, r2, #1
   14d50:	mvn	r3, #-2147483648	; 0x80000000
   14d54:	bl	17da0 <__assert_fail@plt+0x6db4>
   14d58:	mov	r6, r0
   14d5c:	ldm	r7, {r0, r1}
   14d60:	str	r6, [r4]
   14d64:	stm	r6, {r0, r1}
   14d68:	b	14c44 <__assert_fail@plt+0x3c58>
   14d6c:	bl	10fd4 <abort@plt>
   14d70:	andeq	fp, r2, r8, lsl #2
   14d74:	muleq	r2, ip, r1
   14d78:	andeq	fp, r2, r4, lsr #3
   14d7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d80:	sub	sp, sp, #52	; 0x34
   14d84:	mov	r5, r0
   14d88:	mov	sl, r1
   14d8c:	mov	fp, r2
   14d90:	bl	10f20 <__errno_location@plt>
   14d94:	ldr	r4, [pc, #408]	; 14f34 <__assert_fail@plt+0x3f48>
   14d98:	cmn	r5, #-2147483647	; 0x80000001
   14d9c:	ldr	r6, [r4]
   14da0:	mov	r8, r0
   14da4:	movne	r0, #0
   14da8:	moveq	r0, #1
   14dac:	ldr	r3, [r8]
   14db0:	orrs	r0, r0, r5, lsr #31
   14db4:	str	r3, [sp, #28]
   14db8:	bne	14f30 <__assert_fail@plt+0x3f44>
   14dbc:	ldr	r2, [r4, #4]
   14dc0:	cmp	r5, r2
   14dc4:	blt	14e24 <__assert_fail@plt+0x3e38>
   14dc8:	add	r7, r4, #8
   14dcc:	cmp	r6, r7
   14dd0:	str	r2, [sp, #44]	; 0x2c
   14dd4:	beq	14f00 <__assert_fail@plt+0x3f14>
   14dd8:	mov	r3, #8
   14ddc:	sub	r2, r5, r2
   14de0:	mov	r0, r6
   14de4:	str	r3, [sp]
   14de8:	add	r2, r2, #1
   14dec:	mvn	r3, #-2147483648	; 0x80000000
   14df0:	add	r1, sp, #44	; 0x2c
   14df4:	bl	17da0 <__assert_fail@plt+0x6db4>
   14df8:	mov	r6, r0
   14dfc:	str	r0, [r4]
   14e00:	ldr	r0, [r4, #4]
   14e04:	ldr	r2, [sp, #44]	; 0x2c
   14e08:	mov	r1, #0
   14e0c:	sub	r2, r2, r0
   14e10:	add	r0, r6, r0, lsl #3
   14e14:	lsl	r2, r2, #3
   14e18:	bl	10f38 <memset@plt>
   14e1c:	ldr	r3, [sp, #44]	; 0x2c
   14e20:	str	r3, [r4, #4]
   14e24:	ldr	r4, [pc, #268]	; 14f38 <__assert_fail@plt+0x3f4c>
   14e28:	add	r3, r6, r5, lsl #3
   14e2c:	str	r3, [sp, #32]
   14e30:	ldr	r7, [r3, #4]
   14e34:	ldr	r0, [r4, #4]
   14e38:	ldr	r3, [r4]
   14e3c:	ldr	r9, [r6, r5, lsl #3]
   14e40:	ldr	r1, [r4, #44]	; 0x2c
   14e44:	ldr	r2, [r4, #40]	; 0x28
   14e48:	orr	r0, r0, #1
   14e4c:	str	r3, [sp]
   14e50:	add	r3, r4, #8
   14e54:	str	r0, [sp, #36]	; 0x24
   14e58:	str	r0, [sp, #4]
   14e5c:	str	r1, [sp, #16]
   14e60:	str	r2, [sp, #12]
   14e64:	str	r3, [sp, #8]
   14e68:	mov	r0, r7
   14e6c:	mov	r1, r9
   14e70:	mov	r3, fp
   14e74:	mov	r2, sl
   14e78:	bl	132a8 <__assert_fail@plt+0x22bc>
   14e7c:	cmp	r9, r0
   14e80:	bhi	14eec <__assert_fail@plt+0x3f00>
   14e84:	add	r3, r4, #48	; 0x30
   14e88:	add	r9, r0, #1
   14e8c:	cmp	r7, r3
   14e90:	str	r9, [r6, r5, lsl #3]
   14e94:	beq	14ea0 <__assert_fail@plt+0x3eb4>
   14e98:	mov	r0, r7
   14e9c:	bl	12ad4 <__assert_fail@plt+0x1ae8>
   14ea0:	mov	r0, r9
   14ea4:	bl	17b84 <__assert_fail@plt+0x6b98>
   14ea8:	ldr	ip, [sp, #32]
   14eac:	ldr	lr, [r4, #44]	; 0x2c
   14eb0:	ldr	r5, [r4, #40]	; 0x28
   14eb4:	mov	r3, fp
   14eb8:	mov	r2, sl
   14ebc:	mov	r1, r9
   14ec0:	str	r0, [ip, #4]
   14ec4:	ldr	ip, [r4]
   14ec8:	ldr	r4, [pc, #108]	; 14f3c <__assert_fail@plt+0x3f50>
   14ecc:	str	lr, [sp, #16]
   14ed0:	str	r4, [sp, #8]
   14ed4:	ldr	r4, [sp, #36]	; 0x24
   14ed8:	str	r5, [sp, #12]
   14edc:	str	r4, [sp, #4]
   14ee0:	str	ip, [sp]
   14ee4:	mov	r7, r0
   14ee8:	bl	132a8 <__assert_fail@plt+0x22bc>
   14eec:	ldr	r3, [sp, #28]
   14ef0:	mov	r0, r7
   14ef4:	str	r3, [r8]
   14ef8:	add	sp, sp, #52	; 0x34
   14efc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f00:	mov	r3, #8
   14f04:	sub	r2, r5, r2
   14f08:	str	r3, [sp]
   14f0c:	add	r1, sp, #44	; 0x2c
   14f10:	add	r2, r2, #1
   14f14:	mvn	r3, #-2147483648	; 0x80000000
   14f18:	bl	17da0 <__assert_fail@plt+0x6db4>
   14f1c:	mov	r6, r0
   14f20:	ldm	r7, {r0, r1}
   14f24:	str	r6, [r4]
   14f28:	stm	r6, {r0, r1}
   14f2c:	b	14e00 <__assert_fail@plt+0x3e14>
   14f30:	bl	10fd4 <abort@plt>
   14f34:	andeq	fp, r2, r8, lsl #2
   14f38:	muleq	r2, ip, r1
   14f3c:	andeq	fp, r2, r4, lsr #3
   14f40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f44:	sub	sp, sp, #44	; 0x2c
   14f48:	mov	sl, r0
   14f4c:	bl	10f20 <__errno_location@plt>
   14f50:	ldr	r4, [pc, #352]	; 150b8 <__assert_fail@plt+0x40cc>
   14f54:	ldr	r2, [r4, #4]
   14f58:	ldr	r5, [r4]
   14f5c:	cmp	r2, #0
   14f60:	ldr	r3, [r0]
   14f64:	mov	r8, r0
   14f68:	str	r3, [sp, #28]
   14f6c:	bgt	14fc8 <__assert_fail@plt+0x3fdc>
   14f70:	add	r6, r4, #8
   14f74:	cmp	r5, r6
   14f78:	str	r2, [sp, #36]	; 0x24
   14f7c:	beq	15088 <__assert_fail@plt+0x409c>
   14f80:	mov	r3, #8
   14f84:	mov	r0, r5
   14f88:	str	r3, [sp]
   14f8c:	rsb	r2, r2, #1
   14f90:	mvn	r3, #-2147483648	; 0x80000000
   14f94:	add	r1, sp, #36	; 0x24
   14f98:	bl	17da0 <__assert_fail@plt+0x6db4>
   14f9c:	mov	r5, r0
   14fa0:	str	r0, [r4]
   14fa4:	ldr	r0, [r4, #4]
   14fa8:	ldr	r2, [sp, #36]	; 0x24
   14fac:	mov	r1, #0
   14fb0:	sub	r2, r2, r0
   14fb4:	add	r0, r5, r0, lsl #3
   14fb8:	lsl	r2, r2, #3
   14fbc:	bl	10f38 <memset@plt>
   14fc0:	ldr	r3, [sp, #36]	; 0x24
   14fc4:	str	r3, [r4, #4]
   14fc8:	ldr	r4, [pc, #236]	; 150bc <__assert_fail@plt+0x40d0>
   14fcc:	ldr	r9, [r5]
   14fd0:	ldr	r6, [r5, #4]
   14fd4:	ldr	r7, [r4, #4]
   14fd8:	ldr	r1, [r4, #44]	; 0x2c
   14fdc:	ldr	r2, [r4, #40]	; 0x28
   14fe0:	ldr	r3, [r4]
   14fe4:	orr	r7, r7, #1
   14fe8:	add	fp, r4, #8
   14fec:	str	r1, [sp, #16]
   14ff0:	str	r2, [sp, #12]
   14ff4:	str	r3, [sp]
   14ff8:	str	r7, [sp, #4]
   14ffc:	str	fp, [sp, #8]
   15000:	mov	r1, r9
   15004:	mov	r0, r6
   15008:	mvn	r3, #0
   1500c:	mov	r2, sl
   15010:	bl	132a8 <__assert_fail@plt+0x22bc>
   15014:	cmp	r9, r0
   15018:	bhi	15074 <__assert_fail@plt+0x4088>
   1501c:	add	r3, r4, #48	; 0x30
   15020:	add	r9, r0, #1
   15024:	cmp	r6, r3
   15028:	str	r9, [r5]
   1502c:	beq	15038 <__assert_fail@plt+0x404c>
   15030:	mov	r0, r6
   15034:	bl	12ad4 <__assert_fail@plt+0x1ae8>
   15038:	mov	r0, r9
   1503c:	bl	17b84 <__assert_fail@plt+0x6b98>
   15040:	ldr	ip, [r4, #44]	; 0x2c
   15044:	ldr	r3, [r4]
   15048:	ldr	lr, [r4, #40]	; 0x28
   1504c:	mov	r2, sl
   15050:	mov	r1, r9
   15054:	str	r0, [r5, #4]
   15058:	str	r3, [sp]
   1505c:	stmib	sp, {r7, fp}
   15060:	str	ip, [sp, #16]
   15064:	str	lr, [sp, #12]
   15068:	mvn	r3, #0
   1506c:	mov	r6, r0
   15070:	bl	132a8 <__assert_fail@plt+0x22bc>
   15074:	ldr	r3, [sp, #28]
   15078:	mov	r0, r6
   1507c:	str	r3, [r8]
   15080:	add	sp, sp, #44	; 0x2c
   15084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15088:	mov	r3, #8
   1508c:	str	r3, [sp]
   15090:	add	r1, sp, #36	; 0x24
   15094:	rsb	r2, r2, #1
   15098:	mvn	r3, #-2147483648	; 0x80000000
   1509c:	mov	r0, #0
   150a0:	bl	17da0 <__assert_fail@plt+0x6db4>
   150a4:	mov	r5, r0
   150a8:	ldm	r6, {r0, r1}
   150ac:	str	r5, [r4]
   150b0:	stm	r5, {r0, r1}
   150b4:	b	14fa4 <__assert_fail@plt+0x3fb8>
   150b8:	andeq	fp, r2, r8, lsl #2
   150bc:	muleq	r2, ip, r1
   150c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150c4:	sub	sp, sp, #44	; 0x2c
   150c8:	mov	r9, r0
   150cc:	mov	sl, r1
   150d0:	bl	10f20 <__errno_location@plt>
   150d4:	ldr	r4, [pc, #364]	; 15248 <__assert_fail@plt+0x425c>
   150d8:	ldr	r2, [r4, #4]
   150dc:	ldr	r5, [r4]
   150e0:	cmp	r2, #0
   150e4:	ldr	r3, [r0]
   150e8:	mov	r7, r0
   150ec:	str	r3, [sp, #24]
   150f0:	bgt	1514c <__assert_fail@plt+0x4160>
   150f4:	add	r6, r4, #8
   150f8:	cmp	r5, r6
   150fc:	str	r2, [sp, #36]	; 0x24
   15100:	beq	15218 <__assert_fail@plt+0x422c>
   15104:	mov	r3, #8
   15108:	mov	r0, r5
   1510c:	str	r3, [sp]
   15110:	rsb	r2, r2, #1
   15114:	mvn	r3, #-2147483648	; 0x80000000
   15118:	add	r1, sp, #36	; 0x24
   1511c:	bl	17da0 <__assert_fail@plt+0x6db4>
   15120:	mov	r5, r0
   15124:	str	r0, [r4]
   15128:	ldr	r0, [r4, #4]
   1512c:	ldr	r2, [sp, #36]	; 0x24
   15130:	mov	r1, #0
   15134:	sub	r2, r2, r0
   15138:	add	r0, r5, r0, lsl #3
   1513c:	lsl	r2, r2, #3
   15140:	bl	10f38 <memset@plt>
   15144:	ldr	r3, [sp, #36]	; 0x24
   15148:	str	r3, [r4, #4]
   1514c:	ldr	r4, [pc, #248]	; 1524c <__assert_fail@plt+0x4260>
   15150:	ldr	r8, [r5]
   15154:	ldr	r6, [r5, #4]
   15158:	ldr	r0, [r4, #4]
   1515c:	ldr	r1, [r4, #44]	; 0x2c
   15160:	ldr	r2, [r4, #40]	; 0x28
   15164:	ldr	r3, [r4]
   15168:	orr	r0, r0, #1
   1516c:	add	fp, r4, #8
   15170:	str	r0, [sp, #28]
   15174:	str	r0, [sp, #4]
   15178:	str	r1, [sp, #16]
   1517c:	str	r2, [sp, #12]
   15180:	str	r3, [sp]
   15184:	str	fp, [sp, #8]
   15188:	mov	r1, r8
   1518c:	mov	r0, r6
   15190:	mov	r3, sl
   15194:	mov	r2, r9
   15198:	bl	132a8 <__assert_fail@plt+0x22bc>
   1519c:	cmp	r8, r0
   151a0:	bhi	15204 <__assert_fail@plt+0x4218>
   151a4:	add	r3, r4, #48	; 0x30
   151a8:	add	r8, r0, #1
   151ac:	cmp	r6, r3
   151b0:	str	r8, [r5]
   151b4:	beq	151c0 <__assert_fail@plt+0x41d4>
   151b8:	mov	r0, r6
   151bc:	bl	12ad4 <__assert_fail@plt+0x1ae8>
   151c0:	mov	r0, r8
   151c4:	bl	17b84 <__assert_fail@plt+0x6b98>
   151c8:	ldr	lr, [r4, #44]	; 0x2c
   151cc:	ldr	ip, [r4]
   151d0:	mov	r3, sl
   151d4:	mov	r2, r9
   151d8:	mov	r1, r8
   151dc:	str	r0, [r5, #4]
   151e0:	ldr	r5, [r4, #40]	; 0x28
   151e4:	ldr	r4, [sp, #28]
   151e8:	str	fp, [sp, #8]
   151ec:	str	r4, [sp, #4]
   151f0:	str	lr, [sp, #16]
   151f4:	str	r5, [sp, #12]
   151f8:	str	ip, [sp]
   151fc:	mov	r6, r0
   15200:	bl	132a8 <__assert_fail@plt+0x22bc>
   15204:	ldr	r3, [sp, #24]
   15208:	mov	r0, r6
   1520c:	str	r3, [r7]
   15210:	add	sp, sp, #44	; 0x2c
   15214:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15218:	mov	r3, #8
   1521c:	str	r3, [sp]
   15220:	add	r1, sp, #36	; 0x24
   15224:	rsb	r2, r2, #1
   15228:	mvn	r3, #-2147483648	; 0x80000000
   1522c:	mov	r0, #0
   15230:	bl	17da0 <__assert_fail@plt+0x6db4>
   15234:	mov	r5, r0
   15238:	ldm	r6, {r0, r1}
   1523c:	str	r5, [r4]
   15240:	stm	r5, {r0, r1}
   15244:	b	15128 <__assert_fail@plt+0x413c>
   15248:	andeq	fp, r2, r8, lsl #2
   1524c:	muleq	r2, ip, r1
   15250:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15254:	sub	sp, sp, #132	; 0x84
   15258:	mov	r5, r1
   1525c:	mov	r4, r0
   15260:	mov	r9, r2
   15264:	add	r0, sp, #80	; 0x50
   15268:	mov	r2, #48	; 0x30
   1526c:	mov	r1, #0
   15270:	bl	10f38 <memset@plt>
   15274:	cmp	r5, #10
   15278:	beq	15430 <__assert_fail@plt+0x4444>
   1527c:	add	lr, sp, #80	; 0x50
   15280:	str	r5, [sp, #80]	; 0x50
   15284:	ldm	lr!, {r0, r1, r2, r3}
   15288:	add	ip, sp, #32
   1528c:	ldr	r6, [pc, #416]	; 15434 <__assert_fail@plt+0x4448>
   15290:	stmia	ip!, {r0, r1, r2, r3}
   15294:	ldm	lr!, {r0, r1, r2, r3}
   15298:	stmia	ip!, {r0, r1, r2, r3}
   1529c:	ldm	lr, {r0, r1, r2, r3}
   152a0:	stm	ip, {r0, r1, r2, r3}
   152a4:	bl	10f20 <__errno_location@plt>
   152a8:	cmn	r4, #-2147483647	; 0x80000001
   152ac:	ldr	r5, [r6]
   152b0:	mov	r7, r0
   152b4:	movne	r0, #0
   152b8:	moveq	r0, #1
   152bc:	ldr	r3, [r7]
   152c0:	orrs	r0, r0, r4, lsr #31
   152c4:	str	r3, [sp, #24]
   152c8:	bne	15430 <__assert_fail@plt+0x4444>
   152cc:	ldr	r2, [r6, #4]
   152d0:	cmp	r4, r2
   152d4:	blt	15334 <__assert_fail@plt+0x4348>
   152d8:	add	r8, r6, #8
   152dc:	cmp	r5, r8
   152e0:	str	r2, [sp, #80]	; 0x50
   152e4:	beq	15400 <__assert_fail@plt+0x4414>
   152e8:	mov	r3, #8
   152ec:	sub	r2, r4, r2
   152f0:	mov	r0, r5
   152f4:	str	r3, [sp]
   152f8:	add	r2, r2, #1
   152fc:	add	r1, sp, #80	; 0x50
   15300:	mvn	r3, #-2147483648	; 0x80000000
   15304:	bl	17da0 <__assert_fail@plt+0x6db4>
   15308:	mov	r5, r0
   1530c:	str	r0, [r6]
   15310:	ldr	r0, [r6, #4]
   15314:	ldr	r2, [sp, #80]	; 0x50
   15318:	mov	r1, #0
   1531c:	sub	r2, r2, r0
   15320:	add	r0, r5, r0, lsl #3
   15324:	lsl	r2, r2, #3
   15328:	bl	10f38 <memset@plt>
   1532c:	ldr	r3, [sp, #80]	; 0x50
   15330:	str	r3, [r6, #4]
   15334:	add	fp, r5, r4, lsl #3
   15338:	ldr	r1, [sp, #36]	; 0x24
   1533c:	ldr	r8, [r5, r4, lsl #3]
   15340:	ldr	r6, [fp, #4]
   15344:	ldr	r2, [sp, #72]	; 0x48
   15348:	ldr	r3, [sp, #32]
   1534c:	ldr	ip, [sp, #76]	; 0x4c
   15350:	orr	r1, r1, #1
   15354:	add	sl, sp, #40	; 0x28
   15358:	str	r1, [sp, #28]
   1535c:	str	r1, [sp, #4]
   15360:	str	r2, [sp, #12]
   15364:	str	r3, [sp]
   15368:	mov	r0, r6
   1536c:	mov	r1, r8
   15370:	str	ip, [sp, #16]
   15374:	str	sl, [sp, #8]
   15378:	mvn	r3, #0
   1537c:	mov	r2, r9
   15380:	bl	132a8 <__assert_fail@plt+0x22bc>
   15384:	cmp	r8, r0
   15388:	bhi	153ec <__assert_fail@plt+0x4400>
   1538c:	ldr	r3, [pc, #164]	; 15438 <__assert_fail@plt+0x444c>
   15390:	add	r8, r0, #1
   15394:	cmp	r6, r3
   15398:	str	r8, [r5, r4, lsl #3]
   1539c:	beq	153a8 <__assert_fail@plt+0x43bc>
   153a0:	mov	r0, r6
   153a4:	bl	12ad4 <__assert_fail@plt+0x1ae8>
   153a8:	mov	r0, r8
   153ac:	bl	17b84 <__assert_fail@plt+0x6b98>
   153b0:	ldr	lr, [sp, #76]	; 0x4c
   153b4:	ldr	r3, [sp, #32]
   153b8:	ldr	ip, [sp, #72]	; 0x48
   153bc:	ldr	r4, [sp, #28]
   153c0:	mov	r2, r9
   153c4:	mov	r1, r8
   153c8:	str	r0, [fp, #4]
   153cc:	str	r3, [sp]
   153d0:	str	sl, [sp, #8]
   153d4:	str	r4, [sp, #4]
   153d8:	str	lr, [sp, #16]
   153dc:	str	ip, [sp, #12]
   153e0:	mvn	r3, #0
   153e4:	mov	r6, r0
   153e8:	bl	132a8 <__assert_fail@plt+0x22bc>
   153ec:	ldr	r3, [sp, #24]
   153f0:	mov	r0, r6
   153f4:	str	r3, [r7]
   153f8:	add	sp, sp, #132	; 0x84
   153fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15400:	mov	r3, #8
   15404:	sub	r2, r4, r2
   15408:	add	r1, sp, #80	; 0x50
   1540c:	str	r3, [sp]
   15410:	add	r2, r2, #1
   15414:	mvn	r3, #-2147483648	; 0x80000000
   15418:	bl	17da0 <__assert_fail@plt+0x6db4>
   1541c:	mov	r5, r0
   15420:	ldm	r8, {r0, r1}
   15424:	str	r5, [r6]
   15428:	stm	r5, {r0, r1}
   1542c:	b	15310 <__assert_fail@plt+0x4324>
   15430:	bl	10fd4 <abort@plt>
   15434:	andeq	fp, r2, r8, lsl #2
   15438:	andeq	fp, r2, ip, asr #3
   1543c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15440:	sub	sp, sp, #132	; 0x84
   15444:	mov	r5, r1
   15448:	mov	r4, r0
   1544c:	mov	r9, r2
   15450:	add	r0, sp, #80	; 0x50
   15454:	mov	r2, #48	; 0x30
   15458:	mov	r1, #0
   1545c:	mov	sl, r3
   15460:	bl	10f38 <memset@plt>
   15464:	cmp	r5, #10
   15468:	beq	15624 <__assert_fail@plt+0x4638>
   1546c:	add	lr, sp, #80	; 0x50
   15470:	str	r5, [sp, #80]	; 0x50
   15474:	ldm	lr!, {r0, r1, r2, r3}
   15478:	add	ip, sp, #32
   1547c:	ldr	r6, [pc, #420]	; 15628 <__assert_fail@plt+0x463c>
   15480:	stmia	ip!, {r0, r1, r2, r3}
   15484:	ldm	lr!, {r0, r1, r2, r3}
   15488:	stmia	ip!, {r0, r1, r2, r3}
   1548c:	ldm	lr, {r0, r1, r2, r3}
   15490:	stm	ip, {r0, r1, r2, r3}
   15494:	bl	10f20 <__errno_location@plt>
   15498:	cmn	r4, #-2147483647	; 0x80000001
   1549c:	ldr	r5, [r6]
   154a0:	mov	r7, r0
   154a4:	movne	r0, #0
   154a8:	moveq	r0, #1
   154ac:	ldr	r3, [r7]
   154b0:	orrs	r0, r0, r4, lsr #31
   154b4:	str	r3, [sp, #24]
   154b8:	bne	15624 <__assert_fail@plt+0x4638>
   154bc:	ldr	r2, [r6, #4]
   154c0:	cmp	r4, r2
   154c4:	blt	15524 <__assert_fail@plt+0x4538>
   154c8:	add	r8, r6, #8
   154cc:	cmp	r5, r8
   154d0:	str	r2, [sp, #80]	; 0x50
   154d4:	beq	155f4 <__assert_fail@plt+0x4608>
   154d8:	mov	r3, #8
   154dc:	sub	r2, r4, r2
   154e0:	mov	r0, r5
   154e4:	str	r3, [sp]
   154e8:	add	r2, r2, #1
   154ec:	add	r1, sp, #80	; 0x50
   154f0:	mvn	r3, #-2147483648	; 0x80000000
   154f4:	bl	17da0 <__assert_fail@plt+0x6db4>
   154f8:	mov	r5, r0
   154fc:	str	r0, [r6]
   15500:	ldr	r0, [r6, #4]
   15504:	ldr	r2, [sp, #80]	; 0x50
   15508:	mov	r1, #0
   1550c:	sub	r2, r2, r0
   15510:	add	r0, r5, r0, lsl #3
   15514:	lsl	r2, r2, #3
   15518:	bl	10f38 <memset@plt>
   1551c:	ldr	r3, [sp, #80]	; 0x50
   15520:	str	r3, [r6, #4]
   15524:	add	fp, r5, r4, lsl #3
   15528:	ldr	r3, [sp, #32]
   1552c:	ldr	r1, [sp, #36]	; 0x24
   15530:	ldr	r8, [r5, r4, lsl #3]
   15534:	ldr	r6, [fp, #4]
   15538:	ldr	r2, [sp, #72]	; 0x48
   1553c:	ldr	ip, [sp, #76]	; 0x4c
   15540:	orr	r1, r1, #1
   15544:	str	r3, [sp]
   15548:	add	r3, sp, #40	; 0x28
   1554c:	str	r1, [sp, #28]
   15550:	str	r1, [sp, #4]
   15554:	str	r2, [sp, #12]
   15558:	str	r3, [sp, #8]
   1555c:	mov	r0, r6
   15560:	mov	r1, r8
   15564:	str	ip, [sp, #16]
   15568:	mov	r3, sl
   1556c:	mov	r2, r9
   15570:	bl	132a8 <__assert_fail@plt+0x22bc>
   15574:	cmp	r8, r0
   15578:	bhi	155e0 <__assert_fail@plt+0x45f4>
   1557c:	ldr	r3, [pc, #168]	; 1562c <__assert_fail@plt+0x4640>
   15580:	add	r8, r0, #1
   15584:	cmp	r6, r3
   15588:	str	r8, [r5, r4, lsl #3]
   1558c:	beq	15598 <__assert_fail@plt+0x45ac>
   15590:	mov	r0, r6
   15594:	bl	12ad4 <__assert_fail@plt+0x1ae8>
   15598:	mov	r0, r8
   1559c:	bl	17b84 <__assert_fail@plt+0x6b98>
   155a0:	add	lr, sp, #40	; 0x28
   155a4:	ldr	ip, [sp, #76]	; 0x4c
   155a8:	ldr	r4, [sp, #72]	; 0x48
   155ac:	ldr	r5, [sp, #28]
   155b0:	mov	r3, sl
   155b4:	mov	r2, r9
   155b8:	mov	r1, r8
   155bc:	str	r0, [fp, #4]
   155c0:	str	lr, [sp, #8]
   155c4:	ldr	lr, [sp, #32]
   155c8:	str	r5, [sp, #4]
   155cc:	str	ip, [sp, #16]
   155d0:	str	r4, [sp, #12]
   155d4:	str	lr, [sp]
   155d8:	mov	r6, r0
   155dc:	bl	132a8 <__assert_fail@plt+0x22bc>
   155e0:	ldr	r3, [sp, #24]
   155e4:	mov	r0, r6
   155e8:	str	r3, [r7]
   155ec:	add	sp, sp, #132	; 0x84
   155f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155f4:	mov	r3, #8
   155f8:	sub	r2, r4, r2
   155fc:	add	r1, sp, #80	; 0x50
   15600:	str	r3, [sp]
   15604:	add	r2, r2, #1
   15608:	mvn	r3, #-2147483648	; 0x80000000
   1560c:	bl	17da0 <__assert_fail@plt+0x6db4>
   15610:	mov	r5, r0
   15614:	ldm	r8, {r0, r1}
   15618:	str	r5, [r6]
   1561c:	stm	r5, {r0, r1}
   15620:	b	15500 <__assert_fail@plt+0x4514>
   15624:	bl	10fd4 <abort@plt>
   15628:	andeq	fp, r2, r8, lsl #2
   1562c:	andeq	fp, r2, ip, asr #3
   15630:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15634:	sub	sp, sp, #124	; 0x7c
   15638:	mov	r4, r0
   1563c:	mov	r9, r1
   15640:	add	r0, sp, #72	; 0x48
   15644:	mov	r2, #48	; 0x30
   15648:	mov	r1, #0
   1564c:	bl	10f38 <memset@plt>
   15650:	cmp	r4, #10
   15654:	beq	157e0 <__assert_fail@plt+0x47f4>
   15658:	add	lr, sp, #72	; 0x48
   1565c:	str	r4, [sp, #72]	; 0x48
   15660:	ldm	lr!, {r0, r1, r2, r3}
   15664:	add	ip, sp, #24
   15668:	ldr	r5, [pc, #372]	; 157e4 <__assert_fail@plt+0x47f8>
   1566c:	stmia	ip!, {r0, r1, r2, r3}
   15670:	ldm	lr!, {r0, r1, r2, r3}
   15674:	stmia	ip!, {r0, r1, r2, r3}
   15678:	ldm	lr, {r0, r1, r2, r3}
   1567c:	stm	ip, {r0, r1, r2, r3}
   15680:	bl	10f20 <__errno_location@plt>
   15684:	ldr	r2, [r5, #4]
   15688:	ldr	r4, [r5]
   1568c:	cmp	r2, #0
   15690:	mov	r7, r0
   15694:	ldr	fp, [r0]
   15698:	bgt	156f4 <__assert_fail@plt+0x4708>
   1569c:	add	r6, r5, #8
   156a0:	cmp	r4, r6
   156a4:	str	r2, [sp, #72]	; 0x48
   156a8:	beq	157b0 <__assert_fail@plt+0x47c4>
   156ac:	mov	r3, #8
   156b0:	mov	r0, r4
   156b4:	str	r3, [sp]
   156b8:	rsb	r2, r2, #1
   156bc:	add	r1, sp, #72	; 0x48
   156c0:	mvn	r3, #-2147483648	; 0x80000000
   156c4:	bl	17da0 <__assert_fail@plt+0x6db4>
   156c8:	mov	r4, r0
   156cc:	str	r0, [r5]
   156d0:	ldr	r0, [r5, #4]
   156d4:	ldr	r2, [sp, #72]	; 0x48
   156d8:	mov	r1, #0
   156dc:	sub	r2, r2, r0
   156e0:	add	r0, r4, r0, lsl #3
   156e4:	lsl	r2, r2, #3
   156e8:	bl	10f38 <memset@plt>
   156ec:	ldr	r3, [sp, #72]	; 0x48
   156f0:	str	r3, [r5, #4]
   156f4:	ldr	r6, [sp, #28]
   156f8:	ldr	r8, [r4]
   156fc:	ldr	r5, [r4, #4]
   15700:	ldr	r2, [sp, #64]	; 0x40
   15704:	ldr	r3, [sp, #24]
   15708:	ldr	ip, [sp, #68]	; 0x44
   1570c:	orr	r6, r6, #1
   15710:	add	sl, sp, #32
   15714:	str	r2, [sp, #12]
   15718:	str	r3, [sp]
   1571c:	str	r6, [sp, #4]
   15720:	mov	r1, r8
   15724:	mov	r0, r5
   15728:	str	ip, [sp, #16]
   1572c:	str	sl, [sp, #8]
   15730:	mvn	r3, #0
   15734:	mov	r2, r9
   15738:	bl	132a8 <__assert_fail@plt+0x22bc>
   1573c:	cmp	r8, r0
   15740:	bhi	157a0 <__assert_fail@plt+0x47b4>
   15744:	ldr	r3, [pc, #156]	; 157e8 <__assert_fail@plt+0x47fc>
   15748:	add	r8, r0, #1
   1574c:	cmp	r5, r3
   15750:	str	r8, [r4]
   15754:	beq	15760 <__assert_fail@plt+0x4774>
   15758:	mov	r0, r5
   1575c:	bl	12ad4 <__assert_fail@plt+0x1ae8>
   15760:	mov	r0, r8
   15764:	bl	17b84 <__assert_fail@plt+0x6b98>
   15768:	ldr	lr, [sp, #68]	; 0x44
   1576c:	ldr	r3, [sp, #24]
   15770:	ldr	ip, [sp, #64]	; 0x40
   15774:	mov	r2, r9
   15778:	mov	r1, r8
   1577c:	str	r0, [r4, #4]
   15780:	str	r3, [sp]
   15784:	str	sl, [sp, #8]
   15788:	str	r6, [sp, #4]
   1578c:	str	lr, [sp, #16]
   15790:	str	ip, [sp, #12]
   15794:	mvn	r3, #0
   15798:	mov	r5, r0
   1579c:	bl	132a8 <__assert_fail@plt+0x22bc>
   157a0:	mov	r0, r5
   157a4:	str	fp, [r7]
   157a8:	add	sp, sp, #124	; 0x7c
   157ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157b0:	mov	r3, #8
   157b4:	add	r1, sp, #72	; 0x48
   157b8:	str	r3, [sp]
   157bc:	rsb	r2, r2, #1
   157c0:	mvn	r3, #-2147483648	; 0x80000000
   157c4:	mov	r0, #0
   157c8:	bl	17da0 <__assert_fail@plt+0x6db4>
   157cc:	mov	r4, r0
   157d0:	ldm	r6, {r0, r1}
   157d4:	str	r4, [r5]
   157d8:	stm	r4, {r0, r1}
   157dc:	b	156d0 <__assert_fail@plt+0x46e4>
   157e0:	bl	10fd4 <abort@plt>
   157e4:	andeq	fp, r2, r8, lsl #2
   157e8:	andeq	fp, r2, ip, asr #3
   157ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157f0:	sub	sp, sp, #132	; 0x84
   157f4:	mov	r4, r0
   157f8:	mov	r9, r1
   157fc:	mov	sl, r2
   15800:	add	r0, sp, #80	; 0x50
   15804:	mov	r2, #48	; 0x30
   15808:	mov	r1, #0
   1580c:	bl	10f38 <memset@plt>
   15810:	cmp	r4, #10
   15814:	beq	159a8 <__assert_fail@plt+0x49bc>
   15818:	add	lr, sp, #80	; 0x50
   1581c:	str	r4, [sp, #80]	; 0x50
   15820:	ldm	lr!, {r0, r1, r2, r3}
   15824:	add	ip, sp, #32
   15828:	ldr	r5, [pc, #380]	; 159ac <__assert_fail@plt+0x49c0>
   1582c:	stmia	ip!, {r0, r1, r2, r3}
   15830:	ldm	lr!, {r0, r1, r2, r3}
   15834:	stmia	ip!, {r0, r1, r2, r3}
   15838:	ldm	lr, {r0, r1, r2, r3}
   1583c:	stm	ip, {r0, r1, r2, r3}
   15840:	bl	10f20 <__errno_location@plt>
   15844:	ldr	r2, [r5, #4]
   15848:	ldr	r4, [r5]
   1584c:	cmp	r2, #0
   15850:	ldr	r3, [r0]
   15854:	mov	r7, r0
   15858:	str	r3, [sp, #28]
   1585c:	bgt	158b8 <__assert_fail@plt+0x48cc>
   15860:	add	r6, r5, #8
   15864:	cmp	r4, r6
   15868:	str	r2, [sp, #80]	; 0x50
   1586c:	beq	15978 <__assert_fail@plt+0x498c>
   15870:	mov	r3, #8
   15874:	mov	r0, r4
   15878:	str	r3, [sp]
   1587c:	rsb	r2, r2, #1
   15880:	add	r1, sp, #80	; 0x50
   15884:	mvn	r3, #-2147483648	; 0x80000000
   15888:	bl	17da0 <__assert_fail@plt+0x6db4>
   1588c:	mov	r4, r0
   15890:	str	r0, [r5]
   15894:	ldr	r0, [r5, #4]
   15898:	ldr	r2, [sp, #80]	; 0x50
   1589c:	mov	r1, #0
   158a0:	sub	r2, r2, r0
   158a4:	add	r0, r4, r0, lsl #3
   158a8:	lsl	r2, r2, #3
   158ac:	bl	10f38 <memset@plt>
   158b0:	ldr	r3, [sp, #80]	; 0x50
   158b4:	str	r3, [r5, #4]
   158b8:	ldr	r6, [sp, #36]	; 0x24
   158bc:	ldr	r8, [r4]
   158c0:	ldr	r5, [r4, #4]
   158c4:	ldr	r2, [sp, #72]	; 0x48
   158c8:	ldr	r3, [sp, #32]
   158cc:	ldr	ip, [sp, #76]	; 0x4c
   158d0:	orr	r6, r6, #1
   158d4:	add	fp, sp, #40	; 0x28
   158d8:	str	r2, [sp, #12]
   158dc:	str	r3, [sp]
   158e0:	str	r6, [sp, #4]
   158e4:	mov	r1, r8
   158e8:	mov	r0, r5
   158ec:	str	ip, [sp, #16]
   158f0:	str	fp, [sp, #8]
   158f4:	mov	r3, sl
   158f8:	mov	r2, r9
   158fc:	bl	132a8 <__assert_fail@plt+0x22bc>
   15900:	cmp	r8, r0
   15904:	bhi	15964 <__assert_fail@plt+0x4978>
   15908:	ldr	r3, [pc, #160]	; 159b0 <__assert_fail@plt+0x49c4>
   1590c:	add	r8, r0, #1
   15910:	cmp	r5, r3
   15914:	str	r8, [r4]
   15918:	beq	15924 <__assert_fail@plt+0x4938>
   1591c:	mov	r0, r5
   15920:	bl	12ad4 <__assert_fail@plt+0x1ae8>
   15924:	mov	r0, r8
   15928:	bl	17b84 <__assert_fail@plt+0x6b98>
   1592c:	ldr	ip, [sp, #76]	; 0x4c
   15930:	ldr	lr, [sp, #32]
   15934:	mov	r3, sl
   15938:	mov	r2, r9
   1593c:	mov	r1, r8
   15940:	str	r0, [r4, #4]
   15944:	ldr	r4, [sp, #72]	; 0x48
   15948:	str	fp, [sp, #8]
   1594c:	str	r6, [sp, #4]
   15950:	str	ip, [sp, #16]
   15954:	str	r4, [sp, #12]
   15958:	str	lr, [sp]
   1595c:	mov	r5, r0
   15960:	bl	132a8 <__assert_fail@plt+0x22bc>
   15964:	ldr	r3, [sp, #28]
   15968:	mov	r0, r5
   1596c:	str	r3, [r7]
   15970:	add	sp, sp, #132	; 0x84
   15974:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15978:	mov	r3, #8
   1597c:	add	r1, sp, #80	; 0x50
   15980:	str	r3, [sp]
   15984:	rsb	r2, r2, #1
   15988:	mvn	r3, #-2147483648	; 0x80000000
   1598c:	mov	r0, #0
   15990:	bl	17da0 <__assert_fail@plt+0x6db4>
   15994:	mov	r4, r0
   15998:	ldm	r6, {r0, r1}
   1599c:	str	r4, [r5]
   159a0:	stm	r4, {r0, r1}
   159a4:	b	15894 <__assert_fail@plt+0x48a8>
   159a8:	bl	10fd4 <abort@plt>
   159ac:	andeq	fp, r2, r8, lsl #2
   159b0:	andeq	fp, r2, ip, asr #3
   159b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159b8:	mov	r4, r2
   159bc:	ldr	lr, [pc, #432]	; 15b74 <__assert_fail@plt+0x4b88>
   159c0:	mov	sl, r0
   159c4:	mov	fp, r1
   159c8:	ldm	lr!, {r0, r1, r2, r3}
   159cc:	sub	sp, sp, #92	; 0x5c
   159d0:	add	ip, sp, #40	; 0x28
   159d4:	lsr	r7, r4, #5
   159d8:	stmia	ip!, {r0, r1, r2, r3}
   159dc:	add	r6, sp, #48	; 0x30
   159e0:	ldm	lr!, {r0, r1, r2, r3}
   159e4:	and	r4, r4, #31
   159e8:	ldr	r5, [pc, #392]	; 15b78 <__assert_fail@plt+0x4b8c>
   159ec:	stmia	ip!, {r0, r1, r2, r3}
   159f0:	ldm	lr, {r0, r1, r2, r3}
   159f4:	stm	ip, {r0, r1, r2, r3}
   159f8:	ldr	r2, [r6, r7, lsl #2]
   159fc:	lsr	r3, r2, r4
   15a00:	eor	r3, r3, #1
   15a04:	and	r3, r3, #1
   15a08:	eor	r4, r2, r3, lsl r4
   15a0c:	str	r4, [r6, r7, lsl #2]
   15a10:	bl	10f20 <__errno_location@plt>
   15a14:	ldr	r2, [r5, #4]
   15a18:	ldr	r4, [r5]
   15a1c:	cmp	r2, #0
   15a20:	ldr	r3, [r0]
   15a24:	mov	r8, r0
   15a28:	str	r3, [sp, #28]
   15a2c:	bgt	15a88 <__assert_fail@plt+0x4a9c>
   15a30:	add	r7, r5, #8
   15a34:	cmp	r4, r7
   15a38:	str	r2, [sp, #36]	; 0x24
   15a3c:	beq	15b44 <__assert_fail@plt+0x4b58>
   15a40:	mov	r3, #8
   15a44:	mov	r0, r4
   15a48:	str	r3, [sp]
   15a4c:	rsb	r2, r2, #1
   15a50:	mvn	r3, #-2147483648	; 0x80000000
   15a54:	add	r1, sp, #36	; 0x24
   15a58:	bl	17da0 <__assert_fail@plt+0x6db4>
   15a5c:	mov	r4, r0
   15a60:	str	r0, [r5]
   15a64:	ldr	r0, [r5, #4]
   15a68:	ldr	r2, [sp, #36]	; 0x24
   15a6c:	mov	r1, #0
   15a70:	sub	r2, r2, r0
   15a74:	add	r0, r4, r0, lsl #3
   15a78:	lsl	r2, r2, #3
   15a7c:	bl	10f38 <memset@plt>
   15a80:	ldr	r3, [sp, #36]	; 0x24
   15a84:	str	r3, [r5, #4]
   15a88:	ldr	r7, [sp, #44]	; 0x2c
   15a8c:	ldr	r9, [r4]
   15a90:	ldr	r5, [r4, #4]
   15a94:	ldr	r2, [sp, #80]	; 0x50
   15a98:	ldr	r3, [sp, #40]	; 0x28
   15a9c:	ldr	ip, [sp, #84]	; 0x54
   15aa0:	orr	r7, r7, #1
   15aa4:	str	r2, [sp, #12]
   15aa8:	str	r3, [sp]
   15aac:	str	r7, [sp, #4]
   15ab0:	str	r6, [sp, #8]
   15ab4:	mov	r1, r9
   15ab8:	mov	r0, r5
   15abc:	str	ip, [sp, #16]
   15ac0:	mov	r3, fp
   15ac4:	mov	r2, sl
   15ac8:	bl	132a8 <__assert_fail@plt+0x22bc>
   15acc:	cmp	r9, r0
   15ad0:	bhi	15b30 <__assert_fail@plt+0x4b44>
   15ad4:	ldr	r3, [pc, #160]	; 15b7c <__assert_fail@plt+0x4b90>
   15ad8:	add	r9, r0, #1
   15adc:	cmp	r5, r3
   15ae0:	str	r9, [r4]
   15ae4:	beq	15af0 <__assert_fail@plt+0x4b04>
   15ae8:	mov	r0, r5
   15aec:	bl	12ad4 <__assert_fail@plt+0x1ae8>
   15af0:	mov	r0, r9
   15af4:	bl	17b84 <__assert_fail@plt+0x6b98>
   15af8:	ldr	ip, [sp, #84]	; 0x54
   15afc:	ldr	lr, [sp, #40]	; 0x28
   15b00:	mov	r3, fp
   15b04:	mov	r2, sl
   15b08:	mov	r1, r9
   15b0c:	str	r0, [r4, #4]
   15b10:	ldr	r4, [sp, #80]	; 0x50
   15b14:	str	r6, [sp, #8]
   15b18:	str	r7, [sp, #4]
   15b1c:	str	ip, [sp, #16]
   15b20:	str	r4, [sp, #12]
   15b24:	str	lr, [sp]
   15b28:	mov	r5, r0
   15b2c:	bl	132a8 <__assert_fail@plt+0x22bc>
   15b30:	ldr	r3, [sp, #28]
   15b34:	mov	r0, r5
   15b38:	str	r3, [r8]
   15b3c:	add	sp, sp, #92	; 0x5c
   15b40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b44:	mov	r3, #8
   15b48:	str	r3, [sp]
   15b4c:	add	r1, sp, #36	; 0x24
   15b50:	rsb	r2, r2, #1
   15b54:	mvn	r3, #-2147483648	; 0x80000000
   15b58:	mov	r0, #0
   15b5c:	bl	17da0 <__assert_fail@plt+0x6db4>
   15b60:	mov	r4, r0
   15b64:	ldm	r7, {r0, r1}
   15b68:	str	r4, [r5]
   15b6c:	stm	r4, {r0, r1}
   15b70:	b	15a64 <__assert_fail@plt+0x4a78>
   15b74:	muleq	r2, ip, r1
   15b78:	andeq	fp, r2, r8, lsl #2
   15b7c:	andeq	fp, r2, ip, asr #3
   15b80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b84:	mov	r4, r1
   15b88:	ldr	lr, [pc, #420]	; 15d34 <__assert_fail@plt+0x4d48>
   15b8c:	mov	r6, r0
   15b90:	sub	sp, sp, #84	; 0x54
   15b94:	ldm	lr!, {r0, r1, r2, r3}
   15b98:	add	ip, sp, #32
   15b9c:	lsr	r8, r4, #5
   15ba0:	add	r5, sp, #40	; 0x28
   15ba4:	stmia	ip!, {r0, r1, r2, r3}
   15ba8:	and	r4, r4, #31
   15bac:	ldm	lr!, {r0, r1, r2, r3}
   15bb0:	ldr	r7, [pc, #384]	; 15d38 <__assert_fail@plt+0x4d4c>
   15bb4:	stmia	ip!, {r0, r1, r2, r3}
   15bb8:	ldm	lr, {r0, r1, r2, r3}
   15bbc:	stm	ip, {r0, r1, r2, r3}
   15bc0:	ldr	r2, [r5, r8, lsl #2]
   15bc4:	lsr	r3, r2, r4
   15bc8:	eor	r3, r3, #1
   15bcc:	and	r3, r3, #1
   15bd0:	eor	r4, r2, r3, lsl r4
   15bd4:	str	r4, [r5, r8, lsl #2]
   15bd8:	bl	10f20 <__errno_location@plt>
   15bdc:	ldr	r2, [r7, #4]
   15be0:	ldr	r4, [r7]
   15be4:	cmp	r2, #0
   15be8:	mov	r9, r0
   15bec:	ldr	sl, [r0]
   15bf0:	bgt	15c4c <__assert_fail@plt+0x4c60>
   15bf4:	add	r8, r7, #8
   15bf8:	cmp	r4, r8
   15bfc:	str	r2, [sp, #28]
   15c00:	beq	15d04 <__assert_fail@plt+0x4d18>
   15c04:	mov	r3, #8
   15c08:	mov	r0, r4
   15c0c:	str	r3, [sp]
   15c10:	rsb	r2, r2, #1
   15c14:	mvn	r3, #-2147483648	; 0x80000000
   15c18:	add	r1, sp, #28
   15c1c:	bl	17da0 <__assert_fail@plt+0x6db4>
   15c20:	mov	r4, r0
   15c24:	str	r0, [r7]
   15c28:	ldr	r0, [r7, #4]
   15c2c:	ldr	r2, [sp, #28]
   15c30:	mov	r1, #0
   15c34:	sub	r2, r2, r0
   15c38:	add	r0, r4, r0, lsl #3
   15c3c:	lsl	r2, r2, #3
   15c40:	bl	10f38 <memset@plt>
   15c44:	ldr	r3, [sp, #28]
   15c48:	str	r3, [r7, #4]
   15c4c:	ldr	r8, [sp, #36]	; 0x24
   15c50:	ldr	fp, [r4]
   15c54:	ldr	r7, [r4, #4]
   15c58:	ldr	r2, [sp, #72]	; 0x48
   15c5c:	ldr	r3, [sp, #32]
   15c60:	ldr	ip, [sp, #76]	; 0x4c
   15c64:	orr	r8, r8, #1
   15c68:	str	r2, [sp, #12]
   15c6c:	str	r3, [sp]
   15c70:	str	r8, [sp, #4]
   15c74:	str	r5, [sp, #8]
   15c78:	mov	r1, fp
   15c7c:	mov	r0, r7
   15c80:	str	ip, [sp, #16]
   15c84:	mvn	r3, #0
   15c88:	mov	r2, r6
   15c8c:	bl	132a8 <__assert_fail@plt+0x22bc>
   15c90:	cmp	fp, r0
   15c94:	bhi	15cf4 <__assert_fail@plt+0x4d08>
   15c98:	ldr	r3, [pc, #156]	; 15d3c <__assert_fail@plt+0x4d50>
   15c9c:	add	fp, r0, #1
   15ca0:	cmp	r7, r3
   15ca4:	str	fp, [r4]
   15ca8:	beq	15cb4 <__assert_fail@plt+0x4cc8>
   15cac:	mov	r0, r7
   15cb0:	bl	12ad4 <__assert_fail@plt+0x1ae8>
   15cb4:	mov	r0, fp
   15cb8:	bl	17b84 <__assert_fail@plt+0x6b98>
   15cbc:	ldr	lr, [sp, #76]	; 0x4c
   15cc0:	ldr	r3, [sp, #32]
   15cc4:	ldr	ip, [sp, #72]	; 0x48
   15cc8:	mov	r2, r6
   15ccc:	mov	r1, fp
   15cd0:	str	r0, [r4, #4]
   15cd4:	str	r3, [sp]
   15cd8:	str	r5, [sp, #8]
   15cdc:	str	r8, [sp, #4]
   15ce0:	str	lr, [sp, #16]
   15ce4:	str	ip, [sp, #12]
   15ce8:	mvn	r3, #0
   15cec:	mov	r7, r0
   15cf0:	bl	132a8 <__assert_fail@plt+0x22bc>
   15cf4:	mov	r0, r7
   15cf8:	str	sl, [r9]
   15cfc:	add	sp, sp, #84	; 0x54
   15d00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d04:	mov	r3, #8
   15d08:	str	r3, [sp]
   15d0c:	add	r1, sp, #28
   15d10:	rsb	r2, r2, #1
   15d14:	mvn	r3, #-2147483648	; 0x80000000
   15d18:	mov	r0, #0
   15d1c:	bl	17da0 <__assert_fail@plt+0x6db4>
   15d20:	mov	r4, r0
   15d24:	ldm	r8, {r0, r1}
   15d28:	str	r4, [r7]
   15d2c:	stm	r4, {r0, r1}
   15d30:	b	15c28 <__assert_fail@plt+0x4c3c>
   15d34:	muleq	r2, ip, r1
   15d38:	andeq	fp, r2, r8, lsl #2
   15d3c:	andeq	fp, r2, ip, asr #3
   15d40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d44:	mov	r6, r0
   15d48:	ldr	lr, [pc, #404]	; 15ee4 <__assert_fail@plt+0x4ef8>
   15d4c:	sub	sp, sp, #84	; 0x54
   15d50:	add	ip, sp, #32
   15d54:	ldm	lr!, {r0, r1, r2, r3}
   15d58:	ldr	r5, [pc, #392]	; 15ee8 <__assert_fail@plt+0x4efc>
   15d5c:	stmia	ip!, {r0, r1, r2, r3}
   15d60:	ldm	lr!, {r0, r1, r2, r3}
   15d64:	ldr	r4, [sp, #44]	; 0x2c
   15d68:	stmia	ip!, {r0, r1, r2, r3}
   15d6c:	ldm	lr, {r0, r1, r2, r3}
   15d70:	mvn	lr, r4
   15d74:	and	lr, lr, #67108864	; 0x4000000
   15d78:	eor	lr, lr, r4
   15d7c:	stm	ip, {r0, r1, r2, r3}
   15d80:	str	lr, [sp, #44]	; 0x2c
   15d84:	bl	10f20 <__errno_location@plt>
   15d88:	ldr	r2, [r5, #4]
   15d8c:	ldr	r4, [r5]
   15d90:	cmp	r2, #0
   15d94:	mov	r8, r0
   15d98:	ldr	sl, [r0]
   15d9c:	bgt	15df8 <__assert_fail@plt+0x4e0c>
   15da0:	add	r7, r5, #8
   15da4:	cmp	r4, r7
   15da8:	str	r2, [sp, #28]
   15dac:	beq	15eb4 <__assert_fail@plt+0x4ec8>
   15db0:	mov	r3, #8
   15db4:	mov	r0, r4
   15db8:	str	r3, [sp]
   15dbc:	rsb	r2, r2, #1
   15dc0:	mvn	r3, #-2147483648	; 0x80000000
   15dc4:	add	r1, sp, #28
   15dc8:	bl	17da0 <__assert_fail@plt+0x6db4>
   15dcc:	mov	r4, r0
   15dd0:	str	r0, [r5]
   15dd4:	ldr	r0, [r5, #4]
   15dd8:	ldr	r2, [sp, #28]
   15ddc:	mov	r1, #0
   15de0:	sub	r2, r2, r0
   15de4:	add	r0, r4, r0, lsl #3
   15de8:	lsl	r2, r2, #3
   15dec:	bl	10f38 <memset@plt>
   15df0:	ldr	r3, [sp, #28]
   15df4:	str	r3, [r5, #4]
   15df8:	ldr	r7, [sp, #36]	; 0x24
   15dfc:	ldr	r9, [r4]
   15e00:	ldr	r5, [r4, #4]
   15e04:	ldr	r2, [sp, #72]	; 0x48
   15e08:	ldr	r3, [sp, #32]
   15e0c:	ldr	ip, [sp, #76]	; 0x4c
   15e10:	orr	r7, r7, #1
   15e14:	add	fp, sp, #40	; 0x28
   15e18:	str	r2, [sp, #12]
   15e1c:	str	r3, [sp]
   15e20:	str	r7, [sp, #4]
   15e24:	mov	r1, r9
   15e28:	mov	r0, r5
   15e2c:	str	ip, [sp, #16]
   15e30:	str	fp, [sp, #8]
   15e34:	mvn	r3, #0
   15e38:	mov	r2, r6
   15e3c:	bl	132a8 <__assert_fail@plt+0x22bc>
   15e40:	cmp	r9, r0
   15e44:	bhi	15ea4 <__assert_fail@plt+0x4eb8>
   15e48:	ldr	r3, [pc, #156]	; 15eec <__assert_fail@plt+0x4f00>
   15e4c:	add	r9, r0, #1
   15e50:	cmp	r5, r3
   15e54:	str	r9, [r4]
   15e58:	beq	15e64 <__assert_fail@plt+0x4e78>
   15e5c:	mov	r0, r5
   15e60:	bl	12ad4 <__assert_fail@plt+0x1ae8>
   15e64:	mov	r0, r9
   15e68:	bl	17b84 <__assert_fail@plt+0x6b98>
   15e6c:	ldr	lr, [sp, #76]	; 0x4c
   15e70:	ldr	r3, [sp, #32]
   15e74:	ldr	ip, [sp, #72]	; 0x48
   15e78:	mov	r2, r6
   15e7c:	mov	r1, r9
   15e80:	str	r0, [r4, #4]
   15e84:	str	r3, [sp]
   15e88:	str	fp, [sp, #8]
   15e8c:	str	r7, [sp, #4]
   15e90:	str	lr, [sp, #16]
   15e94:	str	ip, [sp, #12]
   15e98:	mvn	r3, #0
   15e9c:	mov	r5, r0
   15ea0:	bl	132a8 <__assert_fail@plt+0x22bc>
   15ea4:	mov	r0, r5
   15ea8:	str	sl, [r8]
   15eac:	add	sp, sp, #84	; 0x54
   15eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15eb4:	mov	r3, #8
   15eb8:	str	r3, [sp]
   15ebc:	add	r1, sp, #28
   15ec0:	rsb	r2, r2, #1
   15ec4:	mvn	r3, #-2147483648	; 0x80000000
   15ec8:	mov	r0, #0
   15ecc:	bl	17da0 <__assert_fail@plt+0x6db4>
   15ed0:	mov	r4, r0
   15ed4:	ldm	r7, {r0, r1}
   15ed8:	str	r4, [r5]
   15edc:	stm	r4, {r0, r1}
   15ee0:	b	15dd4 <__assert_fail@plt+0x4de8>
   15ee4:	muleq	r2, ip, r1
   15ee8:	andeq	fp, r2, r8, lsl #2
   15eec:	andeq	fp, r2, ip, asr #3
   15ef0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ef4:	mov	r9, r0
   15ef8:	ldr	lr, [pc, #416]	; 160a0 <__assert_fail@plt+0x50b4>
   15efc:	mov	sl, r1
   15f00:	sub	sp, sp, #92	; 0x5c
   15f04:	ldm	lr!, {r0, r1, r2, r3}
   15f08:	add	ip, sp, #40	; 0x28
   15f0c:	ldr	r5, [pc, #400]	; 160a4 <__assert_fail@plt+0x50b8>
   15f10:	stmia	ip!, {r0, r1, r2, r3}
   15f14:	ldm	lr!, {r0, r1, r2, r3}
   15f18:	ldr	r4, [sp, #52]	; 0x34
   15f1c:	stmia	ip!, {r0, r1, r2, r3}
   15f20:	ldm	lr, {r0, r1, r2, r3}
   15f24:	mvn	lr, r4
   15f28:	and	lr, lr, #67108864	; 0x4000000
   15f2c:	eor	lr, lr, r4
   15f30:	stm	ip, {r0, r1, r2, r3}
   15f34:	str	lr, [sp, #52]	; 0x34
   15f38:	bl	10f20 <__errno_location@plt>
   15f3c:	ldr	r2, [r5, #4]
   15f40:	ldr	r4, [r5]
   15f44:	cmp	r2, #0
   15f48:	ldr	r3, [r0]
   15f4c:	mov	r7, r0
   15f50:	str	r3, [sp, #28]
   15f54:	bgt	15fb0 <__assert_fail@plt+0x4fc4>
   15f58:	add	r6, r5, #8
   15f5c:	cmp	r4, r6
   15f60:	str	r2, [sp, #36]	; 0x24
   15f64:	beq	16070 <__assert_fail@plt+0x5084>
   15f68:	mov	r3, #8
   15f6c:	mov	r0, r4
   15f70:	str	r3, [sp]
   15f74:	rsb	r2, r2, #1
   15f78:	mvn	r3, #-2147483648	; 0x80000000
   15f7c:	add	r1, sp, #36	; 0x24
   15f80:	bl	17da0 <__assert_fail@plt+0x6db4>
   15f84:	mov	r4, r0
   15f88:	str	r0, [r5]
   15f8c:	ldr	r0, [r5, #4]
   15f90:	ldr	r2, [sp, #36]	; 0x24
   15f94:	mov	r1, #0
   15f98:	sub	r2, r2, r0
   15f9c:	add	r0, r4, r0, lsl #3
   15fa0:	lsl	r2, r2, #3
   15fa4:	bl	10f38 <memset@plt>
   15fa8:	ldr	r3, [sp, #36]	; 0x24
   15fac:	str	r3, [r5, #4]
   15fb0:	ldr	r6, [sp, #44]	; 0x2c
   15fb4:	ldr	r8, [r4]
   15fb8:	ldr	r5, [r4, #4]
   15fbc:	ldr	r2, [sp, #80]	; 0x50
   15fc0:	ldr	r3, [sp, #40]	; 0x28
   15fc4:	ldr	ip, [sp, #84]	; 0x54
   15fc8:	orr	r6, r6, #1
   15fcc:	add	fp, sp, #48	; 0x30
   15fd0:	str	r2, [sp, #12]
   15fd4:	str	r3, [sp]
   15fd8:	str	r6, [sp, #4]
   15fdc:	mov	r1, r8
   15fe0:	mov	r0, r5
   15fe4:	str	ip, [sp, #16]
   15fe8:	str	fp, [sp, #8]
   15fec:	mov	r3, sl
   15ff0:	mov	r2, r9
   15ff4:	bl	132a8 <__assert_fail@plt+0x22bc>
   15ff8:	cmp	r8, r0
   15ffc:	bhi	1605c <__assert_fail@plt+0x5070>
   16000:	ldr	r3, [pc, #160]	; 160a8 <__assert_fail@plt+0x50bc>
   16004:	add	r8, r0, #1
   16008:	cmp	r5, r3
   1600c:	str	r8, [r4]
   16010:	beq	1601c <__assert_fail@plt+0x5030>
   16014:	mov	r0, r5
   16018:	bl	12ad4 <__assert_fail@plt+0x1ae8>
   1601c:	mov	r0, r8
   16020:	bl	17b84 <__assert_fail@plt+0x6b98>
   16024:	ldr	ip, [sp, #84]	; 0x54
   16028:	ldr	lr, [sp, #40]	; 0x28
   1602c:	mov	r3, sl
   16030:	mov	r2, r9
   16034:	mov	r1, r8
   16038:	str	r0, [r4, #4]
   1603c:	ldr	r4, [sp, #80]	; 0x50
   16040:	str	fp, [sp, #8]
   16044:	str	r6, [sp, #4]
   16048:	str	ip, [sp, #16]
   1604c:	str	r4, [sp, #12]
   16050:	str	lr, [sp]
   16054:	mov	r5, r0
   16058:	bl	132a8 <__assert_fail@plt+0x22bc>
   1605c:	ldr	r3, [sp, #28]
   16060:	mov	r0, r5
   16064:	str	r3, [r7]
   16068:	add	sp, sp, #92	; 0x5c
   1606c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16070:	mov	r3, #8
   16074:	str	r3, [sp]
   16078:	add	r1, sp, #36	; 0x24
   1607c:	rsb	r2, r2, #1
   16080:	mvn	r3, #-2147483648	; 0x80000000
   16084:	mov	r0, #0
   16088:	bl	17da0 <__assert_fail@plt+0x6db4>
   1608c:	mov	r4, r0
   16090:	ldm	r6, {r0, r1}
   16094:	str	r4, [r5]
   16098:	stm	r4, {r0, r1}
   1609c:	b	15f8c <__assert_fail@plt+0x4fa0>
   160a0:	muleq	r2, ip, r1
   160a4:	andeq	fp, r2, r8, lsl #2
   160a8:	andeq	fp, r2, ip, asr #3
   160ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160b0:	sub	sp, sp, #180	; 0xb4
   160b4:	mov	r6, r1
   160b8:	mov	r4, r0
   160bc:	mov	r9, r2
   160c0:	add	r0, sp, #80	; 0x50
   160c4:	mov	r2, #48	; 0x30
   160c8:	mov	r1, #0
   160cc:	bl	10f38 <memset@plt>
   160d0:	cmp	r6, #10
   160d4:	beq	162b4 <__assert_fail@plt+0x52c8>
   160d8:	add	r5, sp, #80	; 0x50
   160dc:	str	r6, [sp, #80]	; 0x50
   160e0:	ldm	r5!, {r0, r1, r2, r3}
   160e4:	add	ip, sp, #128	; 0x80
   160e8:	mov	r7, ip
   160ec:	add	lr, sp, #32
   160f0:	stmia	ip!, {r0, r1, r2, r3}
   160f4:	mov	r8, #67108864	; 0x4000000
   160f8:	ldm	r5!, {r0, r1, r2, r3}
   160fc:	ldr	r6, [pc, #436]	; 162b8 <__assert_fail@plt+0x52cc>
   16100:	stmia	ip!, {r0, r1, r2, r3}
   16104:	ldm	r5, {r0, r1, r2, r3}
   16108:	stm	ip, {r0, r1, r2, r3}
   1610c:	ldm	r7!, {r0, r1, r2, r3}
   16110:	stmia	lr!, {r0, r1, r2, r3}
   16114:	ldm	r7!, {r0, r1, r2, r3}
   16118:	str	r8, [sp, #44]	; 0x2c
   1611c:	stmia	lr!, {r0, r1, r2, r3}
   16120:	ldm	ip, {r0, r1, r2, r3}
   16124:	stm	lr, {r0, r1, r2, r3}
   16128:	bl	10f20 <__errno_location@plt>
   1612c:	cmn	r4, #-2147483647	; 0x80000001
   16130:	ldr	r5, [r6]
   16134:	mov	r7, r0
   16138:	movne	r0, #0
   1613c:	moveq	r0, #1
   16140:	ldr	r3, [r7]
   16144:	orrs	r0, r0, r4, lsr #31
   16148:	str	r3, [sp, #24]
   1614c:	bne	162b4 <__assert_fail@plt+0x52c8>
   16150:	ldr	r2, [r6, #4]
   16154:	cmp	r4, r2
   16158:	blt	161b8 <__assert_fail@plt+0x51cc>
   1615c:	add	r8, r6, #8
   16160:	cmp	r5, r8
   16164:	str	r2, [sp, #80]	; 0x50
   16168:	beq	16284 <__assert_fail@plt+0x5298>
   1616c:	mov	r3, #8
   16170:	sub	r2, r4, r2
   16174:	mov	r0, r5
   16178:	str	r3, [sp]
   1617c:	add	r2, r2, #1
   16180:	add	r1, sp, #80	; 0x50
   16184:	mvn	r3, #-2147483648	; 0x80000000
   16188:	bl	17da0 <__assert_fail@plt+0x6db4>
   1618c:	mov	r5, r0
   16190:	str	r0, [r6]
   16194:	ldr	r0, [r6, #4]
   16198:	ldr	r2, [sp, #80]	; 0x50
   1619c:	mov	r1, #0
   161a0:	sub	r2, r2, r0
   161a4:	add	r0, r5, r0, lsl #3
   161a8:	lsl	r2, r2, #3
   161ac:	bl	10f38 <memset@plt>
   161b0:	ldr	r3, [sp, #80]	; 0x50
   161b4:	str	r3, [r6, #4]
   161b8:	add	fp, r5, r4, lsl #3
   161bc:	ldr	r1, [sp, #36]	; 0x24
   161c0:	ldr	r8, [r5, r4, lsl #3]
   161c4:	ldr	r6, [fp, #4]
   161c8:	ldr	r2, [sp, #72]	; 0x48
   161cc:	ldr	r3, [sp, #32]
   161d0:	ldr	ip, [sp, #76]	; 0x4c
   161d4:	orr	r1, r1, #1
   161d8:	add	sl, sp, #40	; 0x28
   161dc:	str	r1, [sp, #28]
   161e0:	str	r1, [sp, #4]
   161e4:	str	r2, [sp, #12]
   161e8:	str	r3, [sp]
   161ec:	mov	r0, r6
   161f0:	mov	r1, r8
   161f4:	str	ip, [sp, #16]
   161f8:	str	sl, [sp, #8]
   161fc:	mvn	r3, #0
   16200:	mov	r2, r9
   16204:	bl	132a8 <__assert_fail@plt+0x22bc>
   16208:	cmp	r8, r0
   1620c:	bhi	16270 <__assert_fail@plt+0x5284>
   16210:	ldr	r3, [pc, #164]	; 162bc <__assert_fail@plt+0x52d0>
   16214:	add	r8, r0, #1
   16218:	cmp	r6, r3
   1621c:	str	r8, [r5, r4, lsl #3]
   16220:	beq	1622c <__assert_fail@plt+0x5240>
   16224:	mov	r0, r6
   16228:	bl	12ad4 <__assert_fail@plt+0x1ae8>
   1622c:	mov	r0, r8
   16230:	bl	17b84 <__assert_fail@plt+0x6b98>
   16234:	ldr	lr, [sp, #76]	; 0x4c
   16238:	ldr	r3, [sp, #32]
   1623c:	ldr	ip, [sp, #72]	; 0x48
   16240:	ldr	r4, [sp, #28]
   16244:	mov	r2, r9
   16248:	mov	r1, r8
   1624c:	str	r0, [fp, #4]
   16250:	str	r3, [sp]
   16254:	str	sl, [sp, #8]
   16258:	str	r4, [sp, #4]
   1625c:	str	lr, [sp, #16]
   16260:	str	ip, [sp, #12]
   16264:	mvn	r3, #0
   16268:	mov	r6, r0
   1626c:	bl	132a8 <__assert_fail@plt+0x22bc>
   16270:	ldr	r3, [sp, #24]
   16274:	mov	r0, r6
   16278:	str	r3, [r7]
   1627c:	add	sp, sp, #180	; 0xb4
   16280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16284:	mov	r3, #8
   16288:	sub	r2, r4, r2
   1628c:	add	r1, sp, #80	; 0x50
   16290:	str	r3, [sp]
   16294:	add	r2, r2, #1
   16298:	mvn	r3, #-2147483648	; 0x80000000
   1629c:	bl	17da0 <__assert_fail@plt+0x6db4>
   162a0:	mov	r5, r0
   162a4:	ldm	r8, {r0, r1}
   162a8:	str	r5, [r6]
   162ac:	stm	r5, {r0, r1}
   162b0:	b	16194 <__assert_fail@plt+0x51a8>
   162b4:	bl	10fd4 <abort@plt>
   162b8:	andeq	fp, r2, r8, lsl #2
   162bc:	andeq	fp, r2, ip, asr #3
   162c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162c4:	mov	r7, r1
   162c8:	ldr	lr, [pc, #492]	; 164bc <__assert_fail@plt+0x54d0>
   162cc:	mov	r8, r2
   162d0:	mov	r4, r0
   162d4:	mov	fp, r3
   162d8:	ldm	lr!, {r0, r1, r2, r3}
   162dc:	sub	sp, sp, #100	; 0x64
   162e0:	add	ip, sp, #48	; 0x30
   162e4:	mov	sl, #10
   162e8:	stmia	ip!, {r0, r1, r2, r3}
   162ec:	cmp	r8, #0
   162f0:	cmpne	r7, #0
   162f4:	ldm	lr!, {r0, r1, r2, r3}
   162f8:	str	sl, [sp, #48]	; 0x30
   162fc:	stmia	ip!, {r0, r1, r2, r3}
   16300:	ldm	lr, {r0, r1, r2, r3}
   16304:	stm	ip, {r0, r1, r2, r3}
   16308:	beq	164b8 <__assert_fail@plt+0x54cc>
   1630c:	str	r7, [sp, #88]	; 0x58
   16310:	str	r8, [sp, #92]	; 0x5c
   16314:	bl	10f20 <__errno_location@plt>
   16318:	ldr	r6, [pc, #416]	; 164c0 <__assert_fail@plt+0x54d4>
   1631c:	cmn	r4, #-2147483647	; 0x80000001
   16320:	ldr	r5, [r6]
   16324:	mov	r9, r0
   16328:	movne	r0, #0
   1632c:	moveq	r0, #1
   16330:	ldr	r3, [r9]
   16334:	orrs	r0, r0, r4, lsr #31
   16338:	str	r3, [sp, #28]
   1633c:	bne	164b8 <__assert_fail@plt+0x54cc>
   16340:	ldr	r2, [r6, #4]
   16344:	cmp	r4, r2
   16348:	movlt	r3, sl
   1634c:	blt	163b8 <__assert_fail@plt+0x53cc>
   16350:	add	r7, r6, #8
   16354:	cmp	r5, r7
   16358:	str	r2, [sp, #44]	; 0x2c
   1635c:	beq	16488 <__assert_fail@plt+0x549c>
   16360:	mov	r3, #8
   16364:	sub	r2, r4, r2
   16368:	mov	r0, r5
   1636c:	str	r3, [sp]
   16370:	add	r2, r2, #1
   16374:	mvn	r3, #-2147483648	; 0x80000000
   16378:	add	r1, sp, #44	; 0x2c
   1637c:	bl	17da0 <__assert_fail@plt+0x6db4>
   16380:	mov	r5, r0
   16384:	str	r0, [r6]
   16388:	ldr	r0, [r6, #4]
   1638c:	ldr	r2, [sp, #44]	; 0x2c
   16390:	mov	r1, #0
   16394:	sub	r2, r2, r0
   16398:	add	r0, r5, r0, lsl #3
   1639c:	lsl	r2, r2, #3
   163a0:	bl	10f38 <memset@plt>
   163a4:	ldr	r3, [sp, #48]	; 0x30
   163a8:	ldr	r7, [sp, #88]	; 0x58
   163ac:	ldr	r8, [sp, #92]	; 0x5c
   163b0:	ldr	r2, [sp, #44]	; 0x2c
   163b4:	str	r2, [r6, #4]
   163b8:	add	r2, r5, r4, lsl #3
   163bc:	mov	r1, r2
   163c0:	str	r2, [sp, #32]
   163c4:	ldr	r2, [sp, #52]	; 0x34
   163c8:	ldr	r6, [r1, #4]
   163cc:	ldr	sl, [r5, r4, lsl #3]
   163d0:	orr	r2, r2, #1
   163d4:	str	r3, [sp]
   163d8:	add	r3, sp, #56	; 0x38
   163dc:	str	r2, [sp, #36]	; 0x24
   163e0:	str	r2, [sp, #4]
   163e4:	str	r3, [sp, #8]
   163e8:	mov	r0, r6
   163ec:	str	r8, [sp, #16]
   163f0:	str	r7, [sp, #12]
   163f4:	mov	r1, sl
   163f8:	mvn	r3, #0
   163fc:	mov	r2, fp
   16400:	bl	132a8 <__assert_fail@plt+0x22bc>
   16404:	cmp	sl, r0
   16408:	bhi	16474 <__assert_fail@plt+0x5488>
   1640c:	ldr	r3, [pc, #176]	; 164c4 <__assert_fail@plt+0x54d8>
   16410:	add	r7, r0, #1
   16414:	cmp	r6, r3
   16418:	str	r7, [r5, r4, lsl #3]
   1641c:	beq	16428 <__assert_fail@plt+0x543c>
   16420:	mov	r0, r6
   16424:	bl	12ad4 <__assert_fail@plt+0x1ae8>
   16428:	mov	r0, r7
   1642c:	bl	17b84 <__assert_fail@plt+0x6b98>
   16430:	ldr	r3, [sp, #32]
   16434:	ldr	lr, [sp, #92]	; 0x5c
   16438:	ldr	ip, [sp, #88]	; 0x58
   1643c:	ldr	r4, [sp, #36]	; 0x24
   16440:	mov	r2, fp
   16444:	mov	r1, r7
   16448:	str	r0, [r3, #4]
   1644c:	add	r3, sp, #56	; 0x38
   16450:	str	r3, [sp, #8]
   16454:	ldr	r3, [sp, #48]	; 0x30
   16458:	str	r4, [sp, #4]
   1645c:	str	r3, [sp]
   16460:	str	lr, [sp, #16]
   16464:	str	ip, [sp, #12]
   16468:	mvn	r3, #0
   1646c:	mov	r6, r0
   16470:	bl	132a8 <__assert_fail@plt+0x22bc>
   16474:	ldr	r3, [sp, #28]
   16478:	mov	r0, r6
   1647c:	str	r3, [r9]
   16480:	add	sp, sp, #100	; 0x64
   16484:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16488:	mov	r3, #8
   1648c:	sub	r2, r4, r2
   16490:	str	r3, [sp]
   16494:	add	r1, sp, #44	; 0x2c
   16498:	add	r2, r2, #1
   1649c:	mvn	r3, #-2147483648	; 0x80000000
   164a0:	bl	17da0 <__assert_fail@plt+0x6db4>
   164a4:	mov	r5, r0
   164a8:	ldm	r7, {r0, r1}
   164ac:	str	r5, [r6]
   164b0:	stm	r5, {r0, r1}
   164b4:	b	16388 <__assert_fail@plt+0x539c>
   164b8:	bl	10fd4 <abort@plt>
   164bc:	muleq	r2, ip, r1
   164c0:	andeq	fp, r2, r8, lsl #2
   164c4:	andeq	fp, r2, ip, asr #3
   164c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164cc:	mov	r7, r1
   164d0:	ldr	lr, [pc, #492]	; 166c4 <__assert_fail@plt+0x56d8>
   164d4:	mov	r8, r2
   164d8:	mov	r4, r0
   164dc:	mov	fp, r3
   164e0:	ldm	lr!, {r0, r1, r2, r3}
   164e4:	sub	sp, sp, #100	; 0x64
   164e8:	add	ip, sp, #48	; 0x30
   164ec:	mov	sl, #10
   164f0:	stmia	ip!, {r0, r1, r2, r3}
   164f4:	cmp	r8, #0
   164f8:	cmpne	r7, #0
   164fc:	ldm	lr!, {r0, r1, r2, r3}
   16500:	str	sl, [sp, #48]	; 0x30
   16504:	stmia	ip!, {r0, r1, r2, r3}
   16508:	ldm	lr, {r0, r1, r2, r3}
   1650c:	stm	ip, {r0, r1, r2, r3}
   16510:	beq	166c0 <__assert_fail@plt+0x56d4>
   16514:	str	r7, [sp, #88]	; 0x58
   16518:	str	r8, [sp, #92]	; 0x5c
   1651c:	bl	10f20 <__errno_location@plt>
   16520:	ldr	r6, [pc, #416]	; 166c8 <__assert_fail@plt+0x56dc>
   16524:	cmn	r4, #-2147483647	; 0x80000001
   16528:	ldr	r5, [r6]
   1652c:	mov	r9, r0
   16530:	movne	r0, #0
   16534:	moveq	r0, #1
   16538:	ldr	r3, [r9]
   1653c:	orrs	r0, r0, r4, lsr #31
   16540:	str	r3, [sp, #28]
   16544:	bne	166c0 <__assert_fail@plt+0x56d4>
   16548:	ldr	r2, [r6, #4]
   1654c:	cmp	r4, r2
   16550:	movlt	r3, sl
   16554:	blt	165c0 <__assert_fail@plt+0x55d4>
   16558:	add	r7, r6, #8
   1655c:	cmp	r5, r7
   16560:	str	r2, [sp, #44]	; 0x2c
   16564:	beq	16690 <__assert_fail@plt+0x56a4>
   16568:	mov	r3, #8
   1656c:	sub	r2, r4, r2
   16570:	mov	r0, r5
   16574:	str	r3, [sp]
   16578:	add	r2, r2, #1
   1657c:	mvn	r3, #-2147483648	; 0x80000000
   16580:	add	r1, sp, #44	; 0x2c
   16584:	bl	17da0 <__assert_fail@plt+0x6db4>
   16588:	mov	r5, r0
   1658c:	str	r0, [r6]
   16590:	ldr	r0, [r6, #4]
   16594:	ldr	r2, [sp, #44]	; 0x2c
   16598:	mov	r1, #0
   1659c:	sub	r2, r2, r0
   165a0:	add	r0, r5, r0, lsl #3
   165a4:	lsl	r2, r2, #3
   165a8:	bl	10f38 <memset@plt>
   165ac:	ldr	r3, [sp, #48]	; 0x30
   165b0:	ldr	r7, [sp, #88]	; 0x58
   165b4:	ldr	r8, [sp, #92]	; 0x5c
   165b8:	ldr	r2, [sp, #44]	; 0x2c
   165bc:	str	r2, [r6, #4]
   165c0:	add	r2, r5, r4, lsl #3
   165c4:	mov	r1, r2
   165c8:	str	r2, [sp, #32]
   165cc:	ldr	r2, [sp, #52]	; 0x34
   165d0:	ldr	r6, [r1, #4]
   165d4:	ldr	sl, [r5, r4, lsl #3]
   165d8:	orr	r2, r2, #1
   165dc:	str	r3, [sp]
   165e0:	add	r3, sp, #56	; 0x38
   165e4:	str	r2, [sp, #36]	; 0x24
   165e8:	str	r2, [sp, #4]
   165ec:	str	r3, [sp, #8]
   165f0:	mov	r0, r6
   165f4:	str	r8, [sp, #16]
   165f8:	str	r7, [sp, #12]
   165fc:	mov	r1, sl
   16600:	ldr	r3, [sp, #136]	; 0x88
   16604:	mov	r2, fp
   16608:	bl	132a8 <__assert_fail@plt+0x22bc>
   1660c:	cmp	sl, r0
   16610:	bhi	1667c <__assert_fail@plt+0x5690>
   16614:	ldr	r3, [pc, #176]	; 166cc <__assert_fail@plt+0x56e0>
   16618:	add	r7, r0, #1
   1661c:	cmp	r6, r3
   16620:	str	r7, [r5, r4, lsl #3]
   16624:	beq	16630 <__assert_fail@plt+0x5644>
   16628:	mov	r0, r6
   1662c:	bl	12ad4 <__assert_fail@plt+0x1ae8>
   16630:	mov	r0, r7
   16634:	bl	17b84 <__assert_fail@plt+0x6b98>
   16638:	ldr	r3, [sp, #32]
   1663c:	ldr	lr, [sp, #92]	; 0x5c
   16640:	ldr	ip, [sp, #88]	; 0x58
   16644:	ldr	r4, [sp, #36]	; 0x24
   16648:	mov	r2, fp
   1664c:	mov	r1, r7
   16650:	str	r0, [r3, #4]
   16654:	add	r3, sp, #56	; 0x38
   16658:	str	r3, [sp, #8]
   1665c:	ldr	r3, [sp, #48]	; 0x30
   16660:	str	r4, [sp, #4]
   16664:	str	r3, [sp]
   16668:	str	lr, [sp, #16]
   1666c:	str	ip, [sp, #12]
   16670:	ldr	r3, [sp, #136]	; 0x88
   16674:	mov	r6, r0
   16678:	bl	132a8 <__assert_fail@plt+0x22bc>
   1667c:	ldr	r3, [sp, #28]
   16680:	mov	r0, r6
   16684:	str	r3, [r9]
   16688:	add	sp, sp, #100	; 0x64
   1668c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16690:	mov	r3, #8
   16694:	sub	r2, r4, r2
   16698:	str	r3, [sp]
   1669c:	add	r1, sp, #44	; 0x2c
   166a0:	add	r2, r2, #1
   166a4:	mvn	r3, #-2147483648	; 0x80000000
   166a8:	bl	17da0 <__assert_fail@plt+0x6db4>
   166ac:	mov	r5, r0
   166b0:	ldm	r7, {r0, r1}
   166b4:	str	r5, [r6]
   166b8:	stm	r5, {r0, r1}
   166bc:	b	16590 <__assert_fail@plt+0x55a4>
   166c0:	bl	10fd4 <abort@plt>
   166c4:	muleq	r2, ip, r1
   166c8:	andeq	fp, r2, r8, lsl #2
   166cc:	andeq	fp, r2, ip, asr #3
   166d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166d4:	mov	r5, r0
   166d8:	ldr	lr, [pc, #452]	; 168a4 <__assert_fail@plt+0x58b8>
   166dc:	mov	r6, r1
   166e0:	mov	sl, r2
   166e4:	ldm	lr!, {r0, r1, r2, r3}
   166e8:	sub	sp, sp, #92	; 0x5c
   166ec:	add	ip, sp, #40	; 0x28
   166f0:	cmp	r6, #0
   166f4:	cmpne	r5, #0
   166f8:	stmia	ip!, {r0, r1, r2, r3}
   166fc:	mov	r9, #10
   16700:	ldm	lr!, {r0, r1, r2, r3}
   16704:	moveq	fp, #1
   16708:	movne	fp, #0
   1670c:	str	r9, [sp, #40]	; 0x28
   16710:	stmia	ip!, {r0, r1, r2, r3}
   16714:	ldm	lr, {r0, r1, r2, r3}
   16718:	stm	ip, {r0, r1, r2, r3}
   1671c:	beq	168a0 <__assert_fail@plt+0x58b4>
   16720:	str	r5, [sp, #80]	; 0x50
   16724:	str	r6, [sp, #84]	; 0x54
   16728:	bl	10f20 <__errno_location@plt>
   1672c:	ldr	r7, [pc, #372]	; 168a8 <__assert_fail@plt+0x58bc>
   16730:	ldr	r2, [r7, #4]
   16734:	ldr	r4, [r7]
   16738:	cmp	r2, #0
   1673c:	ldr	r3, [r0]
   16740:	mov	r8, r0
   16744:	str	r3, [sp, #24]
   16748:	movgt	r3, r9
   1674c:	bgt	167b4 <__assert_fail@plt+0x57c8>
   16750:	add	r5, r7, #8
   16754:	cmp	r4, r5
   16758:	str	r2, [sp, #36]	; 0x24
   1675c:	beq	16870 <__assert_fail@plt+0x5884>
   16760:	mov	r3, #8
   16764:	mov	r0, r4
   16768:	str	r3, [sp]
   1676c:	rsb	r2, r2, #1
   16770:	mvn	r3, #-2147483648	; 0x80000000
   16774:	add	r1, sp, #36	; 0x24
   16778:	bl	17da0 <__assert_fail@plt+0x6db4>
   1677c:	mov	r4, r0
   16780:	str	r0, [r7]
   16784:	ldr	r0, [r7, #4]
   16788:	ldr	r2, [sp, #36]	; 0x24
   1678c:	mov	r1, #0
   16790:	sub	r2, r2, r0
   16794:	add	r0, r4, r0, lsl #3
   16798:	lsl	r2, r2, #3
   1679c:	bl	10f38 <memset@plt>
   167a0:	ldr	r3, [sp, #40]	; 0x28
   167a4:	ldr	r5, [sp, #80]	; 0x50
   167a8:	ldr	r6, [sp, #84]	; 0x54
   167ac:	ldr	r2, [sp, #36]	; 0x24
   167b0:	str	r2, [r7, #4]
   167b4:	ldr	r2, [sp, #44]	; 0x2c
   167b8:	ldr	r9, [r4]
   167bc:	ldr	r7, [r4, #4]
   167c0:	orr	r2, r2, #1
   167c4:	add	fp, sp, #48	; 0x30
   167c8:	str	r2, [sp, #28]
   167cc:	str	r2, [sp, #4]
   167d0:	str	r3, [sp]
   167d4:	str	r6, [sp, #16]
   167d8:	str	r5, [sp, #12]
   167dc:	mov	r1, r9
   167e0:	mov	r0, r7
   167e4:	str	fp, [sp, #8]
   167e8:	mvn	r3, #0
   167ec:	mov	r2, sl
   167f0:	bl	132a8 <__assert_fail@plt+0x22bc>
   167f4:	cmp	r9, r0
   167f8:	bhi	1685c <__assert_fail@plt+0x5870>
   167fc:	ldr	r3, [pc, #168]	; 168ac <__assert_fail@plt+0x58c0>
   16800:	add	r5, r0, #1
   16804:	cmp	r7, r3
   16808:	str	r5, [r4]
   1680c:	beq	16818 <__assert_fail@plt+0x582c>
   16810:	mov	r0, r7
   16814:	bl	12ad4 <__assert_fail@plt+0x1ae8>
   16818:	mov	r0, r5
   1681c:	bl	17b84 <__assert_fail@plt+0x6b98>
   16820:	ldr	lr, [sp, #84]	; 0x54
   16824:	ldr	r3, [sp, #40]	; 0x28
   16828:	ldr	ip, [sp, #80]	; 0x50
   1682c:	mov	r2, sl
   16830:	mov	r1, r5
   16834:	str	r0, [r4, #4]
   16838:	ldr	r4, [sp, #28]
   1683c:	str	r3, [sp]
   16840:	str	fp, [sp, #8]
   16844:	str	r4, [sp, #4]
   16848:	str	lr, [sp, #16]
   1684c:	str	ip, [sp, #12]
   16850:	mvn	r3, #0
   16854:	mov	r7, r0
   16858:	bl	132a8 <__assert_fail@plt+0x22bc>
   1685c:	ldr	r3, [sp, #24]
   16860:	mov	r0, r7
   16864:	str	r3, [r8]
   16868:	add	sp, sp, #92	; 0x5c
   1686c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16870:	mov	r3, #8
   16874:	str	r3, [sp]
   16878:	add	r1, sp, #36	; 0x24
   1687c:	rsb	r2, r2, #1
   16880:	mov	r0, fp
   16884:	mvn	r3, #-2147483648	; 0x80000000
   16888:	bl	17da0 <__assert_fail@plt+0x6db4>
   1688c:	mov	r4, r0
   16890:	ldm	r5, {r0, r1}
   16894:	str	r4, [r7]
   16898:	stm	r4, {r0, r1}
   1689c:	b	16784 <__assert_fail@plt+0x5798>
   168a0:	bl	10fd4 <abort@plt>
   168a4:	muleq	r2, ip, r1
   168a8:	andeq	fp, r2, r8, lsl #2
   168ac:	andeq	fp, r2, ip, asr #3
   168b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168b4:	mov	r5, r0
   168b8:	ldr	lr, [pc, #464]	; 16a90 <__assert_fail@plt+0x5aa4>
   168bc:	mov	r6, r1
   168c0:	mov	sl, r2
   168c4:	mov	fp, r3
   168c8:	ldm	lr!, {r0, r1, r2, r3}
   168cc:	sub	sp, sp, #92	; 0x5c
   168d0:	add	ip, sp, #40	; 0x28
   168d4:	cmp	r6, #0
   168d8:	cmpne	r5, #0
   168dc:	stmia	ip!, {r0, r1, r2, r3}
   168e0:	moveq	r4, #1
   168e4:	ldm	lr!, {r0, r1, r2, r3}
   168e8:	movne	r4, #0
   168ec:	mov	r9, #10
   168f0:	str	r4, [sp, #28]
   168f4:	stmia	ip!, {r0, r1, r2, r3}
   168f8:	ldm	lr, {r0, r1, r2, r3}
   168fc:	str	r9, [sp, #40]	; 0x28
   16900:	stm	ip, {r0, r1, r2, r3}
   16904:	beq	16a8c <__assert_fail@plt+0x5aa0>
   16908:	str	r5, [sp, #80]	; 0x50
   1690c:	str	r6, [sp, #84]	; 0x54
   16910:	bl	10f20 <__errno_location@plt>
   16914:	ldr	r7, [pc, #376]	; 16a94 <__assert_fail@plt+0x5aa8>
   16918:	ldr	r2, [r7, #4]
   1691c:	ldr	r4, [r7]
   16920:	cmp	r2, #0
   16924:	ldr	r3, [r0]
   16928:	mov	r8, r0
   1692c:	str	r3, [sp, #24]
   16930:	movgt	r3, r9
   16934:	bgt	1699c <__assert_fail@plt+0x59b0>
   16938:	add	r5, r7, #8
   1693c:	cmp	r4, r5
   16940:	str	r2, [sp, #36]	; 0x24
   16944:	beq	16a5c <__assert_fail@plt+0x5a70>
   16948:	mov	r3, #8
   1694c:	mov	r0, r4
   16950:	str	r3, [sp]
   16954:	rsb	r2, r2, #1
   16958:	mvn	r3, #-2147483648	; 0x80000000
   1695c:	add	r1, sp, #36	; 0x24
   16960:	bl	17da0 <__assert_fail@plt+0x6db4>
   16964:	mov	r4, r0
   16968:	str	r0, [r7]
   1696c:	ldr	r0, [r7, #4]
   16970:	ldr	r2, [sp, #36]	; 0x24
   16974:	mov	r1, #0
   16978:	sub	r2, r2, r0
   1697c:	add	r0, r4, r0, lsl #3
   16980:	lsl	r2, r2, #3
   16984:	bl	10f38 <memset@plt>
   16988:	ldr	r3, [sp, #40]	; 0x28
   1698c:	ldr	r5, [sp, #80]	; 0x50
   16990:	ldr	r6, [sp, #84]	; 0x54
   16994:	ldr	r2, [sp, #36]	; 0x24
   16998:	str	r2, [r7, #4]
   1699c:	ldr	r2, [sp, #44]	; 0x2c
   169a0:	ldr	r9, [r4]
   169a4:	ldr	r7, [r4, #4]
   169a8:	orr	r2, r2, #1
   169ac:	str	r3, [sp]
   169b0:	add	r3, sp, #48	; 0x30
   169b4:	str	r2, [sp, #28]
   169b8:	str	r2, [sp, #4]
   169bc:	str	r3, [sp, #8]
   169c0:	str	r6, [sp, #16]
   169c4:	str	r5, [sp, #12]
   169c8:	mov	r1, r9
   169cc:	mov	r0, r7
   169d0:	mov	r3, fp
   169d4:	mov	r2, sl
   169d8:	bl	132a8 <__assert_fail@plt+0x22bc>
   169dc:	cmp	r9, r0
   169e0:	bhi	16a48 <__assert_fail@plt+0x5a5c>
   169e4:	ldr	r3, [pc, #172]	; 16a98 <__assert_fail@plt+0x5aac>
   169e8:	add	r5, r0, #1
   169ec:	cmp	r7, r3
   169f0:	str	r5, [r4]
   169f4:	beq	16a00 <__assert_fail@plt+0x5a14>
   169f8:	mov	r0, r7
   169fc:	bl	12ad4 <__assert_fail@plt+0x1ae8>
   16a00:	mov	r0, r5
   16a04:	bl	17b84 <__assert_fail@plt+0x6b98>
   16a08:	add	lr, sp, #48	; 0x30
   16a0c:	ldr	ip, [sp, #84]	; 0x54
   16a10:	mov	r1, r5
   16a14:	ldr	r5, [sp, #28]
   16a18:	mov	r3, fp
   16a1c:	mov	r2, sl
   16a20:	str	r0, [r4, #4]
   16a24:	ldr	r4, [sp, #80]	; 0x50
   16a28:	str	lr, [sp, #8]
   16a2c:	ldr	lr, [sp, #40]	; 0x28
   16a30:	str	r5, [sp, #4]
   16a34:	str	ip, [sp, #16]
   16a38:	str	r4, [sp, #12]
   16a3c:	str	lr, [sp]
   16a40:	mov	r7, r0
   16a44:	bl	132a8 <__assert_fail@plt+0x22bc>
   16a48:	ldr	r3, [sp, #24]
   16a4c:	mov	r0, r7
   16a50:	str	r3, [r8]
   16a54:	add	sp, sp, #92	; 0x5c
   16a58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a5c:	mov	r3, #8
   16a60:	str	r3, [sp]
   16a64:	add	r1, sp, #36	; 0x24
   16a68:	rsb	r2, r2, #1
   16a6c:	ldr	r0, [sp, #28]
   16a70:	mvn	r3, #-2147483648	; 0x80000000
   16a74:	bl	17da0 <__assert_fail@plt+0x6db4>
   16a78:	mov	r4, r0
   16a7c:	ldm	r5, {r0, r1}
   16a80:	str	r4, [r7]
   16a84:	stm	r4, {r0, r1}
   16a88:	b	1696c <__assert_fail@plt+0x5980>
   16a8c:	bl	10fd4 <abort@plt>
   16a90:	muleq	r2, ip, r1
   16a94:	andeq	fp, r2, r8, lsl #2
   16a98:	andeq	fp, r2, ip, asr #3
   16a9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16aa0:	sub	sp, sp, #52	; 0x34
   16aa4:	mov	r5, r0
   16aa8:	mov	sl, r1
   16aac:	mov	fp, r2
   16ab0:	bl	10f20 <__errno_location@plt>
   16ab4:	ldr	r4, [pc, #404]	; 16c50 <__assert_fail@plt+0x5c64>
   16ab8:	cmn	r5, #-2147483647	; 0x80000001
   16abc:	ldr	r6, [r4]
   16ac0:	mov	r8, r0
   16ac4:	movne	r0, #0
   16ac8:	moveq	r0, #1
   16acc:	ldr	r3, [r8]
   16ad0:	orrs	r0, r0, r5, lsr #31
   16ad4:	str	r3, [sp, #28]
   16ad8:	bne	16c4c <__assert_fail@plt+0x5c60>
   16adc:	ldr	r2, [r4, #4]
   16ae0:	cmp	r5, r2
   16ae4:	blt	16b44 <__assert_fail@plt+0x5b58>
   16ae8:	add	r7, r4, #8
   16aec:	cmp	r6, r7
   16af0:	str	r2, [sp, #44]	; 0x2c
   16af4:	beq	16c1c <__assert_fail@plt+0x5c30>
   16af8:	mov	r3, #8
   16afc:	sub	r2, r5, r2
   16b00:	mov	r0, r6
   16b04:	str	r3, [sp]
   16b08:	add	r2, r2, #1
   16b0c:	mvn	r3, #-2147483648	; 0x80000000
   16b10:	add	r1, sp, #44	; 0x2c
   16b14:	bl	17da0 <__assert_fail@plt+0x6db4>
   16b18:	mov	r6, r0
   16b1c:	str	r0, [r4]
   16b20:	ldr	r0, [r4, #4]
   16b24:	ldr	r2, [sp, #44]	; 0x2c
   16b28:	mov	r1, #0
   16b2c:	sub	r2, r2, r0
   16b30:	add	r0, r6, r0, lsl #3
   16b34:	lsl	r2, r2, #3
   16b38:	bl	10f38 <memset@plt>
   16b3c:	ldr	r3, [sp, #44]	; 0x2c
   16b40:	str	r3, [r4, #4]
   16b44:	ldr	r2, [r4, #56]	; 0x38
   16b48:	add	r3, r6, r5, lsl #3
   16b4c:	ldr	r1, [r4, #20]
   16b50:	ldr	r7, [r3, #4]
   16b54:	ldr	r9, [r6, r5, lsl #3]
   16b58:	ldr	ip, [r4, #60]	; 0x3c
   16b5c:	str	r3, [sp, #32]
   16b60:	ldr	r3, [r4, #16]
   16b64:	str	r2, [sp, #12]
   16b68:	ldr	r2, [pc, #228]	; 16c54 <__assert_fail@plt+0x5c68>
   16b6c:	orr	r1, r1, #1
   16b70:	str	r1, [sp, #36]	; 0x24
   16b74:	str	r1, [sp, #4]
   16b78:	str	r2, [sp, #8]
   16b7c:	str	r3, [sp]
   16b80:	mov	r0, r7
   16b84:	mov	r1, r9
   16b88:	str	ip, [sp, #16]
   16b8c:	mov	r3, fp
   16b90:	mov	r2, sl
   16b94:	bl	132a8 <__assert_fail@plt+0x22bc>
   16b98:	cmp	r9, r0
   16b9c:	bhi	16c08 <__assert_fail@plt+0x5c1c>
   16ba0:	ldr	r3, [pc, #176]	; 16c58 <__assert_fail@plt+0x5c6c>
   16ba4:	add	r9, r0, #1
   16ba8:	cmp	r7, r3
   16bac:	str	r9, [r6, r5, lsl #3]
   16bb0:	beq	16bbc <__assert_fail@plt+0x5bd0>
   16bb4:	mov	r0, r7
   16bb8:	bl	12ad4 <__assert_fail@plt+0x1ae8>
   16bbc:	mov	r0, r9
   16bc0:	bl	17b84 <__assert_fail@plt+0x6b98>
   16bc4:	ldr	ip, [sp, #32]
   16bc8:	ldr	lr, [r4, #60]	; 0x3c
   16bcc:	ldr	r5, [r4, #56]	; 0x38
   16bd0:	mov	r3, fp
   16bd4:	mov	r2, sl
   16bd8:	mov	r1, r9
   16bdc:	str	r0, [ip, #4]
   16be0:	ldr	ip, [r4, #16]
   16be4:	ldr	r4, [pc, #104]	; 16c54 <__assert_fail@plt+0x5c68>
   16be8:	str	lr, [sp, #16]
   16bec:	str	r4, [sp, #8]
   16bf0:	ldr	r4, [sp, #36]	; 0x24
   16bf4:	str	r5, [sp, #12]
   16bf8:	str	r4, [sp, #4]
   16bfc:	str	ip, [sp]
   16c00:	mov	r7, r0
   16c04:	bl	132a8 <__assert_fail@plt+0x22bc>
   16c08:	ldr	r3, [sp, #28]
   16c0c:	mov	r0, r7
   16c10:	str	r3, [r8]
   16c14:	add	sp, sp, #52	; 0x34
   16c18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c1c:	mov	r3, #8
   16c20:	sub	r2, r5, r2
   16c24:	str	r3, [sp]
   16c28:	add	r1, sp, #44	; 0x2c
   16c2c:	add	r2, r2, #1
   16c30:	mvn	r3, #-2147483648	; 0x80000000
   16c34:	bl	17da0 <__assert_fail@plt+0x6db4>
   16c38:	mov	r6, r0
   16c3c:	ldm	r7, {r0, r1}
   16c40:	str	r6, [r4]
   16c44:	stm	r6, {r0, r1}
   16c48:	b	16b20 <__assert_fail@plt+0x5b34>
   16c4c:	bl	10fd4 <abort@plt>
   16c50:	andeq	fp, r2, r8, lsl #2
   16c54:	andeq	fp, r2, r0, lsr #2
   16c58:	andeq	fp, r2, ip, asr #3
   16c5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c60:	sub	sp, sp, #44	; 0x2c
   16c64:	mov	r9, r0
   16c68:	mov	sl, r1
   16c6c:	bl	10f20 <__errno_location@plt>
   16c70:	ldr	r4, [pc, #360]	; 16de0 <__assert_fail@plt+0x5df4>
   16c74:	ldr	r2, [r4, #4]
   16c78:	ldr	r5, [r4]
   16c7c:	cmp	r2, #0
   16c80:	ldr	r3, [r0]
   16c84:	mov	r7, r0
   16c88:	str	r3, [sp, #24]
   16c8c:	bgt	16ce8 <__assert_fail@plt+0x5cfc>
   16c90:	add	r6, r4, #8
   16c94:	cmp	r5, r6
   16c98:	str	r2, [sp, #36]	; 0x24
   16c9c:	beq	16db0 <__assert_fail@plt+0x5dc4>
   16ca0:	mov	r3, #8
   16ca4:	mov	r0, r5
   16ca8:	str	r3, [sp]
   16cac:	rsb	r2, r2, #1
   16cb0:	mvn	r3, #-2147483648	; 0x80000000
   16cb4:	add	r1, sp, #36	; 0x24
   16cb8:	bl	17da0 <__assert_fail@plt+0x6db4>
   16cbc:	mov	r5, r0
   16cc0:	str	r0, [r4]
   16cc4:	ldr	r0, [r4, #4]
   16cc8:	ldr	r2, [sp, #36]	; 0x24
   16ccc:	mov	r1, #0
   16cd0:	sub	r2, r2, r0
   16cd4:	add	r0, r5, r0, lsl #3
   16cd8:	lsl	r2, r2, #3
   16cdc:	bl	10f38 <memset@plt>
   16ce0:	ldr	r3, [sp, #36]	; 0x24
   16ce4:	str	r3, [r4, #4]
   16ce8:	ldr	r1, [r4, #20]
   16cec:	ldr	r8, [r5]
   16cf0:	ldr	r6, [r5, #4]
   16cf4:	ldr	r2, [r4, #56]	; 0x38
   16cf8:	ldr	r3, [r4, #16]
   16cfc:	ldr	ip, [r4, #60]	; 0x3c
   16d00:	ldr	fp, [pc, #220]	; 16de4 <__assert_fail@plt+0x5df8>
   16d04:	orr	r1, r1, #1
   16d08:	str	r1, [sp, #28]
   16d0c:	str	r1, [sp, #4]
   16d10:	str	r2, [sp, #12]
   16d14:	str	r3, [sp]
   16d18:	mov	r1, r8
   16d1c:	mov	r0, r6
   16d20:	str	ip, [sp, #16]
   16d24:	str	fp, [sp, #8]
   16d28:	mov	r3, sl
   16d2c:	mov	r2, r9
   16d30:	bl	132a8 <__assert_fail@plt+0x22bc>
   16d34:	cmp	r8, r0
   16d38:	bhi	16d9c <__assert_fail@plt+0x5db0>
   16d3c:	ldr	r3, [pc, #164]	; 16de8 <__assert_fail@plt+0x5dfc>
   16d40:	add	r8, r0, #1
   16d44:	cmp	r6, r3
   16d48:	str	r8, [r5]
   16d4c:	beq	16d58 <__assert_fail@plt+0x5d6c>
   16d50:	mov	r0, r6
   16d54:	bl	12ad4 <__assert_fail@plt+0x1ae8>
   16d58:	mov	r0, r8
   16d5c:	bl	17b84 <__assert_fail@plt+0x6b98>
   16d60:	ldr	lr, [r4, #60]	; 0x3c
   16d64:	ldr	ip, [r4, #16]
   16d68:	mov	r3, sl
   16d6c:	mov	r2, r9
   16d70:	mov	r1, r8
   16d74:	str	r0, [r5, #4]
   16d78:	ldr	r5, [r4, #56]	; 0x38
   16d7c:	ldr	r4, [sp, #28]
   16d80:	str	fp, [sp, #8]
   16d84:	str	r4, [sp, #4]
   16d88:	str	lr, [sp, #16]
   16d8c:	str	r5, [sp, #12]
   16d90:	str	ip, [sp]
   16d94:	mov	r6, r0
   16d98:	bl	132a8 <__assert_fail@plt+0x22bc>
   16d9c:	ldr	r3, [sp, #24]
   16da0:	mov	r0, r6
   16da4:	str	r3, [r7]
   16da8:	add	sp, sp, #44	; 0x2c
   16dac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16db0:	mov	r3, #8
   16db4:	str	r3, [sp]
   16db8:	add	r1, sp, #36	; 0x24
   16dbc:	rsb	r2, r2, #1
   16dc0:	mvn	r3, #-2147483648	; 0x80000000
   16dc4:	mov	r0, #0
   16dc8:	bl	17da0 <__assert_fail@plt+0x6db4>
   16dcc:	mov	r5, r0
   16dd0:	ldm	r6, {r0, r1}
   16dd4:	str	r5, [r4]
   16dd8:	stm	r5, {r0, r1}
   16ddc:	b	16cc4 <__assert_fail@plt+0x5cd8>
   16de0:	andeq	fp, r2, r8, lsl #2
   16de4:	andeq	fp, r2, r0, lsr #2
   16de8:	andeq	fp, r2, ip, asr #3
   16dec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16df0:	sub	sp, sp, #44	; 0x2c
   16df4:	mov	r5, r0
   16df8:	mov	sl, r1
   16dfc:	bl	10f20 <__errno_location@plt>
   16e00:	ldr	r4, [pc, #396]	; 16f94 <__assert_fail@plt+0x5fa8>
   16e04:	cmn	r5, #-2147483647	; 0x80000001
   16e08:	ldr	r6, [r4]
   16e0c:	mov	r8, r0
   16e10:	movne	r0, #0
   16e14:	moveq	r0, #1
   16e18:	ldr	r3, [r8]
   16e1c:	orrs	r0, r0, r5, lsr #31
   16e20:	str	r3, [sp, #24]
   16e24:	bne	16f90 <__assert_fail@plt+0x5fa4>
   16e28:	ldr	r2, [r4, #4]
   16e2c:	cmp	r5, r2
   16e30:	blt	16e90 <__assert_fail@plt+0x5ea4>
   16e34:	add	r7, r4, #8
   16e38:	cmp	r6, r7
   16e3c:	str	r2, [sp, #36]	; 0x24
   16e40:	beq	16f60 <__assert_fail@plt+0x5f74>
   16e44:	mov	r3, #8
   16e48:	sub	r2, r5, r2
   16e4c:	mov	r0, r6
   16e50:	str	r3, [sp]
   16e54:	add	r2, r2, #1
   16e58:	mvn	r3, #-2147483648	; 0x80000000
   16e5c:	add	r1, sp, #36	; 0x24
   16e60:	bl	17da0 <__assert_fail@plt+0x6db4>
   16e64:	mov	r6, r0
   16e68:	str	r0, [r4]
   16e6c:	ldr	r0, [r4, #4]
   16e70:	ldr	r2, [sp, #36]	; 0x24
   16e74:	mov	r1, #0
   16e78:	sub	r2, r2, r0
   16e7c:	add	r0, r6, r0, lsl #3
   16e80:	lsl	r2, r2, #3
   16e84:	bl	10f38 <memset@plt>
   16e88:	ldr	r3, [sp, #36]	; 0x24
   16e8c:	str	r3, [r4, #4]
   16e90:	ldr	r2, [r4, #56]	; 0x38
   16e94:	add	fp, r6, r5, lsl #3
   16e98:	ldr	r1, [r4, #20]
   16e9c:	ldr	r9, [r6, r5, lsl #3]
   16ea0:	ldr	r7, [fp, #4]
   16ea4:	ldr	r3, [r4, #16]
   16ea8:	ldr	ip, [r4, #60]	; 0x3c
   16eac:	str	r2, [sp, #12]
   16eb0:	ldr	r2, [pc, #224]	; 16f98 <__assert_fail@plt+0x5fac>
   16eb4:	orr	r1, r1, #1
   16eb8:	str	r1, [sp, #28]
   16ebc:	str	r1, [sp, #4]
   16ec0:	str	r2, [sp, #8]
   16ec4:	str	r3, [sp]
   16ec8:	mov	r0, r7
   16ecc:	mov	r1, r9
   16ed0:	str	ip, [sp, #16]
   16ed4:	mvn	r3, #0
   16ed8:	mov	r2, sl
   16edc:	bl	132a8 <__assert_fail@plt+0x22bc>
   16ee0:	cmp	r9, r0
   16ee4:	bhi	16f4c <__assert_fail@plt+0x5f60>
   16ee8:	ldr	r3, [pc, #172]	; 16f9c <__assert_fail@plt+0x5fb0>
   16eec:	add	r9, r0, #1
   16ef0:	cmp	r7, r3
   16ef4:	str	r9, [r6, r5, lsl #3]
   16ef8:	beq	16f04 <__assert_fail@plt+0x5f18>
   16efc:	mov	r0, r7
   16f00:	bl	12ad4 <__assert_fail@plt+0x1ae8>
   16f04:	mov	r0, r9
   16f08:	bl	17b84 <__assert_fail@plt+0x6b98>
   16f0c:	ldr	ip, [r4, #60]	; 0x3c
   16f10:	ldr	r3, [r4, #16]
   16f14:	ldr	lr, [r4, #56]	; 0x38
   16f18:	ldr	r4, [pc, #120]	; 16f98 <__assert_fail@plt+0x5fac>
   16f1c:	mov	r2, sl
   16f20:	mov	r1, r9
   16f24:	str	r0, [fp, #4]
   16f28:	str	r4, [sp, #8]
   16f2c:	ldr	r4, [sp, #28]
   16f30:	str	r3, [sp]
   16f34:	str	r4, [sp, #4]
   16f38:	str	ip, [sp, #16]
   16f3c:	str	lr, [sp, #12]
   16f40:	mvn	r3, #0
   16f44:	mov	r7, r0
   16f48:	bl	132a8 <__assert_fail@plt+0x22bc>
   16f4c:	ldr	r3, [sp, #24]
   16f50:	mov	r0, r7
   16f54:	str	r3, [r8]
   16f58:	add	sp, sp, #44	; 0x2c
   16f5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f60:	mov	r3, #8
   16f64:	sub	r2, r5, r2
   16f68:	str	r3, [sp]
   16f6c:	add	r1, sp, #36	; 0x24
   16f70:	add	r2, r2, #1
   16f74:	mvn	r3, #-2147483648	; 0x80000000
   16f78:	bl	17da0 <__assert_fail@plt+0x6db4>
   16f7c:	mov	r6, r0
   16f80:	ldm	r7, {r0, r1}
   16f84:	str	r6, [r4]
   16f88:	stm	r6, {r0, r1}
   16f8c:	b	16e6c <__assert_fail@plt+0x5e80>
   16f90:	bl	10fd4 <abort@plt>
   16f94:	andeq	fp, r2, r8, lsl #2
   16f98:	andeq	fp, r2, r0, lsr #2
   16f9c:	andeq	fp, r2, ip, asr #3
   16fa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fa4:	sub	sp, sp, #44	; 0x2c
   16fa8:	mov	sl, r0
   16fac:	bl	10f20 <__errno_location@plt>
   16fb0:	ldr	r4, [pc, #348]	; 17114 <__assert_fail@plt+0x6128>
   16fb4:	ldr	r2, [r4, #4]
   16fb8:	ldr	r5, [r4]
   16fbc:	cmp	r2, #0
   16fc0:	ldr	r3, [r0]
   16fc4:	mov	r8, r0
   16fc8:	str	r3, [sp, #28]
   16fcc:	bgt	17028 <__assert_fail@plt+0x603c>
   16fd0:	add	r6, r4, #8
   16fd4:	cmp	r5, r6
   16fd8:	str	r2, [sp, #36]	; 0x24
   16fdc:	beq	170e4 <__assert_fail@plt+0x60f8>
   16fe0:	mov	r3, #8
   16fe4:	mov	r0, r5
   16fe8:	str	r3, [sp]
   16fec:	rsb	r2, r2, #1
   16ff0:	mvn	r3, #-2147483648	; 0x80000000
   16ff4:	add	r1, sp, #36	; 0x24
   16ff8:	bl	17da0 <__assert_fail@plt+0x6db4>
   16ffc:	mov	r5, r0
   17000:	str	r0, [r4]
   17004:	ldr	r0, [r4, #4]
   17008:	ldr	r2, [sp, #36]	; 0x24
   1700c:	mov	r1, #0
   17010:	sub	r2, r2, r0
   17014:	add	r0, r5, r0, lsl #3
   17018:	lsl	r2, r2, #3
   1701c:	bl	10f38 <memset@plt>
   17020:	ldr	r3, [sp, #36]	; 0x24
   17024:	str	r3, [r4, #4]
   17028:	ldr	r7, [r4, #20]
   1702c:	ldr	r9, [r5]
   17030:	ldr	r6, [r5, #4]
   17034:	ldr	r2, [r4, #56]	; 0x38
   17038:	ldr	r3, [r4, #16]
   1703c:	ldr	ip, [r4, #60]	; 0x3c
   17040:	ldr	fp, [pc, #208]	; 17118 <__assert_fail@plt+0x612c>
   17044:	orr	r7, r7, #1
   17048:	str	r2, [sp, #12]
   1704c:	str	r3, [sp]
   17050:	str	r7, [sp, #4]
   17054:	mov	r1, r9
   17058:	mov	r0, r6
   1705c:	str	ip, [sp, #16]
   17060:	str	fp, [sp, #8]
   17064:	mvn	r3, #0
   17068:	mov	r2, sl
   1706c:	bl	132a8 <__assert_fail@plt+0x22bc>
   17070:	cmp	r9, r0
   17074:	bhi	170d0 <__assert_fail@plt+0x60e4>
   17078:	ldr	r3, [pc, #156]	; 1711c <__assert_fail@plt+0x6130>
   1707c:	add	r9, r0, #1
   17080:	cmp	r6, r3
   17084:	str	r9, [r5]
   17088:	beq	17094 <__assert_fail@plt+0x60a8>
   1708c:	mov	r0, r6
   17090:	bl	12ad4 <__assert_fail@plt+0x1ae8>
   17094:	mov	r0, r9
   17098:	bl	17b84 <__assert_fail@plt+0x6b98>
   1709c:	ldr	ip, [r4, #60]	; 0x3c
   170a0:	ldr	r3, [r4, #16]
   170a4:	ldr	lr, [r4, #56]	; 0x38
   170a8:	mov	r2, sl
   170ac:	mov	r1, r9
   170b0:	str	r0, [r5, #4]
   170b4:	str	r3, [sp]
   170b8:	stmib	sp, {r7, fp}
   170bc:	str	ip, [sp, #16]
   170c0:	str	lr, [sp, #12]
   170c4:	mvn	r3, #0
   170c8:	mov	r6, r0
   170cc:	bl	132a8 <__assert_fail@plt+0x22bc>
   170d0:	ldr	r3, [sp, #28]
   170d4:	mov	r0, r6
   170d8:	str	r3, [r8]
   170dc:	add	sp, sp, #44	; 0x2c
   170e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170e4:	mov	r3, #8
   170e8:	str	r3, [sp]
   170ec:	add	r1, sp, #36	; 0x24
   170f0:	rsb	r2, r2, #1
   170f4:	mvn	r3, #-2147483648	; 0x80000000
   170f8:	mov	r0, #0
   170fc:	bl	17da0 <__assert_fail@plt+0x6db4>
   17100:	mov	r5, r0
   17104:	ldm	r6, {r0, r1}
   17108:	str	r5, [r4]
   1710c:	stm	r5, {r0, r1}
   17110:	b	17004 <__assert_fail@plt+0x6018>
   17114:	andeq	fp, r2, r8, lsl #2
   17118:	andeq	fp, r2, r0, lsr #2
   1711c:	andeq	fp, r2, ip, asr #3
   17120:	push	{r4, r5, r6, lr}
   17124:	sub	sp, sp, #32
   17128:	cmp	r1, #0
   1712c:	mov	r4, r0
   17130:	ldr	r5, [sp, #48]	; 0x30
   17134:	ldr	r6, [sp, #52]	; 0x34
   17138:	beq	17450 <__assert_fail@plt+0x6464>
   1713c:	stm	sp, {r2, r3}
   17140:	mov	r3, r1
   17144:	ldr	r2, [pc, #808]	; 17474 <__assert_fail@plt+0x6488>
   17148:	mov	r1, #1
   1714c:	bl	10f5c <__fprintf_chk@plt>
   17150:	mov	r2, #5
   17154:	ldr	r1, [pc, #796]	; 17478 <__assert_fail@plt+0x648c>
   17158:	mov	r0, #0
   1715c:	bl	10e00 <dcgettext@plt>
   17160:	ldr	r3, [pc, #788]	; 1747c <__assert_fail@plt+0x6490>
   17164:	ldr	r2, [pc, #788]	; 17480 <__assert_fail@plt+0x6494>
   17168:	str	r3, [sp]
   1716c:	mov	r1, #1
   17170:	mov	r3, r0
   17174:	mov	r0, r4
   17178:	bl	10f5c <__fprintf_chk@plt>
   1717c:	mov	r1, r4
   17180:	mov	r0, #10
   17184:	bl	10df4 <fputc_unlocked@plt>
   17188:	mov	r2, #5
   1718c:	ldr	r1, [pc, #752]	; 17484 <__assert_fail@plt+0x6498>
   17190:	mov	r0, #0
   17194:	bl	10e00 <dcgettext@plt>
   17198:	mov	r1, #1
   1719c:	ldr	r3, [pc, #740]	; 17488 <__assert_fail@plt+0x649c>
   171a0:	mov	r2, r0
   171a4:	mov	r0, r4
   171a8:	bl	10f5c <__fprintf_chk@plt>
   171ac:	mov	r1, r4
   171b0:	mov	r0, #10
   171b4:	bl	10df4 <fputc_unlocked@plt>
   171b8:	cmp	r6, #9
   171bc:	ldrls	pc, [pc, r6, lsl #2]
   171c0:	b	17468 <__assert_fail@plt+0x647c>
   171c4:	andeq	r7, r1, r8, asr #4
   171c8:	andeq	r7, r1, r0, asr r2
   171cc:	andeq	r7, r1, ip, ror r2
   171d0:			; <UNDEFINED> instruction: 0x000172b0
   171d4:	andeq	r7, r1, ip, ror #5
   171d8:	andeq	r7, r1, r8, lsr #6
   171dc:	andeq	r7, r1, r4, ror #6
   171e0:	andeq	r7, r1, r8, lsr #7
   171e4:	strdeq	r7, [r1], -r8
   171e8:	andeq	r7, r1, ip, ror #3
   171ec:	ldr	r1, [pc, #664]	; 1748c <__assert_fail@plt+0x64a0>
   171f0:	mov	r2, #5
   171f4:	mov	r0, #0
   171f8:	bl	10e00 <dcgettext@plt>
   171fc:	ldr	ip, [r5, #32]
   17200:	ldr	r1, [r5, #28]
   17204:	ldr	r2, [r5, #24]
   17208:	ldr	r3, [r5]
   1720c:	ldr	r6, [r5, #20]
   17210:	str	ip, [sp, #28]
   17214:	ldr	lr, [r5, #16]
   17218:	str	r1, [sp, #24]
   1721c:	ldr	ip, [r5, #12]
   17220:	str	r2, [sp, #20]
   17224:	ldr	r1, [r5, #8]
   17228:	ldr	r2, [r5, #4]
   1722c:	str	r6, [sp, #16]
   17230:	stmib	sp, {r1, ip, lr}
   17234:	mov	r1, #1
   17238:	str	r2, [sp]
   1723c:	mov	r2, r0
   17240:	mov	r0, r4
   17244:	bl	10f5c <__fprintf_chk@plt>
   17248:	add	sp, sp, #32
   1724c:	pop	{r4, r5, r6, pc}
   17250:	mov	r2, #5
   17254:	ldr	r1, [pc, #564]	; 17490 <__assert_fail@plt+0x64a4>
   17258:	mov	r0, #0
   1725c:	bl	10e00 <dcgettext@plt>
   17260:	ldr	r3, [r5]
   17264:	mov	r1, #1
   17268:	mov	r2, r0
   1726c:	mov	r0, r4
   17270:	add	sp, sp, #32
   17274:	pop	{r4, r5, r6, lr}
   17278:	b	10f5c <__fprintf_chk@plt>
   1727c:	mov	r2, #5
   17280:	ldr	r1, [pc, #524]	; 17494 <__assert_fail@plt+0x64a8>
   17284:	mov	r0, #0
   17288:	bl	10e00 <dcgettext@plt>
   1728c:	ldr	r2, [r5, #4]
   17290:	ldr	r3, [r5]
   17294:	mov	r1, #1
   17298:	str	r2, [sp, #48]	; 0x30
   1729c:	mov	r2, r0
   172a0:	mov	r0, r4
   172a4:	add	sp, sp, #32
   172a8:	pop	{r4, r5, r6, lr}
   172ac:	b	10f5c <__fprintf_chk@plt>
   172b0:	mov	r2, #5
   172b4:	ldr	r1, [pc, #476]	; 17498 <__assert_fail@plt+0x64ac>
   172b8:	mov	r0, #0
   172bc:	bl	10e00 <dcgettext@plt>
   172c0:	ldr	r1, [r5, #8]
   172c4:	ldr	r2, [r5, #4]
   172c8:	ldr	r3, [r5]
   172cc:	str	r1, [sp, #52]	; 0x34
   172d0:	str	r2, [sp, #48]	; 0x30
   172d4:	mov	r1, #1
   172d8:	mov	r2, r0
   172dc:	mov	r0, r4
   172e0:	add	sp, sp, #32
   172e4:	pop	{r4, r5, r6, lr}
   172e8:	b	10f5c <__fprintf_chk@plt>
   172ec:	mov	r2, #5
   172f0:	ldr	r1, [pc, #420]	; 1749c <__assert_fail@plt+0x64b0>
   172f4:	mov	r0, #0
   172f8:	bl	10e00 <dcgettext@plt>
   172fc:	ldr	r1, [r5, #8]
   17300:	ldr	ip, [r5, #12]
   17304:	ldr	r2, [r5, #4]
   17308:	ldr	r3, [r5]
   1730c:	stmib	sp, {r1, ip}
   17310:	str	r2, [sp]
   17314:	mov	r1, #1
   17318:	mov	r2, r0
   1731c:	mov	r0, r4
   17320:	bl	10f5c <__fprintf_chk@plt>
   17324:	b	17248 <__assert_fail@plt+0x625c>
   17328:	mov	r2, #5
   1732c:	ldr	r1, [pc, #364]	; 174a0 <__assert_fail@plt+0x64b4>
   17330:	mov	r0, #0
   17334:	bl	10e00 <dcgettext@plt>
   17338:	add	r1, r5, #8
   1733c:	ldr	r2, [r5, #4]
   17340:	ldm	r1, {r1, ip, lr}
   17344:	ldr	r3, [r5]
   17348:	str	r2, [sp]
   1734c:	stmib	sp, {r1, ip, lr}
   17350:	mov	r1, #1
   17354:	mov	r2, r0
   17358:	mov	r0, r4
   1735c:	bl	10f5c <__fprintf_chk@plt>
   17360:	b	17248 <__assert_fail@plt+0x625c>
   17364:	mov	r2, #5
   17368:	ldr	r1, [pc, #308]	; 174a4 <__assert_fail@plt+0x64b8>
   1736c:	mov	r0, #0
   17370:	bl	10e00 <dcgettext@plt>
   17374:	add	r1, r5, #8
   17378:	ldr	r2, [r5, #4]
   1737c:	ldm	r1, {r1, ip, lr}
   17380:	ldr	r6, [r5, #20]
   17384:	ldr	r3, [r5]
   17388:	stmib	sp, {r1, ip, lr}
   1738c:	mov	r1, #1
   17390:	str	r2, [sp]
   17394:	str	r6, [sp, #16]
   17398:	mov	r2, r0
   1739c:	mov	r0, r4
   173a0:	bl	10f5c <__fprintf_chk@plt>
   173a4:	b	17248 <__assert_fail@plt+0x625c>
   173a8:	mov	r2, #5
   173ac:	ldr	r1, [pc, #244]	; 174a8 <__assert_fail@plt+0x64bc>
   173b0:	mov	r0, #0
   173b4:	bl	10e00 <dcgettext@plt>
   173b8:	ldr	r2, [r5, #24]
   173bc:	ldr	r3, [r5]
   173c0:	ldr	r6, [r5, #20]
   173c4:	ldr	lr, [r5, #16]
   173c8:	ldr	ip, [r5, #12]
   173cc:	str	r2, [sp, #20]
   173d0:	ldr	r1, [r5, #8]
   173d4:	ldr	r2, [r5, #4]
   173d8:	str	r6, [sp, #16]
   173dc:	stmib	sp, {r1, ip, lr}
   173e0:	mov	r1, #1
   173e4:	str	r2, [sp]
   173e8:	mov	r2, r0
   173ec:	mov	r0, r4
   173f0:	bl	10f5c <__fprintf_chk@plt>
   173f4:	b	17248 <__assert_fail@plt+0x625c>
   173f8:	mov	r2, #5
   173fc:	ldr	r1, [pc, #168]	; 174ac <__assert_fail@plt+0x64c0>
   17400:	mov	r0, #0
   17404:	bl	10e00 <dcgettext@plt>
   17408:	ldr	r1, [r5, #28]
   1740c:	ldr	r2, [r5, #24]
   17410:	ldr	r3, [r5]
   17414:	ldr	r6, [r5, #20]
   17418:	ldr	lr, [r5, #16]
   1741c:	str	r1, [sp, #24]
   17420:	ldr	ip, [r5, #12]
   17424:	str	r2, [sp, #20]
   17428:	ldr	r1, [r5, #8]
   1742c:	ldr	r2, [r5, #4]
   17430:	str	r6, [sp, #16]
   17434:	stmib	sp, {r1, ip, lr}
   17438:	mov	r1, #1
   1743c:	str	r2, [sp]
   17440:	mov	r2, r0
   17444:	mov	r0, r4
   17448:	bl	10f5c <__fprintf_chk@plt>
   1744c:	b	17248 <__assert_fail@plt+0x625c>
   17450:	str	r3, [sp]
   17454:	mov	r1, #1
   17458:	mov	r3, r2
   1745c:	ldr	r2, [pc, #76]	; 174b0 <__assert_fail@plt+0x64c4>
   17460:	bl	10f5c <__fprintf_chk@plt>
   17464:	b	17150 <__assert_fail@plt+0x6164>
   17468:	mov	r2, #5
   1746c:	ldr	r1, [pc, #64]	; 174b4 <__assert_fail@plt+0x64c8>
   17470:	b	171f4 <__assert_fail@plt+0x6208>
   17474:	andeq	sl, r1, r4, asr #9
   17478:	ldrdeq	sl, [r1], -r8
   1747c:	andeq	r0, r0, r6, ror #15
   17480:			; <UNDEFINED> instruction: 0x0001a7b0
   17484:	ldrdeq	sl, [r1], -ip
   17488:	andeq	sl, r1, r8, lsl #11
   1748c:			; <UNDEFINED> instruction: 0x0001a6b8
   17490:	andeq	sl, r1, ip, lsr #11
   17494:			; <UNDEFINED> instruction: 0x0001a5bc
   17498:	ldrdeq	sl, [r1], -r4
   1749c:	strdeq	sl, [r1], -r0
   174a0:	andeq	sl, r1, r0, lsl r6
   174a4:	andeq	sl, r1, r4, lsr r6
   174a8:	andeq	sl, r1, ip, asr r6
   174ac:	andeq	sl, r1, r8, lsl #13
   174b0:	ldrdeq	sl, [r1], -r0
   174b4:	andeq	sl, r1, ip, ror #13
   174b8:	push	{r4, r5, lr}
   174bc:	sub	sp, sp, #12
   174c0:	ldr	r5, [sp, #24]
   174c4:	ldr	ip, [r5]
   174c8:	cmp	ip, #0
   174cc:	beq	174e8 <__assert_fail@plt+0x64fc>
   174d0:	mov	lr, r5
   174d4:	mov	ip, #0
   174d8:	ldr	r4, [lr, #4]!
   174dc:	add	ip, ip, #1
   174e0:	cmp	r4, #0
   174e4:	bne	174d8 <__assert_fail@plt+0x64ec>
   174e8:	stm	sp, {r5, ip}
   174ec:	bl	17120 <__assert_fail@plt+0x6134>
   174f0:	add	sp, sp, #12
   174f4:	pop	{r4, r5, pc}
   174f8:	push	{r4, r5, lr}
   174fc:	sub	sp, sp, #76	; 0x4c
   17500:	mov	r5, r0
   17504:	ldr	ip, [sp, #88]	; 0x58
   17508:	ldr	r0, [ip]
   1750c:	cmp	r0, #0
   17510:	str	r0, [sp, #32]
   17514:	beq	178e8 <__assert_fail@plt+0x68fc>
   17518:	ldr	r0, [ip, #4]
   1751c:	cmp	r0, #0
   17520:	str	r0, [sp, #36]	; 0x24
   17524:	beq	178f0 <__assert_fail@plt+0x6904>
   17528:	ldr	r0, [ip, #8]
   1752c:	cmp	r0, #0
   17530:	str	r0, [sp, #40]	; 0x28
   17534:	beq	178f8 <__assert_fail@plt+0x690c>
   17538:	ldr	r0, [ip, #12]
   1753c:	cmp	r0, #0
   17540:	str	r0, [sp, #44]	; 0x2c
   17544:	beq	17900 <__assert_fail@plt+0x6914>
   17548:	ldr	r0, [ip, #16]
   1754c:	cmp	r0, #0
   17550:	str	r0, [sp, #48]	; 0x30
   17554:	beq	17908 <__assert_fail@plt+0x691c>
   17558:	ldr	r0, [ip, #20]
   1755c:	cmp	r0, #0
   17560:	str	r0, [sp, #52]	; 0x34
   17564:	beq	17910 <__assert_fail@plt+0x6924>
   17568:	ldr	r0, [ip, #24]
   1756c:	cmp	r0, #0
   17570:	str	r0, [sp, #56]	; 0x38
   17574:	beq	17918 <__assert_fail@plt+0x692c>
   17578:	ldr	r0, [ip, #28]
   1757c:	cmp	r0, #0
   17580:	str	r0, [sp, #60]	; 0x3c
   17584:	beq	17920 <__assert_fail@plt+0x6934>
   17588:	ldr	r0, [ip, #32]
   1758c:	cmp	r0, #0
   17590:	str	r0, [sp, #64]	; 0x40
   17594:	beq	17928 <__assert_fail@plt+0x693c>
   17598:	ldr	r0, [ip, #36]	; 0x24
   1759c:	cmp	r0, #0
   175a0:	movne	r4, #10
   175a4:	moveq	r4, #9
   175a8:	cmp	r1, #0
   175ac:	beq	178c0 <__assert_fail@plt+0x68d4>
   175b0:	stm	sp, {r2, r3}
   175b4:	mov	r0, r5
   175b8:	mov	r3, r1
   175bc:	ldr	r2, [pc, #876]	; 17930 <__assert_fail@plt+0x6944>
   175c0:	mov	r1, #1
   175c4:	bl	10f5c <__fprintf_chk@plt>
   175c8:	mov	r2, #5
   175cc:	ldr	r1, [pc, #864]	; 17934 <__assert_fail@plt+0x6948>
   175d0:	mov	r0, #0
   175d4:	bl	10e00 <dcgettext@plt>
   175d8:	ldr	r3, [pc, #856]	; 17938 <__assert_fail@plt+0x694c>
   175dc:	ldr	r2, [pc, #856]	; 1793c <__assert_fail@plt+0x6950>
   175e0:	str	r3, [sp]
   175e4:	mov	r1, #1
   175e8:	mov	r3, r0
   175ec:	mov	r0, r5
   175f0:	bl	10f5c <__fprintf_chk@plt>
   175f4:	mov	r1, r5
   175f8:	mov	r0, #10
   175fc:	bl	10df4 <fputc_unlocked@plt>
   17600:	mov	r2, #5
   17604:	ldr	r1, [pc, #820]	; 17940 <__assert_fail@plt+0x6954>
   17608:	mov	r0, #0
   1760c:	bl	10e00 <dcgettext@plt>
   17610:	mov	r1, #1
   17614:	ldr	r3, [pc, #808]	; 17944 <__assert_fail@plt+0x6958>
   17618:	mov	r2, r0
   1761c:	mov	r0, r5
   17620:	bl	10f5c <__fprintf_chk@plt>
   17624:	mov	r1, r5
   17628:	mov	r0, #10
   1762c:	bl	10df4 <fputc_unlocked@plt>
   17630:	cmp	r4, #9
   17634:	ldrls	pc, [pc, r4, lsl #2]
   17638:	b	178dc <__assert_fail@plt+0x68f0>
   1763c:	andeq	r7, r1, r0, asr #13
   17640:	andeq	r7, r1, r8, asr #13
   17644:	strdeq	r7, [r1], -r4
   17648:	andeq	r7, r1, r8, lsr #14
   1764c:	andeq	r7, r1, r0, ror #14
   17650:	muleq	r1, ip, r7
   17654:	ldrdeq	r7, [r1], -r8
   17658:	andeq	r7, r1, ip, lsl r8
   1765c:	andeq	r7, r1, r8, ror #16
   17660:	andeq	r7, r1, r4, ror #12
   17664:	ldr	r1, [pc, #732]	; 17948 <__assert_fail@plt+0x695c>
   17668:	mov	r2, #5
   1766c:	mov	r0, #0
   17670:	bl	10e00 <dcgettext@plt>
   17674:	ldr	ip, [sp, #64]	; 0x40
   17678:	ldr	r1, [sp, #60]	; 0x3c
   1767c:	ldr	r2, [sp, #56]	; 0x38
   17680:	ldr	lr, [sp, #48]	; 0x30
   17684:	str	ip, [sp, #28]
   17688:	str	r1, [sp, #24]
   1768c:	ldr	ip, [sp, #44]	; 0x2c
   17690:	ldr	r1, [sp, #40]	; 0x28
   17694:	ldr	r4, [sp, #52]	; 0x34
   17698:	str	r2, [sp, #20]
   1769c:	ldr	r2, [sp, #36]	; 0x24
   176a0:	stmib	sp, {r1, ip, lr}
   176a4:	mov	r1, #1
   176a8:	str	r2, [sp]
   176ac:	ldr	r3, [sp, #32]
   176b0:	str	r4, [sp, #16]
   176b4:	mov	r2, r0
   176b8:	mov	r0, r5
   176bc:	bl	10f5c <__fprintf_chk@plt>
   176c0:	add	sp, sp, #76	; 0x4c
   176c4:	pop	{r4, r5, pc}
   176c8:	mov	r2, #5
   176cc:	ldr	r1, [pc, #632]	; 1794c <__assert_fail@plt+0x6960>
   176d0:	mov	r0, #0
   176d4:	bl	10e00 <dcgettext@plt>
   176d8:	ldr	r3, [sp, #32]
   176dc:	mov	r1, #1
   176e0:	mov	r2, r0
   176e4:	mov	r0, r5
   176e8:	add	sp, sp, #76	; 0x4c
   176ec:	pop	{r4, r5, lr}
   176f0:	b	10f5c <__fprintf_chk@plt>
   176f4:	mov	r2, #5
   176f8:	ldr	r1, [pc, #592]	; 17950 <__assert_fail@plt+0x6964>
   176fc:	mov	r0, #0
   17700:	bl	10e00 <dcgettext@plt>
   17704:	ldr	r2, [sp, #36]	; 0x24
   17708:	ldr	r3, [sp, #32]
   1770c:	str	r2, [sp, #88]	; 0x58
   17710:	mov	r1, #1
   17714:	mov	r2, r0
   17718:	mov	r0, r5
   1771c:	add	sp, sp, #76	; 0x4c
   17720:	pop	{r4, r5, lr}
   17724:	b	10f5c <__fprintf_chk@plt>
   17728:	mov	r2, #5
   1772c:	ldr	r1, [pc, #544]	; 17954 <__assert_fail@plt+0x6968>
   17730:	mov	r0, #0
   17734:	bl	10e00 <dcgettext@plt>
   17738:	ldr	r1, [sp, #40]	; 0x28
   1773c:	ldr	r2, [sp, #36]	; 0x24
   17740:	str	r1, [sp, #4]
   17744:	str	r2, [sp]
   17748:	ldr	r3, [sp, #32]
   1774c:	mov	r1, #1
   17750:	mov	r2, r0
   17754:	mov	r0, r5
   17758:	bl	10f5c <__fprintf_chk@plt>
   1775c:	b	176c0 <__assert_fail@plt+0x66d4>
   17760:	mov	r2, #5
   17764:	ldr	r1, [pc, #492]	; 17958 <__assert_fail@plt+0x696c>
   17768:	mov	r0, #0
   1776c:	bl	10e00 <dcgettext@plt>
   17770:	ldr	r1, [sp, #40]	; 0x28
   17774:	ldr	ip, [sp, #44]	; 0x2c
   17778:	ldr	r2, [sp, #36]	; 0x24
   1777c:	ldr	r3, [sp, #32]
   17780:	stmib	sp, {r1, ip}
   17784:	str	r2, [sp]
   17788:	mov	r1, #1
   1778c:	mov	r2, r0
   17790:	mov	r0, r5
   17794:	bl	10f5c <__fprintf_chk@plt>
   17798:	b	176c0 <__assert_fail@plt+0x66d4>
   1779c:	mov	r2, #5
   177a0:	ldr	r1, [pc, #436]	; 1795c <__assert_fail@plt+0x6970>
   177a4:	mov	r0, #0
   177a8:	bl	10e00 <dcgettext@plt>
   177ac:	add	r1, sp, #40	; 0x28
   177b0:	ldr	r2, [sp, #36]	; 0x24
   177b4:	ldm	r1, {r1, ip, lr}
   177b8:	ldr	r3, [sp, #32]
   177bc:	str	r2, [sp]
   177c0:	stmib	sp, {r1, ip, lr}
   177c4:	mov	r1, #1
   177c8:	mov	r2, r0
   177cc:	mov	r0, r5
   177d0:	bl	10f5c <__fprintf_chk@plt>
   177d4:	b	176c0 <__assert_fail@plt+0x66d4>
   177d8:	mov	r2, #5
   177dc:	ldr	r1, [pc, #380]	; 17960 <__assert_fail@plt+0x6974>
   177e0:	mov	r0, #0
   177e4:	bl	10e00 <dcgettext@plt>
   177e8:	add	r1, sp, #40	; 0x28
   177ec:	ldr	r2, [sp, #36]	; 0x24
   177f0:	ldm	r1, {r1, ip, lr}
   177f4:	ldr	r4, [sp, #52]	; 0x34
   177f8:	str	r2, [sp]
   177fc:	stmib	sp, {r1, ip, lr}
   17800:	mov	r1, #1
   17804:	ldr	r3, [sp, #32]
   17808:	str	r4, [sp, #16]
   1780c:	mov	r2, r0
   17810:	mov	r0, r5
   17814:	bl	10f5c <__fprintf_chk@plt>
   17818:	b	176c0 <__assert_fail@plt+0x66d4>
   1781c:	mov	r2, #5
   17820:	ldr	r1, [pc, #316]	; 17964 <__assert_fail@plt+0x6978>
   17824:	mov	r0, #0
   17828:	bl	10e00 <dcgettext@plt>
   1782c:	add	r1, sp, #40	; 0x28
   17830:	ldr	r2, [sp, #56]	; 0x38
   17834:	ldm	r1, {r1, ip, lr}
   17838:	ldr	r4, [sp, #52]	; 0x34
   1783c:	str	r2, [sp, #20]
   17840:	ldr	r2, [sp, #36]	; 0x24
   17844:	stmib	sp, {r1, ip, lr}
   17848:	mov	r1, #1
   1784c:	str	r2, [sp]
   17850:	ldr	r3, [sp, #32]
   17854:	str	r4, [sp, #16]
   17858:	mov	r2, r0
   1785c:	mov	r0, r5
   17860:	bl	10f5c <__fprintf_chk@plt>
   17864:	b	176c0 <__assert_fail@plt+0x66d4>
   17868:	mov	r2, #5
   1786c:	ldr	r1, [pc, #244]	; 17968 <__assert_fail@plt+0x697c>
   17870:	mov	r0, #0
   17874:	bl	10e00 <dcgettext@plt>
   17878:	ldr	r1, [sp, #60]	; 0x3c
   1787c:	ldr	r2, [sp, #56]	; 0x38
   17880:	ldr	lr, [sp, #48]	; 0x30
   17884:	ldr	ip, [sp, #44]	; 0x2c
   17888:	str	r1, [sp, #24]
   1788c:	ldr	r1, [sp, #40]	; 0x28
   17890:	ldr	r4, [sp, #52]	; 0x34
   17894:	str	r2, [sp, #20]
   17898:	ldr	r2, [sp, #36]	; 0x24
   1789c:	stmib	sp, {r1, ip, lr}
   178a0:	mov	r1, #1
   178a4:	str	r2, [sp]
   178a8:	ldr	r3, [sp, #32]
   178ac:	str	r4, [sp, #16]
   178b0:	mov	r2, r0
   178b4:	mov	r0, r5
   178b8:	bl	10f5c <__fprintf_chk@plt>
   178bc:	b	176c0 <__assert_fail@plt+0x66d4>
   178c0:	str	r3, [sp]
   178c4:	mov	r1, #1
   178c8:	mov	r3, r2
   178cc:	mov	r0, r5
   178d0:	ldr	r2, [pc, #148]	; 1796c <__assert_fail@plt+0x6980>
   178d4:	bl	10f5c <__fprintf_chk@plt>
   178d8:	b	175c8 <__assert_fail@plt+0x65dc>
   178dc:	mov	r2, #5
   178e0:	ldr	r1, [pc, #136]	; 17970 <__assert_fail@plt+0x6984>
   178e4:	b	1766c <__assert_fail@plt+0x6680>
   178e8:	mov	r4, r0
   178ec:	b	175a8 <__assert_fail@plt+0x65bc>
   178f0:	mov	r4, #1
   178f4:	b	175a8 <__assert_fail@plt+0x65bc>
   178f8:	mov	r4, #2
   178fc:	b	175a8 <__assert_fail@plt+0x65bc>
   17900:	mov	r4, #3
   17904:	b	175a8 <__assert_fail@plt+0x65bc>
   17908:	mov	r4, #4
   1790c:	b	175a8 <__assert_fail@plt+0x65bc>
   17910:	mov	r4, #5
   17914:	b	175a8 <__assert_fail@plt+0x65bc>
   17918:	mov	r4, #6
   1791c:	b	175a8 <__assert_fail@plt+0x65bc>
   17920:	mov	r4, #7
   17924:	b	175a8 <__assert_fail@plt+0x65bc>
   17928:	mov	r4, #8
   1792c:	b	175a8 <__assert_fail@plt+0x65bc>
   17930:	andeq	sl, r1, r4, asr #9
   17934:	ldrdeq	sl, [r1], -r8
   17938:	andeq	r0, r0, r6, ror #15
   1793c:			; <UNDEFINED> instruction: 0x0001a7b0
   17940:	ldrdeq	sl, [r1], -ip
   17944:	andeq	sl, r1, r8, lsl #11
   17948:			; <UNDEFINED> instruction: 0x0001a6b8
   1794c:	andeq	sl, r1, ip, lsr #11
   17950:			; <UNDEFINED> instruction: 0x0001a5bc
   17954:	ldrdeq	sl, [r1], -r4
   17958:	strdeq	sl, [r1], -r0
   1795c:	andeq	sl, r1, r0, lsl r6
   17960:	andeq	sl, r1, r4, lsr r6
   17964:	andeq	sl, r1, ip, asr r6
   17968:	andeq	sl, r1, r8, lsl #13
   1796c:	ldrdeq	sl, [r1], -r0
   17970:	andeq	sl, r1, ip, ror #13
   17974:	push	{r3}		; (str r3, [sp, #-4]!)
   17978:	push	{lr}		; (str lr, [sp, #-4]!)
   1797c:	sub	sp, sp, #56	; 0x38
   17980:	add	r3, sp, #64	; 0x40
   17984:	ldr	ip, [sp, #64]	; 0x40
   17988:	str	r3, [sp, #12]
   1798c:	cmp	ip, #0
   17990:	str	ip, [sp, #16]
   17994:	beq	17a2c <__assert_fail@plt+0x6a40>
   17998:	ldr	ip, [sp, #68]	; 0x44
   1799c:	cmp	ip, #0
   179a0:	str	ip, [sp, #20]
   179a4:	beq	17a4c <__assert_fail@plt+0x6a60>
   179a8:	ldr	ip, [sp, #72]	; 0x48
   179ac:	cmp	ip, #0
   179b0:	str	ip, [sp, #24]
   179b4:	beq	17a54 <__assert_fail@plt+0x6a68>
   179b8:	ldr	ip, [sp, #76]	; 0x4c
   179bc:	cmp	ip, #0
   179c0:	str	ip, [sp, #28]
   179c4:	beq	17a5c <__assert_fail@plt+0x6a70>
   179c8:	ldr	ip, [sp, #80]	; 0x50
   179cc:	cmp	ip, #0
   179d0:	str	ip, [sp, #32]
   179d4:	beq	17a64 <__assert_fail@plt+0x6a78>
   179d8:	ldr	ip, [sp, #84]	; 0x54
   179dc:	cmp	ip, #0
   179e0:	str	ip, [sp, #36]	; 0x24
   179e4:	beq	17a6c <__assert_fail@plt+0x6a80>
   179e8:	ldr	ip, [sp, #88]	; 0x58
   179ec:	cmp	ip, #0
   179f0:	str	ip, [sp, #40]	; 0x28
   179f4:	beq	17a74 <__assert_fail@plt+0x6a88>
   179f8:	ldr	ip, [sp, #92]	; 0x5c
   179fc:	cmp	ip, #0
   17a00:	str	ip, [sp, #44]	; 0x2c
   17a04:	beq	17a7c <__assert_fail@plt+0x6a90>
   17a08:	ldr	ip, [sp, #96]	; 0x60
   17a0c:	cmp	ip, #0
   17a10:	str	ip, [sp, #48]	; 0x30
   17a14:	beq	17a84 <__assert_fail@plt+0x6a98>
   17a18:	ldr	ip, [sp, #100]	; 0x64
   17a1c:	cmp	ip, #0
   17a20:	str	ip, [sp, #52]	; 0x34
   17a24:	movne	ip, #10
   17a28:	moveq	ip, #9
   17a2c:	add	r3, sp, #16
   17a30:	stm	sp, {r3, ip}
   17a34:	ldr	r3, [sp, #60]	; 0x3c
   17a38:	bl	17120 <__assert_fail@plt+0x6134>
   17a3c:	add	sp, sp, #56	; 0x38
   17a40:	pop	{lr}		; (ldr lr, [sp], #4)
   17a44:	add	sp, sp, #4
   17a48:	bx	lr
   17a4c:	mov	ip, #1
   17a50:	b	17a2c <__assert_fail@plt+0x6a40>
   17a54:	mov	ip, #2
   17a58:	b	17a2c <__assert_fail@plt+0x6a40>
   17a5c:	mov	ip, #3
   17a60:	b	17a2c <__assert_fail@plt+0x6a40>
   17a64:	mov	ip, #4
   17a68:	b	17a2c <__assert_fail@plt+0x6a40>
   17a6c:	mov	ip, #5
   17a70:	b	17a2c <__assert_fail@plt+0x6a40>
   17a74:	mov	ip, #6
   17a78:	b	17a2c <__assert_fail@plt+0x6a40>
   17a7c:	mov	ip, #7
   17a80:	b	17a2c <__assert_fail@plt+0x6a40>
   17a84:	mov	ip, #8
   17a88:	b	17a2c <__assert_fail@plt+0x6a40>
   17a8c:	ldr	r3, [pc, #116]	; 17b08 <__assert_fail@plt+0x6b1c>
   17a90:	push	{r4, lr}
   17a94:	mov	r0, #10
   17a98:	ldr	r1, [r3]
   17a9c:	bl	10df4 <fputc_unlocked@plt>
   17aa0:	mov	r2, #5
   17aa4:	ldr	r1, [pc, #96]	; 17b0c <__assert_fail@plt+0x6b20>
   17aa8:	mov	r0, #0
   17aac:	bl	10e00 <dcgettext@plt>
   17ab0:	ldr	r2, [pc, #88]	; 17b10 <__assert_fail@plt+0x6b24>
   17ab4:	mov	r1, r0
   17ab8:	mov	r0, #1
   17abc:	bl	10f44 <__printf_chk@plt>
   17ac0:	mov	r2, #5
   17ac4:	ldr	r1, [pc, #72]	; 17b14 <__assert_fail@plt+0x6b28>
   17ac8:	mov	r0, #0
   17acc:	bl	10e00 <dcgettext@plt>
   17ad0:	ldr	r3, [pc, #64]	; 17b18 <__assert_fail@plt+0x6b2c>
   17ad4:	ldr	r2, [pc, #64]	; 17b1c <__assert_fail@plt+0x6b30>
   17ad8:	mov	r1, r0
   17adc:	mov	r0, #1
   17ae0:	bl	10f44 <__printf_chk@plt>
   17ae4:	mov	r2, #5
   17ae8:	ldr	r1, [pc, #48]	; 17b20 <__assert_fail@plt+0x6b34>
   17aec:	mov	r0, #0
   17af0:	bl	10e00 <dcgettext@plt>
   17af4:	ldr	r2, [pc, #40]	; 17b24 <__assert_fail@plt+0x6b38>
   17af8:	pop	{r4, lr}
   17afc:	mov	r1, r0
   17b00:	mov	r0, #1
   17b04:	b	10f44 <__printf_chk@plt>
   17b08:	andeq	fp, r2, r4, ror #2
   17b0c:	andeq	sl, r1, r8, lsr #14
   17b10:	andeq	sl, r1, ip, lsr r7
   17b14:	andeq	sl, r1, r4, asr r7
   17b18:	andeq	r9, r1, r8, ror #30
   17b1c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   17b20:	andeq	sl, r1, r8, ror #14
   17b24:	muleq	r1, r0, r7
   17b28:	push	{r4, r5, r6, lr}
   17b2c:	mov	r6, r0
   17b30:	mov	r5, r1
   17b34:	mov	r4, r2
   17b38:	bl	19188 <__assert_fail@plt+0x819c>
   17b3c:	cmp	r0, #0
   17b40:	popne	{r4, r5, r6, pc}
   17b44:	cmp	r6, #0
   17b48:	beq	17b58 <__assert_fail@plt+0x6b6c>
   17b4c:	cmp	r5, #0
   17b50:	cmpne	r4, #0
   17b54:	popeq	{r4, r5, r6, pc}
   17b58:	bl	181a4 <__assert_fail@plt+0x71b8>
   17b5c:	push	{r4, lr}
   17b60:	bl	18ffc <__assert_fail@plt+0x8010>
   17b64:	cmp	r0, #0
   17b68:	popne	{r4, pc}
   17b6c:	bl	181a4 <__assert_fail@plt+0x71b8>
   17b70:	push	{r4, lr}
   17b74:	bl	18ffc <__assert_fail@plt+0x8010>
   17b78:	cmp	r0, #0
   17b7c:	popne	{r4, pc}
   17b80:	bl	181a4 <__assert_fail@plt+0x71b8>
   17b84:	push	{r4, lr}
   17b88:	bl	18ffc <__assert_fail@plt+0x8010>
   17b8c:	cmp	r0, #0
   17b90:	popne	{r4, pc}
   17b94:	bl	181a4 <__assert_fail@plt+0x71b8>
   17b98:	push	{r4, r5, r6, lr}
   17b9c:	mov	r5, r0
   17ba0:	mov	r4, r1
   17ba4:	bl	19028 <__assert_fail@plt+0x803c>
   17ba8:	cmp	r0, #0
   17bac:	popne	{r4, r5, r6, pc}
   17bb0:	adds	r4, r4, #0
   17bb4:	movne	r4, #1
   17bb8:	cmp	r5, #0
   17bbc:	orreq	r4, r4, #1
   17bc0:	cmp	r4, #0
   17bc4:	popeq	{r4, r5, r6, pc}
   17bc8:	bl	181a4 <__assert_fail@plt+0x71b8>
   17bcc:	push	{r4, lr}
   17bd0:	cmp	r1, #0
   17bd4:	orreq	r1, r1, #1
   17bd8:	bl	19028 <__assert_fail@plt+0x803c>
   17bdc:	cmp	r0, #0
   17be0:	popne	{r4, pc}
   17be4:	bl	181a4 <__assert_fail@plt+0x71b8>
   17be8:	push	{r4, r5, r6, lr}
   17bec:	mov	r6, r0
   17bf0:	mov	r5, r1
   17bf4:	mov	r4, r2
   17bf8:	bl	19188 <__assert_fail@plt+0x819c>
   17bfc:	cmp	r0, #0
   17c00:	popne	{r4, r5, r6, pc}
   17c04:	cmp	r6, #0
   17c08:	beq	17c18 <__assert_fail@plt+0x6c2c>
   17c0c:	cmp	r5, #0
   17c10:	cmpne	r4, #0
   17c14:	popeq	{r4, r5, r6, pc}
   17c18:	bl	181a4 <__assert_fail@plt+0x71b8>
   17c1c:	cmp	r2, #0
   17c20:	cmpne	r1, #0
   17c24:	moveq	r2, #1
   17c28:	moveq	r1, r2
   17c2c:	push	{r4, lr}
   17c30:	bl	19188 <__assert_fail@plt+0x819c>
   17c34:	cmp	r0, #0
   17c38:	popne	{r4, pc}
   17c3c:	bl	181a4 <__assert_fail@plt+0x71b8>
   17c40:	push	{r4, lr}
   17c44:	mov	r2, r1
   17c48:	mov	r1, r0
   17c4c:	mov	r0, #0
   17c50:	bl	19188 <__assert_fail@plt+0x819c>
   17c54:	cmp	r0, #0
   17c58:	popne	{r4, pc}
   17c5c:	bl	181a4 <__assert_fail@plt+0x71b8>
   17c60:	cmp	r1, #0
   17c64:	cmpne	r0, #0
   17c68:	moveq	r2, #1
   17c6c:	movne	r2, r1
   17c70:	moveq	r1, r2
   17c74:	movne	r1, r0
   17c78:	push	{r4, lr}
   17c7c:	mov	r0, #0
   17c80:	bl	19188 <__assert_fail@plt+0x819c>
   17c84:	cmp	r0, #0
   17c88:	popne	{r4, pc}
   17c8c:	bl	181a4 <__assert_fail@plt+0x71b8>
   17c90:	cmp	r0, #0
   17c94:	push	{r4, r5, r6, lr}
   17c98:	mov	r5, r1
   17c9c:	ldr	r4, [r1]
   17ca0:	beq	17cdc <__assert_fail@plt+0x6cf0>
   17ca4:	lsr	r2, r4, #1
   17ca8:	add	r3, r2, #1
   17cac:	mvn	r3, r3
   17cb0:	cmp	r4, r3
   17cb4:	bhi	17cf8 <__assert_fail@plt+0x6d0c>
   17cb8:	add	r4, r4, #1
   17cbc:	add	r4, r4, r2
   17cc0:	mov	r1, r4
   17cc4:	mov	r2, #1
   17cc8:	bl	19188 <__assert_fail@plt+0x819c>
   17ccc:	cmp	r0, #0
   17cd0:	beq	17cfc <__assert_fail@plt+0x6d10>
   17cd4:	str	r4, [r5]
   17cd8:	pop	{r4, r5, r6, pc}
   17cdc:	cmp	r4, #0
   17ce0:	moveq	r4, #64	; 0x40
   17ce4:	mov	r1, r4
   17ce8:	mov	r2, #1
   17cec:	bl	19188 <__assert_fail@plt+0x819c>
   17cf0:	cmp	r0, #0
   17cf4:	bne	17cd4 <__assert_fail@plt+0x6ce8>
   17cf8:	bl	181a4 <__assert_fail@plt+0x71b8>
   17cfc:	cmp	r4, #0
   17d00:	bne	17cf8 <__assert_fail@plt+0x6d0c>
   17d04:	str	r4, [r5]
   17d08:	pop	{r4, r5, r6, pc}
   17d0c:	cmp	r0, #0
   17d10:	push	{r4, r5, r6, lr}
   17d14:	mov	r5, r1
   17d18:	ldr	r4, [r1]
   17d1c:	mov	r6, r2
   17d20:	beq	17d64 <__assert_fail@plt+0x6d78>
   17d24:	lsr	r1, r4, #1
   17d28:	add	r3, r1, #1
   17d2c:	mvn	r3, r3
   17d30:	cmp	r4, r3
   17d34:	bhi	17d9c <__assert_fail@plt+0x6db0>
   17d38:	add	r4, r4, #1
   17d3c:	add	r4, r4, r1
   17d40:	mov	r1, r4
   17d44:	bl	19188 <__assert_fail@plt+0x819c>
   17d48:	cmp	r0, #0
   17d4c:	bne	17d5c <__assert_fail@plt+0x6d70>
   17d50:	cmp	r4, #0
   17d54:	cmpne	r6, #0
   17d58:	bne	17d9c <__assert_fail@plt+0x6db0>
   17d5c:	str	r4, [r5]
   17d60:	pop	{r4, r5, r6, pc}
   17d64:	cmp	r4, #0
   17d68:	bne	17d84 <__assert_fail@plt+0x6d98>
   17d6c:	mov	r1, r2
   17d70:	mov	r0, #64	; 0x40
   17d74:	bl	192c8 <__assert_fail@plt+0x82dc>
   17d78:	cmp	r0, #0
   17d7c:	movne	r4, r0
   17d80:	addeq	r4, r0, #1
   17d84:	mov	r2, r6
   17d88:	mov	r1, r4
   17d8c:	mov	r0, #0
   17d90:	bl	19188 <__assert_fail@plt+0x819c>
   17d94:	cmp	r0, #0
   17d98:	bne	17d5c <__assert_fail@plt+0x6d70>
   17d9c:	bl	181a4 <__assert_fail@plt+0x71b8>
   17da0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17da4:	sub	sp, sp, #12
   17da8:	ldr	r6, [r1]
   17dac:	mov	r8, r1
   17db0:	mov	r9, r0
   17db4:	asrs	r4, r6, #1
   17db8:	mov	sl, r2
   17dbc:	mov	fp, r3
   17dc0:	ldr	r7, [sp, #48]	; 0x30
   17dc4:	bmi	17f40 <__assert_fail@plt+0x6f54>
   17dc8:	mvn	r1, #-2147483648	; 0x80000000
   17dcc:	sub	r1, r1, r4
   17dd0:	cmp	r6, r1
   17dd4:	movle	r1, #0
   17dd8:	movgt	r1, #1
   17ddc:	mvn	r3, fp
   17de0:	cmp	r1, #0
   17de4:	addeq	r4, r4, r6
   17de8:	mvnne	r4, #-2147483648	; 0x80000000
   17dec:	lsr	r3, r3, #31
   17df0:	cmp	fp, r4
   17df4:	movge	r2, #0
   17df8:	andlt	r2, r3, #1
   17dfc:	cmp	r2, #0
   17e00:	beq	17ef0 <__assert_fail@plt+0x6f04>
   17e04:	cmp	r7, #0
   17e08:	blt	17fd8 <__assert_fail@plt+0x6fec>
   17e0c:	bne	17fd0 <__assert_fail@plt+0x6fe4>
   17e10:	mov	r5, #64	; 0x40
   17e14:	mov	r1, r7
   17e18:	mov	r0, r5
   17e1c:	str	r3, [sp, #4]
   17e20:	bl	194d4 <__assert_fail@plt+0x84e8>
   17e24:	mov	r1, r7
   17e28:	mov	r4, r0
   17e2c:	mov	r0, r5
   17e30:	bl	196f4 <__assert_fail@plt+0x8708>
   17e34:	ldr	r3, [sp, #4]
   17e38:	sub	r5, r5, r1
   17e3c:	cmp	r9, #0
   17e40:	sub	r2, r4, r6
   17e44:	streq	r9, [r8]
   17e48:	cmp	r2, sl
   17e4c:	bge	17ed0 <__assert_fail@plt+0x6ee4>
   17e50:	cmp	sl, #0
   17e54:	blt	17f70 <__assert_fail@plt+0x6f84>
   17e58:	cmp	r6, #0
   17e5c:	blt	17e7c <__assert_fail@plt+0x6e90>
   17e60:	mvn	r2, #-2147483648	; 0x80000000
   17e64:	sub	r2, r2, sl
   17e68:	cmp	r6, r2
   17e6c:	movle	r2, #0
   17e70:	movgt	r2, #1
   17e74:	cmp	r2, #0
   17e78:	bne	17f6c <__assert_fail@plt+0x6f80>
   17e7c:	add	r6, r6, sl
   17e80:	cmp	fp, r6
   17e84:	movge	r3, #0
   17e88:	andlt	r3, r3, #1
   17e8c:	cmp	r3, #0
   17e90:	mov	r4, r6
   17e94:	bne	17f6c <__assert_fail@plt+0x6f80>
   17e98:	cmp	r7, #0
   17e9c:	blt	17f84 <__assert_fail@plt+0x6f98>
   17ea0:	beq	17ecc <__assert_fail@plt+0x6ee0>
   17ea4:	cmp	r6, #0
   17ea8:	blt	18028 <__assert_fail@plt+0x703c>
   17eac:	mov	r1, r7
   17eb0:	mvn	r0, #-2147483648	; 0x80000000
   17eb4:	bl	194d4 <__assert_fail@plt+0x84e8>
   17eb8:	cmp	r6, r0
   17ebc:	movle	r0, #0
   17ec0:	movgt	r0, #1
   17ec4:	cmp	r0, #0
   17ec8:	bne	17f6c <__assert_fail@plt+0x6f80>
   17ecc:	mul	r5, r6, r7
   17ed0:	mov	r1, r5
   17ed4:	mov	r0, r9
   17ed8:	bl	19028 <__assert_fail@plt+0x803c>
   17edc:	cmp	r0, #0
   17ee0:	beq	17f54 <__assert_fail@plt+0x6f68>
   17ee4:	str	r4, [r8]
   17ee8:	add	sp, sp, #12
   17eec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ef0:	cmp	r7, #0
   17ef4:	blt	17fb0 <__assert_fail@plt+0x6fc4>
   17ef8:	beq	17e10 <__assert_fail@plt+0x6e24>
   17efc:	cmp	r4, #0
   17f00:	blt	17fe0 <__assert_fail@plt+0x6ff4>
   17f04:	mov	r1, r7
   17f08:	mvn	r0, #-2147483648	; 0x80000000
   17f0c:	str	r3, [sp, #4]
   17f10:	bl	194d4 <__assert_fail@plt+0x84e8>
   17f14:	ldr	r3, [sp, #4]
   17f18:	cmp	r0, r4
   17f1c:	movge	r0, #0
   17f20:	movlt	r0, #1
   17f24:	cmp	r0, #0
   17f28:	mvnne	r5, #-2147483648	; 0x80000000
   17f2c:	bne	17e14 <__assert_fail@plt+0x6e28>
   17f30:	mul	r5, r7, r4
   17f34:	cmp	r5, #63	; 0x3f
   17f38:	bgt	17e3c <__assert_fail@plt+0x6e50>
   17f3c:	b	17e10 <__assert_fail@plt+0x6e24>
   17f40:	rsb	r1, r4, #-2147483648	; 0x80000000
   17f44:	cmp	r6, r1
   17f48:	movge	r1, #0
   17f4c:	movlt	r1, #1
   17f50:	b	17ddc <__assert_fail@plt+0x6df0>
   17f54:	adds	r5, r5, #0
   17f58:	movne	r5, #1
   17f5c:	cmp	r9, #0
   17f60:	orreq	r5, r5, #1
   17f64:	cmp	r5, #0
   17f68:	beq	17ee4 <__assert_fail@plt+0x6ef8>
   17f6c:	bl	181a4 <__assert_fail@plt+0x71b8>
   17f70:	rsb	r2, sl, #-2147483648	; 0x80000000
   17f74:	cmp	r6, r2
   17f78:	movge	r2, #0
   17f7c:	movlt	r2, #1
   17f80:	b	17e74 <__assert_fail@plt+0x6e88>
   17f84:	cmp	r6, #0
   17f88:	blt	1800c <__assert_fail@plt+0x7020>
   17f8c:	cmn	r7, #1
   17f90:	beq	17ecc <__assert_fail@plt+0x6ee0>
   17f94:	mov	r1, r7
   17f98:	mov	r0, #-2147483648	; 0x80000000
   17f9c:	bl	194d4 <__assert_fail@plt+0x84e8>
   17fa0:	cmp	r6, r0
   17fa4:	movle	r0, #0
   17fa8:	movgt	r0, #1
   17fac:	b	17ec4 <__assert_fail@plt+0x6ed8>
   17fb0:	cmp	r4, #0
   17fb4:	blt	1804c <__assert_fail@plt+0x7060>
   17fb8:	cmn	r7, #1
   17fbc:	beq	17f30 <__assert_fail@plt+0x6f44>
   17fc0:	str	r3, [sp, #4]
   17fc4:	mov	r1, r7
   17fc8:	mov	r0, #-2147483648	; 0x80000000
   17fcc:	b	17f10 <__assert_fail@plt+0x6f24>
   17fd0:	mov	r4, fp
   17fd4:	b	17f04 <__assert_fail@plt+0x6f18>
   17fd8:	mov	r4, fp
   17fdc:	b	17fb8 <__assert_fail@plt+0x6fcc>
   17fe0:	cmn	r4, #1
   17fe4:	beq	17f30 <__assert_fail@plt+0x6f44>
   17fe8:	mov	r1, r4
   17fec:	mov	r0, #-2147483648	; 0x80000000
   17ff0:	str	r3, [sp, #4]
   17ff4:	bl	194d4 <__assert_fail@plt+0x84e8>
   17ff8:	ldr	r3, [sp, #4]
   17ffc:	cmp	r7, r0
   18000:	movle	r0, #0
   18004:	movgt	r0, #1
   18008:	b	17f24 <__assert_fail@plt+0x6f38>
   1800c:	mov	r1, r7
   18010:	mvn	r0, #-2147483648	; 0x80000000
   18014:	bl	194d4 <__assert_fail@plt+0x84e8>
   18018:	cmp	r6, r0
   1801c:	movge	r0, #0
   18020:	movlt	r0, #1
   18024:	b	17ec4 <__assert_fail@plt+0x6ed8>
   18028:	cmn	r6, #1
   1802c:	beq	17ecc <__assert_fail@plt+0x6ee0>
   18030:	mov	r1, r6
   18034:	mov	r0, #-2147483648	; 0x80000000
   18038:	bl	194d4 <__assert_fail@plt+0x84e8>
   1803c:	cmp	r7, r0
   18040:	movle	r0, #0
   18044:	movgt	r0, #1
   18048:	b	17ec4 <__assert_fail@plt+0x6ed8>
   1804c:	mov	r1, r7
   18050:	mvn	r0, #-2147483648	; 0x80000000
   18054:	str	r3, [sp, #4]
   18058:	bl	194d4 <__assert_fail@plt+0x84e8>
   1805c:	ldr	r3, [sp, #4]
   18060:	cmp	r0, r4
   18064:	movle	r0, #0
   18068:	movgt	r0, #1
   1806c:	b	17f24 <__assert_fail@plt+0x6f38>
   18070:	push	{r4, lr}
   18074:	mov	r1, #1
   18078:	bl	18fb4 <__assert_fail@plt+0x7fc8>
   1807c:	cmp	r0, #0
   18080:	popne	{r4, pc}
   18084:	bl	181a4 <__assert_fail@plt+0x71b8>
   18088:	push	{r4, lr}
   1808c:	mov	r1, #1
   18090:	bl	18fb4 <__assert_fail@plt+0x7fc8>
   18094:	cmp	r0, #0
   18098:	popne	{r4, pc}
   1809c:	bl	181a4 <__assert_fail@plt+0x71b8>
   180a0:	push	{r4, lr}
   180a4:	bl	18fb4 <__assert_fail@plt+0x7fc8>
   180a8:	cmp	r0, #0
   180ac:	popne	{r4, pc}
   180b0:	bl	181a4 <__assert_fail@plt+0x71b8>
   180b4:	push	{r4, lr}
   180b8:	bl	18fb4 <__assert_fail@plt+0x7fc8>
   180bc:	cmp	r0, #0
   180c0:	popne	{r4, pc}
   180c4:	bl	181a4 <__assert_fail@plt+0x71b8>
   180c8:	push	{r4, r5, r6, lr}
   180cc:	mov	r6, r0
   180d0:	mov	r0, r1
   180d4:	mov	r4, r1
   180d8:	bl	18ffc <__assert_fail@plt+0x8010>
   180dc:	subs	r5, r0, #0
   180e0:	beq	180f8 <__assert_fail@plt+0x710c>
   180e4:	mov	r2, r4
   180e8:	mov	r1, r6
   180ec:	bl	10db8 <memcpy@plt>
   180f0:	mov	r0, r5
   180f4:	pop	{r4, r5, r6, pc}
   180f8:	bl	181a4 <__assert_fail@plt+0x71b8>
   180fc:	push	{r4, r5, r6, lr}
   18100:	mov	r6, r0
   18104:	mov	r0, r1
   18108:	mov	r4, r1
   1810c:	bl	18ffc <__assert_fail@plt+0x8010>
   18110:	subs	r5, r0, #0
   18114:	beq	1812c <__assert_fail@plt+0x7140>
   18118:	mov	r2, r4
   1811c:	mov	r1, r6
   18120:	bl	10db8 <memcpy@plt>
   18124:	mov	r0, r5
   18128:	pop	{r4, r5, r6, pc}
   1812c:	bl	181a4 <__assert_fail@plt+0x71b8>
   18130:	push	{r4, r5, r6, lr}
   18134:	mov	r6, r0
   18138:	add	r0, r1, #1
   1813c:	mov	r4, r1
   18140:	bl	18ffc <__assert_fail@plt+0x8010>
   18144:	subs	r5, r0, #0
   18148:	beq	18168 <__assert_fail@plt+0x717c>
   1814c:	mov	r3, #0
   18150:	mov	r1, r6
   18154:	strb	r3, [r5, r4]
   18158:	mov	r2, r4
   1815c:	bl	10db8 <memcpy@plt>
   18160:	mov	r0, r5
   18164:	pop	{r4, r5, r6, pc}
   18168:	bl	181a4 <__assert_fail@plt+0x71b8>
   1816c:	push	{r4, r5, r6, lr}
   18170:	mov	r6, r0
   18174:	bl	10f08 <strlen@plt>
   18178:	add	r4, r0, #1
   1817c:	mov	r0, r4
   18180:	bl	18ffc <__assert_fail@plt+0x8010>
   18184:	subs	r5, r0, #0
   18188:	beq	181a0 <__assert_fail@plt+0x71b4>
   1818c:	mov	r2, r4
   18190:	mov	r1, r6
   18194:	bl	10db8 <memcpy@plt>
   18198:	mov	r0, r5
   1819c:	pop	{r4, r5, r6, pc}
   181a0:	bl	181a4 <__assert_fail@plt+0x71b8>
   181a4:	ldr	r3, [pc, #44]	; 181d8 <__assert_fail@plt+0x71ec>
   181a8:	push	{r4, lr}
   181ac:	mov	r2, #5
   181b0:	ldr	r1, [pc, #36]	; 181dc <__assert_fail@plt+0x71f0>
   181b4:	mov	r0, #0
   181b8:	ldr	r4, [r3]
   181bc:	bl	10e00 <dcgettext@plt>
   181c0:	ldr	r2, [pc, #24]	; 181e0 <__assert_fail@plt+0x71f4>
   181c4:	mov	r1, #0
   181c8:	mov	r3, r0
   181cc:	mov	r0, r4
   181d0:	bl	10e78 <error@plt>
   181d4:	bl	10fd4 <abort@plt>
   181d8:	andeq	fp, r2, r4, lsl #2
   181dc:	andeq	sl, r1, r0, ror #15
   181e0:	strdeq	r9, [r1], -r8
   181e4:	andeq	r0, r0, r0
   181e8:	cmp	r2, #36	; 0x24
   181ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181f0:	sub	sp, sp, #52	; 0x34
   181f4:	bhi	18f84 <__assert_fail@plt+0x7f98>
   181f8:	cmp	r1, #0
   181fc:	mov	r6, r2
   18200:	mov	sl, r0
   18204:	mov	r5, r1
   18208:	mov	r8, r3
   1820c:	addeq	r5, sp, #44	; 0x2c
   18210:	bl	10f20 <__errno_location@plt>
   18214:	mov	r3, #0
   18218:	str	r3, [r0]
   1821c:	mov	fp, r0
   18220:	bl	10ef0 <__ctype_b_loc@plt>
   18224:	ldrb	r3, [sl]
   18228:	mov	r2, sl
   1822c:	ldr	r0, [r0]
   18230:	b	18238 <__assert_fail@plt+0x724c>
   18234:	ldrb	r3, [r2, #1]!
   18238:	lsl	r1, r3, #1
   1823c:	ldrh	r4, [r0, r1]
   18240:	ands	r4, r4, #8192	; 0x2000
   18244:	bne	18234 <__assert_fail@plt+0x7248>
   18248:	cmp	r3, #45	; 0x2d
   1824c:	bne	18260 <__assert_fail@plt+0x7274>
   18250:	mov	r4, #4
   18254:	mov	r0, r4
   18258:	add	sp, sp, #52	; 0x34
   1825c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18260:	mov	r2, r6
   18264:	mov	r3, r4
   18268:	mov	r1, r5
   1826c:	mov	r0, sl
   18270:	bl	10dc4 <__strtoull_internal@plt>
   18274:	ldr	r9, [r5]
   18278:	cmp	sl, r9
   1827c:	mov	r6, r0
   18280:	mov	r7, r1
   18284:	beq	182cc <__assert_fail@plt+0x72e0>
   18288:	ldr	r4, [fp]
   1828c:	cmp	r4, #0
   18290:	bne	182bc <__assert_fail@plt+0x72d0>
   18294:	ldr	r3, [sp, #88]	; 0x58
   18298:	cmp	r3, #0
   1829c:	beq	182ac <__assert_fail@plt+0x72c0>
   182a0:	ldrb	sl, [r9]
   182a4:	cmp	sl, #0
   182a8:	bne	18300 <__assert_fail@plt+0x7314>
   182ac:	mov	r0, r4
   182b0:	strd	r6, [r8]
   182b4:	add	sp, sp, #52	; 0x34
   182b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182bc:	cmp	r4, #34	; 0x22
   182c0:	bne	18250 <__assert_fail@plt+0x7264>
   182c4:	mov	r4, #1
   182c8:	b	18294 <__assert_fail@plt+0x72a8>
   182cc:	ldr	r3, [sp, #88]	; 0x58
   182d0:	cmp	r3, #0
   182d4:	beq	18250 <__assert_fail@plt+0x7264>
   182d8:	ldrb	sl, [r9]
   182dc:	cmp	sl, #0
   182e0:	beq	18250 <__assert_fail@plt+0x7264>
   182e4:	mov	r1, sl
   182e8:	mov	r0, r3
   182ec:	bl	10f14 <strchr@plt>
   182f0:	cmp	r0, #0
   182f4:	movne	r6, #1
   182f8:	movne	r7, #0
   182fc:	beq	18250 <__assert_fail@plt+0x7264>
   18300:	mov	r1, sl
   18304:	ldr	r0, [sp, #88]	; 0x58
   18308:	bl	10f14 <strchr@plt>
   1830c:	cmp	r0, #0
   18310:	beq	18e70 <__assert_fail@plt+0x7e84>
   18314:	sub	r3, sl, #69	; 0x45
   18318:	cmp	r3, #47	; 0x2f
   1831c:	ldrls	pc, [pc, r3, lsl #2]
   18320:	b	18414 <__assert_fail@plt+0x7428>
   18324:	andeq	r8, r1, r4, ror #7
   18328:	andeq	r8, r1, r4, lsl r4
   1832c:	andeq	r8, r1, r4, ror #7
   18330:	andeq	r8, r1, r4, lsl r4
   18334:	andeq	r8, r1, r4, lsl r4
   18338:	andeq	r8, r1, r4, lsl r4
   1833c:	andeq	r8, r1, r4, ror #7
   18340:	andeq	r8, r1, r4, lsl r4
   18344:	andeq	r8, r1, r4, ror #7
   18348:	andeq	r8, r1, r4, lsl r4
   1834c:	andeq	r8, r1, r4, lsl r4
   18350:	andeq	r8, r1, r4, ror #7
   18354:	andeq	r8, r1, r4, lsl r4
   18358:	andeq	r8, r1, r4, lsl r4
   1835c:	andeq	r8, r1, r4, lsl r4
   18360:	andeq	r8, r1, r4, ror #7
   18364:	andeq	r8, r1, r4, lsl r4
   18368:	andeq	r8, r1, r4, lsl r4
   1836c:	andeq	r8, r1, r4, lsl r4
   18370:	andeq	r8, r1, r4, lsl r4
   18374:	andeq	r8, r1, r4, ror #7
   18378:	andeq	r8, r1, r4, ror #7
   1837c:	andeq	r8, r1, r4, lsl r4
   18380:	andeq	r8, r1, r4, lsl r4
   18384:	andeq	r8, r1, r4, lsl r4
   18388:	andeq	r8, r1, r4, lsl r4
   1838c:	andeq	r8, r1, r4, lsl r4
   18390:	andeq	r8, r1, r4, lsl r4
   18394:	andeq	r8, r1, r4, lsl r4
   18398:	andeq	r8, r1, r4, lsl r4
   1839c:	andeq	r8, r1, r4, lsl r4
   183a0:	andeq	r8, r1, r4, lsl r4
   183a4:	andeq	r8, r1, r4, lsl r4
   183a8:	andeq	r8, r1, r4, lsl r4
   183ac:	andeq	r8, r1, r4, ror #7
   183b0:	andeq	r8, r1, r4, lsl r4
   183b4:	andeq	r8, r1, r4, lsl r4
   183b8:	andeq	r8, r1, r4, lsl r4
   183bc:	andeq	r8, r1, r4, ror #7
   183c0:	andeq	r8, r1, r4, lsl r4
   183c4:	andeq	r8, r1, r4, ror #7
   183c8:	andeq	r8, r1, r4, lsl r4
   183cc:	andeq	r8, r1, r4, lsl r4
   183d0:	andeq	r8, r1, r4, lsl r4
   183d4:	andeq	r8, r1, r4, lsl r4
   183d8:	andeq	r8, r1, r4, lsl r4
   183dc:	andeq	r8, r1, r4, lsl r4
   183e0:	andeq	r8, r1, r4, ror #7
   183e4:	mov	r1, #48	; 0x30
   183e8:	ldr	r0, [sp, #88]	; 0x58
   183ec:	bl	10f14 <strchr@plt>
   183f0:	cmp	r0, #0
   183f4:	beq	18f04 <__assert_fail@plt+0x7f18>
   183f8:	ldrb	r3, [r9, #1]
   183fc:	cmp	r3, #68	; 0x44
   18400:	beq	18ee4 <__assert_fail@plt+0x7ef8>
   18404:	cmp	r3, #105	; 0x69
   18408:	beq	18eb4 <__assert_fail@plt+0x7ec8>
   1840c:	cmp	r3, #66	; 0x42
   18410:	beq	18ee4 <__assert_fail@plt+0x7ef8>
   18414:	ldr	r3, [pc, #2948]	; 18fa0 <__assert_fail@plt+0x7fb4>
   18418:	mvn	r2, #0
   1841c:	mov	r1, #1024	; 0x400
   18420:	mov	lr, #0
   18424:	strd	r2, [sp]
   18428:	mov	r3, #1
   1842c:	str	r3, [sp, #12]
   18430:	sub	sl, sl, #66	; 0x42
   18434:	cmp	sl, #53	; 0x35
   18438:	ldrls	pc, [pc, sl, lsl #2]
   1843c:	b	18e70 <__assert_fail@plt+0x7e84>
   18440:	andeq	r8, r1, r0, asr #28
   18444:	andeq	r8, r1, r0, ror lr
   18448:	andeq	r8, r1, r0, ror lr
   1844c:			; <UNDEFINED> instruction: 0x00018cbc
   18450:	andeq	r8, r1, r0, ror lr
   18454:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18458:	andeq	r8, r1, r0, ror lr
   1845c:	andeq	r8, r1, r0, ror lr
   18460:	andeq	r8, r1, r0, ror lr
   18464:	andeq	r8, r1, ip, ror lr
   18468:	andeq	r8, r1, r0, ror lr
   1846c:	andeq	r8, r1, r8, lsl r5
   18470:	andeq	r8, r1, r0, ror lr
   18474:	andeq	r8, r1, r0, ror lr
   18478:	andeq	r8, r1, r4, lsr #11
   1847c:	andeq	r8, r1, r0, ror lr
   18480:	andeq	r8, r1, r0, ror lr
   18484:	andeq	r8, r1, r0, ror lr
   18488:	andeq	r8, r1, r4, lsr #18
   1848c:	andeq	r8, r1, r0, ror lr
   18490:	andeq	r8, r1, r0, ror lr
   18494:	andeq	r8, r1, r0, ror lr
   18498:	andeq	r8, r1, r0, ror lr
   1849c:	strdeq	r8, [r1], -ip
   184a0:	andeq	r8, r1, r8, asr sl
   184a4:	andeq	r8, r1, r0, ror lr
   184a8:	andeq	r8, r1, r0, ror lr
   184ac:	andeq	r8, r1, r0, ror lr
   184b0:	andeq	r8, r1, r0, ror lr
   184b4:	andeq	r8, r1, r0, ror lr
   184b8:	andeq	r8, r1, r0, ror lr
   184bc:	andeq	r8, r1, r0, ror lr
   184c0:	andeq	r8, r1, r8, lsr #20
   184c4:	andeq	r8, r1, r0, lsr #20
   184c8:	andeq	r8, r1, r0, ror lr
   184cc:	andeq	r8, r1, r0, ror lr
   184d0:	andeq	r8, r1, r0, ror lr
   184d4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   184d8:	andeq	r8, r1, r0, ror lr
   184dc:	andeq	r8, r1, r0, ror lr
   184e0:	andeq	r8, r1, r0, ror lr
   184e4:	andeq	r8, r1, ip, ror lr
   184e8:	andeq	r8, r1, r0, ror lr
   184ec:	andeq	r8, r1, r8, lsl r5
   184f0:	andeq	r8, r1, r0, ror lr
   184f4:	andeq	r8, r1, r0, ror lr
   184f8:	andeq	r8, r1, r0, ror lr
   184fc:	andeq	r8, r1, r0, ror lr
   18500:	andeq	r8, r1, r0, ror lr
   18504:	andeq	r8, r1, r0, ror lr
   18508:	andeq	r8, r1, r4, lsr #18
   1850c:	andeq	r8, r1, r0, ror lr
   18510:	andeq	r8, r1, r0, ror lr
   18514:	andeq	r8, r1, r4, lsl #20
   18518:	mul	r0, r6, lr
   1851c:	ldrd	sl, [sp]
   18520:	umull	r2, r3, r6, r1
   18524:	mla	r0, r1, r7, r0
   18528:	cmp	r7, fp
   1852c:	cmpeq	r6, sl
   18530:	add	r3, r0, r3
   18534:	mvnhi	r3, #0
   18538:	mvnhi	r2, #0
   1853c:	mul	r6, r1, r3
   18540:	umull	r0, r1, r1, r2
   18544:	mla	lr, lr, r2, r6
   18548:	ldrd	r6, [sp]
   1854c:	movhi	ip, #1
   18550:	movls	ip, #0
   18554:	cmp	r7, r3
   18558:	cmpeq	r6, r2
   1855c:	mvncc	r0, #0
   18560:	add	r1, lr, r1
   18564:	mov	sl, r6
   18568:	movcc	r1, r0
   1856c:	mov	fp, r7
   18570:	cmp	fp, r3
   18574:	cmpeq	sl, r2
   18578:	mov	r6, r0
   1857c:	mov	r7, r1
   18580:	orrcc	ip, ip, #1
   18584:	ldr	r2, [sp, #12]
   18588:	orr	r4, r4, ip
   1858c:	add	r3, r9, r2
   18590:	str	r3, [r5]
   18594:	ldrb	r3, [r9, r2]
   18598:	cmp	r3, #0
   1859c:	orrne	r4, r4, #2
   185a0:	b	182ac <__assert_fail@plt+0x72c0>
   185a4:	ldrd	sl, [sp]
   185a8:	umull	r2, r3, r6, r1
   185ac:	mul	r0, r6, lr
   185b0:	cmp	r7, fp
   185b4:	cmpeq	r6, sl
   185b8:	mvnhi	r2, #0
   185bc:	mla	r0, r1, r7, r0
   185c0:	umull	sl, fp, r2, r1
   185c4:	add	r3, r0, r3
   185c8:	mul	r0, lr, r2
   185cc:	mvnhi	r3, #0
   185d0:	strd	sl, [sp, #16]
   185d4:	ldrd	sl, [sp]
   185d8:	mla	r0, r1, r3, r0
   185dc:	ldr	ip, [sp, #20]
   185e0:	cmp	r3, fp
   185e4:	add	r0, r0, ip
   185e8:	cmpeq	r2, sl
   185ec:	str	r0, [sp, #20]
   185f0:	bls	18608 <__assert_fail@plt+0x761c>
   185f4:	mvn	sl, #0
   185f8:	mvn	fp, #0
   185fc:	strd	sl, [sp, #16]
   18600:	ldr	r0, [sp, #20]
   18604:	ldrd	sl, [sp]
   18608:	cmp	r7, fp
   1860c:	cmpeq	r6, sl
   18610:	mul	r0, r1, r0
   18614:	ldrd	r6, [sp, #16]
   18618:	mla	ip, lr, r6, r0
   1861c:	mov	r0, r6
   18620:	movhi	r0, #1
   18624:	movls	r0, #0
   18628:	cmp	r3, fp
   1862c:	cmpeq	r2, sl
   18630:	ldrd	r2, [sp, #16]
   18634:	umull	r6, r7, r1, r6
   18638:	orrhi	r0, r0, #1
   1863c:	cmp	fp, r3
   18640:	cmpeq	sl, r2
   18644:	add	r7, ip, r7
   18648:	bcc	18f54 <__assert_fail@plt+0x7f68>
   1864c:	mov	sl, r6
   18650:	mov	fp, r7
   18654:	strd	r6, [sp, #24]
   18658:	mul	r3, r1, fp
   1865c:	umull	r6, r7, r1, sl
   18660:	mla	ip, lr, sl, r3
   18664:	ldrd	sl, [sp]
   18668:	ldrd	r2, [sp, #16]
   1866c:	add	r7, ip, r7
   18670:	cmp	fp, r3
   18674:	cmpeq	sl, r2
   18678:	mov	r3, fp
   1867c:	mov	r2, sl
   18680:	ldrd	sl, [sp, #24]
   18684:	orrcc	r0, r0, #1
   18688:	str	r0, [sp, #16]
   1868c:	cmp	r3, fp
   18690:	cmpeq	r2, sl
   18694:	bcs	18bec <__assert_fail@plt+0x7c00>
   18698:	mvn	r2, #0
   1869c:	mvn	r3, #0
   186a0:	mul	ip, lr, r2
   186a4:	ldrd	sl, [sp]
   186a8:	mla	ip, r1, r3, ip
   186ac:	umull	r6, r7, r2, r1
   186b0:	ldrd	r0, [sp, #24]
   186b4:	add	r7, ip, r7
   186b8:	cmp	fp, r1
   186bc:	ldr	r1, [sp, #16]
   186c0:	cmpeq	sl, r0
   186c4:	orrcc	r1, r1, #1
   186c8:	cmp	r3, fp
   186cc:	cmpeq	r2, sl
   186d0:	mvnhi	r0, #0
   186d4:	movls	ip, r7
   186d8:	movhi	ip, r0
   186dc:	movls	r0, r6
   186e0:	cmp	r3, fp
   186e4:	cmpeq	r2, sl
   186e8:	mov	r7, ip
   186ec:	mov	r6, r0
   186f0:	movls	ip, r1
   186f4:	orrhi	ip, r1, #1
   186f8:	b	18584 <__assert_fail@plt+0x7598>
   186fc:	ldrd	sl, [sp]
   18700:	umull	r2, r3, r6, r1
   18704:	mul	r0, r6, lr
   18708:	cmp	r7, fp
   1870c:	cmpeq	r6, sl
   18710:	mvnhi	r2, #0
   18714:	mla	r0, r1, r7, r0
   18718:	umull	sl, fp, r2, r1
   1871c:	add	r3, r0, r3
   18720:	mul	r0, lr, r2
   18724:	mvnhi	r3, #0
   18728:	strd	sl, [sp, #16]
   1872c:	ldrd	sl, [sp]
   18730:	mla	r0, r1, r3, r0
   18734:	ldr	ip, [sp, #20]
   18738:	cmp	r3, fp
   1873c:	add	r0, r0, ip
   18740:	cmpeq	r2, sl
   18744:	str	r0, [sp, #20]
   18748:	mvnhi	sl, #0
   1874c:	mvnhi	fp, #0
   18750:	strdhi	sl, [sp, #16]
   18754:	ldrdhi	sl, [sp]
   18758:	ldr	r0, [sp, #16]
   1875c:	cmp	r3, fp
   18760:	ldr	r3, [sp, #20]
   18764:	mul	r0, lr, r0
   18768:	cmpeq	r2, sl
   1876c:	mla	r0, r1, r3, r0
   18770:	ldr	r3, [sp, #16]
   18774:	umull	r2, r3, r3, r1
   18778:	strd	r2, [sp, #24]
   1877c:	movhi	r3, #1
   18780:	movls	r3, #0
   18784:	cmp	r7, fp
   18788:	cmpeq	r6, sl
   1878c:	ldrd	r6, [sp, #16]
   18790:	ldr	r2, [sp, #28]
   18794:	movls	ip, r3
   18798:	orrhi	ip, r3, #1
   1879c:	cmp	r7, fp
   187a0:	add	r2, r0, r2
   187a4:	cmpeq	r6, sl
   187a8:	str	r2, [sp, #28]
   187ac:	mvnhi	r2, #0
   187b0:	mvnhi	r3, #0
   187b4:	strdhi	r2, [sp, #24]
   187b8:	ldrd	r6, [sp, #24]
   187bc:	mul	r2, r1, r7
   187c0:	umull	sl, fp, r1, r6
   187c4:	mla	r3, lr, r6, r2
   187c8:	ldrd	r6, [sp]
   187cc:	str	r3, [sp, #32]
   187d0:	ldrd	r2, [sp, #16]
   187d4:	cmp	r3, r7
   187d8:	cmpeq	r2, r6
   187dc:	ldrd	r2, [sp, #24]
   187e0:	orrhi	ip, ip, #1
   187e4:	cmp	r3, r7
   187e8:	ldr	r3, [sp, #32]
   187ec:	cmpeq	r2, r6
   187f0:	add	r2, r3, fp
   187f4:	mov	fp, r2
   187f8:	bhi	18f3c <__assert_fail@plt+0x7f50>
   187fc:	strd	sl, [sp, #16]
   18800:	mul	r2, r1, fp
   18804:	umull	r6, r7, r1, sl
   18808:	mla	r3, lr, sl, r2
   1880c:	ldrd	sl, [sp]
   18810:	str	r3, [sp, #32]
   18814:	ldrd	r2, [sp, #24]
   18818:	cmp	r3, fp
   1881c:	cmpeq	r2, sl
   18820:	ldrd	r2, [sp, #16]
   18824:	orrhi	ip, ip, #1
   18828:	cmp	fp, r3
   1882c:	ldr	r3, [sp, #32]
   18830:	cmpeq	sl, r2
   18834:	add	r2, r3, r7
   18838:	mov	r7, r2
   1883c:	mvncc	r7, #0
   18840:	mvncc	r6, #0
   18844:	mul	r2, r1, r7
   18848:	mov	sl, r6
   1884c:	strd	r6, [sp, #24]
   18850:	mla	r0, lr, sl, r2
   18854:	ldrd	r2, [sp, #16]
   18858:	ldrd	sl, [sp]
   1885c:	umull	r6, r7, r1, r6
   18860:	cmp	fp, r3
   18864:	cmpeq	sl, r2
   18868:	mov	r3, fp
   1886c:	mov	r2, sl
   18870:	ldrd	sl, [sp, #24]
   18874:	orrcc	ip, ip, #1
   18878:	add	r7, r0, r7
   1887c:	cmp	r3, fp
   18880:	cmpeq	r2, sl
   18884:	mvncc	r6, #0
   18888:	mvncc	r7, #0
   1888c:	umull	sl, fp, r1, r6
   18890:	mul	r3, r1, r7
   18894:	strd	sl, [sp, #16]
   18898:	mla	r0, lr, r6, r3
   1889c:	ldrd	sl, [sp, #24]
   188a0:	ldrd	r2, [sp]
   188a4:	cmp	r3, fp
   188a8:	cmpeq	r2, sl
   188ac:	orrcc	ip, ip, #1
   188b0:	cmp	r3, r7
   188b4:	ldr	r3, [sp, #20]
   188b8:	cmpeq	r2, r6
   188bc:	add	r3, r0, r3
   188c0:	str	r3, [sp, #20]
   188c4:	mvncc	r2, #0
   188c8:	mvncc	r3, #0
   188cc:	ldrdcs	r2, [sp, #16]
   188d0:	ldrd	sl, [sp]
   188d4:	mul	r0, r1, r3
   188d8:	cmp	fp, r7
   188dc:	str	r0, [sp, #16]
   188e0:	cmpeq	sl, r6
   188e4:	ldr	r6, [sp, #16]
   188e8:	umull	r0, r1, r1, r2
   188ec:	mla	lr, lr, r2, r6
   188f0:	orrcc	ip, ip, #1
   188f4:	cmp	r3, fp
   188f8:	cmpeq	r2, sl
   188fc:	add	r1, lr, r1
   18900:	bls	1890c <__assert_fail@plt+0x7920>
   18904:	mvn	r0, #0
   18908:	mov	r1, r0
   1890c:	cmp	r3, fp
   18910:	cmpeq	r2, sl
   18914:	mov	r6, r0
   18918:	mov	r7, r1
   1891c:	orrhi	ip, ip, #1
   18920:	b	18584 <__assert_fail@plt+0x7598>
   18924:	ldrd	sl, [sp]
   18928:	umull	r2, r3, r6, r1
   1892c:	mul	r0, r6, lr
   18930:	cmp	r7, fp
   18934:	cmpeq	r6, sl
   18938:	mvnhi	r2, #0
   1893c:	mla	r0, r1, r7, r0
   18940:	umull	sl, fp, r1, r2
   18944:	add	r3, r0, r3
   18948:	mvnhi	r3, #0
   1894c:	strd	sl, [sp, #16]
   18950:	mul	r0, r1, r3
   18954:	ldrd	sl, [sp]
   18958:	mla	r0, lr, r2, r0
   1895c:	ldr	ip, [sp, #20]
   18960:	cmp	fp, r3
   18964:	add	r0, r0, ip
   18968:	cmpeq	sl, r2
   1896c:	str	r0, [sp, #20]
   18970:	mvncc	sl, #0
   18974:	mvncc	fp, #0
   18978:	strdcc	sl, [sp, #16]
   1897c:	ldrdcc	sl, [sp]
   18980:	ldr	r0, [sp, #16]
   18984:	cmp	fp, r3
   18988:	cmpeq	sl, r2
   1898c:	mul	r0, lr, r0
   18990:	ldr	r2, [sp, #20]
   18994:	ldr	r3, [sp, #16]
   18998:	movcc	ip, #1
   1899c:	movcs	ip, #0
   189a0:	cmp	r7, fp
   189a4:	cmpeq	r6, sl
   189a8:	ldrd	r6, [sp, #16]
   189ac:	mla	r0, r1, r2, r0
   189b0:	umull	r2, r3, r3, r1
   189b4:	orrhi	ip, ip, #1
   189b8:	cmp	r7, fp
   189bc:	cmpeq	r6, sl
   189c0:	add	r3, r0, r3
   189c4:	mvnhi	r3, #0
   189c8:	mvnhi	r2, #0
   189cc:	mul	r0, r1, r3
   189d0:	cmp	r7, fp
   189d4:	str	r0, [sp, #24]
   189d8:	cmpeq	r6, sl
   189dc:	ldr	r6, [sp, #24]
   189e0:	umull	r0, r1, r1, r2
   189e4:	mla	lr, lr, r2, r6
   189e8:	orrhi	ip, ip, #1
   189ec:	cmp	fp, r3
   189f0:	cmpeq	sl, r2
   189f4:	mvncc	r0, #0
   189f8:	add	r1, lr, r1
   189fc:	movcc	r1, r0
   18a00:	b	18570 <__assert_fail@plt+0x7584>
   18a04:	cmp	r6, #0
   18a08:	sbcs	r3, r7, #0
   18a0c:	blt	18ea4 <__assert_fail@plt+0x7eb8>
   18a10:	adds	r6, r6, r6
   18a14:	adc	r7, r7, r7
   18a18:	mov	ip, #0
   18a1c:	b	18584 <__assert_fail@plt+0x7598>
   18a20:	mov	ip, #0
   18a24:	b	18584 <__assert_fail@plt+0x7598>
   18a28:	ldr	r3, [pc, #1396]	; 18fa4 <__assert_fail@plt+0x7fb8>
   18a2c:	mvn	r2, #0
   18a30:	cmp	r7, r3
   18a34:	cmpeq	r6, r2
   18a38:	bhi	18ea4 <__assert_fail@plt+0x7eb8>
   18a3c:	lsl	r3, r7, #9
   18a40:	orr	r3, r3, r6, lsr #23
   18a44:	lsl	r2, r6, #9
   18a48:	mov	r6, r2
   18a4c:	mov	r7, r3
   18a50:	mov	ip, #0
   18a54:	b	18584 <__assert_fail@plt+0x7598>
   18a58:	ldrd	sl, [sp]
   18a5c:	umull	r2, r3, r6, r1
   18a60:	mul	r0, r6, lr
   18a64:	cmp	r7, fp
   18a68:	cmpeq	r6, sl
   18a6c:	mvnhi	r2, #0
   18a70:	mla	r0, r1, r7, r0
   18a74:	umull	sl, fp, r2, r1
   18a78:	add	r3, r0, r3
   18a7c:	mul	r0, lr, r2
   18a80:	mvnhi	r3, #0
   18a84:	strd	sl, [sp, #16]
   18a88:	ldrd	sl, [sp]
   18a8c:	mla	r0, r1, r3, r0
   18a90:	ldr	ip, [sp, #20]
   18a94:	cmp	r3, fp
   18a98:	add	r0, r0, ip
   18a9c:	cmpeq	r2, sl
   18aa0:	str	r0, [sp, #20]
   18aa4:	mvnhi	sl, #0
   18aa8:	mvnhi	fp, #0
   18aac:	strdhi	sl, [sp, #16]
   18ab0:	ldrdhi	sl, [sp]
   18ab4:	ldr	r0, [sp, #16]
   18ab8:	cmp	r3, fp
   18abc:	ldr	r3, [sp, #20]
   18ac0:	mul	r0, lr, r0
   18ac4:	cmpeq	r2, sl
   18ac8:	mla	r0, r1, r3, r0
   18acc:	ldr	r3, [sp, #16]
   18ad0:	umull	r2, r3, r3, r1
   18ad4:	strd	r2, [sp, #24]
   18ad8:	movhi	r3, #1
   18adc:	movls	r3, #0
   18ae0:	cmp	r7, fp
   18ae4:	cmpeq	r6, sl
   18ae8:	ldrd	r6, [sp, #16]
   18aec:	ldr	r2, [sp, #28]
   18af0:	movls	ip, r3
   18af4:	orrhi	ip, r3, #1
   18af8:	cmp	r7, fp
   18afc:	add	r2, r0, r2
   18b00:	cmpeq	r6, sl
   18b04:	str	r2, [sp, #28]
   18b08:	mvnhi	r2, #0
   18b0c:	mvnhi	r3, #0
   18b10:	strdhi	r2, [sp, #24]
   18b14:	ldrd	r6, [sp, #24]
   18b18:	mul	r2, lr, r6
   18b1c:	umull	sl, fp, r6, r1
   18b20:	mla	r3, r1, r7, r2
   18b24:	ldrd	r6, [sp]
   18b28:	str	r3, [sp, #32]
   18b2c:	ldrd	r2, [sp, #16]
   18b30:	cmp	r3, r7
   18b34:	cmpeq	r2, r6
   18b38:	ldrd	r2, [sp, #24]
   18b3c:	orrhi	ip, ip, #1
   18b40:	cmp	r3, r7
   18b44:	ldr	r3, [sp, #32]
   18b48:	cmpeq	r2, r6
   18b4c:	add	r2, r3, fp
   18b50:	mov	fp, r2
   18b54:	bhi	18f6c <__assert_fail@plt+0x7f80>
   18b58:	strd	sl, [sp, #16]
   18b5c:	mul	r2, lr, sl
   18b60:	umull	r6, r7, sl, r1
   18b64:	mla	r3, r1, fp, r2
   18b68:	ldrd	sl, [sp]
   18b6c:	str	r3, [sp, #32]
   18b70:	ldrd	r2, [sp, #24]
   18b74:	cmp	r3, fp
   18b78:	cmpeq	r2, sl
   18b7c:	ldrd	r2, [sp, #16]
   18b80:	orrhi	ip, ip, #1
   18b84:	cmp	r3, fp
   18b88:	ldr	r3, [sp, #32]
   18b8c:	cmpeq	r2, sl
   18b90:	add	r2, r3, r7
   18b94:	mov	r7, r2
   18b98:	mvnhi	r7, #0
   18b9c:	mvnhi	r6, #0
   18ba0:	mul	r2, r1, r7
   18ba4:	mov	sl, r6
   18ba8:	strd	r6, [sp, #24]
   18bac:	mla	r0, lr, sl, r2
   18bb0:	ldrd	sl, [sp]
   18bb4:	ldrd	r2, [sp, #16]
   18bb8:	umull	r6, r7, r1, r6
   18bbc:	cmp	r3, fp
   18bc0:	cmpeq	r2, sl
   18bc4:	mov	r3, ip
   18bc8:	orrhi	r3, r3, #1
   18bcc:	mov	r2, sl
   18bd0:	str	r3, [sp, #16]
   18bd4:	mov	r3, fp
   18bd8:	ldrd	sl, [sp, #24]
   18bdc:	add	r7, r0, r7
   18be0:	cmp	r3, fp
   18be4:	cmpeq	r2, sl
   18be8:	bcc	18698 <__assert_fail@plt+0x76ac>
   18bec:	mov	r2, r6
   18bf0:	mov	r3, r7
   18bf4:	b	186a0 <__assert_fail@plt+0x76b4>
   18bf8:	ldrd	sl, [sp]
   18bfc:	umull	r2, r3, r6, r1
   18c00:	mul	r0, r6, lr
   18c04:	cmp	r7, fp
   18c08:	cmpeq	r6, sl
   18c0c:	mvnhi	r2, #0
   18c10:	mla	r0, r1, r7, r0
   18c14:	umull	sl, fp, r2, r1
   18c18:	add	r3, r0, r3
   18c1c:	mul	r0, lr, r2
   18c20:	mvnhi	r3, #0
   18c24:	strd	sl, [sp, #16]
   18c28:	ldrd	sl, [sp]
   18c2c:	mla	r0, r1, r3, r0
   18c30:	ldr	ip, [sp, #20]
   18c34:	cmp	r3, fp
   18c38:	add	r0, r0, ip
   18c3c:	cmpeq	r2, sl
   18c40:	str	r0, [sp, #20]
   18c44:	mvnhi	sl, #0
   18c48:	mvnhi	fp, #0
   18c4c:	strdhi	sl, [sp, #16]
   18c50:	ldrdhi	sl, [sp]
   18c54:	ldr	r0, [sp, #16]
   18c58:	cmp	r3, fp
   18c5c:	ldr	ip, [sp, #20]
   18c60:	mul	r0, lr, r0
   18c64:	ldr	r3, [sp, #16]
   18c68:	cmpeq	r2, sl
   18c6c:	mla	r0, r1, ip, r0
   18c70:	umull	r2, r3, r3, r1
   18c74:	movhi	r1, #1
   18c78:	movls	r1, #0
   18c7c:	cmp	r7, fp
   18c80:	cmpeq	r6, sl
   18c84:	ldrd	r6, [sp, #16]
   18c88:	movls	ip, r1
   18c8c:	orrhi	ip, r1, #1
   18c90:	cmp	r7, fp
   18c94:	cmpeq	r6, sl
   18c98:	mvnhi	r2, #0
   18c9c:	add	r3, r0, r3
   18ca0:	movhi	r3, r2
   18ca4:	cmp	r7, fp
   18ca8:	cmpeq	r6, sl
   18cac:	mov	r7, r3
   18cb0:	mov	r6, r2
   18cb4:	orrhi	ip, ip, #1
   18cb8:	b	18584 <__assert_fail@plt+0x7598>
   18cbc:	ldrd	sl, [sp]
   18cc0:	umull	r2, r3, r6, r1
   18cc4:	mul	r0, r6, lr
   18cc8:	cmp	r7, fp
   18ccc:	cmpeq	r6, sl
   18cd0:	mvnhi	r2, #0
   18cd4:	mla	r0, r1, r7, r0
   18cd8:	umull	sl, fp, r1, r2
   18cdc:	add	r3, r0, r3
   18ce0:	mvnhi	r3, #0
   18ce4:	strd	sl, [sp, #16]
   18ce8:	mul	r0, r1, r3
   18cec:	ldrd	sl, [sp]
   18cf0:	mla	r0, lr, r2, r0
   18cf4:	ldr	ip, [sp, #20]
   18cf8:	cmp	fp, r3
   18cfc:	add	r0, r0, ip
   18d00:	cmpeq	sl, r2
   18d04:	str	r0, [sp, #20]
   18d08:	mvncc	sl, #0
   18d0c:	mvncc	fp, #0
   18d10:	strdcc	sl, [sp, #16]
   18d14:	ldrdcc	sl, [sp]
   18d18:	ldr	r0, [sp, #16]
   18d1c:	cmp	fp, r3
   18d20:	ldr	r3, [sp, #20]
   18d24:	mul	r0, lr, r0
   18d28:	cmpeq	sl, r2
   18d2c:	mla	r0, r1, r3, r0
   18d30:	ldr	r3, [sp, #16]
   18d34:	umull	r2, r3, r3, r1
   18d38:	strd	r2, [sp, #24]
   18d3c:	movcc	r3, #1
   18d40:	movcs	r3, #0
   18d44:	cmp	r7, fp
   18d48:	cmpeq	r6, sl
   18d4c:	movls	ip, r3
   18d50:	orrhi	ip, r3, #1
   18d54:	ldrd	r2, [sp, #16]
   18d58:	cmp	r3, fp
   18d5c:	ldr	r3, [sp, #28]
   18d60:	cmpeq	r2, sl
   18d64:	add	r3, r0, r3
   18d68:	str	r3, [sp, #28]
   18d6c:	bhi	18f24 <__assert_fail@plt+0x7f38>
   18d70:	ldrd	r2, [sp, #24]
   18d74:	mov	sl, r2
   18d78:	mov	fp, r3
   18d7c:	mul	r2, lr, sl
   18d80:	umull	r6, r7, sl, r1
   18d84:	mla	r0, r1, fp, r2
   18d88:	ldrd	r2, [sp]
   18d8c:	add	r7, r0, r7
   18d90:	mov	sl, r2
   18d94:	mov	fp, r3
   18d98:	strd	r2, [sp, #32]
   18d9c:	ldrd	r2, [sp, #16]
   18da0:	cmp	r3, fp
   18da4:	cmpeq	r2, sl
   18da8:	ldrd	r2, [sp, #32]
   18dac:	ldrd	sl, [sp, #24]
   18db0:	orrhi	ip, ip, #1
   18db4:	cmp	fp, r3
   18db8:	cmpeq	sl, r2
   18dbc:	mvnhi	r6, #0
   18dc0:	mvnhi	r7, #0
   18dc4:	umull	sl, fp, r6, r1
   18dc8:	mul	r3, lr, r6
   18dcc:	strd	sl, [sp, #16]
   18dd0:	mla	r0, r1, r7, r3
   18dd4:	ldrd	sl, [sp, #24]
   18dd8:	ldrd	r2, [sp]
   18ddc:	cmp	fp, r3
   18de0:	cmpeq	sl, r2
   18de4:	orrhi	ip, ip, #1
   18de8:	cmp	r7, r3
   18dec:	ldr	r3, [sp, #20]
   18df0:	cmpeq	r6, r2
   18df4:	add	r3, r0, r3
   18df8:	str	r3, [sp, #20]
   18dfc:	mvnhi	r2, #0
   18e00:	mvnhi	r3, #0
   18e04:	ldrdls	r2, [sp, #16]
   18e08:	ldrd	sl, [sp]
   18e0c:	mul	r0, r1, r3
   18e10:	cmp	r7, fp
   18e14:	str	r0, [sp, #16]
   18e18:	cmpeq	r6, sl
   18e1c:	ldr	r6, [sp, #16]
   18e20:	umull	r0, r1, r1, r2
   18e24:	mla	lr, lr, r2, r6
   18e28:	orrhi	ip, ip, #1
   18e2c:	cmp	r3, fp
   18e30:	cmpeq	r2, sl
   18e34:	add	r1, lr, r1
   18e38:	bls	1890c <__assert_fail@plt+0x7920>
   18e3c:	b	18904 <__assert_fail@plt+0x7918>
   18e40:	ldr	r3, [pc, #344]	; 18fa0 <__assert_fail@plt+0x7fb4>
   18e44:	mvn	r2, #0
   18e48:	cmp	r7, r3
   18e4c:	cmpeq	r6, r2
   18e50:	bhi	18ea4 <__assert_fail@plt+0x7eb8>
   18e54:	lsl	r3, r7, #10
   18e58:	orr	r3, r3, r6, lsr #22
   18e5c:	lsl	r2, r6, #10
   18e60:	mov	r6, r2
   18e64:	mov	r7, r3
   18e68:	mov	ip, #0
   18e6c:	b	18584 <__assert_fail@plt+0x7598>
   18e70:	strd	r6, [r8]
   18e74:	orr	r4, r4, #2
   18e78:	b	18254 <__assert_fail@plt+0x7268>
   18e7c:	ldrd	r2, [sp]
   18e80:	cmp	r7, r3
   18e84:	cmpeq	r6, r2
   18e88:	bhi	18ea4 <__assert_fail@plt+0x7eb8>
   18e8c:	mul	r3, r6, lr
   18e90:	mov	ip, #0
   18e94:	mla	r3, r1, r7, r3
   18e98:	umull	r6, r7, r6, r1
   18e9c:	add	r7, r3, r7
   18ea0:	b	18584 <__assert_fail@plt+0x7598>
   18ea4:	mvn	r6, #0
   18ea8:	mvn	r7, #0
   18eac:	mov	ip, #1
   18eb0:	b	18584 <__assert_fail@plt+0x7598>
   18eb4:	ldrb	r3, [r9, #2]
   18eb8:	mvn	r2, #0
   18ebc:	mov	r1, #1024	; 0x400
   18ec0:	cmp	r3, #66	; 0x42
   18ec4:	ldr	r3, [pc, #212]	; 18fa0 <__assert_fail@plt+0x7fb4>
   18ec8:	mov	lr, #0
   18ecc:	strd	r2, [sp]
   18ed0:	moveq	r3, #3
   18ed4:	streq	r3, [sp, #12]
   18ed8:	movne	r3, #1
   18edc:	strne	r3, [sp, #12]
   18ee0:	b	18430 <__assert_fail@plt+0x7444>
   18ee4:	add	r3, pc, #172	; 0xac
   18ee8:	ldrd	r2, [r3]
   18eec:	mov	r1, #1000	; 0x3e8
   18ef0:	mov	lr, #0
   18ef4:	strd	r2, [sp]
   18ef8:	mov	r3, #2
   18efc:	str	r3, [sp, #12]
   18f00:	b	18430 <__assert_fail@plt+0x7444>
   18f04:	ldr	r3, [pc, #148]	; 18fa0 <__assert_fail@plt+0x7fb4>
   18f08:	mvn	r2, #0
   18f0c:	mov	lr, r0
   18f10:	strd	r2, [sp]
   18f14:	mov	r3, #1
   18f18:	mov	r1, #1024	; 0x400
   18f1c:	str	r3, [sp, #12]
   18f20:	b	18430 <__assert_fail@plt+0x7444>
   18f24:	mvn	r2, #0
   18f28:	mvn	r3, #0
   18f2c:	mov	sl, r2
   18f30:	strd	r2, [sp, #24]
   18f34:	mov	fp, r3
   18f38:	b	18d7c <__assert_fail@plt+0x7d90>
   18f3c:	mvn	r2, #0
   18f40:	mvn	r3, #0
   18f44:	mov	sl, r2
   18f48:	strd	r2, [sp, #16]
   18f4c:	mov	fp, r3
   18f50:	b	18800 <__assert_fail@plt+0x7814>
   18f54:	mvn	r2, #0
   18f58:	mvn	r3, #0
   18f5c:	mov	sl, r2
   18f60:	strd	r2, [sp, #24]
   18f64:	mov	fp, r3
   18f68:	b	18658 <__assert_fail@plt+0x766c>
   18f6c:	mvn	r2, #0
   18f70:	mvn	r3, #0
   18f74:	mov	sl, r2
   18f78:	strd	r2, [sp, #16]
   18f7c:	mov	fp, r3
   18f80:	b	18b5c <__assert_fail@plt+0x7b70>
   18f84:	ldr	r3, [pc, #28]	; 18fa8 <__assert_fail@plt+0x7fbc>
   18f88:	mov	r2, #85	; 0x55
   18f8c:	ldr	r1, [pc, #24]	; 18fac <__assert_fail@plt+0x7fc0>
   18f90:	ldr	r0, [pc, #24]	; 18fb0 <__assert_fail@plt+0x7fc4>
   18f94:	bl	10fec <__assert_fail@plt>
   18f98:	blmi	ff1c2f5c <optarg@@GLIBC_2.4+0xff197df4>
   18f9c:	subeq	r8, r1, r7, lsr r9
   18fa0:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   18fa4:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   18fa8:	strdeq	sl, [r1], -r4
   18fac:	andeq	sl, r1, r0, lsl #16
   18fb0:	andeq	sl, r1, r0, lsl r8
   18fb4:	cmp	r1, #0
   18fb8:	cmpne	r0, #0
   18fbc:	moveq	r1, #1
   18fc0:	moveq	r0, r1
   18fc4:	umull	r2, r3, r0, r1
   18fc8:	adds	r3, r3, #0
   18fcc:	movne	r3, #1
   18fd0:	cmp	r2, #0
   18fd4:	blt	18fe4 <__assert_fail@plt+0x7ff8>
   18fd8:	cmp	r3, #0
   18fdc:	bne	18fe4 <__assert_fail@plt+0x7ff8>
   18fe0:	b	10d4c <calloc@plt>
   18fe4:	push	{r4, lr}
   18fe8:	bl	10f20 <__errno_location@plt>
   18fec:	mov	r3, #12
   18ff0:	str	r3, [r0]
   18ff4:	mov	r0, #0
   18ff8:	pop	{r4, pc}
   18ffc:	cmp	r0, #0
   19000:	moveq	r0, #1
   19004:	cmp	r0, #0
   19008:	blt	19010 <__assert_fail@plt+0x8024>
   1900c:	b	10e9c <malloc@plt>
   19010:	push	{r4, lr}
   19014:	bl	10f20 <__errno_location@plt>
   19018:	mov	r3, #12
   1901c:	str	r3, [r0]
   19020:	mov	r0, #0
   19024:	pop	{r4, pc}
   19028:	cmp	r0, #0
   1902c:	beq	19050 <__assert_fail@plt+0x8064>
   19030:	cmp	r1, #0
   19034:	push	{lr}		; (str lr, [sp, #-4]!)
   19038:	sub	sp, sp, #12
   1903c:	beq	19058 <__assert_fail@plt+0x806c>
   19040:	blt	19070 <__assert_fail@plt+0x8084>
   19044:	add	sp, sp, #12
   19048:	pop	{lr}		; (ldr lr, [sp], #4)
   1904c:	b	10e18 <realloc@plt>
   19050:	mov	r0, r1
   19054:	b	18ffc <__assert_fail@plt+0x8010>
   19058:	str	r1, [sp, #4]
   1905c:	bl	12ad4 <__assert_fail@plt+0x1ae8>
   19060:	ldr	r3, [sp, #4]
   19064:	mov	r0, r3
   19068:	add	sp, sp, #12
   1906c:	pop	{pc}		; (ldr pc, [sp], #4)
   19070:	bl	10f20 <__errno_location@plt>
   19074:	mov	r2, #12
   19078:	mov	r3, #0
   1907c:	str	r2, [r0]
   19080:	b	19064 <__assert_fail@plt+0x8078>
   19084:	push	{r4, r5, r6, lr}
   19088:	mov	r4, r0
   1908c:	bl	10e60 <__fpending@plt>
   19090:	ldr	r5, [r4]
   19094:	and	r5, r5, #32
   19098:	mov	r6, r0
   1909c:	mov	r0, r4
   190a0:	bl	129d4 <__assert_fail@plt+0x19e8>
   190a4:	cmp	r5, #0
   190a8:	mov	r4, r0
   190ac:	bne	190cc <__assert_fail@plt+0x80e0>
   190b0:	cmp	r0, #0
   190b4:	beq	190c4 <__assert_fail@plt+0x80d8>
   190b8:	cmp	r6, #0
   190bc:	beq	190e8 <__assert_fail@plt+0x80fc>
   190c0:	mvn	r4, #0
   190c4:	mov	r0, r4
   190c8:	pop	{r4, r5, r6, pc}
   190cc:	cmp	r0, #0
   190d0:	bne	190c0 <__assert_fail@plt+0x80d4>
   190d4:	bl	10f20 <__errno_location@plt>
   190d8:	str	r4, [r0]
   190dc:	mvn	r4, #0
   190e0:	mov	r0, r4
   190e4:	pop	{r4, r5, r6, pc}
   190e8:	bl	10f20 <__errno_location@plt>
   190ec:	ldr	r4, [r0]
   190f0:	subs	r4, r4, #9
   190f4:	mvnne	r4, #0
   190f8:	mov	r0, r4
   190fc:	pop	{r4, r5, r6, pc}
   19100:	push	{r4, lr}
   19104:	mov	r0, #14
   19108:	bl	10fb0 <nl_langinfo@plt>
   1910c:	cmp	r0, #0
   19110:	beq	19128 <__assert_fail@plt+0x813c>
   19114:	ldrb	r2, [r0]
   19118:	ldr	r3, [pc, #16]	; 19130 <__assert_fail@plt+0x8144>
   1911c:	cmp	r2, #0
   19120:	moveq	r0, r3
   19124:	pop	{r4, pc}
   19128:	ldr	r0, [pc]	; 19130 <__assert_fail@plt+0x8144>
   1912c:	pop	{r4, pc}
   19130:	andeq	sl, r1, r8, lsr r8
   19134:	push	{r4, r5, r6, r7, lr}
   19138:	subs	r6, r0, #0
   1913c:	sub	sp, sp, #12
   19140:	addeq	r6, sp, #4
   19144:	mov	r0, r6
   19148:	mov	r5, r2
   1914c:	mov	r7, r1
   19150:	bl	10e6c <mbrtowc@plt>
   19154:	cmp	r5, #0
   19158:	cmnne	r0, #3
   1915c:	mov	r4, r0
   19160:	bls	1917c <__assert_fail@plt+0x8190>
   19164:	mov	r0, #0
   19168:	bl	191d4 <__assert_fail@plt+0x81e8>
   1916c:	cmp	r0, #0
   19170:	moveq	r4, #1
   19174:	ldrbeq	r3, [r7]
   19178:	streq	r3, [r6]
   1917c:	mov	r0, r4
   19180:	add	sp, sp, #12
   19184:	pop	{r4, r5, r6, r7, pc}
   19188:	push	{r4, r5, r6, lr}
   1918c:	subs	r4, r2, #0
   19190:	mov	r6, r0
   19194:	mov	r5, r1
   19198:	beq	191c4 <__assert_fail@plt+0x81d8>
   1919c:	mov	r1, r4
   191a0:	mvn	r0, #0
   191a4:	bl	192c8 <__assert_fail@plt+0x82dc>
   191a8:	cmp	r0, r5
   191ac:	bcs	191c4 <__assert_fail@plt+0x81d8>
   191b0:	bl	10f20 <__errno_location@plt>
   191b4:	mov	r3, #12
   191b8:	str	r3, [r0]
   191bc:	mov	r0, #0
   191c0:	pop	{r4, r5, r6, pc}
   191c4:	mul	r1, r5, r4
   191c8:	mov	r0, r6
   191cc:	pop	{r4, r5, r6, lr}
   191d0:	b	19028 <__assert_fail@plt+0x803c>
   191d4:	push	{lr}		; (str lr, [sp, #-4]!)
   191d8:	sub	sp, sp, #268	; 0x10c
   191dc:	add	r1, sp, #4
   191e0:	ldr	r2, [pc, #60]	; 19224 <__assert_fail@plt+0x8238>
   191e4:	bl	19230 <__assert_fail@plt+0x8244>
   191e8:	cmp	r0, #0
   191ec:	movne	r0, #0
   191f0:	bne	1921c <__assert_fail@plt+0x8230>
   191f4:	ldr	r1, [pc, #44]	; 19228 <__assert_fail@plt+0x823c>
   191f8:	add	r0, sp, #4
   191fc:	bl	10d70 <strcmp@plt>
   19200:	cmp	r0, #0
   19204:	beq	1921c <__assert_fail@plt+0x8230>
   19208:	add	r0, sp, #4
   1920c:	ldr	r1, [pc, #24]	; 1922c <__assert_fail@plt+0x8240>
   19210:	bl	10d70 <strcmp@plt>
   19214:	adds	r0, r0, #0
   19218:	movne	r0, #1
   1921c:	add	sp, sp, #268	; 0x10c
   19220:	pop	{pc}		; (ldr pc, [sp], #4)
   19224:	andeq	r0, r0, r1, lsl #2
   19228:	andeq	sl, r1, r0, asr #16
   1922c:	andeq	sl, r1, r4, asr #16
   19230:	push	{r4, r5, r6, lr}
   19234:	mov	r5, r1
   19238:	mov	r1, #0
   1923c:	mov	r4, r2
   19240:	bl	10f98 <setlocale@plt>
   19244:	subs	r6, r0, #0
   19248:	beq	192a4 <__assert_fail@plt+0x82b8>
   1924c:	bl	10f08 <strlen@plt>
   19250:	cmp	r4, r0
   19254:	bhi	1928c <__assert_fail@plt+0x82a0>
   19258:	cmp	r4, #0
   1925c:	bne	19268 <__assert_fail@plt+0x827c>
   19260:	mov	r0, #34	; 0x22
   19264:	pop	{r4, r5, r6, pc}
   19268:	sub	r4, r4, #1
   1926c:	mov	r1, r6
   19270:	mov	r2, r4
   19274:	mov	r0, r5
   19278:	bl	10db8 <memcpy@plt>
   1927c:	mov	r3, #0
   19280:	strb	r3, [r5, r4]
   19284:	mov	r0, #34	; 0x22
   19288:	pop	{r4, r5, r6, pc}
   1928c:	add	r2, r0, #1
   19290:	mov	r1, r6
   19294:	mov	r0, r5
   19298:	bl	10db8 <memcpy@plt>
   1929c:	mov	r0, #0
   192a0:	pop	{r4, r5, r6, pc}
   192a4:	cmp	r4, #0
   192a8:	beq	192b8 <__assert_fail@plt+0x82cc>
   192ac:	strb	r6, [r5]
   192b0:	mov	r0, #22
   192b4:	pop	{r4, r5, r6, pc}
   192b8:	mov	r0, #22
   192bc:	pop	{r4, r5, r6, pc}
   192c0:	mov	r1, #0
   192c4:	b	10f98 <setlocale@plt>
   192c8:	subs	r2, r1, #1
   192cc:	bxeq	lr
   192d0:	bcc	194a8 <__assert_fail@plt+0x84bc>
   192d4:	cmp	r0, r1
   192d8:	bls	1948c <__assert_fail@plt+0x84a0>
   192dc:	tst	r1, r2
   192e0:	beq	19498 <__assert_fail@plt+0x84ac>
   192e4:	clz	r3, r0
   192e8:	clz	r2, r1
   192ec:	sub	r3, r2, r3
   192f0:	rsbs	r3, r3, #31
   192f4:	addne	r3, r3, r3, lsl #1
   192f8:	mov	r2, #0
   192fc:	addne	pc, pc, r3, lsl #2
   19300:	nop			; (mov r0, r0)
   19304:	cmp	r0, r1, lsl #31
   19308:	adc	r2, r2, r2
   1930c:	subcs	r0, r0, r1, lsl #31
   19310:	cmp	r0, r1, lsl #30
   19314:	adc	r2, r2, r2
   19318:	subcs	r0, r0, r1, lsl #30
   1931c:	cmp	r0, r1, lsl #29
   19320:	adc	r2, r2, r2
   19324:	subcs	r0, r0, r1, lsl #29
   19328:	cmp	r0, r1, lsl #28
   1932c:	adc	r2, r2, r2
   19330:	subcs	r0, r0, r1, lsl #28
   19334:	cmp	r0, r1, lsl #27
   19338:	adc	r2, r2, r2
   1933c:	subcs	r0, r0, r1, lsl #27
   19340:	cmp	r0, r1, lsl #26
   19344:	adc	r2, r2, r2
   19348:	subcs	r0, r0, r1, lsl #26
   1934c:	cmp	r0, r1, lsl #25
   19350:	adc	r2, r2, r2
   19354:	subcs	r0, r0, r1, lsl #25
   19358:	cmp	r0, r1, lsl #24
   1935c:	adc	r2, r2, r2
   19360:	subcs	r0, r0, r1, lsl #24
   19364:	cmp	r0, r1, lsl #23
   19368:	adc	r2, r2, r2
   1936c:	subcs	r0, r0, r1, lsl #23
   19370:	cmp	r0, r1, lsl #22
   19374:	adc	r2, r2, r2
   19378:	subcs	r0, r0, r1, lsl #22
   1937c:	cmp	r0, r1, lsl #21
   19380:	adc	r2, r2, r2
   19384:	subcs	r0, r0, r1, lsl #21
   19388:	cmp	r0, r1, lsl #20
   1938c:	adc	r2, r2, r2
   19390:	subcs	r0, r0, r1, lsl #20
   19394:	cmp	r0, r1, lsl #19
   19398:	adc	r2, r2, r2
   1939c:	subcs	r0, r0, r1, lsl #19
   193a0:	cmp	r0, r1, lsl #18
   193a4:	adc	r2, r2, r2
   193a8:	subcs	r0, r0, r1, lsl #18
   193ac:	cmp	r0, r1, lsl #17
   193b0:	adc	r2, r2, r2
   193b4:	subcs	r0, r0, r1, lsl #17
   193b8:	cmp	r0, r1, lsl #16
   193bc:	adc	r2, r2, r2
   193c0:	subcs	r0, r0, r1, lsl #16
   193c4:	cmp	r0, r1, lsl #15
   193c8:	adc	r2, r2, r2
   193cc:	subcs	r0, r0, r1, lsl #15
   193d0:	cmp	r0, r1, lsl #14
   193d4:	adc	r2, r2, r2
   193d8:	subcs	r0, r0, r1, lsl #14
   193dc:	cmp	r0, r1, lsl #13
   193e0:	adc	r2, r2, r2
   193e4:	subcs	r0, r0, r1, lsl #13
   193e8:	cmp	r0, r1, lsl #12
   193ec:	adc	r2, r2, r2
   193f0:	subcs	r0, r0, r1, lsl #12
   193f4:	cmp	r0, r1, lsl #11
   193f8:	adc	r2, r2, r2
   193fc:	subcs	r0, r0, r1, lsl #11
   19400:	cmp	r0, r1, lsl #10
   19404:	adc	r2, r2, r2
   19408:	subcs	r0, r0, r1, lsl #10
   1940c:	cmp	r0, r1, lsl #9
   19410:	adc	r2, r2, r2
   19414:	subcs	r0, r0, r1, lsl #9
   19418:	cmp	r0, r1, lsl #8
   1941c:	adc	r2, r2, r2
   19420:	subcs	r0, r0, r1, lsl #8
   19424:	cmp	r0, r1, lsl #7
   19428:	adc	r2, r2, r2
   1942c:	subcs	r0, r0, r1, lsl #7
   19430:	cmp	r0, r1, lsl #6
   19434:	adc	r2, r2, r2
   19438:	subcs	r0, r0, r1, lsl #6
   1943c:	cmp	r0, r1, lsl #5
   19440:	adc	r2, r2, r2
   19444:	subcs	r0, r0, r1, lsl #5
   19448:	cmp	r0, r1, lsl #4
   1944c:	adc	r2, r2, r2
   19450:	subcs	r0, r0, r1, lsl #4
   19454:	cmp	r0, r1, lsl #3
   19458:	adc	r2, r2, r2
   1945c:	subcs	r0, r0, r1, lsl #3
   19460:	cmp	r0, r1, lsl #2
   19464:	adc	r2, r2, r2
   19468:	subcs	r0, r0, r1, lsl #2
   1946c:	cmp	r0, r1, lsl #1
   19470:	adc	r2, r2, r2
   19474:	subcs	r0, r0, r1, lsl #1
   19478:	cmp	r0, r1
   1947c:	adc	r2, r2, r2
   19480:	subcs	r0, r0, r1
   19484:	mov	r0, r2
   19488:	bx	lr
   1948c:	moveq	r0, #1
   19490:	movne	r0, #0
   19494:	bx	lr
   19498:	clz	r2, r1
   1949c:	rsb	r2, r2, #31
   194a0:	lsr	r0, r0, r2
   194a4:	bx	lr
   194a8:	cmp	r0, #0
   194ac:	mvnne	r0, #0
   194b0:	b	19714 <__assert_fail@plt+0x8728>
   194b4:	cmp	r1, #0
   194b8:	beq	194a8 <__assert_fail@plt+0x84bc>
   194bc:	push	{r0, r1, lr}
   194c0:	bl	192c8 <__assert_fail@plt+0x82dc>
   194c4:	pop	{r1, r2, lr}
   194c8:	mul	r3, r2, r0
   194cc:	sub	r1, r1, r3
   194d0:	bx	lr
   194d4:	cmp	r1, #0
   194d8:	beq	196e4 <__assert_fail@plt+0x86f8>
   194dc:	eor	ip, r0, r1
   194e0:	rsbmi	r1, r1, #0
   194e4:	subs	r2, r1, #1
   194e8:	beq	196b0 <__assert_fail@plt+0x86c4>
   194ec:	movs	r3, r0
   194f0:	rsbmi	r3, r0, #0
   194f4:	cmp	r3, r1
   194f8:	bls	196bc <__assert_fail@plt+0x86d0>
   194fc:	tst	r1, r2
   19500:	beq	196cc <__assert_fail@plt+0x86e0>
   19504:	clz	r2, r3
   19508:	clz	r0, r1
   1950c:	sub	r2, r0, r2
   19510:	rsbs	r2, r2, #31
   19514:	addne	r2, r2, r2, lsl #1
   19518:	mov	r0, #0
   1951c:	addne	pc, pc, r2, lsl #2
   19520:	nop			; (mov r0, r0)
   19524:	cmp	r3, r1, lsl #31
   19528:	adc	r0, r0, r0
   1952c:	subcs	r3, r3, r1, lsl #31
   19530:	cmp	r3, r1, lsl #30
   19534:	adc	r0, r0, r0
   19538:	subcs	r3, r3, r1, lsl #30
   1953c:	cmp	r3, r1, lsl #29
   19540:	adc	r0, r0, r0
   19544:	subcs	r3, r3, r1, lsl #29
   19548:	cmp	r3, r1, lsl #28
   1954c:	adc	r0, r0, r0
   19550:	subcs	r3, r3, r1, lsl #28
   19554:	cmp	r3, r1, lsl #27
   19558:	adc	r0, r0, r0
   1955c:	subcs	r3, r3, r1, lsl #27
   19560:	cmp	r3, r1, lsl #26
   19564:	adc	r0, r0, r0
   19568:	subcs	r3, r3, r1, lsl #26
   1956c:	cmp	r3, r1, lsl #25
   19570:	adc	r0, r0, r0
   19574:	subcs	r3, r3, r1, lsl #25
   19578:	cmp	r3, r1, lsl #24
   1957c:	adc	r0, r0, r0
   19580:	subcs	r3, r3, r1, lsl #24
   19584:	cmp	r3, r1, lsl #23
   19588:	adc	r0, r0, r0
   1958c:	subcs	r3, r3, r1, lsl #23
   19590:	cmp	r3, r1, lsl #22
   19594:	adc	r0, r0, r0
   19598:	subcs	r3, r3, r1, lsl #22
   1959c:	cmp	r3, r1, lsl #21
   195a0:	adc	r0, r0, r0
   195a4:	subcs	r3, r3, r1, lsl #21
   195a8:	cmp	r3, r1, lsl #20
   195ac:	adc	r0, r0, r0
   195b0:	subcs	r3, r3, r1, lsl #20
   195b4:	cmp	r3, r1, lsl #19
   195b8:	adc	r0, r0, r0
   195bc:	subcs	r3, r3, r1, lsl #19
   195c0:	cmp	r3, r1, lsl #18
   195c4:	adc	r0, r0, r0
   195c8:	subcs	r3, r3, r1, lsl #18
   195cc:	cmp	r3, r1, lsl #17
   195d0:	adc	r0, r0, r0
   195d4:	subcs	r3, r3, r1, lsl #17
   195d8:	cmp	r3, r1, lsl #16
   195dc:	adc	r0, r0, r0
   195e0:	subcs	r3, r3, r1, lsl #16
   195e4:	cmp	r3, r1, lsl #15
   195e8:	adc	r0, r0, r0
   195ec:	subcs	r3, r3, r1, lsl #15
   195f0:	cmp	r3, r1, lsl #14
   195f4:	adc	r0, r0, r0
   195f8:	subcs	r3, r3, r1, lsl #14
   195fc:	cmp	r3, r1, lsl #13
   19600:	adc	r0, r0, r0
   19604:	subcs	r3, r3, r1, lsl #13
   19608:	cmp	r3, r1, lsl #12
   1960c:	adc	r0, r0, r0
   19610:	subcs	r3, r3, r1, lsl #12
   19614:	cmp	r3, r1, lsl #11
   19618:	adc	r0, r0, r0
   1961c:	subcs	r3, r3, r1, lsl #11
   19620:	cmp	r3, r1, lsl #10
   19624:	adc	r0, r0, r0
   19628:	subcs	r3, r3, r1, lsl #10
   1962c:	cmp	r3, r1, lsl #9
   19630:	adc	r0, r0, r0
   19634:	subcs	r3, r3, r1, lsl #9
   19638:	cmp	r3, r1, lsl #8
   1963c:	adc	r0, r0, r0
   19640:	subcs	r3, r3, r1, lsl #8
   19644:	cmp	r3, r1, lsl #7
   19648:	adc	r0, r0, r0
   1964c:	subcs	r3, r3, r1, lsl #7
   19650:	cmp	r3, r1, lsl #6
   19654:	adc	r0, r0, r0
   19658:	subcs	r3, r3, r1, lsl #6
   1965c:	cmp	r3, r1, lsl #5
   19660:	adc	r0, r0, r0
   19664:	subcs	r3, r3, r1, lsl #5
   19668:	cmp	r3, r1, lsl #4
   1966c:	adc	r0, r0, r0
   19670:	subcs	r3, r3, r1, lsl #4
   19674:	cmp	r3, r1, lsl #3
   19678:	adc	r0, r0, r0
   1967c:	subcs	r3, r3, r1, lsl #3
   19680:	cmp	r3, r1, lsl #2
   19684:	adc	r0, r0, r0
   19688:	subcs	r3, r3, r1, lsl #2
   1968c:	cmp	r3, r1, lsl #1
   19690:	adc	r0, r0, r0
   19694:	subcs	r3, r3, r1, lsl #1
   19698:	cmp	r3, r1
   1969c:	adc	r0, r0, r0
   196a0:	subcs	r3, r3, r1
   196a4:	cmp	ip, #0
   196a8:	rsbmi	r0, r0, #0
   196ac:	bx	lr
   196b0:	teq	ip, r0
   196b4:	rsbmi	r0, r0, #0
   196b8:	bx	lr
   196bc:	movcc	r0, #0
   196c0:	asreq	r0, ip, #31
   196c4:	orreq	r0, r0, #1
   196c8:	bx	lr
   196cc:	clz	r2, r1
   196d0:	rsb	r2, r2, #31
   196d4:	cmp	ip, #0
   196d8:	lsr	r0, r3, r2
   196dc:	rsbmi	r0, r0, #0
   196e0:	bx	lr
   196e4:	cmp	r0, #0
   196e8:	mvngt	r0, #-2147483648	; 0x80000000
   196ec:	movlt	r0, #-2147483648	; 0x80000000
   196f0:	b	19714 <__assert_fail@plt+0x8728>
   196f4:	cmp	r1, #0
   196f8:	beq	196e4 <__assert_fail@plt+0x86f8>
   196fc:	push	{r0, r1, lr}
   19700:	bl	194dc <__assert_fail@plt+0x84f0>
   19704:	pop	{r1, r2, lr}
   19708:	mul	r3, r2, r0
   1970c:	sub	r1, r1, r3
   19710:	bx	lr
   19714:	push	{r1, lr}
   19718:	mov	r0, #8
   1971c:	bl	10d64 <raise@plt>
   19720:	pop	{r1, pc}
   19724:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19728:	mov	r7, r0
   1972c:	ldr	r6, [pc, #72]	; 1977c <__assert_fail@plt+0x8790>
   19730:	ldr	r5, [pc, #72]	; 19780 <__assert_fail@plt+0x8794>
   19734:	add	r6, pc, r6
   19738:	add	r5, pc, r5
   1973c:	sub	r6, r6, r5
   19740:	mov	r8, r1
   19744:	mov	r9, r2
   19748:	bl	10d2c <calloc@plt-0x20>
   1974c:	asrs	r6, r6, #2
   19750:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19754:	mov	r4, #0
   19758:	add	r4, r4, #1
   1975c:	ldr	r3, [r5], #4
   19760:	mov	r2, r9
   19764:	mov	r1, r8
   19768:	mov	r0, r7
   1976c:	blx	r3
   19770:	cmp	r6, r4
   19774:	bne	19758 <__assert_fail@plt+0x876c>
   19778:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1977c:	ldrdeq	r1, [r1], -r4
   19780:	andeq	r1, r1, ip, asr #15
   19784:	bx	lr
   19788:	ldr	r3, [pc, #12]	; 1979c <__assert_fail@plt+0x87b0>
   1978c:	mov	r1, #0
   19790:	add	r3, pc, r3
   19794:	ldr	r2, [r3]
   19798:	b	10f2c <__cxa_atexit@plt>
   1979c:	andeq	r1, r1, r0, ror #18

Disassembly of section .fini:

000197a0 <.fini>:
   197a0:	push	{r3, lr}
   197a4:	pop	{r3, pc}
