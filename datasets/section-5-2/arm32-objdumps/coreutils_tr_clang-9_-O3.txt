
../repos/coreutils/src/tr:     file format elf32-littlearm


Disassembly of section .init:

00010e10 <.init>:
   10e10:	push	{r3, lr}
   10e14:	bl	110ec <__assert_fail@plt+0x4c>
   10e18:	pop	{r3, pc}

Disassembly of section .plt:

00010e1c <calloc@plt-0x14>:
   10e1c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e20:	ldr	lr, [pc, #4]	; 10e2c <calloc@plt-0x4>
   10e24:	add	lr, pc, lr
   10e28:	ldr	pc, [lr, #8]!
   10e2c:	ldrdeq	sl, [r1], -r4

00010e30 <calloc@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #106496	; 0x1a000
   10e38:	ldr	pc, [ip, #468]!	; 0x1d4

00010e3c <fputs_unlocked@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #106496	; 0x1a000
   10e44:	ldr	pc, [ip, #460]!	; 0x1cc

00010e48 <raise@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #106496	; 0x1a000
   10e50:	ldr	pc, [ip, #452]!	; 0x1c4

00010e54 <strcmp@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #106496	; 0x1a000
   10e5c:	ldr	pc, [ip, #444]!	; 0x1bc

00010e60 <posix_fadvise64@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #106496	; 0x1a000
   10e68:	ldr	pc, [ip, #436]!	; 0x1b4

00010e6c <read@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #106496	; 0x1a000
   10e74:	ldr	pc, [ip, #428]!	; 0x1ac

00010e78 <fflush@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #106496	; 0x1a000
   10e80:	ldr	pc, [ip, #420]!	; 0x1a4

00010e84 <free@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #106496	; 0x1a000
   10e8c:	ldr	pc, [ip, #412]!	; 0x19c

00010e90 <_exit@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #106496	; 0x1a000
   10e98:	ldr	pc, [ip, #404]!	; 0x194

00010e9c <memcpy@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #106496	; 0x1a000
   10ea4:	ldr	pc, [ip, #396]!	; 0x18c

00010ea8 <__strtoull_internal@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #106496	; 0x1a000
   10eb0:	ldr	pc, [ip, #388]!	; 0x184

00010eb4 <mbsinit@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #106496	; 0x1a000
   10ebc:	ldr	pc, [ip, #380]!	; 0x17c

00010ec0 <fwrite_unlocked@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #106496	; 0x1a000
   10ec8:	ldr	pc, [ip, #372]!	; 0x174

00010ecc <stpcpy@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #106496	; 0x1a000
   10ed4:	ldr	pc, [ip, #364]!	; 0x16c

00010ed8 <dcgettext@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #106496	; 0x1a000
   10ee0:	ldr	pc, [ip, #356]!	; 0x164

00010ee4 <realloc@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #106496	; 0x1a000
   10eec:	ldr	pc, [ip, #348]!	; 0x15c

00010ef0 <textdomain@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #106496	; 0x1a000
   10ef8:	ldr	pc, [ip, #340]!	; 0x154

00010efc <iswprint@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #106496	; 0x1a000
   10f04:	ldr	pc, [ip, #332]!	; 0x14c

00010f08 <fwrite@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #106496	; 0x1a000
   10f10:	ldr	pc, [ip, #324]!	; 0x144

00010f14 <lseek64@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #106496	; 0x1a000
   10f1c:	ldr	pc, [ip, #316]!	; 0x13c

00010f20 <__ctype_get_mb_cur_max@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #106496	; 0x1a000
   10f28:	ldr	pc, [ip, #308]!	; 0x134

00010f2c <__fpending@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #106496	; 0x1a000
   10f34:	ldr	pc, [ip, #300]!	; 0x12c

00010f38 <mbrtowc@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #106496	; 0x1a000
   10f40:	ldr	pc, [ip, #292]!	; 0x124

00010f44 <error@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #106496	; 0x1a000
   10f4c:	ldr	pc, [ip, #284]!	; 0x11c

00010f50 <malloc@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #106496	; 0x1a000
   10f58:	ldr	pc, [ip, #276]!	; 0x114

00010f5c <__libc_start_main@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #106496	; 0x1a000
   10f64:	ldr	pc, [ip, #268]!	; 0x10c

00010f68 <__freading@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #106496	; 0x1a000
   10f70:	ldr	pc, [ip, #260]!	; 0x104

00010f74 <__ctype_tolower_loc@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #106496	; 0x1a000
   10f7c:	ldr	pc, [ip, #252]!	; 0xfc

00010f80 <__ctype_toupper_loc@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #106496	; 0x1a000
   10f88:	ldr	pc, [ip, #244]!	; 0xf4

00010f8c <__gmon_start__@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #106496	; 0x1a000
   10f94:	ldr	pc, [ip, #236]!	; 0xec

00010f98 <getopt_long@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #106496	; 0x1a000
   10fa0:	ldr	pc, [ip, #228]!	; 0xe4

00010fa4 <__ctype_b_loc@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #106496	; 0x1a000
   10fac:	ldr	pc, [ip, #220]!	; 0xdc

00010fb0 <exit@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #106496	; 0x1a000
   10fb8:	ldr	pc, [ip, #212]!	; 0xd4

00010fbc <bcmp@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #106496	; 0x1a000
   10fc4:	ldr	pc, [ip, #204]!	; 0xcc

00010fc8 <strlen@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #106496	; 0x1a000
   10fd0:	ldr	pc, [ip, #196]!	; 0xc4

00010fd4 <strchr@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #106496	; 0x1a000
   10fdc:	ldr	pc, [ip, #188]!	; 0xbc

00010fe0 <__errno_location@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #106496	; 0x1a000
   10fe8:	ldr	pc, [ip, #180]!	; 0xb4

00010fec <__sprintf_chk@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #106496	; 0x1a000
   10ff4:	ldr	pc, [ip, #172]!	; 0xac

00010ff8 <__cxa_atexit@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #106496	; 0x1a000
   11000:	ldr	pc, [ip, #164]!	; 0xa4

00011004 <memset@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #106496	; 0x1a000
   1100c:	ldr	pc, [ip, #156]!	; 0x9c

00011010 <__printf_chk@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #106496	; 0x1a000
   11018:	ldr	pc, [ip, #148]!	; 0x94

0001101c <fileno@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #106496	; 0x1a000
   11024:	ldr	pc, [ip, #140]!	; 0x8c

00011028 <__fprintf_chk@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #106496	; 0x1a000
   11030:	ldr	pc, [ip, #132]!	; 0x84

00011034 <fclose@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #106496	; 0x1a000
   1103c:	ldr	pc, [ip, #124]!	; 0x7c

00011040 <fseeko64@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #106496	; 0x1a000
   11048:	ldr	pc, [ip, #116]!	; 0x74

0001104c <setlocale@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #106496	; 0x1a000
   11054:	ldr	pc, [ip, #108]!	; 0x6c

00011058 <strrchr@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #106496	; 0x1a000
   11060:	ldr	pc, [ip, #100]!	; 0x64

00011064 <nl_langinfo@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #106496	; 0x1a000
   1106c:	ldr	pc, [ip, #92]!	; 0x5c

00011070 <bindtextdomain@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #106496	; 0x1a000
   11078:	ldr	pc, [ip, #84]!	; 0x54

0001107c <strncmp@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #106496	; 0x1a000
   11084:	ldr	pc, [ip, #76]!	; 0x4c

00011088 <abort@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #106496	; 0x1a000
   11090:	ldr	pc, [ip, #68]!	; 0x44

00011094 <close@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #106496	; 0x1a000
   1109c:	ldr	pc, [ip, #60]!	; 0x3c

000110a0 <__assert_fail@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #106496	; 0x1a000
   110a8:	ldr	pc, [ip, #52]!	; 0x34

Disassembly of section .text:

000110b0 <.text>:
   110b0:	mov	fp, #0
   110b4:	mov	lr, #0
   110b8:	pop	{r1}		; (ldr r1, [sp], #4)
   110bc:	mov	r2, sp
   110c0:	push	{r2}		; (str r2, [sp, #-4]!)
   110c4:	push	{r0}		; (str r0, [sp, #-4]!)
   110c8:	ldr	ip, [pc, #16]	; 110e0 <__assert_fail@plt+0x40>
   110cc:	push	{ip}		; (str ip, [sp, #-4]!)
   110d0:	ldr	r0, [pc, #12]	; 110e4 <__assert_fail@plt+0x44>
   110d4:	ldr	r3, [pc, #12]	; 110e8 <__assert_fail@plt+0x48>
   110d8:	bl	10f5c <__libc_start_main@plt>
   110dc:	bl	11088 <abort@plt>
   110e0:	andeq	r8, r1, r8, ror #10
   110e4:	andeq	r1, r1, r0, ror #8
   110e8:	andeq	r8, r1, r8, lsl #10
   110ec:	ldr	r3, [pc, #20]	; 11108 <__assert_fail@plt+0x68>
   110f0:	ldr	r2, [pc, #20]	; 1110c <__assert_fail@plt+0x6c>
   110f4:	add	r3, pc, r3
   110f8:	ldr	r2, [r3, r2]
   110fc:	cmp	r2, #0
   11100:	bxeq	lr
   11104:	b	10f8c <__gmon_start__@plt>
   11108:	andeq	r9, r1, r4, lsl #30
   1110c:	andeq	r0, r0, r0, ror #1
   11110:	ldr	r0, [pc, #24]	; 11130 <__assert_fail@plt+0x90>
   11114:	ldr	r3, [pc, #24]	; 11134 <__assert_fail@plt+0x94>
   11118:	cmp	r3, r0
   1111c:	bxeq	lr
   11120:	ldr	r3, [pc, #16]	; 11138 <__assert_fail@plt+0x98>
   11124:	cmp	r3, #0
   11128:	bxeq	lr
   1112c:	bx	r3
   11130:	andeq	fp, r2, r8, lsr r1
   11134:	andeq	fp, r2, r8, lsr r1
   11138:	andeq	r0, r0, r0
   1113c:	ldr	r0, [pc, #36]	; 11168 <__assert_fail@plt+0xc8>
   11140:	ldr	r1, [pc, #36]	; 1116c <__assert_fail@plt+0xcc>
   11144:	sub	r1, r1, r0
   11148:	asr	r1, r1, #2
   1114c:	add	r1, r1, r1, lsr #31
   11150:	asrs	r1, r1, #1
   11154:	bxeq	lr
   11158:	ldr	r3, [pc, #16]	; 11170 <__assert_fail@plt+0xd0>
   1115c:	cmp	r3, #0
   11160:	bxeq	lr
   11164:	bx	r3
   11168:	andeq	fp, r2, r8, lsr r1
   1116c:	andeq	fp, r2, r8, lsr r1
   11170:	andeq	r0, r0, r0
   11174:	push	{r4, lr}
   11178:	ldr	r4, [pc, #24]	; 11198 <__assert_fail@plt+0xf8>
   1117c:	ldrb	r3, [r4]
   11180:	cmp	r3, #0
   11184:	popne	{r4, pc}
   11188:	bl	11110 <__assert_fail@plt+0x70>
   1118c:	mov	r3, #1
   11190:	strb	r3, [r4]
   11194:	pop	{r4, pc}
   11198:	andeq	fp, r2, r0, ror #2
   1119c:	b	1113c <__assert_fail@plt+0x9c>
   111a0:	push	{fp, lr}
   111a4:	mov	fp, sp
   111a8:	sub	sp, sp, #56	; 0x38
   111ac:	mov	r4, r0
   111b0:	cmp	r0, #0
   111b4:	bne	11410 <__assert_fail@plt+0x370>
   111b8:	movw	r1, #34235	; 0x85bb
   111bc:	mov	r0, #0
   111c0:	mov	r2, #5
   111c4:	movt	r1, #1
   111c8:	bl	10ed8 <dcgettext@plt>
   111cc:	mov	r1, r0
   111d0:	movw	r0, #54400	; 0xd480
   111d4:	movt	r0, #2
   111d8:	ldr	r2, [r0]
   111dc:	mov	r0, #1
   111e0:	bl	11010 <__printf_chk@plt>
   111e4:	movw	r1, #34270	; 0x85de
   111e8:	mov	r0, #0
   111ec:	mov	r2, #5
   111f0:	movt	r1, #1
   111f4:	bl	10ed8 <dcgettext@plt>
   111f8:	movw	r7, #45404	; 0xb15c
   111fc:	movt	r7, #2
   11200:	ldr	r1, [r7]
   11204:	bl	10e3c <fputs_unlocked@plt>
   11208:	movw	r1, #34766	; 0x87ce
   1120c:	mov	r0, #0
   11210:	mov	r2, #5
   11214:	movt	r1, #1
   11218:	bl	10ed8 <dcgettext@plt>
   1121c:	ldr	r1, [r7]
   11220:	bl	10e3c <fputs_unlocked@plt>
   11224:	movw	r1, #34811	; 0x87fb
   11228:	mov	r0, #0
   1122c:	mov	r2, #5
   11230:	movt	r1, #1
   11234:	bl	10ed8 <dcgettext@plt>
   11238:	ldr	r1, [r7]
   1123c:	bl	10e3c <fputs_unlocked@plt>
   11240:	movw	r1, #34865	; 0x8831
   11244:	mov	r0, #0
   11248:	mov	r2, #5
   1124c:	movt	r1, #1
   11250:	bl	10ed8 <dcgettext@plt>
   11254:	ldr	r1, [r7]
   11258:	bl	10e3c <fputs_unlocked@plt>
   1125c:	movw	r1, #35238	; 0x89a6
   11260:	mov	r0, #0
   11264:	mov	r2, #5
   11268:	movt	r1, #1
   1126c:	bl	10ed8 <dcgettext@plt>
   11270:	ldr	r1, [r7]
   11274:	bl	10e3c <fputs_unlocked@plt>
   11278:	movw	r1, #35663	; 0x8b4f
   1127c:	mov	r0, #0
   11280:	mov	r2, #5
   11284:	movt	r1, #1
   11288:	bl	10ed8 <dcgettext@plt>
   1128c:	ldr	r1, [r7]
   11290:	bl	10e3c <fputs_unlocked@plt>
   11294:	movw	r1, #36074	; 0x8cea
   11298:	mov	r0, #0
   1129c:	mov	r2, #5
   112a0:	movt	r1, #1
   112a4:	bl	10ed8 <dcgettext@plt>
   112a8:	ldr	r1, [r7]
   112ac:	bl	10e3c <fputs_unlocked@plt>
   112b0:	movw	r0, #39512	; 0x9a58
   112b4:	mov	r2, #48	; 0x30
   112b8:	mov	r6, sp
   112bc:	movw	r5, #36546	; 0x8ec2
   112c0:	movt	r0, #1
   112c4:	movt	r5, #1
   112c8:	add	r1, r0, #32
   112cc:	add	r3, r0, #16
   112d0:	vld1.64	{d18-d19}, [r0], r2
   112d4:	vld1.64	{d16-d17}, [r1]
   112d8:	vld1.64	{d20-d21}, [r3]
   112dc:	vldr	d22, [r0]
   112e0:	add	r1, r6, #32
   112e4:	add	r0, r6, #16
   112e8:	vst1.64	{d16-d17}, [r1]
   112ec:	movw	r1, #36961	; 0x9061
   112f0:	vst1.64	{d20-d21}, [r0]
   112f4:	mov	r0, r6
   112f8:	movt	r1, #1
   112fc:	vst1.64	{d18-d19}, [r0], r2
   11300:	vstr	d22, [r0]
   11304:	mov	r0, r5
   11308:	bl	10e54 <strcmp@plt>
   1130c:	cmp	r0, #0
   11310:	ldrne	r1, [r6, #8]!
   11314:	cmpne	r1, #0
   11318:	bne	11304 <__assert_fail@plt+0x264>
   1131c:	movw	r1, #37056	; 0x90c0
   11320:	ldr	r6, [r6, #4]
   11324:	mov	r0, #0
   11328:	mov	r2, #5
   1132c:	movt	r1, #1
   11330:	bl	10ed8 <dcgettext@plt>
   11334:	movw	r2, #36583	; 0x8ee7
   11338:	movw	r3, #37079	; 0x90d7
   1133c:	mov	r1, r0
   11340:	mov	r0, #1
   11344:	movt	r2, #1
   11348:	movt	r3, #1
   1134c:	bl	11010 <__printf_chk@plt>
   11350:	cmp	r6, #0
   11354:	mov	r0, #5
   11358:	mov	r1, #0
   1135c:	moveq	r6, r5
   11360:	bl	1104c <setlocale@plt>
   11364:	cmp	r0, #0
   11368:	beq	113a0 <__assert_fail@plt+0x300>
   1136c:	movw	r1, #37119	; 0x90ff
   11370:	mov	r2, #3
   11374:	movt	r1, #1
   11378:	bl	1107c <strncmp@plt>
   1137c:	cmp	r0, #0
   11380:	beq	113a0 <__assert_fail@plt+0x300>
   11384:	movw	r1, #37123	; 0x9103
   11388:	mov	r0, #0
   1138c:	mov	r2, #5
   11390:	movt	r1, #1
   11394:	bl	10ed8 <dcgettext@plt>
   11398:	ldr	r1, [r7]
   1139c:	bl	10e3c <fputs_unlocked@plt>
   113a0:	movw	r1, #37194	; 0x914a
   113a4:	mov	r0, #0
   113a8:	mov	r2, #5
   113ac:	movt	r1, #1
   113b0:	bl	10ed8 <dcgettext@plt>
   113b4:	movw	r2, #37079	; 0x90d7
   113b8:	mov	r1, r0
   113bc:	mov	r0, #1
   113c0:	mov	r3, r5
   113c4:	movt	r2, #1
   113c8:	bl	11010 <__printf_chk@plt>
   113cc:	movw	r1, #37221	; 0x9165
   113d0:	mov	r0, #0
   113d4:	mov	r2, #5
   113d8:	movt	r1, #1
   113dc:	bl	10ed8 <dcgettext@plt>
   113e0:	mov	r1, r0
   113e4:	movw	r0, #36989	; 0x907d
   113e8:	movw	r3, #37271	; 0x9197
   113ec:	cmp	r6, r5
   113f0:	mov	r2, r6
   113f4:	movt	r0, #1
   113f8:	movt	r3, #1
   113fc:	moveq	r3, r0
   11400:	mov	r0, #1
   11404:	bl	11010 <__printf_chk@plt>
   11408:	mov	r0, r4
   1140c:	bl	10fb0 <exit@plt>
   11410:	movw	r0, #45392	; 0xb150
   11414:	movw	r1, #34196	; 0x8594
   11418:	mov	r2, #5
   1141c:	movt	r0, #2
   11420:	movt	r1, #1
   11424:	ldr	r5, [r0]
   11428:	mov	r0, #0
   1142c:	bl	10ed8 <dcgettext@plt>
   11430:	mov	r2, r0
   11434:	movw	r0, #54400	; 0xd480
   11438:	mov	r1, #1
   1143c:	movt	r0, #2
   11440:	ldr	r3, [r0]
   11444:	mov	r0, r5
   11448:	bl	11028 <__fprintf_chk@plt>
   1144c:	mov	r0, r4
   11450:	bl	10fb0 <exit@plt>
   11454:	nop	{0}
   11458:	nop	{0}
   1145c:	nop	{0}
   11460:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11464:	add	fp, sp, #28
   11468:	sub	sp, sp, #412	; 0x19c
   1146c:	mov	r4, r0
   11470:	ldr	r0, [r1]
   11474:	mov	r9, r1
   11478:	bl	14580 <__assert_fail@plt+0x34e0>
   1147c:	movw	r1, #37271	; 0x9197
   11480:	mov	r0, #6
   11484:	movt	r1, #1
   11488:	bl	1104c <setlocale@plt>
   1148c:	movw	r6, #36587	; 0x8eeb
   11490:	movw	r1, #36549	; 0x8ec5
   11494:	movt	r6, #1
   11498:	movt	r1, #1
   1149c:	mov	r0, r6
   114a0:	bl	11070 <bindtextdomain@plt>
   114a4:	mov	r0, r6
   114a8:	bl	10ef0 <textdomain@plt>
   114ac:	movw	r0, #17452	; 0x442c
   114b0:	movt	r0, #1
   114b4:	bl	1856c <__assert_fail@plt+0x74cc>
   114b8:	movw	r6, #36573	; 0x8edd
   114bc:	movw	r7, #39400	; 0x99e8
   114c0:	movw	r8, #36581	; 0x8ee5
   114c4:	add	r0, sp, #104	; 0x68
   114c8:	mov	r5, #0
   114cc:	mov	sl, #1
   114d0:	movt	r6, #1
   114d4:	movt	r7, #1
   114d8:	movt	r8, #1
   114dc:	add	r1, r0, #8
   114e0:	add	r0, r0, #16
   114e4:	str	r1, [sp, #60]	; 0x3c
   114e8:	str	r0, [sp, #52]	; 0x34
   114ec:	mov	r0, r4
   114f0:	mov	r1, r9
   114f4:	mov	r2, r6
   114f8:	mov	r3, r7
   114fc:	str	r5, [sp]
   11500:	bl	10f98 <getopt_long@plt>
   11504:	cmp	r0, #64	; 0x40
   11508:	ble	1164c <__assert_fail@plt+0x5ac>
   1150c:	sub	r0, r0, #65	; 0x41
   11510:	cmp	r0, #51	; 0x33
   11514:	bhi	12a98 <__assert_fail@plt+0x19f8>
   11518:	add	r1, pc, #0
   1151c:	ldr	pc, [r1, r0, lsl #2]
   11520:	andeq	r1, r1, r0, lsl r6
   11524:	muleq	r1, r8, sl
   11528:	strdeq	r1, [r1], -r0
   1152c:	muleq	r1, r8, sl
   11530:	muleq	r1, r8, sl
   11534:	muleq	r1, r8, sl
   11538:	muleq	r1, r8, sl
   1153c:	muleq	r1, r8, sl
   11540:	muleq	r1, r8, sl
   11544:	muleq	r1, r8, sl
   11548:	muleq	r1, r8, sl
   1154c:	muleq	r1, r8, sl
   11550:	muleq	r1, r8, sl
   11554:	muleq	r1, r8, sl
   11558:	muleq	r1, r8, sl
   1155c:	muleq	r1, r8, sl
   11560:	muleq	r1, r8, sl
   11564:	muleq	r1, r8, sl
   11568:	muleq	r1, r8, sl
   1156c:	muleq	r1, r8, sl
   11570:	muleq	r1, r8, sl
   11574:	muleq	r1, r8, sl
   11578:	muleq	r1, r8, sl
   1157c:	muleq	r1, r8, sl
   11580:	muleq	r1, r8, sl
   11584:	muleq	r1, r8, sl
   11588:	muleq	r1, r8, sl
   1158c:	muleq	r1, r8, sl
   11590:	muleq	r1, r8, sl
   11594:	muleq	r1, r8, sl
   11598:	muleq	r1, r8, sl
   1159c:	muleq	r1, r8, sl
   115a0:	muleq	r1, r8, sl
   115a4:	muleq	r1, r8, sl
   115a8:	strdeq	r1, [r1], -r0
   115ac:	andeq	r1, r1, ip, lsr r6
   115b0:	muleq	r1, r8, sl
   115b4:	muleq	r1, r8, sl
   115b8:	muleq	r1, r8, sl
   115bc:	muleq	r1, r8, sl
   115c0:	muleq	r1, r8, sl
   115c4:	muleq	r1, r8, sl
   115c8:	muleq	r1, r8, sl
   115cc:	muleq	r1, r8, sl
   115d0:	muleq	r1, r8, sl
   115d4:	muleq	r1, r8, sl
   115d8:	muleq	r1, r8, sl
   115dc:	muleq	r1, r8, sl
   115e0:	muleq	r1, r8, sl
   115e4:	muleq	r1, r8, sl
   115e8:	andeq	r1, r1, ip, lsr #12
   115ec:	andeq	r1, r1, r0, lsl #12
   115f0:	movw	r0, #54384	; 0xd470
   115f4:	movt	r0, #2
   115f8:	strb	sl, [r0]
   115fc:	b	114ec <__assert_fail@plt+0x44c>
   11600:	movw	r0, #54384	; 0xd470
   11604:	movt	r0, #2
   11608:	strb	sl, [r0, #3]
   1160c:	b	114ec <__assert_fail@plt+0x44c>
   11610:	mov	r0, #3
   11614:	mov	r1, r8
   11618:	bl	1104c <setlocale@plt>
   1161c:	mov	r0, #0
   11620:	mov	r1, r8
   11624:	bl	1104c <setlocale@plt>
   11628:	b	114ec <__assert_fail@plt+0x44c>
   1162c:	movw	r0, #54384	; 0xd470
   11630:	movt	r0, #2
   11634:	strb	sl, [r0, #2]
   11638:	b	114ec <__assert_fail@plt+0x44c>
   1163c:	movw	r0, #54384	; 0xd470
   11640:	movt	r0, #2
   11644:	strb	sl, [r0, #1]
   11648:	b	114ec <__assert_fail@plt+0x44c>
   1164c:	cmn	r0, #1
   11650:	bne	12920 <__assert_fail@plt+0x1880>
   11654:	movw	r8, #45384	; 0xb148
   11658:	mov	r5, #2
   1165c:	movt	r8, #2
   11660:	ldr	r0, [r8]
   11664:	sub	r7, r4, r0
   11668:	sub	r0, r7, #2
   1166c:	clz	r0, r0
   11670:	lsr	r6, r0, #5
   11674:	movw	r0, #54384	; 0xd470
   11678:	movt	r0, #2
   1167c:	mov	r3, r0
   11680:	ldrb	r0, [r0, #1]
   11684:	ldrb	r1, [r3, #2]
   11688:	cmp	r0, #0
   1168c:	eor	r2, r0, #1
   11690:	movwne	r5, #1
   11694:	cmp	r1, #0
   11698:	and	r2, r6, r2
   1169c:	movwne	r5, #2
   116a0:	teq	r0, r1
   116a4:	strb	r2, [r3, #4]
   116a8:	mov	r2, #2
   116ac:	movwne	r2, #1
   116b0:	cmp	r7, r2
   116b4:	blt	12980 <__assert_fail@plt+0x18e0>
   116b8:	cmp	r5, r7
   116bc:	str	r6, [sp, #36]	; 0x24
   116c0:	blt	129b4 <__assert_fail@plt+0x1914>
   116c4:	mov	r0, #24
   116c8:	bl	16c80 <__assert_fail@plt+0x5be0>
   116cc:	mov	sl, #0
   116d0:	str	r0, [sp, #108]	; 0x6c
   116d4:	str	r0, [sp, #104]	; 0x68
   116d8:	add	r1, sp, #104	; 0x68
   116dc:	str	sl, [r0, #4]
   116e0:	ldr	r0, [r8]
   116e4:	ldr	r0, [r9, r0, lsl #2]
   116e8:	bl	12ba8 <__assert_fail@plt+0x1b08>
   116ec:	mov	r6, #1
   116f0:	cmp	r0, #0
   116f4:	beq	12914 <__assert_fail@plt+0x1874>
   116f8:	cmp	r7, #2
   116fc:	bne	11738 <__assert_fail@plt+0x698>
   11700:	mov	r0, #24
   11704:	bl	16c80 <__assert_fail@plt+0x5be0>
   11708:	mov	r1, #0
   1170c:	str	r0, [sp, #68]	; 0x44
   11710:	str	r0, [sp, #64]	; 0x40
   11714:	add	sl, sp, #64	; 0x40
   11718:	str	r1, [r0, #4]
   1171c:	ldr	r0, [r8]
   11720:	mov	r1, sl
   11724:	add	r0, r9, r0, lsl #2
   11728:	ldr	r0, [r0, #4]
   1172c:	bl	12ba8 <__assert_fail@plt+0x1b08>
   11730:	cmp	r0, #0
   11734:	beq	12914 <__assert_fail@plt+0x1874>
   11738:	add	r0, sp, #104	; 0x68
   1173c:	str	r7, [sp, #32]
   11740:	bl	14110 <__assert_fail@plt+0x3070>
   11744:	movw	r4, #54384	; 0xd470
   11748:	mvn	r6, #1
   1174c:	movt	r4, #2
   11750:	ldrb	r0, [r4]
   11754:	cmp	r0, #1
   11758:	bne	117e0 <__assert_fail@plt+0x740>
   1175c:	add	r5, sp, #144	; 0x90
   11760:	mov	r1, #0
   11764:	mov	r2, #256	; 0x100
   11768:	mvn	r4, #0
   1176c:	mov	r9, #0
   11770:	mov	r8, #256	; 0x100
   11774:	mov	r0, r5
   11778:	bl	11004 <memset@plt>
   1177c:	ldr	r0, [sp, #60]	; 0x3c
   11780:	mov	r1, #0
   11784:	str	r6, [r0]
   11788:	str	r4, [r0, #4]
   1178c:	add	r0, sp, #104	; 0x68
   11790:	bl	13ba0 <__assert_fail@plt+0x2b00>
   11794:	cmn	r0, #1
   11798:	beq	117d0 <__assert_fail@plt+0x730>
   1179c:	mov	r8, #256	; 0x100
   117a0:	mov	r4, #1
   117a4:	add	r6, sp, #104	; 0x68
   117a8:	ldrb	r1, [r5, r0]
   117ac:	strb	r4, [r5, r0]
   117b0:	eor	r0, r1, #1
   117b4:	mov	r1, #0
   117b8:	sub	r8, r8, r0
   117bc:	mov	r0, r6
   117c0:	bl	13ba0 <__assert_fail@plt+0x2b00>
   117c4:	cmn	r0, #1
   117c8:	bne	117a8 <__assert_fail@plt+0x708>
   117cc:	asr	r9, r8, #31
   117d0:	ldr	r0, [sp, #52]	; 0x34
   117d4:	movw	r4, #54384	; 0xd470
   117d8:	movt	r4, #2
   117dc:	strd	r8, [r0]
   117e0:	ldr	r0, [sp, #128]	; 0x80
   117e4:	mvn	r9, #1
   117e8:	cmp	r0, #0
   117ec:	bne	12aa0 <__assert_fail@plt+0x1a00>
   117f0:	add	r0, sl, #8
   117f4:	cmp	sl, #0
   117f8:	str	r0, [sp, #56]	; 0x38
   117fc:	beq	11cec <__assert_fail@plt+0xc4c>
   11800:	ldr	r0, [sp, #52]	; 0x34
   11804:	add	r5, sl, #16
   11808:	ldr	r7, [r0]
   1180c:	ldr	r6, [r0, #4]
   11810:	mov	r0, sl
   11814:	bl	14110 <__assert_fail@plt+0x3070>
   11818:	str	r5, [sp, #44]	; 0x2c
   1181c:	ldrd	r0, [r5]
   11820:	subs	r2, r7, r0
   11824:	sbcs	r2, r6, r1
   11828:	bcs	11aa0 <__assert_fail@plt+0xa00>
   1182c:	mov	r7, r0
   11830:	mov	r6, r1
   11834:	mvn	r5, #1
   11838:	ldr	r0, [sl, #24]
   1183c:	cmp	r0, #2
   11840:	bcs	11ad8 <__assert_fail@plt+0xa38>
   11844:	ldrb	r1, [r4, #4]
   11848:	cmp	r1, #0
   1184c:	beq	11b54 <__assert_fail@plt+0xab4>
   11850:	ldrb	r0, [sl, #32]
   11854:	cmp	r0, #0
   11858:	bne	12ac0 <__assert_fail@plt+0x1a20>
   1185c:	ldrb	r0, [sl, #34]	; 0x22
   11860:	cmp	r0, #0
   11864:	bne	12acc <__assert_fail@plt+0x1a2c>
   11868:	ldr	r0, [sp, #52]	; 0x34
   1186c:	ldr	r2, [sl, #4]
   11870:	ldr	r3, [r0]
   11874:	ldr	r1, [r0, #4]
   11878:	ldrb	r0, [r4]
   1187c:	cmp	r0, #0
   11880:	bne	11ae4 <__assert_fail@plt+0xa44>
   11884:	ldrb	r0, [sl, #33]	; 0x21
   11888:	cmp	r0, #0
   1188c:	beq	11ae4 <__assert_fail@plt+0xa44>
   11890:	ldr	r0, [sp, #108]	; 0x6c
   11894:	str	r3, [sp, #12]
   11898:	str	r1, [sp, #16]
   1189c:	str	r7, [sp, #20]
   118a0:	str	r6, [sp, #24]
   118a4:	str	r2, [sp, #28]
   118a8:	str	sl, [sp, #48]	; 0x30
   118ac:	str	r0, [sp, #8]
   118b0:	bl	10fa4 <__ctype_b_loc@plt>
   118b4:	ldr	r0, [r0]
   118b8:	vmov.i32	q8, #0	; 0x00000000
   118bc:	vmov.i16	d20, #1	; 0x0001
   118c0:	vmov.i32	q9, #0	; 0x00000000
   118c4:	mov	r1, #0
   118c8:	add	r2, r0, r1
   118cc:	add	r1, r1, #8
   118d0:	vld1.16	{d21}, [r2]
   118d4:	cmp	r1, #512	; 0x200
   118d8:	vshr.u16	d22, d21, #9
   118dc:	vshr.u16	d21, d21, #8
   118e0:	vand	d22, d22, d20
   118e4:	vand	d21, d21, d20
   118e8:	vaddw.u16	q9, q9, d22
   118ec:	vaddw.u16	q8, q8, d21
   118f0:	bne	118c8 <__assert_fail@plt+0x828>
   118f4:	vext.8	q11, q9, q8, #8
   118f8:	vext.8	q10, q8, q8, #8
   118fc:	ldr	r0, [sp, #60]	; 0x3c
   11900:	mvn	r1, #0
   11904:	mov	r6, #1
   11908:	mov	r4, #1
   1190c:	mvn	r9, #1
   11910:	vadd.i32	q8, q8, q10
   11914:	vadd.i32	q9, q9, q11
   11918:	str	r5, [r0]
   1191c:	str	r1, [r0, #4]
   11920:	ldr	r0, [sp, #56]	; 0x38
   11924:	vdup.32	q10, d16[1]
   11928:	vdup.32	q11, d18[1]
   1192c:	str	r5, [r0]
   11930:	str	r1, [r0, #4]
   11934:	vadd.i32	q8, q8, q10
   11938:	vadd.i32	q9, q9, q11
   1193c:	vmov.32	r0, d16[0]
   11940:	vmov.32	r8, d18[0]
   11944:	str	r0, [sp, #40]	; 0x28
   11948:	b	11a24 <__assert_fail@plt+0x984>
   1194c:	ldr	r6, [sp, #144]	; 0x90
   11950:	ldr	r2, [sp, #108]	; 0x6c
   11954:	ldr	r7, [sp, #60]	; 0x3c
   11958:	ldr	r5, [sp, #48]	; 0x30
   1195c:	adds	lr, r3, #1
   11960:	mvn	ip, #0
   11964:	adc	r3, ip, #0
   11968:	cmp	r6, #1
   1196c:	ldr	r2, [r2, #4]
   11970:	str	r2, [sp, #108]	; 0x6c
   11974:	str	lr, [r7]
   11978:	str	r3, [r7, #4]
   1197c:	ldr	r7, [r5, #4]
   11980:	ldr	r7, [r7, #4]
   11984:	str	r7, [r5, #4]
   11988:	ldr	r7, [sp, #56]	; 0x38
   1198c:	str	lr, [r7]
   11990:	str	r3, [r7, #4]
   11994:	mov	r7, r8
   11998:	ldr	r6, [sp, #52]	; 0x34
   1199c:	ldr	r2, [sp, #40]	; 0x28
   119a0:	ldrd	r4, [r6]
   119a4:	moveq	r7, r2
   119a8:	sub	r7, r7, #1
   119ac:	subs	r4, r4, r7
   119b0:	ldr	r7, [sp, #44]	; 0x2c
   119b4:	sbc	r5, r5, #0
   119b8:	cmp	r1, #1
   119bc:	mov	r1, r8
   119c0:	strd	r4, [r6]
   119c4:	moveq	r1, r2
   119c8:	sub	r1, r1, #1
   119cc:	ldrd	r4, [r7]
   119d0:	subs	r4, r4, r1
   119d4:	mov	r1, r3
   119d8:	sbc	r5, r5, #0
   119dc:	strd	r4, [r7]
   119e0:	mov	r4, lr
   119e4:	mvn	r7, #1
   119e8:	adds	r7, r7, #1
   119ec:	adc	r5, ip, #0
   119f0:	cmn	sl, #1
   119f4:	eorne	r6, r4, r7
   119f8:	eorne	r1, r1, r5
   119fc:	eorne	r2, r3, r5
   11a00:	orrne	r1, r6, r1
   11a04:	clzne	r1, r1
   11a08:	lsrne	r6, r1, #5
   11a0c:	eorne	r1, lr, r7
   11a10:	orrne	r1, r1, r2
   11a14:	clzne	r1, r1
   11a18:	lsrne	r4, r1, #5
   11a1c:	cmnne	r0, #1
   11a20:	beq	11b84 <__assert_fail@plt+0xae4>
   11a24:	add	r0, sp, #104	; 0x68
   11a28:	add	r1, sp, #144	; 0x90
   11a2c:	bl	13ba0 <__assert_fail@plt+0x2b00>
   11a30:	mov	sl, r0
   11a34:	ldr	r0, [sp, #48]	; 0x30
   11a38:	sub	r1, fp, #36	; 0x24
   11a3c:	bl	13ba0 <__assert_fail@plt+0x2b00>
   11a40:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11a44:	tst	r6, #1
   11a48:	cmpne	r1, #2
   11a4c:	bne	11a7c <__assert_fail@plt+0x9dc>
   11a50:	cmp	r1, #2
   11a54:	mvn	r3, #1
   11a58:	bne	1194c <__assert_fail@plt+0x8ac>
   11a5c:	ldr	r1, [sp, #60]	; 0x3c
   11a60:	mvn	ip, #0
   11a64:	ldr	lr, [r1]
   11a68:	ldr	r3, [r1, #4]
   11a6c:	ldr	r1, [sp, #56]	; 0x38
   11a70:	ldr	r4, [r1]
   11a74:	ldr	r1, [r1, #4]
   11a78:	b	119e4 <__assert_fail@plt+0x944>
   11a7c:	ldr	r6, [sp, #144]	; 0x90
   11a80:	mvn	r3, #1
   11a84:	subs	r2, r6, #2
   11a88:	movwne	r2, #1
   11a8c:	tst	r4, r2
   11a90:	bne	11950 <__assert_fail@plt+0x8b0>
   11a94:	movw	r1, #38923	; 0x980b
   11a98:	movt	r1, #1
   11a9c:	b	11c5c <__assert_fail@plt+0xbbc>
   11aa0:	ldr	r2, [sl, #24]
   11aa4:	mvn	r5, #1
   11aa8:	cmp	r2, #1
   11aac:	bne	11b6c <__assert_fail@plt+0xacc>
   11ab0:	ldr	r2, [sl, #28]
   11ab4:	subs	r0, r7, r0
   11ab8:	sbc	r1, r6, r1
   11abc:	strd	r0, [r2, #16]
   11ac0:	ldr	r0, [sp, #44]	; 0x2c
   11ac4:	str	r7, [r0]
   11ac8:	str	r6, [r0, #4]
   11acc:	ldr	r0, [sl, #24]
   11ad0:	cmp	r0, #2
   11ad4:	bcc	11844 <__assert_fail@plt+0x7a4>
   11ad8:	movw	r1, #38378	; 0x95ea
   11adc:	movt	r1, #1
   11ae0:	b	11c5c <__assert_fail@plt+0xbbc>
   11ae4:	mov	r8, r6
   11ae8:	mvn	r9, #1
   11aec:	mov	r6, r3
   11af0:	mov	r5, r1
   11af4:	subs	r0, r7, r6
   11af8:	sbcs	r0, r8, r5
   11afc:	bcs	11be8 <__assert_fail@plt+0xb48>
   11b00:	ldrb	r0, [r4, #3]
   11b04:	cmp	r0, #0
   11b08:	bne	11be8 <__assert_fail@plt+0xb48>
   11b0c:	orrs	r0, r7, r8
   11b10:	beq	12afc <__assert_fail@plt+0x1a5c>
   11b14:	ldrb	r0, [r4, #4]
   11b18:	cmp	r0, #0
   11b1c:	beq	12b08 <__assert_fail@plt+0x1a68>
   11b20:	ldr	r0, [r2]
   11b24:	cmp	r0, #4
   11b28:	bhi	12af8 <__assert_fail@plt+0x1a58>
   11b2c:	add	r1, pc, #4
   11b30:	str	r7, [sp, #48]	; 0x30
   11b34:	ldr	pc, [r1, r0, lsl #2]
   11b38:	andeq	r1, r1, ip, asr #22
   11b3c:	andeq	r1, r1, r8, ror ip
   11b40:	andeq	r2, r1, r8, lsr #22
   11b44:	strdeq	r2, [r1], -r8
   11b48:	andeq	r1, r1, ip, asr #22
   11b4c:	add	r0, r2, #8
   11b50:	b	11c7c <__assert_fail@plt+0xbdc>
   11b54:	mvn	r9, #1
   11b58:	cmp	r0, #0
   11b5c:	beq	11cec <__assert_fail@plt+0xc4c>
   11b60:	movw	r1, #38747	; 0x975b
   11b64:	movt	r1, #1
   11b68:	b	11c5c <__assert_fail@plt+0xbbc>
   11b6c:	mov	r7, r0
   11b70:	mov	r6, r1
   11b74:	ldr	r0, [sl, #24]
   11b78:	cmp	r0, #2
   11b7c:	bcc	11844 <__assert_fail@plt+0x7a4>
   11b80:	b	11ad8 <__assert_fail@plt+0xa38>
   11b84:	ldr	r0, [sp, #52]	; 0x34
   11b88:	movw	r4, #54384	; 0xd470
   11b8c:	movt	r4, #2
   11b90:	ldr	r6, [r0]
   11b94:	ldr	r5, [r0, #4]
   11b98:	ldr	r0, [sp, #12]
   11b9c:	subs	r0, r0, r6
   11ba0:	ldr	r0, [sp, #16]
   11ba4:	sbcs	r0, r0, r5
   11ba8:	bcc	12ad8 <__assert_fail@plt+0x1a38>
   11bac:	ldr	r0, [sp, #44]	; 0x2c
   11bb0:	ldm	r0, {r7, r8}
   11bb4:	ldr	r0, [sp, #20]
   11bb8:	subs	r0, r0, r7
   11bbc:	ldr	r0, [sp, #24]
   11bc0:	sbcs	r0, r0, r8
   11bc4:	bcc	12ad8 <__assert_fail@plt+0x1a38>
   11bc8:	ldr	r0, [sp, #8]
   11bcc:	ldr	sl, [sp, #48]	; 0x30
   11bd0:	ldr	r2, [sp, #28]
   11bd4:	str	r0, [sp, #108]	; 0x6c
   11bd8:	str	r2, [sl, #4]
   11bdc:	subs	r0, r7, r6
   11be0:	sbcs	r0, r8, r5
   11be4:	bcc	11b00 <__assert_fail@plt+0xa60>
   11be8:	ldrb	r0, [r4]
   11bec:	cmp	r0, #1
   11bf0:	bne	11cec <__assert_fail@plt+0xc4c>
   11bf4:	ldrb	r0, [sp, #137]	; 0x89
   11bf8:	cmp	r0, #0
   11bfc:	beq	11cec <__assert_fail@plt+0xc4c>
   11c00:	eor	r0, r7, r6
   11c04:	eor	r1, r8, r5
   11c08:	orrs	r0, r0, r1
   11c0c:	bne	11c54 <__assert_fail@plt+0xbb4>
   11c10:	ldr	r0, [sp, #56]	; 0x38
   11c14:	mvn	r1, #0
   11c18:	str	r9, [r0]
   11c1c:	str	r1, [r0, #4]
   11c20:	mov	r0, sl
   11c24:	mov	r1, #0
   11c28:	bl	13ba0 <__assert_fail@plt+0x2b00>
   11c2c:	cmn	r0, #1
   11c30:	beq	11c54 <__assert_fail@plt+0xbb4>
   11c34:	mov	r5, r0
   11c38:	mov	r0, sl
   11c3c:	mov	r1, #0
   11c40:	bl	13ba0 <__assert_fail@plt+0x2b00>
   11c44:	cmn	r0, #1
   11c48:	beq	11cec <__assert_fail@plt+0xc4c>
   11c4c:	cmp	r0, r5
   11c50:	beq	11c38 <__assert_fail@plt+0xb98>
   11c54:	movw	r1, #38640	; 0x96f0
   11c58:	movt	r1, #1
   11c5c:	mov	r0, #0
   11c60:	mov	r2, #5
   11c64:	bl	10ed8 <dcgettext@plt>
   11c68:	mov	r2, r0
   11c6c:	mov	r0, #1
   11c70:	mov	r1, #0
   11c74:	bl	10f44 <error@plt>
   11c78:	add	r0, r2, #9
   11c7c:	ldrb	r7, [r0]
   11c80:	mov	r0, #24
   11c84:	bl	16c80 <__assert_fail@plt+0x5be0>
   11c88:	ldr	r2, [sp, #48]	; 0x30
   11c8c:	mov	r1, #0
   11c90:	subs	r2, r6, r2
   11c94:	sbc	r3, r5, r8
   11c98:	strd	r2, [r0, #16]
   11c9c:	mov	r2, #4
   11ca0:	strb	r7, [r0, #8]
   11ca4:	str	r2, [r0]
   11ca8:	str	r1, [r0, #4]
   11cac:	ldr	r1, [sl, #4]
   11cb0:	cmp	r1, #0
   11cb4:	beq	12b34 <__assert_fail@plt+0x1a94>
   11cb8:	str	r0, [r1, #4]
   11cbc:	str	r0, [sl, #4]
   11cc0:	ldr	r0, [sp, #52]	; 0x34
   11cc4:	ldr	r6, [r0]
   11cc8:	ldr	r5, [r0, #4]
   11ccc:	ldr	r0, [sp, #44]	; 0x2c
   11cd0:	mov	r7, r6
   11cd4:	mov	r8, r5
   11cd8:	str	r6, [r0]
   11cdc:	str	r5, [r0, #4]
   11ce0:	ldrb	r0, [r4]
   11ce4:	cmp	r0, #1
   11ce8:	beq	11bf4 <__assert_fail@plt+0xb54>
   11cec:	movw	r0, #45400	; 0xb158
   11cf0:	mov	r1, #2
   11cf4:	movt	r0, #2
   11cf8:	ldr	r0, [r0]
   11cfc:	bl	1451c <__assert_fail@plt+0x347c>
   11d00:	ldr	r1, [sp, #32]
   11d04:	ldrb	r0, [r4, #2]
   11d08:	cmp	r1, #1
   11d0c:	bne	11e90 <__assert_fail@plt+0xdf0>
   11d10:	cmp	r0, #0
   11d14:	beq	11e90 <__assert_fail@plt+0xdf0>
   11d18:	ldr	r0, [sp, #60]	; 0x3c
   11d1c:	ldrb	r5, [r4]
   11d20:	mvn	r1, #0
   11d24:	str	r9, [r0]
   11d28:	str	r1, [r0, #4]
   11d2c:	add	r0, sp, #104	; 0x68
   11d30:	mov	r1, #0
   11d34:	bl	13ba0 <__assert_fail@plt+0x2b00>
   11d38:	cmn	r0, #1
   11d3c:	beq	11d68 <__assert_fail@plt+0xcc8>
   11d40:	movw	r6, #45424	; 0xb170
   11d44:	mov	r7, #1
   11d48:	add	r4, sp, #104	; 0x68
   11d4c:	movt	r6, #2
   11d50:	strb	r7, [r6, r0]
   11d54:	mov	r0, r4
   11d58:	mov	r1, #0
   11d5c:	bl	13ba0 <__assert_fail@plt+0x2b00>
   11d60:	cmn	r0, #1
   11d64:	bne	11d50 <__assert_fail@plt+0xcb0>
   11d68:	cmp	r5, #0
   11d6c:	beq	11e80 <__assert_fail@plt+0xde0>
   11d70:	movw	r1, #45424	; 0xb170
   11d74:	vmov.i8	q8, #1	; 0x01
   11d78:	mov	r5, #224	; 0xe0
   11d7c:	movt	r1, #2
   11d80:	add	r2, r1, #48	; 0x30
   11d84:	add	r3, r1, #32
   11d88:	add	r7, r1, #16
   11d8c:	mov	r6, r1
   11d90:	add	r0, r1, #64	; 0x40
   11d94:	add	r4, r1, #80	; 0x50
   11d98:	vld1.64	{d18-d19}, [r7 :128]
   11d9c:	vld1.64	{d20-d21}, [r3 :128]
   11da0:	vld1.64	{d22-d23}, [r2 :128]
   11da4:	vld1.64	{d24-d25}, [r0 :128]
   11da8:	vld1.8	{d26-d27}, [r6 :128], r5
   11dac:	add	r5, r1, #96	; 0x60
   11db0:	veor	q9, q9, q8
   11db4:	veor	q10, q10, q8
   11db8:	veor	q11, q11, q8
   11dbc:	veor	q12, q12, q8
   11dc0:	vst1.64	{d18-d19}, [r7 :128]
   11dc4:	vst1.64	{d20-d21}, [r3 :128]
   11dc8:	vst1.64	{d22-d23}, [r2 :128]
   11dcc:	add	r3, r1, #128	; 0x80
   11dd0:	add	r7, r1, #112	; 0x70
   11dd4:	add	r2, r1, #144	; 0x90
   11dd8:	vld1.64	{d18-d19}, [r4 :128]
   11ddc:	vld1.64	{d20-d21}, [r5 :128]
   11de0:	vld1.64	{d22-d23}, [r7 :128]
   11de4:	vld1.64	{d28-d29}, [r3 :128]
   11de8:	vld1.64	{d30-d31}, [r2 :128]
   11dec:	vst1.64	{d24-d25}, [r0 :128]
   11df0:	mov	r0, r1
   11df4:	veor	q9, q9, q8
   11df8:	veor	q10, q10, q8
   11dfc:	veor	q11, q11, q8
   11e00:	veor	q14, q14, q8
   11e04:	veor	q15, q15, q8
   11e08:	vst1.64	{d18-d19}, [r4 :128]
   11e0c:	veor	q9, q13, q8
   11e10:	vst1.64	{d20-d21}, [r5 :128]
   11e14:	vst1.64	{d22-d23}, [r7 :128]
   11e18:	vst1.64	{d28-d29}, [r3 :128]
   11e1c:	mov	r3, #240	; 0xf0
   11e20:	vst1.8	{d18-d19}, [r0 :128], r3
   11e24:	vst1.64	{d30-d31}, [r2 :128]
   11e28:	add	r2, r1, #160	; 0xa0
   11e2c:	vld1.64	{d18-d19}, [r2 :128]
   11e30:	veor	q9, q9, q8
   11e34:	vst1.64	{d18-d19}, [r2 :128]
   11e38:	add	r2, r1, #176	; 0xb0
   11e3c:	vld1.64	{d18-d19}, [r2 :128]
   11e40:	veor	q9, q9, q8
   11e44:	vst1.64	{d18-d19}, [r2 :128]
   11e48:	add	r2, r1, #192	; 0xc0
   11e4c:	add	r1, r1, #208	; 0xd0
   11e50:	vld1.64	{d18-d19}, [r2 :128]
   11e54:	veor	q9, q9, q8
   11e58:	vst1.64	{d18-d19}, [r2 :128]
   11e5c:	vld1.64	{d18-d19}, [r1 :128]
   11e60:	veor	q9, q9, q8
   11e64:	vst1.64	{d18-d19}, [r1 :128]
   11e68:	vld1.64	{d18-d19}, [r6 :128]
   11e6c:	veor	q9, q9, q8
   11e70:	vst1.64	{d18-d19}, [r6 :128]
   11e74:	vld1.64	{d18-d19}, [r0 :128]
   11e78:	veor	q8, q9, q8
   11e7c:	vst1.64	{d16-d17}, [r0 :128]
   11e80:	movw	r0, #14968	; 0x3a78
   11e84:	movt	r0, #1
   11e88:	bl	13890 <__assert_fail@plt+0x27f0>
   11e8c:	b	12900 <__assert_fail@plt+0x1860>
   11e90:	ldr	r2, [sp, #32]
   11e94:	ldrb	r1, [r4, #1]
   11e98:	cmp	r2, #1
   11e9c:	mvn	r2, #1
   11ea0:	bne	12084 <__assert_fail@plt+0xfe4>
   11ea4:	cmp	r1, #0
   11ea8:	beq	12084 <__assert_fail@plt+0xfe4>
   11eac:	ldr	r0, [sp, #60]	; 0x3c
   11eb0:	ldrb	r5, [r4]
   11eb4:	mvn	r1, #0
   11eb8:	str	r2, [r0]
   11ebc:	str	r1, [r0, #4]
   11ec0:	add	r0, sp, #104	; 0x68
   11ec4:	mov	r1, #0
   11ec8:	bl	13ba0 <__assert_fail@plt+0x2b00>
   11ecc:	cmn	r0, #1
   11ed0:	beq	11efc <__assert_fail@plt+0xe5c>
   11ed4:	movw	r6, #53872	; 0xd270
   11ed8:	mov	r7, #1
   11edc:	add	r4, sp, #104	; 0x68
   11ee0:	movt	r6, #2
   11ee4:	strb	r7, [r6, r0]
   11ee8:	mov	r0, r4
   11eec:	mov	r1, #0
   11ef0:	bl	13ba0 <__assert_fail@plt+0x2b00>
   11ef4:	cmn	r0, #1
   11ef8:	bne	11ee4 <__assert_fail@plt+0xe44>
   11efc:	cmp	r5, #0
   11f00:	beq	12014 <__assert_fail@plt+0xf74>
   11f04:	movw	r1, #53872	; 0xd270
   11f08:	vmov.i8	q8, #1	; 0x01
   11f0c:	mov	r5, #224	; 0xe0
   11f10:	movt	r1, #2
   11f14:	add	r2, r1, #48	; 0x30
   11f18:	add	r3, r1, #32
   11f1c:	add	r7, r1, #16
   11f20:	mov	r6, r1
   11f24:	add	r0, r1, #64	; 0x40
   11f28:	add	r4, r1, #80	; 0x50
   11f2c:	vld1.64	{d18-d19}, [r7 :128]
   11f30:	vld1.64	{d20-d21}, [r3 :128]
   11f34:	vld1.64	{d22-d23}, [r2 :128]
   11f38:	vld1.64	{d24-d25}, [r0 :128]
   11f3c:	vld1.8	{d26-d27}, [r6 :128], r5
   11f40:	add	r5, r1, #96	; 0x60
   11f44:	veor	q9, q9, q8
   11f48:	veor	q10, q10, q8
   11f4c:	veor	q11, q11, q8
   11f50:	veor	q12, q12, q8
   11f54:	vst1.64	{d18-d19}, [r7 :128]
   11f58:	vst1.64	{d20-d21}, [r3 :128]
   11f5c:	vst1.64	{d22-d23}, [r2 :128]
   11f60:	add	r3, r1, #128	; 0x80
   11f64:	add	r7, r1, #112	; 0x70
   11f68:	add	r2, r1, #144	; 0x90
   11f6c:	vld1.64	{d18-d19}, [r4 :128]
   11f70:	vld1.64	{d20-d21}, [r5 :128]
   11f74:	vld1.64	{d22-d23}, [r7 :128]
   11f78:	vld1.64	{d28-d29}, [r3 :128]
   11f7c:	vld1.64	{d30-d31}, [r2 :128]
   11f80:	vst1.64	{d24-d25}, [r0 :128]
   11f84:	mov	r0, r1
   11f88:	veor	q9, q9, q8
   11f8c:	veor	q10, q10, q8
   11f90:	veor	q11, q11, q8
   11f94:	veor	q14, q14, q8
   11f98:	veor	q15, q15, q8
   11f9c:	vst1.64	{d18-d19}, [r4 :128]
   11fa0:	veor	q9, q13, q8
   11fa4:	vst1.64	{d20-d21}, [r5 :128]
   11fa8:	vst1.64	{d22-d23}, [r7 :128]
   11fac:	vst1.64	{d28-d29}, [r3 :128]
   11fb0:	mov	r3, #240	; 0xf0
   11fb4:	vst1.8	{d18-d19}, [r0 :128], r3
   11fb8:	vst1.64	{d30-d31}, [r2 :128]
   11fbc:	add	r2, r1, #160	; 0xa0
   11fc0:	vld1.64	{d18-d19}, [r2 :128]
   11fc4:	veor	q9, q9, q8
   11fc8:	vst1.64	{d18-d19}, [r2 :128]
   11fcc:	add	r2, r1, #176	; 0xb0
   11fd0:	vld1.64	{d18-d19}, [r2 :128]
   11fd4:	veor	q9, q9, q8
   11fd8:	vst1.64	{d18-d19}, [r2 :128]
   11fdc:	add	r2, r1, #192	; 0xc0
   11fe0:	add	r1, r1, #208	; 0xd0
   11fe4:	vld1.64	{d18-d19}, [r2 :128]
   11fe8:	veor	q9, q9, q8
   11fec:	vst1.64	{d18-d19}, [r2 :128]
   11ff0:	vld1.64	{d18-d19}, [r1 :128]
   11ff4:	veor	q9, q9, q8
   11ff8:	vst1.64	{d18-d19}, [r1 :128]
   11ffc:	vld1.64	{d18-d19}, [r6 :128]
   12000:	veor	q9, q9, q8
   12004:	vst1.64	{d18-d19}, [r6 :128]
   12008:	vld1.64	{d18-d19}, [r0 :128]
   1200c:	veor	q8, q9, q8
   12010:	vst1.64	{d16-d17}, [r0 :128]
   12014:	movw	r4, #45680	; 0xb270
   12018:	movw	r6, #45404	; 0xb15c
   1201c:	movt	r4, #2
   12020:	movt	r6, #2
   12024:	mov	r0, r4
   12028:	mov	r1, #8192	; 0x2000
   1202c:	bl	13ac4 <__assert_fail@plt+0x2a24>
   12030:	cmp	r0, #0
   12034:	beq	12900 <__assert_fail@plt+0x1860>
   12038:	ldr	r3, [r6]
   1203c:	mov	r5, r0
   12040:	mov	r0, r4
   12044:	mov	r1, #1
   12048:	mov	r2, r5
   1204c:	bl	10ec0 <fwrite_unlocked@plt>
   12050:	cmp	r0, r5
   12054:	beq	12024 <__assert_fail@plt+0xf84>
   12058:	bl	10fe0 <__errno_location@plt>
   1205c:	ldr	r4, [r0]
   12060:	movw	r1, #36850	; 0x8ff2
   12064:	movt	r1, #1
   12068:	mov	r0, #0
   1206c:	mov	r2, #5
   12070:	bl	10ed8 <dcgettext@plt>
   12074:	mov	r2, r0
   12078:	mov	r0, #1
   1207c:	mov	r1, r4
   12080:	bl	10f44 <error@plt>
   12084:	ldr	r3, [sp, #36]	; 0x24
   12088:	and	r1, r3, r1
   1208c:	and	r0, r0, r1
   12090:	cmp	r0, #1
   12094:	bne	12254 <__assert_fail@plt+0x11b4>
   12098:	ldr	r0, [sp, #60]	; 0x3c
   1209c:	ldrb	r6, [r4]
   120a0:	mvn	r1, #0
   120a4:	mvn	r8, #1
   120a8:	mvn	r9, #0
   120ac:	str	r2, [r0]
   120b0:	str	r1, [r0, #4]
   120b4:	add	r0, sp, #104	; 0x68
   120b8:	mov	r1, #0
   120bc:	bl	13ba0 <__assert_fail@plt+0x2b00>
   120c0:	cmn	r0, #1
   120c4:	beq	120f0 <__assert_fail@plt+0x1050>
   120c8:	movw	r4, #53872	; 0xd270
   120cc:	mov	r7, #1
   120d0:	add	r5, sp, #104	; 0x68
   120d4:	movt	r4, #2
   120d8:	strb	r7, [r4, r0]
   120dc:	mov	r0, r5
   120e0:	mov	r1, #0
   120e4:	bl	13ba0 <__assert_fail@plt+0x2b00>
   120e8:	cmn	r0, #1
   120ec:	bne	120d8 <__assert_fail@plt+0x1038>
   120f0:	cmp	r6, #0
   120f4:	beq	12208 <__assert_fail@plt+0x1168>
   120f8:	movw	r1, #53872	; 0xd270
   120fc:	vmov.i8	q8, #1	; 0x01
   12100:	mov	r5, #224	; 0xe0
   12104:	movt	r1, #2
   12108:	add	r2, r1, #48	; 0x30
   1210c:	add	r3, r1, #32
   12110:	add	r7, r1, #16
   12114:	mov	r6, r1
   12118:	add	r0, r1, #64	; 0x40
   1211c:	add	r4, r1, #80	; 0x50
   12120:	vld1.64	{d18-d19}, [r7 :128]
   12124:	vld1.64	{d20-d21}, [r3 :128]
   12128:	vld1.64	{d22-d23}, [r2 :128]
   1212c:	vld1.64	{d24-d25}, [r0 :128]
   12130:	vld1.8	{d26-d27}, [r6 :128], r5
   12134:	add	r5, r1, #96	; 0x60
   12138:	veor	q9, q9, q8
   1213c:	veor	q10, q10, q8
   12140:	veor	q11, q11, q8
   12144:	veor	q12, q12, q8
   12148:	vst1.64	{d18-d19}, [r7 :128]
   1214c:	vst1.64	{d20-d21}, [r3 :128]
   12150:	vst1.64	{d22-d23}, [r2 :128]
   12154:	add	r3, r1, #128	; 0x80
   12158:	add	r7, r1, #112	; 0x70
   1215c:	add	r2, r1, #144	; 0x90
   12160:	vld1.64	{d18-d19}, [r4 :128]
   12164:	vld1.64	{d20-d21}, [r5 :128]
   12168:	vld1.64	{d22-d23}, [r7 :128]
   1216c:	vld1.64	{d28-d29}, [r3 :128]
   12170:	vld1.64	{d30-d31}, [r2 :128]
   12174:	vst1.64	{d24-d25}, [r0 :128]
   12178:	mov	r0, r1
   1217c:	veor	q9, q9, q8
   12180:	veor	q10, q10, q8
   12184:	veor	q11, q11, q8
   12188:	veor	q14, q14, q8
   1218c:	veor	q15, q15, q8
   12190:	vst1.64	{d18-d19}, [r4 :128]
   12194:	veor	q9, q13, q8
   12198:	vst1.64	{d20-d21}, [r5 :128]
   1219c:	vst1.64	{d22-d23}, [r7 :128]
   121a0:	vst1.64	{d28-d29}, [r3 :128]
   121a4:	mov	r3, #240	; 0xf0
   121a8:	vst1.8	{d18-d19}, [r0 :128], r3
   121ac:	vst1.64	{d30-d31}, [r2 :128]
   121b0:	add	r2, r1, #160	; 0xa0
   121b4:	vld1.64	{d18-d19}, [r2 :128]
   121b8:	veor	q9, q9, q8
   121bc:	vst1.64	{d18-d19}, [r2 :128]
   121c0:	add	r2, r1, #176	; 0xb0
   121c4:	vld1.64	{d18-d19}, [r2 :128]
   121c8:	veor	q9, q9, q8
   121cc:	vst1.64	{d18-d19}, [r2 :128]
   121d0:	add	r2, r1, #192	; 0xc0
   121d4:	add	r1, r1, #208	; 0xd0
   121d8:	vld1.64	{d18-d19}, [r2 :128]
   121dc:	veor	q9, q9, q8
   121e0:	vst1.64	{d18-d19}, [r2 :128]
   121e4:	vld1.64	{d18-d19}, [r1 :128]
   121e8:	veor	q9, q9, q8
   121ec:	vst1.64	{d18-d19}, [r1 :128]
   121f0:	vld1.64	{d18-d19}, [r6 :128]
   121f4:	veor	q9, q9, q8
   121f8:	vst1.64	{d18-d19}, [r6 :128]
   121fc:	vld1.64	{d18-d19}, [r0 :128]
   12200:	veor	q8, q9, q8
   12204:	vst1.64	{d16-d17}, [r0 :128]
   12208:	ldr	r0, [sp, #56]	; 0x38
   1220c:	mov	r1, #0
   12210:	strd	r8, [r0]
   12214:	mov	r0, sl
   12218:	bl	13ba0 <__assert_fail@plt+0x2b00>
   1221c:	cmn	r0, #1
   12220:	beq	12248 <__assert_fail@plt+0x11a8>
   12224:	movw	r4, #45424	; 0xb170
   12228:	mov	r5, #1
   1222c:	movt	r4, #2
   12230:	strb	r5, [r4, r0]
   12234:	mov	r0, sl
   12238:	mov	r1, #0
   1223c:	bl	13ba0 <__assert_fail@plt+0x2b00>
   12240:	cmn	r0, #1
   12244:	bne	12230 <__assert_fail@plt+0x1190>
   12248:	movw	r0, #15044	; 0x3ac4
   1224c:	movt	r0, #1
   12250:	b	11e88 <__assert_fail@plt+0xde8>
   12254:	ldrb	r0, [r4, #4]
   12258:	cmp	r0, #0
   1225c:	beq	12900 <__assert_fail@plt+0x1860>
   12260:	ldrb	r0, [r4]
   12264:	cmp	r0, #1
   12268:	bne	12424 <__assert_fail@plt+0x1384>
   1226c:	ldr	r0, [sp, #60]	; 0x3c
   12270:	mvn	r1, #0
   12274:	mvn	r9, #0
   12278:	mov	r6, #0
   1227c:	str	r2, [r0]
   12280:	str	r1, [r0, #4]
   12284:	add	r0, sp, #104	; 0x68
   12288:	mov	r1, #0
   1228c:	bl	13ba0 <__assert_fail@plt+0x2b00>
   12290:	movw	r8, #53872	; 0xd270
   12294:	cmn	r0, #1
   12298:	movt	r8, #2
   1229c:	beq	122c0 <__assert_fail@plt+0x1220>
   122a0:	mov	r7, #1
   122a4:	add	r5, sp, #104	; 0x68
   122a8:	strb	r7, [r8, r0]
   122ac:	mov	r0, r5
   122b0:	mov	r1, #0
   122b4:	bl	13ba0 <__assert_fail@plt+0x2b00>
   122b8:	cmn	r0, #1
   122bc:	bne	122a8 <__assert_fail@plt+0x1208>
   122c0:	ldr	r1, [sp, #56]	; 0x38
   122c4:	mvn	r0, #1
   122c8:	movw	r5, #54128	; 0xd370
   122cc:	movt	r5, #2
   122d0:	str	r0, [r1]
   122d4:	add	ip, pc, #980	; 0x3d4
   122d8:	add	lr, pc, #736	; 0x2e0
   122dc:	add	r2, pc, #748	; 0x2ec
   122e0:	add	r3, pc, #760	; 0x2f8
   122e4:	str	r9, [r1, #4]
   122e8:	add	r7, pc, #768	; 0x300
   122ec:	add	r0, pc, #780	; 0x30c
   122f0:	add	r1, pc, #792	; 0x318
   122f4:	vld1.64	{d16-d17}, [r3 :128]
   122f8:	vld1.64	{d18-d19}, [r1 :128]
   122fc:	add	r1, pc, #796	; 0x31c
   12300:	vld1.64	{d0-d1}, [r0 :128]
   12304:	add	r3, r5, #224	; 0xe0
   12308:	vld1.64	{d26-d27}, [r2 :128]
   1230c:	add	r0, r5, #208	; 0xd0
   12310:	vld1.64	{d28-d29}, [lr :128]
   12314:	vld1.64	{d30-d31}, [ip :128]
   12318:	vld1.64	{d2-d3}, [r7 :128]
   1231c:	vld1.64	{d20-d21}, [r1 :128]
   12320:	add	r1, pc, #776	; 0x308
   12324:	vld1.64	{d22-d23}, [r1 :128]
   12328:	add	r1, pc, #784	; 0x310
   1232c:	vld1.64	{d24-d25}, [r1 :128]
   12330:	vst1.64	{d16-d17}, [r3 :128]
   12334:	add	r1, pc, #788	; 0x314
   12338:	vst1.64	{d18-d19}, [r0 :128]
   1233c:	add	r0, r5, #192	; 0xc0
   12340:	vld1.64	{d16-d17}, [r1 :128]
   12344:	add	r1, pc, #788	; 0x314
   12348:	vst1.64	{d20-d21}, [r0 :128]
   1234c:	add	r0, r5, #176	; 0xb0
   12350:	vld1.64	{d18-d19}, [r1 :128]
   12354:	add	r1, pc, #788	; 0x314
   12358:	vst1.64	{d22-d23}, [r0 :128]
   1235c:	add	r0, r5, #160	; 0xa0
   12360:	vld1.64	{d20-d21}, [r1 :128]
   12364:	add	r1, pc, #788	; 0x314
   12368:	vst1.64	{d24-d25}, [r0 :128]
   1236c:	add	r0, r5, #144	; 0x90
   12370:	vld1.64	{d22-d23}, [r1 :128]
   12374:	add	r1, pc, #788	; 0x314
   12378:	vst1.64	{d26-d27}, [r0 :128]
   1237c:	add	r0, r5, #128	; 0x80
   12380:	vld1.64	{d24-d25}, [r1 :128]
   12384:	add	r1, pc, #788	; 0x314
   12388:	vst1.64	{d28-d29}, [r0 :128]
   1238c:	add	r0, r5, #112	; 0x70
   12390:	vst1.64	{d30-d31}, [r0 :128]
   12394:	add	r0, r5, #96	; 0x60
   12398:	vld1.64	{d26-d27}, [r1 :128]
   1239c:	mov	r1, r5
   123a0:	vst1.64	{d0-d1}, [r0 :128]
   123a4:	add	r0, r5, #80	; 0x50
   123a8:	vst1.64	{d2-d3}, [r0 :128]
   123ac:	add	r0, r5, #64	; 0x40
   123b0:	vst1.64	{d16-d17}, [r0 :128]
   123b4:	add	r0, r5, #48	; 0x30
   123b8:	vst1.64	{d18-d19}, [r0 :128]
   123bc:	add	r0, r5, #32
   123c0:	vst1.64	{d20-d21}, [r0 :128]
   123c4:	add	r0, r5, #16
   123c8:	vst1.64	{d22-d23}, [r0 :128]
   123cc:	mov	r0, #240	; 0xf0
   123d0:	vst1.8	{d24-d25}, [r1 :128], r0
   123d4:	vst1.64	{d26-d27}, [r1 :128]
   123d8:	ldrb	r0, [r8, r6]
   123dc:	cmp	r0, #0
   123e0:	beq	123fc <__assert_fail@plt+0x135c>
   123e4:	add	r6, r6, #1
   123e8:	cmp	r6, #256	; 0x100
   123ec:	beq	127ec <__assert_fail@plt+0x174c>
   123f0:	ldrb	r0, [r8, r6]
   123f4:	cmp	r0, #0
   123f8:	bne	123e4 <__assert_fail@plt+0x1344>
   123fc:	mov	r0, sl
   12400:	mov	r1, #0
   12404:	bl	13ba0 <__assert_fail@plt+0x2b00>
   12408:	cmn	r0, #1
   1240c:	beq	127e0 <__assert_fail@plt+0x1740>
   12410:	strb	r0, [r5, r6]
   12414:	add	r6, r6, #1
   12418:	cmp	r6, #256	; 0x100
   1241c:	bne	123f0 <__assert_fail@plt+0x1350>
   12420:	b	127ec <__assert_fail@plt+0x174c>
   12424:	add	r1, pc, #452	; 0x1c4
   12428:	add	r2, pc, #464	; 0x1d0
   1242c:	add	r3, pc, #924	; 0x39c
   12430:	add	r7, pc, #392	; 0x188
   12434:	add	r5, pc, #404	; 0x194
   12438:	add	r4, pc, #416	; 0x1a0
   1243c:	movw	r6, #54128	; 0xd370
   12440:	mvn	ip, #1
   12444:	sub	r9, fp, #36	; 0x24
   12448:	vld1.64	{d16-d17}, [r4 :128]
   1244c:	add	r4, pc, #444	; 0x1bc
   12450:	movt	r6, #2
   12454:	vld1.64	{d26-d27}, [r5 :128]
   12458:	vld1.64	{d28-d29}, [r7 :128]
   1245c:	vld1.64	{d2-d3}, [r1 :128]
   12460:	vld1.64	{d30-d31}, [r3 :128]
   12464:	vld1.64	{d0-d1}, [r2 :128]
   12468:	vld1.64	{d18-d19}, [r4 :128]
   1246c:	add	r4, pc, #428	; 0x1ac
   12470:	vld1.64	{d20-d21}, [r4 :128]
   12474:	add	r4, pc, #436	; 0x1b4
   12478:	add	r0, r6, #224	; 0xe0
   1247c:	vld1.64	{d22-d23}, [r4 :128]
   12480:	add	r4, pc, #440	; 0x1b8
   12484:	vld1.64	{d24-d25}, [r4 :128]
   12488:	vst1.64	{d16-d17}, [r0 :128]
   1248c:	add	r0, r6, #208	; 0xd0
   12490:	add	r1, pc, #440	; 0x1b8
   12494:	vst1.64	{d18-d19}, [r0 :128]
   12498:	add	r0, r6, #192	; 0xc0
   1249c:	vld1.64	{d16-d17}, [r1 :128]
   124a0:	add	r1, pc, #440	; 0x1b8
   124a4:	vst1.64	{d20-d21}, [r0 :128]
   124a8:	add	r0, r6, #176	; 0xb0
   124ac:	vld1.64	{d18-d19}, [r1 :128]
   124b0:	add	r1, pc, #440	; 0x1b8
   124b4:	vst1.64	{d22-d23}, [r0 :128]
   124b8:	add	r0, r6, #160	; 0xa0
   124bc:	vld1.64	{d20-d21}, [r1 :128]
   124c0:	add	r1, pc, #440	; 0x1b8
   124c4:	vst1.64	{d24-d25}, [r0 :128]
   124c8:	add	r0, r6, #144	; 0x90
   124cc:	vld1.64	{d22-d23}, [r1 :128]
   124d0:	add	r1, pc, #440	; 0x1b8
   124d4:	vst1.64	{d26-d27}, [r0 :128]
   124d8:	add	r0, r6, #128	; 0x80
   124dc:	vld1.64	{d24-d25}, [r1 :128]
   124e0:	add	r1, pc, #440	; 0x1b8
   124e4:	vst1.64	{d28-d29}, [r0 :128]
   124e8:	add	r0, r6, #112	; 0x70
   124ec:	vld1.64	{d26-d27}, [r1 :128]
   124f0:	mov	r1, r6
   124f4:	vst1.64	{d30-d31}, [r0 :128]
   124f8:	add	r0, r6, #96	; 0x60
   124fc:	vst1.64	{d0-d1}, [r0 :128]
   12500:	add	r0, r6, #80	; 0x50
   12504:	vst1.64	{d2-d3}, [r0 :128]
   12508:	add	r0, r6, #64	; 0x40
   1250c:	vst1.64	{d16-d17}, [r0 :128]
   12510:	add	r0, r6, #48	; 0x30
   12514:	vst1.64	{d18-d19}, [r0 :128]
   12518:	add	r0, r6, #32
   1251c:	vst1.64	{d20-d21}, [r0 :128]
   12520:	add	r0, r6, #16
   12524:	vst1.64	{d22-d23}, [r0 :128]
   12528:	mov	r0, #240	; 0xf0
   1252c:	vst1.8	{d24-d25}, [r1 :128], r0
   12530:	ldr	r0, [sp, #60]	; 0x3c
   12534:	vst1.64	{d26-d27}, [r1 :128]
   12538:	mvn	r1, #0
   1253c:	str	ip, [r0]
   12540:	str	r1, [r0, #4]
   12544:	ldr	r0, [sp, #56]	; 0x38
   12548:	str	ip, [r0]
   1254c:	str	r1, [r0, #4]
   12550:	b	12754 <__assert_fail@plt+0x16b4>
   12554:	strb	r0, [r6, r5]
   12558:	cmp	r7, #2
   1255c:	beq	12754 <__assert_fail@plt+0x16b4>
   12560:	b	1271c <__assert_fail@plt+0x167c>
   12564:	bl	10fa4 <__ctype_b_loc@plt>
   12568:	ldr	r5, [r0]
   1256c:	mov	r8, #0
   12570:	ldrb	r0, [r5, #1]
   12574:	tst	r0, #2
   12578:	bne	12598 <__assert_fail@plt+0x14f8>
   1257c:	add	r8, r8, #1
   12580:	add	r5, r5, #2
   12584:	cmp	r8, #256	; 0x100
   12588:	beq	12714 <__assert_fail@plt+0x1674>
   1258c:	ldrb	r0, [r5, #1]
   12590:	tst	r0, #2
   12594:	beq	1257c <__assert_fail@plt+0x14dc>
   12598:	bl	10f80 <__ctype_toupper_loc@plt>
   1259c:	ldr	r0, [r0]
   125a0:	ldr	r0, [r0, r8, lsl #2]
   125a4:	strb	r0, [r6, r8]
   125a8:	add	r8, r8, #1
   125ac:	add	r5, r5, #2
   125b0:	cmp	r8, #256	; 0x100
   125b4:	bne	1258c <__assert_fail@plt+0x14ec>
   125b8:	b	12714 <__assert_fail@plt+0x1674>
   125bc:	nop	{0}
   125c0:	orrhi	r8, r2, #128, 2
   125c4:	strhi	r8, [r6, r4, lsl #11]
   125c8:	blhi	fe2b4bf0 <stdout@@GLIBC_2.4+0xfe289a94>
   125cc:	svchi	0x008e8d8c
   125d0:	orrsls	r9, r2, #144, 2	; 0x24
   125d4:			; <UNDEFINED> instruction: 0x97969594
   125d8:	blls	fe6b8c40 <stdout@@GLIBC_2.4+0xfe68dae4>
   125dc:	svcls	0x009e9d9c
   125e0:	mvn	lr, #224, 2	; 0x38
   125e4:	strb	lr, [r6, r4, ror #11]!
   125e8:	bl	ffaccd90 <stdout@@GLIBC_2.4+0xffaa1c34>
   125ec:	svc	0x00eeedec
   125f0:	cmppl	r2, #80, 2
   125f4:			; <UNDEFINED> instruction: 0x57565554
   125f8:	blpl	16a8b60 <stdout@@GLIBC_2.4+0x167da04>
   125fc:	svcpl	0x005e5d5c
   12600:	cmnvs	r2, #96, 2
   12604:	strbvs	r6, [r6, -r4, ror #10]!
   12608:	blvs	1aacbb0 <stdout@@GLIBC_2.4+0x1a81a54>
   1260c:	svcvs	0x006e6d6c
   12610:	bicsle	sp, r2, #208, 2	; 0x34
   12614:			; <UNDEFINED> instruction: 0xd7d6d5d4
   12618:	blle	ff6c8d80 <stdout@@GLIBC_2.4+0xff69dc24>
   1261c:	svcle	0x00dedddc
   12620:	bicgt	ip, r2, #192, 2	; 0x30
   12624:	strbgt	ip, [r6, r4, asr #11]
   12628:	blgt	ff2c4d50 <stdout@@GLIBC_2.4+0xff299bf4>
   1262c:	svcgt	0x00cecdcc
   12630:			; <UNDEFINED> instruction: 0xb3b2b1b0
   12634:			; <UNDEFINED> instruction: 0xb7b6b5b4
   12638:	bllt	feec0d20 <stdout@@GLIBC_2.4+0xfee95bc4>
   1263c:	svclt	0x00bebdbc
   12640:			; <UNDEFINED> instruction: 0xa3a2a1a0
   12644:	strge	sl, [r6, r4, lsr #11]!
   12648:	blge	feabccf0 <stdout@@GLIBC_2.4+0xfea91b94>
   1264c:	svcge	0x00aeadac
   12650:	movtmi	r4, #8512	; 0x2140
   12654:	strbmi	r4, [r6, -r4, asr #10]
   12658:	blmi	12a4b80 <stdout@@GLIBC_2.4+0x1279a24>
   1265c:	svcmi	0x004e4d4c
   12660:	teqcc	r2, #48, 2
   12664:			; <UNDEFINED> instruction: 0x37363534
   12668:	blcc	ea0b50 <stdout@@GLIBC_2.4+0xe759f4>
   1266c:	svccc	0x003e3d3c
   12670:			; <UNDEFINED> instruction: 0x23222120
   12674:	strcs	r2, [r6, -r4, lsr #10]!
   12678:	blcs	a9cb20 <stdout@@GLIBC_2.4+0xa719c4>
   1267c:	svccs	0x002e2d2c
   12680:	tstne	r2, #16, 2
   12684:			; <UNDEFINED> instruction: 0x17161514
   12688:	blne	698af0 <stdout@@GLIBC_2.4+0x66d994>
   1268c:	svcne	0x001e1d1c
   12690:	movweq	r0, #8448	; 0x2100
   12694:	streq	r0, [r6, -r4, lsl #10]
   12698:	bleq	294ac0 <stdout@@GLIBC_2.4+0x269964>
   1269c:	svceq	0x000e0d0c
   126a0:	vsra.u64	<illegal reg q15.5>, q8, #14
   126a4:			; <UNDEFINED> instruction: 0xf7f6f5f4
   126a8:	blx	ffed0e92 <stdout@@GLIBC_2.4+0xffea5d36>
   126ac:			; <UNDEFINED> instruction: 0xfffefdfc
   126b0:	cmnvc	r2, #112, 2
   126b4:			; <UNDEFINED> instruction: 0x77767574
   126b8:	blvc	1eb0ca0 <stdout@@GLIBC_2.4+0x1e85b44>
   126bc:	svcvc	0x007e7d7c
   126c0:	bl	10fa4 <__ctype_b_loc@plt>
   126c4:	ldr	r5, [r0]
   126c8:	mov	r4, #0
   126cc:	ldrb	r0, [r5, #1]
   126d0:	tst	r0, #1
   126d4:	bne	126f4 <__assert_fail@plt+0x1654>
   126d8:	add	r4, r4, #1
   126dc:	add	r5, r5, #2
   126e0:	cmp	r4, #256	; 0x100
   126e4:	beq	12714 <__assert_fail@plt+0x1674>
   126e8:	ldrb	r0, [r5, #1]
   126ec:	tst	r0, #1
   126f0:	beq	126d8 <__assert_fail@plt+0x1638>
   126f4:	bl	10f74 <__ctype_tolower_loc@plt>
   126f8:	ldr	r0, [r0]
   126fc:	ldr	r0, [r0, r4, lsl #2]
   12700:	strb	r0, [r6, r4]
   12704:	add	r4, r4, #1
   12708:	add	r5, r5, #2
   1270c:	cmp	r4, #256	; 0x100
   12710:	bne	126e8 <__assert_fail@plt+0x1648>
   12714:	cmp	r7, #2
   12718:	beq	12754 <__assert_fail@plt+0x16b4>
   1271c:	ldr	r0, [sp, #108]	; 0x6c
   12720:	ldr	r2, [sp, #60]	; 0x3c
   12724:	mvn	r1, #0
   12728:	ldr	r0, [r0, #4]
   1272c:	str	r0, [sp, #108]	; 0x6c
   12730:	mvn	r0, #1
   12734:	adds	r0, r0, #1
   12738:	adc	r1, r1, #0
   1273c:	strd	r0, [r2]
   12740:	ldr	r2, [sl, #4]
   12744:	ldr	r2, [r2, #4]
   12748:	str	r2, [sl, #4]
   1274c:	ldr	r2, [sp, #56]	; 0x38
   12750:	strd	r0, [r2]
   12754:	add	r0, sp, #104	; 0x68
   12758:	add	r1, sp, #144	; 0x90
   1275c:	bl	13ba0 <__assert_fail@plt+0x2b00>
   12760:	mov	r5, r0
   12764:	mov	r0, sl
   12768:	mov	r1, r9
   1276c:	bl	13ba0 <__assert_fail@plt+0x2b00>
   12770:	ldr	r1, [sp, #144]	; 0x90
   12774:	ldr	r7, [fp, #-36]	; 0xffffffdc
   12778:	cmp	r1, #0
   1277c:	cmpeq	r7, #1
   12780:	beq	12564 <__assert_fail@plt+0x14c4>
   12784:	cmp	r1, #1
   12788:	cmpeq	r7, #0
   1278c:	beq	126c0 <__assert_fail@plt+0x1620>
   12790:	cmn	r5, #1
   12794:	cmnne	r0, #1
   12798:	bne	12554 <__assert_fail@plt+0x14b4>
   1279c:	movw	r4, #54384	; 0xd470
   127a0:	cmn	r5, #1
   127a4:	movt	r4, #2
   127a8:	beq	127b8 <__assert_fail@plt+0x1718>
   127ac:	ldrb	r0, [r4, #3]
   127b0:	cmp	r0, #0
   127b4:	beq	12b68 <__assert_fail@plt+0x1ac8>
   127b8:	mvn	r9, #0
   127bc:	ldrb	r0, [r4, #2]
   127c0:	cmp	r0, #0
   127c4:	beq	12848 <__assert_fail@plt+0x17a8>
   127c8:	b	127f8 <__assert_fail@plt+0x1758>
   127cc:	nop	{0}
   127d0:	cmnvc	r2, #112, 2
   127d4:			; <UNDEFINED> instruction: 0x77767574
   127d8:	blvc	1eb0dc0 <stdout@@GLIBC_2.4+0x1e85c64>
   127dc:	svcvc	0x007e7d7c
   127e0:	ldrb	r0, [r4, #3]
   127e4:	cmp	r0, #0
   127e8:	beq	12b88 <__assert_fail@plt+0x1ae8>
   127ec:	ldrb	r0, [r4, #2]
   127f0:	cmp	r0, #0
   127f4:	beq	12848 <__assert_fail@plt+0x17a8>
   127f8:	ldr	r1, [sp, #56]	; 0x38
   127fc:	mvn	r0, #1
   12800:	stm	r1, {r0, r9}
   12804:	mov	r0, sl
   12808:	mov	r1, #0
   1280c:	bl	13ba0 <__assert_fail@plt+0x2b00>
   12810:	cmn	r0, #1
   12814:	beq	1283c <__assert_fail@plt+0x179c>
   12818:	movw	r4, #45424	; 0xb170
   1281c:	mov	r5, #1
   12820:	movt	r4, #2
   12824:	strb	r5, [r4, r0]
   12828:	mov	r0, sl
   1282c:	mov	r1, #0
   12830:	bl	13ba0 <__assert_fail@plt+0x2b00>
   12834:	cmn	r0, #1
   12838:	bne	12824 <__assert_fail@plt+0x1784>
   1283c:	movw	r0, #16116	; 0x3ef4
   12840:	movt	r0, #1
   12844:	b	11e88 <__assert_fail@plt+0xde8>
   12848:	movw	r4, #45680	; 0xb270
   1284c:	movw	r8, #45404	; 0xb15c
   12850:	movw	r7, #54128	; 0xd370
   12854:	movt	r4, #2
   12858:	movt	r8, #2
   1285c:	movt	r7, #2
   12860:	mov	r0, #0
   12864:	mov	r1, r4
   12868:	mov	r2, #8192	; 0x2000
   1286c:	bl	1655c <__assert_fail@plt+0x54bc>
   12870:	cmp	r0, #0
   12874:	beq	12900 <__assert_fail@plt+0x1860>
   12878:	mov	r5, r0
   1287c:	cmn	r0, #1
   12880:	beq	12b54 <__assert_fail@plt+0x1ab4>
   12884:	and	r1, r5, #1
   12888:	mov	r0, #0
   1288c:	cmp	r5, #1
   12890:	beq	128c4 <__assert_fail@plt+0x1824>
   12894:	sub	r2, r5, r1
   12898:	mov	r0, #0
   1289c:	mov	r3, r4
   128a0:	ldrb	r6, [r3, r0]!
   128a4:	add	r0, r0, #2
   128a8:	cmp	r2, r0
   128ac:	ldrb	r6, [r7, r6]
   128b0:	strb	r6, [r3]
   128b4:	ldrb	r6, [r3, #1]
   128b8:	ldrb	r6, [r7, r6]
   128bc:	strb	r6, [r3, #1]
   128c0:	bne	1289c <__assert_fail@plt+0x17fc>
   128c4:	cmp	r1, #0
   128c8:	beq	128d8 <__assert_fail@plt+0x1838>
   128cc:	ldrb	r1, [r4, r0]
   128d0:	ldrb	r1, [r7, r1]
   128d4:	strb	r1, [r4, r0]
   128d8:	cmp	r5, #0
   128dc:	beq	12900 <__assert_fail@plt+0x1860>
   128e0:	ldr	r3, [r8]
   128e4:	mov	r0, r4
   128e8:	mov	r1, #1
   128ec:	mov	r2, r5
   128f0:	bl	10ec0 <fwrite_unlocked@plt>
   128f4:	cmp	r0, r5
   128f8:	beq	12860 <__assert_fail@plt+0x17c0>
   128fc:	b	12058 <__assert_fail@plt+0xfb8>
   12900:	mov	r0, #0
   12904:	mov	r6, #0
   12908:	bl	11094 <close@plt>
   1290c:	cmp	r0, #0
   12910:	bne	12aac <__assert_fail@plt+0x1a0c>
   12914:	mov	r0, r6
   12918:	sub	sp, fp, #28
   1291c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12920:	cmn	r0, #3
   12924:	bne	12970 <__assert_fail@plt+0x18d0>
   12928:	movw	r0, #45296	; 0xb0f0
   1292c:	movw	r2, #36597	; 0x8ef5
   12930:	mov	r1, #0
   12934:	movt	r0, #2
   12938:	movt	r2, #1
   1293c:	str	r1, [sp, #4]
   12940:	movw	r1, #36546	; 0x8ec2
   12944:	movt	r1, #1
   12948:	ldr	r3, [r0]
   1294c:	movw	r0, #45404	; 0xb15c
   12950:	str	r2, [sp]
   12954:	movw	r2, #36583	; 0x8ee7
   12958:	movt	r0, #2
   1295c:	movt	r2, #1
   12960:	ldr	r0, [r0]
   12964:	bl	16a4c <__assert_fail@plt+0x59ac>
   12968:	mov	r0, #0
   1296c:	bl	10fb0 <exit@plt>
   12970:	cmn	r0, #2
   12974:	bne	12a98 <__assert_fail@plt+0x19f8>
   12978:	mov	r0, #0
   1297c:	bl	111a0 <__assert_fail@plt+0x100>
   12980:	cmp	r7, #0
   12984:	bne	12a0c <__assert_fail@plt+0x196c>
   12988:	movw	r1, #36610	; 0x8f02
   1298c:	mov	r0, #0
   12990:	mov	r2, #5
   12994:	movt	r1, #1
   12998:	bl	10ed8 <dcgettext@plt>
   1299c:	mov	r2, r0
   129a0:	mov	r0, #0
   129a4:	mov	r1, #0
   129a8:	bl	10f44 <error@plt>
   129ac:	mov	r0, #1
   129b0:	bl	111a0 <__assert_fail@plt+0x100>
   129b4:	movw	r1, #36763	; 0x8f9b
   129b8:	mov	r0, #0
   129bc:	mov	r2, #5
   129c0:	movt	r1, #1
   129c4:	bl	10ed8 <dcgettext@plt>
   129c8:	mov	r4, r0
   129cc:	ldr	r0, [r8]
   129d0:	add	r0, r0, r5
   129d4:	ldr	r0, [r9, r0, lsl #2]
   129d8:	bl	16544 <__assert_fail@plt+0x54a4>
   129dc:	mov	r3, r0
   129e0:	mov	r0, #0
   129e4:	mov	r1, #0
   129e8:	mov	r2, r4
   129ec:	bl	10f44 <error@plt>
   129f0:	cmp	r7, #2
   129f4:	bne	12a98 <__assert_fail@plt+0x19f8>
   129f8:	movw	r0, #45392	; 0xb150
   129fc:	movw	r1, #36780	; 0x8fac
   12a00:	movt	r0, #2
   12a04:	movt	r1, #1
   12a08:	b	12a70 <__assert_fail@plt+0x19d0>
   12a0c:	movw	r1, #36626	; 0x8f12
   12a10:	mov	r0, #0
   12a14:	mov	r2, #5
   12a18:	movt	r1, #1
   12a1c:	bl	10ed8 <dcgettext@plt>
   12a20:	mov	r6, r0
   12a24:	add	r0, r9, r4, lsl #2
   12a28:	ldr	r0, [r0, #-4]
   12a2c:	bl	16544 <__assert_fail@plt+0x54a4>
   12a30:	mov	r3, r0
   12a34:	mov	r0, #0
   12a38:	mov	r1, #0
   12a3c:	mov	r2, r6
   12a40:	bl	10f44 <error@plt>
   12a44:	movw	r0, #54384	; 0xd470
   12a48:	movw	r2, #36651	; 0x8f2b
   12a4c:	movw	r1, #36719	; 0x8f6f
   12a50:	movt	r0, #2
   12a54:	movt	r2, #1
   12a58:	movt	r1, #1
   12a5c:	ldrb	r0, [r0, #2]
   12a60:	cmp	r0, #0
   12a64:	movw	r0, #45392	; 0xb150
   12a68:	movt	r0, #2
   12a6c:	movne	r1, r2
   12a70:	ldr	r4, [r0]
   12a74:	mov	r0, #0
   12a78:	mov	r2, #5
   12a7c:	bl	10ed8 <dcgettext@plt>
   12a80:	movw	r2, #39848	; 0x9ba8
   12a84:	mov	r3, r0
   12a88:	mov	r0, r4
   12a8c:	mov	r1, #1
   12a90:	movt	r2, #1
   12a94:	bl	11028 <__fprintf_chk@plt>
   12a98:	mov	r0, #1
   12a9c:	bl	111a0 <__assert_fail@plt+0x100>
   12aa0:	movw	r1, #38326	; 0x95b6
   12aa4:	movt	r1, #1
   12aa8:	b	11c5c <__assert_fail@plt+0xbbc>
   12aac:	bl	10fe0 <__errno_location@plt>
   12ab0:	ldr	r4, [r0]
   12ab4:	movw	r1, #36946	; 0x9052
   12ab8:	movt	r1, #1
   12abc:	b	12068 <__assert_fail@plt+0xfc8>
   12ac0:	movw	r1, #38431	; 0x961f
   12ac4:	movt	r1, #1
   12ac8:	b	11c5c <__assert_fail@plt+0xbbc>
   12acc:	movw	r1, #38492	; 0x965c
   12ad0:	movt	r1, #1
   12ad4:	b	11c5c <__assert_fail@plt+0xbbc>
   12ad8:	movw	r0, #38971	; 0x983b
   12adc:	movw	r1, #36888	; 0x9018
   12ae0:	movw	r3, #39024	; 0x9870
   12ae4:	movw	r2, #1224	; 0x4c8
   12ae8:	movt	r0, #1
   12aec:	movt	r1, #1
   12af0:	movt	r3, #1
   12af4:	bl	110a0 <__assert_fail@plt>
   12af8:	bl	11088 <abort@plt>
   12afc:	movw	r1, #38588	; 0x96bc
   12b00:	movt	r1, #1
   12b04:	b	11c5c <__assert_fail@plt+0xbbc>
   12b08:	movw	r0, #38480	; 0x9650
   12b0c:	movw	r1, #36888	; 0x9018
   12b10:	movw	r3, #39091	; 0x98b3
   12b14:	movw	r2, #1377	; 0x561
   12b18:	movt	r0, #1
   12b1c:	movt	r1, #1
   12b20:	movt	r3, #1
   12b24:	bl	110a0 <__assert_fail@plt>
   12b28:	movw	r1, #39157	; 0x98f5
   12b2c:	movt	r1, #1
   12b30:	b	11c5c <__assert_fail@plt+0xbbc>
   12b34:	movw	r0, #37661	; 0x931d
   12b38:	movw	r1, #36888	; 0x9018
   12b3c:	movw	r3, #38063	; 0x94af
   12b40:	movw	r2, #721	; 0x2d1
   12b44:	movt	r0, #1
   12b48:	movt	r1, #1
   12b4c:	movt	r3, #1
   12b50:	bl	110a0 <__assert_fail@plt>
   12b54:	bl	10fe0 <__errno_location@plt>
   12b58:	ldr	r4, [r0]
   12b5c:	movw	r1, #39262	; 0x995e
   12b60:	movt	r1, #1
   12b64:	b	12068 <__assert_fail@plt+0xfc8>
   12b68:	movw	r0, #36920	; 0x9038
   12b6c:	movw	r1, #36888	; 0x9018
   12b70:	movw	r3, #36897	; 0x9021
   12b74:	movw	r2, #1893	; 0x765
   12b78:	movt	r0, #1
   12b7c:	movt	r1, #1
   12b80:	movt	r3, #1
   12b84:	bl	110a0 <__assert_fail@plt>
   12b88:	movw	r0, #36862	; 0x8ffe
   12b8c:	movw	r1, #36888	; 0x9018
   12b90:	movw	r3, #36897	; 0x9021
   12b94:	mov	r2, #1840	; 0x730
   12b98:	movt	r0, #1
   12b9c:	movt	r1, #1
   12ba0:	movt	r3, #1
   12ba4:	bl	110a0 <__assert_fail@plt>
   12ba8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bac:	add	fp, sp, #28
   12bb0:	sub	sp, sp, #84	; 0x54
   12bb4:	str	r1, [fp, #-52]	; 0xffffffcc
   12bb8:	mov	r7, r0
   12bbc:	bl	10fc8 <strlen@plt>
   12bc0:	mov	r5, r0
   12bc4:	bl	16c80 <__assert_fail@plt+0x5be0>
   12bc8:	mov	r4, r0
   12bcc:	mov	r0, r5
   12bd0:	mov	r1, #1
   12bd4:	mov	r8, #1
   12bd8:	bl	17094 <__assert_fail@plt+0x5ff4>
   12bdc:	mov	ip, r0
   12be0:	mov	sl, #0
   12be4:	mov	r5, #0
   12be8:	str	r0, [sp, #56]	; 0x38
   12bec:	str	r4, [fp, #-44]	; 0xffffffd4
   12bf0:	ldrb	r0, [r7, r5]
   12bf4:	cmp	r0, #92	; 0x5c
   12bf8:	bne	12f28 <__assert_fail@plt+0x1e88>
   12bfc:	strb	r8, [ip, sl]
   12c00:	add	r9, r5, #1
   12c04:	ldrb	r0, [r7, r9]
   12c08:	cmp	r0, #118	; 0x76
   12c0c:	bhi	12ef0 <__assert_fail@plt+0x1e50>
   12c10:	add	r1, pc, #0
   12c14:	ldr	pc, [r1, r0, lsl #2]
   12c18:	andeq	r2, r1, r8, asr lr
   12c1c:	strdeq	r2, [r1], -r0
   12c20:	strdeq	r2, [r1], -r0
   12c24:	strdeq	r2, [r1], -r0
   12c28:	strdeq	r2, [r1], -r0
   12c2c:	strdeq	r2, [r1], -r0
   12c30:	strdeq	r2, [r1], -r0
   12c34:	strdeq	r2, [r1], -r0
   12c38:	strdeq	r2, [r1], -r0
   12c3c:	strdeq	r2, [r1], -r0
   12c40:	strdeq	r2, [r1], -r0
   12c44:	strdeq	r2, [r1], -r0
   12c48:	strdeq	r2, [r1], -r0
   12c4c:	strdeq	r2, [r1], -r0
   12c50:	strdeq	r2, [r1], -r0
   12c54:	strdeq	r2, [r1], -r0
   12c58:	strdeq	r2, [r1], -r0
   12c5c:	strdeq	r2, [r1], -r0
   12c60:	strdeq	r2, [r1], -r0
   12c64:	strdeq	r2, [r1], -r0
   12c68:	strdeq	r2, [r1], -r0
   12c6c:	strdeq	r2, [r1], -r0
   12c70:	strdeq	r2, [r1], -r0
   12c74:	strdeq	r2, [r1], -r0
   12c78:	strdeq	r2, [r1], -r0
   12c7c:	strdeq	r2, [r1], -r0
   12c80:	strdeq	r2, [r1], -r0
   12c84:	strdeq	r2, [r1], -r0
   12c88:	strdeq	r2, [r1], -r0
   12c8c:	strdeq	r2, [r1], -r0
   12c90:	strdeq	r2, [r1], -r0
   12c94:	strdeq	r2, [r1], -r0
   12c98:	strdeq	r2, [r1], -r0
   12c9c:	strdeq	r2, [r1], -r0
   12ca0:	strdeq	r2, [r1], -r0
   12ca4:	strdeq	r2, [r1], -r0
   12ca8:	strdeq	r2, [r1], -r0
   12cac:	strdeq	r2, [r1], -r0
   12cb0:	strdeq	r2, [r1], -r0
   12cb4:	strdeq	r2, [r1], -r0
   12cb8:	strdeq	r2, [r1], -r0
   12cbc:	strdeq	r2, [r1], -r0
   12cc0:	strdeq	r2, [r1], -r0
   12cc4:	strdeq	r2, [r1], -r0
   12cc8:	strdeq	r2, [r1], -r0
   12ccc:	strdeq	r2, [r1], -r0
   12cd0:	strdeq	r2, [r1], -r0
   12cd4:	strdeq	r2, [r1], -r0
   12cd8:	strdeq	r2, [r1], -r4
   12cdc:	strdeq	r2, [r1], -r4
   12ce0:	strdeq	r2, [r1], -r4
   12ce4:	strdeq	r2, [r1], -r4
   12ce8:	strdeq	r2, [r1], -r4
   12cec:	strdeq	r2, [r1], -r4
   12cf0:	strdeq	r2, [r1], -r4
   12cf4:	strdeq	r2, [r1], -r4
   12cf8:	strdeq	r2, [r1], -r0
   12cfc:	strdeq	r2, [r1], -r0
   12d00:	strdeq	r2, [r1], -r0
   12d04:	strdeq	r2, [r1], -r0
   12d08:	strdeq	r2, [r1], -r0
   12d0c:	strdeq	r2, [r1], -r0
   12d10:	strdeq	r2, [r1], -r0
   12d14:	strdeq	r2, [r1], -r0
   12d18:	strdeq	r2, [r1], -r0
   12d1c:	strdeq	r2, [r1], -r0
   12d20:	strdeq	r2, [r1], -r0
   12d24:	strdeq	r2, [r1], -r0
   12d28:	strdeq	r2, [r1], -r0
   12d2c:	strdeq	r2, [r1], -r0
   12d30:	strdeq	r2, [r1], -r0
   12d34:	strdeq	r2, [r1], -r0
   12d38:	strdeq	r2, [r1], -r0
   12d3c:	strdeq	r2, [r1], -r0
   12d40:	strdeq	r2, [r1], -r0
   12d44:	strdeq	r2, [r1], -r0
   12d48:	strdeq	r2, [r1], -r0
   12d4c:	strdeq	r2, [r1], -r0
   12d50:	strdeq	r2, [r1], -r0
   12d54:	strdeq	r2, [r1], -r0
   12d58:	strdeq	r2, [r1], -r0
   12d5c:	strdeq	r2, [r1], -r0
   12d60:	strdeq	r2, [r1], -r0
   12d64:	strdeq	r2, [r1], -r0
   12d68:	strdeq	r2, [r1], -r0
   12d6c:	strdeq	r2, [r1], -r0
   12d70:	strdeq	r2, [r1], -r0
   12d74:	strdeq	r2, [r1], -r0
   12d78:	strdeq	r2, [r1], -r0
   12d7c:	strdeq	r2, [r1], -r0
   12d80:	strdeq	r2, [r1], -r0
   12d84:	strdeq	r2, [r1], -r0
   12d88:	strdeq	r2, [r1], -r0
   12d8c:	strdeq	r2, [r1], -r0
   12d90:	strdeq	r2, [r1], -r0
   12d94:	strdeq	r2, [r1], -r0
   12d98:	strdeq	r2, [r1], -r0
   12d9c:	andeq	r2, r1, r0, lsr #30
   12da0:	andeq	r2, r1, r8, asr #28
   12da4:	strdeq	r2, [r1], -r0
   12da8:	strdeq	r2, [r1], -r0
   12dac:	strdeq	r2, [r1], -r0
   12db0:	muleq	r1, r8, lr
   12db4:	strdeq	r2, [r1], -r0
   12db8:	strdeq	r2, [r1], -r0
   12dbc:	strdeq	r2, [r1], -r0
   12dc0:	strdeq	r2, [r1], -r0
   12dc4:	strdeq	r2, [r1], -r0
   12dc8:	strdeq	r2, [r1], -r0
   12dcc:	strdeq	r2, [r1], -r0
   12dd0:	andeq	r2, r1, r0, asr lr
   12dd4:	strdeq	r2, [r1], -r0
   12dd8:	strdeq	r2, [r1], -r0
   12ddc:	strdeq	r2, [r1], -r0
   12de0:	andeq	r2, r1, r0, asr #28
   12de4:	strdeq	r2, [r1], -r0
   12de8:	andeq	r2, r1, r0, lsl pc
   12dec:	strdeq	r2, [r1], -r0
   12df0:	andeq	r2, r1, r8, lsl pc
   12df4:	add	r6, r5, #2
   12df8:	sub	r0, r0, #48	; 0x30
   12dfc:	ldrb	r1, [r7, r6]
   12e00:	sub	r1, r1, #48	; 0x30
   12e04:	cmp	r1, #7
   12e08:	bhi	12ef0 <__assert_fail@plt+0x1e50>
   12e0c:	uxtb	r0, r0
   12e10:	add	r5, r5, #3
   12e14:	add	r8, r1, r0, lsl #3
   12e18:	ldrb	r0, [r7, r5]
   12e1c:	sub	r0, r0, #48	; 0x30
   12e20:	cmp	r0, #7
   12e24:	bhi	12ee4 <__assert_fail@plt+0x1e44>
   12e28:	uxtb	r1, r8
   12e2c:	add	r0, r0, r1, lsl #3
   12e30:	cmp	r0, #255	; 0xff
   12e34:	bgt	12ea0 <__assert_fail@plt+0x1e00>
   12e38:	mov	r5, r6
   12e3c:	b	12eec <__assert_fail@plt+0x1e4c>
   12e40:	mov	r0, #13
   12e44:	b	12ef0 <__assert_fail@plt+0x1e50>
   12e48:	mov	r0, #8
   12e4c:	b	12ef0 <__assert_fail@plt+0x1e50>
   12e50:	mov	r0, #10
   12e54:	b	12ef0 <__assert_fail@plt+0x1e50>
   12e58:	movw	r1, #37433	; 0x9239
   12e5c:	mov	r0, #0
   12e60:	mov	r2, #5
   12e64:	movt	r1, #1
   12e68:	bl	10ed8 <dcgettext@plt>
   12e6c:	mov	r2, r0
   12e70:	mov	r0, #0
   12e74:	mov	r1, #0
   12e78:	bl	10f44 <error@plt>
   12e7c:	ldr	ip, [sp, #56]	; 0x38
   12e80:	ldr	r4, [fp, #-44]	; 0xffffffd4
   12e84:	mov	r0, #0
   12e88:	sub	r5, r5, #1
   12e8c:	strb	r0, [ip, sl]
   12e90:	mov	r0, #92	; 0x5c
   12e94:	b	12ef0 <__assert_fail@plt+0x1e50>
   12e98:	mov	r0, #12
   12e9c:	b	12ef0 <__assert_fail@plt+0x1e50>
   12ea0:	movw	r1, #37333	; 0x91d5
   12ea4:	mov	r0, #0
   12ea8:	mov	r2, #5
   12eac:	movt	r1, #1
   12eb0:	bl	10ed8 <dcgettext@plt>
   12eb4:	mov	r2, r0
   12eb8:	ldrb	r0, [r7, r6]
   12ebc:	ldrb	r1, [r7, r5]
   12ec0:	ldrb	r3, [r7, r9]
   12ec4:	stm	sp, {r0, r1, r3}
   12ec8:	str	r0, [sp, #12]
   12ecc:	str	r1, [sp, #16]
   12ed0:	mov	r0, #0
   12ed4:	mov	r1, #0
   12ed8:	bl	10f44 <error@plt>
   12edc:	ldr	r4, [fp, #-44]	; 0xffffffd4
   12ee0:	ldr	ip, [sp, #56]	; 0x38
   12ee4:	mov	r0, r8
   12ee8:	mov	r5, r9
   12eec:	mov	r8, #1
   12ef0:	add	r5, r5, #1
   12ef4:	strb	r0, [r4, sl]
   12ef8:	add	r5, r5, #1
   12efc:	add	sl, sl, #1
   12f00:	ldrb	r0, [r7, r5]
   12f04:	cmp	r0, #92	; 0x5c
   12f08:	bne	12f28 <__assert_fail@plt+0x1e88>
   12f0c:	b	12bfc <__assert_fail@plt+0x1b5c>
   12f10:	mov	r0, #9
   12f14:	b	12ef0 <__assert_fail@plt+0x1e50>
   12f18:	mov	r0, #11
   12f1c:	b	12ef0 <__assert_fail@plt+0x1e50>
   12f20:	mov	r0, #7
   12f24:	b	12ef0 <__assert_fail@plt+0x1e50>
   12f28:	cmp	r0, #0
   12f2c:	bne	12ef4 <__assert_fail@plt+0x1e54>
   12f30:	ldr	r7, [fp, #-52]	; 0xffffffcc
   12f34:	mov	r5, #0
   12f38:	cmp	sl, #3
   12f3c:	bcc	13598 <__assert_fail@plt+0x24f8>
   12f40:	mvn	r0, #2
   12f44:	add	r1, r4, #1
   12f48:	mov	r9, #2
   12f4c:	mov	r5, #0
   12f50:	sub	r0, r0, r4
   12f54:	str	r1, [sp, #52]	; 0x34
   12f58:	str	r0, [sp, #32]
   12f5c:	add	r0, ip, #3
   12f60:	str	r0, [sp, #44]	; 0x2c
   12f64:	add	r0, r4, #3
   12f68:	str	r0, [sp, #40]	; 0x28
   12f6c:	add	r0, ip, #1
   12f70:	str	r0, [sp, #48]	; 0x30
   12f74:	sub	r0, sl, #1
   12f78:	str	r0, [fp, #-48]	; 0xffffffd0
   12f7c:	add	r0, r4, #2
   12f80:	str	r0, [sp, #36]	; 0x24
   12f84:	ldrb	r8, [r4, r5]
   12f88:	cmp	r8, #91	; 0x5b
   12f8c:	bne	12fd0 <__assert_fail@plt+0x1f30>
   12f90:	b	12fc4 <__assert_fail@plt+0x1f24>
   12f94:	str	r0, [r1, #4]
   12f98:	str	r0, [r7, #4]
   12f9c:	add	r5, r5, #3
   12fa0:	ldr	ip, [sp, #56]	; 0x38
   12fa4:	ldr	r4, [fp, #-44]	; 0xffffffd4
   12fa8:	ldr	r1, [sp, #52]	; 0x34
   12fac:	add	r9, r5, #2
   12fb0:	cmp	r9, sl
   12fb4:	bcs	13598 <__assert_fail@plt+0x24f8>
   12fb8:	ldrb	r8, [r4, r5]
   12fbc:	cmp	r8, #91	; 0x5b
   12fc0:	bne	12fd0 <__assert_fail@plt+0x1f30>
   12fc4:	ldrb	r0, [ip, r5]
   12fc8:	cmp	r0, #0
   12fcc:	beq	13030 <__assert_fail@plt+0x1f90>
   12fd0:	add	r6, r5, #1
   12fd4:	ldrb	r0, [r4, r6]
   12fd8:	cmp	r0, #45	; 0x2d
   12fdc:	bne	13488 <__assert_fail@plt+0x23e8>
   12fe0:	ldrb	r0, [ip, r6]
   12fe4:	cmp	r0, #0
   12fe8:	bne	13488 <__assert_fail@plt+0x23e8>
   12fec:	add	r0, r5, r4
   12ff0:	ldrb	r7, [r0, #2]
   12ff4:	cmp	r7, r8
   12ff8:	bcc	13604 <__assert_fail@plt+0x2564>
   12ffc:	mov	r0, #24
   13000:	bl	16c80 <__assert_fail@plt+0x5be0>
   13004:	strb	r7, [r0, #9]
   13008:	ldr	r7, [fp, #-52]	; 0xffffffcc
   1300c:	mov	r1, #0
   13010:	mov	r2, #1
   13014:	strb	r8, [r0, #8]
   13018:	str	r2, [r0]
   1301c:	str	r1, [r0, #4]
   13020:	ldr	r1, [r7, #4]
   13024:	cmp	r1, #0
   13028:	bne	12f94 <__assert_fail@plt+0x1ef4>
   1302c:	b	137f0 <__assert_fail@plt+0x2750>
   13030:	add	r0, r5, #1
   13034:	ldrb	lr, [r4, r0]
   13038:	cmp	lr, #61	; 0x3d
   1303c:	cmpne	lr, #58	; 0x3a
   13040:	bne	13404 <__assert_fail@plt+0x2364>
   13044:	ldrb	r0, [ip, r0]
   13048:	cmp	r0, #0
   1304c:	bne	13404 <__assert_fail@plt+0x2364>
   13050:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13054:	cmp	r0, r9
   13058:	bls	13404 <__assert_fail@plt+0x2364>
   1305c:	mov	r7, r9
   13060:	add	r0, r1, r7
   13064:	ldrb	r0, [r0, #-1]
   13068:	cmp	r0, lr
   1306c:	beq	13090 <__assert_fail@plt+0x1ff0>
   13070:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13074:	add	r7, r7, #1
   13078:	cmp	r0, r7
   1307c:	beq	13404 <__assert_fail@plt+0x2364>
   13080:	add	r0, r1, r7
   13084:	ldrb	r0, [r0, #-1]
   13088:	cmp	r0, lr
   1308c:	bne	13070 <__assert_fail@plt+0x1fd0>
   13090:	ldrb	r0, [r1, r7]
   13094:	cmp	r0, #93	; 0x5d
   13098:	bne	13070 <__assert_fail@plt+0x1fd0>
   1309c:	ldr	r0, [sp, #48]	; 0x30
   130a0:	add	r0, r0, r7
   130a4:	ldrb	r0, [r0, #-1]
   130a8:	cmp	r0, #0
   130ac:	bne	13070 <__assert_fail@plt+0x1fd0>
   130b0:	ldr	r0, [sp, #48]	; 0x30
   130b4:	ldrb	r0, [r0, r7]
   130b8:	cmp	r0, #0
   130bc:	bne	13070 <__assert_fail@plt+0x1fd0>
   130c0:	add	r0, r5, #2
   130c4:	cmp	r0, r7
   130c8:	beq	13728 <__assert_fail@plt+0x2688>
   130cc:	ldr	r0, [sp, #36]	; 0x24
   130d0:	cmp	lr, #58	; 0x3a
   130d4:	add	r6, r0, r5
   130d8:	sub	r0, r7, r5
   130dc:	sub	r2, r0, #2
   130e0:	bne	13334 <__assert_fail@plt+0x2294>
   130e4:	movw	r1, #37738	; 0x936a
   130e8:	mov	r0, r6
   130ec:	str	lr, [sp, #20]
   130f0:	add	r4, r5, #7
   130f4:	str	r2, [sp, #28]
   130f8:	movt	r1, #1
   130fc:	bl	1107c <strncmp@plt>
   13100:	cmp	r4, r7
   13104:	str	r4, [sp, #24]
   13108:	moveq	r4, #0
   1310c:	cmpeq	r0, #0
   13110:	beq	13374 <__assert_fail@plt+0x22d4>
   13114:	ldr	r2, [sp, #28]
   13118:	movw	r1, #37744	; 0x9370
   1311c:	mov	r0, r6
   13120:	movt	r1, #1
   13124:	bl	1107c <strncmp@plt>
   13128:	ldr	r1, [sp, #24]
   1312c:	cmp	r1, r7
   13130:	moveq	r4, #1
   13134:	cmpeq	r0, #0
   13138:	beq	13374 <__assert_fail@plt+0x22d4>
   1313c:	ldr	r2, [sp, #28]
   13140:	movw	r1, #37750	; 0x9376
   13144:	mov	r0, r6
   13148:	movt	r1, #1
   1314c:	bl	1107c <strncmp@plt>
   13150:	ldr	r1, [sp, #24]
   13154:	cmp	r1, r7
   13158:	moveq	r4, #2
   1315c:	cmpeq	r0, #0
   13160:	beq	13374 <__assert_fail@plt+0x22d4>
   13164:	ldr	r2, [sp, #28]
   13168:	movw	r1, #37756	; 0x937c
   1316c:	mov	r0, r6
   13170:	movt	r1, #1
   13174:	bl	1107c <strncmp@plt>
   13178:	ldr	r1, [sp, #24]
   1317c:	cmp	r1, r7
   13180:	moveq	r4, #3
   13184:	cmpeq	r0, #0
   13188:	beq	13374 <__assert_fail@plt+0x22d4>
   1318c:	ldr	r2, [sp, #28]
   13190:	movw	r1, #37799	; 0x93a7
   13194:	mov	r0, r6
   13198:	movt	r1, #1
   1319c:	bl	1107c <strncmp@plt>
   131a0:	ldr	r1, [sp, #24]
   131a4:	cmp	r1, r7
   131a8:	moveq	r4, #4
   131ac:	cmpeq	r0, #0
   131b0:	beq	13374 <__assert_fail@plt+0x22d4>
   131b4:	ldr	r2, [sp, #28]
   131b8:	movw	r1, #37762	; 0x9382
   131bc:	mov	r0, r6
   131c0:	movt	r1, #1
   131c4:	bl	1107c <strncmp@plt>
   131c8:	ldr	r1, [sp, #24]
   131cc:	cmp	r1, r7
   131d0:	moveq	r4, #5
   131d4:	cmpeq	r0, #0
   131d8:	beq	13374 <__assert_fail@plt+0x22d4>
   131dc:	ldr	r2, [sp, #28]
   131e0:	movw	r1, #37768	; 0x9388
   131e4:	mov	r0, r6
   131e8:	movt	r1, #1
   131ec:	bl	1107c <strncmp@plt>
   131f0:	ldr	r1, [sp, #24]
   131f4:	cmp	r1, r7
   131f8:	moveq	r4, #6
   131fc:	cmpeq	r0, #0
   13200:	beq	13374 <__assert_fail@plt+0x22d4>
   13204:	ldr	r2, [sp, #28]
   13208:	movw	r1, #37774	; 0x938e
   1320c:	mov	r0, r6
   13210:	movt	r1, #1
   13214:	bl	1107c <strncmp@plt>
   13218:	ldr	r1, [sp, #24]
   1321c:	cmp	r1, r7
   13220:	moveq	r4, #7
   13224:	cmpeq	r0, #0
   13228:	beq	13374 <__assert_fail@plt+0x22d4>
   1322c:	ldr	r2, [sp, #28]
   13230:	movw	r1, #37780	; 0x9394
   13234:	mov	r0, r6
   13238:	movt	r1, #1
   1323c:	bl	1107c <strncmp@plt>
   13240:	ldr	r1, [sp, #24]
   13244:	cmp	r1, r7
   13248:	moveq	r4, #8
   1324c:	cmpeq	r0, #0
   13250:	beq	13374 <__assert_fail@plt+0x22d4>
   13254:	ldr	r2, [sp, #28]
   13258:	movw	r1, #37786	; 0x939a
   1325c:	mov	r0, r6
   13260:	movt	r1, #1
   13264:	bl	1107c <strncmp@plt>
   13268:	ldr	r1, [sp, #24]
   1326c:	cmp	r1, r7
   13270:	moveq	r4, #9
   13274:	cmpeq	r0, #0
   13278:	beq	13374 <__assert_fail@plt+0x22d4>
   1327c:	ldr	r2, [sp, #28]
   13280:	movw	r1, #37792	; 0x93a0
   13284:	mov	r0, r6
   13288:	movt	r1, #1
   1328c:	bl	1107c <strncmp@plt>
   13290:	ldr	r1, [sp, #24]
   13294:	cmp	r1, r7
   13298:	moveq	r4, #10
   1329c:	cmpeq	r0, #0
   132a0:	beq	13374 <__assert_fail@plt+0x22d4>
   132a4:	str	r6, [sp, #24]
   132a8:	ldr	r2, [sp, #28]
   132ac:	movw	r1, #37798	; 0x93a6
   132b0:	add	r4, r5, #8
   132b4:	ldr	r0, [sp, #24]
   132b8:	movt	r1, #1
   132bc:	bl	1107c <strncmp@plt>
   132c0:	cmp	r4, r7
   132c4:	moveq	r4, #11
   132c8:	cmpeq	r0, #0
   132cc:	beq	13374 <__assert_fail@plt+0x22d4>
   132d0:	ldr	r4, [fp, #-44]	; 0xffffffd4
   132d4:	ldr	ip, [sp, #56]	; 0x38
   132d8:	ldr	lr, [sp, #20]
   132dc:	ldrb	r0, [r4, r9]
   132e0:	cmp	r0, #42	; 0x2a
   132e4:	ldrbeq	r0, [ip, r9]
   132e8:	cmpeq	r0, #0
   132ec:	bne	137b0 <__assert_fail@plt+0x2710>
   132f0:	add	r2, r9, #1
   132f4:	cmp	r2, sl
   132f8:	bcs	137b0 <__assert_fail@plt+0x2710>
   132fc:	ldrb	r1, [r4, r2]
   13300:	mov	r0, r2
   13304:	sub	r2, r1, #48	; 0x30
   13308:	cmp	r2, #9
   1330c:	bhi	13320 <__assert_fail@plt+0x2280>
   13310:	ldrb	r3, [ip, r0]
   13314:	add	r2, r0, #1
   13318:	cmp	r3, #0
   1331c:	beq	132f4 <__assert_fail@plt+0x2254>
   13320:	cmp	r1, #93	; 0x5d
   13324:	ldrbeq	r0, [ip, r0]
   13328:	cmpeq	r0, #0
   1332c:	beq	13404 <__assert_fail@plt+0x2364>
   13330:	b	137b0 <__assert_fail@plt+0x2710>
   13334:	add	r0, r5, #3
   13338:	cmp	r0, r7
   1333c:	bne	133ac <__assert_fail@plt+0x230c>
   13340:	mov	r0, #24
   13344:	bl	16c80 <__assert_fail@plt+0x5be0>
   13348:	mov	r2, #3
   1334c:	mov	r1, #0
   13350:	str	r2, [r0]
   13354:	str	r1, [r0, #4]
   13358:	ldrb	r1, [r6]
   1335c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13360:	strb	r1, [r0, #8]
   13364:	ldr	r1, [r2, #4]
   13368:	cmp	r1, #0
   1336c:	bne	1339c <__assert_fail@plt+0x22fc>
   13370:	b	13830 <__assert_fail@plt+0x2790>
   13374:	mov	r0, #24
   13378:	bl	16c80 <__assert_fail@plt+0x5be0>
   1337c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13380:	mov	r1, #2
   13384:	str	r1, [r0]
   13388:	mov	r1, #0
   1338c:	stmib	r0, {r1, r4}
   13390:	ldr	r1, [r2, #4]
   13394:	cmp	r1, #0
   13398:	beq	13850 <__assert_fail@plt+0x27b0>
   1339c:	add	r5, r7, #2
   133a0:	str	r0, [r1, #4]
   133a4:	str	r0, [r2, #4]
   133a8:	b	1357c <__assert_fail@plt+0x24dc>
   133ac:	ldrb	r0, [r4, r9]
   133b0:	mov	r1, r2
   133b4:	cmp	r0, #42	; 0x2a
   133b8:	ldrbeq	r0, [ip, r9]
   133bc:	cmpeq	r0, #0
   133c0:	bne	136ec <__assert_fail@plt+0x264c>
   133c4:	add	r2, r9, #1
   133c8:	cmp	r2, sl
   133cc:	bcs	136ec <__assert_fail@plt+0x264c>
   133d0:	ldrb	r7, [r4, r2]
   133d4:	mov	r0, r2
   133d8:	sub	r2, r7, #48	; 0x30
   133dc:	cmp	r2, #9
   133e0:	bhi	133f4 <__assert_fail@plt+0x2354>
   133e4:	ldrb	r3, [ip, r0]
   133e8:	add	r2, r0, #1
   133ec:	cmp	r3, #0
   133f0:	beq	133c8 <__assert_fail@plt+0x2328>
   133f4:	cmp	r7, #93	; 0x5d
   133f8:	ldrbeq	r0, [ip, r0]
   133fc:	cmpeq	r0, #0
   13400:	bne	136ec <__assert_fail@plt+0x264c>
   13404:	add	r0, r5, #2
   13408:	cmp	r0, sl
   1340c:	bcs	13810 <__assert_fail@plt+0x2770>
   13410:	ldrb	r1, [r4, r0]
   13414:	cmp	r1, #42	; 0x2a
   13418:	bne	13474 <__assert_fail@plt+0x23d4>
   1341c:	ldrb	r0, [ip, r0]
   13420:	cmp	r0, #0
   13424:	bne	13474 <__assert_fail@plt+0x23d4>
   13428:	add	r0, r5, #3
   1342c:	cmp	r0, sl
   13430:	bcs	13474 <__assert_fail@plt+0x23d4>
   13434:	ldr	r1, [sp, #44]	; 0x2c
   13438:	ldr	r2, [sp, #40]	; 0x28
   1343c:	sub	r3, sl, r5
   13440:	mov	r7, #0
   13444:	sub	r3, r3, #3
   13448:	add	r1, r1, r5
   1344c:	add	r2, r2, r5
   13450:	ldrb	r6, [r1, r7]
   13454:	cmp	r6, #0
   13458:	bne	13474 <__assert_fail@plt+0x23d4>
   1345c:	ldrb	r6, [r2, r7]
   13460:	cmp	r6, #93	; 0x5d
   13464:	beq	134bc <__assert_fail@plt+0x241c>
   13468:	add	r7, r7, #1
   1346c:	cmp	r3, r7
   13470:	bne	13450 <__assert_fail@plt+0x23b0>
   13474:	ldr	r7, [fp, #-52]	; 0xffffffcc
   13478:	add	r6, r5, #1
   1347c:	ldrb	r0, [r4, r6]
   13480:	cmp	r0, #45	; 0x2d
   13484:	beq	12fe0 <__assert_fail@plt+0x1f40>
   13488:	mov	r0, #24
   1348c:	bl	16c80 <__assert_fail@plt+0x5be0>
   13490:	mov	r1, #0
   13494:	strb	r8, [r0, #8]
   13498:	str	r1, [r0]
   1349c:	str	r1, [r0, #4]
   134a0:	ldr	r1, [r7, #4]
   134a4:	cmp	r1, #0
   134a8:	beq	137d0 <__assert_fail@plt+0x2730>
   134ac:	mov	r5, r6
   134b0:	str	r0, [r1, #4]
   134b4:	str	r0, [r7, #4]
   134b8:	b	12fa0 <__assert_fail@plt+0x1f00>
   134bc:	mov	r8, lr
   134c0:	cmp	r7, #0
   134c4:	beq	13528 <__assert_fail@plt+0x2488>
   134c8:	ldrb	r0, [r4, r0]!
   134cc:	mov	r1, #0
   134d0:	mov	r2, #10
   134d4:	sub	r3, fp, #40	; 0x28
   134d8:	str	r1, [sp]
   134dc:	sub	r1, fp, #32
   134e0:	cmp	r0, #48	; 0x30
   134e4:	mov	r0, r4
   134e8:	movweq	r2, #8
   134ec:	bl	17200 <__assert_fail@plt+0x6160>
   134f0:	cmp	r0, #0
   134f4:	bne	13740 <__assert_fail@plt+0x26a0>
   134f8:	ldr	r6, [fp, #-40]	; 0xffffffd8
   134fc:	ldr	r9, [fp, #-36]	; 0xffffffdc
   13500:	and	r0, r6, r9
   13504:	cmn	r0, #1
   13508:	beq	13740 <__assert_fail@plt+0x26a0>
   1350c:	ldr	r0, [sp, #32]
   13510:	ldr	r1, [fp, #-32]	; 0xffffffe0
   13514:	sub	r0, r0, r5
   13518:	add	r0, r1, r0
   1351c:	cmp	r0, r7
   13520:	beq	13538 <__assert_fail@plt+0x2498>
   13524:	b	13740 <__assert_fail@plt+0x26a0>
   13528:	mov	r6, #0
   1352c:	mov	r9, #0
   13530:	str	r6, [fp, #-36]	; 0xffffffdc
   13534:	str	r6, [fp, #-40]	; 0xffffffd8
   13538:	mov	r0, #24
   1353c:	bl	16c80 <__assert_fail@plt+0x5be0>
   13540:	mov	r2, #4
   13544:	str	r6, [r0, #16]
   13548:	str	r9, [r0, #20]
   1354c:	strb	r8, [r0, #8]
   13550:	mov	r1, #0
   13554:	str	r2, [r0]
   13558:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1355c:	str	r1, [r0, #4]
   13560:	ldr	r1, [r2, #4]
   13564:	cmp	r1, #0
   13568:	beq	13870 <__assert_fail@plt+0x27d0>
   1356c:	str	r0, [r1, #4]
   13570:	str	r0, [r2, #4]
   13574:	add	r0, r5, r7
   13578:	add	r5, r0, #4
   1357c:	ldr	ip, [sp, #56]	; 0x38
   13580:	ldr	r4, [fp, #-44]	; 0xffffffd4
   13584:	ldr	r1, [sp, #52]	; 0x34
   13588:	ldr	r7, [fp, #-52]	; 0xffffffcc
   1358c:	add	r9, r5, #2
   13590:	cmp	r9, sl
   13594:	bcc	12fb8 <__assert_fail@plt+0x1f18>
   13598:	mov	r8, #1
   1359c:	cmp	r5, sl
   135a0:	bcs	135e8 <__assert_fail@plt+0x2548>
   135a4:	mov	r6, #0
   135a8:	ldrb	r7, [r4, r5]
   135ac:	mov	r0, #24
   135b0:	bl	16c80 <__assert_fail@plt+0x5be0>
   135b4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   135b8:	strb	r7, [r0, #8]
   135bc:	str	r6, [r0]
   135c0:	str	r6, [r0, #4]
   135c4:	ldr	r1, [r2, #4]
   135c8:	cmp	r1, #0
   135cc:	beq	137d0 <__assert_fail@plt+0x2730>
   135d0:	ldr	r4, [fp, #-44]	; 0xffffffd4
   135d4:	add	r5, r5, #1
   135d8:	str	r0, [r1, #4]
   135dc:	str	r0, [r2, #4]
   135e0:	cmp	sl, r5
   135e4:	bne	135a8 <__assert_fail@plt+0x2508>
   135e8:	mov	r0, r4
   135ec:	bl	14558 <__assert_fail@plt+0x34b8>
   135f0:	ldr	r0, [sp, #56]	; 0x38
   135f4:	bl	14558 <__assert_fail@plt+0x34b8>
   135f8:	mov	r0, r8
   135fc:	sub	sp, fp, #28
   13600:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13604:	mov	r0, #5
   13608:	bl	16c80 <__assert_fail@plt+0x5be0>
   1360c:	mov	r9, r0
   13610:	bl	10fa4 <__ctype_b_loc@plt>
   13614:	mov	r5, r0
   13618:	ldr	r0, [r0]
   1361c:	add	r0, r0, r8, lsl #1
   13620:	ldrb	r0, [r0, #1]
   13624:	tst	r0, #64	; 0x40
   13628:	bne	1364c <__assert_fail@plt+0x25ac>
   1362c:	movw	r3, #37828	; 0x93c4
   13630:	mov	r0, r9
   13634:	mov	r1, #1
   13638:	mov	r2, #5
   1363c:	str	r8, [sp]
   13640:	movt	r3, #1
   13644:	bl	10fec <__sprintf_chk@plt>
   13648:	b	13658 <__assert_fail@plt+0x25b8>
   1364c:	mov	r0, #0
   13650:	strb	r0, [r9, #1]
   13654:	strb	r8, [r9]
   13658:	mov	r0, #5
   1365c:	bl	16c80 <__assert_fail@plt+0x5be0>
   13660:	mov	r6, r0
   13664:	ldr	r0, [r5]
   13668:	add	r0, r0, r7, lsl #1
   1366c:	ldrb	r0, [r0, #1]
   13670:	tst	r0, #64	; 0x40
   13674:	bne	13698 <__assert_fail@plt+0x25f8>
   13678:	movw	r3, #37828	; 0x93c4
   1367c:	mov	r0, r6
   13680:	mov	r1, #1
   13684:	mov	r2, #5
   13688:	str	r7, [sp]
   1368c:	movt	r3, #1
   13690:	bl	10fec <__sprintf_chk@plt>
   13694:	b	136a4 <__assert_fail@plt+0x2604>
   13698:	mov	r0, #0
   1369c:	strb	r0, [r6, #1]
   136a0:	strb	r7, [r6]
   136a4:	movw	r1, #38131	; 0x94f3
   136a8:	mov	r0, #0
   136ac:	mov	r2, #5
   136b0:	mov	r8, #0
   136b4:	movt	r1, #1
   136b8:	bl	10ed8 <dcgettext@plt>
   136bc:	mov	r2, r0
   136c0:	mov	r0, #0
   136c4:	mov	r1, #0
   136c8:	mov	r3, r9
   136cc:	str	r6, [sp]
   136d0:	bl	10f44 <error@plt>
   136d4:	mov	r0, r9
   136d8:	bl	14558 <__assert_fail@plt+0x34b8>
   136dc:	mov	r0, r6
   136e0:	bl	14558 <__assert_fail@plt+0x34b8>
   136e4:	ldr	r4, [fp, #-44]	; 0xffffffd4
   136e8:	b	135e8 <__assert_fail@plt+0x2548>
   136ec:	mov	r0, r6
   136f0:	bl	13fb4 <__assert_fail@plt+0x2f14>
   136f4:	movw	r1, #37604	; 0x92e4
   136f8:	mov	r6, r0
   136fc:	mov	r0, #0
   13700:	mov	r2, #5
   13704:	mov	r8, #0
   13708:	movt	r1, #1
   1370c:	bl	10ed8 <dcgettext@plt>
   13710:	mov	r2, r0
   13714:	mov	r0, #0
   13718:	mov	r1, #0
   1371c:	mov	r3, r6
   13720:	bl	10f44 <error@plt>
   13724:	b	136dc <__assert_fail@plt+0x263c>
   13728:	mov	r8, #0
   1372c:	cmp	lr, #58	; 0x3a
   13730:	bne	13788 <__assert_fail@plt+0x26e8>
   13734:	movw	r1, #37498	; 0x927a
   13738:	movt	r1, #1
   1373c:	b	13790 <__assert_fail@plt+0x26f0>
   13740:	mov	r0, r4
   13744:	mov	r1, r7
   13748:	bl	13fb4 <__assert_fail@plt+0x2f14>
   1374c:	movw	r1, #38020	; 0x9484
   13750:	mov	r6, r0
   13754:	mov	r8, #0
   13758:	movt	r1, #1
   1375c:	mov	r0, #0
   13760:	mov	r2, #5
   13764:	bl	10ed8 <dcgettext@plt>
   13768:	mov	r5, r0
   1376c:	mov	r0, r6
   13770:	bl	16544 <__assert_fail@plt+0x54a4>
   13774:	mov	r3, r0
   13778:	mov	r0, #0
   1377c:	mov	r1, #0
   13780:	mov	r2, r5
   13784:	b	13720 <__assert_fail@plt+0x2680>
   13788:	movw	r1, #37534	; 0x929e
   1378c:	movt	r1, #1
   13790:	mov	r0, #0
   13794:	mov	r2, #5
   13798:	bl	10ed8 <dcgettext@plt>
   1379c:	mov	r2, r0
   137a0:	mov	r0, #0
   137a4:	mov	r1, #0
   137a8:	bl	10f44 <error@plt>
   137ac:	b	136e4 <__assert_fail@plt+0x2644>
   137b0:	ldr	r0, [sp, #24]
   137b4:	ldr	r1, [sp, #28]
   137b8:	bl	13fb4 <__assert_fail@plt+0x2f14>
   137bc:	movw	r1, #37577	; 0x92c9
   137c0:	mov	r6, r0
   137c4:	mov	r8, #0
   137c8:	movt	r1, #1
   137cc:	b	1375c <__assert_fail@plt+0x26bc>
   137d0:	movw	r0, #37661	; 0x931d
   137d4:	movw	r1, #36888	; 0x9018
   137d8:	movw	r3, #38267	; 0x957b
   137dc:	movw	r2, #649	; 0x289
   137e0:	movt	r0, #1
   137e4:	movt	r1, #1
   137e8:	movt	r3, #1
   137ec:	bl	110a0 <__assert_fail@plt>
   137f0:	movw	r0, #37661	; 0x931d
   137f4:	movw	r1, #36888	; 0x9018
   137f8:	movw	r3, #38198	; 0x9536
   137fc:	movw	r2, #679	; 0x2a7
   13800:	movt	r0, #1
   13804:	movt	r1, #1
   13808:	movt	r3, #1
   1380c:	bl	110a0 <__assert_fail@plt>
   13810:	movw	r0, #37901	; 0x940d
   13814:	movw	r1, #36888	; 0x9018
   13818:	movw	r3, #37925	; 0x9425
   1381c:	mov	r2, #784	; 0x310
   13820:	movt	r0, #1
   13824:	movt	r1, #1
   13828:	movt	r3, #1
   1382c:	bl	110a0 <__assert_fail@plt>
   13830:	movw	r0, #37661	; 0x931d
   13834:	movw	r1, #36888	; 0x9018
   13838:	movw	r3, #37834	; 0x93ca
   1383c:	movw	r2, #743	; 0x2e7
   13840:	movt	r0, #1
   13844:	movt	r1, #1
   13848:	movt	r3, #1
   1384c:	bl	110a0 <__assert_fail@plt>
   13850:	movw	r0, #37661	; 0x931d
   13854:	movw	r1, #36888	; 0x9018
   13858:	movw	r3, #37672	; 0x9328
   1385c:	movw	r2, #701	; 0x2bd
   13860:	movt	r0, #1
   13864:	movt	r1, #1
   13868:	movt	r3, #1
   1386c:	bl	110a0 <__assert_fail@plt>
   13870:	movw	r0, #37661	; 0x931d
   13874:	movw	r1, #36888	; 0x9018
   13878:	movw	r3, #38063	; 0x94af
   1387c:	movw	r2, #721	; 0x2d1
   13880:	movt	r0, #1
   13884:	movt	r1, #1
   13888:	movt	r3, #1
   1388c:	bl	110a0 <__assert_fail@plt>
   13890:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13894:	add	fp, sp, #28
   13898:	sub	sp, sp, #4
   1389c:	movw	r5, #45680	; 0xb270
   138a0:	movw	sl, #45424	; 0xb170
   138a4:	mov	r8, r0
   138a8:	mvn	r7, #-2147483648	; 0x80000000
   138ac:	mov	r6, #0
   138b0:	mov	r0, #0
   138b4:	movt	r5, #2
   138b8:	movt	sl, #2
   138bc:	cmp	r0, r6
   138c0:	bcc	138fc <__assert_fail@plt+0x285c>
   138c4:	b	138e0 <__assert_fail@plt+0x2840>
   138c8:	mov	r0, r4
   138cc:	cmp	r1, #0
   138d0:	mvnne	r9, #-2147483648	; 0x80000000
   138d4:	mov	r7, r9
   138d8:	cmp	r0, r6
   138dc:	bcc	138fc <__assert_fail@plt+0x285c>
   138e0:	mov	r0, r5
   138e4:	mov	r1, #8192	; 0x2000
   138e8:	blx	r8
   138ec:	cmp	r0, #0
   138f0:	beq	13a44 <__assert_fail@plt+0x29a4>
   138f4:	mov	r6, r0
   138f8:	mov	r0, #0
   138fc:	cmn	r7, #-2147483647	; 0x80000001
   13900:	bne	13988 <__assert_fail@plt+0x28e8>
   13904:	cmp	r6, r0
   13908:	mov	r4, r0
   1390c:	bls	13930 <__assert_fail@plt+0x2890>
   13910:	mov	r4, r0
   13914:	ldrb	r1, [r5, r4]
   13918:	ldrb	r1, [sl, r1]
   1391c:	cmp	r1, #0
   13920:	bne	13930 <__assert_fail@plt+0x2890>
   13924:	add	r4, r4, #2
   13928:	cmp	r4, r6
   1392c:	bcc	13914 <__assert_fail@plt+0x2874>
   13930:	cmp	r4, r6
   13934:	bne	1394c <__assert_fail@plt+0x28ac>
   13938:	sub	r4, r6, #1
   1393c:	ldrb	r1, [r5, r4]
   13940:	ldrb	r1, [sl, r1]
   13944:	cmp	r1, #0
   13948:	moveq	r4, r6
   1394c:	cmp	r4, r6
   13950:	bcs	139a4 <__assert_fail@plt+0x2904>
   13954:	ldrb	r9, [r5, r4]
   13958:	sub	r1, r4, r0
   1395c:	cmp	r4, #0
   13960:	add	r7, r1, #1
   13964:	beq	13978 <__assert_fail@plt+0x28d8>
   13968:	add	r2, r4, r5
   1396c:	ldrb	r2, [r2, #-1]
   13970:	cmp	r2, r9
   13974:	moveq	r7, r1
   13978:	add	r4, r4, #1
   1397c:	cmp	r7, #0
   13980:	bne	139b4 <__assert_fail@plt+0x2914>
   13984:	b	139d8 <__assert_fail@plt+0x2938>
   13988:	mov	r9, r7
   1398c:	mov	r4, r0
   13990:	cmp	r4, r6
   13994:	mov	r0, r4
   13998:	mov	r7, r9
   1399c:	bcs	138d8 <__assert_fail@plt+0x2838>
   139a0:	b	139f8 <__assert_fail@plt+0x2958>
   139a4:	sub	r7, r6, r0
   139a8:	mvn	r9, #-2147483648	; 0x80000000
   139ac:	cmp	r7, #0
   139b0:	beq	139d8 <__assert_fail@plt+0x2938>
   139b4:	movw	r1, #45404	; 0xb15c
   139b8:	add	r0, r5, r0
   139bc:	mov	r2, r7
   139c0:	movt	r1, #2
   139c4:	ldr	r3, [r1]
   139c8:	mov	r1, #1
   139cc:	bl	10ec0 <fwrite_unlocked@plt>
   139d0:	cmp	r0, r7
   139d4:	bne	13a4c <__assert_fail@plt+0x29ac>
   139d8:	cmn	r9, #-2147483647	; 0x80000001
   139dc:	mov	r0, r4
   139e0:	mvn	r7, #-2147483648	; 0x80000000
   139e4:	beq	138d8 <__assert_fail@plt+0x2838>
   139e8:	cmp	r4, r6
   139ec:	mov	r0, r4
   139f0:	mov	r7, r9
   139f4:	bcs	138d8 <__assert_fail@plt+0x2838>
   139f8:	ldrb	r0, [r5, r4]
   139fc:	mov	r1, #1
   13a00:	cmp	r9, r0
   13a04:	bne	138c8 <__assert_fail@plt+0x2828>
   13a08:	add	r0, r4, #1
   13a0c:	mov	r1, r0
   13a10:	cmp	r6, r0
   13a14:	beq	13a30 <__assert_fail@plt+0x2990>
   13a18:	ldrb	r2, [r5, r1]
   13a1c:	add	r0, r1, #1
   13a20:	cmp	r9, r2
   13a24:	beq	13a0c <__assert_fail@plt+0x296c>
   13a28:	sub	r0, r0, #1
   13a2c:	b	13a34 <__assert_fail@plt+0x2994>
   13a30:	mov	r0, r6
   13a34:	cmp	r1, r6
   13a38:	mov	r1, #0
   13a3c:	movwcc	r1, #1
   13a40:	b	138cc <__assert_fail@plt+0x282c>
   13a44:	sub	sp, fp, #28
   13a48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a4c:	bl	10fe0 <__errno_location@plt>
   13a50:	movw	r1, #36850	; 0x8ff2
   13a54:	ldr	r4, [r0]
   13a58:	mov	r0, #0
   13a5c:	mov	r2, #5
   13a60:	movt	r1, #1
   13a64:	bl	10ed8 <dcgettext@plt>
   13a68:	mov	r2, r0
   13a6c:	mov	r0, #1
   13a70:	mov	r1, r4
   13a74:	bl	10f44 <error@plt>
   13a78:	push	{r4, sl, fp, lr}
   13a7c:	add	fp, sp, #8
   13a80:	mov	r2, r1
   13a84:	mov	r1, r0
   13a88:	mov	r0, #0
   13a8c:	bl	1655c <__assert_fail@plt+0x54bc>
   13a90:	cmn	r0, #1
   13a94:	popne	{r4, sl, fp, pc}
   13a98:	bl	10fe0 <__errno_location@plt>
   13a9c:	movw	r1, #39262	; 0x995e
   13aa0:	ldr	r4, [r0]
   13aa4:	mov	r0, #0
   13aa8:	mov	r2, #5
   13aac:	movt	r1, #1
   13ab0:	bl	10ed8 <dcgettext@plt>
   13ab4:	mov	r2, r0
   13ab8:	mov	r0, #1
   13abc:	mov	r1, r4
   13ac0:	bl	10f44 <error@plt>
   13ac4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13ac8:	add	fp, sp, #24
   13acc:	movw	r7, #53872	; 0xd270
   13ad0:	mov	r4, r1
   13ad4:	mov	r5, r0
   13ad8:	add	r8, r0, #1
   13adc:	movt	r7, #2
   13ae0:	mov	r0, #0
   13ae4:	mov	r1, r5
   13ae8:	mov	r2, r4
   13aec:	bl	1655c <__assert_fail@plt+0x54bc>
   13af0:	mov	r1, r0
   13af4:	cmp	r0, #0
   13af8:	beq	13b6c <__assert_fail@plt+0x2acc>
   13afc:	cmn	r1, #1
   13b00:	beq	13b74 <__assert_fail@plt+0x2ad4>
   13b04:	mov	r0, #0
   13b08:	ldrb	r2, [r5, r0]
   13b0c:	ldrb	r2, [r7, r2]
   13b10:	cmp	r2, #0
   13b14:	bne	13b28 <__assert_fail@plt+0x2a88>
   13b18:	add	r0, r0, #1
   13b1c:	cmp	r1, r0
   13b20:	bne	13b08 <__assert_fail@plt+0x2a68>
   13b24:	mov	r0, r1
   13b28:	add	r2, r0, #1
   13b2c:	cmp	r2, r1
   13b30:	bcs	13b60 <__assert_fail@plt+0x2ac0>
   13b34:	mvn	r3, r0
   13b38:	add	r2, r8, r0
   13b3c:	add	r1, r3, r1
   13b40:	ldrb	r3, [r2]
   13b44:	add	r2, r2, #1
   13b48:	ldrb	r6, [r7, r3]
   13b4c:	cmp	r6, #0
   13b50:	strbeq	r3, [r5, r0]
   13b54:	addeq	r0, r0, #1
   13b58:	subs	r1, r1, #1
   13b5c:	bne	13b40 <__assert_fail@plt+0x2aa0>
   13b60:	cmp	r0, #0
   13b64:	beq	13ae0 <__assert_fail@plt+0x2a40>
   13b68:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13b6c:	mov	r0, r1
   13b70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13b74:	bl	10fe0 <__errno_location@plt>
   13b78:	movw	r1, #39262	; 0x995e
   13b7c:	ldr	r4, [r0]
   13b80:	mov	r0, #0
   13b84:	mov	r2, #5
   13b88:	movt	r1, #1
   13b8c:	bl	10ed8 <dcgettext@plt>
   13b90:	mov	r2, r0
   13b94:	mov	r0, #1
   13b98:	mov	r1, r4
   13b9c:	bl	10f44 <error@plt>
   13ba0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ba4:	add	fp, sp, #28
   13ba8:	sub	sp, sp, #4
   13bac:	mov	r4, r0
   13bb0:	add	sl, r0, #8
   13bb4:	mvn	r9, #0
   13bb8:	cmp	r1, #0
   13bbc:	beq	13c68 <__assert_fail@plt+0x2bc8>
   13bc0:	mov	ip, #2
   13bc4:	str	ip, [r1]
   13bc8:	subs	r7, r9, #1
   13bcc:	ldm	sl, {r0, r3}
   13bd0:	sbc	r6, r9, #0
   13bd4:	eor	r6, r3, r6
   13bd8:	eor	r7, r0, r7
   13bdc:	orrs	r7, r7, r6
   13be0:	bne	13c0c <__assert_fail@plt+0x2b6c>
   13be4:	ldr	r0, [r4]
   13be8:	mvn	r3, #0
   13bec:	ldr	r6, [r0, #4]
   13bf0:	mvn	r0, #0
   13bf4:	str	r6, [r4, #4]
   13bf8:	str	r9, [sl]
   13bfc:	str	r9, [sl, #4]
   13c00:	cmp	r6, #0
   13c04:	bne	13c18 <__assert_fail@plt+0x2b78>
   13c08:	b	13e64 <__assert_fail@plt+0x2dc4>
   13c0c:	ldr	r6, [r4, #4]
   13c10:	cmp	r6, #0
   13c14:	beq	13e64 <__assert_fail@plt+0x2dc4>
   13c18:	ldr	r7, [r6]
   13c1c:	cmp	r7, #4
   13c20:	bhi	13ed0 <__assert_fail@plt+0x2e30>
   13c24:	add	r5, pc, #0
   13c28:	ldr	pc, [r5, r7, lsl #2]
   13c2c:	andeq	r3, r1, r0, lsl sp
   13c30:	andeq	r3, r1, r0, lsr sp
   13c34:	andeq	r3, r1, ip, asr #26
   13c38:	andeq	r3, r1, r0, lsl sp
   13c3c:	andeq	r3, r1, r0, asr #24
   13c40:	mov	r7, r6
   13c44:	ldr	r5, [r7, #16]!
   13c48:	ldr	r2, [r7, #4]
   13c4c:	orrs	r2, r5, r2
   13c50:	bne	13e74 <__assert_fail@plt+0x2dd4>
   13c54:	ldr	r0, [r6, #4]
   13c58:	str	r0, [r4, #4]
   13c5c:	str	r9, [sl]
   13c60:	str	r9, [sl, #4]
   13c64:	b	13bc4 <__assert_fail@plt+0x2b24>
   13c68:	ldm	sl, {r0, r3}
   13c6c:	subs	r2, r9, #1
   13c70:	sbc	r7, r9, #0
   13c74:	eor	r2, r0, r2
   13c78:	eor	r7, r3, r7
   13c7c:	orrs	r2, r2, r7
   13c80:	bne	13cac <__assert_fail@plt+0x2c0c>
   13c84:	ldr	r0, [r4]
   13c88:	mvn	r3, #0
   13c8c:	ldr	r6, [r0, #4]
   13c90:	mvn	r0, #0
   13c94:	str	r6, [r4, #4]
   13c98:	str	r9, [sl]
   13c9c:	str	r9, [sl, #4]
   13ca0:	cmp	r6, #0
   13ca4:	bne	13cb8 <__assert_fail@plt+0x2c18>
   13ca8:	b	13e64 <__assert_fail@plt+0x2dc4>
   13cac:	ldr	r6, [r4, #4]
   13cb0:	cmp	r6, #0
   13cb4:	beq	13e64 <__assert_fail@plt+0x2dc4>
   13cb8:	ldr	r2, [r6]
   13cbc:	cmp	r2, #4
   13cc0:	bhi	13ed0 <__assert_fail@plt+0x2e30>
   13cc4:	add	r7, pc, #0
   13cc8:	ldr	pc, [r7, r2, lsl #2]
   13ccc:	andeq	r3, r1, r0, lsl sp
   13cd0:	andeq	r3, r1, r0, lsr sp
   13cd4:	andeq	r3, r1, ip, asr #26
   13cd8:	andeq	r3, r1, r0, lsl sp
   13cdc:	andeq	r3, r1, r0, ror #25
   13ce0:	mov	r7, r6
   13ce4:	ldr	r2, [r7, #16]!
   13ce8:	ldr	r5, [r7, #4]
   13cec:	orrs	r2, r2, r5
   13cf0:	bne	13e74 <__assert_fail@plt+0x2dd4>
   13cf4:	ldr	r0, [r6, #4]
   13cf8:	mvn	r3, #0
   13cfc:	str	r0, [r4, #4]
   13d00:	str	r9, [sl]
   13d04:	str	r9, [sl, #4]
   13d08:	mvn	r0, #0
   13d0c:	b	13c6c <__assert_fail@plt+0x2bcc>
   13d10:	ldrb	r8, [r6, #8]
   13d14:	str	r9, [sl]
   13d18:	str	r9, [sl, #4]
   13d1c:	ldr	r0, [r6, #4]
   13d20:	str	r0, [r4, #4]
   13d24:	mov	r0, r8
   13d28:	sub	sp, fp, #28
   13d2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d30:	eor	r1, r0, r9
   13d34:	eor	r2, r3, r9
   13d38:	orrs	r1, r1, r2
   13d3c:	beq	13d70 <__assert_fail@plt+0x2cd0>
   13d40:	adds	r8, r0, #1
   13d44:	adc	r1, r3, #0
   13d48:	b	13d78 <__assert_fail@plt+0x2cd8>
   13d4c:	cmp	r1, #0
   13d50:	beq	13da4 <__assert_fail@plt+0x2d04>
   13d54:	ldr	r0, [r6, #8]
   13d58:	cmp	r0, #10
   13d5c:	beq	13d9c <__assert_fail@plt+0x2cfc>
   13d60:	cmp	r0, #6
   13d64:	bne	13da4 <__assert_fail@plt+0x2d04>
   13d68:	mov	r0, #0
   13d6c:	b	13da0 <__assert_fail@plt+0x2d00>
   13d70:	ldrb	r8, [r6, #8]
   13d74:	mov	r1, #0
   13d78:	str	r8, [sl]
   13d7c:	str	r1, [sl, #4]
   13d80:	ldrb	r0, [r6, #9]
   13d84:	eor	r0, r8, r0
   13d88:	orrs	r0, r0, r1
   13d8c:	beq	13eb4 <__assert_fail@plt+0x2e14>
   13d90:	mov	r0, r8
   13d94:	sub	sp, fp, #28
   13d98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d9c:	mov	r0, #1
   13da0:	str	r0, [r1]
   13da4:	ldr	r1, [sl, #4]
   13da8:	ldr	r8, [sl]
   13dac:	eor	r0, r1, r9
   13db0:	eor	r1, r8, r9
   13db4:	orrs	r0, r1, r0
   13db8:	bne	13e10 <__assert_fail@plt+0x2d70>
   13dbc:	ldr	r5, [r6, #8]
   13dc0:	mov	r8, #0
   13dc4:	uxtb	r1, r8
   13dc8:	mov	r0, r5
   13dcc:	bl	14348 <__assert_fail@plt+0x32a8>
   13dd0:	cmp	r0, #0
   13dd4:	bne	13e04 <__assert_fail@plt+0x2d64>
   13dd8:	add	r8, r8, #1
   13ddc:	cmp	r8, #256	; 0x100
   13de0:	bne	13dc4 <__assert_fail@plt+0x2d24>
   13de4:	movw	r0, #39273	; 0x9969
   13de8:	movw	r1, #36888	; 0x9018
   13dec:	movw	r3, #39285	; 0x9975
   13df0:	movw	r2, #1079	; 0x437
   13df4:	movt	r0, #1
   13df8:	movt	r1, #1
   13dfc:	movt	r3, #1
   13e00:	bl	110a0 <__assert_fail@plt>
   13e04:	mov	r1, #0
   13e08:	str	r8, [sl]
   13e0c:	str	r1, [sl, #4]
   13e10:	ldr	r5, [r6, #8]
   13e14:	uxtb	r1, r8
   13e18:	mov	r0, r5
   13e1c:	bl	14348 <__assert_fail@plt+0x32a8>
   13e20:	cmp	r0, #0
   13e24:	beq	13ed4 <__assert_fail@plt+0x2e34>
   13e28:	mov	r7, r8
   13e2c:	add	r7, r7, #1
   13e30:	cmp	r7, #255	; 0xff
   13e34:	bgt	13eb4 <__assert_fail@plt+0x2e14>
   13e38:	uxtb	r1, r7
   13e3c:	mov	r0, r5
   13e40:	bl	14348 <__assert_fail@plt+0x32a8>
   13e44:	cmp	r0, #0
   13e48:	beq	13e2c <__assert_fail@plt+0x2d8c>
   13e4c:	asr	r1, r7, #31
   13e50:	str	r7, [sl]
   13e54:	str	r1, [sl, #4]
   13e58:	mov	r0, r8
   13e5c:	sub	sp, fp, #28
   13e60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e64:	mvn	r8, #0
   13e68:	mov	r0, r8
   13e6c:	sub	sp, fp, #28
   13e70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e74:	eor	r1, r0, r9
   13e78:	eor	r2, r3, r9
   13e7c:	orrs	r1, r1, r2
   13e80:	moveq	r0, #0
   13e84:	moveq	r3, #0
   13e88:	streq	r0, [sl]
   13e8c:	streq	r0, [sl, #4]
   13e90:	adds	r0, r0, #1
   13e94:	adc	r1, r3, #0
   13e98:	strd	r0, [sl]
   13e9c:	ldrd	r2, [r7]
   13ea0:	ldrb	r8, [r6, #8]
   13ea4:	eor	r1, r1, r3
   13ea8:	eor	r0, r0, r2
   13eac:	orrs	r0, r0, r1
   13eb0:	bne	13d90 <__assert_fail@plt+0x2cf0>
   13eb4:	ldr	r0, [r6, #4]
   13eb8:	str	r0, [r4, #4]
   13ebc:	str	r9, [sl]
   13ec0:	str	r9, [sl, #4]
   13ec4:	mov	r0, r8
   13ec8:	sub	sp, fp, #28
   13ecc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ed0:	bl	11088 <abort@plt>
   13ed4:	movw	r0, #39344	; 0x99b0
   13ed8:	movw	r1, #36888	; 0x9018
   13edc:	movw	r3, #39285	; 0x9975
   13ee0:	movw	r2, #1082	; 0x43a
   13ee4:	movt	r0, #1
   13ee8:	movt	r1, #1
   13eec:	movt	r3, #1
   13ef0:	bl	110a0 <__assert_fail@plt>
   13ef4:	push	{r4, r5, r6, sl, fp, lr}
   13ef8:	add	fp, sp, #16
   13efc:	mov	r6, r0
   13f00:	mov	r2, r1
   13f04:	mov	r0, #0
   13f08:	mov	r1, r6
   13f0c:	bl	1655c <__assert_fail@plt+0x54bc>
   13f10:	cmp	r0, #0
   13f14:	beq	13f84 <__assert_fail@plt+0x2ee4>
   13f18:	cmn	r0, #1
   13f1c:	beq	13f88 <__assert_fail@plt+0x2ee8>
   13f20:	and	ip, r0, #1
   13f24:	mov	r1, #0
   13f28:	cmp	r0, #1
   13f2c:	beq	13f68 <__assert_fail@plt+0x2ec8>
   13f30:	movw	r2, #54128	; 0xd370
   13f34:	sub	r3, r0, ip
   13f38:	mov	r1, #0
   13f3c:	movt	r2, #2
   13f40:	mov	r4, r6
   13f44:	ldrb	r5, [r4, r1]!
   13f48:	add	r1, r1, #2
   13f4c:	cmp	r3, r1
   13f50:	ldrb	r5, [r2, r5]
   13f54:	strb	r5, [r4]
   13f58:	ldrb	r5, [r4, #1]
   13f5c:	ldrb	r5, [r2, r5]
   13f60:	strb	r5, [r4, #1]
   13f64:	bne	13f40 <__assert_fail@plt+0x2ea0>
   13f68:	cmp	ip, #0
   13f6c:	beq	13f84 <__assert_fail@plt+0x2ee4>
   13f70:	ldrb	r2, [r6, r1]
   13f74:	movw	r3, #54128	; 0xd370
   13f78:	movt	r3, #2
   13f7c:	ldrb	r2, [r3, r2]
   13f80:	strb	r2, [r6, r1]
   13f84:	pop	{r4, r5, r6, sl, fp, pc}
   13f88:	bl	10fe0 <__errno_location@plt>
   13f8c:	movw	r1, #39262	; 0x995e
   13f90:	ldr	r4, [r0]
   13f94:	mov	r0, #0
   13f98:	mov	r2, #5
   13f9c:	movt	r1, #1
   13fa0:	bl	10ed8 <dcgettext@plt>
   13fa4:	mov	r2, r0
   13fa8:	mov	r0, #1
   13fac:	mov	r1, r4
   13fb0:	bl	10f44 <error@plt>
   13fb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fb8:	add	fp, sp, #28
   13fbc:	sub	sp, sp, #12
   13fc0:	mov	r5, r0
   13fc4:	mov	r4, r1
   13fc8:	add	r0, r1, #1
   13fcc:	mov	r1, #4
   13fd0:	bl	16d50 <__assert_fail@plt+0x5cb0>
   13fd4:	mov	sl, r0
   13fd8:	cmp	r4, #0
   13fdc:	beq	140f8 <__assert_fail@plt+0x3058>
   13fe0:	movw	r7, #37805	; 0x93ad
   13fe4:	add	r9, sp, #7
   13fe8:	mov	r6, sl
   13fec:	movt	r7, #1
   13ff0:	ldrb	r8, [r5]
   13ff4:	sub	r0, r8, #7
   13ff8:	cmp	r0, #6
   13ffc:	bls	14034 <__assert_fail@plt+0x2f94>
   14000:	b	14064 <__assert_fail@plt+0x2fc4>
   14004:	movw	r1, #37825	; 0x93c1
   14008:	movt	r1, #1
   1400c:	mov	r0, r6
   14010:	bl	10ecc <stpcpy@plt>
   14014:	mov	r6, r0
   14018:	add	r5, r5, #1
   1401c:	subs	r4, r4, #1
   14020:	beq	140f8 <__assert_fail@plt+0x3058>
   14024:	ldrb	r8, [r5]
   14028:	sub	r0, r8, #7
   1402c:	cmp	r0, #6
   14030:	bhi	14064 <__assert_fail@plt+0x2fc4>
   14034:	add	r1, pc, #0
   14038:	ldr	pc, [r1, r0, lsl #2]
   1403c:	andeq	r4, r1, r8, asr r0
   14040:	andeq	r4, r1, r8, lsr #1
   14044:	strheq	r4, [r1], -r4	; <UNPREDICTABLE>
   14048:	andeq	r4, r1, r0, asr #1
   1404c:	andeq	r4, r1, r4
   14050:	andeq	r4, r1, ip, asr #1
   14054:	ldrdeq	r4, [r1], -r8
   14058:	movw	r1, #37807	; 0x93af
   1405c:	movt	r1, #1
   14060:	b	1400c <__assert_fail@plt+0x2f6c>
   14064:	cmp	r8, #92	; 0x5c
   14068:	mov	r1, r7
   1406c:	beq	1400c <__assert_fail@plt+0x2f6c>
   14070:	bl	10fa4 <__ctype_b_loc@plt>
   14074:	ldr	r0, [r0]
   14078:	add	r0, r0, r8, lsl #1
   1407c:	ldrb	r0, [r0, #1]
   14080:	tst	r0, #64	; 0x40
   14084:	bne	140e4 <__assert_fail@plt+0x3044>
   14088:	movw	r3, #37828	; 0x93c4
   1408c:	mov	r0, r9
   14090:	mov	r1, #1
   14094:	mov	r2, #5
   14098:	str	r8, [sp]
   1409c:	movt	r3, #1
   140a0:	bl	10fec <__sprintf_chk@plt>
   140a4:	b	140f0 <__assert_fail@plt+0x3050>
   140a8:	movw	r1, #37810	; 0x93b2
   140ac:	movt	r1, #1
   140b0:	b	1400c <__assert_fail@plt+0x2f6c>
   140b4:	movw	r1, #37822	; 0x93be
   140b8:	movt	r1, #1
   140bc:	b	1400c <__assert_fail@plt+0x2f6c>
   140c0:	movw	r1, #37816	; 0x93b8
   140c4:	movt	r1, #1
   140c8:	b	1400c <__assert_fail@plt+0x2f6c>
   140cc:	movw	r1, #37813	; 0x93b5
   140d0:	movt	r1, #1
   140d4:	b	1400c <__assert_fail@plt+0x2f6c>
   140d8:	movw	r1, #37819	; 0x93bb
   140dc:	movt	r1, #1
   140e0:	b	1400c <__assert_fail@plt+0x2f6c>
   140e4:	mov	r0, #0
   140e8:	strb	r0, [sp, #8]
   140ec:	strb	r8, [sp, #7]
   140f0:	mov	r1, r9
   140f4:	b	1400c <__assert_fail@plt+0x2f6c>
   140f8:	mov	r0, sl
   140fc:	sub	sp, fp, #28
   14100:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14104:	nop	{0}
   14108:	nop	{0}
   1410c:	nop	{0}
   14110:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14114:	add	fp, sp, #28
   14118:	sub	sp, sp, #4
   1411c:	vpush	{d8-d10}
   14120:	sub	sp, sp, #8
   14124:	mov	r2, #0
   14128:	vldr	d8, [pc, #528]	; 14340 <__assert_fail@plt+0x32a0>
   1412c:	vmov.i32	d9, #2	; 0x00000002
   14130:	vmov.i32	d10, #4	; 0x00000004
   14134:	mov	r1, #0
   14138:	mov	ip, #1
   1413c:	mov	r8, #0
   14140:	mov	r6, #0
   14144:	str	r0, [sp, #4]
   14148:	strb	r2, [r0, #34]	; 0x22
   1414c:	str	r2, [r0, #24]
   14150:	strh	r2, [r0, #32]
   14154:	str	r1, [sp]
   14158:	ldr	r7, [r0]
   1415c:	ldr	r7, [r7, #4]
   14160:	cmp	r7, #0
   14164:	beq	142ec <__assert_fail@plt+0x324c>
   14168:	ldr	r2, [r7]
   1416c:	cmp	r2, #4
   14170:	bhi	14304 <__assert_fail@plt+0x3264>
   14174:	add	r1, pc, #8
   14178:	mov	r5, #0
   1417c:	mov	r4, #1
   14180:	ldr	pc, [r1, r2, lsl #2]
   14184:	andeq	r4, r1, r0, lsr #5
   14188:	muleq	r1, r8, r1
   1418c:	andeq	r4, r1, r4, ror #3
   14190:	andeq	r4, r1, r4, lsr r2
   14194:			; <UNDEFINED> instruction: 0x000141b8
   14198:	ldrb	r2, [r7, #8]
   1419c:	ldrb	r1, [r7, #9]
   141a0:	cmp	r1, r2
   141a4:	bcc	14308 <__assert_fail@plt+0x3268>
   141a8:	sub	r1, r1, r2
   141ac:	add	r4, r1, #1
   141b0:	asr	r5, r4, #31
   141b4:	b	142a0 <__assert_fail@plt+0x3200>
   141b8:	ldrd	r4, [r7, #16]
   141bc:	orrs	r1, r4, r5
   141c0:	bne	142a0 <__assert_fail@plt+0x3200>
   141c4:	ldr	r1, [sp]
   141c8:	mov	r4, #0
   141cc:	mov	r5, #0
   141d0:	add	r1, r1, #1
   141d4:	str	r1, [sp]
   141d8:	str	r1, [r0, #24]
   141dc:	str	r7, [r0, #28]
   141e0:	b	142a0 <__assert_fail@plt+0x3200>
   141e4:	strb	ip, [r0, #33]	; 0x21
   141e8:	mov	sl, #0
   141ec:	mov	r4, #0
   141f0:	mov	r5, #0
   141f4:	ldr	r9, [r7, #8]
   141f8:	uxtb	r1, sl
   141fc:	mov	r0, r9
   14200:	bl	14348 <__assert_fail@plt+0x32a8>
   14204:	adds	r4, r4, r0
   14208:	add	sl, sl, #1
   1420c:	adc	r5, r5, #0
   14210:	cmp	sl, #256	; 0x100
   14214:	bne	141f8 <__assert_fail@plt+0x3158>
   14218:	cmp	r9, #6
   1421c:	beq	14298 <__assert_fail@plt+0x31f8>
   14220:	ldr	r0, [sp, #4]
   14224:	cmp	r9, #10
   14228:	mov	ip, #1
   1422c:	strbne	ip, [r0, #34]	; 0x22
   14230:	b	142a0 <__assert_fail@plt+0x3200>
   14234:	ldrb	r1, [r7, #8]
   14238:	vmov.i32	q8, #0	; 0x00000000
   1423c:	vorr	d19, d8, d8
   14240:	mov	r2, #256	; 0x100
   14244:	vdup.32	d18, r1
   14248:	vadd.i32	d20, d19, d9
   1424c:	vceq.i32	d21, d19, d18
   14250:	add	r1, pc, #216	; 0xd8
   14254:	vadd.i32	d19, d19, d10
   14258:	subs	r2, r2, #4
   1425c:	vld1.64	{d22-d23}, [r1 :128]
   14260:	vmovl.u32	q12, d21
   14264:	vceq.i32	d20, d20, d18
   14268:	vmovl.u32	q10, d20
   1426c:	vand	q12, q12, q11
   14270:	vand	q10, q10, q11
   14274:	vadd.i64	q8, q8, q12
   14278:	vadd.i64	q8, q8, q10
   1427c:	bne	14248 <__assert_fail@plt+0x31a8>
   14280:	vorr	d18, d17, d17
   14284:	strb	ip, [r0, #32]
   14288:	vadd.i64	q8, q8, q9
   1428c:	vmov.32	r5, d16[1]
   14290:	vmov.32	r4, d16[0]
   14294:	b	142a0 <__assert_fail@plt+0x3200>
   14298:	ldr	r0, [sp, #4]
   1429c:	mov	ip, #1
   142a0:	adds	r3, r4, r8
   142a4:	adc	r1, r5, r6
   142a8:	subs	r2, r3, r8
   142ac:	sbcs	r2, r1, r6
   142b0:	bcc	142c8 <__assert_fail@plt+0x3228>
   142b4:	and	r2, r3, r1
   142b8:	mov	r8, r3
   142bc:	mov	r6, r1
   142c0:	cmn	r2, #1
   142c4:	bne	1415c <__assert_fail@plt+0x30bc>
   142c8:	movw	r1, #38896	; 0x97f0
   142cc:	mov	r0, #0
   142d0:	mov	r2, #5
   142d4:	movt	r1, #1
   142d8:	bl	10ed8 <dcgettext@plt>
   142dc:	mov	r2, r0
   142e0:	mov	r0, #1
   142e4:	mov	r1, #0
   142e8:	bl	10f44 <error@plt>
   142ec:	str	r8, [r0, #16]
   142f0:	str	r6, [r0, #20]
   142f4:	sub	sp, fp, #56	; 0x38
   142f8:	vpop	{d8-d10}
   142fc:	add	sp, sp, #4
   14300:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14304:	bl	11088 <abort@plt>
   14308:	movw	r0, #38810	; 0x979a
   1430c:	movw	r1, #36888	; 0x9018
   14310:	movw	r3, #38856	; 0x97c8
   14314:	movw	r2, #1265	; 0x4f1
   14318:	movt	r0, #1
   1431c:	movt	r1, #1
   14320:	movt	r3, #1
   14324:	bl	110a0 <__assert_fail@plt>
   14328:	nop	{0}
   1432c:	nop	{0}
   14330:	andeq	r0, r0, r1
   14334:	andeq	r0, r0, r0
   14338:	andeq	r0, r0, r1
	...
   14344:	andeq	r0, r0, r1
   14348:	push	{r4, r5, fp, lr}
   1434c:	add	fp, sp, #8
   14350:	cmp	r0, #11
   14354:	bhi	14408 <__assert_fail@plt+0x3368>
   14358:	mov	r4, r1
   1435c:	add	r1, pc, #4
   14360:	mov	r5, #8
   14364:	ldr	pc, [r1, r0, lsl #2]
   14368:	andeq	r4, r1, ip, ror #7
   1436c:	muleq	r1, r8, r3
   14370:			; <UNDEFINED> instruction: 0x000143b0
   14374:	andeq	r4, r1, r0, asr #7
   14378:	andeq	r4, r1, r8, lsr #7
   1437c:	ldrdeq	r4, [r1], -r0
   14380:	ldrdeq	r4, [r1], -r8
   14384:	andeq	r4, r1, r8, asr #7
   14388:	andeq	r4, r1, r0, ror #7
   1438c:			; <UNDEFINED> instruction: 0x000143b8
   14390:	andeq	r4, r1, r8, ror #7
   14394:	andeq	r4, r1, r0, lsr #7
   14398:	mov	r5, #1024	; 0x400
   1439c:	b	143ec <__assert_fail@plt+0x334c>
   143a0:	mov	r5, #4096	; 0x1000
   143a4:	b	143ec <__assert_fail@plt+0x334c>
   143a8:	mov	r5, #2048	; 0x800
   143ac:	b	143ec <__assert_fail@plt+0x334c>
   143b0:	mov	r5, #1
   143b4:	b	143ec <__assert_fail@plt+0x334c>
   143b8:	mov	r5, #8192	; 0x2000
   143bc:	b	143ec <__assert_fail@plt+0x334c>
   143c0:	mov	r5, #2
   143c4:	b	143ec <__assert_fail@plt+0x334c>
   143c8:	mov	r5, #16384	; 0x4000
   143cc:	b	143ec <__assert_fail@plt+0x334c>
   143d0:	mov	r5, #32768	; 0x8000
   143d4:	b	143ec <__assert_fail@plt+0x334c>
   143d8:	mov	r5, #512	; 0x200
   143dc:	b	143ec <__assert_fail@plt+0x334c>
   143e0:	mov	r5, #4
   143e4:	b	143ec <__assert_fail@plt+0x334c>
   143e8:	mov	r5, #256	; 0x100
   143ec:	bl	10fa4 <__ctype_b_loc@plt>
   143f0:	ldr	r0, [r0]
   143f4:	add	r0, r0, r4, lsl #1
   143f8:	ldrh	r0, [r0]
   143fc:	ands	r0, r0, r5
   14400:	movwne	r0, #1
   14404:	pop	{r4, r5, fp, pc}
   14408:	bl	11088 <abort@plt>
   1440c:	movw	r1, #54392	; 0xd478
   14410:	movt	r1, #2
   14414:	str	r0, [r1, #4]
   14418:	bx	lr
   1441c:	movw	r1, #54392	; 0xd478
   14420:	movt	r1, #2
   14424:	strb	r0, [r1]
   14428:	bx	lr
   1442c:	push	{r4, r5, r6, sl, fp, lr}
   14430:	add	fp, sp, #16
   14434:	sub	sp, sp, #8
   14438:	movw	r0, #45404	; 0xb15c
   1443c:	movt	r0, #2
   14440:	ldr	r0, [r0]
   14444:	bl	17f8c <__assert_fail@plt+0x6eec>
   14448:	cmp	r0, #0
   1444c:	beq	14474 <__assert_fail@plt+0x33d4>
   14450:	movw	r5, #54392	; 0xd478
   14454:	movt	r5, #2
   14458:	ldrb	r0, [r5]
   1445c:	cmp	r0, #0
   14460:	beq	144a0 <__assert_fail@plt+0x3400>
   14464:	bl	10fe0 <__errno_location@plt>
   14468:	ldr	r0, [r0]
   1446c:	cmp	r0, #32
   14470:	bne	144a0 <__assert_fail@plt+0x3400>
   14474:	movw	r0, #45392	; 0xb150
   14478:	movt	r0, #2
   1447c:	ldr	r0, [r0]
   14480:	bl	17f8c <__assert_fail@plt+0x6eec>
   14484:	cmp	r0, #0
   14488:	subeq	sp, fp, #16
   1448c:	popeq	{r4, r5, r6, sl, fp, pc}
   14490:	movw	r0, #45300	; 0xb0f4
   14494:	movt	r0, #2
   14498:	ldr	r0, [r0]
   1449c:	bl	10e90 <_exit@plt>
   144a0:	movw	r1, #36850	; 0x8ff2
   144a4:	mov	r0, #0
   144a8:	mov	r2, #5
   144ac:	movt	r1, #1
   144b0:	bl	10ed8 <dcgettext@plt>
   144b4:	ldr	r6, [r5, #4]
   144b8:	mov	r4, r0
   144bc:	bl	10fe0 <__errno_location@plt>
   144c0:	ldr	r5, [r0]
   144c4:	cmp	r6, #0
   144c8:	bne	144e4 <__assert_fail@plt+0x3444>
   144cc:	movw	r2, #39587	; 0x9aa3
   144d0:	mov	r0, #0
   144d4:	mov	r1, r5
   144d8:	mov	r3, r4
   144dc:	movt	r2, #1
   144e0:	b	14504 <__assert_fail@plt+0x3464>
   144e4:	mov	r0, r6
   144e8:	bl	161bc <__assert_fail@plt+0x511c>
   144ec:	movw	r2, #39583	; 0x9a9f
   144f0:	mov	r3, r0
   144f4:	str	r4, [sp]
   144f8:	mov	r0, #0
   144fc:	mov	r1, r5
   14500:	movt	r2, #1
   14504:	bl	10f44 <error@plt>
   14508:	movw	r0, #45300	; 0xb0f4
   1450c:	movt	r0, #2
   14510:	ldr	r0, [r0]
   14514:	bl	10e90 <_exit@plt>
   14518:	b	10e60 <posix_fadvise64@plt>
   1451c:	cmp	r0, #0
   14520:	bxeq	lr
   14524:	push	{r4, sl, fp, lr}
   14528:	add	fp, sp, #8
   1452c:	sub	sp, sp, #16
   14530:	mov	r4, r1
   14534:	bl	1101c <fileno@plt>
   14538:	mov	r1, #0
   1453c:	mov	r2, #0
   14540:	mov	r3, #0
   14544:	str	r1, [sp]
   14548:	stmib	sp, {r1, r4}
   1454c:	bl	10e60 <posix_fadvise64@plt>
   14550:	sub	sp, fp, #8
   14554:	pop	{r4, sl, fp, pc}
   14558:	push	{r4, r5, r6, sl, fp, lr}
   1455c:	add	fp, sp, #16
   14560:	mov	r4, r0
   14564:	bl	10fe0 <__errno_location@plt>
   14568:	ldr	r6, [r0]
   1456c:	mov	r5, r0
   14570:	mov	r0, r4
   14574:	bl	10e84 <free@plt>
   14578:	str	r6, [r5]
   1457c:	pop	{r4, r5, r6, sl, fp, pc}
   14580:	push	{r4, r5, fp, lr}
   14584:	add	fp, sp, #8
   14588:	cmp	r0, #0
   1458c:	beq	14620 <__assert_fail@plt+0x3580>
   14590:	mov	r1, #47	; 0x2f
   14594:	mov	r4, r0
   14598:	bl	11058 <strrchr@plt>
   1459c:	cmp	r0, #0
   145a0:	mov	r5, r4
   145a4:	addne	r5, r0, #1
   145a8:	sub	r0, r5, r4
   145ac:	cmp	r0, #7
   145b0:	blt	14604 <__assert_fail@plt+0x3564>
   145b4:	movw	r1, #39646	; 0x9ade
   145b8:	sub	r0, r5, #7
   145bc:	mov	r2, #7
   145c0:	movt	r1, #1
   145c4:	bl	1107c <strncmp@plt>
   145c8:	cmp	r0, #0
   145cc:	bne	14604 <__assert_fail@plt+0x3564>
   145d0:	movw	r1, #39654	; 0x9ae6
   145d4:	mov	r0, r5
   145d8:	mov	r2, #3
   145dc:	movt	r1, #1
   145e0:	bl	1107c <strncmp@plt>
   145e4:	cmp	r0, #0
   145e8:	beq	145f4 <__assert_fail@plt+0x3554>
   145ec:	mov	r4, r5
   145f0:	b	14604 <__assert_fail@plt+0x3564>
   145f4:	movw	r0, #45376	; 0xb140
   145f8:	add	r4, r5, #3
   145fc:	movt	r0, #2
   14600:	str	r4, [r0]
   14604:	movw	r0, #45380	; 0xb144
   14608:	movt	r0, #2
   1460c:	str	r4, [r0]
   14610:	movw	r0, #54400	; 0xd480
   14614:	movt	r0, #2
   14618:	str	r4, [r0]
   1461c:	pop	{r4, r5, fp, pc}
   14620:	movw	r0, #45392	; 0xb150
   14624:	mov	r1, #55	; 0x37
   14628:	mov	r2, #1
   1462c:	movt	r0, #2
   14630:	ldr	r3, [r0]
   14634:	movw	r0, #39590	; 0x9aa6
   14638:	movt	r0, #1
   1463c:	bl	10f08 <fwrite@plt>
   14640:	bl	11088 <abort@plt>
   14644:	push	{r4, r5, r6, sl, fp, lr}
   14648:	add	fp, sp, #16
   1464c:	mov	r4, r0
   14650:	movw	r0, #54408	; 0xd488
   14654:	movt	r0, #2
   14658:	cmp	r4, #0
   1465c:	moveq	r4, r0
   14660:	bl	10fe0 <__errno_location@plt>
   14664:	ldr	r6, [r0]
   14668:	mov	r5, r0
   1466c:	mov	r0, r4
   14670:	mov	r1, #48	; 0x30
   14674:	bl	170e0 <__assert_fail@plt+0x6040>
   14678:	str	r6, [r5]
   1467c:	pop	{r4, r5, r6, sl, fp, pc}
   14680:	movw	r1, #54408	; 0xd488
   14684:	cmp	r0, #0
   14688:	movt	r1, #2
   1468c:	movne	r1, r0
   14690:	ldr	r0, [r1]
   14694:	bx	lr
   14698:	movw	r2, #54408	; 0xd488
   1469c:	cmp	r0, #0
   146a0:	movt	r2, #2
   146a4:	movne	r2, r0
   146a8:	str	r1, [r2]
   146ac:	bx	lr
   146b0:	movw	r3, #54408	; 0xd488
   146b4:	cmp	r0, #0
   146b8:	and	r2, r2, #1
   146bc:	movt	r3, #2
   146c0:	movne	r3, r0
   146c4:	ubfx	r0, r1, #5, #3
   146c8:	and	r1, r1, #31
   146cc:	add	ip, r3, r0, lsl #2
   146d0:	mov	r0, #1
   146d4:	ldr	r3, [ip, #8]
   146d8:	and	r0, r0, r3, lsr r1
   146dc:	eor	r2, r0, r2
   146e0:	eor	r1, r3, r2, lsl r1
   146e4:	str	r1, [ip, #8]
   146e8:	bx	lr
   146ec:	movw	r2, #54408	; 0xd488
   146f0:	cmp	r0, #0
   146f4:	movt	r2, #2
   146f8:	movne	r2, r0
   146fc:	ldr	r0, [r2, #4]
   14700:	str	r1, [r2, #4]
   14704:	bx	lr
   14708:	push	{fp, lr}
   1470c:	mov	fp, sp
   14710:	movw	r3, #54408	; 0xd488
   14714:	cmp	r0, #0
   14718:	movt	r3, #2
   1471c:	movne	r3, r0
   14720:	cmp	r1, #0
   14724:	mov	r0, #10
   14728:	cmpne	r2, #0
   1472c:	str	r0, [r3]
   14730:	bne	14738 <__assert_fail@plt+0x3698>
   14734:	bl	11088 <abort@plt>
   14738:	str	r1, [r3, #40]	; 0x28
   1473c:	str	r2, [r3, #44]	; 0x2c
   14740:	pop	{fp, pc}
   14744:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14748:	add	fp, sp, #28
   1474c:	sub	sp, sp, #20
   14750:	mov	r7, r0
   14754:	ldr	r0, [fp, #8]
   14758:	movw	r5, #54408	; 0xd488
   1475c:	mov	r8, r3
   14760:	mov	r9, r2
   14764:	mov	sl, r1
   14768:	movt	r5, #2
   1476c:	cmp	r0, #0
   14770:	movne	r5, r0
   14774:	bl	10fe0 <__errno_location@plt>
   14778:	ldr	r2, [r5, #40]	; 0x28
   1477c:	ldr	r3, [r5, #44]	; 0x2c
   14780:	mov	r4, r0
   14784:	ldm	r5, {r0, r1}
   14788:	add	r5, r5, #8
   1478c:	ldr	r6, [r4]
   14790:	stm	sp, {r0, r1, r5}
   14794:	mov	r0, r7
   14798:	mov	r1, sl
   1479c:	str	r2, [sp, #12]
   147a0:	str	r3, [sp, #16]
   147a4:	mov	r2, r9
   147a8:	mov	r3, r8
   147ac:	bl	147bc <__assert_fail@plt+0x371c>
   147b0:	str	r6, [r4]
   147b4:	sub	sp, fp, #28
   147b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147c0:	add	fp, sp, #28
   147c4:	sub	sp, sp, #156	; 0x9c
   147c8:	str	r0, [fp, #-84]	; 0xffffffac
   147cc:	add	r0, r2, #1
   147d0:	mov	r6, r1
   147d4:	mov	r7, r3
   147d8:	str	r2, [fp, #-80]	; 0xffffffb0
   147dc:	str	r0, [sp, #80]	; 0x50
   147e0:	ldr	r0, [fp, #12]
   147e4:	and	r1, r0, #1
   147e8:	str	r1, [sp, #36]	; 0x24
   147ec:	and	r1, r0, #4
   147f0:	str	r1, [sp, #32]
   147f4:	ubfx	r8, r0, #1, #1
   147f8:	bl	10f20 <__ctype_get_mb_cur_max@plt>
   147fc:	str	r0, [sp, #40]	; 0x28
   14800:	ldr	r0, [fp, #24]
   14804:	ldr	r4, [fp, #8]
   14808:	mov	r1, #0
   1480c:	str	r1, [fp, #-52]	; 0xffffffcc
   14810:	mov	r1, #0
   14814:	str	r1, [sp, #60]	; 0x3c
   14818:	mov	r1, #1
   1481c:	str	r1, [sp, #84]	; 0x54
   14820:	str	r0, [sp, #76]	; 0x4c
   14824:	ldr	r0, [fp, #20]
   14828:	str	r0, [sp, #72]	; 0x48
   1482c:	mov	r0, #0
   14830:	str	r0, [sp, #56]	; 0x38
   14834:	mov	r0, #0
   14838:	str	r0, [fp, #-88]	; 0xffffffa8
   1483c:	mov	r0, #0
   14840:	str	r0, [fp, #-72]	; 0xffffffb8
   14844:	mov	r0, #0
   14848:	cmp	r4, #10
   1484c:	bhi	15b68 <__assert_fail@plt+0x4ac8>
   14850:	add	r1, pc, #24
   14854:	ldr	ip, [fp, #-84]	; 0xffffffac
   14858:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1485c:	mov	r5, r6
   14860:	mov	r9, #0
   14864:	mov	r2, #1
   14868:	mov	r3, #0
   1486c:	ldr	pc, [r1, r4, lsl #2]
   14870:	andeq	r4, r1, r8, lsr r9
   14874:	andeq	r4, r1, r4, ror r9
   14878:	andeq	r4, r1, r8, asr #18
   1487c:	andeq	r4, r1, r0, lsr r9
   14880:	andeq	r4, r1, r8, ror #18
   14884:	andeq	r4, r1, ip, asr #19
   14888:	andeq	r4, r1, r8, asr r9
   1488c:	andeq	r4, r1, r4, asr #24
   14890:	muleq	r1, ip, r8
   14894:	muleq	r1, ip, r8
   14898:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1489c:	movw	r6, #39736	; 0x9b38
   148a0:	mov	r0, #0
   148a4:	mov	r2, #5
   148a8:	movt	r6, #1
   148ac:	mov	r1, r6
   148b0:	bl	10ed8 <dcgettext@plt>
   148b4:	cmp	r0, r6
   148b8:	str	r0, [sp, #72]	; 0x48
   148bc:	bne	14aac <__assert_fail@plt+0x3a0c>
   148c0:	bl	181b0 <__assert_fail@plt+0x7110>
   148c4:	ldrb	r1, [r0]
   148c8:	and	r1, r1, #223	; 0xdf
   148cc:	cmp	r1, #71	; 0x47
   148d0:	beq	14a2c <__assert_fail@plt+0x398c>
   148d4:	cmp	r1, #85	; 0x55
   148d8:	bne	14a90 <__assert_fail@plt+0x39f0>
   148dc:	ldrb	r1, [r0, #1]
   148e0:	and	r1, r1, #223	; 0xdf
   148e4:	cmp	r1, #84	; 0x54
   148e8:	bne	14a90 <__assert_fail@plt+0x39f0>
   148ec:	ldrb	r1, [r0, #2]
   148f0:	and	r1, r1, #223	; 0xdf
   148f4:	cmp	r1, #70	; 0x46
   148f8:	bne	14a90 <__assert_fail@plt+0x39f0>
   148fc:	ldrb	r1, [r0, #3]
   14900:	cmp	r1, #45	; 0x2d
   14904:	bne	14a90 <__assert_fail@plt+0x39f0>
   14908:	ldrb	r1, [r0, #4]
   1490c:	cmp	r1, #56	; 0x38
   14910:	bne	14a90 <__assert_fail@plt+0x39f0>
   14914:	ldrb	r0, [r0, #5]
   14918:	cmp	r0, #0
   1491c:	movw	r0, #39738	; 0x9b3a
   14920:	movt	r0, #1
   14924:	str	r0, [sp, #72]	; 0x48
   14928:	bne	14a90 <__assert_fail@plt+0x39f0>
   1492c:	b	14aac <__assert_fail@plt+0x3a0c>
   14930:	mov	r0, #1
   14934:	b	14974 <__assert_fail@plt+0x38d4>
   14938:	mov	r4, #0
   1493c:	mov	r9, #0
   14940:	mov	r2, r0
   14944:	b	149c4 <__assert_fail@plt+0x3924>
   14948:	tst	r8, #1
   1494c:	bne	14974 <__assert_fail@plt+0x38d4>
   14950:	mov	r2, r0
   14954:	b	1499c <__assert_fail@plt+0x38fc>
   14958:	mov	r0, #1
   1495c:	mov	r9, #0
   14960:	mov	r4, #5
   14964:	b	149e0 <__assert_fail@plt+0x3940>
   14968:	mov	r2, #1
   1496c:	tst	r8, #1
   14970:	beq	1499c <__assert_fail@plt+0x38fc>
   14974:	mov	r1, #1
   14978:	mov	r9, #0
   1497c:	mov	r4, #2
   14980:	mov	r2, r0
   14984:	mov	r3, #1
   14988:	str	r1, [fp, #-72]	; 0xffffffb8
   1498c:	movw	r1, #37532	; 0x929c
   14990:	movt	r1, #1
   14994:	str	r1, [fp, #-88]	; 0xffffffa8
   14998:	b	14c44 <__assert_fail@plt+0x3ba4>
   1499c:	cmp	r5, #0
   149a0:	mov	r9, #1
   149a4:	mov	r4, #2
   149a8:	movne	r0, #39	; 0x27
   149ac:	strbne	r0, [ip]
   149b0:	movw	r0, #37532	; 0x929c
   149b4:	movt	r0, #1
   149b8:	str	r0, [fp, #-88]	; 0xffffffa8
   149bc:	mov	r0, #1
   149c0:	str	r0, [fp, #-72]	; 0xffffffb8
   149c4:	mov	r3, #0
   149c8:	b	14c44 <__assert_fail@plt+0x3ba4>
   149cc:	mov	r4, #5
   149d0:	tst	r8, #1
   149d4:	beq	149fc <__assert_fail@plt+0x395c>
   149d8:	mov	r0, #1
   149dc:	mov	r9, #0
   149e0:	str	r0, [fp, #-72]	; 0xffffffb8
   149e4:	movw	r0, #39734	; 0x9b36
   149e8:	mov	r2, #1
   149ec:	mov	r3, #1
   149f0:	movt	r0, #1
   149f4:	str	r0, [fp, #-88]	; 0xffffffa8
   149f8:	b	14c44 <__assert_fail@plt+0x3ba4>
   149fc:	cmp	r5, #0
   14a00:	mov	r3, #0
   14a04:	mov	r9, #1
   14a08:	mov	r2, #1
   14a0c:	movne	r0, #34	; 0x22
   14a10:	strbne	r0, [ip]
   14a14:	movw	r0, #39734	; 0x9b36
   14a18:	movt	r0, #1
   14a1c:	str	r0, [fp, #-88]	; 0xffffffa8
   14a20:	mov	r0, #1
   14a24:	str	r0, [fp, #-72]	; 0xffffffb8
   14a28:	b	14c44 <__assert_fail@plt+0x3ba4>
   14a2c:	ldrb	r1, [r0, #1]
   14a30:	and	r1, r1, #223	; 0xdf
   14a34:	cmp	r1, #66	; 0x42
   14a38:	bne	14a90 <__assert_fail@plt+0x39f0>
   14a3c:	ldrb	r1, [r0, #2]
   14a40:	cmp	r1, #49	; 0x31
   14a44:	bne	14a90 <__assert_fail@plt+0x39f0>
   14a48:	ldrb	r1, [r0, #3]
   14a4c:	cmp	r1, #56	; 0x38
   14a50:	bne	14a90 <__assert_fail@plt+0x39f0>
   14a54:	ldrb	r1, [r0, #4]
   14a58:	cmp	r1, #48	; 0x30
   14a5c:	bne	14a90 <__assert_fail@plt+0x39f0>
   14a60:	ldrb	r1, [r0, #5]
   14a64:	cmp	r1, #51	; 0x33
   14a68:	bne	14a90 <__assert_fail@plt+0x39f0>
   14a6c:	ldrb	r1, [r0, #6]
   14a70:	cmp	r1, #48	; 0x30
   14a74:	bne	14a90 <__assert_fail@plt+0x39f0>
   14a78:	ldrb	r0, [r0, #7]
   14a7c:	cmp	r0, #0
   14a80:	movw	r0, #39746	; 0x9b42
   14a84:	movt	r0, #1
   14a88:	str	r0, [sp, #72]	; 0x48
   14a8c:	beq	14aac <__assert_fail@plt+0x3a0c>
   14a90:	movw	r1, #39734	; 0x9b36
   14a94:	movw	r0, #37532	; 0x929c
   14a98:	cmp	r4, #9
   14a9c:	movt	r1, #1
   14aa0:	movt	r0, #1
   14aa4:	moveq	r0, r1
   14aa8:	str	r0, [sp, #72]	; 0x48
   14aac:	movw	r6, #37532	; 0x929c
   14ab0:	mov	r0, #0
   14ab4:	mov	r2, #5
   14ab8:	movt	r6, #1
   14abc:	mov	r1, r6
   14ac0:	bl	10ed8 <dcgettext@plt>
   14ac4:	cmp	r0, r6
   14ac8:	str	r0, [sp, #76]	; 0x4c
   14acc:	beq	14b18 <__assert_fail@plt+0x3a78>
   14ad0:	ldr	ip, [fp, #-84]	; 0xffffffac
   14ad4:	mov	r9, #0
   14ad8:	tst	r8, #1
   14adc:	bne	14c20 <__assert_fail@plt+0x3b80>
   14ae0:	ldr	r0, [sp, #72]	; 0x48
   14ae4:	ldrb	r0, [r0]
   14ae8:	cmp	r0, #0
   14aec:	beq	14c20 <__assert_fail@plt+0x3b80>
   14af0:	ldr	r1, [sp, #72]	; 0x48
   14af4:	mov	r9, #0
   14af8:	add	r1, r1, #1
   14afc:	cmp	r9, r5
   14b00:	strbcc	r0, [ip, r9]
   14b04:	ldrb	r0, [r1, r9]
   14b08:	add	r9, r9, #1
   14b0c:	cmp	r0, #0
   14b10:	bne	14afc <__assert_fail@plt+0x3a5c>
   14b14:	b	14c20 <__assert_fail@plt+0x3b80>
   14b18:	bl	181b0 <__assert_fail@plt+0x7110>
   14b1c:	ldrb	r1, [r0]
   14b20:	and	r1, r1, #223	; 0xdf
   14b24:	cmp	r1, #71	; 0x47
   14b28:	beq	14b98 <__assert_fail@plt+0x3af8>
   14b2c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14b30:	cmp	r1, #85	; 0x55
   14b34:	bne	14bf4 <__assert_fail@plt+0x3b54>
   14b38:	ldrb	r1, [r0, #1]
   14b3c:	and	r1, r1, #223	; 0xdf
   14b40:	cmp	r1, #84	; 0x54
   14b44:	bne	14bf4 <__assert_fail@plt+0x3b54>
   14b48:	ldrb	r1, [r0, #2]
   14b4c:	and	r1, r1, #223	; 0xdf
   14b50:	cmp	r1, #70	; 0x46
   14b54:	bne	14bf4 <__assert_fail@plt+0x3b54>
   14b58:	ldrb	r1, [r0, #3]
   14b5c:	cmp	r1, #45	; 0x2d
   14b60:	bne	14bf4 <__assert_fail@plt+0x3b54>
   14b64:	ldrb	r1, [r0, #4]
   14b68:	cmp	r1, #56	; 0x38
   14b6c:	bne	14bf4 <__assert_fail@plt+0x3b54>
   14b70:	ldrb	r0, [r0, #5]
   14b74:	cmp	r0, #0
   14b78:	bne	14bf4 <__assert_fail@plt+0x3b54>
   14b7c:	movw	r0, #39742	; 0x9b3e
   14b80:	movt	r0, #1
   14b84:	str	r0, [sp, #76]	; 0x4c
   14b88:	mov	r9, #0
   14b8c:	tst	r8, #1
   14b90:	beq	14ae0 <__assert_fail@plt+0x3a40>
   14b94:	b	14c20 <__assert_fail@plt+0x3b80>
   14b98:	ldrb	r1, [r0, #1]
   14b9c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14ba0:	and	r1, r1, #223	; 0xdf
   14ba4:	cmp	r1, #66	; 0x42
   14ba8:	bne	14bf4 <__assert_fail@plt+0x3b54>
   14bac:	ldrb	r1, [r0, #2]
   14bb0:	cmp	r1, #49	; 0x31
   14bb4:	bne	14bf4 <__assert_fail@plt+0x3b54>
   14bb8:	ldrb	r1, [r0, #3]
   14bbc:	cmp	r1, #56	; 0x38
   14bc0:	bne	14bf4 <__assert_fail@plt+0x3b54>
   14bc4:	ldrb	r1, [r0, #4]
   14bc8:	cmp	r1, #48	; 0x30
   14bcc:	bne	14bf4 <__assert_fail@plt+0x3b54>
   14bd0:	ldrb	r1, [r0, #5]
   14bd4:	cmp	r1, #51	; 0x33
   14bd8:	bne	14bf4 <__assert_fail@plt+0x3b54>
   14bdc:	ldrb	r1, [r0, #6]
   14be0:	cmp	r1, #48	; 0x30
   14be4:	bne	14bf4 <__assert_fail@plt+0x3b54>
   14be8:	ldrb	r0, [r0, #7]
   14bec:	cmp	r0, #0
   14bf0:	beq	15a08 <__assert_fail@plt+0x4968>
   14bf4:	movw	r0, #37532	; 0x929c
   14bf8:	cmp	r4, #9
   14bfc:	movt	r0, #1
   14c00:	mov	r1, r0
   14c04:	movw	r0, #39734	; 0x9b36
   14c08:	movt	r0, #1
   14c0c:	moveq	r1, r0
   14c10:	str	r1, [sp, #76]	; 0x4c
   14c14:	mov	r9, #0
   14c18:	tst	r8, #1
   14c1c:	beq	14ae0 <__assert_fail@plt+0x3a40>
   14c20:	ldr	r6, [sp, #76]	; 0x4c
   14c24:	mov	r0, r6
   14c28:	bl	10fc8 <strlen@plt>
   14c2c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14c30:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14c34:	str	r0, [fp, #-72]	; 0xffffffb8
   14c38:	str	r6, [fp, #-88]	; 0xffffffa8
   14c3c:	mov	r2, #1
   14c40:	mov	r3, r8
   14c44:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14c48:	str	r4, [fp, #-64]	; 0xffffffc0
   14c4c:	mov	sl, #0
   14c50:	str	r3, [fp, #-76]	; 0xffffffb4
   14c54:	str	r2, [sp, #88]	; 0x58
   14c58:	cmp	r0, #0
   14c5c:	movwne	r0, #1
   14c60:	and	r1, r0, r3
   14c64:	and	r1, r2, r1
   14c68:	str	r1, [sp, #48]	; 0x30
   14c6c:	sub	r1, r4, #2
   14c70:	clz	r1, r1
   14c74:	lsr	r1, r1, #5
   14c78:	and	r1, r1, r3
   14c7c:	str	r1, [sp, #44]	; 0x2c
   14c80:	subs	r1, r4, #2
   14c84:	eor	r4, r3, #1
   14c88:	movwne	r1, #1
   14c8c:	str	r4, [sp, #92]	; 0x5c
   14c90:	orr	r4, r1, r4
   14c94:	and	r1, r1, r2
   14c98:	and	r0, r0, r1
   14c9c:	str	r4, [sp, #64]	; 0x40
   14ca0:	ldr	r4, [sp, #84]	; 0x54
   14ca4:	str	r0, [fp, #-60]	; 0xffffffc4
   14ca8:	orr	r0, r1, r3
   14cac:	ldr	r1, [fp, #16]
   14cb0:	eor	r0, r0, #1
   14cb4:	clz	r1, r1
   14cb8:	lsr	r1, r1, #5
   14cbc:	orr	r0, r1, r0
   14cc0:	str	r0, [fp, #-68]	; 0xffffffbc
   14cc4:	eor	r0, r2, #1
   14cc8:	str	r0, [sp, #52]	; 0x34
   14ccc:	cmn	r7, #1
   14cd0:	beq	14ce0 <__assert_fail@plt+0x3c40>
   14cd4:	cmp	sl, r7
   14cd8:	bne	14cec <__assert_fail@plt+0x3c4c>
   14cdc:	b	15980 <__assert_fail@plt+0x48e0>
   14ce0:	ldrb	r0, [lr, sl]
   14ce4:	cmp	r0, #0
   14ce8:	beq	15988 <__assert_fail@plt+0x48e8>
   14cec:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14cf0:	cmp	r0, #0
   14cf4:	beq	14d54 <__assert_fail@plt+0x3cb4>
   14cf8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14cfc:	mov	r6, r5
   14d00:	add	r5, sl, r0
   14d04:	cmp	r0, #2
   14d08:	bcc	14d74 <__assert_fail@plt+0x3cd4>
   14d0c:	mov	r0, #0
   14d10:	cmn	r7, #1
   14d14:	str	r0, [fp, #-56]	; 0xffffffc8
   14d18:	bne	14d30 <__assert_fail@plt+0x3c90>
   14d1c:	mov	r0, lr
   14d20:	bl	10fc8 <strlen@plt>
   14d24:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14d28:	ldr	ip, [fp, #-84]	; 0xffffffac
   14d2c:	mov	r7, r0
   14d30:	cmp	r5, r7
   14d34:	bls	14d84 <__assert_fail@plt+0x3ce4>
   14d38:	mov	r0, #0
   14d3c:	mov	r5, r6
   14d40:	str	r0, [fp, #-48]	; 0xffffffd0
   14d44:	ldrb	r6, [lr, sl]
   14d48:	cmp	r6, #126	; 0x7e
   14d4c:	bls	14dd4 <__assert_fail@plt+0x3d34>
   14d50:	b	15330 <__assert_fail@plt+0x4290>
   14d54:	mov	r0, #0
   14d58:	str	r0, [fp, #-56]	; 0xffffffc8
   14d5c:	mov	r0, #0
   14d60:	str	r0, [fp, #-48]	; 0xffffffd0
   14d64:	ldrb	r6, [lr, sl]
   14d68:	cmp	r6, #126	; 0x7e
   14d6c:	bls	14dd4 <__assert_fail@plt+0x3d34>
   14d70:	b	15330 <__assert_fail@plt+0x4290>
   14d74:	mov	r0, #0
   14d78:	str	r0, [fp, #-56]	; 0xffffffc8
   14d7c:	cmp	r5, r7
   14d80:	bhi	14d38 <__assert_fail@plt+0x3c98>
   14d84:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14d88:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14d8c:	add	r0, lr, sl
   14d90:	bl	10fbc <bcmp@plt>
   14d94:	ldr	r2, [sp, #92]	; 0x5c
   14d98:	cmp	r0, #0
   14d9c:	mov	r1, r0
   14da0:	mov	r5, r6
   14da4:	movwne	r1, #1
   14da8:	orr	r1, r1, r2
   14dac:	tst	r1, #1
   14db0:	beq	15a48 <__assert_fail@plt+0x49a8>
   14db4:	ldr	ip, [fp, #-84]	; 0xffffffac
   14db8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14dbc:	clz	r0, r0
   14dc0:	lsr	r0, r0, #5
   14dc4:	str	r0, [fp, #-48]	; 0xffffffd0
   14dc8:	ldrb	r6, [lr, sl]
   14dcc:	cmp	r6, #126	; 0x7e
   14dd0:	bhi	15330 <__assert_fail@plt+0x4290>
   14dd4:	add	r3, pc, #16
   14dd8:	mov	r8, #1
   14ddc:	mov	r2, #110	; 0x6e
   14de0:	mov	r0, #97	; 0x61
   14de4:	mov	r1, #0
   14de8:	ldr	pc, [r3, r6, lsl #2]
   14dec:	andeq	r5, r1, r8, ror #1
   14df0:	andeq	r5, r1, r0, lsr r3
   14df4:	andeq	r5, r1, r0, lsr r3
   14df8:	andeq	r5, r1, r0, lsr r3
   14dfc:	andeq	r5, r1, r0, lsr r3
   14e00:	andeq	r5, r1, r0, lsr r3
   14e04:	andeq	r5, r1, r0, lsr r3
   14e08:	andeq	r5, r1, r4, ror #7
   14e0c:	andeq	r5, r1, r8, asr #1
   14e10:	andeq	r5, r1, r0, asr #1
   14e14:	ldrdeq	r5, [r1], -r4
   14e18:	andeq	r5, r1, r4, lsl #4
   14e1c:	strheq	r5, [r1], -r8
   14e20:	ldrdeq	r5, [r1], -r0
   14e24:	andeq	r5, r1, r0, lsr r3
   14e28:	andeq	r5, r1, r0, lsr r3
   14e2c:	andeq	r5, r1, r0, lsr r3
   14e30:	andeq	r5, r1, r0, lsr r3
   14e34:	andeq	r5, r1, r0, lsr r3
   14e38:	andeq	r5, r1, r0, lsr r3
   14e3c:	andeq	r5, r1, r0, lsr r3
   14e40:	andeq	r5, r1, r0, lsr r3
   14e44:	andeq	r5, r1, r0, lsr r3
   14e48:	andeq	r5, r1, r0, lsr r3
   14e4c:	andeq	r5, r1, r0, lsr r3
   14e50:	andeq	r5, r1, r0, lsr r3
   14e54:	andeq	r5, r1, r0, lsr r3
   14e58:	andeq	r5, r1, r0, lsr r3
   14e5c:	andeq	r5, r1, r0, lsr r3
   14e60:	andeq	r5, r1, r0, lsr r3
   14e64:	andeq	r5, r1, r0, lsr r3
   14e68:	andeq	r5, r1, r0, lsr r3
   14e6c:	andeq	r5, r1, ip, asr r0
   14e70:	andeq	r5, r1, r0, rrx
   14e74:	andeq	r5, r1, r0, rrx
   14e78:	andeq	r5, r1, r0, asr r0
   14e7c:	andeq	r5, r1, r0, rrx
   14e80:	andeq	r4, r1, r8, ror #31
   14e84:	andeq	r5, r1, r0, rrx
   14e88:	andeq	r5, r1, ip, lsl #4
   14e8c:	andeq	r5, r1, r0, rrx
   14e90:	andeq	r5, r1, r0, rrx
   14e94:	andeq	r5, r1, r0, rrx
   14e98:	andeq	r4, r1, r8, ror #31
   14e9c:	andeq	r4, r1, r8, ror #31
   14ea0:	andeq	r4, r1, r8, ror #31
   14ea4:	andeq	r4, r1, r8, ror #31
   14ea8:	andeq	r4, r1, r8, ror #31
   14eac:	andeq	r4, r1, r8, ror #31
   14eb0:	andeq	r4, r1, r8, ror #31
   14eb4:	andeq	r4, r1, r8, ror #31
   14eb8:	andeq	r4, r1, r8, ror #31
   14ebc:	andeq	r4, r1, r8, ror #31
   14ec0:	andeq	r4, r1, r8, ror #31
   14ec4:	andeq	r4, r1, r8, ror #31
   14ec8:	andeq	r4, r1, r8, ror #31
   14ecc:	andeq	r4, r1, r8, ror #31
   14ed0:	andeq	r4, r1, r8, ror #31
   14ed4:	andeq	r4, r1, r8, ror #31
   14ed8:	andeq	r5, r1, r0, rrx
   14edc:	andeq	r5, r1, r0, rrx
   14ee0:	andeq	r5, r1, r0, rrx
   14ee4:	andeq	r5, r1, r0, rrx
   14ee8:	ldrdeq	r5, [r1], -r0
   14eec:	andeq	r5, r1, r0, lsr r3
   14ef0:	andeq	r4, r1, r8, ror #31
   14ef4:	andeq	r4, r1, r8, ror #31
   14ef8:	andeq	r4, r1, r8, ror #31
   14efc:	andeq	r4, r1, r8, ror #31
   14f00:	andeq	r4, r1, r8, ror #31
   14f04:	andeq	r4, r1, r8, ror #31
   14f08:	andeq	r4, r1, r8, ror #31
   14f0c:	andeq	r4, r1, r8, ror #31
   14f10:	andeq	r4, r1, r8, ror #31
   14f14:	andeq	r4, r1, r8, ror #31
   14f18:	andeq	r4, r1, r8, ror #31
   14f1c:	andeq	r4, r1, r8, ror #31
   14f20:	andeq	r4, r1, r8, ror #31
   14f24:	andeq	r4, r1, r8, ror #31
   14f28:	andeq	r4, r1, r8, ror #31
   14f2c:	andeq	r4, r1, r8, ror #31
   14f30:	andeq	r4, r1, r8, ror #31
   14f34:	andeq	r4, r1, r8, ror #31
   14f38:	andeq	r4, r1, r8, ror #31
   14f3c:	andeq	r4, r1, r8, ror #31
   14f40:	andeq	r4, r1, r8, ror #31
   14f44:	andeq	r4, r1, r8, ror #31
   14f48:	andeq	r4, r1, r8, ror #31
   14f4c:	andeq	r4, r1, r8, ror #31
   14f50:	andeq	r4, r1, r8, ror #31
   14f54:	andeq	r4, r1, r8, ror #31
   14f58:	andeq	r5, r1, r0, rrx
   14f5c:	muleq	r1, r4, r0
   14f60:	andeq	r4, r1, r8, ror #31
   14f64:	andeq	r5, r1, r0, rrx
   14f68:	andeq	r4, r1, r8, ror #31
   14f6c:	andeq	r5, r1, r0, rrx
   14f70:	andeq	r4, r1, r8, ror #31
   14f74:	andeq	r4, r1, r8, ror #31
   14f78:	andeq	r4, r1, r8, ror #31
   14f7c:	andeq	r4, r1, r8, ror #31
   14f80:	andeq	r4, r1, r8, ror #31
   14f84:	andeq	r4, r1, r8, ror #31
   14f88:	andeq	r4, r1, r8, ror #31
   14f8c:	andeq	r4, r1, r8, ror #31
   14f90:	andeq	r4, r1, r8, ror #31
   14f94:	andeq	r4, r1, r8, ror #31
   14f98:	andeq	r4, r1, r8, ror #31
   14f9c:	andeq	r4, r1, r8, ror #31
   14fa0:	andeq	r4, r1, r8, ror #31
   14fa4:	andeq	r4, r1, r8, ror #31
   14fa8:	andeq	r4, r1, r8, ror #31
   14fac:	andeq	r4, r1, r8, ror #31
   14fb0:	andeq	r4, r1, r8, ror #31
   14fb4:	andeq	r4, r1, r8, ror #31
   14fb8:	andeq	r4, r1, r8, ror #31
   14fbc:	andeq	r4, r1, r8, ror #31
   14fc0:	andeq	r4, r1, r8, ror #31
   14fc4:	andeq	r4, r1, r8, ror #31
   14fc8:	andeq	r4, r1, r8, ror #31
   14fcc:	andeq	r4, r1, r8, ror #31
   14fd0:	andeq	r4, r1, r8, ror #31
   14fd4:	andeq	r4, r1, r8, ror #31
   14fd8:	andeq	r5, r1, r8, lsr #32
   14fdc:	andeq	r5, r1, r0, rrx
   14fe0:	andeq	r5, r1, r8, lsr #32
   14fe4:	andeq	r5, r1, r0, asr r0
   14fe8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14fec:	tst	r0, #1
   14ff0:	bne	152a8 <__assert_fail@plt+0x4208>
   14ff4:	ldr	r1, [fp, #16]
   14ff8:	ubfx	r0, r6, #5, #3
   14ffc:	mov	r2, #1
   15000:	ldr	r0, [r1, r0, lsl #2]
   15004:	and	r1, r6, #31
   15008:	tst	r0, r2, lsl r1
   1500c:	beq	152a8 <__assert_fail@plt+0x4208>
   15010:	mov	r0, r6
   15014:	mov	r1, r8
   15018:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1501c:	tst	r2, #1
   15020:	beq	152c8 <__assert_fail@plt+0x4228>
   15024:	b	15a24 <__assert_fail@plt+0x4984>
   15028:	cmp	r7, #1
   1502c:	beq	15050 <__assert_fail@plt+0x3fb0>
   15030:	mov	r8, #0
   15034:	cmn	r7, #1
   15038:	bne	15294 <__assert_fail@plt+0x41f4>
   1503c:	ldrb	r0, [lr, #1]
   15040:	cmp	r0, #0
   15044:	beq	15050 <__assert_fail@plt+0x3fb0>
   15048:	mvn	r7, #0
   1504c:	b	15294 <__assert_fail@plt+0x41f4>
   15050:	mov	r8, #0
   15054:	cmp	sl, #0
   15058:	bne	15294 <__assert_fail@plt+0x41f4>
   1505c:	mov	r1, #1
   15060:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15064:	cmp	r0, #2
   15068:	bne	15080 <__assert_fail@plt+0x3fe0>
   1506c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15070:	mov	r8, r1
   15074:	tst	r0, #1
   15078:	beq	14fe8 <__assert_fail@plt+0x3f48>
   1507c:	b	15a24 <__assert_fail@plt+0x4984>
   15080:	mov	r8, r1
   15084:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15088:	tst	r0, #1
   1508c:	beq	14ff4 <__assert_fail@plt+0x3f54>
   15090:	b	152a8 <__assert_fail@plt+0x4208>
   15094:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15098:	cmp	r0, #2
   1509c:	bne	1535c <__assert_fail@plt+0x42bc>
   150a0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   150a4:	tst	r0, #1
   150a8:	bne	15a24 <__assert_fail@plt+0x4984>
   150ac:	mov	r0, #0
   150b0:	str	r0, [fp, #-56]	; 0xffffffc8
   150b4:	b	15374 <__assert_fail@plt+0x42d4>
   150b8:	mov	r0, #102	; 0x66
   150bc:	b	153e4 <__assert_fail@plt+0x4344>
   150c0:	mov	r2, #116	; 0x74
   150c4:	b	150d4 <__assert_fail@plt+0x4034>
   150c8:	mov	r0, #98	; 0x62
   150cc:	b	153e4 <__assert_fail@plt+0x4344>
   150d0:	mov	r2, #114	; 0x72
   150d4:	ldr	r0, [sp, #64]	; 0x40
   150d8:	tst	r0, #1
   150dc:	mov	r0, r2
   150e0:	bne	153e4 <__assert_fail@plt+0x4344>
   150e4:	b	15a24 <__assert_fail@plt+0x4984>
   150e8:	ldr	r0, [sp, #88]	; 0x58
   150ec:	tst	r0, #1
   150f0:	beq	15404 <__assert_fail@plt+0x4364>
   150f4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   150f8:	tst	r0, #1
   150fc:	bne	15b60 <__assert_fail@plt+0x4ac0>
   15100:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15104:	ldr	r1, [fp, #-52]	; 0xffffffcc
   15108:	subs	r0, r0, #2
   1510c:	movwne	r0, #1
   15110:	orr	r0, r0, r1
   15114:	tst	r0, #1
   15118:	bne	15154 <__assert_fail@plt+0x40b4>
   1511c:	cmp	r9, r5
   15120:	movcc	r0, #39	; 0x27
   15124:	strbcc	r0, [ip, r9]
   15128:	add	r0, r9, #1
   1512c:	cmp	r0, r5
   15130:	movcc	r1, #36	; 0x24
   15134:	strbcc	r1, [ip, r0]
   15138:	add	r0, r9, #2
   1513c:	add	r9, r9, #3
   15140:	cmp	r0, r5
   15144:	movcc	r1, #39	; 0x27
   15148:	strbcc	r1, [ip, r0]
   1514c:	mov	r0, #1
   15150:	str	r0, [fp, #-52]	; 0xffffffcc
   15154:	mov	r1, #1
   15158:	cmp	r9, r5
   1515c:	mov	r8, #0
   15160:	mov	r6, #48	; 0x30
   15164:	str	r1, [fp, #-56]	; 0xffffffc8
   15168:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1516c:	movcc	r0, #92	; 0x5c
   15170:	strbcc	r0, [ip, r9]
   15174:	add	r0, r9, #1
   15178:	cmp	r1, #2
   1517c:	beq	155d0 <__assert_fail@plt+0x4530>
   15180:	add	r1, sl, #1
   15184:	cmp	r1, r7
   15188:	bcs	155d0 <__assert_fail@plt+0x4530>
   1518c:	ldrb	r1, [lr, r1]
   15190:	sub	r1, r1, #48	; 0x30
   15194:	uxtb	r1, r1
   15198:	cmp	r1, #9
   1519c:	bhi	155d0 <__assert_fail@plt+0x4530>
   151a0:	cmp	r0, r5
   151a4:	movcc	r1, #48	; 0x30
   151a8:	strbcc	r1, [ip, r0]
   151ac:	add	r0, r9, #2
   151b0:	add	r9, r9, #3
   151b4:	cmp	r0, r5
   151b8:	movcc	r1, #48	; 0x30
   151bc:	strbcc	r1, [ip, r0]
   151c0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   151c4:	tst	r0, #1
   151c8:	beq	14ff4 <__assert_fail@plt+0x3f54>
   151cc:	b	152a8 <__assert_fail@plt+0x4208>
   151d0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   151d4:	mov	r6, #63	; 0x3f
   151d8:	cmp	r0, #5
   151dc:	beq	155e4 <__assert_fail@plt+0x4544>
   151e0:	mov	r1, #0
   151e4:	cmp	r0, #2
   151e8:	str	r1, [fp, #-56]	; 0xffffffc8
   151ec:	bne	156ac <__assert_fail@plt+0x460c>
   151f0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   151f4:	mov	r8, #0
   151f8:	tst	r0, #1
   151fc:	beq	14fe8 <__assert_fail@plt+0x3f48>
   15200:	b	15a24 <__assert_fail@plt+0x4984>
   15204:	mov	r0, #118	; 0x76
   15208:	b	153e4 <__assert_fail@plt+0x4344>
   1520c:	mov	r0, #1
   15210:	mov	r6, #39	; 0x27
   15214:	str	r0, [sp, #60]	; 0x3c
   15218:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1521c:	cmp	r0, #2
   15220:	bne	15424 <__assert_fail@plt+0x4384>
   15224:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15228:	tst	r0, #1
   1522c:	bne	15a24 <__assert_fail@plt+0x4984>
   15230:	ldr	r2, [sp, #56]	; 0x38
   15234:	clz	r1, r5
   15238:	mov	r8, #1
   1523c:	lsr	r1, r1, #5
   15240:	cmp	r2, #0
   15244:	mov	r0, r2
   15248:	movwne	r0, #1
   1524c:	orrs	r0, r0, r1
   15250:	moveq	r2, r5
   15254:	moveq	r5, r0
   15258:	cmp	r9, r5
   1525c:	str	r2, [sp, #56]	; 0x38
   15260:	movcc	r0, #39	; 0x27
   15264:	strbcc	r0, [ip, r9]
   15268:	add	r0, r9, #1
   1526c:	cmp	r0, r5
   15270:	movcc	r1, #92	; 0x5c
   15274:	strbcc	r1, [ip, r0]
   15278:	add	r0, r9, #2
   1527c:	add	r9, r9, #3
   15280:	cmp	r0, r5
   15284:	movcc	r1, #39	; 0x27
   15288:	strbcc	r1, [ip, r0]
   1528c:	mov	r0, #0
   15290:	str	r0, [fp, #-52]	; 0xffffffcc
   15294:	mov	r0, #0
   15298:	str	r0, [fp, #-56]	; 0xffffffc8
   1529c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   152a0:	tst	r0, #1
   152a4:	beq	14ff4 <__assert_fail@plt+0x3f54>
   152a8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   152ac:	mov	r1, r8
   152b0:	cmp	r0, #0
   152b4:	mov	r0, r6
   152b8:	beq	1537c <__assert_fail@plt+0x42dc>
   152bc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   152c0:	tst	r2, #1
   152c4:	bne	15a24 <__assert_fail@plt+0x4984>
   152c8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   152cc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   152d0:	subs	r2, r2, #2
   152d4:	movwne	r2, #1
   152d8:	orr	r2, r2, r3
   152dc:	tst	r2, #1
   152e0:	bne	1531c <__assert_fail@plt+0x427c>
   152e4:	cmp	r9, r5
   152e8:	movcc	r2, #39	; 0x27
   152ec:	strbcc	r2, [ip, r9]
   152f0:	add	r2, r9, #1
   152f4:	cmp	r2, r5
   152f8:	movcc	r3, #36	; 0x24
   152fc:	strbcc	r3, [ip, r2]
   15300:	add	r2, r9, #2
   15304:	add	r9, r9, #3
   15308:	cmp	r2, r5
   1530c:	movcc	r3, #39	; 0x27
   15310:	strbcc	r3, [ip, r2]
   15314:	mov	r2, #1
   15318:	str	r2, [fp, #-52]	; 0xffffffcc
   1531c:	cmp	r9, r5
   15320:	movcc	r2, #92	; 0x5c
   15324:	strbcc	r2, [ip, r9]
   15328:	add	r9, r9, #1
   1532c:	b	153c4 <__assert_fail@plt+0x4324>
   15330:	ldr	r0, [sp, #40]	; 0x28
   15334:	cmp	r0, #1
   15338:	bne	15438 <__assert_fail@plt+0x4398>
   1533c:	bl	10fa4 <__ctype_b_loc@plt>
   15340:	ldr	r0, [r0]
   15344:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15348:	mov	r1, #1
   1534c:	add	r0, r0, r6, lsl #1
   15350:	ldrb	r0, [r0, #1]
   15354:	ubfx	r8, r0, #6, #1
   15358:	b	15790 <__assert_fail@plt+0x46f0>
   1535c:	ldr	r1, [sp, #48]	; 0x30
   15360:	mov	r0, #0
   15364:	str	r0, [fp, #-56]	; 0xffffffc8
   15368:	mov	r0, #92	; 0x5c
   1536c:	cmp	r1, #0
   15370:	beq	153e4 <__assert_fail@plt+0x4344>
   15374:	mov	r6, #92	; 0x5c
   15378:	mov	r8, #0
   1537c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15380:	cmp	r0, #0
   15384:	bne	153bc <__assert_fail@plt+0x431c>
   15388:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1538c:	tst	r0, #1
   15390:	beq	153bc <__assert_fail@plt+0x431c>
   15394:	cmp	r9, r5
   15398:	movcc	r0, #39	; 0x27
   1539c:	strbcc	r0, [ip, r9]
   153a0:	add	r0, r9, #1
   153a4:	add	r9, r9, #2
   153a8:	cmp	r0, r5
   153ac:	movcc	r1, #39	; 0x27
   153b0:	strbcc	r1, [ip, r0]
   153b4:	mov	r0, #0
   153b8:	str	r0, [fp, #-52]	; 0xffffffcc
   153bc:	mov	r1, r8
   153c0:	mov	r0, r6
   153c4:	cmp	r9, r5
   153c8:	and	r4, r4, r1
   153cc:	strbcc	r0, [ip, r9]
   153d0:	add	r9, r9, #1
   153d4:	add	sl, sl, #1
   153d8:	cmn	r7, #1
   153dc:	bne	14cd4 <__assert_fail@plt+0x3c34>
   153e0:	b	14ce0 <__assert_fail@plt+0x3c40>
   153e4:	mov	r1, #0
   153e8:	mov	r8, #0
   153ec:	str	r1, [fp, #-56]	; 0xffffffc8
   153f0:	ldr	r1, [sp, #88]	; 0x58
   153f4:	tst	r1, #1
   153f8:	mov	r1, #0
   153fc:	beq	14fe8 <__assert_fail@plt+0x3f48>
   15400:	b	152bc <__assert_fail@plt+0x421c>
   15404:	ldr	r0, [sp, #36]	; 0x24
   15408:	mov	r6, #0
   1540c:	mov	r8, #0
   15410:	cmp	r0, #0
   15414:	mov	r0, #0
   15418:	str	r0, [fp, #-56]	; 0xffffffc8
   1541c:	bne	153d4 <__assert_fail@plt+0x4334>
   15420:	b	14fe8 <__assert_fail@plt+0x3f48>
   15424:	mov	r8, #1
   15428:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1542c:	tst	r0, #1
   15430:	beq	14ff4 <__assert_fail@plt+0x3f54>
   15434:	b	152a8 <__assert_fail@plt+0x4208>
   15438:	mov	r0, #0
   1543c:	cmn	r7, #1
   15440:	str	r0, [fp, #-36]	; 0xffffffdc
   15444:	str	r0, [fp, #-40]	; 0xffffffd8
   15448:	bne	1545c <__assert_fail@plt+0x43bc>
   1544c:	mov	r0, lr
   15450:	bl	10fc8 <strlen@plt>
   15454:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15458:	mov	r7, r0
   1545c:	ldr	r0, [sp, #44]	; 0x2c
   15460:	str	r4, [sp, #84]	; 0x54
   15464:	str	r5, [sp, #28]
   15468:	cmp	r0, #0
   1546c:	beq	156c0 <__assert_fail@plt+0x4620>
   15470:	ldr	r0, [sp, #80]	; 0x50
   15474:	mov	r8, #1
   15478:	mov	r5, #0
   1547c:	add	r0, r0, sl
   15480:	str	r0, [sp, #24]
   15484:	sub	r0, fp, #40	; 0x28
   15488:	mov	r3, r0
   1548c:	b	154c8 <__assert_fail@plt+0x4428>
   15490:	ldr	r5, [sp, #68]	; 0x44
   15494:	add	r5, r0, r5
   15498:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1549c:	bl	10efc <iswprint@plt>
   154a0:	cmp	r0, #0
   154a4:	sub	r4, fp, #40	; 0x28
   154a8:	movwne	r0, #1
   154ac:	and	r8, r8, r0
   154b0:	mov	r0, r4
   154b4:	bl	10eb4 <mbsinit@plt>
   154b8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   154bc:	mov	r3, r4
   154c0:	cmp	r0, #0
   154c4:	bne	15784 <__assert_fail@plt+0x46e4>
   154c8:	str	r5, [sp, #68]	; 0x44
   154cc:	add	r5, r5, sl
   154d0:	sub	r0, fp, #44	; 0x2c
   154d4:	add	r1, lr, r5
   154d8:	sub	r2, r7, r5
   154dc:	bl	181e8 <__assert_fail@plt+0x7148>
   154e0:	cmn	r0, #2
   154e4:	beq	15744 <__assert_fail@plt+0x46a4>
   154e8:	ldr	ip, [fp, #-84]	; 0xffffffac
   154ec:	cmn	r0, #1
   154f0:	beq	15738 <__assert_fail@plt+0x4698>
   154f4:	cmp	r0, #0
   154f8:	beq	1573c <__assert_fail@plt+0x469c>
   154fc:	cmp	r0, #2
   15500:	bcc	15490 <__assert_fail@plt+0x43f0>
   15504:	ldr	r1, [sp, #68]	; 0x44
   15508:	ldr	r2, [sp, #24]
   1550c:	add	r1, r2, r1
   15510:	sub	r2, r0, #1
   15514:	ldrb	r3, [r1]
   15518:	sub	r3, r3, #91	; 0x5b
   1551c:	cmp	r3, #33	; 0x21
   15520:	bls	15540 <__assert_fail@plt+0x44a0>
   15524:	add	r1, r1, #1
   15528:	subs	r2, r2, #1
   1552c:	beq	15490 <__assert_fail@plt+0x43f0>
   15530:	ldrb	r3, [r1]
   15534:	sub	r3, r3, #91	; 0x5b
   15538:	cmp	r3, #33	; 0x21
   1553c:	bhi	15524 <__assert_fail@plt+0x4484>
   15540:	add	r5, pc, #0
   15544:	ldr	pc, [r5, r3, lsl #2]
   15548:	andeq	r5, r1, ip, asr sl
   1554c:	andeq	r5, r1, ip, asr sl
   15550:	andeq	r5, r1, r4, lsr #10
   15554:	andeq	r5, r1, ip, asr sl
   15558:	andeq	r5, r1, r4, lsr #10
   1555c:	andeq	r5, r1, ip, asr sl
   15560:	andeq	r5, r1, r4, lsr #10
   15564:	andeq	r5, r1, r4, lsr #10
   15568:	andeq	r5, r1, r4, lsr #10
   1556c:	andeq	r5, r1, r4, lsr #10
   15570:	andeq	r5, r1, r4, lsr #10
   15574:	andeq	r5, r1, r4, lsr #10
   15578:	andeq	r5, r1, r4, lsr #10
   1557c:	andeq	r5, r1, r4, lsr #10
   15580:	andeq	r5, r1, r4, lsr #10
   15584:	andeq	r5, r1, r4, lsr #10
   15588:	andeq	r5, r1, r4, lsr #10
   1558c:	andeq	r5, r1, r4, lsr #10
   15590:	andeq	r5, r1, r4, lsr #10
   15594:	andeq	r5, r1, r4, lsr #10
   15598:	andeq	r5, r1, r4, lsr #10
   1559c:	andeq	r5, r1, r4, lsr #10
   155a0:	andeq	r5, r1, r4, lsr #10
   155a4:	andeq	r5, r1, r4, lsr #10
   155a8:	andeq	r5, r1, r4, lsr #10
   155ac:	andeq	r5, r1, r4, lsr #10
   155b0:	andeq	r5, r1, r4, lsr #10
   155b4:	andeq	r5, r1, r4, lsr #10
   155b8:	andeq	r5, r1, r4, lsr #10
   155bc:	andeq	r5, r1, r4, lsr #10
   155c0:	andeq	r5, r1, r4, lsr #10
   155c4:	andeq	r5, r1, r4, lsr #10
   155c8:	andeq	r5, r1, r4, lsr #10
   155cc:	andeq	r5, r1, ip, asr sl
   155d0:	mov	r9, r0
   155d4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   155d8:	tst	r0, #1
   155dc:	beq	14ff4 <__assert_fail@plt+0x3f54>
   155e0:	b	152a8 <__assert_fail@plt+0x4208>
   155e4:	mov	r0, #0
   155e8:	str	r0, [fp, #-56]	; 0xffffffc8
   155ec:	ldr	r0, [sp, #32]
   155f0:	cmp	r0, #0
   155f4:	beq	156ac <__assert_fail@plt+0x460c>
   155f8:	add	r0, sl, #2
   155fc:	mov	r1, r7
   15600:	cmp	r0, r7
   15604:	bcs	156ac <__assert_fail@plt+0x460c>
   15608:	add	r1, sl, lr
   1560c:	ldrb	r1, [r1, #1]
   15610:	cmp	r1, #63	; 0x3f
   15614:	bne	156ac <__assert_fail@plt+0x460c>
   15618:	ldrb	r8, [lr, r0]
   1561c:	sub	r2, r8, #33	; 0x21
   15620:	cmp	r2, #29
   15624:	bhi	156ac <__assert_fail@plt+0x460c>
   15628:	mov	r1, r4
   1562c:	movw	r4, #20929	; 0x51c1
   15630:	mov	r3, #1
   15634:	movt	r4, #14336	; 0x3800
   15638:	tst	r4, r3, lsl r2
   1563c:	beq	15968 <__assert_fail@plt+0x48c8>
   15640:	ldr	r2, [fp, #-76]	; 0xffffffb4
   15644:	tst	r2, #1
   15648:	bne	15a24 <__assert_fail@plt+0x4984>
   1564c:	cmp	r9, r5
   15650:	mov	r6, r8
   15654:	mov	r4, r1
   15658:	mov	sl, r0
   1565c:	mov	r8, #0
   15660:	movcc	r2, #63	; 0x3f
   15664:	strbcc	r2, [ip, r9]
   15668:	add	r2, r9, #1
   1566c:	cmp	r2, r5
   15670:	movcc	r3, #34	; 0x22
   15674:	strbcc	r3, [ip, r2]
   15678:	add	r2, r9, #2
   1567c:	cmp	r2, r5
   15680:	movcc	r3, #34	; 0x22
   15684:	strbcc	r3, [ip, r2]
   15688:	add	r2, r9, #3
   1568c:	add	r9, r9, #4
   15690:	cmp	r2, r5
   15694:	movcc	r3, #63	; 0x3f
   15698:	strbcc	r3, [ip, r2]
   1569c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   156a0:	tst	r0, #1
   156a4:	beq	14ff4 <__assert_fail@plt+0x3f54>
   156a8:	b	152a8 <__assert_fail@plt+0x4208>
   156ac:	mov	r8, #0
   156b0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   156b4:	tst	r0, #1
   156b8:	beq	14ff4 <__assert_fail@plt+0x3f54>
   156bc:	b	152a8 <__assert_fail@plt+0x4208>
   156c0:	mov	r8, #1
   156c4:	mov	r5, #0
   156c8:	sub	r4, fp, #40	; 0x28
   156cc:	str	r5, [sp, #68]	; 0x44
   156d0:	add	r5, r5, sl
   156d4:	sub	r0, fp, #44	; 0x2c
   156d8:	mov	r3, r4
   156dc:	add	r1, lr, r5
   156e0:	sub	r2, r7, r5
   156e4:	bl	181e8 <__assert_fail@plt+0x7148>
   156e8:	cmn	r0, #2
   156ec:	beq	15744 <__assert_fail@plt+0x46a4>
   156f0:	cmn	r0, #1
   156f4:	beq	15738 <__assert_fail@plt+0x4698>
   156f8:	ldr	r5, [sp, #68]	; 0x44
   156fc:	cmp	r0, #0
   15700:	beq	15780 <__assert_fail@plt+0x46e0>
   15704:	add	r5, r0, r5
   15708:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1570c:	bl	10efc <iswprint@plt>
   15710:	cmp	r0, #0
   15714:	sub	r4, fp, #40	; 0x28
   15718:	movwne	r0, #1
   1571c:	and	r8, r8, r0
   15720:	mov	r0, r4
   15724:	bl	10eb4 <mbsinit@plt>
   15728:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1572c:	cmp	r0, #0
   15730:	beq	156cc <__assert_fail@plt+0x462c>
   15734:	b	15784 <__assert_fail@plt+0x46e4>
   15738:	mov	r8, #0
   1573c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15740:	b	15778 <__assert_fail@plt+0x46d8>
   15744:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15748:	mov	r8, #0
   1574c:	cmp	r5, r7
   15750:	bcs	15778 <__assert_fail@plt+0x46d8>
   15754:	ldrb	r0, [lr, r5]
   15758:	cmp	r0, #0
   1575c:	beq	15778 <__assert_fail@plt+0x46d8>
   15760:	ldr	r0, [sp, #68]	; 0x44
   15764:	add	r0, r0, #1
   15768:	add	r5, r0, sl
   1576c:	str	r0, [sp, #68]	; 0x44
   15770:	cmp	r5, r7
   15774:	bcc	15754 <__assert_fail@plt+0x46b4>
   15778:	ldr	r5, [sp, #68]	; 0x44
   1577c:	b	15784 <__assert_fail@plt+0x46e4>
   15780:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15784:	mov	r1, r5
   15788:	ldr	r5, [sp, #28]
   1578c:	ldr	r4, [sp, #84]	; 0x54
   15790:	ldr	r0, [sp, #52]	; 0x34
   15794:	ldr	ip, [fp, #-84]	; 0xffffffac
   15798:	cmp	r1, #1
   1579c:	orr	r2, r8, r0
   157a0:	mov	r0, r1
   157a4:	bhi	157b0 <__assert_fail@plt+0x4710>
   157a8:	tst	r2, #1
   157ac:	bne	14fe8 <__assert_fail@plt+0x3f48>
   157b0:	add	r0, r0, sl
   157b4:	str	r2, [sp, #84]	; 0x54
   157b8:	str	r0, [fp, #-56]	; 0xffffffc8
   157bc:	mov	r0, #0
   157c0:	tst	r2, #1
   157c4:	bne	158a4 <__assert_fail@plt+0x4804>
   157c8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   157cc:	tst	r1, #1
   157d0:	bne	15a24 <__assert_fail@plt+0x4984>
   157d4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   157d8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   157dc:	subs	r2, r1, #2
   157e0:	movwne	r2, #1
   157e4:	orr	r2, r2, r0
   157e8:	tst	r2, #1
   157ec:	bne	15828 <__assert_fail@plt+0x4788>
   157f0:	cmp	r9, r5
   157f4:	add	r2, r9, #1
   157f8:	mov	r0, #1
   157fc:	movcc	r1, #39	; 0x27
   15800:	str	r0, [fp, #-52]	; 0xffffffcc
   15804:	strbcc	r1, [ip, r9]
   15808:	cmp	r2, r5
   1580c:	movcc	r1, #36	; 0x24
   15810:	strbcc	r1, [ip, r2]
   15814:	add	r2, r9, #2
   15818:	add	r9, r9, #3
   1581c:	cmp	r2, r5
   15820:	movcc	r1, #39	; 0x27
   15824:	strbcc	r1, [ip, r2]
   15828:	cmp	r9, r5
   1582c:	add	r2, r9, #1
   15830:	movcc	r1, #92	; 0x5c
   15834:	strbcc	r1, [ip, r9]
   15838:	cmp	r2, r5
   1583c:	bcs	15850 <__assert_fail@plt+0x47b0>
   15840:	uxtb	r3, r6
   15844:	mov	r1, #48	; 0x30
   15848:	orr	r3, r1, r3, lsr #6
   1584c:	strb	r3, [ip, r2]
   15850:	add	r2, r9, #2
   15854:	add	r9, r9, #3
   15858:	cmp	r2, r5
   1585c:	lsrcc	r3, r6, #3
   15860:	movcc	r1, #6
   15864:	bficc	r3, r1, #3, #29
   15868:	mov	r1, #6
   1586c:	bfi	r6, r1, #3, #29
   15870:	strbcc	r3, [ip, r2]
   15874:	mov	r2, #1
   15878:	b	158d8 <__assert_fail@plt+0x4838>
   1587c:	ldr	r1, [sp, #80]	; 0x50
   15880:	cmp	r9, r2
   15884:	mov	r5, r2
   15888:	ldr	r2, [sp, #84]	; 0x54
   1588c:	strbcc	r6, [ip, r9]
   15890:	add	r9, r9, #1
   15894:	ldrb	r6, [r1, sl]
   15898:	mov	sl, r3
   1589c:	tst	r2, #1
   158a0:	beq	157c8 <__assert_fail@plt+0x4728>
   158a4:	ldr	r1, [fp, #-48]	; 0xffffffd0
   158a8:	tst	r1, #1
   158ac:	beq	158cc <__assert_fail@plt+0x482c>
   158b0:	cmp	r9, r5
   158b4:	mov	r2, r0
   158b8:	movcc	r1, #92	; 0x5c
   158bc:	strbcc	r1, [ip, r9]
   158c0:	add	r9, r9, #1
   158c4:	mov	r1, #0
   158c8:	b	158d4 <__assert_fail@plt+0x4834>
   158cc:	mov	r1, #0
   158d0:	mov	r2, r0
   158d4:	str	r1, [fp, #-48]	; 0xffffffd0
   158d8:	mov	r0, r2
   158dc:	and	r1, r2, #1
   158e0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   158e4:	add	r3, sl, #1
   158e8:	cmp	r2, r3
   158ec:	bls	1594c <__assert_fail@plt+0x48ac>
   158f0:	mov	r2, r5
   158f4:	ldr	r5, [fp, #-52]	; 0xffffffcc
   158f8:	cmp	r1, #0
   158fc:	movwne	r1, #1
   15900:	mvn	r5, r5
   15904:	orr	r5, r5, r1
   15908:	tst	r5, #1
   1590c:	bne	1587c <__assert_fail@plt+0x47dc>
   15910:	cmp	r9, r2
   15914:	movcc	r5, r4
   15918:	movcc	r4, #39	; 0x27
   1591c:	strbcc	r4, [ip, r9]
   15920:	movcc	r4, r5
   15924:	add	r5, r9, #1
   15928:	add	r9, r9, #2
   1592c:	cmp	r5, r2
   15930:	movcc	r1, r4
   15934:	movcc	r4, #39	; 0x27
   15938:	strbcc	r4, [ip, r5]
   1593c:	movcc	r4, r1
   15940:	mov	r1, #0
   15944:	str	r1, [fp, #-52]	; 0xffffffcc
   15948:	b	1587c <__assert_fail@plt+0x47dc>
   1594c:	cmp	r1, #0
   15950:	movwne	r1, #1
   15954:	str	r1, [fp, #-56]	; 0xffffffc8
   15958:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1595c:	cmp	r0, #0
   15960:	beq	15388 <__assert_fail@plt+0x42e8>
   15964:	b	153bc <__assert_fail@plt+0x431c>
   15968:	mov	r8, #0
   1596c:	mov	r4, r1
   15970:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15974:	tst	r0, #1
   15978:	beq	14ff4 <__assert_fail@plt+0x3f54>
   1597c:	b	152a8 <__assert_fail@plt+0x4208>
   15980:	mov	r7, sl
   15984:	b	1598c <__assert_fail@plt+0x48ec>
   15988:	mvn	r7, #0
   1598c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15990:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15994:	ldr	r2, [sp, #88]	; 0x58
   15998:	eor	r0, r1, #2
   1599c:	orr	r0, r0, r9
   159a0:	clz	r0, r0
   159a4:	lsr	r0, r0, #5
   159a8:	tst	r3, r0
   159ac:	bne	15a24 <__assert_fail@plt+0x4984>
   159b0:	subs	r0, r1, #2
   159b4:	movwne	r0, #1
   159b8:	orr	r0, r3, r0
   159bc:	tst	r0, #1
   159c0:	ldreq	r0, [sp, #60]	; 0x3c
   159c4:	eoreq	r0, r0, #1
   159c8:	tsteq	r0, #1
   159cc:	bne	15b00 <__assert_fail@plt+0x4a60>
   159d0:	tst	r4, #1
   159d4:	bne	15ac4 <__assert_fail@plt+0x4a24>
   159d8:	ldr	r6, [sp, #56]	; 0x38
   159dc:	mov	r8, #0
   159e0:	cmp	r6, #0
   159e4:	beq	15afc <__assert_fail@plt+0x4a5c>
   159e8:	mov	r1, #0
   159ec:	mov	r4, #2
   159f0:	cmp	r5, #0
   159f4:	mov	r0, r2
   159f8:	mov	r3, #0
   159fc:	str	r1, [sp, #84]	; 0x54
   15a00:	beq	14848 <__assert_fail@plt+0x37a8>
   15a04:	b	15b00 <__assert_fail@plt+0x4a60>
   15a08:	movw	r0, #39750	; 0x9b46
   15a0c:	movt	r0, #1
   15a10:	str	r0, [sp, #76]	; 0x4c
   15a14:	mov	r9, #0
   15a18:	tst	r8, #1
   15a1c:	beq	14ae0 <__assert_fail@plt+0x3a40>
   15a20:	b	14c20 <__assert_fail@plt+0x3b80>
   15a24:	ldr	r1, [sp, #88]	; 0x58
   15a28:	mov	r0, #2
   15a2c:	tst	r1, #1
   15a30:	movwne	r0, #4
   15a34:	ldr	r2, [fp, #-64]	; 0xffffffc0
   15a38:	ldr	r1, [fp, #12]
   15a3c:	cmp	r2, #2
   15a40:	moveq	r2, r0
   15a44:	b	15a7c <__assert_fail@plt+0x49dc>
   15a48:	ldr	ip, [fp, #-84]	; 0xffffffac
   15a4c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15a50:	ldr	r1, [fp, #12]
   15a54:	ldr	r2, [fp, #-64]	; 0xffffffc0
   15a58:	b	15a7c <__assert_fail@plt+0x49dc>
   15a5c:	ldr	r1, [sp, #88]	; 0x58
   15a60:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15a64:	ldr	r5, [sp, #28]
   15a68:	mov	r0, #2
   15a6c:	tst	r1, #1
   15a70:	ldr	r1, [fp, #12]
   15a74:	movwne	r0, #4
   15a78:	mov	r2, r0
   15a7c:	mov	r0, #0
   15a80:	bic	r1, r1, #2
   15a84:	str	r2, [sp]
   15a88:	mov	r2, lr
   15a8c:	str	r0, [sp, #8]
   15a90:	ldr	r0, [sp, #72]	; 0x48
   15a94:	str	r1, [sp, #4]
   15a98:	mov	r1, r5
   15a9c:	str	r0, [sp, #12]
   15aa0:	ldr	r0, [sp, #76]	; 0x4c
   15aa4:	str	r0, [sp, #16]
   15aa8:	mov	r0, ip
   15aac:	mov	r3, r7
   15ab0:	bl	147bc <__assert_fail@plt+0x371c>
   15ab4:	mov	r9, r0
   15ab8:	mov	r0, r9
   15abc:	sub	sp, fp, #28
   15ac0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ac4:	mov	r0, #5
   15ac8:	ldr	r1, [sp, #56]	; 0x38
   15acc:	ldr	r2, [fp, #-80]	; 0xffffffb0
   15ad0:	str	r0, [sp]
   15ad4:	ldr	r0, [fp, #12]
   15ad8:	str	r0, [sp, #4]
   15adc:	ldr	r0, [fp, #16]
   15ae0:	str	r0, [sp, #8]
   15ae4:	ldr	r0, [sp, #72]	; 0x48
   15ae8:	str	r0, [sp, #12]
   15aec:	ldr	r0, [sp, #76]	; 0x4c
   15af0:	str	r0, [sp, #16]
   15af4:	ldr	r0, [fp, #-84]	; 0xffffffac
   15af8:	b	15aac <__assert_fail@plt+0x4a0c>
   15afc:	mov	r3, #0
   15b00:	ldr	r1, [fp, #-88]	; 0xffffffa8
   15b04:	cmp	r1, #0
   15b08:	beq	15b44 <__assert_fail@plt+0x4aa4>
   15b0c:	ldr	r2, [fp, #-84]	; 0xffffffac
   15b10:	tst	r3, #1
   15b14:	bne	15b48 <__assert_fail@plt+0x4aa8>
   15b18:	ldrb	r0, [r1]
   15b1c:	cmp	r0, #0
   15b20:	beq	15b48 <__assert_fail@plt+0x4aa8>
   15b24:	add	r1, r1, #1
   15b28:	cmp	r9, r5
   15b2c:	strbcc	r0, [r2, r9]
   15b30:	add	r9, r9, #1
   15b34:	ldrb	r0, [r1], #1
   15b38:	cmp	r0, #0
   15b3c:	bne	15b28 <__assert_fail@plt+0x4a88>
   15b40:	b	15b48 <__assert_fail@plt+0x4aa8>
   15b44:	ldr	r2, [fp, #-84]	; 0xffffffac
   15b48:	cmp	r9, r5
   15b4c:	movcc	r0, #0
   15b50:	strbcc	r0, [r2, r9]
   15b54:	mov	r0, r9
   15b58:	sub	sp, fp, #28
   15b5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b60:	mov	r0, #4
   15b64:	b	15a34 <__assert_fail@plt+0x4994>
   15b68:	bl	11088 <abort@plt>
   15b6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b70:	add	fp, sp, #28
   15b74:	sub	sp, sp, #28
   15b78:	movw	r5, #54408	; 0xd488
   15b7c:	cmp	r2, #0
   15b80:	mov	r4, r1
   15b84:	mov	r7, r0
   15b88:	str	r0, [sp, #20]
   15b8c:	movt	r5, #2
   15b90:	movne	r5, r2
   15b94:	bl	10fe0 <__errno_location@plt>
   15b98:	mov	sl, r0
   15b9c:	ldr	r2, [r5, #40]	; 0x28
   15ba0:	ldr	r3, [r5, #44]	; 0x2c
   15ba4:	ldm	r5, {r0, r1}
   15ba8:	orr	r8, r1, #1
   15bac:	add	r9, r5, #8
   15bb0:	mov	r1, #0
   15bb4:	ldr	r6, [sl]
   15bb8:	stm	sp, {r0, r8, r9}
   15bbc:	mov	r0, #0
   15bc0:	str	r2, [sp, #12]
   15bc4:	str	r3, [sp, #16]
   15bc8:	mov	r2, r7
   15bcc:	mov	r3, r4
   15bd0:	str	r6, [sp, #24]
   15bd4:	mov	r6, r4
   15bd8:	bl	147bc <__assert_fail@plt+0x371c>
   15bdc:	add	r7, r0, #1
   15be0:	mov	r0, r7
   15be4:	bl	16cb0 <__assert_fail@plt+0x5c10>
   15be8:	mov	r4, r0
   15bec:	ldr	r0, [r5]
   15bf0:	ldr	r2, [r5, #44]	; 0x2c
   15bf4:	ldr	r1, [r5, #40]	; 0x28
   15bf8:	mov	r3, r6
   15bfc:	stm	sp, {r0, r8, r9}
   15c00:	str	r2, [sp, #16]
   15c04:	ldr	r2, [sp, #20]
   15c08:	str	r1, [sp, #12]
   15c0c:	mov	r0, r4
   15c10:	mov	r1, r7
   15c14:	bl	147bc <__assert_fail@plt+0x371c>
   15c18:	ldr	r0, [sp, #24]
   15c1c:	str	r0, [sl]
   15c20:	mov	r0, r4
   15c24:	sub	sp, fp, #28
   15c28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c30:	add	fp, sp, #28
   15c34:	sub	sp, sp, #36	; 0x24
   15c38:	movw	r8, #54408	; 0xd488
   15c3c:	cmp	r3, #0
   15c40:	mov	r4, r2
   15c44:	str	r2, [sp, #24]
   15c48:	mov	r5, r1
   15c4c:	mov	r6, r0
   15c50:	str	r0, [sp, #20]
   15c54:	movt	r8, #2
   15c58:	movne	r8, r3
   15c5c:	bl	10fe0 <__errno_location@plt>
   15c60:	str	r0, [sp, #28]
   15c64:	ldr	r1, [r8, #40]	; 0x28
   15c68:	ldr	r2, [r8, #44]	; 0x2c
   15c6c:	ldr	r7, [r0]
   15c70:	cmp	r4, #0
   15c74:	add	sl, r8, #8
   15c78:	mov	r0, #0
   15c7c:	ldm	r8, {r3, r9}
   15c80:	orreq	r9, r9, #1
   15c84:	stm	sp, {r3, r9, sl}
   15c88:	str	r1, [sp, #12]
   15c8c:	str	r2, [sp, #16]
   15c90:	mov	r1, #0
   15c94:	mov	r2, r6
   15c98:	mov	r3, r5
   15c9c:	str	r7, [sp, #32]
   15ca0:	mov	r7, r5
   15ca4:	bl	147bc <__assert_fail@plt+0x371c>
   15ca8:	add	r4, r0, #1
   15cac:	mov	r5, r0
   15cb0:	mov	r0, r4
   15cb4:	bl	16cb0 <__assert_fail@plt+0x5c10>
   15cb8:	mov	r6, r0
   15cbc:	ldr	r0, [r8]
   15cc0:	ldr	r2, [r8, #44]	; 0x2c
   15cc4:	ldr	r1, [r8, #40]	; 0x28
   15cc8:	mov	r3, r7
   15ccc:	stm	sp, {r0, r9, sl}
   15cd0:	str	r2, [sp, #16]
   15cd4:	ldr	r2, [sp, #20]
   15cd8:	str	r1, [sp, #12]
   15cdc:	mov	r0, r6
   15ce0:	mov	r1, r4
   15ce4:	bl	147bc <__assert_fail@plt+0x371c>
   15ce8:	ldr	r0, [sp, #24]
   15cec:	ldr	r1, [sp, #32]
   15cf0:	ldr	r2, [sp, #28]
   15cf4:	cmp	r0, #0
   15cf8:	str	r1, [r2]
   15cfc:	strne	r5, [r0]
   15d00:	mov	r0, r6
   15d04:	sub	sp, fp, #28
   15d08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d0c:	push	{r4, r5, r6, r7, fp, lr}
   15d10:	add	fp, sp, #16
   15d14:	movw	r4, #45352	; 0xb128
   15d18:	movt	r4, #2
   15d1c:	ldrd	r6, [r4]
   15d20:	cmp	r7, #2
   15d24:	blt	15d50 <__assert_fail@plt+0x4cb0>
   15d28:	add	r5, r6, #12
   15d2c:	mov	r7, #0
   15d30:	ldr	r0, [r5, r7, lsl #3]
   15d34:	bl	14558 <__assert_fail@plt+0x34b8>
   15d38:	ldr	r1, [r4, #4]
   15d3c:	add	r2, r7, #2
   15d40:	add	r0, r7, #1
   15d44:	mov	r7, r0
   15d48:	cmp	r2, r1
   15d4c:	blt	15d30 <__assert_fail@plt+0x4c90>
   15d50:	ldr	r0, [r6, #4]
   15d54:	movw	r5, #54456	; 0xd4b8
   15d58:	movt	r5, #2
   15d5c:	cmp	r0, r5
   15d60:	beq	15d74 <__assert_fail@plt+0x4cd4>
   15d64:	bl	14558 <__assert_fail@plt+0x34b8>
   15d68:	mov	r0, #256	; 0x100
   15d6c:	str	r0, [r4, #8]
   15d70:	str	r5, [r4, #12]
   15d74:	add	r5, r4, #8
   15d78:	cmp	r6, r5
   15d7c:	beq	15d8c <__assert_fail@plt+0x4cec>
   15d80:	mov	r0, r6
   15d84:	bl	14558 <__assert_fail@plt+0x34b8>
   15d88:	str	r5, [r4]
   15d8c:	mov	r0, #1
   15d90:	str	r0, [r4, #4]
   15d94:	pop	{r4, r5, r6, r7, fp, pc}
   15d98:	movw	r3, #54408	; 0xd488
   15d9c:	mvn	r2, #0
   15da0:	movt	r3, #2
   15da4:	b	15da8 <__assert_fail@plt+0x4d08>
   15da8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15dac:	add	fp, sp, #28
   15db0:	sub	sp, sp, #44	; 0x2c
   15db4:	mov	r7, r3
   15db8:	str	r2, [sp, #36]	; 0x24
   15dbc:	str	r1, [sp, #32]
   15dc0:	mov	r5, r0
   15dc4:	bl	10fe0 <__errno_location@plt>
   15dc8:	cmp	r5, #0
   15dcc:	bmi	15f34 <__assert_fail@plt+0x4e94>
   15dd0:	cmn	r5, #-2147483647	; 0x80000001
   15dd4:	beq	15f34 <__assert_fail@plt+0x4e94>
   15dd8:	movw	r8, #45352	; 0xb128
   15ddc:	mov	r4, r0
   15de0:	ldr	r0, [r0]
   15de4:	movt	r8, #2
   15de8:	str	r4, [sp, #28]
   15dec:	ldr	r1, [r8, #4]
   15df0:	ldr	r6, [r8]
   15df4:	str	r0, [sp, #24]
   15df8:	cmp	r1, r5
   15dfc:	ble	15e08 <__assert_fail@plt+0x4d68>
   15e00:	mov	sl, r6
   15e04:	b	15e70 <__assert_fail@plt+0x4dd0>
   15e08:	mov	r0, #8
   15e0c:	add	r9, r8, #8
   15e10:	str	r1, [fp, #-32]	; 0xffffffe0
   15e14:	sub	r1, r5, r1
   15e18:	mvn	r3, #-2147483648	; 0x80000000
   15e1c:	str	r0, [sp]
   15e20:	subs	r0, r6, r9
   15e24:	add	r2, r1, #1
   15e28:	sub	r1, fp, #32
   15e2c:	movne	r0, r6
   15e30:	bl	16eb0 <__assert_fail@plt+0x5e10>
   15e34:	mov	sl, r0
   15e38:	cmp	r6, r9
   15e3c:	str	r0, [r8]
   15e40:	bne	15e4c <__assert_fail@plt+0x4dac>
   15e44:	ldrd	r0, [r8, #8]
   15e48:	stm	sl, {r0, r1}
   15e4c:	ldr	r1, [r8, #4]
   15e50:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15e54:	add	r0, sl, r1, lsl #3
   15e58:	sub	r1, r2, r1
   15e5c:	lsl	r2, r1, #3
   15e60:	mov	r1, #0
   15e64:	bl	11004 <memset@plt>
   15e68:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15e6c:	str	r0, [r8, #4]
   15e70:	mov	r9, sl
   15e74:	ldm	r7, {r0, r1}
   15e78:	orr	r8, r1, #1
   15e7c:	add	r1, r7, #8
   15e80:	ldr	r2, [r7, #40]	; 0x28
   15e84:	ldr	r3, [r7, #44]	; 0x2c
   15e88:	ldr	r6, [r9, r5, lsl #3]!
   15e8c:	str	r1, [sp, #20]
   15e90:	ldr	r4, [r9, #4]!
   15e94:	stm	sp, {r0, r8}
   15e98:	add	r0, sp, #8
   15e9c:	stm	r0, {r1, r2, r3}
   15ea0:	ldr	r2, [sp, #32]
   15ea4:	ldr	r3, [sp, #36]	; 0x24
   15ea8:	mov	r1, r6
   15eac:	mov	r0, r4
   15eb0:	bl	147bc <__assert_fail@plt+0x371c>
   15eb4:	cmp	r6, r0
   15eb8:	bhi	15f1c <__assert_fail@plt+0x4e7c>
   15ebc:	add	r6, r0, #1
   15ec0:	movw	r0, #54456	; 0xd4b8
   15ec4:	movt	r0, #2
   15ec8:	str	r6, [sl, r5, lsl #3]
   15ecc:	cmp	r4, r0
   15ed0:	beq	15edc <__assert_fail@plt+0x4e3c>
   15ed4:	mov	r0, r4
   15ed8:	bl	14558 <__assert_fail@plt+0x34b8>
   15edc:	mov	r0, r6
   15ee0:	bl	16cb0 <__assert_fail@plt+0x5c10>
   15ee4:	str	r0, [r9]
   15ee8:	mov	r4, r0
   15eec:	add	r3, sp, #8
   15ef0:	ldr	r0, [r7]
   15ef4:	ldr	r1, [r7, #40]	; 0x28
   15ef8:	ldr	r2, [r7, #44]	; 0x2c
   15efc:	stm	sp, {r0, r8}
   15f00:	ldr	r0, [sp, #20]
   15f04:	stm	r3, {r0, r1, r2}
   15f08:	ldr	r2, [sp, #32]
   15f0c:	ldr	r3, [sp, #36]	; 0x24
   15f10:	mov	r0, r4
   15f14:	mov	r1, r6
   15f18:	bl	147bc <__assert_fail@plt+0x371c>
   15f1c:	ldr	r1, [sp, #24]
   15f20:	ldr	r0, [sp, #28]
   15f24:	str	r1, [r0]
   15f28:	mov	r0, r4
   15f2c:	sub	sp, fp, #28
   15f30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f34:	bl	11088 <abort@plt>
   15f38:	movw	r3, #54408	; 0xd488
   15f3c:	movt	r3, #2
   15f40:	b	15da8 <__assert_fail@plt+0x4d08>
   15f44:	movw	r3, #54408	; 0xd488
   15f48:	mov	r1, r0
   15f4c:	mov	r0, #0
   15f50:	mvn	r2, #0
   15f54:	movt	r3, #2
   15f58:	b	15da8 <__assert_fail@plt+0x4d08>
   15f5c:	movw	r3, #54408	; 0xd488
   15f60:	mov	r2, r1
   15f64:	mov	r1, r0
   15f68:	mov	r0, #0
   15f6c:	movt	r3, #2
   15f70:	b	15da8 <__assert_fail@plt+0x4d08>
   15f74:	push	{fp, lr}
   15f78:	mov	fp, sp
   15f7c:	sub	sp, sp, #48	; 0x30
   15f80:	vmov.i32	q8, #0	; 0x00000000
   15f84:	mov	ip, #32
   15f88:	mov	r3, sp
   15f8c:	mov	lr, r2
   15f90:	cmp	r1, #10
   15f94:	add	r2, r3, #16
   15f98:	vst1.64	{d16-d17}, [r3], ip
   15f9c:	vst1.64	{d16-d17}, [r2]
   15fa0:	vst1.64	{d16-d17}, [r3]
   15fa4:	beq	15fc4 <__assert_fail@plt+0x4f24>
   15fa8:	str	r1, [sp]
   15fac:	mov	r3, sp
   15fb0:	mov	r1, lr
   15fb4:	mvn	r2, #0
   15fb8:	bl	15da8 <__assert_fail@plt+0x4d08>
   15fbc:	mov	sp, fp
   15fc0:	pop	{fp, pc}
   15fc4:	bl	11088 <abort@plt>
   15fc8:	push	{r4, sl, fp, lr}
   15fcc:	add	fp, sp, #8
   15fd0:	sub	sp, sp, #48	; 0x30
   15fd4:	vmov.i32	q8, #0	; 0x00000000
   15fd8:	mov	ip, r3
   15fdc:	mov	r3, sp
   15fe0:	mov	lr, #32
   15fe4:	cmp	r1, #10
   15fe8:	add	r4, r3, #16
   15fec:	vst1.64	{d16-d17}, [r3], lr
   15ff0:	vst1.64	{d16-d17}, [r4]
   15ff4:	vst1.64	{d16-d17}, [r3]
   15ff8:	beq	16018 <__assert_fail@plt+0x4f78>
   15ffc:	str	r1, [sp]
   16000:	mov	r1, r2
   16004:	mov	r3, sp
   16008:	mov	r2, ip
   1600c:	bl	15da8 <__assert_fail@plt+0x4d08>
   16010:	sub	sp, fp, #8
   16014:	pop	{r4, sl, fp, pc}
   16018:	bl	11088 <abort@plt>
   1601c:	push	{fp, lr}
   16020:	mov	fp, sp
   16024:	sub	sp, sp, #48	; 0x30
   16028:	vmov.i32	q8, #0	; 0x00000000
   1602c:	mov	r3, sp
   16030:	mov	ip, #32
   16034:	cmp	r0, #10
   16038:	add	r2, r3, #16
   1603c:	vst1.64	{d16-d17}, [r3], ip
   16040:	vst1.64	{d16-d17}, [r2]
   16044:	vst1.64	{d16-d17}, [r3]
   16048:	beq	16068 <__assert_fail@plt+0x4fc8>
   1604c:	str	r0, [sp]
   16050:	mov	r3, sp
   16054:	mov	r0, #0
   16058:	mvn	r2, #0
   1605c:	bl	15da8 <__assert_fail@plt+0x4d08>
   16060:	mov	sp, fp
   16064:	pop	{fp, pc}
   16068:	bl	11088 <abort@plt>
   1606c:	push	{fp, lr}
   16070:	mov	fp, sp
   16074:	sub	sp, sp, #48	; 0x30
   16078:	vmov.i32	q8, #0	; 0x00000000
   1607c:	mov	r3, sp
   16080:	mov	ip, #32
   16084:	cmp	r0, #10
   16088:	add	lr, r3, #16
   1608c:	vst1.64	{d16-d17}, [r3], ip
   16090:	vst1.64	{d16-d17}, [lr]
   16094:	vst1.64	{d16-d17}, [r3]
   16098:	beq	160b4 <__assert_fail@plt+0x5014>
   1609c:	str	r0, [sp]
   160a0:	mov	r3, sp
   160a4:	mov	r0, #0
   160a8:	bl	15da8 <__assert_fail@plt+0x4d08>
   160ac:	mov	sp, fp
   160b0:	pop	{fp, pc}
   160b4:	bl	11088 <abort@plt>
   160b8:	push	{r4, sl, fp, lr}
   160bc:	add	fp, sp, #8
   160c0:	sub	sp, sp, #48	; 0x30
   160c4:	mov	lr, r0
   160c8:	movw	r0, #54408	; 0xd488
   160cc:	mov	ip, r1
   160d0:	mov	r1, #32
   160d4:	mov	r4, #1
   160d8:	movt	r0, #2
   160dc:	add	r3, r0, #16
   160e0:	vld1.64	{d16-d17}, [r0], r1
   160e4:	vld1.64	{d20-d21}, [r0]
   160e8:	vld1.64	{d18-d19}, [r3]
   160ec:	mov	r3, sp
   160f0:	add	r0, r3, #32
   160f4:	add	r1, r3, #16
   160f8:	vst1.64	{d20-d21}, [r0]
   160fc:	mov	r0, #28
   16100:	vst1.64	{d18-d19}, [r1]
   16104:	mov	r1, r3
   16108:	and	r0, r0, r2, lsr #3
   1610c:	and	r2, r2, #31
   16110:	vst1.64	{d16-d17}, [r1], r0
   16114:	ldr	r0, [r1, #8]
   16118:	bic	r4, r4, r0, lsr r2
   1611c:	eor	r0, r0, r4, lsl r2
   16120:	mov	r2, ip
   16124:	str	r0, [r1, #8]
   16128:	mov	r0, #0
   1612c:	mov	r1, lr
   16130:	bl	15da8 <__assert_fail@plt+0x4d08>
   16134:	sub	sp, fp, #8
   16138:	pop	{r4, sl, fp, pc}
   1613c:	push	{fp, lr}
   16140:	mov	fp, sp
   16144:	sub	sp, sp, #48	; 0x30
   16148:	mov	ip, r0
   1614c:	movw	r0, #54408	; 0xd488
   16150:	mov	r2, #32
   16154:	movt	r0, #2
   16158:	add	r3, r0, #16
   1615c:	vld1.64	{d16-d17}, [r0], r2
   16160:	vld1.64	{d20-d21}, [r0]
   16164:	vld1.64	{d18-d19}, [r3]
   16168:	mov	r3, sp
   1616c:	add	r0, r3, #32
   16170:	add	r2, r3, #16
   16174:	vst1.64	{d20-d21}, [r0]
   16178:	mov	r0, #28
   1617c:	vst1.64	{d18-d19}, [r2]
   16180:	mov	r2, r3
   16184:	and	r0, r0, r1, lsr #3
   16188:	and	r1, r1, #31
   1618c:	vst1.64	{d16-d17}, [r2], r0
   16190:	mov	r0, #1
   16194:	ldr	lr, [r2, #8]
   16198:	bic	r0, r0, lr, lsr r1
   1619c:	eor	r0, lr, r0, lsl r1
   161a0:	mov	r1, ip
   161a4:	str	r0, [r2, #8]
   161a8:	mov	r0, #0
   161ac:	mvn	r2, #0
   161b0:	bl	15da8 <__assert_fail@plt+0x4d08>
   161b4:	mov	sp, fp
   161b8:	pop	{fp, pc}
   161bc:	push	{fp, lr}
   161c0:	mov	fp, sp
   161c4:	sub	sp, sp, #48	; 0x30
   161c8:	mov	r1, r0
   161cc:	movw	r0, #54408	; 0xd488
   161d0:	mov	r3, #32
   161d4:	movt	r0, #2
   161d8:	add	r2, r0, #16
   161dc:	vld1.64	{d16-d17}, [r0], r3
   161e0:	mov	r3, sp
   161e4:	vld1.64	{d18-d19}, [r2]
   161e8:	vld1.64	{d20-d21}, [r0]
   161ec:	add	r2, r3, #16
   161f0:	add	r0, r3, #32
   161f4:	vst1.64	{d18-d19}, [r2]
   161f8:	vst1.64	{d20-d21}, [r0]
   161fc:	mov	r0, #12
   16200:	mov	r2, r3
   16204:	vst1.64	{d16-d17}, [r2], r0
   16208:	ldr	r0, [r2]
   1620c:	orr	r0, r0, #67108864	; 0x4000000
   16210:	str	r0, [r2]
   16214:	mov	r0, #0
   16218:	mvn	r2, #0
   1621c:	bl	15da8 <__assert_fail@plt+0x4d08>
   16220:	mov	sp, fp
   16224:	pop	{fp, pc}
   16228:	push	{fp, lr}
   1622c:	mov	fp, sp
   16230:	sub	sp, sp, #48	; 0x30
   16234:	mov	ip, r1
   16238:	mov	r1, r0
   1623c:	movw	r0, #54408	; 0xd488
   16240:	mov	r2, #32
   16244:	movt	r0, #2
   16248:	add	r3, r0, #16
   1624c:	vld1.64	{d16-d17}, [r0], r2
   16250:	vld1.64	{d18-d19}, [r3]
   16254:	vld1.64	{d20-d21}, [r0]
   16258:	mov	r3, sp
   1625c:	add	r2, r3, #16
   16260:	add	r0, r3, #32
   16264:	vst1.64	{d18-d19}, [r2]
   16268:	vst1.64	{d20-d21}, [r0]
   1626c:	mov	r0, #12
   16270:	mov	r2, r3
   16274:	vst1.64	{d16-d17}, [r2], r0
   16278:	ldr	r0, [r2]
   1627c:	orr	r0, r0, #67108864	; 0x4000000
   16280:	str	r0, [r2]
   16284:	mov	r0, #0
   16288:	mov	r2, ip
   1628c:	bl	15da8 <__assert_fail@plt+0x4d08>
   16290:	mov	sp, fp
   16294:	pop	{fp, pc}
   16298:	push	{r4, sl, fp, lr}
   1629c:	add	fp, sp, #8
   162a0:	sub	sp, sp, #96	; 0x60
   162a4:	vmov.i32	q8, #0	; 0x00000000
   162a8:	mov	ip, r2
   162ac:	mov	r2, sp
   162b0:	mov	r4, #28
   162b4:	cmp	r1, #10
   162b8:	mov	r3, r2
   162bc:	add	lr, r2, #16
   162c0:	vst1.64	{d16-d17}, [r3], r4
   162c4:	vst1.64	{d16-d17}, [lr]
   162c8:	vst1.32	{d16-d17}, [r3]
   162cc:	beq	1631c <__assert_fail@plt+0x527c>
   162d0:	vld1.64	{d16-d17}, [r2], r4
   162d4:	vld1.64	{d18-d19}, [lr]
   162d8:	add	r3, sp, #48	; 0x30
   162dc:	vld1.32	{d20-d21}, [r2]
   162e0:	add	r2, r3, #20
   162e4:	add	r4, r3, #4
   162e8:	vst1.32	{d18-d19}, [r2]
   162ec:	add	r2, r3, #32
   162f0:	vst1.32	{d16-d17}, [r4]
   162f4:	vst1.32	{d20-d21}, [r2]
   162f8:	str	r1, [sp, #48]	; 0x30
   162fc:	mvn	r2, #0
   16300:	ldr	r1, [sp, #60]	; 0x3c
   16304:	orr	r1, r1, #67108864	; 0x4000000
   16308:	str	r1, [sp, #60]	; 0x3c
   1630c:	mov	r1, ip
   16310:	bl	15da8 <__assert_fail@plt+0x4d08>
   16314:	sub	sp, fp, #8
   16318:	pop	{r4, sl, fp, pc}
   1631c:	bl	11088 <abort@plt>
   16320:	push	{r4, r5, r6, sl, fp, lr}
   16324:	add	fp, sp, #16
   16328:	sub	sp, sp, #48	; 0x30
   1632c:	mov	ip, r3
   16330:	movw	r3, #54408	; 0xd488
   16334:	mov	r6, #32
   16338:	cmp	r1, #0
   1633c:	mov	r4, sp
   16340:	movt	r3, #2
   16344:	cmpne	r2, #0
   16348:	add	r5, r4, #16
   1634c:	add	lr, r3, #16
   16350:	vld1.64	{d16-d17}, [r3], r6
   16354:	vld1.64	{d18-d19}, [lr]
   16358:	vld1.64	{d20-d21}, [r3]
   1635c:	mov	r3, #10
   16360:	vst1.64	{d16-d17}, [r4], r6
   16364:	vst1.64	{d18-d19}, [r5]
   16368:	vst1.64	{d20-d21}, [r4]
   1636c:	str	r3, [sp]
   16370:	bne	16378 <__assert_fail@plt+0x52d8>
   16374:	bl	11088 <abort@plt>
   16378:	str	r2, [sp, #44]	; 0x2c
   1637c:	str	r1, [sp, #40]	; 0x28
   16380:	mov	r3, sp
   16384:	mov	r1, ip
   16388:	mvn	r2, #0
   1638c:	bl	15da8 <__assert_fail@plt+0x4d08>
   16390:	sub	sp, fp, #16
   16394:	pop	{r4, r5, r6, sl, fp, pc}
   16398:	push	{r4, r5, r6, sl, fp, lr}
   1639c:	add	fp, sp, #16
   163a0:	sub	sp, sp, #48	; 0x30
   163a4:	mov	lr, r3
   163a8:	movw	r3, #54408	; 0xd488
   163ac:	mov	r6, #32
   163b0:	cmp	r1, #0
   163b4:	mov	r4, sp
   163b8:	movt	r3, #2
   163bc:	cmpne	r2, #0
   163c0:	add	r5, r4, #16
   163c4:	add	ip, r3, #16
   163c8:	vld1.64	{d16-d17}, [r3], r6
   163cc:	vld1.64	{d18-d19}, [ip]
   163d0:	vld1.64	{d20-d21}, [r3]
   163d4:	mov	r3, #10
   163d8:	vst1.64	{d16-d17}, [r4], r6
   163dc:	vst1.64	{d18-d19}, [r5]
   163e0:	vst1.64	{d20-d21}, [r4]
   163e4:	str	r3, [sp]
   163e8:	bne	163f0 <__assert_fail@plt+0x5350>
   163ec:	bl	11088 <abort@plt>
   163f0:	ldr	ip, [fp, #8]
   163f4:	str	r2, [sp, #44]	; 0x2c
   163f8:	str	r1, [sp, #40]	; 0x28
   163fc:	mov	r3, sp
   16400:	mov	r1, lr
   16404:	mov	r2, ip
   16408:	bl	15da8 <__assert_fail@plt+0x4d08>
   1640c:	sub	sp, fp, #16
   16410:	pop	{r4, r5, r6, sl, fp, pc}
   16414:	push	{r4, sl, fp, lr}
   16418:	add	fp, sp, #8
   1641c:	sub	sp, sp, #48	; 0x30
   16420:	movw	r3, #54408	; 0xd488
   16424:	mov	lr, #32
   16428:	mov	ip, r2
   1642c:	cmp	r0, #0
   16430:	movt	r3, #2
   16434:	cmpne	r1, #0
   16438:	add	r2, r3, #16
   1643c:	vld1.64	{d16-d17}, [r3], lr
   16440:	vld1.64	{d20-d21}, [r3]
   16444:	vld1.64	{d18-d19}, [r2]
   16448:	mov	r2, sp
   1644c:	add	r4, r2, #16
   16450:	vst1.64	{d16-d17}, [r2], lr
   16454:	vst1.64	{d20-d21}, [r2]
   16458:	mov	r2, #10
   1645c:	vst1.64	{d18-d19}, [r4]
   16460:	str	r2, [sp]
   16464:	bne	1646c <__assert_fail@plt+0x53cc>
   16468:	bl	11088 <abort@plt>
   1646c:	str	r1, [sp, #44]	; 0x2c
   16470:	str	r0, [sp, #40]	; 0x28
   16474:	mov	r3, sp
   16478:	mov	r0, #0
   1647c:	mov	r1, ip
   16480:	mvn	r2, #0
   16484:	bl	15da8 <__assert_fail@plt+0x4d08>
   16488:	sub	sp, fp, #8
   1648c:	pop	{r4, sl, fp, pc}
   16490:	push	{r4, r5, fp, lr}
   16494:	add	fp, sp, #8
   16498:	sub	sp, sp, #48	; 0x30
   1649c:	mov	ip, r3
   164a0:	movw	r3, #54408	; 0xd488
   164a4:	mov	r4, #32
   164a8:	mov	lr, r2
   164ac:	cmp	r0, #0
   164b0:	movt	r3, #2
   164b4:	cmpne	r1, #0
   164b8:	add	r2, r3, #16
   164bc:	vld1.64	{d16-d17}, [r3], r4
   164c0:	vld1.64	{d20-d21}, [r3]
   164c4:	vld1.64	{d18-d19}, [r2]
   164c8:	mov	r2, sp
   164cc:	add	r5, r2, #16
   164d0:	vst1.64	{d16-d17}, [r2], r4
   164d4:	vst1.64	{d20-d21}, [r2]
   164d8:	mov	r2, #10
   164dc:	vst1.64	{d18-d19}, [r5]
   164e0:	str	r2, [sp]
   164e4:	bne	164ec <__assert_fail@plt+0x544c>
   164e8:	bl	11088 <abort@plt>
   164ec:	str	r1, [sp, #44]	; 0x2c
   164f0:	str	r0, [sp, #40]	; 0x28
   164f4:	mov	r3, sp
   164f8:	mov	r0, #0
   164fc:	mov	r1, lr
   16500:	mov	r2, ip
   16504:	bl	15da8 <__assert_fail@plt+0x4d08>
   16508:	sub	sp, fp, #8
   1650c:	pop	{r4, r5, fp, pc}
   16510:	movw	r3, #45304	; 0xb0f8
   16514:	movt	r3, #2
   16518:	b	15da8 <__assert_fail@plt+0x4d08>
   1651c:	movw	r3, #45304	; 0xb0f8
   16520:	mov	r2, r1
   16524:	mov	r1, r0
   16528:	mov	r0, #0
   1652c:	movt	r3, #2
   16530:	b	15da8 <__assert_fail@plt+0x4d08>
   16534:	movw	r3, #45304	; 0xb0f8
   16538:	mvn	r2, #0
   1653c:	movt	r3, #2
   16540:	b	15da8 <__assert_fail@plt+0x4d08>
   16544:	movw	r3, #45304	; 0xb0f8
   16548:	mov	r1, r0
   1654c:	mov	r0, #0
   16550:	mvn	r2, #0
   16554:	movt	r3, #2
   16558:	b	15da8 <__assert_fail@plt+0x4d08>
   1655c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16560:	add	fp, sp, #24
   16564:	movw	r8, #0
   16568:	mov	r6, r2
   1656c:	mov	r4, r1
   16570:	mov	r5, r0
   16574:	movt	r8, #32752	; 0x7ff0
   16578:	mov	r0, r5
   1657c:	mov	r1, r4
   16580:	mov	r2, r6
   16584:	bl	10e6c <read@plt>
   16588:	mov	r7, r0
   1658c:	cmn	r0, #1
   16590:	bgt	165b8 <__assert_fail@plt+0x5518>
   16594:	bl	10fe0 <__errno_location@plt>
   16598:	ldr	r0, [r0]
   1659c:	cmp	r0, #4
   165a0:	beq	16578 <__assert_fail@plt+0x54d8>
   165a4:	cmp	r6, r8
   165a8:	bls	165b8 <__assert_fail@plt+0x5518>
   165ac:	cmp	r0, #22
   165b0:	mov	r6, r8
   165b4:	beq	16578 <__assert_fail@plt+0x54d8>
   165b8:	mov	r0, r7
   165bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   165c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   165c4:	add	fp, sp, #24
   165c8:	sub	sp, sp, #32
   165cc:	ldr	r6, [fp, #12]
   165d0:	ldr	r7, [fp, #8]
   165d4:	mov	r4, r2
   165d8:	mov	r8, r0
   165dc:	cmp	r1, #0
   165e0:	beq	16608 <__assert_fail@plt+0x5568>
   165e4:	movw	r2, #39840	; 0x9ba0
   165e8:	mov	r5, r1
   165ec:	str	r3, [sp, #4]
   165f0:	str	r4, [sp]
   165f4:	mov	r0, r8
   165f8:	mov	r1, #1
   165fc:	movt	r2, #1
   16600:	mov	r3, r5
   16604:	b	16620 <__assert_fail@plt+0x5580>
   16608:	movw	r2, #39852	; 0x9bac
   1660c:	str	r3, [sp]
   16610:	mov	r0, r8
   16614:	mov	r1, #1
   16618:	mov	r3, r4
   1661c:	movt	r2, #1
   16620:	bl	11028 <__fprintf_chk@plt>
   16624:	movw	r1, #39859	; 0x9bb3
   16628:	mov	r0, #0
   1662c:	mov	r2, #5
   16630:	movt	r1, #1
   16634:	bl	10ed8 <dcgettext@plt>
   16638:	movw	r2, #40577	; 0x9e81
   1663c:	mov	r3, r0
   16640:	movw	r0, #2022	; 0x7e6
   16644:	mov	r1, #1
   16648:	movt	r2, #1
   1664c:	str	r0, [sp]
   16650:	mov	r0, r8
   16654:	bl	11028 <__fprintf_chk@plt>
   16658:	movw	r4, #37270	; 0x9196
   1665c:	mov	r1, r8
   16660:	movt	r4, #1
   16664:	mov	r0, r4
   16668:	bl	10e3c <fputs_unlocked@plt>
   1666c:	movw	r1, #39863	; 0x9bb7
   16670:	mov	r0, #0
   16674:	mov	r2, #5
   16678:	movt	r1, #1
   1667c:	bl	10ed8 <dcgettext@plt>
   16680:	movw	r3, #40034	; 0x9c62
   16684:	mov	r2, r0
   16688:	mov	r0, r8
   1668c:	mov	r1, #1
   16690:	movt	r3, #1
   16694:	bl	11028 <__fprintf_chk@plt>
   16698:	mov	r0, r4
   1669c:	mov	r1, r8
   166a0:	bl	10e3c <fputs_unlocked@plt>
   166a4:	cmp	r6, #9
   166a8:	bhi	166e4 <__assert_fail@plt+0x5644>
   166ac:	add	r0, pc, #0
   166b0:	ldr	pc, [r0, r6, lsl #2]
   166b4:	ldrdeq	r6, [r1], -ip
   166b8:	strdeq	r6, [r1], -r0
   166bc:	andeq	r6, r1, r0, lsr #14
   166c0:	andeq	r6, r1, r8, asr #14
   166c4:	andeq	r6, r1, r0, ror r7
   166c8:	muleq	r1, r8, r7
   166cc:	andeq	r6, r1, r0, asr #15
   166d0:	strdeq	r6, [r1], -r8
   166d4:	andeq	r6, r1, r0, lsr #17
   166d8:	andeq	r6, r1, r8, asr #16
   166dc:	sub	sp, fp, #24
   166e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   166e4:	movw	r1, #40387	; 0x9dc3
   166e8:	movt	r1, #1
   166ec:	b	16850 <__assert_fail@plt+0x57b0>
   166f0:	movw	r1, #40068	; 0x9c84
   166f4:	mov	r0, #0
   166f8:	mov	r2, #5
   166fc:	movt	r1, #1
   16700:	bl	10ed8 <dcgettext@plt>
   16704:	ldr	r3, [r7]
   16708:	mov	r2, r0
   1670c:	mov	r0, r8
   16710:	mov	r1, #1
   16714:	sub	sp, fp, #24
   16718:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1671c:	b	11028 <__fprintf_chk@plt>
   16720:	movw	r1, #40084	; 0x9c94
   16724:	mov	r0, #0
   16728:	mov	r2, #5
   1672c:	movt	r1, #1
   16730:	bl	10ed8 <dcgettext@plt>
   16734:	mov	r2, r0
   16738:	ldr	r3, [r7]
   1673c:	ldr	r0, [r7, #4]
   16740:	str	r0, [sp]
   16744:	b	16834 <__assert_fail@plt+0x5794>
   16748:	movw	r1, #40107	; 0x9cab
   1674c:	mov	r0, #0
   16750:	mov	r2, #5
   16754:	movt	r1, #1
   16758:	bl	10ed8 <dcgettext@plt>
   1675c:	mov	r2, r0
   16760:	ldr	r3, [r7]
   16764:	ldmib	r7, {r0, r1}
   16768:	stm	sp, {r0, r1}
   1676c:	b	16834 <__assert_fail@plt+0x5794>
   16770:	movw	r1, #40135	; 0x9cc7
   16774:	mov	r0, #0
   16778:	mov	r2, #5
   1677c:	movt	r1, #1
   16780:	bl	10ed8 <dcgettext@plt>
   16784:	ldr	r3, [r7]
   16788:	mov	r2, r0
   1678c:	ldmib	r7, {r0, r1, r7}
   16790:	stm	sp, {r0, r1, r7}
   16794:	b	16834 <__assert_fail@plt+0x5794>
   16798:	movw	r1, #40167	; 0x9ce7
   1679c:	mov	r0, #0
   167a0:	mov	r2, #5
   167a4:	movt	r1, #1
   167a8:	bl	10ed8 <dcgettext@plt>
   167ac:	ldr	r3, [r7]
   167b0:	mov	r2, r0
   167b4:	ldmib	r7, {r0, r1, r6, r7}
   167b8:	stm	sp, {r0, r1, r6, r7}
   167bc:	b	16834 <__assert_fail@plt+0x5794>
   167c0:	movw	r1, #40203	; 0x9d0b
   167c4:	mov	r0, #0
   167c8:	mov	r2, #5
   167cc:	movt	r1, #1
   167d0:	bl	10ed8 <dcgettext@plt>
   167d4:	mov	r2, r0
   167d8:	ldr	r3, [r7]
   167dc:	ldmib	r7, {r0, r1, r6}
   167e0:	ldr	r5, [r7, #16]
   167e4:	ldr	r7, [r7, #20]
   167e8:	stm	sp, {r0, r1, r6}
   167ec:	str	r5, [sp, #12]
   167f0:	str	r7, [sp, #16]
   167f4:	b	16834 <__assert_fail@plt+0x5794>
   167f8:	movw	r1, #40243	; 0x9d33
   167fc:	mov	r0, #0
   16800:	mov	r2, #5
   16804:	movt	r1, #1
   16808:	bl	10ed8 <dcgettext@plt>
   1680c:	mov	r2, r0
   16810:	ldr	r3, [r7]
   16814:	ldmib	r7, {r0, r1, r6}
   16818:	ldr	r5, [r7, #16]
   1681c:	ldr	r4, [r7, #20]
   16820:	ldr	r7, [r7, #24]
   16824:	stm	sp, {r0, r1, r6}
   16828:	str	r5, [sp, #12]
   1682c:	str	r4, [sp, #16]
   16830:	str	r7, [sp, #20]
   16834:	mov	r0, r8
   16838:	mov	r1, #1
   1683c:	bl	11028 <__fprintf_chk@plt>
   16840:	sub	sp, fp, #24
   16844:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16848:	movw	r1, #40335	; 0x9d8f
   1684c:	movt	r1, #1
   16850:	mov	r0, #0
   16854:	mov	r2, #5
   16858:	bl	10ed8 <dcgettext@plt>
   1685c:	mov	ip, r0
   16860:	ldr	r3, [r7]
   16864:	ldr	r0, [r7, #4]
   16868:	ldr	r1, [r7, #8]
   1686c:	ldr	r6, [r7, #12]
   16870:	ldr	r5, [r7, #16]
   16874:	ldr	r4, [r7, #20]
   16878:	ldr	r2, [r7, #24]
   1687c:	ldr	lr, [r7, #28]
   16880:	ldr	r7, [r7, #32]
   16884:	stm	sp, {r0, r1, r6}
   16888:	str	r5, [sp, #12]
   1688c:	str	r4, [sp, #16]
   16890:	str	r2, [sp, #20]
   16894:	str	lr, [sp, #24]
   16898:	str	r7, [sp, #28]
   1689c:	b	168e4 <__assert_fail@plt+0x5844>
   168a0:	movw	r1, #40287	; 0x9d5f
   168a4:	mov	r0, #0
   168a8:	mov	r2, #5
   168ac:	movt	r1, #1
   168b0:	bl	10ed8 <dcgettext@plt>
   168b4:	mov	ip, r0
   168b8:	ldr	r3, [r7]
   168bc:	ldmib	r7, {r0, r1, r6}
   168c0:	ldr	r5, [r7, #16]
   168c4:	ldr	r4, [r7, #20]
   168c8:	ldr	r2, [r7, #24]
   168cc:	ldr	r7, [r7, #28]
   168d0:	stm	sp, {r0, r1, r6}
   168d4:	str	r5, [sp, #12]
   168d8:	str	r4, [sp, #16]
   168dc:	str	r2, [sp, #20]
   168e0:	str	r7, [sp, #24]
   168e4:	mov	r0, r8
   168e8:	mov	r1, #1
   168ec:	mov	r2, ip
   168f0:	bl	11028 <__fprintf_chk@plt>
   168f4:	sub	sp, fp, #24
   168f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   168fc:	push	{r4, sl, fp, lr}
   16900:	add	fp, sp, #8
   16904:	sub	sp, sp, #8
   16908:	ldr	ip, [fp, #8]
   1690c:	mov	lr, #0
   16910:	ldr	r4, [ip, lr, lsl #2]
   16914:	add	lr, lr, #1
   16918:	cmp	r4, #0
   1691c:	bne	16910 <__assert_fail@plt+0x5870>
   16920:	sub	r4, lr, #1
   16924:	str	ip, [sp]
   16928:	str	r4, [sp, #4]
   1692c:	bl	165c0 <__assert_fail@plt+0x5520>
   16930:	sub	sp, fp, #8
   16934:	pop	{r4, sl, fp, pc}
   16938:	push	{fp, lr}
   1693c:	mov	fp, sp
   16940:	sub	sp, sp, #48	; 0x30
   16944:	ldr	ip, [fp, #8]
   16948:	ldr	lr, [ip]
   1694c:	cmp	lr, #0
   16950:	str	lr, [sp, #8]
   16954:	beq	169f0 <__assert_fail@plt+0x5950>
   16958:	ldr	lr, [ip, #4]
   1695c:	cmp	lr, #0
   16960:	str	lr, [sp, #12]
   16964:	beq	169f8 <__assert_fail@plt+0x5958>
   16968:	ldr	lr, [ip, #8]
   1696c:	cmp	lr, #0
   16970:	str	lr, [sp, #16]
   16974:	beq	16a00 <__assert_fail@plt+0x5960>
   16978:	ldr	lr, [ip, #12]
   1697c:	cmp	lr, #0
   16980:	str	lr, [sp, #20]
   16984:	beq	16a08 <__assert_fail@plt+0x5968>
   16988:	ldr	lr, [ip, #16]
   1698c:	cmp	lr, #0
   16990:	str	lr, [sp, #24]
   16994:	beq	16a10 <__assert_fail@plt+0x5970>
   16998:	ldr	lr, [ip, #20]
   1699c:	cmp	lr, #0
   169a0:	str	lr, [sp, #28]
   169a4:	beq	16a18 <__assert_fail@plt+0x5978>
   169a8:	ldr	lr, [ip, #24]
   169ac:	cmp	lr, #0
   169b0:	str	lr, [sp, #32]
   169b4:	beq	16a20 <__assert_fail@plt+0x5980>
   169b8:	ldr	lr, [ip, #28]
   169bc:	cmp	lr, #0
   169c0:	str	lr, [sp, #36]	; 0x24
   169c4:	beq	16a28 <__assert_fail@plt+0x5988>
   169c8:	ldr	lr, [ip, #32]
   169cc:	cmp	lr, #0
   169d0:	str	lr, [sp, #40]	; 0x28
   169d4:	beq	16a30 <__assert_fail@plt+0x5990>
   169d8:	ldr	lr, [ip, #36]	; 0x24
   169dc:	mov	ip, #10
   169e0:	cmp	lr, #0
   169e4:	str	lr, [sp, #44]	; 0x2c
   169e8:	movweq	ip, #9
   169ec:	b	16a34 <__assert_fail@plt+0x5994>
   169f0:	mov	ip, #0
   169f4:	b	16a34 <__assert_fail@plt+0x5994>
   169f8:	mov	ip, #1
   169fc:	b	16a34 <__assert_fail@plt+0x5994>
   16a00:	mov	ip, #2
   16a04:	b	16a34 <__assert_fail@plt+0x5994>
   16a08:	mov	ip, #3
   16a0c:	b	16a34 <__assert_fail@plt+0x5994>
   16a10:	mov	ip, #4
   16a14:	b	16a34 <__assert_fail@plt+0x5994>
   16a18:	mov	ip, #5
   16a1c:	b	16a34 <__assert_fail@plt+0x5994>
   16a20:	mov	ip, #6
   16a24:	b	16a34 <__assert_fail@plt+0x5994>
   16a28:	mov	ip, #7
   16a2c:	b	16a34 <__assert_fail@plt+0x5994>
   16a30:	mov	ip, #8
   16a34:	add	lr, sp, #8
   16a38:	str	ip, [sp, #4]
   16a3c:	str	lr, [sp]
   16a40:	bl	165c0 <__assert_fail@plt+0x5520>
   16a44:	mov	sp, fp
   16a48:	pop	{fp, pc}
   16a4c:	push	{fp, lr}
   16a50:	mov	fp, sp
   16a54:	sub	sp, sp, #56	; 0x38
   16a58:	add	ip, fp, #8
   16a5c:	str	ip, [sp, #12]
   16a60:	ldr	lr, [fp, #8]
   16a64:	cmp	lr, #0
   16a68:	str	lr, [sp, #16]
   16a6c:	beq	16b08 <__assert_fail@plt+0x5a68>
   16a70:	ldr	lr, [ip, #4]
   16a74:	cmp	lr, #0
   16a78:	str	lr, [sp, #20]
   16a7c:	beq	16b10 <__assert_fail@plt+0x5a70>
   16a80:	ldr	lr, [ip, #8]
   16a84:	cmp	lr, #0
   16a88:	str	lr, [sp, #24]
   16a8c:	beq	16b18 <__assert_fail@plt+0x5a78>
   16a90:	ldr	lr, [ip, #12]
   16a94:	cmp	lr, #0
   16a98:	str	lr, [sp, #28]
   16a9c:	beq	16b20 <__assert_fail@plt+0x5a80>
   16aa0:	ldr	lr, [ip, #16]
   16aa4:	cmp	lr, #0
   16aa8:	str	lr, [sp, #32]
   16aac:	beq	16b28 <__assert_fail@plt+0x5a88>
   16ab0:	ldr	lr, [ip, #20]
   16ab4:	cmp	lr, #0
   16ab8:	str	lr, [sp, #36]	; 0x24
   16abc:	beq	16b30 <__assert_fail@plt+0x5a90>
   16ac0:	ldr	lr, [ip, #24]
   16ac4:	cmp	lr, #0
   16ac8:	str	lr, [sp, #40]	; 0x28
   16acc:	beq	16b38 <__assert_fail@plt+0x5a98>
   16ad0:	ldr	lr, [ip, #28]
   16ad4:	cmp	lr, #0
   16ad8:	str	lr, [sp, #44]	; 0x2c
   16adc:	beq	16b40 <__assert_fail@plt+0x5aa0>
   16ae0:	ldr	lr, [ip, #32]
   16ae4:	cmp	lr, #0
   16ae8:	str	lr, [sp, #48]	; 0x30
   16aec:	beq	16b48 <__assert_fail@plt+0x5aa8>
   16af0:	ldr	lr, [ip, #36]	; 0x24
   16af4:	mov	ip, #10
   16af8:	cmp	lr, #0
   16afc:	str	lr, [sp, #52]	; 0x34
   16b00:	movweq	ip, #9
   16b04:	b	16b4c <__assert_fail@plt+0x5aac>
   16b08:	mov	ip, #0
   16b0c:	b	16b4c <__assert_fail@plt+0x5aac>
   16b10:	mov	ip, #1
   16b14:	b	16b4c <__assert_fail@plt+0x5aac>
   16b18:	mov	ip, #2
   16b1c:	b	16b4c <__assert_fail@plt+0x5aac>
   16b20:	mov	ip, #3
   16b24:	b	16b4c <__assert_fail@plt+0x5aac>
   16b28:	mov	ip, #4
   16b2c:	b	16b4c <__assert_fail@plt+0x5aac>
   16b30:	mov	ip, #5
   16b34:	b	16b4c <__assert_fail@plt+0x5aac>
   16b38:	mov	ip, #6
   16b3c:	b	16b4c <__assert_fail@plt+0x5aac>
   16b40:	mov	ip, #7
   16b44:	b	16b4c <__assert_fail@plt+0x5aac>
   16b48:	mov	ip, #8
   16b4c:	add	lr, sp, #16
   16b50:	str	ip, [sp, #4]
   16b54:	str	lr, [sp]
   16b58:	bl	165c0 <__assert_fail@plt+0x5520>
   16b5c:	mov	sp, fp
   16b60:	pop	{fp, pc}
   16b64:	push	{fp, lr}
   16b68:	mov	fp, sp
   16b6c:	movw	r0, #45404	; 0xb15c
   16b70:	movt	r0, #2
   16b74:	ldr	r1, [r0]
   16b78:	movw	r0, #37270	; 0x9196
   16b7c:	movt	r0, #1
   16b80:	bl	10e3c <fputs_unlocked@plt>
   16b84:	movw	r1, #40447	; 0x9dff
   16b88:	mov	r0, #0
   16b8c:	mov	r2, #5
   16b90:	movt	r1, #1
   16b94:	bl	10ed8 <dcgettext@plt>
   16b98:	movw	r2, #40467	; 0x9e13
   16b9c:	mov	r1, r0
   16ba0:	mov	r0, #1
   16ba4:	movt	r2, #1
   16ba8:	bl	11010 <__printf_chk@plt>
   16bac:	movw	r1, #40489	; 0x9e29
   16bb0:	mov	r0, #0
   16bb4:	mov	r2, #5
   16bb8:	movt	r1, #1
   16bbc:	bl	10ed8 <dcgettext@plt>
   16bc0:	movw	r2, #36583	; 0x8ee7
   16bc4:	movw	r3, #37079	; 0x90d7
   16bc8:	mov	r1, r0
   16bcc:	mov	r0, #1
   16bd0:	movt	r2, #1
   16bd4:	movt	r3, #1
   16bd8:	bl	11010 <__printf_chk@plt>
   16bdc:	movw	r1, #40509	; 0x9e3d
   16be0:	mov	r0, #0
   16be4:	mov	r2, #5
   16be8:	movt	r1, #1
   16bec:	bl	10ed8 <dcgettext@plt>
   16bf0:	movw	r2, #40548	; 0x9e64
   16bf4:	mov	r1, r0
   16bf8:	mov	r0, #1
   16bfc:	movt	r2, #1
   16c00:	pop	{fp, lr}
   16c04:	b	11010 <__printf_chk@plt>
   16c08:	push	{r4, r5, r6, sl, fp, lr}
   16c0c:	add	fp, sp, #16
   16c10:	mov	r4, r2
   16c14:	mov	r5, r1
   16c18:	mov	r6, r0
   16c1c:	bl	1824c <__assert_fail@plt+0x71ac>
   16c20:	cmp	r0, #0
   16c24:	popne	{r4, r5, r6, sl, fp, pc}
   16c28:	cmp	r6, #0
   16c2c:	beq	16c40 <__assert_fail@plt+0x5ba0>
   16c30:	cmp	r5, #0
   16c34:	cmpne	r4, #0
   16c38:	bne	16c40 <__assert_fail@plt+0x5ba0>
   16c3c:	pop	{r4, r5, r6, sl, fp, pc}
   16c40:	bl	171bc <__assert_fail@plt+0x611c>
   16c44:	push	{r4, r5, r6, sl, fp, lr}
   16c48:	add	fp, sp, #16
   16c4c:	mov	r4, r2
   16c50:	mov	r5, r1
   16c54:	mov	r6, r0
   16c58:	bl	1824c <__assert_fail@plt+0x71ac>
   16c5c:	cmp	r0, #0
   16c60:	popne	{r4, r5, r6, sl, fp, pc}
   16c64:	cmp	r6, #0
   16c68:	beq	16c7c <__assert_fail@plt+0x5bdc>
   16c6c:	cmp	r5, #0
   16c70:	cmpne	r4, #0
   16c74:	bne	16c7c <__assert_fail@plt+0x5bdc>
   16c78:	pop	{r4, r5, r6, sl, fp, pc}
   16c7c:	bl	171bc <__assert_fail@plt+0x611c>
   16c80:	push	{fp, lr}
   16c84:	mov	fp, sp
   16c88:	bl	17f08 <__assert_fail@plt+0x6e68>
   16c8c:	cmp	r0, #0
   16c90:	popne	{fp, pc}
   16c94:	bl	171bc <__assert_fail@plt+0x611c>
   16c98:	push	{fp, lr}
   16c9c:	mov	fp, sp
   16ca0:	bl	17f08 <__assert_fail@plt+0x6e68>
   16ca4:	cmp	r0, #0
   16ca8:	popne	{fp, pc}
   16cac:	bl	171bc <__assert_fail@plt+0x611c>
   16cb0:	push	{fp, lr}
   16cb4:	mov	fp, sp
   16cb8:	bl	17f08 <__assert_fail@plt+0x6e68>
   16cbc:	cmp	r0, #0
   16cc0:	popne	{fp, pc}
   16cc4:	bl	171bc <__assert_fail@plt+0x611c>
   16cc8:	push	{r4, r5, fp, lr}
   16ccc:	add	fp, sp, #8
   16cd0:	mov	r4, r1
   16cd4:	mov	r5, r0
   16cd8:	bl	17f38 <__assert_fail@plt+0x6e98>
   16cdc:	cmp	r0, #0
   16ce0:	popne	{r4, r5, fp, pc}
   16ce4:	cmp	r5, #0
   16ce8:	beq	16cf8 <__assert_fail@plt+0x5c58>
   16cec:	cmp	r4, #0
   16cf0:	bne	16cf8 <__assert_fail@plt+0x5c58>
   16cf4:	pop	{r4, r5, fp, pc}
   16cf8:	bl	171bc <__assert_fail@plt+0x611c>
   16cfc:	push	{fp, lr}
   16d00:	mov	fp, sp
   16d04:	cmp	r1, #0
   16d08:	orreq	r1, r1, #1
   16d0c:	bl	17f38 <__assert_fail@plt+0x6e98>
   16d10:	cmp	r0, #0
   16d14:	popne	{fp, pc}
   16d18:	bl	171bc <__assert_fail@plt+0x611c>
   16d1c:	push	{fp, lr}
   16d20:	mov	fp, sp
   16d24:	clz	r3, r2
   16d28:	lsr	ip, r3, #5
   16d2c:	clz	r3, r1
   16d30:	lsr	r3, r3, #5
   16d34:	orrs	r3, r3, ip
   16d38:	movwne	r1, #1
   16d3c:	movwne	r2, #1
   16d40:	bl	1824c <__assert_fail@plt+0x71ac>
   16d44:	cmp	r0, #0
   16d48:	popne	{fp, pc}
   16d4c:	bl	171bc <__assert_fail@plt+0x611c>
   16d50:	push	{fp, lr}
   16d54:	mov	fp, sp
   16d58:	mov	r2, r1
   16d5c:	mov	r1, r0
   16d60:	mov	r0, #0
   16d64:	bl	1824c <__assert_fail@plt+0x71ac>
   16d68:	cmp	r0, #0
   16d6c:	popne	{fp, pc}
   16d70:	bl	171bc <__assert_fail@plt+0x611c>
   16d74:	push	{fp, lr}
   16d78:	mov	fp, sp
   16d7c:	mov	r2, r1
   16d80:	mov	r1, r0
   16d84:	clz	r0, r2
   16d88:	clz	r3, r1
   16d8c:	lsr	r0, r0, #5
   16d90:	lsr	r3, r3, #5
   16d94:	orrs	r0, r3, r0
   16d98:	mov	r0, #0
   16d9c:	movwne	r1, #1
   16da0:	movwne	r2, #1
   16da4:	bl	1824c <__assert_fail@plt+0x71ac>
   16da8:	cmp	r0, #0
   16dac:	popne	{fp, pc}
   16db0:	bl	171bc <__assert_fail@plt+0x611c>
   16db4:	push	{r4, r5, r6, sl, fp, lr}
   16db8:	add	fp, sp, #16
   16dbc:	ldr	r5, [r1]
   16dc0:	mov	r4, r1
   16dc4:	mov	r6, r0
   16dc8:	cmp	r0, #0
   16dcc:	beq	16de4 <__assert_fail@plt+0x5d44>
   16dd0:	mov	r0, #1
   16dd4:	add	r0, r0, r5, lsr #1
   16dd8:	adds	r5, r5, r0
   16ddc:	bcc	16dec <__assert_fail@plt+0x5d4c>
   16de0:	b	16e28 <__assert_fail@plt+0x5d88>
   16de4:	cmp	r5, #0
   16de8:	movweq	r5, #64	; 0x40
   16dec:	mov	r0, r6
   16df0:	mov	r1, r5
   16df4:	mov	r2, #1
   16df8:	bl	1824c <__assert_fail@plt+0x71ac>
   16dfc:	cmp	r5, #0
   16e00:	mov	r1, r5
   16e04:	movwne	r1, #1
   16e08:	cmp	r0, #0
   16e0c:	bne	16e20 <__assert_fail@plt+0x5d80>
   16e10:	clz	r2, r6
   16e14:	lsr	r2, r2, #5
   16e18:	orrs	r1, r2, r1
   16e1c:	bne	16e28 <__assert_fail@plt+0x5d88>
   16e20:	str	r5, [r4]
   16e24:	pop	{r4, r5, r6, sl, fp, pc}
   16e28:	bl	171bc <__assert_fail@plt+0x611c>
   16e2c:	push	{r4, r5, r6, r7, fp, lr}
   16e30:	add	fp, sp, #16
   16e34:	ldr	r5, [r1]
   16e38:	mov	r6, r2
   16e3c:	mov	r4, r1
   16e40:	mov	r7, r0
   16e44:	cmp	r0, #0
   16e48:	beq	16e60 <__assert_fail@plt+0x5dc0>
   16e4c:	mov	r0, #1
   16e50:	add	r0, r0, r5, lsr #1
   16e54:	adds	r5, r5, r0
   16e58:	bcc	16e78 <__assert_fail@plt+0x5dd8>
   16e5c:	b	16eac <__assert_fail@plt+0x5e0c>
   16e60:	cmp	r5, #0
   16e64:	bne	16e78 <__assert_fail@plt+0x5dd8>
   16e68:	mov	r0, #64	; 0x40
   16e6c:	cmp	r6, #64	; 0x40
   16e70:	udiv	r5, r0, r6
   16e74:	addhi	r5, r5, #1
   16e78:	mov	r0, r7
   16e7c:	mov	r1, r5
   16e80:	mov	r2, r6
   16e84:	bl	1824c <__assert_fail@plt+0x71ac>
   16e88:	cmp	r0, #0
   16e8c:	bne	16ea4 <__assert_fail@plt+0x5e04>
   16e90:	cmp	r7, #0
   16e94:	beq	16eac <__assert_fail@plt+0x5e0c>
   16e98:	cmp	r6, #0
   16e9c:	cmpne	r5, #0
   16ea0:	bne	16eac <__assert_fail@plt+0x5e0c>
   16ea4:	str	r5, [r4]
   16ea8:	pop	{r4, r5, r6, r7, fp, pc}
   16eac:	bl	171bc <__assert_fail@plt+0x611c>
   16eb0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16eb4:	add	fp, sp, #24
   16eb8:	mov	r8, r1
   16ebc:	ldr	r1, [r1]
   16ec0:	mov	r5, r0
   16ec4:	add	r0, r1, r1, asr #1
   16ec8:	cmp	r0, r1
   16ecc:	mvnvs	r0, #-2147483648	; 0x80000000
   16ed0:	cmp	r0, r3
   16ed4:	mov	r7, r0
   16ed8:	movgt	r7, r3
   16edc:	cmn	r3, #1
   16ee0:	movle	r7, r0
   16ee4:	ldr	r0, [fp, #8]
   16ee8:	cmn	r0, #1
   16eec:	ble	16f14 <__assert_fail@plt+0x5e74>
   16ef0:	cmp	r0, #0
   16ef4:	beq	16f68 <__assert_fail@plt+0x5ec8>
   16ef8:	cmn	r7, #1
   16efc:	ble	16f3c <__assert_fail@plt+0x5e9c>
   16f00:	mvn	r4, #-2147483648	; 0x80000000
   16f04:	udiv	r6, r4, r0
   16f08:	cmp	r6, r7
   16f0c:	bge	16f68 <__assert_fail@plt+0x5ec8>
   16f10:	b	16f78 <__assert_fail@plt+0x5ed8>
   16f14:	cmn	r7, #1
   16f18:	ble	16f58 <__assert_fail@plt+0x5eb8>
   16f1c:	cmn	r0, #1
   16f20:	beq	16f68 <__assert_fail@plt+0x5ec8>
   16f24:	mov	r6, #-2147483648	; 0x80000000
   16f28:	mvn	r4, #-2147483648	; 0x80000000
   16f2c:	sdiv	r6, r6, r0
   16f30:	cmp	r6, r7
   16f34:	bge	16f68 <__assert_fail@plt+0x5ec8>
   16f38:	b	16f78 <__assert_fail@plt+0x5ed8>
   16f3c:	beq	16f68 <__assert_fail@plt+0x5ec8>
   16f40:	mov	r6, #-2147483648	; 0x80000000
   16f44:	mvn	r4, #-2147483648	; 0x80000000
   16f48:	sdiv	r6, r6, r7
   16f4c:	cmp	r6, r0
   16f50:	bge	16f68 <__assert_fail@plt+0x5ec8>
   16f54:	b	16f78 <__assert_fail@plt+0x5ed8>
   16f58:	mvn	r4, #-2147483648	; 0x80000000
   16f5c:	sdiv	r6, r4, r0
   16f60:	cmp	r7, r6
   16f64:	blt	16f78 <__assert_fail@plt+0x5ed8>
   16f68:	mul	r6, r7, r0
   16f6c:	mov	r4, #64	; 0x40
   16f70:	cmp	r6, #63	; 0x3f
   16f74:	bgt	16f80 <__assert_fail@plt+0x5ee0>
   16f78:	sdiv	r7, r4, r0
   16f7c:	mul	r6, r7, r0
   16f80:	cmp	r5, #0
   16f84:	moveq	r4, #0
   16f88:	streq	r4, [r8]
   16f8c:	sub	r4, r7, r1
   16f90:	cmp	r4, r2
   16f94:	bge	17040 <__assert_fail@plt+0x5fa0>
   16f98:	add	r7, r1, r2
   16f9c:	mov	r6, #0
   16fa0:	mov	r2, #0
   16fa4:	cmp	r7, r3
   16fa8:	movwgt	r6, #1
   16fac:	cmn	r3, #1
   16fb0:	movwgt	r2, #1
   16fb4:	cmp	r7, r1
   16fb8:	bvs	17074 <__assert_fail@plt+0x5fd4>
   16fbc:	ands	r1, r2, r6
   16fc0:	bne	17074 <__assert_fail@plt+0x5fd4>
   16fc4:	cmn	r0, #1
   16fc8:	ble	16ff0 <__assert_fail@plt+0x5f50>
   16fcc:	cmp	r0, #0
   16fd0:	beq	1703c <__assert_fail@plt+0x5f9c>
   16fd4:	cmn	r7, #1
   16fd8:	ble	17014 <__assert_fail@plt+0x5f74>
   16fdc:	mvn	r1, #-2147483648	; 0x80000000
   16fe0:	udiv	r1, r1, r0
   16fe4:	cmp	r1, r7
   16fe8:	bge	1703c <__assert_fail@plt+0x5f9c>
   16fec:	b	17074 <__assert_fail@plt+0x5fd4>
   16ff0:	cmn	r7, #1
   16ff4:	ble	1702c <__assert_fail@plt+0x5f8c>
   16ff8:	cmn	r0, #1
   16ffc:	beq	1703c <__assert_fail@plt+0x5f9c>
   17000:	mov	r1, #-2147483648	; 0x80000000
   17004:	sdiv	r1, r1, r0
   17008:	cmp	r1, r7
   1700c:	bge	1703c <__assert_fail@plt+0x5f9c>
   17010:	b	17074 <__assert_fail@plt+0x5fd4>
   17014:	beq	1703c <__assert_fail@plt+0x5f9c>
   17018:	mov	r1, #-2147483648	; 0x80000000
   1701c:	sdiv	r1, r1, r7
   17020:	cmp	r1, r0
   17024:	bge	1703c <__assert_fail@plt+0x5f9c>
   17028:	b	17074 <__assert_fail@plt+0x5fd4>
   1702c:	mvn	r1, #-2147483648	; 0x80000000
   17030:	sdiv	r1, r1, r0
   17034:	cmp	r7, r1
   17038:	blt	17074 <__assert_fail@plt+0x5fd4>
   1703c:	mul	r6, r7, r0
   17040:	mov	r0, r5
   17044:	mov	r1, r6
   17048:	bl	17f38 <__assert_fail@plt+0x6e98>
   1704c:	cmp	r6, #0
   17050:	movwne	r6, #1
   17054:	cmp	r0, #0
   17058:	bne	1706c <__assert_fail@plt+0x5fcc>
   1705c:	clz	r1, r5
   17060:	lsr	r1, r1, #5
   17064:	orrs	r1, r1, r6
   17068:	bne	17074 <__assert_fail@plt+0x5fd4>
   1706c:	str	r7, [r8]
   17070:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17074:	bl	171bc <__assert_fail@plt+0x611c>
   17078:	push	{fp, lr}
   1707c:	mov	fp, sp
   17080:	mov	r1, #1
   17084:	bl	17eb4 <__assert_fail@plt+0x6e14>
   17088:	cmp	r0, #0
   1708c:	popne	{fp, pc}
   17090:	bl	171bc <__assert_fail@plt+0x611c>
   17094:	push	{fp, lr}
   17098:	mov	fp, sp
   1709c:	bl	17eb4 <__assert_fail@plt+0x6e14>
   170a0:	cmp	r0, #0
   170a4:	popne	{fp, pc}
   170a8:	bl	171bc <__assert_fail@plt+0x611c>
   170ac:	push	{fp, lr}
   170b0:	mov	fp, sp
   170b4:	mov	r1, #1
   170b8:	bl	17eb4 <__assert_fail@plt+0x6e14>
   170bc:	cmp	r0, #0
   170c0:	popne	{fp, pc}
   170c4:	bl	171bc <__assert_fail@plt+0x611c>
   170c8:	push	{fp, lr}
   170cc:	mov	fp, sp
   170d0:	bl	17eb4 <__assert_fail@plt+0x6e14>
   170d4:	cmp	r0, #0
   170d8:	popne	{fp, pc}
   170dc:	bl	171bc <__assert_fail@plt+0x611c>
   170e0:	push	{r4, r5, fp, lr}
   170e4:	add	fp, sp, #8
   170e8:	mov	r5, r0
   170ec:	mov	r0, r1
   170f0:	mov	r4, r1
   170f4:	bl	17f08 <__assert_fail@plt+0x6e68>
   170f8:	cmp	r0, #0
   170fc:	beq	17110 <__assert_fail@plt+0x6070>
   17100:	mov	r1, r5
   17104:	mov	r2, r4
   17108:	pop	{r4, r5, fp, lr}
   1710c:	b	10e9c <memcpy@plt>
   17110:	bl	171bc <__assert_fail@plt+0x611c>
   17114:	push	{r4, r5, fp, lr}
   17118:	add	fp, sp, #8
   1711c:	mov	r5, r0
   17120:	mov	r0, r1
   17124:	mov	r4, r1
   17128:	bl	17f08 <__assert_fail@plt+0x6e68>
   1712c:	cmp	r0, #0
   17130:	beq	17144 <__assert_fail@plt+0x60a4>
   17134:	mov	r1, r5
   17138:	mov	r2, r4
   1713c:	pop	{r4, r5, fp, lr}
   17140:	b	10e9c <memcpy@plt>
   17144:	bl	171bc <__assert_fail@plt+0x611c>
   17148:	push	{r4, r5, fp, lr}
   1714c:	add	fp, sp, #8
   17150:	mov	r5, r0
   17154:	add	r0, r1, #1
   17158:	mov	r4, r1
   1715c:	bl	17f08 <__assert_fail@plt+0x6e68>
   17160:	cmp	r0, #0
   17164:	beq	17180 <__assert_fail@plt+0x60e0>
   17168:	mov	r1, #0
   1716c:	mov	r2, r4
   17170:	strb	r1, [r0, r4]
   17174:	mov	r1, r5
   17178:	pop	{r4, r5, fp, lr}
   1717c:	b	10e9c <memcpy@plt>
   17180:	bl	171bc <__assert_fail@plt+0x611c>
   17184:	push	{r4, r5, fp, lr}
   17188:	add	fp, sp, #8
   1718c:	mov	r4, r0
   17190:	bl	10fc8 <strlen@plt>
   17194:	add	r5, r0, #1
   17198:	mov	r0, r5
   1719c:	bl	17f08 <__assert_fail@plt+0x6e68>
   171a0:	cmp	r0, #0
   171a4:	beq	171b8 <__assert_fail@plt+0x6118>
   171a8:	mov	r1, r4
   171ac:	mov	r2, r5
   171b0:	pop	{r4, r5, fp, lr}
   171b4:	b	10e9c <memcpy@plt>
   171b8:	bl	171bc <__assert_fail@plt+0x611c>
   171bc:	push	{fp, lr}
   171c0:	mov	fp, sp
   171c4:	movw	r0, #45300	; 0xb0f4
   171c8:	movw	r1, #40624	; 0x9eb0
   171cc:	mov	r2, #5
   171d0:	movt	r0, #2
   171d4:	movt	r1, #1
   171d8:	ldr	r4, [r0]
   171dc:	mov	r0, #0
   171e0:	bl	10ed8 <dcgettext@plt>
   171e4:	movw	r2, #39587	; 0x9aa3
   171e8:	mov	r3, r0
   171ec:	mov	r0, r4
   171f0:	mov	r1, #0
   171f4:	movt	r2, #1
   171f8:	bl	10f44 <error@plt>
   171fc:	bl	11088 <abort@plt>
   17200:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17204:	add	fp, sp, #28
   17208:	sub	sp, sp, #44	; 0x2c
   1720c:	cmp	r2, #37	; 0x25
   17210:	bcs	17e94 <__assert_fail@plt+0x6df4>
   17214:	ldr	sl, [fp, #8]
   17218:	mov	r6, r2
   1721c:	mov	r7, r1
   17220:	mov	r4, r0
   17224:	str	r3, [sp, #36]	; 0x24
   17228:	bl	10fe0 <__errno_location@plt>
   1722c:	mov	r5, r0
   17230:	mov	r0, #0
   17234:	str	r0, [r5]
   17238:	bl	10fa4 <__ctype_b_loc@plt>
   1723c:	ldr	r1, [r0]
   17240:	mov	r2, r4
   17244:	ldrb	r0, [r2], #1
   17248:	add	r3, r1, r0, lsl #1
   1724c:	ldrb	r3, [r3, #1]
   17250:	tst	r3, #32
   17254:	bne	17244 <__assert_fail@plt+0x61a4>
   17258:	cmp	r7, #0
   1725c:	sub	r9, fp, #32
   17260:	mov	r8, #4
   17264:	movne	r9, r7
   17268:	cmp	r0, #45	; 0x2d
   1726c:	beq	1762c <__assert_fail@plt+0x658c>
   17270:	mov	r0, r4
   17274:	mov	r1, r9
   17278:	mov	r2, r6
   1727c:	mov	r3, #0
   17280:	bl	10ea8 <__strtoull_internal@plt>
   17284:	mov	r7, r1
   17288:	ldr	r1, [r9]
   1728c:	cmp	r1, r4
   17290:	beq	172c8 <__assert_fail@plt+0x6228>
   17294:	mov	r6, r0
   17298:	ldr	r0, [r5]
   1729c:	cmp	r0, #0
   172a0:	beq	175e4 <__assert_fail@plt+0x6544>
   172a4:	cmp	r0, #34	; 0x22
   172a8:	bne	1762c <__assert_fail@plt+0x658c>
   172ac:	mov	r8, #1
   172b0:	cmp	sl, #0
   172b4:	beq	17e80 <__assert_fail@plt+0x6de0>
   172b8:	ldrb	r4, [r1]
   172bc:	cmp	r4, #0
   172c0:	bne	1730c <__assert_fail@plt+0x626c>
   172c4:	b	17e80 <__assert_fail@plt+0x6de0>
   172c8:	cmp	sl, #0
   172cc:	beq	1762c <__assert_fail@plt+0x658c>
   172d0:	mov	r5, r1
   172d4:	ldrb	r1, [r4]
   172d8:	cmp	r1, #0
   172dc:	beq	1762c <__assert_fail@plt+0x658c>
   172e0:	mov	r0, sl
   172e4:	bl	10fd4 <strchr@plt>
   172e8:	cmp	r0, #0
   172ec:	beq	1762c <__assert_fail@plt+0x658c>
   172f0:	mov	r1, r5
   172f4:	mov	r8, #0
   172f8:	mov	r6, #1
   172fc:	mov	r7, #0
   17300:	ldrb	r4, [r1]
   17304:	cmp	r4, #0
   17308:	beq	17e80 <__assert_fail@plt+0x6de0>
   1730c:	str	r1, [sp, #32]
   17310:	mov	r0, sl
   17314:	mov	r1, r4
   17318:	bl	10fd4 <strchr@plt>
   1731c:	cmp	r0, #0
   17320:	beq	17620 <__assert_fail@plt+0x6580>
   17324:	sub	r0, r4, #69	; 0x45
   17328:	mov	r1, #1
   1732c:	mov	r3, #0
   17330:	mov	r5, #1024	; 0x400
   17334:	cmp	r0, #47	; 0x2f
   17338:	str	r1, [sp, #28]
   1733c:	bhi	17440 <__assert_fail@plt+0x63a0>
   17340:	add	r1, pc, #0
   17344:	ldr	pc, [r1, r0, lsl #2]
   17348:	andeq	r7, r1, r8, lsl #8
   1734c:	andeq	r7, r1, r0, asr #8
   17350:	andeq	r7, r1, r8, lsl #8
   17354:	andeq	r7, r1, r0, asr #8
   17358:	andeq	r7, r1, r0, asr #8
   1735c:	andeq	r7, r1, r0, asr #8
   17360:	andeq	r7, r1, r8, lsl #8
   17364:	andeq	r7, r1, r0, asr #8
   17368:	andeq	r7, r1, r8, lsl #8
   1736c:	andeq	r7, r1, r0, asr #8
   17370:	andeq	r7, r1, r0, asr #8
   17374:	andeq	r7, r1, r8, lsl #8
   17378:	andeq	r7, r1, r0, asr #8
   1737c:	andeq	r7, r1, r0, asr #8
   17380:	andeq	r7, r1, r0, asr #8
   17384:	andeq	r7, r1, r8, lsl #8
   17388:	andeq	r7, r1, r0, asr #8
   1738c:	andeq	r7, r1, r0, asr #8
   17390:	andeq	r7, r1, r0, asr #8
   17394:	andeq	r7, r1, r0, asr #8
   17398:	andeq	r7, r1, r8, lsl #8
   1739c:	andeq	r7, r1, r8, lsl #8
   173a0:	andeq	r7, r1, r0, asr #8
   173a4:	andeq	r7, r1, r0, asr #8
   173a8:	andeq	r7, r1, r0, asr #8
   173ac:	andeq	r7, r1, r0, asr #8
   173b0:	andeq	r7, r1, r0, asr #8
   173b4:	andeq	r7, r1, r0, asr #8
   173b8:	andeq	r7, r1, r0, asr #8
   173bc:	andeq	r7, r1, r0, asr #8
   173c0:	andeq	r7, r1, r0, asr #8
   173c4:	andeq	r7, r1, r0, asr #8
   173c8:	andeq	r7, r1, r0, asr #8
   173cc:	andeq	r7, r1, r0, asr #8
   173d0:	andeq	r7, r1, r8, lsl #8
   173d4:	andeq	r7, r1, r0, asr #8
   173d8:	andeq	r7, r1, r0, asr #8
   173dc:	andeq	r7, r1, r0, asr #8
   173e0:	andeq	r7, r1, r8, lsl #8
   173e4:	andeq	r7, r1, r0, asr #8
   173e8:	andeq	r7, r1, r8, lsl #8
   173ec:	andeq	r7, r1, r0, asr #8
   173f0:	andeq	r7, r1, r0, asr #8
   173f4:	andeq	r7, r1, r0, asr #8
   173f8:	andeq	r7, r1, r0, asr #8
   173fc:	andeq	r7, r1, r0, asr #8
   17400:	andeq	r7, r1, r0, asr #8
   17404:	andeq	r7, r1, r8, lsl #8
   17408:	mov	r0, sl
   1740c:	mov	r1, #48	; 0x30
   17410:	bl	10fd4 <strchr@plt>
   17414:	cmp	r0, #0
   17418:	beq	1743c <__assert_fail@plt+0x639c>
   1741c:	ldr	r1, [sp, #32]
   17420:	ldrb	r0, [r1, #1]
   17424:	cmp	r0, #66	; 0x42
   17428:	cmpne	r0, #68	; 0x44
   1742c:	bne	175f4 <__assert_fail@plt+0x6554>
   17430:	mov	r5, #1000	; 0x3e8
   17434:	mov	r0, #2
   17438:	str	r0, [sp, #28]
   1743c:	mov	r3, #0
   17440:	sub	r0, r4, #66	; 0x42
   17444:	cmp	r0, #53	; 0x35
   17448:	bhi	17620 <__assert_fail@plt+0x6580>
   1744c:	add	r1, pc, #0
   17450:	ldr	pc, [r1, r0, lsl #2]
   17454:	muleq	r1, r0, r9
   17458:	andeq	r7, r1, r0, lsr #12
   1745c:	andeq	r7, r1, r0, lsr #12
   17460:			; <UNDEFINED> instruction: 0x000179b8
   17464:	andeq	r7, r1, r0, lsr #12
   17468:	andeq	r7, r1, ip, lsr #10
   1746c:	andeq	r7, r1, r0, lsr #12
   17470:	andeq	r7, r1, r0, lsr #12
   17474:	andeq	r7, r1, r0, lsr #12
   17478:	andeq	r7, r1, r8, lsr r6
   1747c:	andeq	r7, r1, r0, lsr #12
   17480:	andeq	r7, r1, r0, lsl #13
   17484:	andeq	r7, r1, r0, lsr #12
   17488:	andeq	r7, r1, r0, lsr #12
   1748c:	andeq	r7, r1, ip, lsl #22
   17490:	andeq	r7, r1, r0, lsr #12
   17494:	andeq	r7, r1, r0, lsr #12
   17498:	andeq	r7, r1, r0, lsr #12
   1749c:	andeq	r7, r1, ip, lsl #14
   174a0:	andeq	r7, r1, r0, lsr #12
   174a4:	andeq	r7, r1, r0, lsr #12
   174a8:	andeq	r7, r1, r0, lsr #12
   174ac:	andeq	r7, r1, r0, lsr #12
   174b0:	andeq	r7, r1, r4, lsr ip
   174b4:	strdeq	r7, [r1], -r4
   174b8:	andeq	r7, r1, r0, lsr #12
   174bc:	andeq	r7, r1, r0, lsr #12
   174c0:	andeq	r7, r1, r0, lsr #12
   174c4:	andeq	r7, r1, r0, lsr #12
   174c8:	andeq	r7, r1, r0, lsr #12
   174cc:	andeq	r7, r1, r0, lsr #12
   174d0:	andeq	r7, r1, r0, lsr #12
   174d4:	andeq	r7, r1, r8, lsl #28
   174d8:	andeq	r7, r1, r0, ror #28
   174dc:	andeq	r7, r1, r0, lsr #12
   174e0:	andeq	r7, r1, r0, lsr #12
   174e4:	andeq	r7, r1, r0, lsr #12
   174e8:	andeq	r7, r1, ip, lsr #10
   174ec:	andeq	r7, r1, r0, lsr #12
   174f0:	andeq	r7, r1, r0, lsr #12
   174f4:	andeq	r7, r1, r0, lsr #12
   174f8:	andeq	r7, r1, r8, lsr r6
   174fc:	andeq	r7, r1, r0, lsr #12
   17500:	andeq	r7, r1, r0, lsl #13
   17504:	andeq	r7, r1, r0, lsr #12
   17508:	andeq	r7, r1, r0, lsr #12
   1750c:	andeq	r7, r1, r0, lsr #12
   17510:	andeq	r7, r1, r0, lsr #12
   17514:	andeq	r7, r1, r0, lsr #12
   17518:	andeq	r7, r1, r0, lsr #12
   1751c:	andeq	r7, r1, ip, lsl #14
   17520:	andeq	r7, r1, r0, lsr #12
   17524:	andeq	r7, r1, r0, lsr #12
   17528:	andeq	r7, r1, ip, lsr lr
   1752c:	mvn	r0, #0
   17530:	mvn	r1, #0
   17534:	mov	r2, r5
   17538:	mov	sl, r3
   1753c:	bl	18394 <__assert_fail@plt+0x72f4>
   17540:	subs	r3, r0, r6
   17544:	umull	r4, r2, r6, r5
   17548:	mov	lr, #0
   1754c:	str	r1, [sp, #20]
   17550:	sbcs	r3, r1, r7
   17554:	movwcc	lr, #1
   17558:	mla	ip, r6, sl, r2
   1755c:	mov	r2, r1
   17560:	mov	r2, #0
   17564:	cmp	lr, #0
   17568:	mla	r7, r7, r5, ip
   1756c:	mvnne	r4, #0
   17570:	mvnne	r7, #0
   17574:	subs	r6, r0, r4
   17578:	sbcs	r6, r1, r7
   1757c:	umull	r3, r6, r4, r5
   17580:	movwcc	r2, #1
   17584:	cmp	r2, #0
   17588:	mvnne	r3, #0
   1758c:	cmp	r2, #0
   17590:	str	r6, [sp, #16]
   17594:	umull	r6, ip, r3, r5
   17598:	mla	r1, r3, sl, ip
   1759c:	ldr	ip, [sp, #16]
   175a0:	str	r1, [sp, #12]
   175a4:	mla	r4, r4, sl, ip
   175a8:	mla	r4, r7, r5, r4
   175ac:	mvnne	r4, #0
   175b0:	subs	r0, r0, r3
   175b4:	ldr	r0, [sp, #20]
   175b8:	ldr	r7, [sp, #12]
   175bc:	sbcs	r0, r0, r4
   175c0:	mov	r0, #0
   175c4:	mla	r7, r4, r5, r7
   175c8:	movwcc	r0, #1
   175cc:	cmp	r0, #0
   175d0:	mov	r1, r0
   175d4:	orr	r0, lr, r2
   175d8:	mvnne	r7, #0
   175dc:	mvnne	r6, #0
   175e0:	b	17c2c <__assert_fail@plt+0x6b8c>
   175e4:	mov	r8, r0
   175e8:	cmp	sl, #0
   175ec:	bne	172b8 <__assert_fail@plt+0x6218>
   175f0:	b	17e80 <__assert_fail@plt+0x6de0>
   175f4:	cmp	r0, #105	; 0x69
   175f8:	mov	r3, #0
   175fc:	bne	17440 <__assert_fail@plt+0x63a0>
   17600:	ldrb	r0, [r1, #2]
   17604:	mov	r1, #1
   17608:	cmp	r0, #66	; 0x42
   1760c:	movweq	r1, #3
   17610:	str	r1, [sp, #28]
   17614:	sub	r0, r4, #66	; 0x42
   17618:	cmp	r0, #53	; 0x35
   1761c:	bls	1744c <__assert_fail@plt+0x63ac>
   17620:	ldr	r0, [sp, #36]	; 0x24
   17624:	orr	r8, r8, #2
   17628:	strd	r6, [r0]
   1762c:	mov	r0, r8
   17630:	sub	sp, fp, #28
   17634:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17638:	mvn	r0, #0
   1763c:	mvn	r1, #0
   17640:	mov	r2, r5
   17644:	mov	r4, r3
   17648:	bl	18394 <__assert_fail@plt+0x72f4>
   1764c:	subs	r0, r0, r6
   17650:	mov	r2, #0
   17654:	sbcs	r0, r1, r7
   17658:	umull	r0, r1, r6, r5
   1765c:	movwcc	r2, #1
   17660:	cmp	r2, #0
   17664:	mla	r1, r6, r4, r1
   17668:	mov	r3, r2
   1766c:	mvnne	r0, #0
   17670:	mla	r7, r7, r5, r1
   17674:	mvnne	r7, #0
   17678:	mov	r6, r0
   1767c:	b	17e60 <__assert_fail@plt+0x6dc0>
   17680:	mvn	r0, #0
   17684:	mvn	r1, #0
   17688:	mov	r2, r5
   1768c:	str	r3, [sp, #24]
   17690:	bl	18394 <__assert_fail@plt+0x72f4>
   17694:	subs	r3, r0, r6
   17698:	mov	ip, r0
   1769c:	umull	r4, r0, r6, r5
   176a0:	mov	sl, #0
   176a4:	sbcs	r3, r1, r7
   176a8:	mov	r3, #0
   176ac:	movwcc	r3, #1
   176b0:	cmp	r3, #0
   176b4:	str	r0, [sp, #20]
   176b8:	ldr	r0, [sp, #24]
   176bc:	mvnne	r4, #0
   176c0:	cmp	r3, #0
   176c4:	umull	lr, r2, r4, r5
   176c8:	mla	r2, r4, r0, r2
   176cc:	str	r2, [sp, #16]
   176d0:	ldr	r2, [sp, #20]
   176d4:	mla	r6, r6, r0, r2
   176d8:	ldr	r0, [sp, #16]
   176dc:	mla	r6, r7, r5, r6
   176e0:	mvnne	r6, #0
   176e4:	mla	r7, r6, r5, r0
   176e8:	subs	r0, ip, r4
   176ec:	sbcs	r0, r1, r6
   176f0:	movwcc	sl, #1
   176f4:	cmp	sl, #0
   176f8:	orr	r3, r3, sl
   176fc:	mvnne	lr, #0
   17700:	mvnne	r7, #0
   17704:	mov	r6, lr
   17708:	b	17e60 <__assert_fail@plt+0x6dc0>
   1770c:	mvn	r0, #0
   17710:	mvn	r1, #0
   17714:	mov	r2, r5
   17718:	mov	sl, r3
   1771c:	bl	18394 <__assert_fail@plt+0x72f4>
   17720:	subs	r3, r0, r6
   17724:	mov	ip, r1
   17728:	umull	r2, lr, r6, r5
   1772c:	str	r0, [sp, #20]
   17730:	sbcs	r3, r1, r7
   17734:	mov	r1, #0
   17738:	str	ip, [sp, #16]
   1773c:	movwcc	r1, #1
   17740:	mla	r6, r6, sl, lr
   17744:	mov	lr, #0
   17748:	cmp	r1, #0
   1774c:	mla	r7, r7, r5, r6
   17750:	mvnne	r2, #0
   17754:	cmp	r1, #0
   17758:	umull	r3, r4, r2, r5
   1775c:	mvnne	r7, #0
   17760:	mla	r4, r2, sl, r4
   17764:	subs	r2, r0, r2
   17768:	sbcs	r2, ip, r7
   1776c:	mla	r4, r7, r5, r4
   17770:	mov	r2, #0
   17774:	movwcc	lr, #1
   17778:	cmp	lr, #0
   1777c:	mvnne	r3, #0
   17780:	mvnne	r4, #0
   17784:	subs	r7, r0, r3
   17788:	mov	r0, r5
   1778c:	sbcs	r7, ip, r4
   17790:	umull	r5, r7, r3, r5
   17794:	movwcc	r2, #1
   17798:	cmp	r2, #0
   1779c:	mla	r3, r3, sl, r7
   177a0:	mvnne	r5, #0
   177a4:	cmp	r2, #0
   177a8:	mla	r3, r4, r0, r3
   177ac:	umull	r6, ip, r5, r0
   177b0:	mvnne	r3, #0
   177b4:	mla	ip, r5, sl, ip
   177b8:	mla	r7, r3, r0, ip
   177bc:	ldr	r0, [sp, #20]
   177c0:	subs	r0, r0, r5
   177c4:	ldr	r0, [sp, #16]
   177c8:	sbcs	r0, r0, r3
   177cc:	mov	r0, #0
   177d0:	movwcc	r0, #1
   177d4:	cmp	r0, #0
   177d8:	mov	r3, r0
   177dc:	orr	r0, r1, lr
   177e0:	orr	r0, r0, r2
   177e4:	mvnne	r7, #0
   177e8:	mvnne	r6, #0
   177ec:	orr	r3, r0, r3
   177f0:	b	17e60 <__assert_fail@plt+0x6dc0>
   177f4:	mvn	r0, #0
   177f8:	mvn	r1, #0
   177fc:	mov	r2, r5
   17800:	mov	r4, r3
   17804:	str	r3, [sp, #24]
   17808:	bl	18394 <__assert_fail@plt+0x72f4>
   1780c:	umull	r3, r2, r6, r5
   17810:	mla	r2, r6, r4, r2
   17814:	subs	r6, r0, r6
   17818:	sbcs	r6, r1, r7
   1781c:	mov	r6, #0
   17820:	mla	r2, r7, r5, r2
   17824:	mov	r7, #0
   17828:	movwcc	r6, #1
   1782c:	cmp	r6, #0
   17830:	str	r6, [sp, #20]
   17834:	mvnne	r3, #0
   17838:	mvnne	r2, #0
   1783c:	subs	r4, r0, r3
   17840:	umull	r6, ip, r3, r5
   17844:	sbcs	r4, r1, r2
   17848:	ldr	r4, [sp, #24]
   1784c:	movwcc	r7, #1
   17850:	cmp	r7, #0
   17854:	mov	lr, r7
   17858:	str	r7, [sp, #16]
   1785c:	mvnne	r6, #0
   17860:	cmp	lr, #0
   17864:	mov	lr, #0
   17868:	umull	sl, r7, r6, r5
   1786c:	mla	r3, r3, r4, ip
   17870:	mla	r2, r2, r5, r3
   17874:	mvnne	r2, #0
   17878:	subs	r3, r0, r6
   1787c:	mla	r7, r6, r4, r7
   17880:	mov	r4, r0
   17884:	mov	r0, #0
   17888:	mla	r7, r2, r5, r7
   1788c:	sbcs	r2, r1, r2
   17890:	mov	r3, r4
   17894:	movwcc	r0, #1
   17898:	str	r3, [sp, #4]
   1789c:	cmp	r0, #0
   178a0:	str	r0, [sp, #12]
   178a4:	mov	r0, r1
   178a8:	mvnne	sl, #0
   178ac:	mvnne	r7, #0
   178b0:	str	r0, [sp, #8]
   178b4:	subs	r2, r4, sl
   178b8:	ldr	r4, [sp, #24]
   178bc:	sbcs	r2, r1, r7
   178c0:	umull	r6, r2, sl, r5
   178c4:	movwcc	lr, #1
   178c8:	cmp	lr, #0
   178cc:	mvnne	r6, #0
   178d0:	mla	r2, sl, r4, r2
   178d4:	cmp	lr, #0
   178d8:	umull	r1, ip, r6, r5
   178dc:	mla	r2, r7, r5, r2
   178e0:	mvnne	r2, #0
   178e4:	mla	ip, r6, r4, ip
   178e8:	subs	r6, r3, r6
   178ec:	mla	r7, r2, r5, ip
   178f0:	sbcs	r2, r0, r2
   178f4:	mov	ip, #0
   178f8:	mov	r2, #0
   178fc:	movwcc	ip, #1
   17900:	cmp	ip, #0
   17904:	mvnne	r1, #0
   17908:	mvnne	r7, #0
   1790c:	subs	r6, r3, r1
   17910:	ldr	r3, [sp, #24]
   17914:	sbcs	r6, r0, r7
   17918:	umull	r0, sl, r1, r5
   1791c:	movwcc	r2, #1
   17920:	cmp	r2, #0
   17924:	mvnne	r0, #0
   17928:	mla	r1, r1, r3, sl
   1792c:	cmp	r2, #0
   17930:	umull	r6, r4, r0, r5
   17934:	mla	r1, r7, r5, r1
   17938:	mvnne	r1, #0
   1793c:	mla	r4, r0, r3, r4
   17940:	ldr	r3, [sp, #4]
   17944:	mla	r7, r1, r5, r4
   17948:	ldr	r5, [sp, #16]
   1794c:	subs	r0, r3, r0
   17950:	ldr	r0, [sp, #8]
   17954:	sbcs	r0, r0, r1
   17958:	mov	r0, #0
   1795c:	movwcc	r0, #1
   17960:	cmp	r0, #0
   17964:	mov	r1, r0
   17968:	ldr	r0, [sp, #20]
   1796c:	mvnne	r7, #0
   17970:	mvnne	r6, #0
   17974:	orr	r0, r0, r5
   17978:	ldr	r5, [sp, #12]
   1797c:	orr	r0, r0, r5
   17980:	orr	r0, r0, lr
   17984:	orr	r0, r0, ip
   17988:	orr	r0, r0, r2
   1798c:	b	17dfc <__assert_fail@plt+0x6d5c>
   17990:	mov	r1, #0
   17994:	lsl	r2, r7, #10
   17998:	lsl	r0, r6, #10
   1799c:	lsr	r3, r7, #22
   179a0:	cmp	r1, r7, lsr #22
   179a4:	orr	r2, r2, r6, lsr #22
   179a8:	mvnne	r0, #0
   179ac:	movwne	r3, #1
   179b0:	cmp	r1, r7, lsr #22
   179b4:	b	17e2c <__assert_fail@plt+0x6d8c>
   179b8:	mvn	r0, #0
   179bc:	mvn	r1, #0
   179c0:	mov	r2, r5
   179c4:	mov	sl, r3
   179c8:	bl	18394 <__assert_fail@plt+0x72f4>
   179cc:	subs	r2, r0, r6
   179d0:	mov	ip, r0
   179d4:	mov	r0, #0
   179d8:	sbcs	r2, r1, r7
   179dc:	umull	r4, r2, r6, r5
   179e0:	movwcc	r0, #1
   179e4:	cmp	r0, #0
   179e8:	mla	r2, r6, sl, r2
   179ec:	str	r0, [sp, #20]
   179f0:	mvnne	r4, #0
   179f4:	cmp	r0, #0
   179f8:	mla	r2, r7, r5, r2
   179fc:	mov	r0, #0
   17a00:	umull	lr, r3, r4, r5
   17a04:	mvnne	r2, #0
   17a08:	mla	r3, r4, sl, r3
   17a0c:	mla	r6, r2, r5, r3
   17a10:	subs	r3, ip, r4
   17a14:	mov	r3, r1
   17a18:	sbcs	r2, r1, r2
   17a1c:	str	r3, [sp, #8]
   17a20:	movwcc	r0, #1
   17a24:	cmp	r0, #0
   17a28:	str	r0, [sp, #16]
   17a2c:	mov	r0, ip
   17a30:	mvnne	lr, #0
   17a34:	mvnne	r6, #0
   17a38:	str	r0, [sp, #12]
   17a3c:	subs	r2, ip, lr
   17a40:	umull	r7, r4, lr, r5
   17a44:	sbcs	r2, r1, r6
   17a48:	mov	r2, #0
   17a4c:	movwcc	r2, #1
   17a50:	mla	r4, lr, sl, r4
   17a54:	cmp	r2, #0
   17a58:	mla	r6, r6, r5, r4
   17a5c:	mov	r4, #0
   17a60:	mvnne	r7, #0
   17a64:	cmp	r2, #0
   17a68:	umull	r1, ip, r7, r5
   17a6c:	mvnne	r6, #0
   17a70:	mla	ip, r7, sl, ip
   17a74:	subs	r7, r0, r7
   17a78:	sbcs	r7, r3, r6
   17a7c:	mla	lr, r6, r5, ip
   17a80:	mov	ip, #0
   17a84:	movwcc	ip, #1
   17a88:	cmp	ip, #0
   17a8c:	mvnne	r1, #0
   17a90:	mvnne	lr, #0
   17a94:	subs	r7, r0, r1
   17a98:	sbcs	r7, r3, lr
   17a9c:	umull	r0, r7, r1, r5
   17aa0:	movwcc	r4, #1
   17aa4:	cmp	r4, #0
   17aa8:	mla	r1, r1, sl, r7
   17aac:	mvnne	r0, #0
   17ab0:	cmp	r4, #0
   17ab4:	mla	r1, lr, r5, r1
   17ab8:	umull	r6, r3, r0, r5
   17abc:	mvnne	r1, #0
   17ac0:	mla	r3, r0, sl, r3
   17ac4:	mla	r7, r1, r5, r3
   17ac8:	ldr	r3, [sp, #12]
   17acc:	subs	r0, r3, r0
   17ad0:	ldr	r0, [sp, #8]
   17ad4:	ldr	r3, [sp, #16]
   17ad8:	sbcs	r0, r0, r1
   17adc:	mov	r0, #0
   17ae0:	movwcc	r0, #1
   17ae4:	cmp	r0, #0
   17ae8:	mov	r1, r0
   17aec:	ldr	r0, [sp, #20]
   17af0:	mvnne	r7, #0
   17af4:	mvnne	r6, #0
   17af8:	orr	r0, r0, r3
   17afc:	orr	r0, r0, r2
   17b00:	orr	r0, r0, ip
   17b04:	orr	r0, r0, r4
   17b08:	b	17c2c <__assert_fail@plt+0x6b8c>
   17b0c:	mvn	r0, #0
   17b10:	mvn	r1, #0
   17b14:	mov	r2, r5
   17b18:	mov	sl, r3
   17b1c:	bl	18394 <__assert_fail@plt+0x72f4>
   17b20:	umull	r3, r2, r6, r5
   17b24:	mov	lr, r1
   17b28:	mov	r1, r0
   17b2c:	mla	r2, r6, sl, r2
   17b30:	subs	r6, r0, r6
   17b34:	mov	r0, #0
   17b38:	sbcs	r6, lr, r7
   17b3c:	mla	r2, r7, r5, r2
   17b40:	movwcc	r0, #1
   17b44:	cmp	r0, #0
   17b48:	str	r0, [sp, #20]
   17b4c:	mov	r0, r1
   17b50:	mvnne	r3, #0
   17b54:	mvnne	r2, #0
   17b58:	str	r0, [sp, #16]
   17b5c:	subs	r4, r1, r3
   17b60:	umull	r7, ip, r3, r5
   17b64:	sbcs	r4, lr, r2
   17b68:	mov	r4, #0
   17b6c:	movwcc	r4, #1
   17b70:	mla	r3, r3, sl, ip
   17b74:	mov	ip, #0
   17b78:	cmp	r4, #0
   17b7c:	mla	r2, r2, r5, r3
   17b80:	mvnne	r7, #0
   17b84:	cmp	r4, #0
   17b88:	umull	r1, r6, r7, r5
   17b8c:	mvnne	r2, #0
   17b90:	mla	r6, r7, sl, r6
   17b94:	mla	r3, r2, r5, r6
   17b98:	subs	r6, r0, r7
   17b9c:	sbcs	r2, lr, r2
   17ba0:	mov	r2, #0
   17ba4:	movwcc	ip, #1
   17ba8:	cmp	ip, #0
   17bac:	mvnne	r1, #0
   17bb0:	mvnne	r3, #0
   17bb4:	subs	r6, r0, r1
   17bb8:	sbcs	r6, lr, r3
   17bbc:	umull	r0, r6, r1, r5
   17bc0:	movwcc	r2, #1
   17bc4:	cmp	r2, #0
   17bc8:	mvnne	r0, #0
   17bcc:	cmp	r2, #0
   17bd0:	str	r6, [sp, #12]
   17bd4:	umull	r6, r7, r0, r5
   17bd8:	mla	r7, r0, sl, r7
   17bdc:	str	r7, [sp, #8]
   17be0:	ldr	r7, [sp, #12]
   17be4:	mla	r1, r1, sl, r7
   17be8:	mla	r1, r3, r5, r1
   17bec:	ldr	r3, [sp, #8]
   17bf0:	mvnne	r1, #0
   17bf4:	mla	r7, r1, r5, r3
   17bf8:	ldr	r3, [sp, #16]
   17bfc:	subs	r0, r3, r0
   17c00:	sbcs	r0, lr, r1
   17c04:	mov	r0, #0
   17c08:	movwcc	r0, #1
   17c0c:	cmp	r0, #0
   17c10:	mov	r1, r0
   17c14:	ldr	r0, [sp, #20]
   17c18:	mvnne	r7, #0
   17c1c:	mvnne	r6, #0
   17c20:	orr	r0, r0, r4
   17c24:	orr	r0, r0, ip
   17c28:	orr	r0, r0, r2
   17c2c:	orr	r3, r0, r1
   17c30:	b	17e60 <__assert_fail@plt+0x6dc0>
   17c34:	mvn	r0, #0
   17c38:	mvn	r1, #0
   17c3c:	mov	r2, r5
   17c40:	mov	sl, r3
   17c44:	bl	18394 <__assert_fail@plt+0x72f4>
   17c48:	mov	ip, r1
   17c4c:	subs	r1, r0, r6
   17c50:	umull	r3, lr, r6, r5
   17c54:	mov	r2, r5
   17c58:	sbcs	r1, ip, r7
   17c5c:	mov	r1, #0
   17c60:	str	ip, [sp, #4]
   17c64:	movwcc	r1, #1
   17c68:	mla	r6, r6, sl, lr
   17c6c:	cmp	r1, #0
   17c70:	mla	r7, r7, r2, r6
   17c74:	str	r1, [sp, #20]
   17c78:	mvnne	r3, #0
   17c7c:	cmp	r1, #0
   17c80:	mov	r1, r0
   17c84:	umull	r4, r5, r3, r5
   17c88:	mvnne	r7, #0
   17c8c:	mov	lr, r1
   17c90:	mla	r5, r3, sl, r5
   17c94:	subs	r3, r0, r3
   17c98:	sbcs	r0, ip, r7
   17c9c:	mov	r0, #0
   17ca0:	mla	r5, r7, r2, r5
   17ca4:	movwcc	r0, #1
   17ca8:	cmp	r0, #0
   17cac:	str	r0, [sp, #16]
   17cb0:	mvnne	r4, #0
   17cb4:	mvnne	r5, #0
   17cb8:	subs	r0, r1, r4
   17cbc:	mov	r1, #0
   17cc0:	sbcs	r0, ip, r5
   17cc4:	umull	r3, r0, r4, r2
   17cc8:	movwcc	r1, #1
   17ccc:	cmp	r1, #0
   17cd0:	mla	r0, r4, sl, r0
   17cd4:	mov	r4, lr
   17cd8:	str	r1, [sp, #12]
   17cdc:	mvnne	r3, #0
   17ce0:	cmp	r1, #0
   17ce4:	mla	r0, r5, r2, r0
   17ce8:	str	r4, [sp]
   17cec:	umull	r7, r6, r3, r2
   17cf0:	mvnne	r0, #0
   17cf4:	mla	r6, r3, sl, r6
   17cf8:	subs	r3, lr, r3
   17cfc:	mov	r3, #0
   17d00:	mla	r5, r0, r2, r6
   17d04:	sbcs	r0, ip, r0
   17d08:	mov	r0, #0
   17d0c:	movwcc	r0, #1
   17d10:	cmp	r0, #0
   17d14:	str	r0, [sp, #8]
   17d18:	mvnne	r7, #0
   17d1c:	mvnne	r5, #0
   17d20:	subs	r0, lr, r7
   17d24:	sbcs	r0, ip, r5
   17d28:	umull	r6, r0, r7, r2
   17d2c:	movwcc	r3, #1
   17d30:	cmp	r3, #0
   17d34:	mla	r7, r7, sl, r0
   17d38:	mov	r0, ip
   17d3c:	mvnne	r6, #0
   17d40:	cmp	r3, #0
   17d44:	mla	r7, r5, r2, r7
   17d48:	mov	r5, #0
   17d4c:	umull	r1, lr, r6, r2
   17d50:	mvnne	r7, #0
   17d54:	mla	lr, r6, sl, lr
   17d58:	subs	r6, r4, r6
   17d5c:	mla	lr, r7, r2, lr
   17d60:	sbcs	r7, ip, r7
   17d64:	mov	ip, #0
   17d68:	movwcc	ip, #1
   17d6c:	cmp	ip, #0
   17d70:	mvnne	r1, #0
   17d74:	mvnne	lr, #0
   17d78:	subs	r7, r4, r1
   17d7c:	sbcs	r7, r0, lr
   17d80:	umull	r0, r7, r1, r2
   17d84:	movwcc	r5, #1
   17d88:	cmp	r5, #0
   17d8c:	mla	r1, r1, sl, r7
   17d90:	mvnne	r0, #0
   17d94:	cmp	r5, #0
   17d98:	mla	r1, lr, r2, r1
   17d9c:	umull	r6, r4, r0, r2
   17da0:	mvnne	r1, #0
   17da4:	mla	r4, r0, sl, r4
   17da8:	mla	r7, r1, r2, r4
   17dac:	ldr	r2, [sp]
   17db0:	subs	r0, r2, r0
   17db4:	ldr	r0, [sp, #4]
   17db8:	ldr	r2, [sp, #16]
   17dbc:	sbcs	r0, r0, r1
   17dc0:	mov	r0, #0
   17dc4:	movwcc	r0, #1
   17dc8:	cmp	r0, #0
   17dcc:	mov	r1, r0
   17dd0:	ldr	r0, [sp, #20]
   17dd4:	mvnne	r7, #0
   17dd8:	mvnne	r6, #0
   17ddc:	orr	r0, r0, r2
   17de0:	ldr	r2, [sp, #12]
   17de4:	orr	r0, r0, r2
   17de8:	ldr	r2, [sp, #8]
   17dec:	orr	r0, r0, r2
   17df0:	orr	r0, r0, r3
   17df4:	orr	r0, r0, ip
   17df8:	orr	r0, r0, r5
   17dfc:	orr	r0, r0, r1
   17e00:	and	r3, r0, #1
   17e04:	b	17e60 <__assert_fail@plt+0x6dc0>
   17e08:	mov	r1, #0
   17e0c:	lsl	r2, r7, #9
   17e10:	lsl	r0, r6, #9
   17e14:	lsr	r3, r7, #23
   17e18:	cmp	r1, r7, lsr #23
   17e1c:	orr	r2, r2, r6, lsr #23
   17e20:	mvnne	r0, #0
   17e24:	movwne	r3, #1
   17e28:	cmp	r1, r7, lsr #23
   17e2c:	mvnne	r2, #0
   17e30:	mov	r6, r0
   17e34:	mov	r7, r2
   17e38:	b	17e60 <__assert_fail@plt+0x6dc0>
   17e3c:	lsl	r1, r7, #1
   17e40:	cmp	r7, #0
   17e44:	lsl	r0, r6, #1
   17e48:	lsr	r3, r7, #31
   17e4c:	orr	r1, r1, r6, lsr #31
   17e50:	mvnmi	r0, #0
   17e54:	mvnmi	r1, #0
   17e58:	mov	r6, r0
   17e5c:	mov	r7, r1
   17e60:	ldr	r1, [sp, #32]
   17e64:	ldr	r2, [sp, #28]
   17e68:	orr	r8, r3, r8
   17e6c:	add	r0, r1, r2
   17e70:	str	r0, [r9]
   17e74:	ldrb	r0, [r1, r2]
   17e78:	cmp	r0, #0
   17e7c:	orrne	r8, r8, #2
   17e80:	ldr	r0, [sp, #36]	; 0x24
   17e84:	strd	r6, [r0]
   17e88:	mov	r0, r8
   17e8c:	sub	sp, fp, #28
   17e90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e94:	movw	r0, #40641	; 0x9ec1
   17e98:	movw	r1, #40679	; 0x9ee7
   17e9c:	movw	r3, #40695	; 0x9ef7
   17ea0:	mov	r2, #85	; 0x55
   17ea4:	movt	r0, #1
   17ea8:	movt	r1, #1
   17eac:	movt	r3, #1
   17eb0:	bl	110a0 <__assert_fail@plt>
   17eb4:	clz	r2, r1
   17eb8:	clz	r3, r0
   17ebc:	lsr	r2, r2, #5
   17ec0:	lsr	r3, r3, #5
   17ec4:	orrs	r2, r3, r2
   17ec8:	movwne	r1, #1
   17ecc:	movwne	r0, #1
   17ed0:	cmp	r1, #0
   17ed4:	beq	17f04 <__assert_fail@plt+0x6e64>
   17ed8:	mvn	r2, #-2147483648	; 0x80000000
   17edc:	udiv	r2, r2, r1
   17ee0:	cmp	r2, r0
   17ee4:	bcs	17f04 <__assert_fail@plt+0x6e64>
   17ee8:	push	{fp, lr}
   17eec:	mov	fp, sp
   17ef0:	bl	10fe0 <__errno_location@plt>
   17ef4:	mov	r1, #12
   17ef8:	str	r1, [r0]
   17efc:	mov	r0, #0
   17f00:	pop	{fp, pc}
   17f04:	b	10e30 <calloc@plt>
   17f08:	cmp	r0, #0
   17f0c:	movweq	r0, #1
   17f10:	cmn	r0, #1
   17f14:	ble	17f1c <__assert_fail@plt+0x6e7c>
   17f18:	b	10f50 <malloc@plt>
   17f1c:	push	{fp, lr}
   17f20:	mov	fp, sp
   17f24:	bl	10fe0 <__errno_location@plt>
   17f28:	mov	r1, #12
   17f2c:	str	r1, [r0]
   17f30:	mov	r0, #0
   17f34:	pop	{fp, pc}
   17f38:	push	{fp, lr}
   17f3c:	mov	fp, sp
   17f40:	cmp	r0, #0
   17f44:	beq	17f60 <__assert_fail@plt+0x6ec0>
   17f48:	cmp	r1, #0
   17f4c:	beq	17f6c <__assert_fail@plt+0x6ecc>
   17f50:	cmn	r1, #1
   17f54:	ble	17f78 <__assert_fail@plt+0x6ed8>
   17f58:	pop	{fp, lr}
   17f5c:	b	10ee4 <realloc@plt>
   17f60:	mov	r0, r1
   17f64:	pop	{fp, lr}
   17f68:	b	17f08 <__assert_fail@plt+0x6e68>
   17f6c:	bl	14558 <__assert_fail@plt+0x34b8>
   17f70:	mov	r0, #0
   17f74:	pop	{fp, pc}
   17f78:	bl	10fe0 <__errno_location@plt>
   17f7c:	mov	r1, #12
   17f80:	str	r1, [r0]
   17f84:	mov	r0, #0
   17f88:	pop	{fp, pc}
   17f8c:	push	{r4, r5, r6, sl, fp, lr}
   17f90:	add	fp, sp, #16
   17f94:	mov	r4, r0
   17f98:	bl	10f2c <__fpending@plt>
   17f9c:	ldr	r6, [r4]
   17fa0:	mov	r5, r0
   17fa4:	mov	r0, r4
   17fa8:	bl	18010 <__assert_fail@plt+0x6f70>
   17fac:	tst	r6, #32
   17fb0:	bne	17fe8 <__assert_fail@plt+0x6f48>
   17fb4:	cmp	r0, #0
   17fb8:	mov	r4, r0
   17fbc:	mvnne	r4, #0
   17fc0:	cmp	r5, #0
   17fc4:	bne	17ff4 <__assert_fail@plt+0x6f54>
   17fc8:	cmp	r0, #0
   17fcc:	beq	17ff4 <__assert_fail@plt+0x6f54>
   17fd0:	bl	10fe0 <__errno_location@plt>
   17fd4:	ldr	r0, [r0]
   17fd8:	subs	r4, r0, #9
   17fdc:	mvnne	r4, #0
   17fe0:	mov	r0, r4
   17fe4:	pop	{r4, r5, r6, sl, fp, pc}
   17fe8:	mvn	r4, #0
   17fec:	cmp	r0, #0
   17ff0:	beq	17ffc <__assert_fail@plt+0x6f5c>
   17ff4:	mov	r0, r4
   17ff8:	pop	{r4, r5, r6, sl, fp, pc}
   17ffc:	bl	10fe0 <__errno_location@plt>
   18000:	mov	r1, #0
   18004:	str	r1, [r0]
   18008:	mov	r0, r4
   1800c:	pop	{r4, r5, r6, sl, fp, pc}
   18010:	push	{r4, r5, r6, sl, fp, lr}
   18014:	add	fp, sp, #16
   18018:	sub	sp, sp, #8
   1801c:	mov	r4, r0
   18020:	bl	1101c <fileno@plt>
   18024:	cmn	r0, #1
   18028:	ble	1809c <__assert_fail@plt+0x6ffc>
   1802c:	mov	r0, r4
   18030:	bl	10f68 <__freading@plt>
   18034:	cmp	r0, #0
   18038:	beq	18064 <__assert_fail@plt+0x6fc4>
   1803c:	mov	r0, r4
   18040:	bl	1101c <fileno@plt>
   18044:	mov	r1, #1
   18048:	mov	r2, #0
   1804c:	mov	r3, #0
   18050:	str	r1, [sp]
   18054:	bl	10f14 <lseek64@plt>
   18058:	and	r0, r0, r1
   1805c:	cmn	r0, #1
   18060:	beq	1809c <__assert_fail@plt+0x6ffc>
   18064:	mov	r0, r4
   18068:	bl	180ac <__assert_fail@plt+0x700c>
   1806c:	cmp	r0, #0
   18070:	beq	1809c <__assert_fail@plt+0x6ffc>
   18074:	bl	10fe0 <__errno_location@plt>
   18078:	ldr	r6, [r0]
   1807c:	mov	r5, r0
   18080:	mov	r0, r4
   18084:	bl	11034 <fclose@plt>
   18088:	cmp	r6, #0
   1808c:	strne	r6, [r5]
   18090:	mvnne	r0, #0
   18094:	sub	sp, fp, #16
   18098:	pop	{r4, r5, r6, sl, fp, pc}
   1809c:	mov	r0, r4
   180a0:	sub	sp, fp, #16
   180a4:	pop	{r4, r5, r6, sl, fp, lr}
   180a8:	b	11034 <fclose@plt>
   180ac:	push	{r4, sl, fp, lr}
   180b0:	add	fp, sp, #8
   180b4:	sub	sp, sp, #8
   180b8:	mov	r4, r0
   180bc:	cmp	r0, #0
   180c0:	beq	180f8 <__assert_fail@plt+0x7058>
   180c4:	mov	r0, r4
   180c8:	bl	10f68 <__freading@plt>
   180cc:	cmp	r0, #0
   180d0:	beq	180f8 <__assert_fail@plt+0x7058>
   180d4:	ldrb	r0, [r4, #1]
   180d8:	tst	r0, #1
   180dc:	beq	180f8 <__assert_fail@plt+0x7058>
   180e0:	mov	r0, #1
   180e4:	mov	r2, #0
   180e8:	mov	r3, #0
   180ec:	str	r0, [sp]
   180f0:	mov	r0, r4
   180f4:	bl	18108 <__assert_fail@plt+0x7068>
   180f8:	mov	r0, r4
   180fc:	sub	sp, fp, #8
   18100:	pop	{r4, sl, fp, lr}
   18104:	b	10e78 <fflush@plt>
   18108:	push	{r4, r5, r6, r7, fp, lr}
   1810c:	add	fp, sp, #16
   18110:	sub	sp, sp, #8
   18114:	mov	r4, r0
   18118:	ldr	r0, [r0, #4]
   1811c:	mov	r5, r3
   18120:	mov	r6, r2
   18124:	ldr	r1, [r4, #8]
   18128:	cmp	r1, r0
   1812c:	bne	18148 <__assert_fail@plt+0x70a8>
   18130:	ldrd	r0, [r4, #16]
   18134:	cmp	r1, r0
   18138:	bne	18148 <__assert_fail@plt+0x70a8>
   1813c:	ldr	r0, [r4, #36]	; 0x24
   18140:	cmp	r0, #0
   18144:	beq	18160 <__assert_fail@plt+0x70c0>
   18148:	mov	r0, r4
   1814c:	mov	r2, r6
   18150:	mov	r3, r5
   18154:	sub	sp, fp, #16
   18158:	pop	{r4, r5, r6, r7, fp, lr}
   1815c:	b	11040 <fseeko64@plt>
   18160:	ldr	r7, [fp, #8]
   18164:	mov	r0, r4
   18168:	bl	1101c <fileno@plt>
   1816c:	mov	r2, r6
   18170:	mov	r3, r5
   18174:	str	r7, [sp]
   18178:	bl	10f14 <lseek64@plt>
   1817c:	and	r2, r0, r1
   18180:	cmn	r2, #1
   18184:	beq	181a4 <__assert_fail@plt+0x7104>
   18188:	strd	r0, [r4, #80]	; 0x50
   1818c:	ldr	r0, [r4]
   18190:	bic	r0, r0, #16
   18194:	str	r0, [r4]
   18198:	mov	r0, #0
   1819c:	sub	sp, fp, #16
   181a0:	pop	{r4, r5, r6, r7, fp, pc}
   181a4:	mvn	r0, #0
   181a8:	sub	sp, fp, #16
   181ac:	pop	{r4, r5, r6, r7, fp, pc}
   181b0:	push	{fp, lr}
   181b4:	mov	fp, sp
   181b8:	mov	r0, #14
   181bc:	bl	11064 <nl_langinfo@plt>
   181c0:	movw	r1, #37271	; 0x9197
   181c4:	cmp	r0, #0
   181c8:	movt	r1, #1
   181cc:	movne	r1, r0
   181d0:	movw	r0, #40774	; 0x9f46
   181d4:	ldrb	r2, [r1]
   181d8:	movt	r0, #1
   181dc:	cmp	r2, #0
   181e0:	movne	r0, r1
   181e4:	pop	{fp, pc}
   181e8:	push	{r4, r5, r6, r7, fp, lr}
   181ec:	add	fp, sp, #16
   181f0:	sub	sp, sp, #8
   181f4:	cmp	r0, #0
   181f8:	add	r5, sp, #4
   181fc:	mov	r7, r2
   18200:	mov	r4, r1
   18204:	movne	r5, r0
   18208:	mov	r0, r5
   1820c:	bl	10f38 <mbrtowc@plt>
   18210:	mov	r6, r0
   18214:	cmp	r7, #0
   18218:	beq	18240 <__assert_fail@plt+0x71a0>
   1821c:	cmn	r6, #2
   18220:	bcc	18240 <__assert_fail@plt+0x71a0>
   18224:	mov	r0, #0
   18228:	bl	18288 <__assert_fail@plt+0x71e8>
   1822c:	cmp	r0, #0
   18230:	bne	18240 <__assert_fail@plt+0x71a0>
   18234:	ldrb	r0, [r4]
   18238:	mov	r6, #1
   1823c:	str	r0, [r5]
   18240:	mov	r0, r6
   18244:	sub	sp, fp, #16
   18248:	pop	{r4, r5, r6, r7, fp, pc}
   1824c:	cmp	r2, #0
   18250:	beq	18280 <__assert_fail@plt+0x71e0>
   18254:	mvn	r3, #0
   18258:	udiv	r3, r3, r2
   1825c:	cmp	r3, r1
   18260:	bcs	18280 <__assert_fail@plt+0x71e0>
   18264:	push	{fp, lr}
   18268:	mov	fp, sp
   1826c:	bl	10fe0 <__errno_location@plt>
   18270:	mov	r1, #12
   18274:	str	r1, [r0]
   18278:	mov	r0, #0
   1827c:	pop	{fp, pc}
   18280:	mul	r1, r2, r1
   18284:	b	17f38 <__assert_fail@plt+0x6e98>
   18288:	push	{r4, sl, fp, lr}
   1828c:	add	fp, sp, #8
   18290:	sub	sp, sp, #264	; 0x108
   18294:	add	r1, sp, #7
   18298:	movw	r2, #257	; 0x101
   1829c:	bl	182f4 <__assert_fail@plt+0x7254>
   182a0:	mov	r4, #0
   182a4:	cmp	r0, #0
   182a8:	bne	182e8 <__assert_fail@plt+0x7248>
   182ac:	movw	r1, #36581	; 0x8ee5
   182b0:	add	r0, sp, #7
   182b4:	mov	r2, #2
   182b8:	movt	r1, #1
   182bc:	bl	10fbc <bcmp@plt>
   182c0:	cmp	r0, #0
   182c4:	beq	182e8 <__assert_fail@plt+0x7248>
   182c8:	movw	r1, #40780	; 0x9f4c
   182cc:	add	r0, sp, #7
   182d0:	mov	r2, #6
   182d4:	movt	r1, #1
   182d8:	bl	10fbc <bcmp@plt>
   182dc:	cmp	r0, #0
   182e0:	mov	r4, r0
   182e4:	movwne	r4, #1
   182e8:	mov	r0, r4
   182ec:	sub	sp, fp, #8
   182f0:	pop	{r4, sl, fp, pc}
   182f4:	push	{r4, r5, r6, r7, fp, lr}
   182f8:	add	fp, sp, #16
   182fc:	mov	r4, r1
   18300:	mov	r1, #0
   18304:	mov	r6, r2
   18308:	bl	1104c <setlocale@plt>
   1830c:	cmp	r0, #0
   18310:	beq	18340 <__assert_fail@plt+0x72a0>
   18314:	mov	r7, r0
   18318:	bl	10fc8 <strlen@plt>
   1831c:	cmp	r0, r6
   18320:	bcs	1835c <__assert_fail@plt+0x72bc>
   18324:	add	r2, r0, #1
   18328:	mov	r0, r4
   1832c:	mov	r1, r7
   18330:	bl	10e9c <memcpy@plt>
   18334:	mov	r5, #0
   18338:	mov	r0, r5
   1833c:	pop	{r4, r5, r6, r7, fp, pc}
   18340:	mov	r5, #22
   18344:	cmp	r6, #0
   18348:	beq	18384 <__assert_fail@plt+0x72e4>
   1834c:	mov	r0, #0
   18350:	strb	r0, [r4]
   18354:	mov	r0, r5
   18358:	pop	{r4, r5, r6, r7, fp, pc}
   1835c:	mov	r5, #34	; 0x22
   18360:	cmp	r6, #0
   18364:	beq	18384 <__assert_fail@plt+0x72e4>
   18368:	sub	r6, r6, #1
   1836c:	mov	r0, r4
   18370:	mov	r1, r7
   18374:	mov	r2, r6
   18378:	bl	10e9c <memcpy@plt>
   1837c:	mov	r0, #0
   18380:	strb	r0, [r4, r6]
   18384:	mov	r0, r5
   18388:	pop	{r4, r5, r6, r7, fp, pc}
   1838c:	mov	r1, #0
   18390:	b	1104c <setlocale@plt>
   18394:	cmp	r3, #0
   18398:	cmpeq	r2, #0
   1839c:	bne	183b4 <__assert_fail@plt+0x7314>
   183a0:	cmp	r1, #0
   183a4:	cmpeq	r0, #0
   183a8:	mvnne	r1, #0
   183ac:	mvnne	r0, #0
   183b0:	b	183d0 <__assert_fail@plt+0x7330>
   183b4:	sub	sp, sp, #8
   183b8:	push	{sp, lr}
   183bc:	bl	183e0 <__assert_fail@plt+0x7340>
   183c0:	ldr	lr, [sp, #4]
   183c4:	add	sp, sp, #8
   183c8:	pop	{r2, r3}
   183cc:	bx	lr
   183d0:	push	{r1, lr}
   183d4:	mov	r0, #8
   183d8:	bl	10e48 <raise@plt>
   183dc:	pop	{r1, pc}
   183e0:	cmp	r1, r3
   183e4:	cmpeq	r0, r2
   183e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183ec:	mov	r4, r0
   183f0:	movcc	r0, #0
   183f4:	mov	r5, r1
   183f8:	ldr	lr, [sp, #36]	; 0x24
   183fc:	movcc	r1, r0
   18400:	bcc	184fc <__assert_fail@plt+0x745c>
   18404:	cmp	r3, #0
   18408:	clzeq	ip, r2
   1840c:	clzne	ip, r3
   18410:	addeq	ip, ip, #32
   18414:	cmp	r5, #0
   18418:	clzeq	r1, r4
   1841c:	addeq	r1, r1, #32
   18420:	clzne	r1, r5
   18424:	sub	ip, ip, r1
   18428:	sub	sl, ip, #32
   1842c:	lsl	r9, r3, ip
   18430:	rsb	fp, ip, #32
   18434:	orr	r9, r9, r2, lsl sl
   18438:	orr	r9, r9, r2, lsr fp
   1843c:	lsl	r8, r2, ip
   18440:	cmp	r5, r9
   18444:	cmpeq	r4, r8
   18448:	movcc	r0, #0
   1844c:	movcc	r1, r0
   18450:	bcc	1846c <__assert_fail@plt+0x73cc>
   18454:	mov	r0, #1
   18458:	subs	r4, r4, r8
   1845c:	lsl	r1, r0, sl
   18460:	orr	r1, r1, r0, lsr fp
   18464:	lsl	r0, r0, ip
   18468:	sbc	r5, r5, r9
   1846c:	cmp	ip, #0
   18470:	beq	184fc <__assert_fail@plt+0x745c>
   18474:	lsr	r6, r8, #1
   18478:	orr	r6, r6, r9, lsl #31
   1847c:	lsr	r7, r9, #1
   18480:	mov	r2, ip
   18484:	b	184a8 <__assert_fail@plt+0x7408>
   18488:	subs	r3, r4, r6
   1848c:	sbc	r8, r5, r7
   18490:	adds	r3, r3, r3
   18494:	adc	r8, r8, r8
   18498:	adds	r4, r3, #1
   1849c:	adc	r5, r8, #0
   184a0:	subs	r2, r2, #1
   184a4:	beq	184c4 <__assert_fail@plt+0x7424>
   184a8:	cmp	r5, r7
   184ac:	cmpeq	r4, r6
   184b0:	bcs	18488 <__assert_fail@plt+0x73e8>
   184b4:	adds	r4, r4, r4
   184b8:	adc	r5, r5, r5
   184bc:	subs	r2, r2, #1
   184c0:	bne	184a8 <__assert_fail@plt+0x7408>
   184c4:	lsr	r3, r4, ip
   184c8:	orr	r3, r3, r5, lsl fp
   184cc:	lsr	r2, r5, ip
   184d0:	orr	r3, r3, r5, lsr sl
   184d4:	adds	r0, r0, r4
   184d8:	mov	r4, r3
   184dc:	lsl	r3, r2, ip
   184e0:	orr	r3, r3, r4, lsl sl
   184e4:	lsl	ip, r4, ip
   184e8:	orr	r3, r3, r4, lsr fp
   184ec:	adc	r1, r1, r5
   184f0:	subs	r0, r0, ip
   184f4:	mov	r5, r2
   184f8:	sbc	r1, r1, r3
   184fc:	cmp	lr, #0
   18500:	strdne	r4, [lr]
   18504:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18508:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1850c:	mov	r7, r0
   18510:	ldr	r6, [pc, #72]	; 18560 <__assert_fail@plt+0x74c0>
   18514:	ldr	r5, [pc, #72]	; 18564 <__assert_fail@plt+0x74c4>
   18518:	add	r6, pc, r6
   1851c:	add	r5, pc, r5
   18520:	sub	r6, r6, r5
   18524:	mov	r8, r1
   18528:	mov	r9, r2
   1852c:	bl	10e10 <calloc@plt-0x20>
   18530:	asrs	r6, r6, #2
   18534:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18538:	mov	r4, #0
   1853c:	add	r4, r4, #1
   18540:	ldr	r3, [r5], #4
   18544:	mov	r2, r9
   18548:	mov	r1, r8
   1854c:	mov	r0, r7
   18550:	blx	r3
   18554:	cmp	r6, r4
   18558:	bne	1853c <__assert_fail@plt+0x749c>
   1855c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18560:	andeq	r2, r1, ip, ror #19
   18564:	andeq	r2, r1, r4, ror #19
   18568:	bx	lr
   1856c:	ldr	r3, [pc, #12]	; 18580 <__assert_fail@plt+0x74e0>
   18570:	mov	r1, #0
   18574:	add	r3, pc, r3
   18578:	ldr	r2, [r3]
   1857c:	b	10ff8 <__cxa_atexit@plt>
   18580:	andeq	r2, r1, r0, ror fp

Disassembly of section .fini:

00018584 <.fini>:
   18584:	push	{r3, lr}
   18588:	pop	{r3, pc}
