
../repos/findutils/find/find:     file format elf32-littlearm


Disassembly of section .init:

00012318 <.init>:
   12318:	push	{r3, lr}
   1231c:	bl	12acc <__assert_fail@plt+0x50>
   12320:	pop	{r3, pc}

Disassembly of section .plt:

00012324 <pthread_mutex_unlock@plt-0x14>:
   12324:	push	{lr}		; (str lr, [sp, #-4]!)
   12328:	ldr	lr, [pc, #4]	; 12334 <pthread_mutex_unlock@plt-0x4>
   1232c:	add	lr, pc, lr
   12330:	ldr	pc, [lr, #8]!
   12334:	andeq	sl, r4, ip, asr #25

00012338 <pthread_mutex_unlock@plt>:
   12338:	add	ip, pc, #0, 12
   1233c:	add	ip, ip, #303104	; 0x4a000
   12340:	ldr	pc, [ip, #3276]!	; 0xccc

00012344 <fdopen@plt>:
   12344:	add	ip, pc, #0, 12
   12348:	add	ip, ip, #303104	; 0x4a000
   1234c:	ldr	pc, [ip, #3268]!	; 0xcc4

00012350 <fstatfs64@plt>:
   12350:	add	ip, pc, #0, 12
   12354:	add	ip, ip, #303104	; 0x4a000
   12358:	ldr	pc, [ip, #3260]!	; 0xcbc

0001235c <calloc@plt>:
   1235c:	add	ip, pc, #0, 12
   12360:	add	ip, ip, #303104	; 0x4a000
   12364:	ldr	pc, [ip, #3252]!	; 0xcb4

00012368 <endgrent@plt>:
   12368:	add	ip, pc, #0, 12
   1236c:	add	ip, ip, #303104	; 0x4a000
   12370:	ldr	pc, [ip, #3244]!	; 0xcac

00012374 <wctype@plt>:
   12374:	add	ip, pc, #0, 12
   12378:	add	ip, ip, #303104	; 0x4a000
   1237c:	ldr	pc, [ip, #3236]!	; 0xca4

00012380 <raise@plt>:
   12380:	add	ip, pc, #0, 12
   12384:	add	ip, ip, #303104	; 0x4a000
   12388:	ldr	pc, [ip, #3228]!	; 0xc9c

0001238c <wcrtomb@plt>:
   1238c:	add	ip, pc, #0, 12
   12390:	add	ip, ip, #303104	; 0x4a000
   12394:	ldr	pc, [ip, #3220]!	; 0xc94

00012398 <gmtime_r@plt>:
   12398:	add	ip, pc, #0, 12
   1239c:	add	ip, ip, #303104	; 0x4a000
   123a0:	ldr	pc, [ip, #3212]!	; 0xc8c

000123a4 <__getdelim@plt>:
   123a4:	add	ip, pc, #0, 12
   123a8:	add	ip, ip, #303104	; 0x4a000
   123ac:	ldr	pc, [ip, #3204]!	; 0xc84

000123b0 <getpwnam@plt>:
   123b0:	add	ip, pc, #0, 12
   123b4:	add	ip, ip, #303104	; 0x4a000
   123b8:	ldr	pc, [ip, #3196]!	; 0xc7c

000123bc <is_selinux_enabled@plt>:
   123bc:	add	ip, pc, #0, 12
   123c0:	add	ip, ip, #303104	; 0x4a000
   123c4:	ldr	pc, [ip, #3188]!	; 0xc74

000123c8 <iswctype@plt>:
   123c8:	add	ip, pc, #0, 12
   123cc:	add	ip, ip, #303104	; 0x4a000
   123d0:	ldr	pc, [ip, #3180]!	; 0xc6c

000123d4 <strcmp@plt>:
   123d4:	add	ip, pc, #0, 12
   123d8:	add	ip, ip, #303104	; 0x4a000
   123dc:	ldr	pc, [ip, #3172]!	; 0xc64

000123e0 <strtol@plt>:
   123e0:	add	ip, pc, #0, 12
   123e4:	add	ip, ip, #303104	; 0x4a000
   123e8:	ldr	pc, [ip, #3164]!	; 0xc5c

000123ec <getpwuid@plt>:
   123ec:	add	ip, pc, #0, 12
   123f0:	add	ip, ip, #303104	; 0x4a000
   123f4:	ldr	pc, [ip, #3156]!	; 0xc54

000123f8 <printf@plt>:
   123f8:	add	ip, pc, #0, 12
   123fc:	add	ip, ip, #303104	; 0x4a000
   12400:	ldr	pc, [ip, #3148]!	; 0xc4c

00012404 <pthread_mutex_destroy@plt>:
   12404:	add	ip, pc, #0, 12
   12408:	add	ip, ip, #303104	; 0x4a000
   1240c:	ldr	pc, [ip, #3140]!	; 0xc44

00012410 <mktime@plt>:
   12410:	add	ip, pc, #0, 12
   12414:	add	ip, ip, #303104	; 0x4a000
   12418:	ldr	pc, [ip, #3132]!	; 0xc3c

0001241c <fflush@plt>:
   1241c:	add	ip, pc, #0, 12
   12420:	add	ip, ip, #303104	; 0x4a000
   12424:	ldr	pc, [ip, #3124]!	; 0xc34

00012428 <unlinkat@plt>:
   12428:	add	ip, pc, #0, 12
   1242c:	add	ip, ip, #303104	; 0x4a000
   12430:	ldr	pc, [ip, #3116]!	; 0xc2c

00012434 <wcwidth@plt>:
   12434:	add	ip, pc, #0, 12
   12438:	add	ip, ip, #303104	; 0x4a000
   1243c:	ldr	pc, [ip, #3108]!	; 0xc24

00012440 <lsetfilecon@plt>:
   12440:	add	ip, pc, #0, 12
   12444:	add	ip, ip, #303104	; 0x4a000
   12448:	ldr	pc, [ip, #3100]!	; 0xc1c

0001244c <memmove@plt>:
   1244c:	add	ip, pc, #0, 12
   12450:	add	ip, ip, #303104	; 0x4a000
   12454:	ldr	pc, [ip, #3092]!	; 0xc14

00012458 <free@plt>:
   12458:	add	ip, pc, #0, 12
   1245c:	add	ip, ip, #303104	; 0x4a000
   12460:	ldr	pc, [ip, #3084]!	; 0xc0c

00012464 <pthread_mutex_lock@plt>:
   12464:	add	ip, pc, #0, 12
   12468:	add	ip, ip, #303104	; 0x4a000
   1246c:	ldr	pc, [ip, #3076]!	; 0xc04

00012470 <faccessat@plt>:
   12470:	add	ip, pc, #0, 12
   12474:	add	ip, ip, #303104	; 0x4a000
   12478:	ldr	pc, [ip, #3068]!	; 0xbfc

0001247c <ferror@plt>:
   1247c:	add	ip, pc, #0, 12
   12480:	add	ip, ip, #303104	; 0x4a000
   12484:	ldr	pc, [ip, #3060]!	; 0xbf4

00012488 <thrd_exit@plt>:
   12488:	add	ip, pc, #0, 12
   1248c:	add	ip, ip, #303104	; 0x4a000
   12490:	ldr	pc, [ip, #3052]!	; 0xbec

00012494 <strndup@plt>:
   12494:	add	ip, pc, #0, 12
   12498:	add	ip, ip, #303104	; 0x4a000
   1249c:	ldr	pc, [ip, #3044]!	; 0xbe4

000124a0 <clock_gettime@plt>:
   124a0:	add	ip, pc, #0, 12
   124a4:	add	ip, ip, #303104	; 0x4a000
   124a8:	ldr	pc, [ip, #3036]!	; 0xbdc

000124ac <_exit@plt>:
   124ac:	add	ip, pc, #0, 12
   124b0:	add	ip, ip, #303104	; 0x4a000
   124b4:	ldr	pc, [ip, #3028]!	; 0xbd4

000124b8 <memcpy@plt>:
   124b8:	add	ip, pc, #0, 12
   124bc:	add	ip, ip, #303104	; 0x4a000
   124c0:	ldr	pc, [ip, #3020]!	; 0xbcc

000124c4 <execvp@plt>:
   124c4:	add	ip, pc, #0, 12
   124c8:	add	ip, ip, #303104	; 0x4a000
   124cc:	ldr	pc, [ip, #3012]!	; 0xbc4

000124d0 <pthread_mutex_init@plt>:
   124d0:	add	ip, pc, #0, 12
   124d4:	add	ip, ip, #303104	; 0x4a000
   124d8:	ldr	pc, [ip, #3004]!	; 0xbbc

000124dc <__strtoull_internal@plt>:
   124dc:	add	ip, pc, #0, 12
   124e0:	add	ip, ip, #303104	; 0x4a000
   124e4:	ldr	pc, [ip, #2996]!	; 0xbb4

000124e8 <towlower@plt>:
   124e8:	add	ip, pc, #0, 12
   124ec:	add	ip, ip, #303104	; 0x4a000
   124f0:	ldr	pc, [ip, #2988]!	; 0xbac

000124f4 <mbsinit@plt>:
   124f4:	add	ip, pc, #0, 12
   124f8:	add	ip, ip, #303104	; 0x4a000
   124fc:	ldr	pc, [ip, #2980]!	; 0xba4

00012500 <signal@plt>:
   12500:	add	ip, pc, #0, 12
   12504:	add	ip, ip, #303104	; 0x4a000
   12508:	ldr	pc, [ip, #2972]!	; 0xb9c

0001250c <time@plt>:
   1250c:	add	ip, pc, #0, 12
   12510:	add	ip, ip, #303104	; 0x4a000
   12514:	ldr	pc, [ip, #2964]!	; 0xb94

00012518 <memcmp@plt>:
   12518:	add	ip, pc, #0, 12
   1251c:	add	ip, ip, #303104	; 0x4a000
   12520:	ldr	pc, [ip, #2956]!	; 0xb8c

00012524 <uname@plt>:
   12524:	add	ip, pc, #0, 12
   12528:	add	ip, ip, #303104	; 0x4a000
   1252c:	ldr	pc, [ip, #2948]!	; 0xb84

00012530 <ctime@plt>:
   12530:	add	ip, pc, #0, 12
   12534:	add	ip, ip, #303104	; 0x4a000
   12538:	ldr	pc, [ip, #2940]!	; 0xb7c

0001253c <dcgettext@plt>:
   1253c:	add	ip, pc, #0, 12
   12540:	add	ip, ip, #303104	; 0x4a000
   12544:	ldr	pc, [ip, #2932]!	; 0xb74

00012548 <strdup@plt>:
   12548:	add	ip, pc, #0, 12
   1254c:	add	ip, ip, #303104	; 0x4a000
   12550:	ldr	pc, [ip, #2924]!	; 0xb6c

00012554 <sysconf@plt>:
   12554:	add	ip, pc, #0, 12
   12558:	add	ip, ip, #303104	; 0x4a000
   1255c:	ldr	pc, [ip, #2916]!	; 0xb64

00012560 <getrlimit64@plt>:
   12560:	add	ip, pc, #0, 12
   12564:	add	ip, ip, #303104	; 0x4a000
   12568:	ldr	pc, [ip, #2908]!	; 0xb5c

0001256c <realloc@plt>:
   1256c:	add	ip, pc, #0, 12
   12570:	add	ip, ip, #303104	; 0x4a000
   12574:	ldr	pc, [ip, #2900]!	; 0xb54

00012578 <fgetfilecon@plt>:
   12578:	add	ip, pc, #0, 12
   1257c:	add	ip, ip, #303104	; 0x4a000
   12580:	ldr	pc, [ip, #2892]!	; 0xb4c

00012584 <localtime_r@plt>:
   12584:	add	ip, pc, #0, 12
   12588:	add	ip, ip, #303104	; 0x4a000
   1258c:	ldr	pc, [ip, #2884]!	; 0xb44

00012590 <textdomain@plt>:
   12590:	add	ip, pc, #0, 12
   12594:	add	ip, ip, #303104	; 0x4a000
   12598:	ldr	pc, [ip, #2876]!	; 0xb3c

0001259c <iswcntrl@plt>:
   1259c:	add	ip, pc, #0, 12
   125a0:	add	ip, ip, #303104	; 0x4a000
   125a4:	ldr	pc, [ip, #2868]!	; 0xb34

000125a8 <chdir@plt>:
   125a8:	add	ip, pc, #0, 12
   125ac:	add	ip, ip, #303104	; 0x4a000
   125b0:	ldr	pc, [ip, #2860]!	; 0xb2c

000125b4 <__fxstatat64@plt>:
   125b4:	add	ip, pc, #0, 12
   125b8:	add	ip, ip, #303104	; 0x4a000
   125bc:	ldr	pc, [ip, #2852]!	; 0xb24

000125c0 <iswprint@plt>:
   125c0:	add	ip, pc, #0, 12
   125c4:	add	ip, ip, #303104	; 0x4a000
   125c8:	ldr	pc, [ip, #2844]!	; 0xb1c

000125cc <tzset@plt>:
   125cc:	add	ip, pc, #0, 12
   125d0:	add	ip, ip, #303104	; 0x4a000
   125d4:	ldr	pc, [ip, #2836]!	; 0xb14

000125d8 <poll@plt>:
   125d8:	add	ip, pc, #0, 12
   125dc:	add	ip, ip, #303104	; 0x4a000
   125e0:	ldr	pc, [ip, #2828]!	; 0xb0c

000125e4 <__fxstat64@plt>:
   125e4:	add	ip, pc, #0, 12
   125e8:	add	ip, ip, #303104	; 0x4a000
   125ec:	ldr	pc, [ip, #2820]!	; 0xb04

000125f0 <fwrite@plt>:
   125f0:	add	ip, pc, #0, 12
   125f4:	add	ip, ip, #303104	; 0x4a000
   125f8:	ldr	pc, [ip, #2812]!	; 0xafc

000125fc <strcat@plt>:
   125fc:	add	ip, pc, #0, 12
   12600:	add	ip, ip, #303104	; 0x4a000
   12604:	ldr	pc, [ip, #2804]!	; 0xaf4

00012608 <lseek64@plt>:
   12608:	add	ip, pc, #0, 12
   1260c:	add	ip, ip, #303104	; 0x4a000
   12610:	ldr	pc, [ip, #2796]!	; 0xaec

00012614 <waitpid@plt>:
   12614:	add	ip, pc, #0, 12
   12618:	add	ip, ip, #303104	; 0x4a000
   1261c:	ldr	pc, [ip, #2788]!	; 0xae4

00012620 <__ctype_get_mb_cur_max@plt>:
   12620:	add	ip, pc, #0, 12
   12624:	add	ip, ip, #303104	; 0x4a000
   12628:	ldr	pc, [ip, #2780]!	; 0xadc

0001262c <hasmntopt@plt>:
   1262c:	add	ip, pc, #0, 12
   12630:	add	ip, ip, #303104	; 0x4a000
   12634:	ldr	pc, [ip, #2772]!	; 0xad4

00012638 <strcpy@plt>:
   12638:	add	ip, pc, #0, 12
   1263c:	add	ip, ip, #303104	; 0x4a000
   12640:	ldr	pc, [ip, #2764]!	; 0xacc

00012644 <gettimeofday@plt>:
   12644:	add	ip, pc, #0, 12
   12648:	add	ip, ip, #303104	; 0x4a000
   1264c:	ldr	pc, [ip, #2756]!	; 0xac4

00012650 <__fpending@plt>:
   12650:	add	ip, pc, #0, 12
   12654:	add	ip, ip, #303104	; 0x4a000
   12658:	ldr	pc, [ip, #2748]!	; 0xabc

0001265c <mbrtowc@plt>:
   1265c:	add	ip, pc, #0, 12
   12660:	add	ip, ip, #303104	; 0x4a000
   12664:	ldr	pc, [ip, #2740]!	; 0xab4

00012668 <strtok_r@plt>:
   12668:	add	ip, pc, #0, 12
   1266c:	add	ip, ip, #303104	; 0x4a000
   12670:	ldr	pc, [ip, #2732]!	; 0xaac

00012674 <error@plt>:
   12674:	add	ip, pc, #0, 12
   12678:	add	ip, ip, #303104	; 0x4a000
   1267c:	ldr	pc, [ip, #2724]!	; 0xaa4

00012680 <getmntent@plt>:
   12680:	add	ip, pc, #0, 12
   12684:	add	ip, ip, #303104	; 0x4a000
   12688:	ldr	pc, [ip, #2716]!	; 0xa9c

0001268c <opendir@plt>:
   1268c:	add	ip, pc, #0, 12
   12690:	add	ip, ip, #303104	; 0x4a000
   12694:	ldr	pc, [ip, #2708]!	; 0xa94

00012698 <fnmatch@plt>:
   12698:	add	ip, pc, #0, 12
   1269c:	add	ip, ip, #303104	; 0x4a000
   126a0:	ldr	pc, [ip, #2700]!	; 0xa8c

000126a4 <open64@plt>:
   126a4:	add	ip, pc, #0, 12
   126a8:	add	ip, ip, #303104	; 0x4a000
   126ac:	ldr	pc, [ip, #2692]!	; 0xa84

000126b0 <getenv@plt>:
   126b0:	add	ip, pc, #0, 12
   126b4:	add	ip, ip, #303104	; 0x4a000
   126b8:	ldr	pc, [ip, #2684]!	; 0xa7c

000126bc <lgetfilecon@plt>:
   126bc:	add	ip, pc, #0, 12
   126c0:	add	ip, ip, #303104	; 0x4a000
   126c4:	ldr	pc, [ip, #2676]!	; 0xa74

000126c8 <malloc@plt>:
   126c8:	add	ip, pc, #0, 12
   126cc:	add	ip, ip, #303104	; 0x4a000
   126d0:	ldr	pc, [ip, #2668]!	; 0xa6c

000126d4 <__libc_start_main@plt>:
   126d4:	add	ip, pc, #0, 12
   126d8:	add	ip, ip, #303104	; 0x4a000
   126dc:	ldr	pc, [ip, #2660]!	; 0xa64

000126e0 <readlinkat@plt>:
   126e0:	add	ip, pc, #0, 12
   126e4:	add	ip, ip, #303104	; 0x4a000
   126e8:	ldr	pc, [ip, #2652]!	; 0xa5c

000126ec <strftime@plt>:
   126ec:	add	ip, pc, #0, 12
   126f0:	add	ip, ip, #303104	; 0x4a000
   126f4:	ldr	pc, [ip, #2644]!	; 0xa54

000126f8 <__freading@plt>:
   126f8:	add	ip, pc, #0, 12
   126fc:	add	ip, ip, #303104	; 0x4a000
   12700:	ldr	pc, [ip, #2636]!	; 0xa4c

00012704 <localtime@plt>:
   12704:	add	ip, pc, #0, 12
   12708:	add	ip, ip, #303104	; 0x4a000
   1270c:	ldr	pc, [ip, #2628]!	; 0xa44

00012710 <__ctype_tolower_loc@plt>:
   12710:	add	ip, pc, #0, 12
   12714:	add	ip, ip, #303104	; 0x4a000
   12718:	ldr	pc, [ip, #2620]!	; 0xa3c

0001271c <modf@plt>:
   1271c:	add	ip, pc, #0, 12
   12720:	add	ip, ip, #303104	; 0x4a000
   12724:	ldr	pc, [ip, #2612]!	; 0xa34

00012728 <__ctype_toupper_loc@plt>:
   12728:	add	ip, pc, #0, 12
   1272c:	add	ip, ip, #303104	; 0x4a000
   12730:	ldr	pc, [ip, #2604]!	; 0xa2c

00012734 <__gmon_start__@plt>:
   12734:	add	ip, pc, #0, 12
   12738:	add	ip, ip, #303104	; 0x4a000
   1273c:	ldr	pc, [ip, #2596]!	; 0xa24

00012740 <__ctype_b_loc@plt>:
   12740:	add	ip, pc, #0, 12
   12744:	add	ip, ip, #303104	; 0x4a000
   12748:	ldr	pc, [ip, #2588]!	; 0xa1c

0001274c <getcwd@plt>:
   1274c:	add	ip, pc, #0, 12
   12750:	add	ip, ip, #303104	; 0x4a000
   12754:	ldr	pc, [ip, #2580]!	; 0xa14

00012758 <exit@plt>:
   12758:	add	ip, pc, #0, 12
   1275c:	add	ip, ip, #303104	; 0x4a000
   12760:	ldr	pc, [ip, #2572]!	; 0xa0c

00012764 <feof@plt>:
   12764:	add	ip, pc, #0, 12
   12768:	add	ip, ip, #303104	; 0x4a000
   1276c:	ldr	pc, [ip, #2564]!	; 0xa04

00012770 <getfilecon@plt>:
   12770:	add	ip, pc, #0, 12
   12774:	add	ip, ip, #303104	; 0x4a000
   12778:	ldr	pc, [ip, #2556]!	; 0x9fc

0001277c <strtoul@plt>:
   1277c:	add	ip, pc, #0, 12
   12780:	add	ip, ip, #303104	; 0x4a000
   12784:	ldr	pc, [ip, #2548]!	; 0x9f4

00012788 <strlen@plt>:
   12788:	add	ip, pc, #0, 12
   1278c:	add	ip, ip, #303104	; 0x4a000
   12790:	ldr	pc, [ip, #2540]!	; 0x9ec

00012794 <strchr@plt>:
   12794:	add	ip, pc, #0, 12
   12798:	add	ip, ip, #303104	; 0x4a000
   1279c:	ldr	pc, [ip, #2532]!	; 0x9e4

000127a0 <setenv@plt>:
   127a0:	add	ip, pc, #0, 12
   127a4:	add	ip, ip, #303104	; 0x4a000
   127a8:	ldr	pc, [ip, #2524]!	; 0x9dc

000127ac <openat64@plt>:
   127ac:	add	ip, pc, #0, 12
   127b0:	add	ip, ip, #303104	; 0x4a000
   127b4:	ldr	pc, [ip, #2516]!	; 0x9d4

000127b8 <memrchr@plt>:
   127b8:	add	ip, pc, #0, 12
   127bc:	add	ip, ip, #303104	; 0x4a000
   127c0:	ldr	pc, [ip, #2508]!	; 0x9cc

000127c4 <fprintf@plt>:
   127c4:	add	ip, pc, #0, 12
   127c8:	add	ip, ip, #303104	; 0x4a000
   127cc:	ldr	pc, [ip, #2500]!	; 0x9c4

000127d0 <__errno_location@plt>:
   127d0:	add	ip, pc, #0, 12
   127d4:	add	ip, ip, #303104	; 0x4a000
   127d8:	ldr	pc, [ip, #2492]!	; 0x9bc

000127dc <iswalnum@plt>:
   127dc:	add	ip, pc, #0, 12
   127e0:	add	ip, ip, #303104	; 0x4a000
   127e4:	ldr	pc, [ip, #2484]!	; 0x9b4

000127e8 <snprintf@plt>:
   127e8:	add	ip, pc, #0, 12
   127ec:	add	ip, ip, #303104	; 0x4a000
   127f0:	ldr	pc, [ip, #2476]!	; 0x9ac

000127f4 <__cxa_atexit@plt>:
   127f4:	add	ip, pc, #0, 12
   127f8:	add	ip, ip, #303104	; 0x4a000
   127fc:	ldr	pc, [ip, #2468]!	; 0x9a4

00012800 <memset@plt>:
   12800:	add	ip, pc, #0, 12
   12804:	add	ip, ip, #303104	; 0x4a000
   12808:	ldr	pc, [ip, #2460]!	; 0x99c

0001280c <putchar@plt>:
   1280c:	add	ip, pc, #0, 12
   12810:	add	ip, ip, #303104	; 0x4a000
   12814:	ldr	pc, [ip, #2452]!	; 0x994

00012818 <strncpy@plt>:
   12818:	add	ip, pc, #0, 12
   1281c:	add	ip, ip, #303104	; 0x4a000
   12820:	ldr	pc, [ip, #2444]!	; 0x98c

00012824 <pthread_mutexattr_gettype@plt>:
   12824:	add	ip, pc, #0, 12
   12828:	add	ip, ip, #303104	; 0x4a000
   1282c:	ldr	pc, [ip, #2436]!	; 0x984

00012830 <btowc@plt>:
   12830:	add	ip, pc, #0, 12
   12834:	add	ip, ip, #303104	; 0x4a000
   12838:	ldr	pc, [ip, #2428]!	; 0x97c

0001283c <strtod@plt>:
   1283c:	add	ip, pc, #0, 12
   12840:	add	ip, ip, #303104	; 0x4a000
   12844:	ldr	pc, [ip, #2420]!	; 0x974

00012848 <fileno@plt>:
   12848:	add	ip, pc, #0, 12
   1284c:	add	ip, ip, #303104	; 0x4a000
   12850:	ldr	pc, [ip, #2412]!	; 0x96c

00012854 <difftime@plt>:
   12854:	add	ip, pc, #0, 12
   12858:	add	ip, ip, #303104	; 0x4a000
   1285c:	ldr	pc, [ip, #2404]!	; 0x964

00012860 <memchr@plt>:
   12860:	add	ip, pc, #0, 12
   12864:	add	ip, ip, #303104	; 0x4a000
   12868:	ldr	pc, [ip, #2396]!	; 0x95c

0001286c <setfilecon@plt>:
   1286c:	add	ip, pc, #0, 12
   12870:	add	ip, ip, #303104	; 0x4a000
   12874:	ldr	pc, [ip, #2388]!	; 0x954

00012878 <access@plt>:
   12878:	add	ip, pc, #0, 12
   1287c:	add	ip, ip, #303104	; 0x4a000
   12880:	ldr	pc, [ip, #2380]!	; 0x94c

00012884 <fclose@plt>:
   12884:	add	ip, pc, #0, 12
   12888:	add	ip, ip, #303104	; 0x4a000
   1288c:	ldr	pc, [ip, #2372]!	; 0x944

00012890 <strnlen@plt>:
   12890:	add	ip, pc, #0, 12
   12894:	add	ip, ip, #303104	; 0x4a000
   12898:	ldr	pc, [ip, #2364]!	; 0x93c

0001289c <fseeko64@plt>:
   1289c:	add	ip, pc, #0, 12
   128a0:	add	ip, ip, #303104	; 0x4a000
   128a4:	ldr	pc, [ip, #2356]!	; 0x934

000128a8 <endmntent@plt>:
   128a8:	add	ip, pc, #0, 12
   128ac:	add	ip, ip, #303104	; 0x4a000
   128b0:	ldr	pc, [ip, #2348]!	; 0x92c

000128b4 <fcntl64@plt>:
   128b4:	add	ip, pc, #0, 12
   128b8:	add	ip, ip, #303104	; 0x4a000
   128bc:	ldr	pc, [ip, #2340]!	; 0x924

000128c0 <rpmatch@plt>:
   128c0:	add	ip, pc, #0, 12
   128c4:	add	ip, ip, #303104	; 0x4a000
   128c8:	ldr	pc, [ip, #2332]!	; 0x91c

000128cc <setlocale@plt>:
   128cc:	add	ip, pc, #0, 12
   128d0:	add	ip, ip, #303104	; 0x4a000
   128d4:	ldr	pc, [ip, #2324]!	; 0x914

000128d8 <fork@plt>:
   128d8:	add	ip, pc, #0, 12
   128dc:	add	ip, ip, #303104	; 0x4a000
   128e0:	ldr	pc, [ip, #2316]!	; 0x90c

000128e4 <endpwent@plt>:
   128e4:	add	ip, pc, #0, 12
   128e8:	add	ip, ip, #303104	; 0x4a000
   128ec:	ldr	pc, [ip, #2308]!	; 0x904

000128f0 <strrchr@plt>:
   128f0:	add	ip, pc, #0, 12
   128f4:	add	ip, ip, #303104	; 0x4a000
   128f8:	ldr	pc, [ip, #2300]!	; 0x8fc

000128fc <vfprintf@plt>:
   128fc:	add	ip, pc, #0, 12
   12900:	add	ip, ip, #303104	; 0x4a000
   12904:	ldr	pc, [ip, #2292]!	; 0x8f4

00012908 <nl_langinfo@plt>:
   12908:	add	ip, pc, #0, 12
   1290c:	add	ip, ip, #303104	; 0x4a000
   12910:	ldr	pc, [ip, #2284]!	; 0x8ec

00012914 <fputc@plt>:
   12914:	add	ip, pc, #0, 12
   12918:	add	ip, ip, #303104	; 0x4a000
   1291c:	ldr	pc, [ip, #2276]!	; 0x8e4

00012920 <sscanf@plt>:
   12920:	add	ip, pc, #0, 12
   12924:	add	ip, ip, #303104	; 0x4a000
   12928:	ldr	pc, [ip, #2268]!	; 0x8dc

0001292c <localeconv@plt>:
   1292c:	add	ip, pc, #0, 12
   12930:	add	ip, ip, #303104	; 0x4a000
   12934:	ldr	pc, [ip, #2260]!	; 0x8d4

00012938 <sprintf@plt>:
   12938:	add	ip, pc, #0, 12
   1293c:	add	ip, ip, #303104	; 0x4a000
   12940:	ldr	pc, [ip, #2252]!	; 0x8cc

00012944 <readdir64@plt>:
   12944:	add	ip, pc, #0, 12
   12948:	add	ip, ip, #303104	; 0x4a000
   1294c:	ldr	pc, [ip, #2244]!	; 0x8c4

00012950 <fdopendir@plt>:
   12950:	add	ip, pc, #0, 12
   12954:	add	ip, ip, #303104	; 0x4a000
   12958:	ldr	pc, [ip, #2236]!	; 0x8bc

0001295c <timegm@plt>:
   1295c:	add	ip, pc, #0, 12
   12960:	add	ip, ip, #303104	; 0x4a000
   12964:	ldr	pc, [ip, #2228]!	; 0x8b4

00012968 <putc@plt>:
   12968:	add	ip, pc, #0, 12
   1296c:	add	ip, ip, #303104	; 0x4a000
   12970:	ldr	pc, [ip, #2220]!	; 0x8ac

00012974 <dirfd@plt>:
   12974:	add	ip, pc, #0, 12
   12978:	add	ip, ip, #303104	; 0x4a000
   1297c:	ldr	pc, [ip, #2212]!	; 0x8a4

00012980 <fchdir@plt>:
   12980:	add	ip, pc, #0, 12
   12984:	add	ip, ip, #303104	; 0x4a000
   12988:	ldr	pc, [ip, #2204]!	; 0x89c

0001298c <fopen64@plt>:
   1298c:	add	ip, pc, #0, 12
   12990:	add	ip, ip, #303104	; 0x4a000
   12994:	ldr	pc, [ip, #2196]!	; 0x894

00012998 <qsort@plt>:
   12998:	add	ip, pc, #0, 12
   1299c:	add	ip, ip, #303104	; 0x4a000
   129a0:	ldr	pc, [ip, #2188]!	; 0x88c

000129a4 <freecon@plt>:
   129a4:	add	ip, pc, #0, 12
   129a8:	add	ip, ip, #303104	; 0x4a000
   129ac:	ldr	pc, [ip, #2180]!	; 0x884

000129b0 <strpbrk@plt>:
   129b0:	add	ip, pc, #0, 12
   129b4:	add	ip, ip, #303104	; 0x4a000
   129b8:	ldr	pc, [ip, #2172]!	; 0x87c

000129bc <setmntent@plt>:
   129bc:	add	ip, pc, #0, 12
   129c0:	add	ip, ip, #303104	; 0x4a000
   129c4:	ldr	pc, [ip, #2164]!	; 0x874

000129c8 <bindtextdomain@plt>:
   129c8:	add	ip, pc, #0, 12
   129cc:	add	ip, ip, #303104	; 0x4a000
   129d0:	ldr	pc, [ip, #2156]!	; 0x86c

000129d4 <getdelim@plt>:
   129d4:	add	ip, pc, #0, 12
   129d8:	add	ip, ip, #303104	; 0x4a000
   129dc:	ldr	pc, [ip, #2148]!	; 0x864

000129e0 <__xstat64@plt>:
   129e0:	add	ip, pc, #0, 12
   129e4:	add	ip, ip, #303104	; 0x4a000
   129e8:	ldr	pc, [ip, #2140]!	; 0x85c

000129ec <isatty@plt>:
   129ec:	add	ip, pc, #0, 12
   129f0:	add	ip, ip, #303104	; 0x4a000
   129f4:	ldr	pc, [ip, #2132]!	; 0x854

000129f8 <unsetenv@plt>:
   129f8:	add	ip, pc, #0, 12
   129fc:	add	ip, ip, #303104	; 0x4a000
   12a00:	ldr	pc, [ip, #2124]!	; 0x84c

00012a04 <towupper@plt>:
   12a04:	add	ip, pc, #0, 12
   12a08:	add	ip, ip, #303104	; 0x4a000
   12a0c:	ldr	pc, [ip, #2116]!	; 0x844

00012a10 <fputs@plt>:
   12a10:	add	ip, pc, #0, 12
   12a14:	add	ip, ip, #303104	; 0x4a000
   12a18:	ldr	pc, [ip, #2108]!	; 0x83c

00012a1c <strncmp@plt>:
   12a1c:	add	ip, pc, #0, 12
   12a20:	add	ip, ip, #303104	; 0x4a000
   12a24:	ldr	pc, [ip, #2100]!	; 0x834

00012a28 <abort@plt>:
   12a28:	add	ip, pc, #0, 12
   12a2c:	add	ip, ip, #303104	; 0x4a000
   12a30:	ldr	pc, [ip, #2092]!	; 0x82c

00012a34 <close@plt>:
   12a34:	add	ip, pc, #0, 12
   12a38:	add	ip, ip, #303104	; 0x4a000
   12a3c:	ldr	pc, [ip, #2084]!	; 0x824

00012a40 <__lxstat64@plt>:
   12a40:	add	ip, pc, #0, 12
   12a44:	add	ip, ip, #303104	; 0x4a000
   12a48:	ldr	pc, [ip, #2076]!	; 0x81c

00012a4c <closedir@plt>:
   12a4c:	add	ip, pc, #0, 12
   12a50:	add	ip, ip, #303104	; 0x4a000
   12a54:	ldr	pc, [ip, #2068]!	; 0x814

00012a58 <getgrgid@plt>:
   12a58:	add	ip, pc, #0, 12
   12a5c:	add	ip, ip, #303104	; 0x4a000
   12a60:	ldr	pc, [ip, #2060]!	; 0x80c

00012a64 <getgrnam@plt>:
   12a64:	add	ip, pc, #0, 12
   12a68:	add	ip, ip, #303104	; 0x4a000
   12a6c:	ldr	pc, [ip, #2052]!	; 0x804

00012a70 <strspn@plt>:
   12a70:	add	ip, pc, #0, 12
   12a74:	add	ip, ip, #303104	; 0x4a000
   12a78:	ldr	pc, [ip, #2044]!	; 0x7fc

00012a7c <__assert_fail@plt>:
   12a7c:	add	ip, pc, #0, 12
   12a80:	add	ip, ip, #303104	; 0x4a000
   12a84:	ldr	pc, [ip, #2036]!	; 0x7f4

Disassembly of section .text:

00012a90 <.text>:
   12a90:	mov	fp, #0
   12a94:	mov	lr, #0
   12a98:	pop	{r1}		; (ldr r1, [sp], #4)
   12a9c:	mov	r2, sp
   12aa0:	push	{r2}		; (str r2, [sp, #-4]!)
   12aa4:	push	{r0}		; (str r0, [sp, #-4]!)
   12aa8:	ldr	ip, [pc, #16]	; 12ac0 <__assert_fail@plt+0x44>
   12aac:	push	{ip}		; (str ip, [sp, #-4]!)
   12ab0:	ldr	r0, [pc, #12]	; 12ac4 <__assert_fail@plt+0x48>
   12ab4:	ldr	r3, [pc, #12]	; 12ac8 <__assert_fail@plt+0x4c>
   12ab8:	bl	126d4 <__libc_start_main@plt>
   12abc:	bl	12a28 <abort@plt>
   12ac0:	andeq	r6, r4, r0, lsl r9
   12ac4:	andeq	r2, r1, r0, lsl #23
   12ac8:			; <UNDEFINED> instruction: 0x000468b0
   12acc:	ldr	r3, [pc, #20]	; 12ae8 <__assert_fail@plt+0x6c>
   12ad0:	ldr	r2, [pc, #20]	; 12aec <__assert_fail@plt+0x70>
   12ad4:	add	r3, pc, r3
   12ad8:	ldr	r2, [r3, r2]
   12adc:	cmp	r2, #0
   12ae0:	bxeq	lr
   12ae4:	b	12734 <__gmon_start__@plt>
   12ae8:	andeq	sl, r4, r4, lsr #10
   12aec:	andeq	r0, r0, ip, ror r2
   12af0:	ldr	r0, [pc, #24]	; 12b10 <__assert_fail@plt+0x94>
   12af4:	ldr	r3, [pc, #24]	; 12b14 <__assert_fail@plt+0x98>
   12af8:	cmp	r3, r0
   12afc:	bxeq	lr
   12b00:	ldr	r3, [pc, #16]	; 12b18 <__assert_fail@plt+0x9c>
   12b04:	cmp	r3, #0
   12b08:	bxeq	lr
   12b0c:	bx	r3
   12b10:	andeq	sp, r5, r4, lsr r5
   12b14:	andeq	sp, r5, r4, lsr r5
   12b18:	andeq	r0, r0, r0
   12b1c:	ldr	r0, [pc, #36]	; 12b48 <__assert_fail@plt+0xcc>
   12b20:	ldr	r1, [pc, #36]	; 12b4c <__assert_fail@plt+0xd0>
   12b24:	sub	r1, r1, r0
   12b28:	asr	r1, r1, #2
   12b2c:	add	r1, r1, r1, lsr #31
   12b30:	asrs	r1, r1, #1
   12b34:	bxeq	lr
   12b38:	ldr	r3, [pc, #16]	; 12b50 <__assert_fail@plt+0xd4>
   12b3c:	cmp	r3, #0
   12b40:	bxeq	lr
   12b44:	bx	r3
   12b48:	andeq	sp, r5, r4, lsr r5
   12b4c:	andeq	sp, r5, r4, lsr r5
   12b50:	andeq	r0, r0, r0
   12b54:	push	{r4, lr}
   12b58:	ldr	r4, [pc, #24]	; 12b78 <__assert_fail@plt+0xfc>
   12b5c:	ldrb	r3, [r4]
   12b60:	cmp	r3, #0
   12b64:	popne	{r4, pc}
   12b68:	bl	12af0 <__assert_fail@plt+0x74>
   12b6c:	mov	r3, #1
   12b70:	strb	r3, [r4]
   12b74:	pop	{r4, pc}
   12b78:	andeq	sp, r5, r8, asr r5
   12b7c:	b	12b1c <__assert_fail@plt+0xa0>
   12b80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b84:	add	fp, sp, #28
   12b88:	sub	sp, sp, #236	; 0xec
   12b8c:	mov	r5, r0
   12b90:	ldr	r0, [r1]
   12b94:	mov	r6, r1
   12b98:	cmp	r0, #0
   12b9c:	movweq	r0, #26948	; 0x6944
   12ba0:	movteq	r0, #4
   12ba4:	bl	2adf8 <__assert_fail@plt+0x1837c>
   12ba8:	bl	188f0 <__assert_fail@plt+0x5e74>
   12bac:	movw	r8, #56896	; 0xde40
   12bb0:	mov	r0, #0
   12bb4:	movt	r8, #5
   12bb8:	str	r0, [r8, #28]
   12bbc:	strb	r0, [r8, #40]	; 0x28
   12bc0:	strb	r0, [r8, #32]
   12bc4:	mvn	r0, #99	; 0x63
   12bc8:	str	r0, [r8, #16]
   12bcc:	bl	20e4c <__assert_fail@plt+0xe3d0>
   12bd0:	cmp	r0, #0
   12bd4:	beq	12bdc <__assert_fail@plt+0x160>
   12bd8:	bl	20a84 <__assert_fail@plt+0xe008>
   12bdc:	movw	r0, #39134	; 0x98de
   12be0:	movt	r0, #4
   12be4:	bl	19a8c <__assert_fail@plt+0x7010>
   12be8:	cmp	r0, #0
   12bec:	str	r0, [r8, #36]	; 0x24
   12bf0:	beq	1303c <__assert_fail@plt+0x5c0>
   12bf4:	movw	r4, #56940	; 0xde6c
   12bf8:	movt	r4, #5
   12bfc:	mov	r0, r4
   12c00:	bl	19624 <__assert_fail@plt+0x6ba8>
   12c04:	movw	r1, #34847	; 0x881f
   12c08:	mov	r0, #6
   12c0c:	movt	r1, #4
   12c10:	bl	128cc <setlocale@plt>
   12c14:	movw	r7, #45133	; 0xb04d
   12c18:	movw	r1, #26997	; 0x6975
   12c1c:	movt	r7, #4
   12c20:	movt	r1, #4
   12c24:	mov	r0, r7
   12c28:	bl	129c8 <bindtextdomain@plt>
   12c2c:	mov	r0, r7
   12c30:	bl	12590 <textdomain@plt>
   12c34:	movw	r0, #9808	; 0x2650
   12c38:	movt	r0, #2
   12c3c:	bl	46914 <__assert_fail@plt+0x33e98>
   12c40:	cmp	r0, #0
   12c44:	bne	13050 <__assert_fail@plt+0x5d4>
   12c48:	mov	r0, r5
   12c4c:	mov	r1, r6
   12c50:	bl	19190 <__assert_fail@plt+0x6714>
   12c54:	mov	r7, r0
   12c58:	ldr	r0, [r4, #44]	; 0x2c
   12c5c:	tst	r0, #2
   12c60:	movwne	r1, #36460	; 0x8e6c
   12c64:	movtne	r1, #1
   12c68:	strne	r1, [r4, #52]	; 0x34
   12c6c:	tst	r0, #128	; 0x80
   12c70:	bne	13004 <__assert_fail@plt+0x588>
   12c74:	mov	r0, r5
   12c78:	mov	r1, r6
   12c7c:	mov	r2, r7
   12c80:	bl	16220 <__assert_fail@plt+0x37a4>
   12c84:	mov	r9, r0
   12c88:	add	r6, r6, r7, lsl #2
   12c8c:	mov	r0, #0
   12c90:	cmp	r7, r5
   12c94:	bge	12ca8 <__assert_fail@plt+0x22c>
   12c98:	ldr	r0, [r6]
   12c9c:	mov	r1, #1
   12ca0:	bl	19104 <__assert_fail@plt+0x6688>
   12ca4:	eor	r0, r0, #1
   12ca8:	ldr	r5, [r4, #76]	; 0x4c
   12cac:	cmp	r5, #0
   12cb0:	beq	12d9c <__assert_fail@plt+0x320>
   12cb4:	cmp	r0, #0
   12cb8:	bne	1307c <__assert_fail@plt+0x600>
   12cbc:	movw	r1, #35210	; 0x898a
   12cc0:	mov	r0, r5
   12cc4:	movt	r1, #4
   12cc8:	bl	123d4 <strcmp@plt>
   12ccc:	cmp	r0, #0
   12cd0:	beq	12dc8 <__assert_fail@plt+0x34c>
   12cd4:	mov	r0, #0
   12cd8:	mov	r1, r5
   12cdc:	bl	19994 <__assert_fail@plt+0x6f18>
   12ce0:	str	r0, [sp, #20]
   12ce4:	ldr	r0, [r4, #76]	; 0x4c
   12ce8:	movw	r1, #45300	; 0xb0f4
   12cec:	movt	r1, #4
   12cf0:	bl	1298c <fopen64@plt>
   12cf4:	cmp	r0, #0
   12cf8:	beq	13120 <__assert_fail@plt+0x6a4>
   12cfc:	mov	r6, r0
   12d00:	bl	12848 <fileno@plt>
   12d04:	cmn	r0, #1
   12d08:	ble	13150 <__assert_fail@plt+0x6d4>
   12d0c:	mov	r5, r0
   12d10:	ldrb	r0, [r4, #80]	; 0x50
   12d14:	cmp	r0, #0
   12d18:	beq	12d8c <__assert_fail@plt+0x310>
   12d1c:	add	r2, sp, #128	; 0x80
   12d20:	mov	r0, #3
   12d24:	mov	r1, r5
   12d28:	bl	125e4 <__fxstat64@plt>
   12d2c:	cmp	r0, #0
   12d30:	bne	12d8c <__assert_fail@plt+0x310>
   12d34:	add	r2, sp, #24
   12d38:	mov	r0, #3
   12d3c:	mov	r1, #0
   12d40:	bl	125e4 <__fxstat64@plt>
   12d44:	cmp	r0, #0
   12d48:	bne	12d8c <__assert_fail@plt+0x310>
   12d4c:	ldr	r0, [sp, #120]	; 0x78
   12d50:	ldr	r2, [sp, #224]	; 0xe0
   12d54:	ldr	r1, [sp, #124]	; 0x7c
   12d58:	ldr	r3, [sp, #228]	; 0xe4
   12d5c:	eor	r1, r3, r1
   12d60:	eor	r0, r2, r0
   12d64:	orrs	r0, r0, r1
   12d68:	bne	12d8c <__assert_fail@plt+0x310>
   12d6c:	ldr	r0, [sp, #24]
   12d70:	ldr	r2, [sp, #128]	; 0x80
   12d74:	ldr	r1, [sp, #28]
   12d78:	ldr	r3, [sp, #132]	; 0x84
   12d7c:	eor	r1, r3, r1
   12d80:	eor	r0, r2, r0
   12d84:	orrs	r0, r0, r1
   12d88:	beq	1319c <__assert_fail@plt+0x720>
   12d8c:	mov	r0, r5
   12d90:	mov	r1, #1
   12d94:	bl	225c4 <__assert_fail@plt+0xfb48>
   12d98:	b	12e04 <__assert_fail@plt+0x388>
   12d9c:	cmp	r0, #0
   12da0:	beq	12f80 <__assert_fail@plt+0x504>
   12da4:	mov	r0, r6
   12da8:	bl	222b0 <__assert_fail@plt+0xf834>
   12dac:	mov	r5, r0
   12db0:	mov	r0, #0
   12db4:	mov	r6, #0
   12db8:	str	r0, [sp, #20]
   12dbc:	cmp	r5, #0
   12dc0:	bne	12e18 <__assert_fail@plt+0x39c>
   12dc4:	b	13038 <__assert_fail@plt+0x5bc>
   12dc8:	ldrb	r0, [r4, #80]	; 0x50
   12dcc:	cmp	r0, #0
   12dd0:	bne	13170 <__assert_fail@plt+0x6f4>
   12dd4:	movw	r1, #27227	; 0x6a5b
   12dd8:	mov	r0, #0
   12ddc:	mov	r2, #5
   12de0:	movt	r1, #4
   12de4:	bl	1253c <dcgettext@plt>
   12de8:	mov	r1, r0
   12dec:	mov	r0, #0
   12df0:	bl	19994 <__assert_fail@plt+0x6f18>
   12df4:	str	r0, [sp, #20]
   12df8:	movw	r0, #54608	; 0xd550
   12dfc:	movt	r0, #5
   12e00:	ldr	r6, [r0]
   12e04:	mov	r0, r6
   12e08:	bl	222e4 <__assert_fail@plt+0xf868>
   12e0c:	mov	r5, r0
   12e10:	cmp	r5, #0
   12e14:	beq	13038 <__assert_fail@plt+0x5bc>
   12e18:	add	r1, sp, #128	; 0x80
   12e1c:	mov	r0, r5
   12e20:	str	r6, [sp, #12]
   12e24:	str	r9, [sp, #16]
   12e28:	bl	22318 <__assert_fail@plt+0xf89c>
   12e2c:	cmp	r0, #0
   12e30:	beq	12f24 <__assert_fail@plt+0x4a8>
   12e34:	mov	sl, r0
   12e38:	mov	r6, #1
   12e3c:	add	r9, sp, #128	; 0x80
   12e40:	mov	r7, #1
   12e44:	ldrb	r1, [sl]
   12e48:	ldr	r0, [r4, #76]	; 0x4c
   12e4c:	cmp	r1, #0
   12e50:	beq	12e94 <__assert_fail@plt+0x418>
   12e54:	cmp	r0, #0
   12e58:	bne	12e70 <__assert_fail@plt+0x3f4>
   12e5c:	mov	r0, sl
   12e60:	mov	r1, #1
   12e64:	bl	19104 <__assert_fail@plt+0x6688>
   12e68:	cmp	r0, #0
   12e6c:	bne	12fa0 <__assert_fail@plt+0x524>
   12e70:	mov	r0, sl
   12e74:	bl	12788 <strlen@plt>
   12e78:	str	r0, [r8, #20]
   12e7c:	mov	r0, sl
   12e80:	bl	131e0 <__assert_fail@plt+0x764>
   12e84:	cmp	r0, #0
   12e88:	beq	12f9c <__assert_fail@plt+0x520>
   12e8c:	and	r7, r7, r0
   12e90:	b	12f08 <__assert_fail@plt+0x48c>
   12e94:	cmp	r0, #0
   12e98:	beq	12edc <__assert_fail@plt+0x460>
   12e9c:	mov	r0, r5
   12ea0:	bl	223d0 <__assert_fail@plt+0xf954>
   12ea4:	movw	r1, #27498	; 0x6b6a
   12ea8:	mov	r7, r0
   12eac:	mov	r0, #0
   12eb0:	mov	r2, #5
   12eb4:	movt	r1, #4
   12eb8:	bl	1253c <dcgettext@plt>
   12ebc:	ldr	r3, [sp, #20]
   12ec0:	movw	r2, #27487	; 0x6b5f
   12ec4:	str	r0, [sp, #4]
   12ec8:	mov	r0, #0
   12ecc:	mov	r1, #0
   12ed0:	str	r7, [sp]
   12ed4:	movt	r2, #4
   12ed8:	b	12efc <__assert_fail@plt+0x480>
   12edc:	mov	r0, #0
   12ee0:	mov	r1, sl
   12ee4:	bl	19994 <__assert_fail@plt+0x6f18>
   12ee8:	movw	r2, #52175	; 0xcbcf
   12eec:	mov	r3, r0
   12ef0:	mov	r0, #0
   12ef4:	mov	r1, #2
   12ef8:	movt	r2, #4
   12efc:	bl	12674 <error@plt>
   12f00:	str	r6, [r8, #28]
   12f04:	mov	r7, #0
   12f08:	mov	r0, r5
   12f0c:	mov	r1, r9
   12f10:	bl	22318 <__assert_fail@plt+0xf89c>
   12f14:	mov	sl, r0
   12f18:	cmp	r0, #0
   12f1c:	bne	12e44 <__assert_fail@plt+0x3c8>
   12f20:	b	12f28 <__assert_fail@plt+0x4ac>
   12f24:	mov	r7, #1
   12f28:	ldr	r0, [sp, #128]	; 0x80
   12f2c:	ldr	r9, [sp, #16]
   12f30:	cmp	r0, #2
   12f34:	beq	12fa4 <__assert_fail@plt+0x528>
   12f38:	cmp	r0, #4
   12f3c:	bne	13030 <__assert_fail@plt+0x5b4>
   12f40:	bl	127d0 <__errno_location@plt>
   12f44:	ldr	r6, [r0]
   12f48:	movw	r1, #27432	; 0x6b28
   12f4c:	mov	r0, #0
   12f50:	mov	r2, #5
   12f54:	mov	r7, #0
   12f58:	movt	r1, #4
   12f5c:	bl	1253c <dcgettext@plt>
   12f60:	ldr	r3, [sp, #20]
   12f64:	mov	r2, r0
   12f68:	mov	r0, #0
   12f6c:	mov	r1, r6
   12f70:	bl	12674 <error@plt>
   12f74:	mov	r0, #1
   12f78:	str	r0, [r8, #28]
   12f7c:	b	12fa4 <__assert_fail@plt+0x528>
   12f80:	mov	r0, #46	; 0x2e
   12f84:	strh	r0, [sp, #128]	; 0x80
   12f88:	add	r0, sp, #128	; 0x80
   12f8c:	bl	131e0 <__assert_fail@plt+0x764>
   12f90:	cmp	r0, #0
   12f94:	bne	12fec <__assert_fail@plt+0x570>
   12f98:	b	12ff8 <__assert_fail@plt+0x57c>
   12f9c:	mov	r7, #0
   12fa0:	ldr	r9, [sp, #16]
   12fa4:	mov	r0, r5
   12fa8:	bl	223f4 <__assert_fail@plt+0xf978>
   12fac:	tst	r7, #1
   12fb0:	ldrne	r0, [r4, #76]	; 0x4c
   12fb4:	cmpne	r0, #0
   12fb8:	bne	12fc8 <__assert_fail@plt+0x54c>
   12fbc:	tst	r7, #1
   12fc0:	bne	12fec <__assert_fail@plt+0x570>
   12fc4:	b	12ff8 <__assert_fail@plt+0x57c>
   12fc8:	ldr	r4, [sp, #12]
   12fcc:	mov	r0, r4
   12fd0:	bl	1247c <ferror@plt>
   12fd4:	cmp	r0, #0
   12fd8:	bne	130f8 <__assert_fail@plt+0x67c>
   12fdc:	mov	r0, r4
   12fe0:	bl	12884 <fclose@plt>
   12fe4:	cmp	r0, #0
   12fe8:	bne	130f8 <__assert_fail@plt+0x67c>
   12fec:	mov	r0, r9
   12ff0:	bl	154b4 <__assert_fail@plt+0x2a38>
   12ff4:	bl	18990 <__assert_fail@plt+0x5f14>
   12ff8:	ldr	r0, [r8, #28]
   12ffc:	sub	sp, fp, #28
   13000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13004:	movw	r0, #54600	; 0xd548
   13008:	movt	r0, #5
   1300c:	ldr	r9, [r0]
   13010:	add	r0, r4, #28
   13014:	bl	12530 <ctime@plt>
   13018:	movw	r1, #27056	; 0x69b0
   1301c:	mov	r2, r0
   13020:	mov	r0, r9
   13024:	movt	r1, #4
   13028:	bl	127c4 <fprintf@plt>
   1302c:	b	12c74 <__assert_fail@plt+0x1f8>
   13030:	cmp	r0, #3
   13034:	bne	130d8 <__assert_fail@plt+0x65c>
   13038:	bl	2e150 <__assert_fail@plt+0x1b6d4>
   1303c:	bl	127d0 <__errno_location@plt>
   13040:	ldr	r4, [r0]
   13044:	movw	r1, #26953	; 0x6949
   13048:	movt	r1, #4
   1304c:	b	13060 <__assert_fail@plt+0x5e4>
   13050:	bl	127d0 <__errno_location@plt>
   13054:	ldr	r4, [r0]
   13058:	movw	r1, #27021	; 0x698d
   1305c:	movt	r1, #4
   13060:	mov	r0, #0
   13064:	mov	r2, #5
   13068:	bl	1253c <dcgettext@plt>
   1306c:	mov	r2, r0
   13070:	mov	r0, #1
   13074:	mov	r1, r4
   13078:	bl	12674 <error@plt>
   1307c:	movw	r1, #27075	; 0x69c3
   13080:	mov	r0, #0
   13084:	mov	r2, #5
   13088:	movt	r1, #4
   1308c:	bl	1253c <dcgettext@plt>
   13090:	ldr	r1, [r6]
   13094:	mov	r4, r0
   13098:	mov	r0, #0
   1309c:	bl	19994 <__assert_fail@plt+0x6f18>
   130a0:	mov	r3, r0
   130a4:	mov	r0, #0
   130a8:	mov	r1, #0
   130ac:	mov	r2, r4
   130b0:	bl	12674 <error@plt>
   130b4:	movw	r1, #27092	; 0x69d4
   130b8:	mov	r0, #0
   130bc:	mov	r2, #5
   130c0:	movt	r1, #4
   130c4:	bl	1253c <dcgettext@plt>
   130c8:	movw	r2, #52175	; 0xcbcf
   130cc:	mov	r3, r0
   130d0:	movt	r2, #4
   130d4:	b	13190 <__assert_fail@plt+0x714>
   130d8:	movw	r0, #27447	; 0x6b37
   130dc:	movw	r1, #27271	; 0x6a87
   130e0:	movw	r3, #27281	; 0x6a91
   130e4:	movw	r2, #675	; 0x2a3
   130e8:	movt	r0, #4
   130ec:	movt	r1, #4
   130f0:	movt	r3, #4
   130f4:	bl	12a7c <__assert_fail@plt>
   130f8:	movw	r1, #27528	; 0x6b88
   130fc:	mov	r0, #0
   13100:	mov	r2, #5
   13104:	movt	r1, #4
   13108:	bl	1253c <dcgettext@plt>
   1310c:	ldr	r3, [sp, #20]
   13110:	mov	r2, r0
   13114:	mov	r0, #1
   13118:	mov	r1, #0
   1311c:	bl	12674 <error@plt>
   13120:	bl	127d0 <__errno_location@plt>
   13124:	ldr	r4, [r0]
   13128:	movw	r1, #27244	; 0x6a6c
   1312c:	mov	r0, #0
   13130:	mov	r2, #5
   13134:	movt	r1, #4
   13138:	bl	1253c <dcgettext@plt>
   1313c:	ldr	r3, [sp, #20]
   13140:	mov	r2, r0
   13144:	mov	r0, #1
   13148:	mov	r1, r4
   1314c:	bl	12674 <error@plt>
   13150:	movw	r0, #27750	; 0x6c66
   13154:	movw	r1, #27271	; 0x6a87
   13158:	movw	r3, #27281	; 0x6a91
   1315c:	movw	r2, #610	; 0x262
   13160:	movt	r0, #4
   13164:	movt	r1, #4
   13168:	movt	r3, #4
   1316c:	bl	12a7c <__assert_fail@plt>
   13170:	movw	r1, #27143	; 0x6a07
   13174:	mov	r0, #0
   13178:	mov	r2, #5
   1317c:	movt	r1, #4
   13180:	bl	1253c <dcgettext@plt>
   13184:	movw	r2, #50068	; 0xc394
   13188:	mov	r3, r0
   1318c:	movt	r2, #4
   13190:	mov	r0, #1
   13194:	mov	r1, #0
   13198:	bl	12674 <error@plt>
   1319c:	movw	r1, #27333	; 0x6ac5
   131a0:	mov	r0, #0
   131a4:	mov	r2, #5
   131a8:	movt	r1, #4
   131ac:	bl	1253c <dcgettext@plt>
   131b0:	mov	r3, r0
   131b4:	ldr	r0, [sp, #20]
   131b8:	movw	r2, #27325	; 0x6abd
   131bc:	movt	r2, #4
   131c0:	str	r0, [sp]
   131c4:	b	13190 <__assert_fail@plt+0x714>
   131c8:	movw	r1, #53896	; 0xd288
   131cc:	movt	r1, #5
   131d0:	ldr	r1, [r1]
   131d4:	str	r1, [r0]
   131d8:	mov	r0, #1
   131dc:	bx	lr
   131e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131e4:	add	fp, sp, #28
   131e8:	sub	sp, sp, #268	; 0x10c
   131ec:	mov	r7, r0
   131f0:	bl	12788 <strlen@plt>
   131f4:	movw	sl, #56896	; 0xde40
   131f8:	movt	sl, #5
   131fc:	str	r0, [sl, #20]
   13200:	movw	r0, #53896	; 0xd288
   13204:	movt	r0, #5
   13208:	ldr	r1, [r0]
   1320c:	tst	r1, #512	; 0x200
   13210:	beq	13230 <__assert_fail@plt+0x7b4>
   13214:	movw	r2, #53900	; 0xd28c
   13218:	mvn	r0, #99	; 0x63
   1321c:	movt	r2, #5
   13220:	str	r0, [sl, #16]
   13224:	ldr	r3, [r2]
   13228:	cmn	r3, #1
   1322c:	strle	r0, [r2]
   13230:	movw	r6, #56940	; 0xde6c
   13234:	mov	r0, #0
   13238:	movt	r6, #5
   1323c:	str	r0, [sp, #52]	; 0x34
   13240:	str	r7, [sp, #48]	; 0x30
   13244:	ldr	r0, [r6, #48]	; 0x30
   13248:	cmp	r0, #0
   1324c:	beq	13270 <__assert_fail@plt+0x7f4>
   13250:	cmp	r0, #1
   13254:	beq	13268 <__assert_fail@plt+0x7ec>
   13258:	cmp	r0, #2
   1325c:	bne	13284 <__assert_fail@plt+0x808>
   13260:	mov	r0, #17
   13264:	b	13274 <__assert_fail@plt+0x7f8>
   13268:	mov	r0, #3
   1326c:	b	13274 <__assert_fail@plt+0x7f8>
   13270:	mov	r0, #16
   13274:	orr	r1, r1, r0
   13278:	movw	r0, #53896	; 0xd288
   1327c:	movt	r0, #5
   13280:	str	r1, [r0]
   13284:	ldrb	r0, [r6, #13]
   13288:	mov	r2, #0
   1328c:	mov	r4, #0
   13290:	cmp	r0, #0
   13294:	movwne	r0, #53896	; 0xd288
   13298:	orrne	r1, r1, #64	; 0x40
   1329c:	movtne	r0, #5
   132a0:	strne	r1, [r0]
   132a4:	add	r0, sp, #48	; 0x30
   132a8:	bl	2fe38 <__assert_fail@plt+0x1d3bc>
   132ac:	mov	r5, r0
   132b0:	bl	127d0 <__errno_location@plt>
   132b4:	mov	r8, r0
   132b8:	cmp	r5, #0
   132bc:	beq	13308 <__assert_fail@plt+0x88c>
   132c0:	mov	r0, r5
   132c4:	str	r7, [sp, #16]
   132c8:	str	r4, [r8]
   132cc:	bl	30750 <__assert_fail@plt+0x1dcd4>
   132d0:	movw	r7, #53896	; 0xd288
   132d4:	cmp	r0, #0
   132d8:	mov	r4, r5
   132dc:	movt	r7, #5
   132e0:	beq	13a80 <__assert_fail@plt+0x1004>
   132e4:	mov	r9, r0
   132e8:	add	r0, sp, #56	; 0x38
   132ec:	str	r8, [sp, #32]
   132f0:	str	r4, [sp, #36]	; 0x24
   132f4:	add	r0, r0, #96	; 0x60
   132f8:	str	r0, [sp, #40]	; 0x28
   132fc:	mov	r0, #-2147483648	; 0x80000000
   13300:	str	r0, [sp, #44]	; 0x2c
   13304:	b	13494 <__assert_fail@plt+0xa18>
   13308:	ldr	r4, [r8]
   1330c:	movw	r1, #27545	; 0x6b99
   13310:	mov	r0, #0
   13314:	mov	r2, #5
   13318:	movt	r1, #4
   1331c:	bl	1253c <dcgettext@plt>
   13320:	mov	r5, r0
   13324:	mov	r0, #0
   13328:	mov	r1, r7
   1332c:	bl	19994 <__assert_fail@plt+0x6f18>
   13330:	mov	r3, r0
   13334:	mov	r0, #0
   13338:	mov	r1, r4
   1333c:	mov	r2, r5
   13340:	bl	12674 <error@plt>
   13344:	mov	r4, #1
   13348:	b	13af8 <__assert_fail@plt+0x107c>
   1334c:	movw	r4, #54617	; 0xd559
   13350:	movw	r1, #28210	; 0x6e32
   13354:	movt	r4, #5
   13358:	movt	r1, #4
   1335c:	mov	r0, r4
   13360:	bl	12938 <sprintf@plt>
   13364:	str	r4, [sp, #20]
   13368:	movw	r0, #53904	; 0xd290
   1336c:	ldr	r1, [r6, #72]	; 0x48
   13370:	ldr	r2, [r9, #28]
   13374:	ldr	r7, [r9, #48]	; 0x30
   13378:	movt	r0, #5
   1337c:	ldr	r4, [r0]
   13380:	mov	r0, #1
   13384:	bl	2c45c <__assert_fail@plt+0x199e0>
   13388:	mov	r8, r0
   1338c:	movw	r0, #56940	; 0xde6c
   13390:	ldr	r2, [r9, #24]
   13394:	movt	r0, #5
   13398:	ldr	r1, [r0, #72]	; 0x48
   1339c:	mov	r0, #2
   133a0:	bl	2c45c <__assert_fail@plt+0x199e0>
   133a4:	str	r7, [sp]
   133a8:	stmib	sp, {r4, r8}
   133ac:	str	r0, [sp, #12]
   133b0:	movw	r1, #27758	; 0x6c6e
   133b4:	movw	r6, #56940	; 0xde6c
   133b8:	ldr	r0, [sp, #28]
   133bc:	ldr	r2, [sp, #24]
   133c0:	ldr	r3, [sp, #20]
   133c4:	movt	r1, #4
   133c8:	movt	r6, #5
   133cc:	bl	127c4 <fprintf@plt>
   133d0:	ldr	r8, [sp, #32]
   133d4:	ldr	r4, [sp, #36]	; 0x24
   133d8:	movw	r7, #53896	; 0xd288
   133dc:	movt	r7, #5
   133e0:	b	134ec <__assert_fail@plt+0xa70>
   133e4:	mov	r4, #0
   133e8:	b	138b4 <__assert_fail@plt+0xe38>
   133ec:	movw	r0, #54600	; 0xd548
   133f0:	ldr	r2, [r9, #28]
   133f4:	movt	r0, #5
   133f8:	ldr	r6, [r0]
   133fc:	movw	r0, #56940	; 0xde6c
   13400:	movt	r0, #5
   13404:	ldr	r1, [r0, #72]	; 0x48
   13408:	mov	r0, #0
   1340c:	bl	2c45c <__assert_fail@plt+0x199e0>
   13410:	ldrh	r2, [r9, #56]	; 0x38
   13414:	mov	r7, r0
   13418:	sub	r0, r2, #1
   1341c:	uxth	r1, r0
   13420:	cmp	r1, #14
   13424:	bcs	1343c <__assert_fail@plt+0x9c0>
   13428:	movw	r1, #28416	; 0x6f00
   1342c:	sxth	r0, r0
   13430:	movt	r1, #4
   13434:	ldr	r3, [r1, r0, lsl #2]
   13438:	b	13460 <__assert_fail@plt+0x9e4>
   1343c:	str	r6, [sp, #28]
   13440:	movw	r6, #54617	; 0xd559
   13444:	movw	r1, #28210	; 0x6e32
   13448:	movt	r6, #5
   1344c:	movt	r1, #4
   13450:	mov	r0, r6
   13454:	bl	12938 <sprintf@plt>
   13458:	mov	r3, r6
   1345c:	ldr	r6, [sp, #28]
   13460:	ldrb	r1, [sl, #5]
   13464:	ldrb	r0, [sl, #4]
   13468:	stm	sp, {r4, r8}
   1346c:	mov	r2, r7
   13470:	str	r1, [sp, #12]
   13474:	movw	r1, #28007	; 0x6d67
   13478:	str	r0, [sp, #8]
   1347c:	mov	r0, r6
   13480:	movt	r1, #4
   13484:	bl	127c4 <fprintf@plt>
   13488:	movw	r7, #53896	; 0xd288
   1348c:	movt	r7, #5
   13490:	b	13924 <__assert_fail@plt+0xea8>
   13494:	ldrb	r0, [sl, #32]
   13498:	cmp	r0, #0
   1349c:	beq	134b4 <__assert_fail@plt+0xa38>
   134a0:	ldr	r0, [r9, #48]	; 0x30
   134a4:	ldr	r1, [sp, #44]	; 0x2c
   134a8:	cmp	r0, r1
   134ac:	beq	134b4 <__assert_fail@plt+0xa38>
   134b0:	bl	18774 <__assert_fail@plt+0x5cf8>
   134b4:	ldr	r0, [r9, #48]	; 0x30
   134b8:	str	r0, [sp, #44]	; 0x2c
   134bc:	mov	r0, #0
   134c0:	strb	r0, [sl, #4]
   134c4:	strb	r0, [sl, #40]	; 0x28
   134c8:	ldr	r0, [r9, #80]	; 0x50
   134cc:	cmp	r0, #0
   134d0:	str	r0, [sl, #8]
   134d4:	movwne	r0, #1
   134d8:	strb	r0, [sl, #5]
   134dc:	ldrb	r0, [r6, #44]	; 0x2c
   134e0:	tst	r0, #4
   134e4:	bne	139a4 <__assert_fail@plt+0xf28>
   134e8:	add	r5, r9, #56	; 0x38
   134ec:	ldrh	r0, [r5]
   134f0:	cmp	r0, #6
   134f4:	ldrne	r0, [r9, #48]	; 0x30
   134f8:	cmpne	r0, #0
   134fc:	bne	13538 <__assert_fail@plt+0xabc>
   13500:	ldr	r0, [r7]
   13504:	tst	r0, #512	; 0x200
   13508:	beq	1354c <__assert_fail@plt+0xad0>
   1350c:	movw	r0, #53900	; 0xd28c
   13510:	movt	r0, #5
   13514:	ldr	r0, [r0]
   13518:	cmp	r0, #0
   1351c:	blt	1354c <__assert_fail@plt+0xad0>
   13520:	bl	12a34 <close@plt>
   13524:	movw	r0, #53900	; 0xd28c
   13528:	mvn	r1, #0
   1352c:	movt	r0, #5
   13530:	str	r1, [r0]
   13534:	b	1354c <__assert_fail@plt+0xad0>
   13538:	movw	r1, #53904	; 0xd290
   1353c:	movt	r1, #5
   13540:	ldr	r1, [r1]
   13544:	cmp	r0, r1
   13548:	bgt	13500 <__assert_fail@plt+0xa84>
   1354c:	ldrb	r0, [r7, #1]
   13550:	tst	r0, #2
   13554:	beq	135b8 <__assert_fail@plt+0xb3c>
   13558:	ldr	r0, [r4, #32]
   1355c:	cmn	r0, #100	; 0x64
   13560:	beq	1356c <__assert_fail@plt+0xaf0>
   13564:	cmn	r0, #1
   13568:	ble	13b14 <__assert_fail@plt+0x1098>
   1356c:	movw	r1, #53900	; 0xd28c
   13570:	str	r0, [sl, #16]
   13574:	movt	r1, #5
   13578:	ldr	r1, [r1]
   1357c:	cmn	r1, #1
   13580:	bgt	135b8 <__assert_fail@plt+0xb3c>
   13584:	cmn	r0, #100	; 0x64
   13588:	bne	135a0 <__assert_fail@plt+0xb24>
   1358c:	movw	r0, #53900	; 0xd28c
   13590:	mvn	r1, #99	; 0x63
   13594:	movt	r0, #5
   13598:	str	r1, [r0]
   1359c:	b	135b8 <__assert_fail@plt+0xb3c>
   135a0:	cmp	r0, #0
   135a4:	blt	13b74 <__assert_fail@plt+0x10f8>
   135a8:	bl	22624 <__assert_fail@plt+0xfba8>
   135ac:	movw	r1, #53900	; 0xd28c
   135b0:	movt	r1, #5
   135b4:	str	r0, [r1]
   135b8:	ldr	r0, [r9, #48]	; 0x30
   135bc:	movw	r1, #53904	; 0xd290
   135c0:	movt	r1, #5
   135c4:	str	r0, [r1]
   135c8:	ldr	r1, [sp, #40]	; 0x28
   135cc:	ldrd	r2, [r9, #160]	; 0xa0
   135d0:	strd	r2, [r1]
   135d4:	ldrh	r1, [r9, #56]	; 0x38
   135d8:	sub	r1, r1, #2
   135dc:	cmp	r1, #11
   135e0:	bhi	13704 <__assert_fail@plt+0xc88>
   135e4:	add	r2, pc, #0
   135e8:	ldr	pc, [r2, r1, lsl #2]
   135ec:	andeq	r3, r1, ip, lsl r6
   135f0:	andeq	r3, r1, r4, lsl #14
   135f4:	andeq	r3, r1, r8, ror #12
   135f8:	andeq	r3, r1, r4, lsl #14
   135fc:	andeq	r3, r1, r4, lsl #14
   13600:	andeq	r3, r1, r0, asr #13
   13604:	andeq	r3, r1, r4, lsl #14
   13608:	andeq	r3, r1, r4, lsl #14
   1360c:	andeq	r3, r1, r4, lsl #13
   13610:	andeq	r3, r1, r4, lsl #14
   13614:	andeq	r3, r1, r4, lsl #14
   13618:	ldrdeq	r3, [r1], -r0
   1361c:	ldr	r0, [r9, #80]	; 0x50
   13620:	and	r0, r0, #61440	; 0xf000
   13624:	cmp	r0, #40960	; 0xa000
   13628:	bne	13774 <__assert_fail@plt+0xcf8>
   1362c:	movw	r1, #28215	; 0x6e37
   13630:	mov	r0, #0
   13634:	mov	r2, #5
   13638:	movt	r1, #4
   1363c:	bl	1253c <dcgettext@plt>
   13640:	ldr	r1, [r9, #28]
   13644:	mov	r4, r0
   13648:	mov	r0, #0
   1364c:	bl	19994 <__assert_fail@plt+0x6f18>
   13650:	mov	r3, r0
   13654:	mov	r0, #0
   13658:	mov	r1, #0
   1365c:	mov	r2, r4
   13660:	bl	12674 <error@plt>
   13664:	b	13a58 <__assert_fail@plt+0xfdc>
   13668:	ldr	r1, [r9, #28]
   1366c:	ldr	r0, [r9, #32]
   13670:	bl	18664 <__assert_fail@plt+0x5be8>
   13674:	ldrb	r0, [r6]
   13678:	cmp	r0, #0
   1367c:	bne	13a64 <__assert_fail@plt+0xfe8>
   13680:	b	13704 <__assert_fail@plt+0xc88>
   13684:	cmp	r0, #0
   13688:	beq	136c0 <__assert_fail@plt+0xc44>
   1368c:	ldr	r0, [r9, #24]
   13690:	ldr	r2, [r6, #52]	; 0x34
   13694:	sub	r1, fp, #136	; 0x88
   13698:	blx	r2
   1369c:	cmp	r0, #0
   136a0:	beq	136b0 <__assert_fail@plt+0xc34>
   136a4:	ldr	r0, [r8]
   136a8:	cmp	r0, #40	; 0x28
   136ac:	beq	136f4 <__assert_fail@plt+0xc78>
   136b0:	ldr	r1, [r9, #28]
   136b4:	ldr	r0, [r9, #32]
   136b8:	bl	18664 <__assert_fail@plt+0x5be8>
   136bc:	b	13704 <__assert_fail@plt+0xc88>
   136c0:	ldr	r1, [r9, #28]
   136c4:	ldr	r0, [r9, #32]
   136c8:	bl	18664 <__assert_fail@plt+0x5be8>
   136cc:	b	13a64 <__assert_fail@plt+0xfe8>
   136d0:	ldr	r0, [r9, #24]
   136d4:	ldr	r2, [r6, #52]	; 0x34
   136d8:	sub	r1, fp, #136	; 0x88
   136dc:	blx	r2
   136e0:	cmp	r0, #0
   136e4:	beq	13704 <__assert_fail@plt+0xc88>
   136e8:	ldr	r0, [r8]
   136ec:	cmp	r0, #40	; 0x28
   136f0:	bne	13704 <__assert_fail@plt+0xc88>
   136f4:	ldr	r1, [r9, #28]
   136f8:	mov	r0, #40	; 0x28
   136fc:	bl	18664 <__assert_fail@plt+0x5be8>
   13700:	b	13a64 <__assert_fail@plt+0xfe8>
   13704:	ldrh	r1, [r5]
   13708:	movw	r0, #65534	; 0xfffe
   1370c:	and	r0, r1, r0
   13710:	cmp	r0, #10
   13714:	bne	1373c <__assert_fail@plt+0xcc0>
   13718:	ldrb	r0, [sl, #4]
   1371c:	cmp	r0, #0
   13720:	bne	13b34 <__assert_fail@plt+0x10b8>
   13724:	ldr	r0, [sl, #8]
   13728:	cmp	r1, #11
   1372c:	cmpne	r0, #0
   13730:	bne	13b54 <__assert_fail@plt+0x10d8>
   13734:	str	r0, [fp, #-136]	; 0xffffff78
   13738:	b	13828 <__assert_fail@plt+0xdac>
   1373c:	movw	r0, #257	; 0x101
   13740:	add	r1, r9, #64	; 0x40
   13744:	mov	r2, #104	; 0x68
   13748:	strh	r0, [sl, #4]
   1374c:	add	r0, sp, #56	; 0x38
   13750:	bl	124b8 <memcpy@plt>
   13754:	ldr	r0, [sp, #72]	; 0x48
   13758:	cmp	r0, #0
   1375c:	str	r0, [sl, #8]
   13760:	str	r0, [fp, #-136]	; 0xffffff78
   13764:	beq	137e4 <__assert_fail@plt+0xd68>
   13768:	ldr	r0, [r9, #48]	; 0x30
   1376c:	str	r0, [sl]
   13770:	b	13838 <__assert_fail@plt+0xdbc>
   13774:	movw	r1, #28336	; 0x6eb0
   13778:	mov	r0, #0
   1377c:	mov	r2, #5
   13780:	movt	r1, #4
   13784:	bl	1253c <dcgettext@plt>
   13788:	ldr	r1, [r9, #28]
   1378c:	mov	r5, r0
   13790:	mov	r0, #0
   13794:	bl	19994 <__assert_fail@plt+0x6f18>
   13798:	mov	r8, r0
   1379c:	ldr	r0, [r9]
   137a0:	ldr	r1, [r6, #72]	; 0x48
   137a4:	ldr	r4, [r0, #40]	; 0x28
   137a8:	cmp	r4, #0
   137ac:	beq	13a24 <__assert_fail@plt+0xfa8>
   137b0:	mov	r6, r5
   137b4:	ldr	r5, [r0, #28]
   137b8:	mov	r0, #0
   137bc:	ldrb	r7, [r5, r4]
   137c0:	strb	r0, [r5, r4]
   137c4:	mov	r0, #1
   137c8:	mov	r2, r5
   137cc:	bl	2c45c <__assert_fail@plt+0x199e0>
   137d0:	strb	r7, [r5, r4]
   137d4:	movw	r7, #53896	; 0xd288
   137d8:	mov	r5, r6
   137dc:	movt	r7, #5
   137e0:	b	13a34 <__assert_fail@plt+0xfb8>
   137e4:	movw	r1, #27964	; 0x6d3c
   137e8:	mov	r0, #0
   137ec:	mov	r2, #5
   137f0:	movt	r1, #4
   137f4:	bl	1253c <dcgettext@plt>
   137f8:	ldr	r1, [r6, #72]	; 0x48
   137fc:	ldr	r2, [r9, #28]
   13800:	mov	r4, r0
   13804:	mov	r0, #0
   13808:	bl	2c45c <__assert_fail@plt+0x199e0>
   1380c:	mov	r2, r4
   13810:	ldr	r4, [sp, #36]	; 0x24
   13814:	mov	r3, r0
   13818:	mov	r0, #0
   1381c:	mov	r1, #0
   13820:	bl	12674 <error@plt>
   13824:	ldr	r0, [fp, #-136]	; 0xffffff78
   13828:	ldr	r1, [r9, #48]	; 0x30
   1382c:	cmp	r0, #0
   13830:	str	r1, [sl]
   13834:	beq	13894 <__assert_fail@plt+0xe18>
   13838:	ldr	r1, [r9, #28]
   1383c:	mov	r0, #0
   13840:	add	r2, r9, #168	; 0xa8
   13844:	add	r3, sp, #56	; 0x38
   13848:	str	r0, [sp]
   1384c:	sub	r0, fp, #136	; 0x88
   13850:	bl	18fb8 <__assert_fail@plt+0x653c>
   13854:	cmp	r0, #0
   13858:	beq	13a64 <__assert_fail@plt+0xfe8>
   1385c:	ldr	r1, [fp, #-136]	; 0xffffff78
   13860:	ldrh	r0, [r5]
   13864:	and	r1, r1, #61440	; 0xf000
   13868:	cmp	r1, #16384	; 0x4000
   1386c:	bne	13898 <__assert_fail@plt+0xe1c>
   13870:	mov	r4, #1
   13874:	cmp	r0, #11
   13878:	bne	138b4 <__assert_fail@plt+0xe38>
   1387c:	ldr	r4, [sp, #36]	; 0x24
   13880:	mov	r1, r9
   13884:	mov	r2, #1
   13888:	mov	r0, r4
   1388c:	bl	31dd0 <__assert_fail@plt+0x1f354>
   13890:	b	13a64 <__assert_fail@plt+0xfe8>
   13894:	ldrh	r0, [r5]
   13898:	cmp	r0, #6
   1389c:	bhi	133e4 <__assert_fail@plt+0x968>
   138a0:	mov	r1, #1
   138a4:	mov	r2, #70	; 0x46
   138a8:	mov	r4, #1
   138ac:	tst	r2, r1, lsl r0
   138b0:	moveq	r4, #0
   138b4:	ldr	r2, [r6, #4]
   138b8:	mov	r1, #0
   138bc:	cmp	r2, #0
   138c0:	ldrge	r3, [r9, #48]	; 0x30
   138c4:	cmpge	r3, r2
   138c8:	bge	139f8 <__assert_fail@plt+0xf7c>
   138cc:	ldrb	r3, [r6]
   138d0:	subs	r2, r0, #6
   138d4:	sub	r0, r0, #1
   138d8:	mov	r8, #1
   138dc:	clz	r0, r0
   138e0:	movwne	r2, #1
   138e4:	lsr	r0, r0, #5
   138e8:	clz	r3, r3
   138ec:	lsr	r3, r3, #5
   138f0:	orr	r2, r2, r3
   138f4:	and	r0, r0, r3
   138f8:	eor	r0, r0, r2
   138fc:	cmp	r0, #1
   13900:	bne	13918 <__assert_fail@plt+0xe9c>
   13904:	ldr	r0, [r6, #8]
   13908:	ldr	r2, [r9, #48]	; 0x30
   1390c:	cmp	r2, r0
   13910:	movwlt	r1, #1
   13914:	mov	r8, r1
   13918:	ldrb	r0, [r6, #44]	; 0x2c
   1391c:	tst	r0, #4
   13920:	bne	133ec <__assert_fail@plt+0x970>
   13924:	ldr	r4, [sp, #36]	; 0x24
   13928:	cmp	r8, #0
   1392c:	bne	13984 <__assert_fail@plt+0xf08>
   13930:	ldrh	r0, [r9, #56]	; 0x38
   13934:	orr	r0, r0, #1
   13938:	subs	r0, r0, #11
   1393c:	movwne	r0, #1
   13940:	strb	r0, [sl, #4]
   13944:	ldr	r0, [r9, #24]
   13948:	str	r0, [sl, #12]
   1394c:	ldr	r0, [r4, #32]
   13950:	str	r0, [sl, #16]
   13954:	bl	15f40 <__assert_fail@plt+0x34c4>
   13958:	mov	r2, r0
   1395c:	ldr	r0, [r9, #28]
   13960:	add	r1, sp, #56	; 0x38
   13964:	bl	1982c <__assert_fail@plt+0x6db0>
   13968:	ldrb	r0, [sl, #24]
   1396c:	cmp	r0, #0
   13970:	beq	13984 <__assert_fail@plt+0xf08>
   13974:	mov	r0, r4
   13978:	mov	r1, r9
   1397c:	mov	r2, #4
   13980:	bl	31dd0 <__assert_fail@plt+0x1f354>
   13984:	ldrh	r0, [r5]
   13988:	ldr	r8, [sp, #32]
   1398c:	movw	r6, #56940	; 0xde6c
   13990:	movt	r6, #5
   13994:	cmp	r0, #6
   13998:	moveq	r0, #0
   1399c:	strbeq	r0, [sl, #24]
   139a0:	b	13a64 <__assert_fail@plt+0xfe8>
   139a4:	movw	r0, #54600	; 0xd548
   139a8:	ldr	r2, [r9, #28]
   139ac:	ldr	r1, [r6, #72]	; 0x48
   139b0:	movt	r0, #5
   139b4:	ldr	r0, [r0]
   139b8:	str	r0, [sp, #28]
   139bc:	mov	r0, #0
   139c0:	bl	2c45c <__assert_fail@plt+0x199e0>
   139c4:	mov	r5, r9
   139c8:	str	r0, [sp, #24]
   139cc:	ldrh	r2, [r5, #56]!	; 0x38
   139d0:	sub	r0, r2, #1
   139d4:	uxth	r1, r0
   139d8:	cmp	r1, #14
   139dc:	bcs	1334c <__assert_fail@plt+0x8d0>
   139e0:	movw	r1, #28416	; 0x6f00
   139e4:	sxth	r0, r0
   139e8:	movt	r1, #4
   139ec:	ldr	r0, [r1, r0, lsl #2]
   139f0:	str	r0, [sp, #20]
   139f4:	b	13368 <__assert_fail@plt+0x8ec>
   139f8:	ldr	r0, [sp, #36]	; 0x24
   139fc:	mov	r1, r9
   13a00:	mov	r2, #4
   13a04:	bl	31dd0 <__assert_fail@plt+0x1f354>
   13a08:	ldr	r0, [r6, #4]
   13a0c:	ldr	r1, [r9, #48]	; 0x30
   13a10:	cmp	r1, r0
   13a14:	ldrh	r0, [r9, #56]	; 0x38
   13a18:	mov	r1, #0
   13a1c:	movwgt	r1, #1
   13a20:	b	138cc <__assert_fail@plt+0xe50>
   13a24:	movw	r2, #34847	; 0x881f
   13a28:	mov	r0, #1
   13a2c:	movt	r2, #4
   13a30:	bl	2c45c <__assert_fail@plt+0x199e0>
   13a34:	str	r0, [sp]
   13a38:	mov	r0, #0
   13a3c:	mov	r1, #0
   13a40:	mov	r2, r5
   13a44:	mov	r3, r8
   13a48:	bl	12674 <error@plt>
   13a4c:	ldr	r8, [sp, #32]
   13a50:	movw	r6, #56940	; 0xde6c
   13a54:	movt	r6, #5
   13a58:	ldr	r4, [sp, #36]	; 0x24
   13a5c:	mov	r0, #1
   13a60:	str	r0, [sl, #28]
   13a64:	mov	r0, #0
   13a68:	str	r0, [r8]
   13a6c:	mov	r0, r4
   13a70:	bl	30750 <__assert_fail@plt+0x1dcd4>
   13a74:	mov	r9, r0
   13a78:	cmp	r0, #0
   13a7c:	bne	13494 <__assert_fail@plt+0xa18>
   13a80:	ldr	r7, [r8]
   13a84:	cmp	r7, #0
   13a88:	beq	13ab4 <__assert_fail@plt+0x1038>
   13a8c:	ldr	r1, [sp, #16]
   13a90:	mov	r0, #0
   13a94:	mov	r4, #0
   13a98:	bl	19994 <__assert_fail@plt+0x6f18>
   13a9c:	movw	r2, #27562	; 0x6baa
   13aa0:	mov	r3, r0
   13aa4:	mov	r0, #0
   13aa8:	mov	r1, r7
   13aac:	movt	r2, #4
   13ab0:	b	13af4 <__assert_fail@plt+0x1078>
   13ab4:	mov	r0, r4
   13ab8:	bl	305b0 <__assert_fail@plt+0x1db34>
   13abc:	ldr	r6, [sp, #16]
   13ac0:	cmp	r0, #0
   13ac4:	beq	13b0c <__assert_fail@plt+0x1090>
   13ac8:	ldr	r5, [r8]
   13acc:	movw	r1, #27620	; 0x6be4
   13ad0:	mov	r0, #0
   13ad4:	mov	r2, #5
   13ad8:	mov	r4, #0
   13adc:	movt	r1, #4
   13ae0:	bl	1253c <dcgettext@plt>
   13ae4:	mov	r2, r0
   13ae8:	mov	r0, #0
   13aec:	mov	r1, r5
   13af0:	mov	r3, r6
   13af4:	bl	12674 <error@plt>
   13af8:	mov	r0, #1
   13afc:	str	r0, [sl, #28]
   13b00:	mov	r0, r4
   13b04:	sub	sp, fp, #28
   13b08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b0c:	mov	r4, #1
   13b10:	b	13b00 <__assert_fail@plt+0x1084>
   13b14:	movw	r0, #27675	; 0x6c1b
   13b18:	movw	r1, #27271	; 0x6a87
   13b1c:	movw	r3, #27709	; 0x6c3d
   13b20:	mov	r2, #107	; 0x6b
   13b24:	movt	r0, #4
   13b28:	movt	r1, #4
   13b2c:	movt	r3, #4
   13b30:	bl	12a7c <__assert_fail@plt>
   13b34:	movw	r0, #27862	; 0x6cd6
   13b38:	movw	r1, #27271	; 0x6a87
   13b3c:	movw	r3, #27879	; 0x6ce7
   13b40:	mov	r2, #380	; 0x17c
   13b44:	movt	r0, #4
   13b48:	movt	r1, #4
   13b4c:	movt	r3, #4
   13b50:	bl	12a7c <__assert_fail@plt>
   13b54:	movw	r0, #27919	; 0x6d0f
   13b58:	movw	r1, #27271	; 0x6a87
   13b5c:	movw	r3, #27879	; 0x6ce7
   13b60:	movw	r2, #381	; 0x17d
   13b64:	movt	r0, #4
   13b68:	movt	r1, #4
   13b6c:	movt	r3, #4
   13b70:	bl	12a7c <__assert_fail@plt>
   13b74:	movw	r0, #27730	; 0x6c52
   13b78:	movw	r1, #27271	; 0x6a87
   13b7c:	movw	r3, #27709	; 0x6c3d
   13b80:	mov	r2, #125	; 0x7d
   13b84:	movt	r0, #4
   13b88:	movt	r1, #4
   13b8c:	movt	r3, #4
   13b90:	bl	12a7c <__assert_fail@plt>
   13b94:	andeq	r0, r0, r0
   13b98:	ldrd	r0, [r1, #72]	; 0x48
   13b9c:	mov	r3, #60	; 0x3c
   13ba0:	b	13ba8 <__assert_fail@plt+0x112c>
   13ba4:	nop	{0}
   13ba8:	push	{r4, r5, r7, sl, fp, lr}
   13bac:	add	fp, sp, #16
   13bb0:	mov	r4, r1
   13bb4:	ldr	r1, [r2, #44]	; 0x2c
   13bb8:	cmp	r1, #2
   13bbc:	beq	13c68 <__assert_fail@plt+0x11ec>
   13bc0:	cmp	r1, #1
   13bc4:	beq	13c1c <__assert_fail@plt+0x11a0>
   13bc8:	cmp	r1, #0
   13bcc:	bne	13cc4 <__assert_fail@plt+0x1248>
   13bd0:	ldr	r5, [r2, #52]	; 0x34
   13bd4:	ldr	r2, [r2, #48]	; 0x30
   13bd8:	cmp	r0, r2
   13bdc:	moveq	r1, #0
   13be0:	cmpeq	r4, r5
   13be4:	beq	13cbc <__assert_fail@plt+0x1240>
   13be8:	mov	r1, r2
   13bec:	bl	12854 <difftime@plt>
   13bf0:	vldr	d16, [pc, #240]	; 13ce8 <__assert_fail@plt+0x126c>
   13bf4:	sub	r0, r4, r5
   13bf8:	mov	r1, #0
   13bfc:	vmov	s2, r0
   13c00:	vcvt.f64.s32	d17, s2
   13c04:	vmla.f64	d0, d17, d16
   13c08:	vcmpe.f64	d0, #0.0
   13c0c:	vmrs	APSR_nzcv, fpscr
   13c10:	movwpl	r1, #1
   13c14:	mov	r0, r1
   13c18:	pop	{r4, r5, r7, sl, fp, pc}
   13c1c:	ldr	r5, [r2, #52]	; 0x34
   13c20:	ldr	r2, [r2, #48]	; 0x30
   13c24:	cmp	r0, r2
   13c28:	moveq	r1, #0
   13c2c:	cmpeq	r4, r5
   13c30:	beq	13cbc <__assert_fail@plt+0x1240>
   13c34:	mov	r1, r2
   13c38:	bl	12854 <difftime@plt>
   13c3c:	vldr	d16, [pc, #164]	; 13ce8 <__assert_fail@plt+0x126c>
   13c40:	sub	r0, r4, r5
   13c44:	mov	r1, #0
   13c48:	vmov	s2, r0
   13c4c:	vcvt.f64.s32	d17, s2
   13c50:	vmla.f64	d0, d17, d16
   13c54:	vcmpe.f64	d0, #0.0
   13c58:	vmrs	APSR_nzcv, fpscr
   13c5c:	movwmi	r1, #1
   13c60:	mov	r0, r1
   13c64:	pop	{r4, r5, r7, sl, fp, pc}
   13c68:	ldr	r7, [r2, #52]	; 0x34
   13c6c:	ldr	r2, [r2, #48]	; 0x30
   13c70:	mov	r5, r3
   13c74:	mov	r1, r2
   13c78:	bl	12854 <difftime@plt>
   13c7c:	vldr	d16, [pc, #100]	; 13ce8 <__assert_fail@plt+0x126c>
   13c80:	sub	r0, r4, r7
   13c84:	vmov	s4, r5
   13c88:	mov	r1, #0
   13c8c:	vmov	s2, r0
   13c90:	mov	r0, #0
   13c94:	vcvt.f64.s32	d17, s2
   13c98:	vcvt.f64.s32	d18, s4
   13c9c:	vmla.f64	d0, d17, d16
   13ca0:	vcmpe.f64	d0, d18
   13ca4:	vmrs	APSR_nzcv, fpscr
   13ca8:	vcmpe.f64	d0, #0.0
   13cac:	movwls	r1, #1
   13cb0:	vmrs	APSR_nzcv, fpscr
   13cb4:	movwgt	r0, #1
   13cb8:	and	r1, r0, r1
   13cbc:	mov	r0, r1
   13cc0:	pop	{r4, r5, r7, sl, fp, pc}
   13cc4:	movw	r0, #32073	; 0x7d49
   13cc8:	movw	r1, #28511	; 0x6f5f
   13ccc:	movw	r3, #29490	; 0x7332
   13cd0:	mov	r2, #138	; 0x8a
   13cd4:	movt	r0, #4
   13cd8:	movt	r1, #4
   13cdc:	movt	r3, #4
   13ce0:	bl	12a7c <__assert_fail@plt>
   13ce4:	nop	{0}
   13ce8:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13cec:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13cf0:	push	{r4, r5, r6, sl, fp, lr}
   13cf4:	add	fp, sp, #16
   13cf8:	mov	r5, r2
   13cfc:	ldr	r2, [r2, #156]	; 0x9c
   13d00:	mov	r4, r1
   13d04:	mov	r6, r0
   13d08:	cmp	r2, #0
   13d0c:	beq	13d28 <__assert_fail@plt+0x12ac>
   13d10:	mov	r0, r6
   13d14:	mov	r1, r4
   13d18:	bl	1982c <__assert_fail@plt+0x6db0>
   13d1c:	cmp	r0, #0
   13d20:	moveq	r0, #0
   13d24:	popeq	{r4, r5, r6, sl, fp, pc}
   13d28:	ldr	r2, [r5, #160]	; 0xa0
   13d2c:	mov	r0, r6
   13d30:	mov	r1, r4
   13d34:	pop	{r4, r5, r6, sl, fp, lr}
   13d38:	b	1982c <__assert_fail@plt+0x6db0>
   13d3c:	nop	{0}
   13d40:	push	{r4, r5, r6, r7, fp, lr}
   13d44:	add	fp, sp, #16
   13d48:	ldr	r0, [r2, #44]	; 0x2c
   13d4c:	cmp	r0, #0
   13d50:	bne	13da0 <__assert_fail@plt+0x1324>
   13d54:	ldrd	r4, [r2, #48]	; 0x30
   13d58:	ldrd	r6, [r1, #72]	; 0x48
   13d5c:	cmp	r4, r6
   13d60:	moveq	r0, #0
   13d64:	cmpeq	r5, r7
   13d68:	popeq	{r4, r5, r6, r7, fp, pc}
   13d6c:	mov	r0, r6
   13d70:	mov	r1, r4
   13d74:	bl	12854 <difftime@plt>
   13d78:	vldr	d16, [pc, #64]	; 13dc0 <__assert_fail@plt+0x1344>
   13d7c:	sub	r0, r7, r5
   13d80:	vmov	s2, r0
   13d84:	mov	r0, #0
   13d88:	vcvt.f64.s32	d17, s2
   13d8c:	vmla.f64	d0, d17, d16
   13d90:	vcmpe.f64	d0, #0.0
   13d94:	vmrs	APSR_nzcv, fpscr
   13d98:	movwpl	r0, #1
   13d9c:	pop	{r4, r5, r6, r7, fp, pc}
   13da0:	movw	r0, #28472	; 0x6f38
   13da4:	movw	r1, #28511	; 0x6f5f
   13da8:	movw	r3, #28518	; 0x6f66
   13dac:	mov	r2, #166	; 0xa6
   13db0:	movt	r0, #4
   13db4:	movt	r1, #4
   13db8:	movt	r3, #4
   13dbc:	bl	12a7c <__assert_fail@plt>
   13dc0:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13dc4:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13dc8:	ldrd	r0, [r1, #72]	; 0x48
   13dcc:	movw	r3, #20864	; 0x5180
   13dd0:	movt	r3, #1
   13dd4:	b	13ba8 <__assert_fail@plt+0x112c>
   13dd8:	mov	r0, #1
   13ddc:	bx	lr
   13de0:	ldrd	r0, [r1, #88]	; 0x58
   13de4:	mov	r3, #60	; 0x3c
   13de8:	b	13ba8 <__assert_fail@plt+0x112c>
   13dec:	nop	{0}
   13df0:	push	{r4, r5, r6, r7, fp, lr}
   13df4:	add	fp, sp, #16
   13df8:	ldr	r0, [r2, #44]	; 0x2c
   13dfc:	cmp	r0, #0
   13e00:	bne	13e50 <__assert_fail@plt+0x13d4>
   13e04:	ldrd	r4, [r2, #48]	; 0x30
   13e08:	ldrd	r6, [r1, #88]	; 0x58
   13e0c:	cmp	r4, r6
   13e10:	moveq	r0, #0
   13e14:	cmpeq	r5, r7
   13e18:	popeq	{r4, r5, r6, r7, fp, pc}
   13e1c:	mov	r0, r6
   13e20:	mov	r1, r4
   13e24:	bl	12854 <difftime@plt>
   13e28:	vldr	d16, [pc, #64]	; 13e70 <__assert_fail@plt+0x13f4>
   13e2c:	sub	r0, r7, r5
   13e30:	vmov	s2, r0
   13e34:	mov	r0, #0
   13e38:	vcvt.f64.s32	d17, s2
   13e3c:	vmla.f64	d0, d17, d16
   13e40:	vcmpe.f64	d0, #0.0
   13e44:	vmrs	APSR_nzcv, fpscr
   13e48:	movwpl	r0, #1
   13e4c:	pop	{r4, r5, r6, r7, fp, pc}
   13e50:	movw	r0, #28472	; 0x6f38
   13e54:	movw	r1, #28511	; 0x6f5f
   13e58:	movw	r3, #28585	; 0x6fa9
   13e5c:	mov	r2, #199	; 0xc7
   13e60:	movt	r0, #4
   13e64:	movt	r1, #4
   13e68:	movt	r3, #4
   13e6c:	bl	12a7c <__assert_fail@plt>
   13e70:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13e74:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13e78:	push	{r4, r5, r6, sl, fp, lr}
   13e7c:	add	fp, sp, #16
   13e80:	mov	r5, r2
   13e84:	ldr	r2, [r2, #156]	; 0x9c
   13e88:	mov	r4, r1
   13e8c:	mov	r6, r0
   13e90:	cmp	r2, #0
   13e94:	beq	13ea4 <__assert_fail@plt+0x1428>
   13e98:	mov	r0, r6
   13e9c:	mov	r1, r4
   13ea0:	bl	1982c <__assert_fail@plt+0x6db0>
   13ea4:	ldr	r2, [r5, #160]	; 0xa0
   13ea8:	mov	r0, r6
   13eac:	mov	r1, r4
   13eb0:	pop	{r4, r5, r6, sl, fp, lr}
   13eb4:	b	1982c <__assert_fail@plt+0x6db0>
   13eb8:	ldrd	r0, [r1, #88]	; 0x58
   13ebc:	movw	r3, #20864	; 0x5180
   13ec0:	movt	r3, #1
   13ec4:	b	13ba8 <__assert_fail@plt+0x112c>
   13ec8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13ecc:	add	fp, sp, #24
   13ed0:	movw	r9, #56896	; 0xde40
   13ed4:	mov	r5, r1
   13ed8:	movw	r1, #31476	; 0x7af4
   13edc:	mov	r8, r0
   13ee0:	movt	r9, #5
   13ee4:	movt	r1, #4
   13ee8:	ldr	r6, [r9, #12]
   13eec:	mov	r0, r6
   13ef0:	bl	123d4 <strcmp@plt>
   13ef4:	mov	r4, #1
   13ef8:	cmp	r0, #0
   13efc:	beq	13fc8 <__assert_fail@plt+0x154c>
   13f00:	ldrb	r0, [r9, #4]
   13f04:	cmp	r0, #0
   13f08:	beq	13f28 <__assert_fail@plt+0x14ac>
   13f0c:	ldr	r0, [r5, #16]
   13f10:	and	r0, r0, #61440	; 0xf000
   13f14:	sub	r0, r0, #16384	; 0x4000
   13f18:	clz	r0, r0
   13f1c:	lsr	r0, r0, #5
   13f20:	lsl	r5, r0, #9
   13f24:	b	13f2c <__assert_fail@plt+0x14b0>
   13f28:	mov	r5, #0
   13f2c:	ldr	r0, [r9, #16]
   13f30:	mov	r1, r6
   13f34:	mov	r2, r5
   13f38:	bl	12428 <unlinkat@plt>
   13f3c:	cmp	r0, #0
   13f40:	beq	13fc8 <__assert_fail@plt+0x154c>
   13f44:	bl	127d0 <__errno_location@plt>
   13f48:	ldr	r6, [r0]
   13f4c:	mov	r7, r0
   13f50:	cmp	r6, #2
   13f54:	bne	13f78 <__assert_fail@plt+0x14fc>
   13f58:	movw	r0, #56940	; 0xde6c
   13f5c:	movt	r0, #5
   13f60:	ldrb	r0, [r0, #14]
   13f64:	cmp	r0, #0
   13f68:	movne	r0, #0
   13f6c:	strne	r0, [r7]
   13f70:	movne	r0, r4
   13f74:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   13f78:	cmp	r5, #0
   13f7c:	cmpeq	r6, #21
   13f80:	beq	13fd0 <__assert_fail@plt+0x1554>
   13f84:	movw	r1, #28652	; 0x6fec
   13f88:	mov	r0, #0
   13f8c:	mov	r2, #5
   13f90:	mov	r4, #0
   13f94:	movt	r1, #4
   13f98:	bl	1253c <dcgettext@plt>
   13f9c:	mov	r5, r0
   13fa0:	mov	r0, #0
   13fa4:	mov	r1, r8
   13fa8:	bl	19994 <__assert_fail@plt+0x6f18>
   13fac:	mov	r3, r0
   13fb0:	mov	r0, #0
   13fb4:	mov	r1, r6
   13fb8:	mov	r2, r5
   13fbc:	bl	12674 <error@plt>
   13fc0:	mov	r0, #1
   13fc4:	str	r0, [r9, #28]
   13fc8:	mov	r0, r4
   13fcc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13fd0:	ldr	r1, [r9, #12]
   13fd4:	ldr	r0, [r9, #16]
   13fd8:	mov	r2, #512	; 0x200
   13fdc:	bl	12428 <unlinkat@plt>
   13fe0:	cmp	r0, #0
   13fe4:	beq	13fc8 <__assert_fail@plt+0x154c>
   13fe8:	ldr	r6, [r7]
   13fec:	b	13f84 <__assert_fail@plt+0x1508>
   13ff0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13ff4:	add	fp, sp, #24
   13ff8:	mov	r8, r0
   13ffc:	ldr	r0, [r1, #16]
   14000:	and	r0, r0, #61440	; 0xf000
   14004:	cmp	r0, #32768	; 0x8000
   14008:	beq	14104 <__assert_fail@plt+0x1688>
   1400c:	mov	r4, #0
   14010:	cmp	r0, #16384	; 0x4000
   14014:	bne	14114 <__assert_fail@plt+0x1698>
   14018:	bl	127d0 <__errno_location@plt>
   1401c:	movw	r9, #56896	; 0xde40
   14020:	mov	r4, #0
   14024:	mov	r6, r0
   14028:	movw	r2, #18688	; 0x4900
   1402c:	str	r4, [r0]
   14030:	movt	r9, #5
   14034:	movt	r2, #10
   14038:	ldr	r1, [r9, #12]
   1403c:	ldr	r0, [r9, #16]
   14040:	bl	26374 <__assert_fail@plt+0x138f8>
   14044:	cmn	r0, #1
   14048:	ble	1411c <__assert_fail@plt+0x16a0>
   1404c:	mov	r5, r0
   14050:	bl	12950 <fdopendir@plt>
   14054:	cmp	r0, #0
   14058:	beq	14124 <__assert_fail@plt+0x16a8>
   1405c:	mov	r7, r0
   14060:	mov	r0, #0
   14064:	str	r0, [r6]
   14068:	mov	r0, r7
   1406c:	bl	12944 <readdir64@plt>
   14070:	cmp	r0, #0
   14074:	beq	140b4 <__assert_fail@plt+0x1638>
   14078:	mov	r4, #0
   1407c:	ldrb	r1, [r0, #19]
   14080:	cmp	r1, #46	; 0x2e
   14084:	bne	140b8 <__assert_fail@plt+0x163c>
   14088:	ldrb	r1, [r0, #20]
   1408c:	cmp	r1, #0
   14090:	beq	140a4 <__assert_fail@plt+0x1628>
   14094:	cmp	r1, #46	; 0x2e
   14098:	ldrbeq	r0, [r0, #21]
   1409c:	cmpeq	r0, #0
   140a0:	bne	140b8 <__assert_fail@plt+0x163c>
   140a4:	mov	r0, r7
   140a8:	bl	12944 <readdir64@plt>
   140ac:	cmp	r0, #0
   140b0:	bne	1407c <__assert_fail@plt+0x1600>
   140b4:	mov	r4, #1
   140b8:	ldr	r5, [r6]
   140bc:	cmp	r5, #0
   140c0:	beq	14168 <__assert_fail@plt+0x16ec>
   140c4:	mov	r0, #0
   140c8:	mov	r1, r8
   140cc:	mov	r4, #0
   140d0:	bl	19994 <__assert_fail@plt+0x6f18>
   140d4:	movw	r2, #52175	; 0xcbcf
   140d8:	mov	r3, r0
   140dc:	mov	r0, #0
   140e0:	mov	r1, r5
   140e4:	movt	r2, #4
   140e8:	bl	12674 <error@plt>
   140ec:	mov	r0, #1
   140f0:	str	r0, [r9, #28]
   140f4:	mov	r0, r7
   140f8:	bl	12a4c <closedir@plt>
   140fc:	mov	r0, r4
   14100:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14104:	ldrd	r0, [r1, #48]	; 0x30
   14108:	orr	r0, r0, r1
   1410c:	clz	r0, r0
   14110:	lsr	r4, r0, #5
   14114:	mov	r0, r4
   14118:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1411c:	ldr	r5, [r6]
   14120:	b	14180 <__assert_fail@plt+0x1704>
   14124:	ldr	r6, [r6]
   14128:	mov	r0, #0
   1412c:	mov	r1, r8
   14130:	mov	r4, #0
   14134:	bl	19994 <__assert_fail@plt+0x6f18>
   14138:	movw	r2, #52175	; 0xcbcf
   1413c:	mov	r3, r0
   14140:	mov	r0, #0
   14144:	mov	r1, r6
   14148:	movt	r2, #4
   1414c:	bl	12674 <error@plt>
   14150:	mov	r0, #1
   14154:	str	r0, [r9, #28]
   14158:	mov	r0, r5
   1415c:	bl	12a34 <close@plt>
   14160:	mov	r0, r4
   14164:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14168:	mov	r0, r7
   1416c:	bl	12a4c <closedir@plt>
   14170:	cmp	r0, #0
   14174:	beq	14114 <__assert_fail@plt+0x1698>
   14178:	ldr	r5, [r6]
   1417c:	mov	r4, #0
   14180:	mov	r0, #0
   14184:	mov	r1, r8
   14188:	bl	19994 <__assert_fail@plt+0x6f18>
   1418c:	movw	r2, #52175	; 0xcbcf
   14190:	mov	r3, r0
   14194:	mov	r0, #0
   14198:	mov	r1, r5
   1419c:	movt	r2, #4
   141a0:	bl	12674 <error@plt>
   141a4:	mov	r0, #1
   141a8:	str	r0, [r9, #28]
   141ac:	mov	r0, r4
   141b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   141b4:	b	156f8 <__assert_fail@plt+0x2c7c>
   141b8:	movw	r0, #56896	; 0xde40
   141bc:	movt	r0, #5
   141c0:	ldr	r0, [r0, #12]
   141c4:	b	156f8 <__assert_fail@plt+0x2c7c>
   141c8:	mov	r0, #0
   141cc:	bx	lr
   141d0:	push	{r4, r5, fp, lr}
   141d4:	add	fp, sp, #8
   141d8:	sub	sp, sp, #16
   141dc:	movw	r3, #56940	; 0xde6c
   141e0:	mov	ip, r1
   141e4:	movw	r1, #56896	; 0xde40
   141e8:	ldrb	r5, [r2, #32]
   141ec:	ldr	r2, [r2, #44]	; 0x2c
   141f0:	movt	r1, #5
   141f4:	movt	r3, #5
   141f8:	ldr	r4, [r3, #20]
   141fc:	ldr	lr, [r1, #12]
   14200:	ldr	r3, [r3, #40]	; 0x28
   14204:	ldr	r1, [r1, #16]
   14208:	str	r4, [sp]
   1420c:	stmib	sp, {r3, r5}
   14210:	str	r2, [sp, #12]
   14214:	mov	r2, lr
   14218:	mov	r3, ip
   1421c:	bl	210b0 <__assert_fail@plt+0xe634>
   14220:	mov	r0, #1
   14224:	sub	sp, fp, #8
   14228:	pop	{r4, r5, fp, pc}
   1422c:	push	{fp, lr}
   14230:	mov	fp, sp
   14234:	sub	sp, sp, #8
   14238:	ldrb	ip, [r2, #52]	; 0x34
   1423c:	ldr	r1, [r2, #56]	; 0x38
   14240:	ldr	r2, [r2, #44]	; 0x2c
   14244:	movw	r3, #50068	; 0xc394
   14248:	str	r0, [sp]
   1424c:	movt	r3, #4
   14250:	mov	r0, r2
   14254:	mov	r2, ip
   14258:	bl	21a70 <__assert_fail@plt+0xeff4>
   1425c:	mov	r0, #1
   14260:	mov	sp, fp
   14264:	pop	{fp, pc}
   14268:	push	{r4, sl, fp, lr}
   1426c:	add	fp, sp, #8
   14270:	ldr	r4, [r2, #44]	; 0x2c
   14274:	mov	r1, r4
   14278:	bl	12a10 <fputs@plt>
   1427c:	mov	r0, #0
   14280:	mov	r1, r4
   14284:	bl	12968 <putc@plt>
   14288:	mov	r0, #1
   1428c:	pop	{r4, sl, fp, pc}
   14290:	push	{r4, sl, fp, lr}
   14294:	add	fp, sp, #8
   14298:	mov	r4, r2
   1429c:	mov	r2, r0
   142a0:	mov	r0, r1
   142a4:	mov	r1, r2
   142a8:	bl	1b980 <__assert_fail@plt+0x8f04>
   142ac:	ldr	r1, [r4, #40]	; 0x28
   142b0:	bl	123d4 <strcmp@plt>
   142b4:	clz	r0, r0
   142b8:	lsr	r0, r0, #5
   142bc:	pop	{r4, sl, fp, pc}
   142c0:	ldr	r0, [r2, #40]	; 0x28
   142c4:	cmp	r0, #2
   142c8:	beq	142f8 <__assert_fail@plt+0x187c>
   142cc:	cmp	r0, #1
   142d0:	beq	14318 <__assert_fail@plt+0x189c>
   142d4:	cmp	r0, #0
   142d8:	bne	14310 <__assert_fail@plt+0x1894>
   142dc:	ldr	r1, [r1, #28]
   142e0:	ldrd	r2, [r2, #48]	; 0x30
   142e4:	mov	r0, #1
   142e8:	subs	r1, r2, r1
   142ec:	sbcs	r1, r3, #0
   142f0:	bcs	14310 <__assert_fail@plt+0x1894>
   142f4:	bx	lr
   142f8:	ldr	r0, [r1, #28]
   142fc:	ldrd	r2, [r2, #48]	; 0x30
   14300:	eor	r0, r2, r0
   14304:	orrs	r0, r0, r3
   14308:	mov	r0, #1
   1430c:	bxeq	lr
   14310:	mov	r0, #0
   14314:	bx	lr
   14318:	ldrd	r2, [r2, #48]	; 0x30
   1431c:	ldr	r1, [r1, #28]
   14320:	mov	r0, #1
   14324:	subs	r1, r1, r2
   14328:	rscs	r1, r3, #0
   1432c:	movcs	r0, #0
   14330:	bx	lr
   14334:	ldr	r0, [r1, #28]
   14338:	ldr	r1, [r2, #40]	; 0x28
   1433c:	sub	r0, r1, r0
   14340:	clz	r0, r0
   14344:	lsr	r0, r0, #5
   14348:	bx	lr
   1434c:	push	{r4, r5, r6, r7, fp, lr}
   14350:	add	fp, sp, #16
   14354:	mov	r5, r0
   14358:	ldr	r0, [r1, #16]
   1435c:	mov	r7, #0
   14360:	and	r0, r0, #61440	; 0xf000
   14364:	cmp	r0, #40960	; 0xa000
   14368:	bne	143d0 <__assert_fail@plt+0x1954>
   1436c:	movw	r7, #56896	; 0xde40
   14370:	mov	r6, r2
   14374:	movt	r7, #5
   14378:	ldr	r1, [r7, #12]
   1437c:	ldr	r0, [r7, #16]
   14380:	bl	2227c <__assert_fail@plt+0xf800>
   14384:	mov	r4, r0
   14388:	cmp	r0, #0
   1438c:	beq	143ac <__assert_fail@plt+0x1930>
   14390:	ldr	r0, [r6, #40]	; 0x28
   14394:	mov	r1, r4
   14398:	mov	r2, #16
   1439c:	bl	12698 <fnmatch@plt>
   143a0:	clz	r0, r0
   143a4:	lsr	r7, r0, #5
   143a8:	b	143c8 <__assert_fail@plt+0x194c>
   143ac:	bl	127d0 <__errno_location@plt>
   143b0:	ldr	r0, [r0]
   143b4:	mov	r1, r5
   143b8:	bl	18664 <__assert_fail@plt+0x5be8>
   143bc:	mov	r0, #1
   143c0:	str	r0, [r7, #28]
   143c4:	mov	r7, #0
   143c8:	mov	r0, r4
   143cc:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   143d0:	mov	r0, r7
   143d4:	pop	{r4, r5, r6, r7, fp, pc}
   143d8:	push	{r4, r5, fp, lr}
   143dc:	add	fp, sp, #8
   143e0:	ldr	r4, [r2, #40]	; 0x28
   143e4:	bl	227cc <__assert_fail@plt+0xfd50>
   143e8:	mov	r5, r0
   143ec:	bl	2291c <__assert_fail@plt+0xfea0>
   143f0:	mov	r0, r4
   143f4:	mov	r1, r5
   143f8:	mov	r2, #16
   143fc:	bl	12698 <fnmatch@plt>
   14400:	mov	r4, r0
   14404:	mov	r0, r5
   14408:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   1440c:	clz	r0, r4
   14410:	lsr	r0, r0, #5
   14414:	pop	{r4, r5, fp, pc}
   14418:	push	{r4, r5, fp, lr}
   1441c:	add	fp, sp, #8
   14420:	ldr	r0, [r2, #40]	; 0x28
   14424:	cmp	r0, #2
   14428:	beq	14458 <__assert_fail@plt+0x19dc>
   1442c:	cmp	r0, #1
   14430:	beq	14484 <__assert_fail@plt+0x1a08>
   14434:	cmp	r0, #0
   14438:	bne	1447c <__assert_fail@plt+0x1a00>
   1443c:	ldrd	r4, [r1, #96]	; 0x60
   14440:	ldrd	r2, [r2, #48]	; 0x30
   14444:	mov	r0, #1
   14448:	subs	r1, r2, r4
   1444c:	sbcs	r1, r3, r5
   14450:	bcs	1447c <__assert_fail@plt+0x1a00>
   14454:	pop	{r4, r5, fp, pc}
   14458:	ldr	r0, [r2, #48]	; 0x30
   1445c:	ldr	r3, [r2, #52]	; 0x34
   14460:	ldr	r2, [r1, #96]	; 0x60
   14464:	ldr	r1, [r1, #100]	; 0x64
   14468:	eor	r1, r1, r3
   1446c:	eor	r0, r2, r0
   14470:	orrs	r0, r0, r1
   14474:	mov	r0, #1
   14478:	popeq	{r4, r5, fp, pc}
   1447c:	mov	r0, #0
   14480:	pop	{r4, r5, fp, pc}
   14484:	ldrd	r2, [r2, #48]	; 0x30
   14488:	ldrd	r4, [r1, #96]	; 0x60
   1448c:	mov	r0, #1
   14490:	subs	r1, r4, r2
   14494:	sbcs	r1, r5, r3
   14498:	movcs	r0, #0
   1449c:	pop	{r4, r5, fp, pc}
   144a0:	push	{fp, lr}
   144a4:	mov	fp, sp
   144a8:	mov	r1, r0
   144ac:	ldr	r0, [r2, #40]	; 0x28
   144b0:	mov	r2, #16
   144b4:	bl	12698 <fnmatch@plt>
   144b8:	clz	r0, r0
   144bc:	lsr	r0, r0, #5
   144c0:	pop	{fp, pc}
   144c4:	ldr	r0, [r2, #40]	; 0x28
   144c8:	cmp	r0, #2
   144cc:	beq	144fc <__assert_fail@plt+0x1a80>
   144d0:	cmp	r0, #1
   144d4:	beq	1451c <__assert_fail@plt+0x1aa0>
   144d8:	cmp	r0, #0
   144dc:	bne	14514 <__assert_fail@plt+0x1a98>
   144e0:	ldr	r1, [r1, #20]
   144e4:	ldrd	r2, [r2, #48]	; 0x30
   144e8:	mov	r0, #1
   144ec:	subs	r1, r2, r1
   144f0:	sbcs	r1, r3, #0
   144f4:	bcs	14514 <__assert_fail@plt+0x1a98>
   144f8:	bx	lr
   144fc:	ldr	r0, [r1, #20]
   14500:	ldrd	r2, [r2, #48]	; 0x30
   14504:	eor	r0, r2, r0
   14508:	orrs	r0, r0, r3
   1450c:	mov	r0, #1
   14510:	bxeq	lr
   14514:	mov	r0, #0
   14518:	bx	lr
   1451c:	ldrd	r2, [r2, #48]	; 0x30
   14520:	ldr	r1, [r1, #20]
   14524:	mov	r0, #1
   14528:	subs	r1, r1, r2
   1452c:	rscs	r1, r3, #0
   14530:	movcs	r0, #0
   14534:	bx	lr
   14538:	push	{r4, r5, r6, r7, fp, lr}
   1453c:	add	fp, sp, #16
   14540:	mov	r5, r0
   14544:	ldr	r0, [r1, #16]
   14548:	mov	r7, #0
   1454c:	and	r0, r0, #61440	; 0xf000
   14550:	cmp	r0, #40960	; 0xa000
   14554:	bne	145bc <__assert_fail@plt+0x1b40>
   14558:	movw	r7, #56896	; 0xde40
   1455c:	mov	r6, r2
   14560:	movt	r7, #5
   14564:	ldr	r1, [r7, #12]
   14568:	ldr	r0, [r7, #16]
   1456c:	bl	2227c <__assert_fail@plt+0xf800>
   14570:	mov	r4, r0
   14574:	cmp	r0, #0
   14578:	beq	14598 <__assert_fail@plt+0x1b1c>
   1457c:	ldr	r0, [r6, #40]	; 0x28
   14580:	mov	r1, r4
   14584:	mov	r2, #0
   14588:	bl	12698 <fnmatch@plt>
   1458c:	clz	r0, r0
   14590:	lsr	r7, r0, #5
   14594:	b	145b4 <__assert_fail@plt+0x1b38>
   14598:	bl	127d0 <__errno_location@plt>
   1459c:	ldr	r0, [r0]
   145a0:	mov	r1, r5
   145a4:	bl	18664 <__assert_fail@plt+0x5be8>
   145a8:	mov	r0, #1
   145ac:	str	r0, [r7, #28]
   145b0:	mov	r7, #0
   145b4:	mov	r0, r4
   145b8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   145bc:	mov	r0, r7
   145c0:	pop	{r4, r5, r6, r7, fp, pc}
   145c4:	push	{r4, r5, fp, lr}
   145c8:	add	fp, sp, #8
   145cc:	sub	sp, sp, #16
   145d0:	movw	r3, #56940	; 0xde6c
   145d4:	mov	ip, r1
   145d8:	movw	r1, #56896	; 0xde40
   145dc:	ldrb	r5, [r2, #32]
   145e0:	ldr	r2, [r2, #44]	; 0x2c
   145e4:	movt	r1, #5
   145e8:	movt	r3, #5
   145ec:	ldr	r4, [r3, #20]
   145f0:	ldr	lr, [r1, #12]
   145f4:	ldr	r3, [r3, #40]	; 0x28
   145f8:	ldr	r1, [r1, #16]
   145fc:	str	r4, [sp]
   14600:	stmib	sp, {r3, r5}
   14604:	str	r2, [sp, #12]
   14608:	mov	r2, lr
   1460c:	mov	r3, ip
   14610:	bl	210b0 <__assert_fail@plt+0xe634>
   14614:	mov	r0, #1
   14618:	sub	sp, fp, #8
   1461c:	pop	{r4, r5, fp, pc}
   14620:	ldrd	r0, [r1, #80]	; 0x50
   14624:	mov	r3, #60	; 0x3c
   14628:	b	13ba8 <__assert_fail@plt+0x112c>
   1462c:	ldrd	r0, [r1, #80]	; 0x50
   14630:	movw	r3, #20864	; 0x5180
   14634:	movt	r3, #1
   14638:	b	13ba8 <__assert_fail@plt+0x112c>
   1463c:	push	{r4, r5, fp, lr}
   14640:	add	fp, sp, #8
   14644:	ldr	r4, [r2, #40]	; 0x28
   14648:	bl	227cc <__assert_fail@plt+0xfd50>
   1464c:	mov	r5, r0
   14650:	bl	2291c <__assert_fail@plt+0xfea0>
   14654:	mov	r0, r4
   14658:	mov	r1, r5
   1465c:	mov	r2, #0
   14660:	bl	12698 <fnmatch@plt>
   14664:	mov	r4, r0
   14668:	mov	r0, r5
   1466c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   14670:	clz	r0, r4
   14674:	lsr	r0, r0, #5
   14678:	pop	{r4, r5, fp, pc}
   1467c:	push	{fp, lr}
   14680:	mov	fp, sp
   14684:	ldr	r2, [r2, #160]	; 0xa0
   14688:	bl	1982c <__assert_fail@plt+0x6db0>
   1468c:	eor	r0, r0, #1
   14690:	pop	{fp, pc}
   14694:	nop	{0}
   14698:	push	{r4, r5, r6, r7, fp, lr}
   1469c:	add	fp, sp, #16
   146a0:	ldr	r0, [r2, #44]	; 0x2c
   146a4:	cmp	r0, #0
   146a8:	bne	146f8 <__assert_fail@plt+0x1c7c>
   146ac:	ldrd	r4, [r2, #48]	; 0x30
   146b0:	ldrd	r6, [r1, #80]	; 0x50
   146b4:	cmp	r4, r6
   146b8:	moveq	r0, #0
   146bc:	cmpeq	r5, r7
   146c0:	popeq	{r4, r5, r6, r7, fp, pc}
   146c4:	mov	r0, r6
   146c8:	mov	r1, r4
   146cc:	bl	12854 <difftime@plt>
   146d0:	vldr	d16, [pc, #64]	; 14718 <__assert_fail@plt+0x1c9c>
   146d4:	sub	r0, r7, r5
   146d8:	vmov	s2, r0
   146dc:	mov	r0, #0
   146e0:	vcvt.f64.s32	d17, s2
   146e4:	vmla.f64	d0, d17, d16
   146e8:	vcmpe.f64	d0, #0.0
   146ec:	vmrs	APSR_nzcv, fpscr
   146f0:	movwpl	r0, #1
   146f4:	pop	{r4, r5, r6, r7, fp, pc}
   146f8:	movw	r0, #28472	; 0x6f38
   146fc:	movw	r1, #28511	; 0x6f5f
   14700:	movw	r3, #28669	; 0x6ffd
   14704:	movw	r2, #621	; 0x26d
   14708:	movt	r0, #4
   1470c:	movt	r1, #4
   14710:	movt	r3, #4
   14714:	bl	12a7c <__assert_fail@plt>
   14718:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   1471c:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   14720:	push	{r4, r5, r6, r7, fp, lr}
   14724:	add	fp, sp, #16
   14728:	mov	r5, r0
   1472c:	ldr	r0, [r2, #44]	; 0x2c
   14730:	cmp	r0, #0
   14734:	bne	1480c <__assert_fail@plt+0x1d90>
   14738:	ldr	r0, [r2, #40]	; 0x28
   1473c:	cmp	r0, #4
   14740:	bhi	1482c <__assert_fail@plt+0x1db0>
   14744:	add	r3, pc, #0
   14748:	ldr	pc, [r3, r0, lsl #2]
   1474c:	andeq	r4, r1, r0, ror #14
   14750:	andeq	r4, r1, r8, asr #15
   14754:	andeq	r4, r1, r8, ror #14
   14758:	andeq	r4, r1, r0, ror r7
   1475c:	andeq	r4, r1, ip, asr #16
   14760:	add	r0, r1, #72	; 0x48
   14764:	b	14774 <__assert_fail@plt+0x1cf8>
   14768:	add	r0, r1, #88	; 0x58
   1476c:	b	14774 <__assert_fail@plt+0x1cf8>
   14770:	add	r0, r1, #80	; 0x50
   14774:	ldr	r5, [r2, #52]	; 0x34
   14778:	ldr	r2, [r2, #48]	; 0x30
   1477c:	ldrd	r6, [r0]
   14780:	cmp	r2, r6
   14784:	moveq	r4, #0
   14788:	cmpeq	r5, r7
   1478c:	beq	147c0 <__assert_fail@plt+0x1d44>
   14790:	mov	r0, r6
   14794:	mov	r1, r2
   14798:	bl	12854 <difftime@plt>
   1479c:	vldr	d16, [pc, #204]	; 14870 <__assert_fail@plt+0x1df4>
   147a0:	sub	r0, r7, r5
   147a4:	mov	r4, #0
   147a8:	vmov	s2, r0
   147ac:	vcvt.f64.s32	d17, s2
   147b0:	vmla.f64	d0, d17, d16
   147b4:	vcmpe.f64	d0, #0.0
   147b8:	vmrs	APSR_nzcv, fpscr
   147bc:	movwpl	r4, #1
   147c0:	mov	r0, r4
   147c4:	pop	{r4, r5, r6, r7, fp, pc}
   147c8:	movw	r1, #28844	; 0x70ac
   147cc:	mov	r0, #0
   147d0:	mov	r2, #5
   147d4:	mov	r4, #0
   147d8:	movt	r1, #4
   147dc:	bl	1253c <dcgettext@plt>
   147e0:	mov	r6, r0
   147e4:	mov	r0, #0
   147e8:	mov	r1, r5
   147ec:	bl	19994 <__assert_fail@plt+0x6f18>
   147f0:	mov	r3, r0
   147f4:	mov	r0, #0
   147f8:	mov	r1, #0
   147fc:	mov	r2, r6
   14800:	bl	12674 <error@plt>
   14804:	mov	r0, r4
   14808:	pop	{r4, r5, r6, r7, fp, pc}
   1480c:	movw	r0, #28472	; 0x6f38
   14810:	movw	r1, #28511	; 0x6f5f
   14814:	movw	r3, #28735	; 0x703f
   14818:	movw	r2, #631	; 0x277
   1481c:	movt	r0, #4
   14820:	movt	r1, #4
   14824:	movt	r3, #4
   14828:	bl	12a7c <__assert_fail@plt>
   1482c:	movw	r0, #28892	; 0x70dc
   14830:	movw	r1, #28511	; 0x6f5f
   14834:	movw	r3, #28735	; 0x703f
   14838:	movw	r2, #667	; 0x29b
   1483c:	movt	r0, #4
   14840:	movt	r1, #4
   14844:	movt	r3, #4
   14848:	bl	12a7c <__assert_fail@plt>
   1484c:	movw	r0, #28803	; 0x7083
   14850:	movw	r1, #28511	; 0x6f5f
   14854:	movw	r3, #28735	; 0x703f
   14858:	mov	r2, #636	; 0x27c
   1485c:	movt	r0, #4
   14860:	movt	r1, #4
   14864:	movt	r3, #4
   14868:	bl	12a7c <__assert_fail@plt>
   1486c:	nop	{0}
   14870:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   14874:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   14878:	push	{fp, lr}
   1487c:	mov	fp, sp
   14880:	ldr	r0, [r1, #28]
   14884:	bl	12a58 <getgrgid@plt>
   14888:	clz	r0, r0
   1488c:	lsr	r0, r0, #5
   14890:	pop	{fp, pc}
   14894:	push	{fp, lr}
   14898:	mov	fp, sp
   1489c:	ldr	r0, [r1, #24]
   148a0:	bl	123ec <getpwuid@plt>
   148a4:	clz	r0, r0
   148a8:	lsr	r0, r0, #5
   148ac:	pop	{fp, pc}
   148b0:	push	{r4, r5, r6, sl, fp, lr}
   148b4:	add	fp, sp, #16
   148b8:	mov	r6, r0
   148bc:	ldr	r0, [r2, #132]	; 0x84
   148c0:	mov	r5, r1
   148c4:	mov	r4, r2
   148c8:	mov	r1, r6
   148cc:	ldr	r0, [r0]
   148d0:	bl	148f4 <__assert_fail@plt+0x1e78>
   148d4:	cmp	r0, #0
   148d8:	moveq	r0, #0
   148dc:	popeq	{r4, r5, r6, sl, fp, pc}
   148e0:	mov	r0, r6
   148e4:	mov	r1, r5
   148e8:	mov	r2, r4
   148ec:	pop	{r4, r5, r6, sl, fp, lr}
   148f0:	b	156f8 <__assert_fail@plt+0x2c7c>
   148f4:	push	{r4, r5, r6, r7, fp, lr}
   148f8:	add	fp, sp, #16
   148fc:	mov	r5, r0
   14900:	movw	r0, #54612	; 0xd554
   14904:	mov	r4, r1
   14908:	movt	r0, #5
   1490c:	ldr	r0, [r0]
   14910:	bl	2fd10 <__assert_fail@plt+0x1d294>
   14914:	movw	r7, #54600	; 0xd548
   14918:	movw	r1, #29560	; 0x7378
   1491c:	mov	r0, #0
   14920:	mov	r2, #5
   14924:	movt	r7, #5
   14928:	movt	r1, #4
   1492c:	ldr	r6, [r7]
   14930:	bl	1253c <dcgettext@plt>
   14934:	mov	r1, r0
   14938:	mov	r0, r6
   1493c:	mov	r2, r5
   14940:	mov	r3, r4
   14944:	bl	127c4 <fprintf@plt>
   14948:	cmn	r0, #1
   1494c:	ble	14960 <__assert_fail@plt+0x1ee4>
   14950:	ldr	r0, [r7]
   14954:	bl	2fd10 <__assert_fail@plt+0x1d294>
   14958:	pop	{r4, r5, r6, r7, fp, lr}
   1495c:	b	2f6e4 <__assert_fail@plt+0x1cc68>
   14960:	bl	127d0 <__errno_location@plt>
   14964:	ldr	r4, [r0]
   14968:	movw	r1, #29577	; 0x7389
   1496c:	mov	r0, #0
   14970:	mov	r2, #5
   14974:	movt	r1, #4
   14978:	bl	1253c <dcgettext@plt>
   1497c:	mov	r2, r0
   14980:	mov	r0, #1
   14984:	mov	r1, r4
   14988:	bl	12674 <error@plt>
   1498c:	push	{r4, r5, fp, lr}
   14990:	add	fp, sp, #8
   14994:	mov	r5, r1
   14998:	mov	r1, r0
   1499c:	ldr	r0, [r2, #132]	; 0x84
   149a0:	mov	r4, r2
   149a4:	ldr	r0, [r0]
   149a8:	bl	148f4 <__assert_fail@plt+0x1e78>
   149ac:	cmp	r0, #0
   149b0:	moveq	r0, #0
   149b4:	popeq	{r4, r5, fp, pc}
   149b8:	movw	r0, #56896	; 0xde40
   149bc:	mov	r1, r5
   149c0:	mov	r2, r4
   149c4:	movt	r0, #5
   149c8:	ldr	r0, [r0, #12]
   149cc:	pop	{r4, r5, fp, lr}
   149d0:	b	156f8 <__assert_fail@plt+0x2c7c>
   149d4:	mov	r0, #1
   149d8:	bx	lr
   149dc:	push	{r4, r5, r6, sl, fp, lr}
   149e0:	add	fp, sp, #16
   149e4:	mov	r5, r2
   149e8:	ldr	r2, [r2, #156]	; 0x9c
   149ec:	mov	r4, r1
   149f0:	mov	r6, r0
   149f4:	cmp	r2, #0
   149f8:	beq	14a14 <__assert_fail@plt+0x1f98>
   149fc:	mov	r0, r6
   14a00:	mov	r1, r4
   14a04:	bl	1982c <__assert_fail@plt+0x6db0>
   14a08:	cmp	r0, #0
   14a0c:	movne	r0, #1
   14a10:	popne	{r4, r5, r6, sl, fp, pc}
   14a14:	ldr	r2, [r5, #160]	; 0xa0
   14a18:	mov	r0, r6
   14a1c:	mov	r1, r4
   14a20:	pop	{r4, r5, r6, sl, fp, lr}
   14a24:	b	1982c <__assert_fail@plt+0x6db0>
   14a28:	push	{fp, lr}
   14a2c:	mov	fp, sp
   14a30:	mov	r1, r0
   14a34:	ldr	r0, [r2, #40]	; 0x28
   14a38:	mov	r2, #0
   14a3c:	bl	12698 <fnmatch@plt>
   14a40:	clz	r0, r0
   14a44:	lsr	r0, r0, #5
   14a48:	pop	{fp, pc}
   14a4c:	ldr	r0, [r1, #16]
   14a50:	ldr	r3, [r2, #40]!	; 0x28
   14a54:	and	r1, r0, #61440	; 0xf000
   14a58:	cmp	r3, #2
   14a5c:	sub	r1, r1, #16384	; 0x4000
   14a60:	clz	r1, r1
   14a64:	lsr	r1, r1, #5
   14a68:	add	r1, r2, r1, lsl #2
   14a6c:	ldr	r1, [r1, #4]
   14a70:	beq	14aa4 <__assert_fail@plt+0x2028>
   14a74:	cmp	r3, #1
   14a78:	beq	14a8c <__assert_fail@plt+0x2010>
   14a7c:	cmp	r3, #0
   14a80:	bne	14ab8 <__assert_fail@plt+0x203c>
   14a84:	and	r0, r1, r0
   14a88:	b	14aa8 <__assert_fail@plt+0x202c>
   14a8c:	cmp	r1, #0
   14a90:	moveq	r0, #1
   14a94:	bxeq	lr
   14a98:	ands	r0, r1, r0
   14a9c:	movwne	r0, #1
   14aa0:	bx	lr
   14aa4:	bfc	r0, #12, #20
   14aa8:	sub	r0, r0, r1
   14aac:	clz	r0, r0
   14ab0:	lsr	r0, r0, #5
   14ab4:	bx	lr
   14ab8:	push	{fp, lr}
   14abc:	mov	fp, sp
   14ac0:	bl	12a28 <abort@plt>
   14ac4:	push	{fp, lr}
   14ac8:	mov	fp, sp
   14acc:	movw	r0, #56896	; 0xde40
   14ad0:	mov	r2, #1
   14ad4:	mov	r3, #0
   14ad8:	movt	r0, #5
   14adc:	ldr	r1, [r0, #12]
   14ae0:	ldr	r0, [r0, #16]
   14ae4:	bl	12470 <faccessat@plt>
   14ae8:	clz	r0, r0
   14aec:	lsr	r0, r0, #5
   14af0:	pop	{fp, pc}
   14af4:	push	{fp, lr}
   14af8:	mov	fp, sp
   14afc:	movw	r0, #56896	; 0xde40
   14b00:	mov	r2, #4
   14b04:	mov	r3, #0
   14b08:	movt	r0, #5
   14b0c:	ldr	r1, [r0, #12]
   14b10:	ldr	r0, [r0, #16]
   14b14:	bl	12470 <faccessat@plt>
   14b18:	clz	r0, r0
   14b1c:	lsr	r0, r0, #5
   14b20:	pop	{fp, pc}
   14b24:	push	{fp, lr}
   14b28:	mov	fp, sp
   14b2c:	movw	r0, #56896	; 0xde40
   14b30:	mov	r2, #2
   14b34:	mov	r3, #0
   14b38:	movt	r0, #5
   14b3c:	ldr	r1, [r0, #12]
   14b40:	ldr	r0, [r0, #16]
   14b44:	bl	12470 <faccessat@plt>
   14b48:	clz	r0, r0
   14b4c:	lsr	r0, r0, #5
   14b50:	pop	{fp, pc}
   14b54:	push	{fp, lr}
   14b58:	mov	fp, sp
   14b5c:	sub	sp, sp, #8
   14b60:	ldrb	ip, [r2, #52]	; 0x34
   14b64:	ldr	r1, [r2, #56]	; 0x38
   14b68:	ldr	r2, [r2, #44]	; 0x2c
   14b6c:	movw	r3, #50068	; 0xc394
   14b70:	str	r0, [sp]
   14b74:	movt	r3, #4
   14b78:	mov	r0, r2
   14b7c:	mov	r2, ip
   14b80:	bl	21a70 <__assert_fail@plt+0xeff4>
   14b84:	mov	r0, #1
   14b88:	mov	sp, fp
   14b8c:	pop	{fp, pc}
   14b90:	push	{r4, sl, fp, lr}
   14b94:	add	fp, sp, #8
   14b98:	ldr	r4, [r2, #44]	; 0x2c
   14b9c:	mov	r1, r4
   14ba0:	bl	12a10 <fputs@plt>
   14ba4:	mov	r0, #0
   14ba8:	mov	r1, r4
   14bac:	bl	12968 <putc@plt>
   14bb0:	mov	r0, #1
   14bb4:	pop	{r4, sl, fp, pc}
   14bb8:	movw	r0, #56940	; 0xde6c
   14bbc:	movt	r0, #5
   14bc0:	ldrb	r0, [r0]
   14bc4:	cmp	r0, #0
   14bc8:	beq	14bfc <__assert_fail@plt+0x2180>
   14bcc:	movw	r0, #56896	; 0xde40
   14bd0:	movt	r0, #5
   14bd4:	ldrb	r2, [r0, #4]
   14bd8:	cmp	r2, #0
   14bdc:	beq	14c04 <__assert_fail@plt+0x2188>
   14be0:	cmp	r1, #0
   14be4:	beq	14bfc <__assert_fail@plt+0x2180>
   14be8:	ldr	r1, [r1, #16]
   14bec:	and	r1, r1, #61440	; 0xf000
   14bf0:	cmp	r1, #16384	; 0x4000
   14bf4:	moveq	r1, #1
   14bf8:	strbeq	r1, [r0, #24]
   14bfc:	mov	r0, #1
   14c00:	bx	lr
   14c04:	push	{fp, lr}
   14c08:	mov	fp, sp
   14c0c:	movw	r0, #27863	; 0x6cd7
   14c10:	movw	r1, #28511	; 0x6f5f
   14c14:	movw	r3, #28902	; 0x70e6
   14c18:	movw	r2, #853	; 0x355
   14c1c:	movt	r0, #4
   14c20:	movt	r1, #4
   14c24:	movt	r3, #4
   14c28:	bl	12a7c <__assert_fail@plt>
   14c2c:	push	{fp, lr}
   14c30:	mov	fp, sp
   14c34:	bl	18990 <__assert_fail@plt+0x5f14>
   14c38:	movw	r0, #56896	; 0xde40
   14c3c:	movt	r0, #5
   14c40:	ldr	r0, [r0, #28]
   14c44:	bl	12758 <exit@plt>
   14c48:	push	{r4, r5, r6, sl, fp, lr}
   14c4c:	add	fp, sp, #16
   14c50:	sub	sp, sp, #8
   14c54:	mov	r4, r2
   14c58:	mov	r5, r0
   14c5c:	bl	12788 <strlen@plt>
   14c60:	mov	r6, r0
   14c64:	ldr	r0, [r4, #40]	; 0x28
   14c68:	mov	r1, #0
   14c6c:	mov	r3, #0
   14c70:	str	r1, [sp]
   14c74:	mov	r1, r5
   14c78:	mov	r2, r6
   14c7c:	bl	37b48 <__assert_fail@plt+0x250cc>
   14c80:	sub	r0, r0, r6
   14c84:	clz	r0, r0
   14c88:	lsr	r0, r0, #5
   14c8c:	sub	sp, fp, #16
   14c90:	pop	{r4, r5, r6, sl, fp, pc}
   14c94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c98:	add	fp, sp, #28
   14c9c:	sub	sp, sp, #4
   14ca0:	ldrd	r6, [r2, #40]	; 0x28
   14ca4:	ldrd	r8, [r1, #48]	; 0x30
   14ca8:	mov	sl, r2
   14cac:	asr	r5, r7, #31
   14cb0:	mov	r0, r8
   14cb4:	mov	r1, r9
   14cb8:	mov	r2, r7
   14cbc:	mov	r3, r5
   14cc0:	bl	46628 <__assert_fail@plt+0x33bac>
   14cc4:	umull	r4, r2, r0, r7
   14cc8:	mla	r2, r0, r5, r2
   14ccc:	mla	r7, r1, r7, r2
   14cd0:	adds	r2, r0, #1
   14cd4:	adc	r3, r1, #0
   14cd8:	subs	r5, r8, r4
   14cdc:	sbc	r7, r9, r7
   14ce0:	orrs	r7, r5, r7
   14ce4:	moveq	r3, r1
   14ce8:	moveq	r2, r0
   14cec:	cmp	r6, #2
   14cf0:	beq	14d20 <__assert_fail@plt+0x22a4>
   14cf4:	cmp	r6, #1
   14cf8:	beq	14d44 <__assert_fail@plt+0x22c8>
   14cfc:	cmp	r6, #0
   14d00:	bne	14d38 <__assert_fail@plt+0x22bc>
   14d04:	ldrd	r4, [sl, #48]	; 0x30
   14d08:	mov	r0, #1
   14d0c:	subs	r1, r4, r2
   14d10:	sbcs	r1, r5, r3
   14d14:	bcs	14d38 <__assert_fail@plt+0x22bc>
   14d18:	sub	sp, fp, #28
   14d1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d20:	ldrd	r0, [sl, #48]	; 0x30
   14d24:	eor	r1, r3, r1
   14d28:	eor	r0, r2, r0
   14d2c:	orrs	r0, r0, r1
   14d30:	mov	r0, #1
   14d34:	beq	14d18 <__assert_fail@plt+0x229c>
   14d38:	mov	r0, #0
   14d3c:	sub	sp, fp, #28
   14d40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d44:	ldrd	r4, [sl, #48]	; 0x30
   14d48:	mov	r0, #1
   14d4c:	subs	r1, r2, r4
   14d50:	sbcs	r1, r3, r5
   14d54:	movcs	r0, #0
   14d58:	sub	sp, fp, #28
   14d5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d60:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14d64:	add	fp, sp, #24
   14d68:	mov	r6, r1
   14d6c:	mov	r5, r2
   14d70:	mov	r2, r0
   14d74:	mov	r4, r1
   14d78:	ldr	r0, [r6, #96]!	; 0x60
   14d7c:	ldr	r1, [r6, #4]
   14d80:	orrs	r3, r0, r1
   14d84:	beq	14da0 <__assert_fail@plt+0x2324>
   14d88:	ldrd	r8, [r5, #40]	; 0x28
   14d8c:	eor	r1, r1, r9
   14d90:	eor	r0, r0, r8
   14d94:	orrs	r0, r0, r1
   14d98:	mov	r0, #0
   14d9c:	bne	14dc8 <__assert_fail@plt+0x234c>
   14da0:	movw	r0, #56896	; 0xde40
   14da4:	movt	r0, #5
   14da8:	ldr	r1, [r0, #12]
   14dac:	mov	r0, r2
   14db0:	mov	r2, r4
   14db4:	bl	18538 <__assert_fail@plt+0x5abc>
   14db8:	mov	r1, r0
   14dbc:	mov	r0, #0
   14dc0:	cmp	r1, #0
   14dc4:	beq	14dcc <__assert_fail@plt+0x2350>
   14dc8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14dcc:	ldrd	r2, [r5, #40]	; 0x28
   14dd0:	ldrd	r6, [r6]
   14dd4:	eor	r1, r7, r3
   14dd8:	eor	r2, r6, r2
   14ddc:	orrs	r1, r2, r1
   14de0:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   14de4:	ldrd	r0, [r5, #48]	; 0x30
   14de8:	ldrd	r2, [r4]
   14dec:	eor	r1, r3, r1
   14df0:	eor	r0, r2, r0
   14df4:	orr	r0, r0, r1
   14df8:	clz	r0, r0
   14dfc:	lsr	r0, r0, #5
   14e00:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14e04:	mov	r0, #1
   14e08:	bx	lr
   14e0c:	movw	ip, #56896	; 0xde40
   14e10:	movt	ip, #5
   14e14:	ldrb	r0, [ip, #5]
   14e18:	cmp	r0, #0
   14e1c:	beq	14e8c <__assert_fail@plt+0x2410>
   14e20:	ldr	r3, [ip, #8]
   14e24:	mov	r0, #0
   14e28:	cmp	r3, #0
   14e2c:	bxeq	lr
   14e30:	ldrb	r0, [ip, #4]
   14e34:	cmp	r0, #0
   14e38:	ldrne	r3, [r1, #16]
   14e3c:	and	r0, r3, #61440	; 0xf000
   14e40:	sub	r1, r0, #4096	; 0x1000
   14e44:	lsr	r0, r1, #12
   14e48:	cmp	r0, #11
   14e4c:	bhi	14e64 <__assert_fail@plt+0x23e8>
   14e50:	uxth	r3, r0
   14e54:	movw	ip, #2731	; 0xaab
   14e58:	mov	r0, #1
   14e5c:	tst	r0, ip, lsr r3
   14e60:	bne	14e6c <__assert_fail@plt+0x23f0>
   14e64:	mov	r0, #0
   14e68:	bx	lr
   14e6c:	movw	r3, #29616	; 0x73b0
   14e70:	movt	r3, #4
   14e74:	ldr	r1, [r3, r1, asr #10]
   14e78:	add	r1, r2, r1
   14e7c:	ldrb	r1, [r1, #40]	; 0x28
   14e80:	cmp	r1, #0
   14e84:	moveq	r0, #0
   14e88:	bx	lr
   14e8c:	push	{fp, lr}
   14e90:	mov	fp, sp
   14e94:	movw	r0, #28968	; 0x7128
   14e98:	movw	r1, #28511	; 0x6f5f
   14e9c:	movw	r3, #28984	; 0x7138
   14ea0:	movw	r2, #977	; 0x3d1
   14ea4:	movt	r0, #4
   14ea8:	movt	r1, #4
   14eac:	movt	r3, #4
   14eb0:	bl	12a7c <__assert_fail@plt>
   14eb4:	ldr	r0, [r2, #40]	; 0x28
   14eb8:	cmp	r0, #2
   14ebc:	beq	14eec <__assert_fail@plt+0x2470>
   14ec0:	cmp	r0, #1
   14ec4:	beq	14f0c <__assert_fail@plt+0x2490>
   14ec8:	cmp	r0, #0
   14ecc:	bne	14f04 <__assert_fail@plt+0x2488>
   14ed0:	ldr	r1, [r1, #24]
   14ed4:	ldrd	r2, [r2, #48]	; 0x30
   14ed8:	mov	r0, #1
   14edc:	subs	r1, r2, r1
   14ee0:	sbcs	r1, r3, #0
   14ee4:	bcs	14f04 <__assert_fail@plt+0x2488>
   14ee8:	bx	lr
   14eec:	ldr	r0, [r1, #24]
   14ef0:	ldrd	r2, [r2, #48]	; 0x30
   14ef4:	eor	r0, r2, r0
   14ef8:	orrs	r0, r0, r3
   14efc:	mov	r0, #1
   14f00:	bxeq	lr
   14f04:	mov	r0, #0
   14f08:	bx	lr
   14f0c:	ldrd	r2, [r2, #48]	; 0x30
   14f10:	ldr	r1, [r1, #24]
   14f14:	mov	r0, #1
   14f18:	subs	r1, r1, r2
   14f1c:	rscs	r1, r3, #0
   14f20:	movcs	r0, #0
   14f24:	bx	lr
   14f28:	push	{r4, r6, r7, r8, r9, sl, fp, lr}
   14f2c:	add	fp, sp, #24
   14f30:	ldrd	r6, [r1, #72]	; 0x48
   14f34:	ldrd	r8, [r1, #88]	; 0x58
   14f38:	mov	r4, r2
   14f3c:	cmp	r8, r6
   14f40:	cmpeq	r7, r9
   14f44:	beq	14f78 <__assert_fail@plt+0x24fc>
   14f48:	mov	r0, r6
   14f4c:	mov	r1, r8
   14f50:	bl	12854 <difftime@plt>
   14f54:	vldr	d16, [pc, #76]	; 14fa8 <__assert_fail@plt+0x252c>
   14f58:	sub	r0, r7, r9
   14f5c:	vmov	s2, r0
   14f60:	vcvt.f64.s32	d17, s2
   14f64:	vmla.f64	d0, d17, d16
   14f68:	vcmpe.f64	d0, #0.0
   14f6c:	vmrs	APSR_nzcv, fpscr
   14f70:	movmi	r0, #0
   14f74:	popmi	{r4, r6, r7, r8, r9, sl, fp, pc}
   14f78:	movw	r2, #51712	; 0xca00
   14f7c:	sub	r1, r9, r7
   14f80:	sub	r0, r8, r6
   14f84:	movw	r3, #20864	; 0x5180
   14f88:	movt	r2, #15258	; 0x3b9a
   14f8c:	cmp	r1, #0
   14f90:	add	r0, r0, r1, asr #31
   14f94:	movt	r3, #1
   14f98:	addlt	r1, r1, r2
   14f9c:	mov	r2, r4
   14fa0:	pop	{r4, r6, r7, r8, r9, sl, fp, lr}
   14fa4:	b	13ba8 <__assert_fail@plt+0x112c>
   14fa8:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   14fac:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   14fb0:	ldr	r0, [r1, #24]
   14fb4:	ldr	r1, [r2, #40]	; 0x28
   14fb8:	sub	r0, r1, r0
   14fbc:	clz	r0, r0
   14fc0:	lsr	r0, r0, #5
   14fc4:	bx	lr
   14fc8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14fcc:	add	fp, sp, #24
   14fd0:	sub	sp, sp, #104	; 0x68
   14fd4:	mov	r8, r2
   14fd8:	mov	r9, r1
   14fdc:	mov	r7, r0
   14fe0:	bl	18f7c <__assert_fail@plt+0x6500>
   14fe4:	mov	r4, sp
   14fe8:	mov	r6, r0
   14fec:	mov	r0, r4
   14ff0:	bl	18534 <__assert_fail@plt+0x5ab8>
   14ff4:	movw	r0, #36356	; 0x8e04
   14ff8:	movw	r2, #36112	; 0x8d10
   14ffc:	movw	r5, #56896	; 0xde40
   15000:	cmp	r6, #0
   15004:	mov	r1, r4
   15008:	movt	r0, #1
   1500c:	movt	r2, #1
   15010:	movt	r5, #5
   15014:	movne	r2, r0
   15018:	ldr	r0, [r5, #12]
   1501c:	blx	r2
   15020:	cmp	r0, #0
   15024:	beq	150b0 <__assert_fail@plt+0x2634>
   15028:	bl	18f7c <__assert_fail@plt+0x6500>
   1502c:	mov	r4, r0
   15030:	bl	127d0 <__errno_location@plt>
   15034:	cmp	r4, #0
   15038:	beq	15078 <__assert_fail@plt+0x25fc>
   1503c:	ldr	r1, [r0]
   15040:	cmp	r1, #2
   15044:	bne	15078 <__assert_fail@plt+0x25fc>
   15048:	ldrb	r0, [r5, #5]
   1504c:	cmp	r0, #0
   15050:	beq	15134 <__assert_fail@plt+0x26b8>
   15054:	ldr	r0, [r5, #8]
   15058:	mov	r6, #0
   1505c:	cmp	r0, #0
   15060:	beq	15128 <__assert_fail@plt+0x26ac>
   15064:	ldrb	r1, [r5, #4]
   15068:	cmp	r1, #0
   1506c:	ldrne	r0, [r9, #16]
   15070:	and	r0, r0, #61440	; 0xf000
   15074:	b	150e0 <__assert_fail@plt+0x2664>
   15078:	ldr	r4, [r0]
   1507c:	mov	r0, #0
   15080:	mov	r1, r7
   15084:	mov	r6, #0
   15088:	bl	19994 <__assert_fail@plt+0x6f18>
   1508c:	movw	r2, #52175	; 0xcbcf
   15090:	mov	r3, r0
   15094:	mov	r0, #0
   15098:	mov	r1, r4
   1509c:	movt	r2, #4
   150a0:	bl	12674 <error@plt>
   150a4:	mov	r0, #1
   150a8:	str	r0, [r5, #28]
   150ac:	b	15128 <__assert_fail@plt+0x26ac>
   150b0:	ldrb	r0, [r5, #5]
   150b4:	cmp	r0, #0
   150b8:	beq	15134 <__assert_fail@plt+0x26b8>
   150bc:	ldr	r0, [r5, #8]
   150c0:	mov	r6, #0
   150c4:	cmp	r0, #0
   150c8:	beq	15128 <__assert_fail@plt+0x26ac>
   150cc:	ldrb	r1, [r5, #4]
   150d0:	ldr	r2, [sp, #16]
   150d4:	cmp	r1, #0
   150d8:	moveq	r2, r0
   150dc:	and	r0, r2, #61440	; 0xf000
   150e0:	sub	r0, r0, #4096	; 0x1000
   150e4:	lsr	r1, r0, #12
   150e8:	cmp	r1, #11
   150ec:	bhi	15104 <__assert_fail@plt+0x2688>
   150f0:	uxth	r1, r1
   150f4:	movw	r2, #2731	; 0xaab
   150f8:	mov	r6, #1
   150fc:	tst	r6, r2, lsr r1
   15100:	bne	1510c <__assert_fail@plt+0x2690>
   15104:	mov	r6, #0
   15108:	b	15128 <__assert_fail@plt+0x26ac>
   1510c:	movw	r1, #29616	; 0x73b0
   15110:	movt	r1, #4
   15114:	ldr	r0, [r1, r0, asr #10]
   15118:	add	r0, r8, r0
   1511c:	ldrb	r0, [r0, #40]	; 0x28
   15120:	cmp	r0, #0
   15124:	moveq	r6, #0
   15128:	mov	r0, r6
   1512c:	sub	sp, fp, #24
   15130:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15134:	movw	r0, #28968	; 0x7128
   15138:	movw	r1, #28511	; 0x6f5f
   1513c:	movw	r3, #28984	; 0x7138
   15140:	movw	r2, #977	; 0x3d1
   15144:	movt	r0, #4
   15148:	movt	r1, #4
   1514c:	movt	r3, #4
   15150:	bl	12a7c <__assert_fail@plt>
   15154:	push	{r4, r5, r6, r7, fp, lr}
   15158:	add	fp, sp, #16
   1515c:	sub	sp, sp, #8
   15160:	mov	r5, r2
   15164:	movw	r2, #56940	; 0xde6c
   15168:	mov	r4, r0
   1516c:	movw	r0, #56896	; 0xde40
   15170:	movt	r0, #5
   15174:	movt	r2, #5
   15178:	ldr	r1, [r0, #12]
   1517c:	ldr	r3, [r2, #64]	; 0x40
   15180:	ldr	r0, [r0, #16]
   15184:	add	r2, sp, #4
   15188:	blx	r3
   1518c:	cmn	r0, #1
   15190:	ble	151bc <__assert_fail@plt+0x2740>
   15194:	ldr	r0, [r5, #40]	; 0x28
   15198:	ldr	r1, [sp, #4]
   1519c:	mov	r2, #0
   151a0:	bl	12698 <fnmatch@plt>
   151a4:	mov	r4, r0
   151a8:	ldr	r0, [sp, #4]
   151ac:	bl	129a4 <freecon@plt>
   151b0:	clz	r0, r4
   151b4:	lsr	r5, r0, #5
   151b8:	b	15200 <__assert_fail@plt+0x2784>
   151bc:	bl	127d0 <__errno_location@plt>
   151c0:	ldr	r6, [r0]
   151c4:	movw	r1, #29049	; 0x7179
   151c8:	mov	r0, #0
   151cc:	mov	r2, #5
   151d0:	mov	r5, #0
   151d4:	movt	r1, #4
   151d8:	bl	1253c <dcgettext@plt>
   151dc:	mov	r7, r0
   151e0:	mov	r0, #0
   151e4:	mov	r1, r4
   151e8:	bl	19994 <__assert_fail@plt+0x6f18>
   151ec:	mov	r3, r0
   151f0:	mov	r0, #0
   151f4:	mov	r1, r6
   151f8:	mov	r2, r7
   151fc:	bl	12674 <error@plt>
   15200:	mov	r0, r5
   15204:	sub	sp, fp, #16
   15208:	pop	{r4, r5, r6, r7, fp, pc}
   1520c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15210:	add	fp, sp, #24
   15214:	sub	sp, sp, #264	; 0x108
   15218:	mov	r4, r0
   1521c:	cmp	r1, #0
   15220:	beq	152b4 <__assert_fail@plt+0x2838>
   15224:	movw	r8, #29071	; 0x718f
   15228:	add	r6, sp, #4
   1522c:	mov	r5, r1
   15230:	mov	r9, #0
   15234:	sub	r7, r6, #1
   15238:	movt	r8, #4
   1523c:	ldr	r1, [r5, #4]
   15240:	mov	r2, #0
   15244:	cmp	r1, #0
   15248:	beq	1529c <__assert_fail@plt+0x2820>
   1524c:	mov	r0, r6
   15250:	bl	12638 <strcpy@plt>
   15254:	mov	r0, r6
   15258:	bl	12788 <strlen@plt>
   1525c:	sub	r1, r0, #1
   15260:	cmp	r1, #0
   15264:	blt	15290 <__assert_fail@plt+0x2814>
   15268:	ldrb	r1, [r7, r0]
   1526c:	cmp	r1, #32
   15270:	cmpne	r1, #9
   15274:	bne	15290 <__assert_fail@plt+0x2814>
   15278:	sub	r1, r0, #1
   1527c:	sub	r0, r0, #2
   15280:	cmn	r0, #1
   15284:	mov	r0, r1
   15288:	bgt	15268 <__assert_fail@plt+0x27ec>
   1528c:	b	15294 <__assert_fail@plt+0x2818>
   15290:	mov	r1, r0
   15294:	mov	r2, r6
   15298:	strb	r9, [r6, r1]
   1529c:	mov	r0, r4
   152a0:	mov	r1, r8
   152a4:	bl	127c4 <fprintf@plt>
   152a8:	ldr	r5, [r5, #152]	; 0x98
   152ac:	cmp	r5, #0
   152b0:	bne	1523c <__assert_fail@plt+0x27c0>
   152b4:	mov	r0, #10
   152b8:	mov	r1, r4
   152bc:	bl	12914 <fputc@plt>
   152c0:	sub	sp, fp, #24
   152c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   152c8:	cmp	r1, #0
   152cc:	bxeq	lr
   152d0:	push	{r4, r5, fp, lr}
   152d4:	add	fp, sp, #8
   152d8:	sub	sp, sp, #8
   152dc:	mov	r5, r1
   152e0:	ldr	r1, [r1, #156]	; 0x9c
   152e4:	mov	r4, r0
   152e8:	bl	153fc <__assert_fail@plt+0x2980>
   152ec:	ldrb	r2, [r5, #20]
   152f0:	ldrb	r0, [r5, #18]
   152f4:	movw	ip, #34847	; 0x881f
   152f8:	movw	r3, #29110	; 0x71b6
   152fc:	ldrb	r1, [r5, #19]
   15300:	movt	ip, #4
   15304:	movt	r3, #4
   15308:	cmp	r2, #0
   1530c:	movw	r2, #29084	; 0x719c
   15310:	moveq	r3, ip
   15314:	cmp	r0, #0
   15318:	movt	r2, #4
   1531c:	mov	r0, r4
   15320:	str	r3, [sp]
   15324:	movw	r3, #29097	; 0x71a9
   15328:	moveq	r2, ip
   1532c:	cmp	r1, #0
   15330:	movw	r1, #29077	; 0x7195
   15334:	movt	r3, #4
   15338:	movt	r1, #4
   1533c:	moveq	r3, ip
   15340:	bl	127c4 <fprintf@plt>
   15344:	mov	r0, r4
   15348:	mov	r1, r5
   1534c:	bl	15f10 <__assert_fail@plt+0x3494>
   15350:	vldr	s0, [r5, #28]
   15354:	movw	r1, #29123	; 0x71c3
   15358:	mov	r0, r4
   1535c:	movt	r1, #4
   15360:	vcvt.f64.f32	d16, s0
   15364:	vmov	r2, r3, d16
   15368:	bl	127c4 <fprintf@plt>
   1536c:	movw	r0, #56940	; 0xde6c
   15370:	movt	r0, #5
   15374:	ldrb	r0, [r0, #44]	; 0x2c
   15378:	tst	r0, #64	; 0x40
   1537c:	beq	153e8 <__assert_fail@plt+0x296c>
   15380:	ldr	r3, [r5, #164]	; 0xa4
   15384:	ldr	r2, [r5, #168]	; 0xa8
   15388:	movw	r1, #29149	; 0x71dd
   1538c:	mov	r0, r4
   15390:	movt	r1, #4
   15394:	bl	127c4 <fprintf@plt>
   15398:	ldr	r0, [r5, #164]	; 0xa4
   1539c:	cmp	r0, #0
   153a0:	beq	153d0 <__assert_fail@plt+0x2954>
   153a4:	vldr	s0, [r5, #168]	; 0xa8
   153a8:	vmov	s2, r0
   153ac:	movw	r1, #29176	; 0x71f8
   153b0:	mov	r0, r4
   153b4:	vcvt.f64.u32	d16, s2
   153b8:	movt	r1, #4
   153bc:	vcvt.f64.u32	d17, s0
   153c0:	vdiv.f64	d16, d17, d16
   153c4:	vmov	r2, r3, d16
   153c8:	bl	127c4 <fprintf@plt>
   153cc:	b	153e8 <__assert_fail@plt+0x296c>
   153d0:	movw	r0, #29184	; 0x7200
   153d4:	mov	r1, #4
   153d8:	mov	r2, #1
   153dc:	mov	r3, r4
   153e0:	movt	r0, #4
   153e4:	bl	125f0 <fwrite@plt>
   153e8:	ldr	r1, [r5, #160]	; 0xa0
   153ec:	mov	r0, r4
   153f0:	sub	sp, fp, #8
   153f4:	pop	{r4, r5, fp, lr}
   153f8:	b	153fc <__assert_fail@plt+0x2980>
   153fc:	push	{r4, r5, fp, lr}
   15400:	add	fp, sp, #8
   15404:	cmp	r1, #0
   15408:	popeq	{r4, r5, fp, pc}
   1540c:	mov	r5, r1
   15410:	movw	r1, #15600	; 0x3cf0
   15414:	mov	r4, r0
   15418:	movw	r0, #18908	; 0x49dc
   1541c:	movt	r0, #1
   15420:	movt	r1, #1
   15424:	ldr	r3, [r5]
   15428:	ldr	r2, [r5, #156]	; 0x9c
   1542c:	cmp	r3, r0
   15430:	cmpne	r3, r1
   15434:	bne	15450 <__assert_fail@plt+0x29d4>
   15438:	cmp	r2, #0
   1543c:	bne	15464 <__assert_fail@plt+0x29e8>
   15440:	ldr	r5, [r5, #160]	; 0xa0
   15444:	cmp	r5, #0
   15448:	bne	15424 <__assert_fail@plt+0x29a8>
   1544c:	pop	{r4, r5, fp, pc}
   15450:	cmp	r2, #0
   15454:	bne	15464 <__assert_fail@plt+0x29e8>
   15458:	ldr	r0, [r5, #160]	; 0xa0
   1545c:	cmp	r0, #0
   15460:	beq	154a4 <__assert_fail@plt+0x2a28>
   15464:	movw	r0, #29608	; 0x73a8
   15468:	mov	r1, #3
   1546c:	mov	r2, #1
   15470:	mov	r3, r4
   15474:	movt	r0, #4
   15478:	bl	125f0 <fwrite@plt>
   1547c:	mov	r0, r4
   15480:	mov	r1, r5
   15484:	bl	152c8 <__assert_fail@plt+0x284c>
   15488:	movw	r0, #29612	; 0x73ac
   1548c:	mov	r1, #3
   15490:	mov	r2, #1
   15494:	mov	r3, r4
   15498:	movt	r0, #4
   1549c:	pop	{r4, r5, fp, lr}
   154a0:	b	125f0 <fwrite@plt>
   154a4:	mov	r0, r4
   154a8:	mov	r1, r5
   154ac:	pop	{r4, r5, fp, lr}
   154b0:	b	152c8 <__assert_fail@plt+0x284c>
   154b4:	push	{r4, r5, fp, lr}
   154b8:	add	fp, sp, #8
   154bc:	mov	r4, r0
   154c0:	movw	r0, #56940	; 0xde6c
   154c4:	movt	r0, #5
   154c8:	ldrb	r0, [r0, #44]	; 0x2c
   154cc:	tst	r0, #64	; 0x40
   154d0:	popeq	{r4, r5, fp, pc}
   154d4:	movw	r5, #54600	; 0xd548
   154d8:	movw	r0, #29189	; 0x7205
   154dc:	mov	r1, #42	; 0x2a
   154e0:	mov	r2, #1
   154e4:	movt	r5, #5
   154e8:	movt	r0, #4
   154ec:	ldr	r3, [r5]
   154f0:	bl	125f0 <fwrite@plt>
   154f4:	ldr	r0, [r5]
   154f8:	mov	r1, r4
   154fc:	bl	152c8 <__assert_fail@plt+0x284c>
   15500:	ldr	r1, [r5]
   15504:	mov	r0, #10
   15508:	pop	{r4, r5, fp, lr}
   1550c:	b	12914 <fputc@plt>
   15510:	push	{fp, lr}
   15514:	mov	fp, sp
   15518:	cmp	r0, #0
   1551c:	popeq	{fp, pc}
   15520:	movw	lr, #19384	; 0x4bb8
   15524:	movw	ip, #19500	; 0x4c2c
   15528:	movt	lr, #1
   1552c:	movt	ip, #1
   15530:	ldr	r3, [r0]
   15534:	cmp	r3, #0
   15538:	beq	15618 <__assert_fail@plt+0x2b9c>
   1553c:	ldr	r2, [r0, #172]	; 0xac
   15540:	cmp	r2, #0
   15544:	beq	15638 <__assert_fail@plt+0x2bbc>
   15548:	ldr	r1, [r2, #12]
   1554c:	cmp	r1, #0
   15550:	cmpne	r1, r3
   15554:	bne	155f8 <__assert_fail@plt+0x2b7c>
   15558:	ldr	r1, [r2]
   1555c:	cmp	r1, #6
   15560:	bhi	155a0 <__assert_fail@plt+0x2b24>
   15564:	add	r2, pc, #0
   15568:	ldr	pc, [r2, r1, lsl #2]
   1556c:	andeq	r5, r1, r8, asr r6
   15570:	andeq	r5, r1, r8, lsl #11
   15574:	andeq	r5, r1, r8, ror r6
   15578:	andeq	r5, r1, r8, lsl #11
   1557c:	andeq	r5, r1, r8, lsl #11
   15580:	andeq	r5, r1, r8, lsl #11
   15584:			; <UNDEFINED> instruction: 0x000155b0
   15588:	ldrb	r1, [r0, #17]
   1558c:	cmp	r1, #0
   15590:	bne	15698 <__assert_fail@plt+0x2c1c>
   15594:	ldrb	r1, [r0, #16]
   15598:	cmp	r1, #0
   1559c:	bne	156b8 <__assert_fail@plt+0x2c3c>
   155a0:	ldr	r0, [r0, #152]	; 0x98
   155a4:	cmp	r0, #0
   155a8:	bne	15530 <__assert_fail@plt+0x2ab4>
   155ac:	b	155f4 <__assert_fail@plt+0x2b78>
   155b0:	ldrb	r1, [r0, #16]
   155b4:	cmp	r1, #0
   155b8:	beq	156d8 <__assert_fail@plt+0x2c5c>
   155bc:	cmp	r3, lr
   155c0:	cmpne	r3, ip
   155c4:	beq	155a0 <__assert_fail@plt+0x2b24>
   155c8:	ldrb	r1, [r0, #17]
   155cc:	cmp	r1, #0
   155d0:	bne	155a0 <__assert_fail@plt+0x2b24>
   155d4:	movw	r0, #29453	; 0x730d
   155d8:	movw	r1, #28511	; 0x6f5f
   155dc:	movw	r3, #29253	; 0x7245
   155e0:	movw	r2, #1349	; 0x545
   155e4:	movt	r0, #4
   155e8:	movt	r1, #4
   155ec:	movt	r3, #4
   155f0:	bl	12a7c <__assert_fail@plt>
   155f4:	pop	{fp, pc}
   155f8:	movw	r0, #29326	; 0x728e
   155fc:	movw	r1, #28511	; 0x6f5f
   15600:	movw	r3, #29253	; 0x7245
   15604:	movw	r2, #1322	; 0x52a
   15608:	movt	r0, #4
   1560c:	movt	r1, #4
   15610:	movt	r3, #4
   15614:	bl	12a7c <__assert_fail@plt>
   15618:	movw	r0, #29232	; 0x7230
   1561c:	movw	r1, #28511	; 0x6f5f
   15620:	movw	r3, #29253	; 0x7245
   15624:	movw	r2, #1310	; 0x51e
   15628:	movt	r0, #4
   1562c:	movt	r1, #4
   15630:	movt	r3, #4
   15634:	bl	12a7c <__assert_fail@plt>
   15638:	movw	r0, #29302	; 0x7276
   1563c:	movw	r1, #28511	; 0x6f5f
   15640:	movw	r3, #29253	; 0x7245
   15644:	movw	r2, #1313	; 0x521
   15648:	movt	r0, #4
   1564c:	movt	r1, #4
   15650:	movt	r3, #4
   15654:	bl	12a7c <__assert_fail@plt>
   15658:	movw	r0, #29369	; 0x72b9
   1565c:	movw	r1, #28511	; 0x6f5f
   15660:	movw	r3, #29253	; 0x7245
   15664:	movw	r2, #1338	; 0x53a
   15668:	movt	r0, #4
   1566c:	movt	r1, #4
   15670:	movt	r3, #4
   15674:	bl	12a7c <__assert_fail@plt>
   15678:	movw	r0, #29405	; 0x72dd
   1567c:	movw	r1, #28511	; 0x6f5f
   15680:	movw	r3, #29253	; 0x7245
   15684:	movw	r2, #1339	; 0x53b
   15688:	movt	r0, #4
   1568c:	movt	r1, #4
   15690:	movt	r3, #4
   15694:	bl	12a7c <__assert_fail@plt>
   15698:	movw	r0, #29452	; 0x730c
   1569c:	movw	r1, #28511	; 0x6f5f
   156a0:	movw	r3, #29253	; 0x7245
   156a4:	movw	r2, #1363	; 0x553
   156a8:	movt	r0, #4
   156ac:	movt	r1, #4
   156b0:	movt	r3, #4
   156b4:	bl	12a7c <__assert_fail@plt>
   156b8:	movw	r0, #29473	; 0x7321
   156bc:	movw	r1, #28511	; 0x6f5f
   156c0:	movw	r3, #29253	; 0x7245
   156c4:	movw	r2, #1364	; 0x554
   156c8:	movt	r0, #4
   156cc:	movt	r1, #4
   156d0:	movt	r3, #4
   156d4:	bl	12a7c <__assert_fail@plt>
   156d8:	movw	r0, #29474	; 0x7322
   156dc:	movw	r1, #28511	; 0x6f5f
   156e0:	movw	r3, #29253	; 0x7245
   156e4:	movw	r2, #1343	; 0x53f
   156e8:	movt	r0, #4
   156ec:	movt	r1, #4
   156f0:	movt	r3, #4
   156f4:	bl	12a7c <__assert_fail@plt>
   156f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156fc:	add	fp, sp, #28
   15700:	sub	sp, sp, #36	; 0x24
   15704:	mov	r8, r2
   15708:	mov	r9, r0
   1570c:	mov	r4, r2
   15710:	ldr	r0, [r8], #40	; 0x28
   15714:	bl	19964 <__assert_fail@plt+0x6ee8>
   15718:	mov	sl, r0
   1571c:	cmp	r0, #0
   15720:	beq	157a8 <__assert_fail@plt+0x2d2c>
   15724:	ldr	r0, [r4, #116]	; 0x74
   15728:	cmp	r0, #0
   1572c:	bne	15830 <__assert_fail@plt+0x2db4>
   15730:	movw	r5, #56896	; 0xde40
   15734:	mov	r1, #47	; 0x2f
   15738:	movt	r5, #5
   1573c:	ldr	r6, [r5, #12]
   15740:	mov	r0, r6
   15744:	bl	12794 <strchr@plt>
   15748:	cmp	r0, #0
   1574c:	beq	157ec <__assert_fail@plt+0x2d70>
   15750:	mov	r0, r6
   15754:	bl	22888 <__assert_fail@plt+0xfe0c>
   15758:	ldr	r5, [r5, #16]
   1575c:	mov	r6, r0
   15760:	mov	r0, #8
   15764:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   15768:	mov	r1, #0
   1576c:	str	r0, [r4, #144]	; 0x90
   15770:	mov	r2, #0
   15774:	str	r1, [r0, #4]
   15778:	mov	r0, r5
   1577c:	mov	r1, r6
   15780:	bl	26374 <__assert_fail@plt+0x138f8>
   15784:	ldr	r1, [r4, #144]	; 0x90
   15788:	cmp	r0, #0
   1578c:	str	r0, [r1]
   15790:	blt	159d8 <__assert_fail@plt+0x2f5c>
   15794:	mov	r1, #1
   15798:	bl	225c4 <__assert_fail@plt+0xfb48>
   1579c:	mov	r0, r6
   157a0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   157a4:	b	15830 <__assert_fail@plt+0x2db4>
   157a8:	movw	r0, #54632	; 0xd568
   157ac:	ldr	r1, [r4, #144]	; 0x90
   157b0:	mov	r7, #0
   157b4:	mov	r6, #0
   157b8:	mov	r5, #0
   157bc:	movt	r0, #5
   157c0:	ldr	r0, [r0]
   157c4:	cmp	r1, r0
   157c8:	beq	15860 <__assert_fail@plt+0x2de4>
   157cc:	movw	r0, #29732	; 0x7424
   157d0:	movw	r1, #29765	; 0x7445
   157d4:	movw	r3, #29772	; 0x744c
   157d8:	mov	r2, #148	; 0x94
   157dc:	movt	r0, #4
   157e0:	movt	r1, #4
   157e4:	movt	r3, #4
   157e8:	bl	12a7c <__assert_fail@plt>
   157ec:	ldr	r5, [r5, #16]
   157f0:	mov	r0, #8
   157f4:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   157f8:	mov	r1, #0
   157fc:	str	r0, [r4, #144]	; 0x90
   15800:	mov	r2, #0
   15804:	str	r1, [r0, #4]
   15808:	movw	r1, #31476	; 0x7af4
   1580c:	mov	r0, r5
   15810:	movt	r1, #4
   15814:	bl	26374 <__assert_fail@plt+0x138f8>
   15818:	ldr	r1, [r4, #144]	; 0x90
   1581c:	cmp	r0, #0
   15820:	str	r0, [r1]
   15824:	blt	159e0 <__assert_fail@plt+0x2f64>
   15828:	mov	r1, #1
   1582c:	bl	225c4 <__assert_fail@plt+0xfb48>
   15830:	movw	r0, #56896	; 0xde40
   15834:	movt	r0, #5
   15838:	ldr	r0, [r0, #12]
   1583c:	bl	227cc <__assert_fail@plt+0xfd50>
   15840:	mov	r9, r0
   15844:	ldrb	r0, [r0]
   15848:	movw	r6, #29729	; 0x7421
   1584c:	movt	r6, #4
   15850:	mov	r7, r9
   15854:	subs	r5, r0, #47	; 0x2f
   15858:	moveq	r6, r5
   1585c:	movwne	r5, #2
   15860:	ldrb	r0, [r8]
   15864:	cmp	r0, #0
   15868:	beq	158c4 <__assert_fail@plt+0x2e48>
   1586c:	mov	r0, r9
   15870:	bl	12788 <strlen@plt>
   15874:	mov	r1, #0
   15878:	add	r2, r8, #4
   1587c:	add	r3, r0, #1
   15880:	str	r6, [sp]
   15884:	str	r5, [sp, #4]
   15888:	str	r1, [sp, #8]
   1588c:	mov	r0, r2
   15890:	add	r1, r4, #88	; 0x58
   15894:	mov	r2, r9
   15898:	bl	1fe40 <__assert_fail@plt+0xd3c4>
   1589c:	ldr	r0, [r4, #116]	; 0x74
   158a0:	cmp	r0, #0
   158a4:	beq	159a8 <__assert_fail@plt+0x2f2c>
   158a8:	movw	r0, #56896	; 0xde40
   158ac:	mov	r6, #1
   158b0:	movt	r0, #5
   158b4:	strb	r6, [r0, #32]
   158b8:	cmp	r7, #0
   158bc:	bne	1598c <__assert_fail@plt+0x2f10>
   158c0:	b	1599c <__assert_fail@plt+0x2f20>
   158c4:	add	r0, r4, #88	; 0x58
   158c8:	str	r7, [sp, #20]
   158cc:	str	sl, [sp, #24]
   158d0:	str	r0, [sp, #32]
   158d4:	add	r0, r8, #4
   158d8:	str	r0, [sp, #28]
   158dc:	ldr	r0, [r4, #136]	; 0x88
   158e0:	cmp	r0, #1
   158e4:	blt	1594c <__assert_fail@plt+0x2ed0>
   158e8:	mov	r7, r9
   158ec:	mov	sl, r5
   158f0:	mov	r9, r6
   158f4:	mov	r5, #0
   158f8:	ldr	r0, [r4, #132]	; 0x84
   158fc:	ldr	r6, [r0, r5, lsl #2]
   15900:	mov	r0, r6
   15904:	bl	12788 <strlen@plt>
   15908:	mov	r8, r0
   1590c:	mov	r0, r7
   15910:	bl	12788 <strlen@plt>
   15914:	stm	sp, {r9, sl}
   15918:	str	r0, [sp, #12]
   1591c:	mov	r0, #0
   15920:	mov	r2, r6
   15924:	mov	r3, r8
   15928:	str	r7, [sp, #8]
   1592c:	str	r0, [sp, #16]
   15930:	ldr	r0, [sp, #28]
   15934:	ldr	r1, [sp, #32]
   15938:	bl	1fcc8 <__assert_fail@plt+0xd24c>
   1593c:	ldr	r0, [r4, #136]	; 0x88
   15940:	add	r5, r5, #1
   15944:	cmp	r5, r0
   15948:	blt	158f8 <__assert_fail@plt+0x2e7c>
   1594c:	ldr	r0, [sp, #28]
   15950:	ldr	r1, [sp, #32]
   15954:	bl	200b0 <__assert_fail@plt+0xd634>
   15958:	ldrh	r0, [r4, #148]	; 0x94
   1595c:	ldr	sl, [sp, #24]
   15960:	movw	r1, #65407	; 0xff7f
   15964:	and	r0, r0, r1
   15968:	cmp	sl, #0
   1596c:	clz	r0, r0
   15970:	lsr	r6, r0, #5
   15974:	beq	15980 <__assert_fail@plt+0x2f04>
   15978:	ldr	r0, [r4, #144]	; 0x90
   1597c:	bl	2cbdc <__assert_fail@plt+0x1a160>
   15980:	ldr	r7, [sp, #20]
   15984:	cmp	r7, #0
   15988:	beq	1599c <__assert_fail@plt+0x2f20>
   1598c:	cmp	sl, #0
   15990:	beq	159b8 <__assert_fail@plt+0x2f3c>
   15994:	mov	r0, r7
   15998:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   1599c:	mov	r0, r6
   159a0:	sub	sp, fp, #28
   159a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159a8:	mov	r6, #1
   159ac:	cmp	r7, #0
   159b0:	bne	1598c <__assert_fail@plt+0x2f10>
   159b4:	b	1599c <__assert_fail@plt+0x2f20>
   159b8:	movw	r0, #29842	; 0x7492
   159bc:	movw	r1, #29765	; 0x7445
   159c0:	movw	r3, #29772	; 0x744c
   159c4:	mov	r2, #208	; 0xd0
   159c8:	movt	r0, #4
   159cc:	movt	r1, #4
   159d0:	movt	r3, #4
   159d4:	bl	12a7c <__assert_fail@plt>
   159d8:	mov	r0, r6
   159dc:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   159e0:	bl	127d0 <__errno_location@plt>
   159e4:	ldr	r4, [r0]
   159e8:	movw	r1, #29664	; 0x73e0
   159ec:	mov	r0, #0
   159f0:	mov	r2, #5
   159f4:	movt	r1, #4
   159f8:	bl	1253c <dcgettext@plt>
   159fc:	mov	r6, r0
   15a00:	mov	r0, #0
   15a04:	mov	r1, r9
   15a08:	bl	19994 <__assert_fail@plt+0x6f18>
   15a0c:	mov	r3, r0
   15a10:	mov	r0, #1
   15a14:	mov	r1, r4
   15a18:	mov	r2, r6
   15a1c:	bl	12674 <error@plt>
   15a20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a24:	add	fp, sp, #28
   15a28:	sub	sp, sp, #20
   15a2c:	movw	r9, #56940	; 0xde6c
   15a30:	mov	r8, r3
   15a34:	mov	r5, r1
   15a38:	movt	r9, #5
   15a3c:	ldrb	r0, [r9, #44]	; 0x2c
   15a40:	tst	r0, #32
   15a44:	bne	15bd8 <__assert_fail@plt+0x315c>
   15a48:	movw	r0, #54612	; 0xd554
   15a4c:	movt	r0, #5
   15a50:	ldr	r0, [r0]
   15a54:	bl	2fd10 <__assert_fail@plt+0x1d294>
   15a58:	movw	sl, #54600	; 0xd548
   15a5c:	movt	sl, #5
   15a60:	ldr	r0, [sl]
   15a64:	bl	2fd10 <__assert_fail@plt+0x1d294>
   15a68:	movw	r0, #54636	; 0xd56c
   15a6c:	movt	r0, #5
   15a70:	ldrb	r1, [r0]
   15a74:	cmp	r1, #0
   15a78:	bne	15a90 <__assert_fail@plt+0x3014>
   15a7c:	mov	r1, #1
   15a80:	strb	r1, [r0]
   15a84:	mov	r0, #17
   15a88:	mov	r1, #0
   15a8c:	bl	12500 <signal@plt>
   15a90:	bl	128d8 <fork@plt>
   15a94:	cmn	r0, #1
   15a98:	beq	15c7c <__assert_fail@plt+0x3200>
   15a9c:	mov	r6, r0
   15aa0:	cmp	r0, #0
   15aa4:	beq	15ca8 <__assert_fail@plt+0x322c>
   15aa8:	add	r7, r5, #108	; 0x6c
   15aac:	mov	r0, r6
   15ab0:	mov	r1, r7
   15ab4:	mov	r2, #0
   15ab8:	bl	12614 <waitpid@plt>
   15abc:	cmn	r0, #1
   15ac0:	bne	15b24 <__assert_fail@plt+0x30a8>
   15ac4:	bl	127d0 <__errno_location@plt>
   15ac8:	ldr	r4, [r0]
   15acc:	cmp	r4, #4
   15ad0:	beq	15aac <__assert_fail@plt+0x3030>
   15ad4:	movw	r1, #29989	; 0x7525
   15ad8:	mov	r0, #0
   15adc:	mov	r2, #5
   15ae0:	mov	r6, #0
   15ae4:	movt	r1, #4
   15ae8:	bl	1253c <dcgettext@plt>
   15aec:	ldr	r1, [r8]
   15af0:	mov	r5, r0
   15af4:	mov	r0, #0
   15af8:	bl	19994 <__assert_fail@plt+0x6f18>
   15afc:	mov	r3, r0
   15b00:	mov	r0, #0
   15b04:	mov	r1, r4
   15b08:	mov	r2, r5
   15b0c:	bl	12674 <error@plt>
   15b10:	movw	r0, #56896	; 0xde40
   15b14:	mov	r1, #1
   15b18:	movt	r0, #5
   15b1c:	str	r1, [r0, #28]
   15b20:	b	15bcc <__assert_fail@plt+0x3150>
   15b24:	ldr	r0, [r7]
   15b28:	mov	r1, #2130706432	; 0x7f000000
   15b2c:	and	r1, r1, r0, lsl #24
   15b30:	add	r1, r1, #16777216	; 0x1000000
   15b34:	cmp	r1, #33554432	; 0x2000000
   15b38:	blt	15b98 <__assert_fail@plt+0x311c>
   15b3c:	movw	r1, #30010	; 0x753a
   15b40:	mov	r0, #0
   15b44:	mov	r2, #5
   15b48:	movt	r1, #4
   15b4c:	bl	1253c <dcgettext@plt>
   15b50:	ldr	r1, [r9, #72]	; 0x48
   15b54:	ldr	r2, [r8]
   15b58:	mov	r4, r0
   15b5c:	mov	r0, #0
   15b60:	bl	2c45c <__assert_fail@plt+0x199e0>
   15b64:	mov	r3, r0
   15b68:	ldr	r0, [r5, #108]	; 0x6c
   15b6c:	mov	r1, #0
   15b70:	mov	r2, r4
   15b74:	and	r0, r0, #127	; 0x7f
   15b78:	str	r0, [sp]
   15b7c:	mov	r0, #0
   15b80:	bl	12674 <error@plt>
   15b84:	ldrb	r0, [r5]
   15b88:	cmp	r0, #0
   15b8c:	bne	15bbc <__assert_fail@plt+0x3140>
   15b90:	mov	r6, #1
   15b94:	b	15bcc <__assert_fail@plt+0x3150>
   15b98:	ldrb	r1, [r9, #44]	; 0x2c
   15b9c:	ubfx	r4, r0, #8, #8
   15ba0:	tst	r1, #32
   15ba4:	bne	15c60 <__assert_fail@plt+0x31e4>
   15ba8:	cmp	r4, #0
   15bac:	mov	r6, #1
   15bb0:	ldrbne	r0, [r5]
   15bb4:	cmpne	r0, #0
   15bb8:	beq	15bcc <__assert_fail@plt+0x3150>
   15bbc:	movw	r0, #56896	; 0xde40
   15bc0:	mov	r6, #1
   15bc4:	movt	r0, #5
   15bc8:	str	r6, [r0, #28]
   15bcc:	mov	r0, r6
   15bd0:	sub	sp, fp, #28
   15bd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15bd8:	ldr	r0, [r5, #48]	; 0x30
   15bdc:	movw	r7, #54600	; 0xd548
   15be0:	movw	r1, #29848	; 0x7498
   15be4:	mov	r4, #0
   15be8:	movt	r7, #5
   15bec:	movt	r1, #4
   15bf0:	subs	r2, r0, #1
   15bf4:	ldr	r0, [r7]
   15bf8:	sbc	r3, r4, #0
   15bfc:	bl	127c4 <fprintf@plt>
   15c00:	ldr	r0, [r5, #48]	; 0x30
   15c04:	ldr	r6, [r7]
   15c08:	cmp	r0, #1
   15c0c:	beq	15c50 <__assert_fail@plt+0x31d4>
   15c10:	movw	sl, #52174	; 0xcbce
   15c14:	movt	sl, #4
   15c18:	ldr	r0, [r5, #52]	; 0x34
   15c1c:	ldr	r1, [r0, r4, lsl #2]
   15c20:	mov	r0, #0
   15c24:	bl	19994 <__assert_fail@plt+0x6f18>
   15c28:	mov	r2, r0
   15c2c:	mov	r0, r6
   15c30:	mov	r1, sl
   15c34:	bl	127c4 <fprintf@plt>
   15c38:	ldr	r0, [r5, #48]	; 0x30
   15c3c:	ldr	r6, [r7]
   15c40:	add	r4, r4, #1
   15c44:	sub	r0, r0, #1
   15c48:	cmp	r4, r0
   15c4c:	bcc	15c18 <__assert_fail@plt+0x319c>
   15c50:	mov	r0, #10
   15c54:	mov	r1, r6
   15c58:	bl	12914 <fputc@plt>
   15c5c:	b	15a48 <__assert_fail@plt+0x2fcc>
   15c60:	ldr	r0, [sl]
   15c64:	movw	r1, #30037	; 0x7555
   15c68:	mov	r2, r6
   15c6c:	mov	r3, r4
   15c70:	movt	r1, #4
   15c74:	bl	127c4 <fprintf@plt>
   15c78:	b	15ba8 <__assert_fail@plt+0x312c>
   15c7c:	bl	127d0 <__errno_location@plt>
   15c80:	ldr	r4, [r0]
   15c84:	movw	r1, #29890	; 0x74c2
   15c88:	mov	r0, #0
   15c8c:	mov	r2, #5
   15c90:	movt	r1, #4
   15c94:	bl	1253c <dcgettext@plt>
   15c98:	mov	r2, r0
   15c9c:	mov	r0, #1
   15ca0:	mov	r1, r4
   15ca4:	bl	12674 <error@plt>
   15ca8:	ldr	r6, [r5, #104]	; 0x68
   15cac:	cmp	r6, #0
   15cb0:	bne	15cd4 <__assert_fail@plt+0x3258>
   15cb4:	movw	r0, #29902	; 0x74ce
   15cb8:	movw	r1, #29765	; 0x7445
   15cbc:	movw	r3, #29929	; 0x74e9
   15cc0:	movw	r2, #321	; 0x141
   15cc4:	movt	r0, #4
   15cc8:	movt	r1, #4
   15ccc:	movt	r3, #4
   15cd0:	bl	12a7c <__assert_fail@plt>
   15cd4:	ldrb	r0, [r5, #100]	; 0x64
   15cd8:	mov	r5, #1
   15cdc:	cmp	r0, #0
   15ce0:	beq	15d84 <__assert_fail@plt+0x3308>
   15ce4:	movw	r0, #30160	; 0x75d0
   15ce8:	mov	r5, #0
   15cec:	movt	r0, #4
   15cf0:	vldr	d16, [r0]
   15cf4:	mov	r0, #108	; 0x6c
   15cf8:	strh	r0, [sp, #16]
   15cfc:	mov	r0, #0
   15d00:	vstr	d16, [sp, #8]
   15d04:	bl	12a34 <close@plt>
   15d08:	cmn	r0, #1
   15d0c:	bgt	15d40 <__assert_fail@plt+0x32c4>
   15d10:	bl	127d0 <__errno_location@plt>
   15d14:	ldr	r4, [r0]
   15d18:	movw	r1, #30099	; 0x7593
   15d1c:	mov	r0, #0
   15d20:	mov	r2, #5
   15d24:	movt	r1, #4
   15d28:	bl	1253c <dcgettext@plt>
   15d2c:	mov	r2, r0
   15d30:	mov	r0, #0
   15d34:	mov	r1, r4
   15d38:	bl	12674 <error@plt>
   15d3c:	b	15d84 <__assert_fail@plt+0x3308>
   15d40:	add	r0, sp, #8
   15d44:	mov	r1, #131072	; 0x20000
   15d48:	bl	22960 <__assert_fail@plt+0xfee4>
   15d4c:	mov	r5, #1
   15d50:	cmn	r0, #1
   15d54:	bgt	15d84 <__assert_fail@plt+0x3308>
   15d58:	bl	127d0 <__errno_location@plt>
   15d5c:	ldr	r4, [r0]
   15d60:	add	r1, sp, #8
   15d64:	mov	r0, #0
   15d68:	bl	19994 <__assert_fail@plt+0x6f18>
   15d6c:	movw	r2, #52175	; 0xcbcf
   15d70:	mov	r3, r0
   15d74:	mov	r0, #0
   15d78:	mov	r1, r4
   15d7c:	movt	r2, #4
   15d80:	bl	12674 <error@plt>
   15d84:	mov	r0, r6
   15d88:	bl	2cbc0 <__assert_fail@plt+0x1a144>
   15d8c:	cmp	r0, #0
   15d90:	bne	15dcc <__assert_fail@plt+0x3350>
   15d94:	cmp	r5, #0
   15d98:	beq	15e38 <__assert_fail@plt+0x33bc>
   15d9c:	bl	20e4c <__assert_fail@plt+0xe3d0>
   15da0:	cmp	r0, #0
   15da4:	beq	15dac <__assert_fail@plt+0x3330>
   15da8:	bl	20e6c <__assert_fail@plt+0xe3f0>
   15dac:	mov	r0, r8
   15db0:	bl	206d4 <__assert_fail@plt+0xdc58>
   15db4:	cmp	r0, #0
   15db8:	beq	15e40 <__assert_fail@plt+0x33c4>
   15dbc:	bl	127d0 <__errno_location@plt>
   15dc0:	mov	r1, #7
   15dc4:	str	r1, [r0]
   15dc8:	b	15e50 <__assert_fail@plt+0x33d4>
   15dcc:	bl	127d0 <__errno_location@plt>
   15dd0:	ldr	r4, [r0]
   15dd4:	movw	r1, #30127	; 0x75af
   15dd8:	mov	r0, #0
   15ddc:	mov	r2, #5
   15de0:	movt	r1, #4
   15de4:	bl	1253c <dcgettext@plt>
   15de8:	mov	r2, r0
   15dec:	ldr	r0, [r6]
   15df0:	cmn	r0, #1
   15df4:	bgt	15e1c <__assert_fail@plt+0x33a0>
   15df8:	ldr	r0, [r6, #4]
   15dfc:	movw	r1, #34847	; 0x881f
   15e00:	movw	r3, #42360	; 0xa578
   15e04:	movt	r1, #4
   15e08:	movt	r3, #4
   15e0c:	cmp	r0, #0
   15e10:	moveq	r3, r1
   15e14:	moveq	r0, r1
   15e18:	b	15e28 <__assert_fail@plt+0x33ac>
   15e1c:	movw	r3, #34847	; 0x881f
   15e20:	movt	r3, #4
   15e24:	mov	r0, r3
   15e28:	str	r0, [sp]
   15e2c:	mov	r0, #0
   15e30:	mov	r1, r4
   15e34:	bl	12674 <error@plt>
   15e38:	mov	r0, #1
   15e3c:	bl	124ac <_exit@plt>
   15e40:	ldr	r0, [r8]
   15e44:	mov	r1, r8
   15e48:	bl	124c4 <execvp@plt>
   15e4c:	bl	127d0 <__errno_location@plt>
   15e50:	ldr	r1, [r8]
   15e54:	ldr	r4, [r0]
   15e58:	mov	r0, #0
   15e5c:	bl	19994 <__assert_fail@plt+0x6f18>
   15e60:	movw	r2, #52175	; 0xcbcf
   15e64:	mov	r3, r0
   15e68:	mov	r0, #0
   15e6c:	mov	r1, r4
   15e70:	movt	r2, #4
   15e74:	bl	12674 <error@plt>
   15e78:	mov	r0, #1
   15e7c:	bl	124ac <_exit@plt>
   15e80:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15e84:	add	fp, sp, #24
   15e88:	movw	r8, #54640	; 0xd570
   15e8c:	mov	r5, r0
   15e90:	mov	r4, r1
   15e94:	cmp	r1, #0
   15e98:	movt	r8, #5
   15e9c:	movwne	r4, #16
   15ea0:	ldr	r0, [r8]
   15ea4:	cmp	r0, #0
   15ea8:	beq	15ef0 <__assert_fail@plt+0x3474>
   15eac:	movw	r6, #54644	; 0xd574
   15eb0:	mov	r7, #0
   15eb4:	movt	r6, #5
   15eb8:	ldr	r0, [r6]
   15ebc:	mov	r2, r4
   15ec0:	ldr	r1, [r0, r7, lsl #2]
   15ec4:	mov	r0, r5
   15ec8:	bl	12698 <fnmatch@plt>
   15ecc:	cmp	r0, #0
   15ed0:	moveq	r0, #1
   15ed4:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   15ed8:	ldr	r0, [r8]
   15edc:	add	r7, r7, #1
   15ee0:	cmp	r7, r0
   15ee4:	movcs	r0, #0
   15ee8:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   15eec:	b	15eb8 <__assert_fail@plt+0x343c>
   15ef0:	movw	r1, #31476	; 0x7af4
   15ef4:	mov	r0, r5
   15ef8:	mov	r2, r4
   15efc:	movt	r1, #4
   15f00:	bl	12698 <fnmatch@plt>
   15f04:	clz	r0, r0
   15f08:	lsr	r0, r0, #5
   15f0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15f10:	ldr	r3, [r1, #36]	; 0x24
   15f14:	ldr	r2, [r1, #4]
   15f18:	mov	ip, r0
   15f1c:	cmp	r3, #0
   15f20:	beq	15f34 <__assert_fail@plt+0x34b8>
   15f24:	movw	r1, #30170	; 0x75da
   15f28:	mov	r0, ip
   15f2c:	movt	r1, #4
   15f30:	b	127c4 <fprintf@plt>
   15f34:	mov	r0, r2
   15f38:	mov	r1, ip
   15f3c:	b	12a10 <fputs@plt>
   15f40:	movw	r0, #54648	; 0xd578
   15f44:	movt	r0, #5
   15f48:	ldr	r0, [r0]
   15f4c:	bx	lr
   15f50:	push	{r4, sl, fp, lr}
   15f54:	add	fp, sp, #8
   15f58:	cmp	r0, #0
   15f5c:	beq	1611c <__assert_fail@plt+0x36a0>
   15f60:	mov	r4, r0
   15f64:	ldr	r0, [r0, #160]	; 0xa0
   15f68:	cmp	r0, #0
   15f6c:	blne	15f50 <__assert_fail@plt+0x34d4>
   15f70:	ldr	r0, [r4, #156]	; 0x9c
   15f74:	cmp	r0, #0
   15f78:	blne	15f50 <__assert_fail@plt+0x34d4>
   15f7c:	ldr	r0, [r4, #8]
   15f80:	cmp	r0, #5
   15f84:	bhi	1613c <__assert_fail@plt+0x36c0>
   15f88:	add	r1, pc, #0
   15f8c:	ldr	pc, [r1, r0, lsl #2]
   15f90:	andeq	r5, r1, r8, lsr #31
   15f94:	muleq	r1, r4, r0
   15f98:	andeq	r5, r1, r4, ror #31
   15f9c:	andeq	r6, r1, r8, lsr r0
   15fa0:	andeq	r6, r1, ip, asr r1
   15fa4:	andeq	r6, r1, ip, ror r1
   15fa8:	ldr	r0, [r4, #160]	; 0xa0
   15fac:	cmp	r0, #0
   15fb0:	bne	1619c <__assert_fail@plt+0x3720>
   15fb4:	ldr	r0, [r4, #156]	; 0x9c
   15fb8:	cmp	r0, #0
   15fbc:	vldreq	s0, [r4, #28]
   15fc0:	popeq	{r4, sl, fp, pc}
   15fc4:	movw	r0, #30314	; 0x766a
   15fc8:	movw	r1, #30186	; 0x75ea
   15fcc:	movw	r3, #30193	; 0x75f1
   15fd0:	movw	r2, #1170	; 0x492
   15fd4:	movt	r0, #4
   15fd8:	movt	r1, #4
   15fdc:	movt	r3, #4
   15fe0:	bl	12a7c <__assert_fail@plt>
   15fe4:	ldr	r0, [r4]
   15fe8:	movw	r1, #18044	; 0x467c
   15fec:	movt	r1, #1
   15ff0:	cmp	r0, r1
   15ff4:	bne	161bc <__assert_fail@plt+0x3740>
   15ff8:	ldr	r0, [r4, #156]	; 0x9c
   15ffc:	cmp	r0, #0
   16000:	ldreq	r0, [r4, #160]	; 0xa0
   16004:	vmoveq.f32	s2, #112	; 0x3f800000  1.0
   16008:	vldreq	s0, [r0, #28]
   1600c:	vsubeq.f32	s0, s2, s0
   16010:	vstreq	s0, [r4, #28]
   16014:	popeq	{r4, sl, fp, pc}
   16018:	movw	r0, #30314	; 0x766a
   1601c:	movw	r1, #30186	; 0x75ea
   16020:	movw	r3, #30193	; 0x75f1
   16024:	movw	r2, #1181	; 0x49d
   16028:	movt	r0, #4
   1602c:	movt	r1, #4
   16030:	movt	r3, #4
   16034:	bl	12a7c <__assert_fail@plt>
   16038:	ldr	r0, [r4]
   1603c:	movw	r1, #15600	; 0x3cf0
   16040:	movt	r1, #1
   16044:	cmp	r0, r1
   16048:	beq	160d0 <__assert_fail@plt+0x3654>
   1604c:	movw	r1, #15992	; 0x3e78
   16050:	movt	r1, #1
   16054:	cmp	r0, r1
   16058:	beq	160f8 <__assert_fail@plt+0x367c>
   1605c:	movw	r1, #18908	; 0x49dc
   16060:	movt	r1, #1
   16064:	cmp	r0, r1
   16068:	bne	161fc <__assert_fail@plt+0x3780>
   1606c:	ldr	r0, [r4, #160]	; 0xa0
   16070:	vmov.f32	s0, #112	; 0x3f800000  1.0
   16074:	vmov.f32	s2, s0
   16078:	cmp	r0, #0
   1607c:	vldrne	s2, [r0, #28]
   16080:	ldr	r0, [r4, #156]	; 0x9c
   16084:	cmp	r0, #0
   16088:	vldrne	s0, [r0, #28]
   1608c:	vadd.f32	s0, s2, s0
   16090:	b	160fc <__assert_fail@plt+0x3680>
   16094:	ldr	r0, [r4, #160]	; 0xa0
   16098:	cmp	r0, #0
   1609c:	bne	161dc <__assert_fail@plt+0x3760>
   160a0:	ldr	r0, [r4, #156]	; 0x9c
   160a4:	cmp	r0, #0
   160a8:	vldreq	s0, [r4, #28]
   160ac:	popeq	{r4, sl, fp, pc}
   160b0:	movw	r0, #30314	; 0x766a
   160b4:	movw	r1, #30186	; 0x75ea
   160b8:	movw	r3, #30193	; 0x75f1
   160bc:	movw	r2, #1175	; 0x497
   160c0:	movt	r0, #4
   160c4:	movt	r1, #4
   160c8:	movt	r3, #4
   160cc:	bl	12a7c <__assert_fail@plt>
   160d0:	ldr	r0, [r4, #160]	; 0xa0
   160d4:	vmov.f32	s0, #112	; 0x3f800000  1.0
   160d8:	vmov.f32	s2, s0
   160dc:	cmp	r0, #0
   160e0:	vldrne	s2, [r0, #28]
   160e4:	ldr	r0, [r4, #156]	; 0x9c
   160e8:	cmp	r0, #0
   160ec:	vldrne	s0, [r0, #28]
   160f0:	vmul.f32	s0, s2, s0
   160f4:	b	160fc <__assert_fail@plt+0x3680>
   160f8:	vmov.f32	s0, #112	; 0x3f800000  1.0
   160fc:	vldr	s2, [pc, #280]	; 1621c <__assert_fail@plt+0x37a0>
   16100:	vmov.f32	s4, #112	; 0x3f800000  1.0
   16104:	vcmpe.f32	s0, s4
   16108:	vmrs	APSR_nzcv, fpscr
   1610c:	vmax.f32	d1, d0, d1
   16110:	vselgt.f32	s0, s4, s2
   16114:	vstr	s0, [r4, #28]
   16118:	pop	{r4, sl, fp, pc}
   1611c:	movw	r0, #30176	; 0x75e0
   16120:	movw	r1, #30186	; 0x75ea
   16124:	movw	r3, #30193	; 0x75f1
   16128:	movw	r2, #1156	; 0x484
   1612c:	movt	r0, #4
   16130:	movt	r1, #4
   16134:	movt	r3, #4
   16138:	bl	12a7c <__assert_fail@plt>
   1613c:	movw	r0, #32073	; 0x7d49
   16140:	movw	r1, #30186	; 0x75ea
   16144:	movw	r3, #30193	; 0x75f1
   16148:	mov	r2, #1216	; 0x4c0
   1614c:	movt	r0, #4
   16150:	movt	r1, #4
   16154:	movt	r3, #4
   16158:	bl	12a7c <__assert_fail@plt>
   1615c:	movw	r0, #30268	; 0x763c
   16160:	movw	r1, #30186	; 0x75ea
   16164:	movw	r3, #30193	; 0x75f1
   16168:	movw	r2, #1164	; 0x48c
   1616c:	movt	r0, #4
   16170:	movt	r1, #4
   16174:	movt	r3, #4
   16178:	bl	12a7c <__assert_fail@plt>
   1617c:	movw	r0, #30243	; 0x7623
   16180:	movw	r1, #30186	; 0x75ea
   16184:	movw	r3, #30193	; 0x75f1
   16188:	movw	r2, #1163	; 0x48b
   1618c:	movt	r0, #4
   16190:	movt	r1, #4
   16194:	movt	r3, #4
   16198:	bl	12a7c <__assert_fail@plt>
   1619c:	movw	r0, #30292	; 0x7654
   161a0:	movw	r1, #30186	; 0x75ea
   161a4:	movw	r3, #30193	; 0x75f1
   161a8:	movw	r2, #1169	; 0x491
   161ac:	movt	r0, #4
   161b0:	movt	r1, #4
   161b4:	movt	r3, #4
   161b8:	bl	12a7c <__assert_fail@plt>
   161bc:	movw	r0, #30335	; 0x767f
   161c0:	movw	r1, #30186	; 0x75ea
   161c4:	movw	r3, #30193	; 0x75f1
   161c8:	movw	r2, #1180	; 0x49c
   161cc:	movt	r0, #4
   161d0:	movt	r1, #4
   161d4:	movt	r3, #4
   161d8:	bl	12a7c <__assert_fail@plt>
   161dc:	movw	r0, #30292	; 0x7654
   161e0:	movw	r1, #30186	; 0x75ea
   161e4:	movw	r3, #30193	; 0x75f1
   161e8:	movw	r2, #1174	; 0x496
   161ec:	movt	r0, #4
   161f0:	movt	r1, #4
   161f4:	movt	r3, #4
   161f8:	bl	12a7c <__assert_fail@plt>
   161fc:	movw	r0, #32073	; 0x7d49
   16200:	movw	r1, #30186	; 0x75ea
   16204:	movw	r3, #30193	; 0x75f1
   16208:	movw	r2, #1204	; 0x4b4
   1620c:	movt	r0, #4
   16210:	movt	r1, #4
   16214:	movt	r3, #4
   16218:	bl	12a7c <__assert_fail@plt>
   1621c:	andeq	r0, r0, r0
   16220:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16224:	add	fp, sp, #28
   16228:	sub	sp, sp, #28
   1622c:	mov	r6, r0
   16230:	str	r0, [sp, #24]
   16234:	mov	r4, r1
   16238:	add	r0, r1, r2, lsl #2
   1623c:	movw	r1, #54644	; 0xd574
   16240:	movw	r7, #54652	; 0xd57c
   16244:	str	r2, [sp, #16]
   16248:	movt	r1, #5
   1624c:	movt	r7, #5
   16250:	cmp	r6, r2
   16254:	str	r0, [r1]
   16258:	mov	r0, #0
   1625c:	str	r0, [r7]
   16260:	ble	162a0 <__assert_fail@plt+0x3824>
   16264:	movw	r8, #54640	; 0xd570
   16268:	mov	r5, r2
   1626c:	movt	r8, #5
   16270:	ldr	r0, [r4, r5, lsl #2]
   16274:	mov	r1, #1
   16278:	bl	19104 <__assert_fail@plt+0x6688>
   1627c:	cmp	r0, #0
   16280:	bne	162a0 <__assert_fail@plt+0x3824>
   16284:	ldr	r0, [r8]
   16288:	add	r5, r5, #1
   1628c:	cmp	r5, r6
   16290:	str	r5, [sp, #16]
   16294:	add	r0, r0, #1
   16298:	str	r0, [r8]
   1629c:	blt	16270 <__assert_fail@plt+0x37f4>
   162a0:	movw	r8, #42435	; 0xa5c3
   162a4:	movt	r8, #4
   162a8:	mov	r0, r8
   162ac:	bl	1bfe0 <__assert_fail@plt+0x9564>
   162b0:	mov	r6, r0
   162b4:	movw	r0, #32153	; 0x7d99
   162b8:	movt	r0, #4
   162bc:	bl	1bfe0 <__assert_fail@plt+0x9564>
   162c0:	mov	r5, r0
   162c4:	movw	r0, #30664	; 0x77c8
   162c8:	movt	r0, #4
   162cc:	bl	1bfe0 <__assert_fail@plt+0x9564>
   162d0:	cmp	r6, #0
   162d4:	beq	1673c <__assert_fail@plt+0x3cc0>
   162d8:	cmp	r5, #0
   162dc:	beq	1675c <__assert_fail@plt+0x3ce0>
   162e0:	cmp	r0, #0
   162e4:	str	r5, [sp, #8]
   162e8:	str	r0, [sp, #12]
   162ec:	beq	1677c <__assert_fail@plt+0x3d00>
   162f0:	add	r2, sp, #24
   162f4:	mov	r0, r6
   162f8:	mov	r1, r4
   162fc:	bl	1c178 <__assert_fail@plt+0x96fc>
   16300:	movw	sl, #54656	; 0xd580
   16304:	mov	r0, #1
   16308:	movt	sl, #5
   1630c:	ldr	r2, [sl]
   16310:	str	r8, [r2, #4]
   16314:	ldr	r3, [r7]
   16318:	strb	r0, [r3, #33]	; 0x21
   1631c:	mov	r0, r4
   16320:	ldr	r1, [sp, #24]
   16324:	bl	1bfc8 <__assert_fail@plt+0x954c>
   16328:	ldr	r0, [sl]
   1632c:	bl	15510 <__assert_fail@plt+0x2a94>
   16330:	ldr	r1, [sp, #24]
   16334:	ldr	r0, [sp, #16]
   16338:	cmp	r0, r1
   1633c:	bge	163e8 <__assert_fail@plt+0x396c>
   16340:	mov	r8, #0
   16344:	movw	r1, #56896	; 0xde40
   16348:	movt	r1, #5
   1634c:	strb	r8, [r1, #40]	; 0x28
   16350:	mov	r1, #0
   16354:	ldr	r0, [r4, r0, lsl #2]
   16358:	bl	19104 <__assert_fail@plt+0x6688>
   1635c:	cmp	r0, #0
   16360:	beq	16634 <__assert_fail@plt+0x3bb8>
   16364:	ldr	r0, [sp, #16]
   16368:	ldr	r6, [r4, r0, lsl #2]
   1636c:	mov	r0, r6
   16370:	bl	1bfe0 <__assert_fail@plt+0x9564>
   16374:	cmp	r0, #0
   16378:	beq	166c8 <__assert_fail@plt+0x3c4c>
   1637c:	mov	r5, r0
   16380:	ldr	r0, [r0]
   16384:	ldr	r9, [sp, #16]
   16388:	mov	r1, r4
   1638c:	add	r2, sp, #16
   16390:	cmp	r0, #4
   16394:	mov	r0, r5
   16398:	addne	r9, r9, #1
   1639c:	strne	r9, [sp, #16]
   163a0:	ldr	r3, [r5, #8]
   163a4:	blx	r3
   163a8:	cmp	r0, #0
   163ac:	beq	166ac <__assert_fail@plt+0x3c30>
   163b0:	ldr	r0, [sl]
   163b4:	str	r6, [r0, #4]
   163b8:	ldr	r1, [sp, #16]
   163bc:	cmp	r1, r9
   163c0:	streq	r8, [r0, #36]	; 0x24
   163c4:	ldrne	r1, [r4, r9, lsl #2]
   163c8:	strne	r1, [r0, #36]	; 0x24
   163cc:	bl	15510 <__assert_fail@plt+0x2a94>
   163d0:	ldr	r0, [r7]
   163d4:	bl	15510 <__assert_fail@plt+0x2a94>
   163d8:	ldr	r1, [sp, #24]
   163dc:	ldr	r0, [sp, #16]
   163e0:	cmp	r0, r1
   163e4:	blt	16344 <__assert_fail@plt+0x38c8>
   163e8:	ldr	r3, [r7]
   163ec:	ldr	r2, [sl]
   163f0:	mov	r0, r4
   163f4:	bl	1bfdc <__assert_fail@plt+0x9560>
   163f8:	ldr	r0, [r7]
   163fc:	ldr	r1, [r0, #152]	; 0x98
   16400:	cmp	r1, #0
   16404:	beq	16464 <__assert_fail@plt+0x39e8>
   16408:	mov	r0, r1
   1640c:	bl	190d8 <__assert_fail@plt+0x665c>
   16410:	cmp	r0, #0
   16414:	beq	164a4 <__assert_fail@plt+0x3a28>
   16418:	ldr	r0, [sp, #8]
   1641c:	add	r8, sp, #24
   16420:	mov	r1, r4
   16424:	mov	r2, r8
   16428:	bl	1c148 <__assert_fail@plt+0x96cc>
   1642c:	ldr	r0, [sl]
   16430:	movw	r1, #32153	; 0x7d99
   16434:	mov	r6, #1
   16438:	movt	r1, #4
   1643c:	strb	r6, [r0, #33]	; 0x21
   16440:	str	r1, [r0, #4]
   16444:	bl	15510 <__assert_fail@plt+0x2a94>
   16448:	ldr	r0, [sp, #12]
   1644c:	mov	r1, r4
   16450:	mov	r2, r8
   16454:	bl	1c1ac <__assert_fail@plt+0x9730>
   16458:	ldr	r0, [sl]
   1645c:	strb	r6, [r0, #33]	; 0x21
   16460:	b	16488 <__assert_fail@plt+0x3a0c>
   16464:	str	r1, [sl]
   16468:	str	r1, [r7]
   1646c:	str	r0, [sp, #20]
   16470:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   16474:	ldr	r0, [sp, #12]
   16478:	add	r2, sp, #24
   1647c:	mov	r1, r4
   16480:	bl	1c1ac <__assert_fail@plt+0x9730>
   16484:	ldr	r0, [sl]
   16488:	movw	r1, #30663	; 0x77c7
   1648c:	movt	r1, #4
   16490:	str	r1, [r0, #4]
   16494:	bl	15510 <__assert_fail@plt+0x2a94>
   16498:	ldr	r0, [r7]
   1649c:	bl	15510 <__assert_fail@plt+0x2a94>
   164a0:	b	164c0 <__assert_fail@plt+0x3a44>
   164a4:	ldr	r0, [r7]
   164a8:	str	r0, [sp, #20]
   164ac:	ldr	r0, [r0, #152]	; 0x98
   164b0:	str	r0, [r7]
   164b4:	bl	15510 <__assert_fail@plt+0x2a94>
   164b8:	ldr	r0, [sp, #20]
   164bc:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   164c0:	movw	r5, #56940	; 0xde6c
   164c4:	movt	r5, #5
   164c8:	ldrb	r0, [r5, #44]	; 0x2c
   164cc:	tst	r0, #9
   164d0:	bne	1656c <__assert_fail@plt+0x3af0>
   164d4:	ldr	r0, [r7]
   164d8:	bl	1bd50 <__assert_fail@plt+0x92d4>
   164dc:	ldr	r0, [r7]
   164e0:	bl	15510 <__assert_fail@plt+0x2a94>
   164e4:	ldr	r0, [r7]
   164e8:	mov	r1, #0
   164ec:	mov	r2, #0
   164f0:	str	r0, [sp, #20]
   164f4:	add	r0, sp, #20
   164f8:	bl	16810 <__assert_fail@plt+0x3d94>
   164fc:	movw	r4, #54648	; 0xd578
   16500:	movt	r4, #5
   16504:	str	r0, [r4]
   16508:	bl	15f50 <__assert_fail@plt+0x34d4>
   1650c:	ldr	r0, [sp, #20]
   16510:	cmp	r0, #0
   16514:	bne	1679c <__assert_fail@plt+0x3d20>
   16518:	ldrb	r0, [r5, #44]	; 0x2c
   1651c:	tst	r0, #9
   16520:	bne	1659c <__assert_fail@plt+0x3b20>
   16524:	ldr	r0, [r4]
   16528:	bl	16eb0 <__assert_fail@plt+0x4434>
   1652c:	mov	r0, r4
   16530:	bl	17108 <__assert_fail@plt+0x468c>
   16534:	ldr	r0, [r4]
   16538:	mov	r1, #1
   1653c:	bl	17838 <__assert_fail@plt+0x4dbc>
   16540:	ldr	r0, [r4]
   16544:	bl	178cc <__assert_fail@plt+0x4e50>
   16548:	ldr	r0, [r4]
   1654c:	mov	r1, #1
   16550:	bl	17838 <__assert_fail@plt+0x4dbc>
   16554:	ldrb	r0, [r5, #44]	; 0x2c
   16558:	tst	r0, #9
   1655c:	bne	165d0 <__assert_fail@plt+0x3b54>
   16560:	ldr	r0, [r4]
   16564:	sub	sp, fp, #28
   16568:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1656c:	movw	r4, #54600	; 0xd548
   16570:	movw	r0, #30670	; 0x77ce
   16574:	mov	r1, #16
   16578:	mov	r2, #1
   1657c:	movt	r4, #5
   16580:	movt	r0, #4
   16584:	ldr	r3, [r4]
   16588:	bl	125f0 <fwrite@plt>
   1658c:	ldr	r0, [r4]
   16590:	ldr	r1, [r7]
   16594:	bl	1520c <__assert_fail@plt+0x2790>
   16598:	b	164d4 <__assert_fail@plt+0x3a58>
   1659c:	movw	r6, #54600	; 0xd548
   165a0:	movw	r0, #32166	; 0x7da6
   165a4:	mov	r1, #11
   165a8:	mov	r2, #1
   165ac:	movt	r6, #5
   165b0:	movt	r0, #4
   165b4:	ldr	r3, [r6]
   165b8:	bl	125f0 <fwrite@plt>
   165bc:	ldr	r0, [r6]
   165c0:	ldr	r1, [r4]
   165c4:	mov	r2, #0
   165c8:	bl	16ac0 <__assert_fail@plt+0x4044>
   165cc:	b	16524 <__assert_fail@plt+0x3aa8>
   165d0:	movw	r5, #54600	; 0xd548
   165d4:	movw	r0, #30746	; 0x781a
   165d8:	mov	r1, #21
   165dc:	mov	r2, #1
   165e0:	movt	r5, #5
   165e4:	movt	r0, #4
   165e8:	ldr	r3, [r5]
   165ec:	bl	125f0 <fwrite@plt>
   165f0:	ldr	r0, [r5]
   165f4:	ldr	r1, [r4]
   165f8:	mov	r2, #0
   165fc:	bl	16ac0 <__assert_fail@plt+0x4044>
   16600:	ldr	r3, [r5]
   16604:	movw	r0, #30768	; 0x7830
   16608:	mov	r1, #24
   1660c:	mov	r2, #1
   16610:	movt	r0, #4
   16614:	bl	125f0 <fwrite@plt>
   16618:	ldr	r0, [r5]
   1661c:	ldr	r1, [r4]
   16620:	bl	152c8 <__assert_fail@plt+0x284c>
   16624:	ldr	r1, [r5]
   16628:	mov	r0, #10
   1662c:	bl	12914 <fputc@plt>
   16630:	b	16560 <__assert_fail@plt+0x3ae4>
   16634:	movw	r1, #30478	; 0x770e
   16638:	mov	r0, #0
   1663c:	mov	r2, #5
   16640:	movt	r1, #4
   16644:	bl	1253c <dcgettext@plt>
   16648:	mov	r2, r0
   1664c:	ldr	r0, [sp, #16]
   16650:	mov	r1, #0
   16654:	ldr	r3, [r4, r0, lsl #2]
   16658:	mov	r0, #0
   1665c:	bl	12674 <error@plt>
   16660:	ldr	r0, [sp, #16]
   16664:	mov	r1, #0
   16668:	ldr	r0, [r4, r0, lsl #2]
   1666c:	bl	12878 <access@plt>
   16670:	cmp	r0, #0
   16674:	bne	166a4 <__assert_fail@plt+0x3c28>
   16678:	movw	r1, #30514	; 0x7732
   1667c:	mov	r0, #0
   16680:	mov	r2, #5
   16684:	movt	r1, #4
   16688:	bl	1253c <dcgettext@plt>
   1668c:	mov	r2, r0
   16690:	ldr	r0, [sl]
   16694:	mov	r1, #0
   16698:	ldr	r3, [r0, #4]
   1669c:	mov	r0, #0
   166a0:	bl	12674 <error@plt>
   166a4:	mov	r0, #1
   166a8:	bl	12758 <exit@plt>
   166ac:	ldr	r0, [sp, #16]
   166b0:	ldr	r1, [r4, r0, lsl #2]
   166b4:	cmp	r1, #0
   166b8:	bne	166f0 <__assert_fail@plt+0x3c74>
   166bc:	movw	r1, #30638	; 0x77ae
   166c0:	movt	r1, #4
   166c4:	b	166d0 <__assert_fail@plt+0x3c54>
   166c8:	movw	r1, #30562	; 0x7762
   166cc:	movt	r1, #4
   166d0:	mov	r0, #0
   166d4:	mov	r2, #5
   166d8:	bl	1253c <dcgettext@plt>
   166dc:	mov	r2, r0
   166e0:	mov	r0, #1
   166e4:	mov	r1, #0
   166e8:	mov	r3, r6
   166ec:	bl	12674 <error@plt>
   166f0:	cmp	r0, r9
   166f4:	ldreq	r0, [r5]
   166f8:	cmpeq	r0, #4
   166fc:	beq	16730 <__assert_fail@plt+0x3cb4>
   16700:	movw	r1, #30608	; 0x7790
   16704:	mov	r0, #0
   16708:	mov	r2, #5
   1670c:	movt	r1, #4
   16710:	bl	1253c <dcgettext@plt>
   16714:	mov	r2, r0
   16718:	ldr	r0, [sp, #16]
   1671c:	ldr	r3, [r4, r0, lsl #2]
   16720:	str	r6, [sp]
   16724:	mov	r0, #1
   16728:	mov	r1, #0
   1672c:	bl	12674 <error@plt>
   16730:	movw	r1, #30585	; 0x7779
   16734:	movt	r1, #4
   16738:	b	166d0 <__assert_fail@plt+0x3c54>
   1673c:	movw	r0, #30360	; 0x7698
   16740:	movw	r1, #30186	; 0x75ea
   16744:	movw	r3, #30379	; 0x76ab
   16748:	movw	r2, #1270	; 0x4f6
   1674c:	movt	r0, #4
   16750:	movt	r1, #4
   16754:	movt	r3, #4
   16758:	bl	12a7c <__assert_fail@plt>
   1675c:	movw	r0, #30438	; 0x76e6
   16760:	movw	r1, #30186	; 0x75ea
   16764:	movw	r3, #30379	; 0x76ab
   16768:	movw	r2, #1271	; 0x4f7
   1676c:	movt	r0, #4
   16770:	movt	r1, #4
   16774:	movt	r3, #4
   16778:	bl	12a7c <__assert_fail@plt>
   1677c:	movw	r0, #30458	; 0x76fa
   16780:	movw	r1, #30186	; 0x75ea
   16784:	movw	r3, #30379	; 0x76ab
   16788:	movw	r2, #1272	; 0x4f8
   1678c:	movt	r0, #4
   16790:	movt	r1, #4
   16794:	movt	r3, #4
   16798:	bl	12a7c <__assert_fail@plt>
   1679c:	ldr	r1, [r0]
   167a0:	movw	r2, #15832	; 0x3dd8
   167a4:	movt	r2, #1
   167a8:	cmp	r1, r2
   167ac:	bne	167bc <__assert_fail@plt+0x3d40>
   167b0:	movw	r1, #31576	; 0x7b58
   167b4:	movt	r1, #4
   167b8:	b	167d0 <__assert_fail@plt+0x3d54>
   167bc:	ldr	r0, [r0, #4]
   167c0:	cmp	r0, #0
   167c4:	bne	167ec <__assert_fail@plt+0x3d70>
   167c8:	movw	r1, #30719	; 0x77ff
   167cc:	movt	r1, #4
   167d0:	mov	r0, #0
   167d4:	mov	r2, #5
   167d8:	bl	1253c <dcgettext@plt>
   167dc:	mov	r2, r0
   167e0:	mov	r0, #1
   167e4:	mov	r1, #0
   167e8:	bl	12674 <error@plt>
   167ec:	movw	r1, #30687	; 0x77df
   167f0:	mov	r0, #0
   167f4:	mov	r2, #5
   167f8:	movt	r1, #4
   167fc:	bl	1253c <dcgettext@plt>
   16800:	mov	r2, r0
   16804:	ldr	r0, [sp, #20]
   16808:	ldr	r3, [r0, #4]
   1680c:	b	16724 <__assert_fail@plt+0x3ca8>
   16810:	push	{r4, r5, r6, r7, fp, lr}
   16814:	add	fp, sp, #16
   16818:	ldr	r4, [r0]
   1681c:	cmp	r4, #0
   16820:	beq	1697c <__assert_fail@plt+0x3f00>
   16824:	mov	r5, r0
   16828:	ldr	r0, [r4, #8]
   1682c:	cmp	r0, #5
   16830:	bhi	169a0 <__assert_fail@plt+0x3f24>
   16834:	mov	r6, r1
   16838:	add	r1, pc, #0
   1683c:	ldr	pc, [r1, r0, lsl #2]
   16840:	andeq	r6, r1, ip, ror r9
   16844:	andeq	r6, r1, r8, asr r8
   16848:	andeq	r6, r1, r0, ror #16
   1684c:	andeq	r6, r1, r4, asr #19
   16850:	andeq	r6, r1, ip, lsl #17
   16854:	andeq	r6, r1, ip, lsr #19
   16858:	ldr	r2, [r4, #152]	; 0x98
   1685c:	b	168e4 <__assert_fail@plt+0x3e68>
   16860:	ldr	r0, [r4, #152]	; 0x98
   16864:	mov	r1, #4
   16868:	mov	r2, r4
   1686c:	str	r0, [r5]
   16870:	mov	r0, r5
   16874:	bl	16810 <__assert_fail@plt+0x3d94>
   16878:	str	r0, [r4, #160]	; 0xa0
   1687c:	ldr	r2, [r5]
   16880:	cmp	r2, #0
   16884:	bne	168f0 <__assert_fail@plt+0x3e74>
   16888:	b	16974 <__assert_fail@plt+0x3ef8>
   1688c:	ldr	r0, [r4, #152]	; 0x98
   16890:	cmp	r0, #0
   16894:	beq	169d0 <__assert_fail@plt+0x3f54>
   16898:	ldrb	r1, [r0, #33]	; 0x21
   1689c:	cmp	r1, #0
   168a0:	bne	169d0 <__assert_fail@plt+0x3f54>
   168a4:	str	r0, [r5]
   168a8:	ldr	r0, [r0, #8]
   168ac:	cmp	r0, #5
   168b0:	beq	16a48 <__assert_fail@plt+0x3fcc>
   168b4:	mov	r0, r5
   168b8:	mov	r1, #0
   168bc:	mov	r2, r4
   168c0:	bl	16810 <__assert_fail@plt+0x3d94>
   168c4:	mov	r4, r0
   168c8:	ldr	r0, [r5]
   168cc:	cmp	r0, #0
   168d0:	beq	169f0 <__assert_fail@plt+0x3f74>
   168d4:	ldr	r1, [r0, #8]
   168d8:	cmp	r1, #5
   168dc:	bne	169f0 <__assert_fail@plt+0x3f74>
   168e0:	ldr	r2, [r0, #152]	; 0x98
   168e4:	str	r2, [r5]
   168e8:	cmp	r2, #0
   168ec:	beq	16974 <__assert_fail@plt+0x3ef8>
   168f0:	ldr	r0, [r2, #12]
   168f4:	cmp	r0, r6
   168f8:	ble	16974 <__assert_fail@plt+0x3ef8>
   168fc:	ldr	r0, [r2, #8]
   16900:	cmp	r0, #5
   16904:	beq	1697c <__assert_fail@plt+0x3f00>
   16908:	ldr	r0, [r2, #12]
   1690c:	cmp	r0, r6
   16910:	ble	1696c <__assert_fail@plt+0x3ef0>
   16914:	ldr	r0, [r2, #8]
   16918:	cmp	r0, #5
   1691c:	bhi	169fc <__assert_fail@plt+0x3f80>
   16920:	add	r1, pc, #0
   16924:	ldr	pc, [r1, r0, lsl #2]
   16928:	andeq	r6, r1, ip, ror r9
   1692c:	andeq	r6, r1, ip, ror r9
   16930:	andeq	r6, r1, ip, ror r9
   16934:	andeq	r6, r1, r0, asr #18
   16938:	andeq	r6, r1, ip, ror r9
   1693c:	andeq	r6, r1, ip, ror #18
   16940:	str	r4, [r2, #156]	; 0x9c
   16944:	ldr	r4, [r5]
   16948:	ldr	r0, [r4, #152]	; 0x98
   1694c:	str	r0, [r5]
   16950:	mov	r0, r5
   16954:	ldrsh	r1, [r4, #12]
   16958:	bl	16810 <__assert_fail@plt+0x3d94>
   1695c:	str	r0, [r4, #160]	; 0xa0
   16960:	ldr	r2, [r5]
   16964:	cmp	r2, #0
   16968:	bne	16908 <__assert_fail@plt+0x3e8c>
   1696c:	cmp	r4, #0
   16970:	beq	1697c <__assert_fail@plt+0x3f00>
   16974:	mov	r0, r4
   16978:	pop	{r4, r5, r6, r7, fp, pc}
   1697c:	movw	r1, #31305	; 0x7a49
   16980:	movt	r1, #4
   16984:	mov	r0, #0
   16988:	mov	r2, #5
   1698c:	bl	1253c <dcgettext@plt>
   16990:	mov	r2, r0
   16994:	mov	r0, #1
   16998:	mov	r1, #0
   1699c:	bl	12674 <error@plt>
   169a0:	movw	r1, #31844	; 0x7c64
   169a4:	movt	r1, #4
   169a8:	b	16984 <__assert_fail@plt+0x3f08>
   169ac:	mov	r7, r2
   169b0:	cmp	r2, #0
   169b4:	bne	16a20 <__assert_fail@plt+0x3fa4>
   169b8:	movw	r1, #31405	; 0x7aad
   169bc:	movt	r1, #4
   169c0:	b	169d8 <__assert_fail@plt+0x3f5c>
   169c4:	movw	r1, #31324	; 0x7a5c
   169c8:	movt	r1, #4
   169cc:	b	169d8 <__assert_fail@plt+0x3f5c>
   169d0:	movw	r1, #31598	; 0x7b6e
   169d4:	movt	r1, #4
   169d8:	mov	r0, #0
   169dc:	mov	r2, #5
   169e0:	bl	1253c <dcgettext@plt>
   169e4:	ldr	r3, [r4, #4]
   169e8:	mov	r2, r0
   169ec:	b	16ab4 <__assert_fail@plt+0x4038>
   169f0:	movw	r1, #31763	; 0x7c13
   169f4:	movt	r1, #4
   169f8:	b	16984 <__assert_fail@plt+0x3f08>
   169fc:	movw	r1, #31877	; 0x7c85
   16a00:	mov	r0, #0
   16a04:	mov	r2, #5
   16a08:	movt	r1, #4
   16a0c:	bl	1253c <dcgettext@plt>
   16a10:	mov	r2, r0
   16a14:	ldr	r0, [r5]
   16a18:	ldr	r3, [r0, #8]
   16a1c:	b	16ab4 <__assert_fail@plt+0x4038>
   16a20:	ldr	r1, [r7, #8]
   16a24:	ldrb	r0, [r4, #33]	; 0x21
   16a28:	bic	r1, r1, #1
   16a2c:	cmp	r1, #2
   16a30:	bne	16a60 <__assert_fail@plt+0x3fe4>
   16a34:	cmp	r0, #0
   16a38:	bne	16a74 <__assert_fail@plt+0x3ff8>
   16a3c:	movw	r1, #31478	; 0x7af6
   16a40:	movt	r1, #4
   16a44:	b	16a7c <__assert_fail@plt+0x4000>
   16a48:	ldrb	r0, [r4, #33]	; 0x21
   16a4c:	cmp	r0, #0
   16a50:	bne	16a94 <__assert_fail@plt+0x4018>
   16a54:	movw	r1, #31708	; 0x7bdc
   16a58:	movt	r1, #4
   16a5c:	b	16984 <__assert_fail@plt+0x3f08>
   16a60:	cmp	r0, #0
   16a64:	bne	16a74 <__assert_fail@plt+0x3ff8>
   16a68:	movw	r1, #31556	; 0x7b44
   16a6c:	movt	r1, #4
   16a70:	b	16984 <__assert_fail@plt+0x3f08>
   16a74:	movw	r1, #31522	; 0x7b22
   16a78:	movt	r1, #4
   16a7c:	mov	r0, #0
   16a80:	mov	r2, #5
   16a84:	bl	1253c <dcgettext@plt>
   16a88:	ldr	r3, [r7, #4]
   16a8c:	mov	r2, r0
   16a90:	b	16ab4 <__assert_fail@plt+0x4038>
   16a94:	movw	r1, #31405	; 0x7aad
   16a98:	mov	r0, #0
   16a9c:	mov	r2, #5
   16aa0:	movt	r1, #4
   16aa4:	bl	1253c <dcgettext@plt>
   16aa8:	mov	r2, r0
   16aac:	ldr	r0, [r5]
   16ab0:	ldr	r3, [r0, #4]
   16ab4:	mov	r0, #1
   16ab8:	mov	r1, #0
   16abc:	bl	12674 <error@plt>
   16ac0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ac4:	add	fp, sp, #28
   16ac8:	sub	sp, sp, #12
   16acc:	cmp	r1, #0
   16ad0:	beq	16e78 <__assert_fail@plt+0x43fc>
   16ad4:	movw	r7, #31149	; 0x79ad
   16ad8:	movw	r9, #53908	; 0xd294
   16adc:	mov	r5, r2
   16ae0:	mov	sl, r1
   16ae4:	mov	r4, r0
   16ae8:	movt	r7, #4
   16aec:	movt	r9, #5
   16af0:	cmp	r5, #1
   16af4:	blt	16b1c <__assert_fail@plt+0x40a0>
   16af8:	mov	r6, #0
   16afc:	mov	r0, r7
   16b00:	mov	r1, #4
   16b04:	mov	r2, #1
   16b08:	mov	r3, r4
   16b0c:	bl	125f0 <fwrite@plt>
   16b10:	add	r6, r6, #1
   16b14:	cmp	r5, r6
   16b18:	bne	16afc <__assert_fail@plt+0x4080>
   16b1c:	movw	r0, #31154	; 0x79b2
   16b20:	mov	r1, #6
   16b24:	mov	r2, #1
   16b28:	mov	r3, r4
   16b2c:	movt	r0, #4
   16b30:	bl	125f0 <fwrite@plt>
   16b34:	ldr	r3, [sl, #36]	; 0x24
   16b38:	ldr	r2, [sl, #4]
   16b3c:	cmp	r3, #0
   16b40:	beq	16b58 <__assert_fail@plt+0x40dc>
   16b44:	movw	r1, #30170	; 0x75da
   16b48:	mov	r0, r4
   16b4c:	movt	r1, #4
   16b50:	bl	127c4 <fprintf@plt>
   16b54:	b	16b64 <__assert_fail@plt+0x40e8>
   16b58:	mov	r0, r2
   16b5c:	mov	r1, r4
   16b60:	bl	12a10 <fputs@plt>
   16b64:	ldrh	r0, [sl, #8]
   16b68:	movw	r2, #32864	; 0x8060
   16b6c:	mov	r1, #6
   16b70:	movw	r6, #34847	; 0x881f
   16b74:	movt	r2, #4
   16b78:	movt	r6, #4
   16b7c:	cmp	r0, #6
   16b80:	movcs	r0, r1
   16b84:	add	r0, r2, r0, lsl #3
   16b88:	ldr	r2, [r0, #4]
   16b8c:	ldrh	r0, [sl, #12]
   16b90:	cmp	r0, #6
   16b94:	movcs	r0, r1
   16b98:	movw	r1, #32920	; 0x8098
   16b9c:	movt	r1, #4
   16ba0:	add	r0, r1, r0, lsl #3
   16ba4:	movw	r1, #31161	; 0x79b9
   16ba8:	ldr	r3, [r0, #4]
   16bac:	mov	r0, r4
   16bb0:	movt	r1, #4
   16bb4:	bl	127c4 <fprintf@plt>
   16bb8:	ldr	r0, [sl, #24]
   16bbc:	ldr	r2, [r9]
   16bc0:	mov	r1, #0
   16bc4:	cmp	r2, r0
   16bc8:	beq	16c74 <__assert_fail@plt+0x41f8>
   16bcc:	ldr	r2, [r9, #8]
   16bd0:	mov	r1, #1
   16bd4:	cmp	r2, r0
   16bd8:	beq	16c74 <__assert_fail@plt+0x41f8>
   16bdc:	ldr	r2, [r9, #16]
   16be0:	mov	r1, #2
   16be4:	cmp	r2, r0
   16be8:	beq	16c74 <__assert_fail@plt+0x41f8>
   16bec:	ldr	r2, [r9, #24]
   16bf0:	mov	r1, #3
   16bf4:	cmp	r2, r0
   16bf8:	beq	16c74 <__assert_fail@plt+0x41f8>
   16bfc:	ldr	r2, [r9, #32]
   16c00:	mov	r1, #4
   16c04:	cmp	r2, r0
   16c08:	beq	16c74 <__assert_fail@plt+0x41f8>
   16c0c:	ldr	r2, [r9, #40]	; 0x28
   16c10:	mov	r1, #5
   16c14:	cmp	r2, r0
   16c18:	beq	16c74 <__assert_fail@plt+0x41f8>
   16c1c:	ldr	r2, [r9, #48]	; 0x30
   16c20:	mov	r1, #6
   16c24:	cmp	r2, r0
   16c28:	beq	16c74 <__assert_fail@plt+0x41f8>
   16c2c:	ldr	r2, [r9, #56]	; 0x38
   16c30:	mov	r1, #7
   16c34:	cmp	r2, r0
   16c38:	beq	16c74 <__assert_fail@plt+0x41f8>
   16c3c:	ldr	r2, [r9, #64]	; 0x40
   16c40:	mov	r1, #8
   16c44:	cmp	r2, r0
   16c48:	beq	16c74 <__assert_fail@plt+0x41f8>
   16c4c:	ldr	r2, [r9, #72]	; 0x48
   16c50:	mov	r1, #9
   16c54:	cmp	r2, r0
   16c58:	beq	16c74 <__assert_fail@plt+0x41f8>
   16c5c:	ldr	r2, [r9, #80]	; 0x50
   16c60:	mov	r1, #10
   16c64:	cmp	r2, r0
   16c68:	movw	r2, #32828	; 0x803c
   16c6c:	movt	r2, #4
   16c70:	bne	16c7c <__assert_fail@plt+0x4200>
   16c74:	add	r0, r9, r1, lsl #3
   16c78:	ldr	r2, [r0, #4]
   16c7c:	ldrb	r0, [sl, #16]
   16c80:	vldr	s0, [sl, #28]
   16c84:	movw	r1, #31227	; 0x79fb
   16c88:	movt	r1, #4
   16c8c:	cmp	r0, #0
   16c90:	mov	r0, r6
   16c94:	vcvt.f64.f32	d16, s0
   16c98:	moveq	r0, r1
   16c9c:	movw	r1, #31179	; 0x79cb
   16ca0:	vstr	d16, [sp]
   16ca4:	str	r0, [sp, #8]
   16ca8:	mov	r0, r4
   16cac:	movt	r1, #4
   16cb0:	bl	127c4 <fprintf@plt>
   16cb4:	ldrb	r0, [sl, #18]
   16cb8:	cmp	r0, #0
   16cbc:	bne	16cd8 <__assert_fail@plt+0x425c>
   16cc0:	ldrb	r0, [sl, #19]
   16cc4:	cmp	r0, #0
   16cc8:	bne	16cd8 <__assert_fail@plt+0x425c>
   16ccc:	ldrb	r0, [sl, #20]
   16cd0:	cmp	r0, #0
   16cd4:	beq	16d7c <__assert_fail@plt+0x4300>
   16cd8:	movw	r0, #31231	; 0x79ff
   16cdc:	mov	r1, #6
   16ce0:	mov	r2, #1
   16ce4:	mov	r3, r4
   16ce8:	movt	r0, #4
   16cec:	bl	125f0 <fwrite@plt>
   16cf0:	ldrb	r0, [sl, #18]
   16cf4:	cmp	r0, #0
   16cf8:	beq	16d1c <__assert_fail@plt+0x42a0>
   16cfc:	movw	r0, #38980	; 0x9844
   16d00:	mov	r1, #4
   16d04:	mov	r2, #1
   16d08:	mov	r3, r4
   16d0c:	mov	r8, #1
   16d10:	movt	r0, #4
   16d14:	bl	125f0 <fwrite@plt>
   16d18:	b	16d20 <__assert_fail@plt+0x42a4>
   16d1c:	mov	r8, #0
   16d20:	ldrb	r0, [sl, #20]
   16d24:	cmp	r0, #0
   16d28:	beq	16d50 <__assert_fail@plt+0x42d4>
   16d2c:	movw	r2, #31246	; 0x7a0e
   16d30:	movw	r1, #31238	; 0x7a06
   16d34:	cmp	r8, #0
   16d38:	mov	r0, r4
   16d3c:	movt	r2, #4
   16d40:	movt	r1, #4
   16d44:	moveq	r2, r6
   16d48:	bl	127c4 <fprintf@plt>
   16d4c:	mov	r8, #1
   16d50:	ldrb	r0, [sl, #19]
   16d54:	cmp	r0, #0
   16d58:	beq	16d7c <__assert_fail@plt+0x4300>
   16d5c:	movw	r2, #31246	; 0x7a0e
   16d60:	movw	r1, #31248	; 0x7a10
   16d64:	cmp	r8, #0
   16d68:	mov	r0, r4
   16d6c:	movt	r2, #4
   16d70:	movt	r1, #4
   16d74:	moveq	r2, r6
   16d78:	bl	127c4 <fprintf@plt>
   16d7c:	mov	r0, #10
   16d80:	mov	r1, r4
   16d84:	bl	12914 <fputc@plt>
   16d88:	cmp	r5, #1
   16d8c:	blt	16db4 <__assert_fail@plt+0x4338>
   16d90:	mov	r6, #0
   16d94:	mov	r0, r7
   16d98:	mov	r1, #4
   16d9c:	mov	r2, #1
   16da0:	mov	r3, r4
   16da4:	bl	125f0 <fwrite@plt>
   16da8:	add	r6, r6, #1
   16dac:	cmp	r5, r6
   16db0:	bne	16d94 <__assert_fail@plt+0x4318>
   16db4:	ldr	r0, [sl, #156]	; 0x9c
   16db8:	cmp	r0, #0
   16dbc:	beq	16df4 <__assert_fail@plt+0x4378>
   16dc0:	movw	r0, #31269	; 0x7a25
   16dc4:	mov	r1, #6
   16dc8:	mov	r2, #1
   16dcc:	mov	r3, r4
   16dd0:	movt	r0, #4
   16dd4:	bl	125f0 <fwrite@plt>
   16dd8:	ldr	r1, [sl, #156]	; 0x9c
   16ddc:	add	r2, r5, #1
   16de0:	mov	r0, r4
   16de4:	bl	16ac0 <__assert_fail@plt+0x4044>
   16de8:	cmp	r5, #1
   16dec:	bge	16e20 <__assert_fail@plt+0x43a4>
   16df0:	b	16e44 <__assert_fail@plt+0x43c8>
   16df4:	ldr	r0, [sl, #160]	; 0xa0
   16df8:	cmp	r0, #0
   16dfc:	beq	16e90 <__assert_fail@plt+0x4414>
   16e00:	movw	r0, #31276	; 0x7a2c
   16e04:	mov	r1, #9
   16e08:	mov	r2, #1
   16e0c:	mov	r3, r4
   16e10:	movt	r0, #4
   16e14:	bl	125f0 <fwrite@plt>
   16e18:	cmp	r5, #1
   16e1c:	blt	16e44 <__assert_fail@plt+0x43c8>
   16e20:	mov	r6, #0
   16e24:	mov	r0, r7
   16e28:	mov	r1, #4
   16e2c:	mov	r2, #1
   16e30:	mov	r3, r4
   16e34:	bl	125f0 <fwrite@plt>
   16e38:	add	r6, r6, #1
   16e3c:	cmp	r5, r6
   16e40:	bne	16e24 <__assert_fail@plt+0x43a8>
   16e44:	ldr	r0, [sl, #160]	; 0xa0
   16e48:	cmp	r0, #0
   16e4c:	beq	16e80 <__assert_fail@plt+0x4404>
   16e50:	movw	r0, #31286	; 0x7a36
   16e54:	mov	r1, #7
   16e58:	mov	r2, #1
   16e5c:	mov	r3, r4
   16e60:	movt	r0, #4
   16e64:	bl	125f0 <fwrite@plt>
   16e68:	ldr	sl, [sl, #160]	; 0xa0
   16e6c:	add	r5, r5, #1
   16e70:	cmp	sl, #0
   16e74:	bne	16af0 <__assert_fail@plt+0x4074>
   16e78:	sub	sp, fp, #28
   16e7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e80:	movw	r0, #31294	; 0x7a3e
   16e84:	mov	r1, #10
   16e88:	movt	r0, #4
   16e8c:	b	16e9c <__assert_fail@plt+0x4420>
   16e90:	movw	r0, #31255	; 0x7a17
   16e94:	mov	r1, #13
   16e98:	movt	r0, #4
   16e9c:	mov	r2, #1
   16ea0:	mov	r3, r4
   16ea4:	sub	sp, fp, #28
   16ea8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16eac:	b	125f0 <fwrite@plt>
   16eb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16eb4:	add	fp, sp, #28
   16eb8:	sub	sp, sp, #20
   16ebc:	cmp	r0, #0
   16ec0:	beq	170cc <__assert_fail@plt+0x4650>
   16ec4:	mov	r4, r0
   16ec8:	ldr	r0, [r0, #160]	; 0xa0
   16ecc:	bl	16eb0 <__assert_fail@plt+0x4434>
   16ed0:	ldr	r0, [r4, #156]	; 0x9c
   16ed4:	bl	16eb0 <__assert_fail@plt+0x4434>
   16ed8:	ldrb	r0, [r4, #18]
   16edc:	mov	r2, #3
   16ee0:	cmp	r0, #0
   16ee4:	bne	16f04 <__assert_fail@plt+0x4488>
   16ee8:	ldrb	r0, [r4, #20]
   16eec:	mov	r2, #1
   16ef0:	cmp	r0, #0
   16ef4:	bne	16f04 <__assert_fail@plt+0x4488>
   16ef8:	ldrb	r2, [r4, #19]
   16efc:	cmp	r2, #0
   16f00:	movwne	r2, #2
   16f04:	ldr	r7, [r4]
   16f08:	movw	r0, #16820	; 0x41b4
   16f0c:	movt	r0, #1
   16f10:	cmp	r7, r0
   16f14:	movwne	r0, #16824	; 0x41b8
   16f18:	movtne	r0, #1
   16f1c:	cmpne	r7, r0
   16f20:	bne	16f38 <__assert_fail@plt+0x44bc>
   16f24:	ldrb	r1, [r4, #40]	; 0x28
   16f28:	mov	r0, #7
   16f2c:	cmp	r1, #0
   16f30:	movweq	r0, #8
   16f34:	b	170c0 <__assert_fail@plt+0x4644>
   16f38:	movw	r0, #42800	; 0xa730
   16f3c:	movt	r0, #1
   16f40:	cmp	r7, r0
   16f44:	beq	17064 <__assert_fail@plt+0x45e8>
   16f48:	movw	r9, #54664	; 0xd588
   16f4c:	stmib	sp, {r2, r4}
   16f50:	movt	r9, #5
   16f54:	ldrb	r0, [r9]
   16f58:	cmp	r0, #0
   16f5c:	bne	16ffc <__assert_fail@plt+0x4580>
   16f60:	movw	r8, #53996	; 0xd2ec
   16f64:	movw	r3, #32048	; 0x7d30
   16f68:	mov	r1, #59	; 0x3b
   16f6c:	mov	r2, #8
   16f70:	movt	r8, #5
   16f74:	movt	r3, #1
   16f78:	mov	r0, r8
   16f7c:	bl	12998 <qsort@plt>
   16f80:	mov	r4, #0
   16f84:	add	sl, sp, #16
   16f88:	add	r7, sp, #12
   16f8c:	mov	r0, r8
   16f90:	mov	r1, r7
   16f94:	mov	r2, #4
   16f98:	ldr	r5, [r0, r4, lsl #3]!
   16f9c:	ldr	r6, [r0, #8]
   16fa0:	mov	r0, sl
   16fa4:	str	r5, [sp, #12]
   16fa8:	str	r6, [sp, #16]
   16fac:	bl	12518 <memcmp@plt>
   16fb0:	cmp	r0, #0
   16fb4:	blt	170d4 <__assert_fail@plt+0x4658>
   16fb8:	mov	r0, sl
   16fbc:	mov	r1, r7
   16fc0:	mov	r2, #4
   16fc4:	str	r6, [sp, #12]
   16fc8:	str	r5, [sp, #16]
   16fcc:	bl	12518 <memcmp@plt>
   16fd0:	cmp	r0, #1
   16fd4:	bge	170e8 <__assert_fail@plt+0x466c>
   16fd8:	add	r1, r4, #2
   16fdc:	add	r0, r4, #1
   16fe0:	cmp	r1, #58	; 0x3a
   16fe4:	mov	r4, r0
   16fe8:	bls	16f8c <__assert_fail@plt+0x4510>
   16fec:	mov	r0, #1
   16ff0:	strb	r0, [r9]
   16ff4:	ldr	r0, [sp, #8]
   16ff8:	ldr	r7, [r0]
   16ffc:	mov	sl, #59	; 0x3b
   17000:	mov	r8, #0
   17004:	add	r5, sp, #16
   17008:	add	r6, sp, #12
   1700c:	movw	r9, #53996	; 0xd2ec
   17010:	add	r0, sl, r8
   17014:	mov	r1, r6
   17018:	mov	r2, #4
   1701c:	str	r7, [sp, #16]
   17020:	lsr	r4, r0, #1
   17024:	movt	r9, #5
   17028:	ldr	r0, [r9, r4, lsl #3]!
   1702c:	str	r0, [sp, #12]
   17030:	mov	r0, r5
   17034:	bl	12518 <memcmp@plt>
   17038:	cmp	r0, #0
   1703c:	bge	17050 <__assert_fail@plt+0x45d4>
   17040:	mov	sl, r4
   17044:	cmp	r8, sl
   17048:	bcc	1700c <__assert_fail@plt+0x4590>
   1704c:	b	1708c <__assert_fail@plt+0x4610>
   17050:	beq	1706c <__assert_fail@plt+0x45f0>
   17054:	add	r8, r4, #1
   17058:	cmp	r8, sl
   1705c:	bcc	1700c <__assert_fail@plt+0x4590>
   17060:	b	1708c <__assert_fail@plt+0x4610>
   17064:	ldr	r0, [r4, #24]
   17068:	b	170c0 <__assert_fail@plt+0x4644>
   1706c:	cmp	r9, #0
   17070:	beq	1708c <__assert_fail@plt+0x4610>
   17074:	movw	r0, #53996	; 0xd2ec
   17078:	movt	r0, #5
   1707c:	add	r0, r0, r4, lsl #3
   17080:	ldr	r4, [sp, #8]
   17084:	ldr	r0, [r0, #4]
   17088:	b	170bc <__assert_fail@plt+0x4640>
   1708c:	movw	r1, #31951	; 0x7ccf
   17090:	mov	r0, #0
   17094:	mov	r2, #5
   17098:	movt	r1, #4
   1709c:	bl	1253c <dcgettext@plt>
   170a0:	ldr	r4, [sp, #8]
   170a4:	mov	r2, r0
   170a8:	mov	r0, #0
   170ac:	mov	r1, #0
   170b0:	ldr	r3, [r4, #4]
   170b4:	bl	12674 <error@plt>
   170b8:	mov	r0, #10
   170bc:	ldr	r2, [sp, #4]
   170c0:	cmp	r0, r2
   170c4:	movhi	r2, r0
   170c8:	str	r2, [r4, #24]
   170cc:	sub	sp, fp, #28
   170d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170d4:	movw	r2, #31915	; 0x7cab
   170d8:	mov	r0, #1
   170dc:	mov	r1, #0
   170e0:	movt	r2, #4
   170e4:	bl	12674 <error@plt>
   170e8:	movw	r0, #32063	; 0x7d3f
   170ec:	movw	r1, #30186	; 0x75ea
   170f0:	movw	r3, #32075	; 0x7d4b
   170f4:	movw	r2, #1013	; 0x3f5
   170f8:	movt	r0, #4
   170fc:	movt	r1, #4
   17100:	movt	r3, #4
   17104:	bl	12a7c <__assert_fail@plt>
   17108:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1710c:	add	fp, sp, #28
   17110:	sub	sp, sp, #4
   17114:	vpush	{d8-d9}
   17118:	sub	sp, sp, #112	; 0x70
   1711c:	mov	r5, #0
   17120:	cmp	r0, #0
   17124:	str	r5, [fp, #-52]	; 0xffffffcc
   17128:	str	r5, [fp, #-56]	; 0xffffffc8
   1712c:	str	r5, [fp, #-60]	; 0xffffffc4
   17130:	str	r5, [fp, #-64]	; 0xffffffc0
   17134:	beq	177cc <__assert_fail@plt+0x4d50>
   17138:	ldr	r4, [r0]
   1713c:	mov	r6, r0
   17140:	cmp	r4, #0
   17144:	beq	177cc <__assert_fail@plt+0x4d50>
   17148:	add	r2, sp, #8
   1714c:	vmov.i32	q8, #0	; 0x00000000
   17150:	mov	r0, #84	; 0x54
   17154:	mov	r1, r2
   17158:	vst1.64	{d16-d17}, [r1], r0
   1715c:	mov	r0, #0
   17160:	str	r0, [r1]
   17164:	add	r1, r2, #64	; 0x40
   17168:	str	r0, [sp, #88]	; 0x58
   1716c:	mov	r0, r4
   17170:	vst1.64	{d16-d17}, [r1]
   17174:	add	r1, r2, #48	; 0x30
   17178:	vst1.64	{d16-d17}, [r1]
   1717c:	add	r1, r2, #32
   17180:	vst1.64	{d16-d17}, [r1]
   17184:	add	r1, r2, #16
   17188:	vst1.64	{d16-d17}, [r1]
   1718c:	ldr	r1, [r0, #156]!	; 0x9c
   17190:	cmp	r1, #0
   17194:	beq	171bc <__assert_fail@plt+0x4740>
   17198:	mov	r5, r0
   1719c:	mov	r0, r1
   171a0:	mov	r2, r4
   171a4:	mov	r4, r1
   171a8:	ldr	r1, [r0, #156]!	; 0x9c
   171ac:	cmp	r1, #0
   171b0:	bne	17198 <__assert_fail@plt+0x471c>
   171b4:	ldr	r7, [r2, #12]
   171b8:	b	171c4 <__assert_fail@plt+0x4748>
   171bc:	mov	r7, #3
   171c0:	mov	r5, r6
   171c4:	ldr	r0, [r4, #8]
   171c8:	cmp	r0, #3
   171cc:	beq	17278 <__assert_fail@plt+0x47fc>
   171d0:	mov	r0, #176	; 0xb0
   171d4:	bl	2dfe8 <__assert_fail@plt+0x1b56c>
   171d8:	mov	r2, #3
   171dc:	cmp	r7, #3
   171e0:	mov	r1, #0
   171e4:	str	r2, [r0, #8]
   171e8:	str	r7, [r0, #12]
   171ec:	str	r1, [r0, #24]
   171f0:	beq	17224 <__assert_fail@plt+0x47a8>
   171f4:	cmp	r7, #2
   171f8:	beq	17238 <__assert_fail@plt+0x47bc>
   171fc:	cmp	r7, #1
   17200:	bne	17270 <__assert_fail@plt+0x47f4>
   17204:	movw	r1, #31246	; 0x7a0e
   17208:	movw	r2, #15992	; 0x3e78
   1720c:	vmov.f32	s0, #112	; 0x3f800000  1.0
   17210:	movt	r2, #1
   17214:	movt	r1, #4
   17218:	str	r2, [r0]
   1721c:	str	r1, [r0, #4]
   17220:	b	1726c <__assert_fail@plt+0x47f0>
   17224:	movw	r1, #31029	; 0x7935
   17228:	movw	r2, #15600	; 0x3cf0
   1722c:	movt	r1, #4
   17230:	movt	r2, #1
   17234:	b	17248 <__assert_fail@plt+0x47cc>
   17238:	movw	r1, #32273	; 0x7e11
   1723c:	movw	r2, #18908	; 0x49dc
   17240:	movt	r1, #4
   17244:	movt	r2, #1
   17248:	str	r2, [r0]
   1724c:	str	r1, [r0, #4]
   17250:	vldr	s0, [pc, #1012]	; 1764c <__assert_fail@plt+0x4bd0>
   17254:	vmov.f32	s4, #112	; 0x3f800000  1.0
   17258:	vldr	s2, [r4, #28]
   1725c:	vcmpe.f32	s2, s4
   17260:	vmax.f32	d0, d1, d0
   17264:	vmrs	APSR_nzcv, fpscr
   17268:	vselgt.f32	s0, s4, s0
   1726c:	vstr	s0, [r0, #28]
   17270:	str	r4, [r0, #160]	; 0xa0
   17274:	str	r0, [r5]
   17278:	movw	r0, #56940	; 0xde6c
   1727c:	movt	r0, #5
   17280:	ldrb	r0, [r0, #44]	; 0x2c
   17284:	tst	r0, #9
   17288:	bne	177e0 <__assert_fail@plt+0x4d64>
   1728c:	ldr	r5, [r6]
   17290:	add	r7, sp, #8
   17294:	cmp	r5, #0
   17298:	beq	17798 <__assert_fail@plt+0x4d1c>
   1729c:	ldr	r0, [r5, #8]
   172a0:	mov	r9, #0
   172a4:	vldr	s16, [pc, #928]	; 1764c <__assert_fail@plt+0x4bd0>
   172a8:	vmov.f32	s18, #112	; 0x3f800000  1.0
   172ac:	mov	r4, #0
   172b0:	mov	sl, #0
   172b4:	cmp	r0, #3
   172b8:	mov	r0, #0
   172bc:	ldreq	r9, [r5, #12]
   172c0:	str	r0, [sp, #4]
   172c4:	b	172d4 <__assert_fail@plt+0x4858>
   172c8:	ldr	r4, [fp, #-60]	; 0xffffffc4
   172cc:	ldr	sl, [fp, #-52]	; 0xffffffcc
   172d0:	mov	r6, r8
   172d4:	ldr	r0, [r5, #8]
   172d8:	cmp	r0, #3
   172dc:	bne	172ec <__assert_fail@plt+0x4870>
   172e0:	ldr	r0, [r5, #12]
   172e4:	cmp	r0, r9
   172e8:	bne	172f4 <__assert_fail@plt+0x4878>
   172ec:	mov	r8, r5
   172f0:	b	17398 <__assert_fail@plt+0x491c>
   172f4:	mov	r0, #176	; 0xb0
   172f8:	bl	2dfe8 <__assert_fail@plt+0x1b56c>
   172fc:	mov	r8, r0
   17300:	mov	r0, #3
   17304:	cmp	r9, #3
   17308:	str	r0, [r8, #8]
   1730c:	mov	r0, #0
   17310:	str	r9, [r8, #12]
   17314:	str	r0, [r8, #24]
   17318:	beq	17360 <__assert_fail@plt+0x48e4>
   1731c:	cmp	r9, #2
   17320:	beq	1734c <__assert_fail@plt+0x48d0>
   17324:	cmp	r9, #1
   17328:	bne	17390 <__assert_fail@plt+0x4914>
   1732c:	movw	r0, #31246	; 0x7a0e
   17330:	movw	r1, #15992	; 0x3e78
   17334:	vmov.f32	s0, s18
   17338:	movt	r1, #1
   1733c:	movt	r0, #4
   17340:	str	r1, [r8]
   17344:	str	r0, [r8, #4]
   17348:	b	1738c <__assert_fail@plt+0x4910>
   1734c:	movw	r0, #32273	; 0x7e11
   17350:	movw	r1, #18908	; 0x49dc
   17354:	movt	r0, #4
   17358:	movt	r1, #1
   1735c:	b	17370 <__assert_fail@plt+0x48f4>
   17360:	movw	r0, #31029	; 0x7935
   17364:	movw	r1, #15600	; 0x3cf0
   17368:	movt	r0, #4
   1736c:	movt	r1, #1
   17370:	str	r1, [r8]
   17374:	str	r0, [r8, #4]
   17378:	vldr	s0, [r5, #28]
   1737c:	vcmpe.f32	s0, s18
   17380:	vmax.f32	d1, d0, d8
   17384:	vmrs	APSR_nzcv, fpscr
   17388:	vselgt.f32	s0, s18, s2
   1738c:	vstr	s0, [r8, #28]
   17390:	str	r5, [r8, #160]	; 0xa0
   17394:	str	r8, [r6]
   17398:	mov	r5, r8
   1739c:	ldr	r1, [r5, #160]!	; 0xa0
   173a0:	ldr	r0, [r1, #8]
   173a4:	cmp	r0, #2
   173a8:	bcc	173c8 <__assert_fail@plt+0x494c>
   173ac:	beq	17458 <__assert_fail@plt+0x49dc>
   173b0:	cmp	r0, #3
   173b4:	bne	17814 <__assert_fail@plt+0x4d98>
   173b8:	str	r4, [fp, #-60]	; 0xffffffc4
   173bc:	str	sl, [fp, #-52]	; 0xffffffcc
   173c0:	mov	r0, r5
   173c4:	b	17464 <__assert_fail@plt+0x49e8>
   173c8:	ldrb	r0, [r1, #16]
   173cc:	cmp	r9, #1
   173d0:	beq	17604 <__assert_fail@plt+0x4b88>
   173d4:	cmp	r0, #0
   173d8:	bne	17600 <__assert_fail@plt+0x4b84>
   173dc:	ldr	r0, [r1]
   173e0:	movw	r2, #17568	; 0x44a0
   173e4:	movt	r2, #1
   173e8:	cmp	r0, r2
   173ec:	movwne	r2, #17368	; 0x43d8
   173f0:	movtne	r2, #1
   173f4:	cmpne	r0, r2
   173f8:	beq	17418 <__assert_fail@plt+0x499c>
   173fc:	movw	r2, #17980	; 0x463c
   17400:	movt	r2, #1
   17404:	cmp	r0, r2
   17408:	movwne	r2, #18984	; 0x4a28
   1740c:	movtne	r2, #1
   17410:	cmpne	r0, r2
   17414:	bne	174a4 <__assert_fail@plt+0x4a28>
   17418:	movw	r0, #56940	; 0xde6c
   1741c:	movt	r0, #5
   17420:	ldrb	r0, [r0, #44]	; 0x2c
   17424:	tst	r0, #8
   17428:	bne	175b0 <__assert_fail@plt+0x4b34>
   1742c:	ldr	r0, [r8, #156]	; 0x9c
   17430:	cmp	r4, #0
   17434:	moveq	r4, r8
   17438:	str	r0, [r6]
   1743c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17440:	str	r0, [r8, #156]	; 0x9c
   17444:	str	r8, [fp, #-64]	; 0xffffffc0
   17448:	ldr	r5, [r6]
   1744c:	cmp	r5, #0
   17450:	bne	172d4 <__assert_fail@plt+0x4858>
   17454:	b	177ac <__assert_fail@plt+0x4d30>
   17458:	add	r0, r1, #160	; 0xa0
   1745c:	str	r4, [fp, #-60]	; 0xffffffc4
   17460:	str	sl, [fp, #-52]	; 0xffffffcc
   17464:	bl	17108 <__assert_fail@plt+0x468c>
   17468:	ldr	r1, [r5]
   1746c:	strb	r0, [r1, #16]
   17470:	cmp	r0, #0
   17474:	beq	17494 <__assert_fail@plt+0x4a18>
   17478:	mov	r0, r7
   1747c:	sub	r1, fp, #64	; 0x40
   17480:	sub	r2, fp, #56	; 0x38
   17484:	mov	r3, r6
   17488:	bl	17d64 <__assert_fail@plt+0x52e8>
   1748c:	mov	r0, #1
   17490:	str	r0, [sp, #4]
   17494:	ldr	r5, [r8, #156]!	; 0x9c
   17498:	cmp	r5, #0
   1749c:	bne	172c8 <__assert_fail@plt+0x484c>
   174a0:	b	177a0 <__assert_fail@plt+0x4d24>
   174a4:	movw	r2, #56940	; 0xde6c
   174a8:	movt	r2, #5
   174ac:	ldrh	r2, [r2, #68]	; 0x44
   174b0:	cmp	r2, #0
   174b4:	beq	174fc <__assert_fail@plt+0x4a80>
   174b8:	movw	r3, #18908	; 0x49dc
   174bc:	movt	r3, #1
   174c0:	cmp	r0, r3
   174c4:	movwne	r3, #15992	; 0x3e78
   174c8:	movtne	r3, #1
   174cc:	cmpne	r0, r3
   174d0:	beq	174fc <__assert_fail@plt+0x4a80>
   174d4:	movw	r3, #15600	; 0x3cf0
   174d8:	movt	r3, #1
   174dc:	cmp	r0, r3
   174e0:	movwne	r3, #18044	; 0x467c
   174e4:	movtne	r3, #1
   174e8:	cmpne	r0, r3
   174ec:	beq	174fc <__assert_fail@plt+0x4a80>
   174f0:	ldr	r3, [r1, #24]
   174f4:	cmp	r3, #0
   174f8:	beq	17418 <__assert_fail@plt+0x499c>
   174fc:	movw	r3, #19528	; 0x4c48
   17500:	movt	r3, #1
   17504:	cmp	r0, r3
   17508:	beq	17544 <__assert_fail@plt+0x4ac8>
   1750c:	mov	r0, #0
   17510:	cmp	r2, #2
   17514:	bcc	17604 <__assert_fail@plt+0x4b88>
   17518:	ldr	r3, [r1, #24]
   1751c:	sub	r7, r3, #1
   17520:	cmp	r7, #1
   17524:	bhi	17564 <__assert_fail@plt+0x4ae8>
   17528:	cmp	r2, #2
   1752c:	add	r7, sp, #8
   17530:	bhi	17570 <__assert_fail@plt+0x4af4>
   17534:	ldrb	r1, [r1, #18]
   17538:	cmp	r1, #0
   1753c:	beq	17570 <__assert_fail@plt+0x4af4>
   17540:	b	17604 <__assert_fail@plt+0x4b88>
   17544:	ldr	r0, [r8, #156]	; 0x9c
   17548:	cmp	sl, #0
   1754c:	moveq	sl, r8
   17550:	str	r0, [r6]
   17554:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17558:	str	r0, [r8, #156]	; 0x9c
   1755c:	str	r8, [fp, #-56]	; 0xffffffc8
   17560:	b	17448 <__assert_fail@plt+0x49cc>
   17564:	cmp	r2, #3
   17568:	add	r7, sp, #8
   1756c:	bcc	17604 <__assert_fail@plt+0x4b88>
   17570:	movw	r0, #56940	; 0xde6c
   17574:	movt	r0, #5
   17578:	ldrb	r0, [r0, #44]	; 0x2c
   1757c:	tst	r0, #8
   17580:	bne	17650 <__assert_fail@plt+0x4bd4>
   17584:	ldr	r0, [r8, #156]	; 0x9c
   17588:	str	r0, [r6]
   1758c:	ldr	r0, [r7, r3, lsl #3]
   17590:	str	r0, [r8, #156]	; 0x9c
   17594:	str	r8, [r7, r3, lsl #3]
   17598:	add	r0, r7, r3, lsl #3
   1759c:	ldr	r1, [r0, #4]
   175a0:	cmp	r1, #0
   175a4:	orreq	r0, r0, #4
   175a8:	streq	r8, [r0]
   175ac:	b	17448 <__assert_fail@plt+0x49cc>
   175b0:	movw	r0, #56940	; 0xde6c
   175b4:	movw	r1, #32178	; 0x7db2
   175b8:	movt	r0, #5
   175bc:	movt	r1, #4
   175c0:	ldrh	r2, [r0, #68]	; 0x44
   175c4:	movw	r0, #54600	; 0xd548
   175c8:	movt	r0, #5
   175cc:	ldr	r0, [r0]
   175d0:	bl	127c4 <fprintf@plt>
   175d4:	movw	r0, #54600	; 0xd548
   175d8:	movt	r0, #5
   175dc:	ldr	r1, [r0]
   175e0:	ldr	r0, [r5]
   175e4:	ldr	r3, [r0, #36]	; 0x24
   175e8:	ldr	r2, [r0, #4]
   175ec:	cmp	r3, #0
   175f0:	bne	17618 <__assert_fail@plt+0x4b9c>
   175f4:	mov	r0, r2
   175f8:	bl	12a10 <fputs@plt>
   175fc:	b	17628 <__assert_fail@plt+0x4bac>
   17600:	mov	r0, #1
   17604:	str	r4, [fp, #-60]	; 0xffffffc4
   17608:	str	sl, [fp, #-52]	; 0xffffffcc
   1760c:	cmp	r0, #0
   17610:	bne	17478 <__assert_fail@plt+0x49fc>
   17614:	b	17494 <__assert_fail@plt+0x4a18>
   17618:	mov	r0, r1
   1761c:	movw	r1, #30170	; 0x75da
   17620:	movt	r1, #4
   17624:	bl	127c4 <fprintf@plt>
   17628:	movw	r0, #54600	; 0xd548
   1762c:	mov	r1, #16
   17630:	mov	r2, #1
   17634:	movt	r0, #5
   17638:	ldr	r3, [r0]
   1763c:	movw	r0, #32211	; 0x7dd3
   17640:	movt	r0, #4
   17644:	bl	125f0 <fwrite@plt>
   17648:	b	1742c <__assert_fail@plt+0x49b0>
   1764c:	andeq	r0, r0, r0
   17650:	movw	r0, #54600	; 0xd548
   17654:	movw	r1, #32228	; 0x7de4
   17658:	movt	r0, #5
   1765c:	movt	r1, #4
   17660:	ldr	r0, [r0]
   17664:	bl	127c4 <fprintf@plt>
   17668:	movw	r0, #54600	; 0xd548
   1766c:	movt	r0, #5
   17670:	ldr	r1, [r0]
   17674:	ldr	r0, [r5]
   17678:	ldr	r3, [r0, #36]	; 0x24
   1767c:	ldr	r2, [r0, #4]
   17680:	cmp	r3, #0
   17684:	bne	17694 <__assert_fail@plt+0x4c18>
   17688:	mov	r0, r2
   1768c:	bl	12a10 <fputs@plt>
   17690:	b	176a4 <__assert_fail@plt+0x4c28>
   17694:	mov	r0, r1
   17698:	movw	r1, #30170	; 0x75da
   1769c:	movt	r1, #4
   176a0:	bl	127c4 <fprintf@plt>
   176a4:	ldr	r1, [r5]
   176a8:	movw	ip, #53908	; 0xd294
   176ac:	movw	r0, #54600	; 0xd548
   176b0:	mov	r3, #0
   176b4:	movt	ip, #5
   176b8:	movt	r0, #5
   176bc:	ldr	r2, [ip]
   176c0:	ldr	r0, [r0]
   176c4:	ldr	r1, [r1, #24]
   176c8:	cmp	r2, r1
   176cc:	beq	17778 <__assert_fail@plt+0x4cfc>
   176d0:	ldr	r2, [ip, #8]
   176d4:	mov	r3, #1
   176d8:	cmp	r2, r1
   176dc:	beq	17778 <__assert_fail@plt+0x4cfc>
   176e0:	ldr	r2, [ip, #16]
   176e4:	mov	r3, #2
   176e8:	cmp	r2, r1
   176ec:	beq	17778 <__assert_fail@plt+0x4cfc>
   176f0:	ldr	r2, [ip, #24]
   176f4:	mov	r3, #3
   176f8:	cmp	r2, r1
   176fc:	beq	17778 <__assert_fail@plt+0x4cfc>
   17700:	ldr	r2, [ip, #32]
   17704:	mov	r3, #4
   17708:	cmp	r2, r1
   1770c:	beq	17778 <__assert_fail@plt+0x4cfc>
   17710:	ldr	r2, [ip, #40]	; 0x28
   17714:	mov	r3, #5
   17718:	cmp	r2, r1
   1771c:	beq	17778 <__assert_fail@plt+0x4cfc>
   17720:	ldr	r2, [ip, #48]	; 0x30
   17724:	mov	r3, #6
   17728:	cmp	r2, r1
   1772c:	beq	17778 <__assert_fail@plt+0x4cfc>
   17730:	ldr	r2, [ip, #56]	; 0x38
   17734:	mov	r3, #7
   17738:	cmp	r2, r1
   1773c:	beq	17778 <__assert_fail@plt+0x4cfc>
   17740:	ldr	r2, [ip, #64]	; 0x40
   17744:	mov	r3, #8
   17748:	cmp	r2, r1
   1774c:	beq	17778 <__assert_fail@plt+0x4cfc>
   17750:	ldr	r2, [ip, #72]	; 0x48
   17754:	mov	r3, #9
   17758:	cmp	r2, r1
   1775c:	beq	17778 <__assert_fail@plt+0x4cfc>
   17760:	ldr	r2, [ip, #80]	; 0x50
   17764:	mov	r3, #10
   17768:	cmp	r2, r1
   1776c:	movw	r2, #32828	; 0x803c
   17770:	movt	r2, #4
   17774:	bne	17780 <__assert_fail@plt+0x4d04>
   17778:	add	r1, ip, r3, lsl #3
   1777c:	ldr	r2, [r1, #4]
   17780:	movw	r1, #32258	; 0x7e02
   17784:	movt	r1, #4
   17788:	bl	127c4 <fprintf@plt>
   1778c:	ldr	r0, [r5]
   17790:	ldr	r3, [r0, #24]
   17794:	b	17584 <__assert_fail@plt+0x4b08>
   17798:	mov	r5, #0
   1779c:	b	177b8 <__assert_fail@plt+0x4d3c>
   177a0:	ldr	r5, [sp, #4]
   177a4:	mov	r6, r8
   177a8:	b	177b8 <__assert_fail@plt+0x4d3c>
   177ac:	ldr	r5, [sp, #4]
   177b0:	str	r4, [fp, #-60]	; 0xffffffc4
   177b4:	str	sl, [fp, #-52]	; 0xffffffcc
   177b8:	sub	r1, fp, #64	; 0x40
   177bc:	sub	r2, fp, #56	; 0x38
   177c0:	mov	r0, r7
   177c4:	mov	r3, r6
   177c8:	bl	17d64 <__assert_fail@plt+0x52e8>
   177cc:	and	r0, r5, #1
   177d0:	sub	sp, fp, #48	; 0x30
   177d4:	vpop	{d8-d9}
   177d8:	add	sp, sp, #4
   177dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177e0:	movw	r4, #54600	; 0xd548
   177e4:	movw	r0, #32155	; 0x7d9b
   177e8:	mov	r1, #22
   177ec:	mov	r2, #1
   177f0:	movt	r4, #5
   177f4:	movt	r0, #4
   177f8:	ldr	r3, [r4]
   177fc:	bl	125f0 <fwrite@plt>
   17800:	ldr	r0, [r4]
   17804:	ldr	r1, [r6]
   17808:	mov	r2, #0
   1780c:	bl	16ac0 <__assert_fail@plt+0x4044>
   17810:	b	1728c <__assert_fail@plt+0x4810>
   17814:	movw	r1, #31844	; 0x7c64
   17818:	mov	r0, #0
   1781c:	mov	r2, #5
   17820:	movt	r1, #4
   17824:	bl	1253c <dcgettext@plt>
   17828:	mov	r2, r0
   1782c:	mov	r0, #1
   17830:	mov	r1, #0
   17834:	bl	12674 <error@plt>
   17838:	push	{r4, sl, fp, lr}
   1783c:	add	fp, sp, #8
   17840:	mov	r4, r0
   17844:	b	17858 <__assert_fail@plt+0x4ddc>
   17848:	ldr	r4, [r4, #160]	; 0xa0
   1784c:	mov	r1, #0
   17850:	cmp	r4, #0
   17854:	popeq	{r4, sl, fp, pc}
   17858:	tst	r1, #1
   1785c:	ldrne	r0, [r4, #8]
   17860:	cmpne	r0, #3
   17864:	bne	1788c <__assert_fail@plt+0x4e10>
   17868:	ldr	r0, [r4, #156]	; 0x9c
   1786c:	cmp	r0, #0
   17870:	beq	17848 <__assert_fail@plt+0x4dcc>
   17874:	ldr	r1, [r0, #8]
   17878:	cmp	r1, #3
   1787c:	bne	178ac <__assert_fail@plt+0x4e30>
   17880:	mov	r1, #0
   17884:	bl	17838 <__assert_fail@plt+0x4dbc>
   17888:	b	17848 <__assert_fail@plt+0x4dcc>
   1788c:	movw	r0, #32334	; 0x7e4e
   17890:	movw	r1, #30186	; 0x75ea
   17894:	movw	r3, #32353	; 0x7e61
   17898:	movw	r2, #1230	; 0x4ce
   1789c:	movt	r0, #4
   178a0:	movt	r1, #4
   178a4:	movt	r3, #4
   178a8:	bl	12a7c <__assert_fail@plt>
   178ac:	movw	r0, #32405	; 0x7e95
   178b0:	movw	r1, #30186	; 0x75ea
   178b4:	movw	r3, #32353	; 0x7e61
   178b8:	movw	r2, #1235	; 0x4d3
   178bc:	movt	r0, #4
   178c0:	movt	r1, #4
   178c4:	movt	r3, #4
   178c8:	bl	12a7c <__assert_fail@plt>
   178cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   178d0:	add	fp, sp, #28
   178d4:	sub	sp, sp, #4
   178d8:	vpush	{d8-d9}
   178dc:	sub	sp, sp, #8
   178e0:	cmp	r0, #0
   178e4:	beq	17b0c <__assert_fail@plt+0x5090>
   178e8:	movw	r8, #32435	; 0x7eb3
   178ec:	movw	sl, #56940	; 0xde6c
   178f0:	movw	r9, #18908	; 0x49dc
   178f4:	mov	r4, r0
   178f8:	movt	r8, #4
   178fc:	movt	sl, #5
   17900:	movt	r9, #1
   17904:	b	17938 <__assert_fail@plt+0x4ebc>
   17908:	movw	r0, #54600	; 0xd548
   1790c:	movw	r1, #32745	; 0x7fe9
   17910:	movt	r0, #5
   17914:	movt	r1, #4
   17918:	mov	r5, r0
   1791c:	ldr	r0, [r0]
   17920:	bl	127c4 <fprintf@plt>
   17924:	ldr	r0, [r5]
   17928:	mov	r1, r4
   1792c:	mov	r2, #0
   17930:	bl	16ac0 <__assert_fail@plt+0x4044>
   17934:	b	17af8 <__assert_fail@plt+0x507c>
   17938:	ldr	r0, [r4, #8]
   1793c:	mov	r2, r8
   17940:	cmp	r0, #3
   17944:	bne	17aec <__assert_fail@plt+0x5070>
   17948:	ldr	r0, [r4, #156]	; 0x9c
   1794c:	b	179b4 <__assert_fail@plt+0x4f38>
   17950:	movw	r0, #54600	; 0xd548
   17954:	mov	r1, #24
   17958:	mov	r2, #1
   1795c:	movt	r0, #5
   17960:	ldr	r3, [r0]
   17964:	mov	r5, r0
   17968:	movw	r0, #32720	; 0x7fd0
   1796c:	movt	r0, #4
   17970:	bl	125f0 <fwrite@plt>
   17974:	ldr	r0, [r5]
   17978:	mov	r1, r4
   1797c:	mov	r2, #0
   17980:	bl	16ac0 <__assert_fail@plt+0x4044>
   17984:	b	17a68 <__assert_fail@plt+0x4fec>
   17988:	movw	r0, #54600	; 0xd548
   1798c:	movw	r1, #32586	; 0x7f4a
   17990:	vcvt.f64.f32	d17, s18
   17994:	vcvt.f64.f32	d16, s16
   17998:	movt	r0, #5
   1799c:	vmov	r2, r3, d17
   179a0:	movt	r1, #4
   179a4:	vstr	d16, [sp]
   179a8:	ldr	r0, [r0]
   179ac:	bl	127c4 <fprintf@plt>
   179b0:	b	17a24 <__assert_fail@plt+0x4fa8>
   179b4:	cmp	r0, #0
   179b8:	ldrne	r5, [r4, #160]	; 0xa0
   179bc:	cmpne	r5, #0
   179c0:	beq	17a90 <__assert_fail@plt+0x5014>
   179c4:	ldr	r7, [r0, #160]	; 0xa0
   179c8:	cmp	r7, #0
   179cc:	beq	17a9c <__assert_fail@plt+0x5020>
   179d0:	mov	r0, r7
   179d4:	bl	17fc8 <__assert_fail@plt+0x554c>
   179d8:	cmp	r0, #0
   179dc:	bne	17aa8 <__assert_fail@plt+0x502c>
   179e0:	mov	r0, r5
   179e4:	bl	17fc8 <__assert_fail@plt+0x554c>
   179e8:	cmp	r0, #0
   179ec:	bne	17ab4 <__assert_fail@plt+0x5038>
   179f0:	mov	r0, r7
   179f4:	bl	18014 <__assert_fail@plt+0x5598>
   179f8:	mov	r6, r0
   179fc:	mov	r0, r5
   17a00:	bl	18014 <__assert_fail@plt+0x5598>
   17a04:	cmp	r6, r0
   17a08:	blt	17ac0 <__assert_fail@plt+0x5044>
   17a0c:	bne	17a5c <__assert_fail@plt+0x4fe0>
   17a10:	ldrb	r0, [sl, #44]	; 0x2c
   17a14:	vldr	s16, [r5, #28]
   17a18:	vldr	s18, [r7, #28]
   17a1c:	tst	r0, #8
   17a20:	bne	17988 <__assert_fail@plt+0x4f0c>
   17a24:	ldr	r0, [r4]
   17a28:	cmp	r0, r9
   17a2c:	beq	17a50 <__assert_fail@plt+0x4fd4>
   17a30:	movw	r1, #15600	; 0x3cf0
   17a34:	movt	r1, #1
   17a38:	cmp	r0, r1
   17a3c:	bne	17acc <__assert_fail@plt+0x5050>
   17a40:	vcmpe.f32	s16, s18
   17a44:	vmrs	APSR_nzcv, fpscr
   17a48:	bgt	17a5c <__assert_fail@plt+0x4fe0>
   17a4c:	b	17ad8 <__assert_fail@plt+0x505c>
   17a50:	vcmpe.f32	s16, s18
   17a54:	vmrs	APSR_nzcv, fpscr
   17a58:	bpl	17ae4 <__assert_fail@plt+0x5068>
   17a5c:	ldrb	r0, [sl, #44]	; 0x2c
   17a60:	tst	r0, #8
   17a64:	bne	17950 <__assert_fail@plt+0x4ed4>
   17a68:	ldr	r0, [r4, #156]	; 0x9c
   17a6c:	ldr	r1, [r4, #160]	; 0xa0
   17a70:	ldr	r2, [r0, #160]	; 0xa0
   17a74:	str	r1, [r0, #160]	; 0xa0
   17a78:	str	r2, [r4, #160]	; 0xa0
   17a7c:	ldr	r1, [r4, #8]
   17a80:	cmp	r1, #3
   17a84:	beq	179b4 <__assert_fail@plt+0x4f38>
   17a88:	mov	r2, r8
   17a8c:	b	17aec <__assert_fail@plt+0x5070>
   17a90:	movw	r2, #32458	; 0x7eca
   17a94:	movt	r2, #4
   17a98:	b	17aec <__assert_fail@plt+0x5070>
   17a9c:	movw	r2, #32480	; 0x7ee0
   17aa0:	movt	r2, #4
   17aa4:	b	17aec <__assert_fail@plt+0x5070>
   17aa8:	movw	r2, #32509	; 0x7efd
   17aac:	movt	r2, #4
   17ab0:	b	17aec <__assert_fail@plt+0x5070>
   17ab4:	movw	r2, #32539	; 0x7f1b
   17ab8:	movt	r2, #4
   17abc:	b	17aec <__assert_fail@plt+0x5070>
   17ac0:	movw	r2, #32570	; 0x7f3a
   17ac4:	movt	r2, #4
   17ac8:	b	17aec <__assert_fail@plt+0x5070>
   17acc:	movw	r2, #32702	; 0x7fbe
   17ad0:	movt	r2, #4
   17ad4:	b	17aec <__assert_fail@plt+0x5070>
   17ad8:	movw	r2, #32657	; 0x7f91
   17adc:	movt	r2, #4
   17ae0:	b	17aec <__assert_fail@plt+0x5070>
   17ae4:	movw	r2, #32613	; 0x7f65
   17ae8:	movt	r2, #4
   17aec:	ldrb	r0, [sl, #44]	; 0x2c
   17af0:	tst	r0, #8
   17af4:	bne	17908 <__assert_fail@plt+0x4e8c>
   17af8:	ldr	r0, [r4, #156]	; 0x9c
   17afc:	bl	178cc <__assert_fail@plt+0x4e50>
   17b00:	ldr	r4, [r4, #160]	; 0xa0
   17b04:	cmp	r4, #0
   17b08:	bne	17938 <__assert_fail@plt+0x4ebc>
   17b0c:	sub	sp, fp, #48	; 0x30
   17b10:	vpop	{d8-d9}
   17b14:	add	sp, sp, #4
   17b18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b1c:	push	{fp, lr}
   17b20:	mov	fp, sp
   17b24:	bl	17b38 <__assert_fail@plt+0x50bc>
   17b28:	cmp	r0, #0
   17b2c:	movne	r1, #0
   17b30:	strne	r1, [r0, #36]	; 0x24
   17b34:	pop	{fp, pc}
   17b38:	push	{r4, r5, fp, lr}
   17b3c:	add	fp, sp, #8
   17b40:	mov	r4, r0
   17b44:	ldr	r0, [r0]
   17b48:	cmp	r0, #2
   17b4c:	beq	17be8 <__assert_fail@plt+0x516c>
   17b50:	cmp	r0, #0
   17b54:	beq	17c08 <__assert_fail@plt+0x518c>
   17b58:	mov	r0, #176	; 0xb0
   17b5c:	bl	2dfe8 <__assert_fail@plt+0x1b56c>
   17b60:	movw	r1, #54652	; 0xd57c
   17b64:	movt	r1, #5
   17b68:	ldr	r2, [r1]
   17b6c:	cmp	r2, #0
   17b70:	beq	17b88 <__assert_fail@plt+0x510c>
   17b74:	movw	r1, #54656	; 0xd580
   17b78:	movt	r1, #5
   17b7c:	ldr	r1, [r1]
   17b80:	str	r0, [r1, #152]	; 0x98
   17b84:	b	17b8c <__assert_fail@plt+0x5110>
   17b88:	str	r0, [r1]
   17b8c:	movw	r1, #54656	; 0xd580
   17b90:	movw	r3, #30853	; 0x7885
   17b94:	movw	r2, #257	; 0x101
   17b98:	str	r4, [r0, #172]	; 0xac
   17b9c:	mov	r5, #1065353216	; 0x3f800000
   17ba0:	movt	r1, #5
   17ba4:	movt	r3, #4
   17ba8:	str	r0, [r1]
   17bac:	mov	r1, #0
   17bb0:	str	r1, [r0, #8]
   17bb4:	str	r1, [r0, #12]
   17bb8:	strh	r2, [r0, #18]
   17bbc:	str	r3, [r0, #36]	; 0x24
   17bc0:	movw	r3, #56940	; 0xde6c
   17bc4:	mov	r2, #10
   17bc8:	movt	r3, #5
   17bcc:	ldrb	r3, [r3, #15]
   17bd0:	str	r2, [r0, #24]
   17bd4:	str	r5, [r0, #28]
   17bd8:	str	r1, [r0, #168]	; 0xa8
   17bdc:	str	r1, [r0, #164]	; 0xa4
   17be0:	strb	r3, [r0, #32]
   17be4:	pop	{r4, r5, fp, pc}
   17be8:	movw	r0, #29415	; 0x72e7
   17bec:	movw	r1, #30186	; 0x75ea
   17bf0:	movw	r3, #30793	; 0x7849
   17bf4:	movw	r2, #1486	; 0x5ce
   17bf8:	movt	r0, #4
   17bfc:	movt	r1, #4
   17c00:	movt	r3, #4
   17c04:	bl	12a7c <__assert_fail@plt>
   17c08:	movw	r0, #29379	; 0x72c3
   17c0c:	movw	r1, #30186	; 0x75ea
   17c10:	movw	r3, #30793	; 0x7849
   17c14:	movw	r2, #1485	; 0x5cd
   17c18:	movt	r0, #4
   17c1c:	movt	r1, #4
   17c20:	movt	r3, #4
   17c24:	bl	12a7c <__assert_fail@plt>
   17c28:	push	{r4, r5, r6, sl, fp, lr}
   17c2c:	add	fp, sp, #16
   17c30:	movw	r6, #54660	; 0xd584
   17c34:	mov	r4, r0
   17c38:	mov	r5, r1
   17c3c:	movt	r6, #5
   17c40:	ldr	r0, [r6]
   17c44:	cmp	r0, #0
   17c48:	bne	17c64 <__assert_fail@plt+0x51e8>
   17c4c:	movw	r0, #30884	; 0x78a4
   17c50:	movt	r0, #4
   17c54:	bl	1bfe0 <__assert_fail@plt+0x9564>
   17c58:	cmp	r0, #0
   17c5c:	str	r0, [r6]
   17c60:	beq	17d10 <__assert_fail@plt+0x5294>
   17c64:	movw	r1, #54656	; 0xd580
   17c68:	movt	r1, #5
   17c6c:	ldr	r1, [r1]
   17c70:	cmp	r1, #0
   17c74:	beq	17cd8 <__assert_fail@plt+0x525c>
   17c78:	ldr	r1, [r1, #8]
   17c7c:	cmp	r1, #1
   17c80:	cmpne	r1, #5
   17c84:	bne	17cd0 <__assert_fail@plt+0x5254>
   17c88:	bl	17b38 <__assert_fail@plt+0x50bc>
   17c8c:	cmp	r0, #0
   17c90:	movw	r2, #15600	; 0x3cf0
   17c94:	mov	r3, #3
   17c98:	mov	r6, #0
   17c9c:	movne	r1, #0
   17ca0:	movt	r2, #1
   17ca4:	strne	r1, [r0, #36]	; 0x24
   17ca8:	movw	r1, #31029	; 0x7935
   17cac:	strb	r6, [r0, #20]
   17cb0:	str	r6, [r0, #36]	; 0x24
   17cb4:	str	r6, [r0, #40]	; 0x28
   17cb8:	str	r2, [r0]
   17cbc:	movt	r1, #4
   17cc0:	stmib	r0, {r1, r3}
   17cc4:	str	r3, [r0, #12]
   17cc8:	str	r6, [r0, #16]
   17ccc:	b	17cd8 <__assert_fail@plt+0x525c>
   17cd0:	cmp	r1, #0
   17cd4:	beq	17cec <__assert_fail@plt+0x5270>
   17cd8:	mov	r0, r4
   17cdc:	bl	17b38 <__assert_fail@plt+0x50bc>
   17ce0:	str	r5, [r0, #36]	; 0x24
   17ce4:	str	r4, [r0, #172]	; 0xac
   17ce8:	pop	{r4, r5, r6, sl, fp, pc}
   17cec:	movw	r1, #30987	; 0x790b
   17cf0:	mov	r0, #0
   17cf4:	mov	r2, #5
   17cf8:	movt	r1, #4
   17cfc:	bl	1253c <dcgettext@plt>
   17d00:	mov	r2, r0
   17d04:	mov	r0, #1
   17d08:	mov	r1, #0
   17d0c:	bl	12674 <error@plt>
   17d10:	movw	r0, #30888	; 0x78a8
   17d14:	movw	r1, #30186	; 0x75ea
   17d18:	movw	r3, #30906	; 0x78ba
   17d1c:	movw	r2, #1528	; 0x5f8
   17d20:	movt	r0, #4
   17d24:	movt	r1, #4
   17d28:	movt	r3, #4
   17d2c:	bl	12a7c <__assert_fail@plt>
   17d30:	push	{fp, lr}
   17d34:	mov	fp, sp
   17d38:	sub	sp, sp, #8
   17d3c:	ldr	r0, [r0]
   17d40:	mov	r2, #4
   17d44:	str	r0, [sp, #4]
   17d48:	ldr	r0, [r1]
   17d4c:	mov	r1, sp
   17d50:	str	r0, [sp]
   17d54:	add	r0, sp, #4
   17d58:	bl	12518 <memcmp@plt>
   17d5c:	mov	sp, fp
   17d60:	pop	{fp, pc}
   17d64:	push	{r4, r5, r6, sl, fp, lr}
   17d68:	add	fp, sp, #16
   17d6c:	mov	r5, r0
   17d70:	mov	r0, r1
   17d74:	mov	r1, r3
   17d78:	mov	r4, r3
   17d7c:	mov	r6, r2
   17d80:	bl	17e18 <__assert_fail@plt+0x539c>
   17d84:	mov	r0, r6
   17d88:	mov	r1, r4
   17d8c:	bl	17e18 <__assert_fail@plt+0x539c>
   17d90:	mov	r0, r5
   17d94:	mov	r1, r4
   17d98:	bl	17e18 <__assert_fail@plt+0x539c>
   17d9c:	add	r0, r5, #8
   17da0:	mov	r1, r4
   17da4:	bl	17e18 <__assert_fail@plt+0x539c>
   17da8:	add	r0, r5, #16
   17dac:	mov	r1, r4
   17db0:	bl	17e18 <__assert_fail@plt+0x539c>
   17db4:	add	r0, r5, #24
   17db8:	mov	r1, r4
   17dbc:	bl	17e18 <__assert_fail@plt+0x539c>
   17dc0:	add	r0, r5, #32
   17dc4:	mov	r1, r4
   17dc8:	bl	17e18 <__assert_fail@plt+0x539c>
   17dcc:	add	r0, r5, #40	; 0x28
   17dd0:	mov	r1, r4
   17dd4:	bl	17e18 <__assert_fail@plt+0x539c>
   17dd8:	add	r0, r5, #48	; 0x30
   17ddc:	mov	r1, r4
   17de0:	bl	17e18 <__assert_fail@plt+0x539c>
   17de4:	add	r0, r5, #56	; 0x38
   17de8:	mov	r1, r4
   17dec:	bl	17e18 <__assert_fail@plt+0x539c>
   17df0:	add	r0, r5, #64	; 0x40
   17df4:	mov	r1, r4
   17df8:	bl	17e18 <__assert_fail@plt+0x539c>
   17dfc:	add	r0, r5, #72	; 0x48
   17e00:	mov	r1, r4
   17e04:	bl	17e18 <__assert_fail@plt+0x539c>
   17e08:	add	r0, r5, #80	; 0x50
   17e0c:	mov	r1, r4
   17e10:	pop	{r4, r5, r6, sl, fp, lr}
   17e14:	b	17e18 <__assert_fail@plt+0x539c>
   17e18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e1c:	add	fp, sp, #28
   17e20:	sub	sp, sp, #4
   17e24:	mov	sl, r0
   17e28:	ldr	r0, [r0]
   17e2c:	cmp	r0, #0
   17e30:	beq	17f54 <__assert_fail@plt+0x54d8>
   17e34:	movw	r5, #56940	; 0xde6c
   17e38:	mov	r9, r1
   17e3c:	movt	r5, #5
   17e40:	ldrb	r1, [r5, #44]	; 0x2c
   17e44:	tst	r1, #8
   17e48:	bne	17f5c <__assert_fail@plt+0x54e0>
   17e4c:	bl	15f50 <__assert_fail@plt+0x34d4>
   17e50:	ldr	r1, [sl]
   17e54:	cmp	r1, #0
   17e58:	beq	17f20 <__assert_fail@plt+0x54a4>
   17e5c:	mov	lr, r5
   17e60:	mov	ip, #0
   17e64:	mov	r6, #0
   17e68:	mov	r8, #0
   17e6c:	ldr	r2, [r1, #156]	; 0x9c
   17e70:	cmp	r6, #0
   17e74:	str	ip, [r1, #156]	; 0x9c
   17e78:	beq	17ee4 <__assert_fail@plt+0x5468>
   17e7c:	ldr	r5, [r1, #160]	; 0xa0
   17e80:	mov	r3, r6
   17e84:	ldr	r4, [r5, #24]
   17e88:	ldr	r0, [r3, #160]	; 0xa0
   17e8c:	ldr	r7, [r0, #24]
   17e90:	cmp	r7, r4
   17e94:	bne	17ec8 <__assert_fail@plt+0x544c>
   17e98:	vldr	s0, [r5, #28]
   17e9c:	vldr	s2, [r0, #28]
   17ea0:	vcmp.f32	s2, s0
   17ea4:	vmrs	APSR_nzcv, fpscr
   17ea8:	beq	17ef4 <__assert_fail@plt+0x5478>
   17eac:	ldr	r0, [r3, #12]
   17eb0:	vcmpe.f32	s2, s0
   17eb4:	cmp	r0, #2
   17eb8:	bne	17ed0 <__assert_fail@plt+0x5454>
   17ebc:	vmrs	APSR_nzcv, fpscr
   17ec0:	bpl	17ed8 <__assert_fail@plt+0x545c>
   17ec4:	b	17ef4 <__assert_fail@plt+0x5478>
   17ec8:	bcc	17ed8 <__assert_fail@plt+0x545c>
   17ecc:	b	17ef4 <__assert_fail@plt+0x5478>
   17ed0:	vmrs	APSR_nzcv, fpscr
   17ed4:	bpl	17ef4 <__assert_fail@plt+0x5478>
   17ed8:	ldr	r3, [r3, #156]	; 0x9c
   17edc:	cmp	r3, #0
   17ee0:	bne	17e88 <__assert_fail@plt+0x540c>
   17ee4:	cmp	r8, #0
   17ee8:	str	r6, [r1, #156]	; 0x9c
   17eec:	mov	r6, r1
   17ef0:	b	17f04 <__assert_fail@plt+0x5488>
   17ef4:	ldr	r0, [r3, #156]	; 0x9c
   17ef8:	cmp	r0, #0
   17efc:	str	r0, [r1, #156]	; 0x9c
   17f00:	str	r1, [r3, #156]	; 0x9c
   17f04:	moveq	r8, r1
   17f08:	cmp	r2, #0
   17f0c:	mov	r1, r2
   17f10:	bne	17e6c <__assert_fail@plt+0x53f0>
   17f14:	mov	r5, lr
   17f18:	str	r2, [sl]
   17f1c:	b	17f28 <__assert_fail@plt+0x54ac>
   17f20:	mov	r8, #0
   17f24:	mov	r6, #0
   17f28:	ldrb	r0, [r5, #44]	; 0x2c
   17f2c:	tst	r0, #8
   17f30:	bne	17f94 <__assert_fail@plt+0x5518>
   17f34:	mov	r0, r6
   17f38:	bl	15f50 <__assert_fail@plt+0x34d4>
   17f3c:	ldr	r0, [r9]
   17f40:	str	r0, [r8, #156]	; 0x9c
   17f44:	mov	r0, #0
   17f48:	str	r6, [r9]
   17f4c:	str	r0, [sl]
   17f50:	str	r0, [sl, #4]
   17f54:	sub	sp, fp, #28
   17f58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f5c:	movw	r4, #54600	; 0xd548
   17f60:	movw	r1, #32276	; 0x7e14
   17f64:	movw	r2, #32281	; 0x7e19
   17f68:	movt	r4, #5
   17f6c:	movt	r1, #4
   17f70:	movt	r2, #4
   17f74:	ldr	r0, [r4]
   17f78:	bl	127c4 <fprintf@plt>
   17f7c:	ldr	r0, [r4]
   17f80:	ldr	r1, [sl]
   17f84:	mov	r2, #2
   17f88:	bl	16ac0 <__assert_fail@plt+0x4044>
   17f8c:	ldr	r0, [sl]
   17f90:	b	17e4c <__assert_fail@plt+0x53d0>
   17f94:	movw	r4, #54600	; 0xd548
   17f98:	movw	r1, #32276	; 0x7e14
   17f9c:	movw	r2, #32308	; 0x7e34
   17fa0:	movt	r4, #5
   17fa4:	movt	r1, #4
   17fa8:	movt	r2, #4
   17fac:	ldr	r0, [r4]
   17fb0:	bl	127c4 <fprintf@plt>
   17fb4:	ldr	r0, [r4]
   17fb8:	mov	r1, r6
   17fbc:	mov	r2, #2
   17fc0:	bl	16ac0 <__assert_fail@plt+0x4044>
   17fc4:	b	17f34 <__assert_fail@plt+0x54b8>
   17fc8:	push	{r4, r5, fp, lr}
   17fcc:	add	fp, sp, #8
   17fd0:	cmp	r0, #0
   17fd4:	beq	18008 <__assert_fail@plt+0x558c>
   17fd8:	mov	r4, r0
   17fdc:	mov	r5, #1
   17fe0:	ldrb	r0, [r4, #16]
   17fe4:	cmp	r0, #0
   17fe8:	bne	1800c <__assert_fail@plt+0x5590>
   17fec:	ldr	r0, [r4, #156]	; 0x9c
   17ff0:	bl	17fc8 <__assert_fail@plt+0x554c>
   17ff4:	cmp	r0, #0
   17ff8:	bne	1800c <__assert_fail@plt+0x5590>
   17ffc:	ldr	r4, [r4, #160]	; 0xa0
   18000:	cmp	r4, #0
   18004:	bne	17fe0 <__assert_fail@plt+0x5564>
   18008:	mov	r5, #0
   1800c:	mov	r0, r5
   18010:	pop	{r4, r5, fp, pc}
   18014:	cmp	r0, #0
   18018:	moveq	r0, #0
   1801c:	bxeq	lr
   18020:	push	{r4, r5, fp, lr}
   18024:	add	fp, sp, #8
   18028:	mov	r4, r0
   1802c:	ldr	r0, [r0, #156]	; 0x9c
   18030:	bl	18014 <__assert_fail@plt+0x5598>
   18034:	mov	r5, r0
   18038:	ldr	r0, [r4, #160]	; 0xa0
   1803c:	bl	18014 <__assert_fail@plt+0x5598>
   18040:	ldr	r1, [r4, #24]
   18044:	cmp	r5, r0
   18048:	movhi	r0, r5
   1804c:	cmp	r0, r1
   18050:	movcc	r0, r1
   18054:	pop	{r4, r5, fp, pc}
   18058:	push	{r4, r5, fp, lr}
   1805c:	add	fp, sp, #8
   18060:	mov	r4, r1
   18064:	mov	r1, r2
   18068:	mov	r5, r0
   1806c:	bl	17c28 <__assert_fail@plt+0x51ac>
   18070:	str	r4, [r0]
   18074:	mov	r2, #0
   18078:	mov	r3, #1
   1807c:	ldr	r1, [r5, #4]
   18080:	str	r2, [r0, #40]	; 0x28
   18084:	str	r2, [r0, #12]
   18088:	stmib	r0, {r1, r3}
   1808c:	pop	{r4, r5, fp, pc}
   18090:	push	{r4, r5, fp, lr}
   18094:	add	fp, sp, #8
   18098:	ldr	r5, [r0, #12]
   1809c:	cmp	r5, #0
   180a0:	beq	180cc <__assert_fail@plt+0x5650>
   180a4:	mov	r4, r0
   180a8:	bl	17c28 <__assert_fail@plt+0x51ac>
   180ac:	str	r5, [r0]
   180b0:	mov	r2, #0
   180b4:	mov	r3, #1
   180b8:	ldr	r1, [r4, #4]
   180bc:	str	r2, [r0, #40]	; 0x28
   180c0:	str	r2, [r0, #12]
   180c4:	stmib	r0, {r1, r3}
   180c8:	pop	{r4, r5, fp, pc}
   180cc:	movw	r0, #32976	; 0x80d0
   180d0:	movw	r1, #33001	; 0x80e9
   180d4:	movw	r3, #33008	; 0x80f0
   180d8:	mov	r2, #123	; 0x7b
   180dc:	movt	r0, #4
   180e0:	movt	r1, #4
   180e4:	movt	r3, #4
   180e8:	bl	12a7c <__assert_fail@plt>
   180ec:	push	{r4, r5, r6, sl, fp, lr}
   180f0:	add	fp, sp, #16
   180f4:	ldr	r5, [r0, #12]
   180f8:	cmp	r5, #0
   180fc:	beq	18128 <__assert_fail@plt+0x56ac>
   18100:	mov	r1, #0
   18104:	mov	r4, r0
   18108:	mov	r6, #0
   1810c:	bl	17c28 <__assert_fail@plt+0x51ac>
   18110:	str	r5, [r0]
   18114:	mov	r2, #1
   18118:	ldr	r1, [r4, #4]
   1811c:	str	r6, [r0, #40]	; 0x28
   18120:	stmib	r0, {r1, r2, r6}
   18124:	pop	{r4, r5, r6, sl, fp, pc}
   18128:	movw	r0, #32976	; 0x80d0
   1812c:	movw	r1, #33001	; 0x80e9
   18130:	movw	r3, #33008	; 0x80f0
   18134:	mov	r2, #123	; 0x7b
   18138:	movt	r0, #4
   1813c:	movt	r1, #4
   18140:	movt	r3, #4
   18144:	bl	12a7c <__assert_fail@plt>
   18148:	push	{fp, lr}
   1814c:	mov	fp, sp
   18150:	cmp	r0, #0
   18154:	bne	182c4 <__assert_fail@plt+0x5848>
   18158:	movw	r5, #54612	; 0xd554
   1815c:	movw	r1, #33123	; 0x8163
   18160:	mov	r0, #0
   18164:	mov	r2, #5
   18168:	movt	r5, #5
   1816c:	movt	r1, #4
   18170:	ldr	r4, [r5]
   18174:	bl	1253c <dcgettext@plt>
   18178:	movw	r6, #56580	; 0xdd04
   1817c:	mov	r1, r0
   18180:	mov	r0, r4
   18184:	movt	r6, #5
   18188:	ldr	r2, [r6]
   1818c:	bl	127c4 <fprintf@plt>
   18190:	movw	r1, #33197	; 0x81ad
   18194:	mov	r0, #0
   18198:	mov	r2, #5
   1819c:	movt	r1, #4
   181a0:	bl	1253c <dcgettext@plt>
   181a4:	ldr	r1, [r5]
   181a8:	bl	12a10 <fputs@plt>
   181ac:	movw	r1, #33335	; 0x8237
   181b0:	mov	r0, #0
   181b4:	mov	r2, #5
   181b8:	movt	r1, #4
   181bc:	bl	1253c <dcgettext@plt>
   181c0:	ldr	r1, [r5]
   181c4:	bl	12a10 <fputs@plt>
   181c8:	movw	r1, #33543	; 0x8307
   181cc:	mov	r0, #0
   181d0:	mov	r2, #5
   181d4:	movt	r1, #4
   181d8:	bl	1253c <dcgettext@plt>
   181dc:	ldr	r1, [r5]
   181e0:	bl	12a10 <fputs@plt>
   181e4:	movw	r1, #33628	; 0x835c
   181e8:	mov	r0, #0
   181ec:	mov	r2, #5
   181f0:	movt	r1, #4
   181f4:	bl	1253c <dcgettext@plt>
   181f8:	ldr	r1, [r5]
   181fc:	bl	12a10 <fputs@plt>
   18200:	movw	r1, #33833	; 0x8429
   18204:	mov	r0, #0
   18208:	mov	r2, #5
   1820c:	movt	r1, #4
   18210:	bl	1253c <dcgettext@plt>
   18214:	ldr	r1, [r5]
   18218:	bl	12a10 <fputs@plt>
   1821c:	movw	r1, #34374	; 0x8646
   18220:	mov	r0, #0
   18224:	mov	r2, #5
   18228:	movt	r1, #4
   1822c:	bl	1253c <dcgettext@plt>
   18230:	ldr	r1, [r5]
   18234:	bl	12a10 <fputs@plt>
   18238:	movw	r1, #34630	; 0x8746
   1823c:	mov	r0, #0
   18240:	mov	r2, #5
   18244:	movt	r1, #4
   18248:	bl	1253c <dcgettext@plt>
   1824c:	ldr	r1, [r5]
   18250:	bl	12a10 <fputs@plt>
   18254:	movw	r1, #34654	; 0x875e
   18258:	mov	r0, #0
   1825c:	mov	r2, #5
   18260:	movt	r1, #4
   18264:	bl	1253c <dcgettext@plt>
   18268:	ldr	r1, [r5]
   1826c:	bl	12a10 <fputs@plt>
   18270:	movw	r1, #34713	; 0x8799
   18274:	mov	r0, #0
   18278:	mov	r2, #5
   1827c:	movt	r1, #4
   18280:	bl	1253c <dcgettext@plt>
   18284:	ldr	r1, [r5]
   18288:	bl	12a10 <fputs@plt>
   1828c:	mov	r0, #0
   18290:	bl	18308 <__assert_fail@plt+0x588c>
   18294:	movw	r1, #34782	; 0x87de
   18298:	mov	r0, #0
   1829c:	mov	r2, #5
   182a0:	movt	r1, #4
   182a4:	bl	1253c <dcgettext@plt>
   182a8:	ldr	r1, [r5]
   182ac:	bl	12a10 <fputs@plt>
   182b0:	ldr	r0, [r5]
   182b4:	ldr	r1, [r6]
   182b8:	bl	22210 <__assert_fail@plt+0xf794>
   182bc:	mov	r0, #0
   182c0:	bl	12758 <exit@plt>
   182c4:	mov	r4, r0
   182c8:	movw	r0, #54600	; 0xd548
   182cc:	movw	r1, #33084	; 0x813c
   182d0:	mov	r2, #5
   182d4:	movt	r0, #5
   182d8:	movt	r1, #4
   182dc:	ldr	r5, [r0]
   182e0:	mov	r0, #0
   182e4:	bl	1253c <dcgettext@plt>
   182e8:	mov	r1, r0
   182ec:	movw	r0, #56580	; 0xdd04
   182f0:	movt	r0, #5
   182f4:	ldr	r2, [r0]
   182f8:	mov	r0, r5
   182fc:	bl	127c4 <fprintf@plt>
   18300:	mov	r0, r4
   18304:	bl	12758 <exit@plt>
   18308:	push	{r4, r5, r6, sl, fp, lr}
   1830c:	add	fp, sp, #16
   18310:	movw	r1, #35431	; 0x8a67
   18314:	mov	r4, r0
   18318:	mov	r0, #0
   1831c:	mov	r2, #5
   18320:	movt	r1, #4
   18324:	bl	1253c <dcgettext@plt>
   18328:	movw	r6, #54612	; 0xd554
   1832c:	movt	r6, #5
   18330:	ldr	r1, [r6]
   18334:	bl	12a10 <fputs@plt>
   18338:	ldr	r0, [r6]
   1833c:	cmp	r4, #0
   18340:	beq	18448 <__assert_fail@plt+0x59cc>
   18344:	movw	r4, #35456	; 0x8a80
   18348:	movw	r2, #39887	; 0x9bcf
   1834c:	movw	r3, #35469	; 0x8a8d
   18350:	movt	r4, #4
   18354:	movt	r2, #4
   18358:	movt	r3, #4
   1835c:	mov	r1, r4
   18360:	bl	127c4 <fprintf@plt>
   18364:	ldr	r0, [r6]
   18368:	movw	r2, #35541	; 0x8ad5
   1836c:	movw	r3, #35545	; 0x8ad9
   18370:	mov	r1, r4
   18374:	movt	r2, #4
   18378:	movt	r3, #4
   1837c:	bl	127c4 <fprintf@plt>
   18380:	ldr	r0, [r6]
   18384:	movw	r2, #35598	; 0x8b0e
   18388:	movw	r3, #35604	; 0x8b14
   1838c:	mov	r1, r4
   18390:	movt	r2, #4
   18394:	movt	r3, #4
   18398:	bl	127c4 <fprintf@plt>
   1839c:	ldr	r0, [r6]
   183a0:	movw	r2, #35648	; 0x8b40
   183a4:	movw	r3, #35655	; 0x8b47
   183a8:	mov	r1, r4
   183ac:	movt	r2, #4
   183b0:	movt	r3, #4
   183b4:	bl	127c4 <fprintf@plt>
   183b8:	ldr	r0, [r6]
   183bc:	movw	r2, #38980	; 0x9844
   183c0:	movw	r3, #35693	; 0x8b6d
   183c4:	mov	r1, r4
   183c8:	movt	r2, #4
   183cc:	movt	r3, #4
   183d0:	bl	127c4 <fprintf@plt>
   183d4:	ldr	r0, [r6]
   183d8:	movw	r2, #38896	; 0x97f0
   183dc:	movw	r3, #35729	; 0x8b91
   183e0:	mov	r1, r4
   183e4:	movt	r2, #4
   183e8:	movt	r3, #4
   183ec:	bl	127c4 <fprintf@plt>
   183f0:	ldr	r0, [r6]
   183f4:	movw	r2, #35830	; 0x8bf6
   183f8:	movw	r3, #35807	; 0x8bdf
   183fc:	mov	r1, r4
   18400:	movt	r2, #4
   18404:	movt	r3, #4
   18408:	bl	127c4 <fprintf@plt>
   1840c:	ldr	r0, [r6]
   18410:	movw	r2, #36895	; 0x901f
   18414:	movw	r3, #35835	; 0x8bfb
   18418:	mov	r1, r4
   1841c:	movt	r2, #4
   18420:	movt	r3, #4
   18424:	bl	127c4 <fprintf@plt>
   18428:	ldr	r0, [r6]
   1842c:	movw	r2, #39359	; 0x99bf
   18430:	movw	r3, #35873	; 0x8c21
   18434:	mov	r1, r4
   18438:	movt	r2, #4
   1843c:	movt	r3, #4
   18440:	pop	{r4, r5, r6, sl, fp, lr}
   18444:	b	127c4 <fprintf@plt>
   18448:	movw	r4, #29079	; 0x7197
   1844c:	movw	r2, #34847	; 0x881f
   18450:	movw	r3, #39887	; 0x9bcf
   18454:	movt	r4, #4
   18458:	movt	r2, #4
   1845c:	movt	r3, #4
   18460:	mov	r1, r4
   18464:	bl	127c4 <fprintf@plt>
   18468:	ldr	r0, [r6]
   1846c:	movw	r5, #35466	; 0x8a8a
   18470:	movw	r3, #35541	; 0x8ad5
   18474:	mov	r1, r4
   18478:	movt	r5, #4
   1847c:	movt	r3, #4
   18480:	mov	r2, r5
   18484:	bl	127c4 <fprintf@plt>
   18488:	ldr	r0, [r6]
   1848c:	movw	r3, #35598	; 0x8b0e
   18490:	mov	r1, r4
   18494:	mov	r2, r5
   18498:	movt	r3, #4
   1849c:	bl	127c4 <fprintf@plt>
   184a0:	ldr	r0, [r6]
   184a4:	movw	r3, #35648	; 0x8b40
   184a8:	mov	r1, r4
   184ac:	mov	r2, r5
   184b0:	movt	r3, #4
   184b4:	bl	127c4 <fprintf@plt>
   184b8:	ldr	r0, [r6]
   184bc:	movw	r3, #38980	; 0x9844
   184c0:	mov	r1, r4
   184c4:	mov	r2, r5
   184c8:	movt	r3, #4
   184cc:	bl	127c4 <fprintf@plt>
   184d0:	ldr	r0, [r6]
   184d4:	movw	r3, #38896	; 0x97f0
   184d8:	mov	r1, r4
   184dc:	mov	r2, r5
   184e0:	movt	r3, #4
   184e4:	bl	127c4 <fprintf@plt>
   184e8:	ldr	r0, [r6]
   184ec:	movw	r3, #35830	; 0x8bf6
   184f0:	mov	r1, r4
   184f4:	mov	r2, r5
   184f8:	movt	r3, #4
   184fc:	bl	127c4 <fprintf@plt>
   18500:	ldr	r0, [r6]
   18504:	movw	r3, #36895	; 0x901f
   18508:	mov	r1, r4
   1850c:	mov	r2, r5
   18510:	movt	r3, #4
   18514:	bl	127c4 <fprintf@plt>
   18518:	ldr	r0, [r6]
   1851c:	movw	r3, #39359	; 0x99bf
   18520:	mov	r1, r4
   18524:	mov	r2, r5
   18528:	movt	r3, #4
   1852c:	pop	{r4, r5, r6, sl, fp, lr}
   18530:	b	127c4 <fprintf@plt>
   18534:	bx	lr
   18538:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1853c:	add	fp, sp, #24
   18540:	movw	r7, #56896	; 0xde40
   18544:	mov	r5, r0
   18548:	mov	r4, r2
   1854c:	movt	r7, #5
   18550:	ldrb	r0, [r7, #4]
   18554:	cmp	r0, #0
   18558:	beq	18578 <__assert_fail@plt+0x5afc>
   1855c:	add	r4, r4, #16
   18560:	movw	r0, #257	; 0x101
   18564:	strh	r0, [r7, #4]
   18568:	ldr	r0, [r4]
   1856c:	str	r0, [r7, #8]
   18570:	mov	r0, #0
   18574:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18578:	movw	r8, #56940	; 0xde6c
   1857c:	mov	r6, r1
   18580:	mov	r0, r1
   18584:	mov	r1, r4
   18588:	movt	r8, #5
   1858c:	ldr	r2, [r8, #52]	; 0x34
   18590:	blx	r2
   18594:	cmp	r0, #0
   18598:	beq	18610 <__assert_fail@plt+0x5b94>
   1859c:	ldrb	r0, [r8, #14]
   185a0:	cmp	r0, #0
   185a4:	beq	185bc <__assert_fail@plt+0x5b40>
   185a8:	bl	127d0 <__errno_location@plt>
   185ac:	ldr	r1, [r0]
   185b0:	mvn	r0, #0
   185b4:	cmp	r1, #2
   185b8:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   185bc:	ldrb	r0, [r7, #40]	; 0x28
   185c0:	cmp	r0, #0
   185c4:	bne	18600 <__assert_fail@plt+0x5b84>
   185c8:	bl	127d0 <__errno_location@plt>
   185cc:	ldr	r1, [r8, #72]	; 0x48
   185d0:	ldr	r4, [r0]
   185d4:	mov	r0, #0
   185d8:	mov	r2, r5
   185dc:	bl	2c45c <__assert_fail@plt+0x199e0>
   185e0:	movw	r2, #52175	; 0xcbcf
   185e4:	mov	r3, r0
   185e8:	mov	r0, #0
   185ec:	mov	r1, r4
   185f0:	movt	r2, #4
   185f4:	bl	12674 <error@plt>
   185f8:	mov	r0, #1
   185fc:	str	r0, [r7, #28]
   18600:	mov	r0, #1
   18604:	strb	r0, [r7, #40]	; 0x28
   18608:	mvn	r0, #0
   1860c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18610:	ldr	r0, [r4, #16]!
   18614:	cmp	r0, #0
   18618:	bne	18560 <__assert_fail@plt+0x5ae4>
   1861c:	movw	r1, #27964	; 0x6d3c
   18620:	mov	r0, #0
   18624:	mov	r2, #5
   18628:	movt	r1, #4
   1862c:	bl	1253c <dcgettext@plt>
   18630:	ldr	r1, [r8, #72]	; 0x48
   18634:	mov	r5, r0
   18638:	mov	r0, #0
   1863c:	mov	r2, r6
   18640:	bl	2c45c <__assert_fail@plt+0x199e0>
   18644:	mov	r3, r0
   18648:	mov	r0, #0
   1864c:	mov	r1, #0
   18650:	mov	r2, r5
   18654:	bl	12674 <error@plt>
   18658:	mov	r0, #1
   1865c:	str	r0, [r7, #28]
   18660:	b	18560 <__assert_fail@plt+0x5ae4>
   18664:	push	{r4, r5, fp, lr}
   18668:	add	fp, sp, #8
   1866c:	movw	r5, #56896	; 0xde40
   18670:	mov	r4, r0
   18674:	movt	r5, #5
   18678:	ldrb	r0, [r5, #40]	; 0x28
   1867c:	cmp	r0, #0
   18680:	bne	186bc <__assert_fail@plt+0x5c40>
   18684:	movw	r0, #56940	; 0xde6c
   18688:	mov	r2, r1
   1868c:	movt	r0, #5
   18690:	ldr	r1, [r0, #72]	; 0x48
   18694:	mov	r0, #0
   18698:	bl	2c45c <__assert_fail@plt+0x199e0>
   1869c:	movw	r2, #52175	; 0xcbcf
   186a0:	mov	r3, r0
   186a4:	mov	r0, #0
   186a8:	mov	r1, r4
   186ac:	movt	r2, #4
   186b0:	bl	12674 <error@plt>
   186b4:	mov	r0, #1
   186b8:	str	r0, [r5, #28]
   186bc:	mov	r0, #1
   186c0:	strb	r0, [r5, #40]	; 0x28
   186c4:	pop	{r4, r5, fp, pc}
   186c8:	push	{r4, r5, r6, r7, fp, lr}
   186cc:	add	fp, sp, #16
   186d0:	vpush	{d8}
   186d4:	sub	sp, sp, #392	; 0x188
   186d8:	mov	r5, sp
   186dc:	mov	r0, r5
   186e0:	bl	12524 <uname@plt>
   186e4:	cmp	r0, #0
   186e8:	beq	186f4 <__assert_fail@plt+0x5c78>
   186ec:	mov	r4, #1
   186f0:	b	1875c <__assert_fail@plt+0x5ce0>
   186f4:	add	r0, r5, #130	; 0x82
   186f8:	mov	r1, #0
   186fc:	mov	r4, #0
   18700:	bl	1283c <strtod@plt>
   18704:	movw	r0, #34848	; 0x8820
   18708:	mov	r1, r5
   1870c:	vcvt.f32.f64	s16, d0
   18710:	movt	r0, #4
   18714:	bl	123d4 <strcmp@plt>
   18718:	cmp	r0, #0
   1871c:	beq	1874c <__assert_fail@plt+0x5cd0>
   18720:	vldr	s0, [pc, #68]	; 1876c <__assert_fail@plt+0x5cf0>
   18724:	movw	r0, #34854	; 0x8826
   18728:	mov	r1, sp
   1872c:	movt	r0, #4
   18730:	vcmpe.f32	s16, s0
   18734:	vmrs	APSR_nzcv, fpscr
   18738:	movwge	r4, #1
   1873c:	bl	123d4 <strcmp@plt>
   18740:	cmp	r0, #0
   18744:	movne	r4, #1
   18748:	b	1875c <__assert_fail@plt+0x5ce0>
   1874c:	vldr	s0, [pc, #28]	; 18770 <__assert_fail@plt+0x5cf4>
   18750:	vcmpe.f32	s16, s0
   18754:	vmrs	APSR_nzcv, fpscr
   18758:	movwge	r4, #1
   1875c:	mov	r0, r4
   18760:	sub	sp, fp, #24
   18764:	vpop	{d8}
   18768:	pop	{r4, r5, r6, r7, fp, pc}
   1876c:	submi	r6, r6, r6, ror #12
   18770:	andmi	ip, ip, sp, asr #25
   18774:	push	{r4, sl, fp, lr}
   18778:	add	fp, sp, #8
   1877c:	movw	r4, #56896	; 0xde40
   18780:	movt	r4, #5
   18784:	ldrb	r0, [r4, #32]
   18788:	cmp	r0, #0
   1878c:	popeq	{r4, sl, fp, pc}
   18790:	bl	15f40 <__assert_fail@plt+0x34c4>
   18794:	bl	187a4 <__assert_fail@plt+0x5d28>
   18798:	mov	r0, #0
   1879c:	strb	r0, [r4, #32]
   187a0:	pop	{r4, sl, fp, pc}
   187a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187a8:	add	fp, sp, #28
   187ac:	sub	sp, sp, #4
   187b0:	cmp	r0, #0
   187b4:	beq	18864 <__assert_fail@plt+0x5de8>
   187b8:	movw	r6, #56896	; 0xde40
   187bc:	movw	r7, #16824	; 0x41b8
   187c0:	movw	r8, #39532	; 0x9a6c
   187c4:	movw	sl, #54632	; 0xd568
   187c8:	movw	r5, #18828	; 0x498c
   187cc:	mov	r4, r0
   187d0:	mov	r9, #0
   187d4:	movt	r6, #5
   187d8:	movt	r7, #1
   187dc:	movt	r8, #1
   187e0:	movt	sl, #5
   187e4:	movt	r5, #1
   187e8:	b	1881c <__assert_fail@plt+0x5da0>
   187ec:	ldr	r0, [r4, #144]	; 0x90
   187f0:	mov	r1, r8
   187f4:	bl	207ec <__assert_fail@plt+0xdd70>
   187f8:	ldr	r0, [r4, #144]	; 0x90
   187fc:	ldr	r1, [sl]
   18800:	cmp	r0, r1
   18804:	beq	18858 <__assert_fail@plt+0x5ddc>
   18808:	bl	2cbdc <__assert_fail@plt+0x1a160>
   1880c:	ldr	r0, [r4, #144]	; 0x90
   18810:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   18814:	str	r9, [r4, #144]	; 0x90
   18818:	b	18858 <__assert_fail@plt+0x5ddc>
   1881c:	ldrb	r0, [r6, #32]
   18820:	cmp	r0, #0
   18824:	beq	1886c <__assert_fail@plt+0x5df0>
   18828:	ldr	r0, [r4, #156]	; 0x9c
   1882c:	bl	187a4 <__assert_fail@plt+0x5d28>
   18830:	ldr	r0, [r4]
   18834:	cmp	r0, r7
   18838:	cmpne	r0, r5
   1883c:	bne	18858 <__assert_fail@plt+0x5ddc>
   18840:	mov	r2, r4
   18844:	ldrb	r0, [r2, #40]!	; 0x28
   18848:	cmp	r0, #0
   1884c:	ldrne	r0, [r4, #116]	; 0x74
   18850:	cmpne	r0, #0
   18854:	bne	187ec <__assert_fail@plt+0x5d70>
   18858:	ldr	r4, [r4, #160]	; 0xa0
   1885c:	cmp	r4, #0
   18860:	bne	1881c <__assert_fail@plt+0x5da0>
   18864:	sub	sp, fp, #28
   18868:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1886c:	movw	r0, #35904	; 0x8c40
   18870:	movw	r1, #33001	; 0x80e9
   18874:	movw	r3, #35931	; 0x8c5b
   18878:	mov	r2, #396	; 0x18c
   1887c:	movt	r0, #4
   18880:	movt	r1, #4
   18884:	movt	r3, #4
   18888:	bl	12a7c <__assert_fail@plt>
   1888c:	push	{r4, r5, fp, lr}
   18890:	add	fp, sp, #8
   18894:	cmp	r0, #0
   18898:	popeq	{r4, r5, fp, pc}
   1889c:	movw	r5, #16820	; 0x41b4
   188a0:	mov	r4, r0
   188a4:	movt	r5, #1
   188a8:	ldr	r0, [r4, #156]	; 0x9c
   188ac:	bl	1888c <__assert_fail@plt+0x5e10>
   188b0:	ldr	r0, [r4]
   188b4:	cmp	r0, r5
   188b8:	bne	188e0 <__assert_fail@plt+0x5e64>
   188bc:	mov	r0, r4
   188c0:	ldrb	r1, [r0, #40]!	; 0x28
   188c4:	cmp	r1, #0
   188c8:	ldrne	r1, [r4, #116]	; 0x74
   188cc:	cmpne	r1, #0
   188d0:	beq	188e0 <__assert_fail@plt+0x5e64>
   188d4:	add	r0, r0, #4
   188d8:	add	r1, r4, #88	; 0x58
   188dc:	bl	200b0 <__assert_fail@plt+0xd634>
   188e0:	ldr	r4, [r4, #160]	; 0xa0
   188e4:	cmp	r4, #0
   188e8:	bne	188a8 <__assert_fail@plt+0x5e2c>
   188ec:	pop	{r4, r5, fp, pc}
   188f0:	push	{r4, r5, fp, lr}
   188f4:	add	fp, sp, #8
   188f8:	sub	sp, sp, #8
   188fc:	mov	r0, #8
   18900:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   18904:	movw	r5, #54632	; 0xd568
   18908:	movt	r5, #5
   1890c:	str	r0, [r5]
   18910:	bl	2cb64 <__assert_fail@plt+0x1a0e8>
   18914:	cmp	r0, #0
   18918:	subeq	sp, fp, #8
   1891c:	popeq	{r4, r5, fp, pc}
   18920:	bl	127d0 <__errno_location@plt>
   18924:	ldr	r4, [r0]
   18928:	movw	r1, #34862	; 0x882e
   1892c:	mov	r0, #0
   18930:	mov	r2, #5
   18934:	movt	r1, #4
   18938:	bl	1253c <dcgettext@plt>
   1893c:	mov	r2, r0
   18940:	ldr	r0, [r5]
   18944:	ldr	r1, [r0]
   18948:	cmn	r1, #1
   1894c:	bgt	18974 <__assert_fail@plt+0x5ef8>
   18950:	ldr	r0, [r0, #4]
   18954:	movw	r1, #34847	; 0x881f
   18958:	movw	r3, #42360	; 0xa578
   1895c:	movt	r1, #4
   18960:	movt	r3, #4
   18964:	cmp	r0, #0
   18968:	moveq	r3, r1
   1896c:	moveq	r0, r1
   18970:	b	18980 <__assert_fail@plt+0x5f04>
   18974:	movw	r3, #34847	; 0x881f
   18978:	movt	r3, #4
   1897c:	mov	r0, r3
   18980:	str	r0, [sp]
   18984:	mov	r0, #1
   18988:	mov	r1, r4
   1898c:	bl	12674 <error@plt>
   18990:	push	{r4, r5, fp, lr}
   18994:	add	fp, sp, #8
   18998:	sub	sp, sp, #8
   1899c:	bl	15f40 <__assert_fail@plt+0x34c4>
   189a0:	cmp	r0, #0
   189a4:	beq	189f8 <__assert_fail@plt+0x5f7c>
   189a8:	movw	r1, #34956	; 0x888c
   189ac:	mov	r4, r0
   189b0:	movt	r1, #1
   189b4:	bl	18b38 <__assert_fail@plt+0x60bc>
   189b8:	movw	r5, #56896	; 0xde40
   189bc:	movt	r5, #5
   189c0:	ldrb	r0, [r5, #32]
   189c4:	cmp	r0, #0
   189c8:	beq	189dc <__assert_fail@plt+0x5f60>
   189cc:	bl	15f40 <__assert_fail@plt+0x34c4>
   189d0:	bl	187a4 <__assert_fail@plt+0x5d28>
   189d4:	mov	r0, #0
   189d8:	strb	r0, [r5, #32]
   189dc:	ldr	r0, [r5, #36]	; 0x24
   189e0:	bl	19bec <__assert_fail@plt+0x7170>
   189e4:	movw	r1, #35696	; 0x8b70
   189e8:	mov	r0, r4
   189ec:	movt	r1, #1
   189f0:	bl	18b38 <__assert_fail@plt+0x60bc>
   189f4:	b	18a08 <__assert_fail@plt+0x5f8c>
   189f8:	movw	r0, #56896	; 0xde40
   189fc:	movt	r0, #5
   18a00:	ldr	r0, [r0, #36]	; 0x24
   18a04:	bl	19bec <__assert_fail@plt+0x7170>
   18a08:	movw	r5, #54632	; 0xd568
   18a0c:	movt	r5, #5
   18a10:	ldr	r0, [r5]
   18a14:	bl	2cbc0 <__assert_fail@plt+0x1a144>
   18a18:	cmp	r0, #0
   18a1c:	bne	18ac0 <__assert_fail@plt+0x6044>
   18a20:	ldr	r0, [r5]
   18a24:	bl	2cbdc <__assert_fail@plt+0x1a160>
   18a28:	ldr	r0, [r5]
   18a2c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   18a30:	mov	r0, #0
   18a34:	str	r0, [r5]
   18a38:	bl	20e4c <__assert_fail@plt+0xe3d0>
   18a3c:	cmp	r0, #0
   18a40:	beq	18a4c <__assert_fail@plt+0x5fd0>
   18a44:	bl	20e6c <__assert_fail@plt+0xe3f0>
   18a48:	bl	20e1c <__assert_fail@plt+0xe3a0>
   18a4c:	movw	r0, #54612	; 0xd554
   18a50:	movt	r0, #5
   18a54:	ldr	r0, [r0]
   18a58:	bl	2fd10 <__assert_fail@plt+0x1d294>
   18a5c:	cmn	r0, #1
   18a60:	beq	18a6c <__assert_fail@plt+0x5ff0>
   18a64:	sub	sp, fp, #8
   18a68:	pop	{r4, r5, fp, pc}
   18a6c:	bl	127d0 <__errno_location@plt>
   18a70:	ldr	r4, [r0]
   18a74:	movw	r0, #56940	; 0xde6c
   18a78:	movw	r2, #34907	; 0x885b
   18a7c:	movt	r0, #5
   18a80:	movt	r2, #4
   18a84:	ldr	r1, [r0, #72]	; 0x48
   18a88:	mov	r0, #0
   18a8c:	bl	2c45c <__assert_fail@plt+0x199e0>
   18a90:	movw	r2, #52175	; 0xcbcf
   18a94:	mov	r3, r0
   18a98:	mov	r0, #0
   18a9c:	mov	r1, r4
   18aa0:	movt	r2, #4
   18aa4:	bl	12674 <error@plt>
   18aa8:	movw	r0, #56896	; 0xde40
   18aac:	mov	r1, #1
   18ab0:	movt	r0, #5
   18ab4:	str	r1, [r0, #28]
   18ab8:	sub	sp, fp, #8
   18abc:	pop	{r4, r5, fp, pc}
   18ac0:	bl	127d0 <__errno_location@plt>
   18ac4:	ldr	r4, [r0]
   18ac8:	movw	r1, #35985	; 0x8c91
   18acc:	mov	r0, #0
   18ad0:	mov	r2, #5
   18ad4:	movt	r1, #4
   18ad8:	bl	1253c <dcgettext@plt>
   18adc:	mov	r2, r0
   18ae0:	ldr	r0, [r5]
   18ae4:	ldr	r1, [r0]
   18ae8:	cmn	r1, #1
   18aec:	bgt	18b14 <__assert_fail@plt+0x6098>
   18af0:	ldr	r0, [r0, #4]
   18af4:	movw	r1, #34847	; 0x881f
   18af8:	movw	r3, #42360	; 0xa578
   18afc:	movt	r1, #4
   18b00:	movt	r3, #4
   18b04:	cmp	r0, #0
   18b08:	moveq	r3, r1
   18b0c:	moveq	r0, r1
   18b10:	b	18b20 <__assert_fail@plt+0x60a4>
   18b14:	movw	r3, #34847	; 0x881f
   18b18:	movt	r3, #4
   18b1c:	mov	r0, r3
   18b20:	str	r0, [sp]
   18b24:	mov	r0, #0
   18b28:	mov	r1, r4
   18b2c:	bl	12674 <error@plt>
   18b30:	mov	r0, #1
   18b34:	bl	124ac <_exit@plt>
   18b38:	push	{r4, r5, fp, lr}
   18b3c:	add	fp, sp, #8
   18b40:	mov	r4, r1
   18b44:	mov	r5, r0
   18b48:	ldr	r0, [r5, #156]	; 0x9c
   18b4c:	cmp	r0, #0
   18b50:	movne	r1, r4
   18b54:	blne	18b38 <__assert_fail@plt+0x60bc>
   18b58:	mov	r0, r5
   18b5c:	blx	r4
   18b60:	ldr	r5, [r5, #160]	; 0xa0
   18b64:	cmp	r5, #0
   18b68:	popeq	{r4, r5, fp, pc}
   18b6c:	b	18b48 <__assert_fail@plt+0x60cc>
   18b70:	ldr	r1, [r0]
   18b74:	movw	r2, #17000	; 0x4268
   18b78:	movt	r2, #1
   18b7c:	cmp	r1, r2
   18b80:	beq	18bb0 <__assert_fail@plt+0x6134>
   18b84:	movw	r2, #16848	; 0x41d0
   18b88:	movt	r2, #1
   18b8c:	cmp	r1, r2
   18b90:	movwne	r2, #16940	; 0x422c
   18b94:	movtne	r2, #1
   18b98:	cmpne	r1, r2
   18b9c:	beq	18bb0 <__assert_fail@plt+0x6134>
   18ba0:	movw	r2, #42800	; 0xa730
   18ba4:	movt	r2, #1
   18ba8:	cmp	r1, r2
   18bac:	bxne	lr
   18bb0:	mov	r1, #0
   18bb4:	str	r1, [r0, #44]	; 0x2c
   18bb8:	bx	lr
   18bbc:	push	{r4, sl, fp, lr}
   18bc0:	add	fp, sp, #8
   18bc4:	mov	r4, r0
   18bc8:	movw	r0, #56940	; 0xde6c
   18bcc:	mov	r2, r1
   18bd0:	movt	r0, #5
   18bd4:	ldr	r1, [r0, #72]	; 0x48
   18bd8:	mov	r0, #0
   18bdc:	bl	2c45c <__assert_fail@plt+0x199e0>
   18be0:	movw	r2, #52175	; 0xcbcf
   18be4:	mov	r3, r0
   18be8:	mov	r0, #0
   18bec:	mov	r1, r4
   18bf0:	movt	r2, #4
   18bf4:	bl	12674 <error@plt>
   18bf8:	movw	r0, #56896	; 0xde40
   18bfc:	mov	r1, #1
   18c00:	movt	r0, #5
   18c04:	str	r1, [r0, #28]
   18c08:	pop	{r4, sl, fp, pc}
   18c0c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18c10:	add	fp, sp, #24
   18c14:	sub	sp, sp, #8
   18c18:	movw	r8, #56896	; 0xde40
   18c1c:	mov	r4, r1
   18c20:	mov	r5, r0
   18c24:	movt	r8, #5
   18c28:	ldr	r1, [r8, #16]
   18c2c:	cmn	r1, #100	; 0x64
   18c30:	beq	18c3c <__assert_fail@plt+0x61c0>
   18c34:	cmn	r1, #1
   18c38:	ble	18cf0 <__assert_fail@plt+0x6274>
   18c3c:	ldr	r0, [r8]
   18c40:	cmp	r0, #0
   18c44:	beq	18c68 <__assert_fail@plt+0x61ec>
   18c48:	mov	r0, #256	; 0x100
   18c4c:	mov	r2, r5
   18c50:	mov	r3, r4
   18c54:	str	r0, [sp]
   18c58:	mov	r0, #3
   18c5c:	bl	125b4 <__fxstatat64@plt>
   18c60:	sub	sp, fp, #24
   18c64:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18c68:	mov	r6, #0
   18c6c:	mov	r0, #3
   18c70:	mov	r2, r5
   18c74:	mov	r3, r4
   18c78:	str	r6, [sp]
   18c7c:	bl	125b4 <__fxstatat64@plt>
   18c80:	cmp	r0, #0
   18c84:	beq	18cc4 <__assert_fail@plt+0x6248>
   18c88:	mov	r7, r0
   18c8c:	bl	127d0 <__errno_location@plt>
   18c90:	ldr	r0, [r0]
   18c94:	cmp	r0, #20
   18c98:	beq	18ca8 <__assert_fail@plt+0x622c>
   18c9c:	cmp	r0, #2
   18ca0:	mov	r6, r7
   18ca4:	bne	18cc4 <__assert_fail@plt+0x6248>
   18ca8:	movw	r0, #56940	; 0xde6c
   18cac:	movt	r0, #5
   18cb0:	ldrb	r0, [r0, #44]	; 0x2c
   18cb4:	tst	r0, #2
   18cb8:	bne	18cd0 <__assert_fail@plt+0x6254>
   18cbc:	ldr	r1, [r8, #16]
   18cc0:	b	18c48 <__assert_fail@plt+0x61cc>
   18cc4:	mov	r0, r6
   18cc8:	sub	sp, fp, #24
   18ccc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18cd0:	movw	r0, #54600	; 0xd548
   18cd4:	movw	r1, #36033	; 0x8cc1
   18cd8:	mov	r2, r5
   18cdc:	movt	r0, #5
   18ce0:	movt	r1, #4
   18ce4:	ldr	r0, [r0]
   18ce8:	bl	127c4 <fprintf@plt>
   18cec:	b	18cbc <__assert_fail@plt+0x6240>
   18cf0:	movw	r0, #34923	; 0x886b
   18cf4:	movw	r1, #33001	; 0x80e9
   18cf8:	movw	r3, #34945	; 0x8881
   18cfc:	movw	r2, #605	; 0x25d
   18d00:	movt	r0, #4
   18d04:	movt	r1, #4
   18d08:	movt	r3, #4
   18d0c:	bl	12a7c <__assert_fail@plt>
   18d10:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18d14:	add	fp, sp, #24
   18d18:	sub	sp, sp, #8
   18d1c:	movw	r8, #56896	; 0xde40
   18d20:	mov	r4, r1
   18d24:	mov	r5, r0
   18d28:	movt	r8, #5
   18d2c:	ldr	r1, [r8, #16]
   18d30:	cmn	r1, #100	; 0x64
   18d34:	beq	18d40 <__assert_fail@plt+0x62c4>
   18d38:	cmn	r1, #1
   18d3c:	ble	18de4 <__assert_fail@plt+0x6368>
   18d40:	mov	r6, #0
   18d44:	mov	r0, #3
   18d48:	mov	r2, r5
   18d4c:	mov	r3, r4
   18d50:	str	r6, [sp]
   18d54:	bl	125b4 <__fxstatat64@plt>
   18d58:	cmp	r0, #0
   18d5c:	beq	18db8 <__assert_fail@plt+0x633c>
   18d60:	mov	r7, r0
   18d64:	bl	127d0 <__errno_location@plt>
   18d68:	ldr	r0, [r0]
   18d6c:	cmp	r0, #20
   18d70:	beq	18d80 <__assert_fail@plt+0x6304>
   18d74:	cmp	r0, #2
   18d78:	mov	r6, r7
   18d7c:	bne	18db8 <__assert_fail@plt+0x633c>
   18d80:	movw	r0, #56940	; 0xde6c
   18d84:	movt	r0, #5
   18d88:	ldrb	r0, [r0, #44]	; 0x2c
   18d8c:	tst	r0, #2
   18d90:	bne	18dc4 <__assert_fail@plt+0x6348>
   18d94:	ldr	r1, [r8, #16]
   18d98:	mov	r0, #256	; 0x100
   18d9c:	mov	r2, r5
   18da0:	mov	r3, r4
   18da4:	str	r0, [sp]
   18da8:	mov	r0, #3
   18dac:	bl	125b4 <__fxstatat64@plt>
   18db0:	sub	sp, fp, #24
   18db4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18db8:	mov	r0, r6
   18dbc:	sub	sp, fp, #24
   18dc0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18dc4:	movw	r0, #54600	; 0xd548
   18dc8:	movw	r1, #36033	; 0x8cc1
   18dcc:	mov	r2, r5
   18dd0:	movt	r0, #5
   18dd4:	movt	r1, #4
   18dd8:	ldr	r0, [r0]
   18ddc:	bl	127c4 <fprintf@plt>
   18de0:	b	18d94 <__assert_fail@plt+0x6318>
   18de4:	movw	r0, #34923	; 0x886b
   18de8:	movw	r1, #33001	; 0x80e9
   18dec:	movw	r3, #34991	; 0x88af
   18df0:	mov	r2, #636	; 0x27c
   18df4:	movt	r0, #4
   18df8:	movt	r1, #4
   18dfc:	movt	r3, #4
   18e00:	bl	12a7c <__assert_fail@plt>
   18e04:	push	{fp, lr}
   18e08:	mov	fp, sp
   18e0c:	sub	sp, sp, #8
   18e10:	mov	r2, r0
   18e14:	movw	r0, #56896	; 0xde40
   18e18:	mov	r3, r1
   18e1c:	movt	r0, #5
   18e20:	ldr	r1, [r0, #16]
   18e24:	cmn	r1, #1
   18e28:	bgt	18e34 <__assert_fail@plt+0x63b8>
   18e2c:	cmn	r1, #100	; 0x64
   18e30:	bne	18e4c <__assert_fail@plt+0x63d0>
   18e34:	mov	r0, #256	; 0x100
   18e38:	str	r0, [sp]
   18e3c:	mov	r0, #3
   18e40:	bl	125b4 <__fxstatat64@plt>
   18e44:	mov	sp, fp
   18e48:	pop	{fp, pc}
   18e4c:	movw	r0, #35037	; 0x88dd
   18e50:	movw	r1, #33001	; 0x80e9
   18e54:	movw	r3, #35093	; 0x8915
   18e58:	movw	r2, #653	; 0x28d
   18e5c:	movt	r0, #4
   18e60:	movt	r1, #4
   18e64:	movt	r3, #4
   18e68:	bl	12a7c <__assert_fail@plt>
   18e6c:	push	{r4, r5, fp, lr}
   18e70:	add	fp, sp, #8
   18e74:	sub	sp, sp, #8
   18e78:	mov	r5, r0
   18e7c:	movw	r0, #54672	; 0xd590
   18e80:	mov	r4, r1
   18e84:	movw	r1, #35139	; 0x8943
   18e88:	movt	r0, #5
   18e8c:	movt	r1, #4
   18e90:	ldrd	r2, [r0]
   18e94:	adds	r2, r2, #1
   18e98:	adc	r3, r3, #0
   18e9c:	strd	r2, [r0]
   18ea0:	movw	r0, #54600	; 0xd548
   18ea4:	mov	r2, r5
   18ea8:	movt	r0, #5
   18eac:	ldr	r0, [r0]
   18eb0:	bl	127c4 <fprintf@plt>
   18eb4:	movw	r0, #56940	; 0xde6c
   18eb8:	movt	r0, #5
   18ebc:	ldr	r0, [r0, #48]	; 0x30
   18ec0:	cmp	r0, #0
   18ec4:	beq	18f00 <__assert_fail@plt+0x6484>
   18ec8:	cmp	r0, #2
   18ecc:	beq	18eec <__assert_fail@plt+0x6470>
   18ed0:	cmp	r0, #1
   18ed4:	bne	18f3c <__assert_fail@plt+0x64c0>
   18ed8:	mov	r0, r5
   18edc:	mov	r1, r4
   18ee0:	sub	sp, fp, #8
   18ee4:	pop	{r4, r5, fp, lr}
   18ee8:	b	18d10 <__assert_fail@plt+0x6294>
   18eec:	mov	r0, r5
   18ef0:	mov	r1, r4
   18ef4:	sub	sp, fp, #8
   18ef8:	pop	{r4, r5, fp, lr}
   18efc:	b	18c0c <__assert_fail@plt+0x6190>
   18f00:	movw	r0, #56896	; 0xde40
   18f04:	movt	r0, #5
   18f08:	ldr	r1, [r0, #16]
   18f0c:	cmn	r1, #1
   18f10:	bgt	18f1c <__assert_fail@plt+0x64a0>
   18f14:	cmn	r1, #100	; 0x64
   18f18:	bne	18f5c <__assert_fail@plt+0x64e0>
   18f1c:	mov	r0, #256	; 0x100
   18f20:	mov	r2, r5
   18f24:	mov	r3, r4
   18f28:	str	r0, [sp]
   18f2c:	mov	r0, #3
   18f30:	bl	125b4 <__fxstatat64@plt>
   18f34:	sub	sp, fp, #8
   18f38:	pop	{r4, r5, fp, pc}
   18f3c:	movw	r0, #32073	; 0x7d49
   18f40:	movw	r1, #33001	; 0x80e9
   18f44:	movw	r3, #35156	; 0x8954
   18f48:	movw	r2, #677	; 0x2a5
   18f4c:	movt	r0, #4
   18f50:	movt	r1, #4
   18f54:	movt	r3, #4
   18f58:	bl	12a7c <__assert_fail@plt>
   18f5c:	movw	r0, #35037	; 0x88dd
   18f60:	movw	r1, #33001	; 0x80e9
   18f64:	movw	r3, #35093	; 0x8915
   18f68:	movw	r2, #653	; 0x28d
   18f6c:	movt	r0, #4
   18f70:	movt	r1, #4
   18f74:	movt	r3, #4
   18f78:	bl	12a7c <__assert_fail@plt>
   18f7c:	movw	r0, #56940	; 0xde6c
   18f80:	movt	r0, #5
   18f84:	ldr	r0, [r0, #48]	; 0x30
   18f88:	cmp	r0, #1
   18f8c:	moveq	r0, #1
   18f90:	bxeq	lr
   18f94:	cmp	r0, #2
   18f98:	movne	r0, #0
   18f9c:	bxne	lr
   18fa0:	movw	r0, #56896	; 0xde40
   18fa4:	movt	r0, #5
   18fa8:	ldr	r0, [r0]
   18fac:	clz	r0, r0
   18fb0:	lsr	r0, r0, #5
   18fb4:	bx	lr
   18fb8:	push	{r4, r5, fp, lr}
   18fbc:	add	fp, sp, #8
   18fc0:	mov	r4, r3
   18fc4:	ldr	r3, [r0]
   18fc8:	mov	r5, r0
   18fcc:	cmp	r3, #0
   18fd0:	beq	1902c <__assert_fail@plt+0x65b0>
   18fd4:	and	r0, r3, #61440	; 0xf000
   18fd8:	cmp	r0, #40960	; 0xa000
   18fdc:	bne	19010 <__assert_fail@plt+0x6594>
   18fe0:	movw	r0, #56940	; 0xde6c
   18fe4:	movt	r0, #5
   18fe8:	ldr	r0, [r0, #48]	; 0x30
   18fec:	cmp	r0, #1
   18ff0:	beq	19094 <__assert_fail@plt+0x6618>
   18ff4:	cmp	r0, #2
   18ff8:	bne	19010 <__assert_fail@plt+0x6594>
   18ffc:	movw	r0, #56896	; 0xde40
   19000:	movt	r0, #5
   19004:	ldr	r0, [r0]
   19008:	cmp	r0, #0
   1900c:	beq	19094 <__assert_fail@plt+0x6618>
   19010:	movw	r1, #56896	; 0xde40
   19014:	mov	r0, #1
   19018:	movt	r1, #5
   1901c:	str	r3, [r1, #8]
   19020:	strb	r0, [r1, #5]
   19024:	str	r3, [r4, #16]
   19028:	pop	{r4, r5, fp, pc}
   1902c:	ldr	r0, [fp, #8]
   19030:	cmp	r0, #0
   19034:	beq	19054 <__assert_fail@plt+0x65d8>
   19038:	movw	r0, #56896	; 0xde40
   1903c:	mov	r1, #0
   19040:	movt	r0, #5
   19044:	str	r1, [r0, #8]
   19048:	strh	r1, [r0, #4]
   1904c:	mov	r0, #1
   19050:	pop	{r4, r5, fp, pc}
   19054:	mov	r0, r1
   19058:	mov	r1, r2
   1905c:	mov	r2, r4
   19060:	bl	18538 <__assert_fail@plt+0x5abc>
   19064:	mov	r1, r0
   19068:	mov	r0, #0
   1906c:	cmp	r1, #0
   19070:	popne	{r4, r5, fp, pc}
   19074:	ldr	r1, [r4, #16]
   19078:	movw	r2, #56896	; 0xde40
   1907c:	mov	r0, #1
   19080:	movt	r2, #5
   19084:	str	r1, [r5]
   19088:	strb	r0, [r2, #5]
   1908c:	str	r1, [r2, #8]
   19090:	pop	{r4, r5, fp, pc}
   19094:	mov	r0, r1
   19098:	mov	r1, r2
   1909c:	mov	r2, r4
   190a0:	bl	18538 <__assert_fail@plt+0x5abc>
   190a4:	mov	r1, r0
   190a8:	mov	r0, #0
   190ac:	cmp	r1, #0
   190b0:	beq	190b8 <__assert_fail@plt+0x663c>
   190b4:	pop	{r4, r5, fp, pc}
   190b8:	ldr	r0, [r4, #16]
   190bc:	movw	r1, #56896	; 0xde40
   190c0:	movt	r1, #5
   190c4:	str	r0, [r1, #8]
   190c8:	str	r0, [r5]
   190cc:	mov	r0, #1
   190d0:	strb	r0, [r1, #5]
   190d4:	pop	{r4, r5, fp, pc}
   190d8:	mov	r1, r0
   190dc:	mov	r0, #1
   190e0:	b	190e8 <__assert_fail@plt+0x666c>
   190e4:	ldr	r1, [r1, #152]	; 0x98
   190e8:	cmp	r1, #0
   190ec:	bxeq	lr
   190f0:	ldrb	r2, [r1, #17]
   190f4:	cmp	r2, #0
   190f8:	beq	190e4 <__assert_fail@plt+0x6668>
   190fc:	mov	r0, #0
   19100:	bx	lr
   19104:	mov	ip, r0
   19108:	ldrb	r0, [r0]
   1910c:	sub	r3, r0, #33	; 0x21
   19110:	mov	r0, #0
   19114:	cmp	r3, #12
   19118:	bxhi	lr
   1911c:	add	r2, pc, #0
   19120:	ldr	pc, [r2, r3, lsl #2]
   19124:	andeq	r9, r1, r8, asr r1
   19128:	andeq	r9, r1, r4, ror #2
   1912c:	andeq	r9, r1, r4, ror #2
   19130:	andeq	r9, r1, r4, ror #2
   19134:	andeq	r9, r1, r4, ror #2
   19138:	andeq	r9, r1, r4, ror #2
   1913c:	andeq	r9, r1, r4, ror #2
   19140:	andeq	r9, r1, r8, asr r1
   19144:	andeq	r9, r1, r8, ror #2
   19148:	andeq	r9, r1, r4, ror #2
   1914c:	andeq	r9, r1, r4, ror #2
   19150:	andeq	r9, r1, r8, ror #2
   19154:	andeq	r9, r1, r0, lsl #3
   19158:	ldrb	r0, [ip, #1]
   1915c:	clz	r0, r0
   19160:	lsr	r0, r0, #5
   19164:	bx	lr
   19168:	eor	r0, r1, #1
   1916c:	ldrb	r1, [ip, #1]
   19170:	clz	r1, r1
   19174:	lsr	r1, r1, #5
   19178:	and	r0, r1, r0
   1917c:	bx	lr
   19180:	ldrb	r0, [ip, #1]
   19184:	cmp	r0, #0
   19188:	movwne	r0, #1
   1918c:	bx	lr
   19190:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19194:	add	fp, sp, #28
   19198:	sub	sp, sp, #20
   1919c:	mov	r4, #1
   191a0:	cmp	r0, #2
   191a4:	blt	19514 <__assert_fail@plt+0x6a98>
   191a8:	movw	r5, #35200	; 0x8980
   191ac:	movw	sl, #35203	; 0x8983
   191b0:	movw	r8, #56940	; 0xde6c
   191b4:	mov	r9, r1
   191b8:	mov	r6, r0
   191bc:	mov	r4, #1
   191c0:	movt	r5, #4
   191c4:	movt	sl, #4
   191c8:	movt	r8, #5
   191cc:	ldr	r7, [r9, r4, lsl #2]
   191d0:	mov	r0, r5
   191d4:	mov	r1, r7
   191d8:	bl	123d4 <strcmp@plt>
   191dc:	cmp	r0, #0
   191e0:	beq	19300 <__assert_fail@plt+0x6884>
   191e4:	mov	r0, sl
   191e8:	mov	r1, r7
   191ec:	bl	123d4 <strcmp@plt>
   191f0:	cmp	r0, #0
   191f4:	beq	1930c <__assert_fail@plt+0x6890>
   191f8:	movw	r0, #35206	; 0x8986
   191fc:	mov	r1, r7
   19200:	movt	r0, #4
   19204:	bl	123d4 <strcmp@plt>
   19208:	cmp	r0, #0
   1920c:	beq	19318 <__assert_fail@plt+0x689c>
   19210:	movw	r0, #35209	; 0x8989
   19214:	mov	r1, r7
   19218:	movt	r0, #4
   1921c:	bl	123d4 <strcmp@plt>
   19220:	cmp	r0, #0
   19224:	beq	19520 <__assert_fail@plt+0x6aa4>
   19228:	movw	r0, #35212	; 0x898c
   1922c:	mov	r1, r7
   19230:	movt	r0, #4
   19234:	bl	123d4 <strcmp@plt>
   19238:	cmp	r0, #0
   1923c:	beq	19324 <__assert_fail@plt+0x68a8>
   19240:	movw	r0, #36275	; 0x8db3
   19244:	mov	r1, r7
   19248:	mov	r2, #2
   1924c:	movt	r0, #4
   19250:	bl	12a1c <strncmp@plt>
   19254:	cmp	r0, #0
   19258:	bne	19514 <__assert_fail@plt+0x6a98>
   1925c:	ldrb	r5, [r7, #2]!
   19260:	cmp	r5, #0
   19264:	beq	19534 <__assert_fail@plt+0x6ab8>
   19268:	mov	sl, r6
   1926c:	bl	12740 <__ctype_b_loc@plt>
   19270:	ldr	r0, [r0]
   19274:	add	r0, r0, r5, lsl #1
   19278:	ldrb	r0, [r0, #1]
   1927c:	tst	r0, #8
   19280:	beq	19528 <__assert_fail@plt+0x6aac>
   19284:	bl	127d0 <__errno_location@plt>
   19288:	mov	r6, r0
   1928c:	ldr	r0, [r0]
   19290:	add	r1, sp, #16
   19294:	mov	r2, #10
   19298:	str	r0, [sp, #4]
   1929c:	mov	r0, #0
   192a0:	str	r0, [r6]
   192a4:	mov	r0, r7
   192a8:	bl	1277c <strtoul@plt>
   192ac:	mov	r5, r0
   192b0:	ldr	r0, [sp, #16]
   192b4:	cmp	r5, #0
   192b8:	cmpeq	r0, r7
   192bc:	beq	19528 <__assert_fail@plt+0x6aac>
   192c0:	ldrb	r0, [r0]
   192c4:	cmp	r0, #0
   192c8:	bne	19558 <__assert_fail@plt+0x6adc>
   192cc:	cmn	r5, #1
   192d0:	beq	19580 <__assert_fail@plt+0x6b04>
   192d4:	cmp	r5, #65536	; 0x10000
   192d8:	bcs	1958c <__assert_fail@plt+0x6b10>
   192dc:	ldr	r0, [sp, #4]
   192e0:	strh	r5, [r8, #68]	; 0x44
   192e4:	movw	r5, #35200	; 0x8980
   192e8:	movt	r5, #4
   192ec:	str	r0, [r6]
   192f0:	mov	r6, sl
   192f4:	movw	sl, #35203	; 0x8983
   192f8:	movt	sl, #4
   192fc:	b	19508 <__assert_fail@plt+0x6a8c>
   19300:	mov	r0, #2
   19304:	bl	1bde4 <__assert_fail@plt+0x9368>
   19308:	b	19508 <__assert_fail@plt+0x6a8c>
   1930c:	mov	r0, #1
   19310:	bl	1bde4 <__assert_fail@plt+0x9368>
   19314:	b	19508 <__assert_fail@plt+0x6a8c>
   19318:	mov	r0, #0
   1931c:	bl	1bde4 <__assert_fail@plt+0x9368>
   19320:	b	19508 <__assert_fail@plt+0x6a8c>
   19324:	add	r4, r4, #1
   19328:	cmp	r4, r6
   1932c:	bge	195dc <__assert_fail@plt+0x6b60>
   19330:	ldr	r1, [r9, r4, lsl #2]
   19334:	mov	r0, #0
   19338:	add	r2, sp, #12
   1933c:	str	r0, [sp, #12]
   19340:	mov	r0, #44	; 0x2c
   19344:	strh	r0, [sp, #10]
   19348:	str	r1, [sp, #4]
   1934c:	mov	r0, r1
   19350:	add	r1, sp, #10
   19354:	bl	12668 <strtok_r@plt>
   19358:	cmp	r0, #0
   1935c:	beq	195e8 <__assert_fail@plt+0x6b6c>
   19360:	mov	r7, r0
   19364:	movw	r0, #39887	; 0x9bcf
   19368:	mov	r1, r7
   1936c:	movt	r0, #4
   19370:	bl	123d4 <strcmp@plt>
   19374:	cmp	r0, #0
   19378:	beq	1947c <__assert_fail@plt+0x6a00>
   1937c:	movw	r0, #35541	; 0x8ad5
   19380:	mov	r1, r7
   19384:	movt	r0, #4
   19388:	bl	123d4 <strcmp@plt>
   1938c:	cmp	r0, #0
   19390:	beq	19484 <__assert_fail@plt+0x6a08>
   19394:	movw	r0, #35598	; 0x8b0e
   19398:	mov	r1, r7
   1939c:	movt	r0, #4
   193a0:	bl	123d4 <strcmp@plt>
   193a4:	cmp	r0, #0
   193a8:	beq	1948c <__assert_fail@plt+0x6a10>
   193ac:	movw	r0, #35648	; 0x8b40
   193b0:	mov	r1, r7
   193b4:	movt	r0, #4
   193b8:	bl	123d4 <strcmp@plt>
   193bc:	cmp	r0, #0
   193c0:	beq	19494 <__assert_fail@plt+0x6a18>
   193c4:	movw	r0, #38980	; 0x9844
   193c8:	mov	r1, r7
   193cc:	movt	r0, #4
   193d0:	bl	123d4 <strcmp@plt>
   193d4:	cmp	r0, #0
   193d8:	beq	1949c <__assert_fail@plt+0x6a20>
   193dc:	movw	r0, #38896	; 0x97f0
   193e0:	mov	r1, r7
   193e4:	movt	r0, #4
   193e8:	bl	123d4 <strcmp@plt>
   193ec:	cmp	r0, #0
   193f0:	beq	194a4 <__assert_fail@plt+0x6a28>
   193f4:	movw	r0, #35830	; 0x8bf6
   193f8:	mov	r1, r7
   193fc:	movt	r0, #4
   19400:	bl	123d4 <strcmp@plt>
   19404:	cmp	r0, #0
   19408:	beq	194ac <__assert_fail@plt+0x6a30>
   1940c:	movw	r0, #36895	; 0x901f
   19410:	mov	r1, r7
   19414:	movt	r0, #4
   19418:	bl	123d4 <strcmp@plt>
   1941c:	cmp	r0, #0
   19420:	beq	194b4 <__assert_fail@plt+0x6a38>
   19424:	movw	r0, #39359	; 0x99bf
   19428:	mov	r1, r7
   1942c:	movt	r0, #4
   19430:	bl	123d4 <strcmp@plt>
   19434:	cmp	r0, #0
   19438:	beq	194bc <__assert_fail@plt+0x6a40>
   1943c:	movw	r1, #36092	; 0x8cfc
   19440:	mov	r0, #0
   19444:	mov	r2, #5
   19448:	movt	r1, #4
   1944c:	bl	1253c <dcgettext@plt>
   19450:	ldr	r1, [r8, #72]	; 0x48
   19454:	ldr	r2, [sp, #4]
   19458:	mov	r7, r0
   1945c:	mov	r0, #0
   19460:	bl	2c45c <__assert_fail@plt+0x199e0>
   19464:	mov	r3, r0
   19468:	mov	r0, #0
   1946c:	mov	r1, #0
   19470:	mov	r2, r7
   19474:	bl	12674 <error@plt>
   19478:	b	194e0 <__assert_fail@plt+0x6a64>
   1947c:	mov	r0, #0
   19480:	b	194c0 <__assert_fail@plt+0x6a44>
   19484:	mov	r0, #1
   19488:	b	194c0 <__assert_fail@plt+0x6a44>
   1948c:	mov	r0, #2
   19490:	b	194c0 <__assert_fail@plt+0x6a44>
   19494:	mov	r0, #3
   19498:	b	194c0 <__assert_fail@plt+0x6a44>
   1949c:	mov	r0, #4
   194a0:	b	194c0 <__assert_fail@plt+0x6a44>
   194a4:	mov	r0, #5
   194a8:	b	194c0 <__assert_fail@plt+0x6a44>
   194ac:	mov	r0, #6
   194b0:	b	194c0 <__assert_fail@plt+0x6a44>
   194b4:	mov	r0, #7
   194b8:	b	194c0 <__assert_fail@plt+0x6a44>
   194bc:	mov	r0, #8
   194c0:	movw	r1, #36456	; 0x8e68
   194c4:	add	r0, r0, r0, lsl #1
   194c8:	movt	r1, #4
   194cc:	add	r0, r1, r0, lsl #2
   194d0:	ldr	r1, [r8, #44]	; 0x2c
   194d4:	ldr	r0, [r0, #4]
   194d8:	orr	r0, r1, r0
   194dc:	str	r0, [r8, #44]	; 0x2c
   194e0:	mov	r0, #0
   194e4:	add	r1, sp, #10
   194e8:	add	r2, sp, #12
   194ec:	bl	12668 <strtok_r@plt>
   194f0:	mov	r7, r0
   194f4:	cmp	r0, #0
   194f8:	bne	19364 <__assert_fail@plt+0x68e8>
   194fc:	ldrb	r0, [r8, #44]	; 0x2c
   19500:	tst	r0, #16
   19504:	bne	19614 <__assert_fail@plt+0x6b98>
   19508:	add	r4, r4, #1
   1950c:	cmp	r4, r6
   19510:	blt	191cc <__assert_fail@plt+0x6750>
   19514:	mov	r0, r4
   19518:	sub	sp, fp, #28
   1951c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19520:	add	r4, r4, #1
   19524:	b	19514 <__assert_fail@plt+0x6a98>
   19528:	movw	r1, #36225	; 0x8d81
   1952c:	movt	r1, #4
   19530:	b	1953c <__assert_fail@plt+0x6ac0>
   19534:	movw	r1, #36161	; 0x8d41
   19538:	movt	r1, #4
   1953c:	mov	r0, #0
   19540:	mov	r2, #5
   19544:	bl	1253c <dcgettext@plt>
   19548:	mov	r2, r0
   1954c:	mov	r0, #1
   19550:	mov	r1, #0
   19554:	bl	12674 <error@plt>
   19558:	movw	r1, #36278	; 0x8db6
   1955c:	mov	r0, #0
   19560:	mov	r2, #5
   19564:	movt	r1, #4
   19568:	bl	1253c <dcgettext@plt>
   1956c:	mov	r2, r0
   19570:	mov	r0, #1
   19574:	mov	r1, #0
   19578:	mov	r3, r7
   1957c:	bl	12674 <error@plt>
   19580:	ldr	r4, [r6]
   19584:	cmp	r4, #0
   19588:	bne	195b4 <__assert_fail@plt+0x6b38>
   1958c:	movw	r1, #36308	; 0x8dd4
   19590:	mov	r0, #0
   19594:	mov	r2, #5
   19598:	movt	r1, #4
   1959c:	bl	1253c <dcgettext@plt>
   195a0:	mov	r2, r0
   195a4:	mov	r0, #1
   195a8:	mov	r1, #0
   195ac:	mov	r3, r5
   195b0:	bl	12674 <error@plt>
   195b4:	movw	r1, #36278	; 0x8db6
   195b8:	mov	r0, #0
   195bc:	mov	r2, #5
   195c0:	movt	r1, #4
   195c4:	bl	1253c <dcgettext@plt>
   195c8:	mov	r2, r0
   195cc:	mov	r0, #1
   195d0:	mov	r1, r4
   195d4:	mov	r3, r7
   195d8:	bl	12674 <error@plt>
   195dc:	movw	r1, #35215	; 0x898f
   195e0:	movt	r1, #4
   195e4:	b	195f0 <__assert_fail@plt+0x6b74>
   195e8:	movw	r1, #36128	; 0x8d20
   195ec:	movt	r1, #4
   195f0:	mov	r0, #0
   195f4:	mov	r2, #5
   195f8:	bl	1253c <dcgettext@plt>
   195fc:	mov	r2, r0
   19600:	mov	r0, #0
   19604:	mov	r1, #0
   19608:	bl	12674 <error@plt>
   1960c:	mov	r0, #1
   19610:	bl	18148 <__assert_fail@plt+0x56cc>
   19614:	mov	r0, #1
   19618:	bl	18308 <__assert_fail@plt+0x588c>
   1961c:	mov	r0, #0
   19620:	bl	12758 <exit@plt>
   19624:	push	{r4, r5, r6, sl, fp, lr}
   19628:	add	fp, sp, #16
   1962c:	vpush	{d8}
   19630:	sub	sp, sp, #392	; 0x188
   19634:	mov	r4, r0
   19638:	movw	r0, #35253	; 0x89b5
   1963c:	movt	r0, #4
   19640:	bl	126b0 <getenv@plt>
   19644:	cmp	r0, #0
   19648:	mov	r5, sp
   1964c:	movwne	r0, #1
   19650:	strb	r0, [r4, #17]
   19654:	mov	r0, r5
   19658:	bl	12524 <uname@plt>
   1965c:	cmp	r0, #0
   19660:	beq	1966c <__assert_fail@plt+0x6bf0>
   19664:	mov	r6, #1
   19668:	b	196d4 <__assert_fail@plt+0x6c58>
   1966c:	add	r0, r5, #130	; 0x82
   19670:	mov	r1, #0
   19674:	mov	r6, #0
   19678:	bl	1283c <strtod@plt>
   1967c:	movw	r0, #34848	; 0x8820
   19680:	mov	r1, r5
   19684:	vcvt.f32.f64	s16, d0
   19688:	movt	r0, #4
   1968c:	bl	123d4 <strcmp@plt>
   19690:	cmp	r0, #0
   19694:	beq	196c4 <__assert_fail@plt+0x6c48>
   19698:	vldr	s0, [pc, #388]	; 19824 <__assert_fail@plt+0x6da8>
   1969c:	movw	r0, #34854	; 0x8826
   196a0:	mov	r1, sp
   196a4:	movt	r0, #4
   196a8:	vcmpe.f32	s16, s0
   196ac:	vmrs	APSR_nzcv, fpscr
   196b0:	movwge	r6, #1
   196b4:	bl	123d4 <strcmp@plt>
   196b8:	cmp	r0, #0
   196bc:	movne	r6, #1
   196c0:	b	196d4 <__assert_fail@plt+0x6c58>
   196c4:	vldr	s0, [pc, #348]	; 19828 <__assert_fail@plt+0x6dac>
   196c8:	vcmpe.f32	s16, s0
   196cc:	vmrs	APSR_nzcv, fpscr
   196d0:	movwge	r6, #1
   196d4:	mov	r5, #0
   196d8:	mov	r0, #0
   196dc:	str	r5, [r4, #60]	; 0x3c
   196e0:	strb	r6, [r4, #56]	; 0x38
   196e4:	bl	129ec <isatty@plt>
   196e8:	cmp	r0, #0
   196ec:	strb	r5, [r4, #15]
   196f0:	mov	r1, #1
   196f4:	movwne	r0, #1
   196f8:	strb	r0, [r4, #16]
   196fc:	ldrb	r0, [r4, #17]
   19700:	cmp	r0, #0
   19704:	mvn	r0, #0
   19708:	strbne	r5, [r4, #16]
   1970c:	strh	r1, [r4]
   19710:	str	r0, [r4, #4]
   19714:	str	r0, [r4, #8]
   19718:	mov	r0, sp
   1971c:	mov	r1, #0
   19720:	mov	r5, #0
   19724:	bl	12644 <gettimeofday@plt>
   19728:	cmp	r0, #0
   1972c:	beq	19748 <__assert_fail@plt+0x6ccc>
   19730:	mov	r0, #0
   19734:	bl	1250c <time@plt>
   19738:	cmn	r0, #1
   1973c:	beq	19804 <__assert_fail@plt+0x6d88>
   19740:	mov	r1, #0
   19744:	b	19758 <__assert_fail@plt+0x6cdc>
   19748:	ldm	sp, {r0, r1}
   1974c:	mov	r2, #1000	; 0x3e8
   19750:	mov	r5, #0
   19754:	mul	r1, r1, r2
   19758:	orr	r3, r5, r0
   1975c:	sub	r0, r0, #4480	; 0x1180
   19760:	add	r2, r4, #20
   19764:	mov	r5, #0
   19768:	sub	r0, r0, #81920	; 0x14000
   1976c:	str	r3, [r2]
   19770:	str	r1, [r2, #4]
   19774:	str	r0, [r4, #28]
   19778:	mov	r0, #2
   1977c:	str	r1, [r4, #32]
   19780:	strb	r5, [r4, #36]	; 0x24
   19784:	strh	r5, [r4, #13]
   19788:	mov	r1, #512	; 0x200
   1978c:	strh	r0, [r4, #68]	; 0x44
   19790:	ldrb	r0, [r4, #17]
   19794:	cmp	r0, #0
   19798:	movw	r0, #35269	; 0x89c5
   1979c:	movweq	r1, #1024	; 0x400
   197a0:	movt	r0, #4
   197a4:	str	r1, [r4, #40]	; 0x28
   197a8:	str	r5, [r4, #44]	; 0x2c
   197ac:	bl	126b0 <getenv@plt>
   197b0:	cmp	r0, #0
   197b4:	bne	197e0 <__assert_fail@plt+0x6d64>
   197b8:	mov	r0, #0
   197bc:	strb	r5, [r4, #12]
   197c0:	bl	1bde4 <__assert_fail@plt+0x9368>
   197c4:	mov	r0, #8
   197c8:	str	r0, [r4, #72]	; 0x48
   197cc:	str	r5, [r4, #76]	; 0x4c
   197d0:	strb	r5, [r4, #80]	; 0x50
   197d4:	sub	sp, fp, #24
   197d8:	vpop	{d8}
   197dc:	pop	{r4, r5, r6, sl, fp, pc}
   197e0:	movw	r1, #35285	; 0x89d5
   197e4:	mov	r0, #0
   197e8:	mov	r2, #5
   197ec:	movt	r1, #4
   197f0:	bl	1253c <dcgettext@plt>
   197f4:	mov	r2, r0
   197f8:	mov	r0, #1
   197fc:	mov	r1, #0
   19800:	bl	12674 <error@plt>
   19804:	movw	r0, #36412	; 0x8e3c
   19808:	movw	r1, #33001	; 0x80e9
   1980c:	movw	r3, #36428	; 0x8e4c
   19810:	movw	r2, #978	; 0x3d2
   19814:	movt	r0, #4
   19818:	movt	r1, #4
   1981c:	movt	r3, #4
   19820:	bl	12a7c <__assert_fail@plt>
   19824:	submi	r6, r6, r6, ror #12
   19828:	andmi	ip, ip, sp, asr #25
   1982c:	push	{r4, r5, r6, sl, fp, lr}
   19830:	add	fp, sp, #16
   19834:	mov	r6, r0
   19838:	ldr	r0, [r2, #164]	; 0xa4
   1983c:	mov	r4, r2
   19840:	mov	r5, r1
   19844:	add	r0, r0, #1
   19848:	str	r0, [r2, #164]	; 0xa4
   1984c:	ldrb	r0, [r2, #18]
   19850:	cmp	r0, #0
   19854:	beq	1987c <__assert_fail@plt+0x6e00>
   19858:	movw	r0, #56896	; 0xde40
   1985c:	movt	r0, #5
   19860:	ldrb	r0, [r0, #4]
   19864:	cmp	r0, #0
   19868:	beq	19908 <__assert_fail@plt+0x6e8c>
   1986c:	ldrb	r1, [r4, #19]
   19870:	cmp	r1, #0
   19874:	movwne	r1, #1
   19878:	b	1988c <__assert_fail@plt+0x6e10>
   1987c:	ldrb	r0, [r4, #19]
   19880:	mov	r1, #1
   19884:	cmp	r0, #0
   19888:	beq	198b4 <__assert_fail@plt+0x6e38>
   1988c:	movw	r0, #56896	; 0xde40
   19890:	cmp	r1, #0
   19894:	movt	r0, #5
   19898:	ldrb	r2, [r0, #5]
   1989c:	clz	r0, r2
   198a0:	lsr	r0, r0, #5
   198a4:	beq	198d4 <__assert_fail@plt+0x6e58>
   198a8:	cmp	r2, #0
   198ac:	beq	19908 <__assert_fail@plt+0x6e8c>
   198b0:	b	198d4 <__assert_fail@plt+0x6e58>
   198b4:	ldrb	r0, [r4, #20]
   198b8:	cmp	r0, #0
   198bc:	beq	19930 <__assert_fail@plt+0x6eb4>
   198c0:	movw	r0, #56896	; 0xde40
   198c4:	movt	r0, #5
   198c8:	ldrb	r0, [r0, #5]
   198cc:	clz	r0, r0
   198d0:	lsr	r0, r0, #5
   198d4:	ldrb	r1, [r4, #20]
   198d8:	cmp	r1, #0
   198dc:	beq	19930 <__assert_fail@plt+0x6eb4>
   198e0:	ldrd	r2, [r5, #96]	; 0x60
   198e4:	orr	r1, r2, r3
   198e8:	clz	r1, r1
   198ec:	lsr	r1, r1, #5
   198f0:	orrs	r0, r0, r1
   198f4:	bne	19908 <__assert_fail@plt+0x6e8c>
   198f8:	ldr	r0, [r5, #16]
   198fc:	and	r0, r0, #61440	; 0xf000
   19900:	cmp	r0, #16384	; 0x4000
   19904:	bne	19930 <__assert_fail@plt+0x6eb4>
   19908:	movw	r0, #56896	; 0xde40
   1990c:	mov	r2, r5
   19910:	movt	r0, #5
   19914:	ldr	r1, [r0, #12]
   19918:	mov	r0, r6
   1991c:	bl	18538 <__assert_fail@plt+0x5abc>
   19920:	mov	r1, r0
   19924:	mov	r0, #0
   19928:	cmp	r1, #0
   1992c:	popne	{r4, r5, r6, sl, fp, pc}
   19930:	ldr	r3, [r4]
   19934:	mov	r0, r6
   19938:	mov	r1, r5
   1993c:	mov	r2, r4
   19940:	blx	r3
   19944:	mov	r1, r0
   19948:	mov	r0, #0
   1994c:	cmp	r1, #0
   19950:	ldrne	r0, [r4, #168]	; 0xa8
   19954:	addne	r0, r0, #1
   19958:	strne	r0, [r4, #168]	; 0xa8
   1995c:	movne	r0, #1
   19960:	pop	{r4, r5, r6, sl, fp, pc}
   19964:	movw	r1, #18828	; 0x498c
   19968:	movw	r2, #16824	; 0x41b8
   1996c:	movt	r1, #1
   19970:	movt	r2, #1
   19974:	sub	r1, r0, r1
   19978:	sub	r0, r0, r2
   1997c:	clz	r1, r1
   19980:	clz	r0, r0
   19984:	lsr	r1, r1, #5
   19988:	lsr	r0, r0, #5
   1998c:	orr	r0, r0, r1
   19990:	bx	lr
   19994:	mov	r2, r1
   19998:	movw	r1, #56940	; 0xde6c
   1999c:	movt	r1, #5
   199a0:	ldr	r1, [r1, #72]	; 0x48
   199a4:	b	2c45c <__assert_fail@plt+0x199e0>
   199a8:	push	{r4, r5, r6, r7, fp, lr}
   199ac:	add	fp, sp, #16
   199b0:	movw	r7, #56896	; 0xde40
   199b4:	mov	r6, r0
   199b8:	mov	r4, r2
   199bc:	mov	r5, r1
   199c0:	movt	r7, #5
   199c4:	ldrb	r0, [r7, #40]	; 0x28
   199c8:	cmp	r0, #0
   199cc:	cmpne	r4, #0
   199d0:	bne	19a0c <__assert_fail@plt+0x6f90>
   199d4:	movw	r0, #56940	; 0xde6c
   199d8:	mov	r2, r3
   199dc:	movt	r0, #5
   199e0:	ldr	r1, [r0, #72]	; 0x48
   199e4:	mov	r0, #0
   199e8:	bl	2c45c <__assert_fail@plt+0x199e0>
   199ec:	movw	r2, #52175	; 0xcbcf
   199f0:	mov	r3, r0
   199f4:	mov	r0, r6
   199f8:	mov	r1, r5
   199fc:	movt	r2, #4
   19a00:	bl	12674 <error@plt>
   19a04:	mov	r0, #1
   19a08:	str	r0, [r7, #28]
   19a0c:	cmp	r4, #0
   19a10:	movne	r0, #1
   19a14:	strbne	r0, [r7, #40]	; 0x28
   19a18:	pop	{r4, r5, r6, r7, fp, pc}
   19a1c:	push	{fp, lr}
   19a20:	mov	fp, sp
   19a24:	mov	r3, r1
   19a28:	mov	r1, r0
   19a2c:	mov	r0, #1
   19a30:	mov	r2, #1
   19a34:	bl	199a8 <__assert_fail@plt+0x6f2c>
   19a38:	bl	12a28 <abort@plt>
   19a3c:	push	{fp, lr}
   19a40:	mov	fp, sp
   19a44:	mov	r3, r1
   19a48:	mov	r1, r0
   19a4c:	movw	r0, #56896	; 0xde40
   19a50:	mov	r2, #0
   19a54:	movt	r0, #5
   19a58:	strb	r2, [r0, #40]	; 0x28
   19a5c:	mov	r0, #1
   19a60:	mov	r2, #0
   19a64:	bl	199a8 <__assert_fail@plt+0x6f2c>
   19a68:	bl	12a28 <abort@plt>
   19a6c:	push	{fp, lr}
   19a70:	mov	fp, sp
   19a74:	add	r2, r0, #4
   19a78:	add	r1, r0, #48	; 0x30
   19a7c:	mov	r0, r2
   19a80:	bl	200b0 <__assert_fail@plt+0xd634>
   19a84:	mov	r0, #0
   19a88:	pop	{fp, pc}
   19a8c:	push	{r4, r5, r6, sl, fp, lr}
   19a90:	add	fp, sp, #16
   19a94:	sub	sp, sp, #8
   19a98:	mov	r6, r0
   19a9c:	mov	r0, #8
   19aa0:	bl	3233c <__assert_fail@plt+0x1f8c0>
   19aa4:	mov	r4, #0
   19aa8:	cmp	r0, #0
   19aac:	beq	19b18 <__assert_fail@plt+0x709c>
   19ab0:	mov	r5, r0
   19ab4:	mov	r0, r6
   19ab8:	bl	12548 <strdup@plt>
   19abc:	cmp	r0, #0
   19ac0:	str	r0, [r5]
   19ac4:	beq	19b10 <__assert_fail@plt+0x7094>
   19ac8:	movw	r0, #39844	; 0x9ba4
   19acc:	movw	r2, #39716	; 0x9b24
   19ad0:	movw	r3, #39772	; 0x9b5c
   19ad4:	mov	r1, #0
   19ad8:	mov	r4, #0
   19adc:	movt	r0, #1
   19ae0:	movt	r2, #1
   19ae4:	movt	r3, #1
   19ae8:	str	r0, [sp]
   19aec:	mov	r0, #11
   19af0:	bl	23038 <__assert_fail@plt+0x105bc>
   19af4:	cmp	r0, #0
   19af8:	str	r0, [r5, #4]
   19afc:	beq	19b08 <__assert_fail@plt+0x708c>
   19b00:	mov	r4, r5
   19b04:	b	19b18 <__assert_fail@plt+0x709c>
   19b08:	ldr	r0, [r5]
   19b0c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   19b10:	mov	r0, r5
   19b14:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   19b18:	mov	r0, r4
   19b1c:	sub	sp, fp, #16
   19b20:	pop	{r4, r5, r6, sl, fp, pc}
   19b24:	push	{fp, lr}
   19b28:	mov	fp, sp
   19b2c:	mov	ip, r1
   19b30:	ldr	lr, [r0]
   19b34:	ldr	r3, [r0, #4]
   19b38:	ldr	r1, [r0, #12]
   19b3c:	ldr	r2, [r0, #8]
   19b40:	eor	r0, r2, lr
   19b44:	eor	r1, r1, r3
   19b48:	mov	r2, ip
   19b4c:	mov	r3, #0
   19b50:	bl	466fc <__assert_fail@plt+0x33c80>
   19b54:	mov	r0, r2
   19b58:	pop	{fp, pc}
   19b5c:	push	{r4, r5, fp, lr}
   19b60:	add	fp, sp, #8
   19b64:	ldrd	r2, [r1, #8]
   19b68:	ldrd	r4, [r0, #8]
   19b6c:	eor	r3, r5, r3
   19b70:	eor	r2, r4, r2
   19b74:	orrs	r2, r2, r3
   19b78:	mov	r2, #0
   19b7c:	bne	19b9c <__assert_fail@plt+0x7120>
   19b80:	ldrd	r2, [r1]
   19b84:	ldrd	r0, [r0]
   19b88:	eor	r1, r1, r3
   19b8c:	eor	r0, r0, r2
   19b90:	orr	r0, r0, r1
   19b94:	clz	r0, r0
   19b98:	lsr	r2, r0, #5
   19b9c:	mov	r0, r2
   19ba0:	pop	{r4, r5, fp, pc}
   19ba4:	push	{r4, sl, fp, lr}
   19ba8:	add	fp, sp, #8
   19bac:	mov	r4, r0
   19bb0:	ldr	r0, [r0, #20]
   19bb4:	cmp	r0, #0
   19bb8:	beq	19bc8 <__assert_fail@plt+0x714c>
   19bbc:	bl	12884 <fclose@plt>
   19bc0:	cmp	r0, #0
   19bc4:	bne	19bdc <__assert_fail@plt+0x7160>
   19bc8:	ldr	r0, [r4, #16]
   19bcc:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   19bd0:	mov	r0, r4
   19bd4:	pop	{r4, sl, fp, lr}
   19bd8:	b	2fd6c <__assert_fail@plt+0x1d2f0>
   19bdc:	bl	127d0 <__errno_location@plt>
   19be0:	ldr	r0, [r0]
   19be4:	ldr	r1, [r4, #16]
   19be8:	bl	19a3c <__assert_fail@plt+0x6fc0>
   19bec:	push	{r4, sl, fp, lr}
   19bf0:	add	fp, sp, #8
   19bf4:	mov	r4, r0
   19bf8:	ldr	r0, [r0]
   19bfc:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   19c00:	ldr	r0, [r4, #4]
   19c04:	pop	{r4, sl, fp, lr}
   19c08:	b	23330 <__assert_fail@plt+0x108b4>
   19c0c:	push	{r4, r5, r6, r7, fp, lr}
   19c10:	add	fp, sp, #16
   19c14:	sub	sp, sp, #104	; 0x68
   19c18:	mov	r5, r0
   19c1c:	mov	r0, #24
   19c20:	mov	r7, r1
   19c24:	bl	3233c <__assert_fail@plt+0x1f8c0>
   19c28:	mov	r6, #0
   19c2c:	cmp	r0, #0
   19c30:	beq	19d48 <__assert_fail@plt+0x72cc>
   19c34:	mov	r4, r0
   19c38:	mov	r0, r7
   19c3c:	bl	12548 <strdup@plt>
   19c40:	cmp	r0, #0
   19c44:	str	r0, [r4, #16]
   19c48:	beq	19cf4 <__assert_fail@plt+0x7278>
   19c4c:	ldr	r1, [r5]
   19c50:	mov	r0, r7
   19c54:	bl	22b0c <__assert_fail@plt+0x10090>
   19c58:	cmp	r0, #0
   19c5c:	str	r0, [r4, #20]
   19c60:	beq	19cec <__assert_fail@plt+0x7270>
   19c64:	bl	12848 <fileno@plt>
   19c68:	cmn	r0, #1
   19c6c:	ble	19d90 <__assert_fail@plt+0x7314>
   19c70:	mov	r1, #1
   19c74:	mov	r6, r0
   19c78:	bl	225c4 <__assert_fail@plt+0xfb48>
   19c7c:	mov	r2, sp
   19c80:	mov	r0, #3
   19c84:	mov	r1, r6
   19c88:	bl	125e4 <__fxstat64@plt>
   19c8c:	cmn	r0, #1
   19c90:	ble	19d00 <__assert_fail@plt+0x7284>
   19c94:	ldm	sp, {r0, r1}
   19c98:	ldr	r2, [sp, #96]	; 0x60
   19c9c:	ldr	r3, [sp, #100]	; 0x64
   19ca0:	stm	r4, {r0, r1, r2, r3}
   19ca4:	mov	r1, r4
   19ca8:	ldr	r0, [r5, #4]
   19cac:	bl	22d88 <__assert_fail@plt+0x1030c>
   19cb0:	cmp	r0, #0
   19cb4:	beq	19d30 <__assert_fail@plt+0x72b4>
   19cb8:	mov	r6, r0
   19cbc:	ldr	r0, [r4, #20]
   19cc0:	cmp	r0, #0
   19cc4:	beq	19cd4 <__assert_fail@plt+0x7258>
   19cc8:	bl	12884 <fclose@plt>
   19ccc:	cmp	r0, #0
   19cd0:	bne	19db0 <__assert_fail@plt+0x7334>
   19cd4:	ldr	r0, [r4, #16]
   19cd8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   19cdc:	mov	r0, r4
   19ce0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   19ce4:	ldr	r6, [r6, #20]
   19ce8:	b	19d48 <__assert_fail@plt+0x72cc>
   19cec:	ldr	r0, [r4, #16]
   19cf0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   19cf4:	mov	r0, r4
   19cf8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   19cfc:	b	19d48 <__assert_fail@plt+0x72cc>
   19d00:	ldr	r0, [r4, #20]
   19d04:	cmp	r0, #0
   19d08:	beq	19d18 <__assert_fail@plt+0x729c>
   19d0c:	bl	12884 <fclose@plt>
   19d10:	cmp	r0, #0
   19d14:	bne	19db0 <__assert_fail@plt+0x7334>
   19d18:	ldr	r0, [r4, #16]
   19d1c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   19d20:	mov	r0, r4
   19d24:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   19d28:	mov	r6, #0
   19d2c:	b	19d48 <__assert_fail@plt+0x72cc>
   19d30:	ldr	r0, [r5, #4]
   19d34:	mov	r1, r4
   19d38:	bl	23b7c <__assert_fail@plt+0x11100>
   19d3c:	cmp	r0, #0
   19d40:	beq	19d54 <__assert_fail@plt+0x72d8>
   19d44:	ldr	r6, [r4, #20]
   19d48:	mov	r0, r6
   19d4c:	sub	sp, fp, #16
   19d50:	pop	{r4, r5, r6, r7, fp, pc}
   19d54:	bl	127d0 <__errno_location@plt>
   19d58:	mov	r5, r0
   19d5c:	ldr	r0, [r4, #20]
   19d60:	ldr	r6, [r5]
   19d64:	cmp	r0, #0
   19d68:	beq	19d78 <__assert_fail@plt+0x72fc>
   19d6c:	bl	12884 <fclose@plt>
   19d70:	cmp	r0, #0
   19d74:	bne	19dc0 <__assert_fail@plt+0x7344>
   19d78:	ldr	r0, [r4, #16]
   19d7c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   19d80:	mov	r0, r4
   19d84:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   19d88:	str	r6, [r5]
   19d8c:	b	19d28 <__assert_fail@plt+0x72ac>
   19d90:	movw	r0, #27750	; 0x6c66
   19d94:	movw	r1, #36564	; 0x8ed4
   19d98:	movw	r3, #36576	; 0x8ee0
   19d9c:	mov	r2, #166	; 0xa6
   19da0:	movt	r0, #4
   19da4:	movt	r1, #4
   19da8:	movt	r3, #4
   19dac:	bl	12a7c <__assert_fail@plt>
   19db0:	bl	127d0 <__errno_location@plt>
   19db4:	ldr	r0, [r0]
   19db8:	ldr	r1, [r4, #16]
   19dbc:	bl	19a3c <__assert_fail@plt+0x6fc0>
   19dc0:	ldr	r1, [r4, #16]
   19dc4:	ldr	r0, [r5]
   19dc8:	bl	19a3c <__assert_fail@plt+0x6fc0>
   19dcc:	andeq	r0, r0, r0
   19dd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19dd4:	add	fp, sp, #28
   19dd8:	sub	sp, sp, #4
   19ddc:	ldr	r7, [fp, #8]
   19de0:	cmp	r7, #40	; 0x28
   19de4:	beq	1a0b8 <__assert_fail@plt+0x763c>
   19de8:	cmp	r7, #91	; 0x5b
   19dec:	beq	1a0d8 <__assert_fail@plt+0x765c>
   19df0:	cmp	r7, #123	; 0x7b
   19df4:	beq	1a0f8 <__assert_fail@plt+0x767c>
   19df8:	ldr	sl, [fp, #12]
   19dfc:	mov	r8, r0
   19e00:	mov	r0, #20
   19e04:	mov	r5, r3
   19e08:	mov	r6, r2
   19e0c:	mov	r9, r1
   19e10:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   19e14:	mov	r1, #0
   19e18:	str	r0, [r8]
   19e1c:	str	r5, [r0]
   19e20:	str	r6, [r0, #12]
   19e24:	str	r1, [r0, #16]
   19e28:	strb	sl, [r0, #5]
   19e2c:	strb	r7, [r0, #4]
   19e30:	add	r0, r6, #2
   19e34:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   19e38:	mov	r4, r0
   19e3c:	ldr	r0, [r8]
   19e40:	mov	r1, r9
   19e44:	mov	r2, r6
   19e48:	str	r4, [r0, #8]
   19e4c:	mov	r0, r4
   19e50:	bl	12818 <strncpy@plt>
   19e54:	add	r0, r4, r6
   19e58:	cmp	r5, #1
   19e5c:	bhi	19e7c <__assert_fail@plt+0x7400>
   19e60:	cmp	r7, #0
   19e64:	bne	1a118 <__assert_fail@plt+0x769c>
   19e68:	cmp	sl, #0
   19e6c:	bne	1a138 <__assert_fail@plt+0x76bc>
   19e70:	mov	r1, #0
   19e74:	strb	r1, [r0]
   19e78:	b	1a018 <__assert_fail@plt+0x759c>
   19e7c:	cmp	r5, #2
   19e80:	bne	1a158 <__assert_fail@plt+0x76dc>
   19e84:	sub	r2, r7, #37	; 0x25
   19e88:	cmp	r2, #84	; 0x54
   19e8c:	bhi	19e70 <__assert_fail@plt+0x73f4>
   19e90:	ldr	r1, [fp, #16]
   19e94:	add	r3, pc, #0
   19e98:	ldr	pc, [r3, r2, lsl #2]
   19e9c:	andeq	sl, r1, ip, lsr #32
   19ea0:	andeq	r9, r1, r0, ror lr
   19ea4:	andeq	r9, r1, r0, ror lr
   19ea8:	andeq	r9, r1, r0, ror lr
   19eac:	andeq	r9, r1, r0, ror lr
   19eb0:	andeq	r9, r1, r0, ror lr
   19eb4:	andeq	r9, r1, r0, ror lr
   19eb8:	andeq	r9, r1, r0, ror lr
   19ebc:	andeq	r9, r1, r0, ror lr
   19ec0:	andeq	r9, r1, r0, ror lr
   19ec4:	andeq	r9, r1, r0, ror lr
   19ec8:	andeq	r9, r1, r0, ror lr
   19ecc:	andeq	r9, r1, r0, ror lr
   19ed0:	andeq	r9, r1, r0, ror lr
   19ed4:	andeq	r9, r1, r0, ror lr
   19ed8:	andeq	r9, r1, r0, ror lr
   19edc:	andeq	r9, r1, r0, ror lr
   19ee0:	andeq	r9, r1, r0, ror lr
   19ee4:	andeq	r9, r1, r0, ror lr
   19ee8:	andeq	r9, r1, r0, ror lr
   19eec:	andeq	r9, r1, r0, ror lr
   19ef0:	andeq	r9, r1, r0, ror lr
   19ef4:	andeq	r9, r1, r0, ror lr
   19ef8:	andeq	r9, r1, r0, ror lr
   19efc:	andeq	r9, r1, r0, ror lr
   19f00:	andeq	r9, r1, r0, ror lr
   19f04:	andeq	r9, r1, r0, ror lr
   19f08:	andeq	r9, r1, r0, ror lr
   19f0c:	strdeq	r9, [r1], -r0
   19f10:	strdeq	r9, [r1], -r0
   19f14:	strdeq	r9, [r1], -r0
   19f18:	strdeq	r9, [r1], -r0
   19f1c:	andeq	r9, r1, r0, ror lr
   19f20:	strdeq	r9, [r1], -r0
   19f24:	strdeq	r9, [r1], -r0
   19f28:	andeq	sl, r1, r8, lsr #32
   19f2c:	andeq	r9, r1, r0, ror lr
   19f30:	andeq	r9, r1, r0, ror lr
   19f34:	andeq	r9, r1, r0, ror lr
   19f38:	andeq	r9, r1, r0, ror lr
   19f3c:	strdeq	r9, [r1], -r0
   19f40:	andeq	r9, r1, r0, ror lr
   19f44:	andeq	r9, r1, r0, ror lr
   19f48:	andeq	sl, r1, r8, lsr #32
   19f4c:	andeq	r9, r1, r0, ror lr
   19f50:	andeq	r9, r1, r0, ror lr
   19f54:	andeq	sl, r1, r0, asr #32
   19f58:	strdeq	r9, [r1], -r0
   19f5c:	strdeq	r9, [r1], -r0
   19f60:	andeq	r9, r1, r0, ror lr
   19f64:	andeq	r9, r1, r0, ror lr
   19f68:	andeq	r9, r1, r0, ror lr
   19f6c:	andeq	sl, r1, r4, lsr r0
   19f70:	andeq	sl, r1, r8, lsr #1
   19f74:	andeq	r9, r1, r0, ror lr
   19f78:	andeq	r9, r1, r0, ror lr
   19f7c:	andeq	r9, r1, r0, ror lr
   19f80:	andeq	r9, r1, r0, ror lr
   19f84:	andeq	r9, r1, r0, ror lr
   19f88:	andeq	r9, r1, r0, ror lr
   19f8c:	strdeq	r9, [r1], -r0
   19f90:	strdeq	r9, [r1], -r0
   19f94:	strdeq	r9, [r1], -r0
   19f98:	andeq	sl, r1, ip, lsr #32
   19f9c:	andeq	r9, r1, r0, ror lr
   19fa0:	andeq	sl, r1, r8, lsr #32
   19fa4:	strdeq	r9, [r1], -r0
   19fa8:	andeq	sl, r1, r8, lsr #32
   19fac:	andeq	sl, r1, r0, asr r0
   19fb0:	andeq	r9, r1, r0, ror lr
   19fb4:	strdeq	r9, [r1], -r0
   19fb8:	andeq	sl, r1, r4, rrx
   19fbc:	muleq	r1, r4, r0
   19fc0:	strdeq	r9, [r1], -r0
   19fc4:	andeq	r9, r1, r0, ror lr
   19fc8:	andeq	sl, r1, r8, lsr #32
   19fcc:	andeq	r9, r1, r0, ror lr
   19fd0:	andeq	r9, r1, r0, ror lr
   19fd4:	strdeq	r9, [r1], -r0
   19fd8:	strdeq	r9, [r1], -r0
   19fdc:	strdeq	r9, [r1], -r0
   19fe0:	andeq	r9, r1, r0, ror lr
   19fe4:	andeq	r9, r1, r0, ror lr
   19fe8:	andeq	r9, r1, r0, ror lr
   19fec:	andeq	sl, r1, ip, ror r0
   19ff0:	mov	r2, #1
   19ff4:	strb	r2, [r1, #18]
   19ff8:	mov	r2, #115	; 0x73
   19ffc:	strb	r2, [r0]
   1a000:	mov	r2, #3
   1a004:	mov	r3, #0
   1a008:	strb	r3, [r0, #1]
   1a00c:	ldr	r0, [r1, #24]
   1a010:	cmp	r2, r0
   1a014:	strhi	r2, [r1, #24]
   1a018:	ldr	r0, [r8]
   1a01c:	add	r0, r0, #16
   1a020:	sub	sp, fp, #28
   1a024:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a028:	mov	r7, #115	; 0x73
   1a02c:	strb	r7, [r0], #1
   1a030:	b	19e70 <__assert_fail@plt+0x73f4>
   1a034:	mov	r2, #1
   1a038:	strb	r2, [r1, #18]
   1a03c:	b	1a084 <__assert_fail@plt+0x7608>
   1a040:	mov	r2, #1
   1a044:	strb	r2, [r1, #18]
   1a048:	mov	r2, #103	; 0x67
   1a04c:	b	19ffc <__assert_fail@plt+0x7580>
   1a050:	mov	r2, #1
   1a054:	mov	r3, #115	; 0x73
   1a058:	strb	r2, [r1, #20]
   1a05c:	strb	r3, [r0]
   1a060:	b	1a004 <__assert_fail@plt+0x7588>
   1a064:	mov	r2, #1
   1a068:	strb	r2, [r1, #18]
   1a06c:	mov	r2, #115	; 0x73
   1a070:	strb	r2, [r0]
   1a074:	mov	r2, #4
   1a078:	b	1a004 <__assert_fail@plt+0x7588>
   1a07c:	mov	r2, #1
   1a080:	strb	r2, [r1, #19]
   1a084:	mov	r2, #115	; 0x73
   1a088:	strb	r2, [r0]
   1a08c:	mov	r2, #2
   1a090:	b	1a004 <__assert_fail@plt+0x7588>
   1a094:	mov	r2, #111	; 0x6f
   1a098:	strb	r2, [r0]
   1a09c:	mov	r2, #1
   1a0a0:	strb	r2, [r1, #18]
   1a0a4:	b	1a000 <__assert_fail@plt+0x7584>
   1a0a8:	mov	r2, #115	; 0x73
   1a0ac:	strb	r2, [r0]
   1a0b0:	mov	r2, #5
   1a0b4:	b	1a004 <__assert_fail@plt+0x7588>
   1a0b8:	movw	r0, #36775	; 0x8fa7
   1a0bc:	movw	r1, #36649	; 0x8f29
   1a0c0:	movw	r3, #36657	; 0x8f31
   1a0c4:	mov	r2, #80	; 0x50
   1a0c8:	movt	r0, #4
   1a0cc:	movt	r1, #4
   1a0d0:	movt	r3, #4
   1a0d4:	bl	12a7c <__assert_fail@plt>
   1a0d8:	movw	r0, #36756	; 0x8f94
   1a0dc:	movw	r1, #36649	; 0x8f29
   1a0e0:	movw	r3, #36657	; 0x8f31
   1a0e4:	mov	r2, #79	; 0x4f
   1a0e8:	movt	r0, #4
   1a0ec:	movt	r1, #4
   1a0f0:	movt	r3, #4
   1a0f4:	bl	12a7c <__assert_fail@plt>
   1a0f8:	movw	r0, #36630	; 0x8f16
   1a0fc:	movw	r1, #36649	; 0x8f29
   1a100:	movw	r3, #36657	; 0x8f31
   1a104:	mov	r2, #78	; 0x4e
   1a108:	movt	r0, #4
   1a10c:	movt	r1, #4
   1a110:	movt	r3, #4
   1a114:	bl	12a7c <__assert_fail@plt>
   1a118:	movw	r0, #36794	; 0x8fba
   1a11c:	movw	r1, #36649	; 0x8f29
   1a120:	movw	r3, #36657	; 0x8f31
   1a124:	mov	r2, #97	; 0x61
   1a128:	movt	r0, #4
   1a12c:	movt	r1, #4
   1a130:	movt	r3, #4
   1a134:	bl	12a7c <__assert_fail@plt>
   1a138:	movw	r0, #36811	; 0x8fcb
   1a13c:	movw	r1, #36649	; 0x8f29
   1a140:	movw	r3, #36657	; 0x8f31
   1a144:	mov	r2, #98	; 0x62
   1a148:	movt	r0, #4
   1a14c:	movt	r1, #4
   1a150:	movt	r3, #4
   1a154:	bl	12a7c <__assert_fail@plt>
   1a158:	movw	r0, #36832	; 0x8fe0
   1a15c:	movw	r1, #36649	; 0x8f29
   1a160:	movw	r3, #36657	; 0x8f31
   1a164:	mov	r2, #105	; 0x69
   1a168:	movt	r0, #4
   1a16c:	movt	r1, #4
   1a170:	movt	r3, #4
   1a174:	bl	12a7c <__assert_fail@plt>
   1a178:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a17c:	add	fp, sp, #28
   1a180:	sub	sp, sp, #20
   1a184:	mov	r6, r2
   1a188:	mov	r2, r1
   1a18c:	movw	r1, #42800	; 0xa730
   1a190:	mov	r7, r0
   1a194:	mov	r0, r2
   1a198:	movt	r1, #1
   1a19c:	mov	r2, r6
   1a1a0:	bl	18058 <__assert_fail@plt+0x55dc>
   1a1a4:	movw	r1, #257	; 0x101
   1a1a8:	add	r8, r0, #40	; 0x28
   1a1ac:	movw	r5, #37221	; 0x9165
   1a1b0:	mov	r2, #0
   1a1b4:	mov	r9, r6
   1a1b8:	str	r0, [sp, #16]
   1a1bc:	strh	r1, [r0, #16]
   1a1c0:	movt	r5, #4
   1a1c4:	vld1.32	{d16-d17}, [r7]!
   1a1c8:	vst1.32	{d16-d17}, [r8]
   1a1cc:	ldr	r1, [r7]
   1a1d0:	strh	r2, [r0, #18]
   1a1d4:	str	r2, [r0, #24]
   1a1d8:	str	r2, [r0, #40]	; 0x28
   1a1dc:	str	r1, [r0, #56]	; 0x38
   1a1e0:	b	1a1f0 <__assert_fail@plt+0x7774>
   1a1e4:	movw	r5, #37221	; 0x9165
   1a1e8:	add	r6, r4, #1
   1a1ec:	movt	r5, #4
   1a1f0:	ldrb	r0, [r6]
   1a1f4:	cmp	r0, #37	; 0x25
   1a1f8:	beq	1a280 <__assert_fail@plt+0x7804>
   1a1fc:	cmp	r0, #92	; 0x5c
   1a200:	beq	1a218 <__assert_fail@plt+0x779c>
   1a204:	cmp	r0, #0
   1a208:	beq	1a60c <__assert_fail@plt+0x7b90>
   1a20c:	mov	r4, r6
   1a210:	add	r6, r6, #1
   1a214:	b	1a1f0 <__assert_fail@plt+0x7774>
   1a218:	mov	r4, r6
   1a21c:	ldrb	r0, [r4, #1]!
   1a220:	cmp	r0, #0
   1a224:	beq	1a350 <__assert_fail@plt+0x78d4>
   1a228:	cmp	r0, #99	; 0x63
   1a22c:	beq	1a664 <__assert_fail@plt+0x7be8>
   1a230:	and	r1, r0, #248	; 0xf8
   1a234:	cmp	r1, #48	; 0x30
   1a238:	bne	1a3ec <__assert_fail@plt+0x7970>
   1a23c:	ldrb	r1, [r6, #2]
   1a240:	sub	r0, r0, #48	; 0x30
   1a244:	mov	sl, #1
   1a248:	and	r2, r1, #248	; 0xf8
   1a24c:	cmp	r2, #48	; 0x30
   1a250:	bne	1a278 <__assert_fail@plt+0x77fc>
   1a254:	add	r0, r1, r0, lsl #3
   1a258:	ldrb	r1, [r6, #3]
   1a25c:	mov	sl, #2
   1a260:	sub	r0, r0, #48	; 0x30
   1a264:	and	r2, r1, #248	; 0xf8
   1a268:	cmp	r2, #48	; 0x30
   1a26c:	addeq	r0, r1, r0, lsl #3
   1a270:	moveq	sl, #3
   1a274:	subeq	r0, r0, #48	; 0x30
   1a278:	strb	r0, [r6]
   1a27c:	b	1a5a8 <__assert_fail@plt+0x7b2c>
   1a280:	mov	r7, r6
   1a284:	ldrb	sl, [r7, #1]!
   1a288:	cmp	sl, #37	; 0x25
   1a28c:	beq	1a320 <__assert_fail@plt+0x78a4>
   1a290:	cmp	sl, #0
   1a294:	beq	1a6e0 <__assert_fail@plt+0x7c64>
   1a298:	mov	r1, #1
   1a29c:	ldrb	sl, [r6, r1]
   1a2a0:	mov	r4, r1
   1a2a4:	cmp	sl, #0
   1a2a8:	beq	1a2c8 <__assert_fail@plt+0x784c>
   1a2ac:	mov	r0, r5
   1a2b0:	mov	r1, sl
   1a2b4:	mov	r2, #5
   1a2b8:	bl	12860 <memchr@plt>
   1a2bc:	add	r1, r4, #1
   1a2c0:	cmp	r0, #0
   1a2c4:	bne	1a29c <__assert_fail@plt+0x7820>
   1a2c8:	bl	12740 <__ctype_b_loc@plt>
   1a2cc:	ldr	r0, [r0]
   1a2d0:	add	r1, r0, sl, lsl #1
   1a2d4:	ldrb	r1, [r1, #1]
   1a2d8:	tst	r1, #8
   1a2dc:	beq	1a300 <__assert_fail@plt+0x7884>
   1a2e0:	add	r1, r4, #1
   1a2e4:	ldrb	sl, [r6, r1]
   1a2e8:	add	r1, r1, #1
   1a2ec:	add	r2, r0, sl, lsl #1
   1a2f0:	ldrb	r2, [r2, #1]
   1a2f4:	tst	r2, #8
   1a2f8:	bne	1a2e4 <__assert_fail@plt+0x7868>
   1a2fc:	sub	r4, r1, #1
   1a300:	add	r7, r6, r4
   1a304:	cmp	sl, #46	; 0x2e
   1a308:	bne	1a320 <__assert_fail@plt+0x78a4>
   1a30c:	ldrb	sl, [r7, #1]!
   1a310:	add	r1, r0, sl, lsl #1
   1a314:	ldrb	r1, [r1, #1]
   1a318:	tst	r1, #8
   1a31c:	bne	1a30c <__assert_fail@plt+0x7890>
   1a320:	movw	r0, #37226	; 0x916a
   1a324:	mov	r1, sl
   1a328:	mov	r2, #29
   1a32c:	movt	r0, #4
   1a330:	bl	12860 <memchr@plt>
   1a334:	cmp	r0, #0
   1a338:	mov	r4, #1
   1a33c:	mov	r0, sl
   1a340:	beq	1a37c <__assert_fail@plt+0x7900>
   1a344:	cmp	r0, #0
   1a348:	bne	1a3a8 <__assert_fail@plt+0x792c>
   1a34c:	b	1a47c <__assert_fail@plt+0x7a00>
   1a350:	movw	r1, #36852	; 0x8ff4
   1a354:	mov	r0, #0
   1a358:	mov	r2, #5
   1a35c:	mov	sl, #0
   1a360:	movt	r1, #4
   1a364:	bl	1253c <dcgettext@plt>
   1a368:	mov	r2, r0
   1a36c:	mov	r0, #0
   1a370:	mov	r1, #0
   1a374:	bl	12674 <error@plt>
   1a378:	b	1a5a8 <__assert_fail@plt+0x7b2c>
   1a37c:	movw	r0, #37255	; 0x9187
   1a380:	mov	r1, sl
   1a384:	mov	r2, #5
   1a388:	movt	r0, #4
   1a38c:	bl	12860 <memchr@plt>
   1a390:	cmp	r0, #0
   1a394:	beq	1a478 <__assert_fail@plt+0x79fc>
   1a398:	ldrb	r0, [r7, #1]
   1a39c:	mov	r4, #2
   1a3a0:	cmp	r0, #0
   1a3a4:	beq	1a47c <__assert_fail@plt+0x7a00>
   1a3a8:	mov	r0, #0
   1a3ac:	cmp	r4, #2
   1a3b0:	add	r5, r7, r4
   1a3b4:	sub	r2, r7, r9
   1a3b8:	mov	r1, r9
   1a3bc:	mov	r3, #2
   1a3c0:	ldrbeq	r0, [r7, #1]
   1a3c4:	sub	r4, r5, #1
   1a3c8:	str	sl, [sp]
   1a3cc:	str	r0, [sp, #4]
   1a3d0:	ldr	r0, [sp, #16]
   1a3d4:	str	r0, [sp, #8]
   1a3d8:	mov	r0, r8
   1a3dc:	bl	19dd0 <__assert_fail@plt+0x7354>
   1a3e0:	mov	r8, r0
   1a3e4:	mov	r9, r5
   1a3e8:	b	1a1e4 <__assert_fail@plt+0x7768>
   1a3ec:	sub	r1, r0, #92	; 0x5c
   1a3f0:	cmp	r1, #26
   1a3f4:	bhi	1a544 <__assert_fail@plt+0x7ac8>
   1a3f8:	add	r2, pc, #4
   1a3fc:	mov	r0, #7
   1a400:	ldr	pc, [r2, r1, lsl #2]
   1a404:	andeq	sl, r1, r0, ror r4
   1a408:	andeq	sl, r1, r4, asr #10
   1a40c:	andeq	sl, r1, r4, asr #10
   1a410:	andeq	sl, r1, r4, asr #10
   1a414:	andeq	sl, r1, r4, asr #10
   1a418:	andeq	sl, r1, r0, lsr #11
   1a41c:	andeq	sl, r1, ip, ror r5
   1a420:	andeq	sl, r1, r4, asr #10
   1a424:	andeq	sl, r1, r4, asr #10
   1a428:	andeq	sl, r1, r4, asr #10
   1a42c:	muleq	r1, r4, r5
   1a430:	andeq	sl, r1, r4, asr #10
   1a434:	andeq	sl, r1, r4, asr #10
   1a438:	andeq	sl, r1, r4, asr #10
   1a43c:	andeq	sl, r1, r4, asr #10
   1a440:	andeq	sl, r1, r4, asr #10
   1a444:	andeq	sl, r1, r4, asr #10
   1a448:	andeq	sl, r1, r4, asr #10
   1a44c:	muleq	r1, ip, r5
   1a450:	andeq	sl, r1, r4, asr #10
   1a454:	andeq	sl, r1, r4, asr #10
   1a458:	andeq	sl, r1, r4, asr #10
   1a45c:	andeq	sl, r1, r4, ror r5
   1a460:	andeq	sl, r1, r4, asr #10
   1a464:	andeq	sl, r1, r4, lsl #11
   1a468:	andeq	sl, r1, r4, asr #10
   1a46c:	andeq	sl, r1, ip, lsl #11
   1a470:	mov	r0, #92	; 0x5c
   1a474:	b	1a5a0 <__assert_fail@plt+0x7b24>
   1a478:	mov	r4, #0
   1a47c:	movw	r0, #36968	; 0x9068
   1a480:	mov	r1, sl
   1a484:	mov	r2, #4
   1a488:	movt	r0, #4
   1a48c:	bl	12860 <memchr@plt>
   1a490:	cmp	r0, #0
   1a494:	bne	1a708 <__assert_fail@plt+0x7c8c>
   1a498:	add	sl, r7, #1
   1a49c:	cmp	r4, #2
   1a4a0:	ldrbeq	r0, [sl]
   1a4a4:	cmpeq	r0, #0
   1a4a8:	beq	1a534 <__assert_fail@plt+0x7ab8>
   1a4ac:	movw	r1, #37107	; 0x90f3
   1a4b0:	mov	r0, #0
   1a4b4:	movt	r1, #4
   1a4b8:	mov	r2, #5
   1a4bc:	bl	1253c <dcgettext@plt>
   1a4c0:	ldrb	r3, [r7]
   1a4c4:	mov	r2, r0
   1a4c8:	mov	r0, #0
   1a4cc:	mov	r1, #0
   1a4d0:	bl	12674 <error@plt>
   1a4d4:	mov	r0, #20
   1a4d8:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   1a4dc:	mov	r5, #0
   1a4e0:	sub	r4, sl, r9
   1a4e4:	str	r0, [r8]
   1a4e8:	str	r5, [r0]
   1a4ec:	str	r4, [r0, #12]
   1a4f0:	str	r5, [r0, #16]
   1a4f4:	strh	r5, [r0, #4]
   1a4f8:	add	r0, r4, #2
   1a4fc:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   1a500:	mov	r6, r0
   1a504:	ldr	r0, [r8]
   1a508:	mov	r1, r9
   1a50c:	mov	r2, r4
   1a510:	str	r6, [r0, #8]
   1a514:	mov	r0, r6
   1a518:	bl	12818 <strncpy@plt>
   1a51c:	strb	r5, [r6, r4]
   1a520:	mov	r4, r7
   1a524:	mov	r9, sl
   1a528:	ldr	r0, [r8]
   1a52c:	add	r8, r0, #16
   1a530:	b	1a1e4 <__assert_fail@plt+0x7768>
   1a534:	movw	r1, #37034	; 0x90aa
   1a538:	mov	r0, #0
   1a53c:	movt	r1, #4
   1a540:	b	1a4b8 <__assert_fail@plt+0x7a3c>
   1a544:	movw	r1, #36899	; 0x9023
   1a548:	mov	r0, #0
   1a54c:	mov	r2, #5
   1a550:	movt	r1, #4
   1a554:	bl	1253c <dcgettext@plt>
   1a558:	ldrb	r3, [r4]
   1a55c:	mov	r2, r0
   1a560:	mov	r0, #0
   1a564:	mov	r1, #0
   1a568:	bl	12674 <error@plt>
   1a56c:	add	r6, r4, #1
   1a570:	b	1a1f0 <__assert_fail@plt+0x7774>
   1a574:	mov	r0, #13
   1a578:	b	1a5a0 <__assert_fail@plt+0x7b24>
   1a57c:	mov	r0, #8
   1a580:	b	1a5a0 <__assert_fail@plt+0x7b24>
   1a584:	mov	r0, #9
   1a588:	b	1a5a0 <__assert_fail@plt+0x7b24>
   1a58c:	mov	r0, #11
   1a590:	b	1a5a0 <__assert_fail@plt+0x7b24>
   1a594:	mov	r0, #12
   1a598:	b	1a5a0 <__assert_fail@plt+0x7b24>
   1a59c:	mov	r0, #10
   1a5a0:	strb	r0, [r6]
   1a5a4:	mov	sl, #1
   1a5a8:	mov	r0, #20
   1a5ac:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   1a5b0:	sub	r1, r6, r9
   1a5b4:	mov	r5, #0
   1a5b8:	str	r0, [r8]
   1a5bc:	add	r7, r1, #1
   1a5c0:	str	r5, [r0]
   1a5c4:	str	r7, [r0, #12]
   1a5c8:	str	r5, [r0, #16]
   1a5cc:	strh	r5, [r0, #4]
   1a5d0:	add	r0, r1, #3
   1a5d4:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   1a5d8:	mov	r4, r0
   1a5dc:	ldr	r0, [r8]
   1a5e0:	mov	r1, r9
   1a5e4:	mov	r2, r7
   1a5e8:	str	r4, [r0, #8]
   1a5ec:	mov	r0, r4
   1a5f0:	bl	12818 <strncpy@plt>
   1a5f4:	strb	r5, [r4, r7]
   1a5f8:	add	r4, r6, sl
   1a5fc:	ldr	r0, [r8]
   1a600:	add	r9, r4, #1
   1a604:	add	r8, r0, #16
   1a608:	b	1a1e4 <__assert_fail@plt+0x7768>
   1a60c:	cmp	r6, r9
   1a610:	bls	1a6d4 <__assert_fail@plt+0x7c58>
   1a614:	mov	r0, #20
   1a618:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   1a61c:	mov	r5, #0
   1a620:	sub	r4, r6, r9
   1a624:	str	r0, [r8]
   1a628:	str	r5, [r0]
   1a62c:	str	r4, [r0, #12]
   1a630:	str	r5, [r0, #16]
   1a634:	strh	r5, [r0, #4]
   1a638:	add	r0, r4, #2
   1a63c:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   1a640:	mov	r6, r0
   1a644:	ldr	r0, [r8]
   1a648:	mov	r1, r9
   1a64c:	mov	r2, r4
   1a650:	str	r6, [r0, #8]
   1a654:	mov	r0, r6
   1a658:	bl	12818 <strncpy@plt>
   1a65c:	strb	r5, [r6, r4]
   1a660:	b	1a6d4 <__assert_fail@plt+0x7c58>
   1a664:	mov	r0, #20
   1a668:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   1a66c:	mov	r1, #1
   1a670:	sub	r6, r6, r9
   1a674:	mov	r4, #0
   1a678:	str	r0, [r8]
   1a67c:	str	r1, [r0]
   1a680:	str	r6, [r0, #12]
   1a684:	str	r4, [r0, #16]
   1a688:	strh	r4, [r0, #4]
   1a68c:	add	r0, r6, #2
   1a690:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   1a694:	mov	r7, r0
   1a698:	ldr	r0, [r8]
   1a69c:	mov	r1, r9
   1a6a0:	mov	r2, r6
   1a6a4:	str	r7, [r0, #8]
   1a6a8:	mov	r0, r7
   1a6ac:	bl	12818 <strncpy@plt>
   1a6b0:	ldr	r1, [sp, #16]
   1a6b4:	strb	r4, [r7, r6]
   1a6b8:	ldrb	r0, [r1, #18]
   1a6bc:	cmp	r0, #0
   1a6c0:	beq	1a6d4 <__assert_fail@plt+0x7c58>
   1a6c4:	ldr	r0, [r1, #24]
   1a6c8:	cmp	r0, #2
   1a6cc:	movls	r0, #3
   1a6d0:	strls	r0, [r1, #24]
   1a6d4:	mov	r0, #1
   1a6d8:	sub	sp, fp, #28
   1a6dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6e0:	movw	r1, #36934	; 0x9046
   1a6e4:	mov	r0, #0
   1a6e8:	mov	r2, #5
   1a6ec:	movt	r1, #4
   1a6f0:	bl	1253c <dcgettext@plt>
   1a6f4:	mov	r2, r0
   1a6f8:	mov	r0, #1
   1a6fc:	mov	r1, #0
   1a700:	mov	r3, r6
   1a704:	bl	12674 <error@plt>
   1a708:	movw	r1, #36972	; 0x906c
   1a70c:	mov	r0, #0
   1a710:	mov	r2, #5
   1a714:	movt	r1, #4
   1a718:	bl	1253c <dcgettext@plt>
   1a71c:	ldrb	r3, [r7]
   1a720:	mov	r2, r0
   1a724:	mov	r0, #1
   1a728:	mov	r1, #0
   1a72c:	bl	12674 <error@plt>
   1a730:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a734:	add	fp, sp, #28
   1a738:	sub	sp, sp, #4
   1a73c:	vpush	{d8-d9}
   1a740:	sub	sp, sp, #808	; 0x328
   1a744:	mov	r7, r2
   1a748:	ldr	r8, [r7, #40]!	; 0x28
   1a74c:	cmp	r8, #0
   1a750:	beq	1b170 <__assert_fail@plt+0x86f4>
   1a754:	mov	r4, r0
   1a758:	add	r0, r1, #48	; 0x30
   1a75c:	mov	r9, r2
   1a760:	mov	sl, r1
   1a764:	str	r0, [sp, #28]
   1a768:	add	r0, r1, #96	; 0x60
   1a76c:	str	r0, [sp, #24]
   1a770:	add	r0, r1, #64	; 0x40
   1a774:	str	r0, [sp, #32]
   1a778:	add	r0, r1, #80	; 0x50
   1a77c:	str	r0, [sp, #44]	; 0x2c
   1a780:	add	r0, r1, #88	; 0x58
   1a784:	str	r0, [sp, #40]	; 0x28
   1a788:	add	r0, r1, #72	; 0x48
   1a78c:	str	r0, [sp, #36]	; 0x24
   1a790:	b	1add0 <__assert_fail@plt+0x8354>
   1a794:	ldr	r0, [sp, #32]
   1a798:	ldr	r6, [r8, #8]
   1a79c:	mov	r2, #0
   1a7a0:	mov	r3, #512	; 0x200
   1a7a4:	ldrd	r0, [r0]
   1a7a8:	b	1a85c <__assert_fail@plt+0x7de0>
   1a7ac:	ldr	r2, [sl, #16]
   1a7b0:	ldr	r1, [r8, #8]
   1a7b4:	mov	r0, r7
   1a7b8:	bfc	r2, #12, #20
   1a7bc:	b	1b160 <__assert_fail@plt+0x86e4>
   1a7c0:	ldrb	r2, [r9, #52]	; 0x34
   1a7c4:	ldr	r1, [r9, #56]	; 0x38
   1a7c8:	ldr	r0, [r9, #44]	; 0x2c
   1a7cc:	ldr	r3, [r8, #8]
   1a7d0:	str	r4, [sp]
   1a7d4:	b	1aa30 <__assert_fail@plt+0x7fb4>
   1a7d8:	ldr	r0, [sp, #44]	; 0x2c
   1a7dc:	ldr	r5, [r8, #8]
   1a7e0:	ldrd	r0, [r0]
   1a7e4:	bl	1b75c <__assert_fail@plt+0x8ce0>
   1a7e8:	b	1ac14 <__assert_fail@plt+0x8198>
   1a7ec:	add	r5, sp, #48	; 0x30
   1a7f0:	mov	r0, sl
   1a7f4:	mov	r1, r5
   1a7f8:	bl	22b04 <__assert_fail@plt+0x10088>
   1a7fc:	mov	r0, #0
   1a800:	mov	r2, r5
   1a804:	strb	r0, [sp, #58]	; 0x3a
   1a808:	mov	r0, r7
   1a80c:	ldr	r1, [r8, #8]
   1a810:	b	1b160 <__assert_fail@plt+0x86e4>
   1a814:	ldr	r6, [r8, #8]
   1a818:	ldr	r0, [sp, #36]	; 0x24
   1a81c:	b	1aad8 <__assert_fail@plt+0x805c>
   1a820:	ldr	r0, [sp, #32]
   1a824:	ldr	r5, [r8, #8]
   1a828:	mov	r6, #512	; 0x200
   1a82c:	mov	r2, #0
   1a830:	mov	r3, #1024	; 0x400
   1a834:	ldrd	r0, [r0]
   1a838:	str	r6, [sp]
   1a83c:	b	1aba8 <__assert_fail@plt+0x812c>
   1a840:	ldr	r5, [r8, #8]
   1a844:	ldr	r0, [sl, #20]
   1a848:	b	1abf0 <__assert_fail@plt+0x8174>
   1a84c:	ldr	r6, [r8, #8]
   1a850:	ldrd	r0, [sl]
   1a854:	mov	r2, #0
   1a858:	mov	r3, #1
   1a85c:	str	r3, [sp]
   1a860:	stmib	sp, {r2, r3}
   1a864:	str	r2, [sp, #12]
   1a868:	add	r2, sp, #152	; 0x98
   1a86c:	b	1ab18 <__assert_fail@plt+0x809c>
   1a870:	ldr	r6, [r8, #8]
   1a874:	mov	r0, sl
   1a878:	mov	r1, r4
   1a87c:	bl	1b980 <__assert_fail@plt+0x8f04>
   1a880:	ldr	r3, [r9, #44]	; 0x2c
   1a884:	ldr	r1, [r9, #56]	; 0x38
   1a888:	ldrb	r2, [r9, #52]	; 0x34
   1a88c:	str	r0, [sp]
   1a890:	mov	r0, r3
   1a894:	mov	r3, r6
   1a898:	b	1aa30 <__assert_fail@plt+0x7fb4>
   1a89c:	movw	r5, #56896	; 0xde40
   1a8a0:	movt	r5, #5
   1a8a4:	ldr	r0, [r5, #20]
   1a8a8:	add	r0, r0, #1
   1a8ac:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   1a8b0:	ldr	r5, [r5, #20]
   1a8b4:	mov	r1, r4
   1a8b8:	mov	r6, r0
   1a8bc:	mov	r2, r5
   1a8c0:	bl	124b8 <memcpy@plt>
   1a8c4:	mov	r0, #0
   1a8c8:	mov	r2, r6
   1a8cc:	strb	r0, [r6, r5]
   1a8d0:	mov	r0, r7
   1a8d4:	ldr	r1, [r8, #8]
   1a8d8:	bl	1b1d0 <__assert_fail@plt+0x8754>
   1a8dc:	b	1ab84 <__assert_fail@plt+0x8108>
   1a8e0:	ldr	r0, [sl, #16]
   1a8e4:	and	r0, r0, #61440	; 0xf000
   1a8e8:	cmp	r0, #40960	; 0xa000
   1a8ec:	bne	1ac34 <__assert_fail@plt+0x81b8>
   1a8f0:	movw	r0, #56896	; 0xde40
   1a8f4:	add	r3, sp, #48	; 0x30
   1a8f8:	movt	r0, #5
   1a8fc:	ldr	r2, [r0, #12]
   1a900:	ldr	r1, [r0, #16]
   1a904:	mov	r0, #0
   1a908:	str	r0, [sp]
   1a90c:	mov	r0, #3
   1a910:	bl	125b4 <__fxstatat64@plt>
   1a914:	cmp	r0, #0
   1a918:	beq	1ad08 <__assert_fail@plt+0x828c>
   1a91c:	bl	127d0 <__errno_location@plt>
   1a920:	mov	r6, r0
   1a924:	ldr	r0, [r0]
   1a928:	cmp	r0, #20
   1a92c:	cmpne	r0, #2
   1a930:	bne	1ad78 <__assert_fail@plt+0x82fc>
   1a934:	ldr	r1, [r8, #8]
   1a938:	movw	r2, #37819	; 0x93bb
   1a93c:	mov	r0, r7
   1a940:	movt	r2, #4
   1a944:	b	1b160 <__assert_fail@plt+0x86e4>
   1a948:	movw	r0, #56896	; 0xde40
   1a94c:	movt	r0, #5
   1a950:	b	1abd8 <__assert_fail@plt+0x815c>
   1a954:	mov	r0, r4
   1a958:	bl	227cc <__assert_fail@plt+0xfd50>
   1a95c:	mov	r6, r0
   1a960:	ldr	r3, [r8, #8]
   1a964:	ldr	r0, [r9, #44]	; 0x2c
   1a968:	ldr	r1, [r9, #56]	; 0x38
   1a96c:	ldrb	r2, [r9, #52]	; 0x34
   1a970:	b	1ab64 <__assert_fail@plt+0x80e8>
   1a974:	mov	r0, r4
   1a978:	bl	2e110 <__assert_fail@plt+0x1b694>
   1a97c:	mov	r6, r0
   1a980:	bl	12788 <strlen@plt>
   1a984:	add	r0, r6, r0
   1a988:	sub	r1, r0, #1
   1a98c:	mov	r0, r1
   1a990:	cmp	r6, r1
   1a994:	bhi	1a9a8 <__assert_fail@plt+0x7f2c>
   1a998:	mov	r1, r0
   1a99c:	ldrb	r2, [r1], #-1
   1a9a0:	cmp	r2, #47	; 0x2f
   1a9a4:	beq	1a98c <__assert_fail@plt+0x7f10>
   1a9a8:	cmp	r6, r0
   1a9ac:	bcs	1a9c0 <__assert_fail@plt+0x7f44>
   1a9b0:	ldrb	r1, [r0, #1]
   1a9b4:	cmp	r1, #47	; 0x2f
   1a9b8:	moveq	r1, #0
   1a9bc:	strbeq	r1, [r0, #1]
   1a9c0:	mov	r0, r6
   1a9c4:	mov	r1, #47	; 0x2f
   1a9c8:	bl	128f0 <strrchr@plt>
   1a9cc:	cmp	r0, #0
   1a9d0:	beq	1ac6c <__assert_fail@plt+0x81f0>
   1a9d4:	mov	r1, #0
   1a9d8:	strb	r1, [r0]
   1a9dc:	b	1ab54 <__assert_fail@plt+0x80d8>
   1a9e0:	ldr	r5, [r8, #8]
   1a9e4:	ldr	r0, [sp, #28]
   1a9e8:	b	1ab98 <__assert_fail@plt+0x811c>
   1a9ec:	movw	r0, #56896	; 0xde40
   1a9f0:	movw	r6, #34847	; 0x881f
   1a9f4:	movt	r0, #5
   1a9f8:	movt	r6, #4
   1a9fc:	ldr	r1, [r0]
   1aa00:	cmp	r1, #1
   1aa04:	blt	1aa1c <__assert_fail@plt+0x7fa0>
   1aa08:	ldr	r0, [r0, #20]
   1aa0c:	mov	r6, r4
   1aa10:	ldrb	r0, [r6, r0]!
   1aa14:	cmp	r0, #47	; 0x2f
   1aa18:	addeq	r6, r6, #1
   1aa1c:	ldrb	r2, [r9, #52]	; 0x34
   1aa20:	ldr	r1, [r9, #56]	; 0x38
   1aa24:	ldr	r0, [r9, #44]	; 0x2c
   1aa28:	ldr	r3, [r8, #8]
   1aa2c:	str	r6, [sp]
   1aa30:	bl	21a70 <__assert_fail@plt+0xeff4>
   1aa34:	cmn	r0, #1
   1aa38:	bgt	1b164 <__assert_fail@plt+0x86e8>
   1aa3c:	b	1b104 <__assert_fail@plt+0x8688>
   1aa40:	ldr	r2, [sp, #28]
   1aa44:	ldr	r0, [sp, #32]
   1aa48:	str	r4, [sp, #20]
   1aa4c:	ldr	r6, [r8, #8]
   1aa50:	ldrd	r4, [r2]
   1aa54:	ldrd	r0, [r0]
   1aa58:	orrs	r2, r4, r5
   1aa5c:	beq	1ac8c <__assert_fail@plt+0x8210>
   1aa60:	bl	465c8 <__assert_fail@plt+0x33b4c>
   1aa64:	vldr	d8, [pc, #1004]	; 1ae58 <__assert_fail@plt+0x83dc>
   1aa68:	vmov	d9, r0, r1
   1aa6c:	mov	r0, r4
   1aa70:	mov	r1, r5
   1aa74:	bl	465c8 <__assert_fail@plt+0x33b4c>
   1aa78:	vmov	d16, r0, r1
   1aa7c:	vmul.f64	d17, d9, d8
   1aa80:	vdiv.f64	d16, d17, d16
   1aa84:	b	1ad60 <__assert_fail@plt+0x82e4>
   1aa88:	movw	r5, #56896	; 0xde40
   1aa8c:	movw	r2, #56940	; 0xde6c
   1aa90:	movt	r5, #5
   1aa94:	movt	r2, #5
   1aa98:	ldr	r3, [r2, #64]	; 0x40
   1aa9c:	ldr	r1, [r5, #12]
   1aaa0:	ldr	r0, [r5, #16]
   1aaa4:	add	r2, sp, #48	; 0x30
   1aaa8:	blx	r3
   1aaac:	ldr	r1, [r8, #8]
   1aab0:	cmn	r0, #1
   1aab4:	ble	1aca8 <__assert_fail@plt+0x822c>
   1aab8:	ldr	r2, [sp, #48]	; 0x30
   1aabc:	mov	r0, r7
   1aac0:	bl	1b1d0 <__assert_fail@plt+0x8754>
   1aac4:	ldr	r0, [sp, #48]	; 0x30
   1aac8:	bl	129a4 <freecon@plt>
   1aacc:	b	1b164 <__assert_fail@plt+0x86e8>
   1aad0:	ldr	r6, [r8, #8]
   1aad4:	ldr	r0, [sp, #40]	; 0x28
   1aad8:	ldrd	r0, [r0]
   1aadc:	bl	1b75c <__assert_fail@plt+0x8ce0>
   1aae0:	b	1b154 <__assert_fail@plt+0x86d8>
   1aae4:	ldr	r0, [sl, #28]
   1aae8:	bl	12a58 <getgrgid@plt>
   1aaec:	cmp	r0, #0
   1aaf0:	bne	1abc8 <__assert_fail@plt+0x814c>
   1aaf4:	ldr	r6, [r8, #8]
   1aaf8:	ldr	r0, [sl, #28]
   1aafc:	mov	r2, #1
   1ab00:	mov	r1, #0
   1ab04:	str	r2, [sp]
   1ab08:	stmib	sp, {r1, r2}
   1ab0c:	str	r1, [sp, #12]
   1ab10:	add	r2, sp, #152	; 0x98
   1ab14:	mov	r1, #0
   1ab18:	mov	r3, #0
   1ab1c:	bl	23e60 <__assert_fail@plt+0x113e4>
   1ab20:	b	1b154 <__assert_fail@plt+0x86d8>
   1ab24:	ldr	r0, [sl, #16]
   1ab28:	and	r0, r0, #61440	; 0xf000
   1ab2c:	cmp	r0, #40960	; 0xa000
   1ab30:	bne	1ad2c <__assert_fail@plt+0x82b0>
   1ab34:	movw	r5, #56896	; 0xde40
   1ab38:	movt	r5, #5
   1ab3c:	ldr	r1, [r5, #12]
   1ab40:	ldr	r0, [r5, #16]
   1ab44:	bl	2227c <__assert_fail@plt+0xf800>
   1ab48:	cmp	r0, #0
   1ab4c:	beq	1ad14 <__assert_fail@plt+0x8298>
   1ab50:	mov	r6, r0
   1ab54:	ldrb	r2, [r9, #52]	; 0x34
   1ab58:	ldr	r1, [r9, #56]	; 0x38
   1ab5c:	ldr	r0, [r9, #44]	; 0x2c
   1ab60:	ldr	r3, [r8, #8]
   1ab64:	str	r6, [sp]
   1ab68:	bl	21a70 <__assert_fail@plt+0xeff4>
   1ab6c:	cmn	r0, #1
   1ab70:	bgt	1ab84 <__assert_fail@plt+0x8108>
   1ab74:	bl	127d0 <__errno_location@plt>
   1ab78:	ldr	r0, [r0]
   1ab7c:	ldr	r1, [r9, #48]	; 0x30
   1ab80:	bl	18bbc <__assert_fail@plt+0x6140>
   1ab84:	mov	r0, r6
   1ab88:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   1ab8c:	b	1b164 <__assert_fail@plt+0x86e8>
   1ab90:	ldr	r5, [r8, #8]
   1ab94:	ldr	r0, [sp, #24]
   1ab98:	ldrd	r0, [r0]
   1ab9c:	mov	r3, #1
   1aba0:	mov	r2, #0
   1aba4:	str	r3, [sp]
   1aba8:	stmib	sp, {r2, r3}
   1abac:	str	r2, [sp, #12]
   1abb0:	add	r2, sp, #152	; 0x98
   1abb4:	b	1ac0c <__assert_fail@plt+0x8190>
   1abb8:	ldr	r0, [sl, #24]
   1abbc:	bl	123ec <getpwuid@plt>
   1abc0:	cmp	r0, #0
   1abc4:	beq	1abe8 <__assert_fail@plt+0x816c>
   1abc8:	ldr	r1, [r8, #8]
   1abcc:	ldr	r2, [r8, #12]
   1abd0:	mov	r3, #115	; 0x73
   1abd4:	strb	r3, [r1, r2]
   1abd8:	ldr	r2, [r0]
   1abdc:	ldr	r1, [r8, #8]
   1abe0:	mov	r0, r7
   1abe4:	b	1b160 <__assert_fail@plt+0x86e4>
   1abe8:	ldr	r5, [r8, #8]
   1abec:	ldr	r0, [sl, #24]
   1abf0:	mov	r2, #1
   1abf4:	mov	r1, #0
   1abf8:	str	r2, [sp]
   1abfc:	stmib	sp, {r1, r2}
   1ac00:	str	r1, [sp, #12]
   1ac04:	add	r2, sp, #152	; 0x98
   1ac08:	mov	r1, #0
   1ac0c:	mov	r3, #0
   1ac10:	bl	23e60 <__assert_fail@plt+0x113e4>
   1ac14:	mov	r2, r0
   1ac18:	mov	r0, r7
   1ac1c:	mov	r1, r5
   1ac20:	b	1b160 <__assert_fail@plt+0x86e4>
   1ac24:	ldr	r1, [r8, #8]
   1ac28:	ldr	r0, [sl, #16]
   1ac2c:	and	r0, r0, #61440	; 0xf000
   1ac30:	b	1ac38 <__assert_fail@plt+0x81bc>
   1ac34:	ldr	r1, [r8, #8]
   1ac38:	sub	r0, r0, #4096	; 0x1000
   1ac3c:	lsr	r2, r0, #12
   1ac40:	cmp	r2, #11
   1ac44:	bhi	1ac5c <__assert_fail@plt+0x81e0>
   1ac48:	movw	r2, #38000	; 0x9470
   1ac4c:	movt	r2, #4
   1ac50:	ldr	r2, [r2, r0, asr #10]
   1ac54:	mov	r0, r7
   1ac58:	b	1b160 <__assert_fail@plt+0x86e4>
   1ac5c:	movw	r2, #37897	; 0x9409
   1ac60:	mov	r0, r7
   1ac64:	movt	r2, #4
   1ac68:	b	1b160 <__assert_fail@plt+0x86e4>
   1ac6c:	ldrb	r2, [r9, #52]	; 0x34
   1ac70:	ldr	r1, [r9, #56]	; 0x38
   1ac74:	ldr	r0, [r9, #44]	; 0x2c
   1ac78:	ldr	r3, [r8, #8]
   1ac7c:	movw	r5, #31476	; 0x7af4
   1ac80:	movt	r5, #4
   1ac84:	str	r5, [sp]
   1ac88:	b	1ab68 <__assert_fail@plt+0x80ec>
   1ac8c:	orrs	r0, r0, r1
   1ac90:	beq	1ad5c <__assert_fail@plt+0x82e0>
   1ac94:	add	r0, pc, #452	; 0x1c4
   1ac98:	cmp	r1, #0
   1ac9c:	addlt	r0, r0, #8
   1aca0:	vldr	d16, [r0]
   1aca4:	b	1ad60 <__assert_fail@plt+0x82e4>
   1aca8:	movw	r2, #34847	; 0x881f
   1acac:	mov	r0, r7
   1acb0:	movt	r2, #4
   1acb4:	bl	1b1d0 <__assert_fail@plt+0x8754>
   1acb8:	bl	127d0 <__errno_location@plt>
   1acbc:	ldr	r0, [r0]
   1acc0:	movw	r1, #29049	; 0x7179
   1acc4:	mov	r2, #5
   1acc8:	movt	r1, #4
   1accc:	str	r0, [sp, #20]
   1acd0:	mov	r0, #0
   1acd4:	bl	1253c <dcgettext@plt>
   1acd8:	mov	r6, r0
   1acdc:	mov	r0, #0
   1ace0:	mov	r1, r4
   1ace4:	bl	19994 <__assert_fail@plt+0x6f18>
   1ace8:	ldr	r1, [sp, #20]
   1acec:	mov	r3, r0
   1acf0:	mov	r0, #0
   1acf4:	mov	r2, r6
   1acf8:	bl	12674 <error@plt>
   1acfc:	mov	r0, #1
   1ad00:	str	r0, [r5, #28]
   1ad04:	b	1b164 <__assert_fail@plt+0x86e8>
   1ad08:	ldr	r1, [r8, #8]
   1ad0c:	ldr	r0, [sp, #64]	; 0x40
   1ad10:	b	1ac2c <__assert_fail@plt+0x81b0>
   1ad14:	bl	127d0 <__errno_location@plt>
   1ad18:	ldr	r0, [r0]
   1ad1c:	mov	r1, r4
   1ad20:	bl	18664 <__assert_fail@plt+0x5be8>
   1ad24:	mov	r0, #1
   1ad28:	str	r0, [r5, #28]
   1ad2c:	ldrb	r2, [r9, #52]	; 0x34
   1ad30:	ldr	r1, [r9, #56]	; 0x38
   1ad34:	ldr	r0, [r9, #44]	; 0x2c
   1ad38:	ldr	r3, [r8, #8]
   1ad3c:	movw	r6, #34847	; 0x881f
   1ad40:	movt	r6, #4
   1ad44:	str	r6, [sp]
   1ad48:	bl	21a70 <__assert_fail@plt+0xeff4>
   1ad4c:	mov	r6, #0
   1ad50:	cmn	r0, #1
   1ad54:	bgt	1ab84 <__assert_fail@plt+0x8108>
   1ad58:	b	1ab74 <__assert_fail@plt+0x80f8>
   1ad5c:	vmov.f64	d16, #112	; 0x3f800000  1.0
   1ad60:	ldr	r4, [sp, #20]
   1ad64:	vmov	r2, r3, d16
   1ad68:	mov	r0, r7
   1ad6c:	mov	r1, r6
   1ad70:	bl	1b1d0 <__assert_fail@plt+0x8754>
   1ad74:	b	1b164 <__assert_fail@plt+0x86e8>
   1ad78:	ldr	r1, [r8, #8]
   1ad7c:	cmp	r0, #40	; 0x28
   1ad80:	bne	1ad94 <__assert_fail@plt+0x8318>
   1ad84:	movw	r2, #35204	; 0x8984
   1ad88:	mov	r0, r7
   1ad8c:	movt	r2, #4
   1ad90:	b	1b160 <__assert_fail@plt+0x86e4>
   1ad94:	movw	r2, #39690	; 0x9b0a
   1ad98:	mov	r0, r7
   1ad9c:	movt	r2, #4
   1ada0:	bl	1b1d0 <__assert_fail@plt+0x8754>
   1ada4:	ldr	r5, [r6]
   1ada8:	mov	r0, #0
   1adac:	mov	r1, r4
   1adb0:	bl	19994 <__assert_fail@plt+0x6f18>
   1adb4:	movw	r2, #52175	; 0xcbcf
   1adb8:	mov	r3, r0
   1adbc:	mov	r0, #0
   1adc0:	mov	r1, r5
   1adc4:	movt	r2, #4
   1adc8:	bl	12674 <error@plt>
   1adcc:	b	1b164 <__assert_fail@plt+0x86e8>
   1add0:	ldr	r0, [r8]
   1add4:	cmp	r0, #2
   1add8:	bne	1ae70 <__assert_fail@plt+0x83f4>
   1addc:	ldrb	r2, [r8, #5]
   1ade0:	cmp	r2, #0
   1ade4:	beq	1aea4 <__assert_fail@plt+0x8428>
   1ade8:	ldrb	r0, [r8, #4]
   1adec:	sub	r0, r0, #65	; 0x41
   1adf0:	cmp	r0, #19
   1adf4:	bhi	1b184 <__assert_fail@plt+0x8708>
   1adf8:	add	r1, pc, #0
   1adfc:	ldr	pc, [r1, r0, lsl #2]
   1ae00:	andeq	sl, r1, r0, asr lr
   1ae04:	andeq	fp, r1, r0, lsr #2
   1ae08:	andeq	fp, r1, r4, asr #2
   1ae0c:	andeq	fp, r1, r4, lsl #3
   1ae10:	andeq	fp, r1, r4, lsl #3
   1ae14:	andeq	fp, r1, r4, lsl #3
   1ae18:	andeq	fp, r1, r4, lsl #3
   1ae1c:	andeq	fp, r1, r4, lsl #3
   1ae20:	andeq	fp, r1, r4, lsl #3
   1ae24:	andeq	fp, r1, r4, lsl #3
   1ae28:	andeq	fp, r1, r4, lsl #3
   1ae2c:	andeq	fp, r1, r4, lsl #3
   1ae30:	andeq	fp, r1, r4, lsl #3
   1ae34:	andeq	fp, r1, r4, lsl #3
   1ae38:	andeq	fp, r1, r4, lsl #3
   1ae3c:	andeq	fp, r1, r4, lsl #3
   1ae40:	andeq	fp, r1, r4, lsl #3
   1ae44:	andeq	fp, r1, r4, lsl #3
   1ae48:	andeq	fp, r1, r4, lsl #3
   1ae4c:	andeq	fp, r1, r8, lsl r1
   1ae50:	ldr	r0, [sp, #36]	; 0x24
   1ae54:	b	1b148 <__assert_fail@plt+0x86cc>
   1ae58:	andeq	r0, r0, r0
   1ae5c:	addmi	r0, r0, r0
   1ae60:	andeq	r0, r0, r0
   1ae64:	svcvc	0x00f00000	; IMB
   1ae68:	andeq	r0, r0, r0
   1ae6c:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   1ae70:	cmp	r0, #1
   1ae74:	beq	1b0c4 <__assert_fail@plt+0x8648>
   1ae78:	cmp	r0, #0
   1ae7c:	bne	1b164 <__assert_fail@plt+0x86e8>
   1ae80:	ldr	r6, [r8, #12]
   1ae84:	ldr	r3, [r7, #4]
   1ae88:	ldr	r0, [r8, #8]
   1ae8c:	mov	r1, #1
   1ae90:	mov	r2, r6
   1ae94:	bl	125f0 <fwrite@plt>
   1ae98:	cmp	r0, r6
   1ae9c:	bcc	1b104 <__assert_fail@plt+0x8688>
   1aea0:	b	1b164 <__assert_fail@plt+0x86e8>
   1aea4:	ldrb	r0, [r8, #4]
   1aea8:	cmp	r0, #121	; 0x79
   1aeac:	bhi	1b164 <__assert_fail@plt+0x86e8>
   1aeb0:	add	r1, pc, #0
   1aeb4:	ldr	pc, [r1, r0, lsl #2]
   1aeb8:	andeq	fp, r1, r4, lsr #3
   1aebc:	andeq	fp, r1, r4, ror #2
   1aec0:	andeq	fp, r1, r4, ror #2
   1aec4:	andeq	fp, r1, r4, ror #2
   1aec8:	andeq	fp, r1, r4, ror #2
   1aecc:	andeq	fp, r1, r4, ror #2
   1aed0:	andeq	fp, r1, r4, ror #2
   1aed4:	andeq	fp, r1, r4, ror #2
   1aed8:	andeq	fp, r1, r4, ror #2
   1aedc:	andeq	fp, r1, r4, ror #2
   1aee0:	andeq	fp, r1, r4, ror #2
   1aee4:	andeq	fp, r1, r4, ror #2
   1aee8:	andeq	fp, r1, r4, ror #2
   1aeec:	andeq	fp, r1, r4, ror #2
   1aef0:	andeq	fp, r1, r4, ror #2
   1aef4:	andeq	fp, r1, r4, ror #2
   1aef8:	andeq	fp, r1, r4, ror #2
   1aefc:	andeq	fp, r1, r4, ror #2
   1af00:	andeq	fp, r1, r4, ror #2
   1af04:	andeq	fp, r1, r4, ror #2
   1af08:	andeq	fp, r1, r4, ror #2
   1af0c:	andeq	fp, r1, r4, ror #2
   1af10:	andeq	fp, r1, r4, ror #2
   1af14:	andeq	fp, r1, r4, ror #2
   1af18:	andeq	fp, r1, r4, ror #2
   1af1c:	andeq	fp, r1, r4, ror #2
   1af20:	andeq	fp, r1, r4, ror #2
   1af24:	andeq	fp, r1, r4, ror #2
   1af28:	andeq	fp, r1, r4, ror #2
   1af2c:	andeq	fp, r1, r4, ror #2
   1af30:	andeq	fp, r1, r4, ror #2
   1af34:	andeq	fp, r1, r4, ror #2
   1af38:	andeq	fp, r1, r4, ror #2
   1af3c:	andeq	fp, r1, r4, ror #2
   1af40:	andeq	fp, r1, r4, ror #2
   1af44:	andeq	fp, r1, r4, ror #2
   1af48:	andeq	fp, r1, r4, ror #2
   1af4c:	andeq	fp, r1, r0, lsr #1
   1af50:	andeq	fp, r1, r4, ror #2
   1af54:	andeq	fp, r1, r4, ror #2
   1af58:	andeq	fp, r1, r4, ror #2
   1af5c:	andeq	fp, r1, r4, ror #2
   1af60:	andeq	fp, r1, r4, ror #2
   1af64:	andeq	fp, r1, r4, ror #2
   1af68:	andeq	fp, r1, r4, ror #2
   1af6c:	andeq	fp, r1, r4, ror #2
   1af70:	andeq	fp, r1, r4, ror #2
   1af74:	andeq	fp, r1, r4, ror #2
   1af78:	andeq	fp, r1, r4, ror #2
   1af7c:	andeq	fp, r1, r4, ror #2
   1af80:	andeq	fp, r1, r4, ror #2
   1af84:	andeq	fp, r1, r4, ror #2
   1af88:	andeq	fp, r1, r4, ror #2
   1af8c:	andeq	fp, r1, r4, ror #2
   1af90:	andeq	fp, r1, r4, ror #2
   1af94:	andeq	fp, r1, r4, ror #2
   1af98:	andeq	fp, r1, r4, ror #2
   1af9c:	andeq	fp, r1, r4, ror #2
   1afa0:	andeq	fp, r1, r4, ror #2
   1afa4:	andeq	fp, r1, r4, ror #2
   1afa8:	andeq	fp, r1, r4, ror #2
   1afac:	andeq	fp, r1, r4, ror #2
   1afb0:	andeq	fp, r1, r4, ror #2
   1afb4:	andeq	fp, r1, r4, ror #2
   1afb8:	andeq	fp, r1, r4, ror #2
   1afbc:	andeq	fp, r1, r4, ror #2
   1afc0:	andeq	fp, r1, r4, ror #2
   1afc4:	andeq	fp, r1, r4, ror #2
   1afc8:	andeq	sl, r1, ip, asr #16
   1afcc:	andeq	fp, r1, r4, ror #2
   1afd0:	andeq	sl, r1, r0, ror r8
   1afd4:	strdeq	sl, [r1], -r4
   1afd8:	muleq	r1, ip, r8
   1afdc:	andeq	fp, r1, r4, ror #2
   1afe0:	andeq	fp, r1, r4, ror #2
   1afe4:	andeq	fp, r1, r4, ror #2
   1afe8:	andeq	fp, r1, r4, ror #2
   1afec:	andeq	sl, r1, ip, ror #15
   1aff0:	andeq	fp, r1, r4, ror #2
   1aff4:	andeq	fp, r1, r4, ror #2
   1aff8:	andeq	sl, r1, ip, ror #19
   1affc:	andeq	fp, r1, r4, ror #2
   1b000:	andeq	fp, r1, r4, ror #2
   1b004:	andeq	sl, r1, r0, asr #20
   1b008:	andeq	fp, r1, r4, ror #2
   1b00c:	andeq	sl, r1, r8, ror #23
   1b010:	andeq	fp, r1, r4, ror #2
   1b014:	andeq	fp, r1, r4, ror #2
   1b018:	andeq	fp, r1, r4, ror #2
   1b01c:	andeq	sl, r1, r0, ror #17
   1b020:	andeq	sl, r1, r8, lsl #21
   1b024:	andeq	fp, r1, r4, ror #2
   1b028:	andeq	fp, r1, r4, ror #2
   1b02c:	andeq	fp, r1, r4, ror #2
   1b030:	andeq	fp, r1, r4, ror #2
   1b034:	andeq	fp, r1, r4, ror #2
   1b038:	andeq	fp, r1, r4, ror #2
   1b03c:	andeq	sl, r1, r4, lsl r8
   1b040:	muleq	r1, r4, r7
   1b044:	ldrdeq	sl, [r1], -r0
   1b048:	andeq	sl, r1, r8, asr #18
   1b04c:	andeq	fp, r1, r4, ror #2
   1b050:	andeq	sl, r1, r4, asr r9
   1b054:	andeq	sl, r1, r4, ror #21
   1b058:	andeq	sl, r1, r4, ror r9
   1b05c:	muleq	r1, r0, fp
   1b060:	andeq	fp, r1, r4, ror #2
   1b064:	andeq	sl, r1, r0, lsr #16
   1b068:	andeq	sl, r1, r4, lsr #22
   1b06c:	andeq	sl, r1, ip, lsr #15
   1b070:	andeq	sl, r1, r0, asr #16
   1b074:	andeq	fp, r1, r4, ror #2
   1b078:	andeq	sl, r1, r0, asr #15
   1b07c:	andeq	fp, r1, r4, ror #2
   1b080:	andeq	fp, r1, r4, ror #2
   1b084:	andeq	sl, r1, r0, ror #19
   1b088:	ldrdeq	sl, [r1], -r8
   1b08c:			; <UNDEFINED> instruction: 0x0001abb8
   1b090:	andeq	fp, r1, r4, ror #2
   1b094:	andeq	fp, r1, r4, ror #2
   1b098:	andeq	fp, r1, r4, ror #2
   1b09c:	andeq	sl, r1, r4, lsr #24
   1b0a0:	ldr	r5, [r8, #12]
   1b0a4:	ldr	r3, [r7, #4]
   1b0a8:	ldr	r0, [r8, #8]
   1b0ac:	mov	r1, #1
   1b0b0:	mov	r2, r5
   1b0b4:	bl	125f0 <fwrite@plt>
   1b0b8:	cmp	r0, r5
   1b0bc:	bcc	1b104 <__assert_fail@plt+0x8688>
   1b0c0:	b	1b164 <__assert_fail@plt+0x86e8>
   1b0c4:	ldr	r6, [r8, #12]
   1b0c8:	ldr	r3, [r7, #4]
   1b0cc:	ldr	r0, [r8, #8]
   1b0d0:	mov	r1, #1
   1b0d4:	mov	r2, r6
   1b0d8:	bl	125f0 <fwrite@plt>
   1b0dc:	cmp	r0, r6
   1b0e0:	bcs	1b0f4 <__assert_fail@plt+0x8678>
   1b0e4:	bl	127d0 <__errno_location@plt>
   1b0e8:	ldr	r0, [r0]
   1b0ec:	ldr	r1, [r9, #48]	; 0x30
   1b0f0:	bl	18bbc <__assert_fail@plt+0x6140>
   1b0f4:	ldr	r0, [r7, #4]
   1b0f8:	bl	2fd10 <__assert_fail@plt+0x1d294>
   1b0fc:	cmp	r0, #0
   1b100:	beq	1b164 <__assert_fail@plt+0x86e8>
   1b104:	bl	127d0 <__errno_location@plt>
   1b108:	ldr	r0, [r0]
   1b10c:	ldr	r1, [r9, #48]	; 0x30
   1b110:	bl	18bbc <__assert_fail@plt+0x6140>
   1b114:	b	1b164 <__assert_fail@plt+0x86e8>
   1b118:	ldr	r0, [sp, #44]	; 0x2c
   1b11c:	b	1b148 <__assert_fail@plt+0x86cc>
   1b120:	mvn	r1, #0
   1b124:	cmp	r2, #64	; 0x40
   1b128:	mvn	r0, #0
   1b12c:	beq	1b14c <__assert_fail@plt+0x86d0>
   1b130:	ldr	r1, [r8, #8]
   1b134:	movw	r2, #34847	; 0x881f
   1b138:	mov	r0, r7
   1b13c:	movt	r2, #4
   1b140:	b	1b160 <__assert_fail@plt+0x86e4>
   1b144:	ldr	r0, [sp, #40]	; 0x28
   1b148:	ldrd	r0, [r0]
   1b14c:	ldr	r6, [r8, #8]
   1b150:	bl	1b224 <__assert_fail@plt+0x87a8>
   1b154:	mov	r2, r0
   1b158:	mov	r0, r7
   1b15c:	mov	r1, r6
   1b160:	bl	1b1d0 <__assert_fail@plt+0x8754>
   1b164:	ldr	r8, [r8, #16]
   1b168:	cmp	r8, #0
   1b16c:	bne	1add0 <__assert_fail@plt+0x8354>
   1b170:	mov	r0, #1
   1b174:	sub	sp, fp, #48	; 0x30
   1b178:	vpop	{d8-d9}
   1b17c:	add	sp, sp, #4
   1b180:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b184:	movw	r0, #32073	; 0x7d49
   1b188:	movw	r1, #36649	; 0x8f29
   1b18c:	movw	r3, #37153	; 0x9121
   1b190:	movw	r2, #1304	; 0x518
   1b194:	movt	r0, #4
   1b198:	movt	r1, #4
   1b19c:	movt	r3, #4
   1b1a0:	bl	12a7c <__assert_fail@plt>
   1b1a4:	movw	r1, #36934	; 0x9046
   1b1a8:	mov	r0, #0
   1b1ac:	mov	r2, #5
   1b1b0:	movt	r1, #4
   1b1b4:	bl	1253c <dcgettext@plt>
   1b1b8:	movw	r3, #37253	; 0x9185
   1b1bc:	mov	r2, r0
   1b1c0:	mov	r0, #1
   1b1c4:	mov	r1, #0
   1b1c8:	movt	r3, #4
   1b1cc:	bl	12674 <error@plt>
   1b1d0:	sub	sp, sp, #8
   1b1d4:	push	{r4, sl, fp, lr}
   1b1d8:	add	fp, sp, #8
   1b1dc:	sub	sp, sp, #8
   1b1e0:	str	r2, [fp, #8]
   1b1e4:	add	r2, fp, #8
   1b1e8:	str	r3, [fp, #12]
   1b1ec:	mov	r4, r0
   1b1f0:	str	r2, [sp, #4]
   1b1f4:	ldr	r0, [r0, #4]
   1b1f8:	bl	128fc <vfprintf@plt>
   1b1fc:	cmn	r0, #1
   1b200:	bgt	1b214 <__assert_fail@plt+0x8798>
   1b204:	bl	127d0 <__errno_location@plt>
   1b208:	ldr	r0, [r0]
   1b20c:	ldr	r1, [r4, #8]
   1b210:	bl	18bbc <__assert_fail@plt+0x6140>
   1b214:	sub	sp, fp, #8
   1b218:	pop	{r4, sl, fp, lr}
   1b21c:	add	sp, sp, #8
   1b220:	bx	lr
   1b224:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b228:	add	fp, sp, #28
   1b22c:	sub	sp, sp, #148	; 0x94
   1b230:	mov	r4, r2
   1b234:	mov	r3, r1
   1b238:	cmp	r2, #43	; 0x2b
   1b23c:	str	r1, [fp, #-76]	; 0xffffffb4
   1b240:	str	r0, [fp, #-80]	; 0xffffffb0
   1b244:	bne	1b268 <__assert_fail@plt+0x87ec>
   1b248:	movw	r0, #37904	; 0x9410
   1b24c:	movt	r0, #4
   1b250:	vldr	d16, [r0]
   1b254:	movw	r0, #9515	; 0x252b
   1b258:	movt	r0, #84	; 0x54
   1b25c:	str	r0, [sp, #56]	; 0x38
   1b260:	vstr	d16, [sp, #48]	; 0x30
   1b264:	b	1b29c <__assert_fail@plt+0x8820>
   1b268:	mov	r0, #37	; 0x25
   1b26c:	strb	r4, [sp, #49]	; 0x31
   1b270:	mov	r5, #0
   1b274:	strb	r0, [sp, #48]	; 0x30
   1b278:	sub	r0, r4, #64	; 0x40
   1b27c:	strb	r5, [sp, #50]	; 0x32
   1b280:	cmp	r0, #24
   1b284:	bhi	1b3a8 <__assert_fail@plt+0x892c>
   1b288:	movw	r2, #1
   1b28c:	mov	r1, #1
   1b290:	movt	r2, #280	; 0x118
   1b294:	tst	r2, r1, lsl r0
   1b298:	beq	1b3a8 <__assert_fail@plt+0x892c>
   1b29c:	movw	r2, #37260	; 0x918c
   1b2a0:	add	r0, sp, #64	; 0x40
   1b2a4:	mov	r1, #32
   1b2a8:	movt	r2, #4
   1b2ac:	bl	127e8 <snprintf@plt>
   1b2b0:	cmp	r0, #32
   1b2b4:	bge	1b4a4 <__assert_fail@plt+0x8a28>
   1b2b8:	mov	r8, r0
   1b2bc:	mov	r5, #1
   1b2c0:	cmp	r4, #64	; 0x40
   1b2c4:	beq	1b3b8 <__assert_fail@plt+0x893c>
   1b2c8:	sub	r0, fp, #80	; 0x50
   1b2cc:	bl	12704 <localtime@plt>
   1b2d0:	cmp	r0, #0
   1b2d4:	beq	1b3b8 <__assert_fail@plt+0x893c>
   1b2d8:	add	r6, sp, #48	; 0x30
   1b2dc:	mov	r4, r0
   1b2e0:	mov	r0, r6
   1b2e4:	bl	12788 <strlen@plt>
   1b2e8:	mov	r7, r0
   1b2ec:	add	r0, r0, #2
   1b2f0:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   1b2f4:	mov	r1, #95	; 0x5f
   1b2f8:	mov	r9, r0
   1b2fc:	add	r2, r7, #1
   1b300:	strb	r1, [r0], #1
   1b304:	mov	r1, r6
   1b308:	bl	124b8 <memcpy@plt>
   1b30c:	mov	r1, #28
   1b310:	mov	r2, r4
   1b314:	add	r0, r4, #16
   1b318:	sub	r3, fp, #72	; 0x48
   1b31c:	movw	r5, #55472	; 0xd8b0
   1b320:	vld1.32	{d16-d17}, [r2], r1
   1b324:	vld1.32	{d18-d19}, [r0]
   1b328:	add	r0, r3, #16
   1b32c:	movt	r5, #5
   1b330:	vld1.32	{d20-d21}, [r2]
   1b334:	vst1.64	{d16-d17}, [r3], r1
   1b338:	vst1.64	{d18-d19}, [r0]
   1b33c:	mov	r1, #11
   1b340:	vst1.32	{d20-d21}, [r3]
   1b344:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b348:	cmp	r0, #10
   1b34c:	mvngt	r1, #10
   1b350:	add	r0, r1, r0
   1b354:	str	r0, [fp, #-72]	; 0xffffffb8
   1b358:	ldr	r0, [r5]
   1b35c:	cmp	r0, #0
   1b360:	bne	1b380 <__assert_fail@plt+0x8904>
   1b364:	movw	r0, #55476	; 0xd8b4
   1b368:	mov	r1, #1
   1b36c:	movt	r0, #5
   1b370:	str	r1, [r0]
   1b374:	mov	r0, #1
   1b378:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   1b37c:	str	r0, [r5]
   1b380:	movw	r7, #55476	; 0xd8b4
   1b384:	mov	r2, r9
   1b388:	mov	r3, r4
   1b38c:	movt	r7, #5
   1b390:	ldr	r1, [r7]
   1b394:	bl	126ec <strftime@plt>
   1b398:	cmp	r0, #0
   1b39c:	beq	1b54c <__assert_fail@plt+0x8ad0>
   1b3a0:	ldr	r1, [r7]
   1b3a4:	b	1b544 <__assert_fail@plt+0x8ac8>
   1b3a8:	mov	r8, #0
   1b3ac:	strb	r5, [sp, #64]	; 0x40
   1b3b0:	cmp	r4, #64	; 0x40
   1b3b4:	bne	1b2c8 <__assert_fail@plt+0x884c>
   1b3b8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1b3bc:	mov	r2, #1
   1b3c0:	mov	r1, #0
   1b3c4:	movw	r6, #54680	; 0xd598
   1b3c8:	mov	r3, #0
   1b3cc:	str	r2, [sp]
   1b3d0:	stmib	sp, {r1, r2}
   1b3d4:	str	r1, [sp, #12]
   1b3d8:	movt	r6, #5
   1b3dc:	asr	r1, r0, #31
   1b3e0:	adds	r2, r0, r0, asr #31
   1b3e4:	adc	r1, r1, r0, asr #31
   1b3e8:	eor	r1, r1, r0, asr #31
   1b3ec:	eor	r0, r2, r0, asr #31
   1b3f0:	add	r2, r6, #1
   1b3f4:	bl	23e60 <__assert_fail@plt+0x113e4>
   1b3f8:	cmp	r0, r6
   1b3fc:	bls	1b4c4 <__assert_fail@plt+0x8a48>
   1b400:	mov	r4, r0
   1b404:	movw	r0, #791	; 0x317
   1b408:	add	r0, r6, r0
   1b40c:	cmp	r4, r0
   1b410:	bcs	1b4e4 <__assert_fail@plt+0x8a68>
   1b414:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1b418:	cmn	r0, #1
   1b41c:	movle	r0, #45	; 0x2d
   1b420:	strble	r0, [r4, #-1]!
   1b424:	cmp	r5, #0
   1b428:	beq	1b6bc <__assert_fail@plt+0x8c40>
   1b42c:	mov	r0, r4
   1b430:	sub	r5, r4, r6
   1b434:	bl	12788 <strlen@plt>
   1b438:	add	r0, r0, r5
   1b43c:	movw	r1, #791	; 0x317
   1b440:	cmp	r0, r1
   1b444:	bcs	1b504 <__assert_fail@plt+0x8a88>
   1b448:	movw	r1, #790	; 0x316
   1b44c:	add	r5, sp, #64	; 0x40
   1b450:	sub	r6, r1, r0
   1b454:	mov	r0, r5
   1b458:	bl	12788 <strlen@plt>
   1b45c:	cmp	r0, r6
   1b460:	bcc	1b484 <__assert_fail@plt+0x8a08>
   1b464:	movw	r2, #37385	; 0x9209
   1b468:	mov	r0, #0
   1b46c:	mov	r1, #0
   1b470:	mov	r3, r8
   1b474:	str	r6, [sp]
   1b478:	str	r5, [sp, #4]
   1b47c:	movt	r2, #4
   1b480:	bl	12674 <error@plt>
   1b484:	add	r0, sp, #64	; 0x40
   1b488:	bl	12788 <strlen@plt>
   1b48c:	cmp	r0, r6
   1b490:	bcs	1b524 <__assert_fail@plt+0x8aa8>
   1b494:	add	r1, sp, #64	; 0x40
   1b498:	mov	r0, r4
   1b49c:	bl	125fc <strcat@plt>
   1b4a0:	b	1b6bc <__assert_fail@plt+0x8c40>
   1b4a4:	movw	r0, #37268	; 0x9194
   1b4a8:	movw	r1, #36649	; 0x8f29
   1b4ac:	movw	r3, #37294	; 0x91ae
   1b4b0:	movw	r2, #665	; 0x299
   1b4b4:	movt	r0, #4
   1b4b8:	movt	r1, #4
   1b4bc:	movt	r3, #4
   1b4c0:	bl	12a7c <__assert_fail@plt>
   1b4c4:	movw	r0, #37334	; 0x91d6
   1b4c8:	movw	r1, #36649	; 0x8f29
   1b4cc:	movw	r3, #37294	; 0x91ae
   1b4d0:	movw	r2, #697	; 0x2b9
   1b4d4:	movt	r0, #4
   1b4d8:	movt	r1, #4
   1b4dc:	movt	r3, #4
   1b4e0:	bl	12a7c <__assert_fail@plt>
   1b4e4:	movw	r0, #37342	; 0x91de
   1b4e8:	movw	r1, #36649	; 0x8f29
   1b4ec:	movw	r3, #37294	; 0x91ae
   1b4f0:	movw	r2, #698	; 0x2ba
   1b4f4:	movt	r0, #4
   1b4f8:	movt	r1, #4
   1b4fc:	movt	r3, #4
   1b500:	bl	12a7c <__assert_fail@plt>
   1b504:	movw	r0, #37367	; 0x91f7
   1b508:	movw	r1, #36649	; 0x8f29
   1b50c:	movw	r3, #37294	; 0x91ae
   1b510:	movw	r2, #711	; 0x2c7
   1b514:	movt	r0, #4
   1b518:	movt	r1, #4
   1b51c:	movt	r3, #4
   1b520:	bl	12a7c <__assert_fail@plt>
   1b524:	movw	r0, #37431	; 0x9237
   1b528:	movw	r1, #36649	; 0x8f29
   1b52c:	movw	r3, #37294	; 0x91ae
   1b530:	mov	r2, #720	; 0x2d0
   1b534:	movt	r0, #4
   1b538:	movt	r1, #4
   1b53c:	movt	r3, #4
   1b540:	bl	12a7c <__assert_fail@plt>
   1b544:	cmp	r0, r1
   1b548:	bcc	1b580 <__assert_fail@plt+0x8b04>
   1b54c:	ldr	r0, [r5]
   1b550:	mov	r1, r7
   1b554:	mov	r2, #1
   1b558:	bl	2dd9c <__assert_fail@plt+0x1b320>
   1b55c:	ldr	r1, [r7]
   1b560:	mov	r2, r9
   1b564:	mov	r3, r4
   1b568:	str	r0, [r5]
   1b56c:	bl	126ec <strftime@plt>
   1b570:	ldr	r1, [r7]
   1b574:	cmp	r0, #0
   1b578:	bne	1b544 <__assert_fail@plt+0x8ac8>
   1b57c:	b	1b54c <__assert_fail@plt+0x8ad0>
   1b580:	str	r0, [sp, #20]
   1b584:	add	r0, r8, r0
   1b588:	str	r8, [sp, #28]
   1b58c:	add	r4, r0, #1
   1b590:	ldr	r0, [r5]
   1b594:	mov	r1, r4
   1b598:	bl	2dc38 <__assert_fail@plt+0x1b1bc>
   1b59c:	str	r0, [r5]
   1b5a0:	mov	r0, r4
   1b5a4:	str	r4, [r7]
   1b5a8:	str	r4, [sp, #24]
   1b5ac:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   1b5b0:	ldr	r1, [r7]
   1b5b4:	sub	r3, fp, #72	; 0x48
   1b5b8:	mov	r2, r9
   1b5bc:	str	r0, [sp, #40]	; 0x28
   1b5c0:	str	r9, [sp, #36]	; 0x24
   1b5c4:	bl	126ec <strftime@plt>
   1b5c8:	ldr	r0, [r5]
   1b5cc:	ldrb	r1, [r0]
   1b5d0:	str	r0, [sp, #32]
   1b5d4:	cmp	r1, #0
   1b5d8:	beq	1b69c <__assert_fail@plt+0x8c20>
   1b5dc:	ldr	r2, [sp, #40]	; 0x28
   1b5e0:	ldr	r3, [sp, #32]
   1b5e4:	mov	r8, #0
   1b5e8:	mov	r7, #0
   1b5ec:	mov	r6, #0
   1b5f0:	ldrb	r0, [r2]
   1b5f4:	add	sl, r2, #1
   1b5f8:	add	r5, r3, #1
   1b5fc:	mov	r3, #0
   1b600:	str	r3, [sp, #44]	; 0x2c
   1b604:	clz	r2, r0
   1b608:	lsr	r2, r2, #5
   1b60c:	tst	r2, #1
   1b610:	bne	1b69c <__assert_fail@plt+0x8c20>
   1b614:	uxtb	r4, r1
   1b618:	uxtb	r9, r0
   1b61c:	cmp	r4, r9
   1b620:	beq	1b674 <__assert_fail@plt+0x8bf8>
   1b624:	bl	12740 <__ctype_b_loc@plt>
   1b628:	ldr	r0, [r0]
   1b62c:	add	r1, r0, r4, lsl #1
   1b630:	ldrb	r1, [r1, #1]
   1b634:	tst	r1, #8
   1b638:	addne	r0, r0, r9, lsl #1
   1b63c:	ldrbne	r0, [r0, #1]
   1b640:	tstne	r0, #8
   1b644:	beq	1b69c <__assert_fail@plt+0x8c20>
   1b648:	tst	r6, #1
   1b64c:	beq	1b668 <__assert_fail@plt+0x8bec>
   1b650:	ldr	r0, [sp, #44]	; 0x2c
   1b654:	sub	r0, r7, r0
   1b658:	cmp	r0, r8
   1b65c:	bne	1b69c <__assert_fail@plt+0x8c20>
   1b660:	add	r8, r8, #1
   1b664:	b	1b670 <__assert_fail@plt+0x8bf4>
   1b668:	str	r7, [sp, #44]	; 0x2c
   1b66c:	mov	r8, #1
   1b670:	mov	r6, #1
   1b674:	ldrb	r0, [sl, r7]
   1b678:	ldrb	r1, [r5, r7]
   1b67c:	add	r7, r7, #1
   1b680:	clz	r2, r0
   1b684:	cmp	r1, #0
   1b688:	lsr	r2, r2, #5
   1b68c:	bne	1b60c <__assert_fail@plt+0x8b90>
   1b690:	cmp	r8, #2
   1b694:	cmpeq	r0, #0
   1b698:	beq	1b6c8 <__assert_fail@plt+0x8c4c>
   1b69c:	ldr	r0, [sp, #36]	; 0x24
   1b6a0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   1b6a4:	ldr	r0, [sp, #40]	; 0x28
   1b6a8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   1b6ac:	movw	r0, #55472	; 0xd8b0
   1b6b0:	movt	r0, #5
   1b6b4:	ldr	r0, [r0]
   1b6b8:	add	r4, r0, #1
   1b6bc:	mov	r0, r4
   1b6c0:	sub	sp, fp, #28
   1b6c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b6c8:	ldr	r0, [sp, #44]	; 0x2c
   1b6cc:	add	r4, r0, #2
   1b6d0:	bl	12740 <__ctype_b_loc@plt>
   1b6d4:	ldr	r1, [sp, #32]
   1b6d8:	ldr	r0, [r0]
   1b6dc:	ldrb	r2, [r1, r4]!
   1b6e0:	add	r0, r0, r2, lsl #1
   1b6e4:	ldrb	r0, [r0, #1]
   1b6e8:	tst	r0, #8
   1b6ec:	bne	1b69c <__assert_fail@plt+0x8c20>
   1b6f0:	ldr	r2, [sp, #20]
   1b6f4:	ldr	r7, [sp, #28]
   1b6f8:	ldr	r3, [sp, #24]
   1b6fc:	sub	r2, r2, r4
   1b700:	add	r0, r4, r7
   1b704:	add	r2, r2, #1
   1b708:	add	r0, r0, r2
   1b70c:	cmp	r0, r3
   1b710:	bne	1b73c <__assert_fail@plt+0x8cc0>
   1b714:	add	r0, r1, r7
   1b718:	bl	1244c <memmove@plt>
   1b71c:	ldr	r0, [sp, #32]
   1b720:	ldr	r1, [sp, #44]	; 0x2c
   1b724:	mov	r2, r7
   1b728:	add	r0, r0, r1
   1b72c:	add	r1, sp, #64	; 0x40
   1b730:	add	r0, r0, #2
   1b734:	bl	124b8 <memcpy@plt>
   1b738:	b	1b69c <__assert_fail@plt+0x8c20>
   1b73c:	movw	r0, #37459	; 0x9253
   1b740:	movw	r1, #36649	; 0x8f29
   1b744:	movw	r3, #37510	; 0x9286
   1b748:	movw	r2, #549	; 0x225
   1b74c:	movt	r0, #4
   1b750:	movt	r1, #4
   1b754:	movt	r3, #4
   1b758:	bl	12a7c <__assert_fail@plt>
   1b75c:	push	{r4, r5, fp, lr}
   1b760:	add	fp, sp, #8
   1b764:	sub	sp, sp, #40	; 0x28
   1b768:	str	r1, [fp, #-12]
   1b76c:	str	r0, [fp, #-16]
   1b770:	sub	r0, fp, #16
   1b774:	bl	12704 <localtime@plt>
   1b778:	cmp	r0, #0
   1b77c:	beq	1b860 <__assert_fail@plt+0x8de4>
   1b780:	ldr	ip, [r0, #24]
   1b784:	cmn	ip, #1
   1b788:	ble	1b880 <__assert_fail@plt+0x8e04>
   1b78c:	cmp	ip, #7
   1b790:	bge	1b8a0 <__assert_fail@plt+0x8e24>
   1b794:	ldr	r2, [r0, #16]
   1b798:	cmn	r2, #1
   1b79c:	ble	1b8c0 <__assert_fail@plt+0x8e44>
   1b7a0:	cmp	r2, #12
   1b7a4:	bge	1b8e0 <__assert_fail@plt+0x8e64>
   1b7a8:	ldr	r3, [r0, #8]
   1b7ac:	cmn	r3, #1
   1b7b0:	ble	1b900 <__assert_fail@plt+0x8e84>
   1b7b4:	cmp	r3, #24
   1b7b8:	bge	1b920 <__assert_fail@plt+0x8ea4>
   1b7bc:	ldr	r4, [r0, #4]
   1b7c0:	cmp	r4, #60	; 0x3c
   1b7c4:	bge	1b940 <__assert_fail@plt+0x8ec4>
   1b7c8:	ldr	r1, [r0]
   1b7cc:	cmp	r1, #62	; 0x3e
   1b7d0:	bge	1b960 <__assert_fail@plt+0x8ee4>
   1b7d4:	ldr	lr, [r0, #12]
   1b7d8:	ldr	r0, [r0, #20]
   1b7dc:	str	r1, [sp, #16]
   1b7e0:	movw	r1, #37948	; 0x943c
   1b7e4:	ldr	r5, [fp, #-12]
   1b7e8:	str	r3, [sp, #8]
   1b7ec:	str	r4, [sp, #12]
   1b7f0:	movw	r4, #55480	; 0xd8b8
   1b7f4:	movt	r1, #4
   1b7f8:	movt	r4, #5
   1b7fc:	ldr	r1, [r1, r2, lsl #2]
   1b800:	movw	r2, #37762	; 0x9382
   1b804:	movt	r2, #4
   1b808:	str	r5, [sp, #20]
   1b80c:	str	lr, [sp, #4]
   1b810:	str	r1, [sp]
   1b814:	movw	r1, #1900	; 0x76c
   1b818:	add	r0, r0, r1
   1b81c:	mov	r1, #1024	; 0x400
   1b820:	str	r0, [sp, #24]
   1b824:	movw	r0, #37920	; 0x9420
   1b828:	movt	r0, #4
   1b82c:	ldr	r3, [r0, ip, lsl #2]
   1b830:	mov	r0, r4
   1b834:	bl	127e8 <snprintf@plt>
   1b838:	cmp	r0, #1024	; 0x400
   1b83c:	blt	1b874 <__assert_fail@plt+0x8df8>
   1b840:	movw	r0, #37801	; 0x93a9
   1b844:	movw	r1, #36649	; 0x8f29
   1b848:	movw	r3, #37604	; 0x92e4
   1b84c:	movw	r2, #770	; 0x302
   1b850:	movt	r0, #4
   1b854:	movt	r1, #4
   1b858:	movt	r3, #4
   1b85c:	bl	12a7c <__assert_fail@plt>
   1b860:	ldr	r0, [fp, #-16]
   1b864:	ldr	r1, [fp, #-12]
   1b868:	mov	r2, #64	; 0x40
   1b86c:	bl	1b224 <__assert_fail@plt+0x87a8>
   1b870:	mov	r4, r0
   1b874:	mov	r0, r4
   1b878:	sub	sp, fp, #8
   1b87c:	pop	{r4, r5, fp, pc}
   1b880:	movw	r0, #37586	; 0x92d2
   1b884:	movw	r1, #36649	; 0x8f29
   1b888:	movw	r3, #37604	; 0x92e4
   1b88c:	movw	r2, #749	; 0x2ed
   1b890:	movt	r0, #4
   1b894:	movt	r1, #4
   1b898:	movt	r3, #4
   1b89c:	bl	12a7c <__assert_fail@plt>
   1b8a0:	movw	r0, #37640	; 0x9308
   1b8a4:	movw	r1, #36649	; 0x8f29
   1b8a8:	movw	r3, #37604	; 0x92e4
   1b8ac:	movw	r2, #750	; 0x2ee
   1b8b0:	movt	r0, #4
   1b8b4:	movt	r1, #4
   1b8b8:	movt	r3, #4
   1b8bc:	bl	12a7c <__assert_fail@plt>
   1b8c0:	movw	r0, #37657	; 0x9319
   1b8c4:	movw	r1, #36649	; 0x8f29
   1b8c8:	movw	r3, #37604	; 0x92e4
   1b8cc:	movw	r2, #751	; 0x2ef
   1b8d0:	movt	r0, #4
   1b8d4:	movt	r1, #4
   1b8d8:	movt	r3, #4
   1b8dc:	bl	12a7c <__assert_fail@plt>
   1b8e0:	movw	r0, #37674	; 0x932a
   1b8e4:	movw	r1, #36649	; 0x8f29
   1b8e8:	movw	r3, #37604	; 0x92e4
   1b8ec:	mov	r2, #752	; 0x2f0
   1b8f0:	movt	r0, #4
   1b8f4:	movt	r1, #4
   1b8f8:	movt	r3, #4
   1b8fc:	bl	12a7c <__assert_fail@plt>
   1b900:	movw	r0, #37691	; 0x933b
   1b904:	movw	r1, #36649	; 0x8f29
   1b908:	movw	r3, #37604	; 0x92e4
   1b90c:	movw	r2, #753	; 0x2f1
   1b910:	movt	r0, #4
   1b914:	movt	r1, #4
   1b918:	movt	r3, #4
   1b91c:	bl	12a7c <__assert_fail@plt>
   1b920:	movw	r0, #37709	; 0x934d
   1b924:	movw	r1, #36649	; 0x8f29
   1b928:	movw	r3, #37604	; 0x92e4
   1b92c:	movw	r2, #754	; 0x2f2
   1b930:	movt	r0, #4
   1b934:	movt	r1, #4
   1b938:	movt	r3, #4
   1b93c:	bl	12a7c <__assert_fail@plt>
   1b940:	movw	r0, #37727	; 0x935f
   1b944:	movw	r1, #36649	; 0x8f29
   1b948:	movw	r3, #37604	; 0x92e4
   1b94c:	movw	r2, #755	; 0x2f3
   1b950:	movt	r0, #4
   1b954:	movt	r1, #4
   1b958:	movt	r3, #4
   1b95c:	bl	12a7c <__assert_fail@plt>
   1b960:	movw	r0, #37744	; 0x9370
   1b964:	movw	r1, #36649	; 0x8f29
   1b968:	movw	r3, #37604	; 0x92e4
   1b96c:	mov	r2, #756	; 0x2f4
   1b970:	movt	r0, #4
   1b974:	movt	r1, #4
   1b978:	movt	r3, #4
   1b97c:	bl	12a7c <__assert_fail@plt>
   1b980:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b984:	add	fp, sp, #28
   1b988:	sub	sp, sp, #108	; 0x6c
   1b98c:	mov	r4, r0
   1b990:	movw	r0, #56508	; 0xdcbc
   1b994:	movt	r0, #5
   1b998:	ldr	r0, [r0]
   1b99c:	cmp	r0, #0
   1b9a0:	beq	1b9dc <__assert_fail@plt+0x8f60>
   1b9a4:	movw	r1, #56504	; 0xdcb8
   1b9a8:	movt	r1, #5
   1b9ac:	ldrb	r1, [r1]
   1b9b0:	cmp	r1, #1
   1b9b4:	bne	1b9d8 <__assert_fail@plt+0x8f5c>
   1b9b8:	movw	r1, #56512	; 0xdcc0
   1b9bc:	ldrd	r6, [r4]
   1b9c0:	movt	r1, #5
   1b9c4:	ldrd	r2, [r1]
   1b9c8:	eor	r1, r7, r3
   1b9cc:	eor	r2, r6, r2
   1b9d0:	orrs	r1, r2, r1
   1b9d4:	beq	1bb54 <__assert_fail@plt+0x90d8>
   1b9d8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   1b9dc:	movw	r7, #56520	; 0xdcc8
   1b9e0:	ldrd	r0, [r4]
   1b9e4:	movw	r2, #56512	; 0xdcc0
   1b9e8:	movw	r8, #56524	; 0xdccc
   1b9ec:	movt	r7, #5
   1b9f0:	movt	r2, #5
   1b9f4:	movt	r8, #5
   1b9f8:	ldr	r5, [r7]
   1b9fc:	strd	r0, [r2]
   1ba00:	cmp	r5, #0
   1ba04:	beq	1ba38 <__assert_fail@plt+0x8fbc>
   1ba08:	ldrb	r0, [r8]
   1ba0c:	cmp	r0, #0
   1ba10:	bne	1ba38 <__assert_fail@plt+0x8fbc>
   1ba14:	ldr	r6, [r5, #28]
   1ba18:	mov	r0, r5
   1ba1c:	bl	32ffc <__assert_fail@plt+0x20580>
   1ba20:	cmp	r6, #0
   1ba24:	mov	r5, r6
   1ba28:	bne	1ba14 <__assert_fail@plt+0x8f98>
   1ba2c:	mov	r0, #0
   1ba30:	str	r0, [r7]
   1ba34:	b	1ba40 <__assert_fail@plt+0x8fc4>
   1ba38:	cmp	r5, #0
   1ba3c:	bne	1ba60 <__assert_fail@plt+0x8fe4>
   1ba40:	mov	r0, #1
   1ba44:	mov	r6, #1
   1ba48:	bl	323cc <__assert_fail@plt+0x1f950>
   1ba4c:	mov	r5, r0
   1ba50:	cmp	r0, #0
   1ba54:	str	r0, [r7]
   1ba58:	strb	r6, [r8]
   1ba5c:	beq	1bb5c <__assert_fail@plt+0x90e0>
   1ba60:	movw	r6, #38089	; 0x94c9
   1ba64:	movw	sl, #56940	; 0xde6c
   1ba68:	mov	r7, #0
   1ba6c:	mov	r9, sp
   1ba70:	movt	r6, #4
   1ba74:	movt	sl, #5
   1ba78:	b	1ba88 <__assert_fail@plt+0x900c>
   1ba7c:	ldm	sp, {r0, r1}
   1ba80:	strd	r0, [r8]
   1ba84:	b	1bab4 <__assert_fail@plt+0x9038>
   1ba88:	ldr	r0, [r5, #12]
   1ba8c:	mov	r1, r6
   1ba90:	bl	123d4 <strcmp@plt>
   1ba94:	cmp	r0, #0
   1ba98:	beq	1baf0 <__assert_fail@plt+0x9074>
   1ba9c:	mov	r8, r5
   1baa0:	ldr	r0, [r8, #16]!
   1baa4:	ldr	r1, [r8, #4]
   1baa8:	and	r0, r0, r1
   1baac:	cmn	r0, #1
   1bab0:	beq	1bad0 <__assert_fail@plt+0x9054>
   1bab4:	ldrd	r0, [r4]
   1bab8:	ldrd	r2, [r8]
   1babc:	eor	r1, r3, r1
   1bac0:	eor	r0, r2, r0
   1bac4:	orrs	r0, r0, r1
   1bac8:	moveq	r7, r5
   1bacc:	b	1baf0 <__assert_fail@plt+0x9074>
   1bad0:	mov	r0, r9
   1bad4:	bl	18534 <__assert_fail@plt+0x5ab8>
   1bad8:	ldr	r0, [r5, #4]
   1badc:	ldr	r2, [sl, #52]	; 0x34
   1bae0:	mov	r1, r9
   1bae4:	blx	r2
   1bae8:	cmp	r0, #0
   1baec:	beq	1ba7c <__assert_fail@plt+0x9000>
   1baf0:	ldr	r5, [r5, #28]
   1baf4:	cmp	r5, #0
   1baf8:	bne	1ba88 <__assert_fail@plt+0x900c>
   1bafc:	cmp	r7, #0
   1bb00:	beq	1bb20 <__assert_fail@plt+0x90a4>
   1bb04:	ldr	r0, [r7, #12]
   1bb08:	bl	2e110 <__assert_fail@plt+0x1b694>
   1bb0c:	movw	r1, #56504	; 0xdcb8
   1bb10:	mov	r2, #1
   1bb14:	movt	r1, #5
   1bb18:	strb	r2, [r1]
   1bb1c:	b	1bb48 <__assert_fail@plt+0x90cc>
   1bb20:	movw	r0, #56504	; 0xdcb8
   1bb24:	mov	r1, #0
   1bb28:	mov	r2, #5
   1bb2c:	movt	r0, #5
   1bb30:	strb	r1, [r0]
   1bb34:	movw	r1, #32828	; 0x803c
   1bb38:	mov	r0, #0
   1bb3c:	movt	r1, #4
   1bb40:	bl	1253c <dcgettext@plt>
   1bb44:	bl	2e110 <__assert_fail@plt+0x1b694>
   1bb48:	movw	r1, #56508	; 0xdcbc
   1bb4c:	movt	r1, #5
   1bb50:	str	r0, [r1]
   1bb54:	sub	sp, fp, #28
   1bb58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb5c:	movw	r1, #38052	; 0x94a4
   1bb60:	mov	r0, #0
   1bb64:	mov	r2, #5
   1bb68:	movt	r1, #4
   1bb6c:	bl	1253c <dcgettext@plt>
   1bb70:	mov	r2, r0
   1bb74:	mov	r0, #1
   1bb78:	mov	r1, #0
   1bb7c:	bl	12674 <error@plt>
   1bb80:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1bb84:	add	fp, sp, #24
   1bb88:	mov	r5, r0
   1bb8c:	movw	r0, #38048	; 0x94a0
   1bb90:	movt	r0, #4
   1bb94:	mov	r1, r5
   1bb98:	bl	123d4 <strcmp@plt>
   1bb9c:	mov	r4, #1
   1bba0:	cmp	r0, #0
   1bba4:	beq	1bc08 <__assert_fail@plt+0x918c>
   1bba8:	movw	r7, #56520	; 0xdcc8
   1bbac:	movt	r7, #5
   1bbb0:	ldr	r6, [r7]
   1bbb4:	cmp	r6, #0
   1bbb8:	bne	1bbe4 <__assert_fail@plt+0x9168>
   1bbbc:	mov	r0, #0
   1bbc0:	mov	r8, #0
   1bbc4:	bl	323cc <__assert_fail@plt+0x1f950>
   1bbc8:	mov	r6, r0
   1bbcc:	str	r0, [r7]
   1bbd0:	movw	r0, #56524	; 0xdccc
   1bbd4:	movt	r0, #5
   1bbd8:	cmp	r6, #0
   1bbdc:	strb	r8, [r0]
   1bbe0:	beq	1bc08 <__assert_fail@plt+0x918c>
   1bbe4:	ldr	r1, [r6, #12]
   1bbe8:	mov	r0, r5
   1bbec:	bl	123d4 <strcmp@plt>
   1bbf0:	cmp	r0, #0
   1bbf4:	beq	1bc08 <__assert_fail@plt+0x918c>
   1bbf8:	ldr	r6, [r6, #28]
   1bbfc:	cmp	r6, #0
   1bc00:	bne	1bbe4 <__assert_fail@plt+0x9168>
   1bc04:	mov	r4, #0
   1bc08:	mov	r0, r4
   1bc0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bc10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc14:	add	fp, sp, #28
   1bc18:	sub	sp, sp, #116	; 0x74
   1bc1c:	mov	r4, r0
   1bc20:	mov	r7, #0
   1bc24:	mov	r0, #0
   1bc28:	str	r7, [sp, #4]
   1bc2c:	bl	323cc <__assert_fail@plt+0x1f950>
   1bc30:	cmp	r0, #0
   1bc34:	beq	1bd40 <__assert_fail@plt+0x92c4>
   1bc38:	str	r4, [sp]
   1bc3c:	mov	r8, r0
   1bc40:	mov	r9, #0
   1bc44:	add	sl, sp, #4
   1bc48:	mov	r4, #0
   1bc4c:	mov	r5, r0
   1bc50:	b	1bc68 <__assert_fail@plt+0x91ec>
   1bc54:	ldr	r0, [sp, #8]
   1bc58:	ldr	r1, [sp, #12]
   1bc5c:	add	sl, sp, #4
   1bc60:	strd	r0, [r7]
   1bc64:	b	1bca4 <__assert_fail@plt+0x9228>
   1bc68:	add	r6, r9, #1
   1bc6c:	mov	r0, r4
   1bc70:	mov	r2, sl
   1bc74:	mov	r7, r4
   1bc78:	lsl	r1, r6, #3
   1bc7c:	bl	2096c <__assert_fail@plt+0xdef0>
   1bc80:	mov	r4, r0
   1bc84:	cmp	r0, #0
   1bc88:	beq	1bcc0 <__assert_fail@plt+0x9244>
   1bc8c:	mov	r7, r5
   1bc90:	ldr	r0, [r7, #16]!
   1bc94:	ldr	r1, [r7, #4]
   1bc98:	and	r0, r0, r1
   1bc9c:	cmn	r0, #1
   1bca0:	beq	1bcd0 <__assert_fail@plt+0x9254>
   1bca4:	ldrd	r0, [r7]
   1bca8:	mov	r2, r4
   1bcac:	mov	r7, r4
   1bcb0:	str	r0, [r2, r9, lsl #3]!
   1bcb4:	mov	r9, r6
   1bcb8:	str	r1, [r2, #4]
   1bcbc:	b	1bd04 <__assert_fail@plt+0x9288>
   1bcc0:	mov	r0, r7
   1bcc4:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   1bcc8:	mov	r7, #0
   1bccc:	b	1bd04 <__assert_fail@plt+0x9288>
   1bcd0:	add	sl, sp, #8
   1bcd4:	mov	r0, sl
   1bcd8:	bl	18534 <__assert_fail@plt+0x5ab8>
   1bcdc:	movw	r1, #56940	; 0xde6c
   1bce0:	ldr	r0, [r5, #4]
   1bce4:	movt	r1, #5
   1bce8:	ldr	r2, [r1, #52]	; 0x34
   1bcec:	mov	r1, sl
   1bcf0:	blx	r2
   1bcf4:	cmp	r0, #0
   1bcf8:	beq	1bc54 <__assert_fail@plt+0x91d8>
   1bcfc:	mov	r7, r4
   1bd00:	add	sl, sp, #4
   1bd04:	ldr	r5, [r5, #28]
   1bd08:	cmp	r5, #0
   1bd0c:	bne	1bc68 <__assert_fail@plt+0x91ec>
   1bd10:	cmp	r8, #0
   1bd14:	beq	1bd30 <__assert_fail@plt+0x92b4>
   1bd18:	ldr	r4, [r8, #28]
   1bd1c:	mov	r0, r8
   1bd20:	bl	32ffc <__assert_fail@plt+0x20580>
   1bd24:	cmp	r4, #0
   1bd28:	mov	r8, r4
   1bd2c:	bne	1bd18 <__assert_fail@plt+0x929c>
   1bd30:	cmp	r7, #0
   1bd34:	ldrne	r0, [sp]
   1bd38:	moveq	r7, #0
   1bd3c:	strne	r9, [r0]
   1bd40:	mov	r0, r7
   1bd44:	sub	sp, fp, #28
   1bd48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd4c:	andeq	r0, r0, r0
   1bd50:	cmp	r0, #0
   1bd54:	beq	1bdb4 <__assert_fail@plt+0x9338>
   1bd58:	movw	r2, #16072	; 0x3ec8
   1bd5c:	movw	ip, #19384	; 0x4bb8
   1bd60:	mov	r1, #0
   1bd64:	movt	r2, #1
   1bd68:	movt	ip, #1
   1bd6c:	ldr	r3, [r0]
   1bd70:	cmp	r3, r2
   1bd74:	beq	1bd84 <__assert_fail@plt+0x9308>
   1bd78:	cmp	r3, ip
   1bd7c:	orreq	r1, r1, #2
   1bd80:	b	1bd88 <__assert_fail@plt+0x930c>
   1bd84:	orr	r1, r1, #1
   1bd88:	ldr	r0, [r0, #152]	; 0x98
   1bd8c:	cmp	r0, #0
   1bd90:	bne	1bd6c <__assert_fail@plt+0x92f0>
   1bd94:	and	r0, r1, #3
   1bd98:	cmp	r0, #3
   1bd9c:	bxne	lr
   1bda0:	movw	r0, #56940	; 0xde6c
   1bda4:	movt	r0, #5
   1bda8:	ldrb	r0, [r0, #1]
   1bdac:	cmp	r0, #0
   1bdb0:	beq	1bdb8 <__assert_fail@plt+0x933c>
   1bdb4:	bx	lr
   1bdb8:	push	{fp, lr}
   1bdbc:	mov	fp, sp
   1bdc0:	movw	r1, #38096	; 0x94d0
   1bdc4:	mov	r0, #0
   1bdc8:	mov	r2, #5
   1bdcc:	movt	r1, #4
   1bdd0:	bl	1253c <dcgettext@plt>
   1bdd4:	mov	r2, r0
   1bdd8:	mov	r0, #1
   1bddc:	mov	r1, #0
   1bde0:	bl	12674 <error@plt>
   1bde4:	cmp	r0, #0
   1bde8:	beq	1be1c <__assert_fail@plt+0x93a0>
   1bdec:	cmp	r0, #2
   1bdf0:	beq	1be40 <__assert_fail@plt+0x93c4>
   1bdf4:	cmp	r0, #1
   1bdf8:	bne	1be68 <__assert_fail@plt+0x93ec>
   1bdfc:	movw	r1, #56940	; 0xde6c
   1be00:	movw	r2, #48780	; 0xbe8c
   1be04:	movt	r1, #5
   1be08:	movt	r2, #1
   1be0c:	str	r2, [r1, #64]	; 0x40
   1be10:	movw	r2, #36112	; 0x8d10
   1be14:	movt	r2, #1
   1be18:	b	1be5c <__assert_fail@plt+0x93e0>
   1be1c:	movw	r1, #56940	; 0xde6c
   1be20:	movw	r2, #48920	; 0xbf18
   1be24:	movt	r1, #5
   1be28:	movt	r2, #1
   1be2c:	str	r2, [r1, #64]	; 0x40
   1be30:	movw	r2, #36356	; 0x8e04
   1be34:	movt	r2, #1
   1be38:	str	r2, [r1, #52]	; 0x34
   1be3c:	b	1be68 <__assert_fail@plt+0x93ec>
   1be40:	movw	r1, #56940	; 0xde6c
   1be44:	movw	r2, #48924	; 0xbf1c
   1be48:	movt	r1, #5
   1be4c:	movt	r2, #1
   1be50:	str	r2, [r1, #64]	; 0x40
   1be54:	movw	r2, #35852	; 0x8c0c
   1be58:	movt	r2, #1
   1be5c:	str	r2, [r1, #52]	; 0x34
   1be60:	mov	r2, #1
   1be64:	strb	r2, [r1, #12]
   1be68:	movw	r1, #56940	; 0xde6c
   1be6c:	movt	r1, #5
   1be70:	str	r0, [r1, #48]	; 0x30
   1be74:	ldrb	r0, [r1, #44]	; 0x2c
   1be78:	tst	r0, #2
   1be7c:	movwne	r0, #36460	; 0x8e6c
   1be80:	movtne	r0, #1
   1be84:	strne	r0, [r1, #52]	; 0x34
   1be88:	bx	lr
   1be8c:	push	{r4, r5, r6, r7, fp, lr}
   1be90:	add	fp, sp, #16
   1be94:	mov	r4, r2
   1be98:	mov	r5, r1
   1be9c:	mov	r6, r0
   1bea0:	bl	2cc04 <__assert_fail@plt+0x1a188>
   1bea4:	cmp	r0, #0
   1bea8:	beq	1beec <__assert_fail@plt+0x9470>
   1beac:	mov	r7, r0
   1beb0:	bl	127d0 <__errno_location@plt>
   1beb4:	ldr	r0, [r0]
   1beb8:	cmp	r0, #20
   1bebc:	cmpne	r0, #2
   1bec0:	bne	1bef0 <__assert_fail@plt+0x9474>
   1bec4:	movw	r0, #56940	; 0xde6c
   1bec8:	movt	r0, #5
   1becc:	ldrb	r0, [r0, #44]	; 0x2c
   1bed0:	tst	r0, #2
   1bed4:	bne	1bef8 <__assert_fail@plt+0x947c>
   1bed8:	mov	r0, r6
   1bedc:	mov	r1, r5
   1bee0:	mov	r2, r4
   1bee4:	pop	{r4, r5, r6, r7, fp, lr}
   1bee8:	b	2ce3c <__assert_fail@plt+0x1a3c0>
   1beec:	mov	r7, #0
   1bef0:	mov	r0, r7
   1bef4:	pop	{r4, r5, r6, r7, fp, pc}
   1bef8:	movw	r0, #54600	; 0xd548
   1befc:	movw	r1, #38275	; 0x9583
   1bf00:	mov	r2, r5
   1bf04:	movt	r0, #5
   1bf08:	movt	r1, #4
   1bf0c:	ldr	r0, [r0]
   1bf10:	bl	127c4 <fprintf@plt>
   1bf14:	b	1bed8 <__assert_fail@plt+0x945c>
   1bf18:	b	2ce3c <__assert_fail@plt+0x1a3c0>
   1bf1c:	push	{r4, r5, r6, r7, fp, lr}
   1bf20:	add	fp, sp, #16
   1bf24:	mov	r6, r0
   1bf28:	movw	r0, #56896	; 0xde40
   1bf2c:	mov	r4, r2
   1bf30:	mov	r5, r1
   1bf34:	movt	r0, #5
   1bf38:	ldr	r0, [r0]
   1bf3c:	cmp	r0, #0
   1bf40:	beq	1bf58 <__assert_fail@plt+0x94dc>
   1bf44:	mov	r0, r6
   1bf48:	mov	r1, r5
   1bf4c:	mov	r2, r4
   1bf50:	pop	{r4, r5, r6, r7, fp, lr}
   1bf54:	b	2ce3c <__assert_fail@plt+0x1a3c0>
   1bf58:	mov	r0, r6
   1bf5c:	mov	r1, r5
   1bf60:	mov	r2, r4
   1bf64:	bl	2cc04 <__assert_fail@plt+0x1a188>
   1bf68:	cmp	r0, #0
   1bf6c:	beq	1bfbc <__assert_fail@plt+0x9540>
   1bf70:	mov	r7, r0
   1bf74:	bl	127d0 <__errno_location@plt>
   1bf78:	ldr	r0, [r0]
   1bf7c:	cmp	r0, #20
   1bf80:	cmpne	r0, #2
   1bf84:	bne	1bfc0 <__assert_fail@plt+0x9544>
   1bf88:	movw	r0, #56940	; 0xde6c
   1bf8c:	movt	r0, #5
   1bf90:	ldrb	r0, [r0, #44]	; 0x2c
   1bf94:	tst	r0, #2
   1bf98:	beq	1bf44 <__assert_fail@plt+0x94c8>
   1bf9c:	movw	r0, #54600	; 0xd548
   1bfa0:	movw	r1, #38275	; 0x9583
   1bfa4:	mov	r2, r5
   1bfa8:	movt	r0, #5
   1bfac:	movt	r1, #4
   1bfb0:	ldr	r0, [r0]
   1bfb4:	bl	127c4 <fprintf@plt>
   1bfb8:	b	1bf44 <__assert_fail@plt+0x94c8>
   1bfbc:	mov	r7, #0
   1bfc0:	mov	r0, r7
   1bfc4:	pop	{r4, r5, r6, r7, fp, pc}
   1bfc8:	movw	r0, #56528	; 0xdcd0
   1bfcc:	mov	r1, #0
   1bfd0:	movt	r0, #5
   1bfd4:	str	r1, [r0]
   1bfd8:	bx	lr
   1bfdc:	bx	lr
   1bfe0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1bfe4:	add	fp, sp, #24
   1bfe8:	sub	sp, sp, #8
   1bfec:	mov	r4, r0
   1bff0:	movw	r0, #38268	; 0x957c
   1bff4:	mov	r2, #6
   1bff8:	movt	r0, #4
   1bffc:	mov	r1, r4
   1c000:	bl	12a1c <strncmp@plt>
   1c004:	cmp	r0, #0
   1c008:	bne	1c03c <__assert_fail@plt+0x95c0>
   1c00c:	mov	r0, r4
   1c010:	bl	12788 <strlen@plt>
   1c014:	cmp	r0, #8
   1c018:	bne	1c03c <__assert_fail@plt+0x95c0>
   1c01c:	movw	r0, #56528	; 0xdcd0
   1c020:	movw	r8, #42464	; 0xa5e0
   1c024:	movt	r0, #5
   1c028:	movt	r8, #4
   1c02c:	ldr	r1, [r0]
   1c030:	cmp	r1, #0
   1c034:	streq	r4, [r0]
   1c038:	b	1c0e0 <__assert_fail@plt+0x9664>
   1c03c:	mov	r6, r4
   1c040:	ldrb	r0, [r6], #1
   1c044:	cmp	r0, #45	; 0x2d
   1c048:	movw	r0, #31913	; 0x7ca9
   1c04c:	movne	r6, r4
   1c050:	movt	r0, #4
   1c054:	mov	r1, r6
   1c058:	bl	123d4 <strcmp@plt>
   1c05c:	cmp	r0, #0
   1c060:	beq	1c0a0 <__assert_fail@plt+0x9624>
   1c064:	movw	r7, #42480	; 0xa5f0
   1c068:	mov	r8, #0
   1c06c:	mov	r5, #0
   1c070:	movt	r7, #4
   1c074:	cmn	r5, #1360	; 0x550
   1c078:	beq	1c0e0 <__assert_fail@plt+0x9664>
   1c07c:	sub	r0, r7, r5
   1c080:	mov	r1, r6
   1c084:	ldr	r0, [r0, #20]
   1c088:	bl	123d4 <strcmp@plt>
   1c08c:	sub	r5, r5, #16
   1c090:	cmp	r0, #0
   1c094:	bne	1c074 <__assert_fail@plt+0x95f8>
   1c098:	sub	r8, r7, r5
   1c09c:	b	1c0a8 <__assert_fail@plt+0x962c>
   1c0a0:	movw	r8, #42480	; 0xa5f0
   1c0a4:	movt	r8, #4
   1c0a8:	ldr	r0, [r8]
   1c0ac:	cmp	r0, #1
   1c0b0:	beq	1c0dc <__assert_fail@plt+0x9660>
   1c0b4:	cmp	r0, #2
   1c0b8:	beq	1c0e0 <__assert_fail@plt+0x9664>
   1c0bc:	movw	r6, #56528	; 0xdcd0
   1c0c0:	cmp	r0, #0
   1c0c4:	movt	r6, #5
   1c0c8:	ldr	r1, [r6]
   1c0cc:	beq	1c0ec <__assert_fail@plt+0x9670>
   1c0d0:	cmp	r1, #0
   1c0d4:	streq	r4, [r6]
   1c0d8:	b	1c0e0 <__assert_fail@plt+0x9664>
   1c0dc:	mov	r8, #0
   1c0e0:	mov	r0, r8
   1c0e4:	sub	sp, fp, #24
   1c0e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c0ec:	cmp	r1, #0
   1c0f0:	beq	1c0e0 <__assert_fail@plt+0x9664>
   1c0f4:	movw	r0, #56940	; 0xde6c
   1c0f8:	movt	r0, #5
   1c0fc:	ldrb	r1, [r0, #17]
   1c100:	cmp	r1, #0
   1c104:	bne	1c0e0 <__assert_fail@plt+0x9664>
   1c108:	ldrb	r0, [r0, #16]
   1c10c:	cmp	r0, #0
   1c110:	beq	1c0e0 <__assert_fail@plt+0x9664>
   1c114:	movw	r1, #38352	; 0x95d0
   1c118:	mov	r0, #0
   1c11c:	mov	r2, #5
   1c120:	movt	r1, #4
   1c124:	bl	1253c <dcgettext@plt>
   1c128:	mov	r2, r0
   1c12c:	ldr	r0, [r6]
   1c130:	mov	r1, #0
   1c134:	mov	r3, r4
   1c138:	stm	sp, {r0, r4}
   1c13c:	mov	r0, #0
   1c140:	bl	12674 <error@plt>
   1c144:	b	1c0e0 <__assert_fail@plt+0x9664>
   1c148:	push	{fp, lr}
   1c14c:	mov	fp, sp
   1c150:	bl	17b1c <__assert_fail@plt+0x50a0>
   1c154:	movw	r1, #15832	; 0x3dd8
   1c158:	mov	r2, #5
   1c15c:	mov	r3, #0
   1c160:	movt	r1, #1
   1c164:	str	r1, [r0]
   1c168:	strd	r2, [r0, #8]
   1c16c:	strh	r3, [r0, #18]
   1c170:	mov	r0, #1
   1c174:	pop	{fp, pc}
   1c178:	push	{r4, r5, fp, lr}
   1c17c:	add	fp, sp, #8
   1c180:	mov	r1, #0
   1c184:	mov	r5, #0
   1c188:	bl	17c28 <__assert_fail@plt+0x51ac>
   1c18c:	movw	r1, #18900	; 0x49d4
   1c190:	mov	r4, #4
   1c194:	movt	r1, #1
   1c198:	str	r1, [r0]
   1c19c:	strd	r4, [r0, #8]
   1c1a0:	strh	r5, [r0, #18]
   1c1a4:	mov	r0, #1
   1c1a8:	pop	{r4, r5, fp, pc}
   1c1ac:	push	{fp, lr}
   1c1b0:	mov	fp, sp
   1c1b4:	bl	180ec <__assert_fail@plt+0x5670>
   1c1b8:	movw	r1, #257	; 0x101
   1c1bc:	str	r1, [r0, #16]
   1c1c0:	add	r1, r0, #40	; 0x28
   1c1c4:	movw	r0, #40776	; 0x9f48
   1c1c8:	movt	r0, #4
   1c1cc:	bl	1f2a8 <__assert_fail@plt+0xc82c>
   1c1d0:	mov	r0, #1
   1c1d4:	pop	{fp, pc}
   1c1d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c1dc:	add	fp, sp, #28
   1c1e0:	sub	sp, sp, #116	; 0x74
   1c1e4:	mov	r6, #0
   1c1e8:	cmp	r1, #0
   1c1ec:	beq	1c288 <__assert_fail@plt+0x980c>
   1c1f0:	ldr	r8, [r2]
   1c1f4:	mov	sl, r2
   1c1f8:	mov	r5, r1
   1c1fc:	ldr	r4, [r1, r8, lsl #2]
   1c200:	cmp	r4, #0
   1c204:	beq	1c288 <__assert_fail@plt+0x980c>
   1c208:	mov	r7, r0
   1c20c:	mov	r0, r4
   1c210:	bl	12788 <strlen@plt>
   1c214:	cmp	r0, #8
   1c218:	bne	1c288 <__assert_fail@plt+0x980c>
   1c21c:	mov	r0, #116	; 0x74
   1c220:	mov	r1, r4
   1c224:	mov	r2, #6
   1c228:	strh	r0, [fp, #-32]	; 0xffffffe0
   1c22c:	movw	r0, #16993	; 0x4261
   1c230:	movt	r0, #28003	; 0x6d63
   1c234:	str	r0, [fp, #-36]	; 0xffffffdc
   1c238:	movw	r0, #38268	; 0x957c
   1c23c:	movt	r0, #4
   1c240:	bl	12a1c <strncmp@plt>
   1c244:	cmp	r0, #0
   1c248:	bne	1c47c <__assert_fail@plt+0x9a00>
   1c24c:	ldrb	r9, [r4, #6]
   1c250:	cmp	r9, #66	; 0x42
   1c254:	ldrbne	r4, [r4, #7]
   1c258:	cmpne	r4, #66	; 0x42
   1c25c:	bne	1c294 <__assert_fail@plt+0x9818>
   1c260:	movw	r1, #38721	; 0x9741
   1c264:	mov	r0, #0
   1c268:	mov	r2, #5
   1c26c:	mov	r6, #0
   1c270:	movt	r1, #4
   1c274:	bl	1253c <dcgettext@plt>
   1c278:	mov	r2, r0
   1c27c:	mov	r0, #0
   1c280:	mov	r1, #0
   1c284:	bl	12674 <error@plt>
   1c288:	mov	r0, r6
   1c28c:	sub	sp, fp, #28
   1c290:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c294:	mov	r6, #0
   1c298:	cmp	r9, #116	; 0x74
   1c29c:	beq	1c288 <__assert_fail@plt+0x980c>
   1c2a0:	sub	r0, fp, #36	; 0x24
   1c2a4:	mov	r1, r9
   1c2a8:	bl	12794 <strchr@plt>
   1c2ac:	cmp	r0, #0
   1c2b0:	beq	1c288 <__assert_fail@plt+0x980c>
   1c2b4:	sub	r0, fp, #36	; 0x24
   1c2b8:	mov	r1, r4
   1c2bc:	bl	12794 <strchr@plt>
   1c2c0:	cmp	r0, #0
   1c2c4:	beq	1c288 <__assert_fail@plt+0x980c>
   1c2c8:	add	r0, r8, #1
   1c2cc:	ldr	r1, [r5, r0, lsl #2]
   1c2d0:	cmp	r1, #0
   1c2d4:	beq	1c49c <__assert_fail@plt+0x9a20>
   1c2d8:	str	r0, [sl]
   1c2dc:	mov	r0, r7
   1c2e0:	bl	18090 <__assert_fail@plt+0x5614>
   1c2e4:	mov	r6, r0
   1c2e8:	cmp	r9, #97	; 0x61
   1c2ec:	beq	1c310 <__assert_fail@plt+0x9894>
   1c2f0:	cmp	r9, #109	; 0x6d
   1c2f4:	beq	1c308 <__assert_fail@plt+0x988c>
   1c2f8:	cmp	r9, #99	; 0x63
   1c2fc:	bne	1c4e4 <__assert_fail@plt+0x9a68>
   1c300:	mov	r0, #2
   1c304:	b	1c314 <__assert_fail@plt+0x9898>
   1c308:	mov	r0, #3
   1c30c:	b	1c314 <__assert_fail@plt+0x9898>
   1c310:	mov	r0, #0
   1c314:	cmp	r4, #116	; 0x74
   1c318:	str	r0, [r6, #40]	; 0x28
   1c31c:	bne	1c370 <__assert_fail@plt+0x98f4>
   1c320:	ldr	r0, [sl]
   1c324:	movw	r7, #56940	; 0xde6c
   1c328:	add	r4, r6, #48	; 0x30
   1c32c:	movt	r7, #5
   1c330:	add	r2, r7, #20
   1c334:	ldr	r1, [r5, r0, lsl #2]
   1c338:	mov	r0, r4
   1c33c:	bl	29c24 <__assert_fail@plt+0x171a8>
   1c340:	cmp	r0, #0
   1c344:	bne	1c3d8 <__assert_fail@plt+0x995c>
   1c348:	movw	r1, #38843	; 0x97bb
   1c34c:	mov	r0, #0
   1c350:	mov	r2, #5
   1c354:	movt	r1, #4
   1c358:	bl	1253c <dcgettext@plt>
   1c35c:	mov	r4, r0
   1c360:	ldr	r0, [sl]
   1c364:	ldr	r1, [r7, #72]	; 0x48
   1c368:	ldr	r2, [r5, r0, lsl #2]
   1c36c:	b	1c4c8 <__assert_fail@plt+0x9a4c>
   1c370:	mov	r7, sp
   1c374:	mov	r0, r7
   1c378:	bl	18534 <__assert_fail@plt+0x5ab8>
   1c37c:	ldr	r0, [sl]
   1c380:	movw	r1, #56940	; 0xde6c
   1c384:	movt	r1, #5
   1c388:	ldr	r2, [r1, #52]	; 0x34
   1c38c:	mov	r1, r7
   1c390:	ldr	r0, [r5, r0, lsl #2]
   1c394:	blx	r2
   1c398:	cmp	r0, #0
   1c39c:	bne	1c558 <__assert_fail@plt+0x9adc>
   1c3a0:	cmp	r4, #109	; 0x6d
   1c3a4:	beq	1c3c8 <__assert_fail@plt+0x994c>
   1c3a8:	cmp	r4, #99	; 0x63
   1c3ac:	beq	1c3c0 <__assert_fail@plt+0x9944>
   1c3b0:	cmp	r4, #97	; 0x61
   1c3b4:	bne	1c56c <__assert_fail@plt+0x9af0>
   1c3b8:	add	r0, r7, #72	; 0x48
   1c3bc:	b	1c3cc <__assert_fail@plt+0x9950>
   1c3c0:	add	r0, r7, #88	; 0x58
   1c3c4:	b	1c3cc <__assert_fail@plt+0x9950>
   1c3c8:	add	r0, r7, #80	; 0x50
   1c3cc:	ldrd	r0, [r0]
   1c3d0:	add	r4, r6, #48	; 0x30
   1c3d4:	stm	r4, {r0, r1}
   1c3d8:	movw	r1, #56940	; 0xde6c
   1c3dc:	mov	r0, #0
   1c3e0:	movw	r2, #10111	; 0x277f
   1c3e4:	vldr	s0, [pc, #456]	; 1c5b4 <__assert_fail@plt+0x9b38>
   1c3e8:	str	r0, [r6, #44]	; 0x2c
   1c3ec:	movt	r1, #5
   1c3f0:	movt	r2, #133	; 0x85
   1c3f4:	ldr	r0, [r4]
   1c3f8:	ldr	r1, [r1, #28]
   1c3fc:	sub	r0, r1, r0
   1c400:	add	r1, pc, #420	; 0x1a4
   1c404:	cmp	r0, r2
   1c408:	addgt	r1, r1, #4
   1c40c:	vldr	s2, [r1]
   1c410:	movw	r1, #20864	; 0x5180
   1c414:	movt	r1, #1
   1c418:	cmp	r0, r1
   1c41c:	vselge.f32	s0, s2, s0
   1c420:	vstr	s0, [r6, #28]
   1c424:	ldr	r0, [sl]
   1c428:	add	r0, r0, #1
   1c42c:	str	r0, [sl]
   1c430:	ldr	r0, [r6]
   1c434:	cmp	r0, #0
   1c438:	beq	1c518 <__assert_fail@plt+0x9a9c>
   1c43c:	movw	r1, #18208	; 0x4720
   1c440:	movt	r1, #1
   1c444:	cmp	r0, r1
   1c448:	bne	1c538 <__assert_fail@plt+0x9abc>
   1c44c:	ldrb	r0, [r6, #18]
   1c450:	mov	r6, #1
   1c454:	cmp	r0, #0
   1c458:	bne	1c288 <__assert_fail@plt+0x980c>
   1c45c:	movw	r0, #38965	; 0x9835
   1c460:	movw	r1, #38647	; 0x96f7
   1c464:	movw	r3, #38656	; 0x9700
   1c468:	movw	r2, #1649	; 0x671
   1c46c:	movt	r0, #4
   1c470:	movt	r1, #4
   1c474:	movt	r3, #4
   1c478:	bl	12a7c <__assert_fail@plt>
   1c47c:	movw	r0, #38604	; 0x96cc
   1c480:	movw	r1, #38647	; 0x96f7
   1c484:	movw	r3, #38656	; 0x9700
   1c488:	movw	r2, #1555	; 0x613
   1c48c:	movt	r0, #4
   1c490:	movt	r1, #4
   1c494:	movt	r3, #4
   1c498:	bl	12a7c <__assert_fail@plt>
   1c49c:	movw	r1, #38790	; 0x9786
   1c4a0:	mov	r0, #0
   1c4a4:	mov	r2, #5
   1c4a8:	movt	r1, #4
   1c4ac:	bl	1253c <dcgettext@plt>
   1c4b0:	mov	r4, r0
   1c4b4:	ldr	r0, [sl]
   1c4b8:	ldr	r2, [r5, r0, lsl #2]
   1c4bc:	movw	r0, #56940	; 0xde6c
   1c4c0:	movt	r0, #5
   1c4c4:	ldr	r1, [r0, #72]	; 0x48
   1c4c8:	mov	r0, #0
   1c4cc:	bl	2c45c <__assert_fail@plt+0x199e0>
   1c4d0:	mov	r3, r0
   1c4d4:	mov	r0, #1
   1c4d8:	mov	r1, #0
   1c4dc:	mov	r2, r4
   1c4e0:	bl	12674 <error@plt>
   1c4e4:	sub	r0, fp, #36	; 0x24
   1c4e8:	mov	r1, r9
   1c4ec:	bl	12794 <strchr@plt>
   1c4f0:	cmp	r0, #0
   1c4f4:	bne	1c58c <__assert_fail@plt+0x9b10>
   1c4f8:	movw	r0, #38820	; 0x97a4
   1c4fc:	movw	r1, #38647	; 0x96f7
   1c500:	movw	r3, #38656	; 0x9700
   1c504:	movw	r2, #1611	; 0x64b
   1c508:	movt	r0, #4
   1c50c:	movt	r1, #4
   1c510:	movt	r3, #4
   1c514:	bl	12a7c <__assert_fail@plt>
   1c518:	movw	r0, #38901	; 0x97f5
   1c51c:	movw	r1, #38647	; 0x96f7
   1c520:	movw	r3, #38656	; 0x9700
   1c524:	movw	r2, #1647	; 0x66f
   1c528:	movt	r0, #4
   1c52c:	movt	r1, #4
   1c530:	movt	r3, #4
   1c534:	bl	12a7c <__assert_fail@plt>
   1c538:	movw	r0, #38929	; 0x9811
   1c53c:	movw	r1, #38647	; 0x96f7
   1c540:	movw	r3, #38656	; 0x9700
   1c544:	mov	r2, #1648	; 0x670
   1c548:	movt	r0, #4
   1c54c:	movt	r1, #4
   1c550:	movt	r3, #4
   1c554:	bl	12a7c <__assert_fail@plt>
   1c558:	bl	127d0 <__errno_location@plt>
   1c55c:	ldr	r1, [sl]
   1c560:	ldr	r0, [r0]
   1c564:	ldr	r1, [r5, r1, lsl #2]
   1c568:	bl	19a1c <__assert_fail@plt+0x6fa0>
   1c56c:	movw	r0, #32073	; 0x7d49
   1c570:	movw	r1, #38647	; 0x96f7
   1c574:	movw	r3, #38985	; 0x9849
   1c578:	movw	r2, #498	; 0x1f2
   1c57c:	movt	r0, #4
   1c580:	movt	r1, #4
   1c584:	movt	r3, #4
   1c588:	bl	12a7c <__assert_fail@plt>
   1c58c:	movw	r0, #32073	; 0x7d49
   1c590:	movw	r1, #38647	; 0x96f7
   1c594:	movw	r3, #38656	; 0x9700
   1c598:	movw	r2, #1612	; 0x64c
   1c59c:	movt	r0, #4
   1c5a0:	movt	r1, #4
   1c5a4:	movt	r3, #4
   1c5a8:	bl	12a7c <__assert_fail@plt>
   1c5ac:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1c5b0:			; <UNDEFINED> instruction: 0x3e99999a
   1c5b4:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1c5b8:	push	{r4, sl, fp, lr}
   1c5bc:	add	fp, sp, #8
   1c5c0:	mov	r1, #0
   1c5c4:	mov	r4, #0
   1c5c8:	bl	17c28 <__assert_fail@plt+0x51ac>
   1c5cc:	movw	r1, #18044	; 0x467c
   1c5d0:	mov	r2, #2
   1c5d4:	mov	r3, #4
   1c5d8:	movt	r1, #1
   1c5dc:	str	r1, [r0]
   1c5e0:	strd	r2, [r0, #8]
   1c5e4:	strh	r4, [r0, #18]
   1c5e8:	mov	r0, #1
   1c5ec:	pop	{r4, sl, fp, pc}
   1c5f0:	push	{fp, lr}
   1c5f4:	mov	fp, sp
   1c5f8:	bl	17b1c <__assert_fail@plt+0x50a0>
   1c5fc:	movw	r1, #15992	; 0x3e78
   1c600:	mov	r2, #3
   1c604:	mov	r3, #1
   1c608:	movt	r1, #1
   1c60c:	str	r1, [r0]
   1c610:	mov	r1, #0
   1c614:	strd	r2, [r0, #8]
   1c618:	strh	r1, [r0, #18]
   1c61c:	mov	r1, #1065353216	; 0x3f800000
   1c620:	str	r1, [r0, #28]
   1c624:	mov	r0, #1
   1c628:	pop	{fp, pc}
   1c62c:	push	{fp, lr}
   1c630:	mov	fp, sp
   1c634:	bl	17b1c <__assert_fail@plt+0x50a0>
   1c638:	movw	r1, #15600	; 0x3cf0
   1c63c:	movt	r1, #1
   1c640:	str	r1, [r0]
   1c644:	mov	r1, #3
   1c648:	str	r1, [r0, #8]
   1c64c:	str	r1, [r0, #12]
   1c650:	mov	r1, #0
   1c654:	strh	r1, [r0, #18]
   1c658:	mov	r0, #1
   1c65c:	pop	{fp, pc}
   1c660:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c664:	add	fp, sp, #28
   1c668:	sub	sp, sp, #28
   1c66c:	mov	r4, #0
   1c670:	cmp	r1, #0
   1c674:	beq	1c748 <__assert_fail@plt+0x9ccc>
   1c678:	ldr	r9, [r2]
   1c67c:	mov	r5, r2
   1c680:	ldr	r7, [r1, r9, lsl #2]
   1c684:	cmp	r7, #0
   1c688:	beq	1c748 <__assert_fail@plt+0x9ccc>
   1c68c:	movw	sl, #56940	; 0xde6c
   1c690:	mov	r8, r0
   1c694:	add	r0, r9, #1
   1c698:	movw	r1, #39373	; 0x99cd
   1c69c:	vldr	d0, [pc, #180]	; 1c758 <__assert_fail@plt+0x9cdc>
   1c6a0:	add	r6, sp, #8
   1c6a4:	mov	r4, #0
   1c6a8:	str	r0, [r5]
   1c6ac:	movt	sl, #5
   1c6b0:	movt	r1, #4
   1c6b4:	str	r4, [sp, #8]
   1c6b8:	ldr	r0, [sl, #28]
   1c6bc:	ldr	r3, [sl, #32]
   1c6c0:	str	r1, [sp]
   1c6c4:	movw	r1, #20864	; 0x5180
   1c6c8:	movt	r1, #1
   1c6cc:	add	r2, r0, r1
   1c6d0:	mov	r0, r7
   1c6d4:	mov	r1, r6
   1c6d8:	bl	1eb08 <__assert_fail@plt+0xc08c>
   1c6dc:	cmp	r0, #0
   1c6e0:	beq	1c744 <__assert_fail@plt+0x9cc8>
   1c6e4:	mov	r0, r8
   1c6e8:	mov	r1, r7
   1c6ec:	bl	18090 <__assert_fail@plt+0x5614>
   1c6f0:	mov	r1, #8
   1c6f4:	movw	r3, #10111	; 0x277f
   1c6f8:	vldr	s0, [pc, #104]	; 1c768 <__assert_fail@plt+0x9cec>
   1c6fc:	mov	r4, #1
   1c700:	vld1.64	{d16-d17}, [r6], r1
   1c704:	add	r1, r0, #40	; 0x28
   1c708:	movt	r3, #133	; 0x85
   1c70c:	vst1.64	{d16-d17}, [r1]
   1c710:	ldr	r1, [r6]
   1c714:	ldr	r2, [sl, #28]
   1c718:	sub	r1, r2, r1
   1c71c:	add	r2, pc, #60	; 0x3c
   1c720:	cmp	r1, r3
   1c724:	addgt	r2, r2, #4
   1c728:	vldr	s2, [r2]
   1c72c:	movw	r2, #20864	; 0x5180
   1c730:	movt	r2, #1
   1c734:	cmp	r1, r2
   1c738:	vselge.f32	s0, s2, s0
   1c73c:	vstr	s0, [r0, #28]
   1c740:	b	1c748 <__assert_fail@plt+0x9ccc>
   1c744:	str	r9, [r5]
   1c748:	mov	r0, r4
   1c74c:	sub	sp, fp, #28
   1c750:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c754:	nop	{0}
   1c758:	andeq	r0, r0, r0
   1c75c:	submi	r0, lr, r0
   1c760:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1c764:			; <UNDEFINED> instruction: 0x3e99999a
   1c768:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1c76c:	push	{r4, r5, r6, sl, fp, lr}
   1c770:	add	fp, sp, #16
   1c774:	sub	sp, sp, #104	; 0x68
   1c778:	mov	r4, r0
   1c77c:	mov	r0, sp
   1c780:	mov	r6, r2
   1c784:	mov	r5, r1
   1c788:	bl	18534 <__assert_fail@plt+0x5ab8>
   1c78c:	mov	r0, #0
   1c790:	cmp	r5, #0
   1c794:	beq	1c834 <__assert_fail@plt+0x9db8>
   1c798:	ldr	r1, [r6]
   1c79c:	ldr	r5, [r5, r1, lsl #2]
   1c7a0:	cmp	r5, #0
   1c7a4:	beq	1c834 <__assert_fail@plt+0x9db8>
   1c7a8:	add	r0, r1, #1
   1c7ac:	mov	r1, sp
   1c7b0:	str	r0, [r6]
   1c7b4:	movw	r6, #56940	; 0xde6c
   1c7b8:	mov	r0, r5
   1c7bc:	movt	r6, #5
   1c7c0:	ldr	r2, [r6, #52]	; 0x34
   1c7c4:	blx	r2
   1c7c8:	cmp	r0, #0
   1c7cc:	bne	1c83c <__assert_fail@plt+0x9dc0>
   1c7d0:	mov	r0, r4
   1c7d4:	mov	r1, r5
   1c7d8:	bl	18090 <__assert_fail@plt+0x5614>
   1c7dc:	mov	r1, #0
   1c7e0:	add	ip, r0, #44	; 0x2c
   1c7e4:	vldr	s0, [pc, #104]	; 1c854 <__assert_fail@plt+0x9dd8>
   1c7e8:	str	r1, [r0, #40]	; 0x28
   1c7ec:	ldr	r2, [sp, #80]	; 0x50
   1c7f0:	ldr	r3, [sp, #84]	; 0x54
   1c7f4:	stm	ip, {r1, r2, r3}
   1c7f8:	movw	r3, #10111	; 0x277f
   1c7fc:	ldr	r1, [r6, #28]
   1c800:	ldr	r2, [sp, #80]	; 0x50
   1c804:	movt	r3, #133	; 0x85
   1c808:	sub	r1, r1, r2
   1c80c:	add	r2, pc, #56	; 0x38
   1c810:	cmp	r1, r3
   1c814:	addgt	r2, r2, #4
   1c818:	vldr	s2, [r2]
   1c81c:	movw	r2, #20864	; 0x5180
   1c820:	movt	r2, #1
   1c824:	cmp	r1, r2
   1c828:	vselge.f32	s0, s2, s0
   1c82c:	vstr	s0, [r0, #28]
   1c830:	mov	r0, #1
   1c834:	sub	sp, fp, #16
   1c838:	pop	{r4, r5, r6, sl, fp, pc}
   1c83c:	bl	127d0 <__errno_location@plt>
   1c840:	ldr	r0, [r0]
   1c844:	mov	r1, r5
   1c848:	bl	19a1c <__assert_fail@plt+0x6fa0>
   1c84c:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1c850:			; <UNDEFINED> instruction: 0x3e99999a
   1c854:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1c858:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c85c:	add	fp, sp, #28
   1c860:	sub	sp, sp, #28
   1c864:	mov	r4, r1
   1c868:	movw	r1, #39571	; 0x9a93
   1c86c:	mov	r5, r2
   1c870:	mov	r6, r0
   1c874:	mov	r0, #0
   1c878:	mov	r2, #5
   1c87c:	mov	r8, #0
   1c880:	movt	r1, #4
   1c884:	bl	1253c <dcgettext@plt>
   1c888:	cmp	r4, #0
   1c88c:	beq	1c9a8 <__assert_fail@plt+0x9f2c>
   1c890:	ldr	r9, [r5]
   1c894:	ldr	r7, [r4, r9, lsl #2]
   1c898:	cmp	r7, #0
   1c89c:	beq	1c9a8 <__assert_fail@plt+0x9f2c>
   1c8a0:	movw	sl, #56940	; 0xde6c
   1c8a4:	add	r1, r9, #1
   1c8a8:	vldr	d0, [pc, #448]	; 1ca70 <__assert_fail@plt+0x9ff4>
   1c8ac:	add	r4, sp, #8
   1c8b0:	str	r1, [r5]
   1c8b4:	movt	sl, #5
   1c8b8:	ldrb	r1, [r7]
   1c8bc:	ldr	r2, [sl, #28]
   1c8c0:	str	r0, [sp]
   1c8c4:	movw	r0, #20864	; 0x5180
   1c8c8:	ldr	r3, [sl, #32]
   1c8cc:	movt	r0, #1
   1c8d0:	cmp	r1, #45	; 0x2d
   1c8d4:	add	r0, r2, r0
   1c8d8:	mov	r1, r4
   1c8dc:	subeq	r2, r0, #1
   1c8e0:	mov	r0, r7
   1c8e4:	bl	1eb08 <__assert_fail@plt+0xc08c>
   1c8e8:	cmp	r0, #0
   1c8ec:	beq	1c9a4 <__assert_fail@plt+0x9f28>
   1c8f0:	mov	r0, r6
   1c8f4:	mov	r1, r7
   1c8f8:	bl	18090 <__assert_fail@plt+0x5614>
   1c8fc:	mov	r5, r0
   1c900:	mov	r0, #8
   1c904:	movw	r2, #10111	; 0x277f
   1c908:	vldr	s0, [pc, #368]	; 1ca80 <__assert_fail@plt+0xa004>
   1c90c:	movw	r7, #20864	; 0x5180
   1c910:	mov	r8, #1
   1c914:	vld1.64	{d16-d17}, [r4], r0
   1c918:	add	r0, r5, #40	; 0x28
   1c91c:	movt	r2, #133	; 0x85
   1c920:	movt	r7, #1
   1c924:	vst1.64	{d16-d17}, [r0]
   1c928:	ldr	r0, [r4]
   1c92c:	ldr	r1, [sl, #28]
   1c930:	sub	r0, r1, r0
   1c934:	add	r1, pc, #316	; 0x13c
   1c938:	cmp	r0, r2
   1c93c:	addgt	r1, r1, #4
   1c940:	cmp	r0, r7
   1c944:	vldr	s2, [r1]
   1c948:	vselge.f32	s0, s2, s0
   1c94c:	vstr	s0, [r5, #28]
   1c950:	ldrb	r0, [sl, #44]	; 0x2c
   1c954:	tst	r0, #1
   1c958:	beq	1c9a8 <__assert_fail@plt+0x9f2c>
   1c95c:	movw	sl, #54600	; 0xd548
   1c960:	ldr	r2, [r5, #4]
   1c964:	movw	r1, #39639	; 0x9ad7
   1c968:	movt	sl, #5
   1c96c:	movt	r1, #4
   1c970:	ldr	r0, [sl]
   1c974:	bl	127c4 <fprintf@plt>
   1c978:	ldr	r9, [sp, #12]
   1c97c:	ldr	r0, [sl]
   1c980:	cmp	r9, #0
   1c984:	beq	1c9b4 <__assert_fail@plt+0x9f38>
   1c988:	cmp	r9, #1
   1c98c:	bne	1c9c8 <__assert_fail@plt+0x9f4c>
   1c990:	movw	r3, #39683	; 0x9b03
   1c994:	movw	r2, #45547	; 0xb1eb
   1c998:	movt	r3, #4
   1c99c:	movt	r2, #4
   1c9a0:	b	1c9f4 <__assert_fail@plt+0x9f78>
   1c9a4:	str	r9, [r5]
   1c9a8:	mov	r0, r8
   1c9ac:	sub	sp, fp, #28
   1c9b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c9b4:	movw	r3, #39680	; 0x9b00
   1c9b8:	movw	r2, #39674	; 0x9afa
   1c9bc:	movt	r3, #4
   1c9c0:	movt	r2, #4
   1c9c4:	b	1c9f4 <__assert_fail@plt+0x9f78>
   1c9c8:	movw	r1, #39686	; 0x9b06
   1c9cc:	movw	r3, #39689	; 0x9b09
   1c9d0:	cmp	r9, #2
   1c9d4:	movw	r2, #39690	; 0x9b0a
   1c9d8:	movt	r1, #4
   1c9dc:	movt	r3, #4
   1c9e0:	movt	r2, #4
   1c9e4:	moveq	r3, r1
   1c9e8:	movw	r1, #39677	; 0x9afd
   1c9ec:	movt	r1, #4
   1c9f0:	moveq	r2, r1
   1c9f4:	movw	r1, #39653	; 0x9ae5
   1c9f8:	movt	r1, #4
   1c9fc:	bl	127c4 <fprintf@plt>
   1ca00:	ldr	r4, [r5, #48]	; 0x30
   1ca04:	ldr	r6, [sl]
   1ca08:	add	r0, sp, #4
   1ca0c:	str	r4, [sp, #4]
   1ca10:	bl	12530 <ctime@plt>
   1ca14:	movw	r1, #39712	; 0x9b20
   1ca18:	str	r0, [sp]
   1ca1c:	asr	r3, r4, #31
   1ca20:	mov	r0, r6
   1ca24:	mov	r2, r4
   1ca28:	movt	r1, #4
   1ca2c:	bl	127c4 <fprintf@plt>
   1ca30:	cmp	r9, #2
   1ca34:	bne	1c9a8 <__assert_fail@plt+0x9f2c>
   1ca38:	ldr	r0, [r5, #48]	; 0x30
   1ca3c:	ldr	r5, [sl]
   1ca40:	add	r4, r0, r7
   1ca44:	add	r0, sp, #4
   1ca48:	str	r4, [sp, #4]
   1ca4c:	bl	12530 <ctime@plt>
   1ca50:	movw	r1, #39692	; 0x9b0c
   1ca54:	str	r0, [sp]
   1ca58:	asr	r3, r4, #31
   1ca5c:	mov	r0, r5
   1ca60:	mov	r2, r4
   1ca64:	movt	r1, #4
   1ca68:	bl	127c4 <fprintf@plt>
   1ca6c:	b	1c9a8 <__assert_fail@plt+0x9f2c>
   1ca70:	andeq	r0, r0, r0
   1ca74:	rscsmi	r1, r5, r0, lsl #16
   1ca78:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1ca7c:			; <UNDEFINED> instruction: 0x3e99999a
   1ca80:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1ca84:	nop	{0}
   1ca88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ca8c:	add	fp, sp, #28
   1ca90:	sub	sp, sp, #28
   1ca94:	mov	r4, #0
   1ca98:	cmp	r1, #0
   1ca9c:	beq	1cb70 <__assert_fail@plt+0xa0f4>
   1caa0:	ldr	r9, [r2]
   1caa4:	mov	r5, r2
   1caa8:	ldr	r7, [r1, r9, lsl #2]
   1caac:	cmp	r7, #0
   1cab0:	beq	1cb70 <__assert_fail@plt+0xa0f4>
   1cab4:	movw	sl, #56940	; 0xde6c
   1cab8:	mov	r8, r0
   1cabc:	add	r0, r9, #1
   1cac0:	movw	r1, #39373	; 0x99cd
   1cac4:	vldr	d0, [pc, #180]	; 1cb80 <__assert_fail@plt+0xa104>
   1cac8:	add	r6, sp, #8
   1cacc:	str	r0, [r5]
   1cad0:	mov	r0, #2
   1cad4:	movt	sl, #5
   1cad8:	movt	r1, #4
   1cadc:	str	r0, [sp, #8]
   1cae0:	ldr	r0, [sl, #28]
   1cae4:	ldr	r3, [sl, #32]
   1cae8:	str	r1, [sp]
   1caec:	movw	r1, #20864	; 0x5180
   1caf0:	movt	r1, #1
   1caf4:	add	r2, r0, r1
   1caf8:	mov	r0, r7
   1cafc:	mov	r1, r6
   1cb00:	bl	1eb08 <__assert_fail@plt+0xc08c>
   1cb04:	cmp	r0, #0
   1cb08:	beq	1cb6c <__assert_fail@plt+0xa0f0>
   1cb0c:	mov	r0, r8
   1cb10:	mov	r1, r7
   1cb14:	bl	18090 <__assert_fail@plt+0x5614>
   1cb18:	mov	r1, #8
   1cb1c:	movw	r3, #10111	; 0x277f
   1cb20:	vldr	s0, [pc, #104]	; 1cb90 <__assert_fail@plt+0xa114>
   1cb24:	mov	r4, #1
   1cb28:	vld1.64	{d16-d17}, [r6], r1
   1cb2c:	add	r1, r0, #40	; 0x28
   1cb30:	movt	r3, #133	; 0x85
   1cb34:	vst1.64	{d16-d17}, [r1]
   1cb38:	ldr	r1, [r6]
   1cb3c:	ldr	r2, [sl, #28]
   1cb40:	sub	r1, r2, r1
   1cb44:	add	r2, pc, #60	; 0x3c
   1cb48:	cmp	r1, r3
   1cb4c:	addgt	r2, r2, #4
   1cb50:	vldr	s2, [r2]
   1cb54:	movw	r2, #20864	; 0x5180
   1cb58:	movt	r2, #1
   1cb5c:	cmp	r1, r2
   1cb60:	vselge.f32	s0, s2, s0
   1cb64:	vstr	s0, [r0, #28]
   1cb68:	b	1cb70 <__assert_fail@plt+0xa0f4>
   1cb6c:	str	r9, [r5]
   1cb70:	mov	r0, r4
   1cb74:	sub	sp, fp, #28
   1cb78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb7c:	nop	{0}
   1cb80:	andeq	r0, r0, r0
   1cb84:	submi	r0, lr, r0
   1cb88:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1cb8c:			; <UNDEFINED> instruction: 0x3e99999a
   1cb90:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1cb94:	push	{r4, r5, r6, sl, fp, lr}
   1cb98:	add	fp, sp, #16
   1cb9c:	sub	sp, sp, #104	; 0x68
   1cba0:	mov	r4, r0
   1cba4:	mov	r0, sp
   1cba8:	mov	r6, r2
   1cbac:	mov	r5, r1
   1cbb0:	bl	18534 <__assert_fail@plt+0x5ab8>
   1cbb4:	mov	r0, #0
   1cbb8:	cmp	r5, #0
   1cbbc:	beq	1cc64 <__assert_fail@plt+0xa1e8>
   1cbc0:	ldr	r1, [r6]
   1cbc4:	ldr	r5, [r5, r1, lsl #2]
   1cbc8:	cmp	r5, #0
   1cbcc:	beq	1cc64 <__assert_fail@plt+0xa1e8>
   1cbd0:	add	r0, r1, #1
   1cbd4:	mov	r1, sp
   1cbd8:	str	r0, [r6]
   1cbdc:	movw	r6, #56940	; 0xde6c
   1cbe0:	mov	r0, r5
   1cbe4:	movt	r6, #5
   1cbe8:	ldr	r2, [r6, #52]	; 0x34
   1cbec:	blx	r2
   1cbf0:	cmp	r0, #0
   1cbf4:	bne	1cc6c <__assert_fail@plt+0xa1f0>
   1cbf8:	mov	r0, r4
   1cbfc:	mov	r1, r5
   1cc00:	bl	18090 <__assert_fail@plt+0x5614>
   1cc04:	mov	r1, #2
   1cc08:	mov	r3, #0
   1cc0c:	vldr	s0, [pc, #112]	; 1cc84 <__assert_fail@plt+0xa208>
   1cc10:	str	r1, [r0, #40]	; 0x28
   1cc14:	ldr	r1, [sp, #80]	; 0x50
   1cc18:	ldr	r2, [sp, #84]	; 0x54
   1cc1c:	str	r3, [r0, #44]	; 0x2c
   1cc20:	movw	r3, #10111	; 0x277f
   1cc24:	movt	r3, #133	; 0x85
   1cc28:	str	r2, [r0, #52]	; 0x34
   1cc2c:	str	r1, [r0, #48]	; 0x30
   1cc30:	ldr	r1, [r6, #28]
   1cc34:	ldr	r2, [sp, #80]	; 0x50
   1cc38:	sub	r1, r1, r2
   1cc3c:	add	r2, pc, #56	; 0x38
   1cc40:	cmp	r1, r3
   1cc44:	addgt	r2, r2, #4
   1cc48:	vldr	s2, [r2]
   1cc4c:	movw	r2, #20864	; 0x5180
   1cc50:	movt	r2, #1
   1cc54:	cmp	r1, r2
   1cc58:	vselge.f32	s0, s2, s0
   1cc5c:	vstr	s0, [r0, #28]
   1cc60:	mov	r0, #1
   1cc64:	sub	sp, fp, #16
   1cc68:	pop	{r4, r5, r6, sl, fp, pc}
   1cc6c:	bl	127d0 <__errno_location@plt>
   1cc70:	ldr	r0, [r0]
   1cc74:	mov	r1, r5
   1cc78:	bl	19a1c <__assert_fail@plt+0x6fa0>
   1cc7c:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1cc80:			; <UNDEFINED> instruction: 0x3e99999a
   1cc84:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1cc88:	push	{r4, r5, r6, r7, fp, lr}
   1cc8c:	add	fp, sp, #16
   1cc90:	mov	r6, r0
   1cc94:	mov	r0, #0
   1cc98:	cmp	r1, #0
   1cc9c:	beq	1cd00 <__assert_fail@plt+0xa284>
   1cca0:	mov	r5, r1
   1cca4:	ldr	r1, [r2]
   1cca8:	mov	r4, r2
   1ccac:	ldr	r1, [r5, r1, lsl #2]
   1ccb0:	cmp	r1, #0
   1ccb4:	popeq	{r4, r5, r6, r7, fp, pc}
   1ccb8:	bl	123bc <is_selinux_enabled@plt>
   1ccbc:	cmp	r0, #0
   1ccc0:	ble	1cd04 <__assert_fail@plt+0xa288>
   1ccc4:	mov	r0, r6
   1ccc8:	mov	r1, #0
   1cccc:	mov	r7, #0
   1ccd0:	bl	18090 <__assert_fail@plt+0x5614>
   1ccd4:	movw	r1, #55050	; 0xd70a
   1ccd8:	movt	r1, #15395	; 0x3c23
   1ccdc:	str	r1, [r0, #28]
   1cce0:	strb	r7, [r0, #18]
   1cce4:	ldr	r1, [r4]
   1cce8:	ldr	r1, [r5, r1, lsl #2]
   1ccec:	str	r1, [r0, #40]	; 0x28
   1ccf0:	ldr	r0, [r4]
   1ccf4:	add	r0, r0, #1
   1ccf8:	str	r0, [r4]
   1ccfc:	mov	r0, #1
   1cd00:	pop	{r4, r5, r6, r7, fp, pc}
   1cd04:	movw	r1, #39720	; 0x9b28
   1cd08:	mov	r0, #0
   1cd0c:	mov	r2, #5
   1cd10:	movt	r1, #4
   1cd14:	bl	1253c <dcgettext@plt>
   1cd18:	mov	r2, r0
   1cd1c:	mov	r0, #1
   1cd20:	mov	r1, #0
   1cd24:	bl	12674 <error@plt>
   1cd28:	push	{r4, sl, fp, lr}
   1cd2c:	add	fp, sp, #8
   1cd30:	movw	r4, #56940	; 0xde6c
   1cd34:	movt	r4, #5
   1cd38:	ldrb	r0, [r4, #36]	; 0x24
   1cd3c:	cmp	r0, #0
   1cd40:	beq	1cd4c <__assert_fail@plt+0xa2d0>
   1cd44:	mov	r0, #1
   1cd48:	pop	{r4, sl, fp, pc}
   1cd4c:	mov	r0, r4
   1cd50:	mov	r2, #0
   1cd54:	ldr	r1, [r0, #28]!
   1cd58:	add	r1, r1, #4480	; 0x1180
   1cd5c:	add	r1, r1, #81920	; 0x14000
   1cd60:	stm	r0, {r1, r2}
   1cd64:	bl	12704 <localtime@plt>
   1cd68:	cmp	r0, #0
   1cd6c:	beq	1cd90 <__assert_fail@plt+0xa314>
   1cd70:	ldm	r0, {r1, r2}
   1cd74:	ldr	r0, [r0, #8]
   1cd78:	rsb	r2, r2, r2, lsl #4
   1cd7c:	add	r1, r1, r2, lsl #2
   1cd80:	mov	r2, #3600	; 0xe10
   1cd84:	mla	r1, r0, r2, r1
   1cd88:	ldr	r0, [r4, #28]
   1cd8c:	b	1cdb4 <__assert_fail@plt+0xa338>
   1cd90:	ldr	r0, [r4, #28]
   1cd94:	movw	r1, #17671	; 0x4507
   1cd98:	movt	r1, #49710	; 0xc22e
   1cd9c:	smmla	r1, r0, r1, r0
   1cda0:	asr	r2, r1, #16
   1cda4:	add	r1, r2, r1, lsr #31
   1cda8:	movw	r2, #675	; 0x2a3
   1cdac:	mul	r1, r1, r2
   1cdb0:	sub	r1, r0, r1, lsl #7
   1cdb4:	mov	r2, #1
   1cdb8:	sub	r0, r0, r1
   1cdbc:	strb	r2, [r4, #36]	; 0x24
   1cdc0:	str	r0, [r4, #28]
   1cdc4:	mov	r0, #1
   1cdc8:	pop	{r4, sl, fp, pc}
   1cdcc:	push	{fp, lr}
   1cdd0:	mov	fp, sp
   1cdd4:	bl	180ec <__assert_fail@plt+0x5670>
   1cdd8:	movw	r1, #257	; 0x101
   1cddc:	mov	r2, #0
   1cde0:	strh	r1, [r0, #16]
   1cde4:	movw	r1, #56940	; 0xde6c
   1cde8:	movt	r1, #5
   1cdec:	strb	r2, [r1]
   1cdf0:	mov	r1, #1065353216	; 0x3f800000
   1cdf4:	str	r1, [r0, #28]
   1cdf8:	strh	r2, [r0, #18]
   1cdfc:	mov	r0, #1
   1ce00:	pop	{fp, pc}
   1ce04:	push	{r4, sl, fp, lr}
   1ce08:	add	fp, sp, #8
   1ce0c:	movw	r4, #56940	; 0xde6c
   1ce10:	movt	r4, #5
   1ce14:	ldrb	r0, [r4, #17]
   1ce18:	cmp	r0, #0
   1ce1c:	bne	1ce50 <__assert_fail@plt+0xa3d4>
   1ce20:	ldrb	r0, [r4, #16]
   1ce24:	cmp	r0, #0
   1ce28:	beq	1ce50 <__assert_fail@plt+0xa3d4>
   1ce2c:	movw	r1, #39772	; 0x9b5c
   1ce30:	mov	r0, #0
   1ce34:	mov	r2, #5
   1ce38:	movt	r1, #4
   1ce3c:	bl	1253c <dcgettext@plt>
   1ce40:	mov	r2, r0
   1ce44:	mov	r0, #0
   1ce48:	mov	r1, #0
   1ce4c:	bl	12674 <error@plt>
   1ce50:	movw	r1, #56532	; 0xdcd4
   1ce54:	mov	r0, #256	; 0x100
   1ce58:	movt	r1, #5
   1ce5c:	strh	r0, [r4]
   1ce60:	ldr	r0, [r1]
   1ce64:	cmp	r0, #0
   1ce68:	bne	1ce7c <__assert_fail@plt+0xa400>
   1ce6c:	movw	r0, #42480	; 0xa5f0
   1ce70:	movt	r0, #4
   1ce74:	add	r0, r0, #1296	; 0x510
   1ce78:	str	r0, [r1]
   1ce7c:	bl	180ec <__assert_fail@plt+0x5670>
   1ce80:	mov	r1, #0
   1ce84:	strh	r1, [r0, #18]
   1ce88:	mov	r1, #1065353216	; 0x3f800000
   1ce8c:	str	r1, [r0, #28]
   1ce90:	mov	r0, #1
   1ce94:	pop	{r4, sl, fp, pc}
   1ce98:	movw	r0, #56940	; 0xde6c
   1ce9c:	mov	r1, #256	; 0x100
   1cea0:	movt	r0, #5
   1cea4:	strh	r1, [r0]
   1cea8:	movw	r1, #56532	; 0xdcd4
   1ceac:	movt	r1, #5
   1ceb0:	ldr	r0, [r1]
   1ceb4:	cmp	r0, #0
   1ceb8:	bne	1cecc <__assert_fail@plt+0xa450>
   1cebc:	movw	r0, #42480	; 0xa5f0
   1cec0:	movt	r0, #4
   1cec4:	add	r0, r0, #1296	; 0x510
   1cec8:	str	r0, [r1]
   1cecc:	push	{fp, lr}
   1ced0:	mov	fp, sp
   1ced4:	bl	180ec <__assert_fail@plt+0x5670>
   1ced8:	mov	r1, #0
   1cedc:	strh	r1, [r0, #18]
   1cee0:	mov	r1, #1065353216	; 0x3f800000
   1cee4:	str	r1, [r0, #28]
   1cee8:	mov	r0, #1
   1ceec:	pop	{fp, pc}
   1cef0:	push	{fp, lr}
   1cef4:	mov	fp, sp
   1cef8:	bl	180ec <__assert_fail@plt+0x5670>
   1cefc:	movw	r1, #55050	; 0xd70a
   1cf00:	movt	r1, #15395	; 0x3c23
   1cf04:	str	r1, [r0, #28]
   1cf08:	mov	r0, #1
   1cf0c:	pop	{fp, pc}
   1cf10:	mov	r3, r2
   1cf14:	mov	r2, r1
   1cf18:	mov	r1, r0
   1cf1c:	movw	r0, #39886	; 0x9bce
   1cf20:	movt	r0, #4
   1cf24:	b	1ec78 <__assert_fail@plt+0xc1fc>
   1cf28:	push	{fp, lr}
   1cf2c:	mov	fp, sp
   1cf30:	bl	180ec <__assert_fail@plt+0x5670>
   1cf34:	ldr	r1, [r0]
   1cf38:	movw	r3, #19140	; 0x4ac4
   1cf3c:	add	r2, pc, #32
   1cf40:	movt	r3, #1
   1cf44:	cmp	r1, r3
   1cf48:	mov	r1, #0
   1cf4c:	addeq	r2, r2, #4
   1cf50:	str	r1, [r0, #16]
   1cf54:	vldr	s0, [r2]
   1cf58:	vstr	s0, [r0, #28]
   1cf5c:	mov	r0, #1
   1cf60:	pop	{fp, pc}
   1cf64:	svccc	0x00666666
   1cf68:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1cf6c:	mov	r3, r2
   1cf70:	mov	r2, r1
   1cf74:	mov	r1, r0
   1cf78:	movw	r0, #40740	; 0x9f24
   1cf7c:	movt	r0, #4
   1cf80:	b	1ec78 <__assert_fail@plt+0xc1fc>
   1cf84:	mov	r0, #0
   1cf88:	cmp	r1, #0
   1cf8c:	beq	1cfb8 <__assert_fail@plt+0xa53c>
   1cf90:	ldr	r3, [r2]
   1cf94:	ldr	r1, [r1, r3, lsl #2]
   1cf98:	cmp	r1, #0
   1cf9c:	bxeq	lr
   1cfa0:	add	r0, r3, #1
   1cfa4:	str	r0, [r2]
   1cfa8:	movw	r0, #56940	; 0xde6c
   1cfac:	movt	r0, #5
   1cfb0:	str	r1, [r0, #76]	; 0x4c
   1cfb4:	mov	r0, #1
   1cfb8:	bx	lr
   1cfbc:	push	{r4, r5, fp, lr}
   1cfc0:	add	fp, sp, #8
   1cfc4:	mov	r3, r0
   1cfc8:	mov	r0, #0
   1cfcc:	cmp	r1, #0
   1cfd0:	beq	1d018 <__assert_fail@plt+0xa59c>
   1cfd4:	ldr	r5, [r2]
   1cfd8:	ldr	r4, [r1, r5, lsl #2]
   1cfdc:	cmp	r4, #0
   1cfe0:	popeq	{r4, r5, fp, pc}
   1cfe4:	add	r0, r5, #1
   1cfe8:	str	r0, [r2]
   1cfec:	mov	r0, r3
   1cff0:	bl	180ec <__assert_fail@plt+0x5670>
   1cff4:	mov	r5, r0
   1cff8:	add	r1, r0, #40	; 0x28
   1cffc:	mov	r0, r4
   1d000:	bl	1f2a8 <__assert_fail@plt+0xc82c>
   1d004:	mov	r0, #1065353216	; 0x3f800000
   1d008:	str	r0, [r5, #28]
   1d00c:	movw	r0, #257	; 0x101
   1d010:	strh	r0, [r5, #16]
   1d014:	mov	r0, #1
   1d018:	pop	{r4, r5, fp, pc}
   1d01c:	movw	r0, #56940	; 0xde6c
   1d020:	movw	r1, #48780	; 0xbe8c
   1d024:	mov	r2, #1
   1d028:	movt	r0, #5
   1d02c:	movt	r1, #1
   1d030:	str	r1, [r0, #64]	; 0x40
   1d034:	movw	r1, #36112	; 0x8d10
   1d038:	strb	r2, [r0, #12]
   1d03c:	str	r2, [r0, #48]	; 0x30
   1d040:	movt	r1, #1
   1d044:	str	r1, [r0, #52]	; 0x34
   1d048:	ldrb	r1, [r0, #44]	; 0x2c
   1d04c:	tst	r1, #2
   1d050:	movwne	r1, #36460	; 0x8e6c
   1d054:	movtne	r1, #1
   1d058:	strne	r1, [r0, #52]	; 0x34
   1d05c:	movw	r1, #56532	; 0xdcd4
   1d060:	movt	r1, #5
   1d064:	ldr	r0, [r1]
   1d068:	cmp	r0, #0
   1d06c:	bne	1d080 <__assert_fail@plt+0xa604>
   1d070:	movw	r0, #42480	; 0xa5f0
   1d074:	movt	r0, #4
   1d078:	add	r0, r0, #1296	; 0x510
   1d07c:	str	r0, [r1]
   1d080:	push	{fp, lr}
   1d084:	mov	fp, sp
   1d088:	bl	180ec <__assert_fail@plt+0x5670>
   1d08c:	mov	r1, #0
   1d090:	strh	r1, [r0, #18]
   1d094:	mov	r1, #1065353216	; 0x3f800000
   1d098:	str	r1, [r0, #28]
   1d09c:	mov	r0, #1
   1d0a0:	pop	{fp, pc}
   1d0a4:	push	{r4, r5, fp, lr}
   1d0a8:	add	fp, sp, #8
   1d0ac:	mov	r3, r0
   1d0b0:	mov	r0, #0
   1d0b4:	cmp	r1, #0
   1d0b8:	beq	1d104 <__assert_fail@plt+0xa688>
   1d0bc:	ldr	r5, [r2]
   1d0c0:	ldr	r4, [r1, r5, lsl #2]
   1d0c4:	cmp	r4, #0
   1d0c8:	popeq	{r4, r5, fp, pc}
   1d0cc:	add	r0, r5, #1
   1d0d0:	mov	r1, r4
   1d0d4:	str	r0, [r2]
   1d0d8:	mov	r0, r3
   1d0dc:	bl	18090 <__assert_fail@plt+0x5614>
   1d0e0:	mov	r5, r0
   1d0e4:	add	r1, r0, #40	; 0x28
   1d0e8:	mov	r0, r4
   1d0ec:	bl	1f2a8 <__assert_fail@plt+0xc82c>
   1d0f0:	mov	r0, #1065353216	; 0x3f800000
   1d0f4:	str	r0, [r5, #28]
   1d0f8:	movw	r0, #257	; 0x101
   1d0fc:	str	r0, [r5, #16]
   1d100:	mov	r0, #1
   1d104:	pop	{r4, r5, fp, pc}
   1d108:	push	{r4, r5, fp, lr}
   1d10c:	add	fp, sp, #8
   1d110:	mov	r3, r0
   1d114:	mov	r0, #0
   1d118:	cmp	r1, #0
   1d11c:	beq	1d168 <__assert_fail@plt+0xa6ec>
   1d120:	ldr	r5, [r2]
   1d124:	ldr	r4, [r1, r5, lsl #2]
   1d128:	cmp	r4, #0
   1d12c:	popeq	{r4, r5, fp, pc}
   1d130:	add	r0, r5, #1
   1d134:	mov	r1, r4
   1d138:	str	r0, [r2]
   1d13c:	mov	r0, r3
   1d140:	bl	18090 <__assert_fail@plt+0x5614>
   1d144:	mov	r5, r0
   1d148:	add	r1, r0, #40	; 0x28
   1d14c:	mov	r0, r4
   1d150:	bl	1f2a8 <__assert_fail@plt+0xc82c>
   1d154:	mov	r0, #1065353216	; 0x3f800000
   1d158:	str	r0, [r5, #28]
   1d15c:	movw	r0, #257	; 0x101
   1d160:	str	r0, [r5, #16]
   1d164:	mov	r0, #1
   1d168:	pop	{r4, r5, fp, pc}
   1d16c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d170:	add	fp, sp, #24
   1d174:	sub	sp, sp, #24
   1d178:	ldr	r7, [r2]
   1d17c:	mov	r4, r2
   1d180:	cmp	r1, #0
   1d184:	beq	1d1e4 <__assert_fail@plt+0xa768>
   1d188:	mov	r5, r0
   1d18c:	ldr	r0, [r1, r7, lsl #2]
   1d190:	cmp	r0, #0
   1d194:	beq	1d1e4 <__assert_fail@plt+0xa768>
   1d198:	add	r2, r7, #1
   1d19c:	str	r2, [r4]
   1d1a0:	ldr	r6, [r1, r2, lsl #2]
   1d1a4:	cmp	r6, #0
   1d1a8:	beq	1d1e4 <__assert_fail@plt+0xa768>
   1d1ac:	add	r1, r7, #2
   1d1b0:	add	r8, sp, #4
   1d1b4:	str	r1, [r4]
   1d1b8:	mov	r1, r8
   1d1bc:	bl	1f2a8 <__assert_fail@plt+0xc82c>
   1d1c0:	ldr	r7, [r4]
   1d1c4:	mov	r0, r8
   1d1c8:	mov	r1, r5
   1d1cc:	mov	r2, r6
   1d1d0:	bl	1a178 <__assert_fail@plt+0x76fc>
   1d1d4:	mov	r1, r0
   1d1d8:	mov	r0, #1
   1d1dc:	cmp	r1, #0
   1d1e0:	bne	1d1ec <__assert_fail@plt+0xa770>
   1d1e4:	mov	r0, #0
   1d1e8:	str	r7, [r4]
   1d1ec:	sub	sp, fp, #24
   1d1f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d1f4:	push	{r4, r5, r6, sl, fp, lr}
   1d1f8:	add	fp, sp, #16
   1d1fc:	sub	sp, sp, #104	; 0x68
   1d200:	mov	r5, r0
   1d204:	mov	r0, #0
   1d208:	cmp	r1, #0
   1d20c:	beq	1d2e8 <__assert_fail@plt+0xa86c>
   1d210:	ldr	r3, [r2]
   1d214:	ldr	r4, [r1, r3, lsl #2]
   1d218:	cmp	r4, #0
   1d21c:	beq	1d2e8 <__assert_fail@plt+0xa86c>
   1d220:	movw	r6, #56940	; 0xde6c
   1d224:	add	r0, r3, #1
   1d228:	str	r0, [r2]
   1d22c:	movt	r6, #5
   1d230:	ldrh	r0, [r6, #68]	; 0x44
   1d234:	cmp	r0, #2
   1d238:	bcc	1d24c <__assert_fail@plt+0xa7d0>
   1d23c:	mov	r0, r4
   1d240:	bl	1bb80 <__assert_fail@plt+0x9104>
   1d244:	cmp	r0, #0
   1d248:	beq	1d2bc <__assert_fail@plt+0xa840>
   1d24c:	mov	r0, r5
   1d250:	mov	r1, r4
   1d254:	bl	18090 <__assert_fail@plt+0x5614>
   1d258:	movw	r1, #29730	; 0x7422
   1d25c:	mov	r5, r0
   1d260:	str	r4, [r0, #40]	; 0x28
   1d264:	mov	r2, sp
   1d268:	mov	r0, #3
   1d26c:	movt	r1, #4
   1d270:	bl	129e0 <__xstat64@plt>
   1d274:	cmp	r0, #0
   1d278:	beq	1d288 <__assert_fail@plt+0xa80c>
   1d27c:	vmov.f32	s0, #112	; 0x3f800000  1.0
   1d280:	vstr	s0, [r5, #28]
   1d284:	b	1d2e4 <__assert_fail@plt+0xa868>
   1d288:	movw	r1, #29730	; 0x7422
   1d28c:	mov	r0, sp
   1d290:	movt	r1, #4
   1d294:	bl	1b980 <__assert_fail@plt+0x8f04>
   1d298:	mov	r1, r0
   1d29c:	mov	r0, r4
   1d2a0:	bl	123d4 <strcmp@plt>
   1d2a4:	add	r1, pc, #100	; 0x64
   1d2a8:	cmp	r0, #0
   1d2ac:	addeq	r1, r1, #4
   1d2b0:	vldr	s0, [r1]
   1d2b4:	vstr	s0, [r5, #28]
   1d2b8:	b	1d2e4 <__assert_fail@plt+0xa868>
   1d2bc:	ldrb	r0, [r6, #44]	; 0x2c
   1d2c0:	tst	r0, #8
   1d2c4:	bne	1d2f0 <__assert_fail@plt+0xa874>
   1d2c8:	movw	r0, #39340	; 0x99ac
   1d2cc:	movt	r0, #4
   1d2d0:	bl	1bfe0 <__assert_fail@plt+0x9564>
   1d2d4:	bl	180ec <__assert_fail@plt+0x5670>
   1d2d8:	mov	r1, #0
   1d2dc:	str	r1, [r0, #28]
   1d2e0:	str	r1, [r0, #16]
   1d2e4:	mov	r0, #1
   1d2e8:	sub	sp, fp, #16
   1d2ec:	pop	{r4, r5, r6, sl, fp, pc}
   1d2f0:	movw	r0, #54600	; 0xd548
   1d2f4:	movw	r1, #40788	; 0x9f54
   1d2f8:	mov	r2, r4
   1d2fc:	movt	r0, #5
   1d300:	movt	r1, #4
   1d304:	ldr	r0, [r0]
   1d308:	bl	127c4 <fprintf@plt>
   1d30c:	b	1d2c8 <__assert_fail@plt+0xa84c>
   1d310:			; <UNDEFINED> instruction: 0x3e99999a
   1d314:	svccc	0x00333333
   1d318:	push	{r4, sl, fp, lr}
   1d31c:	add	fp, sp, #8
   1d320:	mov	r4, r2
   1d324:	mov	r2, r0
   1d328:	mov	r0, r1
   1d32c:	mov	r1, r4
   1d330:	bl	1f3a0 <__assert_fail@plt+0xc924>
   1d334:	cmp	r0, #0
   1d338:	beq	1d360 <__assert_fail@plt+0xa8e4>
   1d33c:	add	r1, pc, #48	; 0x30
   1d340:	ldrd	r2, [r0, #48]	; 0x30
   1d344:	subs	r2, r2, #100	; 0x64
   1d348:	sbcs	r2, r3, #0
   1d34c:	addcc	r1, r1, #4
   1d350:	vldr	s0, [r1]
   1d354:	vstr	s0, [r0, #28]
   1d358:	mov	r0, #1
   1d35c:	pop	{r4, sl, fp, pc}
   1d360:	ldr	r0, [r4]
   1d364:	sub	r0, r0, #1
   1d368:	str	r0, [r4]
   1d36c:	mov	r0, #0
   1d370:	pop	{r4, sl, fp, pc}
   1d374:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1d378:	svccc	0x007d70a4
   1d37c:	push	{r4, r5, r6, r7, fp, lr}
   1d380:	add	fp, sp, #16
   1d384:	sub	sp, sp, #8
   1d388:	mov	r5, r0
   1d38c:	mov	r0, #0
   1d390:	cmp	r1, #0
   1d394:	beq	1d440 <__assert_fail@plt+0xa9c4>
   1d398:	ldr	r3, [r2]
   1d39c:	ldr	r4, [r1, r3, lsl #2]
   1d3a0:	cmp	r4, #0
   1d3a4:	beq	1d440 <__assert_fail@plt+0xa9c4>
   1d3a8:	add	r0, r3, #1
   1d3ac:	str	r0, [r2]
   1d3b0:	mov	r0, r4
   1d3b4:	bl	12a64 <getgrnam@plt>
   1d3b8:	mov	r6, r0
   1d3bc:	bl	12368 <endgrent@plt>
   1d3c0:	cmp	r6, #0
   1d3c4:	beq	1d3d0 <__assert_fail@plt+0xa954>
   1d3c8:	ldr	r6, [r6, #8]
   1d3cc:	b	1d410 <__assert_fail@plt+0xa994>
   1d3d0:	movw	r1, #40848	; 0x9f90
   1d3d4:	mov	r0, r4
   1d3d8:	movt	r1, #4
   1d3dc:	bl	12a70 <strspn@plt>
   1d3e0:	cmp	r0, #0
   1d3e4:	beq	1d448 <__assert_fail@plt+0xa9cc>
   1d3e8:	mov	r6, r4
   1d3ec:	ldrb	r0, [r6, r0]!
   1d3f0:	cmp	r0, #0
   1d3f4:	bne	1d478 <__assert_fail@plt+0xa9fc>
   1d3f8:	movw	r0, #56940	; 0xde6c
   1d3fc:	movt	r0, #5
   1d400:	ldr	r1, [r0, #72]	; 0x48
   1d404:	mov	r0, r4
   1d408:	bl	22078 <__assert_fail@plt+0xf5fc>
   1d40c:	mov	r6, r0
   1d410:	mov	r0, r5
   1d414:	mov	r1, r4
   1d418:	bl	18090 <__assert_fail@plt+0x5614>
   1d41c:	ldrd	r2, [r0, #48]	; 0x30
   1d420:	add	r1, pc, #240	; 0xf0
   1d424:	str	r6, [r0, #40]	; 0x28
   1d428:	subs	r2, r2, #100	; 0x64
   1d42c:	sbcs	r2, r3, #0
   1d430:	addcc	r1, r1, #4
   1d434:	vldr	s0, [r1]
   1d438:	vstr	s0, [r0, #28]
   1d43c:	mov	r0, #1
   1d440:	sub	sp, fp, #16
   1d444:	pop	{r4, r5, r6, r7, fp, pc}
   1d448:	ldrb	r0, [r4]
   1d44c:	cmp	r0, #0
   1d450:	bne	1d4d4 <__assert_fail@plt+0xaa58>
   1d454:	movw	r1, #41024	; 0xa040
   1d458:	mov	r0, #0
   1d45c:	mov	r2, #5
   1d460:	movt	r1, #4
   1d464:	bl	1253c <dcgettext@plt>
   1d468:	mov	r2, r0
   1d46c:	mov	r0, #1
   1d470:	mov	r1, #0
   1d474:	bl	12674 <error@plt>
   1d478:	movw	r1, #40859	; 0x9f9b
   1d47c:	mov	r0, #0
   1d480:	mov	r2, #5
   1d484:	movt	r1, #4
   1d488:	bl	1253c <dcgettext@plt>
   1d48c:	movw	r7, #56940	; 0xde6c
   1d490:	mov	r5, r0
   1d494:	mov	r0, #0
   1d498:	mov	r2, r4
   1d49c:	movt	r7, #5
   1d4a0:	ldr	r1, [r7, #72]	; 0x48
   1d4a4:	bl	2c45c <__assert_fail@plt+0x199e0>
   1d4a8:	ldr	r1, [r7, #72]	; 0x48
   1d4ac:	mov	r4, r0
   1d4b0:	mov	r0, #1
   1d4b4:	mov	r2, r6
   1d4b8:	bl	2c45c <__assert_fail@plt+0x199e0>
   1d4bc:	str	r0, [sp]
   1d4c0:	mov	r0, #1
   1d4c4:	mov	r1, #0
   1d4c8:	mov	r2, r5
   1d4cc:	mov	r3, r4
   1d4d0:	bl	12674 <error@plt>
   1d4d4:	movw	r1, #40984	; 0xa018
   1d4d8:	mov	r0, #0
   1d4dc:	mov	r2, #5
   1d4e0:	movt	r1, #4
   1d4e4:	bl	1253c <dcgettext@plt>
   1d4e8:	mov	r5, r0
   1d4ec:	movw	r0, #56940	; 0xde6c
   1d4f0:	mov	r2, r4
   1d4f4:	movt	r0, #5
   1d4f8:	ldr	r1, [r0, #72]	; 0x48
   1d4fc:	mov	r0, #0
   1d500:	bl	2c45c <__assert_fail@plt+0x199e0>
   1d504:	mov	r3, r0
   1d508:	mov	r0, #1
   1d50c:	mov	r1, #0
   1d510:	mov	r2, r5
   1d514:	bl	12674 <error@plt>
   1d518:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1d51c:	svccc	0x007d70a4
   1d520:	movw	r0, #56940	; 0xde6c
   1d524:	mov	r1, #1
   1d528:	movt	r0, #5
   1d52c:	strb	r1, [r0, #14]
   1d530:	movw	r1, #56532	; 0xdcd4
   1d534:	movt	r1, #5
   1d538:	ldr	r0, [r1]
   1d53c:	cmp	r0, #0
   1d540:	bne	1d554 <__assert_fail@plt+0xaad8>
   1d544:	movw	r0, #42480	; 0xa5f0
   1d548:	movt	r0, #4
   1d54c:	add	r0, r0, #1296	; 0x510
   1d550:	str	r0, [r1]
   1d554:	push	{fp, lr}
   1d558:	mov	fp, sp
   1d55c:	bl	180ec <__assert_fail@plt+0x5670>
   1d560:	mov	r1, #0
   1d564:	strh	r1, [r0, #18]
   1d568:	mov	r1, #1065353216	; 0x3f800000
   1d56c:	str	r1, [r0, #28]
   1d570:	mov	r0, #1
   1d574:	pop	{fp, pc}
   1d578:	push	{r4, r5, fp, lr}
   1d57c:	add	fp, sp, #8
   1d580:	mov	r3, r0
   1d584:	mov	r0, #0
   1d588:	cmp	r1, #0
   1d58c:	beq	1d5e4 <__assert_fail@plt+0xab68>
   1d590:	ldr	r5, [r2]
   1d594:	ldr	r4, [r1, r5, lsl #2]
   1d598:	cmp	r4, #0
   1d59c:	popeq	{r4, r5, fp, pc}
   1d5a0:	add	r0, r5, #1
   1d5a4:	mov	r1, r4
   1d5a8:	str	r0, [r2]
   1d5ac:	mov	r0, r3
   1d5b0:	bl	18090 <__assert_fail@plt+0x5614>
   1d5b4:	movw	r1, #41080	; 0xa078
   1d5b8:	mov	r5, r0
   1d5bc:	str	r4, [r0, #40]	; 0x28
   1d5c0:	mov	r0, r4
   1d5c4:	movt	r1, #4
   1d5c8:	bl	129b0 <strpbrk@plt>
   1d5cc:	cmp	r0, #0
   1d5d0:	add	r1, pc, #16
   1d5d4:	mov	r0, #1
   1d5d8:	addeq	r1, r1, #4
   1d5dc:	vldr	s0, [r1]
   1d5e0:	vstr	s0, [r5, #28]
   1d5e4:	pop	{r4, r5, fp, pc}
   1d5e8:	stccc	7, cr13, [r3, #44]!	; 0x2c
   1d5ec:	stccc	7, cr13, [r3], #-44	; 0xffffffd4
   1d5f0:	push	{r4, r5, r6, sl, fp, lr}
   1d5f4:	add	fp, sp, #16
   1d5f8:	mov	r6, r2
   1d5fc:	mov	r4, r1
   1d600:	mov	r5, r0
   1d604:	bl	1f4f4 <__assert_fail@plt+0xca78>
   1d608:	mov	r0, #0
   1d60c:	cmp	r4, #0
   1d610:	beq	1d688 <__assert_fail@plt+0xac0c>
   1d614:	ldr	r1, [r6]
   1d618:	ldr	r4, [r4, r1, lsl #2]
   1d61c:	cmp	r4, #0
   1d620:	popeq	{r4, r5, r6, sl, fp, pc}
   1d624:	add	r0, r1, #1
   1d628:	movw	r1, #41091	; 0xa083
   1d62c:	mov	r2, r4
   1d630:	str	r0, [r6]
   1d634:	movw	r0, #41084	; 0xa07c
   1d638:	movt	r1, #4
   1d63c:	movt	r0, #4
   1d640:	bl	1f59c <__assert_fail@plt+0xcb20>
   1d644:	mov	r0, r5
   1d648:	mov	r1, r4
   1d64c:	bl	18090 <__assert_fail@plt+0x5614>
   1d650:	movw	r1, #41080	; 0xa078
   1d654:	mov	r5, r0
   1d658:	mov	r0, #0
   1d65c:	strh	r0, [r5, #18]
   1d660:	movt	r1, #4
   1d664:	mov	r0, r4
   1d668:	str	r4, [r5, #40]	; 0x28
   1d66c:	bl	129b0 <strpbrk@plt>
   1d670:	cmp	r0, #0
   1d674:	add	r1, pc, #16
   1d678:	mov	r0, #1
   1d67c:	addeq	r1, r1, #4
   1d680:	vldr	s0, [r1]
   1d684:	vstr	s0, [r5, #28]
   1d688:	pop	{r4, r5, r6, sl, fp, pc}
   1d68c:	svccc	0x004ccccd
   1d690:	stclcc	12, cr12, [ip, #820]	; 0x334
   1d694:	push	{r4, sl, fp, lr}
   1d698:	add	fp, sp, #8
   1d69c:	mov	r4, r2
   1d6a0:	mov	r2, r0
   1d6a4:	mov	r0, r1
   1d6a8:	mov	r1, r4
   1d6ac:	bl	1f3a0 <__assert_fail@plt+0xc924>
   1d6b0:	cmp	r0, #0
   1d6b4:	beq	1d6dc <__assert_fail@plt+0xac60>
   1d6b8:	movw	r2, #14269	; 0x37bd
   1d6bc:	mov	r1, r0
   1d6c0:	mov	r0, #1
   1d6c4:	movt	r2, #13702	; 0x3586
   1d6c8:	strb	r0, [r1, #20]
   1d6cc:	str	r2, [r1, #28]
   1d6d0:	mov	r2, #0
   1d6d4:	strh	r2, [r1, #18]
   1d6d8:	pop	{r4, sl, fp, pc}
   1d6dc:	ldr	r0, [r4]
   1d6e0:	sub	r0, r0, #1
   1d6e4:	str	r0, [r4]
   1d6e8:	mov	r0, #0
   1d6ec:	pop	{r4, sl, fp, pc}
   1d6f0:	push	{fp, lr}
   1d6f4:	mov	fp, sp
   1d6f8:	sub	sp, sp, #8
   1d6fc:	movw	r3, #17568	; 0x44a0
   1d700:	movt	r3, #1
   1d704:	str	r3, [sp]
   1d708:	movw	r3, #39182	; 0x990e
   1d70c:	movt	r3, #4
   1d710:	bl	1f650 <__assert_fail@plt+0xcbd4>
   1d714:	mov	sp, fp
   1d718:	pop	{fp, pc}
   1d71c:	mov	ip, r2
   1d720:	mov	r2, r0
   1d724:	movw	r0, #56940	; 0xde6c
   1d728:	movt	r0, #5
   1d72c:	ldr	r0, [r0, #60]	; 0x3c
   1d730:	orr	r3, r0, #4194304	; 0x400000
   1d734:	mov	r0, r1
   1d738:	mov	r1, ip
   1d73c:	b	1f788 <__assert_fail@plt+0xcd0c>
   1d740:	push	{fp, lr}
   1d744:	mov	fp, sp
   1d748:	sub	sp, sp, #8
   1d74c:	movw	r3, #17568	; 0x44a0
   1d750:	movt	r3, #1
   1d754:	str	r3, [sp]
   1d758:	movw	r3, #41092	; 0xa084
   1d75c:	movt	r3, #4
   1d760:	bl	1f650 <__assert_fail@plt+0xcbd4>
   1d764:	mov	sp, fp
   1d768:	pop	{fp, pc}
   1d76c:	push	{r4, sl, fp, lr}
   1d770:	add	fp, sp, #8
   1d774:	mov	r4, r2
   1d778:	mov	r2, r0
   1d77c:	mov	r0, r1
   1d780:	mov	r1, r4
   1d784:	bl	1f3a0 <__assert_fail@plt+0xc924>
   1d788:	cmp	r0, #0
   1d78c:	beq	1d7b0 <__assert_fail@plt+0xad34>
   1d790:	ldr	r2, [r0, #48]	; 0x30
   1d794:	ldr	r1, [r0, #52]	; 0x34
   1d798:	eor	r3, r2, #1
   1d79c:	orrs	r3, r3, r1
   1d7a0:	bne	1d7c4 <__assert_fail@plt+0xad48>
   1d7a4:	movw	r1, #28836	; 0x70a4
   1d7a8:	movt	r1, #16253	; 0x3f7d
   1d7ac:	b	1d7e4 <__assert_fail@plt+0xad68>
   1d7b0:	ldr	r0, [r4]
   1d7b4:	sub	r0, r0, #1
   1d7b8:	str	r0, [r4]
   1d7bc:	mov	r0, #0
   1d7c0:	pop	{r4, sl, fp, pc}
   1d7c4:	eor	r2, r2, #2
   1d7c8:	orrs	r1, r2, r1
   1d7cc:	bne	1d7dc <__assert_fail@plt+0xad60>
   1d7d0:	movw	r1, #55050	; 0xd70a
   1d7d4:	movt	r1, #15395	; 0x3c23
   1d7d8:	b	1d7e4 <__assert_fail@plt+0xad68>
   1d7dc:	movw	r1, #4719	; 0x126f
   1d7e0:	movt	r1, #14979	; 0x3a83
   1d7e4:	str	r1, [r0, #28]
   1d7e8:	mov	r0, #1
   1d7ec:	pop	{r4, sl, fp, pc}
   1d7f0:	push	{r4, r5, r6, sl, fp, lr}
   1d7f4:	add	fp, sp, #16
   1d7f8:	mov	r5, r2
   1d7fc:	mov	r6, r1
   1d800:	mov	r4, r0
   1d804:	bl	1f4f4 <__assert_fail@plt+0xca78>
   1d808:	mov	r0, #0
   1d80c:	cmp	r6, #0
   1d810:	beq	1d868 <__assert_fail@plt+0xadec>
   1d814:	ldr	r1, [r5]
   1d818:	ldr	r6, [r6, r1, lsl #2]
   1d81c:	cmp	r6, #0
   1d820:	popeq	{r4, r5, r6, sl, fp, pc}
   1d824:	add	r0, r1, #1
   1d828:	mov	r1, r6
   1d82c:	str	r0, [r5]
   1d830:	mov	r0, r4
   1d834:	bl	18090 <__assert_fail@plt+0x5614>
   1d838:	movw	r1, #41080	; 0xa078
   1d83c:	mov	r4, r0
   1d840:	str	r6, [r0, #40]	; 0x28
   1d844:	mov	r0, r6
   1d848:	movt	r1, #4
   1d84c:	bl	129b0 <strpbrk@plt>
   1d850:	cmp	r0, #0
   1d854:	add	r1, pc, #16
   1d858:	mov	r0, #1
   1d85c:	addeq	r1, r1, #4
   1d860:	vldr	s0, [r1]
   1d864:	vstr	s0, [r4, #28]
   1d868:	pop	{r4, r5, r6, sl, fp, pc}
   1d86c:	stccc	7, cr13, [r3, #44]!	; 0x2c
   1d870:	stccc	7, cr13, [r3], #-44	; 0xffffffd4
   1d874:	push	{r4, sl, fp, lr}
   1d878:	add	fp, sp, #8
   1d87c:	bl	180ec <__assert_fail@plt+0x5670>
   1d880:	mov	r4, r0
   1d884:	add	r1, r0, #40	; 0x28
   1d888:	movw	r0, #40776	; 0x9f48
   1d88c:	movt	r0, #4
   1d890:	bl	1f2a8 <__assert_fail@plt+0xc82c>
   1d894:	mov	r0, #1065353216	; 0x3f800000
   1d898:	str	r0, [r4, #28]
   1d89c:	movw	r0, #257	; 0x101
   1d8a0:	strh	r0, [r4, #16]
   1d8a4:	mov	r0, #1
   1d8a8:	pop	{r4, sl, fp, pc}
   1d8ac:	mov	r0, r1
   1d8b0:	movw	r1, #56940	; 0xde6c
   1d8b4:	mov	r3, r2
   1d8b8:	movt	r1, #5
   1d8bc:	add	r2, r1, #4
   1d8c0:	mov	r1, r3
   1d8c4:	b	1f8c0 <__assert_fail@plt+0xce44>
   1d8c8:	mov	r0, r1
   1d8cc:	movw	r1, #56940	; 0xde6c
   1d8d0:	mov	r3, r2
   1d8d4:	movt	r1, #5
   1d8d8:	add	r2, r1, #8
   1d8dc:	mov	r1, r3
   1d8e0:	b	1f8c0 <__assert_fail@plt+0xce44>
   1d8e4:	nop	{0}
   1d8e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d8ec:	add	fp, sp, #28
   1d8f0:	sub	sp, sp, #28
   1d8f4:	mov	r4, #0
   1d8f8:	cmp	r1, #0
   1d8fc:	beq	1d9d0 <__assert_fail@plt+0xaf54>
   1d900:	ldr	r9, [r2]
   1d904:	mov	r5, r2
   1d908:	ldr	r7, [r1, r9, lsl #2]
   1d90c:	cmp	r7, #0
   1d910:	beq	1d9d0 <__assert_fail@plt+0xaf54>
   1d914:	movw	sl, #56940	; 0xde6c
   1d918:	mov	r8, r0
   1d91c:	add	r0, r9, #1
   1d920:	movw	r1, #39373	; 0x99cd
   1d924:	vldr	d0, [pc, #180]	; 1d9e0 <__assert_fail@plt+0xaf64>
   1d928:	add	r6, sp, #8
   1d92c:	str	r0, [r5]
   1d930:	mov	r0, #3
   1d934:	movt	sl, #5
   1d938:	movt	r1, #4
   1d93c:	str	r0, [sp, #8]
   1d940:	ldr	r0, [sl, #28]
   1d944:	ldr	r3, [sl, #32]
   1d948:	str	r1, [sp]
   1d94c:	movw	r1, #20864	; 0x5180
   1d950:	movt	r1, #1
   1d954:	add	r2, r0, r1
   1d958:	mov	r0, r7
   1d95c:	mov	r1, r6
   1d960:	bl	1eb08 <__assert_fail@plt+0xc08c>
   1d964:	cmp	r0, #0
   1d968:	beq	1d9cc <__assert_fail@plt+0xaf50>
   1d96c:	mov	r0, r8
   1d970:	mov	r1, r7
   1d974:	bl	18090 <__assert_fail@plt+0x5614>
   1d978:	mov	r1, #8
   1d97c:	movw	r3, #10111	; 0x277f
   1d980:	vldr	s0, [pc, #104]	; 1d9f0 <__assert_fail@plt+0xaf74>
   1d984:	mov	r4, #1
   1d988:	vld1.64	{d16-d17}, [r6], r1
   1d98c:	add	r1, r0, #40	; 0x28
   1d990:	movt	r3, #133	; 0x85
   1d994:	vst1.64	{d16-d17}, [r1]
   1d998:	ldr	r1, [r6]
   1d99c:	ldr	r2, [sl, #28]
   1d9a0:	sub	r1, r2, r1
   1d9a4:	add	r2, pc, #60	; 0x3c
   1d9a8:	cmp	r1, r3
   1d9ac:	addgt	r2, r2, #4
   1d9b0:	vldr	s2, [r2]
   1d9b4:	movw	r2, #20864	; 0x5180
   1d9b8:	movt	r2, #1
   1d9bc:	cmp	r1, r2
   1d9c0:	vselge.f32	s0, s2, s0
   1d9c4:	vstr	s0, [r0, #28]
   1d9c8:	b	1d9d0 <__assert_fail@plt+0xaf54>
   1d9cc:	str	r9, [r5]
   1d9d0:	mov	r0, r4
   1d9d4:	sub	sp, fp, #28
   1d9d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d9dc:	nop	{0}
   1d9e0:	andeq	r0, r0, r0
   1d9e4:	submi	r0, lr, r0
   1d9e8:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1d9ec:			; <UNDEFINED> instruction: 0x3e99999a
   1d9f0:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1d9f4:	movw	r0, #56940	; 0xde6c
   1d9f8:	mov	r1, #1
   1d9fc:	movt	r0, #5
   1da00:	strb	r1, [r0, #13]
   1da04:	movw	r1, #56532	; 0xdcd4
   1da08:	movt	r1, #5
   1da0c:	ldr	r0, [r1]
   1da10:	cmp	r0, #0
   1da14:	bne	1da28 <__assert_fail@plt+0xafac>
   1da18:	movw	r0, #42480	; 0xa5f0
   1da1c:	movt	r0, #4
   1da20:	add	r0, r0, #1296	; 0x510
   1da24:	str	r0, [r1]
   1da28:	push	{fp, lr}
   1da2c:	mov	fp, sp
   1da30:	bl	180ec <__assert_fail@plt+0x5670>
   1da34:	mov	r1, #0
   1da38:	strh	r1, [r0, #18]
   1da3c:	mov	r1, #1065353216	; 0x3f800000
   1da40:	str	r1, [r0, #28]
   1da44:	mov	r0, #1
   1da48:	pop	{fp, pc}
   1da4c:	push	{r4, r5, fp, lr}
   1da50:	add	fp, sp, #8
   1da54:	mov	r5, r0
   1da58:	mov	r0, #0
   1da5c:	cmp	r1, #0
   1da60:	beq	1dadc <__assert_fail@plt+0xb060>
   1da64:	ldr	r3, [r2]
   1da68:	ldr	r4, [r1, r3, lsl #2]
   1da6c:	cmp	r4, #0
   1da70:	popeq	{r4, r5, fp, pc}
   1da74:	add	r0, r3, #1
   1da78:	str	r0, [r2]
   1da7c:	bl	1f4f4 <__assert_fail@plt+0xca78>
   1da80:	movw	r0, #41517	; 0xa22d
   1da84:	movw	r1, #41523	; 0xa233
   1da88:	mov	r2, r4
   1da8c:	movt	r0, #4
   1da90:	movt	r1, #4
   1da94:	bl	1f59c <__assert_fail@plt+0xcb20>
   1da98:	mov	r0, r5
   1da9c:	mov	r1, r4
   1daa0:	bl	18090 <__assert_fail@plt+0x5614>
   1daa4:	movw	r1, #41080	; 0xa078
   1daa8:	mov	r5, r0
   1daac:	mov	r0, #0
   1dab0:	strh	r0, [r5, #18]
   1dab4:	movt	r1, #4
   1dab8:	mov	r0, r4
   1dabc:	str	r4, [r5, #40]	; 0x28
   1dac0:	bl	129b0 <strpbrk@plt>
   1dac4:	cmp	r0, #0
   1dac8:	add	r1, pc, #16
   1dacc:	mov	r0, #1
   1dad0:	addeq	r1, r1, #4
   1dad4:	vldr	s0, [r1]
   1dad8:	vstr	s0, [r5, #28]
   1dadc:	pop	{r4, r5, fp, pc}
   1dae0:	svccc	0x004ccccd
   1dae4:	stclcc	12, cr12, [ip, #820]	; 0x334
   1dae8:	push	{r4, r5, r6, sl, fp, lr}
   1daec:	add	fp, sp, #16
   1daf0:	sub	sp, sp, #104	; 0x68
   1daf4:	mov	r4, r0
   1daf8:	mov	r0, sp
   1dafc:	mov	r6, r2
   1db00:	mov	r5, r1
   1db04:	bl	18534 <__assert_fail@plt+0x5ab8>
   1db08:	mov	r0, #0
   1db0c:	cmp	r5, #0
   1db10:	beq	1dbb8 <__assert_fail@plt+0xb13c>
   1db14:	ldr	r1, [r6]
   1db18:	ldr	r5, [r5, r1, lsl #2]
   1db1c:	cmp	r5, #0
   1db20:	beq	1dbb8 <__assert_fail@plt+0xb13c>
   1db24:	add	r0, r1, #1
   1db28:	mov	r1, sp
   1db2c:	str	r0, [r6]
   1db30:	movw	r6, #56940	; 0xde6c
   1db34:	mov	r0, r5
   1db38:	movt	r6, #5
   1db3c:	ldr	r2, [r6, #52]	; 0x34
   1db40:	blx	r2
   1db44:	cmp	r0, #0
   1db48:	bne	1dbc0 <__assert_fail@plt+0xb144>
   1db4c:	mov	r0, r4
   1db50:	mov	r1, r5
   1db54:	bl	18090 <__assert_fail@plt+0x5614>
   1db58:	ldr	r1, [sp, #80]	; 0x50
   1db5c:	ldr	r2, [sp, #84]	; 0x54
   1db60:	mov	r3, #3
   1db64:	mov	r5, #0
   1db68:	vldr	s0, [pc, #104]	; 1dbd8 <__assert_fail@plt+0xb15c>
   1db6c:	str	r3, [r0, #40]	; 0x28
   1db70:	str	r5, [r0, #44]	; 0x2c
   1db74:	movw	r3, #10111	; 0x277f
   1db78:	movt	r3, #133	; 0x85
   1db7c:	str	r1, [r0, #48]	; 0x30
   1db80:	str	r2, [r0, #52]	; 0x34
   1db84:	ldr	r1, [r6, #28]
   1db88:	ldr	r2, [sp, #80]	; 0x50
   1db8c:	sub	r1, r1, r2
   1db90:	add	r2, pc, #56	; 0x38
   1db94:	cmp	r1, r3
   1db98:	addgt	r2, r2, #4
   1db9c:	vldr	s2, [r2]
   1dba0:	movw	r2, #20864	; 0x5180
   1dba4:	movt	r2, #1
   1dba8:	cmp	r1, r2
   1dbac:	vselge.f32	s0, s2, s0
   1dbb0:	vstr	s0, [r0, #28]
   1dbb4:	mov	r0, #1
   1dbb8:	sub	sp, fp, #16
   1dbbc:	pop	{r4, r5, r6, sl, fp, pc}
   1dbc0:	bl	127d0 <__errno_location@plt>
   1dbc4:	ldr	r0, [r0]
   1dbc8:	mov	r1, r5
   1dbcc:	bl	19a1c <__assert_fail@plt+0x6fa0>
   1dbd0:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1dbd4:			; <UNDEFINED> instruction: 0x3e99999a
   1dbd8:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1dbdc:	movw	r0, #56940	; 0xde6c
   1dbe0:	mov	r1, #1
   1dbe4:	movt	r0, #5
   1dbe8:	strb	r1, [r0, #12]
   1dbec:	movw	r1, #56532	; 0xdcd4
   1dbf0:	movt	r1, #5
   1dbf4:	ldr	r0, [r1]
   1dbf8:	cmp	r0, #0
   1dbfc:	bne	1dc10 <__assert_fail@plt+0xb194>
   1dc00:	movw	r0, #42480	; 0xa5f0
   1dc04:	movt	r0, #4
   1dc08:	add	r0, r0, #1296	; 0x510
   1dc0c:	str	r0, [r1]
   1dc10:	push	{fp, lr}
   1dc14:	mov	fp, sp
   1dc18:	bl	180ec <__assert_fail@plt+0x5670>
   1dc1c:	mov	r1, #0
   1dc20:	strh	r1, [r0, #18]
   1dc24:	mov	r1, #1065353216	; 0x3f800000
   1dc28:	str	r1, [r0, #28]
   1dc2c:	mov	r0, #1
   1dc30:	pop	{fp, pc}
   1dc34:	push	{fp, lr}
   1dc38:	mov	fp, sp
   1dc3c:	mov	r1, #0
   1dc40:	bl	18090 <__assert_fail@plt+0x5614>
   1dc44:	movw	r1, #46871	; 0xb717
   1dc48:	movt	r1, #14545	; 0x38d1
   1dc4c:	str	r1, [r0, #28]
   1dc50:	mov	r0, #1
   1dc54:	pop	{fp, pc}
   1dc58:	push	{fp, lr}
   1dc5c:	mov	fp, sp
   1dc60:	bl	180ec <__assert_fail@plt+0x5670>
   1dc64:	movw	r1, #4719	; 0x126f
   1dc68:	movt	r1, #14979	; 0x3a83
   1dc6c:	str	r1, [r0, #28]
   1dc70:	mov	r0, #1
   1dc74:	pop	{fp, pc}
   1dc78:	push	{r4, sl, fp, lr}
   1dc7c:	add	fp, sp, #8
   1dc80:	movw	r0, #56940	; 0xde6c
   1dc84:	movw	r1, #56532	; 0xdcd4
   1dc88:	mov	r4, #0
   1dc8c:	movt	r0, #5
   1dc90:	movt	r1, #5
   1dc94:	strb	r4, [r0, #14]
   1dc98:	ldr	r0, [r1]
   1dc9c:	cmp	r0, #0
   1dca0:	bne	1dcb4 <__assert_fail@plt+0xb238>
   1dca4:	movw	r0, #42480	; 0xa5f0
   1dca8:	movt	r0, #4
   1dcac:	add	r0, r0, #1296	; 0x510
   1dcb0:	str	r0, [r1]
   1dcb4:	bl	180ec <__assert_fail@plt+0x5670>
   1dcb8:	mov	r1, #1065353216	; 0x3f800000
   1dcbc:	strh	r4, [r0, #18]
   1dcc0:	str	r1, [r0, #28]
   1dcc4:	mov	r0, #1
   1dcc8:	pop	{r4, sl, fp, pc}
   1dccc:	push	{r4, sl, fp, lr}
   1dcd0:	add	fp, sp, #8
   1dcd4:	movw	r0, #56940	; 0xde6c
   1dcd8:	movw	r1, #56532	; 0xdcd4
   1dcdc:	mov	r4, #0
   1dce0:	movt	r0, #5
   1dce4:	movt	r1, #5
   1dce8:	strb	r4, [r0, #16]
   1dcec:	ldr	r0, [r1]
   1dcf0:	cmp	r0, #0
   1dcf4:	bne	1dd08 <__assert_fail@plt+0xb28c>
   1dcf8:	movw	r0, #42480	; 0xa5f0
   1dcfc:	movt	r0, #4
   1dd00:	add	r0, r0, #1296	; 0x510
   1dd04:	str	r0, [r1]
   1dd08:	bl	180ec <__assert_fail@plt+0x5670>
   1dd0c:	mov	r1, #1065353216	; 0x3f800000
   1dd10:	strh	r4, [r0, #18]
   1dd14:	str	r1, [r0, #28]
   1dd18:	mov	r0, #1
   1dd1c:	pop	{r4, sl, fp, pc}
   1dd20:	movw	r0, #56940	; 0xde6c
   1dd24:	mov	r1, #1
   1dd28:	movt	r0, #5
   1dd2c:	strb	r1, [r0, #16]
   1dd30:	movw	r1, #56532	; 0xdcd4
   1dd34:	movt	r1, #5
   1dd38:	ldr	r0, [r1]
   1dd3c:	cmp	r0, #0
   1dd40:	bne	1dd54 <__assert_fail@plt+0xb2d8>
   1dd44:	movw	r0, #42480	; 0xa5f0
   1dd48:	movt	r0, #4
   1dd4c:	add	r0, r0, #1296	; 0x510
   1dd50:	str	r0, [r1]
   1dd54:	push	{fp, lr}
   1dd58:	mov	fp, sp
   1dd5c:	bl	180ec <__assert_fail@plt+0x5670>
   1dd60:	mov	r1, #0
   1dd64:	strh	r1, [r0, #18]
   1dd68:	mov	r1, #1065353216	; 0x3f800000
   1dd6c:	str	r1, [r0, #28]
   1dd70:	mov	r0, #1
   1dd74:	pop	{fp, pc}
   1dd78:	push	{fp, lr}
   1dd7c:	mov	fp, sp
   1dd80:	bl	17b1c <__assert_fail@plt+0x50a0>
   1dd84:	movw	r1, #18908	; 0x49dc
   1dd88:	mov	r2, #3
   1dd8c:	mov	r3, #2
   1dd90:	movt	r1, #1
   1dd94:	str	r1, [r0]
   1dd98:	mov	r1, #0
   1dd9c:	strd	r2, [r0, #8]
   1dda0:	strh	r1, [r0, #18]
   1dda4:	mov	r0, #1
   1dda8:	pop	{fp, pc}
   1ddac:	mov	r3, r2
   1ddb0:	mov	r2, r1
   1ddb4:	mov	r1, r0
   1ddb8:	movw	r0, #29604	; 0x73a4
   1ddbc:	movt	r0, #4
   1ddc0:	b	1ec78 <__assert_fail@plt+0xc1fc>
   1ddc4:	mov	r3, r2
   1ddc8:	mov	r2, r1
   1ddcc:	mov	r1, r0
   1ddd0:	movw	r0, #27220	; 0x6a54
   1ddd4:	movt	r0, #4
   1ddd8:	b	1ec78 <__assert_fail@plt+0xc1fc>
   1dddc:	push	{fp, lr}
   1dde0:	mov	fp, sp
   1dde4:	sub	sp, sp, #8
   1dde8:	movw	r3, #18984	; 0x4a28
   1ddec:	movt	r3, #1
   1ddf0:	str	r3, [sp]
   1ddf4:	movw	r3, #39183	; 0x990f
   1ddf8:	movt	r3, #4
   1ddfc:	bl	1f650 <__assert_fail@plt+0xcbd4>
   1de00:	mov	sp, fp
   1de04:	pop	{fp, pc}
   1de08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de0c:	add	fp, sp, #28
   1de10:	sub	sp, sp, #4
   1de14:	vpush	{d8}
   1de18:	sub	sp, sp, #8
   1de1c:	mov	r6, #0
   1de20:	cmp	r1, #0
   1de24:	beq	1df58 <__assert_fail@plt+0xb4dc>
   1de28:	mov	r8, r0
   1de2c:	ldr	r0, [r2]
   1de30:	ldr	r4, [r1, r0, lsl #2]
   1de34:	cmp	r4, #0
   1de38:	beq	1df58 <__assert_fail@plt+0xb4dc>
   1de3c:	add	r0, r0, #1
   1de40:	str	r0, [r2]
   1de44:	ldrb	r0, [r4]
   1de48:	cmp	r0, #45	; 0x2d
   1de4c:	beq	1de68 <__assert_fail@plt+0xb3ec>
   1de50:	cmp	r0, #47	; 0x2f
   1de54:	bne	1de78 <__assert_fail@plt+0xb3fc>
   1de58:	vldr	s16, [pc, #340]	; 1dfb4 <__assert_fail@plt+0xb538>
   1de5c:	mov	r0, #1
   1de60:	mov	sl, #1
   1de64:	b	1de84 <__assert_fail@plt+0xb408>
   1de68:	vldr	s16, [pc, #320]	; 1dfb0 <__assert_fail@plt+0xb534>
   1de6c:	mov	sl, #0
   1de70:	mov	r0, #1
   1de74:	b	1de84 <__assert_fail@plt+0xb408>
   1de78:	vldr	s16, [pc, #312]	; 1dfb8 <__assert_fail@plt+0xb53c>
   1de7c:	mov	sl, #2
   1de80:	mov	r0, #0
   1de84:	add	r0, r4, r0
   1de88:	bl	25d50 <__assert_fail@plt+0x132d4>
   1de8c:	cmp	r0, #0
   1de90:	beq	1df6c <__assert_fail@plt+0xb4f0>
   1de94:	mov	r7, r0
   1de98:	ldrb	r0, [r4]
   1de9c:	cmp	r0, #43	; 0x2b
   1dea0:	bne	1deb4 <__assert_fail@plt+0xb438>
   1dea4:	ldrb	r0, [r4, #1]
   1dea8:	and	r0, r0, #248	; 0xf8
   1deac:	cmp	r0, #48	; 0x30
   1deb0:	beq	1df6c <__assert_fail@plt+0xb4f0>
   1deb4:	mov	r5, #0
   1deb8:	mov	r0, #0
   1debc:	mov	r1, #0
   1dec0:	mov	r2, #0
   1dec4:	mov	r3, r7
   1dec8:	str	r5, [sp]
   1decc:	bl	261ec <__assert_fail@plt+0x13770>
   1ded0:	mov	r9, r0
   1ded4:	mov	r0, #0
   1ded8:	mov	r1, #1
   1dedc:	mov	r2, #0
   1dee0:	mov	r3, r7
   1dee4:	str	r5, [sp]
   1dee8:	mov	r6, #1
   1deec:	bl	261ec <__assert_fail@plt+0x13770>
   1def0:	mov	r5, r0
   1def4:	mov	r0, r7
   1def8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   1defc:	orrs	r0, r5, r9
   1df00:	ldrbeq	r0, [r4]
   1df04:	cmpeq	r0, #47	; 0x2f
   1df08:	bne	1df3c <__assert_fail@plt+0xb4c0>
   1df0c:	movw	r1, #41550	; 0xa24e
   1df10:	mov	r0, #0
   1df14:	mov	r2, #5
   1df18:	mov	sl, #0
   1df1c:	movt	r1, #4
   1df20:	bl	1253c <dcgettext@plt>
   1df24:	mov	r2, r0
   1df28:	mov	r0, #0
   1df2c:	mov	r1, #0
   1df30:	mov	r3, r4
   1df34:	bl	12674 <error@plt>
   1df38:	vldr	s16, [pc, #124]	; 1dfbc <__assert_fail@plt+0xb540>
   1df3c:	mov	r0, r8
   1df40:	mov	r1, r4
   1df44:	bl	18090 <__assert_fail@plt+0x5614>
   1df48:	vstr	s16, [r0, #28]
   1df4c:	str	sl, [r0, #40]	; 0x28
   1df50:	str	r9, [r0, #44]	; 0x2c
   1df54:	str	r5, [r0, #48]	; 0x30
   1df58:	mov	r0, r6
   1df5c:	sub	sp, fp, #40	; 0x28
   1df60:	vpop	{d8}
   1df64:	add	sp, sp, #4
   1df68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df6c:	movw	r1, #41534	; 0xa23e
   1df70:	mov	r0, #0
   1df74:	mov	r2, #5
   1df78:	movt	r1, #4
   1df7c:	bl	1253c <dcgettext@plt>
   1df80:	mov	r5, r0
   1df84:	movw	r0, #56940	; 0xde6c
   1df88:	mov	r2, r4
   1df8c:	movt	r0, #5
   1df90:	ldr	r1, [r0, #72]	; 0x48
   1df94:	mov	r0, #0
   1df98:	bl	2c45c <__assert_fail@plt+0x199e0>
   1df9c:	mov	r3, r0
   1dfa0:	mov	r0, #1
   1dfa4:	mov	r1, #0
   1dfa8:	mov	r2, r5
   1dfac:	bl	12674 <error@plt>
   1dfb0:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1dfb4:			; <UNDEFINED> instruction: 0x3e99999a
   1dfb8:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1dfbc:	svccc	0x007fa440
   1dfc0:	push	{r4, sl, fp, lr}
   1dfc4:	add	fp, sp, #8
   1dfc8:	mov	r1, #0
   1dfcc:	bl	18090 <__assert_fail@plt+0x5614>
   1dfd0:	mov	r4, r0
   1dfd4:	add	r1, r0, #40	; 0x28
   1dfd8:	movw	r0, #40776	; 0x9f48
   1dfdc:	movt	r0, #4
   1dfe0:	bl	1f2a8 <__assert_fail@plt+0xc82c>
   1dfe4:	mov	r0, #1065353216	; 0x3f800000
   1dfe8:	str	r0, [r4, #28]
   1dfec:	movw	r0, #257	; 0x101
   1dff0:	str	r0, [r4, #16]
   1dff4:	mov	r0, #1
   1dff8:	pop	{r4, sl, fp, pc}
   1dffc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e000:	add	fp, sp, #24
   1e004:	sub	sp, sp, #24
   1e008:	mov	r5, r0
   1e00c:	mov	r0, #0
   1e010:	cmp	r1, #0
   1e014:	beq	1e06c <__assert_fail@plt+0xb5f0>
   1e018:	ldr	r7, [r2]
   1e01c:	mov	r4, r2
   1e020:	ldr	r6, [r1, r7, lsl #2]
   1e024:	cmp	r6, #0
   1e028:	beq	1e06c <__assert_fail@plt+0xb5f0>
   1e02c:	add	r0, r7, #1
   1e030:	add	r8, sp, #4
   1e034:	str	r0, [r4]
   1e038:	movw	r0, #40776	; 0x9f48
   1e03c:	mov	r1, r8
   1e040:	movt	r0, #4
   1e044:	bl	1f2a8 <__assert_fail@plt+0xc82c>
   1e048:	mov	r0, r8
   1e04c:	mov	r1, r5
   1e050:	mov	r2, r6
   1e054:	bl	1a178 <__assert_fail@plt+0x76fc>
   1e058:	mov	r1, r0
   1e05c:	mov	r0, #1
   1e060:	cmp	r1, #0
   1e064:	moveq	r0, #0
   1e068:	streq	r7, [r4]
   1e06c:	sub	sp, fp, #24
   1e070:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e074:	push	{fp, lr}
   1e078:	mov	fp, sp
   1e07c:	bl	180ec <__assert_fail@plt+0x5670>
   1e080:	movw	r1, #56940	; 0xde6c
   1e084:	movt	r1, #5
   1e088:	ldrb	r1, [r1]
   1e08c:	cmp	r1, #0
   1e090:	moveq	r1, #0
   1e094:	strheq	r1, [r0, #18]
   1e098:	mov	r1, #1
   1e09c:	strh	r1, [r0, #16]
   1e0a0:	mov	r0, #1
   1e0a4:	pop	{fp, pc}
   1e0a8:	push	{fp, lr}
   1e0ac:	mov	fp, sp
   1e0b0:	bl	180ec <__assert_fail@plt+0x5670>
   1e0b4:	mov	r1, #1
   1e0b8:	str	r1, [r0, #16]
   1e0bc:	mov	r1, #1065353216	; 0x3f800000
   1e0c0:	str	r1, [r0, #28]
   1e0c4:	mov	r0, #1
   1e0c8:	pop	{fp, pc}
   1e0cc:	mov	ip, r2
   1e0d0:	mov	r2, r0
   1e0d4:	movw	r0, #56940	; 0xde6c
   1e0d8:	movt	r0, #5
   1e0dc:	ldr	r3, [r0, #60]	; 0x3c
   1e0e0:	mov	r0, r1
   1e0e4:	mov	r1, ip
   1e0e8:	b	1f788 <__assert_fail@plt+0xcd0c>
   1e0ec:	mov	r0, #0
   1e0f0:	cmp	r1, #0
   1e0f4:	beq	1e16c <__assert_fail@plt+0xb6f0>
   1e0f8:	ldr	r3, [r2]
   1e0fc:	ldr	r1, [r1, r3, lsl #2]
   1e100:	cmp	r1, #0
   1e104:	bxeq	lr
   1e108:	push	{fp, lr}
   1e10c:	mov	fp, sp
   1e110:	add	r0, r3, #1
   1e114:	str	r0, [r2]
   1e118:	mov	r0, r1
   1e11c:	bl	21e94 <__assert_fail@plt+0xf418>
   1e120:	movw	r1, #56940	; 0xde6c
   1e124:	movt	r1, #5
   1e128:	str	r0, [r1, #60]	; 0x3c
   1e12c:	movw	r1, #56532	; 0xdcd4
   1e130:	movt	r1, #5
   1e134:	ldr	r0, [r1]
   1e138:	cmp	r0, #0
   1e13c:	bne	1e150 <__assert_fail@plt+0xb6d4>
   1e140:	movw	r0, #42480	; 0xa5f0
   1e144:	movt	r0, #4
   1e148:	add	r0, r0, #1296	; 0x510
   1e14c:	str	r0, [r1]
   1e150:	bl	180ec <__assert_fail@plt+0x5670>
   1e154:	mov	r1, #0
   1e158:	strh	r1, [r0, #18]
   1e15c:	mov	r1, #1065353216	; 0x3f800000
   1e160:	str	r1, [r0, #28]
   1e164:	mov	r0, #1
   1e168:	pop	{fp, lr}
   1e16c:	bx	lr
   1e170:	push	{r4, r5, r6, r7, fp, lr}
   1e174:	add	fp, sp, #16
   1e178:	sub	sp, sp, #208	; 0xd0
   1e17c:	mov	r5, r0
   1e180:	add	r0, sp, #104	; 0x68
   1e184:	mov	r6, r2
   1e188:	mov	r4, r1
   1e18c:	bl	18534 <__assert_fail@plt+0x5ab8>
   1e190:	mov	r0, #0
   1e194:	cmp	r4, #0
   1e198:	beq	1e31c <__assert_fail@plt+0xb8a0>
   1e19c:	ldr	r1, [r6]
   1e1a0:	ldr	r4, [r4, r1, lsl #2]
   1e1a4:	cmp	r4, #0
   1e1a8:	beq	1e31c <__assert_fail@plt+0xb8a0>
   1e1ac:	add	r0, r1, #1
   1e1b0:	movw	r7, #56940	; 0xde6c
   1e1b4:	add	r1, sp, #104	; 0x68
   1e1b8:	str	r0, [r6]
   1e1bc:	movt	r7, #5
   1e1c0:	mov	r0, r4
   1e1c4:	ldr	r2, [r7, #52]	; 0x34
   1e1c8:	blx	r2
   1e1cc:	cmp	r0, #0
   1e1d0:	bne	1e324 <__assert_fail@plt+0xb8a8>
   1e1d4:	mov	r0, sp
   1e1d8:	bl	18534 <__assert_fail@plt+0x5ab8>
   1e1dc:	ldr	r0, [r7, #48]	; 0x30
   1e1e0:	mov	r1, #0
   1e1e4:	cmp	r0, #0
   1e1e8:	bne	1e214 <__assert_fail@plt+0xb798>
   1e1ec:	ldrb	r0, [r7, #56]	; 0x38
   1e1f0:	mov	r1, #32768	; 0x8000
   1e1f4:	cmp	r0, #0
   1e1f8:	bne	1e214 <__assert_fail@plt+0xb798>
   1e1fc:	ldr	r0, [sp, #120]	; 0x78
   1e200:	mvn	r6, #1
   1e204:	mov	r1, #0
   1e208:	and	r0, r0, #61440	; 0xf000
   1e20c:	cmp	r0, #40960	; 0xa000
   1e210:	beq	1e2d8 <__assert_fail@plt+0xb85c>
   1e214:	mov	r0, r4
   1e218:	bl	20d30 <__assert_fail@plt+0xe2b4>
   1e21c:	mov	r6, r0
   1e220:	cmp	r0, #0
   1e224:	blt	1e2d8 <__assert_fail@plt+0xb85c>
   1e228:	mov	r2, sp
   1e22c:	mov	r0, #3
   1e230:	mov	r1, r6
   1e234:	bl	125e4 <__fxstat64@plt>
   1e238:	cmp	r0, #0
   1e23c:	bne	1e324 <__assert_fail@plt+0xb8a8>
   1e240:	ldr	r2, [r7, #52]	; 0x34
   1e244:	add	r1, sp, #104	; 0x68
   1e248:	mov	r0, r4
   1e24c:	blx	r2
   1e250:	cmp	r0, #0
   1e254:	bne	1e324 <__assert_fail@plt+0xb8a8>
   1e258:	ldr	r0, [r7, #48]	; 0x30
   1e25c:	cmp	r0, #0
   1e260:	ldrbeq	r0, [r7, #56]	; 0x38
   1e264:	cmpeq	r0, #0
   1e268:	beq	1e280 <__assert_fail@plt+0xb804>
   1e26c:	add	r0, sp, #104	; 0x68
   1e270:	mov	r1, sp
   1e274:	mov	r2, #104	; 0x68
   1e278:	bl	124b8 <memcpy@plt>
   1e27c:	b	1e2d8 <__assert_fail@plt+0xb85c>
   1e280:	ldr	r0, [sp, #120]	; 0x78
   1e284:	and	r0, r0, #61440	; 0xf000
   1e288:	cmp	r0, #40960	; 0xa000
   1e28c:	beq	1e2cc <__assert_fail@plt+0xb850>
   1e290:	ldm	sp, {r0, r1}
   1e294:	ldr	r2, [sp, #104]	; 0x68
   1e298:	ldr	r3, [sp, #108]	; 0x6c
   1e29c:	eor	r1, r3, r1
   1e2a0:	eor	r0, r2, r0
   1e2a4:	orrs	r0, r0, r1
   1e2a8:	bne	1e2cc <__assert_fail@plt+0xb850>
   1e2ac:	ldr	r0, [sp, #96]	; 0x60
   1e2b0:	ldr	r2, [sp, #200]	; 0xc8
   1e2b4:	ldr	r1, [sp, #100]	; 0x64
   1e2b8:	ldr	r3, [sp, #204]	; 0xcc
   1e2bc:	eor	r1, r3, r1
   1e2c0:	eor	r0, r2, r0
   1e2c4:	orrs	r0, r0, r1
   1e2c8:	beq	1e2d8 <__assert_fail@plt+0xb85c>
   1e2cc:	mov	r0, r6
   1e2d0:	bl	12a34 <close@plt>
   1e2d4:	mvn	r6, #0
   1e2d8:	mov	r0, r5
   1e2dc:	mov	r1, r4
   1e2e0:	bl	18090 <__assert_fail@plt+0x5614>
   1e2e4:	ldr	r2, [sp, #200]	; 0xc8
   1e2e8:	ldr	r3, [sp, #204]	; 0xcc
   1e2ec:	ldr	r7, [sp, #104]	; 0x68
   1e2f0:	ldr	r5, [sp, #108]	; 0x6c
   1e2f4:	mov	r1, r0
   1e2f8:	movw	r4, #55050	; 0xd70a
   1e2fc:	mov	r0, #1
   1e300:	movt	r4, #15395	; 0x3c23
   1e304:	add	ip, r1, #40	; 0x28
   1e308:	strh	r0, [r1, #18]
   1e30c:	str	r4, [r1, #28]
   1e310:	stm	ip, {r2, r3, r7}
   1e314:	str	r5, [r1, #52]	; 0x34
   1e318:	str	r6, [r1, #56]	; 0x38
   1e31c:	sub	sp, fp, #16
   1e320:	pop	{r4, r5, r6, r7, fp, pc}
   1e324:	bl	127d0 <__errno_location@plt>
   1e328:	ldr	r0, [r0]
   1e32c:	mov	r1, r4
   1e330:	bl	19a1c <__assert_fail@plt+0x6fa0>
   1e334:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e338:	add	fp, sp, #28
   1e33c:	sub	sp, sp, #20
   1e340:	mov	r8, r0
   1e344:	mov	r0, #0
   1e348:	cmp	r1, #0
   1e34c:	beq	1e590 <__assert_fail@plt+0xbb14>
   1e350:	mov	r7, r1
   1e354:	ldr	r1, [r2]
   1e358:	mov	r4, r2
   1e35c:	ldr	r5, [r7, r1, lsl #2]
   1e360:	cmp	r5, #0
   1e364:	beq	1e590 <__assert_fail@plt+0xbb14>
   1e368:	mov	r0, r5
   1e36c:	bl	12788 <strlen@plt>
   1e370:	cmp	r0, #0
   1e374:	beq	1e63c <__assert_fail@plt+0xbbc0>
   1e378:	sub	r6, r0, #1
   1e37c:	ldrb	r0, [r5, r6]
   1e380:	sub	r0, r0, #48	; 0x30
   1e384:	cmp	r0, #71	; 0x47
   1e388:	bhi	1e60c <__assert_fail@plt+0xbb90>
   1e38c:	add	r1, pc, #8
   1e390:	mov	sl, #512	; 0x200
   1e394:	mov	r9, #0
   1e398:	ldr	pc, [r1, r0, lsl #2]
   1e39c:			; <UNDEFINED> instruction: 0x0001e4bc
   1e3a0:			; <UNDEFINED> instruction: 0x0001e4bc
   1e3a4:			; <UNDEFINED> instruction: 0x0001e4bc
   1e3a8:			; <UNDEFINED> instruction: 0x0001e4bc
   1e3ac:			; <UNDEFINED> instruction: 0x0001e4bc
   1e3b0:			; <UNDEFINED> instruction: 0x0001e4bc
   1e3b4:			; <UNDEFINED> instruction: 0x0001e4bc
   1e3b8:			; <UNDEFINED> instruction: 0x0001e4bc
   1e3bc:			; <UNDEFINED> instruction: 0x0001e4bc
   1e3c0:			; <UNDEFINED> instruction: 0x0001e4bc
   1e3c4:	andeq	lr, r1, ip, lsl #12
   1e3c8:	andeq	lr, r1, ip, lsl #12
   1e3cc:	andeq	lr, r1, ip, lsl #12
   1e3d0:	andeq	lr, r1, ip, lsl #12
   1e3d4:	andeq	lr, r1, ip, lsl #12
   1e3d8:	andeq	lr, r1, ip, lsl #12
   1e3dc:	andeq	lr, r1, ip, lsl #12
   1e3e0:	andeq	lr, r1, ip, lsl #12
   1e3e4:	andeq	lr, r1, ip, lsl #12
   1e3e8:	andeq	lr, r1, ip, lsl #12
   1e3ec:	andeq	lr, r1, ip, lsl #12
   1e3f0:	andeq	lr, r1, ip, lsl #12
   1e3f4:	andeq	lr, r1, ip, lsl #12
   1e3f8:	ldrdeq	lr, [r1], -r0
   1e3fc:	andeq	lr, r1, ip, lsl #12
   1e400:	andeq	lr, r1, ip, lsl #12
   1e404:	andeq	lr, r1, ip, lsl #12
   1e408:	andeq	lr, r1, ip, lsl #12
   1e40c:	andeq	lr, r1, ip, lsl #12
   1e410:	muleq	r1, r8, r5
   1e414:	andeq	lr, r1, ip, lsl #12
   1e418:	andeq	lr, r1, ip, lsl #12
   1e41c:	andeq	lr, r1, ip, lsl #12
   1e420:	andeq	lr, r1, ip, lsl #12
   1e424:	andeq	lr, r1, ip, lsl #12
   1e428:	andeq	lr, r1, ip, lsl #12
   1e42c:	andeq	lr, r1, ip, lsl #12
   1e430:	andeq	lr, r1, ip, lsl #12
   1e434:	andeq	lr, r1, ip, lsl #12
   1e438:	andeq	lr, r1, ip, lsl #12
   1e43c:	andeq	lr, r1, ip, lsl #12
   1e440:	andeq	lr, r1, ip, lsl #12
   1e444:	andeq	lr, r1, ip, lsl #12
   1e448:	andeq	lr, r1, ip, lsl #12
   1e44c:	andeq	lr, r1, ip, lsl #12
   1e450:	andeq	lr, r1, ip, lsl #12
   1e454:	andeq	lr, r1, ip, lsl #12
   1e458:	andeq	lr, r1, ip, lsl #12
   1e45c:	andeq	lr, r1, ip, lsl #12
   1e460:	andeq	lr, r1, ip, lsl #12
   1e464:	andeq	lr, r1, ip, lsr #11
   1e468:	andeq	lr, r1, r4, ror #11
   1e46c:	andeq	lr, r1, ip, lsl #12
   1e470:	andeq	lr, r1, ip, lsl #12
   1e474:	andeq	lr, r1, ip, lsl #12
   1e478:	andeq	lr, r1, ip, lsl #12
   1e47c:	andeq	lr, r1, ip, lsl #12
   1e480:	andeq	lr, r1, ip, lsl #12
   1e484:	andeq	lr, r1, ip, lsl #12
   1e488:	strdeq	lr, [r1], -r8
   1e48c:	andeq	lr, r1, ip, lsl #12
   1e490:	andeq	lr, r1, ip, lsl #12
   1e494:	andeq	lr, r1, ip, lsl #12
   1e498:	andeq	lr, r1, ip, lsl #12
   1e49c:	andeq	lr, r1, ip, lsl #12
   1e4a0:	andeq	lr, r1, ip, lsl #12
   1e4a4:	andeq	lr, r1, ip, lsl #12
   1e4a8:	andeq	lr, r1, ip, lsl #12
   1e4ac:	andeq	lr, r1, ip, lsl #12
   1e4b0:	andeq	lr, r1, ip, lsl #12
   1e4b4:	andeq	lr, r1, ip, lsl #12
   1e4b8:			; <UNDEFINED> instruction: 0x0001e5bc
   1e4bc:	ldrb	r0, [r5]
   1e4c0:	cmp	r0, #45	; 0x2d
   1e4c4:	beq	1e4e0 <__assert_fail@plt+0xba64>
   1e4c8:	cmp	r0, #43	; 0x2b
   1e4cc:	mov	r7, #2
   1e4d0:	mov	r0, r5
   1e4d4:	addeq	r0, r5, #1
   1e4d8:	moveq	r7, #0
   1e4dc:	b	1e4e8 <__assert_fail@plt+0xba6c>
   1e4e0:	add	r0, r5, #1
   1e4e4:	mov	r7, #1
   1e4e8:	movw	r1, #34847	; 0x881f
   1e4ec:	add	r3, sp, #8
   1e4f0:	mov	r2, #10
   1e4f4:	movt	r1, #4
   1e4f8:	str	r1, [sp]
   1e4fc:	add	r1, sp, #16
   1e500:	bl	2ea50 <__assert_fail@plt+0x1bfd4>
   1e504:	cmp	r0, #0
   1e508:	bne	1e660 <__assert_fail@plt+0xbbe4>
   1e50c:	mov	r0, r8
   1e510:	mov	r1, r5
   1e514:	bl	18090 <__assert_fail@plt+0x5614>
   1e518:	ldr	r2, [sp, #8]
   1e51c:	ldr	r1, [sp, #12]
   1e520:	mov	r3, #1
   1e524:	cmp	r7, #1
   1e528:	strh	r3, [r0, #18]
   1e52c:	str	r7, [r0, #40]	; 0x28
   1e530:	str	sl, [r0, #44]	; 0x2c
   1e534:	str	r2, [r0, #48]	; 0x30
   1e538:	str	r1, [r0, #52]	; 0x34
   1e53c:	beq	1e558 <__assert_fail@plt+0xbadc>
   1e540:	cmp	r7, #0
   1e544:	bne	1e578 <__assert_fail@plt+0xbafc>
   1e548:	umull	r2, r3, r2, sl
   1e54c:	mla	r1, r1, sl, r3
   1e550:	add	r3, pc, #336	; 0x150
   1e554:	b	1e564 <__assert_fail@plt+0xbae8>
   1e558:	umull	r2, r3, r2, sl
   1e55c:	mla	r1, r1, sl, r3
   1e560:	add	r3, pc, #312	; 0x138
   1e564:	rsbs	r2, r2, #20480	; 0x5000
   1e568:	rscs	r1, r1, #0
   1e56c:	addcc	r3, r3, #4
   1e570:	vldr	s0, [r3]
   1e574:	b	1e57c <__assert_fail@plt+0xbb00>
   1e578:	vldr	s0, [pc, #284]	; 1e69c <__assert_fail@plt+0xbc20>
   1e57c:	vstr	s0, [r0, #28]
   1e580:	ldr	r0, [r4]
   1e584:	add	r0, r0, #1
   1e588:	str	r0, [r4]
   1e58c:	mov	r0, #1
   1e590:	sub	sp, fp, #28
   1e594:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e598:	mov	r0, #0
   1e59c:	mov	sl, #1048576	; 0x100000
   1e5a0:	mov	r9, #77	; 0x4d
   1e5a4:	strb	r0, [r5, r6]
   1e5a8:	b	1e4bc <__assert_fail@plt+0xba40>
   1e5ac:	mov	r0, #0
   1e5b0:	mov	r9, #98	; 0x62
   1e5b4:	strb	r0, [r5, r6]
   1e5b8:	b	1e4bc <__assert_fail@plt+0xba40>
   1e5bc:	mov	r0, #0
   1e5c0:	mov	sl, #2
   1e5c4:	mov	r9, #119	; 0x77
   1e5c8:	strb	r0, [r5, r6]
   1e5cc:	b	1e4bc <__assert_fail@plt+0xba40>
   1e5d0:	mov	r0, #0
   1e5d4:	mov	sl, #1073741824	; 0x40000000
   1e5d8:	mov	r9, #71	; 0x47
   1e5dc:	strb	r0, [r5, r6]
   1e5e0:	b	1e4bc <__assert_fail@plt+0xba40>
   1e5e4:	mov	r0, #0
   1e5e8:	mov	sl, #1
   1e5ec:	mov	r9, #99	; 0x63
   1e5f0:	strb	r0, [r5, r6]
   1e5f4:	b	1e4bc <__assert_fail@plt+0xba40>
   1e5f8:	mov	r0, #0
   1e5fc:	mov	sl, #1024	; 0x400
   1e600:	mov	r9, #107	; 0x6b
   1e604:	strb	r0, [r5, r6]
   1e608:	b	1e4bc <__assert_fail@plt+0xba40>
   1e60c:	movw	r1, #41807	; 0xa34f
   1e610:	mov	r0, #0
   1e614:	mov	r2, #5
   1e618:	movt	r1, #4
   1e61c:	bl	1253c <dcgettext@plt>
   1e620:	mov	r2, r0
   1e624:	ldr	r0, [r4]
   1e628:	mov	r1, #0
   1e62c:	ldr	r0, [r7, r0, lsl #2]
   1e630:	ldrb	r3, [r0, r6]
   1e634:	mov	r0, #1
   1e638:	bl	12674 <error@plt>
   1e63c:	movw	r1, #41776	; 0xa330
   1e640:	mov	r0, #0
   1e644:	mov	r2, #5
   1e648:	movt	r1, #4
   1e64c:	bl	1253c <dcgettext@plt>
   1e650:	mov	r2, r0
   1e654:	mov	r0, #1
   1e658:	mov	r1, #0
   1e65c:	bl	12674 <error@plt>
   1e660:	movw	r1, #41831	; 0xa367
   1e664:	mov	r0, #0
   1e668:	mov	r2, #5
   1e66c:	strb	r0, [sp, #7]
   1e670:	movt	r1, #4
   1e674:	mov	r0, #0
   1e678:	strb	r9, [sp, #6]
   1e67c:	bl	1253c <dcgettext@plt>
   1e680:	mov	r2, r0
   1e684:	add	r0, sp, #6
   1e688:	mov	r1, #0
   1e68c:	mov	r3, r5
   1e690:	str	r0, [sp]
   1e694:	mov	r0, #1
   1e698:	bl	12674 <error@plt>
   1e69c:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1e6a0:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e6a4:	svccc	0x00666666
   1e6a8:	svccc	0x00666666
   1e6ac:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e6b0:	movw	r3, #19980	; 0x4e0c
   1e6b4:	mov	ip, r2
   1e6b8:	mov	r2, r0
   1e6bc:	mov	r0, r1
   1e6c0:	movt	r3, #1
   1e6c4:	mov	r1, ip
   1e6c8:	b	1f9d0 <__assert_fail@plt+0xcf54>
   1e6cc:	push	{r4, sl, fp, lr}
   1e6d0:	add	fp, sp, #8
   1e6d4:	mov	r4, r2
   1e6d8:	mov	r2, r0
   1e6dc:	mov	r0, r1
   1e6e0:	mov	r1, r4
   1e6e4:	bl	1f3a0 <__assert_fail@plt+0xc924>
   1e6e8:	cmp	r0, #0
   1e6ec:	beq	1e714 <__assert_fail@plt+0xbc98>
   1e6f0:	add	r1, pc, #48	; 0x30
   1e6f4:	ldrd	r2, [r0, #48]	; 0x30
   1e6f8:	subs	r2, r2, #100	; 0x64
   1e6fc:	sbcs	r2, r3, #0
   1e700:	addcc	r1, r1, #4
   1e704:	vldr	s0, [r1]
   1e708:	vstr	s0, [r0, #28]
   1e70c:	mov	r0, #1
   1e710:	pop	{r4, sl, fp, pc}
   1e714:	ldr	r0, [r4]
   1e718:	sub	r0, r0, #1
   1e71c:	str	r0, [r4]
   1e720:	mov	r0, #0
   1e724:	pop	{r4, sl, fp, pc}
   1e728:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1e72c:	svccc	0x007d70a4
   1e730:	push	{r4, r5, r6, sl, fp, lr}
   1e734:	add	fp, sp, #16
   1e738:	sub	sp, sp, #24
   1e73c:	mov	r5, r0
   1e740:	mov	r0, #0
   1e744:	cmp	r1, #0
   1e748:	beq	1e7e8 <__assert_fail@plt+0xbd6c>
   1e74c:	ldr	r3, [r2]
   1e750:	ldr	r4, [r1, r3, lsl #2]
   1e754:	cmp	r4, #0
   1e758:	beq	1e7e8 <__assert_fail@plt+0xbd6c>
   1e75c:	add	r0, r3, #1
   1e760:	vldr	d0, [pc, #176]	; 1e818 <__assert_fail@plt+0xbd9c>
   1e764:	add	r6, sp, #8
   1e768:	mov	r3, #0
   1e76c:	str	r0, [r2]
   1e770:	movw	r0, #39571	; 0x9a93
   1e774:	mov	r1, r6
   1e778:	mov	r2, #0
   1e77c:	movt	r0, #4
   1e780:	str	r0, [sp]
   1e784:	mov	r0, r4
   1e788:	bl	1eb08 <__assert_fail@plt+0xc08c>
   1e78c:	cmp	r0, #0
   1e790:	beq	1e7f0 <__assert_fail@plt+0xbd74>
   1e794:	mov	r0, r5
   1e798:	mov	r1, r4
   1e79c:	bl	18090 <__assert_fail@plt+0x5614>
   1e7a0:	mov	r1, #8
   1e7a4:	movw	r3, #10111	; 0x277f
   1e7a8:	vldr	s0, [pc, #120]	; 1e828 <__assert_fail@plt+0xbdac>
   1e7ac:	vld1.64	{d16-d17}, [r6], r1
   1e7b0:	add	r1, r0, #40	; 0x28
   1e7b4:	movt	r3, #133	; 0x85
   1e7b8:	vst1.64	{d16-d17}, [r1]
   1e7bc:	ldr	r1, [r6]
   1e7c0:	add	r2, pc, #88	; 0x58
   1e7c4:	cmp	r1, r3
   1e7c8:	addgt	r2, r2, #4
   1e7cc:	vldr	s2, [r2]
   1e7d0:	movw	r2, #20864	; 0x5180
   1e7d4:	movt	r2, #1
   1e7d8:	cmp	r1, r2
   1e7dc:	vselge.f32	s0, s2, s0
   1e7e0:	vstr	s0, [r0, #28]
   1e7e4:	mov	r0, #1
   1e7e8:	sub	sp, fp, #16
   1e7ec:	pop	{r4, r5, r6, sl, fp, pc}
   1e7f0:	movw	r1, #42238	; 0xa4fe
   1e7f4:	mov	r0, #0
   1e7f8:	mov	r2, #5
   1e7fc:	movt	r1, #4
   1e800:	bl	1253c <dcgettext@plt>
   1e804:	mov	r2, r0
   1e808:	mov	r0, #1
   1e80c:	mov	r1, #0
   1e810:	mov	r3, r4
   1e814:	bl	12674 <error@plt>
   1e818:	andeq	r0, r0, r0
   1e81c:	rscsmi	r1, r5, r0, lsl #16
   1e820:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1e824:			; <UNDEFINED> instruction: 0x3e99999a
   1e828:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1e82c:	push	{r4, r5, r6, sl, fp, lr}
   1e830:	add	fp, sp, #16
   1e834:	vpush	{d8}
   1e838:	mov	r5, r0
   1e83c:	mov	r0, #0
   1e840:	cmp	r1, #0
   1e844:	beq	1e8e4 <__assert_fail@plt+0xbe68>
   1e848:	ldr	r3, [r2]
   1e84c:	ldr	r4, [r1, r3, lsl #2]
   1e850:	cmp	r4, #0
   1e854:	beq	1e8e4 <__assert_fail@plt+0xbe68>
   1e858:	add	r0, r3, #1
   1e85c:	str	r0, [r2]
   1e860:	mov	r0, r4
   1e864:	bl	123b0 <getpwnam@plt>
   1e868:	mov	r6, r0
   1e86c:	bl	128e4 <endpwent@plt>
   1e870:	cmp	r6, #0
   1e874:	beq	1e880 <__assert_fail@plt+0xbe04>
   1e878:	ldr	r6, [r6, #8]
   1e87c:	b	1e8bc <__assert_fail@plt+0xbe40>
   1e880:	movw	r1, #40848	; 0x9f90
   1e884:	mov	r0, r4
   1e888:	movt	r1, #4
   1e88c:	bl	12a70 <strspn@plt>
   1e890:	cmp	r0, #0
   1e894:	beq	1e8ec <__assert_fail@plt+0xbe70>
   1e898:	ldrb	r0, [r4, r0]
   1e89c:	cmp	r0, #0
   1e8a0:	bne	1e8ec <__assert_fail@plt+0xbe70>
   1e8a4:	movw	r0, #56940	; 0xde6c
   1e8a8:	movt	r0, #5
   1e8ac:	ldr	r1, [r0, #72]	; 0x48
   1e8b0:	mov	r0, r4
   1e8b4:	bl	22078 <__assert_fail@plt+0xf5fc>
   1e8b8:	mov	r6, r0
   1e8bc:	add	r0, pc, #156	; 0x9c
   1e8c0:	cmp	r6, #100	; 0x64
   1e8c4:	mov	r1, r4
   1e8c8:	addcc	r0, r0, #4
   1e8cc:	vldr	s16, [r0]
   1e8d0:	mov	r0, r5
   1e8d4:	bl	18090 <__assert_fail@plt+0x5614>
   1e8d8:	str	r6, [r0, #40]	; 0x28
   1e8dc:	vstr	s16, [r0, #28]
   1e8e0:	mov	r0, #1
   1e8e4:	vpop	{d8}
   1e8e8:	pop	{r4, r5, r6, sl, fp, pc}
   1e8ec:	ldrb	r0, [r4]
   1e8f0:	cmp	r0, #0
   1e8f4:	bne	1e91c <__assert_fail@plt+0xbea0>
   1e8f8:	movw	r1, #42302	; 0xa53e
   1e8fc:	mov	r0, #0
   1e900:	mov	r2, #5
   1e904:	movt	r1, #4
   1e908:	bl	1253c <dcgettext@plt>
   1e90c:	mov	r2, r0
   1e910:	mov	r0, #1
   1e914:	mov	r1, #0
   1e918:	bl	12674 <error@plt>
   1e91c:	movw	r1, #42267	; 0xa51b
   1e920:	mov	r0, #0
   1e924:	mov	r2, #5
   1e928:	movt	r1, #4
   1e92c:	bl	1253c <dcgettext@plt>
   1e930:	mov	r5, r0
   1e934:	movw	r0, #56940	; 0xde6c
   1e938:	mov	r2, r4
   1e93c:	movt	r0, #5
   1e940:	ldr	r1, [r0, #72]	; 0x48
   1e944:	mov	r0, #0
   1e948:	bl	2c45c <__assert_fail@plt+0x199e0>
   1e94c:	mov	r3, r0
   1e950:	mov	r0, #1
   1e954:	mov	r1, #0
   1e958:	mov	r2, r5
   1e95c:	bl	12674 <error@plt>
   1e960:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1e964:	svccc	0x007d70a4
   1e968:	push	{fp, lr}
   1e96c:	mov	fp, sp
   1e970:	sub	sp, sp, #8
   1e974:	movw	r3, #18984	; 0x4a28
   1e978:	movt	r3, #1
   1e97c:	str	r3, [sp]
   1e980:	movw	r3, #41524	; 0xa234
   1e984:	movt	r3, #4
   1e988:	bl	1f650 <__assert_fail@plt+0xcbd4>
   1e98c:	mov	sp, fp
   1e990:	pop	{fp, pc}
   1e994:	movw	r3, #20424	; 0x4fc8
   1e998:	mov	ip, r2
   1e99c:	mov	r2, r0
   1e9a0:	mov	r0, r1
   1e9a4:	movt	r3, #1
   1e9a8:	mov	r1, ip
   1e9ac:	b	1f9d0 <__assert_fail@plt+0xcf54>
   1e9b0:	push	{fp, lr}
   1e9b4:	mov	fp, sp
   1e9b8:	movw	r0, #39340	; 0x99ac
   1e9bc:	movt	r0, #4
   1e9c0:	bl	1bfe0 <__assert_fail@plt+0x9564>
   1e9c4:	bl	180ec <__assert_fail@plt+0x5670>
   1e9c8:	mov	r1, #0
   1e9cc:	str	r1, [r0, #28]
   1e9d0:	str	r1, [r0, #16]
   1e9d4:	mov	r0, #1
   1e9d8:	pop	{fp, pc}
   1e9dc:	push	{fp, lr}
   1e9e0:	mov	fp, sp
   1e9e4:	bl	180ec <__assert_fail@plt+0x5670>
   1e9e8:	mov	r1, #0
   1e9ec:	strh	r1, [r0, #18]
   1e9f0:	mov	r1, #1065353216	; 0x3f800000
   1e9f4:	str	r1, [r0, #28]
   1e9f8:	mov	r0, #1
   1e9fc:	pop	{fp, pc}
   1ea00:	push	{fp, lr}
   1ea04:	mov	fp, sp
   1ea08:	mov	r0, #0
   1ea0c:	bl	18148 <__assert_fail@plt+0x56cc>
   1ea10:	push	{fp, lr}
   1ea14:	mov	fp, sp
   1ea18:	sub	sp, sp, #8
   1ea1c:	movw	r0, #26948	; 0x6944
   1ea20:	movt	r0, #4
   1ea24:	bl	21000 <__assert_fail@plt+0xe584>
   1ea28:	movw	r1, #42344	; 0xa568
   1ea2c:	mov	r0, #0
   1ea30:	mov	r2, #5
   1ea34:	mov	r5, #0
   1ea38:	movt	r1, #4
   1ea3c:	bl	1253c <dcgettext@plt>
   1ea40:	bl	123f8 <printf@plt>
   1ea44:	movw	r0, #42363	; 0xa57b
   1ea48:	movt	r0, #4
   1ea4c:	bl	123f8 <printf@plt>
   1ea50:	movw	r4, #56940	; 0xde6c
   1ea54:	movw	r2, #42395	; 0xa59b
   1ea58:	movw	r1, #42387	; 0xa593
   1ea5c:	movt	r4, #5
   1ea60:	movt	r2, #4
   1ea64:	movt	r1, #4
   1ea68:	ldrb	r0, [r4, #56]	; 0x38
   1ea6c:	cmp	r0, #0
   1ea70:	movw	r0, #42371	; 0xa583
   1ea74:	moveq	r1, r2
   1ea78:	movt	r0, #4
   1ea7c:	bl	123f8 <printf@plt>
   1ea80:	movw	r0, #42404	; 0xa5a4
   1ea84:	movt	r0, #4
   1ea88:	bl	123f8 <printf@plt>
   1ea8c:	bl	123bc <is_selinux_enabled@plt>
   1ea90:	cmp	r0, #1
   1ea94:	blt	1eaa4 <__assert_fail@plt+0xc028>
   1ea98:	movw	r0, #42423	; 0xa5b7
   1ea9c:	movt	r0, #4
   1eaa0:	bl	123f8 <printf@plt>
   1eaa4:	add	r0, sp, #4
   1eaa8:	str	r5, [sp, #4]
   1eaac:	bl	131c8 <__assert_fail@plt+0x74c>
   1eab0:	cmp	r0, #0
   1eab4:	beq	1eae8 <__assert_fail@plt+0xc06c>
   1eab8:	movw	r0, #42432	; 0xa5c0
   1eabc:	movt	r0, #4
   1eac0:	bl	123f8 <printf@plt>
   1eac4:	ldrb	r0, [sp, #5]
   1eac8:	tst	r0, #2
   1eacc:	beq	1eadc <__assert_fail@plt+0xc060>
   1ead0:	movw	r0, #42437	; 0xa5c5
   1ead4:	movt	r0, #4
   1ead8:	bl	123f8 <printf@plt>
   1eadc:	movw	r0, #29613	; 0x73ad
   1eae0:	movt	r0, #4
   1eae4:	bl	123f8 <printf@plt>
   1eae8:	ldrh	r1, [r4, #68]	; 0x44
   1eaec:	movw	r0, #42447	; 0xa5cf
   1eaf0:	movt	r0, #4
   1eaf4:	bl	123f8 <printf@plt>
   1eaf8:	mov	r0, #10
   1eafc:	bl	1280c <putchar@plt>
   1eb00:	mov	r0, #0
   1eb04:	bl	12758 <exit@plt>
   1eb08:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1eb0c:	add	fp, sp, #24
   1eb10:	vpush	{d8}
   1eb14:	sub	sp, sp, #16
   1eb18:	mov	r4, r1
   1eb1c:	ldrb	r1, [r0]
   1eb20:	vmov.f64	d8, d0
   1eb24:	mov	r8, r3
   1eb28:	mov	r7, r2
   1eb2c:	mov	r5, r0
   1eb30:	cmp	r1, #43	; 0x2b
   1eb34:	beq	1eb4c <__assert_fail@plt+0xc0d0>
   1eb38:	cmp	r1, #45	; 0x2d
   1eb3c:	mov	r0, #2
   1eb40:	addeq	r5, r5, #1
   1eb44:	moveq	r0, #0
   1eb48:	b	1eb54 <__assert_fail@plt+0xc0d8>
   1eb4c:	add	r5, r5, #1
   1eb50:	mov	r0, #1
   1eb54:	movw	r3, #10300	; 0x283c
   1eb58:	str	r0, [r4, #4]
   1eb5c:	add	r2, sp, #8
   1eb60:	mov	r0, r5
   1eb64:	mov	r1, #0
   1eb68:	mov	r6, #0
   1eb6c:	movt	r3, #1
   1eb70:	bl	2e194 <__assert_fail@plt+0x1b718>
   1eb74:	cmp	r0, #0
   1eb78:	beq	1ec28 <__assert_fail@plt+0xc1ac>
   1eb7c:	vldr	d16, [sp, #8]
   1eb80:	mov	r0, sp
   1eb84:	vmul.f64	d0, d16, d8
   1eb88:	bl	1271c <modf@plt>
   1eb8c:	vldr	d17, [pc, #220]	; 1ec70 <__assert_fail@plt+0xc1f4>
   1eb90:	vmul.f64	d16, d0, d17
   1eb94:	vcmpe.f64	d16, d17
   1eb98:	vmrs	APSR_nzcv, fpscr
   1eb9c:	bpl	1ec38 <__assert_fail@plt+0xc1bc>
   1eba0:	vldr	d17, [sp]
   1eba4:	vmov	s0, r7
   1eba8:	mov	r2, #0
   1ebac:	mov	r1, #0
   1ebb0:	vcvt.f64.s32	d18, s0
   1ebb4:	vsub.f64	d18, d18, d17
   1ebb8:	vcmpe.f64	d17, #0.0
   1ebbc:	vcvt.s32.f64	s0, d18
   1ebc0:	vcvt.s32.f64	s2, d18
   1ebc4:	vmov	r0, s2
   1ebc8:	vstr	s0, [r4, #8]
   1ebcc:	cmp	r7, r0
   1ebd0:	movwlt	r2, #1
   1ebd4:	vmrs	APSR_nzcv, fpscr
   1ebd8:	movwmi	r1, #1
   1ebdc:	cmp	r1, r2
   1ebe0:	bne	1ec58 <__assert_fail@plt+0xc1dc>
   1ebe4:	vmov	s0, r8
   1ebe8:	mov	r6, #1
   1ebec:	vcvt.f64.s32	d17, s0
   1ebf0:	vsub.f64	d18, d17, d16
   1ebf4:	vcmpe.f64	d16, d17
   1ebf8:	vcvt.s32.f64	s2, d18
   1ebfc:	vcvt.s32.f64	s0, d18
   1ec00:	vmrs	APSR_nzcv, fpscr
   1ec04:	vstr	s2, [r4, #12]
   1ec08:	ble	1ec28 <__assert_fail@plt+0xc1ac>
   1ec0c:	movw	r2, #51712	; 0xca00
   1ec10:	vmov	r1, s0
   1ec14:	sub	r0, r0, #1
   1ec18:	movt	r2, #15258	; 0x3b9a
   1ec1c:	str	r0, [r4, #8]
   1ec20:	add	r1, r1, r2
   1ec24:	str	r1, [r4, #12]
   1ec28:	mov	r0, r6
   1ec2c:	sub	sp, fp, #32
   1ec30:	vpop	{d8}
   1ec34:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ec38:	movw	r0, #39444	; 0x9a14
   1ec3c:	movw	r1, #38647	; 0x96f7
   1ec40:	movw	r3, #39470	; 0x9a2e
   1ec44:	movw	r2, #3149	; 0xc4d
   1ec48:	movt	r0, #4
   1ec4c:	movt	r1, #4
   1ec50:	movt	r3, #4
   1ec54:	bl	12a7c <__assert_fail@plt>
   1ec58:	ldr	r2, [fp, #8]
   1ec5c:	mov	r0, #1
   1ec60:	mov	r1, #0
   1ec64:	mov	r3, r5
   1ec68:	bl	12674 <error@plt>
   1ec6c:	nop	{0}
   1ec70:	andeq	r0, r0, r0
   1ec74:	bicmi	ip, sp, r5, ror #26
   1ec78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ec7c:	add	fp, sp, #28
   1ec80:	sub	sp, sp, #60	; 0x3c
   1ec84:	mov	r6, r0
   1ec88:	mov	r0, #0
   1ec8c:	cmp	r2, #0
   1ec90:	beq	1f0f4 <__assert_fail@plt+0xc678>
   1ec94:	mov	r7, r2
   1ec98:	ldr	r2, [r3]
   1ec9c:	mov	sl, r3
   1eca0:	ldr	r2, [r7, r2, lsl #2]
   1eca4:	cmp	r2, #0
   1eca8:	beq	1f0f4 <__assert_fail@plt+0xc678>
   1ecac:	ldr	r4, [r1, #12]
   1ecb0:	movw	r2, #39892	; 0x9bd4
   1ecb4:	mov	r0, r1
   1ecb8:	movt	r2, #4
   1ecbc:	mov	r1, r4
   1ecc0:	bl	18058 <__assert_fail@plt+0x55dc>
   1ecc4:	mov	r3, r0
   1ecc8:	movw	r0, #257	; 0x101
   1eccc:	mov	r1, #0
   1ecd0:	str	r0, [r3, #16]
   1ecd4:	movw	r0, #18828	; 0x498c
   1ecd8:	str	r1, [r3, #144]	; 0x90
   1ecdc:	movt	r0, #1
   1ece0:	cmp	r4, r0
   1ece4:	movwne	r2, #18608	; 0x48b0
   1ece8:	movne	r5, #1
   1ecec:	movtne	r2, #1
   1ecf0:	cmpne	r4, r2
   1ecf4:	bne	1ed0c <__assert_fail@plt+0xc290>
   1ecf8:	movw	r2, #56940	; 0xde6c
   1ecfc:	mov	r1, #1
   1ed00:	mov	r5, #0
   1ed04:	movt	r2, #5
   1ed08:	strb	r1, [r2, #80]	; 0x50
   1ed0c:	strb	r1, [r3, #140]	; 0x8c
   1ed10:	movw	r1, #16824	; 0x41b8
   1ed14:	sub	r0, r4, r0
   1ed18:	str	r3, [sp, #32]
   1ed1c:	str	r4, [sp, #20]
   1ed20:	movt	r1, #1
   1ed24:	clz	r0, r0
   1ed28:	sub	r1, r4, r1
   1ed2c:	lsr	r0, r0, #5
   1ed30:	clz	r1, r1
   1ed34:	lsr	r1, r1, #5
   1ed38:	orr	r9, r1, r0
   1ed3c:	cmp	r9, #1
   1ed40:	bne	1ee10 <__assert_fail@plt+0xc394>
   1ed44:	movw	r1, #56940	; 0xde6c
   1ed48:	mov	r0, #0
   1ed4c:	str	r5, [sp, #28]
   1ed50:	str	r6, [sp, #24]
   1ed54:	movt	r1, #5
   1ed58:	str	r0, [r3, #144]	; 0x90
   1ed5c:	strb	r0, [r1, #14]
   1ed60:	movw	r0, #40735	; 0x9f1f
   1ed64:	movt	r0, #4
   1ed68:	bl	126b0 <getenv@plt>
   1ed6c:	cmp	r0, #0
   1ed70:	beq	1ee04 <__assert_fail@plt+0xc388>
   1ed74:	movw	r5, #29888	; 0x74c0
   1ed78:	add	r8, sp, #36	; 0x24
   1ed7c:	sub	r6, fp, #32
   1ed80:	mov	r2, #1
   1ed84:	mov	r4, r0
   1ed88:	movt	r5, #4
   1ed8c:	mov	r3, r8
   1ed90:	str	r6, [sp]
   1ed94:	mov	r1, r5
   1ed98:	bl	22184 <__assert_fail@plt+0xf708>
   1ed9c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1eda0:	cmp	r1, #1
   1eda4:	beq	1edc8 <__assert_fail@plt+0xc34c>
   1eda8:	cmp	r1, #0
   1edac:	beq	1f0fc <__assert_fail@plt+0xc680>
   1edb0:	ldr	r2, [sp, #36]	; 0x24
   1edb4:	mov	r0, r4
   1edb8:	ldrb	r2, [r0, r2]!
   1edbc:	cmp	r2, #47	; 0x2f
   1edc0:	beq	1ede4 <__assert_fail@plt+0xc368>
   1edc4:	b	1f124 <__assert_fail@plt+0xc6a8>
   1edc8:	ldr	r2, [sp, #36]	; 0x24
   1edcc:	mov	r0, r4
   1edd0:	ldrb	r2, [r0, r2]!
   1edd4:	cmp	r2, #46	; 0x2e
   1edd8:	beq	1f0fc <__assert_fail@plt+0xc680>
   1eddc:	cmp	r2, #47	; 0x2f
   1ede0:	bne	1f124 <__assert_fail@plt+0xc6a8>
   1ede4:	mov	r0, r4
   1ede8:	mov	r1, r5
   1edec:	mov	r2, #0
   1edf0:	mov	r3, r8
   1edf4:	str	r6, [sp]
   1edf8:	bl	22184 <__assert_fail@plt+0xf708>
   1edfc:	cmp	r0, #0
   1ee00:	bne	1ed9c <__assert_fail@plt+0xc320>
   1ee04:	ldr	r3, [sp, #32]
   1ee08:	ldr	r5, [sp, #28]
   1ee0c:	b	1ee28 <__assert_fail@plt+0xc3ac>
   1ee10:	movw	r0, #54632	; 0xd568
   1ee14:	movt	r0, #5
   1ee18:	ldr	r0, [r0]
   1ee1c:	cmp	r0, #0
   1ee20:	beq	1f19c <__assert_fail@plt+0xc720>
   1ee24:	str	r0, [r3, #144]	; 0x90
   1ee28:	add	r2, r3, #40	; 0x28
   1ee2c:	mov	r0, #0
   1ee30:	str	sl, [sp, #28]
   1ee34:	str	r7, [sp, #16]
   1ee38:	strb	r0, [r2]
   1ee3c:	ldr	r1, [sl]
   1ee40:	mov	sl, r7
   1ee44:	ldr	r4, [sl, r1, lsl #2]!
   1ee48:	cmp	r4, #0
   1ee4c:	beq	1ef34 <__assert_fail@plt+0xc4b8>
   1ee50:	eor	r6, r9, #1
   1ee54:	eor	r5, r5, #1
   1ee58:	mov	r9, r1
   1ee5c:	mov	r8, #0
   1ee60:	mov	r7, #0
   1ee64:	str	r2, [sp, #12]
   1ee68:	str	r1, [sp, #24]
   1ee6c:	ldrb	r1, [r4]
   1ee70:	cmp	r1, #59	; 0x3b
   1ee74:	bne	1ee88 <__assert_fail@plt+0xc40c>
   1ee78:	ldrb	r0, [r4, #1]
   1ee7c:	cmp	r0, #0
   1ee80:	bne	1eeac <__assert_fail@plt+0xc430>
   1ee84:	b	1ef04 <__assert_fail@plt+0xc488>
   1ee88:	subs	r1, r1, #43	; 0x2b
   1ee8c:	movwne	r1, #1
   1ee90:	orrs	r1, r5, r1
   1ee94:	bne	1eeac <__assert_fail@plt+0xc430>
   1ee98:	cmp	r0, #0
   1ee9c:	beq	1eeac <__assert_fail@plt+0xc430>
   1eea0:	ldrb	r0, [r4, #1]
   1eea4:	cmp	r0, #0
   1eea8:	beq	1ef0c <__assert_fail@plt+0xc490>
   1eeac:	movw	r1, #40015	; 0x9c4f
   1eeb0:	mov	r0, r4
   1eeb4:	movt	r1, #4
   1eeb8:	bl	24ce0 <__assert_fail@plt+0x12264>
   1eebc:	mov	r1, #0
   1eec0:	cmp	r0, #0
   1eec4:	beq	1eeec <__assert_fail@plt+0xc470>
   1eec8:	cmp	r9, #0
   1eecc:	mov	r0, r9
   1eed0:	movwne	r0, #1
   1eed4:	orrs	r0, r0, r6
   1eed8:	beq	1f178 <__assert_fail@plt+0xc6fc>
   1eedc:	add	r7, r7, #1
   1eee0:	mov	r0, #1
   1eee4:	mov	r8, r4
   1eee8:	b	1eef0 <__assert_fail@plt+0xc474>
   1eeec:	mov	r0, #0
   1eef0:	ldr	r4, [sl, #4]!
   1eef4:	add	r9, r9, #1
   1eef8:	cmp	r4, #0
   1eefc:	bne	1ee6c <__assert_fail@plt+0xc3f0>
   1ef00:	b	1ef18 <__assert_fail@plt+0xc49c>
   1ef04:	mov	r1, #0
   1ef08:	b	1ef18 <__assert_fail@plt+0xc49c>
   1ef0c:	ldr	r0, [sp, #12]
   1ef10:	mov	r1, #1
   1ef14:	strb	r1, [r0]
   1ef18:	ldr	r0, [sp, #24]
   1ef1c:	cmp	r9, r0
   1ef20:	ldrne	r0, [sl]
   1ef24:	cmpne	r0, #0
   1ef28:	bne	1ef50 <__assert_fail@plt+0xc4d4>
   1ef2c:	ldr	r3, [sp, #32]
   1ef30:	mov	r1, r9
   1ef34:	ldr	r0, [sp, #28]
   1ef38:	str	r1, [r0]
   1ef3c:	mov	r0, r3
   1ef40:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   1ef44:	mov	r0, #0
   1ef48:	sub	sp, fp, #28
   1ef4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef50:	cmp	r1, #0
   1ef54:	beq	1ef94 <__assert_fail@plt+0xc518>
   1ef58:	ldr	r1, [sp, #20]
   1ef5c:	movw	r2, #16824	; 0x41b8
   1ef60:	movw	r0, #40745	; 0x9f29
   1ef64:	movw	r4, #34847	; 0x881f
   1ef68:	movt	r2, #1
   1ef6c:	movt	r0, #4
   1ef70:	movt	r4, #4
   1ef74:	cmp	r1, r2
   1ef78:	moveq	r4, r0
   1ef7c:	cmp	r7, #2
   1ef80:	bge	1f1c8 <__assert_fail@plt+0xc74c>
   1ef84:	mov	r0, r8
   1ef88:	bl	12788 <strlen@plt>
   1ef8c:	cmp	r0, #2
   1ef90:	bne	1f1f0 <__assert_fail@plt+0xc774>
   1ef94:	ldr	r8, [sp, #12]
   1ef98:	mov	r1, #2048	; 0x800
   1ef9c:	add	r7, r8, #4
   1efa0:	mov	r0, r7
   1efa4:	bl	20524 <__assert_fail@plt+0xdaa8>
   1efa8:	sub	r0, r0, #1
   1efac:	cmp	r0, #1
   1efb0:	bls	1f1bc <__assert_fail@plt+0xc740>
   1efb4:	mov	r0, r7
   1efb8:	bl	20628 <__assert_fail@plt+0xdbac>
   1efbc:	ldr	r4, [sp, #32]
   1efc0:	movw	r0, #23072	; 0x5a20
   1efc4:	ldr	r6, [sp, #24]
   1efc8:	movt	r0, #1
   1efcc:	str	r0, [r4, #76]	; 0x4c
   1efd0:	ldrb	r0, [r4, #40]	; 0x28
   1efd4:	cmp	r0, #0
   1efd8:	beq	1f06c <__assert_fail@plt+0xc5f0>
   1efdc:	mvn	r1, r6
   1efe0:	mov	r2, #0
   1efe4:	add	r5, r4, #88	; 0x58
   1efe8:	mov	r0, r7
   1efec:	add	r1, r9, r1
   1eff0:	str	r2, [r4, #132]	; 0x84
   1eff4:	str	r2, [r4, #80]	; 0x50
   1eff8:	str	r2, [r4, #84]	; 0x54
   1effc:	str	r2, [r4, #64]	; 0x40
   1f000:	str	r2, [r4, #68]	; 0x44
   1f004:	mov	r2, r8
   1f008:	str	r1, [r4, #72]	; 0x48
   1f00c:	mov	r1, r5
   1f010:	bl	2064c <__assert_fail@plt+0xdbd0>
   1f014:	sub	r0, r9, #1
   1f018:	cmp	r6, r0
   1f01c:	bge	1f0dc <__assert_fail@plt+0xc660>
   1f020:	ldr	r1, [sp, #16]
   1f024:	sub	r8, r0, r6
   1f028:	add	r4, r1, r6, lsl #2
   1f02c:	ldr	r6, [r4], #4
   1f030:	mov	r0, r6
   1f034:	bl	12788 <strlen@plt>
   1f038:	mov	r1, #0
   1f03c:	add	r3, r0, #1
   1f040:	mov	r0, r7
   1f044:	mov	r2, r6
   1f048:	str	r1, [sp]
   1f04c:	str	r1, [sp, #4]
   1f050:	mov	r1, #1
   1f054:	str	r1, [sp, #8]
   1f058:	mov	r1, r5
   1f05c:	bl	1fe40 <__assert_fail@plt+0xd3c4>
   1f060:	subs	r8, r8, #1
   1f064:	bne	1f02c <__assert_fail@plt+0xc5b0>
   1f068:	b	1f0dc <__assert_fail@plt+0xc660>
   1f06c:	mov	r0, #2
   1f070:	mov	r5, #0
   1f074:	str	r0, [r4, #64]	; 0x40
   1f078:	movw	r0, #40015	; 0x9c4f
   1f07c:	movt	r0, #4
   1f080:	str	r0, [r4, #68]	; 0x44
   1f084:	sub	r0, r9, r6
   1f088:	str	r5, [r4, #80]	; 0x50
   1f08c:	str	r5, [r4, #84]	; 0x54
   1f090:	str	r0, [r4, #136]	; 0x88
   1f094:	lsl	r0, r0, #2
   1f098:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   1f09c:	str	r0, [r4, #132]	; 0x84
   1f0a0:	add	r1, r4, #88	; 0x58
   1f0a4:	mov	r0, r7
   1f0a8:	mov	r2, r8
   1f0ac:	bl	2064c <__assert_fail@plt+0xdbd0>
   1f0b0:	ldr	r0, [r4, #136]	; 0x88
   1f0b4:	cmp	r0, #1
   1f0b8:	blt	1f0dc <__assert_fail@plt+0xc660>
   1f0bc:	ldr	r1, [sp, #16]
   1f0c0:	add	r1, r1, r6, lsl #2
   1f0c4:	ldr	r2, [r1, r5, lsl #2]
   1f0c8:	ldr	r3, [r4, #132]	; 0x84
   1f0cc:	str	r2, [r3, r5, lsl #2]
   1f0d0:	add	r5, r5, #1
   1f0d4:	cmp	r5, r0
   1f0d8:	blt	1f0c4 <__assert_fail@plt+0xc648>
   1f0dc:	ldr	r0, [sl]
   1f0e0:	cmp	r0, #0
   1f0e4:	ldr	r0, [sp, #28]
   1f0e8:	addne	r9, r9, #1
   1f0ec:	str	r9, [r0]
   1f0f0:	mov	r0, #1
   1f0f4:	sub	sp, fp, #28
   1f0f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f0fc:	movw	r1, #40324	; 0x9d84
   1f100:	mov	r0, #0
   1f104:	mov	r2, #5
   1f108:	movt	r1, #4
   1f10c:	bl	1253c <dcgettext@plt>
   1f110:	ldr	r3, [sp, #24]
   1f114:	mov	r2, r0
   1f118:	mov	r0, #1
   1f11c:	mov	r1, #0
   1f120:	bl	12674 <error@plt>
   1f124:	bl	12494 <strndup@plt>
   1f128:	movw	r1, #40575	; 0x9e7f
   1f12c:	mov	r5, r0
   1f130:	mov	r0, #0
   1f134:	mov	r2, #5
   1f138:	movt	r1, #4
   1f13c:	bl	1253c <dcgettext@plt>
   1f140:	mov	r6, r0
   1f144:	ldr	r0, [sp, #36]	; 0x24
   1f148:	cmp	r5, #0
   1f14c:	addeq	r5, r4, r0
   1f150:	mov	r0, #0
   1f154:	mov	r1, r5
   1f158:	bl	19994 <__assert_fail@plt+0x6f18>
   1f15c:	mov	r3, r0
   1f160:	ldr	r0, [sp, #24]
   1f164:	mov	r1, #0
   1f168:	mov	r2, r6
   1f16c:	str	r0, [sp]
   1f170:	mov	r0, #1
   1f174:	bl	12674 <error@plt>
   1f178:	movw	r1, #40018	; 0x9c52
   1f17c:	movt	r1, #4
   1f180:	mov	r0, #0
   1f184:	mov	r2, #5
   1f188:	bl	1253c <dcgettext@plt>
   1f18c:	mov	r2, r0
   1f190:	mov	r0, #1
   1f194:	mov	r1, #0
   1f198:	bl	12674 <error@plt>
   1f19c:	movw	r0, #39916	; 0x9bec
   1f1a0:	movw	r1, #38647	; 0x96f7
   1f1a4:	movw	r3, #39935	; 0x9bff
   1f1a8:	movw	r2, #2937	; 0xb79
   1f1ac:	movt	r0, #4
   1f1b0:	movt	r1, #4
   1f1b4:	movt	r3, #4
   1f1b8:	bl	12a7c <__assert_fail@plt>
   1f1bc:	movw	r1, #40283	; 0x9d5b
   1f1c0:	movt	r1, #4
   1f1c4:	b	1f180 <__assert_fail@plt+0xc704>
   1f1c8:	movw	r1, #40132	; 0x9cc4
   1f1cc:	mov	r0, #0
   1f1d0:	mov	r2, #5
   1f1d4:	movt	r1, #4
   1f1d8:	bl	1253c <dcgettext@plt>
   1f1dc:	mov	r2, r0
   1f1e0:	mov	r0, #1
   1f1e4:	mov	r1, #0
   1f1e8:	mov	r3, r4
   1f1ec:	bl	12674 <error@plt>
   1f1f0:	movw	r2, #40188	; 0x9cfc
   1f1f4:	add	r0, sp, #36	; 0x24
   1f1f8:	mov	r1, #19
   1f1fc:	mov	r3, r4
   1f200:	movt	r2, #4
   1f204:	bl	127e8 <snprintf@plt>
   1f208:	cmp	r0, #20
   1f20c:	bcs	1f288 <__assert_fail@plt+0xc80c>
   1f210:	movw	r1, #40226	; 0x9d22
   1f214:	mov	r0, #0
   1f218:	mov	r2, #5
   1f21c:	movt	r1, #4
   1f220:	bl	1253c <dcgettext@plt>
   1f224:	movw	r7, #56940	; 0xde6c
   1f228:	mov	r4, r0
   1f22c:	add	r2, sp, #36	; 0x24
   1f230:	mov	r0, #0
   1f234:	movt	r7, #5
   1f238:	ldr	r1, [r7, #72]	; 0x48
   1f23c:	bl	2c45c <__assert_fail@plt+0x199e0>
   1f240:	ldr	r1, [r7, #72]	; 0x48
   1f244:	movw	r2, #40015	; 0x9c4f
   1f248:	mov	r5, r0
   1f24c:	mov	r0, #1
   1f250:	movt	r2, #4
   1f254:	bl	2c45c <__assert_fail@plt+0x199e0>
   1f258:	ldr	r1, [r7, #72]	; 0x48
   1f25c:	mov	r6, r0
   1f260:	mov	r0, #2
   1f264:	mov	r2, r8
   1f268:	bl	2c45c <__assert_fail@plt+0x199e0>
   1f26c:	str	r0, [sp, #4]
   1f270:	mov	r0, #1
   1f274:	mov	r1, #0
   1f278:	mov	r2, r4
   1f27c:	mov	r3, r5
   1f280:	str	r6, [sp]
   1f284:	bl	12674 <error@plt>
   1f288:	movw	r0, #40205	; 0x9d0d
   1f28c:	movw	r1, #38647	; 0x96f7
   1f290:	movw	r3, #39935	; 0x9bff
   1f294:	movw	r2, #3014	; 0xbc6
   1f298:	movt	r0, #4
   1f29c:	movt	r1, #4
   1f2a0:	movt	r3, #4
   1f2a4:	bl	12a7c <__assert_fail@plt>
   1f2a8:	push	{r4, r5, r6, sl, fp, lr}
   1f2ac:	add	fp, sp, #16
   1f2b0:	mov	r5, r0
   1f2b4:	mov	r0, #0
   1f2b8:	mov	r4, r1
   1f2bc:	str	r0, [r1]
   1f2c0:	mov	r0, #0
   1f2c4:	bl	2aebc <__assert_fail@plt+0x18440>
   1f2c8:	movw	r1, #40749	; 0x9f2d
   1f2cc:	str	r0, [r4, #16]
   1f2d0:	mov	r0, r5
   1f2d4:	movt	r1, #4
   1f2d8:	bl	123d4 <strcmp@plt>
   1f2dc:	cmp	r0, #0
   1f2e0:	beq	1f334 <__assert_fail@plt+0xc8b8>
   1f2e4:	movw	r1, #40776	; 0x9f48
   1f2e8:	mov	r0, r5
   1f2ec:	movt	r1, #4
   1f2f0:	bl	123d4 <strcmp@plt>
   1f2f4:	cmp	r0, #0
   1f2f8:	beq	1f348 <__assert_fail@plt+0xc8cc>
   1f2fc:	movw	r0, #56896	; 0xde40
   1f300:	mov	r1, r5
   1f304:	movt	r0, #5
   1f308:	ldr	r0, [r0, #36]	; 0x24
   1f30c:	bl	19c0c <__assert_fail@plt+0x7190>
   1f310:	mov	r6, r4
   1f314:	cmp	r0, #0
   1f318:	str	r0, [r6, #4]!
   1f31c:	str	r5, [r6, #4]
   1f320:	bne	1f374 <__assert_fail@plt+0xc8f8>
   1f324:	bl	127d0 <__errno_location@plt>
   1f328:	ldr	r0, [r0]
   1f32c:	mov	r1, r5
   1f330:	bl	19a3c <__assert_fail@plt+0x6fc0>
   1f334:	movw	r1, #40761	; 0x9f39
   1f338:	movw	r0, #54600	; 0xd548
   1f33c:	movt	r1, #4
   1f340:	movt	r0, #5
   1f344:	b	1f358 <__assert_fail@plt+0xc8dc>
   1f348:	movw	r1, #34907	; 0x885b
   1f34c:	movw	r0, #54612	; 0xd554
   1f350:	movt	r1, #4
   1f354:	movt	r0, #5
   1f358:	ldr	r0, [r0]
   1f35c:	mov	r6, r4
   1f360:	mov	r2, #5
   1f364:	str	r0, [r6, #4]!
   1f368:	mov	r0, #0
   1f36c:	bl	1253c <dcgettext@plt>
   1f370:	str	r0, [r6, #4]
   1f374:	ldr	r0, [r6]
   1f378:	bl	12848 <fileno@plt>
   1f37c:	cmn	r0, #1
   1f380:	moveq	r0, #0
   1f384:	strbeq	r0, [r4, #12]
   1f388:	popeq	{r4, r5, r6, sl, fp, pc}
   1f38c:	bl	129ec <isatty@plt>
   1f390:	cmp	r0, #0
   1f394:	movwne	r0, #1
   1f398:	strb	r0, [r4, #12]
   1f39c:	pop	{r4, r5, r6, sl, fp, pc}
   1f3a0:	push	{r4, r5, r6, r7, fp, lr}
   1f3a4:	add	fp, sp, #16
   1f3a8:	sub	sp, sp, #24
   1f3ac:	mov	r4, #0
   1f3b0:	cmp	r0, #0
   1f3b4:	beq	1f458 <__assert_fail@plt+0xc9dc>
   1f3b8:	mov	r5, r2
   1f3bc:	ldr	r2, [r1]
   1f3c0:	ldr	r6, [r0, r2, lsl #2]
   1f3c4:	cmp	r6, #0
   1f3c8:	beq	1f458 <__assert_fail@plt+0xc9dc>
   1f3cc:	add	r0, r2, #1
   1f3d0:	str	r0, [r1]
   1f3d4:	ldrb	r0, [r6]
   1f3d8:	cmp	r0, #45	; 0x2d
   1f3dc:	beq	1f3f8 <__assert_fail@plt+0xc97c>
   1f3e0:	cmp	r0, #43	; 0x2b
   1f3e4:	mov	r7, #2
   1f3e8:	mov	r0, r6
   1f3ec:	addeq	r0, r6, #1
   1f3f0:	moveq	r7, #0
   1f3f4:	b	1f400 <__assert_fail@plt+0xc984>
   1f3f8:	add	r0, r6, #1
   1f3fc:	mov	r7, #1
   1f400:	movw	r1, #34847	; 0x881f
   1f404:	add	r3, sp, #8
   1f408:	mov	r2, #10
   1f40c:	movt	r1, #4
   1f410:	str	r1, [sp]
   1f414:	add	r1, sp, #20
   1f418:	bl	2ea50 <__assert_fail@plt+0x1bfd4>
   1f41c:	cmp	r0, #0
   1f420:	bne	1f458 <__assert_fail@plt+0xc9dc>
   1f424:	mov	r0, r5
   1f428:	mov	r1, r6
   1f42c:	bl	18090 <__assert_fail@plt+0x5614>
   1f430:	str	r7, [r0, #40]	; 0x28
   1f434:	mov	r4, r0
   1f438:	ldr	r0, [sp, #8]
   1f43c:	ldr	r1, [sp, #12]
   1f440:	strd	r0, [r4, #48]	; 0x30
   1f444:	movw	r0, #56940	; 0xde6c
   1f448:	movt	r0, #5
   1f44c:	ldrb	r0, [r0, #44]	; 0x2c
   1f450:	tst	r0, #1
   1f454:	bne	1f464 <__assert_fail@plt+0xc9e8>
   1f458:	mov	r0, r4
   1f45c:	sub	sp, fp, #16
   1f460:	pop	{r4, r5, r6, r7, fp, pc}
   1f464:	movw	r6, #54600	; 0xd548
   1f468:	ldr	r2, [r4, #4]
   1f46c:	movw	r1, #39639	; 0x9ad7
   1f470:	add	r5, r4, #48	; 0x30
   1f474:	movt	r6, #5
   1f478:	movt	r1, #4
   1f47c:	ldr	r0, [r6]
   1f480:	bl	127c4 <fprintf@plt>
   1f484:	ldr	r0, [r6]
   1f488:	cmp	r7, #1
   1f48c:	beq	1f4ac <__assert_fail@plt+0xca30>
   1f490:	cmp	r7, #0
   1f494:	bne	1f4c0 <__assert_fail@plt+0xca44>
   1f498:	movw	r3, #39680	; 0x9b00
   1f49c:	movw	r2, #39674	; 0x9afa
   1f4a0:	movt	r3, #4
   1f4a4:	movt	r2, #4
   1f4a8:	b	1f4d0 <__assert_fail@plt+0xca54>
   1f4ac:	movw	r3, #39683	; 0x9b03
   1f4b0:	movw	r2, #45547	; 0xb1eb
   1f4b4:	movt	r3, #4
   1f4b8:	movt	r2, #4
   1f4bc:	b	1f4d0 <__assert_fail@plt+0xca54>
   1f4c0:	movw	r3, #40839	; 0x9f87
   1f4c4:	movw	r2, #39677	; 0x9afd
   1f4c8:	movt	r3, #4
   1f4cc:	movt	r2, #4
   1f4d0:	movw	r1, #39653	; 0x9ae5
   1f4d4:	movt	r1, #4
   1f4d8:	bl	127c4 <fprintf@plt>
   1f4dc:	ldrd	r2, [r5]
   1f4e0:	ldr	r0, [r6]
   1f4e4:	movw	r1, #40842	; 0x9f8a
   1f4e8:	movt	r1, #4
   1f4ec:	bl	127c4 <fprintf@plt>
   1f4f0:	b	1f458 <__assert_fail@plt+0xc9dc>
   1f4f4:	push	{r4, sl, fp, lr}
   1f4f8:	add	fp, sp, #8
   1f4fc:	movw	r4, #56536	; 0xdcd8
   1f500:	movt	r4, #5
   1f504:	ldrb	r0, [r4]
   1f508:	cmp	r0, #0
   1f50c:	popne	{r4, sl, fp, pc}
   1f510:	movw	r0, #41103	; 0xa08f
   1f514:	mov	r2, #0
   1f518:	movt	r0, #4
   1f51c:	mov	r1, r0
   1f520:	bl	12698 <fnmatch@plt>
   1f524:	cmp	r0, #0
   1f528:	bne	1f578 <__assert_fail@plt+0xcafc>
   1f52c:	movw	r0, #41107	; 0xa093
   1f530:	movw	r1, #41103	; 0xa08f
   1f534:	mov	r2, #0
   1f538:	movt	r0, #4
   1f53c:	movt	r1, #4
   1f540:	bl	12698 <fnmatch@plt>
   1f544:	cmp	r0, #0
   1f548:	beq	1f578 <__assert_fail@plt+0xcafc>
   1f54c:	movw	r0, #41107	; 0xa093
   1f550:	movw	r1, #41103	; 0xa08f
   1f554:	mov	r2, #16
   1f558:	movt	r0, #4
   1f55c:	movt	r1, #4
   1f560:	bl	12698 <fnmatch@plt>
   1f564:	cmp	r0, #0
   1f568:	bne	1f578 <__assert_fail@plt+0xcafc>
   1f56c:	mov	r0, #1
   1f570:	strb	r0, [r4]
   1f574:	pop	{r4, sl, fp, pc}
   1f578:	movw	r1, #41111	; 0xa097
   1f57c:	mov	r0, #0
   1f580:	mov	r2, #5
   1f584:	movt	r1, #4
   1f588:	bl	1253c <dcgettext@plt>
   1f58c:	mov	r2, r0
   1f590:	mov	r0, #1
   1f594:	mov	r1, #0
   1f598:	bl	12674 <error@plt>
   1f59c:	push	{r4, r5, r6, r7, fp, lr}
   1f5a0:	add	fp, sp, #16
   1f5a4:	sub	sp, sp, #8
   1f5a8:	mov	r5, r0
   1f5ac:	movw	r0, #56940	; 0xde6c
   1f5b0:	mov	r4, r1
   1f5b4:	movt	r0, #5
   1f5b8:	ldrb	r1, [r0, #17]
   1f5bc:	cmp	r1, #0
   1f5c0:	bne	1f648 <__assert_fail@plt+0xcbcc>
   1f5c4:	ldrb	r0, [r0, #16]
   1f5c8:	cmp	r0, #0
   1f5cc:	beq	1f648 <__assert_fail@plt+0xcbcc>
   1f5d0:	mov	r0, r2
   1f5d4:	mov	r1, #47	; 0x2f
   1f5d8:	bl	12794 <strchr@plt>
   1f5dc:	cmp	r0, #0
   1f5e0:	beq	1f648 <__assert_fail@plt+0xcbcc>
   1f5e4:	movw	r1, #41166	; 0xa0ce
   1f5e8:	mov	r0, #0
   1f5ec:	mov	r2, #5
   1f5f0:	movt	r1, #4
   1f5f4:	bl	1253c <dcgettext@plt>
   1f5f8:	mov	r6, r0
   1f5fc:	mov	r0, #0
   1f600:	mov	r1, r5
   1f604:	bl	19994 <__assert_fail@plt+0x6f18>
   1f608:	movw	r1, #29730	; 0x7422
   1f60c:	mov	r5, r0
   1f610:	mov	r0, #1
   1f614:	movt	r1, #4
   1f618:	bl	19994 <__assert_fail@plt+0x6f18>
   1f61c:	mov	r7, r0
   1f620:	mov	r0, #2
   1f624:	mov	r1, r4
   1f628:	bl	19994 <__assert_fail@plt+0x6f18>
   1f62c:	str	r0, [sp, #4]
   1f630:	mov	r0, #0
   1f634:	mov	r1, #0
   1f638:	mov	r2, r6
   1f63c:	mov	r3, r5
   1f640:	str	r7, [sp]
   1f644:	bl	12674 <error@plt>
   1f648:	sub	sp, fp, #16
   1f64c:	pop	{r4, r5, r6, r7, fp, pc}
   1f650:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1f654:	add	fp, sp, #24
   1f658:	sub	sp, sp, #8
   1f65c:	mov	r9, r3
   1f660:	mov	r4, r2
   1f664:	mov	r6, r1
   1f668:	mov	r7, r0
   1f66c:	bl	1f4f4 <__assert_fail@plt+0xca78>
   1f670:	mov	r5, #0
   1f674:	cmp	r6, #0
   1f678:	beq	1f6f4 <__assert_fail@plt+0xcc78>
   1f67c:	ldr	r0, [r4]
   1f680:	ldr	r6, [r6, r0, lsl #2]
   1f684:	cmp	r6, #0
   1f688:	beq	1f6f4 <__assert_fail@plt+0xcc78>
   1f68c:	ldr	r8, [fp, #8]
   1f690:	add	r0, r0, #1
   1f694:	mov	r2, r6
   1f698:	str	r0, [r4]
   1f69c:	mov	r0, r7
   1f6a0:	mov	r1, r8
   1f6a4:	bl	18058 <__assert_fail@plt+0x55dc>
   1f6a8:	movw	r1, #41080	; 0xa078
   1f6ac:	mov	r7, r0
   1f6b0:	mov	r0, #0
   1f6b4:	strh	r0, [r7, #18]
   1f6b8:	movt	r1, #4
   1f6bc:	mov	r0, r6
   1f6c0:	str	r6, [r7, #40]	; 0x28
   1f6c4:	bl	129b0 <strpbrk@plt>
   1f6c8:	cmp	r0, #0
   1f6cc:	add	r1, pc, #172	; 0xac
   1f6d0:	movw	r0, #56940	; 0xde6c
   1f6d4:	mov	r5, #1
   1f6d8:	addeq	r1, r1, #4
   1f6dc:	movt	r0, #5
   1f6e0:	vldr	s0, [r1]
   1f6e4:	vstr	s0, [r7, #28]
   1f6e8:	ldrb	r0, [r0, #17]
   1f6ec:	cmp	r0, #0
   1f6f0:	beq	1f700 <__assert_fail@plt+0xcc84>
   1f6f4:	mov	r0, r5
   1f6f8:	sub	sp, fp, #24
   1f6fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f700:	mov	r0, r6
   1f704:	mov	r1, #47	; 0x2f
   1f708:	bl	128f0 <strrchr@plt>
   1f70c:	cmp	r0, #0
   1f710:	beq	1f6f4 <__assert_fail@plt+0xcc78>
   1f714:	ldrb	r0, [r0, #1]
   1f718:	cmp	r0, #0
   1f71c:	bne	1f6f4 <__assert_fail@plt+0xcc78>
   1f720:	movw	r0, #17568	; 0x44a0
   1f724:	movt	r0, #1
   1f728:	sub	r0, r8, r0
   1f72c:	clz	r0, r0
   1f730:	lsr	r1, r0, #5
   1f734:	mov	r0, r6
   1f738:	bl	15e80 <__assert_fail@plt+0x3404>
   1f73c:	cmp	r0, #0
   1f740:	bne	1f6f4 <__assert_fail@plt+0xcc78>
   1f744:	movw	r1, #41344	; 0xa180
   1f748:	mov	r0, #0
   1f74c:	mov	r2, #5
   1f750:	movt	r1, #4
   1f754:	bl	1253c <dcgettext@plt>
   1f758:	mov	r2, r0
   1f75c:	mov	r0, #0
   1f760:	mov	r1, #0
   1f764:	mov	r3, r9
   1f768:	str	r6, [sp]
   1f76c:	bl	12674 <error@plt>
   1f770:	movw	r0, #52343	; 0xcc77
   1f774:	movt	r0, #12843	; 0x322b
   1f778:	str	r0, [r7, #28]
   1f77c:	b	1f6f4 <__assert_fail@plt+0xcc78>
   1f780:	svccc	0x004ccccd
   1f784:	stclcc	12, cr12, [ip, #820]	; 0x334
   1f788:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f78c:	add	fp, sp, #24
   1f790:	sub	sp, sp, #8
   1f794:	mov	r6, r3
   1f798:	mov	r3, r0
   1f79c:	mov	r0, #0
   1f7a0:	cmp	r3, #0
   1f7a4:	beq	1f87c <__assert_fail@plt+0xce00>
   1f7a8:	ldr	r7, [r1]
   1f7ac:	ldr	r4, [r3, r7, lsl #2]
   1f7b0:	cmp	r4, #0
   1f7b4:	beq	1f87c <__assert_fail@plt+0xce00>
   1f7b8:	add	r0, r7, #1
   1f7bc:	str	r0, [r1]
   1f7c0:	movw	r1, #19528	; 0x4c48
   1f7c4:	mov	r0, r2
   1f7c8:	mov	r2, r4
   1f7cc:	movt	r1, #1
   1f7d0:	bl	18058 <__assert_fail@plt+0x55dc>
   1f7d4:	mov	r8, #0
   1f7d8:	mov	r5, r0
   1f7dc:	strh	r8, [r0, #18]
   1f7e0:	mov	r0, #32
   1f7e4:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   1f7e8:	mov	r7, r0
   1f7ec:	str	r0, [r5, #40]	; 0x28
   1f7f0:	mov	r0, #100	; 0x64
   1f7f4:	str	r0, [r7, #4]
   1f7f8:	mov	r0, #100	; 0x64
   1f7fc:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   1f800:	str	r0, [r7]
   1f804:	mov	r0, r6
   1f808:	str	r8, [r7, #16]
   1f80c:	bl	345fc <__assert_fail@plt+0x21b80>
   1f810:	mov	r0, r4
   1f814:	str	r6, [r7, #12]
   1f818:	str	r8, [r7, #20]
   1f81c:	bl	12788 <strlen@plt>
   1f820:	mov	r1, r0
   1f824:	mov	r0, r4
   1f828:	mov	r2, r7
   1f82c:	bl	330d0 <__assert_fail@plt+0x20654>
   1f830:	cmp	r0, #0
   1f834:	bne	1f884 <__assert_fail@plt+0xce08>
   1f838:	movw	r1, #41080	; 0xa078
   1f83c:	mov	r0, r4
   1f840:	movt	r1, #4
   1f844:	bl	129b0 <strpbrk@plt>
   1f848:	cmp	r0, #0
   1f84c:	beq	1f858 <__assert_fail@plt+0xcddc>
   1f850:	vldr	s0, [pc, #92]	; 1f8b4 <__assert_fail@plt+0xce38>
   1f854:	b	1f874 <__assert_fail@plt+0xcdf8>
   1f858:	mov	r0, r4
   1f85c:	mov	r1, #46	; 0x2e
   1f860:	bl	12794 <strchr@plt>
   1f864:	add	r1, pc, #76	; 0x4c
   1f868:	cmp	r0, #0
   1f86c:	addeq	r1, r1, #4
   1f870:	vldr	s0, [r1]
   1f874:	mov	r0, #1
   1f878:	vstr	s0, [r5, #28]
   1f87c:	sub	sp, fp, #24
   1f880:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f884:	movw	r1, #41408	; 0xa1c0
   1f888:	mov	r6, r0
   1f88c:	mov	r0, #0
   1f890:	mov	r2, #5
   1f894:	movt	r1, #4
   1f898:	bl	1253c <dcgettext@plt>
   1f89c:	mov	r2, r0
   1f8a0:	mov	r0, #1
   1f8a4:	mov	r1, #0
   1f8a8:	mov	r3, r4
   1f8ac:	str	r6, [sp]
   1f8b0:	bl	12674 <error@plt>
   1f8b4:	svccc	0x004ccccd
   1f8b8:	svccc	0x004ccccd
   1f8bc:	stclcc	12, cr12, [ip, #820]	; 0x334
   1f8c0:	push	{r4, r5, r6, sl, fp, lr}
   1f8c4:	add	fp, sp, #16
   1f8c8:	sub	sp, sp, #8
   1f8cc:	mov	r6, r2
   1f8d0:	mov	r2, r0
   1f8d4:	mov	r0, #0
   1f8d8:	cmp	r2, #0
   1f8dc:	beq	1f980 <__assert_fail@plt+0xcf04>
   1f8e0:	ldr	r3, [r1]
   1f8e4:	ldr	r5, [r2, r3, lsl #2]
   1f8e8:	cmp	r5, #0
   1f8ec:	beq	1f980 <__assert_fail@plt+0xcf04>
   1f8f0:	add	r0, r2, r3, lsl #2
   1f8f4:	ldr	r4, [r0, #-4]
   1f8f8:	add	r0, r3, #1
   1f8fc:	str	r0, [r1]
   1f900:	movw	r1, #40848	; 0x9f90
   1f904:	mov	r0, r5
   1f908:	movt	r1, #4
   1f90c:	bl	12a70 <strspn@plt>
   1f910:	cmp	r0, #1
   1f914:	blt	1f988 <__assert_fail@plt+0xcf0c>
   1f918:	ldrb	r0, [r5, r0]
   1f91c:	cmp	r0, #0
   1f920:	bne	1f988 <__assert_fail@plt+0xcf0c>
   1f924:	movw	r0, #56940	; 0xde6c
   1f928:	movt	r0, #5
   1f92c:	ldr	r1, [r0, #72]	; 0x48
   1f930:	mov	r0, r5
   1f934:	bl	22078 <__assert_fail@plt+0xf5fc>
   1f938:	cmp	r0, #0
   1f93c:	str	r0, [r6]
   1f940:	blt	1f988 <__assert_fail@plt+0xcf0c>
   1f944:	movw	r1, #56532	; 0xdcd4
   1f948:	movt	r1, #5
   1f94c:	ldr	r0, [r1]
   1f950:	cmp	r0, #0
   1f954:	bne	1f968 <__assert_fail@plt+0xceec>
   1f958:	movw	r0, #42480	; 0xa5f0
   1f95c:	movt	r0, #4
   1f960:	add	r0, r0, #1296	; 0x510
   1f964:	str	r0, [r1]
   1f968:	bl	180ec <__assert_fail@plt+0x5670>
   1f96c:	mov	r1, #0
   1f970:	strh	r1, [r0, #18]
   1f974:	mov	r1, #1065353216	; 0x3f800000
   1f978:	str	r1, [r0, #28]
   1f97c:	mov	r0, #1
   1f980:	sub	sp, fp, #16
   1f984:	pop	{r4, r5, r6, sl, fp, pc}
   1f988:	movw	r1, #41454	; 0xa1ee
   1f98c:	mov	r0, #0
   1f990:	mov	r2, #5
   1f994:	movt	r1, #4
   1f998:	bl	1253c <dcgettext@plt>
   1f99c:	mov	r6, r0
   1f9a0:	movw	r0, #56940	; 0xde6c
   1f9a4:	mov	r2, r5
   1f9a8:	movt	r0, #5
   1f9ac:	ldr	r1, [r0, #72]	; 0x48
   1f9b0:	mov	r0, #0
   1f9b4:	bl	2c45c <__assert_fail@plt+0x199e0>
   1f9b8:	str	r0, [sp]
   1f9bc:	mov	r0, #1
   1f9c0:	mov	r1, #0
   1f9c4:	mov	r2, r6
   1f9c8:	mov	r3, r4
   1f9cc:	bl	12674 <error@plt>
   1f9d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f9d4:	add	fp, sp, #24
   1f9d8:	sub	sp, sp, #8
   1f9dc:	movw	r4, #20424	; 0x4fc8
   1f9e0:	movw	r8, #41871	; 0xa38f
   1f9e4:	mov	r6, r3
   1f9e8:	mov	r3, r0
   1f9ec:	movw	r0, #41864	; 0xa388
   1f9f0:	movt	r4, #1
   1f9f4:	movt	r0, #4
   1f9f8:	movt	r8, #4
   1f9fc:	cmp	r6, r4
   1fa00:	moveq	r8, r0
   1fa04:	mov	r0, #0
   1fa08:	cmp	r3, #0
   1fa0c:	beq	1fc14 <__assert_fail@plt+0xd198>
   1fa10:	ldr	r7, [r1]
   1fa14:	ldr	r5, [r3, r7, lsl #2]
   1fa18:	cmp	r5, #0
   1fa1c:	beq	1fc14 <__assert_fail@plt+0xd198>
   1fa20:	add	r0, r7, #1
   1fa24:	str	r0, [r1]
   1fa28:	ldrb	r0, [r5]
   1fa2c:	cmp	r0, #0
   1fa30:	beq	1fca0 <__assert_fail@plt+0xd224>
   1fa34:	mov	r0, r2
   1fa38:	mov	r1, r6
   1fa3c:	mov	r2, r5
   1fa40:	bl	18058 <__assert_fail@plt+0x55dc>
   1fa44:	mov	r1, #0
   1fa48:	vldr	s0, [pc, #604]	; 1fcac <__assert_fail@plt+0xd230>
   1fa4c:	vldr	s2, [pc, #604]	; 1fcb0 <__assert_fail@plt+0xd234>
   1fa50:	vldr	s4, [pc, #620]	; 1fcc4 <__assert_fail@plt+0xd248>
   1fa54:	vldr	s6, [pc, #612]	; 1fcc0 <__assert_fail@plt+0xd244>
   1fa58:	vldr	s10, [pc, #604]	; 1fcbc <__assert_fail@plt+0xd240>
   1fa5c:	vldr	s12, [pc, #596]	; 1fcb8 <__assert_fail@plt+0xd23c>
   1fa60:	vldr	s14, [pc, #588]	; 1fcb4 <__assert_fail@plt+0xd238>
   1fa64:	mov	r3, #1
   1fa68:	vmov.f32	s8, #108	; 0x3f600000  0.875
   1fa6c:	str	r1, [r0, #28]
   1fa70:	subs	r1, r6, r4
   1fa74:	clz	r2, r1
   1fa78:	movwne	r1, #1
   1fa7c:	strb	r1, [r0, #19]
   1fa80:	lsr	r1, r2, #5
   1fa84:	mvn	r2, #67	; 0x43
   1fa88:	strb	r1, [r0, #18]
   1fa8c:	add	r1, r0, #40	; 0x28
   1fa90:	ldrb	r4, [r5]
   1fa94:	uxtab	r7, r2, r4
   1fa98:	mov	r6, r5
   1fa9c:	cmp	r7, #47	; 0x2f
   1faa0:	bhi	1fc04 <__assert_fail@plt+0xd188>
   1faa4:	add	r4, pc, #8
   1faa8:	mov	r5, #0
   1faac:	vmov.f32	s1, s2
   1fab0:	ldr	pc, [r4, r7, lsl #2]
   1fab4:	andeq	pc, r1, r8, lsr #24
   1fab8:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fabc:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fac0:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fac4:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fac8:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1facc:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fad0:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fad4:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fad8:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fadc:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fae0:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fae4:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fae8:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1faec:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1faf0:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1faf4:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1faf8:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fafc:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fb00:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fb04:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fb08:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fb0c:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fb10:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fb14:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fb18:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fb1c:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fb20:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fb24:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fb28:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fb2c:			; <UNDEFINED> instruction: 0x0001fbb8
   1fb30:	andeq	pc, r1, r4, ror fp	; <UNPREDICTABLE>
   1fb34:	muleq	r1, r8, fp
   1fb38:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fb3c:			; <UNDEFINED> instruction: 0x0001fbb0
   1fb40:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fb44:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fb48:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fb4c:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fb50:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fb54:	andeq	pc, r1, r4, lsr #23
   1fb58:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fb5c:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fb60:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fb64:	andeq	pc, r1, r0, lsl #23
   1fb68:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fb6c:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fb70:	andeq	pc, r1, ip, lsl #23
   1fb74:	mov	r5, #1
   1fb78:	vmov.f32	s1, s4
   1fb7c:	b	1fbb8 <__assert_fail@plt+0xd13c>
   1fb80:	mov	r5, #5
   1fb84:	vmov.f32	s1, s12
   1fb88:	b	1fbb8 <__assert_fail@plt+0xd13c>
   1fb8c:	mov	r5, #6
   1fb90:	vmov.f32	s1, s14
   1fb94:	b	1fbb8 <__assert_fail@plt+0xd13c>
   1fb98:	mov	r5, #2
   1fb9c:	vmov.f32	s1, s6
   1fba0:	b	1fbb8 <__assert_fail@plt+0xd13c>
   1fba4:	mov	r5, #4
   1fba8:	vmov.f32	s1, s10
   1fbac:	b	1fbb8 <__assert_fail@plt+0xd13c>
   1fbb0:	mov	r5, #3
   1fbb4:	vmov.f32	s1, s8
   1fbb8:	ldrb	r7, [r1, r5]
   1fbbc:	cmp	r7, #0
   1fbc0:	bne	1fc4c <__assert_fail@plt+0xd1d0>
   1fbc4:	vadd.f32	s0, s1, s0
   1fbc8:	vstr	s0, [r0, #28]
   1fbcc:	strb	r3, [r1, r5]
   1fbd0:	mov	r5, r6
   1fbd4:	ldrb	r4, [r5, #1]!
   1fbd8:	cmp	r4, #0
   1fbdc:	beq	1fa94 <__assert_fail@plt+0xd018>
   1fbe0:	cmp	r4, #44	; 0x2c
   1fbe4:	bne	1fc78 <__assert_fail@plt+0xd1fc>
   1fbe8:	ldrb	r4, [r6, #2]!
   1fbec:	cmp	r4, #0
   1fbf0:	mov	r5, r6
   1fbf4:	bne	1fa94 <__assert_fail@plt+0xd018>
   1fbf8:	movw	r1, #42159	; 0xa4af
   1fbfc:	movt	r1, #4
   1fc00:	b	1fc80 <__assert_fail@plt+0xd204>
   1fc04:	uxtb	r0, r4
   1fc08:	cmp	r0, #0
   1fc0c:	bne	1fc1c <__assert_fail@plt+0xd1a0>
   1fc10:	mov	r0, #1
   1fc14:	sub	sp, fp, #24
   1fc18:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1fc1c:	movw	r1, #42029	; 0xa42d
   1fc20:	movt	r1, #4
   1fc24:	b	1fc30 <__assert_fail@plt+0xd1b4>
   1fc28:	movw	r1, #41928	; 0xa3c8
   1fc2c:	movt	r1, #4
   1fc30:	mov	r0, #0
   1fc34:	mov	r2, #5
   1fc38:	bl	1253c <dcgettext@plt>
   1fc3c:	mov	r2, r0
   1fc40:	ldrb	r0, [r6]
   1fc44:	str	r0, [sp]
   1fc48:	b	1fc90 <__assert_fail@plt+0xd214>
   1fc4c:	movw	r1, #42056	; 0xa448
   1fc50:	mov	r0, #0
   1fc54:	mov	r2, #5
   1fc58:	movt	r1, #4
   1fc5c:	bl	1253c <dcgettext@plt>
   1fc60:	ldrb	r3, [r6]
   1fc64:	mov	r2, r0
   1fc68:	mov	r0, #1
   1fc6c:	mov	r1, #0
   1fc70:	str	r8, [sp]
   1fc74:	bl	12674 <error@plt>
   1fc78:	movw	r1, #42109	; 0xa47d
   1fc7c:	movt	r1, #4
   1fc80:	mov	r0, #0
   1fc84:	mov	r2, #5
   1fc88:	bl	1253c <dcgettext@plt>
   1fc8c:	mov	r2, r0
   1fc90:	mov	r0, #1
   1fc94:	mov	r1, #0
   1fc98:	mov	r3, r8
   1fc9c:	bl	12674 <error@plt>
   1fca0:	movw	r1, #41877	; 0xa395
   1fca4:	movt	r1, #4
   1fca8:	b	1fc80 <__assert_fail@plt+0xd204>
   1fcac:	andeq	r0, r0, r0
   1fcb0:	bcc	1a51f68 <stdout@@GLIBC_2.4+0x19f4a14>
   1fcb4:			; <UNDEFINED> instruction: 0x378560fd
   1fcb8:	usatcc	r7, #29, lr, asr #16
   1fcbc:	cfldr64cc	mvdx12, [lr], #436	; 0x1b4
   1fcc0:	ldccc	3, cr13, [ip, #364]!	; 0x16c
   1fcc4:	stmibcc	r8!, {r2, r4, r5, r6, r9, lr}^
   1fcc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fccc:	add	fp, sp, #28
   1fcd0:	sub	sp, sp, #20
   1fcd4:	movw	r5, #56540	; 0xdcdc
   1fcd8:	str	r1, [sp, #12]
   1fcdc:	str	r0, [sp, #16]
   1fce0:	ldr	r4, [r0, #12]
   1fce4:	ldr	r0, [fp, #20]
   1fce8:	ldr	r1, [fp, #12]
   1fcec:	mov	r9, r3
   1fcf0:	mov	r7, r2
   1fcf4:	movt	r5, #5
   1fcf8:	ldr	r6, [r5]
   1fcfc:	cmp	r6, #0
   1fd00:	bne	1fd20 <__assert_fail@plt+0xd2a4>
   1fd04:	mov	r8, r0
   1fd08:	add	r0, r4, #1
   1fd0c:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   1fd10:	ldr	r1, [fp, #12]
   1fd14:	mov	r6, r0
   1fd18:	mov	r0, r8
   1fd1c:	str	r6, [r5]
   1fd20:	sub	sl, r4, #1
   1fd24:	add	r5, r0, r1
   1fd28:	ldr	r0, [sp, #16]
   1fd2c:	ldr	r1, [r0, #24]
   1fd30:	mov	r0, r7
   1fd34:	bl	24ce0 <__assert_fail@plt+0x12264>
   1fd38:	cmp	r0, #0
   1fd3c:	mov	r4, r9
   1fd40:	subne	r4, r0, r7
   1fd44:	cmp	sl, r4
   1fd48:	bls	1fdd4 <__assert_fail@plt+0xd358>
   1fd4c:	mov	r8, r0
   1fd50:	mov	r0, r6
   1fd54:	mov	r1, r7
   1fd58:	mov	r2, r4
   1fd5c:	bl	12818 <strncpy@plt>
   1fd60:	sub	r9, r9, r4
   1fd64:	add	r7, r7, r4
   1fd68:	add	r6, r6, r4
   1fd6c:	sub	sl, sl, r4
   1fd70:	cmp	r8, #0
   1fd74:	beq	1fdc4 <__assert_fail@plt+0xd348>
   1fd78:	ldr	r4, [fp, #12]
   1fd7c:	ldr	r1, [fp, #8]
   1fd80:	cmp	sl, r5
   1fd84:	bls	1fdd4 <__assert_fail@plt+0xd358>
   1fd88:	cmp	r1, #0
   1fd8c:	beq	1fd9c <__assert_fail@plt+0xd320>
   1fd90:	mov	r0, r6
   1fd94:	bl	12638 <strcpy@plt>
   1fd98:	add	r6, r6, r4
   1fd9c:	ldr	r1, [fp, #16]
   1fda0:	mov	r0, r6
   1fda4:	sub	sl, sl, r5
   1fda8:	bl	12638 <strcpy@plt>
   1fdac:	ldr	r0, [fp, #20]
   1fdb0:	add	r6, r6, r0
   1fdb4:	ldr	r0, [sp, #16]
   1fdb8:	ldr	r0, [r0, #20]
   1fdbc:	sub	r9, r9, r0
   1fdc0:	add	r7, r7, r0
   1fdc4:	ldrb	r0, [r7]
   1fdc8:	cmp	r0, #0
   1fdcc:	bne	1fd28 <__assert_fail@plt+0xd2ac>
   1fdd0:	b	1fde0 <__assert_fail@plt+0xd364>
   1fdd4:	ldrb	r0, [r7]
   1fdd8:	cmp	r0, #0
   1fddc:	bne	1fe1c <__assert_fail@plt+0xd3a0>
   1fde0:	mov	r0, #0
   1fde4:	movw	r1, #56540	; 0xdcdc
   1fde8:	strb	r0, [r6], #1
   1fdec:	str	r0, [sp]
   1fdf0:	str	r0, [sp, #4]
   1fdf4:	ldr	r0, [fp, #24]
   1fdf8:	movt	r1, #5
   1fdfc:	ldr	r2, [r1]
   1fe00:	ldr	r1, [sp, #12]
   1fe04:	str	r0, [sp, #8]
   1fe08:	ldr	r0, [sp, #16]
   1fe0c:	sub	r3, r6, r2
   1fe10:	bl	1fe40 <__assert_fail@plt+0xd3c4>
   1fe14:	sub	sp, fp, #28
   1fe18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe1c:	movw	r1, #43872	; 0xab60
   1fe20:	mov	r0, #0
   1fe24:	mov	r2, #5
   1fe28:	movt	r1, #4
   1fe2c:	bl	1253c <dcgettext@plt>
   1fe30:	mov	r2, r0
   1fe34:	mov	r0, #1
   1fe38:	mov	r1, #0
   1fe3c:	bl	12674 <error@plt>
   1fe40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe44:	add	fp, sp, #28
   1fe48:	sub	sp, sp, #4
   1fe4c:	cmp	r2, #0
   1fe50:	beq	20060 <__assert_fail@plt+0xd5e4>
   1fe54:	mov	r5, r0
   1fe58:	ldr	r6, [fp, #16]
   1fe5c:	ldr	r0, [fp, #12]
   1fe60:	movw	sl, #44711	; 0xaea7
   1fe64:	mov	r9, r3
   1fe68:	mov	r8, r2
   1fe6c:	mov	r4, r1
   1fe70:	movt	sl, #4
   1fe74:	cmp	r2, sl
   1fe78:	beq	1ff2c <__assert_fail@plt+0xd4b0>
   1fe7c:	ldr	r1, [r4, #16]
   1fe80:	add	r0, r0, r9
   1fe84:	add	r0, r0, r1
   1fe88:	ldr	r1, [r5, #12]
   1fe8c:	cmp	r0, r1
   1fe90:	bls	1fee8 <__assert_fail@plt+0xd46c>
   1fe94:	cmp	r6, #0
   1fe98:	bne	20080 <__assert_fail@plt+0xd604>
   1fe9c:	ldr	r0, [r5, #28]
   1fea0:	ldr	r1, [r4]
   1fea4:	cmp	r1, r0
   1fea8:	beq	20080 <__assert_fail@plt+0xd604>
   1feac:	ldr	r0, [r5, #24]
   1feb0:	cmp	r0, #0
   1feb4:	bne	2008c <__assert_fail@plt+0xd610>
   1feb8:	ldr	r0, [r5]
   1febc:	cmp	r0, #0
   1fec0:	beq	1fed8 <__assert_fail@plt+0xd45c>
   1fec4:	ldr	r0, [r5, #36]	; 0x24
   1fec8:	cmp	r0, #0
   1fecc:	ldreq	r0, [r5, #40]	; 0x28
   1fed0:	cmpeq	r0, #0
   1fed4:	bne	2008c <__assert_fail@plt+0xd610>
   1fed8:	mov	r0, r5
   1fedc:	mov	r1, r4
   1fee0:	bl	200b0 <__assert_fail@plt+0xd634>
   1fee4:	b	1fef0 <__assert_fail@plt+0xd474>
   1fee8:	cmp	r6, #0
   1feec:	bne	1ff10 <__assert_fail@plt+0xd494>
   1fef0:	ldr	r0, [r5, #40]	; 0x28
   1fef4:	cmp	r0, #0
   1fef8:	beq	1ff10 <__assert_fail@plt+0xd494>
   1fefc:	ldr	r1, [r5, #28]
   1ff00:	ldr	r2, [r4]
   1ff04:	sub	r1, r2, r1
   1ff08:	cmp	r1, r0
   1ff0c:	beq	1ff20 <__assert_fail@plt+0xd4a4>
   1ff10:	ldr	r0, [r5, #16]
   1ff14:	ldr	r1, [r4]
   1ff18:	cmp	r1, r0
   1ff1c:	bne	1ff2c <__assert_fail@plt+0xd4b0>
   1ff20:	mov	r0, r5
   1ff24:	mov	r1, r4
   1ff28:	bl	200b0 <__assert_fail@plt+0xd634>
   1ff2c:	cmp	r6, #0
   1ff30:	moveq	r0, #1
   1ff34:	streq	r0, [r4, #28]
   1ff38:	ldr	r0, [r4]
   1ff3c:	ldr	r1, [r4, #8]
   1ff40:	cmp	r0, r1
   1ff44:	bcc	1ff7c <__assert_fail@plt+0xd500>
   1ff48:	ldr	r0, [r4, #4]
   1ff4c:	cmp	r0, #0
   1ff50:	beq	1ff68 <__assert_fail@plt+0xd4ec>
   1ff54:	lsl	r2, r1, #1
   1ff58:	lsl	r1, r1, #3
   1ff5c:	str	r2, [r4, #8]
   1ff60:	bl	2dc38 <__assert_fail@plt+0x1b1bc>
   1ff64:	b	1ff78 <__assert_fail@plt+0xd4fc>
   1ff68:	mov	r0, #64	; 0x40
   1ff6c:	str	r0, [r4, #8]
   1ff70:	mov	r0, #256	; 0x100
   1ff74:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   1ff78:	str	r0, [r4, #4]
   1ff7c:	cmp	r8, sl
   1ff80:	beq	20008 <__assert_fail@plt+0xd58c>
   1ff84:	ldm	r4, {r2, r3}
   1ff88:	mov	sl, r6
   1ff8c:	ldr	r1, [fp, #8]
   1ff90:	ldr	r6, [r4, #12]
   1ff94:	ldr	r0, [r4, #16]
   1ff98:	add	r7, r2, #1
   1ff9c:	cmp	r1, #0
   1ffa0:	str	r7, [r4]
   1ffa4:	add	r7, r6, r0
   1ffa8:	str	r7, [r3, r2, lsl #2]
   1ffac:	beq	1ffcc <__assert_fail@plt+0xd550>
   1ffb0:	ldr	r2, [r4, #12]
   1ffb4:	add	r0, r2, r0
   1ffb8:	bl	12638 <strcpy@plt>
   1ffbc:	ldr	r0, [r4, #16]
   1ffc0:	ldr	r1, [fp, #12]
   1ffc4:	add	r0, r0, r1
   1ffc8:	str	r0, [r4, #16]
   1ffcc:	ldr	r1, [r4, #12]
   1ffd0:	mov	r6, sl
   1ffd4:	add	r0, r1, r0
   1ffd8:	mov	r1, r8
   1ffdc:	bl	12638 <strcpy@plt>
   1ffe0:	ldr	r0, [r4, #16]
   1ffe4:	cmp	sl, #0
   1ffe8:	add	r0, r0, r9
   1ffec:	str	r0, [r4, #16]
   1fff0:	beq	20020 <__assert_fail@plt+0xd5a4>
   1fff4:	ldr	r0, [r5, #16]
   1fff8:	ldr	r1, [r4]
   1fffc:	cmp	r1, r0
   20000:	beq	20040 <__assert_fail@plt+0xd5c4>
   20004:	b	2004c <__assert_fail@plt+0xd5d0>
   20008:	ldm	r4, {r0, r1}
   2000c:	add	r2, r0, #1
   20010:	str	r2, [r4]
   20014:	mov	r2, #0
   20018:	str	r2, [r1, r0, lsl #2]
   2001c:	b	2004c <__assert_fail@plt+0xd5d0>
   20020:	ldr	r0, [r5, #40]	; 0x28
   20024:	cmp	r0, #0
   20028:	beq	1fff4 <__assert_fail@plt+0xd578>
   2002c:	ldr	r1, [r5, #28]
   20030:	ldr	r2, [r4]
   20034:	sub	r1, r2, r1
   20038:	cmp	r1, r0
   2003c:	bne	1fff4 <__assert_fail@plt+0xd578>
   20040:	mov	r0, r5
   20044:	mov	r1, r4
   20048:	bl	200b0 <__assert_fail@plt+0xd634>
   2004c:	cmp	r6, #0
   20050:	ldrne	r0, [r4, #16]
   20054:	strne	r0, [r4, #20]
   20058:	sub	sp, fp, #28
   2005c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20060:	movw	r0, #44083	; 0xac33
   20064:	movw	r1, #43909	; 0xab85
   20068:	movw	r3, #44095	; 0xac3f
   2006c:	movw	r2, #341	; 0x155
   20070:	movt	r0, #4
   20074:	movt	r1, #4
   20078:	movt	r3, #4
   2007c:	bl	12a7c <__assert_fail@plt>
   20080:	movw	r1, #44213	; 0xacb5
   20084:	movt	r1, #4
   20088:	b	20094 <__assert_fail@plt+0xd618>
   2008c:	movw	r1, #44272	; 0xacf0
   20090:	movt	r1, #4
   20094:	mov	r0, #0
   20098:	mov	r2, #5
   2009c:	bl	1253c <dcgettext@plt>
   200a0:	mov	r2, r0
   200a4:	mov	r0, #1
   200a8:	mov	r1, #0
   200ac:	bl	12674 <error@plt>
   200b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   200b4:	add	fp, sp, #28
   200b8:	sub	sp, sp, #12
   200bc:	mov	r9, r0
   200c0:	mov	r0, #1
   200c4:	mov	r8, r1
   200c8:	str	r0, [r1, #28]
   200cc:	ldr	r2, [r1]
   200d0:	ldmib	r1, {r0, r1}
   200d4:	cmp	r2, r1
   200d8:	bcc	2010c <__assert_fail@plt+0xd690>
   200dc:	cmp	r0, #0
   200e0:	beq	200f8 <__assert_fail@plt+0xd67c>
   200e4:	lsl	r2, r1, #1
   200e8:	lsl	r1, r1, #3
   200ec:	str	r2, [r8, #8]
   200f0:	bl	2dc38 <__assert_fail@plt+0x1b1bc>
   200f4:	b	20108 <__assert_fail@plt+0xd68c>
   200f8:	mov	r0, #64	; 0x40
   200fc:	str	r0, [r8, #8]
   20100:	mov	r0, #256	; 0x100
   20104:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   20108:	str	r0, [r8, #4]
   2010c:	ldr	r2, [r8]
   20110:	mov	r3, #0
   20114:	adds	r1, r2, #1
   20118:	str	r1, [r8]
   2011c:	str	r3, [r0, r2, lsl #2]
   20120:	beq	20454 <__assert_fail@plt+0xd9d8>
   20124:	ldr	r0, [r8, #4]
   20128:	ldr	r0, [r0, r2, lsl #2]
   2012c:	cmp	r0, #0
   20130:	bne	20474 <__assert_fail@plt+0xd9f8>
   20134:	mov	r0, #4
   20138:	add	r0, r0, r1, lsl #2
   2013c:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   20140:	ldr	r1, [r8]
   20144:	mov	sl, r0
   20148:	ldr	r0, [r9, #28]
   2014c:	mov	lr, #0
   20150:	str	r9, [sp, #4]
   20154:	mov	r5, r1
   20158:	cmp	r0, #0
   2015c:	beq	201cc <__assert_fail@plt+0xd750>
   20160:	ldr	ip, [r8, #4]
   20164:	mov	r4, #0
   20168:	cmp	r0, #4
   2016c:	bcc	201b0 <__assert_fail@plt+0xd734>
   20170:	add	r2, ip, r0, lsl #2
   20174:	cmp	sl, r2
   20178:	bcs	20188 <__assert_fail@plt+0xd70c>
   2017c:	add	r2, sl, r0, lsl #2
   20180:	cmp	r2, ip
   20184:	bhi	201b0 <__assert_fail@plt+0xd734>
   20188:	bic	r4, r0, #3
   2018c:	mov	r6, sl
   20190:	mov	r2, ip
   20194:	mov	r3, r4
   20198:	vld1.32	{d16-d17}, [r2]!
   2019c:	subs	r3, r3, #4
   201a0:	vst1.32	{d16-d17}, [r6]!
   201a4:	bne	20198 <__assert_fail@plt+0xd71c>
   201a8:	cmp	r0, r4
   201ac:	beq	201cc <__assert_fail@plt+0xd750>
   201b0:	sub	r7, r0, r4
   201b4:	add	r2, ip, r4, lsl #2
   201b8:	add	r3, sl, r4, lsl #2
   201bc:	ldr	r6, [r2], #4
   201c0:	subs	r7, r7, #1
   201c4:	str	r6, [r3], #4
   201c8:	bne	201bc <__assert_fail@plt+0xd740>
   201cc:	cmp	r0, r5
   201d0:	mov	r7, r0
   201d4:	str	lr, [sp, #8]
   201d8:	bcs	202a4 <__assert_fail@plt+0xd828>
   201dc:	add	r2, r0, lr
   201e0:	mov	r7, r0
   201e4:	cmp	r2, r1
   201e8:	bcs	202a4 <__assert_fail@plt+0xd828>
   201ec:	add	lr, r0, lr
   201f0:	sub	r7, r0, r5
   201f4:	sub	r4, lr, r1
   201f8:	mov	r3, r7
   201fc:	cmp	r4, r7
   20200:	movhi	r3, r4
   20204:	rsb	ip, r3, #0
   20208:	ldr	r3, [r8, #4]
   2020c:	cmp	ip, #4
   20210:	bcs	2021c <__assert_fail@plt+0xd7a0>
   20214:	mov	r7, r0
   20218:	b	20288 <__assert_fail@plt+0xd80c>
   2021c:	cmp	r4, r7
   20220:	movhi	r7, r4
   20224:	sub	r4, lr, r7
   20228:	add	r6, r3, r4, lsl #2
   2022c:	add	r4, sl, r0, lsl #2
   20230:	cmp	r4, r6
   20234:	bcs	20258 <__assert_fail@plt+0xd7dc>
   20238:	lsl	r6, r0, #2
   2023c:	sub	r6, r6, r7, lsl #2
   20240:	add	r7, r3, r2, lsl #2
   20244:	add	r6, sl, r6
   20248:	cmp	r6, r7
   2024c:	bls	20258 <__assert_fail@plt+0xd7dc>
   20250:	mov	r7, r0
   20254:	b	20288 <__assert_fail@plt+0xd80c>
   20258:	bic	r6, ip, #3
   2025c:	add	r9, r3, lr, lsl #2
   20260:	add	r7, r0, r6
   20264:	add	r2, r2, r6
   20268:	mov	lr, r6
   2026c:	vld1.32	{d16-d17}, [r9]!
   20270:	subs	lr, lr, #4
   20274:	vst1.32	{d16-d17}, [r4]!
   20278:	bne	2026c <__assert_fail@plt+0xd7f0>
   2027c:	ldr	r9, [sp, #4]
   20280:	cmp	r6, ip
   20284:	beq	202a4 <__assert_fail@plt+0xd828>
   20288:	ldr	r6, [r3, r2, lsl #2]
   2028c:	add	r2, r2, #1
   20290:	cmp	r2, r1
   20294:	str	r6, [sl, r7, lsl #2]
   20298:	add	r7, r7, #1
   2029c:	cmpcc	r7, r5
   202a0:	bcc	20288 <__assert_fail@plt+0xd80c>
   202a4:	cmp	r7, r0
   202a8:	bcc	20410 <__assert_fail@plt+0xd994>
   202ac:	mov	r0, #0
   202b0:	mov	r2, r7
   202b4:	mov	r3, sl
   202b8:	str	r0, [sl, r7, lsl #2]
   202bc:	mov	r0, r9
   202c0:	ldr	r1, [r8, #24]
   202c4:	ldr	r6, [r9, #32]
   202c8:	blx	r6
   202cc:	cmp	r0, #0
   202d0:	beq	202f0 <__assert_fail@plt+0xd874>
   202d4:	ldr	r0, [r8, #36]	; 0x24
   202d8:	cmp	r0, r5
   202dc:	bcs	20330 <__assert_fail@plt+0xd8b4>
   202e0:	ldr	r3, [sp, #8]
   202e4:	str	r5, [r8, #36]	; 0x24
   202e8:	mov	r0, r5
   202ec:	b	2033c <__assert_fail@plt+0xd8c0>
   202f0:	ldr	r0, [r9, #28]
   202f4:	add	r2, r0, #1
   202f8:	cmp	r5, r2
   202fc:	bls	20430 <__assert_fail@plt+0xd9b4>
   20300:	ldr	r1, [r8, #40]	; 0x28
   20304:	ldr	lr, [sp, #8]
   20308:	sub	r3, r1, #1
   2030c:	cmp	r3, r5
   20310:	strcs	r5, [r8, #40]	; 0x28
   20314:	movcs	r1, r5
   20318:	ldr	r3, [r8, #36]	; 0x24
   2031c:	cmp	r3, #0
   20320:	cmpne	r1, r3
   20324:	bhi	20398 <__assert_fail@plt+0xd91c>
   20328:	lsr	r1, r5, #1
   2032c:	b	203b0 <__assert_fail@plt+0xd934>
   20330:	ldr	r3, [sp, #8]
   20334:	cmp	r0, #0
   20338:	beq	20364 <__assert_fail@plt+0xd8e8>
   2033c:	ldr	r1, [r8, #40]	; 0x28
   20340:	cmp	r1, r0
   20344:	bls	20364 <__assert_fail@plt+0xd8e8>
   20348:	sub	r0, r1, r0
   2034c:	mov	r1, #0
   20350:	cmp	r1, r0, lsr #1
   20354:	addeq	r5, r5, #1
   20358:	lsrne	r0, r0, #1
   2035c:	addne	r5, r0, r5
   20360:	b	2036c <__assert_fail@plt+0xd8f0>
   20364:	cmn	r5, #1
   20368:	addne	r5, r5, #1
   2036c:	ldr	r0, [r9, #28]
   20370:	cmp	r0, #0
   20374:	beq	20388 <__assert_fail@plt+0xd90c>
   20378:	add	r2, r0, #1
   2037c:	cmp	r5, r2
   20380:	movhi	r2, r5
   20384:	b	2038c <__assert_fail@plt+0xd910>
   20388:	mov	r2, r5
   2038c:	add	r1, r7, r3
   20390:	sub	lr, r1, r0
   20394:	b	203c0 <__assert_fail@plt+0xd944>
   20398:	sub	r1, r1, r3
   2039c:	mov	r3, #0
   203a0:	cmp	r3, r1, lsr #1
   203a4:	subeq	r1, r5, #1
   203a8:	lsrne	r1, r1, #1
   203ac:	subne	r1, r5, r1
   203b0:	cmp	r1, r2
   203b4:	movhi	r2, r1
   203b8:	cmp	r0, #0
   203bc:	moveq	r2, r1
   203c0:	ldr	r1, [r8]
   203c4:	cmp	r2, #0
   203c8:	add	r7, lr, #1
   203cc:	movweq	r2, #1
   203d0:	mov	r5, r2
   203d4:	sub	r3, r1, r0
   203d8:	cmp	r7, r3
   203dc:	bcc	20158 <__assert_fail@plt+0xd6dc>
   203e0:	mov	r0, sl
   203e4:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   203e8:	ldr	r0, [r9, #28]
   203ec:	mov	r1, #0
   203f0:	mvn	r2, #0
   203f4:	str	r1, [r8, #28]
   203f8:	str	r2, [r8, #32]
   203fc:	str	r0, [r8]
   20400:	ldr	r0, [r8, #20]
   20404:	str	r0, [r8, #16]
   20408:	sub	sp, fp, #28
   2040c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20410:	movw	r0, #44588	; 0xae2c
   20414:	movw	r1, #43909	; 0xab85
   20418:	movw	r3, #44617	; 0xae49
   2041c:	mov	r2, #242	; 0xf2
   20420:	movt	r0, #4
   20424:	movt	r1, #4
   20428:	movt	r3, #4
   2042c:	bl	12a7c <__assert_fail@plt>
   20430:	movw	r1, #44031	; 0xabff
   20434:	mov	r0, #0
   20438:	mov	r2, #5
   2043c:	movt	r1, #4
   20440:	bl	1253c <dcgettext@plt>
   20444:	mov	r2, r0
   20448:	mov	r0, #1
   2044c:	mov	r1, #0
   20450:	bl	12674 <error@plt>
   20454:	movw	r0, #43889	; 0xab71
   20458:	movw	r1, #43909	; 0xab85
   2045c:	movw	r3, #43920	; 0xab90
   20460:	movw	r2, #261	; 0x105
   20464:	movt	r0, #4
   20468:	movt	r1, #4
   2046c:	movt	r3, #4
   20470:	bl	12a7c <__assert_fail@plt>
   20474:	movw	r0, #43988	; 0xabd4
   20478:	movw	r1, #43909	; 0xab85
   2047c:	movw	r3, #43920	; 0xab90
   20480:	movw	r2, #262	; 0x106
   20484:	movt	r0, #4
   20488:	movt	r1, #4
   2048c:	movt	r3, #4
   20490:	bl	12a7c <__assert_fail@plt>
   20494:	ldr	r0, [r0, #28]
   20498:	mov	r2, #0
   2049c:	mvn	r3, #0
   204a0:	str	r2, [r1, #28]
   204a4:	str	r3, [r1, #32]
   204a8:	str	r0, [r1]
   204ac:	ldr	r0, [r1, #20]
   204b0:	str	r0, [r1, #16]
   204b4:	bx	lr
   204b8:	push	{fp, lr}
   204bc:	mov	fp, sp
   204c0:	mov	r0, #0
   204c4:	bl	12554 <sysconf@plt>
   204c8:	cmp	r0, #0
   204cc:	mvnle	r0, #-2147483648	; 0x80000000
   204d0:	pop	{fp, pc}
   204d4:	push	{r4, r5, fp, lr}
   204d8:	add	fp, sp, #8
   204dc:	movw	r0, #54588	; 0xd53c
   204e0:	movt	r0, #5
   204e4:	ldr	r1, [r0]
   204e8:	ldr	r0, [r1]
   204ec:	cmp	r0, #0
   204f0:	moveq	r4, #0
   204f4:	moveq	r0, r4
   204f8:	popeq	{r4, r5, fp, pc}
   204fc:	add	r5, r1, #4
   20500:	mov	r4, #0
   20504:	bl	12788 <strlen@plt>
   20508:	add	r0, r4, r0
   2050c:	add	r4, r0, #1
   20510:	ldr	r0, [r5], #4
   20514:	cmp	r0, #0
   20518:	bne	20504 <__assert_fail@plt+0xda88>
   2051c:	mov	r0, r4
   20520:	pop	{r4, r5, fp, pc}
   20524:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20528:	add	fp, sp, #24
   2052c:	mov	r4, r0
   20530:	movw	r0, #54588	; 0xd53c
   20534:	mov	r5, r1
   20538:	mov	r8, #0
   2053c:	mov	r6, #0
   20540:	movt	r0, #5
   20544:	ldr	r1, [r0]
   20548:	ldr	r0, [r1]
   2054c:	cmp	r0, #0
   20550:	beq	20574 <__assert_fail@plt+0xdaf8>
   20554:	add	r7, r1, #4
   20558:	mov	r6, #0
   2055c:	bl	12788 <strlen@plt>
   20560:	add	r0, r6, r0
   20564:	add	r6, r0, #1
   20568:	ldr	r0, [r7], #4
   2056c:	cmp	r0, #0
   20570:	bne	2055c <__assert_fail@plt+0xdae0>
   20574:	mov	r0, #4096	; 0x1000
   20578:	str	r0, [r4, #8]
   2057c:	mov	r0, #0
   20580:	bl	12554 <sysconf@plt>
   20584:	mov	r1, r0
   20588:	cmp	r0, #0
   2058c:	mov	r0, #1
   20590:	str	r8, [r4]
   20594:	mvnle	r1, #-2147483648	; 0x80000000
   20598:	cmp	r1, r6
   2059c:	str	r1, [r4, #4]
   205a0:	bcc	205fc <__assert_fail@plt+0xdb80>
   205a4:	add	r2, r6, r5
   205a8:	mov	r0, #2
   205ac:	cmp	r2, r1
   205b0:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   205b4:	sub	r0, r1, r6
   205b8:	sub	r1, r0, r5
   205bc:	mvn	r0, #1
   205c0:	add	r0, r0, r1, lsr #2
   205c4:	str	r1, [r4, #4]
   205c8:	cmp	r0, #0
   205cc:	str	r0, [r4, #16]
   205d0:	beq	20600 <__assert_fail@plt+0xdb84>
   205d4:	movw	r2, #1568	; 0x620
   205d8:	mov	r0, #0
   205dc:	movt	r2, #2
   205e0:	str	r0, [r4, #20]
   205e4:	str	r0, [r4, #24]
   205e8:	str	r0, [r4, #28]
   205ec:	str	r2, [r4, #32]
   205f0:	str	r0, [r4, #36]	; 0x24
   205f4:	str	r0, [r4, #40]	; 0x28
   205f8:	str	r1, [r4, #12]
   205fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20600:	movw	r0, #44295	; 0xad07
   20604:	movw	r1, #43909	; 0xab85
   20608:	movw	r3, #44318	; 0xad1e
   2060c:	movw	r2, #518	; 0x206
   20610:	movt	r0, #4
   20614:	movt	r1, #4
   20618:	movt	r3, #4
   2061c:	bl	12a7c <__assert_fail@plt>
   20620:	mov	r0, #0
   20624:	bx	lr
   20628:	ldr	r1, [r0, #4]
   2062c:	mov	r2, #0
   20630:	cmp	r2, r1, lsr #17
   20634:	beq	20644 <__assert_fail@plt+0xdbc8>
   20638:	ldr	r1, [r0, #8]
   2063c:	cmp	r1, #131072	; 0x20000
   20640:	movls	r1, #131072	; 0x20000
   20644:	str	r1, [r0, #12]
   20648:	bx	lr
   2064c:	push	{r4, r5, r6, sl, fp, lr}
   20650:	add	fp, sp, #16
   20654:	mov	r6, #0
   20658:	mov	r4, r1
   2065c:	str	r6, [r1, #16]
   20660:	str	r6, [r1]
   20664:	str	r6, [r1, #4]
   20668:	str	r6, [r1, #8]
   2066c:	str	r6, [r1, #36]	; 0x24
   20670:	str	r6, [r1, #40]	; 0x28
   20674:	movw	r1, #63488	; 0xf800
   20678:	ldr	r0, [r0, #12]
   2067c:	movt	r1, #32767	; 0x7fff
   20680:	cmp	r0, r1
   20684:	bcs	206b4 <__assert_fail@plt+0xdc38>
   20688:	add	r0, r0, #1
   2068c:	mov	r5, r2
   20690:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   20694:	mvn	r1, #0
   20698:	str	r0, [r4, #12]
   2069c:	str	r6, [r4, #16]
   206a0:	str	r6, [r4, #20]
   206a4:	str	r5, [r4, #24]
   206a8:	str	r6, [r4, #28]
   206ac:	str	r1, [r4, #32]
   206b0:	pop	{r4, r5, r6, sl, fp, pc}
   206b4:	movw	r0, #44393	; 0xad69
   206b8:	movw	r1, #43909	; 0xab85
   206bc:	movw	r3, #44428	; 0xad8c
   206c0:	mov	r2, #572	; 0x23c
   206c4:	movt	r0, #4
   206c8:	movt	r1, #4
   206cc:	movt	r3, #4
   206d0:	bl	12a7c <__assert_fail@plt>
   206d4:	push	{r4, r5, r6, sl, fp, lr}
   206d8:	add	fp, sp, #16
   206dc:	mov	r1, r0
   206e0:	ldr	r0, [r0]
   206e4:	cmp	r0, #0
   206e8:	beq	20714 <__assert_fail@plt+0xdc98>
   206ec:	add	r6, r1, #4
   206f0:	mov	r5, #0
   206f4:	mov	r4, #0
   206f8:	bl	12788 <strlen@plt>
   206fc:	add	r4, r0, r4
   20700:	ldr	r0, [r6, r5, lsl #2]
   20704:	add	r5, r5, #1
   20708:	cmp	r0, #0
   2070c:	bne	206f8 <__assert_fail@plt+0xdc7c>
   20710:	b	2071c <__assert_fail@plt+0xdca0>
   20714:	mov	r4, #0
   20718:	mov	r5, #0
   2071c:	movw	r0, #44513	; 0xade1
   20720:	mov	r1, r5
   20724:	movt	r0, #4
   20728:	bl	20758 <__assert_fail@plt+0xdcdc>
   2072c:	mov	r1, r0
   20730:	mov	r0, #1
   20734:	cmp	r1, #0
   20738:	popne	{r4, r5, r6, sl, fp, pc}
   2073c:	movw	r0, #44550	; 0xae06
   20740:	mov	r1, r4
   20744:	movt	r0, #4
   20748:	bl	20758 <__assert_fail@plt+0xdcdc>
   2074c:	cmp	r0, #0
   20750:	movwne	r0, #1
   20754:	pop	{r4, r5, r6, sl, fp, pc}
   20758:	push	{r4, r5, fp, lr}
   2075c:	add	fp, sp, #8
   20760:	sub	sp, sp, #16
   20764:	mov	r5, r1
   20768:	mov	r4, r0
   2076c:	bl	126b0 <getenv@plt>
   20770:	cmp	r0, #0
   20774:	beq	207b0 <__assert_fail@plt+0xdd34>
   20778:	mov	r1, #0
   2077c:	add	r3, sp, #8
   20780:	mov	r2, #10
   20784:	str	r1, [sp]
   20788:	add	r1, sp, #12
   2078c:	bl	2e22c <__assert_fail@plt+0x1b7b0>
   20790:	cmp	r0, #0
   20794:	bne	207bc <__assert_fail@plt+0xdd40>
   20798:	ldr	r1, [sp, #8]
   2079c:	mov	r0, #1
   207a0:	cmp	r1, r5
   207a4:	movcs	r0, #0
   207a8:	sub	sp, fp, #8
   207ac:	pop	{r4, r5, fp, pc}
   207b0:	mov	r0, #0
   207b4:	sub	sp, fp, #8
   207b8:	pop	{r4, r5, fp, pc}
   207bc:	bl	127d0 <__errno_location@plt>
   207c0:	ldr	r5, [r0]
   207c4:	movw	r1, #44723	; 0xaeb3
   207c8:	mov	r0, #0
   207cc:	mov	r2, #5
   207d0:	movt	r1, #4
   207d4:	bl	1253c <dcgettext@plt>
   207d8:	mov	r2, r0
   207dc:	mov	r0, #1
   207e0:	mov	r1, r5
   207e4:	mov	r3, r4
   207e8:	bl	12674 <error@plt>
   207ec:	push	{r4, r5, r6, sl, fp, lr}
   207f0:	add	fp, sp, #16
   207f4:	sub	sp, sp, #8
   207f8:	mov	r6, r0
   207fc:	mov	r0, sp
   20800:	mov	r5, r2
   20804:	mov	r4, r1
   20808:	bl	2cb64 <__assert_fail@plt+0x1a0e8>
   2080c:	cmp	r0, #0
   20810:	bne	20884 <__assert_fail@plt+0xde08>
   20814:	mov	r0, r6
   20818:	bl	2cbc0 <__assert_fail@plt+0x1a144>
   2081c:	cmp	r0, #0
   20820:	bne	20878 <__assert_fail@plt+0xddfc>
   20824:	mov	r0, r5
   20828:	blx	r4
   2082c:	mov	r4, r0
   20830:	mov	r5, #0
   20834:	cmn	r0, #1
   20838:	bgt	20844 <__assert_fail@plt+0xddc8>
   2083c:	bl	127d0 <__errno_location@plt>
   20840:	ldr	r5, [r0]
   20844:	mov	r0, sp
   20848:	bl	2cbc0 <__assert_fail@plt+0x1a144>
   2084c:	cmp	r0, #0
   20850:	bne	20878 <__assert_fail@plt+0xddfc>
   20854:	mov	r0, sp
   20858:	bl	2cbdc <__assert_fail@plt+0x1a160>
   2085c:	cmp	r5, #0
   20860:	beq	2086c <__assert_fail@plt+0xddf0>
   20864:	bl	127d0 <__errno_location@plt>
   20868:	str	r5, [r0]
   2086c:	mov	r0, r4
   20870:	sub	sp, fp, #16
   20874:	pop	{r4, r5, r6, sl, fp, pc}
   20878:	bl	127d0 <__errno_location@plt>
   2087c:	ldr	r0, [r0]
   20880:	bl	26334 <__assert_fail@plt+0x138b8>
   20884:	bl	127d0 <__errno_location@plt>
   20888:	ldr	r0, [r0]
   2088c:	bl	262f4 <__assert_fail@plt+0x13878>
   20890:	push	{r4, r5, r6, sl, fp, lr}
   20894:	add	fp, sp, #16
   20898:	sub	sp, sp, #8
   2089c:	mov	r4, r2
   208a0:	cmn	r0, #100	; 0x64
   208a4:	bne	208b8 <__assert_fail@plt+0xde3c>
   208a8:	mov	r0, r4
   208ac:	sub	sp, fp, #16
   208b0:	pop	{r4, r5, r6, sl, fp, lr}
   208b4:	bx	r1
   208b8:	mov	r5, r0
   208bc:	mov	r0, sp
   208c0:	mov	r6, r1
   208c4:	bl	2cb64 <__assert_fail@plt+0x1a0e8>
   208c8:	cmp	r0, #0
   208cc:	bne	20954 <__assert_fail@plt+0xded8>
   208d0:	mov	r0, r5
   208d4:	bl	12980 <fchdir@plt>
   208d8:	cmp	r0, #0
   208dc:	beq	20900 <__assert_fail@plt+0xde84>
   208e0:	bl	127d0 <__errno_location@plt>
   208e4:	ldr	r5, [r0]
   208e8:	mov	r4, r0
   208ec:	mov	r0, sp
   208f0:	bl	2cbdc <__assert_fail@plt+0x1a160>
   208f4:	str	r5, [r4]
   208f8:	mvn	r4, #0
   208fc:	b	20948 <__assert_fail@plt+0xdecc>
   20900:	mov	r0, r4
   20904:	blx	r6
   20908:	mov	r4, r0
   2090c:	mov	r5, #0
   20910:	cmn	r0, #1
   20914:	bgt	20920 <__assert_fail@plt+0xdea4>
   20918:	bl	127d0 <__errno_location@plt>
   2091c:	ldr	r5, [r0]
   20920:	mov	r0, sp
   20924:	bl	2cbc0 <__assert_fail@plt+0x1a144>
   20928:	cmp	r0, #0
   2092c:	bne	20960 <__assert_fail@plt+0xdee4>
   20930:	mov	r0, sp
   20934:	bl	2cbdc <__assert_fail@plt+0x1a160>
   20938:	cmp	r5, #0
   2093c:	beq	20948 <__assert_fail@plt+0xdecc>
   20940:	bl	127d0 <__errno_location@plt>
   20944:	str	r5, [r0]
   20948:	mov	r0, r4
   2094c:	sub	sp, fp, #16
   20950:	pop	{r4, r5, r6, sl, fp, pc}
   20954:	bl	127d0 <__errno_location@plt>
   20958:	ldr	r0, [r0]
   2095c:	bl	262f4 <__assert_fail@plt+0x13878>
   20960:	bl	127d0 <__errno_location@plt>
   20964:	ldr	r0, [r0]
   20968:	bl	26334 <__assert_fail@plt+0x138b8>
   2096c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20970:	add	fp, sp, #24
   20974:	mov	r6, r2
   20978:	mov	r7, r1
   2097c:	mov	r4, r0
   20980:	bl	127d0 <__errno_location@plt>
   20984:	cmp	r7, #0
   20988:	beq	20a20 <__assert_fail@plt+0xdfa4>
   2098c:	mov	r5, r0
   20990:	ldr	r8, [r0]
   20994:	ldr	r0, [r6]
   20998:	cmp	r0, #0
   2099c:	mov	r1, r0
   209a0:	movweq	r1, #16
   209a4:	cmp	r1, r7
   209a8:	bcs	209c0 <__assert_fail@plt+0xdf44>
   209ac:	lsl	r2, r1, #1
   209b0:	cmp	r1, r1, lsl #1
   209b4:	mov	r1, r2
   209b8:	bls	209a4 <__assert_fail@plt+0xdf28>
   209bc:	mov	r1, r7
   209c0:	cmp	r0, #0
   209c4:	beq	209f4 <__assert_fail@plt+0xdf78>
   209c8:	cmp	r1, r0
   209cc:	beq	20a0c <__assert_fail@plt+0xdf90>
   209d0:	mov	r0, r4
   209d4:	str	r1, [r6]
   209d8:	bl	33040 <__assert_fail@plt+0x205c4>
   209dc:	mov	r4, r0
   209e0:	cmp	r0, #0
   209e4:	bne	20a14 <__assert_fail@plt+0xdf98>
   209e8:	mov	r4, #0
   209ec:	mov	r0, r4
   209f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   209f4:	cmp	r4, #0
   209f8:	bne	20a40 <__assert_fail@plt+0xdfc4>
   209fc:	mov	r0, r1
   20a00:	str	r1, [r6]
   20a04:	bl	3233c <__assert_fail@plt+0x1f8c0>
   20a08:	mov	r4, r0
   20a0c:	cmp	r4, #0
   20a10:	beq	209e8 <__assert_fail@plt+0xdf6c>
   20a14:	mov	r0, r4
   20a18:	str	r8, [r5]
   20a1c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20a20:	movw	r0, #44784	; 0xaef0
   20a24:	movw	r1, #44796	; 0xaefc
   20a28:	movw	r3, #44808	; 0xaf08
   20a2c:	mov	r2, #71	; 0x47
   20a30:	movt	r0, #4
   20a34:	movt	r1, #4
   20a38:	movt	r3, #4
   20a3c:	bl	12a7c <__assert_fail@plt>
   20a40:	movw	r0, #44850	; 0xaf32
   20a44:	movw	r1, #44796	; 0xaefc
   20a48:	movw	r3, #44808	; 0xaf08
   20a4c:	mov	r2, #79	; 0x4f
   20a50:	movt	r0, #4
   20a54:	movt	r1, #4
   20a58:	movt	r3, #4
   20a5c:	bl	12a7c <__assert_fail@plt>
   20a60:	push	{r4, sl, fp, lr}
   20a64:	add	fp, sp, #8
   20a68:	mov	r4, r0
   20a6c:	bl	2096c <__assert_fail@plt+0xdef0>
   20a70:	cmp	r0, #0
   20a74:	popne	{r4, sl, fp, pc}
   20a78:	mov	r0, r4
   20a7c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   20a80:	bl	2e150 <__assert_fail@plt+0x1b6d4>
   20a84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a88:	add	fp, sp, #28
   20a8c:	sub	sp, sp, #540	; 0x21c
   20a90:	bl	20be0 <__assert_fail@plt+0xe164>
   20a94:	cmn	r0, #-2147483647	; 0x80000001
   20a98:	mov	r5, #0
   20a9c:	addne	r0, r0, #1
   20aa0:	str	r5, [sp, #20]
   20aa4:	str	r5, [sp, #12]
   20aa8:	str	r5, [sp, #16]
   20aac:	cmp	r0, #1
   20ab0:	str	r0, [sp, #4]
   20ab4:	blt	20bb8 <__assert_fail@plt+0xe13c>
   20ab8:	add	r0, sp, #12
   20abc:	add	r6, sp, #24
   20ac0:	mov	sl, #5
   20ac4:	add	r0, r0, #8
   20ac8:	str	r0, [sp, #8]
   20acc:	ldr	r0, [sp, #4]
   20ad0:	sub	r4, r0, r5
   20ad4:	cmp	r4, #64	; 0x40
   20ad8:	mov	r7, r4
   20adc:	movge	r7, #64	; 0x40
   20ae0:	cmp	r4, #1
   20ae4:	blt	20b10 <__assert_fail@plt+0xe094>
   20ae8:	mov	r0, #0
   20aec:	mov	r1, #0
   20af0:	add	r2, r6, r0
   20af4:	add	r0, r0, #8
   20af8:	str	sl, [r2, #4]
   20afc:	add	r2, r5, r1
   20b00:	str	r2, [r6, r1, lsl #3]
   20b04:	add	r1, r1, #1
   20b08:	cmp	r1, r7
   20b0c:	blt	20af0 <__assert_fail@plt+0xe074>
   20b10:	mov	r0, r6
   20b14:	mov	r1, r7
   20b18:	mov	r2, #0
   20b1c:	bl	125d8 <poll@plt>
   20b20:	cmn	r0, #1
   20b24:	beq	20bb8 <__assert_fail@plt+0xe13c>
   20b28:	cmp	r4, #1
   20b2c:	blt	20ba8 <__assert_fail@plt+0xe12c>
   20b30:	mov	r8, #0
   20b34:	mov	r9, #6
   20b38:	add	r0, r6, r9
   20b3c:	ldrh	r0, [r0]
   20b40:	cmp	r0, #32
   20b44:	beq	20b98 <__assert_fail@plt+0xe11c>
   20b48:	ldr	r4, [r6, r8, lsl #3]
   20b4c:	mov	r1, #1
   20b50:	mov	r0, r4
   20b54:	bl	2fb30 <__assert_fail@plt+0x1d0b4>
   20b58:	tst	r0, #1
   20b5c:	bne	20b98 <__assert_fail@plt+0xe11c>
   20b60:	ldr	r1, [sp, #16]
   20b64:	mov	r2, #4
   20b68:	ldr	r0, [sp, #12]
   20b6c:	add	r1, r2, r1, lsl #2
   20b70:	ldr	r2, [sp, #8]
   20b74:	bl	2096c <__assert_fail@plt+0xdef0>
   20b78:	cmp	r0, #0
   20b7c:	beq	20bb8 <__assert_fail@plt+0xe13c>
   20b80:	str	r0, [sp, #12]
   20b84:	ldr	r1, [sp, #16]
   20b88:	str	r4, [r0, r1, lsl #2]
   20b8c:	ldr	r0, [sp, #16]
   20b90:	add	r0, r0, #1
   20b94:	str	r0, [sp, #16]
   20b98:	add	r8, r8, #1
   20b9c:	add	r9, r9, #8
   20ba0:	cmp	r8, r7
   20ba4:	blt	20b38 <__assert_fail@plt+0xe0bc>
   20ba8:	ldr	r0, [sp, #4]
   20bac:	add	r5, r7, r5
   20bb0:	cmp	r5, r0
   20bb4:	blt	20acc <__assert_fail@plt+0xe050>
   20bb8:	ldr	r0, [sp, #12]
   20bbc:	movw	r2, #56544	; 0xdce0
   20bc0:	ldr	r1, [sp, #16]
   20bc4:	movt	r2, #5
   20bc8:	str	r0, [r2]
   20bcc:	movw	r0, #56548	; 0xdce4
   20bd0:	movt	r0, #5
   20bd4:	str	r1, [r0]
   20bd8:	sub	sp, fp, #28
   20bdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20be0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20be4:	add	fp, sp, #24
   20be8:	sub	sp, sp, #16
   20bec:	movw	r0, #45101	; 0xb02d
   20bf0:	movt	r0, #4
   20bf4:	bl	22738 <__assert_fail@plt+0xfcbc>
   20bf8:	cmp	r0, #0
   20bfc:	beq	20cd0 <__assert_fail@plt+0xe254>
   20c00:	mov	r4, r0
   20c04:	bl	127d0 <__errno_location@plt>
   20c08:	mov	r7, #0
   20c0c:	mov	r6, r0
   20c10:	str	r7, [r0]
   20c14:	mov	r0, r4
   20c18:	bl	12944 <readdir64@plt>
   20c1c:	cmp	r0, #0
   20c20:	beq	20c8c <__assert_fail@plt+0xe210>
   20c24:	mov	r8, #0
   20c28:	mvn	r5, #0
   20c2c:	mov	r7, #0
   20c30:	mov	r1, r0
   20c34:	ldrb	r2, [r1, #19]!
   20c38:	cmp	r2, #46	; 0x2e
   20c3c:	bne	20c5c <__assert_fail@plt+0xe1e0>
   20c40:	ldrb	r2, [r0, #20]
   20c44:	cmp	r2, #0
   20c48:	beq	20c74 <__assert_fail@plt+0xe1f8>
   20c4c:	cmp	r2, #46	; 0x2e
   20c50:	ldrbeq	r0, [r0, #21]
   20c54:	cmpeq	r0, #0
   20c58:	beq	20c74 <__assert_fail@plt+0xe1f8>
   20c5c:	mov	r0, r1
   20c60:	mov	r1, #0
   20c64:	bl	22078 <__assert_fail@plt+0xf5fc>
   20c68:	cmp	r0, r5
   20c6c:	mov	r7, #1
   20c70:	movgt	r5, r0
   20c74:	mov	r0, r4
   20c78:	str	r8, [r6]
   20c7c:	bl	12944 <readdir64@plt>
   20c80:	cmp	r0, #0
   20c84:	bne	20c30 <__assert_fail@plt+0xe1b4>
   20c88:	b	20c90 <__assert_fail@plt+0xe214>
   20c8c:	mvn	r5, #0
   20c90:	ldr	r6, [r6]
   20c94:	cmp	r6, #0
   20c98:	beq	20d0c <__assert_fail@plt+0xe290>
   20c9c:	movw	r2, #45101	; 0xb02d
   20ca0:	mov	r0, #0
   20ca4:	mov	r1, #8
   20ca8:	movt	r2, #4
   20cac:	bl	2c45c <__assert_fail@plt+0x199e0>
   20cb0:	movw	r2, #52175	; 0xcbcf
   20cb4:	mov	r3, r0
   20cb8:	mov	r0, #0
   20cbc:	mov	r1, r6
   20cc0:	movt	r2, #4
   20cc4:	bl	12674 <error@plt>
   20cc8:	mov	r0, r4
   20ccc:	bl	12a4c <closedir@plt>
   20cd0:	mov	r0, #4
   20cd4:	bl	12554 <sysconf@plt>
   20cd8:	mov	r5, r0
   20cdc:	mov	r1, sp
   20ce0:	mov	r0, #7
   20ce4:	bl	12560 <getrlimit64@plt>
   20ce8:	cmn	r5, #1
   20cec:	movweq	r5, #20
   20cf0:	cmp	r0, #0
   20cf4:	bne	20d24 <__assert_fail@plt+0xe2a8>
   20cf8:	ldm	sp, {r0, r1}
   20cfc:	and	r1, r0, r1
   20d00:	cmn	r1, #1
   20d04:	movne	r5, r0
   20d08:	b	20d24 <__assert_fail@plt+0xe2a8>
   20d0c:	mov	r0, r4
   20d10:	bl	12a4c <closedir@plt>
   20d14:	cmp	r7, #0
   20d18:	beq	20cd0 <__assert_fail@plt+0xe254>
   20d1c:	cmn	r5, #1
   20d20:	ble	20cd0 <__assert_fail@plt+0xe254>
   20d24:	mov	r0, r5
   20d28:	sub	sp, fp, #24
   20d2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20d30:	sub	sp, sp, #8
   20d34:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20d38:	add	fp, sp, #24
   20d3c:	sub	sp, sp, #8
   20d40:	tst	r1, #64	; 0x40
   20d44:	movw	r9, #56553	; 0xdce9
   20d48:	mov	r4, r0
   20d4c:	str	r3, [fp, #12]
   20d50:	str	r2, [fp, #8]
   20d54:	mov	r6, #0
   20d58:	mov	r5, r1
   20d5c:	addne	r0, fp, #8
   20d60:	movt	r9, #5
   20d64:	orrne	r0, r0, #4
   20d68:	strne	r0, [sp, #4]
   20d6c:	ldrb	r0, [r9]
   20d70:	ldrne	r6, [fp, #8]
   20d74:	cmp	r0, #0
   20d78:	bne	20dcc <__assert_fail@plt+0xe350>
   20d7c:	movw	r0, #29730	; 0x7422
   20d80:	mov	r1, #524288	; 0x80000
   20d84:	movt	r0, #4
   20d88:	bl	22960 <__assert_fail@plt+0xfee4>
   20d8c:	cmp	r0, #0
   20d90:	blt	20db4 <__assert_fail@plt+0xe338>
   20d94:	mov	r1, #1
   20d98:	mov	r7, r0
   20d9c:	bl	2fb30 <__assert_fail@plt+0x1d0b4>
   20da0:	mov	r8, r0
   20da4:	mov	r0, r7
   20da8:	bl	12a34 <close@plt>
   20dac:	and	r0, r8, #1
   20db0:	b	20db8 <__assert_fail@plt+0xe33c>
   20db4:	mov	r0, #0
   20db8:	mov	r1, #1
   20dbc:	strb	r1, [r9]
   20dc0:	movw	r1, #56552	; 0xdce8
   20dc4:	movt	r1, #5
   20dc8:	strb	r0, [r1]
   20dcc:	orr	r1, r5, #524288	; 0x80000
   20dd0:	mov	r0, r4
   20dd4:	mov	r2, r6
   20dd8:	bl	22960 <__assert_fail@plt+0xfee4>
   20ddc:	mov	r4, r0
   20de0:	cmp	r0, #0
   20de4:	blt	20e08 <__assert_fail@plt+0xe38c>
   20de8:	movw	r0, #56552	; 0xdce8
   20dec:	movt	r0, #5
   20df0:	ldrb	r0, [r0]
   20df4:	cmp	r0, #0
   20df8:	bne	20e08 <__assert_fail@plt+0xe38c>
   20dfc:	mov	r0, r4
   20e00:	mov	r1, #1
   20e04:	bl	225c4 <__assert_fail@plt+0xfb48>
   20e08:	mov	r0, r4
   20e0c:	sub	sp, fp, #24
   20e10:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   20e14:	add	sp, sp, #8
   20e18:	bx	lr
   20e1c:	push	{r4, sl, fp, lr}
   20e20:	add	fp, sp, #8
   20e24:	movw	r4, #56544	; 0xdce0
   20e28:	movt	r4, #5
   20e2c:	ldr	r0, [r4]
   20e30:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   20e34:	movw	r0, #56548	; 0xdce4
   20e38:	mov	r1, #0
   20e3c:	movt	r0, #5
   20e40:	str	r1, [r4]
   20e44:	str	r1, [r0]
   20e48:	pop	{r4, sl, fp, pc}
   20e4c:	push	{fp, lr}
   20e50:	mov	fp, sp
   20e54:	movw	r0, #44867	; 0xaf43
   20e58:	movt	r0, #4
   20e5c:	bl	126b0 <getenv@plt>
   20e60:	cmp	r0, #0
   20e64:	movwne	r0, #1
   20e68:	pop	{fp, pc}
   20e6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20e70:	add	fp, sp, #28
   20e74:	sub	sp, sp, #524	; 0x20c
   20e78:	movw	r0, #56548	; 0xdce4
   20e7c:	movt	r0, #5
   20e80:	ldr	sl, [r0]
   20e84:	movw	r0, #56544	; 0xdce0
   20e88:	movt	r0, #5
   20e8c:	ldr	r0, [r0]
   20e90:	str	r0, [sp, #4]
   20e94:	bl	20be0 <__assert_fail@plt+0xe164>
   20e98:	mov	r7, r0
   20e9c:	cmn	r0, #-2147483647	; 0x80000001
   20ea0:	addne	r7, r7, #1
   20ea4:	cmp	r7, #1
   20ea8:	blt	20fb0 <__assert_fail@plt+0xe534>
   20eac:	mov	r4, #0
   20eb0:	add	r5, sp, #8
   20eb4:	mov	r3, #5
   20eb8:	mov	r8, #0
   20ebc:	str	r7, [sp]
   20ec0:	sub	r9, r7, r8
   20ec4:	cmp	r9, #64	; 0x40
   20ec8:	mov	r6, r9
   20ecc:	movge	r6, #64	; 0x40
   20ed0:	cmp	r9, #1
   20ed4:	blt	20f00 <__assert_fail@plt+0xe484>
   20ed8:	mov	r0, #0
   20edc:	mov	r1, #0
   20ee0:	add	r2, r5, r0
   20ee4:	add	r0, r0, #8
   20ee8:	str	r3, [r2, #4]
   20eec:	add	r2, r8, r1
   20ef0:	str	r2, [r5, r1, lsl #3]
   20ef4:	add	r1, r1, #1
   20ef8:	cmp	r1, r6
   20efc:	blt	20ee0 <__assert_fail@plt+0xe464>
   20f00:	mov	r0, r5
   20f04:	mov	r1, r6
   20f08:	mov	r2, #0
   20f0c:	bl	125d8 <poll@plt>
   20f10:	mov	r3, #5
   20f14:	cmn	r0, #1
   20f18:	beq	20fb0 <__assert_fail@plt+0xe534>
   20f1c:	cmp	r9, #1
   20f20:	blt	20f94 <__assert_fail@plt+0xe518>
   20f24:	mov	r9, #0
   20f28:	add	r0, r5, r9, lsl #3
   20f2c:	ldrh	r0, [r0, #6]
   20f30:	cmp	r0, #32
   20f34:	beq	20f88 <__assert_fail@plt+0xe50c>
   20f38:	ldr	r7, [r5, r9, lsl #3]
   20f3c:	mov	r1, #1
   20f40:	mov	r0, r7
   20f44:	bl	2fb30 <__assert_fail@plt+0x1d0b4>
   20f48:	tst	r0, #1
   20f4c:	bne	20f7c <__assert_fail@plt+0xe500>
   20f50:	ldr	r1, [sp, #4]
   20f54:	cmp	r4, sl
   20f58:	mov	r3, #5
   20f5c:	bcs	20fa8 <__assert_fail@plt+0xe52c>
   20f60:	ldr	r0, [r1, r4, lsl #2]
   20f64:	cmp	r0, r7
   20f68:	bge	20f84 <__assert_fail@plt+0xe508>
   20f6c:	add	r4, r4, #1
   20f70:	cmp	r4, sl
   20f74:	bcc	20f60 <__assert_fail@plt+0xe4e4>
   20f78:	b	20fa8 <__assert_fail@plt+0xe52c>
   20f7c:	mov	r3, #5
   20f80:	b	20f88 <__assert_fail@plt+0xe50c>
   20f84:	bne	20fa8 <__assert_fail@plt+0xe52c>
   20f88:	add	r9, r9, #1
   20f8c:	cmp	r9, r6
   20f90:	blt	20f28 <__assert_fail@plt+0xe4ac>
   20f94:	ldr	r7, [sp]
   20f98:	add	r8, r6, r8
   20f9c:	cmp	r8, r7
   20fa0:	blt	20ec0 <__assert_fail@plt+0xe444>
   20fa4:	b	20fb0 <__assert_fail@plt+0xe534>
   20fa8:	cmp	r7, #0
   20fac:	bge	20fb8 <__assert_fail@plt+0xe53c>
   20fb0:	sub	sp, fp, #28
   20fb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20fb8:	movw	r1, #44895	; 0xaf5f
   20fbc:	mov	r0, #0
   20fc0:	mov	r2, #5
   20fc4:	movt	r1, #4
   20fc8:	bl	1253c <dcgettext@plt>
   20fcc:	mov	r2, r0
   20fd0:	mov	r0, #0
   20fd4:	mov	r1, #0
   20fd8:	mov	r3, r7
   20fdc:	bl	12674 <error@plt>
   20fe0:	movw	r0, #45047	; 0xaff7
   20fe4:	movw	r1, #45056	; 0xb000
   20fe8:	movw	r3, #45065	; 0xb009
   20fec:	mov	r2, #396	; 0x18c
   20ff0:	movt	r0, #4
   20ff4:	movt	r1, #4
   20ff8:	movt	r3, #4
   20ffc:	bl	12a7c <__assert_fail@plt>
   21000:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21004:	add	fp, sp, #24
   21008:	sub	sp, sp, #16
   2100c:	mov	r8, r0
   21010:	movw	r0, #54600	; 0xd548
   21014:	movt	r0, #5
   21018:	ldr	r0, [r0]
   2101c:	bl	2fd10 <__assert_fail@plt+0x1d294>
   21020:	movw	r0, #54612	; 0xd554
   21024:	movw	r1, #45143	; 0xb057
   21028:	mov	r2, #5
   2102c:	mov	r9, #0
   21030:	movt	r0, #5
   21034:	movt	r1, #4
   21038:	ldr	r6, [r0]
   2103c:	movw	r0, #54468	; 0xd4c4
   21040:	movt	r0, #5
   21044:	ldr	r5, [r0]
   21048:	mov	r0, #0
   2104c:	bl	1253c <dcgettext@plt>
   21050:	movw	r1, #45158	; 0xb066
   21054:	mov	r7, r0
   21058:	mov	r0, #0
   2105c:	mov	r2, #5
   21060:	movt	r1, #4
   21064:	bl	1253c <dcgettext@plt>
   21068:	movw	r1, #45173	; 0xb075
   2106c:	mov	r4, r0
   21070:	mov	r0, #0
   21074:	mov	r2, #5
   21078:	movt	r1, #4
   2107c:	bl	1253c <dcgettext@plt>
   21080:	movw	r2, #45129	; 0xb049
   21084:	str	r0, [sp, #8]
   21088:	mov	r0, r6
   2108c:	mov	r1, r8
   21090:	mov	r3, r5
   21094:	str	r7, [sp]
   21098:	str	r4, [sp, #4]
   2109c:	str	r9, [sp, #12]
   210a0:	movt	r2, #4
   210a4:	bl	2d9d8 <__assert_fail@plt+0x1af5c>
   210a8:	sub	sp, fp, #24
   210ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   210b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   210b4:	add	fp, sp, #28
   210b8:	sub	sp, sp, #948	; 0x3b4
   210bc:	mov	sl, r0
   210c0:	ldr	r0, [r3, #16]
   210c4:	str	r1, [fp, #-964]	; 0xfffffc3c
   210c8:	sub	r1, fp, #44	; 0x2c
   210cc:	mov	r6, r3
   210d0:	str	r2, [fp, #-960]	; 0xfffffc40
   210d4:	bl	229a8 <__assert_fail@plt+0xff2c>
   210d8:	movw	r5, #54472	; 0xd4c8
   210dc:	ldrd	r0, [r6, #96]	; 0x60
   210e0:	movt	r5, #5
   210e4:	ldr	r4, [r5]
   210e8:	sub	sp, sp, #16
   210ec:	mov	r3, #1
   210f0:	mov	r2, #0
   210f4:	str	r3, [sp]
   210f8:	stmib	sp, {r2, r3}
   210fc:	str	r2, [sp, #12]
   21100:	sub	r2, fp, #696	; 0x2b8
   21104:	mov	r3, #0
   21108:	bl	23e60 <__assert_fail@plt+0x113e4>
   2110c:	add	sp, sp, #16
   21110:	ldr	r7, [fp, #20]
   21114:	movw	r1, #45186	; 0xb082
   21118:	mov	r3, r0
   2111c:	mov	r2, r4
   21120:	movt	r1, #4
   21124:	mov	r0, r7
   21128:	bl	127c4 <fprintf@plt>
   2112c:	cmp	r0, #0
   21130:	blt	217b4 <__assert_fail@plt+0xed38>
   21134:	ldr	r1, [r5]
   21138:	ldr	r8, [fp, #12]
   2113c:	str	r6, [fp, #-956]	; 0xfffffc44
   21140:	cmp	r0, r1
   21144:	mov	r1, r7
   21148:	strgt	r0, [r5]
   2114c:	mov	r0, #32
   21150:	bl	12968 <putc@plt>
   21154:	mov	r5, r0
   21158:	ldr	r0, [fp, #-956]	; 0xfffffc44
   2115c:	movw	r6, #54476	; 0xd4cc
   21160:	movt	r6, #5
   21164:	ldr	r4, [r6]
   21168:	ldrd	r0, [r0, #64]	; 0x40
   2116c:	sub	sp, sp, #16
   21170:	asr	r2, r8, #31
   21174:	mov	r9, #0
   21178:	mov	r3, #512	; 0x200
   2117c:	stm	sp, {r3, r9}
   21180:	str	r2, [sp, #12]
   21184:	sub	r2, fp, #696	; 0x2b8
   21188:	mov	r3, #0
   2118c:	str	r8, [sp, #8]
   21190:	bl	23e60 <__assert_fail@plt+0x113e4>
   21194:	add	sp, sp, #16
   21198:	movw	r1, #45186	; 0xb082
   2119c:	mov	r3, r0
   211a0:	mov	r0, r7
   211a4:	mov	r2, r4
   211a8:	movt	r1, #4
   211ac:	bl	127c4 <fprintf@plt>
   211b0:	cmn	r5, #1
   211b4:	movweq	r9, #150	; 0x96
   211b8:	cmp	r0, #0
   211bc:	blt	217bc <__assert_fail@plt+0xed40>
   211c0:	ldr	r1, [r6]
   211c4:	cmp	r0, r1
   211c8:	ble	211d0 <__assert_fail@plt+0xe754>
   211cc:	str	r0, [r6]
   211d0:	ldr	r6, [fp, #-956]	; 0xfffffc44
   211d4:	cmn	r5, #1
   211d8:	beq	217ec <__assert_fail@plt+0xed70>
   211dc:	mov	r0, #32
   211e0:	mov	r1, r7
   211e4:	bl	12968 <putc@plt>
   211e8:	cmn	r0, #1
   211ec:	beq	217c4 <__assert_fail@plt+0xed48>
   211f0:	sub	r0, fp, #44	; 0x2c
   211f4:	mov	r1, r7
   211f8:	bl	12a10 <fputs@plt>
   211fc:	cmp	r0, #0
   21200:	movwlt	r9, #275	; 0x113
   21204:	blt	217cc <__assert_fail@plt+0xed50>
   21208:	movw	r4, #54480	; 0xd4d0
   2120c:	ldr	r3, [r6, #20]
   21210:	movw	r1, #45190	; 0xb086
   21214:	mov	r0, r7
   21218:	movt	r4, #5
   2121c:	movt	r1, #4
   21220:	ldr	r2, [r4]
   21224:	bl	127c4 <fprintf@plt>
   21228:	cmp	r0, #0
   2122c:	blt	217d4 <__assert_fail@plt+0xed58>
   21230:	ldr	r1, [r4]
   21234:	cmp	r0, r1
   21238:	mov	r1, r7
   2123c:	strgt	r0, [r4]
   21240:	mov	r0, #32
   21244:	bl	12968 <putc@plt>
   21248:	cmn	r0, #1
   2124c:	ldr	r0, [r6, #24]
   21250:	movweq	r9, #250	; 0xfa
   21254:	bl	24998 <__assert_fail@plt+0x11f1c>
   21258:	cmp	r0, #0
   2125c:	beq	212a8 <__assert_fail@plt+0xe82c>
   21260:	mov	r1, #0
   21264:	mov	r5, r0
   21268:	bl	25758 <__assert_fail@plt+0x12cdc>
   2126c:	movw	r1, #54484	; 0xd4d4
   21270:	mov	r3, r5
   21274:	movt	r1, #5
   21278:	ldr	r2, [r1]
   2127c:	cmp	r0, r2
   21280:	strgt	r0, [r1]
   21284:	movw	r1, #45195	; 0xb08b
   21288:	movgt	r2, r0
   2128c:	mov	r0, r7
   21290:	movt	r1, #4
   21294:	bl	127c4 <fprintf@plt>
   21298:	cmn	r0, #1
   2129c:	bgt	212d8 <__assert_fail@plt+0xe85c>
   212a0:	mov	r9, #400	; 0x190
   212a4:	b	21704 <__assert_fail@plt+0xec88>
   212a8:	ldr	r2, [r6, #24]
   212ac:	movw	r1, #45201	; 0xb091
   212b0:	mov	r0, r7
   212b4:	movt	r1, #4
   212b8:	bl	127c4 <fprintf@plt>
   212bc:	movw	r1, #54484	; 0xd4d4
   212c0:	movt	r1, #5
   212c4:	ldr	r2, [r1]
   212c8:	cmp	r0, r2
   212cc:	strgt	r0, [r1]
   212d0:	cmp	r0, #1
   212d4:	blt	2180c <__assert_fail@plt+0xed90>
   212d8:	ldr	r0, [r6, #28]
   212dc:	bl	24b3c <__assert_fail@plt+0x120c0>
   212e0:	cmp	r0, #0
   212e4:	beq	21330 <__assert_fail@plt+0xe8b4>
   212e8:	mov	r1, #0
   212ec:	mov	r5, r0
   212f0:	bl	25758 <__assert_fail@plt+0x12cdc>
   212f4:	movw	r1, #54488	; 0xd4d8
   212f8:	mov	r3, r5
   212fc:	movt	r1, #5
   21300:	ldr	r2, [r1]
   21304:	cmp	r0, r2
   21308:	strgt	r0, [r1]
   2130c:	movw	r1, #45195	; 0xb08b
   21310:	movgt	r2, r0
   21314:	mov	r0, r7
   21318:	movt	r1, #4
   2131c:	bl	127c4 <fprintf@plt>
   21320:	cmn	r0, #1
   21324:	bgt	21378 <__assert_fail@plt+0xe8fc>
   21328:	mov	r9, #500	; 0x1f4
   2132c:	b	21704 <__assert_fail@plt+0xec88>
   21330:	movw	r4, #54488	; 0xd4d8
   21334:	ldr	r3, [r6, #28]
   21338:	movw	r1, #45208	; 0xb098
   2133c:	mov	r0, r7
   21340:	movt	r4, #5
   21344:	movt	r1, #4
   21348:	ldr	r2, [r4]
   2134c:	bl	127c4 <fprintf@plt>
   21350:	ldr	r1, [r4]
   21354:	cmp	r0, r1
   21358:	strgt	r0, [r4]
   2135c:	cmp	r0, #0
   21360:	blt	21814 <__assert_fail@plt+0xed98>
   21364:	mov	r0, #32
   21368:	mov	r1, r7
   2136c:	bl	12968 <putc@plt>
   21370:	cmn	r0, #1
   21374:	beq	2181c <__assert_fail@plt+0xeda0>
   21378:	ldr	r0, [r6, #16]
   2137c:	and	r0, r0, #45056	; 0xb000
   21380:	orr	r0, r0, #16384	; 0x4000
   21384:	cmp	r0, #24576	; 0x6000
   21388:	bne	21430 <__assert_fail@plt+0xe9b4>
   2138c:	mov	r4, r6
   21390:	movw	r5, #54492	; 0xd4dc
   21394:	movw	r1, #45190	; 0xb086
   21398:	ldr	r0, [r4, #32]!
   2139c:	movt	r5, #5
   213a0:	movt	r1, #4
   213a4:	ldr	r2, [r5]
   213a8:	lsr	r3, r0, #8
   213ac:	ldr	r0, [r4, #4]
   213b0:	lsr	r0, r0, #12
   213b4:	bfi	r3, r0, #12, #20
   213b8:	mov	r0, r7
   213bc:	bl	127c4 <fprintf@plt>
   213c0:	cmp	r0, #0
   213c4:	blt	217f4 <__assert_fail@plt+0xed78>
   213c8:	ldr	r1, [r5]
   213cc:	cmp	r1, r0
   213d0:	movw	r1, #35466	; 0x8a8a
   213d4:	strlt	r0, [r5]
   213d8:	movt	r1, #4
   213dc:	mov	r0, r7
   213e0:	bl	127c4 <fprintf@plt>
   213e4:	cmp	r0, #0
   213e8:	blt	217fc <__assert_fail@plt+0xed80>
   213ec:	ldrd	r0, [r4]
   213f0:	movw	r4, #54496	; 0xd4e0
   213f4:	movt	r4, #5
   213f8:	lsr	r2, r0, #12
   213fc:	orr	r3, r2, r1, lsl #20
   21400:	ldr	r2, [r4]
   21404:	movw	r1, #45190	; 0xb086
   21408:	bfi	r3, r0, #0, #8
   2140c:	movt	r1, #4
   21410:	mov	r0, r7
   21414:	bl	127c4 <fprintf@plt>
   21418:	cmp	r0, #0
   2141c:	blt	21804 <__assert_fail@plt+0xed88>
   21420:	ldr	r1, [r4]
   21424:	cmp	r1, r0
   21428:	strlt	r0, [r4]
   2142c:	b	214b4 <__assert_fail@plt+0xea38>
   21430:	movw	r5, #54500	; 0xd4e4
   21434:	mov	r2, r6
   21438:	mov	r6, r9
   2143c:	mov	r0, #1
   21440:	cmp	r8, #0
   21444:	movt	r5, #5
   21448:	movge	r8, r0
   2144c:	ldr	r4, [r5]
   21450:	ldr	r3, [r2, #48]	; 0x30
   21454:	ldr	r9, [r2, #52]	; 0x34
   21458:	asr	r1, r8, #31
   2145c:	sub	sp, sp, #16
   21460:	mov	r2, #0
   21464:	stm	sp, {r0, r2, r8}
   21468:	str	r1, [sp, #12]
   2146c:	mov	r0, r3
   21470:	sub	r2, fp, #696	; 0x2b8
   21474:	mov	r1, r9
   21478:	mov	r3, #0
   2147c:	bl	23e60 <__assert_fail@plt+0x113e4>
   21480:	add	sp, sp, #16
   21484:	movw	r1, #45186	; 0xb082
   21488:	mov	r3, r0
   2148c:	mov	r0, r7
   21490:	mov	r2, r4
   21494:	movt	r1, #4
   21498:	bl	127c4 <fprintf@plt>
   2149c:	cmp	r0, #0
   214a0:	blt	21824 <__assert_fail@plt+0xeda8>
   214a4:	ldr	r1, [r5]
   214a8:	mov	r9, r6
   214ac:	cmp	r0, r1
   214b0:	strgt	r0, [r5]
   214b4:	mov	r0, #32
   214b8:	mov	r1, r7
   214bc:	bl	12968 <putc@plt>
   214c0:	cmn	r0, #1
   214c4:	add	r6, r0, #1
   214c8:	movwne	r6, #1
   214cc:	movweq	r9, #850	; 0x352
   214d0:	beq	217dc <__assert_fail@plt+0xed60>
   214d4:	ldr	r0, [fp, #-956]	; 0xfffffc44
   214d8:	add	r4, r0, #80	; 0x50
   214dc:	mov	r0, r4
   214e0:	bl	12704 <localtime@plt>
   214e4:	cmp	r0, #0
   214e8:	beq	2151c <__assert_fail@plt+0xeaa0>
   214ec:	mov	r5, r0
   214f0:	ldr	r0, [fp, #8]
   214f4:	str	sl, [fp, #-968]	; 0xfffffc38
   214f8:	str	r9, [fp, #-972]	; 0xfffffc34
   214fc:	sub	r1, r0, #19968	; 0x4e00
   21500:	sub	r2, r1, #15532032	; 0xed0000
   21504:	ldr	r1, [r4]
   21508:	cmp	r2, r1
   2150c:	ble	2158c <__assert_fail@plt+0xeb10>
   21510:	movw	r8, #45226	; 0xb0aa
   21514:	movt	r8, #4
   21518:	b	215a8 <__assert_fail@plt+0xeb2c>
   2151c:	ldr	r0, [r4]
   21520:	sub	sp, sp, #16
   21524:	cmn	r0, #1
   21528:	ble	21734 <__assert_fail@plt+0xecb8>
   2152c:	mov	r4, #0
   21530:	mov	r1, #1
   21534:	sub	r2, fp, #696	; 0x2b8
   21538:	mov	r3, #0
   2153c:	stm	sp, {r1, r4}
   21540:	str	r1, [sp, #8]
   21544:	asr	r1, r0, #31
   21548:	str	r4, [sp, #12]
   2154c:	bl	23e60 <__assert_fail@plt+0x113e4>
   21550:	add	sp, sp, #16
   21554:	movw	r1, #45243	; 0xb0bb
   21558:	mov	r3, r0
   2155c:	mov	r0, r7
   21560:	mov	r2, #12
   21564:	movt	r1, #4
   21568:	bl	127c4 <fprintf@plt>
   2156c:	cmp	r0, #0
   21570:	movwlt	r9, #1100	; 0x44c
   21574:	cmn	r0, #1
   21578:	movwgt	r4, #1
   2157c:	and	r0, r6, r4
   21580:	cmp	r0, #1
   21584:	beq	21638 <__assert_fail@plt+0xebbc>
   21588:	b	21704 <__assert_fail@plt+0xec88>
   2158c:	movw	r2, #45226	; 0xb0aa
   21590:	movw	r8, #45214	; 0xb09e
   21594:	add	r0, r0, #3600	; 0xe10
   21598:	movt	r2, #4
   2159c:	movt	r8, #4
   215a0:	cmp	r1, r0
   215a4:	movgt	r8, r2
   215a8:	sub	sl, fp, #952	; 0x3b8
   215ac:	mov	r1, #256	; 0x100
   215b0:	mov	r2, r8
   215b4:	mov	r3, r5
   215b8:	mov	r9, #256	; 0x100
   215bc:	mov	r0, sl
   215c0:	bl	126ec <strftime@plt>
   215c4:	cmp	r0, #0
   215c8:	bne	21600 <__assert_fail@plt+0xeb84>
   215cc:	mov	r4, #7
   215d0:	add	r0, r4, r9, lsl #1
   215d4:	bic	r0, r0, #7
   215d8:	sub	sl, sp, r0
   215dc:	mov	sp, sl
   215e0:	lsl	r9, r9, #1
   215e4:	mov	r0, sl
   215e8:	mov	r2, r8
   215ec:	mov	r3, r5
   215f0:	mov	r1, r9
   215f4:	bl	126ec <strftime@plt>
   215f8:	cmp	r0, #0
   215fc:	beq	215d0 <__assert_fail@plt+0xeb54>
   21600:	movw	r1, #45239	; 0xb0b7
   21604:	mov	r0, r7
   21608:	mov	r2, sl
   2160c:	movt	r1, #4
   21610:	bl	127c4 <fprintf@plt>
   21614:	ldr	r9, [fp, #-972]	; 0xfffffc34
   21618:	cmp	r0, #0
   2161c:	ldr	sl, [fp, #-968]	; 0xfffffc38
   21620:	mov	r1, #0
   21624:	movwlt	r9, #900	; 0x384
   21628:	cmn	r0, #1
   2162c:	movwgt	r1, #1
   21630:	tst	r6, r1
   21634:	beq	21704 <__assert_fail@plt+0xec88>
   21638:	ldr	r5, [fp, #16]
   2163c:	mov	r0, sl
   21640:	mov	r1, r7
   21644:	mov	r2, r5
   21648:	bl	2183c <__assert_fail@plt+0xedc0>
   2164c:	cmp	r0, #0
   21650:	ldr	r0, [fp, #-956]	; 0xfffffc44
   21654:	beq	217e4 <__assert_fail@plt+0xed68>
   21658:	ldr	r0, [r0, #16]
   2165c:	and	r0, r0, #61440	; 0xf000
   21660:	cmp	r0, #40960	; 0xa000
   21664:	bne	216e8 <__assert_fail@plt+0xec6c>
   21668:	ldr	r0, [fp, #-964]	; 0xfffffc3c
   2166c:	ldr	r1, [fp, #-960]	; 0xfffffc40
   21670:	bl	2227c <__assert_fail@plt+0xf800>
   21674:	cmp	r0, #0
   21678:	beq	216c4 <__assert_fail@plt+0xec48>
   2167c:	mov	r6, r0
   21680:	movw	r0, #45248	; 0xb0c0
   21684:	mov	r1, r7
   21688:	movt	r0, #4
   2168c:	bl	12a10 <fputs@plt>
   21690:	cmn	r0, #1
   21694:	ble	2182c <__assert_fail@plt+0xedb0>
   21698:	mov	r0, r6
   2169c:	mov	r1, r7
   216a0:	mov	r2, r5
   216a4:	bl	2183c <__assert_fail@plt+0xedc0>
   216a8:	mov	r4, r0
   216ac:	mov	r0, r6
   216b0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   216b4:	cmp	r4, #0
   216b8:	bne	216e8 <__assert_fail@plt+0xec6c>
   216bc:	movw	r9, #1350	; 0x546
   216c0:	b	21704 <__assert_fail@plt+0xec88>
   216c4:	bl	127d0 <__errno_location@plt>
   216c8:	ldr	r1, [r0]
   216cc:	movw	r2, #52175	; 0xcbcf
   216d0:	mov	r0, #0
   216d4:	mov	r3, sl
   216d8:	movt	r2, #4
   216dc:	bl	12674 <error@plt>
   216e0:	mov	r0, #0
   216e4:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   216e8:	mov	r0, #10
   216ec:	mov	r1, r7
   216f0:	bl	12968 <putc@plt>
   216f4:	cmn	r0, #1
   216f8:	subne	sp, fp, #28
   216fc:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21700:	movw	r9, #1400	; 0x578
   21704:	bl	127d0 <__errno_location@plt>
   21708:	ldr	r4, [r0]
   2170c:	movw	r1, #45253	; 0xb0c5
   21710:	mov	r0, #0
   21714:	mov	r2, #5
   21718:	movt	r1, #4
   2171c:	bl	1253c <dcgettext@plt>
   21720:	mov	r2, r0
   21724:	mov	r0, #1
   21728:	mov	r1, r4
   2172c:	mov	r3, r9
   21730:	bl	12674 <error@plt>
   21734:	mov	r5, #0
   21738:	mov	r1, #1
   2173c:	rsbs	r3, r0, #0
   21740:	sub	r2, fp, #696	; 0x2b8
   21744:	stm	sp, {r1, r5}
   21748:	str	r1, [sp, #8]
   2174c:	sbc	r1, r5, r0, asr #31
   21750:	mov	r0, r3
   21754:	mov	r3, #0
   21758:	str	r5, [sp, #12]
   2175c:	bl	23e60 <__assert_fail@plt+0x113e4>
   21760:	add	sp, sp, #16
   21764:	mov	r4, r0
   21768:	bl	12788 <strlen@plt>
   2176c:	sub	sp, sp, #8
   21770:	movw	r1, #45236	; 0xb0b4
   21774:	movw	r3, #35210	; 0x898a
   21778:	rsb	r0, r0, #12
   2177c:	str	r4, [sp]
   21780:	bic	r2, r0, r0, asr #31
   21784:	movt	r1, #4
   21788:	movt	r3, #4
   2178c:	mov	r0, r7
   21790:	bl	127c4 <fprintf@plt>
   21794:	add	sp, sp, #8
   21798:	cmp	r0, #0
   2179c:	movwlt	r9, #1000	; 0x3e8
   217a0:	cmn	r0, #1
   217a4:	movwgt	r5, #1
   217a8:	tst	r6, r5
   217ac:	bne	21638 <__assert_fail@plt+0xebbc>
   217b0:	b	21704 <__assert_fail@plt+0xec88>
   217b4:	mov	r9, #100	; 0x64
   217b8:	b	21704 <__assert_fail@plt+0xec88>
   217bc:	mov	r9, #200	; 0xc8
   217c0:	b	21704 <__assert_fail@plt+0xec88>
   217c4:	mov	r9, #250	; 0xfa
   217c8:	b	21704 <__assert_fail@plt+0xec88>
   217cc:	movw	r9, #275	; 0x113
   217d0:	b	21704 <__assert_fail@plt+0xec88>
   217d4:	mov	r9, #300	; 0x12c
   217d8:	b	21704 <__assert_fail@plt+0xec88>
   217dc:	movw	r9, #850	; 0x352
   217e0:	b	21704 <__assert_fail@plt+0xec88>
   217e4:	mov	r9, #1200	; 0x4b0
   217e8:	b	21704 <__assert_fail@plt+0xec88>
   217ec:	mov	r9, #150	; 0x96
   217f0:	b	21704 <__assert_fail@plt+0xec88>
   217f4:	mov	r9, #600	; 0x258
   217f8:	b	21704 <__assert_fail@plt+0xec88>
   217fc:	movw	r9, #625	; 0x271
   21800:	b	21704 <__assert_fail@plt+0xec88>
   21804:	movw	r9, #650	; 0x28a
   21808:	b	21704 <__assert_fail@plt+0xec88>
   2180c:	movw	r9, #450	; 0x1c2
   21810:	b	21704 <__assert_fail@plt+0xec88>
   21814:	movw	r9, #550	; 0x226
   21818:	b	21704 <__assert_fail@plt+0xec88>
   2181c:	movw	r9, #525	; 0x20d
   21820:	b	21704 <__assert_fail@plt+0xec88>
   21824:	mov	r9, #800	; 0x320
   21828:	b	21704 <__assert_fail@plt+0xec88>
   2182c:	mov	r0, r6
   21830:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   21834:	movw	r9, #1300	; 0x514
   21838:	b	21704 <__assert_fail@plt+0xec88>
   2183c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21840:	add	fp, sp, #28
   21844:	sub	sp, sp, #4
   21848:	mov	r5, r1
   2184c:	mov	r4, r0
   21850:	cmp	r2, #0
   21854:	beq	21884 <__assert_fail@plt+0xee08>
   21858:	movw	r1, #52175	; 0xcbcf
   2185c:	mov	r0, r5
   21860:	mov	r2, r4
   21864:	movt	r1, #4
   21868:	bl	127c4 <fprintf@plt>
   2186c:	mov	r1, r0
   21870:	mov	r0, #0
   21874:	cmn	r1, #1
   21878:	movwgt	r0, #1
   2187c:	sub	sp, fp, #28
   21880:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21884:	movw	r7, #45293	; 0xb0ed
   21888:	movw	r8, #45305	; 0xb0f9
   2188c:	movw	r9, #45299	; 0xb0f3
   21890:	movw	sl, #45308	; 0xb0fc
   21894:	movw	r6, #45311	; 0xb0ff
   21898:	movt	r7, #4
   2189c:	movt	r8, #4
   218a0:	movt	r9, #4
   218a4:	movt	sl, #4
   218a8:	movt	r6, #4
   218ac:	ldrb	r2, [r4], #1
   218b0:	cmp	r2, #34	; 0x22
   218b4:	bhi	2196c <__assert_fail@plt+0xeef0>
   218b8:	add	r1, pc, #4
   218bc:	mov	r0, #1
   218c0:	ldr	pc, [r1, r2, lsl #2]
   218c4:	andeq	r1, r2, r8, ror #20
   218c8:	muleq	r2, r0, r9
   218cc:	muleq	r2, r0, r9
   218d0:	muleq	r2, r0, r9
   218d4:	muleq	r2, r0, r9
   218d8:	muleq	r2, r0, r9
   218dc:	muleq	r2, r0, r9
   218e0:	muleq	r2, r0, r9
   218e4:	andeq	r1, r2, r0, asr r9
   218e8:			; <UNDEFINED> instruction: 0x000219b8
   218ec:	ldrdeq	r1, [r2], -r4
   218f0:	muleq	r2, r0, r9
   218f4:	andeq	r1, r2, ip, ror #19
   218f8:	andeq	r1, r2, r4, lsl #20
   218fc:	muleq	r2, r0, r9
   21900:	muleq	r2, r0, r9
   21904:	muleq	r2, r0, r9
   21908:	muleq	r2, r0, r9
   2190c:	muleq	r2, r0, r9
   21910:	muleq	r2, r0, r9
   21914:	muleq	r2, r0, r9
   21918:	muleq	r2, r0, r9
   2191c:	muleq	r2, r0, r9
   21920:	muleq	r2, r0, r9
   21924:	muleq	r2, r0, r9
   21928:	muleq	r2, r0, r9
   2192c:	muleq	r2, r0, r9
   21930:	muleq	r2, r0, r9
   21934:	muleq	r2, r0, r9
   21938:	muleq	r2, r0, r9
   2193c:	muleq	r2, r0, r9
   21940:	muleq	r2, r0, r9
   21944:	andeq	r1, r2, ip, lsl sl
   21948:	muleq	r2, r0, r9
   2194c:	andeq	r1, r2, r4, lsr sl
   21950:	movw	r1, #45296	; 0xb0f0
   21954:	mov	r0, r5
   21958:	movt	r1, #4
   2195c:	bl	127c4 <fprintf@plt>
   21960:	cmn	r0, #1
   21964:	bgt	218ac <__assert_fail@plt+0xee30>
   21968:	b	21a64 <__assert_fail@plt+0xefe8>
   2196c:	cmp	r2, #92	; 0x5c
   21970:	bne	21990 <__assert_fail@plt+0xef14>
   21974:	movw	r1, #45290	; 0xb0ea
   21978:	mov	r0, r5
   2197c:	movt	r1, #4
   21980:	bl	127c4 <fprintf@plt>
   21984:	cmn	r0, #1
   21988:	bgt	218ac <__assert_fail@plt+0xee30>
   2198c:	b	21a64 <__assert_fail@plt+0xefe8>
   21990:	sub	r0, r2, #33	; 0x21
   21994:	uxtb	r0, r0
   21998:	cmp	r0, #93	; 0x5d
   2199c:	bhi	21a4c <__assert_fail@plt+0xefd0>
   219a0:	mov	r0, r2
   219a4:	mov	r1, r5
   219a8:	bl	12968 <putc@plt>
   219ac:	cmn	r0, #1
   219b0:	bne	218ac <__assert_fail@plt+0xee30>
   219b4:	b	21a64 <__assert_fail@plt+0xefe8>
   219b8:	movw	r1, #45302	; 0xb0f6
   219bc:	mov	r0, r5
   219c0:	movt	r1, #4
   219c4:	bl	127c4 <fprintf@plt>
   219c8:	cmn	r0, #1
   219cc:	bgt	218ac <__assert_fail@plt+0xee30>
   219d0:	b	21a64 <__assert_fail@plt+0xefe8>
   219d4:	mov	r0, r5
   219d8:	mov	r1, r7
   219dc:	bl	127c4 <fprintf@plt>
   219e0:	cmn	r0, #1
   219e4:	bgt	218ac <__assert_fail@plt+0xee30>
   219e8:	b	21a64 <__assert_fail@plt+0xefe8>
   219ec:	mov	r0, r5
   219f0:	mov	r1, r8
   219f4:	bl	127c4 <fprintf@plt>
   219f8:	cmn	r0, #1
   219fc:	bgt	218ac <__assert_fail@plt+0xee30>
   21a00:	b	21a64 <__assert_fail@plt+0xefe8>
   21a04:	mov	r0, r5
   21a08:	mov	r1, r9
   21a0c:	bl	127c4 <fprintf@plt>
   21a10:	cmn	r0, #1
   21a14:	bgt	218ac <__assert_fail@plt+0xee30>
   21a18:	b	21a64 <__assert_fail@plt+0xefe8>
   21a1c:	mov	r0, r5
   21a20:	mov	r1, sl
   21a24:	bl	127c4 <fprintf@plt>
   21a28:	cmn	r0, #1
   21a2c:	bgt	218ac <__assert_fail@plt+0xee30>
   21a30:	b	21a64 <__assert_fail@plt+0xefe8>
   21a34:	mov	r0, r5
   21a38:	mov	r1, r6
   21a3c:	bl	127c4 <fprintf@plt>
   21a40:	cmn	r0, #1
   21a44:	bgt	218ac <__assert_fail@plt+0xee30>
   21a48:	b	21a64 <__assert_fail@plt+0xefe8>
   21a4c:	movw	r1, #45314	; 0xb102
   21a50:	mov	r0, r5
   21a54:	movt	r1, #4
   21a58:	bl	127c4 <fprintf@plt>
   21a5c:	cmn	r0, #1
   21a60:	bgt	218ac <__assert_fail@plt+0xee30>
   21a64:	mov	r0, #0
   21a68:	sub	sp, fp, #28
   21a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21a70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21a74:	add	fp, sp, #28
   21a78:	sub	sp, sp, #12
   21a7c:	sub	sp, sp, #8192	; 0x2000
   21a80:	ldr	r7, [fp, #8]
   21a84:	mov	r9, r3
   21a88:	mov	sl, r0
   21a8c:	cmp	r2, #0
   21a90:	beq	21b30 <__assert_fail@plt+0xf0b4>
   21a94:	add	r4, sp, #8
   21a98:	mov	r8, r1
   21a9c:	str	r1, [sp]
   21aa0:	mov	r1, #8192	; 0x2000
   21aa4:	mov	r2, r7
   21aa8:	mvn	r3, #0
   21aac:	mov	r0, r4
   21ab0:	bl	2afbc <__assert_fail@plt+0x18540>
   21ab4:	mov	r5, r0
   21ab8:	cmp	r0, #8192	; 0x2000
   21abc:	mov	r6, r4
   21ac0:	bcc	21aec <__assert_fail@plt+0xf070>
   21ac4:	add	r4, r5, #1
   21ac8:	mov	r0, r4
   21acc:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   21ad0:	mov	r1, r4
   21ad4:	mov	r2, r7
   21ad8:	mvn	r3, #0
   21adc:	mov	r6, r0
   21ae0:	str	r8, [sp]
   21ae4:	add	r4, sp, #8
   21ae8:	bl	2afbc <__assert_fail@plt+0x18540>
   21aec:	mov	r0, r6
   21af0:	mov	r1, r5
   21af4:	bl	21b48 <__assert_fail@plt+0xf0cc>
   21af8:	mov	r1, #0
   21afc:	mov	r2, r6
   21b00:	strb	r1, [r6, r0]
   21b04:	mov	r0, sl
   21b08:	mov	r1, r9
   21b0c:	bl	127c4 <fprintf@plt>
   21b10:	mov	r5, r0
   21b14:	cmp	r6, r4
   21b18:	beq	21b24 <__assert_fail@plt+0xf0a8>
   21b1c:	mov	r0, r6
   21b20:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   21b24:	mov	r0, r5
   21b28:	sub	sp, fp, #28
   21b2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21b30:	mov	r0, sl
   21b34:	mov	r1, r9
   21b38:	mov	r2, r7
   21b3c:	sub	sp, fp, #28
   21b40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b44:	b	127c4 <fprintf@plt>
   21b48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b4c:	add	fp, sp, #28
   21b50:	sub	sp, sp, #20
   21b54:	mov	r5, r1
   21b58:	mov	r4, r0
   21b5c:	add	sl, r0, r1
   21b60:	bl	12620 <__ctype_get_mb_cur_max@plt>
   21b64:	cmp	r0, #2
   21b68:	bcs	21ba4 <__assert_fail@plt+0xf128>
   21b6c:	cmp	r5, #1
   21b70:	blt	21e88 <__assert_fail@plt+0xf40c>
   21b74:	bl	12740 <__ctype_b_loc@plt>
   21b78:	mov	r1, #63	; 0x3f
   21b7c:	ldrb	r2, [r4]
   21b80:	ldr	r3, [r0]
   21b84:	add	r2, r3, r2, lsl #1
   21b88:	ldrb	r2, [r2, #1]
   21b8c:	tst	r2, #64	; 0x40
   21b90:	strbeq	r1, [r4]
   21b94:	add	r4, r4, #1
   21b98:	cmp	r4, sl
   21b9c:	bcc	21b7c <__assert_fail@plt+0xf100>
   21ba0:	b	21e88 <__assert_fail@plt+0xf40c>
   21ba4:	cmp	r5, #1
   21ba8:	mov	r9, r4
   21bac:	blt	21e84 <__assert_fail@plt+0xf408>
   21bb0:	mov	r3, #0
   21bb4:	add	r6, sp, #4
   21bb8:	add	r5, sp, #8
   21bbc:	mov	r9, r4
   21bc0:	mov	r7, r4
   21bc4:	ldrb	r0, [r7]
   21bc8:	sub	r1, r0, #32
   21bcc:	cmp	r1, #94	; 0x5e
   21bd0:	bhi	21d6c <__assert_fail@plt+0xf2f0>
   21bd4:	add	r2, pc, #0
   21bd8:	ldr	pc, [r2, r1, lsl #2]
   21bdc:	andeq	r1, r2, r8, asr sp
   21be0:	andeq	r1, r2, r8, asr sp
   21be4:	andeq	r1, r2, r8, asr sp
   21be8:	andeq	r1, r2, r8, asr sp
   21bec:	andeq	r1, r2, ip, ror #26
   21bf0:	andeq	r1, r2, r8, asr sp
   21bf4:	andeq	r1, r2, r8, asr sp
   21bf8:	andeq	r1, r2, r8, asr sp
   21bfc:	andeq	r1, r2, r8, asr sp
   21c00:	andeq	r1, r2, r8, asr sp
   21c04:	andeq	r1, r2, r8, asr sp
   21c08:	andeq	r1, r2, r8, asr sp
   21c0c:	andeq	r1, r2, r8, asr sp
   21c10:	andeq	r1, r2, r8, asr sp
   21c14:	andeq	r1, r2, r8, asr sp
   21c18:	andeq	r1, r2, r8, asr sp
   21c1c:	andeq	r1, r2, r8, asr sp
   21c20:	andeq	r1, r2, r8, asr sp
   21c24:	andeq	r1, r2, r8, asr sp
   21c28:	andeq	r1, r2, r8, asr sp
   21c2c:	andeq	r1, r2, r8, asr sp
   21c30:	andeq	r1, r2, r8, asr sp
   21c34:	andeq	r1, r2, r8, asr sp
   21c38:	andeq	r1, r2, r8, asr sp
   21c3c:	andeq	r1, r2, r8, asr sp
   21c40:	andeq	r1, r2, r8, asr sp
   21c44:	andeq	r1, r2, r8, asr sp
   21c48:	andeq	r1, r2, r8, asr sp
   21c4c:	andeq	r1, r2, r8, asr sp
   21c50:	andeq	r1, r2, r8, asr sp
   21c54:	andeq	r1, r2, r8, asr sp
   21c58:	andeq	r1, r2, r8, asr sp
   21c5c:	andeq	r1, r2, ip, ror #26
   21c60:	andeq	r1, r2, r8, asr sp
   21c64:	andeq	r1, r2, r8, asr sp
   21c68:	andeq	r1, r2, r8, asr sp
   21c6c:	andeq	r1, r2, r8, asr sp
   21c70:	andeq	r1, r2, r8, asr sp
   21c74:	andeq	r1, r2, r8, asr sp
   21c78:	andeq	r1, r2, r8, asr sp
   21c7c:	andeq	r1, r2, r8, asr sp
   21c80:	andeq	r1, r2, r8, asr sp
   21c84:	andeq	r1, r2, r8, asr sp
   21c88:	andeq	r1, r2, r8, asr sp
   21c8c:	andeq	r1, r2, r8, asr sp
   21c90:	andeq	r1, r2, r8, asr sp
   21c94:	andeq	r1, r2, r8, asr sp
   21c98:	andeq	r1, r2, r8, asr sp
   21c9c:	andeq	r1, r2, r8, asr sp
   21ca0:	andeq	r1, r2, r8, asr sp
   21ca4:	andeq	r1, r2, r8, asr sp
   21ca8:	andeq	r1, r2, r8, asr sp
   21cac:	andeq	r1, r2, r8, asr sp
   21cb0:	andeq	r1, r2, r8, asr sp
   21cb4:	andeq	r1, r2, r8, asr sp
   21cb8:	andeq	r1, r2, r8, asr sp
   21cbc:	andeq	r1, r2, r8, asr sp
   21cc0:	andeq	r1, r2, r8, asr sp
   21cc4:	andeq	r1, r2, r8, asr sp
   21cc8:	andeq	r1, r2, r8, asr sp
   21ccc:	andeq	r1, r2, r8, asr sp
   21cd0:	andeq	r1, r2, r8, asr sp
   21cd4:	andeq	r1, r2, r8, asr sp
   21cd8:	andeq	r1, r2, r8, asr sp
   21cdc:	andeq	r1, r2, ip, ror #26
   21ce0:	andeq	r1, r2, r8, asr sp
   21ce4:	andeq	r1, r2, r8, asr sp
   21ce8:	andeq	r1, r2, r8, asr sp
   21cec:	andeq	r1, r2, r8, asr sp
   21cf0:	andeq	r1, r2, r8, asr sp
   21cf4:	andeq	r1, r2, r8, asr sp
   21cf8:	andeq	r1, r2, r8, asr sp
   21cfc:	andeq	r1, r2, r8, asr sp
   21d00:	andeq	r1, r2, r8, asr sp
   21d04:	andeq	r1, r2, r8, asr sp
   21d08:	andeq	r1, r2, r8, asr sp
   21d0c:	andeq	r1, r2, r8, asr sp
   21d10:	andeq	r1, r2, r8, asr sp
   21d14:	andeq	r1, r2, r8, asr sp
   21d18:	andeq	r1, r2, r8, asr sp
   21d1c:	andeq	r1, r2, r8, asr sp
   21d20:	andeq	r1, r2, r8, asr sp
   21d24:	andeq	r1, r2, r8, asr sp
   21d28:	andeq	r1, r2, r8, asr sp
   21d2c:	andeq	r1, r2, r8, asr sp
   21d30:	andeq	r1, r2, r8, asr sp
   21d34:	andeq	r1, r2, r8, asr sp
   21d38:	andeq	r1, r2, r8, asr sp
   21d3c:	andeq	r1, r2, r8, asr sp
   21d40:	andeq	r1, r2, r8, asr sp
   21d44:	andeq	r1, r2, r8, asr sp
   21d48:	andeq	r1, r2, r8, asr sp
   21d4c:	andeq	r1, r2, r8, asr sp
   21d50:	andeq	r1, r2, r8, asr sp
   21d54:	andeq	r1, r2, r8, asr sp
   21d58:	strb	r0, [r9], #1
   21d5c:	add	r7, r7, #1
   21d60:	cmp	r7, sl
   21d64:	bcc	21bc4 <__assert_fail@plt+0xf148>
   21d68:	b	21e84 <__assert_fail@plt+0xf408>
   21d6c:	str	r3, [sp, #12]
   21d70:	str	r3, [sp, #8]
   21d74:	sub	r2, sl, r7
   21d78:	mov	r0, r6
   21d7c:	mov	r1, r7
   21d80:	mov	r3, r5
   21d84:	bl	3236c <__assert_fail@plt+0x1f8f0>
   21d88:	cmp	r0, #0
   21d8c:	beq	21da8 <__assert_fail@plt+0xf32c>
   21d90:	mov	r5, r0
   21d94:	cmn	r0, #2
   21d98:	beq	21e5c <__assert_fail@plt+0xf3e0>
   21d9c:	cmn	r5, #1
   21da0:	bne	21dac <__assert_fail@plt+0xf330>
   21da4:	b	21e64 <__assert_fail@plt+0xf3e8>
   21da8:	mov	r5, #1
   21dac:	ldr	r0, [sp, #4]
   21db0:	add	r8, r7, r5
   21db4:	bl	12434 <wcwidth@plt>
   21db8:	cmp	r0, #0
   21dbc:	blt	21e38 <__assert_fail@plt+0xf3bc>
   21dc0:	cmp	r5, #16
   21dc4:	bcc	21e14 <__assert_fail@plt+0xf398>
   21dc8:	cmp	r9, r8
   21dcc:	addcc	r0, r9, r5
   21dd0:	cmpcc	r7, r0
   21dd4:	bcc	21e14 <__assert_fail@plt+0xf398>
   21dd8:	bic	ip, r5, #15
   21ddc:	mov	lr, r6
   21de0:	mov	r6, r9
   21de4:	add	r2, r7, ip
   21de8:	add	r1, r9, ip
   21dec:	sub	r0, r5, ip
   21df0:	mov	r3, ip
   21df4:	vld1.8	{d16-d17}, [r7]!
   21df8:	subs	r3, r3, #16
   21dfc:	vst1.8	{d16-d17}, [r6]!
   21e00:	bne	21df4 <__assert_fail@plt+0xf378>
   21e04:	cmp	r5, ip
   21e08:	mov	r6, lr
   21e0c:	bne	21e20 <__assert_fail@plt+0xf3a4>
   21e10:	b	21e30 <__assert_fail@plt+0xf3b4>
   21e14:	mov	r0, r5
   21e18:	mov	r1, r9
   21e1c:	mov	r2, r7
   21e20:	ldrb	r3, [r2], #1
   21e24:	subs	r0, r0, #1
   21e28:	strb	r3, [r1], #1
   21e2c:	bne	21e20 <__assert_fail@plt+0xf3a4>
   21e30:	add	r9, r9, r5
   21e34:	b	21e40 <__assert_fail@plt+0xf3c4>
   21e38:	mov	r0, #63	; 0x3f
   21e3c:	strb	r0, [r9], #1
   21e40:	add	r5, sp, #8
   21e44:	mov	r0, r5
   21e48:	bl	124f4 <mbsinit@plt>
   21e4c:	cmp	r0, #0
   21e50:	mov	r7, r8
   21e54:	beq	21d74 <__assert_fail@plt+0xf2f8>
   21e58:	b	21e74 <__assert_fail@plt+0xf3f8>
   21e5c:	mov	r8, sl
   21e60:	b	21e68 <__assert_fail@plt+0xf3ec>
   21e64:	add	r8, r7, #1
   21e68:	mov	r0, #63	; 0x3f
   21e6c:	add	r5, sp, #8
   21e70:	strb	r0, [r9], #1
   21e74:	mov	r7, r8
   21e78:	mov	r3, #0
   21e7c:	cmp	r7, sl
   21e80:	bcc	21bc4 <__assert_fail@plt+0xf148>
   21e84:	sub	r5, r9, r4
   21e88:	mov	r0, r5
   21e8c:	sub	sp, fp, #28
   21e90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e98:	add	fp, sp, #28
   21e9c:	sub	sp, sp, #12
   21ea0:	movw	sl, #45320	; 0xb108
   21ea4:	mov	r8, r0
   21ea8:	mov	r6, #0
   21eac:	mov	r7, #0
   21eb0:	movt	sl, #4
   21eb4:	add	r4, sl, #8
   21eb8:	ldr	r5, [r4, #-8]
   21ebc:	mov	r1, r8
   21ec0:	mov	r0, r5
   21ec4:	bl	123d4 <strcmp@plt>
   21ec8:	cmp	r0, #0
   21ecc:	beq	21f90 <__assert_fail@plt+0xf514>
   21ed0:	mov	r0, r5
   21ed4:	bl	2ca2c <__assert_fail@plt+0x19fb0>
   21ed8:	bl	12788 <strlen@plt>
   21edc:	add	r0, r7, r0
   21ee0:	add	r6, r6, #1
   21ee4:	add	r4, r4, #12
   21ee8:	add	r7, r0, #2
   21eec:	cmp	r6, #13
   21ef0:	bcc	21eb8 <__assert_fail@plt+0xf43c>
   21ef4:	add	r0, r7, #1
   21ef8:	str	r8, [sp, #8]
   21efc:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   21f00:	mov	r6, r0
   21f04:	mov	r4, #0
   21f08:	movw	r8, #8236	; 0x202c
   21f0c:	mov	r9, #0
   21f10:	str	r0, [sp, #4]
   21f14:	ldr	r0, [sl, -r9]
   21f18:	cmp	r9, #0
   21f1c:	strhne	r8, [r6]
   21f20:	strbne	r4, [r6, #2]!
   21f24:	bl	2ca2c <__assert_fail@plt+0x19fb0>
   21f28:	mov	r7, r0
   21f2c:	bl	12788 <strlen@plt>
   21f30:	mov	r5, r0
   21f34:	add	r2, r0, #1
   21f38:	mov	r0, r6
   21f3c:	mov	r1, r7
   21f40:	bl	124b8 <memcpy@plt>
   21f44:	sub	r9, r9, #12
   21f48:	add	r6, r6, r5
   21f4c:	cmn	r9, #156	; 0x9c
   21f50:	bne	21f14 <__assert_fail@plt+0xf498>
   21f54:	movw	r1, #45476	; 0xb1a4
   21f58:	mov	r0, #0
   21f5c:	mov	r2, #5
   21f60:	movt	r1, #4
   21f64:	bl	1253c <dcgettext@plt>
   21f68:	mov	r5, r0
   21f6c:	ldr	r0, [sp, #8]
   21f70:	bl	2ca2c <__assert_fail@plt+0x19fb0>
   21f74:	mov	r3, r0
   21f78:	ldr	r0, [sp, #4]
   21f7c:	mov	r1, #0
   21f80:	mov	r2, r5
   21f84:	str	r0, [sp]
   21f88:	mov	r0, #1
   21f8c:	bl	12674 <error@plt>
   21f90:	ldr	r0, [r4]
   21f94:	sub	sp, fp, #28
   21f98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21f9c:	mov	r1, r0
   21fa0:	mov	r0, #0
   21fa4:	cmp	r1, #12
   21fa8:	addls	r0, r1, r1, lsl #1
   21fac:	movwls	r1, #45320	; 0xb108
   21fb0:	movtls	r1, #4
   21fb4:	ldrls	r0, [r1, r0, lsl #2]
   21fb8:	bx	lr
   21fbc:	mov	r1, r0
   21fc0:	mvn	r0, #0
   21fc4:	cmp	r1, #12
   21fc8:	bxhi	lr
   21fcc:	add	r0, r1, r1, lsl #1
   21fd0:	movw	r1, #45320	; 0xb108
   21fd4:	movt	r1, #4
   21fd8:	add	r0, r1, r0, lsl #2
   21fdc:	ldr	r0, [r0, #8]
   21fe0:	bx	lr
   21fe4:	mov	r1, r0
   21fe8:	mov	r0, #0
   21fec:	cmp	r1, #12
   21ff0:	bxhi	lr
   21ff4:	add	r0, r1, r1, lsl #1
   21ff8:	movw	r1, #45320	; 0xb108
   21ffc:	movt	r1, #4
   22000:	add	r0, r1, r0, lsl #2
   22004:	ldr	r0, [r0, #4]
   22008:	bx	lr
   2200c:	push	{r4, sl, fp, lr}
   22010:	add	fp, sp, #8
   22014:	mov	lr, r0
   22018:	mvn	r0, #0
   2201c:	cmp	lr, #12
   22020:	bhi	22074 <__assert_fail@plt+0xf5f8>
   22024:	cmp	lr, #0
   22028:	popeq	{r4, sl, fp, pc}
   2202c:	movw	r3, #45320	; 0xb108
   22030:	add	r2, lr, lr, lsl #1
   22034:	movt	r3, #4
   22038:	add	r2, r3, r2, lsl #2
   2203c:	ldr	ip, [r2, #8]
   22040:	add	r2, r3, #4
   22044:	mov	r3, #0
   22048:	ldr	r4, [r2]
   2204c:	tst	r4, r1
   22050:	beq	22064 <__assert_fail@plt+0xf5e8>
   22054:	ldr	r4, [r2, #4]
   22058:	cmp	ip, r4
   2205c:	moveq	r0, r3
   22060:	popeq	{r4, sl, fp, pc}
   22064:	add	r3, r3, #1
   22068:	add	r2, r2, #12
   2206c:	cmp	r3, lr
   22070:	bcc	22048 <__assert_fail@plt+0xf5cc>
   22074:	pop	{r4, sl, fp, pc}
   22078:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2207c:	add	fp, sp, #24
   22080:	sub	sp, sp, #8
   22084:	mov	r5, r1
   22088:	mov	r4, r0
   2208c:	bl	127d0 <__errno_location@plt>
   22090:	mov	r6, r0
   22094:	mov	r0, #0
   22098:	add	r1, sp, #4
   2209c:	mov	r2, #10
   220a0:	str	r0, [r6]
   220a4:	mov	r0, r4
   220a8:	bl	123e0 <strtol@plt>
   220ac:	add	r1, r0, #-2147483647	; 0x80000001
   220b0:	cmp	r1, #1
   220b4:	bls	22114 <__assert_fail@plt+0xf698>
   220b8:	ldr	r7, [sp, #4]
   220bc:	ldrb	r1, [r7]
   220c0:	cmp	r1, #0
   220c4:	bne	2212c <__assert_fail@plt+0xf6b0>
   220c8:	cmp	r7, r4
   220cc:	subne	sp, fp, #24
   220d0:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   220d4:	ldr	r6, [r6]
   220d8:	movw	r1, #45660	; 0xb25c
   220dc:	mov	r0, #0
   220e0:	mov	r2, #5
   220e4:	movt	r1, #4
   220e8:	bl	1253c <dcgettext@plt>
   220ec:	mov	r7, r0
   220f0:	mov	r0, #0
   220f4:	mov	r1, r5
   220f8:	mov	r2, r4
   220fc:	bl	2c45c <__assert_fail@plt+0x199e0>
   22100:	mov	r3, r0
   22104:	mov	r0, #1
   22108:	mov	r1, r6
   2210c:	mov	r2, r7
   22110:	bl	12674 <error@plt>
   22114:	ldr	r1, [r6]
   22118:	movw	r2, #52175	; 0xcbcf
   2211c:	mov	r0, #1
   22120:	mov	r3, r4
   22124:	movt	r2, #4
   22128:	bl	12674 <error@plt>
   2212c:	ldr	r8, [r6]
   22130:	movw	r1, #45633	; 0xb241
   22134:	mov	r0, #0
   22138:	mov	r2, #5
   2213c:	movt	r1, #4
   22140:	bl	1253c <dcgettext@plt>
   22144:	mov	r6, r0
   22148:	mov	r0, #0
   2214c:	mov	r1, r5
   22150:	mov	r2, r7
   22154:	bl	2c45c <__assert_fail@plt+0x199e0>
   22158:	mov	r7, r0
   2215c:	mov	r0, #1
   22160:	mov	r1, r5
   22164:	mov	r2, r4
   22168:	bl	2c45c <__assert_fail@plt+0x199e0>
   2216c:	str	r0, [sp]
   22170:	mov	r0, #1
   22174:	mov	r1, r8
   22178:	mov	r2, r6
   2217c:	mov	r3, r7
   22180:	bl	12674 <error@plt>
   22184:	push	{r4, r5, fp, lr}
   22188:	add	fp, sp, #8
   2218c:	ldr	r5, [fp, #8]
   22190:	cmp	r2, #0
   22194:	beq	221ac <__assert_fail@plt+0xf730>
   22198:	mov	r2, #0
   2219c:	str	r2, [r3]
   221a0:	str	r2, [r5]
   221a4:	ldr	r2, [r3]
   221a8:	b	221d4 <__assert_fail@plt+0xf758>
   221ac:	ldr	r2, [r5]
   221b0:	ldr	r4, [r3]
   221b4:	add	r2, r4, r2
   221b8:	str	r2, [r3]
   221bc:	ldrb	r4, [r0, r2]
   221c0:	cmp	r4, #0
   221c4:	moveq	r0, #0
   221c8:	popeq	{r4, r5, fp, pc}
   221cc:	add	r2, r2, #1
   221d0:	str	r2, [r3]
   221d4:	add	r4, r0, r2
   221d8:	ldrb	r0, [r1]
   221dc:	cmp	r0, #0
   221e0:	beq	221fc <__assert_fail@plt+0xf780>
   221e4:	mov	r0, r4
   221e8:	bl	129b0 <strpbrk@plt>
   221ec:	cmp	r0, #0
   221f0:	beq	221fc <__assert_fail@plt+0xf780>
   221f4:	sub	r0, r0, r4
   221f8:	b	22204 <__assert_fail@plt+0xf788>
   221fc:	mov	r0, r4
   22200:	bl	12788 <strlen@plt>
   22204:	str	r0, [r5]
   22208:	mov	r0, #1
   2220c:	pop	{r4, r5, fp, pc}
   22210:	push	{r4, r5, fp, lr}
   22214:	add	fp, sp, #8
   22218:	sub	sp, sp, #16
   2221c:	mov	r4, r1
   22220:	movw	r1, #45684	; 0xb274
   22224:	mov	r5, r0
   22228:	mov	r0, #0
   2222c:	mov	r2, #5
   22230:	movt	r1, #4
   22234:	bl	1253c <dcgettext@plt>
   22238:	movw	r2, #45929	; 0xb369
   2223c:	movw	r3, #45129	; 0xb049
   22240:	mov	r1, r0
   22244:	movw	r0, #45976	; 0xb398
   22248:	movt	r2, #4
   2224c:	movt	r0, #4
   22250:	movt	r3, #4
   22254:	str	r2, [sp, #4]
   22258:	movw	r2, #45890	; 0xb342
   2225c:	str	r3, [sp]
   22260:	str	r0, [sp, #8]
   22264:	mov	r0, r5
   22268:	mov	r3, r4
   2226c:	movt	r2, #4
   22270:	bl	127c4 <fprintf@plt>
   22274:	sub	sp, fp, #8
   22278:	pop	{r4, r5, fp, pc}
   2227c:	push	{fp, lr}
   22280:	mov	fp, sp
   22284:	sub	sp, sp, #8
   22288:	movw	r2, #9952	; 0x26e0
   2228c:	mov	r3, #0
   22290:	movt	r2, #1
   22294:	str	r3, [sp]
   22298:	mov	r3, #0
   2229c:	str	r2, [sp, #4]
   222a0:	mov	r2, #0
   222a4:	bl	22420 <__assert_fail@plt+0xf9a4>
   222a8:	mov	sp, fp
   222ac:	pop	{fp, pc}
   222b0:	push	{r4, sl, fp, lr}
   222b4:	add	fp, sp, #8
   222b8:	mov	r4, r0
   222bc:	mov	r0, #24
   222c0:	bl	3233c <__assert_fail@plt+0x1f8c0>
   222c4:	cmp	r0, #0
   222c8:	movne	r1, #0
   222cc:	strne	r1, [r0]
   222d0:	strne	r4, [r0, #16]
   222d4:	strne	r4, [r0, #20]
   222d8:	popne	{r4, sl, fp, pc}
   222dc:	mov	r0, #0
   222e0:	pop	{r4, sl, fp, pc}
   222e4:	push	{r4, sl, fp, lr}
   222e8:	add	fp, sp, #8
   222ec:	mov	r4, r0
   222f0:	mov	r0, #24
   222f4:	bl	3233c <__assert_fail@plt+0x1f8c0>
   222f8:	cmp	r0, #0
   222fc:	moveq	r0, #0
   22300:	popeq	{r4, sl, fp, pc}
   22304:	mov	r1, r0
   22308:	vmov.i32	q8, #0	; 0x00000000
   2230c:	str	r4, [r1], #4
   22310:	vst1.32	{d16-d17}, [r1]
   22314:	pop	{r4, sl, fp, pc}
   22318:	push	{r4, r5, r6, sl, fp, lr}
   2231c:	add	fp, sp, #16
   22320:	ldr	r3, [r0]
   22324:	mov	r4, r1
   22328:	mov	r5, r0
   2232c:	cmp	r3, #0
   22330:	beq	2236c <__assert_fail@plt+0xf8f0>
   22334:	add	r0, r5, #8
   22338:	add	r1, r5, #12
   2233c:	mov	r2, #0
   22340:	mov	r6, #0
   22344:	bl	129d4 <getdelim@plt>
   22348:	cmn	r0, #1
   2234c:	ble	2239c <__assert_fail@plt+0xf920>
   22350:	mov	r0, #1
   22354:	str	r0, [r4]
   22358:	ldmib	r5, {r0, r6}
   2235c:	add	r0, r0, #1
   22360:	str	r0, [r5, #4]
   22364:	mov	r0, r6
   22368:	pop	{r4, r5, r6, sl, fp, pc}
   2236c:	ldr	r0, [r5, #20]
   22370:	ldr	r0, [r0]
   22374:	cmp	r0, #0
   22378:	beq	223bc <__assert_fail@plt+0xf940>
   2237c:	mov	r0, #1
   22380:	str	r0, [r4]
   22384:	ldr	r0, [r5, #20]
   22388:	add	r1, r0, #4
   2238c:	str	r1, [r5, #20]
   22390:	ldr	r6, [r0]
   22394:	mov	r0, r6
   22398:	pop	{r4, r5, r6, sl, fp, pc}
   2239c:	ldr	r0, [r5]
   223a0:	bl	12764 <feof@plt>
   223a4:	cmp	r0, #0
   223a8:	mov	r1, #2
   223ac:	mov	r0, r6
   223b0:	movweq	r1, #4
   223b4:	str	r1, [r4]
   223b8:	pop	{r4, r5, r6, sl, fp, pc}
   223bc:	mov	r0, #2
   223c0:	mov	r6, #0
   223c4:	str	r0, [r4]
   223c8:	mov	r0, r6
   223cc:	pop	{r4, r5, r6, sl, fp, pc}
   223d0:	ldr	r1, [r0]
   223d4:	cmp	r1, #0
   223d8:	ldrne	r0, [r0, #4]
   223dc:	bxne	lr
   223e0:	ldr	r1, [r0, #16]
   223e4:	ldr	r0, [r0, #20]
   223e8:	sub	r0, r0, r1
   223ec:	asr	r0, r0, #2
   223f0:	bx	lr
   223f4:	push	{r4, sl, fp, lr}
   223f8:	add	fp, sp, #8
   223fc:	mov	r4, r0
   22400:	ldr	r0, [r0]
   22404:	cmp	r0, #0
   22408:	beq	22414 <__assert_fail@plt+0xf998>
   2240c:	ldr	r0, [r4, #8]
   22410:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   22414:	mov	r0, r4
   22418:	pop	{r4, sl, fp, lr}
   2241c:	b	2fd6c <__assert_fail@plt+0x1d2f0>
   22420:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22424:	add	fp, sp, #28
   22428:	sub	sp, sp, #4
   2242c:	sub	sp, sp, #1024	; 0x400
   22430:	mov	r9, r0
   22434:	mov	r5, r2
   22438:	mov	r0, sp
   2243c:	cmp	r2, #0
   22440:	mov	r4, r3
   22444:	ldr	sl, [fp, #12]
   22448:	movw	r7, #52072	; 0xcb68
   2244c:	mov	r8, r1
   22450:	moveq	r5, r0
   22454:	ldr	r0, [fp, #8]
   22458:	movweq	r4, #1024	; 0x400
   2245c:	movt	r7, #4
   22460:	cmn	r4, #-2147483647	; 0x80000001
   22464:	mov	r6, r5
   22468:	mvncs	r4, #-2147483648	; 0x80000000
   2246c:	cmp	r0, #0
   22470:	movne	r7, r0
   22474:	mov	r0, r9
   22478:	mov	r1, r8
   2247c:	mov	r2, r6
   22480:	mov	r3, r4
   22484:	blx	sl
   22488:	cmn	r0, #1
   2248c:	ble	224f4 <__assert_fail@plt+0xfa78>
   22490:	cmp	r0, r4
   22494:	blt	22520 <__assert_fail@plt+0xfaa4>
   22498:	cmp	r6, r5
   2249c:	beq	224ac <__assert_fail@plt+0xfa30>
   224a0:	ldr	r1, [r7, #8]
   224a4:	mov	r0, r6
   224a8:	blx	r1
   224ac:	cmn	r4, #-1073741823	; 0xc0000001
   224b0:	bge	22570 <__assert_fail@plt+0xfaf4>
   224b4:	ldr	r1, [r7]
   224b8:	mov	r0, #1
   224bc:	orr	r4, r0, r4, lsl #1
   224c0:	mov	r0, r4
   224c4:	blx	r1
   224c8:	mov	r6, r0
   224cc:	cmp	r0, #0
   224d0:	bne	22474 <__assert_fail@plt+0xf9f8>
   224d4:	ldr	r1, [r7, #12]
   224d8:	cmp	r1, #0
   224dc:	beq	224e8 <__assert_fail@plt+0xfa6c>
   224e0:	mov	r0, r4
   224e4:	blx	r1
   224e8:	bl	127d0 <__errno_location@plt>
   224ec:	mov	r1, #12
   224f0:	b	22578 <__assert_fail@plt+0xfafc>
   224f4:	mov	r4, #0
   224f8:	cmp	r6, r5
   224fc:	beq	22580 <__assert_fail@plt+0xfb04>
   22500:	bl	127d0 <__errno_location@plt>
   22504:	ldr	r1, [r7, #8]
   22508:	ldr	r8, [r0]
   2250c:	mov	r5, r0
   22510:	mov	r0, r6
   22514:	blx	r1
   22518:	str	r8, [r5]
   2251c:	b	22580 <__assert_fail@plt+0xfb04>
   22520:	mov	r1, #0
   22524:	add	r8, r0, #1
   22528:	strb	r1, [r6, r0]
   2252c:	mov	r0, sp
   22530:	cmp	r6, r0
   22534:	beq	22594 <__assert_fail@plt+0xfb18>
   22538:	cmp	r6, r5
   2253c:	beq	2258c <__assert_fail@plt+0xfb10>
   22540:	cmp	r8, r4
   22544:	bge	2258c <__assert_fail@plt+0xfb10>
   22548:	ldr	r2, [r7, #4]
   2254c:	cmp	r2, #0
   22550:	beq	2258c <__assert_fail@plt+0xfb10>
   22554:	mov	r0, r6
   22558:	mov	r1, r8
   2255c:	blx	r2
   22560:	mov	r4, r0
   22564:	cmp	r0, #0
   22568:	moveq	r4, r6
   2256c:	b	22580 <__assert_fail@plt+0xfb04>
   22570:	bl	127d0 <__errno_location@plt>
   22574:	mov	r1, #36	; 0x24
   22578:	mov	r4, #0
   2257c:	str	r1, [r0]
   22580:	mov	r0, r4
   22584:	sub	sp, fp, #28
   22588:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2258c:	mov	r4, r6
   22590:	b	22580 <__assert_fail@plt+0xfb04>
   22594:	ldr	r1, [r7]
   22598:	mov	r0, r8
   2259c:	blx	r1
   225a0:	cmp	r0, #0
   225a4:	beq	225bc <__assert_fail@plt+0xfb40>
   225a8:	mov	r1, sp
   225ac:	mov	r2, r8
   225b0:	mov	r4, r0
   225b4:	bl	124b8 <memcpy@plt>
   225b8:	b	22580 <__assert_fail@plt+0xfb04>
   225bc:	mov	r4, r8
   225c0:	b	224d4 <__assert_fail@plt+0xfa58>
   225c4:	push	{r4, r5, r6, sl, fp, lr}
   225c8:	add	fp, sp, #16
   225cc:	mov	r6, r1
   225d0:	mov	r1, #1
   225d4:	mov	r2, #0
   225d8:	mov	r4, r0
   225dc:	mov	r5, #0
   225e0:	bl	2fb30 <__assert_fail@plt+0x1d0b4>
   225e4:	cmp	r0, #0
   225e8:	blt	22618 <__assert_fail@plt+0xfb9c>
   225ec:	bic	r2, r0, #1
   225f0:	cmp	r6, #0
   225f4:	orrne	r2, r0, #1
   225f8:	cmp	r0, r2
   225fc:	beq	2261c <__assert_fail@plt+0xfba0>
   22600:	mov	r0, r4
   22604:	mov	r1, #2
   22608:	bl	2fb30 <__assert_fail@plt+0x1d0b4>
   2260c:	cmn	r0, #1
   22610:	movwne	r0, #0
   22614:	pop	{r4, r5, r6, sl, fp, pc}
   22618:	mvn	r5, #0
   2261c:	mov	r0, r5
   22620:	pop	{r4, r5, r6, sl, fp, pc}
   22624:	movw	r1, #1030	; 0x406
   22628:	mov	r2, #0
   2262c:	b	2fb30 <__assert_fail@plt+0x1d0b4>
   22630:	movw	r1, #56556	; 0xdcec
   22634:	movt	r1, #5
   22638:	str	r0, [r1]
   2263c:	bx	lr
   22640:	movw	r1, #56560	; 0xdcf0
   22644:	movt	r1, #5
   22648:	strb	r0, [r1]
   2264c:	bx	lr
   22650:	push	{r4, r5, r6, sl, fp, lr}
   22654:	add	fp, sp, #16
   22658:	sub	sp, sp, #8
   2265c:	movw	r0, #54612	; 0xd554
   22660:	movt	r0, #5
   22664:	ldr	r0, [r0]
   22668:	bl	45ba0 <__assert_fail@plt+0x33124>
   2266c:	cmp	r0, #0
   22670:	beq	22698 <__assert_fail@plt+0xfc1c>
   22674:	movw	r0, #56560	; 0xdcf0
   22678:	movt	r0, #5
   2267c:	ldrb	r0, [r0]
   22680:	cmp	r0, #0
   22684:	beq	226b8 <__assert_fail@plt+0xfc3c>
   22688:	bl	127d0 <__errno_location@plt>
   2268c:	ldr	r0, [r0]
   22690:	cmp	r0, #32
   22694:	bne	226b8 <__assert_fail@plt+0xfc3c>
   22698:	movw	r0, #54600	; 0xd548
   2269c:	movt	r0, #5
   226a0:	ldr	r0, [r0]
   226a4:	bl	45ba0 <__assert_fail@plt+0x33124>
   226a8:	cmp	r0, #0
   226ac:	subeq	sp, fp, #16
   226b0:	popeq	{r4, r5, r6, sl, fp, pc}
   226b4:	b	22728 <__assert_fail@plt+0xfcac>
   226b8:	movw	r1, #45998	; 0xb3ae
   226bc:	mov	r0, #0
   226c0:	mov	r2, #5
   226c4:	movt	r1, #4
   226c8:	bl	1253c <dcgettext@plt>
   226cc:	mov	r4, r0
   226d0:	movw	r0, #56556	; 0xdcec
   226d4:	movt	r0, #5
   226d8:	ldr	r6, [r0]
   226dc:	bl	127d0 <__errno_location@plt>
   226e0:	ldr	r5, [r0]
   226e4:	cmp	r6, #0
   226e8:	bne	22704 <__assert_fail@plt+0xfc88>
   226ec:	movw	r2, #52175	; 0xcbcf
   226f0:	mov	r0, #0
   226f4:	mov	r1, r5
   226f8:	mov	r3, r4
   226fc:	movt	r2, #4
   22700:	b	22724 <__assert_fail@plt+0xfca8>
   22704:	mov	r0, r6
   22708:	bl	2c6a4 <__assert_fail@plt+0x19c28>
   2270c:	movw	r2, #46010	; 0xb3ba
   22710:	mov	r3, r0
   22714:	str	r4, [sp]
   22718:	mov	r0, #0
   2271c:	mov	r1, r5
   22720:	movt	r2, #4
   22724:	bl	12674 <error@plt>
   22728:	movw	r0, #54504	; 0xd4e8
   2272c:	movt	r0, #5
   22730:	ldr	r0, [r0]
   22734:	bl	124ac <_exit@plt>
   22738:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2273c:	add	fp, sp, #24
   22740:	bl	1268c <opendir@plt>
   22744:	cmp	r0, #0
   22748:	moveq	r5, #0
   2274c:	moveq	r0, r5
   22750:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   22754:	mov	r4, r0
   22758:	bl	12974 <dirfd@plt>
   2275c:	cmp	r0, #2
   22760:	movhi	r0, r4
   22764:	pophi	{r4, r5, r6, r7, r8, sl, fp, pc}
   22768:	movw	r1, #1030	; 0x406
   2276c:	mov	r2, #3
   22770:	bl	2fb30 <__assert_fail@plt+0x1d0b4>
   22774:	cmn	r0, #1
   22778:	ble	227a8 <__assert_fail@plt+0xfd2c>
   2277c:	mov	r7, r0
   22780:	bl	12950 <fdopendir@plt>
   22784:	mov	r5, r0
   22788:	bl	127d0 <__errno_location@plt>
   2278c:	ldr	r8, [r0]
   22790:	mov	r6, r0
   22794:	cmp	r5, #0
   22798:	bne	227b8 <__assert_fail@plt+0xfd3c>
   2279c:	mov	r0, r7
   227a0:	bl	12a34 <close@plt>
   227a4:	b	227b4 <__assert_fail@plt+0xfd38>
   227a8:	bl	127d0 <__errno_location@plt>
   227ac:	ldr	r8, [r0]
   227b0:	mov	r6, r0
   227b4:	mov	r5, #0
   227b8:	mov	r0, r4
   227bc:	bl	12a4c <closedir@plt>
   227c0:	mov	r0, r5
   227c4:	str	r8, [r6]
   227c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   227cc:	push	{r4, r5, r6, sl, fp, lr}
   227d0:	add	fp, sp, #16
   227d4:	mov	r6, r0
   227d8:	bl	45b1c <__assert_fail@plt+0x330a0>
   227dc:	mov	r4, r0
   227e0:	ldrb	r0, [r0]
   227e4:	cmp	r0, #0
   227e8:	beq	22808 <__assert_fail@plt+0xfd8c>
   227ec:	mov	r0, r4
   227f0:	bl	45b68 <__assert_fail@plt+0x330ec>
   227f4:	mov	r5, r0
   227f8:	ldrb	r0, [r4, r0]
   227fc:	cmp	r0, #47	; 0x2f
   22800:	addeq	r5, r5, #1
   22804:	b	22818 <__assert_fail@plt+0xfd9c>
   22808:	mov	r0, r6
   2280c:	bl	45b68 <__assert_fail@plt+0x330ec>
   22810:	mov	r5, r0
   22814:	mov	r4, r6
   22818:	add	r0, r5, #1
   2281c:	bl	2dc08 <__assert_fail@plt+0x1b18c>
   22820:	mov	r1, r4
   22824:	mov	r2, r5
   22828:	mov	r6, r0
   2282c:	bl	124b8 <memcpy@plt>
   22830:	mov	r0, #0
   22834:	strb	r0, [r6, r5]
   22838:	mov	r0, r6
   2283c:	pop	{r4, r5, r6, sl, fp, pc}
   22840:	push	{r4, r5, r6, sl, fp, lr}
   22844:	add	fp, sp, #16
   22848:	mov	r5, r0
   2284c:	mov	r4, r0
   22850:	ldrb	r6, [r5], #-1
   22854:	bl	45b1c <__assert_fail@plt+0x330a0>
   22858:	sub	r2, r0, r4
   2285c:	sub	r0, r6, #47	; 0x2f
   22860:	clz	r0, r0
   22864:	lsr	r1, r0, #5
   22868:	mov	r0, r2
   2286c:	cmp	r2, r1
   22870:	popls	{r4, r5, r6, sl, fp, pc}
   22874:	ldrb	r3, [r5, r0]
   22878:	sub	r2, r0, #1
   2287c:	cmp	r3, #47	; 0x2f
   22880:	beq	22868 <__assert_fail@plt+0xfdec>
   22884:	pop	{r4, r5, r6, sl, fp, pc}
   22888:	push	{r4, r5, r6, sl, fp, lr}
   2288c:	add	fp, sp, #16
   22890:	mov	r6, r0
   22894:	mov	r4, r0
   22898:	ldrb	r5, [r6], #-1
   2289c:	bl	45b1c <__assert_fail@plt+0x330a0>
   228a0:	sub	r1, r0, r4
   228a4:	sub	r0, r5, #47	; 0x2f
   228a8:	clz	r0, r0
   228ac:	lsr	r0, r0, #5
   228b0:	mov	r5, r1
   228b4:	cmp	r1, r0
   228b8:	bls	228cc <__assert_fail@plt+0xfe50>
   228bc:	ldrb	r2, [r6, r5]
   228c0:	sub	r1, r5, #1
   228c4:	cmp	r2, #47	; 0x2f
   228c8:	beq	228b0 <__assert_fail@plt+0xfe34>
   228cc:	cmp	r5, #0
   228d0:	mov	r0, r5
   228d4:	addeq	r0, r0, #1
   228d8:	add	r0, r0, #1
   228dc:	bl	3233c <__assert_fail@plt+0x1f8c0>
   228e0:	mov	r6, r0
   228e4:	cmp	r0, #0
   228e8:	beq	22914 <__assert_fail@plt+0xfe98>
   228ec:	mov	r0, r6
   228f0:	mov	r1, r4
   228f4:	mov	r2, r5
   228f8:	bl	124b8 <memcpy@plt>
   228fc:	cmp	r5, #0
   22900:	moveq	r0, #46	; 0x2e
   22904:	moveq	r5, #1
   22908:	strbeq	r0, [r6]
   2290c:	mov	r0, #0
   22910:	strb	r0, [r6, r5]
   22914:	mov	r0, r6
   22918:	pop	{r4, r5, r6, sl, fp, pc}
   2291c:	push	{r4, r5, fp, lr}
   22920:	add	fp, sp, #8
   22924:	mov	r4, r0
   22928:	bl	45b1c <__assert_fail@plt+0x330a0>
   2292c:	mov	r5, r0
   22930:	ldrb	r0, [r0]
   22934:	cmp	r0, #0
   22938:	moveq	r5, r4
   2293c:	mov	r0, r5
   22940:	bl	45b68 <__assert_fail@plt+0x330ec>
   22944:	ldrb	r1, [r5, r0]
   22948:	mov	r2, #0
   2294c:	strb	r2, [r5, r0]
   22950:	cmp	r1, #0
   22954:	movwne	r1, #1
   22958:	mov	r0, r1
   2295c:	pop	{r4, r5, fp, pc}
   22960:	sub	sp, sp, #8
   22964:	push	{fp, lr}
   22968:	mov	fp, sp
   2296c:	sub	sp, sp, #8
   22970:	str	r2, [fp, #8]
   22974:	mov	r2, #0
   22978:	tst	r1, #64	; 0x40
   2297c:	str	r3, [fp, #12]
   22980:	addne	r2, fp, #8
   22984:	orrne	r2, r2, #4
   22988:	strne	r2, [sp, #4]
   2298c:	ldrne	r2, [fp, #8]
   22990:	bl	126a4 <open64@plt>
   22994:	bl	2d520 <__assert_fail@plt+0x1aaa4>
   22998:	mov	sp, fp
   2299c:	pop	{fp, lr}
   229a0:	add	sp, sp, #8
   229a4:	bx	lr
   229a8:	and	r2, r0, #61440	; 0xf000
   229ac:	sub	r2, r2, #4096	; 0x1000
   229b0:	lsr	r3, r2, #12
   229b4:	cmp	r3, #11
   229b8:	bhi	22a08 <__assert_fail@plt+0xff8c>
   229bc:	add	r2, pc, #4
   229c0:	mov	ip, #45	; 0x2d
   229c4:	ldr	pc, [r2, r3, lsl #2]
   229c8:	strdeq	r2, [r2], -r8
   229cc:	andeq	r2, r2, r0, lsl #20
   229d0:	andeq	r2, r2, r8, lsl #20
   229d4:	andeq	r2, r2, r0, lsl sl
   229d8:	andeq	r2, r2, r8, lsl #20
   229dc:	andeq	r2, r2, r8, lsr #20
   229e0:	andeq	r2, r2, r8, lsl #20
   229e4:	andeq	r2, r2, ip, lsr #20
   229e8:	andeq	r2, r2, r8, lsl #20
   229ec:	andeq	r2, r2, r8, lsl sl
   229f0:	andeq	r2, r2, r8, lsl #20
   229f4:	andeq	r2, r2, r0, lsr #20
   229f8:	mov	ip, #112	; 0x70
   229fc:	b	22a2c <__assert_fail@plt+0xffb0>
   22a00:	mov	ip, #99	; 0x63
   22a04:	b	22a2c <__assert_fail@plt+0xffb0>
   22a08:	mov	ip, #63	; 0x3f
   22a0c:	b	22a2c <__assert_fail@plt+0xffb0>
   22a10:	mov	ip, #100	; 0x64
   22a14:	b	22a2c <__assert_fail@plt+0xffb0>
   22a18:	mov	ip, #108	; 0x6c
   22a1c:	b	22a2c <__assert_fail@plt+0xffb0>
   22a20:	mov	ip, #115	; 0x73
   22a24:	b	22a2c <__assert_fail@plt+0xffb0>
   22a28:	mov	ip, #98	; 0x62
   22a2c:	push	{fp, lr}
   22a30:	mov	fp, sp
   22a34:	mov	r2, #32
   22a38:	tst	r0, #256	; 0x100
   22a3c:	mov	r3, #114	; 0x72
   22a40:	strb	ip, [r1]
   22a44:	mov	ip, #114	; 0x72
   22a48:	mov	lr, #45	; 0x2d
   22a4c:	strh	r2, [r1, #10]
   22a50:	movweq	r3, #45	; 0x2d
   22a54:	tst	r0, #128	; 0x80
   22a58:	mov	r2, #119	; 0x77
   22a5c:	movweq	r2, #45	; 0x2d
   22a60:	strb	r3, [r1, #1]
   22a64:	tst	r0, #32
   22a68:	mov	r3, #119	; 0x77
   22a6c:	strb	r2, [r1, #2]
   22a70:	mov	r2, #114	; 0x72
   22a74:	movweq	r2, #45	; 0x2d
   22a78:	tst	r0, #16
   22a7c:	strb	r2, [r1, #4]
   22a80:	mov	r2, #119	; 0x77
   22a84:	movweq	r2, #45	; 0x2d
   22a88:	tst	r0, #4
   22a8c:	movweq	ip, #45	; 0x2d
   22a90:	tst	r0, #2
   22a94:	strb	r2, [r1, #5]
   22a98:	movweq	r3, #45	; 0x2d
   22a9c:	strb	ip, [r1, #7]
   22aa0:	ands	r2, r0, #64	; 0x40
   22aa4:	mov	ip, #45	; 0x2d
   22aa8:	strb	r3, [r1, #8]
   22aac:	mov	r3, #83	; 0x53
   22ab0:	movwne	lr, #120	; 0x78
   22ab4:	mov	r2, #83	; 0x53
   22ab8:	movwne	r3, #115	; 0x73
   22abc:	tst	r0, #2048	; 0x800
   22ac0:	moveq	r3, lr
   22ac4:	strb	r3, [r1, #3]
   22ac8:	ands	r3, r0, #8
   22acc:	mov	r3, #45	; 0x2d
   22ad0:	movwne	r2, #115	; 0x73
   22ad4:	movwne	r3, #120	; 0x78
   22ad8:	tst	r0, #1024	; 0x400
   22adc:	moveq	r2, r3
   22ae0:	strb	r2, [r1, #6]
   22ae4:	ands	r2, r0, #1
   22ae8:	mov	r2, #84	; 0x54
   22aec:	movwne	ip, #120	; 0x78
   22af0:	movwne	r2, #116	; 0x74
   22af4:	tst	r0, #512	; 0x200
   22af8:	moveq	r2, ip
   22afc:	strb	r2, [r1, #9]
   22b00:	pop	{fp, pc}
   22b04:	ldr	r0, [r0, #16]
   22b08:	b	229a8 <__assert_fail@plt+0xff2c>
   22b0c:	push	{r4, r5, r6, r7, fp, lr}
   22b10:	add	fp, sp, #16
   22b14:	mov	r5, r1
   22b18:	bl	1298c <fopen64@plt>
   22b1c:	mov	r4, #0
   22b20:	cmp	r0, #0
   22b24:	beq	22b74 <__assert_fail@plt+0x100f8>
   22b28:	mov	r6, r0
   22b2c:	bl	12848 <fileno@plt>
   22b30:	cmp	r0, #2
   22b34:	movhi	r0, r6
   22b38:	pophi	{r4, r5, r6, r7, fp, pc}
   22b3c:	bl	2d514 <__assert_fail@plt+0x1aa98>
   22b40:	cmn	r0, #1
   22b44:	ble	22ba0 <__assert_fail@plt+0x10124>
   22b48:	mov	r7, r0
   22b4c:	mov	r0, r6
   22b50:	bl	12884 <fclose@plt>
   22b54:	cmp	r0, #0
   22b58:	bne	22b7c <__assert_fail@plt+0x10100>
   22b5c:	mov	r0, r7
   22b60:	mov	r1, r5
   22b64:	bl	12344 <fdopen@plt>
   22b68:	mov	r4, r0
   22b6c:	cmp	r0, #0
   22b70:	beq	22b7c <__assert_fail@plt+0x10100>
   22b74:	mov	r0, r4
   22b78:	pop	{r4, r5, r6, r7, fp, pc}
   22b7c:	bl	127d0 <__errno_location@plt>
   22b80:	ldr	r5, [r0]
   22b84:	mov	r4, r0
   22b88:	mov	r0, r7
   22b8c:	bl	12a34 <close@plt>
   22b90:	str	r5, [r4]
   22b94:	mov	r4, #0
   22b98:	mov	r0, r4
   22b9c:	pop	{r4, r5, r6, r7, fp, pc}
   22ba0:	bl	127d0 <__errno_location@plt>
   22ba4:	ldr	r7, [r0]
   22ba8:	mov	r5, r0
   22bac:	mov	r0, r6
   22bb0:	bl	12884 <fclose@plt>
   22bb4:	mov	r0, r4
   22bb8:	str	r7, [r5]
   22bbc:	pop	{r4, r5, r6, r7, fp, pc}
   22bc0:	ldr	r0, [r0, #8]
   22bc4:	bx	lr
   22bc8:	ldr	r0, [r0, #12]
   22bcc:	bx	lr
   22bd0:	ldr	r0, [r0, #16]
   22bd4:	bx	lr
   22bd8:	ldm	r0, {r2, ip}
   22bdc:	mov	r0, #0
   22be0:	cmp	r2, ip
   22be4:	bxcs	lr
   22be8:	mov	r0, #0
   22bec:	ldr	r1, [r2]
   22bf0:	cmp	r1, #0
   22bf4:	beq	22c18 <__assert_fail@plt+0x1019c>
   22bf8:	mov	r3, #0
   22bfc:	mov	r1, r2
   22c00:	ldr	r1, [r1, #4]
   22c04:	add	r3, r3, #1
   22c08:	cmp	r1, #0
   22c0c:	bne	22c00 <__assert_fail@plt+0x10184>
   22c10:	cmp	r3, r0
   22c14:	movhi	r0, r3
   22c18:	add	r2, r2, #8
   22c1c:	cmp	r2, ip
   22c20:	bcc	22bec <__assert_fail@plt+0x10170>
   22c24:	bx	lr
   22c28:	push	{fp, lr}
   22c2c:	mov	fp, sp
   22c30:	ldm	r0, {r3, ip}
   22c34:	mov	lr, #0
   22c38:	mov	r1, #0
   22c3c:	cmp	r3, ip
   22c40:	bcs	22c7c <__assert_fail@plt+0x10200>
   22c44:	mov	r1, #0
   22c48:	mov	lr, #0
   22c4c:	ldr	r2, [r3]
   22c50:	cmp	r2, #0
   22c54:	beq	22c70 <__assert_fail@plt+0x101f4>
   22c58:	mov	r2, r3
   22c5c:	ldr	r2, [r2, #4]
   22c60:	add	r1, r1, #1
   22c64:	cmp	r2, #0
   22c68:	bne	22c5c <__assert_fail@plt+0x101e0>
   22c6c:	add	lr, lr, #1
   22c70:	add	r3, r3, #8
   22c74:	cmp	r3, ip
   22c78:	bcc	22c4c <__assert_fail@plt+0x101d0>
   22c7c:	ldr	r2, [r0, #12]
   22c80:	cmp	lr, r2
   22c84:	bne	22c9c <__assert_fail@plt+0x10220>
   22c88:	ldr	r2, [r0, #16]
   22c8c:	mov	r0, #1
   22c90:	cmp	r1, r2
   22c94:	movne	r0, #0
   22c98:	pop	{fp, pc}
   22c9c:	mov	r0, #0
   22ca0:	pop	{fp, pc}
   22ca4:	nop	{0}
   22ca8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22cac:	add	fp, sp, #24
   22cb0:	sub	sp, sp, #8
   22cb4:	ldr	r6, [r0]
   22cb8:	ldmib	r0, {r3, r7, r8}
   22cbc:	ldr	r2, [r0, #16]
   22cc0:	mov	r4, r1
   22cc4:	mov	r5, #0
   22cc8:	cmp	r6, r3
   22ccc:	bcs	22d0c <__assert_fail@plt+0x10290>
   22cd0:	mov	r5, #0
   22cd4:	ldr	r0, [r6]
   22cd8:	cmp	r0, #0
   22cdc:	beq	22d00 <__assert_fail@plt+0x10284>
   22ce0:	mov	r0, #0
   22ce4:	mov	r1, r6
   22ce8:	ldr	r1, [r1, #4]
   22cec:	add	r0, r0, #1
   22cf0:	cmp	r1, #0
   22cf4:	bne	22ce8 <__assert_fail@plt+0x1026c>
   22cf8:	cmp	r0, r5
   22cfc:	movhi	r5, r0
   22d00:	add	r6, r6, #8
   22d04:	cmp	r6, r3
   22d08:	bcc	22cd4 <__assert_fail@plt+0x10258>
   22d0c:	movw	r1, #46017	; 0xb3c1
   22d10:	mov	r0, r4
   22d14:	movt	r1, #4
   22d18:	bl	127c4 <fprintf@plt>
   22d1c:	movw	r1, #46041	; 0xb3d9
   22d20:	mov	r0, r4
   22d24:	mov	r2, r7
   22d28:	movt	r1, #4
   22d2c:	bl	127c4 <fprintf@plt>
   22d30:	vldr	d16, [pc, #72]	; 22d80 <__assert_fail@plt+0x10304>
   22d34:	vmov	s0, r8
   22d38:	movw	r1, #46065	; 0xb3f1
   22d3c:	mov	r0, r4
   22d40:	mov	r2, r8
   22d44:	vcvt.f64.u32	d17, s0
   22d48:	vmov	s0, r7
   22d4c:	movt	r1, #4
   22d50:	vcvt.f64.u32	d18, s0
   22d54:	vmul.f64	d16, d17, d16
   22d58:	vdiv.f64	d16, d16, d18
   22d5c:	vstr	d16, [sp]
   22d60:	bl	127c4 <fprintf@plt>
   22d64:	movw	r1, #46098	; 0xb412
   22d68:	mov	r0, r4
   22d6c:	mov	r2, r5
   22d70:	movt	r1, #4
   22d74:	sub	sp, fp, #24
   22d78:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   22d7c:	b	127c4 <fprintf@plt>
   22d80:	andeq	r0, r0, r0
   22d84:	subsmi	r0, r9, r0
   22d88:	push	{r4, r5, r6, r7, fp, lr}
   22d8c:	add	fp, sp, #16
   22d90:	mov	r4, r1
   22d94:	ldr	r1, [r0, #8]
   22d98:	ldr	r2, [r0, #24]
   22d9c:	mov	r5, r0
   22da0:	mov	r0, r4
   22da4:	blx	r2
   22da8:	ldr	r1, [r5, #8]
   22dac:	cmp	r0, r1
   22db0:	bcs	22e1c <__assert_fail@plt+0x103a0>
   22db4:	ldr	r7, [r5]
   22db8:	mov	r6, #0
   22dbc:	ldr	r1, [r7, r0, lsl #3]!
   22dc0:	cmp	r1, #0
   22dc4:	cmpne	r7, #0
   22dc8:	bne	22dd8 <__assert_fail@plt+0x1035c>
   22dcc:	mov	r0, r6
   22dd0:	pop	{r4, r5, r6, r7, fp, pc}
   22dd4:	ldr	r1, [r7]
   22dd8:	cmp	r1, r4
   22ddc:	beq	22e04 <__assert_fail@plt+0x10388>
   22de0:	ldr	r2, [r5, #28]
   22de4:	mov	r0, r4
   22de8:	blx	r2
   22dec:	cmp	r0, #0
   22df0:	bne	22e10 <__assert_fail@plt+0x10394>
   22df4:	ldr	r7, [r7, #4]
   22df8:	cmp	r7, #0
   22dfc:	bne	22dd4 <__assert_fail@plt+0x10358>
   22e00:	b	22dcc <__assert_fail@plt+0x10350>
   22e04:	mov	r6, r4
   22e08:	mov	r0, r6
   22e0c:	pop	{r4, r5, r6, r7, fp, pc}
   22e10:	ldr	r6, [r7]
   22e14:	mov	r0, r6
   22e18:	pop	{r4, r5, r6, r7, fp, pc}
   22e1c:	bl	12a28 <abort@plt>
   22e20:	ldr	r1, [r0, #16]
   22e24:	cmp	r1, #0
   22e28:	moveq	r0, #0
   22e2c:	bxeq	lr
   22e30:	ldm	r0, {r1, r2}
   22e34:	cmp	r1, r2
   22e38:	bcs	22e50 <__assert_fail@plt+0x103d4>
   22e3c:	ldr	r0, [r1], #8
   22e40:	cmp	r0, #0
   22e44:	bxne	lr
   22e48:	cmp	r1, r2
   22e4c:	bcc	22e3c <__assert_fail@plt+0x103c0>
   22e50:	push	{fp, lr}
   22e54:	mov	fp, sp
   22e58:	bl	12a28 <abort@plt>
   22e5c:	push	{r4, r5, fp, lr}
   22e60:	add	fp, sp, #8
   22e64:	mov	r5, r1
   22e68:	ldr	r1, [r0, #8]
   22e6c:	ldr	r2, [r0, #24]
   22e70:	mov	r4, r0
   22e74:	mov	r0, r5
   22e78:	blx	r2
   22e7c:	ldr	r1, [r4, #8]
   22e80:	cmp	r0, r1
   22e84:	bcs	22ee0 <__assert_fail@plt+0x10464>
   22e88:	ldr	r1, [r4]
   22e8c:	add	r2, r1, r0, lsl #3
   22e90:	ldr	r3, [r2]
   22e94:	ldr	r2, [r2, #4]
   22e98:	cmp	r3, r5
   22e9c:	beq	22eac <__assert_fail@plt+0x10430>
   22ea0:	cmp	r2, #0
   22ea4:	bne	22e90 <__assert_fail@plt+0x10414>
   22ea8:	b	22eb8 <__assert_fail@plt+0x1043c>
   22eac:	cmp	r2, #0
   22eb0:	ldrne	r0, [r2]
   22eb4:	popne	{r4, r5, fp, pc}
   22eb8:	ldr	r2, [r4, #4]
   22ebc:	add	r0, r1, r0, lsl #3
   22ec0:	add	r1, r0, #8
   22ec4:	cmp	r1, r2
   22ec8:	movcs	r0, #0
   22ecc:	popcs	{r4, r5, fp, pc}
   22ed0:	ldr	r0, [r1], #8
   22ed4:	cmp	r0, #0
   22ed8:	popne	{r4, r5, fp, pc}
   22edc:	b	22ec4 <__assert_fail@plt+0x10448>
   22ee0:	bl	12a28 <abort@plt>
   22ee4:	push	{r4, r5, fp, lr}
   22ee8:	add	fp, sp, #8
   22eec:	ldm	r0, {r5, lr}
   22ef0:	mov	ip, r0
   22ef4:	mov	r0, #0
   22ef8:	cmp	r5, lr
   22efc:	bcs	22f48 <__assert_fail@plt+0x104cc>
   22f00:	mov	r0, #0
   22f04:	ldr	r3, [r5]
   22f08:	cmp	r3, #0
   22f0c:	cmpne	r5, #0
   22f10:	beq	22f3c <__assert_fail@plt+0x104c0>
   22f14:	mov	r3, r5
   22f18:	cmp	r0, r2
   22f1c:	popcs	{r4, r5, fp, pc}
   22f20:	ldr	r4, [r3]
   22f24:	str	r4, [r1, r0, lsl #2]
   22f28:	add	r0, r0, #1
   22f2c:	ldr	r3, [r3, #4]
   22f30:	cmp	r3, #0
   22f34:	bne	22f18 <__assert_fail@plt+0x1049c>
   22f38:	ldr	lr, [ip, #4]
   22f3c:	add	r5, r5, #8
   22f40:	cmp	r5, lr
   22f44:	bcc	22f04 <__assert_fail@plt+0x10488>
   22f48:	pop	{r4, r5, fp, pc}
   22f4c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   22f50:	add	fp, sp, #24
   22f54:	mov	r5, r1
   22f58:	ldr	r4, [r0]
   22f5c:	ldr	r1, [r0, #4]
   22f60:	mov	r6, #0
   22f64:	cmp	r4, r1
   22f68:	bcs	22fdc <__assert_fail@plt+0x10560>
   22f6c:	mov	r9, r2
   22f70:	mov	r8, r0
   22f74:	mov	r6, #0
   22f78:	b	22fc0 <__assert_fail@plt+0x10544>
   22f7c:	mov	r1, r9
   22f80:	blx	r5
   22f84:	cmp	r0, #0
   22f88:	beq	22fdc <__assert_fail@plt+0x10560>
   22f8c:	mov	r7, r4
   22f90:	ldr	r7, [r7, #4]
   22f94:	add	r6, r6, #1
   22f98:	cmp	r7, #0
   22f9c:	beq	22fb8 <__assert_fail@plt+0x1053c>
   22fa0:	ldr	r0, [r7]
   22fa4:	mov	r1, r9
   22fa8:	blx	r5
   22fac:	cmp	r0, #0
   22fb0:	bne	22f90 <__assert_fail@plt+0x10514>
   22fb4:	b	22fdc <__assert_fail@plt+0x10560>
   22fb8:	ldr	r1, [r8, #4]
   22fbc:	b	22fd0 <__assert_fail@plt+0x10554>
   22fc0:	ldr	r0, [r4]
   22fc4:	cmp	r0, #0
   22fc8:	cmpne	r4, #0
   22fcc:	bne	22f7c <__assert_fail@plt+0x10500>
   22fd0:	add	r4, r4, #8
   22fd4:	cmp	r4, r1
   22fd8:	bcc	22fc0 <__assert_fail@plt+0x10544>
   22fdc:	mov	r0, r6
   22fe0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22fe4:	ldrb	r2, [r0]
   22fe8:	cmp	r2, #0
   22fec:	moveq	r0, #0
   22ff0:	bxeq	lr
   22ff4:	add	r3, r0, #1
   22ff8:	mov	r0, #0
   22ffc:	rsb	r0, r0, r0, lsl #5
   23000:	uxtab	r0, r0, r2
   23004:	udiv	r2, r0, r1
   23008:	mls	r0, r2, r1, r0
   2300c:	ldrb	r2, [r3], #1
   23010:	cmp	r2, #0
   23014:	bne	22ffc <__assert_fail@plt+0x10580>
   23018:	bx	lr
   2301c:	movw	r1, #46128	; 0xb430
   23020:	movt	r1, #4
   23024:	vld1.32	{d16-d17}, [r1]!
   23028:	ldr	r1, [r1]
   2302c:	vst1.32	{d16-d17}, [r0]!
   23030:	str	r1, [r0]
   23034:	bx	lr
   23038:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2303c:	add	fp, sp, #24
   23040:	movw	r9, #12896	; 0x3260
   23044:	movw	r5, #12876	; 0x324c
   23048:	cmp	r3, #0
   2304c:	mov	r6, r0
   23050:	mov	r0, #40	; 0x28
   23054:	mov	r7, r1
   23058:	movt	r9, #2
   2305c:	movt	r5, #2
   23060:	movne	r9, r3
   23064:	cmp	r2, #0
   23068:	movne	r5, r2
   2306c:	bl	3233c <__assert_fail@plt+0x1f8c0>
   23070:	mov	r8, #0
   23074:	cmp	r0, #0
   23078:	beq	23234 <__assert_fail@plt+0x107b8>
   2307c:	mov	r4, r0
   23080:	movw	r0, #46128	; 0xb430
   23084:	cmp	r7, #0
   23088:	movt	r0, #4
   2308c:	moveq	r7, r0
   23090:	cmp	r7, r0
   23094:	str	r7, [r4, #20]
   23098:	beq	23114 <__assert_fail@plt+0x10698>
   2309c:	vldr	s2, [pc, #408]	; 2323c <__assert_fail@plt+0x107c0>
   230a0:	vldr	s0, [r7, #8]
   230a4:	vcmpe.f32	s0, s2
   230a8:	vmrs	APSR_nzcv, fpscr
   230ac:	ble	231c0 <__assert_fail@plt+0x10744>
   230b0:	vldr	s4, [pc, #392]	; 23240 <__assert_fail@plt+0x107c4>
   230b4:	vcmpe.f32	s0, s4
   230b8:	vmrs	APSR_nzcv, fpscr
   230bc:	bpl	231c0 <__assert_fail@plt+0x10744>
   230c0:	vldr	s4, [pc, #380]	; 23244 <__assert_fail@plt+0x107c8>
   230c4:	vldr	s6, [r7, #12]
   230c8:	vcmpe.f32	s6, s4
   230cc:	vmrs	APSR_nzcv, fpscr
   230d0:	ble	231c0 <__assert_fail@plt+0x10744>
   230d4:	vldr	s4, [r7]
   230d8:	vcmpe.f32	s4, #0.0
   230dc:	vmrs	APSR_nzcv, fpscr
   230e0:	blt	231c0 <__assert_fail@plt+0x10744>
   230e4:	vadd.f32	s2, s4, s2
   230e8:	vcmpe.f32	s2, s0
   230ec:	vmrs	APSR_nzcv, fpscr
   230f0:	bpl	231c0 <__assert_fail@plt+0x10744>
   230f4:	vldr	s0, [r7, #4]
   230f8:	vmov.f32	s4, #112	; 0x3f800000  1.0
   230fc:	vcmpe.f32	s0, s4
   23100:	vmrs	APSR_nzcv, fpscr
   23104:	bhi	231c0 <__assert_fail@plt+0x10744>
   23108:	vcmpe.f32	s2, s0
   2310c:	vmrs	APSR_nzcv, fpscr
   23110:	bpl	231c0 <__assert_fail@plt+0x10744>
   23114:	ldrb	r0, [r7, #16]
   23118:	cmp	r0, #0
   2311c:	bne	23148 <__assert_fail@plt+0x106cc>
   23120:	vldr	s0, [r7, #8]
   23124:	vldr	s4, [pc, #284]	; 23248 <__assert_fail@plt+0x107cc>
   23128:	vmov	s2, r6
   2312c:	vcvt.f32.u32	s2, s2
   23130:	vdiv.f32	s2, s2, s0
   23134:	vcmpe.f32	s2, s4
   23138:	vcvt.u32.f32	s0, s2
   2313c:	vmrs	APSR_nzcv, fpscr
   23140:	bge	231d0 <__assert_fail@plt+0x10754>
   23144:	vmov	r6, s0
   23148:	cmp	r6, #10
   2314c:	movls	r6, #10
   23150:	orr	r0, r6, #1
   23154:	cmn	r0, #1
   23158:	beq	231d0 <__assert_fail@plt+0x10754>
   2315c:	ldr	r6, [fp, #8]
   23160:	mov	r1, #3
   23164:	cmp	r0, #10
   23168:	bcc	231a0 <__assert_fail@plt+0x10724>
   2316c:	mov	r1, #3
   23170:	mov	r3, #9
   23174:	mov	r2, #12
   23178:	udiv	r7, r0, r1
   2317c:	mls	r7, r7, r1, r0
   23180:	cmp	r7, #0
   23184:	beq	231a0 <__assert_fail@plt+0x10724>
   23188:	add	r3, r3, r2
   2318c:	add	r2, r2, #8
   23190:	add	r1, r1, #2
   23194:	add	r3, r3, #4
   23198:	cmp	r3, r0
   2319c:	bcc	23178 <__assert_fail@plt+0x106fc>
   231a0:	udiv	r2, r0, r1
   231a4:	mls	r1, r2, r1, r0
   231a8:	cmp	r1, #0
   231ac:	bne	231c8 <__assert_fail@plt+0x1074c>
   231b0:	add	r0, r0, #2
   231b4:	cmn	r0, #1
   231b8:	bne	23160 <__assert_fail@plt+0x106e4>
   231bc:	b	231d0 <__assert_fail@plt+0x10754>
   231c0:	str	r0, [r4, #20]
   231c4:	b	231d8 <__assert_fail@plt+0x1075c>
   231c8:	cmp	r0, #536870912	; 0x20000000
   231cc:	bcc	231e8 <__assert_fail@plt+0x1076c>
   231d0:	mov	r0, #0
   231d4:	str	r0, [r4, #8]
   231d8:	mov	r0, r4
   231dc:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   231e0:	mov	r0, r8
   231e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   231e8:	cmp	r0, #0
   231ec:	str	r0, [r4, #8]
   231f0:	beq	231d8 <__assert_fail@plt+0x1075c>
   231f4:	mov	r1, #8
   231f8:	bl	2f760 <__assert_fail@plt+0x1cce4>
   231fc:	cmp	r0, #0
   23200:	str	r0, [r4]
   23204:	beq	231d8 <__assert_fail@plt+0x1075c>
   23208:	mov	r1, #0
   2320c:	mov	r8, r4
   23210:	str	r1, [r4, #12]
   23214:	str	r1, [r4, #16]
   23218:	str	r5, [r4, #24]
   2321c:	str	r9, [r4, #28]
   23220:	str	r6, [r4, #32]
   23224:	str	r1, [r4, #36]	; 0x24
   23228:	ldr	r1, [r4, #8]
   2322c:	add	r0, r0, r1, lsl #3
   23230:	str	r0, [r4, #4]
   23234:	mov	r0, r8
   23238:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2323c:	stclcc	12, cr12, [ip, #820]	; 0x334
   23240:	svccc	0x00666666
   23244:	svccc	0x008ccccd
   23248:	svcmi	0x00800000
   2324c:	ror	r2, r0, #3
   23250:	udiv	r2, r2, r1
   23254:	mul	r1, r2, r1
   23258:	rsb	r0, r1, r0, ror #3
   2325c:	bx	lr
   23260:	sub	r0, r0, r1
   23264:	clz	r0, r0
   23268:	lsr	r0, r0, #5
   2326c:	bx	lr
   23270:	push	{r4, r5, r6, r7, fp, lr}
   23274:	add	fp, sp, #16
   23278:	mov	r4, r0
   2327c:	ldr	r5, [r0]
   23280:	ldr	r0, [r0, #4]
   23284:	cmp	r5, r0
   23288:	bcs	23320 <__assert_fail@plt+0x108a4>
   2328c:	mov	r6, #0
   23290:	ldr	r1, [r5]
   23294:	cmp	r1, #0
   23298:	beq	23314 <__assert_fail@plt+0x10898>
   2329c:	ldr	r1, [r4, #32]
   232a0:	ldr	r7, [r5, #4]
   232a4:	cmp	r1, #0
   232a8:	mov	r0, r1
   232ac:	movwne	r0, #1
   232b0:	cmp	r7, #0
   232b4:	beq	232f8 <__assert_fail@plt+0x1087c>
   232b8:	tst	r0, #1
   232bc:	beq	232cc <__assert_fail@plt+0x10850>
   232c0:	ldr	r0, [r7]
   232c4:	blx	r1
   232c8:	ldr	r1, [r4, #32]
   232cc:	str	r6, [r7]
   232d0:	cmp	r1, #0
   232d4:	ldr	r0, [r4, #36]	; 0x24
   232d8:	ldr	r2, [r7, #4]
   232dc:	str	r0, [r7, #4]
   232e0:	mov	r0, r1
   232e4:	str	r7, [r4, #36]	; 0x24
   232e8:	mov	r7, r2
   232ec:	movwne	r0, #1
   232f0:	cmp	r2, #0
   232f4:	bne	232b8 <__assert_fail@plt+0x1083c>
   232f8:	cmp	r0, #0
   232fc:	beq	23308 <__assert_fail@plt+0x1088c>
   23300:	ldr	r0, [r5]
   23304:	blx	r1
   23308:	str	r6, [r5]
   2330c:	str	r6, [r5, #4]
   23310:	ldr	r0, [r4, #4]
   23314:	add	r5, r5, #8
   23318:	cmp	r5, r0
   2331c:	bcc	23290 <__assert_fail@plt+0x10814>
   23320:	mov	r0, #0
   23324:	str	r0, [r4, #12]
   23328:	str	r0, [r4, #16]
   2332c:	pop	{r4, r5, r6, r7, fp, pc}
   23330:	push	{r4, r5, r6, sl, fp, lr}
   23334:	add	fp, sp, #16
   23338:	mov	r4, r0
   2333c:	ldr	r0, [r0, #32]
   23340:	cmp	r0, #0
   23344:	ldrne	r0, [r4, #16]
   23348:	cmpne	r0, #0
   2334c:	beq	233b4 <__assert_fail@plt+0x10938>
   23350:	ldr	r5, [r4]
   23354:	ldr	r1, [r4, #4]
   23358:	cmp	r5, r1
   2335c:	bcc	23370 <__assert_fail@plt+0x108f4>
   23360:	b	233b4 <__assert_fail@plt+0x10938>
   23364:	add	r5, r5, #8
   23368:	cmp	r5, r1
   2336c:	bcs	233b4 <__assert_fail@plt+0x10938>
   23370:	ldr	r0, [r5]
   23374:	cmp	r0, #0
   23378:	cmpne	r5, #0
   2337c:	beq	23364 <__assert_fail@plt+0x108e8>
   23380:	ldr	r1, [r4, #32]
   23384:	blx	r1
   23388:	ldr	r6, [r5, #4]
   2338c:	cmp	r6, #0
   23390:	beq	233ac <__assert_fail@plt+0x10930>
   23394:	ldr	r1, [r4, #32]
   23398:	ldr	r0, [r6]
   2339c:	blx	r1
   233a0:	ldr	r6, [r6, #4]
   233a4:	cmp	r6, #0
   233a8:	bne	23394 <__assert_fail@plt+0x10918>
   233ac:	ldr	r1, [r4, #4]
   233b0:	b	23364 <__assert_fail@plt+0x108e8>
   233b4:	ldr	r5, [r4]
   233b8:	ldr	r1, [r4, #4]
   233bc:	cmp	r5, r1
   233c0:	bcc	233d4 <__assert_fail@plt+0x10958>
   233c4:	b	233fc <__assert_fail@plt+0x10980>
   233c8:	add	r5, r5, #8
   233cc:	cmp	r5, r1
   233d0:	bcs	233fc <__assert_fail@plt+0x10980>
   233d4:	ldr	r0, [r5, #4]
   233d8:	cmp	r0, #0
   233dc:	beq	233c8 <__assert_fail@plt+0x1094c>
   233e0:	ldr	r6, [r0, #4]
   233e4:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   233e8:	cmp	r6, #0
   233ec:	mov	r0, r6
   233f0:	bne	233e0 <__assert_fail@plt+0x10964>
   233f4:	ldr	r1, [r4, #4]
   233f8:	b	233c8 <__assert_fail@plt+0x1094c>
   233fc:	ldr	r0, [r4, #36]	; 0x24
   23400:	cmp	r0, #0
   23404:	beq	2341c <__assert_fail@plt+0x109a0>
   23408:	ldr	r5, [r0, #4]
   2340c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   23410:	cmp	r5, #0
   23414:	mov	r0, r5
   23418:	bne	23408 <__assert_fail@plt+0x1098c>
   2341c:	ldr	r0, [r4]
   23420:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   23424:	mov	r0, r4
   23428:	pop	{r4, r5, r6, sl, fp, lr}
   2342c:	b	2fd6c <__assert_fail@plt+0x1d2f0>
   23430:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23434:	add	fp, sp, #28
   23438:	sub	sp, sp, #44	; 0x2c
   2343c:	mov	r7, r0
   23440:	mov	r4, r0
   23444:	ldr	r0, [r7, #20]!
   23448:	ldrb	r2, [r0, #16]
   2344c:	cmp	r2, #0
   23450:	bne	23480 <__assert_fail@plt+0x10a04>
   23454:	vldr	s0, [r0, #8]
   23458:	vldr	s4, [pc, #560]	; 23690 <__assert_fail@plt+0x10c14>
   2345c:	vmov	s2, r1
   23460:	mov	r5, #0
   23464:	vcvt.f32.u32	s2, s2
   23468:	vdiv.f32	s2, s2, s0
   2346c:	vcmpe.f32	s2, s4
   23470:	vcvt.u32.f32	s0, s2
   23474:	vmrs	APSR_nzcv, fpscr
   23478:	bge	23680 <__assert_fail@plt+0x10c04>
   2347c:	vmov	r1, s0
   23480:	cmp	r1, #10
   23484:	mov	r5, #0
   23488:	movls	r1, #10
   2348c:	orr	r6, r1, #1
   23490:	cmn	r6, #1
   23494:	bne	234a8 <__assert_fail@plt+0x10a2c>
   23498:	b	23680 <__assert_fail@plt+0x10c04>
   2349c:	add	r6, r6, #2
   234a0:	cmn	r6, #1
   234a4:	beq	23680 <__assert_fail@plt+0x10c04>
   234a8:	mov	r0, #3
   234ac:	cmp	r6, #10
   234b0:	bcc	234e8 <__assert_fail@plt+0x10a6c>
   234b4:	mov	r0, #3
   234b8:	mov	r2, #9
   234bc:	mov	r1, #12
   234c0:	udiv	r3, r6, r0
   234c4:	mls	r3, r3, r0, r6
   234c8:	cmp	r3, #0
   234cc:	beq	234e8 <__assert_fail@plt+0x10a6c>
   234d0:	add	r2, r2, r1
   234d4:	add	r1, r1, #8
   234d8:	add	r0, r0, #2
   234dc:	add	r2, r2, #4
   234e0:	cmp	r2, r6
   234e4:	bcc	234c0 <__assert_fail@plt+0x10a44>
   234e8:	udiv	r1, r6, r0
   234ec:	mls	r0, r1, r0, r6
   234f0:	cmp	r0, #0
   234f4:	beq	2349c <__assert_fail@plt+0x10a20>
   234f8:	sub	r0, r6, #1
   234fc:	cmn	r0, #-536870910	; 0xe0000002
   23500:	bhi	23680 <__assert_fail@plt+0x10c04>
   23504:	ldr	r0, [r4, #8]
   23508:	cmp	r6, r0
   2350c:	bne	23518 <__assert_fail@plt+0x10a9c>
   23510:	mov	r5, #1
   23514:	b	23680 <__assert_fail@plt+0x10c04>
   23518:	mov	r0, r6
   2351c:	mov	r1, #8
   23520:	bl	2f760 <__assert_fail@plt+0x1cce4>
   23524:	cmp	r0, #0
   23528:	str	r0, [sp, #4]
   2352c:	beq	23680 <__assert_fail@plt+0x10c04>
   23530:	mov	r1, #0
   23534:	add	r0, r0, r6, lsl #3
   23538:	str	r6, [sp, #12]
   2353c:	add	r5, sp, #4
   23540:	mov	sl, r4
   23544:	mov	r2, #0
   23548:	str	r1, [sp, #16]
   2354c:	str	r1, [sp, #20]
   23550:	str	r0, [sp, #8]
   23554:	add	r0, r5, #20
   23558:	mov	r1, r4
   2355c:	vld1.32	{d16-d17}, [r7]
   23560:	vst1.32	{d16-d17}, [r0]
   23564:	ldr	r0, [sl, #36]!	; 0x24
   23568:	str	r0, [sp, #40]	; 0x28
   2356c:	mov	r0, r5
   23570:	bl	23694 <__assert_fail@plt+0x10c18>
   23574:	cmp	r0, #0
   23578:	beq	235a0 <__assert_fail@plt+0x10b24>
   2357c:	ldr	r0, [r4]
   23580:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   23584:	mov	r0, #36	; 0x24
   23588:	vld1.32	{d16-d17}, [r5], r0
   2358c:	vst1.32	{d16-d17}, [r4], r0
   23590:	ldr	r0, [r5]
   23594:	mov	r5, #1
   23598:	str	r0, [r4]
   2359c:	b	23680 <__assert_fail@plt+0x10c04>
   235a0:	ldr	r0, [sp, #40]	; 0x28
   235a4:	str	r0, [sl]
   235a8:	ldr	r0, [sp, #8]
   235ac:	ldr	r8, [sp, #4]
   235b0:	cmp	r8, r0
   235b4:	str	r0, [sp]
   235b8:	bcs	2365c <__assert_fail@plt+0x10be0>
   235bc:	mov	r9, #0
   235c0:	ldr	r0, [r8]
   235c4:	cmp	r0, #0
   235c8:	beq	2364c <__assert_fail@plt+0x10bd0>
   235cc:	ldr	r6, [r8, #4]
   235d0:	cmp	r6, #0
   235d4:	beq	23648 <__assert_fail@plt+0x10bcc>
   235d8:	ldr	r1, [r4, #8]
   235dc:	ldr	r5, [r6]
   235e0:	ldr	r2, [r4, #24]
   235e4:	mov	r0, r5
   235e8:	blx	r2
   235ec:	ldr	r1, [r4, #8]
   235f0:	cmp	r0, r1
   235f4:	bcs	2368c <__assert_fail@plt+0x10c10>
   235f8:	ldr	r3, [r4]
   235fc:	ldr	r2, [r6, #4]
   23600:	ldr	r7, [r3, r0, lsl #3]
   23604:	cmp	r7, #0
   23608:	beq	23618 <__assert_fail@plt+0x10b9c>
   2360c:	add	r0, r3, r0, lsl #3
   23610:	add	r0, r0, #4
   23614:	b	23630 <__assert_fail@plt+0x10bb4>
   23618:	str	r5, [r3, r0, lsl #3]
   2361c:	ldr	r0, [r4, #12]
   23620:	add	r0, r0, #1
   23624:	str	r0, [r4, #12]
   23628:	mov	r0, sl
   2362c:	str	r9, [r6]
   23630:	ldr	r3, [r0]
   23634:	cmp	r2, #0
   23638:	str	r3, [r6, #4]
   2363c:	str	r6, [r0]
   23640:	mov	r6, r2
   23644:	bne	235dc <__assert_fail@plt+0x10b60>
   23648:	str	r9, [r8, #4]
   2364c:	ldr	r0, [sp]
   23650:	add	r8, r8, #8
   23654:	cmp	r8, r0
   23658:	bcc	235c0 <__assert_fail@plt+0x10b44>
   2365c:	add	r1, sp, #4
   23660:	mov	r0, r4
   23664:	mov	r2, #0
   23668:	mov	r5, #0
   2366c:	bl	23694 <__assert_fail@plt+0x10c18>
   23670:	cmp	r0, #0
   23674:	beq	2368c <__assert_fail@plt+0x10c10>
   23678:	ldr	r0, [sp, #4]
   2367c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   23680:	mov	r0, r5
   23684:	sub	sp, fp, #28
   23688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2368c:	bl	12a28 <abort@plt>
   23690:	svcmi	0x00800000
   23694:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23698:	add	fp, sp, #28
   2369c:	sub	sp, sp, #12
   236a0:	ldr	sl, [r1]
   236a4:	str	r1, [sp, #8]
   236a8:	ldr	r1, [r1, #4]
   236ac:	mov	r7, r0
   236b0:	mov	r0, #1
   236b4:	str	r2, [sp, #4]
   236b8:	cmp	sl, r1
   236bc:	bcs	23818 <__assert_fail@plt+0x10d9c>
   236c0:	add	r8, r7, #36	; 0x24
   236c4:	mov	r9, #0
   236c8:	ldr	r4, [sl]
   236cc:	cmp	r4, #0
   236d0:	beq	23800 <__assert_fail@plt+0x10d84>
   236d4:	ldr	r5, [sl, #4]
   236d8:	cmp	r5, #0
   236dc:	beq	23754 <__assert_fail@plt+0x10cd8>
   236e0:	ldr	r1, [r7, #8]
   236e4:	ldr	r4, [r5]
   236e8:	ldr	r2, [r7, #24]
   236ec:	mov	r0, r4
   236f0:	blx	r2
   236f4:	ldr	r1, [r7, #8]
   236f8:	cmp	r0, r1
   236fc:	bcs	2382c <__assert_fail@plt+0x10db0>
   23700:	ldr	r3, [r7]
   23704:	ldr	r2, [r5, #4]
   23708:	ldr	r6, [r3, r0, lsl #3]
   2370c:	cmp	r6, #0
   23710:	beq	23720 <__assert_fail@plt+0x10ca4>
   23714:	add	r0, r3, r0, lsl #3
   23718:	add	r0, r0, #4
   2371c:	b	23738 <__assert_fail@plt+0x10cbc>
   23720:	str	r4, [r3, r0, lsl #3]
   23724:	ldr	r0, [r7, #12]
   23728:	add	r0, r0, #1
   2372c:	str	r0, [r7, #12]
   23730:	mov	r0, r8
   23734:	str	r9, [r5]
   23738:	ldr	r3, [r0]
   2373c:	cmp	r2, #0
   23740:	str	r3, [r5, #4]
   23744:	str	r5, [r0]
   23748:	mov	r5, r2
   2374c:	bne	236e4 <__assert_fail@plt+0x10c68>
   23750:	ldr	r4, [sl]
   23754:	ldr	r0, [sp, #4]
   23758:	str	r9, [sl, #4]
   2375c:	cmp	r0, #0
   23760:	bne	23800 <__assert_fail@plt+0x10d84>
   23764:	ldr	r1, [r7, #8]
   23768:	ldr	r2, [r7, #24]
   2376c:	mov	r0, r4
   23770:	blx	r2
   23774:	mov	r5, r0
   23778:	ldr	r0, [r7, #8]
   2377c:	cmp	r5, r0
   23780:	bcs	2382c <__assert_fail@plt+0x10db0>
   23784:	ldr	r6, [r7]
   23788:	ldr	r0, [r6, r5, lsl #3]
   2378c:	cmp	r0, #0
   23790:	beq	237b0 <__assert_fail@plt+0x10d34>
   23794:	ldr	r0, [r8]
   23798:	cmp	r0, #0
   2379c:	beq	237c4 <__assert_fail@plt+0x10d48>
   237a0:	mov	r1, r0
   237a4:	ldr	r2, [r1, #4]!
   237a8:	str	r2, [r8]
   237ac:	b	237d8 <__assert_fail@plt+0x10d5c>
   237b0:	str	r4, [r6, r5, lsl #3]
   237b4:	ldr	r0, [r7, #12]
   237b8:	add	r0, r0, #1
   237bc:	str	r0, [r7, #12]
   237c0:	b	237ec <__assert_fail@plt+0x10d70>
   237c4:	mov	r0, #8
   237c8:	bl	3233c <__assert_fail@plt+0x1f8c0>
   237cc:	cmp	r0, #0
   237d0:	beq	23820 <__assert_fail@plt+0x10da4>
   237d4:	add	r1, r0, #4
   237d8:	str	r4, [r0]
   237dc:	add	r2, r6, r5, lsl #3
   237e0:	ldr	r3, [r2, #4]
   237e4:	str	r3, [r1]
   237e8:	str	r0, [r2, #4]
   237ec:	ldr	r1, [sp, #8]
   237f0:	str	r9, [sl]
   237f4:	ldr	r0, [r1, #12]
   237f8:	sub	r0, r0, #1
   237fc:	str	r0, [r1, #12]
   23800:	ldr	r0, [sp, #8]
   23804:	add	sl, sl, #8
   23808:	ldr	r0, [r0, #4]
   2380c:	cmp	sl, r0
   23810:	bcc	236c8 <__assert_fail@plt+0x10c4c>
   23814:	mov	r0, #1
   23818:	sub	sp, fp, #28
   2381c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23820:	mov	r0, #0
   23824:	sub	sp, fp, #28
   23828:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2382c:	bl	12a28 <abort@plt>
   23830:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23834:	add	fp, sp, #28
   23838:	sub	sp, sp, #4
   2383c:	cmp	r1, #0
   23840:	beq	23b64 <__assert_fail@plt+0x110e8>
   23844:	mov	r8, r2
   23848:	mov	sl, r1
   2384c:	ldr	r1, [r0, #8]
   23850:	ldr	r2, [r0, #24]
   23854:	mov	r4, r0
   23858:	mov	r0, sl
   2385c:	blx	r2
   23860:	mov	r7, r0
   23864:	ldr	r0, [r4, #8]
   23868:	cmp	r7, r0
   2386c:	bcs	23b64 <__assert_fail@plt+0x110e8>
   23870:	ldr	r5, [r4]
   23874:	mov	r9, r5
   23878:	ldr	r1, [r9, r7, lsl #3]!
   2387c:	cmp	r1, #0
   23880:	beq	2390c <__assert_fail@plt+0x10e90>
   23884:	cmp	r1, sl
   23888:	beq	238b4 <__assert_fail@plt+0x10e38>
   2388c:	ldr	r2, [r4, #28]
   23890:	mov	r0, sl
   23894:	blx	r2
   23898:	cmp	r0, #0
   2389c:	mov	r6, r9
   238a0:	beq	238c8 <__assert_fail@plt+0x10e4c>
   238a4:	ldr	r0, [r6]
   238a8:	cmp	r0, #0
   238ac:	bne	238b8 <__assert_fail@plt+0x10e3c>
   238b0:	b	2390c <__assert_fail@plt+0x10e90>
   238b4:	mov	r0, sl
   238b8:	cmp	r8, #0
   238bc:	mov	r7, #0
   238c0:	strne	r0, [r8]
   238c4:	b	23b00 <__assert_fail@plt+0x11084>
   238c8:	add	r6, r5, r7, lsl #3
   238cc:	ldr	r0, [r6, #4]!
   238d0:	cmp	r0, #0
   238d4:	beq	2390c <__assert_fail@plt+0x10e90>
   238d8:	ldr	r1, [r0]
   238dc:	cmp	r1, sl
   238e0:	beq	23900 <__assert_fail@plt+0x10e84>
   238e4:	ldr	r2, [r4, #28]
   238e8:	mov	r0, sl
   238ec:	blx	r2
   238f0:	ldr	r6, [r6]
   238f4:	cmp	r0, #0
   238f8:	beq	238cc <__assert_fail@plt+0x10e50>
   238fc:	b	238a4 <__assert_fail@plt+0x10e28>
   23900:	mov	r0, sl
   23904:	cmp	r0, #0
   23908:	bne	238b8 <__assert_fail@plt+0x10e3c>
   2390c:	vldr	s0, [r4, #8]
   23910:	vldr	s2, [r4, #12]
   23914:	ldr	r0, [r4, #20]
   23918:	vcvt.f32.u32	s0, s0
   2391c:	vcvt.f32.u32	s4, s2
   23920:	vldr	s2, [r0, #8]
   23924:	vmul.f32	s6, s2, s0
   23928:	vcmpe.f32	s6, s4
   2392c:	vmrs	APSR_nzcv, fpscr
   23930:	bpl	23a84 <__assert_fail@plt+0x11008>
   23934:	movw	r1, #46128	; 0xb430
   23938:	movt	r1, #4
   2393c:	cmp	r0, r1
   23940:	beq	239cc <__assert_fail@plt+0x10f50>
   23944:	vldr	s6, [pc, #540]	; 23b68 <__assert_fail@plt+0x110ec>
   23948:	vcmpe.f32	s2, s6
   2394c:	vmrs	APSR_nzcv, fpscr
   23950:	ble	239b8 <__assert_fail@plt+0x10f3c>
   23954:	vldr	s8, [pc, #528]	; 23b6c <__assert_fail@plt+0x110f0>
   23958:	vcmpe.f32	s2, s8
   2395c:	vmrs	APSR_nzcv, fpscr
   23960:	bpl	239b8 <__assert_fail@plt+0x10f3c>
   23964:	vldr	s8, [pc, #516]	; 23b70 <__assert_fail@plt+0x110f4>
   23968:	vldr	s10, [r0, #12]
   2396c:	vcmpe.f32	s10, s8
   23970:	vmrs	APSR_nzcv, fpscr
   23974:	ble	239b8 <__assert_fail@plt+0x10f3c>
   23978:	vldr	s8, [r0]
   2397c:	vcmpe.f32	s8, #0.0
   23980:	vmrs	APSR_nzcv, fpscr
   23984:	blt	239b8 <__assert_fail@plt+0x10f3c>
   23988:	vadd.f32	s6, s8, s6
   2398c:	vcmpe.f32	s6, s2
   23990:	vmrs	APSR_nzcv, fpscr
   23994:	bpl	239b8 <__assert_fail@plt+0x10f3c>
   23998:	vldr	s8, [r0, #4]
   2399c:	vmov.f32	s10, #112	; 0x3f800000  1.0
   239a0:	vcmpe.f32	s8, s10
   239a4:	vmrs	APSR_nzcv, fpscr
   239a8:	bhi	239b8 <__assert_fail@plt+0x10f3c>
   239ac:	vcmpe.f32	s6, s8
   239b0:	vmrs	APSR_nzcv, fpscr
   239b4:	bmi	239d0 <__assert_fail@plt+0x10f54>
   239b8:	vldr	s2, [pc, #436]	; 23b74 <__assert_fail@plt+0x110f8>
   239bc:	movw	r0, #46128	; 0xb430
   239c0:	movt	r0, #4
   239c4:	str	r0, [r4, #20]
   239c8:	b	239d0 <__assert_fail@plt+0x10f54>
   239cc:	mov	r0, r1
   239d0:	vmul.f32	s6, s2, s0
   239d4:	vcmpe.f32	s6, s4
   239d8:	vmrs	APSR_nzcv, fpscr
   239dc:	bpl	23a84 <__assert_fail@plt+0x11008>
   239e0:	vldr	s4, [r0, #12]
   239e4:	ldrb	r0, [r0, #16]
   239e8:	mvn	r7, #0
   239ec:	vmul.f32	s0, s4, s0
   239f0:	vldr	s4, [pc, #384]	; 23b78 <__assert_fail@plt+0x110fc>
   239f4:	cmp	r0, #0
   239f8:	vmul.f32	s2, s2, s0
   239fc:	vseleq.f32	s0, s2, s0
   23a00:	vcmpe.f32	s0, s4
   23a04:	vmrs	APSR_nzcv, fpscr
   23a08:	bge	23b00 <__assert_fail@plt+0x11084>
   23a0c:	vcvt.u32.f32	s0, s0
   23a10:	mov	r0, r4
   23a14:	vmov	r1, s0
   23a18:	bl	23430 <__assert_fail@plt+0x109b4>
   23a1c:	cmp	r0, #0
   23a20:	beq	23b00 <__assert_fail@plt+0x11084>
   23a24:	ldr	r1, [r4, #8]
   23a28:	ldr	r2, [r4, #24]
   23a2c:	mov	r0, sl
   23a30:	blx	r2
   23a34:	mov	r7, r0
   23a38:	ldr	r0, [r4, #8]
   23a3c:	cmp	r7, r0
   23a40:	bcs	23b64 <__assert_fail@plt+0x110e8>
   23a44:	ldr	r5, [r4]
   23a48:	mov	r9, r5
   23a4c:	ldr	r1, [r9, r7, lsl #3]!
   23a50:	cmp	r1, #0
   23a54:	beq	23aac <__assert_fail@plt+0x11030>
   23a58:	cmp	r1, sl
   23a5c:	mov	r0, sl
   23a60:	beq	23a7c <__assert_fail@plt+0x11000>
   23a64:	ldr	r2, [r4, #28]
   23a68:	mov	r0, sl
   23a6c:	blx	r2
   23a70:	cmp	r0, #0
   23a74:	beq	23b14 <__assert_fail@plt+0x11098>
   23a78:	ldr	r0, [r9]
   23a7c:	cmp	r0, #0
   23a80:	bne	23b64 <__assert_fail@plt+0x110e8>
   23a84:	ldr	r0, [r9]
   23a88:	cmp	r0, #0
   23a8c:	beq	23aac <__assert_fail@plt+0x11030>
   23a90:	ldr	r0, [r4, #36]	; 0x24
   23a94:	cmp	r0, #0
   23a98:	beq	23acc <__assert_fail@plt+0x11050>
   23a9c:	mov	r1, r0
   23aa0:	ldr	r2, [r1, #4]!
   23aa4:	str	r2, [r4, #36]	; 0x24
   23aa8:	b	23ae0 <__assert_fail@plt+0x11064>
   23aac:	str	sl, [r9]
   23ab0:	ldr	r0, [r4, #12]
   23ab4:	ldr	r1, [r4, #16]
   23ab8:	add	r0, r0, #1
   23abc:	add	r1, r1, #1
   23ac0:	str	r0, [r4, #12]
   23ac4:	str	r1, [r4, #16]
   23ac8:	b	23afc <__assert_fail@plt+0x11080>
   23acc:	mov	r0, #8
   23ad0:	bl	3233c <__assert_fail@plt+0x1f8c0>
   23ad4:	cmp	r0, #0
   23ad8:	beq	23b0c <__assert_fail@plt+0x11090>
   23adc:	add	r1, r0, #4
   23ae0:	str	sl, [r0]
   23ae4:	ldr	r2, [r9, #4]
   23ae8:	str	r2, [r1]
   23aec:	str	r0, [r9, #4]
   23af0:	ldr	r0, [r4, #16]
   23af4:	add	r0, r0, #1
   23af8:	str	r0, [r4, #16]
   23afc:	mov	r7, #1
   23b00:	mov	r0, r7
   23b04:	sub	sp, fp, #28
   23b08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23b0c:	mvn	r7, #0
   23b10:	b	23b00 <__assert_fail@plt+0x11084>
   23b14:	add	r6, r5, r7, lsl #3
   23b18:	ldr	r0, [r6, #4]!
   23b1c:	cmp	r0, #0
   23b20:	beq	23a84 <__assert_fail@plt+0x11008>
   23b24:	ldr	r1, [r0]
   23b28:	cmp	r1, sl
   23b2c:	beq	23b58 <__assert_fail@plt+0x110dc>
   23b30:	ldr	r2, [r4, #28]
   23b34:	mov	r0, sl
   23b38:	blx	r2
   23b3c:	ldr	r6, [r6]
   23b40:	cmp	r0, #0
   23b44:	beq	23b18 <__assert_fail@plt+0x1109c>
   23b48:	ldr	r0, [r6]
   23b4c:	cmp	r0, #0
   23b50:	beq	23a84 <__assert_fail@plt+0x11008>
   23b54:	b	23b64 <__assert_fail@plt+0x110e8>
   23b58:	mov	r0, sl
   23b5c:	cmp	r0, #0
   23b60:	beq	23a84 <__assert_fail@plt+0x11008>
   23b64:	bl	12a28 <abort@plt>
   23b68:	stclcc	12, cr12, [ip, #820]	; 0x334
   23b6c:	svccc	0x00666666
   23b70:	svccc	0x008ccccd
   23b74:	svccc	0x004ccccd
   23b78:	svcmi	0x00800000
   23b7c:	push	{r4, sl, fp, lr}
   23b80:	add	fp, sp, #8
   23b84:	sub	sp, sp, #8
   23b88:	add	r2, sp, #4
   23b8c:	mov	r4, r1
   23b90:	bl	23830 <__assert_fail@plt+0x10db4>
   23b94:	cmn	r0, #1
   23b98:	beq	23bac <__assert_fail@plt+0x11130>
   23b9c:	ldr	r1, [sp, #4]
   23ba0:	cmp	r0, #0
   23ba4:	moveq	r4, r1
   23ba8:	b	23bb0 <__assert_fail@plt+0x11134>
   23bac:	mov	r4, #0
   23bb0:	mov	r0, r4
   23bb4:	sub	sp, fp, #8
   23bb8:	pop	{r4, sl, fp, pc}
   23bbc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   23bc0:	add	fp, sp, #24
   23bc4:	mov	r9, r1
   23bc8:	ldr	r1, [r0, #8]
   23bcc:	ldr	r2, [r0, #24]
   23bd0:	mov	r5, r0
   23bd4:	mov	r0, r9
   23bd8:	blx	r2
   23bdc:	mov	r7, r0
   23be0:	ldr	r0, [r5, #8]
   23be4:	cmp	r7, r0
   23be8:	bcs	23e48 <__assert_fail@plt+0x113cc>
   23bec:	ldr	r6, [r5]
   23bf0:	mov	r8, #0
   23bf4:	mov	r4, r6
   23bf8:	ldr	r1, [r4, r7, lsl #3]!
   23bfc:	cmp	r1, #0
   23c00:	beq	23cb4 <__assert_fail@plt+0x11238>
   23c04:	cmp	r1, r9
   23c08:	beq	23c24 <__assert_fail@plt+0x111a8>
   23c0c:	ldr	r2, [r5, #28]
   23c10:	mov	r0, r9
   23c14:	blx	r2
   23c18:	cmp	r0, #0
   23c1c:	beq	23c5c <__assert_fail@plt+0x111e0>
   23c20:	ldr	r9, [r4]
   23c24:	add	r0, r6, r7, lsl #3
   23c28:	ldr	r0, [r0, #4]
   23c2c:	cmp	r0, #0
   23c30:	beq	23ca4 <__assert_fail@plt+0x11228>
   23c34:	ldm	r0, {r1, r2}
   23c38:	stm	r4, {r1, r2}
   23c3c:	mov	r1, #0
   23c40:	str	r1, [r0]
   23c44:	ldr	r1, [r5, #36]	; 0x24
   23c48:	str	r1, [r0, #4]
   23c4c:	str	r0, [r5, #36]	; 0x24
   23c50:	cmp	r9, #0
   23c54:	bne	23cec <__assert_fail@plt+0x11270>
   23c58:	b	23cb4 <__assert_fail@plt+0x11238>
   23c5c:	add	r7, r6, r7, lsl #3
   23c60:	ldr	r0, [r7, #4]!
   23c64:	cmp	r0, #0
   23c68:	beq	23cb4 <__assert_fail@plt+0x11238>
   23c6c:	ldr	r1, [r0]
   23c70:	cmp	r1, r9
   23c74:	beq	23cbc <__assert_fail@plt+0x11240>
   23c78:	ldr	r2, [r5, #28]
   23c7c:	mov	r0, r9
   23c80:	blx	r2
   23c84:	ldr	r1, [r7]
   23c88:	cmp	r0, #0
   23c8c:	bne	23cc4 <__assert_fail@plt+0x11248>
   23c90:	ldr	r0, [r1, #4]!
   23c94:	cmp	r0, #0
   23c98:	mov	r7, r1
   23c9c:	bne	23c6c <__assert_fail@plt+0x111f0>
   23ca0:	b	23cb4 <__assert_fail@plt+0x11238>
   23ca4:	mov	r0, #0
   23ca8:	str	r0, [r4]
   23cac:	cmp	r9, #0
   23cb0:	bne	23cec <__assert_fail@plt+0x11270>
   23cb4:	mov	r0, r8
   23cb8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23cbc:	mov	r1, r0
   23cc0:	b	23cc8 <__assert_fail@plt+0x1124c>
   23cc4:	ldr	r9, [r1]
   23cc8:	ldr	r0, [r1, #4]
   23ccc:	str	r0, [r7]
   23cd0:	mov	r0, #0
   23cd4:	str	r0, [r1]
   23cd8:	ldr	r0, [r5, #36]	; 0x24
   23cdc:	str	r0, [r1, #4]
   23ce0:	str	r1, [r5, #36]	; 0x24
   23ce4:	cmp	r9, #0
   23ce8:	beq	23cb4 <__assert_fail@plt+0x11238>
   23cec:	ldr	r0, [r5, #16]
   23cf0:	sub	r0, r0, #1
   23cf4:	str	r0, [r5, #16]
   23cf8:	ldr	r0, [r4]
   23cfc:	cmp	r0, #0
   23d00:	bne	23e08 <__assert_fail@plt+0x1138c>
   23d04:	ldr	r0, [r5, #12]
   23d08:	vldr	s0, [r5, #8]
   23d0c:	sub	r1, r0, #1
   23d10:	str	r1, [r5, #12]
   23d14:	vmov	s2, r1
   23d18:	ldr	r0, [r5, #20]
   23d1c:	vcvt.f32.u32	s0, s0
   23d20:	vcvt.f32.u32	s2, s2
   23d24:	vldr	s4, [r0]
   23d28:	vmul.f32	s6, s4, s0
   23d2c:	vcmpe.f32	s6, s2
   23d30:	vmrs	APSR_nzcv, fpscr
   23d34:	ble	23e08 <__assert_fail@plt+0x1138c>
   23d38:	movw	r1, #46128	; 0xb430
   23d3c:	movt	r1, #4
   23d40:	cmp	r0, r1
   23d44:	beq	23d9c <__assert_fail@plt+0x11320>
   23d48:	vldr	s8, [pc, #252]	; 23e4c <__assert_fail@plt+0x113d0>
   23d4c:	vldr	s6, [r0, #8]
   23d50:	vcmpe.f32	s6, s8
   23d54:	vmrs	APSR_nzcv, fpscr
   23d58:	ble	23d88 <__assert_fail@plt+0x1130c>
   23d5c:	vldr	s10, [pc, #236]	; 23e50 <__assert_fail@plt+0x113d4>
   23d60:	vcmpe.f32	s6, s10
   23d64:	vmrs	APSR_nzcv, fpscr
   23d68:	bpl	23d88 <__assert_fail@plt+0x1130c>
   23d6c:	vcmpe.f32	s4, #0.0
   23d70:	vmrs	APSR_nzcv, fpscr
   23d74:	vldrge	s10, [r0, #12]
   23d78:	vldrge	s12, [pc, #212]	; 23e54 <__assert_fail@plt+0x113d8>
   23d7c:	vcmpege.f32	s10, s12
   23d80:	vmrsge	APSR_nzcv, fpscr
   23d84:	bgt	23e14 <__assert_fail@plt+0x11398>
   23d88:	vldr	s4, [pc, #200]	; 23e58 <__assert_fail@plt+0x113dc>
   23d8c:	movw	r0, #46128	; 0xb430
   23d90:	movt	r0, #4
   23d94:	str	r0, [r5, #20]
   23d98:	b	23da0 <__assert_fail@plt+0x11324>
   23d9c:	mov	r0, r1
   23da0:	vmul.f32	s4, s4, s0
   23da4:	vcmpe.f32	s4, s2
   23da8:	vmrs	APSR_nzcv, fpscr
   23dac:	ble	23e08 <__assert_fail@plt+0x1138c>
   23db0:	ldrb	r1, [r0, #16]
   23db4:	vldr	s2, [r0, #4]
   23db8:	cmp	r1, #0
   23dbc:	vmul.f32	s0, s2, s0
   23dc0:	vldreq	s2, [r0, #8]
   23dc4:	mov	r0, r5
   23dc8:	vmuleq.f32	s0, s0, s2
   23dcc:	vcvt.u32.f32	s0, s0
   23dd0:	vmov	r1, s0
   23dd4:	bl	23430 <__assert_fail@plt+0x109b4>
   23dd8:	cmp	r0, #0
   23ddc:	bne	23e08 <__assert_fail@plt+0x1138c>
   23de0:	ldr	r0, [r5, #36]	; 0x24
   23de4:	cmp	r0, #0
   23de8:	beq	23e00 <__assert_fail@plt+0x11384>
   23dec:	ldr	r4, [r0, #4]
   23df0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   23df4:	cmp	r4, #0
   23df8:	mov	r0, r4
   23dfc:	bne	23dec <__assert_fail@plt+0x11370>
   23e00:	mov	r0, #0
   23e04:	str	r0, [r5, #36]	; 0x24
   23e08:	mov	r8, r9
   23e0c:	mov	r0, r8
   23e10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23e14:	vadd.f32	s8, s4, s8
   23e18:	vcmpe.f32	s8, s6
   23e1c:	vmrs	APSR_nzcv, fpscr
   23e20:	bpl	23d88 <__assert_fail@plt+0x1130c>
   23e24:	vldr	s6, [r0, #4]
   23e28:	vmov.f32	s10, #112	; 0x3f800000  1.0
   23e2c:	vcmpe.f32	s6, s10
   23e30:	vmrs	APSR_nzcv, fpscr
   23e34:	bhi	23d88 <__assert_fail@plt+0x1130c>
   23e38:	vcmpe.f32	s8, s6
   23e3c:	vmrs	APSR_nzcv, fpscr
   23e40:	bmi	23da0 <__assert_fail@plt+0x11324>
   23e44:	b	23d88 <__assert_fail@plt+0x1130c>
   23e48:	bl	12a28 <abort@plt>
   23e4c:	stclcc	12, cr12, [ip, #820]	; 0x334
   23e50:	svccc	0x00666666
   23e54:	svccc	0x008ccccd
   23e58:	andeq	r0, r0, r0
   23e5c:	b	23bbc <__assert_fail@plt+0x11140>
   23e60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23e64:	add	fp, sp, #28
   23e68:	sub	sp, sp, #4
   23e6c:	vpush	{d8-d9}
   23e70:	sub	sp, sp, #96	; 0x60
   23e74:	mov	r7, r3
   23e78:	mov	r6, r2
   23e7c:	mov	r9, r1
   23e80:	str	r0, [sp, #36]	; 0x24
   23e84:	bl	1292c <localeconv@plt>
   23e88:	ldr	r5, [r0]
   23e8c:	mov	r4, r0
   23e90:	mov	r0, r5
   23e94:	bl	12788 <strlen@plt>
   23e98:	movw	r2, #31476	; 0x7af4
   23e9c:	sub	r1, r0, #1
   23ea0:	cmp	r1, #16
   23ea4:	movt	r2, #4
   23ea8:	movcc	r2, r5
   23eac:	ldr	r5, [r4, #4]
   23eb0:	ldr	r4, [r4, #8]
   23eb4:	movcs	r0, #1
   23eb8:	str	r0, [sp, #8]
   23ebc:	str	r2, [sp, #4]
   23ec0:	mov	r0, r5
   23ec4:	bl	12788 <strlen@plt>
   23ec8:	movw	r3, #34847	; 0x881f
   23ecc:	cmp	r0, #17
   23ed0:	movw	r0, #647	; 0x287
   23ed4:	ldr	r2, [fp, #16]
   23ed8:	ldr	sl, [fp, #8]
   23edc:	ldr	r8, [fp, #12]
   23ee0:	str	r6, [sp, #20]
   23ee4:	str	r7, [sp, #28]
   23ee8:	str	r4, [sp, #12]
   23eec:	movt	r3, #4
   23ef0:	add	r1, r6, r0
   23ef4:	movcc	r3, r5
   23ef8:	ands	r0, r7, #32
   23efc:	ldr	r5, [fp, #20]
   23f00:	str	r1, [sp, #24]
   23f04:	str	r0, [sp, #16]
   23f08:	mov	r0, #1000	; 0x3e8
   23f0c:	str	r3, [sp, #44]	; 0x2c
   23f10:	movwne	r0, #1024	; 0x400
   23f14:	str	r0, [sp, #32]
   23f18:	and	r0, r7, #3
   23f1c:	str	r0, [sp, #40]	; 0x28
   23f20:	subs	r0, sl, r2
   23f24:	sbcs	r0, r8, r5
   23f28:	bcs	2401c <__assert_fail@plt+0x115a0>
   23f2c:	orrs	r0, sl, r8
   23f30:	mov	r4, r9
   23f34:	beq	24104 <__assert_fail@plt+0x11688>
   23f38:	ldr	r5, [fp, #20]
   23f3c:	mov	r0, r2
   23f40:	mov	r2, sl
   23f44:	mov	r3, r8
   23f48:	mov	r1, r5
   23f4c:	bl	466fc <__assert_fail@plt+0x33c80>
   23f50:	ldr	r2, [fp, #16]
   23f54:	mov	r6, r0
   23f58:	mov	r3, r1
   23f5c:	umull	r0, r1, r0, sl
   23f60:	mla	r1, r6, r8, r1
   23f64:	mla	r1, r3, sl, r1
   23f68:	subs	r0, r2, r0
   23f6c:	sbc	r1, r5, r1
   23f70:	orrs	r0, r0, r1
   23f74:	bne	24104 <__assert_fail@plt+0x11688>
   23f78:	ldr	r5, [sp, #36]	; 0x24
   23f7c:	mov	r1, r4
   23f80:	mov	r2, r6
   23f84:	mov	r8, r3
   23f88:	mov	r0, r5
   23f8c:	bl	466fc <__assert_fail@plt+0x33c80>
   23f90:	mov	r7, r0
   23f94:	mov	r9, r1
   23f98:	umull	r0, r1, r0, r6
   23f9c:	mov	r2, #10
   23fa0:	mov	r3, r8
   23fa4:	mla	r1, r7, r8, r1
   23fa8:	subs	r0, r5, r0
   23fac:	mla	r1, r9, r6, r1
   23fb0:	umull	sl, r0, r0, r2
   23fb4:	mov	r2, r6
   23fb8:	sbc	r1, r4, r1
   23fbc:	add	r1, r1, r1, lsl #2
   23fc0:	add	r5, r0, r1, lsl #1
   23fc4:	mov	r0, sl
   23fc8:	mov	r1, r5
   23fcc:	bl	466fc <__assert_fail@plt+0x33c80>
   23fd0:	mov	r4, r0
   23fd4:	umull	r0, r2, r0, r6
   23fd8:	mla	r2, r4, r8, r2
   23fdc:	subs	r0, sl, r0
   23fe0:	mla	r1, r1, r6, r2
   23fe4:	mov	r2, #2
   23fe8:	sbc	r1, r5, r1
   23fec:	subs	r3, r6, r0, lsl #1
   23ff0:	lsl	r1, r1, #1
   23ff4:	orr	r1, r1, r0, lsr #31
   23ff8:	sbcs	r3, r8, r1
   23ffc:	orr	r5, r1, r0, lsl #1
   24000:	movwcc	r2, #3
   24004:	cmp	r5, #0
   24008:	movwne	r5, #1
   2400c:	rsbs	r0, r6, r0, lsl #1
   24010:	sbcs	r0, r1, r8
   24014:	movcs	r5, r2
   24018:	b	24094 <__assert_fail@plt+0x11618>
   2401c:	mov	r0, sl
   24020:	mov	r1, r8
   24024:	mov	r3, r5
   24028:	bl	466fc <__assert_fail@plt+0x33c80>
   2402c:	ldr	r2, [fp, #16]
   24030:	mov	r6, r0
   24034:	mov	r3, r1
   24038:	mov	r4, r9
   2403c:	umull	r0, r1, r0, r2
   24040:	mla	r1, r6, r5, r1
   24044:	subs	r0, sl, r0
   24048:	mla	r1, r3, r2, r1
   2404c:	sbc	r1, r8, r1
   24050:	orrs	r0, r0, r1
   24054:	bne	24104 <__assert_fail@plt+0x11688>
   24058:	ldr	r5, [sp, #36]	; 0x24
   2405c:	mov	r2, r6
   24060:	umull	r7, r0, r6, r5
   24064:	mla	r0, r6, r4, r0
   24068:	mla	r9, r3, r5, r0
   2406c:	mov	r0, r7
   24070:	mov	r1, r9
   24074:	bl	466fc <__assert_fail@plt+0x33c80>
   24078:	ldr	r2, [fp, #16]
   2407c:	eor	r1, r1, r4
   24080:	eor	r0, r0, r5
   24084:	orrs	r0, r0, r1
   24088:	bne	24104 <__assert_fail@plt+0x11688>
   2408c:	mov	r5, #0
   24090:	mov	r4, #0
   24094:	ldr	r0, [sp, #28]
   24098:	ldr	r2, [sp, #32]
   2409c:	mvn	r6, #0
   240a0:	ands	r8, r0, #16
   240a4:	beq	240b8 <__assert_fail@plt+0x1163c>
   240a8:	subs	r0, r7, r2
   240ac:	mov	r6, #0
   240b0:	sbcs	r0, r9, #0
   240b4:	bcs	245f0 <__assert_fail@plt+0x11b74>
   240b8:	ldr	r0, [sp, #24]
   240bc:	mov	sl, r7
   240c0:	str	r0, [sp, #36]	; 0x24
   240c4:	ldr	r0, [sp, #40]	; 0x28
   240c8:	cmp	r0, #0
   240cc:	beq	24404 <__assert_fail@plt+0x11988>
   240d0:	cmp	r0, #1
   240d4:	bne	24478 <__assert_fail@plt+0x119fc>
   240d8:	rsbs	r1, r5, #0
   240dc:	mov	r0, #0
   240e0:	and	r3, sl, #1
   240e4:	ldr	r5, [sp, #36]	; 0x24
   240e8:	sbc	r0, r0, #0
   240ec:	eor	r1, r3, r1
   240f0:	orrs	r0, r1, r0
   240f4:	addne	r4, r4, #1
   240f8:	cmp	r4, #5
   240fc:	bgt	24414 <__assert_fail@plt+0x11998>
   24100:	b	24468 <__assert_fail@plt+0x119ec>
   24104:	ldr	r9, [fp, #20]
   24108:	mov	r0, r2
   2410c:	mov	r1, r9
   24110:	bl	465b4 <__assert_fail@plt+0x33b38>
   24114:	vmov	d8, r0, r1
   24118:	ldr	r0, [sp, #36]	; 0x24
   2411c:	mov	r1, r4
   24120:	bl	465b4 <__assert_fail@plt+0x33b38>
   24124:	mov	r6, r0
   24128:	mov	r7, r1
   2412c:	mov	r0, sl
   24130:	mov	r1, r8
   24134:	bl	465b4 <__assert_fail@plt+0x33b38>
   24138:	vmov	d17, r6, r7
   2413c:	ldr	r7, [sp, #28]
   24140:	vmov	d16, r0, r1
   24144:	vdiv.f64	d16, d16, d8
   24148:	vmul.f64	d8, d16, d17
   2414c:	tst	r7, #16
   24150:	bne	241c4 <__assert_fail@plt+0x11748>
   24154:	ldr	r0, [sp, #40]	; 0x28
   24158:	ldr	sl, [sp, #20]
   2415c:	cmp	r0, #1
   24160:	beq	24364 <__assert_fail@plt+0x118e8>
   24164:	vldr	d16, [pc, #772]	; 24470 <__assert_fail@plt+0x119f4>
   24168:	ldr	r8, [sp, #24]
   2416c:	vcmpe.f64	d8, d16
   24170:	vmrs	APSR_nzcv, fpscr
   24174:	bpl	24368 <__assert_fail@plt+0x118ec>
   24178:	mov	r6, r0
   2417c:	vmov	r0, r1, d8
   24180:	bl	46748 <__assert_fail@plt+0x33ccc>
   24184:	mov	r4, r0
   24188:	mov	r5, r1
   2418c:	bl	465b4 <__assert_fail@plt+0x33b38>
   24190:	vmov	d16, r0, r1
   24194:	clz	r0, r6
   24198:	mov	r2, #0
   2419c:	vcmp.f64	d8, d16
   241a0:	lsr	r0, r0, #5
   241a4:	vmrs	APSR_nzcv, fpscr
   241a8:	movwne	r2, #1
   241ac:	and	r0, r0, r2
   241b0:	adds	r0, r0, r4
   241b4:	adc	r1, r5, #0
   241b8:	bl	465b4 <__assert_fail@plt+0x33b38>
   241bc:	vmov	d8, r0, r1
   241c0:	b	24368 <__assert_fail@plt+0x118ec>
   241c4:	ldr	r0, [sp, #32]
   241c8:	vmov.f64	d16, #112	; 0x3f800000  1.0
   241cc:	mov	r6, #0
   241d0:	vmov	s0, r0
   241d4:	vcvt.f64.u32	d17, s0
   241d8:	ldr	sl, [sp, #20]
   241dc:	add	r6, r6, #1
   241e0:	vmul.f64	d16, d16, d17
   241e4:	cmp	r6, #7
   241e8:	vmulls.f64	d18, d16, d17
   241ec:	vcmpels.f64	d18, d8
   241f0:	vmrsls	APSR_nzcv, fpscr
   241f4:	bls	241dc <__assert_fail@plt+0x11760>
   241f8:	ldr	r0, [sp, #40]	; 0x28
   241fc:	ldr	r8, [sp, #24]
   24200:	ldr	r5, [sp, #8]
   24204:	vdiv.f64	d8, d8, d16
   24208:	vmov.f64	d16, d8
   2420c:	cmp	r0, #1
   24210:	beq	24274 <__assert_fail@plt+0x117f8>
   24214:	vldr	d16, [pc, #596]	; 24470 <__assert_fail@plt+0x119f4>
   24218:	vcmpe.f64	d8, d16
   2421c:	vmov.f64	d16, d8
   24220:	vmrs	APSR_nzcv, fpscr
   24224:	bpl	24274 <__assert_fail@plt+0x117f8>
   24228:	vmov	r0, r1, d8
   2422c:	bl	46748 <__assert_fail@plt+0x33ccc>
   24230:	mov	r4, r0
   24234:	mov	r5, r1
   24238:	bl	465b4 <__assert_fail@plt+0x33b38>
   2423c:	vmov	d16, r0, r1
   24240:	ldr	r0, [sp, #40]	; 0x28
   24244:	mov	r2, #0
   24248:	vcmp.f64	d8, d16
   2424c:	vmrs	APSR_nzcv, fpscr
   24250:	movwne	r2, #1
   24254:	clz	r0, r0
   24258:	lsr	r0, r0, #5
   2425c:	and	r0, r0, r2
   24260:	adds	r0, r0, r4
   24264:	adc	r1, r5, #0
   24268:	ldr	r5, [sp, #8]
   2426c:	bl	465b4 <__assert_fail@plt+0x33b38>
   24270:	vmov	d16, r0, r1
   24274:	movw	r1, #46154	; 0xb44a
   24278:	vmov	r2, r3, d16
   2427c:	mov	r0, sl
   24280:	movt	r1, #4
   24284:	bl	12938 <sprintf@plt>
   24288:	ldr	r1, [sp, #16]
   2428c:	mov	r0, #3
   24290:	cmp	r1, #0
   24294:	movwne	r0, #2
   24298:	add	r4, r0, r5
   2429c:	mov	r0, sl
   242a0:	bl	12788 <strlen@plt>
   242a4:	cmp	r4, r0
   242a8:	bcc	242cc <__assert_fail@plt+0x11850>
   242ac:	mov	r2, r0
   242b0:	add	r5, r5, #1
   242b4:	tst	r7, #8
   242b8:	beq	24390 <__assert_fail@plt+0x11914>
   242bc:	add	r0, sl, r2
   242c0:	ldrb	r0, [r0, #-1]
   242c4:	cmp	r0, #48	; 0x30
   242c8:	bne	24390 <__assert_fail@plt+0x11914>
   242cc:	ldr	r0, [sp, #40]	; 0x28
   242d0:	vmov.f64	d9, #36	; 0x41200000  10.0
   242d4:	vmul.f64	d8, d8, d9
   242d8:	cmp	r0, #1
   242dc:	beq	24338 <__assert_fail@plt+0x118bc>
   242e0:	vldr	d16, [pc, #392]	; 24470 <__assert_fail@plt+0x119f4>
   242e4:	vcmpe.f64	d8, d16
   242e8:	vmrs	APSR_nzcv, fpscr
   242ec:	bpl	24338 <__assert_fail@plt+0x118bc>
   242f0:	vmov	r0, r1, d8
   242f4:	bl	46748 <__assert_fail@plt+0x33ccc>
   242f8:	mov	r4, r0
   242fc:	mov	r5, r1
   24300:	bl	465b4 <__assert_fail@plt+0x33b38>
   24304:	vmov	d16, r0, r1
   24308:	ldr	r0, [sp, #40]	; 0x28
   2430c:	mov	r2, #0
   24310:	vcmp.f64	d8, d16
   24314:	vmrs	APSR_nzcv, fpscr
   24318:	movwne	r2, #1
   2431c:	clz	r0, r0
   24320:	lsr	r0, r0, #5
   24324:	and	r0, r0, r2
   24328:	adds	r0, r0, r4
   2432c:	adc	r1, r5, #0
   24330:	bl	465b4 <__assert_fail@plt+0x33b38>
   24334:	vmov	d8, r0, r1
   24338:	movw	r1, #46148	; 0xb444
   2433c:	vdiv.f64	d16, d8, d9
   24340:	mov	r0, sl
   24344:	vmov	r2, r3, d16
   24348:	movt	r1, #4
   2434c:	bl	12938 <sprintf@plt>
   24350:	mov	r0, sl
   24354:	bl	12788 <strlen@plt>
   24358:	mov	r2, r0
   2435c:	mov	r5, #0
   24360:	b	24390 <__assert_fail@plt+0x11914>
   24364:	ldr	r8, [sp, #24]
   24368:	movw	r1, #46148	; 0xb444
   2436c:	vmov	r2, r3, d8
   24370:	mov	r0, sl
   24374:	movt	r1, #4
   24378:	bl	12938 <sprintf@plt>
   2437c:	mov	r0, sl
   24380:	bl	12788 <strlen@plt>
   24384:	mov	r2, r0
   24388:	mov	r5, #0
   2438c:	mvn	r6, #0
   24390:	sub	r4, r8, r2
   24394:	mov	r1, sl
   24398:	mov	r0, r4
   2439c:	bl	1244c <memmove@plt>
   243a0:	sub	r5, r8, r5
   243a4:	tst	r7, #4
   243a8:	bne	244d0 <__assert_fail@plt+0x11a54>
   243ac:	ldr	r3, [sp, #32]
   243b0:	ldr	r5, [fp, #16]
   243b4:	tst	r7, #128	; 0x80
   243b8:	beq	2470c <__assert_fail@plt+0x11c90>
   243bc:	cmn	r6, #1
   243c0:	bgt	246a4 <__assert_fail@plt+0x11c28>
   243c4:	subs	r0, r5, #2
   243c8:	mov	r6, #0
   243cc:	sbcs	r0, r9, #0
   243d0:	bcc	246a4 <__assert_fail@plt+0x11c28>
   243d4:	mov	r0, #0
   243d8:	mov	r1, #1
   243dc:	mov	r6, #0
   243e0:	cmp	r6, #7
   243e4:	beq	246a0 <__assert_fail@plt+0x11c24>
   243e8:	umull	r1, r2, r1, r3
   243ec:	add	r6, r6, #1
   243f0:	mla	r0, r0, r3, r2
   243f4:	subs	r2, r1, r5
   243f8:	sbcs	r2, r0, r9
   243fc:	bcc	243e0 <__assert_fail@plt+0x11964>
   24400:	b	246a4 <__assert_fail@plt+0x11c28>
   24404:	add	r0, r4, r5
   24408:	ldr	r5, [sp, #36]	; 0x24
   2440c:	cmp	r0, #1
   24410:	blt	24468 <__assert_fail@plt+0x119ec>
   24414:	adds	sl, sl, #1
   24418:	adc	r9, r9, #0
   2441c:	cmp	r6, #7
   24420:	bgt	24468 <__assert_fail@plt+0x119ec>
   24424:	cmp	r8, #0
   24428:	beq	24468 <__assert_fail@plt+0x119ec>
   2442c:	eor	r0, sl, r2
   24430:	orrs	r0, r0, r9
   24434:	ldreq	r0, [sp, #28]
   24438:	addeq	r6, r6, #1
   2443c:	moveq	r9, #0
   24440:	moveq	sl, #1
   24444:	tsteq	r0, #8
   24448:	bne	24468 <__assert_fail@plt+0x119ec>
   2444c:	ldr	r2, [sp, #8]
   24450:	mov	r0, #48	; 0x30
   24454:	ldr	r1, [sp, #4]
   24458:	strb	r0, [r5, #-1]!
   2445c:	sub	r5, r5, r2
   24460:	mov	r0, r5
   24464:	bl	124b8 <memcpy@plt>
   24468:	ldr	r8, [sp, #24]
   2446c:	b	24480 <__assert_fail@plt+0x11a04>
   24470:	andeq	r0, r0, r0
   24474:	mvnsmi	r0, #0
   24478:	ldr	r8, [sp, #24]
   2447c:	ldr	r5, [sp, #36]	; 0x24
   24480:	mov	r4, r5
   24484:	mov	r0, sl
   24488:	mov	r1, r9
   2448c:	mov	r2, #10
   24490:	mov	r3, #0
   24494:	bl	466fc <__assert_fail@plt+0x33c80>
   24498:	add	r2, r0, r0, lsl #2
   2449c:	sub	r2, sl, r2, lsl #1
   244a0:	orr	r2, r2, #48	; 0x30
   244a4:	strb	r2, [r4, #-1]!
   244a8:	rsbs	r2, sl, #9
   244ac:	mov	sl, r0
   244b0:	rscs	r2, r9, #0
   244b4:	mov	r9, r1
   244b8:	bcc	24484 <__assert_fail@plt+0x11a08>
   244bc:	ldr	r7, [sp, #28]
   244c0:	ldr	r9, [fp, #20]
   244c4:	ldr	sl, [sp, #20]
   244c8:	tst	r7, #4
   244cc:	beq	243ac <__assert_fail@plt+0x11930>
   244d0:	ldr	r0, [sp, #44]	; 0x2c
   244d4:	mov	r7, r5
   244d8:	str	r6, [sp, #8]
   244dc:	sub	r5, r5, r4
   244e0:	bl	12788 <strlen@plt>
   244e4:	add	r8, sp, #48	; 0x30
   244e8:	str	r0, [sp, #40]	; 0x28
   244ec:	mov	r1, r4
   244f0:	mov	r2, r5
   244f4:	mov	r0, r8
   244f8:	bl	124b8 <memcpy@plt>
   244fc:	ldr	r0, [sp, #12]
   24500:	ldrb	r6, [r0]
   24504:	cmp	r6, #255	; 0xff
   24508:	mov	r9, r6
   2450c:	moveq	r9, r5
   24510:	cmp	r6, #0
   24514:	mvneq	r9, #0
   24518:	cmp	r9, r5
   2451c:	movhi	r9, r5
   24520:	sub	r4, r7, r9
   24524:	sub	r7, r5, r9
   24528:	mov	r2, r9
   2452c:	add	r1, r8, r7
   24530:	mov	r0, r4
   24534:	bl	124b8 <memcpy@plt>
   24538:	cmp	r7, #0
   2453c:	beq	245c8 <__assert_fail@plt+0x11b4c>
   24540:	clz	r0, r6
   24544:	ldr	r8, [sp, #12]
   24548:	lsr	sl, r0, #5
   2454c:	ldr	r0, [sp, #40]	; 0x28
   24550:	rsb	r0, r0, #0
   24554:	str	r0, [sp, #36]	; 0x24
   24558:	ldr	r0, [sp, #36]	; 0x24
   2455c:	ldr	r1, [sp, #44]	; 0x2c
   24560:	ldr	r2, [sp, #40]	; 0x28
   24564:	add	r4, r4, r0
   24568:	mov	r0, r4
   2456c:	bl	124b8 <memcpy@plt>
   24570:	tst	sl, #1
   24574:	add	r0, sp, #48	; 0x30
   24578:	addeq	r8, r8, #1
   2457c:	ldrb	r6, [r8]
   24580:	cmp	r6, #255	; 0xff
   24584:	mov	r5, r6
   24588:	moveq	r5, r7
   2458c:	cmp	r6, #0
   24590:	moveq	r5, r9
   24594:	cmp	r7, r5
   24598:	movcc	r5, r7
   2459c:	sub	r7, r7, r5
   245a0:	sub	r4, r4, r5
   245a4:	mov	r2, r5
   245a8:	add	r1, r0, r7
   245ac:	mov	r0, r4
   245b0:	bl	124b8 <memcpy@plt>
   245b4:	clz	r0, r6
   245b8:	cmp	r7, #0
   245bc:	mov	r9, r5
   245c0:	lsr	sl, r0, #5
   245c4:	bne	24558 <__assert_fail@plt+0x11adc>
   245c8:	ldr	r8, [sp, #24]
   245cc:	ldr	sl, [sp, #20]
   245d0:	ldr	r7, [sp, #28]
   245d4:	ldr	r3, [sp, #32]
   245d8:	ldr	r9, [fp, #20]
   245dc:	ldr	r5, [fp, #16]
   245e0:	ldr	r6, [sp, #8]
   245e4:	tst	r7, #128	; 0x80
   245e8:	bne	243bc <__assert_fail@plt+0x11940>
   245ec:	b	2470c <__assert_fail@plt+0x11c90>
   245f0:	mov	r6, #0
   245f4:	mov	r0, r7
   245f8:	mov	r1, r9
   245fc:	mov	r3, #0
   24600:	bl	466fc <__assert_fail@plt+0x33c80>
   24604:	ldr	r2, [sp, #32]
   24608:	mov	sl, r0
   2460c:	mov	r9, r1
   24610:	mls	r0, r0, r2, r7
   24614:	add	r0, r0, r0, lsl #2
   24618:	add	r0, r4, r0, lsl #1
   2461c:	udiv	r4, r0, r2
   24620:	mls	r0, r4, r2, r0
   24624:	lsl	r0, r0, #1
   24628:	add	r0, r0, r5, lsr #1
   2462c:	cmp	r0, r2
   24630:	bcs	24648 <__assert_fail@plt+0x11bcc>
   24634:	add	r1, r0, r5
   24638:	cmn	r0, r5
   2463c:	movwne	r1, #1
   24640:	mov	r5, r1
   24644:	b	24658 <__assert_fail@plt+0x11bdc>
   24648:	add	r0, r0, r5
   2464c:	mov	r5, #2
   24650:	cmp	r2, r0
   24654:	movwcc	r5, #3
   24658:	add	r6, r6, #1
   2465c:	cmp	r6, #7
   24660:	bhi	24674 <__assert_fail@plt+0x11bf8>
   24664:	subs	r0, sl, r2
   24668:	mov	r7, sl
   2466c:	sbcs	r0, r9, #0
   24670:	bcs	245f4 <__assert_fail@plt+0x11b78>
   24674:	rsbs	r0, sl, #9
   24678:	rscs	r0, r9, #0
   2467c:	bcc	24728 <__assert_fail@plt+0x11cac>
   24680:	ldr	r0, [sp, #40]	; 0x28
   24684:	cmp	r0, #1
   24688:	bne	24730 <__assert_fail@plt+0x11cb4>
   2468c:	and	r0, r4, #1
   24690:	add	r0, r5, r0
   24694:	cmp	r0, #2
   24698:	bhi	24740 <__assert_fail@plt+0x11cc4>
   2469c:	b	24774 <__assert_fail@plt+0x11cf8>
   246a0:	mov	r6, #8
   246a4:	and	r0, r7, #256	; 0x100
   246a8:	tst	r7, #64	; 0x40
   246ac:	orrsne	r1, r6, r0
   246b0:	movne	r1, #32
   246b4:	addne	r8, sl, #648	; 0x288
   246b8:	strbne	r1, [sl, #647]	; 0x287
   246bc:	cmp	r6, #0
   246c0:	beq	246e8 <__assert_fail@plt+0x11c6c>
   246c4:	ldr	r1, [sp, #16]
   246c8:	cmp	r1, #0
   246cc:	moveq	r1, #107	; 0x6b
   246d0:	cmpeq	r6, #1
   246d4:	beq	246e4 <__assert_fail@plt+0x11c68>
   246d8:	movw	r1, #46208	; 0xb480
   246dc:	movt	r1, #4
   246e0:	ldrb	r1, [r1, r6]
   246e4:	strb	r1, [r8], #1
   246e8:	cmp	r0, #0
   246ec:	beq	2470c <__assert_fail@plt+0x11c90>
   246f0:	ldr	r0, [sp, #16]
   246f4:	cmp	r0, #0
   246f8:	cmpne	r6, #0
   246fc:	movne	r0, #105	; 0x69
   24700:	strbne	r0, [r8], #1
   24704:	mov	r0, #66	; 0x42
   24708:	strb	r0, [r8], #1
   2470c:	mov	r0, #0
   24710:	strb	r0, [r8]
   24714:	mov	r0, r4
   24718:	sub	sp, fp, #48	; 0x30
   2471c:	vpop	{d8-d9}
   24720:	add	sp, sp, #4
   24724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24728:	ldr	r0, [sp, #24]
   2472c:	b	240c0 <__assert_fail@plt+0x11644>
   24730:	cmp	r0, #0
   24734:	bne	24774 <__assert_fail@plt+0x11cf8>
   24738:	cmp	r5, #0
   2473c:	beq	24774 <__assert_fail@plt+0x11cf8>
   24740:	adds	r0, sl, #1
   24744:	add	r4, r4, #1
   24748:	mov	r5, #0
   2474c:	adc	r1, r9, #0
   24750:	cmp	r4, #10
   24754:	bne	24774 <__assert_fail@plt+0x11cf8>
   24758:	rsbs	r3, r0, #9
   2475c:	mov	r4, #0
   24760:	mov	sl, r0
   24764:	mov	r9, r1
   24768:	mov	r5, #0
   2476c:	rscs	r3, r1, #0
   24770:	bcc	247c4 <__assert_fail@plt+0x11d48>
   24774:	ldr	r0, [sp, #28]
   24778:	tst	r0, #8
   2477c:	beq	24794 <__assert_fail@plt+0x11d18>
   24780:	cmp	r4, #0
   24784:	bne	24794 <__assert_fail@plt+0x11d18>
   24788:	ldr	r0, [sp, #24]
   2478c:	str	r0, [sp, #36]	; 0x24
   24790:	b	247bc <__assert_fail@plt+0x11d40>
   24794:	ldr	r1, [sp, #20]
   24798:	ldr	r2, [sp, #8]
   2479c:	add	r0, r4, #48	; 0x30
   247a0:	strb	r0, [r1, #646]!	; 0x286
   247a4:	sub	r0, r1, r2
   247a8:	ldr	r1, [sp, #4]
   247ac:	str	r0, [sp, #36]	; 0x24
   247b0:	bl	124b8 <memcpy@plt>
   247b4:	ldr	r2, [sp, #32]
   247b8:	mov	r5, #0
   247bc:	mov	r4, #0
   247c0:	b	240c4 <__assert_fail@plt+0x11648>
   247c4:	ldr	r0, [sp, #24]
   247c8:	mov	r5, #0
   247cc:	mov	sl, #10
   247d0:	mov	r9, #0
   247d4:	b	240c0 <__assert_fail@plt+0x11644>
   247d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   247dc:	add	fp, sp, #24
   247e0:	sub	sp, sp, #8
   247e4:	mov	r4, r2
   247e8:	mov	r8, r1
   247ec:	cmp	r0, #0
   247f0:	bne	2481c <__assert_fail@plt+0x11da0>
   247f4:	movw	r0, #35274	; 0x89ca
   247f8:	movt	r0, #4
   247fc:	bl	126b0 <getenv@plt>
   24800:	cmp	r0, #0
   24804:	bne	2481c <__assert_fail@plt+0x11da0>
   24808:	movw	r0, #46160	; 0xb450
   2480c:	movt	r0, #4
   24810:	bl	126b0 <getenv@plt>
   24814:	cmp	r0, #0
   24818:	beq	24940 <__assert_fail@plt+0x11ec4>
   2481c:	mov	r6, r0
   24820:	movw	r7, #46232	; 0xb498
   24824:	movw	r1, #46220	; 0xb48c
   24828:	mov	r3, #4
   2482c:	ldrb	r5, [r6], #1
   24830:	movt	r7, #4
   24834:	movt	r1, #4
   24838:	mov	r2, r7
   2483c:	cmp	r5, #39	; 0x27
   24840:	movne	r6, r0
   24844:	mov	r0, r6
   24848:	bl	4558c <__assert_fail@plt+0x32b10>
   2484c:	sub	r1, r5, #39	; 0x27
   24850:	cmp	r0, #0
   24854:	clz	r1, r1
   24858:	lsr	r1, r1, #5
   2485c:	lsl	r5, r1, #2
   24860:	blt	24888 <__assert_fail@plt+0x11e0c>
   24864:	ldr	r0, [r7, r0, lsl #2]
   24868:	mov	r2, #1
   2486c:	mov	r1, #0
   24870:	str	r2, [r4]
   24874:	str	r1, [r4, #4]
   24878:	orr	r1, r0, r5
   2487c:	mov	r0, #0
   24880:	str	r1, [r8]
   24884:	b	248b8 <__assert_fail@plt+0x11e3c>
   24888:	movw	r0, #46170	; 0xb45a
   2488c:	add	r1, sp, #4
   24890:	mov	r2, #0
   24894:	mov	r3, r4
   24898:	mov	r7, #0
   2489c:	movt	r0, #4
   248a0:	str	r0, [sp]
   248a4:	mov	r0, r6
   248a8:	bl	2ea50 <__assert_fail@plt+0x1bfd4>
   248ac:	cmp	r0, #0
   248b0:	beq	248fc <__assert_fail@plt+0x11e80>
   248b4:	str	r7, [r8]
   248b8:	ldrd	r2, [r4]
   248bc:	orrs	r1, r2, r3
   248c0:	beq	248cc <__assert_fail@plt+0x11e50>
   248c4:	sub	sp, fp, #24
   248c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   248cc:	movw	r0, #35253	; 0x89b5
   248d0:	movt	r0, #4
   248d4:	bl	126b0 <getenv@plt>
   248d8:	cmp	r0, #0
   248dc:	mov	r2, #512	; 0x200
   248e0:	mov	r0, #4
   248e4:	mov	r1, #0
   248e8:	movweq	r2, #1024	; 0x400
   248ec:	str	r2, [r4]
   248f0:	str	r1, [r4, #4]
   248f4:	sub	sp, fp, #24
   248f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   248fc:	ldrb	r0, [r6]
   24900:	sub	r0, r0, #48	; 0x30
   24904:	uxtb	r0, r0
   24908:	cmp	r0, #10
   2490c:	bcc	24938 <__assert_fail@plt+0x11ebc>
   24910:	ldr	r0, [sp, #4]
   24914:	cmp	r0, r6
   24918:	beq	24968 <__assert_fail@plt+0x11eec>
   2491c:	ldrb	r2, [r6, #1]
   24920:	add	r1, r6, #1
   24924:	mov	r6, r1
   24928:	sub	r2, r2, #48	; 0x30
   2492c:	uxtb	r2, r2
   24930:	cmp	r2, #10
   24934:	bcs	24914 <__assert_fail@plt+0x11e98>
   24938:	mov	r1, r5
   2493c:	b	2487c <__assert_fail@plt+0x11e00>
   24940:	movw	r0, #35253	; 0x89b5
   24944:	movt	r0, #4
   24948:	bl	126b0 <getenv@plt>
   2494c:	mov	r2, #512	; 0x200
   24950:	cmp	r0, #0
   24954:	mov	r1, #0
   24958:	movweq	r2, #1024	; 0x400
   2495c:	str	r2, [r4]
   24960:	str	r1, [r4, #4]
   24964:	b	2487c <__assert_fail@plt+0x11e00>
   24968:	ldrb	r2, [r0, #-1]
   2496c:	orr	r1, r5, #384	; 0x180
   24970:	cmp	r2, #66	; 0x42
   24974:	mov	r2, r1
   24978:	orrne	r2, r5, #128	; 0x80
   2497c:	bne	24990 <__assert_fail@plt+0x11f14>
   24980:	ldrb	r0, [r0, #-2]
   24984:	cmp	r0, #105	; 0x69
   24988:	orreq	r1, r2, #32
   2498c:	b	2487c <__assert_fail@plt+0x11e00>
   24990:	orr	r1, r2, #32
   24994:	b	2487c <__assert_fail@plt+0x11e00>
   24998:	push	{r4, r5, r6, r7, fp, lr}
   2499c:	add	fp, sp, #16
   249a0:	movw	r7, #56564	; 0xdcf4
   249a4:	mov	r4, r0
   249a8:	movt	r7, #5
   249ac:	ldr	r5, [r7]
   249b0:	cmp	r5, #0
   249b4:	bne	249c8 <__assert_fail@plt+0x11f4c>
   249b8:	b	249d8 <__assert_fail@plt+0x11f5c>
   249bc:	ldr	r5, [r5, #4]
   249c0:	cmp	r5, #0
   249c4:	beq	249d8 <__assert_fail@plt+0x11f5c>
   249c8:	ldr	r0, [r5]
   249cc:	cmp	r0, r4
   249d0:	bne	249bc <__assert_fail@plt+0x11f40>
   249d4:	b	24a2c <__assert_fail@plt+0x11fb0>
   249d8:	mov	r0, r4
   249dc:	bl	123ec <getpwuid@plt>
   249e0:	cmp	r0, #0
   249e4:	beq	249f0 <__assert_fail@plt+0x11f74>
   249e8:	ldr	r6, [r0]
   249ec:	b	249f8 <__assert_fail@plt+0x11f7c>
   249f0:	movw	r6, #34847	; 0x881f
   249f4:	movt	r6, #4
   249f8:	mov	r0, r6
   249fc:	bl	12788 <strlen@plt>
   24a00:	add	r0, r0, #12
   24a04:	bic	r0, r0, #3
   24a08:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   24a0c:	mov	r5, r0
   24a10:	str	r4, [r0]
   24a14:	add	r0, r0, #8
   24a18:	mov	r1, r6
   24a1c:	bl	12638 <strcpy@plt>
   24a20:	ldr	r0, [r7]
   24a24:	str	r5, [r7]
   24a28:	str	r0, [r5, #4]
   24a2c:	ldrb	r0, [r5, #8]!
   24a30:	cmp	r0, #0
   24a34:	moveq	r5, r0
   24a38:	mov	r0, r5
   24a3c:	pop	{r4, r5, r6, r7, fp, pc}
   24a40:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   24a44:	add	fp, sp, #24
   24a48:	movw	r8, #56564	; 0xdcf4
   24a4c:	mov	r4, r0
   24a50:	movt	r8, #5
   24a54:	ldr	r5, [r8]
   24a58:	cmp	r5, #0
   24a5c:	beq	24a90 <__assert_fail@plt+0x12014>
   24a60:	ldrb	r6, [r4]
   24a64:	mov	r0, r5
   24a68:	ldrb	r1, [r0, #8]!
   24a6c:	cmp	r1, r6
   24a70:	bne	24a84 <__assert_fail@plt+0x12008>
   24a74:	mov	r1, r4
   24a78:	bl	123d4 <strcmp@plt>
   24a7c:	cmp	r0, #0
   24a80:	beq	24b34 <__assert_fail@plt+0x120b8>
   24a84:	ldr	r5, [r5, #4]
   24a88:	cmp	r5, #0
   24a8c:	bne	24a64 <__assert_fail@plt+0x11fe8>
   24a90:	movw	r7, #56568	; 0xdcf8
   24a94:	movt	r7, #5
   24a98:	ldr	r5, [r7]
   24a9c:	cmp	r5, #0
   24aa0:	beq	24ad4 <__assert_fail@plt+0x12058>
   24aa4:	ldrb	r6, [r4]
   24aa8:	mov	r0, r5
   24aac:	ldrb	r1, [r0, #8]!
   24ab0:	cmp	r1, r6
   24ab4:	bne	24ac8 <__assert_fail@plt+0x1204c>
   24ab8:	mov	r1, r4
   24abc:	bl	123d4 <strcmp@plt>
   24ac0:	cmp	r0, #0
   24ac4:	beq	24b30 <__assert_fail@plt+0x120b4>
   24ac8:	ldr	r5, [r5, #4]
   24acc:	cmp	r5, #0
   24ad0:	bne	24aa8 <__assert_fail@plt+0x1202c>
   24ad4:	mov	r0, r4
   24ad8:	bl	123b0 <getpwnam@plt>
   24adc:	mov	r6, r0
   24ae0:	mov	r0, r4
   24ae4:	bl	12788 <strlen@plt>
   24ae8:	add	r0, r0, #12
   24aec:	bic	r0, r0, #3
   24af0:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   24af4:	mov	r5, r0
   24af8:	add	r0, r0, #8
   24afc:	mov	r1, r4
   24b00:	bl	12638 <strcpy@plt>
   24b04:	cmp	r6, #0
   24b08:	beq	24b24 <__assert_fail@plt+0x120a8>
   24b0c:	ldr	r0, [r6, #8]
   24b10:	ldr	r1, [r8]
   24b14:	stm	r5, {r0, r1}
   24b18:	mov	r0, r5
   24b1c:	str	r5, [r8]
   24b20:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24b24:	ldr	r0, [r7]
   24b28:	str	r5, [r7]
   24b2c:	str	r0, [r5, #4]
   24b30:	mov	r5, #0
   24b34:	mov	r0, r5
   24b38:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24b3c:	push	{r4, r5, r6, r7, fp, lr}
   24b40:	add	fp, sp, #16
   24b44:	movw	r7, #56572	; 0xdcfc
   24b48:	mov	r4, r0
   24b4c:	movt	r7, #5
   24b50:	ldr	r5, [r7]
   24b54:	cmp	r5, #0
   24b58:	bne	24b6c <__assert_fail@plt+0x120f0>
   24b5c:	b	24b7c <__assert_fail@plt+0x12100>
   24b60:	ldr	r5, [r5, #4]
   24b64:	cmp	r5, #0
   24b68:	beq	24b7c <__assert_fail@plt+0x12100>
   24b6c:	ldr	r0, [r5]
   24b70:	cmp	r0, r4
   24b74:	bne	24b60 <__assert_fail@plt+0x120e4>
   24b78:	b	24bd0 <__assert_fail@plt+0x12154>
   24b7c:	mov	r0, r4
   24b80:	bl	12a58 <getgrgid@plt>
   24b84:	cmp	r0, #0
   24b88:	beq	24b94 <__assert_fail@plt+0x12118>
   24b8c:	ldr	r6, [r0]
   24b90:	b	24b9c <__assert_fail@plt+0x12120>
   24b94:	movw	r6, #34847	; 0x881f
   24b98:	movt	r6, #4
   24b9c:	mov	r0, r6
   24ba0:	bl	12788 <strlen@plt>
   24ba4:	add	r0, r0, #12
   24ba8:	bic	r0, r0, #3
   24bac:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   24bb0:	mov	r5, r0
   24bb4:	str	r4, [r0]
   24bb8:	add	r0, r0, #8
   24bbc:	mov	r1, r6
   24bc0:	bl	12638 <strcpy@plt>
   24bc4:	ldr	r0, [r7]
   24bc8:	str	r5, [r7]
   24bcc:	str	r0, [r5, #4]
   24bd0:	ldrb	r0, [r5, #8]!
   24bd4:	cmp	r0, #0
   24bd8:	moveq	r5, r0
   24bdc:	mov	r0, r5
   24be0:	pop	{r4, r5, r6, r7, fp, pc}
   24be4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   24be8:	add	fp, sp, #24
   24bec:	movw	r8, #56572	; 0xdcfc
   24bf0:	mov	r4, r0
   24bf4:	movt	r8, #5
   24bf8:	ldr	r5, [r8]
   24bfc:	cmp	r5, #0
   24c00:	beq	24c34 <__assert_fail@plt+0x121b8>
   24c04:	ldrb	r6, [r4]
   24c08:	mov	r0, r5
   24c0c:	ldrb	r1, [r0, #8]!
   24c10:	cmp	r1, r6
   24c14:	bne	24c28 <__assert_fail@plt+0x121ac>
   24c18:	mov	r1, r4
   24c1c:	bl	123d4 <strcmp@plt>
   24c20:	cmp	r0, #0
   24c24:	beq	24cd8 <__assert_fail@plt+0x1225c>
   24c28:	ldr	r5, [r5, #4]
   24c2c:	cmp	r5, #0
   24c30:	bne	24c08 <__assert_fail@plt+0x1218c>
   24c34:	movw	r7, #56576	; 0xdd00
   24c38:	movt	r7, #5
   24c3c:	ldr	r5, [r7]
   24c40:	cmp	r5, #0
   24c44:	beq	24c78 <__assert_fail@plt+0x121fc>
   24c48:	ldrb	r6, [r4]
   24c4c:	mov	r0, r5
   24c50:	ldrb	r1, [r0, #8]!
   24c54:	cmp	r1, r6
   24c58:	bne	24c6c <__assert_fail@plt+0x121f0>
   24c5c:	mov	r1, r4
   24c60:	bl	123d4 <strcmp@plt>
   24c64:	cmp	r0, #0
   24c68:	beq	24cd4 <__assert_fail@plt+0x12258>
   24c6c:	ldr	r5, [r5, #4]
   24c70:	cmp	r5, #0
   24c74:	bne	24c4c <__assert_fail@plt+0x121d0>
   24c78:	mov	r0, r4
   24c7c:	bl	12a64 <getgrnam@plt>
   24c80:	mov	r6, r0
   24c84:	mov	r0, r4
   24c88:	bl	12788 <strlen@plt>
   24c8c:	add	r0, r0, #12
   24c90:	bic	r0, r0, #3
   24c94:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   24c98:	mov	r5, r0
   24c9c:	add	r0, r0, #8
   24ca0:	mov	r1, r4
   24ca4:	bl	12638 <strcpy@plt>
   24ca8:	cmp	r6, #0
   24cac:	beq	24cc8 <__assert_fail@plt+0x1224c>
   24cb0:	ldr	r0, [r6, #8]
   24cb4:	ldr	r1, [r8]
   24cb8:	stm	r5, {r0, r1}
   24cbc:	mov	r0, r5
   24cc0:	str	r5, [r8]
   24cc4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24cc8:	ldr	r0, [r7]
   24ccc:	str	r5, [r7]
   24cd0:	str	r0, [r5, #4]
   24cd4:	mov	r5, #0
   24cd8:	mov	r0, r5
   24cdc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24ce0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24ce4:	add	fp, sp, #28
   24ce8:	sub	sp, sp, #308	; 0x134
   24cec:	mov	r5, r1
   24cf0:	mov	r6, r0
   24cf4:	bl	12620 <__ctype_get_mb_cur_max@plt>
   24cf8:	cmp	r0, #2
   24cfc:	bcc	250a4 <__assert_fail@plt+0x12628>
   24d00:	mov	r4, #0
   24d04:	sub	r0, fp, #88	; 0x58
   24d08:	str	r4, [fp, #-80]	; 0xffffffb0
   24d0c:	str	r4, [fp, #-84]	; 0xffffffac
   24d10:	strb	r4, [fp, #-88]	; 0xffffffa8
   24d14:	str	r5, [fp, #-72]	; 0xffffffb8
   24d18:	strb	r4, [fp, #-76]	; 0xffffffb4
   24d1c:	bl	25b14 <__assert_fail@plt+0x13098>
   24d20:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   24d24:	cmp	r0, #0
   24d28:	beq	24d38 <__assert_fail@plt+0x122bc>
   24d2c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   24d30:	cmp	r0, #0
   24d34:	beq	251c4 <__assert_fail@plt+0x12748>
   24d38:	add	r0, sp, #136	; 0x88
   24d3c:	str	r4, [fp, #-136]	; 0xffffff78
   24d40:	str	r4, [fp, #-140]	; 0xffffff74
   24d44:	strb	r4, [fp, #-144]	; 0xffffff70
   24d48:	str	r5, [fp, #-128]	; 0xffffff80
   24d4c:	str	r4, [sp, #144]	; 0x90
   24d50:	str	r4, [sp, #140]	; 0x8c
   24d54:	str	r6, [sp, #152]	; 0x98
   24d58:	strb	r4, [sp, #136]	; 0x88
   24d5c:	str	r5, [sp, #16]
   24d60:	strb	r4, [fp, #-132]	; 0xffffff7c
   24d64:	strb	r4, [sp, #148]	; 0x94
   24d68:	bl	25b14 <__assert_fail@plt+0x13098>
   24d6c:	ldrb	r0, [sp, #160]	; 0xa0
   24d70:	cmp	r0, #0
   24d74:	beq	24d84 <__assert_fail@plt+0x12308>
   24d78:	ldr	r0, [sp, #164]	; 0xa4
   24d7c:	cmp	r0, #0
   24d80:	beq	251d0 <__assert_fail@plt+0x12754>
   24d84:	add	r0, sp, #24
   24d88:	mov	r8, #1
   24d8c:	mov	sl, #0
   24d90:	sub	r5, fp, #144	; 0x90
   24d94:	mov	r1, #0
   24d98:	mov	r7, #0
   24d9c:	mov	r9, #0
   24da0:	add	r0, r0, #4
   24da4:	str	r0, [sp, #12]
   24da8:	add	r0, sp, #136	; 0x88
   24dac:	add	r0, r0, #16
   24db0:	str	r0, [sp, #8]
   24db4:	add	r0, r9, r9, lsl #2
   24db8:	mov	r4, r7
   24dbc:	cmp	r7, r0
   24dc0:	bcc	24e68 <__assert_fail@plt+0x123ec>
   24dc4:	tst	r8, #1
   24dc8:	beq	24e68 <__assert_fail@plt+0x123ec>
   24dcc:	cmp	r9, #10
   24dd0:	bcc	24e68 <__assert_fail@plt+0x123ec>
   24dd4:	subs	r0, r4, r1
   24dd8:	beq	24e1c <__assert_fail@plt+0x123a0>
   24ddc:	sub	r7, r1, r4
   24de0:	mov	r0, r5
   24de4:	bl	25b14 <__assert_fail@plt+0x13098>
   24de8:	ldrb	r0, [fp, #-120]	; 0xffffff88
   24dec:	cmp	r0, #0
   24df0:	beq	24e00 <__assert_fail@plt+0x12384>
   24df4:	ldr	r0, [fp, #-116]	; 0xffffff8c
   24df8:	cmp	r0, #0
   24dfc:	beq	24e1c <__assert_fail@plt+0x123a0>
   24e00:	strb	sl, [fp, #-132]	; 0xffffff7c
   24e04:	adds	r7, r7, #1
   24e08:	ldr	r0, [fp, #-128]	; 0xffffff80
   24e0c:	ldr	r1, [fp, #-124]	; 0xffffff84
   24e10:	add	r0, r0, r1
   24e14:	str	r0, [fp, #-128]	; 0xffffff80
   24e18:	bne	24de0 <__assert_fail@plt+0x12364>
   24e1c:	mov	r0, r5
   24e20:	bl	25b14 <__assert_fail@plt+0x13098>
   24e24:	ldrb	r0, [fp, #-120]	; 0xffffff88
   24e28:	cmp	r0, #0
   24e2c:	beq	24e64 <__assert_fail@plt+0x123e8>
   24e30:	ldr	r0, [fp, #-116]	; 0xffffff8c
   24e34:	mov	r1, r4
   24e38:	cmp	r0, #0
   24e3c:	bne	24e68 <__assert_fail@plt+0x123ec>
   24e40:	ldr	r1, [sp, #16]
   24e44:	mov	r0, r6
   24e48:	add	r2, sp, #80	; 0x50
   24e4c:	bl	251f8 <__assert_fail@plt+0x1277c>
   24e50:	mov	r8, #0
   24e54:	cmp	r0, #0
   24e58:	mov	r1, r4
   24e5c:	beq	24e68 <__assert_fail@plt+0x123ec>
   24e60:	b	251ec <__assert_fail@plt+0x12770>
   24e64:	mov	r1, r4
   24e68:	ldrb	r0, [sp, #160]	; 0xa0
   24e6c:	add	r7, r4, #1
   24e70:	str	r1, [sp, #20]
   24e74:	cmp	r0, #0
   24e78:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   24e7c:	cmpne	r0, #0
   24e80:	bne	24eac <__assert_fail@plt+0x12430>
   24e84:	ldr	r2, [sp, #156]	; 0x9c
   24e88:	ldr	r0, [fp, #-68]	; 0xffffffbc
   24e8c:	cmp	r2, r0
   24e90:	bne	25060 <__assert_fail@plt+0x125e4>
   24e94:	ldr	r1, [fp, #-72]	; 0xffffffb8
   24e98:	ldr	r0, [sp, #152]	; 0x98
   24e9c:	bl	12518 <memcmp@plt>
   24ea0:	cmp	r0, #0
   24ea4:	bne	25060 <__assert_fail@plt+0x125e4>
   24ea8:	b	24ebc <__assert_fail@plt+0x12440>
   24eac:	ldr	r0, [fp, #-60]	; 0xffffffc4
   24eb0:	ldr	r1, [sp, #164]	; 0xa4
   24eb4:	cmp	r1, r0
   24eb8:	bne	25060 <__assert_fail@plt+0x125e4>
   24ebc:	add	r2, sp, #136	; 0x88
   24ec0:	mov	r1, #48	; 0x30
   24ec4:	add	r3, sp, #80	; 0x50
   24ec8:	str	r9, [sp]
   24ecc:	str	r8, [sp, #4]
   24ed0:	mov	r0, r2
   24ed4:	add	r2, r2, #32
   24ed8:	vld1.64	{d16-d17}, [r0], r1
   24edc:	ldr	r1, [sp, #8]
   24ee0:	vld1.64	{d20-d21}, [r2]
   24ee4:	vld1.64	{d18-d19}, [r1]
   24ee8:	add	r1, r3, #16
   24eec:	vldr	d22, [r0]
   24ef0:	add	r0, r3, #32
   24ef4:	vst1.64	{d20-d21}, [r0]
   24ef8:	mov	r0, r3
   24efc:	vst1.64	{d18-d19}, [r1]
   24f00:	mov	r1, #12
   24f04:	vst1.64	{d16-d17}, [r0], r1
   24f08:	strb	sl, [r0]
   24f0c:	ldr	r0, [sp, #16]
   24f10:	vstr	d22, [sp, #128]	; 0x80
   24f14:	ldr	r1, [sp, #100]	; 0x64
   24f18:	str	r0, [sp, #40]	; 0x28
   24f1c:	ldr	r0, [sp, #96]	; 0x60
   24f20:	strb	sl, [sp, #24]
   24f24:	add	r0, r0, r1
   24f28:	str	r0, [sp, #96]	; 0x60
   24f2c:	ldr	r0, [sp, #12]
   24f30:	str	sl, [r0]
   24f34:	str	sl, [r0, #4]
   24f38:	add	r0, sp, #24
   24f3c:	strb	sl, [sp, #36]	; 0x24
   24f40:	bl	25b14 <__assert_fail@plt+0x13098>
   24f44:	ldrb	r0, [sp, #48]	; 0x30
   24f48:	cmp	r0, #0
   24f4c:	beq	24f5c <__assert_fail@plt+0x124e0>
   24f50:	ldr	r0, [sp, #52]	; 0x34
   24f54:	cmp	r0, #0
   24f58:	beq	251f4 <__assert_fail@plt+0x12778>
   24f5c:	strb	sl, [sp, #36]	; 0x24
   24f60:	ldr	r0, [sp, #40]	; 0x28
   24f64:	ldr	r1, [sp, #44]	; 0x2c
   24f68:	add	r0, r0, r1
   24f6c:	str	r0, [sp, #40]	; 0x28
   24f70:	add	r0, sp, #24
   24f74:	bl	25b14 <__assert_fail@plt+0x13098>
   24f78:	ldrb	r0, [sp, #48]	; 0x30
   24f7c:	cmp	r0, #0
   24f80:	beq	24f90 <__assert_fail@plt+0x12514>
   24f84:	ldr	r0, [sp, #52]	; 0x34
   24f88:	cmp	r0, #0
   24f8c:	beq	251dc <__assert_fail@plt+0x12760>
   24f90:	add	r7, r4, #2
   24f94:	add	r0, sp, #80	; 0x50
   24f98:	bl	25b14 <__assert_fail@plt+0x13098>
   24f9c:	ldr	r0, [sp, #108]	; 0x6c
   24fa0:	ldrb	r1, [sp, #104]	; 0x68
   24fa4:	cmp	r0, #0
   24fa8:	bne	24fb4 <__assert_fail@plt+0x12538>
   24fac:	cmp	r1, #0
   24fb0:	bne	251cc <__assert_fail@plt+0x12750>
   24fb4:	cmp	r1, #0
   24fb8:	ldrbne	r1, [sp, #48]	; 0x30
   24fbc:	cmpne	r1, #0
   24fc0:	bne	24ffc <__assert_fail@plt+0x12580>
   24fc4:	ldr	r4, [sp, #100]	; 0x64
   24fc8:	ldr	r0, [sp, #44]	; 0x2c
   24fcc:	cmp	r4, r0
   24fd0:	bne	25058 <__assert_fail@plt+0x125dc>
   24fd4:	ldr	r8, [sp, #40]	; 0x28
   24fd8:	ldr	r9, [sp, #96]	; 0x60
   24fdc:	mov	r2, r4
   24fe0:	mov	r0, r9
   24fe4:	mov	r1, r8
   24fe8:	bl	12518 <memcmp@plt>
   24fec:	cmp	r0, #0
   24ff0:	mov	r0, r4
   24ff4:	beq	25018 <__assert_fail@plt+0x1259c>
   24ff8:	b	25058 <__assert_fail@plt+0x125dc>
   24ffc:	ldr	r1, [sp, #52]	; 0x34
   25000:	cmp	r0, r1
   25004:	bne	25058 <__assert_fail@plt+0x125dc>
   25008:	ldr	r8, [sp, #40]	; 0x28
   2500c:	ldr	r4, [sp, #44]	; 0x2c
   25010:	ldr	r9, [sp, #96]	; 0x60
   25014:	ldr	r0, [sp, #100]	; 0x64
   25018:	add	r0, r9, r0
   2501c:	strb	sl, [sp, #92]	; 0x5c
   25020:	strb	sl, [sp, #36]	; 0x24
   25024:	str	r0, [sp, #96]	; 0x60
   25028:	add	r0, r8, r4
   2502c:	str	r0, [sp, #40]	; 0x28
   25030:	add	r0, sp, #24
   25034:	bl	25b14 <__assert_fail@plt+0x13098>
   25038:	ldrb	r0, [sp, #48]	; 0x30
   2503c:	add	r7, r7, #1
   25040:	cmp	r0, #0
   25044:	beq	24f94 <__assert_fail@plt+0x12518>
   25048:	ldr	r0, [sp, #52]	; 0x34
   2504c:	cmp	r0, #0
   25050:	bne	24f94 <__assert_fail@plt+0x12518>
   25054:	b	251dc <__assert_fail@plt+0x12760>
   25058:	ldr	r8, [sp, #4]
   2505c:	ldr	r9, [sp]
   25060:	mov	r4, #0
   25064:	add	r9, r9, #1
   25068:	strb	r4, [sp, #148]	; 0x94
   2506c:	ldr	r0, [sp, #152]	; 0x98
   25070:	ldr	r1, [sp, #156]	; 0x9c
   25074:	add	r0, r0, r1
   25078:	str	r0, [sp, #152]	; 0x98
   2507c:	add	r0, sp, #136	; 0x88
   25080:	bl	25b14 <__assert_fail@plt+0x13098>
   25084:	ldrb	r0, [sp, #160]	; 0xa0
   25088:	ldr	r1, [sp, #20]
   2508c:	cmp	r0, #0
   25090:	beq	24db4 <__assert_fail@plt+0x12338>
   25094:	ldr	r0, [sp, #164]	; 0xa4
   25098:	cmp	r0, #0
   2509c:	bne	24db4 <__assert_fail@plt+0x12338>
   250a0:	b	251d0 <__assert_fail@plt+0x12754>
   250a4:	ldrb	r7, [r5]
   250a8:	cmp	r7, #0
   250ac:	beq	251c4 <__assert_fail@plt+0x12748>
   250b0:	ldrb	r9, [r6]
   250b4:	cmp	r9, #0
   250b8:	beq	251cc <__assert_fail@plt+0x12750>
   250bc:	mov	r3, #1
   250c0:	mov	ip, #0
   250c4:	mov	lr, r5
   250c8:	mov	r8, #0
   250cc:	mov	sl, #0
   250d0:	str	r7, [sp, #16]
   250d4:	add	r0, sl, sl, lsl #2
   250d8:	cmp	r8, r0
   250dc:	bcc	2516c <__assert_fail@plt+0x126f0>
   250e0:	tst	r3, #1
   250e4:	beq	2516c <__assert_fail@plt+0x126f0>
   250e8:	cmp	sl, #10
   250ec:	bcc	2516c <__assert_fail@plt+0x126f0>
   250f0:	cmp	lr, #0
   250f4:	str	r3, [sp, #20]
   250f8:	beq	2512c <__assert_fail@plt+0x126b0>
   250fc:	sub	r1, r8, ip
   25100:	mov	r0, lr
   25104:	mov	r7, lr
   25108:	bl	12890 <strnlen@plt>
   2510c:	mov	lr, r7
   25110:	mov	ip, r8
   25114:	ldrb	r0, [lr, r0]!
   25118:	cmp	r0, #0
   2511c:	beq	2512c <__assert_fail@plt+0x126b0>
   25120:	ldr	r3, [sp, #20]
   25124:	mov	ip, r8
   25128:	b	25168 <__assert_fail@plt+0x126ec>
   2512c:	mov	r0, r5
   25130:	mov	r4, ip
   25134:	bl	12788 <strlen@plt>
   25138:	mov	r2, r0
   2513c:	mov	r0, r6
   25140:	mov	r1, r5
   25144:	sub	r3, fp, #88	; 0x58
   25148:	bl	25600 <__assert_fail@plt+0x12b84>
   2514c:	cmp	r0, #0
   25150:	bne	251e4 <__assert_fail@plt+0x12768>
   25154:	ldr	r3, [sp, #20]
   25158:	ldrb	r9, [r6]
   2515c:	mov	lr, #0
   25160:	mov	ip, r4
   25164:	and	r3, r3, r0
   25168:	ldr	r7, [sp, #16]
   2516c:	uxtb	r0, r9
   25170:	cmp	r0, r7
   25174:	bne	251a8 <__assert_fail@plt+0x1272c>
   25178:	mov	r0, #1
   2517c:	ldrb	r1, [r5, r0]
   25180:	cmp	r1, #0
   25184:	beq	251c4 <__assert_fail@plt+0x12748>
   25188:	ldrb	r2, [r6, r0]
   2518c:	cmp	r2, #0
   25190:	beq	251cc <__assert_fail@plt+0x12750>
   25194:	add	r0, r0, #1
   25198:	cmp	r2, r1
   2519c:	beq	2517c <__assert_fail@plt+0x12700>
   251a0:	add	r8, r8, r0
   251a4:	b	251ac <__assert_fail@plt+0x12730>
   251a8:	add	r8, r8, #1
   251ac:	ldrb	r9, [r6, #1]!
   251b0:	add	sl, sl, #1
   251b4:	mov	r4, #0
   251b8:	cmp	r9, #0
   251bc:	bne	250d4 <__assert_fail@plt+0x12658>
   251c0:	b	251d0 <__assert_fail@plt+0x12754>
   251c4:	mov	r4, r6
   251c8:	b	251d0 <__assert_fail@plt+0x12754>
   251cc:	mov	r4, #0
   251d0:	mov	r0, r4
   251d4:	sub	sp, fp, #28
   251d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   251dc:	ldr	r4, [sp, #152]	; 0x98
   251e0:	b	251d0 <__assert_fail@plt+0x12754>
   251e4:	ldr	r4, [fp, #-88]	; 0xffffffa8
   251e8:	b	251d0 <__assert_fail@plt+0x12754>
   251ec:	ldr	r4, [sp, #80]	; 0x50
   251f0:	b	251d0 <__assert_fail@plt+0x12754>
   251f4:	bl	12a28 <abort@plt>
   251f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   251fc:	add	fp, sp, #28
   25200:	sub	sp, sp, #132	; 0x84
   25204:	mov	r4, r0
   25208:	mov	r0, r1
   2520c:	mov	r8, r2
   25210:	mov	r7, r1
   25214:	bl	460b4 <__assert_fail@plt+0x33638>
   25218:	mov	sl, r0
   2521c:	movw	r0, #47662	; 0xba2e
   25220:	mov	r5, #0
   25224:	movt	r0, #744	; 0x2e8
   25228:	cmp	sl, r0
   2522c:	bhi	255f0 <__assert_fail@plt+0x12b74>
   25230:	mov	r0, #44	; 0x2c
   25234:	mul	r0, sl, r0
   25238:	cmp	r0, #4016	; 0xfb0
   2523c:	bhi	25264 <__assert_fail@plt+0x127e8>
   25240:	add	r0, r0, #22
   25244:	bic	r0, r0, #7
   25248:	sub	r0, sp, r0
   2524c:	add	r1, r0, #15
   25250:	bic	r9, r1, #15
   25254:	mov	sp, r0
   25258:	cmp	r9, #0
   2525c:	bne	25274 <__assert_fail@plt+0x127f8>
   25260:	b	255f0 <__assert_fail@plt+0x12b74>
   25264:	bl	45f6c <__assert_fail@plt+0x334f0>
   25268:	mov	r9, r0
   2526c:	cmp	r9, #0
   25270:	beq	255f0 <__assert_fail@plt+0x12b74>
   25274:	sub	r6, fp, #88	; 0x58
   25278:	str	r4, [fp, #-160]	; 0xffffff60
   2527c:	mov	r4, #0
   25280:	mov	r0, r6
   25284:	str	r4, [fp, #-80]	; 0xffffffb0
   25288:	str	r4, [fp, #-84]	; 0xffffffac
   2528c:	strb	r4, [fp, #-88]	; 0xffffffa8
   25290:	str	r7, [fp, #-72]	; 0xffffffb8
   25294:	strb	r4, [fp, #-76]	; 0xffffffb4
   25298:	bl	25b14 <__assert_fail@plt+0x13098>
   2529c:	add	r0, sl, sl, lsl #2
   252a0:	add	r3, r9, r0, lsl #3
   252a4:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   252a8:	str	r3, [fp, #-148]	; 0xffffff6c
   252ac:	cmp	r0, #0
   252b0:	beq	252c0 <__assert_fail@plt+0x12844>
   252b4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   252b8:	cmp	r0, #0
   252bc:	beq	25344 <__assert_fail@plt+0x128c8>
   252c0:	add	r7, r9, #16
   252c4:	add	r5, r6, #32
   252c8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   252cc:	cmp	r0, r5
   252d0:	bne	252e8 <__assert_fail@plt+0x1286c>
   252d4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   252d8:	mov	r0, r7
   252dc:	mov	r1, r5
   252e0:	bl	124b8 <memcpy@plt>
   252e4:	mov	r0, r7
   252e8:	str	r0, [r7, #-16]
   252ec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   252f0:	str	r0, [r7, #-12]
   252f4:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   252f8:	strb	r0, [r7, #-8]
   252fc:	cmp	r0, #0
   25300:	ldrne	r0, [fp, #-60]	; 0xffffffc4
   25304:	strne	r0, [r7, #-4]
   25308:	strb	r4, [fp, #-76]	; 0xffffffb4
   2530c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   25310:	ldr	r1, [fp, #-68]	; 0xffffffbc
   25314:	add	r0, r0, r1
   25318:	str	r0, [fp, #-72]	; 0xffffffb8
   2531c:	mov	r0, r6
   25320:	bl	25b14 <__assert_fail@plt+0x13098>
   25324:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   25328:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2532c:	ldr	r3, [fp, #-148]	; 0xffffff6c
   25330:	add	r7, r7, #40	; 0x28
   25334:	cmp	r1, #0
   25338:	beq	252c8 <__assert_fail@plt+0x1284c>
   2533c:	cmp	r0, #0
   25340:	bne	252c8 <__assert_fail@plt+0x1284c>
   25344:	mov	r0, #1
   25348:	cmp	sl, #3
   2534c:	str	r8, [fp, #-156]	; 0xffffff64
   25350:	str	sl, [fp, #-152]	; 0xffffff68
   25354:	str	r0, [r3, #4]
   25358:	bcc	25420 <__assert_fail@plt+0x129a4>
   2535c:	mov	r4, #2
   25360:	mov	r5, #0
   25364:	add	r0, r4, r4, lsl #2
   25368:	add	r0, r9, r0, lsl #3
   2536c:	ldrb	r8, [r0, #-32]	; 0xffffffe0
   25370:	sub	r7, r0, #28
   25374:	sub	sl, r0, #40	; 0x28
   25378:	sub	r6, r0, #36	; 0x24
   2537c:	cmp	r8, #0
   25380:	bne	25398 <__assert_fail@plt+0x1291c>
   25384:	b	253c0 <__assert_fail@plt+0x12944>
   25388:	ldr	r0, [r3, r5, lsl #2]
   2538c:	sub	r5, r5, r0
   25390:	cmp	r8, #0
   25394:	beq	253c0 <__assert_fail@plt+0x12944>
   25398:	add	r0, r5, r5, lsl #2
   2539c:	add	r0, r9, r0, lsl #3
   253a0:	ldrb	r1, [r0, #8]
   253a4:	cmp	r1, #0
   253a8:	beq	253c0 <__assert_fail@plt+0x12944>
   253ac:	ldr	r0, [r0, #12]
   253b0:	ldr	r1, [r7]
   253b4:	cmp	r1, r0
   253b8:	bne	253f0 <__assert_fail@plt+0x12974>
   253bc:	b	25404 <__assert_fail@plt+0x12988>
   253c0:	add	r0, r5, r5, lsl #2
   253c4:	ldr	r2, [r6]
   253c8:	add	r1, r9, r0, lsl #3
   253cc:	ldr	r1, [r1, #4]
   253d0:	cmp	r2, r1
   253d4:	bne	253f0 <__assert_fail@plt+0x12974>
   253d8:	ldr	r1, [r9, r0, lsl #3]
   253dc:	ldr	r0, [sl]
   253e0:	bl	12518 <memcmp@plt>
   253e4:	ldr	r3, [fp, #-148]	; 0xffffff6c
   253e8:	cmp	r0, #0
   253ec:	beq	25404 <__assert_fail@plt+0x12988>
   253f0:	cmp	r5, #0
   253f4:	bne	25388 <__assert_fail@plt+0x1290c>
   253f8:	mov	r5, #0
   253fc:	mov	r0, r4
   25400:	b	2540c <__assert_fail@plt+0x12990>
   25404:	add	r5, r5, #1
   25408:	sub	r0, r4, r5
   2540c:	str	r0, [r3, r4, lsl #2]
   25410:	ldr	r0, [fp, #-152]	; 0xffffff68
   25414:	add	r4, r4, #1
   25418:	cmp	r4, r0
   2541c:	bne	25364 <__assert_fail@plt+0x128e8>
   25420:	ldr	r8, [fp, #-156]	; 0xffffff64
   25424:	ldr	r0, [fp, #-160]	; 0xffffff60
   25428:	mov	r6, #0
   2542c:	str	r6, [r8]
   25430:	str	r6, [fp, #-80]	; 0xffffffb0
   25434:	str	r6, [fp, #-84]	; 0xffffffac
   25438:	strb	r6, [fp, #-88]	; 0xffffffa8
   2543c:	str	r0, [fp, #-72]	; 0xffffffb8
   25440:	str	r6, [fp, #-136]	; 0xffffff78
   25444:	str	r6, [fp, #-140]	; 0xffffff74
   25448:	str	r0, [fp, #-128]	; 0xffffff80
   2544c:	sub	r0, fp, #144	; 0x90
   25450:	strb	r6, [fp, #-144]	; 0xffffff70
   25454:	strb	r6, [fp, #-76]	; 0xffffffb4
   25458:	strb	r6, [fp, #-132]	; 0xffffff7c
   2545c:	bl	25b14 <__assert_fail@plt+0x13098>
   25460:	ldr	r0, [fp, #-116]	; 0xffffff8c
   25464:	ldrb	r1, [fp, #-120]	; 0xffffff88
   25468:	cmp	r0, #0
   2546c:	bne	25478 <__assert_fail@plt+0x129fc>
   25470:	cmp	r1, #0
   25474:	bne	255e4 <__assert_fail@plt+0x12b68>
   25478:	clz	r1, r1
   2547c:	sub	r4, fp, #88	; 0x58
   25480:	mov	sl, #0
   25484:	lsr	r1, r1, #5
   25488:	add	r2, sl, sl, lsl #2
   2548c:	tst	r1, #1
   25490:	add	r3, r9, r2, lsl #3
   25494:	bne	254bc <__assert_fail@plt+0x12a40>
   25498:	ldrb	r1, [r3, #8]
   2549c:	cmp	r1, #0
   254a0:	beq	254bc <__assert_fail@plt+0x12a40>
   254a4:	ldr	r1, [r3, #12]
   254a8:	cmp	r1, r0
   254ac:	bne	254e8 <__assert_fail@plt+0x12a6c>
   254b0:	ldr	r7, [fp, #-128]	; 0xffffff80
   254b4:	ldr	r5, [fp, #-124]	; 0xffffff84
   254b8:	b	25544 <__assert_fail@plt+0x12ac8>
   254bc:	ldr	r5, [r3, #4]
   254c0:	ldr	r0, [fp, #-124]	; 0xffffff84
   254c4:	cmp	r5, r0
   254c8:	bne	254e8 <__assert_fail@plt+0x12a6c>
   254cc:	ldr	r7, [fp, #-128]	; 0xffffff80
   254d0:	ldr	r0, [r9, r2, lsl #3]
   254d4:	mov	r2, r5
   254d8:	mov	r1, r7
   254dc:	bl	12518 <memcmp@plt>
   254e0:	cmp	r0, #0
   254e4:	beq	25544 <__assert_fail@plt+0x12ac8>
   254e8:	cmp	sl, #0
   254ec:	beq	25564 <__assert_fail@plt+0x12ae8>
   254f0:	ldr	r0, [fp, #-148]	; 0xffffff6c
   254f4:	ldr	r5, [r0, sl, lsl #2]
   254f8:	sub	sl, sl, r5
   254fc:	cmp	r5, #0
   25500:	beq	255b0 <__assert_fail@plt+0x12b34>
   25504:	mov	r0, r4
   25508:	bl	25b14 <__assert_fail@plt+0x13098>
   2550c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   25510:	cmp	r0, #0
   25514:	beq	25524 <__assert_fail@plt+0x12aa8>
   25518:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2551c:	cmp	r0, #0
   25520:	beq	255fc <__assert_fail@plt+0x12b80>
   25524:	strb	r6, [fp, #-76]	; 0xffffffb4
   25528:	subs	r5, r5, #1
   2552c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   25530:	ldr	r1, [fp, #-68]	; 0xffffffbc
   25534:	add	r0, r0, r1
   25538:	str	r0, [fp, #-72]	; 0xffffffb8
   2553c:	bne	25504 <__assert_fail@plt+0x12a88>
   25540:	b	255b0 <__assert_fail@plt+0x12b34>
   25544:	add	r0, r7, r5
   25548:	strb	r6, [fp, #-132]	; 0xffffff7c
   2554c:	add	sl, sl, #1
   25550:	str	r0, [fp, #-128]	; 0xffffff80
   25554:	ldr	r0, [fp, #-152]	; 0xffffff68
   25558:	cmp	sl, r0
   2555c:	bne	255b0 <__assert_fail@plt+0x12b34>
   25560:	b	255dc <__assert_fail@plt+0x12b60>
   25564:	mov	r0, r4
   25568:	bl	25b14 <__assert_fail@plt+0x13098>
   2556c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   25570:	cmp	r0, #0
   25574:	beq	25584 <__assert_fail@plt+0x12b08>
   25578:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2557c:	cmp	r0, #0
   25580:	beq	255fc <__assert_fail@plt+0x12b80>
   25584:	mov	sl, #0
   25588:	strb	sl, [fp, #-76]	; 0xffffffb4
   2558c:	strb	sl, [fp, #-132]	; 0xffffff7c
   25590:	ldr	r0, [fp, #-72]	; 0xffffffb8
   25594:	ldr	r1, [fp, #-68]	; 0xffffffbc
   25598:	add	r0, r0, r1
   2559c:	ldr	r1, [fp, #-124]	; 0xffffff84
   255a0:	str	r0, [fp, #-72]	; 0xffffffb8
   255a4:	ldr	r0, [fp, #-128]	; 0xffffff80
   255a8:	add	r0, r0, r1
   255ac:	str	r0, [fp, #-128]	; 0xffffff80
   255b0:	sub	r0, fp, #144	; 0x90
   255b4:	bl	25b14 <__assert_fail@plt+0x13098>
   255b8:	ldrb	r2, [fp, #-120]	; 0xffffff88
   255bc:	clz	r0, r2
   255c0:	lsr	r1, r0, #5
   255c4:	ldr	r0, [fp, #-116]	; 0xffffff8c
   255c8:	cmp	r0, #0
   255cc:	bne	25488 <__assert_fail@plt+0x12a0c>
   255d0:	cmp	r2, #0
   255d4:	beq	25488 <__assert_fail@plt+0x12a0c>
   255d8:	b	255e4 <__assert_fail@plt+0x12b68>
   255dc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   255e0:	str	r0, [r8]
   255e4:	mov	r0, r9
   255e8:	bl	45fdc <__assert_fail@plt+0x33560>
   255ec:	mov	r5, #1
   255f0:	mov	r0, r5
   255f4:	sub	sp, fp, #28
   255f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   255fc:	bl	12a28 <abort@plt>
   25600:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   25604:	add	fp, sp, #24
   25608:	mov	r4, #0
   2560c:	cmn	r2, #-536870911	; 0xe0000001
   25610:	bhi	2574c <__assert_fail@plt+0x12cd0>
   25614:	mov	r7, r0
   25618:	lsl	r0, r2, #2
   2561c:	mov	r8, r3
   25620:	mov	r5, r2
   25624:	mov	r6, r1
   25628:	cmp	r0, #4016	; 0xfb0
   2562c:	bhi	25654 <__assert_fail@plt+0x12bd8>
   25630:	add	r0, r0, #22
   25634:	bic	r0, r0, #7
   25638:	sub	r1, sp, r0
   2563c:	add	r0, r1, #15
   25640:	bic	r0, r0, #15
   25644:	mov	sp, r1
   25648:	cmp	r0, #0
   2564c:	bne	25660 <__assert_fail@plt+0x12be4>
   25650:	b	2574c <__assert_fail@plt+0x12cd0>
   25654:	bl	45f6c <__assert_fail@plt+0x334f0>
   25658:	cmp	r0, #0
   2565c:	beq	2574c <__assert_fail@plt+0x12cd0>
   25660:	mov	r1, #1
   25664:	cmp	r5, #3
   25668:	str	r1, [r0, #4]
   2566c:	bcc	256d0 <__assert_fail@plt+0x12c54>
   25670:	mov	r1, #2
   25674:	mov	r2, #0
   25678:	add	r3, r6, r1
   2567c:	ldrb	r4, [r6, r2]
   25680:	ldrb	r3, [r3, #-1]
   25684:	cmp	r3, r4
   25688:	bne	256a4 <__assert_fail@plt+0x12c28>
   2568c:	b	256b8 <__assert_fail@plt+0x12c3c>
   25690:	ldr	r4, [r0, r2, lsl #2]
   25694:	sub	r2, r2, r4
   25698:	ldrb	r4, [r6, r2]
   2569c:	cmp	r3, r4
   256a0:	beq	256b8 <__assert_fail@plt+0x12c3c>
   256a4:	cmp	r2, #0
   256a8:	bne	25690 <__assert_fail@plt+0x12c14>
   256ac:	mov	r2, #0
   256b0:	mov	r3, r1
   256b4:	b	256c0 <__assert_fail@plt+0x12c44>
   256b8:	add	r2, r2, #1
   256bc:	sub	r3, r1, r2
   256c0:	str	r3, [r0, r1, lsl #2]
   256c4:	add	r1, r1, #1
   256c8:	cmp	r1, r5
   256cc:	bne	25678 <__assert_fail@plt+0x12bfc>
   256d0:	mov	r1, #0
   256d4:	str	r1, [r8]
   256d8:	ldrb	r3, [r7]
   256dc:	cmp	r3, #0
   256e0:	beq	25744 <__assert_fail@plt+0x12cc8>
   256e4:	mov	r2, r7
   256e8:	ldrb	r4, [r6, r1]
   256ec:	uxtb	r3, r3
   256f0:	cmp	r4, r3
   256f4:	bne	2570c <__assert_fail@plt+0x12c90>
   256f8:	add	r1, r1, #1
   256fc:	cmp	r1, r5
   25700:	beq	25740 <__assert_fail@plt+0x12cc4>
   25704:	add	r7, r7, #1
   25708:	b	25730 <__assert_fail@plt+0x12cb4>
   2570c:	cmp	r1, #0
   25710:	beq	25724 <__assert_fail@plt+0x12ca8>
   25714:	ldr	r3, [r0, r1, lsl #2]
   25718:	sub	r1, r1, r3
   2571c:	add	r2, r2, r3
   25720:	b	25730 <__assert_fail@plt+0x12cb4>
   25724:	add	r7, r7, #1
   25728:	add	r2, r2, #1
   2572c:	mov	r1, #0
   25730:	ldrb	r3, [r7]
   25734:	cmp	r3, #0
   25738:	bne	256e8 <__assert_fail@plt+0x12c6c>
   2573c:	b	25744 <__assert_fail@plt+0x12cc8>
   25740:	str	r2, [r8]
   25744:	bl	45fdc <__assert_fail@plt+0x33560>
   25748:	mov	r4, #1
   2574c:	mov	r0, r4
   25750:	sub	sp, fp, #24
   25754:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   25758:	push	{r4, r5, fp, lr}
   2575c:	add	fp, sp, #8
   25760:	mov	r4, r1
   25764:	mov	r5, r0
   25768:	bl	12788 <strlen@plt>
   2576c:	mov	r1, r0
   25770:	mov	r0, r5
   25774:	mov	r2, r4
   25778:	pop	{r4, r5, fp, lr}
   2577c:	b	25780 <__assert_fail@plt+0x12d04>
   25780:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25784:	add	fp, sp, #28
   25788:	sub	sp, sp, #28
   2578c:	mov	r4, r2
   25790:	mov	r5, r1
   25794:	mov	r7, r0
   25798:	add	r6, r0, r1
   2579c:	bl	12620 <__ctype_get_mb_cur_max@plt>
   257a0:	cmp	r0, #1
   257a4:	bls	25a94 <__assert_fail@plt+0x13018>
   257a8:	cmp	r5, #1
   257ac:	blt	25afc <__assert_fail@plt+0x13080>
   257b0:	and	r2, r4, #1
   257b4:	and	sl, r4, #2
   257b8:	mov	r5, #0
   257bc:	add	r8, sp, #12
   257c0:	add	r9, sp, #16
   257c4:	mov	r4, #0
   257c8:	eor	r3, r2, #1
   257cc:	ldrb	r0, [r7]
   257d0:	sub	r0, r0, #32
   257d4:	cmp	r0, #94	; 0x5e
   257d8:	bhi	25974 <__assert_fail@plt+0x12ef8>
   257dc:	add	r1, pc, #0
   257e0:	ldr	pc, [r1, r0, lsl #2]
   257e4:	andeq	r5, r2, r0, ror #18
   257e8:	andeq	r5, r2, r0, ror #18
   257ec:	andeq	r5, r2, r0, ror #18
   257f0:	andeq	r5, r2, r0, ror #18
   257f4:	andeq	r5, r2, r4, ror r9
   257f8:	andeq	r5, r2, r0, ror #18
   257fc:	andeq	r5, r2, r0, ror #18
   25800:	andeq	r5, r2, r0, ror #18
   25804:	andeq	r5, r2, r0, ror #18
   25808:	andeq	r5, r2, r0, ror #18
   2580c:	andeq	r5, r2, r0, ror #18
   25810:	andeq	r5, r2, r0, ror #18
   25814:	andeq	r5, r2, r0, ror #18
   25818:	andeq	r5, r2, r0, ror #18
   2581c:	andeq	r5, r2, r0, ror #18
   25820:	andeq	r5, r2, r0, ror #18
   25824:	andeq	r5, r2, r0, ror #18
   25828:	andeq	r5, r2, r0, ror #18
   2582c:	andeq	r5, r2, r0, ror #18
   25830:	andeq	r5, r2, r0, ror #18
   25834:	andeq	r5, r2, r0, ror #18
   25838:	andeq	r5, r2, r0, ror #18
   2583c:	andeq	r5, r2, r0, ror #18
   25840:	andeq	r5, r2, r0, ror #18
   25844:	andeq	r5, r2, r0, ror #18
   25848:	andeq	r5, r2, r0, ror #18
   2584c:	andeq	r5, r2, r0, ror #18
   25850:	andeq	r5, r2, r0, ror #18
   25854:	andeq	r5, r2, r0, ror #18
   25858:	andeq	r5, r2, r0, ror #18
   2585c:	andeq	r5, r2, r0, ror #18
   25860:	andeq	r5, r2, r0, ror #18
   25864:	andeq	r5, r2, r4, ror r9
   25868:	andeq	r5, r2, r0, ror #18
   2586c:	andeq	r5, r2, r0, ror #18
   25870:	andeq	r5, r2, r0, ror #18
   25874:	andeq	r5, r2, r0, ror #18
   25878:	andeq	r5, r2, r0, ror #18
   2587c:	andeq	r5, r2, r0, ror #18
   25880:	andeq	r5, r2, r0, ror #18
   25884:	andeq	r5, r2, r0, ror #18
   25888:	andeq	r5, r2, r0, ror #18
   2588c:	andeq	r5, r2, r0, ror #18
   25890:	andeq	r5, r2, r0, ror #18
   25894:	andeq	r5, r2, r0, ror #18
   25898:	andeq	r5, r2, r0, ror #18
   2589c:	andeq	r5, r2, r0, ror #18
   258a0:	andeq	r5, r2, r0, ror #18
   258a4:	andeq	r5, r2, r0, ror #18
   258a8:	andeq	r5, r2, r0, ror #18
   258ac:	andeq	r5, r2, r0, ror #18
   258b0:	andeq	r5, r2, r0, ror #18
   258b4:	andeq	r5, r2, r0, ror #18
   258b8:	andeq	r5, r2, r0, ror #18
   258bc:	andeq	r5, r2, r0, ror #18
   258c0:	andeq	r5, r2, r0, ror #18
   258c4:	andeq	r5, r2, r0, ror #18
   258c8:	andeq	r5, r2, r0, ror #18
   258cc:	andeq	r5, r2, r0, ror #18
   258d0:	andeq	r5, r2, r0, ror #18
   258d4:	andeq	r5, r2, r0, ror #18
   258d8:	andeq	r5, r2, r0, ror #18
   258dc:	andeq	r5, r2, r0, ror #18
   258e0:	andeq	r5, r2, r0, ror #18
   258e4:	andeq	r5, r2, r4, ror r9
   258e8:	andeq	r5, r2, r0, ror #18
   258ec:	andeq	r5, r2, r0, ror #18
   258f0:	andeq	r5, r2, r0, ror #18
   258f4:	andeq	r5, r2, r0, ror #18
   258f8:	andeq	r5, r2, r0, ror #18
   258fc:	andeq	r5, r2, r0, ror #18
   25900:	andeq	r5, r2, r0, ror #18
   25904:	andeq	r5, r2, r0, ror #18
   25908:	andeq	r5, r2, r0, ror #18
   2590c:	andeq	r5, r2, r0, ror #18
   25910:	andeq	r5, r2, r0, ror #18
   25914:	andeq	r5, r2, r0, ror #18
   25918:	andeq	r5, r2, r0, ror #18
   2591c:	andeq	r5, r2, r0, ror #18
   25920:	andeq	r5, r2, r0, ror #18
   25924:	andeq	r5, r2, r0, ror #18
   25928:	andeq	r5, r2, r0, ror #18
   2592c:	andeq	r5, r2, r0, ror #18
   25930:	andeq	r5, r2, r0, ror #18
   25934:	andeq	r5, r2, r0, ror #18
   25938:	andeq	r5, r2, r0, ror #18
   2593c:	andeq	r5, r2, r0, ror #18
   25940:	andeq	r5, r2, r0, ror #18
   25944:	andeq	r5, r2, r0, ror #18
   25948:	andeq	r5, r2, r0, ror #18
   2594c:	andeq	r5, r2, r0, ror #18
   25950:	andeq	r5, r2, r0, ror #18
   25954:	andeq	r5, r2, r0, ror #18
   25958:	andeq	r5, r2, r0, ror #18
   2595c:	andeq	r5, r2, r0, ror #18
   25960:	add	r4, r4, #1
   25964:	add	r7, r7, #1
   25968:	cmp	r7, r6
   2596c:	bcc	257cc <__assert_fail@plt+0x12d50>
   25970:	b	25b08 <__assert_fail@plt+0x1308c>
   25974:	str	r3, [sp, #4]
   25978:	str	r2, [sp, #8]
   2597c:	str	r5, [sp, #20]
   25980:	str	r5, [sp, #16]
   25984:	sub	r2, r6, r7
   25988:	mov	r0, r8
   2598c:	mov	r1, r7
   25990:	mov	r3, r9
   25994:	mov	r5, r7
   25998:	bl	3236c <__assert_fail@plt+0x1f8f0>
   2599c:	cmp	r0, #0
   259a0:	beq	259bc <__assert_fail@plt+0x12f40>
   259a4:	mov	r7, r0
   259a8:	cmn	r0, #2
   259ac:	beq	25a2c <__assert_fail@plt+0x12fb0>
   259b0:	cmn	r7, #1
   259b4:	bne	259c0 <__assert_fail@plt+0x12f44>
   259b8:	b	25a4c <__assert_fail@plt+0x12fd0>
   259bc:	mov	r7, #1
   259c0:	ldr	r0, [sp, #12]
   259c4:	bl	12434 <wcwidth@plt>
   259c8:	cmp	r0, #0
   259cc:	blt	259e8 <__assert_fail@plt+0x12f6c>
   259d0:	mvn	r1, #-2147483648	; 0x80000000
   259d4:	sub	r1, r1, r4
   259d8:	cmp	r0, r1
   259dc:	bgt	25a24 <__assert_fail@plt+0x12fa8>
   259e0:	add	r4, r0, r4
   259e4:	b	25a0c <__assert_fail@plt+0x12f90>
   259e8:	cmp	sl, #0
   259ec:	bne	25a74 <__assert_fail@plt+0x12ff8>
   259f0:	ldr	r0, [sp, #12]
   259f4:	bl	1259c <iswcntrl@plt>
   259f8:	cmp	r0, #0
   259fc:	bne	25a0c <__assert_fail@plt+0x12f90>
   25a00:	cmn	r4, #-2147483647	; 0x80000001
   25a04:	beq	25a24 <__assert_fail@plt+0x12fa8>
   25a08:	add	r4, r4, #1
   25a0c:	mov	r0, r9
   25a10:	add	r7, r5, r7
   25a14:	bl	124f4 <mbsinit@plt>
   25a18:	cmp	r0, #0
   25a1c:	beq	25984 <__assert_fail@plt+0x12f08>
   25a20:	b	25a64 <__assert_fail@plt+0x12fe8>
   25a24:	mov	r0, #7
   25a28:	b	25a78 <__assert_fail@plt+0x12ffc>
   25a2c:	ldr	r0, [sp, #4]
   25a30:	ldr	r1, [sp, #8]
   25a34:	mov	r7, r6
   25a38:	add	r4, r4, r0
   25a3c:	mov	r0, #1
   25a40:	cmp	r1, #0
   25a44:	beq	25a64 <__assert_fail@plt+0x12fe8>
   25a48:	b	25a78 <__assert_fail@plt+0x12ffc>
   25a4c:	ldr	r1, [sp, #8]
   25a50:	mov	r0, #1
   25a54:	cmp	r1, #0
   25a58:	bne	25a78 <__assert_fail@plt+0x12ffc>
   25a5c:	add	r4, r4, #1
   25a60:	add	r7, r5, #1
   25a64:	ldr	r2, [sp, #8]
   25a68:	ldr	r3, [sp, #4]
   25a6c:	mov	r5, #0
   25a70:	b	25968 <__assert_fail@plt+0x12eec>
   25a74:	mov	r0, #1
   25a78:	ldr	r2, [sp, #8]
   25a7c:	ldr	r3, [sp, #4]
   25a80:	mov	r7, r5
   25a84:	cmp	r0, #0
   25a88:	mov	r5, #0
   25a8c:	beq	25968 <__assert_fail@plt+0x12eec>
   25a90:	b	25aec <__assert_fail@plt+0x13070>
   25a94:	and	r8, r4, #2
   25a98:	mov	r4, #0
   25a9c:	cmp	r7, r6
   25aa0:	bcs	25b08 <__assert_fail@plt+0x1308c>
   25aa4:	ldrb	r5, [r7], #1
   25aa8:	bl	12740 <__ctype_b_loc@plt>
   25aac:	ldr	r0, [r0]
   25ab0:	add	r0, r0, r5, lsl #1
   25ab4:	ldrh	r1, [r0]
   25ab8:	tst	r1, #16384	; 0x4000
   25abc:	bne	25ad4 <__assert_fail@plt+0x13058>
   25ac0:	cmp	r8, #0
   25ac4:	bne	25b04 <__assert_fail@plt+0x13088>
   25ac8:	mov	r0, #0
   25acc:	tst	r1, #2
   25ad0:	bne	25ae4 <__assert_fail@plt+0x13068>
   25ad4:	cmn	r4, #-2147483647	; 0x80000001
   25ad8:	mov	r0, #0
   25adc:	mvneq	r0, #0
   25ae0:	addne	r4, r4, #1
   25ae4:	ands	r0, r0, #7
   25ae8:	beq	25a9c <__assert_fail@plt+0x13020>
   25aec:	mvn	r4, #0
   25af0:	cmp	r0, #7
   25af4:	mvneq	r4, #-2147483648	; 0x80000000
   25af8:	b	25b08 <__assert_fail@plt+0x1308c>
   25afc:	mov	r4, #0
   25b00:	b	25b08 <__assert_fail@plt+0x1308c>
   25b04:	mvn	r4, #0
   25b08:	mov	r0, r4
   25b0c:	sub	sp, fp, #28
   25b10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25b14:	push	{r4, r5, r6, r7, fp, lr}
   25b18:	add	fp, sp, #16
   25b1c:	mov	r4, r0
   25b20:	ldrb	r0, [r0, #12]
   25b24:	cmp	r0, #0
   25b28:	popne	{r4, r5, r6, r7, fp, pc}
   25b2c:	ldrb	r0, [r4]
   25b30:	ldr	r6, [r4, #16]
   25b34:	cmp	r0, #0
   25b38:	beq	25b98 <__assert_fail@plt+0x1311c>
   25b3c:	add	r5, r4, #4
   25b40:	bl	12620 <__ctype_get_mb_cur_max@plt>
   25b44:	mov	r1, r0
   25b48:	mov	r0, r6
   25b4c:	bl	2d4e4 <__assert_fail@plt+0x1aa68>
   25b50:	add	r7, r4, #28
   25b54:	mov	r2, r0
   25b58:	mov	r1, r6
   25b5c:	mov	r3, r5
   25b60:	mov	r0, r7
   25b64:	bl	3236c <__assert_fail@plt+0x1f8f0>
   25b68:	cmn	r0, #2
   25b6c:	str	r0, [r4, #20]
   25b70:	beq	25c14 <__assert_fail@plt+0x13198>
   25b74:	cmp	r0, #0
   25b78:	beq	25bd0 <__assert_fail@plt+0x13154>
   25b7c:	cmn	r0, #1
   25b80:	bne	25bf4 <__assert_fail@plt+0x13178>
   25b84:	mov	r0, #0
   25b88:	strb	r0, [r4, #24]
   25b8c:	mov	r0, #1
   25b90:	str	r0, [r4, #20]
   25b94:	b	25c28 <__assert_fail@plt+0x131ac>
   25b98:	ldrb	r0, [r6]
   25b9c:	movw	r2, #52336	; 0xcc70
   25ba0:	movt	r2, #4
   25ba4:	ubfx	r1, r0, #5, #3
   25ba8:	ldr	r1, [r2, r1, lsl #2]
   25bac:	and	r2, r0, #31
   25bb0:	mov	r0, #1
   25bb4:	tst	r1, r0, lsl r2
   25bb8:	beq	25c34 <__assert_fail@plt+0x131b8>
   25bbc:	str	r0, [r4, #20]
   25bc0:	ldrb	r1, [r6]
   25bc4:	strb	r0, [r4, #24]
   25bc8:	str	r1, [r4, #28]
   25bcc:	b	25c28 <__assert_fail@plt+0x131ac>
   25bd0:	mov	r0, #1
   25bd4:	str	r0, [r4, #20]
   25bd8:	ldr	r0, [r4, #16]
   25bdc:	ldrb	r0, [r0]
   25be0:	cmp	r0, #0
   25be4:	bne	25c54 <__assert_fail@plt+0x131d8>
   25be8:	ldr	r0, [r7]
   25bec:	cmp	r0, #0
   25bf0:	bne	25c74 <__assert_fail@plt+0x131f8>
   25bf4:	mov	r0, #1
   25bf8:	strb	r0, [r4, #24]
   25bfc:	mov	r0, r5
   25c00:	bl	124f4 <mbsinit@plt>
   25c04:	cmp	r0, #0
   25c08:	movne	r0, #0
   25c0c:	strbne	r0, [r4]
   25c10:	b	25c28 <__assert_fail@plt+0x131ac>
   25c14:	ldr	r0, [r4, #16]
   25c18:	bl	12788 <strlen@plt>
   25c1c:	str	r0, [r4, #20]
   25c20:	mov	r0, #0
   25c24:	strb	r0, [r4, #24]
   25c28:	mov	r0, #1
   25c2c:	strb	r0, [r4, #12]
   25c30:	pop	{r4, r5, r6, r7, fp, pc}
   25c34:	add	r5, r4, #4
   25c38:	mov	r0, r5
   25c3c:	bl	124f4 <mbsinit@plt>
   25c40:	cmp	r0, #0
   25c44:	beq	25c94 <__assert_fail@plt+0x13218>
   25c48:	mov	r0, #1
   25c4c:	strb	r0, [r4]
   25c50:	b	25b40 <__assert_fail@plt+0x130c4>
   25c54:	movw	r0, #46323	; 0xb4f3
   25c58:	movw	r1, #46263	; 0xb4b7
   25c5c:	movw	r3, #46275	; 0xb4c3
   25c60:	mov	r2, #171	; 0xab
   25c64:	movt	r0, #4
   25c68:	movt	r1, #4
   25c6c:	movt	r3, #4
   25c70:	bl	12a7c <__assert_fail@plt>
   25c74:	movw	r0, #46346	; 0xb50a
   25c78:	movw	r1, #46263	; 0xb4b7
   25c7c:	movw	r3, #46275	; 0xb4c3
   25c80:	mov	r2, #172	; 0xac
   25c84:	movt	r0, #4
   25c88:	movt	r1, #4
   25c8c:	movt	r3, #4
   25c90:	bl	12a7c <__assert_fail@plt>
   25c94:	movw	r0, #46240	; 0xb4a0
   25c98:	movw	r1, #46263	; 0xb4b7
   25c9c:	movw	r3, #46275	; 0xb4c3
   25ca0:	mov	r2, #143	; 0x8f
   25ca4:	movt	r0, #4
   25ca8:	movt	r1, #4
   25cac:	movt	r3, #4
   25cb0:	bl	12a7c <__assert_fail@plt>
   25cb4:	ldr	r2, [r0, #16]
   25cb8:	add	r1, r2, r1
   25cbc:	str	r1, [r0, #16]
   25cc0:	bx	lr
   25cc4:	push	{r4, r5, r6, sl, fp, lr}
   25cc8:	add	fp, sp, #16
   25ccc:	mov	r5, r1
   25cd0:	ldrb	r1, [r1]
   25cd4:	mov	r4, r0
   25cd8:	strb	r1, [r0], #4
   25cdc:	cmp	r1, #0
   25ce0:	beq	25cf0 <__assert_fail@plt+0x13274>
   25ce4:	ldmib	r5, {r1, r2}
   25ce8:	stm	r0, {r1, r2}
   25cec:	b	25cfc <__assert_fail@plt+0x13280>
   25cf0:	mov	r1, #0
   25cf4:	str	r1, [r0]
   25cf8:	str	r1, [r0, #4]
   25cfc:	ldrb	r0, [r5, #12]
   25d00:	strb	r0, [r4, #12]
   25d04:	add	r0, r5, #32
   25d08:	ldr	r1, [r5, #16]
   25d0c:	cmp	r1, r0
   25d10:	beq	25d1c <__assert_fail@plt+0x132a0>
   25d14:	mov	r6, r1
   25d18:	b	25d2c <__assert_fail@plt+0x132b0>
   25d1c:	ldr	r2, [r5, #20]
   25d20:	add	r6, r4, #32
   25d24:	mov	r0, r6
   25d28:	bl	124b8 <memcpy@plt>
   25d2c:	str	r6, [r4, #16]
   25d30:	ldr	r0, [r5, #20]
   25d34:	str	r0, [r4, #20]
   25d38:	ldrb	r0, [r5, #24]
   25d3c:	strb	r0, [r4, #24]
   25d40:	cmp	r0, #0
   25d44:	ldrne	r0, [r5, #28]
   25d48:	strne	r0, [r4, #28]
   25d4c:	pop	{r4, r5, r6, sl, fp, pc}
   25d50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25d54:	add	fp, sp, #28
   25d58:	sub	sp, sp, #4
   25d5c:	ldrb	r1, [r0]
   25d60:	mov	r4, r0
   25d64:	and	r0, r1, #248	; 0xf8
   25d68:	cmp	r0, #48	; 0x30
   25d6c:	bne	25db8 <__assert_fail@plt+0x1333c>
   25d70:	mov	r0, #0
   25d74:	mov	r5, #0
   25d78:	mov	r2, r4
   25d7c:	lsl	r3, r5, #3
   25d80:	uxtab	r1, r3, r1
   25d84:	sub	r5, r1, #48	; 0x30
   25d88:	cmp	r0, r5, lsr #12
   25d8c:	bne	25db0 <__assert_fail@plt+0x13334>
   25d90:	ldrb	r1, [r2, #1]
   25d94:	add	r6, r2, #1
   25d98:	and	r2, r1, #248	; 0xf8
   25d9c:	cmp	r2, #48	; 0x30
   25da0:	mov	r2, r6
   25da4:	beq	25d7c <__assert_fail@plt+0x13300>
   25da8:	cmp	r1, #0
   25dac:	beq	25e28 <__assert_fail@plt+0x133ac>
   25db0:	sub	sp, fp, #28
   25db4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25db8:	movw	sl, #5
   25dbc:	mov	r2, #1
   25dc0:	mvn	r3, #42	; 0x2a
   25dc4:	mov	r7, #1
   25dc8:	mov	r0, #1
   25dcc:	movt	sl, #4
   25dd0:	b	25de0 <__assert_fail@plt+0x13364>
   25dd4:	ldrb	r1, [r4, r7]
   25dd8:	add	r0, r6, r0
   25ddc:	add	r7, r7, #1
   25de0:	uxtab	r6, r3, r1
   25de4:	uxtb	r1, r1
   25de8:	cmp	r6, #18
   25dec:	bhi	25dfc <__assert_fail@plt+0x13380>
   25df0:	tst	sl, r2, lsl r6
   25df4:	mov	r6, #1
   25df8:	bne	25dd4 <__assert_fail@plt+0x13358>
   25dfc:	cmp	r1, #0
   25e00:	beq	25e0c <__assert_fail@plt+0x13390>
   25e04:	mov	r6, #0
   25e08:	b	25dd4 <__assert_fail@plt+0x13358>
   25e0c:	mov	r1, #16
   25e10:	bl	2dcc0 <__assert_fail@plt+0x1b244>
   25e14:	mov	r9, #0
   25e18:	mov	ip, #1
   25e1c:	mvn	lr, #87	; 0x57
   25e20:	mov	r8, #0
   25e24:	b	25e74 <__assert_fail@plt+0x133f8>
   25e28:	mov	r0, #32
   25e2c:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   25e30:	movw	r1, #317	; 0x13d
   25e34:	mov	r2, #0
   25e38:	and	r3, r5, #3072	; 0xc00
   25e3c:	movw	r7, #1023	; 0x3ff
   25e40:	strh	r1, [r0]
   25e44:	strb	r2, [r0, #17]
   25e48:	sub	r2, r6, r4
   25e4c:	movw	r1, #4095	; 0xfff
   25e50:	cmp	r2, #5
   25e54:	str	r1, [r0, #4]
   25e58:	str	r5, [r0, #8]
   25e5c:	orrlt	r1, r3, r7
   25e60:	str	r1, [r0, #12]
   25e64:	sub	sp, fp, #28
   25e68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25e6c:	add	r4, r4, #1
   25e70:	mov	r8, r3
   25e74:	mov	r2, #0
   25e78:	b	25e84 <__assert_fail@plt+0x13408>
   25e7c:	orr	r2, r2, r1
   25e80:	add	r4, r4, #1
   25e84:	ldrb	r6, [r4]
   25e88:	sub	r3, r6, #97	; 0x61
   25e8c:	cmp	r3, #20
   25e90:	bhi	25f0c <__assert_fail@plt+0x13490>
   25e94:	add	r5, pc, #4
   25e98:	mov	r1, #2496	; 0x9c0
   25e9c:	ldr	pc, [r5, r3, lsl #2]
   25ea0:	strdeq	r5, [r2], -r4
   25ea4:	andeq	r6, r2, r8, ror r1
   25ea8:	andeq	r6, r2, r8, ror r1
   25eac:	andeq	r6, r2, r8, ror r1
   25eb0:	andeq	r6, r2, r8, ror r1
   25eb4:	andeq	r6, r2, r8, ror r1
   25eb8:	strdeq	r5, [r2], -ip
   25ebc:	andeq	r6, r2, r8, ror r1
   25ec0:	andeq	r6, r2, r8, ror r1
   25ec4:	andeq	r6, r2, r8, ror r1
   25ec8:	andeq	r6, r2, r8, ror r1
   25ecc:	andeq	r6, r2, r8, ror r1
   25ed0:	andeq	r6, r2, r8, ror r1
   25ed4:	andeq	r6, r2, r8, ror r1
   25ed8:	andeq	r5, r2, r4, lsl #30
   25edc:	andeq	r6, r2, r8, ror r1
   25ee0:	andeq	r6, r2, r8, ror r1
   25ee4:	andeq	r6, r2, r8, ror r1
   25ee8:	andeq	r6, r2, r8, ror r1
   25eec:	andeq	r6, r2, r8, ror r1
   25ef0:	andeq	r5, r2, ip, ror lr
   25ef4:	movw	r1, #4095	; 0xfff
   25ef8:	b	25e7c <__assert_fail@plt+0x13400>
   25efc:	movw	r1, #1080	; 0x438
   25f00:	b	25e7c <__assert_fail@plt+0x13400>
   25f04:	movw	r1, #519	; 0x207
   25f08:	b	25e7c <__assert_fail@plt+0x13400>
   25f0c:	sub	r1, r6, #43	; 0x2b
   25f10:	cmp	r1, #18
   25f14:	bhi	26178 <__assert_fail@plt+0x136fc>
   25f18:	tst	sl, ip, lsl r1
   25f1c:	beq	26178 <__assert_fail@plt+0x136fc>
   25f20:	ldrb	r1, [r4, #1]
   25f24:	sub	r3, r1, #48	; 0x30
   25f28:	cmp	r3, #8
   25f2c:	bcs	25f88 <__assert_fail@plt+0x1350c>
   25f30:	add	r3, r4, #2
   25f34:	mov	r7, #0
   25f38:	lsl	r4, r7, #3
   25f3c:	uxtab	r1, r4, r1
   25f40:	sub	r7, r1, #48	; 0x30
   25f44:	cmp	r9, r7, lsr #12
   25f48:	bne	26178 <__assert_fail@plt+0x136fc>
   25f4c:	ldrb	r1, [r3], #1
   25f50:	and	r4, r1, #248	; 0xf8
   25f54:	cmp	r4, #48	; 0x30
   25f58:	beq	25f38 <__assert_fail@plt+0x134bc>
   25f5c:	cmp	r2, #0
   25f60:	bne	26178 <__assert_fail@plt+0x136fc>
   25f64:	sub	r4, r3, #1
   25f68:	mov	r5, #1
   25f6c:	movw	r2, #4095	; 0xfff
   25f70:	cmp	r1, #0
   25f74:	beq	25fb4 <__assert_fail@plt+0x13538>
   25f78:	cmp	r1, #44	; 0x2c
   25f7c:	movw	r1, #4095	; 0xfff
   25f80:	beq	260c4 <__assert_fail@plt+0x13648>
   25f84:	b	26178 <__assert_fail@plt+0x136fc>
   25f88:	add	r4, r4, #2
   25f8c:	cmp	r1, #103	; 0x67
   25f90:	beq	25fbc <__assert_fail@plt+0x13540>
   25f94:	cmp	r1, #111	; 0x6f
   25f98:	beq	25fcc <__assert_fail@plt+0x13550>
   25f9c:	cmp	r1, #117	; 0x75
   25fa0:	bne	25fdc <__assert_fail@plt+0x13560>
   25fa4:	mov	r5, #3
   25fa8:	mov	r1, #0
   25fac:	mov	r7, #448	; 0x1c0
   25fb0:	b	260c4 <__assert_fail@plt+0x13648>
   25fb4:	movw	r1, #4095	; 0xfff
   25fb8:	b	260c4 <__assert_fail@plt+0x13648>
   25fbc:	mov	r5, #3
   25fc0:	mov	r1, #0
   25fc4:	mov	r7, #56	; 0x38
   25fc8:	b	260c4 <__assert_fail@plt+0x13648>
   25fcc:	mov	r5, #3
   25fd0:	mov	r1, #0
   25fd4:	mov	r7, #7
   25fd8:	b	260c4 <__assert_fail@plt+0x13648>
   25fdc:	mov	r3, #1
   25fe0:	mov	r7, #0
   25fe4:	b	25fec <__assert_fail@plt+0x13570>
   25fe8:	ldrb	r1, [r4], #1
   25fec:	uxtab	r1, lr, r1
   25ff0:	mov	r5, r3
   25ff4:	cmp	r1, #32
   25ff8:	bhi	260b8 <__assert_fail@plt+0x1363c>
   25ffc:	add	ip, pc, #4
   26000:	mov	r3, #2
   26004:	ldr	pc, [ip, r1, lsl #2]
   26008:	andeq	r5, r2, r8, ror #31
   2600c:	strheq	r6, [r2], -r8
   26010:	strheq	r6, [r2], -r8
   26014:	strheq	r6, [r2], -r8
   26018:	strheq	r6, [r2], -r8
   2601c:	strheq	r6, [r2], -r8
   26020:	strheq	r6, [r2], -r8
   26024:	strheq	r6, [r2], -r8
   26028:	strheq	r6, [r2], -r8
   2602c:	strheq	r6, [r2], -r8
   26030:	strheq	r6, [r2], -r8
   26034:	strheq	r6, [r2], -r8
   26038:	strheq	r6, [r2], -r8
   2603c:	strheq	r6, [r2], -r8
   26040:	strheq	r6, [r2], -r8
   26044:	strheq	r6, [r2], -r8
   26048:	strheq	r6, [r2], -r8
   2604c:	strheq	r6, [r2], -r8
   26050:	strheq	r6, [r2], -r8
   26054:	strheq	r6, [r2], -r8
   26058:	strheq	r6, [r2], -r8
   2605c:	strheq	r6, [r2], -r8
   26060:	strheq	r6, [r2], -r8
   26064:	strheq	r6, [r2], -r8
   26068:	strheq	r6, [r2], -r8
   2606c:	strheq	r6, [r2], -r8
   26070:	andeq	r6, r2, ip, lsl #1
   26074:	muleq	r2, r4, r0
   26078:	muleq	r2, ip, r0
   2607c:	strheq	r6, [r2], -r8
   26080:	strheq	r6, [r2], -r8
   26084:	andeq	r6, r2, r4, lsr #1
   26088:	andeq	r6, r2, ip, lsr #1
   2608c:	orr	r7, r7, #292	; 0x124
   26090:	b	260b0 <__assert_fail@plt+0x13634>
   26094:	orr	r7, r7, #3072	; 0xc00
   26098:	b	260b0 <__assert_fail@plt+0x13634>
   2609c:	orr	r7, r7, #512	; 0x200
   260a0:	b	260b0 <__assert_fail@plt+0x13634>
   260a4:	orr	r7, r7, #146	; 0x92
   260a8:	b	260b0 <__assert_fail@plt+0x13634>
   260ac:	orr	r7, r7, #73	; 0x49
   260b0:	mov	r3, r5
   260b4:	b	25fe8 <__assert_fail@plt+0x1356c>
   260b8:	sub	r4, r4, #1
   260bc:	mov	r1, #0
   260c0:	mov	ip, #1
   260c4:	mov	r3, r0
   260c8:	cmp	r1, #0
   260cc:	strb	r6, [r3, r8, lsl #4]!
   260d0:	strb	r5, [r3, #1]
   260d4:	stmib	r3, {r2, r7}
   260d8:	bne	260e8 <__assert_fail@plt+0x1366c>
   260dc:	cmp	r2, #0
   260e0:	andne	r7, r7, r2
   260e4:	mov	r1, r7
   260e8:	add	r7, r0, r8, lsl #4
   260ec:	add	r3, r8, #1
   260f0:	str	r1, [r7, #12]
   260f4:	ldrb	r6, [r4]
   260f8:	sub	r1, r6, #43	; 0x2b
   260fc:	cmp	r1, #18
   26100:	bhi	2615c <__assert_fail@plt+0x136e0>
   26104:	add	r7, pc, #4
   26108:	mov	r8, r3
   2610c:	ldr	pc, [r7, r1, lsl #2]
   26110:	andeq	r5, r2, r0, lsr #30
   26114:	andeq	r5, r2, ip, ror #28
   26118:	andeq	r5, r2, r0, lsr #30
   2611c:	andeq	r6, r2, r8, ror r1
   26120:	andeq	r6, r2, r8, ror r1
   26124:	andeq	r6, r2, r8, ror r1
   26128:	andeq	r6, r2, r8, ror r1
   2612c:	andeq	r6, r2, r8, ror r1
   26130:	andeq	r6, r2, r8, ror r1
   26134:	andeq	r6, r2, r8, ror r1
   26138:	andeq	r6, r2, r8, ror r1
   2613c:	andeq	r6, r2, r8, ror r1
   26140:	andeq	r6, r2, r8, ror r1
   26144:	andeq	r6, r2, r8, ror r1
   26148:	andeq	r6, r2, r8, ror r1
   2614c:	andeq	r6, r2, r8, ror r1
   26150:	andeq	r6, r2, r8, ror r1
   26154:	andeq	r6, r2, r8, ror r1
   26158:	andeq	r5, r2, r0, lsr #30
   2615c:	cmp	r6, #0
   26160:	bne	26178 <__assert_fail@plt+0x136fc>
   26164:	add	r1, r0, r3, lsl #4
   26168:	mov	r2, #0
   2616c:	strb	r2, [r1, #1]
   26170:	sub	sp, fp, #28
   26174:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26178:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   2617c:	mov	r0, #0
   26180:	sub	sp, fp, #28
   26184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26188:	push	{r4, sl, fp, lr}
   2618c:	add	fp, sp, #8
   26190:	sub	sp, sp, #104	; 0x68
   26194:	mov	r1, r0
   26198:	mov	r2, sp
   2619c:	mov	r0, #3
   261a0:	bl	129e0 <__xstat64@plt>
   261a4:	mov	r1, r0
   261a8:	mov	r0, #0
   261ac:	cmp	r1, #0
   261b0:	beq	261bc <__assert_fail@plt+0x13740>
   261b4:	sub	sp, fp, #8
   261b8:	pop	{r4, sl, fp, pc}
   261bc:	ldr	r4, [sp, #16]
   261c0:	mov	r0, #32
   261c4:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   261c8:	movw	r1, #317	; 0x13d
   261cc:	strh	r1, [r0]
   261d0:	movw	r1, #4095	; 0xfff
   261d4:	stmib	r0, {r1, r4}
   261d8:	str	r1, [r0, #12]
   261dc:	mov	r1, #0
   261e0:	strb	r1, [r0, #17]
   261e4:	sub	sp, fp, #8
   261e8:	pop	{r4, sl, fp, pc}
   261ec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   261f0:	add	fp, sp, #24
   261f4:	ldrb	r4, [r3, #1]
   261f8:	ldr	ip, [fp, #8]
   261fc:	bfc	r0, #12, #20
   26200:	cmp	r4, #0
   26204:	beq	262e4 <__assert_fail@plt+0x13868>
   26208:	cmp	r1, #0
   2620c:	mov	lr, r1
   26210:	add	r3, r3, #8
   26214:	mov	r9, #0
   26218:	movw	r8, #4095	; 0xfff
   2621c:	movwne	lr, #3072	; 0xc00
   26220:	mov	r5, r3
   26224:	ldr	r7, [r3, #-4]
   26228:	ldr	r3, [r3]
   2622c:	uxtb	r4, r4
   26230:	ldr	r6, [r5, #4]
   26234:	cmp	r4, #2
   26238:	bic	r6, lr, r6
   2623c:	beq	26268 <__assert_fail@plt+0x137ec>
   26240:	cmp	r4, #3
   26244:	bne	26274 <__assert_fail@plt+0x137f8>
   26248:	and	r4, r3, r0
   2624c:	tst	r4, #146	; 0x92
   26250:	mov	r3, r4
   26254:	orrne	r3, r3, #146	; 0x92
   26258:	tst	r4, #292	; 0x124
   2625c:	orrne	r3, r3, #292	; 0x124
   26260:	tst	r4, #73	; 0x49
   26264:	b	26270 <__assert_fail@plt+0x137f4>
   26268:	and	r4, r0, #73	; 0x49
   2626c:	orrs	r4, r4, r1
   26270:	orrne	r3, r3, #73	; 0x49
   26274:	cmp	r7, #0
   26278:	mov	r4, r7
   2627c:	mvneq	r4, r2
   26280:	bic	r4, r4, r6
   26284:	and	r3, r4, r3
   26288:	ldrb	r4, [r5, #-8]
   2628c:	cmp	r4, #43	; 0x2b
   26290:	beq	262c0 <__assert_fail@plt+0x13844>
   26294:	cmp	r4, #45	; 0x2d
   26298:	beq	262c8 <__assert_fail@plt+0x1384c>
   2629c:	cmp	r4, #61	; 0x3d
   262a0:	bne	262d0 <__assert_fail@plt+0x13854>
   262a4:	mvn	r4, r7
   262a8:	cmp	r7, #0
   262ac:	orrne	r6, r6, r4
   262b0:	and	r0, r6, r0
   262b4:	orr	r0, r3, r0
   262b8:	bic	r3, r8, r6
   262bc:	b	262cc <__assert_fail@plt+0x13850>
   262c0:	orr	r0, r3, r0
   262c4:	b	262cc <__assert_fail@plt+0x13850>
   262c8:	bic	r0, r0, r3
   262cc:	orr	r9, r3, r9
   262d0:	ldrb	r4, [r5, #9]
   262d4:	add	r3, r5, #16
   262d8:	cmp	r4, #0
   262dc:	bne	26220 <__assert_fail@plt+0x137a4>
   262e0:	b	262e8 <__assert_fail@plt+0x1386c>
   262e4:	mov	r9, #0
   262e8:	cmp	ip, #0
   262ec:	strne	r9, [ip]
   262f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   262f4:	push	{fp, lr}
   262f8:	mov	fp, sp
   262fc:	mov	r4, r0
   26300:	movw	r0, #54504	; 0xd4e8
   26304:	movw	r1, #46364	; 0xb51c
   26308:	mov	r2, #5
   2630c:	movt	r0, #5
   26310:	movt	r1, #4
   26314:	ldr	r5, [r0]
   26318:	mov	r0, #0
   2631c:	bl	1253c <dcgettext@plt>
   26320:	mov	r2, r0
   26324:	mov	r0, r5
   26328:	mov	r1, r4
   2632c:	bl	12674 <error@plt>
   26330:	bl	12a28 <abort@plt>
   26334:	push	{fp, lr}
   26338:	mov	fp, sp
   2633c:	mov	r4, r0
   26340:	movw	r0, #54504	; 0xd4e8
   26344:	movw	r1, #46407	; 0xb547
   26348:	mov	r2, #5
   2634c:	movt	r0, #5
   26350:	movt	r1, #4
   26354:	ldr	r5, [r0]
   26358:	mov	r0, #0
   2635c:	bl	1253c <dcgettext@plt>
   26360:	mov	r2, r0
   26364:	mov	r0, r5
   26368:	mov	r1, r4
   2636c:	bl	12674 <error@plt>
   26370:	bl	12a28 <abort@plt>
   26374:	sub	sp, sp, #4
   26378:	push	{fp, lr}
   2637c:	mov	fp, sp
   26380:	sub	sp, sp, #4
   26384:	str	r3, [fp, #8]
   26388:	mov	r3, #0
   2638c:	tst	r2, #64	; 0x40
   26390:	addne	r3, fp, #8
   26394:	addne	r3, r3, #4
   26398:	strne	r3, [sp]
   2639c:	ldrne	r3, [fp, #8]
   263a0:	bl	127ac <openat64@plt>
   263a4:	bl	2d520 <__assert_fail@plt+0x1aaa4>
   263a8:	mov	sp, fp
   263ac:	pop	{fp, lr}
   263b0:	add	sp, sp, #4
   263b4:	bx	lr
   263b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   263bc:	add	fp, sp, #28
   263c0:	sub	sp, sp, #4
   263c4:	vpush	{d8-d9}
   263c8:	sub	sp, sp, #1424	; 0x590
   263cc:	sub	r1, fp, #72	; 0x48
   263d0:	mov	r4, r0
   263d4:	mvn	r7, #1
   263d8:	add	sl, sp, #240	; 0xf0
   263dc:	vmov.i32	q4, #0	; 0x00000000
   263e0:	mov	r8, #0
   263e4:	mov	r9, #0
   263e8:	add	r0, r1, #1
   263ec:	str	r0, [sp, #80]	; 0x50
   263f0:	add	r0, r1, #19
   263f4:	str	r0, [sp, #84]	; 0x54
   263f8:	add	r0, r4, #48	; 0x30
   263fc:	str	r0, [sp, #92]	; 0x5c
   26400:	add	r0, r4, #32
   26404:	str	r0, [sp, #100]	; 0x64
   26408:	add	r0, r4, #40	; 0x28
   2640c:	str	r0, [sp, #88]	; 0x58
   26410:	add	r0, r4, #64	; 0x40
   26414:	str	r0, [sp, #164]	; 0xa4
   26418:	add	r0, r4, #56	; 0x38
   2641c:	str	r0, [sp, #168]	; 0xa8
   26420:	add	r0, r4, #8
   26424:	str	r0, [sp, #96]	; 0x60
   26428:	add	r0, r4, #96	; 0x60
   2642c:	str	r0, [sp, #124]	; 0x7c
   26430:	add	r0, r4, #104	; 0x68
   26434:	str	r0, [sp, #120]	; 0x78
   26438:	add	r0, r4, #112	; 0x70
   2643c:	str	r0, [sp, #116]	; 0x74
   26440:	add	r0, r4, #120	; 0x78
   26444:	str	r0, [sp, #112]	; 0x70
   26448:	add	r0, r4, #128	; 0x80
   2644c:	str	r0, [sp, #108]	; 0x6c
   26450:	add	r0, r4, #136	; 0x88
   26454:	str	r0, [sp, #104]	; 0x68
   26458:	add	r0, r4, #80	; 0x50
   2645c:	str	r0, [sp, #144]	; 0x90
   26460:	add	r0, r4, #72	; 0x48
   26464:	str	r0, [sp, #140]	; 0x8c
   26468:	add	r0, r4, #88	; 0x58
   2646c:	str	r0, [sp, #76]	; 0x4c
   26470:	mov	r0, #0
   26474:	strh	r0, [fp, #-112]	; 0xffffff90
   26478:	mov	r0, #0
   2647c:	str	r0, [sp, #128]	; 0x80
   26480:	mov	r0, #0
   26484:	str	r0, [sp, #132]	; 0x84
   26488:	mov	r0, #0
   2648c:	str	r0, [sp, #136]	; 0x88
   26490:	mov	r0, #0
   26494:	str	r0, [sp, #152]	; 0x98
   26498:	mov	r0, #0
   2649c:	str	r0, [sp, #160]	; 0xa0
   264a0:	mov	r0, #0
   264a4:	str	r0, [sp, #148]	; 0x94
   264a8:	cmp	r8, #12
   264ac:	beq	29c00 <__assert_fail@plt+0x17184>
   264b0:	movw	r0, #46512	; 0xb5b0
   264b4:	movt	r0, #4
   264b8:	add	r0, r0, r8
   264bc:	ldrsb	ip, [r0]
   264c0:	cmn	ip, #93	; 0x5d
   264c4:	beq	27290 <__assert_fail@plt+0x14814>
   264c8:	cmn	r7, #2
   264cc:	bne	26b58 <__assert_fail@plt+0x140dc>
   264d0:	ldr	r1, [r4]
   264d4:	b	264e0 <__assert_fail@plt+0x13a64>
   264d8:	add	r1, r1, #1
   264dc:	str	r1, [r4]
   264e0:	ldrb	r3, [r1]
   264e4:	sub	r0, r3, #9
   264e8:	cmp	r0, #5
   264ec:	bcc	264d8 <__assert_fail@plt+0x13a5c>
   264f0:	cmp	r3, #32
   264f4:	beq	264d8 <__assert_fail@plt+0x13a5c>
   264f8:	sub	r0, r3, #48	; 0x30
   264fc:	cmp	r0, #10
   26500:	bcs	26514 <__assert_fail@plt+0x13a98>
   26504:	cmp	r3, #45	; 0x2d
   26508:	cmpne	r3, #43	; 0x2b
   2650c:	beq	26674 <__assert_fail@plt+0x13bf8>
   26510:	b	26700 <__assert_fail@plt+0x13c84>
   26514:	sub	r0, r3, #40	; 0x28
   26518:	cmp	r0, #82	; 0x52
   2651c:	bhi	27230 <__assert_fail@plt+0x147b4>
   26520:	add	r2, pc, #0
   26524:	ldr	pc, [r2, r0, lsl #2]
   26528:	andeq	r6, r2, r4, lsr #13
   2652c:	andeq	r7, r2, r0, lsr r2
   26530:	andeq	r7, r2, r0, lsr r2
   26534:	andeq	r6, r2, r4, ror r6
   26538:	andeq	r7, r2, r0, lsr r2
   2653c:	andeq	r6, r2, r4, ror r6
   26540:	andeq	r7, r2, r0, lsr r2
   26544:	andeq	r7, r2, r0, lsr r2
   26548:	andeq	r7, r2, r0, lsr r2
   2654c:	andeq	r7, r2, r0, lsr r2
   26550:	andeq	r7, r2, r0, lsr r2
   26554:	andeq	r7, r2, r0, lsr r2
   26558:	andeq	r7, r2, r0, lsr r2
   2655c:	andeq	r7, r2, r0, lsr r2
   26560:	andeq	r7, r2, r0, lsr r2
   26564:	andeq	r7, r2, r0, lsr r2
   26568:	andeq	r7, r2, r0, lsr r2
   2656c:	andeq	r7, r2, r0, lsr r2
   26570:	andeq	r7, r2, r0, lsr r2
   26574:	andeq	r7, r2, r0, lsr r2
   26578:	andeq	r7, r2, r0, lsr r2
   2657c:	andeq	r7, r2, r0, lsr r2
   26580:	andeq	r7, r2, r0, lsr r2
   26584:	andeq	r7, r2, r0, lsr r2
   26588:	andeq	r7, r2, r0, lsr r2
   2658c:	andeq	r6, r2, ip, ror #17
   26590:	andeq	r6, r2, ip, ror #17
   26594:	andeq	r6, r2, ip, ror #17
   26598:	andeq	r6, r2, ip, ror #17
   2659c:	andeq	r6, r2, ip, ror #17
   265a0:	andeq	r6, r2, ip, ror #17
   265a4:	andeq	r6, r2, ip, ror #17
   265a8:	andeq	r6, r2, ip, ror #17
   265ac:	andeq	r6, r2, ip, ror #17
   265b0:	andeq	r6, r2, ip, ror #17
   265b4:	andeq	r6, r2, ip, ror #17
   265b8:	andeq	r6, r2, ip, ror #17
   265bc:	andeq	r6, r2, ip, ror #17
   265c0:	andeq	r6, r2, ip, ror #17
   265c4:	andeq	r6, r2, ip, ror #17
   265c8:	andeq	r6, r2, ip, ror #17
   265cc:	andeq	r6, r2, ip, ror #17
   265d0:	andeq	r6, r2, ip, ror #17
   265d4:	andeq	r6, r2, ip, ror #17
   265d8:	andeq	r6, r2, ip, ror #17
   265dc:	andeq	r6, r2, ip, ror #17
   265e0:	andeq	r6, r2, ip, ror #17
   265e4:	andeq	r6, r2, ip, ror #17
   265e8:	andeq	r6, r2, ip, ror #17
   265ec:	andeq	r6, r2, ip, ror #17
   265f0:	andeq	r6, r2, ip, ror #17
   265f4:	andeq	r7, r2, r0, lsr r2
   265f8:	andeq	r7, r2, r0, lsr r2
   265fc:	andeq	r7, r2, r0, lsr r2
   26600:	andeq	r7, r2, r0, lsr r2
   26604:	andeq	r7, r2, r0, lsr r2
   26608:	andeq	r7, r2, r0, lsr r2
   2660c:	andeq	r6, r2, ip, ror #17
   26610:	andeq	r6, r2, ip, ror #17
   26614:	andeq	r6, r2, ip, ror #17
   26618:	andeq	r6, r2, ip, ror #17
   2661c:	andeq	r6, r2, ip, ror #17
   26620:	andeq	r6, r2, ip, ror #17
   26624:	andeq	r6, r2, ip, ror #17
   26628:	andeq	r6, r2, ip, ror #17
   2662c:	andeq	r6, r2, ip, ror #17
   26630:	andeq	r6, r2, ip, ror #17
   26634:	andeq	r6, r2, ip, ror #17
   26638:	andeq	r6, r2, ip, ror #17
   2663c:	andeq	r6, r2, ip, ror #17
   26640:	andeq	r6, r2, ip, ror #17
   26644:	andeq	r6, r2, ip, ror #17
   26648:	andeq	r6, r2, ip, ror #17
   2664c:	andeq	r6, r2, ip, ror #17
   26650:	andeq	r6, r2, ip, ror #17
   26654:	andeq	r6, r2, ip, ror #17
   26658:	andeq	r6, r2, ip, ror #17
   2665c:	andeq	r6, r2, ip, ror #17
   26660:	andeq	r6, r2, ip, ror #17
   26664:	andeq	r6, r2, ip, ror #17
   26668:	andeq	r6, r2, ip, ror #17
   2666c:	andeq	r6, r2, ip, ror #17
   26670:	andeq	r6, r2, ip, ror #17
   26674:	add	r1, r1, #1
   26678:	str	r1, [r4]
   2667c:	ldrb	r2, [r1]
   26680:	sub	r0, r2, #9
   26684:	cmp	r0, #5
   26688:	bcc	26674 <__assert_fail@plt+0x13bf8>
   2668c:	cmp	r2, #32
   26690:	beq	26674 <__assert_fail@plt+0x13bf8>
   26694:	sub	r0, r2, #48	; 0x30
   26698:	cmp	r0, #9
   2669c:	bhi	264e0 <__assert_fail@plt+0x13a64>
   266a0:	b	266ec <__assert_fail@plt+0x13c70>
   266a4:	mov	r0, #0
   266a8:	mov	r2, r1
   266ac:	add	r1, r1, #1
   266b0:	str	r1, [r4]
   266b4:	ldrb	r2, [r2]
   266b8:	cmp	r2, #40	; 0x28
   266bc:	beq	266dc <__assert_fail@plt+0x13c60>
   266c0:	cmp	r2, #41	; 0x29
   266c4:	beq	266d4 <__assert_fail@plt+0x13c58>
   266c8:	cmp	r2, #0
   266cc:	bne	266e0 <__assert_fail@plt+0x13c64>
   266d0:	b	27244 <__assert_fail@plt+0x147c8>
   266d4:	sub	r0, r0, #1
   266d8:	b	266e0 <__assert_fail@plt+0x13c64>
   266dc:	add	r0, r0, #1
   266e0:	cmp	r0, #0
   266e4:	bne	266a8 <__assert_fail@plt+0x13c2c>
   266e8:	b	264e0 <__assert_fail@plt+0x13a64>
   266ec:	cmp	r3, #45	; 0x2d
   266f0:	mov	r0, #1
   266f4:	str	r9, [sp, #180]	; 0xb4
   266f8:	mvneq	r0, #0
   266fc:	b	2670c <__assert_fail@plt+0x13c90>
   26700:	mov	r0, #0
   26704:	mov	r2, r3
   26708:	str	r9, [sp, #180]	; 0xb4
   2670c:	mov	r5, #0
   26710:	mov	r3, r1
   26714:	cmn	r5, #1
   26718:	ble	26730 <__assert_fail@plt+0x13cb4>
   2671c:	movw	r6, #52428	; 0xcccc
   26720:	movt	r6, #3276	; 0xccc
   26724:	cmp	r5, r6
   26728:	ble	26744 <__assert_fail@plt+0x13cc8>
   2672c:	b	26a18 <__assert_fail@plt+0x13f9c>
   26730:	beq	26744 <__assert_fail@plt+0x13cc8>
   26734:	mov	r6, #-2147483648	; 0x80000000
   26738:	sdiv	r6, r6, r5
   2673c:	cmp	r6, #10
   26740:	blt	26a18 <__assert_fail@plt+0x13f9c>
   26744:	mvn	r6, #47	; 0x2f
   26748:	cmp	r0, #0
   2674c:	mov	r7, #63	; 0x3f
   26750:	uxtab	r6, r6, r2
   26754:	uxtb	r2, r2
   26758:	rsblt	r6, r2, #48	; 0x30
   2675c:	add	r2, r5, r5, lsl #2
   26760:	add	r5, r6, r2, lsl #1
   26764:	cmp	r5, r2, lsl #1
   26768:	bvs	26ba4 <__assert_fail@plt+0x14128>
   2676c:	ldrb	r2, [r3, #1]!
   26770:	sub	r6, r2, #48	; 0x30
   26774:	cmp	r6, #10
   26778:	bcc	26714 <__assert_fail@plt+0x13c98>
   2677c:	orr	r2, r2, #2
   26780:	cmp	r2, #46	; 0x2e
   26784:	bne	26a24 <__assert_fail@plt+0x13fa8>
   26788:	ldrb	r2, [r3, #1]
   2678c:	sub	r2, r2, #48	; 0x30
   26790:	cmp	r2, #9
   26794:	bhi	26a24 <__assert_fail@plt+0x13fa8>
   26798:	mov	r1, r3
   2679c:	str	ip, [sp, #236]	; 0xec
   267a0:	add	r2, r2, r2, lsl #2
   267a4:	ldrb	r6, [r1, #2]!
   267a8:	sub	r7, r6, #48	; 0x30
   267ac:	mov	r6, #2
   267b0:	cmp	r7, #10
   267b4:	movwcc	r6, #3
   267b8:	addcc	r1, r3, #3
   267bc:	ldrb	r3, [r3, r6]
   267c0:	sub	r3, r3, #48	; 0x30
   267c4:	cmp	r3, #10
   267c8:	str	r3, [sp, #232]	; 0xe8
   267cc:	addcc	r1, r1, #1
   267d0:	mov	r3, r1
   267d4:	ldrb	r6, [r3], #1
   267d8:	sub	r6, r6, #48	; 0x30
   267dc:	cmp	r6, #10
   267e0:	str	r6, [sp, #228]	; 0xe4
   267e4:	movcs	r3, r1
   267e8:	mov	r1, r3
   267ec:	ldrb	r6, [r1], #1
   267f0:	sub	r6, r6, #48	; 0x30
   267f4:	cmp	r6, #10
   267f8:	str	r6, [sp, #224]	; 0xe0
   267fc:	movcs	r1, r3
   26800:	mov	r3, r1
   26804:	ldrb	r6, [r3], #1
   26808:	sub	r9, r6, #48	; 0x30
   2680c:	cmp	r9, #10
   26810:	movcs	r3, r1
   26814:	mov	r1, r3
   26818:	ldrb	r6, [r1], #1
   2681c:	sub	lr, r6, #48	; 0x30
   26820:	cmp	lr, #10
   26824:	movcs	r1, r3
   26828:	mov	r6, r1
   2682c:	ldrb	r3, [r6], #1
   26830:	sub	ip, r3, #48	; 0x30
   26834:	cmp	ip, #10
   26838:	movcs	r6, r1
   2683c:	mov	r1, r6
   26840:	ldrb	r3, [r1], #1
   26844:	sub	r3, r3, #48	; 0x30
   26848:	cmp	r3, #10
   2684c:	movcs	r1, r6
   26850:	lsl	r6, r2, #1
   26854:	cmp	r7, #10
   26858:	addcc	r6, r7, r2, lsl #1
   2685c:	ldr	r7, [sp, #232]	; 0xe8
   26860:	add	r2, r6, r6, lsl #2
   26864:	lsl	r6, r2, #1
   26868:	cmp	r7, #10
   2686c:	addcc	r6, r7, r2, lsl #1
   26870:	ldr	r7, [sp, #228]	; 0xe4
   26874:	add	r2, r6, r6, lsl #2
   26878:	lsl	r6, r2, #1
   2687c:	cmp	r7, #10
   26880:	addcc	r6, r7, r2, lsl #1
   26884:	ldr	r7, [sp, #224]	; 0xe0
   26888:	add	r2, r6, r6, lsl #2
   2688c:	lsl	r6, r2, #1
   26890:	cmp	r7, #10
   26894:	addcc	r6, r7, r2, lsl #1
   26898:	cmp	r9, #10
   2689c:	add	r2, r6, r6, lsl #2
   268a0:	lsl	r6, r2, #1
   268a4:	addcc	r6, r9, r2, lsl #1
   268a8:	cmp	lr, #10
   268ac:	add	r2, r6, r6, lsl #2
   268b0:	lsl	r6, r2, #1
   268b4:	addcc	r6, lr, r2, lsl #1
   268b8:	cmp	ip, #10
   268bc:	add	r2, r6, r6, lsl #2
   268c0:	lsl	r6, r2, #1
   268c4:	addcc	r6, ip, r2, lsl #1
   268c8:	cmp	r3, #10
   268cc:	add	r6, r6, r6, lsl #2
   268d0:	lsl	r2, r6, #1
   268d4:	addcc	r2, r3, r6, lsl #1
   268d8:	cmn	r0, #1
   268dc:	ble	26a78 <__assert_fail@plt+0x13ffc>
   268e0:	ldr	ip, [sp, #236]	; 0xec
   268e4:	mov	r7, #63	; 0x3f
   268e8:	b	26b78 <__assert_fail@plt+0x140fc>
   268ec:	ldr	r7, [sp, #84]	; 0x54
   268f0:	sub	r0, fp, #72	; 0x48
   268f4:	str	ip, [sp, #236]	; 0xec
   268f8:	mvn	ip, #96	; 0x60
   268fc:	str	r9, [sp, #180]	; 0xb4
   26900:	mov	r5, r0
   26904:	cmp	r5, r7
   26908:	strbcc	r3, [r5], #1
   2690c:	ldrcc	r2, [r4]
   26910:	movcs	r2, r1
   26914:	add	r1, r2, #1
   26918:	str	r1, [r4]
   2691c:	ldrb	r3, [r2, #1]
   26920:	mov	r2, #1
   26924:	sub	r6, r3, #65	; 0x41
   26928:	cmp	r6, #26
   2692c:	subcs	r6, r3, #97	; 0x61
   26930:	cmpcs	r6, #26
   26934:	movcs	r2, #0
   26938:	cmp	r3, #46	; 0x2e
   2693c:	beq	26904 <__assert_fail@plt+0x13e88>
   26940:	cmp	r2, #0
   26944:	bne	26904 <__assert_fail@plt+0x13e88>
   26948:	mov	r1, #0
   2694c:	strb	r1, [r5]
   26950:	ldrb	r3, [fp, #-72]	; 0xffffffb8
   26954:	cmp	r3, #0
   26958:	beq	26980 <__assert_fail@plt+0x13f04>
   2695c:	ldr	r1, [sp, #80]	; 0x50
   26960:	uxtab	r2, ip, r3
   26964:	cmp	r2, #26
   26968:	subcc	r3, r3, #32
   2696c:	strb	r3, [r1, #-1]
   26970:	ldrb	r3, [r1]
   26974:	add	r1, r1, #1
   26978:	cmp	r3, #0
   2697c:	bne	26960 <__assert_fail@plt+0x13ee4>
   26980:	movw	r1, #49227	; 0xc04b
   26984:	movt	r1, #4
   26988:	bl	123d4 <strcmp@plt>
   2698c:	movw	r9, #47480	; 0xb978
   26990:	cmp	r0, #0
   26994:	movt	r9, #4
   26998:	beq	26b2c <__assert_fail@plt+0x140b0>
   2699c:	movw	r1, #49230	; 0xc04e
   269a0:	sub	r5, fp, #72	; 0x48
   269a4:	mov	r0, r5
   269a8:	movt	r1, #4
   269ac:	bl	123d4 <strcmp@plt>
   269b0:	cmp	r0, #0
   269b4:	beq	26a58 <__assert_fail@plt+0x13fdc>
   269b8:	movw	r1, #49235	; 0xc053
   269bc:	mov	r0, r5
   269c0:	movt	r1, #4
   269c4:	bl	123d4 <strcmp@plt>
   269c8:	cmp	r0, #0
   269cc:	beq	26a68 <__assert_fail@plt+0x13fec>
   269d0:	movw	r1, #49238	; 0xc056
   269d4:	mov	r0, r5
   269d8:	movt	r1, #4
   269dc:	bl	123d4 <strcmp@plt>
   269e0:	cmp	r0, #0
   269e4:	beq	26ab0 <__assert_fail@plt+0x14034>
   269e8:	mov	r0, r5
   269ec:	bl	12788 <strlen@plt>
   269f0:	mov	r6, r0
   269f4:	cmp	r0, #3
   269f8:	beq	26ac0 <__assert_fail@plt+0x14044>
   269fc:	cmp	r6, #4
   26a00:	bne	26ac8 <__assert_fail@plt+0x1404c>
   26a04:	ldrb	r0, [fp, #-69]	; 0xffffffbb
   26a08:	sub	r0, r0, #46	; 0x2e
   26a0c:	clz	r0, r0
   26a10:	lsr	r5, r0, #5
   26a14:	b	26acc <__assert_fail@plt+0x14050>
   26a18:	ldr	r9, [sp, #180]	; 0xb4
   26a1c:	mov	r7, #63	; 0x3f
   26a20:	b	26ba8 <__assert_fail@plt+0x1412c>
   26a24:	ldr	r9, [sp, #180]	; 0xb4
   26a28:	sub	r1, r3, r1
   26a2c:	cmp	r0, #0
   26a30:	movw	r7, #274	; 0x112
   26a34:	lsr	r0, r0, #31
   26a38:	str	r3, [r4]
   26a3c:	str	r5, [sp, #128]	; 0x80
   26a40:	str	r1, [sp, #136]	; 0x88
   26a44:	asr	r1, r5, #31
   26a48:	movweq	r7, #275	; 0x113
   26a4c:	str	r0, [sp, #160]	; 0xa0
   26a50:	str	r1, [sp, #132]	; 0x84
   26a54:	b	26ba8 <__assert_fail@plt+0x1412c>
   26a58:	movw	r0, #47480	; 0xb978
   26a5c:	movt	r0, #4
   26a60:	add	r9, r0, #12
   26a64:	b	26b2c <__assert_fail@plt+0x140b0>
   26a68:	movw	r0, #47480	; 0xb978
   26a6c:	movt	r0, #4
   26a70:	add	r9, r0, #24
   26a74:	b	26b2c <__assert_fail@plt+0x140b0>
   26a78:	ldrb	r3, [r1]
   26a7c:	ldr	ip, [sp, #236]	; 0xec
   26a80:	mov	r7, #63	; 0x3f
   26a84:	sub	r6, r3, #48	; 0x30
   26a88:	cmp	r6, #9
   26a8c:	bhi	26b78 <__assert_fail@plt+0x140fc>
   26a90:	uxtb	r3, r3
   26a94:	cmp	r3, #48	; 0x30
   26a98:	bne	26b74 <__assert_fail@plt+0x140f8>
   26a9c:	ldrb	r3, [r1, #1]!
   26aa0:	sub	r6, r3, #48	; 0x30
   26aa4:	cmp	r6, #10
   26aa8:	bcc	26a90 <__assert_fail@plt+0x14014>
   26aac:	b	26b78 <__assert_fail@plt+0x140fc>
   26ab0:	movw	r0, #47480	; 0xb978
   26ab4:	movt	r0, #4
   26ab8:	add	r9, r0, #36	; 0x24
   26abc:	b	26b2c <__assert_fail@plt+0x140b0>
   26ac0:	mov	r5, #1
   26ac4:	b	26acc <__assert_fail@plt+0x14050>
   26ac8:	mov	r5, #0
   26acc:	movw	r1, #49243	; 0xc05b
   26ad0:	movw	r9, #47540	; 0xb9b4
   26ad4:	movt	r1, #4
   26ad8:	movt	r9, #4
   26adc:	sub	r0, fp, #72	; 0x48
   26ae0:	cmp	r5, #0
   26ae4:	beq	26afc <__assert_fail@plt+0x14080>
   26ae8:	mov	r2, #3
   26aec:	bl	12a1c <strncmp@plt>
   26af0:	cmp	r0, #0
   26af4:	bne	26b08 <__assert_fail@plt+0x1408c>
   26af8:	b	26b2c <__assert_fail@plt+0x140b0>
   26afc:	bl	123d4 <strcmp@plt>
   26b00:	cmp	r0, #0
   26b04:	beq	26b2c <__assert_fail@plt+0x140b0>
   26b08:	ldr	r1, [r9, #12]!
   26b0c:	cmp	r1, #0
   26b10:	bne	26adc <__assert_fail@plt+0x14060>
   26b14:	mov	r0, r4
   26b18:	sub	r1, fp, #72	; 0x48
   26b1c:	bl	2ad08 <__assert_fail@plt+0x1828c>
   26b20:	mov	r9, r0
   26b24:	cmp	r0, #0
   26b28:	beq	26bf4 <__assert_fail@plt+0x14178>
   26b2c:	ldr	r1, [r9, #8]
   26b30:	ldr	r6, [r9, #4]
   26b34:	asr	r0, r1, #31
   26b38:	str	r1, [sp, #160]	; 0xa0
   26b3c:	str	r0, [sp, #152]	; 0x98
   26b40:	mov	r0, r1
   26b44:	lsr	r0, r1, #8
   26b48:	str	r0, [sp, #148]	; 0x94
   26b4c:	ldr	r9, [sp, #180]	; 0xb4
   26b50:	ldr	ip, [sp, #236]	; 0xec
   26b54:	mov	r7, r6
   26b58:	cmp	r7, #1
   26b5c:	blt	27244 <__assert_fail@plt+0x147c8>
   26b60:	lsr	r1, r7, #1
   26b64:	mov	r0, #2
   26b68:	cmp	r1, #138	; 0x8a
   26b6c:	bhi	2724c <__assert_fail@plt+0x147d0>
   26b70:	b	26ba8 <__assert_fail@plt+0x1412c>
   26b74:	add	r2, r2, #1
   26b78:	sub	r1, r1, #1
   26b7c:	ldrb	r3, [r1, #1]!
   26b80:	sub	r3, r3, #48	; 0x30
   26b84:	cmp	r3, #10
   26b88:	bcc	26b7c <__assert_fail@plt+0x14100>
   26b8c:	cmn	r0, #1
   26b90:	bgt	26bc8 <__assert_fail@plt+0x1414c>
   26b94:	cmp	r2, #0
   26b98:	beq	26bc8 <__assert_fail@plt+0x1414c>
   26b9c:	subs	r3, r5, #1
   26ba0:	bvc	26bb8 <__assert_fail@plt+0x1413c>
   26ba4:	ldr	r9, [sp, #180]	; 0xb4
   26ba8:	movw	r0, #46626	; 0xb622
   26bac:	movt	r0, #4
   26bb0:	ldrb	r0, [r0, r7]
   26bb4:	b	2724c <__assert_fail@plt+0x147d0>
   26bb8:	movw	r5, #51712	; 0xca00
   26bbc:	movt	r5, #15258	; 0x3b9a
   26bc0:	sub	r2, r5, r2
   26bc4:	mov	r5, r3
   26bc8:	str	r2, [sp, #152]	; 0x98
   26bcc:	ldr	r9, [sp, #180]	; 0xb4
   26bd0:	cmp	r0, #0
   26bd4:	mov	r0, r5
   26bd8:	mov	r7, #276	; 0x114
   26bdc:	str	r1, [r4]
   26be0:	str	r5, [sp, #160]	; 0xa0
   26be4:	lsr	r0, r5, #8
   26be8:	movweq	r7, #277	; 0x115
   26bec:	str	r0, [sp, #148]	; 0x94
   26bf0:	b	26ba8 <__assert_fail@plt+0x1412c>
   26bf4:	movw	r1, #49611	; 0xc1cb
   26bf8:	sub	r0, fp, #72	; 0x48
   26bfc:	movt	r1, #4
   26c00:	bl	123d4 <strcmp@plt>
   26c04:	movw	r9, #47840	; 0xbae0
   26c08:	cmp	r0, #0
   26c0c:	movt	r9, #4
   26c10:	beq	26b2c <__assert_fail@plt+0x140b0>
   26c14:	movw	r1, #49615	; 0xc1cf
   26c18:	sub	r0, fp, #72	; 0x48
   26c1c:	movt	r1, #4
   26c20:	bl	123d4 <strcmp@plt>
   26c24:	movw	r9, #47852	; 0xbaec
   26c28:	cmp	r0, #0
   26c2c:	movt	r9, #4
   26c30:	beq	26b2c <__assert_fail@plt+0x140b0>
   26c34:	movw	r1, #49620	; 0xc1d4
   26c38:	sub	r5, fp, #72	; 0x48
   26c3c:	mov	r0, r5
   26c40:	movt	r1, #4
   26c44:	bl	123d4 <strcmp@plt>
   26c48:	movw	r9, #47852	; 0xbaec
   26c4c:	cmp	r0, #0
   26c50:	movt	r9, #4
   26c54:	add	r1, r9, #12
   26c58:	beq	298b0 <__assert_fail@plt+0x16e34>
   26c5c:	str	r1, [sp, #232]	; 0xe8
   26c60:	movw	r1, #49626	; 0xc1da
   26c64:	mov	r0, r5
   26c68:	movt	r1, #4
   26c6c:	bl	123d4 <strcmp@plt>
   26c70:	add	r7, r9, #24
   26c74:	cmp	r0, #0
   26c78:	beq	298b8 <__assert_fail@plt+0x16e3c>
   26c7c:	movw	r1, #49636	; 0xc1e4
   26c80:	mov	r0, r5
   26c84:	movt	r1, #4
   26c88:	bl	123d4 <strcmp@plt>
   26c8c:	add	r1, r9, #36	; 0x24
   26c90:	cmp	r0, #0
   26c94:	beq	298b0 <__assert_fail@plt+0x16e34>
   26c98:	str	r1, [sp, #224]	; 0xe0
   26c9c:	movw	r1, #49401	; 0xc0f9
   26ca0:	mov	r0, r5
   26ca4:	str	r7, [sp, #228]	; 0xe4
   26ca8:	movt	r1, #4
   26cac:	bl	123d4 <strcmp@plt>
   26cb0:	add	r7, r9, #48	; 0x30
   26cb4:	cmp	r0, #0
   26cb8:	beq	298b8 <__assert_fail@plt+0x16e3c>
   26cbc:	movw	r1, #49641	; 0xc1e9
   26cc0:	mov	r0, r5
   26cc4:	movt	r1, #4
   26cc8:	bl	123d4 <strcmp@plt>
   26ccc:	add	r1, r9, #60	; 0x3c
   26cd0:	cmp	r0, #0
   26cd4:	beq	298b0 <__assert_fail@plt+0x16e34>
   26cd8:	str	r1, [sp, #216]	; 0xd8
   26cdc:	movw	r1, #49646	; 0xc1ee
   26ce0:	mov	r0, r5
   26ce4:	str	r7, [sp, #220]	; 0xdc
   26ce8:	movt	r1, #4
   26cec:	bl	123d4 <strcmp@plt>
   26cf0:	add	r7, r9, #72	; 0x48
   26cf4:	cmp	r0, #0
   26cf8:	beq	298b8 <__assert_fail@plt+0x16e3c>
   26cfc:	movw	r1, #49653	; 0xc1f5
   26d00:	mov	r0, r5
   26d04:	movt	r1, #4
   26d08:	bl	123d4 <strcmp@plt>
   26d0c:	add	r1, r9, #84	; 0x54
   26d10:	cmp	r0, #0
   26d14:	beq	298b0 <__assert_fail@plt+0x16e34>
   26d18:	str	r1, [sp, #208]	; 0xd0
   26d1c:	movw	r1, #49657	; 0xc1f9
   26d20:	mov	r0, r5
   26d24:	movt	r1, #4
   26d28:	bl	123d4 <strcmp@plt>
   26d2c:	add	r1, r9, #96	; 0x60
   26d30:	cmp	r0, #0
   26d34:	str	r1, [sp, #212]	; 0xd4
   26d38:	beq	298c0 <__assert_fail@plt+0x16e44>
   26d3c:	movw	r1, #49664	; 0xc200
   26d40:	mov	r0, r5
   26d44:	movt	r1, #4
   26d48:	bl	123d4 <strcmp@plt>
   26d4c:	add	r5, r9, #108	; 0x6c
   26d50:	cmp	r0, #0
   26d54:	beq	298c8 <__assert_fail@plt+0x16e4c>
   26d58:	sub	r1, r6, #1
   26d5c:	sub	r0, fp, #72	; 0x48
   26d60:	ldrb	r0, [r0, r1]
   26d64:	str	r1, [sp, #204]	; 0xcc
   26d68:	cmp	r0, #83	; 0x53
   26d6c:	bne	26ea8 <__assert_fail@plt+0x1442c>
   26d70:	ldr	r2, [sp, #204]	; 0xcc
   26d74:	sub	r0, fp, #72	; 0x48
   26d78:	mov	r1, #0
   26d7c:	strb	r1, [r0, r2]
   26d80:	movw	r1, #49615	; 0xc1cf
   26d84:	movt	r1, #4
   26d88:	bl	123d4 <strcmp@plt>
   26d8c:	movw	r9, #47852	; 0xbaec
   26d90:	cmp	r0, #0
   26d94:	movt	r9, #4
   26d98:	beq	26b2c <__assert_fail@plt+0x140b0>
   26d9c:	movw	r1, #49620	; 0xc1d4
   26da0:	sub	r0, fp, #72	; 0x48
   26da4:	movt	r1, #4
   26da8:	bl	123d4 <strcmp@plt>
   26dac:	ldr	r9, [sp, #232]	; 0xe8
   26db0:	cmp	r0, #0
   26db4:	beq	26b2c <__assert_fail@plt+0x140b0>
   26db8:	movw	r1, #49626	; 0xc1da
   26dbc:	sub	r0, fp, #72	; 0x48
   26dc0:	movt	r1, #4
   26dc4:	bl	123d4 <strcmp@plt>
   26dc8:	ldr	r9, [sp, #228]	; 0xe4
   26dcc:	cmp	r0, #0
   26dd0:	beq	26b2c <__assert_fail@plt+0x140b0>
   26dd4:	movw	r1, #49636	; 0xc1e4
   26dd8:	sub	r0, fp, #72	; 0x48
   26ddc:	movt	r1, #4
   26de0:	bl	123d4 <strcmp@plt>
   26de4:	ldr	r9, [sp, #224]	; 0xe0
   26de8:	cmp	r0, #0
   26dec:	beq	26b2c <__assert_fail@plt+0x140b0>
   26df0:	movw	r1, #49401	; 0xc0f9
   26df4:	sub	r0, fp, #72	; 0x48
   26df8:	movt	r1, #4
   26dfc:	bl	123d4 <strcmp@plt>
   26e00:	ldr	r9, [sp, #220]	; 0xdc
   26e04:	cmp	r0, #0
   26e08:	beq	26b2c <__assert_fail@plt+0x140b0>
   26e0c:	movw	r1, #49641	; 0xc1e9
   26e10:	sub	r0, fp, #72	; 0x48
   26e14:	movt	r1, #4
   26e18:	bl	123d4 <strcmp@plt>
   26e1c:	ldr	r9, [sp, #216]	; 0xd8
   26e20:	cmp	r0, #0
   26e24:	beq	26b2c <__assert_fail@plt+0x140b0>
   26e28:	movw	r1, #49646	; 0xc1ee
   26e2c:	sub	r0, fp, #72	; 0x48
   26e30:	movt	r1, #4
   26e34:	bl	123d4 <strcmp@plt>
   26e38:	cmp	r0, #0
   26e3c:	mov	r9, r7
   26e40:	beq	26b2c <__assert_fail@plt+0x140b0>
   26e44:	movw	r1, #49653	; 0xc1f5
   26e48:	sub	r0, fp, #72	; 0x48
   26e4c:	movt	r1, #4
   26e50:	bl	123d4 <strcmp@plt>
   26e54:	ldr	r9, [sp, #208]	; 0xd0
   26e58:	cmp	r0, #0
   26e5c:	beq	26b2c <__assert_fail@plt+0x140b0>
   26e60:	movw	r1, #49657	; 0xc1f9
   26e64:	sub	r0, fp, #72	; 0x48
   26e68:	movt	r1, #4
   26e6c:	bl	123d4 <strcmp@plt>
   26e70:	ldr	r9, [sp, #212]	; 0xd4
   26e74:	cmp	r0, #0
   26e78:	beq	26b2c <__assert_fail@plt+0x140b0>
   26e7c:	movw	r1, #49664	; 0xc200
   26e80:	sub	r0, fp, #72	; 0x48
   26e84:	movt	r1, #4
   26e88:	bl	123d4 <strcmp@plt>
   26e8c:	cmp	r0, #0
   26e90:	mov	r9, r5
   26e94:	beq	26b2c <__assert_fail@plt+0x140b0>
   26e98:	ldr	r2, [sp, #204]	; 0xcc
   26e9c:	sub	r0, fp, #72	; 0x48
   26ea0:	mov	r1, #83	; 0x53
   26ea4:	strb	r1, [r0, r2]
   26ea8:	movw	r1, #49668	; 0xc204
   26eac:	sub	r0, fp, #72	; 0x48
   26eb0:	movt	r1, #4
   26eb4:	bl	123d4 <strcmp@plt>
   26eb8:	movw	r9, #47984	; 0xbb70
   26ebc:	cmp	r0, #0
   26ec0:	movt	r9, #4
   26ec4:	beq	26b2c <__assert_fail@plt+0x140b0>
   26ec8:	movw	r1, #49677	; 0xc20d
   26ecc:	sub	r0, fp, #72	; 0x48
   26ed0:	movt	r1, #4
   26ed4:	bl	123d4 <strcmp@plt>
   26ed8:	cmp	r0, #0
   26edc:	beq	298d0 <__assert_fail@plt+0x16e54>
   26ee0:	movw	r1, #49687	; 0xc217
   26ee4:	sub	r0, fp, #72	; 0x48
   26ee8:	movt	r1, #4
   26eec:	bl	123d4 <strcmp@plt>
   26ef0:	cmp	r0, #0
   26ef4:	beq	298dc <__assert_fail@plt+0x16e60>
   26ef8:	movw	r1, #49693	; 0xc21d
   26efc:	sub	r0, fp, #72	; 0x48
   26f00:	movt	r1, #4
   26f04:	bl	123d4 <strcmp@plt>
   26f08:	cmp	r0, #0
   26f0c:	beq	298ec <__assert_fail@plt+0x16e70>
   26f10:	movw	r1, #49697	; 0xc221
   26f14:	sub	r0, fp, #72	; 0x48
   26f18:	movt	r1, #4
   26f1c:	bl	123d4 <strcmp@plt>
   26f20:	cmp	r0, #0
   26f24:	beq	298fc <__assert_fail@plt+0x16e80>
   26f28:	movw	r1, #49702	; 0xc226
   26f2c:	sub	r0, fp, #72	; 0x48
   26f30:	movt	r1, #4
   26f34:	bl	123d4 <strcmp@plt>
   26f38:	cmp	r0, #0
   26f3c:	beq	2990c <__assert_fail@plt+0x16e90>
   26f40:	movw	r1, #49707	; 0xc22b
   26f44:	sub	r0, fp, #72	; 0x48
   26f48:	movt	r1, #4
   26f4c:	bl	123d4 <strcmp@plt>
   26f50:	cmp	r0, #0
   26f54:	beq	2991c <__assert_fail@plt+0x16ea0>
   26f58:	movw	r1, #49712	; 0xc230
   26f5c:	sub	r0, fp, #72	; 0x48
   26f60:	movt	r1, #4
   26f64:	bl	123d4 <strcmp@plt>
   26f68:	cmp	r0, #0
   26f6c:	beq	2992c <__assert_fail@plt+0x16eb0>
   26f70:	movw	r1, #49718	; 0xc236
   26f74:	sub	r0, fp, #72	; 0x48
   26f78:	movt	r1, #4
   26f7c:	bl	123d4 <strcmp@plt>
   26f80:	cmp	r0, #0
   26f84:	beq	2993c <__assert_fail@plt+0x16ec0>
   26f88:	movw	r1, #49724	; 0xc23c
   26f8c:	sub	r0, fp, #72	; 0x48
   26f90:	movt	r1, #4
   26f94:	bl	123d4 <strcmp@plt>
   26f98:	cmp	r0, #0
   26f9c:	beq	2994c <__assert_fail@plt+0x16ed0>
   26fa0:	movw	r1, #49731	; 0xc243
   26fa4:	sub	r0, fp, #72	; 0x48
   26fa8:	movt	r1, #4
   26fac:	bl	123d4 <strcmp@plt>
   26fb0:	cmp	r0, #0
   26fb4:	beq	2995c <__assert_fail@plt+0x16ee0>
   26fb8:	movw	r1, #49737	; 0xc249
   26fbc:	sub	r0, fp, #72	; 0x48
   26fc0:	movt	r1, #4
   26fc4:	bl	123d4 <strcmp@plt>
   26fc8:	cmp	r0, #0
   26fcc:	beq	2996c <__assert_fail@plt+0x16ef0>
   26fd0:	movw	r1, #49743	; 0xc24f
   26fd4:	sub	r0, fp, #72	; 0x48
   26fd8:	movt	r1, #4
   26fdc:	bl	123d4 <strcmp@plt>
   26fe0:	cmp	r0, #0
   26fe4:	beq	2997c <__assert_fail@plt+0x16f00>
   26fe8:	movw	r1, #49751	; 0xc257
   26fec:	sub	r0, fp, #72	; 0x48
   26ff0:	movt	r1, #4
   26ff4:	bl	123d4 <strcmp@plt>
   26ff8:	cmp	r0, #0
   26ffc:	beq	2998c <__assert_fail@plt+0x16f10>
   27000:	movw	r1, #49758	; 0xc25e
   27004:	sub	r0, fp, #72	; 0x48
   27008:	movt	r1, #4
   2700c:	bl	123d4 <strcmp@plt>
   27010:	cmp	r0, #0
   27014:	beq	2999c <__assert_fail@plt+0x16f20>
   27018:	movw	r1, #49764	; 0xc264
   2701c:	sub	r0, fp, #72	; 0x48
   27020:	movt	r1, #4
   27024:	bl	123d4 <strcmp@plt>
   27028:	cmp	r0, #0
   2702c:	beq	299ac <__assert_fail@plt+0x16f30>
   27030:	movw	r1, #49770	; 0xc26a
   27034:	sub	r0, fp, #72	; 0x48
   27038:	movt	r1, #4
   2703c:	bl	123d4 <strcmp@plt>
   27040:	cmp	r0, #0
   27044:	beq	299bc <__assert_fail@plt+0x16f40>
   27048:	movw	r1, #49779	; 0xc273
   2704c:	sub	r0, fp, #72	; 0x48
   27050:	movt	r1, #4
   27054:	bl	123d4 <strcmp@plt>
   27058:	cmp	r0, #0
   2705c:	beq	299cc <__assert_fail@plt+0x16f50>
   27060:	movw	r1, #49787	; 0xc27b
   27064:	sub	r0, fp, #72	; 0x48
   27068:	movt	r1, #4
   2706c:	bl	123d4 <strcmp@plt>
   27070:	cmp	r0, #0
   27074:	beq	299dc <__assert_fail@plt+0x16f60>
   27078:	movw	r1, #49791	; 0xc27f
   2707c:	sub	r0, fp, #72	; 0x48
   27080:	movt	r1, #4
   27084:	bl	123d4 <strcmp@plt>
   27088:	cmp	r0, #0
   2708c:	beq	299ec <__assert_fail@plt+0x16f70>
   27090:	ldrb	r0, [fp, #-72]	; 0xffffffb8
   27094:	cmp	r6, #1
   27098:	bne	299fc <__assert_fail@plt+0x16f80>
   2709c:	cmp	r0, #90	; 0x5a
   270a0:	bhi	29a04 <__assert_fail@plt+0x16f88>
   270a4:	movw	r9, #48236	; 0xbc6c
   270a8:	add	r1, pc, #8
   270ac:	mov	r6, #63	; 0x3f
   270b0:	movt	r9, #4
   270b4:	ldr	pc, [r1, r0, lsl #2]
   270b8:	andeq	r6, r2, ip, asr #22
   270bc:	andeq	r9, r2, r4, lsl #20
   270c0:	andeq	r9, r2, r4, lsl #20
   270c4:	andeq	r9, r2, r4, lsl #20
   270c8:	andeq	r9, r2, r4, lsl #20
   270cc:	andeq	r9, r2, r4, lsl #20
   270d0:	andeq	r9, r2, r4, lsl #20
   270d4:	andeq	r9, r2, r4, lsl #20
   270d8:	andeq	r9, r2, r4, lsl #20
   270dc:	andeq	r9, r2, r4, lsl #20
   270e0:	andeq	r9, r2, r4, lsl #20
   270e4:	andeq	r9, r2, r4, lsl #20
   270e8:	andeq	r9, r2, r4, lsl #20
   270ec:	andeq	r9, r2, r4, lsl #20
   270f0:	andeq	r9, r2, r4, lsl #20
   270f4:	andeq	r9, r2, r4, lsl #20
   270f8:	andeq	r9, r2, r4, lsl #20
   270fc:	andeq	r9, r2, r4, lsl #20
   27100:	andeq	r9, r2, r4, lsl #20
   27104:	andeq	r9, r2, r4, lsl #20
   27108:	andeq	r9, r2, r4, lsl #20
   2710c:	andeq	r9, r2, r4, lsl #20
   27110:	andeq	r9, r2, r4, lsl #20
   27114:	andeq	r9, r2, r4, lsl #20
   27118:	andeq	r9, r2, r4, lsl #20
   2711c:	andeq	r9, r2, r4, lsl #20
   27120:	andeq	r9, r2, r4, lsl #20
   27124:	andeq	r9, r2, r4, lsl #20
   27128:	andeq	r9, r2, r4, lsl #20
   2712c:	andeq	r9, r2, r4, lsl #20
   27130:	andeq	r9, r2, r4, lsl #20
   27134:	andeq	r9, r2, r4, lsl #20
   27138:	andeq	r9, r2, r4, lsl #20
   2713c:	andeq	r9, r2, r4, lsl #20
   27140:	andeq	r9, r2, r4, lsl #20
   27144:	andeq	r9, r2, r4, lsl #20
   27148:	andeq	r9, r2, r4, lsl #20
   2714c:	andeq	r9, r2, r4, lsl #20
   27150:	andeq	r9, r2, r4, lsl #20
   27154:	andeq	r9, r2, r4, lsl #20
   27158:	andeq	r9, r2, r4, lsl #20
   2715c:	andeq	r9, r2, r4, lsl #20
   27160:	andeq	r9, r2, r4, lsl #20
   27164:	andeq	r9, r2, r4, lsl #20
   27168:	andeq	r9, r2, r4, lsl #20
   2716c:	andeq	r9, r2, r4, lsl #20
   27170:	andeq	r9, r2, r4, lsl #20
   27174:	andeq	r9, r2, r4, lsl #20
   27178:	andeq	r9, r2, r4, lsl #20
   2717c:	andeq	r9, r2, r4, lsl #20
   27180:	andeq	r9, r2, r4, lsl #20
   27184:	andeq	r9, r2, r4, lsl #20
   27188:	andeq	r9, r2, r4, lsl #20
   2718c:	andeq	r9, r2, r4, lsl #20
   27190:	andeq	r9, r2, r4, lsl #20
   27194:	andeq	r9, r2, r4, lsl #20
   27198:	andeq	r9, r2, r4, lsl #20
   2719c:	andeq	r9, r2, r4, lsl #20
   271a0:	andeq	r9, r2, r4, lsl #20
   271a4:	andeq	r9, r2, r4, lsl #20
   271a8:	andeq	r9, r2, r4, lsl #20
   271ac:	andeq	r9, r2, r4, lsl #20
   271b0:	andeq	r9, r2, r4, lsl #20
   271b4:	andeq	r9, r2, r4, lsl #20
   271b8:	andeq	r9, r2, r4, lsl #20
   271bc:	andeq	r6, r2, ip, lsr #22
   271c0:	andeq	r7, r2, r4, lsr #4
   271c4:	muleq	r2, r0, sl
   271c8:	andeq	r9, r2, r0, lsr #21
   271cc:			; <UNDEFINED> instruction: 0x00029ab0
   271d0:	andeq	r9, r2, r0, asr #21
   271d4:	ldrdeq	r9, [r2], -r0
   271d8:	andeq	r9, r2, r0, ror #21
   271dc:	strdeq	r9, [r2], -r0
   271e0:	andeq	r9, r2, r4, lsl #20
   271e4:	andeq	r9, r2, r0, lsl #22
   271e8:	andeq	r9, r2, r0, lsl fp
   271ec:	andeq	r9, r2, r0, lsr #22
   271f0:	andeq	r9, r2, r0, lsr fp
   271f4:	andeq	r9, r2, r0, asr #22
   271f8:	andeq	r9, r2, r0, asr fp
   271fc:	andeq	r9, r2, r0, ror #22
   27200:	andeq	r9, r2, r0, ror fp
   27204:	andeq	r9, r2, r0, lsl #23
   27208:	muleq	r2, r0, fp
   2720c:	andeq	r9, r2, r0, lsr #23
   27210:			; <UNDEFINED> instruction: 0x00029bb0
   27214:	andeq	r9, r2, r0, asr #23
   27218:	ldrdeq	r9, [r2], -r0
   2721c:	andeq	r9, r2, r0, ror #23
   27220:	strdeq	r9, [r2], -r0
   27224:	movw	r0, #48236	; 0xbc6c
   27228:	movt	r0, #4
   2722c:	b	26a60 <__assert_fail@plt+0x13fe4>
   27230:	add	r0, r1, #1
   27234:	str	r0, [r4]
   27238:	ldrb	r7, [r1]
   2723c:	cmp	r7, #1
   27240:	bge	26b60 <__assert_fail@plt+0x140e4>
   27244:	mov	r0, #0
   27248:	mov	r7, #0
   2724c:	add	r1, r0, ip
   27250:	cmp	r1, #112	; 0x70
   27254:	bhi	27290 <__assert_fail@plt+0x14814>
   27258:	movw	r2, #46904	; 0xb738
   2725c:	movt	r2, #4
   27260:	add	r2, r2, r1
   27264:	ldrsb	r2, [r2]
   27268:	cmp	r0, r2
   2726c:	bne	27290 <__assert_fail@plt+0x14814>
   27270:	movw	r0, #47017	; 0xb7a9
   27274:	movt	r0, #4
   27278:	ldrb	r8, [r0, r1]
   2727c:	orr	r0, r1, #4
   27280:	cmp	r0, #111	; 0x6f
   27284:	bne	277cc <__assert_fail@plt+0x14d50>
   27288:	rsb	r5, r8, #0
   2728c:	b	272a4 <__assert_fail@plt+0x14828>
   27290:	movw	r0, #47130	; 0xb81a
   27294:	movt	r0, #4
   27298:	ldrb	r5, [r0, r8]
   2729c:	cmp	r5, #0
   272a0:	beq	29c08 <__assert_fail@plt+0x1718c>
   272a4:	movw	r0, #47244	; 0xb88c
   272a8:	str	r7, [sp, #204]	; 0xcc
   272ac:	mov	r1, sl
   272b0:	movt	r0, #4
   272b4:	ldrb	r7, [r0, r5]
   272b8:	rsb	r0, r7, #1
   272bc:	rsb	r0, r0, r0, lsl #3
   272c0:	ldr	r0, [r1, r0, lsl #3]!
   272c4:	str	r0, [sp, #236]	; 0xec
   272c8:	ldr	r0, [r1, #44]	; 0x2c
   272cc:	add	lr, r1, #8
   272d0:	str	r0, [sp, #212]	; 0xd4
   272d4:	ldr	r0, [r1, #40]	; 0x28
   272d8:	str	r0, [sp, #220]	; 0xdc
   272dc:	ldr	r0, [r1, #36]	; 0x24
   272e0:	str	r0, [sp, #216]	; 0xd8
   272e4:	ldr	r0, [r1, #4]
   272e8:	str	r0, [sp, #232]	; 0xe8
   272ec:	ldm	lr, {r8, ip, lr}
   272f0:	ldr	r0, [r1, #28]
   272f4:	ldr	r6, [r1, #52]	; 0x34
   272f8:	ldr	r3, [r1, #20]
   272fc:	ldr	r2, [r1, #24]
   27300:	str	r0, [sp, #228]	; 0xe4
   27304:	ldr	r0, [r1, #32]
   27308:	ldr	r1, [r1, #48]	; 0x30
   2730c:	str	r6, [sp, #200]	; 0xc8
   27310:	str	r0, [sp, #224]	; 0xe0
   27314:	sub	r0, r5, #4
   27318:	str	r1, [sp, #208]	; 0xd0
   2731c:	cmp	r0, #87	; 0x57
   27320:	bhi	28940 <__assert_fail@plt+0x15ec4>
   27324:	add	r1, pc, #0
   27328:	ldr	pc, [r1, r0, lsl #2]
   2732c:	strdeq	r8, [r2], -r4
   27330:	andeq	r8, r2, r0, asr #18
   27334:	andeq	r8, r2, r0, asr #18
   27338:	andeq	r8, r2, ip, lsl r5
   2733c:	andeq	r8, r2, ip, lsl #8
   27340:	andeq	r8, r2, r8, ror r6
   27344:	muleq	r2, r8, r6
   27348:	andeq	r8, r2, ip, ror r4
   2734c:	andeq	r8, r2, r0, asr #10
   27350:	andeq	r8, r2, r8, asr r5
   27354:	andeq	r8, r2, r8, lsr r7
   27358:	andeq	r8, r2, ip, ror #13
   2735c:	andeq	r8, r2, r0, asr #18
   27360:	andeq	r8, r2, r0, asr #18
   27364:	andeq	r7, r2, ip, ror #30
   27368:	muleq	r2, r4, r4
   2736c:	muleq	r2, r4, r3
   27370:	andeq	r8, r2, r0, asr #18
   27374:	muleq	r2, ip, lr
   27378:	andeq	r8, r2, r4, ror #10
   2737c:	strdeq	r8, [r2], -ip
   27380:	andeq	r8, r2, r0, asr #18
   27384:	andeq	r8, r2, r0, asr #18
   27388:	andeq	r8, r2, r0, lsr #15
   2738c:	andeq	r8, r2, r0, ror r7
   27390:	andeq	r7, r2, r4, ror #28
   27394:	andeq	r8, r2, r0, lsl #8
   27398:	andeq	r8, r2, r4, lsr #17
   2739c:	andeq	r7, r2, ip, ror lr
   273a0:	andeq	r8, r2, ip
   273a4:	andeq	r7, r2, r8, asr #29
   273a8:	andeq	r8, r2, r4, ror #9
   273ac:	andeq	r7, r2, r0, asr #29
   273b0:	andeq	r8, r2, r0, ror #22
   273b4:	andeq	r8, r2, ip, ror fp
   273b8:	andeq	r8, r2, r4
   273bc:	andeq	r8, r2, r4, lsr #8
   273c0:	muleq	r2, r0, r6
   273c4:	andeq	r8, r2, ip, asr #8
   273c8:	andeq	r8, r2, r4, lsr #23
   273cc:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   273d0:	andeq	r8, r2, ip, ror r7
   273d4:	muleq	r2, r8, fp
   273d8:	andeq	r7, r2, r8, lsr lr
   273dc:			; <UNDEFINED> instruction: 0x000286b0
   273e0:	andeq	r8, r2, r0, asr #18
   273e4:	andeq	r7, r2, r4, asr #27
   273e8:	andeq	r7, r2, ip, asr sl
   273ec:	andeq	r7, r2, ip, lsl #9
   273f0:	andeq	r7, r2, ip, lsl #9
   273f4:	andeq	r8, r2, r0, asr r8
   273f8:	andeq	r7, r2, ip, lsr #16
   273fc:	andeq	r8, r2, ip, lsr #11
   27400:	andeq	r8, r2, ip, asr #13
   27404:	andeq	r7, r2, ip, lsr r8
   27408:	andeq	r7, r2, r0, asr sl
   2740c:	andeq	r7, r2, r0, lsr #20
   27410:	andeq	r7, r2, r4, asr #17
   27414:	andeq	r7, r2, ip, lsl #17
   27418:	andeq	r8, r2, r8, lsl #14
   2741c:	andeq	r7, r2, r0, lsr #17
   27420:	andeq	r8, r2, r8, asr #22
   27424:	strdeq	r8, [r2], -r0
   27428:	andeq	r7, r2, r4, lsr #16
   2742c:	andeq	r8, r2, ip, lsr #24
   27430:			; <UNDEFINED> instruction: 0x000288b4
   27434:	andeq	r7, r2, r4, lsr r8
   27438:	andeq	r7, r2, r8, asr #16
   2743c:	andeq	r7, r2, r8, asr #16
   27440:	strdeq	r8, [r2], -r4
   27444:	andeq	r8, r2, r0, asr #18
   27448:	andeq	r7, r2, ip, lsr #16
   2744c:	andeq	r7, r2, ip, lsr r8
   27450:	andeq	r7, r2, r4, asr #17
   27454:	andeq	r7, r2, r0, lsr #17
   27458:	andeq	r7, r2, r4, lsr #16
   2745c:	andeq	r7, r2, r4, lsr r8
   27460:	andeq	r7, r2, ip, lsl #17
   27464:	andeq	r8, r2, r0, asr #18
   27468:	andeq	r8, r2, r0, asr #18
   2746c:	andeq	r8, r2, r0, asr #18
   27470:	andeq	r7, r2, ip, lsr #17
   27474:	andeq	r8, r2, r0, asr #18
   27478:	andeq	r7, r2, ip, lsr #17
   2747c:	andeq	r8, r2, r0, lsr sl
   27480:	andeq	r7, r2, r4, lsr #18
   27484:	andeq	r7, r2, r4, asr lr
   27488:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   2748c:	add	r0, sp, #172	; 0xac
   27490:	str	r2, [sp, #196]	; 0xc4
   27494:	str	r3, [sp, #192]	; 0xc0
   27498:	str	ip, [sp, #188]	; 0xbc
   2749c:	str	r8, [sp, #156]	; 0x9c
   274a0:	stm	r0, {r5, r7, r9, lr}
   274a4:	ldr	r1, [r4, #144]	; 0x90
   274a8:	ldr	r0, [sl, #48]	; 0x30
   274ac:	ldr	r8, [sl, #4]
   274b0:	ldr	r6, [sl, #12]
   274b4:	ldr	lr, [sl, #20]
   274b8:	ldr	ip, [sl, #28]
   274bc:	ldr	r3, [sl, #36]	; 0x24
   274c0:	ldr	r9, [sl, #32]
   274c4:	ldr	r2, [sl, #40]	; 0x28
   274c8:	add	r0, r1, r0
   274cc:	str	r1, [sp, #72]	; 0x48
   274d0:	ldr	r1, [sl]
   274d4:	str	r8, [sp, #64]	; 0x40
   274d8:	str	r6, [sp, #56]	; 0x38
   274dc:	str	lr, [sp, #44]	; 0x2c
   274e0:	str	ip, [sp, #32]
   274e4:	str	r3, [sp, #24]
   274e8:	str	r0, [sp, #68]	; 0x44
   274ec:	str	r1, [sp, #60]	; 0x3c
   274f0:	ldr	r1, [sl, #8]
   274f4:	str	r1, [sp, #52]	; 0x34
   274f8:	ldr	r1, [sl, #16]
   274fc:	str	r1, [sp, #48]	; 0x30
   27500:	ldr	r1, [sl, #24]
   27504:	str	r1, [sp, #40]	; 0x28
   27508:	ldr	r1, [sl, #44]	; 0x2c
   2750c:	str	r0, [r4, #144]	; 0x90
   27510:	ldr	r0, [sp, #104]	; 0x68
   27514:	str	r1, [sp, #16]
   27518:	ldm	r0, {r5, r7}
   2751c:	adds	r2, r5, r2
   27520:	adc	r5, r7, r1
   27524:	stm	r0, {r2, r5}
   27528:	ldr	r2, [sp, #108]	; 0x6c
   2752c:	ldrd	r0, [r2]
   27530:	adds	r0, r0, r9
   27534:	str	r1, [sp, #12]
   27538:	adc	r9, r1, r3
   2753c:	stm	r2, {r0, r9}
   27540:	ldr	r0, [sp, #112]	; 0x70
   27544:	ldr	r2, [r0]
   27548:	ldr	r1, [r0, #4]
   2754c:	ldr	r3, [sp, #40]	; 0x28
   27550:	adds	r3, r2, r3
   27554:	str	r1, [sp, #20]
   27558:	adc	r2, r1, ip
   2755c:	str	r3, [r0]
   27560:	str	r2, [r0, #4]
   27564:	ldr	r0, [sp, #116]	; 0x74
   27568:	ldr	ip, [r0]
   2756c:	ldr	r1, [r0, #4]
   27570:	ldr	r3, [sp, #48]	; 0x30
   27574:	adds	ip, ip, r3
   27578:	str	r1, [sp, #28]
   2757c:	adc	r1, r1, lr
   27580:	mov	lr, #0
   27584:	str	r1, [sp, #36]	; 0x24
   27588:	str	ip, [r0]
   2758c:	str	r1, [r0, #4]
   27590:	ldr	ip, [sp, #120]	; 0x78
   27594:	ldr	r3, [sp, #52]	; 0x34
   27598:	ldrd	r0, [ip]
   2759c:	adds	r0, r0, r3
   275a0:	str	r1, [sp, #40]	; 0x28
   275a4:	adc	r1, r1, r6
   275a8:	str	r1, [sp, #48]	; 0x30
   275ac:	strd	r0, [ip]
   275b0:	ldr	ip, [sp, #124]	; 0x7c
   275b4:	ldr	r3, [sp, #60]	; 0x3c
   275b8:	ldrd	r0, [ip]
   275bc:	adds	r0, r0, r3
   275c0:	str	r1, [sp, #52]	; 0x34
   275c4:	adc	r3, r1, r8
   275c8:	cmn	r7, #1
   275cc:	mov	r1, #0
   275d0:	mov	r7, #0
   275d4:	mov	r8, #0
   275d8:	str	r3, [sp, #60]	; 0x3c
   275dc:	stm	ip, {r0, r3}
   275e0:	mov	r3, #0
   275e4:	mov	r0, #0
   275e8:	mov	ip, #0
   275ec:	movwgt	r3, #1
   275f0:	cmn	r5, #1
   275f4:	mov	r5, #0
   275f8:	movwgt	r0, #1
   275fc:	str	r3, [sp, #8]
   27600:	subs	r0, r3, r0
   27604:	ldr	r3, [sp, #68]	; 0x44
   27608:	movwne	r0, #1
   2760c:	str	r0, [sp, #4]
   27610:	ldr	r0, [sp, #16]
   27614:	cmn	r0, #1
   27618:	mov	r0, #0
   2761c:	movwgt	r0, #1
   27620:	str	r0, [sp, #16]
   27624:	ldr	r0, [sp, #12]
   27628:	cmn	r0, #1
   2762c:	mov	r0, #0
   27630:	movwgt	r1, #1
   27634:	cmn	r9, #1
   27638:	mov	r9, #0
   2763c:	movwgt	r0, #1
   27640:	str	r1, [sp, #12]
   27644:	subs	r0, r1, r0
   27648:	mov	r1, #0
   2764c:	movwne	r0, #1
   27650:	str	r0, [sp]
   27654:	ldr	r0, [sp, #24]
   27658:	cmn	r0, #1
   2765c:	mov	r0, #0
   27660:	movwgt	r0, #1
   27664:	str	r0, [sp, #24]
   27668:	ldr	r0, [sp, #20]
   2766c:	cmn	r0, #1
   27670:	mov	r0, #0
   27674:	movwgt	r7, #1
   27678:	cmn	r2, #1
   2767c:	mov	r2, #0
   27680:	movwgt	r0, #1
   27684:	subs	r0, r7, r0
   27688:	movwne	r0, #1
   2768c:	str	r0, [sp, #20]
   27690:	ldr	r0, [sp, #32]
   27694:	cmn	r0, #1
   27698:	ldr	r0, [sp, #28]
   2769c:	movwgt	lr, #1
   276a0:	cmn	r0, #1
   276a4:	ldr	r0, [sp, #36]	; 0x24
   276a8:	movwgt	r9, #1
   276ac:	cmn	r0, #1
   276b0:	mov	r0, #0
   276b4:	movwgt	r0, #1
   276b8:	subs	r0, r9, r0
   276bc:	movwne	r0, #1
   276c0:	str	r0, [sp, #36]	; 0x24
   276c4:	ldr	r0, [sp, #44]	; 0x2c
   276c8:	cmn	r0, #1
   276cc:	ldr	r0, [sp, #40]	; 0x28
   276d0:	movwgt	ip, #1
   276d4:	cmn	r0, #1
   276d8:	ldr	r0, [sp, #48]	; 0x30
   276dc:	movwgt	r8, #1
   276e0:	cmn	r0, #1
   276e4:	ldr	r0, [sp, #56]	; 0x38
   276e8:	movwgt	r1, #1
   276ec:	subs	r6, r8, r1
   276f0:	mov	r1, #0
   276f4:	movwne	r6, #1
   276f8:	cmn	r0, #1
   276fc:	ldr	r0, [sp, #52]	; 0x34
   27700:	movwgt	r2, #1
   27704:	cmn	r0, #1
   27708:	ldr	r0, [sp, #60]	; 0x3c
   2770c:	movwgt	r5, #1
   27710:	cmn	r0, #1
   27714:	ldr	r0, [sp, #64]	; 0x40
   27718:	movwgt	r1, #1
   2771c:	subs	r1, r5, r1
   27720:	movwne	r1, #1
   27724:	cmn	r0, #1
   27728:	mov	r0, #0
   2772c:	movwgt	r0, #1
   27730:	str	r0, [sp, #64]	; 0x40
   27734:	ldr	r0, [sp, #72]	; 0x48
   27738:	cmp	r3, r0
   2773c:	bvs	29c08 <__assert_fail@plt+0x1718c>
   27740:	ldr	r0, [sp, #8]
   27744:	ldr	r3, [sp, #16]
   27748:	sub	r0, r0, r3
   2774c:	ldr	r3, [sp, #4]
   27750:	clz	r0, r0
   27754:	lsr	r0, r0, #5
   27758:	ands	r0, r0, r3
   2775c:	bne	29c08 <__assert_fail@plt+0x1718c>
   27760:	ldr	r0, [sp, #12]
   27764:	ldr	r3, [sp, #24]
   27768:	sub	r0, r0, r3
   2776c:	ldr	r3, [sp]
   27770:	clz	r0, r0
   27774:	lsr	r0, r0, #5
   27778:	ands	r0, r0, r3
   2777c:	bne	29c08 <__assert_fail@plt+0x1718c>
   27780:	ldr	r3, [sp, #20]
   27784:	sub	r0, r7, lr
   27788:	clz	r0, r0
   2778c:	lsr	r0, r0, #5
   27790:	ands	r0, r0, r3
   27794:	bne	29c08 <__assert_fail@plt+0x1718c>
   27798:	ldr	r3, [sp, #36]	; 0x24
   2779c:	sub	r0, r9, ip
   277a0:	clz	r0, r0
   277a4:	lsr	r0, r0, #5
   277a8:	ands	r0, r0, r3
   277ac:	bne	29c08 <__assert_fail@plt+0x1718c>
   277b0:	sub	r0, r8, r2
   277b4:	clz	r0, r0
   277b8:	lsr	r0, r0, #5
   277bc:	ands	r0, r0, r6
   277c0:	bne	29c08 <__assert_fail@plt+0x1718c>
   277c4:	ldr	r0, [sp, #64]	; 0x40
   277c8:	b	27d98 <__assert_fail@plt+0x1531c>
   277cc:	ldr	r0, [sp, #160]	; 0xa0
   277d0:	ldr	r1, [sp, #148]	; 0x94
   277d4:	mvn	r7, #1
   277d8:	uxtb	r0, r0
   277dc:	orr	r0, r0, r1, lsl #8
   277e0:	str	r0, [sl, #56]!	; 0x38
   277e4:	ldr	r0, [sp, #152]	; 0x98
   277e8:	str	r0, [sl, #4]
   277ec:	ldr	r0, [sp, #128]	; 0x80
   277f0:	str	r0, [sl, #8]
   277f4:	ldr	r0, [sp, #132]	; 0x84
   277f8:	str	r0, [sl, #12]
   277fc:	ldr	r0, [sp, #136]	; 0x88
   27800:	str	r0, [sl, #16]
   27804:	mov	r0, #0
   27808:	str	r0, [sl, #52]	; 0x34
   2780c:	add	r0, sl, #36	; 0x24
   27810:	vst1.32	{d8-d9}, [r0]
   27814:	add	r0, sl, #20
   27818:	vst1.32	{d8-d9}, [r0]
   2781c:	mov	r0, r9
   27820:	b	28a14 <__assert_fail@plt+0x15f98>
   27824:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   27828:	b	288f4 <__assert_fail@plt+0x15e78>
   2782c:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   27830:	b	28854 <__assert_fail@plt+0x15dd8>
   27834:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   27838:	b	288b8 <__assert_fail@plt+0x15e3c>
   2783c:	ldr	r8, [sl, #-48]	; 0xffffffd0
   27840:	ldr	ip, [sl, #-44]	; 0xffffffd4
   27844:	b	286d4 <__assert_fail@plt+0x15c58>
   27848:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   2784c:	mov	r8, #0
   27850:	mov	ip, #0
   27854:	mov	lr, #0
   27858:	mov	r3, #0
   2785c:	mov	r2, #0
   27860:	str	r0, [sp, #220]	; 0xdc
   27864:	asr	r0, r0, #31
   27868:	str	r1, [sp, #208]	; 0xd0
   2786c:	str	r0, [sp, #212]	; 0xd4
   27870:	mov	r0, #0
   27874:	str	r0, [sp, #228]	; 0xe4
   27878:	mov	r0, #0
   2787c:	str	r0, [sp, #224]	; 0xe0
   27880:	mov	r0, #0
   27884:	str	r0, [sp, #216]	; 0xd8
   27888:	b	28930 <__assert_fail@plt+0x15eb4>
   2788c:	ldr	lr, [sl]
   27890:	ldr	r3, [sl, #4]
   27894:	mov	r8, #0
   27898:	mov	ip, #0
   2789c:	b	286dc <__assert_fail@plt+0x15c60>
   278a0:	ldr	r2, [sl, #-48]	; 0xffffffd0
   278a4:	ldr	r0, [sl, #-44]	; 0xffffffd4
   278a8:	b	28710 <__assert_fail@plt+0x15c94>
   278ac:	ldrd	r0, [sl, #8]
   278b0:	str	r0, [sp, #236]	; 0xec
   278b4:	adds	r0, r0, #-2147483648	; 0x80000000
   278b8:	adcs	r0, r1, #0
   278bc:	beq	28938 <__assert_fail@plt+0x15ebc>
   278c0:	b	29c08 <__assert_fail@plt+0x1718c>
   278c4:	ldrd	r2, [sl]
   278c8:	add	r0, sp, #172	; 0xac
   278cc:	stm	r0, {r5, r7, r9}
   278d0:	cmn	r3, #1
   278d4:	ble	28c54 <__assert_fail@plt+0x161d8>
   278d8:	ldr	r5, [sl, #-48]	; 0xffffffd0
   278dc:	ldr	r7, [sl, #-44]	; 0xffffffd4
   278e0:	orrs	r0, r2, r3
   278e4:	beq	27a44 <__assert_fail@plt+0x14fc8>
   278e8:	cmn	r7, #1
   278ec:	ble	28d3c <__assert_fail@plt+0x162c0>
   278f0:	mvn	r0, #0
   278f4:	mvn	r1, #-2147483648	; 0x80000000
   278f8:	mov	r8, r2
   278fc:	mov	r6, r3
   27900:	bl	466fc <__assert_fail@plt+0x33c80>
   27904:	subs	r0, r0, r5
   27908:	mov	r3, r6
   2790c:	mov	r2, r8
   27910:	mov	r6, r5
   27914:	mov	r8, r7
   27918:	sbcs	r0, r1, r7
   2791c:	bge	28dc4 <__assert_fail@plt+0x16348>
   27920:	b	29c08 <__assert_fail@plt+0x1718c>
   27924:	ldr	r0, [sl, #-40]	; 0xffffffd8
   27928:	sub	r1, sl, #56	; 0x38
   2792c:	str	r8, [sp, #156]	; 0x9c
   27930:	vld1.64	{d16-d17}, [r1]
   27934:	add	r1, sp, #172	; 0xac
   27938:	str	r0, [sp, #72]	; 0x48
   2793c:	ldr	r0, [r4, #156]	; 0x9c
   27940:	stm	r1, {r5, r7, r9, lr}
   27944:	str	ip, [sp, #188]	; 0xbc
   27948:	str	r3, [sp, #192]	; 0xc0
   2794c:	str	r2, [sp, #196]	; 0xc4
   27950:	cmp	r0, #0
   27954:	beq	27990 <__assert_fail@plt+0x14f14>
   27958:	ldr	r1, [sp, #92]	; 0x5c
   2795c:	ldr	r1, [r1]
   27960:	cmp	r1, #0
   27964:	bne	27990 <__assert_fail@plt+0x14f14>
   27968:	ldrb	r1, [r4, #153]	; 0x99
   2796c:	cmp	r1, #0
   27970:	bne	27990 <__assert_fail@plt+0x14f14>
   27974:	ldr	r1, [sp, #72]	; 0x48
   27978:	ldr	r6, [sl, #-36]	; 0xffffffdc
   2797c:	cmp	r1, #2
   27980:	bgt	2986c <__assert_fail@plt+0x16df0>
   27984:	ldr	r2, [r4, #172]	; 0xac
   27988:	cmp	r2, #0
   2798c:	bne	2986c <__assert_fail@plt+0x16df0>
   27990:	ldr	r9, [sp, #72]	; 0x48
   27994:	cmp	r9, #5
   27998:	blt	28cd4 <__assert_fail@plt+0x16258>
   2799c:	add	r0, r0, #1
   279a0:	vmov.32	r5, d17[1]
   279a4:	vmov.32	r7, d17[0]
   279a8:	mov	r2, #100	; 0x64
   279ac:	mov	r3, #0
   279b0:	mov	r6, #100	; 0x64
   279b4:	str	r0, [r4, #156]	; 0x9c
   279b8:	mov	r0, r7
   279bc:	mov	r1, r5
   279c0:	bl	46628 <__assert_fail@plt+0x33bac>
   279c4:	umull	r2, r3, r0, r6
   279c8:	mla	r3, r1, r6, r3
   279cc:	ldr	r6, [sp, #164]	; 0xa4
   279d0:	subs	r2, r7, r2
   279d4:	sbc	r3, r5, r3
   279d8:	strd	r2, [r6]
   279dc:	mov	r2, #100	; 0x64
   279e0:	mov	r3, #0
   279e4:	bl	46628 <__assert_fail@plt+0x33bac>
   279e8:	mov	r0, r2
   279ec:	ldr	r2, [sp, #168]	; 0xa8
   279f0:	mov	r1, r3
   279f4:	mov	r3, #0
   279f8:	strd	r0, [r2]
   279fc:	mov	r0, r7
   27a00:	mov	r1, r5
   27a04:	movw	r2, #10000	; 0x2710
   27a08:	bl	46628 <__assert_fail@plt+0x33bac>
   27a0c:	ldr	r2, [sp, #88]	; 0x58
   27a10:	strd	r0, [r2]
   27a14:	sub	r0, r9, #4
   27a18:	str	r0, [r4, #48]	; 0x30
   27a1c:	b	29198 <__assert_fail@plt+0x1671c>
   27a20:	ldrd	r2, [sl]
   27a24:	add	r0, sp, #172	; 0xac
   27a28:	stm	r0, {r5, r7, r9}
   27a2c:	cmn	r3, #1
   27a30:	ble	28d8c <__assert_fail@plt+0x16310>
   27a34:	ldr	r5, [sl, #-56]	; 0xffffffc8
   27a38:	ldr	r7, [sl, #-52]	; 0xffffffcc
   27a3c:	orrs	r0, r2, r3
   27a40:	bne	278e8 <__assert_fail@plt+0x14e6c>
   27a44:	mov	r6, r5
   27a48:	mov	r8, r7
   27a4c:	b	28dc4 <__assert_fail@plt+0x16348>
   27a50:	mov	ip, #0
   27a54:	mov	r8, #1
   27a58:	b	286d4 <__assert_fail@plt+0x15c58>
   27a5c:	add	r0, sp, #172	; 0xac
   27a60:	str	r2, [sp, #196]	; 0xc4
   27a64:	str	r3, [sp, #192]	; 0xc0
   27a68:	str	ip, [sp, #188]	; 0xbc
   27a6c:	str	r8, [sp, #156]	; 0x9c
   27a70:	stm	r0, {r5, r7, r9, lr}
   27a74:	ldr	r0, [sl, #-56]	; 0xffffffc8
   27a78:	ldr	r3, [sl]
   27a7c:	ldr	r9, [sl, #-12]
   27a80:	ldr	r7, [r4, #144]	; 0x90
   27a84:	ldr	r1, [sl, #-16]
   27a88:	ldr	r5, [sl, #-20]	; 0xffffffec
   27a8c:	ldr	r8, [sl, #-24]	; 0xffffffe8
   27a90:	ldr	r6, [sl, #-40]	; 0xffffffd8
   27a94:	ldr	ip, [sl, #-32]	; 0xffffffe0
   27a98:	ldr	lr, [sl, #-28]	; 0xffffffe4
   27a9c:	str	r0, [sp, #56]	; 0x38
   27aa0:	ldr	r0, [sl, #-52]	; 0xffffffcc
   27aa4:	cmn	r3, #1
   27aa8:	str	r7, [sp, #60]	; 0x3c
   27aac:	str	r9, [sp, #48]	; 0x30
   27ab0:	str	r0, [sp, #68]	; 0x44
   27ab4:	ldr	r0, [sl, #-48]	; 0xffffffd0
   27ab8:	str	r0, [sp, #52]	; 0x34
   27abc:	ldr	r0, [sl, #-44]	; 0xffffffd4
   27ac0:	str	r0, [sp, #64]	; 0x40
   27ac4:	ldr	r0, [sl, #-36]	; 0xffffffdc
   27ac8:	str	r0, [sp, #72]	; 0x48
   27acc:	ldr	r0, [sl, #-8]
   27ad0:	ble	28e28 <__assert_fail@plt+0x163ac>
   27ad4:	ldr	r2, [sp, #104]	; 0x68
   27ad8:	add	r0, r7, r0
   27adc:	str	r0, [sp, #44]	; 0x2c
   27ae0:	str	r0, [r4, #144]	; 0x90
   27ae4:	ldm	r2, {r0, r3}
   27ae8:	adds	r0, r0, r1
   27aec:	adc	r7, r3, r9
   27af0:	mov	r9, r6
   27af4:	stm	r2, {r0, r7}
   27af8:	ldr	r6, [sp, #108]	; 0x6c
   27afc:	ldrd	r0, [r6]
   27b00:	str	r5, [sp, #24]
   27b04:	adds	r2, r0, r8
   27b08:	str	r1, [sp, #20]
   27b0c:	adc	r5, r1, r5
   27b10:	stm	r6, {r2, r5}
   27b14:	ldr	r8, [sp, #112]	; 0x70
   27b18:	ldm	r8, {r2, r6}
   27b1c:	str	lr, [sp, #32]
   27b20:	adds	r2, r2, ip
   27b24:	adc	lr, r6, lr
   27b28:	stm	r8, {r2, lr}
   27b2c:	ldr	r8, [sp, #116]	; 0x74
   27b30:	ldr	r2, [r8]
   27b34:	ldr	r1, [r8, #4]
   27b38:	ldr	r0, [sp, #72]	; 0x48
   27b3c:	adds	r2, r2, r9
   27b40:	str	r1, [sp, #28]
   27b44:	mov	r9, #0
   27b48:	adc	r0, r1, r0
   27b4c:	str	r0, [sp, #36]	; 0x24
   27b50:	str	r2, [r8]
   27b54:	str	r0, [r8, #4]
   27b58:	ldr	ip, [sp, #120]	; 0x78
   27b5c:	ldr	r2, [ip]
   27b60:	ldr	r1, [ip, #4]
   27b64:	ldr	r0, [sp, #52]	; 0x34
   27b68:	adds	r2, r2, r0
   27b6c:	ldr	r0, [sp, #64]	; 0x40
   27b70:	str	r1, [sp, #40]	; 0x28
   27b74:	adc	r8, r1, r0
   27b78:	stm	ip, {r2, r8}
   27b7c:	ldr	ip, [sp, #124]	; 0x7c
   27b80:	ldr	r2, [ip]
   27b84:	ldr	r1, [ip, #4]
   27b88:	ldr	r0, [sp, #56]	; 0x38
   27b8c:	adds	r2, r2, r0
   27b90:	ldr	r0, [sp, #68]	; 0x44
   27b94:	str	r1, [sp, #52]	; 0x34
   27b98:	adc	r0, r1, r0
   27b9c:	cmn	r3, #1
   27ba0:	mov	r1, #0
   27ba4:	mov	r3, #0
   27ba8:	str	r0, [sp, #56]	; 0x38
   27bac:	str	r2, [ip]
   27bb0:	mov	r2, #0
   27bb4:	str	r0, [ip, #4]
   27bb8:	mov	ip, #0
   27bbc:	movwgt	r2, #1
   27bc0:	cmn	r7, #1
   27bc4:	mov	r7, #0
   27bc8:	movwgt	r1, #1
   27bcc:	str	r2, [sp, #16]
   27bd0:	subs	r0, r2, r1
   27bd4:	mov	r1, #0
   27bd8:	mov	r2, #0
   27bdc:	movwne	r0, #1
   27be0:	str	r0, [sp, #12]
   27be4:	ldr	r0, [sp, #48]	; 0x30
   27be8:	cmn	r0, #1
   27bec:	mov	r0, #0
   27bf0:	movwgt	r0, #1
   27bf4:	str	r0, [sp, #48]	; 0x30
   27bf8:	ldr	r0, [sp, #20]
   27bfc:	cmn	r0, #1
   27c00:	mov	r0, #0
   27c04:	movwgt	r1, #1
   27c08:	cmn	r5, #1
   27c0c:	mov	r5, #0
   27c10:	movwgt	r0, #1
   27c14:	str	r1, [sp, #20]
   27c18:	subs	r0, r1, r0
   27c1c:	mov	r1, #0
   27c20:	movwne	r0, #1
   27c24:	str	r0, [sp, #8]
   27c28:	ldr	r0, [sp, #24]
   27c2c:	cmn	r0, #1
   27c30:	mov	r0, #0
   27c34:	movwgt	r0, #1
   27c38:	cmn	r6, #1
   27c3c:	mov	r6, #0
   27c40:	str	r0, [sp, #24]
   27c44:	movwgt	r2, #1
   27c48:	cmn	lr, #1
   27c4c:	mov	r0, #0
   27c50:	mov	lr, #0
   27c54:	movwgt	r0, #1
   27c58:	subs	r0, r2, r0
   27c5c:	movwne	r0, #1
   27c60:	str	r0, [sp, #4]
   27c64:	ldr	r0, [sp, #32]
   27c68:	cmn	r0, #1
   27c6c:	ldr	r0, [sp, #28]
   27c70:	movwgt	lr, #1
   27c74:	cmn	r0, #1
   27c78:	ldr	r0, [sp, #36]	; 0x24
   27c7c:	movwgt	r9, #1
   27c80:	cmn	r0, #1
   27c84:	mov	r0, #0
   27c88:	movwgt	r0, #1
   27c8c:	subs	r0, r9, r0
   27c90:	movwne	r0, #1
   27c94:	str	r0, [sp, #36]	; 0x24
   27c98:	ldr	r0, [sp, #72]	; 0x48
   27c9c:	cmn	r0, #1
   27ca0:	ldr	r0, [sp, #40]	; 0x28
   27ca4:	movwgt	r3, #1
   27ca8:	cmn	r0, #1
   27cac:	ldr	r0, [sp, #64]	; 0x40
   27cb0:	movwgt	ip, #1
   27cb4:	cmn	r8, #1
   27cb8:	movwgt	r1, #1
   27cbc:	subs	r8, ip, r1
   27cc0:	mov	r1, #0
   27cc4:	movwne	r8, #1
   27cc8:	cmn	r0, #1
   27ccc:	ldr	r0, [sp, #52]	; 0x34
   27cd0:	movwgt	r6, #1
   27cd4:	cmn	r0, #1
   27cd8:	ldr	r0, [sp, #56]	; 0x38
   27cdc:	movwgt	r5, #1
   27ce0:	cmn	r0, #1
   27ce4:	ldr	r0, [sp, #68]	; 0x44
   27ce8:	movwgt	r1, #1
   27cec:	subs	r1, r5, r1
   27cf0:	movwne	r1, #1
   27cf4:	cmn	r0, #1
   27cf8:	ldr	r0, [sp, #44]	; 0x2c
   27cfc:	movwgt	r7, #1
   27d00:	str	r7, [sp, #72]	; 0x48
   27d04:	ldr	r7, [sp, #60]	; 0x3c
   27d08:	cmp	r0, r7
   27d0c:	bvs	29c08 <__assert_fail@plt+0x1718c>
   27d10:	ldr	r0, [sp, #16]
   27d14:	ldr	r7, [sp, #48]	; 0x30
   27d18:	sub	r0, r0, r7
   27d1c:	ldr	r7, [sp, #12]
   27d20:	clz	r0, r0
   27d24:	lsr	r0, r0, #5
   27d28:	ands	r0, r0, r7
   27d2c:	bne	29c08 <__assert_fail@plt+0x1718c>
   27d30:	ldr	r0, [sp, #20]
   27d34:	ldr	r7, [sp, #24]
   27d38:	sub	r0, r0, r7
   27d3c:	ldr	r7, [sp, #8]
   27d40:	clz	r0, r0
   27d44:	lsr	r0, r0, #5
   27d48:	ands	r0, r0, r7
   27d4c:	bne	29c08 <__assert_fail@plt+0x1718c>
   27d50:	sub	r0, r2, lr
   27d54:	ldr	r2, [sp, #4]
   27d58:	clz	r0, r0
   27d5c:	lsr	r0, r0, #5
   27d60:	ands	r0, r0, r2
   27d64:	bne	29c08 <__assert_fail@plt+0x1718c>
   27d68:	ldr	r2, [sp, #36]	; 0x24
   27d6c:	sub	r0, r9, r3
   27d70:	clz	r0, r0
   27d74:	lsr	r0, r0, #5
   27d78:	ands	r0, r0, r2
   27d7c:	bne	29c08 <__assert_fail@plt+0x1718c>
   27d80:	sub	r0, ip, r6
   27d84:	clz	r0, r0
   27d88:	lsr	r0, r0, #5
   27d8c:	ands	r0, r0, r8
   27d90:	bne	29c08 <__assert_fail@plt+0x1718c>
   27d94:	ldr	r0, [sp, #72]	; 0x48
   27d98:	add	r9, sp, #172	; 0xac
   27d9c:	sub	r0, r5, r0
   27da0:	ldm	r9, {r5, r7, r9}
   27da4:	ldr	r8, [sp, #156]	; 0x9c
   27da8:	clz	r0, r0
   27dac:	lsr	r0, r0, #5
   27db0:	ands	r0, r0, r1
   27db4:	ldr	lr, [sp, #184]	; 0xb8
   27db8:	ldr	ip, [sp, #188]	; 0xbc
   27dbc:	ldr	r3, [sp, #192]	; 0xc0
   27dc0:	b	294e8 <__assert_fail@plt+0x16a6c>
   27dc4:	sub	r0, sl, #112	; 0x70
   27dc8:	vldr	d18, [sl, #-96]	; 0xffffffa0
   27dcc:	str	r2, [sp, #196]	; 0xc4
   27dd0:	ldr	r2, [sp, #168]	; 0xa8
   27dd4:	str	r3, [sp, #192]	; 0xc0
   27dd8:	vld1.64	{d16-d17}, [r0]
   27ddc:	ldr	r0, [sp, #100]	; 0x64
   27de0:	vst1.64	{d16-d17}, [r0]!
   27de4:	vstr	d18, [r0]
   27de8:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   27dec:	rsbs	r0, r0, #0
   27df0:	rsc	r3, r1, #0
   27df4:	and	r1, r1, r3
   27df8:	stm	r2, {r0, r3}
   27dfc:	mov	r0, #1
   27e00:	cmp	r1, #0
   27e04:	blt	29c14 <__assert_fail@plt+0x17198>
   27e08:	ldrd	r0, [sl, #8]
   27e0c:	ldr	r2, [sp, #164]	; 0xa4
   27e10:	rsbs	r0, r0, #0
   27e14:	rsc	r3, r1, #0
   27e18:	stm	r2, {r0, r3}
   27e1c:	and	r1, r1, r3
   27e20:	mov	r0, #1
   27e24:	ldr	r3, [sp, #192]	; 0xc0
   27e28:	ldr	r2, [sp, #196]	; 0xc4
   27e2c:	cmp	r1, #0
   27e30:	bge	28940 <__assert_fail@plt+0x15ec4>
   27e34:	b	29c14 <__assert_fail@plt+0x17198>
   27e38:	str	r2, [sp, #196]	; 0xc4
   27e3c:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   27e40:	ldr	r2, [sp, #164]	; 0xa4
   27e44:	strd	r0, [r2]
   27e48:	ldrd	r0, [sl]
   27e4c:	ldr	r2, [sp, #168]	; 0xa8
   27e50:	b	28794 <__assert_fail@plt+0x15d18>
   27e54:	mvn	r0, #0
   27e58:	str	r0, [sp, #236]	; 0xec
   27e5c:	mvn	r0, #0
   27e60:	b	2893c <__assert_fail@plt+0x15ec0>
   27e64:	mov	r0, #1
   27e68:	str	r0, [r4, #20]
   27e6c:	ldr	r0, [r4, #168]	; 0xa8
   27e70:	add	r0, r0, #1
   27e74:	str	r0, [r4, #168]	; 0xa8
   27e78:	b	28940 <__assert_fail@plt+0x15ec4>
   27e7c:	add	r0, sp, #172	; 0xac
   27e80:	str	r2, [sp, #196]	; 0xc4
   27e84:	str	r3, [sp, #192]	; 0xc0
   27e88:	str	ip, [sp, #188]	; 0xbc
   27e8c:	str	r8, [sp, #156]	; 0x9c
   27e90:	stm	r0, {r5, r7, r9, lr}
   27e94:	ldr	r0, [sl, #-56]	; 0xffffffc8
   27e98:	b	2802c <__assert_fail@plt+0x155b0>
   27e9c:	str	r2, [sp, #196]	; 0xc4
   27ea0:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   27ea4:	ldr	r2, [sp, #140]	; 0x8c
   27ea8:	vmov.i32	q8, #0	; 0x00000000
   27eac:	strd	r0, [r2]
   27eb0:	ldr	r2, [sp, #196]	; 0xc4
   27eb4:	ldr	r0, [sp, #144]	; 0x90
   27eb8:	vst1.64	{d16-d17}, [r0]
   27ebc:	b	2866c <__assert_fail@plt+0x15bf0>
   27ec0:	ldr	r0, [sl, #-56]	; 0xffffffc8
   27ec4:	b	284e8 <__assert_fail@plt+0x15a6c>
   27ec8:	ldr	r1, [sl, #-40]	; 0xffffffd8
   27ecc:	ldr	r6, [sl, #4]
   27ed0:	str	r9, [sp, #180]	; 0xb4
   27ed4:	ldr	r0, [sl, #-48]	; 0xffffffd0
   27ed8:	ldr	r9, [sl, #-44]	; 0xffffffd4
   27edc:	str	r2, [sp, #196]	; 0xc4
   27ee0:	mov	r2, #0
   27ee4:	str	r8, [sp, #156]	; 0x9c
   27ee8:	mov	r8, #100	; 0x64
   27eec:	str	lr, [sp, #184]	; 0xb8
   27ef0:	str	ip, [sp, #188]	; 0xbc
   27ef4:	str	r3, [sp, #192]	; 0xc0
   27ef8:	cmp	r1, #3
   27efc:	mov	r1, #0
   27f00:	movwlt	r1, #1
   27f04:	cmp	r6, #0
   27f08:	movwlt	r2, #1
   27f0c:	ands	r1, r2, r1
   27f10:	mov	r2, r9
   27f14:	umull	r9, r1, r0, r8
   27f18:	mlane	r2, r2, r8, r1
   27f1c:	moveq	r9, r0
   27f20:	cmn	r6, #1
   27f24:	ble	290c0 <__assert_fail@plt+0x16644>
   27f28:	ldr	r0, [sl, #-56]	; 0xffffffc8
   27f2c:	ldr	ip, [sl]
   27f30:	cmn	r2, #1
   27f34:	str	r7, [sp, #176]	; 0xb0
   27f38:	str	r5, [sp, #172]	; 0xac
   27f3c:	str	r0, [sp, #72]	; 0x48
   27f40:	ble	29570 <__assert_fail@plt+0x16af4>
   27f44:	movw	r1, #8738	; 0x2222
   27f48:	movw	r0, #8738	; 0x2222
   27f4c:	mov	r3, #1
   27f50:	mov	r5, r9
   27f54:	movt	r1, #8738	; 0x2222
   27f58:	movt	r0, #546	; 0x222
   27f5c:	subs	r1, r1, r9
   27f60:	sbcs	r0, r0, r2
   27f64:	bge	29580 <__assert_fail@plt+0x16b04>
   27f68:	b	295d4 <__assert_fail@plt+0x16b58>
   27f6c:	str	r2, [sp, #196]	; 0xc4
   27f70:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   27f74:	ldr	r2, [sp, #140]	; 0x8c
   27f78:	vmov.i32	q8, #0	; 0x00000000
   27f7c:	strd	r0, [r2]
   27f80:	ldr	r2, [sp, #196]	; 0xc4
   27f84:	ldr	r0, [sp, #144]	; 0x90
   27f88:	vst1.64	{d16-d17}, [r0]
   27f8c:	b	284d8 <__assert_fail@plt+0x15a5c>
   27f90:	str	r2, [sp, #196]	; 0xc4
   27f94:	ldrd	r0, [sl, #-112]	; 0xffffff90
   27f98:	ldr	r2, [sp, #168]	; 0xa8
   27f9c:	str	r3, [sp, #192]	; 0xc0
   27fa0:	strd	r0, [r2]
   27fa4:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   27fa8:	ldr	r2, [sp, #164]	; 0xa4
   27fac:	rsbs	r0, r0, #0
   27fb0:	rsc	r3, r1, #0
   27fb4:	and	r1, r1, r3
   27fb8:	stm	r2, {r0, r3}
   27fbc:	mov	r0, #1
   27fc0:	cmp	r1, #0
   27fc4:	blt	29c14 <__assert_fail@plt+0x17198>
   27fc8:	ldrd	r0, [sl, #8]
   27fcc:	ldr	r2, [sp, #88]	; 0x58
   27fd0:	rsbs	r0, r0, #0
   27fd4:	rsc	r3, r1, #0
   27fd8:	stm	r2, {r0, r3}
   27fdc:	and	r1, r1, r3
   27fe0:	mov	r0, #1
   27fe4:	ldr	r3, [sp, #192]	; 0xc0
   27fe8:	ldr	r2, [sp, #196]	; 0xc4
   27fec:	cmp	r1, #0
   27ff0:	blt	29c14 <__assert_fail@plt+0x17198>
   27ff4:	ldr	r0, [sl, #16]
   27ff8:	ldr	r1, [sp, #92]	; 0x5c
   27ffc:	str	r0, [r1]
   28000:	b	28940 <__assert_fail@plt+0x15ec4>
   28004:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   28008:	b	28428 <__assert_fail@plt+0x159ac>
   2800c:	add	r0, sp, #172	; 0xac
   28010:	str	r2, [sp, #196]	; 0xc4
   28014:	str	r3, [sp, #192]	; 0xc0
   28018:	str	ip, [sp, #188]	; 0xbc
   2801c:	str	r8, [sp, #156]	; 0x9c
   28020:	stm	r0, {r5, r7, r9, lr}
   28024:	movw	r0, #40336	; 0x9d90
   28028:	movt	r0, #65535	; 0xffff
   2802c:	str	r0, [r4, #24]
   28030:	ldr	r1, [r4, #144]	; 0x90
   28034:	ldr	r0, [sl, #48]	; 0x30
   28038:	ldr	r8, [sl, #4]
   2803c:	ldr	r6, [sl, #12]
   28040:	ldr	lr, [sl, #20]
   28044:	ldr	ip, [sl, #28]
   28048:	ldr	r3, [sl, #36]	; 0x24
   2804c:	ldr	r9, [sl, #32]
   28050:	ldr	r2, [sl, #40]	; 0x28
   28054:	add	r0, r1, r0
   28058:	str	r1, [sp, #72]	; 0x48
   2805c:	ldr	r1, [sl]
   28060:	str	r8, [sp, #64]	; 0x40
   28064:	str	r6, [sp, #56]	; 0x38
   28068:	str	lr, [sp, #44]	; 0x2c
   2806c:	str	ip, [sp, #32]
   28070:	str	r3, [sp, #24]
   28074:	str	r0, [sp, #68]	; 0x44
   28078:	str	r1, [sp, #60]	; 0x3c
   2807c:	ldr	r1, [sl, #8]
   28080:	str	r1, [sp, #52]	; 0x34
   28084:	ldr	r1, [sl, #16]
   28088:	str	r1, [sp, #48]	; 0x30
   2808c:	ldr	r1, [sl, #24]
   28090:	str	r1, [sp, #40]	; 0x28
   28094:	ldr	r1, [sl, #44]	; 0x2c
   28098:	str	r0, [r4, #144]	; 0x90
   2809c:	ldr	r0, [sp, #104]	; 0x68
   280a0:	str	r1, [sp, #16]
   280a4:	ldm	r0, {r5, r7}
   280a8:	adds	r2, r5, r2
   280ac:	adc	r5, r7, r1
   280b0:	stm	r0, {r2, r5}
   280b4:	ldr	r2, [sp, #108]	; 0x6c
   280b8:	ldrd	r0, [r2]
   280bc:	adds	r0, r0, r9
   280c0:	str	r1, [sp, #12]
   280c4:	adc	r9, r1, r3
   280c8:	stm	r2, {r0, r9}
   280cc:	ldr	r0, [sp, #112]	; 0x70
   280d0:	ldr	r2, [r0]
   280d4:	ldr	r1, [r0, #4]
   280d8:	ldr	r3, [sp, #40]	; 0x28
   280dc:	adds	r3, r2, r3
   280e0:	str	r1, [sp, #20]
   280e4:	adc	r2, r1, ip
   280e8:	str	r3, [r0]
   280ec:	str	r2, [r0, #4]
   280f0:	ldr	r0, [sp, #116]	; 0x74
   280f4:	ldr	ip, [r0]
   280f8:	ldr	r1, [r0, #4]
   280fc:	ldr	r3, [sp, #48]	; 0x30
   28100:	adds	ip, ip, r3
   28104:	str	r1, [sp, #28]
   28108:	adc	r1, r1, lr
   2810c:	mov	lr, #0
   28110:	str	r1, [sp, #36]	; 0x24
   28114:	str	ip, [r0]
   28118:	str	r1, [r0, #4]
   2811c:	ldr	ip, [sp, #120]	; 0x78
   28120:	ldr	r3, [sp, #52]	; 0x34
   28124:	ldrd	r0, [ip]
   28128:	adds	r0, r0, r3
   2812c:	str	r1, [sp, #40]	; 0x28
   28130:	adc	r1, r1, r6
   28134:	str	r1, [sp, #48]	; 0x30
   28138:	strd	r0, [ip]
   2813c:	ldr	ip, [sp, #124]	; 0x7c
   28140:	ldr	r3, [sp, #60]	; 0x3c
   28144:	ldrd	r0, [ip]
   28148:	adds	r0, r0, r3
   2814c:	str	r1, [sp, #52]	; 0x34
   28150:	adc	r3, r1, r8
   28154:	cmn	r7, #1
   28158:	mov	r1, #0
   2815c:	mov	r7, #0
   28160:	mov	r8, #0
   28164:	str	r3, [sp, #60]	; 0x3c
   28168:	stm	ip, {r0, r3}
   2816c:	mov	r3, #0
   28170:	mov	r0, #0
   28174:	mov	ip, #0
   28178:	movwgt	r3, #1
   2817c:	cmn	r5, #1
   28180:	mov	r5, #0
   28184:	movwgt	r0, #1
   28188:	str	r3, [sp, #8]
   2818c:	subs	r0, r3, r0
   28190:	ldr	r3, [sp, #68]	; 0x44
   28194:	movwne	r0, #1
   28198:	str	r0, [sp, #4]
   2819c:	ldr	r0, [sp, #16]
   281a0:	cmn	r0, #1
   281a4:	mov	r0, #0
   281a8:	movwgt	r0, #1
   281ac:	str	r0, [sp, #16]
   281b0:	ldr	r0, [sp, #12]
   281b4:	cmn	r0, #1
   281b8:	mov	r0, #0
   281bc:	movwgt	r1, #1
   281c0:	cmn	r9, #1
   281c4:	mov	r9, #0
   281c8:	movwgt	r0, #1
   281cc:	str	r1, [sp, #12]
   281d0:	subs	r0, r1, r0
   281d4:	mov	r1, #0
   281d8:	movwne	r0, #1
   281dc:	str	r0, [sp]
   281e0:	ldr	r0, [sp, #24]
   281e4:	cmn	r0, #1
   281e8:	mov	r0, #0
   281ec:	movwgt	r0, #1
   281f0:	str	r0, [sp, #24]
   281f4:	ldr	r0, [sp, #20]
   281f8:	cmn	r0, #1
   281fc:	mov	r0, #0
   28200:	movwgt	r7, #1
   28204:	cmn	r2, #1
   28208:	mov	r2, #0
   2820c:	movwgt	r0, #1
   28210:	subs	r0, r7, r0
   28214:	movwne	r0, #1
   28218:	str	r0, [sp, #20]
   2821c:	ldr	r0, [sp, #32]
   28220:	cmn	r0, #1
   28224:	ldr	r0, [sp, #28]
   28228:	movwgt	lr, #1
   2822c:	cmn	r0, #1
   28230:	ldr	r0, [sp, #36]	; 0x24
   28234:	movwgt	r9, #1
   28238:	cmn	r0, #1
   2823c:	mov	r0, #0
   28240:	movwgt	r0, #1
   28244:	subs	r0, r9, r0
   28248:	movwne	r0, #1
   2824c:	str	r0, [sp, #36]	; 0x24
   28250:	ldr	r0, [sp, #44]	; 0x2c
   28254:	cmn	r0, #1
   28258:	ldr	r0, [sp, #40]	; 0x28
   2825c:	movwgt	ip, #1
   28260:	cmn	r0, #1
   28264:	ldr	r0, [sp, #48]	; 0x30
   28268:	movwgt	r8, #1
   2826c:	cmn	r0, #1
   28270:	ldr	r0, [sp, #56]	; 0x38
   28274:	movwgt	r1, #1
   28278:	subs	r6, r8, r1
   2827c:	mov	r1, #0
   28280:	movwne	r6, #1
   28284:	cmn	r0, #1
   28288:	ldr	r0, [sp, #52]	; 0x34
   2828c:	movwgt	r2, #1
   28290:	cmn	r0, #1
   28294:	ldr	r0, [sp, #60]	; 0x3c
   28298:	movwgt	r5, #1
   2829c:	cmn	r0, #1
   282a0:	ldr	r0, [sp, #64]	; 0x40
   282a4:	movwgt	r1, #1
   282a8:	subs	r1, r5, r1
   282ac:	movwne	r1, #1
   282b0:	cmn	r0, #1
   282b4:	mov	r0, #0
   282b8:	movwgt	r0, #1
   282bc:	str	r0, [sp, #64]	; 0x40
   282c0:	ldr	r0, [sp, #72]	; 0x48
   282c4:	cmp	r3, r0
   282c8:	bvs	29c08 <__assert_fail@plt+0x1718c>
   282cc:	ldr	r0, [sp, #8]
   282d0:	ldr	r3, [sp, #16]
   282d4:	sub	r0, r0, r3
   282d8:	ldr	r3, [sp, #4]
   282dc:	clz	r0, r0
   282e0:	lsr	r0, r0, #5
   282e4:	ands	r0, r0, r3
   282e8:	bne	29c08 <__assert_fail@plt+0x1718c>
   282ec:	ldr	r0, [sp, #12]
   282f0:	ldr	r3, [sp, #24]
   282f4:	sub	r0, r0, r3
   282f8:	ldr	r3, [sp]
   282fc:	clz	r0, r0
   28300:	lsr	r0, r0, #5
   28304:	ands	r0, r0, r3
   28308:	bne	29c08 <__assert_fail@plt+0x1718c>
   2830c:	ldr	r3, [sp, #20]
   28310:	sub	r0, r7, lr
   28314:	clz	r0, r0
   28318:	lsr	r0, r0, #5
   2831c:	ands	r0, r0, r3
   28320:	bne	29c08 <__assert_fail@plt+0x1718c>
   28324:	ldr	r3, [sp, #36]	; 0x24
   28328:	sub	r0, r9, ip
   2832c:	clz	r0, r0
   28330:	lsr	r0, r0, #5
   28334:	ands	r0, r0, r3
   28338:	bne	29c08 <__assert_fail@plt+0x1718c>
   2833c:	sub	r0, r8, r2
   28340:	clz	r0, r0
   28344:	lsr	r0, r0, #5
   28348:	ands	r0, r0, r6
   2834c:	bne	29c08 <__assert_fail@plt+0x1718c>
   28350:	ldr	r0, [sp, #64]	; 0x40
   28354:	add	r9, sp, #172	; 0xac
   28358:	sub	r0, r5, r0
   2835c:	ldm	r9, {r5, r7, r9}
   28360:	ldr	r8, [sp, #156]	; 0x9c
   28364:	clz	r0, r0
   28368:	lsr	r0, r0, #5
   2836c:	ands	r0, r0, r1
   28370:	mov	r0, #1
   28374:	bne	29c14 <__assert_fail@plt+0x17198>
   28378:	movw	r1, #49201	; 0xc031
   2837c:	mov	r0, #1
   28380:	mov	r2, #5
   28384:	strb	r0, [r4, #153]	; 0x99
   28388:	movt	r1, #4
   2838c:	mov	r0, #0
   28390:	b	28758 <__assert_fail@plt+0x15cdc>
   28394:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   28398:	str	r7, [sp, #176]	; 0xb0
   2839c:	str	lr, [sp, #184]	; 0xb8
   283a0:	str	r2, [sp, #196]	; 0xc4
   283a4:	str	r5, [sp, #172]	; 0xac
   283a8:	mov	lr, r3
   283ac:	ldr	r2, [sl, #-272]	; 0xfffffef0
   283b0:	ldr	r3, [sl, #-268]	; 0xfffffef4
   283b4:	mov	r7, ip
   283b8:	str	r1, [sp, #68]	; 0x44
   283bc:	str	r0, [sp, #72]	; 0x48
   283c0:	ldr	r6, [sl, #-160]	; 0xffffff60
   283c4:	ldr	r5, [sl, #-156]	; 0xffffff64
   283c8:	ldr	r0, [sp, #140]	; 0x8c
   283cc:	strd	r2, [r0]
   283d0:	mov	r3, lr
   283d4:	ldr	r2, [sp, #144]	; 0x90
   283d8:	str	r6, [r2]
   283dc:	str	r5, [r2, #4]
   283e0:	ldr	r0, [sp, #72]	; 0x48
   283e4:	ldr	r1, [sp, #68]	; 0x44
   283e8:	ldr	r2, [sp, #196]	; 0xc4
   283ec:	strd	r0, [r4, #88]	; 0x58
   283f0:	ldr	lr, [sp, #184]	; 0xb8
   283f4:	ldr	r5, [sp, #172]	; 0xac
   283f8:	ldr	r7, [sp, #176]	; 0xb0
   283fc:	b	284d8 <__assert_fail@plt+0x15a5c>
   28400:	ldr	r0, [sl]
   28404:	str	r0, [r4, #24]
   28408:	b	28940 <__assert_fail@plt+0x15ec4>
   2840c:	ldr	r0, [r4, #172]	; 0xac
   28410:	movw	r1, #38896	; 0x97f0
   28414:	movt	r1, #4
   28418:	add	r0, r0, #1
   2841c:	str	r0, [r4, #172]	; 0xac
   28420:	b	28740 <__assert_fail@plt+0x15cc4>
   28424:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   28428:	str	r2, [sp, #196]	; 0xc4
   2842c:	ldr	r2, [sp, #96]	; 0x60
   28430:	strd	r0, [r2]
   28434:	mov	r1, #1
   28438:	ldr	r0, [sl]
   2843c:	ldr	r2, [sp, #196]	; 0xc4
   28440:	strb	r1, [r4, #187]	; 0xbb
   28444:	str	r0, [r4, #16]
   28448:	b	28940 <__assert_fail@plt+0x15ec4>
   2844c:	ldr	r0, [sl, #-208]	; 0xffffff30
   28450:	str	r2, [sp, #196]	; 0xc4
   28454:	cmp	r0, #4
   28458:	blt	28c9c <__assert_fail@plt+0x16220>
   2845c:	sub	r0, sl, #224	; 0xe0
   28460:	vldr	d18, [sl, #-208]	; 0xffffff30
   28464:	vld1.64	{d16-d17}, [r0]
   28468:	ldr	r0, [sp, #100]	; 0x64
   2846c:	vst1.64	{d16-d17}, [r0]!
   28470:	vstr	d18, [r0]
   28474:	ldrd	r0, [sl, #-104]	; 0xffffff98
   28478:	b	28784 <__assert_fail@plt+0x15d08>
   2847c:	ldr	r0, [r4, #156]	; 0x9c
   28480:	movw	r1, #49192	; 0xc028
   28484:	movt	r1, #4
   28488:	add	r0, r0, #1
   2848c:	str	r0, [r4, #156]	; 0x9c
   28490:	b	28740 <__assert_fail@plt+0x15cc4>
   28494:	str	ip, [sp, #188]	; 0xbc
   28498:	ldr	ip, [sl, #-160]	; 0xffffff60
   2849c:	ldr	r1, [sl, #-156]	; 0xffffff64
   284a0:	ldr	r6, [sp, #140]	; 0x8c
   284a4:	str	r3, [sp, #192]	; 0xc0
   284a8:	str	r2, [sp, #196]	; 0xc4
   284ac:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   284b0:	str	ip, [r6]
   284b4:	str	r1, [r6, #4]
   284b8:	ldr	r0, [sp, #144]	; 0x90
   284bc:	ldr	ip, [sp, #188]	; 0xbc
   284c0:	strd	r2, [r0]
   284c4:	mov	r0, #0
   284c8:	ldr	r2, [sp, #196]	; 0xc4
   284cc:	ldr	r3, [sp, #192]	; 0xc0
   284d0:	str	r0, [r4, #88]	; 0x58
   284d4:	str	r0, [r4, #92]	; 0x5c
   284d8:	ldr	r0, [sl]
   284dc:	str	r0, [r4, #28]
   284e0:	b	28940 <__assert_fail@plt+0x15ec4>
   284e4:	ldr	r0, [sl]
   284e8:	add	r0, r0, #3600	; 0xe10
   284ec:	str	r0, [r4, #24]
   284f0:	b	28940 <__assert_fail@plt+0x15ec4>
   284f4:	str	r2, [sp, #196]	; 0xc4
   284f8:	ldrd	r0, [sl]
   284fc:	ldr	r2, [sp, #76]	; 0x4c
   28500:	strd	r0, [r2]
   28504:	movw	r1, #39426	; 0x9a02
   28508:	mov	r0, #1
   2850c:	strb	r0, [r4, #152]	; 0x98
   28510:	movt	r1, #4
   28514:	mov	r0, #0
   28518:	b	28748 <__assert_fail@plt+0x15ccc>
   2851c:	ldr	r1, [r4, #172]	; 0xac
   28520:	ldr	r0, [r4, #156]	; 0x9c
   28524:	add	r1, r1, #1
   28528:	add	r0, r0, #1
   2852c:	str	r1, [r4, #172]	; 0xac
   28530:	movw	r1, #49172	; 0xc014
   28534:	str	r0, [r4, #156]	; 0x9c
   28538:	movt	r1, #4
   2853c:	b	28740 <__assert_fail@plt+0x15cc4>
   28540:	ldr	r0, [r4, #160]	; 0xa0
   28544:	movw	r1, #49197	; 0xc02d
   28548:	movt	r1, #4
   2854c:	add	r0, r0, #1
   28550:	str	r0, [r4, #160]	; 0xa0
   28554:	b	28740 <__assert_fail@plt+0x15cc4>
   28558:	movw	r1, #49201	; 0xc031
   2855c:	movt	r1, #4
   28560:	b	28740 <__assert_fail@plt+0x15cc4>
   28564:	str	ip, [sp, #188]	; 0xbc
   28568:	ldr	ip, [sl, #-160]	; 0xffffff60
   2856c:	ldr	r1, [sl, #-156]	; 0xffffff64
   28570:	ldr	r6, [sp, #140]	; 0x8c
   28574:	str	r3, [sp, #192]	; 0xc0
   28578:	str	r2, [sp, #196]	; 0xc4
   2857c:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   28580:	str	ip, [r6]
   28584:	str	r1, [r6, #4]
   28588:	ldr	r0, [sp, #144]	; 0x90
   2858c:	ldr	ip, [sp, #188]	; 0xbc
   28590:	strd	r2, [r0]
   28594:	mov	r0, #0
   28598:	ldr	r2, [sp, #196]	; 0xc4
   2859c:	ldr	r3, [sp, #192]	; 0xc0
   285a0:	str	r0, [r4, #88]	; 0x58
   285a4:	str	r0, [r4, #92]	; 0x5c
   285a8:	b	2866c <__assert_fail@plt+0x15bf0>
   285ac:	mov	r0, #1
   285b0:	mov	r8, #0
   285b4:	mov	ip, #0
   285b8:	mov	lr, #0
   285bc:	mov	r3, #0
   285c0:	mov	r2, #0
   285c4:	str	r0, [sp, #236]	; 0xec
   285c8:	mov	r0, #0
   285cc:	str	r0, [sp, #228]	; 0xe4
   285d0:	mov	r0, #0
   285d4:	str	r0, [sp, #224]	; 0xe0
   285d8:	mov	r0, #0
   285dc:	str	r0, [sp, #216]	; 0xd8
   285e0:	mov	r0, #0
   285e4:	str	r0, [sp, #220]	; 0xdc
   285e8:	mov	r0, #0
   285ec:	str	r0, [sp, #212]	; 0xd4
   285f0:	mov	r0, #0
   285f4:	str	r0, [sp, #208]	; 0xd0
   285f8:	b	28938 <__assert_fail@plt+0x15ebc>
   285fc:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   28600:	str	r7, [sp, #176]	; 0xb0
   28604:	str	ip, [sp, #188]	; 0xbc
   28608:	str	lr, [sp, #184]	; 0xb8
   2860c:	mov	lr, r2
   28610:	mov	ip, r3
   28614:	mov	r7, r5
   28618:	ldr	r2, [sl, #-272]	; 0xfffffef0
   2861c:	ldr	r3, [sl, #-268]	; 0xfffffef4
   28620:	str	r1, [sp, #68]	; 0x44
   28624:	str	r0, [sp, #72]	; 0x48
   28628:	mov	r1, r9
   2862c:	ldr	r6, [sl, #-160]	; 0xffffff60
   28630:	ldr	r5, [sl, #-156]	; 0xffffff64
   28634:	ldr	r0, [sp, #140]	; 0x8c
   28638:	strd	r2, [r0]
   2863c:	mov	r3, ip
   28640:	ldr	r2, [sp, #144]	; 0x90
   28644:	str	r6, [r2]
   28648:	str	r5, [r2, #4]
   2864c:	mov	r2, lr
   28650:	mov	r5, r7
   28654:	ldr	r0, [sp, #72]	; 0x48
   28658:	ldr	r1, [sp, #68]	; 0x44
   2865c:	strd	r0, [r4, #88]	; 0x58
   28660:	ldr	lr, [sp, #184]	; 0xb8
   28664:	ldr	ip, [sp, #188]	; 0xbc
   28668:	ldr	r7, [sp, #176]	; 0xb0
   2866c:	mov	r0, #2
   28670:	str	r0, [r4, #28]
   28674:	b	28940 <__assert_fail@plt+0x15ec4>
   28678:	ldr	r0, [r4, #164]	; 0xa4
   2867c:	movw	r1, #49181	; 0xc01d
   28680:	movt	r1, #4
   28684:	add	r0, r0, #1
   28688:	str	r0, [r4, #164]	; 0xa4
   2868c:	b	28740 <__assert_fail@plt+0x15cc4>
   28690:	ldrd	r0, [sl, #-104]	; 0xffffff98
   28694:	b	28780 <__assert_fail@plt+0x15d04>
   28698:	ldr	r0, [r4, #176]	; 0xb0
   2869c:	movw	r1, #49187	; 0xc023
   286a0:	movt	r1, #4
   286a4:	add	r0, r0, #1
   286a8:	str	r0, [r4, #176]	; 0xb0
   286ac:	b	28740 <__assert_fail@plt+0x15cc4>
   286b0:	str	r2, [sp, #196]	; 0xc4
   286b4:	ldrd	r0, [sl, #-104]	; 0xffffff98
   286b8:	ldr	r2, [sp, #164]	; 0xa4
   286bc:	strd	r0, [r2]
   286c0:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   286c4:	ldr	r2, [sp, #168]	; 0xa8
   286c8:	b	28cb0 <__assert_fail@plt+0x16234>
   286cc:	ldr	r8, [sl, #-56]	; 0xffffffc8
   286d0:	ldr	ip, [sl, #-52]	; 0xffffffcc
   286d4:	mov	lr, #0
   286d8:	mov	r3, #0
   286dc:	mov	r2, #0
   286e0:	mov	r0, #0
   286e4:	str	r0, [sp, #228]	; 0xe4
   286e8:	b	28724 <__assert_fail@plt+0x15ca8>
   286ec:	movw	r1, #49210	; 0xc03a
   286f0:	movt	r1, #4
   286f4:	b	28740 <__assert_fail@plt+0x15cc4>
   286f8:	ldrd	r0, [sl, #8]
   286fc:	str	r1, [sp, #232]	; 0xe8
   28700:	str	r0, [sp, #236]	; 0xec
   28704:	b	28940 <__assert_fail@plt+0x15ec4>
   28708:	ldr	r2, [sl, #-56]	; 0xffffffc8
   2870c:	ldr	r0, [sl, #-52]	; 0xffffffcc
   28710:	str	r0, [sp, #228]	; 0xe4
   28714:	mov	r8, #0
   28718:	mov	ip, #0
   2871c:	mov	lr, #0
   28720:	mov	r3, #0
   28724:	mov	r0, #0
   28728:	str	r0, [sp, #224]	; 0xe0
   2872c:	mov	r0, #0
   28730:	str	r0, [sp, #216]	; 0xd8
   28734:	b	28918 <__assert_fail@plt+0x15e9c>
   28738:	movw	r1, #44777	; 0xaee9
   2873c:	movt	r1, #4
   28740:	mov	r0, #0
   28744:	str	r2, [sp, #196]	; 0xc4
   28748:	mov	r2, #5
   2874c:	str	lr, [sp, #184]	; 0xb8
   28750:	str	ip, [sp, #188]	; 0xbc
   28754:	str	r3, [sp, #192]	; 0xc0
   28758:	bl	1253c <dcgettext@plt>
   2875c:	ldr	r2, [sp, #196]	; 0xc4
   28760:	ldr	r3, [sp, #192]	; 0xc0
   28764:	ldr	lr, [sp, #184]	; 0xb8
   28768:	ldr	ip, [sp, #188]	; 0xbc
   2876c:	b	28940 <__assert_fail@plt+0x15ec4>
   28770:	ldr	r0, [sl]
   28774:	str	r0, [r4, #20]
   28778:	b	28940 <__assert_fail@plt+0x15ec4>
   2877c:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   28780:	str	r2, [sp, #196]	; 0xc4
   28784:	ldr	r2, [sp, #168]	; 0xa8
   28788:	strd	r0, [r2]
   2878c:	ldrd	r0, [sl, #8]
   28790:	ldr	r2, [sp, #164]	; 0xa4
   28794:	strd	r0, [r2]
   28798:	ldr	r2, [sp, #196]	; 0xc4
   2879c:	b	28940 <__assert_fail@plt+0x15ec4>
   287a0:	ldr	r0, [r4, #176]	; 0xb0
   287a4:	str	r9, [sp, #180]	; 0xb4
   287a8:	str	r2, [sp, #196]	; 0xc4
   287ac:	mov	r2, #0
   287b0:	str	r8, [sp, #156]	; 0x9c
   287b4:	mov	r8, #100	; 0x64
   287b8:	str	lr, [sp, #184]	; 0xb8
   287bc:	str	ip, [sp, #188]	; 0xbc
   287c0:	str	r3, [sp, #192]	; 0xc0
   287c4:	add	r0, r0, #1
   287c8:	str	r0, [r4, #176]	; 0xb0
   287cc:	ldr	r1, [sl, #-40]	; 0xffffffd8
   287d0:	ldr	r6, [sl, #4]
   287d4:	ldr	r0, [sl, #-48]	; 0xffffffd0
   287d8:	ldr	r9, [sl, #-44]	; 0xffffffd4
   287dc:	cmp	r1, #3
   287e0:	mov	r1, #0
   287e4:	movwlt	r1, #1
   287e8:	cmp	r6, #0
   287ec:	movwlt	r2, #1
   287f0:	ands	r1, r2, r1
   287f4:	mov	r2, r9
   287f8:	umull	r9, r1, r0, r8
   287fc:	mlane	r2, r2, r8, r1
   28800:	moveq	r9, r0
   28804:	cmn	r6, #1
   28808:	ble	29108 <__assert_fail@plt+0x1668c>
   2880c:	ldr	r0, [sl, #-56]	; 0xffffffc8
   28810:	ldr	ip, [sl]
   28814:	cmn	r2, #1
   28818:	str	r7, [sp, #176]	; 0xb0
   2881c:	str	r5, [sp, #172]	; 0xac
   28820:	str	r0, [sp, #72]	; 0x48
   28824:	ble	29588 <__assert_fail@plt+0x16b0c>
   28828:	movw	r1, #8738	; 0x2222
   2882c:	movw	r0, #8738	; 0x2222
   28830:	mov	r3, #1
   28834:	mov	r5, r9
   28838:	movt	r1, #8738	; 0x2222
   2883c:	movt	r0, #546	; 0x222
   28840:	subs	r1, r1, r9
   28844:	sbcs	r0, r0, r2
   28848:	bge	29598 <__assert_fail@plt+0x16b1c>
   2884c:	b	2976c <__assert_fail@plt+0x16cf0>
   28850:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   28854:	str	r0, [sp, #236]	; 0xec
   28858:	mov	r0, #0
   2885c:	str	r1, [sp, #232]	; 0xe8
   28860:	mov	r8, #0
   28864:	mov	ip, #0
   28868:	mov	lr, #0
   2886c:	mov	r3, #0
   28870:	mov	r2, #0
   28874:	str	r0, [sp, #228]	; 0xe4
   28878:	mov	r0, #0
   2887c:	str	r0, [sp, #224]	; 0xe0
   28880:	mov	r0, #0
   28884:	str	r0, [sp, #216]	; 0xd8
   28888:	mov	r0, #0
   2888c:	str	r0, [sp, #220]	; 0xdc
   28890:	mov	r0, #0
   28894:	str	r0, [sp, #212]	; 0xd4
   28898:	mov	r0, #0
   2889c:	str	r0, [sp, #208]	; 0xd0
   288a0:	b	28940 <__assert_fail@plt+0x15ec4>
   288a4:	movw	r0, #40336	; 0x9d90
   288a8:	movt	r0, #65535	; 0xffff
   288ac:	str	r0, [r4, #24]
   288b0:	b	28940 <__assert_fail@plt+0x15ec4>
   288b4:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   288b8:	str	r0, [sp, #220]	; 0xdc
   288bc:	mov	r0, #0
   288c0:	str	r1, [sp, #212]	; 0xd4
   288c4:	mov	r8, #0
   288c8:	mov	ip, #0
   288cc:	mov	lr, #0
   288d0:	mov	r3, #0
   288d4:	mov	r2, #0
   288d8:	str	r0, [sp, #228]	; 0xe4
   288dc:	mov	r0, #0
   288e0:	str	r0, [sp, #224]	; 0xe0
   288e4:	mov	r0, #0
   288e8:	str	r0, [sp, #216]	; 0xd8
   288ec:	b	28928 <__assert_fail@plt+0x15eac>
   288f0:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   288f4:	str	r0, [sp, #224]	; 0xe0
   288f8:	mov	r0, #0
   288fc:	str	r1, [sp, #216]	; 0xd8
   28900:	mov	r8, #0
   28904:	mov	ip, #0
   28908:	mov	lr, #0
   2890c:	mov	r3, #0
   28910:	mov	r2, #0
   28914:	str	r0, [sp, #228]	; 0xe4
   28918:	mov	r0, #0
   2891c:	str	r0, [sp, #220]	; 0xdc
   28920:	mov	r0, #0
   28924:	str	r0, [sp, #212]	; 0xd4
   28928:	mov	r0, #0
   2892c:	str	r0, [sp, #208]	; 0xd0
   28930:	mov	r0, #0
   28934:	str	r0, [sp, #236]	; 0xec
   28938:	mov	r0, #0
   2893c:	str	r0, [sp, #232]	; 0xe8
   28940:	sub	r0, r7, r7, lsl #3
   28944:	sub	r1, fp, #112	; 0x70
   28948:	add	sl, sl, r0, lsl #3
   2894c:	ldr	r0, [sp, #236]	; 0xec
   28950:	str	r0, [sl, #56]!	; 0x38
   28954:	ldr	r0, [sp, #232]	; 0xe8
   28958:	stmib	sl, {r0, r8, ip, lr}
   2895c:	str	r3, [sl, #20]
   28960:	str	r2, [sl, #24]
   28964:	movw	r3, #47428	; 0xb944
   28968:	ldr	r0, [sp, #228]	; 0xe4
   2896c:	movt	r3, #4
   28970:	str	r0, [sl, #28]
   28974:	ldr	r0, [sp, #224]	; 0xe0
   28978:	str	r0, [sl, #32]
   2897c:	ldr	r0, [sp, #216]	; 0xd8
   28980:	str	r0, [sl, #36]	; 0x24
   28984:	ldr	r0, [sp, #220]	; 0xdc
   28988:	str	r0, [sl, #40]	; 0x28
   2898c:	ldr	r0, [sp, #212]	; 0xd4
   28990:	str	r0, [sl, #44]	; 0x2c
   28994:	ldr	r0, [sp, #208]	; 0xd0
   28998:	str	r0, [sl, #48]	; 0x30
   2899c:	ldr	r0, [sp, #200]	; 0xc8
   289a0:	str	r0, [sl, #52]	; 0x34
   289a4:	sub	r0, r9, r7
   289a8:	add	r1, r1, r0, lsl #1
   289ac:	ldrsh	r2, [r1]
   289b0:	movw	r1, #47336	; 0xb8e8
   289b4:	movt	r1, #4
   289b8:	ldrb	r1, [r1, r5]
   289bc:	sub	r1, r1, #28
   289c0:	add	r3, r3, r1
   289c4:	ldrsb	r3, [r3]
   289c8:	add	r3, r2, r3
   289cc:	cmp	r3, #112	; 0x70
   289d0:	bhi	28a00 <__assert_fail@plt+0x15f84>
   289d4:	movw	r6, #46904	; 0xb738
   289d8:	movt	r6, #4
   289dc:	add	r7, r6, r3
   289e0:	ldrsb	r7, [r7]
   289e4:	cmp	r7, r2
   289e8:	bne	28a00 <__assert_fail@plt+0x15f84>
   289ec:	movw	r1, #47017	; 0xb7a9
   289f0:	ldr	r7, [sp, #204]	; 0xcc
   289f4:	movt	r1, #4
   289f8:	ldrb	r8, [r1, r3]
   289fc:	b	28a14 <__assert_fail@plt+0x15f98>
   28a00:	movw	r2, #47454	; 0xb95e
   28a04:	ldr	r7, [sp, #204]	; 0xcc
   28a08:	movt	r2, #4
   28a0c:	add	r1, r2, r1
   28a10:	ldrsb	r8, [r1]
   28a14:	add	r9, r0, #1
   28a18:	sub	r1, fp, #112	; 0x70
   28a1c:	cmp	r0, #17
   28a20:	add	r1, r1, r9, lsl #1
   28a24:	strh	r8, [r1]
   28a28:	ble	264a8 <__assert_fail@plt+0x13a2c>
   28a2c:	b	29c10 <__assert_fail@plt+0x17194>
   28a30:	mov	r1, sl
   28a34:	ldr	r6, [r4, #156]	; 0x9c
   28a38:	str	r2, [sp, #196]	; 0xc4
   28a3c:	vld1.64	{d16-d17}, [r1]!
   28a40:	cmp	r6, #0
   28a44:	ldr	r0, [r1]
   28a48:	str	r0, [sp, #72]	; 0x48
   28a4c:	beq	28a90 <__assert_fail@plt+0x16014>
   28a50:	ldr	r2, [sp, #92]	; 0x5c
   28a54:	ldr	r2, [r2]
   28a58:	cmp	r2, #0
   28a5c:	bne	28a90 <__assert_fail@plt+0x16014>
   28a60:	ldrb	r2, [r4, #153]	; 0x99
   28a64:	cmp	r2, #0
   28a68:	ldr	r2, [sp, #196]	; 0xc4
   28a6c:	bne	28a90 <__assert_fail@plt+0x16014>
   28a70:	ldr	r0, [sp, #72]	; 0x48
   28a74:	ldr	r1, [r1, #4]
   28a78:	cmp	r0, #2
   28a7c:	bgt	2988c <__assert_fail@plt+0x16e10>
   28a80:	ldr	r2, [r4, #172]	; 0xac
   28a84:	cmp	r2, #0
   28a88:	ldr	r2, [sp, #196]	; 0xc4
   28a8c:	bne	2988c <__assert_fail@plt+0x16e10>
   28a90:	add	r0, sp, #172	; 0xac
   28a94:	stm	r0, {r5, r7, r9}
   28a98:	str	r3, [sp, #192]	; 0xc0
   28a9c:	ldr	r5, [sp, #72]	; 0x48
   28aa0:	cmp	r5, #5
   28aa4:	blt	28d04 <__assert_fail@plt+0x16288>
   28aa8:	add	r0, r6, #1
   28aac:	vmov.32	r9, d17[1]
   28ab0:	vmov.32	r7, d17[0]
   28ab4:	mov	r2, #100	; 0x64
   28ab8:	mov	r3, #0
   28abc:	mov	r6, #100	; 0x64
   28ac0:	str	lr, [sp, #184]	; 0xb8
   28ac4:	str	ip, [sp, #188]	; 0xbc
   28ac8:	str	r0, [r4, #156]	; 0x9c
   28acc:	mov	r0, r7
   28ad0:	mov	r1, r9
   28ad4:	bl	46628 <__assert_fail@plt+0x33bac>
   28ad8:	umull	r2, r3, r0, r6
   28adc:	mla	r3, r1, r6, r3
   28ae0:	ldr	r6, [sp, #164]	; 0xa4
   28ae4:	subs	r2, r7, r2
   28ae8:	sbc	r3, r9, r3
   28aec:	strd	r2, [r6]
   28af0:	mov	r2, #100	; 0x64
   28af4:	mov	r3, #0
   28af8:	bl	46628 <__assert_fail@plt+0x33bac>
   28afc:	mov	r0, r2
   28b00:	ldr	r2, [sp, #168]	; 0xa8
   28b04:	mov	r1, r3
   28b08:	mov	r3, #0
   28b0c:	strd	r0, [r2]
   28b10:	mov	r0, r7
   28b14:	mov	r1, r9
   28b18:	movw	r2, #10000	; 0x2710
   28b1c:	bl	46628 <__assert_fail@plt+0x33bac>
   28b20:	ldr	r2, [sp, #88]	; 0x58
   28b24:	ldr	r3, [sp, #192]	; 0xc0
   28b28:	ldr	lr, [sp, #184]	; 0xb8
   28b2c:	ldr	ip, [sp, #188]	; 0xbc
   28b30:	strd	r0, [r2]
   28b34:	ldr	r0, [sp, #72]	; 0x48
   28b38:	ldr	r2, [sp, #196]	; 0xc4
   28b3c:	sub	r0, r0, #4
   28b40:	str	r0, [r4, #48]	; 0x30
   28b44:	b	28e1c <__assert_fail@plt+0x163a0>
   28b48:	mov	r8, #0
   28b4c:	mov	r2, #1
   28b50:	mov	ip, #0
   28b54:	mov	lr, #0
   28b58:	mov	r3, #0
   28b5c:	b	286e0 <__assert_fail@plt+0x15c64>
   28b60:	ldr	r1, [sp, #96]	; 0x60
   28b64:	mov	r0, #0
   28b68:	str	r0, [r1]
   28b6c:	str	r0, [r1, #4]
   28b70:	ldr	r0, [sl]
   28b74:	str	r0, [r4, #16]
   28b78:	b	28940 <__assert_fail@plt+0x15ec4>
   28b7c:	ldr	r1, [sp, #96]	; 0x60
   28b80:	mov	r0, #0
   28b84:	str	r0, [r1]
   28b88:	str	r0, [r1, #4]
   28b8c:	ldr	r0, [sl, #-56]	; 0xffffffc8
   28b90:	str	r0, [r4, #16]
   28b94:	b	28940 <__assert_fail@plt+0x15ec4>
   28b98:	str	r2, [sp, #196]	; 0xc4
   28b9c:	ldrd	r0, [sl, #-168]	; 0xffffff58
   28ba0:	b	28ca0 <__assert_fail@plt+0x16224>
   28ba4:	str	r2, [sp, #196]	; 0xc4
   28ba8:	ldrd	r0, [sl, #-104]	; 0xffffff98
   28bac:	ldr	r2, [sp, #164]	; 0xa4
   28bb0:	str	r3, [sp, #192]	; 0xc0
   28bb4:	strd	r0, [r2]
   28bb8:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   28bbc:	ldr	r2, [sp, #168]	; 0xa8
   28bc0:	strd	r0, [r2]
   28bc4:	ldrd	r0, [sl, #8]
   28bc8:	ldr	r2, [sp, #88]	; 0x58
   28bcc:	rsbs	r0, r0, #0
   28bd0:	rsc	r3, r1, #0
   28bd4:	stm	r2, {r0, r3}
   28bd8:	and	r0, r1, r3
   28bdc:	cmp	r0, #0
   28be0:	blt	29c08 <__assert_fail@plt+0x1718c>
   28be4:	ldr	r0, [sl, #16]
   28be8:	ldr	r1, [sp, #92]	; 0x5c
   28bec:	str	r0, [r1]
   28bf0:	b	29564 <__assert_fail@plt+0x16ae8>
   28bf4:	mov	r0, #1
   28bf8:	mov	r8, #0
   28bfc:	mov	ip, #0
   28c00:	mov	lr, #0
   28c04:	mov	r3, #0
   28c08:	mov	r2, #0
   28c0c:	str	r0, [sp, #220]	; 0xdc
   28c10:	mov	r0, #0
   28c14:	str	r0, [sp, #228]	; 0xe4
   28c18:	mov	r0, #0
   28c1c:	str	r0, [sp, #224]	; 0xe0
   28c20:	mov	r0, #0
   28c24:	str	r0, [sp, #216]	; 0xd8
   28c28:	b	28920 <__assert_fail@plt+0x15ea4>
   28c2c:	mov	r0, #1
   28c30:	mov	r8, #0
   28c34:	mov	ip, #0
   28c38:	mov	lr, #0
   28c3c:	mov	r3, #0
   28c40:	mov	r2, #0
   28c44:	str	r0, [sp, #224]	; 0xe0
   28c48:	mov	r0, #0
   28c4c:	str	r0, [sp, #228]	; 0xe4
   28c50:	b	2872c <__assert_fail@plt+0x15cb0>
   28c54:	ldr	r6, [sl, #-48]	; 0xffffffd0
   28c58:	ldr	r8, [sl, #-44]	; 0xffffffd4
   28c5c:	cmn	r8, #1
   28c60:	ble	28d9c <__assert_fail@plt+0x16320>
   28c64:	and	r0, r2, r3
   28c68:	cmn	r0, #1
   28c6c:	beq	28dc4 <__assert_fail@plt+0x16348>
   28c70:	mov	r0, #0
   28c74:	mov	r1, #-2147483648	; 0x80000000
   28c78:	mov	r5, r2
   28c7c:	mov	r7, r3
   28c80:	bl	46628 <__assert_fail@plt+0x33bac>
   28c84:	subs	r0, r0, r6
   28c88:	mov	r3, r7
   28c8c:	mov	r2, r5
   28c90:	sbcs	r0, r1, r8
   28c94:	bge	28dc4 <__assert_fail@plt+0x16348>
   28c98:	b	29c08 <__assert_fail@plt+0x1718c>
   28c9c:	ldrd	r0, [sl, #-216]	; 0xffffff28
   28ca0:	ldr	r2, [sp, #168]	; 0xa8
   28ca4:	strd	r0, [r2]
   28ca8:	ldrd	r0, [sl, #-104]	; 0xffffff98
   28cac:	ldr	r2, [sp, #164]	; 0xa4
   28cb0:	strd	r0, [r2]
   28cb4:	mov	r0, sl
   28cb8:	vld1.64	{d16-d17}, [r0]!
   28cbc:	ldr	r2, [sp, #196]	; 0xc4
   28cc0:	vldr	d18, [r0]
   28cc4:	ldr	r0, [sp, #100]	; 0x64
   28cc8:	vst1.64	{d16-d17}, [r0]!
   28ccc:	vstr	d18, [r0]
   28cd0:	b	28940 <__assert_fail@plt+0x15ec4>
   28cd4:	ldr	r0, [r4, #172]	; 0xac
   28cd8:	vmov.32	r6, d17[1]
   28cdc:	mov	r8, #0
   28ce0:	cmp	r9, #3
   28ce4:	add	r0, r0, #1
   28ce8:	str	r0, [r4, #172]	; 0xac
   28cec:	vmov.32	r0, d17[0]
   28cf0:	bge	29150 <__assert_fail@plt+0x166d4>
   28cf4:	mov	r1, r6
   28cf8:	mov	r2, #0
   28cfc:	mov	r3, #0
   28d00:	b	29178 <__assert_fail@plt+0x166fc>
   28d04:	ldr	r0, [r4, #172]	; 0xac
   28d08:	str	r8, [sp, #156]	; 0x9c
   28d0c:	vmov.32	r7, d17[1]
   28d10:	vmov.32	r8, d17[0]
   28d14:	mov	r9, #0
   28d18:	cmp	r5, #3
   28d1c:	add	r0, r0, #1
   28d20:	str	r0, [r4, #172]	; 0xac
   28d24:	bge	29500 <__assert_fail@plt+0x16a84>
   28d28:	mov	r0, r8
   28d2c:	mov	r1, r7
   28d30:	mov	r2, #0
   28d34:	mov	r3, #0
   28d38:	b	29538 <__assert_fail@plt+0x16abc>
   28d3c:	and	r0, r5, r7
   28d40:	mvn	r6, #0
   28d44:	mvn	r8, #0
   28d48:	cmn	r0, #1
   28d4c:	beq	28dc4 <__assert_fail@plt+0x16348>
   28d50:	mov	r8, r2
   28d54:	mov	r6, r3
   28d58:	mov	r0, #0
   28d5c:	mov	r1, #-2147483648	; 0x80000000
   28d60:	mov	r2, r5
   28d64:	mov	r3, r7
   28d68:	bl	46628 <__assert_fail@plt+0x33bac>
   28d6c:	subs	r0, r0, r8
   28d70:	mov	r2, r8
   28d74:	mov	r3, r6
   28d78:	mov	r8, r7
   28d7c:	sbcs	r0, r1, r6
   28d80:	mov	r6, r5
   28d84:	bge	28dc4 <__assert_fail@plt+0x16348>
   28d88:	b	29c08 <__assert_fail@plt+0x1718c>
   28d8c:	ldr	r6, [sl, #-56]	; 0xffffffc8
   28d90:	ldr	r8, [sl, #-52]	; 0xffffffcc
   28d94:	cmn	r8, #1
   28d98:	bgt	28c64 <__assert_fail@plt+0x161e8>
   28d9c:	mvn	r0, #0
   28da0:	mvn	r1, #-2147483648	; 0x80000000
   28da4:	mov	r5, r2
   28da8:	mov	r7, r3
   28dac:	bl	46628 <__assert_fail@plt+0x33bac>
   28db0:	subs	r0, r6, r0
   28db4:	mov	r3, r7
   28db8:	mov	r2, r5
   28dbc:	sbcs	r0, r8, r1
   28dc0:	blt	29c08 <__assert_fail@plt+0x1718c>
   28dc4:	umull	lr, r0, r6, r2
   28dc8:	mov	ip, #0
   28dcc:	mla	r0, r6, r3, r0
   28dd0:	mla	r3, r8, r2, r0
   28dd4:	mov	r0, #0
   28dd8:	mov	r8, #0
   28ddc:	mov	r2, #0
   28de0:	str	r0, [sp, #228]	; 0xe4
   28de4:	mov	r0, #0
   28de8:	str	r0, [sp, #224]	; 0xe0
   28dec:	mov	r0, #0
   28df0:	str	r0, [sp, #216]	; 0xd8
   28df4:	mov	r0, #0
   28df8:	str	r0, [sp, #220]	; 0xdc
   28dfc:	mov	r0, #0
   28e00:	str	r0, [sp, #212]	; 0xd4
   28e04:	mov	r0, #0
   28e08:	str	r0, [sp, #208]	; 0xd0
   28e0c:	mov	r0, #0
   28e10:	str	r0, [sp, #236]	; 0xec
   28e14:	mov	r0, #0
   28e18:	str	r0, [sp, #232]	; 0xe8
   28e1c:	add	r9, sp, #172	; 0xac
   28e20:	ldm	r9, {r5, r7, r9}
   28e24:	b	28940 <__assert_fail@plt+0x15ec4>
   28e28:	sub	r3, r7, r0
   28e2c:	str	r0, [sp, #44]	; 0x2c
   28e30:	ldr	r0, [sp, #104]	; 0x68
   28e34:	str	r3, [r4, #144]	; 0x90
   28e38:	ldm	r0, {r3, r7}
   28e3c:	subs	r1, r3, r1
   28e40:	sbc	r3, r7, r9
   28e44:	stm	r0, {r1, r3}
   28e48:	ldr	r2, [sp, #108]	; 0x6c
   28e4c:	ldm	r2, {r0, r9}
   28e50:	subs	r0, r0, r8
   28e54:	sbc	r1, r9, r5
   28e58:	str	r1, [sp, #8]
   28e5c:	strd	r0, [r2]
   28e60:	ldr	r2, [sp, #112]	; 0x70
   28e64:	ldrd	r0, [r2]
   28e68:	subs	r0, r0, ip
   28e6c:	str	r1, [sp, #12]
   28e70:	sbc	r1, r1, lr
   28e74:	str	r1, [sp, #16]
   28e78:	strd	r0, [r2]
   28e7c:	ldr	r2, [sp, #116]	; 0x74
   28e80:	ldrd	r0, [r2]
   28e84:	subs	r0, r0, r6
   28e88:	ldr	r6, [sp, #72]	; 0x48
   28e8c:	str	r1, [sp, #20]
   28e90:	sbc	r1, r1, r6
   28e94:	str	r1, [sp, #28]
   28e98:	strd	r0, [r2]
   28e9c:	ldr	r2, [sp, #120]	; 0x78
   28ea0:	ldr	r6, [sp, #52]	; 0x34
   28ea4:	ldr	ip, [sp, #64]	; 0x40
   28ea8:	ldrd	r0, [r2]
   28eac:	subs	r0, r0, r6
   28eb0:	str	r1, [sp, #36]	; 0x24
   28eb4:	sbc	r1, r1, ip
   28eb8:	str	r1, [sp, #40]	; 0x28
   28ebc:	strd	r0, [r2]
   28ec0:	ldr	r2, [sp, #124]	; 0x7c
   28ec4:	ldr	r6, [sp, #56]	; 0x38
   28ec8:	ldrd	r0, [r2]
   28ecc:	subs	r8, r0, r6
   28ed0:	ldr	r0, [sp, #68]	; 0x44
   28ed4:	str	r1, [sp, #52]	; 0x34
   28ed8:	sbc	r6, r1, r0
   28edc:	mov	r1, #0
   28ee0:	str	r6, [sp, #56]	; 0x38
   28ee4:	str	r8, [r2]
   28ee8:	str	r6, [r2, #4]
   28eec:	mov	r2, #0
   28ef0:	mov	r6, #0
   28ef4:	ldr	r0, [sp, #48]	; 0x30
   28ef8:	cmn	r0, #1
   28efc:	mov	r0, #0
   28f00:	movwgt	r0, #1
   28f04:	cmn	r7, #1
   28f08:	ldr	r7, [sp, #68]	; 0x44
   28f0c:	movwgt	r2, #1
   28f10:	subs	r0, r2, r0
   28f14:	movwne	r0, #1
   28f18:	cmn	r3, #1
   28f1c:	ldr	r3, [sp, #36]	; 0x24
   28f20:	str	r0, [sp, #48]	; 0x30
   28f24:	mov	r0, #0
   28f28:	movwgt	r0, #1
   28f2c:	subs	r0, r2, r0
   28f30:	ldr	r2, [sp, #28]
   28f34:	movwne	r0, #1
   28f38:	cmn	r5, #1
   28f3c:	mov	r5, #0
   28f40:	str	r0, [sp, #4]
   28f44:	mov	r0, #0
   28f48:	movwgt	r0, #1
   28f4c:	cmn	r9, #1
   28f50:	movwgt	r1, #1
   28f54:	subs	r0, r1, r0
   28f58:	movwne	r0, #1
   28f5c:	str	r0, [sp, #24]
   28f60:	ldr	r0, [sp, #8]
   28f64:	cmn	r0, #1
   28f68:	mov	r0, #0
   28f6c:	movwgt	r0, #1
   28f70:	subs	r0, r1, r0
   28f74:	ldr	r1, [sp, #12]
   28f78:	movwne	r0, #1
   28f7c:	cmn	lr, #1
   28f80:	str	r0, [sp, #8]
   28f84:	mov	r0, #0
   28f88:	movwgt	r0, #1
   28f8c:	cmn	r1, #1
   28f90:	mov	r1, #0
   28f94:	movwgt	r1, #1
   28f98:	subs	r8, r1, r0
   28f9c:	ldr	r0, [sp, #16]
   28fa0:	movwne	r8, #1
   28fa4:	cmn	r0, #1
   28fa8:	mov	r0, #0
   28fac:	movwgt	r0, #1
   28fb0:	subs	r9, r1, r0
   28fb4:	ldr	r0, [sp, #72]	; 0x48
   28fb8:	ldr	r1, [sp, #20]
   28fbc:	movwne	r9, #1
   28fc0:	cmn	r0, #1
   28fc4:	mov	r0, #0
   28fc8:	movwgt	r0, #1
   28fcc:	cmn	r1, #1
   28fd0:	mov	r1, #0
   28fd4:	movwgt	r1, #1
   28fd8:	subs	r0, r1, r0
   28fdc:	movwne	r0, #1
   28fe0:	cmn	r2, #1
   28fe4:	mov	r2, #0
   28fe8:	movwgt	r2, #1
   28fec:	subs	r2, r1, r2
   28ff0:	mov	r1, #0
   28ff4:	movwne	r2, #1
   28ff8:	cmn	ip, #1
   28ffc:	movwgt	r1, #1
   29000:	cmn	r3, #1
   29004:	movwgt	r6, #1
   29008:	subs	r3, r6, r1
   2900c:	ldr	r1, [sp, #40]	; 0x28
   29010:	movwne	r3, #1
   29014:	cmn	r1, #1
   29018:	mov	r1, #0
   2901c:	movwgt	r1, #1
   29020:	subs	r1, r6, r1
   29024:	mov	r6, #0
   29028:	movwne	r1, #1
   2902c:	cmn	r7, #1
   29030:	ldr	r7, [sp, #52]	; 0x34
   29034:	movwgt	r6, #1
   29038:	cmn	r7, #1
   2903c:	ldr	r7, [sp, #56]	; 0x38
   29040:	movwgt	r5, #1
   29044:	subs	ip, r5, r6
   29048:	ldr	r6, [sp, #44]	; 0x2c
   2904c:	movwne	ip, #1
   29050:	cmn	r7, #1
   29054:	mov	r7, #0
   29058:	movwgt	r7, #1
   2905c:	subs	lr, r5, r7
   29060:	ldr	r5, [sp, #60]	; 0x3c
   29064:	movwne	lr, #1
   29068:	cmp	r5, r6
   2906c:	bvs	29c08 <__assert_fail@plt+0x1718c>
   29070:	ldr	r5, [sp, #48]	; 0x30
   29074:	ldr	r6, [sp, #4]
   29078:	ands	r5, r5, r6
   2907c:	bne	29c08 <__assert_fail@plt+0x1718c>
   29080:	ldr	r5, [sp, #24]
   29084:	ldr	r6, [sp, #8]
   29088:	mov	r7, r8
   2908c:	ldr	r8, [sp, #156]	; 0x9c
   29090:	ands	r5, r5, r6
   29094:	bne	29c08 <__assert_fail@plt+0x1718c>
   29098:	ands	r5, r7, r9
   2909c:	bne	29c08 <__assert_fail@plt+0x1718c>
   290a0:	add	r9, sp, #172	; 0xac
   290a4:	ands	r0, r0, r2
   290a8:	ldm	r9, {r5, r7, r9}
   290ac:	bne	29c08 <__assert_fail@plt+0x1718c>
   290b0:	ands	r0, r3, r1
   290b4:	bne	29c08 <__assert_fail@plt+0x1718c>
   290b8:	ands	r0, ip, lr
   290bc:	b	27db4 <__assert_fail@plt+0x15338>
   290c0:	mov	r0, r9
   290c4:	mov	r1, r2
   290c8:	mov	r6, r2
   290cc:	mov	r2, #100	; 0x64
   290d0:	mov	r3, #0
   290d4:	bl	46628 <__assert_fail@plt+0x33bac>
   290d8:	umull	r2, r3, r0, r8
   290dc:	mla	r3, r1, r8, r3
   290e0:	subs	r2, r9, r2
   290e4:	rsb	r1, r1, r1, lsl #4
   290e8:	sbc	r3, r6, r3
   290ec:	mov	r6, #60	; 0x3c
   290f0:	umull	r0, r6, r0, r6
   290f4:	adds	r0, r0, r2
   290f8:	add	r1, r6, r1, lsl #2
   290fc:	mov	r2, #1
   29100:	adc	r6, r1, r3
   29104:	b	29684 <__assert_fail@plt+0x16c08>
   29108:	mov	r0, r9
   2910c:	mov	r1, r2
   29110:	mov	r6, r2
   29114:	mov	r2, #100	; 0x64
   29118:	mov	r3, #0
   2911c:	bl	46628 <__assert_fail@plt+0x33bac>
   29120:	umull	r2, r3, r0, r8
   29124:	mla	r3, r1, r8, r3
   29128:	subs	r2, r9, r2
   2912c:	rsb	r1, r1, r1, lsl #4
   29130:	sbc	r3, r6, r3
   29134:	mov	r6, #60	; 0x3c
   29138:	umull	r0, r6, r0, r6
   2913c:	adds	r0, r0, r2
   29140:	add	r1, r6, r1, lsl #2
   29144:	mov	r2, #1
   29148:	adc	r6, r1, r3
   2914c:	b	29820 <__assert_fail@plt+0x16da4>
   29150:	mov	r1, r6
   29154:	mov	r2, #100	; 0x64
   29158:	mov	r3, #0
   2915c:	mov	r9, r0
   29160:	bl	46628 <__assert_fail@plt+0x33bac>
   29164:	mov	ip, #100	; 0x64
   29168:	umull	r2, r3, r0, ip
   2916c:	mla	r3, r1, ip, r3
   29170:	subs	r2, r9, r2
   29174:	sbc	r3, r6, r3
   29178:	ldr	r6, [sp, #140]	; 0x8c
   2917c:	strd	r0, [r6]
   29180:	ldr	r0, [sp, #144]	; 0x90
   29184:	strd	r2, [r0]
   29188:	mov	r0, #2
   2918c:	str	r8, [r4, #88]	; 0x58
   29190:	str	r8, [r4, #92]	; 0x5c
   29194:	str	r0, [r4, #28]
   29198:	ldr	r1, [r4, #144]	; 0x90
   2919c:	ldr	r0, [sl, #48]	; 0x30
   291a0:	ldr	lr, [sl, #20]
   291a4:	ldr	r3, [sl, #28]
   291a8:	ldr	r2, [sl, #44]	; 0x2c
   291ac:	ldr	r8, [sl, #12]
   291b0:	ldr	ip, [sl, #32]
   291b4:	ldr	r9, [sl, #40]	; 0x28
   291b8:	add	r0, r1, r0
   291bc:	str	r1, [sp, #68]	; 0x44
   291c0:	ldr	r1, [sl]
   291c4:	str	lr, [sp, #52]	; 0x34
   291c8:	str	r3, [sp, #40]	; 0x28
   291cc:	str	r2, [sp, #24]
   291d0:	str	r0, [sp, #64]	; 0x40
   291d4:	str	r1, [sp, #60]	; 0x3c
   291d8:	ldr	r1, [sl, #4]
   291dc:	str	r1, [sp, #72]	; 0x48
   291e0:	ldr	r1, [sl, #8]
   291e4:	str	r1, [sp, #56]	; 0x38
   291e8:	ldr	r1, [sl, #16]
   291ec:	str	r1, [sp, #48]	; 0x30
   291f0:	ldr	r1, [sl, #24]
   291f4:	str	r1, [sp, #44]	; 0x2c
   291f8:	ldr	r1, [sl, #36]	; 0x24
   291fc:	str	r0, [r4, #144]	; 0x90
   29200:	ldr	r0, [sp, #104]	; 0x68
   29204:	str	r1, [sp, #32]
   29208:	ldm	r0, {r5, r7}
   2920c:	adds	r9, r5, r9
   29210:	adc	r5, r7, r2
   29214:	str	r9, [r0]
   29218:	str	r5, [r0, #4]
   2921c:	ldr	r0, [sp, #108]	; 0x6c
   29220:	ldm	r0, {r2, r9}
   29224:	adds	r2, r2, ip
   29228:	adc	r1, r9, r1
   2922c:	str	r1, [sp, #20]
   29230:	str	r2, [r0]
   29234:	str	r1, [r0, #4]
   29238:	ldr	r0, [sp, #112]	; 0x70
   2923c:	ldr	r2, [r0]
   29240:	ldr	r1, [r0, #4]
   29244:	ldr	r6, [sp, #44]	; 0x2c
   29248:	adds	ip, r2, r6
   2924c:	str	r1, [sp, #28]
   29250:	adc	r2, r1, r3
   29254:	str	ip, [r0]
   29258:	str	r2, [r0, #4]
   2925c:	ldr	r0, [sp, #116]	; 0x74
   29260:	ldr	ip, [r0]
   29264:	ldr	r1, [r0, #4]
   29268:	ldr	r3, [sp, #48]	; 0x30
   2926c:	adds	ip, ip, r3
   29270:	str	r1, [sp, #36]	; 0x24
   29274:	adc	r1, r1, lr
   29278:	str	r1, [sp, #44]	; 0x2c
   2927c:	str	ip, [r0]
   29280:	str	r1, [r0, #4]
   29284:	ldr	ip, [sp, #120]	; 0x78
   29288:	ldr	r3, [sp, #56]	; 0x38
   2928c:	ldrd	r0, [ip]
   29290:	adds	r0, r0, r3
   29294:	str	r1, [sp, #48]	; 0x30
   29298:	adc	lr, r1, r8
   2929c:	stm	ip, {r0, lr}
   292a0:	ldr	ip, [sp, #124]	; 0x7c
   292a4:	ldr	r3, [sp, #60]	; 0x3c
   292a8:	ldrd	r0, [ip]
   292ac:	adds	r0, r0, r3
   292b0:	ldr	r3, [sp, #72]	; 0x48
   292b4:	str	r1, [sp, #56]	; 0x38
   292b8:	adc	r3, r1, r3
   292bc:	cmn	r7, #1
   292c0:	mov	r1, #0
   292c4:	mov	r7, #0
   292c8:	str	r3, [sp, #60]	; 0x3c
   292cc:	stm	ip, {r0, r3}
   292d0:	mov	r3, #0
   292d4:	mov	r0, #0
   292d8:	mov	ip, #0
   292dc:	movwgt	r3, #1
   292e0:	cmn	r5, #1
   292e4:	mov	r5, #0
   292e8:	movwgt	r0, #1
   292ec:	str	r3, [sp, #16]
   292f0:	subs	r0, r3, r0
   292f4:	ldr	r3, [sp, #68]	; 0x44
   292f8:	movwne	r0, #1
   292fc:	str	r0, [sp, #12]
   29300:	ldr	r0, [sp, #24]
   29304:	cmn	r0, #1
   29308:	mov	r0, #0
   2930c:	movwgt	r0, #1
   29310:	cmn	r9, #1
   29314:	mov	r9, #0
   29318:	str	r0, [sp, #24]
   2931c:	ldr	r0, [sp, #20]
   29320:	movwgt	r1, #1
   29324:	str	r1, [sp, #20]
   29328:	cmn	r0, #1
   2932c:	mov	r0, #0
   29330:	movwgt	r0, #1
   29334:	subs	r0, r1, r0
   29338:	mov	r1, #0
   2933c:	movwne	r0, #1
   29340:	str	r0, [sp, #8]
   29344:	ldr	r0, [sp, #32]
   29348:	cmn	r0, #1
   2934c:	mov	r0, #0
   29350:	movwgt	r0, #1
   29354:	str	r0, [sp, #32]
   29358:	ldr	r0, [sp, #28]
   2935c:	cmn	r0, #1
   29360:	mov	r0, #0
   29364:	movwgt	r1, #1
   29368:	cmn	r2, #1
   2936c:	mov	r2, #0
   29370:	movwgt	r0, #1
   29374:	str	r1, [sp, #28]
   29378:	subs	r0, r1, r0
   2937c:	mov	r1, #0
   29380:	movwne	r0, #1
   29384:	str	r0, [sp, #4]
   29388:	ldr	r0, [sp, #40]	; 0x28
   2938c:	cmn	r0, #1
   29390:	ldr	r0, [sp, #36]	; 0x24
   29394:	movwgt	r7, #1
   29398:	cmn	r0, #1
   2939c:	ldr	r0, [sp, #44]	; 0x2c
   293a0:	movwgt	r9, #1
   293a4:	cmn	r0, #1
   293a8:	movwgt	r1, #1
   293ac:	subs	r0, r9, r1
   293b0:	mov	r1, #0
   293b4:	movwne	r0, #1
   293b8:	str	r0, [sp, #44]	; 0x2c
   293bc:	ldr	r0, [sp, #52]	; 0x34
   293c0:	cmn	r0, #1
   293c4:	ldr	r0, [sp, #48]	; 0x30
   293c8:	movwgt	ip, #1
   293cc:	cmn	r0, #1
   293d0:	ldr	r0, [sp, #56]	; 0x38
   293d4:	movwgt	r2, #1
   293d8:	cmn	lr, #1
   293dc:	movwgt	r1, #1
   293e0:	subs	r6, r2, r1
   293e4:	mov	r1, #0
   293e8:	movwne	r6, #1
   293ec:	cmn	r8, #1
   293f0:	mov	r8, #0
   293f4:	movwgt	r8, #1
   293f8:	cmn	r0, #1
   293fc:	ldr	r0, [sp, #60]	; 0x3c
   29400:	movwgt	r5, #1
   29404:	cmn	r0, #1
   29408:	ldr	r0, [sp, #72]	; 0x48
   2940c:	movwgt	r1, #1
   29410:	subs	r1, r5, r1
   29414:	movwne	r1, #1
   29418:	cmn	r0, #1
   2941c:	mov	r0, #0
   29420:	movwgt	r0, #1
   29424:	str	r0, [sp, #72]	; 0x48
   29428:	ldr	r0, [sp, #64]	; 0x40
   2942c:	cmp	r0, r3
   29430:	bvs	29c08 <__assert_fail@plt+0x1718c>
   29434:	ldr	r0, [sp, #16]
   29438:	ldr	r3, [sp, #24]
   2943c:	sub	lr, r0, r3
   29440:	ldr	r0, [sp, #12]
   29444:	clz	r3, lr
   29448:	lsr	r3, r3, #5
   2944c:	ands	r3, r3, r0
   29450:	bne	29c08 <__assert_fail@plt+0x1718c>
   29454:	ldr	r0, [sp, #20]
   29458:	ldr	r3, [sp, #32]
   2945c:	sub	r3, r0, r3
   29460:	ldr	r0, [sp, #8]
   29464:	clz	r3, r3
   29468:	lsr	r3, r3, #5
   2946c:	ands	r3, r3, r0
   29470:	bne	29c08 <__assert_fail@plt+0x1718c>
   29474:	ldr	r0, [sp, #28]
   29478:	ldr	r3, [sp, #4]
   2947c:	ldr	lr, [sp, #184]	; 0xb8
   29480:	sub	r0, r0, r7
   29484:	clz	r0, r0
   29488:	lsr	r0, r0, #5
   2948c:	ands	r0, r0, r3
   29490:	ldr	r3, [sp, #192]	; 0xc0
   29494:	bne	29c08 <__assert_fail@plt+0x1718c>
   29498:	ldr	r7, [sp, #44]	; 0x2c
   2949c:	sub	r0, r9, ip
   294a0:	clz	r0, r0
   294a4:	lsr	r0, r0, #5
   294a8:	ands	r0, r0, r7
   294ac:	bne	29c08 <__assert_fail@plt+0x1718c>
   294b0:	sub	r0, r2, r8
   294b4:	clz	r0, r0
   294b8:	lsr	r0, r0, #5
   294bc:	ands	r0, r0, r6
   294c0:	bne	29c08 <__assert_fail@plt+0x1718c>
   294c4:	ldr	r0, [sp, #72]	; 0x48
   294c8:	add	r9, sp, #172	; 0xac
   294cc:	sub	r0, r5, r0
   294d0:	ldm	r9, {r5, r7, r9}
   294d4:	ldr	r8, [sp, #156]	; 0x9c
   294d8:	ldr	ip, [sp, #188]	; 0xbc
   294dc:	clz	r0, r0
   294e0:	lsr	r0, r0, #5
   294e4:	ands	r0, r0, r1
   294e8:	ldr	r2, [sp, #196]	; 0xc4
   294ec:	mov	r0, #1
   294f0:	bne	29c14 <__assert_fail@plt+0x17198>
   294f4:	mov	r0, #1
   294f8:	strb	r0, [r4, #153]	; 0x99
   294fc:	b	28940 <__assert_fail@plt+0x15ec4>
   29500:	mov	r0, r8
   29504:	mov	r1, r7
   29508:	mov	r2, #100	; 0x64
   2950c:	mov	r3, #0
   29510:	mov	r6, lr
   29514:	mov	r5, ip
   29518:	bl	46628 <__assert_fail@plt+0x33bac>
   2951c:	mov	ip, r5
   29520:	mov	r5, #100	; 0x64
   29524:	mov	lr, r6
   29528:	umull	r2, r3, r0, r5
   2952c:	mla	r3, r1, r5, r3
   29530:	subs	r2, r8, r2
   29534:	sbc	r3, r7, r3
   29538:	ldr	r6, [sp, #140]	; 0x8c
   2953c:	strd	r0, [r6]
   29540:	ldr	r0, [sp, #144]	; 0x90
   29544:	strd	r2, [r0]
   29548:	mov	r0, #2
   2954c:	str	r9, [r4, #88]	; 0x58
   29550:	str	r9, [r4, #92]	; 0x5c
   29554:	add	r9, sp, #172	; 0xac
   29558:	str	r0, [r4, #28]
   2955c:	ldm	r9, {r5, r7, r9}
   29560:	ldr	r8, [sp, #156]	; 0x9c
   29564:	ldr	r3, [sp, #192]	; 0xc0
   29568:	ldr	r2, [sp, #196]	; 0xc4
   2956c:	b	28940 <__assert_fail@plt+0x15ec4>
   29570:	and	r0, r9, r2
   29574:	mov	r5, r9
   29578:	cmn	r0, #1
   2957c:	bne	295a0 <__assert_fail@plt+0x16b24>
   29580:	mov	r3, #0
   29584:	b	295d4 <__assert_fail@plt+0x16b58>
   29588:	and	r0, r9, r2
   2958c:	mov	r5, r9
   29590:	cmn	r0, #1
   29594:	bne	29738 <__assert_fail@plt+0x16cbc>
   29598:	mov	r3, #0
   2959c:	b	2976c <__assert_fail@plt+0x16cf0>
   295a0:	mov	r8, r2
   295a4:	mov	r0, #0
   295a8:	mov	r1, #-2147483648	; 0x80000000
   295ac:	mov	r2, r5
   295b0:	mov	r9, ip
   295b4:	mov	r3, r8
   295b8:	bl	46628 <__assert_fail@plt+0x33bac>
   295bc:	subs	r0, r0, #60	; 0x3c
   295c0:	mov	r3, #1
   295c4:	mov	ip, r9
   295c8:	mov	r2, r8
   295cc:	sbcs	r0, r1, #0
   295d0:	movge	r3, #0
   295d4:	mov	r0, #60	; 0x3c
   295d8:	str	r3, [sp, #64]	; 0x40
   295dc:	rsb	r3, r2, r2, lsl #4
   295e0:	mov	r2, #0
   295e4:	umull	r7, r1, r5, r0
   295e8:	add	r5, r1, r3, lsl #2
   295ec:	adds	r0, r7, ip
   295f0:	mov	r1, #0
   295f4:	mov	r3, #0
   295f8:	adc	r8, r5, r6
   295fc:	str	r0, [sp, #68]	; 0x44
   29600:	mov	r0, ip
   29604:	cmn	r8, #1
   29608:	movwgt	r1, #1
   2960c:	cmn	r5, #1
   29610:	movwgt	r3, #1
   29614:	subs	r9, r3, r1
   29618:	mov	r1, #0
   2961c:	movwne	r9, #1
   29620:	cmn	r6, #1
   29624:	movwgt	r1, #1
   29628:	subs	r0, r7, r0
   2962c:	ldr	r7, [sp, #176]	; 0xb0
   29630:	sbc	r6, r5, r6
   29634:	sub	ip, r3, r1
   29638:	ldr	r5, [sp, #172]	; 0xac
   2963c:	cmn	r6, #1
   29640:	clz	lr, ip
   29644:	movwgt	r2, #1
   29648:	lsr	lr, lr, #5
   2964c:	subs	r2, r3, r2
   29650:	movwne	r2, #1
   29654:	cmp	r3, r1
   29658:	movwne	ip, #1
   2965c:	and	r1, ip, r2
   29660:	ldr	r2, [sp, #72]	; 0x48
   29664:	ands	r2, r2, #1
   29668:	ldr	r2, [sp, #64]	; 0x40
   2966c:	andeq	r1, lr, r9
   29670:	moveq	r6, r8
   29674:	orr	r1, r2, r1
   29678:	eor	r2, r1, #1
   2967c:	ldr	r1, [sp, #68]	; 0x44
   29680:	moveq	r0, r1
   29684:	adds	r1, r0, #1440	; 0x5a0
   29688:	adc	r3, r6, #0
   2968c:	cmp	r2, #0
   29690:	beq	29c08 <__assert_fail@plt+0x1718c>
   29694:	rsbs	r1, r1, #2880	; 0xb40
   29698:	rscs	r1, r3, #0
   2969c:	bcc	29c08 <__assert_fail@plt+0x1718c>
   296a0:	rsb	r0, r0, r0, lsl #4
   296a4:	mov	r3, #0
   296a8:	mov	r2, #0
   296ac:	lsl	r1, r0, #2
   296b0:	str	r1, [r4, #24]
   296b4:	sbfx	r1, r0, #29, #1
   296b8:	ldr	r6, [sl, #-112]	; 0xffffff90
   296bc:	ldr	ip, [sl, #-108]	; 0xffffff94
   296c0:	cmn	r1, #1
   296c4:	movwgt	r3, #1
   296c8:	adds	r0, r6, r0, lsl #2
   296cc:	mov	r6, #0
   296d0:	adc	r1, r1, ip
   296d4:	str	r0, [r4, #24]
   296d8:	cmn	r1, #1
   296dc:	movwgt	r6, #1
   296e0:	subs	r6, r3, r6
   296e4:	movwne	r6, #1
   296e8:	cmn	ip, #1
   296ec:	movwgt	r2, #1
   296f0:	sub	r2, r3, r2
   296f4:	clz	r2, r2
   296f8:	lsr	r2, r2, #5
   296fc:	tst	r2, r6
   29700:	bne	29c08 <__assert_fail@plt+0x1718c>
   29704:	asr	r2, r0, #31
   29708:	ldr	r9, [sp, #180]	; 0xb4
   2970c:	ldr	r8, [sp, #156]	; 0x9c
   29710:	ldr	lr, [sp, #184]	; 0xb8
   29714:	ldr	ip, [sp, #188]	; 0xbc
   29718:	ldr	r3, [sp, #192]	; 0xc0
   2971c:	eor	r0, r0, r0
   29720:	eor	r1, r1, r2
   29724:	ldr	r2, [sp, #196]	; 0xc4
   29728:	orrs	r0, r0, r1
   2972c:	mov	r0, #1
   29730:	beq	28940 <__assert_fail@plt+0x15ec4>
   29734:	b	29c14 <__assert_fail@plt+0x17198>
   29738:	mov	r8, r2
   2973c:	mov	r0, #0
   29740:	mov	r1, #-2147483648	; 0x80000000
   29744:	mov	r2, r5
   29748:	mov	r9, ip
   2974c:	mov	r3, r8
   29750:	bl	46628 <__assert_fail@plt+0x33bac>
   29754:	subs	r0, r0, #60	; 0x3c
   29758:	mov	r3, #1
   2975c:	mov	ip, r9
   29760:	mov	r2, r8
   29764:	sbcs	r0, r1, #0
   29768:	movge	r3, #0
   2976c:	mov	r0, #60	; 0x3c
   29770:	str	r3, [sp, #64]	; 0x40
   29774:	rsb	r3, r2, r2, lsl #4
   29778:	mov	r2, #0
   2977c:	umull	r7, r1, r5, r0
   29780:	add	r5, r1, r3, lsl #2
   29784:	adds	r0, r7, ip
   29788:	mov	r1, #0
   2978c:	mov	r3, #0
   29790:	adc	r8, r5, r6
   29794:	str	r0, [sp, #68]	; 0x44
   29798:	mov	r0, ip
   2979c:	cmn	r8, #1
   297a0:	movwgt	r1, #1
   297a4:	cmn	r5, #1
   297a8:	movwgt	r3, #1
   297ac:	subs	r9, r3, r1
   297b0:	mov	r1, #0
   297b4:	movwne	r9, #1
   297b8:	cmn	r6, #1
   297bc:	movwgt	r1, #1
   297c0:	subs	r7, r7, r0
   297c4:	ldr	r0, [sp, #72]	; 0x48
   297c8:	sbc	r6, r5, r6
   297cc:	sub	ip, r3, r1
   297d0:	ldr	r5, [sp, #172]	; 0xac
   297d4:	cmn	r6, #1
   297d8:	clz	lr, ip
   297dc:	movwgt	r2, #1
   297e0:	lsr	lr, lr, #5
   297e4:	subs	r2, r3, r2
   297e8:	movwne	r2, #1
   297ec:	cmp	r3, r1
   297f0:	movwne	ip, #1
   297f4:	and	r1, ip, r2
   297f8:	ands	r2, r0, #1
   297fc:	mov	r0, r7
   29800:	ldr	r7, [sp, #176]	; 0xb0
   29804:	ldr	r2, [sp, #64]	; 0x40
   29808:	andeq	r1, lr, r9
   2980c:	moveq	r6, r8
   29810:	orr	r1, r2, r1
   29814:	eor	r2, r1, #1
   29818:	ldr	r1, [sp, #68]	; 0x44
   2981c:	moveq	r0, r1
   29820:	ldr	r9, [sp, #180]	; 0xb4
   29824:	adds	r1, r0, #1440	; 0x5a0
   29828:	adc	r3, r6, #0
   2982c:	cmp	r2, #0
   29830:	beq	29c08 <__assert_fail@plt+0x1718c>
   29834:	rsbs	r1, r1, #2880	; 0xb40
   29838:	ldr	r8, [sp, #156]	; 0x9c
   2983c:	ldr	lr, [sp, #184]	; 0xb8
   29840:	ldr	ip, [sp, #188]	; 0xbc
   29844:	ldr	r2, [sp, #196]	; 0xc4
   29848:	mov	r6, r0
   2984c:	mov	r0, #1
   29850:	rscs	r1, r3, #0
   29854:	ldr	r3, [sp, #192]	; 0xc0
   29858:	bcc	29c14 <__assert_fail@plt+0x17198>
   2985c:	rsb	r0, r6, r6, lsl #4
   29860:	lsl	r0, r0, #2
   29864:	str	r0, [r4, #24]
   29868:	b	28940 <__assert_fail@plt+0x15ec4>
   2986c:	mov	r0, #1
   29870:	ldr	r1, [sp, #72]	; 0x48
   29874:	strb	r0, [r4, #180]	; 0xb4
   29878:	ldr	r0, [sp, #100]	; 0x64
   2987c:	vst1.64	{d16-d17}, [r0]
   29880:	ldr	r0, [sp, #92]	; 0x5c
   29884:	stm	r0, {r1, r6}
   29888:	b	29198 <__assert_fail@plt+0x1671c>
   2988c:	mov	r0, #1
   29890:	mov	r6, r1
   29894:	ldr	r1, [sp, #72]	; 0x48
   29898:	strb	r0, [r4, #180]	; 0xb4
   2989c:	ldr	r0, [sp, #100]	; 0x64
   298a0:	vst1.64	{d16-d17}, [r0]
   298a4:	ldr	r0, [sp, #92]	; 0x5c
   298a8:	stm	r0, {r1, r6}
   298ac:	b	28940 <__assert_fail@plt+0x15ec4>
   298b0:	mov	r9, r1
   298b4:	b	26b2c <__assert_fail@plt+0x140b0>
   298b8:	mov	r9, r7
   298bc:	b	26b2c <__assert_fail@plt+0x140b0>
   298c0:	ldr	r9, [sp, #212]	; 0xd4
   298c4:	b	26b2c <__assert_fail@plt+0x140b0>
   298c8:	mov	r9, r5
   298cc:	b	26b2c <__assert_fail@plt+0x140b0>
   298d0:	movw	r0, #47984	; 0xbb70
   298d4:	movt	r0, #4
   298d8:	b	26a60 <__assert_fail@plt+0x13fe4>
   298dc:	movw	r0, #47984	; 0xbb70
   298e0:	movt	r0, #4
   298e4:	add	r9, r0, #24
   298e8:	b	26b2c <__assert_fail@plt+0x140b0>
   298ec:	movw	r0, #47984	; 0xbb70
   298f0:	movt	r0, #4
   298f4:	add	r9, r0, #36	; 0x24
   298f8:	b	26b2c <__assert_fail@plt+0x140b0>
   298fc:	movw	r0, #47984	; 0xbb70
   29900:	movt	r0, #4
   29904:	add	r9, r0, #48	; 0x30
   29908:	b	26b2c <__assert_fail@plt+0x140b0>
   2990c:	movw	r0, #47984	; 0xbb70
   29910:	movt	r0, #4
   29914:	add	r9, r0, #60	; 0x3c
   29918:	b	26b2c <__assert_fail@plt+0x140b0>
   2991c:	movw	r0, #47984	; 0xbb70
   29920:	movt	r0, #4
   29924:	add	r9, r0, #72	; 0x48
   29928:	b	26b2c <__assert_fail@plt+0x140b0>
   2992c:	movw	r0, #47984	; 0xbb70
   29930:	movt	r0, #4
   29934:	add	r9, r0, #84	; 0x54
   29938:	b	26b2c <__assert_fail@plt+0x140b0>
   2993c:	movw	r0, #47984	; 0xbb70
   29940:	movt	r0, #4
   29944:	add	r9, r0, #96	; 0x60
   29948:	b	26b2c <__assert_fail@plt+0x140b0>
   2994c:	movw	r0, #47984	; 0xbb70
   29950:	movt	r0, #4
   29954:	add	r9, r0, #108	; 0x6c
   29958:	b	26b2c <__assert_fail@plt+0x140b0>
   2995c:	movw	r0, #47984	; 0xbb70
   29960:	movt	r0, #4
   29964:	add	r9, r0, #120	; 0x78
   29968:	b	26b2c <__assert_fail@plt+0x140b0>
   2996c:	movw	r0, #47984	; 0xbb70
   29970:	movt	r0, #4
   29974:	add	r9, r0, #132	; 0x84
   29978:	b	26b2c <__assert_fail@plt+0x140b0>
   2997c:	movw	r0, #47984	; 0xbb70
   29980:	movt	r0, #4
   29984:	add	r9, r0, #144	; 0x90
   29988:	b	26b2c <__assert_fail@plt+0x140b0>
   2998c:	movw	r0, #47984	; 0xbb70
   29990:	movt	r0, #4
   29994:	add	r9, r0, #156	; 0x9c
   29998:	b	26b2c <__assert_fail@plt+0x140b0>
   2999c:	movw	r0, #47984	; 0xbb70
   299a0:	movt	r0, #4
   299a4:	add	r9, r0, #168	; 0xa8
   299a8:	b	26b2c <__assert_fail@plt+0x140b0>
   299ac:	movw	r0, #47984	; 0xbb70
   299b0:	movt	r0, #4
   299b4:	add	r9, r0, #180	; 0xb4
   299b8:	b	26b2c <__assert_fail@plt+0x140b0>
   299bc:	movw	r0, #47984	; 0xbb70
   299c0:	movt	r0, #4
   299c4:	add	r9, r0, #192	; 0xc0
   299c8:	b	26b2c <__assert_fail@plt+0x140b0>
   299cc:	movw	r0, #47984	; 0xbb70
   299d0:	movt	r0, #4
   299d4:	add	r9, r0, #204	; 0xcc
   299d8:	b	26b2c <__assert_fail@plt+0x140b0>
   299dc:	movw	r0, #47984	; 0xbb70
   299e0:	movt	r0, #4
   299e4:	add	r9, r0, #216	; 0xd8
   299e8:	b	26b2c <__assert_fail@plt+0x140b0>
   299ec:	movw	r0, #47984	; 0xbb70
   299f0:	movt	r0, #4
   299f4:	add	r9, r0, #228	; 0xe4
   299f8:	b	26b2c <__assert_fail@plt+0x140b0>
   299fc:	cmp	r0, #0
   29a00:	beq	29a88 <__assert_fail@plt+0x1700c>
   29a04:	ldr	r1, [sp, #80]	; 0x50
   29a08:	cmp	r0, #46	; 0x2e
   29a0c:	sub	r2, fp, #72	; 0x48
   29a10:	sub	r0, r0, #46	; 0x2e
   29a14:	clz	r0, r0
   29a18:	lsr	r0, r0, #5
   29a1c:	moveq	r1, r2
   29a20:	ldrb	r2, [fp, #-71]	; 0xffffffb9
   29a24:	cmp	r2, #0
   29a28:	strb	r2, [r1]
   29a2c:	beq	29a60 <__assert_fail@plt+0x16fe4>
   29a30:	ldr	r2, [sp, #80]	; 0x50
   29a34:	ldrb	r3, [r2]
   29a38:	ldrb	r6, [r2, #1]!
   29a3c:	cmp	r3, #46	; 0x2e
   29a40:	sub	r3, r3, #46	; 0x2e
   29a44:	clz	r3, r3
   29a48:	addne	r1, r1, #1
   29a4c:	cmp	r6, #0
   29a50:	lsr	r3, r3, #5
   29a54:	strb	r6, [r1]
   29a58:	orr	r0, r0, r3
   29a5c:	bne	29a34 <__assert_fail@plt+0x16fb8>
   29a60:	mov	r6, #63	; 0x3f
   29a64:	tst	r0, #1
   29a68:	beq	26b4c <__assert_fail@plt+0x140d0>
   29a6c:	mov	r0, r4
   29a70:	sub	r1, fp, #72	; 0x48
   29a74:	bl	2ad08 <__assert_fail@plt+0x1828c>
   29a78:	mov	r9, r0
   29a7c:	cmp	r0, #0
   29a80:	bne	26b2c <__assert_fail@plt+0x140b0>
   29a84:	b	26b4c <__assert_fail@plt+0x140d0>
   29a88:	mov	r6, #63	; 0x3f
   29a8c:	b	26b4c <__assert_fail@plt+0x140d0>
   29a90:	movw	r0, #48236	; 0xbc6c
   29a94:	movt	r0, #4
   29a98:	add	r9, r0, #24
   29a9c:	b	26b2c <__assert_fail@plt+0x140b0>
   29aa0:	movw	r0, #48236	; 0xbc6c
   29aa4:	movt	r0, #4
   29aa8:	add	r9, r0, #36	; 0x24
   29aac:	b	26b2c <__assert_fail@plt+0x140b0>
   29ab0:	movw	r0, #48236	; 0xbc6c
   29ab4:	movt	r0, #4
   29ab8:	add	r9, r0, #48	; 0x30
   29abc:	b	26b2c <__assert_fail@plt+0x140b0>
   29ac0:	movw	r0, #48236	; 0xbc6c
   29ac4:	movt	r0, #4
   29ac8:	add	r9, r0, #60	; 0x3c
   29acc:	b	26b2c <__assert_fail@plt+0x140b0>
   29ad0:	movw	r0, #48236	; 0xbc6c
   29ad4:	movt	r0, #4
   29ad8:	add	r9, r0, #72	; 0x48
   29adc:	b	26b2c <__assert_fail@plt+0x140b0>
   29ae0:	movw	r0, #48236	; 0xbc6c
   29ae4:	movt	r0, #4
   29ae8:	add	r9, r0, #84	; 0x54
   29aec:	b	26b2c <__assert_fail@plt+0x140b0>
   29af0:	movw	r0, #48236	; 0xbc6c
   29af4:	movt	r0, #4
   29af8:	add	r9, r0, #96	; 0x60
   29afc:	b	26b2c <__assert_fail@plt+0x140b0>
   29b00:	movw	r0, #48236	; 0xbc6c
   29b04:	movt	r0, #4
   29b08:	add	r9, r0, #108	; 0x6c
   29b0c:	b	26b2c <__assert_fail@plt+0x140b0>
   29b10:	movw	r0, #48236	; 0xbc6c
   29b14:	movt	r0, #4
   29b18:	add	r9, r0, #120	; 0x78
   29b1c:	b	26b2c <__assert_fail@plt+0x140b0>
   29b20:	movw	r0, #48236	; 0xbc6c
   29b24:	movt	r0, #4
   29b28:	add	r9, r0, #132	; 0x84
   29b2c:	b	26b2c <__assert_fail@plt+0x140b0>
   29b30:	movw	r0, #48236	; 0xbc6c
   29b34:	movt	r0, #4
   29b38:	add	r9, r0, #144	; 0x90
   29b3c:	b	26b2c <__assert_fail@plt+0x140b0>
   29b40:	movw	r0, #48236	; 0xbc6c
   29b44:	movt	r0, #4
   29b48:	add	r9, r0, #156	; 0x9c
   29b4c:	b	26b2c <__assert_fail@plt+0x140b0>
   29b50:	movw	r0, #48236	; 0xbc6c
   29b54:	movt	r0, #4
   29b58:	add	r9, r0, #168	; 0xa8
   29b5c:	b	26b2c <__assert_fail@plt+0x140b0>
   29b60:	movw	r0, #48236	; 0xbc6c
   29b64:	movt	r0, #4
   29b68:	add	r9, r0, #180	; 0xb4
   29b6c:	b	26b2c <__assert_fail@plt+0x140b0>
   29b70:	movw	r0, #48236	; 0xbc6c
   29b74:	movt	r0, #4
   29b78:	add	r9, r0, #192	; 0xc0
   29b7c:	b	26b2c <__assert_fail@plt+0x140b0>
   29b80:	movw	r0, #48236	; 0xbc6c
   29b84:	movt	r0, #4
   29b88:	add	r9, r0, #204	; 0xcc
   29b8c:	b	26b2c <__assert_fail@plt+0x140b0>
   29b90:	movw	r0, #48236	; 0xbc6c
   29b94:	movt	r0, #4
   29b98:	add	r9, r0, #216	; 0xd8
   29b9c:	b	26b2c <__assert_fail@plt+0x140b0>
   29ba0:	movw	r0, #48236	; 0xbc6c
   29ba4:	movt	r0, #4
   29ba8:	add	r9, r0, #228	; 0xe4
   29bac:	b	26b2c <__assert_fail@plt+0x140b0>
   29bb0:	movw	r0, #48236	; 0xbc6c
   29bb4:	movt	r0, #4
   29bb8:	add	r9, r0, #240	; 0xf0
   29bbc:	b	26b2c <__assert_fail@plt+0x140b0>
   29bc0:	movw	r0, #48236	; 0xbc6c
   29bc4:	movt	r0, #4
   29bc8:	add	r9, r0, #252	; 0xfc
   29bcc:	b	26b2c <__assert_fail@plt+0x140b0>
   29bd0:	movw	r0, #48236	; 0xbc6c
   29bd4:	movt	r0, #4
   29bd8:	add	r9, r0, #264	; 0x108
   29bdc:	b	26b2c <__assert_fail@plt+0x140b0>
   29be0:	movw	r0, #48236	; 0xbc6c
   29be4:	movt	r0, #4
   29be8:	add	r9, r0, #276	; 0x114
   29bec:	b	26b2c <__assert_fail@plt+0x140b0>
   29bf0:	movw	r0, #48236	; 0xbc6c
   29bf4:	movt	r0, #4
   29bf8:	add	r9, r0, #288	; 0x120
   29bfc:	b	26b2c <__assert_fail@plt+0x140b0>
   29c00:	mov	r0, #0
   29c04:	b	29c14 <__assert_fail@plt+0x17198>
   29c08:	mov	r0, #1
   29c0c:	b	29c14 <__assert_fail@plt+0x17198>
   29c10:	mov	r0, #2
   29c14:	sub	sp, fp, #48	; 0x30
   29c18:	vpop	{d8-d9}
   29c1c:	add	sp, sp, #4
   29c20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29c24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29c28:	add	fp, sp, #28
   29c2c:	sub	sp, sp, #596	; 0x254
   29c30:	mov	r7, r0
   29c34:	movw	r0, #49217	; 0xc041
   29c38:	mov	r6, r2
   29c3c:	mov	r5, r1
   29c40:	movt	r0, #4
   29c44:	bl	126b0 <getenv@plt>
   29c48:	bl	44f60 <__assert_fail@plt+0x324e4>
   29c4c:	cmp	r0, #0
   29c50:	beq	29ee4 <__assert_fail@plt+0x17468>
   29c54:	mov	r4, r0
   29c58:	cmp	r6, #0
   29c5c:	bne	29c6c <__assert_fail@plt+0x171f0>
   29c60:	sub	r6, fp, #184	; 0xb8
   29c64:	mov	r0, r6
   29c68:	bl	45ddc <__assert_fail@plt+0x33360>
   29c6c:	add	r9, r5, #4
   29c70:	ldr	r5, [r6]
   29c74:	ldr	r0, [r6, #4]
   29c78:	str	r0, [sp, #48]	; 0x30
   29c7c:	b	29c84 <__assert_fail@plt+0x17208>
   29c80:	add	r9, r9, #1
   29c84:	ldrb	r0, [r9, #-4]
   29c88:	sub	r1, r0, #9
   29c8c:	cmp	r1, #5
   29c90:	bcc	29c80 <__assert_fail@plt+0x17204>
   29c94:	cmp	r0, #32
   29c98:	beq	29c80 <__assert_fail@plt+0x17204>
   29c9c:	sub	sl, fp, #240	; 0xf0
   29ca0:	vmov.i32	q8, #0	; 0x00000000
   29ca4:	mov	r0, #52	; 0x34
   29ca8:	mov	r2, #0
   29cac:	str	r7, [sp, #40]	; 0x28
   29cb0:	sub	r7, r9, #4
   29cb4:	mov	r1, sl
   29cb8:	add	r8, sl, #16
   29cbc:	str	r2, [fp, #-192]	; 0xffffff40
   29cc0:	vst1.64	{d16-d17}, [r1], r0
   29cc4:	add	r0, sl, #32
   29cc8:	vst1.64	{d16-d17}, [r8]
   29ccc:	str	r2, [r1]
   29cd0:	movw	r1, #49807	; 0xc28f
   29cd4:	str	r0, [sp, #44]	; 0x2c
   29cd8:	vst1.64	{d16-d17}, [r0]
   29cdc:	mov	r0, #0
   29ce0:	mov	r2, #4
   29ce4:	str	r0, [sp, #60]	; 0x3c
   29ce8:	movt	r1, #4
   29cec:	mov	r0, r7
   29cf0:	bl	12a1c <strncmp@plt>
   29cf4:	cmp	r0, #0
   29cf8:	str	r4, [sp, #56]	; 0x38
   29cfc:	beq	29eec <__assert_fail@plt+0x17470>
   29d00:	mov	r0, #0
   29d04:	mov	r3, r4
   29d08:	str	r0, [sp, #52]	; 0x34
   29d0c:	sub	r2, fp, #284	; 0x11c
   29d10:	mov	r0, r3
   29d14:	mov	r1, r6
   29d18:	mov	r9, r3
   29d1c:	bl	45014 <__assert_fail@plt+0x32598>
   29d20:	cmp	r0, #0
   29d24:	beq	2a070 <__assert_fail@plt+0x175f4>
   29d28:	sub	r6, fp, #284	; 0x11c
   29d2c:	ldrb	ip, [r7]
   29d30:	mov	r1, r5
   29d34:	vmov.i32	q12, #0	; 0x00000000
   29d38:	add	lr, sp, #256	; 0x100
   29d3c:	ldm	r6, {r0, r2, r3, r6}
   29d40:	ldr	r4, [fp, #-264]	; 0xfffffef8
   29d44:	vld1.64	{d18-d19}, [r8]
   29d48:	str	r6, [sp, #176]	; 0xb0
   29d4c:	str	r3, [sp, #184]	; 0xb8
   29d50:	str	r2, [sp, #192]	; 0xc0
   29d54:	str	r0, [sp, #200]	; 0xc8
   29d58:	asr	r0, r6, #31
   29d5c:	asr	r3, r3, #31
   29d60:	asr	r2, r2, #31
   29d64:	str	r0, [sp, #180]	; 0xb4
   29d68:	ldr	r0, [fp, #-268]	; 0xfffffef4
   29d6c:	add	r6, r0, #1
   29d70:	movw	r0, #1900	; 0x76c
   29d74:	adds	r5, r4, r0
   29d78:	mov	r0, #0
   29d7c:	str	r0, [sp, #160]	; 0xa0
   29d80:	str	r5, [sp, #152]	; 0x98
   29d84:	str	r6, [sp, #168]	; 0xa8
   29d88:	str	r3, [sp, #188]	; 0xbc
   29d8c:	str	r2, [sp, #196]	; 0xc4
   29d90:	asr	r2, r4, #31
   29d94:	mov	r5, r1
   29d98:	ldr	r1, [sp, #48]	; 0x30
   29d9c:	adc	r2, r2, #0
   29da0:	cmp	ip, #0
   29da4:	str	r2, [sp, #156]	; 0x9c
   29da8:	asr	r2, r6, #31
   29dac:	add	r6, sp, #112	; 0x70
   29db0:	str	r2, [sp, #172]	; 0xac
   29db4:	movw	r2, #32073	; 0x7d49
   29db8:	movt	r2, #4
   29dbc:	movne	r2, r7
   29dc0:	add	r7, r6, #96	; 0x60
   29dc4:	str	r2, [sp, #112]	; 0x70
   29dc8:	mov	r2, #48	; 0x30
   29dcc:	str	r1, [sp, #204]	; 0xcc
   29dd0:	mov	r1, #2
   29dd4:	vld1.64	{d16-d17}, [sl], r2
   29dd8:	ldr	r2, [sp, #44]	; 0x2c
   29ddc:	str	r1, [sp, #140]	; 0x8c
   29de0:	ldr	r1, [fp, #-252]	; 0xffffff04
   29de4:	vld1.64	{d20-d21}, [r2]
   29de8:	add	r2, r6, #112	; 0x70
   29dec:	vst1.64	{d16-d17}, [r7]
   29df0:	vldr	d22, [sl]
   29df4:	str	r1, [fp, #-44]	; 0xffffffd4
   29df8:	vst1.64	{d18-d19}, [r2]
   29dfc:	add	r2, r6, #128	; 0x80
   29e00:	vst1.64	{d20-d21}, [r2]
   29e04:	add	r2, r6, #172	; 0xac
   29e08:	vst1.32	{d24-d25}, [r2]
   29e0c:	add	r2, r6, #156	; 0x9c
   29e10:	vst1.32	{d24-d25}, [r2]
   29e14:	ldr	r2, [fp, #-244]	; 0xffffff0c
   29e18:	strh	r0, [lr, #8]
   29e1c:	str	r2, [sp, #300]	; 0x12c
   29e20:	movw	r2, #269	; 0x10d
   29e24:	str	r2, [sp, #304]	; 0x130
   29e28:	str	r1, [sp, #308]	; 0x134
   29e2c:	str	r0, [sp, #312]	; 0x138
   29e30:	add	r0, r5, #42752	; 0xa700
   29e34:	vstr	d22, [sp, #256]	; 0x100
   29e38:	add	r0, r0, #7733248	; 0x760000
   29e3c:	cmp	r0, r5
   29e40:	str	r0, [sp, #108]	; 0x6c
   29e44:	bvs	2a020 <__assert_fail@plt+0x175a4>
   29e48:	add	r1, sp, #108	; 0x6c
   29e4c:	add	r2, sp, #64	; 0x40
   29e50:	mov	r0, r9
   29e54:	bl	45014 <__assert_fail@plt+0x32598>
   29e58:	cmp	r0, #0
   29e5c:	ldrne	r0, [sp, #104]	; 0x68
   29e60:	cmpne	r0, #0
   29e64:	bne	29f5c <__assert_fail@plt+0x174e0>
   29e68:	add	r0, r5, #19968	; 0x4e00
   29e6c:	add	r0, r0, #15532032	; 0xed0000
   29e70:	cmp	r0, r5
   29e74:	str	r0, [sp, #108]	; 0x6c
   29e78:	bvs	2a020 <__assert_fail@plt+0x175a4>
   29e7c:	add	r1, sp, #108	; 0x6c
   29e80:	add	r2, sp, #64	; 0x40
   29e84:	mov	r0, r9
   29e88:	bl	45014 <__assert_fail@plt+0x32598>
   29e8c:	cmp	r0, #0
   29e90:	ldrne	r0, [sp, #104]	; 0x68
   29e94:	cmpne	r0, #0
   29e98:	bne	29ff8 <__assert_fail@plt+0x1757c>
   29e9c:	movw	r0, #62720	; 0xf500
   29ea0:	movt	r0, #355	; 0x163
   29ea4:	adds	r0, r5, r0
   29ea8:	str	r0, [sp, #108]	; 0x6c
   29eac:	bvs	2a020 <__assert_fail@plt+0x175a4>
   29eb0:	add	r1, sp, #108	; 0x6c
   29eb4:	add	r2, sp, #64	; 0x40
   29eb8:	mov	r0, r9
   29ebc:	bl	45014 <__assert_fail@plt+0x32598>
   29ec0:	cmp	r0, #0
   29ec4:	ldrne	r0, [sp, #104]	; 0x68
   29ec8:	cmpne	r0, #0
   29ecc:	beq	2a020 <__assert_fail@plt+0x175a4>
   29ed0:	ldr	r1, [sp, #96]	; 0x60
   29ed4:	ldr	r2, [sp, #308]	; 0x134
   29ed8:	cmp	r1, r2
   29edc:	bne	2a008 <__assert_fail@plt+0x1758c>
   29ee0:	b	2a020 <__assert_fail@plt+0x175a4>
   29ee4:	mov	r6, #0
   29ee8:	b	2a09c <__assert_fail@plt+0x17620>
   29eec:	mov	r0, #1
   29ef0:	mov	r1, r9
   29ef4:	b	29f00 <__assert_fail@plt+0x17484>
   29ef8:	add	r0, r0, #1
   29efc:	add	r1, r1, #1
   29f00:	ldrb	r2, [r1]
   29f04:	cmp	r2, #92	; 0x5c
   29f08:	beq	29f20 <__assert_fail@plt+0x174a4>
   29f0c:	cmp	r2, #0
   29f10:	beq	29d00 <__assert_fail@plt+0x17284>
   29f14:	cmp	r2, #34	; 0x22
   29f18:	bne	29ef8 <__assert_fail@plt+0x1747c>
   29f1c:	b	29f34 <__assert_fail@plt+0x174b8>
   29f20:	ldrb	r2, [r1, #1]!
   29f24:	cmp	r2, #34	; 0x22
   29f28:	cmpne	r2, #92	; 0x5c
   29f2c:	beq	29ef8 <__assert_fail@plt+0x1747c>
   29f30:	b	29d00 <__assert_fail@plt+0x17284>
   29f34:	cmp	r0, #101	; 0x65
   29f38:	str	r5, [sp, #36]	; 0x24
   29f3c:	bcc	29f70 <__assert_fail@plt+0x174f4>
   29f40:	bl	3233c <__assert_fail@plt+0x1f8c0>
   29f44:	cmp	r0, #0
   29f48:	mov	r5, r0
   29f4c:	bne	29f78 <__assert_fail@plt+0x174fc>
   29f50:	mov	r6, #0
   29f54:	mov	r5, #0
   29f58:	b	2a08c <__assert_fail@plt+0x17610>
   29f5c:	ldr	r1, [sp, #96]	; 0x60
   29f60:	ldr	r2, [sp, #308]	; 0x134
   29f64:	cmp	r1, r2
   29f68:	beq	29e68 <__assert_fail@plt+0x173ec>
   29f6c:	b	2a008 <__assert_fail@plt+0x1758c>
   29f70:	mov	r5, #0
   29f74:	sub	r0, fp, #176	; 0xb0
   29f78:	ldrb	r2, [r9]
   29f7c:	mov	r1, r0
   29f80:	cmp	r2, #34	; 0x22
   29f84:	beq	29fa8 <__assert_fail@plt+0x1752c>
   29f88:	uxtb	r2, r2
   29f8c:	cmp	r2, #92	; 0x5c
   29f90:	addeq	r9, r9, #1
   29f94:	ldrb	r2, [r9]
   29f98:	strb	r2, [r1], #1
   29f9c:	ldrb	r2, [r9, #1]!
   29fa0:	cmp	r2, #34	; 0x22
   29fa4:	bne	29f88 <__assert_fail@plt+0x1750c>
   29fa8:	mov	r2, #0
   29fac:	strb	r2, [r1]
   29fb0:	bl	44f60 <__assert_fail@plt+0x324e4>
   29fb4:	cmp	r0, #0
   29fb8:	beq	29ff0 <__assert_fail@plt+0x17574>
   29fbc:	mov	r3, r0
   29fc0:	add	r7, r9, #1
   29fc4:	b	29fcc <__assert_fail@plt+0x17550>
   29fc8:	add	r7, r7, #1
   29fcc:	ldrb	r0, [r7]
   29fd0:	sub	r1, r0, #9
   29fd4:	cmp	r1, #5
   29fd8:	bcc	29fc8 <__assert_fail@plt+0x1754c>
   29fdc:	cmp	r0, #32
   29fe0:	beq	29fc8 <__assert_fail@plt+0x1754c>
   29fe4:	str	r5, [sp, #52]	; 0x34
   29fe8:	ldr	r5, [sp, #36]	; 0x24
   29fec:	b	29d0c <__assert_fail@plt+0x17290>
   29ff0:	mov	r6, #0
   29ff4:	b	2a08c <__assert_fail@plt+0x17610>
   29ff8:	ldr	r1, [sp, #96]	; 0x60
   29ffc:	ldr	r2, [sp, #308]	; 0x134
   2a000:	cmp	r1, r2
   2a004:	beq	29e9c <__assert_fail@plt+0x17420>
   2a008:	movw	r2, #269	; 0x10d
   2a00c:	str	r2, [sp, #316]	; 0x13c
   2a010:	str	r0, [sp, #312]	; 0x138
   2a014:	mov	r0, #0
   2a018:	str	r1, [sp, #320]	; 0x140
   2a01c:	str	r0, [sp, #324]	; 0x144
   2a020:	ldr	r0, [sp, #300]	; 0x12c
   2a024:	cmp	r0, #0
   2a028:	ldrne	r1, [sp, #312]	; 0x138
   2a02c:	cmpne	r1, #0
   2a030:	bne	2a0a8 <__assert_fail@plt+0x1762c>
   2a034:	add	r0, sp, #112	; 0x70
   2a038:	bl	263b8 <__assert_fail@plt+0x1393c>
   2a03c:	cmp	r0, #0
   2a040:	beq	2a04c <__assert_fail@plt+0x175d0>
   2a044:	mov	r0, #0
   2a048:	b	2a06c <__assert_fail@plt+0x175f0>
   2a04c:	ldrb	r0, [sp, #264]	; 0x108
   2a050:	cmp	r0, #0
   2a054:	beq	2a0c8 <__assert_fail@plt+0x1764c>
   2a058:	add	r0, r6, #88	; 0x58
   2a05c:	ldr	r2, [sp, #40]	; 0x28
   2a060:	ldrd	r0, [r0]
   2a064:	stm	r2, {r0, r1}
   2a068:	mov	r0, #1
   2a06c:	str	r0, [sp, #60]	; 0x3c
   2a070:	ldr	r4, [sp, #56]	; 0x38
   2a074:	cmp	r9, r4
   2a078:	beq	2a084 <__assert_fail@plt+0x17608>
   2a07c:	mov	r0, r9
   2a080:	bl	44fec <__assert_fail@plt+0x32570>
   2a084:	ldr	r5, [sp, #52]	; 0x34
   2a088:	ldr	r6, [sp, #60]	; 0x3c
   2a08c:	mov	r0, r5
   2a090:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   2a094:	mov	r0, r4
   2a098:	bl	44fec <__assert_fail@plt+0x32570>
   2a09c:	mov	r0, r6
   2a0a0:	sub	sp, fp, #28
   2a0a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a0a8:	bl	123d4 <strcmp@plt>
   2a0ac:	cmp	r0, #0
   2a0b0:	bne	2a034 <__assert_fail@plt+0x175b8>
   2a0b4:	mov	r0, #0
   2a0b8:	str	r0, [sp, #312]	; 0x138
   2a0bc:	mvn	r0, #0
   2a0c0:	str	r0, [sp, #308]	; 0x134
   2a0c4:	b	2a034 <__assert_fail@plt+0x175b8>
   2a0c8:	mov	r0, #0
   2a0cc:	add	ip, sp, #268	; 0x10c
   2a0d0:	str	r0, [sp, #60]	; 0x3c
   2a0d4:	ldm	ip, {r1, r2, ip}
   2a0d8:	ldr	r3, [sp, #288]	; 0x120
   2a0dc:	ldr	r5, [sp, #280]	; 0x118
   2a0e0:	add	r4, r3, ip
   2a0e4:	ldr	r3, [sp, #284]	; 0x11c
   2a0e8:	orr	r2, r2, r1
   2a0ec:	orr	lr, r2, r3
   2a0f0:	orr	r5, lr, r5
   2a0f4:	orr	r5, r5, r4
   2a0f8:	cmp	r5, #1
   2a0fc:	bgt	2a070 <__assert_fail@plt+0x175f4>
   2a100:	add	r5, r6, #40	; 0x28
   2a104:	mvn	sl, #0
   2a108:	ldrd	r4, [r5]
   2a10c:	cmp	r5, #0
   2a110:	blt	2a16c <__assert_fail@plt+0x176f0>
   2a114:	add	r0, r6, #48	; 0x30
   2a118:	ldr	r0, [r0]
   2a11c:	cmp	r0, #2
   2a120:	bne	2a150 <__assert_fail@plt+0x176d4>
   2a124:	subs	r1, r4, #69	; 0x45
   2a128:	mov	r0, #0
   2a12c:	sbcs	r1, r5, #0
   2a130:	movwlt	r0, #1
   2a134:	movw	r1, #1900	; 0x76c
   2a138:	cmp	r0, #0
   2a13c:	movwne	r1, #2000	; 0x7d0
   2a140:	adds	r4, r1, r4
   2a144:	adc	r5, r5, #0
   2a148:	cmn	r5, #1
   2a14c:	ble	2a16c <__assert_fail@plt+0x176f0>
   2a150:	movw	r0, #1900	; 0x76c
   2a154:	subs	r8, r4, r0
   2a158:	sbc	r0, r5, #0
   2a15c:	str	r8, [fp, #-56]	; 0xffffffc8
   2a160:	teq	r0, r8, asr #31
   2a164:	bne	2a070 <__assert_fail@plt+0x175f4>
   2a168:	b	2a188 <__assert_fail@plt+0x1770c>
   2a16c:	movw	r0, #63636	; 0xf894
   2a170:	movt	r0, #65535	; 0xffff
   2a174:	subs	r8, r0, r4
   2a178:	str	r8, [fp, #-56]	; 0xffffffc8
   2a17c:	sbc	r0, sl, r5
   2a180:	teq	r0, r8, asr #31
   2a184:	bne	2a070 <__assert_fail@plt+0x175f4>
   2a188:	add	r0, r6, #56	; 0x38
   2a18c:	mov	r4, #0
   2a190:	ldrd	r0, [r0]
   2a194:	str	r4, [sp, #60]	; 0x3c
   2a198:	mov	r4, #0
   2a19c:	cmn	r1, #1
   2a1a0:	movwgt	r4, #1
   2a1a4:	subs	sl, r0, #1
   2a1a8:	mov	r0, #0
   2a1ac:	sbc	r5, r1, #0
   2a1b0:	str	sl, [fp, #-60]	; 0xffffffc4
   2a1b4:	cmn	r5, #1
   2a1b8:	movwgt	r0, #1
   2a1bc:	subs	r0, r4, r0
   2a1c0:	movwne	r0, #1
   2a1c4:	cmp	r1, #0
   2a1c8:	mov	r1, #0
   2a1cc:	movwlt	r1, #1
   2a1d0:	tst	r1, r0
   2a1d4:	asreq	r0, sl, #31
   2a1d8:	eoreq	r1, sl, sl
   2a1dc:	eoreq	r0, r5, r0
   2a1e0:	orrseq	r0, r1, r0
   2a1e4:	bne	2a070 <__assert_fail@plt+0x175f4>
   2a1e8:	add	r0, r6, #64	; 0x40
   2a1ec:	ldr	r5, [r0]
   2a1f0:	ldr	r1, [r0, #4]
   2a1f4:	teq	r1, r5, asr #31
   2a1f8:	str	r5, [fp, #-64]	; 0xffffffc0
   2a1fc:	bne	2a070 <__assert_fail@plt+0x175f4>
   2a200:	cmp	r3, #0
   2a204:	str	sl, [sp, #48]	; 0x30
   2a208:	bne	2a220 <__assert_fail@plt+0x177a4>
   2a20c:	cmp	r2, #0
   2a210:	bne	2a2c8 <__assert_fail@plt+0x1784c>
   2a214:	ldrb	r0, [sp, #265]	; 0x109
   2a218:	cmp	r0, #0
   2a21c:	beq	2a2c8 <__assert_fail@plt+0x1784c>
   2a220:	add	r0, r6, #72	; 0x48
   2a224:	mvn	sl, #0
   2a228:	ldr	r4, [r0]
   2a22c:	ldr	r3, [r0, #4]
   2a230:	ldr	r2, [sp, #140]	; 0x8c
   2a234:	cmp	r2, #0
   2a238:	beq	2a270 <__assert_fail@plt+0x177f4>
   2a23c:	cmp	r2, #1
   2a240:	bne	2a294 <__assert_fail@plt+0x17818>
   2a244:	eor	r0, r4, #12
   2a248:	orrs	r0, r0, r3
   2a24c:	mvn	r0, #0
   2a250:	movweq	r0, #12
   2a254:	subs	r1, r4, #1
   2a258:	sbc	r2, r3, #0
   2a25c:	subs	r1, r1, #11
   2a260:	sbcs	r1, r2, #0
   2a264:	addcc	r0, r4, #12
   2a268:	mov	r4, r0
   2a26c:	b	2a2a0 <__assert_fail@plt+0x17824>
   2a270:	eor	r0, r4, #12
   2a274:	orrs	r0, r0, r3
   2a278:	mvnne	r0, #0
   2a27c:	subs	r1, r4, #1
   2a280:	sbc	r2, r3, #0
   2a284:	subs	r1, r1, #11
   2a288:	sbcs	r1, r2, #0
   2a28c:	movcs	r4, r0
   2a290:	b	2a2a0 <__assert_fail@plt+0x17824>
   2a294:	subs	r0, r4, #24
   2a298:	sbcs	r0, r3, #0
   2a29c:	mvncs	r4, #0
   2a2a0:	cmp	r4, #0
   2a2a4:	str	r4, [fp, #-68]	; 0xffffffbc
   2a2a8:	blt	2a070 <__assert_fail@plt+0x175f4>
   2a2ac:	add	r0, r6, #80	; 0x50
   2a2b0:	str	r5, [sp, #44]	; 0x2c
   2a2b4:	ldr	r6, [sp, #200]	; 0xc8
   2a2b8:	ldr	r5, [r0]
   2a2bc:	str	r6, [fp, #-76]	; 0xffffffb4
   2a2c0:	str	r5, [fp, #-72]	; 0xffffffb8
   2a2c4:	b	2a2ec <__assert_fail@plt+0x17870>
   2a2c8:	mov	r4, #0
   2a2cc:	str	r5, [sp, #44]	; 0x2c
   2a2d0:	mov	r5, #0
   2a2d4:	mov	r6, #0
   2a2d8:	mvn	sl, #0
   2a2dc:	str	r4, [fp, #-72]	; 0xffffffb8
   2a2e0:	str	r4, [fp, #-76]	; 0xffffffb4
   2a2e4:	str	r4, [fp, #-68]	; 0xffffffbc
   2a2e8:	str	r4, [sp, #204]	; 0xcc
   2a2ec:	cmp	lr, #0
   2a2f0:	mvnne	r0, #0
   2a2f4:	strne	r0, [fp, #-44]	; 0xffffffd4
   2a2f8:	cmp	ip, #0
   2a2fc:	beq	2a310 <__assert_fail@plt+0x17894>
   2a300:	ldr	r0, [sp, #132]	; 0x84
   2a304:	str	r0, [sp, #32]
   2a308:	str	r0, [fp, #-44]	; 0xffffffd4
   2a30c:	b	2a318 <__assert_fail@plt+0x1789c>
   2a310:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2a314:	str	r0, [sp, #32]
   2a318:	mvn	r1, #0
   2a31c:	mov	r0, r9
   2a320:	str	r1, [fp, #-52]	; 0xffffffcc
   2a324:	sub	r1, fp, #76	; 0x4c
   2a328:	bl	453e8 <__assert_fail@plt+0x3296c>
   2a32c:	mov	lr, r0
   2a330:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2a334:	str	r4, [sp, #36]	; 0x24
   2a338:	cmp	r0, #0
   2a33c:	blt	2a388 <__assert_fail@plt+0x1790c>
   2a340:	sub	r3, fp, #76	; 0x4c
   2a344:	ldm	r3, {r0, r1, r2, r3}
   2a348:	eor	r0, r0, r6
   2a34c:	eor	r1, r1, r5
   2a350:	orr	r0, r1, r0
   2a354:	eor	r1, r2, r4
   2a358:	ldr	r2, [sp, #48]	; 0x30
   2a35c:	orr	r0, r0, r1
   2a360:	ldr	r1, [sp, #44]	; 0x2c
   2a364:	eor	r1, r3, r1
   2a368:	orr	r0, r0, r1
   2a36c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   2a370:	eor	r1, r1, r2
   2a374:	orr	r0, r0, r1
   2a378:	ldr	r1, [fp, #-56]	; 0xffffffc8
   2a37c:	eor	r1, r1, r8
   2a380:	orrs	r0, r0, r1
   2a384:	beq	2a5ac <__assert_fail@plt+0x17b30>
   2a388:	ldr	r0, [sp, #288]	; 0x120
   2a38c:	cmp	r0, #0
   2a390:	beq	2a070 <__assert_fail@plt+0x175f4>
   2a394:	mov	r0, #88	; 0x58
   2a398:	ldr	r4, [sp, #136]	; 0x88
   2a39c:	mov	sl, r5
   2a3a0:	str	r6, [sp, #28]
   2a3a4:	mov	r2, #43	; 0x2b
   2a3a8:	strb	r0, [sp, #66]	; 0x42
   2a3ac:	movw	r0, #22616	; 0x5858
   2a3b0:	strh	r0, [sp, #64]	; 0x40
   2a3b4:	movw	r0, #46021	; 0xb3c5
   2a3b8:	movt	r0, #37282	; 0x91a2
   2a3bc:	smmla	r0, r4, r0, r4
   2a3c0:	asr	r1, r0, #11
   2a3c4:	add	r5, r1, r0, lsr #31
   2a3c8:	add	r0, sp, #64	; 0x40
   2a3cc:	movw	r1, #49220	; 0xc044
   2a3d0:	cmp	r5, #0
   2a3d4:	mov	r3, r5
   2a3d8:	add	r6, r0, #3
   2a3dc:	movt	r1, #4
   2a3e0:	rsbmi	r3, r5, #0
   2a3e4:	cmp	r4, #0
   2a3e8:	mov	r0, r6
   2a3ec:	movwlt	r2, #45	; 0x2d
   2a3f0:	bl	12938 <sprintf@plt>
   2a3f4:	mov	r1, #3600	; 0xe10
   2a3f8:	mls	r2, r5, r1, r4
   2a3fc:	ldr	r4, [sp, #36]	; 0x24
   2a400:	cmp	r2, #0
   2a404:	mov	r1, r2
   2a408:	rsbmi	r1, r2, #0
   2a40c:	cmp	r2, #0
   2a410:	beq	2a4b4 <__assert_fail@plt+0x17a38>
   2a414:	movw	r2, #33205	; 0x81b5
   2a418:	mov	lr, #48	; 0x30
   2a41c:	add	r5, r6, r0
   2a420:	mov	ip, #58	; 0x3a
   2a424:	movt	r2, #6990	; 0x1b4e
   2a428:	strb	ip, [r5]
   2a42c:	umull	r2, r3, r1, r2
   2a430:	add	r3, lr, r3, lsr #6
   2a434:	strb	r3, [r5, #1]
   2a438:	movw	r3, #34953	; 0x8889
   2a43c:	movt	r3, #34952	; 0x8888
   2a440:	umull	r3, r6, r1, r3
   2a444:	movw	r3, #52429	; 0xcccd
   2a448:	lsr	r4, r6, #5
   2a44c:	movt	r3, #52428	; 0xcccc
   2a450:	umull	r0, r2, r4, r3
   2a454:	lsr	r0, r2, #3
   2a458:	add	r0, r0, r0, lsl #2
   2a45c:	sub	r0, r4, r0, lsl #1
   2a460:	orr	r0, r0, #48	; 0x30
   2a464:	strb	r0, [r5, #2]
   2a468:	lsl	r0, r4, #4
   2a46c:	sub	r0, r0, r6, lsr #5
   2a470:	sub	r6, r1, r0, lsl #2
   2a474:	add	r1, r5, #3
   2a478:	cmp	r6, #0
   2a47c:	beq	2a4a8 <__assert_fail@plt+0x17a2c>
   2a480:	umull	r0, r2, r6, r3
   2a484:	strb	ip, [r1]
   2a488:	orr	r0, lr, r2, lsr #3
   2a48c:	strb	r0, [r1, #1]
   2a490:	lsr	r0, r2, #3
   2a494:	add	r0, r0, r0, lsl #2
   2a498:	sub	r0, r6, r0, lsl #1
   2a49c:	orr	r0, r0, #48	; 0x30
   2a4a0:	strb	r0, [r1, #2]
   2a4a4:	add	r1, r1, #3
   2a4a8:	ldr	r4, [sp, #36]	; 0x24
   2a4ac:	mov	r0, #0
   2a4b0:	strb	r0, [r1]
   2a4b4:	add	r0, sp, #64	; 0x40
   2a4b8:	bl	44f60 <__assert_fail@plt+0x324e4>
   2a4bc:	cmp	r0, #0
   2a4c0:	beq	2a070 <__assert_fail@plt+0x175f4>
   2a4c4:	mov	r6, r0
   2a4c8:	mov	r5, sl
   2a4cc:	str	sl, [fp, #-72]	; 0xffffffb8
   2a4d0:	ldr	sl, [sp, #28]
   2a4d4:	ldr	r0, [sp, #44]	; 0x2c
   2a4d8:	sub	r1, fp, #76	; 0x4c
   2a4dc:	str	sl, [fp, #-76]	; 0xffffffb4
   2a4e0:	str	r4, [fp, #-68]	; 0xffffffbc
   2a4e4:	str	r0, [fp, #-64]	; 0xffffffc0
   2a4e8:	ldr	r4, [sp, #48]	; 0x30
   2a4ec:	ldr	r0, [sp, #32]
   2a4f0:	str	r4, [fp, #-60]	; 0xffffffc4
   2a4f4:	str	r8, [fp, #-56]	; 0xffffffc8
   2a4f8:	str	r0, [fp, #-44]	; 0xffffffd4
   2a4fc:	mvn	r0, #0
   2a500:	str	r0, [fp, #-52]	; 0xffffffcc
   2a504:	mov	r0, r6
   2a508:	bl	453e8 <__assert_fail@plt+0x3296c>
   2a50c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2a510:	cmn	r1, #1
   2a514:	ble	2a5f4 <__assert_fail@plt+0x17b78>
   2a518:	str	r0, [sp, #4]
   2a51c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   2a520:	ldr	r4, [fp, #-76]	; 0xffffffb4
   2a524:	str	r0, [sp, #24]
   2a528:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2a52c:	str	r0, [sp, #20]
   2a530:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2a534:	str	r0, [sp, #8]
   2a538:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2a53c:	str	r0, [sp, #12]
   2a540:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2a544:	str	r0, [sp, #16]
   2a548:	mov	r0, r6
   2a54c:	bl	44fec <__assert_fail@plt+0x32570>
   2a550:	ldr	r1, [sp, #8]
   2a554:	eor	r0, r4, sl
   2a558:	ldr	r2, [sp, #12]
   2a55c:	eor	r1, r1, r5
   2a560:	orr	r0, r1, r0
   2a564:	ldr	r1, [sp, #36]	; 0x24
   2a568:	eor	r1, r2, r1
   2a56c:	ldr	r2, [sp, #16]
   2a570:	orr	r0, r0, r1
   2a574:	ldr	r1, [sp, #44]	; 0x2c
   2a578:	eor	r1, r2, r1
   2a57c:	ldr	r2, [sp, #48]	; 0x30
   2a580:	orr	r0, r0, r1
   2a584:	ldr	r1, [sp, #20]
   2a588:	eor	r1, r1, r2
   2a58c:	orr	r0, r0, r1
   2a590:	ldr	r1, [sp, #24]
   2a594:	eor	r1, r1, r8
   2a598:	orrs	r0, r0, r1
   2a59c:	bne	2a070 <__assert_fail@plt+0x175f4>
   2a5a0:	ldr	lr, [sp, #4]
   2a5a4:	mov	r6, sl
   2a5a8:	mvn	sl, #0
   2a5ac:	ldr	r0, [sp, #272]	; 0x110
   2a5b0:	mov	r8, r5
   2a5b4:	str	r6, [sp, #28]
   2a5b8:	cmp	r0, #0
   2a5bc:	beq	2a840 <__assert_fail@plt+0x17dc4>
   2a5c0:	ldr	r0, [sp, #268]	; 0x10c
   2a5c4:	cmp	r0, #0
   2a5c8:	bne	2a840 <__assert_fail@plt+0x17dc4>
   2a5cc:	ldr	r5, [sp, #120]	; 0x78
   2a5d0:	ldr	r4, [sp, #124]	; 0x7c
   2a5d4:	subs	r0, r5, #1
   2a5d8:	sbcs	r0, r4, #0
   2a5dc:	blt	2a600 <__assert_fail@plt+0x17b84>
   2a5e0:	ldr	r0, [sp, #128]	; 0x80
   2a5e4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2a5e8:	subs	r0, r1, r0
   2a5ec:	movwne	r0, #1
   2a5f0:	b	2a604 <__assert_fail@plt+0x17b88>
   2a5f4:	mov	r0, r6
   2a5f8:	bl	44fec <__assert_fail@plt+0x32570>
   2a5fc:	b	2a070 <__assert_fail@plt+0x175f4>
   2a600:	mov	r0, #0
   2a604:	subs	r0, r5, r0
   2a608:	sbcs	r0, r4, #0
   2a60c:	bge	2a630 <__assert_fail@plt+0x17bb4>
   2a610:	subs	r0, r5, #1
   2a614:	sbcs	r0, r4, #0
   2a618:	blt	2a654 <__assert_fail@plt+0x17bd8>
   2a61c:	ldr	r0, [sp, #128]	; 0x80
   2a620:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2a624:	subs	r0, r1, r0
   2a628:	movwne	r0, #1
   2a62c:	b	2a658 <__assert_fail@plt+0x17bdc>
   2a630:	subs	r0, r5, #1
   2a634:	mov	r2, #0
   2a638:	sbcs	r0, r4, #0
   2a63c:	blt	2a698 <__assert_fail@plt+0x17c1c>
   2a640:	ldr	r0, [sp, #128]	; 0x80
   2a644:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2a648:	subs	r0, r1, r0
   2a64c:	movwne	r0, #1
   2a650:	b	2a69c <__assert_fail@plt+0x17c20>
   2a654:	mov	r0, #0
   2a658:	subs	r0, r5, r0
   2a65c:	sbc	r1, r4, #0
   2a660:	eor	r0, r0, sl
   2a664:	eor	r1, r1, sl
   2a668:	orrs	r0, r0, r1
   2a66c:	beq	2a6f0 <__assert_fail@plt+0x17c74>
   2a670:	mov	r0, #0
   2a674:	str	r0, [sp, #60]	; 0x3c
   2a678:	subs	r0, r5, #1
   2a67c:	sbcs	r0, r4, #0
   2a680:	blt	2a6c8 <__assert_fail@plt+0x17c4c>
   2a684:	ldr	r0, [sp, #128]	; 0x80
   2a688:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2a68c:	subs	r0, r1, r0
   2a690:	movwne	r0, #1
   2a694:	b	2a6cc <__assert_fail@plt+0x17c50>
   2a698:	mov	r0, #0
   2a69c:	movw	r3, #37449	; 0x9249
   2a6a0:	subs	r0, r5, r0
   2a6a4:	str	r2, [sp, #60]	; 0x3c
   2a6a8:	sbc	r1, r4, r2
   2a6ac:	movw	r2, #9362	; 0x2492
   2a6b0:	movt	r3, #18724	; 0x4924
   2a6b4:	movt	r2, #4681	; 0x1249
   2a6b8:	subs	r0, r3, r0
   2a6bc:	sbcs	r0, r2, r1
   2a6c0:	blt	2a070 <__assert_fail@plt+0x175f4>
   2a6c4:	b	2a6f0 <__assert_fail@plt+0x17c74>
   2a6c8:	mov	r0, #0
   2a6cc:	subs	r2, r5, r0
   2a6d0:	ldr	r0, [sp, #60]	; 0x3c
   2a6d4:	mov	r1, #-2147483648	; 0x80000000
   2a6d8:	sbc	r3, r4, r0
   2a6dc:	mov	r0, #0
   2a6e0:	bl	46628 <__assert_fail@plt+0x33bac>
   2a6e4:	subs	r0, r0, #7
   2a6e8:	sbcs	r0, r1, #0
   2a6ec:	blt	2a070 <__assert_fail@plt+0x175f4>
   2a6f0:	rsbs	r0, r5, #0
   2a6f4:	rscs	r0, r4, #0
   2a6f8:	bge	2a710 <__assert_fail@plt+0x17c94>
   2a6fc:	ldr	r0, [sp, #128]	; 0x80
   2a700:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2a704:	subs	r2, r1, r0
   2a708:	movwne	r2, #1
   2a70c:	b	2a71c <__assert_fail@plt+0x17ca0>
   2a710:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2a714:	ldr	r0, [sp, #128]	; 0x80
   2a718:	mov	r2, #0
   2a71c:	rsb	r1, r1, #7
   2a720:	mov	r3, #0
   2a724:	subs	r2, r5, r2
   2a728:	mov	r6, #7
   2a72c:	add	r0, r1, r0
   2a730:	movw	r1, #9363	; 0x2493
   2a734:	sbc	r3, r4, r3
   2a738:	umull	r2, r6, r2, r6
   2a73c:	movt	r1, #37449	; 0x9249
   2a740:	rsb	r3, r3, r3, lsl #3
   2a744:	smmla	r1, r0, r1, r0
   2a748:	add	r3, r6, r3
   2a74c:	asr	r6, r1, #2
   2a750:	add	r1, r6, r1, lsr #31
   2a754:	sub	r1, r1, r1, lsl #3
   2a758:	add	r0, r0, r1
   2a75c:	adds	r1, r0, r2
   2a760:	asr	r6, r0, #31
   2a764:	mov	r2, #0
   2a768:	adc	r0, r6, r3
   2a76c:	str	r2, [sp, #60]	; 0x3c
   2a770:	mov	r2, #0
   2a774:	cmn	r0, #1
   2a778:	movwgt	r2, #1
   2a77c:	cmn	r6, #1
   2a780:	mov	r6, #0
   2a784:	movwgt	r6, #1
   2a788:	subs	r2, r6, r2
   2a78c:	movwne	r2, #1
   2a790:	cmn	r3, #1
   2a794:	mov	r3, #0
   2a798:	movwgt	r3, #1
   2a79c:	sub	r3, r6, r3
   2a7a0:	clz	r3, r3
   2a7a4:	lsr	r3, r3, #5
   2a7a8:	ands	r2, r3, r2
   2a7ac:	bne	2a070 <__assert_fail@plt+0x175f4>
   2a7b0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   2a7b4:	mov	r2, #0
   2a7b8:	cmn	r0, #1
   2a7bc:	mov	r6, #0
   2a7c0:	str	r2, [sp, #60]	; 0x3c
   2a7c4:	mov	r2, #0
   2a7c8:	movwgt	r2, #1
   2a7cc:	adds	r1, r1, r3
   2a7d0:	adc	r0, r0, r3, asr #31
   2a7d4:	asr	r3, r3, #31
   2a7d8:	str	r1, [fp, #-64]	; 0xffffffc0
   2a7dc:	cmn	r0, #1
   2a7e0:	movwgt	r6, #1
   2a7e4:	subs	r6, r2, r6
   2a7e8:	movwne	r6, #1
   2a7ec:	cmn	r3, #1
   2a7f0:	mov	r3, #0
   2a7f4:	movwgt	r3, #1
   2a7f8:	sub	r2, r2, r3
   2a7fc:	clz	r2, r2
   2a800:	lsr	r2, r2, #5
   2a804:	tst	r2, r6
   2a808:	asreq	r2, r1, #31
   2a80c:	eoreq	r1, r1, r1
   2a810:	eoreq	r0, r0, r2
   2a814:	orrseq	r0, r1, r0
   2a818:	bne	2a070 <__assert_fail@plt+0x175f4>
   2a81c:	mvn	r0, #0
   2a820:	sub	r1, fp, #76	; 0x4c
   2a824:	str	r0, [fp, #-44]	; 0xffffffd4
   2a828:	mov	r0, r9
   2a82c:	bl	453e8 <__assert_fail@plt+0x3296c>
   2a830:	mov	lr, r0
   2a834:	cmn	r0, #1
   2a838:	mvn	sl, #0
   2a83c:	beq	2a070 <__assert_fail@plt+0x175f4>
   2a840:	ldrd	r4, [r7]
   2a844:	ldr	r7, [sp, #216]	; 0xd8
   2a848:	ldr	r3, [sp, #220]	; 0xdc
   2a84c:	ldr	ip, [sp, #224]	; 0xe0
   2a850:	ldr	r0, [sp, #228]	; 0xe4
   2a854:	orr	r1, r3, r5
   2a858:	orr	r6, r7, r4
   2a85c:	orr	r1, r1, r0
   2a860:	orr	r6, r6, ip
   2a864:	orrs	r1, r6, r1
   2a868:	beq	2a9e8 <__assert_fail@plt+0x17f6c>
   2a86c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   2a870:	mov	r2, #0
   2a874:	str	r2, [sp, #60]	; 0x3c
   2a878:	mov	r2, #0
   2a87c:	asr	r6, r1, #31
   2a880:	cmn	r6, #1
   2a884:	movwgt	r2, #1
   2a888:	adds	r1, r1, r4
   2a88c:	mov	r4, #0
   2a890:	adc	r6, r6, r5
   2a894:	cmn	r6, #1
   2a898:	movwgt	r4, #1
   2a89c:	subs	r4, r2, r4
   2a8a0:	movwne	r4, #1
   2a8a4:	cmn	r5, #1
   2a8a8:	mov	r5, #0
   2a8ac:	movwgt	r5, #1
   2a8b0:	sub	r2, r2, r5
   2a8b4:	clz	r2, r2
   2a8b8:	lsr	r2, r2, #5
   2a8bc:	tst	r2, r4
   2a8c0:	asreq	r2, r1, #31
   2a8c4:	eoreq	r5, r1, r1
   2a8c8:	eoreq	r2, r6, r2
   2a8cc:	orrseq	r2, r5, r2
   2a8d0:	bne	2a070 <__assert_fail@plt+0x175f4>
   2a8d4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   2a8d8:	mov	r5, #0
   2a8dc:	str	r5, [sp, #60]	; 0x3c
   2a8e0:	mov	r5, #0
   2a8e4:	asr	r6, r2, #31
   2a8e8:	cmn	r6, #1
   2a8ec:	movwgt	r5, #1
   2a8f0:	adds	r7, r2, r7
   2a8f4:	mov	r2, #0
   2a8f8:	adc	r6, r6, r3
   2a8fc:	cmn	r6, #1
   2a900:	movwgt	r2, #1
   2a904:	subs	r2, r5, r2
   2a908:	movwne	r2, #1
   2a90c:	cmn	r3, #1
   2a910:	mov	r3, #0
   2a914:	movwgt	r3, #1
   2a918:	sub	r3, r5, r3
   2a91c:	clz	r3, r3
   2a920:	lsr	r3, r3, #5
   2a924:	tst	r3, r2
   2a928:	asreq	r2, r7, #31
   2a92c:	eoreq	r3, r7, r7
   2a930:	eoreq	r2, r6, r2
   2a934:	orrseq	r2, r3, r2
   2a938:	bne	2a070 <__assert_fail@plt+0x175f4>
   2a93c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   2a940:	mov	r6, #0
   2a944:	mov	r5, #0
   2a948:	str	r6, [sp, #60]	; 0x3c
   2a94c:	mov	r6, #0
   2a950:	asr	r3, r2, #31
   2a954:	cmn	r3, #1
   2a958:	movwgt	r6, #1
   2a95c:	adds	r2, r2, ip
   2a960:	adc	r3, r3, r0
   2a964:	cmn	r3, #1
   2a968:	movwgt	r5, #1
   2a96c:	subs	r5, r6, r5
   2a970:	movwne	r5, #1
   2a974:	cmn	r0, #1
   2a978:	mov	r0, #0
   2a97c:	movwgt	r0, #1
   2a980:	sub	r0, r6, r0
   2a984:	clz	r0, r0
   2a988:	lsr	r0, r0, #5
   2a98c:	tst	r0, r5
   2a990:	asreq	r0, r2, #31
   2a994:	eoreq	r6, r2, r2
   2a998:	eoreq	r0, r3, r0
   2a99c:	orrseq	r0, r6, r0
   2a9a0:	bne	2a070 <__assert_fail@plt+0x175f4>
   2a9a4:	ldr	r0, [sp, #36]	; 0x24
   2a9a8:	str	r7, [fp, #-60]	; 0xffffffc4
   2a9ac:	str	r1, [fp, #-56]	; 0xffffffc8
   2a9b0:	str	r2, [fp, #-64]	; 0xffffffc0
   2a9b4:	sub	r1, fp, #76	; 0x4c
   2a9b8:	str	r0, [fp, #-68]	; 0xffffffbc
   2a9bc:	ldr	r0, [sp, #28]
   2a9c0:	str	r8, [fp, #-72]	; 0xffffffb8
   2a9c4:	str	r0, [fp, #-76]	; 0xffffffb4
   2a9c8:	ldr	r0, [sp, #32]
   2a9cc:	str	r0, [fp, #-44]	; 0xffffffd4
   2a9d0:	mov	r0, r9
   2a9d4:	bl	453e8 <__assert_fail@plt+0x3296c>
   2a9d8:	mov	lr, r0
   2a9dc:	cmn	r0, #1
   2a9e0:	mvn	sl, #0
   2a9e4:	beq	2a070 <__assert_fail@plt+0x175f4>
   2a9e8:	ldr	r0, [sp, #288]	; 0x120
   2a9ec:	cmp	r0, #0
   2a9f0:	beq	2aa24 <__assert_fail@plt+0x17fa8>
   2a9f4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2a9f8:	ldr	r2, [sp, #136]	; 0x88
   2a9fc:	asr	r1, r0, #31
   2aa00:	subs	r0, r0, r2
   2aa04:	sbc	r1, r1, r2, asr #31
   2aa08:	adds	r4, r0, lr
   2aa0c:	adc	r0, r1, lr, asr #31
   2aa10:	teq	r0, r4, asr #31
   2aa14:	mov	r0, #0
   2aa18:	str	r0, [sp, #60]	; 0x3c
   2aa1c:	bne	2a070 <__assert_fail@plt+0x175f4>
   2aa20:	b	2aa28 <__assert_fail@plt+0x17fac>
   2aa24:	mov	r4, lr
   2aa28:	ldr	r1, [sp, #232]	; 0xe8
   2aa2c:	ldr	r0, [sp, #204]	; 0xcc
   2aa30:	movw	r8, #51712	; 0xca00
   2aa34:	ldr	r5, [sp, #236]	; 0xec
   2aa38:	mov	r3, #0
   2aa3c:	movt	r8, #15258	; 0x3b9a
   2aa40:	str	r1, [sp, #48]	; 0x30
   2aa44:	ldr	r1, [sp, #256]	; 0x100
   2aa48:	asr	r2, r1, #31
   2aa4c:	adds	r7, r1, r0
   2aa50:	adc	r6, r2, r0, asr #31
   2aa54:	mov	r0, #0
   2aa58:	mov	r2, r8
   2aa5c:	str	r0, [sp, #60]	; 0x3c
   2aa60:	mov	r0, r7
   2aa64:	mov	r1, r6
   2aa68:	bl	46628 <__assert_fail@plt+0x33bac>
   2aa6c:	adds	r0, r2, r8
   2aa70:	mov	r2, r8
   2aa74:	adc	r1, r3, #0
   2aa78:	mov	r3, #0
   2aa7c:	bl	46628 <__assert_fail@plt+0x33bac>
   2aa80:	subs	r0, r7, r2
   2aa84:	str	r2, [sp, #32]
   2aa88:	mov	r3, #0
   2aa8c:	sbc	r1, r6, r2, asr #31
   2aa90:	mov	r2, r8
   2aa94:	bl	46628 <__assert_fail@plt+0x33bac>
   2aa98:	cmn	r5, #1
   2aa9c:	str	r0, [sp, #36]	; 0x24
   2aaa0:	str	r1, [sp, #44]	; 0x2c
   2aaa4:	ble	2aacc <__assert_fail@plt+0x18050>
   2aaa8:	ldr	r6, [sp, #48]	; 0x30
   2aaac:	movw	r1, #24175	; 0x5e6f
   2aab0:	movw	r0, #6699	; 0x1a2b
   2aab4:	movt	r1, #15437	; 0x3c4d
   2aab8:	movt	r0, #9
   2aabc:	subs	r1, r1, r6
   2aac0:	sbcs	r0, r0, r5
   2aac4:	blt	2a070 <__assert_fail@plt+0x175f4>
   2aac8:	b	2ab08 <__assert_fail@plt+0x1808c>
   2aacc:	ldr	r6, [sp, #48]	; 0x30
   2aad0:	eor	r1, r5, sl
   2aad4:	eor	r0, r6, sl
   2aad8:	orrs	r0, r0, r1
   2aadc:	beq	2ab08 <__assert_fail@plt+0x1808c>
   2aae0:	mov	r0, #0
   2aae4:	mov	r1, #-2147483648	; 0x80000000
   2aae8:	mov	r2, r6
   2aaec:	mov	r3, r5
   2aaf0:	str	r0, [sp, #60]	; 0x3c
   2aaf4:	mov	r0, #0
   2aaf8:	bl	46628 <__assert_fail@plt+0x33bac>
   2aafc:	subs	r0, r0, #3600	; 0xe10
   2ab00:	sbcs	r0, r1, #0
   2ab04:	blt	2a070 <__assert_fail@plt+0x175f4>
   2ab08:	mov	r0, #3600	; 0xe10
   2ab0c:	umull	r1, r2, r6, r0
   2ab10:	mla	r0, r5, r0, r2
   2ab14:	adds	r8, r4, r1
   2ab18:	asr	r2, r4, #31
   2ab1c:	mov	r1, #0
   2ab20:	adc	r4, r2, r0
   2ab24:	str	r1, [sp, #60]	; 0x3c
   2ab28:	mov	r1, #0
   2ab2c:	cmn	r4, #1
   2ab30:	movwgt	r1, #1
   2ab34:	cmn	r2, #1
   2ab38:	mov	r2, #0
   2ab3c:	movwgt	r2, #1
   2ab40:	subs	r1, r2, r1
   2ab44:	movwne	r1, #1
   2ab48:	cmn	r0, #1
   2ab4c:	mov	r0, #0
   2ab50:	movwgt	r0, #1
   2ab54:	sub	r0, r2, r0
   2ab58:	clz	r0, r0
   2ab5c:	lsr	r0, r0, #5
   2ab60:	tst	r0, r1
   2ab64:	bne	2a070 <__assert_fail@plt+0x175f4>
   2ab68:	ldr	r7, [sp, #244]	; 0xf4
   2ab6c:	ldr	r6, [sp, #240]	; 0xf0
   2ab70:	cmn	r7, #1
   2ab74:	ble	2ab98 <__assert_fail@plt+0x1811c>
   2ab78:	movw	r1, #8738	; 0x2222
   2ab7c:	movw	r0, #8738	; 0x2222
   2ab80:	movt	r1, #8738	; 0x2222
   2ab84:	movt	r0, #546	; 0x222
   2ab88:	subs	r1, r1, r6
   2ab8c:	sbcs	r0, r0, r7
   2ab90:	blt	2a070 <__assert_fail@plt+0x175f4>
   2ab94:	b	2abd4 <__assert_fail@plt+0x18158>
   2ab98:	mvn	r1, #0
   2ab9c:	eor	r0, r6, r1
   2aba0:	eor	r1, r7, r1
   2aba4:	orrs	r0, r0, r1
   2aba8:	beq	2abd4 <__assert_fail@plt+0x18158>
   2abac:	mov	r0, #0
   2abb0:	mov	r1, #-2147483648	; 0x80000000
   2abb4:	mov	r2, r6
   2abb8:	mov	r3, r7
   2abbc:	str	r0, [sp, #60]	; 0x3c
   2abc0:	mov	r0, #0
   2abc4:	bl	46628 <__assert_fail@plt+0x33bac>
   2abc8:	subs	r0, r0, #60	; 0x3c
   2abcc:	sbcs	r0, r1, #0
   2abd0:	blt	2a070 <__assert_fail@plt+0x175f4>
   2abd4:	mov	r0, #60	; 0x3c
   2abd8:	rsb	r2, r7, r7, lsl #4
   2abdc:	mov	r3, #0
   2abe0:	mov	r7, #0
   2abe4:	umull	r0, r1, r6, r0
   2abe8:	str	r3, [sp, #60]	; 0x3c
   2abec:	mov	r3, #0
   2abf0:	add	r2, r1, r2, lsl #2
   2abf4:	adds	r0, r8, r0
   2abf8:	adc	r1, r4, r2
   2abfc:	cmn	r1, #1
   2ac00:	movwgt	r3, #1
   2ac04:	cmn	r4, #1
   2ac08:	movwgt	r7, #1
   2ac0c:	subs	r3, r7, r3
   2ac10:	movwne	r3, #1
   2ac14:	cmn	r2, #1
   2ac18:	mov	r2, #0
   2ac1c:	movwgt	r2, #1
   2ac20:	sub	r2, r7, r2
   2ac24:	clz	r2, r2
   2ac28:	lsr	r2, r2, #5
   2ac2c:	ands	r2, r2, r3
   2ac30:	bne	2a070 <__assert_fail@plt+0x175f4>
   2ac34:	ldr	r3, [sp, #248]	; 0xf8
   2ac38:	ldr	r7, [sp, #252]	; 0xfc
   2ac3c:	mov	r2, #0
   2ac40:	cmn	r1, #1
   2ac44:	str	r2, [sp, #60]	; 0x3c
   2ac48:	mov	r2, #0
   2ac4c:	movwgt	r2, #1
   2ac50:	adds	r0, r0, r3
   2ac54:	mov	r3, #0
   2ac58:	adc	r1, r1, r7
   2ac5c:	cmn	r1, #1
   2ac60:	movwgt	r3, #1
   2ac64:	subs	r3, r2, r3
   2ac68:	movwne	r3, #1
   2ac6c:	cmn	r7, #1
   2ac70:	mov	r7, #0
   2ac74:	movwgt	r7, #1
   2ac78:	sub	r2, r2, r7
   2ac7c:	clz	r2, r2
   2ac80:	lsr	r2, r2, #5
   2ac84:	ands	r2, r2, r3
   2ac88:	bne	2a070 <__assert_fail@plt+0x175f4>
   2ac8c:	ldr	r3, [sp, #36]	; 0x24
   2ac90:	ldr	r7, [sp, #44]	; 0x2c
   2ac94:	mov	r2, #0
   2ac98:	cmn	r1, #1
   2ac9c:	str	r2, [sp, #60]	; 0x3c
   2aca0:	mov	r2, #0
   2aca4:	movwgt	r2, #1
   2aca8:	adds	r0, r0, r3
   2acac:	mov	r3, #0
   2acb0:	adc	r1, r1, r7
   2acb4:	cmn	r1, #1
   2acb8:	movwgt	r3, #1
   2acbc:	subs	r3, r2, r3
   2acc0:	movwne	r3, #1
   2acc4:	cmn	r7, #1
   2acc8:	mov	r7, #0
   2accc:	movwgt	r7, #1
   2acd0:	sub	r2, r2, r7
   2acd4:	clz	r2, r2
   2acd8:	lsr	r2, r2, #5
   2acdc:	tst	r2, r3
   2ace0:	asreq	r2, r0, #31
   2ace4:	eoreq	r3, r0, r0
   2ace8:	eoreq	r1, r1, r2
   2acec:	orrseq	r1, r3, r1
   2acf0:	bne	2a070 <__assert_fail@plt+0x175f4>
   2acf4:	ldr	r1, [sp, #40]	; 0x28
   2acf8:	str	r0, [r1]
   2acfc:	ldr	r0, [sp, #32]
   2ad00:	str	r0, [r1, #4]
   2ad04:	b	2a068 <__assert_fail@plt+0x175ec>
   2ad08:	push	{r4, r5, r6, sl, fp, lr}
   2ad0c:	add	fp, sp, #16
   2ad10:	mov	r4, r1
   2ad14:	movw	r1, #49414	; 0xc106
   2ad18:	mov	r5, r0
   2ad1c:	movt	r1, #4
   2ad20:	mov	r0, r4
   2ad24:	bl	123d4 <strcmp@plt>
   2ad28:	cmp	r0, #0
   2ad2c:	beq	2addc <__assert_fail@plt+0x18360>
   2ad30:	movw	r1, #49418	; 0xc10a
   2ad34:	mov	r0, r4
   2ad38:	movt	r1, #4
   2ad3c:	bl	123d4 <strcmp@plt>
   2ad40:	movw	r6, #48548	; 0xbda4
   2ad44:	cmp	r0, #0
   2ad48:	movt	r6, #4
   2ad4c:	addeq	r5, r6, #12
   2ad50:	moveq	r0, r5
   2ad54:	popeq	{r4, r5, r6, sl, fp, pc}
   2ad58:	movw	r1, #49421	; 0xc10d
   2ad5c:	mov	r0, r4
   2ad60:	movt	r1, #4
   2ad64:	bl	123d4 <strcmp@plt>
   2ad68:	cmp	r0, #0
   2ad6c:	addeq	r5, r6, #24
   2ad70:	moveq	r0, r5
   2ad74:	popeq	{r4, r5, r6, sl, fp, pc}
   2ad78:	ldr	r1, [r5, #188]	; 0xbc
   2ad7c:	cmp	r1, #0
   2ad80:	beq	2ada4 <__assert_fail@plt+0x18328>
   2ad84:	add	r5, r5, #200	; 0xc8
   2ad88:	mov	r0, r4
   2ad8c:	bl	123d4 <strcmp@plt>
   2ad90:	cmp	r0, #0
   2ad94:	beq	2adec <__assert_fail@plt+0x18370>
   2ad98:	ldr	r1, [r5], #12
   2ad9c:	cmp	r1, #0
   2ada0:	bne	2ad88 <__assert_fail@plt+0x1830c>
   2ada4:	movw	r5, #48596	; 0xbdd4
   2ada8:	movw	r1, #49425	; 0xc111
   2adac:	movt	r5, #4
   2adb0:	movt	r1, #4
   2adb4:	mov	r0, r4
   2adb8:	bl	123d4 <strcmp@plt>
   2adbc:	cmp	r0, #0
   2adc0:	beq	2adf0 <__assert_fail@plt+0x18374>
   2adc4:	ldr	r1, [r5, #12]!
   2adc8:	cmp	r1, #0
   2adcc:	bne	2adb4 <__assert_fail@plt+0x18338>
   2add0:	mov	r5, #0
   2add4:	mov	r0, r5
   2add8:	pop	{r4, r5, r6, sl, fp, pc}
   2addc:	movw	r5, #48548	; 0xbda4
   2ade0:	movt	r5, #4
   2ade4:	mov	r0, r5
   2ade8:	pop	{r4, r5, r6, sl, fp, pc}
   2adec:	sub	r5, r5, #12
   2adf0:	mov	r0, r5
   2adf4:	pop	{r4, r5, r6, sl, fp, pc}
   2adf8:	push	{r4, r5, fp, lr}
   2adfc:	add	fp, sp, #8
   2ae00:	cmp	r0, #0
   2ae04:	beq	2ae98 <__assert_fail@plt+0x1841c>
   2ae08:	mov	r1, #47	; 0x2f
   2ae0c:	mov	r4, r0
   2ae10:	bl	128f0 <strrchr@plt>
   2ae14:	cmp	r0, #0
   2ae18:	mov	r5, r4
   2ae1c:	addne	r5, r0, #1
   2ae20:	sub	r0, r5, r4
   2ae24:	cmp	r0, #7
   2ae28:	blt	2ae7c <__assert_fail@plt+0x18400>
   2ae2c:	movw	r1, #49868	; 0xc2cc
   2ae30:	sub	r0, r5, #7
   2ae34:	mov	r2, #7
   2ae38:	movt	r1, #4
   2ae3c:	bl	12a1c <strncmp@plt>
   2ae40:	cmp	r0, #0
   2ae44:	bne	2ae7c <__assert_fail@plt+0x18400>
   2ae48:	movw	r1, #49876	; 0xc2d4
   2ae4c:	mov	r0, r5
   2ae50:	mov	r2, #3
   2ae54:	movt	r1, #4
   2ae58:	bl	12a1c <strncmp@plt>
   2ae5c:	cmp	r0, #0
   2ae60:	beq	2ae6c <__assert_fail@plt+0x183f0>
   2ae64:	mov	r4, r5
   2ae68:	b	2ae7c <__assert_fail@plt+0x18400>
   2ae6c:	movw	r0, #54584	; 0xd538
   2ae70:	add	r4, r5, #3
   2ae74:	movt	r0, #5
   2ae78:	str	r4, [r0]
   2ae7c:	movw	r0, #54592	; 0xd540
   2ae80:	movt	r0, #5
   2ae84:	str	r4, [r0]
   2ae88:	movw	r0, #56580	; 0xdd04
   2ae8c:	movt	r0, #5
   2ae90:	str	r4, [r0]
   2ae94:	pop	{r4, r5, fp, pc}
   2ae98:	movw	r0, #54600	; 0xd548
   2ae9c:	mov	r1, #55	; 0x37
   2aea0:	mov	r2, #1
   2aea4:	movt	r0, #5
   2aea8:	ldr	r3, [r0]
   2aeac:	movw	r0, #49812	; 0xc294
   2aeb0:	movt	r0, #4
   2aeb4:	bl	125f0 <fwrite@plt>
   2aeb8:	bl	12a28 <abort@plt>
   2aebc:	push	{r4, r5, r6, sl, fp, lr}
   2aec0:	add	fp, sp, #16
   2aec4:	mov	r4, r0
   2aec8:	movw	r0, #56584	; 0xdd08
   2aecc:	movt	r0, #5
   2aed0:	cmp	r4, #0
   2aed4:	moveq	r4, r0
   2aed8:	bl	127d0 <__errno_location@plt>
   2aedc:	ldr	r6, [r0]
   2aee0:	mov	r5, r0
   2aee4:	mov	r0, r4
   2aee8:	mov	r1, #48	; 0x30
   2aeec:	bl	2e050 <__assert_fail@plt+0x1b5d4>
   2aef0:	str	r6, [r5]
   2aef4:	pop	{r4, r5, r6, sl, fp, pc}
   2aef8:	movw	r1, #56584	; 0xdd08
   2aefc:	cmp	r0, #0
   2af00:	movt	r1, #5
   2af04:	movne	r1, r0
   2af08:	ldr	r0, [r1]
   2af0c:	bx	lr
   2af10:	movw	r2, #56584	; 0xdd08
   2af14:	cmp	r0, #0
   2af18:	movt	r2, #5
   2af1c:	movne	r2, r0
   2af20:	str	r1, [r2]
   2af24:	bx	lr
   2af28:	movw	r3, #56584	; 0xdd08
   2af2c:	cmp	r0, #0
   2af30:	movt	r3, #5
   2af34:	movne	r3, r0
   2af38:	ubfx	r0, r1, #5, #3
   2af3c:	and	r1, r1, #31
   2af40:	add	r0, r3, r0, lsl #2
   2af44:	ldr	r3, [r0, #8]
   2af48:	eor	r2, r2, r3, lsr r1
   2af4c:	and	r2, r2, #1
   2af50:	eor	r2, r3, r2, lsl r1
   2af54:	str	r2, [r0, #8]
   2af58:	mov	r0, #1
   2af5c:	and	r0, r0, r3, lsr r1
   2af60:	bx	lr
   2af64:	movw	r2, #56584	; 0xdd08
   2af68:	cmp	r0, #0
   2af6c:	movt	r2, #5
   2af70:	movne	r2, r0
   2af74:	ldr	r0, [r2, #4]
   2af78:	str	r1, [r2, #4]
   2af7c:	bx	lr
   2af80:	movw	r3, #56584	; 0xdd08
   2af84:	cmp	r0, #0
   2af88:	movt	r3, #5
   2af8c:	movne	r3, r0
   2af90:	cmp	r1, #0
   2af94:	mov	r0, #10
   2af98:	cmpne	r2, #0
   2af9c:	str	r0, [r3]
   2afa0:	bne	2afb0 <__assert_fail@plt+0x18534>
   2afa4:	push	{fp, lr}
   2afa8:	mov	fp, sp
   2afac:	bl	12a28 <abort@plt>
   2afb0:	str	r1, [r3, #40]	; 0x28
   2afb4:	str	r2, [r3, #44]	; 0x2c
   2afb8:	bx	lr
   2afbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2afc0:	add	fp, sp, #28
   2afc4:	sub	sp, sp, #20
   2afc8:	mov	r7, r0
   2afcc:	ldr	r0, [fp, #8]
   2afd0:	movw	r5, #56584	; 0xdd08
   2afd4:	mov	r8, r3
   2afd8:	mov	r9, r2
   2afdc:	mov	sl, r1
   2afe0:	movt	r5, #5
   2afe4:	cmp	r0, #0
   2afe8:	movne	r5, r0
   2afec:	bl	127d0 <__errno_location@plt>
   2aff0:	mov	r4, r0
   2aff4:	ldm	r5, {r0, r1}
   2aff8:	ldr	r2, [r5, #40]	; 0x28
   2affc:	ldr	r3, [r5, #44]	; 0x2c
   2b000:	add	r5, r5, #8
   2b004:	ldr	r6, [r4]
   2b008:	stm	sp, {r0, r1, r5}
   2b00c:	str	r2, [sp, #12]
   2b010:	str	r3, [sp, #16]
   2b014:	mov	r0, r7
   2b018:	mov	r1, sl
   2b01c:	mov	r2, r9
   2b020:	mov	r3, r8
   2b024:	bl	2b034 <__assert_fail@plt+0x185b8>
   2b028:	str	r6, [r4]
   2b02c:	sub	sp, fp, #28
   2b030:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b034:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b038:	add	fp, sp, #28
   2b03c:	sub	sp, sp, #156	; 0x9c
   2b040:	str	r0, [sp, #80]	; 0x50
   2b044:	ldr	r0, [fp, #12]
   2b048:	mov	r6, r1
   2b04c:	mov	r9, r3
   2b050:	str	r2, [fp, #-84]	; 0xffffffac
   2b054:	and	r1, r0, #4
   2b058:	str	r1, [sp, #32]
   2b05c:	and	r1, r0, #1
   2b060:	str	r1, [sp, #36]	; 0x24
   2b064:	ubfx	r4, r0, #1, #1
   2b068:	bl	12620 <__ctype_get_mb_cur_max@plt>
   2b06c:	str	r0, [sp, #40]	; 0x28
   2b070:	ldr	r0, [fp, #24]
   2b074:	ldr	r7, [fp, #8]
   2b078:	mov	r1, #0
   2b07c:	mov	r5, #1
   2b080:	str	r1, [fp, #-56]	; 0xffffffc8
   2b084:	mov	r1, #0
   2b088:	str	r1, [sp, #60]	; 0x3c
   2b08c:	str	r0, [sp, #76]	; 0x4c
   2b090:	ldr	r0, [fp, #20]
   2b094:	str	r0, [sp, #72]	; 0x48
   2b098:	mov	r0, #0
   2b09c:	str	r0, [sp, #56]	; 0x38
   2b0a0:	mov	r0, #0
   2b0a4:	str	r0, [sp, #92]	; 0x5c
   2b0a8:	mov	r0, #0
   2b0ac:	str	r0, [fp, #-76]	; 0xffffffb4
   2b0b0:	mov	r0, #0
   2b0b4:	cmp	r7, #10
   2b0b8:	bhi	2c038 <__assert_fail@plt+0x195bc>
   2b0bc:	add	r1, pc, #28
   2b0c0:	mov	sl, r6
   2b0c4:	ldr	r6, [sp, #80]	; 0x50
   2b0c8:	ldr	ip, [fp, #-84]	; 0xffffffac
   2b0cc:	mov	r8, #0
   2b0d0:	mov	r2, #1
   2b0d4:	mov	r3, #0
   2b0d8:	mov	lr, r9
   2b0dc:	ldr	pc, [r1, r7, lsl #2]
   2b0e0:	andeq	fp, r2, r4, asr #3
   2b0e4:	strdeq	fp, [r2], -r0
   2b0e8:			; <UNDEFINED> instruction: 0x0002b1b4
   2b0ec:	andeq	fp, r2, ip, lsr #3
   2b0f0:	andeq	fp, r2, r4, ror #3
   2b0f4:	andeq	fp, r2, r8, lsr r2
   2b0f8:	ldrdeq	fp, [r2], -r4
   2b0fc:	muleq	r2, r4, r2
   2b100:	andeq	fp, r2, ip, lsl #2
   2b104:	andeq	fp, r2, ip, lsl #2
   2b108:	andeq	fp, r2, r4, lsr r1
   2b10c:	movw	r0, #49956	; 0xc324
   2b110:	mov	r1, r7
   2b114:	movt	r0, #4
   2b118:	bl	2ca44 <__assert_fail@plt+0x19fc8>
   2b11c:	str	r0, [sp, #72]	; 0x48
   2b120:	movw	r0, #36792	; 0x8fb8
   2b124:	mov	r1, r7
   2b128:	movt	r0, #4
   2b12c:	bl	2ca44 <__assert_fail@plt+0x19fc8>
   2b130:	str	r0, [sp, #76]	; 0x4c
   2b134:	str	r5, [fp, #-48]	; 0xffffffd0
   2b138:	mov	r8, #0
   2b13c:	mov	r5, r7
   2b140:	tst	r4, #1
   2b144:	bne	2b17c <__assert_fail@plt+0x18700>
   2b148:	ldr	r0, [sp, #72]	; 0x48
   2b14c:	ldrb	r0, [r0]
   2b150:	cmp	r0, #0
   2b154:	beq	2b17c <__assert_fail@plt+0x18700>
   2b158:	ldr	r1, [sp, #72]	; 0x48
   2b15c:	mov	r8, #0
   2b160:	add	r1, r1, #1
   2b164:	cmp	r8, sl
   2b168:	strbcc	r0, [r6, r8]
   2b16c:	ldrb	r0, [r1, r8]
   2b170:	add	r8, r8, #1
   2b174:	cmp	r0, #0
   2b178:	bne	2b164 <__assert_fail@plt+0x186e8>
   2b17c:	ldr	r7, [sp, #76]	; 0x4c
   2b180:	mov	r0, r7
   2b184:	bl	12788 <strlen@plt>
   2b188:	str	r7, [sp, #92]	; 0x5c
   2b18c:	mov	r7, r5
   2b190:	ldr	ip, [fp, #-84]	; 0xffffffac
   2b194:	ldr	r5, [fp, #-48]	; 0xffffffd0
   2b198:	str	r0, [fp, #-76]	; 0xffffffb4
   2b19c:	mov	r2, #1
   2b1a0:	mov	r3, r4
   2b1a4:	mov	lr, r9
   2b1a8:	b	2b294 <__assert_fail@plt+0x18818>
   2b1ac:	mov	r0, #1
   2b1b0:	b	2b1f0 <__assert_fail@plt+0x18774>
   2b1b4:	tst	r4, #1
   2b1b8:	bne	2b1f0 <__assert_fail@plt+0x18774>
   2b1bc:	mov	r2, r0
   2b1c0:	b	2b218 <__assert_fail@plt+0x1879c>
   2b1c4:	mov	r7, #0
   2b1c8:	mov	r8, #0
   2b1cc:	mov	r2, r0
   2b1d0:	b	2b290 <__assert_fail@plt+0x18814>
   2b1d4:	mov	r0, #1
   2b1d8:	mov	r8, #0
   2b1dc:	mov	r7, #5
   2b1e0:	b	2b24c <__assert_fail@plt+0x187d0>
   2b1e4:	mov	r2, #1
   2b1e8:	tst	r4, #1
   2b1ec:	beq	2b218 <__assert_fail@plt+0x1879c>
   2b1f0:	mov	r1, #1
   2b1f4:	mov	r8, #0
   2b1f8:	mov	r7, #2
   2b1fc:	mov	r2, r0
   2b200:	mov	r3, #1
   2b204:	str	r1, [fp, #-76]	; 0xffffffb4
   2b208:	movw	r1, #36792	; 0x8fb8
   2b20c:	movt	r1, #4
   2b210:	str	r1, [sp, #92]	; 0x5c
   2b214:	b	2b294 <__assert_fail@plt+0x18818>
   2b218:	cmp	sl, #0
   2b21c:	mov	r8, #1
   2b220:	mov	r7, #2
   2b224:	movne	r0, #39	; 0x27
   2b228:	strbne	r0, [r6]
   2b22c:	movw	r0, #36792	; 0x8fb8
   2b230:	movt	r0, #4
   2b234:	b	2b284 <__assert_fail@plt+0x18808>
   2b238:	mov	r7, #5
   2b23c:	tst	r4, #1
   2b240:	beq	2b268 <__assert_fail@plt+0x187ec>
   2b244:	mov	r0, #1
   2b248:	mov	r8, #0
   2b24c:	str	r0, [fp, #-76]	; 0xffffffb4
   2b250:	movw	r0, #49810	; 0xc292
   2b254:	mov	r2, #1
   2b258:	mov	r3, #1
   2b25c:	movt	r0, #4
   2b260:	str	r0, [sp, #92]	; 0x5c
   2b264:	b	2b294 <__assert_fail@plt+0x18818>
   2b268:	cmp	sl, #0
   2b26c:	mov	r8, #1
   2b270:	mov	r2, #1
   2b274:	movne	r0, #34	; 0x22
   2b278:	strbne	r0, [r6]
   2b27c:	movw	r0, #49810	; 0xc292
   2b280:	movt	r0, #4
   2b284:	str	r0, [sp, #92]	; 0x5c
   2b288:	mov	r0, #1
   2b28c:	str	r0, [fp, #-76]	; 0xffffffb4
   2b290:	mov	r3, #0
   2b294:	ldr	r0, [fp, #16]
   2b298:	str	r3, [fp, #-72]	; 0xffffffb8
   2b29c:	str	r7, [fp, #-64]	; 0xffffffc0
   2b2a0:	str	r2, [sp, #84]	; 0x54
   2b2a4:	cmp	r0, #0
   2b2a8:	movwne	r0, #1
   2b2ac:	and	r0, r0, r3
   2b2b0:	str	r0, [fp, #-88]	; 0xffffffa8
   2b2b4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   2b2b8:	cmp	r0, #0
   2b2bc:	movwne	r0, #1
   2b2c0:	subs	r4, r7, #2
   2b2c4:	mov	r7, #0
   2b2c8:	and	r1, r0, r3
   2b2cc:	str	r4, [fp, #-80]	; 0xffffffb0
   2b2d0:	and	r1, r2, r1
   2b2d4:	str	r1, [sp, #48]	; 0x30
   2b2d8:	clz	r1, r4
   2b2dc:	lsr	r1, r1, #5
   2b2e0:	and	r1, r1, r3
   2b2e4:	eor	r3, r3, #1
   2b2e8:	str	r1, [sp, #64]	; 0x40
   2b2ec:	mov	r1, r4
   2b2f0:	str	r3, [sp, #88]	; 0x58
   2b2f4:	movwne	r1, #1
   2b2f8:	orr	r3, r1, r3
   2b2fc:	and	r1, r1, r2
   2b300:	and	r0, r0, r1
   2b304:	str	r3, [sp, #68]	; 0x44
   2b308:	str	r1, [fp, #-68]	; 0xffffffbc
   2b30c:	str	r0, [fp, #-60]	; 0xffffffc4
   2b310:	eor	r0, r2, #1
   2b314:	str	r0, [sp, #52]	; 0x34
   2b318:	cmn	lr, #1
   2b31c:	beq	2b32c <__assert_fail@plt+0x188b0>
   2b320:	cmp	r7, lr
   2b324:	bne	2b338 <__assert_fail@plt+0x188bc>
   2b328:	b	2be60 <__assert_fail@plt+0x193e4>
   2b32c:	ldrb	r0, [ip, r7]
   2b330:	cmp	r0, #0
   2b334:	beq	2be68 <__assert_fail@plt+0x193ec>
   2b338:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2b33c:	mov	r9, #0
   2b340:	str	r5, [fp, #-48]	; 0xffffffd0
   2b344:	cmp	r0, #0
   2b348:	beq	2b37c <__assert_fail@plt+0x18900>
   2b34c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   2b350:	add	r4, r7, r0
   2b354:	cmp	r0, #2
   2b358:	bcc	2b374 <__assert_fail@plt+0x188f8>
   2b35c:	cmn	lr, #1
   2b360:	bne	2b374 <__assert_fail@plt+0x188f8>
   2b364:	mov	r0, ip
   2b368:	bl	12788 <strlen@plt>
   2b36c:	ldr	ip, [fp, #-84]	; 0xffffffac
   2b370:	mov	lr, r0
   2b374:	cmp	r4, lr
   2b378:	bls	2b384 <__assert_fail@plt+0x18908>
   2b37c:	mov	r0, #0
   2b380:	b	2b3c4 <__assert_fail@plt+0x18948>
   2b384:	ldr	r1, [sp, #92]	; 0x5c
   2b388:	ldr	r2, [fp, #-76]	; 0xffffffb4
   2b38c:	add	r0, ip, r7
   2b390:	mov	r4, lr
   2b394:	bl	12518 <memcmp@plt>
   2b398:	ldr	r2, [sp, #88]	; 0x58
   2b39c:	cmp	r0, #0
   2b3a0:	mov	r1, r0
   2b3a4:	movwne	r1, #1
   2b3a8:	orr	r1, r1, r2
   2b3ac:	tst	r1, #1
   2b3b0:	beq	2bef8 <__assert_fail@plt+0x1947c>
   2b3b4:	ldr	ip, [fp, #-84]	; 0xffffffac
   2b3b8:	clz	r0, r0
   2b3bc:	mov	lr, r4
   2b3c0:	lsr	r0, r0, #5
   2b3c4:	str	r0, [fp, #-52]	; 0xffffffcc
   2b3c8:	ldrb	r5, [ip, r7]
   2b3cc:	cmp	r5, #126	; 0x7e
   2b3d0:	bhi	2b788 <__assert_fail@plt+0x18d0c>
   2b3d4:	add	r3, pc, #16
   2b3d8:	mov	r4, #1
   2b3dc:	mov	r2, #110	; 0x6e
   2b3e0:	mov	r0, #97	; 0x61
   2b3e4:	mov	r1, #0
   2b3e8:	ldr	pc, [r3, r5, lsl #2]
   2b3ec:	andeq	fp, r2, r4, lsl #13
   2b3f0:	andeq	fp, r2, r8, lsl #15
   2b3f4:	andeq	fp, r2, r8, lsl #15
   2b3f8:	andeq	fp, r2, r8, lsl #15
   2b3fc:	andeq	fp, r2, r8, lsl #15
   2b400:	andeq	fp, r2, r8, lsl #15
   2b404:	andeq	fp, r2, r8, lsl #15
   2b408:	andeq	fp, r2, ip, lsr r8
   2b40c:	andeq	fp, r2, r4, ror #12
   2b410:	andeq	fp, r2, ip, asr r6
   2b414:	andeq	fp, r2, r0, ror r6
   2b418:	strdeq	fp, [r2], -r0
   2b41c:	andeq	fp, r2, r4, asr r6
   2b420:	andeq	fp, r2, ip, ror #12
   2b424:	andeq	fp, r2, r8, lsl #15
   2b428:	andeq	fp, r2, r8, lsl #15
   2b42c:	andeq	fp, r2, r8, lsl #15
   2b430:	andeq	fp, r2, r8, lsl #15
   2b434:	andeq	fp, r2, r8, lsl #15
   2b438:	andeq	fp, r2, r8, lsl #15
   2b43c:	andeq	fp, r2, r8, lsl #15
   2b440:	andeq	fp, r2, r8, lsl #15
   2b444:	andeq	fp, r2, r8, lsl #15
   2b448:	andeq	fp, r2, r8, lsl #15
   2b44c:	andeq	fp, r2, r8, lsl #15
   2b450:	andeq	fp, r2, r8, lsl #15
   2b454:	andeq	fp, r2, r8, lsl #15
   2b458:	andeq	fp, r2, r8, lsl #15
   2b45c:	andeq	fp, r2, r8, lsl #15
   2b460:	andeq	fp, r2, r8, lsl #15
   2b464:	andeq	fp, r2, r8, lsl #15
   2b468:	andeq	fp, r2, r8, lsl #15
   2b46c:	strdeq	fp, [r2], -r4
   2b470:	strdeq	fp, [r2], -r8
   2b474:	strdeq	fp, [r2], -r8
   2b478:	strdeq	fp, [r2], -ip
   2b47c:	strdeq	fp, [r2], -r8
   2b480:	andeq	fp, r2, r8, ror #11
   2b484:	strdeq	fp, [r2], -r8
   2b488:	strdeq	fp, [r2], -r8
   2b48c:	strdeq	fp, [r2], -r8
   2b490:	strdeq	fp, [r2], -r8
   2b494:	strdeq	fp, [r2], -r8
   2b498:	andeq	fp, r2, r8, ror #11
   2b49c:	andeq	fp, r2, r8, ror #11
   2b4a0:	andeq	fp, r2, r8, ror #11
   2b4a4:	andeq	fp, r2, r8, ror #11
   2b4a8:	andeq	fp, r2, r8, ror #11
   2b4ac:	andeq	fp, r2, r8, ror #11
   2b4b0:	andeq	fp, r2, r8, ror #11
   2b4b4:	andeq	fp, r2, r8, ror #11
   2b4b8:	andeq	fp, r2, r8, ror #11
   2b4bc:	andeq	fp, r2, r8, ror #11
   2b4c0:	andeq	fp, r2, r8, ror #11
   2b4c4:	andeq	fp, r2, r8, ror #11
   2b4c8:	andeq	fp, r2, r8, ror #11
   2b4cc:	andeq	fp, r2, r8, ror #11
   2b4d0:	andeq	fp, r2, r8, ror #11
   2b4d4:	andeq	fp, r2, r8, ror #11
   2b4d8:	strdeq	fp, [r2], -r8
   2b4dc:	strdeq	fp, [r2], -r8
   2b4e0:	strdeq	fp, [r2], -r8
   2b4e4:	strdeq	fp, [r2], -r8
   2b4e8:	andeq	fp, r2, r4, asr #13
   2b4ec:	andeq	fp, r2, r8, lsl #15
   2b4f0:	andeq	fp, r2, r8, ror #11
   2b4f4:	andeq	fp, r2, r8, ror #11
   2b4f8:	andeq	fp, r2, r8, ror #11
   2b4fc:	andeq	fp, r2, r8, ror #11
   2b500:	andeq	fp, r2, r8, ror #11
   2b504:	andeq	fp, r2, r8, ror #11
   2b508:	andeq	fp, r2, r8, ror #11
   2b50c:	andeq	fp, r2, r8, ror #11
   2b510:	andeq	fp, r2, r8, ror #11
   2b514:	andeq	fp, r2, r8, ror #11
   2b518:	andeq	fp, r2, r8, ror #11
   2b51c:	andeq	fp, r2, r8, ror #11
   2b520:	andeq	fp, r2, r8, ror #11
   2b524:	andeq	fp, r2, r8, ror #11
   2b528:	andeq	fp, r2, r8, ror #11
   2b52c:	andeq	fp, r2, r8, ror #11
   2b530:	andeq	fp, r2, r8, ror #11
   2b534:	andeq	fp, r2, r8, ror #11
   2b538:	andeq	fp, r2, r8, ror #11
   2b53c:	andeq	fp, r2, r8, ror #11
   2b540:	andeq	fp, r2, r8, ror #11
   2b544:	andeq	fp, r2, r8, ror #11
   2b548:	andeq	fp, r2, r8, ror #11
   2b54c:	andeq	fp, r2, r8, ror #11
   2b550:	andeq	fp, r2, r8, ror #11
   2b554:	andeq	fp, r2, r8, ror #11
   2b558:	strdeq	fp, [r2], -r8
   2b55c:	andeq	fp, r2, r0, lsr r6
   2b560:	andeq	fp, r2, r8, ror #11
   2b564:	strdeq	fp, [r2], -r8
   2b568:	andeq	fp, r2, r8, ror #11
   2b56c:	strdeq	fp, [r2], -r8
   2b570:	andeq	fp, r2, r8, ror #11
   2b574:	andeq	fp, r2, r8, ror #11
   2b578:	andeq	fp, r2, r8, ror #11
   2b57c:	andeq	fp, r2, r8, ror #11
   2b580:	andeq	fp, r2, r8, ror #11
   2b584:	andeq	fp, r2, r8, ror #11
   2b588:	andeq	fp, r2, r8, ror #11
   2b58c:	andeq	fp, r2, r8, ror #11
   2b590:	andeq	fp, r2, r8, ror #11
   2b594:	andeq	fp, r2, r8, ror #11
   2b598:	andeq	fp, r2, r8, ror #11
   2b59c:	andeq	fp, r2, r8, ror #11
   2b5a0:	andeq	fp, r2, r8, ror #11
   2b5a4:	andeq	fp, r2, r8, ror #11
   2b5a8:	andeq	fp, r2, r8, ror #11
   2b5ac:	andeq	fp, r2, r8, ror #11
   2b5b0:	andeq	fp, r2, r8, ror #11
   2b5b4:	andeq	fp, r2, r8, ror #11
   2b5b8:	andeq	fp, r2, r8, ror #11
   2b5bc:	andeq	fp, r2, r8, ror #11
   2b5c0:	andeq	fp, r2, r8, ror #11
   2b5c4:	andeq	fp, r2, r8, ror #11
   2b5c8:	andeq	fp, r2, r8, ror #11
   2b5cc:	andeq	fp, r2, r8, ror #11
   2b5d0:	andeq	fp, r2, r8, ror #11
   2b5d4:	andeq	fp, r2, r8, ror #11
   2b5d8:	andeq	fp, r2, r0, lsl r6
   2b5dc:	strdeq	fp, [r2], -r8
   2b5e0:	andeq	fp, r2, r0, lsl r6
   2b5e4:	strdeq	fp, [r2], -ip
   2b5e8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2b5ec:	cmp	r0, #0
   2b5f0:	beq	2b850 <__assert_fail@plt+0x18dd4>
   2b5f4:	ldr	r0, [fp, #16]
   2b5f8:	b	2b854 <__assert_fail@plt+0x18dd8>
   2b5fc:	mov	r4, #0
   2b600:	cmp	r7, #0
   2b604:	beq	2b7f4 <__assert_fail@plt+0x18d78>
   2b608:	mov	r9, #0
   2b60c:	b	2b5e8 <__assert_fail@plt+0x18b6c>
   2b610:	mov	r4, #0
   2b614:	cmn	lr, #1
   2b618:	beq	2b7d8 <__assert_fail@plt+0x18d5c>
   2b61c:	cmp	r7, #0
   2b620:	bne	2b608 <__assert_fail@plt+0x18b8c>
   2b624:	cmp	lr, #1
   2b628:	beq	2b7f4 <__assert_fail@plt+0x18d78>
   2b62c:	b	2b608 <__assert_fail@plt+0x18b8c>
   2b630:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2b634:	cmp	r0, #2
   2b638:	bne	2b818 <__assert_fail@plt+0x18d9c>
   2b63c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2b640:	tst	r0, #1
   2b644:	bne	2bf14 <__assert_fail@plt+0x19498>
   2b648:	mov	r9, #0
   2b64c:	mov	r0, #92	; 0x5c
   2b650:	b	2b82c <__assert_fail@plt+0x18db0>
   2b654:	mov	r0, #102	; 0x66
   2b658:	b	2b83c <__assert_fail@plt+0x18dc0>
   2b65c:	mov	r2, #116	; 0x74
   2b660:	b	2b670 <__assert_fail@plt+0x18bf4>
   2b664:	mov	r0, #98	; 0x62
   2b668:	b	2b83c <__assert_fail@plt+0x18dc0>
   2b66c:	mov	r2, #114	; 0x72
   2b670:	ldr	r0, [sp, #68]	; 0x44
   2b674:	tst	r0, #1
   2b678:	mov	r0, r2
   2b67c:	bne	2b83c <__assert_fail@plt+0x18dc0>
   2b680:	b	2bf14 <__assert_fail@plt+0x19498>
   2b684:	ldr	r0, [sp, #84]	; 0x54
   2b688:	tst	r0, #1
   2b68c:	beq	2b92c <__assert_fail@plt+0x18eb0>
   2b690:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2b694:	tst	r0, #1
   2b698:	bne	2c024 <__assert_fail@plt+0x195a8>
   2b69c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2b6a0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   2b6a4:	cmp	r0, #2
   2b6a8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   2b6ac:	movwne	r0, #1
   2b6b0:	orr	r0, r0, r2
   2b6b4:	tst	r0, #1
   2b6b8:	beq	2bcfc <__assert_fail@plt+0x19280>
   2b6bc:	mov	r0, r8
   2b6c0:	b	2bd30 <__assert_fail@plt+0x192b4>
   2b6c4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2b6c8:	mov	r9, #0
   2b6cc:	mov	r5, #63	; 0x3f
   2b6d0:	cmp	r0, #5
   2b6d4:	beq	2bae0 <__assert_fail@plt+0x19064>
   2b6d8:	cmp	r0, #2
   2b6dc:	bne	2bb84 <__assert_fail@plt+0x19108>
   2b6e0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2b6e4:	tst	r0, #1
   2b6e8:	beq	2bb88 <__assert_fail@plt+0x1910c>
   2b6ec:	b	2bf14 <__assert_fail@plt+0x19498>
   2b6f0:	mov	r0, #118	; 0x76
   2b6f4:	b	2b83c <__assert_fail@plt+0x18dc0>
   2b6f8:	mov	r0, #1
   2b6fc:	mov	r5, #39	; 0x27
   2b700:	str	r0, [sp, #60]	; 0x3c
   2b704:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2b708:	cmp	r0, #2
   2b70c:	bne	2b780 <__assert_fail@plt+0x18d04>
   2b710:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2b714:	tst	r0, #1
   2b718:	bne	2bf14 <__assert_fail@plt+0x19498>
   2b71c:	ldr	r2, [sp, #56]	; 0x38
   2b720:	clz	r1, sl
   2b724:	mov	r9, #0
   2b728:	lsr	r1, r1, #5
   2b72c:	cmp	r2, #0
   2b730:	mov	r0, r2
   2b734:	movwne	r0, #1
   2b738:	orrs	r0, r0, r1
   2b73c:	moveq	r2, sl
   2b740:	moveq	sl, r0
   2b744:	cmp	r8, sl
   2b748:	str	r2, [sp, #56]	; 0x38
   2b74c:	movcc	r0, #39	; 0x27
   2b750:	strbcc	r0, [r6, r8]
   2b754:	add	r0, r8, #1
   2b758:	cmp	r0, sl
   2b75c:	movcc	r1, #92	; 0x5c
   2b760:	strbcc	r1, [r6, r0]
   2b764:	add	r0, r8, #2
   2b768:	add	r8, r8, #3
   2b76c:	cmp	r0, sl
   2b770:	movcc	r1, #39	; 0x27
   2b774:	strbcc	r1, [r6, r0]
   2b778:	mov	r0, #0
   2b77c:	str	r0, [fp, #-56]	; 0xffffffc8
   2b780:	mov	r4, #1
   2b784:	b	2b5e8 <__assert_fail@plt+0x18b6c>
   2b788:	ldr	r0, [sp, #40]	; 0x28
   2b78c:	cmp	r0, #1
   2b790:	bne	2b958 <__assert_fail@plt+0x18edc>
   2b794:	str	lr, [sp, #28]
   2b798:	bl	12740 <__ctype_b_loc@plt>
   2b79c:	ldr	r0, [r0]
   2b7a0:	ldr	ip, [fp, #-84]	; 0xffffffac
   2b7a4:	mov	r1, #1
   2b7a8:	add	r0, r0, r5, lsl #1
   2b7ac:	ldrb	r0, [r0, #1]
   2b7b0:	ubfx	r4, r0, #6, #1
   2b7b4:	ldr	r0, [sp, #52]	; 0x34
   2b7b8:	mov	r2, r1
   2b7bc:	cmp	r1, #1
   2b7c0:	orr	r0, r4, r0
   2b7c4:	bhi	2bb90 <__assert_fail@plt+0x19114>
   2b7c8:	tst	r0, #1
   2b7cc:	beq	2bb90 <__assert_fail@plt+0x19114>
   2b7d0:	ldr	lr, [sp, #28]
   2b7d4:	b	2b5e8 <__assert_fail@plt+0x18b6c>
   2b7d8:	cmp	r7, #0
   2b7dc:	ldrbeq	r0, [ip, #1]
   2b7e0:	cmpeq	r0, #0
   2b7e4:	beq	2b7f4 <__assert_fail@plt+0x18d78>
   2b7e8:	mvn	lr, #0
   2b7ec:	mov	r9, #0
   2b7f0:	b	2b5e8 <__assert_fail@plt+0x18b6c>
   2b7f4:	mov	r1, #1
   2b7f8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2b7fc:	cmp	r0, #2
   2b800:	bne	2b810 <__assert_fail@plt+0x18d94>
   2b804:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2b808:	tst	r0, #1
   2b80c:	bne	2bf14 <__assert_fail@plt+0x19498>
   2b810:	mov	r4, r1
   2b814:	b	2b5e8 <__assert_fail@plt+0x18b6c>
   2b818:	ldr	r1, [sp, #48]	; 0x30
   2b81c:	mov	r9, #0
   2b820:	mov	r0, #92	; 0x5c
   2b824:	cmp	r1, #0
   2b828:	beq	2b83c <__assert_fail@plt+0x18dc0>
   2b82c:	mov	r4, #0
   2b830:	cmp	r9, #0
   2b834:	beq	2bdc8 <__assert_fail@plt+0x1934c>
   2b838:	b	2be04 <__assert_fail@plt+0x19388>
   2b83c:	ldr	r1, [sp, #84]	; 0x54
   2b840:	mov	r4, #0
   2b844:	mov	r9, #0
   2b848:	tst	r1, #1
   2b84c:	bne	2b88c <__assert_fail@plt+0x18e10>
   2b850:	ldr	r0, [fp, #-88]	; 0xffffffa8
   2b854:	cmp	r0, #0
   2b858:	mov	r0, r5
   2b85c:	beq	2b880 <__assert_fail@plt+0x18e04>
   2b860:	ldr	r1, [fp, #16]
   2b864:	ubfx	r0, r5, #5, #3
   2b868:	mov	r2, #1
   2b86c:	ldr	r0, [r1, r0, lsl #2]
   2b870:	and	r1, r5, #31
   2b874:	tst	r0, r2, lsl r1
   2b878:	mov	r0, r5
   2b87c:	bne	2b88c <__assert_fail@plt+0x18e10>
   2b880:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2b884:	cmp	r1, #0
   2b888:	beq	2bdc0 <__assert_fail@plt+0x19344>
   2b88c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   2b890:	tst	r1, #1
   2b894:	bne	2beec <__assert_fail@plt+0x19470>
   2b898:	ldr	r1, [fp, #-64]	; 0xffffffc0
   2b89c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   2b8a0:	cmp	r1, #2
   2b8a4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   2b8a8:	movwne	r1, #1
   2b8ac:	orr	r1, r1, r2
   2b8b0:	tst	r1, #1
   2b8b4:	beq	2b8c0 <__assert_fail@plt+0x18e44>
   2b8b8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   2b8bc:	b	2b8fc <__assert_fail@plt+0x18e80>
   2b8c0:	cmp	r8, sl
   2b8c4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   2b8c8:	movcc	r1, #39	; 0x27
   2b8cc:	strbcc	r1, [r6, r8]
   2b8d0:	add	r1, r8, #1
   2b8d4:	cmp	r1, sl
   2b8d8:	movcc	r2, #36	; 0x24
   2b8dc:	strbcc	r2, [r6, r1]
   2b8e0:	add	r1, r8, #2
   2b8e4:	add	r8, r8, #3
   2b8e8:	cmp	r1, sl
   2b8ec:	movcc	r2, #39	; 0x27
   2b8f0:	strbcc	r2, [r6, r1]
   2b8f4:	mov	r1, #1
   2b8f8:	str	r1, [fp, #-56]	; 0xffffffc8
   2b8fc:	cmp	r8, sl
   2b900:	movcc	r1, #92	; 0x5c
   2b904:	strbcc	r1, [r6, r8]
   2b908:	add	r8, r8, #1
   2b90c:	cmp	r8, sl
   2b910:	and	r5, r5, r4
   2b914:	add	r7, r7, #1
   2b918:	strbcc	r0, [r6, r8]
   2b91c:	add	r8, r8, #1
   2b920:	cmn	lr, #1
   2b924:	bne	2b320 <__assert_fail@plt+0x188a4>
   2b928:	b	2b32c <__assert_fail@plt+0x188b0>
   2b92c:	ldr	r0, [sp, #36]	; 0x24
   2b930:	mov	r4, #0
   2b934:	mov	r9, #0
   2b938:	mov	r5, #0
   2b93c:	cmp	r0, #0
   2b940:	beq	2b850 <__assert_fail@plt+0x18dd4>
   2b944:	ldr	r5, [fp, #-48]	; 0xffffffd0
   2b948:	add	r7, r7, #1
   2b94c:	cmn	lr, #1
   2b950:	bne	2b320 <__assert_fail@plt+0x188a4>
   2b954:	b	2b32c <__assert_fail@plt+0x188b0>
   2b958:	mov	r0, #0
   2b95c:	cmn	lr, #1
   2b960:	str	r0, [fp, #-36]	; 0xffffffdc
   2b964:	str	r0, [fp, #-40]	; 0xffffffd8
   2b968:	bne	2b97c <__assert_fail@plt+0x18f00>
   2b96c:	mov	r0, ip
   2b970:	bl	12788 <strlen@plt>
   2b974:	ldr	ip, [fp, #-84]	; 0xffffffac
   2b978:	mov	lr, r0
   2b97c:	add	r0, ip, r7
   2b980:	mov	r4, #1
   2b984:	mov	r6, #0
   2b988:	str	lr, [sp, #28]
   2b98c:	str	r0, [sp, #24]
   2b990:	sub	r0, fp, #40	; 0x28
   2b994:	mov	r3, r0
   2b998:	str	r6, [sp, #44]	; 0x2c
   2b99c:	add	r6, r6, r7
   2b9a0:	sub	r0, fp, #44	; 0x2c
   2b9a4:	add	r1, ip, r6
   2b9a8:	sub	r2, lr, r6
   2b9ac:	bl	3236c <__assert_fail@plt+0x1f8f0>
   2b9b0:	cmp	r0, #0
   2b9b4:	beq	2be4c <__assert_fail@plt+0x193d0>
   2b9b8:	cmn	r0, #1
   2b9bc:	beq	2be0c <__assert_fail@plt+0x19390>
   2b9c0:	ldr	lr, [sp, #28]
   2b9c4:	cmn	r0, #2
   2b9c8:	beq	2be14 <__assert_fail@plt+0x19398>
   2b9cc:	ldr	r2, [sp, #64]	; 0x40
   2b9d0:	cmp	r0, #2
   2b9d4:	mov	r1, #0
   2b9d8:	movwcc	r1, #1
   2b9dc:	eor	r2, r2, #1
   2b9e0:	orrs	r1, r2, r1
   2b9e4:	bne	2baa4 <__assert_fail@plt+0x19028>
   2b9e8:	ldr	r1, [sp, #44]	; 0x2c
   2b9ec:	ldr	r2, [sp, #24]
   2b9f0:	add	r1, r2, r1
   2b9f4:	mov	r2, #1
   2b9f8:	ldrb	r3, [r1, r2]
   2b9fc:	sub	r3, r3, #91	; 0x5b
   2ba00:	cmp	r3, #33	; 0x21
   2ba04:	bhi	2ba98 <__assert_fail@plt+0x1901c>
   2ba08:	add	r6, pc, #0
   2ba0c:	ldr	pc, [r6, r3, lsl #2]
   2ba10:	andeq	fp, r2, ip, lsl #30
   2ba14:	andeq	fp, r2, ip, lsl #30
   2ba18:	muleq	r2, r8, sl
   2ba1c:	andeq	fp, r2, ip, lsl #30
   2ba20:	muleq	r2, r8, sl
   2ba24:	andeq	fp, r2, ip, lsl #30
   2ba28:	muleq	r2, r8, sl
   2ba2c:	muleq	r2, r8, sl
   2ba30:	muleq	r2, r8, sl
   2ba34:	muleq	r2, r8, sl
   2ba38:	muleq	r2, r8, sl
   2ba3c:	muleq	r2, r8, sl
   2ba40:	muleq	r2, r8, sl
   2ba44:	muleq	r2, r8, sl
   2ba48:	muleq	r2, r8, sl
   2ba4c:	muleq	r2, r8, sl
   2ba50:	muleq	r2, r8, sl
   2ba54:	muleq	r2, r8, sl
   2ba58:	muleq	r2, r8, sl
   2ba5c:	muleq	r2, r8, sl
   2ba60:	muleq	r2, r8, sl
   2ba64:	muleq	r2, r8, sl
   2ba68:	muleq	r2, r8, sl
   2ba6c:	muleq	r2, r8, sl
   2ba70:	muleq	r2, r8, sl
   2ba74:	muleq	r2, r8, sl
   2ba78:	muleq	r2, r8, sl
   2ba7c:	muleq	r2, r8, sl
   2ba80:	muleq	r2, r8, sl
   2ba84:	muleq	r2, r8, sl
   2ba88:	muleq	r2, r8, sl
   2ba8c:	muleq	r2, r8, sl
   2ba90:	muleq	r2, r8, sl
   2ba94:	andeq	fp, r2, ip, lsl #30
   2ba98:	add	r2, r2, #1
   2ba9c:	cmp	r2, r0
   2baa0:	bcc	2b9f8 <__assert_fail@plt+0x18f7c>
   2baa4:	ldr	r6, [sp, #44]	; 0x2c
   2baa8:	add	r6, r0, r6
   2baac:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2bab0:	bl	125c0 <iswprint@plt>
   2bab4:	cmp	r0, #0
   2bab8:	movwne	r0, #1
   2babc:	and	r4, r4, r0
   2bac0:	sub	r0, fp, #40	; 0x28
   2bac4:	bl	124f4 <mbsinit@plt>
   2bac8:	ldr	lr, [sp, #28]
   2bacc:	ldr	ip, [fp, #-84]	; 0xffffffac
   2bad0:	sub	r3, fp, #40	; 0x28
   2bad4:	cmp	r0, #0
   2bad8:	beq	2b998 <__assert_fail@plt+0x18f1c>
   2badc:	b	2be54 <__assert_fail@plt+0x193d8>
   2bae0:	ldr	r0, [sp, #32]
   2bae4:	cmp	r0, #0
   2bae8:	beq	2bb84 <__assert_fail@plt+0x19108>
   2baec:	add	r0, r7, #2
   2baf0:	cmp	r0, lr
   2baf4:	bcs	2bb84 <__assert_fail@plt+0x19108>
   2baf8:	add	r1, ip, r7
   2bafc:	ldrb	r1, [r1, #1]
   2bb00:	cmp	r1, #63	; 0x3f
   2bb04:	bne	2bb84 <__assert_fail@plt+0x19108>
   2bb08:	ldrb	r5, [ip, r0]
   2bb0c:	sub	r1, r5, #33	; 0x21
   2bb10:	cmp	r1, #29
   2bb14:	bhi	2bb84 <__assert_fail@plt+0x19108>
   2bb18:	movw	r3, #20929	; 0x51c1
   2bb1c:	mov	r2, #1
   2bb20:	movt	r3, #14336	; 0x3800
   2bb24:	tst	r3, r2, lsl r1
   2bb28:	beq	2bb84 <__assert_fail@plt+0x19108>
   2bb2c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   2bb30:	tst	r1, #1
   2bb34:	bne	2c02c <__assert_fail@plt+0x195b0>
   2bb38:	cmp	r8, sl
   2bb3c:	mov	r7, r0
   2bb40:	mov	r4, #0
   2bb44:	movcc	r1, #63	; 0x3f
   2bb48:	strbcc	r1, [r6, r8]
   2bb4c:	add	r1, r8, #1
   2bb50:	cmp	r1, sl
   2bb54:	movcc	r2, #34	; 0x22
   2bb58:	strbcc	r2, [r6, r1]
   2bb5c:	add	r1, r8, #2
   2bb60:	cmp	r1, sl
   2bb64:	movcc	r2, #34	; 0x22
   2bb68:	strbcc	r2, [r6, r1]
   2bb6c:	add	r1, r8, #3
   2bb70:	add	r8, r8, #4
   2bb74:	cmp	r1, sl
   2bb78:	movcc	r2, #63	; 0x3f
   2bb7c:	strbcc	r2, [r6, r1]
   2bb80:	b	2b5e8 <__assert_fail@plt+0x18b6c>
   2bb84:	mov	r5, #63	; 0x3f
   2bb88:	mov	r4, #0
   2bb8c:	b	2b5e8 <__assert_fail@plt+0x18b6c>
   2bb90:	add	r1, r2, r7
   2bb94:	ldr	lr, [sp, #28]
   2bb98:	mov	r3, #0
   2bb9c:	str	r1, [sp, #44]	; 0x2c
   2bba0:	add	r1, r7, #1
   2bba4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   2bba8:	tst	r0, #1
   2bbac:	bne	2bc80 <__assert_fail@plt+0x19204>
   2bbb0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   2bbb4:	tst	r2, #1
   2bbb8:	bne	2bf74 <__assert_fail@plt+0x194f8>
   2bbbc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   2bbc0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   2bbc4:	cmp	r7, #2
   2bbc8:	movwne	r3, #1
   2bbcc:	orr	r3, r3, r2
   2bbd0:	tst	r3, #1
   2bbd4:	bne	2bc10 <__assert_fail@plt+0x19194>
   2bbd8:	cmp	r8, sl
   2bbdc:	add	r3, r8, #1
   2bbe0:	movcc	r2, #39	; 0x27
   2bbe4:	strbcc	r2, [r6, r8]
   2bbe8:	cmp	r3, sl
   2bbec:	movcc	r2, #36	; 0x24
   2bbf0:	strbcc	r2, [r6, r3]
   2bbf4:	add	r3, r8, #2
   2bbf8:	add	r8, r8, #3
   2bbfc:	cmp	r3, sl
   2bc00:	movcc	r2, #39	; 0x27
   2bc04:	strbcc	r2, [r6, r3]
   2bc08:	mov	r2, #1
   2bc0c:	str	r2, [fp, #-56]	; 0xffffffc8
   2bc10:	cmp	r8, sl
   2bc14:	movcc	r3, #92	; 0x5c
   2bc18:	strbcc	r3, [r6, r8]
   2bc1c:	add	r3, r8, #1
   2bc20:	cmp	r3, sl
   2bc24:	andcc	r7, r5, #192	; 0xc0
   2bc28:	movcc	r2, #48	; 0x30
   2bc2c:	orrcc	r7, r2, r7, lsr #6
   2bc30:	strbcc	r7, [r6, r3]
   2bc34:	add	r3, r8, #2
   2bc38:	add	r8, r8, #3
   2bc3c:	cmp	r3, sl
   2bc40:	lsrcc	r7, r5, #3
   2bc44:	movcc	r2, #6
   2bc48:	bficc	r7, r2, #3, #29
   2bc4c:	mov	r2, #6
   2bc50:	strbcc	r7, [r6, r3]
   2bc54:	bfi	r5, r2, #3, #29
   2bc58:	mov	r3, #1
   2bc5c:	b	2bca4 <__assert_fail@plt+0x19228>
   2bc60:	cmp	r8, sl
   2bc64:	ldr	r7, [fp, #-64]	; 0xffffffc0
   2bc68:	strbcc	r5, [r6, r8]
   2bc6c:	add	r8, r8, #1
   2bc70:	ldrb	r5, [ip, r1]
   2bc74:	add	r1, r1, #1
   2bc78:	tst	r0, #1
   2bc7c:	beq	2bbb0 <__assert_fail@plt+0x19134>
   2bc80:	ldr	r2, [fp, #-52]	; 0xffffffcc
   2bc84:	tst	r2, #1
   2bc88:	beq	2bc9c <__assert_fail@plt+0x19220>
   2bc8c:	cmp	r8, sl
   2bc90:	movcc	r7, #92	; 0x5c
   2bc94:	strbcc	r7, [r6, r8]
   2bc98:	add	r8, r8, #1
   2bc9c:	mov	r2, #0
   2bca0:	str	r2, [fp, #-52]	; 0xffffffcc
   2bca4:	ldr	r2, [sp, #44]	; 0x2c
   2bca8:	and	r9, r3, #1
   2bcac:	cmp	r2, r1
   2bcb0:	bls	2bdb0 <__assert_fail@plt+0x19334>
   2bcb4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   2bcb8:	cmp	r9, #0
   2bcbc:	movwne	r9, #1
   2bcc0:	mvn	r7, r2
   2bcc4:	orr	r7, r7, r9
   2bcc8:	tst	r7, #1
   2bccc:	bne	2bc60 <__assert_fail@plt+0x191e4>
   2bcd0:	cmp	r8, sl
   2bcd4:	movcc	r7, #39	; 0x27
   2bcd8:	strbcc	r7, [r6, r8]
   2bcdc:	add	r7, r8, #1
   2bce0:	add	r8, r8, #2
   2bce4:	cmp	r7, sl
   2bce8:	movcc	r2, #39	; 0x27
   2bcec:	strbcc	r2, [r6, r7]
   2bcf0:	mov	r2, #0
   2bcf4:	str	r2, [fp, #-56]	; 0xffffffc8
   2bcf8:	b	2bc60 <__assert_fail@plt+0x191e4>
   2bcfc:	cmp	r8, sl
   2bd00:	mov	r2, #1
   2bd04:	movcc	r0, #39	; 0x27
   2bd08:	strbcc	r0, [r6, r8]
   2bd0c:	add	r0, r8, #1
   2bd10:	cmp	r0, sl
   2bd14:	movcc	r1, #36	; 0x24
   2bd18:	strbcc	r1, [r6, r0]
   2bd1c:	add	r0, r8, #2
   2bd20:	cmp	r0, sl
   2bd24:	movcc	r1, #39	; 0x27
   2bd28:	strbcc	r1, [r6, r0]
   2bd2c:	add	r0, r8, #3
   2bd30:	cmp	r0, sl
   2bd34:	add	r8, r0, #1
   2bd38:	str	r2, [fp, #-56]	; 0xffffffc8
   2bd3c:	movcc	r1, #92	; 0x5c
   2bd40:	strbcc	r1, [r6, r0]
   2bd44:	ldr	r1, [fp, #-64]	; 0xffffffc0
   2bd48:	cmp	r1, #2
   2bd4c:	beq	2bda0 <__assert_fail@plt+0x19324>
   2bd50:	add	r1, r7, #1
   2bd54:	mov	r4, #0
   2bd58:	mov	r9, #1
   2bd5c:	mov	r5, #48	; 0x30
   2bd60:	cmp	r1, lr
   2bd64:	bcs	2b5e8 <__assert_fail@plt+0x18b6c>
   2bd68:	ldrb	r1, [ip, r1]
   2bd6c:	sub	r1, r1, #48	; 0x30
   2bd70:	uxtb	r1, r1
   2bd74:	cmp	r1, #9
   2bd78:	bhi	2b5e8 <__assert_fail@plt+0x18b6c>
   2bd7c:	cmp	r8, sl
   2bd80:	movcc	r1, #48	; 0x30
   2bd84:	strbcc	r1, [r6, r8]
   2bd88:	add	r1, r0, #2
   2bd8c:	add	r8, r0, #3
   2bd90:	cmp	r1, sl
   2bd94:	movcc	r2, #48	; 0x30
   2bd98:	strbcc	r2, [r6, r1]
   2bd9c:	b	2b5e8 <__assert_fail@plt+0x18b6c>
   2bda0:	mov	r0, #48	; 0x30
   2bda4:	mov	r9, #1
   2bda8:	mov	r4, #0
   2bdac:	b	2b880 <__assert_fail@plt+0x18e04>
   2bdb0:	cmp	r9, #0
   2bdb4:	sub	r7, r1, #1
   2bdb8:	mov	r0, r5
   2bdbc:	movwne	r9, #1
   2bdc0:	cmp	r9, #0
   2bdc4:	bne	2be04 <__assert_fail@plt+0x19388>
   2bdc8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   2bdcc:	tst	r1, #1
   2bdd0:	beq	2be04 <__assert_fail@plt+0x19388>
   2bdd4:	cmp	r8, sl
   2bdd8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   2bddc:	movcc	r1, #39	; 0x27
   2bde0:	strbcc	r1, [r6, r8]
   2bde4:	add	r1, r8, #1
   2bde8:	add	r8, r8, #2
   2bdec:	cmp	r1, sl
   2bdf0:	movcc	r2, #39	; 0x27
   2bdf4:	strbcc	r2, [r6, r1]
   2bdf8:	mov	r1, #0
   2bdfc:	str	r1, [fp, #-56]	; 0xffffffc8
   2be00:	b	2b90c <__assert_fail@plt+0x18e90>
   2be04:	ldr	r5, [fp, #-48]	; 0xffffffd0
   2be08:	b	2b90c <__assert_fail@plt+0x18e90>
   2be0c:	mov	r4, #0
   2be10:	b	2be4c <__assert_fail@plt+0x193d0>
   2be14:	mov	r4, #0
   2be18:	cmp	lr, r6
   2be1c:	bls	2be4c <__assert_fail@plt+0x193d0>
   2be20:	ldr	ip, [fp, #-84]	; 0xffffffac
   2be24:	ldr	r6, [sp, #44]	; 0x2c
   2be28:	ldr	r0, [sp, #24]
   2be2c:	ldrb	r0, [r0, r6]
   2be30:	cmp	r0, #0
   2be34:	beq	2be54 <__assert_fail@plt+0x193d8>
   2be38:	add	r6, r6, #1
   2be3c:	add	r0, r7, r6
   2be40:	cmp	r0, lr
   2be44:	bcc	2be28 <__assert_fail@plt+0x193ac>
   2be48:	b	2be54 <__assert_fail@plt+0x193d8>
   2be4c:	ldr	ip, [fp, #-84]	; 0xffffffac
   2be50:	ldr	r6, [sp, #44]	; 0x2c
   2be54:	mov	r1, r6
   2be58:	ldr	r6, [sp, #80]	; 0x50
   2be5c:	b	2b7b4 <__assert_fail@plt+0x18d38>
   2be60:	mov	lr, r7
   2be64:	b	2be6c <__assert_fail@plt+0x193f0>
   2be68:	mvn	lr, #0
   2be6c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   2be70:	ldr	r1, [fp, #-72]	; 0xffffffb8
   2be74:	eor	r0, r7, #2
   2be78:	orr	r0, r0, r8
   2be7c:	clz	r0, r0
   2be80:	lsr	r0, r0, #5
   2be84:	tst	r1, r0
   2be88:	bne	2bf14 <__assert_fail@plt+0x19498>
   2be8c:	mov	r0, r1
   2be90:	ldr	r1, [fp, #-80]	; 0xffffffb0
   2be94:	cmp	r7, #2
   2be98:	movwne	r1, #1
   2be9c:	orr	r0, r0, r1
   2bea0:	tst	r0, #1
   2bea4:	ldreq	r0, [sp, #60]	; 0x3c
   2bea8:	eoreq	r0, r0, #1
   2beac:	tsteq	r0, #1
   2beb0:	bne	2bfc0 <__assert_fail@plt+0x19544>
   2beb4:	mov	r9, lr
   2beb8:	tst	r5, #1
   2bebc:	bne	2bf7c <__assert_fail@plt+0x19500>
   2bec0:	ldr	r6, [sp, #56]	; 0x38
   2bec4:	mov	r4, #0
   2bec8:	cmp	r6, #0
   2becc:	beq	2bfb8 <__assert_fail@plt+0x1953c>
   2bed0:	ldr	r0, [sp, #84]	; 0x54
   2bed4:	mov	r1, #0
   2bed8:	cmp	sl, #0
   2bedc:	mov	r5, #0
   2bee0:	str	r1, [fp, #-72]	; 0xffffffb8
   2bee4:	beq	2b0b4 <__assert_fail@plt+0x18638>
   2bee8:	b	2bfc0 <__assert_fail@plt+0x19544>
   2beec:	ldr	r7, [fp, #-64]	; 0xffffffc0
   2bef0:	ldr	r2, [sp, #84]	; 0x54
   2bef4:	b	2bf1c <__assert_fail@plt+0x194a0>
   2bef8:	ldr	ip, [fp, #-84]	; 0xffffffac
   2befc:	mov	r2, #1
   2bf00:	mov	lr, r4
   2bf04:	ldr	r7, [fp, #-64]	; 0xffffffc0
   2bf08:	b	2bf1c <__assert_fail@plt+0x194a0>
   2bf0c:	ldr	r6, [sp, #80]	; 0x50
   2bf10:	ldr	ip, [fp, #-84]	; 0xffffffac
   2bf14:	ldr	r2, [sp, #84]	; 0x54
   2bf18:	mov	r7, #2
   2bf1c:	mov	r0, #0
   2bf20:	ldr	r1, [fp, #12]
   2bf24:	tst	r2, #1
   2bf28:	mov	r2, r7
   2bf2c:	mov	r3, lr
   2bf30:	str	r0, [sp, #8]
   2bf34:	ldr	r0, [sp, #72]	; 0x48
   2bf38:	movwne	r2, #4
   2bf3c:	cmp	r7, #2
   2bf40:	movne	r2, r7
   2bf44:	str	r2, [sp]
   2bf48:	mov	r2, ip
   2bf4c:	bic	r1, r1, #2
   2bf50:	str	r0, [sp, #12]
   2bf54:	ldr	r0, [sp, #76]	; 0x4c
   2bf58:	str	r1, [sp, #4]
   2bf5c:	mov	r1, sl
   2bf60:	str	r0, [sp, #16]
   2bf64:	mov	r0, r6
   2bf68:	bl	2b034 <__assert_fail@plt+0x185b8>
   2bf6c:	mov	r8, r0
   2bf70:	b	2c018 <__assert_fail@plt+0x1959c>
   2bf74:	ldr	r2, [sp, #84]	; 0x54
   2bf78:	b	2bf1c <__assert_fail@plt+0x194a0>
   2bf7c:	mov	r0, #5
   2bf80:	ldr	r1, [sp, #56]	; 0x38
   2bf84:	ldr	r2, [fp, #-84]	; 0xffffffac
   2bf88:	mov	r3, r9
   2bf8c:	str	r0, [sp]
   2bf90:	ldr	r0, [fp, #12]
   2bf94:	str	r0, [sp, #4]
   2bf98:	ldr	r0, [fp, #16]
   2bf9c:	str	r0, [sp, #8]
   2bfa0:	ldr	r0, [sp, #72]	; 0x48
   2bfa4:	str	r0, [sp, #12]
   2bfa8:	ldr	r0, [sp, #76]	; 0x4c
   2bfac:	str	r0, [sp, #16]
   2bfb0:	ldr	r0, [sp, #80]	; 0x50
   2bfb4:	b	2bf68 <__assert_fail@plt+0x194ec>
   2bfb8:	mov	r0, #0
   2bfbc:	str	r0, [fp, #-72]	; 0xffffffb8
   2bfc0:	ldr	r1, [sp, #92]	; 0x5c
   2bfc4:	cmp	r1, #0
   2bfc8:	beq	2c008 <__assert_fail@plt+0x1958c>
   2bfcc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2bfd0:	ldr	r2, [sp, #80]	; 0x50
   2bfd4:	tst	r0, #1
   2bfd8:	bne	2c00c <__assert_fail@plt+0x19590>
   2bfdc:	ldrb	r0, [r1]
   2bfe0:	cmp	r0, #0
   2bfe4:	beq	2c00c <__assert_fail@plt+0x19590>
   2bfe8:	add	r1, r1, #1
   2bfec:	cmp	r8, sl
   2bff0:	strbcc	r0, [r2, r8]
   2bff4:	add	r8, r8, #1
   2bff8:	ldrb	r0, [r1], #1
   2bffc:	cmp	r0, #0
   2c000:	bne	2bfec <__assert_fail@plt+0x19570>
   2c004:	b	2c00c <__assert_fail@plt+0x19590>
   2c008:	ldr	r2, [sp, #80]	; 0x50
   2c00c:	cmp	r8, sl
   2c010:	movcc	r0, #0
   2c014:	strbcc	r0, [r2, r8]
   2c018:	mov	r0, r8
   2c01c:	sub	sp, fp, #28
   2c020:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c024:	mov	r2, #1
   2c028:	b	2bf04 <__assert_fail@plt+0x19488>
   2c02c:	ldr	r2, [sp, #84]	; 0x54
   2c030:	mov	r7, #5
   2c034:	b	2bf1c <__assert_fail@plt+0x194a0>
   2c038:	bl	12a28 <abort@plt>
   2c03c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c040:	add	fp, sp, #28
   2c044:	sub	sp, sp, #28
   2c048:	movw	r5, #56584	; 0xdd08
   2c04c:	cmp	r2, #0
   2c050:	mov	r4, r1
   2c054:	mov	r7, r0
   2c058:	str	r0, [sp, #20]
   2c05c:	movt	r5, #5
   2c060:	movne	r5, r2
   2c064:	bl	127d0 <__errno_location@plt>
   2c068:	mov	sl, r0
   2c06c:	ldm	r5, {r0, r1}
   2c070:	ldr	r2, [r5, #40]	; 0x28
   2c074:	ldr	r3, [r5, #44]	; 0x2c
   2c078:	add	r9, r5, #8
   2c07c:	ldr	r6, [sl]
   2c080:	orr	r8, r1, #1
   2c084:	mov	r1, #0
   2c088:	str	r6, [sp, #24]
   2c08c:	stm	sp, {r0, r8, r9}
   2c090:	str	r2, [sp, #12]
   2c094:	str	r3, [sp, #16]
   2c098:	mov	r0, #0
   2c09c:	mov	r2, r7
   2c0a0:	mov	r3, r4
   2c0a4:	mov	r6, r4
   2c0a8:	bl	2b034 <__assert_fail@plt+0x185b8>
   2c0ac:	add	r7, r0, #1
   2c0b0:	mov	r0, r7
   2c0b4:	bl	2dc20 <__assert_fail@plt+0x1b1a4>
   2c0b8:	mov	r4, r0
   2c0bc:	ldr	r0, [r5]
   2c0c0:	ldr	r2, [r5, #44]	; 0x2c
   2c0c4:	ldr	r1, [r5, #40]	; 0x28
   2c0c8:	mov	r3, r6
   2c0cc:	stm	sp, {r0, r8, r9}
   2c0d0:	str	r2, [sp, #16]
   2c0d4:	str	r1, [sp, #12]
   2c0d8:	mov	r0, r4
   2c0dc:	mov	r1, r7
   2c0e0:	ldr	r2, [sp, #20]
   2c0e4:	bl	2b034 <__assert_fail@plt+0x185b8>
   2c0e8:	ldr	r0, [sp, #24]
   2c0ec:	str	r0, [sl]
   2c0f0:	mov	r0, r4
   2c0f4:	sub	sp, fp, #28
   2c0f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c0fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c100:	add	fp, sp, #28
   2c104:	sub	sp, sp, #36	; 0x24
   2c108:	movw	r8, #56584	; 0xdd08
   2c10c:	cmp	r3, #0
   2c110:	mov	r4, r2
   2c114:	str	r2, [sp, #24]
   2c118:	mov	r5, r1
   2c11c:	mov	r6, r0
   2c120:	str	r0, [sp, #20]
   2c124:	movt	r8, #5
   2c128:	movne	r8, r3
   2c12c:	bl	127d0 <__errno_location@plt>
   2c130:	str	r0, [sp, #28]
   2c134:	cmp	r4, #0
   2c138:	add	sl, r8, #8
   2c13c:	ldm	r8, {r3, r9}
   2c140:	ldr	r7, [r0]
   2c144:	ldr	r1, [r8, #40]	; 0x28
   2c148:	ldr	r2, [r8, #44]	; 0x2c
   2c14c:	mov	r0, #0
   2c150:	orreq	r9, r9, #1
   2c154:	str	r7, [sp, #32]
   2c158:	mov	r7, r5
   2c15c:	stm	sp, {r3, r9, sl}
   2c160:	str	r1, [sp, #12]
   2c164:	str	r2, [sp, #16]
   2c168:	mov	r1, #0
   2c16c:	mov	r2, r6
   2c170:	mov	r3, r5
   2c174:	bl	2b034 <__assert_fail@plt+0x185b8>
   2c178:	add	r4, r0, #1
   2c17c:	mov	r5, r0
   2c180:	mov	r0, r4
   2c184:	bl	2dc20 <__assert_fail@plt+0x1b1a4>
   2c188:	mov	r6, r0
   2c18c:	ldr	r0, [r8]
   2c190:	ldr	r2, [r8, #44]	; 0x2c
   2c194:	ldr	r1, [r8, #40]	; 0x28
   2c198:	mov	r3, r7
   2c19c:	stm	sp, {r0, r9, sl}
   2c1a0:	str	r2, [sp, #16]
   2c1a4:	str	r1, [sp, #12]
   2c1a8:	mov	r0, r6
   2c1ac:	mov	r1, r4
   2c1b0:	ldr	r2, [sp, #20]
   2c1b4:	bl	2b034 <__assert_fail@plt+0x185b8>
   2c1b8:	ldr	r0, [sp, #24]
   2c1bc:	ldr	r1, [sp, #32]
   2c1c0:	ldr	r2, [sp, #28]
   2c1c4:	cmp	r0, #0
   2c1c8:	str	r1, [r2]
   2c1cc:	strne	r5, [r0]
   2c1d0:	mov	r0, r6
   2c1d4:	sub	sp, fp, #28
   2c1d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c1dc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2c1e0:	add	fp, sp, #24
   2c1e4:	movw	r5, #54516	; 0xd4f4
   2c1e8:	movw	r8, #54512	; 0xd4f0
   2c1ec:	movt	r5, #5
   2c1f0:	movt	r8, #5
   2c1f4:	ldr	r0, [r5]
   2c1f8:	ldr	r4, [r8]
   2c1fc:	cmp	r0, #2
   2c200:	blt	2c22c <__assert_fail@plt+0x197b0>
   2c204:	add	r7, r4, #12
   2c208:	mov	r6, #0
   2c20c:	ldr	r0, [r7, r6, lsl #3]
   2c210:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   2c214:	ldr	r1, [r5]
   2c218:	add	r2, r6, #2
   2c21c:	add	r0, r6, #1
   2c220:	mov	r6, r0
   2c224:	cmp	r2, r1
   2c228:	blt	2c20c <__assert_fail@plt+0x19790>
   2c22c:	ldr	r0, [r4, #4]
   2c230:	movw	r7, #56632	; 0xdd38
   2c234:	movt	r7, #5
   2c238:	cmp	r0, r7
   2c23c:	beq	2c254 <__assert_fail@plt+0x197d8>
   2c240:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   2c244:	movw	r0, #54520	; 0xd4f8
   2c248:	mov	r6, #256	; 0x100
   2c24c:	movt	r0, #5
   2c250:	strd	r6, [r0]
   2c254:	movw	r6, #54520	; 0xd4f8
   2c258:	movt	r6, #5
   2c25c:	cmp	r4, r6
   2c260:	beq	2c270 <__assert_fail@plt+0x197f4>
   2c264:	mov	r0, r4
   2c268:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   2c26c:	str	r6, [r8]
   2c270:	mov	r0, #1
   2c274:	str	r0, [r5]
   2c278:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2c27c:	movw	r3, #56584	; 0xdd08
   2c280:	mvn	r2, #0
   2c284:	movt	r3, #5
   2c288:	b	2c28c <__assert_fail@plt+0x19810>
   2c28c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c290:	add	fp, sp, #28
   2c294:	sub	sp, sp, #44	; 0x2c
   2c298:	mov	r7, r3
   2c29c:	str	r2, [sp, #36]	; 0x24
   2c2a0:	str	r1, [sp, #32]
   2c2a4:	mov	r5, r0
   2c2a8:	bl	127d0 <__errno_location@plt>
   2c2ac:	cmp	r5, #0
   2c2b0:	blt	2c41c <__assert_fail@plt+0x199a0>
   2c2b4:	cmn	r5, #-2147483647	; 0x80000001
   2c2b8:	beq	2c41c <__assert_fail@plt+0x199a0>
   2c2bc:	movw	r8, #54516	; 0xd4f4
   2c2c0:	movw	r4, #54512	; 0xd4f0
   2c2c4:	str	r0, [sp, #28]
   2c2c8:	ldr	r0, [r0]
   2c2cc:	movt	r8, #5
   2c2d0:	movt	r4, #5
   2c2d4:	ldr	r1, [r8]
   2c2d8:	ldr	r6, [r4]
   2c2dc:	str	r0, [sp, #24]
   2c2e0:	cmp	r1, r5
   2c2e4:	ble	2c2f0 <__assert_fail@plt+0x19874>
   2c2e8:	mov	sl, r6
   2c2ec:	b	2c358 <__assert_fail@plt+0x198dc>
   2c2f0:	movw	r9, #54520	; 0xd4f8
   2c2f4:	mov	r0, #8
   2c2f8:	add	r2, r5, #1
   2c2fc:	str	r1, [fp, #-32]	; 0xffffffe0
   2c300:	mvn	r3, #-2147483648	; 0x80000000
   2c304:	movt	r9, #5
   2c308:	str	r0, [sp]
   2c30c:	sub	r2, r2, r1
   2c310:	sub	r1, fp, #32
   2c314:	subs	r0, r6, r9
   2c318:	movne	r0, r6
   2c31c:	bl	2de20 <__assert_fail@plt+0x1b3a4>
   2c320:	cmp	r6, r9
   2c324:	mov	sl, r0
   2c328:	str	r0, [r4]
   2c32c:	ldrdeq	r0, [r9]
   2c330:	stmeq	sl, {r0, r1}
   2c334:	ldr	r1, [r8]
   2c338:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2c33c:	add	r0, sl, r1, lsl #3
   2c340:	sub	r1, r2, r1
   2c344:	lsl	r2, r1, #3
   2c348:	mov	r1, #0
   2c34c:	bl	12800 <memset@plt>
   2c350:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2c354:	str	r0, [r8]
   2c358:	mov	r9, sl
   2c35c:	ldr	r6, [r9, r5, lsl #3]!
   2c360:	ldr	r4, [r9, #4]!
   2c364:	ldm	r7, {r0, r1}
   2c368:	ldr	r2, [r7, #40]	; 0x28
   2c36c:	ldr	r3, [r7, #44]	; 0x2c
   2c370:	orr	r8, r1, #1
   2c374:	add	r1, r7, #8
   2c378:	stm	sp, {r0, r8}
   2c37c:	add	r0, sp, #8
   2c380:	str	r1, [sp, #20]
   2c384:	stm	r0, {r1, r2, r3}
   2c388:	mov	r0, r4
   2c38c:	mov	r1, r6
   2c390:	ldr	r2, [sp, #32]
   2c394:	ldr	r3, [sp, #36]	; 0x24
   2c398:	bl	2b034 <__assert_fail@plt+0x185b8>
   2c39c:	cmp	r6, r0
   2c3a0:	bhi	2c404 <__assert_fail@plt+0x19988>
   2c3a4:	add	r6, r0, #1
   2c3a8:	movw	r0, #56632	; 0xdd38
   2c3ac:	movt	r0, #5
   2c3b0:	str	r6, [sl, r5, lsl #3]
   2c3b4:	cmp	r4, r0
   2c3b8:	beq	2c3c4 <__assert_fail@plt+0x19948>
   2c3bc:	mov	r0, r4
   2c3c0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   2c3c4:	mov	r0, r6
   2c3c8:	bl	2dc20 <__assert_fail@plt+0x1b1a4>
   2c3cc:	str	r0, [r9]
   2c3d0:	mov	r4, r0
   2c3d4:	add	r3, sp, #8
   2c3d8:	ldr	r0, [r7]
   2c3dc:	ldr	r1, [r7, #40]	; 0x28
   2c3e0:	ldr	r2, [r7, #44]	; 0x2c
   2c3e4:	stm	sp, {r0, r8}
   2c3e8:	ldr	r0, [sp, #20]
   2c3ec:	stm	r3, {r0, r1, r2}
   2c3f0:	mov	r0, r4
   2c3f4:	mov	r1, r6
   2c3f8:	ldr	r2, [sp, #32]
   2c3fc:	ldr	r3, [sp, #36]	; 0x24
   2c400:	bl	2b034 <__assert_fail@plt+0x185b8>
   2c404:	ldr	r0, [sp, #28]
   2c408:	ldr	r1, [sp, #24]
   2c40c:	str	r1, [r0]
   2c410:	mov	r0, r4
   2c414:	sub	sp, fp, #28
   2c418:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c41c:	bl	12a28 <abort@plt>
   2c420:	movw	r3, #56584	; 0xdd08
   2c424:	movt	r3, #5
   2c428:	b	2c28c <__assert_fail@plt+0x19810>
   2c42c:	movw	r3, #56584	; 0xdd08
   2c430:	mov	r1, r0
   2c434:	mov	r0, #0
   2c438:	mvn	r2, #0
   2c43c:	movt	r3, #5
   2c440:	b	2c28c <__assert_fail@plt+0x19810>
   2c444:	movw	r3, #56584	; 0xdd08
   2c448:	mov	r2, r1
   2c44c:	mov	r1, r0
   2c450:	mov	r0, #0
   2c454:	movt	r3, #5
   2c458:	b	2c28c <__assert_fail@plt+0x19810>
   2c45c:	push	{fp, lr}
   2c460:	mov	fp, sp
   2c464:	sub	sp, sp, #48	; 0x30
   2c468:	vmov.i32	q8, #0	; 0x00000000
   2c46c:	mov	ip, #32
   2c470:	mov	r3, sp
   2c474:	mov	lr, r2
   2c478:	cmp	r1, #10
   2c47c:	add	r2, r3, #16
   2c480:	vst1.64	{d16-d17}, [r3], ip
   2c484:	vst1.64	{d16-d17}, [r3]
   2c488:	vst1.64	{d16-d17}, [r2]
   2c48c:	beq	2c4ac <__assert_fail@plt+0x19a30>
   2c490:	str	r1, [sp]
   2c494:	mov	r3, sp
   2c498:	mov	r1, lr
   2c49c:	mvn	r2, #0
   2c4a0:	bl	2c28c <__assert_fail@plt+0x19810>
   2c4a4:	mov	sp, fp
   2c4a8:	pop	{fp, pc}
   2c4ac:	bl	12a28 <abort@plt>
   2c4b0:	push	{r4, sl, fp, lr}
   2c4b4:	add	fp, sp, #8
   2c4b8:	sub	sp, sp, #48	; 0x30
   2c4bc:	mov	ip, r3
   2c4c0:	mov	r3, sp
   2c4c4:	vmov.i32	q8, #0	; 0x00000000
   2c4c8:	mov	lr, #32
   2c4cc:	cmp	r1, #10
   2c4d0:	add	r4, r3, #16
   2c4d4:	vst1.64	{d16-d17}, [r3], lr
   2c4d8:	vst1.64	{d16-d17}, [r3]
   2c4dc:	vst1.64	{d16-d17}, [r4]
   2c4e0:	beq	2c500 <__assert_fail@plt+0x19a84>
   2c4e4:	str	r1, [sp]
   2c4e8:	mov	r1, r2
   2c4ec:	mov	r3, sp
   2c4f0:	mov	r2, ip
   2c4f4:	bl	2c28c <__assert_fail@plt+0x19810>
   2c4f8:	sub	sp, fp, #8
   2c4fc:	pop	{r4, sl, fp, pc}
   2c500:	bl	12a28 <abort@plt>
   2c504:	push	{fp, lr}
   2c508:	mov	fp, sp
   2c50c:	sub	sp, sp, #48	; 0x30
   2c510:	mov	r3, sp
   2c514:	vmov.i32	q8, #0	; 0x00000000
   2c518:	mov	ip, #32
   2c51c:	cmp	r0, #10
   2c520:	add	r2, r3, #16
   2c524:	vst1.64	{d16-d17}, [r3], ip
   2c528:	vst1.64	{d16-d17}, [r3]
   2c52c:	vst1.64	{d16-d17}, [r2]
   2c530:	beq	2c550 <__assert_fail@plt+0x19ad4>
   2c534:	str	r0, [sp]
   2c538:	mov	r3, sp
   2c53c:	mov	r0, #0
   2c540:	mvn	r2, #0
   2c544:	bl	2c28c <__assert_fail@plt+0x19810>
   2c548:	mov	sp, fp
   2c54c:	pop	{fp, pc}
   2c550:	bl	12a28 <abort@plt>
   2c554:	push	{fp, lr}
   2c558:	mov	fp, sp
   2c55c:	sub	sp, sp, #48	; 0x30
   2c560:	mov	r3, sp
   2c564:	vmov.i32	q8, #0	; 0x00000000
   2c568:	mov	ip, #32
   2c56c:	cmp	r0, #10
   2c570:	add	lr, r3, #16
   2c574:	vst1.64	{d16-d17}, [r3], ip
   2c578:	vst1.64	{d16-d17}, [r3]
   2c57c:	vst1.64	{d16-d17}, [lr]
   2c580:	beq	2c59c <__assert_fail@plt+0x19b20>
   2c584:	str	r0, [sp]
   2c588:	mov	r3, sp
   2c58c:	mov	r0, #0
   2c590:	bl	2c28c <__assert_fail@plt+0x19810>
   2c594:	mov	sp, fp
   2c598:	pop	{fp, pc}
   2c59c:	bl	12a28 <abort@plt>
   2c5a0:	push	{r4, sl, fp, lr}
   2c5a4:	add	fp, sp, #8
   2c5a8:	sub	sp, sp, #48	; 0x30
   2c5ac:	mov	lr, r0
   2c5b0:	movw	r0, #56584	; 0xdd08
   2c5b4:	mov	r3, #32
   2c5b8:	mov	ip, r1
   2c5bc:	mov	r4, #1
   2c5c0:	movt	r0, #5
   2c5c4:	add	r1, r0, #16
   2c5c8:	vld1.64	{d16-d17}, [r0], r3
   2c5cc:	mov	r3, sp
   2c5d0:	vld1.64	{d18-d19}, [r1]
   2c5d4:	add	r1, r3, #16
   2c5d8:	vld1.64	{d20-d21}, [r0]
   2c5dc:	add	r0, r3, #32
   2c5e0:	vst1.64	{d18-d19}, [r1]
   2c5e4:	mov	r1, r3
   2c5e8:	vst1.64	{d20-d21}, [r0]
   2c5ec:	mov	r0, #28
   2c5f0:	and	r0, r0, r2, lsr #3
   2c5f4:	and	r2, r2, #31
   2c5f8:	vst1.64	{d16-d17}, [r1], r0
   2c5fc:	ldr	r0, [r1, #8]
   2c600:	bic	r4, r4, r0, lsr r2
   2c604:	eor	r0, r0, r4, lsl r2
   2c608:	mov	r2, ip
   2c60c:	str	r0, [r1, #8]
   2c610:	mov	r0, #0
   2c614:	mov	r1, lr
   2c618:	bl	2c28c <__assert_fail@plt+0x19810>
   2c61c:	sub	sp, fp, #8
   2c620:	pop	{r4, sl, fp, pc}
   2c624:	push	{fp, lr}
   2c628:	mov	fp, sp
   2c62c:	sub	sp, sp, #48	; 0x30
   2c630:	mov	ip, r0
   2c634:	movw	r0, #56584	; 0xdd08
   2c638:	mov	r3, #32
   2c63c:	movt	r0, #5
   2c640:	add	r2, r0, #16
   2c644:	vld1.64	{d16-d17}, [r0], r3
   2c648:	mov	r3, sp
   2c64c:	vld1.64	{d18-d19}, [r2]
   2c650:	add	r2, r3, #16
   2c654:	vld1.64	{d20-d21}, [r0]
   2c658:	add	r0, r3, #32
   2c65c:	vst1.64	{d18-d19}, [r2]
   2c660:	mov	r2, r3
   2c664:	vst1.64	{d20-d21}, [r0]
   2c668:	mov	r0, #28
   2c66c:	and	r0, r0, r1, lsr #3
   2c670:	and	r1, r1, #31
   2c674:	vst1.64	{d16-d17}, [r2], r0
   2c678:	mov	r0, #1
   2c67c:	ldr	lr, [r2, #8]
   2c680:	bic	r0, r0, lr, lsr r1
   2c684:	eor	r0, lr, r0, lsl r1
   2c688:	mov	r1, ip
   2c68c:	str	r0, [r2, #8]
   2c690:	mov	r0, #0
   2c694:	mvn	r2, #0
   2c698:	bl	2c28c <__assert_fail@plt+0x19810>
   2c69c:	mov	sp, fp
   2c6a0:	pop	{fp, pc}
   2c6a4:	push	{fp, lr}
   2c6a8:	mov	fp, sp
   2c6ac:	sub	sp, sp, #48	; 0x30
   2c6b0:	movw	r2, #56584	; 0xdd08
   2c6b4:	mov	r3, #32
   2c6b8:	mov	r1, r0
   2c6bc:	movt	r2, #5
   2c6c0:	add	r0, r2, #16
   2c6c4:	vld1.64	{d16-d17}, [r2], r3
   2c6c8:	mov	r3, sp
   2c6cc:	vld1.64	{d18-d19}, [r0]
   2c6d0:	add	r0, r3, #16
   2c6d4:	vld1.64	{d20-d21}, [r2]
   2c6d8:	mov	r2, r3
   2c6dc:	vst1.64	{d18-d19}, [r0]
   2c6e0:	add	r0, r3, #32
   2c6e4:	vst1.64	{d20-d21}, [r0]
   2c6e8:	mov	r0, #12
   2c6ec:	vst1.64	{d16-d17}, [r2], r0
   2c6f0:	ldr	r0, [r2]
   2c6f4:	orr	r0, r0, #67108864	; 0x4000000
   2c6f8:	str	r0, [r2]
   2c6fc:	mov	r0, #0
   2c700:	mvn	r2, #0
   2c704:	bl	2c28c <__assert_fail@plt+0x19810>
   2c708:	mov	sp, fp
   2c70c:	pop	{fp, pc}
   2c710:	push	{fp, lr}
   2c714:	mov	fp, sp
   2c718:	sub	sp, sp, #48	; 0x30
   2c71c:	mov	ip, r1
   2c720:	mov	r1, r0
   2c724:	movw	r0, #56584	; 0xdd08
   2c728:	mov	r3, #32
   2c72c:	movt	r0, #5
   2c730:	add	r2, r0, #16
   2c734:	vld1.64	{d16-d17}, [r0], r3
   2c738:	mov	r3, sp
   2c73c:	vld1.64	{d18-d19}, [r2]
   2c740:	add	r2, r3, #16
   2c744:	vld1.64	{d20-d21}, [r0]
   2c748:	add	r0, r3, #32
   2c74c:	vst1.64	{d18-d19}, [r2]
   2c750:	mov	r2, r3
   2c754:	vst1.64	{d20-d21}, [r0]
   2c758:	mov	r0, #12
   2c75c:	vst1.64	{d16-d17}, [r2], r0
   2c760:	ldr	r0, [r2]
   2c764:	orr	r0, r0, #67108864	; 0x4000000
   2c768:	str	r0, [r2]
   2c76c:	mov	r0, #0
   2c770:	mov	r2, ip
   2c774:	bl	2c28c <__assert_fail@plt+0x19810>
   2c778:	mov	sp, fp
   2c77c:	pop	{fp, pc}
   2c780:	push	{r4, sl, fp, lr}
   2c784:	add	fp, sp, #8
   2c788:	sub	sp, sp, #96	; 0x60
   2c78c:	mov	ip, r2
   2c790:	mov	r2, sp
   2c794:	vmov.i32	q8, #0	; 0x00000000
   2c798:	mov	r4, #28
   2c79c:	cmp	r1, #10
   2c7a0:	mov	r3, r2
   2c7a4:	add	lr, r2, #16
   2c7a8:	vst1.64	{d16-d17}, [r3], r4
   2c7ac:	vst1.64	{d16-d17}, [lr]
   2c7b0:	vst1.32	{d16-d17}, [r3]
   2c7b4:	beq	2c804 <__assert_fail@plt+0x19d88>
   2c7b8:	vld1.64	{d16-d17}, [r2], r4
   2c7bc:	vld1.64	{d18-d19}, [lr]
   2c7c0:	add	r3, sp, #48	; 0x30
   2c7c4:	add	r4, r3, #4
   2c7c8:	vld1.32	{d20-d21}, [r2]
   2c7cc:	add	r2, r3, #20
   2c7d0:	vst1.32	{d16-d17}, [r4]
   2c7d4:	vst1.32	{d18-d19}, [r2]
   2c7d8:	add	r2, r3, #32
   2c7dc:	vst1.32	{d20-d21}, [r2]
   2c7e0:	str	r1, [sp, #48]	; 0x30
   2c7e4:	mvn	r2, #0
   2c7e8:	ldr	r1, [sp, #60]	; 0x3c
   2c7ec:	orr	r1, r1, #67108864	; 0x4000000
   2c7f0:	str	r1, [sp, #60]	; 0x3c
   2c7f4:	mov	r1, ip
   2c7f8:	bl	2c28c <__assert_fail@plt+0x19810>
   2c7fc:	sub	sp, fp, #8
   2c800:	pop	{r4, sl, fp, pc}
   2c804:	bl	12a28 <abort@plt>
   2c808:	push	{r4, r5, fp, lr}
   2c80c:	add	fp, sp, #8
   2c810:	sub	sp, sp, #48	; 0x30
   2c814:	mov	ip, r3
   2c818:	movw	r3, #56584	; 0xdd08
   2c81c:	mov	lr, #32
   2c820:	cmp	r1, #0
   2c824:	mov	r5, sp
   2c828:	movt	r3, #5
   2c82c:	cmpne	r2, #0
   2c830:	add	r4, r3, #16
   2c834:	vld1.64	{d16-d17}, [r3], lr
   2c838:	vld1.64	{d18-d19}, [r4]
   2c83c:	add	r4, r5, #16
   2c840:	vld1.64	{d20-d21}, [r3]
   2c844:	vst1.64	{d16-d17}, [r5], lr
   2c848:	mov	r3, #10
   2c84c:	vst1.64	{d18-d19}, [r4]
   2c850:	vst1.64	{d20-d21}, [r5]
   2c854:	str	r3, [sp]
   2c858:	bne	2c860 <__assert_fail@plt+0x19de4>
   2c85c:	bl	12a28 <abort@plt>
   2c860:	str	r2, [sp, #44]	; 0x2c
   2c864:	str	r1, [sp, #40]	; 0x28
   2c868:	mov	r3, sp
   2c86c:	mov	r1, ip
   2c870:	mvn	r2, #0
   2c874:	bl	2c28c <__assert_fail@plt+0x19810>
   2c878:	sub	sp, fp, #8
   2c87c:	pop	{r4, r5, fp, pc}
   2c880:	push	{r4, r5, fp, lr}
   2c884:	add	fp, sp, #8
   2c888:	sub	sp, sp, #48	; 0x30
   2c88c:	mov	lr, r3
   2c890:	movw	r3, #56584	; 0xdd08
   2c894:	mov	ip, #32
   2c898:	cmp	r1, #0
   2c89c:	mov	r5, sp
   2c8a0:	movt	r3, #5
   2c8a4:	cmpne	r2, #0
   2c8a8:	add	r4, r3, #16
   2c8ac:	vld1.64	{d16-d17}, [r3], ip
   2c8b0:	vld1.64	{d18-d19}, [r4]
   2c8b4:	add	r4, r5, #16
   2c8b8:	vld1.64	{d20-d21}, [r3]
   2c8bc:	vst1.64	{d16-d17}, [r5], ip
   2c8c0:	mov	r3, #10
   2c8c4:	vst1.64	{d18-d19}, [r4]
   2c8c8:	vst1.64	{d20-d21}, [r5]
   2c8cc:	str	r3, [sp]
   2c8d0:	bne	2c8d8 <__assert_fail@plt+0x19e5c>
   2c8d4:	bl	12a28 <abort@plt>
   2c8d8:	ldr	ip, [fp, #8]
   2c8dc:	str	r2, [sp, #44]	; 0x2c
   2c8e0:	str	r1, [sp, #40]	; 0x28
   2c8e4:	mov	r3, sp
   2c8e8:	mov	r1, lr
   2c8ec:	mov	r2, ip
   2c8f0:	bl	2c28c <__assert_fail@plt+0x19810>
   2c8f4:	sub	sp, fp, #8
   2c8f8:	pop	{r4, r5, fp, pc}
   2c8fc:	push	{r4, sl, fp, lr}
   2c900:	add	fp, sp, #8
   2c904:	sub	sp, sp, #48	; 0x30
   2c908:	mov	ip, r2
   2c90c:	movw	r2, #56584	; 0xdd08
   2c910:	mov	lr, #32
   2c914:	cmp	r0, #0
   2c918:	mov	r4, sp
   2c91c:	movt	r2, #5
   2c920:	cmpne	r1, #0
   2c924:	add	r3, r2, #16
   2c928:	vld1.64	{d16-d17}, [r2], lr
   2c92c:	vld1.64	{d18-d19}, [r3]
   2c930:	add	r3, r4, #16
   2c934:	vld1.64	{d20-d21}, [r2]
   2c938:	vst1.64	{d16-d17}, [r4], lr
   2c93c:	mov	r2, #10
   2c940:	vst1.64	{d18-d19}, [r3]
   2c944:	vst1.64	{d20-d21}, [r4]
   2c948:	str	r2, [sp]
   2c94c:	bne	2c954 <__assert_fail@plt+0x19ed8>
   2c950:	bl	12a28 <abort@plt>
   2c954:	str	r1, [sp, #44]	; 0x2c
   2c958:	str	r0, [sp, #40]	; 0x28
   2c95c:	mov	r3, sp
   2c960:	mov	r0, #0
   2c964:	mov	r1, ip
   2c968:	mvn	r2, #0
   2c96c:	bl	2c28c <__assert_fail@plt+0x19810>
   2c970:	sub	sp, fp, #8
   2c974:	pop	{r4, sl, fp, pc}
   2c978:	push	{r4, r5, fp, lr}
   2c97c:	add	fp, sp, #8
   2c980:	sub	sp, sp, #48	; 0x30
   2c984:	mov	lr, r2
   2c988:	movw	r2, #56584	; 0xdd08
   2c98c:	mov	ip, r3
   2c990:	mov	r3, #32
   2c994:	cmp	r0, #0
   2c998:	mov	r5, sp
   2c99c:	movt	r2, #5
   2c9a0:	cmpne	r1, #0
   2c9a4:	add	r4, r2, #16
   2c9a8:	vld1.64	{d16-d17}, [r2], r3
   2c9ac:	vld1.64	{d18-d19}, [r4]
   2c9b0:	add	r4, r5, #16
   2c9b4:	vld1.64	{d20-d21}, [r2]
   2c9b8:	vst1.64	{d16-d17}, [r5], r3
   2c9bc:	mov	r2, #10
   2c9c0:	vst1.64	{d18-d19}, [r4]
   2c9c4:	vst1.64	{d20-d21}, [r5]
   2c9c8:	str	r2, [sp]
   2c9cc:	bne	2c9d4 <__assert_fail@plt+0x19f58>
   2c9d0:	bl	12a28 <abort@plt>
   2c9d4:	str	r1, [sp, #44]	; 0x2c
   2c9d8:	str	r0, [sp, #40]	; 0x28
   2c9dc:	mov	r3, sp
   2c9e0:	mov	r0, #0
   2c9e4:	mov	r1, lr
   2c9e8:	mov	r2, ip
   2c9ec:	bl	2c28c <__assert_fail@plt+0x19810>
   2c9f0:	sub	sp, fp, #8
   2c9f4:	pop	{r4, r5, fp, pc}
   2c9f8:	movw	r3, #54528	; 0xd500
   2c9fc:	movt	r3, #5
   2ca00:	b	2c28c <__assert_fail@plt+0x19810>
   2ca04:	movw	r3, #54528	; 0xd500
   2ca08:	mov	r2, r1
   2ca0c:	mov	r1, r0
   2ca10:	mov	r0, #0
   2ca14:	movt	r3, #5
   2ca18:	b	2c28c <__assert_fail@plt+0x19810>
   2ca1c:	movw	r3, #54528	; 0xd500
   2ca20:	mvn	r2, #0
   2ca24:	movt	r3, #5
   2ca28:	b	2c28c <__assert_fail@plt+0x19810>
   2ca2c:	movw	r3, #54528	; 0xd500
   2ca30:	mov	r1, r0
   2ca34:	mov	r0, #0
   2ca38:	mvn	r2, #0
   2ca3c:	movt	r3, #5
   2ca40:	b	2c28c <__assert_fail@plt+0x19810>
   2ca44:	push	{r4, r5, fp, lr}
   2ca48:	add	fp, sp, #8
   2ca4c:	mov	r5, r0
   2ca50:	mov	r4, r1
   2ca54:	mov	r0, #0
   2ca58:	mov	r2, #5
   2ca5c:	mov	r1, r5
   2ca60:	bl	1253c <dcgettext@plt>
   2ca64:	cmp	r0, r5
   2ca68:	popne	{r4, r5, fp, pc}
   2ca6c:	bl	45f34 <__assert_fail@plt+0x334b8>
   2ca70:	ldrb	r1, [r0]
   2ca74:	and	r1, r1, #223	; 0xdf
   2ca78:	cmp	r1, #71	; 0x47
   2ca7c:	beq	2cae4 <__assert_fail@plt+0x1a068>
   2ca80:	cmp	r1, #85	; 0x55
   2ca84:	bne	2cb08 <__assert_fail@plt+0x1a08c>
   2ca88:	ldrb	r1, [r0, #1]
   2ca8c:	and	r1, r1, #223	; 0xdf
   2ca90:	cmp	r1, #84	; 0x54
   2ca94:	bne	2cb08 <__assert_fail@plt+0x1a08c>
   2ca98:	ldrb	r1, [r0, #2]
   2ca9c:	and	r1, r1, #223	; 0xdf
   2caa0:	cmp	r1, #70	; 0x46
   2caa4:	ldrbeq	r1, [r0, #3]
   2caa8:	cmpeq	r1, #45	; 0x2d
   2caac:	bne	2cb08 <__assert_fail@plt+0x1a08c>
   2cab0:	ldrb	r1, [r0, #4]
   2cab4:	cmp	r1, #56	; 0x38
   2cab8:	ldrbeq	r0, [r0, #5]
   2cabc:	cmpeq	r0, #0
   2cac0:	bne	2cb08 <__assert_fail@plt+0x1a08c>
   2cac4:	ldrb	r1, [r5]
   2cac8:	movw	r2, #49958	; 0xc326
   2cacc:	movw	r0, #49962	; 0xc32a
   2cad0:	movt	r2, #4
   2cad4:	movt	r0, #4
   2cad8:	cmp	r1, #96	; 0x60
   2cadc:	moveq	r0, r2
   2cae0:	pop	{r4, r5, fp, pc}
   2cae4:	ldrb	r1, [r0, #1]
   2cae8:	and	r1, r1, #223	; 0xdf
   2caec:	cmp	r1, #66	; 0x42
   2caf0:	bne	2cb08 <__assert_fail@plt+0x1a08c>
   2caf4:	ldrb	r1, [r0, #2]
   2caf8:	cmp	r1, #49	; 0x31
   2cafc:	ldrbeq	r1, [r0, #3]
   2cb00:	cmpeq	r1, #56	; 0x38
   2cb04:	beq	2cb24 <__assert_fail@plt+0x1a0a8>
   2cb08:	movw	r1, #49810	; 0xc292
   2cb0c:	movw	r0, #36792	; 0x8fb8
   2cb10:	cmp	r4, #9
   2cb14:	movt	r1, #4
   2cb18:	movt	r0, #4
   2cb1c:	moveq	r0, r1
   2cb20:	pop	{r4, r5, fp, pc}
   2cb24:	ldrb	r1, [r0, #4]
   2cb28:	cmp	r1, #48	; 0x30
   2cb2c:	ldrbeq	r1, [r0, #5]
   2cb30:	cmpeq	r1, #51	; 0x33
   2cb34:	bne	2cb08 <__assert_fail@plt+0x1a08c>
   2cb38:	ldrb	r1, [r0, #6]
   2cb3c:	cmp	r1, #48	; 0x30
   2cb40:	ldrbeq	r0, [r0, #7]
   2cb44:	cmpeq	r0, #0
   2cb48:	bne	2cb08 <__assert_fail@plt+0x1a08c>
   2cb4c:	ldrb	r1, [r5]
   2cb50:	movw	r2, #49966	; 0xc32e
   2cb54:	movw	r0, #49970	; 0xc332
   2cb58:	movt	r2, #4
   2cb5c:	movt	r0, #4
   2cb60:	b	2cad8 <__assert_fail@plt+0x1a05c>
   2cb64:	push	{r4, r5, fp, lr}
   2cb68:	add	fp, sp, #8
   2cb6c:	mov	r4, #0
   2cb70:	mov	r5, r0
   2cb74:	mov	r1, #524288	; 0x80000
   2cb78:	str	r4, [r0, #4]
   2cb7c:	movw	r0, #31476	; 0x7af4
   2cb80:	movt	r0, #4
   2cb84:	bl	22960 <__assert_fail@plt+0xfee4>
   2cb88:	cmn	r0, #1
   2cb8c:	str	r0, [r5]
   2cb90:	ble	2cb9c <__assert_fail@plt+0x1a120>
   2cb94:	mov	r0, r4
   2cb98:	pop	{r4, r5, fp, pc}
   2cb9c:	mov	r0, #0
   2cba0:	mov	r1, #0
   2cba4:	mov	r4, #0
   2cba8:	bl	1274c <getcwd@plt>
   2cbac:	cmp	r0, #0
   2cbb0:	str	r0, [r5, #4]
   2cbb4:	mvneq	r4, #0
   2cbb8:	mov	r0, r4
   2cbbc:	pop	{r4, r5, fp, pc}
   2cbc0:	ldr	r1, [r0]
   2cbc4:	cmp	r1, #0
   2cbc8:	blt	2cbd4 <__assert_fail@plt+0x1a158>
   2cbcc:	mov	r0, r1
   2cbd0:	b	12980 <fchdir@plt>
   2cbd4:	ldr	r0, [r0, #4]
   2cbd8:	b	2f7b4 <__assert_fail@plt+0x1cd38>
   2cbdc:	push	{r4, sl, fp, lr}
   2cbe0:	add	fp, sp, #8
   2cbe4:	mov	r4, r0
   2cbe8:	ldr	r0, [r0]
   2cbec:	cmp	r0, #0
   2cbf0:	blt	2cbf8 <__assert_fail@plt+0x1a17c>
   2cbf4:	bl	12a34 <close@plt>
   2cbf8:	ldr	r0, [r4, #4]
   2cbfc:	pop	{r4, sl, fp, lr}
   2cc00:	b	2fd6c <__assert_fail@plt+0x1d2f0>
   2cc04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cc08:	add	fp, sp, #28
   2cc0c:	sub	sp, sp, #964	; 0x3c4
   2cc10:	sub	sp, sp, #3072	; 0xc00
   2cc14:	mov	r4, r2
   2cc18:	mov	r5, r1
   2cc1c:	cmn	r0, #100	; 0x64
   2cc20:	beq	2cc34 <__assert_fail@plt+0x1a1b8>
   2cc24:	mov	r7, r0
   2cc28:	ldrb	r0, [r5]
   2cc2c:	cmp	r0, #47	; 0x2f
   2cc30:	bne	2cc48 <__assert_fail@plt+0x1a1cc>
   2cc34:	mov	r0, r5
   2cc38:	mov	r1, r4
   2cc3c:	sub	sp, fp, #28
   2cc40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cc44:	b	321e0 <__assert_fail@plt+0x1f764>
   2cc48:	mov	sl, sp
   2cc4c:	mov	r1, r7
   2cc50:	mov	r2, r5
   2cc54:	mov	r0, sl
   2cc58:	bl	45a08 <__assert_fail@plt+0x32f8c>
   2cc5c:	cmp	r0, #0
   2cc60:	beq	2cd4c <__assert_fail@plt+0x1a2d0>
   2cc64:	mov	r1, r4
   2cc68:	mov	r6, r0
   2cc6c:	bl	321e0 <__assert_fail@plt+0x1f764>
   2cc70:	mov	r9, r0
   2cc74:	bl	127d0 <__errno_location@plt>
   2cc78:	ldr	r2, [r0]
   2cc7c:	mov	r8, r0
   2cc80:	cmp	r6, sl
   2cc84:	beq	2cc98 <__assert_fail@plt+0x1a21c>
   2cc88:	mov	r0, r6
   2cc8c:	mov	r6, r2
   2cc90:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   2cc94:	mov	r2, r6
   2cc98:	cmn	r9, #1
   2cc9c:	bne	2ce18 <__assert_fail@plt+0x1a39c>
   2cca0:	sub	r0, r2, #1
   2cca4:	cmp	r0, #37	; 0x25
   2cca8:	bhi	2ce0c <__assert_fail@plt+0x1a390>
   2ccac:	add	r1, pc, #0
   2ccb0:	ldr	pc, [r1, r0, lsl #2]
   2ccb4:	andeq	ip, r2, ip, asr #26
   2ccb8:	andeq	ip, r2, ip, asr #26
   2ccbc:	andeq	ip, r2, r4, lsl lr
   2ccc0:	andeq	ip, r2, r4, lsl lr
   2ccc4:	andeq	ip, r2, r4, lsl lr
   2ccc8:	andeq	ip, r2, r4, lsl lr
   2cccc:	andeq	ip, r2, r4, lsl lr
   2ccd0:	andeq	ip, r2, r4, lsl lr
   2ccd4:	andeq	ip, r2, r4, lsl lr
   2ccd8:	andeq	ip, r2, r4, lsl lr
   2ccdc:	andeq	ip, r2, r4, lsl lr
   2cce0:	andeq	ip, r2, r4, lsl lr
   2cce4:	andeq	ip, r2, ip, asr #26
   2cce8:	andeq	ip, r2, r4, lsl lr
   2ccec:	andeq	ip, r2, r4, lsl lr
   2ccf0:	andeq	ip, r2, r4, lsl lr
   2ccf4:	andeq	ip, r2, r4, lsl lr
   2ccf8:	andeq	ip, r2, r4, lsl lr
   2ccfc:	andeq	ip, r2, r4, lsl lr
   2cd00:	andeq	ip, r2, ip, asr #26
   2cd04:	andeq	ip, r2, r4, lsl lr
   2cd08:	andeq	ip, r2, r4, lsl lr
   2cd0c:	andeq	ip, r2, r4, lsl lr
   2cd10:	andeq	ip, r2, r4, lsl lr
   2cd14:	andeq	ip, r2, r4, lsl lr
   2cd18:	andeq	ip, r2, r4, lsl lr
   2cd1c:	andeq	ip, r2, r4, lsl lr
   2cd20:	andeq	ip, r2, r4, lsl lr
   2cd24:	andeq	ip, r2, r4, lsl lr
   2cd28:	andeq	ip, r2, r4, lsl lr
   2cd2c:	andeq	ip, r2, r4, lsl lr
   2cd30:	andeq	ip, r2, r4, lsl lr
   2cd34:	andeq	ip, r2, r4, lsl lr
   2cd38:	andeq	ip, r2, r4, lsl lr
   2cd3c:	andeq	ip, r2, r4, lsl lr
   2cd40:	andeq	ip, r2, r4, lsl lr
   2cd44:	andeq	ip, r2, r4, lsl lr
   2cd48:	andeq	ip, r2, ip, asr #26
   2cd4c:	mov	r0, sp
   2cd50:	bl	2cb64 <__assert_fail@plt+0x1a0e8>
   2cd54:	cmp	r0, #0
   2cd58:	bne	2ce24 <__assert_fail@plt+0x1a3a8>
   2cd5c:	cmp	r7, #0
   2cd60:	blt	2cd8c <__assert_fail@plt+0x1a310>
   2cd64:	ldr	r0, [sp]
   2cd68:	cmp	r0, r7
   2cd6c:	bne	2cd8c <__assert_fail@plt+0x1a310>
   2cd70:	mov	r0, sp
   2cd74:	bl	2cbdc <__assert_fail@plt+0x1a160>
   2cd78:	bl	127d0 <__errno_location@plt>
   2cd7c:	mov	r1, #9
   2cd80:	mvn	r9, #0
   2cd84:	str	r1, [r0]
   2cd88:	b	2ce18 <__assert_fail@plt+0x1a39c>
   2cd8c:	mov	r0, r7
   2cd90:	bl	12980 <fchdir@plt>
   2cd94:	cmp	r0, #0
   2cd98:	beq	2cdbc <__assert_fail@plt+0x1a340>
   2cd9c:	bl	127d0 <__errno_location@plt>
   2cda0:	ldr	r5, [r0]
   2cda4:	mov	r4, r0
   2cda8:	mov	r0, sp
   2cdac:	bl	2cbdc <__assert_fail@plt+0x1a160>
   2cdb0:	str	r5, [r4]
   2cdb4:	mvn	r9, #0
   2cdb8:	b	2ce18 <__assert_fail@plt+0x1a39c>
   2cdbc:	mov	r0, r5
   2cdc0:	mov	r1, r4
   2cdc4:	bl	321e0 <__assert_fail@plt+0x1f764>
   2cdc8:	mov	r9, r0
   2cdcc:	mov	r4, #0
   2cdd0:	cmn	r0, #1
   2cdd4:	bne	2cde0 <__assert_fail@plt+0x1a364>
   2cdd8:	bl	127d0 <__errno_location@plt>
   2cddc:	ldr	r4, [r0]
   2cde0:	mov	r0, sp
   2cde4:	bl	2cbc0 <__assert_fail@plt+0x1a144>
   2cde8:	cmp	r0, #0
   2cdec:	bne	2ce30 <__assert_fail@plt+0x1a3b4>
   2cdf0:	mov	r0, sp
   2cdf4:	bl	2cbdc <__assert_fail@plt+0x1a160>
   2cdf8:	cmp	r4, #0
   2cdfc:	beq	2ce18 <__assert_fail@plt+0x1a39c>
   2ce00:	bl	127d0 <__errno_location@plt>
   2ce04:	str	r4, [r0]
   2ce08:	b	2ce18 <__assert_fail@plt+0x1a39c>
   2ce0c:	cmp	r2, #95	; 0x5f
   2ce10:	beq	2cd4c <__assert_fail@plt+0x1a2d0>
   2ce14:	str	r2, [r8]
   2ce18:	mov	r0, r9
   2ce1c:	sub	sp, fp, #28
   2ce20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ce24:	bl	127d0 <__errno_location@plt>
   2ce28:	ldr	r0, [r0]
   2ce2c:	bl	262f4 <__assert_fail@plt+0x13878>
   2ce30:	bl	127d0 <__errno_location@plt>
   2ce34:	ldr	r0, [r0]
   2ce38:	bl	26334 <__assert_fail@plt+0x138b8>
   2ce3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ce40:	add	fp, sp, #28
   2ce44:	sub	sp, sp, #964	; 0x3c4
   2ce48:	sub	sp, sp, #3072	; 0xc00
   2ce4c:	mov	r4, r2
   2ce50:	mov	r5, r1
   2ce54:	cmn	r0, #100	; 0x64
   2ce58:	beq	2ce6c <__assert_fail@plt+0x1a3f0>
   2ce5c:	mov	r7, r0
   2ce60:	ldrb	r0, [r5]
   2ce64:	cmp	r0, #47	; 0x2f
   2ce68:	bne	2ce80 <__assert_fail@plt+0x1a404>
   2ce6c:	mov	r0, r5
   2ce70:	mov	r1, r4
   2ce74:	sub	sp, fp, #28
   2ce78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ce7c:	b	32254 <__assert_fail@plt+0x1f7d8>
   2ce80:	mov	sl, sp
   2ce84:	mov	r1, r7
   2ce88:	mov	r2, r5
   2ce8c:	mov	r0, sl
   2ce90:	bl	45a08 <__assert_fail@plt+0x32f8c>
   2ce94:	cmp	r0, #0
   2ce98:	beq	2cf84 <__assert_fail@plt+0x1a508>
   2ce9c:	mov	r1, r4
   2cea0:	mov	r6, r0
   2cea4:	bl	32254 <__assert_fail@plt+0x1f7d8>
   2cea8:	mov	r9, r0
   2ceac:	bl	127d0 <__errno_location@plt>
   2ceb0:	ldr	r2, [r0]
   2ceb4:	mov	r8, r0
   2ceb8:	cmp	r6, sl
   2cebc:	beq	2ced0 <__assert_fail@plt+0x1a454>
   2cec0:	mov	r0, r6
   2cec4:	mov	r6, r2
   2cec8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   2cecc:	mov	r2, r6
   2ced0:	cmn	r9, #1
   2ced4:	bne	2d050 <__assert_fail@plt+0x1a5d4>
   2ced8:	sub	r0, r2, #1
   2cedc:	cmp	r0, #37	; 0x25
   2cee0:	bhi	2d044 <__assert_fail@plt+0x1a5c8>
   2cee4:	add	r1, pc, #0
   2cee8:	ldr	pc, [r1, r0, lsl #2]
   2ceec:	andeq	ip, r2, r4, lsl #31
   2cef0:	andeq	ip, r2, r4, lsl #31
   2cef4:	andeq	sp, r2, ip, asr #32
   2cef8:	andeq	sp, r2, ip, asr #32
   2cefc:	andeq	sp, r2, ip, asr #32
   2cf00:	andeq	sp, r2, ip, asr #32
   2cf04:	andeq	sp, r2, ip, asr #32
   2cf08:	andeq	sp, r2, ip, asr #32
   2cf0c:	andeq	sp, r2, ip, asr #32
   2cf10:	andeq	sp, r2, ip, asr #32
   2cf14:	andeq	sp, r2, ip, asr #32
   2cf18:	andeq	sp, r2, ip, asr #32
   2cf1c:	andeq	ip, r2, r4, lsl #31
   2cf20:	andeq	sp, r2, ip, asr #32
   2cf24:	andeq	sp, r2, ip, asr #32
   2cf28:	andeq	sp, r2, ip, asr #32
   2cf2c:	andeq	sp, r2, ip, asr #32
   2cf30:	andeq	sp, r2, ip, asr #32
   2cf34:	andeq	sp, r2, ip, asr #32
   2cf38:	andeq	ip, r2, r4, lsl #31
   2cf3c:	andeq	sp, r2, ip, asr #32
   2cf40:	andeq	sp, r2, ip, asr #32
   2cf44:	andeq	sp, r2, ip, asr #32
   2cf48:	andeq	sp, r2, ip, asr #32
   2cf4c:	andeq	sp, r2, ip, asr #32
   2cf50:	andeq	sp, r2, ip, asr #32
   2cf54:	andeq	sp, r2, ip, asr #32
   2cf58:	andeq	sp, r2, ip, asr #32
   2cf5c:	andeq	sp, r2, ip, asr #32
   2cf60:	andeq	sp, r2, ip, asr #32
   2cf64:	andeq	sp, r2, ip, asr #32
   2cf68:	andeq	sp, r2, ip, asr #32
   2cf6c:	andeq	sp, r2, ip, asr #32
   2cf70:	andeq	sp, r2, ip, asr #32
   2cf74:	andeq	sp, r2, ip, asr #32
   2cf78:	andeq	sp, r2, ip, asr #32
   2cf7c:	andeq	sp, r2, ip, asr #32
   2cf80:	andeq	ip, r2, r4, lsl #31
   2cf84:	mov	r0, sp
   2cf88:	bl	2cb64 <__assert_fail@plt+0x1a0e8>
   2cf8c:	cmp	r0, #0
   2cf90:	bne	2d05c <__assert_fail@plt+0x1a5e0>
   2cf94:	cmp	r7, #0
   2cf98:	blt	2cfc4 <__assert_fail@plt+0x1a548>
   2cf9c:	ldr	r0, [sp]
   2cfa0:	cmp	r0, r7
   2cfa4:	bne	2cfc4 <__assert_fail@plt+0x1a548>
   2cfa8:	mov	r0, sp
   2cfac:	bl	2cbdc <__assert_fail@plt+0x1a160>
   2cfb0:	bl	127d0 <__errno_location@plt>
   2cfb4:	mov	r1, #9
   2cfb8:	mvn	r9, #0
   2cfbc:	str	r1, [r0]
   2cfc0:	b	2d050 <__assert_fail@plt+0x1a5d4>
   2cfc4:	mov	r0, r7
   2cfc8:	bl	12980 <fchdir@plt>
   2cfcc:	cmp	r0, #0
   2cfd0:	beq	2cff4 <__assert_fail@plt+0x1a578>
   2cfd4:	bl	127d0 <__errno_location@plt>
   2cfd8:	ldr	r5, [r0]
   2cfdc:	mov	r4, r0
   2cfe0:	mov	r0, sp
   2cfe4:	bl	2cbdc <__assert_fail@plt+0x1a160>
   2cfe8:	str	r5, [r4]
   2cfec:	mvn	r9, #0
   2cff0:	b	2d050 <__assert_fail@plt+0x1a5d4>
   2cff4:	mov	r0, r5
   2cff8:	mov	r1, r4
   2cffc:	bl	32254 <__assert_fail@plt+0x1f7d8>
   2d000:	mov	r9, r0
   2d004:	mov	r4, #0
   2d008:	cmn	r0, #1
   2d00c:	bne	2d018 <__assert_fail@plt+0x1a59c>
   2d010:	bl	127d0 <__errno_location@plt>
   2d014:	ldr	r4, [r0]
   2d018:	mov	r0, sp
   2d01c:	bl	2cbc0 <__assert_fail@plt+0x1a144>
   2d020:	cmp	r0, #0
   2d024:	bne	2d068 <__assert_fail@plt+0x1a5ec>
   2d028:	mov	r0, sp
   2d02c:	bl	2cbdc <__assert_fail@plt+0x1a160>
   2d030:	cmp	r4, #0
   2d034:	beq	2d050 <__assert_fail@plt+0x1a5d4>
   2d038:	bl	127d0 <__errno_location@plt>
   2d03c:	str	r4, [r0]
   2d040:	b	2d050 <__assert_fail@plt+0x1a5d4>
   2d044:	cmp	r2, #95	; 0x5f
   2d048:	beq	2cf84 <__assert_fail@plt+0x1a508>
   2d04c:	str	r2, [r8]
   2d050:	mov	r0, r9
   2d054:	sub	sp, fp, #28
   2d058:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d05c:	bl	127d0 <__errno_location@plt>
   2d060:	ldr	r0, [r0]
   2d064:	bl	262f4 <__assert_fail@plt+0x13878>
   2d068:	bl	127d0 <__errno_location@plt>
   2d06c:	ldr	r0, [r0]
   2d070:	bl	26334 <__assert_fail@plt+0x138b8>
   2d074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d078:	add	fp, sp, #28
   2d07c:	sub	sp, sp, #964	; 0x3c4
   2d080:	sub	sp, sp, #3072	; 0xc00
   2d084:	mov	r4, r2
   2d088:	mov	r5, r1
   2d08c:	cmn	r0, #100	; 0x64
   2d090:	beq	2d0a4 <__assert_fail@plt+0x1a628>
   2d094:	mov	r7, r0
   2d098:	ldrb	r0, [r5]
   2d09c:	cmp	r0, #47	; 0x2f
   2d0a0:	bne	2d0b8 <__assert_fail@plt+0x1a63c>
   2d0a4:	mov	r0, r5
   2d0a8:	mov	r1, r4
   2d0ac:	sub	sp, fp, #28
   2d0b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d0b4:	b	1286c <setfilecon@plt>
   2d0b8:	mov	sl, sp
   2d0bc:	mov	r1, r7
   2d0c0:	mov	r2, r5
   2d0c4:	mov	r0, sl
   2d0c8:	bl	45a08 <__assert_fail@plt+0x32f8c>
   2d0cc:	cmp	r0, #0
   2d0d0:	beq	2d1bc <__assert_fail@plt+0x1a740>
   2d0d4:	mov	r1, r4
   2d0d8:	mov	r6, r0
   2d0dc:	bl	1286c <setfilecon@plt>
   2d0e0:	mov	r9, r0
   2d0e4:	bl	127d0 <__errno_location@plt>
   2d0e8:	ldr	r2, [r0]
   2d0ec:	mov	r8, r0
   2d0f0:	cmp	r6, sl
   2d0f4:	beq	2d108 <__assert_fail@plt+0x1a68c>
   2d0f8:	mov	r0, r6
   2d0fc:	mov	r6, r2
   2d100:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   2d104:	mov	r2, r6
   2d108:	cmn	r9, #1
   2d10c:	bne	2d288 <__assert_fail@plt+0x1a80c>
   2d110:	sub	r0, r2, #1
   2d114:	cmp	r0, #37	; 0x25
   2d118:	bhi	2d27c <__assert_fail@plt+0x1a800>
   2d11c:	add	r1, pc, #0
   2d120:	ldr	pc, [r1, r0, lsl #2]
   2d124:			; <UNDEFINED> instruction: 0x0002d1bc
   2d128:			; <UNDEFINED> instruction: 0x0002d1bc
   2d12c:	andeq	sp, r2, r4, lsl #5
   2d130:	andeq	sp, r2, r4, lsl #5
   2d134:	andeq	sp, r2, r4, lsl #5
   2d138:	andeq	sp, r2, r4, lsl #5
   2d13c:	andeq	sp, r2, r4, lsl #5
   2d140:	andeq	sp, r2, r4, lsl #5
   2d144:	andeq	sp, r2, r4, lsl #5
   2d148:	andeq	sp, r2, r4, lsl #5
   2d14c:	andeq	sp, r2, r4, lsl #5
   2d150:	andeq	sp, r2, r4, lsl #5
   2d154:			; <UNDEFINED> instruction: 0x0002d1bc
   2d158:	andeq	sp, r2, r4, lsl #5
   2d15c:	andeq	sp, r2, r4, lsl #5
   2d160:	andeq	sp, r2, r4, lsl #5
   2d164:	andeq	sp, r2, r4, lsl #5
   2d168:	andeq	sp, r2, r4, lsl #5
   2d16c:	andeq	sp, r2, r4, lsl #5
   2d170:			; <UNDEFINED> instruction: 0x0002d1bc
   2d174:	andeq	sp, r2, r4, lsl #5
   2d178:	andeq	sp, r2, r4, lsl #5
   2d17c:	andeq	sp, r2, r4, lsl #5
   2d180:	andeq	sp, r2, r4, lsl #5
   2d184:	andeq	sp, r2, r4, lsl #5
   2d188:	andeq	sp, r2, r4, lsl #5
   2d18c:	andeq	sp, r2, r4, lsl #5
   2d190:	andeq	sp, r2, r4, lsl #5
   2d194:	andeq	sp, r2, r4, lsl #5
   2d198:	andeq	sp, r2, r4, lsl #5
   2d19c:	andeq	sp, r2, r4, lsl #5
   2d1a0:	andeq	sp, r2, r4, lsl #5
   2d1a4:	andeq	sp, r2, r4, lsl #5
   2d1a8:	andeq	sp, r2, r4, lsl #5
   2d1ac:	andeq	sp, r2, r4, lsl #5
   2d1b0:	andeq	sp, r2, r4, lsl #5
   2d1b4:	andeq	sp, r2, r4, lsl #5
   2d1b8:			; <UNDEFINED> instruction: 0x0002d1bc
   2d1bc:	mov	r0, sp
   2d1c0:	bl	2cb64 <__assert_fail@plt+0x1a0e8>
   2d1c4:	cmp	r0, #0
   2d1c8:	bne	2d294 <__assert_fail@plt+0x1a818>
   2d1cc:	cmp	r7, #0
   2d1d0:	blt	2d1fc <__assert_fail@plt+0x1a780>
   2d1d4:	ldr	r0, [sp]
   2d1d8:	cmp	r0, r7
   2d1dc:	bne	2d1fc <__assert_fail@plt+0x1a780>
   2d1e0:	mov	r0, sp
   2d1e4:	bl	2cbdc <__assert_fail@plt+0x1a160>
   2d1e8:	bl	127d0 <__errno_location@plt>
   2d1ec:	mov	r1, #9
   2d1f0:	mvn	r9, #0
   2d1f4:	str	r1, [r0]
   2d1f8:	b	2d288 <__assert_fail@plt+0x1a80c>
   2d1fc:	mov	r0, r7
   2d200:	bl	12980 <fchdir@plt>
   2d204:	cmp	r0, #0
   2d208:	beq	2d22c <__assert_fail@plt+0x1a7b0>
   2d20c:	bl	127d0 <__errno_location@plt>
   2d210:	ldr	r5, [r0]
   2d214:	mov	r4, r0
   2d218:	mov	r0, sp
   2d21c:	bl	2cbdc <__assert_fail@plt+0x1a160>
   2d220:	str	r5, [r4]
   2d224:	mvn	r9, #0
   2d228:	b	2d288 <__assert_fail@plt+0x1a80c>
   2d22c:	mov	r0, r5
   2d230:	mov	r1, r4
   2d234:	bl	1286c <setfilecon@plt>
   2d238:	mov	r9, r0
   2d23c:	mov	r4, #0
   2d240:	cmn	r0, #1
   2d244:	bne	2d250 <__assert_fail@plt+0x1a7d4>
   2d248:	bl	127d0 <__errno_location@plt>
   2d24c:	ldr	r4, [r0]
   2d250:	mov	r0, sp
   2d254:	bl	2cbc0 <__assert_fail@plt+0x1a144>
   2d258:	cmp	r0, #0
   2d25c:	bne	2d2a0 <__assert_fail@plt+0x1a824>
   2d260:	mov	r0, sp
   2d264:	bl	2cbdc <__assert_fail@plt+0x1a160>
   2d268:	cmp	r4, #0
   2d26c:	beq	2d288 <__assert_fail@plt+0x1a80c>
   2d270:	bl	127d0 <__errno_location@plt>
   2d274:	str	r4, [r0]
   2d278:	b	2d288 <__assert_fail@plt+0x1a80c>
   2d27c:	cmp	r2, #95	; 0x5f
   2d280:	beq	2d1bc <__assert_fail@plt+0x1a740>
   2d284:	str	r2, [r8]
   2d288:	mov	r0, r9
   2d28c:	sub	sp, fp, #28
   2d290:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d294:	bl	127d0 <__errno_location@plt>
   2d298:	ldr	r0, [r0]
   2d29c:	bl	262f4 <__assert_fail@plt+0x13878>
   2d2a0:	bl	127d0 <__errno_location@plt>
   2d2a4:	ldr	r0, [r0]
   2d2a8:	bl	26334 <__assert_fail@plt+0x138b8>
   2d2ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d2b0:	add	fp, sp, #28
   2d2b4:	sub	sp, sp, #964	; 0x3c4
   2d2b8:	sub	sp, sp, #3072	; 0xc00
   2d2bc:	mov	r4, r2
   2d2c0:	mov	r5, r1
   2d2c4:	cmn	r0, #100	; 0x64
   2d2c8:	beq	2d2dc <__assert_fail@plt+0x1a860>
   2d2cc:	mov	r7, r0
   2d2d0:	ldrb	r0, [r5]
   2d2d4:	cmp	r0, #47	; 0x2f
   2d2d8:	bne	2d2f0 <__assert_fail@plt+0x1a874>
   2d2dc:	mov	r0, r5
   2d2e0:	mov	r1, r4
   2d2e4:	sub	sp, fp, #28
   2d2e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d2ec:	b	12440 <lsetfilecon@plt>
   2d2f0:	mov	sl, sp
   2d2f4:	mov	r1, r7
   2d2f8:	mov	r2, r5
   2d2fc:	mov	r0, sl
   2d300:	bl	45a08 <__assert_fail@plt+0x32f8c>
   2d304:	cmp	r0, #0
   2d308:	beq	2d3f4 <__assert_fail@plt+0x1a978>
   2d30c:	mov	r1, r4
   2d310:	mov	r6, r0
   2d314:	bl	12440 <lsetfilecon@plt>
   2d318:	mov	r9, r0
   2d31c:	bl	127d0 <__errno_location@plt>
   2d320:	ldr	r2, [r0]
   2d324:	mov	r8, r0
   2d328:	cmp	r6, sl
   2d32c:	beq	2d340 <__assert_fail@plt+0x1a8c4>
   2d330:	mov	r0, r6
   2d334:	mov	r6, r2
   2d338:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   2d33c:	mov	r2, r6
   2d340:	cmn	r9, #1
   2d344:	bne	2d4c0 <__assert_fail@plt+0x1aa44>
   2d348:	sub	r0, r2, #1
   2d34c:	cmp	r0, #37	; 0x25
   2d350:	bhi	2d4b4 <__assert_fail@plt+0x1aa38>
   2d354:	add	r1, pc, #0
   2d358:	ldr	pc, [r1, r0, lsl #2]
   2d35c:	strdeq	sp, [r2], -r4
   2d360:	strdeq	sp, [r2], -r4
   2d364:			; <UNDEFINED> instruction: 0x0002d4bc
   2d368:			; <UNDEFINED> instruction: 0x0002d4bc
   2d36c:			; <UNDEFINED> instruction: 0x0002d4bc
   2d370:			; <UNDEFINED> instruction: 0x0002d4bc
   2d374:			; <UNDEFINED> instruction: 0x0002d4bc
   2d378:			; <UNDEFINED> instruction: 0x0002d4bc
   2d37c:			; <UNDEFINED> instruction: 0x0002d4bc
   2d380:			; <UNDEFINED> instruction: 0x0002d4bc
   2d384:			; <UNDEFINED> instruction: 0x0002d4bc
   2d388:			; <UNDEFINED> instruction: 0x0002d4bc
   2d38c:	strdeq	sp, [r2], -r4
   2d390:			; <UNDEFINED> instruction: 0x0002d4bc
   2d394:			; <UNDEFINED> instruction: 0x0002d4bc
   2d398:			; <UNDEFINED> instruction: 0x0002d4bc
   2d39c:			; <UNDEFINED> instruction: 0x0002d4bc
   2d3a0:			; <UNDEFINED> instruction: 0x0002d4bc
   2d3a4:			; <UNDEFINED> instruction: 0x0002d4bc
   2d3a8:	strdeq	sp, [r2], -r4
   2d3ac:			; <UNDEFINED> instruction: 0x0002d4bc
   2d3b0:			; <UNDEFINED> instruction: 0x0002d4bc
   2d3b4:			; <UNDEFINED> instruction: 0x0002d4bc
   2d3b8:			; <UNDEFINED> instruction: 0x0002d4bc
   2d3bc:			; <UNDEFINED> instruction: 0x0002d4bc
   2d3c0:			; <UNDEFINED> instruction: 0x0002d4bc
   2d3c4:			; <UNDEFINED> instruction: 0x0002d4bc
   2d3c8:			; <UNDEFINED> instruction: 0x0002d4bc
   2d3cc:			; <UNDEFINED> instruction: 0x0002d4bc
   2d3d0:			; <UNDEFINED> instruction: 0x0002d4bc
   2d3d4:			; <UNDEFINED> instruction: 0x0002d4bc
   2d3d8:			; <UNDEFINED> instruction: 0x0002d4bc
   2d3dc:			; <UNDEFINED> instruction: 0x0002d4bc
   2d3e0:			; <UNDEFINED> instruction: 0x0002d4bc
   2d3e4:			; <UNDEFINED> instruction: 0x0002d4bc
   2d3e8:			; <UNDEFINED> instruction: 0x0002d4bc
   2d3ec:			; <UNDEFINED> instruction: 0x0002d4bc
   2d3f0:	strdeq	sp, [r2], -r4
   2d3f4:	mov	r0, sp
   2d3f8:	bl	2cb64 <__assert_fail@plt+0x1a0e8>
   2d3fc:	cmp	r0, #0
   2d400:	bne	2d4cc <__assert_fail@plt+0x1aa50>
   2d404:	cmp	r7, #0
   2d408:	blt	2d434 <__assert_fail@plt+0x1a9b8>
   2d40c:	ldr	r0, [sp]
   2d410:	cmp	r0, r7
   2d414:	bne	2d434 <__assert_fail@plt+0x1a9b8>
   2d418:	mov	r0, sp
   2d41c:	bl	2cbdc <__assert_fail@plt+0x1a160>
   2d420:	bl	127d0 <__errno_location@plt>
   2d424:	mov	r1, #9
   2d428:	mvn	r9, #0
   2d42c:	str	r1, [r0]
   2d430:	b	2d4c0 <__assert_fail@plt+0x1aa44>
   2d434:	mov	r0, r7
   2d438:	bl	12980 <fchdir@plt>
   2d43c:	cmp	r0, #0
   2d440:	beq	2d464 <__assert_fail@plt+0x1a9e8>
   2d444:	bl	127d0 <__errno_location@plt>
   2d448:	ldr	r5, [r0]
   2d44c:	mov	r4, r0
   2d450:	mov	r0, sp
   2d454:	bl	2cbdc <__assert_fail@plt+0x1a160>
   2d458:	str	r5, [r4]
   2d45c:	mvn	r9, #0
   2d460:	b	2d4c0 <__assert_fail@plt+0x1aa44>
   2d464:	mov	r0, r5
   2d468:	mov	r1, r4
   2d46c:	bl	12440 <lsetfilecon@plt>
   2d470:	mov	r9, r0
   2d474:	mov	r4, #0
   2d478:	cmn	r0, #1
   2d47c:	bne	2d488 <__assert_fail@plt+0x1aa0c>
   2d480:	bl	127d0 <__errno_location@plt>
   2d484:	ldr	r4, [r0]
   2d488:	mov	r0, sp
   2d48c:	bl	2cbc0 <__assert_fail@plt+0x1a144>
   2d490:	cmp	r0, #0
   2d494:	bne	2d4d8 <__assert_fail@plt+0x1aa5c>
   2d498:	mov	r0, sp
   2d49c:	bl	2cbdc <__assert_fail@plt+0x1a160>
   2d4a0:	cmp	r4, #0
   2d4a4:	beq	2d4c0 <__assert_fail@plt+0x1aa44>
   2d4a8:	bl	127d0 <__errno_location@plt>
   2d4ac:	str	r4, [r0]
   2d4b0:	b	2d4c0 <__assert_fail@plt+0x1aa44>
   2d4b4:	cmp	r2, #95	; 0x5f
   2d4b8:	beq	2d3f4 <__assert_fail@plt+0x1a978>
   2d4bc:	str	r2, [r8]
   2d4c0:	mov	r0, r9
   2d4c4:	sub	sp, fp, #28
   2d4c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d4cc:	bl	127d0 <__errno_location@plt>
   2d4d0:	ldr	r0, [r0]
   2d4d4:	bl	262f4 <__assert_fail@plt+0x13878>
   2d4d8:	bl	127d0 <__errno_location@plt>
   2d4dc:	ldr	r0, [r0]
   2d4e0:	bl	26334 <__assert_fail@plt+0x138b8>
   2d4e4:	push	{r4, r5, fp, lr}
   2d4e8:	add	fp, sp, #8
   2d4ec:	mov	r4, r1
   2d4f0:	mov	r1, #0
   2d4f4:	mov	r5, r0
   2d4f8:	mov	r2, r4
   2d4fc:	bl	12860 <memchr@plt>
   2d500:	rsb	r1, r5, #1
   2d504:	cmp	r0, #0
   2d508:	addne	r4, r1, r0
   2d50c:	mov	r0, r4
   2d510:	pop	{r4, r5, fp, pc}
   2d514:	mov	r1, #0
   2d518:	mov	r2, #3
   2d51c:	b	2fb30 <__assert_fail@plt+0x1d0b4>
   2d520:	push	{r4, r5, r6, r7, fp, lr}
   2d524:	add	fp, sp, #16
   2d528:	mov	r4, r0
   2d52c:	cmp	r0, #2
   2d530:	movhi	r0, r4
   2d534:	pophi	{r4, r5, r6, r7, fp, pc}
   2d538:	mov	r0, r4
   2d53c:	bl	2d514 <__assert_fail@plt+0x1aa98>
   2d540:	mov	r5, r0
   2d544:	bl	127d0 <__errno_location@plt>
   2d548:	ldr	r7, [r0]
   2d54c:	mov	r6, r0
   2d550:	mov	r0, r4
   2d554:	bl	12a34 <close@plt>
   2d558:	mov	r0, r5
   2d55c:	str	r7, [r6]
   2d560:	pop	{r4, r5, r6, r7, fp, pc}
   2d564:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2d568:	add	fp, sp, #24
   2d56c:	sub	sp, sp, #32
   2d570:	ldr	r7, [fp, #12]
   2d574:	ldr	r6, [fp, #8]
   2d578:	mov	r4, r2
   2d57c:	mov	r5, r0
   2d580:	cmp	r1, #0
   2d584:	beq	2d5a4 <__assert_fail@plt+0x1ab28>
   2d588:	mov	r2, r1
   2d58c:	movw	r1, #50060	; 0xc38c
   2d590:	str	r3, [sp]
   2d594:	mov	r0, r5
   2d598:	mov	r3, r4
   2d59c:	movt	r1, #4
   2d5a0:	b	2d5b4 <__assert_fail@plt+0x1ab38>
   2d5a4:	movw	r1, #50072	; 0xc398
   2d5a8:	mov	r0, r5
   2d5ac:	mov	r2, r4
   2d5b0:	movt	r1, #4
   2d5b4:	bl	127c4 <fprintf@plt>
   2d5b8:	movw	r1, #50079	; 0xc39f
   2d5bc:	mov	r0, #0
   2d5c0:	mov	r2, #5
   2d5c4:	movt	r1, #4
   2d5c8:	bl	1253c <dcgettext@plt>
   2d5cc:	movw	r1, #50775	; 0xc657
   2d5d0:	mov	r2, r0
   2d5d4:	mov	r0, r5
   2d5d8:	movw	r3, #2022	; 0x7e6
   2d5dc:	movt	r1, #4
   2d5e0:	bl	127c4 <fprintf@plt>
   2d5e4:	mov	r0, #10
   2d5e8:	mov	r1, r5
   2d5ec:	bl	12914 <fputc@plt>
   2d5f0:	movw	r1, #50083	; 0xc3a3
   2d5f4:	mov	r0, #0
   2d5f8:	mov	r2, #5
   2d5fc:	movt	r1, #4
   2d600:	bl	1253c <dcgettext@plt>
   2d604:	movw	r2, #50254	; 0xc44e
   2d608:	mov	r1, r0
   2d60c:	mov	r0, r5
   2d610:	movt	r2, #4
   2d614:	bl	127c4 <fprintf@plt>
   2d618:	mov	r0, #10
   2d61c:	mov	r1, r5
   2d620:	bl	12914 <fputc@plt>
   2d624:	cmp	r7, #9
   2d628:	bhi	2d664 <__assert_fail@plt+0x1abe8>
   2d62c:	add	r0, pc, #0
   2d630:	ldr	pc, [r0, r7, lsl #2]
   2d634:	andeq	sp, r2, ip, asr r6
   2d638:	andeq	sp, r2, r0, ror r6
   2d63c:	muleq	r2, ip, r6
   2d640:	andeq	sp, r2, r8, asr #13
   2d644:	strdeq	sp, [r2], -r0
   2d648:	andeq	sp, r2, ip, lsl r7
   2d64c:	andeq	sp, r2, r0, asr r7
   2d650:	muleq	r2, r0, r7
   2d654:	andeq	sp, r2, ip, lsr #16
   2d658:	ldrdeq	sp, [r2], -r4
   2d65c:	sub	sp, fp, #24
   2d660:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2d664:	movw	r1, #50607	; 0xc5af
   2d668:	movt	r1, #4
   2d66c:	b	2d7dc <__assert_fail@plt+0x1ad60>
   2d670:	movw	r1, #50288	; 0xc470
   2d674:	mov	r0, #0
   2d678:	mov	r2, #5
   2d67c:	movt	r1, #4
   2d680:	bl	1253c <dcgettext@plt>
   2d684:	ldr	r2, [r6]
   2d688:	mov	r1, r0
   2d68c:	mov	r0, r5
   2d690:	sub	sp, fp, #24
   2d694:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2d698:	b	127c4 <fprintf@plt>
   2d69c:	movw	r1, #50304	; 0xc480
   2d6a0:	mov	r0, #0
   2d6a4:	mov	r2, #5
   2d6a8:	movt	r1, #4
   2d6ac:	bl	1253c <dcgettext@plt>
   2d6b0:	ldm	r6, {r2, r3}
   2d6b4:	mov	r1, r0
   2d6b8:	mov	r0, r5
   2d6bc:	sub	sp, fp, #24
   2d6c0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2d6c4:	b	127c4 <fprintf@plt>
   2d6c8:	movw	r1, #50327	; 0xc497
   2d6cc:	mov	r0, #0
   2d6d0:	mov	r2, #5
   2d6d4:	movt	r1, #4
   2d6d8:	bl	1253c <dcgettext@plt>
   2d6dc:	mov	r1, r0
   2d6e0:	ldm	r6, {r2, r3}
   2d6e4:	ldr	r0, [r6, #8]
   2d6e8:	str	r0, [sp]
   2d6ec:	b	2d788 <__assert_fail@plt+0x1ad0c>
   2d6f0:	movw	r1, #50355	; 0xc4b3
   2d6f4:	mov	r0, #0
   2d6f8:	mov	r2, #5
   2d6fc:	movt	r1, #4
   2d700:	bl	1253c <dcgettext@plt>
   2d704:	ldm	r6, {r2, r3}
   2d708:	mov	r1, r0
   2d70c:	ldr	r0, [r6, #8]
   2d710:	ldr	r7, [r6, #12]
   2d714:	stm	sp, {r0, r7}
   2d718:	b	2d788 <__assert_fail@plt+0x1ad0c>
   2d71c:	movw	r1, #50387	; 0xc4d3
   2d720:	mov	r0, #0
   2d724:	mov	r2, #5
   2d728:	movt	r1, #4
   2d72c:	bl	1253c <dcgettext@plt>
   2d730:	ldm	r6, {r2, r3}
   2d734:	mov	r1, r0
   2d738:	ldr	r0, [r6, #8]
   2d73c:	ldr	r7, [r6, #12]
   2d740:	ldr	r6, [r6, #16]
   2d744:	stm	sp, {r0, r7}
   2d748:	str	r6, [sp, #8]
   2d74c:	b	2d788 <__assert_fail@plt+0x1ad0c>
   2d750:	movw	r1, #50423	; 0xc4f7
   2d754:	mov	r0, #0
   2d758:	mov	r2, #5
   2d75c:	movt	r1, #4
   2d760:	bl	1253c <dcgettext@plt>
   2d764:	ldm	r6, {r2, r3}
   2d768:	mov	r1, r0
   2d76c:	ldr	r0, [r6, #8]
   2d770:	ldr	r7, [r6, #12]
   2d774:	ldr	r4, [r6, #16]
   2d778:	ldr	r6, [r6, #20]
   2d77c:	stm	sp, {r0, r7}
   2d780:	str	r4, [sp, #8]
   2d784:	str	r6, [sp, #12]
   2d788:	mov	r0, r5
   2d78c:	b	2d87c <__assert_fail@plt+0x1ae00>
   2d790:	movw	r1, #50463	; 0xc51f
   2d794:	mov	r0, #0
   2d798:	mov	r2, #5
   2d79c:	movt	r1, #4
   2d7a0:	bl	1253c <dcgettext@plt>
   2d7a4:	ldm	r6, {r2, r3}
   2d7a8:	mov	ip, r0
   2d7ac:	ldr	r0, [r6, #8]
   2d7b0:	ldr	r7, [r6, #12]
   2d7b4:	ldr	r4, [r6, #16]
   2d7b8:	ldr	r1, [r6, #20]
   2d7bc:	ldr	r6, [r6, #24]
   2d7c0:	stm	sp, {r0, r7}
   2d7c4:	str	r4, [sp, #8]
   2d7c8:	str	r1, [sp, #12]
   2d7cc:	str	r6, [sp, #16]
   2d7d0:	b	2d874 <__assert_fail@plt+0x1adf8>
   2d7d4:	movw	r1, #50555	; 0xc57b
   2d7d8:	movt	r1, #4
   2d7dc:	mov	r0, #0
   2d7e0:	mov	r2, #5
   2d7e4:	bl	1253c <dcgettext@plt>
   2d7e8:	mov	ip, r0
   2d7ec:	ldr	r2, [r6]
   2d7f0:	ldr	r3, [r6, #4]
   2d7f4:	ldr	r0, [r6, #8]
   2d7f8:	ldr	r7, [r6, #12]
   2d7fc:	ldr	r4, [r6, #16]
   2d800:	ldr	r1, [r6, #20]
   2d804:	ldr	lr, [r6, #24]
   2d808:	ldr	r8, [r6, #28]
   2d80c:	ldr	r6, [r6, #32]
   2d810:	stm	sp, {r0, r7}
   2d814:	str	r4, [sp, #8]
   2d818:	str	r1, [sp, #12]
   2d81c:	str	lr, [sp, #16]
   2d820:	str	r8, [sp, #20]
   2d824:	str	r6, [sp, #24]
   2d828:	b	2d874 <__assert_fail@plt+0x1adf8>
   2d82c:	movw	r1, #50507	; 0xc54b
   2d830:	mov	r0, #0
   2d834:	mov	r2, #5
   2d838:	movt	r1, #4
   2d83c:	bl	1253c <dcgettext@plt>
   2d840:	ldm	r6, {r2, r3}
   2d844:	mov	ip, r0
   2d848:	ldr	r0, [r6, #8]
   2d84c:	ldr	r7, [r6, #12]
   2d850:	ldr	r4, [r6, #16]
   2d854:	ldr	r1, [r6, #20]
   2d858:	ldr	lr, [r6, #24]
   2d85c:	ldr	r6, [r6, #28]
   2d860:	stm	sp, {r0, r7}
   2d864:	str	r4, [sp, #8]
   2d868:	str	r1, [sp, #12]
   2d86c:	str	lr, [sp, #16]
   2d870:	str	r6, [sp, #20]
   2d874:	mov	r0, r5
   2d878:	mov	r1, ip
   2d87c:	bl	127c4 <fprintf@plt>
   2d880:	sub	sp, fp, #24
   2d884:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2d888:	push	{r4, sl, fp, lr}
   2d88c:	add	fp, sp, #8
   2d890:	sub	sp, sp, #8
   2d894:	ldr	ip, [fp, #8]
   2d898:	mov	lr, #0
   2d89c:	ldr	r4, [ip, lr, lsl #2]
   2d8a0:	add	lr, lr, #1
   2d8a4:	cmp	r4, #0
   2d8a8:	bne	2d89c <__assert_fail@plt+0x1ae20>
   2d8ac:	sub	r4, lr, #1
   2d8b0:	str	ip, [sp]
   2d8b4:	str	r4, [sp, #4]
   2d8b8:	bl	2d564 <__assert_fail@plt+0x1aae8>
   2d8bc:	sub	sp, fp, #8
   2d8c0:	pop	{r4, sl, fp, pc}
   2d8c4:	push	{fp, lr}
   2d8c8:	mov	fp, sp
   2d8cc:	sub	sp, sp, #48	; 0x30
   2d8d0:	ldr	ip, [fp, #8]
   2d8d4:	ldr	lr, [ip]
   2d8d8:	cmp	lr, #0
   2d8dc:	str	lr, [sp, #8]
   2d8e0:	beq	2d97c <__assert_fail@plt+0x1af00>
   2d8e4:	ldr	lr, [ip, #4]
   2d8e8:	cmp	lr, #0
   2d8ec:	str	lr, [sp, #12]
   2d8f0:	beq	2d984 <__assert_fail@plt+0x1af08>
   2d8f4:	ldr	lr, [ip, #8]
   2d8f8:	cmp	lr, #0
   2d8fc:	str	lr, [sp, #16]
   2d900:	beq	2d98c <__assert_fail@plt+0x1af10>
   2d904:	ldr	lr, [ip, #12]
   2d908:	cmp	lr, #0
   2d90c:	str	lr, [sp, #20]
   2d910:	beq	2d994 <__assert_fail@plt+0x1af18>
   2d914:	ldr	lr, [ip, #16]
   2d918:	cmp	lr, #0
   2d91c:	str	lr, [sp, #24]
   2d920:	beq	2d99c <__assert_fail@plt+0x1af20>
   2d924:	ldr	lr, [ip, #20]
   2d928:	cmp	lr, #0
   2d92c:	str	lr, [sp, #28]
   2d930:	beq	2d9a4 <__assert_fail@plt+0x1af28>
   2d934:	ldr	lr, [ip, #24]
   2d938:	cmp	lr, #0
   2d93c:	str	lr, [sp, #32]
   2d940:	beq	2d9ac <__assert_fail@plt+0x1af30>
   2d944:	ldr	lr, [ip, #28]
   2d948:	cmp	lr, #0
   2d94c:	str	lr, [sp, #36]	; 0x24
   2d950:	beq	2d9b4 <__assert_fail@plt+0x1af38>
   2d954:	ldr	lr, [ip, #32]
   2d958:	cmp	lr, #0
   2d95c:	str	lr, [sp, #40]	; 0x28
   2d960:	beq	2d9bc <__assert_fail@plt+0x1af40>
   2d964:	ldr	lr, [ip, #36]	; 0x24
   2d968:	mov	ip, #10
   2d96c:	cmp	lr, #0
   2d970:	str	lr, [sp, #44]	; 0x2c
   2d974:	movweq	ip, #9
   2d978:	b	2d9c0 <__assert_fail@plt+0x1af44>
   2d97c:	mov	ip, #0
   2d980:	b	2d9c0 <__assert_fail@plt+0x1af44>
   2d984:	mov	ip, #1
   2d988:	b	2d9c0 <__assert_fail@plt+0x1af44>
   2d98c:	mov	ip, #2
   2d990:	b	2d9c0 <__assert_fail@plt+0x1af44>
   2d994:	mov	ip, #3
   2d998:	b	2d9c0 <__assert_fail@plt+0x1af44>
   2d99c:	mov	ip, #4
   2d9a0:	b	2d9c0 <__assert_fail@plt+0x1af44>
   2d9a4:	mov	ip, #5
   2d9a8:	b	2d9c0 <__assert_fail@plt+0x1af44>
   2d9ac:	mov	ip, #6
   2d9b0:	b	2d9c0 <__assert_fail@plt+0x1af44>
   2d9b4:	mov	ip, #7
   2d9b8:	b	2d9c0 <__assert_fail@plt+0x1af44>
   2d9bc:	mov	ip, #8
   2d9c0:	add	lr, sp, #8
   2d9c4:	str	ip, [sp, #4]
   2d9c8:	str	lr, [sp]
   2d9cc:	bl	2d564 <__assert_fail@plt+0x1aae8>
   2d9d0:	mov	sp, fp
   2d9d4:	pop	{fp, pc}
   2d9d8:	push	{fp, lr}
   2d9dc:	mov	fp, sp
   2d9e0:	sub	sp, sp, #56	; 0x38
   2d9e4:	add	ip, fp, #8
   2d9e8:	str	ip, [sp, #12]
   2d9ec:	ldr	lr, [fp, #8]
   2d9f0:	cmp	lr, #0
   2d9f4:	str	lr, [sp, #16]
   2d9f8:	beq	2da94 <__assert_fail@plt+0x1b018>
   2d9fc:	ldr	lr, [ip, #4]
   2da00:	cmp	lr, #0
   2da04:	str	lr, [sp, #20]
   2da08:	beq	2da9c <__assert_fail@plt+0x1b020>
   2da0c:	ldr	lr, [ip, #8]
   2da10:	cmp	lr, #0
   2da14:	str	lr, [sp, #24]
   2da18:	beq	2daa4 <__assert_fail@plt+0x1b028>
   2da1c:	ldr	lr, [ip, #12]
   2da20:	cmp	lr, #0
   2da24:	str	lr, [sp, #28]
   2da28:	beq	2daac <__assert_fail@plt+0x1b030>
   2da2c:	ldr	lr, [ip, #16]
   2da30:	cmp	lr, #0
   2da34:	str	lr, [sp, #32]
   2da38:	beq	2dab4 <__assert_fail@plt+0x1b038>
   2da3c:	ldr	lr, [ip, #20]
   2da40:	cmp	lr, #0
   2da44:	str	lr, [sp, #36]	; 0x24
   2da48:	beq	2dabc <__assert_fail@plt+0x1b040>
   2da4c:	ldr	lr, [ip, #24]
   2da50:	cmp	lr, #0
   2da54:	str	lr, [sp, #40]	; 0x28
   2da58:	beq	2dac4 <__assert_fail@plt+0x1b048>
   2da5c:	ldr	lr, [ip, #28]
   2da60:	cmp	lr, #0
   2da64:	str	lr, [sp, #44]	; 0x2c
   2da68:	beq	2dacc <__assert_fail@plt+0x1b050>
   2da6c:	ldr	lr, [ip, #32]
   2da70:	cmp	lr, #0
   2da74:	str	lr, [sp, #48]	; 0x30
   2da78:	beq	2dad4 <__assert_fail@plt+0x1b058>
   2da7c:	ldr	lr, [ip, #36]	; 0x24
   2da80:	mov	ip, #10
   2da84:	cmp	lr, #0
   2da88:	str	lr, [sp, #52]	; 0x34
   2da8c:	movweq	ip, #9
   2da90:	b	2dad8 <__assert_fail@plt+0x1b05c>
   2da94:	mov	ip, #0
   2da98:	b	2dad8 <__assert_fail@plt+0x1b05c>
   2da9c:	mov	ip, #1
   2daa0:	b	2dad8 <__assert_fail@plt+0x1b05c>
   2daa4:	mov	ip, #2
   2daa8:	b	2dad8 <__assert_fail@plt+0x1b05c>
   2daac:	mov	ip, #3
   2dab0:	b	2dad8 <__assert_fail@plt+0x1b05c>
   2dab4:	mov	ip, #4
   2dab8:	b	2dad8 <__assert_fail@plt+0x1b05c>
   2dabc:	mov	ip, #5
   2dac0:	b	2dad8 <__assert_fail@plt+0x1b05c>
   2dac4:	mov	ip, #6
   2dac8:	b	2dad8 <__assert_fail@plt+0x1b05c>
   2dacc:	mov	ip, #7
   2dad0:	b	2dad8 <__assert_fail@plt+0x1b05c>
   2dad4:	mov	ip, #8
   2dad8:	add	lr, sp, #16
   2dadc:	str	ip, [sp, #4]
   2dae0:	str	lr, [sp]
   2dae4:	bl	2d564 <__assert_fail@plt+0x1aae8>
   2dae8:	mov	sp, fp
   2daec:	pop	{fp, pc}
   2daf0:	push	{fp, lr}
   2daf4:	mov	fp, sp
   2daf8:	movw	r0, #54612	; 0xd554
   2dafc:	movt	r0, #5
   2db00:	ldr	r1, [r0]
   2db04:	mov	r0, #10
   2db08:	bl	12914 <fputc@plt>
   2db0c:	movw	r1, #50667	; 0xc5eb
   2db10:	mov	r0, #0
   2db14:	mov	r2, #5
   2db18:	movt	r1, #4
   2db1c:	bl	1253c <dcgettext@plt>
   2db20:	movw	r1, #45976	; 0xb398
   2db24:	movt	r1, #4
   2db28:	bl	123f8 <printf@plt>
   2db2c:	movw	r1, #50687	; 0xc5ff
   2db30:	mov	r0, #0
   2db34:	mov	r2, #5
   2db38:	movt	r1, #4
   2db3c:	bl	1253c <dcgettext@plt>
   2db40:	movw	r1, #45129	; 0xb049
   2db44:	movw	r2, #45890	; 0xb342
   2db48:	movt	r1, #4
   2db4c:	movt	r2, #4
   2db50:	bl	123f8 <printf@plt>
   2db54:	movw	r1, #50707	; 0xc613
   2db58:	mov	r0, #0
   2db5c:	mov	r2, #5
   2db60:	movt	r1, #4
   2db64:	bl	1253c <dcgettext@plt>
   2db68:	movw	r1, #50746	; 0xc63a
   2db6c:	movt	r1, #4
   2db70:	pop	{fp, lr}
   2db74:	b	123f8 <printf@plt>
   2db78:	push	{r4, r5, r6, sl, fp, lr}
   2db7c:	add	fp, sp, #16
   2db80:	mov	r4, r2
   2db84:	mov	r5, r1
   2db88:	mov	r6, r0
   2db8c:	bl	33094 <__assert_fail@plt+0x20618>
   2db90:	cmp	r0, #0
   2db94:	popne	{r4, r5, r6, sl, fp, pc}
   2db98:	cmp	r6, #0
   2db9c:	beq	2dbb0 <__assert_fail@plt+0x1b134>
   2dba0:	cmp	r5, #0
   2dba4:	cmpne	r4, #0
   2dba8:	bne	2dbb0 <__assert_fail@plt+0x1b134>
   2dbac:	pop	{r4, r5, r6, sl, fp, pc}
   2dbb0:	bl	2e150 <__assert_fail@plt+0x1b6d4>
   2dbb4:	push	{r4, r5, r6, sl, fp, lr}
   2dbb8:	add	fp, sp, #16
   2dbbc:	mov	r4, r2
   2dbc0:	mov	r5, r1
   2dbc4:	mov	r6, r0
   2dbc8:	bl	33094 <__assert_fail@plt+0x20618>
   2dbcc:	cmp	r0, #0
   2dbd0:	popne	{r4, r5, r6, sl, fp, pc}
   2dbd4:	cmp	r6, #0
   2dbd8:	beq	2dbec <__assert_fail@plt+0x1b170>
   2dbdc:	cmp	r5, #0
   2dbe0:	cmpne	r4, #0
   2dbe4:	bne	2dbec <__assert_fail@plt+0x1b170>
   2dbe8:	pop	{r4, r5, r6, sl, fp, pc}
   2dbec:	bl	2e150 <__assert_fail@plt+0x1b6d4>
   2dbf0:	push	{fp, lr}
   2dbf4:	mov	fp, sp
   2dbf8:	bl	3233c <__assert_fail@plt+0x1f8c0>
   2dbfc:	cmp	r0, #0
   2dc00:	popne	{fp, pc}
   2dc04:	bl	2e150 <__assert_fail@plt+0x1b6d4>
   2dc08:	push	{fp, lr}
   2dc0c:	mov	fp, sp
   2dc10:	bl	3233c <__assert_fail@plt+0x1f8c0>
   2dc14:	cmp	r0, #0
   2dc18:	popne	{fp, pc}
   2dc1c:	bl	2e150 <__assert_fail@plt+0x1b6d4>
   2dc20:	push	{fp, lr}
   2dc24:	mov	fp, sp
   2dc28:	bl	3233c <__assert_fail@plt+0x1f8c0>
   2dc2c:	cmp	r0, #0
   2dc30:	popne	{fp, pc}
   2dc34:	bl	2e150 <__assert_fail@plt+0x1b6d4>
   2dc38:	push	{r4, r5, fp, lr}
   2dc3c:	add	fp, sp, #8
   2dc40:	mov	r4, r1
   2dc44:	mov	r5, r0
   2dc48:	bl	33040 <__assert_fail@plt+0x205c4>
   2dc4c:	cmp	r0, #0
   2dc50:	popne	{r4, r5, fp, pc}
   2dc54:	cmp	r5, #0
   2dc58:	beq	2dc68 <__assert_fail@plt+0x1b1ec>
   2dc5c:	cmp	r4, #0
   2dc60:	bne	2dc68 <__assert_fail@plt+0x1b1ec>
   2dc64:	pop	{r4, r5, fp, pc}
   2dc68:	bl	2e150 <__assert_fail@plt+0x1b6d4>
   2dc6c:	push	{fp, lr}
   2dc70:	mov	fp, sp
   2dc74:	cmp	r1, #0
   2dc78:	orreq	r1, r1, #1
   2dc7c:	bl	33040 <__assert_fail@plt+0x205c4>
   2dc80:	cmp	r0, #0
   2dc84:	popne	{fp, pc}
   2dc88:	bl	2e150 <__assert_fail@plt+0x1b6d4>
   2dc8c:	push	{fp, lr}
   2dc90:	mov	fp, sp
   2dc94:	clz	r3, r2
   2dc98:	lsr	ip, r3, #5
   2dc9c:	clz	r3, r1
   2dca0:	lsr	r3, r3, #5
   2dca4:	orrs	r3, r3, ip
   2dca8:	movwne	r1, #1
   2dcac:	movwne	r2, #1
   2dcb0:	bl	33094 <__assert_fail@plt+0x20618>
   2dcb4:	cmp	r0, #0
   2dcb8:	popne	{fp, pc}
   2dcbc:	bl	2e150 <__assert_fail@plt+0x1b6d4>
   2dcc0:	push	{fp, lr}
   2dcc4:	mov	fp, sp
   2dcc8:	mov	r2, r1
   2dccc:	mov	r1, r0
   2dcd0:	mov	r0, #0
   2dcd4:	bl	33094 <__assert_fail@plt+0x20618>
   2dcd8:	cmp	r0, #0
   2dcdc:	popne	{fp, pc}
   2dce0:	bl	2e150 <__assert_fail@plt+0x1b6d4>
   2dce4:	push	{fp, lr}
   2dce8:	mov	fp, sp
   2dcec:	mov	r2, r1
   2dcf0:	mov	r1, r0
   2dcf4:	clz	r0, r2
   2dcf8:	clz	r3, r1
   2dcfc:	lsr	r0, r0, #5
   2dd00:	lsr	r3, r3, #5
   2dd04:	orrs	r0, r3, r0
   2dd08:	movwne	r1, #1
   2dd0c:	movwne	r2, #1
   2dd10:	mov	r0, #0
   2dd14:	bl	33094 <__assert_fail@plt+0x20618>
   2dd18:	cmp	r0, #0
   2dd1c:	popne	{fp, pc}
   2dd20:	bl	2e150 <__assert_fail@plt+0x1b6d4>
   2dd24:	push	{r4, r5, r6, sl, fp, lr}
   2dd28:	add	fp, sp, #16
   2dd2c:	ldr	r5, [r1]
   2dd30:	mov	r4, r1
   2dd34:	mov	r6, r0
   2dd38:	cmp	r0, #0
   2dd3c:	beq	2dd54 <__assert_fail@plt+0x1b2d8>
   2dd40:	mov	r0, #1
   2dd44:	add	r0, r0, r5, lsr #1
   2dd48:	adds	r5, r5, r0
   2dd4c:	bcc	2dd5c <__assert_fail@plt+0x1b2e0>
   2dd50:	b	2dd98 <__assert_fail@plt+0x1b31c>
   2dd54:	cmp	r5, #0
   2dd58:	movweq	r5, #64	; 0x40
   2dd5c:	mov	r0, r6
   2dd60:	mov	r1, r5
   2dd64:	mov	r2, #1
   2dd68:	bl	33094 <__assert_fail@plt+0x20618>
   2dd6c:	cmp	r5, #0
   2dd70:	mov	r1, r5
   2dd74:	movwne	r1, #1
   2dd78:	cmp	r0, #0
   2dd7c:	bne	2dd90 <__assert_fail@plt+0x1b314>
   2dd80:	clz	r2, r6
   2dd84:	lsr	r2, r2, #5
   2dd88:	orrs	r1, r2, r1
   2dd8c:	bne	2dd98 <__assert_fail@plt+0x1b31c>
   2dd90:	str	r5, [r4]
   2dd94:	pop	{r4, r5, r6, sl, fp, pc}
   2dd98:	bl	2e150 <__assert_fail@plt+0x1b6d4>
   2dd9c:	push	{r4, r5, r6, r7, fp, lr}
   2dda0:	add	fp, sp, #16
   2dda4:	ldr	r5, [r1]
   2dda8:	mov	r6, r2
   2ddac:	mov	r4, r1
   2ddb0:	mov	r7, r0
   2ddb4:	cmp	r0, #0
   2ddb8:	beq	2ddd0 <__assert_fail@plt+0x1b354>
   2ddbc:	mov	r0, #1
   2ddc0:	add	r0, r0, r5, lsr #1
   2ddc4:	adds	r5, r5, r0
   2ddc8:	bcc	2dde8 <__assert_fail@plt+0x1b36c>
   2ddcc:	b	2de1c <__assert_fail@plt+0x1b3a0>
   2ddd0:	cmp	r5, #0
   2ddd4:	bne	2dde8 <__assert_fail@plt+0x1b36c>
   2ddd8:	mov	r0, #64	; 0x40
   2dddc:	cmp	r6, #64	; 0x40
   2dde0:	udiv	r5, r0, r6
   2dde4:	addhi	r5, r5, #1
   2dde8:	mov	r0, r7
   2ddec:	mov	r1, r5
   2ddf0:	mov	r2, r6
   2ddf4:	bl	33094 <__assert_fail@plt+0x20618>
   2ddf8:	cmp	r0, #0
   2ddfc:	bne	2de14 <__assert_fail@plt+0x1b398>
   2de00:	cmp	r7, #0
   2de04:	beq	2de1c <__assert_fail@plt+0x1b3a0>
   2de08:	cmp	r6, #0
   2de0c:	cmpne	r5, #0
   2de10:	bne	2de1c <__assert_fail@plt+0x1b3a0>
   2de14:	str	r5, [r4]
   2de18:	pop	{r4, r5, r6, r7, fp, pc}
   2de1c:	bl	2e150 <__assert_fail@plt+0x1b6d4>
   2de20:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2de24:	add	fp, sp, #24
   2de28:	mov	r8, r1
   2de2c:	ldr	r1, [r1]
   2de30:	mov	r5, r0
   2de34:	add	r0, r1, r1, asr #1
   2de38:	cmp	r0, r1
   2de3c:	mvnvs	r0, #-2147483648	; 0x80000000
   2de40:	cmp	r0, r3
   2de44:	mov	r7, r0
   2de48:	movgt	r7, r3
   2de4c:	cmn	r3, #1
   2de50:	movle	r7, r0
   2de54:	ldr	r0, [fp, #8]
   2de58:	cmn	r0, #1
   2de5c:	ble	2de84 <__assert_fail@plt+0x1b408>
   2de60:	cmp	r0, #0
   2de64:	beq	2ded8 <__assert_fail@plt+0x1b45c>
   2de68:	cmn	r7, #1
   2de6c:	ble	2deac <__assert_fail@plt+0x1b430>
   2de70:	mvn	r4, #-2147483648	; 0x80000000
   2de74:	udiv	r6, r4, r0
   2de78:	cmp	r6, r7
   2de7c:	bge	2ded8 <__assert_fail@plt+0x1b45c>
   2de80:	b	2dee8 <__assert_fail@plt+0x1b46c>
   2de84:	cmn	r7, #1
   2de88:	ble	2dec8 <__assert_fail@plt+0x1b44c>
   2de8c:	cmn	r0, #1
   2de90:	beq	2ded8 <__assert_fail@plt+0x1b45c>
   2de94:	mov	r6, #-2147483648	; 0x80000000
   2de98:	mvn	r4, #-2147483648	; 0x80000000
   2de9c:	sdiv	r6, r6, r0
   2dea0:	cmp	r6, r7
   2dea4:	bge	2ded8 <__assert_fail@plt+0x1b45c>
   2dea8:	b	2dee8 <__assert_fail@plt+0x1b46c>
   2deac:	beq	2ded8 <__assert_fail@plt+0x1b45c>
   2deb0:	mov	r6, #-2147483648	; 0x80000000
   2deb4:	mvn	r4, #-2147483648	; 0x80000000
   2deb8:	sdiv	r6, r6, r7
   2debc:	cmp	r6, r0
   2dec0:	bge	2ded8 <__assert_fail@plt+0x1b45c>
   2dec4:	b	2dee8 <__assert_fail@plt+0x1b46c>
   2dec8:	mvn	r4, #-2147483648	; 0x80000000
   2decc:	sdiv	r6, r4, r0
   2ded0:	cmp	r7, r6
   2ded4:	blt	2dee8 <__assert_fail@plt+0x1b46c>
   2ded8:	mul	r6, r7, r0
   2dedc:	mov	r4, #64	; 0x40
   2dee0:	cmp	r6, #63	; 0x3f
   2dee4:	bgt	2def0 <__assert_fail@plt+0x1b474>
   2dee8:	sdiv	r7, r4, r0
   2deec:	mul	r6, r7, r0
   2def0:	cmp	r5, #0
   2def4:	moveq	r4, #0
   2def8:	streq	r4, [r8]
   2defc:	sub	r4, r7, r1
   2df00:	cmp	r4, r2
   2df04:	bge	2dfb0 <__assert_fail@plt+0x1b534>
   2df08:	add	r7, r1, r2
   2df0c:	mov	r6, #0
   2df10:	mov	r2, #0
   2df14:	cmp	r7, r3
   2df18:	movwgt	r6, #1
   2df1c:	cmn	r3, #1
   2df20:	movwgt	r2, #1
   2df24:	cmp	r7, r1
   2df28:	bvs	2dfe4 <__assert_fail@plt+0x1b568>
   2df2c:	ands	r1, r2, r6
   2df30:	bne	2dfe4 <__assert_fail@plt+0x1b568>
   2df34:	cmn	r0, #1
   2df38:	ble	2df60 <__assert_fail@plt+0x1b4e4>
   2df3c:	cmp	r0, #0
   2df40:	beq	2dfac <__assert_fail@plt+0x1b530>
   2df44:	cmn	r7, #1
   2df48:	ble	2df84 <__assert_fail@plt+0x1b508>
   2df4c:	mvn	r1, #-2147483648	; 0x80000000
   2df50:	udiv	r1, r1, r0
   2df54:	cmp	r1, r7
   2df58:	bge	2dfac <__assert_fail@plt+0x1b530>
   2df5c:	b	2dfe4 <__assert_fail@plt+0x1b568>
   2df60:	cmn	r7, #1
   2df64:	ble	2df9c <__assert_fail@plt+0x1b520>
   2df68:	cmn	r0, #1
   2df6c:	beq	2dfac <__assert_fail@plt+0x1b530>
   2df70:	mov	r1, #-2147483648	; 0x80000000
   2df74:	sdiv	r1, r1, r0
   2df78:	cmp	r1, r7
   2df7c:	bge	2dfac <__assert_fail@plt+0x1b530>
   2df80:	b	2dfe4 <__assert_fail@plt+0x1b568>
   2df84:	beq	2dfac <__assert_fail@plt+0x1b530>
   2df88:	mov	r1, #-2147483648	; 0x80000000
   2df8c:	sdiv	r1, r1, r7
   2df90:	cmp	r1, r0
   2df94:	bge	2dfac <__assert_fail@plt+0x1b530>
   2df98:	b	2dfe4 <__assert_fail@plt+0x1b568>
   2df9c:	mvn	r1, #-2147483648	; 0x80000000
   2dfa0:	sdiv	r1, r1, r0
   2dfa4:	cmp	r7, r1
   2dfa8:	blt	2dfe4 <__assert_fail@plt+0x1b568>
   2dfac:	mul	r6, r7, r0
   2dfb0:	mov	r0, r5
   2dfb4:	mov	r1, r6
   2dfb8:	bl	33040 <__assert_fail@plt+0x205c4>
   2dfbc:	cmp	r6, #0
   2dfc0:	movwne	r6, #1
   2dfc4:	cmp	r0, #0
   2dfc8:	bne	2dfdc <__assert_fail@plt+0x1b560>
   2dfcc:	clz	r1, r5
   2dfd0:	lsr	r1, r1, #5
   2dfd4:	orrs	r1, r1, r6
   2dfd8:	bne	2dfe4 <__assert_fail@plt+0x1b568>
   2dfdc:	str	r7, [r8]
   2dfe0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2dfe4:	bl	2e150 <__assert_fail@plt+0x1b6d4>
   2dfe8:	push	{fp, lr}
   2dfec:	mov	fp, sp
   2dff0:	mov	r1, #1
   2dff4:	bl	2f760 <__assert_fail@plt+0x1cce4>
   2dff8:	cmp	r0, #0
   2dffc:	popne	{fp, pc}
   2e000:	bl	2e150 <__assert_fail@plt+0x1b6d4>
   2e004:	push	{fp, lr}
   2e008:	mov	fp, sp
   2e00c:	bl	2f760 <__assert_fail@plt+0x1cce4>
   2e010:	cmp	r0, #0
   2e014:	popne	{fp, pc}
   2e018:	bl	2e150 <__assert_fail@plt+0x1b6d4>
   2e01c:	push	{fp, lr}
   2e020:	mov	fp, sp
   2e024:	mov	r1, #1
   2e028:	bl	2f760 <__assert_fail@plt+0x1cce4>
   2e02c:	cmp	r0, #0
   2e030:	popne	{fp, pc}
   2e034:	bl	2e150 <__assert_fail@plt+0x1b6d4>
   2e038:	push	{fp, lr}
   2e03c:	mov	fp, sp
   2e040:	bl	2f760 <__assert_fail@plt+0x1cce4>
   2e044:	cmp	r0, #0
   2e048:	popne	{fp, pc}
   2e04c:	bl	2e150 <__assert_fail@plt+0x1b6d4>
   2e050:	push	{r4, r5, r6, sl, fp, lr}
   2e054:	add	fp, sp, #16
   2e058:	mov	r5, r0
   2e05c:	mov	r0, r1
   2e060:	mov	r4, r1
   2e064:	bl	3233c <__assert_fail@plt+0x1f8c0>
   2e068:	cmp	r0, #0
   2e06c:	beq	2e088 <__assert_fail@plt+0x1b60c>
   2e070:	mov	r1, r5
   2e074:	mov	r2, r4
   2e078:	mov	r6, r0
   2e07c:	bl	124b8 <memcpy@plt>
   2e080:	mov	r0, r6
   2e084:	pop	{r4, r5, r6, sl, fp, pc}
   2e088:	bl	2e150 <__assert_fail@plt+0x1b6d4>
   2e08c:	push	{r4, r5, r6, sl, fp, lr}
   2e090:	add	fp, sp, #16
   2e094:	mov	r5, r0
   2e098:	mov	r0, r1
   2e09c:	mov	r4, r1
   2e0a0:	bl	3233c <__assert_fail@plt+0x1f8c0>
   2e0a4:	cmp	r0, #0
   2e0a8:	beq	2e0c4 <__assert_fail@plt+0x1b648>
   2e0ac:	mov	r1, r5
   2e0b0:	mov	r2, r4
   2e0b4:	mov	r6, r0
   2e0b8:	bl	124b8 <memcpy@plt>
   2e0bc:	mov	r0, r6
   2e0c0:	pop	{r4, r5, r6, sl, fp, pc}
   2e0c4:	bl	2e150 <__assert_fail@plt+0x1b6d4>
   2e0c8:	push	{r4, r5, r6, sl, fp, lr}
   2e0cc:	add	fp, sp, #16
   2e0d0:	mov	r5, r0
   2e0d4:	add	r0, r1, #1
   2e0d8:	mov	r4, r1
   2e0dc:	bl	3233c <__assert_fail@plt+0x1f8c0>
   2e0e0:	cmp	r0, #0
   2e0e4:	beq	2e10c <__assert_fail@plt+0x1b690>
   2e0e8:	mov	r6, r0
   2e0ec:	mov	r0, #0
   2e0f0:	mov	r1, r5
   2e0f4:	mov	r2, r4
   2e0f8:	strb	r0, [r6, r4]
   2e0fc:	mov	r0, r6
   2e100:	bl	124b8 <memcpy@plt>
   2e104:	mov	r0, r6
   2e108:	pop	{r4, r5, r6, sl, fp, pc}
   2e10c:	bl	2e150 <__assert_fail@plt+0x1b6d4>
   2e110:	push	{r4, r5, r6, sl, fp, lr}
   2e114:	add	fp, sp, #16
   2e118:	mov	r4, r0
   2e11c:	bl	12788 <strlen@plt>
   2e120:	add	r5, r0, #1
   2e124:	mov	r0, r5
   2e128:	bl	3233c <__assert_fail@plt+0x1f8c0>
   2e12c:	cmp	r0, #0
   2e130:	beq	2e14c <__assert_fail@plt+0x1b6d0>
   2e134:	mov	r1, r4
   2e138:	mov	r2, r5
   2e13c:	mov	r6, r0
   2e140:	bl	124b8 <memcpy@plt>
   2e144:	mov	r0, r6
   2e148:	pop	{r4, r5, r6, sl, fp, pc}
   2e14c:	bl	2e150 <__assert_fail@plt+0x1b6d4>
   2e150:	push	{fp, lr}
   2e154:	mov	fp, sp
   2e158:	movw	r0, #54504	; 0xd4e8
   2e15c:	movw	r1, #50822	; 0xc686
   2e160:	mov	r2, #5
   2e164:	movt	r0, #5
   2e168:	movt	r1, #4
   2e16c:	ldr	r4, [r0]
   2e170:	mov	r0, #0
   2e174:	bl	1253c <dcgettext@plt>
   2e178:	movw	r2, #52175	; 0xcbcf
   2e17c:	mov	r3, r0
   2e180:	mov	r0, r4
   2e184:	mov	r1, #0
   2e188:	movt	r2, #4
   2e18c:	bl	12674 <error@plt>
   2e190:	bl	12a28 <abort@plt>
   2e194:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e198:	add	fp, sp, #24
   2e19c:	sub	sp, sp, #8
   2e1a0:	mov	r4, r3
   2e1a4:	mov	r8, r2
   2e1a8:	mov	r9, r1
   2e1ac:	mov	r5, r0
   2e1b0:	bl	127d0 <__errno_location@plt>
   2e1b4:	mov	r6, #0
   2e1b8:	mov	r7, r0
   2e1bc:	add	r1, sp, #4
   2e1c0:	str	r6, [r0]
   2e1c4:	mov	r0, r5
   2e1c8:	blx	r4
   2e1cc:	ldr	r0, [sp, #4]
   2e1d0:	cmp	r0, r5
   2e1d4:	beq	2e214 <__assert_fail@plt+0x1b798>
   2e1d8:	cmp	r9, #0
   2e1dc:	beq	2e1fc <__assert_fail@plt+0x1b780>
   2e1e0:	vcmp.f64	d0, #0.0
   2e1e4:	vmrs	APSR_nzcv, fpscr
   2e1e8:	beq	2e210 <__assert_fail@plt+0x1b794>
   2e1ec:	ldr	r1, [r7]
   2e1f0:	subs	r6, r1, #34	; 0x22
   2e1f4:	movwne	r6, #1
   2e1f8:	b	2e214 <__assert_fail@plt+0x1b798>
   2e1fc:	ldrb	r1, [r0]
   2e200:	mov	r6, #0
   2e204:	cmp	r1, #0
   2e208:	bne	2e21c <__assert_fail@plt+0x1b7a0>
   2e20c:	b	2e1e0 <__assert_fail@plt+0x1b764>
   2e210:	mov	r6, #1
   2e214:	cmp	r9, #0
   2e218:	strne	r0, [r9]
   2e21c:	vstr	d0, [r8]
   2e220:	mov	r0, r6
   2e224:	sub	sp, fp, #24
   2e228:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2e22c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e230:	add	fp, sp, #28
   2e234:	sub	sp, sp, #20
   2e238:	cmp	r2, #37	; 0x25
   2e23c:	bcs	2ea30 <__assert_fail@plt+0x1bfb4>
   2e240:	ldr	r9, [fp, #8]
   2e244:	mov	r5, r2
   2e248:	mov	r4, r1
   2e24c:	mov	r7, r0
   2e250:	str	r3, [sp, #12]
   2e254:	bl	127d0 <__errno_location@plt>
   2e258:	mov	r8, r0
   2e25c:	mov	r0, #0
   2e260:	str	r0, [r8]
   2e264:	bl	12740 <__ctype_b_loc@plt>
   2e268:	ldr	r1, [r0]
   2e26c:	mov	r2, r7
   2e270:	ldrb	r0, [r2], #1
   2e274:	add	r3, r1, r0, lsl #1
   2e278:	ldrb	r3, [r3, #1]
   2e27c:	tst	r3, #32
   2e280:	bne	2e270 <__assert_fail@plt+0x1b7f4>
   2e284:	add	r6, sp, #16
   2e288:	cmp	r4, #0
   2e28c:	mov	sl, #4
   2e290:	movne	r6, r4
   2e294:	cmp	r0, #45	; 0x2d
   2e298:	beq	2ea24 <__assert_fail@plt+0x1bfa8>
   2e29c:	mov	r0, r7
   2e2a0:	mov	r1, r6
   2e2a4:	mov	r2, r5
   2e2a8:	bl	1277c <strtoul@plt>
   2e2ac:	ldr	r5, [r6]
   2e2b0:	cmp	r5, r7
   2e2b4:	beq	2e2e0 <__assert_fail@plt+0x1b864>
   2e2b8:	mov	r4, r0
   2e2bc:	ldr	r0, [r8]
   2e2c0:	cmp	r0, #0
   2e2c4:	beq	2e30c <__assert_fail@plt+0x1b890>
   2e2c8:	cmp	r0, #34	; 0x22
   2e2cc:	bne	2ea24 <__assert_fail@plt+0x1bfa8>
   2e2d0:	mov	sl, #1
   2e2d4:	cmp	r9, #0
   2e2d8:	bne	2e318 <__assert_fail@plt+0x1b89c>
   2e2dc:	b	2ea1c <__assert_fail@plt+0x1bfa0>
   2e2e0:	cmp	r9, #0
   2e2e4:	ldrbne	r1, [r7]
   2e2e8:	cmpne	r1, #0
   2e2ec:	beq	2ea24 <__assert_fail@plt+0x1bfa8>
   2e2f0:	mov	r0, r9
   2e2f4:	bl	12794 <strchr@plt>
   2e2f8:	cmp	r0, #0
   2e2fc:	beq	2ea24 <__assert_fail@plt+0x1bfa8>
   2e300:	mov	r4, #1
   2e304:	mov	sl, #0
   2e308:	b	2e318 <__assert_fail@plt+0x1b89c>
   2e30c:	mov	sl, r0
   2e310:	cmp	r9, #0
   2e314:	beq	2ea1c <__assert_fail@plt+0x1bfa0>
   2e318:	ldrb	r7, [r5]
   2e31c:	cmp	r7, #0
   2e320:	beq	2ea1c <__assert_fail@plt+0x1bfa0>
   2e324:	mov	r0, r9
   2e328:	mov	r1, r7
   2e32c:	bl	12794 <strchr@plt>
   2e330:	cmp	r0, #0
   2e334:	beq	2e5b0 <__assert_fail@plt+0x1bb34>
   2e338:	sub	r0, r7, #69	; 0x45
   2e33c:	mov	lr, #1
   2e340:	mov	r8, #1024	; 0x400
   2e344:	cmp	r0, #47	; 0x2f
   2e348:	bhi	2e464 <__assert_fail@plt+0x1b9e8>
   2e34c:	add	r1, pc, #0
   2e350:	ldr	pc, [r1, r0, lsl #2]
   2e354:	andeq	lr, r2, r4, lsl r4
   2e358:	andeq	lr, r2, r4, ror #8
   2e35c:	andeq	lr, r2, r4, lsl r4
   2e360:	andeq	lr, r2, r4, ror #8
   2e364:	andeq	lr, r2, r4, ror #8
   2e368:	andeq	lr, r2, r4, ror #8
   2e36c:	andeq	lr, r2, r4, lsl r4
   2e370:	andeq	lr, r2, r4, ror #8
   2e374:	andeq	lr, r2, r4, lsl r4
   2e378:	andeq	lr, r2, r4, ror #8
   2e37c:	andeq	lr, r2, r4, ror #8
   2e380:	andeq	lr, r2, r4, lsl r4
   2e384:	andeq	lr, r2, r4, ror #8
   2e388:	andeq	lr, r2, r4, ror #8
   2e38c:	andeq	lr, r2, r4, ror #8
   2e390:	andeq	lr, r2, r4, lsl r4
   2e394:	andeq	lr, r2, r4, ror #8
   2e398:	andeq	lr, r2, r4, ror #8
   2e39c:	andeq	lr, r2, r4, ror #8
   2e3a0:	andeq	lr, r2, r4, ror #8
   2e3a4:	andeq	lr, r2, r4, lsl r4
   2e3a8:	andeq	lr, r2, r4, lsl r4
   2e3ac:	andeq	lr, r2, r4, ror #8
   2e3b0:	andeq	lr, r2, r4, ror #8
   2e3b4:	andeq	lr, r2, r4, ror #8
   2e3b8:	andeq	lr, r2, r4, ror #8
   2e3bc:	andeq	lr, r2, r4, ror #8
   2e3c0:	andeq	lr, r2, r4, ror #8
   2e3c4:	andeq	lr, r2, r4, ror #8
   2e3c8:	andeq	lr, r2, r4, ror #8
   2e3cc:	andeq	lr, r2, r4, ror #8
   2e3d0:	andeq	lr, r2, r4, ror #8
   2e3d4:	andeq	lr, r2, r4, ror #8
   2e3d8:	andeq	lr, r2, r4, ror #8
   2e3dc:	andeq	lr, r2, r4, lsl r4
   2e3e0:	andeq	lr, r2, r4, ror #8
   2e3e4:	andeq	lr, r2, r4, ror #8
   2e3e8:	andeq	lr, r2, r4, ror #8
   2e3ec:	andeq	lr, r2, r4, lsl r4
   2e3f0:	andeq	lr, r2, r4, ror #8
   2e3f4:	andeq	lr, r2, r4, lsl r4
   2e3f8:	andeq	lr, r2, r4, ror #8
   2e3fc:	andeq	lr, r2, r4, ror #8
   2e400:	andeq	lr, r2, r4, ror #8
   2e404:	andeq	lr, r2, r4, ror #8
   2e408:	andeq	lr, r2, r4, ror #8
   2e40c:	andeq	lr, r2, r4, ror #8
   2e410:	andeq	lr, r2, r4, lsl r4
   2e414:	mov	r0, r9
   2e418:	mov	r1, #48	; 0x30
   2e41c:	bl	12794 <strchr@plt>
   2e420:	cmp	r0, #0
   2e424:	beq	2e460 <__assert_fail@plt+0x1b9e4>
   2e428:	ldrb	r0, [r5, #1]
   2e42c:	cmp	r0, #66	; 0x42
   2e430:	cmpne	r0, #68	; 0x44
   2e434:	bne	2e444 <__assert_fail@plt+0x1b9c8>
   2e438:	mov	lr, #2
   2e43c:	mov	r8, #1000	; 0x3e8
   2e440:	b	2e464 <__assert_fail@plt+0x1b9e8>
   2e444:	cmp	r0, #105	; 0x69
   2e448:	bne	2e460 <__assert_fail@plt+0x1b9e4>
   2e44c:	ldrb	r0, [r5, #2]
   2e450:	mov	lr, #1
   2e454:	cmp	r0, #66	; 0x42
   2e458:	movweq	lr, #3
   2e45c:	b	2e464 <__assert_fail@plt+0x1b9e8>
   2e460:	mov	lr, #1
   2e464:	sub	r1, r7, #66	; 0x42
   2e468:	cmp	r1, #53	; 0x35
   2e46c:	bhi	2e5b0 <__assert_fail@plt+0x1bb34>
   2e470:	add	r2, pc, #4
   2e474:	mov	r0, #0
   2e478:	ldr	pc, [r2, r1, lsl #2]
   2e47c:	andeq	lr, r2, r4, ror #14
   2e480:			; <UNDEFINED> instruction: 0x0002e5b0
   2e484:			; <UNDEFINED> instruction: 0x0002e5b0
   2e488:	andeq	lr, r2, r0, lsl #15
   2e48c:			; <UNDEFINED> instruction: 0x0002e5b0
   2e490:	andeq	lr, r2, r4, asr r5
   2e494:			; <UNDEFINED> instruction: 0x0002e5b0
   2e498:			; <UNDEFINED> instruction: 0x0002e5b0
   2e49c:			; <UNDEFINED> instruction: 0x0002e5b0
   2e4a0:			; <UNDEFINED> instruction: 0x0002e5bc
   2e4a4:			; <UNDEFINED> instruction: 0x0002e5b0
   2e4a8:	ldrdeq	lr, [r2], -ip
   2e4ac:			; <UNDEFINED> instruction: 0x0002e5b0
   2e4b0:			; <UNDEFINED> instruction: 0x0002e5b0
   2e4b4:	andeq	lr, r2, r8, lsr r8
   2e4b8:			; <UNDEFINED> instruction: 0x0002e5b0
   2e4bc:			; <UNDEFINED> instruction: 0x0002e5b0
   2e4c0:			; <UNDEFINED> instruction: 0x0002e5b0
   2e4c4:	andeq	lr, r2, ip, lsl r6
   2e4c8:			; <UNDEFINED> instruction: 0x0002e5b0
   2e4cc:			; <UNDEFINED> instruction: 0x0002e5b0
   2e4d0:			; <UNDEFINED> instruction: 0x0002e5b0
   2e4d4:			; <UNDEFINED> instruction: 0x0002e5b0
   2e4d8:	ldrdeq	lr, [r2], -r4
   2e4dc:	muleq	r2, r4, r6
   2e4e0:			; <UNDEFINED> instruction: 0x0002e5b0
   2e4e4:			; <UNDEFINED> instruction: 0x0002e5b0
   2e4e8:			; <UNDEFINED> instruction: 0x0002e5b0
   2e4ec:			; <UNDEFINED> instruction: 0x0002e5b0
   2e4f0:			; <UNDEFINED> instruction: 0x0002e5b0
   2e4f4:			; <UNDEFINED> instruction: 0x0002e5b0
   2e4f8:			; <UNDEFINED> instruction: 0x0002e5b0
   2e4fc:	andeq	lr, r2, ip, asr #19
   2e500:	andeq	lr, r2, r4, lsl #20
   2e504:			; <UNDEFINED> instruction: 0x0002e5b0
   2e508:			; <UNDEFINED> instruction: 0x0002e5b0
   2e50c:			; <UNDEFINED> instruction: 0x0002e5b0
   2e510:	andeq	lr, r2, r4, asr r5
   2e514:			; <UNDEFINED> instruction: 0x0002e5b0
   2e518:			; <UNDEFINED> instruction: 0x0002e5b0
   2e51c:			; <UNDEFINED> instruction: 0x0002e5b0
   2e520:			; <UNDEFINED> instruction: 0x0002e5bc
   2e524:			; <UNDEFINED> instruction: 0x0002e5b0
   2e528:	ldrdeq	lr, [r2], -ip
   2e52c:			; <UNDEFINED> instruction: 0x0002e5b0
   2e530:			; <UNDEFINED> instruction: 0x0002e5b0
   2e534:			; <UNDEFINED> instruction: 0x0002e5b0
   2e538:			; <UNDEFINED> instruction: 0x0002e5b0
   2e53c:			; <UNDEFINED> instruction: 0x0002e5b0
   2e540:			; <UNDEFINED> instruction: 0x0002e5b0
   2e544:	andeq	lr, r2, ip, lsl r6
   2e548:			; <UNDEFINED> instruction: 0x0002e5b0
   2e54c:			; <UNDEFINED> instruction: 0x0002e5b0
   2e550:	strdeq	lr, [r2], -r0
   2e554:	mvn	r0, #0
   2e558:	mul	r1, r4, r8
   2e55c:	mov	r7, #0
   2e560:	udiv	r0, r0, r8
   2e564:	cmp	r0, r4
   2e568:	mvncc	r1, #0
   2e56c:	mul	r2, r1, r8
   2e570:	cmp	r0, r1
   2e574:	mvncc	r2, #0
   2e578:	cmp	r0, r2
   2e57c:	mul	r3, r2, r8
   2e580:	mov	r2, #0
   2e584:	mvncc	r3, #0
   2e588:	movwcc	r7, #1
   2e58c:	cmp	r0, r1
   2e590:	mov	r1, #0
   2e594:	movwcc	r1, #1
   2e598:	cmp	r0, r4
   2e59c:	mov	r4, r3
   2e5a0:	movwcc	r2, #1
   2e5a4:	orr	r0, r2, r1
   2e5a8:	orr	r0, r0, r7
   2e5ac:	b	2ea04 <__assert_fail@plt+0x1bf88>
   2e5b0:	ldr	r0, [sp, #12]
   2e5b4:	orr	sl, sl, #2
   2e5b8:	b	2ea20 <__assert_fail@plt+0x1bfa4>
   2e5bc:	mvn	r0, #0
   2e5c0:	mul	r1, r4, r8
   2e5c4:	udiv	r0, r0, r8
   2e5c8:	cmp	r0, r4
   2e5cc:	mov	r0, #0
   2e5d0:	mvncc	r1, #0
   2e5d4:	movwcc	r0, #1
   2e5d8:	b	2ea00 <__assert_fail@plt+0x1bf84>
   2e5dc:	mvn	r0, #0
   2e5e0:	mul	r1, r4, r8
   2e5e4:	mov	r3, #0
   2e5e8:	udiv	r0, r0, r8
   2e5ec:	cmp	r0, r4
   2e5f0:	mvncc	r1, #0
   2e5f4:	cmp	r0, r1
   2e5f8:	mul	r2, r1, r8
   2e5fc:	mov	r1, #0
   2e600:	mvncc	r2, #0
   2e604:	movwcc	r3, #1
   2e608:	cmp	r0, r4
   2e60c:	movwcc	r1, #1
   2e610:	mov	r4, r2
   2e614:	orr	r0, r1, r3
   2e618:	b	2ea04 <__assert_fail@plt+0x1bf88>
   2e61c:	mvn	r0, #0
   2e620:	mul	r1, r4, r8
   2e624:	mov	r7, #0
   2e628:	udiv	r0, r0, r8
   2e62c:	cmp	r0, r4
   2e630:	mvncc	r1, #0
   2e634:	mul	r2, r1, r8
   2e638:	cmp	r0, r1
   2e63c:	mvncc	r2, #0
   2e640:	mul	r3, r2, r8
   2e644:	cmp	r0, r2
   2e648:	mvncc	r3, #0
   2e64c:	cmp	r0, r3
   2e650:	mul	ip, r3, r8
   2e654:	mov	r3, #0
   2e658:	mvncc	ip, #0
   2e65c:	movwcc	r7, #1
   2e660:	cmp	r0, r2
   2e664:	mov	r2, #0
   2e668:	movwcc	r2, #1
   2e66c:	cmp	r0, r1
   2e670:	mov	r1, #0
   2e674:	movwcc	r1, #1
   2e678:	cmp	r0, r4
   2e67c:	mov	r4, ip
   2e680:	movwcc	r3, #1
   2e684:	orr	r0, r3, r1
   2e688:	orr	r0, r0, r2
   2e68c:	orr	r0, r0, r7
   2e690:	b	2ea04 <__assert_fail@plt+0x1bf88>
   2e694:	mvn	r0, #0
   2e698:	str	lr, [sp, #8]
   2e69c:	mul	lr, r4, r8
   2e6a0:	udiv	r0, r0, r8
   2e6a4:	cmp	r0, r4
   2e6a8:	mvncc	lr, #0
   2e6ac:	mul	r9, lr, r8
   2e6b0:	cmp	r0, lr
   2e6b4:	mvncc	r9, #0
   2e6b8:	mul	r7, r9, r8
   2e6bc:	cmp	r0, r9
   2e6c0:	mvncc	r7, #0
   2e6c4:	mul	r3, r7, r8
   2e6c8:	cmp	r0, r7
   2e6cc:	mvncc	r3, #0
   2e6d0:	mul	r1, r3, r8
   2e6d4:	cmp	r0, r3
   2e6d8:	mvncc	r1, #0
   2e6dc:	mul	r2, r1, r8
   2e6e0:	cmp	r0, r1
   2e6e4:	mvncc	r2, #0
   2e6e8:	mul	ip, r2, r8
   2e6ec:	cmp	r0, r2
   2e6f0:	mov	r8, #0
   2e6f4:	mov	r2, #0
   2e6f8:	mvncc	ip, #0
   2e6fc:	movwcc	r8, #1
   2e700:	cmp	r0, r1
   2e704:	mov	r1, #0
   2e708:	movwcc	r1, #1
   2e70c:	cmp	r0, r3
   2e710:	mov	r3, #0
   2e714:	movwcc	r3, #1
   2e718:	cmp	r0, r7
   2e71c:	mov	r7, #0
   2e720:	movwcc	r7, #1
   2e724:	cmp	r0, r9
   2e728:	mov	r9, #0
   2e72c:	movwcc	r9, #1
   2e730:	cmp	r0, lr
   2e734:	mov	lr, #0
   2e738:	movwcc	lr, #1
   2e73c:	cmp	r0, r4
   2e740:	mov	r4, ip
   2e744:	movwcc	r2, #1
   2e748:	orr	r0, r2, lr
   2e74c:	ldr	lr, [sp, #8]
   2e750:	orr	r0, r0, r9
   2e754:	orr	r0, r0, r7
   2e758:	orr	r0, r0, r3
   2e75c:	orr	r0, r0, r1
   2e760:	b	2e9c0 <__assert_fail@plt+0x1bf44>
   2e764:	mov	r1, #0
   2e768:	lsr	r0, r4, #22
   2e76c:	cmp	r1, r4, lsr #22
   2e770:	lsl	r4, r4, #10
   2e774:	movwne	r0, #1
   2e778:	mvnne	r4, #0
   2e77c:	b	2ea04 <__assert_fail@plt+0x1bf88>
   2e780:	mvn	r0, #0
   2e784:	mul	ip, r4, r8
   2e788:	str	lr, [sp, #8]
   2e78c:	mov	r9, #0
   2e790:	udiv	r0, r0, r8
   2e794:	cmp	r0, r4
   2e798:	mvncc	ip, #0
   2e79c:	mul	r2, ip, r8
   2e7a0:	cmp	r0, ip
   2e7a4:	mvncc	r2, #0
   2e7a8:	mul	r3, r2, r8
   2e7ac:	cmp	r0, r2
   2e7b0:	mvncc	r3, #0
   2e7b4:	mul	r7, r3, r8
   2e7b8:	cmp	r0, r3
   2e7bc:	mvncc	r7, #0
   2e7c0:	mul	r1, r7, r8
   2e7c4:	cmp	r0, r7
   2e7c8:	mvncc	r1, #0
   2e7cc:	mul	lr, r1, r8
   2e7d0:	cmp	r0, r1
   2e7d4:	mov	r8, #0
   2e7d8:	mov	r1, #0
   2e7dc:	mvncc	lr, #0
   2e7e0:	movwcc	r8, #1
   2e7e4:	cmp	r0, r7
   2e7e8:	mov	r7, #0
   2e7ec:	movwcc	r7, #1
   2e7f0:	cmp	r0, r3
   2e7f4:	mov	r3, #0
   2e7f8:	movwcc	r3, #1
   2e7fc:	cmp	r0, r2
   2e800:	mov	r2, #0
   2e804:	movwcc	r2, #1
   2e808:	cmp	r0, ip
   2e80c:	movwcc	r1, #1
   2e810:	cmp	r0, r4
   2e814:	mov	r4, lr
   2e818:	ldr	lr, [sp, #8]
   2e81c:	movwcc	r9, #1
   2e820:	orr	r0, r9, r1
   2e824:	orr	r0, r0, r2
   2e828:	orr	r0, r0, r3
   2e82c:	orr	r0, r0, r7
   2e830:	orr	r0, r0, r8
   2e834:	b	2ea04 <__assert_fail@plt+0x1bf88>
   2e838:	mvn	r0, #0
   2e83c:	mul	r1, r4, r8
   2e840:	udiv	r0, r0, r8
   2e844:	cmp	r0, r4
   2e848:	mvncc	r1, #0
   2e84c:	mul	r2, r1, r8
   2e850:	cmp	r0, r1
   2e854:	mvncc	r2, #0
   2e858:	mul	r3, r2, r8
   2e85c:	cmp	r0, r2
   2e860:	mvncc	r3, #0
   2e864:	mul	r7, r3, r8
   2e868:	cmp	r0, r3
   2e86c:	mvncc	r7, #0
   2e870:	mul	ip, r7, r8
   2e874:	cmp	r0, r7
   2e878:	mov	r8, lr
   2e87c:	mov	lr, #0
   2e880:	mov	r7, #0
   2e884:	mvncc	ip, #0
   2e888:	movwcc	lr, #1
   2e88c:	cmp	r0, r3
   2e890:	mov	r3, #0
   2e894:	movwcc	r3, #1
   2e898:	cmp	r0, r2
   2e89c:	mov	r2, #0
   2e8a0:	movwcc	r2, #1
   2e8a4:	cmp	r0, r1
   2e8a8:	mov	r1, #0
   2e8ac:	movwcc	r1, #1
   2e8b0:	cmp	r0, r4
   2e8b4:	mov	r4, ip
   2e8b8:	movwcc	r7, #1
   2e8bc:	orr	r0, r7, r1
   2e8c0:	orr	r0, r0, r2
   2e8c4:	orr	r0, r0, r3
   2e8c8:	orr	r0, r0, lr
   2e8cc:	mov	lr, r8
   2e8d0:	b	2ea04 <__assert_fail@plt+0x1bf88>
   2e8d4:	mvn	r0, #0
   2e8d8:	str	lr, [sp, #8]
   2e8dc:	mul	lr, r4, r8
   2e8e0:	udiv	r0, r0, r8
   2e8e4:	cmp	r0, r4
   2e8e8:	mvncc	lr, #0
   2e8ec:	mul	r9, lr, r8
   2e8f0:	cmp	r0, lr
   2e8f4:	mvncc	r9, #0
   2e8f8:	mul	r7, r9, r8
   2e8fc:	cmp	r0, r9
   2e900:	mvncc	r7, #0
   2e904:	mul	r3, r7, r8
   2e908:	cmp	r0, r7
   2e90c:	mvncc	r3, #0
   2e910:	mul	r1, r3, r8
   2e914:	cmp	r0, r3
   2e918:	mvncc	r1, #0
   2e91c:	mul	r2, r1, r8
   2e920:	cmp	r0, r1
   2e924:	mvncc	r2, #0
   2e928:	mul	ip, r2, r8
   2e92c:	cmp	r0, r2
   2e930:	mvncc	ip, #0
   2e934:	mul	r8, ip, r8
   2e938:	cmp	r0, ip
   2e93c:	mov	ip, #0
   2e940:	mvncc	r8, #0
   2e944:	str	r8, [sp, #4]
   2e948:	mov	r8, #0
   2e94c:	movwcc	r8, #1
   2e950:	cmp	r0, r2
   2e954:	mov	r2, #0
   2e958:	movwcc	r2, #1
   2e95c:	cmp	r0, r1
   2e960:	mov	r1, #0
   2e964:	movwcc	r1, #1
   2e968:	cmp	r0, r3
   2e96c:	mov	r3, #0
   2e970:	movwcc	r3, #1
   2e974:	cmp	r0, r7
   2e978:	mov	r7, #0
   2e97c:	movwcc	r7, #1
   2e980:	cmp	r0, r9
   2e984:	mov	r9, #0
   2e988:	movwcc	r9, #1
   2e98c:	cmp	r0, lr
   2e990:	mov	lr, #0
   2e994:	movwcc	lr, #1
   2e998:	cmp	r0, r4
   2e99c:	ldr	r4, [sp, #4]
   2e9a0:	movwcc	ip, #1
   2e9a4:	orr	r0, ip, lr
   2e9a8:	ldr	lr, [sp, #8]
   2e9ac:	orr	r0, r0, r9
   2e9b0:	orr	r0, r0, r7
   2e9b4:	orr	r0, r0, r3
   2e9b8:	orr	r0, r0, r1
   2e9bc:	orr	r0, r0, r2
   2e9c0:	orr	r0, r0, r8
   2e9c4:	and	r0, r0, #1
   2e9c8:	b	2ea04 <__assert_fail@plt+0x1bf88>
   2e9cc:	movw	r0, #65535	; 0xffff
   2e9d0:	movt	r0, #63	; 0x3f
   2e9d4:	add	r1, r0, #4194304	; 0x400000
   2e9d8:	mov	r0, #0
   2e9dc:	cmp	r4, r1
   2e9e0:	lsl	r4, r4, #9
   2e9e4:	movwhi	r0, #1
   2e9e8:	mvnhi	r4, #0
   2e9ec:	b	2ea04 <__assert_fail@plt+0x1bf88>
   2e9f0:	lsl	r1, r4, #1
   2e9f4:	cmp	r4, #0
   2e9f8:	lsr	r0, r4, #31
   2e9fc:	mvnlt	r1, #0
   2ea00:	mov	r4, r1
   2ea04:	add	r1, r5, lr
   2ea08:	orr	sl, r0, sl
   2ea0c:	str	r1, [r6]
   2ea10:	ldrb	r1, [r5, lr]
   2ea14:	cmp	r1, #0
   2ea18:	orrne	sl, sl, #2
   2ea1c:	ldr	r0, [sp, #12]
   2ea20:	str	r4, [r0]
   2ea24:	mov	r0, sl
   2ea28:	sub	sp, fp, #28
   2ea2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ea30:	movw	r0, #50839	; 0xc697
   2ea34:	movw	r1, #50877	; 0xc6bd
   2ea38:	movw	r3, #50889	; 0xc6c9
   2ea3c:	mov	r2, #84	; 0x54
   2ea40:	movt	r0, #4
   2ea44:	movt	r1, #4
   2ea48:	movt	r3, #4
   2ea4c:	bl	12a7c <__assert_fail@plt>
   2ea50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ea54:	add	fp, sp, #28
   2ea58:	sub	sp, sp, #44	; 0x2c
   2ea5c:	cmp	r2, #37	; 0x25
   2ea60:	bcs	2f6c4 <__assert_fail@plt+0x1cc48>
   2ea64:	ldr	sl, [fp, #8]
   2ea68:	mov	r6, r2
   2ea6c:	mov	r7, r1
   2ea70:	mov	r4, r0
   2ea74:	str	r3, [sp, #36]	; 0x24
   2ea78:	bl	127d0 <__errno_location@plt>
   2ea7c:	mov	r5, r0
   2ea80:	mov	r0, #0
   2ea84:	str	r0, [r5]
   2ea88:	bl	12740 <__ctype_b_loc@plt>
   2ea8c:	ldr	r1, [r0]
   2ea90:	mov	r2, r4
   2ea94:	ldrb	r0, [r2], #1
   2ea98:	add	r3, r1, r0, lsl #1
   2ea9c:	ldrb	r3, [r3, #1]
   2eaa0:	tst	r3, #32
   2eaa4:	bne	2ea94 <__assert_fail@plt+0x1c018>
   2eaa8:	sub	r9, fp, #32
   2eaac:	cmp	r7, #0
   2eab0:	mov	r8, #4
   2eab4:	movne	r9, r7
   2eab8:	cmp	r0, #45	; 0x2d
   2eabc:	beq	2f6b8 <__assert_fail@plt+0x1cc3c>
   2eac0:	mov	r0, r4
   2eac4:	mov	r1, r9
   2eac8:	mov	r2, r6
   2eacc:	mov	r3, #0
   2ead0:	bl	124dc <__strtoull_internal@plt>
   2ead4:	mov	r7, r1
   2ead8:	ldr	r1, [r9]
   2eadc:	cmp	r1, r4
   2eae0:	beq	2eb0c <__assert_fail@plt+0x1c090>
   2eae4:	mov	r6, r0
   2eae8:	ldr	r0, [r5]
   2eaec:	cmp	r0, #0
   2eaf0:	beq	2eb48 <__assert_fail@plt+0x1c0cc>
   2eaf4:	cmp	r0, #34	; 0x22
   2eaf8:	bne	2f6b8 <__assert_fail@plt+0x1cc3c>
   2eafc:	mov	r8, #1
   2eb00:	cmp	sl, #0
   2eb04:	bne	2eb54 <__assert_fail@plt+0x1c0d8>
   2eb08:	b	2f6b0 <__assert_fail@plt+0x1cc34>
   2eb0c:	cmp	sl, #0
   2eb10:	beq	2f6b8 <__assert_fail@plt+0x1cc3c>
   2eb14:	mov	r5, r1
   2eb18:	ldrb	r1, [r4]
   2eb1c:	cmp	r1, #0
   2eb20:	beq	2f6b8 <__assert_fail@plt+0x1cc3c>
   2eb24:	mov	r0, sl
   2eb28:	bl	12794 <strchr@plt>
   2eb2c:	cmp	r0, #0
   2eb30:	beq	2f6b8 <__assert_fail@plt+0x1cc3c>
   2eb34:	mov	r1, r5
   2eb38:	mov	r8, #0
   2eb3c:	mov	r6, #1
   2eb40:	mov	r7, #0
   2eb44:	b	2eb54 <__assert_fail@plt+0x1c0d8>
   2eb48:	mov	r8, r0
   2eb4c:	cmp	sl, #0
   2eb50:	beq	2f6b0 <__assert_fail@plt+0x1cc34>
   2eb54:	ldrb	r4, [r1]
   2eb58:	cmp	r4, #0
   2eb5c:	beq	2f6b0 <__assert_fail@plt+0x1cc34>
   2eb60:	str	r1, [sp, #32]
   2eb64:	mov	r0, sl
   2eb68:	mov	r1, r4
   2eb6c:	bl	12794 <strchr@plt>
   2eb70:	cmp	r0, #0
   2eb74:	beq	2ee38 <__assert_fail@plt+0x1c3bc>
   2eb78:	sub	r0, r4, #69	; 0x45
   2eb7c:	mov	r1, #1
   2eb80:	mov	r3, #0
   2eb84:	mov	r5, #1024	; 0x400
   2eb88:	cmp	r0, #47	; 0x2f
   2eb8c:	str	r1, [sp, #28]
   2eb90:	bhi	2ec94 <__assert_fail@plt+0x1c218>
   2eb94:	add	r1, pc, #0
   2eb98:	ldr	pc, [r1, r0, lsl #2]
   2eb9c:	andeq	lr, r2, ip, asr ip
   2eba0:	muleq	r2, r4, ip
   2eba4:	andeq	lr, r2, ip, asr ip
   2eba8:	muleq	r2, r4, ip
   2ebac:	muleq	r2, r4, ip
   2ebb0:	muleq	r2, r4, ip
   2ebb4:	andeq	lr, r2, ip, asr ip
   2ebb8:	muleq	r2, r4, ip
   2ebbc:	andeq	lr, r2, ip, asr ip
   2ebc0:	muleq	r2, r4, ip
   2ebc4:	muleq	r2, r4, ip
   2ebc8:	andeq	lr, r2, ip, asr ip
   2ebcc:	muleq	r2, r4, ip
   2ebd0:	muleq	r2, r4, ip
   2ebd4:	muleq	r2, r4, ip
   2ebd8:	andeq	lr, r2, ip, asr ip
   2ebdc:	muleq	r2, r4, ip
   2ebe0:	muleq	r2, r4, ip
   2ebe4:	muleq	r2, r4, ip
   2ebe8:	muleq	r2, r4, ip
   2ebec:	andeq	lr, r2, ip, asr ip
   2ebf0:	andeq	lr, r2, ip, asr ip
   2ebf4:	muleq	r2, r4, ip
   2ebf8:	muleq	r2, r4, ip
   2ebfc:	muleq	r2, r4, ip
   2ec00:	muleq	r2, r4, ip
   2ec04:	muleq	r2, r4, ip
   2ec08:	muleq	r2, r4, ip
   2ec0c:	muleq	r2, r4, ip
   2ec10:	muleq	r2, r4, ip
   2ec14:	muleq	r2, r4, ip
   2ec18:	muleq	r2, r4, ip
   2ec1c:	muleq	r2, r4, ip
   2ec20:	muleq	r2, r4, ip
   2ec24:	andeq	lr, r2, ip, asr ip
   2ec28:	muleq	r2, r4, ip
   2ec2c:	muleq	r2, r4, ip
   2ec30:	muleq	r2, r4, ip
   2ec34:	andeq	lr, r2, ip, asr ip
   2ec38:	muleq	r2, r4, ip
   2ec3c:	andeq	lr, r2, ip, asr ip
   2ec40:	muleq	r2, r4, ip
   2ec44:	muleq	r2, r4, ip
   2ec48:	muleq	r2, r4, ip
   2ec4c:	muleq	r2, r4, ip
   2ec50:	muleq	r2, r4, ip
   2ec54:	muleq	r2, r4, ip
   2ec58:	andeq	lr, r2, ip, asr ip
   2ec5c:	mov	r0, sl
   2ec60:	mov	r1, #48	; 0x30
   2ec64:	bl	12794 <strchr@plt>
   2ec68:	cmp	r0, #0
   2ec6c:	beq	2ec90 <__assert_fail@plt+0x1c214>
   2ec70:	ldr	r1, [sp, #32]
   2ec74:	ldrb	r0, [r1, #1]
   2ec78:	cmp	r0, #66	; 0x42
   2ec7c:	cmpne	r0, #68	; 0x44
   2ec80:	bne	2ee44 <__assert_fail@plt+0x1c3c8>
   2ec84:	mov	r5, #1000	; 0x3e8
   2ec88:	mov	r0, #2
   2ec8c:	str	r0, [sp, #28]
   2ec90:	mov	r3, #0
   2ec94:	sub	r0, r4, #66	; 0x42
   2ec98:	cmp	r0, #53	; 0x35
   2ec9c:	bhi	2ee38 <__assert_fail@plt+0x1c3bc>
   2eca0:	add	r1, pc, #0
   2eca4:	ldr	pc, [r1, r0, lsl #2]
   2eca8:	andeq	pc, r2, r0, asr #3
   2ecac:	andeq	lr, r2, r8, lsr lr
   2ecb0:	andeq	lr, r2, r8, lsr lr
   2ecb4:	andeq	pc, r2, r8, ror #3
   2ecb8:	andeq	lr, r2, r8, lsr lr
   2ecbc:	andeq	lr, r2, r0, lsl #27
   2ecc0:	andeq	lr, r2, r8, lsr lr
   2ecc4:	andeq	lr, r2, r8, lsr lr
   2ecc8:	andeq	lr, r2, r8, lsr lr
   2eccc:	andeq	lr, r2, r8, ror #28
   2ecd0:	andeq	lr, r2, r8, lsr lr
   2ecd4:			; <UNDEFINED> instruction: 0x0002eeb0
   2ecd8:	andeq	lr, r2, r8, lsr lr
   2ecdc:	andeq	lr, r2, r8, lsr lr
   2ece0:	andeq	pc, r2, ip, lsr r3	; <UNPREDICTABLE>
   2ece4:	andeq	lr, r2, r8, lsr lr
   2ece8:	andeq	lr, r2, r8, lsr lr
   2ecec:	andeq	lr, r2, r8, lsr lr
   2ecf0:	andeq	lr, r2, ip, lsr pc
   2ecf4:	andeq	lr, r2, r8, lsr lr
   2ecf8:	andeq	lr, r2, r8, lsr lr
   2ecfc:	andeq	lr, r2, r8, lsr lr
   2ed00:	andeq	lr, r2, r8, lsr lr
   2ed04:	andeq	pc, r2, r4, ror #8
   2ed08:	andeq	pc, r2, r4, lsr #32
   2ed0c:	andeq	lr, r2, r8, lsr lr
   2ed10:	andeq	lr, r2, r8, lsr lr
   2ed14:	andeq	lr, r2, r8, lsr lr
   2ed18:	andeq	lr, r2, r8, lsr lr
   2ed1c:	andeq	lr, r2, r8, lsr lr
   2ed20:	andeq	lr, r2, r8, lsr lr
   2ed24:	andeq	lr, r2, r8, lsr lr
   2ed28:	andeq	pc, r2, r8, lsr r6	; <UNPREDICTABLE>
   2ed2c:	muleq	r2, r0, r6
   2ed30:	andeq	lr, r2, r8, lsr lr
   2ed34:	andeq	lr, r2, r8, lsr lr
   2ed38:	andeq	lr, r2, r8, lsr lr
   2ed3c:	andeq	lr, r2, r0, lsl #27
   2ed40:	andeq	lr, r2, r8, lsr lr
   2ed44:	andeq	lr, r2, r8, lsr lr
   2ed48:	andeq	lr, r2, r8, lsr lr
   2ed4c:	andeq	lr, r2, r8, ror #28
   2ed50:	andeq	lr, r2, r8, lsr lr
   2ed54:			; <UNDEFINED> instruction: 0x0002eeb0
   2ed58:	andeq	lr, r2, r8, lsr lr
   2ed5c:	andeq	lr, r2, r8, lsr lr
   2ed60:	andeq	lr, r2, r8, lsr lr
   2ed64:	andeq	lr, r2, r8, lsr lr
   2ed68:	andeq	lr, r2, r8, lsr lr
   2ed6c:	andeq	lr, r2, r8, lsr lr
   2ed70:	andeq	lr, r2, ip, lsr pc
   2ed74:	andeq	lr, r2, r8, lsr lr
   2ed78:	andeq	lr, r2, r8, lsr lr
   2ed7c:	andeq	pc, r2, ip, ror #12
   2ed80:	mvn	r0, #0
   2ed84:	mvn	r1, #0
   2ed88:	mov	r2, r5
   2ed8c:	mov	sl, r3
   2ed90:	bl	466fc <__assert_fail@plt+0x33c80>
   2ed94:	subs	r3, r0, r6
   2ed98:	mov	lr, #0
   2ed9c:	umull	r4, r2, r6, r5
   2eda0:	str	r1, [sp, #20]
   2eda4:	sbcs	r3, r1, r7
   2eda8:	mla	ip, r6, sl, r2
   2edac:	mov	r2, r1
   2edb0:	movwcc	lr, #1
   2edb4:	mla	r7, r7, r5, ip
   2edb8:	mov	r2, #0
   2edbc:	cmp	lr, #0
   2edc0:	mvnne	r4, #0
   2edc4:	mvnne	r7, #0
   2edc8:	subs	r6, r0, r4
   2edcc:	sbcs	r6, r1, r7
   2edd0:	movwcc	r2, #1
   2edd4:	umull	r3, r6, r4, r5
   2edd8:	cmp	r2, #0
   2eddc:	str	r6, [sp, #16]
   2ede0:	mvnne	r3, #0
   2ede4:	cmp	r2, #0
   2ede8:	umull	r6, ip, r3, r5
   2edec:	mla	r1, r3, sl, ip
   2edf0:	ldr	ip, [sp, #16]
   2edf4:	str	r1, [sp, #12]
   2edf8:	mla	r4, r4, sl, ip
   2edfc:	mla	r4, r7, r5, r4
   2ee00:	ldr	r7, [sp, #12]
   2ee04:	mvnne	r4, #0
   2ee08:	subs	r0, r0, r3
   2ee0c:	ldr	r0, [sp, #20]
   2ee10:	mla	r7, r4, r5, r7
   2ee14:	sbcs	r0, r0, r4
   2ee18:	mov	r0, #0
   2ee1c:	movwcc	r0, #1
   2ee20:	cmp	r0, #0
   2ee24:	mov	r1, r0
   2ee28:	orr	r0, lr, r2
   2ee2c:	mvnne	r7, #0
   2ee30:	mvnne	r6, #0
   2ee34:	b	2f45c <__assert_fail@plt+0x1c9e0>
   2ee38:	ldr	r0, [sp, #36]	; 0x24
   2ee3c:	orr	r8, r8, #2
   2ee40:	b	2f6b4 <__assert_fail@plt+0x1cc38>
   2ee44:	cmp	r0, #105	; 0x69
   2ee48:	mov	r3, #0
   2ee4c:	bne	2ec94 <__assert_fail@plt+0x1c218>
   2ee50:	ldrb	r0, [r1, #2]
   2ee54:	mov	r1, #1
   2ee58:	cmp	r0, #66	; 0x42
   2ee5c:	movweq	r1, #3
   2ee60:	str	r1, [sp, #28]
   2ee64:	b	2ec94 <__assert_fail@plt+0x1c218>
   2ee68:	mvn	r0, #0
   2ee6c:	mvn	r1, #0
   2ee70:	mov	r2, r5
   2ee74:	mov	r4, r3
   2ee78:	bl	466fc <__assert_fail@plt+0x33c80>
   2ee7c:	subs	r0, r0, r6
   2ee80:	mov	r2, #0
   2ee84:	sbcs	r0, r1, r7
   2ee88:	movwcc	r2, #1
   2ee8c:	umull	r0, r1, r6, r5
   2ee90:	mla	r1, r6, r4, r1
   2ee94:	cmp	r2, #0
   2ee98:	mov	r3, r2
   2ee9c:	mla	r7, r7, r5, r1
   2eea0:	mvnne	r0, #0
   2eea4:	mvnne	r7, #0
   2eea8:	mov	r6, r0
   2eeac:	b	2f690 <__assert_fail@plt+0x1cc14>
   2eeb0:	mvn	r0, #0
   2eeb4:	mvn	r1, #0
   2eeb8:	mov	r2, r5
   2eebc:	str	r3, [sp, #24]
   2eec0:	bl	466fc <__assert_fail@plt+0x33c80>
   2eec4:	subs	r3, r0, r6
   2eec8:	mov	ip, r0
   2eecc:	umull	r4, r0, r6, r5
   2eed0:	mov	sl, #0
   2eed4:	sbcs	r3, r1, r7
   2eed8:	str	r0, [sp, #20]
   2eedc:	ldr	r0, [sp, #24]
   2eee0:	mov	r3, #0
   2eee4:	movwcc	r3, #1
   2eee8:	cmp	r3, #0
   2eeec:	mvnne	r4, #0
   2eef0:	cmp	r3, #0
   2eef4:	umull	lr, r2, r4, r5
   2eef8:	mla	r2, r4, r0, r2
   2eefc:	str	r2, [sp, #16]
   2ef00:	ldr	r2, [sp, #20]
   2ef04:	mla	r6, r6, r0, r2
   2ef08:	ldr	r0, [sp, #16]
   2ef0c:	mla	r6, r7, r5, r6
   2ef10:	mvnne	r6, #0
   2ef14:	mla	r7, r6, r5, r0
   2ef18:	subs	r0, ip, r4
   2ef1c:	sbcs	r0, r1, r6
   2ef20:	movwcc	sl, #1
   2ef24:	cmp	sl, #0
   2ef28:	orr	r3, r3, sl
   2ef2c:	mvnne	lr, #0
   2ef30:	mvnne	r7, #0
   2ef34:	mov	r6, lr
   2ef38:	b	2f690 <__assert_fail@plt+0x1cc14>
   2ef3c:	mvn	r0, #0
   2ef40:	mvn	r1, #0
   2ef44:	mov	r2, r5
   2ef48:	mov	sl, r3
   2ef4c:	bl	466fc <__assert_fail@plt+0x33c80>
   2ef50:	subs	r3, r0, r6
   2ef54:	mov	ip, r1
   2ef58:	umull	r2, lr, r6, r5
   2ef5c:	str	r0, [sp, #20]
   2ef60:	sbcs	r3, r1, r7
   2ef64:	mov	r1, #0
   2ef68:	mla	r6, r6, sl, lr
   2ef6c:	mov	lr, #0
   2ef70:	str	ip, [sp, #16]
   2ef74:	movwcc	r1, #1
   2ef78:	mla	r7, r7, r5, r6
   2ef7c:	cmp	r1, #0
   2ef80:	mvnne	r2, #0
   2ef84:	cmp	r1, #0
   2ef88:	umull	r3, r4, r2, r5
   2ef8c:	mvnne	r7, #0
   2ef90:	mla	r4, r2, sl, r4
   2ef94:	subs	r2, r0, r2
   2ef98:	sbcs	r2, ip, r7
   2ef9c:	mla	r4, r7, r5, r4
   2efa0:	movwcc	lr, #1
   2efa4:	mov	r2, #0
   2efa8:	cmp	lr, #0
   2efac:	mvnne	r3, #0
   2efb0:	mvnne	r4, #0
   2efb4:	subs	r7, r0, r3
   2efb8:	mov	r0, r5
   2efbc:	sbcs	r7, ip, r4
   2efc0:	movwcc	r2, #1
   2efc4:	umull	r5, r7, r3, r5
   2efc8:	cmp	r2, #0
   2efcc:	mla	r3, r3, sl, r7
   2efd0:	mvnne	r5, #0
   2efd4:	mla	r3, r4, r0, r3
   2efd8:	cmp	r2, #0
   2efdc:	umull	r6, ip, r5, r0
   2efe0:	mvnne	r3, #0
   2efe4:	mla	ip, r5, sl, ip
   2efe8:	mla	r7, r3, r0, ip
   2efec:	ldr	r0, [sp, #20]
   2eff0:	subs	r0, r0, r5
   2eff4:	ldr	r0, [sp, #16]
   2eff8:	sbcs	r0, r0, r3
   2effc:	mov	r0, #0
   2f000:	movwcc	r0, #1
   2f004:	cmp	r0, #0
   2f008:	mov	r3, r0
   2f00c:	orr	r0, r1, lr
   2f010:	orr	r0, r0, r2
   2f014:	mvnne	r7, #0
   2f018:	mvnne	r6, #0
   2f01c:	orr	r3, r0, r3
   2f020:	b	2f690 <__assert_fail@plt+0x1cc14>
   2f024:	mvn	r0, #0
   2f028:	mvn	r1, #0
   2f02c:	mov	r2, r5
   2f030:	mov	r4, r3
   2f034:	str	r3, [sp, #24]
   2f038:	bl	466fc <__assert_fail@plt+0x33c80>
   2f03c:	umull	r3, r2, r6, r5
   2f040:	mla	r2, r6, r4, r2
   2f044:	subs	r6, r0, r6
   2f048:	sbcs	r6, r1, r7
   2f04c:	mla	r2, r7, r5, r2
   2f050:	mov	r7, #0
   2f054:	mov	r6, #0
   2f058:	movwcc	r6, #1
   2f05c:	cmp	r6, #0
   2f060:	str	r6, [sp, #20]
   2f064:	mvnne	r3, #0
   2f068:	mvnne	r2, #0
   2f06c:	subs	r4, r0, r3
   2f070:	umull	r6, ip, r3, r5
   2f074:	sbcs	r4, r1, r2
   2f078:	ldr	r4, [sp, #24]
   2f07c:	movwcc	r7, #1
   2f080:	cmp	r7, #0
   2f084:	mov	lr, r7
   2f088:	str	r7, [sp, #16]
   2f08c:	mvnne	r6, #0
   2f090:	cmp	lr, #0
   2f094:	mov	lr, #0
   2f098:	umull	sl, r7, r6, r5
   2f09c:	mla	r3, r3, r4, ip
   2f0a0:	mla	r7, r6, r4, r7
   2f0a4:	mov	r4, r0
   2f0a8:	mla	r2, r2, r5, r3
   2f0ac:	mvnne	r2, #0
   2f0b0:	subs	r3, r0, r6
   2f0b4:	mov	r0, #0
   2f0b8:	mla	r7, r2, r5, r7
   2f0bc:	sbcs	r2, r1, r2
   2f0c0:	mov	r3, r4
   2f0c4:	movwcc	r0, #1
   2f0c8:	str	r3, [sp, #4]
   2f0cc:	cmp	r0, #0
   2f0d0:	str	r0, [sp, #12]
   2f0d4:	mov	r0, r1
   2f0d8:	mvnne	sl, #0
   2f0dc:	mvnne	r7, #0
   2f0e0:	str	r0, [sp, #8]
   2f0e4:	subs	r2, r4, sl
   2f0e8:	ldr	r4, [sp, #24]
   2f0ec:	sbcs	r2, r1, r7
   2f0f0:	movwcc	lr, #1
   2f0f4:	umull	r6, r2, sl, r5
   2f0f8:	cmp	lr, #0
   2f0fc:	mvnne	r6, #0
   2f100:	mla	r2, sl, r4, r2
   2f104:	cmp	lr, #0
   2f108:	umull	r1, ip, r6, r5
   2f10c:	mla	r2, r7, r5, r2
   2f110:	mla	ip, r6, r4, ip
   2f114:	mvnne	r2, #0
   2f118:	subs	r6, r3, r6
   2f11c:	mla	r7, r2, r5, ip
   2f120:	sbcs	r2, r0, r2
   2f124:	mov	ip, #0
   2f128:	movwcc	ip, #1
   2f12c:	mov	r2, #0
   2f130:	cmp	ip, #0
   2f134:	mvnne	r1, #0
   2f138:	mvnne	r7, #0
   2f13c:	subs	r6, r3, r1
   2f140:	ldr	r3, [sp, #24]
   2f144:	sbcs	r6, r0, r7
   2f148:	umull	r0, sl, r1, r5
   2f14c:	movwcc	r2, #1
   2f150:	cmp	r2, #0
   2f154:	mvnne	r0, #0
   2f158:	mla	r1, r1, r3, sl
   2f15c:	cmp	r2, #0
   2f160:	umull	r6, r4, r0, r5
   2f164:	mla	r1, r7, r5, r1
   2f168:	mla	r4, r0, r3, r4
   2f16c:	ldr	r3, [sp, #4]
   2f170:	mvnne	r1, #0
   2f174:	mla	r7, r1, r5, r4
   2f178:	ldr	r5, [sp, #16]
   2f17c:	subs	r0, r3, r0
   2f180:	ldr	r0, [sp, #8]
   2f184:	sbcs	r0, r0, r1
   2f188:	mov	r0, #0
   2f18c:	movwcc	r0, #1
   2f190:	cmp	r0, #0
   2f194:	mov	r1, r0
   2f198:	ldr	r0, [sp, #20]
   2f19c:	mvnne	r7, #0
   2f1a0:	mvnne	r6, #0
   2f1a4:	orr	r0, r0, r5
   2f1a8:	ldr	r5, [sp, #12]
   2f1ac:	orr	r0, r0, r5
   2f1b0:	orr	r0, r0, lr
   2f1b4:	orr	r0, r0, ip
   2f1b8:	orr	r0, r0, r2
   2f1bc:	b	2f62c <__assert_fail@plt+0x1cbb0>
   2f1c0:	mov	r1, #0
   2f1c4:	lsl	r2, r7, #10
   2f1c8:	lsl	r0, r6, #10
   2f1cc:	lsr	r3, r7, #22
   2f1d0:	cmp	r1, r7, lsr #22
   2f1d4:	orr	r2, r2, r6, lsr #22
   2f1d8:	mvnne	r0, #0
   2f1dc:	movwne	r3, #1
   2f1e0:	cmp	r1, r7, lsr #22
   2f1e4:	b	2f65c <__assert_fail@plt+0x1cbe0>
   2f1e8:	mvn	r0, #0
   2f1ec:	mvn	r1, #0
   2f1f0:	mov	r2, r5
   2f1f4:	mov	sl, r3
   2f1f8:	bl	466fc <__assert_fail@plt+0x33c80>
   2f1fc:	subs	r2, r0, r6
   2f200:	mov	ip, r0
   2f204:	mov	r0, #0
   2f208:	sbcs	r2, r1, r7
   2f20c:	movwcc	r0, #1
   2f210:	umull	r4, r2, r6, r5
   2f214:	cmp	r0, #0
   2f218:	mla	r2, r6, sl, r2
   2f21c:	str	r0, [sp, #20]
   2f220:	mvnne	r4, #0
   2f224:	cmp	r0, #0
   2f228:	mla	r2, r7, r5, r2
   2f22c:	mov	r0, #0
   2f230:	umull	lr, r3, r4, r5
   2f234:	mvnne	r2, #0
   2f238:	mla	r3, r4, sl, r3
   2f23c:	mla	r6, r2, r5, r3
   2f240:	subs	r3, ip, r4
   2f244:	sbcs	r2, r1, r2
   2f248:	mov	r3, r1
   2f24c:	movwcc	r0, #1
   2f250:	str	r3, [sp, #8]
   2f254:	cmp	r0, #0
   2f258:	str	r0, [sp, #16]
   2f25c:	mov	r0, ip
   2f260:	mvnne	lr, #0
   2f264:	mvnne	r6, #0
   2f268:	str	r0, [sp, #12]
   2f26c:	subs	r2, ip, lr
   2f270:	umull	r7, r4, lr, r5
   2f274:	sbcs	r2, r1, r6
   2f278:	mla	r4, lr, sl, r4
   2f27c:	mov	r2, #0
   2f280:	mla	r6, r6, r5, r4
   2f284:	mov	r4, #0
   2f288:	movwcc	r2, #1
   2f28c:	cmp	r2, #0
   2f290:	mvnne	r7, #0
   2f294:	cmp	r2, #0
   2f298:	umull	r1, ip, r7, r5
   2f29c:	mvnne	r6, #0
   2f2a0:	mla	ip, r7, sl, ip
   2f2a4:	subs	r7, r0, r7
   2f2a8:	mla	lr, r6, r5, ip
   2f2ac:	sbcs	r7, r3, r6
   2f2b0:	mov	ip, #0
   2f2b4:	movwcc	ip, #1
   2f2b8:	cmp	ip, #0
   2f2bc:	mvnne	r1, #0
   2f2c0:	mvnne	lr, #0
   2f2c4:	subs	r7, r0, r1
   2f2c8:	sbcs	r7, r3, lr
   2f2cc:	movwcc	r4, #1
   2f2d0:	umull	r0, r7, r1, r5
   2f2d4:	cmp	r4, #0
   2f2d8:	mla	r1, r1, sl, r7
   2f2dc:	mvnne	r0, #0
   2f2e0:	mla	r1, lr, r5, r1
   2f2e4:	cmp	r4, #0
   2f2e8:	umull	r6, r3, r0, r5
   2f2ec:	mvnne	r1, #0
   2f2f0:	mla	r3, r0, sl, r3
   2f2f4:	mla	r7, r1, r5, r3
   2f2f8:	ldr	r3, [sp, #12]
   2f2fc:	subs	r0, r3, r0
   2f300:	ldr	r3, [sp, #16]
   2f304:	ldr	r0, [sp, #8]
   2f308:	sbcs	r0, r0, r1
   2f30c:	mov	r0, #0
   2f310:	movwcc	r0, #1
   2f314:	cmp	r0, #0
   2f318:	mov	r1, r0
   2f31c:	ldr	r0, [sp, #20]
   2f320:	mvnne	r7, #0
   2f324:	mvnne	r6, #0
   2f328:	orr	r0, r0, r3
   2f32c:	orr	r0, r0, r2
   2f330:	orr	r0, r0, ip
   2f334:	orr	r0, r0, r4
   2f338:	b	2f45c <__assert_fail@plt+0x1c9e0>
   2f33c:	mvn	r0, #0
   2f340:	mvn	r1, #0
   2f344:	mov	r2, r5
   2f348:	mov	sl, r3
   2f34c:	bl	466fc <__assert_fail@plt+0x33c80>
   2f350:	umull	r3, r2, r6, r5
   2f354:	mov	lr, r1
   2f358:	mov	r1, r0
   2f35c:	mla	r2, r6, sl, r2
   2f360:	subs	r6, r0, r6
   2f364:	mov	r0, #0
   2f368:	sbcs	r6, lr, r7
   2f36c:	mla	r2, r7, r5, r2
   2f370:	movwcc	r0, #1
   2f374:	cmp	r0, #0
   2f378:	str	r0, [sp, #20]
   2f37c:	mov	r0, r1
   2f380:	mvnne	r3, #0
   2f384:	mvnne	r2, #0
   2f388:	str	r0, [sp, #16]
   2f38c:	subs	r4, r1, r3
   2f390:	umull	r7, ip, r3, r5
   2f394:	sbcs	r4, lr, r2
   2f398:	mla	r3, r3, sl, ip
   2f39c:	mov	ip, #0
   2f3a0:	mov	r4, #0
   2f3a4:	mla	r2, r2, r5, r3
   2f3a8:	movwcc	r4, #1
   2f3ac:	cmp	r4, #0
   2f3b0:	mvnne	r7, #0
   2f3b4:	cmp	r4, #0
   2f3b8:	umull	r1, r6, r7, r5
   2f3bc:	mvnne	r2, #0
   2f3c0:	mla	r6, r7, sl, r6
   2f3c4:	mla	r3, r2, r5, r6
   2f3c8:	subs	r6, r0, r7
   2f3cc:	sbcs	r2, lr, r2
   2f3d0:	movwcc	ip, #1
   2f3d4:	mov	r2, #0
   2f3d8:	cmp	ip, #0
   2f3dc:	mvnne	r1, #0
   2f3e0:	mvnne	r3, #0
   2f3e4:	subs	r6, r0, r1
   2f3e8:	sbcs	r6, lr, r3
   2f3ec:	movwcc	r2, #1
   2f3f0:	umull	r0, r6, r1, r5
   2f3f4:	cmp	r2, #0
   2f3f8:	str	r6, [sp, #12]
   2f3fc:	mvnne	r0, #0
   2f400:	cmp	r2, #0
   2f404:	umull	r6, r7, r0, r5
   2f408:	mla	r7, r0, sl, r7
   2f40c:	str	r7, [sp, #8]
   2f410:	ldr	r7, [sp, #12]
   2f414:	mla	r1, r1, sl, r7
   2f418:	mla	r1, r3, r5, r1
   2f41c:	ldr	r3, [sp, #8]
   2f420:	mvnne	r1, #0
   2f424:	mla	r7, r1, r5, r3
   2f428:	ldr	r3, [sp, #16]
   2f42c:	subs	r0, r3, r0
   2f430:	sbcs	r0, lr, r1
   2f434:	mov	r0, #0
   2f438:	movwcc	r0, #1
   2f43c:	cmp	r0, #0
   2f440:	mov	r1, r0
   2f444:	ldr	r0, [sp, #20]
   2f448:	mvnne	r7, #0
   2f44c:	mvnne	r6, #0
   2f450:	orr	r0, r0, r4
   2f454:	orr	r0, r0, ip
   2f458:	orr	r0, r0, r2
   2f45c:	orr	r3, r0, r1
   2f460:	b	2f690 <__assert_fail@plt+0x1cc14>
   2f464:	mvn	r0, #0
   2f468:	mvn	r1, #0
   2f46c:	mov	r2, r5
   2f470:	mov	sl, r3
   2f474:	bl	466fc <__assert_fail@plt+0x33c80>
   2f478:	mov	ip, r1
   2f47c:	subs	r1, r0, r6
   2f480:	umull	r3, lr, r6, r5
   2f484:	mov	r2, r5
   2f488:	sbcs	r1, ip, r7
   2f48c:	mla	r6, r6, sl, lr
   2f490:	str	ip, [sp, #4]
   2f494:	mov	r1, #0
   2f498:	mla	r7, r7, r2, r6
   2f49c:	movwcc	r1, #1
   2f4a0:	cmp	r1, #0
   2f4a4:	str	r1, [sp, #20]
   2f4a8:	mvnne	r3, #0
   2f4ac:	cmp	r1, #0
   2f4b0:	mov	r1, r0
   2f4b4:	umull	r4, r5, r3, r5
   2f4b8:	mvnne	r7, #0
   2f4bc:	mov	lr, r1
   2f4c0:	mla	r5, r3, sl, r5
   2f4c4:	subs	r3, r0, r3
   2f4c8:	sbcs	r0, ip, r7
   2f4cc:	mla	r5, r7, r2, r5
   2f4d0:	mov	r0, #0
   2f4d4:	movwcc	r0, #1
   2f4d8:	cmp	r0, #0
   2f4dc:	str	r0, [sp, #16]
   2f4e0:	mvnne	r4, #0
   2f4e4:	mvnne	r5, #0
   2f4e8:	subs	r0, r1, r4
   2f4ec:	mov	r1, #0
   2f4f0:	sbcs	r0, ip, r5
   2f4f4:	movwcc	r1, #1
   2f4f8:	umull	r3, r0, r4, r2
   2f4fc:	cmp	r1, #0
   2f500:	mla	r0, r4, sl, r0
   2f504:	mov	r4, lr
   2f508:	str	r1, [sp, #12]
   2f50c:	mvnne	r3, #0
   2f510:	mla	r0, r5, r2, r0
   2f514:	cmp	r1, #0
   2f518:	str	r4, [sp]
   2f51c:	umull	r7, r6, r3, r2
   2f520:	mvnne	r0, #0
   2f524:	mla	r6, r3, sl, r6
   2f528:	subs	r3, lr, r3
   2f52c:	mla	r5, r0, r2, r6
   2f530:	sbcs	r0, ip, r0
   2f534:	mov	r3, #0
   2f538:	mov	r0, #0
   2f53c:	movwcc	r0, #1
   2f540:	cmp	r0, #0
   2f544:	str	r0, [sp, #8]
   2f548:	mvnne	r7, #0
   2f54c:	mvnne	r5, #0
   2f550:	subs	r0, lr, r7
   2f554:	sbcs	r0, ip, r5
   2f558:	movwcc	r3, #1
   2f55c:	umull	r6, r0, r7, r2
   2f560:	cmp	r3, #0
   2f564:	mla	r7, r7, sl, r0
   2f568:	mov	r0, ip
   2f56c:	mvnne	r6, #0
   2f570:	mla	r7, r5, r2, r7
   2f574:	cmp	r3, #0
   2f578:	mov	r5, #0
   2f57c:	umull	r1, lr, r6, r2
   2f580:	mvnne	r7, #0
   2f584:	mla	lr, r6, sl, lr
   2f588:	subs	r6, r4, r6
   2f58c:	mla	lr, r7, r2, lr
   2f590:	sbcs	r7, ip, r7
   2f594:	mov	ip, #0
   2f598:	movwcc	ip, #1
   2f59c:	cmp	ip, #0
   2f5a0:	mvnne	r1, #0
   2f5a4:	mvnne	lr, #0
   2f5a8:	subs	r7, r4, r1
   2f5ac:	sbcs	r7, r0, lr
   2f5b0:	movwcc	r5, #1
   2f5b4:	umull	r0, r7, r1, r2
   2f5b8:	cmp	r5, #0
   2f5bc:	mla	r1, r1, sl, r7
   2f5c0:	mvnne	r0, #0
   2f5c4:	mla	r1, lr, r2, r1
   2f5c8:	cmp	r5, #0
   2f5cc:	umull	r6, r4, r0, r2
   2f5d0:	mvnne	r1, #0
   2f5d4:	mla	r4, r0, sl, r4
   2f5d8:	mla	r7, r1, r2, r4
   2f5dc:	ldr	r2, [sp]
   2f5e0:	subs	r0, r2, r0
   2f5e4:	ldr	r2, [sp, #16]
   2f5e8:	ldr	r0, [sp, #4]
   2f5ec:	sbcs	r0, r0, r1
   2f5f0:	mov	r0, #0
   2f5f4:	movwcc	r0, #1
   2f5f8:	cmp	r0, #0
   2f5fc:	mov	r1, r0
   2f600:	ldr	r0, [sp, #20]
   2f604:	mvnne	r7, #0
   2f608:	mvnne	r6, #0
   2f60c:	orr	r0, r0, r2
   2f610:	ldr	r2, [sp, #12]
   2f614:	orr	r0, r0, r2
   2f618:	ldr	r2, [sp, #8]
   2f61c:	orr	r0, r0, r2
   2f620:	orr	r0, r0, r3
   2f624:	orr	r0, r0, ip
   2f628:	orr	r0, r0, r5
   2f62c:	orr	r0, r0, r1
   2f630:	and	r3, r0, #1
   2f634:	b	2f690 <__assert_fail@plt+0x1cc14>
   2f638:	mov	r1, #0
   2f63c:	lsl	r2, r7, #9
   2f640:	lsl	r0, r6, #9
   2f644:	lsr	r3, r7, #23
   2f648:	cmp	r1, r7, lsr #23
   2f64c:	orr	r2, r2, r6, lsr #23
   2f650:	mvnne	r0, #0
   2f654:	movwne	r3, #1
   2f658:	cmp	r1, r7, lsr #23
   2f65c:	mvnne	r2, #0
   2f660:	mov	r6, r0
   2f664:	mov	r7, r2
   2f668:	b	2f690 <__assert_fail@plt+0x1cc14>
   2f66c:	lsl	r1, r7, #1
   2f670:	lsl	r0, r6, #1
   2f674:	cmp	r7, #0
   2f678:	lsr	r3, r7, #31
   2f67c:	orr	r1, r1, r6, lsr #31
   2f680:	mvnlt	r0, #0
   2f684:	mvnlt	r1, #0
   2f688:	mov	r6, r0
   2f68c:	mov	r7, r1
   2f690:	ldr	r1, [sp, #32]
   2f694:	ldr	r2, [sp, #28]
   2f698:	orr	r8, r3, r8
   2f69c:	add	r0, r1, r2
   2f6a0:	str	r0, [r9]
   2f6a4:	ldrb	r0, [r1, r2]
   2f6a8:	cmp	r0, #0
   2f6ac:	orrne	r8, r8, #2
   2f6b0:	ldr	r0, [sp, #36]	; 0x24
   2f6b4:	strd	r6, [r0]
   2f6b8:	mov	r0, r8
   2f6bc:	sub	sp, fp, #28
   2f6c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f6c4:	movw	r0, #50839	; 0xc697
   2f6c8:	movw	r1, #50877	; 0xc6bd
   2f6cc:	movw	r3, #50970	; 0xc71a
   2f6d0:	mov	r2, #84	; 0x54
   2f6d4:	movt	r0, #4
   2f6d8:	movt	r1, #4
   2f6dc:	movt	r3, #4
   2f6e0:	bl	12a7c <__assert_fail@plt>
   2f6e4:	push	{r4, sl, fp, lr}
   2f6e8:	add	fp, sp, #8
   2f6ec:	sub	sp, sp, #8
   2f6f0:	movw	r0, #54608	; 0xd550
   2f6f4:	mov	r4, #0
   2f6f8:	mov	r1, sp
   2f6fc:	mov	r2, #10
   2f700:	movt	r0, #5
   2f704:	str	r4, [sp, #4]
   2f708:	str	r4, [sp]
   2f70c:	ldr	r3, [r0]
   2f710:	add	r0, sp, #4
   2f714:	bl	123a4 <__getdelim@plt>
   2f718:	cmp	r0, #1
   2f71c:	blt	2f74c <__assert_fail@plt+0x1ccd0>
   2f720:	sub	r1, r0, #1
   2f724:	ldr	r0, [sp, #4]
   2f728:	ldrb	r2, [r0, r1]
   2f72c:	cmp	r2, #10
   2f730:	moveq	r2, #0
   2f734:	strbeq	r2, [r0, r1]
   2f738:	ldreq	r0, [sp, #4]
   2f73c:	bl	128c0 <rpmatch@plt>
   2f740:	mov	r4, #0
   2f744:	cmp	r0, #0
   2f748:	movwgt	r4, #1
   2f74c:	ldr	r0, [sp, #4]
   2f750:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   2f754:	mov	r0, r4
   2f758:	sub	sp, fp, #8
   2f75c:	pop	{r4, sl, fp, pc}
   2f760:	clz	r2, r1
   2f764:	clz	r3, r0
   2f768:	lsr	r2, r2, #5
   2f76c:	lsr	r3, r3, #5
   2f770:	orrs	r2, r3, r2
   2f774:	movwne	r1, #1
   2f778:	movwne	r0, #1
   2f77c:	cmp	r1, #0
   2f780:	beq	2f7b0 <__assert_fail@plt+0x1cd34>
   2f784:	mvn	r2, #-2147483648	; 0x80000000
   2f788:	udiv	r2, r2, r1
   2f78c:	cmp	r2, r0
   2f790:	bcs	2f7b0 <__assert_fail@plt+0x1cd34>
   2f794:	push	{fp, lr}
   2f798:	mov	fp, sp
   2f79c:	bl	127d0 <__errno_location@plt>
   2f7a0:	mov	r1, #12
   2f7a4:	str	r1, [r0]
   2f7a8:	mov	r0, #0
   2f7ac:	pop	{fp, pc}
   2f7b0:	b	1235c <calloc@plt>
   2f7b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f7b8:	add	fp, sp, #28
   2f7bc:	sub	sp, sp, #4
   2f7c0:	mov	r4, r0
   2f7c4:	bl	125a8 <chdir@plt>
   2f7c8:	cmp	r0, #0
   2f7cc:	beq	2f890 <__assert_fail@plt+0x1ce14>
   2f7d0:	mov	r6, r0
   2f7d4:	bl	127d0 <__errno_location@plt>
   2f7d8:	mov	r9, r0
   2f7dc:	ldr	r0, [r0]
   2f7e0:	cmp	r0, #36	; 0x24
   2f7e4:	bne	2fa64 <__assert_fail@plt+0x1cfe8>
   2f7e8:	mov	r0, r4
   2f7ec:	bl	12788 <strlen@plt>
   2f7f0:	cmp	r0, #0
   2f7f4:	beq	2fab0 <__assert_fail@plt+0x1d034>
   2f7f8:	mov	r7, r0
   2f7fc:	mov	r0, #0
   2f800:	cmp	r0, r7, lsr #12
   2f804:	beq	2fad0 <__assert_fail@plt+0x1d054>
   2f808:	movw	r1, #29730	; 0x7422
   2f80c:	mov	r0, r4
   2f810:	movt	r1, #4
   2f814:	bl	12a70 <strspn@plt>
   2f818:	cmp	r0, #0
   2f81c:	beq	2f898 <__assert_fail@plt+0x1ce1c>
   2f820:	mov	r6, r0
   2f824:	cmp	r0, #2
   2f828:	bne	2f8a4 <__assert_fail@plt+0x1ce28>
   2f82c:	add	r0, r4, #3
   2f830:	sub	r2, r7, #3
   2f834:	mov	r1, #47	; 0x2f
   2f838:	mov	r8, #47	; 0x2f
   2f83c:	bl	12860 <memchr@plt>
   2f840:	cmp	r0, #0
   2f844:	beq	2fa10 <__assert_fail@plt+0x1cf94>
   2f848:	mov	r6, r0
   2f84c:	mov	r0, #0
   2f850:	mov	r1, r4
   2f854:	mov	r2, #18688	; 0x4900
   2f858:	strb	r0, [r6]
   2f85c:	mvn	r0, #99	; 0x63
   2f860:	bl	127ac <openat64@plt>
   2f864:	cmp	r0, #0
   2f868:	strb	r8, [r6]
   2f86c:	blt	2fa08 <__assert_fail@plt+0x1cf8c>
   2f870:	movw	r1, #29730	; 0x7422
   2f874:	add	r6, r6, #1
   2f878:	mov	r5, r0
   2f87c:	movt	r1, #4
   2f880:	mov	r0, r6
   2f884:	bl	12a70 <strspn@plt>
   2f888:	add	r6, r6, r0
   2f88c:	b	2f8c8 <__assert_fail@plt+0x1ce4c>
   2f890:	mov	r6, #0
   2f894:	b	2fa64 <__assert_fail@plt+0x1cfe8>
   2f898:	mvn	r5, #99	; 0x63
   2f89c:	mov	r6, r4
   2f8a0:	b	2f8c8 <__assert_fail@plt+0x1ce4c>
   2f8a4:	movw	r1, #29730	; 0x7422
   2f8a8:	mvn	r0, #99	; 0x63
   2f8ac:	mov	r2, #18688	; 0x4900
   2f8b0:	movt	r1, #4
   2f8b4:	bl	127ac <openat64@plt>
   2f8b8:	cmp	r0, #0
   2f8bc:	blt	2fa08 <__assert_fail@plt+0x1cf8c>
   2f8c0:	mov	r5, r0
   2f8c4:	add	r6, r4, r6
   2f8c8:	ldrb	r0, [r6]
   2f8cc:	cmp	r0, #47	; 0x2f
   2f8d0:	beq	2faf0 <__assert_fail@plt+0x1d074>
   2f8d4:	add	sl, r4, r7
   2f8d8:	cmp	r6, sl
   2f8dc:	bhi	2fb10 <__assert_fail@plt+0x1d094>
   2f8e0:	sub	r0, sl, r6
   2f8e4:	str	r9, [sp]
   2f8e8:	cmp	r0, #4096	; 0x1000
   2f8ec:	blt	2f9c4 <__assert_fail@plt+0x1cf48>
   2f8f0:	movw	r9, #29730	; 0x7422
   2f8f4:	mov	r8, #0
   2f8f8:	movt	r9, #4
   2f8fc:	mov	r0, r6
   2f900:	mov	r1, #47	; 0x2f
   2f904:	mov	r2, #4096	; 0x1000
   2f908:	bl	127b8 <memrchr@plt>
   2f90c:	cmp	r0, #0
   2f910:	beq	2fa1c <__assert_fail@plt+0x1cfa0>
   2f914:	mov	r4, r0
   2f918:	strb	r8, [r0], -r6
   2f91c:	cmp	r0, #4096	; 0x1000
   2f920:	bge	2fa70 <__assert_fail@plt+0x1cff4>
   2f924:	mov	r0, r5
   2f928:	mov	r1, r6
   2f92c:	mov	r2, #18688	; 0x4900
   2f930:	bl	127ac <openat64@plt>
   2f934:	cmp	r0, #0
   2f938:	blt	2fa2c <__assert_fail@plt+0x1cfb0>
   2f93c:	mov	r7, r0
   2f940:	cmp	r5, #0
   2f944:	blt	2f958 <__assert_fail@plt+0x1cedc>
   2f948:	mov	r0, r5
   2f94c:	bl	12a34 <close@plt>
   2f950:	cmp	r0, #0
   2f954:	bne	2fa90 <__assert_fail@plt+0x1d014>
   2f958:	mov	r0, #47	; 0x2f
   2f95c:	mov	r1, r9
   2f960:	strb	r0, [r4], #1
   2f964:	mov	r0, r4
   2f968:	bl	12a70 <strspn@plt>
   2f96c:	add	r6, r4, r0
   2f970:	mov	r5, r7
   2f974:	sub	r0, sl, r6
   2f978:	cmp	r0, #4096	; 0x1000
   2f97c:	bge	2f8fc <__assert_fail@plt+0x1ce80>
   2f980:	cmp	r6, sl
   2f984:	bcs	2f9d0 <__assert_fail@plt+0x1cf54>
   2f988:	mov	r0, r7
   2f98c:	mov	r1, r6
   2f990:	mov	r2, #18688	; 0x4900
   2f994:	bl	127ac <openat64@plt>
   2f998:	ldr	r9, [sp]
   2f99c:	cmp	r0, #0
   2f9a0:	blt	2fa3c <__assert_fail@plt+0x1cfc0>
   2f9a4:	mov	r5, r0
   2f9a8:	cmp	r7, #0
   2f9ac:	blt	2f9d8 <__assert_fail@plt+0x1cf5c>
   2f9b0:	mov	r0, r7
   2f9b4:	bl	12a34 <close@plt>
   2f9b8:	cmp	r0, #0
   2f9bc:	beq	2f9d8 <__assert_fail@plt+0x1cf5c>
   2f9c0:	b	2fa90 <__assert_fail@plt+0x1d014>
   2f9c4:	mov	r7, r5
   2f9c8:	cmp	r6, sl
   2f9cc:	bcc	2f988 <__assert_fail@plt+0x1cf0c>
   2f9d0:	ldr	r9, [sp]
   2f9d4:	mov	r5, r7
   2f9d8:	mov	r0, r5
   2f9dc:	bl	12980 <fchdir@plt>
   2f9e0:	cmp	r0, #0
   2f9e4:	bne	2fa40 <__assert_fail@plt+0x1cfc4>
   2f9e8:	mov	r6, #0
   2f9ec:	cmp	r5, #0
   2f9f0:	blt	2fa64 <__assert_fail@plt+0x1cfe8>
   2f9f4:	mov	r0, r5
   2f9f8:	bl	12a34 <close@plt>
   2f9fc:	cmp	r0, #0
   2fa00:	beq	2fa64 <__assert_fail@plt+0x1cfe8>
   2fa04:	b	2fa90 <__assert_fail@plt+0x1d014>
   2fa08:	ldr	r4, [r9]
   2fa0c:	b	2fa5c <__assert_fail@plt+0x1cfe0>
   2fa10:	mov	r0, #36	; 0x24
   2fa14:	str	r0, [r9]
   2fa18:	b	2fa60 <__assert_fail@plt+0x1cfe4>
   2fa1c:	ldr	r1, [sp]
   2fa20:	mov	r0, #36	; 0x24
   2fa24:	str	r0, [r1]
   2fa28:	b	2fa60 <__assert_fail@plt+0x1cfe4>
   2fa2c:	ldr	r9, [sp]
   2fa30:	mov	r0, #47	; 0x2f
   2fa34:	strb	r0, [r4]
   2fa38:	b	2fa40 <__assert_fail@plt+0x1cfc4>
   2fa3c:	mov	r5, r7
   2fa40:	ldr	r4, [r9]
   2fa44:	cmp	r5, #0
   2fa48:	blt	2fa5c <__assert_fail@plt+0x1cfe0>
   2fa4c:	mov	r0, r5
   2fa50:	bl	12a34 <close@plt>
   2fa54:	cmp	r0, #0
   2fa58:	bne	2fa90 <__assert_fail@plt+0x1d014>
   2fa5c:	str	r4, [r9]
   2fa60:	mvn	r6, #0
   2fa64:	mov	r0, r6
   2fa68:	sub	sp, fp, #28
   2fa6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fa70:	movw	r0, #51132	; 0xc7bc
   2fa74:	movw	r1, #51057	; 0xc771
   2fa78:	movw	r3, #51070	; 0xc77e
   2fa7c:	mov	r2, #179	; 0xb3
   2fa80:	movt	r0, #4
   2fa84:	movt	r1, #4
   2fa88:	movt	r3, #4
   2fa8c:	bl	12a7c <__assert_fail@plt>
   2fa90:	movw	r0, #51151	; 0xc7cf
   2fa94:	movw	r1, #51057	; 0xc771
   2fa98:	movw	r3, #51164	; 0xc7dc
   2fa9c:	mov	r2, #64	; 0x40
   2faa0:	movt	r0, #4
   2faa4:	movt	r1, #4
   2faa8:	movt	r3, #4
   2faac:	bl	12a7c <__assert_fail@plt>
   2fab0:	movw	r0, #51049	; 0xc769
   2fab4:	movw	r1, #51057	; 0xc771
   2fab8:	movw	r3, #51070	; 0xc77e
   2fabc:	mov	r2, #126	; 0x7e
   2fac0:	movt	r0, #4
   2fac4:	movt	r1, #4
   2fac8:	movt	r3, #4
   2facc:	bl	12a7c <__assert_fail@plt>
   2fad0:	movw	r0, #51093	; 0xc795
   2fad4:	movw	r1, #51057	; 0xc771
   2fad8:	movw	r3, #51070	; 0xc77e
   2fadc:	mov	r2, #127	; 0x7f
   2fae0:	movt	r0, #4
   2fae4:	movt	r1, #4
   2fae8:	movt	r3, #4
   2faec:	bl	12a7c <__assert_fail@plt>
   2faf0:	movw	r0, #51105	; 0xc7a1
   2faf4:	movw	r1, #51057	; 0xc771
   2faf8:	movw	r3, #51070	; 0xc77e
   2fafc:	mov	r2, #162	; 0xa2
   2fb00:	movt	r0, #4
   2fb04:	movt	r1, #4
   2fb08:	movt	r3, #4
   2fb0c:	bl	12a7c <__assert_fail@plt>
   2fb10:	movw	r0, #51117	; 0xc7ad
   2fb14:	movw	r1, #51057	; 0xc771
   2fb18:	movw	r3, #51070	; 0xc77e
   2fb1c:	mov	r2, #163	; 0xa3
   2fb20:	movt	r0, #4
   2fb24:	movt	r1, #4
   2fb28:	movt	r3, #4
   2fb2c:	bl	12a7c <__assert_fail@plt>
   2fb30:	sub	sp, sp, #8
   2fb34:	push	{r4, r5, r6, r7, fp, lr}
   2fb38:	add	fp, sp, #16
   2fb3c:	sub	sp, sp, #8
   2fb40:	mov	r5, r0
   2fb44:	add	r0, fp, #8
   2fb48:	cmp	r1, #11
   2fb4c:	str	r3, [fp, #12]
   2fb50:	str	r2, [fp, #8]
   2fb54:	str	r0, [sp, #4]
   2fb58:	bhi	2fb94 <__assert_fail@plt+0x1d118>
   2fb5c:	mov	r0, #1
   2fb60:	movw	r2, #1300	; 0x514
   2fb64:	tst	r2, r0, lsl r1
   2fb68:	bne	2fc54 <__assert_fail@plt+0x1d1d8>
   2fb6c:	movw	r2, #2570	; 0xa0a
   2fb70:	tst	r2, r0, lsl r1
   2fb74:	bne	2fbbc <__assert_fail@plt+0x1d140>
   2fb78:	cmp	r1, #0
   2fb7c:	bne	2fb94 <__assert_fail@plt+0x1d118>
   2fb80:	ldr	r0, [sp, #4]
   2fb84:	add	r1, r0, #4
   2fb88:	str	r1, [sp, #4]
   2fb8c:	mov	r1, #0
   2fb90:	b	2fc60 <__assert_fail@plt+0x1d1e4>
   2fb94:	sub	r0, r1, #1024	; 0x400
   2fb98:	cmp	r0, #10
   2fb9c:	bhi	2fc54 <__assert_fail@plt+0x1d1d8>
   2fba0:	mov	r2, #1
   2fba4:	movw	r3, #645	; 0x285
   2fba8:	tst	r3, r2, lsl r0
   2fbac:	bne	2fc54 <__assert_fail@plt+0x1d1d8>
   2fbb0:	movw	r3, #1282	; 0x502
   2fbb4:	tst	r3, r2, lsl r0
   2fbb8:	beq	2fbc8 <__assert_fail@plt+0x1d14c>
   2fbbc:	mov	r0, r5
   2fbc0:	bl	128b4 <fcntl64@plt>
   2fbc4:	b	2fc6c <__assert_fail@plt+0x1d1f0>
   2fbc8:	cmp	r0, #6
   2fbcc:	bne	2fc54 <__assert_fail@plt+0x1d1d8>
   2fbd0:	ldr	r0, [sp, #4]
   2fbd4:	movw	r7, #56888	; 0xde38
   2fbd8:	movt	r7, #5
   2fbdc:	add	r1, r0, #4
   2fbe0:	str	r1, [sp, #4]
   2fbe4:	ldr	r6, [r0]
   2fbe8:	ldr	r0, [r7]
   2fbec:	cmp	r0, #0
   2fbf0:	blt	2fc90 <__assert_fail@plt+0x1d214>
   2fbf4:	mov	r0, r5
   2fbf8:	movw	r1, #1030	; 0x406
   2fbfc:	mov	r2, r6
   2fc00:	bl	128b4 <fcntl64@plt>
   2fc04:	mov	r4, r0
   2fc08:	cmn	r0, #1
   2fc0c:	bgt	2fc84 <__assert_fail@plt+0x1d208>
   2fc10:	bl	127d0 <__errno_location@plt>
   2fc14:	ldr	r0, [r0]
   2fc18:	cmp	r0, #22
   2fc1c:	bne	2fc84 <__assert_fail@plt+0x1d208>
   2fc20:	mov	r0, r5
   2fc24:	mov	r1, #0
   2fc28:	mov	r2, r6
   2fc2c:	bl	128b4 <fcntl64@plt>
   2fc30:	mov	r4, r0
   2fc34:	cmp	r0, #0
   2fc38:	blt	2fc70 <__assert_fail@plt+0x1d1f4>
   2fc3c:	mvn	r0, #0
   2fc40:	str	r0, [r7]
   2fc44:	mov	r0, #1
   2fc48:	cmp	r0, #0
   2fc4c:	bne	2fcbc <__assert_fail@plt+0x1d240>
   2fc50:	b	2fc70 <__assert_fail@plt+0x1d1f4>
   2fc54:	ldr	r0, [sp, #4]
   2fc58:	add	r2, r0, #4
   2fc5c:	str	r2, [sp, #4]
   2fc60:	ldr	r2, [r0]
   2fc64:	mov	r0, r5
   2fc68:	bl	128b4 <fcntl64@plt>
   2fc6c:	mov	r4, r0
   2fc70:	mov	r0, r4
   2fc74:	sub	sp, fp, #16
   2fc78:	pop	{r4, r5, r6, r7, fp, lr}
   2fc7c:	add	sp, sp, #8
   2fc80:	bx	lr
   2fc84:	mov	r0, #1
   2fc88:	str	r0, [r7]
   2fc8c:	b	2fc70 <__assert_fail@plt+0x1d1f4>
   2fc90:	mov	r0, r5
   2fc94:	mov	r1, #0
   2fc98:	mov	r2, r6
   2fc9c:	bl	128b4 <fcntl64@plt>
   2fca0:	mov	r4, r0
   2fca4:	ldr	r0, [r7]
   2fca8:	add	r0, r0, #1
   2fcac:	clz	r0, r0
   2fcb0:	lsr	r0, r0, #5
   2fcb4:	cmp	r0, #0
   2fcb8:	beq	2fc70 <__assert_fail@plt+0x1d1f4>
   2fcbc:	cmp	r4, #0
   2fcc0:	blt	2fc70 <__assert_fail@plt+0x1d1f4>
   2fcc4:	mov	r0, r4
   2fcc8:	mov	r1, #1
   2fccc:	bl	128b4 <fcntl64@plt>
   2fcd0:	cmp	r0, #0
   2fcd4:	blt	2fcf0 <__assert_fail@plt+0x1d274>
   2fcd8:	orr	r2, r0, #1
   2fcdc:	mov	r0, r4
   2fce0:	mov	r1, #2
   2fce4:	bl	128b4 <fcntl64@plt>
   2fce8:	cmn	r0, #1
   2fcec:	bne	2fc70 <__assert_fail@plt+0x1d1f4>
   2fcf0:	bl	127d0 <__errno_location@plt>
   2fcf4:	ldr	r6, [r0]
   2fcf8:	mov	r5, r0
   2fcfc:	mov	r0, r4
   2fd00:	bl	12a34 <close@plt>
   2fd04:	str	r6, [r5]
   2fd08:	mvn	r4, #0
   2fd0c:	b	2fc70 <__assert_fail@plt+0x1d1f4>
   2fd10:	push	{r4, sl, fp, lr}
   2fd14:	add	fp, sp, #8
   2fd18:	sub	sp, sp, #8
   2fd1c:	mov	r4, r0
   2fd20:	cmp	r0, #0
   2fd24:	beq	2fd40 <__assert_fail@plt+0x1d2c4>
   2fd28:	mov	r0, r4
   2fd2c:	bl	126f8 <__freading@plt>
   2fd30:	cmp	r0, #0
   2fd34:	ldrbne	r0, [r4, #1]
   2fd38:	tstne	r0, #1
   2fd3c:	bne	2fd50 <__assert_fail@plt+0x1d2d4>
   2fd40:	mov	r0, r4
   2fd44:	sub	sp, fp, #8
   2fd48:	pop	{r4, sl, fp, lr}
   2fd4c:	b	1241c <fflush@plt>
   2fd50:	mov	r0, #1
   2fd54:	mov	r2, #0
   2fd58:	mov	r3, #0
   2fd5c:	str	r0, [sp]
   2fd60:	mov	r0, r4
   2fd64:	bl	2fd94 <__assert_fail@plt+0x1d318>
   2fd68:	b	2fd40 <__assert_fail@plt+0x1d2c4>
   2fd6c:	push	{r4, r5, r6, sl, fp, lr}
   2fd70:	add	fp, sp, #16
   2fd74:	mov	r4, r0
   2fd78:	bl	127d0 <__errno_location@plt>
   2fd7c:	ldr	r6, [r0]
   2fd80:	mov	r5, r0
   2fd84:	mov	r0, r4
   2fd88:	bl	12458 <free@plt>
   2fd8c:	str	r6, [r5]
   2fd90:	pop	{r4, r5, r6, sl, fp, pc}
   2fd94:	push	{r4, r5, r6, r7, fp, lr}
   2fd98:	add	fp, sp, #16
   2fd9c:	sub	sp, sp, #8
   2fda0:	mov	r4, r0
   2fda4:	ldr	r0, [r0, #4]
   2fda8:	mov	r5, r3
   2fdac:	mov	r6, r2
   2fdb0:	ldr	r1, [r4, #8]
   2fdb4:	cmp	r1, r0
   2fdb8:	bne	2fdd4 <__assert_fail@plt+0x1d358>
   2fdbc:	ldrd	r0, [r4, #16]
   2fdc0:	cmp	r1, r0
   2fdc4:	bne	2fdd4 <__assert_fail@plt+0x1d358>
   2fdc8:	ldr	r0, [r4, #36]	; 0x24
   2fdcc:	cmp	r0, #0
   2fdd0:	beq	2fdec <__assert_fail@plt+0x1d370>
   2fdd4:	mov	r0, r4
   2fdd8:	mov	r2, r6
   2fddc:	mov	r3, r5
   2fde0:	sub	sp, fp, #16
   2fde4:	pop	{r4, r5, r6, r7, fp, lr}
   2fde8:	b	1289c <fseeko64@plt>
   2fdec:	ldr	r7, [fp, #8]
   2fdf0:	mov	r0, r4
   2fdf4:	bl	12848 <fileno@plt>
   2fdf8:	mov	r2, r6
   2fdfc:	mov	r3, r5
   2fe00:	str	r7, [sp]
   2fe04:	bl	12608 <lseek64@plt>
   2fe08:	and	r2, r0, r1
   2fe0c:	cmn	r2, #1
   2fe10:	mvneq	r0, #0
   2fe14:	subeq	sp, fp, #16
   2fe18:	popeq	{r4, r5, r6, r7, fp, pc}
   2fe1c:	strd	r0, [r4, #80]	; 0x50
   2fe20:	ldr	r0, [r4]
   2fe24:	bic	r0, r0, #16
   2fe28:	str	r0, [r4]
   2fe2c:	mov	r0, #0
   2fe30:	sub	sp, fp, #16
   2fe34:	pop	{r4, r5, r6, r7, fp, pc}
   2fe38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fe3c:	add	fp, sp, #28
   2fe40:	sub	sp, sp, #28
   2fe44:	cmp	r1, #4096	; 0x1000
   2fe48:	bcs	2fe64 <__assert_fail@plt+0x1d3e8>
   2fe4c:	mov	r7, r0
   2fe50:	and	r0, r1, #516	; 0x204
   2fe54:	mov	r5, r1
   2fe58:	cmp	r0, #516	; 0x204
   2fe5c:	tstne	r5, #18
   2fe60:	bne	2fe80 <__assert_fail@plt+0x1d404>
   2fe64:	bl	127d0 <__errno_location@plt>
   2fe68:	mov	r1, #22
   2fe6c:	mov	r4, #0
   2fe70:	str	r1, [r0]
   2fe74:	mov	r0, r4
   2fe78:	sub	sp, fp, #28
   2fe7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fe80:	mov	r0, #1
   2fe84:	mov	r1, #96	; 0x60
   2fe88:	mov	sl, r2
   2fe8c:	bl	2f760 <__assert_fail@plt+0x1cce4>
   2fe90:	cmp	r0, #0
   2fe94:	beq	30284 <__assert_fail@plt+0x1d808>
   2fe98:	mov	r4, r0
   2fe9c:	mvn	r0, #99	; 0x63
   2fea0:	tst	r5, #2
   2fea4:	mov	r1, r5
   2fea8:	str	r0, [r4, #32]
   2feac:	bic	r0, r5, #516	; 0x204
   2feb0:	str	sl, [r4, #44]	; 0x2c
   2feb4:	str	r4, [sp, #24]
   2feb8:	orrne	r1, r0, #4
   2febc:	str	r1, [r4, #48]	; 0x30
   2fec0:	ldr	r0, [r7]
   2fec4:	cmp	r0, #0
   2fec8:	beq	2ff00 <__assert_fail@plt+0x1d484>
   2fecc:	add	r6, r7, #4
   2fed0:	mov	r4, #0
   2fed4:	bl	12788 <strlen@plt>
   2fed8:	cmp	r0, r4
   2fedc:	movhi	r4, r0
   2fee0:	ldr	r0, [r6], #4
   2fee4:	cmp	r0, #0
   2fee8:	bne	2fed4 <__assert_fail@plt+0x1d458>
   2feec:	add	r0, r4, #1
   2fef0:	ldr	r4, [sp, #24]
   2fef4:	cmp	r0, #4096	; 0x1000
   2fef8:	movls	r0, #4096	; 0x1000
   2fefc:	b	2ff04 <__assert_fail@plt+0x1d488>
   2ff00:	mov	r0, #4096	; 0x1000
   2ff04:	ldr	r1, [r4, #36]	; 0x24
   2ff08:	add	r0, r0, #256	; 0x100
   2ff0c:	adds	r1, r0, r1
   2ff10:	bcc	2ff34 <__assert_fail@plt+0x1d4b8>
   2ff14:	ldr	r0, [r4, #24]
   2ff18:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   2ff1c:	mov	r0, #0
   2ff20:	str	r0, [r4, #24]
   2ff24:	bl	127d0 <__errno_location@plt>
   2ff28:	mov	r1, #36	; 0x24
   2ff2c:	str	r1, [r0]
   2ff30:	b	3027c <__assert_fail@plt+0x1d800>
   2ff34:	str	r1, [r4, #36]	; 0x24
   2ff38:	ldr	r0, [r4, #24]
   2ff3c:	bl	33040 <__assert_fail@plt+0x205c4>
   2ff40:	cmp	r0, #0
   2ff44:	beq	2ffa8 <__assert_fail@plt+0x1d52c>
   2ff48:	str	r0, [r4, #24]
   2ff4c:	ldr	r0, [r7]
   2ff50:	cmp	r0, #0
   2ff54:	beq	2ffbc <__assert_fail@plt+0x1d540>
   2ff58:	mov	r0, #176	; 0xb0
   2ff5c:	bl	3233c <__assert_fail@plt+0x1f8c0>
   2ff60:	cmp	r0, #0
   2ff64:	beq	30274 <__assert_fail@plt+0x1d7f8>
   2ff68:	ldr	r1, [r4, #24]
   2ff6c:	mov	r8, r0
   2ff70:	mov	r0, #0
   2ff74:	mov	r2, #196608	; 0x30000
   2ff78:	strb	r0, [r8, #168]	; 0xa8
   2ff7c:	str	r2, [r8, #58]	; 0x3a
   2ff80:	mvn	r2, #0
   2ff84:	str	r0, [r8, #12]
   2ff88:	str	r0, [r8, #16]
   2ff8c:	str	r0, [r8, #20]
   2ff90:	str	r4, [r8, #44]	; 0x2c
   2ff94:	str	r2, [r8, #48]	; 0x30
   2ff98:	str	r0, [r8, #52]	; 0x34
   2ff9c:	str	r1, [r8, #28]
   2ffa0:	str	r0, [r8, #32]
   2ffa4:	b	2ffc0 <__assert_fail@plt+0x1d544>
   2ffa8:	ldr	r0, [r4, #24]
   2ffac:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   2ffb0:	mov	r0, #0
   2ffb4:	str	r0, [r4, #24]
   2ffb8:	b	3027c <__assert_fail@plt+0x1d800>
   2ffbc:	mov	r8, #0
   2ffc0:	cmp	sl, #0
   2ffc4:	ldrbne	r0, [r4, #49]	; 0x31
   2ffc8:	ubfxne	r0, r0, #2, #1
   2ffcc:	ldr	r4, [r7]
   2ffd0:	moveq	r0, #1
   2ffd4:	cmp	r4, #0
   2ffd8:	beq	30144 <__assert_fail@plt+0x1d6c8>
   2ffdc:	eor	r0, r0, #1
   2ffe0:	and	r1, r5, #2048	; 0x800
   2ffe4:	mov	r9, #0
   2ffe8:	mov	r6, #0
   2ffec:	str	r8, [sp, #16]
   2fff0:	str	sl, [sp, #8]
   2fff4:	str	r0, [sp, #12]
   2fff8:	mov	r0, #0
   2fffc:	str	r1, [sp, #20]
   30000:	str	r0, [sp, #4]
   30004:	mov	r0, r4
   30008:	bl	12788 <strlen@plt>
   3000c:	mov	r8, r0
   30010:	ldr	r0, [sp, #20]
   30014:	cmp	r0, #0
   30018:	bne	30050 <__assert_fail@plt+0x1d5d4>
   3001c:	cmp	r8, #3
   30020:	bcc	30050 <__assert_fail@plt+0x1d5d4>
   30024:	add	r0, r4, r8
   30028:	ldrb	r0, [r0, #-1]
   3002c:	cmp	r0, #47	; 0x2f
   30030:	bne	30050 <__assert_fail@plt+0x1d5d4>
   30034:	sub	r0, r4, #2
   30038:	ldrb	r1, [r0, r8]
   3003c:	cmp	r1, #47	; 0x2f
   30040:	bne	30050 <__assert_fail@plt+0x1d5d4>
   30044:	sub	r8, r8, #1
   30048:	cmp	r8, #1
   3004c:	bhi	30038 <__assert_fail@plt+0x1d5bc>
   30050:	add	r0, r8, #176	; 0xb0
   30054:	bic	r0, r0, #7
   30058:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3005c:	cmp	r0, #0
   30060:	beq	30150 <__assert_fail@plt+0x1d6d4>
   30064:	add	sl, r0, #168	; 0xa8
   30068:	mov	r5, r0
   3006c:	mov	r1, r4
   30070:	mov	r2, r8
   30074:	mov	r0, sl
   30078:	bl	124b8 <memcpy@plt>
   3007c:	ldr	r0, [sp, #24]
   30080:	mov	r4, #0
   30084:	mov	r2, #196608	; 0x30000
   30088:	strb	r4, [sl, r8]
   3008c:	str	r2, [r5, #58]	; 0x3a
   30090:	add	r2, r5, #44	; 0x2c
   30094:	ldr	r1, [r0, #24]
   30098:	stm	r2, {r0, r4, r8}
   3009c:	ldr	r8, [sp, #16]
   300a0:	ldr	r2, [sp, #12]
   300a4:	str	r8, [r5, #4]
   300a8:	str	r4, [r5, #12]
   300ac:	str	r4, [r5, #16]
   300b0:	str	r4, [r5, #20]
   300b4:	str	sl, [r5, #24]
   300b8:	str	r1, [r5, #28]
   300bc:	clz	r1, r9
   300c0:	str	r4, [r5, #32]
   300c4:	lsr	r1, r1, #5
   300c8:	orrs	r1, r2, r1
   300cc:	bne	300e4 <__assert_fail@plt+0x1d668>
   300d0:	mov	r0, #2
   300d4:	str	r0, [r5, #112]	; 0x70
   300d8:	str	r4, [r5, #116]	; 0x74
   300dc:	mov	r0, #11
   300e0:	b	300f0 <__assert_fail@plt+0x1d674>
   300e4:	mov	r1, r5
   300e8:	mov	r2, #0
   300ec:	bl	30314 <__assert_fail@plt+0x1d898>
   300f0:	ldr	sl, [sp, #8]
   300f4:	strh	r0, [r5, #56]	; 0x38
   300f8:	cmp	sl, #0
   300fc:	beq	3010c <__assert_fail@plt+0x1d690>
   30100:	str	r9, [r5, #8]
   30104:	mov	r9, r5
   30108:	b	30124 <__assert_fail@plt+0x1d6a8>
   3010c:	cmp	r9, #0
   30110:	str	r4, [r5, #8]
   30114:	beq	30138 <__assert_fail@plt+0x1d6bc>
   30118:	ldr	r0, [sp, #4]
   3011c:	str	r5, [sp, #4]
   30120:	str	r5, [r0, #8]
   30124:	ldr	r4, [r7, #4]!
   30128:	add	r6, r6, #1
   3012c:	cmp	r4, #0
   30130:	bne	30004 <__assert_fail@plt+0x1d588>
   30134:	b	30160 <__assert_fail@plt+0x1d6e4>
   30138:	mov	r0, r5
   3013c:	str	r5, [sp, #4]
   30140:	b	30104 <__assert_fail@plt+0x1d688>
   30144:	ldr	r4, [sp, #24]
   30148:	mov	r9, #0
   3014c:	b	30190 <__assert_fail@plt+0x1d714>
   30150:	ldr	r8, [sp, #16]
   30154:	cmp	r9, #0
   30158:	bne	30240 <__assert_fail@plt+0x1d7c4>
   3015c:	b	30268 <__assert_fail@plt+0x1d7ec>
   30160:	cmp	sl, #0
   30164:	beq	3018c <__assert_fail@plt+0x1d710>
   30168:	ldr	r4, [sp, #24]
   3016c:	cmp	r6, #2
   30170:	bcc	30190 <__assert_fail@plt+0x1d714>
   30174:	mov	r0, r4
   30178:	mov	r1, r9
   3017c:	mov	r2, r6
   30180:	bl	304ac <__assert_fail@plt+0x1da30>
   30184:	mov	r9, r0
   30188:	b	30190 <__assert_fail@plt+0x1d714>
   3018c:	ldr	r4, [sp, #24]
   30190:	mov	r0, #176	; 0xb0
   30194:	bl	3233c <__assert_fail@plt+0x1f8c0>
   30198:	cmp	r0, #0
   3019c:	beq	30230 <__assert_fail@plt+0x1d7b4>
   301a0:	ldr	r2, [r4, #24]
   301a4:	mov	r1, #0
   301a8:	mov	r3, #196608	; 0x30000
   301ac:	str	r0, [r4]
   301b0:	str	r1, [r0, #52]	; 0x34
   301b4:	strb	r1, [r0, #168]	; 0xa8
   301b8:	str	r4, [r0, #44]	; 0x2c
   301bc:	str	r3, [r0, #58]	; 0x3a
   301c0:	str	r2, [r0, #28]
   301c4:	mov	r2, #9
   301c8:	str	r1, [r0, #32]
   301cc:	strh	r2, [r0, #56]	; 0x38
   301d0:	str	r9, [r0, #8]
   301d4:	str	r1, [r0, #12]
   301d8:	str	r1, [r0, #16]
   301dc:	str	r1, [r0, #20]
   301e0:	mov	r1, #1
   301e4:	str	r1, [r0, #48]	; 0x30
   301e8:	ldrh	r0, [r4, #48]	; 0x30
   301ec:	movw	r1, #258	; 0x102
   301f0:	tst	r0, r1
   301f4:	beq	3028c <__assert_fail@plt+0x1d810>
   301f8:	movw	r0, #64876	; 0xfd6c
   301fc:	movw	r2, #8152	; 0x1fd8
   30200:	movw	r3, #8184	; 0x1ff8
   30204:	mov	r1, #0
   30208:	movt	r0, #2
   3020c:	movt	r2, #3
   30210:	movt	r3, #3
   30214:	str	r0, [sp]
   30218:	mov	r0, #31
   3021c:	bl	23038 <__assert_fail@plt+0x105bc>
   30220:	cmp	r0, #0
   30224:	str	r0, [r4, #56]	; 0x38
   30228:	bne	302a4 <__assert_fail@plt+0x1d828>
   3022c:	b	30238 <__assert_fail@plt+0x1d7bc>
   30230:	mov	r0, #0
   30234:	str	r0, [r4]
   30238:	cmp	r9, #0
   3023c:	beq	30268 <__assert_fail@plt+0x1d7ec>
   30240:	ldrd	r4, [r9, #8]
   30244:	cmp	r5, #0
   30248:	beq	30254 <__assert_fail@plt+0x1d7d8>
   3024c:	mov	r0, r5
   30250:	bl	12a4c <closedir@plt>
   30254:	mov	r0, r9
   30258:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3025c:	cmp	r4, #0
   30260:	mov	r9, r4
   30264:	bne	30240 <__assert_fail@plt+0x1d7c4>
   30268:	mov	r0, r8
   3026c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   30270:	ldr	r4, [sp, #24]
   30274:	ldr	r0, [r4, #24]
   30278:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3027c:	mov	r0, r4
   30280:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   30284:	mov	r4, #0
   30288:	b	2fe74 <__assert_fail@plt+0x1d3f8>
   3028c:	mov	r0, #32
   30290:	bl	3233c <__assert_fail@plt+0x1f8c0>
   30294:	cmp	r0, #0
   30298:	str	r0, [r4, #56]	; 0x38
   3029c:	beq	30238 <__assert_fail@plt+0x1d7bc>
   302a0:	bl	45c28 <__assert_fail@plt+0x331ac>
   302a4:	ldr	r4, [sp, #24]
   302a8:	ldr	r0, [r4, #48]	; 0x30
   302ac:	tst	r0, #516	; 0x204
   302b0:	bne	30304 <__assert_fail@plt+0x1d888>
   302b4:	mov	r1, #32768	; 0x8000
   302b8:	tst	r0, #512	; 0x200
   302bc:	and	r1, r1, r0, lsl #11
   302c0:	orr	r1, r1, #18688	; 0x4900
   302c4:	orr	r2, r1, #524288	; 0x80000
   302c8:	bne	302e0 <__assert_fail@plt+0x1d864>
   302cc:	movw	r0, #31476	; 0x7af4
   302d0:	mov	r1, r2
   302d4:	movt	r0, #4
   302d8:	bl	22960 <__assert_fail@plt+0xfee4>
   302dc:	b	302f0 <__assert_fail@plt+0x1d874>
   302e0:	ldr	r0, [r4, #32]
   302e4:	movw	r1, #31476	; 0x7af4
   302e8:	movt	r1, #4
   302ec:	bl	26374 <__assert_fail@plt+0x138f8>
   302f0:	str	r0, [r4, #28]
   302f4:	cmn	r0, #1
   302f8:	ldrle	r0, [r4, #48]	; 0x30
   302fc:	orrle	r0, r0, #4
   30300:	strle	r0, [r4, #48]	; 0x30
   30304:	add	r0, r4, #60	; 0x3c
   30308:	mvn	r1, #0
   3030c:	bl	45e64 <__assert_fail@plt+0x333e8>
   30310:	b	2fe74 <__assert_fail@plt+0x1d3f8>
   30314:	push	{r4, r5, r6, sl, fp, lr}
   30318:	add	fp, sp, #16
   3031c:	sub	sp, sp, #8
   30320:	mov	r4, r1
   30324:	ldr	r1, [r0, #48]	; 0x30
   30328:	ldr	r3, [r4, #48]	; 0x30
   3032c:	add	r5, r4, #64	; 0x40
   30330:	cmp	r3, #0
   30334:	andeq	r3, r1, #1
   30338:	orreq	r2, r3, r2
   3033c:	cmp	r2, #0
   30340:	andseq	r1, r1, #2
   30344:	beq	303a0 <__assert_fail@plt+0x1d924>
   30348:	ldr	r1, [r4, #24]
   3034c:	mov	r0, #3
   30350:	mov	r2, r5
   30354:	bl	129e0 <__xstat64@plt>
   30358:	cmp	r0, #0
   3035c:	beq	30420 <__assert_fail@plt+0x1d9a4>
   30360:	bl	127d0 <__errno_location@plt>
   30364:	mov	r6, r0
   30368:	ldr	r0, [r0]
   3036c:	cmp	r0, #2
   30370:	bne	303d0 <__assert_fail@plt+0x1d954>
   30374:	ldr	r1, [r4, #24]
   30378:	mov	r0, #3
   3037c:	mov	r2, r5
   30380:	bl	12a40 <__lxstat64@plt>
   30384:	cmp	r0, #0
   30388:	bne	303cc <__assert_fail@plt+0x1d950>
   3038c:	mov	r0, #0
   30390:	str	r0, [r6]
   30394:	mov	r0, #13
   30398:	sub	sp, fp, #16
   3039c:	pop	{r4, r5, r6, sl, fp, pc}
   303a0:	ldr	r1, [r0, #32]
   303a4:	ldr	r2, [r4, #24]
   303a8:	mov	r0, #256	; 0x100
   303ac:	mov	r3, r5
   303b0:	str	r0, [sp]
   303b4:	mov	r0, #3
   303b8:	bl	125b4 <__fxstatat64@plt>
   303bc:	cmp	r0, #0
   303c0:	beq	30420 <__assert_fail@plt+0x1d9a4>
   303c4:	bl	127d0 <__errno_location@plt>
   303c8:	mov	r6, r0
   303cc:	ldr	r0, [r6]
   303d0:	vmov.i32	q8, #0	; 0x00000000
   303d4:	add	r1, r5, #80	; 0x50
   303d8:	str	r0, [r4, #32]
   303dc:	mov	r0, #0
   303e0:	vst1.64	{d16-d17}, [r1]
   303e4:	add	r1, r5, #64	; 0x40
   303e8:	str	r0, [r5, #96]	; 0x60
   303ec:	vst1.64	{d16-d17}, [r1]
   303f0:	add	r1, r5, #48	; 0x30
   303f4:	vst1.64	{d16-d17}, [r1]
   303f8:	add	r1, r5, #32
   303fc:	vst1.64	{d16-d17}, [r1]
   30400:	add	r1, r5, #16
   30404:	vst1.64	{d16-d17}, [r1]
   30408:	mov	r1, #100	; 0x64
   3040c:	vst1.64	{d16-d17}, [r5], r1
   30410:	str	r0, [r5]
   30414:	mov	r0, #10
   30418:	sub	sp, fp, #16
   3041c:	pop	{r4, r5, r6, sl, fp, pc}
   30420:	ldr	r0, [r4, #80]	; 0x50
   30424:	and	r0, r0, #61440	; 0xf000
   30428:	cmp	r0, #40960	; 0xa000
   3042c:	beq	30488 <__assert_fail@plt+0x1da0c>
   30430:	cmp	r0, #32768	; 0x8000
   30434:	moveq	r0, #8
   30438:	subeq	sp, fp, #16
   3043c:	popeq	{r4, r5, r6, sl, fp, pc}
   30440:	cmp	r0, #16384	; 0x4000
   30444:	bne	3047c <__assert_fail@plt+0x1da00>
   30448:	ldrb	r1, [r4, #168]	; 0xa8
   3044c:	mov	r0, #1
   30450:	cmp	r1, #46	; 0x2e
   30454:	bne	30474 <__assert_fail@plt+0x1d9f8>
   30458:	ldrb	r1, [r4, #169]	; 0xa9
   3045c:	cmp	r1, #0
   30460:	beq	30494 <__assert_fail@plt+0x1da18>
   30464:	cmp	r1, #46	; 0x2e
   30468:	ldrbeq	r1, [r4, #170]	; 0xaa
   3046c:	cmpeq	r1, #0
   30470:	beq	30494 <__assert_fail@plt+0x1da18>
   30474:	sub	sp, fp, #16
   30478:	pop	{r4, r5, r6, sl, fp, pc}
   3047c:	mov	r0, #3
   30480:	sub	sp, fp, #16
   30484:	pop	{r4, r5, r6, sl, fp, pc}
   30488:	mov	r0, #12
   3048c:	sub	sp, fp, #16
   30490:	pop	{r4, r5, r6, sl, fp, pc}
   30494:	ldr	r1, [r4, #48]	; 0x30
   30498:	mov	r0, #5
   3049c:	cmp	r1, #0
   304a0:	movweq	r0, #1
   304a4:	sub	sp, fp, #16
   304a8:	pop	{r4, r5, r6, sl, fp, pc}
   304ac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   304b0:	add	fp, sp, #24
   304b4:	ldrd	r8, [r0, #40]	; 0x28
   304b8:	mov	r5, r2
   304bc:	mov	r4, r1
   304c0:	mov	r6, r0
   304c4:	cmp	r8, r2
   304c8:	bcs	30508 <__assert_fail@plt+0x1da8c>
   304cc:	add	r1, r5, #40	; 0x28
   304d0:	cmn	r1, #-1073741823	; 0xc0000001
   304d4:	str	r1, [r6, #40]	; 0x28
   304d8:	bhi	30594 <__assert_fail@plt+0x1db18>
   304dc:	add	r7, r6, #8
   304e0:	lsl	r1, r1, #2
   304e4:	ldr	r0, [r7]
   304e8:	bl	33040 <__assert_fail@plt+0x205c4>
   304ec:	cmp	r0, #0
   304f0:	beq	30594 <__assert_fail@plt+0x1db18>
   304f4:	mov	r6, r7
   304f8:	str	r0, [r7]
   304fc:	cmp	r4, #0
   30500:	bne	30514 <__assert_fail@plt+0x1da98>
   30504:	b	30528 <__assert_fail@plt+0x1daac>
   30508:	ldr	r0, [r6, #8]!
   3050c:	cmp	r4, #0
   30510:	beq	30528 <__assert_fail@plt+0x1daac>
   30514:	str	r4, [r0], #4
   30518:	ldr	r4, [r4, #8]
   3051c:	cmp	r4, #0
   30520:	bne	30514 <__assert_fail@plt+0x1da98>
   30524:	ldr	r0, [r6]
   30528:	mov	r1, r5
   3052c:	mov	r2, #4
   30530:	mov	r3, r9
   30534:	bl	12998 <qsort@plt>
   30538:	ldr	r7, [r6]
   3053c:	subs	r0, r5, #1
   30540:	ldr	r4, [r7]
   30544:	mov	r1, r4
   30548:	beq	30584 <__assert_fail@plt+0x1db08>
   3054c:	mov	r1, r7
   30550:	cmp	r5, #2
   30554:	ldr	r2, [r1, #4]!
   30558:	str	r2, [r4, #8]
   3055c:	beq	30580 <__assert_fail@plt+0x1db04>
   30560:	rsb	r3, r5, #2
   30564:	mov	r2, r1
   30568:	ldr	r6, [r2, #4]!
   3056c:	ldr	r1, [r1]
   30570:	adds	r3, r3, #1
   30574:	str	r6, [r1, #8]
   30578:	mov	r1, r2
   3057c:	bne	30568 <__assert_fail@plt+0x1daec>
   30580:	ldr	r1, [r7, r0, lsl #2]
   30584:	mov	r0, #0
   30588:	str	r0, [r1, #8]
   3058c:	mov	r0, r4
   30590:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   30594:	ldr	r0, [r6, #8]
   30598:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3059c:	mov	r0, #0
   305a0:	str	r0, [r6, #40]	; 0x28
   305a4:	str	r0, [r6, #8]
   305a8:	mov	r0, r4
   305ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   305b0:	push	{r4, r5, r6, r7, fp, lr}
   305b4:	add	fp, sp, #16
   305b8:	mov	r4, r0
   305bc:	ldr	r0, [r0]
   305c0:	cmp	r0, #0
   305c4:	beq	30604 <__assert_fail@plt+0x1db88>
   305c8:	ldr	r1, [r0, #48]	; 0x30
   305cc:	cmp	r1, #0
   305d0:	blt	305f8 <__assert_fail@plt+0x1db7c>
   305d4:	ldr	r5, [r0, #8]
   305d8:	cmp	r5, #0
   305dc:	ldreq	r5, [r0, #4]
   305e0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   305e4:	ldr	r0, [r5, #48]	; 0x30
   305e8:	cmn	r0, #1
   305ec:	mov	r0, r5
   305f0:	bgt	305d4 <__assert_fail@plt+0x1db58>
   305f4:	b	305fc <__assert_fail@plt+0x1db80>
   305f8:	mov	r5, r0
   305fc:	mov	r0, r5
   30600:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   30604:	ldr	r5, [r4, #4]
   30608:	cmp	r5, #0
   3060c:	beq	30638 <__assert_fail@plt+0x1dbbc>
   30610:	ldrd	r6, [r5, #8]
   30614:	cmp	r7, #0
   30618:	beq	30624 <__assert_fail@plt+0x1dba8>
   3061c:	mov	r0, r7
   30620:	bl	12a4c <closedir@plt>
   30624:	mov	r0, r5
   30628:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3062c:	cmp	r6, #0
   30630:	mov	r5, r6
   30634:	bne	30610 <__assert_fail@plt+0x1db94>
   30638:	ldr	r0, [r4, #8]
   3063c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   30640:	ldr	r0, [r4, #24]
   30644:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   30648:	ldr	r0, [r4, #48]	; 0x30
   3064c:	tst	r0, #512	; 0x200
   30650:	bne	3067c <__assert_fail@plt+0x1dc00>
   30654:	mov	r6, #0
   30658:	tst	r0, #4
   3065c:	bne	306c0 <__assert_fail@plt+0x1dc44>
   30660:	ldr	r0, [r4, #28]
   30664:	bl	12980 <fchdir@plt>
   30668:	cmp	r0, #0
   3066c:	beq	3069c <__assert_fail@plt+0x1dc20>
   30670:	bl	127d0 <__errno_location@plt>
   30674:	ldr	r6, [r0]
   30678:	b	306a0 <__assert_fail@plt+0x1dc24>
   3067c:	ldr	r0, [r4, #32]
   30680:	mov	r6, #0
   30684:	cmp	r0, #0
   30688:	blt	306c0 <__assert_fail@plt+0x1dc44>
   3068c:	bl	12a34 <close@plt>
   30690:	cmp	r0, #0
   30694:	bne	306b8 <__assert_fail@plt+0x1dc3c>
   30698:	b	306c0 <__assert_fail@plt+0x1dc44>
   3069c:	mov	r6, #0
   306a0:	ldr	r0, [r4, #28]
   306a4:	bl	12a34 <close@plt>
   306a8:	cmp	r6, #0
   306ac:	bne	306c0 <__assert_fail@plt+0x1dc44>
   306b0:	cmp	r0, #0
   306b4:	beq	306c0 <__assert_fail@plt+0x1dc44>
   306b8:	bl	127d0 <__errno_location@plt>
   306bc:	ldr	r6, [r0]
   306c0:	add	r5, r4, #60	; 0x3c
   306c4:	b	306cc <__assert_fail@plt+0x1dc50>
   306c8:	bl	12a34 <close@plt>
   306cc:	mov	r0, r5
   306d0:	bl	45e88 <__assert_fail@plt+0x3340c>
   306d4:	cmp	r0, #0
   306d8:	bne	306f0 <__assert_fail@plt+0x1dc74>
   306dc:	mov	r0, r5
   306e0:	bl	45edc <__assert_fail@plt+0x33460>
   306e4:	cmp	r0, #0
   306e8:	bge	306c8 <__assert_fail@plt+0x1dc4c>
   306ec:	b	306cc <__assert_fail@plt+0x1dc50>
   306f0:	ldr	r0, [r4, #52]	; 0x34
   306f4:	cmp	r0, #0
   306f8:	beq	30700 <__assert_fail@plt+0x1dc84>
   306fc:	bl	23330 <__assert_fail@plt+0x108b4>
   30700:	ldrh	r0, [r4, #48]	; 0x30
   30704:	movw	r1, #258	; 0x102
   30708:	tst	r0, r1
   3070c:	beq	30724 <__assert_fail@plt+0x1dca8>
   30710:	ldr	r0, [r4, #56]	; 0x38
   30714:	cmp	r0, #0
   30718:	beq	3072c <__assert_fail@plt+0x1dcb0>
   3071c:	bl	23330 <__assert_fail@plt+0x108b4>
   30720:	b	3072c <__assert_fail@plt+0x1dcb0>
   30724:	ldr	r0, [r4, #56]	; 0x38
   30728:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3072c:	mov	r0, r4
   30730:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   30734:	cmp	r6, #0
   30738:	moveq	r0, #0
   3073c:	popeq	{r4, r5, r6, r7, fp, pc}
   30740:	bl	127d0 <__errno_location@plt>
   30744:	str	r6, [r0]
   30748:	mvn	r0, #0
   3074c:	pop	{r4, r5, r6, r7, fp, pc}
   30750:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   30754:	add	fp, sp, #24
   30758:	sub	sp, sp, #8
   3075c:	ldr	r6, [r0]
   30760:	mov	r5, #0
   30764:	cmp	r6, #0
   30768:	beq	30e9c <__assert_fail@plt+0x1e420>
   3076c:	mov	r4, r0
   30770:	ldr	r0, [r0, #48]	; 0x30
   30774:	tst	r0, #8192	; 0x2000
   30778:	bne	30e9c <__assert_fail@plt+0x1e420>
   3077c:	ldrh	r1, [r6, #60]	; 0x3c
   30780:	mov	r2, #3
   30784:	strh	r2, [r6, #60]	; 0x3c
   30788:	cmp	r1, #1
   3078c:	beq	30804 <__assert_fail@plt+0x1dd88>
   30790:	mov	r7, r6
   30794:	cmp	r1, #2
   30798:	bne	30820 <__assert_fail@plt+0x1dda4>
   3079c:	ldrh	r2, [r7, #56]!	; 0x38
   307a0:	movw	r3, #65534	; 0xfffe
   307a4:	and	r3, r2, r3
   307a8:	cmp	r3, #12
   307ac:	bne	30824 <__assert_fail@plt+0x1dda8>
   307b0:	mov	r0, r4
   307b4:	mov	r1, r6
   307b8:	mov	r2, #1
   307bc:	bl	30314 <__assert_fail@plt+0x1d898>
   307c0:	cmp	r0, #1
   307c4:	strh	r0, [r6, #56]	; 0x38
   307c8:	bne	3090c <__assert_fail@plt+0x1de90>
   307cc:	ldr	r0, [r4, #48]	; 0x30
   307d0:	tst	r0, #4
   307d4:	bne	3090c <__assert_fail@plt+0x1de90>
   307d8:	mov	r1, #32768	; 0x8000
   307dc:	tst	r0, #512	; 0x200
   307e0:	and	r1, r1, r0, lsl #11
   307e4:	orr	r1, r1, #18688	; 0x4900
   307e8:	orr	r2, r1, #524288	; 0x80000
   307ec:	bne	30b78 <__assert_fail@plt+0x1e0fc>
   307f0:	movw	r0, #31476	; 0x7af4
   307f4:	mov	r1, r2
   307f8:	movt	r0, #4
   307fc:	bl	22960 <__assert_fail@plt+0xfee4>
   30800:	b	30b88 <__assert_fail@plt+0x1e10c>
   30804:	mov	r0, r4
   30808:	mov	r1, r6
   3080c:	mov	r2, #0
   30810:	bl	30314 <__assert_fail@plt+0x1d898>
   30814:	strh	r0, [r6, #56]	; 0x38
   30818:	mov	r5, r6
   3081c:	b	30e9c <__assert_fail@plt+0x1e420>
   30820:	ldrh	r2, [r7, #56]!	; 0x38
   30824:	cmp	r2, #1
   30828:	bne	308a0 <__assert_fail@plt+0x1de24>
   3082c:	cmp	r1, #4
   30830:	bne	30914 <__assert_fail@plt+0x1de98>
   30834:	ldrb	r0, [r6, #58]	; 0x3a
   30838:	tst	r0, #2
   3083c:	beq	30848 <__assert_fail@plt+0x1ddcc>
   30840:	ldr	r0, [r6, #36]	; 0x24
   30844:	bl	12a34 <close@plt>
   30848:	ldr	r5, [r4, #4]
   3084c:	cmp	r5, #0
   30850:	beq	30884 <__assert_fail@plt+0x1de08>
   30854:	ldrd	r8, [r5, #8]
   30858:	cmp	r9, #0
   3085c:	beq	30868 <__assert_fail@plt+0x1ddec>
   30860:	mov	r0, r9
   30864:	bl	12a4c <closedir@plt>
   30868:	mov	r0, r5
   3086c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   30870:	cmp	r8, #0
   30874:	mov	r5, r8
   30878:	bne	30854 <__assert_fail@plt+0x1ddd8>
   3087c:	mov	r0, #0
   30880:	str	r0, [r4, #4]
   30884:	mov	r0, #6
   30888:	strh	r0, [r6, #56]	; 0x38
   3088c:	mov	r0, r4
   30890:	mov	r1, r6
   30894:	bl	30eac <__assert_fail@plt+0x1e430>
   30898:	mov	r5, r6
   3089c:	b	30e9c <__assert_fail@plt+0x1e420>
   308a0:	ldr	r5, [r6, #8]
   308a4:	cmp	r5, #0
   308a8:	beq	309a4 <__assert_fail@plt+0x1df28>
   308ac:	mov	r0, r6
   308b0:	str	r5, [r4]
   308b4:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   308b8:	ldr	r0, [r5, #48]	; 0x30
   308bc:	cmp	r0, #0
   308c0:	beq	309f0 <__assert_fail@plt+0x1df74>
   308c4:	ldrh	r0, [r5, #60]	; 0x3c
   308c8:	mov	r6, r5
   308cc:	cmp	r0, #4
   308d0:	beq	308a0 <__assert_fail@plt+0x1de24>
   308d4:	cmp	r0, #2
   308d8:	bne	30a90 <__assert_fail@plt+0x1e014>
   308dc:	mov	r0, r4
   308e0:	mov	r1, r5
   308e4:	mov	r2, #1
   308e8:	bl	30314 <__assert_fail@plt+0x1d898>
   308ec:	strh	r0, [r5, #56]	; 0x38
   308f0:	cmp	r0, #1
   308f4:	ldreq	r0, [r4, #48]	; 0x30
   308f8:	tsteq	r0, #4
   308fc:	beq	30db4 <__assert_fail@plt+0x1e338>
   30900:	mov	r0, #3
   30904:	strh	r0, [r5, #60]	; 0x3c
   30908:	b	30a90 <__assert_fail@plt+0x1e014>
   3090c:	mov	r5, r6
   30910:	b	30acc <__assert_fail@plt+0x1e050>
   30914:	tst	r0, #64	; 0x40
   30918:	beq	30934 <__assert_fail@plt+0x1deb8>
   3091c:	ldrd	r2, [r4, #16]
   30920:	ldrd	r8, [r6, #64]	; 0x40
   30924:	eor	r1, r9, r3
   30928:	eor	r2, r8, r2
   3092c:	orrs	r1, r2, r1
   30930:	bne	30834 <__assert_fail@plt+0x1ddb8>
   30934:	ldr	r5, [r4, #4]
   30938:	cmp	r5, #0
   3093c:	beq	30a6c <__assert_fail@plt+0x1dff0>
   30940:	tst	r0, #4096	; 0x1000
   30944:	bne	30a34 <__assert_fail@plt+0x1dfb8>
   30948:	ldr	r3, [r6, #24]
   3094c:	mov	r0, r4
   30950:	mov	r1, r6
   30954:	mvn	r2, #0
   30958:	bl	30f7c <__assert_fail@plt+0x1e500>
   3095c:	cmp	r0, #0
   30960:	beq	30a84 <__assert_fail@plt+0x1e008>
   30964:	bl	127d0 <__errno_location@plt>
   30968:	ldr	r0, [r0]
   3096c:	str	r0, [r6, #32]
   30970:	ldrh	r0, [r6, #58]	; 0x3a
   30974:	orr	r0, r0, #1
   30978:	strh	r0, [r6, #58]	; 0x3a
   3097c:	ldr	r0, [r4, #4]
   30980:	cmp	r0, #0
   30984:	beq	30a84 <__assert_fail@plt+0x1e008>
   30988:	ldmib	r0, {r1, r2}
   3098c:	ldr	r1, [r1, #24]
   30990:	cmp	r2, #0
   30994:	str	r1, [r0, #24]
   30998:	mov	r0, r2
   3099c:	bne	30988 <__assert_fail@plt+0x1df0c>
   309a0:	b	30a84 <__assert_fail@plt+0x1e008>
   309a4:	ldr	r5, [r6, #4]
   309a8:	ldr	r0, [r5, #12]
   309ac:	cmp	r0, #0
   309b0:	beq	30bb8 <__assert_fail@plt+0x1e13c>
   309b4:	str	r5, [r4]
   309b8:	ldr	r1, [r5, #40]	; 0x28
   309bc:	ldr	r0, [r4, #24]
   309c0:	mov	r5, #0
   309c4:	strb	r5, [r0, r1]
   309c8:	mov	r0, r4
   309cc:	mov	r1, #3
   309d0:	bl	311d4 <__assert_fail@plt+0x1e758>
   309d4:	cmp	r0, #0
   309d8:	beq	30ba8 <__assert_fail@plt+0x1e12c>
   309dc:	mov	r7, r0
   309e0:	mov	r0, r6
   309e4:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   309e8:	mov	r5, r7
   309ec:	b	30a90 <__assert_fail@plt+0x1e014>
   309f0:	mov	r0, r4
   309f4:	bl	31c88 <__assert_fail@plt+0x1f20c>
   309f8:	ldr	r1, [r4, #48]	; 0x30
   309fc:	cmp	r0, #0
   30a00:	beq	30a14 <__assert_fail@plt+0x1df98>
   30a04:	orr	r0, r1, #8192	; 0x2000
   30a08:	mov	r5, #0
   30a0c:	str	r0, [r4, #48]	; 0x30
   30a10:	b	30e9c <__assert_fail@plt+0x1e420>
   30a14:	movw	r0, #258	; 0x102
   30a18:	tst	r1, r0
   30a1c:	beq	30c68 <__assert_fail@plt+0x1e1ec>
   30a20:	ldr	r0, [r4, #56]	; 0x38
   30a24:	cmp	r0, #0
   30a28:	beq	30c70 <__assert_fail@plt+0x1e1f4>
   30a2c:	bl	23330 <__assert_fail@plt+0x108b4>
   30a30:	b	30c70 <__assert_fail@plt+0x1e1f4>
   30a34:	bic	r0, r0, #4096	; 0x1000
   30a38:	str	r0, [r4, #48]	; 0x30
   30a3c:	ldrd	r8, [r5, #8]
   30a40:	cmp	r9, #0
   30a44:	beq	30a50 <__assert_fail@plt+0x1dfd4>
   30a48:	mov	r0, r9
   30a4c:	bl	12a4c <closedir@plt>
   30a50:	mov	r0, r5
   30a54:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   30a58:	cmp	r8, #0
   30a5c:	mov	r5, r8
   30a60:	bne	30a3c <__assert_fail@plt+0x1dfc0>
   30a64:	mov	r0, #0
   30a68:	str	r0, [r4, #4]
   30a6c:	mov	r0, r4
   30a70:	mov	r1, #3
   30a74:	bl	311d4 <__assert_fail@plt+0x1e758>
   30a78:	cmp	r0, #0
   30a7c:	str	r0, [r4, #4]
   30a80:	beq	30b4c <__assert_fail@plt+0x1e0d0>
   30a84:	ldr	r5, [r4, #4]
   30a88:	mov	r0, #0
   30a8c:	str	r0, [r4, #4]
   30a90:	ldr	r0, [r5, #4]
   30a94:	ldr	r1, [r0, #28]
   30a98:	ldr	r0, [r0, #40]	; 0x28
   30a9c:	sub	r2, r0, #1
   30aa0:	ldrb	r1, [r1, r2]
   30aa4:	cmp	r1, #47	; 0x2f
   30aa8:	ldr	r1, [r4, #24]
   30aac:	moveq	r0, r2
   30ab0:	mov	r2, #47	; 0x2f
   30ab4:	strb	r2, [r1, r0]!
   30ab8:	ldr	r2, [r5, #52]	; 0x34
   30abc:	add	r0, r1, #1
   30ac0:	add	r1, r5, #168	; 0xa8
   30ac4:	add	r2, r2, #1
   30ac8:	bl	1244c <memmove@plt>
   30acc:	str	r5, [r4]
   30ad0:	ldrh	r0, [r5, #56]	; 0x38
   30ad4:	cmp	r0, #11
   30ad8:	bne	30b0c <__assert_fail@plt+0x1e090>
   30adc:	ldrd	r0, [r5, #112]	; 0x70
   30ae0:	eor	r2, r0, #1
   30ae4:	orrs	r2, r2, r1
   30ae8:	beq	30e9c <__assert_fail@plt+0x1e420>
   30aec:	eor	r0, r0, #2
   30af0:	orrs	r0, r0, r1
   30af4:	bne	30ea8 <__assert_fail@plt+0x1e42c>
   30af8:	mov	r0, r4
   30afc:	mov	r1, r5
   30b00:	mov	r2, #0
   30b04:	bl	30314 <__assert_fail@plt+0x1d898>
   30b08:	strh	r0, [r5, #56]	; 0x38
   30b0c:	cmp	r0, #1
   30b10:	bne	30e9c <__assert_fail@plt+0x1e420>
   30b14:	ldr	r0, [r5, #48]	; 0x30
   30b18:	cmp	r0, #0
   30b1c:	ldrdeq	r0, [r5, #64]	; 0x40
   30b20:	strdeq	r0, [r4, #16]
   30b24:	mov	r0, r4
   30b28:	mov	r1, r5
   30b2c:	bl	31d18 <__assert_fail@plt+0x1f29c>
   30b30:	cmp	r0, #0
   30b34:	bne	30e9c <__assert_fail@plt+0x1e420>
   30b38:	bl	127d0 <__errno_location@plt>
   30b3c:	mov	r1, #12
   30b40:	mov	r5, #0
   30b44:	str	r1, [r0]
   30b48:	b	30e9c <__assert_fail@plt+0x1e420>
   30b4c:	ldrb	r0, [r4, #49]	; 0x31
   30b50:	mov	r5, #0
   30b54:	tst	r0, #32
   30b58:	bne	30e9c <__assert_fail@plt+0x1e420>
   30b5c:	ldr	r0, [r6, #32]
   30b60:	cmp	r0, #0
   30b64:	ldrhne	r0, [r7]
   30b68:	cmpne	r0, #4
   30b6c:	movne	r0, #7
   30b70:	strhne	r0, [r7]
   30b74:	b	3088c <__assert_fail@plt+0x1de10>
   30b78:	ldr	r0, [r4, #32]
   30b7c:	movw	r1, #31476	; 0x7af4
   30b80:	movt	r1, #4
   30b84:	bl	26374 <__assert_fail@plt+0x138f8>
   30b88:	cmn	r0, #1
   30b8c:	str	r0, [r6, #36]	; 0x24
   30b90:	ble	30c4c <__assert_fail@plt+0x1e1d0>
   30b94:	ldrh	r0, [r6, #58]	; 0x3a
   30b98:	mov	r5, r6
   30b9c:	orr	r0, r0, #2
   30ba0:	strh	r0, [r6, #58]	; 0x3a
   30ba4:	b	30acc <__assert_fail@plt+0x1e050>
   30ba8:	ldrb	r0, [r4, #49]	; 0x31
   30bac:	tst	r0, #32
   30bb0:	bne	30e9c <__assert_fail@plt+0x1e420>
   30bb4:	ldr	r5, [r6, #4]
   30bb8:	mov	r0, r6
   30bbc:	str	r5, [r4]
   30bc0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   30bc4:	ldr	r0, [r5, #48]	; 0x30
   30bc8:	cmn	r0, #1
   30bcc:	beq	30c30 <__assert_fail@plt+0x1e1b4>
   30bd0:	ldrh	r0, [r5, #56]	; 0x38
   30bd4:	cmp	r0, #11
   30bd8:	beq	30ea8 <__assert_fail@plt+0x1e42c>
   30bdc:	ldr	r0, [r5, #40]	; 0x28
   30be0:	ldr	r1, [r4, #24]
   30be4:	mov	r2, #0
   30be8:	strb	r2, [r1, r0]
   30bec:	ldr	r0, [r5, #48]	; 0x30
   30bf0:	cmp	r0, #0
   30bf4:	beq	30d40 <__assert_fail@plt+0x1e2c4>
   30bf8:	ldrh	r0, [r5, #58]	; 0x3a
   30bfc:	tst	r0, #2
   30c00:	bne	30d6c <__assert_fail@plt+0x1e2f0>
   30c04:	tst	r0, #1
   30c08:	bne	30e60 <__assert_fail@plt+0x1e3e4>
   30c0c:	ldr	r1, [r5, #4]
   30c10:	movw	r3, #51201	; 0xc801
   30c14:	mov	r0, r4
   30c18:	mvn	r2, #0
   30c1c:	movt	r3, #4
   30c20:	bl	30f7c <__assert_fail@plt+0x1e500>
   30c24:	cmp	r0, #0
   30c28:	bne	30d50 <__assert_fail@plt+0x1e2d4>
   30c2c:	b	30e60 <__assert_fail@plt+0x1e3e4>
   30c30:	mov	r0, r5
   30c34:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   30c38:	bl	127d0 <__errno_location@plt>
   30c3c:	mov	r5, #0
   30c40:	str	r5, [r0]
   30c44:	str	r5, [r4]
   30c48:	b	30e9c <__assert_fail@plt+0x1e420>
   30c4c:	bl	127d0 <__errno_location@plt>
   30c50:	ldr	r0, [r0]
   30c54:	mov	r1, #7
   30c58:	mov	r5, r6
   30c5c:	strh	r1, [r6, #56]	; 0x38
   30c60:	str	r0, [r6, #32]
   30c64:	b	30acc <__assert_fail@plt+0x1e050>
   30c68:	ldr	r0, [r4, #56]	; 0x38
   30c6c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   30c70:	ldr	r1, [r5, #52]	; 0x34
   30c74:	add	r6, r5, #168	; 0xa8
   30c78:	str	r1, [r5, #40]	; 0x28
   30c7c:	add	r2, r1, #1
   30c80:	mov	r1, r6
   30c84:	ldr	r0, [r4, #24]
   30c88:	bl	1244c <memmove@plt>
   30c8c:	mov	r0, r6
   30c90:	mov	r1, #47	; 0x2f
   30c94:	bl	128f0 <strrchr@plt>
   30c98:	cmp	r0, #0
   30c9c:	beq	30cd8 <__assert_fail@plt+0x1e25c>
   30ca0:	cmp	r0, r6
   30ca4:	bne	30cb4 <__assert_fail@plt+0x1e238>
   30ca8:	ldrb	r1, [r5, #169]	; 0xa9
   30cac:	cmp	r1, #0
   30cb0:	beq	30cd8 <__assert_fail@plt+0x1e25c>
   30cb4:	add	r7, r0, #1
   30cb8:	mov	r0, r7
   30cbc:	bl	12788 <strlen@plt>
   30cc0:	mov	r8, r0
   30cc4:	add	r2, r0, #1
   30cc8:	mov	r0, r6
   30ccc:	mov	r1, r7
   30cd0:	bl	1244c <memmove@plt>
   30cd4:	str	r8, [r5, #52]	; 0x34
   30cd8:	ldr	r0, [r4, #24]
   30cdc:	movw	r1, #258	; 0x102
   30ce0:	str	r0, [r5, #24]
   30ce4:	str	r0, [r5, #28]
   30ce8:	ldrh	r0, [r4, #48]	; 0x30
   30cec:	tst	r0, r1
   30cf0:	beq	30d24 <__assert_fail@plt+0x1e2a8>
   30cf4:	movw	r0, #64876	; 0xfd6c
   30cf8:	movw	r2, #8152	; 0x1fd8
   30cfc:	movw	r3, #8184	; 0x1ff8
   30d00:	mov	r1, #0
   30d04:	movt	r0, #2
   30d08:	movt	r2, #3
   30d0c:	movt	r3, #3
   30d10:	str	r0, [sp]
   30d14:	mov	r0, #31
   30d18:	bl	23038 <__assert_fail@plt+0x105bc>
   30d1c:	str	r0, [r4, #56]	; 0x38
   30d20:	b	30acc <__assert_fail@plt+0x1e050>
   30d24:	mov	r0, #32
   30d28:	bl	3233c <__assert_fail@plt+0x1f8c0>
   30d2c:	cmp	r0, #0
   30d30:	str	r0, [r4, #56]	; 0x38
   30d34:	beq	30acc <__assert_fail@plt+0x1e050>
   30d38:	bl	45c28 <__assert_fail@plt+0x331ac>
   30d3c:	b	30acc <__assert_fail@plt+0x1e050>
   30d40:	mov	r0, r4
   30d44:	bl	31c88 <__assert_fail@plt+0x1f20c>
   30d48:	cmp	r0, #0
   30d4c:	beq	30e60 <__assert_fail@plt+0x1e3e4>
   30d50:	bl	127d0 <__errno_location@plt>
   30d54:	ldr	r0, [r0]
   30d58:	str	r0, [r5, #32]
   30d5c:	ldr	r0, [r4, #48]	; 0x30
   30d60:	orr	r0, r0, #8192	; 0x2000
   30d64:	str	r0, [r4, #48]	; 0x30
   30d68:	b	30e60 <__assert_fail@plt+0x1e3e4>
   30d6c:	ldr	r0, [r4, #48]	; 0x30
   30d70:	tst	r0, #4
   30d74:	bne	30de0 <__assert_fail@plt+0x1e364>
   30d78:	mov	r7, r5
   30d7c:	tst	r0, #512	; 0x200
   30d80:	ldr	r6, [r7, #36]!	; 0x24
   30d84:	bne	30e2c <__assert_fail@plt+0x1e3b0>
   30d88:	mov	r0, r6
   30d8c:	bl	12980 <fchdir@plt>
   30d90:	cmp	r0, #0
   30d94:	beq	30e58 <__assert_fail@plt+0x1e3dc>
   30d98:	bl	127d0 <__errno_location@plt>
   30d9c:	ldr	r0, [r0]
   30da0:	str	r0, [r5, #32]
   30da4:	ldr	r0, [r4, #48]	; 0x30
   30da8:	orr	r0, r0, #8192	; 0x2000
   30dac:	str	r0, [r4, #48]	; 0x30
   30db0:	b	30e58 <__assert_fail@plt+0x1e3dc>
   30db4:	mov	r1, #32768	; 0x8000
   30db8:	tst	r0, #512	; 0x200
   30dbc:	and	r1, r1, r0, lsl #11
   30dc0:	orr	r1, r1, #18688	; 0x4900
   30dc4:	orr	r2, r1, #524288	; 0x80000
   30dc8:	bne	30de8 <__assert_fail@plt+0x1e36c>
   30dcc:	movw	r0, #31476	; 0x7af4
   30dd0:	mov	r1, r2
   30dd4:	movt	r0, #4
   30dd8:	bl	22960 <__assert_fail@plt+0xfee4>
   30ddc:	b	30df8 <__assert_fail@plt+0x1e37c>
   30de0:	add	r7, r5, #36	; 0x24
   30de4:	b	30e58 <__assert_fail@plt+0x1e3dc>
   30de8:	ldr	r0, [r4, #32]
   30dec:	movw	r1, #31476	; 0x7af4
   30df0:	movt	r1, #4
   30df4:	bl	26374 <__assert_fail@plt+0x138f8>
   30df8:	cmn	r0, #1
   30dfc:	str	r0, [r5, #36]	; 0x24
   30e00:	ble	30e14 <__assert_fail@plt+0x1e398>
   30e04:	ldrh	r0, [r5, #58]	; 0x3a
   30e08:	orr	r0, r0, #2
   30e0c:	strh	r0, [r5, #58]	; 0x3a
   30e10:	b	30900 <__assert_fail@plt+0x1de84>
   30e14:	bl	127d0 <__errno_location@plt>
   30e18:	ldr	r0, [r0]
   30e1c:	mov	r1, #7
   30e20:	strh	r1, [r5, #56]	; 0x38
   30e24:	str	r0, [r5, #32]
   30e28:	b	30900 <__assert_fail@plt+0x1de84>
   30e2c:	ldr	r1, [r4, #32]
   30e30:	cmp	r1, r6
   30e34:	bne	30e40 <__assert_fail@plt+0x1e3c4>
   30e38:	cmn	r1, #100	; 0x64
   30e3c:	bne	30ea8 <__assert_fail@plt+0x1e42c>
   30e40:	add	r0, r4, #60	; 0x3c
   30e44:	bl	45e90 <__assert_fail@plt+0x33414>
   30e48:	cmp	r0, #0
   30e4c:	blt	30e54 <__assert_fail@plt+0x1e3d8>
   30e50:	bl	12a34 <close@plt>
   30e54:	str	r6, [r4, #32]
   30e58:	ldr	r0, [r7]
   30e5c:	bl	12a34 <close@plt>
   30e60:	ldrh	r0, [r5, #56]	; 0x38
   30e64:	cmp	r0, #2
   30e68:	beq	30e90 <__assert_fail@plt+0x1e414>
   30e6c:	ldr	r0, [r5, #32]
   30e70:	mov	r1, #7
   30e74:	cmp	r0, #0
   30e78:	movweq	r1, #6
   30e7c:	strh	r1, [r5, #56]	; 0x38
   30e80:	bne	30e90 <__assert_fail@plt+0x1e414>
   30e84:	mov	r0, r4
   30e88:	mov	r1, r5
   30e8c:	bl	30eac <__assert_fail@plt+0x1e430>
   30e90:	ldrb	r0, [r4, #49]	; 0x31
   30e94:	tst	r0, #32
   30e98:	movne	r5, #0
   30e9c:	mov	r0, r5
   30ea0:	sub	sp, fp, #24
   30ea4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   30ea8:	bl	12a28 <abort@plt>
   30eac:	push	{r4, r5, r6, r7, fp, lr}
   30eb0:	add	fp, sp, #16
   30eb4:	sub	sp, sp, #24
   30eb8:	ldrh	r2, [r0, #48]	; 0x30
   30ebc:	movw	r3, #258	; 0x102
   30ec0:	add	lr, r1, #64	; 0x40
   30ec4:	tst	r2, r3
   30ec8:	beq	30f00 <__assert_fail@plt+0x1e484>
   30ecc:	ldrd	r2, [lr]
   30ed0:	stm	sp, {r2, r3}
   30ed4:	ldrd	r2, [r1, #160]	; 0xa0
   30ed8:	mov	r1, sp
   30edc:	str	r3, [sp, #12]
   30ee0:	str	r2, [sp, #8]
   30ee4:	ldr	r0, [r0, #56]	; 0x38
   30ee8:	bl	23bbc <__assert_fail@plt+0x11140>
   30eec:	cmp	r0, #0
   30ef0:	beq	30f78 <__assert_fail@plt+0x1e4fc>
   30ef4:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   30ef8:	sub	sp, fp, #16
   30efc:	pop	{r4, r5, r6, r7, fp, pc}
   30f00:	ldr	r2, [r1, #4]
   30f04:	cmp	r2, #0
   30f08:	beq	30f70 <__assert_fail@plt+0x1e4f4>
   30f0c:	ldr	r3, [r2, #48]	; 0x30
   30f10:	cmp	r3, #0
   30f14:	blt	30f70 <__assert_fail@plt+0x1e4f4>
   30f18:	ldr	ip, [r0, #56]	; 0x38
   30f1c:	ldrd	r4, [ip, #16]
   30f20:	orrs	r3, r4, r5
   30f24:	beq	30f78 <__assert_fail@plt+0x1e4fc>
   30f28:	ldrd	r4, [r1, #160]	; 0xa0
   30f2c:	ldrd	r6, [ip]
   30f30:	eor	r1, r7, r5
   30f34:	eor	r3, r6, r4
   30f38:	orrs	r1, r3, r1
   30f3c:	bne	30f70 <__assert_fail@plt+0x1e4f4>
   30f40:	ldr	r1, [ip, #8]!
   30f44:	ldrd	r4, [lr]
   30f48:	ldr	r3, [ip, #4]
   30f4c:	eor	r1, r1, r4
   30f50:	eor	r3, r3, r5
   30f54:	orrs	r1, r1, r3
   30f58:	bne	30f70 <__assert_fail@plt+0x1e4f4>
   30f5c:	ldrd	r4, [r2, #64]	; 0x40
   30f60:	strd	r4, [ip]
   30f64:	ldr	r0, [r0, #56]	; 0x38
   30f68:	ldrd	r2, [r2, #160]	; 0xa0
   30f6c:	strd	r2, [r0]
   30f70:	sub	sp, fp, #16
   30f74:	pop	{r4, r5, r6, r7, fp, pc}
   30f78:	bl	12a28 <abort@plt>
   30f7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30f80:	add	fp, sp, #28
   30f84:	sub	sp, sp, #108	; 0x6c
   30f88:	mov	r7, r3
   30f8c:	mov	r4, r2
   30f90:	mov	r8, r1
   30f94:	mov	sl, r0
   30f98:	cmp	r3, #0
   30f9c:	beq	30fc0 <__assert_fail@plt+0x1e544>
   30fa0:	movw	r1, #51201	; 0xc801
   30fa4:	mov	r0, r7
   30fa8:	movt	r1, #4
   30fac:	bl	123d4 <strcmp@plt>
   30fb0:	mov	r6, r0
   30fb4:	cmp	r0, #0
   30fb8:	movwne	r6, #1
   30fbc:	b	30fc4 <__assert_fail@plt+0x1e548>
   30fc0:	mov	r6, #1
   30fc4:	ldr	r0, [sl, #48]	; 0x30
   30fc8:	tst	r0, #4
   30fcc:	bne	31024 <__assert_fail@plt+0x1e5a8>
   30fd0:	cmn	r4, #1
   30fd4:	mov	r1, #0
   30fd8:	mov	r9, #0
   30fdc:	movwgt	r1, #1
   30fe0:	orrs	r1, r1, r6
   30fe4:	bne	31044 <__assert_fail@plt+0x1e5c8>
   30fe8:	ands	r0, r0, #512	; 0x200
   30fec:	beq	31044 <__assert_fail@plt+0x1e5c8>
   30ff0:	add	r4, sl, #60	; 0x3c
   30ff4:	mov	r0, r4
   30ff8:	bl	45e88 <__assert_fail@plt+0x3340c>
   30ffc:	cmp	r0, #0
   31000:	bne	3104c <__assert_fail@plt+0x1e5d0>
   31004:	mov	r0, r4
   31008:	bl	45edc <__assert_fail@plt+0x33460>
   3100c:	cmn	r0, #1
   31010:	ble	3104c <__assert_fail@plt+0x1e5d0>
   31014:	mov	r4, r0
   31018:	mov	r9, #0
   3101c:	mov	r7, #0
   31020:	b	31094 <__assert_fail@plt+0x1e618>
   31024:	mov	r5, #0
   31028:	cmp	r4, #0
   3102c:	blt	311c4 <__assert_fail@plt+0x1e748>
   31030:	ands	r0, r0, #512	; 0x200
   31034:	beq	311c4 <__assert_fail@plt+0x1e748>
   31038:	mov	r0, r4
   3103c:	bl	12a34 <close@plt>
   31040:	b	311c4 <__assert_fail@plt+0x1e748>
   31044:	cmn	r4, #1
   31048:	bgt	31094 <__assert_fail@plt+0x1e618>
   3104c:	ldr	r0, [sl, #48]	; 0x30
   31050:	mov	r1, #32768	; 0x8000
   31054:	and	r1, r1, r0, lsl #11
   31058:	tst	r0, #512	; 0x200
   3105c:	orr	r1, r1, #18688	; 0x4900
   31060:	orr	r2, r1, #524288	; 0x80000
   31064:	bne	31078 <__assert_fail@plt+0x1e5fc>
   31068:	mov	r0, r7
   3106c:	mov	r1, r2
   31070:	bl	22960 <__assert_fail@plt+0xfee4>
   31074:	b	31084 <__assert_fail@plt+0x1e608>
   31078:	ldr	r0, [sl, #32]
   3107c:	mov	r1, r7
   31080:	bl	26374 <__assert_fail@plt+0x138f8>
   31084:	mov	r4, r0
   31088:	mov	r9, #1
   3108c:	cmp	r0, #0
   31090:	blt	31168 <__assert_fail@plt+0x1e6ec>
   31094:	ldr	r5, [sl, #48]	; 0x30
   31098:	tst	r5, #2
   3109c:	bne	310e0 <__assert_fail@plt+0x1e664>
   310a0:	cmp	r7, #0
   310a4:	beq	310c0 <__assert_fail@plt+0x1e644>
   310a8:	movw	r1, #51201	; 0xc801
   310ac:	mov	r0, r7
   310b0:	movt	r1, #4
   310b4:	bl	123d4 <strcmp@plt>
   310b8:	cmp	r0, #0
   310bc:	beq	310e0 <__assert_fail@plt+0x1e664>
   310c0:	tst	r5, #512	; 0x200
   310c4:	bne	31138 <__assert_fail@plt+0x1e6bc>
   310c8:	mov	r0, r4
   310cc:	bl	12980 <fchdir@plt>
   310d0:	mov	r5, r0
   310d4:	cmp	r9, #0
   310d8:	bne	31188 <__assert_fail@plt+0x1e70c>
   310dc:	b	311c4 <__assert_fail@plt+0x1e748>
   310e0:	mov	r2, sp
   310e4:	mov	r0, #3
   310e8:	mov	r1, r4
   310ec:	bl	125e4 <__fxstat64@plt>
   310f0:	cmp	r0, #0
   310f4:	bne	3117c <__assert_fail@plt+0x1e700>
   310f8:	ldrd	r0, [r8, #64]	; 0x40
   310fc:	ldm	sp, {r2, r3}
   31100:	eor	r1, r1, r3
   31104:	eor	r0, r0, r2
   31108:	orrs	r0, r0, r1
   3110c:	bne	31170 <__assert_fail@plt+0x1e6f4>
   31110:	ldrd	r0, [r8, #160]	; 0xa0
   31114:	ldr	r2, [sp, #96]	; 0x60
   31118:	ldr	r3, [sp, #100]	; 0x64
   3111c:	eor	r1, r1, r3
   31120:	eor	r0, r0, r2
   31124:	orrs	r0, r0, r1
   31128:	bne	31170 <__assert_fail@plt+0x1e6f4>
   3112c:	ldr	r5, [sl, #48]	; 0x30
   31130:	tst	r5, #512	; 0x200
   31134:	beq	310c8 <__assert_fail@plt+0x1e64c>
   31138:	ldr	r1, [sl, #32]
   3113c:	cmp	r1, r4
   31140:	bne	3114c <__assert_fail@plt+0x1e6d0>
   31144:	cmn	r1, #100	; 0x64
   31148:	bne	311d0 <__assert_fail@plt+0x1e754>
   3114c:	cmp	r6, #0
   31150:	beq	311a4 <__assert_fail@plt+0x1e728>
   31154:	add	r0, sl, #60	; 0x3c
   31158:	bl	45e90 <__assert_fail@plt+0x33414>
   3115c:	cmp	r0, #0
   31160:	bge	311b8 <__assert_fail@plt+0x1e73c>
   31164:	b	311bc <__assert_fail@plt+0x1e740>
   31168:	mvn	r5, #0
   3116c:	b	311c4 <__assert_fail@plt+0x1e748>
   31170:	bl	127d0 <__errno_location@plt>
   31174:	mov	r1, #2
   31178:	str	r1, [r0]
   3117c:	mvn	r5, #0
   31180:	cmp	r9, #0
   31184:	beq	311c4 <__assert_fail@plt+0x1e748>
   31188:	bl	127d0 <__errno_location@plt>
   3118c:	ldr	r7, [r0]
   31190:	mov	r6, r0
   31194:	mov	r0, r4
   31198:	bl	12a34 <close@plt>
   3119c:	str	r7, [r6]
   311a0:	b	311c4 <__assert_fail@plt+0x1e748>
   311a4:	tst	r5, #4
   311a8:	bne	311bc <__assert_fail@plt+0x1e740>
   311ac:	cmp	r1, #0
   311b0:	blt	311bc <__assert_fail@plt+0x1e740>
   311b4:	mov	r0, r1
   311b8:	bl	12a34 <close@plt>
   311bc:	str	r4, [sl, #32]
   311c0:	mov	r5, #0
   311c4:	mov	r0, r5
   311c8:	sub	sp, fp, #28
   311cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   311d0:	bl	12a28 <abort@plt>
   311d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   311d8:	add	fp, sp, #28
   311dc:	sub	sp, sp, #76	; 0x4c
   311e0:	ldr	sl, [r0]
   311e4:	mov	r8, r1
   311e8:	mov	r5, r0
   311ec:	str	r0, [sp, #44]	; 0x2c
   311f0:	ldr	r4, [sl, #12]
   311f4:	cmp	r4, #0
   311f8:	beq	31244 <__assert_fail@plt+0x1e7c8>
   311fc:	mov	r0, r4
   31200:	bl	12974 <dirfd@plt>
   31204:	cmn	r0, #1
   31208:	str	r0, [fp, #-32]	; 0xffffffe0
   3120c:	ble	3127c <__assert_fail@plt+0x1e800>
   31210:	mov	r1, r5
   31214:	mvn	r2, #0
   31218:	str	r4, [sp, #16]
   3121c:	str	r8, [sp, #8]
   31220:	mov	ip, #0
   31224:	ldr	r0, [r1, #44]!	; 0x2c
   31228:	cmp	r0, #0
   3122c:	str	r1, [sp, #52]	; 0x34
   31230:	add	r7, r1, #4
   31234:	movweq	r2, #34464	; 0x86a0
   31238:	movteq	r2, #1
   3123c:	str	r2, [sp, #32]
   31240:	b	31460 <__assert_fail@plt+0x1e9e4>
   31244:	mov	r7, r5
   31248:	mvn	r0, #99	; 0x63
   3124c:	mov	r2, #0
   31250:	ldr	r3, [r7, #48]!	; 0x30
   31254:	and	r1, r3, #516	; 0x204
   31258:	cmp	r1, #512	; 0x200
   3125c:	ldr	r1, [sl, #24]
   31260:	ldreq	r0, [r5, #32]
   31264:	tst	r3, #16
   31268:	beq	312a4 <__assert_fail@plt+0x1e828>
   3126c:	tst	r3, #1
   31270:	bne	31298 <__assert_fail@plt+0x1e81c>
   31274:	mov	r2, #32768	; 0x8000
   31278:	b	312a4 <__assert_fail@plt+0x1e828>
   3127c:	ldr	r0, [sl, #12]
   31280:	bl	12a4c <closedir@plt>
   31284:	mov	r6, #0
   31288:	str	r6, [sl, #12]
   3128c:	cmp	r8, #3
   31290:	beq	312e8 <__assert_fail@plt+0x1e86c>
   31294:	b	31b7c <__assert_fail@plt+0x1f100>
   31298:	ldr	r3, [sl, #48]	; 0x30
   3129c:	cmp	r3, #0
   312a0:	movne	r2, #32768	; 0x8000
   312a4:	sub	r3, fp, #32
   312a8:	bl	46168 <__assert_fail@plt+0x336ec>
   312ac:	cmp	r0, #0
   312b0:	str	r0, [sl, #12]
   312b4:	beq	312dc <__assert_fail@plt+0x1e860>
   312b8:	ldrh	r0, [sl, #56]	; 0x38
   312bc:	cmp	r0, #11
   312c0:	bne	31300 <__assert_fail@plt+0x1e884>
   312c4:	mov	r0, r5
   312c8:	mov	r1, sl
   312cc:	mov	r2, #0
   312d0:	bl	30314 <__assert_fail@plt+0x1d898>
   312d4:	strh	r0, [sl, #56]	; 0x38
   312d8:	b	31340 <__assert_fail@plt+0x1e8c4>
   312dc:	mov	r6, #0
   312e0:	cmp	r8, #3
   312e4:	bne	31b7c <__assert_fail@plt+0x1f100>
   312e8:	mov	r0, #4
   312ec:	strh	r0, [sl, #56]	; 0x38
   312f0:	bl	127d0 <__errno_location@plt>
   312f4:	ldr	r0, [r0]
   312f8:	str	r0, [sl, #32]
   312fc:	b	31b7c <__assert_fail@plt+0x1f100>
   31300:	ldrb	r0, [r7, #1]
   31304:	tst	r0, #1
   31308:	beq	31340 <__assert_fail@plt+0x1e8c4>
   3130c:	mov	r0, r5
   31310:	mov	r1, sl
   31314:	bl	30eac <__assert_fail@plt+0x1e430>
   31318:	mov	r0, r5
   3131c:	mov	r1, sl
   31320:	mov	r2, #0
   31324:	mov	r6, #0
   31328:	bl	30314 <__assert_fail@plt+0x1d898>
   3132c:	mov	r0, r5
   31330:	mov	r1, sl
   31334:	bl	31d18 <__assert_fail@plt+0x1f29c>
   31338:	cmp	r0, #0
   3133c:	beq	31ae8 <__assert_fail@plt+0x1f06c>
   31340:	mov	r1, r5
   31344:	str	r8, [sp, #8]
   31348:	str	r4, [sp, #16]
   3134c:	ldr	r0, [r1, #44]!	; 0x2c
   31350:	str	r1, [sp, #52]	; 0x34
   31354:	mvn	r1, #0
   31358:	cmp	r0, #0
   3135c:	movweq	r1, #34464	; 0x86a0
   31360:	movteq	r1, #1
   31364:	cmp	r8, #2
   31368:	str	r1, [sp, #32]
   3136c:	bne	31388 <__assert_fail@plt+0x1e90c>
   31370:	mov	ip, #1
   31374:	cmp	r8, #3
   31378:	bne	31460 <__assert_fail@plt+0x1e9e4>
   3137c:	sub	r0, r8, #3
   31380:	mov	r5, #0
   31384:	b	313a8 <__assert_fail@plt+0x1e92c>
   31388:	ldr	r0, [r7]
   3138c:	and	r0, r0, #56	; 0x38
   31390:	cmp	r0, #24
   31394:	ldreq	r0, [sl, #84]	; 0x54
   31398:	cmpeq	r0, #2
   3139c:	beq	31c30 <__assert_fail@plt+0x1f1b4>
   313a0:	sub	r0, r8, #3
   313a4:	mov	r5, #1
   313a8:	clz	r0, r0
   313ac:	lsr	r6, r0, #5
   313b0:	ldrb	r0, [r7, #1]
   313b4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   313b8:	tst	r0, #2
   313bc:	beq	313d8 <__assert_fail@plt+0x1e95c>
   313c0:	mov	r0, r2
   313c4:	movw	r1, #1030	; 0x406
   313c8:	mov	r2, #3
   313cc:	bl	2fb30 <__assert_fail@plt+0x1d0b4>
   313d0:	mov	r2, r0
   313d4:	str	r0, [fp, #-32]	; 0xffffffe0
   313d8:	cmp	r2, #0
   313dc:	blt	313f8 <__assert_fail@plt+0x1e97c>
   313e0:	ldr	r0, [sp, #44]	; 0x2c
   313e4:	mov	r1, sl
   313e8:	mov	r3, #0
   313ec:	bl	30f7c <__assert_fail@plt+0x1e500>
   313f0:	cmp	r0, #0
   313f4:	beq	31458 <__assert_fail@plt+0x1e9dc>
   313f8:	and	r0, r6, r5
   313fc:	cmp	r0, #1
   31400:	bne	31410 <__assert_fail@plt+0x1e994>
   31404:	bl	127d0 <__errno_location@plt>
   31408:	ldr	r0, [r0]
   3140c:	str	r0, [sl, #32]
   31410:	ldrh	r0, [sl, #58]	; 0x3a
   31414:	orr	r0, r0, #1
   31418:	strh	r0, [sl, #58]	; 0x3a
   3141c:	ldr	r0, [sl, #12]
   31420:	bl	12a4c <closedir@plt>
   31424:	mov	r4, #0
   31428:	ldr	r5, [sp, #44]	; 0x2c
   3142c:	str	r4, [sl, #12]
   31430:	ldr	r0, [r7]
   31434:	tst	r0, #512	; 0x200
   31438:	beq	3144c <__assert_fail@plt+0x1e9d0>
   3143c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   31440:	cmp	r0, #0
   31444:	blt	3144c <__assert_fail@plt+0x1e9d0>
   31448:	bl	12a34 <close@plt>
   3144c:	mov	ip, #1
   31450:	str	r4, [sl, #12]
   31454:	b	31460 <__assert_fail@plt+0x1e9e4>
   31458:	ldr	r5, [sp, #44]	; 0x2c
   3145c:	mov	ip, #0
   31460:	ldr	r0, [sl, #40]	; 0x28
   31464:	ldr	r1, [sl, #28]
   31468:	mov	r9, #0
   3146c:	sub	r2, r0, #1
   31470:	ldrb	r1, [r1, r2]
   31474:	cmp	r1, #47	; 0x2f
   31478:	ldrb	r1, [r7]
   3147c:	moveq	r0, r2
   31480:	tst	r1, #4
   31484:	mov	r1, #0
   31488:	str	r1, [sp, #40]	; 0x28
   3148c:	beq	314a4 <__assert_fail@plt+0x1ea28>
   31490:	ldr	r1, [r5, #24]
   31494:	mov	r2, #47	; 0x2f
   31498:	strb	r2, [r1, r0]!
   3149c:	add	r1, r1, #1
   314a0:	str	r1, [sp, #40]	; 0x28
   314a4:	ldr	r6, [sl, #12]
   314a8:	add	r1, r0, #1
   314ac:	str	r1, [fp, #-48]	; 0xffffffd0
   314b0:	cmp	r6, #0
   314b4:	beq	3182c <__assert_fail@plt+0x1edb0>
   314b8:	ldr	r0, [sl, #48]	; 0x30
   314bc:	str	r7, [fp, #-36]	; 0xffffffdc
   314c0:	str	ip, [sp, #4]
   314c4:	mov	r7, #0
   314c8:	add	r0, r0, #1
   314cc:	str	r0, [sp, #24]
   314d0:	ldr	r0, [r5, #36]	; 0x24
   314d4:	sub	r0, r0, r1
   314d8:	str	r0, [fp, #-44]	; 0xffffffd4
   314dc:	bl	127d0 <__errno_location@plt>
   314e0:	str	r0, [sp, #36]	; 0x24
   314e4:	mov	r0, #0
   314e8:	mov	r9, #0
   314ec:	mov	r4, #0
   314f0:	str	sl, [sp, #28]
   314f4:	str	r0, [sp, #48]	; 0x30
   314f8:	mov	r0, #0
   314fc:	str	r0, [sp, #12]
   31500:	mov	r0, #0
   31504:	str	r0, [sp, #20]
   31508:	ldr	r0, [sp, #36]	; 0x24
   3150c:	str	r7, [r0]
   31510:	mov	r0, r6
   31514:	bl	12944 <readdir64@plt>
   31518:	cmp	r0, #0
   3151c:	beq	31980 <__assert_fail@plt+0x1ef04>
   31520:	mov	r8, r0
   31524:	ldr	r0, [fp, #-36]	; 0xffffffdc
   31528:	str	r4, [fp, #-40]	; 0xffffffd8
   3152c:	add	r4, r8, #19
   31530:	ldrb	r0, [r0]
   31534:	tst	r0, #32
   31538:	ldrbeq	r0, [r4]
   3153c:	cmpeq	r0, #46	; 0x2e
   31540:	beq	3163c <__assert_fail@plt+0x1ebc0>
   31544:	mov	r0, r4
   31548:	bl	12788 <strlen@plt>
   3154c:	mov	r5, r0
   31550:	add	r0, r0, #176	; 0xb0
   31554:	bic	r0, r0, #7
   31558:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3155c:	mov	r6, r0
   31560:	cmp	r0, #0
   31564:	beq	31b0c <__assert_fail@plt+0x1f090>
   31568:	add	sl, r6, #168	; 0xa8
   3156c:	mov	r1, r4
   31570:	mov	r2, r5
   31574:	mov	r0, sl
   31578:	bl	124b8 <memcpy@plt>
   3157c:	ldr	r2, [sp, #44]	; 0x2c
   31580:	mov	r0, #0
   31584:	mov	r1, #196608	; 0x30000
   31588:	ldr	r3, [fp, #-48]	; 0xffffffd0
   3158c:	strb	r0, [sl, r5]
   31590:	str	r5, [r6, #52]	; 0x34
   31594:	str	r2, [r6, #44]	; 0x2c
   31598:	add	r7, r5, r3
   3159c:	ldr	r4, [r2, #24]
   315a0:	str	r1, [r6, #58]	; 0x3a
   315a4:	str	r0, [r6, #12]
   315a8:	str	r0, [r6, #16]
   315ac:	str	r0, [r6, #20]
   315b0:	str	r4, [r6, #28]
   315b4:	str	r0, [r6, #32]
   315b8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   315bc:	cmp	r5, r0
   315c0:	bcs	315d8 <__assert_fail@plt+0x1eb5c>
   315c4:	ldr	r4, [fp, #-40]	; 0xffffffd8
   315c8:	mov	r5, r2
   315cc:	cmp	r7, r3
   315d0:	bcs	3167c <__assert_fail@plt+0x1ec00>
   315d4:	b	319e4 <__assert_fail@plt+0x1ef68>
   315d8:	ldr	r1, [r2, #36]	; 0x24
   315dc:	movw	r0, #257	; 0x101
   315e0:	mov	r5, r2
   315e4:	add	r0, r7, r0
   315e8:	adds	r1, r0, r1
   315ec:	bcs	31ac8 <__assert_fail@plt+0x1f04c>
   315f0:	mov	r0, r4
   315f4:	str	r1, [r5, #36]	; 0x24
   315f8:	bl	33040 <__assert_fail@plt+0x205c4>
   315fc:	cmp	r0, #0
   31600:	beq	31af8 <__assert_fail@plt+0x1f07c>
   31604:	cmp	r0, r4
   31608:	str	r0, [r5, #24]
   3160c:	beq	31664 <__assert_fail@plt+0x1ebe8>
   31610:	ldr	r1, [fp, #-36]	; 0xffffffdc
   31614:	ldr	r3, [fp, #-48]	; 0xffffffd0
   31618:	ldr	r4, [fp, #-40]	; 0xffffffd8
   3161c:	ldrb	r1, [r1]
   31620:	tst	r1, #4
   31624:	ldr	r1, [sp, #40]	; 0x28
   31628:	addne	r1, r0, r3
   3162c:	mov	r0, #1
   31630:	str	r1, [sp, #40]	; 0x28
   31634:	str	r0, [sp, #20]
   31638:	b	3166c <__assert_fail@plt+0x1ebf0>
   3163c:	ldrb	r0, [r8, #20]
   31640:	cmp	r0, #0
   31644:	beq	31658 <__assert_fail@plt+0x1ebdc>
   31648:	cmp	r0, #46	; 0x2e
   3164c:	ldrbeq	r0, [r8, #21]
   31650:	cmpeq	r0, #0
   31654:	bne	31544 <__assert_fail@plt+0x1eac8>
   31658:	ldr	r4, [fp, #-40]	; 0xffffffd8
   3165c:	mov	r7, #0
   31660:	b	31810 <__assert_fail@plt+0x1ed94>
   31664:	ldr	r4, [fp, #-40]	; 0xffffffd8
   31668:	ldr	r3, [fp, #-48]	; 0xffffffd0
   3166c:	ldr	r0, [r5, #36]	; 0x24
   31670:	sub	r0, r0, r3
   31674:	cmp	r7, r3
   31678:	bcc	319e4 <__assert_fail@plt+0x1ef68>
   3167c:	str	r0, [fp, #-44]	; 0xffffffd4
   31680:	ldr	r0, [sp, #24]
   31684:	str	r0, [r6, #48]	; 0x30
   31688:	ldr	r0, [r5]
   3168c:	str	r7, [r6, #40]	; 0x28
   31690:	str	r0, [r6, #4]
   31694:	ldrd	r0, [r8]
   31698:	strd	r0, [r6, #160]	; 0xa0
   3169c:	ldrb	r0, [r5, #48]	; 0x30
   316a0:	tst	r0, #4
   316a4:	bne	316b0 <__assert_fail@plt+0x1ec34>
   316a8:	str	sl, [r6, #24]
   316ac:	b	316cc <__assert_fail@plt+0x1ec50>
   316b0:	ldr	r0, [r6, #28]
   316b4:	ldr	r1, [r6, #52]	; 0x34
   316b8:	str	r0, [r6, #24]
   316bc:	ldr	r0, [sp, #40]	; 0x28
   316c0:	add	r2, r1, #1
   316c4:	mov	r1, sl
   316c8:	bl	1244c <memmove@plt>
   316cc:	ldr	r0, [sp, #52]	; 0x34
   316d0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   316d4:	ldr	sl, [sp, #28]
   316d8:	ldr	r0, [r0]
   316dc:	ldr	r2, [r1]
   316e0:	cmp	r0, #0
   316e4:	beq	3170c <__assert_fail@plt+0x1ec90>
   316e8:	ands	r0, r2, #1024	; 0x400
   316ec:	bne	3170c <__assert_fail@plt+0x1ec90>
   316f0:	mov	r0, r5
   316f4:	mov	r1, r6
   316f8:	mov	r2, #0
   316fc:	bl	30314 <__assert_fail@plt+0x1d898>
   31700:	mov	r7, #0
   31704:	strh	r0, [r6, #56]	; 0x38
   31708:	b	31780 <__assert_fail@plt+0x1ed04>
   3170c:	ldrb	r3, [r8, #18]
   31710:	mov	r0, #0
   31714:	tst	r2, #8
   31718:	mov	r1, #0
   3171c:	beq	31740 <__assert_fail@plt+0x1ecc4>
   31720:	orr	r1, r3, #4
   31724:	cmp	r1, #4
   31728:	mov	r1, #0
   3172c:	beq	31740 <__assert_fail@plt+0x1ecc4>
   31730:	eor	r1, r3, #10
   31734:	and	r2, r2, #16
   31738:	orrs	r1, r2, r1
   3173c:	movwne	r1, #1
   31740:	mov	r2, #11
   31744:	mov	r7, #0
   31748:	strh	r2, [r6, #56]	; 0x38
   3174c:	sub	r2, r3, #1
   31750:	uxtb	r3, r2
   31754:	cmp	r3, #11
   31758:	sxtbls	r0, r2
   3175c:	movwls	r2, #51216	; 0xc810
   31760:	movtls	r2, #4
   31764:	ldrls	r0, [r2, r0, lsl #2]
   31768:	cmp	r1, #0
   3176c:	str	r0, [r6, #80]	; 0x50
   31770:	mov	r0, #2
   31774:	movwne	r0, #1
   31778:	str	r0, [r6, #112]	; 0x70
   3177c:	str	r7, [r6, #116]	; 0x74
   31780:	cmp	r9, #0
   31784:	str	r7, [r6, #8]
   31788:	ldrne	r0, [sp, #48]	; 0x30
   3178c:	moveq	r9, r6
   31790:	strne	r6, [r0, #8]
   31794:	movw	r0, #10000	; 0x2710
   31798:	cmp	r4, r0
   3179c:	bne	317f0 <__assert_fail@plt+0x1ed74>
   317a0:	ldr	r0, [sp, #52]	; 0x34
   317a4:	ldr	r0, [r0]
   317a8:	cmp	r0, #0
   317ac:	bne	317f0 <__assert_fail@plt+0x1ed74>
   317b0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   317b4:	mov	r0, sl
   317b8:	bl	32078 <__assert_fail@plt+0x1f5fc>
   317bc:	mov	r1, #0
   317c0:	str	r1, [sp, #12]
   317c4:	movw	r1, #19778	; 0x4d42
   317c8:	movt	r1, #65363	; 0xff53
   317cc:	cmp	r0, r1
   317d0:	movwne	r1, #26985	; 0x6969
   317d4:	cmpne	r0, r1
   317d8:	beq	317f0 <__assert_fail@plt+0x1ed74>
   317dc:	movw	r1, #6548	; 0x1994
   317e0:	movt	r1, #258	; 0x102
   317e4:	cmp	r0, r1
   317e8:	movne	r0, #1
   317ec:	strne	r0, [sp, #12]
   317f0:	ldr	r0, [sp, #32]
   317f4:	add	r4, r4, #1
   317f8:	cmp	r0, r4
   317fc:	mov	r0, #0
   31800:	movwls	r0, #15
   31804:	cmp	r0, #0
   31808:	bne	31a58 <__assert_fail@plt+0x1efdc>
   3180c:	str	r6, [sp, #48]	; 0x30
   31810:	ldr	r6, [sl, #12]
   31814:	cmp	r6, #0
   31818:	bne	31508 <__assert_fail@plt+0x1ea8c>
   3181c:	ldr	r0, [sp, #20]
   31820:	ldr	ip, [sp, #4]
   31824:	ldr	r6, [sp, #12]
   31828:	b	319cc <__assert_fail@plt+0x1ef50>
   3182c:	mov	r4, #0
   31830:	mov	r6, #0
   31834:	ldrb	r0, [r7]
   31838:	tst	r0, #4
   3183c:	beq	31868 <__assert_fail@plt+0x1edec>
   31840:	ldr	r2, [sp, #40]	; 0x28
   31844:	ldr	r0, [r5, #36]	; 0x24
   31848:	ldr	r3, [fp, #-48]	; 0xffffffd0
   3184c:	cmp	r3, r0
   31850:	sub	r1, r2, #1
   31854:	mov	r0, #0
   31858:	moveq	r2, r1
   3185c:	cmp	r4, #0
   31860:	moveq	r2, r1
   31864:	strb	r0, [r2]
   31868:	ldr	r0, [sp, #16]
   3186c:	cmp	r0, #0
   31870:	movwne	r0, #1
   31874:	orrs	r0, r0, ip
   31878:	beq	318dc <__assert_fail@plt+0x1ee60>
   3187c:	cmp	r4, #0
   31880:	bne	3191c <__assert_fail@plt+0x1eea0>
   31884:	ldr	r0, [sp, #8]
   31888:	cmp	r0, #3
   3188c:	bne	318a4 <__assert_fail@plt+0x1ee28>
   31890:	ldrh	r0, [sl, #56]	; 0x38
   31894:	cmp	r0, #4
   31898:	cmpne	r0, #7
   3189c:	movne	r0, #6
   318a0:	strhne	r0, [sl, #56]	; 0x38
   318a4:	mov	r6, #0
   318a8:	cmp	r9, #0
   318ac:	beq	31b7c <__assert_fail@plt+0x1f100>
   318b0:	ldrd	r4, [r9, #8]
   318b4:	cmp	r5, #0
   318b8:	beq	318c4 <__assert_fail@plt+0x1ee48>
   318bc:	mov	r0, r5
   318c0:	bl	12a4c <closedir@plt>
   318c4:	mov	r0, r9
   318c8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   318cc:	cmp	r4, #0
   318d0:	mov	r9, r4
   318d4:	bne	318b0 <__assert_fail@plt+0x1ee34>
   318d8:	b	31b7c <__assert_fail@plt+0x1f100>
   318dc:	ldr	r0, [sp, #8]
   318e0:	cmp	r0, #1
   318e4:	cmpne	r4, #0
   318e8:	bne	3191c <__assert_fail@plt+0x1eea0>
   318ec:	ldr	r0, [sl, #48]	; 0x30
   318f0:	cmp	r0, #0
   318f4:	beq	31a6c <__assert_fail@plt+0x1eff0>
   318f8:	ldr	r1, [sl, #4]
   318fc:	movw	r3, #51201	; 0xc801
   31900:	mov	r0, r5
   31904:	mvn	r2, #0
   31908:	movt	r3, #4
   3190c:	bl	30f7c <__assert_fail@plt+0x1e500>
   31910:	cmp	r0, #0
   31914:	bne	31a7c <__assert_fail@plt+0x1f000>
   31918:	b	3187c <__assert_fail@plt+0x1ee00>
   3191c:	tst	r6, #1
   31920:	beq	31950 <__assert_fail@plt+0x1eed4>
   31924:	movw	r0, #8256	; 0x2040
   31928:	mov	r1, r9
   3192c:	mov	r2, r4
   31930:	movt	r0, #3
   31934:	str	r0, [r5, #44]	; 0x2c
   31938:	mov	r0, r5
   3193c:	bl	304ac <__assert_fail@plt+0x1da30>
   31940:	mov	r6, r0
   31944:	mov	r0, #0
   31948:	str	r0, [r5, #44]	; 0x2c
   3194c:	b	31b7c <__assert_fail@plt+0x1f100>
   31950:	cmp	r4, #2
   31954:	bcc	319dc <__assert_fail@plt+0x1ef60>
   31958:	ldr	r0, [sp, #52]	; 0x34
   3195c:	ldr	r0, [r0]
   31960:	cmp	r0, #0
   31964:	beq	319dc <__assert_fail@plt+0x1ef60>
   31968:	mov	r0, r5
   3196c:	mov	r1, r9
   31970:	mov	r2, r4
   31974:	bl	304ac <__assert_fail@plt+0x1da30>
   31978:	mov	r6, r0
   3197c:	b	31b7c <__assert_fail@plt+0x1f100>
   31980:	ldr	r0, [sp, #36]	; 0x24
   31984:	ldr	r0, [r0]
   31988:	cmp	r0, #0
   3198c:	beq	319a8 <__assert_fail@plt+0x1ef2c>
   31990:	str	r0, [sl, #32]
   31994:	ldr	r0, [sp, #16]
   31998:	orrs	r0, r0, r4
   3199c:	mov	r0, #4
   319a0:	movwne	r0, #7
   319a4:	strh	r0, [sl, #56]	; 0x38
   319a8:	ldr	r0, [sl, #12]
   319ac:	ldr	r6, [sp, #12]
   319b0:	cmp	r0, #0
   319b4:	beq	31b90 <__assert_fail@plt+0x1f114>
   319b8:	bl	12a4c <closedir@plt>
   319bc:	mov	r0, #0
   319c0:	ldr	ip, [sp, #4]
   319c4:	str	r0, [sl, #12]
   319c8:	ldr	r0, [sp, #20]
   319cc:	tst	r0, #1
   319d0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   319d4:	beq	31834 <__assert_fail@plt+0x1edb8>
   319d8:	b	31ba4 <__assert_fail@plt+0x1f128>
   319dc:	mov	r6, r9
   319e0:	b	31b7c <__assert_fail@plt+0x1f100>
   319e4:	mov	r0, r6
   319e8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   319ec:	ldr	r7, [sp, #28]
   319f0:	cmp	r9, #0
   319f4:	beq	31a20 <__assert_fail@plt+0x1efa4>
   319f8:	ldrd	r4, [r9, #8]
   319fc:	cmp	r5, #0
   31a00:	beq	31a0c <__assert_fail@plt+0x1ef90>
   31a04:	mov	r0, r5
   31a08:	bl	12a4c <closedir@plt>
   31a0c:	mov	r0, r9
   31a10:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   31a14:	cmp	r4, #0
   31a18:	mov	r9, r4
   31a1c:	bne	319f8 <__assert_fail@plt+0x1ef7c>
   31a20:	ldr	r0, [r7, #12]
   31a24:	bl	12a4c <closedir@plt>
   31a28:	ldr	r1, [fp, #-36]	; 0xffffffdc
   31a2c:	mov	r6, #0
   31a30:	mov	r0, #7
   31a34:	str	r6, [r7, #12]
   31a38:	strh	r0, [r7, #56]	; 0x38
   31a3c:	ldr	r0, [r1]
   31a40:	orr	r0, r0, #8192	; 0x2000
   31a44:	str	r0, [r1]
   31a48:	ldr	r1, [sp, #36]	; 0x24
   31a4c:	mov	r0, #36	; 0x24
   31a50:	str	r0, [r1]
   31a54:	b	31b7c <__assert_fail@plt+0x1f100>
   31a58:	ldr	ip, [sp, #4]
   31a5c:	cmp	r0, #15
   31a60:	bne	31b88 <__assert_fail@plt+0x1f10c>
   31a64:	ldr	r6, [sp, #12]
   31a68:	b	31b94 <__assert_fail@plt+0x1f118>
   31a6c:	mov	r0, r5
   31a70:	bl	31c88 <__assert_fail@plt+0x1f20c>
   31a74:	cmp	r0, #0
   31a78:	beq	3187c <__assert_fail@plt+0x1ee00>
   31a7c:	mov	r0, #7
   31a80:	mov	r6, #0
   31a84:	cmp	r9, #0
   31a88:	strh	r0, [sl, #56]	; 0x38
   31a8c:	ldr	r0, [r7]
   31a90:	orr	r0, r0, #8192	; 0x2000
   31a94:	str	r0, [r7]
   31a98:	beq	31b7c <__assert_fail@plt+0x1f100>
   31a9c:	ldrd	r4, [r9, #8]
   31aa0:	cmp	r5, #0
   31aa4:	beq	31ab0 <__assert_fail@plt+0x1f034>
   31aa8:	mov	r0, r5
   31aac:	bl	12a4c <closedir@plt>
   31ab0:	mov	r0, r9
   31ab4:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   31ab8:	cmp	r4, #0
   31abc:	mov	r9, r4
   31ac0:	bne	31a9c <__assert_fail@plt+0x1f020>
   31ac4:	b	31b7c <__assert_fail@plt+0x1f100>
   31ac8:	mov	r0, r4
   31acc:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   31ad0:	ldr	r1, [sp, #36]	; 0x24
   31ad4:	mov	r0, #0
   31ad8:	str	r0, [r5, #24]
   31adc:	mov	r0, #36	; 0x24
   31ae0:	str	r0, [r1]
   31ae4:	b	31b08 <__assert_fail@plt+0x1f08c>
   31ae8:	bl	127d0 <__errno_location@plt>
   31aec:	mov	r1, #12
   31af0:	str	r1, [r0]
   31af4:	b	31b7c <__assert_fail@plt+0x1f100>
   31af8:	ldr	r0, [r5, #24]
   31afc:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   31b00:	mov	r0, #0
   31b04:	str	r0, [r5, #24]
   31b08:	ldr	sl, [sp, #28]
   31b0c:	ldr	r0, [sp, #36]	; 0x24
   31b10:	ldr	r4, [r0]
   31b14:	mov	r0, r6
   31b18:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   31b1c:	cmp	r9, #0
   31b20:	beq	31b4c <__assert_fail@plt+0x1f0d0>
   31b24:	ldrd	r6, [r9, #8]
   31b28:	cmp	r7, #0
   31b2c:	beq	31b38 <__assert_fail@plt+0x1f0bc>
   31b30:	mov	r0, r7
   31b34:	bl	12a4c <closedir@plt>
   31b38:	mov	r0, r9
   31b3c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   31b40:	cmp	r6, #0
   31b44:	mov	r9, r6
   31b48:	bne	31b24 <__assert_fail@plt+0x1f0a8>
   31b4c:	ldr	r0, [sl, #12]
   31b50:	bl	12a4c <closedir@plt>
   31b54:	ldr	r1, [fp, #-36]	; 0xffffffdc
   31b58:	mov	r6, #0
   31b5c:	mov	r0, #7
   31b60:	str	r6, [sl, #12]
   31b64:	strh	r0, [sl, #56]	; 0x38
   31b68:	ldr	r0, [r1]
   31b6c:	orr	r0, r0, #8192	; 0x2000
   31b70:	str	r0, [r1]
   31b74:	ldr	r0, [sp, #36]	; 0x24
   31b78:	str	r4, [r0]
   31b7c:	mov	r0, r6
   31b80:	sub	sp, fp, #28
   31b84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31b88:	mov	r6, #0
   31b8c:	b	31b7c <__assert_fail@plt+0x1f100>
   31b90:	ldr	ip, [sp, #4]
   31b94:	ldr	r0, [sp, #20]
   31b98:	ldr	r7, [fp, #-36]	; 0xffffffdc
   31b9c:	tst	r0, #1
   31ba0:	beq	31834 <__assert_fail@plt+0x1edb8>
   31ba4:	ldr	r1, [r5, #4]
   31ba8:	ldr	r0, [r5, #24]
   31bac:	cmp	r1, #0
   31bb0:	beq	31be0 <__assert_fail@plt+0x1f164>
   31bb4:	ldr	r2, [r1, #24]
   31bb8:	add	r3, r1, #168	; 0xa8
   31bbc:	cmp	r2, r3
   31bc0:	ldrne	r3, [r1, #28]
   31bc4:	subne	r2, r2, r3
   31bc8:	addne	r2, r0, r2
   31bcc:	strne	r2, [r1, #24]
   31bd0:	str	r0, [r1, #28]
   31bd4:	ldr	r1, [r1, #8]
   31bd8:	cmp	r1, #0
   31bdc:	bne	31bb4 <__assert_fail@plt+0x1f138>
   31be0:	ldr	r1, [r9, #48]	; 0x30
   31be4:	cmp	r1, #0
   31be8:	blt	31834 <__assert_fail@plt+0x1edb8>
   31bec:	mov	r1, r9
   31bf0:	ldr	r2, [r1, #24]
   31bf4:	add	r3, r1, #168	; 0xa8
   31bf8:	cmp	r2, r3
   31bfc:	ldrne	r3, [r1, #28]
   31c00:	subne	r2, r2, r3
   31c04:	addne	r2, r0, r2
   31c08:	strne	r2, [r1, #24]
   31c0c:	str	r0, [r1, #28]
   31c10:	ldr	r2, [r1, #8]
   31c14:	cmp	r2, #0
   31c18:	ldreq	r2, [r1, #4]
   31c1c:	ldr	r1, [r2, #48]	; 0x30
   31c20:	cmn	r1, #1
   31c24:	mov	r1, r2
   31c28:	bgt	31bf0 <__assert_fail@plt+0x1f174>
   31c2c:	b	31834 <__assert_fail@plt+0x1edb8>
   31c30:	ldr	r1, [fp, #-32]	; 0xffffffe0
   31c34:	mov	r0, sl
   31c38:	bl	32078 <__assert_fail@plt+0x1f5fc>
   31c3c:	movw	r1, #26984	; 0x6968
   31c40:	cmp	r0, r1
   31c44:	ble	31c70 <__assert_fail@plt+0x1f1f4>
   31c48:	movw	r1, #26985	; 0x6969
   31c4c:	cmp	r0, r1
   31c50:	movwne	r1, #16719	; 0x414f
   31c54:	movtne	r1, #21318	; 0x5346
   31c58:	cmpne	r0, r1
   31c5c:	beq	313a0 <__assert_fail@plt+0x1e924>
   31c60:	movw	r1, #40864	; 0x9fa0
   31c64:	cmp	r0, r1
   31c68:	beq	313a0 <__assert_fail@plt+0x1e924>
   31c6c:	b	31370 <__assert_fail@plt+0x1e8f4>
   31c70:	movw	r1, #19778	; 0x4d42
   31c74:	movt	r1, #65363	; 0xff53
   31c78:	cmp	r0, r1
   31c7c:	cmpne	r0, #0
   31c80:	beq	313a0 <__assert_fail@plt+0x1e924>
   31c84:	b	31370 <__assert_fail@plt+0x1e8f4>
   31c88:	push	{r4, r5, fp, lr}
   31c8c:	add	fp, sp, #8
   31c90:	mov	r5, r0
   31c94:	ldr	r0, [r0, #48]	; 0x30
   31c98:	mov	r4, #0
   31c9c:	tst	r0, #4
   31ca0:	bne	31ce4 <__assert_fail@plt+0x1f268>
   31ca4:	tst	r0, #512	; 0x200
   31ca8:	bne	31cc4 <__assert_fail@plt+0x1f248>
   31cac:	ldr	r0, [r5, #28]
   31cb0:	bl	12980 <fchdir@plt>
   31cb4:	mov	r4, r0
   31cb8:	cmp	r0, #0
   31cbc:	movwne	r4, #1
   31cc0:	b	31ce4 <__assert_fail@plt+0x1f268>
   31cc4:	ldr	r1, [r5, #32]
   31cc8:	add	r0, r5, #60	; 0x3c
   31ccc:	bl	45e90 <__assert_fail@plt+0x33414>
   31cd0:	cmp	r0, #0
   31cd4:	blt	31cdc <__assert_fail@plt+0x1f260>
   31cd8:	bl	12a34 <close@plt>
   31cdc:	mvn	r0, #99	; 0x63
   31ce0:	str	r0, [r5, #32]
   31ce4:	add	r5, r5, #60	; 0x3c
   31ce8:	b	31cf0 <__assert_fail@plt+0x1f274>
   31cec:	bl	12a34 <close@plt>
   31cf0:	mov	r0, r5
   31cf4:	bl	45e88 <__assert_fail@plt+0x3340c>
   31cf8:	cmp	r0, #0
   31cfc:	movne	r0, r4
   31d00:	popne	{r4, r5, fp, pc}
   31d04:	mov	r0, r5
   31d08:	bl	45edc <__assert_fail@plt+0x33460>
   31d0c:	cmp	r0, #0
   31d10:	bge	31cec <__assert_fail@plt+0x1f270>
   31d14:	b	31cf0 <__assert_fail@plt+0x1f274>
   31d18:	push	{r4, r5, r6, r7, fp, lr}
   31d1c:	add	fp, sp, #16
   31d20:	mov	r6, r0
   31d24:	ldrh	r0, [r0, #48]	; 0x30
   31d28:	mov	r4, r1
   31d2c:	movw	r1, #258	; 0x102
   31d30:	tst	r0, r1
   31d34:	beq	31da8 <__assert_fail@plt+0x1f32c>
   31d38:	mov	r0, #24
   31d3c:	bl	3233c <__assert_fail@plt+0x1f8c0>
   31d40:	mov	r5, #0
   31d44:	cmp	r0, #0
   31d48:	beq	31dc8 <__assert_fail@plt+0x1f34c>
   31d4c:	mov	r7, r0
   31d50:	ldrd	r0, [r4, #64]	; 0x40
   31d54:	add	r2, r7, #8
   31d58:	stm	r7, {r0, r1}
   31d5c:	ldrd	r0, [r4, #160]	; 0xa0
   31d60:	stm	r2, {r0, r1, r4}
   31d64:	mov	r1, r7
   31d68:	ldr	r0, [r6, #56]	; 0x38
   31d6c:	bl	23b7c <__assert_fail@plt+0x11100>
   31d70:	cmp	r0, r7
   31d74:	beq	31d9c <__assert_fail@plt+0x1f320>
   31d78:	mov	r6, r0
   31d7c:	mov	r0, r7
   31d80:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   31d84:	cmp	r6, #0
   31d88:	beq	31dc8 <__assert_fail@plt+0x1f34c>
   31d8c:	ldr	r0, [r6, #16]
   31d90:	mov	r1, #2
   31d94:	strh	r1, [r4, #56]	; 0x38
   31d98:	str	r0, [r4]
   31d9c:	mov	r5, #1
   31da0:	mov	r0, r5
   31da4:	pop	{r4, r5, r6, r7, fp, pc}
   31da8:	ldr	r0, [r6, #56]	; 0x38
   31dac:	add	r1, r4, #64	; 0x40
   31db0:	bl	45c44 <__assert_fail@plt+0x331c8>
   31db4:	cmp	r0, #0
   31db8:	mov	r5, #1
   31dbc:	movne	r0, #2
   31dc0:	strhne	r0, [r4, #56]	; 0x38
   31dc4:	strne	r4, [r4]
   31dc8:	mov	r0, r5
   31dcc:	pop	{r4, r5, r6, r7, fp, pc}
   31dd0:	cmp	r2, #5
   31dd4:	movcc	r0, #0
   31dd8:	strhcc	r2, [r1, #60]	; 0x3c
   31ddc:	bxcc	lr
   31de0:	push	{fp, lr}
   31de4:	mov	fp, sp
   31de8:	bl	127d0 <__errno_location@plt>
   31dec:	mov	r1, #22
   31df0:	str	r1, [r0]
   31df4:	mov	r0, #1
   31df8:	pop	{fp, pc}
   31dfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31e00:	add	fp, sp, #28
   31e04:	sub	sp, sp, #4
   31e08:	mov	r9, r0
   31e0c:	orr	r0, r1, #4096	; 0x1000
   31e10:	cmp	r0, #4096	; 0x1000
   31e14:	bne	31e54 <__assert_fail@plt+0x1f3d8>
   31e18:	ldr	r8, [r9]
   31e1c:	mov	r7, r1
   31e20:	bl	127d0 <__errno_location@plt>
   31e24:	mov	r5, #0
   31e28:	mov	sl, r0
   31e2c:	str	r5, [r0]
   31e30:	ldrb	r0, [r9, #49]	; 0x31
   31e34:	tst	r0, #32
   31e38:	bne	31e64 <__assert_fail@plt+0x1f3e8>
   31e3c:	ldrh	r0, [r8, #56]	; 0x38
   31e40:	cmp	r0, #1
   31e44:	beq	31e70 <__assert_fail@plt+0x1f3f4>
   31e48:	cmp	r0, #9
   31e4c:	ldreq	r5, [r8, #8]
   31e50:	b	31e64 <__assert_fail@plt+0x1f3e8>
   31e54:	bl	127d0 <__errno_location@plt>
   31e58:	mov	r1, #22
   31e5c:	mov	r5, #0
   31e60:	str	r1, [r0]
   31e64:	mov	r0, r5
   31e68:	sub	sp, fp, #28
   31e6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31e70:	ldr	r6, [r9, #4]
   31e74:	cmp	r6, #0
   31e78:	beq	31ea8 <__assert_fail@plt+0x1f42c>
   31e7c:	ldr	r4, [r6, #8]
   31e80:	ldr	r1, [r6, #12]
   31e84:	cmp	r1, #0
   31e88:	beq	31e94 <__assert_fail@plt+0x1f418>
   31e8c:	mov	r0, r1
   31e90:	bl	12a4c <closedir@plt>
   31e94:	mov	r0, r6
   31e98:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   31e9c:	cmp	r4, #0
   31ea0:	mov	r6, r4
   31ea4:	bne	31e7c <__assert_fail@plt+0x1f400>
   31ea8:	cmp	r7, #4096	; 0x1000
   31eac:	mov	r4, #1
   31eb0:	ldreq	r0, [r9, #48]	; 0x30
   31eb4:	moveq	r4, #2
   31eb8:	orreq	r0, r0, #4096	; 0x1000
   31ebc:	streq	r0, [r9, #48]	; 0x30
   31ec0:	ldr	r0, [r8, #48]	; 0x30
   31ec4:	cmp	r0, #0
   31ec8:	bne	31f14 <__assert_fail@plt+0x1f498>
   31ecc:	ldr	r0, [r8, #24]
   31ed0:	ldrb	r0, [r0]
   31ed4:	cmp	r0, #47	; 0x2f
   31ed8:	beq	31f14 <__assert_fail@plt+0x1f498>
   31edc:	ldr	r0, [r9, #48]	; 0x30
   31ee0:	tst	r0, #4
   31ee4:	bne	31f14 <__assert_fail@plt+0x1f498>
   31ee8:	mov	r1, #32768	; 0x8000
   31eec:	tst	r0, #512	; 0x200
   31ef0:	and	r1, r1, r0, lsl #11
   31ef4:	orr	r1, r1, #18688	; 0x4900
   31ef8:	orr	r2, r1, #524288	; 0x80000
   31efc:	bne	31f2c <__assert_fail@plt+0x1f4b0>
   31f00:	movw	r0, #31476	; 0x7af4
   31f04:	mov	r1, r2
   31f08:	movt	r0, #4
   31f0c:	bl	22960 <__assert_fail@plt+0xfee4>
   31f10:	b	31f3c <__assert_fail@plt+0x1f4c0>
   31f14:	mov	r0, r9
   31f18:	mov	r1, r4
   31f1c:	bl	311d4 <__assert_fail@plt+0x1e758>
   31f20:	mov	r5, r0
   31f24:	str	r0, [r9, #4]
   31f28:	b	31e64 <__assert_fail@plt+0x1f3e8>
   31f2c:	ldr	r0, [r9, #32]
   31f30:	movw	r1, #31476	; 0x7af4
   31f34:	movt	r1, #4
   31f38:	bl	26374 <__assert_fail@plt+0x138f8>
   31f3c:	mov	r8, r0
   31f40:	cmn	r0, #1
   31f44:	ble	31f88 <__assert_fail@plt+0x1f50c>
   31f48:	mov	r0, r9
   31f4c:	mov	r1, r4
   31f50:	bl	311d4 <__assert_fail@plt+0x1e758>
   31f54:	str	r0, [r9, #4]
   31f58:	ldrb	r0, [r9, #49]	; 0x31
   31f5c:	tst	r0, #2
   31f60:	bne	31f94 <__assert_fail@plt+0x1f518>
   31f64:	mov	r0, r8
   31f68:	bl	12980 <fchdir@plt>
   31f6c:	cmp	r0, #0
   31f70:	beq	31fc4 <__assert_fail@plt+0x1f548>
   31f74:	ldr	r4, [sl]
   31f78:	mov	r0, r8
   31f7c:	bl	12a34 <close@plt>
   31f80:	str	r4, [sl]
   31f84:	b	31e64 <__assert_fail@plt+0x1f3e8>
   31f88:	mov	r5, #0
   31f8c:	str	r5, [r9, #4]
   31f90:	b	31e64 <__assert_fail@plt+0x1f3e8>
   31f94:	ldr	r1, [r9, #32]
   31f98:	cmp	r1, r8
   31f9c:	bne	31fa8 <__assert_fail@plt+0x1f52c>
   31fa0:	cmn	r1, #100	; 0x64
   31fa4:	bne	31fd4 <__assert_fail@plt+0x1f558>
   31fa8:	add	r0, r9, #60	; 0x3c
   31fac:	bl	45e90 <__assert_fail@plt+0x33414>
   31fb0:	cmp	r0, #0
   31fb4:	blt	31fbc <__assert_fail@plt+0x1f540>
   31fb8:	bl	12a34 <close@plt>
   31fbc:	str	r8, [r9, #32]
   31fc0:	b	31fcc <__assert_fail@plt+0x1f550>
   31fc4:	mov	r0, r8
   31fc8:	bl	12a34 <close@plt>
   31fcc:	ldr	r5, [r9, #4]
   31fd0:	b	31e64 <__assert_fail@plt+0x1f3e8>
   31fd4:	bl	12a28 <abort@plt>
   31fd8:	push	{fp, lr}
   31fdc:	mov	fp, sp
   31fe0:	mov	r2, r1
   31fe4:	ldrd	r0, [r0, #8]
   31fe8:	mov	r3, #0
   31fec:	bl	466fc <__assert_fail@plt+0x33c80>
   31ff0:	mov	r0, r2
   31ff4:	pop	{fp, pc}
   31ff8:	push	{r4, r5, fp, lr}
   31ffc:	add	fp, sp, #8
   32000:	ldrd	r2, [r1, #8]
   32004:	ldrd	r4, [r0, #8]
   32008:	eor	r3, r5, r3
   3200c:	eor	r2, r4, r2
   32010:	orrs	r2, r2, r3
   32014:	mov	r2, #0
   32018:	bne	32038 <__assert_fail@plt+0x1f5bc>
   3201c:	ldrd	r2, [r1]
   32020:	ldrd	r0, [r0]
   32024:	eor	r1, r1, r3
   32028:	eor	r0, r0, r2
   3202c:	orr	r0, r0, r1
   32030:	clz	r0, r0
   32034:	lsr	r2, r0, #5
   32038:	mov	r0, r2
   3203c:	pop	{r4, r5, fp, pc}
   32040:	push	{r4, r5, fp, lr}
   32044:	add	fp, sp, #8
   32048:	ldr	r0, [r0]
   3204c:	ldrd	r2, [r0, #160]	; 0xa0
   32050:	ldr	r0, [r1]
   32054:	ldrd	r4, [r0, #160]	; 0xa0
   32058:	mov	r0, #0
   3205c:	subs	r1, r4, r2
   32060:	sbcs	r1, r5, r3
   32064:	movwcc	r0, #1
   32068:	subs	r1, r2, r4
   3206c:	sbcs	r1, r3, r5
   32070:	subcc	r0, r0, #1
   32074:	pop	{r4, r5, fp, pc}
   32078:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3207c:	add	fp, sp, #24
   32080:	sub	sp, sp, #96	; 0x60
   32084:	ldr	r7, [r0, #44]	; 0x2c
   32088:	mov	r4, r0
   3208c:	mov	r5, #0
   32090:	ldrb	r0, [r7, #49]	; 0x31
   32094:	tst	r0, #2
   32098:	beq	32194 <__assert_fail@plt+0x1f718>
   3209c:	ldr	r6, [r7, #52]	; 0x34
   320a0:	mov	r9, r1
   320a4:	cmp	r6, #0
   320a8:	bne	320e8 <__assert_fail@plt+0x1f66c>
   320ac:	movw	r0, #64876	; 0xfd6c
   320b0:	movw	r2, #8608	; 0x21a0
   320b4:	movw	r3, #8640	; 0x21c0
   320b8:	mov	r1, #0
   320bc:	mov	r8, #0
   320c0:	movt	r0, #2
   320c4:	movt	r2, #3
   320c8:	movt	r3, #3
   320cc:	str	r0, [sp]
   320d0:	mov	r0, #13
   320d4:	bl	23038 <__assert_fail@plt+0x105bc>
   320d8:	mov	r6, r0
   320dc:	cmp	r0, #0
   320e0:	str	r0, [r7, #52]	; 0x34
   320e4:	beq	32120 <__assert_fail@plt+0x1f6a4>
   320e8:	ldrd	r0, [r4, #64]	; 0x40
   320ec:	str	r1, [sp, #12]
   320f0:	str	r0, [sp, #8]
   320f4:	add	r1, sp, #8
   320f8:	mov	r0, r6
   320fc:	bl	22d88 <__assert_fail@plt+0x1030c>
   32100:	cmp	r0, #0
   32104:	beq	32110 <__assert_fail@plt+0x1f694>
   32108:	ldr	r5, [r0, #8]
   3210c:	b	32194 <__assert_fail@plt+0x1f718>
   32110:	mov	r8, #1
   32114:	cmp	r9, #0
   32118:	bge	3212c <__assert_fail@plt+0x1f6b0>
   3211c:	b	32194 <__assert_fail@plt+0x1f718>
   32120:	mov	r6, #0
   32124:	cmp	r9, #0
   32128:	blt	32194 <__assert_fail@plt+0x1f718>
   3212c:	add	r1, sp, #8
   32130:	mov	r0, r9
   32134:	bl	12350 <fstatfs64@plt>
   32138:	cmp	r0, #0
   3213c:	bne	32194 <__assert_fail@plt+0x1f718>
   32140:	cmp	r8, #0
   32144:	beq	32190 <__assert_fail@plt+0x1f714>
   32148:	mov	r0, #16
   3214c:	bl	3233c <__assert_fail@plt+0x1f8c0>
   32150:	cmp	r0, #0
   32154:	beq	32190 <__assert_fail@plt+0x1f714>
   32158:	mov	r5, r0
   3215c:	ldrd	r0, [r4, #64]	; 0x40
   32160:	ldr	r2, [sp, #8]
   32164:	stm	r5, {r0, r1, r2}
   32168:	mov	r0, r6
   3216c:	mov	r1, r5
   32170:	bl	23b7c <__assert_fail@plt+0x11100>
   32174:	cmp	r0, #0
   32178:	beq	32188 <__assert_fail@plt+0x1f70c>
   3217c:	cmp	r0, r5
   32180:	beq	32190 <__assert_fail@plt+0x1f714>
   32184:	bl	12a28 <abort@plt>
   32188:	mov	r0, r5
   3218c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   32190:	ldr	r5, [sp, #8]
   32194:	mov	r0, r5
   32198:	sub	sp, fp, #24
   3219c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   321a0:	push	{fp, lr}
   321a4:	mov	fp, sp
   321a8:	mov	r2, r1
   321ac:	ldrd	r0, [r0]
   321b0:	mov	r3, #0
   321b4:	bl	466fc <__assert_fail@plt+0x33c80>
   321b8:	mov	r0, r2
   321bc:	pop	{fp, pc}
   321c0:	ldrd	r2, [r1]
   321c4:	ldrd	r0, [r0]
   321c8:	eor	r1, r1, r3
   321cc:	eor	r0, r0, r2
   321d0:	orr	r0, r0, r1
   321d4:	clz	r0, r0
   321d8:	lsr	r0, r0, #5
   321dc:	bx	lr
   321e0:	push	{r4, r5, fp, lr}
   321e4:	add	fp, sp, #8
   321e8:	mov	r4, r1
   321ec:	bl	12770 <getfilecon@plt>
   321f0:	cmp	r0, #10
   321f4:	beq	3220c <__assert_fail@plt+0x1f790>
   321f8:	cmp	r0, #0
   321fc:	bne	32250 <__assert_fail@plt+0x1f7d4>
   32200:	bl	127d0 <__errno_location@plt>
   32204:	mov	r1, #95	; 0x5f
   32208:	b	32248 <__assert_fail@plt+0x1f7cc>
   3220c:	ldr	r5, [r4]
   32210:	movw	r1, #51264	; 0xc840
   32214:	movt	r1, #4
   32218:	mov	r0, r5
   3221c:	bl	123d4 <strcmp@plt>
   32220:	mov	r1, r0
   32224:	mov	r0, #10
   32228:	cmp	r1, #0
   3222c:	popne	{r4, r5, fp, pc}
   32230:	mov	r0, r5
   32234:	bl	129a4 <freecon@plt>
   32238:	mov	r0, #0
   3223c:	str	r0, [r4]
   32240:	bl	127d0 <__errno_location@plt>
   32244:	mov	r1, #61	; 0x3d
   32248:	str	r1, [r0]
   3224c:	mvn	r0, #0
   32250:	pop	{r4, r5, fp, pc}
   32254:	push	{r4, r5, fp, lr}
   32258:	add	fp, sp, #8
   3225c:	mov	r4, r1
   32260:	bl	126bc <lgetfilecon@plt>
   32264:	cmp	r0, #10
   32268:	beq	32280 <__assert_fail@plt+0x1f804>
   3226c:	cmp	r0, #0
   32270:	bne	322c4 <__assert_fail@plt+0x1f848>
   32274:	bl	127d0 <__errno_location@plt>
   32278:	mov	r1, #95	; 0x5f
   3227c:	b	322bc <__assert_fail@plt+0x1f840>
   32280:	ldr	r5, [r4]
   32284:	movw	r1, #51264	; 0xc840
   32288:	movt	r1, #4
   3228c:	mov	r0, r5
   32290:	bl	123d4 <strcmp@plt>
   32294:	mov	r1, r0
   32298:	mov	r0, #10
   3229c:	cmp	r1, #0
   322a0:	popne	{r4, r5, fp, pc}
   322a4:	mov	r0, r5
   322a8:	bl	129a4 <freecon@plt>
   322ac:	mov	r0, #0
   322b0:	str	r0, [r4]
   322b4:	bl	127d0 <__errno_location@plt>
   322b8:	mov	r1, #61	; 0x3d
   322bc:	str	r1, [r0]
   322c0:	mvn	r0, #0
   322c4:	pop	{r4, r5, fp, pc}
   322c8:	push	{r4, r5, fp, lr}
   322cc:	add	fp, sp, #8
   322d0:	mov	r4, r1
   322d4:	bl	12578 <fgetfilecon@plt>
   322d8:	cmp	r0, #10
   322dc:	beq	322f4 <__assert_fail@plt+0x1f878>
   322e0:	cmp	r0, #0
   322e4:	bne	32338 <__assert_fail@plt+0x1f8bc>
   322e8:	bl	127d0 <__errno_location@plt>
   322ec:	mov	r1, #95	; 0x5f
   322f0:	b	32330 <__assert_fail@plt+0x1f8b4>
   322f4:	ldr	r5, [r4]
   322f8:	movw	r1, #51264	; 0xc840
   322fc:	movt	r1, #4
   32300:	mov	r0, r5
   32304:	bl	123d4 <strcmp@plt>
   32308:	mov	r1, r0
   3230c:	mov	r0, #10
   32310:	cmp	r1, #0
   32314:	popne	{r4, r5, fp, pc}
   32318:	mov	r0, r5
   3231c:	bl	129a4 <freecon@plt>
   32320:	mov	r0, #0
   32324:	str	r0, [r4]
   32328:	bl	127d0 <__errno_location@plt>
   3232c:	mov	r1, #61	; 0x3d
   32330:	str	r1, [r0]
   32334:	mvn	r0, #0
   32338:	pop	{r4, r5, fp, pc}
   3233c:	cmp	r0, #0
   32340:	movweq	r0, #1
   32344:	cmn	r0, #1
   32348:	ble	32350 <__assert_fail@plt+0x1f8d4>
   3234c:	b	126c8 <malloc@plt>
   32350:	push	{fp, lr}
   32354:	mov	fp, sp
   32358:	bl	127d0 <__errno_location@plt>
   3235c:	mov	r1, #12
   32360:	str	r1, [r0]
   32364:	mov	r0, #0
   32368:	pop	{fp, pc}
   3236c:	push	{r4, r5, r6, r7, fp, lr}
   32370:	add	fp, sp, #16
   32374:	sub	sp, sp, #8
   32378:	add	r5, sp, #4
   3237c:	cmp	r0, #0
   32380:	mov	r7, r2
   32384:	mov	r4, r1
   32388:	movne	r5, r0
   3238c:	mov	r0, r5
   32390:	bl	1265c <mbrtowc@plt>
   32394:	mov	r6, r0
   32398:	cmp	r7, #0
   3239c:	beq	323c0 <__assert_fail@plt+0x1f944>
   323a0:	cmn	r6, #2
   323a4:	bcc	323c0 <__assert_fail@plt+0x1f944>
   323a8:	mov	r0, #0
   323ac:	bl	45e00 <__assert_fail@plt+0x33384>
   323b0:	cmp	r0, #0
   323b4:	ldrbeq	r0, [r4]
   323b8:	moveq	r6, #1
   323bc:	streq	r0, [r5]
   323c0:	mov	r0, r6
   323c4:	sub	sp, fp, #16
   323c8:	pop	{r4, r5, r6, r7, fp, pc}
   323cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   323d0:	add	fp, sp, #28
   323d4:	sub	sp, sp, #36	; 0x24
   323d8:	movw	r0, #51274	; 0xc84a
   323dc:	movw	r1, #44720	; 0xaeb0
   323e0:	movt	r0, #4
   323e4:	movt	r1, #4
   323e8:	bl	1298c <fopen64@plt>
   323ec:	cmp	r0, #0
   323f0:	beq	32b30 <__assert_fail@plt+0x200b4>
   323f4:	mov	sl, r0
   323f8:	mov	r0, #0
   323fc:	add	r1, sp, #24
   32400:	mov	r2, #10
   32404:	str	r0, [sp, #28]
   32408:	str	r0, [sp, #24]
   3240c:	add	r0, sp, #28
   32410:	mov	r3, sl
   32414:	bl	123a4 <__getdelim@plt>
   32418:	cmn	r0, #1
   3241c:	beq	32f04 <__assert_fail@plt+0x20488>
   32420:	movw	r8, #51295	; 0xc85f
   32424:	add	r0, sp, #32
   32428:	add	r9, sp, #12
   3242c:	add	r6, sp, #20
   32430:	add	r7, sp, #16
   32434:	add	r5, sp, #28
   32438:	add	r4, sp, #24
   3243c:	str	sl, [sp, #4]
   32440:	movt	r8, #4
   32444:	str	r0, [sp, #8]
   32448:	b	325bc <__assert_fail@plt+0x1fb40>
   3244c:	ldr	sl, [sp, #4]
   32450:	movw	r8, #51295	; 0xc85f
   32454:	add	r9, sp, #12
   32458:	add	r6, sp, #20
   3245c:	movt	r8, #4
   32460:	b	32b04 <__assert_fail@plt+0x20088>
   32464:	ldrb	r0, [r4]
   32468:	cmp	r0, #47	; 0x2f
   3246c:	ldrbeq	r0, [r4, #1]
   32470:	cmpeq	r0, #47	; 0x2f
   32474:	beq	32570 <__assert_fail@plt+0x1faf4>
   32478:	movw	r1, #51427	; 0xc8e3
   3247c:	mov	r0, r6
   32480:	movt	r1, #4
   32484:	bl	123d4 <strcmp@plt>
   32488:	cmp	r0, #0
   3248c:	beq	32ad0 <__assert_fail@plt+0x20054>
   32490:	movw	r1, #38048	; 0x94a0
   32494:	mov	r0, r6
   32498:	movt	r1, #4
   3249c:	bl	123d4 <strcmp@plt>
   324a0:	cmp	r0, #0
   324a4:	beq	32ad0 <__assert_fail@plt+0x20054>
   324a8:	movw	r1, #51432	; 0xc8e8
   324ac:	mov	r0, r6
   324b0:	movt	r1, #4
   324b4:	bl	123d4 <strcmp@plt>
   324b8:	cmp	r0, #0
   324bc:	beq	32ad0 <__assert_fail@plt+0x20054>
   324c0:	movw	r1, #51437	; 0xc8ed
   324c4:	mov	r0, r6
   324c8:	movt	r1, #4
   324cc:	bl	123d4 <strcmp@plt>
   324d0:	cmp	r0, #0
   324d4:	beq	32ad0 <__assert_fail@plt+0x20054>
   324d8:	movw	r1, #51448	; 0xc8f8
   324dc:	mov	r0, r6
   324e0:	movt	r1, #4
   324e4:	bl	123d4 <strcmp@plt>
   324e8:	cmp	r0, #0
   324ec:	beq	32ad0 <__assert_fail@plt+0x20054>
   324f0:	movw	r1, #51454	; 0xc8fe
   324f4:	mov	r0, r6
   324f8:	movt	r1, #4
   324fc:	bl	123d4 <strcmp@plt>
   32500:	cmp	r0, #0
   32504:	beq	32ad0 <__assert_fail@plt+0x20054>
   32508:	movw	r1, #51459	; 0xc903
   3250c:	mov	r0, r6
   32510:	movt	r1, #4
   32514:	bl	123d4 <strcmp@plt>
   32518:	cmp	r0, #0
   3251c:	beq	32ad0 <__assert_fail@plt+0x20054>
   32520:	movw	r1, #51465	; 0xc909
   32524:	mov	r0, r6
   32528:	movt	r1, #4
   3252c:	bl	123d4 <strcmp@plt>
   32530:	cmp	r0, #0
   32534:	beq	32ad0 <__assert_fail@plt+0x20054>
   32538:	movw	r1, #51471	; 0xc90f
   3253c:	mov	r0, r6
   32540:	movt	r1, #4
   32544:	bl	123d4 <strcmp@plt>
   32548:	cmp	r0, #0
   3254c:	add	r6, sp, #20
   32550:	beq	32ad4 <__assert_fail@plt+0x20058>
   32554:	movw	r0, #51476	; 0xc914
   32558:	mov	r1, r4
   3255c:	movt	r0, #4
   32560:	bl	123d4 <strcmp@plt>
   32564:	clz	r0, r0
   32568:	lsr	r8, r0, #5
   3256c:	b	32ad4 <__assert_fail@plt+0x20058>
   32570:	movw	r1, #51411	; 0xc8d3
   32574:	mov	r0, r6
   32578:	movt	r1, #4
   3257c:	bl	123d4 <strcmp@plt>
   32580:	cmp	r0, #0
   32584:	beq	32ad0 <__assert_fail@plt+0x20054>
   32588:	movw	r1, #51417	; 0xc8d9
   3258c:	mov	r0, r6
   32590:	movt	r1, #4
   32594:	bl	123d4 <strcmp@plt>
   32598:	cmp	r0, #0
   3259c:	beq	32ad0 <__assert_fail@plt+0x20054>
   325a0:	movw	r1, #51422	; 0xc8de
   325a4:	mov	r0, r6
   325a8:	movt	r1, #4
   325ac:	bl	123d4 <strcmp@plt>
   325b0:	cmp	r0, #0
   325b4:	bne	32478 <__assert_fail@plt+0x1f9fc>
   325b8:	b	32ad0 <__assert_fail@plt+0x20054>
   325bc:	ldr	r0, [sp, #28]
   325c0:	mov	r1, r8
   325c4:	mov	r2, r6
   325c8:	mov	r3, r7
   325cc:	str	r9, [sp]
   325d0:	bl	12920 <sscanf@plt>
   325d4:	orr	r0, r0, #1
   325d8:	cmp	r0, #3
   325dc:	bne	32b10 <__assert_fail@plt+0x20094>
   325e0:	ldr	r0, [sp, #12]
   325e4:	ldr	r1, [sp, #28]
   325e8:	add	r0, r1, r0
   325ec:	mov	r1, #32
   325f0:	mov	r5, r0
   325f4:	bl	12794 <strchr@plt>
   325f8:	cmp	r0, #0
   325fc:	beq	32b00 <__assert_fail@plt+0x20084>
   32600:	mov	r6, r0
   32604:	mov	r4, #0
   32608:	mov	r1, #32
   3260c:	strb	r4, [r6], #1
   32610:	mov	r0, r6
   32614:	bl	12794 <strchr@plt>
   32618:	cmp	r0, #0
   3261c:	beq	32b00 <__assert_fail@plt+0x20084>
   32620:	movw	r1, #51312	; 0xc870
   32624:	strb	r4, [r0], #1
   32628:	movt	r1, #4
   3262c:	bl	44518 <__assert_fail@plt+0x31a9c>
   32630:	cmp	r0, #0
   32634:	beq	32b00 <__assert_fail@plt+0x20084>
   32638:	add	sl, r0, #3
   3263c:	mov	r1, #32
   32640:	mov	r0, sl
   32644:	bl	12794 <strchr@plt>
   32648:	cmp	r0, #0
   3264c:	beq	3244c <__assert_fail@plt+0x1f9d0>
   32650:	mov	r9, r0
   32654:	mov	r4, #0
   32658:	mov	r1, #32
   3265c:	strb	r4, [r9], #1
   32660:	mov	r0, r9
   32664:	bl	12794 <strchr@plt>
   32668:	cmp	r0, #0
   3266c:	beq	3244c <__assert_fail@plt+0x1f9d0>
   32670:	strb	r4, [r0]
   32674:	mov	r0, r9
   32678:	bl	12788 <strlen@plt>
   3267c:	adds	r0, r0, #1
   32680:	mov	r8, r5
   32684:	beq	32704 <__assert_fail@plt+0x1fc88>
   32688:	mov	r2, #0
   3268c:	mov	r1, r9
   32690:	ldrb	r3, [r9, r2]
   32694:	add	r7, r2, #4
   32698:	cmp	r7, r0
   3269c:	bcs	326f4 <__assert_fail@plt+0x1fc78>
   326a0:	cmp	r3, #92	; 0x5c
   326a4:	bne	326f4 <__assert_fail@plt+0x1fc78>
   326a8:	add	r7, r9, r2
   326ac:	ldrb	r5, [r7, #1]
   326b0:	and	r4, r5, #252	; 0xfc
   326b4:	cmp	r4, #48	; 0x30
   326b8:	bne	326f4 <__assert_fail@plt+0x1fc78>
   326bc:	ldrb	r4, [r7, #2]
   326c0:	and	r7, r4, #248	; 0xf8
   326c4:	cmp	r7, #48	; 0x30
   326c8:	bne	326f4 <__assert_fail@plt+0x1fc78>
   326cc:	add	ip, r2, #3
   326d0:	ldrb	lr, [r9, ip]
   326d4:	and	r7, lr, #248	; 0xf8
   326d8:	cmp	r7, #48	; 0x30
   326dc:	bne	326f4 <__assert_fail@plt+0x1fc78>
   326e0:	lsl	r2, r5, #6
   326e4:	add	r2, r2, r4, lsl #3
   326e8:	add	r2, r2, lr
   326ec:	add	r3, r2, #80	; 0x50
   326f0:	mov	r2, ip
   326f4:	add	r2, r2, #1
   326f8:	strb	r3, [r1], #1
   326fc:	cmp	r2, r0
   32700:	bcc	32690 <__assert_fail@plt+0x1fc14>
   32704:	mov	r0, r6
   32708:	bl	12788 <strlen@plt>
   3270c:	adds	r0, r0, #1
   32710:	beq	32790 <__assert_fail@plt+0x1fd14>
   32714:	mov	r2, #0
   32718:	mov	r1, r6
   3271c:	ldrb	r3, [r6, r2]
   32720:	add	r7, r2, #4
   32724:	cmp	r7, r0
   32728:	bcs	32780 <__assert_fail@plt+0x1fd04>
   3272c:	cmp	r3, #92	; 0x5c
   32730:	bne	32780 <__assert_fail@plt+0x1fd04>
   32734:	add	r7, r6, r2
   32738:	ldrb	r5, [r7, #1]
   3273c:	and	r4, r5, #252	; 0xfc
   32740:	cmp	r4, #48	; 0x30
   32744:	bne	32780 <__assert_fail@plt+0x1fd04>
   32748:	ldrb	r4, [r7, #2]
   3274c:	and	r7, r4, #248	; 0xf8
   32750:	cmp	r7, #48	; 0x30
   32754:	bne	32780 <__assert_fail@plt+0x1fd04>
   32758:	add	ip, r2, #3
   3275c:	ldrb	lr, [r6, ip]
   32760:	and	r7, lr, #248	; 0xf8
   32764:	cmp	r7, #48	; 0x30
   32768:	bne	32780 <__assert_fail@plt+0x1fd04>
   3276c:	lsl	r2, r5, #6
   32770:	add	r2, r2, r4, lsl #3
   32774:	add	r2, r2, lr
   32778:	add	r3, r2, #80	; 0x50
   3277c:	mov	r2, ip
   32780:	add	r2, r2, #1
   32784:	strb	r3, [r1], #1
   32788:	cmp	r2, r0
   3278c:	bcc	3271c <__assert_fail@plt+0x1fca0>
   32790:	mov	r0, r8
   32794:	bl	12788 <strlen@plt>
   32798:	adds	r0, r0, #1
   3279c:	beq	3281c <__assert_fail@plt+0x1fda0>
   327a0:	mov	r2, #0
   327a4:	mov	r1, r8
   327a8:	ldrb	r3, [r8, r2]
   327ac:	add	r7, r2, #4
   327b0:	cmp	r7, r0
   327b4:	bcs	3280c <__assert_fail@plt+0x1fd90>
   327b8:	cmp	r3, #92	; 0x5c
   327bc:	bne	3280c <__assert_fail@plt+0x1fd90>
   327c0:	add	r7, r8, r2
   327c4:	ldrb	r5, [r7, #1]
   327c8:	and	r4, r5, #252	; 0xfc
   327cc:	cmp	r4, #48	; 0x30
   327d0:	bne	3280c <__assert_fail@plt+0x1fd90>
   327d4:	ldrb	r4, [r7, #2]
   327d8:	and	r7, r4, #248	; 0xf8
   327dc:	cmp	r7, #48	; 0x30
   327e0:	bne	3280c <__assert_fail@plt+0x1fd90>
   327e4:	add	ip, r2, #3
   327e8:	ldrb	lr, [r8, ip]
   327ec:	and	r7, lr, #248	; 0xf8
   327f0:	cmp	r7, #48	; 0x30
   327f4:	bne	3280c <__assert_fail@plt+0x1fd90>
   327f8:	lsl	r2, r5, #6
   327fc:	add	r2, r2, r4, lsl #3
   32800:	add	r2, r2, lr
   32804:	add	r3, r2, #80	; 0x50
   32808:	mov	r2, ip
   3280c:	add	r2, r2, #1
   32810:	strb	r3, [r1], #1
   32814:	cmp	r2, r0
   32818:	bcc	327a8 <__assert_fail@plt+0x1fd2c>
   3281c:	mov	r0, sl
   32820:	bl	12788 <strlen@plt>
   32824:	adds	r0, r0, #1
   32828:	beq	328a8 <__assert_fail@plt+0x1fe2c>
   3282c:	mov	r2, #0
   32830:	mov	r1, sl
   32834:	ldrb	r3, [sl, r2]
   32838:	add	r7, r2, #4
   3283c:	cmp	r7, r0
   32840:	bcs	32898 <__assert_fail@plt+0x1fe1c>
   32844:	cmp	r3, #92	; 0x5c
   32848:	bne	32898 <__assert_fail@plt+0x1fe1c>
   3284c:	add	r7, sl, r2
   32850:	ldrb	r5, [r7, #1]
   32854:	and	r4, r5, #252	; 0xfc
   32858:	cmp	r4, #48	; 0x30
   3285c:	bne	32898 <__assert_fail@plt+0x1fe1c>
   32860:	ldrb	r4, [r7, #2]
   32864:	and	r7, r4, #248	; 0xf8
   32868:	cmp	r7, #48	; 0x30
   3286c:	bne	32898 <__assert_fail@plt+0x1fe1c>
   32870:	add	ip, r2, #3
   32874:	ldrb	lr, [sl, ip]
   32878:	and	r7, lr, #248	; 0xf8
   3287c:	cmp	r7, #48	; 0x30
   32880:	bne	32898 <__assert_fail@plt+0x1fe1c>
   32884:	lsl	r2, r5, #6
   32888:	add	r2, r2, r4, lsl #3
   3288c:	add	r2, r2, lr
   32890:	add	r3, r2, #80	; 0x50
   32894:	mov	r2, ip
   32898:	add	r2, r2, #1
   3289c:	strb	r3, [r1], #1
   328a0:	cmp	r2, r0
   328a4:	bcc	32834 <__assert_fail@plt+0x1fdb8>
   328a8:	mov	r0, #32
   328ac:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   328b0:	mov	r7, r0
   328b4:	mov	r0, r9
   328b8:	bl	2e110 <__assert_fail@plt+0x1b694>
   328bc:	str	r0, [r7]
   328c0:	mov	r0, r6
   328c4:	bl	2e110 <__assert_fail@plt+0x1b694>
   328c8:	str	r0, [r7, #4]
   328cc:	mov	r0, r8
   328d0:	bl	2e110 <__assert_fail@plt+0x1b694>
   328d4:	str	r0, [r7, #8]
   328d8:	mov	r0, sl
   328dc:	bl	2e110 <__assert_fail@plt+0x1b694>
   328e0:	str	r0, [r7, #12]
   328e4:	mov	r6, r0
   328e8:	ldr	r2, [sp, #20]
   328ec:	ldrb	r0, [r7, #24]
   328f0:	mov	r3, r2
   328f4:	orr	r4, r0, #4
   328f8:	ldr	r0, [sp, #16]
   328fc:	bfc	r3, #0, #12
   32900:	strb	r4, [r7, #24]
   32904:	bic	r1, r0, #255	; 0xff
   32908:	uxtb	r0, r0
   3290c:	bfi	r0, r2, #8, #12
   32910:	orr	r3, r3, r1, lsr #20
   32914:	orr	r0, r0, r1, lsl #12
   32918:	movw	r1, #51316	; 0xc874
   3291c:	str	r3, [r7, #20]
   32920:	str	r0, [r7, #16]
   32924:	mov	r0, r6
   32928:	movt	r1, #4
   3292c:	bl	123d4 <strcmp@plt>
   32930:	cmp	r0, #0
   32934:	mov	r8, #1
   32938:	mov	r0, #1
   3293c:	beq	32aa8 <__assert_fail@plt+0x2002c>
   32940:	movw	r1, #51323	; 0xc87b
   32944:	mov	r0, r6
   32948:	movt	r1, #4
   3294c:	bl	123d4 <strcmp@plt>
   32950:	cmp	r0, #0
   32954:	mov	r0, #1
   32958:	beq	32aa8 <__assert_fail@plt+0x2002c>
   3295c:	movw	r1, #51328	; 0xc880
   32960:	mov	r0, r6
   32964:	movt	r1, #4
   32968:	bl	123d4 <strcmp@plt>
   3296c:	cmp	r0, #0
   32970:	mov	r0, #1
   32974:	beq	32aa8 <__assert_fail@plt+0x2002c>
   32978:	movw	r1, #51334	; 0xc886
   3297c:	mov	r0, r6
   32980:	movt	r1, #4
   32984:	bl	123d4 <strcmp@plt>
   32988:	cmp	r0, #0
   3298c:	mov	r0, #1
   32990:	beq	32aa8 <__assert_fail@plt+0x2002c>
   32994:	movw	r1, #51342	; 0xc88e
   32998:	mov	r0, r6
   3299c:	movt	r1, #4
   329a0:	bl	123d4 <strcmp@plt>
   329a4:	cmp	r0, #0
   329a8:	mov	r0, #1
   329ac:	beq	32aa8 <__assert_fail@plt+0x2002c>
   329b0:	movw	r1, #51349	; 0xc895
   329b4:	mov	r0, r6
   329b8:	movt	r1, #4
   329bc:	bl	123d4 <strcmp@plt>
   329c0:	cmp	r0, #0
   329c4:	mov	r0, #1
   329c8:	beq	32aa8 <__assert_fail@plt+0x2002c>
   329cc:	movw	r1, #51357	; 0xc89d
   329d0:	mov	r0, r6
   329d4:	movt	r1, #4
   329d8:	bl	123d4 <strcmp@plt>
   329dc:	cmp	r0, #0
   329e0:	mov	r0, #1
   329e4:	beq	32aa8 <__assert_fail@plt+0x2002c>
   329e8:	movw	r1, #51369	; 0xc8a9
   329ec:	mov	r0, r6
   329f0:	movt	r1, #4
   329f4:	bl	123d4 <strcmp@plt>
   329f8:	cmp	r0, #0
   329fc:	mov	r0, #1
   32a00:	beq	32aa8 <__assert_fail@plt+0x2002c>
   32a04:	movw	r1, #51376	; 0xc8b0
   32a08:	mov	r0, r6
   32a0c:	movt	r1, #4
   32a10:	bl	123d4 <strcmp@plt>
   32a14:	cmp	r0, #0
   32a18:	mov	r0, #1
   32a1c:	beq	32aa8 <__assert_fail@plt+0x2002c>
   32a20:	movw	r1, #51387	; 0xc8bb
   32a24:	mov	r0, r6
   32a28:	movt	r1, #4
   32a2c:	bl	123d4 <strcmp@plt>
   32a30:	cmp	r0, #0
   32a34:	mov	r0, #1
   32a38:	beq	32aa8 <__assert_fail@plt+0x2002c>
   32a3c:	movw	r1, #51393	; 0xc8c1
   32a40:	mov	r0, r6
   32a44:	movt	r1, #4
   32a48:	bl	123d4 <strcmp@plt>
   32a4c:	cmp	r0, #0
   32a50:	mov	r0, #1
   32a54:	beq	32aa8 <__assert_fail@plt+0x2002c>
   32a58:	movw	r1, #51399	; 0xc8c7
   32a5c:	mov	r0, r6
   32a60:	movt	r1, #4
   32a64:	bl	123d4 <strcmp@plt>
   32a68:	cmp	r0, #0
   32a6c:	mov	r0, #1
   32a70:	beq	32aa8 <__assert_fail@plt+0x2002c>
   32a74:	movw	r1, #38089	; 0x94c9
   32a78:	mov	r0, r6
   32a7c:	movt	r1, #4
   32a80:	bl	123d4 <strcmp@plt>
   32a84:	cmp	r0, #0
   32a88:	mov	r0, #1
   32a8c:	beq	32aa8 <__assert_fail@plt+0x2002c>
   32a90:	movw	r1, #51406	; 0xc8ce
   32a94:	mov	r0, r6
   32a98:	movt	r1, #4
   32a9c:	bl	123d4 <strcmp@plt>
   32aa0:	clz	r0, r0
   32aa4:	lsr	r0, r0, #5
   32aa8:	bic	r1, r4, #1
   32aac:	orr	r5, r1, r0
   32ab0:	mov	r1, #58	; 0x3a
   32ab4:	strb	r5, [r7, #24]
   32ab8:	ldr	r4, [r7]
   32abc:	mov	r0, r4
   32ac0:	bl	12794 <strchr@plt>
   32ac4:	ldr	sl, [sp, #4]
   32ac8:	cmp	r0, #0
   32acc:	beq	32464 <__assert_fail@plt+0x1f9e8>
   32ad0:	add	r6, sp, #20
   32ad4:	and	r0, r5, #253	; 0xfd
   32ad8:	add	r9, sp, #12
   32adc:	orr	r0, r0, r8, lsl #1
   32ae0:	movw	r8, #51295	; 0xc85f
   32ae4:	strb	r0, [r7, #24]
   32ae8:	ldr	r0, [sp, #8]
   32aec:	movt	r8, #4
   32af0:	str	r7, [r0]
   32af4:	add	r0, r7, #28
   32af8:	str	r0, [sp, #8]
   32afc:	b	32b04 <__assert_fail@plt+0x20088>
   32b00:	add	r6, sp, #20
   32b04:	add	r7, sp, #16
   32b08:	add	r5, sp, #28
   32b0c:	add	r4, sp, #24
   32b10:	mov	r0, r5
   32b14:	mov	r1, r4
   32b18:	mov	r2, #10
   32b1c:	mov	r3, sl
   32b20:	bl	123a4 <__getdelim@plt>
   32b24:	cmn	r0, #1
   32b28:	bne	325bc <__assert_fail@plt+0x1fb40>
   32b2c:	b	32f0c <__assert_fail@plt+0x20490>
   32b30:	movw	r0, #51483	; 0xc91b
   32b34:	movw	r1, #45300	; 0xb0f4
   32b38:	movt	r0, #4
   32b3c:	movt	r1, #4
   32b40:	bl	129bc <setmntent@plt>
   32b44:	cmp	r0, #0
   32b48:	beq	32f58 <__assert_fail@plt+0x204dc>
   32b4c:	mov	r8, r0
   32b50:	bl	12680 <getmntent@plt>
   32b54:	cmp	r0, #0
   32b58:	beq	32f60 <__assert_fail@plt+0x204e4>
   32b5c:	mov	r5, r0
   32b60:	add	sl, sp, #32
   32b64:	b	32cbc <__assert_fail@plt+0x20240>
   32b68:	ldrb	r0, [r5]
   32b6c:	cmp	r0, #47	; 0x2f
   32b70:	ldrbeq	r0, [r5, #1]
   32b74:	cmpeq	r0, #47	; 0x2f
   32b78:	beq	32c70 <__assert_fail@plt+0x201f4>
   32b7c:	movw	r1, #51427	; 0xc8e3
   32b80:	mov	r0, r7
   32b84:	movt	r1, #4
   32b88:	bl	123d4 <strcmp@plt>
   32b8c:	cmp	r0, #0
   32b90:	beq	32ecc <__assert_fail@plt+0x20450>
   32b94:	movw	r1, #38048	; 0x94a0
   32b98:	mov	r0, r7
   32b9c:	movt	r1, #4
   32ba0:	bl	123d4 <strcmp@plt>
   32ba4:	cmp	r0, #0
   32ba8:	beq	32ecc <__assert_fail@plt+0x20450>
   32bac:	movw	r1, #51432	; 0xc8e8
   32bb0:	mov	r0, r7
   32bb4:	movt	r1, #4
   32bb8:	bl	123d4 <strcmp@plt>
   32bbc:	cmp	r0, #0
   32bc0:	beq	32ecc <__assert_fail@plt+0x20450>
   32bc4:	movw	r1, #51437	; 0xc8ed
   32bc8:	mov	r0, r7
   32bcc:	movt	r1, #4
   32bd0:	bl	123d4 <strcmp@plt>
   32bd4:	cmp	r0, #0
   32bd8:	beq	32ecc <__assert_fail@plt+0x20450>
   32bdc:	movw	r1, #51448	; 0xc8f8
   32be0:	mov	r0, r7
   32be4:	movt	r1, #4
   32be8:	bl	123d4 <strcmp@plt>
   32bec:	cmp	r0, #0
   32bf0:	beq	32ecc <__assert_fail@plt+0x20450>
   32bf4:	movw	r1, #51454	; 0xc8fe
   32bf8:	mov	r0, r7
   32bfc:	movt	r1, #4
   32c00:	bl	123d4 <strcmp@plt>
   32c04:	cmp	r0, #0
   32c08:	beq	32ecc <__assert_fail@plt+0x20450>
   32c0c:	movw	r1, #51459	; 0xc903
   32c10:	mov	r0, r7
   32c14:	movt	r1, #4
   32c18:	bl	123d4 <strcmp@plt>
   32c1c:	cmp	r0, #0
   32c20:	beq	32ecc <__assert_fail@plt+0x20450>
   32c24:	movw	r1, #51465	; 0xc909
   32c28:	mov	r0, r7
   32c2c:	movt	r1, #4
   32c30:	bl	123d4 <strcmp@plt>
   32c34:	cmp	r0, #0
   32c38:	beq	32ecc <__assert_fail@plt+0x20450>
   32c3c:	movw	r1, #51471	; 0xc90f
   32c40:	mov	r0, r7
   32c44:	movt	r1, #4
   32c48:	bl	123d4 <strcmp@plt>
   32c4c:	cmp	r0, #0
   32c50:	beq	32ecc <__assert_fail@plt+0x20450>
   32c54:	movw	r0, #51476	; 0xc914
   32c58:	mov	r1, r5
   32c5c:	movt	r0, #4
   32c60:	bl	123d4 <strcmp@plt>
   32c64:	clz	r0, r0
   32c68:	lsr	r6, r0, #5
   32c6c:	b	32ecc <__assert_fail@plt+0x20450>
   32c70:	movw	r1, #51411	; 0xc8d3
   32c74:	mov	r0, r7
   32c78:	movt	r1, #4
   32c7c:	bl	123d4 <strcmp@plt>
   32c80:	cmp	r0, #0
   32c84:	beq	32ecc <__assert_fail@plt+0x20450>
   32c88:	movw	r1, #51417	; 0xc8d9
   32c8c:	mov	r0, r7
   32c90:	movt	r1, #4
   32c94:	bl	123d4 <strcmp@plt>
   32c98:	cmp	r0, #0
   32c9c:	beq	32ecc <__assert_fail@plt+0x20450>
   32ca0:	movw	r1, #51422	; 0xc8de
   32ca4:	mov	r0, r7
   32ca8:	movt	r1, #4
   32cac:	bl	123d4 <strcmp@plt>
   32cb0:	cmp	r0, #0
   32cb4:	bne	32b7c <__assert_fail@plt+0x20100>
   32cb8:	b	32ecc <__assert_fail@plt+0x20450>
   32cbc:	movw	r1, #51493	; 0xc925
   32cc0:	mov	r0, r5
   32cc4:	movt	r1, #4
   32cc8:	bl	1262c <hasmntopt@plt>
   32ccc:	str	r0, [sp, #8]
   32cd0:	mov	r0, #32
   32cd4:	bl	2dbf0 <__assert_fail@plt+0x1b174>
   32cd8:	mov	r9, r0
   32cdc:	ldr	r0, [r5]
   32ce0:	bl	2e110 <__assert_fail@plt+0x1b694>
   32ce4:	str	r0, [r9]
   32ce8:	ldr	r0, [r5, #4]
   32cec:	bl	2e110 <__assert_fail@plt+0x1b694>
   32cf0:	str	r0, [r9, #4]
   32cf4:	mov	r0, #0
   32cf8:	str	r0, [r9, #8]
   32cfc:	ldr	r0, [r5, #8]
   32d00:	bl	2e110 <__assert_fail@plt+0x1b694>
   32d04:	str	r0, [r9, #12]
   32d08:	mov	r7, r0
   32d0c:	movw	r1, #51316	; 0xc874
   32d10:	ldrb	r0, [r9, #24]
   32d14:	movt	r1, #4
   32d18:	orr	r4, r0, #4
   32d1c:	mov	r0, r7
   32d20:	strb	r4, [r9, #24]
   32d24:	bl	123d4 <strcmp@plt>
   32d28:	cmp	r0, #0
   32d2c:	mov	r6, #1
   32d30:	mov	r0, #1
   32d34:	beq	32ea8 <__assert_fail@plt+0x2042c>
   32d38:	movw	r1, #51323	; 0xc87b
   32d3c:	mov	r0, r7
   32d40:	movt	r1, #4
   32d44:	bl	123d4 <strcmp@plt>
   32d48:	cmp	r0, #0
   32d4c:	mov	r0, #1
   32d50:	beq	32ea8 <__assert_fail@plt+0x2042c>
   32d54:	movw	r1, #51328	; 0xc880
   32d58:	mov	r0, r7
   32d5c:	movt	r1, #4
   32d60:	bl	123d4 <strcmp@plt>
   32d64:	cmp	r0, #0
   32d68:	mov	r0, #1
   32d6c:	beq	32ea8 <__assert_fail@plt+0x2042c>
   32d70:	movw	r1, #51334	; 0xc886
   32d74:	mov	r0, r7
   32d78:	movt	r1, #4
   32d7c:	bl	123d4 <strcmp@plt>
   32d80:	cmp	r0, #0
   32d84:	mov	r0, #1
   32d88:	beq	32ea8 <__assert_fail@plt+0x2042c>
   32d8c:	movw	r1, #51342	; 0xc88e
   32d90:	mov	r0, r7
   32d94:	movt	r1, #4
   32d98:	bl	123d4 <strcmp@plt>
   32d9c:	cmp	r0, #0
   32da0:	mov	r0, #1
   32da4:	beq	32ea8 <__assert_fail@plt+0x2042c>
   32da8:	movw	r1, #51349	; 0xc895
   32dac:	mov	r0, r7
   32db0:	movt	r1, #4
   32db4:	bl	123d4 <strcmp@plt>
   32db8:	cmp	r0, #0
   32dbc:	mov	r0, #1
   32dc0:	beq	32ea8 <__assert_fail@plt+0x2042c>
   32dc4:	movw	r1, #51357	; 0xc89d
   32dc8:	mov	r0, r7
   32dcc:	movt	r1, #4
   32dd0:	bl	123d4 <strcmp@plt>
   32dd4:	cmp	r0, #0
   32dd8:	mov	r0, #1
   32ddc:	beq	32ea8 <__assert_fail@plt+0x2042c>
   32de0:	movw	r1, #51369	; 0xc8a9
   32de4:	mov	r0, r7
   32de8:	movt	r1, #4
   32dec:	bl	123d4 <strcmp@plt>
   32df0:	cmp	r0, #0
   32df4:	mov	r0, #1
   32df8:	beq	32ea8 <__assert_fail@plt+0x2042c>
   32dfc:	movw	r1, #51376	; 0xc8b0
   32e00:	mov	r0, r7
   32e04:	movt	r1, #4
   32e08:	bl	123d4 <strcmp@plt>
   32e0c:	cmp	r0, #0
   32e10:	mov	r0, #1
   32e14:	beq	32ea8 <__assert_fail@plt+0x2042c>
   32e18:	movw	r1, #51387	; 0xc8bb
   32e1c:	mov	r0, r7
   32e20:	movt	r1, #4
   32e24:	bl	123d4 <strcmp@plt>
   32e28:	cmp	r0, #0
   32e2c:	mov	r0, #1
   32e30:	beq	32ea8 <__assert_fail@plt+0x2042c>
   32e34:	movw	r1, #51393	; 0xc8c1
   32e38:	mov	r0, r7
   32e3c:	movt	r1, #4
   32e40:	bl	123d4 <strcmp@plt>
   32e44:	cmp	r0, #0
   32e48:	mov	r0, #1
   32e4c:	beq	32ea8 <__assert_fail@plt+0x2042c>
   32e50:	movw	r1, #51399	; 0xc8c7
   32e54:	mov	r0, r7
   32e58:	movt	r1, #4
   32e5c:	bl	123d4 <strcmp@plt>
   32e60:	cmp	r0, #0
   32e64:	mov	r0, #1
   32e68:	beq	32ea8 <__assert_fail@plt+0x2042c>
   32e6c:	movw	r1, #38089	; 0x94c9
   32e70:	mov	r0, r7
   32e74:	movt	r1, #4
   32e78:	bl	123d4 <strcmp@plt>
   32e7c:	cmp	r0, #0
   32e80:	mov	r0, #1
   32e84:	beq	32ea8 <__assert_fail@plt+0x2042c>
   32e88:	movw	r1, #51406	; 0xc8ce
   32e8c:	mov	r0, r7
   32e90:	movt	r1, #4
   32e94:	bl	123d4 <strcmp@plt>
   32e98:	ldr	r1, [sp, #8]
   32e9c:	orr	r0, r1, r0
   32ea0:	clz	r0, r0
   32ea4:	lsr	r0, r0, #5
   32ea8:	bic	r1, r4, #1
   32eac:	orr	r4, r1, r0
   32eb0:	mov	r1, #58	; 0x3a
   32eb4:	strb	r4, [r9, #24]
   32eb8:	ldr	r5, [r9]
   32ebc:	mov	r0, r5
   32ec0:	bl	12794 <strchr@plt>
   32ec4:	cmp	r0, #0
   32ec8:	beq	32b68 <__assert_fail@plt+0x200ec>
   32ecc:	mvn	r0, #0
   32ed0:	str	r0, [r9, #16]
   32ed4:	str	r0, [r9, #20]
   32ed8:	and	r0, r4, #253	; 0xfd
   32edc:	orr	r0, r0, r6, lsl #1
   32ee0:	strb	r0, [r9, #24]
   32ee4:	mov	r0, r8
   32ee8:	str	r9, [sl]
   32eec:	add	sl, r9, #28
   32ef0:	bl	12680 <getmntent@plt>
   32ef4:	mov	r5, r0
   32ef8:	cmp	r0, #0
   32efc:	bne	32cbc <__assert_fail@plt+0x20240>
   32f00:	b	32f64 <__assert_fail@plt+0x204e8>
   32f04:	add	r0, sp, #32
   32f08:	str	r0, [sp, #8]
   32f0c:	ldr	r0, [sp, #28]
   32f10:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   32f14:	ldrb	r0, [sl]
   32f18:	tst	r0, #32
   32f1c:	bne	32f38 <__assert_fail@plt+0x204bc>
   32f20:	mov	r0, sl
   32f24:	bl	12884 <fclose@plt>
   32f28:	ldr	sl, [sp, #8]
   32f2c:	cmn	r0, #1
   32f30:	bne	32f74 <__assert_fail@plt+0x204f8>
   32f34:	b	32f84 <__assert_fail@plt+0x20508>
   32f38:	bl	127d0 <__errno_location@plt>
   32f3c:	ldr	r6, [r0]
   32f40:	mov	r5, r0
   32f44:	mov	r0, sl
   32f48:	bl	12884 <fclose@plt>
   32f4c:	ldr	sl, [sp, #8]
   32f50:	str	r6, [r5]
   32f54:	b	32f84 <__assert_fail@plt+0x20508>
   32f58:	mov	r4, #0
   32f5c:	b	32ff0 <__assert_fail@plt+0x20574>
   32f60:	add	sl, sp, #32
   32f64:	mov	r0, r8
   32f68:	bl	128a8 <endmntent@plt>
   32f6c:	cmp	r0, #0
   32f70:	beq	32f84 <__assert_fail@plt+0x20508>
   32f74:	mov	r0, #0
   32f78:	str	r0, [sl]
   32f7c:	ldr	r4, [sp, #32]
   32f80:	b	32ff0 <__assert_fail@plt+0x20574>
   32f84:	bl	127d0 <__errno_location@plt>
   32f88:	mov	r4, #0
   32f8c:	ldr	r8, [r0]
   32f90:	mov	r5, r0
   32f94:	str	r4, [sl]
   32f98:	ldr	r6, [sp, #32]
   32f9c:	cmp	r6, #0
   32fa0:	beq	32fec <__assert_fail@plt+0x20570>
   32fa4:	ldr	r0, [r6]
   32fa8:	ldr	r7, [r6, #28]
   32fac:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   32fb0:	ldr	r0, [r6, #4]
   32fb4:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   32fb8:	ldr	r0, [r6, #8]
   32fbc:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   32fc0:	ldrb	r0, [r6, #24]
   32fc4:	tst	r0, #4
   32fc8:	beq	32fd4 <__assert_fail@plt+0x20558>
   32fcc:	ldr	r0, [r6, #12]
   32fd0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   32fd4:	mov	r0, r6
   32fd8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   32fdc:	cmp	r7, #0
   32fe0:	mov	r6, r7
   32fe4:	str	r7, [sp, #32]
   32fe8:	bne	32fa4 <__assert_fail@plt+0x20528>
   32fec:	str	r8, [r5]
   32ff0:	mov	r0, r4
   32ff4:	sub	sp, fp, #28
   32ff8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32ffc:	push	{r4, sl, fp, lr}
   33000:	add	fp, sp, #8
   33004:	mov	r4, r0
   33008:	ldr	r0, [r0]
   3300c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   33010:	ldr	r0, [r4, #4]
   33014:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   33018:	ldr	r0, [r4, #8]
   3301c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   33020:	ldrb	r0, [r4, #24]
   33024:	tst	r0, #4
   33028:	beq	33034 <__assert_fail@plt+0x205b8>
   3302c:	ldr	r0, [r4, #12]
   33030:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   33034:	mov	r0, r4
   33038:	pop	{r4, sl, fp, lr}
   3303c:	b	2fd6c <__assert_fail@plt+0x1d2f0>
   33040:	push	{fp, lr}
   33044:	mov	fp, sp
   33048:	cmp	r0, #0
   3304c:	beq	33068 <__assert_fail@plt+0x205ec>
   33050:	cmp	r1, #0
   33054:	beq	33074 <__assert_fail@plt+0x205f8>
   33058:	cmn	r1, #1
   3305c:	ble	33080 <__assert_fail@plt+0x20604>
   33060:	pop	{fp, lr}
   33064:	b	1256c <realloc@plt>
   33068:	mov	r0, r1
   3306c:	pop	{fp, lr}
   33070:	b	3233c <__assert_fail@plt+0x1f8c0>
   33074:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   33078:	mov	r0, #0
   3307c:	pop	{fp, pc}
   33080:	bl	127d0 <__errno_location@plt>
   33084:	mov	r1, #12
   33088:	str	r1, [r0]
   3308c:	mov	r0, #0
   33090:	pop	{fp, pc}
   33094:	cmp	r2, #0
   33098:	beq	330c8 <__assert_fail@plt+0x2064c>
   3309c:	mvn	r3, #0
   330a0:	udiv	r3, r3, r2
   330a4:	cmp	r3, r1
   330a8:	bcs	330c8 <__assert_fail@plt+0x2064c>
   330ac:	push	{fp, lr}
   330b0:	mov	fp, sp
   330b4:	bl	127d0 <__errno_location@plt>
   330b8:	mov	r1, #12
   330bc:	str	r1, [r0]
   330c0:	mov	r0, #0
   330c4:	pop	{fp, pc}
   330c8:	mul	r1, r2, r1
   330cc:	b	33040 <__assert_fail@plt+0x205c4>
   330d0:	push	{fp, lr}
   330d4:	mov	fp, sp
   330d8:	mov	lr, r0
   330dc:	movw	r0, #57024	; 0xdec0
   330e0:	mov	ip, r1
   330e4:	ldrb	r1, [r2, #28]
   330e8:	movt	r0, #5
   330ec:	ldr	r3, [r0]
   330f0:	mov	r0, #16
   330f4:	and	r1, r1, #111	; 0x6f
   330f8:	and	r0, r0, r3, lsr #21
   330fc:	orr	r0, r1, r0
   33100:	mov	r1, lr
   33104:	orr	r0, r0, #128	; 0x80
   33108:	strb	r0, [r2, #28]
   3310c:	mov	r0, r2
   33110:	mov	r2, ip
   33114:	bl	33150 <__assert_fail@plt+0x206d4>
   33118:	cmp	r0, #0
   3311c:	moveq	r0, #0
   33120:	popeq	{fp, pc}
   33124:	movw	r1, #51888	; 0xcab0
   33128:	mov	r2, #5
   3312c:	movt	r1, #4
   33130:	ldr	r0, [r1, r0, lsl #2]
   33134:	movw	r1, #51504	; 0xc930
   33138:	movt	r1, #4
   3313c:	add	r1, r1, r0
   33140:	mov	r0, #0
   33144:	pop	{fp, lr}
   33148:	b	1253c <dcgettext@plt>
   3314c:	nop	{0}
   33150:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33154:	add	fp, sp, #28
   33158:	sub	sp, sp, #140	; 0x8c
   3315c:	mov	r9, r0
   33160:	mov	r0, #0
   33164:	str	r1, [sp, #20]
   33168:	str	r3, [sp, #24]
   3316c:	mov	sl, r2
   33170:	str	r0, [fp, #-52]	; 0xffffffcc
   33174:	str	r0, [r9, #8]
   33178:	str	r3, [r9, #12]
   3317c:	str	r0, [r9, #24]
   33180:	ldrb	r0, [r9, #28]
   33184:	and	r0, r0, #144	; 0x90
   33188:	strb	r0, [r9, #28]
   3318c:	ldm	r9, {r0, r1}
   33190:	cmp	r1, #159	; 0x9f
   33194:	bls	338e0 <__assert_fail@plt+0x20e64>
   33198:	mov	r1, #160	; 0xa0
   3319c:	mov	r2, #160	; 0xa0
   331a0:	str	r0, [sp, #28]
   331a4:	str	r1, [r9, #8]
   331a8:	mov	r1, #0
   331ac:	bl	12800 <memset@plt>
   331b0:	ldr	r3, [sp, #28]
   331b4:	mov	r0, #31
   331b8:	str	r0, [r3, #64]	; 0x40
   331bc:	movw	r0, #43689	; 0xaaa9
   331c0:	movt	r0, #2730	; 0xaaa
   331c4:	cmp	sl, r0
   331c8:	bhi	33354 <__assert_fail@plt+0x208d8>
   331cc:	add	r5, sl, #1
   331d0:	mov	r4, r3
   331d4:	lsl	r0, r5, #3
   331d8:	str	r5, [r3, #4]
   331dc:	bl	3233c <__assert_fail@plt+0x1f8c0>
   331e0:	str	r0, [r4]
   331e4:	mov	r0, #1
   331e8:	mov	r4, r0
   331ec:	lsl	r0, r0, #1
   331f0:	cmp	r4, sl
   331f4:	bls	331e8 <__assert_fail@plt+0x2076c>
   331f8:	mov	r0, #12
   331fc:	mov	r1, r4
   33200:	str	r5, [sp, #12]
   33204:	bl	2f760 <__assert_fail@plt+0x1cce4>
   33208:	ldr	r5, [sp, #28]
   3320c:	str	r0, [r5, #32]
   33210:	sub	r0, r4, #1
   33214:	str	r0, [r5, #68]	; 0x44
   33218:	bl	12620 <__ctype_get_mb_cur_max@plt>
   3321c:	str	r0, [r5, #92]	; 0x5c
   33220:	mov	r0, #14
   33224:	bl	12908 <nl_langinfo@plt>
   33228:	ldrb	r1, [r0]
   3322c:	orr	r1, r1, #32
   33230:	cmp	r1, #117	; 0x75
   33234:	bne	33288 <__assert_fail@plt+0x2080c>
   33238:	ldrb	r1, [r0, #1]
   3323c:	orr	r1, r1, #32
   33240:	cmp	r1, #116	; 0x74
   33244:	bne	33288 <__assert_fail@plt+0x2080c>
   33248:	ldrb	r1, [r0, #2]
   3324c:	orr	r1, r1, #32
   33250:	cmp	r1, #102	; 0x66
   33254:	bne	33288 <__assert_fail@plt+0x2080c>
   33258:	ldrb	r1, [r0, #3]!
   3325c:	cmp	r1, #45	; 0x2d
   33260:	movw	r1, #52004	; 0xcb24
   33264:	addeq	r0, r0, #1
   33268:	movt	r1, #4
   3326c:	bl	123d4 <strcmp@plt>
   33270:	cmp	r0, #0
   33274:	bne	33288 <__assert_fail@plt+0x2080c>
   33278:	ldr	r1, [sp, #28]
   3327c:	ldrb	r0, [r1, #88]	; 0x58
   33280:	orr	r0, r0, #4
   33284:	strb	r0, [r1, #88]	; 0x58
   33288:	ldr	r3, [sp, #28]
   3328c:	ldrb	r0, [r3, #88]	; 0x58
   33290:	and	r1, r0, #247	; 0xf7
   33294:	strb	r1, [r3, #88]	; 0x58
   33298:	ldr	r1, [r3, #92]	; 0x5c
   3329c:	cmp	r1, #2
   332a0:	blt	33340 <__assert_fail@plt+0x208c4>
   332a4:	tst	r0, #4
   332a8:	bne	33334 <__assert_fail@plt+0x208b8>
   332ac:	mov	r0, #32
   332b0:	mov	r1, #1
   332b4:	mov	r5, #1
   332b8:	bl	2f760 <__assert_fail@plt+0x1cce4>
   332bc:	ldr	r3, [sp, #28]
   332c0:	cmp	r0, #0
   332c4:	str	r0, [r3, #60]	; 0x3c
   332c8:	beq	33354 <__assert_fail@plt+0x208d8>
   332cc:	mov	r6, #0
   332d0:	mov	r7, #0
   332d4:	mov	r8, #0
   332d8:	add	r4, r6, r8
   332dc:	mov	r0, r4
   332e0:	bl	12830 <btowc@plt>
   332e4:	ldr	r3, [sp, #28]
   332e8:	cmn	r0, #1
   332ec:	ldrne	r1, [r3, #60]	; 0x3c
   332f0:	ldrne	r2, [r1, r7, lsl #2]
   332f4:	orrne	r2, r2, r5, lsl r8
   332f8:	strne	r2, [r1, r7, lsl #2]
   332fc:	cmp	r4, #127	; 0x7f
   33300:	bhi	33314 <__assert_fail@plt+0x20898>
   33304:	cmp	r4, r0
   33308:	ldrbne	r0, [r3, #88]	; 0x58
   3330c:	orrne	r0, r0, #8
   33310:	strbne	r0, [r3, #88]	; 0x58
   33314:	add	r8, r8, #1
   33318:	cmp	r8, #32
   3331c:	bne	332d8 <__assert_fail@plt+0x2085c>
   33320:	add	r7, r7, #1
   33324:	add	r6, r6, #32
   33328:	cmp	r7, #8
   3332c:	bne	332d4 <__assert_fail@plt+0x20858>
   33330:	b	33340 <__assert_fail@plt+0x208c4>
   33334:	movw	r0, #51956	; 0xcaf4
   33338:	movt	r0, #4
   3333c:	str	r0, [r3, #60]	; 0x3c
   33340:	ldr	r0, [r3]
   33344:	cmp	r0, #0
   33348:	ldrne	r0, [r3, #32]
   3334c:	cmpne	r0, #0
   33350:	bne	33374 <__assert_fail@plt+0x208f8>
   33354:	mov	r4, #12
   33358:	mov	r0, r3
   3335c:	str	r4, [fp, #-52]	; 0xffffffcc
   33360:	bl	34ca0 <__assert_fail@plt+0x22224>
   33364:	mov	r0, #0
   33368:	str	r0, [r9]
   3336c:	str	r0, [r9, #4]
   33370:	b	34510 <__assert_fail@plt+0x21a94>
   33374:	movw	r0, #9352	; 0x2488
   33378:	movw	r1, #10276	; 0x2824
   3337c:	mov	r4, #0
   33380:	movt	r0, #1
   33384:	movt	r1, #1
   33388:	str	r4, [fp, #-52]	; 0xffffffcc
   3338c:	orrs	r0, r1, r0
   33390:	str	r0, [sp, #8]
   33394:	beq	333b0 <__assert_fail@plt+0x20934>
   33398:	add	r0, r3, #136	; 0x88
   3339c:	mov	r1, #0
   333a0:	bl	124d0 <pthread_mutex_init@plt>
   333a4:	ldr	r3, [sp, #28]
   333a8:	cmp	r0, #0
   333ac:	bne	33354 <__assert_fail@plt+0x208d8>
   333b0:	add	r1, sp, #32
   333b4:	vmov.i32	q8, #0	; 0x00000000
   333b8:	ldr	r5, [r9, #20]
   333bc:	ldr	r7, [sp, #20]
   333c0:	ldr	r2, [sp, #24]
   333c4:	add	r0, r1, #64	; 0x40
   333c8:	vst1.32	{d16-d17}, [r0]
   333cc:	add	r0, r1, #52	; 0x34
   333d0:	vst1.32	{d16-d17}, [r0]
   333d4:	add	r0, r1, #36	; 0x24
   333d8:	vst1.32	{d16-d17}, [r0]
   333dc:	add	r0, r1, #20
   333e0:	vst1.32	{d16-d17}, [r0]
   333e4:	add	r0, r1, #4
   333e8:	add	r1, r1, #44	; 0x2c
   333ec:	vst1.32	{d16-d17}, [r0]
   333f0:	str	r7, [sp, #32]
   333f4:	ubfx	r0, r2, #22, #1
   333f8:	vdup.32	q8, sl
   333fc:	strb	r0, [sp, #104]	; 0x68
   33400:	and	r0, r2, #4194304	; 0x400000
   33404:	str	r5, [sp, #96]	; 0x60
   33408:	orrs	r6, r0, r5
   3340c:	str	r0, [sp, #16]
   33410:	movwne	r6, #1
   33414:	cmp	sl, #1
   33418:	strb	r6, [sp, #107]	; 0x6b
   3341c:	ldr	r0, [r3, #92]	; 0x5c
   33420:	str	r0, [sp, #112]	; 0x70
   33424:	ldrb	r2, [r3, #88]	; 0x58
   33428:	vst1.32	{d16-d17}, [r1]
   3342c:	ubfx	r1, r2, #3, #1
   33430:	strb	r1, [sp, #106]	; 0x6a
   33434:	ubfx	r1, r2, #2, #1
   33438:	strb	r1, [sp, #105]	; 0x69
   3343c:	blt	334c0 <__assert_fail@plt+0x20a44>
   33440:	cmp	r0, #2
   33444:	blt	33478 <__assert_fail@plt+0x209fc>
   33448:	ldr	r0, [sp, #12]
   3344c:	mov	r8, #12
   33450:	cmn	r0, #-1073741823	; 0xc0000001
   33454:	bhi	338d8 <__assert_fail@plt+0x20e5c>
   33458:	lsl	r1, r0, #2
   3345c:	mov	r0, #0
   33460:	bl	33040 <__assert_fail@plt+0x205c4>
   33464:	ldr	r3, [sp, #28]
   33468:	cmp	r0, #0
   3346c:	beq	338d8 <__assert_fail@plt+0x20e5c>
   33470:	ldr	r7, [sp, #20]
   33474:	str	r0, [sp, #40]	; 0x28
   33478:	ldr	r8, [sp, #12]
   3347c:	cmp	r6, #0
   33480:	mov	r4, #0
   33484:	mov	r6, #0
   33488:	beq	334b4 <__assert_fail@plt+0x20a38>
   3348c:	mov	r0, #0
   33490:	mov	r1, r8
   33494:	bl	33040 <__assert_fail@plt+0x205c4>
   33498:	cmp	r0, #0
   3349c:	beq	338d4 <__assert_fail@plt+0x20e58>
   334a0:	ldr	r3, [sp, #28]
   334a4:	ldr	r7, [sp, #20]
   334a8:	mov	r4, r0
   334ac:	mov	r6, #1
   334b0:	str	r0, [sp, #36]	; 0x24
   334b4:	str	r8, [sp, #68]	; 0x44
   334b8:	ldr	r0, [r3, #92]	; 0x5c
   334bc:	b	334c4 <__assert_fail@plt+0x20a48>
   334c0:	mov	r8, #0
   334c4:	ldr	r1, [sp, #16]
   334c8:	cmp	r6, #0
   334cc:	moveq	r4, r7
   334d0:	str	r4, [sp, #36]	; 0x24
   334d4:	cmp	r1, #0
   334d8:	beq	335bc <__assert_fail@plt+0x20b40>
   334dc:	cmp	r0, #2
   334e0:	blt	335d0 <__assert_fail@plt+0x20b54>
   334e4:	add	r0, sp, #32
   334e8:	bl	38260 <__assert_fail@plt+0x257e4>
   334ec:	cmp	r0, #0
   334f0:	bne	335b4 <__assert_fail@plt+0x20b38>
   334f4:	ldr	r1, [sp, #28]
   334f8:	add	r5, sp, #32
   334fc:	ldr	r0, [sp, #64]	; 0x40
   33500:	cmp	r0, sl
   33504:	bge	336c0 <__assert_fail@plt+0x20c44>
   33508:	ldr	r0, [r1, #92]	; 0x5c
   3350c:	ldr	r2, [sp, #60]	; 0x3c
   33510:	ldr	r1, [sp, #68]	; 0x44
   33514:	add	r0, r0, r2
   33518:	cmp	r1, r0
   3351c:	bgt	336c0 <__assert_fail@plt+0x20c44>
   33520:	ldr	r0, [sp, #112]	; 0x70
   33524:	lsl	r6, r1, #1
   33528:	cmp	r0, #2
   3352c:	blt	33578 <__assert_fail@plt+0x20afc>
   33530:	mov	r8, #12
   33534:	cmn	r6, #-1073741823	; 0xc0000001
   33538:	bhi	338d8 <__assert_fail@plt+0x20e5c>
   3353c:	ldr	r0, [sp, #40]	; 0x28
   33540:	lsl	r4, r1, #3
   33544:	mov	r1, r4
   33548:	bl	33040 <__assert_fail@plt+0x205c4>
   3354c:	cmp	r0, #0
   33550:	beq	338d8 <__assert_fail@plt+0x20e5c>
   33554:	str	r0, [sp, #40]	; 0x28
   33558:	ldr	r0, [sp, #44]	; 0x2c
   3355c:	cmp	r0, #0
   33560:	beq	33578 <__assert_fail@plt+0x20afc>
   33564:	mov	r1, r4
   33568:	bl	33040 <__assert_fail@plt+0x205c4>
   3356c:	cmp	r0, #0
   33570:	beq	338d8 <__assert_fail@plt+0x20e5c>
   33574:	str	r0, [sp, #44]	; 0x2c
   33578:	ldrb	r0, [sp, #107]	; 0x6b
   3357c:	cmp	r0, #0
   33580:	beq	3359c <__assert_fail@plt+0x20b20>
   33584:	ldr	r0, [sp, #36]	; 0x24
   33588:	mov	r1, r6
   3358c:	bl	33040 <__assert_fail@plt+0x205c4>
   33590:	cmp	r0, #0
   33594:	beq	338d4 <__assert_fail@plt+0x20e58>
   33598:	str	r0, [sp, #36]	; 0x24
   3359c:	mov	r0, r5
   335a0:	str	r6, [sp, #68]	; 0x44
   335a4:	bl	38260 <__assert_fail@plt+0x257e4>
   335a8:	ldr	r1, [sp, #28]
   335ac:	cmp	r0, #0
   335b0:	beq	334fc <__assert_fail@plt+0x20a80>
   335b4:	mov	r8, r0
   335b8:	b	338d8 <__assert_fail@plt+0x20e5c>
   335bc:	cmp	r0, #2
   335c0:	blt	3363c <__assert_fail@plt+0x20bc0>
   335c4:	add	r0, sp, #32
   335c8:	bl	38920 <__assert_fail@plt+0x25ea4>
   335cc:	b	336c0 <__assert_fail@plt+0x20c44>
   335d0:	cmp	r8, sl
   335d4:	movgt	r8, sl
   335d8:	cmp	r8, #1
   335dc:	blt	336a4 <__assert_fail@plt+0x20c28>
   335e0:	mov	r0, #0
   335e4:	mov	r4, #0
   335e8:	b	335f8 <__assert_fail@plt+0x20b7c>
   335ec:	ldr	r7, [sp, #32]
   335f0:	ldr	r0, [sp, #56]	; 0x38
   335f4:	ldr	r5, [sp, #96]	; 0x60
   335f8:	add	r0, r7, r0
   335fc:	cmp	r5, #0
   33600:	ldrb	r6, [r0, r4]
   33604:	ldrbne	r6, [r5, r6]
   33608:	add	r0, r6, #128	; 0x80
   3360c:	lsr	r0, r0, #7
   33610:	cmp	r0, #2
   33614:	bhi	33624 <__assert_fail@plt+0x20ba8>
   33618:	bl	12728 <__ctype_toupper_loc@plt>
   3361c:	ldr	r0, [r0]
   33620:	ldr	r6, [r0, r6, lsl #2]
   33624:	ldr	r0, [sp, #36]	; 0x24
   33628:	strb	r6, [r0, r4]
   3362c:	add	r4, r4, #1
   33630:	cmp	r4, r8
   33634:	blt	335ec <__assert_fail@plt+0x20b70>
   33638:	b	336a8 <__assert_fail@plt+0x20c2c>
   3363c:	cmp	r5, #0
   33640:	beq	336a8 <__assert_fail@plt+0x20c2c>
   33644:	cmp	r8, sl
   33648:	movgt	r8, sl
   3364c:	cmp	r8, #1
   33650:	blt	336b4 <__assert_fail@plt+0x20c38>
   33654:	ldrb	r0, [r7]
   33658:	cmp	r8, #1
   3365c:	ldrb	r0, [r5, r0]
   33660:	strb	r0, [r4]
   33664:	mov	r0, #1
   33668:	beq	336b8 <__assert_fail@plt+0x20c3c>
   3366c:	mov	r0, #1
   33670:	ldr	r1, [sp, #32]
   33674:	ldr	r3, [sp, #56]	; 0x38
   33678:	ldr	r7, [sp, #96]	; 0x60
   3367c:	ldr	r2, [sp, #36]	; 0x24
   33680:	add	r1, r1, r3
   33684:	ldrb	r1, [r1, r0]
   33688:	ldrb	r1, [r7, r1]
   3368c:	strb	r1, [r2, r0]
   33690:	add	r0, r0, #1
   33694:	cmp	r0, r8
   33698:	blt	33670 <__assert_fail@plt+0x20bf4>
   3369c:	mov	r0, r8
   336a0:	b	336b8 <__assert_fail@plt+0x20c3c>
   336a4:	mov	r8, #0
   336a8:	str	r8, [sp, #64]	; 0x40
   336ac:	str	r8, [sp, #60]	; 0x3c
   336b0:	b	336c0 <__assert_fail@plt+0x20c44>
   336b4:	mov	r0, #0
   336b8:	str	r0, [sp, #64]	; 0x40
   336bc:	str	r0, [sp, #60]	; 0x3c
   336c0:	mov	r5, #0
   336c4:	ldr	r4, [sp, #24]
   336c8:	sub	r8, fp, #48	; 0x30
   336cc:	add	r6, sp, #32
   336d0:	str	r5, [fp, #-52]	; 0xffffffcc
   336d4:	str	r5, [r9, #24]
   336d8:	mov	r0, r8
   336dc:	mov	r1, r6
   336e0:	ldr	r7, [r9]
   336e4:	orr	r2, r4, #8388608	; 0x800000
   336e8:	str	r4, [r7, #128]	; 0x80
   336ec:	bl	38d6c <__assert_fail@plt+0x262f0>
   336f0:	ldr	r1, [sp, #72]	; 0x48
   336f4:	mov	r2, r8
   336f8:	mov	r3, r4
   336fc:	str	r5, [sp]
   33700:	add	r0, r1, r0
   33704:	mov	r1, r9
   33708:	str	r0, [sp, #72]	; 0x48
   3370c:	sub	r0, fp, #52	; 0x34
   33710:	str	r0, [sp, #4]
   33714:	mov	r0, r6
   33718:	bl	38afc <__assert_fail@plt+0x26080>
   3371c:	ldr	r5, [sp, #28]
   33720:	mov	r4, r0
   33724:	cmp	r0, #0
   33728:	bne	33738 <__assert_fail@plt+0x20cbc>
   3372c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   33730:	cmp	r0, #0
   33734:	bne	33964 <__assert_fail@plt+0x20ee8>
   33738:	ldr	r1, [r7, #64]	; 0x40
   3373c:	cmp	r1, #31
   33740:	beq	338fc <__assert_fail@plt+0x20e80>
   33744:	ldr	r0, [r7, #56]	; 0x38
   33748:	add	r2, r1, #1
   3374c:	add	r0, r0, r1, lsl #5
   33750:	mov	r1, #0
   33754:	vmov.i32	q8, #0	; 0x00000000
   33758:	str	r2, [r7, #64]	; 0x40
   3375c:	add	r6, r0, #4
   33760:	mov	r2, #2
   33764:	str	r1, [r0, #20]
   33768:	str	r1, [r0, #24]
   3376c:	str	r2, [r0, #28]
   33770:	mov	r0, #28
   33774:	mov	r1, r6
   33778:	vst1.32	{d16-d17}, [r1], r0
   3377c:	mvn	r0, #0
   33780:	str	r0, [r1]
   33784:	cmp	r4, #0
   33788:	mov	r0, r6
   3378c:	beq	337e0 <__assert_fail@plt+0x20d64>
   33790:	ldr	r1, [r7, #64]	; 0x40
   33794:	cmp	r1, #31
   33798:	beq	33930 <__assert_fail@plt+0x20eb4>
   3379c:	ldr	r0, [r7, #56]	; 0x38
   337a0:	add	r2, r1, #1
   337a4:	add	r0, r0, r1, lsl #5
   337a8:	mov	r1, #0
   337ac:	mvn	r3, #0
   337b0:	cmp	r6, #0
   337b4:	str	r2, [r7, #64]	; 0x40
   337b8:	str	r1, [r0, #4]!
   337bc:	mov	r2, #16
   337c0:	add	ip, r0, #20
   337c4:	stmib	r0, {r4, r6}
   337c8:	str	r1, [r0, #12]
   337cc:	str	r1, [r0, #16]
   337d0:	stm	ip, {r1, r2, r3}
   337d4:	str	r0, [r4]
   337d8:	beq	3395c <__assert_fail@plt+0x20ee0>
   337dc:	str	r0, [r6]
   337e0:	cmp	r6, #0
   337e4:	cmpne	r0, #0
   337e8:	beq	3395c <__assert_fail@plt+0x20ee0>
   337ec:	str	r0, [r5, #52]	; 0x34
   337f0:	ldr	sl, [r9]
   337f4:	ldr	r0, [sl, #4]
   337f8:	lsl	r0, r0, #2
   337fc:	bl	3233c <__assert_fail@plt+0x1f8c0>
   33800:	str	r0, [sl, #12]
   33804:	ldr	r0, [sl, #4]
   33808:	lsl	r0, r0, #2
   3380c:	bl	3233c <__assert_fail@plt+0x1f8c0>
   33810:	str	r0, [sl, #16]
   33814:	ldr	r0, [sl, #4]
   33818:	add	r0, r0, r0, lsl #1
   3381c:	lsl	r0, r0, #2
   33820:	bl	3233c <__assert_fail@plt+0x1f8c0>
   33824:	str	r0, [sl, #20]
   33828:	ldr	r0, [sl, #4]
   3382c:	add	r0, r0, r0, lsl #1
   33830:	lsl	r0, r0, #2
   33834:	bl	3233c <__assert_fail@plt+0x1f8c0>
   33838:	str	r0, [sl, #24]
   3383c:	ldr	r1, [sl, #12]
   33840:	cmp	r1, #0
   33844:	ldrne	r1, [sl, #16]
   33848:	cmpne	r1, #0
   3384c:	beq	33860 <__assert_fail@plt+0x20de4>
   33850:	cmp	r0, #0
   33854:	ldrne	r0, [sl, #20]
   33858:	cmpne	r0, #0
   3385c:	bne	3386c <__assert_fail@plt+0x20df0>
   33860:	mov	r0, #12
   33864:	str	r0, [fp, #-52]	; 0xffffffcc
   33868:	b	3396c <__assert_fail@plt+0x20ef0>
   3386c:	ldr	r0, [r9, #24]
   33870:	lsl	r0, r0, #2
   33874:	bl	3233c <__assert_fail@plt+0x1f8c0>
   33878:	cmp	r0, #0
   3387c:	str	r0, [sl, #132]	; 0x84
   33880:	beq	338cc <__assert_fail@plt+0x20e50>
   33884:	ldr	r1, [r9, #24]
   33888:	cmp	r1, #0
   3388c:	beq	33a24 <__assert_fail@plt+0x20fa8>
   33890:	mov	r2, #0
   33894:	cmp	r1, #4
   33898:	bcc	33a14 <__assert_fail@plt+0x20f98>
   3389c:	add	r3, pc, #876	; 0x36c
   338a0:	bic	r2, r1, #3
   338a4:	vmov.i32	q8, #4	; 0x00000004
   338a8:	mov	r7, r0
   338ac:	vld1.64	{d18-d19}, [r3 :128]
   338b0:	mov	r3, r2
   338b4:	vadd.i32	q10, q9, q8
   338b8:	vst1.32	{d18-d19}, [r7]!
   338bc:	subs	r3, r3, #4
   338c0:	vorr	q9, q10, q10
   338c4:	bne	338b4 <__assert_fail@plt+0x20e38>
   338c8:	b	33a1c <__assert_fail@plt+0x20fa0>
   338cc:	add	r8, sl, #52	; 0x34
   338d0:	b	33bdc <__assert_fail@plt+0x21160>
   338d4:	mov	r8, #12
   338d8:	str	r8, [fp, #-52]	; 0xffffffcc
   338dc:	b	3396c <__assert_fail@plt+0x20ef0>
   338e0:	mov	r1, #160	; 0xa0
   338e4:	mov	r4, #160	; 0xa0
   338e8:	bl	33040 <__assert_fail@plt+0x205c4>
   338ec:	cmp	r0, #0
   338f0:	beq	33928 <__assert_fail@plt+0x20eac>
   338f4:	stm	r9, {r0, r4}
   338f8:	b	33198 <__assert_fail@plt+0x2071c>
   338fc:	mov	r0, #996	; 0x3e4
   33900:	bl	3233c <__assert_fail@plt+0x1f8c0>
   33904:	cmp	r0, #0
   33908:	beq	33a08 <__assert_fail@plt+0x20f8c>
   3390c:	ldr	r1, [r7, #56]	; 0x38
   33910:	ldr	r5, [sp, #28]
   33914:	str	r1, [r0]
   33918:	mov	r1, #0
   3391c:	str	r1, [r7, #64]	; 0x40
   33920:	str	r0, [r7, #56]	; 0x38
   33924:	b	33748 <__assert_fail@plt+0x20ccc>
   33928:	mov	r4, #12
   3392c:	b	34510 <__assert_fail@plt+0x21a94>
   33930:	mov	r0, #996	; 0x3e4
   33934:	bl	3233c <__assert_fail@plt+0x1f8c0>
   33938:	ldr	r5, [sp, #28]
   3393c:	cmp	r0, #0
   33940:	beq	3395c <__assert_fail@plt+0x20ee0>
   33944:	ldr	r1, [r7, #56]	; 0x38
   33948:	str	r1, [r0]
   3394c:	mov	r1, #0
   33950:	str	r1, [r7, #64]	; 0x40
   33954:	str	r0, [r7, #56]	; 0x38
   33958:	b	337a0 <__assert_fail@plt+0x20d24>
   3395c:	mov	r0, #12
   33960:	str	r0, [fp, #-52]	; 0xffffffcc
   33964:	mov	r0, #0
   33968:	str	r0, [r5, #52]	; 0x34
   3396c:	ldr	r4, [r9]
   33970:	ldr	r0, [r4, #56]	; 0x38
   33974:	cmp	r0, #0
   33978:	beq	33990 <__assert_fail@plt+0x20f14>
   3397c:	ldr	r5, [r0]
   33980:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   33984:	cmp	r5, #0
   33988:	mov	r0, r5
   3398c:	bne	3397c <__assert_fail@plt+0x20f00>
   33990:	mov	r0, #31
   33994:	mov	r5, #0
   33998:	str	r0, [r4, #64]	; 0x40
   3399c:	str	r5, [r4, #52]	; 0x34
   339a0:	str	r5, [r4, #56]	; 0x38
   339a4:	ldr	r0, [r4, #16]
   339a8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   339ac:	str	r5, [r4, #16]
   339b0:	ldr	r0, [sp, #40]	; 0x28
   339b4:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   339b8:	ldr	r0, [sp, #44]	; 0x2c
   339bc:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   339c0:	ldrb	r0, [sp, #107]	; 0x6b
   339c4:	cmp	r0, #0
   339c8:	beq	339d4 <__assert_fail@plt+0x20f58>
   339cc:	ldr	r0, [sp, #36]	; 0x24
   339d0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   339d4:	ldr	r0, [sp, #8]
   339d8:	cmp	r0, #0
   339dc:	beq	339ec <__assert_fail@plt+0x20f70>
   339e0:	ldr	r0, [sp, #28]
   339e4:	add	r0, r0, #136	; 0x88
   339e8:	bl	12404 <pthread_mutex_destroy@plt>
   339ec:	ldr	r0, [sp, #28]
   339f0:	bl	34ca0 <__assert_fail@plt+0x22224>
   339f4:	mov	r0, #0
   339f8:	str	r0, [r9]
   339fc:	str	r0, [r9, #4]
   33a00:	ldr	r4, [fp, #-52]	; 0xffffffcc
   33a04:	b	34510 <__assert_fail@plt+0x21a94>
   33a08:	ldr	r5, [sp, #28]
   33a0c:	mov	r6, #0
   33a10:	b	33784 <__assert_fail@plt+0x20d08>
   33a14:	str	r2, [r0, r2, lsl #2]
   33a18:	add	r2, r2, #1
   33a1c:	cmp	r1, r2
   33a20:	bne	33a14 <__assert_fail@plt+0x20f98>
   33a24:	mov	r8, sl
   33a28:	ldr	r2, [r8, #52]!	; 0x34
   33a2c:	ldrb	r1, [r2, #24]
   33a30:	cmp	r1, #17
   33a34:	beq	33a60 <__assert_fail@plt+0x20fe4>
   33a38:	cmp	r1, #4
   33a3c:	bne	33ab0 <__assert_fail@plt+0x21034>
   33a40:	ldr	r1, [r2, #20]
   33a44:	mov	r3, #1
   33a48:	ldr	r0, [r0, r1, lsl #2]
   33a4c:	str	r0, [r2, #20]
   33a50:	ldr	r1, [sl, #80]	; 0x50
   33a54:	orr	r0, r1, r3, lsl r0
   33a58:	str	r0, [sl, #80]	; 0x50
   33a5c:	b	33ab0 <__assert_fail@plt+0x21034>
   33a60:	ldr	r1, [r2, #4]
   33a64:	cmp	r1, #0
   33a68:	beq	33ab0 <__assert_fail@plt+0x21034>
   33a6c:	ldrb	r3, [r1, #24]
   33a70:	cmp	r3, #17
   33a74:	bne	33ab0 <__assert_fail@plt+0x21034>
   33a78:	ldr	r3, [r1, #4]
   33a7c:	ldr	r1, [r1, #20]
   33a80:	cmp	r3, #0
   33a84:	str	r3, [r2, #4]
   33a88:	strne	r2, [r3]
   33a8c:	cmp	r1, #31
   33a90:	ldr	r3, [r2, #20]
   33a94:	ldr	r3, [r0, r3, lsl #2]
   33a98:	str	r3, [r0, r1, lsl #2]
   33a9c:	bgt	33ab0 <__assert_fail@plt+0x21034>
   33aa0:	ldr	r0, [sl, #80]	; 0x50
   33aa4:	mov	r3, #1
   33aa8:	bic	r0, r0, r3, lsl r1
   33aac:	b	33a58 <__assert_fail@plt+0x20fdc>
   33ab0:	mov	r0, #1
   33ab4:	b	33ac0 <__assert_fail@plt+0x21044>
   33ab8:	str	r1, [sl, #80]	; 0x50
   33abc:	mov	r2, r7
   33ac0:	ldr	r7, [r2, #4]
   33ac4:	cmp	r7, #0
   33ac8:	bne	33af8 <__assert_fail@plt+0x2107c>
   33acc:	mov	r3, #0
   33ad0:	ldr	r7, [r2, #8]
   33ad4:	mov	r1, r2
   33ad8:	cmp	r7, r3
   33adc:	cmpne	r7, #0
   33ae0:	bne	33af8 <__assert_fail@plt+0x2107c>
   33ae4:	ldr	r2, [r1]
   33ae8:	mov	r3, r1
   33aec:	cmp	r2, #0
   33af0:	bne	33ad0 <__assert_fail@plt+0x21054>
   33af4:	b	33b94 <__assert_fail@plt+0x21118>
   33af8:	ldrb	r1, [r7, #24]
   33afc:	cmp	r1, #17
   33b00:	beq	33b38 <__assert_fail@plt+0x210bc>
   33b04:	cmp	r1, #4
   33b08:	mov	r2, r7
   33b0c:	bne	33ac0 <__assert_fail@plt+0x21044>
   33b10:	ldr	r1, [sl, #132]	; 0x84
   33b14:	mov	r2, r7
   33b18:	cmp	r1, #0
   33b1c:	beq	33ac0 <__assert_fail@plt+0x21044>
   33b20:	ldr	r2, [r7, #20]
   33b24:	ldr	r1, [r1, r2, lsl #2]
   33b28:	str	r1, [r7, #20]
   33b2c:	ldr	r2, [sl, #80]	; 0x50
   33b30:	orr	r1, r2, r0, lsl r1
   33b34:	b	33ab8 <__assert_fail@plt+0x2103c>
   33b38:	ldr	r3, [r7, #4]
   33b3c:	mov	r2, r7
   33b40:	cmp	r3, #0
   33b44:	beq	33ac0 <__assert_fail@plt+0x21044>
   33b48:	ldrb	r1, [r3, #24]
   33b4c:	mov	r2, r7
   33b50:	cmp	r1, #17
   33b54:	bne	33ac0 <__assert_fail@plt+0x21044>
   33b58:	ldr	r1, [r3, #4]
   33b5c:	ldr	r3, [r3, #20]
   33b60:	cmp	r1, #0
   33b64:	str	r1, [r7, #4]
   33b68:	strne	r7, [r1]
   33b6c:	cmp	r3, #31
   33b70:	ldr	r1, [r7, #20]
   33b74:	ldr	r2, [sl, #132]	; 0x84
   33b78:	ldr	r1, [r2, r1, lsl #2]
   33b7c:	str	r1, [r2, r3, lsl #2]
   33b80:	mov	r2, r7
   33b84:	bgt	33ac0 <__assert_fail@plt+0x21044>
   33b88:	ldr	r1, [sl, #80]	; 0x50
   33b8c:	bic	r1, r1, r0, lsl r3
   33b90:	b	33ab8 <__assert_fail@plt+0x2103c>
   33b94:	ldr	r1, [r9, #24]
   33b98:	cmp	r1, #0
   33b9c:	beq	33bcc <__assert_fail@plt+0x21150>
   33ba0:	ldr	r0, [sl, #132]	; 0x84
   33ba4:	mov	r2, #0
   33ba8:	ldr	r3, [r0, r2, lsl #2]
   33bac:	cmp	r2, r3
   33bb0:	bne	33bc0 <__assert_fail@plt+0x21144>
   33bb4:	add	r2, r2, #1
   33bb8:	cmp	r2, r1
   33bbc:	bcc	33ba8 <__assert_fail@plt+0x2112c>
   33bc0:	cmp	r2, r1
   33bc4:	beq	33bd0 <__assert_fail@plt+0x21154>
   33bc8:	b	33bdc <__assert_fail@plt+0x21160>
   33bcc:	ldr	r0, [sl, #132]	; 0x84
   33bd0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   33bd4:	mov	r0, #0
   33bd8:	str	r0, [sl, #132]	; 0x84
   33bdc:	ldr	r0, [r8]
   33be0:	mov	r7, #0
   33be4:	sub	r5, fp, #48	; 0x30
   33be8:	mov	r4, r0
   33bec:	ldr	r0, [r0, #4]
   33bf0:	cmp	r0, #0
   33bf4:	bne	33be8 <__assert_fail@plt+0x2116c>
   33bf8:	ldr	r0, [r4, #8]
   33bfc:	cmp	r0, #0
   33c00:	bne	33be8 <__assert_fail@plt+0x2116c>
   33c04:	mov	r2, #0
   33c08:	b	33c28 <__assert_fail@plt+0x211ac>
   33c0c:	nop	{0}
   33c10:	andeq	r0, r0, r0
   33c14:	andeq	r0, r0, r1
   33c18:	andeq	r0, r0, r2
   33c1c:	andeq	r0, r0, r3
   33c20:	ldr	r2, [r1, #4]
   33c24:	mov	r4, r1
   33c28:	cmp	r2, #0
   33c2c:	str	r7, [fp, #-48]	; 0xffffffd0
   33c30:	beq	33c58 <__assert_fail@plt+0x211dc>
   33c34:	ldrb	r0, [r2, #24]
   33c38:	cmp	r0, #17
   33c3c:	bne	33c58 <__assert_fail@plt+0x211dc>
   33c40:	mov	r0, r5
   33c44:	mov	r1, r9
   33c48:	bl	3cf74 <__assert_fail@plt+0x2a4f8>
   33c4c:	cmp	r0, #0
   33c50:	str	r0, [r4, #4]
   33c54:	strne	r4, [r0]
   33c58:	ldr	r2, [r4, #8]
   33c5c:	cmp	r2, #0
   33c60:	beq	33c88 <__assert_fail@plt+0x2120c>
   33c64:	ldrb	r0, [r2, #24]
   33c68:	cmp	r0, #17
   33c6c:	bne	33c88 <__assert_fail@plt+0x2120c>
   33c70:	mov	r0, r5
   33c74:	mov	r1, r9
   33c78:	bl	3cf74 <__assert_fail@plt+0x2a4f8>
   33c7c:	cmp	r0, #0
   33c80:	str	r0, [r4, #8]
   33c84:	strne	r4, [r0]
   33c88:	ldr	r0, [fp, #-48]	; 0xffffffd0
   33c8c:	cmp	r0, #0
   33c90:	bne	33864 <__assert_fail@plt+0x20de8>
   33c94:	ldr	r1, [r4]
   33c98:	cmp	r1, #0
   33c9c:	beq	33cb4 <__assert_fail@plt+0x21238>
   33ca0:	ldr	r0, [r1, #8]
   33ca4:	cmp	r0, r4
   33ca8:	cmpne	r0, #0
   33cac:	beq	33c20 <__assert_fail@plt+0x211a4>
   33cb0:	b	33be8 <__assert_fail@plt+0x2116c>
   33cb4:	ldr	r0, [sl, #52]	; 0x34
   33cb8:	mov	r4, r0
   33cbc:	ldr	r0, [r0, #4]
   33cc0:	cmp	r0, #0
   33cc4:	bne	33cb8 <__assert_fail@plt+0x2123c>
   33cc8:	ldr	r0, [r4, #8]
   33ccc:	cmp	r0, #0
   33cd0:	bne	33cb8 <__assert_fail@plt+0x2123c>
   33cd4:	ldr	r2, [r4, #24]
   33cd8:	uxtb	r0, r2
   33cdc:	cmp	r0, #16
   33ce0:	bne	33cfc <__assert_fail@plt+0x21280>
   33ce4:	ldr	r0, [r4, #4]
   33ce8:	ldr	r1, [r0, #12]
   33cec:	str	r1, [r4, #12]
   33cf0:	ldr	r0, [r0, #28]
   33cf4:	str	r0, [r4, #28]
   33cf8:	b	33d3c <__assert_fail@plt+0x212c0>
   33cfc:	str	r4, [r4, #12]
   33d00:	mov	r0, sl
   33d04:	ldr	r1, [r4, #20]
   33d08:	bl	3d230 <__assert_fail@plt+0x2a7b4>
   33d0c:	cmn	r0, #1
   33d10:	str	r0, [r4, #28]
   33d14:	beq	33860 <__assert_fail@plt+0x20de4>
   33d18:	ldrb	r1, [r4, #24]
   33d1c:	cmp	r1, #12
   33d20:	bne	33d3c <__assert_fail@plt+0x212c0>
   33d24:	ldr	r1, [sl]
   33d28:	ldr	r2, [r4, #20]
   33d2c:	add	r0, r1, r0, lsl #3
   33d30:	ldr	r1, [r0, #4]
   33d34:	bfi	r1, r2, #8, #10
   33d38:	str	r1, [r0, #4]
   33d3c:	ldr	r1, [r4]
   33d40:	cmp	r1, #0
   33d44:	beq	33d68 <__assert_fail@plt+0x212ec>
   33d48:	ldr	r0, [r1, #8]
   33d4c:	cmp	r0, r4
   33d50:	mov	r4, r1
   33d54:	beq	33cd4 <__assert_fail@plt+0x21258>
   33d58:	cmp	r0, #0
   33d5c:	mov	r4, r1
   33d60:	beq	33cd4 <__assert_fail@plt+0x21258>
   33d64:	b	33cb8 <__assert_fail@plt+0x2123c>
   33d68:	ldr	r4, [r8]
   33d6c:	ldrb	r0, [r4, #24]
   33d70:	cmp	r0, #16
   33d74:	beq	33d8c <__assert_fail@plt+0x21310>
   33d78:	cmp	r0, #11
   33d7c:	bne	33d9c <__assert_fail@plt+0x21320>
   33d80:	ldr	r0, [r4, #4]
   33d84:	str	r4, [r0, #16]
   33d88:	b	33dc0 <__assert_fail@plt+0x21344>
   33d8c:	ldmib	r4, {r0, r1}
   33d90:	ldr	r2, [r1, #12]
   33d94:	str	r2, [r0, #16]
   33d98:	b	33db8 <__assert_fail@plt+0x2133c>
   33d9c:	ldr	r0, [r4, #4]
   33da0:	cmp	r0, #0
   33da4:	ldrne	r1, [r4, #16]
   33da8:	strne	r1, [r0, #16]
   33dac:	ldr	r1, [r4, #8]
   33db0:	cmp	r1, #0
   33db4:	beq	33dc0 <__assert_fail@plt+0x21344>
   33db8:	ldr	r2, [r4, #16]
   33dbc:	str	r2, [r1, #16]
   33dc0:	mov	r1, r4
   33dc4:	b	33de4 <__assert_fail@plt+0x21368>
   33dc8:	ldr	r3, [r1, #16]
   33dcc:	str	r3, [r2, #16]
   33dd0:	b	33de4 <__assert_fail@plt+0x21368>
   33dd4:	ldmib	r1, {r0, r2}
   33dd8:	ldr	r3, [r2, #12]
   33ddc:	str	r3, [r0, #16]
   33de0:	b	33dc8 <__assert_fail@plt+0x2134c>
   33de4:	cmp	r0, #0
   33de8:	bne	33e18 <__assert_fail@plt+0x2139c>
   33dec:	mov	r3, #0
   33df0:	ldr	r0, [r1, #8]
   33df4:	mov	r2, r1
   33df8:	cmp	r0, r3
   33dfc:	cmpne	r0, #0
   33e00:	bne	33e18 <__assert_fail@plt+0x2139c>
   33e04:	ldr	r1, [r2]
   33e08:	mov	r3, r2
   33e0c:	cmp	r1, #0
   33e10:	bne	33df0 <__assert_fail@plt+0x21374>
   33e14:	b	33e5c <__assert_fail@plt+0x213e0>
   33e18:	mov	r1, r0
   33e1c:	ldrb	r0, [r0, #24]
   33e20:	cmp	r0, #16
   33e24:	beq	33dd4 <__assert_fail@plt+0x21358>
   33e28:	cmp	r0, #11
   33e2c:	bne	33e3c <__assert_fail@plt+0x213c0>
   33e30:	ldr	r0, [r1, #4]
   33e34:	str	r1, [r0, #16]
   33e38:	b	33de4 <__assert_fail@plt+0x21368>
   33e3c:	ldr	r0, [r1, #4]
   33e40:	cmp	r0, #0
   33e44:	ldrne	r2, [r1, #16]
   33e48:	strne	r2, [r0, #16]
   33e4c:	ldr	r2, [r1, #8]
   33e50:	cmp	r2, #0
   33e54:	beq	33de4 <__assert_fail@plt+0x21368>
   33e58:	b	33dc8 <__assert_fail@plt+0x2134c>
   33e5c:	mov	r0, sl
   33e60:	mov	r1, r4
   33e64:	bl	3cddc <__assert_fail@plt+0x2a360>
   33e68:	cmp	r0, #0
   33e6c:	bne	33864 <__assert_fail@plt+0x20de8>
   33e70:	ldr	r7, [r4, #4]
   33e74:	cmp	r7, #0
   33e78:	bne	33ea8 <__assert_fail@plt+0x2142c>
   33e7c:	mov	r1, #0
   33e80:	ldr	r7, [r4, #8]
   33e84:	mov	r0, r4
   33e88:	cmp	r7, r1
   33e8c:	cmpne	r7, #0
   33e90:	bne	33ea8 <__assert_fail@plt+0x2142c>
   33e94:	ldr	r4, [r0]
   33e98:	mov	r1, r0
   33e9c:	cmp	r4, #0
   33ea0:	bne	33e80 <__assert_fail@plt+0x21404>
   33ea4:	b	33ec4 <__assert_fail@plt+0x21448>
   33ea8:	mov	r0, sl
   33eac:	mov	r1, r7
   33eb0:	bl	3cddc <__assert_fail@plt+0x2a360>
   33eb4:	cmp	r0, #0
   33eb8:	mov	r4, r7
   33ebc:	beq	33e70 <__assert_fail@plt+0x213f4>
   33ec0:	b	33864 <__assert_fail@plt+0x20de8>
   33ec4:	ldr	r0, [sl, #8]
   33ec8:	cmp	r0, #0
   33ecc:	beq	33f70 <__assert_fail@plt+0x214f4>
   33ed0:	mov	r5, #0
   33ed4:	sub	r4, fp, #48	; 0x30
   33ed8:	mov	r7, #0
   33edc:	ldr	r0, [sl, #24]
   33ee0:	add	r6, r7, r7, lsl #1
   33ee4:	add	r0, r0, r6, lsl #2
   33ee8:	ldr	r0, [r0, #4]
   33eec:	cmp	r0, #0
   33ef0:	beq	33efc <__assert_fail@plt+0x21480>
   33ef4:	mov	r1, r5
   33ef8:	b	33f3c <__assert_fail@plt+0x214c0>
   33efc:	mov	r0, r4
   33f00:	mov	r1, sl
   33f04:	mov	r2, r7
   33f08:	mov	r3, #1
   33f0c:	bl	3d400 <__assert_fail@plt+0x2a984>
   33f10:	cmp	r0, #0
   33f14:	bne	33864 <__assert_fail@plt+0x20de8>
   33f18:	ldr	r0, [sl, #24]
   33f1c:	mov	r1, r5
   33f20:	add	r0, r0, r6, lsl #2
   33f24:	ldr	r0, [r0, #4]
   33f28:	cmp	r0, #0
   33f2c:	bne	33f3c <__assert_fail@plt+0x214c0>
   33f30:	ldr	r0, [fp, #-40]	; 0xffffffd8
   33f34:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   33f38:	mov	r1, #1
   33f3c:	ldr	r2, [sl, #8]
   33f40:	add	r0, r7, #1
   33f44:	subs	r3, r0, r2
   33f48:	mov	r7, r3
   33f4c:	movwne	r3, #1
   33f50:	movne	r7, r0
   33f54:	tst	r1, #1
   33f58:	and	r5, r1, r3
   33f5c:	cmpeq	r0, r2
   33f60:	bne	33edc <__assert_fail@plt+0x21460>
   33f64:	add	r0, r0, r0, lsl #1
   33f68:	lsl	r0, r0, #2
   33f6c:	b	33f74 <__assert_fail@plt+0x214f8>
   33f70:	mov	r0, #0
   33f74:	ldrb	r1, [r9, #28]
   33f78:	str	r9, [sp, #12]
   33f7c:	tst	r1, #16
   33f80:	bne	33f9c <__assert_fail@plt+0x21520>
   33f84:	ldr	r1, [sp, #12]
   33f88:	ldr	r1, [r1, #24]
   33f8c:	cmp	r1, #0
   33f90:	ldrbne	r1, [sl, #88]	; 0x58
   33f94:	tstne	r1, #1
   33f98:	bne	33fa8 <__assert_fail@plt+0x2152c>
   33f9c:	ldr	r1, [sl, #76]	; 0x4c
   33fa0:	cmp	r1, #0
   33fa4:	beq	340e0 <__assert_fail@plt+0x21664>
   33fa8:	bl	3233c <__assert_fail@plt+0x1f8c0>
   33fac:	cmp	r0, #0
   33fb0:	str	r0, [sl, #28]
   33fb4:	beq	3451c <__assert_fail@plt+0x21aa0>
   33fb8:	ldr	r1, [sl, #8]
   33fbc:	cmp	r1, #0
   33fc0:	beq	340e0 <__assert_fail@plt+0x21664>
   33fc4:	mov	r1, #0
   33fc8:	str	r1, [r0]
   33fcc:	str	r1, [r0, #4]
   33fd0:	str	r1, [r0, #8]
   33fd4:	ldr	r0, [sl, #8]
   33fd8:	cmp	r0, #2
   33fdc:	bcc	3400c <__assert_fail@plt+0x21590>
   33fe0:	mov	r2, #1
   33fe4:	mov	r3, #12
   33fe8:	ldr	r0, [sl, #28]
   33fec:	add	r2, r2, #1
   33ff0:	str	r1, [r0, r3]!
   33ff4:	add	r3, r3, #12
   33ff8:	str	r1, [r0, #4]
   33ffc:	str	r1, [r0, #8]
   34000:	ldr	r0, [sl, #8]
   34004:	cmp	r2, r0
   34008:	bcc	33fe8 <__assert_fail@plt+0x2156c>
   3400c:	cmp	r0, #0
   34010:	beq	340e0 <__assert_fail@plt+0x21664>
   34014:	ldr	ip, [sl, #24]
   34018:	mov	r6, #0
   3401c:	add	lr, r6, r6, lsl #1
   34020:	add	r2, ip, lr, lsl #2
   34024:	ldr	r3, [r2, #4]
   34028:	cmp	r3, #1
   3402c:	blt	340d4 <__assert_fail@plt+0x21658>
   34030:	ldr	r1, [r2, #8]
   34034:	mov	r5, #0
   34038:	str	lr, [sp, #24]
   3403c:	str	r1, [sp, #20]
   34040:	ldr	r0, [r1, r5, lsl #2]
   34044:	ldr	r4, [sl, #28]
   34048:	add	r0, r0, r0, lsl #1
   3404c:	mov	r3, r4
   34050:	ldr	r7, [r3, r0, lsl #2]!
   34054:	mov	r8, r3
   34058:	ldr	r2, [r8, #4]!
   3405c:	cmp	r7, r2
   34060:	bne	340a8 <__assert_fail@plt+0x2162c>
   34064:	mov	r1, #2
   34068:	mov	r9, sl
   3406c:	add	sl, r4, r0, lsl #2
   34070:	add	r1, r1, r7, lsl #1
   34074:	str	r1, [r3]
   34078:	lsl	r1, r1, #2
   3407c:	ldr	r0, [sl, #8]!
   34080:	bl	33040 <__assert_fail@plt+0x205c4>
   34084:	cmp	r0, #0
   34088:	beq	3451c <__assert_fail@plt+0x21aa0>
   3408c:	str	r0, [sl]
   34090:	ldr	lr, [sp, #24]
   34094:	ldr	r1, [sp, #20]
   34098:	mov	sl, r9
   3409c:	ldr	ip, [r9, #24]
   340a0:	ldr	r2, [r8]
   340a4:	b	340b0 <__assert_fail@plt+0x21634>
   340a8:	add	r0, r4, r0, lsl #2
   340ac:	ldr	r0, [r0, #8]
   340b0:	add	r3, r2, #1
   340b4:	add	r5, r5, #1
   340b8:	str	r3, [r8]
   340bc:	str	r6, [r0, r2, lsl #2]
   340c0:	add	r0, ip, lr, lsl #2
   340c4:	ldr	r0, [r0, #4]
   340c8:	cmp	r5, r0
   340cc:	blt	34040 <__assert_fail@plt+0x215c4>
   340d0:	ldr	r0, [sl, #8]
   340d4:	add	r6, r6, #1
   340d8:	cmp	r6, r0
   340dc:	bcc	3401c <__assert_fail@plt+0x215a0>
   340e0:	mov	r0, #0
   340e4:	str	r0, [fp, #-52]	; 0xffffffcc
   340e8:	ldr	r0, [sp, #16]
   340ec:	cmp	r0, #0
   340f0:	bne	3423c <__assert_fail@plt+0x217c0>
   340f4:	ldr	r0, [sp, #28]
   340f8:	ldrb	r2, [r0, #88]	; 0x58
   340fc:	ands	r0, r2, #4
   34100:	beq	3423c <__assert_fail@plt+0x217c0>
   34104:	ldr	r0, [sp, #12]
   34108:	ldr	r0, [r0, #20]
   3410c:	cmp	r0, #0
   34110:	bne	3423c <__assert_fail@plt+0x217c0>
   34114:	ldr	r5, [sp, #28]
   34118:	mov	r9, #0
   3411c:	ldr	r7, [r5, #8]
   34120:	cmp	r7, #0
   34124:	beq	34210 <__assert_fail@plt+0x21794>
   34128:	ldr	r3, [r5]
   3412c:	mov	r8, #0
   34130:	mov	ip, #1
   34134:	mov	lr, #139	; 0x8b
   34138:	mov	r6, #0
   3413c:	mov	r4, #0
   34140:	add	r5, r3, r4, lsl #3
   34144:	ldrb	r1, [r5, #4]
   34148:	sub	r1, r1, #1
   3414c:	cmp	r1, #11
   34150:	bhi	345f8 <__assert_fail@plt+0x21b7c>
   34154:	add	r0, pc, #0
   34158:	ldr	pc, [r0, r1, lsl #2]
   3415c:	strdeq	r4, [r3], -r0
   34160:	andeq	r4, r3, ip, lsl #3
   34164:	muleq	r3, ip, r1
   34168:	andeq	r4, r3, ip, lsl #3
   3416c:	andeq	r4, r3, r8, lsl #4
   34170:	andeq	r4, r3, ip, lsr r2
   34174:	strdeq	r4, [r3], -r8
   34178:	andeq	r4, r3, ip, lsl #3
   3417c:	andeq	r4, r3, ip, lsl #3
   34180:	andeq	r4, r3, ip, lsl #3
   34184:	andeq	r4, r3, ip, lsl #3
   34188:	ldrdeq	r4, [r3], -r0
   3418c:	add	r4, r4, #1
   34190:	cmp	r4, r7
   34194:	bcc	34140 <__assert_fail@plt+0x216c4>
   34198:	b	34534 <__assert_fail@plt+0x21ab8>
   3419c:	ldr	r5, [r3, r4, lsl #3]
   341a0:	ldr	r0, [r5, #16]
   341a4:	cmp	r0, #0
   341a8:	bne	3423c <__assert_fail@plt+0x217c0>
   341ac:	ldr	r0, [r5, #20]
   341b0:	cmp	r0, #0
   341b4:	ldreq	r0, [r5, #24]
   341b8:	cmpeq	r0, #0
   341bc:	bne	3423c <__assert_fail@plt+0x217c0>
   341c0:	ldr	r0, [r5, #28]
   341c4:	cmp	r0, #0
   341c8:	beq	3418c <__assert_fail@plt+0x21710>
   341cc:	b	3423c <__assert_fail@plt+0x217c0>
   341d0:	ldr	r0, [r3, r4, lsl #3]
   341d4:	sub	r0, r0, #16
   341d8:	ror	r1, r0, #4
   341dc:	cmp	r1, #7
   341e0:	bhi	3423c <__assert_fail@plt+0x217c0>
   341e4:	tst	lr, ip, lsl r1
   341e8:	bne	3418c <__assert_fail@plt+0x21710>
   341ec:	b	3423c <__assert_fail@plt+0x217c0>
   341f0:	ldrsb	r0, [r5]
   341f4:	cmp	r0, #0
   341f8:	mov	r0, #0
   341fc:	movwlt	r0, #1
   34200:	orr	r6, r6, r0
   34204:	b	3418c <__assert_fail@plt+0x21710>
   34208:	mov	r8, #1
   3420c:	b	3418c <__assert_fail@plt+0x21710>
   34210:	mov	r8, #0
   34214:	mov	r0, #1
   34218:	and	r1, r2, #249	; 0xf9
   3421c:	str	r0, [r5, #92]	; 0x5c
   34220:	ldr	r0, [r5, #76]	; 0x4c
   34224:	cmp	r0, #0
   34228:	movwgt	r9, #1
   3422c:	orr	r0, r8, r9
   34230:	and	r0, r0, #1
   34234:	orr	r0, r1, r0, lsl #1
   34238:	strb	r0, [r5, #88]	; 0x58
   3423c:	ldr	r1, [sp, #28]
   34240:	ldr	r2, [r1, #52]	; 0x34
   34244:	ldr	r0, [r1, #24]
   34248:	ldr	r2, [r2, #12]
   3424c:	ldr	r2, [r2, #28]
   34250:	str	r2, [r1, #72]	; 0x48
   34254:	add	r2, r2, r2, lsl #1
   34258:	add	r5, r0, r2, lsl #2
   3425c:	mov	r4, r5
   34260:	ldr	sl, [r4, #4]!
   34264:	str	sl, [fp, #-44]	; 0xffffffd4
   34268:	ldr	r0, [r4]
   3426c:	cmp	r0, #1
   34270:	blt	343bc <__assert_fail@plt+0x21940>
   34274:	lsl	r0, sl, #2
   34278:	str	sl, [fp, #-48]	; 0xffffffd0
   3427c:	bl	3233c <__assert_fail@plt+0x1f8c0>
   34280:	cmp	r0, #0
   34284:	str	r0, [fp, #-40]	; 0xffffffd8
   34288:	beq	345dc <__assert_fail@plt+0x21b60>
   3428c:	mov	r6, r0
   34290:	ldr	r0, [r4]
   34294:	ldr	r1, [r5, #8]
   34298:	lsl	r2, r0, #2
   3429c:	mov	r0, r6
   342a0:	bl	124b8 <memcpy@plt>
   342a4:	ldr	r1, [sp, #28]
   342a8:	mov	r0, #0
   342ac:	cmp	sl, #1
   342b0:	str	r0, [fp, #-32]	; 0xffffffe0
   342b4:	ldrge	r0, [r1, #76]	; 0x4c
   342b8:	cmpge	r0, #1
   342bc:	blt	343d0 <__assert_fail@plt+0x21954>
   342c0:	mov	ip, #0
   342c4:	sub	r8, fp, #48	; 0x30
   342c8:	mov	r9, #1
   342cc:	b	342d4 <__assert_fail@plt+0x21858>
   342d0:	ldr	r6, [fp, #-40]	; 0xffffffd8
   342d4:	ldr	r7, [r6, ip, lsl #2]
   342d8:	ldr	r2, [r1]
   342dc:	add	r3, r2, r7, lsl #3
   342e0:	ldrb	r3, [r3, #4]
   342e4:	cmp	r3, #4
   342e8:	bne	343ac <__assert_fail@plt+0x21930>
   342ec:	mov	r3, #0
   342f0:	cmp	sl, #1
   342f4:	blt	34328 <__assert_fail@plt+0x218ac>
   342f8:	ldr	r5, [r6, r3, lsl #2]
   342fc:	add	r4, r2, r5, lsl #3
   34300:	ldrb	r4, [r4, #4]
   34304:	cmp	r4, #9
   34308:	bne	3431c <__assert_fail@plt+0x218a0>
   3430c:	ldr	r4, [r2, r7, lsl #3]
   34310:	ldr	r5, [r2, r5, lsl #3]
   34314:	cmp	r5, r4
   34318:	beq	34328 <__assert_fail@plt+0x218ac>
   3431c:	add	r3, r3, #1
   34320:	cmp	r3, sl
   34324:	blt	342f8 <__assert_fail@plt+0x2187c>
   34328:	cmp	r3, sl
   3432c:	beq	343ac <__assert_fail@plt+0x21930>
   34330:	ldr	r2, [r1, #20]
   34334:	add	r0, r7, r7, lsl #1
   34338:	cmp	sl, #1
   3433c:	add	r0, r2, r0, lsl #2
   34340:	ldr	r0, [r0, #8]
   34344:	ldr	r0, [r0]
   34348:	blt	34384 <__assert_fail@plt+0x21908>
   3434c:	mov	r2, #0
   34350:	subs	r3, sl, #1
   34354:	beq	34378 <__assert_fail@plt+0x218fc>
   34358:	add	r5, r2, r3
   3435c:	lsr	r4, r5, #1
   34360:	ldr	r7, [r6, r4, lsl #2]
   34364:	cmp	r7, r0
   34368:	movge	r3, r4
   3436c:	addlt	r2, r9, r5, lsr #1
   34370:	cmp	r2, r3
   34374:	bcc	34358 <__assert_fail@plt+0x218dc>
   34378:	ldr	r2, [r6, r2, lsl #2]
   3437c:	cmp	r2, r0
   34380:	beq	343ac <__assert_fail@plt+0x21930>
   34384:	ldr	r2, [r1, #24]
   34388:	add	r1, r0, r0, lsl #1
   3438c:	mov	r0, r8
   34390:	add	r1, r2, r1, lsl #2
   34394:	bl	3dad0 <__assert_fail@plt+0x2b054>
   34398:	cmp	r0, #0
   3439c:	bne	3452c <__assert_fail@plt+0x21ab0>
   343a0:	ldr	sl, [fp, #-44]	; 0xffffffd4
   343a4:	ldr	r1, [sp, #28]
   343a8:	mov	ip, #0
   343ac:	add	ip, ip, #1
   343b0:	cmp	ip, sl
   343b4:	blt	342d0 <__assert_fail@plt+0x21854>
   343b8:	b	343d0 <__assert_fail@plt+0x21954>
   343bc:	mov	r0, #0
   343c0:	str	r0, [fp, #-44]	; 0xffffffd4
   343c4:	str	r0, [fp, #-48]	; 0xffffffd0
   343c8:	str	r0, [fp, #-40]	; 0xffffffd8
   343cc:	str	r0, [fp, #-32]	; 0xffffffe0
   343d0:	sub	r0, fp, #32
   343d4:	sub	r2, fp, #48	; 0x30
   343d8:	mov	r3, #0
   343dc:	bl	3dd9c <__assert_fail@plt+0x2b320>
   343e0:	ldr	r1, [sp, #28]
   343e4:	ldr	r7, [sp, #12]
   343e8:	cmp	r0, #0
   343ec:	str	r0, [r1, #36]	; 0x24
   343f0:	beq	34478 <__assert_fail@plt+0x219fc>
   343f4:	ldrsb	r2, [r0, #52]	; 0x34
   343f8:	cmn	r2, #1
   343fc:	ble	34410 <__assert_fail@plt+0x21994>
   34400:	str	r0, [r1, #40]	; 0x28
   34404:	str	r0, [r1, #44]	; 0x2c
   34408:	str	r0, [r1, #48]	; 0x30
   3440c:	b	3448c <__assert_fail@plt+0x21a10>
   34410:	sub	r4, fp, #32
   34414:	sub	r6, fp, #48	; 0x30
   34418:	mov	r3, #1
   3441c:	mov	r0, r4
   34420:	mov	r2, r6
   34424:	bl	3dd9c <__assert_fail@plt+0x2b320>
   34428:	ldr	r1, [sp, #28]
   3442c:	mov	r2, r6
   34430:	mov	r3, #2
   34434:	str	r0, [r1, #40]	; 0x28
   34438:	ldr	r1, [sp, #28]
   3443c:	mov	r0, r4
   34440:	bl	3dd9c <__assert_fail@plt+0x2b320>
   34444:	ldr	r1, [sp, #28]
   34448:	mov	r2, r6
   3444c:	mov	r3, #6
   34450:	str	r0, [r1, #44]	; 0x2c
   34454:	ldr	r1, [sp, #28]
   34458:	mov	r0, r4
   3445c:	bl	3dd9c <__assert_fail@plt+0x2b320>
   34460:	ldr	r2, [sp, #28]
   34464:	str	r0, [r2, #48]	; 0x30
   34468:	ldr	r1, [r2, #40]	; 0x28
   3446c:	cmp	r1, #0
   34470:	cmpne	r0, #0
   34474:	bne	34480 <__assert_fail@plt+0x21a04>
   34478:	ldr	r0, [fp, #-32]	; 0xffffffe0
   3447c:	b	34498 <__assert_fail@plt+0x21a1c>
   34480:	ldr	r0, [r2, #44]	; 0x2c
   34484:	cmp	r0, #0
   34488:	beq	34478 <__assert_fail@plt+0x219fc>
   3448c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   34490:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   34494:	mov	r0, #0
   34498:	str	r0, [fp, #-52]	; 0xffffffcc
   3449c:	ldr	r5, [r7]
   344a0:	ldr	r0, [r5, #56]	; 0x38
   344a4:	cmp	r0, #0
   344a8:	beq	344c0 <__assert_fail@plt+0x21a44>
   344ac:	ldr	r4, [r0]
   344b0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   344b4:	cmp	r4, #0
   344b8:	mov	r0, r4
   344bc:	bne	344ac <__assert_fail@plt+0x21a30>
   344c0:	mov	r0, #31
   344c4:	mov	r4, #0
   344c8:	str	r0, [r5, #64]	; 0x40
   344cc:	str	r4, [r5, #52]	; 0x34
   344d0:	str	r4, [r5, #56]	; 0x38
   344d4:	ldr	r0, [r5, #16]
   344d8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   344dc:	str	r4, [r5, #16]
   344e0:	ldr	r0, [sp, #40]	; 0x28
   344e4:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   344e8:	ldr	r0, [sp, #44]	; 0x2c
   344ec:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   344f0:	ldrb	r0, [sp, #107]	; 0x6b
   344f4:	cmp	r0, #0
   344f8:	beq	34504 <__assert_fail@plt+0x21a88>
   344fc:	ldr	r0, [sp, #36]	; 0x24
   34500:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   34504:	ldr	r0, [fp, #-52]	; 0xffffffcc
   34508:	cmp	r0, #0
   3450c:	bne	345ac <__assert_fail@plt+0x21b30>
   34510:	mov	r0, r4
   34514:	sub	sp, fp, #28
   34518:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3451c:	ldr	r9, [sp, #12]
   34520:	mov	r0, #12
   34524:	str	r0, [fp, #-52]	; 0xffffffcc
   34528:	b	3396c <__assert_fail@plt+0x20ef0>
   3452c:	ldr	r7, [sp, #12]
   34530:	b	34498 <__assert_fail@plt+0x21a1c>
   34534:	orr	r0, r6, r8
   34538:	tst	r0, #1
   3453c:	beq	345a4 <__assert_fail@plt+0x21b28>
   34540:	ldr	r5, [sp, #28]
   34544:	mov	r2, #0
   34548:	mov	r7, #7
   3454c:	b	34554 <__assert_fail@plt+0x21ad8>
   34550:	ldr	r3, [r5]
   34554:	add	r3, r3, r2, lsl #3
   34558:	ldr	r6, [r3, #4]
   3455c:	uxtb	r1, r6
   34560:	cmp	r1, #5
   34564:	beq	34584 <__assert_fail@plt+0x21b08>
   34568:	cmp	r1, #1
   3456c:	bne	3458c <__assert_fail@plt+0x21b10>
   34570:	ldrsb	r0, [r3]
   34574:	cmn	r0, #1
   34578:	bicle	r0, r6, #2097152	; 0x200000
   3457c:	strle	r0, [r3, #4]
   34580:	b	3458c <__assert_fail@plt+0x21b10>
   34584:	bfi	r6, r7, #0, #8
   34588:	str	r6, [r3, #4]
   3458c:	ldr	r0, [r5, #8]
   34590:	add	r2, r2, #1
   34594:	cmp	r2, r0
   34598:	bcc	34550 <__assert_fail@plt+0x21ad4>
   3459c:	ldrb	r2, [r5, #88]	; 0x58
   345a0:	b	34214 <__assert_fail@plt+0x21798>
   345a4:	ldr	r5, [sp, #28]
   345a8:	b	34214 <__assert_fail@plt+0x21798>
   345ac:	ldr	r0, [sp, #8]
   345b0:	cmp	r0, #0
   345b4:	beq	345c4 <__assert_fail@plt+0x21b48>
   345b8:	ldr	r0, [sp, #28]
   345bc:	add	r0, r0, #136	; 0x88
   345c0:	bl	12404 <pthread_mutex_destroy@plt>
   345c4:	ldr	r0, [sp, #28]
   345c8:	bl	34ca0 <__assert_fail@plt+0x22224>
   345cc:	mov	r0, #0
   345d0:	str	r0, [r7]
   345d4:	str	r0, [r7, #4]
   345d8:	b	33a00 <__assert_fail@plt+0x20f84>
   345dc:	ldr	r7, [sp, #12]
   345e0:	mov	r0, #0
   345e4:	str	r0, [fp, #-48]	; 0xffffffd0
   345e8:	str	r0, [fp, #-44]	; 0xffffffd4
   345ec:	mov	r0, #12
   345f0:	str	r0, [fp, #-32]	; 0xffffffe0
   345f4:	b	34498 <__assert_fail@plt+0x21a1c>
   345f8:	bl	12a28 <abort@plt>
   345fc:	movw	r2, #57024	; 0xdec0
   34600:	movt	r2, #5
   34604:	ldr	r1, [r2]
   34608:	str	r0, [r2]
   3460c:	mov	r0, r1
   34610:	bx	lr
   34614:	push	{r4, r5, r6, sl, fp, lr}
   34618:	add	fp, sp, #16
   3461c:	ldr	r5, [r0, #16]
   34620:	ldr	r6, [r0]
   34624:	mov	r4, r0
   34628:	mov	r1, #0
   3462c:	mov	r2, #256	; 0x100
   34630:	mov	r0, r5
   34634:	bl	12800 <memset@plt>
   34638:	ldr	r1, [r6, #36]	; 0x24
   3463c:	mov	r0, r4
   34640:	mov	r2, r5
   34644:	bl	346b0 <__assert_fail@plt+0x21c34>
   34648:	ldr	r0, [r6, #36]	; 0x24
   3464c:	ldr	r1, [r6, #40]	; 0x28
   34650:	cmp	r0, r1
   34654:	beq	34668 <__assert_fail@plt+0x21bec>
   34658:	mov	r0, r4
   3465c:	mov	r2, r5
   34660:	bl	346b0 <__assert_fail@plt+0x21c34>
   34664:	ldr	r0, [r6, #36]	; 0x24
   34668:	ldr	r1, [r6, #44]	; 0x2c
   3466c:	cmp	r0, r1
   34670:	beq	34684 <__assert_fail@plt+0x21c08>
   34674:	mov	r0, r4
   34678:	mov	r2, r5
   3467c:	bl	346b0 <__assert_fail@plt+0x21c34>
   34680:	ldr	r0, [r6, #36]	; 0x24
   34684:	ldr	r1, [r6, #48]	; 0x30
   34688:	cmp	r0, r1
   3468c:	beq	3469c <__assert_fail@plt+0x21c20>
   34690:	mov	r0, r4
   34694:	mov	r2, r5
   34698:	bl	346b0 <__assert_fail@plt+0x21c34>
   3469c:	ldrb	r0, [r4, #28]
   346a0:	orr	r0, r0, #8
   346a4:	strb	r0, [r4, #28]
   346a8:	mov	r0, #0
   346ac:	pop	{r4, r5, r6, sl, fp, pc}
   346b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   346b4:	add	fp, sp, #28
   346b8:	sub	sp, sp, #316	; 0x13c
   346bc:	ldr	r8, [r0]
   346c0:	str	r0, [sp, #20]
   346c4:	mov	r3, #0
   346c8:	str	r2, [sp, #36]	; 0x24
   346cc:	ldr	r0, [r8, #92]	; 0x5c
   346d0:	cmp	r0, #1
   346d4:	ldreq	r0, [sp, #20]
   346d8:	ldrbeq	r0, [r0, #14]
   346dc:	ubfxeq	r3, r0, #6, #1
   346e0:	ldr	r0, [r1, #8]
   346e4:	cmp	r0, #1
   346e8:	blt	34a7c <__assert_fail@plt+0x22000>
   346ec:	add	r0, sp, #40	; 0x28
   346f0:	mov	r4, #1
   346f4:	mov	r2, #0
   346f8:	str	r3, [sp, #32]
   346fc:	str	r1, [sp, #12]
   34700:	str	r8, [sp, #24]
   34704:	add	r0, r0, #1
   34708:	str	r0, [sp, #8]
   3470c:	movw	r0, #1
   34710:	movt	r0, #32
   34714:	add	r0, r0, #254	; 0xfe
   34718:	str	r0, [sp, #4]
   3471c:	ldr	r0, [r1, #12]
   34720:	str	r2, [sp, #16]
   34724:	ldr	sl, [r0, r2, lsl #2]
   34728:	ldr	r0, [r8]
   3472c:	add	r1, r0, sl, lsl #3
   34730:	ldrb	r5, [r1, #4]
   34734:	sub	r1, r5, #1
   34738:	cmp	r1, #6
   3473c:	bhi	34a64 <__assert_fail@plt+0x21fe8>
   34740:	add	r2, pc, #0
   34744:	ldr	pc, [r2, r1, lsl #2]
   34748:	andeq	r4, r3, r4, ror #14
   3474c:	andeq	r4, r3, r4, lsl #21
   34750:	andeq	r4, r3, r4, ror r8
   34754:	andeq	r4, r3, r4, ror #20
   34758:	andeq	r4, r3, r4, lsl #21
   3475c:	andeq	r4, r3, r8, lsl r9
   34760:	andeq	r4, r3, r4, lsl #21
   34764:	ldrb	r5, [r0, sl, lsl #3]
   34768:	ldr	r0, [sp, #36]	; 0x24
   3476c:	cmp	r3, #0
   34770:	strb	r4, [r0, r5]
   34774:	beq	34790 <__assert_fail@plt+0x21d14>
   34778:	bl	12710 <__ctype_tolower_loc@plt>
   3477c:	ldr	r0, [r0]
   34780:	ldr	r3, [sp, #32]
   34784:	ldr	r1, [sp, #36]	; 0x24
   34788:	ldr	r0, [r0, r5, lsl #2]
   3478c:	strb	r4, [r1, r0]
   34790:	ldr	r0, [sp, #20]
   34794:	ldrb	r0, [r0, #14]
   34798:	tst	r0, #64	; 0x40
   3479c:	beq	34a64 <__assert_fail@plt+0x21fe8>
   347a0:	ldr	r0, [r8, #92]	; 0x5c
   347a4:	cmp	r0, #2
   347a8:	blt	34a64 <__assert_fail@plt+0x21fe8>
   347ac:	ldr	r0, [r8]
   347b0:	add	r1, sl, #1
   347b4:	ldr	r5, [sp, #4]
   347b8:	movw	r6, #1
   347bc:	add	r9, sp, #40	; 0x28
   347c0:	mov	r7, #0
   347c4:	movt	r6, #32
   347c8:	ldrb	r0, [r0, sl, lsl #3]
   347cc:	strb	r0, [sp, #40]	; 0x28
   347d0:	ldr	r0, [r8, #8]
   347d4:	cmp	r1, r0
   347d8:	ldr	r0, [sp, #8]
   347dc:	bcs	3481c <__assert_fail@plt+0x21da0>
   347e0:	ldr	r0, [sp, #8]
   347e4:	ldr	r1, [r8]
   347e8:	add	r1, r1, sl, lsl #3
   347ec:	ldr	r2, [r1, #12]
   347f0:	and	r2, r2, r5
   347f4:	cmp	r2, r6
   347f8:	bne	3481c <__assert_fail@plt+0x21da0>
   347fc:	ldrb	r1, [r1, #8]
   34800:	add	r3, sl, #2
   34804:	strb	r1, [r0], #1
   34808:	add	r1, sl, #1
   3480c:	ldr	r2, [r8, #8]
   34810:	mov	sl, r1
   34814:	cmp	r3, r2
   34818:	bcc	347e4 <__assert_fail@plt+0x21d68>
   3481c:	sub	r6, r0, r9
   34820:	sub	r5, fp, #48	; 0x30
   34824:	sub	r0, fp, #36	; 0x24
   34828:	mov	r1, r9
   3482c:	str	r7, [fp, #-44]	; 0xffffffd4
   34830:	str	r7, [fp, #-48]	; 0xffffffd0
   34834:	mov	r2, r6
   34838:	mov	r3, r5
   3483c:	bl	3236c <__assert_fail@plt+0x1f8f0>
   34840:	cmp	r0, r6
   34844:	bne	34994 <__assert_fail@plt+0x21f18>
   34848:	ldr	r0, [fp, #-36]	; 0xffffffdc
   3484c:	bl	124e8 <towlower@plt>
   34850:	mov	r1, r0
   34854:	mov	r0, r9
   34858:	mov	r2, r5
   3485c:	bl	1238c <wcrtomb@plt>
   34860:	cmn	r0, #1
   34864:	ldrbne	r0, [sp, #40]	; 0x28
   34868:	ldrne	r1, [sp, #36]	; 0x24
   3486c:	strbne	r4, [r1, r0]
   34870:	b	34994 <__assert_fail@plt+0x21f18>
   34874:	ldr	r5, [sp, #36]	; 0x24
   34878:	mov	r7, #0
   3487c:	mov	r6, #0
   34880:	mov	r9, #0
   34884:	str	sl, [sp, #28]
   34888:	b	3489c <__assert_fail@plt+0x21e20>
   3488c:	ldr	r0, [r8]
   34890:	add	r7, r7, #128	; 0x80
   34894:	add	r5, r5, #32
   34898:	add	r6, r6, #32
   3489c:	ldr	r0, [r0, sl, lsl #3]
   348a0:	mov	sl, #0
   348a4:	ldr	r8, [r0, r9, lsl #2]
   348a8:	tst	r8, r4, lsl sl
   348ac:	beq	348f4 <__assert_fail@plt+0x21e78>
   348b0:	mov	r0, r5
   348b4:	cmp	r3, #0
   348b8:	strb	r4, [r0, sl]!
   348bc:	beq	348f4 <__assert_fail@plt+0x21e78>
   348c0:	add	r1, r6, sl
   348c4:	add	r1, r1, #128	; 0x80
   348c8:	lsr	r1, r1, #7
   348cc:	cmp	r1, #2
   348d0:	bhi	348f0 <__assert_fail@plt+0x21e74>
   348d4:	bl	12710 <__ctype_tolower_loc@plt>
   348d8:	ldr	r0, [r0]
   348dc:	ldr	r1, [sp, #36]	; 0x24
   348e0:	ldr	r3, [sp, #32]
   348e4:	add	r0, r0, r7
   348e8:	ldr	r0, [r0, sl, lsl #2]
   348ec:	add	r0, r1, r0
   348f0:	strb	r4, [r0]
   348f4:	add	sl, sl, #1
   348f8:	cmp	sl, #32
   348fc:	bne	348a8 <__assert_fail@plt+0x21e2c>
   34900:	ldr	r8, [sp, #24]
   34904:	ldr	sl, [sp, #28]
   34908:	add	r9, r9, #1
   3490c:	cmp	r9, #8
   34910:	bne	3488c <__assert_fail@plt+0x21e10>
   34914:	b	34a64 <__assert_fail@plt+0x21fe8>
   34918:	ldr	r6, [r0, sl, lsl #3]
   3491c:	ldr	r0, [r8, #92]	; 0x5c
   34920:	cmp	r0, #2
   34924:	blt	3499c <__assert_fail@plt+0x21f20>
   34928:	ldr	r0, [r6, #36]	; 0x24
   3492c:	cmp	r0, #0
   34930:	bne	34948 <__assert_fail@plt+0x21ecc>
   34934:	ldrb	r0, [r6, #16]
   34938:	tst	r0, #1
   3493c:	ldreq	r0, [r6, #32]
   34940:	cmpeq	r0, #0
   34944:	beq	3499c <__assert_fail@plt+0x21f20>
   34948:	mov	r6, #0
   3494c:	add	r5, sp, #40	; 0x28
   34950:	sub	r7, fp, #48	; 0x30
   34954:	strb	r6, [fp, #-48]	; 0xffffffd0
   34958:	mov	r0, #0
   3495c:	mov	r1, r7
   34960:	mov	r2, #1
   34964:	mov	r3, r5
   34968:	str	r6, [sp, #44]	; 0x2c
   3496c:	str	r6, [sp, #40]	; 0x28
   34970:	bl	3236c <__assert_fail@plt+0x1f8f0>
   34974:	cmn	r0, #2
   34978:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   3497c:	ldreq	r0, [sp, #36]	; 0x24
   34980:	strbeq	r4, [r0, r1]
   34984:	add	r0, r1, #1
   34988:	tst	r0, #255	; 0xff
   3498c:	strb	r0, [fp, #-48]	; 0xffffffd0
   34990:	bne	34958 <__assert_fail@plt+0x21edc>
   34994:	ldr	r3, [sp, #32]
   34998:	b	34a64 <__assert_fail@plt+0x21fe8>
   3499c:	ldr	r0, [r6, #20]
   349a0:	cmp	r0, #1
   349a4:	blt	34a64 <__assert_fail@plt+0x21fe8>
   349a8:	mov	r9, #0
   349ac:	mov	r0, #0
   349b0:	add	r7, sp, #40	; 0x28
   349b4:	sub	r2, fp, #48	; 0x30
   349b8:	str	r0, [fp, #-44]	; 0xffffffd4
   349bc:	str	r0, [fp, #-48]	; 0xffffffd0
   349c0:	ldr	r0, [r6]
   349c4:	ldr	r1, [r0, r9, lsl #2]
   349c8:	mov	r0, r7
   349cc:	bl	1238c <wcrtomb@plt>
   349d0:	ldr	r3, [sp, #32]
   349d4:	cmn	r0, #1
   349d8:	beq	34a08 <__assert_fail@plt+0x21f8c>
   349dc:	ldrb	r5, [sp, #40]	; 0x28
   349e0:	ldr	r0, [sp, #36]	; 0x24
   349e4:	cmp	r3, #0
   349e8:	strb	r4, [r0, r5]
   349ec:	beq	34a08 <__assert_fail@plt+0x21f8c>
   349f0:	bl	12710 <__ctype_tolower_loc@plt>
   349f4:	ldr	r0, [r0]
   349f8:	ldr	r3, [sp, #32]
   349fc:	ldr	r1, [sp, #36]	; 0x24
   34a00:	ldr	r0, [r0, r5, lsl #2]
   34a04:	strb	r4, [r1, r0]
   34a08:	ldr	r0, [sp, #20]
   34a0c:	ldrb	r0, [r0, #14]
   34a10:	tst	r0, #64	; 0x40
   34a14:	beq	34a54 <__assert_fail@plt+0x21fd8>
   34a18:	ldr	r0, [r8, #92]	; 0x5c
   34a1c:	cmp	r0, #2
   34a20:	blt	34a54 <__assert_fail@plt+0x21fd8>
   34a24:	ldr	r0, [r6]
   34a28:	ldr	r0, [r0, r9, lsl #2]
   34a2c:	bl	124e8 <towlower@plt>
   34a30:	mov	r1, r0
   34a34:	mov	r0, r7
   34a38:	sub	r2, fp, #48	; 0x30
   34a3c:	bl	1238c <wcrtomb@plt>
   34a40:	cmn	r0, #1
   34a44:	ldr	r3, [sp, #32]
   34a48:	ldrbne	r0, [sp, #40]	; 0x28
   34a4c:	ldrne	r1, [sp, #36]	; 0x24
   34a50:	strbne	r4, [r1, r0]
   34a54:	ldr	r0, [r6, #20]
   34a58:	add	r9, r9, #1
   34a5c:	cmp	r9, r0
   34a60:	blt	349ac <__assert_fail@plt+0x21f30>
   34a64:	ldr	r1, [sp, #12]
   34a68:	ldr	r2, [sp, #16]
   34a6c:	ldr	r0, [r1, #8]
   34a70:	add	r2, r2, #1
   34a74:	cmp	r2, r0
   34a78:	blt	3471c <__assert_fail@plt+0x21ca0>
   34a7c:	sub	sp, fp, #28
   34a80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34a84:	ldr	r0, [sp, #36]	; 0x24
   34a88:	mov	r1, #1
   34a8c:	mov	r2, #256	; 0x100
   34a90:	bl	12800 <memset@plt>
   34a94:	cmp	r5, #2
   34a98:	ldreq	r1, [sp, #20]
   34a9c:	ldrbeq	r0, [r1, #28]
   34aa0:	orreq	r0, r0, #1
   34aa4:	strbeq	r0, [r1, #28]
   34aa8:	sub	sp, fp, #28
   34aac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34ab0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   34ab4:	add	fp, sp, #24
   34ab8:	mov	r4, r0
   34abc:	mov	r0, #0
   34ac0:	mov	r6, r2
   34ac4:	mov	r8, r1
   34ac8:	str	r0, [r4]
   34acc:	str	r0, [r4, #4]
   34ad0:	str	r0, [r4, #8]
   34ad4:	mov	r0, #256	; 0x100
   34ad8:	bl	3233c <__assert_fail@plt+0x1f8c0>
   34adc:	cmp	r0, #0
   34ae0:	str	r0, [r4, #16]
   34ae4:	beq	34b94 <__assert_fail@plt+0x22118>
   34ae8:	movw	r0, #45820	; 0xb2fc
   34aec:	tst	r6, #1
   34af0:	and	r1, r6, #2
   34af4:	movt	r0, #3
   34af8:	movweq	r0, #710	; 0x2c6
   34afc:	movteq	r0, #257	; 0x101
   34b00:	tst	r6, #4
   34b04:	orr	r5, r0, r1, lsl #21
   34b08:	bne	34b1c <__assert_fail@plt+0x220a0>
   34b0c:	ldrb	r0, [r4, #28]
   34b10:	and	r0, r0, #127	; 0x7f
   34b14:	strb	r0, [r4, #28]
   34b18:	b	34b3c <__assert_fail@plt+0x220c0>
   34b1c:	ldrb	r0, [r4, #28]
   34b20:	mvn	r1, #127	; 0x7f
   34b24:	orr	r0, r0, r1
   34b28:	movw	r1, #45758	; 0xb2be
   34b2c:	movt	r1, #323	; 0x143
   34b30:	strb	r0, [r4, #28]
   34b34:	and	r1, r5, r1
   34b38:	orr	r5, r1, #256	; 0x100
   34b3c:	and	r1, r6, #8
   34b40:	and	r0, r0, #239	; 0xef
   34b44:	mov	r7, #0
   34b48:	orr	r0, r0, r1, lsl #1
   34b4c:	str	r7, [r4, #20]
   34b50:	strb	r0, [r4, #28]
   34b54:	mov	r0, r8
   34b58:	bl	12788 <strlen@plt>
   34b5c:	mov	r2, r0
   34b60:	mov	r0, r4
   34b64:	mov	r1, r8
   34b68:	mov	r3, r5
   34b6c:	bl	33150 <__assert_fail@plt+0x206d4>
   34b70:	mov	r5, r0
   34b74:	cmp	r0, #16
   34b78:	movweq	r5, #8
   34b7c:	cmp	r5, #0
   34b80:	bne	34ba0 <__assert_fail@plt+0x22124>
   34b84:	mov	r0, r4
   34b88:	bl	34614 <__assert_fail@plt+0x21b98>
   34b8c:	mov	r0, r7
   34b90:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   34b94:	mov	r7, #12
   34b98:	mov	r0, r7
   34b9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   34ba0:	ldr	r0, [r4, #16]
   34ba4:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   34ba8:	mov	r0, r5
   34bac:	str	r7, [r4, #16]
   34bb0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   34bb4:	push	{r4, r5, r6, r7, fp, lr}
   34bb8:	add	fp, sp, #16
   34bbc:	cmp	r0, #17
   34bc0:	bcs	34c34 <__assert_fail@plt+0x221b8>
   34bc4:	movw	r1, #51888	; 0xcab0
   34bc8:	mov	r4, r2
   34bcc:	mov	r2, #5
   34bd0:	mov	r5, r3
   34bd4:	movt	r1, #4
   34bd8:	ldr	r0, [r1, r0, lsl #2]
   34bdc:	movw	r1, #51504	; 0xc930
   34be0:	movt	r1, #4
   34be4:	add	r1, r1, r0
   34be8:	mov	r0, #0
   34bec:	bl	1253c <dcgettext@plt>
   34bf0:	mov	r6, r0
   34bf4:	bl	12788 <strlen@plt>
   34bf8:	add	r7, r0, #1
   34bfc:	cmp	r5, #0
   34c00:	beq	34c1c <__assert_fail@plt+0x221a0>
   34c04:	cmp	r7, r5
   34c08:	mov	r2, r7
   34c0c:	bhi	34c24 <__assert_fail@plt+0x221a8>
   34c10:	mov	r0, r4
   34c14:	mov	r1, r6
   34c18:	bl	124b8 <memcpy@plt>
   34c1c:	mov	r0, r7
   34c20:	pop	{r4, r5, r6, r7, fp, pc}
   34c24:	sub	r2, r5, #1
   34c28:	mov	r0, #0
   34c2c:	strb	r0, [r4, r2]
   34c30:	b	34c10 <__assert_fail@plt+0x22194>
   34c34:	bl	12a28 <abort@plt>
   34c38:	push	{r4, r5, fp, lr}
   34c3c:	add	fp, sp, #8
   34c40:	ldr	r5, [r0]
   34c44:	mov	r4, r0
   34c48:	cmp	r5, #0
   34c4c:	beq	34c78 <__assert_fail@plt+0x221fc>
   34c50:	movw	r0, #9352	; 0x2488
   34c54:	movw	r1, #10276	; 0x2824
   34c58:	movt	r0, #1
   34c5c:	movt	r1, #1
   34c60:	orrs	r0, r1, r0
   34c64:	beq	34c70 <__assert_fail@plt+0x221f4>
   34c68:	add	r0, r5, #136	; 0x88
   34c6c:	bl	12404 <pthread_mutex_destroy@plt>
   34c70:	mov	r0, r5
   34c74:	bl	34ca0 <__assert_fail@plt+0x22224>
   34c78:	mov	r5, #0
   34c7c:	str	r5, [r4]
   34c80:	str	r5, [r4, #4]
   34c84:	ldr	r0, [r4, #16]
   34c88:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   34c8c:	str	r5, [r4, #16]
   34c90:	ldr	r0, [r4, #20]
   34c94:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   34c98:	str	r5, [r4, #20]
   34c9c:	pop	{r4, r5, fp, pc}
   34ca0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34ca4:	add	fp, sp, #28
   34ca8:	sub	sp, sp, #4
   34cac:	mov	sl, r0
   34cb0:	ldr	r0, [r0]
   34cb4:	cmp	r0, #0
   34cb8:	ldrne	r1, [sl, #8]
   34cbc:	cmpne	r1, #0
   34cc0:	beq	34d38 <__assert_fail@plt+0x222bc>
   34cc4:	movw	r7, #255	; 0xff
   34cc8:	mov	r6, #0
   34ccc:	movt	r7, #4
   34cd0:	b	34cd8 <__assert_fail@plt+0x2225c>
   34cd4:	ldr	r0, [sl]
   34cd8:	add	r1, r0, r6, lsl #3
   34cdc:	ldr	r1, [r1, #4]
   34ce0:	and	r1, r1, r7
   34ce4:	cmp	r1, #3
   34ce8:	beq	34d20 <__assert_fail@plt+0x222a4>
   34cec:	cmp	r1, #6
   34cf0:	bne	34d28 <__assert_fail@plt+0x222ac>
   34cf4:	ldr	r5, [r0, r6, lsl #3]
   34cf8:	ldr	r0, [r5]
   34cfc:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   34d00:	ldr	r0, [r5, #4]
   34d04:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   34d08:	ldr	r0, [r5, #8]
   34d0c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   34d10:	ldr	r0, [r5, #12]
   34d14:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   34d18:	mov	r0, r5
   34d1c:	b	34d24 <__assert_fail@plt+0x222a8>
   34d20:	ldr	r0, [r0, r6, lsl #3]
   34d24:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   34d28:	ldr	r0, [sl, #8]
   34d2c:	add	r6, r6, #1
   34d30:	cmp	r6, r0
   34d34:	bcc	34cd4 <__assert_fail@plt+0x22258>
   34d38:	ldr	r0, [sl, #12]
   34d3c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   34d40:	ldr	r0, [sl, #8]
   34d44:	cmp	r0, #0
   34d48:	beq	34db4 <__assert_fail@plt+0x22338>
   34d4c:	add	r7, sl, #20
   34d50:	add	r8, sl, #28
   34d54:	add	r9, sl, #24
   34d58:	mov	r5, #0
   34d5c:	mov	r6, #8
   34d60:	ldr	r0, [r9]
   34d64:	cmp	r0, #0
   34d68:	beq	34d74 <__assert_fail@plt+0x222f8>
   34d6c:	ldr	r0, [r0, r6]
   34d70:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   34d74:	ldr	r0, [r8]
   34d78:	cmp	r0, #0
   34d7c:	beq	34d88 <__assert_fail@plt+0x2230c>
   34d80:	ldr	r0, [r0, r6]
   34d84:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   34d88:	ldr	r0, [r7]
   34d8c:	cmp	r0, #0
   34d90:	beq	34d9c <__assert_fail@plt+0x22320>
   34d94:	ldr	r0, [r0, r6]
   34d98:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   34d9c:	ldr	r0, [sl, #8]
   34da0:	add	r5, r5, #1
   34da4:	add	r6, r6, #12
   34da8:	cmp	r5, r0
   34dac:	bcc	34d60 <__assert_fail@plt+0x222e4>
   34db0:	b	34dc0 <__assert_fail@plt+0x22344>
   34db4:	add	r8, sl, #28
   34db8:	add	r9, sl, #24
   34dbc:	add	r7, sl, #20
   34dc0:	ldr	r0, [r7]
   34dc4:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   34dc8:	ldr	r0, [r9]
   34dcc:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   34dd0:	ldr	r0, [r8]
   34dd4:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   34dd8:	ldr	r0, [sl]
   34ddc:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   34de0:	ldr	r5, [sl, #32]
   34de4:	cmp	r5, #0
   34de8:	beq	34e48 <__assert_fail@plt+0x223cc>
   34dec:	mov	r6, #0
   34df0:	b	34dfc <__assert_fail@plt+0x22380>
   34df4:	ldr	r5, [sl, #32]
   34df8:	add	r6, r6, #1
   34dfc:	add	r0, r6, r6, lsl #1
   34e00:	ldr	r0, [r5, r0, lsl #2]!
   34e04:	add	r7, r5, #8
   34e08:	cmp	r0, #1
   34e0c:	blt	34e30 <__assert_fail@plt+0x223b4>
   34e10:	mov	r4, #0
   34e14:	ldr	r0, [r7]
   34e18:	ldr	r0, [r0, r4, lsl #2]
   34e1c:	bl	381fc <__assert_fail@plt+0x25780>
   34e20:	ldr	r0, [r5]
   34e24:	add	r4, r4, #1
   34e28:	cmp	r4, r0
   34e2c:	blt	34e14 <__assert_fail@plt+0x22398>
   34e30:	ldr	r0, [r7]
   34e34:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   34e38:	ldr	r0, [sl, #68]	; 0x44
   34e3c:	cmp	r6, r0
   34e40:	bcc	34df4 <__assert_fail@plt+0x22378>
   34e44:	ldr	r5, [sl, #32]
   34e48:	mov	r0, r5
   34e4c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   34e50:	ldr	r0, [sl, #60]	; 0x3c
   34e54:	movw	r1, #51956	; 0xcaf4
   34e58:	movt	r1, #4
   34e5c:	cmp	r0, r1
   34e60:	beq	34e68 <__assert_fail@plt+0x223ec>
   34e64:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   34e68:	ldr	r0, [sl, #132]	; 0x84
   34e6c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   34e70:	mov	r0, sl
   34e74:	sub	sp, fp, #28
   34e78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34e7c:	b	2fd6c <__assert_fail@plt+0x1d2f0>
   34e80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34e84:	add	fp, sp, #28
   34e88:	sub	sp, sp, #28
   34e8c:	ldr	sl, [fp, #8]
   34e90:	mov	r7, #2
   34e94:	cmp	sl, #7
   34e98:	bhi	34f6c <__assert_fail@plt+0x224f0>
   34e9c:	mov	r5, r0
   34ea0:	ldr	r0, [r0]
   34ea4:	mov	r6, r3
   34ea8:	mov	r9, r2
   34eac:	mov	r4, r1
   34eb0:	tst	sl, #4
   34eb4:	str	r0, [sp, #24]
   34eb8:	bne	34ed0 <__assert_fail@plt+0x22454>
   34ebc:	mov	r0, r4
   34ec0:	bl	12788 <strlen@plt>
   34ec4:	mov	r7, r0
   34ec8:	mov	r8, #0
   34ecc:	b	34ed8 <__assert_fail@plt+0x2245c>
   34ed0:	ldr	r8, [r6]
   34ed4:	ldr	r7, [r6, #4]
   34ed8:	movw	r0, #9352	; 0x2488
   34edc:	movw	r1, #10276	; 0x2824
   34ee0:	movt	r0, #1
   34ee4:	movt	r1, #1
   34ee8:	orrs	r0, r1, r0
   34eec:	str	r0, [sp, #20]
   34ef0:	beq	34f00 <__assert_fail@plt+0x22484>
   34ef4:	ldr	r0, [sp, #24]
   34ef8:	add	r0, r0, #136	; 0x88
   34efc:	bl	12464 <pthread_mutex_lock@plt>
   34f00:	ldrb	r0, [r5, #28]
   34f04:	tst	r0, #16
   34f08:	bne	34f1c <__assert_fail@plt+0x224a0>
   34f0c:	str	r7, [sp]
   34f10:	stmib	sp, {r7, r9}
   34f14:	str	r6, [sp, #12]
   34f18:	b	34f30 <__assert_fail@plt+0x224b4>
   34f1c:	mov	r0, #0
   34f20:	str	r7, [sp]
   34f24:	str	r7, [sp, #4]
   34f28:	str	r0, [sp, #8]
   34f2c:	str	r0, [sp, #12]
   34f30:	mov	r0, r5
   34f34:	mov	r1, r4
   34f38:	mov	r2, r7
   34f3c:	mov	r3, r8
   34f40:	str	sl, [sp, #16]
   34f44:	bl	34f78 <__assert_fail@plt+0x224fc>
   34f48:	mov	r7, r0
   34f4c:	ldr	r0, [sp, #20]
   34f50:	cmp	r0, #0
   34f54:	beq	34f64 <__assert_fail@plt+0x224e8>
   34f58:	ldr	r0, [sp, #24]
   34f5c:	add	r0, r0, #136	; 0x88
   34f60:	bl	12338 <pthread_mutex_unlock@plt>
   34f64:	cmp	r7, #0
   34f68:	movwne	r7, #1
   34f6c:	mov	r0, r7
   34f70:	sub	sp, fp, #28
   34f74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34f78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34f7c:	add	fp, sp, #28
   34f80:	sub	sp, sp, #412	; 0x19c
   34f84:	ldr	r8, [r0]
   34f88:	str	r2, [sp, #68]	; 0x44
   34f8c:	str	r1, [sp, #100]	; 0x64
   34f90:	mov	sl, r0
   34f94:	add	r0, sp, #104	; 0x68
   34f98:	mov	r1, #0
   34f9c:	mov	r2, #136	; 0x88
   34fa0:	mov	r6, r3
   34fa4:	mov	r4, #0
   34fa8:	bl	12800 <memset@plt>
   34fac:	str	r8, [sp, #188]	; 0xbc
   34fb0:	ldr	r0, [fp, #8]
   34fb4:	mov	ip, #0
   34fb8:	ldr	r1, [sl, #16]
   34fbc:	cmp	r1, #0
   34fc0:	beq	34fdc <__assert_fail@plt+0x22560>
   34fc4:	ldrb	r2, [sl, #28]
   34fc8:	and	r2, r2, #9
   34fcc:	cmp	r2, #8
   34fd0:	movne	r1, #0
   34fd4:	subs	ip, r6, r0
   34fd8:	movne	ip, r1
   34fdc:	ldr	r2, [sl, #24]
   34fe0:	ldr	r7, [fp, #16]
   34fe4:	ldr	r1, [sl, #8]
   34fe8:	mov	r9, #1
   34fec:	mvn	r3, r2
   34ff0:	cmp	r2, r7
   34ff4:	addcc	r4, r3, r7
   34ff8:	cmp	r1, #0
   34ffc:	str	r4, [sp, #32]
   35000:	beq	379d0 <__assert_fail@plt+0x24f54>
   35004:	ldr	r1, [r8, #36]	; 0x24
   35008:	cmp	r1, #0
   3500c:	ldrne	r2, [r8, #40]	; 0x28
   35010:	cmpne	r2, #0
   35014:	beq	379d0 <__assert_fail@plt+0x24f54>
   35018:	ldr	r3, [r8, #44]	; 0x2c
   3501c:	cmp	r3, #0
   35020:	ldrne	r7, [r8, #48]	; 0x30
   35024:	cmpne	r7, #0
   35028:	beq	379d0 <__assert_fail@plt+0x24f54>
   3502c:	ldr	r1, [r1, #8]
   35030:	ldr	r7, [sl, #20]
   35034:	cmp	r1, #0
   35038:	bne	35048 <__assert_fail@plt+0x225cc>
   3503c:	ldr	r1, [r2, #8]
   35040:	cmp	r1, #0
   35044:	beq	36bd0 <__assert_fail@plt+0x24154>
   35048:	str	r0, [sp, #76]	; 0x4c
   3504c:	ldr	r0, [sp, #32]
   35050:	ldr	r1, [fp, #16]
   35054:	subs	lr, r1, r0
   35058:	mov	r0, #1
   3505c:	str	r0, [sp, #44]	; 0x2c
   35060:	bne	35074 <__assert_fail@plt+0x225f8>
   35064:	ldr	r0, [r8, #76]	; 0x4c
   35068:	cmp	r0, #0
   3506c:	movwne	r0, #1
   35070:	str	r0, [sp, #44]	; 0x2c
   35074:	ldr	r0, [sl, #12]
   35078:	ldr	r2, [r8, #92]	; 0x5c
   3507c:	ldr	r3, [sp, #100]	; 0x64
   35080:	ldr	r1, [r8, #8]
   35084:	str	r7, [sp, #168]	; 0xa8
   35088:	str	sl, [sp, #80]	; 0x50
   3508c:	str	r3, [sp, #104]	; 0x68
   35090:	str	r2, [sp, #184]	; 0xb8
   35094:	ubfx	r3, r0, #22, #1
   35098:	and	r0, r0, #4194304	; 0x400000
   3509c:	ldr	r4, [sp, #68]	; 0x44
   350a0:	add	r5, r1, #1
   350a4:	orrs	sl, r7, r0
   350a8:	strb	r3, [sp, #176]	; 0xb0
   350ac:	add	r3, sp, #104	; 0x68
   350b0:	movwne	sl, #1
   350b4:	add	r3, r3, #44	; 0x2c
   350b8:	cmp	r2, r5
   350bc:	strb	sl, [sp, #179]	; 0xb3
   350c0:	movgt	r5, r2
   350c4:	ldrb	r0, [r8, #88]	; 0x58
   350c8:	vdup.32	q8, r4
   350cc:	vst1.32	{d16-d17}, [r3]
   350d0:	ubfx	r3, r0, #3, #1
   350d4:	strb	r3, [sp, #178]	; 0xb2
   350d8:	ubfx	r0, r0, #2, #1
   350dc:	str	r8, [sp, #96]	; 0x60
   350e0:	str	ip, [sp, #88]	; 0x58
   350e4:	str	r7, [sp, #84]	; 0x54
   350e8:	strb	r0, [sp, #177]	; 0xb1
   350ec:	add	r0, r4, #1
   350f0:	cmp	r0, r5
   350f4:	movlt	r5, r0
   350f8:	cmp	r2, #2
   350fc:	blt	35138 <__assert_fail@plt+0x226bc>
   35100:	mov	r9, #12
   35104:	cmn	r5, #-1073741823	; 0xc0000001
   35108:	bhi	3797c <__assert_fail@plt+0x24f00>
   3510c:	lsl	r1, r5, #2
   35110:	mov	r0, #0
   35114:	mov	r4, lr
   35118:	bl	33040 <__assert_fail@plt+0x205c4>
   3511c:	ldr	r7, [sp, #84]	; 0x54
   35120:	ldr	ip, [sp, #88]	; 0x58
   35124:	cmp	r0, #0
   35128:	beq	3797c <__assert_fail@plt+0x24f00>
   3512c:	ldr	r8, [sp, #96]	; 0x60
   35130:	mov	lr, r4
   35134:	str	r0, [sp, #112]	; 0x70
   35138:	cmp	sl, #0
   3513c:	ldr	sl, [sp, #80]	; 0x50
   35140:	mov	r4, #1
   35144:	beq	35174 <__assert_fail@plt+0x226f8>
   35148:	mov	r0, #0
   3514c:	mov	r1, r5
   35150:	mov	r9, lr
   35154:	mov	r4, #0
   35158:	bl	33040 <__assert_fail@plt+0x205c4>
   3515c:	cmp	r0, #0
   35160:	beq	377a8 <__assert_fail@plt+0x24d2c>
   35164:	ldr	ip, [sp, #88]	; 0x58
   35168:	ldr	r7, [sp, #84]	; 0x54
   3516c:	mov	lr, r9
   35170:	str	r0, [sp, #108]	; 0x6c
   35174:	add	r1, r8, #96	; 0x60
   35178:	str	r5, [sp, #140]	; 0x8c
   3517c:	ldr	r0, [fp, #12]
   35180:	cmp	r4, #0
   35184:	str	r1, [sp, #172]	; 0xac
   35188:	ldrb	r1, [r8, #88]	; 0x58
   3518c:	ubfx	r1, r1, #4, #1
   35190:	strb	r1, [sp, #182]	; 0xb6
   35194:	mov	r1, #0
   35198:	beq	351b4 <__assert_fail@plt+0x22738>
   3519c:	ldr	r1, [sp, #100]	; 0x64
   351a0:	str	r1, [sp, #108]	; 0x6c
   351a4:	ldr	r1, [r8, #92]	; 0x5c
   351a8:	cmp	r1, #1
   351ac:	ldr	r1, [sp, #68]	; 0x44
   351b0:	movwgt	r1, #0
   351b4:	str	r1, [sp, #136]	; 0x88
   351b8:	str	r1, [sp, #132]	; 0x84
   351bc:	str	r0, [sp, #160]	; 0xa0
   351c0:	str	r0, [sp, #156]	; 0x9c
   351c4:	str	lr, [sp, #92]	; 0x5c
   351c8:	ldrb	r0, [sl, #28]
   351cc:	lsr	r0, r0, #7
   351d0:	strb	r0, [sp, #181]	; 0xb5
   351d4:	mvn	r0, #0
   351d8:	ldr	r8, [r8, #76]	; 0x4c
   351dc:	str	r0, [sp, #196]	; 0xc4
   351e0:	ldr	r0, [fp, #24]
   351e4:	lsl	sl, r8, #1
   351e8:	cmp	r8, #1
   351ec:	str	r0, [sp, #192]	; 0xc0
   351f0:	blt	35248 <__assert_fail@plt+0x227cc>
   351f4:	movw	r0, #43690	; 0xaaaa
   351f8:	mov	r9, #12
   351fc:	movt	r0, #2730	; 0xaaa
   35200:	cmp	sl, r0
   35204:	bhi	3797c <__assert_fail@plt+0x24f00>
   35208:	add	r0, r8, r8, lsl #1
   3520c:	mov	r4, r5
   35210:	lsl	r0, r0, #4
   35214:	bl	3233c <__assert_fail@plt+0x1f8c0>
   35218:	mov	r5, r0
   3521c:	str	r0, [sp, #220]	; 0xdc
   35220:	lsl	r0, r8, #3
   35224:	bl	3233c <__assert_fail@plt+0x1f8c0>
   35228:	cmp	r0, #0
   3522c:	str	r0, [sp, #236]	; 0xec
   35230:	beq	3797c <__assert_fail@plt+0x24f00>
   35234:	add	lr, sp, #84	; 0x54
   35238:	cmp	r5, #0
   3523c:	mov	r5, r4
   35240:	ldm	lr, {r7, ip, lr}
   35244:	beq	3797c <__assert_fail@plt+0x24f00>
   35248:	mov	r0, #1
   3524c:	cmp	lr, #1
   35250:	str	r0, [sp, #224]	; 0xe0
   35254:	str	sl, [sp, #216]	; 0xd8
   35258:	str	sl, [sp, #232]	; 0xe8
   3525c:	bhi	35270 <__assert_fail@plt+0x227f4>
   35260:	ldr	r0, [sp, #96]	; 0x60
   35264:	ldrb	r0, [r0, #88]	; 0x58
   35268:	tst	r0, #2
   3526c:	beq	3529c <__assert_fail@plt+0x22820>
   35270:	mov	r9, #12
   35274:	cmn	r5, #-1073741822	; 0xc0000002
   35278:	bhi	3797c <__assert_fail@plt+0x24f00>
   3527c:	mov	r0, #4
   35280:	add	r0, r0, r5, lsl #2
   35284:	bl	3233c <__assert_fail@plt+0x1f8c0>
   35288:	ldr	r7, [sp, #84]	; 0x54
   3528c:	ldr	ip, [sp, #88]	; 0x58
   35290:	cmp	r0, #0
   35294:	str	r0, [sp, #204]	; 0xcc
   35298:	beq	3797c <__assert_fail@plt+0x24f00>
   3529c:	ldr	r1, [fp, #24]
   352a0:	ldr	r2, [sp, #76]	; 0x4c
   352a4:	str	r6, [fp, #-200]	; 0xffffff38
   352a8:	mov	r8, #1
   352ac:	mov	r5, r6
   352b0:	mov	r0, #4
   352b4:	tst	r1, #1
   352b8:	mov	r1, #4
   352bc:	mov	r4, r2
   352c0:	movweq	r1, #6
   352c4:	cmp	r2, r6
   352c8:	str	r1, [sp, #164]	; 0xa4
   352cc:	ldr	r1, [sp, #96]	; 0x60
   352d0:	mvnlt	r8, #0
   352d4:	movlt	r4, r6
   352d8:	movlt	r5, r2
   352dc:	cmp	ip, #0
   352e0:	ldr	r1, [r1, #92]	; 0x5c
   352e4:	str	r1, [sp, #60]	; 0x3c
   352e8:	beq	3532c <__assert_fail@plt+0x228b0>
   352ec:	cmp	r1, #1
   352f0:	beq	35310 <__assert_fail@plt+0x22894>
   352f4:	ldr	r0, [sp, #80]	; 0x50
   352f8:	ldr	r0, [r0, #12]
   352fc:	and	r0, r0, #4194304	; 0x400000
   35300:	orr	r0, r7, r0
   35304:	clz	r0, r0
   35308:	lsr	r0, r0, #5
   3530c:	lsl	r0, r0, #2
   35310:	cmp	r7, #0
   35314:	mov	r1, r7
   35318:	movwne	r1, #1
   3531c:	cmp	r2, r6
   35320:	orrge	r1, r1, #2
   35324:	orr	r0, r1, r0
   35328:	b	35330 <__assert_fail@plt+0x228b4>
   3532c:	mov	r0, #8
   35330:	add	r1, sp, #104	; 0x68
   35334:	cmp	r2, r6
   35338:	sub	r0, r0, #4
   3533c:	str	r4, [sp, #52]	; 0x34
   35340:	str	r5, [sp, #48]	; 0x30
   35344:	str	r8, [sp, #64]	; 0x40
   35348:	add	r1, r1, #32
   3534c:	str	r0, [sp, #76]	; 0x4c
   35350:	str	r1, [sp, #24]
   35354:	sub	r1, fp, #200	; 0xc8
   35358:	movwlt	r1, #0
   3535c:	cmp	r1, #0
   35360:	str	r1, [sp, #36]	; 0x24
   35364:	movwne	r1, #1
   35368:	str	r1, [sp, #40]	; 0x28
   3536c:	sub	r1, fp, #192	; 0xc0
   35370:	add	r1, r1, #16
   35374:	str	r1, [sp, #28]
   35378:	b	35a48 <__assert_fail@plt+0x22fcc>
   3537c:	mov	r1, #0
   35380:	sub	r0, fp, #188	; 0xbc
   35384:	str	r8, [fp, #-192]	; 0xffffff40
   35388:	stm	r0, {r1, r6, sl}
   3538c:	ldr	r0, [sp, #28]
   35390:	str	r1, [r0]
   35394:	str	r1, [r0, #4]
   35398:	str	r1, [r0, #8]
   3539c:	add	r0, sp, #104	; 0x68
   353a0:	sub	r1, fp, #192	; 0xc0
   353a4:	bl	42af0 <__assert_fail@plt+0x30074>
   353a8:	mov	r9, r0
   353ac:	mov	r0, #0
   353b0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   353b4:	cmp	r9, #0
   353b8:	bne	354b8 <__assert_fail@plt+0x22a3c>
   353bc:	ldr	r0, [r8]
   353c0:	mov	r4, #0
   353c4:	cmp	r0, #0
   353c8:	beq	35878 <__assert_fail@plt+0x22dfc>
   353cc:	b	369f8 <__assert_fail@plt+0x23f7c>
   353d0:	mov	r9, r0
   353d4:	b	369e8 <__assert_fail@plt+0x23f6c>
   353d8:	sxtb	r0, r0
   353dc:	cmn	r0, #1
   353e0:	ble	35438 <__assert_fail@plt+0x229bc>
   353e4:	ldr	r0, [sp, #44]	; 0x2c
   353e8:	mov	lr, #1
   353ec:	mov	r9, sl
   353f0:	cmp	r0, #0
   353f4:	bne	35dc4 <__assert_fail@plt+0x23348>
   353f8:	mov	r9, sl
   353fc:	ldr	r8, [sp, #64]	; 0x40
   35400:	mov	sl, r5
   35404:	cmn	r9, #1
   35408:	beq	3588c <__assert_fail@plt+0x22e10>
   3540c:	b	366d0 <__assert_fail@plt+0x23c54>
   35410:	ldr	r0, [r8, #8]
   35414:	cmp	r0, #1
   35418:	blt	359bc <__assert_fail@plt+0x22f40>
   3541c:	ldr	r4, [sp, #188]	; 0xbc
   35420:	mov	r9, #0
   35424:	b	35928 <__assert_fail@plt+0x22eac>
   35428:	ldr	r0, [sp, #192]	; 0xc0
   3542c:	and	r0, r0, #2
   35430:	eor	r3, r0, #10
   35434:	b	36750 <__assert_fail@plt+0x23cd4>
   35438:	cmn	sl, #1
   3543c:	ble	3547c <__assert_fail@plt+0x22a00>
   35440:	ldr	r0, [sp, #152]	; 0x98
   35444:	cmp	r0, sl
   35448:	beq	35a00 <__assert_fail@plt+0x22f84>
   3544c:	ldr	r0, [sp, #184]	; 0xb8
   35450:	cmp	r0, #2
   35454:	blt	35484 <__assert_fail@plt+0x22a08>
   35458:	ldr	r0, [sp, #112]	; 0x70
   3545c:	mov	r1, sl
   35460:	ldr	r4, [r0, r1, lsl #2]
   35464:	cmn	r4, #1
   35468:	bne	35500 <__assert_fail@plt+0x22a84>
   3546c:	sub	r2, r1, #1
   35470:	cmp	r1, #0
   35474:	mov	r1, r2
   35478:	bgt	35460 <__assert_fail@plt+0x229e4>
   3547c:	ldr	r3, [sp, #164]	; 0xa4
   35480:	b	35524 <__assert_fail@plt+0x22aa8>
   35484:	ldr	r0, [sp, #108]	; 0x6c
   35488:	ldr	r1, [sp, #172]	; 0xac
   3548c:	mov	r3, #1
   35490:	ldrb	r0, [r0, sl]
   35494:	ubfx	r2, r0, #5, #3
   35498:	ldr	r1, [r1, r2, lsl #2]
   3549c:	and	r2, r0, #31
   354a0:	tst	r1, r3, lsl r2
   354a4:	bne	35524 <__assert_fail@plt+0x22aa8>
   354a8:	mov	r3, #0
   354ac:	cmp	r0, #10
   354b0:	beq	35518 <__assert_fail@plt+0x22a9c>
   354b4:	b	35524 <__assert_fail@plt+0x22aa8>
   354b8:	mov	r0, #0
   354bc:	str	r0, [sp, #56]	; 0x38
   354c0:	b	358cc <__assert_fail@plt+0x22e50>
   354c4:	mov	r0, r4
   354c8:	bl	127dc <iswalnum@plt>
   354cc:	mov	r3, #1
   354d0:	cmp	r4, #95	; 0x5f
   354d4:	beq	367c4 <__assert_fail@plt+0x23d48>
   354d8:	cmp	r0, #0
   354dc:	beq	367ac <__assert_fail@plt+0x23d30>
   354e0:	b	367c4 <__assert_fail@plt+0x23d48>
   354e4:	mov	r0, r5
   354e8:	bl	127dc <iswalnum@plt>
   354ec:	cmp	r5, #95	; 0x5f
   354f0:	beq	35d78 <__assert_fail@plt+0x232fc>
   354f4:	cmp	r0, #0
   354f8:	beq	35cdc <__assert_fail@plt+0x23260>
   354fc:	b	35d78 <__assert_fail@plt+0x232fc>
   35500:	ldrb	r0, [sp, #182]	; 0xb6
   35504:	cmp	r0, #0
   35508:	bne	35a10 <__assert_fail@plt+0x22f94>
   3550c:	mov	r3, #0
   35510:	cmp	r4, #10
   35514:	bne	35524 <__assert_fail@plt+0x22aa8>
   35518:	ldrb	r3, [sp, #181]	; 0xb5
   3551c:	cmp	r3, #0
   35520:	movwne	r3, #2
   35524:	ldr	r0, [r8, #8]
   35528:	cmp	r0, #1
   3552c:	blt	355d8 <__assert_fail@plt+0x22b5c>
   35530:	ldr	r6, [sp, #188]	; 0xbc
   35534:	str	r7, [sp, #16]
   35538:	ldr	r7, [r8, #12]
   3553c:	str	sl, [sp, #20]
   35540:	and	ip, r3, #8
   35544:	and	sl, r3, #2
   35548:	and	r3, r3, #1
   3554c:	mov	r2, #0
   35550:	ldr	r6, [r6]
   35554:	ldr	r1, [r7, r2, lsl #2]
   35558:	add	r4, r6, r1, lsl #3
   3555c:	mov	lr, r1
   35560:	ldr	r4, [r4, #4]
   35564:	uxtb	r1, r4
   35568:	cmp	r1, #2
   3556c:	bne	355bc <__assert_fail@plt+0x22b40>
   35570:	movw	r1, #65280	; 0xff00
   35574:	movt	r1, #3
   35578:	tst	r4, r1
   3557c:	beq	355e0 <__assert_fail@plt+0x22b64>
   35580:	cmp	r3, #0
   35584:	bne	35590 <__assert_fail@plt+0x22b14>
   35588:	ands	r1, r4, #1024	; 0x400
   3558c:	bne	355bc <__assert_fail@plt+0x22b40>
   35590:	cmp	r3, #0
   35594:	andsne	r1, r4, #2048	; 0x800
   35598:	bne	355bc <__assert_fail@plt+0x22b40>
   3559c:	cmp	sl, #0
   355a0:	bne	355ac <__assert_fail@plt+0x22b30>
   355a4:	ands	r1, r4, #8192	; 0x2000
   355a8:	bne	355bc <__assert_fail@plt+0x22b40>
   355ac:	cmp	ip, #0
   355b0:	bne	355e0 <__assert_fail@plt+0x22b64>
   355b4:	ands	r1, r4, #32768	; 0x8000
   355b8:	beq	355e0 <__assert_fail@plt+0x22b64>
   355bc:	add	r2, r2, #1
   355c0:	mov	lr, #0
   355c4:	cmp	r2, r0
   355c8:	blt	35554 <__assert_fail@plt+0x22ad8>
   355cc:	ldr	sl, [sp, #20]
   355d0:	ldr	r7, [sp, #16]
   355d4:	b	35dc4 <__assert_fail@plt+0x23348>
   355d8:	mov	lr, #0
   355dc:	b	35dc4 <__assert_fail@plt+0x23348>
   355e0:	ldr	sl, [sp, #20]
   355e4:	ldr	r1, [sp, #44]	; 0x2c
   355e8:	clz	r0, lr
   355ec:	ldr	r7, [sp, #16]
   355f0:	cmp	lr, #0
   355f4:	lsr	r0, r0, #5
   355f8:	movwne	lr, #1
   355fc:	mov	r9, sl
   35600:	orr	r0, r1, r0
   35604:	mvneq	r9, #0
   35608:	cmp	r0, #0
   3560c:	beq	353f8 <__assert_fail@plt+0x2297c>
   35610:	b	35dc4 <__assert_fail@plt+0x23348>
   35614:	ldr	r3, [sp, #164]	; 0xa4
   35618:	movw	r9, #65280	; 0xff00
   3561c:	movt	r9, #3
   35620:	b	35764 <__assert_fail@plt+0x22ce8>
   35624:	ldr	r0, [sp, #192]	; 0xc0
   35628:	and	r0, r0, #2
   3562c:	eor	r3, r0, #10
   35630:	b	35764 <__assert_fail@plt+0x22ce8>
   35634:	mov	r0, r7
   35638:	bl	127dc <iswalnum@plt>
   3563c:	mov	r3, #1
   35640:	cmp	r7, #95	; 0x5f
   35644:	beq	35618 <__assert_fail@plt+0x22b9c>
   35648:	movw	r9, #65280	; 0xff00
   3564c:	cmp	r0, #0
   35650:	movt	r9, #3
   35654:	beq	3574c <__assert_fail@plt+0x22cd0>
   35658:	b	35764 <__assert_fail@plt+0x22ce8>
   3565c:	ldr	r1, [r4]
   35660:	cmp	r1, #0
   35664:	bne	36944 <__assert_fail@plt+0x23ec8>
   35668:	cmp	sl, #1
   3566c:	blt	35878 <__assert_fail@plt+0x22dfc>
   35670:	ldr	r0, [sp, #204]	; 0xcc
   35674:	str	r4, [sp, #56]	; 0x38
   35678:	lsl	r4, sl, #2
   3567c:	mov	r5, sl
   35680:	sub	r0, r0, #4
   35684:	ldr	r6, [r0, r5, lsl #2]
   35688:	cmp	r6, #0
   3568c:	ldrbne	r1, [r6, #52]	; 0x34
   35690:	tstne	r1, #16
   35694:	bne	356b0 <__assert_fail@plt+0x22c34>
   35698:	sub	r5, r5, #1
   3569c:	sub	r4, r4, #4
   356a0:	add	r1, r5, #1
   356a4:	cmp	r1, #2
   356a8:	bge	35684 <__assert_fail@plt+0x22c08>
   356ac:	b	35874 <__assert_fail@plt+0x22df8>
   356b0:	cmp	r5, #0
   356b4:	ble	35614 <__assert_fail@plt+0x22b98>
   356b8:	ldr	r0, [sp, #152]	; 0x98
   356bc:	movw	r9, #65280	; 0xff00
   356c0:	movt	r9, #3
   356c4:	add	r0, r0, #1
   356c8:	cmp	r0, r5
   356cc:	beq	35624 <__assert_fail@plt+0x22ba8>
   356d0:	ldr	r0, [sp, #184]	; 0xb8
   356d4:	cmp	r0, #2
   356d8:	blt	35708 <__assert_fail@plt+0x22c8c>
   356dc:	ldr	r0, [sp, #112]	; 0x70
   356e0:	mov	r1, r5
   356e4:	sub	r0, r0, #4
   356e8:	ldr	r7, [r0, r1, lsl #2]
   356ec:	cmn	r7, #1
   356f0:	bne	35740 <__assert_fail@plt+0x22cc4>
   356f4:	sub	r1, r1, #1
   356f8:	cmp	r1, #0
   356fc:	bgt	356e8 <__assert_fail@plt+0x22c6c>
   35700:	ldr	r3, [sp, #164]	; 0xa4
   35704:	b	35764 <__assert_fail@plt+0x22ce8>
   35708:	ldr	r0, [sp, #108]	; 0x6c
   3570c:	ldr	r1, [sp, #172]	; 0xac
   35710:	mov	r3, #1
   35714:	add	r0, r0, r5
   35718:	ldrb	r0, [r0, #-1]
   3571c:	ubfx	r2, r0, #5, #3
   35720:	ldr	r1, [r1, r2, lsl #2]
   35724:	and	r2, r0, #31
   35728:	tst	r1, r3, lsl r2
   3572c:	bne	35764 <__assert_fail@plt+0x22ce8>
   35730:	mov	r3, #0
   35734:	cmp	r0, #10
   35738:	beq	35758 <__assert_fail@plt+0x22cdc>
   3573c:	b	35764 <__assert_fail@plt+0x22ce8>
   35740:	ldrb	r0, [sp, #182]	; 0xb6
   35744:	cmp	r0, #0
   35748:	bne	35634 <__assert_fail@plt+0x22bb8>
   3574c:	mov	r3, #0
   35750:	cmp	r7, #10
   35754:	bne	35764 <__assert_fail@plt+0x22ce8>
   35758:	ldrb	r3, [sp, #181]	; 0xb5
   3575c:	cmp	r3, #0
   35760:	movwne	r3, #2
   35764:	ldr	r0, [r6, #8]
   35768:	sub	sl, r5, #1
   3576c:	cmp	r0, #1
   35770:	blt	35808 <__assert_fail@plt+0x22d8c>
   35774:	and	r1, r3, #8
   35778:	ldr	r7, [r6, #12]
   3577c:	and	lr, r3, #1
   35780:	mov	r2, #0
   35784:	str	r1, [sp, #16]
   35788:	and	r1, r3, #2
   3578c:	str	r1, [sp, #20]
   35790:	ldr	r1, [sp, #188]	; 0xbc
   35794:	ldr	r1, [r1]
   35798:	ldr	r6, [r7, r2, lsl #2]
   3579c:	add	r3, r1, r6, lsl #3
   357a0:	ldr	ip, [r3, #4]
   357a4:	uxtb	r3, ip
   357a8:	cmp	r3, #2
   357ac:	bne	357fc <__assert_fail@plt+0x22d80>
   357b0:	tst	ip, r9
   357b4:	beq	3580c <__assert_fail@plt+0x22d90>
   357b8:	cmp	lr, #0
   357bc:	bne	357c8 <__assert_fail@plt+0x22d4c>
   357c0:	ands	r3, ip, #1024	; 0x400
   357c4:	bne	357fc <__assert_fail@plt+0x22d80>
   357c8:	cmp	lr, #0
   357cc:	andsne	r3, ip, #2048	; 0x800
   357d0:	bne	357fc <__assert_fail@plt+0x22d80>
   357d4:	ldr	r3, [sp, #20]
   357d8:	cmp	r3, #0
   357dc:	bne	357e8 <__assert_fail@plt+0x22d6c>
   357e0:	ands	r3, ip, #8192	; 0x2000
   357e4:	bne	357fc <__assert_fail@plt+0x22d80>
   357e8:	ldr	r3, [sp, #16]
   357ec:	cmp	r3, #0
   357f0:	bne	3580c <__assert_fail@plt+0x22d90>
   357f4:	ands	r3, ip, #32768	; 0x8000
   357f8:	beq	3580c <__assert_fail@plt+0x22d90>
   357fc:	add	r2, r2, #1
   35800:	cmp	r2, r0
   35804:	blt	35798 <__assert_fail@plt+0x22d1c>
   35808:	mov	r6, #0
   3580c:	ldr	r0, [sp, #56]	; 0x38
   35810:	mov	r2, r4
   35814:	mov	r1, #0
   35818:	mov	r4, r0
   3581c:	bl	12800 <memset@plt>
   35820:	sub	r0, fp, #188	; 0xbc
   35824:	str	r8, [fp, #-192]	; 0xffffff40
   35828:	mov	r1, #0
   3582c:	stm	r0, {r4, r6, sl}
   35830:	ldr	r0, [sp, #28]
   35834:	str	r1, [r0]
   35838:	str	r1, [r0, #4]
   3583c:	str	r1, [r0, #8]
   35840:	add	r0, sp, #104	; 0x68
   35844:	sub	r1, fp, #192	; 0xc0
   35848:	bl	42af0 <__assert_fail@plt+0x30074>
   3584c:	mov	r9, r0
   35850:	mov	r0, #0
   35854:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   35858:	cmp	r9, #0
   3585c:	bne	358c8 <__assert_fail@plt+0x22e4c>
   35860:	ldr	r0, [r8]
   35864:	cmp	r0, #0
   35868:	beq	3565c <__assert_fail@plt+0x22be0>
   3586c:	sub	sl, r5, #1
   35870:	b	36944 <__assert_fail@plt+0x23ec8>
   35874:	ldr	r4, [sp, #56]	; 0x38
   35878:	mov	r0, r8
   3587c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   35880:	mov	r0, r4
   35884:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   35888:	ldr	r8, [sp, #64]	; 0x40
   3588c:	add	r0, sp, #104	; 0x68
   35890:	bl	3ed28 <__assert_fail@plt+0x2c2ac>
   35894:	ldr	r0, [fp, #-200]	; 0xffffff38
   35898:	ldr	r5, [sp, #48]	; 0x30
   3589c:	ldr	r4, [sp, #52]	; 0x34
   358a0:	mov	r9, #1
   358a4:	add	r6, r0, r8
   358a8:	cmp	r6, r5
   358ac:	str	r6, [fp, #-200]	; 0xffffff38
   358b0:	blt	3797c <__assert_fail@plt+0x24f00>
   358b4:	ldr	ip, [sp, #88]	; 0x58
   358b8:	ldr	r7, [sp, #84]	; 0x54
   358bc:	cmp	r4, r6
   358c0:	bge	35a48 <__assert_fail@plt+0x22fcc>
   358c4:	b	3797c <__assert_fail@plt+0x24f00>
   358c8:	str	r4, [sp, #56]	; 0x38
   358cc:	mov	r0, r8
   358d0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   358d4:	ldr	r0, [sp, #56]	; 0x38
   358d8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   358dc:	ldr	r8, [sp, #96]	; 0x60
   358e0:	ldr	sl, [sp, #92]	; 0x5c
   358e4:	ldr	r5, [sp, #80]	; 0x50
   358e8:	cmp	r9, #0
   358ec:	sub	r6, fp, #48	; 0x30
   358f0:	beq	36a2c <__assert_fail@plt+0x23fb0>
   358f4:	ldr	r8, [sp, #64]	; 0x40
   358f8:	cmp	r9, #1
   358fc:	beq	3588c <__assert_fail@plt+0x22e10>
   35900:	b	3797c <__assert_fail@plt+0x24f00>
   35904:	ldr	r0, [sp, #236]	; 0xec
   35908:	lsl	r1, r7, #3
   3590c:	bl	33040 <__assert_fail@plt+0x205c4>
   35910:	cmp	r0, #0
   35914:	beq	359f4 <__assert_fail@plt+0x22f78>
   35918:	str	r0, [sp, #236]	; 0xec
   3591c:	lsl	r0, r7, #1
   35920:	str	r0, [sp, #232]	; 0xe8
   35924:	b	35970 <__assert_fail@plt+0x22ef4>
   35928:	ldr	r1, [r8, #12]
   3592c:	ldr	r6, [r1, r9, lsl #2]
   35930:	ldr	r1, [r4]
   35934:	add	r2, r1, r6, lsl #3
   35938:	ldrb	r2, [r2, #4]
   3593c:	cmp	r2, #8
   35940:	bne	359b0 <__assert_fail@plt+0x22f34>
   35944:	ldr	r1, [r1, r6, lsl #3]
   35948:	cmp	r1, #31
   3594c:	bgt	359b0 <__assert_fail@plt+0x22f34>
   35950:	ldr	r2, [r4, #80]	; 0x50
   35954:	mov	r3, #1
   35958:	tst	r2, r3, lsl r1
   3595c:	beq	359b0 <__assert_fail@plt+0x22f34>
   35960:	ldr	r7, [sp, #228]	; 0xe4
   35964:	ldr	r0, [sp, #232]	; 0xe8
   35968:	cmp	r7, r0
   3596c:	beq	35904 <__assert_fail@plt+0x22e88>
   35970:	mov	r0, #1
   35974:	mov	r1, #24
   35978:	bl	2f760 <__assert_fail@plt+0x1cce4>
   3597c:	ldr	r1, [sp, #228]	; 0xe4
   35980:	ldr	r2, [sp, #236]	; 0xec
   35984:	str	r0, [r2, r1, lsl #2]
   35988:	ldr	r0, [sp, #236]	; 0xec
   3598c:	ldr	r0, [r0, r1, lsl #2]
   35990:	cmp	r0, #0
   35994:	beq	359f4 <__assert_fail@plt+0x22f78>
   35998:	add	r1, r1, #1
   3599c:	str	r6, [r0, #4]
   359a0:	str	r1, [sp, #228]	; 0xe4
   359a4:	mov	r1, #0
   359a8:	str	r1, [r0]
   359ac:	ldr	r0, [r8, #8]
   359b0:	add	r9, r9, #1
   359b4:	cmp	r9, r0
   359b8:	blt	35928 <__assert_fail@plt+0x22eac>
   359bc:	mov	r7, #0
   359c0:	str	r7, [fp, #-196]	; 0xffffff3c
   359c4:	ldrb	r0, [r8, #52]	; 0x34
   359c8:	tst	r0, #64	; 0x40
   359cc:	beq	35db0 <__assert_fail@plt+0x23334>
   359d0:	add	r1, r8, #4
   359d4:	add	r0, sp, #104	; 0x68
   359d8:	bl	3eecc <__assert_fail@plt+0x2c450>
   359dc:	mov	r7, #0
   359e0:	cmp	r0, #0
   359e4:	str	r0, [fp, #-196]	; 0xffffff3c
   359e8:	beq	35db0 <__assert_fail@plt+0x23334>
   359ec:	mov	r9, r0
   359f0:	b	353fc <__assert_fail@plt+0x22980>
   359f4:	mov	r9, #12
   359f8:	mov	sl, r5
   359fc:	b	366d8 <__assert_fail@plt+0x23c5c>
   35a00:	ldr	r0, [sp, #192]	; 0xc0
   35a04:	and	r0, r0, #2
   35a08:	eor	r3, r0, #10
   35a0c:	b	35524 <__assert_fail@plt+0x22aa8>
   35a10:	mov	r0, r4
   35a14:	mov	r6, r7
   35a18:	bl	127dc <iswalnum@plt>
   35a1c:	mov	r3, #1
   35a20:	cmp	r4, #95	; 0x5f
   35a24:	beq	35a3c <__assert_fail@plt+0x22fc0>
   35a28:	ldr	r5, [sp, #92]	; 0x5c
   35a2c:	cmp	r0, #0
   35a30:	mov	r7, r6
   35a34:	beq	3550c <__assert_fail@plt+0x22a90>
   35a38:	b	35524 <__assert_fail@plt+0x22aa8>
   35a3c:	ldr	r5, [sp, #92]	; 0x5c
   35a40:	mov	r7, r6
   35a44:	b	35524 <__assert_fail@plt+0x22aa8>
   35a48:	ldr	r1, [sp, #76]	; 0x4c
   35a4c:	cmp	r1, #4
   35a50:	bhi	35b54 <__assert_fail@plt+0x230d8>
   35a54:	add	r0, pc, #0
   35a58:	ldr	pc, [r0, r1, lsl #2]
   35a5c:	andeq	r5, r3, r0, ror sl
   35a60:	andeq	r5, r3, r0, ror sl
   35a64:			; <UNDEFINED> instruction: 0x00035abc
   35a68:	andeq	r5, r3, ip, ror #21
   35a6c:	ldrdeq	r5, [r3], -ip
   35a70:	mov	r9, #1
   35a74:	cmp	r6, r5
   35a78:	blt	3797c <__assert_fail@plt+0x24f00>
   35a7c:	ldr	r1, [sp, #68]	; 0x44
   35a80:	mov	r0, #0
   35a84:	cmp	r6, r1
   35a88:	ldrlt	r0, [sp, #100]	; 0x64
   35a8c:	ldrblt	r0, [r0, r6]
   35a90:	cmp	r7, #0
   35a94:	ldrbne	r0, [r7, r0]
   35a98:	ldrb	r0, [ip, r0]
   35a9c:	cmp	r0, #0
   35aa0:	bne	35bdc <__assert_fail@plt+0x23160>
   35aa4:	sub	r0, r6, #1
   35aa8:	cmp	r6, r5
   35aac:	mov	r6, r0
   35ab0:	str	r0, [fp, #-200]	; 0xffffff38
   35ab4:	bgt	35a80 <__assert_fail@plt+0x23004>
   35ab8:	b	3797c <__assert_fail@plt+0x24f00>
   35abc:	ldr	r1, [sp, #100]	; 0x64
   35ac0:	cmp	r6, r4
   35ac4:	bge	35b1c <__assert_fail@plt+0x230a0>
   35ac8:	ldrb	r0, [r1, r6]
   35acc:	ldrb	r0, [ip, r0]
   35ad0:	cmp	r0, #0
   35ad4:	bne	35b1c <__assert_fail@plt+0x230a0>
   35ad8:	add	r6, r6, #1
   35adc:	cmp	r6, r4
   35ae0:	str	r6, [fp, #-200]	; 0xffffff38
   35ae4:	blt	35ac8 <__assert_fail@plt+0x2304c>
   35ae8:	b	35b1c <__assert_fail@plt+0x230a0>
   35aec:	cmp	r6, r4
   35af0:	bge	35b1c <__assert_fail@plt+0x230a0>
   35af4:	ldr	r1, [sp, #100]	; 0x64
   35af8:	ldrb	r0, [r1, r6]
   35afc:	ldrb	r0, [r7, r0]
   35b00:	ldrb	r0, [ip, r0]
   35b04:	cmp	r0, #0
   35b08:	bne	35b1c <__assert_fail@plt+0x230a0>
   35b0c:	add	r6, r6, #1
   35b10:	cmp	r6, r4
   35b14:	str	r6, [fp, #-200]	; 0xffffff38
   35b18:	blt	35af8 <__assert_fail@plt+0x2307c>
   35b1c:	cmp	r6, r4
   35b20:	bne	35bdc <__assert_fail@plt+0x23160>
   35b24:	ldr	r1, [sp, #68]	; 0x44
   35b28:	mov	r0, #0
   35b2c:	mov	r6, r4
   35b30:	cmp	r4, r1
   35b34:	ldr	r1, [sp, #100]	; 0x64
   35b38:	ldrblt	r0, [r1, r4]
   35b3c:	cmp	r7, #0
   35b40:	ldrbne	r0, [r7, r0]
   35b44:	ldrb	r0, [ip, r0]
   35b48:	cmp	r0, #0
   35b4c:	bne	35bdc <__assert_fail@plt+0x23160>
   35b50:	b	37b24 <__assert_fail@plt+0x250a8>
   35b54:	ldr	r0, [sp, #128]	; 0x80
   35b58:	ldr	r2, [sp, #136]	; 0x88
   35b5c:	sub	r1, r6, r0
   35b60:	cmp	r1, r2
   35b64:	bcs	35ba8 <__assert_fail@plt+0x2312c>
   35b68:	ldr	r3, [sp, #132]	; 0x84
   35b6c:	mov	r2, #0
   35b70:	cmp	r1, r3
   35b74:	ldrcc	r2, [sp, #108]	; 0x6c
   35b78:	ldrbcc	r2, [r2, r1]
   35b7c:	ldrb	r1, [ip, r2]
   35b80:	cmp	r1, #0
   35b84:	bne	35bdc <__assert_fail@plt+0x23160>
   35b88:	add	r6, r6, r8
   35b8c:	mov	r9, #1
   35b90:	cmp	r6, r5
   35b94:	str	r6, [fp, #-200]	; 0xffffff38
   35b98:	blt	3797c <__assert_fail@plt+0x24f00>
   35b9c:	cmp	r6, r4
   35ba0:	ble	35b58 <__assert_fail@plt+0x230dc>
   35ba4:	b	3797c <__assert_fail@plt+0x24f00>
   35ba8:	ldr	r2, [fp, #24]
   35bac:	add	r0, sp, #104	; 0x68
   35bb0:	mov	r1, r6
   35bb4:	bl	3e31c <__assert_fail@plt+0x2b8a0>
   35bb8:	cmp	r0, #0
   35bbc:	bne	377bc <__assert_fail@plt+0x24d40>
   35bc0:	ldr	r0, [sp, #128]	; 0x80
   35bc4:	ldr	r6, [fp, #-200]	; 0xffffff38
   35bc8:	ldr	ip, [sp, #88]	; 0x58
   35bcc:	ldr	r4, [sp, #52]	; 0x34
   35bd0:	ldr	r5, [sp, #48]	; 0x30
   35bd4:	sub	r1, r6, r0
   35bd8:	b	35b68 <__assert_fail@plt+0x230ec>
   35bdc:	ldr	r2, [fp, #24]
   35be0:	add	r0, sp, #104	; 0x68
   35be4:	mov	r1, r6
   35be8:	bl	3e31c <__assert_fail@plt+0x2b8a0>
   35bec:	cmp	r0, #0
   35bf0:	bne	377bc <__assert_fail@plt+0x24d40>
   35bf4:	ldr	r0, [sp, #60]	; 0x3c
   35bf8:	cmp	r0, #1
   35bfc:	ldrne	r0, [sp, #132]	; 0x84
   35c00:	cmpne	r0, #0
   35c04:	bne	35c8c <__assert_fail@plt+0x23210>
   35c08:	mov	r0, #0
   35c0c:	str	r0, [sp, #212]	; 0xd4
   35c10:	str	r0, [sp, #224]	; 0xe0
   35c14:	str	r0, [sp, #208]	; 0xd0
   35c18:	str	r0, [fp, #-196]	; 0xffffff3c
   35c1c:	ldr	r4, [sp, #188]	; 0xbc
   35c20:	ldr	sl, [sp, #144]	; 0x90
   35c24:	ldr	r8, [r4, #36]	; 0x24
   35c28:	ldrsb	r0, [r8, #52]	; 0x34
   35c2c:	cmn	r0, #1
   35c30:	bgt	35d7c <__assert_fail@plt+0x23300>
   35c34:	cmp	sl, #0
   35c38:	ble	35c7c <__assert_fail@plt+0x23200>
   35c3c:	ldr	r1, [sp, #152]	; 0x98
   35c40:	sub	r0, sl, #1
   35c44:	cmp	r1, r0
   35c48:	beq	35d64 <__assert_fail@plt+0x232e8>
   35c4c:	ldr	r1, [sp, #184]	; 0xb8
   35c50:	cmp	r1, #2
   35c54:	blt	35ca0 <__assert_fail@plt+0x23224>
   35c58:	ldr	r0, [sp, #112]	; 0x70
   35c5c:	mov	r1, sl
   35c60:	sub	r0, r0, #4
   35c64:	ldr	r5, [r0, r1, lsl #2]
   35c68:	cmn	r5, #1
   35c6c:	bne	35cd0 <__assert_fail@plt+0x23254>
   35c70:	sub	r1, r1, #1
   35c74:	cmp	r1, #0
   35c78:	bgt	35c64 <__assert_fail@plt+0x231e8>
   35c7c:	ldr	r3, [sp, #164]	; 0xa4
   35c80:	tst	r3, #1
   35c84:	beq	35cf8 <__assert_fail@plt+0x2327c>
   35c88:	b	35d78 <__assert_fail@plt+0x232fc>
   35c8c:	ldr	r0, [sp, #112]	; 0x70
   35c90:	ldr	r0, [r0]
   35c94:	cmn	r0, #1
   35c98:	bne	35c08 <__assert_fail@plt+0x2318c>
   35c9c:	b	35894 <__assert_fail@plt+0x22e18>
   35ca0:	ldr	r1, [sp, #108]	; 0x6c
   35ca4:	ldr	r2, [sp, #172]	; 0xac
   35ca8:	mov	r3, #1
   35cac:	ldrb	r0, [r1, r0]
   35cb0:	ubfx	r1, r0, #5, #3
   35cb4:	ldr	r1, [r2, r1, lsl #2]
   35cb8:	and	r2, r0, #31
   35cbc:	tst	r1, r3, lsl r2
   35cc0:	bne	35d78 <__assert_fail@plt+0x232fc>
   35cc4:	cmp	r0, #10
   35cc8:	beq	35ce4 <__assert_fail@plt+0x23268>
   35ccc:	b	35d7c <__assert_fail@plt+0x23300>
   35cd0:	ldrb	r0, [sp, #182]	; 0xb6
   35cd4:	cmp	r0, #0
   35cd8:	bne	354e4 <__assert_fail@plt+0x22a68>
   35cdc:	cmp	r5, #10
   35ce0:	bne	35d7c <__assert_fail@plt+0x23300>
   35ce4:	ldrb	r3, [sp, #181]	; 0xb5
   35ce8:	cmp	r3, #0
   35cec:	movwne	r3, #2
   35cf0:	tst	r3, #1
   35cf4:	bne	35d78 <__assert_fail@plt+0x232fc>
   35cf8:	cmp	r3, #0
   35cfc:	beq	35d7c <__assert_fail@plt+0x23300>
   35d00:	ands	r1, r3, #2
   35d04:	and	r0, r3, #4
   35d08:	cmpne	r0, #0
   35d0c:	bne	35d44 <__assert_fail@plt+0x232c8>
   35d10:	cmp	r1, #0
   35d14:	bne	35d54 <__assert_fail@plt+0x232d8>
   35d18:	ldr	r8, [r4, #36]	; 0x24
   35d1c:	cmp	r0, #0
   35d20:	beq	35d7c <__assert_fail@plt+0x23300>
   35d24:	ldr	r2, [r8, #40]	; 0x28
   35d28:	sub	r0, fp, #196	; 0xc4
   35d2c:	mov	r1, r4
   35d30:	bl	3dd9c <__assert_fail@plt+0x2b320>
   35d34:	mov	r8, r0
   35d38:	cmp	r8, #0
   35d3c:	bne	35d84 <__assert_fail@plt+0x23308>
   35d40:	b	377a8 <__assert_fail@plt+0x24d2c>
   35d44:	ldr	r8, [r4, #48]	; 0x30
   35d48:	cmp	r8, #0
   35d4c:	bne	35d84 <__assert_fail@plt+0x23308>
   35d50:	b	377a8 <__assert_fail@plt+0x24d2c>
   35d54:	ldr	r8, [r4, #44]	; 0x2c
   35d58:	cmp	r8, #0
   35d5c:	bne	35d84 <__assert_fail@plt+0x23308>
   35d60:	b	377a8 <__assert_fail@plt+0x24d2c>
   35d64:	ldr	r0, [sp, #192]	; 0xc0
   35d68:	and	r0, r0, #2
   35d6c:	eor	r3, r0, #10
   35d70:	tst	r3, #1
   35d74:	beq	35cf8 <__assert_fail@plt+0x2327c>
   35d78:	ldr	r8, [r4, #40]	; 0x28
   35d7c:	cmp	r8, #0
   35d80:	beq	377a8 <__assert_fail@plt+0x24d2c>
   35d84:	ldr	r0, [sp, #204]	; 0xcc
   35d88:	ldr	r1, [sp, #40]	; 0x28
   35d8c:	ldr	r5, [sp, #92]	; 0x5c
   35d90:	cmp	r0, #0
   35d94:	mov	r7, r1
   35d98:	beq	35db0 <__assert_fail@plt+0x23334>
   35d9c:	str	r8, [r0, sl, lsl #2]
   35da0:	mov	r7, r1
   35da4:	ldr	r0, [r4, #76]	; 0x4c
   35da8:	cmp	r0, #0
   35dac:	bne	35410 <__assert_fail@plt+0x22994>
   35db0:	ldrb	r0, [r8, #52]	; 0x34
   35db4:	mov	lr, #0
   35db8:	mvn	r9, #0
   35dbc:	tst	r0, #16
   35dc0:	bne	353d8 <__assert_fail@plt+0x2295c>
   35dc4:	ldr	r0, [sp, #144]	; 0x90
   35dc8:	ldr	r1, [sp, #160]	; 0xa0
   35dcc:	str	lr, [sp, #56]	; 0x38
   35dd0:	cmp	r1, r0
   35dd4:	ble	366a4 <__assert_fail@plt+0x23c28>
   35dd8:	ldr	r1, [sp, #36]	; 0x24
   35ddc:	str	r1, [sp, #72]	; 0x48
   35de0:	b	36590 <__assert_fail@plt+0x23b14>
   35de4:	ldr	r0, [fp, #-196]	; 0xffffff3c
   35de8:	cmp	r0, #0
   35dec:	bne	377a8 <__assert_fail@plt+0x24d2c>
   35df0:	ldr	r0, [sp, #56]	; 0x38
   35df4:	ldr	r1, [sp, #44]	; 0x2c
   35df8:	clz	r0, r0
   35dfc:	lsr	r0, r0, #5
   35e00:	orr	r0, r1, r0
   35e04:	cmp	r0, #1
   35e08:	bne	366ac <__assert_fail@plt+0x23c30>
   35e0c:	ldr	r0, [sp, #204]	; 0xcc
   35e10:	cmp	r0, #0
   35e14:	bne	35e6c <__assert_fail@plt+0x233f0>
   35e18:	b	366ac <__assert_fail@plt+0x23c30>
   35e1c:	ldr	r0, [sp, #144]	; 0x90
   35e20:	cmn	r0, #1
   35e24:	ble	35e60 <__assert_fail@plt+0x233e4>
   35e28:	ldr	r1, [sp, #152]	; 0x98
   35e2c:	cmp	r1, r0
   35e30:	beq	364f4 <__assert_fail@plt+0x23a78>
   35e34:	ldr	r1, [sp, #184]	; 0xb8
   35e38:	cmp	r1, #2
   35e3c:	blt	35ec8 <__assert_fail@plt+0x2344c>
   35e40:	ldr	r1, [sp, #112]	; 0x70
   35e44:	ldr	r4, [r1, r0, lsl #2]
   35e48:	cmn	r4, #1
   35e4c:	bne	35efc <__assert_fail@plt+0x23480>
   35e50:	sub	r2, r0, #1
   35e54:	cmp	r0, #0
   35e58:	mov	r0, r2
   35e5c:	bgt	35e44 <__assert_fail@plt+0x233c8>
   35e60:	ldr	r3, [sp, #164]	; 0xa4
   35e64:	b	35f20 <__assert_fail@plt+0x234a4>
   35e68:	ldr	r0, [sp, #204]	; 0xcc
   35e6c:	ldr	r2, [sp, #144]	; 0x90
   35e70:	ldr	r1, [sp, #208]	; 0xd0
   35e74:	add	r2, r2, #1
   35e78:	sub	r3, r2, #1
   35e7c:	cmp	r3, r1
   35e80:	bge	366ac <__assert_fail@plt+0x23c30>
   35e84:	str	r2, [sp, #144]	; 0x90
   35e88:	ldr	r3, [r0, r2, lsl #2]
   35e8c:	add	r2, r2, #1
   35e90:	cmp	r3, #0
   35e94:	beq	35e78 <__assert_fail@plt+0x233fc>
   35e98:	sub	r0, fp, #196	; 0xc4
   35e9c:	add	r1, sp, #104	; 0x68
   35ea0:	mov	r2, #0
   35ea4:	bl	3fa60 <__assert_fail@plt+0x2cfe4>
   35ea8:	cmp	r0, #0
   35eac:	mov	r8, r0
   35eb0:	ldreq	r0, [fp, #-196]	; 0xffffff3c
   35eb4:	cmpeq	r0, #0
   35eb8:	beq	35e68 <__assert_fail@plt+0x233ec>
   35ebc:	cmp	r8, #0
   35ec0:	bne	36644 <__assert_fail@plt+0x23bc8>
   35ec4:	b	366ac <__assert_fail@plt+0x23c30>
   35ec8:	ldr	r1, [sp, #108]	; 0x6c
   35ecc:	ldr	r2, [sp, #172]	; 0xac
   35ed0:	mov	r3, #1
   35ed4:	ldrb	r0, [r1, r0]
   35ed8:	ubfx	r1, r0, #5, #3
   35edc:	ldr	r1, [r2, r1, lsl #2]
   35ee0:	and	r2, r0, #31
   35ee4:	tst	r1, r3, lsl r2
   35ee8:	bne	35f20 <__assert_fail@plt+0x234a4>
   35eec:	mov	r3, #0
   35ef0:	cmp	r0, #10
   35ef4:	beq	35f14 <__assert_fail@plt+0x23498>
   35ef8:	b	35f20 <__assert_fail@plt+0x234a4>
   35efc:	ldrb	r0, [sp, #182]	; 0xb6
   35f00:	cmp	r0, #0
   35f04:	bne	3651c <__assert_fail@plt+0x23aa0>
   35f08:	mov	r3, #0
   35f0c:	cmp	r4, #10
   35f10:	bne	35f20 <__assert_fail@plt+0x234a4>
   35f14:	ldrb	r3, [sp, #181]	; 0xb5
   35f18:	cmp	r3, #0
   35f1c:	movwne	r3, #2
   35f20:	ldr	r0, [r8, #8]
   35f24:	cmp	r0, #1
   35f28:	blt	36690 <__assert_fail@plt+0x23c14>
   35f2c:	ldr	r1, [sp, #188]	; 0xbc
   35f30:	ldr	r6, [r8, #12]
   35f34:	and	ip, r3, #8
   35f38:	and	lr, r3, #2
   35f3c:	and	r3, r3, #1
   35f40:	mov	r4, #0
   35f44:	str	r7, [sp, #16]
   35f48:	str	sl, [sp, #20]
   35f4c:	ldr	r5, [r1]
   35f50:	ldr	r1, [r6, r4, lsl #2]
   35f54:	add	r7, r5, r1, lsl #3
   35f58:	ldr	r7, [r7, #4]
   35f5c:	uxtb	r2, r7
   35f60:	cmp	r2, #2
   35f64:	bne	35fb4 <__assert_fail@plt+0x23538>
   35f68:	movw	r2, #65280	; 0xff00
   35f6c:	movt	r2, #3
   35f70:	tst	r7, r2
   35f74:	beq	35fcc <__assert_fail@plt+0x23550>
   35f78:	cmp	r3, #0
   35f7c:	bne	35f88 <__assert_fail@plt+0x2350c>
   35f80:	ands	r2, r7, #1024	; 0x400
   35f84:	bne	35fb4 <__assert_fail@plt+0x23538>
   35f88:	cmp	r3, #0
   35f8c:	andsne	r2, r7, #2048	; 0x800
   35f90:	bne	35fb4 <__assert_fail@plt+0x23538>
   35f94:	cmp	lr, #0
   35f98:	bne	35fa4 <__assert_fail@plt+0x23528>
   35f9c:	ands	r2, r7, #8192	; 0x2000
   35fa0:	bne	35fb4 <__assert_fail@plt+0x23538>
   35fa4:	cmp	ip, #0
   35fa8:	bne	35fcc <__assert_fail@plt+0x23550>
   35fac:	ands	r2, r7, #32768	; 0x8000
   35fb0:	beq	35fcc <__assert_fail@plt+0x23550>
   35fb4:	add	r4, r4, #1
   35fb8:	cmp	r4, r0
   35fbc:	blt	35f50 <__assert_fail@plt+0x234d4>
   35fc0:	ldr	sl, [sp, #20]
   35fc4:	ldr	r7, [sp, #16]
   35fc8:	b	36690 <__assert_fail@plt+0x23c14>
   35fcc:	ldr	sl, [sp, #20]
   35fd0:	ldr	r7, [sp, #16]
   35fd4:	cmp	r1, #0
   35fd8:	bne	36670 <__assert_fail@plt+0x23bf4>
   35fdc:	b	36690 <__assert_fail@plt+0x23c14>
   35fe0:	ldr	r0, [r5, #8]
   35fe4:	cmp	r0, #1
   35fe8:	blt	36418 <__assert_fail@plt+0x2399c>
   35fec:	ldr	lr, [sp, #188]	; 0xbc
   35ff0:	mov	r3, #0
   35ff4:	str	sl, [sp, #20]
   35ff8:	str	r7, [sp, #16]
   35ffc:	str	lr, [sp, #4]
   36000:	b	363e4 <__assert_fail@plt+0x23968>
   36004:	movw	r0, #65280	; 0xff00
   36008:	str	r3, [sp, #8]
   3600c:	movt	r0, #3
   36010:	tst	r6, r0
   36014:	beq	36128 <__assert_fail@plt+0x236ac>
   36018:	ldr	r0, [sp, #144]	; 0x90
   3601c:	cmn	r0, #1
   36020:	ble	36064 <__assert_fail@plt+0x235e8>
   36024:	ldr	r1, [sp, #152]	; 0x98
   36028:	cmp	r1, r0
   3602c:	beq	3633c <__assert_fail@plt+0x238c0>
   36030:	ldr	r1, [sp, #184]	; 0xb8
   36034:	cmp	r1, #2
   36038:	blt	3606c <__assert_fail@plt+0x235f0>
   3603c:	ldr	r1, [sp, #112]	; 0x70
   36040:	ldr	sl, [sp, #20]
   36044:	ldr	r3, [sp, #8]
   36048:	ldr	r8, [r1, r0, lsl #2]
   3604c:	cmn	r8, #1
   36050:	bne	360ac <__assert_fail@plt+0x23630>
   36054:	sub	r2, r0, #1
   36058:	cmp	r0, #0
   3605c:	mov	r0, r2
   36060:	bgt	36048 <__assert_fail@plt+0x235cc>
   36064:	ldr	r1, [sp, #164]	; 0xa4
   36068:	b	360d0 <__assert_fail@plt+0x23654>
   3606c:	ldr	r1, [sp, #108]	; 0x6c
   36070:	ldr	r2, [sp, #172]	; 0xac
   36074:	mov	ip, #0
   36078:	ldrb	r0, [r1, r0]
   3607c:	ubfx	r1, r0, #5, #3
   36080:	ldr	sl, [sp, #20]
   36084:	ldr	r3, [r2, r1, lsl #2]
   36088:	and	r2, r0, #31
   3608c:	mov	r1, #1
   36090:	tst	r3, r1, lsl r2
   36094:	ldr	r3, [sp, #8]
   36098:	bne	360e8 <__assert_fail@plt+0x2366c>
   3609c:	mov	r1, #0
   360a0:	cmp	r0, #10
   360a4:	beq	360c4 <__assert_fail@plt+0x23648>
   360a8:	b	360d0 <__assert_fail@plt+0x23654>
   360ac:	ldrb	r0, [sp, #182]	; 0xb6
   360b0:	cmp	r0, #0
   360b4:	bne	36370 <__assert_fail@plt+0x238f4>
   360b8:	mov	r1, #0
   360bc:	cmp	r8, #10
   360c0:	bne	360d0 <__assert_fail@plt+0x23654>
   360c4:	ldrb	r1, [sp, #181]	; 0xb5
   360c8:	cmp	r1, #0
   360cc:	movwne	r1, #2
   360d0:	and	r0, r1, #1
   360d4:	tst	r6, #1024	; 0x400
   360d8:	eor	ip, r0, #1
   360dc:	beq	360e8 <__assert_fail@plt+0x2366c>
   360e0:	cmp	r0, #0
   360e4:	beq	36408 <__assert_fail@plt+0x2398c>
   360e8:	ldr	r0, [lr]
   360ec:	ldr	r2, [sp, #12]
   360f0:	cmp	ip, #0
   360f4:	add	r0, r0, r2, lsl #3
   360f8:	ldr	r0, [r0, #4]
   360fc:	bne	36108 <__assert_fail@plt+0x2368c>
   36100:	ands	r2, r0, #2048	; 0x800
   36104:	bne	36408 <__assert_fail@plt+0x2398c>
   36108:	tst	r1, #2
   3610c:	bne	36118 <__assert_fail@plt+0x2369c>
   36110:	ands	r2, r0, #8192	; 0x2000
   36114:	bne	36408 <__assert_fail@plt+0x2398c>
   36118:	tst	r1, #8
   3611c:	bne	36128 <__assert_fail@plt+0x236ac>
   36120:	ands	r0, r0, #32768	; 0x8000
   36124:	bne	36408 <__assert_fail@plt+0x2398c>
   36128:	ldr	r3, [sp, #144]	; 0x90
   3612c:	ldr	r1, [sp, #12]
   36130:	mov	r0, lr
   36134:	add	r2, sp, #104	; 0x68
   36138:	bl	414f0 <__assert_fail@plt+0x2ea74>
   3613c:	ldr	r3, [sp, #8]
   36140:	ldr	lr, [sp, #4]
   36144:	ldr	r7, [sp, #16]
   36148:	cmp	r0, #0
   3614c:	beq	36408 <__assert_fail@plt+0x2398c>
   36150:	ldr	r1, [sp, #224]	; 0xe0
   36154:	cmp	r1, r0
   36158:	movlt	r1, r0
   3615c:	str	r1, [sp, #224]	; 0xe0
   36160:	ldr	r3, [sp, #144]	; 0x90
   36164:	ldr	r2, [sp, #140]	; 0x8c
   36168:	ldr	r1, [sp, #152]	; 0x98
   3616c:	ldr	r7, [sp, #208]	; 0xd0
   36170:	add	r6, r3, r0
   36174:	cmp	r2, r6
   36178:	cmple	r2, r1
   3617c:	blt	36190 <__assert_fail@plt+0x23714>
   36180:	ldr	r0, [sp, #132]	; 0x84
   36184:	cmp	r0, r6
   36188:	cmple	r0, r1
   3618c:	bge	361a8 <__assert_fail@plt+0x2372c>
   36190:	add	r1, r6, #1
   36194:	add	r0, sp, #104	; 0x68
   36198:	bl	3f858 <__assert_fail@plt+0x2cddc>
   3619c:	ldr	lr, [sp, #4]
   361a0:	cmp	r0, #0
   361a4:	bne	36504 <__assert_fail@plt+0x23a88>
   361a8:	cmp	r6, r7
   361ac:	ble	361d4 <__assert_fail@plt+0x23758>
   361b0:	sub	r0, r6, r7
   361b4:	mov	r1, #0
   361b8:	lsl	r2, r0, #2
   361bc:	ldr	r0, [sp, #204]	; 0xcc
   361c0:	add	r0, r0, r7, lsl #2
   361c4:	add	r0, r0, #4
   361c8:	bl	12800 <memset@plt>
   361cc:	ldr	lr, [sp, #4]
   361d0:	str	r6, [sp, #208]	; 0xd0
   361d4:	mov	r0, #0
   361d8:	ldr	r2, [sp, #12]
   361dc:	str	r0, [fp, #-48]	; 0xffffffd0
   361e0:	ldr	r0, [sp, #204]	; 0xcc
   361e4:	ldr	r1, [lr, #24]
   361e8:	ldr	r7, [r0, r6, lsl #2]
   361ec:	ldr	r0, [lr, #12]
   361f0:	ldr	r0, [r0, r2, lsl #2]
   361f4:	cmp	r7, #0
   361f8:	add	r0, r0, r0, lsl #1
   361fc:	add	r2, r1, r0, lsl #2
   36200:	beq	36224 <__assert_fail@plt+0x237a8>
   36204:	ldr	r1, [r7, #40]	; 0x28
   36208:	sub	r0, fp, #192	; 0xc0
   3620c:	bl	3fc74 <__assert_fail@plt+0x2d1f8>
   36210:	ldr	sl, [sp, #20]
   36214:	cmp	r0, #0
   36218:	str	r0, [fp, #-48]	; 0xffffffd0
   3621c:	beq	36238 <__assert_fail@plt+0x237bc>
   36220:	b	36508 <__assert_fail@plt+0x23a8c>
   36224:	vldr	d16, [r2]
   36228:	ldr	r0, [r2, #8]
   3622c:	ldr	sl, [sp, #20]
   36230:	str	r0, [fp, #-184]	; 0xffffff48
   36234:	vstr	d16, [fp, #-192]	; 0xffffff40
   36238:	cmp	r6, #0
   3623c:	ble	36354 <__assert_fail@plt+0x238d8>
   36240:	ldr	r1, [sp, #152]	; 0x98
   36244:	sub	r0, r6, #1
   36248:	cmp	r1, r0
   3624c:	ldr	r1, [sp, #4]
   36250:	beq	36360 <__assert_fail@plt+0x238e4>
   36254:	ldr	r2, [sp, #184]	; 0xb8
   36258:	cmp	r2, #2
   3625c:	blt	3628c <__assert_fail@plt+0x23810>
   36260:	ldr	r0, [sp, #112]	; 0x70
   36264:	mov	r2, r6
   36268:	sub	r0, r0, #4
   3626c:	ldr	r8, [r0, r2, lsl #2]
   36270:	cmn	r8, #1
   36274:	bne	362c8 <__assert_fail@plt+0x2384c>
   36278:	sub	r2, r2, #1
   3627c:	cmp	r2, #0
   36280:	bgt	3626c <__assert_fail@plt+0x237f0>
   36284:	ldr	r3, [sp, #164]	; 0xa4
   36288:	b	362ec <__assert_fail@plt+0x23870>
   3628c:	ldr	r3, [sp, #108]	; 0x6c
   36290:	ldr	r2, [sp, #172]	; 0xac
   36294:	mov	ip, r7
   36298:	ldrb	r0, [r3, r0]
   3629c:	ubfx	r3, r0, #5, #3
   362a0:	ldr	r7, [r2, r3, lsl #2]
   362a4:	and	r2, r0, #31
   362a8:	mov	r3, #1
   362ac:	tst	r7, r3, lsl r2
   362b0:	mov	r7, ip
   362b4:	bne	362ec <__assert_fail@plt+0x23870>
   362b8:	mov	r3, #0
   362bc:	cmp	r0, #10
   362c0:	beq	362e0 <__assert_fail@plt+0x23864>
   362c4:	b	362ec <__assert_fail@plt+0x23870>
   362c8:	ldrb	r0, [sp, #182]	; 0xb6
   362cc:	cmp	r0, #0
   362d0:	bne	363a0 <__assert_fail@plt+0x23924>
   362d4:	mov	r3, #0
   362d8:	cmp	r8, #10
   362dc:	bne	362ec <__assert_fail@plt+0x23870>
   362e0:	ldrb	r3, [sp, #181]	; 0xb5
   362e4:	cmp	r3, #0
   362e8:	movwne	r3, #2
   362ec:	sub	r0, fp, #48	; 0x30
   362f0:	sub	r2, fp, #192	; 0xc0
   362f4:	bl	3dd9c <__assert_fail@plt+0x2b320>
   362f8:	ldr	r1, [sp, #204]	; 0xcc
   362fc:	cmp	r7, #0
   36300:	str	r0, [r1, r6, lsl #2]
   36304:	beq	36310 <__assert_fail@plt+0x23894>
   36308:	ldr	r0, [fp, #-184]	; 0xffffff48
   3630c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   36310:	ldr	r0, [sp, #204]	; 0xcc
   36314:	ldr	r7, [sp, #16]
   36318:	ldr	lr, [sp, #4]
   3631c:	ldr	r3, [sp, #8]
   36320:	ldr	r0, [r0, r6, lsl #2]
   36324:	cmp	r0, #0
   36328:	bne	36408 <__assert_fail@plt+0x2398c>
   3632c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   36330:	cmp	r0, #0
   36334:	beq	36408 <__assert_fail@plt+0x2398c>
   36338:	b	36510 <__assert_fail@plt+0x23a94>
   3633c:	ldr	r0, [sp, #192]	; 0xc0
   36340:	ldr	sl, [sp, #20]
   36344:	ldr	r3, [sp, #8]
   36348:	and	r0, r0, #2
   3634c:	eor	r1, r0, #10
   36350:	b	360d0 <__assert_fail@plt+0x23654>
   36354:	ldr	r3, [sp, #164]	; 0xa4
   36358:	ldr	r1, [sp, #4]
   3635c:	b	362ec <__assert_fail@plt+0x23870>
   36360:	ldr	r0, [sp, #192]	; 0xc0
   36364:	and	r0, r0, #2
   36368:	eor	r3, r0, #10
   3636c:	b	362ec <__assert_fail@plt+0x23870>
   36370:	mov	r0, r8
   36374:	bl	127dc <iswalnum@plt>
   36378:	mov	r1, #1
   3637c:	mov	ip, #0
   36380:	cmp	r8, #95	; 0x5f
   36384:	beq	363c8 <__assert_fail@plt+0x2394c>
   36388:	ldr	sl, [sp, #20]
   3638c:	ldr	lr, [sp, #4]
   36390:	ldr	r3, [sp, #8]
   36394:	cmp	r0, #0
   36398:	beq	360b8 <__assert_fail@plt+0x2363c>
   3639c:	b	360e8 <__assert_fail@plt+0x2366c>
   363a0:	mov	r0, r8
   363a4:	bl	127dc <iswalnum@plt>
   363a8:	mov	r3, #1
   363ac:	cmp	r8, #95	; 0x5f
   363b0:	beq	363d8 <__assert_fail@plt+0x2395c>
   363b4:	ldr	sl, [sp, #20]
   363b8:	ldr	r1, [sp, #4]
   363bc:	cmp	r0, #0
   363c0:	beq	362d4 <__assert_fail@plt+0x23858>
   363c4:	b	362ec <__assert_fail@plt+0x23870>
   363c8:	ldr	sl, [sp, #20]
   363cc:	ldr	lr, [sp, #4]
   363d0:	ldr	r3, [sp, #8]
   363d4:	b	360e8 <__assert_fail@plt+0x2366c>
   363d8:	ldr	sl, [sp, #20]
   363dc:	ldr	r1, [sp, #4]
   363e0:	b	362ec <__assert_fail@plt+0x23870>
   363e4:	ldr	r0, [r5, #12]
   363e8:	ldr	r2, [r0, r3, lsl #2]
   363ec:	ldr	r0, [lr]
   363f0:	add	r0, r0, r2, lsl #3
   363f4:	mov	r1, r2
   363f8:	str	r2, [sp, #12]
   363fc:	ldr	r6, [r0, #4]
   36400:	tst	r6, #1048576	; 0x100000
   36404:	bne	36004 <__assert_fail@plt+0x23588>
   36408:	ldr	r0, [r5, #8]
   3640c:	add	r3, r3, #1
   36410:	cmp	r3, r0
   36414:	blt	363e4 <__assert_fail@plt+0x23968>
   36418:	mov	r0, #0
   3641c:	str	r0, [fp, #-196]	; 0xffffff3c
   36420:	b	365d0 <__assert_fail@plt+0x23b54>
   36424:	add	r1, r0, #2
   36428:	add	r0, sp, #104	; 0x68
   3642c:	bl	3f858 <__assert_fail@plt+0x2cddc>
   36430:	cmp	r0, #0
   36434:	str	r0, [fp, #-196]	; 0xffffff3c
   36438:	beq	365c4 <__assert_fail@plt+0x23b48>
   3643c:	b	377a8 <__assert_fail@plt+0x24d2c>
   36440:	ldr	r0, [sp, #144]	; 0x90
   36444:	cmp	r0, #0
   36448:	ble	36488 <__assert_fail@plt+0x23a0c>
   3644c:	ldr	r2, [sp, #152]	; 0x98
   36450:	sub	r1, r0, #1
   36454:	cmp	r2, r1
   36458:	beq	3654c <__assert_fail@plt+0x23ad0>
   3645c:	ldr	r2, [sp, #184]	; 0xb8
   36460:	cmp	r2, #2
   36464:	blt	36490 <__assert_fail@plt+0x23a14>
   36468:	ldr	r1, [sp, #112]	; 0x70
   3646c:	sub	r1, r1, #4
   36470:	ldr	r8, [r1, r0, lsl #2]
   36474:	cmn	r8, #1
   36478:	bne	364c4 <__assert_fail@plt+0x23a48>
   3647c:	sub	r0, r0, #1
   36480:	cmp	r0, #0
   36484:	bgt	36470 <__assert_fail@plt+0x239f4>
   36488:	ldr	r1, [sp, #164]	; 0xa4
   3648c:	b	364e8 <__assert_fail@plt+0x23a6c>
   36490:	ldr	r0, [sp, #108]	; 0x6c
   36494:	ldr	r2, [sp, #172]	; 0xac
   36498:	ldrb	r0, [r0, r1]
   3649c:	ubfx	r1, r0, #5, #3
   364a0:	ldr	ip, [r2, r1, lsl #2]
   364a4:	and	r2, r0, #31
   364a8:	mov	r1, #1
   364ac:	tst	ip, r1, lsl r2
   364b0:	bne	364e8 <__assert_fail@plt+0x23a6c>
   364b4:	mov	r1, #0
   364b8:	cmp	r0, #10
   364bc:	beq	364dc <__assert_fail@plt+0x23a60>
   364c0:	b	364e8 <__assert_fail@plt+0x23a6c>
   364c4:	ldrb	r0, [sp, #182]	; 0xb6
   364c8:	cmp	r0, #0
   364cc:	bne	36554 <__assert_fail@plt+0x23ad8>
   364d0:	mov	r1, #0
   364d4:	cmp	r8, #10
   364d8:	bne	364e8 <__assert_fail@plt+0x23a6c>
   364dc:	ldrb	r1, [sp, #181]	; 0xb5
   364e0:	cmp	r1, #0
   364e4:	movwne	r1, #2
   364e8:	bfi	r6, r1, #8, #1
   364ec:	ldr	r8, [r3, r6, lsl #2]
   364f0:	b	3661c <__assert_fail@plt+0x23ba0>
   364f4:	ldr	r0, [sp, #192]	; 0xc0
   364f8:	and	r0, r0, #2
   364fc:	eor	r3, r0, #10
   36500:	b	35f20 <__assert_fail@plt+0x234a4>
   36504:	str	r0, [fp, #-48]	; 0xffffffd0
   36508:	ldr	sl, [sp, #20]
   3650c:	ldr	r7, [sp, #16]
   36510:	mov	r8, #0
   36514:	str	r0, [fp, #-196]	; 0xffffff3c
   36518:	b	3661c <__assert_fail@plt+0x23ba0>
   3651c:	mov	r0, r4
   36520:	mov	r5, r7
   36524:	bl	127dc <iswalnum@plt>
   36528:	mov	r3, #1
   3652c:	cmp	r4, #95	; 0x5f
   36530:	beq	36544 <__assert_fail@plt+0x23ac8>
   36534:	cmp	r0, #0
   36538:	mov	r7, r5
   3653c:	beq	35f08 <__assert_fail@plt+0x2348c>
   36540:	b	35f20 <__assert_fail@plt+0x234a4>
   36544:	mov	r7, r5
   36548:	b	35f20 <__assert_fail@plt+0x234a4>
   3654c:	mov	r1, #10
   36550:	b	364e8 <__assert_fail@plt+0x23a6c>
   36554:	mov	r0, r8
   36558:	str	r3, [sp, #12]
   3655c:	str	r7, [sp, #16]
   36560:	bl	127dc <iswalnum@plt>
   36564:	mov	r1, #1
   36568:	cmp	r8, #95	; 0x5f
   3656c:	beq	36584 <__assert_fail@plt+0x23b08>
   36570:	ldr	r7, [sp, #16]
   36574:	ldr	r3, [sp, #12]
   36578:	cmp	r0, #0
   3657c:	beq	364d0 <__assert_fail@plt+0x23a54>
   36580:	b	364e8 <__assert_fail@plt+0x23a6c>
   36584:	ldr	r7, [sp, #16]
   36588:	ldr	r3, [sp, #12]
   3658c:	b	364e8 <__assert_fail@plt+0x23a6c>
   36590:	ldr	r2, [sp, #140]	; 0x8c
   36594:	ldr	r1, [sp, #152]	; 0x98
   36598:	add	r4, r0, #1
   3659c:	mov	r5, r8
   365a0:	cmp	r4, r2
   365a4:	blt	365b0 <__assert_fail@plt+0x23b34>
   365a8:	cmp	r2, r1
   365ac:	blt	36424 <__assert_fail@plt+0x239a8>
   365b0:	ldr	r2, [sp, #132]	; 0x84
   365b4:	cmp	r4, r2
   365b8:	blt	365c4 <__assert_fail@plt+0x23b48>
   365bc:	cmp	r2, r1
   365c0:	blt	36424 <__assert_fail@plt+0x239a8>
   365c4:	ldrb	r0, [r5, #52]	; 0x34
   365c8:	tst	r0, #32
   365cc:	bne	35fe0 <__assert_fail@plt+0x23564>
   365d0:	ldr	r1, [sp, #144]	; 0x90
   365d4:	ldr	r0, [sp, #108]	; 0x6c
   365d8:	add	r2, r1, #1
   365dc:	str	r2, [sp, #144]	; 0x90
   365e0:	ldrb	r6, [r0, r1]
   365e4:	ldr	r0, [r5, #44]	; 0x2c
   365e8:	cmp	r0, #0
   365ec:	bne	36618 <__assert_fail@plt+0x23b9c>
   365f0:	ldr	r3, [r5, #48]	; 0x30
   365f4:	cmp	r3, #0
   365f8:	bne	36440 <__assert_fail@plt+0x239c4>
   365fc:	ldr	r0, [sp, #188]	; 0xbc
   36600:	mov	r1, r5
   36604:	bl	419f4 <__assert_fail@plt+0x2ef78>
   36608:	cmp	r0, #0
   3660c:	bne	365e4 <__assert_fail@plt+0x23b68>
   36610:	mov	r0, #12
   36614:	b	36510 <__assert_fail@plt+0x23a94>
   36618:	ldr	r8, [r0, r6, lsl #2]
   3661c:	ldr	r0, [sp, #204]	; 0xcc
   36620:	cmp	r0, #0
   36624:	beq	3663c <__assert_fail@plt+0x23bc0>
   36628:	sub	r0, fp, #196	; 0xc4
   3662c:	add	r1, sp, #104	; 0x68
   36630:	mov	r2, r8
   36634:	bl	3fa60 <__assert_fail@plt+0x2cfe4>
   36638:	mov	r8, r0
   3663c:	cmp	r8, #0
   36640:	beq	35de4 <__assert_fail@plt+0x23368>
   36644:	sub	r0, r5, r8
   36648:	clz	r0, r0
   3664c:	lsr	r0, r0, #5
   36650:	ands	r7, r7, r0
   36654:	ldrb	r0, [r8, #52]	; 0x34
   36658:	movne	sl, r4
   3665c:	tst	r0, #16
   36660:	beq	36690 <__assert_fail@plt+0x23c14>
   36664:	sxtb	r0, r0
   36668:	cmn	r0, #1
   3666c:	ble	35e1c <__assert_fail@plt+0x233a0>
   36670:	ldr	r0, [sp, #44]	; 0x2c
   36674:	ldr	r9, [sp, #144]	; 0x90
   36678:	cmp	r0, #0
   3667c:	beq	366c0 <__assert_fail@plt+0x23c44>
   36680:	mov	r0, #0
   36684:	str	r0, [sp, #72]	; 0x48
   36688:	mov	r0, #1
   3668c:	str	r0, [sp, #56]	; 0x38
   36690:	ldr	r0, [sp, #144]	; 0x90
   36694:	ldr	r1, [sp, #160]	; 0xa0
   36698:	cmp	r1, r0
   3669c:	bgt	36590 <__assert_fail@plt+0x23b14>
   366a0:	b	366ac <__assert_fail@plt+0x23c30>
   366a4:	ldr	r0, [sp, #36]	; 0x24
   366a8:	str	r0, [sp, #72]	; 0x48
   366ac:	ldr	r1, [sp, #72]	; 0x48
   366b0:	cmp	r1, #0
   366b4:	ldrne	r0, [r1]
   366b8:	addne	r0, r0, sl
   366bc:	strne	r0, [r1]
   366c0:	ldr	sl, [sp, #92]	; 0x5c
   366c4:	ldr	r8, [sp, #64]	; 0x40
   366c8:	cmn	r9, #1
   366cc:	beq	3588c <__assert_fail@plt+0x22e10>
   366d0:	cmn	r9, #2
   366d4:	beq	377a8 <__assert_fail@plt+0x24d2c>
   366d8:	ldr	r5, [sp, #80]	; 0x50
   366dc:	str	r9, [sp, #196]	; 0xc4
   366e0:	ldr	r8, [sp, #96]	; 0x60
   366e4:	cmp	sl, #2
   366e8:	ldrb	r0, [r5, #28]
   366ec:	bcc	366f8 <__assert_fail@plt+0x23c7c>
   366f0:	ands	r1, r0, #16
   366f4:	beq	36704 <__assert_fail@plt+0x23c88>
   366f8:	ldr	r1, [r8, #76]	; 0x4c
   366fc:	cmp	r1, #0
   36700:	beq	36864 <__assert_fail@plt+0x23de8>
   36704:	ldr	r0, [sp, #204]	; 0xcc
   36708:	cmn	r9, #1
   3670c:	ldr	r5, [r0, r9, lsl #2]
   36710:	ble	3674c <__assert_fail@plt+0x23cd0>
   36714:	ldr	r0, [sp, #152]	; 0x98
   36718:	cmp	r0, r9
   3671c:	beq	35428 <__assert_fail@plt+0x229ac>
   36720:	ldr	r0, [sp, #184]	; 0xb8
   36724:	cmp	r0, #2
   36728:	blt	3675c <__assert_fail@plt+0x23ce0>
   3672c:	ldr	r0, [sp, #112]	; 0x70
   36730:	ldr	r4, [r0, r9, lsl #2]
   36734:	cmn	r4, #1
   36738:	bne	36798 <__assert_fail@plt+0x23d1c>
   3673c:	sub	r1, r9, #1
   36740:	cmp	r9, #0
   36744:	mov	r9, r1
   36748:	bgt	36730 <__assert_fail@plt+0x23cb4>
   3674c:	ldr	r3, [sp, #164]	; 0xa4
   36750:	movw	r9, #65280	; 0xff00
   36754:	movt	r9, #3
   36758:	b	367c4 <__assert_fail@plt+0x23d48>
   3675c:	ldr	r0, [sp, #108]	; 0x6c
   36760:	ldr	r1, [sp, #172]	; 0xac
   36764:	mov	r3, #1
   36768:	ldrb	r0, [r0, r9]
   3676c:	movw	r9, #65280	; 0xff00
   36770:	movt	r9, #3
   36774:	ubfx	r2, r0, #5, #3
   36778:	ldr	r1, [r1, r2, lsl #2]
   3677c:	and	r2, r0, #31
   36780:	tst	r1, r3, lsl r2
   36784:	bne	367c4 <__assert_fail@plt+0x23d48>
   36788:	mov	r3, #0
   3678c:	cmp	r0, #10
   36790:	beq	367b8 <__assert_fail@plt+0x23d3c>
   36794:	b	367c4 <__assert_fail@plt+0x23d48>
   36798:	ldrb	r0, [sp, #182]	; 0xb6
   3679c:	movw	r9, #65280	; 0xff00
   367a0:	movt	r9, #3
   367a4:	cmp	r0, #0
   367a8:	bne	354c4 <__assert_fail@plt+0x22a48>
   367ac:	mov	r3, #0
   367b0:	cmp	r4, #10
   367b4:	bne	367c4 <__assert_fail@plt+0x23d48>
   367b8:	ldrb	r3, [sp, #181]	; 0xb5
   367bc:	cmp	r3, #0
   367c0:	movwne	r3, #2
   367c4:	ldr	r0, [r5, #8]
   367c8:	cmp	r0, #1
   367cc:	blt	36854 <__assert_fail@plt+0x23dd8>
   367d0:	ldr	r1, [sp, #188]	; 0xbc
   367d4:	ldr	r6, [r5, #12]
   367d8:	and	ip, r3, #8
   367dc:	and	lr, r3, #2
   367e0:	and	r3, r3, #1
   367e4:	mov	r4, #0
   367e8:	ldr	r5, [r1]
   367ec:	ldr	r7, [r6, r4, lsl #2]
   367f0:	add	r1, r5, r7, lsl #3
   367f4:	ldr	r1, [r1, #4]
   367f8:	uxtb	r2, r1
   367fc:	cmp	r2, #2
   36800:	bne	36848 <__assert_fail@plt+0x23dcc>
   36804:	tst	r1, r9
   36808:	beq	36858 <__assert_fail@plt+0x23ddc>
   3680c:	cmp	r3, #0
   36810:	bne	3681c <__assert_fail@plt+0x23da0>
   36814:	ands	r2, r1, #1024	; 0x400
   36818:	bne	36848 <__assert_fail@plt+0x23dcc>
   3681c:	cmp	r3, #0
   36820:	andsne	r2, r1, #2048	; 0x800
   36824:	bne	36848 <__assert_fail@plt+0x23dcc>
   36828:	cmp	lr, #0
   3682c:	bne	36838 <__assert_fail@plt+0x23dbc>
   36830:	ands	r2, r1, #8192	; 0x2000
   36834:	bne	36848 <__assert_fail@plt+0x23dcc>
   36838:	cmp	ip, #0
   3683c:	bne	36858 <__assert_fail@plt+0x23ddc>
   36840:	ands	r1, r1, #32768	; 0x8000
   36844:	beq	36858 <__assert_fail@plt+0x23ddc>
   36848:	add	r4, r4, #1
   3684c:	cmp	r4, r0
   36850:	blt	367ec <__assert_fail@plt+0x23d70>
   36854:	mov	r7, #0
   36858:	ldr	r5, [sp, #80]	; 0x50
   3685c:	str	r7, [sp, #200]	; 0xc8
   36860:	ldrb	r0, [r5, #28]
   36864:	sub	r6, fp, #48	; 0x30
   36868:	cmp	sl, #2
   3686c:	bcc	36884 <__assert_fail@plt+0x23e08>
   36870:	ands	r0, r0, #16
   36874:	bne	36884 <__assert_fail@plt+0x23e08>
   36878:	ldrb	r0, [r8, #88]	; 0x58
   3687c:	tst	r0, #1
   36880:	bne	36890 <__assert_fail@plt+0x23e14>
   36884:	ldr	r0, [r8, #76]	; 0x4c
   36888:	cmp	r0, #0
   3688c:	beq	36a2c <__assert_fail@plt+0x23fb0>
   36890:	ldr	sl, [sp, #196]	; 0xc4
   36894:	cmn	sl, #-1073741823	; 0xc0000001
   36898:	bcs	377a8 <__assert_fail@plt+0x24d2c>
   3689c:	ldr	r0, [sp, #188]	; 0xbc
   368a0:	ldr	r6, [sp, #200]	; 0xc8
   368a4:	str	r0, [sp, #72]	; 0x48
   368a8:	mov	r0, #4
   368ac:	add	r4, r0, sl, lsl #2
   368b0:	mov	r0, r4
   368b4:	bl	3233c <__assert_fail@plt+0x1f8c0>
   368b8:	mov	r8, r0
   368bc:	cmp	r0, #0
   368c0:	beq	379dc <__assert_fail@plt+0x24f60>
   368c4:	ldr	r0, [sp, #72]	; 0x48
   368c8:	ldr	r0, [r0, #76]	; 0x4c
   368cc:	cmp	r0, #0
   368d0:	beq	3537c <__assert_fail@plt+0x22900>
   368d4:	mov	r0, r4
   368d8:	bl	3233c <__assert_fail@plt+0x1f8c0>
   368dc:	cmp	r0, #0
   368e0:	beq	379dc <__assert_fail@plt+0x24f60>
   368e4:	mov	r1, #0
   368e8:	mov	r2, r4
   368ec:	mov	r5, r0
   368f0:	bl	12800 <memset@plt>
   368f4:	sub	r0, fp, #188	; 0xbc
   368f8:	str	r8, [fp, #-192]	; 0xffffff40
   368fc:	mov	r1, #0
   36900:	stm	r0, {r5, r6, sl}
   36904:	ldr	r0, [sp, #28]
   36908:	str	r1, [r0]
   3690c:	str	r1, [r0, #4]
   36910:	str	r1, [r0, #8]
   36914:	add	r0, sp, #104	; 0x68
   36918:	sub	r1, fp, #192	; 0xc0
   3691c:	bl	42af0 <__assert_fail@plt+0x30074>
   36920:	mov	r9, r0
   36924:	mov	r0, #0
   36928:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3692c:	cmp	r9, #0
   36930:	mov	r4, r5
   36934:	bne	358c8 <__assert_fail@plt+0x22e4c>
   36938:	ldr	r0, [r8]
   3693c:	cmp	r0, #0
   36940:	beq	3565c <__assert_fail@plt+0x22be0>
   36944:	mov	r1, #0
   36948:	cmp	sl, #0
   3694c:	mov	r9, #0
   36950:	str	r1, [sp, #56]	; 0x38
   36954:	blt	369e8 <__assert_fail@plt+0x23f6c>
   36958:	mov	r7, #0
   3695c:	b	36970 <__assert_fail@plt+0x23ef4>
   36960:	add	r0, r8, r7, lsl #2
   36964:	add	r1, r7, #1
   36968:	ldr	r0, [r0, #4]
   3696c:	mov	r7, r1
   36970:	ldr	r2, [r4, r7, lsl #2]
   36974:	cmp	r0, #0
   36978:	beq	369d8 <__assert_fail@plt+0x23f5c>
   3697c:	cmp	r2, #0
   36980:	beq	369cc <__assert_fail@plt+0x23f50>
   36984:	sub	r5, fp, #48	; 0x30
   36988:	add	r1, r0, #4
   3698c:	add	r2, r2, #4
   36990:	mov	r0, r5
   36994:	bl	3fc74 <__assert_fail@plt+0x2d1f8>
   36998:	cmp	r0, #0
   3699c:	str	r0, [fp, #-196]	; 0xffffff3c
   369a0:	bne	353d0 <__assert_fail@plt+0x22954>
   369a4:	ldr	r1, [sp, #72]	; 0x48
   369a8:	sub	r0, fp, #196	; 0xc4
   369ac:	mov	r2, r5
   369b0:	bl	41260 <__assert_fail@plt+0x2e7e4>
   369b4:	str	r0, [r8, r7, lsl #2]
   369b8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   369bc:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   369c0:	ldr	r9, [fp, #-196]	; 0xffffff3c
   369c4:	cmp	r9, #0
   369c8:	bne	369e8 <__assert_fail@plt+0x23f6c>
   369cc:	cmp	r7, sl
   369d0:	blt	36960 <__assert_fail@plt+0x23ee4>
   369d4:	b	369e4 <__assert_fail@plt+0x23f68>
   369d8:	str	r2, [r8, r7, lsl #2]
   369dc:	cmp	r7, sl
   369e0:	blt	36960 <__assert_fail@plt+0x23ee4>
   369e4:	mov	r9, #0
   369e8:	mov	r0, r4
   369ec:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   369f0:	cmp	r9, #0
   369f4:	bne	358cc <__assert_fail@plt+0x22e50>
   369f8:	ldr	r0, [sp, #204]	; 0xcc
   369fc:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   36a00:	mov	r0, #0
   36a04:	str	r6, [sp, #200]	; 0xc8
   36a08:	str	r8, [sp, #204]	; 0xcc
   36a0c:	str	sl, [sp, #196]	; 0xc4
   36a10:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   36a14:	mov	r0, #0
   36a18:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   36a1c:	ldr	r8, [sp, #96]	; 0x60
   36a20:	ldr	sl, [sp, #92]	; 0x5c
   36a24:	ldr	r5, [sp, #80]	; 0x50
   36a28:	sub	r6, fp, #48	; 0x30
   36a2c:	cmp	sl, #0
   36a30:	beq	37978 <__assert_fail@plt+0x24efc>
   36a34:	ldr	r4, [sp, #32]
   36a38:	cmp	sl, #1
   36a3c:	beq	36a60 <__assert_fail@plt+0x23fe4>
   36a40:	ldr	r1, [fp, #16]
   36a44:	mvn	r0, r4
   36a48:	add	r0, r0, r1
   36a4c:	mov	r1, #255	; 0xff
   36a50:	lsl	r2, r0, #3
   36a54:	ldr	r0, [fp, #20]
   36a58:	add	r0, r0, #8
   36a5c:	bl	12800 <memset@plt>
   36a60:	ldr	r0, [sp, #196]	; 0xc4
   36a64:	ldr	r1, [fp, #20]
   36a68:	mov	r9, #0
   36a6c:	cmp	sl, #2
   36a70:	str	r9, [r1]
   36a74:	str	r0, [r1, #4]
   36a78:	bcc	37858 <__assert_fail@plt+0x24ddc>
   36a7c:	ldrb	r0, [r5, #28]
   36a80:	ands	r0, r0, #16
   36a84:	bne	37858 <__assert_fail@plt+0x24ddc>
   36a88:	ldrb	r1, [r8, #88]	; 0x58
   36a8c:	mov	r0, #0
   36a90:	tst	r1, #1
   36a94:	mov	r1, #0
   36a98:	beq	36aac <__assert_fail@plt+0x24030>
   36a9c:	ldr	r2, [r8, #76]	; 0x4c
   36aa0:	mov	r1, #0
   36aa4:	cmp	r2, #0
   36aa8:	movwgt	r1, #1
   36aac:	movw	r2, #51992	; 0xcb18
   36ab0:	ldr	r7, [r5]
   36ab4:	cmp	r1, #0
   36ab8:	mov	r1, #0
   36abc:	movt	r2, #4
   36ac0:	vldr	d16, [r2]
   36ac4:	ldr	r2, [r2, #8]
   36ac8:	str	r2, [fp, #-40]	; 0xffffffd8
   36acc:	mov	r2, #16
   36ad0:	vstr	d16, [fp, #-48]	; 0xffffffd0
   36ad4:	str	r2, [fp, #-188]	; 0xffffff44
   36ad8:	sub	r2, fp, #192	; 0xc0
   36adc:	str	r0, [fp, #-192]	; 0xffffff40
   36ae0:	add	r5, r2, #12
   36ae4:	str	r5, [fp, #-184]	; 0xffffff48
   36ae8:	beq	36b08 <__assert_fail@plt+0x2408c>
   36aec:	mov	r0, #48	; 0x30
   36af0:	bl	3233c <__assert_fail@plt+0x1f8c0>
   36af4:	cmp	r0, #0
   36af8:	str	r0, [fp, #-40]	; 0xffffffd8
   36afc:	beq	377a8 <__assert_fail@plt+0x24d2c>
   36b00:	ldr	r0, [fp, #-192]	; 0xffffff40
   36b04:	mov	r1, r6
   36b08:	str	r7, [sp, #68]	; 0x44
   36b0c:	ldr	r7, [r7, #72]	; 0x48
   36b10:	cmp	r0, sl
   36b14:	str	r5, [sp, #76]	; 0x4c
   36b18:	str	r1, [sp, #80]	; 0x50
   36b1c:	bcs	36c08 <__assert_fail@plt+0x2418c>
   36b20:	ldr	r2, [sp, #76]	; 0x4c
   36b24:	sub	r0, fp, #192	; 0xc0
   36b28:	mov	r1, sl
   36b2c:	mov	r3, #8
   36b30:	bl	45d1c <__assert_fail@plt+0x332a0>
   36b34:	cmp	r0, #0
   36b38:	bne	36c0c <__assert_fail@plt+0x24190>
   36b3c:	ldr	r0, [fp, #-184]	; 0xffffff48
   36b40:	ldr	r1, [sp, #76]	; 0x4c
   36b44:	cmp	r0, r1
   36b48:	beq	36b50 <__assert_fail@plt+0x240d4>
   36b4c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   36b50:	mov	r0, #16
   36b54:	mov	r9, #12
   36b58:	str	r0, [fp, #-188]	; 0xffffff44
   36b5c:	mov	r0, #0
   36b60:	str	r0, [fp, #-192]	; 0xffffff40
   36b64:	ldr	r0, [sp, #76]	; 0x4c
   36b68:	str	r0, [fp, #-184]	; 0xffffff48
   36b6c:	ldr	r0, [sp, #80]	; 0x50
   36b70:	cmp	r0, #0
   36b74:	beq	3797c <__assert_fail@plt+0x24f00>
   36b78:	ldr	r0, [sp, #80]	; 0x50
   36b7c:	ldr	r1, [r0]
   36b80:	ldr	r0, [r0, #8]
   36b84:	cmp	r1, #1
   36b88:	blt	37a84 <__assert_fail@plt+0x25008>
   36b8c:	ldr	r4, [sp, #80]	; 0x50
   36b90:	mov	r5, #0
   36b94:	mov	r6, #0
   36b98:	add	r0, r0, r5
   36b9c:	ldr	r0, [r0, #20]
   36ba0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   36ba4:	ldr	r0, [r4, #8]
   36ba8:	add	r0, r0, r5
   36bac:	ldr	r0, [r0, #8]
   36bb0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   36bb4:	ldr	r1, [r4]
   36bb8:	ldr	r0, [r4, #8]
   36bbc:	add	r6, r6, #1
   36bc0:	add	r5, r5, #24
   36bc4:	cmp	r6, r1
   36bc8:	blt	36b98 <__assert_fail@plt+0x2411c>
   36bcc:	b	37a84 <__assert_fail@plt+0x25008>
   36bd0:	ldr	r1, [r3, #8]
   36bd4:	cmp	r1, #0
   36bd8:	beq	36be8 <__assert_fail@plt+0x2416c>
   36bdc:	ldrsb	r1, [sl, #28]
   36be0:	cmp	r1, #0
   36be4:	blt	35048 <__assert_fail@plt+0x225cc>
   36be8:	mov	r1, #0
   36bec:	cmp	r6, #0
   36bf0:	str	r1, [sp, #76]	; 0x4c
   36bf4:	beq	377a0 <__assert_fail@plt+0x24d24>
   36bf8:	cmp	r0, #0
   36bfc:	mov	r6, #0
   36c00:	bne	379d0 <__assert_fail@plt+0x24f54>
   36c04:	b	3504c <__assert_fail@plt+0x225d0>
   36c08:	str	sl, [fp, #-192]	; 0xffffff40
   36c0c:	ldr	r5, [fp, #20]
   36c10:	ldr	r0, [fp, #-184]	; 0xffffff48
   36c14:	lsl	r2, sl, #3
   36c18:	str	r2, [sp, #56]	; 0x38
   36c1c:	mov	r1, r5
   36c20:	str	r0, [sp, #60]	; 0x3c
   36c24:	bl	124b8 <memcpy@plt>
   36c28:	ldr	r6, [r5]
   36c2c:	ldr	r0, [r5, #4]
   36c30:	mov	ip, #0
   36c34:	cmp	r6, r0
   36c38:	ble	36cc8 <__assert_fail@plt+0x2424c>
   36c3c:	mov	r0, ip
   36c40:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   36c44:	ldr	r0, [fp, #-184]	; 0xffffff48
   36c48:	ldr	r5, [sp, #76]	; 0x4c
   36c4c:	cmp	r0, r5
   36c50:	beq	36c58 <__assert_fail@plt+0x241dc>
   36c54:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   36c58:	ldr	r6, [sp, #80]	; 0x50
   36c5c:	mov	r0, #16
   36c60:	str	r0, [fp, #-188]	; 0xffffff44
   36c64:	mov	r0, #0
   36c68:	str	r0, [fp, #-192]	; 0xffffff40
   36c6c:	str	r5, [fp, #-184]	; 0xffffff48
   36c70:	cmp	r6, #0
   36c74:	beq	37858 <__assert_fail@plt+0x24ddc>
   36c78:	ldr	r1, [r6]
   36c7c:	ldr	r0, [r6, #8]
   36c80:	cmp	r1, #1
   36c84:	blt	37850 <__assert_fail@plt+0x24dd4>
   36c88:	mov	r4, #0
   36c8c:	mov	r5, #0
   36c90:	add	r0, r0, r4
   36c94:	ldr	r0, [r0, #20]
   36c98:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   36c9c:	ldr	r0, [r6, #8]
   36ca0:	add	r0, r0, r4
   36ca4:	ldr	r0, [r0, #8]
   36ca8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   36cac:	ldr	r1, [r6]
   36cb0:	ldr	r0, [r6, #8]
   36cb4:	add	r5, r5, #1
   36cb8:	add	r4, r4, #24
   36cbc:	cmp	r5, r1
   36cc0:	blt	36c90 <__assert_fail@plt+0x24214>
   36cc4:	b	37850 <__assert_fail@plt+0x24dd4>
   36cc8:	lsl	r0, sl, #4
   36ccc:	mov	lr, #1
   36cd0:	mov	r1, #0
   36cd4:	mov	ip, #0
   36cd8:	str	r0, [sp, #48]	; 0x30
   36cdc:	mov	r0, #0
   36ce0:	str	r0, [sp, #52]	; 0x34
   36ce4:	ldr	r0, [sp, #68]	; 0x44
   36ce8:	mov	r5, r1
   36cec:	ldr	r0, [r0]
   36cf0:	add	r1, r0, r7, lsl #3
   36cf4:	ldr	r3, [r1, #4]
   36cf8:	uxtb	r2, r3
   36cfc:	cmp	r2, #9
   36d00:	beq	36d30 <__assert_fail@plt+0x242b4>
   36d04:	cmp	r2, #8
   36d08:	bne	36da4 <__assert_fail@plt+0x24328>
   36d0c:	ldr	r0, [r0, r7, lsl #3]
   36d10:	add	r0, r0, #1
   36d14:	cmp	r0, sl
   36d18:	bge	36da4 <__assert_fail@plt+0x24328>
   36d1c:	ldr	r1, [fp, #20]
   36d20:	str	r6, [r1, r0, lsl #3]!
   36d24:	mvn	r0, #0
   36d28:	str	r0, [r1, #4]
   36d2c:	b	36da4 <__assert_fail@plt+0x24328>
   36d30:	ldr	r0, [r0, r7, lsl #3]
   36d34:	add	r0, r0, #1
   36d38:	cmp	r0, sl
   36d3c:	bge	36da4 <__assert_fail@plt+0x24328>
   36d40:	ldr	r1, [fp, #20]
   36d44:	ldr	r2, [r1, r0, lsl #3]
   36d48:	cmp	r2, r6
   36d4c:	bge	36d60 <__assert_fail@plt+0x242e4>
   36d50:	add	r0, r1, r0, lsl #3
   36d54:	str	r6, [r0, #4]
   36d58:	ldr	r0, [sp, #60]	; 0x3c
   36d5c:	b	36d80 <__assert_fail@plt+0x24304>
   36d60:	tst	r3, #524288	; 0x80000
   36d64:	beq	36d98 <__assert_fail@plt+0x2431c>
   36d68:	ldr	r1, [sp, #60]	; 0x3c
   36d6c:	ldr	r1, [r1, r0, lsl #3]
   36d70:	cmn	r1, #1
   36d74:	beq	36d98 <__assert_fail@plt+0x2431c>
   36d78:	ldr	r0, [fp, #20]
   36d7c:	ldr	r1, [sp, #60]	; 0x3c
   36d80:	ldr	r2, [sp, #56]	; 0x38
   36d84:	str	ip, [sp, #64]	; 0x40
   36d88:	bl	124b8 <memcpy@plt>
   36d8c:	ldr	ip, [sp, #64]	; 0x40
   36d90:	mov	lr, #1
   36d94:	b	36da4 <__assert_fail@plt+0x24328>
   36d98:	ldr	r1, [fp, #20]
   36d9c:	add	r0, r1, r0, lsl #3
   36da0:	str	r6, [r0, #4]
   36da4:	ldr	r0, [fp, #20]
   36da8:	ldr	r0, [r0, #4]
   36dac:	cmp	r6, r0
   36db0:	ldreq	r0, [sp, #200]	; 0xc8
   36db4:	cmpeq	r7, r0
   36db8:	beq	36e14 <__assert_fail@plt+0x24398>
   36dbc:	ldr	r0, [sp, #80]	; 0x50
   36dc0:	cmp	r0, #0
   36dc4:	beq	36e58 <__assert_fail@plt+0x243dc>
   36dc8:	mov	r2, r5
   36dcc:	cmp	r5, #1
   36dd0:	blt	36ef4 <__assert_fail@plt+0x24478>
   36dd4:	mov	r0, #0
   36dd8:	subs	r1, r2, #1
   36ddc:	str	r6, [sp, #72]	; 0x48
   36de0:	beq	36e04 <__assert_fail@plt+0x24388>
   36de4:	add	r2, r0, r1
   36de8:	lsr	r3, r2, #1
   36dec:	ldr	r6, [ip, r3, lsl #2]
   36df0:	cmp	r6, r7
   36df4:	movge	r1, r3
   36df8:	addlt	r0, lr, r2, lsr #1
   36dfc:	cmp	r0, r1
   36e00:	bcc	36de4 <__assert_fail@plt+0x24368>
   36e04:	ldr	r0, [ip, r0, lsl #2]
   36e08:	ldr	r6, [sp, #72]	; 0x48
   36e0c:	cmp	r0, r7
   36e10:	bne	36e58 <__assert_fail@plt+0x243dc>
   36e14:	ldr	r6, [sp, #80]	; 0x50
   36e18:	cmp	r6, #0
   36e1c:	beq	377cc <__assert_fail@plt+0x24d50>
   36e20:	ldr	r5, [sp, #76]	; 0x4c
   36e24:	mov	r0, #0
   36e28:	ldr	r2, [fp, #20]
   36e2c:	ldr	r1, [r2, r0, lsl #3]
   36e30:	cmp	r1, #0
   36e34:	blt	36e48 <__assert_fail@plt+0x243cc>
   36e38:	add	r1, r2, r0, lsl #3
   36e3c:	ldr	r1, [r1, #4]
   36e40:	cmn	r1, #1
   36e44:	beq	36e60 <__assert_fail@plt+0x243e4>
   36e48:	add	r0, r0, #1
   36e4c:	cmp	r0, sl
   36e50:	bcc	36e28 <__assert_fail@plt+0x243ac>
   36e54:	b	377d0 <__assert_fail@plt+0x24d54>
   36e58:	mov	r2, r5
   36e5c:	b	36ef4 <__assert_fail@plt+0x24478>
   36e60:	ldr	r0, [r6]
   36e64:	cmp	r0, #0
   36e68:	beq	377d0 <__assert_fail@plt+0x24d54>
   36e6c:	sub	r0, r0, #1
   36e70:	ldr	r7, [sp, #56]	; 0x38
   36e74:	str	ip, [sp, #64]	; 0x40
   36e78:	str	r0, [r6]
   36e7c:	add	r5, r0, r0, lsl #1
   36e80:	ldr	r4, [r6, #8]
   36e84:	mov	r2, r7
   36e88:	ldr	r0, [r4, r5, lsl #3]!
   36e8c:	str	r0, [sp, #72]	; 0x48
   36e90:	ldr	r1, [r4, #8]
   36e94:	ldr	r0, [fp, #20]
   36e98:	bl	124b8 <memcpy@plt>
   36e9c:	ldr	r0, [r4, #8]
   36ea0:	mov	r2, r7
   36ea4:	add	r1, r0, sl, lsl #3
   36ea8:	ldr	r0, [sp, #60]	; 0x3c
   36eac:	bl	124b8 <memcpy@plt>
   36eb0:	ldr	r0, [sp, #64]	; 0x40
   36eb4:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   36eb8:	ldr	r0, [r6, #8]
   36ebc:	add	r0, r0, r5, lsl #3
   36ec0:	ldr	r0, [r0, #8]
   36ec4:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   36ec8:	ldr	r0, [r6, #8]
   36ecc:	add	r0, r0, r5, lsl #3
   36ed0:	ldr	r7, [r0, #4]
   36ed4:	ldr	ip, [r0, #20]
   36ed8:	cmn	r7, #1
   36edc:	ble	377c4 <__assert_fail@plt+0x24d48>
   36ee0:	ldr	r1, [r0, #12]
   36ee4:	ldr	r2, [r0, #16]
   36ee8:	ldr	r6, [sp, #72]	; 0x48
   36eec:	mov	lr, #1
   36ef0:	str	r1, [sp, #52]	; 0x34
   36ef4:	ldr	r5, [sp, #188]	; 0xbc
   36ef8:	ldr	r0, [r5]
   36efc:	add	r1, r0, r7, lsl #3
   36f00:	ldr	r1, [r1, #4]
   36f04:	tst	r1, #8
   36f08:	bne	36fa8 <__assert_fail@plt+0x2452c>
   36f0c:	tst	r1, #1048576	; 0x100000
   36f10:	bne	37030 <__assert_fail@plt+0x245b4>
   36f14:	uxtb	r1, r1
   36f18:	cmp	r1, #4
   36f1c:	bne	37064 <__assert_fail@plt+0x245e8>
   36f20:	ldr	r0, [r0, r7, lsl #3]
   36f24:	mov	r4, #0
   36f28:	add	r0, r0, #1
   36f2c:	cmp	r0, sl
   36f30:	bge	36f4c <__assert_fail@plt+0x244d0>
   36f34:	ldr	r1, [fp, #20]
   36f38:	mov	r3, r2
   36f3c:	ldr	r2, [r1, r0, lsl #3]!
   36f40:	ldr	r1, [r1, #4]
   36f44:	sub	r4, r1, r2
   36f48:	mov	r2, r3
   36f4c:	ldr	r1, [sp, #80]	; 0x50
   36f50:	cmp	r1, #0
   36f54:	beq	373a0 <__assert_fail@plt+0x24924>
   36f58:	cmp	r0, sl
   36f5c:	bge	36fa0 <__assert_fail@plt+0x24524>
   36f60:	mov	r3, r2
   36f64:	ldr	r2, [fp, #20]
   36f68:	ldr	r1, [r2, r0, lsl #3]
   36f6c:	cmn	r1, #1
   36f70:	beq	36fa0 <__assert_fail@plt+0x24524>
   36f74:	add	r0, r2, r0, lsl #3
   36f78:	ldr	r0, [r0, #4]
   36f7c:	cmn	r0, #1
   36f80:	beq	36fa0 <__assert_fail@plt+0x24524>
   36f84:	cmp	r4, #0
   36f88:	mov	r2, r3
   36f8c:	beq	373c4 <__assert_fail@plt+0x24948>
   36f90:	ldr	r0, [sp, #132]	; 0x84
   36f94:	sub	r0, r0, r6
   36f98:	cmp	r0, r4
   36f9c:	bge	375a4 <__assert_fail@plt+0x24b28>
   36fa0:	ldr	r7, [sp, #80]	; 0x50
   36fa4:	b	3723c <__assert_fail@plt+0x247c0>
   36fa8:	ldr	r0, [sp, #204]	; 0xcc
   36fac:	ldr	r4, [r5, #20]
   36fb0:	cmp	r2, #1
   36fb4:	ldr	r0, [r0, r6, lsl #2]
   36fb8:	str	r0, [sp, #88]	; 0x58
   36fbc:	blt	37010 <__assert_fail@plt+0x24594>
   36fc0:	str	r4, [sp, #100]	; 0x64
   36fc4:	mov	r5, r6
   36fc8:	mov	r4, r2
   36fcc:	mov	r0, #0
   36fd0:	subs	r1, r2, #1
   36fd4:	beq	36ff8 <__assert_fail@plt+0x2457c>
   36fd8:	add	r2, r0, r1
   36fdc:	lsr	r3, r2, #1
   36fe0:	ldr	r6, [ip, r3, lsl #2]
   36fe4:	cmp	r6, r7
   36fe8:	movge	r1, r3
   36fec:	addlt	r0, lr, r2, lsr #1
   36ff0:	cmp	r0, r1
   36ff4:	bcc	36fd8 <__assert_fail@plt+0x2455c>
   36ff8:	ldr	r0, [ip, r0, lsl #2]
   36ffc:	mov	r2, r4
   37000:	ldr	r4, [sp, #100]	; 0x64
   37004:	mov	r6, r5
   37008:	cmp	r0, r7
   3700c:	beq	37144 <__assert_fail@plt+0x246c8>
   37010:	ldr	r0, [sp, #52]	; 0x34
   37014:	cmp	r0, #0
   37018:	beq	37120 <__assert_fail@plt+0x246a4>
   3701c:	cmp	r2, #0
   37020:	bne	375ec <__assert_fail@plt+0x24b70>
   37024:	str	r7, [ip]
   37028:	mov	r2, #1
   3702c:	b	37144 <__assert_fail@plt+0x246c8>
   37030:	mov	r0, r5
   37034:	mov	r1, r7
   37038:	add	r2, sp, #104	; 0x68
   3703c:	mov	r3, r6
   37040:	str	r5, [sp, #100]	; 0x64
   37044:	mov	r4, ip
   37048:	bl	414f0 <__assert_fail@plt+0x2ea74>
   3704c:	mov	lr, #1
   37050:	mov	ip, r4
   37054:	mov	r1, r0
   37058:	ldr	r5, [sp, #100]	; 0x64
   3705c:	cmp	r1, #0
   37060:	bne	37090 <__assert_fail@plt+0x24614>
   37064:	ldr	r0, [r5]
   37068:	mov	r2, r6
   3706c:	mov	r4, ip
   37070:	add	r1, r0, r7, lsl #3
   37074:	add	r0, sp, #104	; 0x68
   37078:	bl	417e4 <__assert_fail@plt+0x2ed68>
   3707c:	mov	lr, #1
   37080:	mov	ip, r4
   37084:	mov	r1, #1
   37088:	cmp	r0, #0
   3708c:	beq	37230 <__assert_fail@plt+0x247b4>
   37090:	ldr	r0, [r5, #12]
   37094:	add	r6, r1, r6
   37098:	ldr	r5, [r0, r7, lsl #2]
   3709c:	ldr	r7, [sp, #80]	; 0x50
   370a0:	cmp	r7, #0
   370a4:	beq	372dc <__assert_fail@plt+0x24860>
   370a8:	ldr	r0, [sp, #196]	; 0xc4
   370ac:	cmp	r6, r0
   370b0:	bgt	3723c <__assert_fail@plt+0x247c0>
   370b4:	ldr	r0, [sp, #204]	; 0xcc
   370b8:	ldr	r0, [r0, r6, lsl #2]
   370bc:	cmp	r0, #0
   370c0:	beq	3723c <__assert_fail@plt+0x247c0>
   370c4:	ldr	r1, [r0, #8]
   370c8:	cmp	r1, #1
   370cc:	blt	3723c <__assert_fail@plt+0x247c0>
   370d0:	ldr	r0, [r0, #12]
   370d4:	mov	r4, r6
   370d8:	subs	r1, r1, #1
   370dc:	mov	r2, #0
   370e0:	beq	37108 <__assert_fail@plt+0x2468c>
   370e4:	mov	r2, #0
   370e8:	add	r3, r2, r1
   370ec:	lsr	r7, r3, #1
   370f0:	ldr	r6, [r0, r7, lsl #2]
   370f4:	cmp	r6, r5
   370f8:	movge	r1, r7
   370fc:	addlt	r2, lr, r3, lsr #1
   37100:	cmp	r2, r1
   37104:	bcc	370e8 <__assert_fail@plt+0x2466c>
   37108:	ldr	r0, [r0, r2, lsl #2]
   3710c:	mov	r6, r4
   37110:	mov	r1, #0
   37114:	cmp	r0, r5
   37118:	beq	374bc <__assert_fail@plt+0x24a40>
   3711c:	b	37230 <__assert_fail@plt+0x247b4>
   37120:	mov	r0, #4
   37124:	bl	3233c <__assert_fail@plt+0x1f8c0>
   37128:	cmp	r0, #0
   3712c:	beq	37b2c <__assert_fail@plt+0x250b0>
   37130:	mov	ip, r0
   37134:	str	r7, [r0]
   37138:	mov	r0, #1
   3713c:	mov	r2, #1
   37140:	str	r0, [sp, #52]	; 0x34
   37144:	add	r0, r7, r7, lsl #1
   37148:	add	r1, r4, r0, lsl #2
   3714c:	ldr	lr, [r1, #4]
   37150:	cmp	lr, #1
   37154:	blt	37230 <__assert_fail@plt+0x247b4>
   37158:	ldr	r0, [r1, #8]
   3715c:	str	r2, [sp, #44]	; 0x2c
   37160:	str	r6, [sp, #72]	; 0x48
   37164:	mov	r6, #0
   37168:	mvn	r5, #0
   3716c:	str	ip, [sp, #64]	; 0x40
   37170:	str	r0, [sp, #84]	; 0x54
   37174:	ldr	r0, [sp, #88]	; 0x58
   37178:	ldr	r2, [r0, #8]
   3717c:	sub	r1, r2, #1
   37180:	cmp	r2, #1
   37184:	blt	37204 <__assert_fail@plt+0x24788>
   37188:	ldr	r0, [sp, #84]	; 0x54
   3718c:	str	r5, [sp, #100]	; 0x64
   37190:	mov	r5, #0
   37194:	cmp	r1, #0
   37198:	ldr	r7, [r0, r6, lsl #2]
   3719c:	ldr	r0, [sp, #88]	; 0x58
   371a0:	ldr	r4, [r0, #12]
   371a4:	beq	371d0 <__assert_fail@plt+0x24754>
   371a8:	mov	r3, r1
   371ac:	mov	ip, #1
   371b0:	add	r0, r5, r3
   371b4:	lsr	r8, r0, #1
   371b8:	ldr	sl, [r4, r8, lsl #2]
   371bc:	cmp	sl, r7
   371c0:	movge	r3, r8
   371c4:	addlt	r5, ip, r0, lsr #1
   371c8:	cmp	r5, r3
   371cc:	bcc	371b0 <__assert_fail@plt+0x24734>
   371d0:	ldr	r0, [r4, r5, lsl #2]
   371d4:	cmp	r0, r7
   371d8:	bne	371f8 <__assert_fail@plt+0x2477c>
   371dc:	ldr	r4, [sp, #100]	; 0x64
   371e0:	ldr	r8, [sp, #96]	; 0x60
   371e4:	ldr	sl, [sp, #92]	; 0x5c
   371e8:	cmn	r4, #1
   371ec:	bne	372ec <__assert_fail@plt+0x24870>
   371f0:	mov	r5, r7
   371f4:	b	37204 <__assert_fail@plt+0x24788>
   371f8:	ldr	r8, [sp, #96]	; 0x60
   371fc:	ldr	sl, [sp, #92]	; 0x5c
   37200:	ldr	r5, [sp, #100]	; 0x64
   37204:	add	r6, r6, #1
   37208:	cmp	r6, lr
   3720c:	blt	37180 <__assert_fail@plt+0x24704>
   37210:	ldr	ip, [sp, #64]	; 0x40
   37214:	ldr	r6, [sp, #72]	; 0x48
   37218:	ldr	r1, [sp, #44]	; 0x2c
   3721c:	mov	lr, #1
   37220:	cmn	r5, #1
   37224:	bgt	374c4 <__assert_fail@plt+0x24a48>
   37228:	cmn	r5, #2
   3722c:	beq	37a90 <__assert_fail@plt+0x25014>
   37230:	ldr	r7, [sp, #80]	; 0x50
   37234:	cmp	r7, #0
   37238:	beq	379f4 <__assert_fail@plt+0x24f78>
   3723c:	ldr	r0, [r7]
   37240:	mov	r4, #0
   37244:	cmp	r0, #0
   37248:	beq	379f8 <__assert_fail@plt+0x24f7c>
   3724c:	sub	r0, r0, #1
   37250:	ldr	r5, [sp, #56]	; 0x38
   37254:	str	ip, [sp, #64]	; 0x40
   37258:	str	r0, [r7]
   3725c:	add	r6, r0, r0, lsl #1
   37260:	ldr	r4, [r7, #8]
   37264:	mov	r2, r5
   37268:	ldr	r0, [r4, r6, lsl #3]!
   3726c:	str	r0, [sp, #72]	; 0x48
   37270:	ldr	r1, [r4, #8]
   37274:	ldr	r0, [fp, #20]
   37278:	bl	124b8 <memcpy@plt>
   3727c:	ldr	r0, [r4, #8]
   37280:	mov	r2, r5
   37284:	add	r1, r0, sl, lsl #3
   37288:	ldr	r0, [sp, #60]	; 0x3c
   3728c:	bl	124b8 <memcpy@plt>
   37290:	ldr	r0, [sp, #64]	; 0x40
   37294:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   37298:	ldr	r0, [r7, #8]
   3729c:	add	r0, r0, r6, lsl #3
   372a0:	ldr	r0, [r0, #8]
   372a4:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   372a8:	ldr	r0, [r7, #8]
   372ac:	add	r0, r0, r6, lsl #3
   372b0:	ldr	r7, [r0, #4]
   372b4:	ldr	ip, [r0, #20]
   372b8:	cmn	r7, #1
   372bc:	ble	377b0 <__assert_fail@plt+0x24d34>
   372c0:	ldr	r1, [r0, #12]
   372c4:	ldr	r4, [sp, #32]
   372c8:	ldr	r6, [sp, #72]	; 0x48
   372cc:	mov	lr, #1
   372d0:	str	r1, [sp, #52]	; 0x34
   372d4:	ldr	r1, [r0, #16]
   372d8:	b	374cc <__assert_fail@plt+0x24a50>
   372dc:	mov	r1, #0
   372e0:	cmn	r5, #1
   372e4:	bgt	374c4 <__assert_fail@plt+0x24a48>
   372e8:	b	37228 <__assert_fail@plt+0x247ac>
   372ec:	ldr	r1, [sp, #44]	; 0x2c
   372f0:	ldr	ip, [sp, #64]	; 0x40
   372f4:	mov	lr, #1
   372f8:	cmp	r1, #1
   372fc:	blt	37350 <__assert_fail@plt+0x248d4>
   37300:	mov	r0, #0
   37304:	subs	r1, r1, #1
   37308:	beq	3732c <__assert_fail@plt+0x248b0>
   3730c:	add	r2, r0, r1
   37310:	lsr	r3, r2, #1
   37314:	ldr	r6, [ip, r3, lsl #2]
   37318:	cmp	r6, r4
   3731c:	movge	r1, r3
   37320:	addlt	r0, lr, r2, lsr #1
   37324:	cmp	r0, r1
   37328:	bcc	3730c <__assert_fail@plt+0x24890>
   3732c:	ldr	r0, [ip, r0, lsl #2]
   37330:	ldr	r1, [sp, #44]	; 0x2c
   37334:	cmp	r0, r4
   37338:	bne	37350 <__assert_fail@plt+0x248d4>
   3733c:	ldr	r6, [sp, #72]	; 0x48
   37340:	mov	r5, r7
   37344:	cmn	r5, #1
   37348:	bgt	374c4 <__assert_fail@plt+0x24a48>
   3734c:	b	37228 <__assert_fail@plt+0x247ac>
   37350:	ldr	r5, [sp, #80]	; 0x50
   37354:	cmp	r5, #0
   37358:	beq	374b4 <__assert_fail@plt+0x24a38>
   3735c:	ldr	r6, [r5]
   37360:	ldr	r0, [r5, #4]
   37364:	add	r1, r6, #1
   37368:	cmp	r1, r0
   3736c:	str	r1, [r5]
   37370:	bne	373e8 <__assert_fail@plt+0x2496c>
   37374:	ldr	r0, [r5, #8]
   37378:	add	r1, r1, r1, lsl #1
   3737c:	lsl	r1, r1, #4
   37380:	bl	33040 <__assert_fail@plt+0x205c4>
   37384:	cmp	r0, #0
   37388:	beq	37a8c <__assert_fail@plt+0x25010>
   3738c:	str	r0, [r5, #8]
   37390:	ldr	r1, [r5, #4]
   37394:	lsl	r1, r1, #1
   37398:	str	r1, [r5, #4]
   3739c:	b	373ec <__assert_fail@plt+0x24970>
   373a0:	cmp	r4, #0
   373a4:	beq	373c4 <__assert_fail@plt+0x24948>
   373a8:	ldr	r0, [r5, #12]
   373ac:	add	r6, r4, r6
   373b0:	mov	r1, #0
   373b4:	ldr	r5, [r0, r7, lsl #2]
   373b8:	cmn	r5, #1
   373bc:	bgt	374c4 <__assert_fail@plt+0x24a48>
   373c0:	b	37228 <__assert_fail@plt+0x247ac>
   373c4:	ldr	r0, [sp, #52]	; 0x34
   373c8:	str	r5, [sp, #100]	; 0x64
   373cc:	cmp	r0, #0
   373d0:	beq	374e0 <__assert_fail@plt+0x24a64>
   373d4:	cmp	r2, #0
   373d8:	bne	376c4 <__assert_fail@plt+0x24c48>
   373dc:	str	r7, [ip]
   373e0:	mov	r5, #1
   373e4:	b	37508 <__assert_fail@plt+0x24a8c>
   373e8:	ldr	r0, [r5, #8]
   373ec:	ldr	r1, [sp, #72]	; 0x48
   373f0:	add	r6, r6, r6, lsl #1
   373f4:	str	r1, [r0, r6, lsl #3]!
   373f8:	str	r7, [r0, #4]
   373fc:	ldr	r0, [sp, #48]	; 0x30
   37400:	bl	3233c <__assert_fail@plt+0x1f8c0>
   37404:	ldr	r1, [r5, #8]
   37408:	cmp	r0, #0
   3740c:	add	r4, r1, r6, lsl #3
   37410:	str	r0, [r4, #8]!
   37414:	beq	37a8c <__assert_fail@plt+0x25010>
   37418:	ldr	r7, [sp, #56]	; 0x38
   3741c:	ldr	r1, [fp, #20]
   37420:	mov	r2, r7
   37424:	bl	124b8 <memcpy@plt>
   37428:	ldr	r0, [r4]
   3742c:	ldr	r1, [sp, #60]	; 0x3c
   37430:	mov	r2, r7
   37434:	add	r0, r0, sl, lsl #3
   37438:	bl	124b8 <memcpy@plt>
   3743c:	ldr	r0, [r5, #8]
   37440:	ldr	r1, [sp, #44]	; 0x2c
   37444:	add	r6, r0, r6, lsl #3
   37448:	cmp	r1, #1
   3744c:	mov	r5, r6
   37450:	str	r1, [r5, #16]!
   37454:	sub	r4, r5, #4
   37458:	blt	3749c <__assert_fail@plt+0x24a20>
   3745c:	lsl	r7, r1, #2
   37460:	str	r1, [r4]
   37464:	mov	r0, r7
   37468:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3746c:	cmp	r0, #0
   37470:	str	r0, [r6, #20]
   37474:	beq	37b34 <__assert_fail@plt+0x250b8>
   37478:	ldr	r4, [sp, #64]	; 0x40
   3747c:	mov	r2, r7
   37480:	mov	r1, r4
   37484:	bl	124b8 <memcpy@plt>
   37488:	ldr	r6, [sp, #72]	; 0x48
   3748c:	ldr	r1, [sp, #44]	; 0x2c
   37490:	ldr	r5, [sp, #100]	; 0x64
   37494:	mov	ip, r4
   37498:	b	3721c <__assert_fail@plt+0x247a0>
   3749c:	ldr	ip, [sp, #64]	; 0x40
   374a0:	mov	r0, #0
   374a4:	mov	lr, #1
   374a8:	str	r0, [r4]
   374ac:	str	r0, [r4, #4]
   374b0:	str	r0, [r4, #8]
   374b4:	ldr	r6, [sp, #72]	; 0x48
   374b8:	ldr	r5, [sp, #100]	; 0x64
   374bc:	cmn	r5, #1
   374c0:	ble	37228 <__assert_fail@plt+0x247ac>
   374c4:	ldr	r4, [sp, #32]
   374c8:	mov	r7, r5
   374cc:	ldr	r0, [fp, #20]
   374d0:	ldr	r0, [r0, #4]
   374d4:	cmp	r6, r0
   374d8:	ble	36ce4 <__assert_fail@plt+0x24268>
   374dc:	b	36c3c <__assert_fail@plt+0x241c0>
   374e0:	mov	r0, #4
   374e4:	bl	3233c <__assert_fail@plt+0x1f8c0>
   374e8:	cmp	r0, #0
   374ec:	beq	37b2c <__assert_fail@plt+0x250b0>
   374f0:	mov	ip, r0
   374f4:	str	r7, [r0]
   374f8:	mov	r0, #1
   374fc:	mov	r5, #1
   37500:	mov	lr, #1
   37504:	str	r0, [sp, #52]	; 0x34
   37508:	ldr	r0, [sp, #204]	; 0xcc
   3750c:	ldr	r0, [r0, r6, lsl #2]
   37510:	ldr	r1, [r0, #8]
   37514:	cmp	r1, #1
   37518:	blt	3759c <__assert_fail@plt+0x24b20>
   3751c:	ldr	r2, [sp, #100]	; 0x64
   37520:	add	r3, r7, r7, lsl #1
   37524:	str	r5, [sp, #44]	; 0x2c
   37528:	ldr	r0, [r0, #12]
   3752c:	str	r4, [sp, #88]	; 0x58
   37530:	str	r6, [sp, #72]	; 0x48
   37534:	ldr	r2, [r2, #20]
   37538:	add	r2, r2, r3, lsl #2
   3753c:	ldr	r2, [r2, #8]
   37540:	ldr	r5, [r2]
   37544:	subs	r2, r1, #1
   37548:	mov	r1, #0
   3754c:	beq	37578 <__assert_fail@plt+0x24afc>
   37550:	add	r3, r1, r2
   37554:	mov	r4, r5
   37558:	lsr	r6, r3, #1
   3755c:	ldr	r5, [r0, r6, lsl #2]
   37560:	cmp	r5, r4
   37564:	mov	r5, r4
   37568:	movge	r2, r6
   3756c:	addlt	r1, lr, r3, lsr #1
   37570:	cmp	r1, r2
   37574:	bcc	37550 <__assert_fail@plt+0x24ad4>
   37578:	ldr	r0, [r0, r1, lsl #2]
   3757c:	ldr	r6, [sp, #72]	; 0x48
   37580:	ldr	r1, [sp, #88]	; 0x58
   37584:	cmp	r0, r5
   37588:	bne	37058 <__assert_fail@plt+0x245dc>
   3758c:	ldr	r1, [sp, #44]	; 0x2c
   37590:	cmn	r5, #1
   37594:	bgt	374c4 <__assert_fail@plt+0x24a48>
   37598:	b	37228 <__assert_fail@plt+0x247ac>
   3759c:	ldr	r5, [sp, #100]	; 0x64
   375a0:	b	37064 <__assert_fail@plt+0x245e8>
   375a4:	ldr	r2, [sp, #108]	; 0x6c
   375a8:	str	ip, [sp, #64]	; 0x40
   375ac:	add	r0, r2, r1
   375b0:	add	r1, r2, r6
   375b4:	mov	r2, r4
   375b8:	bl	12518 <memcmp@plt>
   375bc:	cmp	r0, #0
   375c0:	beq	375d0 <__assert_fail@plt+0x24b54>
   375c4:	ldr	r7, [sp, #80]	; 0x50
   375c8:	ldr	ip, [sp, #64]	; 0x40
   375cc:	b	3723c <__assert_fail@plt+0x247c0>
   375d0:	ldr	r0, [r5, #12]
   375d4:	ldr	ip, [sp, #64]	; 0x40
   375d8:	add	r6, r4, r6
   375dc:	mov	lr, #1
   375e0:	ldr	r5, [r0, r7, lsl #2]
   375e4:	ldr	r7, [sp, #80]	; 0x50
   375e8:	b	370a8 <__assert_fail@plt+0x2462c>
   375ec:	ldr	r0, [sp, #52]	; 0x34
   375f0:	mov	r8, r2
   375f4:	str	r4, [sp, #100]	; 0x64
   375f8:	cmp	r0, r2
   375fc:	bne	37630 <__assert_fail@plt+0x24bb4>
   37600:	lsl	r1, r8, #3
   37604:	mov	r0, ip
   37608:	mov	r4, r8
   3760c:	mov	r5, ip
   37610:	bl	33040 <__assert_fail@plt+0x205c4>
   37614:	mov	ip, r5
   37618:	cmp	r0, #0
   3761c:	beq	37a90 <__assert_fail@plt+0x25014>
   37620:	mov	r1, r8
   37624:	mov	ip, r0
   37628:	lsl	r1, r8, #1
   3762c:	str	r1, [sp, #52]	; 0x34
   37630:	ldr	r0, [ip]
   37634:	mov	r2, r8
   37638:	cmp	r0, r7
   3763c:	ble	37678 <__assert_fail@plt+0x24bfc>
   37640:	cmp	r8, #1
   37644:	blt	376a8 <__assert_fail@plt+0x24c2c>
   37648:	mov	r0, r8
   3764c:	add	r1, ip, r8, lsl #2
   37650:	add	r0, r8, #1
   37654:	mov	r2, r1
   37658:	ldr	r3, [r2, #-4]!
   3765c:	sub	r0, r0, #1
   37660:	cmp	r0, #1
   37664:	str	r3, [r1]
   37668:	mov	r1, r2
   3766c:	bgt	37658 <__assert_fail@plt+0x24bdc>
   37670:	sub	r2, r0, #1
   37674:	b	376a8 <__assert_fail@plt+0x24c2c>
   37678:	add	r0, ip, r8, lsl #2
   3767c:	ldr	r1, [r0, #-4]
   37680:	cmp	r1, r7
   37684:	ble	376a8 <__assert_fail@plt+0x24c2c>
   37688:	sub	r2, r8, #2
   3768c:	str	r1, [r0]
   37690:	sub	r2, r2, #1
   37694:	ldr	r1, [r0, #-8]
   37698:	sub	r0, r0, #4
   3769c:	cmp	r1, r7
   376a0:	bgt	3768c <__assert_fail@plt+0x24c10>
   376a4:	add	r2, r2, #2
   376a8:	str	r7, [ip, r2, lsl #2]
   376ac:	mov	r2, r8
   376b0:	ldr	sl, [sp, #92]	; 0x5c
   376b4:	ldr	r4, [sp, #100]	; 0x64
   376b8:	add	r2, r8, #1
   376bc:	ldr	r8, [sp, #96]	; 0x60
   376c0:	b	37144 <__assert_fail@plt+0x246c8>
   376c4:	ldr	r0, [sp, #52]	; 0x34
   376c8:	mov	r8, r2
   376cc:	str	r4, [sp, #88]	; 0x58
   376d0:	cmp	r0, r2
   376d4:	bne	37708 <__assert_fail@plt+0x24c8c>
   376d8:	lsl	r1, r8, #3
   376dc:	mov	r0, ip
   376e0:	mov	r5, r8
   376e4:	mov	r4, ip
   376e8:	bl	33040 <__assert_fail@plt+0x205c4>
   376ec:	mov	ip, r4
   376f0:	cmp	r0, #0
   376f4:	beq	37a90 <__assert_fail@plt+0x25014>
   376f8:	mov	r1, r8
   376fc:	mov	ip, r0
   37700:	lsl	r1, r8, #1
   37704:	str	r1, [sp, #52]	; 0x34
   37708:	ldr	r0, [ip]
   3770c:	mov	r2, r8
   37710:	cmp	r0, r7
   37714:	ble	37750 <__assert_fail@plt+0x24cd4>
   37718:	cmp	r8, #1
   3771c:	blt	37780 <__assert_fail@plt+0x24d04>
   37720:	mov	r0, r8
   37724:	add	r1, ip, r8, lsl #2
   37728:	add	r0, r8, #1
   3772c:	mov	r2, r1
   37730:	ldr	r3, [r2, #-4]!
   37734:	sub	r0, r0, #1
   37738:	cmp	r0, #1
   3773c:	str	r3, [r1]
   37740:	mov	r1, r2
   37744:	bgt	37730 <__assert_fail@plt+0x24cb4>
   37748:	sub	r2, r0, #1
   3774c:	b	37780 <__assert_fail@plt+0x24d04>
   37750:	add	r0, ip, r8, lsl #2
   37754:	ldr	r1, [r0, #-4]
   37758:	cmp	r1, r7
   3775c:	ble	37780 <__assert_fail@plt+0x24d04>
   37760:	sub	r2, r8, #2
   37764:	str	r1, [r0]
   37768:	sub	r2, r2, #1
   3776c:	ldr	r1, [r0, #-8]
   37770:	sub	r0, r0, #4
   37774:	cmp	r1, r7
   37778:	bgt	37764 <__assert_fail@plt+0x24ce8>
   3777c:	add	r2, r2, #2
   37780:	mov	r5, r8
   37784:	ldr	sl, [sp, #92]	; 0x5c
   37788:	ldr	r4, [sp, #88]	; 0x58
   3778c:	mov	lr, #1
   37790:	str	r7, [ip, r2, lsl #2]
   37794:	add	r5, r8, #1
   37798:	ldr	r8, [sp, #96]	; 0x60
   3779c:	b	37508 <__assert_fail@plt+0x24a8c>
   377a0:	mov	r6, #0
   377a4:	b	3504c <__assert_fail@plt+0x225d0>
   377a8:	mov	r9, #12
   377ac:	b	3797c <__assert_fail@plt+0x24f00>
   377b0:	ldr	r7, [sp, #80]	; 0x50
   377b4:	mov	r4, #0
   377b8:	b	379f8 <__assert_fail@plt+0x24f7c>
   377bc:	mov	r9, r0
   377c0:	b	3797c <__assert_fail@plt+0x24f00>
   377c4:	ldr	r4, [sp, #32]
   377c8:	ldr	r6, [sp, #80]	; 0x50
   377cc:	ldr	r5, [sp, #76]	; 0x4c
   377d0:	mov	r0, ip
   377d4:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   377d8:	ldr	r0, [fp, #-184]	; 0xffffff48
   377dc:	cmp	r0, r5
   377e0:	beq	377e8 <__assert_fail@plt+0x24d6c>
   377e4:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   377e8:	mov	r0, #16
   377ec:	cmp	r6, #0
   377f0:	str	r0, [fp, #-188]	; 0xffffff44
   377f4:	mov	r0, #0
   377f8:	str	r0, [fp, #-192]	; 0xffffff40
   377fc:	str	r5, [fp, #-184]	; 0xffffff48
   37800:	beq	37858 <__assert_fail@plt+0x24ddc>
   37804:	ldr	r1, [r6]
   37808:	ldr	r0, [r6, #8]
   3780c:	cmp	r1, #1
   37810:	blt	37850 <__assert_fail@plt+0x24dd4>
   37814:	mov	r4, #0
   37818:	mov	r5, #0
   3781c:	add	r0, r0, r4
   37820:	ldr	r0, [r0, #20]
   37824:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   37828:	ldr	r0, [r6, #8]
   3782c:	add	r0, r0, r4
   37830:	ldr	r0, [r0, #8]
   37834:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   37838:	ldr	r1, [r6]
   3783c:	ldr	r0, [r6, #8]
   37840:	add	r5, r5, #1
   37844:	add	r4, r4, #24
   37848:	cmp	r5, r1
   3784c:	blt	3781c <__assert_fail@plt+0x24da0>
   37850:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   37854:	ldr	r4, [sp, #32]
   37858:	ldr	r0, [fp, #20]
   3785c:	ldrb	r1, [sp, #180]	; 0xb4
   37860:	ldr	r2, [fp, #16]
   37864:	add	r0, r0, #4
   37868:	b	378b0 <__assert_fail@plt+0x24e34>
   3786c:	ldr	r7, [sp, #132]	; 0x84
   37870:	ldr	r6, [sp, #24]
   37874:	ldr	ip, [sp, #116]	; 0x74
   37878:	cmp	r3, r7
   3787c:	mov	r5, r6
   37880:	addne	r5, ip, r3, lsl #2
   37884:	ldr	r3, [r5]
   37888:	str	r3, [r0, #-4]
   3788c:	ldr	r5, [r0]
   37890:	cmp	r5, r7
   37894:	addne	r6, ip, r5, lsl #2
   37898:	ldr	r7, [r6]
   3789c:	ldr	r6, [fp, #20]
   378a0:	add	r6, r6, r9, lsl #3
   378a4:	str	r7, [r0]
   378a8:	add	r6, r6, #4
   378ac:	b	378cc <__assert_fail@plt+0x24e50>
   378b0:	ldr	r3, [r0, #-4]
   378b4:	cmn	r3, #1
   378b8:	beq	378e0 <__assert_fail@plt+0x24e64>
   378bc:	cmp	r1, #0
   378c0:	bne	3786c <__assert_fail@plt+0x24df0>
   378c4:	ldr	r7, [r0]
   378c8:	mov	r6, r0
   378cc:	ldr	r5, [fp, #-200]	; 0xffffff38
   378d0:	add	r3, r3, r5
   378d4:	str	r3, [r0, #-4]
   378d8:	add	r3, r7, r5
   378dc:	str	r3, [r6]
   378e0:	sub	r2, r2, #1
   378e4:	add	r0, r0, #8
   378e8:	add	r9, r9, #1
   378ec:	cmp	r4, r2
   378f0:	bne	378b0 <__assert_fail@plt+0x24e34>
   378f4:	cmp	r4, #1
   378f8:	blt	37910 <__assert_fail@plt+0x24e94>
   378fc:	ldr	r0, [fp, #20]
   37900:	lsl	r2, r4, #3
   37904:	mov	r1, #255	; 0xff
   37908:	add	r0, r0, sl, lsl #3
   3790c:	bl	12800 <memset@plt>
   37910:	ldr	r0, [r8, #132]	; 0x84
   37914:	mov	r9, #0
   37918:	cmp	r0, #0
   3791c:	beq	3797c <__assert_fail@plt+0x24f00>
   37920:	cmp	sl, #2
   37924:	bcc	3797c <__assert_fail@plt+0x24f00>
   37928:	ldr	r1, [fp, #16]
   3792c:	ldr	r2, [sp, #32]
   37930:	ldr	r6, [fp, #20]
   37934:	sub	r1, r1, #1
   37938:	sub	r1, r1, r2
   3793c:	mov	r2, #0
   37940:	ldr	r3, [r0, r2, lsl #2]
   37944:	cmp	r2, r3
   37948:	beq	3796c <__assert_fail@plt+0x24ef0>
   3794c:	add	r3, r6, r3, lsl #3
   37950:	add	r7, r6, r2, lsl #3
   37954:	ldr	r3, [r3, #8]
   37958:	str	r3, [r7, #8]
   3795c:	ldr	r3, [r0, r2, lsl #2]
   37960:	add	r3, r6, r3, lsl #3
   37964:	ldr	r3, [r3, #12]
   37968:	str	r3, [r7, #12]
   3796c:	add	r2, r2, #1
   37970:	cmp	r1, r2
   37974:	bne	37940 <__assert_fail@plt+0x24ec4>
   37978:	mov	r9, #0
   3797c:	ldr	r0, [sp, #204]	; 0xcc
   37980:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   37984:	ldr	r0, [sp, #96]	; 0x60
   37988:	ldr	r0, [r0, #76]	; 0x4c
   3798c:	cmp	r0, #0
   37990:	beq	379ac <__assert_fail@plt+0x24f30>
   37994:	add	r0, sp, #104	; 0x68
   37998:	bl	3ed28 <__assert_fail@plt+0x2c2ac>
   3799c:	ldr	r0, [sp, #236]	; 0xec
   379a0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   379a4:	ldr	r0, [sp, #220]	; 0xdc
   379a8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   379ac:	ldr	r0, [sp, #112]	; 0x70
   379b0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   379b4:	ldr	r0, [sp, #116]	; 0x74
   379b8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   379bc:	ldrb	r0, [sp, #179]	; 0xb3
   379c0:	cmp	r0, #0
   379c4:	beq	379d0 <__assert_fail@plt+0x24f54>
   379c8:	ldr	r0, [sp, #108]	; 0x6c
   379cc:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   379d0:	mov	r0, r9
   379d4:	sub	sp, fp, #28
   379d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   379dc:	mov	r0, r8
   379e0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   379e4:	mov	r0, #0
   379e8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   379ec:	mov	r9, #12
   379f0:	b	3797c <__assert_fail@plt+0x24f00>
   379f4:	mov	r4, #1
   379f8:	mov	r0, ip
   379fc:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   37a00:	ldr	r0, [fp, #-184]	; 0xffffff48
   37a04:	ldr	r1, [sp, #76]	; 0x4c
   37a08:	cmp	r0, r1
   37a0c:	beq	37a14 <__assert_fail@plt+0x24f98>
   37a10:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   37a14:	mov	r0, #16
   37a18:	mov	r9, #1
   37a1c:	cmp	r4, #0
   37a20:	str	r0, [fp, #-188]	; 0xffffff44
   37a24:	mov	r0, #0
   37a28:	str	r0, [fp, #-192]	; 0xffffff40
   37a2c:	ldr	r0, [sp, #76]	; 0x4c
   37a30:	str	r0, [fp, #-184]	; 0xffffff48
   37a34:	bne	3797c <__assert_fail@plt+0x24f00>
   37a38:	ldr	r1, [r7]
   37a3c:	ldr	r0, [r7, #8]
   37a40:	cmp	r1, #1
   37a44:	blt	37a84 <__assert_fail@plt+0x25008>
   37a48:	mov	r5, #0
   37a4c:	mov	r6, #0
   37a50:	add	r0, r0, r5
   37a54:	ldr	r0, [r0, #20]
   37a58:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   37a5c:	ldr	r0, [r7, #8]
   37a60:	add	r0, r0, r5
   37a64:	ldr	r0, [r0, #8]
   37a68:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   37a6c:	ldr	r1, [r7]
   37a70:	ldr	r0, [r7, #8]
   37a74:	add	r6, r6, #1
   37a78:	add	r5, r5, #24
   37a7c:	cmp	r6, r1
   37a80:	blt	37a50 <__assert_fail@plt+0x24fd4>
   37a84:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   37a88:	b	3797c <__assert_fail@plt+0x24f00>
   37a8c:	ldr	ip, [sp, #64]	; 0x40
   37a90:	mov	r0, ip
   37a94:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   37a98:	ldr	r0, [fp, #-184]	; 0xffffff48
   37a9c:	ldr	r4, [sp, #76]	; 0x4c
   37aa0:	cmp	r0, r4
   37aa4:	beq	37aac <__assert_fail@plt+0x25030>
   37aa8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   37aac:	mov	r0, #16
   37ab0:	mov	r9, #12
   37ab4:	str	r0, [fp, #-188]	; 0xffffff44
   37ab8:	mov	r0, #0
   37abc:	str	r0, [fp, #-192]	; 0xffffff40
   37ac0:	ldr	r0, [sp, #80]	; 0x50
   37ac4:	str	r4, [fp, #-184]	; 0xffffff48
   37ac8:	cmp	r0, #0
   37acc:	beq	3797c <__assert_fail@plt+0x24f00>
   37ad0:	ldr	r1, [r0]
   37ad4:	ldr	r0, [r0, #8]
   37ad8:	cmp	r1, #1
   37adc:	blt	37a84 <__assert_fail@plt+0x25008>
   37ae0:	ldr	r4, [sp, #80]	; 0x50
   37ae4:	mov	r5, #0
   37ae8:	mov	r6, #0
   37aec:	add	r0, r0, r5
   37af0:	ldr	r0, [r0, #20]
   37af4:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   37af8:	ldr	r0, [r4, #8]
   37afc:	add	r0, r0, r5
   37b00:	ldr	r0, [r0, #8]
   37b04:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   37b08:	ldr	r1, [r4]
   37b0c:	ldr	r0, [r4, #8]
   37b10:	add	r6, r6, #1
   37b14:	add	r5, r5, #24
   37b18:	cmp	r6, r1
   37b1c:	blt	37aec <__assert_fail@plt+0x25070>
   37b20:	b	37a84 <__assert_fail@plt+0x25008>
   37b24:	mov	r9, #1
   37b28:	b	3797c <__assert_fail@plt+0x24f00>
   37b2c:	mov	ip, #0
   37b30:	b	37a90 <__assert_fail@plt+0x25014>
   37b34:	ldr	ip, [sp, #64]	; 0x40
   37b38:	mov	r0, #0
   37b3c:	str	r0, [r5]
   37b40:	str	r0, [r4]
   37b44:	b	37a90 <__assert_fail@plt+0x25014>
   37b48:	push	{fp, lr}
   37b4c:	mov	fp, sp
   37b50:	sub	sp, sp, #16
   37b54:	mov	ip, #1
   37b58:	str	r2, [sp, #4]
   37b5c:	str	ip, [sp, #12]
   37b60:	mov	ip, #0
   37b64:	str	ip, [sp]
   37b68:	ldr	ip, [fp, #8]
   37b6c:	str	ip, [sp, #8]
   37b70:	bl	37b7c <__assert_fail@plt+0x25100>
   37b74:	mov	sp, fp
   37b78:	pop	{fp, pc}
   37b7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37b80:	add	fp, sp, #28
   37b84:	sub	sp, sp, #44	; 0x2c
   37b88:	mvn	r6, #0
   37b8c:	cmp	r3, #0
   37b90:	blt	37cf8 <__assert_fail@plt+0x2527c>
   37b94:	mov	r5, r3
   37b98:	mov	r9, r2
   37b9c:	cmp	r3, r2
   37ba0:	bgt	37cf8 <__assert_fail@plt+0x2527c>
   37ba4:	mov	r7, r0
   37ba8:	ldr	r0, [fp, #8]
   37bac:	mov	r8, r9
   37bb0:	mov	sl, r1
   37bb4:	movw	r1, #10276	; 0x2824
   37bb8:	ldr	r6, [r7]
   37bbc:	movt	r1, #1
   37bc0:	add	r0, r0, r5
   37bc4:	cmp	r0, r9
   37bc8:	bicle	r8, r0, r0, asr #31
   37bcc:	movw	r0, #9352	; 0x2488
   37bd0:	movt	r0, #1
   37bd4:	orrs	r4, r1, r0
   37bd8:	beq	37be4 <__assert_fail@plt+0x25168>
   37bdc:	add	r0, r6, #136	; 0x88
   37be0:	bl	12464 <pthread_mutex_lock@plt>
   37be4:	ldrb	r0, [r7, #28]
   37be8:	str	r6, [sp, #24]
   37bec:	ldr	r6, [fp, #16]
   37bf0:	cmp	r8, r5
   37bf4:	ubfx	r1, r0, #5, #2
   37bf8:	str	r4, [sp, #36]	; 0x24
   37bfc:	str	sl, [sp, #32]
   37c00:	str	r1, [sp, #28]
   37c04:	ble	37c28 <__assert_fail@plt+0x251ac>
   37c08:	tst	r0, #8
   37c0c:	bne	37c28 <__assert_fail@plt+0x251ac>
   37c10:	ldr	r1, [r7, #16]
   37c14:	cmp	r1, #0
   37c18:	beq	37c28 <__assert_fail@plt+0x251ac>
   37c1c:	mov	r0, r7
   37c20:	bl	34614 <__assert_fail@plt+0x21b98>
   37c24:	ldrb	r0, [r7, #28]
   37c28:	mov	sl, #1
   37c2c:	mov	r4, #0
   37c30:	cmp	r6, #0
   37c34:	str	r7, [fp, #-32]	; 0xffffffe0
   37c38:	beq	37c84 <__assert_fail@plt+0x25208>
   37c3c:	ands	r1, r0, #16
   37c40:	bne	37c84 <__assert_fail@plt+0x25208>
   37c44:	and	r0, r0, #6
   37c48:	cmp	r0, #4
   37c4c:	bne	37c74 <__assert_fail@plt+0x251f8>
   37c50:	ldr	r0, [fp, #-32]	; 0xffffffe0
   37c54:	ldr	sl, [r6]
   37c58:	ldr	r0, [r0, #24]
   37c5c:	cmp	sl, r0
   37c60:	bhi	37c7c <__assert_fail@plt+0x25200>
   37c64:	cmp	sl, #1
   37c68:	movwlt	r6, #0
   37c6c:	movwlt	sl, #1
   37c70:	b	37c80 <__assert_fail@plt+0x25204>
   37c74:	ldr	r0, [fp, #-32]	; 0xffffffe0
   37c78:	ldr	r0, [r0, #24]
   37c7c:	add	sl, r0, #1
   37c80:	mov	r4, r6
   37c84:	lsl	r0, sl, #3
   37c88:	bl	3233c <__assert_fail@plt+0x1f8c0>
   37c8c:	cmp	r0, #0
   37c90:	beq	37f0c <__assert_fail@plt+0x25490>
   37c94:	mov	r7, r0
   37c98:	ldr	r0, [fp, #12]
   37c9c:	str	r8, [sp]
   37ca0:	mov	r2, r9
   37ca4:	mov	r3, r5
   37ca8:	stmib	sp, {r0, sl}
   37cac:	str	r7, [sp, #12]
   37cb0:	ldr	r0, [sp, #28]
   37cb4:	ldr	r1, [sp, #32]
   37cb8:	str	r0, [sp, #16]
   37cbc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   37cc0:	bl	34f78 <__assert_fail@plt+0x224fc>
   37cc4:	cmp	r0, #0
   37cc8:	beq	37d04 <__assert_fail@plt+0x25288>
   37ccc:	mvn	r6, #1
   37cd0:	cmp	r0, #1
   37cd4:	mvneq	r6, #0
   37cd8:	ldr	r4, [sp, #36]	; 0x24
   37cdc:	mov	r0, r7
   37ce0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   37ce4:	cmp	r4, #0
   37ce8:	beq	37cf8 <__assert_fail@plt+0x2527c>
   37cec:	ldr	r0, [sp, #24]
   37cf0:	add	r0, r0, #136	; 0x88
   37cf4:	bl	12338 <pthread_mutex_unlock@plt>
   37cf8:	mov	r0, r6
   37cfc:	sub	sp, fp, #28
   37d00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37d04:	cmp	r4, #0
   37d08:	str	r5, [sp, #32]
   37d0c:	beq	37e28 <__assert_fail@plt+0x253ac>
   37d10:	ldr	r0, [fp, #-32]	; 0xffffffe0
   37d14:	add	r9, sl, #1
   37d18:	ldrb	r0, [r0, #28]
   37d1c:	ubfx	r0, r0, #1, #2
   37d20:	cmp	r0, #1
   37d24:	beq	37d84 <__assert_fail@plt+0x25308>
   37d28:	mov	ip, #2
   37d2c:	cmp	r0, #0
   37d30:	bne	37d94 <__assert_fail@plt+0x25318>
   37d34:	mov	r5, r7
   37d38:	lsl	r7, r9, #2
   37d3c:	mov	r0, r7
   37d40:	bl	3233c <__assert_fail@plt+0x1f8c0>
   37d44:	mov	r6, #0
   37d48:	cmp	r0, #0
   37d4c:	str	r0, [r4, #4]
   37d50:	beq	37f20 <__assert_fail@plt+0x254a4>
   37d54:	mov	r0, r7
   37d58:	bl	3233c <__assert_fail@plt+0x1f8c0>
   37d5c:	cmp	r0, #0
   37d60:	str	r0, [r4, #8]
   37d64:	beq	37f80 <__assert_fail@plt+0x25504>
   37d68:	str	r9, [r4]
   37d6c:	mov	ip, #1
   37d70:	mov	r7, r5
   37d74:	cmp	sl, #1
   37d78:	bge	37d9c <__assert_fail@plt+0x25320>
   37d7c:	mov	sl, #0
   37d80:	b	37ddc <__assert_fail@plt+0x25360>
   37d84:	ldr	r0, [r4]
   37d88:	mov	ip, #1
   37d8c:	cmp	r9, r0
   37d90:	bhi	37f28 <__assert_fail@plt+0x254ac>
   37d94:	cmp	sl, #1
   37d98:	blt	37d7c <__assert_fail@plt+0x25300>
   37d9c:	mov	r8, r7
   37da0:	ldmib	r4, {r6, r7}
   37da4:	mov	r2, #0
   37da8:	cmp	sl, #3
   37dac:	bhi	37e54 <__assert_fail@plt+0x253d8>
   37db0:	add	r0, r8, r2, lsl #3
   37db4:	add	r0, r0, #4
   37db8:	ldr	r1, [r0, #-4]
   37dbc:	str	r1, [r6, r2, lsl #2]
   37dc0:	ldr	r1, [r0]
   37dc4:	add	r0, r0, #8
   37dc8:	str	r1, [r7, r2, lsl #2]
   37dcc:	add	r2, r2, #1
   37dd0:	cmp	sl, r2
   37dd4:	bne	37db8 <__assert_fail@plt+0x2533c>
   37dd8:	mov	r7, r8
   37ddc:	ldr	r0, [r4]
   37de0:	cmp	sl, r0
   37de4:	bcs	37e08 <__assert_fail@plt+0x2538c>
   37de8:	ldmib	r4, {r0, r1}
   37dec:	mvn	r2, #0
   37df0:	str	r2, [r1, sl, lsl #2]
   37df4:	str	r2, [r0, sl, lsl #2]
   37df8:	add	sl, sl, #1
   37dfc:	ldr	r3, [r4]
   37e00:	cmp	sl, r3
   37e04:	bcc	37df0 <__assert_fail@plt+0x25374>
   37e08:	mov	r6, ip
   37e0c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   37e10:	cmp	r6, #0
   37e14:	ldrb	r0, [r1, #28]
   37e18:	and	r0, r0, #249	; 0xf9
   37e1c:	orr	r0, r0, r6, lsl #1
   37e20:	strb	r0, [r1, #28]
   37e24:	beq	37e4c <__assert_fail@plt+0x253d0>
   37e28:	ldr	r0, [fp, #20]
   37e2c:	cmp	r0, #0
   37e30:	beq	37e44 <__assert_fail@plt+0x253c8>
   37e34:	ldr	r0, [r7, #4]
   37e38:	ldr	r1, [sp, #32]
   37e3c:	sub	r6, r0, r1
   37e40:	b	37cd8 <__assert_fail@plt+0x2525c>
   37e44:	ldr	r6, [r7]
   37e48:	b	37cd8 <__assert_fail@plt+0x2525c>
   37e4c:	mvn	r6, #1
   37e50:	b	37cd8 <__assert_fail@plt+0x2525c>
   37e54:	str	ip, [sp, #28]
   37e58:	add	ip, r7, sl, lsl #2
   37e5c:	mov	lr, #0
   37e60:	add	r5, r8, sl, lsl #3
   37e64:	mov	r9, #0
   37e68:	add	r3, r6, sl, lsl #2
   37e6c:	mov	r1, #0
   37e70:	mov	r0, r8
   37e74:	mov	r2, #0
   37e78:	cmp	r8, ip
   37e7c:	mov	r0, #0
   37e80:	movwcc	lr, #1
   37e84:	cmp	r5, r7
   37e88:	movwhi	r9, #1
   37e8c:	cmp	r8, r3
   37e90:	movwcc	r1, #1
   37e94:	cmp	r5, r6
   37e98:	mov	r5, #0
   37e9c:	movwhi	r5, #1
   37ea0:	cmp	r7, r3
   37ea4:	mov	r3, #0
   37ea8:	movwcc	r3, #1
   37eac:	cmp	r6, ip
   37eb0:	movwcc	r0, #1
   37eb4:	tst	r0, r3
   37eb8:	bne	37f04 <__assert_fail@plt+0x25488>
   37ebc:	ands	r0, r5, r1
   37ec0:	bne	37f04 <__assert_fail@plt+0x25488>
   37ec4:	ldr	ip, [sp, #28]
   37ec8:	ands	r0, r9, lr
   37ecc:	bne	37db0 <__assert_fail@plt+0x25334>
   37ed0:	bic	r2, sl, #3
   37ed4:	mov	r1, r7
   37ed8:	mov	r0, r6
   37edc:	mov	r5, r8
   37ee0:	mov	r3, r2
   37ee4:	vld2.32	{d16-d19}, [r5]!
   37ee8:	subs	r3, r3, #4
   37eec:	vst1.32	{d16-d17}, [r0]!
   37ef0:	vst1.32	{d18-d19}, [r1]!
   37ef4:	bne	37ee4 <__assert_fail@plt+0x25468>
   37ef8:	cmp	sl, r2
   37efc:	bne	37db0 <__assert_fail@plt+0x25334>
   37f00:	b	37dd8 <__assert_fail@plt+0x2535c>
   37f04:	ldr	ip, [sp, #28]
   37f08:	b	37db0 <__assert_fail@plt+0x25334>
   37f0c:	ldr	r4, [sp, #36]	; 0x24
   37f10:	mvn	r6, #1
   37f14:	cmp	r4, #0
   37f18:	bne	37cec <__assert_fail@plt+0x25270>
   37f1c:	b	37cf8 <__assert_fail@plt+0x2527c>
   37f20:	mov	r7, r5
   37f24:	b	37e0c <__assert_fail@plt+0x25390>
   37f28:	ldr	r0, [r4, #4]
   37f2c:	mov	r8, r7
   37f30:	lsl	r7, r9, #2
   37f34:	mov	r1, r7
   37f38:	bl	33040 <__assert_fail@plt+0x205c4>
   37f3c:	mov	r6, #0
   37f40:	cmp	r0, #0
   37f44:	beq	37f90 <__assert_fail@plt+0x25514>
   37f48:	mov	r5, r0
   37f4c:	ldr	r0, [r4, #8]
   37f50:	mov	r1, r7
   37f54:	bl	33040 <__assert_fail@plt+0x205c4>
   37f58:	cmp	r0, #0
   37f5c:	beq	37f98 <__assert_fail@plt+0x2551c>
   37f60:	mov	r7, r8
   37f64:	mov	ip, #1
   37f68:	str	r9, [r4]
   37f6c:	str	r5, [r4, #4]
   37f70:	str	r0, [r4, #8]
   37f74:	cmp	sl, #1
   37f78:	bge	37d9c <__assert_fail@plt+0x25320>
   37f7c:	b	37d7c <__assert_fail@plt+0x25300>
   37f80:	ldr	r0, [r4, #4]
   37f84:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   37f88:	mov	r7, r5
   37f8c:	b	37e0c <__assert_fail@plt+0x25390>
   37f90:	mov	r7, r8
   37f94:	b	37e0c <__assert_fail@plt+0x25390>
   37f98:	mov	r0, r5
   37f9c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   37fa0:	mov	r7, r8
   37fa4:	b	37e0c <__assert_fail@plt+0x25390>
   37fa8:	push	{fp, lr}
   37fac:	mov	fp, sp
   37fb0:	sub	sp, sp, #16
   37fb4:	mov	ip, #0
   37fb8:	str	r2, [sp, #4]
   37fbc:	str	ip, [sp, #12]
   37fc0:	ldr	ip, [fp, #12]
   37fc4:	str	ip, [sp, #8]
   37fc8:	ldr	ip, [fp, #8]
   37fcc:	str	ip, [sp]
   37fd0:	bl	37b7c <__assert_fail@plt+0x25100>
   37fd4:	mov	sp, fp
   37fd8:	pop	{fp, pc}
   37fdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37fe0:	add	fp, sp, #28
   37fe4:	sub	sp, sp, #20
   37fe8:	ldr	r4, [fp, #8]
   37fec:	mov	r8, r1
   37ff0:	mov	r1, r0
   37ff4:	mov	r6, r2
   37ff8:	orr	r0, r4, r2
   37ffc:	ldr	r2, [fp, #20]
   38000:	orr	r0, r0, r2
   38004:	cmp	r0, #0
   38008:	blt	380c8 <__assert_fail@plt+0x2564c>
   3800c:	adds	sl, r6, r4
   38010:	bvs	380c8 <__assert_fail@plt+0x2564c>
   38014:	mov	r5, #0
   38018:	cmp	r4, #1
   3801c:	blt	38074 <__assert_fail@plt+0x255f8>
   38020:	mov	r9, r3
   38024:	cmp	r6, #1
   38028:	blt	3807c <__assert_fail@plt+0x25600>
   3802c:	mov	r0, sl
   38030:	mov	r5, r1
   38034:	bl	3233c <__assert_fail@plt+0x1f8c0>
   38038:	cmp	r0, #0
   3803c:	beq	380c8 <__assert_fail@plt+0x2564c>
   38040:	mov	r1, r8
   38044:	mov	r2, r6
   38048:	mov	r7, r0
   3804c:	bl	124b8 <memcpy@plt>
   38050:	add	r0, r7, r6
   38054:	mov	r1, r9
   38058:	mov	r2, r4
   3805c:	bl	124b8 <memcpy@plt>
   38060:	ldr	r2, [fp, #20]
   38064:	mov	r1, r5
   38068:	mov	r4, r7
   3806c:	mov	r5, #0
   38070:	b	38084 <__assert_fail@plt+0x25608>
   38074:	mov	r7, r8
   38078:	b	38080 <__assert_fail@plt+0x25604>
   3807c:	mov	r7, r9
   38080:	mov	r4, #0
   38084:	ldr	r0, [fp, #16]
   38088:	ldr	r3, [fp, #12]
   3808c:	mov	r6, #1
   38090:	str	r2, [sp, #4]
   38094:	mov	r2, sl
   38098:	str	r5, [sp]
   3809c:	str	r6, [sp, #12]
   380a0:	str	r0, [sp, #8]
   380a4:	mov	r0, r1
   380a8:	mov	r1, r7
   380ac:	bl	37b7c <__assert_fail@plt+0x25100>
   380b0:	mov	r5, r0
   380b4:	mov	r0, r4
   380b8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   380bc:	mov	r0, r5
   380c0:	sub	sp, fp, #28
   380c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   380c8:	mvn	r0, #1
   380cc:	sub	sp, fp, #28
   380d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   380d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   380d8:	add	fp, sp, #28
   380dc:	sub	sp, sp, #20
   380e0:	ldr	r4, [fp, #8]
   380e4:	mov	r8, r1
   380e8:	mov	r1, r0
   380ec:	mov	r6, r2
   380f0:	orr	r0, r4, r2
   380f4:	ldr	r2, [fp, #24]
   380f8:	orr	r0, r0, r2
   380fc:	cmp	r0, #0
   38100:	blt	381c0 <__assert_fail@plt+0x25744>
   38104:	adds	sl, r6, r4
   38108:	bvs	381c0 <__assert_fail@plt+0x25744>
   3810c:	mov	r5, #0
   38110:	cmp	r4, #1
   38114:	blt	3816c <__assert_fail@plt+0x256f0>
   38118:	mov	r9, r3
   3811c:	cmp	r6, #1
   38120:	blt	38174 <__assert_fail@plt+0x256f8>
   38124:	mov	r0, sl
   38128:	mov	r5, r1
   3812c:	bl	3233c <__assert_fail@plt+0x1f8c0>
   38130:	cmp	r0, #0
   38134:	beq	381c0 <__assert_fail@plt+0x25744>
   38138:	mov	r1, r8
   3813c:	mov	r2, r6
   38140:	mov	r7, r0
   38144:	bl	124b8 <memcpy@plt>
   38148:	add	r0, r7, r6
   3814c:	mov	r1, r9
   38150:	mov	r2, r4
   38154:	bl	124b8 <memcpy@plt>
   38158:	ldr	r2, [fp, #24]
   3815c:	mov	r1, r5
   38160:	mov	r4, r7
   38164:	mov	r5, #0
   38168:	b	3817c <__assert_fail@plt+0x25700>
   3816c:	mov	r7, r8
   38170:	b	38178 <__assert_fail@plt+0x256fc>
   38174:	mov	r7, r9
   38178:	mov	r4, #0
   3817c:	ldr	r0, [fp, #20]
   38180:	ldr	r6, [fp, #16]
   38184:	ldr	r3, [fp, #12]
   38188:	str	r2, [sp, #4]
   3818c:	mov	r2, sl
   38190:	str	r5, [sp, #12]
   38194:	str	r0, [sp, #8]
   38198:	mov	r0, r1
   3819c:	mov	r1, r7
   381a0:	str	r6, [sp]
   381a4:	bl	37b7c <__assert_fail@plt+0x25100>
   381a8:	mov	r5, r0
   381ac:	mov	r0, r4
   381b0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   381b4:	mov	r0, r5
   381b8:	sub	sp, fp, #28
   381bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   381c0:	mvn	r0, #1
   381c4:	sub	sp, fp, #28
   381c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   381cc:	ldrb	ip, [r0, #28]
   381d0:	cmp	r2, #0
   381d4:	bic	ip, ip, #6
   381d8:	orrne	ip, ip, #2
   381dc:	strb	ip, [r0, #28]
   381e0:	ldr	r0, [sp]
   381e4:	moveq	r0, r2
   381e8:	cmp	r2, #0
   381ec:	moveq	r3, r2
   381f0:	stm	r1, {r2, r3}
   381f4:	str	r0, [r1, #8]
   381f8:	bx	lr
   381fc:	push	{r4, sl, fp, lr}
   38200:	add	fp, sp, #8
   38204:	mov	r4, r0
   38208:	ldr	r0, [r0, #24]
   3820c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   38210:	ldr	r0, [r4, #36]	; 0x24
   38214:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   38218:	ldr	r0, [r4, #40]	; 0x28
   3821c:	add	r1, r4, #4
   38220:	cmp	r0, r1
   38224:	beq	38238 <__assert_fail@plt+0x257bc>
   38228:	ldr	r0, [r0, #8]
   3822c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   38230:	ldr	r0, [r4, #40]	; 0x28
   38234:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   38238:	ldr	r0, [r4, #12]
   3823c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   38240:	ldr	r0, [r4, #48]	; 0x30
   38244:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   38248:	ldr	r0, [r4, #44]	; 0x2c
   3824c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   38250:	mov	r0, r4
   38254:	pop	{r4, sl, fp, lr}
   38258:	b	2fd6c <__assert_fail@plt+0x1d2f0>
   3825c:	nop	{0}
   38260:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38264:	add	fp, sp, #28
   38268:	sub	sp, sp, #92	; 0x5c
   3826c:	mov	r9, r0
   38270:	ldrb	r0, [r0, #74]	; 0x4a
   38274:	ldr	r2, [r9, #36]	; 0x24
   38278:	ldr	r1, [r9, #48]	; 0x30
   3827c:	ldr	r4, [r9, #28]
   38280:	cmp	r2, r1
   38284:	movgt	r2, r1
   38288:	cmp	r0, #0
   3828c:	str	r2, [sp]
   38290:	bne	382b0 <__assert_fail@plt+0x25834>
   38294:	mov	r7, r9
   38298:	ldr	r0, [r7, #64]!	; 0x40
   3829c:	cmp	r0, #0
   382a0:	bne	382b0 <__assert_fail@plt+0x25834>
   382a4:	ldrb	r0, [r9, #76]	; 0x4c
   382a8:	cmp	r0, #0
   382ac:	beq	382b8 <__assert_fail@plt+0x2583c>
   382b0:	ldr	r6, [r9, #32]
   382b4:	b	38494 <__assert_fail@plt+0x25a18>
   382b8:	ldr	r0, [sp]
   382bc:	cmp	r0, r4
   382c0:	ble	382d0 <__assert_fail@plt+0x25854>
   382c4:	add	r8, r9, #16
   382c8:	mov	sl, r4
   382cc:	b	38328 <__assert_fail@plt+0x258ac>
   382d0:	mov	sl, r4
   382d4:	str	r4, [sp, #4]
   382d8:	b	385a4 <__assert_fail@plt+0x25b28>
   382dc:	add	r0, r4, #1
   382e0:	cmp	r0, #2
   382e4:	bcc	382f8 <__assert_fail@plt+0x2587c>
   382e8:	ldr	r0, [r9, #36]	; 0x24
   382ec:	ldr	r1, [r9, #48]	; 0x30
   382f0:	cmp	r0, r1
   382f4:	blt	38480 <__assert_fail@plt+0x25a04>
   382f8:	ldr	r0, [r9, #4]
   382fc:	ldr	r1, [sp, #4]
   38300:	cmn	r4, #1
   38304:	strb	sl, [r0, r1]
   38308:	ldr	r0, [r9, #8]
   3830c:	str	sl, [r0, r1, lsl #2]
   38310:	add	sl, r1, #1
   38314:	bne	38460 <__assert_fail@plt+0x259e4>
   38318:	ldr	r0, [fp, #-40]	; 0xffffffd8
   3831c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   38320:	stm	r8, {r0, r1}
   38324:	b	38460 <__assert_fail@plt+0x259e4>
   38328:	ldr	r5, [r9, #24]
   3832c:	ldr	r4, [r9]
   38330:	str	sl, [sp, #4]
   38334:	add	r0, r5, sl
   38338:	ldrb	sl, [r4, r0]
   3833c:	tst	sl, #128	; 0x80
   38340:	bne	38388 <__assert_fail@plt+0x2590c>
   38344:	mov	r0, r8
   38348:	bl	124f4 <mbsinit@plt>
   3834c:	cmp	r0, #0
   38350:	beq	38388 <__assert_fail@plt+0x2590c>
   38354:	mov	r0, sl
   38358:	bl	12a04 <towupper@plt>
   3835c:	cmp	r0, #128	; 0x80
   38360:	bcs	38380 <__assert_fail@plt+0x25904>
   38364:	ldr	r2, [sp, #4]
   38368:	ldr	r1, [r9, #4]
   3836c:	strb	r0, [r1, r2]
   38370:	add	sl, r2, #1
   38374:	ldr	r1, [r9, #8]
   38378:	str	r0, [r1, r2, lsl #2]
   3837c:	b	38460 <__assert_fail@plt+0x259e4>
   38380:	ldr	r4, [r9]
   38384:	ldr	r5, [r9, #24]
   38388:	ldm	r8, {r0, r1}
   3838c:	mov	r3, r8
   38390:	str	r1, [fp, #-36]	; 0xffffffdc
   38394:	str	r0, [fp, #-40]	; 0xffffffd8
   38398:	ldm	sp, {r0, r1}
   3839c:	sub	r2, r0, r1
   383a0:	add	r0, r4, r5
   383a4:	add	r1, r0, r1
   383a8:	add	r0, sp, #12
   383ac:	bl	3236c <__assert_fail@plt+0x1f8f0>
   383b0:	mov	r4, r0
   383b4:	sub	r0, r0, #1
   383b8:	cmn	r0, #4
   383bc:	bhi	382dc <__assert_fail@plt+0x25860>
   383c0:	ldr	r0, [sp, #12]
   383c4:	bl	12a04 <towupper@plt>
   383c8:	mov	r5, r0
   383cc:	ldr	r0, [sp, #12]
   383d0:	cmp	r5, r0
   383d4:	bne	383f8 <__assert_fail@plt+0x2597c>
   383d8:	ldr	r1, [r9]
   383dc:	ldr	r2, [r9, #24]
   383e0:	ldr	r0, [r9, #4]
   383e4:	ldr	r6, [sp, #4]
   383e8:	add	r1, r1, r2
   383ec:	add	r0, r0, r6
   383f0:	add	r1, r1, r6
   383f4:	b	38424 <__assert_fail@plt+0x259a8>
   383f8:	add	sl, sp, #16
   383fc:	mov	r1, r5
   38400:	sub	r2, fp, #40	; 0x28
   38404:	mov	r0, sl
   38408:	bl	1238c <wcrtomb@plt>
   3840c:	cmp	r4, r0
   38410:	bne	38474 <__assert_fail@plt+0x259f8>
   38414:	ldr	r0, [r9, #4]
   38418:	ldr	r6, [sp, #4]
   3841c:	mov	r1, sl
   38420:	add	r0, r0, r6
   38424:	mov	r2, r4
   38428:	bl	124b8 <memcpy@plt>
   3842c:	ldr	r0, [r9, #8]
   38430:	add	sl, r6, #1
   38434:	str	r5, [r0, r6, lsl #2]
   38438:	add	r5, r4, r6
   3843c:	cmp	sl, r5
   38440:	bge	38460 <__assert_fail@plt+0x259e4>
   38444:	add	r0, r0, r6, lsl #2
   38448:	mvn	r1, #3
   3844c:	add	r2, r1, r4, lsl #2
   38450:	add	r0, r0, #4
   38454:	mov	r1, #255	; 0xff
   38458:	bl	12800 <memset@plt>
   3845c:	mov	sl, r5
   38460:	ldr	r0, [sp]
   38464:	str	sl, [sp, #4]
   38468:	cmp	r0, sl
   3846c:	bgt	38328 <__assert_fail@plt+0x258ac>
   38470:	b	385a4 <__assert_fail@plt+0x25b28>
   38474:	ldr	r6, [sp, #4]
   38478:	mov	sl, r6
   3847c:	b	384ac <__assert_fail@plt+0x25a30>
   38480:	ldr	r0, [fp, #-40]	; 0xffffffd8
   38484:	ldr	r1, [fp, #-36]	; 0xffffffdc
   38488:	stm	r8, {r0, r1}
   3848c:	ldr	sl, [sp, #4]
   38490:	b	385a4 <__assert_fail@plt+0x25b28>
   38494:	ldr	r0, [sp]
   38498:	cmp	r4, r0
   3849c:	bge	3859c <__assert_fail@plt+0x25b20>
   384a0:	add	r7, r9, #64	; 0x40
   384a4:	add	r8, r9, #16
   384a8:	mov	sl, r4
   384ac:	ldm	r8, {r0, r1}
   384b0:	str	r6, [sp, #4]
   384b4:	str	r0, [fp, #-40]	; 0xffffffd8
   384b8:	ldr	r0, [sp]
   384bc:	str	r1, [fp, #-36]	; 0xffffffdc
   384c0:	sub	r2, r0, sl
   384c4:	ldr	r0, [r7]
   384c8:	cmp	r0, #0
   384cc:	bne	385bc <__assert_fail@plt+0x25b40>
   384d0:	ldr	r0, [r9]
   384d4:	ldr	r1, [r9, #24]
   384d8:	add	r0, r0, r1
   384dc:	add	r4, r0, r6
   384e0:	add	r0, sp, #8
   384e4:	mov	r1, r4
   384e8:	mov	r3, r8
   384ec:	bl	3236c <__assert_fail@plt+0x1f8f0>
   384f0:	sub	r6, r0, #1
   384f4:	mov	r5, r0
   384f8:	cmn	r6, #4
   384fc:	bhi	3860c <__assert_fail@plt+0x25b90>
   38500:	ldr	r0, [sp, #8]
   38504:	bl	12a04 <towupper@plt>
   38508:	mov	r7, r0
   3850c:	ldr	r0, [sp, #8]
   38510:	cmp	r7, r0
   38514:	bne	38524 <__assert_fail@plt+0x25aa8>
   38518:	ldr	r0, [r9, #4]
   3851c:	mov	r1, r4
   38520:	b	38544 <__assert_fail@plt+0x25ac8>
   38524:	add	r0, sp, #16
   38528:	sub	r2, fp, #40	; 0x28
   3852c:	mov	r1, r7
   38530:	bl	1238c <wcrtomb@plt>
   38534:	cmp	r0, r5
   38538:	bne	38688 <__assert_fail@plt+0x25c0c>
   3853c:	ldr	r0, [r9, #4]
   38540:	add	r1, sp, #16
   38544:	add	r0, r0, sl
   38548:	mov	r2, r5
   3854c:	bl	124b8 <memcpy@plt>
   38550:	ldrb	r0, [r9, #76]	; 0x4c
   38554:	ldr	r6, [sp, #4]
   38558:	cmp	r0, #0
   3855c:	bne	3871c <__assert_fail@plt+0x25ca0>
   38560:	ldr	r0, [r9, #8]
   38564:	add	r4, r5, sl
   38568:	add	r1, sl, #1
   3856c:	add	r6, r5, r6
   38570:	cmp	r1, r4
   38574:	str	r7, [r0, sl, lsl #2]
   38578:	bge	38594 <__assert_fail@plt+0x25b18>
   3857c:	add	r0, r0, r1, lsl #2
   38580:	mvn	r1, #3
   38584:	add	r2, r1, r5, lsl #2
   38588:	mov	r1, #255	; 0xff
   3858c:	bl	12800 <memset@plt>
   38590:	b	38494 <__assert_fail@plt+0x25a18>
   38594:	mov	r4, r1
   38598:	b	38494 <__assert_fail@plt+0x25a18>
   3859c:	str	r6, [sp, #4]
   385a0:	mov	sl, r4
   385a4:	ldr	r0, [sp, #4]
   385a8:	str	sl, [r9, #28]
   385ac:	str	r0, [r9, #32]
   385b0:	mov	r0, #0
   385b4:	sub	sp, fp, #28
   385b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   385bc:	cmp	r2, #1
   385c0:	add	r4, sp, #16
   385c4:	ldrge	r1, [r9, #80]	; 0x50
   385c8:	cmpge	r1, #1
   385cc:	blt	384e0 <__assert_fail@plt+0x25a64>
   385d0:	ldr	r7, [r9, #24]
   385d4:	ldr	r3, [r9]
   385d8:	add	r4, sp, #16
   385dc:	add	r7, r6, r7
   385e0:	add	r3, r3, r7
   385e4:	mov	r7, #0
   385e8:	ldrb	r5, [r3, r7]
   385ec:	ldrb	r5, [r0, r5]
   385f0:	strb	r5, [r4, r7]
   385f4:	add	r7, r7, #1
   385f8:	cmp	r7, r2
   385fc:	bge	384e0 <__assert_fail@plt+0x25a64>
   38600:	cmp	r7, r1
   38604:	blt	385e8 <__assert_fail@plt+0x25b6c>
   38608:	b	384e0 <__assert_fail@plt+0x25a64>
   3860c:	add	r0, r5, #1
   38610:	cmp	r0, #2
   38614:	bcc	38628 <__assert_fail@plt+0x25bac>
   38618:	ldr	r0, [r9, #36]	; 0x24
   3861c:	ldr	r1, [r9, #48]	; 0x30
   38620:	cmp	r0, r1
   38624:	blt	38788 <__assert_fail@plt+0x25d0c>
   38628:	ldr	r2, [r9, #24]
   3862c:	ldr	r6, [sp, #4]
   38630:	ldr	r0, [r9]
   38634:	ldr	r1, [r9, #64]	; 0x40
   38638:	add	r4, sl, #1
   3863c:	add	r2, r2, r6
   38640:	cmp	r1, #0
   38644:	ldrb	r0, [r0, r2]
   38648:	ldrbne	r0, [r1, r0]
   3864c:	ldr	r1, [r9, #4]
   38650:	strb	r0, [r1, sl]
   38654:	ldrb	r1, [r9, #76]	; 0x4c
   38658:	cmp	r1, #0
   3865c:	ldrne	r1, [r9, #12]
   38660:	strne	r6, [r1, sl, lsl #2]
   38664:	add	r6, r6, #1
   38668:	cmn	r5, #1
   3866c:	ldr	r1, [r9, #8]
   38670:	str	r0, [r1, sl, lsl #2]
   38674:	bne	38494 <__assert_fail@plt+0x25a18>
   38678:	ldr	r0, [fp, #-40]	; 0xffffffd8
   3867c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   38680:	stm	r8, {r0, r1}
   38684:	b	38494 <__assert_fail@plt+0x25a18>
   38688:	mov	r3, r0
   3868c:	cmn	r0, #1
   38690:	beq	38518 <__assert_fail@plt+0x25a9c>
   38694:	ldr	r1, [r9, #36]	; 0x24
   38698:	add	r4, r3, sl
   3869c:	cmp	r4, r1
   386a0:	bhi	38788 <__assert_fail@plt+0x25d0c>
   386a4:	ldr	r0, [r9, #12]
   386a8:	cmp	r0, #0
   386ac:	bne	386cc <__assert_fail@plt+0x25c50>
   386b0:	lsl	r0, r1, #2
   386b4:	mov	r8, r3
   386b8:	bl	3233c <__assert_fail@plt+0x1f8c0>
   386bc:	mov	r3, r8
   386c0:	cmp	r0, #0
   386c4:	str	r0, [r9, #12]
   386c8:	beq	38798 <__assert_fail@plt+0x25d1c>
   386cc:	ldrb	r1, [r9, #76]	; 0x4c
   386d0:	cmp	r1, #0
   386d4:	bne	387bc <__assert_fail@plt+0x25d40>
   386d8:	cmp	sl, #0
   386dc:	beq	387b4 <__assert_fail@plt+0x25d38>
   386e0:	mov	r1, #0
   386e4:	cmp	sl, #4
   386e8:	bcc	387a4 <__assert_fail@plt+0x25d28>
   386ec:	add	r2, pc, #524	; 0x20c
   386f0:	bic	r1, sl, #3
   386f4:	vmov.i32	q8, #4	; 0x00000004
   386f8:	vld1.64	{d18-d19}, [r2 :128]
   386fc:	mov	ip, r1
   38700:	mov	r2, r0
   38704:	vadd.i32	q10, q9, q8
   38708:	vst1.32	{d18-d19}, [r2]!
   3870c:	subs	ip, ip, #4
   38710:	vorr	q9, q10, q10
   38714:	bne	38704 <__assert_fail@plt+0x25c88>
   38718:	b	387ac <__assert_fail@plt+0x25d30>
   3871c:	ldr	r0, [r9, #12]
   38720:	mov	r1, #0
   38724:	cmp	r5, #4
   38728:	bcc	38764 <__assert_fail@plt+0x25ce8>
   3872c:	add	r3, pc, #460	; 0x1cc
   38730:	bic	r1, r5, #3
   38734:	add	r2, r0, sl, lsl #2
   38738:	vdup.32	q8, r6
   3873c:	vmov.i32	q10, #4	; 0x00000004
   38740:	vld1.64	{d18-d19}, [r3 :128]
   38744:	mov	r3, r1
   38748:	vadd.i32	q11, q9, q8
   3874c:	vadd.i32	q9, q9, q10
   38750:	subs	r3, r3, #4
   38754:	vst1.32	{d22-d23}, [r2]!
   38758:	bne	38748 <__assert_fail@plt+0x25ccc>
   3875c:	cmp	r5, r1
   38760:	beq	38560 <__assert_fail@plt+0x25ae4>
   38764:	add	r2, r6, r1
   38768:	sub	r3, r5, r1
   3876c:	add	r1, sl, r1
   38770:	add	r0, r0, r1, lsl #2
   38774:	str	r2, [r0], #4
   38778:	add	r2, r2, #1
   3877c:	subs	r3, r3, #1
   38780:	bne	38774 <__assert_fail@plt+0x25cf8>
   38784:	b	38560 <__assert_fail@plt+0x25ae4>
   38788:	ldr	r0, [fp, #-40]	; 0xffffffd8
   3878c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   38790:	stm	r8, {r0, r1}
   38794:	b	385a4 <__assert_fail@plt+0x25b28>
   38798:	mov	r0, #12
   3879c:	sub	sp, fp, #28
   387a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   387a4:	str	r1, [r0, r1, lsl #2]
   387a8:	add	r1, r1, #1
   387ac:	cmp	sl, r1
   387b0:	bne	387a4 <__assert_fail@plt+0x25d28>
   387b4:	mov	r0, #1
   387b8:	strb	r0, [r9, #76]	; 0x4c
   387bc:	ldr	r0, [r9, #4]
   387c0:	add	r1, sp, #16
   387c4:	mov	r2, r3
   387c8:	mov	r8, r3
   387cc:	add	r0, r0, sl
   387d0:	bl	124b8 <memcpy@plt>
   387d4:	ldr	lr, [r9, #8]
   387d8:	ldr	ip, [sp, #4]
   387dc:	cmp	r8, #2
   387e0:	str	r7, [lr, sl, lsl #2]
   387e4:	ldr	r2, [r9, #12]
   387e8:	str	ip, [r2, sl, lsl #2]
   387ec:	bcc	388c0 <__assert_fail@plt+0x25e44>
   387f0:	sub	r0, r8, #1
   387f4:	mov	r1, #1
   387f8:	cmp	r0, #4
   387fc:	bcs	38808 <__assert_fail@plt+0x25d8c>
   38800:	ldr	ip, [sp, #4]
   38804:	b	38890 <__assert_fail@plt+0x25e14>
   38808:	str	r0, [sp]
   3880c:	add	r3, r8, sl
   38810:	add	r0, sl, #1
   38814:	add	r7, lr, r0, lsl #2
   38818:	add	ip, lr, r3, lsl #2
   3881c:	add	r0, r2, r0, lsl #2
   38820:	cmp	r0, ip
   38824:	ldr	ip, [sp, #4]
   38828:	addcc	r3, r2, r3, lsl #2
   3882c:	cmpcc	r7, r3
   38830:	bcc	38890 <__assert_fail@plt+0x25e14>
   38834:	add	r1, pc, #212	; 0xd4
   38838:	vdup.32	q8, ip
   3883c:	vdup.32	q9, r6
   38840:	vdup.32	q10, r5
   38844:	vmov.i32	q12, #4	; 0x00000004
   38848:	vmov.i8	q13, #255	; 0xff
   3884c:	vld1.64	{d22-d23}, [r1 :128]
   38850:	ldr	r1, [sp]
   38854:	bic	ip, r1, #3
   38858:	orr	r1, ip, #1
   3885c:	mov	r3, ip
   38860:	vcgt.u32	q14, q10, q11
   38864:	subs	r3, r3, #4
   38868:	vbsl	q14, q11, q9
   3886c:	vadd.i32	q11, q11, q12
   38870:	vadd.i32	q14, q14, q8
   38874:	vst1.32	{d28-d29}, [r0]!
   38878:	vst1.32	{d26-d27}, [r7]!
   3887c:	bne	38860 <__assert_fail@plt+0x25de4>
   38880:	ldr	r0, [sp]
   38884:	cmp	r0, ip
   38888:	ldr	ip, [sp, #4]
   3888c:	beq	388c0 <__assert_fail@plt+0x25e44>
   38890:	add	r2, r2, sl, lsl #2
   38894:	add	r0, lr, sl, lsl #2
   38898:	mvn	r3, #0
   3889c:	cmp	r1, r5
   388a0:	mov	r7, r6
   388a4:	movcc	r7, r1
   388a8:	add	r7, r7, ip
   388ac:	str	r7, [r2, r1, lsl #2]
   388b0:	str	r3, [r0, r1, lsl #2]
   388b4:	add	r1, r1, #1
   388b8:	cmp	r8, r1
   388bc:	bne	3889c <__assert_fail@plt+0x25e20>
   388c0:	ldr	r0, [r9, #48]	; 0x30
   388c4:	ldr	r2, [r9, #52]	; 0x34
   388c8:	sub	r1, r8, r5
   388cc:	mov	r6, ip
   388d0:	add	r6, r5, r6
   388d4:	add	r0, r0, r1
   388d8:	cmp	r2, ip
   388dc:	str	r0, [r9, #48]	; 0x30
   388e0:	ldrgt	r2, [r9, #56]	; 0x38
   388e4:	addgt	r1, r2, r1
   388e8:	strgt	r1, [r9, #56]	; 0x38
   388ec:	ldr	r1, [r9, #36]	; 0x24
   388f0:	cmp	r1, r0
   388f4:	movgt	r1, r0
   388f8:	str	r1, [sp]
   388fc:	b	38494 <__assert_fail@plt+0x25a18>
   38900:	andeq	r0, r0, r0
   38904:	andeq	r0, r0, r1
   38908:	andeq	r0, r0, r2
   3890c:	andeq	r0, r0, r3
   38910:	andeq	r0, r0, r1
   38914:	andeq	r0, r0, r2
   38918:	andeq	r0, r0, r3
   3891c:	andeq	r0, r0, r4
   38920:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38924:	add	fp, sp, #28
   38928:	sub	sp, sp, #68	; 0x44
   3892c:	mov	r4, r0
   38930:	ldr	r6, [r0, #28]
   38934:	ldr	r7, [r0, #36]	; 0x24
   38938:	ldr	r0, [r0, #48]	; 0x30
   3893c:	cmp	r7, r0
   38940:	movgt	r7, r0
   38944:	cmp	r7, r6
   38948:	ble	38ae8 <__assert_fail@plt+0x2606c>
   3894c:	add	r8, r4, #16
   38950:	mov	r5, sp
   38954:	ldm	r8, {r9, sl}
   38958:	ldr	r0, [r4, #64]	; 0x40
   3895c:	sub	r2, r7, r6
   38960:	cmp	r0, #0
   38964:	bne	38a34 <__assert_fail@plt+0x25fb8>
   38968:	ldr	r0, [r4]
   3896c:	ldr	r1, [r4, #24]
   38970:	add	r0, r0, r1
   38974:	add	r1, r0, r6
   38978:	mov	r0, r5
   3897c:	mov	r3, r8
   38980:	bl	3236c <__assert_fail@plt+0x1f8f0>
   38984:	add	r1, r0, #1
   38988:	cmp	r1, #2
   3898c:	bcc	389a8 <__assert_fail@plt+0x25f2c>
   38990:	cmn	r0, #2
   38994:	bne	389e4 <__assert_fail@plt+0x25f68>
   38998:	ldr	r0, [r4, #36]	; 0x24
   3899c:	ldr	r1, [r4, #48]	; 0x30
   389a0:	cmp	r0, r1
   389a4:	blt	38ae4 <__assert_fail@plt+0x26068>
   389a8:	ldr	r1, [r4, #24]
   389ac:	ldr	r0, [r4]
   389b0:	mov	r2, sl
   389b4:	mov	sl, r5
   389b8:	add	r1, r1, r6
   389bc:	ldrb	r1, [r0, r1]
   389c0:	str	r1, [sp]
   389c4:	ldr	r0, [r4, #64]	; 0x40
   389c8:	cmp	r0, #0
   389cc:	ldrbne	r1, [r0, r1]
   389d0:	mov	r0, #1
   389d4:	strne	r1, [sp]
   389d8:	str	r9, [r8]
   389dc:	str	r2, [r8, #4]
   389e0:	b	389ec <__assert_fail@plt+0x25f70>
   389e4:	ldr	r1, [sp]
   389e8:	mov	sl, r5
   389ec:	ldr	r3, [r4, #8]
   389f0:	add	r5, r0, r6
   389f4:	str	r1, [r3, r6, lsl #2]
   389f8:	add	r1, r6, #1
   389fc:	cmp	r1, r5
   38a00:	bge	38a20 <__assert_fail@plt+0x25fa4>
   38a04:	mvn	r1, #3
   38a08:	add	r2, r1, r0, lsl #2
   38a0c:	add	r0, r3, r6, lsl #2
   38a10:	mov	r1, #255	; 0xff
   38a14:	add	r0, r0, #4
   38a18:	bl	12800 <memset@plt>
   38a1c:	mov	r1, r5
   38a20:	cmp	r7, r1
   38a24:	mov	r6, r1
   38a28:	mov	r5, sl
   38a2c:	bgt	38954 <__assert_fail@plt+0x25ed8>
   38a30:	b	38aec <__assert_fail@plt+0x26070>
   38a34:	cmp	r2, #1
   38a38:	add	r1, sp, #4
   38a3c:	blt	38978 <__assert_fail@plt+0x25efc>
   38a40:	ldr	r1, [r4, #80]	; 0x50
   38a44:	cmp	r1, #1
   38a48:	add	r1, sp, #4
   38a4c:	blt	38978 <__assert_fail@plt+0x25efc>
   38a50:	ldm	r4, {r1, r3}
   38a54:	mov	lr, r5
   38a58:	ldr	r5, [r4, #24]
   38a5c:	cmp	r2, #2
   38a60:	add	r5, r6, r5
   38a64:	ldrb	r1, [r1, r5]
   38a68:	mov	r5, lr
   38a6c:	ldrb	r0, [r0, r1]
   38a70:	add	r1, sp, #4
   38a74:	strb	r0, [r3, r6]
   38a78:	strb	r0, [sp, #4]
   38a7c:	blt	38978 <__assert_fail@plt+0x25efc>
   38a80:	ldr	r0, [r4, #80]	; 0x50
   38a84:	add	r1, sp, #4
   38a88:	cmp	r0, #2
   38a8c:	blt	38978 <__assert_fail@plt+0x25efc>
   38a90:	mov	r0, #1
   38a94:	ldm	r4, {r1, ip}
   38a98:	ldr	r5, [r4, #24]
   38a9c:	ldr	r3, [r4, #64]	; 0x40
   38aa0:	add	r1, r1, r5
   38aa4:	add	r1, r1, r6
   38aa8:	ldrb	r1, [r1, r0]
   38aac:	ldrb	r1, [r3, r1]
   38ab0:	add	r3, ip, r6
   38ab4:	strb	r1, [r3, r0]
   38ab8:	add	r3, sp, #4
   38abc:	strb	r1, [r3, r0]
   38ac0:	add	r0, r0, #1
   38ac4:	cmp	r0, r2
   38ac8:	bge	38ad8 <__assert_fail@plt+0x2605c>
   38acc:	ldr	r1, [r4, #80]	; 0x50
   38ad0:	cmp	r0, r1
   38ad4:	blt	38a94 <__assert_fail@plt+0x26018>
   38ad8:	add	r1, sp, #4
   38adc:	mov	r5, lr
   38ae0:	b	38978 <__assert_fail@plt+0x25efc>
   38ae4:	stm	r8, {r9, sl}
   38ae8:	mov	r1, r6
   38aec:	str	r1, [r4, #28]
   38af0:	str	r1, [r4, #32]
   38af4:	sub	sp, fp, #28
   38af8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38afc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38b00:	add	fp, sp, #28
   38b04:	sub	sp, sp, #28
   38b08:	ldr	r9, [r1]
   38b0c:	mov	r5, r0
   38b10:	ldr	r4, [fp, #12]
   38b14:	mov	r6, r2
   38b18:	str	r1, [sp, #16]
   38b1c:	str	r3, [sp, #20]
   38b20:	ldr	r0, [r9, #84]	; 0x54
   38b24:	str	r4, [sp, #4]
   38b28:	str	r0, [sp, #12]
   38b2c:	ldr	r0, [fp, #8]
   38b30:	str	r0, [sp]
   38b34:	mov	r0, r5
   38b38:	bl	395a4 <__assert_fail@plt+0x26b28>
   38b3c:	mov	r7, r0
   38b40:	cmp	r0, #0
   38b44:	bne	38b54 <__assert_fail@plt+0x260d8>
   38b48:	ldr	r0, [r4]
   38b4c:	cmp	r0, #0
   38b50:	bne	38d64 <__assert_fail@plt+0x262e8>
   38b54:	ldrb	r0, [r6, #4]
   38b58:	cmp	r0, #10
   38b5c:	bne	38ca0 <__assert_fail@plt+0x26224>
   38b60:	ldr	r0, [sp, #20]
   38b64:	mov	sl, #0
   38b68:	orr	r0, r0, #8388608	; 0x800000
   38b6c:	str	r0, [sp, #24]
   38b70:	b	38c10 <__assert_fail@plt+0x26194>
   38b74:	ldr	r1, [fp, #8]
   38b78:	cmp	r1, #0
   38b7c:	beq	38b8c <__assert_fail@plt+0x26110>
   38b80:	cmp	r0, #9
   38b84:	mov	r8, #0
   38b88:	beq	38c40 <__assert_fail@plt+0x261c4>
   38b8c:	ldr	r0, [sp, #12]
   38b90:	ldr	r4, [r9, #84]	; 0x54
   38b94:	ldr	r1, [sp, #16]
   38b98:	ldr	r3, [sp, #20]
   38b9c:	mov	r2, r6
   38ba0:	str	r0, [r9, #84]	; 0x54
   38ba4:	ldr	r0, [fp, #8]
   38ba8:	str	r0, [sp]
   38bac:	ldr	r0, [fp, #12]
   38bb0:	str	r0, [sp, #4]
   38bb4:	mov	r0, r5
   38bb8:	bl	395a4 <__assert_fail@plt+0x26b28>
   38bbc:	mov	r8, r0
   38bc0:	cmp	r0, #0
   38bc4:	bne	38bd8 <__assert_fail@plt+0x2615c>
   38bc8:	ldr	r0, [fp, #12]
   38bcc:	ldr	r0, [r0]
   38bd0:	cmp	r0, #0
   38bd4:	bne	38cb0 <__assert_fail@plt+0x26234>
   38bd8:	ldr	r0, [r9, #84]	; 0x54
   38bdc:	orr	r0, r0, r4
   38be0:	str	r0, [r9, #84]	; 0x54
   38be4:	b	38c40 <__assert_fail@plt+0x261c4>
   38be8:	mov	r0, #996	; 0x3e4
   38bec:	bl	3233c <__assert_fail@plt+0x1f8c0>
   38bf0:	cmp	r0, #0
   38bf4:	beq	38d58 <__assert_fail@plt+0x262dc>
   38bf8:	ldr	r1, [r9, #56]	; 0x38
   38bfc:	str	r1, [r0]
   38c00:	mov	r1, #0
   38c04:	str	r1, [r9, #64]	; 0x40
   38c08:	str	r0, [r9, #56]	; 0x38
   38c0c:	b	38c50 <__assert_fail@plt+0x261d4>
   38c10:	ldr	r2, [sp, #24]
   38c14:	mov	r0, r6
   38c18:	mov	r1, r5
   38c1c:	bl	38d6c <__assert_fail@plt+0x262f0>
   38c20:	ldr	r1, [r5, #40]	; 0x28
   38c24:	mov	r8, #0
   38c28:	add	r0, r1, r0
   38c2c:	str	r0, [r5, #40]	; 0x28
   38c30:	ldrb	r0, [r6, #4]
   38c34:	orr	r1, r0, #8
   38c38:	cmp	r1, #10
   38c3c:	bne	38b74 <__assert_fail@plt+0x260f8>
   38c40:	ldr	r1, [r9, #64]	; 0x40
   38c44:	cmp	r1, #31
   38c48:	beq	38be8 <__assert_fail@plt+0x2616c>
   38c4c:	ldr	r0, [r9, #56]	; 0x38
   38c50:	add	r2, r1, #1
   38c54:	add	r4, r0, r1, lsl #5
   38c58:	mov	r0, #10
   38c5c:	cmp	r7, #0
   38c60:	str	r2, [r9, #64]	; 0x40
   38c64:	str	sl, [r4, #4]!
   38c68:	stmib	r4, {r7, r8, sl}
   38c6c:	str	sl, [r4, #16]
   38c70:	str	sl, [r4, #20]
   38c74:	str	r0, [r4, #24]
   38c78:	mvn	r0, #0
   38c7c:	str	r0, [r4, #28]
   38c80:	strne	r4, [r7]
   38c84:	cmp	r8, #0
   38c88:	mov	r7, r4
   38c8c:	strne	r4, [r8]
   38c90:	ldrb	r0, [r6, #4]
   38c94:	cmp	r0, #10
   38c98:	beq	38c10 <__assert_fail@plt+0x26194>
   38c9c:	b	38ca4 <__assert_fail@plt+0x26228>
   38ca0:	mov	r4, r7
   38ca4:	mov	r0, r4
   38ca8:	sub	sp, fp, #28
   38cac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38cb0:	mov	r4, #0
   38cb4:	cmp	r7, #0
   38cb8:	beq	38ca4 <__assert_fail@plt+0x26228>
   38cbc:	movw	r8, #255	; 0xff
   38cc0:	movt	r8, #4
   38cc4:	mov	r6, r7
   38cc8:	ldr	r7, [r7, #4]
   38ccc:	cmp	r7, #0
   38cd0:	bne	38cc4 <__assert_fail@plt+0x26248>
   38cd4:	ldr	r7, [r6, #8]
   38cd8:	cmp	r7, #0
   38cdc:	bne	38cc4 <__assert_fail@plt+0x26248>
   38ce0:	ldr	r0, [r6, #24]
   38ce4:	and	r0, r0, r8
   38ce8:	cmp	r0, #3
   38cec:	beq	38d24 <__assert_fail@plt+0x262a8>
   38cf0:	cmp	r0, #6
   38cf4:	bne	38d2c <__assert_fail@plt+0x262b0>
   38cf8:	ldr	r5, [r6, #20]
   38cfc:	ldr	r0, [r5]
   38d00:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   38d04:	ldr	r0, [r5, #4]
   38d08:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   38d0c:	ldr	r0, [r5, #8]
   38d10:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   38d14:	ldr	r0, [r5, #12]
   38d18:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   38d1c:	mov	r0, r5
   38d20:	b	38d28 <__assert_fail@plt+0x262ac>
   38d24:	ldr	r0, [r6, #20]
   38d28:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   38d2c:	ldr	r0, [r6]
   38d30:	cmp	r0, #0
   38d34:	beq	38ca4 <__assert_fail@plt+0x26228>
   38d38:	ldr	r7, [r0, #8]
   38d3c:	cmp	r7, r6
   38d40:	mov	r6, r0
   38d44:	beq	38ce0 <__assert_fail@plt+0x26264>
   38d48:	cmp	r7, #0
   38d4c:	mov	r6, r0
   38d50:	beq	38ce0 <__assert_fail@plt+0x26264>
   38d54:	b	38cc4 <__assert_fail@plt+0x26248>
   38d58:	ldr	r1, [fp, #12]
   38d5c:	mov	r0, #12
   38d60:	str	r0, [r1]
   38d64:	mov	r4, #0
   38d68:	b	38ca4 <__assert_fail@plt+0x26228>
   38d6c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   38d70:	add	fp, sp, #24
   38d74:	sub	sp, sp, #8
   38d78:	mov	r9, r0
   38d7c:	mov	r7, r1
   38d80:	ldr	r0, [r1, #40]	; 0x28
   38d84:	ldr	r1, [r1, #56]	; 0x38
   38d88:	cmp	r1, r0
   38d8c:	ble	38e74 <__assert_fail@plt+0x263f8>
   38d90:	ldr	r1, [r7, #4]
   38d94:	mov	r5, r9
   38d98:	mov	r8, r2
   38d9c:	ldrb	r6, [r1, r0]
   38da0:	strb	r6, [r5], #4
   38da4:	ldr	r0, [r5]
   38da8:	bic	r1, r0, #6291456	; 0x600000
   38dac:	str	r1, [r5]
   38db0:	ldr	r3, [r7, #80]	; 0x50
   38db4:	cmp	r3, #2
   38db8:	blt	38ddc <__assert_fail@plt+0x26360>
   38dbc:	ldr	r2, [r7, #28]
   38dc0:	ldr	r1, [r7, #40]	; 0x28
   38dc4:	cmp	r1, r2
   38dc8:	beq	38ddc <__assert_fail@plt+0x26360>
   38dcc:	ldr	r2, [r7, #8]
   38dd0:	ldr	r1, [r2, r1, lsl #2]
   38dd4:	cmn	r1, #1
   38dd8:	beq	392b0 <__assert_fail@plt+0x26834>
   38ddc:	movw	r1, #65280	; 0xff00
   38de0:	cmp	r6, #92	; 0x5c
   38de4:	movt	r1, #65439	; 0xff9f
   38de8:	bne	38e84 <__assert_fail@plt+0x26408>
   38dec:	ldr	r6, [r7, #40]	; 0x28
   38df0:	ldr	r4, [r7, #48]	; 0x30
   38df4:	add	r2, r6, #1
   38df8:	cmp	r2, r4
   38dfc:	bge	38ed8 <__assert_fail@plt+0x2645c>
   38e00:	ldrb	r4, [r7, #75]	; 0x4b
   38e04:	cmp	r4, #0
   38e08:	bne	39534 <__assert_fail@plt+0x26ab8>
   38e0c:	ldr	r3, [r7, #4]
   38e10:	ldrb	r6, [r3, r2]
   38e14:	and	r0, r0, r1
   38e18:	strb	r6, [r9]
   38e1c:	orr	r4, r0, #1
   38e20:	str	r4, [r9, #4]
   38e24:	ldr	r0, [r7, #80]	; 0x50
   38e28:	cmp	r0, #2
   38e2c:	blt	390fc <__assert_fail@plt+0x26680>
   38e30:	ldr	r0, [r7, #8]
   38e34:	ldr	r1, [r7, #40]	; 0x28
   38e38:	add	r0, r0, r1, lsl #2
   38e3c:	ldr	r4, [r0, #4]
   38e40:	mov	r0, r4
   38e44:	bl	127dc <iswalnum@plt>
   38e48:	sub	r1, r4, #95	; 0x5f
   38e4c:	cmp	r0, #0
   38e50:	clz	r1, r1
   38e54:	movwne	r0, #1
   38e58:	lsr	r1, r1, #5
   38e5c:	orr	r0, r1, r0
   38e60:	ldr	r1, [r5]
   38e64:	bic	r1, r1, #4194304	; 0x400000
   38e68:	orr	r0, r1, r0, lsl #22
   38e6c:	uxtb	r1, r6
   38e70:	b	39120 <__assert_fail@plt+0x266a4>
   38e74:	mov	r0, #2
   38e78:	mov	r4, #0
   38e7c:	strb	r0, [r9, #4]
   38e80:	b	39528 <__assert_fail@plt+0x26aac>
   38e84:	and	r0, r0, r1
   38e88:	orr	r4, r0, #1
   38e8c:	str	r4, [r5]
   38e90:	ldr	r0, [r7, #80]	; 0x50
   38e94:	cmp	r0, #2
   38e98:	blt	38ee4 <__assert_fail@plt+0x26468>
   38e9c:	ldr	r0, [r7, #8]
   38ea0:	ldr	r1, [r7, #40]	; 0x28
   38ea4:	ldr	r4, [r0, r1, lsl #2]
   38ea8:	mov	r0, r4
   38eac:	bl	127dc <iswalnum@plt>
   38eb0:	sub	r1, r4, #95	; 0x5f
   38eb4:	cmp	r0, #0
   38eb8:	clz	r1, r1
   38ebc:	movwne	r0, #1
   38ec0:	lsr	r1, r1, #5
   38ec4:	orr	r0, r1, r0
   38ec8:	ldr	r1, [r5]
   38ecc:	bic	r1, r1, #4194304	; 0x400000
   38ed0:	orr	r0, r1, r0, lsl #22
   38ed4:	b	38f04 <__assert_fail@plt+0x26488>
   38ed8:	and	r0, r0, r1
   38edc:	orr	r0, r0, #36	; 0x24
   38ee0:	b	392c4 <__assert_fail@plt+0x26848>
   38ee4:	bl	12740 <__ctype_b_loc@plt>
   38ee8:	ldr	r0, [r0]
   38eec:	cmp	r6, #95	; 0x5f
   38ef0:	add	r0, r0, r6, lsl #1
   38ef4:	ldrh	r0, [r0]
   38ef8:	ubfx	r0, r0, #3, #1
   38efc:	movweq	r0, #1
   38f00:	orr	r0, r4, r0, lsl #22
   38f04:	sub	r1, r6, #10
   38f08:	mov	r4, #1
   38f0c:	str	r0, [r5]
   38f10:	cmp	r1, #115	; 0x73
   38f14:	bhi	39528 <__assert_fail@plt+0x26aac>
   38f18:	add	r2, pc, #0
   38f1c:	ldr	pc, [r2, r1, lsl #2]
   38f20:	strdeq	r9, [r3], -r0
   38f24:	andeq	r9, r3, r8, lsr #10
   38f28:	andeq	r9, r3, r8, lsr #10
   38f2c:	andeq	r9, r3, r8, lsr #10
   38f30:	andeq	r9, r3, r8, lsr #10
   38f34:	andeq	r9, r3, r8, lsr #10
   38f38:	andeq	r9, r3, r8, lsr #10
   38f3c:	andeq	r9, r3, r8, lsr #10
   38f40:	andeq	r9, r3, r8, lsr #10
   38f44:	andeq	r9, r3, r8, lsr #10
   38f48:	andeq	r9, r3, r8, lsr #10
   38f4c:	andeq	r9, r3, r8, lsr #10
   38f50:	andeq	r9, r3, r8, lsr #10
   38f54:	andeq	r9, r3, r8, lsr #10
   38f58:	andeq	r9, r3, r8, lsr #10
   38f5c:	andeq	r9, r3, r8, lsr #10
   38f60:	andeq	r9, r3, r8, lsr #10
   38f64:	andeq	r9, r3, r8, lsr #10
   38f68:	andeq	r9, r3, r8, lsr #10
   38f6c:	andeq	r9, r3, r8, lsr #10
   38f70:	andeq	r9, r3, r8, lsr #10
   38f74:	andeq	r9, r3, r8, lsr #10
   38f78:	andeq	r9, r3, r8, lsr #10
   38f7c:	andeq	r9, r3, r8, lsr #10
   38f80:	andeq	r9, r3, r8, lsr #10
   38f84:	andeq	r9, r3, r8, lsr #10
   38f88:	ldrdeq	r9, [r3], -r0
   38f8c:	andeq	r9, r3, r8, lsr #10
   38f90:	andeq	r9, r3, r8, lsr #10
   38f94:	andeq	r9, r3, r8, lsr #10
   38f98:	andeq	r9, r3, r8, lsr #6
   38f9c:	andeq	r9, r3, r4, lsr r3
   38fa0:	andeq	r9, r3, r0, asr #6
   38fa4:	andeq	r9, r3, r8, asr #6
   38fa8:	andeq	r9, r3, r8, lsr #10
   38fac:	andeq	r9, r3, r8, lsr #10
   38fb0:	andeq	r9, r3, r8, asr r3
   38fb4:	andeq	r9, r3, r8, lsr #10
   38fb8:	andeq	r9, r3, r8, lsr #10
   38fbc:	andeq	r9, r3, r8, lsr #10
   38fc0:	andeq	r9, r3, r8, lsr #10
   38fc4:	andeq	r9, r3, r8, lsr #10
   38fc8:	andeq	r9, r3, r8, lsr #10
   38fcc:	andeq	r9, r3, r8, lsr #10
   38fd0:	andeq	r9, r3, r8, lsr #10
   38fd4:	andeq	r9, r3, r8, lsr #10
   38fd8:	andeq	r9, r3, r8, lsr #10
   38fdc:	andeq	r9, r3, r8, lsr #10
   38fe0:	andeq	r9, r3, r8, lsr #10
   38fe4:	andeq	r9, r3, r8, lsr #10
   38fe8:	andeq	r9, r3, r8, lsr #10
   38fec:	andeq	r9, r3, r8, lsr #10
   38ff0:	andeq	r9, r3, r8, lsr #10
   38ff4:	andeq	r9, r3, r0, ror #6
   38ff8:	andeq	r9, r3, r8, lsr #10
   38ffc:	andeq	r9, r3, r8, lsr #10
   39000:	andeq	r9, r3, r8, lsr #10
   39004:	andeq	r9, r3, r8, lsr #10
   39008:	andeq	r9, r3, r8, lsr #10
   3900c:	andeq	r9, r3, r8, lsr #10
   39010:	andeq	r9, r3, r8, lsr #10
   39014:	andeq	r9, r3, r8, lsr #10
   39018:	andeq	r9, r3, r8, lsr #10
   3901c:	andeq	r9, r3, r8, lsr #10
   39020:	andeq	r9, r3, r8, lsr #10
   39024:	andeq	r9, r3, r8, lsr #10
   39028:	andeq	r9, r3, r8, lsr #10
   3902c:	andeq	r9, r3, r8, lsr #10
   39030:	andeq	r9, r3, r8, lsr #10
   39034:	andeq	r9, r3, r8, lsr #10
   39038:	andeq	r9, r3, r8, lsr #10
   3903c:	andeq	r9, r3, r8, lsr #10
   39040:	andeq	r9, r3, r8, lsr #10
   39044:	andeq	r9, r3, r8, lsr #10
   39048:	andeq	r9, r3, r8, lsr #10
   3904c:	andeq	r9, r3, r8, lsr #10
   39050:	andeq	r9, r3, r8, lsr #10
   39054:	andeq	r9, r3, r8, lsr #10
   39058:	andeq	r9, r3, r8, lsr #10
   3905c:	andeq	r9, r3, r8, lsr #10
   39060:	andeq	r9, r3, r8, lsr #10
   39064:	andeq	r9, r3, r0, ror r3
   39068:	andeq	r9, r3, r8, lsr #10
   3906c:	andeq	r9, r3, r8, lsr #10
   39070:	andeq	r9, r3, r8, ror r3
   39074:	andeq	r9, r3, r8, lsr #10
   39078:	andeq	r9, r3, r8, lsr #10
   3907c:	andeq	r9, r3, r8, lsr #10
   39080:	andeq	r9, r3, r8, lsr #10
   39084:	andeq	r9, r3, r8, lsr #10
   39088:	andeq	r9, r3, r8, lsr #10
   3908c:	andeq	r9, r3, r8, lsr #10
   39090:	andeq	r9, r3, r8, lsr #10
   39094:	andeq	r9, r3, r8, lsr #10
   39098:	andeq	r9, r3, r8, lsr #10
   3909c:	andeq	r9, r3, r8, lsr #10
   390a0:	andeq	r9, r3, r8, lsr #10
   390a4:	andeq	r9, r3, r8, lsr #10
   390a8:	andeq	r9, r3, r8, lsr #10
   390ac:	andeq	r9, r3, r8, lsr #10
   390b0:	andeq	r9, r3, r8, lsr #10
   390b4:	andeq	r9, r3, r8, lsr #10
   390b8:	andeq	r9, r3, r8, lsr #10
   390bc:	andeq	r9, r3, r8, lsr #10
   390c0:	andeq	r9, r3, r8, lsr #10
   390c4:	andeq	r9, r3, r8, lsr #10
   390c8:	andeq	r9, r3, r8, lsr #10
   390cc:	andeq	r9, r3, r8, lsr #10
   390d0:	andeq	r9, r3, r8, lsr #10
   390d4:	andeq	r9, r3, r8, lsr #10
   390d8:	andeq	r9, r3, r8, lsr #10
   390dc:	andeq	r9, r3, r8, lsr #10
   390e0:	andeq	r9, r3, r8, lsr #10
   390e4:	andeq	r9, r3, r0, lsr #7
   390e8:			; <UNDEFINED> instruction: 0x000393b0
   390ec:	andeq	r9, r3, r4, asr #7
   390f0:	tst	r8, #2048	; 0x800
   390f4:	bne	393bc <__assert_fail@plt+0x26940>
   390f8:	b	39528 <__assert_fail@plt+0x26aac>
   390fc:	bl	12740 <__ctype_b_loc@plt>
   39100:	ldr	r0, [r0]
   39104:	uxtb	r1, r6
   39108:	cmp	r1, #95	; 0x5f
   3910c:	add	r0, r0, r1, lsl #1
   39110:	ldrh	r0, [r0]
   39114:	ubfx	r0, r0, #3, #1
   39118:	movweq	r0, #1
   3911c:	orr	r0, r4, r0, lsl #22
   39120:	mvn	r2, #38	; 0x26
   39124:	mov	r4, #2
   39128:	str	r0, [r5]
   3912c:	uxtab	r2, r2, r6
   39130:	cmp	r2, #86	; 0x56
   39134:	bhi	39528 <__assert_fail@plt+0x26aac>
   39138:	add	r3, pc, #0
   3913c:	ldr	pc, [r3, r2, lsl #2]
   39140:	andeq	r9, r3, r0, lsl #8
   39144:	andeq	r9, r3, r0, lsl r4
   39148:	andeq	r9, r3, r0, lsr #8
   3914c:	andeq	r9, r3, r8, lsr #10
   39150:	andeq	r9, r3, r0, lsr r4
   39154:	andeq	r9, r3, r8, lsr #10
   39158:	andeq	r9, r3, r8, lsr #10
   3915c:	andeq	r9, r3, r8, lsr #10
   39160:	andeq	r9, r3, r8, lsr #10
   39164:	andeq	r9, r3, r8, lsr #10
   39168:	muleq	r3, ip, r2
   3916c:	muleq	r3, ip, r2
   39170:	muleq	r3, ip, r2
   39174:	muleq	r3, ip, r2
   39178:	muleq	r3, ip, r2
   3917c:	muleq	r3, ip, r2
   39180:	muleq	r3, ip, r2
   39184:	muleq	r3, ip, r2
   39188:	muleq	r3, ip, r2
   3918c:	andeq	r9, r3, r8, lsr #10
   39190:	andeq	r9, r3, r8, lsr #10
   39194:	andeq	r9, r3, r8, asr #8
   39198:	andeq	r9, r3, r8, lsr #10
   3919c:	andeq	r9, r3, r8, asr r4
   391a0:	andeq	r9, r3, r8, ror #8
   391a4:	andeq	r9, r3, r8, lsr #10
   391a8:	andeq	r9, r3, r8, lsr #10
   391ac:	andeq	r9, r3, r0, lsl #9
   391b0:	andeq	r9, r3, r8, lsr #10
   391b4:	andeq	r9, r3, r8, lsr #10
   391b8:	andeq	r9, r3, r8, lsr #10
   391bc:	andeq	r9, r3, r8, lsr #10
   391c0:	andeq	r9, r3, r8, lsr #10
   391c4:	andeq	r9, r3, r8, lsr #10
   391c8:	andeq	r9, r3, r8, lsr #10
   391cc:	andeq	r9, r3, r8, lsr #10
   391d0:	andeq	r9, r3, r8, lsr #10
   391d4:	andeq	r9, r3, r8, lsr #10
   391d8:	andeq	r9, r3, r8, lsr #10
   391dc:	andeq	r9, r3, r8, lsr #10
   391e0:	andeq	r9, r3, r8, lsr #10
   391e4:	andeq	r9, r3, r8, lsr #10
   391e8:	andeq	r9, r3, r8, lsr #10
   391ec:	andeq	r9, r3, r8, lsr #10
   391f0:	muleq	r3, r0, r4
   391f4:	andeq	r9, r3, r8, lsr #10
   391f8:	andeq	r9, r3, r8, lsr #10
   391fc:	andeq	r9, r3, r8, lsr #10
   39200:	andeq	r9, r3, r0, lsr #9
   39204:	andeq	r9, r3, r8, lsr #10
   39208:	andeq	r9, r3, r8, lsr #10
   3920c:	andeq	r9, r3, r8, lsr #10
   39210:	andeq	r9, r3, r8, lsr #10
   39214:	andeq	r9, r3, r8, lsr #10
   39218:	andeq	r9, r3, r8, lsr #10
   3921c:	andeq	r9, r3, r8, lsr #10
   39220:	andeq	r9, r3, r8, lsr #10
   39224:			; <UNDEFINED> instruction: 0x000394b0
   39228:	andeq	r9, r3, r8, lsr #10
   3922c:	andeq	r9, r3, r0, asr #9
   39230:	andeq	r9, r3, r8, lsr #10
   39234:	andeq	r9, r3, r8, lsr #10
   39238:	andeq	r9, r3, r8, lsr #10
   3923c:	andeq	r9, r3, r8, lsr #10
   39240:	andeq	r9, r3, r8, lsr #10
   39244:	andeq	r9, r3, r8, lsr #10
   39248:	andeq	r9, r3, r8, lsr #10
   3924c:	andeq	r9, r3, r8, lsr #10
   39250:	andeq	r9, r3, r8, lsr #10
   39254:	andeq	r9, r3, r8, lsr #10
   39258:	andeq	r9, r3, r8, lsr #10
   3925c:	andeq	r9, r3, r8, lsr #10
   39260:	andeq	r9, r3, r8, lsr #10
   39264:	andeq	r9, r3, r8, lsr #10
   39268:	andeq	r9, r3, r8, lsr #10
   3926c:	andeq	r9, r3, r8, lsr #10
   39270:	ldrdeq	r9, [r3], -r0
   39274:	andeq	r9, r3, r8, lsr #10
   39278:	andeq	r9, r3, r8, lsr #10
   3927c:	andeq	r9, r3, r8, lsr #10
   39280:	andeq	r9, r3, r0, ror #9
   39284:	andeq	r9, r3, r8, lsr #10
   39288:	andeq	r9, r3, r8, lsr #10
   3928c:	andeq	r9, r3, r8, lsr #10
   39290:	strdeq	r9, [r3], -r0
   39294:	andeq	r9, r3, r4, lsl #10
   39298:	andeq	r9, r3, r0, lsl r5
   3929c:	tst	r8, #16384	; 0x4000
   392a0:	bne	39528 <__assert_fail@plt+0x26aac>
   392a4:	sub	r1, r1, #49	; 0x31
   392a8:	mov	r2, #4
   392ac:	b	39390 <__assert_fail@plt+0x26914>
   392b0:	movw	r1, #65280	; 0xff00
   392b4:	movt	r1, #65439	; 0xff9f
   392b8:	and	r0, r0, r1
   392bc:	orr	r0, r0, #1
   392c0:	orr	r0, r0, #2097152	; 0x200000
   392c4:	str	r0, [r5]
   392c8:	mov	r4, #1
   392cc:	b	39528 <__assert_fail@plt+0x26aac>
   392d0:	tst	r8, #8
   392d4:	bne	39320 <__assert_fail@plt+0x268a4>
   392d8:	ldr	r1, [r7, #40]	; 0x28
   392dc:	ldr	r2, [r7, #48]	; 0x30
   392e0:	add	r1, r1, #1
   392e4:	cmp	r1, r2
   392e8:	beq	39320 <__assert_fail@plt+0x268a4>
   392ec:	str	r1, [r7, #40]	; 0x28
   392f0:	mov	r0, sp
   392f4:	mov	r1, r7
   392f8:	mov	r2, r8
   392fc:	bl	38d6c <__assert_fail@plt+0x262f0>
   39300:	ldr	r0, [r7, #40]	; 0x28
   39304:	sub	r0, r0, #1
   39308:	str	r0, [r7, #40]	; 0x28
   3930c:	ldrb	r0, [sp, #4]
   39310:	sub	r0, r0, #9
   39314:	cmp	r0, #1
   39318:	bhi	39528 <__assert_fail@plt+0x26aac>
   3931c:	ldr	r0, [r5]
   39320:	mov	r1, #32
   39324:	b	3938c <__assert_fail@plt+0x26910>
   39328:	tst	r8, #8192	; 0x2000
   3932c:	bne	39418 <__assert_fail@plt+0x2699c>
   39330:	b	39528 <__assert_fail@plt+0x26aac>
   39334:	tst	r8, #8192	; 0x2000
   39338:	bne	39428 <__assert_fail@plt+0x269ac>
   3933c:	b	39528 <__assert_fail@plt+0x26aac>
   39340:	mov	r1, #11
   39344:	b	39520 <__assert_fail@plt+0x26aa4>
   39348:	movw	r1, #1026	; 0x402
   3934c:	tst	r8, r1
   39350:	bne	39528 <__assert_fail@plt+0x26aac>
   39354:	b	39440 <__assert_fail@plt+0x269c4>
   39358:	mov	r1, #5
   3935c:	b	39520 <__assert_fail@plt+0x26aa4>
   39360:	movw	r1, #1026	; 0x402
   39364:	tst	r8, r1
   39368:	bne	39528 <__assert_fail@plt+0x26aac>
   3936c:	b	39478 <__assert_fail@plt+0x269fc>
   39370:	mov	r1, #20
   39374:	b	39520 <__assert_fail@plt+0x26aa4>
   39378:	movw	r1, #8
   3937c:	movt	r1, #128	; 0x80
   39380:	tst	r8, r1
   39384:	beq	393d4 <__assert_fail@plt+0x26958>
   39388:	mov	r1, #16
   3938c:	mov	r2, #12
   39390:	bfi	r0, r2, #0, #8
   39394:	str	r1, [r9]
   39398:	str	r0, [r9, #4]
   3939c:	b	39528 <__assert_fail@plt+0x26aac>
   393a0:	and	r1, r8, #4608	; 0x1200
   393a4:	cmp	r1, #4608	; 0x1200
   393a8:	beq	394fc <__assert_fail@plt+0x26a80>
   393ac:	b	39528 <__assert_fail@plt+0x26aac>
   393b0:	and	r1, r8, #33792	; 0x8400
   393b4:	cmp	r1, #32768	; 0x8000
   393b8:	bne	39528 <__assert_fail@plt+0x26aac>
   393bc:	mov	r1, #10
   393c0:	b	39520 <__assert_fail@plt+0x26aa4>
   393c4:	and	r1, r8, #4608	; 0x1200
   393c8:	cmp	r1, #4608	; 0x1200
   393cc:	beq	3951c <__assert_fail@plt+0x26aa0>
   393d0:	b	39528 <__assert_fail@plt+0x26aac>
   393d4:	ldr	r1, [r7, #40]	; 0x28
   393d8:	cmp	r1, #0
   393dc:	beq	39388 <__assert_fail@plt+0x2690c>
   393e0:	tst	r8, #2048	; 0x800
   393e4:	beq	39528 <__assert_fail@plt+0x26aac>
   393e8:	ldr	r2, [r7, #4]
   393ec:	add	r1, r2, r1
   393f0:	ldrb	r1, [r1, #-1]
   393f4:	cmp	r1, #10
   393f8:	beq	39388 <__assert_fail@plt+0x2690c>
   393fc:	b	39528 <__assert_fail@plt+0x26aac>
   39400:	tst	r8, #524288	; 0x80000
   39404:	bne	39528 <__assert_fail@plt+0x26aac>
   39408:	mov	r1, #128	; 0x80
   3940c:	b	3938c <__assert_fail@plt+0x26910>
   39410:	tst	r8, #8192	; 0x2000
   39414:	bne	39528 <__assert_fail@plt+0x26aac>
   39418:	mov	r1, #8
   3941c:	b	39520 <__assert_fail@plt+0x26aa4>
   39420:	tst	r8, #8192	; 0x2000
   39424:	bne	39528 <__assert_fail@plt+0x26aac>
   39428:	mov	r1, #9
   3942c:	b	39520 <__assert_fail@plt+0x26aa4>
   39430:	movw	r1, #1026	; 0x402
   39434:	and	r1, r8, r1
   39438:	cmp	r1, #2
   3943c:	bne	39528 <__assert_fail@plt+0x26aac>
   39440:	mov	r1, #18
   39444:	b	39520 <__assert_fail@plt+0x26aa4>
   39448:	tst	r8, #524288	; 0x80000
   3944c:	bne	39528 <__assert_fail@plt+0x26aac>
   39450:	mov	r1, #6
   39454:	b	3938c <__assert_fail@plt+0x26910>
   39458:	tst	r8, #524288	; 0x80000
   3945c:	bne	39528 <__assert_fail@plt+0x26aac>
   39460:	mov	r1, #9
   39464:	b	3938c <__assert_fail@plt+0x26910>
   39468:	movw	r1, #1026	; 0x402
   3946c:	and	r1, r8, r1
   39470:	cmp	r1, #2
   39474:	bne	39528 <__assert_fail@plt+0x26aac>
   39478:	mov	r1, #19
   3947c:	b	39520 <__assert_fail@plt+0x26aa4>
   39480:	tst	r8, #524288	; 0x80000
   39484:	bne	39528 <__assert_fail@plt+0x26aac>
   39488:	mov	r1, #512	; 0x200
   3948c:	b	3938c <__assert_fail@plt+0x26910>
   39490:	tst	r8, #524288	; 0x80000
   39494:	bne	39528 <__assert_fail@plt+0x26aac>
   39498:	mov	r1, #35	; 0x23
   3949c:	b	39520 <__assert_fail@plt+0x26aa4>
   394a0:	tst	r8, #524288	; 0x80000
   394a4:	bne	39528 <__assert_fail@plt+0x26aac>
   394a8:	mov	r1, #33	; 0x21
   394ac:	b	39520 <__assert_fail@plt+0x26aa4>
   394b0:	tst	r8, #524288	; 0x80000
   394b4:	bne	39528 <__assert_fail@plt+0x26aac>
   394b8:	mov	r1, #64	; 0x40
   394bc:	b	3938c <__assert_fail@plt+0x26910>
   394c0:	tst	r8, #524288	; 0x80000
   394c4:	bne	39528 <__assert_fail@plt+0x26aac>
   394c8:	mov	r1, #256	; 0x100
   394cc:	b	3938c <__assert_fail@plt+0x26910>
   394d0:	tst	r8, #524288	; 0x80000
   394d4:	bne	39528 <__assert_fail@plt+0x26aac>
   394d8:	mov	r1, #34	; 0x22
   394dc:	b	39520 <__assert_fail@plt+0x26aa4>
   394e0:	tst	r8, #524288	; 0x80000
   394e4:	bne	39528 <__assert_fail@plt+0x26aac>
   394e8:	mov	r1, #32
   394ec:	b	39520 <__assert_fail@plt+0x26aa4>
   394f0:	and	r1, r8, #4608	; 0x1200
   394f4:	cmp	r1, #512	; 0x200
   394f8:	bne	39528 <__assert_fail@plt+0x26aac>
   394fc:	mov	r1, #23
   39500:	b	39520 <__assert_fail@plt+0x26aa4>
   39504:	tst	r8, #33792	; 0x8400
   39508:	bne	39528 <__assert_fail@plt+0x26aac>
   3950c:	b	393bc <__assert_fail@plt+0x26940>
   39510:	and	r1, r8, #4608	; 0x1200
   39514:	cmp	r1, #512	; 0x200
   39518:	bne	39528 <__assert_fail@plt+0x26aac>
   3951c:	mov	r1, #24
   39520:	bfi	r0, r1, #0, #8
   39524:	str	r0, [r5]
   39528:	mov	r0, r4
   3952c:	sub	sp, fp, #24
   39530:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   39534:	cmp	r3, #2
   39538:	blt	39568 <__assert_fail@plt+0x26aec>
   3953c:	ldr	r3, [r7, #8]
   39540:	ldr	r4, [r3, r2, lsl #2]
   39544:	cmn	r4, #1
   39548:	beq	38e0c <__assert_fail@plt+0x26390>
   3954c:	ldr	r4, [r7, #28]
   39550:	add	r6, r6, #2
   39554:	cmp	r4, r6
   39558:	beq	39568 <__assert_fail@plt+0x26aec>
   3955c:	ldr	r3, [r3, r6, lsl #2]
   39560:	cmn	r3, #1
   39564:	beq	38e0c <__assert_fail@plt+0x26390>
   39568:	ldrb	r3, [r7, #76]	; 0x4c
   3956c:	mov	r6, r2
   39570:	ldr	r4, [r7, #24]
   39574:	ldr	ip, [r7]
   39578:	cmp	r3, #0
   3957c:	ldrne	r6, [r7, #12]
   39580:	ldrne	r6, [r6, r2, lsl #2]
   39584:	cmp	r3, #0
   39588:	add	r6, r4, r6
   3958c:	add	r6, ip, r6
   39590:	ldrsb	r6, [r6]
   39594:	beq	38e14 <__assert_fail@plt+0x26398>
   39598:	cmn	r6, #1
   3959c:	ble	38e0c <__assert_fail@plt+0x26390>
   395a0:	b	38e14 <__assert_fail@plt+0x26398>
   395a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   395a8:	add	fp, sp, #28
   395ac:	sub	sp, sp, #20
   395b0:	ldr	r4, [fp, #12]
   395b4:	ldr	r7, [fp, #8]
   395b8:	ldr	sl, [r1]
   395bc:	mov	r6, r2
   395c0:	str	r0, [sp, #12]
   395c4:	str	r1, [sp, #8]
   395c8:	str	r3, [sp, #16]
   395cc:	str	r4, [sp, #4]
   395d0:	str	r7, [sp]
   395d4:	bl	398f0 <__assert_fail@plt+0x26e74>
   395d8:	mov	r3, r4
   395dc:	mov	r4, r0
   395e0:	cmp	r0, #0
   395e4:	bne	39604 <__assert_fail@plt+0x26b88>
   395e8:	ldr	r0, [r3]
   395ec:	cmp	r0, #0
   395f0:	beq	39604 <__assert_fail@plt+0x26b88>
   395f4:	b	398dc <__assert_fail@plt+0x26e60>
   395f8:	cmp	r4, #0
   395fc:	mov	r7, r8
   39600:	moveq	r4, r5
   39604:	ldrb	r0, [r6, #4]
   39608:	orr	r1, r0, #8
   3960c:	cmp	r1, #10
   39610:	beq	398e0 <__assert_fail@plt+0x26e64>
   39614:	cmp	r7, #0
   39618:	beq	39624 <__assert_fail@plt+0x26ba8>
   3961c:	cmp	r0, #9
   39620:	beq	398e0 <__assert_fail@plt+0x26e64>
   39624:	str	r3, [sp, #4]
   39628:	mov	r9, r3
   3962c:	ldr	r0, [sp, #12]
   39630:	ldr	r1, [sp, #8]
   39634:	ldr	r3, [sp, #16]
   39638:	mov	r2, r6
   3963c:	mov	r8, r7
   39640:	str	r7, [sp]
   39644:	bl	398f0 <__assert_fail@plt+0x26e74>
   39648:	mov	r3, r9
   3964c:	mov	r5, r0
   39650:	cmp	r0, #0
   39654:	bne	39664 <__assert_fail@plt+0x26be8>
   39658:	ldr	r0, [r3]
   3965c:	cmp	r0, #0
   39660:	bne	396f4 <__assert_fail@plt+0x26c78>
   39664:	cmp	r4, #0
   39668:	cmpne	r5, #0
   3966c:	beq	395f8 <__assert_fail@plt+0x26b7c>
   39670:	ldr	r1, [sl, #64]	; 0x40
   39674:	cmp	r1, #31
   39678:	beq	396c8 <__assert_fail@plt+0x26c4c>
   3967c:	ldr	r0, [sl, #56]	; 0x38
   39680:	add	r2, r1, #1
   39684:	add	r0, r0, r1, lsl #5
   39688:	mov	r1, #0
   3968c:	mov	r7, r8
   39690:	str	r2, [sl, #64]	; 0x40
   39694:	str	r1, [r0, #4]!
   39698:	stmib	r0, {r4, r5}
   3969c:	str	r1, [r0, #12]
   396a0:	str	r1, [r0, #16]
   396a4:	str	r1, [r0, #20]
   396a8:	mov	r1, #16
   396ac:	str	r1, [r0, #24]
   396b0:	mvn	r1, #0
   396b4:	str	r1, [r0, #28]
   396b8:	str	r0, [r4]
   396bc:	str	r0, [r5]
   396c0:	mov	r4, r0
   396c4:	b	39604 <__assert_fail@plt+0x26b88>
   396c8:	mov	r0, #996	; 0x3e4
   396cc:	bl	3233c <__assert_fail@plt+0x1f8c0>
   396d0:	cmp	r0, #0
   396d4:	beq	39798 <__assert_fail@plt+0x26d1c>
   396d8:	ldr	r1, [sl, #56]	; 0x38
   396dc:	mov	r3, r9
   396e0:	str	r1, [r0]
   396e4:	mov	r1, #0
   396e8:	str	r1, [sl, #64]	; 0x40
   396ec:	str	r0, [sl, #56]	; 0x38
   396f0:	b	39680 <__assert_fail@plt+0x26c04>
   396f4:	cmp	r4, #0
   396f8:	beq	398dc <__assert_fail@plt+0x26e60>
   396fc:	movw	r5, #255	; 0xff
   39700:	movt	r5, #4
   39704:	mov	r6, r4
   39708:	ldr	r4, [r4, #4]
   3970c:	cmp	r4, #0
   39710:	bne	39704 <__assert_fail@plt+0x26c88>
   39714:	ldr	r4, [r6, #8]
   39718:	cmp	r4, #0
   3971c:	bne	39704 <__assert_fail@plt+0x26c88>
   39720:	ldr	r0, [r6, #24]
   39724:	and	r0, r0, r5
   39728:	cmp	r0, #3
   3972c:	beq	39764 <__assert_fail@plt+0x26ce8>
   39730:	cmp	r0, #6
   39734:	bne	3976c <__assert_fail@plt+0x26cf0>
   39738:	ldr	r4, [r6, #20]
   3973c:	ldr	r0, [r4]
   39740:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   39744:	ldr	r0, [r4, #4]
   39748:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3974c:	ldr	r0, [r4, #8]
   39750:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   39754:	ldr	r0, [r4, #12]
   39758:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3975c:	mov	r0, r4
   39760:	b	39768 <__assert_fail@plt+0x26cec>
   39764:	ldr	r0, [r6, #20]
   39768:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3976c:	ldr	r0, [r6]
   39770:	cmp	r0, #0
   39774:	beq	398dc <__assert_fail@plt+0x26e60>
   39778:	ldr	r4, [r0, #8]
   3977c:	cmp	r4, r6
   39780:	mov	r6, r0
   39784:	beq	39720 <__assert_fail@plt+0x26ca4>
   39788:	cmp	r4, #0
   3978c:	mov	r6, r0
   39790:	beq	39720 <__assert_fail@plt+0x26ca4>
   39794:	b	39704 <__assert_fail@plt+0x26c88>
   39798:	movw	r6, #255	; 0xff
   3979c:	mov	r1, r9
   397a0:	movt	r6, #4
   397a4:	mov	r7, r5
   397a8:	ldr	r5, [r5, #4]
   397ac:	cmp	r5, #0
   397b0:	bne	397a4 <__assert_fail@plt+0x26d28>
   397b4:	ldr	r5, [r7, #8]
   397b8:	cmp	r5, #0
   397bc:	bne	397a4 <__assert_fail@plt+0x26d28>
   397c0:	ldr	r0, [r7, #24]
   397c4:	and	r0, r0, r6
   397c8:	cmp	r0, #3
   397cc:	beq	39804 <__assert_fail@plt+0x26d88>
   397d0:	cmp	r0, #6
   397d4:	bne	39810 <__assert_fail@plt+0x26d94>
   397d8:	ldr	r5, [r7, #20]
   397dc:	ldr	r0, [r5]
   397e0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   397e4:	ldr	r0, [r5, #4]
   397e8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   397ec:	ldr	r0, [r5, #8]
   397f0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   397f4:	ldr	r0, [r5, #12]
   397f8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   397fc:	mov	r0, r5
   39800:	b	39808 <__assert_fail@plt+0x26d8c>
   39804:	ldr	r0, [r7, #20]
   39808:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3980c:	mov	r1, r9
   39810:	ldr	r0, [r7]
   39814:	cmp	r0, #0
   39818:	beq	3983c <__assert_fail@plt+0x26dc0>
   3981c:	ldr	r5, [r0, #8]
   39820:	cmp	r5, r7
   39824:	mov	r7, r0
   39828:	beq	397c0 <__assert_fail@plt+0x26d44>
   3982c:	cmp	r5, #0
   39830:	mov	r7, r0
   39834:	beq	397c0 <__assert_fail@plt+0x26d44>
   39838:	b	397a4 <__assert_fail@plt+0x26d28>
   3983c:	mov	r5, r4
   39840:	ldr	r4, [r4, #4]
   39844:	cmp	r4, #0
   39848:	bne	3983c <__assert_fail@plt+0x26dc0>
   3984c:	ldr	r4, [r5, #8]
   39850:	cmp	r4, #0
   39854:	bne	3983c <__assert_fail@plt+0x26dc0>
   39858:	ldr	r0, [r5, #24]
   3985c:	and	r0, r0, r6
   39860:	cmp	r0, #3
   39864:	beq	3989c <__assert_fail@plt+0x26e20>
   39868:	cmp	r0, #6
   3986c:	bne	398a8 <__assert_fail@plt+0x26e2c>
   39870:	ldr	r4, [r5, #20]
   39874:	ldr	r0, [r4]
   39878:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3987c:	ldr	r0, [r4, #4]
   39880:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   39884:	ldr	r0, [r4, #8]
   39888:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3988c:	ldr	r0, [r4, #12]
   39890:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   39894:	mov	r0, r4
   39898:	b	398a0 <__assert_fail@plt+0x26e24>
   3989c:	ldr	r0, [r5, #20]
   398a0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   398a4:	mov	r1, r9
   398a8:	ldr	r0, [r5]
   398ac:	cmp	r0, #0
   398b0:	beq	398d4 <__assert_fail@plt+0x26e58>
   398b4:	ldr	r4, [r0, #8]
   398b8:	cmp	r4, r5
   398bc:	mov	r5, r0
   398c0:	beq	39858 <__assert_fail@plt+0x26ddc>
   398c4:	cmp	r4, #0
   398c8:	mov	r5, r0
   398cc:	beq	39858 <__assert_fail@plt+0x26ddc>
   398d0:	b	3983c <__assert_fail@plt+0x26dc0>
   398d4:	mov	r0, #12
   398d8:	str	r0, [r1]
   398dc:	mov	r4, #0
   398e0:	mov	r0, r4
   398e4:	sub	sp, fp, #28
   398e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   398ec:	nop	{0}
   398f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   398f4:	add	fp, sp, #28
   398f8:	sub	sp, sp, #148	; 0x94
   398fc:	str	r0, [sp, #24]
   39900:	ldr	r0, [r2, #4]
   39904:	mov	r7, r1
   39908:	mov	lr, r2
   3990c:	mvn	r1, #0
   39910:	mov	r6, r3
   39914:	mov	sl, #0
   39918:	ldr	r2, [fp, #12]
   3991c:	ldr	r8, [r7]
   39920:	uxtab	r1, r1, r0
   39924:	cmp	r1, #35	; 0x23
   39928:	str	r2, [sp, #16]
   3992c:	str	lr, [sp, #44]	; 0x2c
   39930:	bhi	39a5c <__assert_fail@plt+0x26fe0>
   39934:	add	r2, pc, #0
   39938:	ldr	pc, [r2, r1, lsl #2]
   3993c:	andeq	r9, r3, r8, lsl sp
   39940:	andeq	fp, r3, r8, ror #13
   39944:	andeq	r9, r3, ip, asr sl
   39948:	andeq	r9, r3, r0, ror #21
   3994c:	andeq	r9, r3, r0, ror #22
   39950:	andeq	r9, r3, ip, asr sl
   39954:	andeq	r9, r3, ip, asr sl
   39958:	andeq	r9, r3, r8, asr #23
   3995c:	andeq	r9, r3, ip, ror #20
   39960:	andeq	fp, r3, r8, ror #13
   39964:	andeq	r9, r3, ip, asr sl
   39968:	andeq	r9, r3, r0, asr ip
   3996c:	andeq	r9, r3, ip, asr sl
   39970:	andeq	r9, r3, ip, asr sl
   39974:	andeq	r9, r3, ip, asr sl
   39978:	andeq	r9, r3, ip, asr sl
   3997c:	andeq	r9, r3, ip, asr sl
   39980:	andeq	r9, r3, ip, asr sl
   39984:	andeq	r9, r3, ip, asr sl
   39988:	andeq	r9, r3, r8, ror #29
   3998c:	andeq	r9, r3, ip, asr sl
   39990:	andeq	r9, r3, ip, asr sl
   39994:	andeq	r9, r3, r4, asr sl
   39998:	andeq	r9, r3, ip, ror sl
   3999c:	andeq	r9, r3, ip, asr sl
   399a0:	andeq	r9, r3, ip, asr sl
   399a4:	andeq	r9, r3, ip, asr sl
   399a8:	andeq	r9, r3, ip, asr sl
   399ac:	andeq	r9, r3, ip, asr sl
   399b0:	andeq	r9, r3, ip, asr sl
   399b4:	andeq	r9, r3, ip, asr sl
   399b8:	andeq	r9, r3, ip, asr #19
   399bc:	andeq	r9, r3, ip, asr #19
   399c0:	strdeq	r9, [r3], -r0
   399c4:	strdeq	r9, [r3], -r0
   399c8:	andeq	r9, r3, r0, ror #29
   399cc:	ldr	r1, [sp, #24]
   399d0:	mvn	r2, #32
   399d4:	movw	r3, #52012	; 0xcb2c
   399d8:	uxtab	r0, r2, r0
   399dc:	movw	r2, #52006	; 0xcb26
   399e0:	movt	r3, #4
   399e4:	clz	r0, r0
   399e8:	movt	r2, #4
   399ec:	b	39a10 <__assert_fail@plt+0x26f94>
   399f0:	ldr	r1, [sp, #24]
   399f4:	mvn	r2, #34	; 0x22
   399f8:	movw	r3, #34847	; 0x881f
   399fc:	uxtab	r0, r2, r0
   39a00:	movw	r2, #52014	; 0xcb2e
   39a04:	movt	r3, #4
   39a08:	clz	r0, r0
   39a0c:	movt	r2, #4
   39a10:	lsr	r0, r0, #5
   39a14:	ldr	r1, [r1, #64]	; 0x40
   39a18:	str	r0, [sp]
   39a1c:	ldr	r4, [sp, #16]
   39a20:	str	r4, [sp, #4]
   39a24:	mov	r0, r8
   39a28:	bl	3bd2c <__assert_fail@plt+0x292b0>
   39a2c:	mov	r7, r0
   39a30:	cmp	r0, #0
   39a34:	bne	39a4c <__assert_fail@plt+0x26fd0>
   39a38:	ldr	r0, [r4]
   39a3c:	cmp	r0, #0
   39a40:	ldr	lr, [sp, #44]	; 0x2c
   39a44:	beq	3a984 <__assert_fail@plt+0x27f08>
   39a48:	b	3b6e8 <__assert_fail@plt+0x28c6c>
   39a4c:	ldr	lr, [sp, #44]	; 0x2c
   39a50:	b	3a984 <__assert_fail@plt+0x27f08>
   39a54:	tst	r6, #16777216	; 0x1000000
   39a58:	bne	39ad8 <__assert_fail@plt+0x2705c>
   39a5c:	tst	r6, #32
   39a60:	bne	39ad8 <__assert_fail@plt+0x2705c>
   39a64:	tst	r6, #16
   39a68:	bne	39f64 <__assert_fail@plt+0x274e8>
   39a6c:	tst	r6, #131072	; 0x20000
   39a70:	uxtbeq	r1, r0
   39a74:	cmpeq	r1, #9
   39a78:	beq	39fac <__assert_fail@plt+0x27530>
   39a7c:	mov	r1, #1
   39a80:	bfi	r0, r1, #0, #8
   39a84:	str	r0, [lr, #4]
   39a88:	ldr	r1, [r8, #64]	; 0x40
   39a8c:	cmp	r1, #31
   39a90:	beq	3b840 <__assert_fail@plt+0x28dc4>
   39a94:	ldr	r0, [r8, #56]	; 0x38
   39a98:	add	r2, r1, #1
   39a9c:	add	r7, r0, r1, lsl #5
   39aa0:	mov	r0, #0
   39aa4:	str	r2, [r8, #64]	; 0x40
   39aa8:	str	r0, [r7, #4]!
   39aac:	str	r0, [r7, #4]
   39ab0:	str	r0, [r7, #8]
   39ab4:	ldm	lr, {r1, r2}
   39ab8:	str	r0, [r7, #12]
   39abc:	str	r0, [r7, #16]
   39ac0:	mvn	r0, #0
   39ac4:	str	r0, [r7, #28]
   39ac8:	bic	r0, r2, #786432	; 0xc0000
   39acc:	str	r1, [r7, #20]
   39ad0:	str	r0, [r7, #24]
   39ad4:	b	3a984 <__assert_fail@plt+0x27f08>
   39ad8:	mov	r0, #13
   39adc:	b	3a888 <__assert_fail@plt+0x27e0c>
   39ae0:	ldr	r0, [lr]
   39ae4:	ldr	r2, [r8, #84]	; 0x54
   39ae8:	mov	r1, #1
   39aec:	tst	r2, r1, lsl r0
   39af0:	beq	3b884 <__assert_fail@plt+0x28e08>
   39af4:	lsl	r0, r1, r0
   39af8:	ldr	r1, [r8, #64]	; 0x40
   39afc:	ldr	r2, [r8, #80]	; 0x50
   39b00:	orr	r0, r2, r0
   39b04:	cmp	r1, #31
   39b08:	str	r0, [r8, #80]	; 0x50
   39b0c:	beq	3b8fc <__assert_fail@plt+0x28e80>
   39b10:	ldr	r0, [r8, #56]	; 0x38
   39b14:	add	r2, r1, #1
   39b18:	add	r7, r0, r1, lsl #5
   39b1c:	mov	r0, #0
   39b20:	str	r2, [r8, #64]	; 0x40
   39b24:	str	r0, [r7, #4]!
   39b28:	str	r0, [r7, #4]
   39b2c:	str	r0, [r7, #8]
   39b30:	ldm	lr, {r1, r2}
   39b34:	str	r0, [r7, #12]
   39b38:	str	r0, [r7, #16]
   39b3c:	mvn	r0, #0
   39b40:	str	r0, [r7, #28]
   39b44:	bic	r0, r2, #786432	; 0xc0000
   39b48:	str	r1, [r7, #20]
   39b4c:	str	r0, [r7, #24]
   39b50:	ldr	r0, [r8, #76]	; 0x4c
   39b54:	add	r0, r0, #1
   39b58:	str	r0, [r8, #76]	; 0x4c
   39b5c:	b	39bb8 <__assert_fail@plt+0x2713c>
   39b60:	ldr	r1, [r8, #64]	; 0x40
   39b64:	cmp	r1, #31
   39b68:	beq	3b88c <__assert_fail@plt+0x28e10>
   39b6c:	ldr	r0, [r8, #56]	; 0x38
   39b70:	add	r2, r1, #1
   39b74:	add	r7, r0, r1, lsl #5
   39b78:	mov	r0, #0
   39b7c:	str	r2, [r8, #64]	; 0x40
   39b80:	str	r0, [r7, #4]!
   39b84:	str	r0, [r7, #4]
   39b88:	str	r0, [r7, #8]
   39b8c:	ldm	lr, {r1, r2}
   39b90:	str	r0, [r7, #12]
   39b94:	str	r0, [r7, #16]
   39b98:	mvn	r0, #0
   39b9c:	str	r0, [r7, #28]
   39ba0:	bic	r0, r2, #786432	; 0xc0000
   39ba4:	str	r1, [r7, #20]
   39ba8:	str	r0, [r7, #24]
   39bac:	ldr	r0, [r8, #92]	; 0x5c
   39bb0:	cmp	r0, #2
   39bb4:	blt	3a984 <__assert_fail@plt+0x27f08>
   39bb8:	ldrb	r0, [r8, #88]	; 0x58
   39bbc:	orr	r0, r0, #2
   39bc0:	strb	r0, [r8, #88]	; 0x58
   39bc4:	b	3a984 <__assert_fail@plt+0x27f08>
   39bc8:	ldr	r4, [r7, #24]
   39bcc:	mov	sl, r6
   39bd0:	orr	r2, r6, #8388608	; 0x800000
   39bd4:	ldr	r6, [sp, #24]
   39bd8:	ldr	r5, [fp, #8]
   39bdc:	add	r0, r4, #1
   39be0:	mov	r1, r6
   39be4:	str	r0, [r7, #24]
   39be8:	mov	r0, lr
   39bec:	bl	38d6c <__assert_fail@plt+0x262f0>
   39bf0:	ldr	r1, [r6, #40]	; 0x28
   39bf4:	ldr	lr, [sp, #44]	; 0x2c
   39bf8:	mov	r9, #0
   39bfc:	add	r0, r1, r0
   39c00:	str	r0, [r6, #40]	; 0x28
   39c04:	ldrb	r0, [lr, #4]
   39c08:	cmp	r0, #9
   39c0c:	beq	3a918 <__assert_fail@plt+0x27e9c>
   39c10:	add	r0, r5, #1
   39c14:	mov	r1, r7
   39c18:	mov	r2, lr
   39c1c:	mov	r3, sl
   39c20:	mov	r6, lr
   39c24:	str	r0, [sp]
   39c28:	ldr	r5, [sp, #16]
   39c2c:	str	r5, [sp, #4]
   39c30:	ldr	r0, [sp, #24]
   39c34:	bl	38afc <__assert_fail@plt+0x26080>
   39c38:	mov	r9, r0
   39c3c:	ldr	r0, [r5]
   39c40:	cmp	r0, #0
   39c44:	beq	3a908 <__assert_fail@plt+0x27e8c>
   39c48:	mov	sl, #0
   39c4c:	b	3b6e8 <__assert_fail@plt+0x28c6c>
   39c50:	ldr	r0, [lr]
   39c54:	ldr	r7, [sp, #24]
   39c58:	movw	r1, #783	; 0x30f
   39c5c:	tst	r0, r1
   39c60:	beq	39ca8 <__assert_fail@plt+0x2722c>
   39c64:	ldrb	r0, [r8, #88]	; 0x58
   39c68:	tst	r0, #16
   39c6c:	bne	39ca4 <__assert_fail@plt+0x27228>
   39c70:	orr	r1, r0, #16
   39c74:	tst	r0, #8
   39c78:	strb	r1, [r8, #88]	; 0x58
   39c7c:	bne	3bb58 <__assert_fail@plt+0x290dc>
   39c80:	add	r1, pc, #824	; 0x338
   39c84:	tst	r0, #4
   39c88:	vld1.64	{d16-d17}, [r1 :128]
   39c8c:	add	r1, r8, #96	; 0x60
   39c90:	vst1.32	{d16-d17}, [r1]
   39c94:	beq	3bb64 <__assert_fail@plt+0x290e8>
   39c98:	vmov.i32	q8, #0	; 0x00000000
   39c9c:	add	r0, r8, #112	; 0x70
   39ca0:	vst1.32	{d16-d17}, [r0]
   39ca4:	ldr	r0, [lr]
   39ca8:	cmp	r0, #512	; 0x200
   39cac:	beq	3a77c <__assert_fail@plt+0x27d00>
   39cb0:	cmp	r0, #256	; 0x100
   39cb4:	bne	3a894 <__assert_fail@plt+0x27e18>
   39cb8:	mov	r0, #6
   39cbc:	mov	r4, r8
   39cc0:	str	r0, [lr]
   39cc4:	ldr	r1, [r4, #64]!	; 0x40
   39cc8:	cmp	r1, #31
   39ccc:	beq	3baac <__assert_fail@plt+0x29030>
   39cd0:	ldr	r0, [r8, #56]	; 0x38
   39cd4:	add	r2, r1, #1
   39cd8:	add	r5, r0, r1, lsl #5
   39cdc:	mov	r0, #0
   39ce0:	str	r2, [r4]
   39ce4:	str	r0, [r5, #4]!
   39ce8:	str	r0, [r5, #4]
   39cec:	str	r0, [r5, #8]
   39cf0:	ldm	lr, {r1, r2}
   39cf4:	str	r0, [r5, #12]
   39cf8:	str	r0, [r5, #16]
   39cfc:	mvn	r0, #0
   39d00:	str	r0, [r5, #28]
   39d04:	bic	r0, r2, #786432	; 0xc0000
   39d08:	str	r1, [r5, #20]
   39d0c:	str	r0, [r5, #24]
   39d10:	mov	r0, #9
   39d14:	b	3a7d8 <__assert_fail@plt+0x27d5c>
   39d18:	ldr	r1, [r8, #64]	; 0x40
   39d1c:	cmp	r1, #31
   39d20:	beq	3b8b8 <__assert_fail@plt+0x28e3c>
   39d24:	ldr	r0, [r8, #56]	; 0x38
   39d28:	ldr	r3, [sp, #24]
   39d2c:	add	r2, r1, #1
   39d30:	add	r4, r0, r1, lsl #5
   39d34:	mov	r0, #0
   39d38:	str	r2, [r8, #64]	; 0x40
   39d3c:	str	r0, [r4, #4]!
   39d40:	str	r0, [r4, #4]
   39d44:	str	r0, [r4, #8]
   39d48:	ldm	lr, {r1, r2}
   39d4c:	str	r0, [r4, #12]
   39d50:	str	r0, [r4, #16]
   39d54:	mvn	r0, #0
   39d58:	str	r0, [r4, #28]
   39d5c:	bic	r0, r2, #786432	; 0xc0000
   39d60:	str	r1, [r4, #20]
   39d64:	str	r0, [r4, #24]
   39d68:	ldr	r0, [r8, #92]	; 0x5c
   39d6c:	cmp	r0, #2
   39d70:	blt	39fa4 <__assert_fail@plt+0x27528>
   39d74:	ldr	r0, [r3, #40]	; 0x28
   39d78:	ldr	r1, [r3, #56]	; 0x38
   39d7c:	cmp	r1, r0
   39d80:	ble	39fa4 <__assert_fail@plt+0x27528>
   39d84:	mov	r5, #0
   39d88:	mvn	sl, #0
   39d8c:	mov	r9, r6
   39d90:	ldr	r6, [sp, #24]
   39d94:	ldr	r1, [r6, #28]
   39d98:	cmp	r0, r1
   39d9c:	beq	3b6f4 <__assert_fail@plt+0x28c78>
   39da0:	ldr	r1, [r6, #8]
   39da4:	ldr	r0, [r1, r0, lsl #2]
   39da8:	cmn	r0, #1
   39dac:	bne	3b6f4 <__assert_fail@plt+0x28c78>
   39db0:	mov	r0, lr
   39db4:	mov	r1, r6
   39db8:	mov	r2, r9
   39dbc:	bl	38d6c <__assert_fail@plt+0x262f0>
   39dc0:	ldr	r1, [r6, #40]	; 0x28
   39dc4:	add	r0, r1, r0
   39dc8:	str	r0, [r6, #40]	; 0x28
   39dcc:	ldr	r1, [r8, #64]	; 0x40
   39dd0:	cmp	r1, #31
   39dd4:	beq	39e80 <__assert_fail@plt+0x27404>
   39dd8:	ldr	r0, [r8, #56]	; 0x38
   39ddc:	ldr	lr, [sp, #44]	; 0x2c
   39de0:	add	r2, r1, #1
   39de4:	add	r6, r0, r1, lsl #5
   39de8:	str	r2, [r8, #64]	; 0x40
   39dec:	str	r5, [r6, #4]!
   39df0:	str	r5, [r6, #4]
   39df4:	str	r5, [r6, #8]
   39df8:	ldm	lr, {r0, r1}
   39dfc:	str	r5, [r6, #12]
   39e00:	str	r5, [r6, #16]
   39e04:	str	sl, [r6, #28]
   39e08:	str	r0, [r6, #20]
   39e0c:	bic	r0, r1, #786432	; 0xc0000
   39e10:	str	r0, [r6, #24]
   39e14:	ldr	r1, [r8, #64]	; 0x40
   39e18:	cmp	r1, #31
   39e1c:	beq	39ea8 <__assert_fail@plt+0x2742c>
   39e20:	ldr	r0, [r8, #56]	; 0x38
   39e24:	add	r2, r1, #1
   39e28:	add	r7, r0, r1, lsl #5
   39e2c:	mov	r0, #16
   39e30:	cmp	r6, #0
   39e34:	str	r2, [r8, #64]	; 0x40
   39e38:	str	r5, [r7, #4]!
   39e3c:	stmib	r7, {r4, r6}
   39e40:	str	r5, [r7, #12]
   39e44:	str	r5, [r7, #16]
   39e48:	str	r5, [r7, #20]
   39e4c:	str	r0, [r7, #24]
   39e50:	str	sl, [r7, #28]
   39e54:	str	r7, [r4]
   39e58:	beq	3bb44 <__assert_fail@plt+0x290c8>
   39e5c:	ldr	r1, [sp, #24]
   39e60:	str	r7, [r6]
   39e64:	mov	r4, r7
   39e68:	mov	r6, r9
   39e6c:	ldr	r0, [r1, #40]	; 0x28
   39e70:	ldr	r1, [r1, #56]	; 0x38
   39e74:	cmp	r1, r0
   39e78:	bgt	39d8c <__assert_fail@plt+0x27310>
   39e7c:	b	3a984 <__assert_fail@plt+0x27f08>
   39e80:	mov	r0, #996	; 0x3e4
   39e84:	bl	3233c <__assert_fail@plt+0x1f8c0>
   39e88:	cmp	r0, #0
   39e8c:	beq	39ed4 <__assert_fail@plt+0x27458>
   39e90:	ldr	r1, [r8, #56]	; 0x38
   39e94:	str	r1, [r0]
   39e98:	mov	r1, #0
   39e9c:	str	r1, [r8, #64]	; 0x40
   39ea0:	str	r0, [r8, #56]	; 0x38
   39ea4:	b	39ddc <__assert_fail@plt+0x27360>
   39ea8:	mov	r0, #996	; 0x3e4
   39eac:	bl	3233c <__assert_fail@plt+0x1f8c0>
   39eb0:	ldr	lr, [sp, #44]	; 0x2c
   39eb4:	cmp	r0, #0
   39eb8:	beq	3bb44 <__assert_fail@plt+0x290c8>
   39ebc:	ldr	r1, [r8, #56]	; 0x38
   39ec0:	str	r1, [r0]
   39ec4:	mov	r1, #0
   39ec8:	str	r1, [r8, #64]	; 0x40
   39ecc:	str	r0, [r8, #56]	; 0x38
   39ed0:	b	39e24 <__assert_fail@plt+0x273a8>
   39ed4:	ldr	lr, [sp, #44]	; 0x2c
   39ed8:	mov	r6, #0
   39edc:	b	39e14 <__assert_fail@plt+0x27398>
   39ee0:	mov	r0, #5
   39ee4:	b	3a888 <__assert_fail@plt+0x27e0c>
   39ee8:	mov	sl, #0
   39eec:	mov	r0, #32
   39ef0:	mov	r1, #1
   39ef4:	str	sl, [fp, #-32]	; 0xffffffe0
   39ef8:	bl	2f760 <__assert_fail@plt+0x1cce4>
   39efc:	mov	r4, r0
   39f00:	mov	r0, #40	; 0x28
   39f04:	mov	r1, #1
   39f08:	bl	2f760 <__assert_fail@plt+0x1cce4>
   39f0c:	mov	r5, r0
   39f10:	cmp	r4, #0
   39f14:	cmpne	r5, #0
   39f18:	beq	3b8e8 <__assert_fail@plt+0x28e6c>
   39f1c:	str	r5, [sp, #48]	; 0x30
   39f20:	mov	r2, r6
   39f24:	ldr	r5, [sp, #44]	; 0x2c
   39f28:	ldr	r7, [sp, #24]
   39f2c:	mov	r0, r5
   39f30:	mov	r1, r7
   39f34:	bl	3c0e8 <__assert_fail@plt+0x2966c>
   39f38:	mov	r3, r0
   39f3c:	ldr	r0, [r5, #4]
   39f40:	mov	r2, r5
   39f44:	uxtb	r1, r0
   39f48:	cmp	r1, #25
   39f4c:	beq	39fd0 <__assert_fail@plt+0x27554>
   39f50:	ldr	sl, [sp, #48]	; 0x30
   39f54:	cmp	r1, #2
   39f58:	beq	3b87c <__assert_fail@plt+0x28e00>
   39f5c:	mov	r1, #0
   39f60:	b	3a028 <__assert_fail@plt+0x275ac>
   39f64:	ldr	r4, [sp, #24]
   39f68:	mov	r0, lr
   39f6c:	mov	r2, r6
   39f70:	mov	r5, lr
   39f74:	mov	r1, r4
   39f78:	bl	38d6c <__assert_fail@plt+0x262f0>
   39f7c:	ldr	r1, [r4, #40]	; 0x28
   39f80:	mov	r2, r5
   39f84:	mov	r3, r6
   39f88:	add	r0, r1, r0
   39f8c:	mov	r1, r7
   39f90:	str	r0, [r4, #40]	; 0x28
   39f94:	mov	r0, r4
   39f98:	sub	sp, fp, #28
   39f9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39fa0:	b	398f0 <__assert_fail@plt+0x26e74>
   39fa4:	mov	r7, r4
   39fa8:	b	3a984 <__assert_fail@plt+0x27f08>
   39fac:	mov	r0, #16
   39fb0:	b	3a888 <__assert_fail@plt+0x27e0c>
   39fb4:	nop	{0}
   39fb8:	nop	{0}
   39fbc:	nop	{0}
   39fc0:	andeq	r0, r0, r0
   39fc4:	mvnseq	r0, #0
   39fc8:			; <UNDEFINED> instruction: 0x87fffffe
   39fcc:			; <UNDEFINED> instruction: 0x07fffffe
   39fd0:	ldr	sl, [sp, #48]	; 0x30
   39fd4:	tst	r6, #256	; 0x100
   39fd8:	mov	r1, r7
   39fdc:	ldrb	r0, [sl, #16]
   39fe0:	orr	r0, r0, #1
   39fe4:	strb	r0, [sl, #16]
   39fe8:	ldrne	r0, [r4]
   39fec:	orrne	r0, r0, #1024	; 0x400
   39ff0:	strne	r0, [r4]
   39ff4:	ldr	r0, [r7, #40]	; 0x28
   39ff8:	add	r0, r0, r3
   39ffc:	str	r0, [r7, #40]	; 0x28
   3a000:	mov	r0, r2
   3a004:	mov	r2, r6
   3a008:	bl	3c0e8 <__assert_fail@plt+0x2966c>
   3a00c:	ldr	r2, [sp, #44]	; 0x2c
   3a010:	mov	r3, r0
   3a014:	ldr	r0, [r2, #4]
   3a018:	uxtb	r1, r0
   3a01c:	cmp	r1, #2
   3a020:	beq	3b87c <__assert_fail@plt+0x28e00>
   3a024:	mov	r1, #1
   3a028:	str	r1, [sp, #36]	; 0x24
   3a02c:	uxtb	r1, r0
   3a030:	str	r4, [sp, #52]	; 0x34
   3a034:	str	r6, [sp, #40]	; 0x28
   3a038:	cmp	r1, #21
   3a03c:	ldr	r5, [sp, #40]	; 0x28
   3a040:	moveq	r1, #1
   3a044:	bfieq	r0, r1, #0, #8
   3a048:	mov	r1, r7
   3a04c:	streq	r0, [r2, #4]
   3a050:	mov	r0, #3
   3a054:	str	r0, [fp, #-40]	; 0xffffffd8
   3a058:	sub	r0, fp, #80	; 0x50
   3a05c:	str	r0, [fp, #-36]	; 0xffffffdc
   3a060:	mov	r0, #1
   3a064:	str	r5, [sp]
   3a068:	str	r0, [sp, #4]
   3a06c:	sub	r0, fp, #40	; 0x28
   3a070:	bl	3c260 <__assert_fail@plt+0x297e4>
   3a074:	cmp	r0, #0
   3a078:	bne	3b86c <__assert_fail@plt+0x28df0>
   3a07c:	and	r0, r5, #65536	; 0x10000
   3a080:	str	r0, [sp, #32]
   3a084:	mov	r0, #0
   3a088:	str	r0, [sp, #28]
   3a08c:	mov	r0, #0
   3a090:	str	r0, [sp, #20]
   3a094:	ldr	r6, [sp, #24]
   3a098:	ldr	r7, [sp, #44]	; 0x2c
   3a09c:	mov	r0, r7
   3a0a0:	mov	r1, r6
   3a0a4:	mov	r2, r5
   3a0a8:	bl	3c0e8 <__assert_fail@plt+0x2966c>
   3a0ac:	ldr	r5, [fp, #-40]	; 0xffffffd8
   3a0b0:	ldr	r4, [sp, #52]	; 0x34
   3a0b4:	mov	r9, r0
   3a0b8:	cmp	r5, #2
   3a0bc:	beq	3a288 <__assert_fail@plt+0x2780c>
   3a0c0:	cmp	r5, #4
   3a0c4:	bne	3a104 <__assert_fail@plt+0x27688>
   3a0c8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   3a0cc:	ldr	r0, [r6, #64]	; 0x40
   3a0d0:	mov	r2, sl
   3a0d4:	sub	r3, fp, #32
   3a0d8:	str	r1, [sp]
   3a0dc:	ldr	r1, [sp, #40]	; 0x28
   3a0e0:	str	r1, [sp, #4]
   3a0e4:	mov	r1, r4
   3a0e8:	bl	3c524 <__assert_fail@plt+0x29aa8>
   3a0ec:	ldr	r1, [sp, #16]
   3a0f0:	ldr	lr, [sp, #44]	; 0x2c
   3a0f4:	cmp	r0, #0
   3a0f8:	str	r0, [r1]
   3a0fc:	beq	3a2c8 <__assert_fail@plt+0x2784c>
   3a100:	b	3b93c <__assert_fail@plt+0x28ec0>
   3a104:	ldr	lr, [sp, #44]	; 0x2c
   3a108:	mov	r7, r9
   3a10c:	mov	r9, #7
   3a110:	ldrb	r0, [lr, #4]
   3a114:	cmp	r0, #22
   3a118:	beq	3a128 <__assert_fail@plt+0x276ac>
   3a11c:	cmp	r0, #2
   3a120:	bne	3a240 <__assert_fail@plt+0x277c4>
   3a124:	b	3b92c <__assert_fail@plt+0x28eb0>
   3a128:	ldr	r4, [sp, #24]
   3a12c:	ldr	r2, [sp, #40]	; 0x28
   3a130:	mov	r6, r7
   3a134:	ldr	r0, [r4, #40]	; 0x28
   3a138:	mov	r1, r4
   3a13c:	add	r0, r0, r7
   3a140:	str	r0, [r4, #40]	; 0x28
   3a144:	add	r0, sp, #56	; 0x38
   3a148:	bl	3c0e8 <__assert_fail@plt+0x2966c>
   3a14c:	mov	r3, r0
   3a150:	ldrb	r0, [sp, #60]	; 0x3c
   3a154:	cmp	r0, #21
   3a158:	beq	3a228 <__assert_fail@plt+0x277ac>
   3a15c:	cmp	r0, #2
   3a160:	beq	3b92c <__assert_fail@plt+0x28eb0>
   3a164:	ldr	r7, [sp, #40]	; 0x28
   3a168:	mov	r0, #3
   3a16c:	add	r2, sp, #56	; 0x38
   3a170:	str	r0, [fp, #-48]	; 0xffffffd0
   3a174:	add	r0, sp, #64	; 0x40
   3a178:	str	r0, [fp, #-44]	; 0xffffffd4
   3a17c:	mov	r0, #1
   3a180:	str	r0, [sp, #4]
   3a184:	sub	r0, fp, #48	; 0x30
   3a188:	str	r7, [sp]
   3a18c:	ldr	r4, [sp, #24]
   3a190:	mov	r1, r4
   3a194:	bl	3c260 <__assert_fail@plt+0x297e4>
   3a198:	cmp	r0, #0
   3a19c:	bne	3b86c <__assert_fail@plt+0x28df0>
   3a1a0:	ldr	r0, [sp, #44]	; 0x2c
   3a1a4:	mov	r1, r4
   3a1a8:	mov	r2, r7
   3a1ac:	bl	3c0e8 <__assert_fail@plt+0x2966c>
   3a1b0:	ldr	r4, [fp, #-48]	; 0xffffffd0
   3a1b4:	mov	r9, #11
   3a1b8:	str	r0, [sp, #12]
   3a1bc:	cmp	r4, #2
   3a1c0:	cmpne	r4, #4
   3a1c4:	beq	3b92c <__assert_fail@plt+0x28eb0>
   3a1c8:	cmp	r5, #3
   3a1cc:	bne	3a1e0 <__assert_fail@plt+0x27764>
   3a1d0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   3a1d4:	bl	12788 <strlen@plt>
   3a1d8:	cmp	r0, #1
   3a1dc:	bhi	3b928 <__assert_fail@plt+0x28eac>
   3a1e0:	cmp	r4, #3
   3a1e4:	bne	3a1f8 <__assert_fail@plt+0x2777c>
   3a1e8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   3a1ec:	bl	12788 <strlen@plt>
   3a1f0:	cmp	r0, #1
   3a1f4:	bhi	3b928 <__assert_fail@plt+0x28eac>
   3a1f8:	ldr	lr, [sp, #44]	; 0x2c
   3a1fc:	cmp	r5, #3
   3a200:	beq	3a37c <__assert_fail@plt+0x27900>
   3a204:	mov	r7, #0
   3a208:	cmp	r5, #0
   3a20c:	ldrbeq	r7, [fp, #-36]	; 0xffffffdc
   3a210:	cmp	r4, #3
   3a214:	beq	3a38c <__assert_fail@plt+0x27910>
   3a218:	mov	sl, #0
   3a21c:	cmp	r4, #0
   3a220:	ldrbeq	sl, [fp, #-44]	; 0xffffffd4
   3a224:	b	3a394 <__assert_fail@plt+0x27918>
   3a228:	ldr	r0, [r4, #40]	; 0x28
   3a22c:	ldr	lr, [sp, #44]	; 0x2c
   3a230:	sub	r0, r0, r6
   3a234:	str	r0, [r4, #40]	; 0x28
   3a238:	mov	r0, #1
   3a23c:	strb	r0, [lr, #4]
   3a240:	cmp	r5, #1
   3a244:	beq	3a320 <__assert_fail@plt+0x278a4>
   3a248:	ldr	r6, [sp, #24]
   3a24c:	ldr	r4, [sp, #52]	; 0x34
   3a250:	ldr	sl, [sp, #48]	; 0x30
   3a254:	cmp	r5, #2
   3a258:	mov	r9, r7
   3a25c:	beq	3a288 <__assert_fail@plt+0x2780c>
   3a260:	cmp	r5, #3
   3a264:	bne	3a358 <__assert_fail@plt+0x278dc>
   3a268:	ldr	r7, [fp, #-36]	; 0xffffffdc
   3a26c:	mov	r0, r7
   3a270:	bl	12788 <strlen@plt>
   3a274:	cmp	r0, #1
   3a278:	mov	r3, #1
   3a27c:	bne	3b928 <__assert_fail@plt+0x28eac>
   3a280:	ldrb	r0, [r7]
   3a284:	b	3a2a4 <__assert_fail@plt+0x27828>
   3a288:	ldr	r7, [fp, #-36]	; 0xffffffdc
   3a28c:	mov	r0, r7
   3a290:	bl	12788 <strlen@plt>
   3a294:	cmp	r0, #1
   3a298:	bne	3b928 <__assert_fail@plt+0x28eac>
   3a29c:	ldrb	r0, [r7]
   3a2a0:	mov	r3, #1
   3a2a4:	ubfx	r1, r0, #5, #3
   3a2a8:	and	r0, r0, #31
   3a2ac:	ldr	r2, [r4, r1, lsl #2]
   3a2b0:	orr	r0, r2, r3, lsl r0
   3a2b4:	str	r0, [r4, r1, lsl #2]
   3a2b8:	mov	r1, #0
   3a2bc:	ldr	r0, [sp, #16]
   3a2c0:	ldr	lr, [sp, #44]	; 0x2c
   3a2c4:	str	r1, [r0]
   3a2c8:	ldrb	r0, [lr, #4]
   3a2cc:	cmp	r0, #21
   3a2d0:	beq	3a540 <__assert_fail@plt+0x27ac4>
   3a2d4:	cmp	r0, #2
   3a2d8:	beq	3b874 <__assert_fail@plt+0x28df8>
   3a2dc:	mov	r0, #3
   3a2e0:	ldr	r5, [sp, #40]	; 0x28
   3a2e4:	mov	r1, r6
   3a2e8:	mov	r2, lr
   3a2ec:	mov	r3, r9
   3a2f0:	mov	r7, lr
   3a2f4:	str	r0, [fp, #-40]	; 0xffffffd8
   3a2f8:	sub	r0, fp, #80	; 0x50
   3a2fc:	str	r0, [fp, #-36]	; 0xffffffdc
   3a300:	mov	r0, #0
   3a304:	str	r0, [sp, #4]
   3a308:	sub	r0, fp, #40	; 0x28
   3a30c:	str	r5, [sp]
   3a310:	bl	3c260 <__assert_fail@plt+0x297e4>
   3a314:	cmp	r0, #0
   3a318:	beq	3a09c <__assert_fail@plt+0x27620>
   3a31c:	b	3b86c <__assert_fail@plt+0x28df0>
   3a320:	ldr	sl, [sp, #48]	; 0x30
   3a324:	ldr	r0, [sp, #28]
   3a328:	ldr	r4, [sp, #52]	; 0x34
   3a32c:	ldr	r1, [sl, #20]
   3a330:	cmp	r0, r1
   3a334:	beq	3a4ac <__assert_fail@plt+0x27a30>
   3a338:	ldr	r0, [sl]
   3a33c:	ldr	r6, [sp, #24]
   3a340:	ldr	r3, [fp, #-36]	; 0xffffffdc
   3a344:	add	r2, r1, #1
   3a348:	mov	r9, r7
   3a34c:	str	r2, [sl, #20]
   3a350:	str	r3, [r0, r1, lsl #2]
   3a354:	b	3a2c8 <__assert_fail@plt+0x2784c>
   3a358:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   3a35c:	mov	r3, #1
   3a360:	ubfx	r1, r0, #5, #3
   3a364:	ldr	lr, [sp, #44]	; 0x2c
   3a368:	and	r0, r0, #31
   3a36c:	ldr	r2, [r4, r1, lsl #2]
   3a370:	orr	r0, r2, r3, lsl r0
   3a374:	str	r0, [r4, r1, lsl #2]
   3a378:	b	3a2c8 <__assert_fail@plt+0x2784c>
   3a37c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   3a380:	ldrb	r7, [r0]
   3a384:	cmp	r4, #3
   3a388:	bne	3a218 <__assert_fail@plt+0x2779c>
   3a38c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   3a390:	ldrb	sl, [r0]
   3a394:	cmp	r5, #3
   3a398:	cmpne	r5, #0
   3a39c:	bne	3a3c0 <__assert_fail@plt+0x27944>
   3a3a0:	ldr	r0, [r8, #92]	; 0x5c
   3a3a4:	cmp	r0, #2
   3a3a8:	blt	3a3c4 <__assert_fail@plt+0x27948>
   3a3ac:	mov	r0, r7
   3a3b0:	bl	12830 <btowc@plt>
   3a3b4:	ldr	lr, [sp, #44]	; 0x2c
   3a3b8:	mov	r7, r0
   3a3bc:	b	3a3c4 <__assert_fail@plt+0x27948>
   3a3c0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   3a3c4:	cmp	r4, #3
   3a3c8:	cmpne	r4, #0
   3a3cc:	bne	3a3f0 <__assert_fail@plt+0x27974>
   3a3d0:	ldr	r0, [r8, #92]	; 0x5c
   3a3d4:	cmp	r0, #2
   3a3d8:	blt	3a3f4 <__assert_fail@plt+0x27978>
   3a3dc:	mov	r0, sl
   3a3e0:	bl	12830 <btowc@plt>
   3a3e4:	ldr	lr, [sp, #44]	; 0x2c
   3a3e8:	mov	sl, r0
   3a3ec:	b	3a3f4 <__assert_fail@plt+0x27978>
   3a3f0:	ldr	sl, [fp, #-44]	; 0xffffffd4
   3a3f4:	cmn	r7, #1
   3a3f8:	mov	r9, #3
   3a3fc:	cmnne	sl, #1
   3a400:	beq	3b92c <__assert_fail@plt+0x28eb0>
   3a404:	ldr	r0, [sp, #32]
   3a408:	cmp	r0, #0
   3a40c:	beq	3a41c <__assert_fail@plt+0x279a0>
   3a410:	cmp	r7, sl
   3a414:	mov	r9, #11
   3a418:	bhi	3b92c <__assert_fail@plt+0x28eb0>
   3a41c:	ldr	r0, [r8, #92]	; 0x5c
   3a420:	cmp	r0, #2
   3a424:	blt	3a460 <__assert_fail@plt+0x279e4>
   3a428:	ldr	r4, [sp, #48]	; 0x30
   3a42c:	ldr	r1, [sp, #20]
   3a430:	mov	r5, #1
   3a434:	ldr	r0, [r4, #32]
   3a438:	cmp	r1, r0
   3a43c:	beq	3a4ec <__assert_fail@plt+0x27a70>
   3a440:	ldmib	r4, {r6, r9}
   3a444:	str	r7, [r6, r0, lsl #2]
   3a448:	ldr	r0, [r4, #32]
   3a44c:	add	r1, r0, #1
   3a450:	str	r1, [r4, #32]
   3a454:	ldr	r4, [sp, #52]	; 0x34
   3a458:	str	sl, [r9, r0, lsl #2]
   3a45c:	b	3a468 <__assert_fail@plt+0x279ec>
   3a460:	ldr	r4, [sp, #52]	; 0x34
   3a464:	mov	r5, #1
   3a468:	ldr	r6, [sp, #24]
   3a46c:	ldr	r9, [sp, #12]
   3a470:	mov	r0, #0
   3a474:	cmp	r7, r0
   3a478:	cmpls	r0, sl
   3a47c:	ubfxls	r1, r0, #5, #3
   3a480:	andls	r3, r0, #31
   3a484:	add	r0, r0, #1
   3a488:	ldrls	r2, [r4, r1, lsl #2]
   3a48c:	orrls	r2, r2, r5, lsl r3
   3a490:	strls	r2, [r4, r1, lsl #2]
   3a494:	cmp	r0, #256	; 0x100
   3a498:	bne	3a474 <__assert_fail@plt+0x279f8>
   3a49c:	ldr	r0, [sp, #16]
   3a4a0:	ldr	sl, [sp, #48]	; 0x30
   3a4a4:	mov	r1, #0
   3a4a8:	b	3a2c4 <__assert_fail@plt+0x27848>
   3a4ac:	ldr	r1, [sp, #28]
   3a4b0:	mov	r0, #1
   3a4b4:	orr	r1, r0, r1, lsl #1
   3a4b8:	ldr	r0, [sl]
   3a4bc:	str	r1, [sp, #28]
   3a4c0:	lsl	r1, r1, #2
   3a4c4:	bl	33040 <__assert_fail@plt+0x205c4>
   3a4c8:	cmp	r0, #0
   3a4cc:	beq	3bcf8 <__assert_fail@plt+0x2927c>
   3a4d0:	ldr	sl, [sp, #48]	; 0x30
   3a4d4:	ldr	r6, [sp, #24]
   3a4d8:	ldr	lr, [sp, #44]	; 0x2c
   3a4dc:	ldr	r4, [sp, #52]	; 0x34
   3a4e0:	str	r0, [sl]
   3a4e4:	ldr	r1, [sl, #20]
   3a4e8:	b	3a340 <__assert_fail@plt+0x278c4>
   3a4ec:	ldr	r0, [sp, #20]
   3a4f0:	orr	r0, r5, r0, lsl #1
   3a4f4:	lsl	r9, r0, #2
   3a4f8:	str	r0, [sp, #20]
   3a4fc:	ldr	r0, [r4, #4]
   3a500:	mov	r1, r9
   3a504:	bl	33040 <__assert_fail@plt+0x205c4>
   3a508:	mov	r6, r0
   3a50c:	ldr	r0, [r4, #8]
   3a510:	mov	r1, r9
   3a514:	bl	33040 <__assert_fail@plt+0x205c4>
   3a518:	mov	r9, r0
   3a51c:	cmp	r6, #0
   3a520:	cmpne	r9, #0
   3a524:	beq	3bd14 <__assert_fail@plt+0x29298>
   3a528:	ldr	r4, [sp, #48]	; 0x30
   3a52c:	mov	r5, #1
   3a530:	stmib	r4, {r6, r9}
   3a534:	ldr	r0, [r4, #32]
   3a538:	ldr	lr, [sp, #44]	; 0x2c
   3a53c:	b	3a444 <__assert_fail@plt+0x279c8>
   3a540:	ldr	r0, [r6, #40]	; 0x28
   3a544:	add	r0, r0, r9
   3a548:	str	r0, [r6, #40]	; 0x28
   3a54c:	ldr	r0, [sp, #36]	; 0x24
   3a550:	cmp	r0, #0
   3a554:	beq	3a574 <__assert_fail@plt+0x27af8>
   3a558:	vld1.32	{d16-d17}, [r4]
   3a55c:	mov	r0, r4
   3a560:	vmvn	q8, q8
   3a564:	vst1.32	{d16-d17}, [r0]!
   3a568:	vld1.32	{d16-d17}, [r0]
   3a56c:	vmvn	q8, q8
   3a570:	vst1.32	{d16-d17}, [r0]
   3a574:	ldr	r0, [r8, #92]	; 0x5c
   3a578:	cmp	r0, #2
   3a57c:	blt	3a5f8 <__assert_fail@plt+0x27b7c>
   3a580:	ldm	r4, {r1, r2, r3, r7}
   3a584:	ldr	r6, [r8, #60]	; 0x3c
   3a588:	ldr	r5, [r6]
   3a58c:	and	r1, r1, r5
   3a590:	str	r1, [r4]
   3a594:	ldr	r1, [r6, #4]
   3a598:	and	r1, r2, r1
   3a59c:	str	r1, [r4, #4]
   3a5a0:	ldr	r1, [r6, #8]
   3a5a4:	and	r1, r3, r1
   3a5a8:	str	r1, [r4, #8]
   3a5ac:	ldr	r1, [r6, #12]
   3a5b0:	and	r1, r7, r1
   3a5b4:	str	r1, [r4, #12]
   3a5b8:	ldr	r1, [r4, #16]
   3a5bc:	ldr	r2, [r6, #16]
   3a5c0:	and	r1, r1, r2
   3a5c4:	str	r1, [r4, #16]
   3a5c8:	ldr	r1, [r6, #20]
   3a5cc:	ldr	r2, [r4, #20]
   3a5d0:	and	r1, r2, r1
   3a5d4:	str	r1, [r4, #20]
   3a5d8:	ldr	r1, [r6, #24]
   3a5dc:	ldr	r2, [r4, #24]
   3a5e0:	and	r1, r2, r1
   3a5e4:	str	r1, [r4, #24]
   3a5e8:	ldr	r1, [r6, #28]
   3a5ec:	ldr	r2, [r4, #28]
   3a5f0:	and	r1, r2, r1
   3a5f4:	str	r1, [r4, #28]
   3a5f8:	ldr	r1, [sl, #20]
   3a5fc:	ldr	r6, [sp, #40]	; 0x28
   3a600:	cmp	r1, #0
   3a604:	bne	3a62c <__assert_fail@plt+0x27bb0>
   3a608:	ldr	r1, [sl, #24]
   3a60c:	cmp	r1, #0
   3a610:	bne	3a62c <__assert_fail@plt+0x27bb0>
   3a614:	ldr	r1, [sl, #28]
   3a618:	cmp	r1, #0
   3a61c:	bne	3a62c <__assert_fail@plt+0x27bb0>
   3a620:	ldr	r1, [sl, #32]
   3a624:	cmp	r1, #0
   3a628:	beq	3b7a4 <__assert_fail@plt+0x28d28>
   3a62c:	ldrb	r0, [r8, #88]	; 0x58
   3a630:	orr	r0, r0, #2
   3a634:	strb	r0, [r8, #88]	; 0x58
   3a638:	ldr	r1, [r8, #64]	; 0x40
   3a63c:	cmp	r1, #31
   3a640:	beq	3b984 <__assert_fail@plt+0x28f08>
   3a644:	ldr	r0, [r8, #56]	; 0x38
   3a648:	add	r2, r1, #1
   3a64c:	add	r0, r0, r1, lsl #5
   3a650:	mov	r1, #6
   3a654:	vmov.i32	q8, #0	; 0x00000000
   3a658:	str	r2, [r8, #64]	; 0x40
   3a65c:	mov	r2, #0
   3a660:	add	r9, r0, #4
   3a664:	str	r2, [r0, #20]
   3a668:	str	sl, [r0, #24]
   3a66c:	str	r1, [r0, #28]
   3a670:	mov	r0, #28
   3a674:	mov	r1, r9
   3a678:	vst1.32	{d16-d17}, [r1], r0
   3a67c:	mvn	r0, #0
   3a680:	str	r0, [r1]
   3a684:	ldr	r0, [r4]
   3a688:	cmp	r0, #0
   3a68c:	bne	3a6e4 <__assert_fail@plt+0x27c68>
   3a690:	ldr	r0, [r4, #4]
   3a694:	cmp	r0, #0
   3a698:	bne	3a6e4 <__assert_fail@plt+0x27c68>
   3a69c:	ldr	r0, [r4, #8]
   3a6a0:	cmp	r0, #0
   3a6a4:	bne	3a6e4 <__assert_fail@plt+0x27c68>
   3a6a8:	ldr	r0, [r4, #12]
   3a6ac:	cmp	r0, #0
   3a6b0:	bne	3a6e4 <__assert_fail@plt+0x27c68>
   3a6b4:	ldr	r0, [r4, #16]
   3a6b8:	cmp	r0, #0
   3a6bc:	bne	3a6e4 <__assert_fail@plt+0x27c68>
   3a6c0:	ldr	r0, [r4, #20]
   3a6c4:	cmp	r0, #0
   3a6c8:	bne	3a6e4 <__assert_fail@plt+0x27c68>
   3a6cc:	ldr	r0, [r4, #24]
   3a6d0:	cmp	r0, #0
   3a6d4:	bne	3a6e4 <__assert_fail@plt+0x27c68>
   3a6d8:	ldr	r0, [r4, #28]
   3a6dc:	cmp	r0, #0
   3a6e0:	beq	3ba38 <__assert_fail@plt+0x28fbc>
   3a6e4:	ldr	r1, [r8, #64]	; 0x40
   3a6e8:	cmp	r1, #31
   3a6ec:	beq	3b9b0 <__assert_fail@plt+0x28f34>
   3a6f0:	ldr	r0, [r8, #56]	; 0x38
   3a6f4:	add	r2, r1, #1
   3a6f8:	add	r0, r0, r1, lsl #5
   3a6fc:	mov	r1, #3
   3a700:	vmov.i32	q8, #0	; 0x00000000
   3a704:	str	r2, [r8, #64]	; 0x40
   3a708:	mov	r2, #0
   3a70c:	add	r5, r0, #4
   3a710:	str	r2, [r0, #20]
   3a714:	str	r4, [r0, #24]
   3a718:	str	r1, [r0, #28]
   3a71c:	mov	r0, #28
   3a720:	mov	r1, r5
   3a724:	vst1.32	{d16-d17}, [r1], r0
   3a728:	mvn	r0, #0
   3a72c:	str	r0, [r1]
   3a730:	ldr	r1, [r8, #64]	; 0x40
   3a734:	cmp	r1, #31
   3a738:	beq	3b9dc <__assert_fail@plt+0x28f60>
   3a73c:	ldr	r0, [r8, #56]	; 0x38
   3a740:	add	r2, r1, #1
   3a744:	add	r7, r0, r1, lsl #5
   3a748:	mov	r0, #0
   3a74c:	mov	r1, #10
   3a750:	str	r2, [r8, #64]	; 0x40
   3a754:	str	r0, [r7, #4]!
   3a758:	mvn	r2, #0
   3a75c:	add	r3, r7, #20
   3a760:	stmib	r7, {r5, r9}
   3a764:	str	r0, [r7, #12]
   3a768:	str	r0, [r7, #16]
   3a76c:	stm	r3, {r0, r1, r2}
   3a770:	str	r7, [r5]
   3a774:	str	r7, [r9]
   3a778:	b	3a984 <__assert_fail@plt+0x27f08>
   3a77c:	mov	r0, #5
   3a780:	mov	r4, r8
   3a784:	str	r0, [lr]
   3a788:	ldr	r1, [r4, #64]!	; 0x40
   3a78c:	cmp	r1, #31
   3a790:	beq	3bae0 <__assert_fail@plt+0x29064>
   3a794:	ldr	r0, [r8, #56]	; 0x38
   3a798:	add	r2, r1, #1
   3a79c:	add	r5, r0, r1, lsl #5
   3a7a0:	mov	r0, #0
   3a7a4:	str	r2, [r4]
   3a7a8:	str	r0, [r5, #4]!
   3a7ac:	str	r0, [r5, #4]
   3a7b0:	str	r0, [r5, #8]
   3a7b4:	ldm	lr, {r1, r2}
   3a7b8:	str	r0, [r5, #12]
   3a7bc:	str	r0, [r5, #16]
   3a7c0:	mvn	r0, #0
   3a7c4:	str	r0, [r5, #28]
   3a7c8:	bic	r0, r2, #786432	; 0xc0000
   3a7cc:	str	r1, [r5, #20]
   3a7d0:	str	r0, [r5, #24]
   3a7d4:	mov	r0, #10
   3a7d8:	str	r0, [lr]
   3a7dc:	mov	r9, r6
   3a7e0:	ldr	r1, [r4]
   3a7e4:	cmp	r1, #31
   3a7e8:	beq	3ba4c <__assert_fail@plt+0x28fd0>
   3a7ec:	ldr	r0, [r8, #56]	; 0x38
   3a7f0:	add	r2, r1, #1
   3a7f4:	add	r6, r0, r1, lsl #5
   3a7f8:	mov	r0, #0
   3a7fc:	str	r2, [r4]
   3a800:	str	r0, [r6, #4]!
   3a804:	str	r0, [r6, #4]
   3a808:	str	r0, [r6, #8]
   3a80c:	ldm	lr, {r1, r2}
   3a810:	str	r0, [r6, #12]
   3a814:	str	r0, [r6, #16]
   3a818:	mvn	r0, #0
   3a81c:	str	r0, [r6, #28]
   3a820:	bic	r0, r2, #786432	; 0xc0000
   3a824:	str	r1, [r6, #20]
   3a828:	str	r0, [r6, #24]
   3a82c:	ldr	r1, [r4]
   3a830:	cmp	r1, #31
   3a834:	beq	3ba80 <__assert_fail@plt+0x29004>
   3a838:	ldr	r0, [r8, #56]	; 0x38
   3a83c:	add	r2, r1, #1
   3a840:	cmp	r5, #0
   3a844:	str	r2, [r4]
   3a848:	add	r4, r0, r1, lsl #5
   3a84c:	mov	r0, #0
   3a850:	mov	r1, #10
   3a854:	mvn	r2, #0
   3a858:	str	r0, [r4, #4]!
   3a85c:	add	r3, r4, #20
   3a860:	stmib	r4, {r5, r6}
   3a864:	str	r0, [r4, #12]
   3a868:	str	r0, [r4, #16]
   3a86c:	stm	r3, {r0, r1, r2}
   3a870:	strne	r4, [r5]
   3a874:	cmp	r6, #0
   3a878:	strne	r4, [r6]
   3a87c:	cmpne	r5, #0
   3a880:	bne	3a8e4 <__assert_fail@plt+0x27e68>
   3a884:	mov	r0, #12
   3a888:	ldr	r1, [sp, #16]
   3a88c:	str	r0, [r1]
   3a890:	b	3b6e8 <__assert_fail@plt+0x28c6c>
   3a894:	ldr	r1, [r8, #64]	; 0x40
   3a898:	mov	r9, r6
   3a89c:	cmp	r1, #31
   3a8a0:	beq	3bb14 <__assert_fail@plt+0x29098>
   3a8a4:	ldr	r0, [r8, #56]	; 0x38
   3a8a8:	add	r2, r1, #1
   3a8ac:	add	r4, r0, r1, lsl #5
   3a8b0:	mov	r0, #0
   3a8b4:	str	r2, [r8, #64]	; 0x40
   3a8b8:	str	r0, [r4, #4]!
   3a8bc:	str	r0, [r4, #4]
   3a8c0:	str	r0, [r4, #8]
   3a8c4:	ldm	lr, {r1, r2}
   3a8c8:	str	r0, [r4, #12]
   3a8cc:	str	r0, [r4, #16]
   3a8d0:	mvn	r0, #0
   3a8d4:	str	r0, [r4, #28]
   3a8d8:	bic	r0, r2, #786432	; 0xc0000
   3a8dc:	str	r1, [r4, #20]
   3a8e0:	str	r0, [r4, #24]
   3a8e4:	mov	r0, lr
   3a8e8:	mov	r1, r7
   3a8ec:	mov	r2, r9
   3a8f0:	bl	38d6c <__assert_fail@plt+0x262f0>
   3a8f4:	ldr	r1, [r7, #40]	; 0x28
   3a8f8:	mov	sl, r4
   3a8fc:	add	r0, r1, r0
   3a900:	str	r0, [r7, #40]	; 0x28
   3a904:	b	3b6e8 <__assert_fail@plt+0x28c6c>
   3a908:	ldrb	r0, [r6, #4]
   3a90c:	cmp	r0, #9
   3a910:	bne	3bc00 <__assert_fail@plt+0x29184>
   3a914:	mov	lr, r6
   3a918:	cmp	r4, #8
   3a91c:	ldrls	r0, [r8, #84]	; 0x54
   3a920:	movls	r1, #1
   3a924:	orrls	r0, r0, r1, lsl r4
   3a928:	strls	r0, [r8, #84]	; 0x54
   3a92c:	ldr	r1, [r8, #64]	; 0x40
   3a930:	cmp	r1, #31
   3a934:	beq	3ba08 <__assert_fail@plt+0x28f8c>
   3a938:	ldr	r0, [r8, #56]	; 0x38
   3a93c:	mov	r6, sl
   3a940:	add	r0, r0, r1, lsl #5
   3a944:	add	r2, r1, #1
   3a948:	mov	r1, #0
   3a94c:	mvn	r3, #0
   3a950:	cmp	r9, #0
   3a954:	mov	r7, r0
   3a958:	str	r2, [r8, #64]	; 0x40
   3a95c:	mov	r2, #17
   3a960:	str	r1, [r7, #4]!
   3a964:	add	ip, r7, #20
   3a968:	str	r9, [r7, #4]
   3a96c:	str	r1, [r7, #8]
   3a970:	str	r1, [r7, #12]
   3a974:	str	r1, [r7, #16]
   3a978:	stm	ip, {r1, r2, r3}
   3a97c:	strne	r7, [r9]
   3a980:	str	r4, [r0, #24]
   3a984:	mov	r4, r6
   3a988:	ldr	r6, [sp, #24]
   3a98c:	mov	r0, lr
   3a990:	mov	r2, r4
   3a994:	mov	r1, r6
   3a998:	bl	38d6c <__assert_fail@plt+0x262f0>
   3a99c:	ldr	r1, [r6, #40]	; 0x28
   3a9a0:	ldr	ip, [sp, #44]	; 0x2c
   3a9a4:	add	r0, r1, r0
   3a9a8:	str	r0, [r6, #40]	; 0x28
   3a9ac:	add	r0, r8, #56	; 0x38
   3a9b0:	add	r8, r8, #64	; 0x40
   3a9b4:	str	r0, [sp, #20]
   3a9b8:	and	r0, r4, #2097152	; 0x200000
   3a9bc:	str	r0, [sp, #12]
   3a9c0:	str	r4, [sp, #40]	; 0x28
   3a9c4:	and	r0, r4, #16777216	; 0x1000000
   3a9c8:	mov	r4, #0
   3a9cc:	str	r0, [sp, #28]
   3a9d0:	ldrb	r0, [ip, #4]
   3a9d4:	mov	sl, r7
   3a9d8:	cmp	r0, #23
   3a9dc:	bhi	3b6e8 <__assert_fail@plt+0x28c6c>
   3a9e0:	movw	r2, #2048	; 0x800
   3a9e4:	mov	r1, #1
   3a9e8:	movt	r2, #140	; 0x8c
   3a9ec:	tst	r2, r1, lsl r0
   3a9f0:	beq	3b6e8 <__assert_fail@plt+0x28c6c>
   3a9f4:	cmp	r0, #23
   3a9f8:	str	sl, [sp, #36]	; 0x24
   3a9fc:	bne	3aa10 <__assert_fail@plt+0x27f94>
   3aa00:	ldm	ip, {r5, sl}
   3aa04:	ldr	r7, [r6, #40]	; 0x28
   3aa08:	mvn	r2, #0
   3aa0c:	b	3aa44 <__assert_fail@plt+0x27fc8>
   3aa10:	cmp	r0, #19
   3aa14:	sub	r0, r0, #18
   3aa18:	mvn	r5, #0
   3aa1c:	clz	r0, r0
   3aa20:	movweq	r5, #1
   3aa24:	lsr	r9, r0, #5
   3aa28:	b	3ac28 <__assert_fail@plt+0x281ac>
   3aa2c:	add	r0, r9, r9, lsl #2
   3aa30:	add	r0, r1, r0, lsl #1
   3aa34:	movw	r1, #32816	; 0x8030
   3aa38:	sub	r2, r0, #48	; 0x30
   3aa3c:	cmp	r0, r1
   3aa40:	movwgt	r2, #32768	; 0x8000
   3aa44:	mov	r9, r2
   3aa48:	ldr	r2, [sp, #40]	; 0x28
   3aa4c:	mov	r0, ip
   3aa50:	mov	r1, r6
   3aa54:	bl	38d6c <__assert_fail@plt+0x262f0>
   3aa58:	ldr	r1, [r6, #40]	; 0x28
   3aa5c:	ldr	ip, [sp, #44]	; 0x2c
   3aa60:	add	r0, r1, r0
   3aa64:	str	r0, [r6, #40]	; 0x28
   3aa68:	ldrb	r0, [ip, #4]
   3aa6c:	ldrb	r1, [ip]
   3aa70:	cmp	r0, #24
   3aa74:	beq	3aabc <__assert_fail@plt+0x28040>
   3aa78:	cmp	r0, #2
   3aa7c:	beq	3ab0c <__assert_fail@plt+0x28090>
   3aa80:	cmp	r1, #44	; 0x2c
   3aa84:	beq	3aabc <__assert_fail@plt+0x28040>
   3aa88:	mvn	r2, #1
   3aa8c:	cmp	r1, #48	; 0x30
   3aa90:	bcc	3aa44 <__assert_fail@plt+0x27fc8>
   3aa94:	cmp	r0, #1
   3aa98:	bne	3aa44 <__assert_fail@plt+0x27fc8>
   3aa9c:	cmn	r9, #2
   3aaa0:	beq	3aa44 <__assert_fail@plt+0x27fc8>
   3aaa4:	cmp	r1, #57	; 0x39
   3aaa8:	bhi	3aa44 <__assert_fail@plt+0x27fc8>
   3aaac:	cmn	r9, #1
   3aab0:	bne	3aa2c <__assert_fail@plt+0x27fb0>
   3aab4:	sub	r2, r1, #48	; 0x30
   3aab8:	b	3aa44 <__assert_fail@plt+0x27fc8>
   3aabc:	cmn	r9, #1
   3aac0:	bne	3aaec <__assert_fail@plt+0x28070>
   3aac4:	cmp	r1, #44	; 0x2c
   3aac8:	moveq	r9, #0
   3aacc:	cmpeq	r0, #1
   3aad0:	beq	3ab34 <__assert_fail@plt+0x280b8>
   3aad4:	ldr	r0, [sp, #16]
   3aad8:	mov	r1, #10
   3aadc:	str	r1, [r0]
   3aae0:	ldr	sl, [sp, #36]	; 0x24
   3aae4:	mov	r7, #0
   3aae8:	b	3b5f8 <__assert_fail@plt+0x28b7c>
   3aaec:	cmn	r9, #2
   3aaf0:	mov	r2, r9
   3aaf4:	beq	3ab0c <__assert_fail@plt+0x28090>
   3aaf8:	cmp	r0, #24
   3aafc:	beq	3ab40 <__assert_fail@plt+0x280c4>
   3ab00:	cmp	r0, #1
   3ab04:	cmpeq	r1, #44	; 0x2c
   3ab08:	beq	3ab34 <__assert_fail@plt+0x280b8>
   3ab0c:	ldr	r1, [sp, #12]
   3ab10:	cmp	r1, #0
   3ab14:	beq	3b1d4 <__assert_fail@plt+0x28758>
   3ab18:	mov	r0, #1
   3ab1c:	str	r7, [r6, #40]	; 0x28
   3ab20:	bfi	sl, r0, #0, #8
   3ab24:	stm	ip, {r5, sl}
   3ab28:	ldr	sl, [sp, #36]	; 0x24
   3ab2c:	mov	r7, sl
   3ab30:	b	3b5f8 <__assert_fail@plt+0x28b7c>
   3ab34:	mvn	r2, #0
   3ab38:	str	sl, [sp, #52]	; 0x34
   3ab3c:	b	3ab6c <__assert_fail@plt+0x280f0>
   3ab40:	ldr	sl, [sp, #36]	; 0x24
   3ab44:	mov	r5, r9
   3ab48:	cmp	r0, #24
   3ab4c:	beq	3ac14 <__assert_fail@plt+0x28198>
   3ab50:	b	3b1b4 <__assert_fail@plt+0x28738>
   3ab54:	add	r0, sl, sl, lsl #2
   3ab58:	add	r0, r1, r0, lsl #1
   3ab5c:	movw	r1, #32816	; 0x8030
   3ab60:	sub	r2, r0, #48	; 0x30
   3ab64:	cmp	r0, r1
   3ab68:	movwgt	r2, #32768	; 0x8000
   3ab6c:	mov	sl, r2
   3ab70:	ldr	r2, [sp, #40]	; 0x28
   3ab74:	mov	r0, ip
   3ab78:	mov	r1, r6
   3ab7c:	bl	38d6c <__assert_fail@plt+0x262f0>
   3ab80:	ldr	r1, [r6, #40]	; 0x28
   3ab84:	ldr	ip, [sp, #44]	; 0x2c
   3ab88:	add	r0, r1, r0
   3ab8c:	str	r0, [r6, #40]	; 0x28
   3ab90:	ldrb	r0, [ip, #4]
   3ab94:	cmp	r0, #24
   3ab98:	beq	3abe4 <__assert_fail@plt+0x28168>
   3ab9c:	cmp	r0, #2
   3aba0:	beq	3b17c <__assert_fail@plt+0x28700>
   3aba4:	ldrb	r1, [ip]
   3aba8:	cmp	r1, #44	; 0x2c
   3abac:	beq	3abe4 <__assert_fail@plt+0x28168>
   3abb0:	mvn	r2, #1
   3abb4:	cmp	r1, #48	; 0x30
   3abb8:	bcc	3ab6c <__assert_fail@plt+0x280f0>
   3abbc:	cmp	r0, #1
   3abc0:	bne	3ab6c <__assert_fail@plt+0x280f0>
   3abc4:	cmn	sl, #2
   3abc8:	beq	3ab6c <__assert_fail@plt+0x280f0>
   3abcc:	cmp	r1, #57	; 0x39
   3abd0:	bhi	3ab6c <__assert_fail@plt+0x280f0>
   3abd4:	cmn	sl, #1
   3abd8:	bne	3ab54 <__assert_fail@plt+0x280d8>
   3abdc:	sub	r2, r1, #48	; 0x30
   3abe0:	b	3ab6c <__assert_fail@plt+0x280f0>
   3abe4:	cmn	sl, #2
   3abe8:	beq	3b17c <__assert_fail@plt+0x28700>
   3abec:	cmn	sl, #1
   3abf0:	mov	r5, sl
   3abf4:	beq	3ac08 <__assert_fail@plt+0x2818c>
   3abf8:	ldr	sl, [sp, #36]	; 0x24
   3abfc:	cmp	r9, r5
   3ac00:	ble	3ac0c <__assert_fail@plt+0x28190>
   3ac04:	b	3b1b4 <__assert_fail@plt+0x28738>
   3ac08:	ldr	sl, [sp, #36]	; 0x24
   3ac0c:	cmp	r0, #24
   3ac10:	bne	3b1b4 <__assert_fail@plt+0x28738>
   3ac14:	cmn	r5, #1
   3ac18:	mov	r0, r5
   3ac1c:	moveq	r0, r9
   3ac20:	cmp	r0, #32768	; 0x8000
   3ac24:	bge	3b1c0 <__assert_fail@plt+0x28744>
   3ac28:	ldr	r2, [sp, #40]	; 0x28
   3ac2c:	mov	r0, ip
   3ac30:	mov	r1, r6
   3ac34:	bl	38d6c <__assert_fail@plt+0x262f0>
   3ac38:	ldr	r1, [r6, #40]	; 0x28
   3ac3c:	mov	r7, #0
   3ac40:	cmp	sl, #0
   3ac44:	add	r0, r1, r0
   3ac48:	str	r0, [r6, #40]	; 0x28
   3ac4c:	beq	3b078 <__assert_fail@plt+0x285fc>
   3ac50:	ldr	lr, [sp, #20]
   3ac54:	orrs	r0, r5, r9
   3ac58:	beq	3b080 <__assert_fail@plt+0x28604>
   3ac5c:	mov	r0, #0
   3ac60:	cmp	r9, #1
   3ac64:	mov	r7, sl
   3ac68:	str	r0, [sp, #32]
   3ac6c:	ldr	ip, [sp, #44]	; 0x2c
   3ac70:	str	r5, [sp, #48]	; 0x30
   3ac74:	bge	3b128 <__assert_fail@plt+0x286ac>
   3ac78:	ldrb	r0, [r7, #24]
   3ac7c:	cmp	r0, #17
   3ac80:	bne	3acf0 <__assert_fail@plt+0x28274>
   3ac84:	ldr	r0, [r7, #20]
   3ac88:	mov	r2, r7
   3ac8c:	mov	r1, r2
   3ac90:	ldr	r2, [r2, #4]
   3ac94:	cmp	r2, #0
   3ac98:	bne	3ac8c <__assert_fail@plt+0x28210>
   3ac9c:	ldr	r2, [r1, #8]
   3aca0:	cmp	r2, #0
   3aca4:	bne	3ac8c <__assert_fail@plt+0x28210>
   3aca8:	ldr	r2, [r1, #24]
   3acac:	uxtb	r3, r2
   3acb0:	cmp	r3, #17
   3acb4:	ldreq	r3, [r1, #20]
   3acb8:	cmpeq	r3, r0
   3acbc:	orreq	r2, r2, #524288	; 0x80000
   3acc0:	streq	r2, [r1, #24]
   3acc4:	ldr	r3, [r1]
   3acc8:	cmp	r3, #0
   3accc:	beq	3acf0 <__assert_fail@plt+0x28274>
   3acd0:	ldr	r2, [r3, #8]
   3acd4:	cmp	r2, r1
   3acd8:	mov	r1, r3
   3acdc:	beq	3aca8 <__assert_fail@plt+0x2822c>
   3ace0:	cmp	r2, #0
   3ace4:	mov	r1, r3
   3ace8:	beq	3aca8 <__assert_fail@plt+0x2822c>
   3acec:	b	3ac8c <__assert_fail@plt+0x28210>
   3acf0:	ldr	r1, [r8]
   3acf4:	cmn	r5, #1
   3acf8:	mov	r6, #10
   3acfc:	movweq	r6, #11
   3ad00:	cmp	r1, #31
   3ad04:	beq	3b148 <__assert_fail@plt+0x286cc>
   3ad08:	ldr	r0, [lr]
   3ad0c:	add	r2, r1, #1
   3ad10:	add	sl, r0, r1, lsl #5
   3ad14:	mvn	r0, #0
   3ad18:	str	r2, [r8]
   3ad1c:	str	r4, [sl, #4]!
   3ad20:	str	r7, [sl, #4]
   3ad24:	str	r4, [sl, #8]
   3ad28:	str	r4, [sl, #12]
   3ad2c:	str	r4, [sl, #16]
   3ad30:	str	r4, [sl, #20]
   3ad34:	str	r6, [sl, #24]
   3ad38:	str	r0, [sl, #28]
   3ad3c:	add	r0, r9, #2
   3ad40:	str	sl, [r7]
   3ad44:	cmp	r0, r5
   3ad48:	bgt	3b00c <__assert_fail@plt+0x28590>
   3ad4c:	mov	r6, sl
   3ad50:	b	3ad60 <__assert_fail@plt+0x282e4>
   3ad54:	ldr	sl, [r7]
   3ad58:	mov	r0, r1
   3ad5c:	add	r0, r1, #1
   3ad60:	ldr	r1, [r8]
   3ad64:	str	r0, [sp, #52]	; 0x34
   3ad68:	cmp	r1, #31
   3ad6c:	beq	3af58 <__assert_fail@plt+0x284dc>
   3ad70:	ldr	r0, [lr]
   3ad74:	add	r3, r1, #1
   3ad78:	add	r9, r0, r1, lsl #5
   3ad7c:	add	r2, r7, #20
   3ad80:	sub	r5, fp, #80	; 0x50
   3ad84:	str	r3, [r8]
   3ad88:	str	r4, [r9, #4]!
   3ad8c:	str	r4, [r9, #4]
   3ad90:	str	r4, [r9, #8]
   3ad94:	ldm	r2, {r0, r1}
   3ad98:	mvn	r2, #0
   3ad9c:	str	r4, [r9, #12]
   3ada0:	str	r4, [r9, #16]
   3ada4:	str	r2, [r9, #28]
   3ada8:	str	r0, [r9, #20]
   3adac:	bic	r0, r1, #786432	; 0xc0000
   3adb0:	str	r0, [r9, #24]
   3adb4:	mov	r0, r9
   3adb8:	str	r9, [fp, #-80]	; 0xffffffb0
   3adbc:	b	3ae00 <__assert_fail@plt+0x28384>
   3adc0:	add	r3, r1, #1
   3adc4:	add	r0, r0, r1, lsl #5
   3adc8:	add	r2, r7, #20
   3adcc:	str	r3, [r8]
   3add0:	str	r4, [r0, #4]!
   3add4:	mvn	r3, #0
   3add8:	str	r4, [r0, #4]
   3addc:	str	r4, [r0, #8]
   3ade0:	ldm	r2, {r1, r2}
   3ade4:	str	r4, [r0, #12]
   3ade8:	str	r4, [r0, #16]
   3adec:	str	r3, [r0, #28]
   3adf0:	str	r1, [r0, #20]
   3adf4:	bic	r1, r2, #786432	; 0xc0000
   3adf8:	str	r1, [r0, #24]
   3adfc:	str	r0, [r5]
   3ae00:	str	sl, [r0]
   3ae04:	ldr	r0, [r5]
   3ae08:	ldr	r1, [r0, #24]
   3ae0c:	orr	r1, r1, #262144	; 0x40000
   3ae10:	str	r1, [r0, #24]
   3ae14:	ldr	r0, [r7, #4]
   3ae18:	ldr	sl, [r5]
   3ae1c:	cmp	r0, #0
   3ae20:	beq	3ae30 <__assert_fail@plt+0x283b4>
   3ae24:	add	r5, sl, #4
   3ae28:	mov	r7, r0
   3ae2c:	b	3ae64 <__assert_fail@plt+0x283e8>
   3ae30:	mov	r1, #0
   3ae34:	mov	r0, r7
   3ae38:	ldr	r7, [r7, #8]
   3ae3c:	cmp	r7, r1
   3ae40:	cmpne	r7, #0
   3ae44:	bne	3ae60 <__assert_fail@plt+0x283e4>
   3ae48:	ldr	r7, [r0]
   3ae4c:	ldr	sl, [sl]
   3ae50:	mov	r1, r0
   3ae54:	cmp	r7, #0
   3ae58:	bne	3ae34 <__assert_fail@plt+0x283b8>
   3ae5c:	b	3aea8 <__assert_fail@plt+0x2842c>
   3ae60:	add	r5, sl, #8
   3ae64:	ldr	r1, [r8]
   3ae68:	cmp	r1, #31
   3ae6c:	beq	3ae78 <__assert_fail@plt+0x283fc>
   3ae70:	ldr	r0, [lr]
   3ae74:	b	3adc0 <__assert_fail@plt+0x28344>
   3ae78:	mov	r0, #996	; 0x3e4
   3ae7c:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3ae80:	cmp	r0, #0
   3ae84:	beq	3aff4 <__assert_fail@plt+0x28578>
   3ae88:	ldr	lr, [sp, #20]
   3ae8c:	ldr	ip, [sp, #44]	; 0x2c
   3ae90:	ldr	r1, [lr]
   3ae94:	str	r1, [r0]
   3ae98:	mov	r1, #0
   3ae9c:	str	r0, [lr]
   3aea0:	str	r1, [r8]
   3aea4:	b	3adc0 <__assert_fail@plt+0x28344>
   3aea8:	mov	r7, r9
   3aeac:	ldr	r1, [r8]
   3aeb0:	cmp	r1, #31
   3aeb4:	beq	3af88 <__assert_fail@plt+0x2850c>
   3aeb8:	ldr	r0, [lr]
   3aebc:	add	r2, r1, #1
   3aec0:	add	r5, r0, r1, lsl #5
   3aec4:	mov	r0, #16
   3aec8:	cmp	r7, #0
   3aecc:	str	r2, [r8]
   3aed0:	str	r4, [r5, #4]!
   3aed4:	stmib	r5, {r6, r7}
   3aed8:	str	r4, [r5, #12]
   3aedc:	str	r4, [r5, #16]
   3aee0:	str	r4, [r5, #20]
   3aee4:	str	r0, [r5, #24]
   3aee8:	mvn	r0, #0
   3aeec:	str	r0, [r5, #28]
   3aef0:	str	r5, [r6]
   3aef4:	beq	3b5e0 <__assert_fail@plt+0x28b64>
   3aef8:	str	r5, [r7]
   3aefc:	ldr	r1, [r8]
   3af00:	cmp	r1, #31
   3af04:	beq	3afb8 <__assert_fail@plt+0x2853c>
   3af08:	ldr	r0, [lr]
   3af0c:	add	r2, r1, #1
   3af10:	add	r6, r0, r1, lsl #5
   3af14:	mov	r0, #10
   3af18:	ldr	r1, [sp, #52]	; 0x34
   3af1c:	str	r2, [r8]
   3af20:	str	r4, [r6, #4]!
   3af24:	str	r5, [r6, #4]
   3af28:	str	r4, [r6, #8]
   3af2c:	str	r4, [r6, #12]
   3af30:	str	r4, [r6, #16]
   3af34:	str	r4, [r6, #20]
   3af38:	str	r0, [r6, #24]
   3af3c:	mvn	r0, #0
   3af40:	str	r0, [r6, #28]
   3af44:	ldr	r0, [sp, #48]	; 0x30
   3af48:	str	r6, [r5]
   3af4c:	cmp	r1, r0
   3af50:	blt	3ad54 <__assert_fail@plt+0x282d8>
   3af54:	b	3b008 <__assert_fail@plt+0x2858c>
   3af58:	mov	r0, #996	; 0x3e4
   3af5c:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3af60:	cmp	r0, #0
   3af64:	beq	3afe8 <__assert_fail@plt+0x2856c>
   3af68:	ldr	lr, [sp, #20]
   3af6c:	ldr	ip, [sp, #44]	; 0x2c
   3af70:	ldr	r1, [lr]
   3af74:	str	r1, [r0]
   3af78:	mov	r1, #0
   3af7c:	str	r0, [lr]
   3af80:	str	r1, [r8]
   3af84:	b	3ad74 <__assert_fail@plt+0x282f8>
   3af88:	mov	r0, #996	; 0x3e4
   3af8c:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3af90:	ldr	lr, [sp, #20]
   3af94:	ldr	ip, [sp, #44]	; 0x2c
   3af98:	cmp	r0, #0
   3af9c:	beq	3b5e0 <__assert_fail@plt+0x28b64>
   3afa0:	ldr	r1, [lr]
   3afa4:	str	r1, [r0]
   3afa8:	mov	r1, #0
   3afac:	str	r0, [lr]
   3afb0:	str	r1, [r8]
   3afb4:	b	3aebc <__assert_fail@plt+0x28440>
   3afb8:	mov	r0, #996	; 0x3e4
   3afbc:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3afc0:	ldr	lr, [sp, #20]
   3afc4:	ldr	ip, [sp, #44]	; 0x2c
   3afc8:	cmp	r0, #0
   3afcc:	beq	3b5e0 <__assert_fail@plt+0x28b64>
   3afd0:	ldr	r1, [lr]
   3afd4:	str	r1, [r0]
   3afd8:	mov	r1, #0
   3afdc:	str	r0, [lr]
   3afe0:	str	r1, [r8]
   3afe4:	b	3af0c <__assert_fail@plt+0x28490>
   3afe8:	mov	r7, #0
   3afec:	str	r7, [fp, #-80]	; 0xffffffb0
   3aff0:	b	3affc <__assert_fail@plt+0x28580>
   3aff4:	mov	r7, #0
   3aff8:	str	r7, [r5]
   3affc:	ldr	ip, [sp, #44]	; 0x2c
   3b000:	ldr	lr, [sp, #20]
   3b004:	b	3aeac <__assert_fail@plt+0x28430>
   3b008:	mov	sl, r6
   3b00c:	ldr	r5, [sp, #32]
   3b010:	ldr	r6, [sp, #24]
   3b014:	cmp	r5, #0
   3b018:	beq	3b06c <__assert_fail@plt+0x285f0>
   3b01c:	ldr	r1, [r8]
   3b020:	cmp	r1, #31
   3b024:	beq	3b184 <__assert_fail@plt+0x28708>
   3b028:	ldr	r0, [lr]
   3b02c:	add	r2, r1, #1
   3b030:	add	r7, r0, r1, lsl #5
   3b034:	mov	r0, #0
   3b038:	mov	r1, #16
   3b03c:	str	r2, [r8]
   3b040:	str	r0, [r7, #4]!
   3b044:	stmib	r7, {r5, sl}
   3b048:	str	r0, [r7, #12]
   3b04c:	str	r0, [r7, #16]
   3b050:	str	r0, [r7, #20]
   3b054:	str	r1, [r7, #24]
   3b058:	mvn	r1, #0
   3b05c:	str	r1, [r7, #28]
   3b060:	str	r7, [r5]
   3b064:	str	r7, [sl]
   3b068:	b	3b618 <__assert_fail@plt+0x28b9c>
   3b06c:	mov	r0, #0
   3b070:	mov	r7, sl
   3b074:	b	3b618 <__assert_fail@plt+0x28b9c>
   3b078:	ldr	ip, [sp, #44]	; 0x2c
   3b07c:	b	3b5f8 <__assert_fail@plt+0x28b7c>
   3b080:	ldr	ip, [sp, #44]	; 0x2c
   3b084:	mov	r0, sl
   3b088:	mov	r5, r0
   3b08c:	ldr	r0, [r0, #4]
   3b090:	cmp	r0, #0
   3b094:	bne	3b088 <__assert_fail@plt+0x2860c>
   3b098:	ldr	r0, [r5, #8]
   3b09c:	cmp	r0, #0
   3b0a0:	bne	3b088 <__assert_fail@plt+0x2860c>
   3b0a4:	ldr	r0, [r5, #24]
   3b0a8:	movw	r1, #255	; 0xff
   3b0ac:	movt	r1, #4
   3b0b0:	and	r0, r0, r1
   3b0b4:	cmp	r0, #3
   3b0b8:	beq	3b0f0 <__assert_fail@plt+0x28674>
   3b0bc:	cmp	r0, #6
   3b0c0:	bne	3b0fc <__assert_fail@plt+0x28680>
   3b0c4:	ldr	r9, [r5, #20]
   3b0c8:	ldr	r0, [r9]
   3b0cc:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3b0d0:	ldr	r0, [r9, #4]
   3b0d4:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3b0d8:	ldr	r0, [r9, #8]
   3b0dc:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3b0e0:	ldr	r0, [r9, #12]
   3b0e4:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3b0e8:	mov	r0, r9
   3b0ec:	b	3b0f4 <__assert_fail@plt+0x28678>
   3b0f0:	ldr	r0, [r5, #20]
   3b0f4:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3b0f8:	ldr	ip, [sp, #44]	; 0x2c
   3b0fc:	ldr	r1, [r5]
   3b100:	cmp	r1, #0
   3b104:	beq	3b5f8 <__assert_fail@plt+0x28b7c>
   3b108:	ldr	r0, [r1, #8]
   3b10c:	cmp	r0, r5
   3b110:	mov	r5, r1
   3b114:	beq	3b0a4 <__assert_fail@plt+0x28628>
   3b118:	cmp	r0, #0
   3b11c:	mov	r5, r1
   3b120:	beq	3b0a4 <__assert_fail@plt+0x28628>
   3b124:	b	3b088 <__assert_fail@plt+0x2860c>
   3b128:	mov	r5, sl
   3b12c:	str	r9, [sp, #8]
   3b130:	beq	3b42c <__assert_fail@plt+0x289b0>
   3b134:	ldr	r9, [sp, #36]	; 0x24
   3b138:	mov	r0, #2
   3b13c:	ldr	r5, [r9]
   3b140:	mov	sl, r9
   3b144:	b	3b274 <__assert_fail@plt+0x287f8>
   3b148:	mov	r0, #996	; 0x3e4
   3b14c:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3b150:	ldr	lr, [sp, #20]
   3b154:	ldr	ip, [sp, #44]	; 0x2c
   3b158:	cmp	r0, #0
   3b15c:	beq	3b5e0 <__assert_fail@plt+0x28b64>
   3b160:	ldr	r1, [lr]
   3b164:	ldr	r5, [sp, #48]	; 0x30
   3b168:	str	r1, [r0]
   3b16c:	mov	r1, #0
   3b170:	str	r0, [lr]
   3b174:	str	r1, [r8]
   3b178:	b	3ad0c <__assert_fail@plt+0x28290>
   3b17c:	ldr	sl, [sp, #52]	; 0x34
   3b180:	b	3ab0c <__assert_fail@plt+0x28090>
   3b184:	mov	r0, #996	; 0x3e4
   3b188:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3b18c:	cmp	r0, #0
   3b190:	beq	3b1ec <__assert_fail@plt+0x28770>
   3b194:	ldr	r2, [sp, #20]
   3b198:	ldr	ip, [sp, #44]	; 0x2c
   3b19c:	ldr	r1, [r2]
   3b1a0:	str	r1, [r0]
   3b1a4:	mov	r1, #0
   3b1a8:	str	r0, [r2]
   3b1ac:	str	r1, [r8]
   3b1b0:	b	3b02c <__assert_fail@plt+0x285b0>
   3b1b4:	ldr	r0, [sp, #16]
   3b1b8:	mov	r1, #10
   3b1bc:	b	3b1c8 <__assert_fail@plt+0x2874c>
   3b1c0:	ldr	r0, [sp, #16]
   3b1c4:	mov	r1, #15
   3b1c8:	str	r1, [r0]
   3b1cc:	mov	r7, #0
   3b1d0:	b	3b5f8 <__assert_fail@plt+0x28b7c>
   3b1d4:	ldr	r1, [sp, #16]
   3b1d8:	cmp	r0, #2
   3b1dc:	mov	r0, #10
   3b1e0:	movweq	r0, #9
   3b1e4:	str	r0, [r1]
   3b1e8:	b	3aae0 <__assert_fail@plt+0x28064>
   3b1ec:	ldr	ip, [sp, #44]	; 0x2c
   3b1f0:	b	3aae0 <__assert_fail@plt+0x28064>
   3b1f4:	mov	r0, #996	; 0x3e4
   3b1f8:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3b1fc:	cmp	r0, #0
   3b200:	beq	3b254 <__assert_fail@plt+0x287d8>
   3b204:	ldr	lr, [sp, #20]
   3b208:	ldr	ip, [sp, #44]	; 0x2c
   3b20c:	ldr	r1, [lr]
   3b210:	str	r1, [r0]
   3b214:	mov	r1, #0
   3b218:	str	r0, [lr]
   3b21c:	str	r1, [r8]
   3b220:	b	3b288 <__assert_fail@plt+0x2880c>
   3b224:	mov	r0, #996	; 0x3e4
   3b228:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3b22c:	ldr	lr, [sp, #20]
   3b230:	ldr	ip, [sp, #44]	; 0x2c
   3b234:	cmp	r0, #0
   3b238:	beq	3b5e0 <__assert_fail@plt+0x28b64>
   3b23c:	ldr	r1, [lr]
   3b240:	str	r1, [r0]
   3b244:	mov	r1, #0
   3b248:	str	r0, [lr]
   3b24c:	str	r1, [r8]
   3b250:	b	3b3d0 <__assert_fail@plt+0x28954>
   3b254:	mov	sl, #0
   3b258:	str	sl, [fp, #-80]	; 0xffffffb0
   3b25c:	b	3b268 <__assert_fail@plt+0x287ec>
   3b260:	mov	sl, #0
   3b264:	str	sl, [r6]
   3b268:	ldr	ip, [sp, #44]	; 0x2c
   3b26c:	ldr	lr, [sp, #20]
   3b270:	b	3b3c0 <__assert_fail@plt+0x28944>
   3b274:	ldr	r1, [r8]
   3b278:	str	r0, [sp, #52]	; 0x34
   3b27c:	cmp	r1, #31
   3b280:	beq	3b1f4 <__assert_fail@plt+0x28778>
   3b284:	ldr	r0, [lr]
   3b288:	add	r3, r1, #1
   3b28c:	add	r7, r0, r1, lsl #5
   3b290:	add	r2, sl, #20
   3b294:	sub	r6, fp, #80	; 0x50
   3b298:	str	r3, [r8]
   3b29c:	str	r4, [r7, #4]!
   3b2a0:	str	r4, [r7, #4]
   3b2a4:	str	r4, [r7, #8]
   3b2a8:	ldm	r2, {r0, r1}
   3b2ac:	mvn	r2, #0
   3b2b0:	str	r4, [r7, #12]
   3b2b4:	str	r4, [r7, #16]
   3b2b8:	str	r2, [r7, #28]
   3b2bc:	str	r0, [r7, #20]
   3b2c0:	bic	r0, r1, #786432	; 0xc0000
   3b2c4:	str	r0, [r7, #24]
   3b2c8:	mov	r0, r7
   3b2cc:	str	r7, [fp, #-80]	; 0xffffffb0
   3b2d0:	b	3b314 <__assert_fail@plt+0x28898>
   3b2d4:	add	r3, r1, #1
   3b2d8:	add	r0, r0, r1, lsl #5
   3b2dc:	add	r2, sl, #20
   3b2e0:	str	r3, [r8]
   3b2e4:	str	r4, [r0, #4]!
   3b2e8:	mvn	r3, #0
   3b2ec:	str	r4, [r0, #4]
   3b2f0:	str	r4, [r0, #8]
   3b2f4:	ldm	r2, {r1, r2}
   3b2f8:	str	r4, [r0, #12]
   3b2fc:	str	r4, [r0, #16]
   3b300:	str	r3, [r0, #28]
   3b304:	str	r1, [r0, #20]
   3b308:	bic	r1, r2, #786432	; 0xc0000
   3b30c:	str	r1, [r0, #24]
   3b310:	str	r0, [r6]
   3b314:	str	r5, [r0]
   3b318:	ldr	r0, [r6]
   3b31c:	ldr	r1, [r0, #24]
   3b320:	orr	r1, r1, #262144	; 0x40000
   3b324:	str	r1, [r0, #24]
   3b328:	ldr	r0, [sl, #4]
   3b32c:	ldr	r5, [r6]
   3b330:	cmp	r0, #0
   3b334:	beq	3b344 <__assert_fail@plt+0x288c8>
   3b338:	add	r6, r5, #4
   3b33c:	mov	sl, r0
   3b340:	b	3b378 <__assert_fail@plt+0x288fc>
   3b344:	mov	r1, #0
   3b348:	mov	r0, sl
   3b34c:	ldr	sl, [sl, #8]
   3b350:	cmp	sl, r1
   3b354:	cmpne	sl, #0
   3b358:	bne	3b374 <__assert_fail@plt+0x288f8>
   3b35c:	ldr	sl, [r0]
   3b360:	ldr	r5, [r5]
   3b364:	mov	r1, r0
   3b368:	cmp	sl, #0
   3b36c:	bne	3b348 <__assert_fail@plt+0x288cc>
   3b370:	b	3b3bc <__assert_fail@plt+0x28940>
   3b374:	add	r6, r5, #8
   3b378:	ldr	r1, [r8]
   3b37c:	cmp	r1, #31
   3b380:	beq	3b38c <__assert_fail@plt+0x28910>
   3b384:	ldr	r0, [lr]
   3b388:	b	3b2d4 <__assert_fail@plt+0x28858>
   3b38c:	mov	r0, #996	; 0x3e4
   3b390:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3b394:	cmp	r0, #0
   3b398:	beq	3b260 <__assert_fail@plt+0x287e4>
   3b39c:	ldr	lr, [sp, #20]
   3b3a0:	ldr	ip, [sp, #44]	; 0x2c
   3b3a4:	ldr	r1, [lr]
   3b3a8:	str	r1, [r0]
   3b3ac:	mov	r1, #0
   3b3b0:	str	r0, [lr]
   3b3b4:	str	r1, [r8]
   3b3b8:	b	3b2d4 <__assert_fail@plt+0x28858>
   3b3bc:	mov	sl, r7
   3b3c0:	ldr	r1, [r8]
   3b3c4:	cmp	r1, #31
   3b3c8:	beq	3b224 <__assert_fail@plt+0x287a8>
   3b3cc:	ldr	r0, [lr]
   3b3d0:	add	r2, r1, #1
   3b3d4:	add	r1, r0, r1, lsl #5
   3b3d8:	mov	r0, #16
   3b3dc:	cmp	sl, #0
   3b3e0:	str	r2, [r8]
   3b3e4:	str	r4, [r1, #4]!
   3b3e8:	stmib	r1, {r9, sl}
   3b3ec:	str	r4, [r1, #12]
   3b3f0:	str	r4, [r1, #16]
   3b3f4:	str	r4, [r1, #20]
   3b3f8:	str	r0, [r1, #24]
   3b3fc:	mvn	r0, #0
   3b400:	str	r0, [r1, #28]
   3b404:	str	r1, [r9]
   3b408:	beq	3b5e0 <__assert_fail@plt+0x28b64>
   3b40c:	mov	r5, r1
   3b410:	str	r1, [sl]
   3b414:	ldr	r2, [sp, #52]	; 0x34
   3b418:	ldr	r1, [sp, #8]
   3b41c:	mov	r9, r5
   3b420:	add	r0, r2, #1
   3b424:	cmp	r2, r1
   3b428:	blt	3b274 <__assert_fail@plt+0x287f8>
   3b42c:	ldr	r1, [sp, #48]	; 0x30
   3b430:	ldr	r2, [sp, #8]
   3b434:	mov	r0, #0
   3b438:	cmp	r2, r1
   3b43c:	bne	3b44c <__assert_fail@plt+0x289d0>
   3b440:	ldr	r6, [sp, #24]
   3b444:	mov	r7, r5
   3b448:	b	3b618 <__assert_fail@plt+0x28b9c>
   3b44c:	mov	r9, sl
   3b450:	ldr	r1, [r8]
   3b454:	str	r5, [sp, #32]
   3b458:	ldr	r6, [r9], #20
   3b45c:	cmp	r1, #31
   3b460:	beq	3b5a0 <__assert_fail@plt+0x28b24>
   3b464:	ldr	r0, [lr]
   3b468:	add	r2, r1, #1
   3b46c:	add	r7, r0, r1, lsl #5
   3b470:	str	r2, [r8]
   3b474:	str	r4, [r7, #4]!
   3b478:	mvn	r2, #0
   3b47c:	str	r4, [r7, #4]
   3b480:	str	r4, [r7, #8]
   3b484:	ldm	r9, {r0, r1}
   3b488:	str	r4, [r7, #12]
   3b48c:	str	r4, [r7, #16]
   3b490:	str	r2, [r7, #28]
   3b494:	sub	r9, fp, #80	; 0x50
   3b498:	str	r0, [r7, #20]
   3b49c:	bic	r0, r1, #786432	; 0xc0000
   3b4a0:	str	r0, [r7, #24]
   3b4a4:	mov	r0, r7
   3b4a8:	str	r7, [fp, #-80]	; 0xffffffb0
   3b4ac:	b	3b4f0 <__assert_fail@plt+0x28a74>
   3b4b0:	add	r3, r1, #1
   3b4b4:	add	r0, r0, r1, lsl #5
   3b4b8:	add	r2, sl, #20
   3b4bc:	str	r3, [r8]
   3b4c0:	str	r4, [r0, #4]!
   3b4c4:	mvn	r3, #0
   3b4c8:	str	r4, [r0, #4]
   3b4cc:	str	r4, [r0, #8]
   3b4d0:	ldm	r2, {r1, r2}
   3b4d4:	str	r4, [r0, #12]
   3b4d8:	str	r4, [r0, #16]
   3b4dc:	str	r3, [r0, #28]
   3b4e0:	str	r1, [r0, #20]
   3b4e4:	bic	r1, r2, #786432	; 0xc0000
   3b4e8:	str	r1, [r0, #24]
   3b4ec:	str	r0, [r9]
   3b4f0:	str	r6, [r0]
   3b4f4:	ldr	r0, [r9]
   3b4f8:	ldr	r1, [r0, #24]
   3b4fc:	orr	r1, r1, #262144	; 0x40000
   3b500:	str	r1, [r0, #24]
   3b504:	ldr	r0, [sl, #4]
   3b508:	ldr	r6, [r9]
   3b50c:	cmp	r0, #0
   3b510:	beq	3b520 <__assert_fail@plt+0x28aa4>
   3b514:	add	r9, r6, #4
   3b518:	mov	sl, r0
   3b51c:	b	3b55c <__assert_fail@plt+0x28ae0>
   3b520:	ldr	r5, [sp, #48]	; 0x30
   3b524:	ldr	r9, [sp, #8]
   3b528:	mov	r1, #0
   3b52c:	mov	r0, sl
   3b530:	ldr	sl, [sl, #8]
   3b534:	cmp	sl, r1
   3b538:	cmpne	sl, #0
   3b53c:	bne	3b558 <__assert_fail@plt+0x28adc>
   3b540:	ldr	sl, [r0]
   3b544:	ldr	r6, [r6]
   3b548:	mov	r1, r0
   3b54c:	cmp	sl, #0
   3b550:	bne	3b52c <__assert_fail@plt+0x28ab0>
   3b554:	b	3ac78 <__assert_fail@plt+0x281fc>
   3b558:	add	r9, r6, #8
   3b55c:	ldr	r1, [r8]
   3b560:	cmp	r1, #31
   3b564:	beq	3b570 <__assert_fail@plt+0x28af4>
   3b568:	ldr	r0, [lr]
   3b56c:	b	3b4b0 <__assert_fail@plt+0x28a34>
   3b570:	mov	r0, #996	; 0x3e4
   3b574:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3b578:	cmp	r0, #0
   3b57c:	beq	3b5d8 <__assert_fail@plt+0x28b5c>
   3b580:	ldr	lr, [sp, #20]
   3b584:	ldr	ip, [sp, #44]	; 0x2c
   3b588:	ldr	r1, [lr]
   3b58c:	str	r1, [r0]
   3b590:	mov	r1, #0
   3b594:	str	r0, [lr]
   3b598:	str	r1, [r8]
   3b59c:	b	3b4b0 <__assert_fail@plt+0x28a34>
   3b5a0:	mov	r0, #996	; 0x3e4
   3b5a4:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3b5a8:	cmp	r0, #0
   3b5ac:	beq	3b5d0 <__assert_fail@plt+0x28b54>
   3b5b0:	ldr	lr, [sp, #20]
   3b5b4:	ldr	ip, [sp, #44]	; 0x2c
   3b5b8:	ldr	r1, [lr]
   3b5bc:	str	r1, [r0]
   3b5c0:	mov	r1, #0
   3b5c4:	str	r0, [lr]
   3b5c8:	str	r1, [r8]
   3b5cc:	b	3b468 <__assert_fail@plt+0x289ec>
   3b5d0:	str	r4, [fp, #-80]	; 0xffffffb0
   3b5d4:	b	3b5dc <__assert_fail@plt+0x28b60>
   3b5d8:	str	r4, [r9]
   3b5dc:	ldr	ip, [sp, #44]	; 0x2c
   3b5e0:	ldr	r0, [sp, #16]
   3b5e4:	ldr	r6, [sp, #24]
   3b5e8:	ldr	sl, [sp, #36]	; 0x24
   3b5ec:	mov	r1, #12
   3b5f0:	mov	r7, #0
   3b5f4:	str	r1, [r0]
   3b5f8:	clz	r0, r7
   3b5fc:	cmp	r7, #0
   3b600:	lsr	r0, r0, #5
   3b604:	bne	3b618 <__assert_fail@plt+0x28b9c>
   3b608:	ldr	r1, [sp, #16]
   3b60c:	ldr	r1, [r1]
   3b610:	cmp	r1, #0
   3b614:	bne	3b700 <__assert_fail@plt+0x28c84>
   3b618:	ldr	r1, [sp, #28]
   3b61c:	cmp	r1, #0
   3b620:	beq	3a9d0 <__assert_fail@plt+0x27f54>
   3b624:	ldrb	r1, [ip, #4]
   3b628:	cmp	r1, #23
   3b62c:	cmpne	r1, #11
   3b630:	bne	3a9d0 <__assert_fail@plt+0x27f54>
   3b634:	ldr	r8, [sp, #16]
   3b638:	movw	r6, #255	; 0xff
   3b63c:	cmp	r0, #0
   3b640:	movt	r6, #4
   3b644:	bne	3b6dc <__assert_fail@plt+0x28c60>
   3b648:	mov	r5, r7
   3b64c:	ldr	r7, [r7, #4]
   3b650:	cmp	r7, #0
   3b654:	bne	3b648 <__assert_fail@plt+0x28bcc>
   3b658:	ldr	r7, [r5, #8]
   3b65c:	cmp	r7, #0
   3b660:	bne	3b648 <__assert_fail@plt+0x28bcc>
   3b664:	ldr	r0, [r5, #24]
   3b668:	and	r0, r0, r6
   3b66c:	cmp	r0, #3
   3b670:	beq	3b6a8 <__assert_fail@plt+0x28c2c>
   3b674:	cmp	r0, #6
   3b678:	bne	3b6b0 <__assert_fail@plt+0x28c34>
   3b67c:	ldr	r4, [r5, #20]
   3b680:	ldr	r0, [r4]
   3b684:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3b688:	ldr	r0, [r4, #4]
   3b68c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3b690:	ldr	r0, [r4, #8]
   3b694:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3b698:	ldr	r0, [r4, #12]
   3b69c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3b6a0:	mov	r0, r4
   3b6a4:	b	3b6ac <__assert_fail@plt+0x28c30>
   3b6a8:	ldr	r0, [r5, #20]
   3b6ac:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3b6b0:	ldr	r0, [r5]
   3b6b4:	cmp	r0, #0
   3b6b8:	beq	3b6dc <__assert_fail@plt+0x28c60>
   3b6bc:	ldr	r7, [r0, #8]
   3b6c0:	cmp	r7, r5
   3b6c4:	mov	r5, r0
   3b6c8:	beq	3b664 <__assert_fail@plt+0x28be8>
   3b6cc:	cmp	r7, #0
   3b6d0:	mov	r5, r0
   3b6d4:	beq	3b664 <__assert_fail@plt+0x28be8>
   3b6d8:	b	3b648 <__assert_fail@plt+0x28bcc>
   3b6dc:	mov	r0, #13
   3b6e0:	mov	sl, #0
   3b6e4:	str	r0, [r8]
   3b6e8:	mov	r0, sl
   3b6ec:	sub	sp, fp, #28
   3b6f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b6f4:	mov	r7, r4
   3b6f8:	mov	r6, r9
   3b6fc:	b	3a984 <__assert_fail@plt+0x27f08>
   3b700:	cmp	sl, #0
   3b704:	beq	39c48 <__assert_fail@plt+0x271cc>
   3b708:	movw	r6, #255	; 0xff
   3b70c:	movt	r6, #4
   3b710:	mov	r5, sl
   3b714:	ldr	sl, [sl, #4]
   3b718:	cmp	sl, #0
   3b71c:	bne	3b710 <__assert_fail@plt+0x28c94>
   3b720:	ldr	sl, [r5, #8]
   3b724:	cmp	sl, #0
   3b728:	bne	3b710 <__assert_fail@plt+0x28c94>
   3b72c:	ldr	r0, [r5, #24]
   3b730:	and	r0, r0, r6
   3b734:	cmp	r0, #3
   3b738:	beq	3b770 <__assert_fail@plt+0x28cf4>
   3b73c:	cmp	r0, #6
   3b740:	bne	3b778 <__assert_fail@plt+0x28cfc>
   3b744:	ldr	r4, [r5, #20]
   3b748:	ldr	r0, [r4]
   3b74c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3b750:	ldr	r0, [r4, #4]
   3b754:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3b758:	ldr	r0, [r4, #8]
   3b75c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3b760:	ldr	r0, [r4, #12]
   3b764:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3b768:	mov	r0, r4
   3b76c:	b	3b774 <__assert_fail@plt+0x28cf8>
   3b770:	ldr	r0, [r5, #20]
   3b774:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3b778:	ldr	r0, [r5]
   3b77c:	cmp	r0, #0
   3b780:	beq	39c48 <__assert_fail@plt+0x271cc>
   3b784:	ldr	sl, [r0, #8]
   3b788:	cmp	sl, r5
   3b78c:	mov	r5, r0
   3b790:	beq	3b72c <__assert_fail@plt+0x28cb0>
   3b794:	cmp	sl, #0
   3b798:	mov	r5, r0
   3b79c:	beq	3b72c <__assert_fail@plt+0x28cb0>
   3b7a0:	b	3b710 <__assert_fail@plt+0x28c94>
   3b7a4:	cmp	r0, #2
   3b7a8:	blt	3b7c4 <__assert_fail@plt+0x28d48>
   3b7ac:	ldr	r0, [sl, #36]	; 0x24
   3b7b0:	cmp	r0, #0
   3b7b4:	bne	3a62c <__assert_fail@plt+0x27bb0>
   3b7b8:	ldrb	r0, [sl, #16]
   3b7bc:	tst	r0, #1
   3b7c0:	bne	3a62c <__assert_fail@plt+0x27bb0>
   3b7c4:	ldr	r0, [sl]
   3b7c8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3b7cc:	ldr	r0, [sl, #4]
   3b7d0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3b7d4:	ldr	r0, [sl, #8]
   3b7d8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3b7dc:	ldr	r0, [sl, #12]
   3b7e0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3b7e4:	mov	r0, sl
   3b7e8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3b7ec:	ldr	r1, [r8, #64]	; 0x40
   3b7f0:	cmp	r1, #31
   3b7f4:	beq	3bcd0 <__assert_fail@plt+0x29254>
   3b7f8:	ldr	r0, [r8, #56]	; 0x38
   3b7fc:	add	r2, r1, #1
   3b800:	add	r0, r0, r1, lsl #5
   3b804:	ldr	lr, [sp, #44]	; 0x2c
   3b808:	mov	r1, #3
   3b80c:	vmov.i32	q8, #0	; 0x00000000
   3b810:	str	r2, [r8, #64]	; 0x40
   3b814:	mov	r2, #0
   3b818:	add	r7, r0, #4
   3b81c:	str	r2, [r0, #20]
   3b820:	str	r4, [r0, #24]
   3b824:	str	r1, [r0, #28]
   3b828:	mov	r0, #28
   3b82c:	mov	r1, r7
   3b830:	vst1.32	{d16-d17}, [r1], r0
   3b834:	mvn	r0, #0
   3b838:	str	r0, [r1]
   3b83c:	b	3a984 <__assert_fail@plt+0x27f08>
   3b840:	mov	r0, #996	; 0x3e4
   3b844:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3b848:	cmp	r0, #0
   3b84c:	beq	3bb44 <__assert_fail@plt+0x290c8>
   3b850:	ldr	r1, [r8, #56]	; 0x38
   3b854:	ldr	lr, [sp, #44]	; 0x2c
   3b858:	str	r1, [r0]
   3b85c:	mov	r1, #0
   3b860:	str	r1, [r8, #64]	; 0x40
   3b864:	str	r0, [r8, #56]	; 0x38
   3b868:	b	39a98 <__assert_fail@plt+0x2701c>
   3b86c:	mov	r9, r0
   3b870:	b	3b92c <__assert_fail@plt+0x28eb0>
   3b874:	mov	r9, #7
   3b878:	b	3b92c <__assert_fail@plt+0x28eb0>
   3b87c:	mov	r0, #2
   3b880:	b	3bd08 <__assert_fail@plt+0x2928c>
   3b884:	mov	r0, #6
   3b888:	b	3a888 <__assert_fail@plt+0x27e0c>
   3b88c:	mov	r0, #996	; 0x3e4
   3b890:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3b894:	cmp	r0, #0
   3b898:	beq	3bb44 <__assert_fail@plt+0x290c8>
   3b89c:	ldr	r1, [r8, #56]	; 0x38
   3b8a0:	ldr	lr, [sp, #44]	; 0x2c
   3b8a4:	str	r1, [r0]
   3b8a8:	mov	r1, #0
   3b8ac:	str	r1, [r8, #64]	; 0x40
   3b8b0:	str	r0, [r8, #56]	; 0x38
   3b8b4:	b	39b70 <__assert_fail@plt+0x270f4>
   3b8b8:	mov	r0, #996	; 0x3e4
   3b8bc:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3b8c0:	cmp	r0, #0
   3b8c4:	beq	3bb44 <__assert_fail@plt+0x290c8>
   3b8c8:	ldr	r1, [r8, #56]	; 0x38
   3b8cc:	ldr	r3, [sp, #24]
   3b8d0:	ldr	lr, [sp, #44]	; 0x2c
   3b8d4:	str	r1, [r0]
   3b8d8:	mov	r1, #0
   3b8dc:	str	r1, [r8, #64]	; 0x40
   3b8e0:	str	r0, [r8, #56]	; 0x38
   3b8e4:	b	39d2c <__assert_fail@plt+0x272b0>
   3b8e8:	mov	r0, r4
   3b8ec:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3b8f0:	mov	r0, r5
   3b8f4:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3b8f8:	b	3a884 <__assert_fail@plt+0x27e08>
   3b8fc:	mov	r0, #996	; 0x3e4
   3b900:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3b904:	cmp	r0, #0
   3b908:	beq	3bb44 <__assert_fail@plt+0x290c8>
   3b90c:	ldr	r1, [r8, #56]	; 0x38
   3b910:	ldr	lr, [sp, #44]	; 0x2c
   3b914:	str	r1, [r0]
   3b918:	mov	r1, #0
   3b91c:	str	r1, [r8, #64]	; 0x40
   3b920:	str	r0, [r8, #56]	; 0x38
   3b924:	b	39b14 <__assert_fail@plt+0x27098>
   3b928:	mov	r9, #3
   3b92c:	ldr	r0, [sp, #16]
   3b930:	ldr	r4, [sp, #52]	; 0x34
   3b934:	ldr	sl, [sp, #48]	; 0x30
   3b938:	str	r9, [r0]
   3b93c:	ldr	r6, [sp, #40]	; 0x28
   3b940:	mov	r0, r4
   3b944:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3b948:	ldr	r0, [sl]
   3b94c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3b950:	ldr	r0, [sl, #4]
   3b954:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3b958:	ldr	r0, [sl, #8]
   3b95c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3b960:	ldr	r0, [sl, #12]
   3b964:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3b968:	mov	r0, sl
   3b96c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3b970:	ldr	r0, [sp, #16]
   3b974:	mov	r7, #0
   3b978:	mov	sl, #0
   3b97c:	ldr	r0, [r0]
   3b980:	b	39a3c <__assert_fail@plt+0x26fc0>
   3b984:	mov	r0, #996	; 0x3e4
   3b988:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3b98c:	cmp	r0, #0
   3b990:	beq	3bd04 <__assert_fail@plt+0x29288>
   3b994:	ldr	r1, [r8, #56]	; 0x38
   3b998:	ldr	lr, [sp, #44]	; 0x2c
   3b99c:	str	r1, [r0]
   3b9a0:	mov	r1, #0
   3b9a4:	str	r1, [r8, #64]	; 0x40
   3b9a8:	str	r0, [r8, #56]	; 0x38
   3b9ac:	b	3a648 <__assert_fail@plt+0x27bcc>
   3b9b0:	mov	r0, #996	; 0x3e4
   3b9b4:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3b9b8:	cmp	r0, #0
   3b9bc:	beq	3bd04 <__assert_fail@plt+0x29288>
   3b9c0:	ldr	r1, [r8, #56]	; 0x38
   3b9c4:	ldr	lr, [sp, #44]	; 0x2c
   3b9c8:	str	r1, [r0]
   3b9cc:	mov	r1, #0
   3b9d0:	str	r1, [r8, #64]	; 0x40
   3b9d4:	str	r0, [r8, #56]	; 0x38
   3b9d8:	b	3a6f4 <__assert_fail@plt+0x27c78>
   3b9dc:	mov	r0, #996	; 0x3e4
   3b9e0:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3b9e4:	cmp	r0, #0
   3b9e8:	beq	3bd04 <__assert_fail@plt+0x29288>
   3b9ec:	ldr	r1, [r8, #56]	; 0x38
   3b9f0:	ldr	lr, [sp, #44]	; 0x2c
   3b9f4:	str	r1, [r0]
   3b9f8:	mov	r1, #0
   3b9fc:	str	r1, [r8, #64]	; 0x40
   3ba00:	str	r0, [r8, #56]	; 0x38
   3ba04:	b	3a740 <__assert_fail@plt+0x27cc4>
   3ba08:	mov	r0, #996	; 0x3e4
   3ba0c:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3ba10:	cmp	r0, #0
   3ba14:	beq	3bb44 <__assert_fail@plt+0x290c8>
   3ba18:	ldr	r1, [r8, #56]	; 0x38
   3ba1c:	ldr	lr, [sp, #44]	; 0x2c
   3ba20:	mov	r6, sl
   3ba24:	str	r1, [r0]
   3ba28:	mov	r1, #0
   3ba2c:	str	r1, [r8, #64]	; 0x40
   3ba30:	str	r0, [r8, #56]	; 0x38
   3ba34:	b	3a940 <__assert_fail@plt+0x27ec4>
   3ba38:	mov	r0, r4
   3ba3c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3ba40:	ldr	lr, [sp, #44]	; 0x2c
   3ba44:	mov	r7, r9
   3ba48:	b	3a984 <__assert_fail@plt+0x27f08>
   3ba4c:	mov	r0, #996	; 0x3e4
   3ba50:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3ba54:	cmp	r0, #0
   3ba58:	beq	3bbec <__assert_fail@plt+0x29170>
   3ba5c:	ldr	r1, [r8, #56]	; 0x38
   3ba60:	ldr	r7, [sp, #24]
   3ba64:	ldr	lr, [sp, #44]	; 0x2c
   3ba68:	mov	sl, #0
   3ba6c:	str	r1, [r0]
   3ba70:	mov	r1, #0
   3ba74:	str	r1, [r8, #64]	; 0x40
   3ba78:	str	r0, [r8, #56]	; 0x38
   3ba7c:	b	3a7f0 <__assert_fail@plt+0x27d74>
   3ba80:	mov	r0, #996	; 0x3e4
   3ba84:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3ba88:	ldr	lr, [sp, #44]	; 0x2c
   3ba8c:	cmp	r0, #0
   3ba90:	beq	3a884 <__assert_fail@plt+0x27e08>
   3ba94:	ldr	r1, [r8, #56]	; 0x38
   3ba98:	str	r1, [r0]
   3ba9c:	mov	r1, #0
   3baa0:	str	r1, [r8, #64]	; 0x40
   3baa4:	str	r0, [r8, #56]	; 0x38
   3baa8:	b	3a83c <__assert_fail@plt+0x27dc0>
   3baac:	mov	r0, #996	; 0x3e4
   3bab0:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3bab4:	cmp	r0, #0
   3bab8:	beq	3bcac <__assert_fail@plt+0x29230>
   3babc:	ldr	r1, [r8, #56]	; 0x38
   3bac0:	ldr	r7, [sp, #24]
   3bac4:	ldr	lr, [sp, #44]	; 0x2c
   3bac8:	mov	sl, #0
   3bacc:	str	r1, [r0]
   3bad0:	mov	r1, #0
   3bad4:	str	r1, [r8, #64]	; 0x40
   3bad8:	str	r0, [r8, #56]	; 0x38
   3badc:	b	39cd4 <__assert_fail@plt+0x27258>
   3bae0:	mov	r0, #996	; 0x3e4
   3bae4:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3bae8:	cmp	r0, #0
   3baec:	beq	3bcb8 <__assert_fail@plt+0x2923c>
   3baf0:	ldr	r1, [r8, #56]	; 0x38
   3baf4:	ldr	r7, [sp, #24]
   3baf8:	ldr	lr, [sp, #44]	; 0x2c
   3bafc:	mov	sl, #0
   3bb00:	str	r1, [r0]
   3bb04:	mov	r1, #0
   3bb08:	str	r1, [r8, #64]	; 0x40
   3bb0c:	str	r0, [r8, #56]	; 0x38
   3bb10:	b	3a798 <__assert_fail@plt+0x27d1c>
   3bb14:	mov	r0, #996	; 0x3e4
   3bb18:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3bb1c:	cmp	r0, #0
   3bb20:	beq	3bb44 <__assert_fail@plt+0x290c8>
   3bb24:	ldr	r1, [r8, #56]	; 0x38
   3bb28:	ldr	r7, [sp, #24]
   3bb2c:	ldr	lr, [sp, #44]	; 0x2c
   3bb30:	str	r1, [r0]
   3bb34:	mov	r1, #0
   3bb38:	str	r1, [r8, #64]	; 0x40
   3bb3c:	str	r0, [r8, #56]	; 0x38
   3bb40:	b	3a8a8 <__assert_fail@plt+0x27e2c>
   3bb44:	mov	r0, #12
   3bb48:	ldr	r1, [sp, #16]
   3bb4c:	mov	sl, #0
   3bb50:	str	r0, [r1]
   3bb54:	b	3b6e8 <__assert_fail@plt+0x28c6c>
   3bb58:	mov	r4, #0
   3bb5c:	mov	r9, #0
   3bb60:	b	3bb6c <__assert_fail@plt+0x290f0>
   3bb64:	mov	r9, #4
   3bb68:	mov	r4, #128	; 0x80
   3bb6c:	bl	12740 <__ctype_b_loc@plt>
   3bb70:	ldr	r0, [r0]
   3bb74:	ldr	r7, [sp, #24]
   3bb78:	ldr	lr, [sp, #44]	; 0x2c
   3bb7c:	mov	r1, #1
   3bb80:	mov	sl, #0
   3bb84:	add	r5, r0, r4, lsl #1
   3bb88:	add	r0, r8, r9, lsl #2
   3bb8c:	mov	ip, r6
   3bb90:	mov	r3, #0
   3bb94:	add	r2, r0, #96	; 0x60
   3bb98:	mov	r0, r5
   3bb9c:	add	r6, r4, r3
   3bba0:	cmp	r6, #95	; 0x5f
   3bba4:	beq	3bbb4 <__assert_fail@plt+0x29138>
   3bba8:	ldrh	r6, [r0]
   3bbac:	ands	r6, r6, #8
   3bbb0:	beq	3bbc0 <__assert_fail@plt+0x29144>
   3bbb4:	ldr	r6, [r2]
   3bbb8:	orr	r6, r6, r1, lsl r3
   3bbbc:	str	r6, [r2]
   3bbc0:	add	r3, r3, #1
   3bbc4:	add	r0, r0, #2
   3bbc8:	cmp	r3, #32
   3bbcc:	bne	3bb9c <__assert_fail@plt+0x29120>
   3bbd0:	add	r9, r9, #1
   3bbd4:	add	r5, r5, #64	; 0x40
   3bbd8:	add	r4, r4, #32
   3bbdc:	mov	r6, ip
   3bbe0:	cmp	r9, #8
   3bbe4:	bne	3bb88 <__assert_fail@plt+0x2910c>
   3bbe8:	b	39ca4 <__assert_fail@plt+0x27228>
   3bbec:	ldr	r7, [sp, #24]
   3bbf0:	ldr	lr, [sp, #44]	; 0x2c
   3bbf4:	mov	r6, #0
   3bbf8:	mov	sl, #0
   3bbfc:	b	3a82c <__assert_fail@plt+0x27db0>
   3bc00:	cmp	r9, #0
   3bc04:	beq	3bca4 <__assert_fail@plt+0x29228>
   3bc08:	movw	r5, #255	; 0xff
   3bc0c:	movt	r5, #4
   3bc10:	mov	r6, r9
   3bc14:	ldr	r9, [r9, #4]
   3bc18:	cmp	r9, #0
   3bc1c:	bne	3bc10 <__assert_fail@plt+0x29194>
   3bc20:	ldr	r9, [r6, #8]
   3bc24:	cmp	r9, #0
   3bc28:	bne	3bc10 <__assert_fail@plt+0x29194>
   3bc2c:	ldr	r0, [r6, #24]
   3bc30:	and	r0, r0, r5
   3bc34:	cmp	r0, #3
   3bc38:	beq	3bc70 <__assert_fail@plt+0x291f4>
   3bc3c:	cmp	r0, #6
   3bc40:	bne	3bc78 <__assert_fail@plt+0x291fc>
   3bc44:	ldr	r4, [r6, #20]
   3bc48:	ldr	r0, [r4]
   3bc4c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3bc50:	ldr	r0, [r4, #4]
   3bc54:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3bc58:	ldr	r0, [r4, #8]
   3bc5c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3bc60:	ldr	r0, [r4, #12]
   3bc64:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3bc68:	mov	r0, r4
   3bc6c:	b	3bc74 <__assert_fail@plt+0x291f8>
   3bc70:	ldr	r0, [r6, #20]
   3bc74:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3bc78:	ldr	r0, [r6]
   3bc7c:	cmp	r0, #0
   3bc80:	beq	3bca4 <__assert_fail@plt+0x29228>
   3bc84:	ldr	r9, [r0, #8]
   3bc88:	cmp	r9, r6
   3bc8c:	mov	r6, r0
   3bc90:	beq	3bc2c <__assert_fail@plt+0x291b0>
   3bc94:	cmp	r9, #0
   3bc98:	mov	r6, r0
   3bc9c:	beq	3bc2c <__assert_fail@plt+0x291b0>
   3bca0:	b	3bc10 <__assert_fail@plt+0x29194>
   3bca4:	mov	r0, #8
   3bca8:	b	3bb48 <__assert_fail@plt+0x290cc>
   3bcac:	mov	r5, #0
   3bcb0:	mov	r0, #9
   3bcb4:	b	3bcc0 <__assert_fail@plt+0x29244>
   3bcb8:	mov	r5, #0
   3bcbc:	mov	r0, #10
   3bcc0:	ldr	r7, [sp, #24]
   3bcc4:	ldr	lr, [sp, #44]	; 0x2c
   3bcc8:	mov	sl, #0
   3bccc:	b	3a7d8 <__assert_fail@plt+0x27d5c>
   3bcd0:	mov	r0, #996	; 0x3e4
   3bcd4:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3bcd8:	cmp	r0, #0
   3bcdc:	beq	3bd04 <__assert_fail@plt+0x29288>
   3bce0:	ldr	r1, [r8, #56]	; 0x38
   3bce4:	str	r1, [r0]
   3bce8:	mov	r1, #0
   3bcec:	str	r1, [r8, #64]	; 0x40
   3bcf0:	str	r0, [r8, #56]	; 0x38
   3bcf4:	b	3b7fc <__assert_fail@plt+0x28d80>
   3bcf8:	ldr	r6, [sp, #40]	; 0x28
   3bcfc:	ldr	r4, [sp, #52]	; 0x34
   3bd00:	ldr	sl, [sp, #48]	; 0x30
   3bd04:	mov	r0, #12
   3bd08:	ldr	r1, [sp, #16]
   3bd0c:	str	r0, [r1]
   3bd10:	b	3b940 <__assert_fail@plt+0x28ec4>
   3bd14:	mov	r0, r6
   3bd18:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3bd1c:	mov	r0, r9
   3bd20:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3bd24:	mov	r9, #12
   3bd28:	b	3b92c <__assert_fail@plt+0x28eb0>
   3bd2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bd30:	add	fp, sp, #28
   3bd34:	sub	sp, sp, #12
   3bd38:	mov	r9, r1
   3bd3c:	mov	r6, r0
   3bd40:	mov	r4, #0
   3bd44:	mov	r0, #32
   3bd48:	mov	r1, #1
   3bd4c:	mov	sl, r3
   3bd50:	mov	r5, r2
   3bd54:	str	r4, [sp, #8]
   3bd58:	bl	2f760 <__assert_fail@plt+0x1cce4>
   3bd5c:	ldr	r1, [fp, #12]
   3bd60:	cmp	r0, #0
   3bd64:	beq	3c0b4 <__assert_fail@plt+0x29638>
   3bd68:	mov	r7, r0
   3bd6c:	mov	r0, #40	; 0x28
   3bd70:	mov	r1, #1
   3bd74:	bl	2f760 <__assert_fail@plt+0x1cce4>
   3bd78:	cmp	r0, #0
   3bd7c:	beq	3bfd4 <__assert_fail@plt+0x29558>
   3bd80:	mov	r8, r0
   3bd84:	ldrb	r0, [r0, #16]
   3bd88:	ldr	r1, [fp, #8]
   3bd8c:	mov	r4, #0
   3bd90:	add	r3, sp, #8
   3bd94:	str	r5, [sp]
   3bd98:	mov	r2, r8
   3bd9c:	str	r4, [sp, #4]
   3bda0:	and	r0, r0, #254	; 0xfe
   3bda4:	orr	r0, r0, r1
   3bda8:	mov	r1, r7
   3bdac:	strb	r0, [r8, #16]
   3bdb0:	mov	r0, r9
   3bdb4:	bl	3c524 <__assert_fail@plt+0x29aa8>
   3bdb8:	cmp	r0, #0
   3bdbc:	bne	3bff0 <__assert_fail@plt+0x29574>
   3bdc0:	ldrb	r0, [sl]
   3bdc4:	cmp	r0, #0
   3bdc8:	beq	3bdf4 <__assert_fail@plt+0x29378>
   3bdcc:	add	r1, sl, #1
   3bdd0:	mov	r2, #1
   3bdd4:	ubfx	r3, r0, #5, #3
   3bdd8:	and	r0, r0, #31
   3bddc:	ldr	r5, [r7, r3, lsl #2]
   3bde0:	orr	r0, r5, r2, lsl r0
   3bde4:	str	r0, [r7, r3, lsl #2]
   3bde8:	ldrb	r0, [r1], #1
   3bdec:	cmp	r0, #0
   3bdf0:	bne	3bdd4 <__assert_fail@plt+0x29358>
   3bdf4:	ldr	r0, [fp, #8]
   3bdf8:	cmp	r0, #0
   3bdfc:	beq	3be1c <__assert_fail@plt+0x293a0>
   3be00:	vld1.32	{d16-d17}, [r7]
   3be04:	mov	r0, r7
   3be08:	vmvn	q8, q8
   3be0c:	vst1.32	{d16-d17}, [r0]!
   3be10:	vld1.32	{d16-d17}, [r0]
   3be14:	vmvn	q8, q8
   3be18:	vst1.32	{d16-d17}, [r0]
   3be1c:	ldr	r0, [r6, #92]	; 0x5c
   3be20:	cmp	r0, #2
   3be24:	blt	3bea0 <__assert_fail@plt+0x29424>
   3be28:	ldm	r7, {r0, r1, r2, ip}
   3be2c:	ldr	r5, [r6, #60]	; 0x3c
   3be30:	ldr	r3, [r5]
   3be34:	and	r0, r0, r3
   3be38:	str	r0, [r7]
   3be3c:	ldr	r0, [r5, #4]
   3be40:	and	r0, r1, r0
   3be44:	str	r0, [r7, #4]
   3be48:	ldr	r0, [r5, #8]
   3be4c:	and	r0, r2, r0
   3be50:	str	r0, [r7, #8]
   3be54:	ldr	r0, [r5, #12]
   3be58:	and	r0, ip, r0
   3be5c:	str	r0, [r7, #12]
   3be60:	ldr	r0, [r7, #16]
   3be64:	ldr	r1, [r5, #16]
   3be68:	and	r0, r0, r1
   3be6c:	str	r0, [r7, #16]
   3be70:	ldr	r0, [r5, #20]
   3be74:	ldr	r1, [r7, #20]
   3be78:	and	r0, r1, r0
   3be7c:	str	r0, [r7, #20]
   3be80:	ldr	r0, [r5, #24]
   3be84:	ldr	r1, [r7, #24]
   3be88:	and	r0, r1, r0
   3be8c:	str	r0, [r7, #24]
   3be90:	ldr	r0, [r5, #28]
   3be94:	ldr	r1, [r7, #28]
   3be98:	and	r0, r1, r0
   3be9c:	str	r0, [r7, #28]
   3bea0:	ldr	r1, [r6, #64]	; 0x40
   3bea4:	cmp	r1, #31
   3bea8:	beq	3c030 <__assert_fail@plt+0x295b4>
   3beac:	ldr	r0, [r6, #56]	; 0x38
   3beb0:	add	r2, r1, #1
   3beb4:	add	r0, r0, r1, lsl #5
   3beb8:	mov	r1, #3
   3bebc:	vmov.i32	q8, #0	; 0x00000000
   3bec0:	str	r2, [r6, #64]	; 0x40
   3bec4:	mov	r2, #0
   3bec8:	add	r5, r0, #4
   3becc:	str	r2, [r0, #20]
   3bed0:	str	r7, [r0, #24]
   3bed4:	str	r1, [r0, #28]
   3bed8:	mov	r0, #28
   3bedc:	mov	r1, r5
   3bee0:	vst1.32	{d16-d17}, [r1], r0
   3bee4:	mvn	r0, #0
   3bee8:	str	r0, [r1]
   3beec:	ldr	r0, [r6, #92]	; 0x5c
   3bef0:	cmp	r0, #2
   3bef4:	blt	3bf9c <__assert_fail@plt+0x29520>
   3bef8:	ldrb	r0, [r6, #88]	; 0x58
   3befc:	orr	r0, r0, #2
   3bf00:	strb	r0, [r6, #88]	; 0x58
   3bf04:	ldr	r1, [r6, #64]	; 0x40
   3bf08:	cmp	r1, #31
   3bf0c:	beq	3c058 <__assert_fail@plt+0x295dc>
   3bf10:	ldr	r0, [r6, #56]	; 0x38
   3bf14:	add	r0, r0, r1, lsl #5
   3bf18:	add	r2, r1, #1
   3bf1c:	mov	r1, #6
   3bf20:	mov	r4, #0
   3bf24:	vmov.i32	q8, #0	; 0x00000000
   3bf28:	add	r7, r0, #4
   3bf2c:	str	r2, [r6, #64]	; 0x40
   3bf30:	str	r4, [r0, #20]
   3bf34:	str	r8, [r0, #24]
   3bf38:	str	r1, [r0, #28]
   3bf3c:	mov	r0, #28
   3bf40:	mov	r1, r7
   3bf44:	vst1.32	{d16-d17}, [r1], r0
   3bf48:	mvn	r0, #0
   3bf4c:	str	r0, [r1]
   3bf50:	ldr	r1, [r6, #64]	; 0x40
   3bf54:	cmp	r1, #31
   3bf58:	beq	3c0c0 <__assert_fail@plt+0x29644>
   3bf5c:	ldr	r0, [r6, #56]	; 0x38
   3bf60:	add	r2, r1, #1
   3bf64:	add	r4, r0, r1, lsl #5
   3bf68:	mov	r0, #0
   3bf6c:	mov	r1, #10
   3bf70:	str	r2, [r6, #64]	; 0x40
   3bf74:	str	r0, [r4, #4]!
   3bf78:	mvn	r2, #0
   3bf7c:	add	r3, r4, #20
   3bf80:	stmib	r4, {r5, r7}
   3bf84:	str	r0, [r4, #12]
   3bf88:	str	r0, [r4, #16]
   3bf8c:	stm	r3, {r0, r1, r2}
   3bf90:	str	r4, [r5]
   3bf94:	str	r4, [r7]
   3bf98:	b	3bfc8 <__assert_fail@plt+0x2954c>
   3bf9c:	ldr	r0, [r8]
   3bfa0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3bfa4:	ldr	r0, [r8, #4]
   3bfa8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3bfac:	ldr	r0, [r8, #8]
   3bfb0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3bfb4:	ldr	r0, [r8, #12]
   3bfb8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3bfbc:	mov	r0, r8
   3bfc0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3bfc4:	mov	r4, r5
   3bfc8:	mov	r0, r4
   3bfcc:	sub	sp, fp, #28
   3bfd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bfd4:	mov	r0, r7
   3bfd8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3bfdc:	ldr	r1, [fp, #12]
   3bfe0:	mov	r0, #12
   3bfe4:	mov	r4, #0
   3bfe8:	str	r0, [r1]
   3bfec:	b	3bfc8 <__assert_fail@plt+0x2954c>
   3bff0:	mov	r5, r0
   3bff4:	mov	r0, r7
   3bff8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3bffc:	ldr	r0, [r8]
   3c000:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3c004:	ldr	r0, [r8, #4]
   3c008:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3c00c:	ldr	r0, [r8, #8]
   3c010:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3c014:	ldr	r0, [r8, #12]
   3c018:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3c01c:	mov	r0, r8
   3c020:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3c024:	ldr	r0, [fp, #12]
   3c028:	str	r5, [r0]
   3c02c:	b	3bfc8 <__assert_fail@plt+0x2954c>
   3c030:	mov	r0, #996	; 0x3e4
   3c034:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3c038:	cmp	r0, #0
   3c03c:	beq	3c080 <__assert_fail@plt+0x29604>
   3c040:	ldr	r1, [r6, #56]	; 0x38
   3c044:	str	r1, [r0]
   3c048:	mov	r1, #0
   3c04c:	str	r1, [r6, #64]	; 0x40
   3c050:	str	r0, [r6, #56]	; 0x38
   3c054:	b	3beb0 <__assert_fail@plt+0x29434>
   3c058:	mov	r0, #996	; 0x3e4
   3c05c:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3c060:	cmp	r0, #0
   3c064:	beq	3c080 <__assert_fail@plt+0x29604>
   3c068:	ldr	r1, [r6, #56]	; 0x38
   3c06c:	str	r1, [r0]
   3c070:	mov	r1, #0
   3c074:	str	r1, [r6, #64]	; 0x40
   3c078:	str	r0, [r6, #56]	; 0x38
   3c07c:	b	3bf14 <__assert_fail@plt+0x29498>
   3c080:	mov	r0, r7
   3c084:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3c088:	ldr	r0, [r8]
   3c08c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3c090:	ldr	r0, [r8, #4]
   3c094:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3c098:	ldr	r0, [r8, #8]
   3c09c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3c0a0:	ldr	r0, [r8, #12]
   3c0a4:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3c0a8:	mov	r0, r8
   3c0ac:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3c0b0:	ldr	r1, [fp, #12]
   3c0b4:	mov	r0, #12
   3c0b8:	str	r0, [r1]
   3c0bc:	b	3bfc8 <__assert_fail@plt+0x2954c>
   3c0c0:	mov	r0, #996	; 0x3e4
   3c0c4:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3c0c8:	cmp	r0, #0
   3c0cc:	beq	3bfc8 <__assert_fail@plt+0x2954c>
   3c0d0:	ldr	r1, [r6, #56]	; 0x38
   3c0d4:	str	r1, [r0]
   3c0d8:	mov	r1, #0
   3c0dc:	str	r1, [r6, #64]	; 0x40
   3c0e0:	str	r0, [r6, #56]	; 0x38
   3c0e4:	b	3bf60 <__assert_fail@plt+0x294e4>
   3c0e8:	push	{fp, lr}
   3c0ec:	mov	fp, sp
   3c0f0:	ldr	ip, [r1, #40]	; 0x28
   3c0f4:	ldr	r3, [r1, #56]	; 0x38
   3c0f8:	cmp	r3, ip
   3c0fc:	ble	3c17c <__assert_fail@plt+0x29700>
   3c100:	ldr	r3, [r1, #4]
   3c104:	ldrb	lr, [r3, ip]
   3c108:	strb	lr, [r0]
   3c10c:	ldr	r3, [r1, #80]	; 0x50
   3c110:	cmp	r3, #2
   3c114:	blt	3c138 <__assert_fail@plt+0x296bc>
   3c118:	ldr	r3, [r1, #28]
   3c11c:	ldr	ip, [r1, #40]	; 0x28
   3c120:	cmp	ip, r3
   3c124:	beq	3c138 <__assert_fail@plt+0x296bc>
   3c128:	ldr	r3, [r1, #8]
   3c12c:	ldr	r3, [r3, ip, lsl #2]
   3c130:	cmn	r3, #1
   3c134:	beq	3c22c <__assert_fail@plt+0x297b0>
   3c138:	tst	r2, #1
   3c13c:	beq	3c190 <__assert_fail@plt+0x29714>
   3c140:	cmp	lr, #92	; 0x5c
   3c144:	bne	3c190 <__assert_fail@plt+0x29714>
   3c148:	ldr	r2, [r1, #40]	; 0x28
   3c14c:	ldr	r3, [r1, #48]	; 0x30
   3c150:	add	r2, r2, #1
   3c154:	cmp	r2, r3
   3c158:	bge	3c22c <__assert_fail@plt+0x297b0>
   3c15c:	str	r2, [r1, #40]	; 0x28
   3c160:	ldr	r1, [r1, #4]
   3c164:	ldrb	r2, [r1, r2]
   3c168:	mov	r1, #1
   3c16c:	strb	r1, [r0, #4]
   3c170:	strb	r2, [r0]
   3c174:	mov	r0, r1
   3c178:	pop	{fp, pc}
   3c17c:	mov	r1, #2
   3c180:	strb	r1, [r0, #4]
   3c184:	mov	r1, #0
   3c188:	mov	r0, r1
   3c18c:	pop	{fp, pc}
   3c190:	cmp	lr, #92	; 0x5c
   3c194:	bgt	3c1e8 <__assert_fail@plt+0x2976c>
   3c198:	cmp	lr, #45	; 0x2d
   3c19c:	beq	3c200 <__assert_fail@plt+0x29784>
   3c1a0:	cmp	lr, #91	; 0x5b
   3c1a4:	bne	3c22c <__assert_fail@plt+0x297b0>
   3c1a8:	ldr	r3, [r1, #40]	; 0x28
   3c1ac:	ldr	ip, [r1, #48]	; 0x30
   3c1b0:	add	r3, r3, #1
   3c1b4:	cmp	r3, ip
   3c1b8:	bge	3c21c <__assert_fail@plt+0x297a0>
   3c1bc:	ldr	r1, [r1, #4]
   3c1c0:	ldrb	r1, [r1, r3]
   3c1c4:	cmp	r1, #61	; 0x3d
   3c1c8:	strb	r1, [r0]
   3c1cc:	beq	3c23c <__assert_fail@plt+0x297c0>
   3c1d0:	cmp	r1, #58	; 0x3a
   3c1d4:	beq	3c244 <__assert_fail@plt+0x297c8>
   3c1d8:	cmp	r1, #46	; 0x2e
   3c1dc:	bne	3c224 <__assert_fail@plt+0x297a8>
   3c1e0:	mov	r1, #26
   3c1e4:	b	3c250 <__assert_fail@plt+0x297d4>
   3c1e8:	cmp	lr, #93	; 0x5d
   3c1ec:	beq	3c208 <__assert_fail@plt+0x2978c>
   3c1f0:	cmp	lr, #94	; 0x5e
   3c1f4:	bne	3c22c <__assert_fail@plt+0x297b0>
   3c1f8:	mov	r1, #25
   3c1fc:	b	3c20c <__assert_fail@plt+0x29790>
   3c200:	mov	r1, #22
   3c204:	b	3c20c <__assert_fail@plt+0x29790>
   3c208:	mov	r1, #21
   3c20c:	strb	r1, [r0, #4]
   3c210:	mov	r1, #1
   3c214:	mov	r0, r1
   3c218:	pop	{fp, pc}
   3c21c:	mov	r1, #0
   3c220:	strb	r1, [r0]
   3c224:	mov	r1, #91	; 0x5b
   3c228:	strb	r1, [r0]
   3c22c:	mov	r1, #1
   3c230:	strb	r1, [r0, #4]
   3c234:	mov	r0, r1
   3c238:	pop	{fp, pc}
   3c23c:	mov	r1, #28
   3c240:	b	3c250 <__assert_fail@plt+0x297d4>
   3c244:	tst	r2, #4
   3c248:	beq	3c224 <__assert_fail@plt+0x297a8>
   3c24c:	mov	r1, #30
   3c250:	strb	r1, [r0, #4]
   3c254:	mov	r1, #2
   3c258:	mov	r0, r1
   3c25c:	pop	{fp, pc}
   3c260:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3c264:	add	fp, sp, #24
   3c268:	sub	sp, sp, #8
   3c26c:	mov	r5, r2
   3c270:	ldr	r2, [r1, #80]	; 0x50
   3c274:	mov	r9, r0
   3c278:	ldr	r0, [r1, #40]	; 0x28
   3c27c:	cmp	r2, #1
   3c280:	beq	3c2f0 <__assert_fail@plt+0x29874>
   3c284:	ldr	r4, [r1, #28]
   3c288:	add	r2, r0, #1
   3c28c:	cmp	r2, r4
   3c290:	bge	3c2f0 <__assert_fail@plt+0x29874>
   3c294:	ldr	ip, [r1, #8]
   3c298:	mov	r2, #1
   3c29c:	add	r6, ip, r0, lsl #2
   3c2a0:	ldr	r7, [r6, r2, lsl #2]
   3c2a4:	cmn	r7, #1
   3c2a8:	bne	3c2c0 <__assert_fail@plt+0x29844>
   3c2ac:	add	r2, r2, #1
   3c2b0:	add	r7, r0, r2
   3c2b4:	cmp	r7, r4
   3c2b8:	blt	3c2a0 <__assert_fail@plt+0x29824>
   3c2bc:	b	3c2c8 <__assert_fail@plt+0x2984c>
   3c2c0:	cmp	r2, #2
   3c2c4:	bcc	3c2f0 <__assert_fail@plt+0x29874>
   3c2c8:	mov	r3, #1
   3c2cc:	str	r3, [r9]
   3c2d0:	ldr	r0, [ip, r0, lsl #2]
   3c2d4:	str	r0, [r9, #4]
   3c2d8:	ldr	r0, [r1, #40]	; 0x28
   3c2dc:	add	r0, r0, r2
   3c2e0:	str	r0, [r1, #40]	; 0x28
   3c2e4:	mov	r0, #0
   3c2e8:	sub	sp, fp, #24
   3c2ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3c2f0:	add	r2, r0, r3
   3c2f4:	str	r2, [r1, #40]	; 0x28
   3c2f8:	ldrb	r6, [r5, #4]
   3c2fc:	sub	r0, r6, #22
   3c300:	cmp	r0, #8
   3c304:	bhi	3c50c <__assert_fail@plt+0x29a90>
   3c308:	add	r3, pc, #0
   3c30c:	ldr	pc, [r3, r0, lsl #2]
   3c310:	andeq	ip, r3, r4, ror #9
   3c314:	andeq	ip, r3, ip, lsl #10
   3c318:	andeq	ip, r3, ip, lsl #10
   3c31c:	andeq	ip, r3, ip, lsl #10
   3c320:	andeq	ip, r3, r4, lsr r3
   3c324:	andeq	ip, r3, ip, lsl #10
   3c328:	andeq	ip, r3, r4, lsr r3
   3c32c:	andeq	ip, r3, ip, lsl #10
   3c330:	andeq	ip, r3, r4, lsr r3
   3c334:	ldr	r3, [r1, #56]	; 0x38
   3c338:	mov	r0, #7
   3c33c:	cmp	r3, r2
   3c340:	ble	3c51c <__assert_fail@plt+0x29aa0>
   3c344:	ldrb	r3, [r5]
   3c348:	mov	r2, #0
   3c34c:	b	3c358 <__assert_fail@plt+0x298dc>
   3c350:	ldrb	r6, [r5, #4]
   3c354:	add	r2, r2, #1
   3c358:	uxtb	r7, r6
   3c35c:	cmp	r7, #30
   3c360:	bne	3c370 <__assert_fail@plt+0x298f4>
   3c364:	ldrb	r7, [r1, #75]	; 0x4b
   3c368:	cmp	r7, #0
   3c36c:	bne	3c3c0 <__assert_fail@plt+0x29944>
   3c370:	ldr	r4, [r1, #40]	; 0x28
   3c374:	ldr	r7, [r1, #4]
   3c378:	add	r6, r4, #1
   3c37c:	str	r6, [r1, #40]	; 0x28
   3c380:	ldrb	r4, [r7, r4]
   3c384:	ldr	r7, [r1, #56]	; 0x38
   3c388:	cmp	r7, r6
   3c38c:	ble	3c51c <__assert_fail@plt+0x29aa0>
   3c390:	uxtb	r7, r4
   3c394:	cmp	r7, r3
   3c398:	bne	3c3ac <__assert_fail@plt+0x29930>
   3c39c:	ldr	r7, [r1, #4]
   3c3a0:	ldrb	r7, [r7, r6]
   3c3a4:	cmp	r7, #93	; 0x5d
   3c3a8:	beq	3c494 <__assert_fail@plt+0x29a18>
   3c3ac:	ldr	r7, [r9, #4]
   3c3b0:	cmp	r2, #30
   3c3b4:	strb	r4, [r7, r2]
   3c3b8:	bls	3c350 <__assert_fail@plt+0x298d4>
   3c3bc:	b	3c51c <__assert_fail@plt+0x29aa0>
   3c3c0:	ldrb	r7, [r1, #76]	; 0x4c
   3c3c4:	cmp	r7, #0
   3c3c8:	beq	3c460 <__assert_fail@plt+0x299e4>
   3c3cc:	ldr	lr, [r1, #28]
   3c3d0:	ldr	ip, [r1, #40]	; 0x28
   3c3d4:	cmp	ip, lr
   3c3d8:	beq	3c3ec <__assert_fail@plt+0x29970>
   3c3dc:	ldr	r4, [r1, #8]
   3c3e0:	ldr	r4, [r4, ip, lsl #2]
   3c3e4:	cmn	r4, #1
   3c3e8:	beq	3c480 <__assert_fail@plt+0x29a04>
   3c3ec:	ldr	r6, [r1, #12]
   3c3f0:	ldr	r7, [r1, #24]
   3c3f4:	ldr	r4, [r1]
   3c3f8:	ldr	r6, [r6, ip, lsl #2]
   3c3fc:	add	r6, r7, r6
   3c400:	add	r4, r4, r6
   3c404:	ldrsb	r4, [r4]
   3c408:	cmn	r4, #1
   3c40c:	ble	3c480 <__assert_fail@plt+0x29a04>
   3c410:	ldr	r7, [r1, #80]	; 0x50
   3c414:	mov	r6, #1
   3c418:	cmp	r7, #1
   3c41c:	beq	3c454 <__assert_fail@plt+0x299d8>
   3c420:	add	r7, ip, #1
   3c424:	cmp	r7, lr
   3c428:	bge	3c454 <__assert_fail@plt+0x299d8>
   3c42c:	ldr	r6, [r1, #8]
   3c430:	add	r8, r6, ip, lsl #2
   3c434:	mov	r6, #1
   3c438:	ldr	r7, [r8, r6, lsl #2]
   3c43c:	cmn	r7, #1
   3c440:	bne	3c454 <__assert_fail@plt+0x299d8>
   3c444:	add	r6, r6, #1
   3c448:	add	r7, ip, r6
   3c44c:	cmp	r7, lr
   3c450:	blt	3c438 <__assert_fail@plt+0x299bc>
   3c454:	add	r6, r6, ip
   3c458:	str	r6, [r1, #40]	; 0x28
   3c45c:	b	3c384 <__assert_fail@plt+0x29908>
   3c460:	ldr	r7, [r1, #40]	; 0x28
   3c464:	ldr	r4, [r1, #24]
   3c468:	ldr	ip, [r1]
   3c46c:	add	r6, r7, #1
   3c470:	add	r7, r7, r4
   3c474:	str	r6, [r1, #40]	; 0x28
   3c478:	ldrb	r4, [ip, r7]
   3c47c:	b	3c384 <__assert_fail@plt+0x29908>
   3c480:	add	r6, ip, #1
   3c484:	str	r6, [r1, #40]	; 0x28
   3c488:	ldr	r7, [r1, #4]
   3c48c:	ldrb	r4, [r7, ip]
   3c490:	b	3c384 <__assert_fail@plt+0x29908>
   3c494:	add	r0, r6, #1
   3c498:	str	r0, [r1, #40]	; 0x28
   3c49c:	mov	r0, #0
   3c4a0:	ldr	r1, [r9, #4]
   3c4a4:	strb	r0, [r1, r2]
   3c4a8:	ldrb	r1, [r5, #4]
   3c4ac:	cmp	r1, #30
   3c4b0:	beq	3c4cc <__assert_fail@plt+0x29a50>
   3c4b4:	cmp	r1, #28
   3c4b8:	beq	3c4d4 <__assert_fail@plt+0x29a58>
   3c4bc:	cmp	r1, #26
   3c4c0:	bne	3c51c <__assert_fail@plt+0x29aa0>
   3c4c4:	mov	r1, #3
   3c4c8:	b	3c4d8 <__assert_fail@plt+0x29a5c>
   3c4cc:	mov	r1, #4
   3c4d0:	b	3c4d8 <__assert_fail@plt+0x29a5c>
   3c4d4:	mov	r1, #2
   3c4d8:	str	r1, [r9]
   3c4dc:	sub	sp, fp, #24
   3c4e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3c4e4:	ldr	r0, [fp, #12]
   3c4e8:	cmp	r0, #0
   3c4ec:	bne	3c50c <__assert_fail@plt+0x29a90>
   3c4f0:	ldr	r2, [fp, #8]
   3c4f4:	mov	r0, sp
   3c4f8:	bl	3c0e8 <__assert_fail@plt+0x2966c>
   3c4fc:	ldrb	r1, [sp, #4]
   3c500:	mov	r0, #11
   3c504:	cmp	r1, #21
   3c508:	bne	3c51c <__assert_fail@plt+0x29aa0>
   3c50c:	mov	r0, #0
   3c510:	str	r0, [r9]
   3c514:	ldrb	r1, [r5]
   3c518:	strb	r1, [r9, #4]
   3c51c:	sub	sp, fp, #24
   3c520:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3c524:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3c528:	add	fp, sp, #24
   3c52c:	mov	r8, r0
   3c530:	ldrb	r0, [fp, #14]
   3c534:	ldr	r6, [fp, #8]
   3c538:	mov	r5, r3
   3c53c:	mov	r7, r2
   3c540:	mov	r4, r1
   3c544:	tst	r0, #64	; 0x40
   3c548:	beq	3c584 <__assert_fail@plt+0x29b08>
   3c54c:	movw	r1, #52020	; 0xcb34
   3c550:	mov	r0, r6
   3c554:	movt	r1, #4
   3c558:	bl	123d4 <strcmp@plt>
   3c55c:	cmp	r0, #0
   3c560:	beq	3c57c <__assert_fail@plt+0x29b00>
   3c564:	movw	r1, #52026	; 0xcb3a
   3c568:	mov	r0, r6
   3c56c:	movt	r1, #4
   3c570:	bl	123d4 <strcmp@plt>
   3c574:	cmp	r0, #0
   3c578:	bne	3c584 <__assert_fail@plt+0x29b08>
   3c57c:	movw	r6, #52032	; 0xcb40
   3c580:	movt	r6, #4
   3c584:	ldr	r0, [r5]
   3c588:	ldr	r1, [r7, #36]	; 0x24
   3c58c:	cmp	r0, r1
   3c590:	beq	3cab0 <__assert_fail@plt+0x2a034>
   3c594:	mov	r0, r6
   3c598:	bl	12374 <wctype@plt>
   3c59c:	ldr	r2, [r7, #36]	; 0x24
   3c5a0:	ldr	r1, [r7, #12]
   3c5a4:	add	r3, r2, #1
   3c5a8:	str	r3, [r7, #36]	; 0x24
   3c5ac:	str	r0, [r1, r2, lsl #2]
   3c5b0:	movw	r1, #52006	; 0xcb26
   3c5b4:	mov	r0, r6
   3c5b8:	movt	r1, #4
   3c5bc:	bl	123d4 <strcmp@plt>
   3c5c0:	cmp	r0, #0
   3c5c4:	beq	3c728 <__assert_fail@plt+0x29cac>
   3c5c8:	movw	r1, #52038	; 0xcb46
   3c5cc:	mov	r0, r6
   3c5d0:	movt	r1, #4
   3c5d4:	bl	123d4 <strcmp@plt>
   3c5d8:	cmp	r0, #0
   3c5dc:	beq	3c77c <__assert_fail@plt+0x29d00>
   3c5e0:	movw	r1, #52026	; 0xcb3a
   3c5e4:	mov	r0, r6
   3c5e8:	movt	r1, #4
   3c5ec:	bl	123d4 <strcmp@plt>
   3c5f0:	cmp	r0, #0
   3c5f4:	beq	3c7d0 <__assert_fail@plt+0x29d54>
   3c5f8:	movw	r1, #52014	; 0xcb2e
   3c5fc:	mov	r0, r6
   3c600:	movt	r1, #4
   3c604:	bl	123d4 <strcmp@plt>
   3c608:	cmp	r0, #0
   3c60c:	beq	3c824 <__assert_fail@plt+0x29da8>
   3c610:	movw	r1, #52032	; 0xcb40
   3c614:	mov	r0, r6
   3c618:	movt	r1, #4
   3c61c:	bl	123d4 <strcmp@plt>
   3c620:	cmp	r0, #0
   3c624:	beq	3c878 <__assert_fail@plt+0x29dfc>
   3c628:	movw	r1, #52063	; 0xcb5f
   3c62c:	mov	r0, r6
   3c630:	movt	r1, #4
   3c634:	bl	123d4 <strcmp@plt>
   3c638:	cmp	r0, #0
   3c63c:	beq	3c8cc <__assert_fail@plt+0x29e50>
   3c640:	movw	r1, #30664	; 0x77c8
   3c644:	mov	r0, r6
   3c648:	movt	r1, #4
   3c64c:	bl	123d4 <strcmp@plt>
   3c650:	cmp	r0, #0
   3c654:	beq	3c920 <__assert_fail@plt+0x29ea4>
   3c658:	movw	r1, #52020	; 0xcb34
   3c65c:	mov	r0, r6
   3c660:	movt	r1, #4
   3c664:	bl	123d4 <strcmp@plt>
   3c668:	cmp	r0, #0
   3c66c:	beq	3c970 <__assert_fail@plt+0x29ef4>
   3c670:	movw	r1, #52044	; 0xcb4c
   3c674:	mov	r0, r6
   3c678:	movt	r1, #4
   3c67c:	bl	123d4 <strcmp@plt>
   3c680:	cmp	r0, #0
   3c684:	beq	3c9c0 <__assert_fail@plt+0x29f44>
   3c688:	movw	r1, #52050	; 0xcb52
   3c68c:	mov	r0, r6
   3c690:	movt	r1, #4
   3c694:	bl	123d4 <strcmp@plt>
   3c698:	cmp	r0, #0
   3c69c:	beq	3ca10 <__assert_fail@plt+0x29f94>
   3c6a0:	movw	r1, #52056	; 0xcb58
   3c6a4:	mov	r0, r6
   3c6a8:	movt	r1, #4
   3c6ac:	bl	123d4 <strcmp@plt>
   3c6b0:	cmp	r0, #0
   3c6b4:	beq	3ca60 <__assert_fail@plt+0x29fe4>
   3c6b8:	movw	r1, #52062	; 0xcb5e
   3c6bc:	mov	r0, r6
   3c6c0:	movt	r1, #4
   3c6c4:	bl	123d4 <strcmp@plt>
   3c6c8:	mov	r1, r0
   3c6cc:	mov	r0, #4
   3c6d0:	cmp	r1, #0
   3c6d4:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   3c6d8:	bl	12740 <__ctype_b_loc@plt>
   3c6dc:	ldr	r1, [r0]
   3c6e0:	mov	r2, #0
   3c6e4:	mov	r3, #1
   3c6e8:	cmp	r8, #0
   3c6ec:	bne	3cc18 <__assert_fail@plt+0x2a19c>
   3c6f0:	ldrb	r0, [r1, #1]
   3c6f4:	tst	r0, #16
   3c6f8:	beq	3c710 <__assert_fail@plt+0x29c94>
   3c6fc:	ubfx	r0, r2, #5, #3
   3c700:	and	r6, r2, #31
   3c704:	ldr	r7, [r4, r0, lsl #2]
   3c708:	orr	r7, r7, r3, lsl r6
   3c70c:	str	r7, [r4, r0, lsl #2]
   3c710:	add	r2, r2, #1
   3c714:	add	r1, r1, #2
   3c718:	mov	r0, #0
   3c71c:	cmp	r2, #256	; 0x100
   3c720:	bne	3c6f0 <__assert_fail@plt+0x29c74>
   3c724:	b	3caac <__assert_fail@plt+0x2a030>
   3c728:	bl	12740 <__ctype_b_loc@plt>
   3c72c:	ldr	r1, [r0]
   3c730:	cmp	r8, #0
   3c734:	bne	3cb54 <__assert_fail@plt+0x2a0d8>
   3c738:	mov	r0, #0
   3c73c:	mov	r2, #1
   3c740:	b	3c758 <__assert_fail@plt+0x29cdc>
   3c744:	add	r0, r0, #1
   3c748:	add	r1, r1, #2
   3c74c:	cmp	r0, #256	; 0x100
   3c750:	moveq	r0, #0
   3c754:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   3c758:	ldrb	r3, [r1]
   3c75c:	tst	r3, #8
   3c760:	beq	3c744 <__assert_fail@plt+0x29cc8>
   3c764:	ubfx	r3, r0, #5, #3
   3c768:	and	r6, r0, #31
   3c76c:	ldr	r7, [r4, r3, lsl #2]
   3c770:	orr	r7, r7, r2, lsl r6
   3c774:	str	r7, [r4, r3, lsl #2]
   3c778:	b	3c744 <__assert_fail@plt+0x29cc8>
   3c77c:	bl	12740 <__ctype_b_loc@plt>
   3c780:	ldr	r1, [r0]
   3c784:	cmp	r8, #0
   3c788:	bne	3cbd4 <__assert_fail@plt+0x2a158>
   3c78c:	mov	r0, #0
   3c790:	mov	r2, #1
   3c794:	b	3c7ac <__assert_fail@plt+0x29d30>
   3c798:	add	r0, r0, #1
   3c79c:	add	r1, r1, #2
   3c7a0:	cmp	r0, #256	; 0x100
   3c7a4:	moveq	r0, #0
   3c7a8:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   3c7ac:	ldrb	r3, [r1]
   3c7b0:	tst	r3, #2
   3c7b4:	beq	3c798 <__assert_fail@plt+0x29d1c>
   3c7b8:	ubfx	r3, r0, #5, #3
   3c7bc:	and	r6, r0, #31
   3c7c0:	ldr	r7, [r4, r3, lsl #2]
   3c7c4:	orr	r7, r7, r2, lsl r6
   3c7c8:	str	r7, [r4, r3, lsl #2]
   3c7cc:	b	3c798 <__assert_fail@plt+0x29d1c>
   3c7d0:	bl	12740 <__ctype_b_loc@plt>
   3c7d4:	ldr	r1, [r0]
   3c7d8:	cmp	r8, #0
   3c7dc:	bne	3cc90 <__assert_fail@plt+0x2a214>
   3c7e0:	mov	r0, #0
   3c7e4:	mov	r2, #1
   3c7e8:	b	3c800 <__assert_fail@plt+0x29d84>
   3c7ec:	add	r0, r0, #1
   3c7f0:	add	r1, r1, #2
   3c7f4:	cmp	r0, #256	; 0x100
   3c7f8:	moveq	r0, #0
   3c7fc:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   3c800:	ldrb	r3, [r1, #1]
   3c804:	tst	r3, #2
   3c808:	beq	3c7ec <__assert_fail@plt+0x29d70>
   3c80c:	ubfx	r3, r0, #5, #3
   3c810:	and	r6, r0, #31
   3c814:	ldr	r7, [r4, r3, lsl #2]
   3c818:	orr	r7, r7, r2, lsl r6
   3c81c:	str	r7, [r4, r3, lsl #2]
   3c820:	b	3c7ec <__assert_fail@plt+0x29d70>
   3c824:	bl	12740 <__ctype_b_loc@plt>
   3c828:	ldr	r1, [r0]
   3c82c:	cmp	r8, #0
   3c830:	bne	3cd10 <__assert_fail@plt+0x2a294>
   3c834:	mov	r0, #0
   3c838:	mov	r2, #1
   3c83c:	b	3c854 <__assert_fail@plt+0x29dd8>
   3c840:	add	r0, r0, #1
   3c844:	add	r1, r1, #2
   3c848:	cmp	r0, #256	; 0x100
   3c84c:	moveq	r0, #0
   3c850:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   3c854:	ldrb	r3, [r1, #1]
   3c858:	tst	r3, #32
   3c85c:	beq	3c840 <__assert_fail@plt+0x29dc4>
   3c860:	ubfx	r3, r0, #5, #3
   3c864:	and	r6, r0, #31
   3c868:	ldr	r7, [r4, r3, lsl #2]
   3c86c:	orr	r7, r7, r2, lsl r6
   3c870:	str	r7, [r4, r3, lsl #2]
   3c874:	b	3c840 <__assert_fail@plt+0x29dc4>
   3c878:	bl	12740 <__ctype_b_loc@plt>
   3c87c:	ldr	r1, [r0]
   3c880:	cmp	r8, #0
   3c884:	bne	3cd54 <__assert_fail@plt+0x2a2d8>
   3c888:	mov	r0, #0
   3c88c:	mov	r2, #1
   3c890:	b	3c8a8 <__assert_fail@plt+0x29e2c>
   3c894:	add	r0, r0, #1
   3c898:	add	r1, r1, #2
   3c89c:	cmp	r0, #256	; 0x100
   3c8a0:	moveq	r0, #0
   3c8a4:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   3c8a8:	ldrb	r3, [r1, #1]
   3c8ac:	tst	r3, #4
   3c8b0:	beq	3c894 <__assert_fail@plt+0x29e18>
   3c8b4:	ubfx	r3, r0, #5, #3
   3c8b8:	and	r6, r0, #31
   3c8bc:	ldr	r7, [r4, r3, lsl #2]
   3c8c0:	orr	r7, r7, r2, lsl r6
   3c8c4:	str	r7, [r4, r3, lsl #2]
   3c8c8:	b	3c894 <__assert_fail@plt+0x29e18>
   3c8cc:	bl	12740 <__ctype_b_loc@plt>
   3c8d0:	ldr	r1, [r0]
   3c8d4:	cmp	r8, #0
   3c8d8:	bne	3cd98 <__assert_fail@plt+0x2a31c>
   3c8dc:	mov	r0, #0
   3c8e0:	mov	r2, #1
   3c8e4:	b	3c8fc <__assert_fail@plt+0x29e80>
   3c8e8:	add	r0, r0, #1
   3c8ec:	add	r1, r1, #2
   3c8f0:	cmp	r0, #256	; 0x100
   3c8f4:	moveq	r0, #0
   3c8f8:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   3c8fc:	ldrb	r3, [r1, #1]
   3c900:	tst	r3, #8
   3c904:	beq	3c8e8 <__assert_fail@plt+0x29e6c>
   3c908:	ubfx	r3, r0, #5, #3
   3c90c:	and	r6, r0, #31
   3c910:	ldr	r7, [r4, r3, lsl #2]
   3c914:	orr	r7, r7, r2, lsl r6
   3c918:	str	r7, [r4, r3, lsl #2]
   3c91c:	b	3c8e8 <__assert_fail@plt+0x29e6c>
   3c920:	bl	12740 <__ctype_b_loc@plt>
   3c924:	ldr	r1, [r0]
   3c928:	mov	r2, #0
   3c92c:	mov	r3, #1
   3c930:	cmp	r8, #0
   3c934:	bne	3cadc <__assert_fail@plt+0x2a060>
   3c938:	ldrb	r0, [r1, #1]
   3c93c:	tst	r0, #64	; 0x40
   3c940:	beq	3c958 <__assert_fail@plt+0x29edc>
   3c944:	ubfx	r0, r2, #5, #3
   3c948:	and	r6, r2, #31
   3c94c:	ldr	r7, [r4, r0, lsl #2]
   3c950:	orr	r7, r7, r3, lsl r6
   3c954:	str	r7, [r4, r0, lsl #2]
   3c958:	add	r2, r2, #1
   3c95c:	add	r1, r1, #2
   3c960:	mov	r0, #0
   3c964:	cmp	r2, #256	; 0x100
   3c968:	bne	3c938 <__assert_fail@plt+0x29ebc>
   3c96c:	b	3caac <__assert_fail@plt+0x2a030>
   3c970:	bl	12740 <__ctype_b_loc@plt>
   3c974:	ldr	r1, [r0]
   3c978:	mov	r2, #0
   3c97c:	mov	r3, #1
   3c980:	cmp	r8, #0
   3c984:	bne	3cb18 <__assert_fail@plt+0x2a09c>
   3c988:	ldrb	r0, [r1, #1]
   3c98c:	tst	r0, #1
   3c990:	beq	3c9a8 <__assert_fail@plt+0x29f2c>
   3c994:	ubfx	r0, r2, #5, #3
   3c998:	and	r6, r2, #31
   3c99c:	ldr	r7, [r4, r0, lsl #2]
   3c9a0:	orr	r7, r7, r3, lsl r6
   3c9a4:	str	r7, [r4, r0, lsl #2]
   3c9a8:	add	r2, r2, #1
   3c9ac:	add	r1, r1, #2
   3c9b0:	mov	r0, #0
   3c9b4:	cmp	r2, #256	; 0x100
   3c9b8:	bne	3c988 <__assert_fail@plt+0x29f0c>
   3c9bc:	b	3caac <__assert_fail@plt+0x2a030>
   3c9c0:	bl	12740 <__ctype_b_loc@plt>
   3c9c4:	ldr	r1, [r0]
   3c9c8:	mov	r2, #0
   3c9cc:	mov	r3, #1
   3c9d0:	cmp	r8, #0
   3c9d4:	bne	3cb98 <__assert_fail@plt+0x2a11c>
   3c9d8:	ldrb	r0, [r1]
   3c9dc:	tst	r0, #1
   3c9e0:	beq	3c9f8 <__assert_fail@plt+0x29f7c>
   3c9e4:	ubfx	r0, r2, #5, #3
   3c9e8:	and	r6, r2, #31
   3c9ec:	ldr	r7, [r4, r0, lsl #2]
   3c9f0:	orr	r7, r7, r3, lsl r6
   3c9f4:	str	r7, [r4, r0, lsl #2]
   3c9f8:	add	r2, r2, #1
   3c9fc:	add	r1, r1, #2
   3ca00:	mov	r0, #0
   3ca04:	cmp	r2, #256	; 0x100
   3ca08:	bne	3c9d8 <__assert_fail@plt+0x29f5c>
   3ca0c:	b	3caac <__assert_fail@plt+0x2a030>
   3ca10:	bl	12740 <__ctype_b_loc@plt>
   3ca14:	ldr	r1, [r0]
   3ca18:	mov	r2, #0
   3ca1c:	mov	r3, #1
   3ca20:	cmp	r8, #0
   3ca24:	bne	3cc54 <__assert_fail@plt+0x2a1d8>
   3ca28:	ldrsh	r0, [r1]
   3ca2c:	cmn	r0, #1
   3ca30:	bgt	3ca48 <__assert_fail@plt+0x29fcc>
   3ca34:	ubfx	r0, r2, #5, #3
   3ca38:	and	r6, r2, #31
   3ca3c:	ldr	r7, [r4, r0, lsl #2]
   3ca40:	orr	r7, r7, r3, lsl r6
   3ca44:	str	r7, [r4, r0, lsl #2]
   3ca48:	add	r2, r2, #1
   3ca4c:	add	r1, r1, #2
   3ca50:	mov	r0, #0
   3ca54:	cmp	r2, #256	; 0x100
   3ca58:	bne	3ca28 <__assert_fail@plt+0x29fac>
   3ca5c:	b	3caac <__assert_fail@plt+0x2a030>
   3ca60:	bl	12740 <__ctype_b_loc@plt>
   3ca64:	ldr	r1, [r0]
   3ca68:	mov	r2, #0
   3ca6c:	mov	r3, #1
   3ca70:	cmp	r8, #0
   3ca74:	bne	3ccd4 <__assert_fail@plt+0x2a258>
   3ca78:	ldrb	r0, [r1]
   3ca7c:	tst	r0, #4
   3ca80:	beq	3ca98 <__assert_fail@plt+0x2a01c>
   3ca84:	ubfx	r0, r2, #5, #3
   3ca88:	and	r6, r2, #31
   3ca8c:	ldr	r7, [r4, r0, lsl #2]
   3ca90:	orr	r7, r7, r3, lsl r6
   3ca94:	str	r7, [r4, r0, lsl #2]
   3ca98:	add	r2, r2, #1
   3ca9c:	add	r1, r1, #2
   3caa0:	mov	r0, #0
   3caa4:	cmp	r2, #256	; 0x100
   3caa8:	bne	3ca78 <__assert_fail@plt+0x29ffc>
   3caac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3cab0:	mov	r1, #1
   3cab4:	orr	r9, r1, r0, lsl #1
   3cab8:	ldr	r0, [r7, #12]
   3cabc:	lsl	r1, r9, #2
   3cac0:	bl	33040 <__assert_fail@plt+0x205c4>
   3cac4:	cmp	r0, #0
   3cac8:	moveq	r0, #12
   3cacc:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   3cad0:	str	r0, [r7, #12]
   3cad4:	str	r9, [r5]
   3cad8:	b	3c594 <__assert_fail@plt+0x29b18>
   3cadc:	ldrb	r0, [r1, #1]
   3cae0:	tst	r0, #64	; 0x40
   3cae4:	beq	3cb00 <__assert_fail@plt+0x2a084>
   3cae8:	ldrb	r0, [r8, r2]
   3caec:	ubfx	r7, r0, #5, #3
   3caf0:	and	r0, r0, #31
   3caf4:	ldr	r6, [r4, r7, lsl #2]
   3caf8:	orr	r0, r6, r3, lsl r0
   3cafc:	str	r0, [r4, r7, lsl #2]
   3cb00:	add	r2, r2, #1
   3cb04:	add	r1, r1, #2
   3cb08:	mov	r0, #0
   3cb0c:	cmp	r2, #256	; 0x100
   3cb10:	bne	3cadc <__assert_fail@plt+0x2a060>
   3cb14:	b	3caac <__assert_fail@plt+0x2a030>
   3cb18:	ldrb	r0, [r1, #1]
   3cb1c:	tst	r0, #1
   3cb20:	beq	3cb3c <__assert_fail@plt+0x2a0c0>
   3cb24:	ldrb	r0, [r8, r2]
   3cb28:	ubfx	r7, r0, #5, #3
   3cb2c:	and	r0, r0, #31
   3cb30:	ldr	r6, [r4, r7, lsl #2]
   3cb34:	orr	r0, r6, r3, lsl r0
   3cb38:	str	r0, [r4, r7, lsl #2]
   3cb3c:	add	r2, r2, #1
   3cb40:	add	r1, r1, #2
   3cb44:	mov	r0, #0
   3cb48:	cmp	r2, #256	; 0x100
   3cb4c:	bne	3cb18 <__assert_fail@plt+0x2a09c>
   3cb50:	b	3caac <__assert_fail@plt+0x2a030>
   3cb54:	mov	r2, #0
   3cb58:	mov	r3, #1
   3cb5c:	ldrb	r0, [r1]
   3cb60:	tst	r0, #8
   3cb64:	beq	3cb80 <__assert_fail@plt+0x2a104>
   3cb68:	ldrb	r0, [r8, r2]
   3cb6c:	ubfx	r7, r0, #5, #3
   3cb70:	and	r0, r0, #31
   3cb74:	ldr	r6, [r4, r7, lsl #2]
   3cb78:	orr	r0, r6, r3, lsl r0
   3cb7c:	str	r0, [r4, r7, lsl #2]
   3cb80:	add	r2, r2, #1
   3cb84:	add	r1, r1, #2
   3cb88:	mov	r0, #0
   3cb8c:	cmp	r2, #256	; 0x100
   3cb90:	bne	3cb5c <__assert_fail@plt+0x2a0e0>
   3cb94:	b	3caac <__assert_fail@plt+0x2a030>
   3cb98:	ldrb	r0, [r1]
   3cb9c:	tst	r0, #1
   3cba0:	beq	3cbbc <__assert_fail@plt+0x2a140>
   3cba4:	ldrb	r0, [r8, r2]
   3cba8:	ubfx	r7, r0, #5, #3
   3cbac:	and	r0, r0, #31
   3cbb0:	ldr	r6, [r4, r7, lsl #2]
   3cbb4:	orr	r0, r6, r3, lsl r0
   3cbb8:	str	r0, [r4, r7, lsl #2]
   3cbbc:	add	r2, r2, #1
   3cbc0:	add	r1, r1, #2
   3cbc4:	mov	r0, #0
   3cbc8:	cmp	r2, #256	; 0x100
   3cbcc:	bne	3cb98 <__assert_fail@plt+0x2a11c>
   3cbd0:	b	3caac <__assert_fail@plt+0x2a030>
   3cbd4:	mov	r2, #0
   3cbd8:	mov	r3, #1
   3cbdc:	ldrb	r0, [r1]
   3cbe0:	tst	r0, #2
   3cbe4:	beq	3cc00 <__assert_fail@plt+0x2a184>
   3cbe8:	ldrb	r0, [r8, r2]
   3cbec:	ubfx	r7, r0, #5, #3
   3cbf0:	and	r0, r0, #31
   3cbf4:	ldr	r6, [r4, r7, lsl #2]
   3cbf8:	orr	r0, r6, r3, lsl r0
   3cbfc:	str	r0, [r4, r7, lsl #2]
   3cc00:	add	r2, r2, #1
   3cc04:	add	r1, r1, #2
   3cc08:	mov	r0, #0
   3cc0c:	cmp	r2, #256	; 0x100
   3cc10:	bne	3cbdc <__assert_fail@plt+0x2a160>
   3cc14:	b	3caac <__assert_fail@plt+0x2a030>
   3cc18:	ldrb	r0, [r1, #1]
   3cc1c:	tst	r0, #16
   3cc20:	beq	3cc3c <__assert_fail@plt+0x2a1c0>
   3cc24:	ldrb	r0, [r8, r2]
   3cc28:	ubfx	r7, r0, #5, #3
   3cc2c:	and	r0, r0, #31
   3cc30:	ldr	r6, [r4, r7, lsl #2]
   3cc34:	orr	r0, r6, r3, lsl r0
   3cc38:	str	r0, [r4, r7, lsl #2]
   3cc3c:	add	r2, r2, #1
   3cc40:	add	r1, r1, #2
   3cc44:	mov	r0, #0
   3cc48:	cmp	r2, #256	; 0x100
   3cc4c:	bne	3cc18 <__assert_fail@plt+0x2a19c>
   3cc50:	b	3caac <__assert_fail@plt+0x2a030>
   3cc54:	ldrsh	r0, [r1]
   3cc58:	cmn	r0, #1
   3cc5c:	bgt	3cc78 <__assert_fail@plt+0x2a1fc>
   3cc60:	ldrb	r0, [r8, r2]
   3cc64:	ubfx	r7, r0, #5, #3
   3cc68:	and	r0, r0, #31
   3cc6c:	ldr	r6, [r4, r7, lsl #2]
   3cc70:	orr	r0, r6, r3, lsl r0
   3cc74:	str	r0, [r4, r7, lsl #2]
   3cc78:	add	r2, r2, #1
   3cc7c:	add	r1, r1, #2
   3cc80:	mov	r0, #0
   3cc84:	cmp	r2, #256	; 0x100
   3cc88:	bne	3cc54 <__assert_fail@plt+0x2a1d8>
   3cc8c:	b	3caac <__assert_fail@plt+0x2a030>
   3cc90:	mov	r2, #0
   3cc94:	mov	r3, #1
   3cc98:	ldrb	r0, [r1, #1]
   3cc9c:	tst	r0, #2
   3cca0:	beq	3ccbc <__assert_fail@plt+0x2a240>
   3cca4:	ldrb	r0, [r8, r2]
   3cca8:	ubfx	r7, r0, #5, #3
   3ccac:	and	r0, r0, #31
   3ccb0:	ldr	r6, [r4, r7, lsl #2]
   3ccb4:	orr	r0, r6, r3, lsl r0
   3ccb8:	str	r0, [r4, r7, lsl #2]
   3ccbc:	add	r2, r2, #1
   3ccc0:	add	r1, r1, #2
   3ccc4:	mov	r0, #0
   3ccc8:	cmp	r2, #256	; 0x100
   3cccc:	bne	3cc98 <__assert_fail@plt+0x2a21c>
   3ccd0:	b	3caac <__assert_fail@plt+0x2a030>
   3ccd4:	ldrb	r0, [r1]
   3ccd8:	tst	r0, #4
   3ccdc:	beq	3ccf8 <__assert_fail@plt+0x2a27c>
   3cce0:	ldrb	r0, [r8, r2]
   3cce4:	ubfx	r7, r0, #5, #3
   3cce8:	and	r0, r0, #31
   3ccec:	ldr	r6, [r4, r7, lsl #2]
   3ccf0:	orr	r0, r6, r3, lsl r0
   3ccf4:	str	r0, [r4, r7, lsl #2]
   3ccf8:	add	r2, r2, #1
   3ccfc:	add	r1, r1, #2
   3cd00:	mov	r0, #0
   3cd04:	cmp	r2, #256	; 0x100
   3cd08:	bne	3ccd4 <__assert_fail@plt+0x2a258>
   3cd0c:	b	3caac <__assert_fail@plt+0x2a030>
   3cd10:	mov	r2, #0
   3cd14:	mov	r3, #1
   3cd18:	ldrb	r0, [r1, #1]
   3cd1c:	tst	r0, #32
   3cd20:	beq	3cd3c <__assert_fail@plt+0x2a2c0>
   3cd24:	ldrb	r0, [r8, r2]
   3cd28:	ubfx	r7, r0, #5, #3
   3cd2c:	and	r0, r0, #31
   3cd30:	ldr	r6, [r4, r7, lsl #2]
   3cd34:	orr	r0, r6, r3, lsl r0
   3cd38:	str	r0, [r4, r7, lsl #2]
   3cd3c:	add	r2, r2, #1
   3cd40:	add	r1, r1, #2
   3cd44:	mov	r0, #0
   3cd48:	cmp	r2, #256	; 0x100
   3cd4c:	bne	3cd18 <__assert_fail@plt+0x2a29c>
   3cd50:	b	3caac <__assert_fail@plt+0x2a030>
   3cd54:	mov	r2, #0
   3cd58:	mov	r3, #1
   3cd5c:	ldrb	r0, [r1, #1]
   3cd60:	tst	r0, #4
   3cd64:	beq	3cd80 <__assert_fail@plt+0x2a304>
   3cd68:	ldrb	r0, [r8, r2]
   3cd6c:	ubfx	r7, r0, #5, #3
   3cd70:	and	r0, r0, #31
   3cd74:	ldr	r6, [r4, r7, lsl #2]
   3cd78:	orr	r0, r6, r3, lsl r0
   3cd7c:	str	r0, [r4, r7, lsl #2]
   3cd80:	add	r2, r2, #1
   3cd84:	add	r1, r1, #2
   3cd88:	mov	r0, #0
   3cd8c:	cmp	r2, #256	; 0x100
   3cd90:	bne	3cd5c <__assert_fail@plt+0x2a2e0>
   3cd94:	b	3caac <__assert_fail@plt+0x2a030>
   3cd98:	mov	r2, #0
   3cd9c:	mov	r3, #1
   3cda0:	ldrb	r0, [r1, #1]
   3cda4:	tst	r0, #8
   3cda8:	beq	3cdc4 <__assert_fail@plt+0x2a348>
   3cdac:	ldrb	r0, [r8, r2]
   3cdb0:	ubfx	r7, r0, #5, #3
   3cdb4:	and	r0, r0, #31
   3cdb8:	ldr	r6, [r4, r7, lsl #2]
   3cdbc:	orr	r0, r6, r3, lsl r0
   3cdc0:	str	r0, [r4, r7, lsl #2]
   3cdc4:	add	r2, r2, #1
   3cdc8:	add	r1, r1, #2
   3cdcc:	mov	r0, #0
   3cdd0:	cmp	r2, #256	; 0x100
   3cdd4:	bne	3cda0 <__assert_fail@plt+0x2a324>
   3cdd8:	b	3caac <__assert_fail@plt+0x2a030>
   3cddc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3cde0:	add	fp, sp, #24
   3cde4:	ldrb	r3, [r1, #24]
   3cde8:	ldr	r2, [r1, #28]
   3cdec:	mov	r4, #0
   3cdf0:	sub	r3, r3, #2
   3cdf4:	cmp	r3, #14
   3cdf8:	bhi	3cf1c <__assert_fail@plt+0x2a4a0>
   3cdfc:	add	r7, pc, #0
   3ce00:	ldr	pc, [r7, r3, lsl #2]
   3ce04:	andeq	ip, r3, r0, asr pc
   3ce08:	andeq	ip, r3, ip, lsl pc
   3ce0c:	andeq	ip, r3, r4, lsr pc
   3ce10:	andeq	ip, r3, ip, lsl pc
   3ce14:	andeq	ip, r3, ip, lsl pc
   3ce18:	andeq	ip, r3, ip, lsl pc
   3ce1c:	andeq	ip, r3, r0, asr #28
   3ce20:	andeq	ip, r3, r0, asr #28
   3ce24:	muleq	r3, r4, lr
   3ce28:	muleq	r3, r4, lr
   3ce2c:	andeq	ip, r3, r0, asr #28
   3ce30:	andeq	ip, r3, ip, lsl pc
   3ce34:	andeq	ip, r3, ip, lsl pc
   3ce38:	andeq	ip, r3, ip, lsl pc
   3ce3c:	andeq	ip, r3, r0, asr pc
   3ce40:	ldr	r1, [r1, #16]
   3ce44:	ldr	r5, [r1, #28]
   3ce48:	ldr	r6, [r0, #20]
   3ce4c:	add	r0, r2, r2, lsl #1
   3ce50:	mov	r1, #1
   3ce54:	str	r1, [r6, r0, lsl #2]!
   3ce58:	mov	r0, #4
   3ce5c:	mov	r7, r6
   3ce60:	str	r1, [r7, #4]!
   3ce64:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3ce68:	cmp	r0, #0
   3ce6c:	str	r0, [r6, #8]
   3ce70:	strne	r5, [r0]
   3ce74:	movne	r0, r4
   3ce78:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   3ce7c:	mov	r0, #0
   3ce80:	str	r0, [r7]
   3ce84:	str	r0, [r6]
   3ce88:	mov	r4, #12
   3ce8c:	mov	r0, r4
   3ce90:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3ce94:	ldrb	r3, [r0, #88]	; 0x58
   3ce98:	add	r6, r1, #16
   3ce9c:	add	r5, r2, r2, lsl #1
   3cea0:	orr	r3, r3, #1
   3cea4:	strb	r3, [r0, #88]	; 0x58
   3cea8:	mov	r3, r6
   3ceac:	ldr	r7, [r1, #4]
   3ceb0:	ldr	r1, [r1, #8]
   3ceb4:	cmp	r1, #0
   3ceb8:	addne	r3, r1, #12
   3cebc:	cmp	r7, #0
   3cec0:	ldr	r1, [r3]
   3cec4:	addne	r6, r7, #12
   3cec8:	ldr	r8, [r1, #28]
   3cecc:	ldr	r1, [r6]
   3ced0:	ldr	r6, [r0, #20]
   3ced4:	mov	r0, #2
   3ced8:	ldr	r9, [r1, #28]
   3cedc:	mov	r7, r6
   3cee0:	str	r0, [r7, r5, lsl #2]!
   3cee4:	mov	r0, #8
   3cee8:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3ceec:	cmp	r0, #0
   3cef0:	str	r0, [r7, #8]
   3cef4:	beq	3ce88 <__assert_fail@plt+0x2a40c>
   3cef8:	add	r1, r6, r5, lsl #2
   3cefc:	cmp	r9, r8
   3cf00:	add	r1, r1, #4
   3cf04:	bne	3cf58 <__assert_fail@plt+0x2a4dc>
   3cf08:	mov	r2, #1
   3cf0c:	str	r2, [r1]
   3cf10:	str	r9, [r0]
   3cf14:	mov	r0, r4
   3cf18:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3cf1c:	ldr	r1, [r1, #16]
   3cf20:	ldr	r0, [r0, #12]
   3cf24:	ldr	r1, [r1, #28]
   3cf28:	str	r1, [r0, r2, lsl #2]
   3cf2c:	mov	r0, r4
   3cf30:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3cf34:	ldr	r7, [r1, #16]
   3cf38:	ldr	r3, [r0, #12]
   3cf3c:	ldr	r5, [r7, #28]
   3cf40:	str	r5, [r3, r2, lsl #2]
   3cf44:	ldrb	r1, [r1, #24]
   3cf48:	cmp	r1, #4
   3cf4c:	beq	3ce48 <__assert_fail@plt+0x2a3cc>
   3cf50:	mov	r0, r4
   3cf54:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3cf58:	mov	r2, #2
   3cf5c:	str	r2, [r1]
   3cf60:	stmge	r0, {r8, r9}
   3cf64:	strlt	r9, [r0]
   3cf68:	strlt	r8, [r0, #4]
   3cf6c:	mov	r0, r4
   3cf70:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3cf74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3cf78:	add	fp, sp, #28
   3cf7c:	sub	sp, sp, #4
   3cf80:	ldr	r6, [r2, #4]
   3cf84:	mov	r8, r0
   3cf88:	ldr	r5, [r1]
   3cf8c:	mov	r9, r2
   3cf90:	cmp	r6, #0
   3cf94:	ldrbne	r0, [r1, #28]
   3cf98:	andsne	r0, r0, #16
   3cf9c:	bne	3d140 <__assert_fail@plt+0x2a6c4>
   3cfa0:	ldr	r1, [r5, #64]	; 0x40
   3cfa4:	cmp	r1, #31
   3cfa8:	beq	3d168 <__assert_fail@plt+0x2a6ec>
   3cfac:	ldr	r0, [r5, #56]	; 0x38
   3cfb0:	add	r2, r1, #1
   3cfb4:	add	r0, r0, r1, lsl #5
   3cfb8:	mov	r1, #0
   3cfbc:	vmov.i32	q8, #0	; 0x00000000
   3cfc0:	str	r2, [r5, #64]	; 0x40
   3cfc4:	add	sl, r0, #4
   3cfc8:	mov	r2, #8
   3cfcc:	str	r1, [r0, #20]
   3cfd0:	str	r1, [r0, #24]
   3cfd4:	str	r2, [r0, #28]
   3cfd8:	mov	r0, #28
   3cfdc:	mov	r1, sl
   3cfe0:	vst1.32	{d16-d17}, [r1], r0
   3cfe4:	mvn	r0, #0
   3cfe8:	str	r0, [r1]
   3cfec:	ldr	r1, [r5, #64]	; 0x40
   3cff0:	cmp	r1, #31
   3cff4:	beq	3d190 <__assert_fail@plt+0x2a714>
   3cff8:	ldr	r0, [r5, #56]	; 0x38
   3cffc:	add	r2, r1, #1
   3d000:	add	r0, r0, r1, lsl #5
   3d004:	mov	r1, #0
   3d008:	vmov.i32	q8, #0	; 0x00000000
   3d00c:	str	r2, [r5, #64]	; 0x40
   3d010:	add	r7, r0, #4
   3d014:	mov	r2, #9
   3d018:	str	r1, [r0, #20]
   3d01c:	str	r1, [r0, #24]
   3d020:	str	r2, [r0, #28]
   3d024:	mov	r0, #28
   3d028:	mov	r1, r7
   3d02c:	vst1.32	{d16-d17}, [r1], r0
   3d030:	mvn	r0, #0
   3d034:	str	r0, [r1]
   3d038:	cmp	r6, #0
   3d03c:	mov	r4, r7
   3d040:	beq	3d090 <__assert_fail@plt+0x2a614>
   3d044:	ldr	r1, [r5, #64]	; 0x40
   3d048:	cmp	r1, #31
   3d04c:	beq	3d1e0 <__assert_fail@plt+0x2a764>
   3d050:	ldr	r0, [r5, #56]	; 0x38
   3d054:	add	r2, r1, #1
   3d058:	add	r4, r0, r1, lsl #5
   3d05c:	mov	r0, #0
   3d060:	mov	r1, #16
   3d064:	cmp	r7, #0
   3d068:	str	r2, [r5, #64]	; 0x40
   3d06c:	str	r0, [r4, #4]!
   3d070:	mvn	r2, #0
   3d074:	add	r3, r4, #20
   3d078:	stmib	r4, {r6, r7}
   3d07c:	str	r0, [r4, #12]
   3d080:	str	r0, [r4, #16]
   3d084:	stm	r3, {r0, r1, r2}
   3d088:	str	r4, [r6]
   3d08c:	strne	r4, [r7]
   3d090:	ldr	r1, [r5, #64]	; 0x40
   3d094:	cmp	r1, #31
   3d098:	beq	3d1b8 <__assert_fail@plt+0x2a73c>
   3d09c:	ldr	r0, [r5, #56]	; 0x38
   3d0a0:	add	r2, r1, #1
   3d0a4:	add	r6, r0, r1, lsl #5
   3d0a8:	mov	r0, #0
   3d0ac:	mov	r1, #16
   3d0b0:	cmp	sl, #0
   3d0b4:	str	r2, [r5, #64]	; 0x40
   3d0b8:	str	r0, [r6, #4]!
   3d0bc:	mvn	r2, #0
   3d0c0:	add	r3, r6, #20
   3d0c4:	str	sl, [r6, #4]
   3d0c8:	str	r4, [r6, #8]
   3d0cc:	str	r0, [r6, #12]
   3d0d0:	str	r0, [r6, #16]
   3d0d4:	stm	r3, {r0, r1, r2}
   3d0d8:	strne	r6, [sl]
   3d0dc:	cmp	r4, #0
   3d0e0:	strne	r6, [r4]
   3d0e4:	cmp	r7, #0
   3d0e8:	beq	3d0f8 <__assert_fail@plt+0x2a67c>
   3d0ec:	cmp	sl, #0
   3d0f0:	cmpne	r4, #0
   3d0f4:	bne	3d108 <__assert_fail@plt+0x2a68c>
   3d0f8:	mov	r0, #12
   3d0fc:	mov	r6, #0
   3d100:	str	r0, [r8]
   3d104:	b	3d15c <__assert_fail@plt+0x2a6e0>
   3d108:	cmp	r6, #0
   3d10c:	beq	3d0f8 <__assert_fail@plt+0x2a67c>
   3d110:	ldr	r0, [r9, #20]
   3d114:	str	r0, [r7, #20]
   3d118:	str	r0, [sl, #20]
   3d11c:	ldr	r1, [r9, #24]
   3d120:	ldr	r0, [r7, #24]
   3d124:	lsr	r1, r1, #19
   3d128:	bfi	r0, r1, #19, #1
   3d12c:	str	r0, [r7, #24]
   3d130:	ldr	r0, [sl, #24]
   3d134:	bfi	r0, r1, #19, #1
   3d138:	str	r0, [sl, #24]
   3d13c:	b	3d15c <__assert_fail@plt+0x2a6e0>
   3d140:	ldr	r0, [r9, #20]
   3d144:	cmp	r0, #31
   3d148:	bgt	3d15c <__assert_fail@plt+0x2a6e0>
   3d14c:	ldr	r1, [r5, #80]	; 0x50
   3d150:	mov	r2, #1
   3d154:	tst	r1, r2, lsl r0
   3d158:	bne	3cfa0 <__assert_fail@plt+0x2a524>
   3d15c:	mov	r0, r6
   3d160:	sub	sp, fp, #28
   3d164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d168:	mov	r0, #996	; 0x3e4
   3d16c:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3d170:	cmp	r0, #0
   3d174:	beq	3d208 <__assert_fail@plt+0x2a78c>
   3d178:	ldr	r1, [r5, #56]	; 0x38
   3d17c:	str	r1, [r0]
   3d180:	mov	r1, #0
   3d184:	str	r1, [r5, #64]	; 0x40
   3d188:	str	r0, [r5, #56]	; 0x38
   3d18c:	b	3cfb0 <__assert_fail@plt+0x2a534>
   3d190:	mov	r0, #996	; 0x3e4
   3d194:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3d198:	cmp	r0, #0
   3d19c:	beq	3d210 <__assert_fail@plt+0x2a794>
   3d1a0:	ldr	r1, [r5, #56]	; 0x38
   3d1a4:	str	r1, [r0]
   3d1a8:	mov	r1, #0
   3d1ac:	str	r1, [r5, #64]	; 0x40
   3d1b0:	str	r0, [r5, #56]	; 0x38
   3d1b4:	b	3cffc <__assert_fail@plt+0x2a580>
   3d1b8:	mov	r0, #996	; 0x3e4
   3d1bc:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3d1c0:	cmp	r0, #0
   3d1c4:	beq	3d218 <__assert_fail@plt+0x2a79c>
   3d1c8:	ldr	r1, [r5, #56]	; 0x38
   3d1cc:	str	r1, [r0]
   3d1d0:	mov	r1, #0
   3d1d4:	str	r1, [r5, #64]	; 0x40
   3d1d8:	str	r0, [r5, #56]	; 0x38
   3d1dc:	b	3d0a0 <__assert_fail@plt+0x2a624>
   3d1e0:	mov	r0, #996	; 0x3e4
   3d1e4:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3d1e8:	cmp	r0, #0
   3d1ec:	beq	3d228 <__assert_fail@plt+0x2a7ac>
   3d1f0:	ldr	r1, [r5, #56]	; 0x38
   3d1f4:	str	r1, [r0]
   3d1f8:	mov	r1, #0
   3d1fc:	str	r1, [r5, #64]	; 0x40
   3d200:	str	r0, [r5, #56]	; 0x38
   3d204:	b	3d054 <__assert_fail@plt+0x2a5d8>
   3d208:	mov	sl, #0
   3d20c:	b	3cfec <__assert_fail@plt+0x2a570>
   3d210:	mov	r7, #0
   3d214:	b	3d038 <__assert_fail@plt+0x2a5bc>
   3d218:	mov	r6, #0
   3d21c:	cmp	r7, #0
   3d220:	bne	3d0ec <__assert_fail@plt+0x2a670>
   3d224:	b	3d0f8 <__assert_fail@plt+0x2a67c>
   3d228:	mov	r4, #0
   3d22c:	b	3d090 <__assert_fail@plt+0x2a614>
   3d230:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d234:	add	fp, sp, #28
   3d238:	sub	sp, sp, #12
   3d23c:	mov	r4, r0
   3d240:	ldr	r7, [r0, #4]
   3d244:	ldr	r0, [r0, #8]
   3d248:	mov	r5, r2
   3d24c:	mov	r9, r1
   3d250:	cmp	r0, r7
   3d254:	bcs	3d320 <__assert_fail@plt+0x2a8a4>
   3d258:	ldr	r1, [r4]
   3d25c:	str	r9, [r1, r0, lsl #3]!
   3d260:	str	r5, [r1, #4]
   3d264:	ldr	r0, [r4]
   3d268:	ldr	r1, [r4, #8]
   3d26c:	add	r0, r0, r1, lsl #3
   3d270:	ldr	r1, [r0, #4]
   3d274:	bfc	r1, #8, #10
   3d278:	str	r1, [r0, #4]
   3d27c:	uxtb	r1, r5
   3d280:	cmp	r1, #5
   3d284:	bne	3d298 <__assert_fail@plt+0x2a81c>
   3d288:	ldr	r2, [r4, #92]	; 0x5c
   3d28c:	mov	r0, #1048576	; 0x100000
   3d290:	cmp	r2, #1
   3d294:	bgt	3d2a8 <__assert_fail@plt+0x2a82c>
   3d298:	sub	r0, r1, #6
   3d29c:	clz	r0, r0
   3d2a0:	lsr	r0, r0, #5
   3d2a4:	lsl	r0, r0, #20
   3d2a8:	ldr	r1, [r4]
   3d2ac:	ldr	r2, [r4, #8]
   3d2b0:	add	r1, r1, r2, lsl #3
   3d2b4:	ldr	r2, [r1, #4]
   3d2b8:	bic	r2, r2, #1048576	; 0x100000
   3d2bc:	orr	r0, r2, r0
   3d2c0:	mvn	r2, #0
   3d2c4:	str	r0, [r1, #4]
   3d2c8:	ldr	r0, [r4, #8]
   3d2cc:	ldr	r1, [r4, #12]
   3d2d0:	str	r2, [r1, r0, lsl #2]
   3d2d4:	mov	r2, #0
   3d2d8:	ldr	r0, [r4, #8]
   3d2dc:	ldr	r1, [r4, #20]
   3d2e0:	add	r0, r0, r0, lsl #1
   3d2e4:	str	r2, [r1, r0, lsl #2]!
   3d2e8:	str	r2, [r1, #4]
   3d2ec:	str	r2, [r1, #8]
   3d2f0:	ldr	r0, [r4, #8]
   3d2f4:	ldr	r1, [r4, #24]
   3d2f8:	add	r0, r0, r0, lsl #1
   3d2fc:	str	r2, [r1, r0, lsl #2]!
   3d300:	str	r2, [r1, #4]
   3d304:	str	r2, [r1, #8]
   3d308:	ldr	r6, [r4, #8]
   3d30c:	add	r0, r6, #1
   3d310:	str	r0, [r4, #8]
   3d314:	mov	r0, r6
   3d318:	sub	sp, fp, #28
   3d31c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d320:	movw	r0, #21845	; 0x5555
   3d324:	lsl	r1, r7, #1
   3d328:	mvn	r6, #0
   3d32c:	movt	r0, #5461	; 0x1555
   3d330:	cmp	r1, r0
   3d334:	bhi	3d314 <__assert_fail@plt+0x2a898>
   3d338:	ldr	r0, [r4]
   3d33c:	str	r1, [sp, #8]
   3d340:	lsl	r1, r7, #4
   3d344:	bl	33040 <__assert_fail@plt+0x205c4>
   3d348:	cmp	r0, #0
   3d34c:	beq	3d314 <__assert_fail@plt+0x2a898>
   3d350:	str	r0, [r4]
   3d354:	lsl	r8, r7, #3
   3d358:	ldr	r0, [r4, #12]
   3d35c:	mov	r1, r8
   3d360:	bl	33040 <__assert_fail@plt+0x205c4>
   3d364:	str	r0, [sp, #4]
   3d368:	ldr	r0, [r4, #16]
   3d36c:	mov	r1, r8
   3d370:	bl	33040 <__assert_fail@plt+0x205c4>
   3d374:	mov	r2, r0
   3d378:	ldr	r0, [r4, #20]
   3d37c:	add	r1, r7, r7, lsl #1
   3d380:	lsl	r8, r1, #3
   3d384:	mov	r7, r2
   3d388:	mov	r1, r8
   3d38c:	bl	33040 <__assert_fail@plt+0x205c4>
   3d390:	mov	sl, r0
   3d394:	ldr	r0, [r4, #24]
   3d398:	mov	r1, r8
   3d39c:	bl	33040 <__assert_fail@plt+0x205c4>
   3d3a0:	mov	r8, r0
   3d3a4:	ldr	r0, [sp, #4]
   3d3a8:	cmp	r0, #0
   3d3ac:	beq	3d3bc <__assert_fail@plt+0x2a940>
   3d3b0:	cmp	r7, #0
   3d3b4:	cmpne	sl, #0
   3d3b8:	bne	3d3dc <__assert_fail@plt+0x2a960>
   3d3bc:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3d3c0:	mov	r0, r7
   3d3c4:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3d3c8:	mov	r0, sl
   3d3cc:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3d3d0:	mov	r0, r8
   3d3d4:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3d3d8:	b	3d314 <__assert_fail@plt+0x2a898>
   3d3dc:	cmp	r8, #0
   3d3e0:	beq	3d3bc <__assert_fail@plt+0x2a940>
   3d3e4:	add	r1, r4, #12
   3d3e8:	stm	r1, {r0, r7, sl}
   3d3ec:	str	r8, [r4, #24]
   3d3f0:	ldr	r0, [sp, #8]
   3d3f4:	str	r0, [r4, #4]
   3d3f8:	ldr	r0, [r4, #8]
   3d3fc:	b	3d258 <__assert_fail@plt+0x2a7dc>
   3d400:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d404:	add	fp, sp, #28
   3d408:	sub	sp, sp, #44	; 0x2c
   3d40c:	mov	r8, r0
   3d410:	ldr	r0, [r1, #20]
   3d414:	add	r4, r2, r2, lsl #1
   3d418:	mov	r5, r1
   3d41c:	mov	r1, #0
   3d420:	mov	r9, r3
   3d424:	mov	r6, r2
   3d428:	add	r0, r0, r4, lsl #2
   3d42c:	ldr	r0, [r0, #4]
   3d430:	str	r1, [sp, #36]	; 0x24
   3d434:	add	r0, r0, #1
   3d438:	str	r0, [sp, #32]
   3d43c:	lsl	r0, r0, #2
   3d440:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3d444:	cmp	r0, #0
   3d448:	str	r0, [sp, #40]	; 0x28
   3d44c:	beq	3d614 <__assert_fail@plt+0x2ab98>
   3d450:	mov	r1, #1
   3d454:	str	r6, [r0]
   3d458:	str	r1, [sp, #36]	; 0x24
   3d45c:	mvn	r1, #0
   3d460:	ldr	r0, [r5, #24]
   3d464:	add	r0, r0, r4, lsl #2
   3d468:	str	r1, [r0, #4]
   3d46c:	ldr	r2, [r5]
   3d470:	add	r0, r2, r6, lsl #3
   3d474:	ldr	r0, [r0, #4]
   3d478:	ubfx	r1, r0, #8, #10
   3d47c:	cmp	r1, #0
   3d480:	beq	3d4dc <__assert_fail@plt+0x2aa60>
   3d484:	ldr	r3, [r5, #20]
   3d488:	add	r3, r3, r4, lsl #2
   3d48c:	ldr	r7, [r3, #4]
   3d490:	cmp	r7, #0
   3d494:	beq	3d4dc <__assert_fail@plt+0x2aa60>
   3d498:	ldr	r3, [r3, #8]
   3d49c:	ldr	r3, [r3]
   3d4a0:	add	r2, r2, r3, lsl #3
   3d4a4:	ldrb	r2, [r2, #6]
   3d4a8:	tst	r2, #4
   3d4ac:	bne	3d4dc <__assert_fail@plt+0x2aa60>
   3d4b0:	str	r1, [sp]
   3d4b4:	mov	r0, r5
   3d4b8:	mov	r1, r6
   3d4bc:	mov	r2, r6
   3d4c0:	mov	r3, r6
   3d4c4:	bl	3d620 <__assert_fail@plt+0x2aba4>
   3d4c8:	cmp	r0, #0
   3d4cc:	bne	3d60c <__assert_fail@plt+0x2ab90>
   3d4d0:	ldr	r0, [r5]
   3d4d4:	add	r0, r0, r6, lsl #3
   3d4d8:	ldr	r0, [r0, #4]
   3d4dc:	tst	r0, #8
   3d4e0:	beq	3d5e0 <__assert_fail@plt+0x2ab64>
   3d4e4:	ldr	r0, [r5, #20]
   3d4e8:	add	r1, r0, r4, lsl #2
   3d4ec:	ldr	r1, [r1, #4]
   3d4f0:	cmp	r1, #1
   3d4f4:	blt	3d5e0 <__assert_fail@plt+0x2ab64>
   3d4f8:	str	r8, [sp, #12]
   3d4fc:	mov	r8, #0
   3d500:	add	r7, sp, #16
   3d504:	add	sl, sp, #32
   3d508:	mov	r6, #0
   3d50c:	str	r9, [sp, #8]
   3d510:	add	r0, r0, r4, lsl #2
   3d514:	ldr	r0, [r0, #8]
   3d518:	ldr	r2, [r0, r6, lsl #2]
   3d51c:	ldr	r0, [r5, #24]
   3d520:	add	r9, r2, r2, lsl #1
   3d524:	add	r0, r0, r9, lsl #2
   3d528:	ldr	r1, [r0, #4]
   3d52c:	cmn	r1, #1
   3d530:	beq	3d598 <__assert_fail@plt+0x2ab1c>
   3d534:	cmp	r1, #0
   3d538:	bne	3d558 <__assert_fail@plt+0x2aadc>
   3d53c:	mov	r0, r7
   3d540:	mov	r1, r5
   3d544:	mov	r3, #0
   3d548:	bl	3d400 <__assert_fail@plt+0x2a984>
   3d54c:	cmp	r0, #0
   3d550:	beq	3d568 <__assert_fail@plt+0x2aaec>
   3d554:	b	3d60c <__assert_fail@plt+0x2ab90>
   3d558:	vldr	d16, [r0]
   3d55c:	ldr	r0, [r0, #8]
   3d560:	str	r0, [sp, #24]
   3d564:	vstr	d16, [sp, #16]
   3d568:	mov	r0, sl
   3d56c:	mov	r1, r7
   3d570:	bl	3dad0 <__assert_fail@plt+0x2b054>
   3d574:	cmp	r0, #0
   3d578:	bne	3d60c <__assert_fail@plt+0x2ab90>
   3d57c:	ldr	r0, [r5, #24]
   3d580:	add	r0, r0, r9, lsl #2
   3d584:	ldr	r0, [r0, #4]
   3d588:	cmp	r0, #0
   3d58c:	bne	3d59c <__assert_fail@plt+0x2ab20>
   3d590:	ldr	r0, [sp, #24]
   3d594:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3d598:	mov	r8, #1
   3d59c:	ldr	r0, [r5, #20]
   3d5a0:	add	r6, r6, #1
   3d5a4:	add	r1, r0, r4, lsl #2
   3d5a8:	ldr	r1, [r1, #4]
   3d5ac:	cmp	r6, r1
   3d5b0:	blt	3d510 <__assert_fail@plt+0x2aa94>
   3d5b4:	tst	r8, #1
   3d5b8:	ldr	r8, [sp, #12]
   3d5bc:	ldr	r0, [sp, #8]
   3d5c0:	beq	3d5e0 <__assert_fail@plt+0x2ab64>
   3d5c4:	cmp	r0, #0
   3d5c8:	bne	3d5e0 <__assert_fail@plt+0x2ab64>
   3d5cc:	ldr	r0, [r5, #24]
   3d5d0:	mov	r1, #0
   3d5d4:	add	r0, r0, r4, lsl #2
   3d5d8:	str	r1, [r0, #4]
   3d5dc:	b	3d5f8 <__assert_fail@plt+0x2ab7c>
   3d5e0:	ldr	r0, [r5, #24]
   3d5e4:	vldr	d16, [sp, #32]
   3d5e8:	ldr	r1, [sp, #40]	; 0x28
   3d5ec:	add	r0, r0, r4, lsl #2
   3d5f0:	str	r1, [r0, #8]
   3d5f4:	vstr	d16, [r0]
   3d5f8:	ldr	r0, [sp, #40]	; 0x28
   3d5fc:	vldr	d16, [sp, #32]
   3d600:	str	r0, [r8, #8]
   3d604:	mov	r0, #0
   3d608:	vstr	d16, [r8]
   3d60c:	sub	sp, fp, #28
   3d610:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d614:	mov	r0, #12
   3d618:	sub	sp, fp, #28
   3d61c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d620:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d624:	add	fp, sp, #28
   3d628:	sub	sp, sp, #20
   3d62c:	mov	r9, r0
   3d630:	ldr	r0, [fp, #8]
   3d634:	mov	sl, r2
   3d638:	mov	r8, r1
   3d63c:	str	r3, [sp, #8]
   3d640:	str	r0, [sp, #16]
   3d644:	ldr	r2, [r9]
   3d648:	add	r3, r2, r8, lsl #3
   3d64c:	ldrb	r0, [r3, #4]!
   3d650:	cmp	r0, #4
   3d654:	bne	3d744 <__assert_fail@plt+0x2acc8>
   3d658:	ldr	r0, [r9, #12]
   3d65c:	ldr	r1, [r9, #20]
   3d660:	add	r6, sl, sl, lsl #1
   3d664:	ldr	r4, [r0, r8, lsl #2]
   3d668:	add	r0, r1, r6, lsl #2
   3d66c:	mov	r1, #0
   3d670:	str	r1, [r0, #4]
   3d674:	mov	r0, r9
   3d678:	ldr	r1, [r2, r4, lsl #3]!
   3d67c:	ldr	r2, [r2, #4]
   3d680:	bl	3d230 <__assert_fail@plt+0x2a7b4>
   3d684:	mov	r7, r0
   3d688:	mov	r0, #12
   3d68c:	cmn	r7, #1
   3d690:	str	r0, [sp, #12]
   3d694:	beq	3dac4 <__assert_fail@plt+0x2b048>
   3d698:	ldr	r1, [r9]
   3d69c:	movw	r0, #65280	; 0xff00
   3d6a0:	movw	r3, #255	; 0xff
   3d6a4:	movt	r0, #3
   3d6a8:	movt	r3, #65532	; 0xfffc
   3d6ac:	mov	ip, r0
   3d6b0:	ldr	r0, [sp, #16]
   3d6b4:	add	r1, r1, r7, lsl #3
   3d6b8:	ldr	r2, [r1, #4]
   3d6bc:	and	r0, ip, r0, lsl #8
   3d6c0:	and	r2, r2, r3
   3d6c4:	orr	r0, r2, r0
   3d6c8:	str	r0, [r1, #4]
   3d6cc:	ldr	r0, [r9]
   3d6d0:	add	r1, r0, r4, lsl #3
   3d6d4:	add	r0, r0, r7, lsl #3
   3d6d8:	ldr	r1, [r1, #4]
   3d6dc:	ldr	r2, [r0, #4]
   3d6e0:	and	r1, r1, ip
   3d6e4:	orr	r1, r1, r2
   3d6e8:	str	r1, [r0, #4]
   3d6ec:	ldr	r0, [r9]
   3d6f0:	add	r0, r0, r7, lsl #3
   3d6f4:	ldr	r1, [r0, #4]
   3d6f8:	orr	r1, r1, #262144	; 0x40000
   3d6fc:	str	r1, [r0, #4]
   3d700:	ldr	r0, [r9, #16]
   3d704:	str	r4, [r0, r7, lsl #2]
   3d708:	ldr	r0, [r9, #12]
   3d70c:	ldr	r1, [r0, r8, lsl #2]
   3d710:	str	r1, [r0, sl, lsl #2]
   3d714:	mov	r1, r7
   3d718:	ldr	r0, [r9, #20]
   3d71c:	add	r0, r0, r6, lsl #2
   3d720:	bl	3dc60 <__assert_fail@plt+0x2b1e4>
   3d724:	mov	r1, #0
   3d728:	cmp	r0, #0
   3d72c:	mov	r8, r4
   3d730:	mov	sl, r7
   3d734:	beq	3dac4 <__assert_fail@plt+0x2b048>
   3d738:	cmp	r1, #0
   3d73c:	beq	3d644 <__assert_fail@plt+0x2abc8>
   3d740:	b	3da9c <__assert_fail@plt+0x2b020>
   3d744:	ldr	r0, [r9, #20]
   3d748:	add	ip, r8, r8, lsl #1
   3d74c:	add	r7, r0, ip, lsl #2
   3d750:	ldr	r1, [r7, #4]
   3d754:	cmp	r1, #0
   3d758:	beq	3dab0 <__assert_fail@plt+0x2b034>
   3d75c:	ldr	r7, [r7, #8]
   3d760:	add	r6, sl, sl, lsl #1
   3d764:	cmp	r1, #1
   3d768:	add	r0, r0, r6, lsl #2
   3d76c:	ldr	r5, [r7]
   3d770:	mov	r7, #0
   3d774:	str	r7, [r0, #4]
   3d778:	bne	3d7b4 <__assert_fail@plt+0x2ad38>
   3d77c:	ldr	r1, [sp, #8]
   3d780:	cmp	r8, r1
   3d784:	bne	3d9b4 <__assert_fail@plt+0x2af38>
   3d788:	cmp	sl, r8
   3d78c:	beq	3d9b4 <__assert_fail@plt+0x2af38>
   3d790:	mov	r1, r5
   3d794:	bl	3dc60 <__assert_fail@plt+0x2b1e4>
   3d798:	ldr	r8, [sp, #8]
   3d79c:	cmp	r0, #0
   3d7a0:	mov	r1, #1
   3d7a4:	movwne	r1, #2
   3d7a8:	cmp	r1, #0
   3d7ac:	beq	3d644 <__assert_fail@plt+0x2abc8>
   3d7b0:	b	3da9c <__assert_fail@plt+0x2b020>
   3d7b4:	ldr	r1, [r9, #8]
   3d7b8:	ldr	r8, [sp, #16]
   3d7bc:	str	r6, [sp, #4]
   3d7c0:	sub	r3, r1, #1
   3d7c4:	cmp	r3, #1
   3d7c8:	blt	3d818 <__assert_fail@plt+0x2ad9c>
   3d7cc:	add	r3, r2, r3, lsl #3
   3d7d0:	ldr	r6, [r3, #4]
   3d7d4:	ands	r3, r6, #262144	; 0x40000
   3d7d8:	beq	3d818 <__assert_fail@plt+0x2ad9c>
   3d7dc:	ldr	r4, [r9, #16]
   3d7e0:	sub	r3, r2, #12
   3d7e4:	sub	r4, r4, #4
   3d7e8:	ldr	r7, [r4, r1, lsl #2]
   3d7ec:	cmp	r7, r5
   3d7f0:	ubfxeq	r7, r6, #8, #10
   3d7f4:	cmpeq	r7, r8
   3d7f8:	beq	3da7c <__assert_fail@plt+0x2b000>
   3d7fc:	sub	r7, r1, #2
   3d800:	cmp	r7, #1
   3d804:	blt	3d818 <__assert_fail@plt+0x2ad9c>
   3d808:	ldr	r6, [r3, r1, lsl #3]
   3d80c:	sub	r1, r1, #1
   3d810:	ands	r7, r6, #262144	; 0x40000
   3d814:	bne	3d7e8 <__assert_fail@plt+0x2ad6c>
   3d818:	ldr	r1, [r2, r5, lsl #3]!
   3d81c:	mov	r0, r9
   3d820:	mov	sl, ip
   3d824:	ldr	r2, [r2, #4]
   3d828:	bl	3d230 <__assert_fail@plt+0x2a7b4>
   3d82c:	mov	r4, r0
   3d830:	mov	r0, #12
   3d834:	cmn	r4, #1
   3d838:	str	r0, [sp, #12]
   3d83c:	beq	3dac4 <__assert_fail@plt+0x2b048>
   3d840:	ldr	r1, [r9]
   3d844:	movw	r0, #65280	; 0xff00
   3d848:	movw	r7, #255	; 0xff
   3d84c:	ldr	r6, [sp, #4]
   3d850:	movt	r0, #3
   3d854:	movt	r7, #65532	; 0xfffc
   3d858:	mov	r3, r0
   3d85c:	and	r0, r0, r8, lsl #8
   3d860:	add	r1, r1, r4, lsl #3
   3d864:	ldr	r2, [r1, #4]
   3d868:	and	r2, r2, r7
   3d86c:	orr	r0, r2, r0
   3d870:	str	r0, [r1, #4]
   3d874:	ldr	r0, [r9]
   3d878:	add	r1, r0, r5, lsl #3
   3d87c:	add	r0, r0, r4, lsl #3
   3d880:	ldr	r1, [r1, #4]
   3d884:	ldr	r2, [r0, #4]
   3d888:	and	r1, r1, r3
   3d88c:	orr	r1, r1, r2
   3d890:	str	r1, [r0, #4]
   3d894:	ldr	r0, [r9]
   3d898:	add	r0, r0, r4, lsl #3
   3d89c:	ldr	r1, [r0, #4]
   3d8a0:	orr	r1, r1, #262144	; 0x40000
   3d8a4:	str	r1, [r0, #4]
   3d8a8:	mov	r1, r4
   3d8ac:	ldr	r0, [r9, #16]
   3d8b0:	str	r5, [r0, r4, lsl #2]
   3d8b4:	ldr	r0, [r9, #20]
   3d8b8:	add	r0, r0, r6, lsl #2
   3d8bc:	bl	3dc60 <__assert_fail@plt+0x2b1e4>
   3d8c0:	cmp	r0, #0
   3d8c4:	beq	3dac4 <__assert_fail@plt+0x2b048>
   3d8c8:	ldr	r0, [sp, #16]
   3d8cc:	ldr	r3, [sp, #8]
   3d8d0:	mov	r1, r5
   3d8d4:	mov	r2, r4
   3d8d8:	str	r0, [sp]
   3d8dc:	mov	r0, r9
   3d8e0:	bl	3d620 <__assert_fail@plt+0x2aba4>
   3d8e4:	cmp	r0, #0
   3d8e8:	bne	3dac0 <__assert_fail@plt+0x2b044>
   3d8ec:	ldr	r1, [r9, #20]
   3d8f0:	ldr	r0, [r9]
   3d8f4:	add	r1, r1, sl, lsl #2
   3d8f8:	ldr	r1, [r1, #8]
   3d8fc:	ldr	r8, [r1, #4]
   3d900:	ldr	r1, [r0, r8, lsl #3]!
   3d904:	ldr	r2, [r0, #4]
   3d908:	mov	r0, r9
   3d90c:	bl	3d230 <__assert_fail@plt+0x2a7b4>
   3d910:	mov	sl, r0
   3d914:	mov	r0, #12
   3d918:	cmn	sl, #1
   3d91c:	str	r0, [sp, #12]
   3d920:	beq	3dac4 <__assert_fail@plt+0x2b048>
   3d924:	ldr	r1, [r9]
   3d928:	movw	r0, #65280	; 0xff00
   3d92c:	movw	r7, #255	; 0xff
   3d930:	movt	r0, #3
   3d934:	movt	r7, #65532	; 0xfffc
   3d938:	mov	r3, r0
   3d93c:	ldr	r0, [sp, #16]
   3d940:	add	r1, r1, sl, lsl #3
   3d944:	ldr	r2, [r1, #4]
   3d948:	and	r0, r3, r0, lsl #8
   3d94c:	and	r2, r2, r7
   3d950:	orr	r0, r2, r0
   3d954:	str	r0, [r1, #4]
   3d958:	ldr	r0, [r9]
   3d95c:	add	r1, r0, r8, lsl #3
   3d960:	add	r0, r0, sl, lsl #3
   3d964:	ldr	r1, [r1, #4]
   3d968:	ldr	r2, [r0, #4]
   3d96c:	and	r1, r1, r3
   3d970:	orr	r1, r1, r2
   3d974:	str	r1, [r0, #4]
   3d978:	ldr	r0, [r9]
   3d97c:	add	r0, r0, sl, lsl #3
   3d980:	ldr	r1, [r0, #4]
   3d984:	orr	r1, r1, #262144	; 0x40000
   3d988:	str	r1, [r0, #4]
   3d98c:	mov	r1, sl
   3d990:	ldr	r0, [r9, #16]
   3d994:	str	r8, [r0, sl, lsl #2]
   3d998:	ldr	r0, [r9, #20]
   3d99c:	add	r0, r0, r6, lsl #2
   3d9a0:	bl	3dc60 <__assert_fail@plt+0x2b1e4>
   3d9a4:	mov	r1, #0
   3d9a8:	cmp	r0, #0
   3d9ac:	bne	3d738 <__assert_fail@plt+0x2acbc>
   3d9b0:	b	3dac4 <__assert_fail@plt+0x2b048>
   3d9b4:	ldr	r1, [r2, r5, lsl #3]!
   3d9b8:	ldr	r4, [r3]
   3d9bc:	mov	r0, r9
   3d9c0:	ldr	r2, [r2, #4]
   3d9c4:	bl	3d230 <__assert_fail@plt+0x2a7b4>
   3d9c8:	mov	sl, r0
   3d9cc:	ubfx	r0, r4, #8, #10
   3d9d0:	mov	r1, #12
   3d9d4:	cmn	sl, #1
   3d9d8:	str	r1, [sp, #12]
   3d9dc:	beq	3dac4 <__assert_fail@plt+0x2b048>
   3d9e0:	ldr	r1, [sp, #16]
   3d9e4:	movw	r7, #255	; 0xff
   3d9e8:	movt	r7, #65532	; 0xfffc
   3d9ec:	orr	r1, r0, r1
   3d9f0:	movw	r0, #65280	; 0xff00
   3d9f4:	movt	r0, #3
   3d9f8:	str	r1, [sp, #16]
   3d9fc:	mov	r3, r0
   3da00:	and	r0, r0, r1, lsl #8
   3da04:	ldr	r1, [r9]
   3da08:	add	r1, r1, sl, lsl #3
   3da0c:	ldr	r2, [r1, #4]
   3da10:	and	r2, r2, r7
   3da14:	orr	r0, r2, r0
   3da18:	str	r0, [r1, #4]
   3da1c:	ldr	r0, [r9]
   3da20:	add	r1, r0, r5, lsl #3
   3da24:	add	r0, r0, sl, lsl #3
   3da28:	ldr	r1, [r1, #4]
   3da2c:	ldr	r2, [r0, #4]
   3da30:	and	r1, r1, r3
   3da34:	orr	r1, r1, r2
   3da38:	str	r1, [r0, #4]
   3da3c:	ldr	r0, [r9]
   3da40:	add	r0, r0, sl, lsl #3
   3da44:	ldr	r1, [r0, #4]
   3da48:	orr	r1, r1, #262144	; 0x40000
   3da4c:	str	r1, [r0, #4]
   3da50:	mov	r1, sl
   3da54:	ldr	r0, [r9, #16]
   3da58:	str	r5, [r0, sl, lsl #2]
   3da5c:	ldr	r0, [r9, #20]
   3da60:	add	r0, r0, r6, lsl #2
   3da64:	bl	3dc60 <__assert_fail@plt+0x2b1e4>
   3da68:	mov	r1, #0
   3da6c:	cmp	r0, #0
   3da70:	mov	r8, r5
   3da74:	bne	3d738 <__assert_fail@plt+0x2acbc>
   3da78:	b	3dac4 <__assert_fail@plt+0x2b048>
   3da7c:	sub	r1, r1, #1
   3da80:	mov	sl, ip
   3da84:	bl	3dc60 <__assert_fail@plt+0x2b1e4>
   3da88:	ldr	r6, [sp, #4]
   3da8c:	cmp	r0, #0
   3da90:	bne	3d8ec <__assert_fail@plt+0x2ae70>
   3da94:	mov	r0, #12
   3da98:	b	3dac0 <__assert_fail@plt+0x2b044>
   3da9c:	mov	r0, #12
   3daa0:	cmp	r1, #2
   3daa4:	str	r0, [sp, #12]
   3daa8:	beq	3dabc <__assert_fail@plt+0x2b040>
   3daac:	b	3dac4 <__assert_fail@plt+0x2b048>
   3dab0:	ldr	r0, [r9, #12]
   3dab4:	ldr	r1, [r0, r8, lsl #2]
   3dab8:	str	r1, [r0, sl, lsl #2]
   3dabc:	mov	r0, #0
   3dac0:	str	r0, [sp, #12]
   3dac4:	ldr	r0, [sp, #12]
   3dac8:	sub	sp, fp, #28
   3dacc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3dad0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3dad4:	add	fp, sp, #24
   3dad8:	mov	r8, #0
   3dadc:	cmp	r1, #0
   3dae0:	beq	3dc38 <__assert_fail@plt+0x2b1bc>
   3dae4:	mov	r5, r0
   3dae8:	ldr	r0, [r1, #4]
   3daec:	mov	r9, r1
   3daf0:	cmp	r0, #0
   3daf4:	beq	3dc38 <__assert_fail@plt+0x2b1bc>
   3daf8:	ldr	r1, [r5, #4]
   3dafc:	ldr	r2, [r5]
   3db00:	add	r3, r1, r0, lsl #1
   3db04:	cmp	r2, r3
   3db08:	bge	3db38 <__assert_fail@plt+0x2b0bc>
   3db0c:	add	r7, r2, r0
   3db10:	ldr	r0, [r5, #8]
   3db14:	lsl	r1, r7, #3
   3db18:	bl	33040 <__assert_fail@plt+0x205c4>
   3db1c:	cmp	r0, #0
   3db20:	beq	3dc54 <__assert_fail@plt+0x2b1d8>
   3db24:	str	r0, [r5, #8]
   3db28:	lsl	r0, r7, #1
   3db2c:	str	r0, [r5]
   3db30:	ldr	r1, [r5, #4]
   3db34:	ldr	r0, [r9, #4]
   3db38:	cmp	r1, #0
   3db3c:	beq	3dc40 <__assert_fail@plt+0x2b1c4>
   3db40:	add	r7, r1, r0, lsl #1
   3db44:	sub	r1, r1, #1
   3db48:	sub	r0, r0, #1
   3db4c:	orr	r2, r0, r1
   3db50:	cmp	r2, #0
   3db54:	blt	3dba0 <__assert_fail@plt+0x2b124>
   3db58:	ldr	r2, [r9, #8]
   3db5c:	ldr	r3, [r5, #8]
   3db60:	ldr	r4, [r2, r0, lsl #2]
   3db64:	ldr	r6, [r3, r1, lsl #2]
   3db68:	cmp	r6, r4
   3db6c:	bne	3db7c <__assert_fail@plt+0x2b100>
   3db70:	sub	r1, r1, #1
   3db74:	sub	r0, r0, #1
   3db78:	b	3db94 <__assert_fail@plt+0x2b118>
   3db7c:	bge	3db90 <__assert_fail@plt+0x2b114>
   3db80:	sub	r7, r7, #1
   3db84:	sub	r0, r0, #1
   3db88:	str	r4, [r3, r7, lsl #2]
   3db8c:	b	3db94 <__assert_fail@plt+0x2b118>
   3db90:	sub	r1, r1, #1
   3db94:	orr	r6, r0, r1
   3db98:	cmn	r6, #1
   3db9c:	bgt	3db60 <__assert_fail@plt+0x2b0e4>
   3dba0:	cmp	r0, #0
   3dba4:	blt	3dbc4 <__assert_fail@plt+0x2b148>
   3dba8:	add	r2, r0, #1
   3dbac:	ldr	r0, [r5, #8]
   3dbb0:	ldr	r1, [r9, #8]
   3dbb4:	sub	r7, r7, r2
   3dbb8:	lsl	r2, r2, #2
   3dbbc:	add	r0, r0, r7, lsl #2
   3dbc0:	bl	124b8 <memcpy@plt>
   3dbc4:	ldr	r0, [r5, #4]
   3dbc8:	ldr	r2, [r9, #4]
   3dbcc:	sub	r1, r0, #1
   3dbd0:	add	r3, r1, r2, lsl #1
   3dbd4:	sub	r2, r3, r7
   3dbd8:	adds	r2, r2, #1
   3dbdc:	beq	3dc38 <__assert_fail@plt+0x2b1bc>
   3dbe0:	add	r0, r2, r0
   3dbe4:	str	r0, [r5, #4]
   3dbe8:	ldr	r0, [r5, #8]
   3dbec:	ldr	r6, [r0, r1, lsl #2]
   3dbf0:	ldr	r5, [r0, r3, lsl #2]
   3dbf4:	cmp	r5, r6
   3dbf8:	ble	3dc14 <__assert_fail@plt+0x2b198>
   3dbfc:	add	r6, r2, r1
   3dc00:	subs	r2, r2, #1
   3dc04:	sub	r3, r3, #1
   3dc08:	str	r5, [r0, r6, lsl #2]
   3dc0c:	bne	3dbec <__assert_fail@plt+0x2b170>
   3dc10:	b	3dc38 <__assert_fail@plt+0x2b1bc>
   3dc14:	add	r5, r2, r1
   3dc18:	cmp	r1, #0
   3dc1c:	str	r6, [r0, r5, lsl #2]
   3dc20:	sub	r6, r1, #1
   3dc24:	mov	r1, r6
   3dc28:	bgt	3dbec <__assert_fail@plt+0x2b170>
   3dc2c:	add	r1, r0, r7, lsl #2
   3dc30:	lsl	r2, r2, #2
   3dc34:	bl	124b8 <memcpy@plt>
   3dc38:	mov	r0, r8
   3dc3c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3dc40:	str	r0, [r5, #4]
   3dc44:	ldr	r0, [r5, #8]
   3dc48:	ldr	r2, [r9, #4]
   3dc4c:	ldr	r1, [r9, #8]
   3dc50:	b	3dc30 <__assert_fail@plt+0x2b1b4>
   3dc54:	mov	r8, #12
   3dc58:	mov	r0, r8
   3dc5c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3dc60:	push	{r4, r5, r6, sl, fp, lr}
   3dc64:	add	fp, sp, #16
   3dc68:	ldr	r2, [r0]
   3dc6c:	mov	r5, r1
   3dc70:	mov	r4, r0
   3dc74:	cmp	r2, #0
   3dc78:	beq	3dca8 <__assert_fail@plt+0x2b22c>
   3dc7c:	ldr	r1, [r4, #4]
   3dc80:	cmp	r1, #0
   3dc84:	bne	3dce4 <__assert_fail@plt+0x2b268>
   3dc88:	ldr	r0, [r4, #8]
   3dc8c:	str	r5, [r0]
   3dc90:	ldr	r0, [r4, #4]
   3dc94:	mov	r6, #1
   3dc98:	add	r0, r0, #1
   3dc9c:	str	r0, [r4, #4]
   3dca0:	mov	r0, r6
   3dca4:	pop	{r4, r5, r6, sl, fp, pc}
   3dca8:	mov	r6, #1
   3dcac:	mov	r0, #4
   3dcb0:	str	r6, [r4]
   3dcb4:	str	r6, [r4, #4]
   3dcb8:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3dcbc:	cmp	r0, #0
   3dcc0:	str	r0, [r4, #8]
   3dcc4:	strne	r5, [r0]
   3dcc8:	movne	r0, r6
   3dccc:	popne	{r4, r5, r6, sl, fp, pc}
   3dcd0:	mov	r6, #0
   3dcd4:	mov	r0, r6
   3dcd8:	str	r6, [r4]
   3dcdc:	str	r6, [r4, #4]
   3dce0:	pop	{r4, r5, r6, sl, fp, pc}
   3dce4:	cmp	r2, r1
   3dce8:	bne	3dd14 <__assert_fail@plt+0x2b298>
   3dcec:	lsl	r0, r2, #1
   3dcf0:	lsl	r1, r2, #3
   3dcf4:	str	r0, [r4]
   3dcf8:	ldr	r0, [r4, #8]
   3dcfc:	bl	33040 <__assert_fail@plt+0x205c4>
   3dd00:	cmp	r0, #0
   3dd04:	beq	3dd90 <__assert_fail@plt+0x2b314>
   3dd08:	str	r0, [r4, #8]
   3dd0c:	ldr	r1, [r4, #4]
   3dd10:	b	3dd18 <__assert_fail@plt+0x2b29c>
   3dd14:	ldr	r0, [r4, #8]
   3dd18:	ldr	r2, [r0]
   3dd1c:	cmp	r2, r5
   3dd20:	ble	3dd58 <__assert_fail@plt+0x2b2dc>
   3dd24:	cmp	r1, #1
   3dd28:	blt	3dd88 <__assert_fail@plt+0x2b30c>
   3dd2c:	add	r2, r0, r1, lsl #2
   3dd30:	add	r1, r1, #1
   3dd34:	mov	r3, r2
   3dd38:	ldr	r6, [r3, #-4]!
   3dd3c:	sub	r1, r1, #1
   3dd40:	cmp	r1, #1
   3dd44:	str	r6, [r2]
   3dd48:	mov	r2, r3
   3dd4c:	bgt	3dd38 <__assert_fail@plt+0x2b2bc>
   3dd50:	sub	r1, r1, #1
   3dd54:	b	3dd88 <__assert_fail@plt+0x2b30c>
   3dd58:	add	r2, r0, r1, lsl #2
   3dd5c:	ldr	r3, [r2, #-4]
   3dd60:	cmp	r3, r5
   3dd64:	ble	3dd88 <__assert_fail@plt+0x2b30c>
   3dd68:	sub	r1, r1, #2
   3dd6c:	str	r3, [r2]
   3dd70:	sub	r1, r1, #1
   3dd74:	ldr	r3, [r2, #-8]
   3dd78:	sub	r2, r2, #4
   3dd7c:	cmp	r3, r5
   3dd80:	bgt	3dd6c <__assert_fail@plt+0x2b2f0>
   3dd84:	add	r1, r1, #2
   3dd88:	str	r5, [r0, r1, lsl #2]
   3dd8c:	b	3dc90 <__assert_fail@plt+0x2b214>
   3dd90:	mov	r6, #0
   3dd94:	mov	r0, r6
   3dd98:	pop	{r4, r5, r6, sl, fp, pc}
   3dd9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3dda0:	add	fp, sp, #28
   3dda4:	sub	sp, sp, #28
   3dda8:	ldr	lr, [r2, #4]
   3ddac:	str	r2, [sp, #24]
   3ddb0:	cmp	lr, #0
   3ddb4:	beq	3df50 <__assert_fail@plt+0x2b4d4>
   3ddb8:	mov	r9, r3
   3ddbc:	add	r7, lr, r3
   3ddc0:	cmp	lr, #1
   3ddc4:	str	r0, [sp, #4]
   3ddc8:	blt	3de3c <__assert_fail@plt+0x2b3c0>
   3ddcc:	ldr	r0, [sp, #24]
   3ddd0:	mov	r2, #0
   3ddd4:	cmp	lr, #4
   3ddd8:	ldr	r5, [r0, #8]
   3dddc:	bcc	3de24 <__assert_fail@plt+0x2b3a8>
   3dde0:	mov	r0, #0
   3dde4:	bic	r2, lr, #3
   3dde8:	vdup.32	q8, r0
   3ddec:	mov	r3, r2
   3ddf0:	mov	r0, r5
   3ddf4:	vmov.32	d16[0], r7
   3ddf8:	vld1.32	{d18-d19}, [r0]!
   3ddfc:	subs	r3, r3, #4
   3de00:	vadd.i32	q8, q9, q8
   3de04:	bne	3ddf8 <__assert_fail@plt+0x2b37c>
   3de08:	vext.8	q9, q8, q8, #8
   3de0c:	cmp	lr, r2
   3de10:	vadd.i32	q8, q8, q9
   3de14:	vdup.32	q9, d16[1]
   3de18:	vadd.i32	q8, q8, q9
   3de1c:	vmov.32	r7, d16[0]
   3de20:	beq	3de3c <__assert_fail@plt+0x2b3c0>
   3de24:	add	r3, r5, r2, lsl #2
   3de28:	sub	r2, lr, r2
   3de2c:	ldr	r0, [r3], #4
   3de30:	subs	r2, r2, #1
   3de34:	add	r7, r0, r7
   3de38:	bne	3de2c <__assert_fail@plt+0x2b3b0>
   3de3c:	ldr	r0, [r1, #32]
   3de40:	mov	sl, r1
   3de44:	ldr	r1, [r1, #68]	; 0x44
   3de48:	and	r1, r1, r7
   3de4c:	add	r2, r1, r1, lsl #1
   3de50:	ldr	r1, [r0, r2, lsl #2]
   3de54:	cmp	r1, #1
   3de58:	blt	3def0 <__assert_fail@plt+0x2b474>
   3de5c:	add	r0, r0, r2, lsl #2
   3de60:	sub	ip, lr, #1
   3de64:	mov	r3, #0
   3de68:	ldr	r8, [r0, #8]
   3de6c:	b	3deb0 <__assert_fail@plt+0x2b434>
   3de70:	ldr	r0, [r5, #4]
   3de74:	cmp	r0, lr
   3de78:	bne	3dee4 <__assert_fail@plt+0x2b468>
   3de7c:	mov	r0, ip
   3de80:	add	r6, r0, #1
   3de84:	cmp	r6, #1
   3de88:	blt	3e194 <__assert_fail@plt+0x2b718>
   3de8c:	ldr	r2, [sp, #24]
   3de90:	ldr	r6, [r2, #8]
   3de94:	ldr	r2, [r5, #8]
   3de98:	ldr	r6, [r6, r0, lsl #2]
   3de9c:	ldr	r2, [r2, r0, lsl #2]
   3dea0:	sub	r0, r0, #1
   3dea4:	cmp	r2, r6
   3dea8:	beq	3de80 <__assert_fail@plt+0x2b404>
   3deac:	b	3dee4 <__assert_fail@plt+0x2b468>
   3deb0:	ldr	r4, [r8, r3, lsl #2]
   3deb4:	ldr	r0, [r4]
   3deb8:	cmp	r0, r7
   3debc:	bne	3dee4 <__assert_fail@plt+0x2b468>
   3dec0:	ldrb	r0, [r4, #52]	; 0x34
   3dec4:	and	r0, r0, #15
   3dec8:	cmp	r0, r9
   3decc:	bne	3dee4 <__assert_fail@plt+0x2b468>
   3ded0:	ldr	r0, [sp, #24]
   3ded4:	cmp	r0, #0
   3ded8:	ldrne	r5, [r4, #40]	; 0x28
   3dedc:	cmpne	r5, #0
   3dee0:	bne	3de70 <__assert_fail@plt+0x2b3f4>
   3dee4:	add	r3, r3, #1
   3dee8:	cmp	r3, r1
   3deec:	blt	3deb0 <__assert_fail@plt+0x2b434>
   3def0:	mov	r0, #56	; 0x38
   3def4:	mov	r1, #1
   3def8:	bl	2f760 <__assert_fail@plt+0x1cce4>
   3defc:	cmp	r0, #0
   3df00:	beq	3e1b4 <__assert_fail@plt+0x2b738>
   3df04:	mov	r4, r0
   3df08:	ldr	r0, [sp, #24]
   3df0c:	add	r6, r4, #4
   3df10:	ldr	r8, [r0, #4]
   3df14:	cmp	r8, #1
   3df18:	str	r8, [r4, #8]
   3df1c:	blt	3df5c <__assert_fail@plt+0x2b4e0>
   3df20:	lsl	r0, r8, #2
   3df24:	str	r8, [r4, #4]
   3df28:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3df2c:	cmp	r0, #0
   3df30:	str	r0, [r4, #12]
   3df34:	beq	3e1c8 <__assert_fail@plt+0x2b74c>
   3df38:	ldr	r1, [sp, #24]
   3df3c:	ldr	r8, [r1, #4]
   3df40:	ldr	r1, [r1, #8]
   3df44:	lsl	r2, r8, #2
   3df48:	bl	124b8 <memcpy@plt>
   3df4c:	b	3df6c <__assert_fail@plt+0x2b4f0>
   3df50:	mov	r4, #0
   3df54:	str	r4, [r0]
   3df58:	b	3e194 <__assert_fail@plt+0x2b718>
   3df5c:	mov	r0, #0
   3df60:	str	r0, [r6]
   3df64:	str	r0, [r6, #4]
   3df68:	str	r0, [r6, #8]
   3df6c:	str	r6, [r4, #40]	; 0x28
   3df70:	and	r0, r9, #15
   3df74:	cmp	r8, #1
   3df78:	ldrb	r1, [r4, #52]	; 0x34
   3df7c:	and	r1, r1, #240	; 0xf0
   3df80:	orr	r0, r1, r0
   3df84:	strb	r0, [r4, #52]	; 0x34
   3df88:	mov	r0, sl
   3df8c:	blt	3e180 <__assert_fail@plt+0x2b704>
   3df90:	movw	lr, #65280	; 0xff00
   3df94:	and	r1, r9, #4
   3df98:	and	ip, r9, #1
   3df9c:	mov	r5, #0
   3dfa0:	str	r0, [sp, #16]
   3dfa4:	str	r1, [sp]
   3dfa8:	and	r1, r9, #2
   3dfac:	movt	lr, #3
   3dfb0:	mov	r9, #0
   3dfb4:	str	ip, [sp, #12]
   3dfb8:	str	r1, [sp, #8]
   3dfbc:	add	r1, lr, #255	; 0xff
   3dfc0:	str	r1, [sp, #20]
   3dfc4:	b	3e004 <__assert_fail@plt+0x2b588>
   3dfc8:	sub	r2, r2, #1
   3dfcc:	cmp	r2, r1
   3dfd0:	str	r2, [r4, #8]
   3dfd4:	ble	3e170 <__assert_fail@plt+0x2b6f4>
   3dfd8:	ldr	r2, [r4, #12]
   3dfdc:	add	r3, r2, r1, lsl #2
   3dfe0:	ldr	r3, [r3, #4]
   3dfe4:	str	r3, [r2, r1, lsl #2]
   3dfe8:	add	r1, r1, #1
   3dfec:	ldr	r3, [r4, #8]
   3dff0:	cmp	r1, r3
   3dff4:	blt	3dfdc <__assert_fail@plt+0x2b560>
   3dff8:	ldr	r1, [sp, #24]
   3dffc:	ldr	r8, [r1, #4]
   3e000:	b	3e170 <__assert_fail@plt+0x2b6f4>
   3e004:	ldr	r1, [sp, #24]
   3e008:	ldr	r2, [r0]
   3e00c:	ldr	r1, [r1, #8]
   3e010:	ldr	r1, [r1, r9, lsl #2]
   3e014:	add	r1, r2, r1, lsl #3
   3e018:	ldr	sl, [r1, #4]
   3e01c:	ldr	r1, [sp, #20]
   3e020:	and	r1, sl, r1
   3e024:	cmp	r1, #1
   3e028:	beq	3e174 <__assert_fail@plt+0x2b6f8>
   3e02c:	ldrb	r3, [r4, #52]	; 0x34
   3e030:	mov	r2, #32
   3e034:	and	r1, sl, lr
   3e038:	and	r2, r2, sl, lsr #15
   3e03c:	orr	r2, r3, r2
   3e040:	uxtb	r3, sl
   3e044:	cmp	r3, #2
   3e048:	strb	r2, [r4, #52]	; 0x34
   3e04c:	beq	3e060 <__assert_fail@plt+0x2b5e4>
   3e050:	cmp	r3, #4
   3e054:	bne	3e06c <__assert_fail@plt+0x2b5f0>
   3e058:	mov	r3, #64	; 0x40
   3e05c:	b	3e064 <__assert_fail@plt+0x2b5e8>
   3e060:	mov	r3, #16
   3e064:	orr	r2, r2, r3
   3e068:	strb	r2, [r4, #52]	; 0x34
   3e06c:	cmp	r1, #0
   3e070:	beq	3e174 <__assert_fail@plt+0x2b6f8>
   3e074:	ldr	r1, [r4, #40]	; 0x28
   3e078:	cmp	r1, r6
   3e07c:	beq	3e094 <__assert_fail@plt+0x2b618>
   3e080:	cmp	ip, #0
   3e084:	bne	3e128 <__assert_fail@plt+0x2b6ac>
   3e088:	ands	r1, sl, #256	; 0x100
   3e08c:	bne	3e15c <__assert_fail@plt+0x2b6e0>
   3e090:	b	3e128 <__assert_fail@plt+0x2b6ac>
   3e094:	mov	r0, #12
   3e098:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3e09c:	cmp	r0, #0
   3e0a0:	beq	3e1ac <__assert_fail@plt+0x2b730>
   3e0a4:	mov	r5, r0
   3e0a8:	str	r0, [r4, #40]	; 0x28
   3e0ac:	ldr	r0, [sp, #24]
   3e0b0:	ldr	r8, [r0, #4]
   3e0b4:	cmp	r8, #1
   3e0b8:	str	r8, [r5, #4]
   3e0bc:	blt	3e0f0 <__assert_fail@plt+0x2b674>
   3e0c0:	lsl	r0, r8, #2
   3e0c4:	str	r8, [r5]
   3e0c8:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3e0cc:	cmp	r0, #0
   3e0d0:	str	r0, [r5, #8]
   3e0d4:	beq	3e1a0 <__assert_fail@plt+0x2b724>
   3e0d8:	ldr	r1, [sp, #24]
   3e0dc:	ldr	r8, [r1, #4]
   3e0e0:	ldr	r1, [r1, #8]
   3e0e4:	lsl	r2, r8, #2
   3e0e8:	bl	124b8 <memcpy@plt>
   3e0ec:	b	3e100 <__assert_fail@plt+0x2b684>
   3e0f0:	mov	r0, #0
   3e0f4:	str	r0, [r5]
   3e0f8:	str	r0, [r5, #4]
   3e0fc:	str	r0, [r5, #8]
   3e100:	ldrb	r0, [r4, #52]	; 0x34
   3e104:	ldr	ip, [sp, #12]
   3e108:	movw	lr, #65280	; 0xff00
   3e10c:	mov	r5, #0
   3e110:	movt	lr, #3
   3e114:	orr	r0, r0, #128	; 0x80
   3e118:	strb	r0, [r4, #52]	; 0x34
   3e11c:	ldr	r0, [sp, #16]
   3e120:	cmp	ip, #0
   3e124:	beq	3e088 <__assert_fail@plt+0x2b60c>
   3e128:	cmp	ip, #0
   3e12c:	andsne	r1, sl, #512	; 0x200
   3e130:	bne	3e15c <__assert_fail@plt+0x2b6e0>
   3e134:	ldr	r1, [sp, #8]
   3e138:	cmp	r1, #0
   3e13c:	bne	3e148 <__assert_fail@plt+0x2b6cc>
   3e140:	ands	r1, sl, #4096	; 0x1000
   3e144:	bne	3e15c <__assert_fail@plt+0x2b6e0>
   3e148:	ldr	r1, [sp]
   3e14c:	cmp	r1, #0
   3e150:	bne	3e174 <__assert_fail@plt+0x2b6f8>
   3e154:	ands	r1, sl, #16384	; 0x4000
   3e158:	beq	3e174 <__assert_fail@plt+0x2b6f8>
   3e15c:	sub	r1, r9, r5
   3e160:	cmp	r1, #0
   3e164:	ldrge	r2, [r4, #8]
   3e168:	cmpge	r2, r1
   3e16c:	bgt	3dfc8 <__assert_fail@plt+0x2b54c>
   3e170:	add	r5, r5, #1
   3e174:	add	r9, r9, #1
   3e178:	cmp	r9, r8
   3e17c:	blt	3e004 <__assert_fail@plt+0x2b588>
   3e180:	mov	r1, r4
   3e184:	mov	r2, r7
   3e188:	bl	3e1e0 <__assert_fail@plt+0x2b764>
   3e18c:	cmp	r0, #0
   3e190:	bne	3e1ac <__assert_fail@plt+0x2b730>
   3e194:	mov	r0, r4
   3e198:	sub	sp, fp, #28
   3e19c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e1a0:	mov	r0, #0
   3e1a4:	str	r0, [r5]
   3e1a8:	str	r0, [r5, #4]
   3e1ac:	mov	r0, r4
   3e1b0:	bl	381fc <__assert_fail@plt+0x25780>
   3e1b4:	ldr	r1, [sp, #4]
   3e1b8:	mov	r0, #12
   3e1bc:	mov	r4, #0
   3e1c0:	str	r0, [r1]
   3e1c4:	b	3e194 <__assert_fail@plt+0x2b718>
   3e1c8:	mov	r0, #0
   3e1cc:	str	r0, [r4, #4]
   3e1d0:	str	r0, [r4, #8]
   3e1d4:	mov	r0, r4
   3e1d8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3e1dc:	b	3e1b4 <__assert_fail@plt+0x2b738>
   3e1e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e1e4:	add	fp, sp, #28
   3e1e8:	sub	sp, sp, #4
   3e1ec:	str	r2, [r1]
   3e1f0:	mov	r4, r1
   3e1f4:	mov	r7, r0
   3e1f8:	mov	r0, #0
   3e1fc:	mov	r9, r2
   3e200:	ldr	r1, [r1, #8]
   3e204:	str	r1, [r4, #16]
   3e208:	str	r0, [r4, #20]
   3e20c:	lsl	r0, r1, #2
   3e210:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3e214:	mov	r8, #12
   3e218:	cmp	r0, #0
   3e21c:	str	r0, [r4, #24]
   3e220:	beq	3e2e0 <__assert_fail@plt+0x2b864>
   3e224:	ldr	r1, [r4, #8]
   3e228:	cmp	r1, #1
   3e22c:	blt	3e2a0 <__assert_fail@plt+0x2b824>
   3e230:	mov	r5, #0
   3e234:	mov	sl, #2
   3e238:	ldr	r2, [r4, #12]
   3e23c:	ldr	r6, [r2, r5, lsl #2]
   3e240:	ldr	r2, [r7]
   3e244:	add	r2, r2, r6, lsl #3
   3e248:	ldrb	r2, [r2, #4]
   3e24c:	tst	r2, #8
   3e250:	bne	3e294 <__assert_fail@plt+0x2b818>
   3e254:	ldr	r2, [r4, #16]
   3e258:	ldr	r1, [r4, #20]
   3e25c:	cmp	r2, r1
   3e260:	bne	3e284 <__assert_fail@plt+0x2b808>
   3e264:	add	r1, sl, r2, lsl #1
   3e268:	str	r1, [r4, #16]
   3e26c:	lsl	r1, r1, #2
   3e270:	bl	33040 <__assert_fail@plt+0x205c4>
   3e274:	cmp	r0, #0
   3e278:	beq	3e2e0 <__assert_fail@plt+0x2b864>
   3e27c:	str	r0, [r4, #24]
   3e280:	ldr	r1, [r4, #20]
   3e284:	add	r2, r1, #1
   3e288:	str	r2, [r4, #20]
   3e28c:	str	r6, [r0, r1, lsl #2]
   3e290:	ldr	r1, [r4, #8]
   3e294:	add	r5, r5, #1
   3e298:	cmp	r5, r1
   3e29c:	blt	3e238 <__assert_fail@plt+0x2b7bc>
   3e2a0:	ldr	r1, [r7, #68]	; 0x44
   3e2a4:	ldr	r0, [r7, #32]
   3e2a8:	and	r1, r1, r9
   3e2ac:	mov	r5, r0
   3e2b0:	add	r2, r1, r1, lsl #1
   3e2b4:	ldr	r1, [r5, r2, lsl #2]!
   3e2b8:	mov	r6, r5
   3e2bc:	ldr	r3, [r6, #4]!
   3e2c0:	cmp	r3, r1
   3e2c4:	ble	3e2ec <__assert_fail@plt+0x2b870>
   3e2c8:	add	r0, r0, r2, lsl #2
   3e2cc:	ldr	r0, [r0, #8]
   3e2d0:	add	r2, r1, #1
   3e2d4:	mov	r8, #0
   3e2d8:	str	r2, [r5]
   3e2dc:	str	r4, [r0, r1, lsl #2]
   3e2e0:	mov	r0, r8
   3e2e4:	sub	sp, fp, #28
   3e2e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e2ec:	add	r7, r0, r2, lsl #2
   3e2f0:	mov	r2, #2
   3e2f4:	ldr	r0, [r7, #8]!
   3e2f8:	add	r9, r2, r1, lsl #1
   3e2fc:	lsl	r1, r9, #2
   3e300:	bl	33040 <__assert_fail@plt+0x205c4>
   3e304:	cmp	r0, #0
   3e308:	beq	3e2e0 <__assert_fail@plt+0x2b864>
   3e30c:	str	r0, [r7]
   3e310:	str	r9, [r6]
   3e314:	ldr	r1, [r5]
   3e318:	b	3e2d0 <__assert_fail@plt+0x2b854>
   3e31c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e320:	add	fp, sp, #28
   3e324:	sub	sp, sp, #36	; 0x24
   3e328:	mov	r4, r0
   3e32c:	ldr	r0, [r0, #24]
   3e330:	mov	r6, r2
   3e334:	mov	r9, r1
   3e338:	cmp	r0, r1
   3e33c:	ble	3e53c <__assert_fail@plt+0x2bac0>
   3e340:	ldr	r0, [r4, #80]	; 0x50
   3e344:	mov	r1, #4
   3e348:	mov	r5, r9
   3e34c:	cmp	r0, #2
   3e350:	movge	r0, #0
   3e354:	strge	r0, [r4, #16]
   3e358:	strge	r0, [r4, #20]
   3e35c:	mov	r0, #0
   3e360:	tst	r6, #1
   3e364:	str	r0, [r4, #24]
   3e368:	str	r0, [r4, #28]
   3e36c:	str	r0, [r4, #32]
   3e370:	strb	r0, [r4, #76]	; 0x4c
   3e374:	movweq	r1, #6
   3e378:	ldr	r2, [r4, #44]	; 0x2c
   3e37c:	ldr	r3, [r4, #52]	; 0x34
   3e380:	str	r2, [r4, #48]	; 0x30
   3e384:	str	r3, [r4, #56]	; 0x38
   3e388:	str	r1, [r4, #60]	; 0x3c
   3e38c:	ldrb	r1, [r4, #75]	; 0x4b
   3e390:	cmp	r1, #0
   3e394:	ldreq	r1, [r4]
   3e398:	streq	r1, [r4, #4]
   3e39c:	cmp	r5, #0
   3e3a0:	beq	3e4c4 <__assert_fail@plt+0x2ba48>
   3e3a4:	ldr	r1, [r4, #32]
   3e3a8:	cmp	r5, r1
   3e3ac:	bge	3e54c <__assert_fail@plt+0x2bad0>
   3e3b0:	ldrb	r0, [r4, #76]	; 0x4c
   3e3b4:	cmp	r0, #0
   3e3b8:	bne	3e64c <__assert_fail@plt+0x2bbd0>
   3e3bc:	cmp	r5, #0
   3e3c0:	ble	3e404 <__assert_fail@plt+0x2b988>
   3e3c4:	ldr	r1, [r4, #48]	; 0x30
   3e3c8:	sub	r0, r5, #1
   3e3cc:	cmp	r1, r0
   3e3d0:	beq	3e704 <__assert_fail@plt+0x2bc88>
   3e3d4:	ldr	r1, [r4, #80]	; 0x50
   3e3d8:	cmp	r1, #2
   3e3dc:	blt	3e40c <__assert_fail@plt+0x2b990>
   3e3e0:	ldr	r0, [r4, #8]
   3e3e4:	mov	r1, r5
   3e3e8:	sub	r0, r0, #4
   3e3ec:	ldr	r6, [r0, r1, lsl #2]
   3e3f0:	cmn	r6, #1
   3e3f4:	bne	3e440 <__assert_fail@plt+0x2b9c4>
   3e3f8:	sub	r1, r1, #1
   3e3fc:	cmp	r1, #0
   3e400:	bgt	3e3ec <__assert_fail@plt+0x2b970>
   3e404:	ldr	r1, [r4, #60]	; 0x3c
   3e408:	b	3e464 <__assert_fail@plt+0x2b9e8>
   3e40c:	ldr	r1, [r4, #4]
   3e410:	ldr	r2, [r4, #68]	; 0x44
   3e414:	ldrb	r0, [r1, r0]
   3e418:	ubfx	r1, r0, #5, #3
   3e41c:	and	r3, r0, #31
   3e420:	ldr	r2, [r2, r1, lsl #2]
   3e424:	mov	r1, #1
   3e428:	tst	r2, r1, lsl r3
   3e42c:	bne	3e464 <__assert_fail@plt+0x2b9e8>
   3e430:	mov	r1, #0
   3e434:	cmp	r0, #10
   3e438:	beq	3e458 <__assert_fail@plt+0x2b9dc>
   3e43c:	b	3e464 <__assert_fail@plt+0x2b9e8>
   3e440:	ldrb	r0, [r4, #78]	; 0x4e
   3e444:	cmp	r0, #0
   3e448:	bne	3e9c0 <__assert_fail@plt+0x2bf44>
   3e44c:	mov	r1, #0
   3e450:	cmp	r6, #10
   3e454:	bne	3e464 <__assert_fail@plt+0x2b9e8>
   3e458:	ldrb	r1, [r4, #77]	; 0x4d
   3e45c:	cmp	r1, #0
   3e460:	movwne	r1, #2
   3e464:	str	r1, [r4, #60]	; 0x3c
   3e468:	ldr	r0, [r4, #80]	; 0x50
   3e46c:	cmp	r0, #2
   3e470:	blt	3e48c <__assert_fail@plt+0x2ba10>
   3e474:	ldr	r2, [r4, #28]
   3e478:	ldr	r0, [r4, #8]
   3e47c:	sub	r2, r2, r5
   3e480:	add	r1, r0, r5, lsl #2
   3e484:	lsl	r2, r2, #2
   3e488:	bl	1244c <memmove@plt>
   3e48c:	ldrb	r0, [r4, #75]	; 0x4b
   3e490:	cmp	r0, #0
   3e494:	bne	3e6ec <__assert_fail@plt+0x2bc70>
   3e498:	ldr	r0, [r4, #28]
   3e49c:	ldr	r1, [r4, #32]
   3e4a0:	sub	r0, r0, r5
   3e4a4:	sub	r1, r1, r5
   3e4a8:	str	r0, [r4, #28]
   3e4ac:	str	r1, [r4, #32]
   3e4b0:	ldrb	r0, [r4, #75]	; 0x4b
   3e4b4:	cmp	r0, #0
   3e4b8:	ldreq	r0, [r4, #4]
   3e4bc:	addeq	r0, r0, r5
   3e4c0:	streq	r0, [r4, #4]
   3e4c4:	str	r9, [r4, #24]
   3e4c8:	ldr	r0, [r4, #48]	; 0x30
   3e4cc:	ldr	r3, [r4, #80]	; 0x50
   3e4d0:	ldr	r2, [r4, #56]	; 0x38
   3e4d4:	sub	r1, r0, r5
   3e4d8:	cmp	r3, #2
   3e4dc:	sub	r0, r2, r5
   3e4e0:	str	r1, [r4, #48]	; 0x30
   3e4e4:	str	r0, [r4, #56]	; 0x38
   3e4e8:	blt	3e510 <__assert_fail@plt+0x2ba94>
   3e4ec:	ldrb	r0, [r4, #72]	; 0x48
   3e4f0:	cmp	r0, #0
   3e4f4:	beq	3e524 <__assert_fail@plt+0x2baa8>
   3e4f8:	mov	r0, r4
   3e4fc:	bl	38260 <__assert_fail@plt+0x257e4>
   3e500:	cmp	r0, #0
   3e504:	beq	3e52c <__assert_fail@plt+0x2bab0>
   3e508:	sub	sp, fp, #28
   3e50c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e510:	ldrb	r0, [r4, #75]	; 0x4b
   3e514:	cmp	r0, #0
   3e518:	bne	3e710 <__assert_fail@plt+0x2bc94>
   3e51c:	str	r1, [r4, #28]
   3e520:	b	3e52c <__assert_fail@plt+0x2bab0>
   3e524:	mov	r0, r4
   3e528:	bl	38920 <__assert_fail@plt+0x25ea4>
   3e52c:	mov	r0, #0
   3e530:	str	r0, [r4, #40]	; 0x28
   3e534:	sub	sp, fp, #28
   3e538:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e53c:	sub	r5, r9, r0
   3e540:	cmp	r5, #0
   3e544:	bne	3e3a4 <__assert_fail@plt+0x2b928>
   3e548:	b	3e4c4 <__assert_fail@plt+0x2ba48>
   3e54c:	ldrb	r2, [r4, #76]	; 0x4c
   3e550:	ldr	lr, [r4, #28]
   3e554:	cmp	r2, #0
   3e558:	bne	3ebe0 <__assert_fail@plt+0x2c164>
   3e55c:	mov	r2, #0
   3e560:	str	r2, [r4, #28]
   3e564:	ldr	r3, [r4, #80]	; 0x50
   3e568:	cmp	r3, #2
   3e56c:	blt	3e794 <__assert_fail@plt+0x2bd18>
   3e570:	ldrb	r2, [r4, #73]	; 0x49
   3e574:	cmp	r2, #0
   3e578:	beq	3e634 <__assert_fail@plt+0x2bbb8>
   3e57c:	ldr	r7, [r4]
   3e580:	sub	r3, r5, r3
   3e584:	add	ip, r7, r0
   3e588:	add	r3, ip, r3
   3e58c:	add	r8, ip, r5
   3e590:	cmp	r3, r7
   3e594:	movcc	r3, r7
   3e598:	mov	r7, r8
   3e59c:	sub	r7, r7, #1
   3e5a0:	cmp	r7, r3
   3e5a4:	bcc	3e634 <__assert_fail@plt+0x2bbb8>
   3e5a8:	ldrb	r2, [r7]
   3e5ac:	and	r2, r2, #192	; 0xc0
   3e5b0:	cmp	r2, #128	; 0x80
   3e5b4:	beq	3e59c <__assert_fail@plt+0x2bb20>
   3e5b8:	ldr	r0, [r4, #48]	; 0x30
   3e5bc:	mov	sl, lr
   3e5c0:	mov	r1, r7
   3e5c4:	add	r3, ip, r0
   3e5c8:	ldr	r0, [r4, #64]	; 0x40
   3e5cc:	sub	r2, r3, r7
   3e5d0:	cmp	r0, #0
   3e5d4:	bne	3ecb8 <__assert_fail@plt+0x2c23c>
   3e5d8:	mov	r0, #0
   3e5dc:	add	r3, sp, #24
   3e5e0:	str	r0, [sp, #28]
   3e5e4:	str	r0, [sp, #24]
   3e5e8:	add	r0, sp, #20
   3e5ec:	bl	3236c <__assert_fail@plt+0x1f8f0>
   3e5f0:	sub	r1, r8, r7
   3e5f4:	mvn	r7, #0
   3e5f8:	cmp	r0, r1
   3e5fc:	bcc	3e620 <__assert_fail@plt+0x2bba4>
   3e600:	cmn	r0, #3
   3e604:	bhi	3e620 <__assert_fail@plt+0x2bba4>
   3e608:	mov	r2, #0
   3e60c:	sub	r0, r0, r1
   3e610:	str	r2, [r4, #16]
   3e614:	str	r2, [r4, #20]
   3e618:	str	r0, [r4, #28]
   3e61c:	ldr	r7, [sp, #20]
   3e620:	cmn	r7, #1
   3e624:	bne	3eb04 <__assert_fail@plt+0x2c088>
   3e628:	ldr	r0, [r4, #24]
   3e62c:	ldr	r1, [r4, #32]
   3e630:	mov	lr, sl
   3e634:	add	r8, r1, r0
   3e638:	cmp	r8, r9
   3e63c:	bge	3e9e0 <__assert_fail@plt+0x2bf64>
   3e640:	add	sl, r4, #16
   3e644:	str	lr, [sp]
   3e648:	b	3eaa4 <__assert_fail@plt+0x2c028>
   3e64c:	ldr	ip, [r4, #12]
   3e650:	ldr	r0, [r4, #28]
   3e654:	mov	r1, #0
   3e658:	add	r2, r1, r0
   3e65c:	add	r2, r2, r2, lsr #31
   3e660:	asr	r7, r2, #1
   3e664:	ldr	r3, [ip, r7, lsl #2]
   3e668:	mov	r2, r7
   3e66c:	cmp	r3, r5
   3e670:	bgt	3e680 <__assert_fail@plt+0x2bc04>
   3e674:	bge	3e68c <__assert_fail@plt+0x2bc10>
   3e678:	add	r1, r7, #1
   3e67c:	mov	r2, r0
   3e680:	cmp	r1, r2
   3e684:	mov	r0, r2
   3e688:	blt	3e658 <__assert_fail@plt+0x2bbdc>
   3e68c:	mov	r8, #0
   3e690:	cmp	r3, r5
   3e694:	movwlt	r8, #1
   3e698:	add	sl, r7, r8
   3e69c:	cmp	sl, #0
   3e6a0:	ble	3e6e4 <__assert_fail@plt+0x2bc68>
   3e6a4:	ldr	r1, [r4, #48]	; 0x30
   3e6a8:	sub	r0, sl, #1
   3e6ac:	cmp	r1, r0
   3e6b0:	beq	3ec08 <__assert_fail@plt+0x2c18c>
   3e6b4:	ldr	r1, [r4, #80]	; 0x50
   3e6b8:	cmp	r1, #2
   3e6bc:	blt	3e7f0 <__assert_fail@plt+0x2bd74>
   3e6c0:	ldr	r0, [r4, #8]
   3e6c4:	mov	r1, sl
   3e6c8:	sub	r0, r0, #4
   3e6cc:	ldr	r6, [r0, r1, lsl #2]
   3e6d0:	cmn	r6, #1
   3e6d4:	bne	3e824 <__assert_fail@plt+0x2bda8>
   3e6d8:	sub	r1, r1, #1
   3e6dc:	cmp	r1, #0
   3e6e0:	bgt	3e6cc <__assert_fail@plt+0x2bc50>
   3e6e4:	ldr	r1, [r4, #60]	; 0x3c
   3e6e8:	b	3e848 <__assert_fail@plt+0x2bdcc>
   3e6ec:	ldr	r2, [r4, #28]
   3e6f0:	ldr	r0, [r4, #4]
   3e6f4:	add	r1, r0, r5
   3e6f8:	sub	r2, r2, r5
   3e6fc:	bl	1244c <memmove@plt>
   3e700:	b	3e498 <__assert_fail@plt+0x2ba1c>
   3e704:	and	r0, r6, #2
   3e708:	eor	r1, r0, #10
   3e70c:	b	3e464 <__assert_fail@plt+0x2b9e8>
   3e710:	ldrb	r0, [r4, #72]	; 0x48
   3e714:	cmp	r0, #0
   3e718:	beq	3e9ec <__assert_fail@plt+0x2bf70>
   3e71c:	ldr	r6, [r4, #36]	; 0x24
   3e720:	ldr	r5, [r4, #28]
   3e724:	cmp	r6, r1
   3e728:	movgt	r6, r1
   3e72c:	cmp	r5, r6
   3e730:	blt	3e73c <__assert_fail@plt+0x2bcc0>
   3e734:	b	3e788 <__assert_fail@plt+0x2bd0c>
   3e738:	ldr	r9, [r4, #24]
   3e73c:	ldr	r1, [r4]
   3e740:	ldr	r0, [r4, #64]	; 0x40
   3e744:	add	r1, r1, r9
   3e748:	cmp	r0, #0
   3e74c:	ldrb	r7, [r1, r5]
   3e750:	ldrbne	r7, [r0, r7]
   3e754:	add	r0, r7, #128	; 0x80
   3e758:	lsr	r0, r0, #7
   3e75c:	cmp	r0, #2
   3e760:	bhi	3e770 <__assert_fail@plt+0x2bcf4>
   3e764:	bl	12728 <__ctype_toupper_loc@plt>
   3e768:	ldr	r0, [r0]
   3e76c:	ldr	r7, [r0, r7, lsl #2]
   3e770:	ldr	r0, [r4, #4]
   3e774:	strb	r7, [r0, r5]
   3e778:	add	r5, r5, #1
   3e77c:	cmp	r5, r6
   3e780:	blt	3e738 <__assert_fail@plt+0x2bcbc>
   3e784:	mov	r5, r6
   3e788:	str	r5, [r4, #28]
   3e78c:	str	r5, [r4, #32]
   3e790:	b	3e52c <__assert_fail@plt+0x2bab0>
   3e794:	ldr	r3, [r4]
   3e798:	add	r0, r5, r0
   3e79c:	ldr	r1, [r4, #64]	; 0x40
   3e7a0:	add	r0, r3, r0
   3e7a4:	cmp	r1, #0
   3e7a8:	ldrb	r0, [r0, #-1]
   3e7ac:	str	r2, [r4, #32]
   3e7b0:	ldrbne	r0, [r1, r0]
   3e7b4:	ldr	r1, [r4, #68]	; 0x44
   3e7b8:	ubfx	r2, r0, #5, #3
   3e7bc:	and	r3, r0, #31
   3e7c0:	ldr	r2, [r1, r2, lsl #2]
   3e7c4:	mov	r1, #1
   3e7c8:	tst	r2, r1, lsl r3
   3e7cc:	bne	3e7e8 <__assert_fail@plt+0x2bd6c>
   3e7d0:	mov	r1, #0
   3e7d4:	cmp	r0, #10
   3e7d8:	bne	3e7e8 <__assert_fail@plt+0x2bd6c>
   3e7dc:	ldrb	r1, [r4, #77]	; 0x4d
   3e7e0:	cmp	r1, #0
   3e7e4:	movwne	r1, #2
   3e7e8:	str	r1, [r4, #60]	; 0x3c
   3e7ec:	b	3e4b0 <__assert_fail@plt+0x2ba34>
   3e7f0:	ldr	r1, [r4, #4]
   3e7f4:	ldr	r2, [r4, #68]	; 0x44
   3e7f8:	ldrb	r0, [r1, r0]
   3e7fc:	ubfx	r1, r0, #5, #3
   3e800:	and	r3, r0, #31
   3e804:	ldr	r2, [r2, r1, lsl #2]
   3e808:	mov	r1, #1
   3e80c:	tst	r2, r1, lsl r3
   3e810:	bne	3e848 <__assert_fail@plt+0x2bdcc>
   3e814:	mov	r1, #0
   3e818:	cmp	r0, #10
   3e81c:	beq	3e83c <__assert_fail@plt+0x2bdc0>
   3e820:	b	3e848 <__assert_fail@plt+0x2bdcc>
   3e824:	ldrb	r0, [r4, #78]	; 0x4e
   3e828:	cmp	r0, #0
   3e82c:	bne	3ec68 <__assert_fail@plt+0x2c1ec>
   3e830:	mov	r1, #0
   3e834:	cmp	r6, #10
   3e838:	bne	3e848 <__assert_fail@plt+0x2bdcc>
   3e83c:	ldrb	r1, [r4, #77]	; 0x4d
   3e840:	cmp	r1, #0
   3e844:	movwne	r1, #2
   3e848:	str	r1, [r4, #60]	; 0x3c
   3e84c:	cmp	sl, r5
   3e850:	ldr	r2, [r4, #28]
   3e854:	bne	3e8e4 <__assert_fail@plt+0x2be68>
   3e858:	cmp	r2, r5
   3e85c:	ble	3e8e4 <__assert_fail@plt+0x2be68>
   3e860:	ldr	r0, [r4, #12]
   3e864:	ldr	r0, [r0, r5, lsl #2]
   3e868:	cmp	r0, r5
   3e86c:	bne	3e8e4 <__assert_fail@plt+0x2be68>
   3e870:	ldr	r0, [r4, #8]
   3e874:	sub	r2, r2, r5
   3e878:	lsl	r2, r2, #2
   3e87c:	add	r1, r0, r5, lsl #2
   3e880:	bl	1244c <memmove@plt>
   3e884:	ldr	r2, [r4, #28]
   3e888:	ldr	r0, [r4, #4]
   3e88c:	add	r1, r0, r5
   3e890:	sub	r2, r2, r5
   3e894:	bl	1244c <memmove@plt>
   3e898:	ldr	r0, [r4, #28]
   3e89c:	ldr	r1, [r4, #32]
   3e8a0:	sub	r0, r0, r5
   3e8a4:	sub	r1, r1, r5
   3e8a8:	cmp	r0, #1
   3e8ac:	str	r0, [r4, #28]
   3e8b0:	str	r1, [r4, #32]
   3e8b4:	blt	3e4b0 <__assert_fail@plt+0x2ba34>
   3e8b8:	ldr	r0, [r4, #12]
   3e8bc:	mov	r2, #0
   3e8c0:	add	r1, r0, r5, lsl #2
   3e8c4:	ldr	r3, [r1, r2, lsl #2]
   3e8c8:	sub	r3, r3, r5
   3e8cc:	str	r3, [r0, r2, lsl #2]
   3e8d0:	add	r2, r2, #1
   3e8d4:	ldr	r3, [r4, #28]
   3e8d8:	cmp	r2, r3
   3e8dc:	blt	3e8c4 <__assert_fail@plt+0x2be48>
   3e8e0:	b	3e4b0 <__assert_fail@plt+0x2ba34>
   3e8e4:	mov	r0, #0
   3e8e8:	strb	r0, [r4, #76]	; 0x4c
   3e8ec:	sub	r0, r5, r9
   3e8f0:	ldr	r1, [r4, #44]	; 0x2c
   3e8f4:	ldr	r3, [r4, #52]	; 0x34
   3e8f8:	add	r1, r0, r1
   3e8fc:	add	r0, r0, r3
   3e900:	str	r1, [r4, #48]	; 0x30
   3e904:	str	r0, [r4, #56]	; 0x38
   3e908:	add	r0, r7, r8
   3e90c:	sub	r1, r0, #1
   3e910:	add	r0, r1, #1
   3e914:	cmp	r0, #1
   3e918:	blt	3e930 <__assert_fail@plt+0x2beb4>
   3e91c:	ldr	r3, [r4, #12]
   3e920:	ldr	r3, [r3, r1, lsl #2]
   3e924:	sub	r1, r1, #1
   3e928:	cmp	r3, r5
   3e92c:	beq	3e910 <__assert_fail@plt+0x2be94>
   3e930:	cmp	r0, r2
   3e934:	bge	3e954 <__assert_fail@plt+0x2bed8>
   3e938:	ldr	r1, [r4, #8]
   3e93c:	ldr	r3, [r1, r0, lsl #2]
   3e940:	cmn	r3, #1
   3e944:	bne	3e954 <__assert_fail@plt+0x2bed8>
   3e948:	add	r0, r0, #1
   3e94c:	cmp	r0, r2
   3e950:	blt	3e93c <__assert_fail@plt+0x2bec0>
   3e954:	cmp	r0, r2
   3e958:	bne	3e96c <__assert_fail@plt+0x2bef0>
   3e95c:	mov	r0, #0
   3e960:	str	r0, [r4, #28]
   3e964:	str	r0, [r4, #32]
   3e968:	b	3e4b0 <__assert_fail@plt+0x2ba34>
   3e96c:	ldr	r1, [r4, #12]
   3e970:	ldr	r0, [r1, r0, lsl #2]
   3e974:	subs	r2, r0, r5
   3e978:	str	r2, [r4, #28]
   3e97c:	beq	3ea6c <__assert_fail@plt+0x2bff0>
   3e980:	cmp	r2, #1
   3e984:	blt	3e9a8 <__assert_fail@plt+0x2bf2c>
   3e988:	ldr	r0, [r4, #8]
   3e98c:	mov	r1, #0
   3e990:	mvn	r3, #0
   3e994:	str	r3, [r0, r1, lsl #2]
   3e998:	add	r1, r1, #1
   3e99c:	ldr	r2, [r4, #28]
   3e9a0:	cmp	r1, r2
   3e9a4:	blt	3e994 <__assert_fail@plt+0x2bf18>
   3e9a8:	ldr	r0, [r4, #4]
   3e9ac:	mov	r1, #255	; 0xff
   3e9b0:	bl	12800 <memset@plt>
   3e9b4:	ldr	r0, [r4, #28]
   3e9b8:	str	r0, [r4, #32]
   3e9bc:	b	3e4b0 <__assert_fail@plt+0x2ba34>
   3e9c0:	mov	r0, r6
   3e9c4:	bl	127dc <iswalnum@plt>
   3e9c8:	mov	r1, #1
   3e9cc:	cmp	r6, #95	; 0x5f
   3e9d0:	beq	3e464 <__assert_fail@plt+0x2b9e8>
   3e9d4:	cmp	r0, #0
   3e9d8:	beq	3e44c <__assert_fail@plt+0x2b9d0>
   3e9dc:	b	3e464 <__assert_fail@plt+0x2b9e8>
   3e9e0:	sub	r0, r8, r9
   3e9e4:	str	r0, [r4, #28]
   3e9e8:	b	3eb20 <__assert_fail@plt+0x2c0a4>
   3e9ec:	ldr	r3, [r4, #64]	; 0x40
   3e9f0:	cmp	r3, #0
   3e9f4:	beq	3e52c <__assert_fail@plt+0x2bab0>
   3e9f8:	ldr	r0, [r4, #36]	; 0x24
   3e9fc:	ldr	r2, [r4, #28]
   3ea00:	cmp	r0, r1
   3ea04:	movgt	r0, r1
   3ea08:	cmp	r2, r0
   3ea0c:	bge	3ea60 <__assert_fail@plt+0x2bfe4>
   3ea10:	ldr	r7, [r4]
   3ea14:	add	r1, r2, r9
   3ea18:	ldr	r6, [r4, #4]
   3ea1c:	ldrb	r1, [r7, r1]
   3ea20:	ldrb	r1, [r3, r1]
   3ea24:	strb	r1, [r6, r2]
   3ea28:	add	r1, r2, #1
   3ea2c:	cmp	r1, r0
   3ea30:	bge	3ea5c <__assert_fail@plt+0x2bfe0>
   3ea34:	ldm	r4, {r2, r3}
   3ea38:	ldr	r7, [r4, #24]
   3ea3c:	ldr	r6, [r4, #64]	; 0x40
   3ea40:	add	r2, r2, r7
   3ea44:	ldrb	r2, [r2, r1]
   3ea48:	ldrb	r2, [r6, r2]
   3ea4c:	strb	r2, [r3, r1]
   3ea50:	add	r1, r1, #1
   3ea54:	cmp	r1, r0
   3ea58:	blt	3ea34 <__assert_fail@plt+0x2bfb8>
   3ea5c:	mov	r2, r0
   3ea60:	str	r2, [r4, #28]
   3ea64:	str	r2, [r4, #32]
   3ea68:	b	3e52c <__assert_fail@plt+0x2bab0>
   3ea6c:	mov	r0, #0
   3ea70:	str	r0, [r4, #32]
   3ea74:	b	3e4b0 <__assert_fail@plt+0x2ba34>
   3ea78:	cmp	r7, #0
   3ea7c:	mov	r1, #0
   3ea80:	ldr	r3, [sp, #4]
   3ea84:	ldr	r2, [sp, #8]
   3ea88:	cmpne	r0, #0
   3ea8c:	ldrne	r0, [r4]
   3ea90:	ldrbne	r1, [r0, r8]
   3ea94:	stm	sl, {r2, r3}
   3ea98:	mov	r0, #1
   3ea9c:	mov	r7, r1
   3eaa0:	b	3eae4 <__assert_fail@plt+0x2c068>
   3eaa4:	ldr	r0, [r4]
   3eaa8:	ldr	r2, [r4, #44]	; 0x2c
   3eaac:	mov	r3, sl
   3eab0:	add	r1, r0, r8
   3eab4:	ldr	r0, [sl]
   3eab8:	sub	r7, r2, r8
   3eabc:	mov	r2, r7
   3eac0:	str	r0, [sp, #8]
   3eac4:	ldr	r0, [sl, #4]
   3eac8:	str	r0, [sp, #4]
   3eacc:	add	r0, sp, #24
   3ead0:	bl	3236c <__assert_fail@plt+0x1f8f0>
   3ead4:	sub	r1, r0, #1
   3ead8:	cmn	r1, #3
   3eadc:	bcs	3ea78 <__assert_fail@plt+0x2bffc>
   3eae0:	ldr	r7, [sp, #24]
   3eae4:	add	r8, r0, r8
   3eae8:	cmp	r8, r9
   3eaec:	blt	3eaa4 <__assert_fail@plt+0x2c028>
   3eaf0:	ldr	lr, [sp]
   3eaf4:	sub	r0, r8, r9
   3eaf8:	cmn	r7, #1
   3eafc:	str	r0, [r4, #28]
   3eb00:	beq	3eb20 <__assert_fail@plt+0x2c0a4>
   3eb04:	ldrb	r0, [r4, #78]	; 0x4e
   3eb08:	cmp	r0, #0
   3eb0c:	bne	3ec88 <__assert_fail@plt+0x2c20c>
   3eb10:	mov	r1, #0
   3eb14:	cmp	r7, #10
   3eb18:	beq	3ebb8 <__assert_fail@plt+0x2c13c>
   3eb1c:	b	3ebc4 <__assert_fail@plt+0x2c148>
   3eb20:	cmp	lr, #0
   3eb24:	ble	3eb64 <__assert_fail@plt+0x2c0e8>
   3eb28:	ldr	r1, [r4, #48]	; 0x30
   3eb2c:	sub	r0, lr, #1
   3eb30:	cmp	r1, r0
   3eb34:	beq	3ec5c <__assert_fail@plt+0x2c1e0>
   3eb38:	ldr	r1, [r4, #80]	; 0x50
   3eb3c:	cmp	r1, #2
   3eb40:	blt	3eb6c <__assert_fail@plt+0x2c0f0>
   3eb44:	ldr	r0, [r4, #8]
   3eb48:	sub	r0, r0, #4
   3eb4c:	ldr	r6, [r0, lr, lsl #2]
   3eb50:	cmn	r6, #1
   3eb54:	bne	3eba0 <__assert_fail@plt+0x2c124>
   3eb58:	sub	lr, lr, #1
   3eb5c:	cmp	lr, #0
   3eb60:	bgt	3eb4c <__assert_fail@plt+0x2c0d0>
   3eb64:	ldr	r1, [r4, #60]	; 0x3c
   3eb68:	b	3ebc4 <__assert_fail@plt+0x2c148>
   3eb6c:	ldr	r1, [r4, #4]
   3eb70:	ldr	r2, [r4, #68]	; 0x44
   3eb74:	ldrb	r0, [r1, r0]
   3eb78:	ubfx	r1, r0, #5, #3
   3eb7c:	and	r3, r0, #31
   3eb80:	ldr	r2, [r2, r1, lsl #2]
   3eb84:	mov	r1, #1
   3eb88:	tst	r2, r1, lsl r3
   3eb8c:	bne	3ebc4 <__assert_fail@plt+0x2c148>
   3eb90:	mov	r1, #0
   3eb94:	cmp	r0, #10
   3eb98:	beq	3ebb8 <__assert_fail@plt+0x2c13c>
   3eb9c:	b	3ebc4 <__assert_fail@plt+0x2c148>
   3eba0:	ldrb	r0, [r4, #78]	; 0x4e
   3eba4:	cmp	r0, #0
   3eba8:	bne	3ed00 <__assert_fail@plt+0x2c284>
   3ebac:	mov	r1, #0
   3ebb0:	cmp	r6, #10
   3ebb4:	bne	3ebc4 <__assert_fail@plt+0x2c148>
   3ebb8:	ldrb	r1, [r4, #77]	; 0x4d
   3ebbc:	cmp	r1, #0
   3ebc0:	movwne	r1, #2
   3ebc4:	str	r1, [r4, #60]	; 0x3c
   3ebc8:	mov	r0, #0
   3ebcc:	ldr	r2, [r4, #28]
   3ebd0:	cmp	r2, #0
   3ebd4:	bne	3ec14 <__assert_fail@plt+0x2c198>
   3ebd8:	str	r0, [r4, #32]
   3ebdc:	b	3e4b0 <__assert_fail@plt+0x2ba34>
   3ebe0:	mov	r2, #0
   3ebe4:	strb	r2, [r4, #76]	; 0x4c
   3ebe8:	sub	r2, r5, r9
   3ebec:	ldr	r3, [r4, #44]	; 0x2c
   3ebf0:	ldr	r7, [r4, #52]	; 0x34
   3ebf4:	add	r3, r2, r3
   3ebf8:	add	r2, r2, r7
   3ebfc:	str	r3, [r4, #48]	; 0x30
   3ec00:	str	r2, [r4, #56]	; 0x38
   3ec04:	b	3e55c <__assert_fail@plt+0x2bae0>
   3ec08:	and	r0, r6, #2
   3ec0c:	eor	r1, r0, #10
   3ec10:	b	3e848 <__assert_fail@plt+0x2bdcc>
   3ec14:	cmp	r2, #1
   3ec18:	blt	3ec3c <__assert_fail@plt+0x2c1c0>
   3ec1c:	ldr	r0, [r4, #8]
   3ec20:	mov	r1, #0
   3ec24:	mvn	r3, #0
   3ec28:	str	r3, [r0, r1, lsl #2]
   3ec2c:	add	r1, r1, #1
   3ec30:	ldr	r2, [r4, #28]
   3ec34:	cmp	r1, r2
   3ec38:	blt	3ec28 <__assert_fail@plt+0x2c1ac>
   3ec3c:	ldrb	r0, [r4, #75]	; 0x4b
   3ec40:	cmp	r0, #0
   3ec44:	beq	3ecac <__assert_fail@plt+0x2c230>
   3ec48:	ldr	r0, [r4, #4]
   3ec4c:	mov	r1, #255	; 0xff
   3ec50:	bl	12800 <memset@plt>
   3ec54:	ldr	r0, [r4, #28]
   3ec58:	b	3ebd8 <__assert_fail@plt+0x2c15c>
   3ec5c:	and	r0, r6, #2
   3ec60:	eor	r1, r0, #10
   3ec64:	b	3ebc4 <__assert_fail@plt+0x2c148>
   3ec68:	mov	r0, r6
   3ec6c:	bl	127dc <iswalnum@plt>
   3ec70:	mov	r1, #1
   3ec74:	cmp	r6, #95	; 0x5f
   3ec78:	beq	3e848 <__assert_fail@plt+0x2bdcc>
   3ec7c:	cmp	r0, #0
   3ec80:	beq	3e830 <__assert_fail@plt+0x2bdb4>
   3ec84:	b	3e848 <__assert_fail@plt+0x2bdcc>
   3ec88:	mov	r0, r7
   3ec8c:	bl	127dc <iswalnum@plt>
   3ec90:	mov	r1, #1
   3ec94:	cmp	r7, #95	; 0x5f
   3ec98:	beq	3ebc4 <__assert_fail@plt+0x2c148>
   3ec9c:	cmp	r0, #0
   3eca0:	mov	r2, r7
   3eca4:	beq	3eb10 <__assert_fail@plt+0x2c094>
   3eca8:	b	3ebc4 <__assert_fail@plt+0x2c148>
   3ecac:	mov	r0, r2
   3ecb0:	str	r2, [r4, #32]
   3ecb4:	b	3e4b0 <__assert_fail@plt+0x2ba34>
   3ecb8:	cmp	r2, #1
   3ecbc:	blt	3ed20 <__assert_fail@plt+0x2c2a4>
   3ecc0:	sub	r1, r7, #1
   3ecc4:	sub	r1, r1, r3
   3ecc8:	mvn	r3, #1
   3eccc:	cmn	r1, #7
   3ecd0:	mvnle	r1, #6
   3ecd4:	sub	ip, r3, r1
   3ecd8:	add	r1, sp, #14
   3ecdc:	ldrb	r3, [r7, ip]
   3ece0:	sub	lr, ip, #1
   3ece4:	ldrb	r3, [r0, r3]
   3ece8:	strb	r3, [r1, ip]
   3ecec:	add	r3, ip, #1
   3ecf0:	mov	ip, lr
   3ecf4:	cmp	r3, #1
   3ecf8:	bgt	3ecdc <__assert_fail@plt+0x2c260>
   3ecfc:	b	3e5d8 <__assert_fail@plt+0x2bb5c>
   3ed00:	mov	r0, r6
   3ed04:	bl	127dc <iswalnum@plt>
   3ed08:	mov	r1, #1
   3ed0c:	cmp	r6, #95	; 0x5f
   3ed10:	beq	3ebc4 <__assert_fail@plt+0x2c148>
   3ed14:	cmp	r0, #0
   3ed18:	beq	3ebac <__assert_fail@plt+0x2c130>
   3ed1c:	b	3ebc4 <__assert_fail@plt+0x2c148>
   3ed20:	add	r1, sp, #14
   3ed24:	b	3e5d8 <__assert_fail@plt+0x2bb5c>
   3ed28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3ed2c:	add	fp, sp, #24
   3ed30:	mov	r8, r0
   3ed34:	ldr	r0, [r0, #124]	; 0x7c
   3ed38:	cmp	r0, #1
   3ed3c:	blt	3edc0 <__assert_fail@plt+0x2c344>
   3ed40:	mov	r7, #0
   3ed44:	ldr	r0, [r8, #132]	; 0x84
   3ed48:	ldr	r5, [r0, r7, lsl #2]
   3ed4c:	ldr	r0, [r5, #16]
   3ed50:	cmp	r0, #1
   3ed54:	blt	3ed84 <__assert_fail@plt+0x2c308>
   3ed58:	mov	r4, #0
   3ed5c:	ldr	r0, [r5, #20]
   3ed60:	ldr	r6, [r0, r4, lsl #2]
   3ed64:	ldr	r0, [r6, #16]
   3ed68:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3ed6c:	mov	r0, r6
   3ed70:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3ed74:	ldr	r0, [r5, #16]
   3ed78:	add	r4, r4, #1
   3ed7c:	cmp	r4, r0
   3ed80:	blt	3ed5c <__assert_fail@plt+0x2c2e0>
   3ed84:	ldr	r0, [r5, #20]
   3ed88:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3ed8c:	ldr	r0, [r5, #8]
   3ed90:	cmp	r0, #0
   3ed94:	beq	3eda8 <__assert_fail@plt+0x2c32c>
   3ed98:	ldr	r0, [r0, #8]
   3ed9c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3eda0:	ldr	r0, [r5, #8]
   3eda4:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3eda8:	mov	r0, r5
   3edac:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3edb0:	ldr	r0, [r8, #124]	; 0x7c
   3edb4:	add	r7, r7, #1
   3edb8:	cmp	r7, r0
   3edbc:	blt	3ed44 <__assert_fail@plt+0x2c2c8>
   3edc0:	mov	r0, #0
   3edc4:	str	r0, [r8, #108]	; 0x6c
   3edc8:	str	r0, [r8, #124]	; 0x7c
   3edcc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3edd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3edd4:	add	fp, sp, #28
   3edd8:	sub	sp, sp, #4
   3eddc:	mov	sl, r0
   3ede0:	ldr	r0, [r1, #4]
   3ede4:	cmp	r0, #1
   3ede8:	blt	3eeb4 <__assert_fail@plt+0x2c438>
   3edec:	ldr	r7, [sl, #84]	; 0x54
   3edf0:	mov	r8, r2
   3edf4:	mov	r5, r1
   3edf8:	mov	r4, #0
   3edfc:	b	3ee24 <__assert_fail@plt+0x2c3a8>
   3ee00:	ldr	r0, [sl, #132]	; 0x84
   3ee04:	lsl	r1, r9, #3
   3ee08:	bl	33040 <__assert_fail@plt+0x205c4>
   3ee0c:	cmp	r0, #0
   3ee10:	beq	3eec0 <__assert_fail@plt+0x2c444>
   3ee14:	lsl	r1, r9, #1
   3ee18:	str	r1, [sl, #128]	; 0x80
   3ee1c:	str	r0, [sl, #132]	; 0x84
   3ee20:	b	3ee6c <__assert_fail@plt+0x2c3f0>
   3ee24:	ldr	r1, [r5, #8]
   3ee28:	ldr	r6, [r1, r4, lsl #2]
   3ee2c:	ldr	r1, [r7]
   3ee30:	add	r2, r1, r6, lsl #3
   3ee34:	ldrb	r2, [r2, #4]
   3ee38:	cmp	r2, #8
   3ee3c:	bne	3eea8 <__assert_fail@plt+0x2c42c>
   3ee40:	ldr	r1, [r1, r6, lsl #3]
   3ee44:	cmp	r1, #31
   3ee48:	bgt	3eea8 <__assert_fail@plt+0x2c42c>
   3ee4c:	ldr	r2, [r7, #80]	; 0x50
   3ee50:	mov	r3, #1
   3ee54:	tst	r2, r3, lsl r1
   3ee58:	beq	3eea8 <__assert_fail@plt+0x2c42c>
   3ee5c:	ldr	r9, [sl, #124]	; 0x7c
   3ee60:	ldr	r0, [sl, #128]	; 0x80
   3ee64:	cmp	r9, r0
   3ee68:	beq	3ee00 <__assert_fail@plt+0x2c384>
   3ee6c:	mov	r0, #1
   3ee70:	mov	r1, #24
   3ee74:	bl	2f760 <__assert_fail@plt+0x1cce4>
   3ee78:	ldr	r1, [sl, #124]	; 0x7c
   3ee7c:	ldr	r2, [sl, #132]	; 0x84
   3ee80:	str	r0, [r2, r1, lsl #2]
   3ee84:	ldr	r0, [sl, #132]	; 0x84
   3ee88:	ldr	r0, [r0, r1, lsl #2]
   3ee8c:	cmp	r0, #0
   3ee90:	beq	3eec0 <__assert_fail@plt+0x2c444>
   3ee94:	add	r1, r1, #1
   3ee98:	str	r6, [r0, #4]
   3ee9c:	str	r1, [sl, #124]	; 0x7c
   3eea0:	str	r8, [r0]
   3eea4:	ldr	r0, [r5, #4]
   3eea8:	add	r4, r4, #1
   3eeac:	cmp	r4, r0
   3eeb0:	blt	3ee24 <__assert_fail@plt+0x2c3a8>
   3eeb4:	mov	r0, #0
   3eeb8:	sub	sp, fp, #28
   3eebc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3eec0:	mov	r0, #12
   3eec4:	sub	sp, fp, #28
   3eec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3eecc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3eed0:	add	fp, sp, #28
   3eed4:	sub	sp, sp, #76	; 0x4c
   3eed8:	mov	r9, r0
   3eedc:	ldr	r0, [r1, #4]
   3eee0:	cmp	r0, #1
   3eee4:	blt	3f81c <__assert_fail@plt+0x2cda0>
   3eee8:	ldr	r2, [r9, #84]	; 0x54
   3eeec:	ldr	r8, [r9, #40]	; 0x28
   3eef0:	mov	r3, #0
   3eef4:	str	r9, [sp, #40]	; 0x28
   3eef8:	str	r1, [sp, #16]
   3eefc:	str	r8, [sp, #52]	; 0x34
   3ef00:	str	r2, [sp, #20]
   3ef04:	b	3ef3c <__assert_fail@plt+0x2c4c0>
   3ef08:	ldr	r0, [r9, #88]	; 0x58
   3ef0c:	and	r0, r0, #2
   3ef10:	eor	r1, r0, #10
   3ef14:	b	3f020 <__assert_fail@plt+0x2c5a4>
   3ef18:	mov	r0, r4
   3ef1c:	bl	127dc <iswalnum@plt>
   3ef20:	mov	r1, #1
   3ef24:	mov	r2, #0
   3ef28:	cmp	r4, #95	; 0x5f
   3ef2c:	beq	3f038 <__assert_fail@plt+0x2c5bc>
   3ef30:	cmp	r0, #0
   3ef34:	beq	3f008 <__assert_fail@plt+0x2c58c>
   3ef38:	b	3f038 <__assert_fail@plt+0x2c5bc>
   3ef3c:	ldr	r0, [r1, #8]
   3ef40:	str	r3, [sp, #24]
   3ef44:	ldr	r3, [r0, r3, lsl #2]
   3ef48:	ldr	r0, [r2]
   3ef4c:	add	r5, r0, r3, lsl #3
   3ef50:	mov	r1, r3
   3ef54:	str	r3, [sp, #48]	; 0x30
   3ef58:	ldr	r6, [r5, #4]!
   3ef5c:	uxtb	r0, r6
   3ef60:	cmp	r0, #4
   3ef64:	bne	3f800 <__assert_fail@plt+0x2cd84>
   3ef68:	movw	r0, #65280	; 0xff00
   3ef6c:	movt	r0, #3
   3ef70:	tst	r6, r0
   3ef74:	beq	3f06c <__assert_fail@plt+0x2c5f0>
   3ef78:	cmn	r8, #1
   3ef7c:	ble	3efbc <__assert_fail@plt+0x2c540>
   3ef80:	ldr	r0, [r9, #48]	; 0x30
   3ef84:	cmp	r0, r8
   3ef88:	beq	3ef08 <__assert_fail@plt+0x2c48c>
   3ef8c:	ldr	r0, [r9, #80]	; 0x50
   3ef90:	cmp	r0, #2
   3ef94:	blt	3efc4 <__assert_fail@plt+0x2c548>
   3ef98:	ldr	r0, [r9, #8]
   3ef9c:	mov	r1, r8
   3efa0:	ldr	r4, [r0, r1, lsl #2]
   3efa4:	cmn	r4, #1
   3efa8:	bne	3effc <__assert_fail@plt+0x2c580>
   3efac:	sub	r2, r1, #1
   3efb0:	cmp	r1, #0
   3efb4:	mov	r1, r2
   3efb8:	bgt	3efa0 <__assert_fail@plt+0x2c524>
   3efbc:	ldr	r1, [r9, #60]	; 0x3c
   3efc0:	b	3f020 <__assert_fail@plt+0x2c5a4>
   3efc4:	ldr	r0, [r9, #4]
   3efc8:	ldr	r1, [r9, #68]	; 0x44
   3efcc:	ldrb	r0, [r0, r8]
   3efd0:	ubfx	r2, r0, #5, #3
   3efd4:	and	r7, r0, #31
   3efd8:	ldr	r3, [r1, r2, lsl #2]
   3efdc:	mov	r1, #1
   3efe0:	mov	r2, #0
   3efe4:	tst	r3, r1, lsl r7
   3efe8:	bne	3f038 <__assert_fail@plt+0x2c5bc>
   3efec:	mov	r1, #0
   3eff0:	cmp	r0, #10
   3eff4:	beq	3f014 <__assert_fail@plt+0x2c598>
   3eff8:	b	3f020 <__assert_fail@plt+0x2c5a4>
   3effc:	ldrb	r0, [r9, #78]	; 0x4e
   3f000:	cmp	r0, #0
   3f004:	bne	3ef18 <__assert_fail@plt+0x2c49c>
   3f008:	mov	r1, #0
   3f00c:	cmp	r4, #10
   3f010:	bne	3f020 <__assert_fail@plt+0x2c5a4>
   3f014:	ldrb	r1, [r9, #77]	; 0x4d
   3f018:	cmp	r1, #0
   3f01c:	movwne	r1, #2
   3f020:	and	r0, r1, #1
   3f024:	tst	r6, #1024	; 0x400
   3f028:	eor	r2, r0, #1
   3f02c:	beq	3f038 <__assert_fail@plt+0x2c5bc>
   3f030:	cmp	r0, #0
   3f034:	beq	3f800 <__assert_fail@plt+0x2cd84>
   3f038:	ldr	r0, [r5]
   3f03c:	cmp	r2, #0
   3f040:	bne	3f04c <__assert_fail@plt+0x2c5d0>
   3f044:	ands	r2, r0, #2048	; 0x800
   3f048:	bne	3f800 <__assert_fail@plt+0x2cd84>
   3f04c:	tst	r1, #2
   3f050:	bne	3f05c <__assert_fail@plt+0x2c5e0>
   3f054:	ands	r2, r0, #8192	; 0x2000
   3f058:	bne	3f800 <__assert_fail@plt+0x2cd84>
   3f05c:	tst	r1, #8
   3f060:	bne	3f06c <__assert_fail@plt+0x2c5f0>
   3f064:	ands	r0, r0, #32768	; 0x8000
   3f068:	bne	3f800 <__assert_fail@plt+0x2cd84>
   3f06c:	ldr	r2, [r9, #108]	; 0x6c
   3f070:	ldr	r0, [r9, #84]	; 0x54
   3f074:	ldr	ip, [r9, #4]
   3f078:	cmp	r2, #1
   3f07c:	str	r0, [sp, #28]
   3f080:	str	r2, [sp, #12]
   3f084:	blt	3f0c4 <__assert_fail@plt+0x2c648>
   3f088:	ldr	r1, [r9, #116]	; 0x74
   3f08c:	mov	r0, #0
   3f090:	mov	r5, #1
   3f094:	add	r3, r2, r0
   3f098:	add	r3, r3, r3, lsr #31
   3f09c:	asr	r7, r3, #1
   3f0a0:	add	r6, r7, r7, lsl #1
   3f0a4:	add	r6, r1, r6, lsl #3
   3f0a8:	ldr	r6, [r6, #4]
   3f0ac:	cmp	r6, r8
   3f0b0:	addlt	r0, r5, r3, asr #1
   3f0b4:	movge	r2, r7
   3f0b8:	cmp	r0, r2
   3f0bc:	blt	3f094 <__assert_fail@plt+0x2c618>
   3f0c0:	b	3f0c8 <__assert_fail@plt+0x2c64c>
   3f0c4:	mov	r0, #0
   3f0c8:	ldr	r1, [sp, #12]
   3f0cc:	ldr	r5, [sp, #28]
   3f0d0:	cmp	r0, r1
   3f0d4:	bge	3f118 <__assert_fail@plt+0x2c69c>
   3f0d8:	cmn	r0, #1
   3f0dc:	beq	3f118 <__assert_fail@plt+0x2c69c>
   3f0e0:	ldr	r1, [r9, #116]	; 0x74
   3f0e4:	add	r0, r0, r0, lsl #1
   3f0e8:	add	r0, r1, r0, lsl #3
   3f0ec:	ldr	r1, [r0, #4]
   3f0f0:	cmp	r1, r8
   3f0f4:	bne	3f118 <__assert_fail@plt+0x2c69c>
   3f0f8:	ldr	r1, [r0]
   3f0fc:	ldr	r2, [sp, #48]	; 0x30
   3f100:	cmp	r1, r2
   3f104:	beq	3f528 <__assert_fail@plt+0x2caac>
   3f108:	ldrb	r1, [r0, #20]
   3f10c:	add	r0, r0, #24
   3f110:	cmp	r1, #0
   3f114:	bne	3f0f8 <__assert_fail@plt+0x2c67c>
   3f118:	ldr	r0, [r9, #124]	; 0x7c
   3f11c:	cmp	r0, #1
   3f120:	blt	3f528 <__assert_fail@plt+0x2caac>
   3f124:	ldr	r0, [r5]
   3f128:	ldr	r1, [sp, #48]	; 0x30
   3f12c:	mov	r2, #0
   3f130:	ldr	r1, [r0, r1, lsl #3]
   3f134:	str	r1, [sp, #36]	; 0x24
   3f138:	b	3f140 <__assert_fail@plt+0x2c6c4>
   3f13c:	ldr	r0, [r5]
   3f140:	ldr	r1, [r9, #132]	; 0x84
   3f144:	str	r2, [sp, #32]
   3f148:	ldr	lr, [r1, r2, lsl #2]
   3f14c:	ldr	r1, [lr, #4]
   3f150:	ldr	r0, [r0, r1, lsl #3]
   3f154:	ldr	r1, [sp, #36]	; 0x24
   3f158:	cmp	r0, r1
   3f15c:	bne	3f4f8 <__assert_fail@plt+0x2ca7c>
   3f160:	ldr	r0, [lr, #16]
   3f164:	ldr	r2, [lr]
   3f168:	mov	r8, #0
   3f16c:	str	lr, [sp, #44]	; 0x2c
   3f170:	cmp	r0, #1
   3f174:	blt	3f184 <__assert_fail@plt+0x2c708>
   3f178:	ldr	r6, [sp, #52]	; 0x34
   3f17c:	mov	r7, r2
   3f180:	b	3f208 <__assert_fail@plt+0x2c78c>
   3f184:	ldr	r6, [sp, #52]	; 0x34
   3f188:	b	3f2b4 <__assert_fail@plt+0x2c838>
   3f18c:	ldr	r2, [r9, #48]	; 0x30
   3f190:	cmp	r5, r2
   3f194:	bgt	3f2b0 <__assert_fail@plt+0x2c834>
   3f198:	ldr	r0, [r9, #36]	; 0x24
   3f19c:	ldr	r3, [r9, #104]	; 0x68
   3f1a0:	cmp	r0, r5
   3f1a4:	cmple	r0, r2
   3f1a8:	blt	3f1b8 <__assert_fail@plt+0x2c73c>
   3f1ac:	cmp	r1, r5
   3f1b0:	cmple	r1, r2
   3f1b4:	bge	3f1d4 <__assert_fail@plt+0x2c758>
   3f1b8:	ldr	r0, [sp, #40]	; 0x28
   3f1bc:	add	r1, r5, #1
   3f1c0:	mov	r9, r3
   3f1c4:	bl	3f858 <__assert_fail@plt+0x2cddc>
   3f1c8:	mov	r3, r9
   3f1cc:	cmp	r0, #0
   3f1d0:	bne	3f830 <__assert_fail@plt+0x2cdb4>
   3f1d4:	ldr	r9, [sp, #40]	; 0x28
   3f1d8:	cmp	r5, r3
   3f1dc:	ble	3f200 <__assert_fail@plt+0x2c784>
   3f1e0:	sub	r0, r5, r3
   3f1e4:	mov	r1, #0
   3f1e8:	lsl	r2, r0, #2
   3f1ec:	ldr	r0, [r9, #100]	; 0x64
   3f1f0:	add	r0, r0, r3, lsl #2
   3f1f4:	add	r0, r0, #4
   3f1f8:	bl	12800 <memset@plt>
   3f1fc:	str	r5, [r9, #104]	; 0x68
   3f200:	ldr	ip, [r9, #4]
   3f204:	b	3f234 <__assert_fail@plt+0x2c7b8>
   3f208:	ldr	r1, [lr, #20]
   3f20c:	ldr	sl, [r1, r8, lsl #2]
   3f210:	ldr	r1, [sl, #4]
   3f214:	sub	r4, r1, r7
   3f218:	str	r1, [fp, #-48]	; 0xffffffd0
   3f21c:	cmp	r4, #1
   3f220:	blt	3f254 <__assert_fail@plt+0x2c7d8>
   3f224:	ldr	r1, [r9, #28]
   3f228:	add	r5, r4, r6
   3f22c:	cmp	r5, r1
   3f230:	bgt	3f18c <__assert_fail@plt+0x2c710>
   3f234:	add	r0, ip, r6
   3f238:	add	r1, ip, r7
   3f23c:	mov	r2, r4
   3f240:	mov	r5, ip
   3f244:	bl	12518 <memcmp@plt>
   3f248:	ldr	lr, [sp, #44]	; 0x2c
   3f24c:	cmp	r0, #0
   3f250:	bne	3f2a8 <__assert_fail@plt+0x2c82c>
   3f254:	ldr	r0, [sp, #52]	; 0x34
   3f258:	ldr	r3, [sp, #48]	; 0x30
   3f25c:	mov	r1, lr
   3f260:	mov	r2, sl
   3f264:	mov	r5, lr
   3f268:	str	r0, [sp]
   3f26c:	mov	r0, r9
   3f270:	bl	3fef8 <__assert_fail@plt+0x2d47c>
   3f274:	cmp	r0, #1
   3f278:	bhi	3f830 <__assert_fail@plt+0x2cdb4>
   3f27c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   3f280:	ldr	r0, [r5, #16]
   3f284:	ldr	ip, [r9, #4]
   3f288:	add	r8, r8, #1
   3f28c:	add	r6, r4, r6
   3f290:	mov	lr, r5
   3f294:	mov	r1, r9
   3f298:	cmp	r8, r0
   3f29c:	mov	r7, r2
   3f2a0:	blt	3f208 <__assert_fail@plt+0x2c78c>
   3f2a4:	b	3f2b4 <__assert_fail@plt+0x2c838>
   3f2a8:	ldr	r0, [lr, #16]
   3f2ac:	mov	ip, r5
   3f2b0:	mov	r2, r7
   3f2b4:	ldr	r5, [sp, #28]
   3f2b8:	cmp	r8, r0
   3f2bc:	bge	3f2c8 <__assert_fail@plt+0x2c84c>
   3f2c0:	ldr	r8, [sp, #52]	; 0x34
   3f2c4:	b	3f4f8 <__assert_fail@plt+0x2ca7c>
   3f2c8:	cmp	r8, #0
   3f2cc:	ldr	r8, [sp, #52]	; 0x34
   3f2d0:	addne	r2, r2, #1
   3f2d4:	cmp	r2, r8
   3f2d8:	bgt	3f4f8 <__assert_fail@plt+0x2ca7c>
   3f2dc:	b	3f44c <__assert_fail@plt+0x2c9d0>
   3f2e0:	cmn	r4, #1
   3f2e4:	beq	3f4e4 <__assert_fail@plt+0x2ca68>
   3f2e8:	ldr	r1, [lr, #8]
   3f2ec:	str	r6, [fp, #-48]	; 0xffffffd0
   3f2f0:	mov	r6, ip
   3f2f4:	mov	r5, r9
   3f2f8:	cmp	r1, #0
   3f2fc:	bne	3f32c <__assert_fail@plt+0x2c8b0>
   3f300:	ldr	r0, [lr]
   3f304:	add	r1, sl, #1
   3f308:	mov	r9, #12
   3f30c:	sub	r1, r1, r0
   3f310:	mov	r0, #12
   3f314:	bl	2f760 <__assert_fail@plt+0x1cce4>
   3f318:	ldr	lr, [sp, #44]	; 0x2c
   3f31c:	mov	r1, r0
   3f320:	cmp	r0, #0
   3f324:	str	r0, [lr, #8]
   3f328:	beq	3f820 <__assert_fail@plt+0x2cda4>
   3f32c:	ldr	r3, [lr]
   3f330:	ldr	r2, [lr, #4]
   3f334:	stm	sp, {r4, sl}
   3f338:	mov	r0, #9
   3f33c:	str	r0, [sp, #8]
   3f340:	ldr	r0, [sp, #40]	; 0x28
   3f344:	bl	400bc <__assert_fail@plt+0x2d640>
   3f348:	mov	ip, r6
   3f34c:	ldr	lr, [sp, #44]	; 0x2c
   3f350:	ldr	r6, [fp, #-48]	; 0xffffffd0
   3f354:	cmp	r0, #1
   3f358:	beq	3f4e8 <__assert_fail@plt+0x2ca6c>
   3f35c:	mov	r9, r0
   3f360:	cmp	r0, #0
   3f364:	bne	3f820 <__assert_fail@plt+0x2cda4>
   3f368:	ldr	r1, [lr, #12]
   3f36c:	ldr	r0, [lr, #16]
   3f370:	ldr	r7, [sp, #40]	; 0x28
   3f374:	cmp	r0, r1
   3f378:	beq	3f41c <__assert_fail@plt+0x2c9a0>
   3f37c:	mov	r0, #1
   3f380:	mov	r1, #20
   3f384:	bl	2f760 <__assert_fail@plt+0x1cce4>
   3f388:	cmp	r0, #0
   3f38c:	beq	3f838 <__assert_fail@plt+0x2cdbc>
   3f390:	ldr	r1, [sp, #44]	; 0x2c
   3f394:	mov	r2, r0
   3f398:	ldr	r0, [r1, #16]
   3f39c:	ldr	r3, [r1, #20]
   3f3a0:	str	r2, [r3, r0, lsl #2]
   3f3a4:	stm	r2, {r4, sl}
   3f3a8:	add	r0, r0, #1
   3f3ac:	ldr	r3, [sp, #48]	; 0x30
   3f3b0:	str	r0, [r1, #16]
   3f3b4:	mov	r0, r7
   3f3b8:	str	r8, [sp]
   3f3bc:	bl	3fef8 <__assert_fail@plt+0x2d47c>
   3f3c0:	cmp	r0, #1
   3f3c4:	bhi	3f830 <__assert_fail@plt+0x2cdb4>
   3f3c8:	ldr	ip, [r7, #4]
   3f3cc:	ldr	lr, [sp, #44]	; 0x2c
   3f3d0:	ldr	r6, [fp, #-48]	; 0xffffffd0
   3f3d4:	b	3f4e8 <__assert_fail@plt+0x2ca6c>
   3f3d8:	ldr	r0, [r9, #48]	; 0x30
   3f3dc:	cmp	r6, r0
   3f3e0:	bge	3f4f8 <__assert_fail@plt+0x2ca7c>
   3f3e4:	add	r4, r6, #1
   3f3e8:	mov	r0, r9
   3f3ec:	mov	r7, r5
   3f3f0:	mov	r5, r6
   3f3f4:	mov	r1, r4
   3f3f8:	bl	3f858 <__assert_fail@plt+0x2cddc>
   3f3fc:	cmp	r0, #0
   3f400:	bne	3f830 <__assert_fail@plt+0x2cdb4>
   3f404:	ldr	ip, [r9, #4]
   3f408:	ldr	lr, [sp, #44]	; 0x2c
   3f40c:	mov	r6, r5
   3f410:	mov	r5, r7
   3f414:	mov	r1, r9
   3f418:	b	3f46c <__assert_fail@plt+0x2c9f0>
   3f41c:	mov	r1, #1
   3f420:	mov	r5, lr
   3f424:	orr	r6, r1, r0, lsl #1
   3f428:	ldr	r0, [lr, #20]
   3f42c:	lsl	r1, r6, #2
   3f430:	bl	33040 <__assert_fail@plt+0x205c4>
   3f434:	cmp	r0, #0
   3f438:	beq	3f838 <__assert_fail@plt+0x2cdbc>
   3f43c:	str	r6, [r5, #12]
   3f440:	str	r0, [r5, #20]
   3f444:	ldr	r5, [sp, #28]
   3f448:	b	3f37c <__assert_fail@plt+0x2c900>
   3f44c:	ldr	r0, [lr]
   3f450:	mov	sl, r2
   3f454:	cmp	r2, r0
   3f458:	ble	3f484 <__assert_fail@plt+0x2ca08>
   3f45c:	ldr	r0, [r9, #28]
   3f460:	cmp	r6, r0
   3f464:	bge	3f3d8 <__assert_fail@plt+0x2c95c>
   3f468:	add	r4, r6, #1
   3f46c:	add	r1, ip, sl
   3f470:	ldrb	r0, [ip, r6]
   3f474:	ldrb	r1, [r1, #-1]
   3f478:	cmp	r0, r1
   3f47c:	beq	3f488 <__assert_fail@plt+0x2ca0c>
   3f480:	b	3f4f8 <__assert_fail@plt+0x2ca7c>
   3f484:	mov	r4, r6
   3f488:	ldr	r0, [r9, #100]	; 0x64
   3f48c:	mov	r6, r4
   3f490:	ldr	r2, [r0, sl, lsl #2]
   3f494:	cmp	r2, #0
   3f498:	beq	3f4e8 <__assert_fail@plt+0x2ca6c>
   3f49c:	ldr	r0, [r2, #8]
   3f4a0:	cmp	r0, #1
   3f4a4:	blt	3f4e8 <__assert_fail@plt+0x2ca6c>
   3f4a8:	mov	r9, r5
   3f4ac:	ldr	r1, [r5]
   3f4b0:	ldr	r2, [r2, #12]
   3f4b4:	ldr	r5, [sp, #36]	; 0x24
   3f4b8:	mov	r3, #0
   3f4bc:	ldr	r4, [r2, r3, lsl #2]
   3f4c0:	add	r7, r1, r4, lsl #3
   3f4c4:	ldrb	r7, [r7, #4]
   3f4c8:	cmp	r7, #9
   3f4cc:	ldreq	r7, [r1, r4, lsl #3]
   3f4d0:	cmpeq	r7, r5
   3f4d4:	beq	3f2e0 <__assert_fail@plt+0x2c864>
   3f4d8:	add	r3, r3, #1
   3f4dc:	cmp	r3, r0
   3f4e0:	blt	3f4bc <__assert_fail@plt+0x2ca40>
   3f4e4:	mov	r5, r9
   3f4e8:	ldr	r9, [sp, #40]	; 0x28
   3f4ec:	add	r2, sl, #1
   3f4f0:	cmp	sl, r8
   3f4f4:	blt	3f44c <__assert_fail@plt+0x2c9d0>
   3f4f8:	ldr	r2, [sp, #32]
   3f4fc:	ldr	r0, [r9, #124]	; 0x7c
   3f500:	add	r2, r2, #1
   3f504:	cmp	r2, r0
   3f508:	blt	3f13c <__assert_fail@plt+0x2c6c0>
   3f50c:	mov	r1, #0
   3f510:	ldr	r0, [r9, #108]	; 0x6c
   3f514:	str	r1, [fp, #-32]	; 0xffffffe0
   3f518:	ldr	r1, [sp, #12]
   3f51c:	cmp	r1, r0
   3f520:	bge	3f800 <__assert_fail@plt+0x2cd84>
   3f524:	b	3f570 <__assert_fail@plt+0x2caf4>
   3f528:	mov	r0, #0
   3f52c:	str	r0, [fp, #-32]	; 0xffffffe0
   3f530:	b	3f800 <__assert_fail@plt+0x2cd84>
   3f534:	ldr	r0, [r3, #88]	; 0x58
   3f538:	and	r0, r0, #2
   3f53c:	eor	sl, r0, #10
   3f540:	b	3f6a4 <__assert_fail@plt+0x2cc28>
   3f544:	mov	r0, r4
   3f548:	bl	127dc <iswalnum@plt>
   3f54c:	mov	sl, #1
   3f550:	cmp	r4, #95	; 0x5f
   3f554:	beq	3f568 <__assert_fail@plt+0x2caec>
   3f558:	ldr	r3, [sp, #40]	; 0x28
   3f55c:	cmp	r0, #0
   3f560:	beq	3f68c <__assert_fail@plt+0x2cc10>
   3f564:	b	3f6a4 <__assert_fail@plt+0x2cc28>
   3f568:	ldr	r3, [sp, #40]	; 0x28
   3f56c:	b	3f6a4 <__assert_fail@plt+0x2cc28>
   3f570:	ldr	r0, [r9, #116]	; 0x74
   3f574:	mov	r5, r1
   3f578:	add	r1, r1, r1, lsl #1
   3f57c:	ldr	r3, [sp, #48]	; 0x30
   3f580:	ldr	r2, [r0, r1, lsl #3]
   3f584:	cmp	r2, r3
   3f588:	bne	3f7e4 <__assert_fail@plt+0x2cd68>
   3f58c:	add	r0, r0, r1, lsl #3
   3f590:	ldr	r2, [sp, #52]	; 0x34
   3f594:	ldr	r1, [r0, #4]
   3f598:	cmp	r1, r2
   3f59c:	bne	3f7e4 <__assert_fail@plt+0x2cd68>
   3f5a0:	ldr	r2, [r0, #8]
   3f5a4:	ldr	r6, [r0, #12]
   3f5a8:	ldr	r0, [sp, #20]
   3f5ac:	ldr	r8, [r0, #24]
   3f5b0:	cmp	r6, r2
   3f5b4:	bne	3f5d0 <__assert_fail@plt+0x2cb54>
   3f5b8:	ldr	r1, [sp, #48]	; 0x30
   3f5bc:	ldr	r0, [r0, #20]
   3f5c0:	add	r1, r1, r1, lsl #1
   3f5c4:	add	r0, r0, r1, lsl #2
   3f5c8:	ldr	r0, [r0, #8]
   3f5cc:	b	3f5dc <__assert_fail@plt+0x2cb60>
   3f5d0:	ldr	r0, [r0, #12]
   3f5d4:	ldr	r1, [sp, #48]	; 0x30
   3f5d8:	add	r0, r0, r1, lsl #2
   3f5dc:	ldr	r9, [r0]
   3f5e0:	ldr	r0, [sp, #52]	; 0x34
   3f5e4:	str	r2, [fp, #-48]	; 0xffffffd0
   3f5e8:	add	r0, r6, r0
   3f5ec:	sub	r7, r0, r2
   3f5f0:	cmp	r7, #0
   3f5f4:	ble	3f63c <__assert_fail@plt+0x2cbc0>
   3f5f8:	ldr	r3, [sp, #40]	; 0x28
   3f5fc:	sub	r0, r7, #1
   3f600:	ldr	r1, [r3, #48]	; 0x30
   3f604:	cmp	r1, r0
   3f608:	beq	3f534 <__assert_fail@plt+0x2cab8>
   3f60c:	ldr	r1, [r3, #80]	; 0x50
   3f610:	cmp	r1, #2
   3f614:	blt	3f648 <__assert_fail@plt+0x2cbcc>
   3f618:	ldr	r0, [r3, #8]
   3f61c:	mov	r1, r7
   3f620:	sub	r0, r0, #4
   3f624:	ldr	r4, [r0, r1, lsl #2]
   3f628:	cmn	r4, #1
   3f62c:	bne	3f67c <__assert_fail@plt+0x2cc00>
   3f630:	sub	r1, r1, #1
   3f634:	cmp	r1, #0
   3f638:	bgt	3f624 <__assert_fail@plt+0x2cba8>
   3f63c:	ldr	r3, [sp, #40]	; 0x28
   3f640:	ldr	sl, [r3, #60]	; 0x3c
   3f644:	b	3f6a4 <__assert_fail@plt+0x2cc28>
   3f648:	ldr	r1, [r3, #4]
   3f64c:	ldr	r2, [r3, #68]	; 0x44
   3f650:	mov	sl, #1
   3f654:	ldrb	r0, [r1, r0]
   3f658:	ubfx	r1, r0, #5, #3
   3f65c:	ldr	r1, [r2, r1, lsl #2]
   3f660:	and	r2, r0, #31
   3f664:	tst	r1, sl, lsl r2
   3f668:	bne	3f6a4 <__assert_fail@plt+0x2cc28>
   3f66c:	mov	sl, #0
   3f670:	cmp	r0, #10
   3f674:	beq	3f698 <__assert_fail@plt+0x2cc1c>
   3f678:	b	3f6a4 <__assert_fail@plt+0x2cc28>
   3f67c:	ldr	r3, [sp, #40]	; 0x28
   3f680:	ldrb	r0, [r3, #78]	; 0x4e
   3f684:	cmp	r0, #0
   3f688:	bne	3f544 <__assert_fail@plt+0x2cac8>
   3f68c:	mov	sl, #0
   3f690:	cmp	r4, #10
   3f694:	bne	3f6a4 <__assert_fail@plt+0x2cc28>
   3f698:	ldrb	sl, [r3, #77]	; 0x4d
   3f69c:	cmp	sl, #0
   3f6a0:	movwne	sl, #2
   3f6a4:	ldr	r0, [r3, #100]	; 0x64
   3f6a8:	ldr	r2, [sp, #52]	; 0x34
   3f6ac:	add	r1, r9, r9, lsl #1
   3f6b0:	mov	r4, r3
   3f6b4:	add	r8, r8, r1, lsl #2
   3f6b8:	ldr	r2, [r0, r2, lsl #2]
   3f6bc:	ldr	r0, [r0, r7, lsl #2]
   3f6c0:	cmp	r2, #0
   3f6c4:	ldrne	r2, [r2, #8]
   3f6c8:	moveq	r2, #0
   3f6cc:	cmp	r0, #0
   3f6d0:	str	r2, [sp, #44]	; 0x2c
   3f6d4:	beq	3f740 <__assert_fail@plt+0x2ccc4>
   3f6d8:	ldr	r1, [r0, #40]	; 0x28
   3f6dc:	sub	r4, fp, #44	; 0x2c
   3f6e0:	mov	r2, r8
   3f6e4:	mov	r0, r4
   3f6e8:	bl	3fc74 <__assert_fail@plt+0x2d1f8>
   3f6ec:	cmp	r0, #0
   3f6f0:	str	r0, [fp, #-32]	; 0xffffffe0
   3f6f4:	bne	3f840 <__assert_fail@plt+0x2cdc4>
   3f6f8:	ldr	r1, [sp, #20]
   3f6fc:	sub	r0, fp, #32
   3f700:	mov	r2, r4
   3f704:	mov	r3, sl
   3f708:	bl	3dd9c <__assert_fail@plt+0x2b320>
   3f70c:	ldr	r4, [sp, #40]	; 0x28
   3f710:	ldr	r1, [r4, #100]	; 0x64
   3f714:	str	r0, [r1, r7, lsl #2]
   3f718:	ldr	r0, [fp, #-36]	; 0xffffffdc
   3f71c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3f720:	ldr	r0, [r4, #100]	; 0x64
   3f724:	ldr	r1, [r0, r7, lsl #2]
   3f728:	cmp	r1, #0
   3f72c:	bne	3f788 <__assert_fail@plt+0x2cd0c>
   3f730:	ldr	r9, [fp, #-32]	; 0xffffffe0
   3f734:	cmp	r9, #0
   3f738:	beq	3f788 <__assert_fail@plt+0x2cd0c>
   3f73c:	b	3f824 <__assert_fail@plt+0x2cda8>
   3f740:	ldr	r1, [sp, #20]
   3f744:	sub	r0, fp, #32
   3f748:	mov	r2, r8
   3f74c:	mov	r3, sl
   3f750:	bl	3dd9c <__assert_fail@plt+0x2b320>
   3f754:	ldr	r1, [r4, #100]	; 0x64
   3f758:	str	r0, [r1, r7, lsl #2]
   3f75c:	ldr	r0, [r4, #100]	; 0x64
   3f760:	ldr	r1, [r0, r7, lsl #2]
   3f764:	cmp	r1, #0
   3f768:	bne	3f788 <__assert_fail@plt+0x2cd0c>
   3f76c:	ldr	r9, [fp, #-32]	; 0xffffffe0
   3f770:	ldr	r1, [fp, #-48]	; 0xffffffd0
   3f774:	cmp	r9, #0
   3f778:	bne	3f824 <__assert_fail@plt+0x2cda8>
   3f77c:	cmp	r6, r1
   3f780:	bne	3f7e4 <__assert_fail@plt+0x2cd68>
   3f784:	b	3f794 <__assert_fail@plt+0x2cd18>
   3f788:	ldr	r1, [fp, #-48]	; 0xffffffd0
   3f78c:	cmp	r6, r1
   3f790:	bne	3f7e4 <__assert_fail@plt+0x2cd68>
   3f794:	ldr	r1, [sp, #52]	; 0x34
   3f798:	ldr	r0, [r0, r1, lsl #2]
   3f79c:	ldr	r1, [sp, #44]	; 0x2c
   3f7a0:	ldr	r0, [r0, #8]
   3f7a4:	cmp	r0, r1
   3f7a8:	ble	3f7e4 <__assert_fail@plt+0x2cd68>
   3f7ac:	ldr	r4, [sp, #40]	; 0x28
   3f7b0:	ldr	r2, [sp, #52]	; 0x34
   3f7b4:	mov	r1, r8
   3f7b8:	mov	r0, r4
   3f7bc:	bl	3edd0 <__assert_fail@plt+0x2c354>
   3f7c0:	cmp	r0, #0
   3f7c4:	str	r0, [fp, #-32]	; 0xffffffe0
   3f7c8:	bne	3f850 <__assert_fail@plt+0x2cdd4>
   3f7cc:	mov	r0, r4
   3f7d0:	mov	r1, r8
   3f7d4:	bl	3eecc <__assert_fail@plt+0x2c450>
   3f7d8:	cmp	r0, #0
   3f7dc:	str	r0, [fp, #-32]	; 0xffffffe0
   3f7e0:	bne	3f850 <__assert_fail@plt+0x2cdd4>
   3f7e4:	ldr	r9, [sp, #40]	; 0x28
   3f7e8:	ldr	r8, [sp, #52]	; 0x34
   3f7ec:	mov	r1, r5
   3f7f0:	add	r1, r5, #1
   3f7f4:	ldr	r0, [r9, #108]	; 0x6c
   3f7f8:	cmp	r1, r0
   3f7fc:	blt	3f570 <__assert_fail@plt+0x2caf4>
   3f800:	ldr	r1, [sp, #16]
   3f804:	ldr	r3, [sp, #24]
   3f808:	ldr	r2, [sp, #20]
   3f80c:	ldr	r0, [r1, #4]
   3f810:	add	r3, r3, #1
   3f814:	cmp	r3, r0
   3f818:	blt	3ef3c <__assert_fail@plt+0x2c4c0>
   3f81c:	mov	r9, #0
   3f820:	str	r9, [fp, #-32]	; 0xffffffe0
   3f824:	mov	r0, r9
   3f828:	sub	sp, fp, #28
   3f82c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f830:	mov	r9, r0
   3f834:	b	3f820 <__assert_fail@plt+0x2cda4>
   3f838:	mov	r9, #12
   3f83c:	b	3f820 <__assert_fail@plt+0x2cda4>
   3f840:	mov	r9, r0
   3f844:	ldr	r0, [fp, #-36]	; 0xffffffdc
   3f848:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3f84c:	b	3f824 <__assert_fail@plt+0x2cda8>
   3f850:	mov	r9, r0
   3f854:	b	3f824 <__assert_fail@plt+0x2cda8>
   3f858:	push	{r4, r5, r6, r7, fp, lr}
   3f85c:	add	fp, sp, #16
   3f860:	mov	r4, r0
   3f864:	ldr	r0, [r0, #36]	; 0x24
   3f868:	mov	r5, #12
   3f86c:	cmn	r0, #-536870910	; 0xe0000002
   3f870:	bhi	3fa58 <__assert_fail@plt+0x2cfdc>
   3f874:	ldr	r6, [r4, #48]	; 0x30
   3f878:	ldr	r2, [r4, #80]	; 0x50
   3f87c:	cmp	r6, r0, lsl #1
   3f880:	lslge	r6, r0, #1
   3f884:	cmp	r6, r1
   3f888:	movle	r6, r1
   3f88c:	cmp	r2, #2
   3f890:	blt	3f8d8 <__assert_fail@plt+0x2ce5c>
   3f894:	cmn	r6, #-1073741823	; 0xc0000001
   3f898:	bhi	3fa58 <__assert_fail@plt+0x2cfdc>
   3f89c:	ldr	r0, [r4, #8]
   3f8a0:	lsl	r7, r6, #2
   3f8a4:	mov	r1, r7
   3f8a8:	bl	33040 <__assert_fail@plt+0x205c4>
   3f8ac:	cmp	r0, #0
   3f8b0:	beq	3fa58 <__assert_fail@plt+0x2cfdc>
   3f8b4:	str	r0, [r4, #8]
   3f8b8:	ldr	r0, [r4, #12]
   3f8bc:	cmp	r0, #0
   3f8c0:	beq	3f8d8 <__assert_fail@plt+0x2ce5c>
   3f8c4:	mov	r1, r7
   3f8c8:	bl	33040 <__assert_fail@plt+0x205c4>
   3f8cc:	cmp	r0, #0
   3f8d0:	beq	3fa58 <__assert_fail@plt+0x2cfdc>
   3f8d4:	str	r0, [r4, #12]
   3f8d8:	ldrb	r0, [r4, #75]	; 0x4b
   3f8dc:	cmp	r0, #0
   3f8e0:	beq	3f8fc <__assert_fail@plt+0x2ce80>
   3f8e4:	ldr	r0, [r4, #4]
   3f8e8:	mov	r1, r6
   3f8ec:	bl	33040 <__assert_fail@plt+0x205c4>
   3f8f0:	cmp	r0, #0
   3f8f4:	beq	3fa58 <__assert_fail@plt+0x2cfdc>
   3f8f8:	str	r0, [r4, #4]
   3f8fc:	str	r6, [r4, #36]	; 0x24
   3f900:	ldr	r0, [r4, #100]	; 0x64
   3f904:	cmp	r0, #0
   3f908:	beq	3f924 <__assert_fail@plt+0x2cea8>
   3f90c:	mov	r1, #4
   3f910:	add	r1, r1, r6, lsl #2
   3f914:	bl	33040 <__assert_fail@plt+0x205c4>
   3f918:	cmp	r0, #0
   3f91c:	beq	3fa58 <__assert_fail@plt+0x2cfdc>
   3f920:	str	r0, [r4, #100]	; 0x64
   3f924:	ldrb	r1, [r4, #72]	; 0x48
   3f928:	ldr	r0, [r4, #80]	; 0x50
   3f92c:	cmp	r1, #0
   3f930:	beq	3f950 <__assert_fail@plt+0x2ced4>
   3f934:	cmp	r0, #2
   3f938:	blt	3f964 <__assert_fail@plt+0x2cee8>
   3f93c:	mov	r0, r4
   3f940:	bl	38260 <__assert_fail@plt+0x257e4>
   3f944:	cmp	r0, #0
   3f948:	popne	{r4, r5, r6, r7, fp, pc}
   3f94c:	b	3fa54 <__assert_fail@plt+0x2cfd8>
   3f950:	cmp	r0, #2
   3f954:	blt	3f9dc <__assert_fail@plt+0x2cf60>
   3f958:	mov	r0, r4
   3f95c:	bl	38920 <__assert_fail@plt+0x25ea4>
   3f960:	b	3fa54 <__assert_fail@plt+0x2cfd8>
   3f964:	ldr	r6, [r4, #36]	; 0x24
   3f968:	ldr	r0, [r4, #48]	; 0x30
   3f96c:	ldr	r5, [r4, #28]
   3f970:	cmp	r6, r0
   3f974:	movgt	r6, r0
   3f978:	cmp	r5, r6
   3f97c:	bge	3f9d0 <__assert_fail@plt+0x2cf54>
   3f980:	ldr	r1, [r4]
   3f984:	ldr	r2, [r4, #24]
   3f988:	ldr	r0, [r4, #64]	; 0x40
   3f98c:	add	r1, r1, r2
   3f990:	cmp	r0, #0
   3f994:	ldrb	r7, [r1, r5]
   3f998:	ldrbne	r7, [r0, r7]
   3f99c:	add	r0, r7, #128	; 0x80
   3f9a0:	lsr	r0, r0, #7
   3f9a4:	cmp	r0, #2
   3f9a8:	bhi	3f9b8 <__assert_fail@plt+0x2cf3c>
   3f9ac:	bl	12728 <__ctype_toupper_loc@plt>
   3f9b0:	ldr	r0, [r0]
   3f9b4:	ldr	r7, [r0, r7, lsl #2]
   3f9b8:	ldr	r0, [r4, #4]
   3f9bc:	strb	r7, [r0, r5]
   3f9c0:	add	r5, r5, #1
   3f9c4:	cmp	r5, r6
   3f9c8:	blt	3f980 <__assert_fail@plt+0x2cf04>
   3f9cc:	mov	r5, r6
   3f9d0:	str	r5, [r4, #28]
   3f9d4:	str	r5, [r4, #32]
   3f9d8:	b	3fa54 <__assert_fail@plt+0x2cfd8>
   3f9dc:	ldr	r2, [r4, #64]	; 0x40
   3f9e0:	cmp	r2, #0
   3f9e4:	beq	3fa54 <__assert_fail@plt+0x2cfd8>
   3f9e8:	ldr	r0, [r4, #36]	; 0x24
   3f9ec:	ldr	r3, [r4, #48]	; 0x30
   3f9f0:	ldr	r1, [r4, #28]
   3f9f4:	cmp	r0, r3
   3f9f8:	movgt	r0, r3
   3f9fc:	cmp	r1, r0
   3fa00:	bge	3fa4c <__assert_fail@plt+0x2cfd0>
   3fa04:	ldm	r4, {r3, r7}
   3fa08:	ldr	r6, [r4, #24]
   3fa0c:	add	r6, r6, r1
   3fa10:	ldrb	r3, [r3, r6]
   3fa14:	ldrb	r2, [r2, r3]
   3fa18:	strb	r2, [r7, r1]
   3fa1c:	b	3fa3c <__assert_fail@plt+0x2cfc0>
   3fa20:	ldm	r4, {r2, r3}
   3fa24:	ldr	r7, [r4, #24]
   3fa28:	ldr	r6, [r4, #64]	; 0x40
   3fa2c:	add	r2, r2, r7
   3fa30:	ldrb	r2, [r2, r1]
   3fa34:	ldrb	r2, [r6, r2]
   3fa38:	strb	r2, [r3, r1]
   3fa3c:	add	r1, r1, #1
   3fa40:	cmp	r1, r0
   3fa44:	blt	3fa20 <__assert_fail@plt+0x2cfa4>
   3fa48:	mov	r1, r0
   3fa4c:	str	r1, [r4, #28]
   3fa50:	str	r1, [r4, #32]
   3fa54:	mov	r5, #0
   3fa58:	mov	r0, r5
   3fa5c:	pop	{r4, r5, r6, r7, fp, pc}
   3fa60:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3fa64:	add	fp, sp, #24
   3fa68:	sub	sp, sp, #16
   3fa6c:	mov	r9, r0
   3fa70:	mov	r4, r1
   3fa74:	ldr	r5, [r1, #40]	; 0x28
   3fa78:	ldr	r7, [r1, #84]	; 0x54
   3fa7c:	ldr	r0, [r1, #100]	; 0x64
   3fa80:	ldr	r1, [r1, #104]	; 0x68
   3fa84:	mov	r6, r2
   3fa88:	cmp	r5, r1
   3fa8c:	ble	3fa9c <__assert_fail@plt+0x2d020>
   3fa90:	str	r6, [r0, r5, lsl #2]
   3fa94:	str	r5, [r4, #104]	; 0x68
   3fa98:	b	3fbd0 <__assert_fail@plt+0x2d154>
   3fa9c:	ldr	r1, [r0, r5, lsl #2]
   3faa0:	cmp	r1, #0
   3faa4:	beq	3fae0 <__assert_fail@plt+0x2d064>
   3faa8:	ldr	r2, [r1, #40]	; 0x28
   3faac:	cmp	r6, #0
   3fab0:	beq	3fae8 <__assert_fail@plt+0x2d06c>
   3fab4:	ldr	r8, [r6, #40]	; 0x28
   3fab8:	mov	r0, sp
   3fabc:	mov	r1, r8
   3fac0:	bl	3fc74 <__assert_fail@plt+0x2d1f8>
   3fac4:	cmp	r0, #0
   3fac8:	str	r0, [r9]
   3facc:	bne	3fc3c <__assert_fail@plt+0x2d1c0>
   3fad0:	ldr	r0, [r4, #40]	; 0x28
   3fad4:	cmp	r0, #0
   3fad8:	bgt	3fb08 <__assert_fail@plt+0x2d08c>
   3fadc:	b	3fb44 <__assert_fail@plt+0x2d0c8>
   3fae0:	str	r6, [r0, r5, lsl #2]
   3fae4:	b	3fbd0 <__assert_fail@plt+0x2d154>
   3fae8:	ldr	r0, [r2, #8]
   3faec:	vldr	d16, [r2]
   3faf0:	mov	r8, #0
   3faf4:	str	r0, [sp, #8]
   3faf8:	mov	r0, r5
   3fafc:	vstr	d16, [sp]
   3fb00:	cmp	r0, #0
   3fb04:	ble	3fb44 <__assert_fail@plt+0x2d0c8>
   3fb08:	ldr	r2, [r4, #48]	; 0x30
   3fb0c:	sub	r1, r0, #1
   3fb10:	cmp	r2, r1
   3fb14:	beq	3fc44 <__assert_fail@plt+0x2d1c8>
   3fb18:	ldr	r2, [r4, #80]	; 0x50
   3fb1c:	cmp	r2, #2
   3fb20:	blt	3fb4c <__assert_fail@plt+0x2d0d0>
   3fb24:	ldr	r1, [r4, #8]
   3fb28:	sub	r1, r1, #4
   3fb2c:	ldr	r6, [r1, r0, lsl #2]
   3fb30:	cmn	r6, #1
   3fb34:	bne	3fb80 <__assert_fail@plt+0x2d104>
   3fb38:	sub	r0, r0, #1
   3fb3c:	cmp	r0, #0
   3fb40:	bgt	3fb2c <__assert_fail@plt+0x2d0b0>
   3fb44:	ldr	r3, [r4, #60]	; 0x3c
   3fb48:	b	3fba4 <__assert_fail@plt+0x2d128>
   3fb4c:	ldr	r0, [r4, #4]
   3fb50:	ldr	r2, [r4, #68]	; 0x44
   3fb54:	mov	r3, #1
   3fb58:	ldrb	r0, [r0, r1]
   3fb5c:	ubfx	r1, r0, #5, #3
   3fb60:	ldr	r1, [r2, r1, lsl #2]
   3fb64:	and	r2, r0, #31
   3fb68:	tst	r1, r3, lsl r2
   3fb6c:	bne	3fba4 <__assert_fail@plt+0x2d128>
   3fb70:	mov	r3, #0
   3fb74:	cmp	r0, #10
   3fb78:	beq	3fb98 <__assert_fail@plt+0x2d11c>
   3fb7c:	b	3fba4 <__assert_fail@plt+0x2d128>
   3fb80:	ldrb	r0, [r4, #78]	; 0x4e
   3fb84:	cmp	r0, #0
   3fb88:	bne	3fc54 <__assert_fail@plt+0x2d1d8>
   3fb8c:	mov	r3, #0
   3fb90:	cmp	r6, #10
   3fb94:	bne	3fba4 <__assert_fail@plt+0x2d128>
   3fb98:	ldrb	r3, [r4, #77]	; 0x4d
   3fb9c:	cmp	r3, #0
   3fba0:	movwne	r3, #2
   3fba4:	mov	r2, sp
   3fba8:	mov	r0, r9
   3fbac:	mov	r1, r7
   3fbb0:	bl	3dd9c <__assert_fail@plt+0x2b320>
   3fbb4:	mov	r6, r0
   3fbb8:	ldr	r0, [r4, #100]	; 0x64
   3fbbc:	cmp	r8, #0
   3fbc0:	str	r6, [r0, r5, lsl #2]
   3fbc4:	beq	3fbd0 <__assert_fail@plt+0x2d154>
   3fbc8:	ldr	r0, [sp, #8]
   3fbcc:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   3fbd0:	cmp	r6, #0
   3fbd4:	ldrne	r0, [r7, #76]	; 0x4c
   3fbd8:	cmpne	r0, #0
   3fbdc:	bne	3fbec <__assert_fail@plt+0x2d170>
   3fbe0:	mov	r0, r6
   3fbe4:	sub	sp, fp, #24
   3fbe8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3fbec:	add	r7, r6, #4
   3fbf0:	mov	r0, r4
   3fbf4:	mov	r2, r5
   3fbf8:	mov	r1, r7
   3fbfc:	bl	3edd0 <__assert_fail@plt+0x2c354>
   3fc00:	cmp	r0, #0
   3fc04:	str	r0, [r9]
   3fc08:	bne	3fc3c <__assert_fail@plt+0x2d1c0>
   3fc0c:	ldrb	r0, [r6, #52]	; 0x34
   3fc10:	tst	r0, #64	; 0x40
   3fc14:	beq	3fbe0 <__assert_fail@plt+0x2d164>
   3fc18:	mov	r0, r4
   3fc1c:	mov	r1, r7
   3fc20:	bl	3eecc <__assert_fail@plt+0x2c450>
   3fc24:	str	r0, [r9]
   3fc28:	cmp	r0, #0
   3fc2c:	mov	r6, #0
   3fc30:	ldreq	r0, [r4, #100]	; 0x64
   3fc34:	ldreq	r6, [r0, r5, lsl #2]
   3fc38:	b	3fbe0 <__assert_fail@plt+0x2d164>
   3fc3c:	mov	r6, #0
   3fc40:	b	3fbe0 <__assert_fail@plt+0x2d164>
   3fc44:	ldr	r0, [r4, #88]	; 0x58
   3fc48:	and	r0, r0, #2
   3fc4c:	eor	r3, r0, #10
   3fc50:	b	3fba4 <__assert_fail@plt+0x2d128>
   3fc54:	mov	r0, r6
   3fc58:	bl	127dc <iswalnum@plt>
   3fc5c:	mov	r3, #1
   3fc60:	cmp	r6, #95	; 0x5f
   3fc64:	beq	3fba4 <__assert_fail@plt+0x2d128>
   3fc68:	cmp	r0, #0
   3fc6c:	beq	3fb8c <__assert_fail@plt+0x2d110>
   3fc70:	b	3fba4 <__assert_fail@plt+0x2d128>
   3fc74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3fc78:	add	fp, sp, #28
   3fc7c:	sub	sp, sp, #20
   3fc80:	mov	sl, r2
   3fc84:	cmp	r1, #0
   3fc88:	str	r0, [sp, #16]
   3fc8c:	beq	3fcf4 <__assert_fail@plt+0x2d278>
   3fc90:	ldr	r0, [r1, #4]
   3fc94:	mov	r8, r1
   3fc98:	cmp	sl, #0
   3fc9c:	beq	3fcb0 <__assert_fail@plt+0x2d234>
   3fca0:	cmp	r0, #1
   3fca4:	ldrge	r1, [sl, #4]
   3fca8:	cmpge	r1, #1
   3fcac:	bge	3fd68 <__assert_fail@plt+0x2d2ec>
   3fcb0:	cmp	r0, #1
   3fcb4:	blt	3fcf4 <__assert_fail@plt+0x2d278>
   3fcb8:	ldr	r1, [sp, #16]
   3fcbc:	str	r0, [r1, #4]
   3fcc0:	ldr	r1, [r8, #4]
   3fcc4:	cmp	r1, #1
   3fcc8:	blt	3fd4c <__assert_fail@plt+0x2d2d0>
   3fccc:	ldr	r4, [sp, #16]
   3fcd0:	str	r0, [r4]
   3fcd4:	lsl	r0, r0, #2
   3fcd8:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3fcdc:	cmp	r0, #0
   3fce0:	str	r0, [r4, #8]
   3fce4:	beq	3fedc <__assert_fail@plt+0x2d460>
   3fce8:	ldr	r2, [r8, #4]
   3fcec:	ldr	r1, [r8, #8]
   3fcf0:	b	3fd40 <__assert_fail@plt+0x2d2c4>
   3fcf4:	cmp	sl, #0
   3fcf8:	beq	3fd4c <__assert_fail@plt+0x2d2d0>
   3fcfc:	ldr	r0, [sl, #4]
   3fd00:	cmp	r0, #1
   3fd04:	blt	3fd4c <__assert_fail@plt+0x2d2d0>
   3fd08:	ldr	r1, [sp, #16]
   3fd0c:	str	r0, [r1, #4]
   3fd10:	ldr	r1, [sl, #4]
   3fd14:	cmp	r1, #1
   3fd18:	blt	3fd4c <__assert_fail@plt+0x2d2d0>
   3fd1c:	ldr	r4, [sp, #16]
   3fd20:	str	r0, [r4]
   3fd24:	lsl	r0, r0, #2
   3fd28:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3fd2c:	cmp	r0, #0
   3fd30:	str	r0, [r4, #8]
   3fd34:	beq	3fedc <__assert_fail@plt+0x2d460>
   3fd38:	ldr	r2, [sl, #4]
   3fd3c:	ldr	r1, [sl, #8]
   3fd40:	lsl	r2, r2, #2
   3fd44:	bl	124b8 <memcpy@plt>
   3fd48:	b	3fed0 <__assert_fail@plt+0x2d454>
   3fd4c:	ldr	r1, [sp, #16]
   3fd50:	mov	r0, #0
   3fd54:	str	r0, [r1]
   3fd58:	str	r0, [r1, #4]
   3fd5c:	str	r0, [r1, #8]
   3fd60:	sub	sp, fp, #28
   3fd64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3fd68:	ldr	r4, [sp, #16]
   3fd6c:	add	r0, r1, r0
   3fd70:	str	r0, [r4]
   3fd74:	lsl	r0, r0, #2
   3fd78:	bl	3233c <__assert_fail@plt+0x1f8c0>
   3fd7c:	cmp	r0, #0
   3fd80:	str	r0, [r4, #8]
   3fd84:	beq	3feec <__assert_fail@plt+0x2d470>
   3fd88:	ldr	r9, [sl, #4]
   3fd8c:	ldr	lr, [r8, #4]
   3fd90:	mov	r1, #0
   3fd94:	mov	r7, #0
   3fd98:	cmp	r9, #0
   3fd9c:	movwgt	r1, #1
   3fda0:	cmp	lr, #1
   3fda4:	blt	3fe70 <__assert_fail@plt+0x2d3f4>
   3fda8:	mov	r2, #0
   3fdac:	mov	ip, #0
   3fdb0:	str	r2, [sp, #8]
   3fdb4:	mov	r2, #0
   3fdb8:	str	r2, [sp, #12]
   3fdbc:	mov	r2, #0
   3fdc0:	ldr	r4, [sp, #12]
   3fdc4:	mov	r7, ip
   3fdc8:	tst	r1, #1
   3fdcc:	beq	3fea0 <__assert_fail@plt+0x2d424>
   3fdd0:	ldr	r1, [sl, #8]
   3fdd4:	ldr	r5, [r1, r7, lsl #2]
   3fdd8:	ldr	r1, [r8, #8]
   3fddc:	ldr	r3, [r1, r2, lsl #2]
   3fde0:	cmp	r3, r5
   3fde4:	ble	3fe0c <__assert_fail@plt+0x2d390>
   3fde8:	add	r7, r7, #1
   3fdec:	mov	r1, #0
   3fdf0:	str	r5, [r0, r4, lsl #2]
   3fdf4:	add	r4, r4, #1
   3fdf8:	cmp	r9, r7
   3fdfc:	movwgt	r1, #1
   3fe00:	cmp	lr, r2
   3fe04:	bgt	3fdc8 <__assert_fail@plt+0x2d34c>
   3fe08:	b	3fe74 <__assert_fail@plt+0x2d3f8>
   3fe0c:	str	r3, [r0, r4, lsl #2]
   3fe10:	ldr	r6, [sp, #8]
   3fe14:	add	r1, r7, #1
   3fe18:	mov	ip, r7
   3fe1c:	add	r2, r2, #1
   3fe20:	ldr	r9, [sl, #4]
   3fe24:	ldr	lr, [r8, #4]
   3fe28:	moveq	ip, r1
   3fe2c:	str	r1, [sp, #4]
   3fe30:	mov	r1, #0
   3fe34:	sub	r6, r6, #1
   3fe38:	cmp	r9, ip
   3fe3c:	str	r6, [sp, #8]
   3fe40:	add	r6, r4, #1
   3fe44:	movwgt	r1, #1
   3fe48:	cmp	lr, r2
   3fe4c:	str	r6, [sp, #12]
   3fe50:	bgt	3fdc0 <__assert_fail@plt+0x2d344>
   3fe54:	ldr	r2, [sp, #4]
   3fe58:	cmp	r3, r5
   3fe5c:	add	r4, r4, #1
   3fe60:	moveq	r7, r2
   3fe64:	cmp	r1, #0
   3fe68:	bne	3fe7c <__assert_fail@plt+0x2d400>
   3fe6c:	b	3fec8 <__assert_fail@plt+0x2d44c>
   3fe70:	mov	r4, #0
   3fe74:	cmp	r1, #0
   3fe78:	beq	3fec8 <__assert_fail@plt+0x2d44c>
   3fe7c:	ldr	r1, [sl, #8]
   3fe80:	sub	r2, r9, r7
   3fe84:	add	r0, r0, r4, lsl #2
   3fe88:	lsl	r2, r2, #2
   3fe8c:	add	r1, r1, r7, lsl #2
   3fe90:	bl	124b8 <memcpy@plt>
   3fe94:	sub	r0, r4, r7
   3fe98:	add	r4, r0, r9
   3fe9c:	b	3fec8 <__assert_fail@plt+0x2d44c>
   3fea0:	ldr	r1, [r8, #8]
   3fea4:	add	r0, r0, r4, lsl #2
   3fea8:	add	r1, r1, r2, lsl #2
   3feac:	sub	r2, lr, r2
   3feb0:	lsl	r2, r2, #2
   3feb4:	bl	124b8 <memcpy@plt>
   3feb8:	ldr	r0, [r8, #4]
   3febc:	ldr	r1, [sp, #8]
   3fec0:	add	r0, r0, r1
   3fec4:	add	r4, r0, r4
   3fec8:	ldr	r0, [sp, #16]
   3fecc:	str	r4, [r0, #4]
   3fed0:	mov	r0, #0
   3fed4:	sub	sp, fp, #28
   3fed8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3fedc:	ldr	r1, [sp, #16]
   3fee0:	mov	r0, #0
   3fee4:	str	r0, [r1]
   3fee8:	str	r0, [r1, #4]
   3feec:	mov	r0, #12
   3fef0:	sub	sp, fp, #28
   3fef4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3fef8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3fefc:	add	fp, sp, #28
   3ff00:	sub	sp, sp, #12
   3ff04:	mov	r6, r2
   3ff08:	mov	r7, r3
   3ff0c:	ldr	r2, [r2]
   3ff10:	ldr	r9, [fp, #8]
   3ff14:	mov	r4, r0
   3ff18:	mov	r0, #8
   3ff1c:	mov	r8, r1
   3ff20:	ldr	r3, [r6, #4]
   3ff24:	str	r0, [sp, #8]
   3ff28:	add	r1, r6, #8
   3ff2c:	mov	r0, r4
   3ff30:	stm	sp, {r7, r9}
   3ff34:	bl	400bc <__assert_fail@plt+0x2d640>
   3ff38:	mov	r5, r0
   3ff3c:	cmp	r0, #0
   3ff40:	beq	3ff50 <__assert_fail@plt+0x2d4d4>
   3ff44:	mov	r0, r5
   3ff48:	sub	sp, fp, #28
   3ff4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ff50:	ldr	r0, [r4, #108]	; 0x6c
   3ff54:	ldr	r1, [r4, #112]	; 0x70
   3ff58:	ldr	sl, [r6, #4]
   3ff5c:	ldr	r5, [r8]
   3ff60:	cmp	r0, r1
   3ff64:	blt	3ffb4 <__assert_fail@plt+0x2d538>
   3ff68:	ldr	r0, [r4, #116]	; 0x74
   3ff6c:	add	r1, r1, r1, lsl #1
   3ff70:	lsl	r1, r1, #4
   3ff74:	bl	33040 <__assert_fail@plt+0x205c4>
   3ff78:	cmp	r0, #0
   3ff7c:	beq	400ac <__assert_fail@plt+0x2d630>
   3ff80:	str	r0, [r4, #116]	; 0x74
   3ff84:	ldr	r1, [r4, #108]	; 0x6c
   3ff88:	ldr	r2, [r4, #112]	; 0x70
   3ff8c:	add	r1, r1, r1, lsl #1
   3ff90:	add	r0, r0, r1, lsl #3
   3ff94:	add	r1, r2, r2, lsl #1
   3ff98:	lsl	r2, r1, #3
   3ff9c:	mov	r1, #0
   3ffa0:	bl	12800 <memset@plt>
   3ffa4:	ldr	r1, [r4, #112]	; 0x70
   3ffa8:	ldr	r0, [r4, #108]	; 0x6c
   3ffac:	lsl	r1, r1, #1
   3ffb0:	str	r1, [r4, #112]	; 0x70
   3ffb4:	ldr	r1, [r4, #116]	; 0x74
   3ffb8:	cmp	r0, #1
   3ffbc:	blt	3ffdc <__assert_fail@plt+0x2d560>
   3ffc0:	sub	r2, r0, #1
   3ffc4:	add	r2, r2, r2, lsl #1
   3ffc8:	add	r2, r1, r2, lsl #3
   3ffcc:	ldr	r3, [r2, #4]
   3ffd0:	cmp	r3, r9
   3ffd4:	moveq	r3, #1
   3ffd8:	strbeq	r3, [r2, #20]
   3ffdc:	add	r2, r0, r0, lsl #1
   3ffe0:	cmp	sl, r5
   3ffe4:	mov	r3, #0
   3ffe8:	add	r0, r0, #1
   3ffec:	str	r7, [r1, r2, lsl #3]!
   3fff0:	mov	r2, #0
   3fff4:	mvneq	r3, #0
   3fff8:	str	r9, [r1, #4]
   3fffc:	str	r5, [r1, #8]
   40000:	str	sl, [r1, #12]
   40004:	str	r3, [r1, #16]
   40008:	str	r0, [r4, #108]	; 0x6c
   4000c:	strb	r2, [r1, #20]
   40010:	sub	r0, sl, r5
   40014:	ldr	r1, [r4, #120]	; 0x78
   40018:	cmp	r1, r0
   4001c:	strlt	r0, [r4, #120]	; 0x78
   40020:	ldr	r0, [r6, #4]
   40024:	ldr	r1, [r8]
   40028:	ldr	r7, [r4, #104]	; 0x68
   4002c:	add	r0, r0, r9
   40030:	sub	r6, r0, r1
   40034:	ldr	r0, [r4, #36]	; 0x24
   40038:	cmp	r0, r6
   4003c:	ldrle	r1, [r4, #48]	; 0x30
   40040:	cmple	r0, r1
   40044:	blt	40090 <__assert_fail@plt+0x2d614>
   40048:	ldr	r0, [r4, #28]
   4004c:	cmp	r0, r6
   40050:	ldrle	r1, [r4, #48]	; 0x30
   40054:	cmple	r0, r1
   40058:	blt	40090 <__assert_fail@plt+0x2d614>
   4005c:	mov	r5, #0
   40060:	cmp	r6, r7
   40064:	ble	3ff44 <__assert_fail@plt+0x2d4c8>
   40068:	sub	r0, r6, r7
   4006c:	mov	r1, #0
   40070:	mov	r5, #0
   40074:	lsl	r2, r0, #2
   40078:	ldr	r0, [r4, #100]	; 0x64
   4007c:	add	r0, r0, r7, lsl #2
   40080:	add	r0, r0, #4
   40084:	bl	12800 <memset@plt>
   40088:	str	r6, [r4, #104]	; 0x68
   4008c:	b	3ff44 <__assert_fail@plt+0x2d4c8>
   40090:	add	r1, r6, #1
   40094:	mov	r0, r4
   40098:	bl	3f858 <__assert_fail@plt+0x2cddc>
   4009c:	mov	r5, r0
   400a0:	cmp	r0, #0
   400a4:	bne	3ff44 <__assert_fail@plt+0x2d4c8>
   400a8:	b	4005c <__assert_fail@plt+0x2d5e0>
   400ac:	ldr	r0, [r4, #116]	; 0x74
   400b0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   400b4:	mov	r5, #12
   400b8:	b	3ff44 <__assert_fail@plt+0x2d4c8>
   400bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   400c0:	add	fp, sp, #28
   400c4:	sub	sp, sp, #84	; 0x54
   400c8:	ldr	sl, [r0, #84]	; 0x54
   400cc:	mov	r8, r2
   400d0:	mov	r2, #0
   400d4:	mov	r9, r3
   400d8:	ldr	r3, [fp, #12]
   400dc:	str	r0, [sp, #40]	; 0x28
   400e0:	str	r2, [fp, #-52]	; 0xffffffcc
   400e4:	ldr	r5, [r1, #4]
   400e8:	ldr	r2, [sl]
   400ec:	str	sl, [sp, #20]
   400f0:	ldr	r2, [r2, r8, lsl #3]
   400f4:	str	r2, [sp, #24]
   400f8:	ldr	r2, [r0, #120]	; 0x78
   400fc:	add	r2, r2, r3
   40100:	cmp	r5, r2
   40104:	ble	409d8 <__assert_fail@plt+0x2df5c>
   40108:	add	r4, r1, #8
   4010c:	ldr	r2, [r0, #40]	; 0x28
   40110:	ldr	r5, [r1]
   40114:	ldr	r3, [r0, #88]	; 0x58
   40118:	str	r1, [sp, #16]
   4011c:	str	r2, [sp, #12]
   40120:	ldr	r2, [r0, #100]	; 0x64
   40124:	cmp	r5, #0
   40128:	moveq	r5, r9
   4012c:	cmp	r5, #0
   40130:	str	r2, [sp, #8]
   40134:	ldr	r2, [r4]
   40138:	str	r2, [r0, #100]	; 0x64
   4013c:	str	r5, [r0, #40]	; 0x28
   40140:	ble	40184 <__assert_fail@plt+0x2d708>
   40144:	ldr	r2, [r0, #48]	; 0x30
   40148:	sub	r7, r5, #1
   4014c:	cmp	r2, r7
   40150:	beq	40a48 <__assert_fail@plt+0x2dfcc>
   40154:	ldr	r2, [r0, #80]	; 0x50
   40158:	cmp	r2, #2
   4015c:	blt	401c8 <__assert_fail@plt+0x2d74c>
   40160:	ldr	r2, [r0, #8]
   40164:	mov	r3, r5
   40168:	sub	r2, r2, #4
   4016c:	ldr	r6, [r2, r3, lsl #2]
   40170:	cmn	r6, #1
   40174:	bne	401fc <__assert_fail@plt+0x2d780>
   40178:	sub	r3, r3, #1
   4017c:	cmp	r3, #0
   40180:	bgt	4016c <__assert_fail@plt+0x2d6f0>
   40184:	ldr	r7, [r0, #60]	; 0x3c
   40188:	cmp	r5, r9
   4018c:	beq	4022c <__assert_fail@plt+0x2d7b0>
   40190:	ldr	r0, [sp, #40]	; 0x28
   40194:	ldr	r0, [r0, #100]	; 0x64
   40198:	ldr	r4, [r0, r5, lsl #2]
   4019c:	cmp	r4, #0
   401a0:	beq	402e8 <__assert_fail@plt+0x2d86c>
   401a4:	ldrb	r0, [r4, #52]	; 0x34
   401a8:	ldr	r8, [fp, #16]
   401ac:	tst	r0, #64	; 0x40
   401b0:	bne	40300 <__assert_fail@plt+0x2d884>
   401b4:	mov	r0, #0
   401b8:	str	r0, [sp, #52]	; 0x34
   401bc:	str	r0, [sp, #48]	; 0x30
   401c0:	str	r0, [sp, #56]	; 0x38
   401c4:	b	4034c <__assert_fail@plt+0x2d8d0>
   401c8:	ldr	r3, [r0, #4]
   401cc:	ldr	r2, [r0, #68]	; 0x44
   401d0:	ldrb	r0, [r3, r7]
   401d4:	mov	r7, #1
   401d8:	ubfx	r1, r0, #5, #3
   401dc:	ldr	r1, [r2, r1, lsl #2]
   401e0:	and	r2, r0, #31
   401e4:	tst	r1, r7, lsl r2
   401e8:	bne	40224 <__assert_fail@plt+0x2d7a8>
   401ec:	mov	r7, #0
   401f0:	cmp	r0, #10
   401f4:	beq	40214 <__assert_fail@plt+0x2d798>
   401f8:	b	40224 <__assert_fail@plt+0x2d7a8>
   401fc:	ldrb	r0, [r0, #78]	; 0x4e
   40200:	cmp	r0, #0
   40204:	bne	40a84 <__assert_fail@plt+0x2e008>
   40208:	mov	r7, #0
   4020c:	cmp	r6, #10
   40210:	bne	40224 <__assert_fail@plt+0x2d7a8>
   40214:	ldr	r0, [sp, #40]	; 0x28
   40218:	ldrb	r7, [r0, #77]	; 0x4d
   4021c:	cmp	r7, #0
   40220:	movwne	r7, #2
   40224:	cmp	r5, r9
   40228:	bne	40190 <__assert_fail@plt+0x2d714>
   4022c:	mov	r0, #1
   40230:	str	r0, [sp, #52]	; 0x34
   40234:	str	r0, [sp, #48]	; 0x30
   40238:	mov	r0, #4
   4023c:	bl	3233c <__assert_fail@plt+0x1f8c0>
   40240:	cmp	r0, #0
   40244:	str	r0, [sp, #56]	; 0x38
   40248:	beq	40a6c <__assert_fail@plt+0x2dff0>
   4024c:	str	r8, [r0]
   40250:	ldr	r8, [fp, #16]
   40254:	ldr	r2, [sp, #24]
   40258:	mov	r0, #0
   4025c:	add	r1, sp, #48	; 0x30
   40260:	str	r0, [fp, #-52]	; 0xffffffcc
   40264:	mov	r0, sl
   40268:	mov	r3, r8
   4026c:	bl	40aa4 <__assert_fail@plt+0x2e028>
   40270:	cmp	r0, #0
   40274:	str	r0, [fp, #-52]	; 0xffffffcc
   40278:	bne	40a5c <__assert_fail@plt+0x2dfe0>
   4027c:	ldr	r0, [sp, #52]	; 0x34
   40280:	cmp	r0, #0
   40284:	beq	402ac <__assert_fail@plt+0x2d830>
   40288:	ldr	r0, [sp, #40]	; 0x28
   4028c:	ldr	r3, [sp, #24]
   40290:	add	r1, sp, #48	; 0x30
   40294:	mov	r2, r5
   40298:	str	r8, [sp]
   4029c:	bl	40be0 <__assert_fail@plt+0x2e164>
   402a0:	cmp	r0, #0
   402a4:	str	r0, [fp, #-52]	; 0xffffffcc
   402a8:	bne	40a5c <__assert_fail@plt+0x2dfe0>
   402ac:	ldr	r1, [sp, #20]
   402b0:	sub	r0, fp, #52	; 0x34
   402b4:	add	r2, sp, #48	; 0x30
   402b8:	mov	r3, r7
   402bc:	bl	3dd9c <__assert_fail@plt+0x2b320>
   402c0:	mov	r4, r0
   402c4:	cmp	r0, #0
   402c8:	bne	402d8 <__assert_fail@plt+0x2d85c>
   402cc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   402d0:	cmp	r0, #0
   402d4:	bne	409c8 <__assert_fail@plt+0x2df4c>
   402d8:	ldr	r0, [sp, #40]	; 0x28
   402dc:	ldr	r0, [r0, #100]	; 0x64
   402e0:	str	r4, [r0, r5, lsl #2]
   402e4:	b	4034c <__assert_fail@plt+0x2d8d0>
   402e8:	ldr	r8, [fp, #16]
   402ec:	mov	r4, #0
   402f0:	str	r4, [sp, #52]	; 0x34
   402f4:	str	r4, [sp, #48]	; 0x30
   402f8:	str	r4, [sp, #56]	; 0x38
   402fc:	b	4034c <__assert_fail@plt+0x2d8d0>
   40300:	ldr	r0, [r4, #8]
   40304:	cmp	r0, #1
   40308:	str	r0, [sp, #52]	; 0x34
   4030c:	blt	40974 <__assert_fail@plt+0x2def8>
   40310:	str	r0, [sp, #48]	; 0x30
   40314:	lsl	r0, r0, #2
   40318:	bl	3233c <__assert_fail@plt+0x1f8c0>
   4031c:	cmp	r0, #0
   40320:	str	r0, [sp, #56]	; 0x38
   40324:	beq	40a6c <__assert_fail@plt+0x2dff0>
   40328:	ldr	r2, [r4, #8]
   4032c:	ldr	r1, [r4, #12]
   40330:	lsl	r2, r2, #2
   40334:	bl	124b8 <memcpy@plt>
   40338:	ldrb	r0, [r4, #52]	; 0x34
   4033c:	mov	r1, #0
   40340:	str	r1, [fp, #-52]	; 0xffffffcc
   40344:	tst	r0, #64	; 0x40
   40348:	bne	40288 <__assert_fail@plt+0x2d80c>
   4034c:	str	r4, [sp, #36]	; 0x24
   40350:	ldr	r4, [fp, #12]
   40354:	mov	r9, r4
   40358:	cmp	r5, r4
   4035c:	bge	408c4 <__assert_fail@plt+0x2de48>
   40360:	ldr	r7, [sp, #40]	; 0x28
   40364:	ldr	r4, [sp, #20]
   40368:	ldr	sl, [sp, #24]
   4036c:	mov	r0, #0
   40370:	str	r0, [sp, #32]
   40374:	ldr	r0, [r7, #120]	; 0x78
   40378:	ldr	r1, [sp, #32]
   4037c:	cmp	r1, r0
   40380:	bgt	408c8 <__assert_fail@plt+0x2de4c>
   40384:	mov	r0, #0
   40388:	add	r1, r5, #1
   4038c:	str	r0, [sp, #52]	; 0x34
   40390:	str	r1, [sp, #28]
   40394:	ldr	r0, [r7, #100]	; 0x64
   40398:	ldr	r0, [r0, r1, lsl #2]
   4039c:	cmp	r0, #0
   403a0:	beq	403bc <__assert_fail@plt+0x2d940>
   403a4:	add	r1, r0, #4
   403a8:	add	r0, sp, #48	; 0x30
   403ac:	bl	3dad0 <__assert_fail@plt+0x2b054>
   403b0:	cmp	r0, #0
   403b4:	str	r0, [fp, #-52]	; 0xffffffcc
   403b8:	bne	409c8 <__assert_fail@plt+0x2df4c>
   403bc:	ldr	r1, [sp, #36]	; 0x24
   403c0:	cmp	r1, #0
   403c4:	beq	40738 <__assert_fail@plt+0x2dcbc>
   403c8:	mov	r0, #0
   403cc:	ldr	r8, [r7, #84]	; 0x54
   403d0:	str	r0, [fp, #-32]	; 0xffffffe0
   403d4:	str	r0, [fp, #-44]	; 0xffffffd4
   403d8:	str	r0, [fp, #-48]	; 0xffffffd0
   403dc:	str	r0, [fp, #-40]	; 0xffffffd8
   403e0:	ldr	r1, [r1, #20]
   403e4:	cmp	r1, #1
   403e8:	blt	40728 <__assert_fail@plt+0x2dcac>
   403ec:	str	r5, [sp, #44]	; 0x2c
   403f0:	ldr	r5, [sp, #36]	; 0x24
   403f4:	mov	r4, #0
   403f8:	b	4056c <__assert_fail@plt+0x2daf0>
   403fc:	cmp	r2, r1
   40400:	bne	4042c <__assert_fail@plt+0x2d9b0>
   40404:	lsl	r0, r2, #1
   40408:	lsl	r1, r2, #3
   4040c:	str	r0, [sp, #48]	; 0x30
   40410:	ldr	r0, [sp, #56]	; 0x38
   40414:	bl	33040 <__assert_fail@plt+0x205c4>
   40418:	cmp	r0, #0
   4041c:	beq	40998 <__assert_fail@plt+0x2df1c>
   40420:	str	r0, [sp, #56]	; 0x38
   40424:	ldr	r1, [sp, #52]	; 0x34
   40428:	b	40430 <__assert_fail@plt+0x2d9b4>
   4042c:	ldr	r0, [sp, #56]	; 0x38
   40430:	ldr	r2, [r0]
   40434:	cmp	r2, r6
   40438:	ble	40474 <__assert_fail@plt+0x2d9f8>
   4043c:	cmp	r1, #1
   40440:	blt	404a4 <__assert_fail@plt+0x2da28>
   40444:	add	r2, r0, r1, lsl #2
   40448:	add	r1, r1, #1
   4044c:	mov	r3, r2
   40450:	ldr	r7, [r3, #-4]!
   40454:	sub	r1, r1, #1
   40458:	cmp	r1, #1
   4045c:	str	r7, [r2]
   40460:	mov	r2, r3
   40464:	bgt	40450 <__assert_fail@plt+0x2d9d4>
   40468:	ldr	r7, [sp, #40]	; 0x28
   4046c:	sub	r1, r1, #1
   40470:	b	404a4 <__assert_fail@plt+0x2da28>
   40474:	add	r2, r0, r1, lsl #2
   40478:	ldr	r3, [r2, #-4]
   4047c:	cmp	r3, r6
   40480:	ble	404a4 <__assert_fail@plt+0x2da28>
   40484:	sub	r1, r1, #2
   40488:	str	r3, [r2]
   4048c:	sub	r1, r1, #1
   40490:	ldr	r3, [r2, #-8]
   40494:	sub	r2, r2, #4
   40498:	cmp	r3, r6
   4049c:	bgt	40488 <__assert_fail@plt+0x2da0c>
   404a0:	add	r1, r1, #2
   404a4:	str	r6, [r0, r1, lsl #2]
   404a8:	b	406cc <__assert_fail@plt+0x2dc50>
   404ac:	cmp	r2, r1
   404b0:	bne	404dc <__assert_fail@plt+0x2da60>
   404b4:	lsl	r0, r2, #1
   404b8:	lsl	r1, r2, #3
   404bc:	str	r0, [fp, #-48]	; 0xffffffd0
   404c0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   404c4:	bl	33040 <__assert_fail@plt+0x205c4>
   404c8:	cmp	r0, #0
   404cc:	beq	40998 <__assert_fail@plt+0x2df1c>
   404d0:	str	r0, [fp, #-40]	; 0xffffffd8
   404d4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   404d8:	b	404e0 <__assert_fail@plt+0x2da64>
   404dc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   404e0:	ldr	r2, [r0]
   404e4:	cmp	r2, r5
   404e8:	ble	40524 <__assert_fail@plt+0x2daa8>
   404ec:	cmp	r1, #1
   404f0:	blt	4051c <__assert_fail@plt+0x2daa0>
   404f4:	add	r2, r0, r1, lsl #2
   404f8:	add	r1, r1, #1
   404fc:	mov	r3, r2
   40500:	ldr	r7, [r3, #-4]!
   40504:	sub	r1, r1, #1
   40508:	cmp	r1, #1
   4050c:	str	r7, [r2]
   40510:	mov	r2, r3
   40514:	bgt	40500 <__assert_fail@plt+0x2da84>
   40518:	sub	r1, r1, #1
   4051c:	ldr	r7, [sp, #40]	; 0x28
   40520:	b	40558 <__assert_fail@plt+0x2dadc>
   40524:	add	r2, r0, r1, lsl #2
   40528:	ldr	r7, [sp, #40]	; 0x28
   4052c:	ldr	r3, [r2, #-4]
   40530:	cmp	r3, r5
   40534:	ble	40558 <__assert_fail@plt+0x2dadc>
   40538:	sub	r1, r1, #2
   4053c:	str	r3, [r2]
   40540:	sub	r1, r1, #1
   40544:	ldr	r3, [r2, #-8]
   40548:	sub	r2, r2, #4
   4054c:	cmp	r3, r5
   40550:	bgt	4053c <__assert_fail@plt+0x2dac0>
   40554:	add	r1, r1, #2
   40558:	str	r5, [r0, r1, lsl #2]
   4055c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   40560:	add	r0, r0, #1
   40564:	str	r0, [fp, #-44]	; 0xffffffd4
   40568:	b	40644 <__assert_fail@plt+0x2dbc8>
   4056c:	ldr	r0, [r5, #24]
   40570:	ldr	sl, [r0, r4, lsl #2]
   40574:	ldr	r0, [r8]
   40578:	add	r1, r0, sl, lsl #3
   4057c:	ldrb	r1, [r1, #6]
   40580:	tst	r1, #16
   40584:	beq	4068c <__assert_fail@plt+0x2dc10>
   40588:	ldr	r5, [sp, #44]	; 0x2c
   4058c:	mov	r0, r8
   40590:	mov	r1, sl
   40594:	mov	r2, r7
   40598:	mov	r3, r5
   4059c:	bl	414f0 <__assert_fail@plt+0x2ea74>
   405a0:	mov	r9, r0
   405a4:	cmp	r0, #2
   405a8:	blt	40678 <__assert_fail@plt+0x2dbfc>
   405ac:	ldr	r0, [sp, #40]	; 0x28
   405b0:	ldr	r1, [r8, #12]
   405b4:	add	r6, r9, r5
   405b8:	ldr	r0, [r0, #100]	; 0x64
   405bc:	ldr	r5, [r1, sl, lsl #2]
   405c0:	mov	r1, #0
   405c4:	ldr	r0, [r0, r6, lsl #2]
   405c8:	str	r1, [fp, #-44]	; 0xffffffd4
   405cc:	cmp	r0, #0
   405d0:	beq	405ec <__assert_fail@plt+0x2db70>
   405d4:	add	r1, r0, #4
   405d8:	sub	r0, fp, #48	; 0x30
   405dc:	bl	3dad0 <__assert_fail@plt+0x2b054>
   405e0:	cmp	r0, #0
   405e4:	str	r0, [fp, #-32]	; 0xffffffe0
   405e8:	bne	409a0 <__assert_fail@plt+0x2df24>
   405ec:	ldr	r2, [fp, #-48]	; 0xffffffd0
   405f0:	cmp	r2, #0
   405f4:	beq	4061c <__assert_fail@plt+0x2dba0>
   405f8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   405fc:	cmp	r1, #0
   40600:	bne	404ac <__assert_fail@plt+0x2da30>
   40604:	ldr	r0, [fp, #-40]	; 0xffffffd8
   40608:	str	r5, [r0]
   4060c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   40610:	add	r0, r0, #1
   40614:	str	r0, [fp, #-44]	; 0xffffffd4
   40618:	b	40640 <__assert_fail@plt+0x2dbc4>
   4061c:	mov	r0, #1
   40620:	str	r0, [fp, #-44]	; 0xffffffd4
   40624:	str	r0, [fp, #-48]	; 0xffffffd0
   40628:	mov	r0, #4
   4062c:	bl	3233c <__assert_fail@plt+0x1f8c0>
   40630:	cmp	r0, #0
   40634:	str	r0, [fp, #-40]	; 0xffffffd8
   40638:	beq	409b0 <__assert_fail@plt+0x2df34>
   4063c:	str	r5, [r0]
   40640:	ldr	r7, [sp, #40]	; 0x28
   40644:	sub	r0, fp, #32
   40648:	mov	r1, r8
   4064c:	sub	r2, fp, #48	; 0x30
   40650:	bl	41260 <__assert_fail@plt+0x2e7e4>
   40654:	ldr	r1, [r7, #100]	; 0x64
   40658:	str	r0, [r1, r6, lsl #2]
   4065c:	ldr	r0, [r7, #100]	; 0x64
   40660:	ldr	r0, [r0, r6, lsl #2]
   40664:	cmp	r0, #0
   40668:	bne	40678 <__assert_fail@plt+0x2dbfc>
   4066c:	ldr	r7, [fp, #-32]	; 0xffffffe0
   40670:	cmp	r7, #0
   40674:	bne	409a4 <__assert_fail@plt+0x2df28>
   40678:	ldr	r7, [sp, #40]	; 0x28
   4067c:	ldr	r5, [sp, #36]	; 0x24
   40680:	cmp	r9, #0
   40684:	bne	406a4 <__assert_fail@plt+0x2dc28>
   40688:	ldr	r0, [r8]
   4068c:	ldr	r2, [sp, #44]	; 0x2c
   40690:	add	r1, r0, sl, lsl #3
   40694:	mov	r0, r7
   40698:	bl	417e4 <__assert_fail@plt+0x2ed68>
   4069c:	cmp	r0, #0
   406a0:	beq	40700 <__assert_fail@plt+0x2dc84>
   406a4:	ldr	r0, [r8, #12]
   406a8:	ldr	r2, [sp, #48]	; 0x30
   406ac:	ldr	r6, [r0, sl, lsl #2]
   406b0:	cmp	r2, #0
   406b4:	beq	406dc <__assert_fail@plt+0x2dc60>
   406b8:	ldr	r1, [sp, #52]	; 0x34
   406bc:	cmp	r1, #0
   406c0:	bne	403fc <__assert_fail@plt+0x2d980>
   406c4:	ldr	r0, [sp, #56]	; 0x38
   406c8:	str	r6, [r0]
   406cc:	ldr	r0, [sp, #52]	; 0x34
   406d0:	add	r0, r0, #1
   406d4:	str	r0, [sp, #52]	; 0x34
   406d8:	b	40700 <__assert_fail@plt+0x2dc84>
   406dc:	mov	r0, #1
   406e0:	str	r0, [sp, #52]	; 0x34
   406e4:	str	r0, [sp, #48]	; 0x30
   406e8:	mov	r0, #4
   406ec:	bl	3233c <__assert_fail@plt+0x1f8c0>
   406f0:	cmp	r0, #0
   406f4:	str	r0, [sp, #56]	; 0x38
   406f8:	beq	4098c <__assert_fail@plt+0x2df10>
   406fc:	str	r6, [r0]
   40700:	ldr	r0, [r5, #20]
   40704:	add	r4, r4, #1
   40708:	cmp	r4, r0
   4070c:	blt	4056c <__assert_fail@plt+0x2daf0>
   40710:	ldr	r4, [fp, #12]
   40714:	ldr	r0, [fp, #-40]	; 0xffffffd8
   40718:	ldr	sl, [sp, #24]
   4071c:	ldr	r5, [sp, #44]	; 0x2c
   40720:	mov	r9, r4
   40724:	ldr	r4, [sp, #20]
   40728:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   4072c:	ldr	r8, [fp, #16]
   40730:	mov	r0, #0
   40734:	str	r0, [fp, #-52]	; 0xffffffcc
   40738:	ldr	r0, [sp, #52]	; 0x34
   4073c:	cmp	r0, #0
   40740:	beq	4078c <__assert_fail@plt+0x2dd10>
   40744:	add	r6, sp, #48	; 0x30
   40748:	mov	r0, r4
   4074c:	mov	r2, sl
   40750:	mov	r3, r8
   40754:	mov	r1, r6
   40758:	bl	40aa4 <__assert_fail@plt+0x2e028>
   4075c:	cmp	r0, #0
   40760:	str	r0, [fp, #-52]	; 0xffffffcc
   40764:	bne	409c8 <__assert_fail@plt+0x2df4c>
   40768:	ldr	r2, [sp, #28]
   4076c:	mov	r0, r7
   40770:	mov	r1, r6
   40774:	mov	r3, sl
   40778:	str	r8, [sp]
   4077c:	bl	40be0 <__assert_fail@plt+0x2e164>
   40780:	cmp	r0, #0
   40784:	str	r0, [fp, #-52]	; 0xffffffcc
   40788:	bne	409c8 <__assert_fail@plt+0x2df4c>
   4078c:	cmn	r5, #1
   40790:	ble	407cc <__assert_fail@plt+0x2dd50>
   40794:	ldr	r0, [r7, #48]	; 0x30
   40798:	cmp	r0, r5
   4079c:	beq	40890 <__assert_fail@plt+0x2de14>
   407a0:	ldr	r0, [r7, #80]	; 0x50
   407a4:	cmp	r0, #2
   407a8:	blt	407d8 <__assert_fail@plt+0x2dd5c>
   407ac:	ldr	r0, [r7, #8]
   407b0:	ldr	r6, [r0, r5, lsl #2]
   407b4:	cmn	r6, #1
   407b8:	bne	40810 <__assert_fail@plt+0x2dd94>
   407bc:	sub	r1, r5, #1
   407c0:	cmp	r5, #0
   407c4:	mov	r5, r1
   407c8:	bgt	407b0 <__assert_fail@plt+0x2dd34>
   407cc:	ldr	r3, [r7, #60]	; 0x3c
   407d0:	add	r5, sp, #48	; 0x30
   407d4:	b	40838 <__assert_fail@plt+0x2ddbc>
   407d8:	ldr	r0, [r7, #4]
   407dc:	ldr	r1, [r7, #68]	; 0x44
   407e0:	mov	r3, #1
   407e4:	ldrb	r0, [r0, r5]
   407e8:	add	r5, sp, #48	; 0x30
   407ec:	ubfx	r2, r0, #5, #3
   407f0:	ldr	r1, [r1, r2, lsl #2]
   407f4:	and	r2, r0, #31
   407f8:	tst	r1, r3, lsl r2
   407fc:	bne	40838 <__assert_fail@plt+0x2ddbc>
   40800:	mov	r3, #0
   40804:	cmp	r0, #10
   40808:	beq	4082c <__assert_fail@plt+0x2ddb0>
   4080c:	b	40838 <__assert_fail@plt+0x2ddbc>
   40810:	ldrb	r0, [r7, #78]	; 0x4e
   40814:	add	r5, sp, #48	; 0x30
   40818:	cmp	r0, #0
   4081c:	bne	408a4 <__assert_fail@plt+0x2de28>
   40820:	mov	r3, #0
   40824:	cmp	r6, #10
   40828:	bne	40838 <__assert_fail@plt+0x2ddbc>
   4082c:	ldrb	r3, [r7, #77]	; 0x4d
   40830:	cmp	r3, #0
   40834:	movwne	r3, #2
   40838:	sub	r0, fp, #52	; 0x34
   4083c:	mov	r1, r4
   40840:	mov	r2, r5
   40844:	bl	3dd9c <__assert_fail@plt+0x2b320>
   40848:	cmp	r0, #0
   4084c:	str	r0, [sp, #36]	; 0x24
   40850:	bne	40860 <__assert_fail@plt+0x2dde4>
   40854:	ldr	r0, [fp, #-52]	; 0xffffffcc
   40858:	cmp	r0, #0
   4085c:	bne	409c8 <__assert_fail@plt+0x2df4c>
   40860:	ldr	r1, [sp, #28]
   40864:	ldr	r2, [sp, #36]	; 0x24
   40868:	ldr	r0, [r7, #100]	; 0x64
   4086c:	str	r2, [r0, r1, lsl #2]
   40870:	cmp	r2, #0
   40874:	ldr	r2, [sp, #32]
   40878:	mov	r0, #0
   4087c:	mov	r5, r1
   40880:	addeq	r0, r2, #1
   40884:	cmp	r1, r9
   40888:	blt	40370 <__assert_fail@plt+0x2d8f4>
   4088c:	b	408cc <__assert_fail@plt+0x2de50>
   40890:	ldr	r0, [r7, #88]	; 0x58
   40894:	add	r5, sp, #48	; 0x30
   40898:	and	r0, r0, #2
   4089c:	eor	r3, r0, #10
   408a0:	b	40838 <__assert_fail@plt+0x2ddbc>
   408a4:	mov	r0, r6
   408a8:	bl	127dc <iswalnum@plt>
   408ac:	mov	r3, #1
   408b0:	cmp	r6, #95	; 0x5f
   408b4:	beq	40838 <__assert_fail@plt+0x2ddbc>
   408b8:	cmp	r0, #0
   408bc:	beq	40820 <__assert_fail@plt+0x2dda4>
   408c0:	b	40838 <__assert_fail@plt+0x2ddbc>
   408c4:	ldr	r7, [sp, #40]	; 0x28
   408c8:	mov	r1, r5
   408cc:	ldr	r0, [sp, #56]	; 0x38
   408d0:	mov	r4, r1
   408d4:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   408d8:	ldr	r0, [r7, #100]	; 0x64
   408dc:	mov	sl, #1
   408e0:	ldr	r1, [r0, r9, lsl #2]
   408e4:	ldr	r0, [sp, #16]
   408e8:	str	r4, [r0]
   408ec:	ldr	r0, [sp, #12]
   408f0:	cmp	r1, #0
   408f4:	addne	r1, r1, #4
   408f8:	str	r0, [r7, #40]	; 0x28
   408fc:	ldr	r0, [sp, #8]
   40900:	str	r0, [r7, #100]	; 0x64
   40904:	beq	40968 <__assert_fail@plt+0x2deec>
   40908:	ldr	r2, [r1, #4]
   4090c:	cmp	r2, #1
   40910:	blt	40964 <__assert_fail@plt+0x2dee8>
   40914:	ldr	r0, [fp, #8]
   40918:	ldr	r1, [r1, #8]
   4091c:	subs	r2, r2, #1
   40920:	mov	sl, #0
   40924:	mov	r3, #0
   40928:	beq	40954 <__assert_fail@plt+0x2ded8>
   4092c:	mov	r3, #0
   40930:	mov	r7, #1
   40934:	add	r5, r3, r2
   40938:	lsr	r4, r5, #1
   4093c:	ldr	r6, [r1, r4, lsl #2]
   40940:	cmp	r6, r0
   40944:	movge	r2, r4
   40948:	addlt	r3, r7, r5, lsr #1
   4094c:	cmp	r3, r2
   40950:	bcc	40934 <__assert_fail@plt+0x2deb8>
   40954:	ldr	r1, [r1, r3, lsl #2]
   40958:	cmp	r1, r0
   4095c:	movne	sl, #1
   40960:	b	40968 <__assert_fail@plt+0x2deec>
   40964:	mov	sl, #1
   40968:	mov	r0, sl
   4096c:	sub	sp, fp, #28
   40970:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40974:	mov	r0, #0
   40978:	str	r0, [sp, #52]	; 0x34
   4097c:	str	r0, [sp, #48]	; 0x30
   40980:	str	r0, [sp, #56]	; 0x38
   40984:	str	r0, [fp, #-52]	; 0xffffffcc
   40988:	b	402ac <__assert_fail@plt+0x2d830>
   4098c:	mov	r0, #0
   40990:	str	r0, [sp, #48]	; 0x30
   40994:	str	r0, [sp, #52]	; 0x34
   40998:	ldr	r0, [fp, #-40]	; 0xffffffd8
   4099c:	b	409bc <__assert_fail@plt+0x2df40>
   409a0:	mov	r7, r0
   409a4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   409a8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   409ac:	b	409c4 <__assert_fail@plt+0x2df48>
   409b0:	mov	r0, #0
   409b4:	str	r0, [fp, #-48]	; 0xffffffd0
   409b8:	str	r0, [fp, #-44]	; 0xffffffd4
   409bc:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   409c0:	mov	r7, #12
   409c4:	str	r7, [fp, #-52]	; 0xffffffcc
   409c8:	ldr	r0, [sp, #56]	; 0x38
   409cc:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   409d0:	ldr	sl, [fp, #-52]	; 0xffffffcc
   409d4:	b	40968 <__assert_fail@plt+0x2deec>
   409d8:	mov	r6, r1
   409dc:	mvn	r1, #-2147483648	; 0x80000000
   409e0:	mov	sl, #12
   409e4:	sub	r1, r1, r5
   409e8:	cmp	r1, r2
   409ec:	ble	40968 <__assert_fail@plt+0x2deec>
   409f0:	add	r0, r2, #1
   409f4:	add	r7, r0, r5
   409f8:	str	r0, [sp, #44]	; 0x2c
   409fc:	cmn	r7, #-1073741823	; 0xc0000001
   40a00:	bhi	40968 <__assert_fail@plt+0x2deec>
   40a04:	mov	r4, r6
   40a08:	lsl	r1, r7, #2
   40a0c:	ldr	r0, [r4, #8]!
   40a10:	bl	33040 <__assert_fail@plt+0x205c4>
   40a14:	cmp	r0, #0
   40a18:	beq	40968 <__assert_fail@plt+0x2deec>
   40a1c:	ldr	r1, [sp, #44]	; 0x2c
   40a20:	str	r7, [r6, #4]
   40a24:	str	r0, [r6, #8]
   40a28:	add	r0, r0, r5, lsl #2
   40a2c:	lsl	r2, r1, #2
   40a30:	mov	r1, #0
   40a34:	bl	12800 <memset@plt>
   40a38:	ldr	r0, [sp, #40]	; 0x28
   40a3c:	ldr	sl, [sp, #20]
   40a40:	mov	r1, r6
   40a44:	b	4010c <__assert_fail@plt+0x2d690>
   40a48:	and	r0, r3, #2
   40a4c:	eor	r7, r0, #10
   40a50:	cmp	r5, r9
   40a54:	beq	4022c <__assert_fail@plt+0x2d7b0>
   40a58:	b	40190 <__assert_fail@plt+0x2d714>
   40a5c:	mov	sl, r0
   40a60:	ldr	r0, [sp, #56]	; 0x38
   40a64:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   40a68:	b	40968 <__assert_fail@plt+0x2deec>
   40a6c:	mov	r0, #0
   40a70:	mov	sl, #12
   40a74:	str	r0, [sp, #48]	; 0x30
   40a78:	str	r0, [sp, #52]	; 0x34
   40a7c:	str	sl, [fp, #-52]	; 0xffffffcc
   40a80:	b	40968 <__assert_fail@plt+0x2deec>
   40a84:	mov	r0, r6
   40a88:	bl	127dc <iswalnum@plt>
   40a8c:	mov	r7, #1
   40a90:	cmp	r6, #95	; 0x5f
   40a94:	beq	40224 <__assert_fail@plt+0x2d7a8>
   40a98:	cmp	r0, #0
   40a9c:	beq	40208 <__assert_fail@plt+0x2d78c>
   40aa0:	b	40224 <__assert_fail@plt+0x2d7a8>
   40aa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   40aa8:	add	fp, sp, #28
   40aac:	sub	sp, sp, #28
   40ab0:	str	r0, [sp, #12]
   40ab4:	ldr	r0, [r1, #4]
   40ab8:	mov	r4, r1
   40abc:	mov	r1, #0
   40ac0:	mov	sl, r3
   40ac4:	mov	r8, r2
   40ac8:	str	r1, [sp, #20]
   40acc:	str	r0, [sp, #16]
   40ad0:	lsl	r0, r0, #2
   40ad4:	bl	3233c <__assert_fail@plt+0x1f8c0>
   40ad8:	cmp	r0, #0
   40adc:	str	r0, [sp, #24]
   40ae0:	beq	40bd8 <__assert_fail@plt+0x2e15c>
   40ae4:	ldr	r0, [r4, #4]
   40ae8:	cmp	r0, #1
   40aec:	blt	40bb0 <__assert_fail@plt+0x2e134>
   40af0:	mov	r9, #0
   40af4:	str	r4, [sp, #8]
   40af8:	ldr	r0, [r4, #8]
   40afc:	ldr	r1, [sp, #12]
   40b00:	ldr	r2, [r0, r9, lsl #2]
   40b04:	ldr	r1, [r1, #24]
   40b08:	add	r0, r2, r2, lsl #1
   40b0c:	add	r1, r1, r0, lsl #2
   40b10:	ldr	r0, [r1, #4]
   40b14:	cmp	r0, #1
   40b18:	blt	40b54 <__assert_fail@plt+0x2e0d8>
   40b1c:	ldr	r7, [sp, #12]
   40b20:	ldr	r3, [r1, #8]
   40b24:	mov	r6, #0
   40b28:	ldr	r7, [r7]
   40b2c:	ldr	r4, [r3, r6, lsl #2]
   40b30:	add	r5, r7, r4, lsl #3
   40b34:	ldrb	r5, [r5, #4]
   40b38:	cmp	r5, sl
   40b3c:	ldreq	r5, [r7, r4, lsl #3]
   40b40:	cmpeq	r5, r8
   40b44:	beq	40b7c <__assert_fail@plt+0x2e100>
   40b48:	add	r6, r6, #1
   40b4c:	cmp	r6, r0
   40b50:	blt	40b2c <__assert_fail@plt+0x2e0b0>
   40b54:	add	r0, sp, #16
   40b58:	bl	3dad0 <__assert_fail@plt+0x2b054>
   40b5c:	cmp	r0, #0
   40b60:	bne	40ba0 <__assert_fail@plt+0x2e124>
   40b64:	ldr	r4, [sp, #8]
   40b68:	add	r9, r9, #1
   40b6c:	ldr	r0, [r4, #4]
   40b70:	cmp	r9, r0
   40b74:	blt	40af8 <__assert_fail@plt+0x2e07c>
   40b78:	b	40bb0 <__assert_fail@plt+0x2e134>
   40b7c:	cmn	r4, #1
   40b80:	beq	40b54 <__assert_fail@plt+0x2e0d8>
   40b84:	ldr	r0, [sp, #12]
   40b88:	add	r1, sp, #16
   40b8c:	mov	r3, r8
   40b90:	str	sl, [sp]
   40b94:	bl	41128 <__assert_fail@plt+0x2e6ac>
   40b98:	cmp	r0, #0
   40b9c:	beq	40b64 <__assert_fail@plt+0x2e0e8>
   40ba0:	mov	r7, r0
   40ba4:	ldr	r0, [sp, #24]
   40ba8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   40bac:	b	40bcc <__assert_fail@plt+0x2e150>
   40bb0:	ldr	r0, [r4, #8]
   40bb4:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   40bb8:	vldr	d16, [sp, #16]
   40bbc:	ldr	r0, [sp, #24]
   40bc0:	mov	r7, #0
   40bc4:	str	r0, [r4, #8]
   40bc8:	vstr	d16, [r4]
   40bcc:	mov	r0, r7
   40bd0:	sub	sp, fp, #28
   40bd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40bd8:	mov	r7, #12
   40bdc:	b	40bcc <__assert_fail@plt+0x2e150>
   40be0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   40be4:	add	fp, sp, #28
   40be8:	sub	sp, sp, #52	; 0x34
   40bec:	ldr	ip, [r0, #108]	; 0x6c
   40bf0:	mov	lr, r1
   40bf4:	ldr	r1, [r0, #84]	; 0x54
   40bf8:	str	r0, [sp, #24]
   40bfc:	mov	sl, r2
   40c00:	mov	r8, #0
   40c04:	mov	r0, #0
   40c08:	cmp	ip, #1
   40c0c:	str	r1, [sp, #28]
   40c10:	blt	40c54 <__assert_fail@plt+0x2e1d8>
   40c14:	ldr	r0, [sp, #24]
   40c18:	mov	r7, #1
   40c1c:	mov	r1, ip
   40c20:	ldr	r2, [r0, #116]	; 0x74
   40c24:	mov	r0, #0
   40c28:	add	r6, r1, r0
   40c2c:	add	r6, r6, r6, lsr #31
   40c30:	asr	r4, r6, #1
   40c34:	add	r5, r4, r4, lsl #1
   40c38:	add	r5, r2, r5, lsl #3
   40c3c:	ldr	r5, [r5, #4]
   40c40:	cmp	r5, sl
   40c44:	addlt	r0, r7, r6, asr #1
   40c48:	movge	r1, r4
   40c4c:	cmp	r0, r1
   40c50:	blt	40c28 <__assert_fail@plt+0x2e1ac>
   40c54:	cmp	r0, ip
   40c58:	bge	4111c <__assert_fail@plt+0x2e6a0>
   40c5c:	cmn	r0, #1
   40c60:	beq	4111c <__assert_fail@plt+0x2e6a0>
   40c64:	ldr	r1, [sp, #24]
   40c68:	add	r0, r0, r0, lsl #1
   40c6c:	str	r0, [sp, #8]
   40c70:	ldr	r1, [r1, #116]	; 0x74
   40c74:	add	r0, r1, r0, lsl #3
   40c78:	ldr	r0, [r0, #4]
   40c7c:	cmp	r0, sl
   40c80:	bne	4111c <__assert_fail@plt+0x2e6a0>
   40c84:	str	r3, [sp, #12]
   40c88:	mov	r9, #1
   40c8c:	str	lr, [sp, #16]
   40c90:	b	40c9c <__assert_fail@plt+0x2e220>
   40c94:	ldr	r0, [sp, #24]
   40c98:	ldr	r1, [r0, #116]	; 0x74
   40c9c:	ldr	r0, [sp, #8]
   40ca0:	add	r0, r1, r0, lsl #3
   40ca4:	mov	r8, r0
   40ca8:	ldr	r0, [lr, #4]
   40cac:	cmp	r0, #1
   40cb0:	blt	40fac <__assert_fail@plt+0x2e530>
   40cb4:	subs	r6, r0, #1
   40cb8:	ldr	r2, [r8]
   40cbc:	ldr	r0, [lr, #8]
   40cc0:	mov	r3, #0
   40cc4:	beq	40cec <__assert_fail@plt+0x2e270>
   40cc8:	mov	r1, r6
   40ccc:	add	r7, r3, r1
   40cd0:	lsr	r5, r7, #1
   40cd4:	ldr	r4, [r0, r5, lsl #2]
   40cd8:	cmp	r4, r2
   40cdc:	movge	r1, r5
   40ce0:	addlt	r3, r9, r7, lsr #1
   40ce4:	cmp	r3, r1
   40ce8:	bcc	40ccc <__assert_fail@plt+0x2e250>
   40cec:	ldr	r1, [r0, r3, lsl #2]
   40cf0:	cmp	r1, r2
   40cf4:	bne	40fac <__assert_fail@plt+0x2e530>
   40cf8:	ldr	r3, [r8, #12]
   40cfc:	ldr	r1, [r8, #8]
   40d00:	add	r3, r3, sl
   40d04:	sub	r7, r3, r1
   40d08:	cmp	r7, sl
   40d0c:	bne	40df8 <__assert_fail@plt+0x2e37c>
   40d10:	ldr	r1, [sp, #28]
   40d14:	add	r2, r2, r2, lsl #1
   40d18:	cmp	r6, #0
   40d1c:	ldr	r1, [r1, #20]
   40d20:	add	r1, r1, r2, lsl #2
   40d24:	mov	r2, #0
   40d28:	ldr	r1, [r1, #8]
   40d2c:	ldr	r4, [r1]
   40d30:	beq	40d54 <__assert_fail@plt+0x2e2d8>
   40d34:	add	r1, r2, r6
   40d38:	lsr	r3, r1, #1
   40d3c:	ldr	r7, [r0, r3, lsl #2]
   40d40:	cmp	r7, r4
   40d44:	movge	r6, r3
   40d48:	addlt	r2, r9, r1, lsr #1
   40d4c:	cmp	r2, r6
   40d50:	bcc	40d34 <__assert_fail@plt+0x2e2b8>
   40d54:	ldr	r1, [r0, r2, lsl #2]
   40d58:	mov	r0, #4
   40d5c:	cmp	r1, r4
   40d60:	beq	40fa0 <__assert_fail@plt+0x2e524>
   40d64:	mov	r0, #4
   40d68:	str	r9, [sp, #36]	; 0x24
   40d6c:	str	r9, [sp, #32]
   40d70:	bl	3233c <__assert_fail@plt+0x1f8c0>
   40d74:	cmp	r0, #0
   40d78:	str	r0, [sp, #40]	; 0x28
   40d7c:	beq	40fc0 <__assert_fail@plt+0x2e544>
   40d80:	mov	r6, #0
   40d84:	str	r4, [r0]
   40d88:	ldr	r0, [sp, #28]
   40d8c:	ldr	r2, [sp, #12]
   40d90:	ldr	r3, [fp, #8]
   40d94:	add	r4, sp, #32
   40d98:	str	r6, [fp, #-32]	; 0xffffffe0
   40d9c:	mov	r1, r4
   40da0:	bl	40aa4 <__assert_fail@plt+0x2e028>
   40da4:	ldr	r5, [sp, #16]
   40da8:	mov	r7, r0
   40dac:	mov	r1, r4
   40db0:	mov	r0, r5
   40db4:	bl	3dad0 <__assert_fail@plt+0x2b054>
   40db8:	mov	r4, r0
   40dbc:	ldr	r0, [sp, #40]	; 0x28
   40dc0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   40dc4:	orr	r0, r7, r6
   40dc8:	mov	lr, r5
   40dcc:	orrs	r0, r0, r4
   40dd0:	mov	r0, #2
   40dd4:	beq	40fa0 <__assert_fail@plt+0x2e524>
   40dd8:	cmp	r7, #0
   40ddc:	mov	r0, #1
   40de0:	movne	r4, r7
   40de4:	cmp	r6, #0
   40de8:	movne	r4, r6
   40dec:	str	r4, [fp, #-32]	; 0xffffffe0
   40df0:	str	r4, [sp, #20]
   40df4:	b	40fa0 <__assert_fail@plt+0x2e524>
   40df8:	ldr	r0, [sp, #24]
   40dfc:	ldr	r0, [r0, #100]	; 0x64
   40e00:	ldr	r5, [r0, r7, lsl #2]
   40e04:	ldr	r0, [sp, #28]
   40e08:	ldr	r0, [r0, #12]
   40e0c:	cmp	r5, #0
   40e10:	ldr	r4, [r0, r2, lsl #2]
   40e14:	beq	40edc <__assert_fail@plt+0x2e460>
   40e18:	ldr	ip, [r5, #8]
   40e1c:	cmp	ip, #0
   40e20:	ble	40f08 <__assert_fail@plt+0x2e48c>
   40e24:	ldr	r0, [r5, #12]
   40e28:	subs	r3, ip, #1
   40e2c:	mov	r2, #0
   40e30:	str	r7, [sp, #4]
   40e34:	beq	40e58 <__assert_fail@plt+0x2e3dc>
   40e38:	add	r6, r2, r3
   40e3c:	lsr	r7, r6, #1
   40e40:	ldr	r1, [r0, r7, lsl #2]
   40e44:	cmp	r1, r4
   40e48:	movge	r3, r7
   40e4c:	addlt	r2, r9, r6, lsr #1
   40e50:	cmp	r2, r3
   40e54:	bcc	40e38 <__assert_fail@plt+0x2e3bc>
   40e58:	ldr	r1, [r0, r2, lsl #2]
   40e5c:	mov	r0, #4
   40e60:	cmp	r1, r4
   40e64:	beq	40fa0 <__assert_fail@plt+0x2e524>
   40e68:	ldr	r7, [sp, #4]
   40e6c:	cmp	ip, #1
   40e70:	str	ip, [sp, #36]	; 0x24
   40e74:	blt	40f0c <__assert_fail@plt+0x2e490>
   40e78:	lsl	r0, ip, #2
   40e7c:	str	ip, [sp, #32]
   40e80:	bl	3233c <__assert_fail@plt+0x1f8c0>
   40e84:	cmp	r0, #0
   40e88:	str	r0, [sp, #40]	; 0x28
   40e8c:	beq	41028 <__assert_fail@plt+0x2e5ac>
   40e90:	ldr	r2, [r5, #8]
   40e94:	ldr	r1, [r5, #12]
   40e98:	mov	r5, r0
   40e9c:	lsl	r2, r2, #2
   40ea0:	bl	124b8 <memcpy@plt>
   40ea4:	ldr	r1, [sp, #32]
   40ea8:	mov	r6, #0
   40eac:	str	r6, [fp, #-32]	; 0xffffffe0
   40eb0:	cmp	r1, #0
   40eb4:	beq	40f20 <__assert_fail@plt+0x2e4a4>
   40eb8:	ldr	r0, [sp, #36]	; 0x24
   40ebc:	cmp	r0, #0
   40ec0:	bne	4103c <__assert_fail@plt+0x2e5c0>
   40ec4:	str	r4, [r5]
   40ec8:	str	r9, [sp, #36]	; 0x24
   40ecc:	mov	r6, #0
   40ed0:	cmp	r6, #0
   40ed4:	beq	40f48 <__assert_fail@plt+0x2e4cc>
   40ed8:	b	41000 <__assert_fail@plt+0x2e584>
   40edc:	mov	r0, #4
   40ee0:	str	r9, [sp, #36]	; 0x24
   40ee4:	str	r9, [sp, #32]
   40ee8:	bl	3233c <__assert_fail@plt+0x1f8c0>
   40eec:	cmp	r0, #0
   40ef0:	str	r0, [sp, #40]	; 0x28
   40ef4:	beq	40fd4 <__assert_fail@plt+0x2e558>
   40ef8:	str	r4, [r0]
   40efc:	mov	r0, #0
   40f00:	str	r0, [fp, #-32]	; 0xffffffe0
   40f04:	b	40f48 <__assert_fail@plt+0x2e4cc>
   40f08:	str	ip, [sp, #36]	; 0x24
   40f0c:	mov	r6, #0
   40f10:	str	r6, [sp, #36]	; 0x24
   40f14:	str	r6, [sp, #32]
   40f18:	str	r6, [sp, #40]	; 0x28
   40f1c:	str	r6, [fp, #-32]	; 0xffffffe0
   40f20:	mov	r0, #4
   40f24:	str	r9, [sp, #36]	; 0x24
   40f28:	str	r9, [sp, #32]
   40f2c:	bl	3233c <__assert_fail@plt+0x1f8c0>
   40f30:	cmp	r0, #0
   40f34:	str	r0, [sp, #40]	; 0x28
   40f38:	beq	40ff4 <__assert_fail@plt+0x2e578>
   40f3c:	str	r4, [r0]
   40f40:	cmp	r6, #0
   40f44:	bne	41000 <__assert_fail@plt+0x2e584>
   40f48:	ldr	r1, [sp, #28]
   40f4c:	sub	r0, fp, #32
   40f50:	add	r2, sp, #32
   40f54:	bl	41260 <__assert_fail@plt+0x2e7e4>
   40f58:	ldr	r4, [sp, #24]
   40f5c:	ldr	r1, [r4, #100]	; 0x64
   40f60:	str	r0, [r1, r7, lsl #2]
   40f64:	ldr	r0, [sp, #40]	; 0x28
   40f68:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   40f6c:	ldr	r0, [r4, #100]	; 0x64
   40f70:	ldr	r1, [fp, #-32]	; 0xffffffe0
   40f74:	ldr	r0, [r0, r7, lsl #2]
   40f78:	cmp	r1, #0
   40f7c:	mov	r2, r1
   40f80:	movwne	r2, #1
   40f84:	clz	r0, r0
   40f88:	lsr	r0, r0, #5
   40f8c:	ands	r0, r0, r2
   40f90:	ldr	r2, [sp, #20]
   40f94:	movne	r2, r1
   40f98:	str	r2, [sp, #20]
   40f9c:	ldr	lr, [sp, #16]
   40fa0:	cmp	r0, #0
   40fa4:	cmpne	r0, #4
   40fa8:	bne	41108 <__assert_fail@plt+0x2e68c>
   40fac:	ldrb	r1, [r8, #20]
   40fb0:	add	r0, r8, #24
   40fb4:	cmp	r1, #0
   40fb8:	bne	40ca4 <__assert_fail@plt+0x2e228>
   40fbc:	b	41118 <__assert_fail@plt+0x2e69c>
   40fc0:	mov	r0, #0
   40fc4:	mov	r6, #12
   40fc8:	str	r0, [sp, #32]
   40fcc:	str	r0, [sp, #36]	; 0x24
   40fd0:	b	40d88 <__assert_fail@plt+0x2e30c>
   40fd4:	mov	r0, #0
   40fd8:	mov	r1, #12
   40fdc:	str	r0, [sp, #32]
   40fe0:	str	r0, [sp, #36]	; 0x24
   40fe4:	mov	r0, #12
   40fe8:	str	r1, [fp, #-32]	; 0xffffffe0
   40fec:	str	r0, [sp, #20]
   40ff0:	b	41020 <__assert_fail@plt+0x2e5a4>
   40ff4:	mov	r0, #0
   40ff8:	str	r0, [sp, #32]
   40ffc:	str	r0, [sp, #36]	; 0x24
   41000:	clz	r0, r6
   41004:	lsr	r4, r0, #5
   41008:	ldr	r0, [sp, #40]	; 0x28
   4100c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   41010:	cmp	r4, #0
   41014:	movwne	r6, #12
   41018:	str	r6, [sp, #20]
   4101c:	str	r6, [fp, #-32]	; 0xffffffe0
   41020:	mov	r0, #1
   41024:	b	40f9c <__assert_fail@plt+0x2e520>
   41028:	mov	r0, #0
   4102c:	mov	r6, #12
   41030:	str	r0, [sp, #32]
   41034:	str	r0, [sp, #36]	; 0x24
   41038:	b	40f1c <__assert_fail@plt+0x2e4a0>
   4103c:	cmp	r1, r0
   41040:	bne	4106c <__assert_fail@plt+0x2e5f0>
   41044:	lsl	r0, r1, #1
   41048:	lsl	r1, r1, #3
   4104c:	str	r0, [sp, #32]
   41050:	mov	r0, r5
   41054:	bl	33040 <__assert_fail@plt+0x205c4>
   41058:	cmp	r0, #0
   4105c:	beq	41100 <__assert_fail@plt+0x2e684>
   41060:	str	r0, [sp, #40]	; 0x28
   41064:	mov	r5, r0
   41068:	ldr	r0, [sp, #36]	; 0x24
   4106c:	ldr	r1, [r5]
   41070:	cmp	r1, r4
   41074:	ble	410ac <__assert_fail@plt+0x2e630>
   41078:	cmp	r0, #1
   4107c:	blt	410dc <__assert_fail@plt+0x2e660>
   41080:	add	r1, r5, r0, lsl #2
   41084:	add	r0, r0, #1
   41088:	mov	r2, r1
   4108c:	ldr	r3, [r2, #-4]!
   41090:	sub	r0, r0, #1
   41094:	cmp	r0, #1
   41098:	str	r3, [r1]
   4109c:	mov	r1, r2
   410a0:	bgt	4108c <__assert_fail@plt+0x2e610>
   410a4:	sub	r0, r0, #1
   410a8:	b	410dc <__assert_fail@plt+0x2e660>
   410ac:	add	r1, r5, r0, lsl #2
   410b0:	ldr	r2, [r1, #-4]
   410b4:	cmp	r2, r4
   410b8:	ble	410dc <__assert_fail@plt+0x2e660>
   410bc:	sub	r0, r0, #2
   410c0:	str	r2, [r1]
   410c4:	sub	r0, r0, #1
   410c8:	ldr	r2, [r1, #-8]
   410cc:	sub	r1, r1, #4
   410d0:	cmp	r2, r4
   410d4:	bgt	410c0 <__assert_fail@plt+0x2e644>
   410d8:	add	r0, r0, #2
   410dc:	str	r4, [r5, r0, lsl #2]
   410e0:	ldr	r7, [sp, #4]
   410e4:	mov	r6, #0
   410e8:	ldr	r0, [sp, #36]	; 0x24
   410ec:	add	r0, r0, #1
   410f0:	str	r0, [sp, #36]	; 0x24
   410f4:	cmp	r6, #0
   410f8:	beq	40f48 <__assert_fail@plt+0x2e4cc>
   410fc:	b	41000 <__assert_fail@plt+0x2e584>
   41100:	mov	r6, #0
   41104:	b	41000 <__assert_fail@plt+0x2e584>
   41108:	cmp	r0, #2
   4110c:	beq	40c94 <__assert_fail@plt+0x2e218>
   41110:	ldr	r8, [sp, #20]
   41114:	b	4111c <__assert_fail@plt+0x2e6a0>
   41118:	mov	r8, #0
   4111c:	mov	r0, r8
   41120:	sub	sp, fp, #28
   41124:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41128:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4112c:	add	fp, sp, #28
   41130:	sub	sp, sp, #4
   41134:	ldr	r4, [fp, #8]
   41138:	mov	r9, r3
   4113c:	mov	r7, r2
   41140:	mov	r8, r1
   41144:	mov	sl, r0
   41148:	mov	r5, #1
   4114c:	b	4115c <__assert_fail@plt+0x2e6e0>
   41150:	add	r0, r0, r7, lsl #2
   41154:	ldr	r0, [r0, #8]
   41158:	ldr	r7, [r0]
   4115c:	ldr	r0, [r8, #4]
   41160:	cmp	r0, #1
   41164:	blt	411ac <__assert_fail@plt+0x2e730>
   41168:	subs	r2, r0, #1
   4116c:	ldr	r0, [r8, #8]
   41170:	mov	ip, r4
   41174:	mov	r1, #0
   41178:	beq	4119c <__assert_fail@plt+0x2e720>
   4117c:	add	r3, r1, r2
   41180:	lsr	r6, r3, #1
   41184:	ldr	r4, [r0, r6, lsl #2]
   41188:	cmp	r4, r7
   4118c:	movge	r2, r6
   41190:	addlt	r1, r5, r3, lsr #1
   41194:	cmp	r1, r2
   41198:	bcc	4117c <__assert_fail@plt+0x2e700>
   4119c:	ldr	r0, [r0, r1, lsl #2]
   411a0:	mov	r4, ip
   411a4:	cmp	r0, r7
   411a8:	beq	41248 <__assert_fail@plt+0x2e7cc>
   411ac:	ldr	r0, [sl]
   411b0:	add	r1, r0, r7, lsl #3
   411b4:	ldrb	r1, [r1, #4]
   411b8:	cmp	r1, r4
   411bc:	ldreq	r0, [r0, r7, lsl #3]
   411c0:	cmpeq	r0, r9
   411c4:	beq	4122c <__assert_fail@plt+0x2e7b0>
   411c8:	mov	r0, r8
   411cc:	mov	r1, r7
   411d0:	bl	3dc60 <__assert_fail@plt+0x2b1e4>
   411d4:	cmp	r0, #0
   411d8:	beq	41254 <__assert_fail@plt+0x2e7d8>
   411dc:	ldr	r0, [sl, #20]
   411e0:	add	r7, r7, r7, lsl #1
   411e4:	add	r1, r0, r7, lsl #2
   411e8:	ldr	r2, [r1, #4]
   411ec:	cmp	r2, #2
   411f0:	beq	41200 <__assert_fail@plt+0x2e784>
   411f4:	cmp	r2, #0
   411f8:	bne	41150 <__assert_fail@plt+0x2e6d4>
   411fc:	b	41248 <__assert_fail@plt+0x2e7cc>
   41200:	ldr	r0, [r1, #8]
   41204:	mov	r1, r8
   41208:	mov	r3, r9
   4120c:	ldr	r2, [r0, #4]
   41210:	mov	r0, sl
   41214:	str	r4, [sp]
   41218:	bl	41128 <__assert_fail@plt+0x2e6ac>
   4121c:	cmp	r0, #0
   41220:	bne	4124c <__assert_fail@plt+0x2e7d0>
   41224:	ldr	r0, [sl, #20]
   41228:	b	41150 <__assert_fail@plt+0x2e6d4>
   4122c:	cmp	r4, #9
   41230:	bne	41248 <__assert_fail@plt+0x2e7cc>
   41234:	mov	r0, r8
   41238:	mov	r1, r7
   4123c:	bl	3dc60 <__assert_fail@plt+0x2b1e4>
   41240:	cmp	r0, #0
   41244:	beq	41254 <__assert_fail@plt+0x2e7d8>
   41248:	mov	r0, #0
   4124c:	sub	sp, fp, #28
   41250:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41254:	mov	r0, #12
   41258:	sub	sp, fp, #28
   4125c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41260:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41264:	add	fp, sp, #28
   41268:	sub	sp, sp, #4
   4126c:	ldr	sl, [r2, #4]
   41270:	cmp	sl, #0
   41274:	beq	414b0 <__assert_fail@plt+0x2ea34>
   41278:	mov	r7, r2
   4127c:	mov	r9, r1
   41280:	cmp	sl, #1
   41284:	mov	r6, sl
   41288:	blt	412fc <__assert_fail@plt+0x2e880>
   4128c:	ldr	r5, [r7, #8]
   41290:	mov	r2, #0
   41294:	cmp	sl, #4
   41298:	mov	r6, sl
   4129c:	bcc	412e4 <__assert_fail@plt+0x2e868>
   412a0:	mov	r1, #0
   412a4:	bic	r2, sl, #3
   412a8:	vdup.32	q8, r1
   412ac:	mov	r3, r2
   412b0:	mov	r1, r5
   412b4:	vmov.32	d16[0], sl
   412b8:	vld1.32	{d18-d19}, [r1]!
   412bc:	subs	r3, r3, #4
   412c0:	vadd.i32	q8, q9, q8
   412c4:	bne	412b8 <__assert_fail@plt+0x2e83c>
   412c8:	vext.8	q9, q8, q8, #8
   412cc:	cmp	sl, r2
   412d0:	vadd.i32	q8, q8, q9
   412d4:	vdup.32	q9, d16[1]
   412d8:	vadd.i32	q8, q8, q9
   412dc:	vmov.32	r6, d16[0]
   412e0:	beq	412fc <__assert_fail@plt+0x2e880>
   412e4:	add	r1, r5, r2, lsl #2
   412e8:	sub	r2, sl, r2
   412ec:	ldr	r3, [r1], #4
   412f0:	subs	r2, r2, #1
   412f4:	add	r6, r3, r6
   412f8:	bne	412ec <__assert_fail@plt+0x2e870>
   412fc:	ldr	r1, [r9, #68]	; 0x44
   41300:	ldr	r2, [r9, #32]
   41304:	str	r0, [sp]
   41308:	and	r1, r1, r6
   4130c:	add	r3, r1, r1, lsl #1
   41310:	ldr	r1, [r2, r3, lsl #2]
   41314:	cmp	r1, #1
   41318:	blt	4138c <__assert_fail@plt+0x2e910>
   4131c:	add	r2, r2, r3, lsl #2
   41320:	sub	ip, sl, #1
   41324:	mov	r5, #0
   41328:	ldr	lr, [r2, #8]
   4132c:	b	41360 <__assert_fail@plt+0x2e8e4>
   41330:	mov	r3, ip
   41334:	add	r2, r3, #1
   41338:	cmp	r2, #1
   4133c:	blt	414a4 <__assert_fail@plt+0x2ea28>
   41340:	ldr	r2, [r7, #8]
   41344:	ldr	r0, [r4, #12]
   41348:	ldr	r2, [r2, r3, lsl #2]
   4134c:	ldr	r0, [r0, r3, lsl #2]
   41350:	sub	r3, r3, #1
   41354:	cmp	r0, r2
   41358:	beq	41334 <__assert_fail@plt+0x2e8b8>
   4135c:	b	41380 <__assert_fail@plt+0x2e904>
   41360:	cmp	r7, #0
   41364:	beq	41380 <__assert_fail@plt+0x2e904>
   41368:	ldr	r4, [lr, r5, lsl #2]
   4136c:	ldr	r3, [r4]
   41370:	cmp	r6, r3
   41374:	ldreq	r3, [r4, #8]
   41378:	cmpeq	r3, sl
   4137c:	beq	41330 <__assert_fail@plt+0x2e8b4>
   41380:	add	r5, r5, #1
   41384:	cmp	r5, r1
   41388:	blt	41360 <__assert_fail@plt+0x2e8e4>
   4138c:	mov	r0, #56	; 0x38
   41390:	mov	r1, #1
   41394:	bl	2f760 <__assert_fail@plt+0x1cce4>
   41398:	cmp	r0, #0
   4139c:	beq	414dc <__assert_fail@plt+0x2ea60>
   413a0:	mov	r4, r0
   413a4:	ldr	r0, [r7, #4]
   413a8:	add	sl, r4, #4
   413ac:	cmp	r0, #1
   413b0:	str	r0, [r4, #8]
   413b4:	blt	41478 <__assert_fail@plt+0x2e9fc>
   413b8:	str	r0, [r4, #4]
   413bc:	lsl	r0, r0, #2
   413c0:	bl	3233c <__assert_fail@plt+0x1f8c0>
   413c4:	cmp	r0, #0
   413c8:	str	r0, [r4, #12]
   413cc:	beq	414c8 <__assert_fail@plt+0x2ea4c>
   413d0:	ldmib	r7, {r5, r7}
   413d4:	lsl	r2, r5, #2
   413d8:	mov	r1, r7
   413dc:	bl	124b8 <memcpy@plt>
   413e0:	cmp	r5, #1
   413e4:	str	sl, [r4, #40]	; 0x28
   413e8:	blt	4148c <__assert_fail@plt+0x2ea10>
   413ec:	ldr	sl, [r9]
   413f0:	movw	ip, #65280	; 0xff00
   413f4:	mov	lr, #32
   413f8:	movt	ip, #3
   413fc:	add	r2, ip, #255	; 0xff
   41400:	ldr	r0, [r7]
   41404:	add	r1, sl, r0, lsl #3
   41408:	ldr	r0, [r1, #4]!
   4140c:	and	r3, r0, r2
   41410:	cmp	r3, #1
   41414:	beq	41468 <__assert_fail@plt+0x2e9ec>
   41418:	ldrb	r8, [r4, #52]	; 0x34
   4141c:	and	r3, lr, r0, lsr #15
   41420:	uxtb	r0, r0
   41424:	cmp	r0, #12
   41428:	orr	r3, r8, r3
   4142c:	strb	r3, [r4, #52]	; 0x34
   41430:	beq	41460 <__assert_fail@plt+0x2e9e4>
   41434:	cmp	r0, #4
   41438:	beq	4144c <__assert_fail@plt+0x2e9d0>
   4143c:	cmp	r0, #2
   41440:	bne	41454 <__assert_fail@plt+0x2e9d8>
   41444:	orr	r0, r3, #16
   41448:	b	41464 <__assert_fail@plt+0x2e9e8>
   4144c:	orr	r0, r3, #64	; 0x40
   41450:	b	41464 <__assert_fail@plt+0x2e9e8>
   41454:	ldr	r0, [r1]
   41458:	tst	r0, ip
   4145c:	beq	41468 <__assert_fail@plt+0x2e9ec>
   41460:	orr	r0, r3, #128	; 0x80
   41464:	strb	r0, [r4, #52]	; 0x34
   41468:	add	r7, r7, #4
   4146c:	subs	r5, r5, #1
   41470:	bne	41400 <__assert_fail@plt+0x2e984>
   41474:	b	4148c <__assert_fail@plt+0x2ea10>
   41478:	mov	r0, #0
   4147c:	str	r0, [sl]
   41480:	str	r0, [sl, #4]
   41484:	str	r0, [sl, #8]
   41488:	str	sl, [r4, #40]	; 0x28
   4148c:	mov	r0, r9
   41490:	mov	r1, r4
   41494:	mov	r2, r6
   41498:	bl	3e1e0 <__assert_fail@plt+0x2b764>
   4149c:	cmp	r0, #0
   414a0:	bne	414bc <__assert_fail@plt+0x2ea40>
   414a4:	mov	r0, r4
   414a8:	sub	sp, fp, #28
   414ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   414b0:	mov	r4, #0
   414b4:	str	r4, [r0]
   414b8:	b	414a4 <__assert_fail@plt+0x2ea28>
   414bc:	mov	r0, r4
   414c0:	bl	381fc <__assert_fail@plt+0x25780>
   414c4:	b	414dc <__assert_fail@plt+0x2ea60>
   414c8:	mov	r0, #0
   414cc:	str	r0, [r4, #4]
   414d0:	str	r0, [r4, #8]
   414d4:	mov	r0, r4
   414d8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   414dc:	ldr	r1, [sp]
   414e0:	mov	r0, #12
   414e4:	mov	r4, #0
   414e8:	str	r0, [r1]
   414ec:	b	414a4 <__assert_fail@plt+0x2ea28>
   414f0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   414f4:	add	fp, sp, #24
   414f8:	ldr	lr, [r0]
   414fc:	add	r7, lr, r1, lsl #3
   41500:	ldrb	r9, [r7, #4]
   41504:	cmp	r9, #7
   41508:	beq	416d4 <__assert_fail@plt+0x2ec58>
   4150c:	ldr	ip, [r2, #80]	; 0x50
   41510:	mov	r6, #1
   41514:	cmp	ip, #1
   41518:	beq	41554 <__assert_fail@plt+0x2ead8>
   4151c:	ldr	r5, [r2, #28]
   41520:	add	r7, r3, #1
   41524:	cmp	r7, r5
   41528:	bge	41554 <__assert_fail@plt+0x2ead8>
   4152c:	ldr	r6, [r2, #8]
   41530:	add	r7, r6, r3, lsl #2
   41534:	mov	r6, #1
   41538:	ldr	r4, [r7, r6, lsl #2]
   4153c:	cmn	r4, #1
   41540:	bne	41554 <__assert_fail@plt+0x2ead8>
   41544:	add	r6, r6, #1
   41548:	add	r4, r3, r6
   4154c:	cmp	r4, r5
   41550:	blt	41538 <__assert_fail@plt+0x2eabc>
   41554:	mov	r8, #0
   41558:	cmp	r9, #5
   4155c:	bne	415a4 <__assert_fail@plt+0x2eb28>
   41560:	cmp	r6, #2
   41564:	blt	416c4 <__assert_fail@plt+0x2ec48>
   41568:	ldr	r0, [r0, #128]	; 0x80
   4156c:	tst	r0, #64	; 0x40
   41570:	bne	41584 <__assert_fail@plt+0x2eb08>
   41574:	ldr	r1, [r2, #4]
   41578:	ldrb	r1, [r1, r3]
   4157c:	cmp	r1, #10
   41580:	beq	416c4 <__assert_fail@plt+0x2ec48>
   41584:	tst	r0, #128	; 0x80
   41588:	beq	416c0 <__assert_fail@plt+0x2ec44>
   4158c:	ldr	r0, [r2, #4]
   41590:	ldrb	r0, [r0, r3]
   41594:	cmp	r0, #0
   41598:	movne	r8, r6
   4159c:	mov	r0, r8
   415a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   415a4:	cmp	r9, #6
   415a8:	bne	416c4 <__assert_fail@plt+0x2ec48>
   415ac:	cmp	r6, #2
   415b0:	blt	416c4 <__assert_fail@plt+0x2ec48>
   415b4:	ldr	r7, [lr, r1, lsl #3]
   415b8:	ldr	r0, [r7, #32]
   415bc:	cmp	r0, #0
   415c0:	bne	415dc <__assert_fail@plt+0x2eb60>
   415c4:	ldr	r1, [r7, #36]	; 0x24
   415c8:	cmp	r1, #0
   415cc:	bne	415dc <__assert_fail@plt+0x2eb60>
   415d0:	ldr	r1, [r7, #20]
   415d4:	cmp	r1, #0
   415d8:	beq	416cc <__assert_fail@plt+0x2ec50>
   415dc:	cmp	ip, #1
   415e0:	bne	415f0 <__assert_fail@plt+0x2eb74>
   415e4:	ldr	r1, [r2, #4]
   415e8:	ldrb	r5, [r1, r3]
   415ec:	b	415f8 <__assert_fail@plt+0x2eb7c>
   415f0:	ldr	r1, [r2, #8]
   415f4:	ldr	r5, [r1, r3, lsl #2]
   415f8:	ldr	r1, [r7, #20]
   415fc:	cmp	r1, #1
   41600:	blt	41624 <__assert_fail@plt+0x2eba8>
   41604:	ldr	r2, [r7]
   41608:	mov	r3, #0
   4160c:	ldr	r4, [r2, r3, lsl #2]
   41610:	cmp	r5, r4
   41614:	beq	416a0 <__assert_fail@plt+0x2ec24>
   41618:	add	r3, r3, #1
   4161c:	cmp	r3, r1
   41620:	blt	4160c <__assert_fail@plt+0x2eb90>
   41624:	ldr	r1, [r7, #36]	; 0x24
   41628:	cmp	r1, #1
   4162c:	blt	41660 <__assert_fail@plt+0x2ebe4>
   41630:	mov	r4, #0
   41634:	ldr	r0, [r7, #12]
   41638:	ldr	r1, [r0, r4, lsl #2]
   4163c:	mov	r0, r5
   41640:	bl	123c8 <iswctype@plt>
   41644:	cmp	r0, #0
   41648:	bne	416a0 <__assert_fail@plt+0x2ec24>
   4164c:	ldr	r0, [r7, #36]	; 0x24
   41650:	add	r4, r4, #1
   41654:	cmp	r4, r0
   41658:	blt	41634 <__assert_fail@plt+0x2ebb8>
   4165c:	ldr	r0, [r7, #32]
   41660:	cmp	r0, #1
   41664:	blt	41698 <__assert_fail@plt+0x2ec1c>
   41668:	ldr	r1, [r7, #4]
   4166c:	mov	r2, #0
   41670:	ldr	r3, [r1, r2, lsl #2]
   41674:	cmp	r3, r5
   41678:	bhi	4168c <__assert_fail@plt+0x2ec10>
   4167c:	ldr	r3, [r7, #8]
   41680:	ldr	r3, [r3, r2, lsl #2]
   41684:	cmp	r5, r3
   41688:	bls	416a0 <__assert_fail@plt+0x2ec24>
   4168c:	add	r2, r2, #1
   41690:	cmp	r2, r0
   41694:	blt	41670 <__assert_fail@plt+0x2ebf4>
   41698:	mov	r0, #0
   4169c:	b	416a4 <__assert_fail@plt+0x2ec28>
   416a0:	mov	r0, r6
   416a4:	ldrb	r1, [r7, #16]
   416a8:	tst	r1, #1
   416ac:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   416b0:	cmp	r0, #0
   416b4:	bgt	416c4 <__assert_fail@plt+0x2ec48>
   416b8:	cmp	r6, #1
   416bc:	movle	r6, #1
   416c0:	mov	r8, r6
   416c4:	mov	r0, r8
   416c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   416cc:	mov	r5, #0
   416d0:	b	415f8 <__assert_fail@plt+0x2eb7c>
   416d4:	ldr	r0, [r2, #4]
   416d8:	mov	r8, #0
   416dc:	ldrb	r6, [r0, r3]
   416e0:	cmp	r6, #194	; 0xc2
   416e4:	bcc	416c4 <__assert_fail@plt+0x2ec48>
   416e8:	ldr	r1, [r2, #48]	; 0x30
   416ec:	add	r2, r3, #2
   416f0:	cmp	r2, r1
   416f4:	bgt	416c4 <__assert_fail@plt+0x2ec48>
   416f8:	add	r0, r0, r3
   416fc:	cmp	r6, #223	; 0xdf
   41700:	ldrb	r7, [r0, #1]
   41704:	bhi	41728 <__assert_fail@plt+0x2ecac>
   41708:	mov	r8, #2
   4170c:	cmp	r7, #191	; 0xbf
   41710:	sxtb	r0, r7
   41714:	movwhi	r8, #0
   41718:	cmn	r0, #1
   4171c:	movwgt	r8, #0
   41720:	mov	r0, r8
   41724:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   41728:	cmp	r6, #239	; 0xef
   4172c:	bhi	41748 <__assert_fail@plt+0x2eccc>
   41730:	mov	r2, #3
   41734:	cmp	r6, #224	; 0xe0
   41738:	bne	417a4 <__assert_fail@plt+0x2ed28>
   4173c:	cmp	r7, #160	; 0xa0
   41740:	bcc	416c4 <__assert_fail@plt+0x2ec48>
   41744:	b	417a4 <__assert_fail@plt+0x2ed28>
   41748:	cmp	r6, #247	; 0xf7
   4174c:	bhi	41768 <__assert_fail@plt+0x2ecec>
   41750:	mov	r2, #4
   41754:	cmp	r6, #240	; 0xf0
   41758:	bne	417a4 <__assert_fail@plt+0x2ed28>
   4175c:	cmp	r7, #144	; 0x90
   41760:	bcc	416c4 <__assert_fail@plt+0x2ec48>
   41764:	b	417a4 <__assert_fail@plt+0x2ed28>
   41768:	cmp	r6, #251	; 0xfb
   4176c:	bhi	41788 <__assert_fail@plt+0x2ed0c>
   41770:	mov	r2, #5
   41774:	cmp	r6, #248	; 0xf8
   41778:	bne	417a4 <__assert_fail@plt+0x2ed28>
   4177c:	cmp	r7, #136	; 0x88
   41780:	bcc	416c4 <__assert_fail@plt+0x2ec48>
   41784:	b	417a4 <__assert_fail@plt+0x2ed28>
   41788:	cmp	r6, #253	; 0xfd
   4178c:	bhi	416c4 <__assert_fail@plt+0x2ec48>
   41790:	mov	r2, #6
   41794:	cmp	r6, #252	; 0xfc
   41798:	bne	417a4 <__assert_fail@plt+0x2ed28>
   4179c:	cmp	r7, #132	; 0x84
   417a0:	bcc	416c4 <__assert_fail@plt+0x2ec48>
   417a4:	add	r3, r2, r3
   417a8:	cmp	r3, r1
   417ac:	bgt	416c4 <__assert_fail@plt+0x2ec48>
   417b0:	mov	r1, #1
   417b4:	b	417c8 <__assert_fail@plt+0x2ed4c>
   417b8:	add	r1, r1, #1
   417bc:	cmp	r1, r2
   417c0:	movcs	r0, r2
   417c4:	popcs	{r4, r5, r6, r7, r8, r9, fp, pc}
   417c8:	ldrb	r3, [r0, r1]
   417cc:	sxtb	r7, r3
   417d0:	cmn	r7, #1
   417d4:	bgt	416c4 <__assert_fail@plt+0x2ec48>
   417d8:	cmp	r3, #191	; 0xbf
   417dc:	bls	417b8 <__assert_fail@plt+0x2ed3c>
   417e0:	b	416c4 <__assert_fail@plt+0x2ec48>
   417e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   417e8:	add	fp, sp, #24
   417ec:	ldr	r4, [r1, #4]
   417f0:	mov	r6, r0
   417f4:	mvn	r0, #0
   417f8:	mov	r8, #0
   417fc:	uxtab	r3, r0, r4
   41800:	cmp	r3, #6
   41804:	bhi	419a0 <__assert_fail@plt+0x2ef24>
   41808:	ldr	r0, [r6, #4]
   4180c:	mov	r9, r1
   41810:	ldrb	r1, [r0, r2]
   41814:	add	r7, pc, #4
   41818:	sxtb	r0, r1
   4181c:	ldr	pc, [r7, r3, lsl #2]
   41820:	andeq	r1, r4, ip, lsr r8
   41824:	andeq	r1, r4, r0, lsr #19
   41828:	andeq	r1, r4, r0, asr r8
   4182c:	andeq	r1, r4, r0, lsr #19
   41830:	andeq	r1, r4, r8, ror r8
   41834:	andeq	r1, r4, r0, lsr #19
   41838:	andeq	r1, r4, r0, ror r8
   4183c:	ldrb	r3, [r9]
   41840:	uxtb	r7, r0
   41844:	cmp	r3, r7
   41848:	beq	418ac <__assert_fail@plt+0x2ee30>
   4184c:	b	419a0 <__assert_fail@plt+0x2ef24>
   41850:	ldr	r3, [r9]
   41854:	ubfx	r7, r1, #5, #3
   41858:	mov	r5, #1
   4185c:	ldr	r3, [r3, r7, lsl #2]
   41860:	and	r7, r1, #31
   41864:	tst	r3, r5, lsl r7
   41868:	bne	418ac <__assert_fail@plt+0x2ee30>
   4186c:	b	419a0 <__assert_fail@plt+0x2ef24>
   41870:	cmp	r0, #0
   41874:	blt	419a0 <__assert_fail@plt+0x2ef24>
   41878:	cmp	r1, #0
   4187c:	beq	4189c <__assert_fail@plt+0x2ee20>
   41880:	cmp	r1, #10
   41884:	bne	418ac <__assert_fail@plt+0x2ee30>
   41888:	ldr	r3, [r6, #84]	; 0x54
   4188c:	ldrb	r3, [r3, #128]	; 0x80
   41890:	tst	r3, #64	; 0x40
   41894:	beq	419a0 <__assert_fail@plt+0x2ef24>
   41898:	b	418ac <__assert_fail@plt+0x2ee30>
   4189c:	ldr	r3, [r6, #84]	; 0x54
   418a0:	ldrb	r3, [r3, #128]	; 0x80
   418a4:	tst	r3, #128	; 0x80
   418a8:	bne	419a0 <__assert_fail@plt+0x2ef24>
   418ac:	movw	r3, #65280	; 0xff00
   418b0:	movt	r3, #3
   418b4:	tst	r4, r3
   418b8:	beq	41904 <__assert_fail@plt+0x2ee88>
   418bc:	cmn	r2, #1
   418c0:	ble	418fc <__assert_fail@plt+0x2ee80>
   418c4:	ldr	r3, [r6, #48]	; 0x30
   418c8:	cmp	r3, r2
   418cc:	beq	419c0 <__assert_fail@plt+0x2ef44>
   418d0:	ldr	r3, [r6, #80]	; 0x50
   418d4:	cmp	r3, #2
   418d8:	blt	41910 <__assert_fail@plt+0x2ee94>
   418dc:	ldr	r0, [r6, #8]
   418e0:	ldr	r7, [r0, r2, lsl #2]
   418e4:	cmn	r7, #1
   418e8:	bne	41940 <__assert_fail@plt+0x2eec4>
   418ec:	sub	r1, r2, #1
   418f0:	cmp	r2, #0
   418f4:	mov	r2, r1
   418f8:	bgt	418e0 <__assert_fail@plt+0x2ee64>
   418fc:	ldr	r1, [r6, #60]	; 0x3c
   41900:	b	41964 <__assert_fail@plt+0x2eee8>
   41904:	mov	r8, #1
   41908:	mov	r0, r8
   4190c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   41910:	ldr	r2, [r6, #68]	; 0x44
   41914:	ubfx	r3, r1, #5, #3
   41918:	and	r7, r1, #31
   4191c:	mov	r1, #1
   41920:	ldr	r3, [r2, r3, lsl #2]
   41924:	mov	r2, #0
   41928:	tst	r3, r1, lsl r7
   4192c:	bne	4197c <__assert_fail@plt+0x2ef00>
   41930:	mov	r1, #0
   41934:	cmp	r0, #10
   41938:	beq	41958 <__assert_fail@plt+0x2eedc>
   4193c:	b	41964 <__assert_fail@plt+0x2eee8>
   41940:	ldrb	r0, [r6, #78]	; 0x4e
   41944:	cmp	r0, #0
   41948:	bne	419d0 <__assert_fail@plt+0x2ef54>
   4194c:	mov	r1, #0
   41950:	cmp	r7, #10
   41954:	bne	41964 <__assert_fail@plt+0x2eee8>
   41958:	ldrb	r1, [r6, #77]	; 0x4d
   4195c:	cmp	r1, #0
   41960:	movwne	r1, #2
   41964:	and	r0, r1, #1
   41968:	tst	r4, #1024	; 0x400
   4196c:	eor	r2, r0, #1
   41970:	beq	4197c <__assert_fail@plt+0x2ef00>
   41974:	cmp	r0, #0
   41978:	beq	419a0 <__assert_fail@plt+0x2ef24>
   4197c:	ldr	r0, [r9, #4]
   41980:	cmp	r2, #0
   41984:	bne	41990 <__assert_fail@plt+0x2ef14>
   41988:	ands	r2, r0, #2048	; 0x800
   4198c:	bne	419a0 <__assert_fail@plt+0x2ef24>
   41990:	tst	r1, #2
   41994:	bne	419a8 <__assert_fail@plt+0x2ef2c>
   41998:	ands	r2, r0, #8192	; 0x2000
   4199c:	beq	419a8 <__assert_fail@plt+0x2ef2c>
   419a0:	mov	r0, r8
   419a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   419a8:	and	r0, r0, #32768	; 0x8000
   419ac:	mov	r2, #1
   419b0:	and	r1, r1, #8
   419b4:	eor	r0, r2, r0, lsr #15
   419b8:	orr	r0, r0, r1, lsr #3
   419bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   419c0:	ldr	r0, [r6, #88]	; 0x58
   419c4:	and	r0, r0, #2
   419c8:	eor	r1, r0, #10
   419cc:	b	41964 <__assert_fail@plt+0x2eee8>
   419d0:	mov	r0, r7
   419d4:	bl	127dc <iswalnum@plt>
   419d8:	mov	r1, #1
   419dc:	mov	r2, #0
   419e0:	cmp	r7, #95	; 0x5f
   419e4:	beq	4197c <__assert_fail@plt+0x2ef00>
   419e8:	cmp	r0, #0
   419ec:	beq	4194c <__assert_fail@plt+0x2eed0>
   419f0:	b	4197c <__assert_fail@plt+0x2ef00>
   419f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   419f8:	add	fp, sp, #28
   419fc:	sub	sp, sp, #4
   41a00:	vpush	{d8-d9}
   41a04:	sub	sp, sp, #2256	; 0x8d0
   41a08:	sub	sp, sp, #12288	; 0x3000
   41a0c:	mov	r6, #0
   41a10:	sub	lr, fp, #1024	; 0x400
   41a14:	mov	r8, r1
   41a18:	str	r0, [sp, #148]	; 0x94
   41a1c:	vmov.i32	q4, #0	; 0x00000000
   41a20:	str	r6, [r1, #44]	; 0x2c
   41a24:	str	r6, [r1, #48]	; 0x30
   41a28:	sub	r1, lr, #56	; 0x38
   41a2c:	mov	r0, r1
   41a30:	vst1.64	{d8-d9}, [r0]!
   41a34:	vst1.64	{d8-d9}, [r0]
   41a38:	ldr	r0, [r8, #8]
   41a3c:	cmp	r0, #1
   41a40:	blt	429b0 <__assert_fail@plt+0x2ff34>
   41a44:	ldr	r2, [sp, #148]	; 0x94
   41a48:	mov	r7, #0
   41a4c:	mov	r6, #0
   41a50:	str	r8, [sp, #24]
   41a54:	add	r0, r2, #112	; 0x70
   41a58:	str	r0, [sp, #4]
   41a5c:	add	r0, r2, #96	; 0x60
   41a60:	str	r0, [sp]
   41a64:	add	r0, r1, #16
   41a68:	str	r0, [sp, #8]
   41a6c:	ldr	r0, [r8, #12]
   41a70:	ldr	r1, [sp, #148]	; 0x94
   41a74:	ldr	r0, [r0, r7, lsl #2]
   41a78:	ldr	r2, [r1]
   41a7c:	add	r9, r2, r0, lsl #3
   41a80:	ldr	r1, [r9, #4]!
   41a84:	uxtb	r3, r1
   41a88:	cmp	r3, #1
   41a8c:	str	r3, [sp, #92]	; 0x5c
   41a90:	bne	41ad4 <__assert_fail@plt+0x2f058>
   41a94:	str	r2, [sp, #16]
   41a98:	ldrb	r2, [r2, r0, lsl #3]
   41a9c:	sub	lr, fp, #1024	; 0x400
   41aa0:	str	r0, [sp, #20]
   41aa4:	mov	r0, r7
   41aa8:	mov	r4, #1
   41aac:	sub	r7, lr, #56	; 0x38
   41ab0:	mov	r5, r7
   41ab4:	ubfx	r3, r2, #5, #3
   41ab8:	ldr	r8, [sp, #24]
   41abc:	and	r2, r2, #31
   41ac0:	ldr	r7, [r7, r3, lsl #2]
   41ac4:	orr	r2, r7, r4, lsl r2
   41ac8:	mov	r7, r0
   41acc:	str	r2, [r5, r3, lsl #2]
   41ad0:	b	41c30 <__assert_fail@plt+0x2f1b4>
   41ad4:	cmp	r3, #7
   41ad8:	beq	41b28 <__assert_fail@plt+0x2f0ac>
   41adc:	cmp	r3, #5
   41ae0:	beq	41b80 <__assert_fail@plt+0x2f104>
   41ae4:	cmp	r3, #3
   41ae8:	bne	423ac <__assert_fail@plt+0x2f930>
   41aec:	str	r2, [sp, #16]
   41af0:	ldr	r2, [r2, r0, lsl #3]
   41af4:	sub	lr, fp, #1024	; 0x400
   41af8:	str	r0, [sp, #20]
   41afc:	sub	r3, lr, #56	; 0x38
   41b00:	vld1.64	{d16-d17}, [r3]
   41b04:	vld1.32	{d18-d19}, [r2]!
   41b08:	vorr	q8, q8, q9
   41b0c:	vst1.64	{d16-d17}, [r3]
   41b10:	vld1.32	{d16-d17}, [r2]
   41b14:	ldr	r2, [sp, #8]
   41b18:	vld1.32	{d18-d19}, [r2]
   41b1c:	vorr	q8, q9, q8
   41b20:	vst1.32	{d16-d17}, [r2]
   41b24:	b	41c30 <__assert_fail@plt+0x2f1b4>
   41b28:	str	r0, [sp, #20]
   41b2c:	ldr	r0, [sp, #148]	; 0x94
   41b30:	str	r2, [sp, #16]
   41b34:	mvn	r2, #0
   41b38:	str	r2, [fp, #-1068]	; 0xfffffbd4
   41b3c:	str	r2, [fp, #-1072]	; 0xfffffbd0
   41b40:	str	r2, [fp, #-1076]	; 0xfffffbcc
   41b44:	str	r2, [fp, #-1080]	; 0xfffffbc8
   41b48:	ldr	r3, [r0, #128]	; 0x80
   41b4c:	and	r2, r3, #128	; 0x80
   41b50:	ands	r3, r3, #64	; 0x40
   41b54:	beq	41b60 <__assert_fail@plt+0x2f0e4>
   41b58:	cmp	r2, #0
   41b5c:	beq	41c30 <__assert_fail@plt+0x2f1b4>
   41b60:	cmp	r3, #0
   41b64:	mvn	r3, #1
   41b68:	movweq	r3, #64510	; 0xfbfe
   41b6c:	movteq	r3, #65535	; 0xffff
   41b70:	cmp	r2, #0
   41b74:	mvneq	r3, #1024	; 0x400
   41b78:	str	r3, [fp, #-1080]	; 0xfffffbc8
   41b7c:	b	41c30 <__assert_fail@plt+0x2f1b4>
   41b80:	str	r2, [sp, #16]
   41b84:	ldr	r2, [sp, #148]	; 0x94
   41b88:	mov	r4, r7
   41b8c:	str	r0, [sp, #20]
   41b90:	ldr	r2, [r2, #92]	; 0x5c
   41b94:	cmp	r2, #2
   41b98:	blt	41bd8 <__assert_fail@plt+0x2f15c>
   41b9c:	ldr	r0, [sp, #148]	; 0x94
   41ba0:	sub	lr, fp, #1024	; 0x400
   41ba4:	sub	r3, lr, #56	; 0x38
   41ba8:	vld1.64	{d16-d17}, [r3]
   41bac:	ldr	r2, [r0, #60]	; 0x3c
   41bb0:	vld1.32	{d18-d19}, [r2]!
   41bb4:	vorr	q8, q8, q9
   41bb8:	vst1.64	{d16-d17}, [r3]
   41bbc:	vld1.32	{d18-d19}, [r2]
   41bc0:	ldr	r2, [sp, #8]
   41bc4:	vld1.32	{d20-d21}, [r2]
   41bc8:	vorr	q9, q10, q9
   41bcc:	vst1.32	{d18-d19}, [r2]
   41bd0:	vmov.32	r2, d16[0]
   41bd4:	b	41bfc <__assert_fail@plt+0x2f180>
   41bd8:	mvn	r2, #0
   41bdc:	str	r2, [fp, #-1052]	; 0xfffffbe4
   41be0:	str	r2, [fp, #-1056]	; 0xfffffbe0
   41be4:	str	r2, [fp, #-1060]	; 0xfffffbdc
   41be8:	str	r2, [fp, #-1064]	; 0xfffffbd8
   41bec:	str	r2, [fp, #-1068]	; 0xfffffbd4
   41bf0:	str	r2, [fp, #-1072]	; 0xfffffbd0
   41bf4:	str	r2, [fp, #-1076]	; 0xfffffbcc
   41bf8:	str	r2, [fp, #-1080]	; 0xfffffbc8
   41bfc:	ldr	r0, [sp, #148]	; 0x94
   41c00:	ldr	r8, [sp, #24]
   41c04:	ldr	r3, [r0, #128]	; 0x80
   41c08:	ands	r7, r3, #64	; 0x40
   41c0c:	and	r3, r3, #128	; 0x80
   41c10:	biceq	r2, r2, #1024	; 0x400
   41c14:	mov	r7, r4
   41c18:	beq	41c24 <__assert_fail@plt+0x2f1a8>
   41c1c:	cmp	r3, #0
   41c20:	beq	41c30 <__assert_fail@plt+0x2f1b4>
   41c24:	cmp	r3, #0
   41c28:	bicne	r2, r2, #1
   41c2c:	str	r2, [fp, #-1080]	; 0xfffffbc8
   41c30:	ldr	sl, [sp, #92]	; 0x5c
   41c34:	movw	r2, #65280	; 0xff00
   41c38:	movt	r2, #3
   41c3c:	ands	r2, r1, r2
   41c40:	beq	41ef0 <__assert_fail@plt+0x2f474>
   41c44:	tst	r1, #8192	; 0x2000
   41c48:	beq	41c74 <__assert_fail@plt+0x2f1f8>
   41c4c:	ldr	r2, [fp, #-1080]	; 0xfffffbc8
   41c50:	sub	lr, fp, #1024	; 0x400
   41c54:	sub	r3, lr, #56	; 0x38
   41c58:	vst1.64	{d8-d9}, [r3]!
   41c5c:	vst1.64	{d8-d9}, [r3]
   41c60:	tst	r2, #1024	; 0x400
   41c64:	beq	423ac <__assert_fail@plt+0x2f930>
   41c68:	ldr	sl, [sp, #92]	; 0x5c
   41c6c:	mov	r2, #1024	; 0x400
   41c70:	str	r2, [fp, #-1080]	; 0xfffffbc8
   41c74:	tst	r1, #32768	; 0x8000
   41c78:	bne	41e78 <__assert_fail@plt+0x2f3fc>
   41c7c:	tst	r1, #1024	; 0x400
   41c80:	beq	41e00 <__assert_fail@plt+0x2f384>
   41c84:	cmp	sl, #1
   41c88:	ldrbeq	r2, [r9, #2]
   41c8c:	tsteq	r2, #64	; 0x40
   41c90:	beq	41e78 <__assert_fail@plt+0x2f3fc>
   41c94:	ldr	r0, [sp, #148]	; 0x94
   41c98:	ldr	r2, [r0, #92]	; 0x5c
   41c9c:	cmp	r2, #1
   41ca0:	ble	41d30 <__assert_fail@plt+0x2f2b4>
   41ca4:	ldr	r0, [sp, #148]	; 0x94
   41ca8:	ldr	r3, [sp]
   41cac:	sub	lr, fp, #1024	; 0x400
   41cb0:	ldr	r2, [r0, #60]	; 0x3c
   41cb4:	vld1.32	{d16-d17}, [r3]
   41cb8:	sub	r3, lr, #56	; 0x38
   41cbc:	vld1.64	{d20-d21}, [r3]
   41cc0:	vld1.32	{d18-d19}, [r2]!
   41cc4:	vorn	q8, q8, q9
   41cc8:	vand	q8, q10, q8
   41ccc:	vst1.64	{d16-d17}, [r3]
   41cd0:	vmov.32	r3, d16[1]
   41cd4:	vld1.32	{d18-d19}, [r2]
   41cd8:	ldr	r2, [sp, #4]
   41cdc:	vld1.32	{d20-d21}, [r2]
   41ce0:	ldr	r2, [sp, #8]
   41ce4:	vld1.32	{d22-d23}, [r2]
   41ce8:	vorn	q9, q10, q9
   41cec:	vand	q9, q11, q9
   41cf0:	vst1.32	{d18-d19}, [r2]
   41cf4:	vmov.32	r2, d16[0]
   41cf8:	orr	r2, r3, r2
   41cfc:	vmov.32	r3, d17[0]
   41d00:	orr	r2, r2, r3
   41d04:	vmov.32	r3, d17[1]
   41d08:	orr	r2, r2, r3
   41d0c:	vmov.32	r3, d18[0]
   41d10:	orr	r2, r2, r3
   41d14:	vmov.32	r3, d18[1]
   41d18:	orr	r2, r2, r3
   41d1c:	vmov.32	r3, d19[0]
   41d20:	orr	r2, r2, r3
   41d24:	vmov.32	r3, d19[1]
   41d28:	orr	r2, r2, r3
   41d2c:	b	41df4 <__assert_fail@plt+0x2f378>
   41d30:	ldr	r4, [sp, #148]	; 0x94
   41d34:	str	r6, [sp, #144]	; 0x90
   41d38:	ldr	r6, [fp, #-1072]	; 0xfffffbd0
   41d3c:	ldr	r2, [fp, #-1068]	; 0xfffffbd4
   41d40:	str	r7, [sp, #12]
   41d44:	ldr	r5, [r4, #116]	; 0x74
   41d48:	ldr	ip, [r4, #104]	; 0x68
   41d4c:	ldr	r0, [r4, #108]	; 0x6c
   41d50:	ldr	r3, [r4, #96]	; 0x60
   41d54:	ldr	lr, [r4, #100]	; 0x64
   41d58:	ldr	r8, [r4, #112]	; 0x70
   41d5c:	ldr	sl, [r4, #124]	; 0x7c
   41d60:	str	r5, [sp, #136]	; 0x88
   41d64:	ldr	r5, [r4, #120]	; 0x78
   41d68:	ldr	r4, [fp, #-1080]	; 0xfffffbc8
   41d6c:	and	r2, r2, r0
   41d70:	and	ip, r6, ip
   41d74:	ldr	r0, [sp, #136]	; 0x88
   41d78:	str	r5, [sp, #140]	; 0x8c
   41d7c:	ldr	r5, [fp, #-1076]	; 0xfffffbcc
   41d80:	and	r7, r4, r3
   41d84:	str	r7, [fp, #-1080]	; 0xfffffbc8
   41d88:	and	lr, r5, lr
   41d8c:	str	lr, [fp, #-1076]	; 0xfffffbcc
   41d90:	str	ip, [fp, #-1072]	; 0xfffffbd0
   41d94:	str	r2, [fp, #-1068]	; 0xfffffbd4
   41d98:	orr	r7, lr, r7
   41d9c:	ldr	r6, [fp, #-1064]	; 0xfffffbd8
   41da0:	orr	r7, r7, ip
   41da4:	orr	r2, r7, r2
   41da8:	ldr	r7, [sp, #12]
   41dac:	and	r6, r6, r8
   41db0:	ldr	r8, [sp, #24]
   41db4:	str	r6, [fp, #-1064]	; 0xfffffbd8
   41db8:	orr	r2, r2, r6
   41dbc:	ldr	r6, [sp, #144]	; 0x90
   41dc0:	ldr	r4, [fp, #-1060]	; 0xfffffbdc
   41dc4:	and	r4, r4, r0
   41dc8:	ldr	r0, [sp, #140]	; 0x8c
   41dcc:	str	r4, [fp, #-1060]	; 0xfffffbdc
   41dd0:	orr	r2, r2, r4
   41dd4:	ldr	r3, [fp, #-1056]	; 0xfffffbe0
   41dd8:	and	r3, r3, r0
   41ddc:	str	r3, [fp, #-1056]	; 0xfffffbe0
   41de0:	orr	r2, r2, r3
   41de4:	ldr	r5, [fp, #-1052]	; 0xfffffbe4
   41de8:	and	r5, r5, sl
   41dec:	str	r5, [fp, #-1052]	; 0xfffffbe4
   41df0:	orr	r2, r2, r5
   41df4:	ldr	sl, [sp, #92]	; 0x5c
   41df8:	cmp	r2, #0
   41dfc:	beq	423ac <__assert_fail@plt+0x2f930>
   41e00:	tst	r1, #2048	; 0x800
   41e04:	beq	41ef0 <__assert_fail@plt+0x2f474>
   41e08:	cmp	sl, #1
   41e0c:	bne	41e1c <__assert_fail@plt+0x2f3a0>
   41e10:	ldrb	r0, [r9, #2]
   41e14:	tst	r0, #64	; 0x40
   41e18:	bne	41e78 <__assert_fail@plt+0x2f3fc>
   41e1c:	ldr	r0, [sp, #148]	; 0x94
   41e20:	sub	lr, fp, #1024	; 0x400
   41e24:	sub	r1, lr, #56	; 0x38
   41e28:	ldr	r0, [r0, #92]	; 0x5c
   41e2c:	cmp	r0, #1
   41e30:	ble	41e84 <__assert_fail@plt+0x2f408>
   41e34:	ldr	r0, [sp, #148]	; 0x94
   41e38:	ldr	r2, [sp]
   41e3c:	vld1.64	{d20-d21}, [r1]
   41e40:	ldr	r0, [r0, #60]	; 0x3c
   41e44:	vld1.32	{d16-d17}, [r2]
   41e48:	vld1.32	{d18-d19}, [r0]!
   41e4c:	vand	q8, q9, q8
   41e50:	vbic	q9, q10, q8
   41e54:	vst1.64	{d18-d19}, [r1]
   41e58:	ldr	r1, [sp, #4]
   41e5c:	vld1.32	{d20-d21}, [r0]
   41e60:	ldr	r0, [sp, #8]
   41e64:	vld1.32	{d16-d17}, [r1]
   41e68:	vld1.32	{d22-d23}, [r0]
   41e6c:	vand	q8, q10, q8
   41e70:	vbic	q8, q11, q8
   41e74:	b	41eac <__assert_fail@plt+0x2f430>
   41e78:	sub	lr, fp, #1024	; 0x400
   41e7c:	sub	r0, lr, #56	; 0x38
   41e80:	b	423a4 <__assert_fail@plt+0x2f928>
   41e84:	ldr	r0, [sp]
   41e88:	vld1.64	{d18-d19}, [r1]
   41e8c:	vld1.32	{d16-d17}, [r0]
   41e90:	ldr	r0, [sp, #4]
   41e94:	vbic	q9, q9, q8
   41e98:	vst1.64	{d18-d19}, [r1]
   41e9c:	vld1.32	{d16-d17}, [r0]
   41ea0:	ldr	r0, [sp, #8]
   41ea4:	vld1.32	{d20-d21}, [r0]
   41ea8:	vbic	q8, q10, q8
   41eac:	vst1.32	{d16-d17}, [r0]
   41eb0:	vmov.32	r0, d18[0]
   41eb4:	vmov.32	r1, d18[1]
   41eb8:	orr	r0, r1, r0
   41ebc:	vmov.32	r1, d19[0]
   41ec0:	orr	r0, r0, r1
   41ec4:	vmov.32	r1, d19[1]
   41ec8:	orr	r0, r0, r1
   41ecc:	vmov.32	r1, d16[0]
   41ed0:	orr	r0, r0, r1
   41ed4:	vmov.32	r1, d16[1]
   41ed8:	orr	r0, r0, r1
   41edc:	vmov.32	r1, d17[0]
   41ee0:	orr	r0, r0, r1
   41ee4:	vmov.32	r1, d17[1]
   41ee8:	orrs	r0, r0, r1
   41eec:	beq	423ac <__assert_fail@plt+0x2f930>
   41ef0:	cmp	r6, #1
   41ef4:	blt	422c0 <__assert_fail@plt+0x2f844>
   41ef8:	ldr	r0, [fp, #-1052]	; 0xfffffbe4
   41efc:	ldr	lr, [fp, #-1080]	; 0xfffffbc8
   41f00:	ldr	r5, [fp, #-1076]	; 0xfffffbcc
   41f04:	ldr	r1, [fp, #-1072]	; 0xfffffbd0
   41f08:	ldr	r8, [fp, #-1068]	; 0xfffffbd4
   41f0c:	str	r7, [sp, #12]
   41f10:	mov	r9, #0
   41f14:	add	r7, sp, #152	; 0x98
   41f18:	str	r0, [sp, #96]	; 0x60
   41f1c:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   41f20:	str	r0, [sp, #136]	; 0x88
   41f24:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   41f28:	str	r0, [sp, #128]	; 0x80
   41f2c:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   41f30:	str	r0, [sp, #132]	; 0x84
   41f34:	sub	r0, fp, #6144	; 0x1800
   41f38:	sub	r4, r0, #104	; 0x68
   41f3c:	mov	ip, r1
   41f40:	cmp	sl, #1
   41f44:	str	r5, [sp, #140]	; 0x8c
   41f48:	bne	41f70 <__assert_fail@plt+0x2f4f4>
   41f4c:	ldr	r0, [sp, #20]
   41f50:	ldr	r1, [sp, #16]
   41f54:	mov	r2, #1
   41f58:	ldrb	r0, [r1, r0, lsl #3]
   41f5c:	ubfx	r1, r0, #5, #3
   41f60:	and	r0, r0, #31
   41f64:	ldr	r1, [r7, r1, lsl #2]
   41f68:	tst	r1, r2, lsl r0
   41f6c:	beq	421ec <__assert_fail@plt+0x2f770>
   41f70:	str	r4, [sp, #112]	; 0x70
   41f74:	str	r6, [sp, #144]	; 0x90
   41f78:	str	r9, [sp, #108]	; 0x6c
   41f7c:	mov	r3, r8
   41f80:	mov	r5, lr
   41f84:	ldm	r7, {r0, r2, sl}
   41f88:	ldr	r8, [sp, #140]	; 0x8c
   41f8c:	ldr	r1, [r7, #12]
   41f90:	str	ip, [sp, #100]	; 0x64
   41f94:	ldr	r4, [sp, #132]	; 0x84
   41f98:	ldr	r9, [r7, #20]
   41f9c:	str	r3, [sp, #104]	; 0x68
   41fa0:	and	r6, sl, ip
   41fa4:	ldr	ip, [r7, #16]
   41fa8:	str	r0, [sp, #124]	; 0x7c
   41fac:	and	r0, r0, lr
   41fb0:	str	r2, [sp, #116]	; 0x74
   41fb4:	and	r2, r2, r8
   41fb8:	str	r1, [sp, #120]	; 0x78
   41fbc:	ldr	lr, [r7, #24]
   41fc0:	str	r0, [sp, #84]	; 0x54
   41fc4:	orr	r0, r2, r0
   41fc8:	str	r2, [sp, #80]	; 0x50
   41fcc:	and	r2, r1, r3
   41fd0:	ldr	r1, [sp, #136]	; 0x88
   41fd4:	str	r6, [sp, #88]	; 0x58
   41fd8:	orr	r0, r0, r6
   41fdc:	str	r2, [sp, #76]	; 0x4c
   41fe0:	ldr	r6, [sp, #96]	; 0x60
   41fe4:	orr	r0, r0, r2
   41fe8:	and	r2, ip, r4
   41fec:	str	r2, [sp, #72]	; 0x48
   41ff0:	orr	r0, r0, r2
   41ff4:	ldr	r2, [sp, #128]	; 0x80
   41ff8:	and	r2, r9, r2
   41ffc:	str	r2, [sp, #68]	; 0x44
   42000:	orr	r0, r0, r2
   42004:	and	r2, lr, r1
   42008:	str	r2, [sp, #64]	; 0x40
   4200c:	orr	r0, r0, r2
   42010:	ldr	r2, [r7, #28]
   42014:	and	r3, r2, r6
   42018:	orrs	r0, r0, r3
   4201c:	beq	421b4 <__assert_fail@plt+0x2f738>
   42020:	ldr	r0, [sp, #124]	; 0x7c
   42024:	str	r3, [sp, #28]
   42028:	ldr	r3, [sp, #104]	; 0x68
   4202c:	str	r4, [sp, #132]	; 0x84
   42030:	bic	r0, r5, r0
   42034:	str	r0, [sp, #56]	; 0x38
   42038:	ldr	r0, [sp, #116]	; 0x74
   4203c:	bic	r0, r8, r0
   42040:	ldr	r8, [sp, #100]	; 0x64
   42044:	str	r0, [sp, #52]	; 0x34
   42048:	bic	r0, r8, sl
   4204c:	bic	r1, sl, r8
   42050:	str	r0, [sp, #60]	; 0x3c
   42054:	ldr	r0, [sp, #120]	; 0x78
   42058:	bic	r0, r3, r0
   4205c:	str	r0, [sp, #48]	; 0x30
   42060:	bic	r0, r4, ip
   42064:	ldr	r4, [sp, #128]	; 0x80
   42068:	str	r0, [sp, #44]	; 0x2c
   4206c:	bic	r0, r4, r9
   42070:	str	r0, [sp, #40]	; 0x28
   42074:	ldr	r0, [sp, #136]	; 0x88
   42078:	bic	r0, r0, lr
   4207c:	str	r0, [sp, #36]	; 0x24
   42080:	bic	r0, r6, r2
   42084:	bic	r2, r2, r6
   42088:	str	r0, [sp, #32]
   4208c:	ldr	r0, [sp, #124]	; 0x7c
   42090:	bic	r8, r0, r5
   42094:	ldr	r5, [sp, #140]	; 0x8c
   42098:	ldr	r0, [sp, #116]	; 0x74
   4209c:	str	r1, [sp, #140]	; 0x8c
   420a0:	bic	r5, r0, r5
   420a4:	orr	r0, r5, r8
   420a8:	orr	r0, r0, r1
   420ac:	ldr	r1, [sp, #120]	; 0x78
   420b0:	bic	sl, r1, r3
   420b4:	ldr	r1, [sp, #132]	; 0x84
   420b8:	orr	r0, r0, sl
   420bc:	bic	r1, ip, r1
   420c0:	orr	r3, r0, r1
   420c4:	bic	r0, r9, r4
   420c8:	orr	r4, r3, r0
   420cc:	ldr	r3, [sp, #136]	; 0x88
   420d0:	bic	r3, lr, r3
   420d4:	orr	r4, r4, r3
   420d8:	orrs	r4, r4, r2
   420dc:	beq	421dc <__assert_fail@plt+0x2f760>
   420e0:	ldr	r6, [sp, #144]	; 0x90
   420e4:	add	r4, sp, #152	; 0x98
   420e8:	sub	lr, fp, #6144	; 0x1800
   420ec:	mov	ip, r4
   420f0:	str	r8, [r4, r6, lsl #5]
   420f4:	mov	r4, r5
   420f8:	add	r5, ip, r6, lsl #5
   420fc:	str	r4, [r5, #4]
   42100:	ldr	r4, [sp, #140]	; 0x8c
   42104:	str	r4, [r5, #8]
   42108:	str	sl, [r5, #12]
   4210c:	str	r1, [r5, #16]
   42110:	str	r0, [r5, #20]
   42114:	ldr	r0, [sp, #84]	; 0x54
   42118:	str	r3, [r5, #24]
   4211c:	str	r2, [r5, #28]
   42120:	ldr	r4, [sp, #112]	; 0x70
   42124:	sub	r1, lr, #104	; 0x68
   42128:	str	r0, [r7]
   4212c:	ldr	r0, [sp, #80]	; 0x50
   42130:	str	r0, [r7, #4]
   42134:	ldr	r0, [sp, #88]	; 0x58
   42138:	str	r0, [r7, #8]
   4213c:	ldr	r0, [sp, #76]	; 0x4c
   42140:	str	r0, [r7, #12]
   42144:	ldr	r0, [sp, #72]	; 0x48
   42148:	str	r0, [r7, #16]
   4214c:	ldr	r0, [sp, #68]	; 0x44
   42150:	str	r0, [r7, #20]
   42154:	ldr	r0, [sp, #64]	; 0x40
   42158:	str	r0, [r7, #24]
   4215c:	ldr	r0, [sp, #28]
   42160:	str	r0, [r7, #28]
   42164:	add	r0, r6, r6, lsl #1
   42168:	add	r5, r1, r0, lsl #2
   4216c:	ldr	r0, [r4, #4]
   42170:	mov	r8, r5
   42174:	str	r0, [r8, #4]!
   42178:	ldr	sl, [r4, #4]
   4217c:	cmp	sl, #1
   42180:	blt	421f8 <__assert_fail@plt+0x2f77c>
   42184:	str	r0, [r5]
   42188:	lsl	r0, r0, #2
   4218c:	bl	3233c <__assert_fail@plt+0x1f8c0>
   42190:	ldr	r9, [sp, #108]	; 0x6c
   42194:	ldr	r6, [sp, #60]	; 0x3c
   42198:	cmp	r0, #0
   4219c:	str	r0, [r5, #8]
   421a0:	beq	42938 <__assert_fail@plt+0x2febc>
   421a4:	ldr	r1, [r4, #8]
   421a8:	lsl	r2, sl, #2
   421ac:	bl	124b8 <memcpy@plt>
   421b0:	b	42210 <__assert_fail@plt+0x2f794>
   421b4:	ldr	r0, [sp, #104]	; 0x68
   421b8:	ldr	r9, [sp, #108]	; 0x6c
   421bc:	ldr	r6, [sp, #144]	; 0x90
   421c0:	ldr	r4, [sp, #112]	; 0x70
   421c4:	ldr	sl, [sp, #92]	; 0x5c
   421c8:	ldr	r1, [sp, #100]	; 0x64
   421cc:	mov	lr, r5
   421d0:	mov	r5, r8
   421d4:	mov	r8, r0
   421d8:	b	422a8 <__assert_fail@plt+0x2f82c>
   421dc:	ldr	r9, [sp, #108]	; 0x6c
   421e0:	ldr	r4, [sp, #112]	; 0x70
   421e4:	ldr	r6, [sp, #60]	; 0x3c
   421e8:	b	4221c <__assert_fail@plt+0x2f7a0>
   421ec:	ldr	r5, [sp, #140]	; 0x8c
   421f0:	mov	r1, ip
   421f4:	b	422a8 <__assert_fail@plt+0x2f82c>
   421f8:	ldr	r9, [sp, #108]	; 0x6c
   421fc:	ldr	r6, [sp, #60]	; 0x3c
   42200:	mov	r0, #0
   42204:	str	r0, [r5]
   42208:	str	r0, [r5, #4]
   4220c:	str	r0, [r5, #8]
   42210:	ldr	r0, [sp, #144]	; 0x90
   42214:	add	r0, r0, #1
   42218:	str	r0, [sp, #144]	; 0x90
   4221c:	ldr	r0, [sp, #24]
   42220:	ldr	r1, [sp, #12]
   42224:	ldr	r0, [r0, #12]
   42228:	ldr	r1, [r0, r1, lsl #2]
   4222c:	mov	r0, r4
   42230:	bl	3dc60 <__assert_fail@plt+0x2b1e4>
   42234:	cmp	r0, #0
   42238:	beq	428b4 <__assert_fail@plt+0x2fe38>
   4223c:	ldr	lr, [sp, #56]	; 0x38
   42240:	ldr	ip, [sp, #52]	; 0x34
   42244:	ldr	r8, [sp, #48]	; 0x30
   42248:	ldr	r2, [sp, #44]	; 0x2c
   4224c:	mov	sl, r6
   42250:	ldr	r3, [sp, #36]	; 0x24
   42254:	ldr	r5, [sp, #32]
   42258:	mov	r1, #0
   4225c:	orr	r0, ip, lr
   42260:	orr	r0, r0, r6
   42264:	ldr	r6, [sp, #40]	; 0x28
   42268:	orr	r0, r0, r8
   4226c:	orr	r0, r0, r2
   42270:	orr	r0, r0, r6
   42274:	orr	r0, r0, r3
   42278:	orrs	r0, r0, r5
   4227c:	movweq	r1, #17
   42280:	cmp	r1, #0
   42284:	bne	422c8 <__assert_fail@plt+0x2f84c>
   42288:	str	r6, [sp, #128]	; 0x80
   4228c:	mov	r1, sl
   42290:	ldr	sl, [sp, #92]	; 0x5c
   42294:	ldr	r6, [sp, #144]	; 0x90
   42298:	str	r5, [sp, #96]	; 0x60
   4229c:	mov	r5, ip
   422a0:	str	r3, [sp, #136]	; 0x88
   422a4:	str	r2, [sp, #132]	; 0x84
   422a8:	add	r9, r9, #1
   422ac:	add	r4, r4, #12
   422b0:	add	r7, r7, #32
   422b4:	cmp	r9, r6
   422b8:	blt	41f3c <__assert_fail@plt+0x2f4c0>
   422bc:	b	422ec <__assert_fail@plt+0x2f870>
   422c0:	mov	r9, #0
   422c4:	b	42324 <__assert_fail@plt+0x2f8a8>
   422c8:	cmp	r1, #17
   422cc:	bne	423c0 <__assert_fail@plt+0x2f944>
   422d0:	str	r6, [sp, #128]	; 0x80
   422d4:	ldr	r1, [sp, #60]	; 0x3c
   422d8:	ldr	r6, [sp, #144]	; 0x90
   422dc:	str	r5, [sp, #96]	; 0x60
   422e0:	mov	r5, ip
   422e4:	str	r3, [sp, #136]	; 0x88
   422e8:	str	r2, [sp, #132]	; 0x84
   422ec:	ldr	r0, [sp, #132]	; 0x84
   422f0:	str	r1, [fp, #-1072]	; 0xfffffbd0
   422f4:	str	r5, [fp, #-1076]	; 0xfffffbcc
   422f8:	str	r8, [fp, #-1068]	; 0xfffffbd4
   422fc:	ldr	r8, [sp, #24]
   42300:	ldr	r7, [sp, #12]
   42304:	str	r0, [fp, #-1064]	; 0xfffffbd8
   42308:	ldr	r0, [sp, #128]	; 0x80
   4230c:	str	r0, [fp, #-1060]	; 0xfffffbdc
   42310:	ldr	r0, [sp, #136]	; 0x88
   42314:	str	r0, [fp, #-1056]	; 0xfffffbe0
   42318:	ldr	r0, [sp, #96]	; 0x60
   4231c:	str	r0, [fp, #-1052]	; 0xfffffbe4
   42320:	str	lr, [fp, #-1080]	; 0xfffffbc8
   42324:	sub	lr, fp, #1024	; 0x400
   42328:	cmp	r9, r6
   4232c:	sub	r1, lr, #56	; 0x38
   42330:	bne	423ac <__assert_fail@plt+0x2f930>
   42334:	mov	r0, r1
   42338:	sub	lr, fp, #6144	; 0x1800
   4233c:	mov	r2, #1
   42340:	mov	sl, r7
   42344:	vld1.32	{d16-d17}, [r0]!
   42348:	sub	r3, lr, #104	; 0x68
   4234c:	vld1.64	{d18-d19}, [r0]
   42350:	add	r0, sp, #152	; 0x98
   42354:	add	r0, r0, r9, lsl #5
   42358:	vst1.32	{d16-d17}, [r0]!
   4235c:	vst1.32	{d18-d19}, [r0]
   42360:	ldr	r0, [r8, #12]
   42364:	ldr	r6, [r0, r7, lsl #2]
   42368:	add	r0, r9, r9, lsl #1
   4236c:	mov	r7, r1
   42370:	add	r4, r3, r0, lsl #2
   42374:	str	r2, [r3, r0, lsl #2]
   42378:	mov	r0, #4
   4237c:	mov	r5, r4
   42380:	str	r2, [r5, #4]!
   42384:	bl	3233c <__assert_fail@plt+0x1f8c0>
   42388:	cmp	r0, #0
   4238c:	str	r0, [r4, #8]
   42390:	beq	429e4 <__assert_fail@plt+0x2ff68>
   42394:	str	r6, [r0]
   42398:	mov	r0, r7
   4239c:	add	r6, r9, #1
   423a0:	mov	r7, sl
   423a4:	vst1.64	{d8-d9}, [r0]!
   423a8:	vst1.64	{d8-d9}, [r0]
   423ac:	ldr	r0, [r8, #8]
   423b0:	add	r7, r7, #1
   423b4:	cmp	r7, r0
   423b8:	blt	41a6c <__assert_fail@plt+0x2eff0>
   423bc:	b	423fc <__assert_fail@plt+0x2f980>
   423c0:	ldr	r1, [sp, #60]	; 0x3c
   423c4:	ldr	r7, [sp, #12]
   423c8:	cmp	r0, #0
   423cc:	str	r1, [fp, #-1072]	; 0xfffffbd0
   423d0:	str	ip, [fp, #-1076]	; 0xfffffbcc
   423d4:	str	r8, [fp, #-1068]	; 0xfffffbd4
   423d8:	str	r2, [fp, #-1064]	; 0xfffffbd8
   423dc:	str	r6, [fp, #-1060]	; 0xfffffbdc
   423e0:	ldr	r8, [sp, #24]
   423e4:	ldr	r6, [sp, #144]	; 0x90
   423e8:	str	r3, [fp, #-1056]	; 0xfffffbe0
   423ec:	str	r5, [fp, #-1052]	; 0xfffffbe4
   423f0:	str	lr, [fp, #-1080]	; 0xfffffbc8
   423f4:	bne	423ac <__assert_fail@plt+0x2f930>
   423f8:	b	42404 <__assert_fail@plt+0x2f988>
   423fc:	cmp	r6, #0
   42400:	ble	429b0 <__assert_fail@plt+0x2ff34>
   42404:	mov	r0, #0
   42408:	str	r0, [fp, #-3136]	; 0xfffff3c0
   4240c:	add	r0, r6, #1
   42410:	str	r0, [fp, #-3140]	; 0xfffff3bc
   42414:	lsl	r0, r0, #2
   42418:	bl	3233c <__assert_fail@plt+0x1f8c0>
   4241c:	cmp	r0, #0
   42420:	str	r0, [fp, #-3132]	; 0xfffff3c4
   42424:	mov	r0, #0
   42428:	movweq	r0, #12
   4242c:	str	r0, [fp, #-56]	; 0xffffffc8
   42430:	beq	429fc <__assert_fail@plt+0x2ff80>
   42434:	sub	lr, fp, #3072	; 0xc00
   42438:	vmov.i32	q8, #0	; 0x00000000
   4243c:	mov	r1, #0
   42440:	mov	r2, #0
   42444:	mov	r4, #0
   42448:	mov	r3, #0
   4244c:	mov	r8, #0
   42450:	sub	r0, lr, #104	; 0x68
   42454:	sub	lr, fp, #3072	; 0xc00
   42458:	vst1.64	{d16-d17}, [r0]!
   4245c:	sub	r5, lr, #68	; 0x44
   42460:	vst1.64	{d16-d17}, [r0]
   42464:	mov	r0, #0
   42468:	str	r0, [sp, #140]	; 0x8c
   4246c:	mov	r0, #0
   42470:	str	r0, [sp, #136]	; 0x88
   42474:	mov	r0, #0
   42478:	str	r0, [sp, #132]	; 0x84
   4247c:	mov	r0, #0
   42480:	str	r0, [sp, #128]	; 0x80
   42484:	mov	r0, #0
   42488:	str	r0, [sp, #144]	; 0x90
   4248c:	mov	r0, #0
   42490:	str	r0, [sp, #112]	; 0x70
   42494:	mov	r0, #0
   42498:	sub	lr, fp, #6144	; 0x1800
   4249c:	str	r2, [sp, #124]	; 0x7c
   424a0:	str	r3, [sp, #116]	; 0x74
   424a4:	str	r4, [sp, #120]	; 0x78
   424a8:	str	r0, [fp, #-3136]	; 0xfffff3c0
   424ac:	add	r0, r8, r8, lsl #1
   424b0:	sub	r2, lr, #104	; 0x68
   424b4:	add	r0, r2, r0, lsl #2
   424b8:	ldr	r7, [r0, #4]
   424bc:	cmp	r7, #1
   424c0:	blt	42518 <__assert_fail@plt+0x2fa9c>
   424c4:	ldr	r4, [r0, #8]
   424c8:	mov	r9, #0
   424cc:	ldr	r2, [sp, #148]	; 0x94
   424d0:	ldr	r0, [r4, r9, lsl #2]
   424d4:	ldr	r2, [r2, #12]
   424d8:	ldr	r0, [r2, r0, lsl #2]
   424dc:	cmn	r0, #1
   424e0:	beq	42508 <__assert_fail@plt+0x2fa8c>
   424e4:	ldr	r1, [sp, #148]	; 0x94
   424e8:	add	r0, r0, r0, lsl #1
   424ec:	ldr	r1, [r1, #24]
   424f0:	add	r1, r1, r0, lsl #2
   424f4:	mov	r0, r5
   424f8:	bl	3dad0 <__assert_fail@plt+0x2b054>
   424fc:	mov	r1, #0
   42500:	cmp	r0, #0
   42504:	bne	4283c <__assert_fail@plt+0x2fdc0>
   42508:	add	r9, r9, #1
   4250c:	cmp	r9, r7
   42510:	blt	424cc <__assert_fail@plt+0x2fa50>
   42514:	str	r1, [fp, #-56]	; 0xffffffc8
   42518:	ldr	r1, [sp, #148]	; 0x94
   4251c:	sub	r0, fp, #56	; 0x38
   42520:	mov	r2, r5
   42524:	mov	r3, #0
   42528:	bl	3dd9c <__assert_fail@plt+0x2b320>
   4252c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   42530:	mov	r7, r0
   42534:	sub	lr, fp, #1024	; 0x400
   42538:	add	r4, sp, #152	; 0x98
   4253c:	sub	r0, lr, #56	; 0x38
   42540:	cmp	r7, #0
   42544:	str	r7, [r0, r8, lsl #2]
   42548:	bne	42554 <__assert_fail@plt+0x2fad8>
   4254c:	cmp	r1, #0
   42550:	bne	428f4 <__assert_fail@plt+0x2fe78>
   42554:	ldrsb	r0, [r7, #52]	; 0x34
   42558:	cmn	r0, #1
   4255c:	ble	4257c <__assert_fail@plt+0x2fb00>
   42560:	sub	lr, fp, #3072	; 0xc00
   42564:	sub	r0, lr, #56	; 0x38
   42568:	sub	lr, fp, #2048	; 0x800
   4256c:	str	r7, [r0, r8, lsl #2]
   42570:	sub	r0, lr, #56	; 0x38
   42574:	str	r7, [r0, r8, lsl #2]
   42578:	b	4260c <__assert_fail@plt+0x2fb90>
   4257c:	ldr	r1, [sp, #148]	; 0x94
   42580:	sub	r0, fp, #56	; 0x38
   42584:	mov	r2, r5
   42588:	mov	r3, #1
   4258c:	bl	3dd9c <__assert_fail@plt+0x2b320>
   42590:	sub	lr, fp, #2048	; 0x800
   42594:	cmp	r0, #0
   42598:	sub	r1, lr, #56	; 0x38
   4259c:	str	r0, [r1, r8, lsl #2]
   425a0:	bne	425b0 <__assert_fail@plt+0x2fb34>
   425a4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   425a8:	cmp	r1, #0
   425ac:	bne	428f4 <__assert_fail@plt+0x2fe78>
   425b0:	cmp	r7, r0
   425b4:	beq	425d8 <__assert_fail@plt+0x2fb5c>
   425b8:	ldr	r0, [sp, #148]	; 0x94
   425bc:	ldr	r1, [sp, #112]	; 0x70
   425c0:	ldr	r0, [r0, #92]	; 0x5c
   425c4:	cmp	r0, #1
   425c8:	mov	r0, #0
   425cc:	movwgt	r0, #1
   425d0:	orr	r1, r1, r0
   425d4:	str	r1, [sp, #112]	; 0x70
   425d8:	ldr	r1, [sp, #148]	; 0x94
   425dc:	sub	r0, fp, #56	; 0x38
   425e0:	mov	r2, r5
   425e4:	mov	r3, #2
   425e8:	bl	3dd9c <__assert_fail@plt+0x2b320>
   425ec:	sub	lr, fp, #3072	; 0xc00
   425f0:	cmp	r0, #0
   425f4:	sub	r1, lr, #56	; 0x38
   425f8:	str	r0, [r1, r8, lsl #2]
   425fc:	ldr	r1, [fp, #-56]	; 0xffffffc8
   42600:	bne	4260c <__assert_fail@plt+0x2fb90>
   42604:	cmp	r1, #0
   42608:	bne	428f4 <__assert_fail@plt+0x2fe78>
   4260c:	ldr	r0, [r4, r8, lsl #5]
   42610:	ldr	r2, [sp, #144]	; 0x90
   42614:	mov	r9, r6
   42618:	orr	r2, r2, r0
   4261c:	add	r0, r4, r8, lsl #5
   42620:	mov	r4, r5
   42624:	add	r8, r8, #1
   42628:	str	r2, [sp, #144]	; 0x90
   4262c:	cmp	r8, r9
   42630:	ldmib	r0, {ip, lr}
   42634:	ldr	r7, [r0, #12]
   42638:	ldr	r3, [r0, #16]
   4263c:	ldr	r5, [r0, #20]
   42640:	ldr	r6, [r0, #24]
   42644:	ldr	r0, [r0, #28]
   42648:	ldr	r2, [sp, #140]	; 0x8c
   4264c:	orr	r2, r2, r0
   42650:	mov	r0, r9
   42654:	str	r2, [sp, #140]	; 0x8c
   42658:	ldr	r2, [sp, #124]	; 0x7c
   4265c:	orr	r2, r2, r6
   42660:	ldr	r6, [sp, #136]	; 0x88
   42664:	orr	r6, r6, r5
   42668:	mov	r5, r4
   4266c:	ldr	r4, [sp, #120]	; 0x78
   42670:	str	r6, [sp, #136]	; 0x88
   42674:	mov	r6, r9
   42678:	orr	r4, r4, r3
   4267c:	ldr	r3, [sp, #132]	; 0x84
   42680:	orr	r3, r3, r7
   42684:	str	r3, [sp, #132]	; 0x84
   42688:	ldr	r3, [sp, #128]	; 0x80
   4268c:	orr	r3, r3, lr
   42690:	str	r3, [sp, #128]	; 0x80
   42694:	ldr	r3, [sp, #116]	; 0x74
   42698:	orr	r3, r3, ip
   4269c:	blt	42494 <__assert_fail@plt+0x2fa18>
   426a0:	ldr	r7, [sp, #144]	; 0x90
   426a4:	ldr	r0, [sp, #128]	; 0x80
   426a8:	str	r3, [fp, #-3172]	; 0xfffff39c
   426ac:	ldr	sl, [sp, #112]	; 0x70
   426b0:	str	r7, [fp, #-3176]	; 0xfffff398
   426b4:	str	r0, [fp, #-3168]	; 0xfffff3a0
   426b8:	ldr	r0, [sp, #132]	; 0x84
   426bc:	tst	sl, #1
   426c0:	str	r0, [fp, #-3164]	; 0xfffff3a4
   426c4:	ldr	r0, [sp, #136]	; 0x88
   426c8:	str	r4, [fp, #-3160]	; 0xfffff3a8
   426cc:	str	r0, [fp, #-3156]	; 0xfffff3ac
   426d0:	ldr	r0, [sp, #140]	; 0x8c
   426d4:	str	r2, [fp, #-3152]	; 0xfffff3b0
   426d8:	str	r0, [fp, #-3148]	; 0xfffff3b4
   426dc:	mov	r0, #4
   426e0:	bne	42a08 <__assert_fail@plt+0x2ff8c>
   426e4:	mov	r1, #256	; 0x100
   426e8:	bl	2f760 <__assert_fail@plt+0x1cce4>
   426ec:	ldr	r1, [sp, #24]
   426f0:	sub	lr, fp, #3072	; 0xc00
   426f4:	cmp	r0, #0
   426f8:	sub	r8, lr, #104	; 0x68
   426fc:	str	r0, [r1, #44]	; 0x2c
   42700:	beq	42880 <__assert_fail@plt+0x2fe04>
   42704:	mov	r1, #0
   42708:	mov	r3, r7
   4270c:	mov	r2, #0
   42710:	add	r4, sp, #152	; 0x98
   42714:	cmp	r3, #0
   42718:	beq	427b8 <__assert_fail@plt+0x2fd3c>
   4271c:	ldr	r7, [sp, #148]	; 0x94
   42720:	lsl	r6, r2, #5
   42724:	mov	r5, #1
   42728:	add	r7, r7, r2, lsl #2
   4272c:	add	ip, r7, #96	; 0x60
   42730:	b	42784 <__assert_fail@plt+0x2fd08>
   42734:	mov	lr, #0
   42738:	str	sl, [sp, #112]	; 0x70
   4273c:	ldr	r7, [r4, lr, lsl #3]
   42740:	add	lr, lr, #4
   42744:	tst	r7, r5
   42748:	beq	4273c <__assert_fail@plt+0x2fcc0>
   4274c:	ldr	r7, [ip]
   42750:	mov	sl, r4
   42754:	sub	r4, fp, #1024	; 0x400
   42758:	sub	r4, r4, #56	; 0x38
   4275c:	tst	r7, r5
   42760:	sub	r7, fp, #2048	; 0x800
   42764:	sub	r7, r7, #56	; 0x38
   42768:	moveq	r7, r4
   4276c:	mov	r4, sl
   42770:	ldr	sl, [sp, #112]	; 0x70
   42774:	add	r7, r7, lr
   42778:	ldr	r7, [r7, #-4]
   4277c:	str	r7, [r0, r6, lsl #2]
   42780:	b	4278c <__assert_fail@plt+0x2fd10>
   42784:	tst	r3, #1
   42788:	bne	42734 <__assert_fail@plt+0x2fcb8>
   4278c:	lsr	r7, r3, #1
   42790:	cmp	r1, r3, lsr #1
   42794:	add	r6, r6, #1
   42798:	lsl	r5, r5, #1
   4279c:	mov	r3, r7
   427a0:	bne	42784 <__assert_fail@plt+0x2fd08>
   427a4:	b	427b8 <__assert_fail@plt+0x2fd3c>
   427a8:	ldr	r3, [r8, r2, lsl #2]
   427ac:	add	r4, r4, #4
   427b0:	cmp	r3, #0
   427b4:	bne	4271c <__assert_fail@plt+0x2fca0>
   427b8:	add	r2, r2, #1
   427bc:	cmp	r2, #8
   427c0:	bne	427a8 <__assert_fail@plt+0x2fd2c>
   427c4:	ldr	r7, [sp, #144]	; 0x90
   427c8:	tst	r7, #1024	; 0x400
   427cc:	beq	42810 <__assert_fail@plt+0x2fd94>
   427d0:	mov	r1, #0
   427d4:	add	r2, sp, #152	; 0x98
   427d8:	add	r3, r2, r1, lsl #5
   427dc:	ldrb	r3, [r3, #1]
   427e0:	tst	r3, #4
   427e4:	bne	427f8 <__assert_fail@plt+0x2fd7c>
   427e8:	add	r1, r1, #1
   427ec:	cmp	r1, r9
   427f0:	blt	427d8 <__assert_fail@plt+0x2fd5c>
   427f4:	b	42810 <__assert_fail@plt+0x2fd94>
   427f8:	sub	lr, fp, #3072	; 0xc00
   427fc:	tst	sl, #1
   42800:	sub	r2, lr, #56	; 0x38
   42804:	ldr	r1, [r2, r1, lsl #2]
   42808:	str	r1, [r0, #40]	; 0x28
   4280c:	strne	r1, [r0, #1064]	; 0x428
   42810:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   42814:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   42818:	sub	lr, fp, #6144	; 0x1800
   4281c:	sub	r0, lr, #104	; 0x68
   42820:	add	r4, r0, #8
   42824:	ldr	r0, [r4], #12
   42828:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   4282c:	subs	r9, r9, #1
   42830:	bne	42824 <__assert_fail@plt+0x2fda8>
   42834:	mov	r0, #1
   42838:	b	429d4 <__assert_fail@plt+0x2ff58>
   4283c:	ldr	r1, [sp, #116]	; 0x74
   42840:	str	r0, [fp, #-56]	; 0xffffffc8
   42844:	str	r1, [fp, #-3172]	; 0xfffff39c
   42848:	ldr	r1, [sp, #144]	; 0x90
   4284c:	str	r1, [fp, #-3176]	; 0xfffff398
   42850:	ldr	r1, [sp, #128]	; 0x80
   42854:	str	r1, [fp, #-3168]	; 0xfffff3a0
   42858:	ldr	r1, [sp, #132]	; 0x84
   4285c:	str	r1, [fp, #-3164]	; 0xfffff3a4
   42860:	ldr	r1, [sp, #120]	; 0x78
   42864:	str	r1, [fp, #-3160]	; 0xfffff3a8
   42868:	ldr	r1, [sp, #136]	; 0x88
   4286c:	str	r1, [fp, #-3156]	; 0xfffff3ac
   42870:	ldr	r1, [sp, #124]	; 0x7c
   42874:	str	r1, [fp, #-3152]	; 0xfffff3b0
   42878:	ldr	r1, [sp, #140]	; 0x8c
   4287c:	str	r1, [fp, #-3148]	; 0xfffff3b4
   42880:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   42884:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   42888:	cmp	r6, #1
   4288c:	blt	428ac <__assert_fail@plt+0x2fe30>
   42890:	sub	lr, fp, #6144	; 0x1800
   42894:	sub	r0, lr, #104	; 0x68
   42898:	add	r4, r0, #8
   4289c:	ldr	r0, [r4], #12
   428a0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   428a4:	subs	r6, r6, #1
   428a8:	bne	4289c <__assert_fail@plt+0x2fe20>
   428ac:	mov	r0, #0
   428b0:	b	429d4 <__assert_fail@plt+0x2ff58>
   428b4:	ldr	r0, [sp, #52]	; 0x34
   428b8:	str	r6, [fp, #-1072]	; 0xfffffbd0
   428bc:	str	r0, [fp, #-1076]	; 0xfffffbcc
   428c0:	ldr	r0, [sp, #48]	; 0x30
   428c4:	str	r0, [fp, #-1068]	; 0xfffffbd4
   428c8:	ldr	r0, [sp, #44]	; 0x2c
   428cc:	str	r0, [fp, #-1064]	; 0xfffffbd8
   428d0:	ldr	r0, [sp, #40]	; 0x28
   428d4:	str	r0, [fp, #-1060]	; 0xfffffbdc
   428d8:	ldr	r0, [sp, #36]	; 0x24
   428dc:	str	r0, [fp, #-1056]	; 0xfffffbe0
   428e0:	ldr	r0, [sp, #32]
   428e4:	str	r0, [fp, #-1052]	; 0xfffffbe4
   428e8:	ldr	r0, [sp, #56]	; 0x38
   428ec:	str	r0, [fp, #-1080]	; 0xfffffbc8
   428f0:	b	42980 <__assert_fail@plt+0x2ff04>
   428f4:	ldr	r0, [sp, #116]	; 0x74
   428f8:	str	r0, [fp, #-3172]	; 0xfffff39c
   428fc:	ldr	r0, [sp, #144]	; 0x90
   42900:	str	r0, [fp, #-3176]	; 0xfffff398
   42904:	ldr	r0, [sp, #128]	; 0x80
   42908:	str	r0, [fp, #-3168]	; 0xfffff3a0
   4290c:	ldr	r0, [sp, #132]	; 0x84
   42910:	str	r0, [fp, #-3164]	; 0xfffff3a4
   42914:	ldr	r0, [sp, #120]	; 0x78
   42918:	str	r0, [fp, #-3160]	; 0xfffff3a8
   4291c:	ldr	r0, [sp, #136]	; 0x88
   42920:	str	r0, [fp, #-3156]	; 0xfffff3ac
   42924:	ldr	r0, [sp, #124]	; 0x7c
   42928:	str	r0, [fp, #-3152]	; 0xfffff3b0
   4292c:	ldr	r0, [sp, #140]	; 0x8c
   42930:	str	r0, [fp, #-3148]	; 0xfffff3b4
   42934:	b	42880 <__assert_fail@plt+0x2fe04>
   42938:	ldr	r0, [sp, #52]	; 0x34
   4293c:	str	r6, [fp, #-1072]	; 0xfffffbd0
   42940:	str	r0, [fp, #-1076]	; 0xfffffbcc
   42944:	ldr	r0, [sp, #48]	; 0x30
   42948:	str	r0, [fp, #-1068]	; 0xfffffbd4
   4294c:	ldr	r0, [sp, #44]	; 0x2c
   42950:	str	r0, [fp, #-1064]	; 0xfffffbd8
   42954:	ldr	r0, [sp, #40]	; 0x28
   42958:	str	r0, [fp, #-1060]	; 0xfffffbdc
   4295c:	ldr	r0, [sp, #36]	; 0x24
   42960:	str	r0, [fp, #-1056]	; 0xfffffbe0
   42964:	ldr	r0, [sp, #32]
   42968:	str	r0, [fp, #-1052]	; 0xfffffbe4
   4296c:	ldr	r0, [sp, #56]	; 0x38
   42970:	str	r0, [fp, #-1080]	; 0xfffffbc8
   42974:	mov	r0, #0
   42978:	str	r0, [r8]
   4297c:	str	r0, [r5]
   42980:	ldr	r8, [sp, #24]
   42984:	ldr	r9, [sp, #144]	; 0x90
   42988:	cmp	r9, #1
   4298c:	blt	429ac <__assert_fail@plt+0x2ff30>
   42990:	sub	lr, fp, #6144	; 0x1800
   42994:	sub	r0, lr, #104	; 0x68
   42998:	add	r4, r0, #8
   4299c:	ldr	r0, [r4], #12
   429a0:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   429a4:	subs	r9, r9, #1
   429a8:	bne	4299c <__assert_fail@plt+0x2ff20>
   429ac:	mvn	r6, #0
   429b0:	mov	r0, #0
   429b4:	cmp	r6, #0
   429b8:	bne	429d4 <__assert_fail@plt+0x2ff58>
   429bc:	mov	r0, #4
   429c0:	mov	r1, #256	; 0x100
   429c4:	bl	2f760 <__assert_fail@plt+0x1cce4>
   429c8:	cmp	r0, #0
   429cc:	str	r0, [r8, #44]	; 0x2c
   429d0:	movwne	r0, #1
   429d4:	sub	sp, fp, #48	; 0x30
   429d8:	vpop	{d8-d9}
   429dc:	add	sp, sp, #4
   429e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   429e4:	mov	r0, #0
   429e8:	str	r0, [r5]
   429ec:	str	r0, [r4]
   429f0:	cmp	r9, #1
   429f4:	bge	42990 <__assert_fail@plt+0x2ff14>
   429f8:	b	429ac <__assert_fail@plt+0x2ff30>
   429fc:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   42a00:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   42a04:	b	42890 <__assert_fail@plt+0x2fe14>
   42a08:	mov	r1, #512	; 0x200
   42a0c:	bl	2f760 <__assert_fail@plt+0x1cce4>
   42a10:	ldr	r1, [sp, #24]
   42a14:	cmp	r0, #0
   42a18:	str	r0, [r1, #48]	; 0x30
   42a1c:	beq	42880 <__assert_fail@plt+0x2fe04>
   42a20:	sub	lr, fp, #1024	; 0x400
   42a24:	mov	r3, #0
   42a28:	add	r8, sp, #152	; 0x98
   42a2c:	mov	r5, r7
   42a30:	mov	r6, #0
   42a34:	sub	r1, lr, #56	; 0x38
   42a38:	sub	lr, r1, #4
   42a3c:	sub	r1, fp, #2048	; 0x800
   42a40:	sub	r1, r1, #56	; 0x38
   42a44:	sub	ip, r1, #4
   42a48:	cmp	r5, #0
   42a4c:	beq	42ae0 <__assert_fail@plt+0x30064>
   42a50:	lsl	r4, r6, #5
   42a54:	mov	r1, #1
   42a58:	b	42aa4 <__assert_fail@plt+0x30028>
   42a5c:	mov	r2, r8
   42a60:	str	lr, [sp, #148]	; 0x94
   42a64:	mov	sl, lr
   42a68:	mov	lr, ip
   42a6c:	ldr	r7, [r2], #32
   42a70:	add	sl, sl, #4
   42a74:	add	lr, lr, #4
   42a78:	tst	r7, r1
   42a7c:	beq	42a6c <__assert_fail@plt+0x2fff0>
   42a80:	ldr	r2, [sl]
   42a84:	mov	r7, r0
   42a88:	str	r2, [r7, r4, lsl #2]!
   42a8c:	ldr	r2, [lr]
   42a90:	ldr	sl, [sp, #112]	; 0x70
   42a94:	ldr	lr, [sp, #148]	; 0x94
   42a98:	str	r2, [r7, #1024]	; 0x400
   42a9c:	ldr	r7, [sp, #144]	; 0x90
   42aa0:	b	42aac <__assert_fail@plt+0x30030>
   42aa4:	tst	r5, #1
   42aa8:	bne	42a5c <__assert_fail@plt+0x2ffe0>
   42aac:	lsr	r2, r5, #1
   42ab0:	cmp	r3, r5, lsr #1
   42ab4:	add	r4, r4, #1
   42ab8:	lsl	r1, r1, #1
   42abc:	mov	r5, r2
   42ac0:	bne	42aa4 <__assert_fail@plt+0x30028>
   42ac4:	b	42ae0 <__assert_fail@plt+0x30064>
   42ac8:	sub	r1, fp, #3072	; 0xc00
   42acc:	add	r8, r8, #4
   42ad0:	sub	r1, r1, #104	; 0x68
   42ad4:	ldr	r5, [r1, r6, lsl #2]
   42ad8:	cmp	r5, #0
   42adc:	bne	42a50 <__assert_fail@plt+0x2ffd4>
   42ae0:	add	r6, r6, #1
   42ae4:	cmp	r6, #8
   42ae8:	bne	42ac8 <__assert_fail@plt+0x3004c>
   42aec:	b	427c8 <__assert_fail@plt+0x2fd4c>
   42af0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   42af4:	add	fp, sp, #28
   42af8:	sub	sp, sp, #52	; 0x34
   42afc:	ldr	r4, [r1, #8]
   42b00:	ldr	r8, [r1, #12]
   42b04:	mov	r6, r0
   42b08:	mov	r0, #1
   42b0c:	mov	r5, r1
   42b10:	str	r0, [sp, #44]	; 0x2c
   42b14:	str	r0, [sp, #40]	; 0x28
   42b18:	mov	r0, #4
   42b1c:	bl	3233c <__assert_fail@plt+0x1f8c0>
   42b20:	cmp	r0, #0
   42b24:	str	r0, [sp, #48]	; 0x30
   42b28:	beq	42f24 <__assert_fail@plt+0x304a8>
   42b2c:	str	r4, [r0]
   42b30:	add	r3, sp, #40	; 0x28
   42b34:	mov	r0, r6
   42b38:	mov	r1, r5
   42b3c:	mov	r2, r8
   42b40:	str	r6, [sp, #24]
   42b44:	bl	42f40 <__assert_fail@plt+0x304c4>
   42b48:	cmp	r0, #0
   42b4c:	bne	42edc <__assert_fail@plt+0x30460>
   42b50:	add	r0, r5, #16
   42b54:	mov	r1, #0
   42b58:	str	r5, [sp, #16]
   42b5c:	str	r0, [sp, #20]
   42b60:	cmp	r8, #1
   42b64:	blt	42ee4 <__assert_fail@plt+0x30468>
   42b68:	ldr	r0, [r5]
   42b6c:	ldr	r7, [sp, #24]
   42b70:	ldr	r2, [r0, r8, lsl #2]
   42b74:	cmp	r2, #0
   42b78:	mov	r2, #0
   42b7c:	addeq	r2, r1, #1
   42b80:	ldr	r1, [r7, #120]	; 0x78
   42b84:	cmp	r2, r1
   42b88:	bgt	42eec <__assert_fail@plt+0x30470>
   42b8c:	mov	r0, #0
   42b90:	str	r8, [sp, #28]
   42b94:	sub	r8, r8, #1
   42b98:	str	r2, [sp, #12]
   42b9c:	str	r0, [sp, #44]	; 0x2c
   42ba0:	ldr	r0, [r7, #100]	; 0x64
   42ba4:	ldr	r6, [r0, r8, lsl #2]
   42ba8:	cmp	r6, #0
   42bac:	beq	42ebc <__assert_fail@plt+0x30440>
   42bb0:	ldr	r0, [r6, #20]
   42bb4:	cmp	r0, #1
   42bb8:	blt	42ebc <__assert_fail@plt+0x30440>
   42bbc:	ldr	r0, [r7, #84]	; 0x54
   42bc0:	mov	r9, #0
   42bc4:	str	r6, [sp, #32]
   42bc8:	str	r0, [sp, #36]	; 0x24
   42bcc:	b	42c80 <__assert_fail@plt+0x30204>
   42bd0:	cmp	r2, r1
   42bd4:	bne	42c00 <__assert_fail@plt+0x30184>
   42bd8:	lsl	r0, r2, #1
   42bdc:	lsl	r1, r2, #3
   42be0:	str	r0, [sp, #40]	; 0x28
   42be4:	ldr	r0, [sp, #48]	; 0x30
   42be8:	bl	33040 <__assert_fail@plt+0x205c4>
   42bec:	cmp	r0, #0
   42bf0:	beq	42f38 <__assert_fail@plt+0x304bc>
   42bf4:	str	r0, [sp, #48]	; 0x30
   42bf8:	ldr	r1, [sp, #44]	; 0x2c
   42bfc:	b	42c04 <__assert_fail@plt+0x30188>
   42c00:	ldr	r0, [sp, #48]	; 0x30
   42c04:	ldr	r2, [r0]
   42c08:	cmp	r2, sl
   42c0c:	ble	42c48 <__assert_fail@plt+0x301cc>
   42c10:	cmp	r1, #1
   42c14:	blt	42c78 <__assert_fail@plt+0x301fc>
   42c18:	add	r2, r0, r1, lsl #2
   42c1c:	add	r1, r1, #1
   42c20:	mov	r3, r2
   42c24:	ldr	r7, [r3, #-4]!
   42c28:	sub	r1, r1, #1
   42c2c:	cmp	r1, #1
   42c30:	str	r7, [r2]
   42c34:	mov	r2, r3
   42c38:	bgt	42c24 <__assert_fail@plt+0x301a8>
   42c3c:	ldr	r7, [sp, #24]
   42c40:	sub	r1, r1, #1
   42c44:	b	42c78 <__assert_fail@plt+0x301fc>
   42c48:	add	r2, r0, r1, lsl #2
   42c4c:	ldr	r3, [r2, #-4]
   42c50:	cmp	r3, sl
   42c54:	ble	42c78 <__assert_fail@plt+0x301fc>
   42c58:	sub	r1, r1, #2
   42c5c:	str	r3, [r2]
   42c60:	sub	r1, r1, #1
   42c64:	ldr	r3, [r2, #-8]
   42c68:	sub	r2, r2, #4
   42c6c:	cmp	r3, sl
   42c70:	bgt	42c5c <__assert_fail@plt+0x301e0>
   42c74:	add	r1, r1, #2
   42c78:	str	sl, [r0, r1, lsl #2]
   42c7c:	b	42e78 <__assert_fail@plt+0x303fc>
   42c80:	ldr	r0, [r6, #24]
   42c84:	ldr	sl, [r0, r9, lsl #2]
   42c88:	ldr	r0, [sp, #36]	; 0x24
   42c8c:	ldr	r0, [r0]
   42c90:	add	r0, r0, sl, lsl #3
   42c94:	ldrb	r0, [r0, #6]
   42c98:	tst	r0, #16
   42c9c:	bne	42d40 <__assert_fail@plt+0x302c4>
   42ca0:	ldr	r0, [sp, #36]	; 0x24
   42ca4:	mov	r2, r8
   42ca8:	ldr	r0, [r0]
   42cac:	add	r1, r0, sl, lsl #3
   42cb0:	mov	r0, r7
   42cb4:	bl	417e4 <__assert_fail@plt+0x2ed68>
   42cb8:	cmp	r0, #0
   42cbc:	beq	42eac <__assert_fail@plt+0x30430>
   42cc0:	ldr	r0, [r5]
   42cc4:	ldr	r1, [sp, #28]
   42cc8:	ldr	r0, [r0, r1, lsl #2]
   42ccc:	cmp	r0, #0
   42cd0:	beq	42eac <__assert_fail@plt+0x30430>
   42cd4:	ldr	r2, [r0, #8]
   42cd8:	cmp	r2, #1
   42cdc:	blt	42eac <__assert_fail@plt+0x30430>
   42ce0:	ldr	r1, [sp, #36]	; 0x24
   42ce4:	ldr	r0, [r0, #12]
   42ce8:	subs	r3, r2, #1
   42cec:	mov	r2, #0
   42cf0:	ldr	r1, [r1, #12]
   42cf4:	ldr	r1, [r1, sl, lsl #2]
   42cf8:	beq	42d20 <__assert_fail@plt+0x302a4>
   42cfc:	mov	r5, #1
   42d00:	add	r7, r2, r3
   42d04:	lsr	r6, r7, #1
   42d08:	ldr	r4, [r0, r6, lsl #2]
   42d0c:	cmp	r4, r1
   42d10:	movge	r3, r6
   42d14:	addlt	r2, r5, r7, lsr #1
   42d18:	cmp	r2, r3
   42d1c:	bcc	42d00 <__assert_fail@plt+0x30284>
   42d20:	ldr	r2, [r0, r2, lsl #2]
   42d24:	ldr	r5, [sp, #16]
   42d28:	ldr	r7, [sp, #24]
   42d2c:	ldr	r6, [sp, #32]
   42d30:	mov	r0, #1
   42d34:	cmp	r2, r1
   42d38:	beq	42e20 <__assert_fail@plt+0x303a4>
   42d3c:	b	42eac <__assert_fail@plt+0x30430>
   42d40:	ldr	r4, [r7, #84]	; 0x54
   42d44:	mov	r6, r5
   42d48:	ldr	r5, [r5, #12]
   42d4c:	mov	r1, sl
   42d50:	mov	r2, r7
   42d54:	mov	r3, r8
   42d58:	mov	r0, r4
   42d5c:	bl	414f0 <__assert_fail@plt+0x2ea74>
   42d60:	cmp	r0, #1
   42d64:	blt	42d88 <__assert_fail@plt+0x3030c>
   42d68:	add	r1, r0, r8
   42d6c:	mov	r3, r8
   42d70:	cmp	r1, r5
   42d74:	ble	42d9c <__assert_fail@plt+0x30320>
   42d78:	mov	r5, r6
   42d7c:	ldr	r6, [sp, #32]
   42d80:	mov	r8, r3
   42d84:	b	42e20 <__assert_fail@plt+0x303a4>
   42d88:	mov	r5, r6
   42d8c:	ldr	r6, [sp, #32]
   42d90:	cmp	r0, #0
   42d94:	bne	42e20 <__assert_fail@plt+0x303a4>
   42d98:	b	42ca0 <__assert_fail@plt+0x30224>
   42d9c:	ldr	r2, [r6]
   42da0:	mov	r5, r6
   42da4:	ldr	r6, [sp, #32]
   42da8:	mov	r8, r3
   42dac:	ldr	r2, [r2, r1, lsl #2]
   42db0:	cmp	r2, #0
   42db4:	beq	42ca0 <__assert_fail@plt+0x30224>
   42db8:	ldr	r3, [r2, #8]
   42dbc:	cmp	r3, #1
   42dc0:	blt	42ca0 <__assert_fail@plt+0x30224>
   42dc4:	ldr	r1, [r4, #12]
   42dc8:	ldr	r2, [r2, #12]
   42dcc:	subs	r4, r3, #1
   42dd0:	mov	r3, #0
   42dd4:	ldr	ip, [r1, sl, lsl #2]
   42dd8:	beq	42e00 <__assert_fail@plt+0x30384>
   42ddc:	mov	r5, #1
   42de0:	add	r6, r3, r4
   42de4:	lsr	r7, r6, #1
   42de8:	ldr	r1, [r2, r7, lsl #2]
   42dec:	cmp	r1, ip
   42df0:	movge	r4, r7
   42df4:	addlt	r3, r5, r6, lsr #1
   42df8:	cmp	r3, r4
   42dfc:	bcc	42de0 <__assert_fail@plt+0x30364>
   42e00:	ldr	r5, [sp, #16]
   42e04:	ldr	r7, [sp, #24]
   42e08:	ldr	r6, [sp, #32]
   42e0c:	cmp	r0, #0
   42e10:	beq	42ca0 <__assert_fail@plt+0x30224>
   42e14:	ldr	r1, [r2, r3, lsl #2]
   42e18:	cmp	r1, ip
   42e1c:	bne	42ca0 <__assert_fail@plt+0x30224>
   42e20:	ldr	r1, [r5, #20]
   42e24:	cmp	r1, #0
   42e28:	beq	42e58 <__assert_fail@plt+0x303dc>
   42e2c:	ldr	r1, [sp, #36]	; 0x24
   42e30:	add	r3, r0, r8
   42e34:	mov	r0, r7
   42e38:	ldr	r1, [r1, #12]
   42e3c:	ldr	r2, [r1, sl, lsl #2]
   42e40:	ldr	r1, [sp, #20]
   42e44:	str	sl, [sp]
   42e48:	str	r8, [sp, #4]
   42e4c:	bl	44058 <__assert_fail@plt+0x315dc>
   42e50:	cmp	r0, #0
   42e54:	bne	42eac <__assert_fail@plt+0x30430>
   42e58:	ldr	r2, [sp, #40]	; 0x28
   42e5c:	cmp	r2, #0
   42e60:	beq	42e88 <__assert_fail@plt+0x3040c>
   42e64:	ldr	r1, [sp, #44]	; 0x2c
   42e68:	cmp	r1, #0
   42e6c:	bne	42bd0 <__assert_fail@plt+0x30154>
   42e70:	ldr	r0, [sp, #48]	; 0x30
   42e74:	str	sl, [r0]
   42e78:	ldr	r0, [sp, #44]	; 0x2c
   42e7c:	add	r0, r0, #1
   42e80:	str	r0, [sp, #44]	; 0x2c
   42e84:	b	42eac <__assert_fail@plt+0x30430>
   42e88:	mov	r0, #1
   42e8c:	str	r0, [sp, #44]	; 0x2c
   42e90:	str	r0, [sp, #40]	; 0x28
   42e94:	mov	r0, #4
   42e98:	bl	3233c <__assert_fail@plt+0x1f8c0>
   42e9c:	cmp	r0, #0
   42ea0:	str	r0, [sp, #48]	; 0x30
   42ea4:	beq	42f10 <__assert_fail@plt+0x30494>
   42ea8:	str	sl, [r0]
   42eac:	ldr	r0, [r6, #20]
   42eb0:	add	r9, r9, #1
   42eb4:	cmp	r9, r0
   42eb8:	blt	42c80 <__assert_fail@plt+0x30204>
   42ebc:	mov	r0, r7
   42ec0:	mov	r1, r5
   42ec4:	mov	r2, r8
   42ec8:	add	r3, sp, #40	; 0x28
   42ecc:	bl	42f40 <__assert_fail@plt+0x304c4>
   42ed0:	ldr	r1, [sp, #12]
   42ed4:	cmp	r0, #0
   42ed8:	beq	42b60 <__assert_fail@plt+0x300e4>
   42edc:	mov	r7, r0
   42ee0:	b	42efc <__assert_fail@plt+0x30480>
   42ee4:	mov	r7, #0
   42ee8:	b	42efc <__assert_fail@plt+0x30480>
   42eec:	lsl	r2, r8, #2
   42ef0:	mov	r1, #0
   42ef4:	mov	r7, #0
   42ef8:	bl	12800 <memset@plt>
   42efc:	ldr	r0, [sp, #48]	; 0x30
   42f00:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   42f04:	mov	r0, r7
   42f08:	sub	sp, fp, #28
   42f0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42f10:	mov	r0, #0
   42f14:	mov	r7, #12
   42f18:	str	r0, [sp, #40]	; 0x28
   42f1c:	str	r0, [sp, #44]	; 0x2c
   42f20:	b	42efc <__assert_fail@plt+0x30480>
   42f24:	mov	r0, #0
   42f28:	mov	r7, #12
   42f2c:	str	r0, [sp, #40]	; 0x28
   42f30:	str	r0, [sp, #44]	; 0x2c
   42f34:	b	42f04 <__assert_fail@plt+0x30488>
   42f38:	mov	r7, #12
   42f3c:	b	42efc <__assert_fail@plt+0x30480>
   42f40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   42f44:	add	fp, sp, #28
   42f48:	sub	sp, sp, #132	; 0x84
   42f4c:	mov	r9, r0
   42f50:	ldr	r8, [r0, #84]	; 0x54
   42f54:	mov	r0, #0
   42f58:	mov	sl, r1
   42f5c:	mov	r5, r2
   42f60:	str	r0, [fp, #-76]	; 0xffffffb4
   42f64:	str	r5, [sp, #68]	; 0x44
   42f68:	ldr	r1, [r9, #100]	; 0x64
   42f6c:	ldr	r2, [r1, r2, lsl #2]
   42f70:	cmp	r2, #0
   42f74:	mov	r1, r2
   42f78:	addne	r1, r1, #4
   42f7c:	str	r1, [sp, #80]	; 0x50
   42f80:	ldr	r1, [r3, #4]
   42f84:	cmp	r1, #0
   42f88:	beq	43390 <__assert_fail@plt+0x30914>
   42f8c:	mov	lr, r3
   42f90:	cmp	r2, #0
   42f94:	str	r2, [sp, #48]	; 0x30
   42f98:	beq	4335c <__assert_fail@plt+0x308e0>
   42f9c:	mov	r0, #0
   42fa0:	mov	r1, r8
   42fa4:	mov	r2, lr
   42fa8:	str	r8, [sp, #76]	; 0x4c
   42fac:	str	lr, [sp, #56]	; 0x38
   42fb0:	str	r0, [fp, #-72]	; 0xffffffb8
   42fb4:	sub	r0, fp, #72	; 0x48
   42fb8:	bl	41260 <__assert_fail@plt+0x2e7e4>
   42fbc:	ldr	r8, [fp, #-72]	; 0xffffffb8
   42fc0:	cmp	r8, #0
   42fc4:	bne	43a64 <__assert_fail@plt+0x30fe8>
   42fc8:	mov	r5, r0
   42fcc:	mov	r4, r0
   42fd0:	ldr	r2, [sp, #56]	; 0x38
   42fd4:	ldr	r0, [r5, #28]!
   42fd8:	cmp	r0, #0
   42fdc:	bne	43070 <__assert_fail@plt+0x305f4>
   42fe0:	ldr	r0, [r2, #4]
   42fe4:	mov	r6, #0
   42fe8:	mov	r7, r2
   42fec:	str	r0, [r4, #28]
   42ff0:	lsl	r0, r0, #2
   42ff4:	str	r6, [r4, #32]
   42ff8:	bl	3233c <__assert_fail@plt+0x1f8c0>
   42ffc:	cmp	r0, #0
   43000:	mov	r8, #12
   43004:	str	r0, [r4, #36]	; 0x24
   43008:	movweq	r6, #12
   4300c:	str	r6, [fp, #-72]	; 0xffffffb8
   43010:	beq	43a64 <__assert_fail@plt+0x30fe8>
   43014:	ldr	r0, [r7, #4]
   43018:	mov	r2, r7
   4301c:	cmp	r0, #1
   43020:	blt	43070 <__assert_fail@plt+0x305f4>
   43024:	mov	r4, #0
   43028:	ldr	r0, [r2, #8]
   4302c:	ldr	r1, [sp, #76]	; 0x4c
   43030:	mov	r6, r2
   43034:	ldr	r0, [r0, r4, lsl #2]
   43038:	ldr	r1, [r1, #28]
   4303c:	add	r0, r0, r0, lsl #1
   43040:	add	r1, r1, r0, lsl #2
   43044:	mov	r0, r5
   43048:	bl	3dad0 <__assert_fail@plt+0x2b054>
   4304c:	cmp	r0, #0
   43050:	bne	43a60 <__assert_fail@plt+0x30fe4>
   43054:	ldr	r0, [r6, #4]
   43058:	add	r4, r4, #1
   4305c:	mov	r2, r6
   43060:	cmp	r4, r0
   43064:	blt	43028 <__assert_fail@plt+0x305ac>
   43068:	mov	r0, #0
   4306c:	str	r0, [fp, #-72]	; 0xffffffb8
   43070:	ldr	r1, [sp, #80]	; 0x50
   43074:	mov	r0, r2
   43078:	mov	r2, r5
   4307c:	bl	43ac4 <__assert_fail@plt+0x31048>
   43080:	cmp	r0, #0
   43084:	str	r0, [fp, #-76]	; 0xffffffb4
   43088:	bne	43a98 <__assert_fail@plt+0x3101c>
   4308c:	ldr	r0, [sl, #20]
   43090:	ldr	r5, [sp, #68]	; 0x44
   43094:	ldr	lr, [sp, #56]	; 0x38
   43098:	ldr	r8, [sp, #76]	; 0x4c
   4309c:	cmp	r0, #0
   430a0:	beq	4335c <__assert_fail@plt+0x308e0>
   430a4:	ldr	r3, [sp, #80]	; 0x50
   430a8:	cmp	r0, #1
   430ac:	str	r9, [sp, #52]	; 0x34
   430b0:	blt	43350 <__assert_fail@plt+0x308d4>
   430b4:	ldr	r0, [sp, #52]	; 0x34
   430b8:	mov	r1, #0
   430bc:	str	sl, [sp, #60]	; 0x3c
   430c0:	ldr	r0, [r0, #116]	; 0x74
   430c4:	str	r0, [sp, #64]	; 0x40
   430c8:	ldr	r0, [sl, #24]
   430cc:	str	r1, [sp, #72]	; 0x48
   430d0:	ldr	r0, [r0, r1, lsl #2]
   430d4:	ldr	r1, [sp, #64]	; 0x40
   430d8:	add	r0, r0, r0, lsl #1
   430dc:	add	r1, r1, r0, lsl #3
   430e0:	ldr	r2, [r1, #8]
   430e4:	cmp	r2, r5
   430e8:	bge	43338 <__assert_fail@plt+0x308bc>
   430ec:	ldr	r1, [r1, #4]
   430f0:	cmp	r1, r5
   430f4:	blt	43338 <__assert_fail@plt+0x308bc>
   430f8:	ldr	r1, [sp, #64]	; 0x40
   430fc:	ldr	r2, [r8]
   43100:	ldr	r0, [r1, r0, lsl #3]!
   43104:	ldr	r1, [r1, #12]
   43108:	ldr	sl, [r2, r0, lsl #3]
   4310c:	ldr	r0, [lr, #4]
   43110:	cmp	r1, r5
   43114:	bne	432c0 <__assert_fail@plt+0x30844>
   43118:	cmp	r0, #1
   4311c:	blt	43338 <__assert_fail@plt+0x308bc>
   43120:	ldr	r3, [lr, #8]
   43124:	mvn	r9, #0
   43128:	mvn	r1, #0
   4312c:	ldr	r6, [r3]
   43130:	add	r7, r2, r6, lsl #3
   43134:	ldrb	r7, [r7, #4]
   43138:	cmp	r7, #9
   4313c:	beq	43158 <__assert_fail@plt+0x306dc>
   43140:	cmp	r7, #8
   43144:	bne	43164 <__assert_fail@plt+0x306e8>
   43148:	ldr	r7, [r2, r6, lsl #3]
   4314c:	cmp	sl, r7
   43150:	moveq	r1, r6
   43154:	b	43164 <__assert_fail@plt+0x306e8>
   43158:	ldr	r7, [r2, r6, lsl #3]
   4315c:	cmp	sl, r7
   43160:	moveq	r9, r6
   43164:	add	r3, r3, #4
   43168:	subs	r0, r0, #1
   4316c:	bne	4312c <__assert_fail@plt+0x306b0>
   43170:	cmp	r1, #0
   43174:	blt	43194 <__assert_fail@plt+0x30718>
   43178:	ldr	r0, [sp, #76]	; 0x4c
   4317c:	ldr	r3, [sp, #80]	; 0x50
   43180:	mov	r2, lr
   43184:	bl	43ce0 <__assert_fail@plt+0x31264>
   43188:	ldr	lr, [sp, #56]	; 0x38
   4318c:	cmp	r0, #0
   43190:	bne	43a4c <__assert_fail@plt+0x30fd0>
   43194:	cmp	r9, #0
   43198:	ldr	r3, [sp, #80]	; 0x50
   4319c:	ldr	r8, [sp, #76]	; 0x4c
   431a0:	ldrge	ip, [lr, #4]
   431a4:	cmpge	ip, #1
   431a8:	blt	43338 <__assert_fail@plt+0x308bc>
   431ac:	mov	sl, #0
   431b0:	ldr	r0, [lr, #8]
   431b4:	ldr	r1, [r0, sl, lsl #2]
   431b8:	ldr	r0, [r8, #28]
   431bc:	add	lr, r1, r1, lsl #1
   431c0:	add	r2, r0, lr, lsl #2
   431c4:	ldr	r0, [r2, #4]
   431c8:	cmp	r0, #1
   431cc:	blt	43228 <__assert_fail@plt+0x307ac>
   431d0:	ldr	r4, [r2, #8]
   431d4:	mov	r3, ip
   431d8:	mov	r7, #0
   431dc:	subs	r0, r0, #1
   431e0:	beq	43208 <__assert_fail@plt+0x3078c>
   431e4:	add	r6, r7, r0
   431e8:	mov	ip, #1
   431ec:	lsr	r5, r6, #1
   431f0:	ldr	r2, [r4, r5, lsl #2]
   431f4:	cmp	r2, r9
   431f8:	movge	r0, r5
   431fc:	addlt	r7, ip, r6, lsr #1
   43200:	cmp	r7, r0
   43204:	bcc	431e4 <__assert_fail@plt+0x30768>
   43208:	ldr	r0, [r4, r7, lsl #2]
   4320c:	mov	ip, r3
   43210:	ldr	r5, [sp, #68]	; 0x44
   43214:	ldr	r3, [sp, #80]	; 0x50
   43218:	cmp	r0, r9
   4321c:	bne	43228 <__assert_fail@plt+0x307ac>
   43220:	ldr	lr, [sp, #56]	; 0x38
   43224:	b	432b0 <__assert_fail@plt+0x30834>
   43228:	ldr	r0, [r8, #24]
   4322c:	add	r2, r0, lr, lsl #2
   43230:	ldr	lr, [sp, #56]	; 0x38
   43234:	ldr	r0, [r2, #4]
   43238:	cmp	r0, #1
   4323c:	blt	43284 <__assert_fail@plt+0x30808>
   43240:	ldr	r2, [r2, #8]
   43244:	mov	r4, #0
   43248:	subs	r0, r0, #1
   4324c:	beq	43274 <__assert_fail@plt+0x307f8>
   43250:	add	r7, r4, r0
   43254:	lsr	r6, r7, #1
   43258:	ldr	r5, [r2, r6, lsl #2]
   4325c:	cmp	r5, r9
   43260:	movge	r0, r6
   43264:	mov	r6, #1
   43268:	addlt	r4, r6, r7, lsr #1
   4326c:	cmp	r4, r0
   43270:	bcc	43250 <__assert_fail@plt+0x307d4>
   43274:	ldr	r0, [r2, r4, lsl #2]
   43278:	ldr	r5, [sp, #68]	; 0x44
   4327c:	cmp	r0, r9
   43280:	beq	432b0 <__assert_fail@plt+0x30834>
   43284:	mov	r0, r8
   43288:	mov	r2, lr
   4328c:	mov	r4, lr
   43290:	bl	43ce0 <__assert_fail@plt+0x31264>
   43294:	cmp	r0, #0
   43298:	bne	43a4c <__assert_fail@plt+0x30fd0>
   4329c:	ldr	ip, [r4, #4]
   432a0:	ldr	r3, [sp, #80]	; 0x50
   432a4:	ldr	r8, [sp, #76]	; 0x4c
   432a8:	sub	sl, sl, #1
   432ac:	mov	lr, r4
   432b0:	add	sl, sl, #1
   432b4:	cmp	sl, ip
   432b8:	blt	431b0 <__assert_fail@plt+0x30734>
   432bc:	b	43338 <__assert_fail@plt+0x308bc>
   432c0:	cmp	r0, #1
   432c4:	blt	43338 <__assert_fail@plt+0x308bc>
   432c8:	mov	r4, #0
   432cc:	b	432d4 <__assert_fail@plt+0x30858>
   432d0:	ldr	r2, [r8]
   432d4:	ldr	r1, [lr, #8]
   432d8:	ldr	r1, [r1, r4, lsl #2]
   432dc:	add	r7, r2, r1, lsl #3
   432e0:	ldr	r7, [r7, #4]
   432e4:	and	r7, r7, #254	; 0xfe
   432e8:	orr	r7, r7, #1
   432ec:	cmp	r7, #9
   432f0:	ldreq	r2, [r2, r1, lsl #3]
   432f4:	cmpeq	sl, r2
   432f8:	beq	4330c <__assert_fail@plt+0x30890>
   432fc:	add	r4, r4, #1
   43300:	cmp	r4, r0
   43304:	blt	432d0 <__assert_fail@plt+0x30854>
   43308:	b	43338 <__assert_fail@plt+0x308bc>
   4330c:	mov	r0, r8
   43310:	mov	r2, lr
   43314:	mov	r6, lr
   43318:	bl	43ce0 <__assert_fail@plt+0x31264>
   4331c:	cmp	r0, #0
   43320:	bne	43a4c <__assert_fail@plt+0x30fd0>
   43324:	ldr	r0, [r6, #4]
   43328:	ldr	r3, [sp, #80]	; 0x50
   4332c:	ldr	r8, [sp, #76]	; 0x4c
   43330:	mov	lr, r6
   43334:	b	432fc <__assert_fail@plt+0x30880>
   43338:	ldr	sl, [sp, #60]	; 0x3c
   4333c:	ldr	r1, [sp, #72]	; 0x48
   43340:	ldr	r0, [sl, #20]
   43344:	add	r1, r1, #1
   43348:	cmp	r1, r0
   4334c:	blt	430c8 <__assert_fail@plt+0x3064c>
   43350:	ldr	r9, [sp, #52]	; 0x34
   43354:	mov	r0, #0
   43358:	str	r0, [fp, #-76]	; 0xffffffb4
   4335c:	sub	r0, fp, #76	; 0x4c
   43360:	mov	r1, r8
   43364:	mov	r2, lr
   43368:	bl	41260 <__assert_fail@plt+0x2e7e4>
   4336c:	ldr	r1, [sl]
   43370:	ldr	r2, [sp, #48]	; 0x30
   43374:	str	r0, [r1, r5, lsl #2]
   43378:	ldr	r8, [fp, #-76]	; 0xffffffb4
   4337c:	cmp	r8, #0
   43380:	bne	43a40 <__assert_fail@plt+0x30fc4>
   43384:	cmp	r2, #0
   43388:	bne	433a0 <__assert_fail@plt+0x30924>
   4338c:	b	43a3c <__assert_fail@plt+0x30fc0>
   43390:	ldr	r1, [sl]
   43394:	str	r0, [r1, r5, lsl #2]
   43398:	cmp	r2, #0
   4339c:	beq	43a3c <__assert_fail@plt+0x30fc0>
   433a0:	ldr	r0, [r9, #100]	; 0x64
   433a4:	ldr	r0, [r0, r5, lsl #2]
   433a8:	ldrb	r0, [r0, #52]	; 0x34
   433ac:	tst	r0, #64	; 0x40
   433b0:	beq	43a3c <__assert_fail@plt+0x30fc0>
   433b4:	ldr	r0, [r9, #84]	; 0x54
   433b8:	str	r0, [sp, #56]	; 0x38
   433bc:	ldr	r0, [r9, #108]	; 0x6c
   433c0:	cmp	r0, #1
   433c4:	blt	43a24 <__assert_fail@plt+0x30fa8>
   433c8:	ldr	r1, [r9, #116]	; 0x74
   433cc:	ldr	r8, [sp, #80]	; 0x50
   433d0:	mov	lr, #0
   433d4:	mov	r2, #1
   433d8:	mov	r3, r0
   433dc:	add	r7, r3, lr
   433e0:	add	r7, r7, r7, lsr #31
   433e4:	asr	r6, r7, #1
   433e8:	add	r4, r6, r6, lsl #1
   433ec:	add	r4, r1, r4, lsl #3
   433f0:	ldr	r4, [r4, #4]
   433f4:	cmp	r4, r5
   433f8:	addlt	lr, r2, r7, asr #1
   433fc:	movge	r3, r6
   43400:	cmp	lr, r3
   43404:	blt	433dc <__assert_fail@plt+0x30960>
   43408:	cmp	lr, r0
   4340c:	bge	43a34 <__assert_fail@plt+0x30fb8>
   43410:	cmn	lr, #1
   43414:	beq	43a34 <__assert_fail@plt+0x30fb8>
   43418:	ldr	r0, [r9, #116]	; 0x74
   4341c:	add	r1, lr, lr, lsl #1
   43420:	str	r1, [sp, #28]
   43424:	add	r0, r0, r1, lsl #3
   43428:	ldr	r0, [r0, #4]
   4342c:	cmp	r0, r5
   43430:	bne	43a34 <__assert_fail@plt+0x30fb8>
   43434:	mov	r1, #0
   43438:	ldr	r7, [sp, #56]	; 0x38
   4343c:	str	r1, [fp, #-72]	; 0xffffffb8
   43440:	ldr	r0, [r8, #4]
   43444:	cmp	r0, #0
   43448:	ble	43a58 <__assert_fail@plt+0x30fdc>
   4344c:	sub	r0, fp, #72	; 0x48
   43450:	mov	r2, #0
   43454:	str	sl, [sp, #60]	; 0x3c
   43458:	str	r9, [sp, #52]	; 0x34
   4345c:	str	lr, [sp, #48]	; 0x30
   43460:	add	r0, r0, #16
   43464:	str	r0, [sp, #12]
   43468:	add	r0, sl, #16
   4346c:	str	r0, [sp, #36]	; 0x24
   43470:	mov	r0, #0
   43474:	str	r0, [sp, #64]	; 0x40
   43478:	ldr	r0, [r8, #8]
   4347c:	ldr	r1, [sl, #8]
   43480:	str	r4, [sp, #76]	; 0x4c
   43484:	str	r2, [sp, #44]	; 0x2c
   43488:	ldr	r3, [r0, r2, lsl #2]
   4348c:	ldr	r0, [r7]
   43490:	add	r0, r0, r3, lsl #3
   43494:	cmp	r3, r1
   43498:	str	r3, [sp, #72]	; 0x48
   4349c:	ldrb	r0, [r0, #4]
   434a0:	bne	434bc <__assert_fail@plt+0x30a40>
   434a4:	cmp	r0, #4
   434a8:	bne	43a00 <__assert_fail@plt+0x30f84>
   434ac:	ldr	r0, [sl, #12]
   434b0:	cmp	r0, r5
   434b4:	bne	434c4 <__assert_fail@plt+0x30a48>
   434b8:	b	43a00 <__assert_fail@plt+0x30f84>
   434bc:	cmp	r0, #4
   434c0:	bne	43a00 <__assert_fail@plt+0x30f84>
   434c4:	ldr	r0, [r9, #116]	; 0x74
   434c8:	ldr	r1, [sp, #28]
   434cc:	ldr	r4, [sp, #72]	; 0x48
   434d0:	mov	r9, lr
   434d4:	add	r6, r0, r1, lsl #3
   434d8:	b	43910 <__assert_fail@plt+0x30e94>
   434dc:	ldr	r5, [sp, #68]	; 0x44
   434e0:	ldr	r7, [sp, #56]	; 0x38
   434e4:	ldr	r4, [sp, #72]	; 0x48
   434e8:	mov	r0, r6
   434ec:	b	439ec <__assert_fail@plt+0x30f70>
   434f0:	ldr	r0, [sp, #64]	; 0x40
   434f4:	cmp	r0, #0
   434f8:	beq	4353c <__assert_fail@plt+0x30ac0>
   434fc:	ldr	r0, [sp, #20]
   43500:	str	r5, [fp, #-60]	; 0xffffffc4
   43504:	str	r4, [fp, #-64]	; 0xffffffc0
   43508:	cmp	r0, #0
   4350c:	beq	43640 <__assert_fail@plt+0x30bc4>
   43510:	ldr	r6, [sp, #40]	; 0x28
   43514:	cmp	r6, #0
   43518:	bne	438f8 <__assert_fail@plt+0x30e7c>
   4351c:	ldr	r4, [sp, #76]	; 0x4c
   43520:	mov	r0, #1
   43524:	mov	r1, #1
   43528:	str	r0, [sp, #40]	; 0x28
   4352c:	str	r9, [r4]
   43530:	str	r1, [fp, #-52]	; 0xffffffcc
   43534:	str	r4, [sp, #24]
   43538:	b	436cc <__assert_fail@plt+0x30c50>
   4353c:	add	r0, sl, #12
   43540:	mov	r3, #20
   43544:	sub	r2, fp, #72	; 0x48
   43548:	vld1.32	{d16-d17}, [r0]
   4354c:	mov	r0, sl
   43550:	add	r1, r2, #12
   43554:	vld1.32	{d18-d19}, [r0], r3
   43558:	vst1.32	{d16-d17}, [r1]
   4355c:	mov	r1, r2
   43560:	vst1.64	{d18-d19}, [r1], r3
   43564:	ldr	r6, [r0]
   43568:	mov	r0, #0
   4356c:	cmp	r6, #1
   43570:	str	r6, [r1]
   43574:	blt	43628 <__assert_fail@plt+0x30bac>
   43578:	lsl	r0, r6, #2
   4357c:	str	r6, [fp, #-56]	; 0xffffffc8
   43580:	bl	3233c <__assert_fail@plt+0x1f8c0>
   43584:	cmp	r0, #0
   43588:	str	r0, [fp, #-48]	; 0xffffffd0
   4358c:	beq	43aa8 <__assert_fail@plt+0x3102c>
   43590:	mov	r8, r0
   43594:	ldr	r0, [sl, #20]
   43598:	ldr	r1, [sl, #24]
   4359c:	lsl	r2, r0, #2
   435a0:	mov	r0, r8
   435a4:	bl	124b8 <memcpy@plt>
   435a8:	str	r4, [fp, #-64]	; 0xffffffc0
   435ac:	str	r5, [fp, #-60]	; 0xffffffc4
   435b0:	mov	r4, r8
   435b4:	lsl	r0, r6, #1
   435b8:	lsl	r1, r6, #3
   435bc:	str	r0, [sp, #20]
   435c0:	str	r0, [fp, #-56]	; 0xffffffc8
   435c4:	mov	r0, r8
   435c8:	bl	33040 <__assert_fail@plt+0x205c4>
   435cc:	cmp	r0, #0
   435d0:	beq	43abc <__assert_fail@plt+0x31040>
   435d4:	mov	r4, r0
   435d8:	mov	r8, r0
   435dc:	str	r0, [fp, #-48]	; 0xffffffd0
   435e0:	str	r0, [sp, #16]
   435e4:	ldr	r0, [r4]
   435e8:	cmp	r0, r9
   435ec:	ble	43684 <__assert_fail@plt+0x30c08>
   435f0:	cmp	r6, #1
   435f4:	mov	r2, r6
   435f8:	blt	436b8 <__assert_fail@plt+0x30c3c>
   435fc:	add	r1, r4, r6, lsl #2
   43600:	add	r0, r6, #1
   43604:	mov	r2, r1
   43608:	ldr	r3, [r2, #-4]!
   4360c:	sub	r0, r0, #1
   43610:	cmp	r0, #1
   43614:	str	r3, [r1]
   43618:	mov	r1, r2
   4361c:	bgt	43608 <__assert_fail@plt+0x30b8c>
   43620:	sub	r2, r0, #1
   43624:	b	436b8 <__assert_fail@plt+0x30c3c>
   43628:	ldr	r1, [sp, #12]
   4362c:	str	r0, [r1]
   43630:	str	r0, [r1, #4]
   43634:	str	r0, [r1, #8]
   43638:	str	r5, [fp, #-60]	; 0xffffffc4
   4363c:	str	r4, [fp, #-64]	; 0xffffffc0
   43640:	mov	r0, #1
   43644:	str	r0, [fp, #-52]	; 0xffffffcc
   43648:	str	r0, [fp, #-56]	; 0xffffffc8
   4364c:	mov	r0, #4
   43650:	bl	3233c <__assert_fail@plt+0x1f8c0>
   43654:	cmp	r0, #0
   43658:	str	r0, [fp, #-48]	; 0xffffffd0
   4365c:	beq	43aa8 <__assert_fail@plt+0x3102c>
   43660:	mov	r4, r0
   43664:	str	r9, [r0]
   43668:	mov	r0, #1
   4366c:	str	r0, [sp, #40]	; 0x28
   43670:	mov	r0, #1
   43674:	str	r4, [sp, #16]
   43678:	str	r4, [sp, #24]
   4367c:	str	r0, [sp, #20]
   43680:	b	436cc <__assert_fail@plt+0x30c50>
   43684:	add	r0, r4, r6, lsl #2
   43688:	mov	r2, r6
   4368c:	ldr	r1, [r0, #-4]
   43690:	cmp	r1, r9
   43694:	ble	436b8 <__assert_fail@plt+0x30c3c>
   43698:	sub	r2, r6, #2
   4369c:	str	r1, [r0]
   436a0:	sub	r2, r2, #1
   436a4:	ldr	r1, [r0, #-8]
   436a8:	sub	r0, r0, #4
   436ac:	cmp	r1, r9
   436b0:	bgt	4369c <__assert_fail@plt+0x30c20>
   436b4:	add	r2, r2, #2
   436b8:	add	r6, r6, #1
   436bc:	str	r9, [r4, r2, lsl #2]
   436c0:	str	r8, [sp, #24]
   436c4:	str	r6, [sp, #40]	; 0x28
   436c8:	str	r6, [fp, #-52]	; 0xffffffcc
   436cc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   436d0:	sub	r1, fp, #72	; 0x48
   436d4:	str	r0, [sp, #64]	; 0x40
   436d8:	ldr	r0, [r0, r5, lsl #2]
   436dc:	str	r0, [sp, #32]
   436e0:	ldr	r0, [sp, #52]	; 0x34
   436e4:	bl	42af0 <__assert_fail@plt+0x30074>
   436e8:	cmp	r0, #0
   436ec:	bne	43aa0 <__assert_fail@plt+0x31024>
   436f0:	ldr	r6, [sl, #4]
   436f4:	str	r4, [sp, #76]	; 0x4c
   436f8:	ldr	lr, [sp, #48]	; 0x30
   436fc:	ldr	r4, [sp, #72]	; 0x48
   43700:	ldr	r2, [sp, #64]	; 0x40
   43704:	cmp	r6, #0
   43708:	beq	437a0 <__assert_fail@plt+0x30d24>
   4370c:	cmp	r5, #0
   43710:	blt	4379c <__assert_fail@plt+0x30d20>
   43714:	mov	r0, #0
   43718:	mov	sl, r0
   4371c:	ldr	r0, [r2, r0, lsl #2]
   43720:	ldr	r1, [r6, sl, lsl #2]
   43724:	cmp	r1, #0
   43728:	beq	4378c <__assert_fail@plt+0x30d10>
   4372c:	cmp	r0, #0
   43730:	beq	43790 <__assert_fail@plt+0x30d14>
   43734:	sub	r4, fp, #44	; 0x2c
   43738:	add	r2, r0, #4
   4373c:	add	r1, r1, #4
   43740:	mov	r0, r4
   43744:	bl	3fc74 <__assert_fail@plt+0x2d1f8>
   43748:	cmp	r0, #0
   4374c:	str	r0, [fp, #-32]	; 0xffffffe0
   43750:	bne	43a6c <__assert_fail@plt+0x30ff0>
   43754:	sub	r0, fp, #32
   43758:	mov	r1, r7
   4375c:	mov	r2, r4
   43760:	bl	41260 <__assert_fail@plt+0x2e7e4>
   43764:	str	r0, [r6, sl, lsl #2]
   43768:	ldr	r0, [fp, #-36]	; 0xffffffdc
   4376c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   43770:	ldr	r8, [fp, #-32]	; 0xffffffe0
   43774:	ldr	lr, [sp, #48]	; 0x30
   43778:	ldr	r4, [sp, #72]	; 0x48
   4377c:	ldr	r2, [sp, #64]	; 0x40
   43780:	cmp	r8, #0
   43784:	beq	43790 <__assert_fail@plt+0x30d14>
   43788:	b	43a70 <__assert_fail@plt+0x30ff4>
   4378c:	str	r0, [r6, sl, lsl #2]
   43790:	add	r0, sl, #1
   43794:	cmp	sl, r5
   43798:	blt	43718 <__assert_fail@plt+0x30c9c>
   4379c:	ldr	sl, [sp, #60]	; 0x3c
   437a0:	ldr	r0, [sp, #32]
   437a4:	str	r0, [r2, r5, lsl #2]
   437a8:	ldr	r0, [sp, #40]	; 0x28
   437ac:	cmp	r0, #1
   437b0:	blt	437f8 <__assert_fail@plt+0x30d7c>
   437b4:	ldr	r8, [sp, #80]	; 0x50
   437b8:	subs	r0, r0, #1
   437bc:	mov	r4, #1
   437c0:	mov	r1, #0
   437c4:	beq	43800 <__assert_fail@plt+0x30d84>
   437c8:	mov	r2, r0
   437cc:	ldr	r6, [sp, #76]	; 0x4c
   437d0:	add	r3, r1, r2
   437d4:	lsr	r7, r3, #1
   437d8:	ldr	r6, [r6, r7, lsl #2]
   437dc:	cmp	r6, r9
   437e0:	ldr	r6, [sp, #76]	; 0x4c
   437e4:	movge	r2, r7
   437e8:	addlt	r1, r4, r3, lsr #1
   437ec:	cmp	r1, r2
   437f0:	bcc	437cc <__assert_fail@plt+0x30d50>
   437f4:	b	43804 <__assert_fail@plt+0x30d88>
   437f8:	ldr	r8, [sp, #80]	; 0x50
   437fc:	b	438e4 <__assert_fail@plt+0x30e68>
   43800:	ldr	r6, [sp, #76]	; 0x4c
   43804:	ldr	r2, [r6, r1, lsl #2]
   43808:	cmp	r2, r9
   4380c:	mov	r2, r1
   43810:	mvnne	r2, #0
   43814:	cmp	r2, #0
   43818:	blt	43858 <__assert_fail@plt+0x30ddc>
   4381c:	ldr	r3, [sp, #40]	; 0x28
   43820:	ldr	r7, [sp, #56]	; 0x38
   43824:	ldr	r4, [sp, #72]	; 0x48
   43828:	cmp	r3, r2
   4382c:	ble	4386c <__assert_fail@plt+0x30df0>
   43830:	cmp	r0, r2
   43834:	str	r0, [fp, #-52]	; 0xffffffcc
   43838:	ble	43878 <__assert_fail@plt+0x30dfc>
   4383c:	ldr	r3, [sp, #40]	; 0x28
   43840:	mvn	r2, r1
   43844:	add	r3, r3, r2
   43848:	cmp	r3, #4
   4384c:	bcs	43884 <__assert_fail@plt+0x30e08>
   43850:	mov	r2, r1
   43854:	b	438c4 <__assert_fail@plt+0x30e48>
   43858:	ldr	r0, [sp, #16]
   4385c:	ldr	r7, [sp, #56]	; 0x38
   43860:	ldr	r4, [sp, #72]	; 0x48
   43864:	str	r0, [sp, #24]
   43868:	b	438e4 <__assert_fail@plt+0x30e68>
   4386c:	ldr	r0, [sp, #16]
   43870:	str	r0, [sp, #24]
   43874:	b	438e4 <__assert_fail@plt+0x30e68>
   43878:	ldr	r1, [sp, #16]
   4387c:	str	r1, [sp, #24]
   43880:	b	438e0 <__assert_fail@plt+0x30e64>
   43884:	mov	r7, r6
   43888:	bic	r6, r3, #3
   4388c:	add	r2, r1, r6
   43890:	add	r1, r7, r1, lsl #2
   43894:	mov	r7, r6
   43898:	add	r1, r1, #4
   4389c:	sub	r5, r1, #4
   438a0:	vld1.32	{d16-d17}, [r1]!
   438a4:	subs	r7, r7, #4
   438a8:	vst1.32	{d16-d17}, [r5]
   438ac:	bne	4389c <__assert_fail@plt+0x30e20>
   438b0:	cmp	r3, r6
   438b4:	ldr	r5, [sp, #68]	; 0x44
   438b8:	ldr	r7, [sp, #56]	; 0x38
   438bc:	ldr	r6, [sp, #76]	; 0x4c
   438c0:	beq	438dc <__assert_fail@plt+0x30e60>
   438c4:	add	r1, r6, r2, lsl #2
   438c8:	ldr	r1, [r1, #4]
   438cc:	str	r1, [r6, r2, lsl #2]
   438d0:	add	r2, r2, #1
   438d4:	cmp	r0, r2
   438d8:	bne	438c4 <__assert_fail@plt+0x30e48>
   438dc:	str	r6, [sp, #24]
   438e0:	str	r0, [sp, #40]	; 0x28
   438e4:	ldr	r0, [sp, #52]	; 0x34
   438e8:	add	r1, r9, r9, lsl #1
   438ec:	ldr	r0, [r0, #116]	; 0x74
   438f0:	add	r0, r0, r1, lsl #3
   438f4:	b	439ec <__assert_fail@plt+0x30f70>
   438f8:	ldr	r0, [sp, #20]
   438fc:	ldr	r4, [sp, #76]	; 0x4c
   43900:	ldr	r8, [sp, #24]
   43904:	cmp	r0, r6
   43908:	beq	435b4 <__assert_fail@plt+0x30b38>
   4390c:	b	435e4 <__assert_fail@plt+0x30b68>
   43910:	ldr	r0, [r6]
   43914:	cmp	r0, r4
   43918:	bne	439e8 <__assert_fail@plt+0x30f6c>
   4391c:	ldr	r0, [r6, #8]
   43920:	ldr	r1, [r6, #12]
   43924:	subs	r0, r1, r0
   43928:	add	ip, r0, r5
   4392c:	beq	4393c <__assert_fail@plt+0x30ec0>
   43930:	ldr	r1, [r7, #12]
   43934:	add	r1, r1, r4, lsl #2
   43938:	b	4394c <__assert_fail@plt+0x30ed0>
   4393c:	ldr	r1, [r7, #20]
   43940:	add	r2, r4, r4, lsl #1
   43944:	add	r1, r1, r2, lsl #2
   43948:	ldr	r1, [r1, #8]
   4394c:	ldr	r2, [sl, #12]
   43950:	cmp	ip, r2
   43954:	bgt	439e8 <__assert_fail@plt+0x30f6c>
   43958:	ldr	r2, [sl]
   4395c:	ldr	r2, [r2, ip, lsl #2]
   43960:	cmp	r2, #0
   43964:	beq	439e8 <__assert_fail@plt+0x30f6c>
   43968:	ldr	r3, [r2, #8]
   4396c:	cmp	r3, #1
   43970:	blt	439e8 <__assert_fail@plt+0x30f6c>
   43974:	ldr	r1, [r1]
   43978:	ldr	r2, [r2, #12]
   4397c:	subs	r7, r3, #1
   43980:	mov	r3, #0
   43984:	beq	439ac <__assert_fail@plt+0x30f30>
   43988:	add	r5, r3, r7
   4398c:	lsr	r4, r5, #1
   43990:	ldr	r0, [r2, r4, lsl #2]
   43994:	cmp	r0, r1
   43998:	mov	r0, #1
   4399c:	movge	r7, r4
   439a0:	addlt	r3, r0, r5, lsr #1
   439a4:	cmp	r3, r7
   439a8:	bcc	43988 <__assert_fail@plt+0x30f0c>
   439ac:	ldr	r0, [r2, r3, lsl #2]
   439b0:	cmp	r0, r1
   439b4:	bne	434dc <__assert_fail@plt+0x30a60>
   439b8:	stm	sp, {r1, ip}
   439bc:	ldr	r4, [sp, #72]	; 0x48
   439c0:	ldr	r5, [sp, #68]	; 0x44
   439c4:	ldr	r0, [sp, #52]	; 0x34
   439c8:	ldr	r1, [sp, #36]	; 0x24
   439cc:	mov	r2, r4
   439d0:	mov	r3, r5
   439d4:	bl	44058 <__assert_fail@plt+0x315dc>
   439d8:	ldr	r7, [sp, #56]	; 0x38
   439dc:	cmp	r0, #0
   439e0:	beq	434f0 <__assert_fail@plt+0x30a74>
   439e4:	ldr	lr, [sp, #48]	; 0x30
   439e8:	mov	r0, r6
   439ec:	add	r6, r0, #24
   439f0:	ldrb	r0, [r0, #20]
   439f4:	add	r9, r9, #1
   439f8:	cmp	r0, #0
   439fc:	bne	43910 <__assert_fail@plt+0x30e94>
   43a00:	ldr	r2, [sp, #44]	; 0x2c
   43a04:	ldr	r0, [r8, #4]
   43a08:	ldr	r9, [sp, #52]	; 0x34
   43a0c:	ldr	r4, [sp, #76]	; 0x4c
   43a10:	add	r2, r2, #1
   43a14:	cmp	r2, r0
   43a18:	blt	43478 <__assert_fail@plt+0x309fc>
   43a1c:	mov	r8, #0
   43a20:	b	43a74 <__assert_fail@plt+0x30ff8>
   43a24:	ldr	r8, [sp, #80]	; 0x50
   43a28:	mov	lr, #0
   43a2c:	cmp	lr, r0
   43a30:	blt	43410 <__assert_fail@plt+0x30994>
   43a34:	mov	r0, #0
   43a38:	str	r0, [fp, #-76]	; 0xffffffb4
   43a3c:	mov	r8, #0
   43a40:	mov	r0, r8
   43a44:	sub	sp, fp, #28
   43a48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43a4c:	mov	r8, r0
   43a50:	str	r0, [fp, #-76]	; 0xffffffb4
   43a54:	b	43a40 <__assert_fail@plt+0x30fc4>
   43a58:	str	r1, [fp, #-76]	; 0xffffffb4
   43a5c:	b	43a3c <__assert_fail@plt+0x30fc0>
   43a60:	str	r0, [fp, #-72]	; 0xffffffb8
   43a64:	str	r8, [fp, #-76]	; 0xffffffb4
   43a68:	b	43a40 <__assert_fail@plt+0x30fc4>
   43a6c:	mov	r8, r0
   43a70:	ldr	r4, [sp, #76]	; 0x4c
   43a74:	ldr	r0, [fp, #-72]	; 0xffffffb8
   43a78:	cmp	r0, #0
   43a7c:	beq	43a88 <__assert_fail@plt+0x3100c>
   43a80:	mov	r0, r4
   43a84:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   43a88:	cmp	r8, #0
   43a8c:	str	r8, [fp, #-76]	; 0xffffffb4
   43a90:	moveq	r8, #0
   43a94:	b	43a40 <__assert_fail@plt+0x30fc4>
   43a98:	mov	r8, r0
   43a9c:	b	43a40 <__assert_fail@plt+0x30fc4>
   43aa0:	mov	r8, r0
   43aa4:	b	43a74 <__assert_fail@plt+0x30ff8>
   43aa8:	mov	r4, #0
   43aac:	mov	r8, #12
   43ab0:	str	r4, [fp, #-56]	; 0xffffffc8
   43ab4:	str	r4, [fp, #-52]	; 0xffffffcc
   43ab8:	b	43a74 <__assert_fail@plt+0x30ff8>
   43abc:	mov	r8, #12
   43ac0:	b	43a74 <__assert_fail@plt+0x30ff8>
   43ac4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   43ac8:	add	fp, sp, #28
   43acc:	sub	sp, sp, #12
   43ad0:	ldr	ip, [r1, #4]
   43ad4:	mov	sl, r0
   43ad8:	mov	r0, #0
   43adc:	cmp	ip, #0
   43ae0:	ldrne	lr, [r2, #4]
   43ae4:	cmpne	lr, #0
   43ae8:	bne	43af4 <__assert_fail@plt+0x31078>
   43aec:	sub	sp, fp, #28
   43af0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43af4:	mov	r7, r1
   43af8:	ldr	r1, [sl, #4]
   43afc:	ldr	r6, [sl]
   43b00:	add	r3, lr, ip
   43b04:	add	r4, r1, r3
   43b08:	cmp	r4, r6
   43b0c:	ble	43b50 <__assert_fail@plt+0x310d4>
   43b10:	mov	r5, r2
   43b14:	mov	r2, sl
   43b18:	add	r4, r6, r3
   43b1c:	ldr	r0, [r2, #8]!
   43b20:	lsl	r1, r4, #2
   43b24:	str	r2, [sp, #8]
   43b28:	bl	33040 <__assert_fail@plt+0x205c4>
   43b2c:	cmp	r0, #0
   43b30:	beq	43cd4 <__assert_fail@plt+0x31258>
   43b34:	str	r4, [sl]
   43b38:	str	r0, [sl, #8]
   43b3c:	mov	r2, r5
   43b40:	ldr	r1, [sl, #4]
   43b44:	ldr	lr, [r5, #4]
   43b48:	ldr	ip, [r7, #4]
   43b4c:	b	43b58 <__assert_fail@plt+0x310dc>
   43b50:	add	r0, sl, #8
   43b54:	str	r0, [sp, #8]
   43b58:	str	r2, [sp, #4]
   43b5c:	ldr	r2, [r2, #8]
   43b60:	ldr	r4, [r7, #8]
   43b64:	add	r3, ip, r1
   43b68:	sub	r8, r1, #1
   43b6c:	add	r9, r3, lr
   43b70:	sub	ip, ip, #1
   43b74:	sub	r3, lr, #1
   43b78:	ldr	r1, [r2, r3, lsl #2]
   43b7c:	ldr	r6, [r4, ip, lsl #2]
   43b80:	cmp	r6, r1
   43b84:	beq	43bb0 <__assert_fail@plt+0x31134>
   43b88:	blt	43ba0 <__assert_fail@plt+0x31124>
   43b8c:	sub	r5, ip, #1
   43b90:	cmp	ip, #0
   43b94:	mov	ip, r5
   43b98:	bgt	43b7c <__assert_fail@plt+0x31100>
   43b9c:	b	43c2c <__assert_fail@plt+0x311b0>
   43ba0:	cmp	lr, #2
   43ba4:	mov	lr, r3
   43ba8:	bge	43b74 <__assert_fail@plt+0x310f8>
   43bac:	b	43c2c <__assert_fail@plt+0x311b0>
   43bb0:	mov	r0, r9
   43bb4:	cmp	r8, #0
   43bb8:	blt	43c04 <__assert_fail@plt+0x31188>
   43bbc:	ldr	r1, [sp, #8]
   43bc0:	ldr	r9, [r1]
   43bc4:	mov	r1, r8
   43bc8:	ldr	r5, [r9, r1, lsl #2]
   43bcc:	cmp	r5, r6
   43bd0:	ble	43be8 <__assert_fail@plt+0x3116c>
   43bd4:	sub	r8, r1, #1
   43bd8:	cmp	r1, #0
   43bdc:	mov	r1, r8
   43be0:	bgt	43bc8 <__assert_fail@plt+0x3114c>
   43be4:	b	43c04 <__assert_fail@plt+0x31188>
   43be8:	mov	r8, r1
   43bec:	bne	43c04 <__assert_fail@plt+0x31188>
   43bf0:	mov	r8, r1
   43bf4:	mov	r9, r0
   43bf8:	cmp	ip, #1
   43bfc:	bge	43c20 <__assert_fail@plt+0x311a4>
   43c00:	b	43c2c <__assert_fail@plt+0x311b0>
   43c04:	ldr	r1, [sp, #8]
   43c08:	mov	r9, r0
   43c0c:	sub	r9, r0, #1
   43c10:	ldr	r1, [r1]
   43c14:	str	r6, [r1, r9, lsl #2]
   43c18:	cmp	ip, #1
   43c1c:	blt	43c2c <__assert_fail@plt+0x311b0>
   43c20:	cmp	lr, #2
   43c24:	mov	lr, r3
   43c28:	bge	43b70 <__assert_fail@plt+0x310f4>
   43c2c:	ldr	lr, [r7, #4]
   43c30:	ldr	r7, [sp, #4]
   43c34:	ldr	r2, [sl, #4]
   43c38:	ldr	r0, [sl, #8]
   43c3c:	ldr	r4, [r7, #4]
   43c40:	subs	r1, r2, #1
   43c44:	add	r3, r1, lr
   43c48:	add	r3, r3, r4
   43c4c:	sub	r5, r3, r9
   43c50:	add	r6, r5, #1
   43c54:	cmpge	r5, #0
   43c58:	add	r7, r6, r2
   43c5c:	str	r7, [sl, #4]
   43c60:	blt	43cb8 <__assert_fail@plt+0x3123c>
   43c64:	add	r2, r2, r4
   43c68:	add	r2, r2, lr
   43c6c:	sub	r2, r2, r9
   43c70:	add	r7, r0, r2, lsl #2
   43c74:	ldr	r2, [r0, r1, lsl #2]
   43c78:	ldr	r5, [r0, r3, lsl #2]
   43c7c:	cmp	r5, r2
   43c80:	bgt	43c9c <__assert_fail@plt+0x31220>
   43c84:	str	r2, [r7, r1, lsl #2]
   43c88:	sub	r2, r1, #1
   43c8c:	cmp	r1, #0
   43c90:	mov	r1, r2
   43c94:	bgt	43c74 <__assert_fail@plt+0x311f8>
   43c98:	b	43cb8 <__assert_fail@plt+0x3123c>
   43c9c:	str	r5, [r7, r1, lsl #2]
   43ca0:	sub	r7, r7, #4
   43ca4:	subs	r6, r6, #1
   43ca8:	sub	r3, r3, #1
   43cac:	mov	r2, #0
   43cb0:	bne	43c74 <__assert_fail@plt+0x311f8>
   43cb4:	b	43cbc <__assert_fail@plt+0x31240>
   43cb8:	mov	r2, r6
   43cbc:	add	r1, r0, r9, lsl #2
   43cc0:	lsl	r2, r2, #2
   43cc4:	bl	124b8 <memcpy@plt>
   43cc8:	mov	r0, #0
   43ccc:	sub	sp, fp, #28
   43cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43cd4:	mov	r0, #12
   43cd8:	sub	sp, fp, #28
   43cdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43ce0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   43ce4:	add	fp, sp, #28
   43ce8:	sub	sp, sp, #44	; 0x2c
   43cec:	mov	ip, r0
   43cf0:	ldr	r0, [r0, #28]
   43cf4:	mov	r8, r2
   43cf8:	add	r2, r1, r1, lsl #1
   43cfc:	mov	r9, #0
   43d00:	str	r3, [sp, #4]
   43d04:	str	r9, [sp, #36]	; 0x24
   43d08:	str	r9, [sp, #32]
   43d0c:	str	r9, [sp, #40]	; 0x28
   43d10:	add	r2, r0, r2, lsl #2
   43d14:	mov	r0, r2
   43d18:	ldr	r6, [r0, #4]!
   43d1c:	cmp	r6, #1
   43d20:	str	r0, [sp, #28]
   43d24:	blt	44030 <__assert_fail@plt+0x315b4>
   43d28:	add	r4, r2, #8
   43d2c:	mov	sl, #1
   43d30:	str	r2, [sp]
   43d34:	str	r1, [sp, #12]
   43d38:	str	ip, [sp, #8]
   43d3c:	str	r4, [sp, #20]
   43d40:	ldr	r3, [r4]
   43d44:	ldr	r0, [r3, r9, lsl #2]
   43d48:	cmp	r0, r1
   43d4c:	beq	43efc <__assert_fail@plt+0x31480>
   43d50:	ldr	r2, [ip]
   43d54:	add	r2, r2, r0, lsl #3
   43d58:	ldrb	r2, [r2, #4]
   43d5c:	tst	r2, #8
   43d60:	beq	43efc <__assert_fail@plt+0x31480>
   43d64:	ldr	r2, [ip, #20]
   43d68:	add	r0, r0, r0, lsl #1
   43d6c:	mvn	lr, #0
   43d70:	str	r6, [sp, #24]
   43d74:	str	r0, [sp, #16]
   43d78:	add	r0, r2, r0, lsl #2
   43d7c:	ldr	r7, [r0, #4]
   43d80:	ldr	r0, [r0, #8]
   43d84:	cmp	r7, #2
   43d88:	ldr	r5, [r0]
   43d8c:	ldrge	lr, [r0, #4]
   43d90:	cmp	r6, #1
   43d94:	blt	43dd8 <__assert_fail@plt+0x3135c>
   43d98:	mov	r2, #0
   43d9c:	subs	r7, r6, #1
   43da0:	beq	43dc4 <__assert_fail@plt+0x31348>
   43da4:	add	r4, r2, r7
   43da8:	lsr	r6, r4, #1
   43dac:	ldr	r0, [r3, r6, lsl #2]
   43db0:	cmp	r0, r5
   43db4:	movge	r7, r6
   43db8:	addlt	r2, sl, r4, lsr #1
   43dbc:	cmp	r2, r7
   43dc0:	bcc	43da4 <__assert_fail@plt+0x31328>
   43dc4:	ldr	r0, [r3, r2, lsl #2]
   43dc8:	ldr	r4, [sp, #20]
   43dcc:	ldr	r6, [sp, #24]
   43dd0:	cmp	r0, r5
   43dd4:	beq	43e30 <__assert_fail@plt+0x313b4>
   43dd8:	ldr	r0, [r8, #4]
   43ddc:	cmp	r0, #1
   43de0:	blt	43e30 <__assert_fail@plt+0x313b4>
   43de4:	ldr	r1, [r8, #8]
   43de8:	subs	r4, r0, #1
   43dec:	mov	r7, #0
   43df0:	beq	43e14 <__assert_fail@plt+0x31398>
   43df4:	add	r0, r7, r4
   43df8:	lsr	r6, r0, #1
   43dfc:	ldr	ip, [r1, r6, lsl #2]
   43e00:	cmp	ip, r5
   43e04:	movge	r4, r6
   43e08:	addlt	r7, sl, r0, lsr #1
   43e0c:	cmp	r7, r4
   43e10:	bcc	43df4 <__assert_fail@plt+0x31378>
   43e14:	ldr	r0, [r1, r7, lsl #2]
   43e18:	ldr	r1, [sp, #12]
   43e1c:	ldr	ip, [sp, #8]
   43e20:	ldr	r4, [sp, #20]
   43e24:	ldr	r6, [sp, #24]
   43e28:	cmp	r0, r5
   43e2c:	beq	43ecc <__assert_fail@plt+0x31450>
   43e30:	cmp	lr, #1
   43e34:	blt	43efc <__assert_fail@plt+0x31480>
   43e38:	cmp	r6, #1
   43e3c:	blt	43e7c <__assert_fail@plt+0x31400>
   43e40:	mov	r2, #0
   43e44:	subs	r7, r6, #1
   43e48:	beq	43e6c <__assert_fail@plt+0x313f0>
   43e4c:	add	r0, r2, r7
   43e50:	lsr	r6, r0, #1
   43e54:	ldr	r5, [r3, r6, lsl #2]
   43e58:	cmp	r5, lr
   43e5c:	movge	r7, r6
   43e60:	addlt	r2, sl, r0, lsr #1
   43e64:	cmp	r2, r7
   43e68:	bcc	43e4c <__assert_fail@plt+0x313d0>
   43e6c:	ldr	r0, [r3, r2, lsl #2]
   43e70:	ldr	r6, [sp, #24]
   43e74:	cmp	r0, lr
   43e78:	beq	43efc <__assert_fail@plt+0x31480>
   43e7c:	ldr	r0, [r8, #4]
   43e80:	cmp	r0, #1
   43e84:	blt	43efc <__assert_fail@plt+0x31480>
   43e88:	ldr	r4, [r8, #8]
   43e8c:	subs	r7, r0, #1
   43e90:	mov	r3, #0
   43e94:	beq	43eb8 <__assert_fail@plt+0x3143c>
   43e98:	add	r0, r3, r7
   43e9c:	lsr	r6, r0, #1
   43ea0:	ldr	r5, [r4, r6, lsl #2]
   43ea4:	cmp	r5, lr
   43ea8:	movge	r7, r6
   43eac:	addlt	r3, sl, r0, lsr #1
   43eb0:	cmp	r3, r7
   43eb4:	bcc	43e98 <__assert_fail@plt+0x3141c>
   43eb8:	ldr	r0, [r4, r3, lsl #2]
   43ebc:	ldr	r4, [sp, #20]
   43ec0:	ldr	r6, [sp, #24]
   43ec4:	cmp	r0, lr
   43ec8:	bne	43efc <__assert_fail@plt+0x31480>
   43ecc:	ldr	r0, [ip, #28]
   43ed0:	ldr	r1, [sp, #16]
   43ed4:	add	r2, r0, r1, lsl #2
   43ed8:	ldr	r1, [sp, #4]
   43edc:	add	r0, sp, #32
   43ee0:	bl	43ac4 <__assert_fail@plt+0x31048>
   43ee4:	cmp	r0, #0
   43ee8:	bne	44048 <__assert_fail@plt+0x315cc>
   43eec:	ldr	r0, [sp, #28]
   43ef0:	ldr	r1, [sp, #12]
   43ef4:	ldr	ip, [sp, #8]
   43ef8:	ldr	r6, [r0]
   43efc:	add	r9, r9, #1
   43f00:	cmp	r9, r6
   43f04:	blt	43d40 <__assert_fail@plt+0x312c4>
   43f08:	ldr	r0, [sp]
   43f0c:	cmp	r6, #0
   43f10:	ble	44030 <__assert_fail@plt+0x315b4>
   43f14:	ldr	r9, [sp, #36]	; 0x24
   43f18:	ldr	lr, [r0, #8]
   43f1c:	ldr	r0, [sp, #40]	; 0x28
   43f20:	mov	ip, #0
   43f24:	mov	r6, #1
   43f28:	sub	r1, r9, #1
   43f2c:	str	lr, [sp, #20]
   43f30:	str	r9, [sp, #16]
   43f34:	str	r1, [sp, #24]
   43f38:	b	43f5c <__assert_fail@plt+0x314e0>
   43f3c:	add	r3, r1, r2, lsl #2
   43f40:	ldr	r3, [r3, #4]
   43f44:	str	r3, [r1, r2, lsl #2]
   43f48:	add	r2, r2, #1
   43f4c:	ldr	r3, [r8, #4]
   43f50:	cmp	r2, r3
   43f54:	blt	43f3c <__assert_fail@plt+0x314c0>
   43f58:	b	44018 <__assert_fail@plt+0x3159c>
   43f5c:	ldr	r5, [lr, ip, lsl #2]
   43f60:	cmp	r9, #1
   43f64:	blt	43fa4 <__assert_fail@plt+0x31528>
   43f68:	ldr	r2, [sp, #24]
   43f6c:	mov	r1, #0
   43f70:	cmp	r2, #0
   43f74:	beq	43f98 <__assert_fail@plt+0x3151c>
   43f78:	add	r3, r1, r2
   43f7c:	lsr	r4, r3, #1
   43f80:	ldr	r7, [r0, r4, lsl #2]
   43f84:	cmp	r7, r5
   43f88:	movge	r2, r4
   43f8c:	addlt	r1, r6, r3, lsr #1
   43f90:	cmp	r1, r2
   43f94:	bcc	43f78 <__assert_fail@plt+0x314fc>
   43f98:	ldr	r1, [r0, r1, lsl #2]
   43f9c:	cmp	r1, r5
   43fa0:	beq	44018 <__assert_fail@plt+0x3159c>
   43fa4:	ldr	r3, [r8, #4]
   43fa8:	cmp	r3, #1
   43fac:	blt	44018 <__assert_fail@plt+0x3159c>
   43fb0:	mov	r1, r8
   43fb4:	subs	sl, r3, #1
   43fb8:	mov	r2, #0
   43fbc:	ldr	r1, [r8, #8]
   43fc0:	beq	43fe8 <__assert_fail@plt+0x3156c>
   43fc4:	mov	r4, sl
   43fc8:	add	r7, r2, r4
   43fcc:	lsr	lr, r7, #1
   43fd0:	ldr	r9, [r1, lr, lsl #2]
   43fd4:	cmp	r9, r5
   43fd8:	movge	r4, lr
   43fdc:	addlt	r2, r6, r7, lsr #1
   43fe0:	cmp	r2, r4
   43fe4:	bcc	43fc8 <__assert_fail@plt+0x3154c>
   43fe8:	ldr	r7, [r1, r2, lsl #2]
   43fec:	ldr	lr, [sp, #20]
   43ff0:	ldr	r9, [sp, #16]
   43ff4:	mov	r4, r2
   43ff8:	cmp	r7, r5
   43ffc:	mvnne	r4, #0
   44000:	cmp	r4, #0
   44004:	blt	44018 <__assert_fail@plt+0x3159c>
   44008:	cmp	r3, r4
   4400c:	strgt	sl, [r8, #4]
   44010:	cmpgt	sl, r4
   44014:	bgt	43f3c <__assert_fail@plt+0x314c0>
   44018:	ldr	r1, [sp, #28]
   4401c:	add	ip, ip, #1
   44020:	ldr	r1, [r1]
   44024:	cmp	ip, r1
   44028:	blt	43f5c <__assert_fail@plt+0x314e0>
   4402c:	b	44034 <__assert_fail@plt+0x315b8>
   44030:	ldr	r0, [sp, #40]	; 0x28
   44034:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   44038:	mov	r5, #0
   4403c:	mov	r0, r5
   44040:	sub	sp, fp, #28
   44044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44048:	mov	r5, r0
   4404c:	ldr	r0, [sp, #40]	; 0x28
   44050:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   44054:	b	4403c <__assert_fail@plt+0x315c0>
   44058:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4405c:	add	fp, sp, #28
   44060:	sub	sp, sp, #28
   44064:	ldr	ip, [r0, #108]	; 0x6c
   44068:	str	r1, [sp, #24]
   4406c:	ldr	r1, [r0, #84]	; 0x54
   44070:	mov	r4, r3
   44074:	str	r2, [sp, #8]
   44078:	str	r0, [sp, #16]
   4407c:	cmp	ip, #1
   44080:	str	r1, [sp, #20]
   44084:	blt	440ec <__assert_fail@plt+0x31670>
   44088:	ldr	r1, [r0, #116]	; 0x74
   4408c:	mov	r9, #0
   44090:	mov	r2, #1
   44094:	mov	r3, ip
   44098:	add	r7, r3, r9
   4409c:	add	r7, r7, r7, lsr #31
   440a0:	asr	r6, r7, #1
   440a4:	add	r5, r6, r6, lsl #1
   440a8:	add	r5, r1, r5, lsl #3
   440ac:	ldr	r5, [r5, #4]
   440b0:	cmp	r5, r4
   440b4:	addlt	r9, r2, r7, asr #1
   440b8:	movge	r3, r6
   440bc:	cmp	r9, r3
   440c0:	blt	44098 <__assert_fail@plt+0x3161c>
   440c4:	cmp	r9, ip
   440c8:	bge	440f8 <__assert_fail@plt+0x3167c>
   440cc:	ldr	r0, [sp, #16]
   440d0:	add	r2, r9, r9, lsl #1
   440d4:	ldr	r1, [r0, #116]	; 0x74
   440d8:	add	r1, r1, r2, lsl #3
   440dc:	ldr	r1, [r1, #4]
   440e0:	cmp	r1, r4
   440e4:	mvnne	r9, #0
   440e8:	b	440fc <__assert_fail@plt+0x31680>
   440ec:	mov	r9, #0
   440f0:	cmp	r9, ip
   440f4:	blt	440cc <__assert_fail@plt+0x31650>
   440f8:	mvn	r9, #0
   440fc:	ldr	r8, [fp, #12]
   44100:	cmp	ip, #1
   44104:	blt	4414c <__assert_fail@plt+0x316d0>
   44108:	ldr	r0, [sp, #16]
   4410c:	mov	r6, #0
   44110:	mov	r2, #1
   44114:	mov	r3, ip
   44118:	ldr	r1, [r0, #116]	; 0x74
   4411c:	add	r7, r3, r6
   44120:	add	r7, r7, r7, lsr #31
   44124:	asr	r5, r7, #1
   44128:	add	r0, r5, r5, lsl #1
   4412c:	add	r0, r1, r0, lsl #3
   44130:	ldr	r0, [r0, #4]
   44134:	cmp	r0, r8
   44138:	addlt	r6, r2, r7, asr #1
   4413c:	movge	r3, r5
   44140:	cmp	r6, r3
   44144:	blt	4411c <__assert_fail@plt+0x316a0>
   44148:	b	44150 <__assert_fail@plt+0x316d4>
   4414c:	mov	r6, #0
   44150:	cmp	r6, ip
   44154:	ldr	ip, [sp, #16]
   44158:	bge	44178 <__assert_fail@plt+0x316fc>
   4415c:	ldr	r0, [ip, #116]	; 0x74
   44160:	add	r1, r6, r6, lsl #1
   44164:	add	r0, r0, r1, lsl #3
   44168:	ldr	r0, [r0, #4]
   4416c:	cmp	r0, r8
   44170:	mvnne	r6, #0
   44174:	b	4417c <__assert_fail@plt+0x31700>
   44178:	mvn	r6, #0
   4417c:	ldr	r0, [sp, #24]
   44180:	ldr	r0, [r0, #4]
   44184:	cmp	r0, #1
   44188:	blt	44308 <__assert_fail@plt+0x3188c>
   4418c:	mov	sl, #0
   44190:	str	r4, [sp, #12]
   44194:	ldr	r0, [sp, #24]
   44198:	ldr	r3, [ip, #116]	; 0x74
   4419c:	ldr	r5, [sp, #20]
   441a0:	ldr	r0, [r0, #8]
   441a4:	ldr	r5, [r5]
   441a8:	ldr	r2, [r0, sl, lsl #2]
   441ac:	mov	r0, r3
   441b0:	add	r1, r2, r2, lsl #1
   441b4:	ldr	r7, [r0, r1, lsl #3]!
   441b8:	ldr	r0, [r0, #8]
   441bc:	ldr	r5, [r5, r7, lsl #3]
   441c0:	mvn	r7, #0
   441c4:	cmp	r0, r4
   441c8:	ble	441d4 <__assert_fail@plt+0x31758>
   441cc:	mvn	r8, #0
   441d0:	b	44260 <__assert_fail@plt+0x317e4>
   441d4:	add	r1, r3, r1, lsl #3
   441d8:	mov	r8, #1
   441dc:	ldr	r1, [r1, #12]
   441e0:	cmp	r1, r4
   441e4:	blt	44260 <__assert_fail@plt+0x317e4>
   441e8:	sub	r1, r1, r4
   441ec:	mov	lr, r5
   441f0:	cmp	r0, r4
   441f4:	mov	r4, #1
   441f8:	clz	r1, r1
   441fc:	lsr	r5, r1, #5
   44200:	lsl	r1, r5, #1
   44204:	orreq	r1, r4, r5, lsl #1
   44208:	cmp	r1, #0
   4420c:	beq	44254 <__assert_fail@plt+0x317d8>
   44210:	ldr	r3, [sp, #8]
   44214:	mov	r0, ip
   44218:	mov	r2, lr
   4421c:	str	r9, [sp]
   44220:	mov	r5, lr
   44224:	bl	44314 <__assert_fail@plt+0x31898>
   44228:	mov	r8, r0
   4422c:	ldr	r0, [sp, #24]
   44230:	ldr	ip, [sp, #16]
   44234:	ldr	r4, [sp, #12]
   44238:	ldr	r0, [r0, #8]
   4423c:	ldr	r3, [ip, #116]	; 0x74
   44240:	ldr	r2, [r0, sl, lsl #2]
   44244:	add	r0, r2, r2, lsl #1
   44248:	add	r0, r3, r0, lsl #3
   4424c:	ldr	r0, [r0, #8]
   44250:	b	44260 <__assert_fail@plt+0x317e4>
   44254:	ldr	r4, [sp, #12]
   44258:	mov	r8, #0
   4425c:	mov	r5, lr
   44260:	ldr	r1, [fp, #12]
   44264:	cmp	r0, r1
   44268:	bgt	442d0 <__assert_fail@plt+0x31854>
   4426c:	add	r1, r2, r2, lsl #1
   44270:	ldr	r2, [fp, #12]
   44274:	mov	r7, #1
   44278:	add	r1, r3, r1, lsl #3
   4427c:	ldr	r1, [r1, #12]
   44280:	cmp	r1, r2
   44284:	blt	442d0 <__assert_fail@plt+0x31854>
   44288:	ldr	r2, [fp, #12]
   4428c:	sub	r1, r1, r2
   44290:	mov	r3, r2
   44294:	clz	r1, r1
   44298:	cmp	r0, r3
   4429c:	mov	r0, #1
   442a0:	lsr	r2, r1, #5
   442a4:	lsl	r1, r2, #1
   442a8:	orreq	r1, r0, r2, lsl #1
   442ac:	cmp	r1, #0
   442b0:	beq	442f0 <__assert_fail@plt+0x31874>
   442b4:	ldr	r3, [fp, #8]
   442b8:	mov	r0, ip
   442bc:	mov	r2, r5
   442c0:	str	r6, [sp]
   442c4:	bl	44314 <__assert_fail@plt+0x31898>
   442c8:	ldr	ip, [sp, #16]
   442cc:	mov	r7, r0
   442d0:	cmp	r7, r8
   442d4:	bne	442fc <__assert_fail@plt+0x31880>
   442d8:	ldr	r0, [sp, #24]
   442dc:	add	sl, sl, #1
   442e0:	ldr	r0, [r0, #4]
   442e4:	cmp	sl, r0
   442e8:	blt	44194 <__assert_fail@plt+0x31718>
   442ec:	b	44308 <__assert_fail@plt+0x3188c>
   442f0:	mov	r7, #0
   442f4:	cmp	r7, r8
   442f8:	beq	442d8 <__assert_fail@plt+0x3185c>
   442fc:	mov	r0, #1
   44300:	sub	sp, fp, #28
   44304:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44308:	mov	r0, #0
   4430c:	sub	sp, fp, #28
   44310:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44314:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   44318:	add	fp, sp, #28
   4431c:	sub	sp, sp, #36	; 0x24
   44320:	ldr	r4, [r0, #84]	; 0x54
   44324:	mov	r7, r0
   44328:	mov	r5, r1
   4432c:	add	r1, r3, r3, lsl #1
   44330:	str	r3, [sp, #32]
   44334:	ldr	r0, [r4, #24]
   44338:	add	r1, r0, r1, lsl #2
   4433c:	mov	lr, r1
   44340:	ldr	r0, [lr, #4]!
   44344:	cmp	r0, #1
   44348:	blt	444e4 <__assert_fail@plt+0x31a68>
   4434c:	mov	ip, #1
   44350:	mov	r6, r2
   44354:	and	r3, r5, #2
   44358:	mov	sl, #0
   4435c:	mvn	r2, ip, lsl r2
   44360:	cmp	r6, #31
   44364:	str	r3, [sp, #16]
   44368:	str	r2, [sp, #24]
   4436c:	lsl	r2, ip, r6
   44370:	and	ip, r5, #1
   44374:	str	r2, [sp, #28]
   44378:	mov	r2, #0
   4437c:	str	ip, [sp, #12]
   44380:	movwgt	r2, #1
   44384:	orr	r2, r2, r3, lsr #1
   44388:	add	r3, r1, #8
   4438c:	str	r2, [sp, #20]
   44390:	stmib	sp, {r3, lr}
   44394:	ldr	r1, [r3]
   44398:	ldr	r9, [r1, sl, lsl #2]
   4439c:	ldr	r1, [r4]
   443a0:	add	r2, r1, r9, lsl #3
   443a4:	ldrb	r2, [r2, #4]
   443a8:	cmp	r2, #9
   443ac:	beq	444a8 <__assert_fail@plt+0x31a2c>
   443b0:	cmp	r2, #8
   443b4:	beq	444c4 <__assert_fail@plt+0x31a48>
   443b8:	cmp	r2, #4
   443bc:	bne	444d8 <__assert_fail@plt+0x31a5c>
   443c0:	ldr	r1, [fp, #8]
   443c4:	cmn	r1, #1
   443c8:	beq	444d8 <__assert_fail@plt+0x31a5c>
   443cc:	ldr	r1, [fp, #8]
   443d0:	ldr	r0, [r7, #116]	; 0x74
   443d4:	add	r1, r1, r1, lsl #1
   443d8:	add	r0, r0, r1, lsl #3
   443dc:	add	r8, r0, #16
   443e0:	ldr	r0, [r8, #-16]
   443e4:	cmp	r0, r9
   443e8:	bne	44484 <__assert_fail@plt+0x31a08>
   443ec:	cmp	r6, #31
   443f0:	bgt	44404 <__assert_fail@plt+0x31988>
   443f4:	ldr	r0, [r8]
   443f8:	ldr	r1, [sp, #28]
   443fc:	tst	r0, r1
   44400:	beq	44484 <__assert_fail@plt+0x31a08>
   44404:	ldr	r0, [r4, #20]
   44408:	add	r1, r9, r9, lsl #1
   4440c:	add	r0, r0, r1, lsl #2
   44410:	ldr	r0, [r0, #8]
   44414:	ldr	r3, [r0]
   44418:	ldr	r0, [sp, #32]
   4441c:	cmp	r3, r0
   44420:	beq	444f0 <__assert_fail@plt+0x31a74>
   44424:	ldr	r0, [fp, #8]
   44428:	mov	r1, r5
   4442c:	mov	r2, r6
   44430:	str	r0, [sp]
   44434:	mov	r0, r7
   44438:	bl	44314 <__assert_fail@plt+0x31898>
   4443c:	cmp	r0, #0
   44440:	beq	44458 <__assert_fail@plt+0x319dc>
   44444:	cmn	r0, #1
   44448:	beq	44504 <__assert_fail@plt+0x31a88>
   4444c:	cmp	r6, #31
   44450:	ble	44474 <__assert_fail@plt+0x319f8>
   44454:	b	44484 <__assert_fail@plt+0x31a08>
   44458:	ldr	r0, [sp, #20]
   4445c:	cmp	r0, #0
   44460:	beq	44474 <__assert_fail@plt+0x319f8>
   44464:	ldr	r0, [sp, #16]
   44468:	cmp	r0, #0
   4446c:	beq	44484 <__assert_fail@plt+0x31a08>
   44470:	b	44500 <__assert_fail@plt+0x31a84>
   44474:	ldr	r0, [r8]
   44478:	ldr	r1, [sp, #24]
   4447c:	and	r0, r0, r1
   44480:	str	r0, [r8]
   44484:	ldrb	r0, [r8, #4]
   44488:	add	r8, r8, #24
   4448c:	cmp	r0, #0
   44490:	bne	443e0 <__assert_fail@plt+0x31964>
   44494:	ldr	lr, [sp, #8]
   44498:	ldr	ip, [sp, #12]
   4449c:	ldr	r3, [sp, #4]
   444a0:	ldr	r0, [lr]
   444a4:	b	444d8 <__assert_fail@plt+0x31a5c>
   444a8:	ldr	r2, [sp, #16]
   444ac:	cmp	r2, #0
   444b0:	beq	444d8 <__assert_fail@plt+0x31a5c>
   444b4:	ldr	r1, [r1, r9, lsl #3]
   444b8:	cmp	r1, r6
   444bc:	bne	444d8 <__assert_fail@plt+0x31a5c>
   444c0:	b	44500 <__assert_fail@plt+0x31a84>
   444c4:	cmp	ip, #0
   444c8:	beq	444d8 <__assert_fail@plt+0x31a5c>
   444cc:	ldr	r1, [r1, r9, lsl #3]
   444d0:	cmp	r1, r6
   444d4:	beq	4450c <__assert_fail@plt+0x31a90>
   444d8:	add	sl, sl, #1
   444dc:	cmp	sl, r0
   444e0:	blt	44394 <__assert_fail@plt+0x31918>
   444e4:	ubfx	r0, r5, #1, #1
   444e8:	sub	sp, fp, #28
   444ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   444f0:	ldr	r0, [sp, #12]
   444f4:	rsb	r0, r0, #0
   444f8:	sub	sp, fp, #28
   444fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44500:	mov	r0, #0
   44504:	sub	sp, fp, #28
   44508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4450c:	mvn	r0, #0
   44510:	sub	sp, fp, #28
   44514:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44518:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4451c:	add	fp, sp, #28
   44520:	sub	sp, sp, #36	; 0x24
   44524:	sub	sp, sp, #1024	; 0x400
   44528:	ldrb	r3, [r0]
   4452c:	mov	r5, r0
   44530:	cmp	r3, #0
   44534:	beq	445e8 <__assert_fail@plt+0x31b6c>
   44538:	mov	r0, #1
   4453c:	mov	r2, #0
   44540:	ldrb	r7, [r1, r2]
   44544:	cmp	r7, #0
   44548:	uxtbne	r3, r3
   4454c:	subne	r3, r3, r7
   44550:	clzne	r3, r3
   44554:	lsrne	r3, r3, #5
   44558:	andne	r0, r0, r3
   4455c:	addne	r3, r5, r2
   44560:	addne	r2, r2, #1
   44564:	ldrbne	r3, [r3, #1]
   44568:	cmpne	r3, #0
   4456c:	bne	44540 <__assert_fail@plt+0x31ac4>
   44570:	add	r8, r1, r2
   44574:	mov	r7, r5
   44578:	ldrb	r2, [r8]
   4457c:	cmp	r2, #0
   44580:	movwne	r7, #0
   44584:	tst	r0, #1
   44588:	cmpeq	r2, #0
   4458c:	bne	445f8 <__assert_fail@plt+0x31b7c>
   44590:	sub	r4, r8, r1
   44594:	ldrb	r1, [r1]
   44598:	add	r0, r5, #1
   4459c:	bl	12794 <strchr@plt>
   445a0:	cmp	r4, #1
   445a4:	beq	44604 <__assert_fail@plt+0x31b88>
   445a8:	cmp	r0, #0
   445ac:	mov	r7, r0
   445b0:	beq	445f8 <__assert_fail@plt+0x31b7c>
   445b4:	add	r1, r5, r4
   445b8:	sub	r5, r8, r4
   445bc:	str	r0, [sp, #24]
   445c0:	str	r4, [sp, #28]
   445c4:	subs	r9, r1, r0
   445c8:	movwcc	r9, #1
   445cc:	cmp	r4, #31
   445d0:	bhi	4460c <__assert_fail@plt+0x31b90>
   445d4:	cmp	r4, #3
   445d8:	bcs	44710 <__assert_fail@plt+0x31c94>
   445dc:	sub	r6, r4, #1
   445e0:	mov	r4, #1
   445e4:	b	44d24 <__assert_fail@plt+0x322a8>
   445e8:	ldrb	r0, [r1]
   445ec:	cmp	r0, #0
   445f0:	movne	r5, #0
   445f4:	mov	r7, r5
   445f8:	mov	r0, r7
   445fc:	sub	sp, fp, #28
   44600:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44604:	mov	r7, r0
   44608:	b	445f8 <__assert_fail@plt+0x31b7c>
   4460c:	mvn	r1, #0
   44610:	mov	r0, #0
   44614:	mov	r2, #1
   44618:	mov	ip, #1
   4461c:	mov	r3, #1
   44620:	add	r6, r1, r3
   44624:	ldrb	r7, [r5, r2]
   44628:	ldrb	r6, [r5, r6]
   4462c:	cmp	r7, r6
   44630:	bcs	44644 <__assert_fail@plt+0x31bc8>
   44634:	sub	ip, r2, r1
   44638:	mov	r3, #1
   4463c:	mov	r0, r2
   44640:	b	44678 <__assert_fail@plt+0x31bfc>
   44644:	bne	4465c <__assert_fail@plt+0x31be0>
   44648:	cmp	r3, ip
   4464c:	bne	44674 <__assert_fail@plt+0x31bf8>
   44650:	add	r0, r0, ip
   44654:	mov	r3, #1
   44658:	b	44678 <__assert_fail@plt+0x31bfc>
   4465c:	add	r2, r0, #1
   44660:	mov	r1, r0
   44664:	mov	r3, #1
   44668:	mov	ip, #1
   4466c:	mov	r0, r2
   44670:	b	44678 <__assert_fail@plt+0x31bfc>
   44674:	add	r3, r3, #1
   44678:	add	r2, r3, r0
   4467c:	cmp	r2, r4
   44680:	bcc	44620 <__assert_fail@plt+0x31ba4>
   44684:	cmp	r4, #2
   44688:	bcc	44814 <__assert_fail@plt+0x31d98>
   4468c:	mvn	lr, #0
   44690:	mov	r2, #0
   44694:	mov	r3, #1
   44698:	mov	sl, #1
   4469c:	mov	r6, #1
   446a0:	add	r7, lr, r6
   446a4:	ldrb	r0, [r5, r3]
   446a8:	ldrb	r7, [r5, r7]
   446ac:	cmp	r7, r0
   446b0:	bcs	446c4 <__assert_fail@plt+0x31c48>
   446b4:	sub	sl, r3, lr
   446b8:	mov	r6, #1
   446bc:	mov	r2, r3
   446c0:	b	446fc <__assert_fail@plt+0x31c80>
   446c4:	cmp	r0, r7
   446c8:	bne	446e0 <__assert_fail@plt+0x31c64>
   446cc:	cmp	r6, sl
   446d0:	bne	446f8 <__assert_fail@plt+0x31c7c>
   446d4:	add	r2, r2, sl
   446d8:	mov	r6, #1
   446dc:	b	446fc <__assert_fail@plt+0x31c80>
   446e0:	add	r0, r2, #1
   446e4:	mov	lr, r2
   446e8:	mov	r6, #1
   446ec:	mov	sl, #1
   446f0:	mov	r2, r0
   446f4:	b	446fc <__assert_fail@plt+0x31c80>
   446f8:	add	r6, r6, #1
   446fc:	ldr	r0, [sp, #28]
   44700:	add	r3, r6, r2
   44704:	cmp	r3, r0
   44708:	bcc	446a0 <__assert_fail@plt+0x31c24>
   4470c:	b	4481c <__assert_fail@plt+0x31da0>
   44710:	mvn	r1, #0
   44714:	mov	r0, #0
   44718:	mov	r2, #1
   4471c:	mov	ip, #1
   44720:	mov	r3, #1
   44724:	add	r6, r1, r3
   44728:	ldrb	r7, [r5, r2]
   4472c:	ldrb	r6, [r5, r6]
   44730:	cmp	r7, r6
   44734:	bcs	44748 <__assert_fail@plt+0x31ccc>
   44738:	sub	ip, r2, r1
   4473c:	mov	r3, #1
   44740:	mov	r0, r2
   44744:	b	4477c <__assert_fail@plt+0x31d00>
   44748:	bne	44760 <__assert_fail@plt+0x31ce4>
   4474c:	cmp	r3, ip
   44750:	bne	44778 <__assert_fail@plt+0x31cfc>
   44754:	add	r0, r0, ip
   44758:	mov	r3, #1
   4475c:	b	4477c <__assert_fail@plt+0x31d00>
   44760:	add	r2, r0, #1
   44764:	mov	r1, r0
   44768:	mov	r3, #1
   4476c:	mov	ip, #1
   44770:	mov	r0, r2
   44774:	b	4477c <__assert_fail@plt+0x31d00>
   44778:	add	r3, r3, #1
   4477c:	add	r2, r3, r0
   44780:	cmp	r2, r4
   44784:	bcc	44724 <__assert_fail@plt+0x31ca8>
   44788:	cmp	r4, #2
   4478c:	bcc	44d08 <__assert_fail@plt+0x3228c>
   44790:	mvn	lr, #0
   44794:	mov	r2, #0
   44798:	mov	r3, #1
   4479c:	mov	r4, #1
   447a0:	mov	r6, #1
   447a4:	add	r7, lr, r6
   447a8:	ldrb	r0, [r5, r3]
   447ac:	ldrb	r7, [r5, r7]
   447b0:	cmp	r7, r0
   447b4:	bcs	447c8 <__assert_fail@plt+0x31d4c>
   447b8:	sub	r4, r3, lr
   447bc:	mov	r6, #1
   447c0:	mov	r2, r3
   447c4:	b	44800 <__assert_fail@plt+0x31d84>
   447c8:	cmp	r0, r7
   447cc:	bne	447e4 <__assert_fail@plt+0x31d68>
   447d0:	cmp	r6, r4
   447d4:	bne	447fc <__assert_fail@plt+0x31d80>
   447d8:	add	r2, r2, r4
   447dc:	mov	r6, #1
   447e0:	b	44800 <__assert_fail@plt+0x31d84>
   447e4:	add	r0, r2, #1
   447e8:	mov	lr, r2
   447ec:	mov	r6, #1
   447f0:	mov	r4, #1
   447f4:	mov	r2, r0
   447f8:	b	44800 <__assert_fail@plt+0x31d84>
   447fc:	add	r6, r6, #1
   44800:	ldr	r0, [sp, #28]
   44804:	add	r3, r6, r2
   44808:	cmp	r3, r0
   4480c:	bcc	447a4 <__assert_fail@plt+0x31d28>
   44810:	b	44d10 <__assert_fail@plt+0x32294>
   44814:	mov	sl, #1
   44818:	mvn	lr, #0
   4481c:	ldr	r2, [sp, #28]
   44820:	add	r6, sp, #32
   44824:	add	r0, r6, #16
   44828:	mov	r3, r6
   4482c:	vdup.32	q8, r2
   44830:	vst1.32	{d16-d17}, [r0]
   44834:	add	r0, r6, #32
   44838:	vst1.32	{d16-d17}, [r0]
   4483c:	add	r0, r6, #48	; 0x30
   44840:	vst1.32	{d16-d17}, [r0]
   44844:	add	r0, r6, #64	; 0x40
   44848:	vst1.32	{d16-d17}, [r0]
   4484c:	add	r0, r6, #80	; 0x50
   44850:	vst1.32	{d16-d17}, [r0]
   44854:	add	r0, r6, #96	; 0x60
   44858:	vst1.32	{d16-d17}, [r0]
   4485c:	add	r0, r6, #112	; 0x70
   44860:	vst1.32	{d16-d17}, [r0]
   44864:	add	r0, r6, #128	; 0x80
   44868:	vst1.32	{d16-d17}, [r0]
   4486c:	add	r0, r6, #144	; 0x90
   44870:	vst1.32	{d16-d17}, [r0]
   44874:	add	r0, r6, #160	; 0xa0
   44878:	vst1.32	{d16-d17}, [r0]
   4487c:	add	r0, r6, #176	; 0xb0
   44880:	vst1.32	{d16-d17}, [r0]
   44884:	add	r0, r6, #192	; 0xc0
   44888:	vst1.32	{d16-d17}, [r0]
   4488c:	add	r0, r6, #208	; 0xd0
   44890:	vst1.32	{d16-d17}, [r0]
   44894:	add	r0, r6, #224	; 0xe0
   44898:	vst1.32	{d16-d17}, [r0]
   4489c:	add	r0, r6, #240	; 0xf0
   448a0:	vst1.32	{d16-d17}, [r0]
   448a4:	add	r0, r6, #256	; 0x100
   448a8:	vst1.32	{d16-d17}, [r0]
   448ac:	add	r0, r6, #272	; 0x110
   448b0:	vst1.32	{d16-d17}, [r0]
   448b4:	add	r0, r6, #288	; 0x120
   448b8:	vst1.32	{d16-d17}, [r0]
   448bc:	mov	r0, #1008	; 0x3f0
   448c0:	vst1.32	{d16-d17}, [r3], r0
   448c4:	add	r0, r6, #320	; 0x140
   448c8:	vst1.32	{d16-d17}, [r0]
   448cc:	add	r0, r6, #304	; 0x130
   448d0:	vst1.32	{d16-d17}, [r0]
   448d4:	add	r0, r6, #336	; 0x150
   448d8:	vst1.32	{d16-d17}, [r0]
   448dc:	add	r0, r6, #352	; 0x160
   448e0:	vst1.32	{d16-d17}, [r0]
   448e4:	add	r0, r6, #368	; 0x170
   448e8:	vst1.32	{d16-d17}, [r0]
   448ec:	add	r0, r6, #384	; 0x180
   448f0:	vst1.32	{d16-d17}, [r0]
   448f4:	add	r0, r6, #400	; 0x190
   448f8:	vst1.32	{d16-d17}, [r0]
   448fc:	add	r0, r6, #416	; 0x1a0
   44900:	vst1.32	{d16-d17}, [r0]
   44904:	add	r0, r6, #432	; 0x1b0
   44908:	vst1.32	{d16-d17}, [r0]
   4490c:	add	r0, r6, #448	; 0x1c0
   44910:	vst1.32	{d16-d17}, [r0]
   44914:	add	r0, r6, #464	; 0x1d0
   44918:	vst1.32	{d16-d17}, [r0]
   4491c:	add	r0, r6, #480	; 0x1e0
   44920:	vst1.32	{d16-d17}, [r0]
   44924:	add	r0, r6, #496	; 0x1f0
   44928:	vst1.32	{d16-d17}, [r0]
   4492c:	add	r0, r6, #512	; 0x200
   44930:	vst1.32	{d16-d17}, [r0]
   44934:	add	r0, r6, #528	; 0x210
   44938:	vst1.32	{d16-d17}, [r0]
   4493c:	add	r0, r6, #544	; 0x220
   44940:	vst1.32	{d16-d17}, [r0]
   44944:	add	r0, r6, #560	; 0x230
   44948:	vst1.32	{d16-d17}, [r0]
   4494c:	add	r0, r6, #576	; 0x240
   44950:	vst1.32	{d16-d17}, [r0]
   44954:	add	r0, r6, #592	; 0x250
   44958:	vst1.32	{d16-d17}, [r0]
   4495c:	add	r0, r6, #624	; 0x270
   44960:	vst1.32	{d16-d17}, [r0]
   44964:	add	r0, r6, #608	; 0x260
   44968:	vst1.32	{d16-d17}, [r0]
   4496c:	add	r0, r6, #640	; 0x280
   44970:	vst1.32	{d16-d17}, [r0]
   44974:	add	r0, r6, #656	; 0x290
   44978:	vst1.32	{d16-d17}, [r0]
   4497c:	add	r0, r6, #672	; 0x2a0
   44980:	vst1.32	{d16-d17}, [r0]
   44984:	add	r0, r6, #688	; 0x2b0
   44988:	vst1.32	{d16-d17}, [r0]
   4498c:	add	r0, r6, #704	; 0x2c0
   44990:	vst1.32	{d16-d17}, [r0]
   44994:	add	r0, r6, #720	; 0x2d0
   44998:	vst1.32	{d16-d17}, [r0]
   4499c:	add	r0, r6, #736	; 0x2e0
   449a0:	vst1.32	{d16-d17}, [r0]
   449a4:	add	r0, r6, #752	; 0x2f0
   449a8:	vst1.32	{d16-d17}, [r0]
   449ac:	add	r0, r6, #768	; 0x300
   449b0:	vst1.32	{d16-d17}, [r0]
   449b4:	add	r0, r6, #784	; 0x310
   449b8:	vst1.32	{d16-d17}, [r0]
   449bc:	add	r0, r6, #800	; 0x320
   449c0:	vst1.32	{d16-d17}, [r0]
   449c4:	add	r0, r6, #816	; 0x330
   449c8:	vst1.32	{d16-d17}, [r0]
   449cc:	add	r0, r6, #832	; 0x340
   449d0:	vst1.32	{d16-d17}, [r0]
   449d4:	add	r0, r6, #848	; 0x350
   449d8:	vst1.32	{d16-d17}, [r0]
   449dc:	add	r0, r6, #864	; 0x360
   449e0:	vst1.32	{d16-d17}, [r0]
   449e4:	add	r0, r6, #880	; 0x370
   449e8:	vst1.32	{d16-d17}, [r0]
   449ec:	add	r0, r6, #896	; 0x380
   449f0:	vst1.32	{d16-d17}, [r0]
   449f4:	add	r0, r6, #928	; 0x3a0
   449f8:	vst1.32	{d16-d17}, [r0]
   449fc:	add	r0, r6, #912	; 0x390
   44a00:	vst1.32	{d16-d17}, [r0]
   44a04:	add	r0, r6, #944	; 0x3b0
   44a08:	vst1.32	{d16-d17}, [r0]
   44a0c:	add	r0, r6, #960	; 0x3c0
   44a10:	vst1.32	{d16-d17}, [r0]
   44a14:	add	r0, r6, #976	; 0x3d0
   44a18:	vst1.32	{d16-d17}, [r0]
   44a1c:	add	r0, r6, #992	; 0x3e0
   44a20:	vst1.32	{d16-d17}, [r0]
   44a24:	vst1.32	{d16-d17}, [r3]
   44a28:	add	r0, r1, #1
   44a2c:	add	r3, lr, #1
   44a30:	cmp	r3, r0
   44a34:	movcc	sl, ip
   44a38:	movcc	r3, r0
   44a3c:	cmp	r2, #0
   44a40:	beq	44a58 <__assert_fail@plt+0x31fdc>
   44a44:	mov	r0, r2
   44a48:	ldrb	r1, [r8, -r0]
   44a4c:	subs	r0, r0, #1
   44a50:	str	r0, [r6, r1, lsl #2]
   44a54:	bne	44a48 <__assert_fail@plt+0x31fcc>
   44a58:	add	r1, r5, sl
   44a5c:	mov	r0, r5
   44a60:	mov	r2, r3
   44a64:	mov	r4, r3
   44a68:	bl	12518 <memcmp@plt>
   44a6c:	cmp	r0, #0
   44a70:	str	r4, [sp, #20]
   44a74:	beq	44b9c <__assert_fail@plt+0x32120>
   44a78:	ldr	r0, [sp, #24]
   44a7c:	ldr	r8, [sp, #28]
   44a80:	mov	r1, #0
   44a84:	mov	r7, #0
   44a88:	add	r0, r0, r9
   44a8c:	sub	r2, r8, r9
   44a90:	bl	12860 <memchr@plt>
   44a94:	sub	r1, r8, r4
   44a98:	cmp	r4, r1
   44a9c:	movcs	r1, r4
   44aa0:	cmp	r8, #0
   44aa4:	str	r1, [sp, #16]
   44aa8:	beq	445f8 <__assert_fail@plt+0x31b7c>
   44aac:	mov	r1, r4
   44ab0:	ldr	r4, [sp, #24]
   44ab4:	cmp	r0, #0
   44ab8:	bne	445f8 <__assert_fail@plt+0x31b7c>
   44abc:	mov	ip, r8
   44ac0:	add	r0, r4, r1
   44ac4:	sub	sl, r8, #1
   44ac8:	add	r9, r5, r1
   44acc:	mov	r8, #0
   44ad0:	str	r0, [sp, #8]
   44ad4:	rsb	r0, r1, #1
   44ad8:	mov	lr, ip
   44adc:	str	r0, [sp, #12]
   44ae0:	add	r0, r4, lr
   44ae4:	ldrb	r2, [r0, #-1]
   44ae8:	ldr	r2, [r6, r2, lsl #2]
   44aec:	cmp	r2, #0
   44af0:	beq	44afc <__assert_fail@plt+0x32080>
   44af4:	add	r8, r2, r8
   44af8:	b	44b60 <__assert_fail@plt+0x320e4>
   44afc:	cmp	r1, sl
   44b00:	bcs	44b30 <__assert_fail@plt+0x320b4>
   44b04:	ldr	r2, [sp, #8]
   44b08:	add	r3, r2, r8
   44b0c:	mov	r2, #0
   44b10:	ldrb	r7, [r3, r2]
   44b14:	ldrb	r6, [r9, r2]
   44b18:	cmp	r6, r7
   44b1c:	bne	44b58 <__assert_fail@plt+0x320dc>
   44b20:	add	r2, r2, #1
   44b24:	add	r7, r1, r2
   44b28:	cmp	r7, sl
   44b2c:	bcc	44b10 <__assert_fail@plt+0x32094>
   44b30:	ldr	r2, [sp, #12]
   44b34:	add	r7, r4, r8
   44b38:	cmp	r2, #1
   44b3c:	beq	445f8 <__assert_fail@plt+0x31b7c>
   44b40:	ldrb	r3, [r7, -r2]
   44b44:	ldrb	r6, [r5, -r2]
   44b48:	add	r2, r2, #1
   44b4c:	cmp	r6, r3
   44b50:	beq	44b38 <__assert_fail@plt+0x320bc>
   44b54:	ldr	r2, [sp, #16]
   44b58:	add	r2, r8, r2
   44b5c:	add	r8, r2, #1
   44b60:	add	r6, r8, ip
   44b64:	mov	r1, #0
   44b68:	mov	r7, #0
   44b6c:	sub	r2, r6, lr
   44b70:	bl	12860 <memchr@plt>
   44b74:	cmp	r6, #0
   44b78:	beq	445f8 <__assert_fail@plt+0x31b7c>
   44b7c:	ldr	r4, [sp, #24]
   44b80:	ldr	ip, [sp, #28]
   44b84:	ldr	r1, [sp, #20]
   44b88:	mov	lr, r6
   44b8c:	cmp	r0, #0
   44b90:	add	r6, sp, #32
   44b94:	beq	44ae0 <__assert_fail@plt+0x32064>
   44b98:	b	445f8 <__assert_fail@plt+0x31b7c>
   44b9c:	ldr	r0, [sp, #24]
   44ba0:	ldr	r8, [sp, #28]
   44ba4:	mov	r1, #0
   44ba8:	mov	r7, #0
   44bac:	add	r0, r0, r9
   44bb0:	sub	r2, r8, r9
   44bb4:	bl	12860 <memchr@plt>
   44bb8:	cmp	r8, #0
   44bbc:	beq	445f8 <__assert_fail@plt+0x31b7c>
   44bc0:	ldr	r4, [sp, #24]
   44bc4:	ldr	r1, [sp, #20]
   44bc8:	cmp	r0, #0
   44bcc:	str	sl, [sp, #16]
   44bd0:	bne	445f8 <__assert_fail@plt+0x31b7c>
   44bd4:	ldr	r0, [sp, #16]
   44bd8:	mov	ip, r8
   44bdc:	mov	sl, #0
   44be0:	mov	lr, r8
   44be4:	mov	r9, #0
   44be8:	sub	r0, r8, r0
   44bec:	str	r0, [sp, #12]
   44bf0:	sub	r0, r1, #1
   44bf4:	str	r0, [sp, #4]
   44bf8:	rsb	r0, r1, #0
   44bfc:	str	r0, [sp]
   44c00:	sub	r0, r8, #1
   44c04:	str	r0, [sp, #8]
   44c08:	add	r0, r4, lr
   44c0c:	ldrb	r2, [r0, #-1]
   44c10:	ldr	r3, [r6, r2, lsl #2]
   44c14:	cmp	r3, #0
   44c18:	beq	44c40 <__assert_fail@plt+0x321c4>
   44c1c:	ldr	r2, [sp, #16]
   44c20:	ldr	r1, [sp, #12]
   44c24:	cmp	r3, r2
   44c28:	mov	r2, r3
   44c2c:	movcc	r2, r1
   44c30:	cmp	sl, #0
   44c34:	moveq	r2, r3
   44c38:	mov	sl, #0
   44c3c:	b	44cb4 <__assert_fail@plt+0x32238>
   44c40:	cmp	r1, sl
   44c44:	mov	r2, r1
   44c48:	ldr	r1, [sp, #8]
   44c4c:	movcc	r2, sl
   44c50:	cmp	r2, r1
   44c54:	bcs	44c78 <__assert_fail@plt+0x321fc>
   44c58:	add	r3, r4, r9
   44c5c:	ldrb	r7, [r3, r2]
   44c60:	ldrb	r6, [r5, r2]
   44c64:	cmp	r6, r7
   44c68:	bne	44cf8 <__assert_fail@plt+0x3227c>
   44c6c:	add	r2, r2, #1
   44c70:	cmp	r2, r1
   44c74:	bcc	44c5c <__assert_fail@plt+0x321e0>
   44c78:	ldr	r2, [sp, #4]
   44c7c:	add	r7, r4, r9
   44c80:	add	r3, r2, #1
   44c84:	cmp	sl, r3
   44c88:	bcs	44ca0 <__assert_fail@plt+0x32224>
   44c8c:	ldrb	r6, [r7, r2]
   44c90:	ldrb	r4, [r5, r2]
   44c94:	sub	r2, r2, #1
   44c98:	cmp	r4, r6
   44c9c:	beq	44c80 <__assert_fail@plt+0x32204>
   44ca0:	add	r2, sl, #1
   44ca4:	ldr	sl, [sp, #12]
   44ca8:	cmp	r3, r2
   44cac:	ldr	r2, [sp, #16]
   44cb0:	bcc	445f8 <__assert_fail@plt+0x31b7c>
   44cb4:	add	r9, r2, r9
   44cb8:	mov	r1, #0
   44cbc:	mov	r8, ip
   44cc0:	mov	r7, #0
   44cc4:	add	r6, r9, ip
   44cc8:	sub	r2, r6, lr
   44ccc:	bl	12860 <memchr@plt>
   44cd0:	cmp	r6, #0
   44cd4:	beq	445f8 <__assert_fail@plt+0x31b7c>
   44cd8:	ldr	r4, [sp, #24]
   44cdc:	ldr	r1, [sp, #20]
   44ce0:	mov	lr, r6
   44ce4:	cmp	r0, #0
   44ce8:	mov	ip, r8
   44cec:	add	r6, sp, #32
   44cf0:	beq	44c08 <__assert_fail@plt+0x3218c>
   44cf4:	b	445f8 <__assert_fail@plt+0x31b7c>
   44cf8:	ldr	r1, [sp]
   44cfc:	add	r2, r1, r2
   44d00:	add	r2, r2, #1
   44d04:	b	44c38 <__assert_fail@plt+0x321bc>
   44d08:	mov	r4, #1
   44d0c:	mvn	lr, #0
   44d10:	add	r0, r1, #1
   44d14:	add	r6, lr, #1
   44d18:	cmp	r6, r0
   44d1c:	movcc	r4, ip
   44d20:	movcc	r6, r0
   44d24:	add	r1, r5, r4
   44d28:	mov	r0, r5
   44d2c:	mov	r2, r6
   44d30:	bl	12518 <memcmp@plt>
   44d34:	cmp	r0, #0
   44d38:	str	r6, [sp, #20]
   44d3c:	beq	44e40 <__assert_fail@plt+0x323c4>
   44d40:	ldr	r0, [sp, #24]
   44d44:	ldr	r4, [sp, #28]
   44d48:	mov	r1, #0
   44d4c:	mov	r7, #0
   44d50:	add	r0, r0, r9
   44d54:	sub	r2, r4, r9
   44d58:	bl	12860 <memchr@plt>
   44d5c:	sub	r2, r4, r6
   44d60:	cmp	r6, r2
   44d64:	movcs	r2, r6
   44d68:	cmp	r4, #0
   44d6c:	str	r2, [sp, #16]
   44d70:	beq	445f8 <__assert_fail@plt+0x31b7c>
   44d74:	mov	r1, r4
   44d78:	ldr	r4, [sp, #24]
   44d7c:	cmp	r0, #0
   44d80:	bne	445f8 <__assert_fail@plt+0x31b7c>
   44d84:	add	r0, r4, r6
   44d88:	add	r9, r5, r6
   44d8c:	mov	sl, #0
   44d90:	mov	ip, r1
   44d94:	str	r0, [sp, #8]
   44d98:	rsb	r0, r6, #1
   44d9c:	str	r0, [sp, #12]
   44da0:	cmp	r1, r6
   44da4:	bls	44dd4 <__assert_fail@plt+0x32358>
   44da8:	ldr	r0, [sp, #8]
   44dac:	mov	r2, #0
   44db0:	add	r0, r0, sl
   44db4:	ldrb	r3, [r0, r2]
   44db8:	ldrb	r7, [r9, r2]
   44dbc:	cmp	r7, r3
   44dc0:	bne	44dfc <__assert_fail@plt+0x32380>
   44dc4:	add	r2, r2, #1
   44dc8:	add	r3, r6, r2
   44dcc:	cmp	r3, r1
   44dd0:	bcc	44db4 <__assert_fail@plt+0x32338>
   44dd4:	ldr	r0, [sp, #12]
   44dd8:	add	r7, r4, sl
   44ddc:	cmp	r0, #1
   44de0:	beq	445f8 <__assert_fail@plt+0x31b7c>
   44de4:	ldrb	r2, [r7, -r0]
   44de8:	ldrb	r3, [r5, -r0]
   44dec:	add	r0, r0, #1
   44df0:	cmp	r3, r2
   44df4:	beq	44ddc <__assert_fail@plt+0x32360>
   44df8:	ldr	r2, [sp, #16]
   44dfc:	add	r2, sl, r2
   44e00:	add	r0, r4, ip
   44e04:	mov	r7, #0
   44e08:	add	sl, r2, #1
   44e0c:	add	r8, sl, r1
   44e10:	mov	r1, #0
   44e14:	sub	r2, r8, ip
   44e18:	bl	12860 <memchr@plt>
   44e1c:	cmp	r0, #0
   44e20:	bne	445f8 <__assert_fail@plt+0x31b7c>
   44e24:	ldr	r4, [sp, #24]
   44e28:	ldr	r1, [sp, #28]
   44e2c:	ldr	r6, [sp, #20]
   44e30:	cmp	r8, #0
   44e34:	mov	ip, r8
   44e38:	bne	44da0 <__assert_fail@plt+0x32324>
   44e3c:	b	445f8 <__assert_fail@plt+0x31b7c>
   44e40:	ldr	r0, [sp, #24]
   44e44:	ldr	r8, [sp, #28]
   44e48:	mov	r1, #0
   44e4c:	mov	r7, #0
   44e50:	add	r0, r0, r9
   44e54:	sub	r2, r8, r9
   44e58:	bl	12860 <memchr@plt>
   44e5c:	cmp	r8, #0
   44e60:	beq	445f8 <__assert_fail@plt+0x31b7c>
   44e64:	str	r4, [sp, #16]
   44e68:	ldr	r4, [sp, #24]
   44e6c:	cmp	r0, #0
   44e70:	bne	445f8 <__assert_fail@plt+0x31b7c>
   44e74:	ldr	r0, [sp, #16]
   44e78:	mov	r1, r8
   44e7c:	mov	sl, #0
   44e80:	mov	ip, r8
   44e84:	mov	r9, #0
   44e88:	sub	r0, r8, r0
   44e8c:	str	r0, [sp, #12]
   44e90:	sub	r0, r6, #1
   44e94:	str	r0, [sp, #8]
   44e98:	rsb	r0, r6, #0
   44e9c:	str	r0, [sp, #4]
   44ea0:	cmp	r6, sl
   44ea4:	movcc	r6, sl
   44ea8:	cmp	r6, r1
   44eac:	bcs	44ed0 <__assert_fail@plt+0x32454>
   44eb0:	add	r2, r4, r9
   44eb4:	ldrb	r3, [r2, r6]
   44eb8:	ldrb	r7, [r5, r6]
   44ebc:	cmp	r7, r3
   44ec0:	bne	44f10 <__assert_fail@plt+0x32494>
   44ec4:	add	r6, r6, #1
   44ec8:	cmp	r6, r1
   44ecc:	bcc	44eb4 <__assert_fail@plt+0x32438>
   44ed0:	ldr	r0, [sp, #8]
   44ed4:	add	r7, r4, r9
   44ed8:	add	r2, r0, #1
   44edc:	cmp	sl, r2
   44ee0:	bcs	44ef8 <__assert_fail@plt+0x3247c>
   44ee4:	ldrb	r3, [r7, r0]
   44ee8:	ldrb	r6, [r5, r0]
   44eec:	sub	r0, r0, #1
   44ef0:	cmp	r6, r3
   44ef4:	beq	44ed8 <__assert_fail@plt+0x3245c>
   44ef8:	add	r0, sl, #1
   44efc:	ldr	sl, [sp, #12]
   44f00:	cmp	r2, r0
   44f04:	ldr	r2, [sp, #16]
   44f08:	bcs	44f20 <__assert_fail@plt+0x324a4>
   44f0c:	b	445f8 <__assert_fail@plt+0x31b7c>
   44f10:	ldr	r2, [sp, #4]
   44f14:	mov	sl, #0
   44f18:	add	r0, r2, r6
   44f1c:	add	r2, r0, #1
   44f20:	add	r9, r2, r9
   44f24:	add	r0, r4, ip
   44f28:	mov	r7, #0
   44f2c:	add	r8, r9, r1
   44f30:	mov	r1, #0
   44f34:	sub	r2, r8, ip
   44f38:	bl	12860 <memchr@plt>
   44f3c:	cmp	r8, #0
   44f40:	beq	445f8 <__assert_fail@plt+0x31b7c>
   44f44:	ldr	r4, [sp, #24]
   44f48:	ldr	r1, [sp, #28]
   44f4c:	ldr	r6, [sp, #20]
   44f50:	cmp	r0, #0
   44f54:	mov	ip, r8
   44f58:	beq	44ea0 <__assert_fail@plt+0x32424>
   44f5c:	b	445f8 <__assert_fail@plt+0x31b7c>
   44f60:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   44f64:	add	fp, sp, #24
   44f68:	mov	r4, r0
   44f6c:	cmp	r0, #0
   44f70:	beq	44f94 <__assert_fail@plt+0x32518>
   44f74:	mov	r0, r4
   44f78:	bl	12788 <strlen@plt>
   44f7c:	add	r5, r0, #1
   44f80:	cmp	r5, #58	; 0x3a
   44f84:	bls	44f98 <__assert_fail@plt+0x3251c>
   44f88:	add	r0, r0, #10
   44f8c:	bic	r0, r0, #3
   44f90:	b	44f9c <__assert_fail@plt+0x32520>
   44f94:	mov	r5, #0
   44f98:	mov	r0, #64	; 0x40
   44f9c:	bl	3233c <__assert_fail@plt+0x1f8c0>
   44fa0:	mov	r6, r0
   44fa4:	cmp	r0, #0
   44fa8:	beq	44fe4 <__assert_fail@plt+0x32568>
   44fac:	cmp	r4, #0
   44fb0:	mov	r0, r4
   44fb4:	mov	r8, #0
   44fb8:	mov	r7, r6
   44fbc:	movwne	r0, #1
   44fc0:	str	r8, [r6]
   44fc4:	strb	r0, [r6, #4]
   44fc8:	strb	r8, [r7, #5]!
   44fcc:	beq	44fe4 <__assert_fail@plt+0x32568>
   44fd0:	mov	r0, r7
   44fd4:	mov	r1, r4
   44fd8:	mov	r2, r5
   44fdc:	bl	124b8 <memcpy@plt>
   44fe0:	strb	r8, [r7, r5]
   44fe4:	mov	r0, r6
   44fe8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   44fec:	push	{r4, sl, fp, lr}
   44ff0:	add	fp, sp, #8
   44ff4:	cmp	r0, #2
   44ff8:	popcc	{r4, sl, fp, pc}
   44ffc:	ldr	r4, [r0]
   45000:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   45004:	cmp	r4, #0
   45008:	mov	r0, r4
   4500c:	bne	44ffc <__assert_fail@plt+0x32580>
   45010:	pop	{r4, sl, fp, pc}
   45014:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45018:	add	fp, sp, #28
   4501c:	sub	sp, sp, #4
   45020:	mov	sl, r2
   45024:	mov	r7, r1
   45028:	cmp	r0, #0
   4502c:	beq	450fc <__assert_fail@plt+0x32680>
   45030:	mov	r6, r0
   45034:	bl	45138 <__assert_fail@plt+0x326bc>
   45038:	cmp	r0, #0
   4503c:	moveq	r0, #0
   45040:	subeq	sp, fp, #28
   45044:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45048:	mov	r4, r0
   4504c:	mov	r0, r7
   45050:	mov	r1, sl
   45054:	bl	12584 <localtime_r@plt>
   45058:	mov	r7, #1
   4505c:	cmp	r0, #0
   45060:	mov	r9, #1
   45064:	beq	45078 <__assert_fail@plt+0x325fc>
   45068:	mov	r0, r6
   4506c:	mov	r1, sl
   45070:	bl	45284 <__assert_fail@plt+0x32808>
   45074:	eor	r9, r0, #1
   45078:	cmp	r4, #1
   4507c:	beq	450e0 <__assert_fail@plt+0x32664>
   45080:	bl	127d0 <__errno_location@plt>
   45084:	mov	r6, r0
   45088:	ldr	r8, [r0]
   4508c:	ldrb	r0, [r4, #4]
   45090:	cmp	r0, #0
   45094:	beq	45110 <__assert_fail@plt+0x32694>
   45098:	movw	r0, #49217	; 0xc041
   4509c:	add	r1, r4, #5
   450a0:	mov	r2, #1
   450a4:	movt	r0, #4
   450a8:	bl	127a0 <setenv@plt>
   450ac:	cmp	r0, #0
   450b0:	beq	45124 <__assert_fail@plt+0x326a8>
   450b4:	ldr	r8, [r6]
   450b8:	mov	r7, #0
   450bc:	cmp	r4, #2
   450c0:	bcc	450dc <__assert_fail@plt+0x32660>
   450c4:	ldr	r5, [r4]
   450c8:	mov	r0, r4
   450cc:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   450d0:	cmp	r5, #0
   450d4:	mov	r4, r5
   450d8:	bne	450c4 <__assert_fail@plt+0x32648>
   450dc:	str	r8, [r6]
   450e0:	cmp	r7, #0
   450e4:	moveq	sl, r7
   450e8:	cmp	r9, #0
   450ec:	movwne	sl, #0
   450f0:	mov	r0, sl
   450f4:	sub	sp, fp, #28
   450f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   450fc:	mov	r0, r7
   45100:	mov	r1, sl
   45104:	sub	sp, fp, #28
   45108:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4510c:	b	12398 <gmtime_r@plt>
   45110:	movw	r0, #49217	; 0xc041
   45114:	movt	r0, #4
   45118:	bl	129f8 <unsetenv@plt>
   4511c:	cmp	r0, #0
   45120:	bne	450b4 <__assert_fail@plt+0x32638>
   45124:	bl	125cc <tzset@plt>
   45128:	mov	r7, #1
   4512c:	cmp	r4, #2
   45130:	bcs	450c4 <__assert_fail@plt+0x32648>
   45134:	b	450dc <__assert_fail@plt+0x32660>
   45138:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4513c:	add	fp, sp, #28
   45140:	sub	sp, sp, #4
   45144:	mov	r4, r0
   45148:	movw	r0, #49217	; 0xc041
   4514c:	movt	r0, #4
   45150:	bl	126b0 <getenv@plt>
   45154:	mov	r6, r0
   45158:	ldrb	r0, [r4, #4]
   4515c:	cmp	r6, #0
   45160:	beq	451a4 <__assert_fail@plt+0x32728>
   45164:	cmp	r0, #0
   45168:	beq	45180 <__assert_fail@plt+0x32704>
   4516c:	add	r0, r4, #5
   45170:	mov	r1, r6
   45174:	bl	123d4 <strcmp@plt>
   45178:	cmp	r0, #0
   4517c:	beq	45258 <__assert_fail@plt+0x327dc>
   45180:	mov	r0, r6
   45184:	bl	12788 <strlen@plt>
   45188:	add	r8, r0, #1
   4518c:	mov	r9, #1
   45190:	cmp	r8, #58	; 0x3a
   45194:	bls	451b4 <__assert_fail@plt+0x32738>
   45198:	add	r0, r0, #10
   4519c:	bic	r0, r0, #3
   451a0:	b	451b8 <__assert_fail@plt+0x3273c>
   451a4:	mov	r9, #0
   451a8:	cmp	r0, #0
   451ac:	mov	r8, #0
   451b0:	beq	45258 <__assert_fail@plt+0x327dc>
   451b4:	mov	r0, #64	; 0x40
   451b8:	bl	3233c <__assert_fail@plt+0x1f8c0>
   451bc:	cmp	r0, #0
   451c0:	beq	45250 <__assert_fail@plt+0x327d4>
   451c4:	mov	sl, #0
   451c8:	mov	r7, r0
   451cc:	strb	r9, [r0, #4]
   451d0:	mov	r5, r0
   451d4:	cmp	r9, #0
   451d8:	str	sl, [r0]
   451dc:	strb	sl, [r7, #5]!
   451e0:	beq	451f8 <__assert_fail@plt+0x3277c>
   451e4:	mov	r0, r7
   451e8:	mov	r1, r6
   451ec:	mov	r2, r8
   451f0:	bl	124b8 <memcpy@plt>
   451f4:	strb	sl, [r7, r8]
   451f8:	ldrb	r0, [r4, #4]
   451fc:	cmp	r0, #0
   45200:	beq	45260 <__assert_fail@plt+0x327e4>
   45204:	movw	r0, #49217	; 0xc041
   45208:	add	r1, r4, #5
   4520c:	mov	r2, #1
   45210:	movt	r0, #4
   45214:	bl	127a0 <setenv@plt>
   45218:	cmp	r0, #0
   4521c:	beq	45274 <__assert_fail@plt+0x327f8>
   45220:	bl	127d0 <__errno_location@plt>
   45224:	ldr	r6, [r0]
   45228:	mov	r4, r0
   4522c:	cmp	r5, #2
   45230:	bcc	4524c <__assert_fail@plt+0x327d0>
   45234:	ldr	r7, [r5]
   45238:	mov	r0, r5
   4523c:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   45240:	cmp	r7, #0
   45244:	mov	r5, r7
   45248:	bne	45234 <__assert_fail@plt+0x327b8>
   4524c:	str	r6, [r4]
   45250:	mov	r5, #0
   45254:	b	45278 <__assert_fail@plt+0x327fc>
   45258:	mov	r5, #1
   4525c:	b	45278 <__assert_fail@plt+0x327fc>
   45260:	movw	r0, #49217	; 0xc041
   45264:	movt	r0, #4
   45268:	bl	129f8 <unsetenv@plt>
   4526c:	cmp	r0, #0
   45270:	bne	45220 <__assert_fail@plt+0x327a4>
   45274:	bl	125cc <tzset@plt>
   45278:	mov	r0, r5
   4527c:	sub	sp, fp, #28
   45280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45284:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45288:	add	fp, sp, #28
   4528c:	sub	sp, sp, #4
   45290:	ldr	r7, [r1, #40]	; 0x28
   45294:	mov	r8, #1
   45298:	cmp	r7, #0
   4529c:	beq	45340 <__assert_fail@plt+0x328c4>
   452a0:	mov	r5, r1
   452a4:	mov	r6, r0
   452a8:	cmp	r7, r1
   452ac:	bcc	452bc <__assert_fail@plt+0x32840>
   452b0:	add	r0, r5, #44	; 0x2c
   452b4:	cmp	r7, r0
   452b8:	bcc	45340 <__assert_fail@plt+0x328c4>
   452bc:	ldrb	r0, [r7]
   452c0:	cmp	r0, #0
   452c4:	beq	45334 <__assert_fail@plt+0x328b8>
   452c8:	add	r4, r6, #5
   452cc:	b	452e0 <__assert_fail@plt+0x32864>
   452d0:	ldr	r0, [r6]
   452d4:	cmp	r0, #0
   452d8:	addne	r4, r0, #5
   452dc:	movne	r6, r0
   452e0:	mov	r0, r4
   452e4:	mov	r1, r7
   452e8:	bl	123d4 <strcmp@plt>
   452ec:	cmp	r0, #0
   452f0:	beq	4533c <__assert_fail@plt+0x328c0>
   452f4:	ldrb	r0, [r4]
   452f8:	cmp	r0, #0
   452fc:	bne	45318 <__assert_fail@plt+0x3289c>
   45300:	add	r0, r6, #5
   45304:	cmp	r4, r0
   45308:	bne	4534c <__assert_fail@plt+0x328d0>
   4530c:	ldrb	r0, [r6, #4]
   45310:	cmp	r0, #0
   45314:	beq	4534c <__assert_fail@plt+0x328d0>
   45318:	mov	r0, r4
   4531c:	bl	12788 <strlen@plt>
   45320:	add	r4, r4, r0
   45324:	ldrb	r0, [r4, #1]!
   45328:	cmp	r0, #0
   4532c:	bne	452e0 <__assert_fail@plt+0x32864>
   45330:	b	452d0 <__assert_fail@plt+0x32854>
   45334:	movw	r4, #34847	; 0x881f
   45338:	movt	r4, #4
   4533c:	str	r4, [r5, #40]	; 0x28
   45340:	mov	r0, r8
   45344:	sub	sp, fp, #28
   45348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4534c:	add	r0, r6, #64	; 0x40
   45350:	sub	sl, r0, r4
   45354:	mov	r0, r7
   45358:	bl	12788 <strlen@plt>
   4535c:	add	r9, r0, #1
   45360:	cmp	r9, sl
   45364:	bge	45384 <__assert_fail@plt+0x32908>
   45368:	mov	r0, r4
   4536c:	mov	r1, r7
   45370:	mov	r2, r9
   45374:	bl	124b8 <memcpy@plt>
   45378:	mov	r0, #0
   4537c:	strb	r0, [r4, r9]
   45380:	b	4533c <__assert_fail@plt+0x328c0>
   45384:	add	r0, r0, #10
   45388:	cmp	r9, #59	; 0x3b
   4538c:	bic	r0, r0, #3
   45390:	movwcc	r0, #64	; 0x40
   45394:	bl	3233c <__assert_fail@plt+0x1f8c0>
   45398:	cmp	r0, #0
   4539c:	beq	453dc <__assert_fail@plt+0x32960>
   453a0:	mov	sl, r0
   453a4:	mov	r0, #0
   453a8:	mov	r1, r7
   453ac:	mov	r2, r9
   453b0:	str	r0, [sl]
   453b4:	mov	r0, #1
   453b8:	add	r4, sl, #5
   453bc:	strh	r0, [sl, #4]
   453c0:	mov	r0, r4
   453c4:	bl	124b8 <memcpy@plt>
   453c8:	mov	r0, #0
   453cc:	strb	r0, [r4, r9]
   453d0:	str	sl, [r6]
   453d4:	strb	r0, [sl, #4]
   453d8:	b	4533c <__assert_fail@plt+0x328c0>
   453dc:	mov	r8, #0
   453e0:	str	r8, [r6]
   453e4:	b	45340 <__assert_fail@plt+0x328c4>
   453e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   453ec:	add	fp, sp, #28
   453f0:	sub	sp, sp, #52	; 0x34
   453f4:	mov	r4, r1
   453f8:	cmp	r0, #0
   453fc:	beq	45508 <__assert_fail@plt+0x32a8c>
   45400:	mov	r6, r0
   45404:	bl	45138 <__assert_fail@plt+0x326bc>
   45408:	cmp	r0, #0
   4540c:	beq	45500 <__assert_fail@plt+0x32a84>
   45410:	mov	r8, r0
   45414:	mov	r0, #32
   45418:	mov	r1, r4
   4541c:	add	r5, sp, #8
   45420:	vld1.32	{d16-d17}, [r1], r0
   45424:	mov	r2, r5
   45428:	vst1.32	{d16-d17}, [r2], r0
   4542c:	ldr	r0, [r4, #16]
   45430:	ldr	r3, [r4, #20]
   45434:	str	r0, [sp, #24]
   45438:	mvn	r0, #0
   4543c:	str	r0, [sp, #36]	; 0x24
   45440:	str	r3, [sp, #28]
   45444:	ldr	r0, [r1]
   45448:	str	r0, [r2]
   4544c:	mov	r0, r5
   45450:	bl	12410 <mktime@plt>
   45454:	mov	r9, r0
   45458:	ldr	r0, [sp, #36]	; 0x24
   4545c:	mov	sl, #1
   45460:	mov	r1, #1
   45464:	cmp	r0, #0
   45468:	blt	4547c <__assert_fail@plt+0x32a00>
   4546c:	add	r1, sp, #8
   45470:	mov	r0, r6
   45474:	bl	45284 <__assert_fail@plt+0x32808>
   45478:	eor	r1, r0, #1
   4547c:	cmp	r8, #1
   45480:	beq	454f4 <__assert_fail@plt+0x32a78>
   45484:	str	r1, [sp, #4]
   45488:	bl	127d0 <__errno_location@plt>
   4548c:	mov	r6, r0
   45490:	ldr	r7, [r0]
   45494:	ldrb	r0, [r8, #4]
   45498:	cmp	r0, #0
   4549c:	beq	45548 <__assert_fail@plt+0x32acc>
   454a0:	movw	r0, #49217	; 0xc041
   454a4:	add	r1, r8, #5
   454a8:	mov	r2, #1
   454ac:	movt	r0, #4
   454b0:	bl	127a0 <setenv@plt>
   454b4:	cmp	r0, #0
   454b8:	beq	4555c <__assert_fail@plt+0x32ae0>
   454bc:	ldr	r0, [r6]
   454c0:	mov	sl, #0
   454c4:	str	r0, [sp]
   454c8:	cmp	r8, #2
   454cc:	bcc	454e8 <__assert_fail@plt+0x32a6c>
   454d0:	ldr	r7, [r8]
   454d4:	mov	r0, r8
   454d8:	bl	2fd6c <__assert_fail@plt+0x1d2f0>
   454dc:	cmp	r7, #0
   454e0:	mov	r8, r7
   454e4:	bne	454d0 <__assert_fail@plt+0x32a54>
   454e8:	ldr	r0, [sp]
   454ec:	ldr	r1, [sp, #4]
   454f0:	str	r0, [r6]
   454f4:	eor	r0, sl, #1
   454f8:	orrs	r0, r1, r0
   454fc:	beq	45518 <__assert_fail@plt+0x32a9c>
   45500:	mvn	r9, #0
   45504:	b	4553c <__assert_fail@plt+0x32ac0>
   45508:	mov	r0, r4
   4550c:	sub	sp, fp, #28
   45510:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45514:	b	1295c <timegm@plt>
   45518:	mov	r0, #28
   4551c:	add	r1, r5, #16
   45520:	vld1.32	{d16-d17}, [r5], r0
   45524:	vld1.64	{d18-d19}, [r1]
   45528:	add	r1, r4, #16
   4552c:	vld1.32	{d20-d21}, [r5]
   45530:	vst1.32	{d16-d17}, [r4], r0
   45534:	vst1.32	{d18-d19}, [r1]
   45538:	vst1.32	{d20-d21}, [r4]
   4553c:	mov	r0, r9
   45540:	sub	sp, fp, #28
   45544:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45548:	movw	r0, #49217	; 0xc041
   4554c:	movt	r0, #4
   45550:	bl	129f8 <unsetenv@plt>
   45554:	cmp	r0, #0
   45558:	bne	454bc <__assert_fail@plt+0x32a40>
   4555c:	str	r7, [sp]
   45560:	bl	125cc <tzset@plt>
   45564:	mov	sl, #1
   45568:	cmp	r8, #2
   4556c:	bcs	454d0 <__assert_fail@plt+0x32a54>
   45570:	b	454e8 <__assert_fail@plt+0x32a6c>
   45574:	push	{fp, lr}
   45578:	mov	fp, sp
   4557c:	movw	r0, #54504	; 0xd4e8
   45580:	movt	r0, #5
   45584:	ldr	r0, [r0]
   45588:	bl	12758 <exit@plt>
   4558c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45590:	add	fp, sp, #28
   45594:	sub	sp, sp, #12
   45598:	mov	r4, r3
   4559c:	mov	r6, r2
   455a0:	mov	r5, r1
   455a4:	mov	sl, r0
   455a8:	bl	12788 <strlen@plt>
   455ac:	ldr	r8, [r5]
   455b0:	cmp	r8, #0
   455b4:	beq	45670 <__assert_fail@plt+0x32bf4>
   455b8:	mov	r7, r0
   455bc:	mov	r0, #0
   455c0:	add	r9, r5, #4
   455c4:	mov	r5, #0
   455c8:	str	r6, [sp, #4]
   455cc:	str	r0, [sp]
   455d0:	mvn	r0, #0
   455d4:	str	r0, [sp, #8]
   455d8:	mov	r0, r8
   455dc:	mov	r1, sl
   455e0:	mov	r2, r7
   455e4:	bl	12a1c <strncmp@plt>
   455e8:	cmp	r0, #0
   455ec:	bne	45644 <__assert_fail@plt+0x32bc8>
   455f0:	mov	r0, r8
   455f4:	bl	12788 <strlen@plt>
   455f8:	cmp	r0, r7
   455fc:	beq	45674 <__assert_fail@plt+0x32bf8>
   45600:	ldr	r0, [sp, #8]
   45604:	cmn	r0, #1
   45608:	beq	45640 <__assert_fail@plt+0x32bc4>
   4560c:	ldr	r0, [sp, #4]
   45610:	cmp	r0, #0
   45614:	beq	45634 <__assert_fail@plt+0x32bb8>
   45618:	ldr	r1, [sp, #8]
   4561c:	mov	r2, r4
   45620:	mla	r0, r1, r4, r0
   45624:	mov	r1, r6
   45628:	bl	12518 <memcmp@plt>
   4562c:	cmp	r0, #0
   45630:	beq	45644 <__assert_fail@plt+0x32bc8>
   45634:	mov	r0, #1
   45638:	str	r0, [sp]
   4563c:	b	45644 <__assert_fail@plt+0x32bc8>
   45640:	str	r5, [sp, #8]
   45644:	ldr	r8, [r9, r5, lsl #2]
   45648:	add	r6, r6, r4
   4564c:	add	r5, r5, #1
   45650:	cmp	r8, #0
   45654:	bne	455d8 <__assert_fail@plt+0x32b5c>
   45658:	ldr	r0, [sp]
   4565c:	tst	r0, #1
   45660:	ldr	r0, [sp, #8]
   45664:	mvnne	r0, #1
   45668:	sub	sp, fp, #28
   4566c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45670:	mvn	r5, #0
   45674:	mov	r0, r5
   45678:	sub	sp, fp, #28
   4567c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45680:	push	{r4, r5, r6, sl, fp, lr}
   45684:	add	fp, sp, #16
   45688:	sub	sp, sp, #8
   4568c:	mov	r4, r1
   45690:	movw	r1, #52115	; 0xcb93
   45694:	mov	r5, r0
   45698:	movw	r0, #52088	; 0xcb78
   4569c:	cmn	r2, #1
   456a0:	mov	r2, #5
   456a4:	movt	r0, #4
   456a8:	movt	r1, #4
   456ac:	moveq	r1, r0
   456b0:	mov	r0, #0
   456b4:	bl	1253c <dcgettext@plt>
   456b8:	mov	r6, r0
   456bc:	mov	r0, #0
   456c0:	mov	r1, #8
   456c4:	mov	r2, r4
   456c8:	bl	2c45c <__assert_fail@plt+0x199e0>
   456cc:	mov	r4, r0
   456d0:	mov	r0, #1
   456d4:	mov	r1, r5
   456d8:	bl	2ca1c <__assert_fail@plt+0x19fa0>
   456dc:	str	r0, [sp]
   456e0:	mov	r0, #0
   456e4:	mov	r1, #0
   456e8:	mov	r2, r6
   456ec:	mov	r3, r4
   456f0:	bl	12674 <error@plt>
   456f4:	sub	sp, fp, #16
   456f8:	pop	{r4, r5, r6, sl, fp, pc}
   456fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45700:	add	fp, sp, #28
   45704:	sub	sp, sp, #4
   45708:	mov	r5, r1
   4570c:	movw	r1, #52144	; 0xcbb0
   45710:	mov	r9, r2
   45714:	mov	r7, r0
   45718:	mov	r0, #0
   4571c:	mov	r2, #5
   45720:	mov	r8, #0
   45724:	movt	r1, #4
   45728:	bl	1253c <dcgettext@plt>
   4572c:	movw	sl, #54600	; 0xd548
   45730:	movt	sl, #5
   45734:	ldr	r1, [sl]
   45738:	bl	12a10 <fputs@plt>
   4573c:	ldr	r6, [r7]
   45740:	cmp	r6, #0
   45744:	bne	4575c <__assert_fail@plt+0x32ce0>
   45748:	ldr	r1, [sl]
   4574c:	mov	r0, #10
   45750:	sub	sp, fp, #28
   45754:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45758:	b	12968 <putc@plt>
   4575c:	add	r4, r7, #4
   45760:	mov	r7, #0
   45764:	str	r4, [sp]
   45768:	cmp	r8, #0
   4576c:	beq	457b0 <__assert_fail@plt+0x32d34>
   45770:	mov	r0, r7
   45774:	mov	r1, r5
   45778:	mov	r2, r9
   4577c:	bl	12518 <memcmp@plt>
   45780:	cmp	r0, #0
   45784:	bne	457b0 <__assert_fail@plt+0x32d34>
   45788:	ldr	r4, [sl]
   4578c:	mov	r0, r6
   45790:	bl	2ca2c <__assert_fail@plt+0x19fb0>
   45794:	mov	r2, r0
   45798:	mov	r0, r4
   4579c:	ldr	r4, [sp]
   457a0:	movw	r1, #52173	; 0xcbcd
   457a4:	movt	r1, #4
   457a8:	bl	127c4 <fprintf@plt>
   457ac:	b	457d4 <__assert_fail@plt+0x32d58>
   457b0:	ldr	r7, [sl]
   457b4:	mov	r0, r6
   457b8:	bl	2ca2c <__assert_fail@plt+0x19fb0>
   457bc:	movw	r1, #52165	; 0xcbc5
   457c0:	mov	r2, r0
   457c4:	mov	r0, r7
   457c8:	movt	r1, #4
   457cc:	bl	127c4 <fprintf@plt>
   457d0:	mov	r7, r5
   457d4:	ldr	r6, [r4, -r8, lsl #2]
   457d8:	add	r5, r5, r9
   457dc:	sub	r8, r8, #1
   457e0:	cmp	r6, #0
   457e4:	bne	45768 <__assert_fail@plt+0x32cec>
   457e8:	b	45748 <__assert_fail@plt+0x32ccc>
   457ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   457f0:	add	fp, sp, #28
   457f4:	sub	sp, sp, #20
   457f8:	mov	r9, r0
   457fc:	mov	r0, r1
   45800:	mov	r4, r3
   45804:	mov	r5, r2
   45808:	mov	r7, r1
   4580c:	bl	12788 <strlen@plt>
   45810:	ldr	sl, [r5]
   45814:	str	r4, [sp, #16]
   45818:	cmp	sl, #0
   4581c:	beq	458f0 <__assert_fail@plt+0x32e74>
   45820:	mov	r8, r0
   45824:	str	r9, [sp, #4]
   45828:	mov	r0, #0
   4582c:	str	r5, [sp, #8]
   45830:	add	r9, r5, #4
   45834:	mvn	r6, #0
   45838:	mov	r5, #0
   4583c:	str	r0, [sp, #12]
   45840:	mov	r0, sl
   45844:	mov	r1, r7
   45848:	mov	r2, r8
   4584c:	bl	12a1c <strncmp@plt>
   45850:	cmp	r0, #0
   45854:	bne	458a4 <__assert_fail@plt+0x32e28>
   45858:	mov	r0, sl
   4585c:	bl	12788 <strlen@plt>
   45860:	cmp	r0, r8
   45864:	beq	45968 <__assert_fail@plt+0x32eec>
   45868:	cmn	r6, #1
   4586c:	beq	458a0 <__assert_fail@plt+0x32e24>
   45870:	ldr	r0, [sp, #16]
   45874:	cmp	r0, #0
   45878:	beq	45894 <__assert_fail@plt+0x32e18>
   4587c:	ldr	r2, [fp, #8]
   45880:	mov	r1, r4
   45884:	mla	r0, r6, r2, r0
   45888:	bl	12518 <memcmp@plt>
   4588c:	cmp	r0, #0
   45890:	beq	458a4 <__assert_fail@plt+0x32e28>
   45894:	mov	r0, #1
   45898:	str	r0, [sp, #12]
   4589c:	b	458a4 <__assert_fail@plt+0x32e28>
   458a0:	mov	r6, r5
   458a4:	ldr	sl, [r9, r5, lsl #2]
   458a8:	ldr	r0, [fp, #8]
   458ac:	add	r5, r5, #1
   458b0:	add	r4, r4, r0
   458b4:	cmp	sl, #0
   458b8:	bne	45840 <__assert_fail@plt+0x32dc4>
   458bc:	ldr	r0, [sp, #12]
   458c0:	ldr	r5, [sp, #8]
   458c4:	ldr	r9, [sp, #4]
   458c8:	movw	r1, #52088	; 0xcb78
   458cc:	movt	r1, #4
   458d0:	tst	r0, #1
   458d4:	bne	458e4 <__assert_fail@plt+0x32e68>
   458d8:	cmn	r6, #1
   458dc:	bgt	4595c <__assert_fail@plt+0x32ee0>
   458e0:	beq	458f8 <__assert_fail@plt+0x32e7c>
   458e4:	movw	r1, #52115	; 0xcb93
   458e8:	movt	r1, #4
   458ec:	b	458f8 <__assert_fail@plt+0x32e7c>
   458f0:	movw	r1, #52088	; 0xcb78
   458f4:	movt	r1, #4
   458f8:	ldr	r6, [fp, #12]
   458fc:	mov	r0, #0
   45900:	mov	r2, #5
   45904:	bl	1253c <dcgettext@plt>
   45908:	mov	r4, r0
   4590c:	mov	r0, #0
   45910:	mov	r1, #8
   45914:	mov	r2, r7
   45918:	bl	2c45c <__assert_fail@plt+0x199e0>
   4591c:	mov	r7, r0
   45920:	mov	r0, #1
   45924:	mov	r1, r9
   45928:	bl	2ca1c <__assert_fail@plt+0x19fa0>
   4592c:	str	r0, [sp]
   45930:	mov	r0, #0
   45934:	mov	r1, #0
   45938:	mov	r2, r4
   4593c:	mov	r3, r7
   45940:	bl	12674 <error@plt>
   45944:	ldr	r1, [sp, #16]
   45948:	ldr	r2, [fp, #8]
   4594c:	mov	r0, r5
   45950:	bl	456fc <__assert_fail@plt+0x32c80>
   45954:	blx	r6
   45958:	mvn	r6, #0
   4595c:	mov	r0, r6
   45960:	sub	sp, fp, #28
   45964:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45968:	mov	r6, r5
   4596c:	ldr	r5, [sp, #8]
   45970:	ldr	r9, [sp, #4]
   45974:	movw	r1, #52088	; 0xcb78
   45978:	movt	r1, #4
   4597c:	cmn	r6, #1
   45980:	bgt	4595c <__assert_fail@plt+0x32ee0>
   45984:	b	458e0 <__assert_fail@plt+0x32e64>
   45988:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   4598c:	add	fp, sp, #24
   45990:	ldr	r6, [r1]
   45994:	cmp	r6, #0
   45998:	beq	459fc <__assert_fail@plt+0x32f80>
   4599c:	mov	r8, r1
   459a0:	mov	r7, r2
   459a4:	mov	r1, r2
   459a8:	mov	r2, r3
   459ac:	mov	r4, r3
   459b0:	mov	r9, r0
   459b4:	bl	12518 <memcmp@plt>
   459b8:	cmp	r0, #0
   459bc:	beq	459f4 <__assert_fail@plt+0x32f78>
   459c0:	add	r7, r7, r4
   459c4:	add	r5, r8, #4
   459c8:	ldr	r6, [r5]
   459cc:	cmp	r6, #0
   459d0:	beq	459fc <__assert_fail@plt+0x32f80>
   459d4:	mov	r0, r9
   459d8:	mov	r1, r7
   459dc:	mov	r2, r4
   459e0:	bl	12518 <memcmp@plt>
   459e4:	add	r7, r7, r4
   459e8:	add	r5, r5, #4
   459ec:	cmp	r0, #0
   459f0:	bne	459c8 <__assert_fail@plt+0x32f4c>
   459f4:	mov	r0, r6
   459f8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   459fc:	mov	r6, #0
   45a00:	mov	r0, r6
   45a04:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   45a08:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   45a0c:	add	fp, sp, #24
   45a10:	sub	sp, sp, #32
   45a14:	mov	r5, r0
   45a18:	ldrb	r0, [r2]
   45a1c:	cmp	r0, #0
   45a20:	beq	45af4 <__assert_fail@plt+0x33078>
   45a24:	movw	r9, #56892	; 0xde3c
   45a28:	mov	r4, r2
   45a2c:	mov	r6, r1
   45a30:	movt	r9, #5
   45a34:	ldr	r0, [r9]
   45a38:	cmp	r0, #0
   45a3c:	bne	45aa0 <__assert_fail@plt+0x33024>
   45a40:	movw	r0, #45101	; 0xb02d
   45a44:	movw	r1, #18688	; 0x4900
   45a48:	movt	r0, #4
   45a4c:	movt	r1, #8
   45a50:	bl	126a4 <open64@plt>
   45a54:	cmn	r0, #1
   45a58:	ble	45b0c <__assert_fail@plt+0x33090>
   45a5c:	movw	r1, #52178	; 0xcbd2
   45a60:	mov	r7, r0
   45a64:	mov	r8, sp
   45a68:	movt	r1, #4
   45a6c:	mov	r0, r8
   45a70:	mov	r2, r7
   45a74:	bl	12938 <sprintf@plt>
   45a78:	mov	r0, r8
   45a7c:	mov	r1, #0
   45a80:	bl	12878 <access@plt>
   45a84:	cmp	r0, #0
   45a88:	mvn	r1, #0
   45a8c:	mov	r0, r7
   45a90:	movweq	r1, #1
   45a94:	str	r1, [r9]
   45a98:	bl	12a34 <close@plt>
   45a9c:	ldr	r0, [r9]
   45aa0:	mov	r7, #0
   45aa4:	cmp	r0, #0
   45aa8:	blt	45b00 <__assert_fail@plt+0x33084>
   45aac:	mov	r0, r4
   45ab0:	bl	12788 <strlen@plt>
   45ab4:	add	r0, r0, #27
   45ab8:	cmp	r0, #4032	; 0xfc0
   45abc:	bls	45ad0 <__assert_fail@plt+0x33054>
   45ac0:	bl	3233c <__assert_fail@plt+0x1f8c0>
   45ac4:	mov	r5, r0
   45ac8:	cmp	r0, #0
   45acc:	beq	45b00 <__assert_fail@plt+0x33084>
   45ad0:	movw	r1, #52201	; 0xcbe9
   45ad4:	mov	r0, r5
   45ad8:	mov	r2, r6
   45adc:	movt	r1, #4
   45ae0:	bl	12938 <sprintf@plt>
   45ae4:	add	r0, r5, r0
   45ae8:	mov	r1, r4
   45aec:	bl	12638 <strcpy@plt>
   45af0:	b	45afc <__assert_fail@plt+0x33080>
   45af4:	mov	r0, #0
   45af8:	strb	r0, [r5]
   45afc:	mov	r7, r5
   45b00:	mov	r0, r7
   45b04:	sub	sp, fp, #24
   45b08:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   45b0c:	mvn	r0, #0
   45b10:	mov	r7, #0
   45b14:	str	r0, [r9]
   45b18:	b	45b00 <__assert_fail@plt+0x33084>
   45b1c:	sub	r0, r0, #1
   45b20:	ldrb	r3, [r0, #1]!
   45b24:	cmp	r3, #47	; 0x2f
   45b28:	beq	45b20 <__assert_fail@plt+0x330a4>
   45b2c:	mov	r2, #0
   45b30:	mov	r1, r0
   45b34:	b	45b50 <__assert_fail@plt+0x330d4>
   45b38:	cmp	r3, #0
   45b3c:	bxeq	lr
   45b40:	tst	r2, #1
   45b44:	mov	r2, #0
   45b48:	movne	r0, r1
   45b4c:	ldrb	r3, [r1, #1]!
   45b50:	uxtb	r3, r3
   45b54:	cmp	r3, #47	; 0x2f
   45b58:	bne	45b38 <__assert_fail@plt+0x330bc>
   45b5c:	ldrb	r3, [r1, #1]!
   45b60:	mov	r2, #1
   45b64:	b	45b50 <__assert_fail@plt+0x330d4>
   45b68:	push	{r4, sl, fp, lr}
   45b6c:	add	fp, sp, #8
   45b70:	mov	r4, r0
   45b74:	bl	12788 <strlen@plt>
   45b78:	mov	r1, r0
   45b7c:	sub	r2, r4, #1
   45b80:	mov	r0, r1
   45b84:	cmp	r1, #2
   45b88:	popcc	{r4, sl, fp, pc}
   45b8c:	ldrb	r3, [r2, r0]
   45b90:	sub	r1, r0, #1
   45b94:	cmp	r3, #47	; 0x2f
   45b98:	beq	45b80 <__assert_fail@plt+0x33104>
   45b9c:	pop	{r4, sl, fp, pc}
   45ba0:	push	{r4, r5, r6, sl, fp, lr}
   45ba4:	add	fp, sp, #16
   45ba8:	mov	r4, r0
   45bac:	bl	12650 <__fpending@plt>
   45bb0:	mov	r5, r0
   45bb4:	mov	r0, r4
   45bb8:	bl	1247c <ferror@plt>
   45bbc:	mov	r6, r0
   45bc0:	mov	r0, r4
   45bc4:	bl	12884 <fclose@plt>
   45bc8:	cmp	r6, #0
   45bcc:	beq	45bec <__assert_fail@plt+0x33170>
   45bd0:	mvn	r4, #0
   45bd4:	cmp	r0, #0
   45bd8:	bne	45c20 <__assert_fail@plt+0x331a4>
   45bdc:	bl	127d0 <__errno_location@plt>
   45be0:	mov	r1, #0
   45be4:	str	r1, [r0]
   45be8:	b	45c20 <__assert_fail@plt+0x331a4>
   45bec:	cmp	r0, #0
   45bf0:	mov	r4, r0
   45bf4:	mvnne	r4, #0
   45bf8:	cmp	r5, #0
   45bfc:	bne	45c20 <__assert_fail@plt+0x331a4>
   45c00:	cmp	r0, #0
   45c04:	beq	45c20 <__assert_fail@plt+0x331a4>
   45c08:	bl	127d0 <__errno_location@plt>
   45c0c:	ldr	r0, [r0]
   45c10:	subs	r4, r0, #9
   45c14:	mvnne	r4, #0
   45c18:	mov	r0, r4
   45c1c:	pop	{r4, r5, r6, sl, fp, pc}
   45c20:	mov	r0, r4
   45c24:	pop	{r4, r5, r6, sl, fp, pc}
   45c28:	movw	r2, #62998	; 0xf616
   45c2c:	mov	r1, #0
   45c30:	movt	r2, #149	; 0x95
   45c34:	str	r1, [r0, #16]
   45c38:	str	r1, [r0, #20]
   45c3c:	str	r2, [r0, #24]
   45c40:	bx	lr
   45c44:	push	{r4, r5, r6, r7, fp, lr}
   45c48:	add	fp, sp, #16
   45c4c:	ldr	r2, [r0, #24]
   45c50:	movw	r3, #62998	; 0xf616
   45c54:	movt	r3, #149	; 0x95
   45c58:	cmp	r2, r3
   45c5c:	bne	45cfc <__assert_fail@plt+0x33280>
   45c60:	mov	r3, r0
   45c64:	ldr	r2, [r3, #16]!
   45c68:	ldr	lr, [r3, #4]
   45c6c:	orrs	r5, r2, lr
   45c70:	beq	45ca8 <__assert_fail@plt+0x3322c>
   45c74:	ldrd	r4, [r0]
   45c78:	ldrd	r6, [r1, #96]	; 0x60
   45c7c:	eor	r7, r7, r5
   45c80:	eor	r6, r6, r4
   45c84:	orrs	r7, r6, r7
   45c88:	bne	45ca8 <__assert_fail@plt+0x3322c>
   45c8c:	ldrd	r4, [r0, #8]
   45c90:	ldrd	r6, [r1]
   45c94:	mov	ip, #1
   45c98:	eor	r7, r7, r5
   45c9c:	eor	r6, r6, r4
   45ca0:	orrs	r7, r6, r7
   45ca4:	beq	45cc8 <__assert_fail@plt+0x3324c>
   45ca8:	adds	r4, r2, #1
   45cac:	mov	ip, #0
   45cb0:	adc	r5, lr, #0
   45cb4:	and	r2, r4, r2
   45cb8:	strd	r4, [r3]
   45cbc:	and	r3, r5, lr
   45cc0:	orrs	r2, r2, r3
   45cc4:	beq	45cd0 <__assert_fail@plt+0x33254>
   45cc8:	mov	r0, ip
   45ccc:	pop	{r4, r5, r6, r7, fp, pc}
   45cd0:	orrs	r2, r4, r5
   45cd4:	moveq	ip, #1
   45cd8:	moveq	r0, ip
   45cdc:	popeq	{r4, r5, r6, r7, fp, pc}
   45ce0:	ldrd	r2, [r1]
   45ce4:	str	r3, [r0, #12]
   45ce8:	str	r2, [r0, #8]
   45cec:	ldrd	r2, [r1, #96]	; 0x60
   45cf0:	stm	r0, {r2, r3}
   45cf4:	mov	r0, ip
   45cf8:	pop	{r4, r5, r6, r7, fp, pc}
   45cfc:	movw	r0, #52219	; 0xcbfb
   45d00:	movw	r1, #52243	; 0xcc13
   45d04:	movw	r3, #52257	; 0xcc21
   45d08:	mov	r2, #60	; 0x3c
   45d0c:	movt	r0, #4
   45d10:	movt	r1, #4
   45d14:	movt	r3, #4
   45d18:	bl	12a7c <__assert_fail@plt>
   45d1c:	push	{r4, r5, r6, r7, fp, lr}
   45d20:	add	fp, sp, #16
   45d24:	mov	r4, r0
   45d28:	ldr	r0, [r0, #4]
   45d2c:	mov	r5, r1
   45d30:	cmp	r0, r1
   45d34:	movcs	r0, #1
   45d38:	strcs	r5, [r4]
   45d3c:	popcs	{r4, r5, r6, r7, fp, pc}
   45d40:	mov	r6, r3
   45d44:	cmp	r3, #0
   45d48:	beq	45d70 <__assert_fail@plt+0x332f4>
   45d4c:	mvn	r0, #0
   45d50:	udiv	r0, r0, r6
   45d54:	cmp	r0, r5
   45d58:	bcs	45d70 <__assert_fail@plt+0x332f4>
   45d5c:	bl	127d0 <__errno_location@plt>
   45d60:	mov	r1, #12
   45d64:	str	r1, [r0]
   45d68:	mov	r0, #0
   45d6c:	pop	{r4, r5, r6, r7, fp, pc}
   45d70:	ldr	r0, [r4, #8]
   45d74:	mul	r1, r6, r5
   45d78:	cmp	r0, r2
   45d7c:	beq	45d94 <__assert_fail@plt+0x33318>
   45d80:	bl	33040 <__assert_fail@plt+0x205c4>
   45d84:	mov	r7, r0
   45d88:	cmp	r0, #0
   45d8c:	bne	45dc4 <__assert_fail@plt+0x33348>
   45d90:	b	45dd4 <__assert_fail@plt+0x33358>
   45d94:	mov	r0, r1
   45d98:	bl	3233c <__assert_fail@plt+0x1f8c0>
   45d9c:	cmp	r0, #0
   45da0:	beq	45dd4 <__assert_fail@plt+0x33358>
   45da4:	ldr	r1, [r4, #8]
   45da8:	mov	r7, r0
   45dac:	cmp	r1, #0
   45db0:	beq	45dc4 <__assert_fail@plt+0x33348>
   45db4:	ldr	r0, [r4]
   45db8:	mul	r2, r0, r6
   45dbc:	mov	r0, r7
   45dc0:	bl	124b8 <memcpy@plt>
   45dc4:	mov	r0, #1
   45dc8:	str	r5, [r4]
   45dcc:	stmib	r4, {r5, r7}
   45dd0:	pop	{r4, r5, r6, r7, fp, pc}
   45dd4:	mov	r0, #0
   45dd8:	pop	{r4, r5, r6, r7, fp, pc}
   45ddc:	mov	r1, r0
   45de0:	mov	r0, #0
   45de4:	b	124a0 <clock_gettime@plt>
   45de8:	push	{fp, lr}
   45dec:	mov	fp, sp
   45df0:	mov	r1, r0
   45df4:	mov	r0, #0
   45df8:	bl	124a0 <clock_gettime@plt>
   45dfc:	pop	{fp, pc}
   45e00:	push	{r4, sl, fp, lr}
   45e04:	add	fp, sp, #8
   45e08:	sub	sp, sp, #264	; 0x108
   45e0c:	add	r1, sp, #7
   45e10:	movw	r2, #257	; 0x101
   45e14:	bl	461c4 <__assert_fail@plt+0x33748>
   45e18:	mov	r4, #0
   45e1c:	cmp	r0, #0
   45e20:	bne	45e58 <__assert_fail@plt+0x333dc>
   45e24:	movw	r1, #28110	; 0x6dce
   45e28:	add	r0, sp, #7
   45e2c:	movt	r1, #4
   45e30:	bl	123d4 <strcmp@plt>
   45e34:	cmp	r0, #0
   45e38:	beq	45e58 <__assert_fail@plt+0x333dc>
   45e3c:	movw	r1, #52324	; 0xcc64
   45e40:	add	r0, sp, #7
   45e44:	movt	r1, #4
   45e48:	bl	123d4 <strcmp@plt>
   45e4c:	mov	r4, r0
   45e50:	cmp	r0, #0
   45e54:	movwne	r4, #1
   45e58:	mov	r0, r4
   45e5c:	sub	sp, fp, #8
   45e60:	pop	{r4, sl, fp, pc}
   45e64:	mov	r3, #1
   45e68:	mov	r2, #0
   45e6c:	vdup.32	q8, r1
   45e70:	strb	r3, [r0, #28]
   45e74:	str	r2, [r0, #20]
   45e78:	str	r2, [r0, #24]
   45e7c:	vst1.32	{d16-d17}, [r0]!
   45e80:	str	r1, [r0]
   45e84:	bx	lr
   45e88:	ldrb	r0, [r0, #28]
   45e8c:	bx	lr
   45e90:	push	{fp, lr}
   45e94:	mov	fp, sp
   45e98:	ldrb	r3, [r0, #28]
   45e9c:	ldr	r2, [r0, #20]
   45ea0:	eor	lr, r3, #1
   45ea4:	add	r2, r2, lr
   45ea8:	and	r3, r2, #3
   45eac:	ldr	ip, [r0, r3, lsl #2]
   45eb0:	str	r1, [r0, r3, lsl #2]
   45eb4:	str	r3, [r0, #20]
   45eb8:	ldr	r1, [r0, #24]
   45ebc:	cmp	r3, r1
   45ec0:	addeq	r1, r2, lr
   45ec4:	andeq	r1, r1, #3
   45ec8:	streq	r1, [r0, #24]
   45ecc:	mov	r1, #0
   45ed0:	strb	r1, [r0, #28]
   45ed4:	mov	r0, ip
   45ed8:	pop	{fp, pc}
   45edc:	ldrb	r1, [r0, #28]
   45ee0:	cmp	r1, #0
   45ee4:	bne	45f28 <__assert_fail@plt+0x334ac>
   45ee8:	ldr	r3, [r0, #20]
   45eec:	ldr	r2, [r0, #16]
   45ef0:	ldr	r1, [r0, r3, lsl #2]
   45ef4:	str	r2, [r0, r3, lsl #2]
   45ef8:	ldr	r2, [r0, #20]
   45efc:	ldr	r3, [r0, #24]
   45f00:	cmp	r2, r3
   45f04:	moveq	r2, #1
   45f08:	strbeq	r2, [r0, #28]
   45f0c:	moveq	r0, r1
   45f10:	bxeq	lr
   45f14:	sub	r2, r2, #1
   45f18:	and	r2, r2, #3
   45f1c:	str	r2, [r0, #20]
   45f20:	mov	r0, r1
   45f24:	bx	lr
   45f28:	push	{fp, lr}
   45f2c:	mov	fp, sp
   45f30:	bl	12a28 <abort@plt>
   45f34:	push	{fp, lr}
   45f38:	mov	fp, sp
   45f3c:	mov	r0, #14
   45f40:	bl	12908 <nl_langinfo@plt>
   45f44:	movw	r1, #34847	; 0x881f
   45f48:	cmp	r0, #0
   45f4c:	movt	r1, #4
   45f50:	movne	r1, r0
   45f54:	movw	r0, #52330	; 0xcc6a
   45f58:	ldrb	r2, [r1]
   45f5c:	movt	r0, #4
   45f60:	cmp	r2, #0
   45f64:	movne	r0, r1
   45f68:	pop	{fp, pc}
   45f6c:	push	{r4, sl, fp, lr}
   45f70:	add	fp, sp, #8
   45f74:	mov	r4, #0
   45f78:	adds	r0, r0, #16
   45f7c:	adc	r1, r4, #0
   45f80:	rsb	r2, r1, #0
   45f84:	eors	r2, r2, r1
   45f88:	movwne	r2, #1
   45f8c:	cmp	r0, #0
   45f90:	blt	45fb0 <__assert_fail@plt+0x33534>
   45f94:	cmp	r2, #0
   45f98:	asreq	r2, r0, #31
   45f9c:	eoreq	r3, r0, r0
   45fa0:	andeq	r2, r2, #1
   45fa4:	eoreq	r1, r1, r2
   45fa8:	orrseq	r1, r3, r1
   45fac:	beq	45fb8 <__assert_fail@plt+0x3353c>
   45fb0:	mov	r0, r4
   45fb4:	pop	{r4, sl, fp, pc}
   45fb8:	bl	126c8 <malloc@plt>
   45fbc:	cmp	r0, #0
   45fc0:	addne	r4, r0, #8
   45fc4:	movne	r1, #8
   45fc8:	bfine	r4, r1, #0, #4
   45fcc:	subne	r0, r4, r0
   45fd0:	strbne	r0, [r4, #-1]
   45fd4:	mov	r0, r4
   45fd8:	pop	{r4, sl, fp, pc}
   45fdc:	tst	r0, #7
   45fe0:	bne	45ff8 <__assert_fail@plt+0x3357c>
   45fe4:	tst	r0, #8
   45fe8:	bxeq	lr
   45fec:	ldrb	r1, [r0, #-1]
   45ff0:	sub	r0, r0, r1
   45ff4:	b	2fd6c <__assert_fail@plt+0x1d2f0>
   45ff8:	push	{fp, lr}
   45ffc:	mov	fp, sp
   46000:	bl	12a28 <abort@plt>
   46004:	push	{r4, sl, fp, lr}
   46008:	add	fp, sp, #8
   4600c:	mov	r4, r0
   46010:	bl	12434 <wcwidth@plt>
   46014:	cmn	r0, #1
   46018:	popgt	{r4, sl, fp, pc}
   4601c:	mov	r0, r4
   46020:	bl	1259c <iswcntrl@plt>
   46024:	clz	r0, r0
   46028:	lsr	r0, r0, #5
   4602c:	pop	{r4, sl, fp, pc}
   46030:	push	{r4, r5, r6, sl, fp, lr}
   46034:	add	fp, sp, #16
   46038:	mov	r4, r0
   4603c:	mov	r0, r1
   46040:	mov	r5, r1
   46044:	ldr	r1, [r0], #16
   46048:	cmp	r1, r0
   4604c:	beq	46058 <__assert_fail@plt+0x335dc>
   46050:	mov	r6, r1
   46054:	b	46068 <__assert_fail@plt+0x335ec>
   46058:	ldr	r2, [r5, #4]
   4605c:	add	r6, r4, #16
   46060:	mov	r0, r6
   46064:	bl	124b8 <memcpy@plt>
   46068:	str	r6, [r4]
   4606c:	ldr	r0, [r5, #4]
   46070:	str	r0, [r4, #4]
   46074:	ldrb	r0, [r5, #8]
   46078:	strb	r0, [r4, #8]
   4607c:	cmp	r0, #0
   46080:	ldrne	r0, [r5, #12]
   46084:	strne	r0, [r4, #12]
   46088:	pop	{r4, r5, r6, sl, fp, pc}
   4608c:	movw	r2, #52336	; 0xcc70
   46090:	ubfx	r1, r0, #5, #3
   46094:	and	r0, r0, #31
   46098:	movt	r2, #4
   4609c:	ldr	r1, [r2, r1, lsl #2]
   460a0:	mov	r2, #1
   460a4:	and	r0, r1, r2, lsl r0
   460a8:	cmp	r0, #0
   460ac:	movwne	r0, #1
   460b0:	bx	lr
   460b4:	push	{r4, r5, r6, sl, fp, lr}
   460b8:	add	fp, sp, #16
   460bc:	sub	sp, sp, #56	; 0x38
   460c0:	mov	r5, r0
   460c4:	bl	12620 <__ctype_get_mb_cur_max@plt>
   460c8:	cmp	r0, #2
   460cc:	bcc	46158 <__assert_fail@plt+0x336dc>
   460d0:	mov	r4, #0
   460d4:	mov	r0, sp
   460d8:	str	r4, [sp, #8]
   460dc:	str	r4, [sp, #4]
   460e0:	strb	r4, [sp]
   460e4:	str	r5, [sp, #16]
   460e8:	strb	r4, [sp, #12]
   460ec:	bl	25b14 <__assert_fail@plt+0x13098>
   460f0:	ldrb	r0, [sp, #24]
   460f4:	cmp	r0, #0
   460f8:	beq	46108 <__assert_fail@plt+0x3368c>
   460fc:	ldr	r0, [sp, #28]
   46100:	cmp	r0, #0
   46104:	beq	4614c <__assert_fail@plt+0x336d0>
   46108:	mov	r6, #0
   4610c:	mov	r5, sp
   46110:	mov	r4, #0
   46114:	strb	r6, [sp, #12]
   46118:	ldr	r0, [sp, #16]
   4611c:	ldr	r1, [sp, #20]
   46120:	add	r0, r0, r1
   46124:	str	r0, [sp, #16]
   46128:	mov	r0, r5
   4612c:	bl	25b14 <__assert_fail@plt+0x13098>
   46130:	ldrb	r1, [sp, #24]
   46134:	ldr	r0, [sp, #28]
   46138:	add	r4, r4, #1
   4613c:	cmp	r1, #0
   46140:	beq	46114 <__assert_fail@plt+0x33698>
   46144:	cmp	r0, #0
   46148:	bne	46114 <__assert_fail@plt+0x33698>
   4614c:	mov	r0, r4
   46150:	sub	sp, fp, #16
   46154:	pop	{r4, r5, r6, sl, fp, pc}
   46158:	mov	r0, r5
   4615c:	sub	sp, fp, #16
   46160:	pop	{r4, r5, r6, sl, fp, lr}
   46164:	b	12788 <strlen@plt>
   46168:	push	{r4, r5, r6, sl, fp, lr}
   4616c:	add	fp, sp, #16
   46170:	orr	r2, r2, #18688	; 0x4900
   46174:	mov	r4, r3
   46178:	orr	r2, r2, #524288	; 0x80000
   4617c:	bl	26374 <__assert_fail@plt+0x138f8>
   46180:	mov	r5, r0
   46184:	mov	r0, #0
   46188:	cmp	r5, #0
   4618c:	poplt	{r4, r5, r6, sl, fp, pc}
   46190:	mov	r0, r5
   46194:	bl	12950 <fdopendir@plt>
   46198:	cmp	r0, #0
   4619c:	strne	r5, [r4]
   461a0:	popne	{r4, r5, r6, sl, fp, pc}
   461a4:	bl	127d0 <__errno_location@plt>
   461a8:	ldr	r6, [r0]
   461ac:	mov	r4, r0
   461b0:	mov	r0, r5
   461b4:	bl	12a34 <close@plt>
   461b8:	mov	r0, #0
   461bc:	str	r6, [r4]
   461c0:	pop	{r4, r5, r6, sl, fp, pc}
   461c4:	push	{r4, r5, r6, r7, fp, lr}
   461c8:	add	fp, sp, #16
   461cc:	mov	r4, r1
   461d0:	mov	r1, #0
   461d4:	mov	r6, r2
   461d8:	bl	128cc <setlocale@plt>
   461dc:	cmp	r0, #0
   461e0:	beq	46210 <__assert_fail@plt+0x33794>
   461e4:	mov	r7, r0
   461e8:	bl	12788 <strlen@plt>
   461ec:	cmp	r0, r6
   461f0:	bcs	46230 <__assert_fail@plt+0x337b4>
   461f4:	add	r2, r0, #1
   461f8:	mov	r0, r4
   461fc:	mov	r1, r7
   46200:	bl	124b8 <memcpy@plt>
   46204:	mov	r5, #0
   46208:	mov	r0, r5
   4620c:	pop	{r4, r5, r6, r7, fp, pc}
   46210:	cmp	r6, #0
   46214:	mov	r5, #22
   46218:	movne	r0, #0
   4621c:	strbne	r0, [r4]
   46220:	movne	r0, r5
   46224:	popne	{r4, r5, r6, r7, fp, pc}
   46228:	mov	r0, r5
   4622c:	pop	{r4, r5, r6, r7, fp, pc}
   46230:	mov	r5, #34	; 0x22
   46234:	cmp	r6, #0
   46238:	beq	46258 <__assert_fail@plt+0x337dc>
   4623c:	sub	r6, r6, #1
   46240:	mov	r0, r4
   46244:	mov	r1, r7
   46248:	mov	r2, r6
   4624c:	bl	124b8 <memcpy@plt>
   46250:	mov	r0, #0
   46254:	strb	r0, [r4, r6]
   46258:	mov	r0, r5
   4625c:	pop	{r4, r5, r6, r7, fp, pc}
   46260:	mov	r1, #0
   46264:	b	128cc <setlocale@plt>
   46268:	eor	r1, r1, #-2147483648	; 0x80000000
   4626c:	b	46274 <__assert_fail@plt+0x337f8>
   46270:	eor	r3, r3, #-2147483648	; 0x80000000
   46274:	push	{r4, r5, lr}
   46278:	lsl	r4, r1, #1
   4627c:	lsl	r5, r3, #1
   46280:	teq	r4, r5
   46284:	teqeq	r0, r2
   46288:	orrsne	ip, r4, r0
   4628c:	orrsne	ip, r5, r2
   46290:	mvnsne	ip, r4, asr #21
   46294:	mvnsne	ip, r5, asr #21
   46298:	beq	46484 <__assert_fail@plt+0x33a08>
   4629c:	lsr	r4, r4, #21
   462a0:	rsbs	r5, r4, r5, lsr #21
   462a4:	rsblt	r5, r5, #0
   462a8:	ble	462c8 <__assert_fail@plt+0x3384c>
   462ac:	add	r4, r4, r5
   462b0:	eor	r2, r0, r2
   462b4:	eor	r3, r1, r3
   462b8:	eor	r0, r2, r0
   462bc:	eor	r1, r3, r1
   462c0:	eor	r2, r0, r2
   462c4:	eor	r3, r1, r3
   462c8:	cmp	r5, #54	; 0x36
   462cc:	pophi	{r4, r5, pc}
   462d0:	tst	r1, #-2147483648	; 0x80000000
   462d4:	lsl	r1, r1, #12
   462d8:	mov	ip, #1048576	; 0x100000
   462dc:	orr	r1, ip, r1, lsr #12
   462e0:	beq	462ec <__assert_fail@plt+0x33870>
   462e4:	rsbs	r0, r0, #0
   462e8:	rsc	r1, r1, #0
   462ec:	tst	r3, #-2147483648	; 0x80000000
   462f0:	lsl	r3, r3, #12
   462f4:	orr	r3, ip, r3, lsr #12
   462f8:	beq	46304 <__assert_fail@plt+0x33888>
   462fc:	rsbs	r2, r2, #0
   46300:	rsc	r3, r3, #0
   46304:	teq	r4, r5
   46308:	beq	4646c <__assert_fail@plt+0x339f0>
   4630c:	sub	r4, r4, #1
   46310:	rsbs	lr, r5, #32
   46314:	blt	46330 <__assert_fail@plt+0x338b4>
   46318:	lsl	ip, r2, lr
   4631c:	adds	r0, r0, r2, lsr r5
   46320:	adc	r1, r1, #0
   46324:	adds	r0, r0, r3, lsl lr
   46328:	adcs	r1, r1, r3, asr r5
   4632c:	b	4634c <__assert_fail@plt+0x338d0>
   46330:	sub	r5, r5, #32
   46334:	add	lr, lr, #32
   46338:	cmp	r2, #1
   4633c:	lsl	ip, r3, lr
   46340:	orrcs	ip, ip, #2
   46344:	adds	r0, r0, r3, asr r5
   46348:	adcs	r1, r1, r3, asr #31
   4634c:	and	r5, r1, #-2147483648	; 0x80000000
   46350:	bpl	46360 <__assert_fail@plt+0x338e4>
   46354:	rsbs	ip, ip, #0
   46358:	rscs	r0, r0, #0
   4635c:	rsc	r1, r1, #0
   46360:	cmp	r1, #1048576	; 0x100000
   46364:	bcc	463a4 <__assert_fail@plt+0x33928>
   46368:	cmp	r1, #2097152	; 0x200000
   4636c:	bcc	4638c <__assert_fail@plt+0x33910>
   46370:	lsrs	r1, r1, #1
   46374:	rrxs	r0, r0
   46378:	rrx	ip, ip
   4637c:	add	r4, r4, #1
   46380:	lsl	r2, r4, #21
   46384:	cmn	r2, #4194304	; 0x400000
   46388:	bcs	464e4 <__assert_fail@plt+0x33a68>
   4638c:	cmp	ip, #-2147483648	; 0x80000000
   46390:	lsrseq	ip, r0, #1
   46394:	adcs	r0, r0, #0
   46398:	adc	r1, r1, r4, lsl #20
   4639c:	orr	r1, r1, r5
   463a0:	pop	{r4, r5, pc}
   463a4:	lsls	ip, ip, #1
   463a8:	adcs	r0, r0, r0
   463ac:	adc	r1, r1, r1
   463b0:	tst	r1, #1048576	; 0x100000
   463b4:	sub	r4, r4, #1
   463b8:	bne	4638c <__assert_fail@plt+0x33910>
   463bc:	teq	r1, #0
   463c0:	moveq	r1, r0
   463c4:	moveq	r0, #0
   463c8:	clz	r3, r1
   463cc:	addeq	r3, r3, #32
   463d0:	sub	r3, r3, #11
   463d4:	subs	r2, r3, #32
   463d8:	bge	463fc <__assert_fail@plt+0x33980>
   463dc:	adds	r2, r2, #12
   463e0:	ble	463f8 <__assert_fail@plt+0x3397c>
   463e4:	add	ip, r2, #20
   463e8:	rsb	r2, r2, #12
   463ec:	lsl	r0, r1, ip
   463f0:	lsr	r1, r1, r2
   463f4:	b	4640c <__assert_fail@plt+0x33990>
   463f8:	add	r2, r2, #20
   463fc:	rsble	ip, r2, #32
   46400:	lsl	r1, r1, r2
   46404:	orrle	r1, r1, r0, lsr ip
   46408:	lslle	r0, r0, r2
   4640c:	subs	r4, r4, r3
   46410:	addge	r1, r1, r4, lsl #20
   46414:	orrge	r1, r1, r5
   46418:	popge	{r4, r5, pc}
   4641c:	mvn	r4, r4
   46420:	subs	r4, r4, #31
   46424:	bge	46460 <__assert_fail@plt+0x339e4>
   46428:	adds	r4, r4, #12
   4642c:	bgt	46448 <__assert_fail@plt+0x339cc>
   46430:	add	r4, r4, #20
   46434:	rsb	r2, r4, #32
   46438:	lsr	r0, r0, r4
   4643c:	orr	r0, r0, r1, lsl r2
   46440:	orr	r1, r5, r1, lsr r4
   46444:	pop	{r4, r5, pc}
   46448:	rsb	r4, r4, #12
   4644c:	rsb	r2, r4, #32
   46450:	lsr	r0, r0, r2
   46454:	orr	r0, r0, r1, lsl r4
   46458:	mov	r1, r5
   4645c:	pop	{r4, r5, pc}
   46460:	lsr	r0, r1, r4
   46464:	mov	r1, r5
   46468:	pop	{r4, r5, pc}
   4646c:	teq	r4, #0
   46470:	eor	r3, r3, #1048576	; 0x100000
   46474:	eoreq	r1, r1, #1048576	; 0x100000
   46478:	addeq	r4, r4, #1
   4647c:	subne	r5, r5, #1
   46480:	b	4630c <__assert_fail@plt+0x33890>
   46484:	mvns	ip, r4, asr #21
   46488:	mvnsne	ip, r5, asr #21
   4648c:	beq	464f4 <__assert_fail@plt+0x33a78>
   46490:	teq	r4, r5
   46494:	teqeq	r0, r2
   46498:	beq	464ac <__assert_fail@plt+0x33a30>
   4649c:	orrs	ip, r4, r0
   464a0:	moveq	r1, r3
   464a4:	moveq	r0, r2
   464a8:	pop	{r4, r5, pc}
   464ac:	teq	r1, r3
   464b0:	movne	r1, #0
   464b4:	movne	r0, #0
   464b8:	popne	{r4, r5, pc}
   464bc:	lsrs	ip, r4, #21
   464c0:	bne	464d4 <__assert_fail@plt+0x33a58>
   464c4:	lsls	r0, r0, #1
   464c8:	adcs	r1, r1, r1
   464cc:	orrcs	r1, r1, #-2147483648	; 0x80000000
   464d0:	pop	{r4, r5, pc}
   464d4:	adds	r4, r4, #4194304	; 0x400000
   464d8:	addcc	r1, r1, #1048576	; 0x100000
   464dc:	popcc	{r4, r5, pc}
   464e0:	and	r5, r1, #-2147483648	; 0x80000000
   464e4:	orr	r1, r5, #2130706432	; 0x7f000000
   464e8:	orr	r1, r1, #15728640	; 0xf00000
   464ec:	mov	r0, #0
   464f0:	pop	{r4, r5, pc}
   464f4:	mvns	ip, r4, asr #21
   464f8:	movne	r1, r3
   464fc:	movne	r0, r2
   46500:	mvnseq	ip, r5, asr #21
   46504:	movne	r3, r1
   46508:	movne	r2, r0
   4650c:	orrs	r4, r0, r1, lsl #12
   46510:	orrseq	r5, r2, r3, lsl #12
   46514:	teqeq	r1, r3
   46518:	orrne	r1, r1, #524288	; 0x80000
   4651c:	pop	{r4, r5, pc}
   46520:	teq	r0, #0
   46524:	moveq	r1, #0
   46528:	bxeq	lr
   4652c:	push	{r4, r5, lr}
   46530:	mov	r4, #1024	; 0x400
   46534:	add	r4, r4, #50	; 0x32
   46538:	mov	r5, #0
   4653c:	mov	r1, #0
   46540:	b	463bc <__assert_fail@plt+0x33940>
   46544:	teq	r0, #0
   46548:	moveq	r1, #0
   4654c:	bxeq	lr
   46550:	push	{r4, r5, lr}
   46554:	mov	r4, #1024	; 0x400
   46558:	add	r4, r4, #50	; 0x32
   4655c:	ands	r5, r0, #-2147483648	; 0x80000000
   46560:	rsbmi	r0, r0, #0
   46564:	mov	r1, #0
   46568:	b	463bc <__assert_fail@plt+0x33940>
   4656c:	lsls	r2, r0, #1
   46570:	asr	r1, r2, #3
   46574:	rrx	r1, r1
   46578:	lsl	r0, r2, #28
   4657c:	andsne	r3, r2, #-16777216	; 0xff000000
   46580:	teqne	r3, #-16777216	; 0xff000000
   46584:	eorne	r1, r1, #939524096	; 0x38000000
   46588:	bxne	lr
   4658c:	bics	r2, r2, #-16777216	; 0xff000000
   46590:	bxeq	lr
   46594:	teq	r3, #-16777216	; 0xff000000
   46598:	orreq	r1, r1, #524288	; 0x80000
   4659c:	bxeq	lr
   465a0:	push	{r4, r5, lr}
   465a4:	mov	r4, #896	; 0x380
   465a8:	and	r5, r1, #-2147483648	; 0x80000000
   465ac:	bic	r1, r1, #-2147483648	; 0x80000000
   465b0:	b	463bc <__assert_fail@plt+0x33940>
   465b4:	orrs	r2, r0, r1
   465b8:	bxeq	lr
   465bc:	push	{r4, r5, lr}
   465c0:	mov	r5, #0
   465c4:	b	465e4 <__assert_fail@plt+0x33b68>
   465c8:	orrs	r2, r0, r1
   465cc:	bxeq	lr
   465d0:	push	{r4, r5, lr}
   465d4:	ands	r5, r1, #-2147483648	; 0x80000000
   465d8:	bpl	465e4 <__assert_fail@plt+0x33b68>
   465dc:	rsbs	r0, r0, #0
   465e0:	rsc	r1, r1, #0
   465e4:	mov	r4, #1024	; 0x400
   465e8:	add	r4, r4, #50	; 0x32
   465ec:	lsrs	ip, r1, #22
   465f0:	beq	46360 <__assert_fail@plt+0x338e4>
   465f4:	mov	r2, #3
   465f8:	lsrs	ip, ip, #3
   465fc:	addne	r2, r2, #3
   46600:	lsrs	ip, ip, #3
   46604:	addne	r2, r2, #3
   46608:	add	r2, r2, ip, lsr #3
   4660c:	rsb	r3, r2, #32
   46610:	lsl	ip, r0, r3
   46614:	lsr	r0, r0, r2
   46618:	orr	r0, r0, r1, lsl r3
   4661c:	lsr	r1, r1, r2
   46620:	add	r4, r4, r2
   46624:	b	46360 <__assert_fail@plt+0x338e4>
   46628:	cmp	r3, #0
   4662c:	cmpeq	r2, #0
   46630:	bne	46654 <__assert_fail@plt+0x33bd8>
   46634:	cmp	r1, #0
   46638:	movlt	r1, #-2147483648	; 0x80000000
   4663c:	movlt	r0, #0
   46640:	blt	46650 <__assert_fail@plt+0x33bd4>
   46644:	cmpeq	r0, #0
   46648:	mvnne	r1, #-2147483648	; 0x80000000
   4664c:	mvnne	r0, #0
   46650:	b	46738 <__assert_fail@plt+0x33cbc>
   46654:	sub	sp, sp, #8
   46658:	push	{sp, lr}
   4665c:	cmp	r1, #0
   46660:	blt	46680 <__assert_fail@plt+0x33c04>
   46664:	cmp	r3, #0
   46668:	blt	466b4 <__assert_fail@plt+0x33c38>
   4666c:	bl	46788 <__assert_fail@plt+0x33d0c>
   46670:	ldr	lr, [sp, #4]
   46674:	add	sp, sp, #8
   46678:	pop	{r2, r3}
   4667c:	bx	lr
   46680:	rsbs	r0, r0, #0
   46684:	sbc	r1, r1, r1, lsl #1
   46688:	cmp	r3, #0
   4668c:	blt	466d8 <__assert_fail@plt+0x33c5c>
   46690:	bl	46788 <__assert_fail@plt+0x33d0c>
   46694:	ldr	lr, [sp, #4]
   46698:	add	sp, sp, #8
   4669c:	pop	{r2, r3}
   466a0:	rsbs	r0, r0, #0
   466a4:	sbc	r1, r1, r1, lsl #1
   466a8:	rsbs	r2, r2, #0
   466ac:	sbc	r3, r3, r3, lsl #1
   466b0:	bx	lr
   466b4:	rsbs	r2, r2, #0
   466b8:	sbc	r3, r3, r3, lsl #1
   466bc:	bl	46788 <__assert_fail@plt+0x33d0c>
   466c0:	ldr	lr, [sp, #4]
   466c4:	add	sp, sp, #8
   466c8:	pop	{r2, r3}
   466cc:	rsbs	r0, r0, #0
   466d0:	sbc	r1, r1, r1, lsl #1
   466d4:	bx	lr
   466d8:	rsbs	r2, r2, #0
   466dc:	sbc	r3, r3, r3, lsl #1
   466e0:	bl	46788 <__assert_fail@plt+0x33d0c>
   466e4:	ldr	lr, [sp, #4]
   466e8:	add	sp, sp, #8
   466ec:	pop	{r2, r3}
   466f0:	rsbs	r2, r2, #0
   466f4:	sbc	r3, r3, r3, lsl #1
   466f8:	bx	lr
   466fc:	cmp	r3, #0
   46700:	cmpeq	r2, #0
   46704:	bne	4671c <__assert_fail@plt+0x33ca0>
   46708:	cmp	r1, #0
   4670c:	cmpeq	r0, #0
   46710:	mvnne	r1, #0
   46714:	mvnne	r0, #0
   46718:	b	46738 <__assert_fail@plt+0x33cbc>
   4671c:	sub	sp, sp, #8
   46720:	push	{sp, lr}
   46724:	bl	46788 <__assert_fail@plt+0x33d0c>
   46728:	ldr	lr, [sp, #4]
   4672c:	add	sp, sp, #8
   46730:	pop	{r2, r3}
   46734:	bx	lr
   46738:	push	{r1, lr}
   4673c:	mov	r0, #8
   46740:	bl	12380 <raise@plt>
   46744:	pop	{r1, pc}
   46748:	vmov	d6, r0, r1
   4674c:	vldr	d7, [pc, #36]	; 46778 <__assert_fail@plt+0x33cfc>
   46750:	vldr	d5, [pc, #40]	; 46780 <__assert_fail@plt+0x33d04>
   46754:	vmul.f64	d7, d6, d7
   46758:	vcvt.u32.f64	s14, d7
   4675c:	vcvt.f64.u32	d4, s14
   46760:	vmov	r1, s14
   46764:	vmls.f64	d6, d4, d5
   46768:	vcvt.u32.f64	s15, d6
   4676c:	vmov	r0, s15
   46770:	bx	lr
   46774:	nop			; (mov r0, r0)
   46778:	andeq	r0, r0, r0
   4677c:	ldclcc	0, cr0, [r0]
   46780:	andeq	r0, r0, r0
   46784:	mvnsmi	r0, r0
   46788:	cmp	r1, r3
   4678c:	cmpeq	r0, r2
   46790:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   46794:	mov	r4, r0
   46798:	movcc	r0, #0
   4679c:	mov	r5, r1
   467a0:	ldr	lr, [sp, #36]	; 0x24
   467a4:	movcc	r1, r0
   467a8:	bcc	468a4 <__assert_fail@plt+0x33e28>
   467ac:	cmp	r3, #0
   467b0:	clzeq	ip, r2
   467b4:	clzne	ip, r3
   467b8:	addeq	ip, ip, #32
   467bc:	cmp	r5, #0
   467c0:	clzeq	r1, r4
   467c4:	addeq	r1, r1, #32
   467c8:	clzne	r1, r5
   467cc:	sub	ip, ip, r1
   467d0:	sub	sl, ip, #32
   467d4:	lsl	r9, r3, ip
   467d8:	rsb	fp, ip, #32
   467dc:	orr	r9, r9, r2, lsl sl
   467e0:	orr	r9, r9, r2, lsr fp
   467e4:	lsl	r8, r2, ip
   467e8:	cmp	r5, r9
   467ec:	cmpeq	r4, r8
   467f0:	movcc	r0, #0
   467f4:	movcc	r1, r0
   467f8:	bcc	46814 <__assert_fail@plt+0x33d98>
   467fc:	mov	r0, #1
   46800:	subs	r4, r4, r8
   46804:	lsl	r1, r0, sl
   46808:	orr	r1, r1, r0, lsr fp
   4680c:	lsl	r0, r0, ip
   46810:	sbc	r5, r5, r9
   46814:	cmp	ip, #0
   46818:	beq	468a4 <__assert_fail@plt+0x33e28>
   4681c:	lsr	r6, r8, #1
   46820:	orr	r6, r6, r9, lsl #31
   46824:	lsr	r7, r9, #1
   46828:	mov	r2, ip
   4682c:	b	46850 <__assert_fail@plt+0x33dd4>
   46830:	subs	r3, r4, r6
   46834:	sbc	r8, r5, r7
   46838:	adds	r3, r3, r3
   4683c:	adc	r8, r8, r8
   46840:	adds	r4, r3, #1
   46844:	adc	r5, r8, #0
   46848:	subs	r2, r2, #1
   4684c:	beq	4686c <__assert_fail@plt+0x33df0>
   46850:	cmp	r5, r7
   46854:	cmpeq	r4, r6
   46858:	bcs	46830 <__assert_fail@plt+0x33db4>
   4685c:	adds	r4, r4, r4
   46860:	adc	r5, r5, r5
   46864:	subs	r2, r2, #1
   46868:	bne	46850 <__assert_fail@plt+0x33dd4>
   4686c:	lsr	r3, r4, ip
   46870:	orr	r3, r3, r5, lsl fp
   46874:	lsr	r2, r5, ip
   46878:	orr	r3, r3, r5, lsr sl
   4687c:	adds	r0, r0, r4
   46880:	mov	r4, r3
   46884:	lsl	r3, r2, ip
   46888:	orr	r3, r3, r4, lsl sl
   4688c:	lsl	ip, r4, ip
   46890:	orr	r3, r3, r4, lsr fp
   46894:	adc	r1, r1, r5
   46898:	subs	r0, r0, ip
   4689c:	mov	r5, r2
   468a0:	sbc	r1, r1, r3
   468a4:	cmp	lr, #0
   468a8:	strdne	r4, [lr]
   468ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   468b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   468b4:	mov	r7, r0
   468b8:	ldr	r6, [pc, #72]	; 46908 <__assert_fail@plt+0x33e8c>
   468bc:	ldr	r5, [pc, #72]	; 4690c <__assert_fail@plt+0x33e90>
   468c0:	add	r6, pc, r6
   468c4:	add	r5, pc, r5
   468c8:	sub	r6, r6, r5
   468cc:	mov	r8, r1
   468d0:	mov	r9, r2
   468d4:	bl	12318 <pthread_mutex_unlock@plt-0x20>
   468d8:	asrs	r6, r6, #2
   468dc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   468e0:	mov	r4, #0
   468e4:	add	r4, r4, #1
   468e8:	ldr	r3, [r5], #4
   468ec:	mov	r2, r9
   468f0:	mov	r1, r8
   468f4:	mov	r0, r7
   468f8:	blx	r3
   468fc:	cmp	r6, r4
   46900:	bne	468e4 <__assert_fail@plt+0x33e68>
   46904:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   46908:	andeq	r6, r1, r4, lsr r6
   4690c:	andeq	r6, r1, ip, lsr #12
   46910:	bx	lr
   46914:	ldr	r3, [pc, #12]	; 46928 <__assert_fail@plt+0x33eac>
   46918:	mov	r1, #0
   4691c:	add	r3, pc, r3
   46920:	ldr	r2, [r3]
   46924:	b	127f4 <__cxa_atexit@plt>
   46928:	andeq	r6, r1, r0, ror #18

Disassembly of section .fini:

0004692c <.fini>:
   4692c:	push	{r3, lr}
   46930:	pop	{r3, pc}
