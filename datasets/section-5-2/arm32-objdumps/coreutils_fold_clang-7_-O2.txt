
../repos/coreutils/src/fold:     file format elf32-littlearm


Disassembly of section .init:

00010e0c <.init>:
   10e0c:	push	{r3, lr}
   10e10:	bl	110d8 <__assert_fail@plt+0x48>
   10e14:	pop	{r3, pc}

Disassembly of section .plt:

00010e18 <calloc@plt-0x14>:
   10e18:	push	{lr}		; (str lr, [sp, #-4]!)
   10e1c:	ldr	lr, [pc, #4]	; 10e28 <calloc@plt-0x4>
   10e20:	add	lr, pc, lr
   10e24:	ldr	pc, [lr, #8]!
   10e28:	ldrdeq	r6, [r1], -r8

00010e2c <calloc@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #90112	; 0x16000
   10e34:	ldr	pc, [ip, #472]!	; 0x1d8

00010e38 <fputs_unlocked@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #90112	; 0x16000
   10e40:	ldr	pc, [ip, #464]!	; 0x1d0

00010e44 <raise@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #90112	; 0x16000
   10e4c:	ldr	pc, [ip, #456]!	; 0x1c8

00010e50 <strcmp@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #90112	; 0x16000
   10e58:	ldr	pc, [ip, #448]!	; 0x1c0

00010e5c <posix_fadvise64@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #90112	; 0x16000
   10e64:	ldr	pc, [ip, #440]!	; 0x1b8

00010e68 <fflush@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #90112	; 0x16000
   10e70:	ldr	pc, [ip, #432]!	; 0x1b0

00010e74 <memmove@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #90112	; 0x16000
   10e7c:	ldr	pc, [ip, #424]!	; 0x1a8

00010e80 <free@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #90112	; 0x16000
   10e88:	ldr	pc, [ip, #416]!	; 0x1a0

00010e8c <_exit@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #90112	; 0x16000
   10e94:	ldr	pc, [ip, #408]!	; 0x198

00010e98 <memcpy@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #90112	; 0x16000
   10ea0:	ldr	pc, [ip, #400]!	; 0x190

00010ea4 <__strtoull_internal@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #90112	; 0x16000
   10eac:	ldr	pc, [ip, #392]!	; 0x188

00010eb0 <mbsinit@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #90112	; 0x16000
   10eb8:	ldr	pc, [ip, #384]!	; 0x180

00010ebc <fwrite_unlocked@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #90112	; 0x16000
   10ec4:	ldr	pc, [ip, #376]!	; 0x178

00010ec8 <memcmp@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #90112	; 0x16000
   10ed0:	ldr	pc, [ip, #368]!	; 0x170

00010ed4 <dcgettext@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #90112	; 0x16000
   10edc:	ldr	pc, [ip, #360]!	; 0x168

00010ee0 <realloc@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #90112	; 0x16000
   10ee8:	ldr	pc, [ip, #352]!	; 0x160

00010eec <textdomain@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #90112	; 0x16000
   10ef4:	ldr	pc, [ip, #344]!	; 0x158

00010ef8 <iswprint@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #90112	; 0x16000
   10f00:	ldr	pc, [ip, #336]!	; 0x150

00010f04 <fwrite@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #90112	; 0x16000
   10f0c:	ldr	pc, [ip, #328]!	; 0x148

00010f10 <lseek64@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #90112	; 0x16000
   10f18:	ldr	pc, [ip, #320]!	; 0x140

00010f1c <__ctype_get_mb_cur_max@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #90112	; 0x16000
   10f24:	ldr	pc, [ip, #312]!	; 0x138

00010f28 <__fpending@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #90112	; 0x16000
   10f30:	ldr	pc, [ip, #304]!	; 0x130

00010f34 <mbrtowc@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #90112	; 0x16000
   10f3c:	ldr	pc, [ip, #296]!	; 0x128

00010f40 <error@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #90112	; 0x16000
   10f48:	ldr	pc, [ip, #288]!	; 0x120

00010f4c <malloc@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #90112	; 0x16000
   10f54:	ldr	pc, [ip, #280]!	; 0x118

00010f58 <__libc_start_main@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #90112	; 0x16000
   10f60:	ldr	pc, [ip, #272]!	; 0x110

00010f64 <__freading@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #90112	; 0x16000
   10f6c:	ldr	pc, [ip, #264]!	; 0x108

00010f70 <__gmon_start__@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #90112	; 0x16000
   10f78:	ldr	pc, [ip, #256]!	; 0x100

00010f7c <getopt_long@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #90112	; 0x16000
   10f84:	ldr	pc, [ip, #248]!	; 0xf8

00010f88 <__ctype_b_loc@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #90112	; 0x16000
   10f90:	ldr	pc, [ip, #240]!	; 0xf0

00010f94 <exit@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #90112	; 0x16000
   10f9c:	ldr	pc, [ip, #232]!	; 0xe8

00010fa0 <strlen@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #90112	; 0x16000
   10fa8:	ldr	pc, [ip, #224]!	; 0xe0

00010fac <strchr@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #90112	; 0x16000
   10fb4:	ldr	pc, [ip, #216]!	; 0xd8

00010fb8 <__errno_location@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #90112	; 0x16000
   10fc0:	ldr	pc, [ip, #208]!	; 0xd0

00010fc4 <__cxa_atexit@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #90112	; 0x16000
   10fcc:	ldr	pc, [ip, #200]!	; 0xc8

00010fd0 <memset@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #90112	; 0x16000
   10fd8:	ldr	pc, [ip, #192]!	; 0xc0

00010fdc <__printf_chk@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #90112	; 0x16000
   10fe4:	ldr	pc, [ip, #184]!	; 0xb8

00010fe8 <fileno@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #90112	; 0x16000
   10ff0:	ldr	pc, [ip, #176]!	; 0xb0

00010ff4 <__fprintf_chk@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #90112	; 0x16000
   10ffc:	ldr	pc, [ip, #168]!	; 0xa8

00011000 <fclose@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #90112	; 0x16000
   11008:	ldr	pc, [ip, #160]!	; 0xa0

0001100c <fseeko64@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #90112	; 0x16000
   11014:	ldr	pc, [ip, #152]!	; 0x98

00011018 <__uflow@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #90112	; 0x16000
   11020:	ldr	pc, [ip, #144]!	; 0x90

00011024 <__overflow@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #90112	; 0x16000
   1102c:	ldr	pc, [ip, #136]!	; 0x88

00011030 <setlocale@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #90112	; 0x16000
   11038:	ldr	pc, [ip, #128]!	; 0x80

0001103c <strrchr@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #90112	; 0x16000
   11044:	ldr	pc, [ip, #120]!	; 0x78

00011048 <nl_langinfo@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #90112	; 0x16000
   11050:	ldr	pc, [ip, #112]!	; 0x70

00011054 <clearerr_unlocked@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #90112	; 0x16000
   1105c:	ldr	pc, [ip, #104]!	; 0x68

00011060 <fopen64@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #90112	; 0x16000
   11068:	ldr	pc, [ip, #96]!	; 0x60

0001106c <bindtextdomain@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #90112	; 0x16000
   11074:	ldr	pc, [ip, #88]!	; 0x58

00011078 <strncmp@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #90112	; 0x16000
   11080:	ldr	pc, [ip, #80]!	; 0x50

00011084 <abort@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #90112	; 0x16000
   1108c:	ldr	pc, [ip, #72]!	; 0x48

00011090 <__assert_fail@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #90112	; 0x16000
   11098:	ldr	pc, [ip, #64]!	; 0x40

Disassembly of section .text:

0001109c <.text>:
   1109c:	mov	fp, #0
   110a0:	mov	lr, #0
   110a4:	pop	{r1}		; (ldr r1, [sp], #4)
   110a8:	mov	r2, sp
   110ac:	push	{r2}		; (str r2, [sp, #-4]!)
   110b0:	push	{r0}		; (str r0, [sp, #-4]!)
   110b4:	ldr	ip, [pc, #16]	; 110cc <__assert_fail@plt+0x3c>
   110b8:	push	{ip}		; (str ip, [sp, #-4]!)
   110bc:	ldr	r0, [pc, #12]	; 110d0 <__assert_fail@plt+0x40>
   110c0:	ldr	r3, [pc, #12]	; 110d4 <__assert_fail@plt+0x44>
   110c4:	bl	10f58 <__libc_start_main@plt>
   110c8:	bl	11084 <abort@plt>
   110cc:	andeq	r5, r1, r4, lsl #21
   110d0:	andeq	r1, r1, r4, lsr #8
   110d4:	andeq	r5, r1, r4, lsr #20
   110d8:	ldr	r3, [pc, #20]	; 110f4 <__assert_fail@plt+0x64>
   110dc:	ldr	r2, [pc, #20]	; 110f8 <__assert_fail@plt+0x68>
   110e0:	add	r3, pc, r3
   110e4:	ldr	r2, [r3, r2]
   110e8:	cmp	r2, #0
   110ec:	bxeq	lr
   110f0:	b	10f70 <__gmon_start__@plt>
   110f4:	andeq	r5, r1, r8, lsl pc
   110f8:	ldrdeq	r0, [r0], -ip
   110fc:	ldr	r0, [pc, #24]	; 1111c <__assert_fail@plt+0x8c>
   11100:	ldr	r3, [pc, #24]	; 11120 <__assert_fail@plt+0x90>
   11104:	cmp	r3, r0
   11108:	bxeq	lr
   1110c:	ldr	r3, [pc, #16]	; 11124 <__assert_fail@plt+0x94>
   11110:	cmp	r3, #0
   11114:	bxeq	lr
   11118:	bx	r3
   1111c:	andeq	r7, r2, r0, lsr r1
   11120:	andeq	r7, r2, r0, lsr r1
   11124:	andeq	r0, r0, r0
   11128:	ldr	r0, [pc, #36]	; 11154 <__assert_fail@plt+0xc4>
   1112c:	ldr	r1, [pc, #36]	; 11158 <__assert_fail@plt+0xc8>
   11130:	sub	r1, r1, r0
   11134:	asr	r1, r1, #2
   11138:	add	r1, r1, r1, lsr #31
   1113c:	asrs	r1, r1, #1
   11140:	bxeq	lr
   11144:	ldr	r3, [pc, #16]	; 1115c <__assert_fail@plt+0xcc>
   11148:	cmp	r3, #0
   1114c:	bxeq	lr
   11150:	bx	r3
   11154:	andeq	r7, r2, r0, lsr r1
   11158:	andeq	r7, r2, r0, lsr r1
   1115c:	andeq	r0, r0, r0
   11160:	push	{r4, lr}
   11164:	ldr	r4, [pc, #24]	; 11184 <__assert_fail@plt+0xf4>
   11168:	ldrb	r3, [r4]
   1116c:	cmp	r3, #0
   11170:	popne	{r4, pc}
   11174:	bl	110fc <__assert_fail@plt+0x6c>
   11178:	mov	r3, #1
   1117c:	strb	r3, [r4]
   11180:	pop	{r4, pc}
   11184:	andeq	r7, r2, r4, asr r1
   11188:	b	11128 <__assert_fail@plt+0x98>
   1118c:	push	{fp, lr}
   11190:	mov	fp, sp
   11194:	sub	sp, sp, #56	; 0x38
   11198:	mov	r4, r0
   1119c:	cmp	r0, #0
   111a0:	bne	113e0 <__assert_fail@plt+0x350>
   111a4:	movw	r1, #23251	; 0x5ad3
   111a8:	mov	r0, #0
   111ac:	mov	r2, #5
   111b0:	movt	r1, #1
   111b4:	bl	10ed4 <dcgettext@plt>
   111b8:	mov	r1, r0
   111bc:	movw	r0, #29036	; 0x716c
   111c0:	movt	r0, #2
   111c4:	ldr	r2, [r0]
   111c8:	mov	r0, #1
   111cc:	bl	10fdc <__printf_chk@plt>
   111d0:	movw	r1, #23284	; 0x5af4
   111d4:	mov	r0, #0
   111d8:	mov	r2, #5
   111dc:	movt	r1, #1
   111e0:	bl	10ed4 <dcgettext@plt>
   111e4:	movw	r7, #29004	; 0x714c
   111e8:	movt	r7, #2
   111ec:	ldr	r1, [r7]
   111f0:	bl	10e38 <fputs_unlocked@plt>
   111f4:	movw	r1, #23675	; 0x5c7b
   111f8:	mov	r0, #0
   111fc:	mov	r2, #5
   11200:	movt	r1, #1
   11204:	bl	10ed4 <dcgettext@plt>
   11208:	ldr	r1, [r7]
   1120c:	bl	10e38 <fputs_unlocked@plt>
   11210:	movw	r1, #23731	; 0x5cb3
   11214:	mov	r0, #0
   11218:	mov	r2, #5
   1121c:	movt	r1, #1
   11220:	bl	10ed4 <dcgettext@plt>
   11224:	ldr	r1, [r7]
   11228:	bl	10e38 <fputs_unlocked@plt>
   1122c:	movw	r1, #23344	; 0x5b30
   11230:	mov	r0, #0
   11234:	mov	r2, #5
   11238:	movt	r1, #1
   1123c:	bl	10ed4 <dcgettext@plt>
   11240:	ldr	r1, [r7]
   11244:	bl	10e38 <fputs_unlocked@plt>
   11248:	movw	r1, #23491	; 0x5bc3
   1124c:	mov	r0, #0
   11250:	mov	r2, #5
   11254:	movt	r1, #1
   11258:	bl	10ed4 <dcgettext@plt>
   1125c:	ldr	r1, [r7]
   11260:	bl	10e38 <fputs_unlocked@plt>
   11264:	movw	r1, #23536	; 0x5bf0
   11268:	mov	r0, #0
   1126c:	mov	r2, #5
   11270:	movt	r1, #1
   11274:	bl	10ed4 <dcgettext@plt>
   11278:	ldr	r1, [r7]
   1127c:	bl	10e38 <fputs_unlocked@plt>
   11280:	movw	r0, #24288	; 0x5ee0
   11284:	mov	r2, #48	; 0x30
   11288:	mov	r6, sp
   1128c:	movw	r5, #23590	; 0x5c26
   11290:	movt	r0, #1
   11294:	movt	r5, #1
   11298:	add	r1, r0, #32
   1129c:	add	r3, r0, #16
   112a0:	vld1.64	{d18-d19}, [r0], r2
   112a4:	vld1.64	{d16-d17}, [r1]
   112a8:	vld1.64	{d20-d21}, [r3]
   112ac:	add	r1, r6, #32
   112b0:	vldr	d22, [r0]
   112b4:	add	r0, r6, #16
   112b8:	vst1.64	{d16-d17}, [r1]
   112bc:	movw	r1, #23806	; 0x5cfe
   112c0:	vst1.64	{d20-d21}, [r0]
   112c4:	mov	r0, r6
   112c8:	vst1.64	{d18-d19}, [r0], r2
   112cc:	movt	r1, #1
   112d0:	vstr	d22, [r0]
   112d4:	mov	r0, r5
   112d8:	bl	10e50 <strcmp@plt>
   112dc:	cmp	r0, #0
   112e0:	ldrne	r1, [r6, #8]!
   112e4:	cmpne	r1, #0
   112e8:	bne	112d4 <__assert_fail@plt+0x244>
   112ec:	ldr	r6, [r6, #4]
   112f0:	movw	r1, #23901	; 0x5d5d
   112f4:	mov	r0, #0
   112f8:	mov	r2, #5
   112fc:	movt	r1, #1
   11300:	bl	10ed4 <dcgettext@plt>
   11304:	movw	r2, #23645	; 0x5c5d
   11308:	movw	r3, #23924	; 0x5d74
   1130c:	mov	r1, r0
   11310:	mov	r0, #1
   11314:	movt	r2, #1
   11318:	movt	r3, #1
   1131c:	bl	10fdc <__printf_chk@plt>
   11320:	cmp	r6, #0
   11324:	mov	r0, #5
   11328:	mov	r1, #0
   1132c:	moveq	r6, r5
   11330:	bl	11030 <setlocale@plt>
   11334:	cmp	r0, #0
   11338:	beq	11370 <__assert_fail@plt+0x2e0>
   1133c:	movw	r1, #23964	; 0x5d9c
   11340:	mov	r2, #3
   11344:	movt	r1, #1
   11348:	bl	11078 <strncmp@plt>
   1134c:	cmp	r0, #0
   11350:	beq	11370 <__assert_fail@plt+0x2e0>
   11354:	movw	r1, #23968	; 0x5da0
   11358:	mov	r0, #0
   1135c:	mov	r2, #5
   11360:	movt	r1, #1
   11364:	bl	10ed4 <dcgettext@plt>
   11368:	ldr	r1, [r7]
   1136c:	bl	10e38 <fputs_unlocked@plt>
   11370:	movw	r1, #24039	; 0x5de7
   11374:	mov	r0, #0
   11378:	mov	r2, #5
   1137c:	movt	r1, #1
   11380:	bl	10ed4 <dcgettext@plt>
   11384:	movw	r2, #23924	; 0x5d74
   11388:	mov	r1, r0
   1138c:	mov	r0, #1
   11390:	mov	r3, r5
   11394:	movt	r2, #1
   11398:	bl	10fdc <__printf_chk@plt>
   1139c:	movw	r1, #24066	; 0x5e02
   113a0:	mov	r0, #0
   113a4:	mov	r2, #5
   113a8:	movt	r1, #1
   113ac:	bl	10ed4 <dcgettext@plt>
   113b0:	movw	r3, #24116	; 0x5e34
   113b4:	mov	r1, r0
   113b8:	movw	r0, #23834	; 0x5d1a
   113bc:	cmp	r6, r5
   113c0:	mov	r2, r6
   113c4:	movt	r0, #1
   113c8:	movt	r3, #1
   113cc:	moveq	r3, r0
   113d0:	mov	r0, #1
   113d4:	bl	10fdc <__printf_chk@plt>
   113d8:	mov	r0, r4
   113dc:	bl	10f94 <exit@plt>
   113e0:	movw	r0, #28992	; 0x7140
   113e4:	movw	r1, #23212	; 0x5aac
   113e8:	mov	r2, #5
   113ec:	movt	r0, #2
   113f0:	movt	r1, #1
   113f4:	ldr	r5, [r0]
   113f8:	mov	r0, #0
   113fc:	bl	10ed4 <dcgettext@plt>
   11400:	mov	r2, r0
   11404:	movw	r0, #29036	; 0x716c
   11408:	mov	r1, #1
   1140c:	movt	r0, #2
   11410:	ldr	r3, [r0]
   11414:	mov	r0, r5
   11418:	bl	10ff4 <__fprintf_chk@plt>
   1141c:	mov	r0, r4
   11420:	bl	10f94 <exit@plt>
   11424:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11428:	add	fp, sp, #28
   1142c:	sub	sp, sp, #28
   11430:	mov	r5, r0
   11434:	ldr	r0, [r1]
   11438:	mov	r4, r1
   1143c:	bl	11dec <__assert_fail@plt+0xd5c>
   11440:	movw	r1, #24116	; 0x5e34
   11444:	mov	r0, #6
   11448:	movt	r1, #1
   1144c:	bl	11030 <setlocale@plt>
   11450:	movw	r6, #23649	; 0x5c61
   11454:	movw	r1, #23595	; 0x5c2b
   11458:	movt	r6, #1
   1145c:	movt	r1, #1
   11460:	mov	r0, r6
   11464:	bl	1106c <bindtextdomain@plt>
   11468:	mov	r0, r6
   1146c:	bl	10eec <textdomain@plt>
   11470:	movw	r0, #6952	; 0x1b28
   11474:	movt	r0, #1
   11478:	bl	15a88 <__assert_fail@plt+0x49f8>
   1147c:	movw	r0, #29016	; 0x7158
   11480:	mov	r8, #0
   11484:	movw	r2, #24152	; 0x5e58
   11488:	movw	r3, #24188	; 0x5e7c
   1148c:	mov	r1, r4
   11490:	movt	r0, #2
   11494:	movt	r2, #1
   11498:	movt	r3, #1
   1149c:	str	r8, [sp]
   114a0:	strb	r8, [r0]
   114a4:	movw	r0, #29017	; 0x7159
   114a8:	movt	r0, #2
   114ac:	strb	r8, [r0]
   114b0:	movw	r0, #29018	; 0x715a
   114b4:	movt	r0, #2
   114b8:	strb	r8, [r0]
   114bc:	mov	r0, r5
   114c0:	bl	10f7c <getopt_long@plt>
   114c4:	mov	r7, #80	; 0x50
   114c8:	cmn	r0, #1
   114cc:	beq	115cc <__assert_fail@plt+0x53c>
   114d0:	movw	r9, #29008	; 0x7150
   114d4:	movw	sl, #24152	; 0x5e58
   114d8:	movw	r6, #24188	; 0x5e7c
   114dc:	movt	r9, #2
   114e0:	movt	sl, #1
   114e4:	movt	r6, #1
   114e8:	b	11514 <__assert_fail@plt+0x484>
   114ec:	cmp	r0, #98	; 0x62
   114f0:	bne	1165c <__assert_fail@plt+0x5cc>
   114f4:	movw	r0, #29017	; 0x7159
   114f8:	movt	r0, #2
   114fc:	b	11508 <__assert_fail@plt+0x478>
   11500:	movw	r0, #29018	; 0x715a
   11504:	movt	r0, #2
   11508:	mov	r1, #1
   1150c:	strb	r1, [r0]
   11510:	b	115ac <__assert_fail@plt+0x51c>
   11514:	sub	r1, r0, #48	; 0x30
   11518:	cmp	r1, #10
   1151c:	bcs	1154c <__assert_fail@plt+0x4bc>
   11520:	ldr	r1, [r9]
   11524:	cmp	r1, #0
   11528:	beq	11538 <__assert_fail@plt+0x4a8>
   1152c:	sub	r7, r1, #1
   11530:	str	r7, [r9]
   11534:	b	11568 <__assert_fail@plt+0x4d8>
   11538:	add	r7, sp, #26
   1153c:	strb	r8, [sp, #27]
   11540:	strb	r0, [sp, #26]
   11544:	str	r7, [r9]
   11548:	b	11568 <__assert_fail@plt+0x4d8>
   1154c:	cmp	r0, #114	; 0x72
   11550:	ble	114ec <__assert_fail@plt+0x45c>
   11554:	cmp	r0, #115	; 0x73
   11558:	beq	11500 <__assert_fail@plt+0x470>
   1155c:	cmp	r0, #119	; 0x77
   11560:	bne	116bc <__assert_fail@plt+0x62c>
   11564:	ldr	r7, [r9]
   11568:	movw	r1, #23619	; 0x5c43
   1156c:	mov	r0, #0
   11570:	mov	r2, #5
   11574:	movt	r1, #1
   11578:	bl	10ed4 <dcgettext@plt>
   1157c:	mvn	r1, #9
   11580:	mov	r2, #1
   11584:	mov	r3, #0
   11588:	stm	sp, {r1, r8}
   1158c:	movw	r1, #24116	; 0x5e34
   11590:	str	r0, [sp, #12]
   11594:	mov	r0, r7
   11598:	str	r8, [sp, #16]
   1159c:	movt	r1, #1
   115a0:	str	r1, [sp, #8]
   115a4:	bl	148a8 <__assert_fail@plt+0x3818>
   115a8:	mov	r7, r0
   115ac:	mov	r0, r5
   115b0:	mov	r1, r4
   115b4:	mov	r2, sl
   115b8:	mov	r3, r6
   115bc:	str	r8, [sp]
   115c0:	bl	10f7c <getopt_long@plt>
   115c4:	cmn	r0, #1
   115c8:	bne	11514 <__assert_fail@plt+0x484>
   115cc:	movw	r0, #28984	; 0x7138
   115d0:	movt	r0, #2
   115d4:	ldr	r0, [r0]
   115d8:	cmp	r0, r5
   115dc:	bne	115f8 <__assert_fail@plt+0x568>
   115e0:	movw	r0, #24444	; 0x5f7c
   115e4:	mov	r1, r7
   115e8:	movt	r0, #1
   115ec:	bl	116dc <__assert_fail@plt+0x64c>
   115f0:	mov	r6, r0
   115f4:	b	11624 <__assert_fail@plt+0x594>
   115f8:	mov	r6, #1
   115fc:	bge	11624 <__assert_fail@plt+0x594>
   11600:	sub	r5, r5, r0
   11604:	add	r4, r4, r0, lsl #2
   11608:	mov	r6, #1
   1160c:	ldr	r0, [r4], #4
   11610:	mov	r1, r7
   11614:	bl	116dc <__assert_fail@plt+0x64c>
   11618:	and	r6, r6, r0
   1161c:	subs	r5, r5, #1
   11620:	bne	1160c <__assert_fail@plt+0x57c>
   11624:	movw	r0, #29016	; 0x7158
   11628:	movt	r0, #2
   1162c:	ldrb	r0, [r0]
   11630:	cmp	r0, #1
   11634:	bne	11650 <__assert_fail@plt+0x5c0>
   11638:	movw	r0, #29000	; 0x7148
   1163c:	movt	r0, #2
   11640:	ldr	r0, [r0]
   11644:	bl	11c50 <__assert_fail@plt+0xbc0>
   11648:	cmn	r0, #1
   1164c:	beq	116c4 <__assert_fail@plt+0x634>
   11650:	eor	r0, r6, #1
   11654:	sub	sp, fp, #28
   11658:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1165c:	cmn	r0, #3
   11660:	beq	11674 <__assert_fail@plt+0x5e4>
   11664:	cmn	r0, #2
   11668:	bne	116bc <__assert_fail@plt+0x62c>
   1166c:	mov	r0, #0
   11670:	bl	1118c <__assert_fail@plt+0xfc>
   11674:	movw	r0, #28904	; 0x70e8
   11678:	movw	r2, #23659	; 0x5c6b
   1167c:	mov	r1, #0
   11680:	movt	r0, #2
   11684:	movt	r2, #1
   11688:	str	r1, [sp, #4]
   1168c:	movw	r1, #23590	; 0x5c26
   11690:	ldr	r3, [r0]
   11694:	movw	r0, #29004	; 0x714c
   11698:	str	r2, [sp]
   1169c:	movw	r2, #23645	; 0x5c5d
   116a0:	movt	r1, #1
   116a4:	movt	r0, #2
   116a8:	movt	r2, #1
   116ac:	ldr	r0, [r0]
   116b0:	bl	13fdc <__assert_fail@plt+0x2f4c>
   116b4:	mov	r0, #0
   116b8:	bl	10f94 <exit@plt>
   116bc:	mov	r0, #1
   116c0:	bl	1118c <__assert_fail@plt+0xfc>
   116c4:	bl	10fb8 <__errno_location@plt>
   116c8:	ldr	r1, [r0]
   116cc:	movw	r2, #24444	; 0x5f7c
   116d0:	mov	r0, #1
   116d4:	movt	r2, #1
   116d8:	bl	10f40 <error@plt>
   116dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116e0:	add	fp, sp, #28
   116e4:	sub	sp, sp, #20
   116e8:	str	r1, [sp, #16]
   116ec:	movw	r1, #24444	; 0x5f7c
   116f0:	mov	r6, r0
   116f4:	movt	r1, #1
   116f8:	bl	10e50 <strcmp@plt>
   116fc:	cmp	r0, #0
   11700:	beq	11a88 <__assert_fail@plt+0x9f8>
   11704:	movw	r1, #24369	; 0x5f31
   11708:	mov	r0, r6
   1170c:	movt	r1, #1
   11710:	bl	11060 <fopen64@plt>
   11714:	cmp	r0, #0
   11718:	beq	11aac <__assert_fail@plt+0xa1c>
   1171c:	mov	r1, #2
   11720:	str	r6, [sp, #4]
   11724:	str	r0, [sp, #8]
   11728:	bl	11c14 <__assert_fail@plt+0xb84>
   1172c:	b	1175c <__assert_fail@plt+0x6cc>
   11730:	mov	r1, r0
   11734:	movw	r0, #29020	; 0x715c
   11738:	mov	r2, r5
   1173c:	movt	r0, #2
   11740:	ldr	r0, [r0]
   11744:	strb	r1, [r0, r7]
   11748:	movw	r1, #29004	; 0x714c
   1174c:	movt	r1, #2
   11750:	ldr	r3, [r1]
   11754:	mov	r1, #1
   11758:	bl	10ebc <fwrite_unlocked@plt>
   1175c:	mov	sl, #0
   11760:	mov	r7, #0
   11764:	b	11780 <__assert_fail@plt+0x6f0>
   11768:	movw	r0, #29020	; 0x715c
   1176c:	ldr	r1, [sp, #12]
   11770:	movt	r0, #2
   11774:	ldr	r0, [r0]
   11778:	strb	r1, [r0, r7]
   1177c:	add	r7, r7, #1
   11780:	ldr	r0, [sp, #8]
   11784:	ldr	r2, [r0, #4]
   11788:	ldr	r1, [r0, #8]
   1178c:	cmp	r2, r1
   11790:	bcs	119f4 <__assert_fail@plt+0x964>
   11794:	add	r1, r2, #1
   11798:	str	r1, [r0, #4]
   1179c:	ldrb	r0, [r2]
   117a0:	str	r0, [sp, #12]
   117a4:	movw	r0, #29024	; 0x7160
   117a8:	add	r5, r7, #1
   117ac:	movt	r0, #2
   117b0:	ldr	r0, [r0]
   117b4:	cmp	r5, r0
   117b8:	bcc	117dc <__assert_fail@plt+0x74c>
   117bc:	movw	r0, #29020	; 0x715c
   117c0:	movw	r1, #29024	; 0x7160
   117c4:	movt	r0, #2
   117c8:	movt	r1, #2
   117cc:	mov	r4, r0
   117d0:	ldr	r0, [r0]
   117d4:	bl	14344 <__assert_fail@plt+0x32b4>
   117d8:	str	r0, [r4]
   117dc:	ldr	r0, [sp, #12]
   117e0:	cmp	r0, #10
   117e4:	bne	11818 <__assert_fail@plt+0x788>
   117e8:	b	11730 <__assert_fail@plt+0x6a0>
   117ec:	mov	r0, #10
   117f0:	add	r2, r7, #1
   117f4:	mov	r1, #1
   117f8:	strb	r0, [r5, r7]
   117fc:	movw	r0, #29004	; 0x714c
   11800:	movt	r0, #2
   11804:	ldr	r3, [r0]
   11808:	mov	r0, r5
   1180c:	bl	10ebc <fwrite_unlocked@plt>
   11810:	mov	sl, #0
   11814:	mov	r7, #0
   11818:	movw	r0, #29017	; 0x7159
   1181c:	movt	r0, #2
   11820:	ldrb	r0, [r0]
   11824:	cmp	r0, #0
   11828:	bne	1184c <__assert_fail@plt+0x7bc>
   1182c:	ldr	r0, [sp, #12]
   11830:	uxtb	r0, r0
   11834:	cmp	r0, #8
   11838:	beq	119b4 <__assert_fail@plt+0x924>
   1183c:	cmp	r0, #9
   11840:	beq	119c0 <__assert_fail@plt+0x930>
   11844:	cmp	r0, #13
   11848:	beq	119ec <__assert_fail@plt+0x95c>
   1184c:	add	sl, sl, #1
   11850:	ldr	r0, [sp, #16]
   11854:	cmp	sl, r0
   11858:	bls	11768 <__assert_fail@plt+0x6d8>
   1185c:	movw	r0, #29020	; 0x715c
   11860:	movt	r0, #2
   11864:	ldr	r5, [r0]
   11868:	movw	r0, #29018	; 0x715a
   1186c:	movt	r0, #2
   11870:	ldrb	r0, [r0]
   11874:	cmp	r0, #1
   11878:	bne	11948 <__assert_fail@plt+0x8b8>
   1187c:	add	r0, r5, r7
   11880:	mov	r9, #0
   11884:	sub	r4, r0, #1
   11888:	adds	r0, r7, r9
   1188c:	beq	11948 <__assert_fail@plt+0x8b8>
   11890:	mov	r6, r9
   11894:	bl	10f88 <__ctype_b_loc@plt>
   11898:	ldrb	r1, [r4, r9]
   1189c:	ldr	r0, [r0]
   118a0:	sub	r9, r9, #1
   118a4:	ldrb	r0, [r0, r1, lsl #1]
   118a8:	tst	r0, #1
   118ac:	beq	11888 <__assert_fail@plt+0x7f8>
   118b0:	add	r0, r7, r9
   118b4:	mov	r1, #1
   118b8:	add	r2, r0, #1
   118bc:	movw	r0, #29004	; 0x714c
   118c0:	movt	r0, #2
   118c4:	ldr	r3, [r0]
   118c8:	mov	r4, r0
   118cc:	mov	r0, r5
   118d0:	bl	10ebc <fwrite_unlocked@plt>
   118d4:	ldr	r0, [r4]
   118d8:	ldr	r1, [r0, #20]
   118dc:	ldr	r2, [r0, #24]
   118e0:	cmp	r1, r2
   118e4:	bcs	119d0 <__assert_fail@plt+0x940>
   118e8:	add	r2, r1, #1
   118ec:	str	r2, [r0, #20]
   118f0:	mov	r0, #10
   118f4:	strb	r0, [r1]
   118f8:	movw	r0, #29020	; 0x715c
   118fc:	mvn	r8, r9
   11900:	movt	r0, #2
   11904:	mov	r2, r8
   11908:	ldr	r5, [r0]
   1190c:	add	r0, r5, r7
   11910:	add	r0, r0, r9
   11914:	add	r1, r0, #1
   11918:	mov	r0, r5
   1191c:	bl	10e74 <memmove@plt>
   11920:	mov	sl, #0
   11924:	cmn	r9, #1
   11928:	mov	r7, #0
   1192c:	beq	11818 <__assert_fail@plt+0x788>
   11930:	movw	r0, #29017	; 0x7159
   11934:	mov	r1, #0
   11938:	mov	sl, #0
   1193c:	movt	r0, #2
   11940:	ldrb	r0, [r0]
   11944:	b	1196c <__assert_fail@plt+0x8dc>
   11948:	cmp	r7, #0
   1194c:	bne	117ec <__assert_fail@plt+0x75c>
   11950:	b	119dc <__assert_fail@plt+0x94c>
   11954:	mov	sl, #0
   11958:	b	119a0 <__assert_fail@plt+0x910>
   1195c:	and	r2, sl, #7
   11960:	add	r3, sl, #8
   11964:	sub	sl, r3, r2
   11968:	b	119a0 <__assert_fail@plt+0x910>
   1196c:	cmp	r0, #0
   11970:	bne	1199c <__assert_fail@plt+0x90c>
   11974:	ldrb	r2, [r5, -r1]
   11978:	cmp	r2, #13
   1197c:	beq	11954 <__assert_fail@plt+0x8c4>
   11980:	cmp	r2, #9
   11984:	beq	1195c <__assert_fail@plt+0x8cc>
   11988:	cmp	r2, #8
   1198c:	bne	1199c <__assert_fail@plt+0x90c>
   11990:	cmp	sl, #0
   11994:	subne	sl, sl, #1
   11998:	b	119a0 <__assert_fail@plt+0x910>
   1199c:	add	sl, sl, #1
   119a0:	sub	r1, r1, #1
   119a4:	cmp	r6, r1
   119a8:	bne	1196c <__assert_fail@plt+0x8dc>
   119ac:	mov	r7, r8
   119b0:	b	11818 <__assert_fail@plt+0x788>
   119b4:	cmp	sl, #0
   119b8:	subne	sl, sl, #1
   119bc:	b	11850 <__assert_fail@plt+0x7c0>
   119c0:	and	r0, sl, #7
   119c4:	add	r1, sl, #8
   119c8:	sub	sl, r1, r0
   119cc:	b	11850 <__assert_fail@plt+0x7c0>
   119d0:	mov	r1, #10
   119d4:	bl	11024 <__overflow@plt>
   119d8:	b	118f8 <__assert_fail@plt+0x868>
   119dc:	ldr	r0, [sp, #12]
   119e0:	strb	r0, [r5, r7]
   119e4:	mov	r7, #1
   119e8:	b	11780 <__assert_fail@plt+0x6f0>
   119ec:	mov	sl, #0
   119f0:	b	11768 <__assert_fail@plt+0x6d8>
   119f4:	bl	11018 <__uflow@plt>
   119f8:	cmn	r0, #1
   119fc:	bne	117a0 <__assert_fail@plt+0x710>
   11a00:	bl	10fb8 <__errno_location@plt>
   11a04:	ldr	r5, [sp, #8]
   11a08:	mov	r8, r0
   11a0c:	ldr	r4, [r0]
   11a10:	cmp	r7, #0
   11a14:	ldrb	r0, [r5]
   11a18:	lsl	r6, r0, #26
   11a1c:	beq	11a44 <__assert_fail@plt+0x9b4>
   11a20:	movw	r0, #29004	; 0x714c
   11a24:	mov	r1, #1
   11a28:	mov	r2, r7
   11a2c:	movt	r0, #2
   11a30:	ldr	r3, [r0]
   11a34:	movw	r0, #29020	; 0x715c
   11a38:	movt	r0, #2
   11a3c:	ldr	r0, [r0]
   11a40:	bl	10ebc <fwrite_unlocked@plt>
   11a44:	and	r4, r4, r6, asr #31
   11a48:	ldr	r6, [sp, #4]
   11a4c:	movw	r1, #24444	; 0x5f7c
   11a50:	movt	r1, #1
   11a54:	mov	r0, r6
   11a58:	bl	10e50 <strcmp@plt>
   11a5c:	cmp	r0, #0
   11a60:	beq	11ab8 <__assert_fail@plt+0xa28>
   11a64:	mov	r0, r5
   11a68:	bl	11c50 <__assert_fail@plt+0xbc0>
   11a6c:	cmp	r4, #0
   11a70:	bne	11a7c <__assert_fail@plt+0x9ec>
   11a74:	cmp	r0, #0
   11a78:	ldrne	r4, [r8]
   11a7c:	cmp	r4, #0
   11a80:	bne	11ac8 <__assert_fail@plt+0xa38>
   11a84:	b	11af8 <__assert_fail@plt+0xa68>
   11a88:	movw	r0, #29016	; 0x7158
   11a8c:	mov	r1, #1
   11a90:	movt	r0, #2
   11a94:	strb	r1, [r0]
   11a98:	movw	r0, #29000	; 0x7148
   11a9c:	movt	r0, #2
   11aa0:	ldr	r0, [r0]
   11aa4:	cmp	r0, #0
   11aa8:	bne	1171c <__assert_fail@plt+0x68c>
   11aac:	bl	10fb8 <__errno_location@plt>
   11ab0:	ldr	r4, [r0]
   11ab4:	b	11ac8 <__assert_fail@plt+0xa38>
   11ab8:	mov	r0, r5
   11abc:	bl	11054 <clearerr_unlocked@plt>
   11ac0:	cmp	r4, #0
   11ac4:	beq	11af8 <__assert_fail@plt+0xa68>
   11ac8:	mov	r0, #0
   11acc:	mov	r1, #3
   11ad0:	mov	r2, r6
   11ad4:	mov	r5, #0
   11ad8:	bl	13774 <__assert_fail@plt+0x26e4>
   11adc:	movw	r2, #24375	; 0x5f37
   11ae0:	mov	r3, r0
   11ae4:	mov	r0, #0
   11ae8:	mov	r1, r4
   11aec:	movt	r2, #1
   11af0:	bl	10f40 <error@plt>
   11af4:	b	11afc <__assert_fail@plt+0xa6c>
   11af8:	mov	r5, #1
   11afc:	mov	r0, r5
   11b00:	sub	sp, fp, #28
   11b04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b08:	movw	r1, #29028	; 0x7164
   11b0c:	movt	r1, #2
   11b10:	str	r0, [r1]
   11b14:	bx	lr
   11b18:	movw	r1, #29032	; 0x7168
   11b1c:	movt	r1, #2
   11b20:	strb	r0, [r1]
   11b24:	bx	lr
   11b28:	push	{r4, r5, r6, sl, fp, lr}
   11b2c:	add	fp, sp, #16
   11b30:	sub	sp, sp, #8
   11b34:	movw	r0, #29004	; 0x714c
   11b38:	movt	r0, #2
   11b3c:	ldr	r0, [r0]
   11b40:	bl	15628 <__assert_fail@plt+0x4598>
   11b44:	cmp	r0, #0
   11b48:	beq	11b70 <__assert_fail@plt+0xae0>
   11b4c:	movw	r0, #29032	; 0x7168
   11b50:	movt	r0, #2
   11b54:	ldrb	r0, [r0]
   11b58:	cmp	r0, #0
   11b5c:	beq	11b90 <__assert_fail@plt+0xb00>
   11b60:	bl	10fb8 <__errno_location@plt>
   11b64:	ldr	r0, [r0]
   11b68:	cmp	r0, #32
   11b6c:	bne	11b90 <__assert_fail@plt+0xb00>
   11b70:	movw	r0, #28992	; 0x7140
   11b74:	movt	r0, #2
   11b78:	ldr	r0, [r0]
   11b7c:	bl	15628 <__assert_fail@plt+0x4598>
   11b80:	cmp	r0, #0
   11b84:	subeq	sp, fp, #16
   11b88:	popeq	{r4, r5, r6, sl, fp, pc}
   11b8c:	b	11c00 <__assert_fail@plt+0xb70>
   11b90:	movw	r1, #24359	; 0x5f27
   11b94:	mov	r0, #0
   11b98:	mov	r2, #5
   11b9c:	movt	r1, #1
   11ba0:	bl	10ed4 <dcgettext@plt>
   11ba4:	mov	r4, r0
   11ba8:	movw	r0, #29028	; 0x7164
   11bac:	movt	r0, #2
   11bb0:	ldr	r6, [r0]
   11bb4:	bl	10fb8 <__errno_location@plt>
   11bb8:	ldr	r5, [r0]
   11bbc:	cmp	r6, #0
   11bc0:	bne	11bdc <__assert_fail@plt+0xb4c>
   11bc4:	movw	r2, #24375	; 0x5f37
   11bc8:	mov	r0, #0
   11bcc:	mov	r1, r5
   11bd0:	mov	r3, r4
   11bd4:	movt	r2, #1
   11bd8:	b	11bfc <__assert_fail@plt+0xb6c>
   11bdc:	mov	r0, r6
   11be0:	bl	13698 <__assert_fail@plt+0x2608>
   11be4:	movw	r2, #24371	; 0x5f33
   11be8:	mov	r3, r0
   11bec:	str	r4, [sp]
   11bf0:	mov	r0, #0
   11bf4:	mov	r1, r5
   11bf8:	movt	r2, #1
   11bfc:	bl	10f40 <error@plt>
   11c00:	movw	r0, #28908	; 0x70ec
   11c04:	movt	r0, #2
   11c08:	ldr	r0, [r0]
   11c0c:	bl	10e8c <_exit@plt>
   11c10:	b	10e5c <posix_fadvise64@plt>
   11c14:	cmp	r0, #0
   11c18:	bxeq	lr
   11c1c:	push	{r4, sl, fp, lr}
   11c20:	add	fp, sp, #8
   11c24:	sub	sp, sp, #16
   11c28:	mov	r4, r1
   11c2c:	bl	10fe8 <fileno@plt>
   11c30:	mov	r1, #0
   11c34:	mov	r2, #0
   11c38:	mov	r3, #0
   11c3c:	str	r1, [sp]
   11c40:	stmib	sp, {r1, r4}
   11c44:	bl	10e5c <posix_fadvise64@plt>
   11c48:	sub	sp, fp, #8
   11c4c:	pop	{r4, sl, fp, pc}
   11c50:	push	{r4, r5, r6, sl, fp, lr}
   11c54:	add	fp, sp, #16
   11c58:	sub	sp, sp, #8
   11c5c:	mov	r4, r0
   11c60:	bl	10fe8 <fileno@plt>
   11c64:	cmn	r0, #1
   11c68:	ble	11cdc <__assert_fail@plt+0xc4c>
   11c6c:	mov	r0, r4
   11c70:	bl	10f64 <__freading@plt>
   11c74:	cmp	r0, #0
   11c78:	beq	11ca4 <__assert_fail@plt+0xc14>
   11c7c:	mov	r0, r4
   11c80:	bl	10fe8 <fileno@plt>
   11c84:	mov	r1, #1
   11c88:	mov	r2, #0
   11c8c:	mov	r3, #0
   11c90:	str	r1, [sp]
   11c94:	bl	10f10 <lseek64@plt>
   11c98:	and	r0, r0, r1
   11c9c:	cmn	r0, #1
   11ca0:	beq	11cdc <__assert_fail@plt+0xc4c>
   11ca4:	mov	r0, r4
   11ca8:	bl	11cec <__assert_fail@plt+0xc5c>
   11cac:	cmp	r0, #0
   11cb0:	beq	11cdc <__assert_fail@plt+0xc4c>
   11cb4:	bl	10fb8 <__errno_location@plt>
   11cb8:	ldr	r6, [r0]
   11cbc:	mov	r5, r0
   11cc0:	mov	r0, r4
   11cc4:	bl	11000 <fclose@plt>
   11cc8:	cmp	r6, #0
   11ccc:	strne	r6, [r5]
   11cd0:	mvnne	r0, #0
   11cd4:	sub	sp, fp, #16
   11cd8:	pop	{r4, r5, r6, sl, fp, pc}
   11cdc:	mov	r0, r4
   11ce0:	sub	sp, fp, #16
   11ce4:	pop	{r4, r5, r6, sl, fp, lr}
   11ce8:	b	11000 <fclose@plt>
   11cec:	push	{r4, sl, fp, lr}
   11cf0:	add	fp, sp, #8
   11cf4:	sub	sp, sp, #8
   11cf8:	mov	r4, r0
   11cfc:	cmp	r0, #0
   11d00:	beq	11d1c <__assert_fail@plt+0xc8c>
   11d04:	mov	r0, r4
   11d08:	bl	10f64 <__freading@plt>
   11d0c:	cmp	r0, #0
   11d10:	ldrbne	r0, [r4, #1]
   11d14:	tstne	r0, #1
   11d18:	bne	11d2c <__assert_fail@plt+0xc9c>
   11d1c:	mov	r0, r4
   11d20:	sub	sp, fp, #8
   11d24:	pop	{r4, sl, fp, lr}
   11d28:	b	10e68 <fflush@plt>
   11d2c:	mov	r0, #1
   11d30:	mov	r2, #0
   11d34:	mov	r3, #0
   11d38:	str	r0, [sp]
   11d3c:	mov	r0, r4
   11d40:	bl	11d48 <__assert_fail@plt+0xcb8>
   11d44:	b	11d1c <__assert_fail@plt+0xc8c>
   11d48:	push	{r4, r5, r6, r7, fp, lr}
   11d4c:	add	fp, sp, #16
   11d50:	sub	sp, sp, #8
   11d54:	mov	r4, r0
   11d58:	ldr	r0, [r0, #4]
   11d5c:	mov	r5, r3
   11d60:	mov	r6, r2
   11d64:	ldr	r1, [r4, #8]
   11d68:	cmp	r1, r0
   11d6c:	bne	11d88 <__assert_fail@plt+0xcf8>
   11d70:	ldrd	r0, [r4, #16]
   11d74:	cmp	r1, r0
   11d78:	bne	11d88 <__assert_fail@plt+0xcf8>
   11d7c:	ldr	r0, [r4, #36]	; 0x24
   11d80:	cmp	r0, #0
   11d84:	beq	11da0 <__assert_fail@plt+0xd10>
   11d88:	mov	r0, r4
   11d8c:	mov	r2, r6
   11d90:	mov	r3, r5
   11d94:	sub	sp, fp, #16
   11d98:	pop	{r4, r5, r6, r7, fp, lr}
   11d9c:	b	1100c <fseeko64@plt>
   11da0:	ldr	r7, [fp, #8]
   11da4:	mov	r0, r4
   11da8:	bl	10fe8 <fileno@plt>
   11dac:	mov	r2, r6
   11db0:	mov	r3, r5
   11db4:	str	r7, [sp]
   11db8:	bl	10f10 <lseek64@plt>
   11dbc:	and	r2, r0, r1
   11dc0:	cmn	r2, #1
   11dc4:	mvneq	r0, #0
   11dc8:	subeq	sp, fp, #16
   11dcc:	popeq	{r4, r5, r6, r7, fp, pc}
   11dd0:	strd	r0, [r4, #80]	; 0x50
   11dd4:	ldr	r0, [r4]
   11dd8:	bic	r0, r0, #16
   11ddc:	str	r0, [r4]
   11de0:	mov	r0, #0
   11de4:	sub	sp, fp, #16
   11de8:	pop	{r4, r5, r6, r7, fp, pc}
   11dec:	push	{r4, r5, fp, lr}
   11df0:	add	fp, sp, #8
   11df4:	cmp	r0, #0
   11df8:	beq	11e8c <__assert_fail@plt+0xdfc>
   11dfc:	mov	r1, #47	; 0x2f
   11e00:	mov	r4, r0
   11e04:	bl	1103c <strrchr@plt>
   11e08:	cmp	r0, #0
   11e0c:	mov	r5, r4
   11e10:	addne	r5, r0, #1
   11e14:	sub	r0, r5, r4
   11e18:	cmp	r0, #7
   11e1c:	blt	11e70 <__assert_fail@plt+0xde0>
   11e20:	movw	r1, #24434	; 0x5f72
   11e24:	sub	r0, r5, #7
   11e28:	mov	r2, #7
   11e2c:	movt	r1, #1
   11e30:	bl	11078 <strncmp@plt>
   11e34:	cmp	r0, #0
   11e38:	bne	11e70 <__assert_fail@plt+0xde0>
   11e3c:	movw	r1, #24442	; 0x5f7a
   11e40:	mov	r0, r5
   11e44:	mov	r2, #3
   11e48:	movt	r1, #1
   11e4c:	bl	11078 <strncmp@plt>
   11e50:	cmp	r0, #0
   11e54:	beq	11e60 <__assert_fail@plt+0xdd0>
   11e58:	mov	r4, r5
   11e5c:	b	11e70 <__assert_fail@plt+0xde0>
   11e60:	movw	r0, #28976	; 0x7130
   11e64:	add	r4, r5, #3
   11e68:	movt	r0, #2
   11e6c:	str	r4, [r0]
   11e70:	movw	r0, #28980	; 0x7134
   11e74:	movt	r0, #2
   11e78:	str	r4, [r0]
   11e7c:	movw	r0, #29036	; 0x716c
   11e80:	movt	r0, #2
   11e84:	str	r4, [r0]
   11e88:	pop	{r4, r5, fp, pc}
   11e8c:	movw	r0, #28992	; 0x7140
   11e90:	mov	r1, #55	; 0x37
   11e94:	mov	r2, #1
   11e98:	movt	r0, #2
   11e9c:	ldr	r3, [r0]
   11ea0:	movw	r0, #24378	; 0x5f3a
   11ea4:	movt	r0, #1
   11ea8:	bl	10f04 <fwrite@plt>
   11eac:	bl	11084 <abort@plt>
   11eb0:	push	{r4, r5, r6, sl, fp, lr}
   11eb4:	add	fp, sp, #16
   11eb8:	mov	r4, r0
   11ebc:	movw	r0, #29040	; 0x7170
   11ec0:	movt	r0, #2
   11ec4:	cmp	r4, #0
   11ec8:	moveq	r4, r0
   11ecc:	bl	10fb8 <__errno_location@plt>
   11ed0:	ldr	r6, [r0]
   11ed4:	mov	r5, r0
   11ed8:	mov	r0, r4
   11edc:	mov	r1, #48	; 0x30
   11ee0:	bl	14670 <__assert_fail@plt+0x35e0>
   11ee4:	str	r6, [r5]
   11ee8:	pop	{r4, r5, r6, sl, fp, pc}
   11eec:	movw	r1, #29040	; 0x7170
   11ef0:	cmp	r0, #0
   11ef4:	movt	r1, #2
   11ef8:	movne	r1, r0
   11efc:	ldr	r0, [r1]
   11f00:	bx	lr
   11f04:	movw	r2, #29040	; 0x7170
   11f08:	cmp	r0, #0
   11f0c:	movt	r2, #2
   11f10:	movne	r2, r0
   11f14:	str	r1, [r2]
   11f18:	bx	lr
   11f1c:	movw	r3, #29040	; 0x7170
   11f20:	cmp	r0, #0
   11f24:	movt	r3, #2
   11f28:	movne	r3, r0
   11f2c:	ubfx	r0, r1, #5, #3
   11f30:	and	r1, r1, #31
   11f34:	add	r0, r3, r0, lsl #2
   11f38:	ldr	r3, [r0, #8]
   11f3c:	eor	r2, r2, r3, lsr r1
   11f40:	and	r2, r2, #1
   11f44:	eor	r2, r3, r2, lsl r1
   11f48:	str	r2, [r0, #8]
   11f4c:	mov	r0, #1
   11f50:	and	r0, r0, r3, lsr r1
   11f54:	bx	lr
   11f58:	movw	r2, #29040	; 0x7170
   11f5c:	cmp	r0, #0
   11f60:	movt	r2, #2
   11f64:	movne	r2, r0
   11f68:	ldr	r0, [r2, #4]
   11f6c:	str	r1, [r2, #4]
   11f70:	bx	lr
   11f74:	movw	r3, #29040	; 0x7170
   11f78:	cmp	r0, #0
   11f7c:	movt	r3, #2
   11f80:	movne	r3, r0
   11f84:	cmp	r1, #0
   11f88:	mov	r0, #10
   11f8c:	cmpne	r2, #0
   11f90:	str	r0, [r3]
   11f94:	bne	11fa4 <__assert_fail@plt+0xf14>
   11f98:	push	{fp, lr}
   11f9c:	mov	fp, sp
   11fa0:	bl	11084 <abort@plt>
   11fa4:	str	r1, [r3, #40]	; 0x28
   11fa8:	str	r2, [r3, #44]	; 0x2c
   11fac:	bx	lr
   11fb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fb4:	add	fp, sp, #28
   11fb8:	sub	sp, sp, #20
   11fbc:	mov	r7, r0
   11fc0:	ldr	r0, [fp, #8]
   11fc4:	movw	r5, #29040	; 0x7170
   11fc8:	mov	r8, r3
   11fcc:	mov	r9, r2
   11fd0:	mov	sl, r1
   11fd4:	movt	r5, #2
   11fd8:	cmp	r0, #0
   11fdc:	movne	r5, r0
   11fe0:	bl	10fb8 <__errno_location@plt>
   11fe4:	mov	r4, r0
   11fe8:	ldm	r5, {r0, r1}
   11fec:	ldr	r2, [r5, #40]	; 0x28
   11ff0:	ldr	r3, [r5, #44]	; 0x2c
   11ff4:	add	r5, r5, #8
   11ff8:	ldr	r6, [r4]
   11ffc:	stm	sp, {r0, r1, r5}
   12000:	str	r2, [sp, #12]
   12004:	str	r3, [sp, #16]
   12008:	mov	r0, r7
   1200c:	mov	r1, sl
   12010:	mov	r2, r9
   12014:	mov	r3, r8
   12018:	bl	12028 <__assert_fail@plt+0xf98>
   1201c:	str	r6, [r4]
   12020:	sub	sp, fp, #28
   12024:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12028:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1202c:	add	fp, sp, #28
   12030:	sub	sp, sp, #156	; 0x9c
   12034:	str	r0, [sp, #80]	; 0x50
   12038:	ldr	r0, [fp, #12]
   1203c:	mov	r6, r1
   12040:	mov	r9, r3
   12044:	str	r2, [fp, #-84]	; 0xffffffac
   12048:	and	r1, r0, #4
   1204c:	str	r1, [sp, #32]
   12050:	and	r1, r0, #1
   12054:	str	r1, [sp, #36]	; 0x24
   12058:	ubfx	r4, r0, #1, #1
   1205c:	bl	10f1c <__ctype_get_mb_cur_max@plt>
   12060:	str	r0, [sp, #40]	; 0x28
   12064:	ldr	r0, [fp, #24]
   12068:	ldr	r7, [fp, #8]
   1206c:	mov	r1, #0
   12070:	mov	r5, #1
   12074:	str	r1, [fp, #-56]	; 0xffffffc8
   12078:	mov	r1, #0
   1207c:	str	r1, [sp, #60]	; 0x3c
   12080:	str	r0, [sp, #76]	; 0x4c
   12084:	ldr	r0, [fp, #20]
   12088:	str	r0, [sp, #72]	; 0x48
   1208c:	mov	r0, #0
   12090:	str	r0, [sp, #56]	; 0x38
   12094:	mov	r0, #0
   12098:	str	r0, [sp, #92]	; 0x5c
   1209c:	mov	r0, #0
   120a0:	str	r0, [fp, #-76]	; 0xffffffb4
   120a4:	mov	r0, #0
   120a8:	cmp	r7, #10
   120ac:	bhi	1302c <__assert_fail@plt+0x1f9c>
   120b0:	add	r1, pc, #28
   120b4:	mov	sl, r6
   120b8:	ldr	r6, [sp, #80]	; 0x50
   120bc:	ldr	ip, [fp, #-84]	; 0xffffffac
   120c0:	mov	r8, #0
   120c4:	mov	r2, #1
   120c8:	mov	r3, #0
   120cc:	mov	lr, r9
   120d0:	ldr	pc, [r1, r7, lsl #2]
   120d4:			; <UNDEFINED> instruction: 0x000121b8
   120d8:	andeq	r2, r1, r4, ror #3
   120dc:	andeq	r2, r1, r8, lsr #3
   120e0:	andeq	r2, r1, r0, lsr #3
   120e4:	ldrdeq	r2, [r1], -r8
   120e8:	andeq	r2, r1, ip, lsr #4
   120ec:	andeq	r2, r1, r8, asr #3
   120f0:	andeq	r2, r1, r8, lsl #5
   120f4:	andeq	r2, r1, r0, lsl #2
   120f8:	andeq	r2, r1, r0, lsl #2
   120fc:	andeq	r2, r1, r8, lsr #2
   12100:	movw	r0, #24524	; 0x5fcc
   12104:	mov	r1, r7
   12108:	movt	r0, #1
   1210c:	bl	13a38 <__assert_fail@plt+0x29a8>
   12110:	str	r0, [sp, #72]	; 0x48
   12114:	movw	r0, #24526	; 0x5fce
   12118:	mov	r1, r7
   1211c:	movt	r0, #1
   12120:	bl	13a38 <__assert_fail@plt+0x29a8>
   12124:	str	r0, [sp, #76]	; 0x4c
   12128:	str	r5, [fp, #-48]	; 0xffffffd0
   1212c:	mov	r8, #0
   12130:	mov	r5, r7
   12134:	tst	r4, #1
   12138:	bne	12170 <__assert_fail@plt+0x10e0>
   1213c:	ldr	r0, [sp, #72]	; 0x48
   12140:	ldrb	r0, [r0]
   12144:	cmp	r0, #0
   12148:	beq	12170 <__assert_fail@plt+0x10e0>
   1214c:	ldr	r1, [sp, #72]	; 0x48
   12150:	mov	r8, #0
   12154:	add	r1, r1, #1
   12158:	cmp	r8, sl
   1215c:	strbcc	r0, [r6, r8]
   12160:	ldrb	r0, [r1, r8]
   12164:	add	r8, r8, #1
   12168:	cmp	r0, #0
   1216c:	bne	12158 <__assert_fail@plt+0x10c8>
   12170:	ldr	r7, [sp, #76]	; 0x4c
   12174:	mov	r0, r7
   12178:	bl	10fa0 <strlen@plt>
   1217c:	str	r7, [sp, #92]	; 0x5c
   12180:	mov	r7, r5
   12184:	ldr	ip, [fp, #-84]	; 0xffffffac
   12188:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1218c:	str	r0, [fp, #-76]	; 0xffffffb4
   12190:	mov	r2, #1
   12194:	mov	r3, r4
   12198:	mov	lr, r9
   1219c:	b	12288 <__assert_fail@plt+0x11f8>
   121a0:	mov	r0, #1
   121a4:	b	121e4 <__assert_fail@plt+0x1154>
   121a8:	tst	r4, #1
   121ac:	bne	121e4 <__assert_fail@plt+0x1154>
   121b0:	mov	r2, r0
   121b4:	b	1220c <__assert_fail@plt+0x117c>
   121b8:	mov	r7, #0
   121bc:	mov	r8, #0
   121c0:	mov	r2, r0
   121c4:	b	12284 <__assert_fail@plt+0x11f4>
   121c8:	mov	r0, #1
   121cc:	mov	r8, #0
   121d0:	mov	r7, #5
   121d4:	b	12240 <__assert_fail@plt+0x11b0>
   121d8:	mov	r2, #1
   121dc:	tst	r4, #1
   121e0:	beq	1220c <__assert_fail@plt+0x117c>
   121e4:	mov	r1, #1
   121e8:	mov	r8, #0
   121ec:	mov	r7, #2
   121f0:	mov	r2, r0
   121f4:	mov	r3, #1
   121f8:	str	r1, [fp, #-76]	; 0xffffffb4
   121fc:	movw	r1, #24526	; 0x5fce
   12200:	movt	r1, #1
   12204:	str	r1, [sp, #92]	; 0x5c
   12208:	b	12288 <__assert_fail@plt+0x11f8>
   1220c:	cmp	sl, #0
   12210:	mov	r8, #1
   12214:	mov	r7, #2
   12218:	movne	r0, #39	; 0x27
   1221c:	strbne	r0, [r6]
   12220:	movw	r0, #24526	; 0x5fce
   12224:	movt	r0, #1
   12228:	b	12278 <__assert_fail@plt+0x11e8>
   1222c:	mov	r7, #5
   12230:	tst	r4, #1
   12234:	beq	1225c <__assert_fail@plt+0x11cc>
   12238:	mov	r0, #1
   1223c:	mov	r8, #0
   12240:	str	r0, [fp, #-76]	; 0xffffffb4
   12244:	movw	r0, #24522	; 0x5fca
   12248:	mov	r2, #1
   1224c:	mov	r3, #1
   12250:	movt	r0, #1
   12254:	str	r0, [sp, #92]	; 0x5c
   12258:	b	12288 <__assert_fail@plt+0x11f8>
   1225c:	cmp	sl, #0
   12260:	mov	r8, #1
   12264:	mov	r2, #1
   12268:	movne	r0, #34	; 0x22
   1226c:	strbne	r0, [r6]
   12270:	movw	r0, #24522	; 0x5fca
   12274:	movt	r0, #1
   12278:	str	r0, [sp, #92]	; 0x5c
   1227c:	mov	r0, #1
   12280:	str	r0, [fp, #-76]	; 0xffffffb4
   12284:	mov	r3, #0
   12288:	ldr	r0, [fp, #16]
   1228c:	str	r3, [fp, #-72]	; 0xffffffb8
   12290:	str	r7, [fp, #-64]	; 0xffffffc0
   12294:	str	r2, [sp, #84]	; 0x54
   12298:	cmp	r0, #0
   1229c:	movwne	r0, #1
   122a0:	and	r0, r0, r3
   122a4:	str	r0, [fp, #-88]	; 0xffffffa8
   122a8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   122ac:	cmp	r0, #0
   122b0:	movwne	r0, #1
   122b4:	subs	r4, r7, #2
   122b8:	mov	r7, #0
   122bc:	and	r1, r0, r3
   122c0:	str	r4, [fp, #-80]	; 0xffffffb0
   122c4:	and	r1, r2, r1
   122c8:	str	r1, [sp, #48]	; 0x30
   122cc:	clz	r1, r4
   122d0:	lsr	r1, r1, #5
   122d4:	and	r1, r1, r3
   122d8:	eor	r3, r3, #1
   122dc:	str	r1, [sp, #64]	; 0x40
   122e0:	mov	r1, r4
   122e4:	str	r3, [sp, #88]	; 0x58
   122e8:	movwne	r1, #1
   122ec:	orr	r3, r1, r3
   122f0:	and	r1, r1, r2
   122f4:	and	r0, r0, r1
   122f8:	str	r3, [sp, #68]	; 0x44
   122fc:	str	r1, [fp, #-68]	; 0xffffffbc
   12300:	str	r0, [fp, #-60]	; 0xffffffc4
   12304:	eor	r0, r2, #1
   12308:	str	r0, [sp, #52]	; 0x34
   1230c:	cmn	lr, #1
   12310:	beq	12320 <__assert_fail@plt+0x1290>
   12314:	cmp	r7, lr
   12318:	bne	1232c <__assert_fail@plt+0x129c>
   1231c:	b	12e54 <__assert_fail@plt+0x1dc4>
   12320:	ldrb	r0, [ip, r7]
   12324:	cmp	r0, #0
   12328:	beq	12e5c <__assert_fail@plt+0x1dcc>
   1232c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12330:	mov	r9, #0
   12334:	str	r5, [fp, #-48]	; 0xffffffd0
   12338:	cmp	r0, #0
   1233c:	beq	12370 <__assert_fail@plt+0x12e0>
   12340:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12344:	add	r4, r7, r0
   12348:	cmp	r0, #2
   1234c:	bcc	12368 <__assert_fail@plt+0x12d8>
   12350:	cmn	lr, #1
   12354:	bne	12368 <__assert_fail@plt+0x12d8>
   12358:	mov	r0, ip
   1235c:	bl	10fa0 <strlen@plt>
   12360:	ldr	ip, [fp, #-84]	; 0xffffffac
   12364:	mov	lr, r0
   12368:	cmp	r4, lr
   1236c:	bls	12378 <__assert_fail@plt+0x12e8>
   12370:	mov	r0, #0
   12374:	b	123b8 <__assert_fail@plt+0x1328>
   12378:	ldr	r1, [sp, #92]	; 0x5c
   1237c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12380:	add	r0, ip, r7
   12384:	mov	r4, lr
   12388:	bl	10ec8 <memcmp@plt>
   1238c:	ldr	r2, [sp, #88]	; 0x58
   12390:	cmp	r0, #0
   12394:	mov	r1, r0
   12398:	movwne	r1, #1
   1239c:	orr	r1, r1, r2
   123a0:	tst	r1, #1
   123a4:	beq	12eec <__assert_fail@plt+0x1e5c>
   123a8:	ldr	ip, [fp, #-84]	; 0xffffffac
   123ac:	clz	r0, r0
   123b0:	mov	lr, r4
   123b4:	lsr	r0, r0, #5
   123b8:	str	r0, [fp, #-52]	; 0xffffffcc
   123bc:	ldrb	r5, [ip, r7]
   123c0:	cmp	r5, #126	; 0x7e
   123c4:	bhi	1277c <__assert_fail@plt+0x16ec>
   123c8:	add	r3, pc, #16
   123cc:	mov	r4, #1
   123d0:	mov	r2, #110	; 0x6e
   123d4:	mov	r0, #97	; 0x61
   123d8:	mov	r1, #0
   123dc:	ldr	pc, [r3, r5, lsl #2]
   123e0:	andeq	r2, r1, r8, ror r6
   123e4:	andeq	r2, r1, ip, ror r7
   123e8:	andeq	r2, r1, ip, ror r7
   123ec:	andeq	r2, r1, ip, ror r7
   123f0:	andeq	r2, r1, ip, ror r7
   123f4:	andeq	r2, r1, ip, ror r7
   123f8:	andeq	r2, r1, ip, ror r7
   123fc:	andeq	r2, r1, r0, lsr r8
   12400:	andeq	r2, r1, r8, asr r6
   12404:	andeq	r2, r1, r0, asr r6
   12408:	andeq	r2, r1, r4, ror #12
   1240c:	andeq	r2, r1, r4, ror #13
   12410:	andeq	r2, r1, r8, asr #12
   12414:	andeq	r2, r1, r0, ror #12
   12418:	andeq	r2, r1, ip, ror r7
   1241c:	andeq	r2, r1, ip, ror r7
   12420:	andeq	r2, r1, ip, ror r7
   12424:	andeq	r2, r1, ip, ror r7
   12428:	andeq	r2, r1, ip, ror r7
   1242c:	andeq	r2, r1, ip, ror r7
   12430:	andeq	r2, r1, ip, ror r7
   12434:	andeq	r2, r1, ip, ror r7
   12438:	andeq	r2, r1, ip, ror r7
   1243c:	andeq	r2, r1, ip, ror r7
   12440:	andeq	r2, r1, ip, ror r7
   12444:	andeq	r2, r1, ip, ror r7
   12448:	andeq	r2, r1, ip, ror r7
   1244c:	andeq	r2, r1, ip, ror r7
   12450:	andeq	r2, r1, ip, ror r7
   12454:	andeq	r2, r1, ip, ror r7
   12458:	andeq	r2, r1, ip, ror r7
   1245c:	andeq	r2, r1, ip, ror r7
   12460:	andeq	r2, r1, r8, ror #15
   12464:	andeq	r2, r1, ip, ror #15
   12468:	andeq	r2, r1, ip, ror #15
   1246c:	strdeq	r2, [r1], -r0
   12470:	andeq	r2, r1, ip, ror #15
   12474:	ldrdeq	r2, [r1], -ip
   12478:	andeq	r2, r1, ip, ror #15
   1247c:	andeq	r2, r1, ip, ror #13
   12480:	andeq	r2, r1, ip, ror #15
   12484:	andeq	r2, r1, ip, ror #15
   12488:	andeq	r2, r1, ip, ror #15
   1248c:	ldrdeq	r2, [r1], -ip
   12490:	ldrdeq	r2, [r1], -ip
   12494:	ldrdeq	r2, [r1], -ip
   12498:	ldrdeq	r2, [r1], -ip
   1249c:	ldrdeq	r2, [r1], -ip
   124a0:	ldrdeq	r2, [r1], -ip
   124a4:	ldrdeq	r2, [r1], -ip
   124a8:	ldrdeq	r2, [r1], -ip
   124ac:	ldrdeq	r2, [r1], -ip
   124b0:	ldrdeq	r2, [r1], -ip
   124b4:	ldrdeq	r2, [r1], -ip
   124b8:	ldrdeq	r2, [r1], -ip
   124bc:	ldrdeq	r2, [r1], -ip
   124c0:	ldrdeq	r2, [r1], -ip
   124c4:	ldrdeq	r2, [r1], -ip
   124c8:	ldrdeq	r2, [r1], -ip
   124cc:	andeq	r2, r1, ip, ror #15
   124d0:	andeq	r2, r1, ip, ror #15
   124d4:	andeq	r2, r1, ip, ror #15
   124d8:	andeq	r2, r1, ip, ror #15
   124dc:			; <UNDEFINED> instruction: 0x000126b8
   124e0:	andeq	r2, r1, ip, ror r7
   124e4:	ldrdeq	r2, [r1], -ip
   124e8:	ldrdeq	r2, [r1], -ip
   124ec:	ldrdeq	r2, [r1], -ip
   124f0:	ldrdeq	r2, [r1], -ip
   124f4:	ldrdeq	r2, [r1], -ip
   124f8:	ldrdeq	r2, [r1], -ip
   124fc:	ldrdeq	r2, [r1], -ip
   12500:	ldrdeq	r2, [r1], -ip
   12504:	ldrdeq	r2, [r1], -ip
   12508:	ldrdeq	r2, [r1], -ip
   1250c:	ldrdeq	r2, [r1], -ip
   12510:	ldrdeq	r2, [r1], -ip
   12514:	ldrdeq	r2, [r1], -ip
   12518:	ldrdeq	r2, [r1], -ip
   1251c:	ldrdeq	r2, [r1], -ip
   12520:	ldrdeq	r2, [r1], -ip
   12524:	ldrdeq	r2, [r1], -ip
   12528:	ldrdeq	r2, [r1], -ip
   1252c:	ldrdeq	r2, [r1], -ip
   12530:	ldrdeq	r2, [r1], -ip
   12534:	ldrdeq	r2, [r1], -ip
   12538:	ldrdeq	r2, [r1], -ip
   1253c:	ldrdeq	r2, [r1], -ip
   12540:	ldrdeq	r2, [r1], -ip
   12544:	ldrdeq	r2, [r1], -ip
   12548:	ldrdeq	r2, [r1], -ip
   1254c:	andeq	r2, r1, ip, ror #15
   12550:	andeq	r2, r1, r4, lsr #12
   12554:	ldrdeq	r2, [r1], -ip
   12558:	andeq	r2, r1, ip, ror #15
   1255c:	ldrdeq	r2, [r1], -ip
   12560:	andeq	r2, r1, ip, ror #15
   12564:	ldrdeq	r2, [r1], -ip
   12568:	ldrdeq	r2, [r1], -ip
   1256c:	ldrdeq	r2, [r1], -ip
   12570:	ldrdeq	r2, [r1], -ip
   12574:	ldrdeq	r2, [r1], -ip
   12578:	ldrdeq	r2, [r1], -ip
   1257c:	ldrdeq	r2, [r1], -ip
   12580:	ldrdeq	r2, [r1], -ip
   12584:	ldrdeq	r2, [r1], -ip
   12588:	ldrdeq	r2, [r1], -ip
   1258c:	ldrdeq	r2, [r1], -ip
   12590:	ldrdeq	r2, [r1], -ip
   12594:	ldrdeq	r2, [r1], -ip
   12598:	ldrdeq	r2, [r1], -ip
   1259c:	ldrdeq	r2, [r1], -ip
   125a0:	ldrdeq	r2, [r1], -ip
   125a4:	ldrdeq	r2, [r1], -ip
   125a8:	ldrdeq	r2, [r1], -ip
   125ac:	ldrdeq	r2, [r1], -ip
   125b0:	ldrdeq	r2, [r1], -ip
   125b4:	ldrdeq	r2, [r1], -ip
   125b8:	ldrdeq	r2, [r1], -ip
   125bc:	ldrdeq	r2, [r1], -ip
   125c0:	ldrdeq	r2, [r1], -ip
   125c4:	ldrdeq	r2, [r1], -ip
   125c8:	ldrdeq	r2, [r1], -ip
   125cc:	andeq	r2, r1, r4, lsl #12
   125d0:	andeq	r2, r1, ip, ror #15
   125d4:	andeq	r2, r1, r4, lsl #12
   125d8:	strdeq	r2, [r1], -r0
   125dc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   125e0:	cmp	r0, #0
   125e4:	beq	12844 <__assert_fail@plt+0x17b4>
   125e8:	ldr	r0, [fp, #16]
   125ec:	b	12848 <__assert_fail@plt+0x17b8>
   125f0:	mov	r4, #0
   125f4:	cmp	r7, #0
   125f8:	beq	127e8 <__assert_fail@plt+0x1758>
   125fc:	mov	r9, #0
   12600:	b	125dc <__assert_fail@plt+0x154c>
   12604:	mov	r4, #0
   12608:	cmn	lr, #1
   1260c:	beq	127cc <__assert_fail@plt+0x173c>
   12610:	cmp	r7, #0
   12614:	bne	125fc <__assert_fail@plt+0x156c>
   12618:	cmp	lr, #1
   1261c:	beq	127e8 <__assert_fail@plt+0x1758>
   12620:	b	125fc <__assert_fail@plt+0x156c>
   12624:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12628:	cmp	r0, #2
   1262c:	bne	1280c <__assert_fail@plt+0x177c>
   12630:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12634:	tst	r0, #1
   12638:	bne	12f08 <__assert_fail@plt+0x1e78>
   1263c:	mov	r9, #0
   12640:	mov	r0, #92	; 0x5c
   12644:	b	12820 <__assert_fail@plt+0x1790>
   12648:	mov	r0, #102	; 0x66
   1264c:	b	12830 <__assert_fail@plt+0x17a0>
   12650:	mov	r2, #116	; 0x74
   12654:	b	12664 <__assert_fail@plt+0x15d4>
   12658:	mov	r0, #98	; 0x62
   1265c:	b	12830 <__assert_fail@plt+0x17a0>
   12660:	mov	r2, #114	; 0x72
   12664:	ldr	r0, [sp, #68]	; 0x44
   12668:	tst	r0, #1
   1266c:	mov	r0, r2
   12670:	bne	12830 <__assert_fail@plt+0x17a0>
   12674:	b	12f08 <__assert_fail@plt+0x1e78>
   12678:	ldr	r0, [sp, #84]	; 0x54
   1267c:	tst	r0, #1
   12680:	beq	12920 <__assert_fail@plt+0x1890>
   12684:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12688:	tst	r0, #1
   1268c:	bne	13018 <__assert_fail@plt+0x1f88>
   12690:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12694:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12698:	cmp	r0, #2
   1269c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   126a0:	movwne	r0, #1
   126a4:	orr	r0, r0, r2
   126a8:	tst	r0, #1
   126ac:	beq	12cf0 <__assert_fail@plt+0x1c60>
   126b0:	mov	r0, r8
   126b4:	b	12d24 <__assert_fail@plt+0x1c94>
   126b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   126bc:	mov	r9, #0
   126c0:	mov	r5, #63	; 0x3f
   126c4:	cmp	r0, #5
   126c8:	beq	12ad4 <__assert_fail@plt+0x1a44>
   126cc:	cmp	r0, #2
   126d0:	bne	12b78 <__assert_fail@plt+0x1ae8>
   126d4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   126d8:	tst	r0, #1
   126dc:	beq	12b7c <__assert_fail@plt+0x1aec>
   126e0:	b	12f08 <__assert_fail@plt+0x1e78>
   126e4:	mov	r0, #118	; 0x76
   126e8:	b	12830 <__assert_fail@plt+0x17a0>
   126ec:	mov	r0, #1
   126f0:	mov	r5, #39	; 0x27
   126f4:	str	r0, [sp, #60]	; 0x3c
   126f8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   126fc:	cmp	r0, #2
   12700:	bne	12774 <__assert_fail@plt+0x16e4>
   12704:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12708:	tst	r0, #1
   1270c:	bne	12f08 <__assert_fail@plt+0x1e78>
   12710:	ldr	r2, [sp, #56]	; 0x38
   12714:	clz	r1, sl
   12718:	mov	r9, #0
   1271c:	lsr	r1, r1, #5
   12720:	cmp	r2, #0
   12724:	mov	r0, r2
   12728:	movwne	r0, #1
   1272c:	orrs	r0, r0, r1
   12730:	moveq	r2, sl
   12734:	moveq	sl, r0
   12738:	cmp	r8, sl
   1273c:	str	r2, [sp, #56]	; 0x38
   12740:	movcc	r0, #39	; 0x27
   12744:	strbcc	r0, [r6, r8]
   12748:	add	r0, r8, #1
   1274c:	cmp	r0, sl
   12750:	movcc	r1, #92	; 0x5c
   12754:	strbcc	r1, [r6, r0]
   12758:	add	r0, r8, #2
   1275c:	add	r8, r8, #3
   12760:	cmp	r0, sl
   12764:	movcc	r1, #39	; 0x27
   12768:	strbcc	r1, [r6, r0]
   1276c:	mov	r0, #0
   12770:	str	r0, [fp, #-56]	; 0xffffffc8
   12774:	mov	r4, #1
   12778:	b	125dc <__assert_fail@plt+0x154c>
   1277c:	ldr	r0, [sp, #40]	; 0x28
   12780:	cmp	r0, #1
   12784:	bne	1294c <__assert_fail@plt+0x18bc>
   12788:	str	lr, [sp, #28]
   1278c:	bl	10f88 <__ctype_b_loc@plt>
   12790:	ldr	r0, [r0]
   12794:	ldr	ip, [fp, #-84]	; 0xffffffac
   12798:	mov	r1, #1
   1279c:	add	r0, r0, r5, lsl #1
   127a0:	ldrb	r0, [r0, #1]
   127a4:	ubfx	r4, r0, #6, #1
   127a8:	ldr	r0, [sp, #52]	; 0x34
   127ac:	mov	r2, r1
   127b0:	cmp	r1, #1
   127b4:	orr	r0, r4, r0
   127b8:	bhi	12b84 <__assert_fail@plt+0x1af4>
   127bc:	tst	r0, #1
   127c0:	beq	12b84 <__assert_fail@plt+0x1af4>
   127c4:	ldr	lr, [sp, #28]
   127c8:	b	125dc <__assert_fail@plt+0x154c>
   127cc:	cmp	r7, #0
   127d0:	ldrbeq	r0, [ip, #1]
   127d4:	cmpeq	r0, #0
   127d8:	beq	127e8 <__assert_fail@plt+0x1758>
   127dc:	mvn	lr, #0
   127e0:	mov	r9, #0
   127e4:	b	125dc <__assert_fail@plt+0x154c>
   127e8:	mov	r1, #1
   127ec:	ldr	r0, [fp, #-64]	; 0xffffffc0
   127f0:	cmp	r0, #2
   127f4:	bne	12804 <__assert_fail@plt+0x1774>
   127f8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   127fc:	tst	r0, #1
   12800:	bne	12f08 <__assert_fail@plt+0x1e78>
   12804:	mov	r4, r1
   12808:	b	125dc <__assert_fail@plt+0x154c>
   1280c:	ldr	r1, [sp, #48]	; 0x30
   12810:	mov	r9, #0
   12814:	mov	r0, #92	; 0x5c
   12818:	cmp	r1, #0
   1281c:	beq	12830 <__assert_fail@plt+0x17a0>
   12820:	mov	r4, #0
   12824:	cmp	r9, #0
   12828:	beq	12dbc <__assert_fail@plt+0x1d2c>
   1282c:	b	12df8 <__assert_fail@plt+0x1d68>
   12830:	ldr	r1, [sp, #84]	; 0x54
   12834:	mov	r4, #0
   12838:	mov	r9, #0
   1283c:	tst	r1, #1
   12840:	bne	12880 <__assert_fail@plt+0x17f0>
   12844:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12848:	cmp	r0, #0
   1284c:	mov	r0, r5
   12850:	beq	12874 <__assert_fail@plt+0x17e4>
   12854:	ldr	r1, [fp, #16]
   12858:	ubfx	r0, r5, #5, #3
   1285c:	mov	r2, #1
   12860:	ldr	r0, [r1, r0, lsl #2]
   12864:	and	r1, r5, #31
   12868:	tst	r0, r2, lsl r1
   1286c:	mov	r0, r5
   12870:	bne	12880 <__assert_fail@plt+0x17f0>
   12874:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12878:	cmp	r1, #0
   1287c:	beq	12db4 <__assert_fail@plt+0x1d24>
   12880:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12884:	tst	r1, #1
   12888:	bne	12ee0 <__assert_fail@plt+0x1e50>
   1288c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12890:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12894:	cmp	r1, #2
   12898:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1289c:	movwne	r1, #1
   128a0:	orr	r1, r1, r2
   128a4:	tst	r1, #1
   128a8:	beq	128b4 <__assert_fail@plt+0x1824>
   128ac:	ldr	r5, [fp, #-48]	; 0xffffffd0
   128b0:	b	128f0 <__assert_fail@plt+0x1860>
   128b4:	cmp	r8, sl
   128b8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   128bc:	movcc	r1, #39	; 0x27
   128c0:	strbcc	r1, [r6, r8]
   128c4:	add	r1, r8, #1
   128c8:	cmp	r1, sl
   128cc:	movcc	r2, #36	; 0x24
   128d0:	strbcc	r2, [r6, r1]
   128d4:	add	r1, r8, #2
   128d8:	add	r8, r8, #3
   128dc:	cmp	r1, sl
   128e0:	movcc	r2, #39	; 0x27
   128e4:	strbcc	r2, [r6, r1]
   128e8:	mov	r1, #1
   128ec:	str	r1, [fp, #-56]	; 0xffffffc8
   128f0:	cmp	r8, sl
   128f4:	movcc	r1, #92	; 0x5c
   128f8:	strbcc	r1, [r6, r8]
   128fc:	add	r8, r8, #1
   12900:	cmp	r8, sl
   12904:	and	r5, r5, r4
   12908:	add	r7, r7, #1
   1290c:	strbcc	r0, [r6, r8]
   12910:	add	r8, r8, #1
   12914:	cmn	lr, #1
   12918:	bne	12314 <__assert_fail@plt+0x1284>
   1291c:	b	12320 <__assert_fail@plt+0x1290>
   12920:	ldr	r0, [sp, #36]	; 0x24
   12924:	mov	r4, #0
   12928:	mov	r9, #0
   1292c:	mov	r5, #0
   12930:	cmp	r0, #0
   12934:	beq	12844 <__assert_fail@plt+0x17b4>
   12938:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1293c:	add	r7, r7, #1
   12940:	cmn	lr, #1
   12944:	bne	12314 <__assert_fail@plt+0x1284>
   12948:	b	12320 <__assert_fail@plt+0x1290>
   1294c:	mov	r0, #0
   12950:	cmn	lr, #1
   12954:	str	r0, [fp, #-36]	; 0xffffffdc
   12958:	str	r0, [fp, #-40]	; 0xffffffd8
   1295c:	bne	12970 <__assert_fail@plt+0x18e0>
   12960:	mov	r0, ip
   12964:	bl	10fa0 <strlen@plt>
   12968:	ldr	ip, [fp, #-84]	; 0xffffffac
   1296c:	mov	lr, r0
   12970:	add	r0, ip, r7
   12974:	mov	r4, #1
   12978:	mov	r6, #0
   1297c:	str	lr, [sp, #28]
   12980:	str	r0, [sp, #24]
   12984:	sub	r0, fp, #40	; 0x28
   12988:	mov	r3, r0
   1298c:	str	r6, [sp, #44]	; 0x2c
   12990:	add	r6, r6, r7
   12994:	sub	r0, fp, #44	; 0x2c
   12998:	add	r1, ip, r6
   1299c:	sub	r2, lr, r6
   129a0:	bl	1570c <__assert_fail@plt+0x467c>
   129a4:	cmp	r0, #0
   129a8:	beq	12e40 <__assert_fail@plt+0x1db0>
   129ac:	cmn	r0, #1
   129b0:	beq	12e00 <__assert_fail@plt+0x1d70>
   129b4:	ldr	lr, [sp, #28]
   129b8:	cmn	r0, #2
   129bc:	beq	12e08 <__assert_fail@plt+0x1d78>
   129c0:	ldr	r2, [sp, #64]	; 0x40
   129c4:	cmp	r0, #2
   129c8:	mov	r1, #0
   129cc:	movwcc	r1, #1
   129d0:	eor	r2, r2, #1
   129d4:	orrs	r1, r2, r1
   129d8:	bne	12a98 <__assert_fail@plt+0x1a08>
   129dc:	ldr	r1, [sp, #44]	; 0x2c
   129e0:	ldr	r2, [sp, #24]
   129e4:	add	r1, r2, r1
   129e8:	mov	r2, #1
   129ec:	ldrb	r3, [r1, r2]
   129f0:	sub	r3, r3, #91	; 0x5b
   129f4:	cmp	r3, #33	; 0x21
   129f8:	bhi	12a8c <__assert_fail@plt+0x19fc>
   129fc:	add	r6, pc, #0
   12a00:	ldr	pc, [r6, r3, lsl #2]
   12a04:	andeq	r2, r1, r0, lsl #30
   12a08:	andeq	r2, r1, r0, lsl #30
   12a0c:	andeq	r2, r1, ip, lsl #21
   12a10:	andeq	r2, r1, r0, lsl #30
   12a14:	andeq	r2, r1, ip, lsl #21
   12a18:	andeq	r2, r1, r0, lsl #30
   12a1c:	andeq	r2, r1, ip, lsl #21
   12a20:	andeq	r2, r1, ip, lsl #21
   12a24:	andeq	r2, r1, ip, lsl #21
   12a28:	andeq	r2, r1, ip, lsl #21
   12a2c:	andeq	r2, r1, ip, lsl #21
   12a30:	andeq	r2, r1, ip, lsl #21
   12a34:	andeq	r2, r1, ip, lsl #21
   12a38:	andeq	r2, r1, ip, lsl #21
   12a3c:	andeq	r2, r1, ip, lsl #21
   12a40:	andeq	r2, r1, ip, lsl #21
   12a44:	andeq	r2, r1, ip, lsl #21
   12a48:	andeq	r2, r1, ip, lsl #21
   12a4c:	andeq	r2, r1, ip, lsl #21
   12a50:	andeq	r2, r1, ip, lsl #21
   12a54:	andeq	r2, r1, ip, lsl #21
   12a58:	andeq	r2, r1, ip, lsl #21
   12a5c:	andeq	r2, r1, ip, lsl #21
   12a60:	andeq	r2, r1, ip, lsl #21
   12a64:	andeq	r2, r1, ip, lsl #21
   12a68:	andeq	r2, r1, ip, lsl #21
   12a6c:	andeq	r2, r1, ip, lsl #21
   12a70:	andeq	r2, r1, ip, lsl #21
   12a74:	andeq	r2, r1, ip, lsl #21
   12a78:	andeq	r2, r1, ip, lsl #21
   12a7c:	andeq	r2, r1, ip, lsl #21
   12a80:	andeq	r2, r1, ip, lsl #21
   12a84:	andeq	r2, r1, ip, lsl #21
   12a88:	andeq	r2, r1, r0, lsl #30
   12a8c:	add	r2, r2, #1
   12a90:	cmp	r2, r0
   12a94:	bcc	129ec <__assert_fail@plt+0x195c>
   12a98:	ldr	r6, [sp, #44]	; 0x2c
   12a9c:	add	r6, r0, r6
   12aa0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12aa4:	bl	10ef8 <iswprint@plt>
   12aa8:	cmp	r0, #0
   12aac:	movwne	r0, #1
   12ab0:	and	r4, r4, r0
   12ab4:	sub	r0, fp, #40	; 0x28
   12ab8:	bl	10eb0 <mbsinit@plt>
   12abc:	ldr	lr, [sp, #28]
   12ac0:	ldr	ip, [fp, #-84]	; 0xffffffac
   12ac4:	sub	r3, fp, #40	; 0x28
   12ac8:	cmp	r0, #0
   12acc:	beq	1298c <__assert_fail@plt+0x18fc>
   12ad0:	b	12e48 <__assert_fail@plt+0x1db8>
   12ad4:	ldr	r0, [sp, #32]
   12ad8:	cmp	r0, #0
   12adc:	beq	12b78 <__assert_fail@plt+0x1ae8>
   12ae0:	add	r0, r7, #2
   12ae4:	cmp	r0, lr
   12ae8:	bcs	12b78 <__assert_fail@plt+0x1ae8>
   12aec:	add	r1, ip, r7
   12af0:	ldrb	r1, [r1, #1]
   12af4:	cmp	r1, #63	; 0x3f
   12af8:	bne	12b78 <__assert_fail@plt+0x1ae8>
   12afc:	ldrb	r5, [ip, r0]
   12b00:	sub	r1, r5, #33	; 0x21
   12b04:	cmp	r1, #29
   12b08:	bhi	12b78 <__assert_fail@plt+0x1ae8>
   12b0c:	movw	r3, #20929	; 0x51c1
   12b10:	mov	r2, #1
   12b14:	movt	r3, #14336	; 0x3800
   12b18:	tst	r3, r2, lsl r1
   12b1c:	beq	12b78 <__assert_fail@plt+0x1ae8>
   12b20:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12b24:	tst	r1, #1
   12b28:	bne	13020 <__assert_fail@plt+0x1f90>
   12b2c:	cmp	r8, sl
   12b30:	mov	r7, r0
   12b34:	mov	r4, #0
   12b38:	movcc	r1, #63	; 0x3f
   12b3c:	strbcc	r1, [r6, r8]
   12b40:	add	r1, r8, #1
   12b44:	cmp	r1, sl
   12b48:	movcc	r2, #34	; 0x22
   12b4c:	strbcc	r2, [r6, r1]
   12b50:	add	r1, r8, #2
   12b54:	cmp	r1, sl
   12b58:	movcc	r2, #34	; 0x22
   12b5c:	strbcc	r2, [r6, r1]
   12b60:	add	r1, r8, #3
   12b64:	add	r8, r8, #4
   12b68:	cmp	r1, sl
   12b6c:	movcc	r2, #63	; 0x3f
   12b70:	strbcc	r2, [r6, r1]
   12b74:	b	125dc <__assert_fail@plt+0x154c>
   12b78:	mov	r5, #63	; 0x3f
   12b7c:	mov	r4, #0
   12b80:	b	125dc <__assert_fail@plt+0x154c>
   12b84:	add	r1, r2, r7
   12b88:	ldr	lr, [sp, #28]
   12b8c:	mov	r3, #0
   12b90:	str	r1, [sp, #44]	; 0x2c
   12b94:	add	r1, r7, #1
   12b98:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12b9c:	tst	r0, #1
   12ba0:	bne	12c74 <__assert_fail@plt+0x1be4>
   12ba4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12ba8:	tst	r2, #1
   12bac:	bne	12f68 <__assert_fail@plt+0x1ed8>
   12bb0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12bb4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12bb8:	cmp	r7, #2
   12bbc:	movwne	r3, #1
   12bc0:	orr	r3, r3, r2
   12bc4:	tst	r3, #1
   12bc8:	bne	12c04 <__assert_fail@plt+0x1b74>
   12bcc:	cmp	r8, sl
   12bd0:	add	r3, r8, #1
   12bd4:	movcc	r2, #39	; 0x27
   12bd8:	strbcc	r2, [r6, r8]
   12bdc:	cmp	r3, sl
   12be0:	movcc	r2, #36	; 0x24
   12be4:	strbcc	r2, [r6, r3]
   12be8:	add	r3, r8, #2
   12bec:	add	r8, r8, #3
   12bf0:	cmp	r3, sl
   12bf4:	movcc	r2, #39	; 0x27
   12bf8:	strbcc	r2, [r6, r3]
   12bfc:	mov	r2, #1
   12c00:	str	r2, [fp, #-56]	; 0xffffffc8
   12c04:	cmp	r8, sl
   12c08:	movcc	r3, #92	; 0x5c
   12c0c:	strbcc	r3, [r6, r8]
   12c10:	add	r3, r8, #1
   12c14:	cmp	r3, sl
   12c18:	andcc	r7, r5, #192	; 0xc0
   12c1c:	movcc	r2, #48	; 0x30
   12c20:	orrcc	r7, r2, r7, lsr #6
   12c24:	strbcc	r7, [r6, r3]
   12c28:	add	r3, r8, #2
   12c2c:	add	r8, r8, #3
   12c30:	cmp	r3, sl
   12c34:	lsrcc	r7, r5, #3
   12c38:	movcc	r2, #6
   12c3c:	bficc	r7, r2, #3, #29
   12c40:	mov	r2, #6
   12c44:	strbcc	r7, [r6, r3]
   12c48:	bfi	r5, r2, #3, #29
   12c4c:	mov	r3, #1
   12c50:	b	12c98 <__assert_fail@plt+0x1c08>
   12c54:	cmp	r8, sl
   12c58:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12c5c:	strbcc	r5, [r6, r8]
   12c60:	add	r8, r8, #1
   12c64:	ldrb	r5, [ip, r1]
   12c68:	add	r1, r1, #1
   12c6c:	tst	r0, #1
   12c70:	beq	12ba4 <__assert_fail@plt+0x1b14>
   12c74:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12c78:	tst	r2, #1
   12c7c:	beq	12c90 <__assert_fail@plt+0x1c00>
   12c80:	cmp	r8, sl
   12c84:	movcc	r7, #92	; 0x5c
   12c88:	strbcc	r7, [r6, r8]
   12c8c:	add	r8, r8, #1
   12c90:	mov	r2, #0
   12c94:	str	r2, [fp, #-52]	; 0xffffffcc
   12c98:	ldr	r2, [sp, #44]	; 0x2c
   12c9c:	and	r9, r3, #1
   12ca0:	cmp	r2, r1
   12ca4:	bls	12da4 <__assert_fail@plt+0x1d14>
   12ca8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12cac:	cmp	r9, #0
   12cb0:	movwne	r9, #1
   12cb4:	mvn	r7, r2
   12cb8:	orr	r7, r7, r9
   12cbc:	tst	r7, #1
   12cc0:	bne	12c54 <__assert_fail@plt+0x1bc4>
   12cc4:	cmp	r8, sl
   12cc8:	movcc	r7, #39	; 0x27
   12ccc:	strbcc	r7, [r6, r8]
   12cd0:	add	r7, r8, #1
   12cd4:	add	r8, r8, #2
   12cd8:	cmp	r7, sl
   12cdc:	movcc	r2, #39	; 0x27
   12ce0:	strbcc	r2, [r6, r7]
   12ce4:	mov	r2, #0
   12ce8:	str	r2, [fp, #-56]	; 0xffffffc8
   12cec:	b	12c54 <__assert_fail@plt+0x1bc4>
   12cf0:	cmp	r8, sl
   12cf4:	mov	r2, #1
   12cf8:	movcc	r0, #39	; 0x27
   12cfc:	strbcc	r0, [r6, r8]
   12d00:	add	r0, r8, #1
   12d04:	cmp	r0, sl
   12d08:	movcc	r1, #36	; 0x24
   12d0c:	strbcc	r1, [r6, r0]
   12d10:	add	r0, r8, #2
   12d14:	cmp	r0, sl
   12d18:	movcc	r1, #39	; 0x27
   12d1c:	strbcc	r1, [r6, r0]
   12d20:	add	r0, r8, #3
   12d24:	cmp	r0, sl
   12d28:	add	r8, r0, #1
   12d2c:	str	r2, [fp, #-56]	; 0xffffffc8
   12d30:	movcc	r1, #92	; 0x5c
   12d34:	strbcc	r1, [r6, r0]
   12d38:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12d3c:	cmp	r1, #2
   12d40:	beq	12d94 <__assert_fail@plt+0x1d04>
   12d44:	add	r1, r7, #1
   12d48:	mov	r4, #0
   12d4c:	mov	r9, #1
   12d50:	mov	r5, #48	; 0x30
   12d54:	cmp	r1, lr
   12d58:	bcs	125dc <__assert_fail@plt+0x154c>
   12d5c:	ldrb	r1, [ip, r1]
   12d60:	sub	r1, r1, #48	; 0x30
   12d64:	uxtb	r1, r1
   12d68:	cmp	r1, #9
   12d6c:	bhi	125dc <__assert_fail@plt+0x154c>
   12d70:	cmp	r8, sl
   12d74:	movcc	r1, #48	; 0x30
   12d78:	strbcc	r1, [r6, r8]
   12d7c:	add	r1, r0, #2
   12d80:	add	r8, r0, #3
   12d84:	cmp	r1, sl
   12d88:	movcc	r2, #48	; 0x30
   12d8c:	strbcc	r2, [r6, r1]
   12d90:	b	125dc <__assert_fail@plt+0x154c>
   12d94:	mov	r0, #48	; 0x30
   12d98:	mov	r9, #1
   12d9c:	mov	r4, #0
   12da0:	b	12874 <__assert_fail@plt+0x17e4>
   12da4:	cmp	r9, #0
   12da8:	sub	r7, r1, #1
   12dac:	mov	r0, r5
   12db0:	movwne	r9, #1
   12db4:	cmp	r9, #0
   12db8:	bne	12df8 <__assert_fail@plt+0x1d68>
   12dbc:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12dc0:	tst	r1, #1
   12dc4:	beq	12df8 <__assert_fail@plt+0x1d68>
   12dc8:	cmp	r8, sl
   12dcc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12dd0:	movcc	r1, #39	; 0x27
   12dd4:	strbcc	r1, [r6, r8]
   12dd8:	add	r1, r8, #1
   12ddc:	add	r8, r8, #2
   12de0:	cmp	r1, sl
   12de4:	movcc	r2, #39	; 0x27
   12de8:	strbcc	r2, [r6, r1]
   12dec:	mov	r1, #0
   12df0:	str	r1, [fp, #-56]	; 0xffffffc8
   12df4:	b	12900 <__assert_fail@plt+0x1870>
   12df8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12dfc:	b	12900 <__assert_fail@plt+0x1870>
   12e00:	mov	r4, #0
   12e04:	b	12e40 <__assert_fail@plt+0x1db0>
   12e08:	mov	r4, #0
   12e0c:	cmp	lr, r6
   12e10:	bls	12e40 <__assert_fail@plt+0x1db0>
   12e14:	ldr	ip, [fp, #-84]	; 0xffffffac
   12e18:	ldr	r6, [sp, #44]	; 0x2c
   12e1c:	ldr	r0, [sp, #24]
   12e20:	ldrb	r0, [r0, r6]
   12e24:	cmp	r0, #0
   12e28:	beq	12e48 <__assert_fail@plt+0x1db8>
   12e2c:	add	r6, r6, #1
   12e30:	add	r0, r7, r6
   12e34:	cmp	r0, lr
   12e38:	bcc	12e1c <__assert_fail@plt+0x1d8c>
   12e3c:	b	12e48 <__assert_fail@plt+0x1db8>
   12e40:	ldr	ip, [fp, #-84]	; 0xffffffac
   12e44:	ldr	r6, [sp, #44]	; 0x2c
   12e48:	mov	r1, r6
   12e4c:	ldr	r6, [sp, #80]	; 0x50
   12e50:	b	127a8 <__assert_fail@plt+0x1718>
   12e54:	mov	lr, r7
   12e58:	b	12e60 <__assert_fail@plt+0x1dd0>
   12e5c:	mvn	lr, #0
   12e60:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12e64:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12e68:	eor	r0, r7, #2
   12e6c:	orr	r0, r0, r8
   12e70:	clz	r0, r0
   12e74:	lsr	r0, r0, #5
   12e78:	tst	r1, r0
   12e7c:	bne	12f08 <__assert_fail@plt+0x1e78>
   12e80:	mov	r0, r1
   12e84:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12e88:	cmp	r7, #2
   12e8c:	movwne	r1, #1
   12e90:	orr	r0, r0, r1
   12e94:	tst	r0, #1
   12e98:	ldreq	r0, [sp, #60]	; 0x3c
   12e9c:	eoreq	r0, r0, #1
   12ea0:	tsteq	r0, #1
   12ea4:	bne	12fb4 <__assert_fail@plt+0x1f24>
   12ea8:	mov	r9, lr
   12eac:	tst	r5, #1
   12eb0:	bne	12f70 <__assert_fail@plt+0x1ee0>
   12eb4:	ldr	r6, [sp, #56]	; 0x38
   12eb8:	mov	r4, #0
   12ebc:	cmp	r6, #0
   12ec0:	beq	12fac <__assert_fail@plt+0x1f1c>
   12ec4:	ldr	r0, [sp, #84]	; 0x54
   12ec8:	mov	r1, #0
   12ecc:	cmp	sl, #0
   12ed0:	mov	r5, #0
   12ed4:	str	r1, [fp, #-72]	; 0xffffffb8
   12ed8:	beq	120a8 <__assert_fail@plt+0x1018>
   12edc:	b	12fb4 <__assert_fail@plt+0x1f24>
   12ee0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12ee4:	ldr	r2, [sp, #84]	; 0x54
   12ee8:	b	12f10 <__assert_fail@plt+0x1e80>
   12eec:	ldr	ip, [fp, #-84]	; 0xffffffac
   12ef0:	mov	r2, #1
   12ef4:	mov	lr, r4
   12ef8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12efc:	b	12f10 <__assert_fail@plt+0x1e80>
   12f00:	ldr	r6, [sp, #80]	; 0x50
   12f04:	ldr	ip, [fp, #-84]	; 0xffffffac
   12f08:	ldr	r2, [sp, #84]	; 0x54
   12f0c:	mov	r7, #2
   12f10:	mov	r0, #0
   12f14:	ldr	r1, [fp, #12]
   12f18:	tst	r2, #1
   12f1c:	mov	r2, r7
   12f20:	mov	r3, lr
   12f24:	str	r0, [sp, #8]
   12f28:	ldr	r0, [sp, #72]	; 0x48
   12f2c:	movwne	r2, #4
   12f30:	cmp	r7, #2
   12f34:	movne	r2, r7
   12f38:	str	r2, [sp]
   12f3c:	mov	r2, ip
   12f40:	bic	r1, r1, #2
   12f44:	str	r0, [sp, #12]
   12f48:	ldr	r0, [sp, #76]	; 0x4c
   12f4c:	str	r1, [sp, #4]
   12f50:	mov	r1, sl
   12f54:	str	r0, [sp, #16]
   12f58:	mov	r0, r6
   12f5c:	bl	12028 <__assert_fail@plt+0xf98>
   12f60:	mov	r8, r0
   12f64:	b	1300c <__assert_fail@plt+0x1f7c>
   12f68:	ldr	r2, [sp, #84]	; 0x54
   12f6c:	b	12f10 <__assert_fail@plt+0x1e80>
   12f70:	mov	r0, #5
   12f74:	ldr	r1, [sp, #56]	; 0x38
   12f78:	ldr	r2, [fp, #-84]	; 0xffffffac
   12f7c:	mov	r3, r9
   12f80:	str	r0, [sp]
   12f84:	ldr	r0, [fp, #12]
   12f88:	str	r0, [sp, #4]
   12f8c:	ldr	r0, [fp, #16]
   12f90:	str	r0, [sp, #8]
   12f94:	ldr	r0, [sp, #72]	; 0x48
   12f98:	str	r0, [sp, #12]
   12f9c:	ldr	r0, [sp, #76]	; 0x4c
   12fa0:	str	r0, [sp, #16]
   12fa4:	ldr	r0, [sp, #80]	; 0x50
   12fa8:	b	12f5c <__assert_fail@plt+0x1ecc>
   12fac:	mov	r0, #0
   12fb0:	str	r0, [fp, #-72]	; 0xffffffb8
   12fb4:	ldr	r1, [sp, #92]	; 0x5c
   12fb8:	cmp	r1, #0
   12fbc:	beq	12ffc <__assert_fail@plt+0x1f6c>
   12fc0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12fc4:	ldr	r2, [sp, #80]	; 0x50
   12fc8:	tst	r0, #1
   12fcc:	bne	13000 <__assert_fail@plt+0x1f70>
   12fd0:	ldrb	r0, [r1]
   12fd4:	cmp	r0, #0
   12fd8:	beq	13000 <__assert_fail@plt+0x1f70>
   12fdc:	add	r1, r1, #1
   12fe0:	cmp	r8, sl
   12fe4:	strbcc	r0, [r2, r8]
   12fe8:	add	r8, r8, #1
   12fec:	ldrb	r0, [r1], #1
   12ff0:	cmp	r0, #0
   12ff4:	bne	12fe0 <__assert_fail@plt+0x1f50>
   12ff8:	b	13000 <__assert_fail@plt+0x1f70>
   12ffc:	ldr	r2, [sp, #80]	; 0x50
   13000:	cmp	r8, sl
   13004:	movcc	r0, #0
   13008:	strbcc	r0, [r2, r8]
   1300c:	mov	r0, r8
   13010:	sub	sp, fp, #28
   13014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13018:	mov	r2, #1
   1301c:	b	12ef8 <__assert_fail@plt+0x1e68>
   13020:	ldr	r2, [sp, #84]	; 0x54
   13024:	mov	r7, #5
   13028:	b	12f10 <__assert_fail@plt+0x1e80>
   1302c:	bl	11084 <abort@plt>
   13030:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13034:	add	fp, sp, #28
   13038:	sub	sp, sp, #28
   1303c:	movw	r5, #29040	; 0x7170
   13040:	cmp	r2, #0
   13044:	mov	r4, r1
   13048:	mov	r7, r0
   1304c:	str	r0, [sp, #20]
   13050:	movt	r5, #2
   13054:	movne	r5, r2
   13058:	bl	10fb8 <__errno_location@plt>
   1305c:	mov	sl, r0
   13060:	ldm	r5, {r0, r1}
   13064:	ldr	r2, [r5, #40]	; 0x28
   13068:	ldr	r3, [r5, #44]	; 0x2c
   1306c:	add	r9, r5, #8
   13070:	ldr	r6, [sl]
   13074:	orr	r8, r1, #1
   13078:	mov	r1, #0
   1307c:	str	r6, [sp, #24]
   13080:	stm	sp, {r0, r8, r9}
   13084:	str	r2, [sp, #12]
   13088:	str	r3, [sp, #16]
   1308c:	mov	r0, #0
   13090:	mov	r2, r7
   13094:	mov	r3, r4
   13098:	mov	r6, r4
   1309c:	bl	12028 <__assert_fail@plt+0xf98>
   130a0:	add	r7, r0, #1
   130a4:	mov	r0, r7
   130a8:	bl	14240 <__assert_fail@plt+0x31b0>
   130ac:	mov	r4, r0
   130b0:	ldr	r0, [r5]
   130b4:	ldr	r2, [r5, #44]	; 0x2c
   130b8:	ldr	r1, [r5, #40]	; 0x28
   130bc:	mov	r3, r6
   130c0:	stm	sp, {r0, r8, r9}
   130c4:	str	r2, [sp, #16]
   130c8:	str	r1, [sp, #12]
   130cc:	mov	r0, r4
   130d0:	mov	r1, r7
   130d4:	ldr	r2, [sp, #20]
   130d8:	bl	12028 <__assert_fail@plt+0xf98>
   130dc:	ldr	r0, [sp, #24]
   130e0:	str	r0, [sl]
   130e4:	mov	r0, r4
   130e8:	sub	sp, fp, #28
   130ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130f4:	add	fp, sp, #28
   130f8:	sub	sp, sp, #36	; 0x24
   130fc:	movw	r8, #29040	; 0x7170
   13100:	cmp	r3, #0
   13104:	mov	r4, r2
   13108:	str	r2, [sp, #24]
   1310c:	mov	r5, r1
   13110:	mov	r6, r0
   13114:	str	r0, [sp, #20]
   13118:	movt	r8, #2
   1311c:	movne	r8, r3
   13120:	bl	10fb8 <__errno_location@plt>
   13124:	str	r0, [sp, #28]
   13128:	cmp	r4, #0
   1312c:	add	sl, r8, #8
   13130:	ldm	r8, {r3, r9}
   13134:	ldr	r7, [r0]
   13138:	ldr	r1, [r8, #40]	; 0x28
   1313c:	ldr	r2, [r8, #44]	; 0x2c
   13140:	mov	r0, #0
   13144:	orreq	r9, r9, #1
   13148:	str	r7, [sp, #32]
   1314c:	mov	r7, r5
   13150:	stm	sp, {r3, r9, sl}
   13154:	str	r1, [sp, #12]
   13158:	str	r2, [sp, #16]
   1315c:	mov	r1, #0
   13160:	mov	r2, r6
   13164:	mov	r3, r5
   13168:	bl	12028 <__assert_fail@plt+0xf98>
   1316c:	add	r4, r0, #1
   13170:	mov	r5, r0
   13174:	mov	r0, r4
   13178:	bl	14240 <__assert_fail@plt+0x31b0>
   1317c:	mov	r6, r0
   13180:	ldr	r0, [r8]
   13184:	ldr	r2, [r8, #44]	; 0x2c
   13188:	ldr	r1, [r8, #40]	; 0x28
   1318c:	mov	r3, r7
   13190:	stm	sp, {r0, r9, sl}
   13194:	str	r2, [sp, #16]
   13198:	str	r1, [sp, #12]
   1319c:	mov	r0, r6
   131a0:	mov	r1, r4
   131a4:	ldr	r2, [sp, #20]
   131a8:	bl	12028 <__assert_fail@plt+0xf98>
   131ac:	ldr	r0, [sp, #24]
   131b0:	ldr	r1, [sp, #32]
   131b4:	ldr	r2, [sp, #28]
   131b8:	cmp	r0, #0
   131bc:	str	r1, [r2]
   131c0:	strne	r5, [r0]
   131c4:	mov	r0, r6
   131c8:	sub	sp, fp, #28
   131cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   131d4:	add	fp, sp, #24
   131d8:	movw	r5, #28916	; 0x70f4
   131dc:	movw	r8, #28912	; 0x70f0
   131e0:	movt	r5, #2
   131e4:	movt	r8, #2
   131e8:	ldr	r0, [r5]
   131ec:	ldr	r4, [r8]
   131f0:	cmp	r0, #2
   131f4:	blt	13220 <__assert_fail@plt+0x2190>
   131f8:	add	r7, r4, #12
   131fc:	mov	r6, #0
   13200:	ldr	r0, [r7, r6, lsl #3]
   13204:	bl	156ac <__assert_fail@plt+0x461c>
   13208:	ldr	r1, [r5]
   1320c:	add	r2, r6, #2
   13210:	add	r0, r6, #1
   13214:	mov	r6, r0
   13218:	cmp	r2, r1
   1321c:	blt	13200 <__assert_fail@plt+0x2170>
   13220:	ldr	r0, [r4, #4]
   13224:	movw	r7, #29088	; 0x71a0
   13228:	movt	r7, #2
   1322c:	cmp	r0, r7
   13230:	beq	13248 <__assert_fail@plt+0x21b8>
   13234:	bl	156ac <__assert_fail@plt+0x461c>
   13238:	movw	r0, #28920	; 0x70f8
   1323c:	mov	r6, #256	; 0x100
   13240:	movt	r0, #2
   13244:	strd	r6, [r0]
   13248:	movw	r6, #28920	; 0x70f8
   1324c:	movt	r6, #2
   13250:	cmp	r4, r6
   13254:	beq	13264 <__assert_fail@plt+0x21d4>
   13258:	mov	r0, r4
   1325c:	bl	156ac <__assert_fail@plt+0x461c>
   13260:	str	r6, [r8]
   13264:	mov	r0, #1
   13268:	str	r0, [r5]
   1326c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13270:	movw	r3, #29040	; 0x7170
   13274:	mvn	r2, #0
   13278:	movt	r3, #2
   1327c:	b	13280 <__assert_fail@plt+0x21f0>
   13280:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13284:	add	fp, sp, #28
   13288:	sub	sp, sp, #44	; 0x2c
   1328c:	mov	r7, r3
   13290:	str	r2, [sp, #36]	; 0x24
   13294:	str	r1, [sp, #32]
   13298:	mov	r5, r0
   1329c:	bl	10fb8 <__errno_location@plt>
   132a0:	cmp	r5, #0
   132a4:	blt	13410 <__assert_fail@plt+0x2380>
   132a8:	cmn	r5, #-2147483647	; 0x80000001
   132ac:	beq	13410 <__assert_fail@plt+0x2380>
   132b0:	movw	r8, #28916	; 0x70f4
   132b4:	movw	r4, #28912	; 0x70f0
   132b8:	str	r0, [sp, #28]
   132bc:	ldr	r0, [r0]
   132c0:	movt	r8, #2
   132c4:	movt	r4, #2
   132c8:	ldr	r1, [r8]
   132cc:	ldr	r6, [r4]
   132d0:	str	r0, [sp, #24]
   132d4:	cmp	r1, r5
   132d8:	ble	132e4 <__assert_fail@plt+0x2254>
   132dc:	mov	sl, r6
   132e0:	b	1334c <__assert_fail@plt+0x22bc>
   132e4:	movw	r9, #28920	; 0x70f8
   132e8:	mov	r0, #8
   132ec:	add	r2, r5, #1
   132f0:	str	r1, [fp, #-32]	; 0xffffffe0
   132f4:	mvn	r3, #-2147483648	; 0x80000000
   132f8:	movt	r9, #2
   132fc:	str	r0, [sp]
   13300:	sub	r2, r2, r1
   13304:	sub	r1, fp, #32
   13308:	subs	r0, r6, r9
   1330c:	movne	r0, r6
   13310:	bl	14440 <__assert_fail@plt+0x33b0>
   13314:	cmp	r6, r9
   13318:	mov	sl, r0
   1331c:	str	r0, [r4]
   13320:	ldrdeq	r0, [r9]
   13324:	stmeq	sl, {r0, r1}
   13328:	ldr	r1, [r8]
   1332c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13330:	add	r0, sl, r1, lsl #3
   13334:	sub	r1, r2, r1
   13338:	lsl	r2, r1, #3
   1333c:	mov	r1, #0
   13340:	bl	10fd0 <memset@plt>
   13344:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13348:	str	r0, [r8]
   1334c:	mov	r9, sl
   13350:	ldr	r6, [r9, r5, lsl #3]!
   13354:	ldr	r4, [r9, #4]!
   13358:	ldm	r7, {r0, r1}
   1335c:	ldr	r2, [r7, #40]	; 0x28
   13360:	ldr	r3, [r7, #44]	; 0x2c
   13364:	orr	r8, r1, #1
   13368:	add	r1, r7, #8
   1336c:	stm	sp, {r0, r8}
   13370:	add	r0, sp, #8
   13374:	str	r1, [sp, #20]
   13378:	stm	r0, {r1, r2, r3}
   1337c:	mov	r0, r4
   13380:	mov	r1, r6
   13384:	ldr	r2, [sp, #32]
   13388:	ldr	r3, [sp, #36]	; 0x24
   1338c:	bl	12028 <__assert_fail@plt+0xf98>
   13390:	cmp	r6, r0
   13394:	bhi	133f8 <__assert_fail@plt+0x2368>
   13398:	add	r6, r0, #1
   1339c:	movw	r0, #29088	; 0x71a0
   133a0:	movt	r0, #2
   133a4:	str	r6, [sl, r5, lsl #3]
   133a8:	cmp	r4, r0
   133ac:	beq	133b8 <__assert_fail@plt+0x2328>
   133b0:	mov	r0, r4
   133b4:	bl	156ac <__assert_fail@plt+0x461c>
   133b8:	mov	r0, r6
   133bc:	bl	14240 <__assert_fail@plt+0x31b0>
   133c0:	str	r0, [r9]
   133c4:	mov	r4, r0
   133c8:	add	r3, sp, #8
   133cc:	ldr	r0, [r7]
   133d0:	ldr	r1, [r7, #40]	; 0x28
   133d4:	ldr	r2, [r7, #44]	; 0x2c
   133d8:	stm	sp, {r0, r8}
   133dc:	ldr	r0, [sp, #20]
   133e0:	stm	r3, {r0, r1, r2}
   133e4:	mov	r0, r4
   133e8:	mov	r1, r6
   133ec:	ldr	r2, [sp, #32]
   133f0:	ldr	r3, [sp, #36]	; 0x24
   133f4:	bl	12028 <__assert_fail@plt+0xf98>
   133f8:	ldr	r0, [sp, #28]
   133fc:	ldr	r1, [sp, #24]
   13400:	str	r1, [r0]
   13404:	mov	r0, r4
   13408:	sub	sp, fp, #28
   1340c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13410:	bl	11084 <abort@plt>
   13414:	movw	r3, #29040	; 0x7170
   13418:	movt	r3, #2
   1341c:	b	13280 <__assert_fail@plt+0x21f0>
   13420:	movw	r3, #29040	; 0x7170
   13424:	mov	r1, r0
   13428:	mov	r0, #0
   1342c:	mvn	r2, #0
   13430:	movt	r3, #2
   13434:	b	13280 <__assert_fail@plt+0x21f0>
   13438:	movw	r3, #29040	; 0x7170
   1343c:	mov	r2, r1
   13440:	mov	r1, r0
   13444:	mov	r0, #0
   13448:	movt	r3, #2
   1344c:	b	13280 <__assert_fail@plt+0x21f0>
   13450:	push	{fp, lr}
   13454:	mov	fp, sp
   13458:	sub	sp, sp, #48	; 0x30
   1345c:	vmov.i32	q8, #0	; 0x00000000
   13460:	mov	ip, #32
   13464:	mov	r3, sp
   13468:	mov	lr, r2
   1346c:	cmp	r1, #10
   13470:	add	r2, r3, #16
   13474:	vst1.64	{d16-d17}, [r3], ip
   13478:	vst1.64	{d16-d17}, [r3]
   1347c:	vst1.64	{d16-d17}, [r2]
   13480:	beq	134a0 <__assert_fail@plt+0x2410>
   13484:	str	r1, [sp]
   13488:	mov	r3, sp
   1348c:	mov	r1, lr
   13490:	mvn	r2, #0
   13494:	bl	13280 <__assert_fail@plt+0x21f0>
   13498:	mov	sp, fp
   1349c:	pop	{fp, pc}
   134a0:	bl	11084 <abort@plt>
   134a4:	push	{r4, sl, fp, lr}
   134a8:	add	fp, sp, #8
   134ac:	sub	sp, sp, #48	; 0x30
   134b0:	mov	ip, r3
   134b4:	mov	r3, sp
   134b8:	vmov.i32	q8, #0	; 0x00000000
   134bc:	mov	lr, #32
   134c0:	cmp	r1, #10
   134c4:	add	r4, r3, #16
   134c8:	vst1.64	{d16-d17}, [r3], lr
   134cc:	vst1.64	{d16-d17}, [r3]
   134d0:	vst1.64	{d16-d17}, [r4]
   134d4:	beq	134f4 <__assert_fail@plt+0x2464>
   134d8:	str	r1, [sp]
   134dc:	mov	r1, r2
   134e0:	mov	r3, sp
   134e4:	mov	r2, ip
   134e8:	bl	13280 <__assert_fail@plt+0x21f0>
   134ec:	sub	sp, fp, #8
   134f0:	pop	{r4, sl, fp, pc}
   134f4:	bl	11084 <abort@plt>
   134f8:	push	{fp, lr}
   134fc:	mov	fp, sp
   13500:	sub	sp, sp, #48	; 0x30
   13504:	mov	r3, sp
   13508:	vmov.i32	q8, #0	; 0x00000000
   1350c:	mov	ip, #32
   13510:	cmp	r0, #10
   13514:	add	r2, r3, #16
   13518:	vst1.64	{d16-d17}, [r3], ip
   1351c:	vst1.64	{d16-d17}, [r3]
   13520:	vst1.64	{d16-d17}, [r2]
   13524:	beq	13544 <__assert_fail@plt+0x24b4>
   13528:	str	r0, [sp]
   1352c:	mov	r3, sp
   13530:	mov	r0, #0
   13534:	mvn	r2, #0
   13538:	bl	13280 <__assert_fail@plt+0x21f0>
   1353c:	mov	sp, fp
   13540:	pop	{fp, pc}
   13544:	bl	11084 <abort@plt>
   13548:	push	{fp, lr}
   1354c:	mov	fp, sp
   13550:	sub	sp, sp, #48	; 0x30
   13554:	mov	r3, sp
   13558:	vmov.i32	q8, #0	; 0x00000000
   1355c:	mov	ip, #32
   13560:	cmp	r0, #10
   13564:	add	lr, r3, #16
   13568:	vst1.64	{d16-d17}, [r3], ip
   1356c:	vst1.64	{d16-d17}, [r3]
   13570:	vst1.64	{d16-d17}, [lr]
   13574:	beq	13590 <__assert_fail@plt+0x2500>
   13578:	str	r0, [sp]
   1357c:	mov	r3, sp
   13580:	mov	r0, #0
   13584:	bl	13280 <__assert_fail@plt+0x21f0>
   13588:	mov	sp, fp
   1358c:	pop	{fp, pc}
   13590:	bl	11084 <abort@plt>
   13594:	push	{r4, sl, fp, lr}
   13598:	add	fp, sp, #8
   1359c:	sub	sp, sp, #48	; 0x30
   135a0:	mov	lr, r0
   135a4:	movw	r0, #29040	; 0x7170
   135a8:	mov	r3, #32
   135ac:	mov	ip, r1
   135b0:	mov	r4, #1
   135b4:	movt	r0, #2
   135b8:	add	r1, r0, #16
   135bc:	vld1.64	{d16-d17}, [r0], r3
   135c0:	mov	r3, sp
   135c4:	vld1.64	{d18-d19}, [r1]
   135c8:	add	r1, r3, #16
   135cc:	vld1.64	{d20-d21}, [r0]
   135d0:	add	r0, r3, #32
   135d4:	vst1.64	{d18-d19}, [r1]
   135d8:	mov	r1, r3
   135dc:	vst1.64	{d20-d21}, [r0]
   135e0:	mov	r0, #28
   135e4:	and	r0, r0, r2, lsr #3
   135e8:	and	r2, r2, #31
   135ec:	vst1.64	{d16-d17}, [r1], r0
   135f0:	ldr	r0, [r1, #8]
   135f4:	bic	r4, r4, r0, lsr r2
   135f8:	eor	r0, r0, r4, lsl r2
   135fc:	mov	r2, ip
   13600:	str	r0, [r1, #8]
   13604:	mov	r0, #0
   13608:	mov	r1, lr
   1360c:	bl	13280 <__assert_fail@plt+0x21f0>
   13610:	sub	sp, fp, #8
   13614:	pop	{r4, sl, fp, pc}
   13618:	push	{fp, lr}
   1361c:	mov	fp, sp
   13620:	sub	sp, sp, #48	; 0x30
   13624:	mov	ip, r0
   13628:	movw	r0, #29040	; 0x7170
   1362c:	mov	r3, #32
   13630:	movt	r0, #2
   13634:	add	r2, r0, #16
   13638:	vld1.64	{d16-d17}, [r0], r3
   1363c:	mov	r3, sp
   13640:	vld1.64	{d18-d19}, [r2]
   13644:	add	r2, r3, #16
   13648:	vld1.64	{d20-d21}, [r0]
   1364c:	add	r0, r3, #32
   13650:	vst1.64	{d18-d19}, [r2]
   13654:	mov	r2, r3
   13658:	vst1.64	{d20-d21}, [r0]
   1365c:	mov	r0, #28
   13660:	and	r0, r0, r1, lsr #3
   13664:	and	r1, r1, #31
   13668:	vst1.64	{d16-d17}, [r2], r0
   1366c:	mov	r0, #1
   13670:	ldr	lr, [r2, #8]
   13674:	bic	r0, r0, lr, lsr r1
   13678:	eor	r0, lr, r0, lsl r1
   1367c:	mov	r1, ip
   13680:	str	r0, [r2, #8]
   13684:	mov	r0, #0
   13688:	mvn	r2, #0
   1368c:	bl	13280 <__assert_fail@plt+0x21f0>
   13690:	mov	sp, fp
   13694:	pop	{fp, pc}
   13698:	push	{fp, lr}
   1369c:	mov	fp, sp
   136a0:	sub	sp, sp, #48	; 0x30
   136a4:	movw	r2, #29040	; 0x7170
   136a8:	mov	r3, #32
   136ac:	mov	r1, r0
   136b0:	movt	r2, #2
   136b4:	add	r0, r2, #16
   136b8:	vld1.64	{d16-d17}, [r2], r3
   136bc:	mov	r3, sp
   136c0:	vld1.64	{d18-d19}, [r0]
   136c4:	add	r0, r3, #16
   136c8:	vld1.64	{d20-d21}, [r2]
   136cc:	mov	r2, r3
   136d0:	vst1.64	{d18-d19}, [r0]
   136d4:	add	r0, r3, #32
   136d8:	vst1.64	{d20-d21}, [r0]
   136dc:	mov	r0, #12
   136e0:	vst1.64	{d16-d17}, [r2], r0
   136e4:	ldr	r0, [r2]
   136e8:	orr	r0, r0, #67108864	; 0x4000000
   136ec:	str	r0, [r2]
   136f0:	mov	r0, #0
   136f4:	mvn	r2, #0
   136f8:	bl	13280 <__assert_fail@plt+0x21f0>
   136fc:	mov	sp, fp
   13700:	pop	{fp, pc}
   13704:	push	{fp, lr}
   13708:	mov	fp, sp
   1370c:	sub	sp, sp, #48	; 0x30
   13710:	mov	ip, r1
   13714:	mov	r1, r0
   13718:	movw	r0, #29040	; 0x7170
   1371c:	mov	r3, #32
   13720:	movt	r0, #2
   13724:	add	r2, r0, #16
   13728:	vld1.64	{d16-d17}, [r0], r3
   1372c:	mov	r3, sp
   13730:	vld1.64	{d18-d19}, [r2]
   13734:	add	r2, r3, #16
   13738:	vld1.64	{d20-d21}, [r0]
   1373c:	add	r0, r3, #32
   13740:	vst1.64	{d18-d19}, [r2]
   13744:	mov	r2, r3
   13748:	vst1.64	{d20-d21}, [r0]
   1374c:	mov	r0, #12
   13750:	vst1.64	{d16-d17}, [r2], r0
   13754:	ldr	r0, [r2]
   13758:	orr	r0, r0, #67108864	; 0x4000000
   1375c:	str	r0, [r2]
   13760:	mov	r0, #0
   13764:	mov	r2, ip
   13768:	bl	13280 <__assert_fail@plt+0x21f0>
   1376c:	mov	sp, fp
   13770:	pop	{fp, pc}
   13774:	push	{r4, sl, fp, lr}
   13778:	add	fp, sp, #8
   1377c:	sub	sp, sp, #96	; 0x60
   13780:	mov	ip, r2
   13784:	mov	r2, sp
   13788:	vmov.i32	q8, #0	; 0x00000000
   1378c:	mov	r4, #28
   13790:	cmp	r1, #10
   13794:	mov	r3, r2
   13798:	add	lr, r2, #16
   1379c:	vst1.64	{d16-d17}, [r3], r4
   137a0:	vst1.64	{d16-d17}, [lr]
   137a4:	vst1.32	{d16-d17}, [r3]
   137a8:	beq	137f8 <__assert_fail@plt+0x2768>
   137ac:	vld1.64	{d16-d17}, [r2], r4
   137b0:	vld1.64	{d18-d19}, [lr]
   137b4:	add	r3, sp, #48	; 0x30
   137b8:	add	r4, r3, #4
   137bc:	vld1.32	{d20-d21}, [r2]
   137c0:	add	r2, r3, #20
   137c4:	vst1.32	{d16-d17}, [r4]
   137c8:	vst1.32	{d18-d19}, [r2]
   137cc:	add	r2, r3, #32
   137d0:	vst1.32	{d20-d21}, [r2]
   137d4:	str	r1, [sp, #48]	; 0x30
   137d8:	mvn	r2, #0
   137dc:	ldr	r1, [sp, #60]	; 0x3c
   137e0:	orr	r1, r1, #67108864	; 0x4000000
   137e4:	str	r1, [sp, #60]	; 0x3c
   137e8:	mov	r1, ip
   137ec:	bl	13280 <__assert_fail@plt+0x21f0>
   137f0:	sub	sp, fp, #8
   137f4:	pop	{r4, sl, fp, pc}
   137f8:	bl	11084 <abort@plt>
   137fc:	push	{r4, r5, fp, lr}
   13800:	add	fp, sp, #8
   13804:	sub	sp, sp, #48	; 0x30
   13808:	mov	ip, r3
   1380c:	movw	r3, #29040	; 0x7170
   13810:	mov	lr, #32
   13814:	cmp	r1, #0
   13818:	mov	r5, sp
   1381c:	movt	r3, #2
   13820:	cmpne	r2, #0
   13824:	add	r4, r3, #16
   13828:	vld1.64	{d16-d17}, [r3], lr
   1382c:	vld1.64	{d18-d19}, [r4]
   13830:	add	r4, r5, #16
   13834:	vld1.64	{d20-d21}, [r3]
   13838:	vst1.64	{d16-d17}, [r5], lr
   1383c:	mov	r3, #10
   13840:	vst1.64	{d18-d19}, [r4]
   13844:	vst1.64	{d20-d21}, [r5]
   13848:	str	r3, [sp]
   1384c:	bne	13854 <__assert_fail@plt+0x27c4>
   13850:	bl	11084 <abort@plt>
   13854:	str	r2, [sp, #44]	; 0x2c
   13858:	str	r1, [sp, #40]	; 0x28
   1385c:	mov	r3, sp
   13860:	mov	r1, ip
   13864:	mvn	r2, #0
   13868:	bl	13280 <__assert_fail@plt+0x21f0>
   1386c:	sub	sp, fp, #8
   13870:	pop	{r4, r5, fp, pc}
   13874:	push	{r4, r5, fp, lr}
   13878:	add	fp, sp, #8
   1387c:	sub	sp, sp, #48	; 0x30
   13880:	mov	lr, r3
   13884:	movw	r3, #29040	; 0x7170
   13888:	mov	ip, #32
   1388c:	cmp	r1, #0
   13890:	mov	r5, sp
   13894:	movt	r3, #2
   13898:	cmpne	r2, #0
   1389c:	add	r4, r3, #16
   138a0:	vld1.64	{d16-d17}, [r3], ip
   138a4:	vld1.64	{d18-d19}, [r4]
   138a8:	add	r4, r5, #16
   138ac:	vld1.64	{d20-d21}, [r3]
   138b0:	vst1.64	{d16-d17}, [r5], ip
   138b4:	mov	r3, #10
   138b8:	vst1.64	{d18-d19}, [r4]
   138bc:	vst1.64	{d20-d21}, [r5]
   138c0:	str	r3, [sp]
   138c4:	bne	138cc <__assert_fail@plt+0x283c>
   138c8:	bl	11084 <abort@plt>
   138cc:	ldr	ip, [fp, #8]
   138d0:	str	r2, [sp, #44]	; 0x2c
   138d4:	str	r1, [sp, #40]	; 0x28
   138d8:	mov	r3, sp
   138dc:	mov	r1, lr
   138e0:	mov	r2, ip
   138e4:	bl	13280 <__assert_fail@plt+0x21f0>
   138e8:	sub	sp, fp, #8
   138ec:	pop	{r4, r5, fp, pc}
   138f0:	push	{r4, sl, fp, lr}
   138f4:	add	fp, sp, #8
   138f8:	sub	sp, sp, #48	; 0x30
   138fc:	mov	ip, r2
   13900:	movw	r2, #29040	; 0x7170
   13904:	mov	lr, #32
   13908:	cmp	r0, #0
   1390c:	mov	r4, sp
   13910:	movt	r2, #2
   13914:	cmpne	r1, #0
   13918:	add	r3, r2, #16
   1391c:	vld1.64	{d16-d17}, [r2], lr
   13920:	vld1.64	{d18-d19}, [r3]
   13924:	add	r3, r4, #16
   13928:	vld1.64	{d20-d21}, [r2]
   1392c:	vst1.64	{d16-d17}, [r4], lr
   13930:	mov	r2, #10
   13934:	vst1.64	{d18-d19}, [r3]
   13938:	vst1.64	{d20-d21}, [r4]
   1393c:	str	r2, [sp]
   13940:	bne	13948 <__assert_fail@plt+0x28b8>
   13944:	bl	11084 <abort@plt>
   13948:	str	r1, [sp, #44]	; 0x2c
   1394c:	str	r0, [sp, #40]	; 0x28
   13950:	mov	r3, sp
   13954:	mov	r0, #0
   13958:	mov	r1, ip
   1395c:	mvn	r2, #0
   13960:	bl	13280 <__assert_fail@plt+0x21f0>
   13964:	sub	sp, fp, #8
   13968:	pop	{r4, sl, fp, pc}
   1396c:	push	{r4, r5, fp, lr}
   13970:	add	fp, sp, #8
   13974:	sub	sp, sp, #48	; 0x30
   13978:	mov	lr, r2
   1397c:	movw	r2, #29040	; 0x7170
   13980:	mov	ip, r3
   13984:	mov	r3, #32
   13988:	cmp	r0, #0
   1398c:	mov	r5, sp
   13990:	movt	r2, #2
   13994:	cmpne	r1, #0
   13998:	add	r4, r2, #16
   1399c:	vld1.64	{d16-d17}, [r2], r3
   139a0:	vld1.64	{d18-d19}, [r4]
   139a4:	add	r4, r5, #16
   139a8:	vld1.64	{d20-d21}, [r2]
   139ac:	vst1.64	{d16-d17}, [r5], r3
   139b0:	mov	r2, #10
   139b4:	vst1.64	{d18-d19}, [r4]
   139b8:	vst1.64	{d20-d21}, [r5]
   139bc:	str	r2, [sp]
   139c0:	bne	139c8 <__assert_fail@plt+0x2938>
   139c4:	bl	11084 <abort@plt>
   139c8:	str	r1, [sp, #44]	; 0x2c
   139cc:	str	r0, [sp, #40]	; 0x28
   139d0:	mov	r3, sp
   139d4:	mov	r0, #0
   139d8:	mov	r1, lr
   139dc:	mov	r2, ip
   139e0:	bl	13280 <__assert_fail@plt+0x21f0>
   139e4:	sub	sp, fp, #8
   139e8:	pop	{r4, r5, fp, pc}
   139ec:	movw	r3, #28928	; 0x7100
   139f0:	movt	r3, #2
   139f4:	b	13280 <__assert_fail@plt+0x21f0>
   139f8:	movw	r3, #28928	; 0x7100
   139fc:	mov	r2, r1
   13a00:	mov	r1, r0
   13a04:	mov	r0, #0
   13a08:	movt	r3, #2
   13a0c:	b	13280 <__assert_fail@plt+0x21f0>
   13a10:	movw	r3, #28928	; 0x7100
   13a14:	mvn	r2, #0
   13a18:	movt	r3, #2
   13a1c:	b	13280 <__assert_fail@plt+0x21f0>
   13a20:	movw	r3, #28928	; 0x7100
   13a24:	mov	r1, r0
   13a28:	mov	r0, #0
   13a2c:	mvn	r2, #0
   13a30:	movt	r3, #2
   13a34:	b	13280 <__assert_fail@plt+0x21f0>
   13a38:	push	{r4, r5, fp, lr}
   13a3c:	add	fp, sp, #8
   13a40:	mov	r5, r0
   13a44:	mov	r4, r1
   13a48:	mov	r0, #0
   13a4c:	mov	r2, #5
   13a50:	mov	r1, r5
   13a54:	bl	10ed4 <dcgettext@plt>
   13a58:	cmp	r0, r5
   13a5c:	popne	{r4, r5, fp, pc}
   13a60:	bl	156d4 <__assert_fail@plt+0x4644>
   13a64:	ldrb	r1, [r0]
   13a68:	and	r1, r1, #223	; 0xdf
   13a6c:	cmp	r1, #71	; 0x47
   13a70:	beq	13ad8 <__assert_fail@plt+0x2a48>
   13a74:	cmp	r1, #85	; 0x55
   13a78:	bne	13afc <__assert_fail@plt+0x2a6c>
   13a7c:	ldrb	r1, [r0, #1]
   13a80:	and	r1, r1, #223	; 0xdf
   13a84:	cmp	r1, #84	; 0x54
   13a88:	bne	13afc <__assert_fail@plt+0x2a6c>
   13a8c:	ldrb	r1, [r0, #2]
   13a90:	and	r1, r1, #223	; 0xdf
   13a94:	cmp	r1, #70	; 0x46
   13a98:	ldrbeq	r1, [r0, #3]
   13a9c:	cmpeq	r1, #45	; 0x2d
   13aa0:	bne	13afc <__assert_fail@plt+0x2a6c>
   13aa4:	ldrb	r1, [r0, #4]
   13aa8:	cmp	r1, #56	; 0x38
   13aac:	ldrbeq	r0, [r0, #5]
   13ab0:	cmpeq	r0, #0
   13ab4:	bne	13afc <__assert_fail@plt+0x2a6c>
   13ab8:	ldrb	r1, [r5]
   13abc:	movw	r2, #24528	; 0x5fd0
   13ac0:	movw	r0, #24532	; 0x5fd4
   13ac4:	movt	r2, #1
   13ac8:	movt	r0, #1
   13acc:	cmp	r1, #96	; 0x60
   13ad0:	moveq	r0, r2
   13ad4:	pop	{r4, r5, fp, pc}
   13ad8:	ldrb	r1, [r0, #1]
   13adc:	and	r1, r1, #223	; 0xdf
   13ae0:	cmp	r1, #66	; 0x42
   13ae4:	bne	13afc <__assert_fail@plt+0x2a6c>
   13ae8:	ldrb	r1, [r0, #2]
   13aec:	cmp	r1, #49	; 0x31
   13af0:	ldrbeq	r1, [r0, #3]
   13af4:	cmpeq	r1, #56	; 0x38
   13af8:	beq	13b18 <__assert_fail@plt+0x2a88>
   13afc:	movw	r1, #24522	; 0x5fca
   13b00:	movw	r0, #24526	; 0x5fce
   13b04:	cmp	r4, #9
   13b08:	movt	r1, #1
   13b0c:	movt	r0, #1
   13b10:	moveq	r0, r1
   13b14:	pop	{r4, r5, fp, pc}
   13b18:	ldrb	r1, [r0, #4]
   13b1c:	cmp	r1, #48	; 0x30
   13b20:	ldrbeq	r1, [r0, #5]
   13b24:	cmpeq	r1, #51	; 0x33
   13b28:	bne	13afc <__assert_fail@plt+0x2a6c>
   13b2c:	ldrb	r1, [r0, #6]
   13b30:	cmp	r1, #48	; 0x30
   13b34:	ldrbeq	r0, [r0, #7]
   13b38:	cmpeq	r0, #0
   13b3c:	bne	13afc <__assert_fail@plt+0x2a6c>
   13b40:	ldrb	r1, [r5]
   13b44:	movw	r2, #24536	; 0x5fd8
   13b48:	movw	r0, #24540	; 0x5fdc
   13b4c:	movt	r2, #1
   13b50:	movt	r0, #1
   13b54:	b	13acc <__assert_fail@plt+0x2a3c>
   13b58:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13b5c:	add	fp, sp, #24
   13b60:	sub	sp, sp, #32
   13b64:	ldr	r6, [fp, #12]
   13b68:	ldr	r7, [fp, #8]
   13b6c:	mov	r4, r2
   13b70:	mov	r8, r0
   13b74:	cmp	r1, #0
   13b78:	beq	13ba0 <__assert_fail@plt+0x2b10>
   13b7c:	movw	r2, #24628	; 0x6034
   13b80:	mov	r5, r1
   13b84:	str	r3, [sp, #4]
   13b88:	str	r4, [sp]
   13b8c:	mov	r0, r8
   13b90:	mov	r1, #1
   13b94:	movt	r2, #1
   13b98:	mov	r3, r5
   13b9c:	b	13bb8 <__assert_fail@plt+0x2b28>
   13ba0:	movw	r2, #24640	; 0x6040
   13ba4:	str	r3, [sp]
   13ba8:	mov	r0, r8
   13bac:	mov	r1, #1
   13bb0:	mov	r3, r4
   13bb4:	movt	r2, #1
   13bb8:	bl	10ff4 <__fprintf_chk@plt>
   13bbc:	movw	r1, #24647	; 0x6047
   13bc0:	mov	r0, #0
   13bc4:	mov	r2, #5
   13bc8:	movt	r1, #1
   13bcc:	bl	10ed4 <dcgettext@plt>
   13bd0:	movw	r2, #25365	; 0x6315
   13bd4:	mov	r3, r0
   13bd8:	movw	r0, #2022	; 0x7e6
   13bdc:	mov	r1, #1
   13be0:	str	r0, [sp]
   13be4:	movt	r2, #1
   13be8:	mov	r0, r8
   13bec:	bl	10ff4 <__fprintf_chk@plt>
   13bf0:	movw	r4, #24115	; 0x5e33
   13bf4:	mov	r1, r8
   13bf8:	movt	r4, #1
   13bfc:	mov	r0, r4
   13c00:	bl	10e38 <fputs_unlocked@plt>
   13c04:	movw	r1, #24651	; 0x604b
   13c08:	mov	r0, #0
   13c0c:	mov	r2, #5
   13c10:	movt	r1, #1
   13c14:	bl	10ed4 <dcgettext@plt>
   13c18:	movw	r3, #24822	; 0x60f6
   13c1c:	mov	r2, r0
   13c20:	mov	r0, r8
   13c24:	mov	r1, #1
   13c28:	movt	r3, #1
   13c2c:	bl	10ff4 <__fprintf_chk@plt>
   13c30:	mov	r0, r4
   13c34:	mov	r1, r8
   13c38:	bl	10e38 <fputs_unlocked@plt>
   13c3c:	cmp	r6, #9
   13c40:	bhi	13c7c <__assert_fail@plt+0x2bec>
   13c44:	add	r0, pc, #0
   13c48:	ldr	pc, [r0, r6, lsl #2]
   13c4c:	andeq	r3, r1, r4, ror ip
   13c50:	andeq	r3, r1, r8, lsl #25
   13c54:			; <UNDEFINED> instruction: 0x00013cb8
   13c58:	andeq	r3, r1, r0, ror #25
   13c5c:	andeq	r3, r1, r8, lsl #26
   13c60:	andeq	r3, r1, r0, lsr sp
   13c64:	andeq	r3, r1, r8, asr sp
   13c68:	muleq	r1, r0, sp
   13c6c:	andeq	r3, r1, r0, lsr lr
   13c70:	ldrdeq	r3, [r1], -r8
   13c74:	sub	sp, fp, #24
   13c78:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c7c:	movw	r1, #25175	; 0x6257
   13c80:	movt	r1, #1
   13c84:	b	13de0 <__assert_fail@plt+0x2d50>
   13c88:	movw	r1, #24856	; 0x6118
   13c8c:	mov	r0, #0
   13c90:	mov	r2, #5
   13c94:	movt	r1, #1
   13c98:	bl	10ed4 <dcgettext@plt>
   13c9c:	ldr	r3, [r7]
   13ca0:	mov	r2, r0
   13ca4:	mov	r0, r8
   13ca8:	mov	r1, #1
   13cac:	sub	sp, fp, #24
   13cb0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13cb4:	b	10ff4 <__fprintf_chk@plt>
   13cb8:	movw	r1, #24872	; 0x6128
   13cbc:	mov	r0, #0
   13cc0:	mov	r2, #5
   13cc4:	movt	r1, #1
   13cc8:	bl	10ed4 <dcgettext@plt>
   13ccc:	mov	r2, r0
   13cd0:	ldr	r3, [r7]
   13cd4:	ldr	r0, [r7, #4]
   13cd8:	str	r0, [sp]
   13cdc:	b	13dcc <__assert_fail@plt+0x2d3c>
   13ce0:	movw	r1, #24895	; 0x613f
   13ce4:	mov	r0, #0
   13ce8:	mov	r2, #5
   13cec:	movt	r1, #1
   13cf0:	bl	10ed4 <dcgettext@plt>
   13cf4:	ldr	r3, [r7]
   13cf8:	mov	r2, r0
   13cfc:	ldmib	r7, {r0, r1}
   13d00:	stm	sp, {r0, r1}
   13d04:	b	13dcc <__assert_fail@plt+0x2d3c>
   13d08:	movw	r1, #24923	; 0x615b
   13d0c:	mov	r0, #0
   13d10:	mov	r2, #5
   13d14:	movt	r1, #1
   13d18:	bl	10ed4 <dcgettext@plt>
   13d1c:	ldr	r3, [r7]
   13d20:	mov	r2, r0
   13d24:	ldmib	r7, {r0, r1, r7}
   13d28:	stm	sp, {r0, r1, r7}
   13d2c:	b	13dcc <__assert_fail@plt+0x2d3c>
   13d30:	movw	r1, #24955	; 0x617b
   13d34:	mov	r0, #0
   13d38:	mov	r2, #5
   13d3c:	movt	r1, #1
   13d40:	bl	10ed4 <dcgettext@plt>
   13d44:	ldr	r3, [r7]
   13d48:	mov	r2, r0
   13d4c:	ldmib	r7, {r0, r1, r6, r7}
   13d50:	stm	sp, {r0, r1, r6, r7}
   13d54:	b	13dcc <__assert_fail@plt+0x2d3c>
   13d58:	movw	r1, #24991	; 0x619f
   13d5c:	mov	r0, #0
   13d60:	mov	r2, #5
   13d64:	movt	r1, #1
   13d68:	bl	10ed4 <dcgettext@plt>
   13d6c:	ldr	r3, [r7]
   13d70:	mov	r2, r0
   13d74:	ldmib	r7, {r0, r1, r6}
   13d78:	ldr	r5, [r7, #16]
   13d7c:	ldr	r7, [r7, #20]
   13d80:	stm	sp, {r0, r1, r6}
   13d84:	str	r5, [sp, #12]
   13d88:	str	r7, [sp, #16]
   13d8c:	b	13dcc <__assert_fail@plt+0x2d3c>
   13d90:	movw	r1, #25031	; 0x61c7
   13d94:	mov	r0, #0
   13d98:	mov	r2, #5
   13d9c:	movt	r1, #1
   13da0:	bl	10ed4 <dcgettext@plt>
   13da4:	ldr	r3, [r7]
   13da8:	mov	r2, r0
   13dac:	ldmib	r7, {r0, r1, r6}
   13db0:	ldr	r5, [r7, #16]
   13db4:	ldr	r4, [r7, #20]
   13db8:	ldr	r7, [r7, #24]
   13dbc:	stm	sp, {r0, r1, r6}
   13dc0:	str	r5, [sp, #12]
   13dc4:	str	r4, [sp, #16]
   13dc8:	str	r7, [sp, #20]
   13dcc:	mov	r0, r8
   13dd0:	mov	r1, #1
   13dd4:	b	13e80 <__assert_fail@plt+0x2df0>
   13dd8:	movw	r1, #25123	; 0x6223
   13ddc:	movt	r1, #1
   13de0:	mov	r0, #0
   13de4:	mov	r2, #5
   13de8:	bl	10ed4 <dcgettext@plt>
   13dec:	mov	ip, r0
   13df0:	ldr	r3, [r7]
   13df4:	ldr	r0, [r7, #4]
   13df8:	ldr	r1, [r7, #8]
   13dfc:	ldr	r6, [r7, #12]
   13e00:	ldr	r5, [r7, #16]
   13e04:	ldr	r4, [r7, #20]
   13e08:	ldr	r2, [r7, #24]
   13e0c:	ldr	lr, [r7, #28]
   13e10:	ldr	r7, [r7, #32]
   13e14:	stm	sp, {r0, r1, r6}
   13e18:	str	r5, [sp, #12]
   13e1c:	str	r4, [sp, #16]
   13e20:	str	r2, [sp, #20]
   13e24:	str	lr, [sp, #24]
   13e28:	str	r7, [sp, #28]
   13e2c:	b	13e74 <__assert_fail@plt+0x2de4>
   13e30:	movw	r1, #25075	; 0x61f3
   13e34:	mov	r0, #0
   13e38:	mov	r2, #5
   13e3c:	movt	r1, #1
   13e40:	bl	10ed4 <dcgettext@plt>
   13e44:	mov	ip, r0
   13e48:	ldr	r3, [r7]
   13e4c:	ldmib	r7, {r0, r1, r6}
   13e50:	ldr	r5, [r7, #16]
   13e54:	ldr	r4, [r7, #20]
   13e58:	ldr	r2, [r7, #24]
   13e5c:	ldr	r7, [r7, #28]
   13e60:	stm	sp, {r0, r1, r6}
   13e64:	str	r5, [sp, #12]
   13e68:	str	r4, [sp, #16]
   13e6c:	str	r2, [sp, #20]
   13e70:	str	r7, [sp, #24]
   13e74:	mov	r0, r8
   13e78:	mov	r1, #1
   13e7c:	mov	r2, ip
   13e80:	bl	10ff4 <__fprintf_chk@plt>
   13e84:	sub	sp, fp, #24
   13e88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13e8c:	push	{r4, sl, fp, lr}
   13e90:	add	fp, sp, #8
   13e94:	sub	sp, sp, #8
   13e98:	ldr	ip, [fp, #8]
   13e9c:	mov	lr, #0
   13ea0:	ldr	r4, [ip, lr, lsl #2]
   13ea4:	add	lr, lr, #1
   13ea8:	cmp	r4, #0
   13eac:	bne	13ea0 <__assert_fail@plt+0x2e10>
   13eb0:	sub	r4, lr, #1
   13eb4:	str	ip, [sp]
   13eb8:	str	r4, [sp, #4]
   13ebc:	bl	13b58 <__assert_fail@plt+0x2ac8>
   13ec0:	sub	sp, fp, #8
   13ec4:	pop	{r4, sl, fp, pc}
   13ec8:	push	{fp, lr}
   13ecc:	mov	fp, sp
   13ed0:	sub	sp, sp, #48	; 0x30
   13ed4:	ldr	ip, [fp, #8]
   13ed8:	ldr	lr, [ip]
   13edc:	cmp	lr, #0
   13ee0:	str	lr, [sp, #8]
   13ee4:	beq	13f80 <__assert_fail@plt+0x2ef0>
   13ee8:	ldr	lr, [ip, #4]
   13eec:	cmp	lr, #0
   13ef0:	str	lr, [sp, #12]
   13ef4:	beq	13f88 <__assert_fail@plt+0x2ef8>
   13ef8:	ldr	lr, [ip, #8]
   13efc:	cmp	lr, #0
   13f00:	str	lr, [sp, #16]
   13f04:	beq	13f90 <__assert_fail@plt+0x2f00>
   13f08:	ldr	lr, [ip, #12]
   13f0c:	cmp	lr, #0
   13f10:	str	lr, [sp, #20]
   13f14:	beq	13f98 <__assert_fail@plt+0x2f08>
   13f18:	ldr	lr, [ip, #16]
   13f1c:	cmp	lr, #0
   13f20:	str	lr, [sp, #24]
   13f24:	beq	13fa0 <__assert_fail@plt+0x2f10>
   13f28:	ldr	lr, [ip, #20]
   13f2c:	cmp	lr, #0
   13f30:	str	lr, [sp, #28]
   13f34:	beq	13fa8 <__assert_fail@plt+0x2f18>
   13f38:	ldr	lr, [ip, #24]
   13f3c:	cmp	lr, #0
   13f40:	str	lr, [sp, #32]
   13f44:	beq	13fb0 <__assert_fail@plt+0x2f20>
   13f48:	ldr	lr, [ip, #28]
   13f4c:	cmp	lr, #0
   13f50:	str	lr, [sp, #36]	; 0x24
   13f54:	beq	13fb8 <__assert_fail@plt+0x2f28>
   13f58:	ldr	lr, [ip, #32]
   13f5c:	cmp	lr, #0
   13f60:	str	lr, [sp, #40]	; 0x28
   13f64:	beq	13fc0 <__assert_fail@plt+0x2f30>
   13f68:	ldr	lr, [ip, #36]	; 0x24
   13f6c:	mov	ip, #10
   13f70:	cmp	lr, #0
   13f74:	str	lr, [sp, #44]	; 0x2c
   13f78:	movweq	ip, #9
   13f7c:	b	13fc4 <__assert_fail@plt+0x2f34>
   13f80:	mov	ip, #0
   13f84:	b	13fc4 <__assert_fail@plt+0x2f34>
   13f88:	mov	ip, #1
   13f8c:	b	13fc4 <__assert_fail@plt+0x2f34>
   13f90:	mov	ip, #2
   13f94:	b	13fc4 <__assert_fail@plt+0x2f34>
   13f98:	mov	ip, #3
   13f9c:	b	13fc4 <__assert_fail@plt+0x2f34>
   13fa0:	mov	ip, #4
   13fa4:	b	13fc4 <__assert_fail@plt+0x2f34>
   13fa8:	mov	ip, #5
   13fac:	b	13fc4 <__assert_fail@plt+0x2f34>
   13fb0:	mov	ip, #6
   13fb4:	b	13fc4 <__assert_fail@plt+0x2f34>
   13fb8:	mov	ip, #7
   13fbc:	b	13fc4 <__assert_fail@plt+0x2f34>
   13fc0:	mov	ip, #8
   13fc4:	add	lr, sp, #8
   13fc8:	str	ip, [sp, #4]
   13fcc:	str	lr, [sp]
   13fd0:	bl	13b58 <__assert_fail@plt+0x2ac8>
   13fd4:	mov	sp, fp
   13fd8:	pop	{fp, pc}
   13fdc:	push	{fp, lr}
   13fe0:	mov	fp, sp
   13fe4:	sub	sp, sp, #56	; 0x38
   13fe8:	add	ip, fp, #8
   13fec:	str	ip, [sp, #12]
   13ff0:	ldr	lr, [fp, #8]
   13ff4:	cmp	lr, #0
   13ff8:	str	lr, [sp, #16]
   13ffc:	beq	14098 <__assert_fail@plt+0x3008>
   14000:	ldr	lr, [ip, #4]
   14004:	cmp	lr, #0
   14008:	str	lr, [sp, #20]
   1400c:	beq	140a0 <__assert_fail@plt+0x3010>
   14010:	ldr	lr, [ip, #8]
   14014:	cmp	lr, #0
   14018:	str	lr, [sp, #24]
   1401c:	beq	140a8 <__assert_fail@plt+0x3018>
   14020:	ldr	lr, [ip, #12]
   14024:	cmp	lr, #0
   14028:	str	lr, [sp, #28]
   1402c:	beq	140b0 <__assert_fail@plt+0x3020>
   14030:	ldr	lr, [ip, #16]
   14034:	cmp	lr, #0
   14038:	str	lr, [sp, #32]
   1403c:	beq	140b8 <__assert_fail@plt+0x3028>
   14040:	ldr	lr, [ip, #20]
   14044:	cmp	lr, #0
   14048:	str	lr, [sp, #36]	; 0x24
   1404c:	beq	140c0 <__assert_fail@plt+0x3030>
   14050:	ldr	lr, [ip, #24]
   14054:	cmp	lr, #0
   14058:	str	lr, [sp, #40]	; 0x28
   1405c:	beq	140c8 <__assert_fail@plt+0x3038>
   14060:	ldr	lr, [ip, #28]
   14064:	cmp	lr, #0
   14068:	str	lr, [sp, #44]	; 0x2c
   1406c:	beq	140d0 <__assert_fail@plt+0x3040>
   14070:	ldr	lr, [ip, #32]
   14074:	cmp	lr, #0
   14078:	str	lr, [sp, #48]	; 0x30
   1407c:	beq	140d8 <__assert_fail@plt+0x3048>
   14080:	ldr	lr, [ip, #36]	; 0x24
   14084:	mov	ip, #10
   14088:	cmp	lr, #0
   1408c:	str	lr, [sp, #52]	; 0x34
   14090:	movweq	ip, #9
   14094:	b	140dc <__assert_fail@plt+0x304c>
   14098:	mov	ip, #0
   1409c:	b	140dc <__assert_fail@plt+0x304c>
   140a0:	mov	ip, #1
   140a4:	b	140dc <__assert_fail@plt+0x304c>
   140a8:	mov	ip, #2
   140ac:	b	140dc <__assert_fail@plt+0x304c>
   140b0:	mov	ip, #3
   140b4:	b	140dc <__assert_fail@plt+0x304c>
   140b8:	mov	ip, #4
   140bc:	b	140dc <__assert_fail@plt+0x304c>
   140c0:	mov	ip, #5
   140c4:	b	140dc <__assert_fail@plt+0x304c>
   140c8:	mov	ip, #6
   140cc:	b	140dc <__assert_fail@plt+0x304c>
   140d0:	mov	ip, #7
   140d4:	b	140dc <__assert_fail@plt+0x304c>
   140d8:	mov	ip, #8
   140dc:	add	lr, sp, #16
   140e0:	str	ip, [sp, #4]
   140e4:	str	lr, [sp]
   140e8:	bl	13b58 <__assert_fail@plt+0x2ac8>
   140ec:	mov	sp, fp
   140f0:	pop	{fp, pc}
   140f4:	push	{fp, lr}
   140f8:	mov	fp, sp
   140fc:	movw	r0, #29004	; 0x714c
   14100:	movt	r0, #2
   14104:	ldr	r1, [r0]
   14108:	movw	r0, #24115	; 0x5e33
   1410c:	movt	r0, #1
   14110:	bl	10e38 <fputs_unlocked@plt>
   14114:	movw	r1, #25235	; 0x6293
   14118:	mov	r0, #0
   1411c:	mov	r2, #5
   14120:	movt	r1, #1
   14124:	bl	10ed4 <dcgettext@plt>
   14128:	movw	r2, #25255	; 0x62a7
   1412c:	mov	r1, r0
   14130:	mov	r0, #1
   14134:	movt	r2, #1
   14138:	bl	10fdc <__printf_chk@plt>
   1413c:	movw	r1, #25277	; 0x62bd
   14140:	mov	r0, #0
   14144:	mov	r2, #5
   14148:	movt	r1, #1
   1414c:	bl	10ed4 <dcgettext@plt>
   14150:	movw	r2, #23645	; 0x5c5d
   14154:	movw	r3, #23924	; 0x5d74
   14158:	mov	r1, r0
   1415c:	mov	r0, #1
   14160:	movt	r2, #1
   14164:	movt	r3, #1
   14168:	bl	10fdc <__printf_chk@plt>
   1416c:	movw	r1, #25297	; 0x62d1
   14170:	mov	r0, #0
   14174:	mov	r2, #5
   14178:	movt	r1, #1
   1417c:	bl	10ed4 <dcgettext@plt>
   14180:	movw	r2, #25336	; 0x62f8
   14184:	mov	r1, r0
   14188:	mov	r0, #1
   1418c:	movt	r2, #1
   14190:	pop	{fp, lr}
   14194:	b	10fdc <__printf_chk@plt>
   14198:	push	{r4, r5, r6, sl, fp, lr}
   1419c:	add	fp, sp, #16
   141a0:	mov	r4, r2
   141a4:	mov	r5, r1
   141a8:	mov	r6, r0
   141ac:	bl	1576c <__assert_fail@plt+0x46dc>
   141b0:	cmp	r0, #0
   141b4:	popne	{r4, r5, r6, sl, fp, pc}
   141b8:	cmp	r6, #0
   141bc:	beq	141d0 <__assert_fail@plt+0x3140>
   141c0:	cmp	r5, #0
   141c4:	cmpne	r4, #0
   141c8:	bne	141d0 <__assert_fail@plt+0x3140>
   141cc:	pop	{r4, r5, r6, sl, fp, pc}
   141d0:	bl	14770 <__assert_fail@plt+0x36e0>
   141d4:	push	{r4, r5, r6, sl, fp, lr}
   141d8:	add	fp, sp, #16
   141dc:	mov	r4, r2
   141e0:	mov	r5, r1
   141e4:	mov	r6, r0
   141e8:	bl	1576c <__assert_fail@plt+0x46dc>
   141ec:	cmp	r0, #0
   141f0:	popne	{r4, r5, r6, sl, fp, pc}
   141f4:	cmp	r6, #0
   141f8:	beq	1420c <__assert_fail@plt+0x317c>
   141fc:	cmp	r5, #0
   14200:	cmpne	r4, #0
   14204:	bne	1420c <__assert_fail@plt+0x317c>
   14208:	pop	{r4, r5, r6, sl, fp, pc}
   1420c:	bl	14770 <__assert_fail@plt+0x36e0>
   14210:	push	{fp, lr}
   14214:	mov	fp, sp
   14218:	bl	155a4 <__assert_fail@plt+0x4514>
   1421c:	cmp	r0, #0
   14220:	popne	{fp, pc}
   14224:	bl	14770 <__assert_fail@plt+0x36e0>
   14228:	push	{fp, lr}
   1422c:	mov	fp, sp
   14230:	bl	155a4 <__assert_fail@plt+0x4514>
   14234:	cmp	r0, #0
   14238:	popne	{fp, pc}
   1423c:	bl	14770 <__assert_fail@plt+0x36e0>
   14240:	push	{fp, lr}
   14244:	mov	fp, sp
   14248:	bl	155a4 <__assert_fail@plt+0x4514>
   1424c:	cmp	r0, #0
   14250:	popne	{fp, pc}
   14254:	bl	14770 <__assert_fail@plt+0x36e0>
   14258:	push	{r4, r5, fp, lr}
   1425c:	add	fp, sp, #8
   14260:	mov	r4, r1
   14264:	mov	r5, r0
   14268:	bl	155d4 <__assert_fail@plt+0x4544>
   1426c:	cmp	r0, #0
   14270:	popne	{r4, r5, fp, pc}
   14274:	cmp	r5, #0
   14278:	beq	14288 <__assert_fail@plt+0x31f8>
   1427c:	cmp	r4, #0
   14280:	bne	14288 <__assert_fail@plt+0x31f8>
   14284:	pop	{r4, r5, fp, pc}
   14288:	bl	14770 <__assert_fail@plt+0x36e0>
   1428c:	push	{fp, lr}
   14290:	mov	fp, sp
   14294:	cmp	r1, #0
   14298:	orreq	r1, r1, #1
   1429c:	bl	155d4 <__assert_fail@plt+0x4544>
   142a0:	cmp	r0, #0
   142a4:	popne	{fp, pc}
   142a8:	bl	14770 <__assert_fail@plt+0x36e0>
   142ac:	push	{fp, lr}
   142b0:	mov	fp, sp
   142b4:	clz	r3, r2
   142b8:	lsr	ip, r3, #5
   142bc:	clz	r3, r1
   142c0:	lsr	r3, r3, #5
   142c4:	orrs	r3, r3, ip
   142c8:	movwne	r1, #1
   142cc:	movwne	r2, #1
   142d0:	bl	1576c <__assert_fail@plt+0x46dc>
   142d4:	cmp	r0, #0
   142d8:	popne	{fp, pc}
   142dc:	bl	14770 <__assert_fail@plt+0x36e0>
   142e0:	push	{fp, lr}
   142e4:	mov	fp, sp
   142e8:	mov	r2, r1
   142ec:	mov	r1, r0
   142f0:	mov	r0, #0
   142f4:	bl	1576c <__assert_fail@plt+0x46dc>
   142f8:	cmp	r0, #0
   142fc:	popne	{fp, pc}
   14300:	bl	14770 <__assert_fail@plt+0x36e0>
   14304:	push	{fp, lr}
   14308:	mov	fp, sp
   1430c:	mov	r2, r1
   14310:	mov	r1, r0
   14314:	clz	r0, r2
   14318:	clz	r3, r1
   1431c:	lsr	r0, r0, #5
   14320:	lsr	r3, r3, #5
   14324:	orrs	r0, r3, r0
   14328:	movwne	r1, #1
   1432c:	movwne	r2, #1
   14330:	mov	r0, #0
   14334:	bl	1576c <__assert_fail@plt+0x46dc>
   14338:	cmp	r0, #0
   1433c:	popne	{fp, pc}
   14340:	bl	14770 <__assert_fail@plt+0x36e0>
   14344:	push	{r4, r5, r6, sl, fp, lr}
   14348:	add	fp, sp, #16
   1434c:	ldr	r5, [r1]
   14350:	mov	r4, r1
   14354:	mov	r6, r0
   14358:	cmp	r0, #0
   1435c:	beq	14374 <__assert_fail@plt+0x32e4>
   14360:	mov	r0, #1
   14364:	add	r0, r0, r5, lsr #1
   14368:	adds	r5, r5, r0
   1436c:	bcc	1437c <__assert_fail@plt+0x32ec>
   14370:	b	143b8 <__assert_fail@plt+0x3328>
   14374:	cmp	r5, #0
   14378:	movweq	r5, #64	; 0x40
   1437c:	mov	r0, r6
   14380:	mov	r1, r5
   14384:	mov	r2, #1
   14388:	bl	1576c <__assert_fail@plt+0x46dc>
   1438c:	cmp	r5, #0
   14390:	mov	r1, r5
   14394:	movwne	r1, #1
   14398:	cmp	r0, #0
   1439c:	bne	143b0 <__assert_fail@plt+0x3320>
   143a0:	clz	r2, r6
   143a4:	lsr	r2, r2, #5
   143a8:	orrs	r1, r2, r1
   143ac:	bne	143b8 <__assert_fail@plt+0x3328>
   143b0:	str	r5, [r4]
   143b4:	pop	{r4, r5, r6, sl, fp, pc}
   143b8:	bl	14770 <__assert_fail@plt+0x36e0>
   143bc:	push	{r4, r5, r6, r7, fp, lr}
   143c0:	add	fp, sp, #16
   143c4:	ldr	r5, [r1]
   143c8:	mov	r6, r2
   143cc:	mov	r4, r1
   143d0:	mov	r7, r0
   143d4:	cmp	r0, #0
   143d8:	beq	143f0 <__assert_fail@plt+0x3360>
   143dc:	mov	r0, #1
   143e0:	add	r0, r0, r5, lsr #1
   143e4:	adds	r5, r5, r0
   143e8:	bcc	14408 <__assert_fail@plt+0x3378>
   143ec:	b	1443c <__assert_fail@plt+0x33ac>
   143f0:	cmp	r5, #0
   143f4:	bne	14408 <__assert_fail@plt+0x3378>
   143f8:	mov	r0, #64	; 0x40
   143fc:	cmp	r6, #64	; 0x40
   14400:	udiv	r5, r0, r6
   14404:	addhi	r5, r5, #1
   14408:	mov	r0, r7
   1440c:	mov	r1, r5
   14410:	mov	r2, r6
   14414:	bl	1576c <__assert_fail@plt+0x46dc>
   14418:	cmp	r0, #0
   1441c:	bne	14434 <__assert_fail@plt+0x33a4>
   14420:	cmp	r7, #0
   14424:	beq	1443c <__assert_fail@plt+0x33ac>
   14428:	cmp	r6, #0
   1442c:	cmpne	r5, #0
   14430:	bne	1443c <__assert_fail@plt+0x33ac>
   14434:	str	r5, [r4]
   14438:	pop	{r4, r5, r6, r7, fp, pc}
   1443c:	bl	14770 <__assert_fail@plt+0x36e0>
   14440:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14444:	add	fp, sp, #24
   14448:	mov	r8, r1
   1444c:	ldr	r1, [r1]
   14450:	mov	r5, r0
   14454:	add	r0, r1, r1, asr #1
   14458:	cmp	r0, r1
   1445c:	mvnvs	r0, #-2147483648	; 0x80000000
   14460:	cmp	r0, r3
   14464:	mov	r7, r0
   14468:	movgt	r7, r3
   1446c:	cmn	r3, #1
   14470:	movle	r7, r0
   14474:	ldr	r0, [fp, #8]
   14478:	cmn	r0, #1
   1447c:	ble	144a4 <__assert_fail@plt+0x3414>
   14480:	cmp	r0, #0
   14484:	beq	144f8 <__assert_fail@plt+0x3468>
   14488:	cmn	r7, #1
   1448c:	ble	144cc <__assert_fail@plt+0x343c>
   14490:	mvn	r4, #-2147483648	; 0x80000000
   14494:	udiv	r6, r4, r0
   14498:	cmp	r6, r7
   1449c:	bge	144f8 <__assert_fail@plt+0x3468>
   144a0:	b	14508 <__assert_fail@plt+0x3478>
   144a4:	cmn	r7, #1
   144a8:	ble	144e8 <__assert_fail@plt+0x3458>
   144ac:	cmn	r0, #1
   144b0:	beq	144f8 <__assert_fail@plt+0x3468>
   144b4:	mov	r6, #-2147483648	; 0x80000000
   144b8:	mvn	r4, #-2147483648	; 0x80000000
   144bc:	sdiv	r6, r6, r0
   144c0:	cmp	r6, r7
   144c4:	bge	144f8 <__assert_fail@plt+0x3468>
   144c8:	b	14508 <__assert_fail@plt+0x3478>
   144cc:	beq	144f8 <__assert_fail@plt+0x3468>
   144d0:	mov	r6, #-2147483648	; 0x80000000
   144d4:	mvn	r4, #-2147483648	; 0x80000000
   144d8:	sdiv	r6, r6, r7
   144dc:	cmp	r6, r0
   144e0:	bge	144f8 <__assert_fail@plt+0x3468>
   144e4:	b	14508 <__assert_fail@plt+0x3478>
   144e8:	mvn	r4, #-2147483648	; 0x80000000
   144ec:	sdiv	r6, r4, r0
   144f0:	cmp	r7, r6
   144f4:	blt	14508 <__assert_fail@plt+0x3478>
   144f8:	mul	r6, r7, r0
   144fc:	mov	r4, #64	; 0x40
   14500:	cmp	r6, #63	; 0x3f
   14504:	bgt	14510 <__assert_fail@plt+0x3480>
   14508:	sdiv	r7, r4, r0
   1450c:	mul	r6, r7, r0
   14510:	cmp	r5, #0
   14514:	moveq	r4, #0
   14518:	streq	r4, [r8]
   1451c:	sub	r4, r7, r1
   14520:	cmp	r4, r2
   14524:	bge	145d0 <__assert_fail@plt+0x3540>
   14528:	add	r7, r1, r2
   1452c:	mov	r6, #0
   14530:	mov	r2, #0
   14534:	cmp	r7, r3
   14538:	movwgt	r6, #1
   1453c:	cmn	r3, #1
   14540:	movwgt	r2, #1
   14544:	cmp	r7, r1
   14548:	bvs	14604 <__assert_fail@plt+0x3574>
   1454c:	ands	r1, r2, r6
   14550:	bne	14604 <__assert_fail@plt+0x3574>
   14554:	cmn	r0, #1
   14558:	ble	14580 <__assert_fail@plt+0x34f0>
   1455c:	cmp	r0, #0
   14560:	beq	145cc <__assert_fail@plt+0x353c>
   14564:	cmn	r7, #1
   14568:	ble	145a4 <__assert_fail@plt+0x3514>
   1456c:	mvn	r1, #-2147483648	; 0x80000000
   14570:	udiv	r1, r1, r0
   14574:	cmp	r1, r7
   14578:	bge	145cc <__assert_fail@plt+0x353c>
   1457c:	b	14604 <__assert_fail@plt+0x3574>
   14580:	cmn	r7, #1
   14584:	ble	145bc <__assert_fail@plt+0x352c>
   14588:	cmn	r0, #1
   1458c:	beq	145cc <__assert_fail@plt+0x353c>
   14590:	mov	r1, #-2147483648	; 0x80000000
   14594:	sdiv	r1, r1, r0
   14598:	cmp	r1, r7
   1459c:	bge	145cc <__assert_fail@plt+0x353c>
   145a0:	b	14604 <__assert_fail@plt+0x3574>
   145a4:	beq	145cc <__assert_fail@plt+0x353c>
   145a8:	mov	r1, #-2147483648	; 0x80000000
   145ac:	sdiv	r1, r1, r7
   145b0:	cmp	r1, r0
   145b4:	bge	145cc <__assert_fail@plt+0x353c>
   145b8:	b	14604 <__assert_fail@plt+0x3574>
   145bc:	mvn	r1, #-2147483648	; 0x80000000
   145c0:	sdiv	r1, r1, r0
   145c4:	cmp	r7, r1
   145c8:	blt	14604 <__assert_fail@plt+0x3574>
   145cc:	mul	r6, r7, r0
   145d0:	mov	r0, r5
   145d4:	mov	r1, r6
   145d8:	bl	155d4 <__assert_fail@plt+0x4544>
   145dc:	cmp	r6, #0
   145e0:	movwne	r6, #1
   145e4:	cmp	r0, #0
   145e8:	bne	145fc <__assert_fail@plt+0x356c>
   145ec:	clz	r1, r5
   145f0:	lsr	r1, r1, #5
   145f4:	orrs	r1, r1, r6
   145f8:	bne	14604 <__assert_fail@plt+0x3574>
   145fc:	str	r7, [r8]
   14600:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14604:	bl	14770 <__assert_fail@plt+0x36e0>
   14608:	push	{fp, lr}
   1460c:	mov	fp, sp
   14610:	mov	r1, #1
   14614:	bl	15550 <__assert_fail@plt+0x44c0>
   14618:	cmp	r0, #0
   1461c:	popne	{fp, pc}
   14620:	bl	14770 <__assert_fail@plt+0x36e0>
   14624:	push	{fp, lr}
   14628:	mov	fp, sp
   1462c:	bl	15550 <__assert_fail@plt+0x44c0>
   14630:	cmp	r0, #0
   14634:	popne	{fp, pc}
   14638:	bl	14770 <__assert_fail@plt+0x36e0>
   1463c:	push	{fp, lr}
   14640:	mov	fp, sp
   14644:	mov	r1, #1
   14648:	bl	15550 <__assert_fail@plt+0x44c0>
   1464c:	cmp	r0, #0
   14650:	popne	{fp, pc}
   14654:	bl	14770 <__assert_fail@plt+0x36e0>
   14658:	push	{fp, lr}
   1465c:	mov	fp, sp
   14660:	bl	15550 <__assert_fail@plt+0x44c0>
   14664:	cmp	r0, #0
   14668:	popne	{fp, pc}
   1466c:	bl	14770 <__assert_fail@plt+0x36e0>
   14670:	push	{r4, r5, r6, sl, fp, lr}
   14674:	add	fp, sp, #16
   14678:	mov	r5, r0
   1467c:	mov	r0, r1
   14680:	mov	r4, r1
   14684:	bl	155a4 <__assert_fail@plt+0x4514>
   14688:	cmp	r0, #0
   1468c:	beq	146a8 <__assert_fail@plt+0x3618>
   14690:	mov	r1, r5
   14694:	mov	r2, r4
   14698:	mov	r6, r0
   1469c:	bl	10e98 <memcpy@plt>
   146a0:	mov	r0, r6
   146a4:	pop	{r4, r5, r6, sl, fp, pc}
   146a8:	bl	14770 <__assert_fail@plt+0x36e0>
   146ac:	push	{r4, r5, r6, sl, fp, lr}
   146b0:	add	fp, sp, #16
   146b4:	mov	r5, r0
   146b8:	mov	r0, r1
   146bc:	mov	r4, r1
   146c0:	bl	155a4 <__assert_fail@plt+0x4514>
   146c4:	cmp	r0, #0
   146c8:	beq	146e4 <__assert_fail@plt+0x3654>
   146cc:	mov	r1, r5
   146d0:	mov	r2, r4
   146d4:	mov	r6, r0
   146d8:	bl	10e98 <memcpy@plt>
   146dc:	mov	r0, r6
   146e0:	pop	{r4, r5, r6, sl, fp, pc}
   146e4:	bl	14770 <__assert_fail@plt+0x36e0>
   146e8:	push	{r4, r5, r6, sl, fp, lr}
   146ec:	add	fp, sp, #16
   146f0:	mov	r5, r0
   146f4:	add	r0, r1, #1
   146f8:	mov	r4, r1
   146fc:	bl	155a4 <__assert_fail@plt+0x4514>
   14700:	cmp	r0, #0
   14704:	beq	1472c <__assert_fail@plt+0x369c>
   14708:	mov	r6, r0
   1470c:	mov	r0, #0
   14710:	mov	r1, r5
   14714:	mov	r2, r4
   14718:	strb	r0, [r6, r4]
   1471c:	mov	r0, r6
   14720:	bl	10e98 <memcpy@plt>
   14724:	mov	r0, r6
   14728:	pop	{r4, r5, r6, sl, fp, pc}
   1472c:	bl	14770 <__assert_fail@plt+0x36e0>
   14730:	push	{r4, r5, r6, sl, fp, lr}
   14734:	add	fp, sp, #16
   14738:	mov	r4, r0
   1473c:	bl	10fa0 <strlen@plt>
   14740:	add	r5, r0, #1
   14744:	mov	r0, r5
   14748:	bl	155a4 <__assert_fail@plt+0x4514>
   1474c:	cmp	r0, #0
   14750:	beq	1476c <__assert_fail@plt+0x36dc>
   14754:	mov	r1, r4
   14758:	mov	r2, r5
   1475c:	mov	r6, r0
   14760:	bl	10e98 <memcpy@plt>
   14764:	mov	r0, r6
   14768:	pop	{r4, r5, r6, sl, fp, pc}
   1476c:	bl	14770 <__assert_fail@plt+0x36e0>
   14770:	push	{fp, lr}
   14774:	mov	fp, sp
   14778:	movw	r0, #28908	; 0x70ec
   1477c:	movw	r1, #25412	; 0x6344
   14780:	mov	r2, #5
   14784:	movt	r0, #2
   14788:	movt	r1, #1
   1478c:	ldr	r4, [r0]
   14790:	mov	r0, #0
   14794:	bl	10ed4 <dcgettext@plt>
   14798:	movw	r2, #24375	; 0x5f37
   1479c:	mov	r3, r0
   147a0:	mov	r0, r4
   147a4:	mov	r1, #0
   147a8:	movt	r2, #1
   147ac:	bl	10f40 <error@plt>
   147b0:	bl	11084 <abort@plt>
   147b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   147b8:	add	fp, sp, #24
   147bc:	sub	sp, sp, #16
   147c0:	mov	r8, r0
   147c4:	ldr	r0, [fp, #16]
   147c8:	mov	r5, r3
   147cc:	mov	r6, r2
   147d0:	mov	r2, r1
   147d4:	add	r3, sp, #8
   147d8:	mov	r1, #0
   147dc:	str	r0, [sp]
   147e0:	mov	r0, r8
   147e4:	bl	148b0 <__assert_fail@plt+0x3820>
   147e8:	cmp	r0, #0
   147ec:	bne	14878 <__assert_fail@plt+0x37e8>
   147f0:	ldr	r4, [sp, #8]
   147f4:	ldr	r7, [sp, #12]
   147f8:	subs	r0, r4, r6
   147fc:	sbcs	r0, r7, r5
   14800:	bcc	14824 <__assert_fail@plt+0x3794>
   14804:	ldr	r1, [fp, #8]
   14808:	ldr	r0, [fp, #12]
   1480c:	subs	r1, r1, r4
   14810:	sbcs	r0, r0, r7
   14814:	movcs	r0, r4
   14818:	movcs	r1, r7
   1481c:	subcs	sp, fp, #24
   14820:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   14824:	bl	10fb8 <__errno_location@plt>
   14828:	subs	r1, r4, #1073741824	; 0x40000000
   1482c:	sbcs	r1, r7, #0
   14830:	movcc	r1, #34	; 0x22
   14834:	movcs	r1, #75	; 0x4b
   14838:	str	r1, [r0]
   1483c:	ldr	r6, [r0]
   14840:	ldr	r4, [fp, #24]
   14844:	ldr	r5, [fp, #20]
   14848:	mov	r0, r8
   1484c:	bl	13a20 <__assert_fail@plt+0x2990>
   14850:	subs	r1, r6, #22
   14854:	movw	r2, #24371	; 0x5f33
   14858:	str	r0, [sp]
   1485c:	mov	r3, r5
   14860:	movne	r1, r6
   14864:	cmp	r4, #0
   14868:	movt	r2, #1
   1486c:	movweq	r4, #1
   14870:	mov	r0, r4
   14874:	bl	10f40 <error@plt>
   14878:	cmp	r0, #1
   1487c:	beq	14894 <__assert_fail@plt+0x3804>
   14880:	cmp	r0, #3
   14884:	bne	148a0 <__assert_fail@plt+0x3810>
   14888:	bl	10fb8 <__errno_location@plt>
   1488c:	mov	r1, #0
   14890:	b	14838 <__assert_fail@plt+0x37a8>
   14894:	bl	10fb8 <__errno_location@plt>
   14898:	mov	r1, #75	; 0x4b
   1489c:	b	14838 <__assert_fail@plt+0x37a8>
   148a0:	bl	10fb8 <__errno_location@plt>
   148a4:	b	1483c <__assert_fail@plt+0x37ac>
   148a8:	mov	r1, #10
   148ac:	b	147b4 <__assert_fail@plt+0x3724>
   148b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148b4:	add	fp, sp, #28
   148b8:	sub	sp, sp, #44	; 0x2c
   148bc:	cmp	r2, #37	; 0x25
   148c0:	bcs	15530 <__assert_fail@plt+0x44a0>
   148c4:	ldr	sl, [fp, #8]
   148c8:	mov	r6, r2
   148cc:	mov	r7, r1
   148d0:	mov	r4, r0
   148d4:	str	r3, [sp, #36]	; 0x24
   148d8:	bl	10fb8 <__errno_location@plt>
   148dc:	mov	r5, r0
   148e0:	mov	r0, #0
   148e4:	str	r0, [r5]
   148e8:	bl	10f88 <__ctype_b_loc@plt>
   148ec:	ldr	r1, [r0]
   148f0:	mov	r2, r4
   148f4:	ldrb	r0, [r2], #1
   148f8:	add	r3, r1, r0, lsl #1
   148fc:	ldrb	r3, [r3, #1]
   14900:	tst	r3, #32
   14904:	bne	148f4 <__assert_fail@plt+0x3864>
   14908:	sub	r9, fp, #32
   1490c:	cmp	r7, #0
   14910:	mov	r8, #4
   14914:	movne	r9, r7
   14918:	cmp	r0, #45	; 0x2d
   1491c:	beq	15524 <__assert_fail@plt+0x4494>
   14920:	mov	r0, r4
   14924:	mov	r1, r9
   14928:	mov	r2, r6
   1492c:	mov	r3, #0
   14930:	bl	10ea4 <__strtoull_internal@plt>
   14934:	mov	r7, r1
   14938:	ldr	r1, [r9]
   1493c:	cmp	r1, r4
   14940:	beq	1496c <__assert_fail@plt+0x38dc>
   14944:	mov	r6, r0
   14948:	ldr	r0, [r5]
   1494c:	cmp	r0, #0
   14950:	beq	149a8 <__assert_fail@plt+0x3918>
   14954:	cmp	r0, #34	; 0x22
   14958:	bne	15524 <__assert_fail@plt+0x4494>
   1495c:	mov	r8, #1
   14960:	cmp	sl, #0
   14964:	bne	149b4 <__assert_fail@plt+0x3924>
   14968:	b	1551c <__assert_fail@plt+0x448c>
   1496c:	cmp	sl, #0
   14970:	beq	15524 <__assert_fail@plt+0x4494>
   14974:	mov	r5, r1
   14978:	ldrb	r1, [r4]
   1497c:	cmp	r1, #0
   14980:	beq	15524 <__assert_fail@plt+0x4494>
   14984:	mov	r0, sl
   14988:	bl	10fac <strchr@plt>
   1498c:	cmp	r0, #0
   14990:	beq	15524 <__assert_fail@plt+0x4494>
   14994:	mov	r1, r5
   14998:	mov	r8, #0
   1499c:	mov	r6, #1
   149a0:	mov	r7, #0
   149a4:	b	149b4 <__assert_fail@plt+0x3924>
   149a8:	mov	r8, r0
   149ac:	cmp	sl, #0
   149b0:	beq	1551c <__assert_fail@plt+0x448c>
   149b4:	ldrb	r4, [r1]
   149b8:	cmp	r4, #0
   149bc:	beq	1551c <__assert_fail@plt+0x448c>
   149c0:	str	r1, [sp, #32]
   149c4:	mov	r0, sl
   149c8:	mov	r1, r4
   149cc:	bl	10fac <strchr@plt>
   149d0:	cmp	r0, #0
   149d4:	beq	14c9c <__assert_fail@plt+0x3c0c>
   149d8:	sub	r0, r4, #69	; 0x45
   149dc:	mov	r1, #1
   149e0:	mov	r3, #0
   149e4:	mov	r5, #1024	; 0x400
   149e8:	cmp	r0, #47	; 0x2f
   149ec:	str	r1, [sp, #28]
   149f0:	bhi	14af4 <__assert_fail@plt+0x3a64>
   149f4:	add	r1, pc, #0
   149f8:	ldr	pc, [r1, r0, lsl #2]
   149fc:			; <UNDEFINED> instruction: 0x00014abc
   14a00:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a04:			; <UNDEFINED> instruction: 0x00014abc
   14a08:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a0c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a10:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a14:			; <UNDEFINED> instruction: 0x00014abc
   14a18:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a1c:			; <UNDEFINED> instruction: 0x00014abc
   14a20:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a24:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a28:			; <UNDEFINED> instruction: 0x00014abc
   14a2c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a30:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a34:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a38:			; <UNDEFINED> instruction: 0x00014abc
   14a3c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a40:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a44:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a48:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a4c:			; <UNDEFINED> instruction: 0x00014abc
   14a50:			; <UNDEFINED> instruction: 0x00014abc
   14a54:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a58:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a5c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a60:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a64:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a68:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a6c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a70:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a74:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a78:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a7c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a80:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a84:			; <UNDEFINED> instruction: 0x00014abc
   14a88:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a8c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a90:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a94:			; <UNDEFINED> instruction: 0x00014abc
   14a98:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a9c:			; <UNDEFINED> instruction: 0x00014abc
   14aa0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14aa4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14aa8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14aac:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ab0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ab4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ab8:			; <UNDEFINED> instruction: 0x00014abc
   14abc:	mov	r0, sl
   14ac0:	mov	r1, #48	; 0x30
   14ac4:	bl	10fac <strchr@plt>
   14ac8:	cmp	r0, #0
   14acc:	beq	14af0 <__assert_fail@plt+0x3a60>
   14ad0:	ldr	r1, [sp, #32]
   14ad4:	ldrb	r0, [r1, #1]
   14ad8:	cmp	r0, #66	; 0x42
   14adc:	cmpne	r0, #68	; 0x44
   14ae0:	bne	14ca8 <__assert_fail@plt+0x3c18>
   14ae4:	mov	r5, #1000	; 0x3e8
   14ae8:	mov	r0, #2
   14aec:	str	r0, [sp, #28]
   14af0:	mov	r3, #0
   14af4:	sub	r0, r4, #66	; 0x42
   14af8:	cmp	r0, #53	; 0x35
   14afc:	bhi	14c9c <__assert_fail@plt+0x3c0c>
   14b00:	add	r1, pc, #0
   14b04:	ldr	pc, [r1, r0, lsl #2]
   14b08:	andeq	r5, r1, r4, lsr #32
   14b0c:	muleq	r1, ip, ip
   14b10:	muleq	r1, ip, ip
   14b14:	andeq	r5, r1, ip, asr #32
   14b18:	muleq	r1, ip, ip
   14b1c:	andeq	r4, r1, r0, ror #23
   14b20:	muleq	r1, ip, ip
   14b24:	muleq	r1, ip, ip
   14b28:	muleq	r1, ip, ip
   14b2c:	andeq	r4, r1, ip, asr #25
   14b30:	muleq	r1, ip, ip
   14b34:	andeq	r4, r1, r4, lsl sp
   14b38:	muleq	r1, ip, ip
   14b3c:	muleq	r1, ip, ip
   14b40:	andeq	r5, r1, r4, lsr #3
   14b44:	muleq	r1, ip, ip
   14b48:	muleq	r1, ip, ip
   14b4c:	muleq	r1, ip, ip
   14b50:	andeq	r4, r1, r0, lsr #27
   14b54:	muleq	r1, ip, ip
   14b58:	muleq	r1, ip, ip
   14b5c:	muleq	r1, ip, ip
   14b60:	muleq	r1, ip, ip
   14b64:	andeq	r5, r1, ip, asr #5
   14b68:	andeq	r4, r1, r8, lsl #29
   14b6c:	muleq	r1, ip, ip
   14b70:	muleq	r1, ip, ip
   14b74:	muleq	r1, ip, ip
   14b78:	muleq	r1, ip, ip
   14b7c:	muleq	r1, ip, ip
   14b80:	muleq	r1, ip, ip
   14b84:	muleq	r1, ip, ip
   14b88:	andeq	r5, r1, r4, lsr #9
   14b8c:	strdeq	r5, [r1], -ip
   14b90:	muleq	r1, ip, ip
   14b94:	muleq	r1, ip, ip
   14b98:	muleq	r1, ip, ip
   14b9c:	andeq	r4, r1, r0, ror #23
   14ba0:	muleq	r1, ip, ip
   14ba4:	muleq	r1, ip, ip
   14ba8:	muleq	r1, ip, ip
   14bac:	andeq	r4, r1, ip, asr #25
   14bb0:	muleq	r1, ip, ip
   14bb4:	andeq	r4, r1, r4, lsl sp
   14bb8:	muleq	r1, ip, ip
   14bbc:	muleq	r1, ip, ip
   14bc0:	muleq	r1, ip, ip
   14bc4:	muleq	r1, ip, ip
   14bc8:	muleq	r1, ip, ip
   14bcc:	muleq	r1, ip, ip
   14bd0:	andeq	r4, r1, r0, lsr #27
   14bd4:	muleq	r1, ip, ip
   14bd8:	muleq	r1, ip, ip
   14bdc:	ldrdeq	r5, [r1], -r8
   14be0:	mvn	r0, #0
   14be4:	mvn	r1, #0
   14be8:	mov	r2, r5
   14bec:	mov	sl, r3
   14bf0:	bl	158b0 <__assert_fail@plt+0x4820>
   14bf4:	subs	r3, r0, r6
   14bf8:	mov	lr, #0
   14bfc:	umull	r4, r2, r6, r5
   14c00:	str	r1, [sp, #20]
   14c04:	sbcs	r3, r1, r7
   14c08:	mla	ip, r6, sl, r2
   14c0c:	mov	r2, r1
   14c10:	movwcc	lr, #1
   14c14:	mla	r7, r7, r5, ip
   14c18:	mov	r2, #0
   14c1c:	cmp	lr, #0
   14c20:	mvnne	r4, #0
   14c24:	mvnne	r7, #0
   14c28:	subs	r6, r0, r4
   14c2c:	sbcs	r6, r1, r7
   14c30:	movwcc	r2, #1
   14c34:	umull	r3, r6, r4, r5
   14c38:	cmp	r2, #0
   14c3c:	str	r6, [sp, #16]
   14c40:	mvnne	r3, #0
   14c44:	cmp	r2, #0
   14c48:	umull	r6, ip, r3, r5
   14c4c:	mla	r1, r3, sl, ip
   14c50:	ldr	ip, [sp, #16]
   14c54:	str	r1, [sp, #12]
   14c58:	mla	r4, r4, sl, ip
   14c5c:	mla	r4, r7, r5, r4
   14c60:	ldr	r7, [sp, #12]
   14c64:	mvnne	r4, #0
   14c68:	subs	r0, r0, r3
   14c6c:	ldr	r0, [sp, #20]
   14c70:	mla	r7, r4, r5, r7
   14c74:	sbcs	r0, r0, r4
   14c78:	mov	r0, #0
   14c7c:	movwcc	r0, #1
   14c80:	cmp	r0, #0
   14c84:	mov	r1, r0
   14c88:	orr	r0, lr, r2
   14c8c:	mvnne	r7, #0
   14c90:	mvnne	r6, #0
   14c94:	orr	r3, r0, r1
   14c98:	b	154fc <__assert_fail@plt+0x446c>
   14c9c:	ldr	r0, [sp, #36]	; 0x24
   14ca0:	orr	r8, r8, #2
   14ca4:	b	15520 <__assert_fail@plt+0x4490>
   14ca8:	cmp	r0, #105	; 0x69
   14cac:	mov	r3, #0
   14cb0:	bne	14af4 <__assert_fail@plt+0x3a64>
   14cb4:	ldrb	r0, [r1, #2]
   14cb8:	mov	r1, #1
   14cbc:	cmp	r0, #66	; 0x42
   14cc0:	movweq	r1, #3
   14cc4:	str	r1, [sp, #28]
   14cc8:	b	14af4 <__assert_fail@plt+0x3a64>
   14ccc:	mvn	r0, #0
   14cd0:	mvn	r1, #0
   14cd4:	mov	r2, r5
   14cd8:	mov	r4, r3
   14cdc:	bl	158b0 <__assert_fail@plt+0x4820>
   14ce0:	subs	r0, r0, r6
   14ce4:	mov	r2, #0
   14ce8:	sbcs	r0, r1, r7
   14cec:	movwcc	r2, #1
   14cf0:	umull	r0, r1, r6, r5
   14cf4:	mla	r1, r6, r4, r1
   14cf8:	cmp	r2, #0
   14cfc:	mov	r3, r2
   14d00:	mla	r7, r7, r5, r1
   14d04:	mvnne	r0, #0
   14d08:	mvnne	r7, #0
   14d0c:	mov	r6, r0
   14d10:	b	154fc <__assert_fail@plt+0x446c>
   14d14:	mvn	r0, #0
   14d18:	mvn	r1, #0
   14d1c:	mov	r2, r5
   14d20:	str	r3, [sp, #24]
   14d24:	bl	158b0 <__assert_fail@plt+0x4820>
   14d28:	subs	r3, r0, r6
   14d2c:	mov	ip, r0
   14d30:	umull	r4, r0, r6, r5
   14d34:	mov	sl, #0
   14d38:	sbcs	r3, r1, r7
   14d3c:	str	r0, [sp, #20]
   14d40:	ldr	r0, [sp, #24]
   14d44:	mov	r3, #0
   14d48:	movwcc	r3, #1
   14d4c:	cmp	r3, #0
   14d50:	mvnne	r4, #0
   14d54:	cmp	r3, #0
   14d58:	umull	lr, r2, r4, r5
   14d5c:	mla	r2, r4, r0, r2
   14d60:	str	r2, [sp, #16]
   14d64:	ldr	r2, [sp, #20]
   14d68:	mla	r6, r6, r0, r2
   14d6c:	ldr	r0, [sp, #16]
   14d70:	mla	r6, r7, r5, r6
   14d74:	mvnne	r6, #0
   14d78:	mla	r7, r6, r5, r0
   14d7c:	subs	r0, ip, r4
   14d80:	sbcs	r0, r1, r6
   14d84:	movwcc	sl, #1
   14d88:	cmp	sl, #0
   14d8c:	orr	r3, r3, sl
   14d90:	mvnne	lr, #0
   14d94:	mvnne	r7, #0
   14d98:	mov	r6, lr
   14d9c:	b	154fc <__assert_fail@plt+0x446c>
   14da0:	mvn	r0, #0
   14da4:	mvn	r1, #0
   14da8:	mov	r2, r5
   14dac:	mov	sl, r3
   14db0:	bl	158b0 <__assert_fail@plt+0x4820>
   14db4:	subs	r3, r0, r6
   14db8:	mov	ip, r1
   14dbc:	umull	r2, lr, r6, r5
   14dc0:	str	r0, [sp, #20]
   14dc4:	sbcs	r3, r1, r7
   14dc8:	mov	r1, #0
   14dcc:	mla	r6, r6, sl, lr
   14dd0:	mov	lr, #0
   14dd4:	str	ip, [sp, #16]
   14dd8:	movwcc	r1, #1
   14ddc:	mla	r7, r7, r5, r6
   14de0:	cmp	r1, #0
   14de4:	mvnne	r2, #0
   14de8:	cmp	r1, #0
   14dec:	umull	r3, r4, r2, r5
   14df0:	mvnne	r7, #0
   14df4:	mla	r4, r2, sl, r4
   14df8:	subs	r2, r0, r2
   14dfc:	sbcs	r2, ip, r7
   14e00:	mla	r4, r7, r5, r4
   14e04:	movwcc	lr, #1
   14e08:	mov	r2, #0
   14e0c:	cmp	lr, #0
   14e10:	mvnne	r3, #0
   14e14:	mvnne	r4, #0
   14e18:	subs	r7, r0, r3
   14e1c:	mov	r0, r5
   14e20:	sbcs	r7, ip, r4
   14e24:	movwcc	r2, #1
   14e28:	umull	r5, r7, r3, r5
   14e2c:	cmp	r2, #0
   14e30:	mla	r3, r3, sl, r7
   14e34:	mvnne	r5, #0
   14e38:	mla	r3, r4, r0, r3
   14e3c:	cmp	r2, #0
   14e40:	umull	r6, ip, r5, r0
   14e44:	mvnne	r3, #0
   14e48:	mla	ip, r5, sl, ip
   14e4c:	mla	r7, r3, r0, ip
   14e50:	ldr	r0, [sp, #20]
   14e54:	subs	r0, r0, r5
   14e58:	ldr	r0, [sp, #16]
   14e5c:	sbcs	r0, r0, r3
   14e60:	mov	r0, #0
   14e64:	movwcc	r0, #1
   14e68:	cmp	r0, #0
   14e6c:	mov	r3, r0
   14e70:	orr	r0, r1, lr
   14e74:	orr	r0, r0, r2
   14e78:	mvnne	r7, #0
   14e7c:	mvnne	r6, #0
   14e80:	orr	r3, r0, r3
   14e84:	b	154fc <__assert_fail@plt+0x446c>
   14e88:	mvn	r0, #0
   14e8c:	mvn	r1, #0
   14e90:	mov	r2, r5
   14e94:	mov	r4, r3
   14e98:	str	r3, [sp, #24]
   14e9c:	bl	158b0 <__assert_fail@plt+0x4820>
   14ea0:	umull	r3, r2, r6, r5
   14ea4:	mla	r2, r6, r4, r2
   14ea8:	subs	r6, r0, r6
   14eac:	sbcs	r6, r1, r7
   14eb0:	mla	ip, r7, r5, r2
   14eb4:	ldr	r2, [sp, #24]
   14eb8:	mov	r6, #0
   14ebc:	movwcc	r6, #1
   14ec0:	cmp	r6, #0
   14ec4:	str	r6, [sp, #20]
   14ec8:	mov	r6, #0
   14ecc:	mvnne	r3, #0
   14ed0:	mvnne	ip, #0
   14ed4:	subs	r4, r0, r3
   14ed8:	umull	r7, lr, r3, r5
   14edc:	sbcs	r4, r1, ip
   14ee0:	mla	r3, r3, r2, lr
   14ee4:	movwcc	r6, #1
   14ee8:	cmp	r6, #0
   14eec:	str	r6, [sp, #16]
   14ef0:	mvnne	r7, #0
   14ef4:	cmp	r6, #0
   14ef8:	umull	sl, r4, r7, r5
   14efc:	mla	r4, r7, r2, r4
   14f00:	mla	r2, ip, r5, r3
   14f04:	mov	ip, #0
   14f08:	mvnne	r2, #0
   14f0c:	subs	r3, r0, r7
   14f10:	mla	r6, r2, r5, r4
   14f14:	mov	r4, r0
   14f18:	sbcs	r2, r1, r2
   14f1c:	mov	r0, #0
   14f20:	movwcc	r0, #1
   14f24:	mov	r3, r4
   14f28:	cmp	r0, #0
   14f2c:	str	r0, [sp, #12]
   14f30:	mov	r0, r1
   14f34:	str	r3, [sp, #4]
   14f38:	mvnne	sl, #0
   14f3c:	mvnne	r6, #0
   14f40:	str	r0, [sp, #8]
   14f44:	subs	r2, r4, sl
   14f48:	ldr	r4, [sp, #24]
   14f4c:	sbcs	r2, r1, r6
   14f50:	movwcc	ip, #1
   14f54:	umull	r7, r2, sl, r5
   14f58:	cmp	ip, #0
   14f5c:	mla	r2, sl, r4, r2
   14f60:	mvnne	r7, #0
   14f64:	cmp	ip, #0
   14f68:	mov	sl, #0
   14f6c:	umull	r1, lr, r7, r5
   14f70:	mla	r2, r6, r5, r2
   14f74:	mvnne	r2, #0
   14f78:	mla	lr, r7, r4, lr
   14f7c:	subs	r6, r3, r7
   14f80:	mla	lr, r2, r5, lr
   14f84:	sbcs	r2, r0, r2
   14f88:	movwcc	sl, #1
   14f8c:	mov	r2, #0
   14f90:	cmp	sl, #0
   14f94:	mvnne	r1, #0
   14f98:	mvnne	lr, #0
   14f9c:	subs	r6, r3, r1
   14fa0:	ldr	r3, [sp, #24]
   14fa4:	sbcs	r6, r0, lr
   14fa8:	umull	r0, r7, r1, r5
   14fac:	movwcc	r2, #1
   14fb0:	cmp	r2, #0
   14fb4:	mvnne	r0, #0
   14fb8:	mla	r1, r1, r3, r7
   14fbc:	cmp	r2, #0
   14fc0:	umull	r6, r4, r0, r5
   14fc4:	mla	r1, lr, r5, r1
   14fc8:	mla	r4, r0, r3, r4
   14fcc:	ldr	r3, [sp, #4]
   14fd0:	mvnne	r1, #0
   14fd4:	mla	r7, r1, r5, r4
   14fd8:	ldr	r5, [sp, #16]
   14fdc:	subs	r0, r3, r0
   14fe0:	ldr	r0, [sp, #8]
   14fe4:	sbcs	r0, r0, r1
   14fe8:	mov	r0, #0
   14fec:	movwcc	r0, #1
   14ff0:	cmp	r0, #0
   14ff4:	mov	r1, r0
   14ff8:	ldr	r0, [sp, #20]
   14ffc:	mvnne	r7, #0
   15000:	mvnne	r6, #0
   15004:	orr	r0, r0, r5
   15008:	ldr	r5, [sp, #12]
   1500c:	orr	r0, r0, r5
   15010:	orr	r0, r0, ip
   15014:	orr	r0, r0, sl
   15018:	orr	r0, r0, r2
   1501c:	orr	r0, r0, r1
   15020:	b	1549c <__assert_fail@plt+0x440c>
   15024:	mov	r1, #0
   15028:	lsl	r2, r7, #10
   1502c:	lsl	r0, r6, #10
   15030:	lsr	r3, r7, #22
   15034:	cmp	r1, r7, lsr #22
   15038:	orr	r2, r2, r6, lsr #22
   1503c:	mvnne	r0, #0
   15040:	movwne	r3, #1
   15044:	cmp	r1, r7, lsr #22
   15048:	b	154c8 <__assert_fail@plt+0x4438>
   1504c:	mvn	r0, #0
   15050:	mvn	r1, #0
   15054:	mov	r2, r5
   15058:	mov	sl, r3
   1505c:	bl	158b0 <__assert_fail@plt+0x4820>
   15060:	subs	r2, r0, r6
   15064:	mov	ip, r0
   15068:	mov	r0, #0
   1506c:	sbcs	r2, r1, r7
   15070:	movwcc	r0, #1
   15074:	umull	r4, r2, r6, r5
   15078:	cmp	r0, #0
   1507c:	mla	r2, r6, sl, r2
   15080:	str	r0, [sp, #20]
   15084:	mvnne	r4, #0
   15088:	cmp	r0, #0
   1508c:	mla	r2, r7, r5, r2
   15090:	mov	r0, #0
   15094:	umull	lr, r3, r4, r5
   15098:	mvnne	r2, #0
   1509c:	mla	r3, r4, sl, r3
   150a0:	mla	r6, r2, r5, r3
   150a4:	subs	r3, ip, r4
   150a8:	sbcs	r2, r1, r2
   150ac:	mov	r3, r1
   150b0:	movwcc	r0, #1
   150b4:	str	r3, [sp, #8]
   150b8:	cmp	r0, #0
   150bc:	str	r0, [sp, #16]
   150c0:	mov	r0, ip
   150c4:	mvnne	lr, #0
   150c8:	mvnne	r6, #0
   150cc:	str	r0, [sp, #12]
   150d0:	subs	r2, ip, lr
   150d4:	umull	r7, r4, lr, r5
   150d8:	sbcs	r2, r1, r6
   150dc:	mla	r4, lr, sl, r4
   150e0:	mov	r2, #0
   150e4:	mla	r6, r6, r5, r4
   150e8:	mov	r4, #0
   150ec:	movwcc	r2, #1
   150f0:	cmp	r2, #0
   150f4:	mvnne	r7, #0
   150f8:	cmp	r2, #0
   150fc:	umull	r1, ip, r7, r5
   15100:	mvnne	r6, #0
   15104:	mla	ip, r7, sl, ip
   15108:	subs	r7, r0, r7
   1510c:	mla	lr, r6, r5, ip
   15110:	sbcs	r7, r3, r6
   15114:	mov	ip, #0
   15118:	movwcc	ip, #1
   1511c:	cmp	ip, #0
   15120:	mvnne	r1, #0
   15124:	mvnne	lr, #0
   15128:	subs	r7, r0, r1
   1512c:	sbcs	r7, r3, lr
   15130:	movwcc	r4, #1
   15134:	umull	r0, r7, r1, r5
   15138:	cmp	r4, #0
   1513c:	mla	r1, r1, sl, r7
   15140:	mvnne	r0, #0
   15144:	mla	r1, lr, r5, r1
   15148:	cmp	r4, #0
   1514c:	umull	r6, r3, r0, r5
   15150:	mvnne	r1, #0
   15154:	mla	r3, r0, sl, r3
   15158:	mla	r7, r1, r5, r3
   1515c:	ldr	r3, [sp, #12]
   15160:	subs	r0, r3, r0
   15164:	ldr	r3, [sp, #16]
   15168:	ldr	r0, [sp, #8]
   1516c:	sbcs	r0, r0, r1
   15170:	mov	r0, #0
   15174:	movwcc	r0, #1
   15178:	cmp	r0, #0
   1517c:	mov	r1, r0
   15180:	ldr	r0, [sp, #20]
   15184:	mvnne	r7, #0
   15188:	mvnne	r6, #0
   1518c:	orr	r0, r0, r3
   15190:	orr	r0, r0, r2
   15194:	orr	r0, r0, ip
   15198:	orr	r0, r0, r4
   1519c:	orr	r3, r0, r1
   151a0:	b	154fc <__assert_fail@plt+0x446c>
   151a4:	mvn	r0, #0
   151a8:	mvn	r1, #0
   151ac:	mov	r2, r5
   151b0:	mov	sl, r3
   151b4:	bl	158b0 <__assert_fail@plt+0x4820>
   151b8:	umull	r3, r2, r6, r5
   151bc:	mov	lr, r1
   151c0:	mov	r1, r0
   151c4:	mla	r2, r6, sl, r2
   151c8:	subs	r6, r0, r6
   151cc:	mov	r0, #0
   151d0:	sbcs	r6, lr, r7
   151d4:	mla	r2, r7, r5, r2
   151d8:	movwcc	r0, #1
   151dc:	cmp	r0, #0
   151e0:	str	r0, [sp, #20]
   151e4:	mov	r0, r1
   151e8:	mvnne	r3, #0
   151ec:	mvnne	r2, #0
   151f0:	str	r0, [sp, #16]
   151f4:	subs	r4, r1, r3
   151f8:	umull	r7, ip, r3, r5
   151fc:	sbcs	r4, lr, r2
   15200:	mla	r3, r3, sl, ip
   15204:	mov	ip, #0
   15208:	mov	r4, #0
   1520c:	mla	r2, r2, r5, r3
   15210:	movwcc	r4, #1
   15214:	cmp	r4, #0
   15218:	mvnne	r7, #0
   1521c:	cmp	r4, #0
   15220:	umull	r1, r6, r7, r5
   15224:	mvnne	r2, #0
   15228:	mla	r6, r7, sl, r6
   1522c:	mla	r3, r2, r5, r6
   15230:	subs	r6, r0, r7
   15234:	sbcs	r2, lr, r2
   15238:	movwcc	ip, #1
   1523c:	mov	r2, #0
   15240:	cmp	ip, #0
   15244:	mvnne	r1, #0
   15248:	mvnne	r3, #0
   1524c:	subs	r6, r0, r1
   15250:	sbcs	r6, lr, r3
   15254:	movwcc	r2, #1
   15258:	umull	r0, r6, r1, r5
   1525c:	cmp	r2, #0
   15260:	str	r6, [sp, #12]
   15264:	mvnne	r0, #0
   15268:	cmp	r2, #0
   1526c:	umull	r6, r7, r0, r5
   15270:	mla	r7, r0, sl, r7
   15274:	str	r7, [sp, #8]
   15278:	ldr	r7, [sp, #12]
   1527c:	mla	r1, r1, sl, r7
   15280:	mla	r1, r3, r5, r1
   15284:	ldr	r3, [sp, #8]
   15288:	mvnne	r1, #0
   1528c:	mla	r7, r1, r5, r3
   15290:	ldr	r3, [sp, #16]
   15294:	subs	r0, r3, r0
   15298:	sbcs	r0, lr, r1
   1529c:	mov	r0, #0
   152a0:	movwcc	r0, #1
   152a4:	cmp	r0, #0
   152a8:	mov	r1, r0
   152ac:	ldr	r0, [sp, #20]
   152b0:	mvnne	r7, #0
   152b4:	mvnne	r6, #0
   152b8:	orr	r0, r0, r4
   152bc:	orr	r0, r0, ip
   152c0:	orr	r0, r0, r2
   152c4:	orr	r3, r0, r1
   152c8:	b	154fc <__assert_fail@plt+0x446c>
   152cc:	mvn	r0, #0
   152d0:	mvn	r1, #0
   152d4:	mov	r2, r5
   152d8:	mov	sl, r3
   152dc:	bl	158b0 <__assert_fail@plt+0x4820>
   152e0:	mov	lr, r0
   152e4:	subs	r0, r0, r6
   152e8:	mov	r2, #0
   152ec:	mov	ip, r1
   152f0:	str	sl, [sp, #24]
   152f4:	sbcs	r0, r1, r7
   152f8:	umull	r3, r1, r6, r5
   152fc:	str	lr, [sp, #4]
   15300:	movwcc	r2, #1
   15304:	mla	r6, r6, sl, r1
   15308:	mov	r1, #0
   1530c:	cmp	r2, #0
   15310:	mla	r7, r7, r5, r6
   15314:	str	r2, [sp, #20]
   15318:	mvnne	r3, #0
   1531c:	cmp	r2, #0
   15320:	mov	r2, #0
   15324:	umull	r0, r4, r3, r5
   15328:	mvnne	r7, #0
   1532c:	mla	r4, r3, sl, r4
   15330:	subs	r3, lr, r3
   15334:	sbcs	r3, ip, r7
   15338:	mla	r4, r7, r5, r4
   1533c:	movwcc	r1, #1
   15340:	cmp	r1, #0
   15344:	str	r1, [sp, #16]
   15348:	mvnne	r0, #0
   1534c:	mvnne	r4, #0
   15350:	subs	r3, lr, r0
   15354:	sbcs	r3, ip, r4
   15358:	movwcc	r2, #1
   1535c:	umull	r6, r3, r0, r5
   15360:	cmp	r2, #0
   15364:	mla	r0, r0, sl, r3
   15368:	str	r2, [sp, #12]
   1536c:	mvnne	r6, #0
   15370:	mla	r0, r4, r5, r0
   15374:	cmp	r2, #0
   15378:	ldr	r4, [sp, #24]
   1537c:	umull	r1, r7, r6, r5
   15380:	mvnne	r0, #0
   15384:	subs	r3, lr, r6
   15388:	mla	r7, r6, sl, r7
   1538c:	mov	r3, ip
   15390:	mla	r7, r0, r5, r7
   15394:	sbcs	r0, ip, r0
   15398:	str	r3, [sp]
   1539c:	mov	r0, #0
   153a0:	movwcc	r0, #1
   153a4:	cmp	r0, #0
   153a8:	str	r0, [sp, #8]
   153ac:	mvnne	r1, #0
   153b0:	mvnne	r7, #0
   153b4:	subs	r0, lr, r1
   153b8:	sbcs	r0, ip, r7
   153bc:	mov	ip, #0
   153c0:	movwcc	ip, #1
   153c4:	umull	r6, r0, r1, r5
   153c8:	cmp	ip, #0
   153cc:	mla	r1, r1, r4, r0
   153d0:	mov	r0, lr
   153d4:	mvnne	r6, #0
   153d8:	mla	r1, r7, r5, r1
   153dc:	cmp	ip, #0
   153e0:	umull	r2, sl, r6, r5
   153e4:	mvnne	r1, #0
   153e8:	mla	sl, r6, r4, sl
   153ec:	subs	r6, lr, r6
   153f0:	mov	lr, #0
   153f4:	mla	r7, r1, r5, sl
   153f8:	sbcs	r1, r3, r1
   153fc:	movwcc	lr, #1
   15400:	ldr	r1, [sp, #24]
   15404:	cmp	lr, #0
   15408:	mvnne	r2, #0
   1540c:	mvnne	r7, #0
   15410:	subs	r6, r0, r2
   15414:	umull	r0, sl, r2, r5
   15418:	sbcs	r6, r3, r7
   1541c:	mov	r3, #0
   15420:	mla	r2, r2, r1, sl
   15424:	movwcc	r3, #1
   15428:	mla	r2, r7, r5, r2
   1542c:	cmp	r3, #0
   15430:	mvnne	r0, #0
   15434:	cmp	r3, #0
   15438:	umull	r6, r4, r0, r5
   1543c:	mvnne	r2, #0
   15440:	mla	r4, r0, r1, r4
   15444:	ldr	r1, [sp, #4]
   15448:	mla	r7, r2, r5, r4
   1544c:	ldr	r5, [sp, #16]
   15450:	subs	r0, r1, r0
   15454:	ldr	r0, [sp]
   15458:	sbcs	r0, r0, r2
   1545c:	mov	r0, #0
   15460:	movwcc	r0, #1
   15464:	cmp	r0, #0
   15468:	mov	r2, r0
   1546c:	ldr	r0, [sp, #20]
   15470:	mvnne	r7, #0
   15474:	mvnne	r6, #0
   15478:	orr	r0, r0, r5
   1547c:	ldr	r5, [sp, #12]
   15480:	orr	r0, r0, r5
   15484:	ldr	r5, [sp, #8]
   15488:	orr	r0, r0, r5
   1548c:	orr	r0, r0, ip
   15490:	orr	r0, r0, lr
   15494:	orr	r0, r0, r3
   15498:	orr	r0, r0, r2
   1549c:	and	r3, r0, #1
   154a0:	b	154fc <__assert_fail@plt+0x446c>
   154a4:	mov	r1, #0
   154a8:	lsl	r2, r7, #9
   154ac:	lsl	r0, r6, #9
   154b0:	lsr	r3, r7, #23
   154b4:	cmp	r1, r7, lsr #23
   154b8:	orr	r2, r2, r6, lsr #23
   154bc:	mvnne	r0, #0
   154c0:	movwne	r3, #1
   154c4:	cmp	r1, r7, lsr #23
   154c8:	mvnne	r2, #0
   154cc:	mov	r6, r0
   154d0:	mov	r7, r2
   154d4:	b	154fc <__assert_fail@plt+0x446c>
   154d8:	lsl	r1, r7, #1
   154dc:	lsl	r0, r6, #1
   154e0:	cmp	r7, #0
   154e4:	lsr	r3, r7, #31
   154e8:	orr	r1, r1, r6, lsr #31
   154ec:	mvnlt	r0, #0
   154f0:	mvnlt	r1, #0
   154f4:	mov	r6, r0
   154f8:	mov	r7, r1
   154fc:	ldr	r1, [sp, #32]
   15500:	ldr	r2, [sp, #28]
   15504:	orr	r8, r3, r8
   15508:	add	r0, r1, r2
   1550c:	str	r0, [r9]
   15510:	ldrb	r0, [r1, r2]
   15514:	cmp	r0, #0
   15518:	orrne	r8, r8, #2
   1551c:	ldr	r0, [sp, #36]	; 0x24
   15520:	strd	r6, [r0]
   15524:	mov	r0, r8
   15528:	sub	sp, fp, #28
   1552c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15530:	movw	r0, #25429	; 0x6355
   15534:	movw	r1, #25467	; 0x637b
   15538:	movw	r3, #25483	; 0x638b
   1553c:	mov	r2, #85	; 0x55
   15540:	movt	r0, #1
   15544:	movt	r1, #1
   15548:	movt	r3, #1
   1554c:	bl	11090 <__assert_fail@plt>
   15550:	clz	r2, r1
   15554:	clz	r3, r0
   15558:	lsr	r2, r2, #5
   1555c:	lsr	r3, r3, #5
   15560:	orrs	r2, r3, r2
   15564:	movwne	r1, #1
   15568:	movwne	r0, #1
   1556c:	cmp	r1, #0
   15570:	beq	155a0 <__assert_fail@plt+0x4510>
   15574:	mvn	r2, #-2147483648	; 0x80000000
   15578:	udiv	r2, r2, r1
   1557c:	cmp	r2, r0
   15580:	bcs	155a0 <__assert_fail@plt+0x4510>
   15584:	push	{fp, lr}
   15588:	mov	fp, sp
   1558c:	bl	10fb8 <__errno_location@plt>
   15590:	mov	r1, #12
   15594:	str	r1, [r0]
   15598:	mov	r0, #0
   1559c:	pop	{fp, pc}
   155a0:	b	10e2c <calloc@plt>
   155a4:	cmp	r0, #0
   155a8:	movweq	r0, #1
   155ac:	cmn	r0, #1
   155b0:	ble	155b8 <__assert_fail@plt+0x4528>
   155b4:	b	10f4c <malloc@plt>
   155b8:	push	{fp, lr}
   155bc:	mov	fp, sp
   155c0:	bl	10fb8 <__errno_location@plt>
   155c4:	mov	r1, #12
   155c8:	str	r1, [r0]
   155cc:	mov	r0, #0
   155d0:	pop	{fp, pc}
   155d4:	push	{fp, lr}
   155d8:	mov	fp, sp
   155dc:	cmp	r0, #0
   155e0:	beq	155fc <__assert_fail@plt+0x456c>
   155e4:	cmp	r1, #0
   155e8:	beq	15608 <__assert_fail@plt+0x4578>
   155ec:	cmn	r1, #1
   155f0:	ble	15614 <__assert_fail@plt+0x4584>
   155f4:	pop	{fp, lr}
   155f8:	b	10ee0 <realloc@plt>
   155fc:	mov	r0, r1
   15600:	pop	{fp, lr}
   15604:	b	155a4 <__assert_fail@plt+0x4514>
   15608:	bl	156ac <__assert_fail@plt+0x461c>
   1560c:	mov	r0, #0
   15610:	pop	{fp, pc}
   15614:	bl	10fb8 <__errno_location@plt>
   15618:	mov	r1, #12
   1561c:	str	r1, [r0]
   15620:	mov	r0, #0
   15624:	pop	{fp, pc}
   15628:	push	{r4, r5, r6, sl, fp, lr}
   1562c:	add	fp, sp, #16
   15630:	mov	r4, r0
   15634:	bl	10f28 <__fpending@plt>
   15638:	ldr	r6, [r4]
   1563c:	mov	r5, r0
   15640:	mov	r0, r4
   15644:	bl	11c50 <__assert_fail@plt+0xbc0>
   15648:	tst	r6, #32
   1564c:	bne	15684 <__assert_fail@plt+0x45f4>
   15650:	cmp	r0, #0
   15654:	mov	r4, r0
   15658:	mvnne	r4, #0
   1565c:	cmp	r5, #0
   15660:	bne	15690 <__assert_fail@plt+0x4600>
   15664:	cmp	r0, #0
   15668:	beq	15690 <__assert_fail@plt+0x4600>
   1566c:	bl	10fb8 <__errno_location@plt>
   15670:	ldr	r0, [r0]
   15674:	subs	r4, r0, #9
   15678:	mvnne	r4, #0
   1567c:	mov	r0, r4
   15680:	pop	{r4, r5, r6, sl, fp, pc}
   15684:	mvn	r4, #0
   15688:	cmp	r0, #0
   1568c:	beq	15698 <__assert_fail@plt+0x4608>
   15690:	mov	r0, r4
   15694:	pop	{r4, r5, r6, sl, fp, pc}
   15698:	bl	10fb8 <__errno_location@plt>
   1569c:	mov	r1, #0
   156a0:	str	r1, [r0]
   156a4:	mov	r0, r4
   156a8:	pop	{r4, r5, r6, sl, fp, pc}
   156ac:	push	{r4, r5, r6, sl, fp, lr}
   156b0:	add	fp, sp, #16
   156b4:	mov	r4, r0
   156b8:	bl	10fb8 <__errno_location@plt>
   156bc:	ldr	r6, [r0]
   156c0:	mov	r5, r0
   156c4:	mov	r0, r4
   156c8:	bl	10e80 <free@plt>
   156cc:	str	r6, [r5]
   156d0:	pop	{r4, r5, r6, sl, fp, pc}
   156d4:	push	{fp, lr}
   156d8:	mov	fp, sp
   156dc:	mov	r0, #14
   156e0:	bl	11048 <nl_langinfo@plt>
   156e4:	movw	r1, #24116	; 0x5e34
   156e8:	cmp	r0, #0
   156ec:	movt	r1, #1
   156f0:	movne	r1, r0
   156f4:	movw	r0, #25562	; 0x63da
   156f8:	ldrb	r2, [r1]
   156fc:	movt	r0, #1
   15700:	cmp	r2, #0
   15704:	movne	r0, r1
   15708:	pop	{fp, pc}
   1570c:	push	{r4, r5, r6, r7, fp, lr}
   15710:	add	fp, sp, #16
   15714:	sub	sp, sp, #8
   15718:	add	r5, sp, #4
   1571c:	cmp	r0, #0
   15720:	mov	r7, r2
   15724:	mov	r4, r1
   15728:	movne	r5, r0
   1572c:	mov	r0, r5
   15730:	bl	10f34 <mbrtowc@plt>
   15734:	mov	r6, r0
   15738:	cmp	r7, #0
   1573c:	beq	15760 <__assert_fail@plt+0x46d0>
   15740:	cmn	r6, #2
   15744:	bcc	15760 <__assert_fail@plt+0x46d0>
   15748:	mov	r0, #0
   1574c:	bl	157a8 <__assert_fail@plt+0x4718>
   15750:	cmp	r0, #0
   15754:	ldrbeq	r0, [r4]
   15758:	moveq	r6, #1
   1575c:	streq	r0, [r5]
   15760:	mov	r0, r6
   15764:	sub	sp, fp, #16
   15768:	pop	{r4, r5, r6, r7, fp, pc}
   1576c:	cmp	r2, #0
   15770:	beq	157a0 <__assert_fail@plt+0x4710>
   15774:	mvn	r3, #0
   15778:	udiv	r3, r3, r2
   1577c:	cmp	r3, r1
   15780:	bcs	157a0 <__assert_fail@plt+0x4710>
   15784:	push	{fp, lr}
   15788:	mov	fp, sp
   1578c:	bl	10fb8 <__errno_location@plt>
   15790:	mov	r1, #12
   15794:	str	r1, [r0]
   15798:	mov	r0, #0
   1579c:	pop	{fp, pc}
   157a0:	mul	r1, r2, r1
   157a4:	b	155d4 <__assert_fail@plt+0x4544>
   157a8:	push	{r4, sl, fp, lr}
   157ac:	add	fp, sp, #8
   157b0:	sub	sp, sp, #264	; 0x108
   157b4:	add	r1, sp, #7
   157b8:	movw	r2, #257	; 0x101
   157bc:	bl	1580c <__assert_fail@plt+0x477c>
   157c0:	mov	r4, #0
   157c4:	cmp	r0, #0
   157c8:	bne	15800 <__assert_fail@plt+0x4770>
   157cc:	movw	r1, #25568	; 0x63e0
   157d0:	add	r0, sp, #7
   157d4:	movt	r1, #1
   157d8:	bl	10e50 <strcmp@plt>
   157dc:	cmp	r0, #0
   157e0:	beq	15800 <__assert_fail@plt+0x4770>
   157e4:	movw	r1, #25570	; 0x63e2
   157e8:	add	r0, sp, #7
   157ec:	movt	r1, #1
   157f0:	bl	10e50 <strcmp@plt>
   157f4:	mov	r4, r0
   157f8:	cmp	r0, #0
   157fc:	movwne	r4, #1
   15800:	mov	r0, r4
   15804:	sub	sp, fp, #8
   15808:	pop	{r4, sl, fp, pc}
   1580c:	push	{r4, r5, r6, r7, fp, lr}
   15810:	add	fp, sp, #16
   15814:	mov	r4, r1
   15818:	mov	r1, #0
   1581c:	mov	r6, r2
   15820:	bl	11030 <setlocale@plt>
   15824:	cmp	r0, #0
   15828:	beq	15858 <__assert_fail@plt+0x47c8>
   1582c:	mov	r7, r0
   15830:	bl	10fa0 <strlen@plt>
   15834:	cmp	r0, r6
   15838:	bcs	15878 <__assert_fail@plt+0x47e8>
   1583c:	add	r2, r0, #1
   15840:	mov	r0, r4
   15844:	mov	r1, r7
   15848:	bl	10e98 <memcpy@plt>
   1584c:	mov	r5, #0
   15850:	mov	r0, r5
   15854:	pop	{r4, r5, r6, r7, fp, pc}
   15858:	cmp	r6, #0
   1585c:	mov	r5, #22
   15860:	movne	r0, #0
   15864:	strbne	r0, [r4]
   15868:	movne	r0, r5
   1586c:	popne	{r4, r5, r6, r7, fp, pc}
   15870:	mov	r0, r5
   15874:	pop	{r4, r5, r6, r7, fp, pc}
   15878:	mov	r5, #34	; 0x22
   1587c:	cmp	r6, #0
   15880:	beq	158a0 <__assert_fail@plt+0x4810>
   15884:	sub	r6, r6, #1
   15888:	mov	r0, r4
   1588c:	mov	r1, r7
   15890:	mov	r2, r6
   15894:	bl	10e98 <memcpy@plt>
   15898:	mov	r0, #0
   1589c:	strb	r0, [r4, r6]
   158a0:	mov	r0, r5
   158a4:	pop	{r4, r5, r6, r7, fp, pc}
   158a8:	mov	r1, #0
   158ac:	b	11030 <setlocale@plt>
   158b0:	cmp	r3, #0
   158b4:	cmpeq	r2, #0
   158b8:	bne	158d0 <__assert_fail@plt+0x4840>
   158bc:	cmp	r1, #0
   158c0:	cmpeq	r0, #0
   158c4:	mvnne	r1, #0
   158c8:	mvnne	r0, #0
   158cc:	b	158ec <__assert_fail@plt+0x485c>
   158d0:	sub	sp, sp, #8
   158d4:	push	{sp, lr}
   158d8:	bl	158fc <__assert_fail@plt+0x486c>
   158dc:	ldr	lr, [sp, #4]
   158e0:	add	sp, sp, #8
   158e4:	pop	{r2, r3}
   158e8:	bx	lr
   158ec:	push	{r1, lr}
   158f0:	mov	r0, #8
   158f4:	bl	10e44 <raise@plt>
   158f8:	pop	{r1, pc}
   158fc:	cmp	r1, r3
   15900:	cmpeq	r0, r2
   15904:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15908:	mov	r4, r0
   1590c:	movcc	r0, #0
   15910:	mov	r5, r1
   15914:	ldr	lr, [sp, #36]	; 0x24
   15918:	movcc	r1, r0
   1591c:	bcc	15a18 <__assert_fail@plt+0x4988>
   15920:	cmp	r3, #0
   15924:	clzeq	ip, r2
   15928:	clzne	ip, r3
   1592c:	addeq	ip, ip, #32
   15930:	cmp	r5, #0
   15934:	clzeq	r1, r4
   15938:	addeq	r1, r1, #32
   1593c:	clzne	r1, r5
   15940:	sub	ip, ip, r1
   15944:	sub	sl, ip, #32
   15948:	lsl	r9, r3, ip
   1594c:	rsb	fp, ip, #32
   15950:	orr	r9, r9, r2, lsl sl
   15954:	orr	r9, r9, r2, lsr fp
   15958:	lsl	r8, r2, ip
   1595c:	cmp	r5, r9
   15960:	cmpeq	r4, r8
   15964:	movcc	r0, #0
   15968:	movcc	r1, r0
   1596c:	bcc	15988 <__assert_fail@plt+0x48f8>
   15970:	mov	r0, #1
   15974:	subs	r4, r4, r8
   15978:	lsl	r1, r0, sl
   1597c:	orr	r1, r1, r0, lsr fp
   15980:	lsl	r0, r0, ip
   15984:	sbc	r5, r5, r9
   15988:	cmp	ip, #0
   1598c:	beq	15a18 <__assert_fail@plt+0x4988>
   15990:	lsr	r6, r8, #1
   15994:	orr	r6, r6, r9, lsl #31
   15998:	lsr	r7, r9, #1
   1599c:	mov	r2, ip
   159a0:	b	159c4 <__assert_fail@plt+0x4934>
   159a4:	subs	r3, r4, r6
   159a8:	sbc	r8, r5, r7
   159ac:	adds	r3, r3, r3
   159b0:	adc	r8, r8, r8
   159b4:	adds	r4, r3, #1
   159b8:	adc	r5, r8, #0
   159bc:	subs	r2, r2, #1
   159c0:	beq	159e0 <__assert_fail@plt+0x4950>
   159c4:	cmp	r5, r7
   159c8:	cmpeq	r4, r6
   159cc:	bcs	159a4 <__assert_fail@plt+0x4914>
   159d0:	adds	r4, r4, r4
   159d4:	adc	r5, r5, r5
   159d8:	subs	r2, r2, #1
   159dc:	bne	159c4 <__assert_fail@plt+0x4934>
   159e0:	lsr	r3, r4, ip
   159e4:	orr	r3, r3, r5, lsl fp
   159e8:	lsr	r2, r5, ip
   159ec:	orr	r3, r3, r5, lsr sl
   159f0:	adds	r0, r0, r4
   159f4:	mov	r4, r3
   159f8:	lsl	r3, r2, ip
   159fc:	orr	r3, r3, r4, lsl sl
   15a00:	lsl	ip, r4, ip
   15a04:	orr	r3, r3, r4, lsr fp
   15a08:	adc	r1, r1, r5
   15a0c:	subs	r0, r0, ip
   15a10:	mov	r5, r2
   15a14:	sbc	r1, r1, r3
   15a18:	cmp	lr, #0
   15a1c:	strdne	r4, [lr]
   15a20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a24:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15a28:	mov	r7, r0
   15a2c:	ldr	r6, [pc, #72]	; 15a7c <__assert_fail@plt+0x49ec>
   15a30:	ldr	r5, [pc, #72]	; 15a80 <__assert_fail@plt+0x49f0>
   15a34:	add	r6, pc, r6
   15a38:	add	r5, pc, r5
   15a3c:	sub	r6, r6, r5
   15a40:	mov	r8, r1
   15a44:	mov	r9, r2
   15a48:	bl	10e0c <calloc@plt-0x20>
   15a4c:	asrs	r6, r6, #2
   15a50:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15a54:	mov	r4, #0
   15a58:	add	r4, r4, #1
   15a5c:	ldr	r3, [r5], #4
   15a60:	mov	r2, r9
   15a64:	mov	r1, r8
   15a68:	mov	r0, r7
   15a6c:	blx	r3
   15a70:	cmp	r6, r4
   15a74:	bne	15a58 <__assert_fail@plt+0x49c8>
   15a78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15a7c:	ldrdeq	r1, [r1], -r0
   15a80:	andeq	r1, r1, r8, asr #9
   15a84:	bx	lr
   15a88:	ldr	r3, [pc, #12]	; 15a9c <__assert_fail@plt+0x4a0c>
   15a8c:	mov	r1, #0
   15a90:	add	r3, pc, r3
   15a94:	ldr	r2, [r3]
   15a98:	b	10fc4 <__cxa_atexit@plt>
   15a9c:	andeq	r1, r1, ip, asr #12

Disassembly of section .fini:

00015aa0 <.fini>:
   15aa0:	push	{r3, lr}
   15aa4:	pop	{r3, pc}
