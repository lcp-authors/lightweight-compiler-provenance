
../repos/dvidelabs-flatcc-3b39ef7/samples/monster/monster:     file format elf32-littlearm


Disassembly of section .init:

00011f34 <.init>:
   11f34:	push	{r3, lr}
   11f38:	bl	122d0 <_start@@Base+0x3c>
   11f3c:	pop	{r3, pc}

Disassembly of section .plt:

00011f40 <strcmp@plt-0x14>:
   11f40:	push	{lr}		; (str lr, [sp, #-4]!)
   11f44:	ldr	lr, [pc, #4]	; 11f50 <strcmp@plt-0x4>
   11f48:	add	lr, pc, lr
   11f4c:	ldr	pc, [lr, #8]!
   11f50:	strheq	r9, [r1], -r0

00011f54 <strcmp@plt>:
   11f54:	add	ip, pc, #0, 12
   11f58:	add	ip, ip, #102400	; 0x19000
   11f5c:	ldr	pc, [ip, #176]!	; 0xb0

00011f60 <free@plt>:
   11f60:	add	ip, pc, #0, 12
   11f64:	add	ip, ip, #102400	; 0x19000
   11f68:	ldr	pc, [ip, #168]!	; 0xa8

00011f6c <memcpy@plt>:
   11f6c:	add	ip, pc, #0, 12
   11f70:	add	ip, ip, #102400	; 0x19000
   11f74:	ldr	pc, [ip, #160]!	; 0xa0

00011f78 <memcmp@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #102400	; 0x19000
   11f80:	ldr	pc, [ip, #152]!	; 0x98

00011f84 <realloc@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #102400	; 0x19000
   11f8c:	ldr	pc, [ip, #144]!	; 0x90

00011f90 <puts@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #102400	; 0x19000
   11f98:	ldr	pc, [ip, #136]!	; 0x88

00011f9c <malloc@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #102400	; 0x19000
   11fa4:	ldr	pc, [ip, #128]!	; 0x80

00011fa8 <__libc_start_main@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #102400	; 0x19000
   11fb0:	ldr	pc, [ip, #120]!	; 0x78

00011fb4 <__gmon_start__@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #102400	; 0x19000
   11fbc:	ldr	pc, [ip, #112]!	; 0x70

00011fc0 <strlen@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #102400	; 0x19000
   11fc8:	ldr	pc, [ip, #104]!	; 0x68

00011fcc <posix_memalign@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #102400	; 0x19000
   11fd4:	ldr	pc, [ip, #96]!	; 0x60

00011fd8 <memset@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #102400	; 0x19000
   11fe0:	ldr	pc, [ip, #88]!	; 0x58

00011fe4 <memchr@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #102400	; 0x19000
   11fec:	ldr	pc, [ip, #80]!	; 0x50

00011ff0 <abort@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #102400	; 0x19000
   11ff8:	ldr	pc, [ip, #72]!	; 0x48

00011ffc <__assert_fail@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #102400	; 0x19000
   12004:	ldr	pc, [ip, #64]!	; 0x40

Disassembly of section .text:

00012008 <main@@Base-0x17c>:
   12008:	push	{r4, lr}
   1200c:	mov	r2, #148	; 0x94
   12010:	ldr	r3, [pc, #8]	; 12020 <__assert_fail@plt+0x24>
   12014:	ldr	r1, [pc, #8]	; 12024 <__assert_fail@plt+0x28>
   12018:	ldr	r0, [pc, #8]	; 12028 <__assert_fail@plt+0x2c>
   1201c:	bl	11ffc <__assert_fail@plt>
   12020:	andeq	r9, r1, r4, ror #1
   12024:	andeq	r9, r1, r8, lsl #3
   12028:	andeq	r9, r1, r4, ror #3
   1202c:	push	{r4, lr}
   12030:	mov	r2, #149	; 0x95
   12034:	ldr	r3, [pc, #8]	; 12044 <__assert_fail@plt+0x48>
   12038:	ldr	r1, [pc, #8]	; 12048 <__assert_fail@plt+0x4c>
   1203c:	ldr	r0, [pc, #8]	; 1204c <__assert_fail@plt+0x50>
   12040:	bl	11ffc <__assert_fail@plt>
   12044:	andeq	r9, r1, r0, lsl #2
   12048:	andeq	r9, r1, r8, lsl #3
   1204c:	andeq	r9, r1, r4, ror #3
   12050:	push	{r4, lr}
   12054:	mov	r2, #50	; 0x32
   12058:	ldr	r3, [pc, #8]	; 12068 <__assert_fail@plt+0x6c>
   1205c:	ldr	r1, [pc, #8]	; 1206c <__assert_fail@plt+0x70>
   12060:	ldr	r0, [pc, #8]	; 12070 <__assert_fail@plt+0x74>
   12064:	bl	11ffc <__assert_fail@plt>
   12068:	andeq	r9, r1, ip, lsl r1
   1206c:	andeq	r9, r1, ip, lsl #4
   12070:	andeq	r9, r1, r8, ror #4
   12074:	push	{r4, lr}
   12078:	mov	r2, #308	; 0x134
   1207c:	ldr	r3, [pc, #8]	; 1208c <__assert_fail@plt+0x90>
   12080:	ldr	r1, [pc, #8]	; 12090 <__assert_fail@plt+0x94>
   12084:	ldr	r0, [pc, #8]	; 12094 <__assert_fail@plt+0x98>
   12088:	bl	11ffc <__assert_fail@plt>
   1208c:	andeq	r9, r1, r8, lsr r4
   12090:	andeq	r9, r1, r8, lsl #23
   12094:	andeq	r9, r1, r8, asr #24
   12098:	push	{r4, lr}
   1209c:	ldr	r3, [pc, #12]	; 120b0 <__assert_fail@plt+0xb4>
   120a0:	ldr	r2, [pc, #12]	; 120b4 <__assert_fail@plt+0xb8>
   120a4:	ldr	r1, [pc, #12]	; 120b8 <__assert_fail@plt+0xbc>
   120a8:	ldr	r0, [pc, #12]	; 120bc <__assert_fail@plt+0xc0>
   120ac:	bl	11ffc <__assert_fail@plt>
   120b0:	andeq	r9, r1, r8, asr #8
   120b4:	andeq	r0, r0, r1, lsr #5
   120b8:	andeq	r9, r1, r8, lsl #23
   120bc:	andeq	r9, r1, r8, asr #24
   120c0:	push	{r4, lr}
   120c4:	ldr	r3, [pc, #12]	; 120d8 <__assert_fail@plt+0xdc>
   120c8:	ldr	r2, [pc, #12]	; 120dc <__assert_fail@plt+0xe0>
   120cc:	ldr	r1, [pc, #12]	; 120e0 <__assert_fail@plt+0xe4>
   120d0:	ldr	r0, [pc, #12]	; 120e4 <__assert_fail@plt+0xe8>
   120d4:	bl	11ffc <__assert_fail@plt>
   120d8:	andeq	r9, r1, r4, asr r4
   120dc:	andeq	r0, r0, r7, lsl #5
   120e0:	andeq	r9, r1, r8, lsl #23
   120e4:	andeq	r9, r1, r8, asr #24
   120e8:	push	{r4, lr}
   120ec:	mov	r2, #892	; 0x37c
   120f0:	ldr	r3, [pc, #8]	; 12100 <__assert_fail@plt+0x104>
   120f4:	ldr	r1, [pc, #8]	; 12104 <__assert_fail@plt+0x108>
   120f8:	ldr	r0, [pc, #8]	; 12108 <__assert_fail@plt+0x10c>
   120fc:	bl	11ffc <__assert_fail@plt>
   12100:	andeq	r9, r1, r0, ror #8
   12104:	andeq	r9, r1, r8, lsl #23
   12108:	ldrdeq	r9, [r1], -r0
   1210c:	push	{r4, lr}
   12110:	ldr	r3, [pc, #12]	; 12124 <__assert_fail@plt+0x128>
   12114:	ldr	r2, [pc, #12]	; 12128 <__assert_fail@plt+0x12c>
   12118:	ldr	r1, [pc, #12]	; 1212c <__assert_fail@plt+0x130>
   1211c:	ldr	r0, [pc, #12]	; 12130 <__assert_fail@plt+0x134>
   12120:	bl	11ffc <__assert_fail@plt>
   12124:	andeq	r9, r1, r4, ror r4
   12128:	andeq	r0, r0, lr, lsl r2
   1212c:	andeq	r9, r1, r8, lsl #23
   12130:	andeq	r9, r1, ip, ror #23
   12134:	push	{r4, lr}
   12138:	ldr	r3, [pc, #12]	; 1214c <__assert_fail@plt+0x150>
   1213c:	ldr	r2, [pc, #12]	; 12150 <__assert_fail@plt+0x154>
   12140:	ldr	r1, [pc, #12]	; 12154 <__assert_fail@plt+0x158>
   12144:	ldr	r0, [pc, #12]	; 12158 <__assert_fail@plt+0x15c>
   12148:	bl	11ffc <__assert_fail@plt>
   1214c:	muleq	r1, r4, r4
   12150:	andeq	r0, r0, r6, asr #7
   12154:	andeq	r9, r1, r8, lsl #23
   12158:	andeq	r9, r1, r8, lsl #24
   1215c:	push	{r4, lr}
   12160:	ldr	r3, [pc, #12]	; 12174 <__assert_fail@plt+0x178>
   12164:	ldr	r2, [pc, #12]	; 12178 <__assert_fail@plt+0x17c>
   12168:	ldr	r1, [pc, #12]	; 1217c <__assert_fail@plt+0x180>
   1216c:	ldr	r0, [pc, #12]	; 12180 <__assert_fail@plt+0x184>
   12170:	bl	11ffc <__assert_fail@plt>
   12174:			; <UNDEFINED> instruction: 0x000194b4
   12178:	andeq	r0, r0, r6, lsl #15
   1217c:	andeq	r9, r1, r8, lsl #23
   12180:	andeq	r9, r1, r4, lsr ip

00012184 <main@@Base>:
   12184:	push	{r4, r5, lr}
   12188:	sub	sp, sp, #244	; 0xf4
   1218c:	add	r0, sp, #8
   12190:	bl	136e4 <flatcc_builder_init@@Base>
   12194:	add	r0, sp, #8
   12198:	mov	r1, #0
   1219c:	bl	123bc <create_monster_bottom_up@@Base>
   121a0:	cmp	r0, #0
   121a4:	bne	12240 <main@@Base+0xbc>
   121a8:	add	r1, sp, #4
   121ac:	add	r0, sp, #8
   121b0:	bl	18998 <flatcc_builder_finalize_aligned_buffer@@Base>
   121b4:	bl	18aa8 <flatcc_builder_aligned_free@@Base>
   121b8:	add	r0, sp, #8
   121bc:	bl	13870 <flatcc_builder_reset@@Base>
   121c0:	mov	r1, #1
   121c4:	add	r0, sp, #8
   121c8:	bl	123bc <create_monster_bottom_up@@Base>
   121cc:	cmp	r0, #0
   121d0:	bne	12268 <main@@Base+0xe4>
   121d4:	add	r1, sp, #4
   121d8:	add	r0, sp, #8
   121dc:	bl	18998 <flatcc_builder_finalize_aligned_buffer@@Base>
   121e0:	mov	r4, r0
   121e4:	bl	12d28 <access_monster_buffer@@Base>
   121e8:	mov	r0, r4
   121ec:	bl	18aa8 <flatcc_builder_aligned_free@@Base>
   121f0:	add	r0, sp, #8
   121f4:	bl	13870 <flatcc_builder_reset@@Base>
   121f8:	add	r0, sp, #8
   121fc:	bl	129e0 <create_monster_top_down@@Base>
   12200:	add	r1, sp, #4
   12204:	add	r0, sp, #8
   12208:	bl	18900 <flatcc_builder_finalize_buffer@@Base>
   1220c:	mov	r5, r0
   12210:	bl	12d28 <access_monster_buffer@@Base>
   12214:	subs	r4, r0, #0
   12218:	bne	12254 <main@@Base+0xd0>
   1221c:	mov	r0, r5
   12220:	bl	11f60 <free@plt>
   12224:	add	r0, sp, #8
   12228:	bl	13950 <flatcc_builder_clear@@Base>
   1222c:	ldr	r0, [pc, #72]	; 1227c <main@@Base+0xf8>
   12230:	bl	11f90 <puts@plt>
   12234:	mov	r0, r4
   12238:	add	sp, sp, #244	; 0xf4
   1223c:	pop	{r4, r5, pc}
   12240:	ldr	r3, [pc, #56]	; 12280 <main@@Base+0xfc>
   12244:	mov	r2, #308	; 0x134
   12248:	ldr	r1, [pc, #52]	; 12284 <main@@Base+0x100>
   1224c:	ldr	r0, [pc, #52]	; 12288 <main@@Base+0x104>
   12250:	bl	11ffc <__assert_fail@plt>
   12254:	ldr	r3, [pc, #36]	; 12280 <main@@Base+0xfc>
   12258:	ldr	r2, [pc, #44]	; 1228c <main@@Base+0x108>
   1225c:	ldr	r1, [pc, #32]	; 12284 <main@@Base+0x100>
   12260:	ldr	r0, [pc, #32]	; 12288 <main@@Base+0x104>
   12264:	bl	11ffc <__assert_fail@plt>
   12268:	ldr	r3, [pc, #16]	; 12280 <main@@Base+0xfc>
   1226c:	ldr	r2, [pc, #28]	; 12290 <main@@Base+0x10c>
   12270:	ldr	r1, [pc, #12]	; 12284 <main@@Base+0x100>
   12274:	ldr	r0, [pc, #12]	; 12288 <main@@Base+0x104>
   12278:	bl	11ffc <__assert_fail@plt>
   1227c:	andeq	r9, r1, r0, lsl #8
   12280:	andeq	r9, r1, r0, lsl #3
   12284:			; <UNDEFINED> instruction: 0x000193b4
   12288:	andeq	r9, r1, r8, asr #24
   1228c:	andeq	r0, r0, r6, asr r1
   12290:	andeq	r0, r0, pc, asr #2

00012294 <_start@@Base>:
   12294:	mov	fp, #0
   12298:	mov	lr, #0
   1229c:	pop	{r1}		; (ldr r1, [sp], #4)
   122a0:	mov	r2, sp
   122a4:	push	{r2}		; (str r2, [sp, #-4]!)
   122a8:	push	{r0}		; (str r0, [sp, #-4]!)
   122ac:	ldr	ip, [pc, #16]	; 122c4 <_start@@Base+0x30>
   122b0:	push	{ip}		; (str ip, [sp, #-4]!)
   122b4:	ldr	r0, [pc, #12]	; 122c8 <_start@@Base+0x34>
   122b8:	ldr	r3, [pc, #12]	; 122cc <_start@@Base+0x38>
   122bc:	bl	11fa8 <__libc_start_main@plt>
   122c0:	bl	11ff0 <abort@plt>
   122c4:	ldrdeq	r9, [r1], -r4
   122c8:	andeq	r2, r1, r4, lsl #3
   122cc:	andeq	r9, r1, r4, ror r0
   122d0:	ldr	r3, [pc, #20]	; 122ec <_start@@Base+0x58>
   122d4:	ldr	r2, [pc, #20]	; 122f0 <_start@@Base+0x5c>
   122d8:	add	r3, pc, r3
   122dc:	ldr	r2, [r3, r2]
   122e0:	cmp	r2, #0
   122e4:	bxeq	lr
   122e8:	b	11fb4 <__gmon_start__@plt>
   122ec:	andeq	r8, r1, r0, lsr #26
   122f0:	andeq	r0, r0, r8, asr #32
   122f4:	ldr	r3, [pc, #28]	; 12318 <_start@@Base+0x84>
   122f8:	ldr	r0, [pc, #28]	; 1231c <_start@@Base+0x88>
   122fc:	sub	r3, r3, r0
   12300:	cmp	r3, #6
   12304:	bxls	lr
   12308:	ldr	r3, [pc, #16]	; 12320 <_start@@Base+0x8c>
   1230c:	cmp	r3, #0
   12310:	bxeq	lr
   12314:	bx	r3
   12318:	andeq	fp, r2, r7, asr r0
   1231c:	andeq	fp, r2, r4, asr r0
   12320:	andeq	r0, r0, r0
   12324:	ldr	r1, [pc, #36]	; 12350 <_start@@Base+0xbc>
   12328:	ldr	r0, [pc, #36]	; 12354 <_start@@Base+0xc0>
   1232c:	sub	r1, r1, r0
   12330:	asr	r1, r1, #2
   12334:	add	r1, r1, r1, lsr #31
   12338:	asrs	r1, r1, #1
   1233c:	bxeq	lr
   12340:	ldr	r3, [pc, #16]	; 12358 <_start@@Base+0xc4>
   12344:	cmp	r3, #0
   12348:	bxeq	lr
   1234c:	bx	r3
   12350:	andeq	fp, r2, r4, asr r0
   12354:	andeq	fp, r2, r4, asr r0
   12358:	andeq	r0, r0, r0
   1235c:	push	{r4, lr}
   12360:	ldr	r4, [pc, #24]	; 12380 <_start@@Base+0xec>
   12364:	ldrb	r3, [r4]
   12368:	cmp	r3, #0
   1236c:	popne	{r4, pc}
   12370:	bl	122f4 <_start@@Base+0x60>
   12374:	mov	r3, #1
   12378:	strb	r3, [r4]
   1237c:	pop	{r4, pc}
   12380:	andeq	fp, r2, r4, asr r0
   12384:	ldr	r0, [pc, #40]	; 123b4 <_start@@Base+0x120>
   12388:	ldr	r3, [r0]
   1238c:	cmp	r3, #0
   12390:	bne	12398 <_start@@Base+0x104>
   12394:	b	12324 <_start@@Base+0x90>
   12398:	ldr	r3, [pc, #24]	; 123b8 <_start@@Base+0x124>
   1239c:	cmp	r3, #0
   123a0:	beq	12394 <_start@@Base+0x100>
   123a4:	push	{r4, lr}
   123a8:	blx	r3
   123ac:	pop	{r4, lr}
   123b0:	b	12324 <_start@@Base+0x90>
   123b4:	andeq	sl, r2, r4, lsl pc
   123b8:	andeq	r0, r0, r0

000123bc <create_monster_bottom_up@@Base>:
   123bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   123c0:	mov	r7, r1
   123c4:	sub	sp, sp, #24
   123c8:	ldr	r1, [pc, #1512]	; 129b8 <create_monster_bottom_up@@Base+0x5fc>
   123cc:	mov	r4, r0
   123d0:	bl	17b64 <flatcc_builder_create_string_str@@Base>
   123d4:	ldr	r1, [pc, #1504]	; 129bc <create_monster_bottom_up@@Base+0x600>
   123d8:	mov	r6, r0
   123dc:	mov	r0, r4
   123e0:	bl	17b64 <flatcc_builder_create_string_str@@Base>
   123e4:	mov	r1, #2
   123e8:	mov	r5, r0
   123ec:	mov	r0, r4
   123f0:	bl	15db4 <flatcc_builder_start_table@@Base>
   123f4:	subs	sl, r0, #0
   123f8:	bne	12404 <create_monster_bottom_up@@Base+0x48>
   123fc:	cmp	r6, #0
   12400:	bne	1267c <create_monster_bottom_up@@Base+0x2c0>
   12404:	mov	r1, #2
   12408:	mov	r0, r4
   1240c:	bl	15db4 <flatcc_builder_start_table@@Base>
   12410:	subs	r8, r0, #0
   12414:	bne	12790 <create_monster_bottom_up@@Base+0x3d4>
   12418:	cmp	r5, #0
   1241c:	bne	125b0 <create_monster_bottom_up@@Base+0x1f4>
   12420:	ldr	r1, [pc, #1432]	; 129c0 <create_monster_bottom_up@@Base+0x604>
   12424:	mov	r0, r4
   12428:	bl	17b64 <flatcc_builder_create_string_str@@Base>
   1242c:	ldr	r3, [pc, #1424]	; 129c4 <create_monster_bottom_up@@Base+0x608>
   12430:	add	ip, sp, #12
   12434:	mov	r9, r0
   12438:	ldm	r3, {r0, r1, r2}
   1243c:	mvn	r3, #0
   12440:	str	r3, [sp, #4]
   12444:	mov	r3, #1
   12448:	stmia	ip!, {r0, r1}
   1244c:	str	r3, [sp]
   12450:	add	r1, sp, #12
   12454:	strh	r2, [ip]
   12458:	mov	r0, r4
   1245c:	mov	r2, #10
   12460:	bl	169b4 <flatcc_builder_create_vector@@Base>
   12464:	mov	r6, r0
   12468:	mov	r0, r4
   1246c:	bl	1576c <flatcc_builder_start_offset_vector@@Base>
   12470:	mov	r0, r4
   12474:	bl	16d14 <flatcc_builder_end_offset_vector@@Base>
   12478:	cmp	r7, #0
   1247c:	mov	r8, r0
   12480:	beq	12758 <create_monster_bottom_up@@Base+0x39c>
   12484:	mov	r3, #0
   12488:	mov	r2, r3
   1248c:	mov	r1, r3
   12490:	mov	r0, r4
   12494:	bl	141d4 <flatcc_builder_start_buffer@@Base>
   12498:	cmp	r0, #0
   1249c:	bne	124ac <create_monster_bottom_up@@Base+0xf0>
   124a0:	mov	r1, #10
   124a4:	mov	r0, r4
   124a8:	bl	15db4 <flatcc_builder_start_table@@Base>
   124ac:	mov	r3, #4
   124b0:	mov	r2, #12
   124b4:	mov	r1, #0
   124b8:	mov	r0, r4
   124bc:	bl	17f20 <flatcc_builder_table_add@@Base>
   124c0:	cmp	r0, #0
   124c4:	beq	124e0 <create_monster_bottom_up@@Base+0x124>
   124c8:	ldr	r3, [pc, #1272]	; 129c8 <create_monster_bottom_up@@Base+0x60c>
   124cc:	mov	r1, #1065353216	; 0x3f800000
   124d0:	mov	r2, #1073741824	; 0x40000000
   124d4:	str	r1, [r0]
   124d8:	str	r2, [r0, #4]
   124dc:	str	r3, [r0, #8]
   124e0:	mov	r3, #2
   124e4:	mov	r2, r3
   124e8:	mov	r1, r3
   124ec:	mov	r0, r4
   124f0:	bl	17f20 <flatcc_builder_table_add@@Base>
   124f4:	cmp	r0, #0
   124f8:	movne	r3, #300	; 0x12c
   124fc:	strhne	r3, [r0]
   12500:	cmp	r9, #0
   12504:	bne	127e4 <create_monster_bottom_up@@Base+0x428>
   12508:	cmp	r6, #0
   1250c:	bne	12800 <create_monster_bottom_up@@Base+0x444>
   12510:	mov	r3, #1
   12514:	mov	r2, r3
   12518:	mov	r1, #6
   1251c:	mov	r0, r4
   12520:	bl	17f20 <flatcc_builder_table_add@@Base>
   12524:	cmp	r0, #0
   12528:	movne	r3, #0
   1252c:	strbne	r3, [r0]
   12530:	cmp	r8, #0
   12534:	bne	12818 <create_monster_bottom_up@@Base+0x45c>
   12538:	cmp	r5, #0
   1253c:	beq	12578 <create_monster_bottom_up@@Base+0x1bc>
   12540:	mov	r3, #1
   12544:	mov	r2, r3
   12548:	mov	r1, #8
   1254c:	mov	r0, r4
   12550:	bl	17f20 <flatcc_builder_table_add@@Base>
   12554:	subs	r6, r0, #0
   12558:	beq	12578 <create_monster_bottom_up@@Base+0x1bc>
   1255c:	mov	r1, #9
   12560:	mov	r0, r4
   12564:	bl	182bc <flatcc_builder_table_add_offset@@Base>
   12568:	cmp	r0, #0
   1256c:	movne	r3, #1
   12570:	strbne	r3, [r6]
   12574:	strne	r5, [r0]
   12578:	mov	r2, #0
   1257c:	ldr	r1, [pc, #1096]	; 129cc <create_monster_bottom_up@@Base+0x610>
   12580:	mov	r0, r4
   12584:	bl	1675c <flatcc_builder_check_required@@Base>
   12588:	cmp	r0, #0
   1258c:	beq	12960 <create_monster_bottom_up@@Base+0x5a4>
   12590:	mov	r0, r4
   12594:	bl	167f4 <flatcc_builder_end_table@@Base>
   12598:	mov	r1, r0
   1259c:	mov	r0, r4
   125a0:	bl	14360 <flatcc_builder_end_buffer@@Base>
   125a4:	mov	r0, #0
   125a8:	add	sp, sp, #24
   125ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   125b0:	mov	r1, r8
   125b4:	mov	r0, r4
   125b8:	bl	182bc <flatcc_builder_table_add_offset@@Base>
   125bc:	subs	r6, r0, #0
   125c0:	beq	12998 <create_monster_bottom_up@@Base+0x5dc>
   125c4:	mov	r3, #2
   125c8:	str	r5, [r6]
   125cc:	mov	r2, r3
   125d0:	mov	r1, #1
   125d4:	mov	r0, r4
   125d8:	bl	17f20 <flatcc_builder_table_add@@Base>
   125dc:	cmp	r0, #0
   125e0:	beq	126f0 <create_monster_bottom_up@@Base+0x334>
   125e4:	mov	r3, #5
   125e8:	strh	r3, [r0]
   125ec:	mov	r2, #0
   125f0:	ldr	r1, [pc, #984]	; 129d0 <create_monster_bottom_up@@Base+0x614>
   125f4:	mov	r0, r4
   125f8:	bl	1675c <flatcc_builder_check_required@@Base>
   125fc:	cmp	r0, #0
   12600:	beq	12964 <create_monster_bottom_up@@Base+0x5a8>
   12604:	mov	r0, r4
   12608:	bl	167f4 <flatcc_builder_end_table@@Base>
   1260c:	ldr	r1, [pc, #940]	; 129c0 <create_monster_bottom_up@@Base+0x604>
   12610:	mov	r5, r0
   12614:	mov	r0, r4
   12618:	bl	17b64 <flatcc_builder_create_string_str@@Base>
   1261c:	ldr	r3, [pc, #928]	; 129c4 <create_monster_bottom_up@@Base+0x608>
   12620:	mvn	lr, #0
   12624:	add	ip, sp, #12
   12628:	mov	r9, r0
   1262c:	ldm	r3, {r0, r1, r2}
   12630:	mov	r3, #1
   12634:	stm	sp, {r3, lr}
   12638:	stmia	ip!, {r0, r1}
   1263c:	add	r1, sp, #12
   12640:	strh	r2, [ip]
   12644:	mov	r0, r4
   12648:	mov	r2, #10
   1264c:	bl	169b4 <flatcc_builder_create_vector@@Base>
   12650:	mov	r6, r0
   12654:	mov	r0, r4
   12658:	bl	1576c <flatcc_builder_start_offset_vector@@Base>
   1265c:	cmp	r8, #0
   12660:	bne	12748 <create_monster_bottom_up@@Base+0x38c>
   12664:	cmp	r5, #0
   12668:	beq	12470 <create_monster_bottom_up@@Base+0xb4>
   1266c:	mov	r1, r5
   12670:	mov	r0, r4
   12674:	bl	14e9c <flatcc_builder_offset_vector_push@@Base>
   12678:	b	12470 <create_monster_bottom_up@@Base+0xb4>
   1267c:	mov	r1, sl
   12680:	mov	r0, r4
   12684:	bl	182bc <flatcc_builder_table_add_offset@@Base>
   12688:	cmp	r0, #0
   1268c:	beq	12404 <create_monster_bottom_up@@Base+0x48>
   12690:	mov	r3, #2
   12694:	str	r6, [r0]
   12698:	mov	r2, r3
   1269c:	mov	r1, #1
   126a0:	mov	r0, r4
   126a4:	bl	17f20 <flatcc_builder_table_add@@Base>
   126a8:	cmp	r0, #0
   126ac:	beq	12404 <create_monster_bottom_up@@Base+0x48>
   126b0:	mov	r3, #3
   126b4:	strh	r3, [r0]
   126b8:	mov	r2, sl
   126bc:	ldr	r1, [pc, #780]	; 129d0 <create_monster_bottom_up@@Base+0x614>
   126c0:	mov	r0, r4
   126c4:	bl	1675c <flatcc_builder_check_required@@Base>
   126c8:	cmp	r0, #0
   126cc:	beq	12964 <create_monster_bottom_up@@Base+0x5a8>
   126d0:	mov	r0, r4
   126d4:	bl	167f4 <flatcc_builder_end_table@@Base>
   126d8:	mov	r1, #2
   126dc:	mov	r8, r0
   126e0:	mov	r0, r4
   126e4:	bl	15db4 <flatcc_builder_start_table@@Base>
   126e8:	cmp	r0, #0
   126ec:	beq	12978 <create_monster_bottom_up@@Base+0x5bc>
   126f0:	ldr	r1, [pc, #712]	; 129c0 <create_monster_bottom_up@@Base+0x604>
   126f4:	mov	r0, r4
   126f8:	bl	17b64 <flatcc_builder_create_string_str@@Base>
   126fc:	ldr	r3, [pc, #704]	; 129c4 <create_monster_bottom_up@@Base+0x608>
   12700:	mvn	lr, #0
   12704:	add	ip, sp, #12
   12708:	mov	r9, r0
   1270c:	ldm	r3, {r0, r1, r2}
   12710:	mov	r3, #1
   12714:	stm	sp, {r3, lr}
   12718:	stmia	ip!, {r0, r1}
   1271c:	add	r1, sp, #12
   12720:	strh	r2, [ip]
   12724:	mov	r0, r4
   12728:	mov	r2, #10
   1272c:	bl	169b4 <flatcc_builder_create_vector@@Base>
   12730:	mov	r6, r0
   12734:	mov	r0, r4
   12738:	bl	1576c <flatcc_builder_start_offset_vector@@Base>
   1273c:	cmp	r8, #0
   12740:	movne	r5, #0
   12744:	beq	127dc <create_monster_bottom_up@@Base+0x420>
   12748:	mov	r1, r8
   1274c:	mov	r0, r4
   12750:	bl	14e9c <flatcc_builder_offset_vector_push@@Base>
   12754:	b	12664 <create_monster_bottom_up@@Base+0x2a8>
   12758:	mov	r3, r7
   1275c:	mov	r2, r7
   12760:	mov	r1, r7
   12764:	mov	r0, r4
   12768:	bl	141d4 <flatcc_builder_start_buffer@@Base>
   1276c:	cmp	r0, #0
   12770:	bne	125a4 <create_monster_bottom_up@@Base+0x1e8>
   12774:	mov	r1, #10
   12778:	mov	r0, r4
   1277c:	bl	15db4 <flatcc_builder_start_table@@Base>
   12780:	cmp	r0, #0
   12784:	beq	12830 <create_monster_bottom_up@@Base+0x474>
   12788:	mov	r1, #0
   1278c:	b	1259c <create_monster_bottom_up@@Base+0x1e0>
   12790:	ldr	r1, [pc, #552]	; 129c0 <create_monster_bottom_up@@Base+0x604>
   12794:	mov	r0, r4
   12798:	bl	17b64 <flatcc_builder_create_string_str@@Base>
   1279c:	ldr	r3, [pc, #544]	; 129c4 <create_monster_bottom_up@@Base+0x608>
   127a0:	mvn	lr, #0
   127a4:	add	ip, sp, #12
   127a8:	mov	r9, r0
   127ac:	ldm	r3, {r0, r1, r2}
   127b0:	mov	r3, #1
   127b4:	stm	sp, {r3, lr}
   127b8:	stmia	ip!, {r0, r1}
   127bc:	add	r1, sp, #12
   127c0:	strh	r2, [ip]
   127c4:	mov	r0, r4
   127c8:	mov	r2, #10
   127cc:	bl	169b4 <flatcc_builder_create_vector@@Base>
   127d0:	mov	r6, r0
   127d4:	mov	r0, r4
   127d8:	bl	1576c <flatcc_builder_start_offset_vector@@Base>
   127dc:	mov	r5, #0
   127e0:	b	12470 <create_monster_bottom_up@@Base+0xb4>
   127e4:	mov	r1, #3
   127e8:	mov	r0, r4
   127ec:	bl	182bc <flatcc_builder_table_add_offset@@Base>
   127f0:	cmp	r0, #0
   127f4:	strne	r9, [r0]
   127f8:	cmp	r6, #0
   127fc:	beq	12510 <create_monster_bottom_up@@Base+0x154>
   12800:	mov	r1, #5
   12804:	mov	r0, r4
   12808:	bl	182bc <flatcc_builder_table_add_offset@@Base>
   1280c:	cmp	r0, #0
   12810:	strne	r6, [r0]
   12814:	b	12510 <create_monster_bottom_up@@Base+0x154>
   12818:	mov	r1, #7
   1281c:	mov	r0, r4
   12820:	bl	182bc <flatcc_builder_table_add_offset@@Base>
   12824:	cmp	r0, #0
   12828:	strne	r8, [r0]
   1282c:	b	12538 <create_monster_bottom_up@@Base+0x17c>
   12830:	mov	r1, r7
   12834:	mov	r3, #4
   12838:	mov	r2, #12
   1283c:	mov	r0, r4
   12840:	bl	17f20 <flatcc_builder_table_add@@Base>
   12844:	cmp	r0, #0
   12848:	beq	12788 <create_monster_bottom_up@@Base+0x3cc>
   1284c:	ldr	r3, [pc, #372]	; 129c8 <create_monster_bottom_up@@Base+0x60c>
   12850:	mov	r1, #1065353216	; 0x3f800000
   12854:	mov	r2, #1073741824	; 0x40000000
   12858:	cmp	r9, #0
   1285c:	str	r1, [r0]
   12860:	str	r2, [r0, #4]
   12864:	str	r3, [r0, #8]
   12868:	beq	12788 <create_monster_bottom_up@@Base+0x3cc>
   1286c:	mov	r1, #3
   12870:	mov	r0, r4
   12874:	bl	182bc <flatcc_builder_table_add_offset@@Base>
   12878:	cmp	r0, #0
   1287c:	beq	12788 <create_monster_bottom_up@@Base+0x3cc>
   12880:	cmp	r6, #0
   12884:	str	r9, [r0]
   12888:	beq	12788 <create_monster_bottom_up@@Base+0x3cc>
   1288c:	mov	r1, #5
   12890:	mov	r0, r4
   12894:	bl	182bc <flatcc_builder_table_add_offset@@Base>
   12898:	cmp	r0, #0
   1289c:	beq	12788 <create_monster_bottom_up@@Base+0x3cc>
   128a0:	cmp	r8, #0
   128a4:	str	r6, [r0]
   128a8:	beq	12788 <create_monster_bottom_up@@Base+0x3cc>
   128ac:	mov	r1, #7
   128b0:	mov	r0, r4
   128b4:	bl	182bc <flatcc_builder_table_add_offset@@Base>
   128b8:	cmp	r0, #0
   128bc:	beq	12788 <create_monster_bottom_up@@Base+0x3cc>
   128c0:	str	r8, [r0]
   128c4:	mov	r1, #9
   128c8:	mov	r0, r4
   128cc:	bl	182bc <flatcc_builder_table_add_offset@@Base>
   128d0:	cmp	r0, #0
   128d4:	beq	12788 <create_monster_bottom_up@@Base+0x3cc>
   128d8:	mov	r3, #2
   128dc:	str	r5, [r0]
   128e0:	mov	r2, r3
   128e4:	mov	r1, r3
   128e8:	mov	r0, r4
   128ec:	bl	17f20 <flatcc_builder_table_add@@Base>
   128f0:	cmp	r0, #0
   128f4:	beq	12788 <create_monster_bottom_up@@Base+0x3cc>
   128f8:	mov	r2, #300	; 0x12c
   128fc:	mov	r3, #1
   12900:	strh	r2, [r0]
   12904:	mov	r1, #6
   12908:	mov	r2, r3
   1290c:	mov	r0, r4
   12910:	bl	17f20 <flatcc_builder_table_add@@Base>
   12914:	cmp	r0, #0
   12918:	beq	12788 <create_monster_bottom_up@@Base+0x3cc>
   1291c:	mov	r3, #1
   12920:	mov	r5, #0
   12924:	strb	r5, [r0]
   12928:	mov	r2, r3
   1292c:	mov	r1, #8
   12930:	mov	r0, r4
   12934:	bl	17f20 <flatcc_builder_table_add@@Base>
   12938:	cmp	r0, #0
   1293c:	beq	12788 <create_monster_bottom_up@@Base+0x3cc>
   12940:	mov	r3, #1
   12944:	strb	r3, [r0]
   12948:	mov	r2, r5
   1294c:	ldr	r1, [pc, #120]	; 129cc <create_monster_bottom_up@@Base+0x610>
   12950:	mov	r0, r4
   12954:	bl	1675c <flatcc_builder_check_required@@Base>
   12958:	cmp	r0, r5
   1295c:	bne	12590 <create_monster_bottom_up@@Base+0x1d4>
   12960:	bl	12050 <__assert_fail@plt+0x54>
   12964:	ldr	r3, [pc, #104]	; 129d4 <create_monster_bottom_up@@Base+0x618>
   12968:	mov	r2, #52	; 0x34
   1296c:	ldr	r1, [pc, #100]	; 129d8 <create_monster_bottom_up@@Base+0x61c>
   12970:	ldr	r0, [pc, #100]	; 129dc <create_monster_bottom_up@@Base+0x620>
   12974:	bl	11ffc <__assert_fail@plt>
   12978:	cmp	r5, #0
   1297c:	beq	126f0 <create_monster_bottom_up@@Base+0x334>
   12980:	mov	r1, r0
   12984:	mov	r0, r4
   12988:	bl	182bc <flatcc_builder_table_add_offset@@Base>
   1298c:	subs	r6, r0, #0
   12990:	bne	125c4 <create_monster_bottom_up@@Base+0x208>
   12994:	b	126f0 <create_monster_bottom_up@@Base+0x334>
   12998:	ldr	r1, [pc, #32]	; 129c0 <create_monster_bottom_up@@Base+0x604>
   1299c:	mov	r0, r4
   129a0:	bl	17b64 <flatcc_builder_create_string_str@@Base>
   129a4:	mov	r5, r6
   129a8:	ldr	r3, [pc, #20]	; 129c4 <create_monster_bottom_up@@Base+0x608>
   129ac:	add	ip, sp, #12
   129b0:	mov	r9, r0
   129b4:	b	12438 <create_monster_bottom_up@@Base+0x7c>
   129b8:	andeq	r9, r1, r8, lsl #6
   129bc:	andeq	r9, r1, r0, lsl r3
   129c0:			; <UNDEFINED> instruction: 0x000193b0
   129c4:	andeq	r9, r1, r8, asr r1
   129c8:	submi	r0, r0, r0
   129cc:	andeq	r9, r1, r4, ror #2
   129d0:	andeq	r9, r1, r8, lsr r1
   129d4:	andeq	r9, r1, ip, lsr r1
   129d8:	andeq	r9, r1, ip, lsl #4
   129dc:	andeq	r9, r1, r4, lsl r3

000129e0 <create_monster_top_down@@Base>:
   129e0:	ldr	r3, [pc, #792]	; 12d00 <create_monster_top_down@@Base+0x320>
   129e4:	push	{r4, r5, r6, lr}
   129e8:	mov	r4, r0
   129ec:	ldm	r3, {r0, r1, r2}
   129f0:	sub	sp, sp, #24
   129f4:	add	ip, sp, #12
   129f8:	mov	r3, #0
   129fc:	stmia	ip!, {r0, r1}
   12a00:	mov	r0, r4
   12a04:	strh	r2, [ip]
   12a08:	mov	r1, r3
   12a0c:	mov	r2, r3
   12a10:	bl	141d4 <flatcc_builder_start_buffer@@Base>
   12a14:	cmp	r0, #0
   12a18:	bne	12a28 <create_monster_top_down@@Base+0x48>
   12a1c:	mov	r1, #10
   12a20:	mov	r0, r4
   12a24:	bl	15db4 <flatcc_builder_start_table@@Base>
   12a28:	mov	r3, #4
   12a2c:	mov	r2, #12
   12a30:	mov	r1, #0
   12a34:	mov	r0, r4
   12a38:	bl	17f20 <flatcc_builder_table_add@@Base>
   12a3c:	cmp	r0, #0
   12a40:	beq	12a5c <create_monster_top_down@@Base+0x7c>
   12a44:	ldr	r3, [pc, #696]	; 12d04 <create_monster_top_down@@Base+0x324>
   12a48:	mov	r1, #1065353216	; 0x3f800000
   12a4c:	mov	r2, #1073741824	; 0x40000000
   12a50:	str	r1, [r0]
   12a54:	str	r2, [r0, #4]
   12a58:	str	r3, [r0, #8]
   12a5c:	mov	r3, #2
   12a60:	mov	r1, r3
   12a64:	mov	r2, r3
   12a68:	mov	r0, r4
   12a6c:	bl	17f20 <flatcc_builder_table_add@@Base>
   12a70:	ldr	r1, [pc, #656]	; 12d08 <create_monster_top_down@@Base+0x328>
   12a74:	cmp	r0, #0
   12a78:	movne	r3, #300	; 0x12c
   12a7c:	strhne	r3, [r0]
   12a80:	mov	r0, r4
   12a84:	bl	17b64 <flatcc_builder_create_string_str@@Base>
   12a88:	subs	r5, r0, #0
   12a8c:	beq	12aa4 <create_monster_top_down@@Base+0xc4>
   12a90:	mov	r1, #3
   12a94:	mov	r0, r4
   12a98:	bl	182bc <flatcc_builder_table_add_offset@@Base>
   12a9c:	cmp	r0, #0
   12aa0:	strne	r5, [r0]
   12aa4:	mvn	r2, #0
   12aa8:	mov	r3, #1
   12aac:	str	r2, [sp, #4]
   12ab0:	add	r1, sp, #12
   12ab4:	str	r3, [sp]
   12ab8:	mov	r2, #10
   12abc:	mov	r0, r4
   12ac0:	bl	169b4 <flatcc_builder_create_vector@@Base>
   12ac4:	subs	r5, r0, #0
   12ac8:	beq	12ae0 <create_monster_top_down@@Base+0x100>
   12acc:	mov	r1, #5
   12ad0:	mov	r0, r4
   12ad4:	bl	182bc <flatcc_builder_table_add_offset@@Base>
   12ad8:	cmp	r0, #0
   12adc:	strne	r5, [r0]
   12ae0:	mov	r3, #1
   12ae4:	mov	r2, r3
   12ae8:	mov	r1, #6
   12aec:	mov	r0, r4
   12af0:	bl	17f20 <flatcc_builder_table_add@@Base>
   12af4:	cmp	r0, #0
   12af8:	movne	r3, #0
   12afc:	strbne	r3, [r0]
   12b00:	mov	r0, r4
   12b04:	bl	1576c <flatcc_builder_start_offset_vector@@Base>
   12b08:	ldr	r1, [pc, #508]	; 12d0c <create_monster_top_down@@Base+0x32c>
   12b0c:	mov	r0, r4
   12b10:	bl	17b64 <flatcc_builder_create_string_str@@Base>
   12b14:	mov	r1, #2
   12b18:	mov	r5, r0
   12b1c:	mov	r0, r4
   12b20:	bl	15db4 <flatcc_builder_start_table@@Base>
   12b24:	subs	r6, r0, #0
   12b28:	bne	12b34 <create_monster_top_down@@Base+0x154>
   12b2c:	cmp	r5, #0
   12b30:	bne	12c78 <create_monster_top_down@@Base+0x298>
   12b34:	ldr	r1, [pc, #468]	; 12d10 <create_monster_top_down@@Base+0x330>
   12b38:	mov	r0, r4
   12b3c:	bl	17b64 <flatcc_builder_create_string_str@@Base>
   12b40:	mov	r1, #2
   12b44:	mov	r5, r0
   12b48:	mov	r0, r4
   12b4c:	bl	15db4 <flatcc_builder_start_table@@Base>
   12b50:	subs	r6, r0, #0
   12b54:	bne	12b60 <create_monster_top_down@@Base+0x180>
   12b58:	cmp	r5, #0
   12b5c:	bne	12b6c <create_monster_top_down@@Base+0x18c>
   12b60:	mov	r3, #0
   12b64:	ldr	r3, [r3]
   12b68:	udf	#0
   12b6c:	mov	r1, r6
   12b70:	mov	r0, r4
   12b74:	bl	182bc <flatcc_builder_table_add_offset@@Base>
   12b78:	cmp	r0, #0
   12b7c:	beq	12b60 <create_monster_top_down@@Base+0x180>
   12b80:	mov	r3, #2
   12b84:	str	r5, [r0]
   12b88:	mov	r2, r3
   12b8c:	mov	r1, #1
   12b90:	mov	r0, r4
   12b94:	bl	17f20 <flatcc_builder_table_add@@Base>
   12b98:	cmp	r0, #0
   12b9c:	beq	12b60 <create_monster_top_down@@Base+0x180>
   12ba0:	mov	r3, #5
   12ba4:	strh	r3, [r0]
   12ba8:	mov	r2, r6
   12bac:	ldr	r1, [pc, #352]	; 12d14 <create_monster_top_down@@Base+0x334>
   12bb0:	mov	r0, r4
   12bb4:	bl	1675c <flatcc_builder_check_required@@Base>
   12bb8:	cmp	r0, #0
   12bbc:	beq	12cec <create_monster_top_down@@Base+0x30c>
   12bc0:	mov	r0, r4
   12bc4:	bl	167f4 <flatcc_builder_end_table@@Base>
   12bc8:	subs	r1, r0, #0
   12bcc:	beq	12b60 <create_monster_top_down@@Base+0x180>
   12bd0:	mov	r0, r4
   12bd4:	bl	14e9c <flatcc_builder_offset_vector_push@@Base>
   12bd8:	ldr	r5, [r0]
   12bdc:	mov	r0, r4
   12be0:	bl	16d14 <flatcc_builder_end_offset_vector@@Base>
   12be4:	subs	r6, r0, #0
   12be8:	beq	12c00 <create_monster_top_down@@Base+0x220>
   12bec:	mov	r1, #7
   12bf0:	mov	r0, r4
   12bf4:	bl	182bc <flatcc_builder_table_add_offset@@Base>
   12bf8:	cmp	r0, #0
   12bfc:	strne	r6, [r0]
   12c00:	cmp	r5, #0
   12c04:	beq	12c40 <create_monster_top_down@@Base+0x260>
   12c08:	mov	r3, #1
   12c0c:	mov	r2, r3
   12c10:	mov	r1, #8
   12c14:	mov	r0, r4
   12c18:	bl	17f20 <flatcc_builder_table_add@@Base>
   12c1c:	subs	r6, r0, #0
   12c20:	beq	12c40 <create_monster_top_down@@Base+0x260>
   12c24:	mov	r1, #9
   12c28:	mov	r0, r4
   12c2c:	bl	182bc <flatcc_builder_table_add_offset@@Base>
   12c30:	cmp	r0, #0
   12c34:	movne	r3, #1
   12c38:	strbne	r3, [r6]
   12c3c:	strne	r5, [r0]
   12c40:	mov	r2, #0
   12c44:	ldr	r1, [pc, #204]	; 12d18 <create_monster_top_down@@Base+0x338>
   12c48:	mov	r0, r4
   12c4c:	bl	1675c <flatcc_builder_check_required@@Base>
   12c50:	cmp	r0, #0
   12c54:	beq	12ce8 <create_monster_top_down@@Base+0x308>
   12c58:	mov	r0, r4
   12c5c:	bl	167f4 <flatcc_builder_end_table@@Base>
   12c60:	mov	r1, r0
   12c64:	mov	r0, r4
   12c68:	bl	14360 <flatcc_builder_end_buffer@@Base>
   12c6c:	mov	r0, #0
   12c70:	add	sp, sp, #24
   12c74:	pop	{r4, r5, r6, pc}
   12c78:	mov	r1, r6
   12c7c:	mov	r0, r4
   12c80:	bl	182bc <flatcc_builder_table_add_offset@@Base>
   12c84:	cmp	r0, #0
   12c88:	beq	12b34 <create_monster_top_down@@Base+0x154>
   12c8c:	mov	r3, #2
   12c90:	str	r5, [r0]
   12c94:	mov	r2, r3
   12c98:	mov	r1, #1
   12c9c:	mov	r0, r4
   12ca0:	bl	17f20 <flatcc_builder_table_add@@Base>
   12ca4:	cmp	r0, #0
   12ca8:	beq	12b34 <create_monster_top_down@@Base+0x154>
   12cac:	mov	r3, #3
   12cb0:	strh	r3, [r0]
   12cb4:	mov	r2, r6
   12cb8:	ldr	r1, [pc, #84]	; 12d14 <create_monster_top_down@@Base+0x334>
   12cbc:	mov	r0, r4
   12cc0:	bl	1675c <flatcc_builder_check_required@@Base>
   12cc4:	cmp	r0, #0
   12cc8:	beq	12cec <create_monster_top_down@@Base+0x30c>
   12ccc:	mov	r0, r4
   12cd0:	bl	167f4 <flatcc_builder_end_table@@Base>
   12cd4:	subs	r1, r0, #0
   12cd8:	beq	12b34 <create_monster_top_down@@Base+0x154>
   12cdc:	mov	r0, r4
   12ce0:	bl	14e9c <flatcc_builder_offset_vector_push@@Base>
   12ce4:	b	12b34 <create_monster_top_down@@Base+0x154>
   12ce8:	bl	12050 <__assert_fail@plt+0x54>
   12cec:	ldr	r3, [pc, #40]	; 12d1c <create_monster_top_down@@Base+0x33c>
   12cf0:	mov	r2, #52	; 0x34
   12cf4:	ldr	r1, [pc, #36]	; 12d20 <create_monster_top_down@@Base+0x340>
   12cf8:	ldr	r0, [pc, #36]	; 12d24 <create_monster_top_down@@Base+0x344>
   12cfc:	bl	11ffc <__assert_fail@plt>
   12d00:	andeq	r9, r1, r8, asr r1
   12d04:	submi	r0, r0, r0
   12d08:			; <UNDEFINED> instruction: 0x000193b0
   12d0c:	andeq	r9, r1, r8, lsl #6
   12d10:	andeq	r9, r1, r0, lsl r3
   12d14:	andeq	r9, r1, r8, lsr r1
   12d18:	andeq	r9, r1, r4, ror #2
   12d1c:	andeq	r9, r1, ip, lsr r1
   12d20:	andeq	r9, r1, ip, lsl #4
   12d24:	andeq	r9, r1, r4, lsl r3

00012d28 <access_monster_buffer@@Base>:
   12d28:	cmp	r0, #0
   12d2c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12d30:	beq	13080 <access_monster_buffer@@Base+0x358>
   12d34:	ldr	r3, [r0]
   12d38:	adds	r4, r0, r3
   12d3c:	beq	13080 <access_monster_buffer@@Base+0x358>
   12d40:	ldr	r5, [r0, r3]
   12d44:	sub	r5, r4, r5
   12d48:	ldrh	r6, [r5]
   12d4c:	cmp	r6, #9
   12d50:	bls	12dfc <access_monster_buffer@@Base+0xd4>
   12d54:	ldrh	r7, [r5, #8]
   12d58:	cmp	r7, #0
   12d5c:	moveq	r2, #100	; 0x64
   12d60:	ldrshne	r2, [r4, r7]
   12d64:	ldrh	r8, [r5, #6]
   12d68:	cmp	r8, #0
   12d6c:	moveq	r1, #150	; 0x96
   12d70:	ldrshne	r1, [r4, r8]
   12d74:	cmp	r6, #11
   12d78:	movls	r0, #0
   12d7c:	movls	r9, r0
   12d80:	bls	12da8 <access_monster_buffer@@Base+0x80>
   12d84:	ldrh	r0, [r5, #10]
   12d88:	cmp	r0, #0
   12d8c:	beq	1317c <access_monster_buffer@@Base+0x454>
   12d90:	ldr	r3, [r4, r0]
   12d94:	add	r0, r4, r0
   12d98:	add	r3, r3, #4
   12d9c:	adds	r0, r0, r3
   12da0:	beq	1317c <access_monster_buffer@@Base+0x454>
   12da4:	ldr	r9, [r0, #-4]
   12da8:	cmp	r2, #300	; 0x12c
   12dac:	bne	12e04 <access_monster_buffer@@Base+0xdc>
   12db0:	cmp	r1, #150	; 0x96
   12db4:	bne	13094 <access_monster_buffer@@Base+0x36c>
   12db8:	ldr	r1, [pc, #1000]	; 131a8 <access_monster_buffer@@Base+0x480>
   12dbc:	bl	11f54 <strcmp@plt>
   12dc0:	cmp	r0, #0
   12dc4:	bne	130a8 <access_monster_buffer@@Base+0x380>
   12dc8:	cmp	r9, #3
   12dcc:	bne	130bc <access_monster_buffer@@Base+0x394>
   12dd0:	cmp	r7, #0
   12dd4:	beq	130d0 <access_monster_buffer@@Base+0x3a8>
   12dd8:	cmp	r8, #0
   12ddc:	bne	130e4 <access_monster_buffer@@Base+0x3bc>
   12de0:	cmp	r6, #5
   12de4:	bhi	12e18 <access_monster_buffer@@Base+0xf0>
   12de8:	ldr	r3, [pc, #956]	; 131ac <access_monster_buffer@@Base+0x484>
   12dec:	mov	r2, #232	; 0xe8
   12df0:	ldr	r1, [pc, #952]	; 131b0 <access_monster_buffer@@Base+0x488>
   12df4:	ldr	r0, [pc, #952]	; 131b4 <access_monster_buffer@@Base+0x48c>
   12df8:	bl	11ffc <__assert_fail@plt>
   12dfc:	cmp	r6, #7
   12e00:	bhi	13170 <access_monster_buffer@@Base+0x448>
   12e04:	ldr	r3, [pc, #928]	; 131ac <access_monster_buffer@@Base+0x484>
   12e08:	mov	r2, #219	; 0xdb
   12e0c:	ldr	r1, [pc, #924]	; 131b0 <access_monster_buffer@@Base+0x488>
   12e10:	ldr	r0, [pc, #924]	; 131b4 <access_monster_buffer@@Base+0x48c>
   12e14:	bl	11ffc <__assert_fail@plt>
   12e18:	ldrh	r3, [r5, #4]
   12e1c:	cmp	r3, #0
   12e20:	beq	12de8 <access_monster_buffer@@Base+0xc0>
   12e24:	adds	r3, r4, r3
   12e28:	beq	12de8 <access_monster_buffer@@Base+0xc0>
   12e2c:	vldr	s15, [pc, #872]	; 1319c <access_monster_buffer@@Base+0x474>
   12e30:	vldr	s13, [r3]
   12e34:	vldr	s14, [r3, #4]
   12e38:	vldr	s12, [r3, #8]
   12e3c:	vcmp.f32	s13, s15
   12e40:	vmrs	APSR_nzcv, fpscr
   12e44:	bne	130f8 <access_monster_buffer@@Base+0x3d0>
   12e48:	vldr	s15, [pc, #848]	; 131a0 <access_monster_buffer@@Base+0x478>
   12e4c:	vcmp.f32	s14, s15
   12e50:	vmrs	APSR_nzcv, fpscr
   12e54:	bne	1310c <access_monster_buffer@@Base+0x3e4>
   12e58:	vldr	s15, [pc, #836]	; 131a4 <access_monster_buffer@@Base+0x47c>
   12e5c:	vcmp.f32	s12, s15
   12e60:	vmrs	APSR_nzcv, fpscr
   12e64:	bne	13120 <access_monster_buffer@@Base+0x3f8>
   12e68:	cmp	r6, #15
   12e6c:	bhi	12e84 <access_monster_buffer@@Base+0x15c>
   12e70:	ldr	r3, [pc, #820]	; 131ac <access_monster_buffer@@Base+0x484>
   12e74:	ldr	r2, [pc, #828]	; 131b8 <access_monster_buffer@@Base+0x490>
   12e78:	ldr	r1, [pc, #816]	; 131b0 <access_monster_buffer@@Base+0x488>
   12e7c:	ldr	r0, [pc, #816]	; 131b4 <access_monster_buffer@@Base+0x48c>
   12e80:	bl	11ffc <__assert_fail@plt>
   12e84:	ldrh	r3, [r5, #14]
   12e88:	cmp	r3, #0
   12e8c:	beq	12e70 <access_monster_buffer@@Base+0x148>
   12e90:	ldr	r2, [r4, r3]
   12e94:	add	r3, r4, r3
   12e98:	add	r2, r2, #4
   12e9c:	adds	r3, r3, r2
   12ea0:	beq	12e70 <access_monster_buffer@@Base+0x148>
   12ea4:	ldr	r2, [r3, #-4]
   12ea8:	cmp	r2, #10
   12eac:	bne	13134 <access_monster_buffer@@Base+0x40c>
   12eb0:	ldrb	r3, [r3, #2]
   12eb4:	cmp	r3, #2
   12eb8:	bne	13148 <access_monster_buffer@@Base+0x420>
   12ebc:	cmp	r6, #19
   12ec0:	bhi	12ed8 <access_monster_buffer@@Base+0x1b0>
   12ec4:	ldr	r3, [pc, #736]	; 131ac <access_monster_buffer@@Base+0x484>
   12ec8:	ldr	r2, [pc, #748]	; 131bc <access_monster_buffer@@Base+0x494>
   12ecc:	ldr	r1, [pc, #732]	; 131b0 <access_monster_buffer@@Base+0x488>
   12ed0:	ldr	r0, [pc, #732]	; 131b4 <access_monster_buffer@@Base+0x48c>
   12ed4:	bl	11ffc <__assert_fail@plt>
   12ed8:	ldrh	r3, [r5, #18]
   12edc:	cmp	r3, #0
   12ee0:	beq	12ec4 <access_monster_buffer@@Base+0x19c>
   12ee4:	ldr	r2, [r4, r3]
   12ee8:	add	r3, r4, r3
   12eec:	add	r2, r2, #4
   12ef0:	adds	r3, r3, r2
   12ef4:	beq	12ec4 <access_monster_buffer@@Base+0x19c>
   12ef8:	ldr	r2, [r3, #-4]
   12efc:	cmp	r2, #2
   12f00:	bne	12ec4 <access_monster_buffer@@Base+0x19c>
   12f04:	ldr	r2, [r3, #4]
   12f08:	add	r2, r2, #4
   12f0c:	adds	r1, r3, r2
   12f10:	beq	12fb4 <access_monster_buffer@@Base+0x28c>
   12f14:	ldr	r3, [r3, r2]
   12f18:	sub	r3, r1, r3
   12f1c:	ldrh	ip, [r3]
   12f20:	cmp	ip, #5
   12f24:	bhi	12f3c <access_monster_buffer@@Base+0x214>
   12f28:	ldr	r3, [pc, #636]	; 131ac <access_monster_buffer@@Base+0x484>
   12f2c:	ldr	r2, [pc, #652]	; 131c0 <access_monster_buffer@@Base+0x498>
   12f30:	ldr	r1, [pc, #632]	; 131b0 <access_monster_buffer@@Base+0x488>
   12f34:	ldr	r0, [pc, #632]	; 131b4 <access_monster_buffer@@Base+0x48c>
   12f38:	bl	11ffc <__assert_fail@plt>
   12f3c:	ldrh	r0, [r3, #4]
   12f40:	cmp	r0, #0
   12f44:	beq	13184 <access_monster_buffer@@Base+0x45c>
   12f48:	ldr	r2, [r1, r0]
   12f4c:	cmp	ip, #7
   12f50:	add	r2, r2, #4
   12f54:	add	r0, r1, r0
   12f58:	add	r0, r0, r2
   12f5c:	movls	r7, #0
   12f60:	bhi	1315c <access_monster_buffer@@Base+0x434>
   12f64:	cmp	r0, #0
   12f68:	beq	12f28 <access_monster_buffer@@Base+0x200>
   12f6c:	ldr	r1, [pc, #592]	; 131c4 <access_monster_buffer@@Base+0x49c>
   12f70:	bl	11f54 <strcmp@plt>
   12f74:	cmp	r0, #0
   12f78:	bne	12f28 <access_monster_buffer@@Base+0x200>
   12f7c:	cmp	r7, #5
   12f80:	bne	1306c <access_monster_buffer@@Base+0x344>
   12f84:	cmp	r6, #21
   12f88:	bls	12fa4 <access_monster_buffer@@Base+0x27c>
   12f8c:	ldrh	r3, [r5, #20]
   12f90:	cmp	r3, #0
   12f94:	beq	12fa4 <access_monster_buffer@@Base+0x27c>
   12f98:	ldrb	r3, [r4, r3]
   12f9c:	cmp	r3, #1
   12fa0:	beq	12fac <access_monster_buffer@@Base+0x284>
   12fa4:	mov	r0, #0
   12fa8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12fac:	cmp	r6, #23
   12fb0:	bhi	12fb8 <access_monster_buffer@@Base+0x290>
   12fb4:	bl	12008 <__assert_fail@plt+0xc>
   12fb8:	ldrh	r3, [r5, #22]
   12fbc:	cmp	r3, #0
   12fc0:	beq	12fb4 <access_monster_buffer@@Base+0x28c>
   12fc4:	ldr	r1, [r4, r3]
   12fc8:	add	r4, r4, r3
   12fcc:	adds	r2, r4, r1
   12fd0:	beq	12fb4 <access_monster_buffer@@Base+0x28c>
   12fd4:	ldr	r3, [r4, r1]
   12fd8:	sub	r3, r2, r3
   12fdc:	ldrh	ip, [r3]
   12fe0:	cmp	ip, #5
   12fe4:	bls	13044 <access_monster_buffer@@Base+0x31c>
   12fe8:	ldrh	r0, [r3, #4]
   12fec:	cmp	r0, #0
   12ff0:	ldrne	r1, [r2, r0]
   12ff4:	addne	r0, r2, r0
   12ff8:	addne	r1, r1, #4
   12ffc:	addne	r0, r0, r1
   13000:	cmp	ip, #7
   13004:	bls	13048 <access_monster_buffer@@Base+0x320>
   13008:	ldrh	r3, [r3, #6]
   1300c:	ldr	r1, [pc, #432]	; 131c4 <access_monster_buffer@@Base+0x49c>
   13010:	cmp	r3, #0
   13014:	beq	1304c <access_monster_buffer@@Base+0x324>
   13018:	ldrsh	r4, [r2, r3]
   1301c:	bl	11f54 <strcmp@plt>
   13020:	cmp	r0, #0
   13024:	bne	13058 <access_monster_buffer@@Base+0x330>
   13028:	cmp	r4, #5
   1302c:	beq	12fa4 <access_monster_buffer@@Base+0x27c>
   13030:	ldr	r3, [pc, #372]	; 131ac <access_monster_buffer@@Base+0x484>
   13034:	ldr	r2, [pc, #396]	; 131c8 <access_monster_buffer@@Base+0x4a0>
   13038:	ldr	r1, [pc, #368]	; 131b0 <access_monster_buffer@@Base+0x488>
   1303c:	ldr	r0, [pc, #368]	; 131b4 <access_monster_buffer@@Base+0x48c>
   13040:	bl	11ffc <__assert_fail@plt>
   13044:	mov	r0, #0
   13048:	ldr	r1, [pc, #372]	; 131c4 <access_monster_buffer@@Base+0x49c>
   1304c:	bl	11f54 <strcmp@plt>
   13050:	cmp	r0, #0
   13054:	beq	13030 <access_monster_buffer@@Base+0x308>
   13058:	ldr	r3, [pc, #332]	; 131ac <access_monster_buffer@@Base+0x484>
   1305c:	ldr	r2, [pc, #360]	; 131cc <access_monster_buffer@@Base+0x4a4>
   13060:	ldr	r1, [pc, #328]	; 131b0 <access_monster_buffer@@Base+0x488>
   13064:	ldr	r0, [pc, #328]	; 131b4 <access_monster_buffer@@Base+0x48c>
   13068:	bl	11ffc <__assert_fail@plt>
   1306c:	ldr	r3, [pc, #312]	; 131ac <access_monster_buffer@@Base+0x484>
   13070:	mov	r2, #276	; 0x114
   13074:	ldr	r1, [pc, #308]	; 131b0 <access_monster_buffer@@Base+0x488>
   13078:	ldr	r0, [pc, #308]	; 131b4 <access_monster_buffer@@Base+0x48c>
   1307c:	bl	11ffc <__assert_fail@plt>
   13080:	ldr	r3, [pc, #292]	; 131ac <access_monster_buffer@@Base+0x484>
   13084:	mov	r2, #211	; 0xd3
   13088:	ldr	r1, [pc, #288]	; 131b0 <access_monster_buffer@@Base+0x488>
   1308c:	ldr	r0, [pc, #288]	; 131b4 <access_monster_buffer@@Base+0x48c>
   13090:	bl	11ffc <__assert_fail@plt>
   13094:	ldr	r3, [pc, #272]	; 131ac <access_monster_buffer@@Base+0x484>
   13098:	mov	r2, #221	; 0xdd
   1309c:	ldr	r1, [pc, #268]	; 131b0 <access_monster_buffer@@Base+0x488>
   130a0:	ldr	r0, [pc, #268]	; 131b4 <access_monster_buffer@@Base+0x48c>
   130a4:	bl	11ffc <__assert_fail@plt>
   130a8:	ldr	r3, [pc, #252]	; 131ac <access_monster_buffer@@Base+0x484>
   130ac:	mov	r2, #222	; 0xde
   130b0:	ldr	r1, [pc, #248]	; 131b0 <access_monster_buffer@@Base+0x488>
   130b4:	ldr	r0, [pc, #248]	; 131b4 <access_monster_buffer@@Base+0x48c>
   130b8:	bl	11ffc <__assert_fail@plt>
   130bc:	ldr	r3, [pc, #232]	; 131ac <access_monster_buffer@@Base+0x484>
   130c0:	mov	r2, #223	; 0xdf
   130c4:	ldr	r1, [pc, #228]	; 131b0 <access_monster_buffer@@Base+0x488>
   130c8:	ldr	r0, [pc, #228]	; 131b4 <access_monster_buffer@@Base+0x48c>
   130cc:	bl	11ffc <__assert_fail@plt>
   130d0:	ldr	r3, [pc, #212]	; 131ac <access_monster_buffer@@Base+0x484>
   130d4:	mov	r2, #227	; 0xe3
   130d8:	ldr	r1, [pc, #208]	; 131b0 <access_monster_buffer@@Base+0x488>
   130dc:	ldr	r0, [pc, #208]	; 131b4 <access_monster_buffer@@Base+0x48c>
   130e0:	bl	11ffc <__assert_fail@plt>
   130e4:	ldr	r3, [pc, #192]	; 131ac <access_monster_buffer@@Base+0x484>
   130e8:	mov	r2, #228	; 0xe4
   130ec:	ldr	r1, [pc, #188]	; 131b0 <access_monster_buffer@@Base+0x488>
   130f0:	ldr	r0, [pc, #188]	; 131b4 <access_monster_buffer@@Base+0x48c>
   130f4:	bl	11ffc <__assert_fail@plt>
   130f8:	ldr	r3, [pc, #172]	; 131ac <access_monster_buffer@@Base+0x484>
   130fc:	mov	r2, #240	; 0xf0
   13100:	ldr	r1, [pc, #168]	; 131b0 <access_monster_buffer@@Base+0x488>
   13104:	ldr	r0, [pc, #168]	; 131b4 <access_monster_buffer@@Base+0x48c>
   13108:	bl	11ffc <__assert_fail@plt>
   1310c:	ldr	r3, [pc, #152]	; 131ac <access_monster_buffer@@Base+0x484>
   13110:	mov	r2, #241	; 0xf1
   13114:	ldr	r1, [pc, #148]	; 131b0 <access_monster_buffer@@Base+0x488>
   13118:	ldr	r0, [pc, #148]	; 131b4 <access_monster_buffer@@Base+0x48c>
   1311c:	bl	11ffc <__assert_fail@plt>
   13120:	ldr	r3, [pc, #132]	; 131ac <access_monster_buffer@@Base+0x484>
   13124:	mov	r2, #242	; 0xf2
   13128:	ldr	r1, [pc, #128]	; 131b0 <access_monster_buffer@@Base+0x488>
   1312c:	ldr	r0, [pc, #128]	; 131b4 <access_monster_buffer@@Base+0x48c>
   13130:	bl	11ffc <__assert_fail@plt>
   13134:	ldr	r3, [pc, #112]	; 131ac <access_monster_buffer@@Base+0x484>
   13138:	ldr	r2, [pc, #144]	; 131d0 <access_monster_buffer@@Base+0x4a8>
   1313c:	ldr	r1, [pc, #108]	; 131b0 <access_monster_buffer@@Base+0x488>
   13140:	ldr	r0, [pc, #108]	; 131b4 <access_monster_buffer@@Base+0x48c>
   13144:	bl	11ffc <__assert_fail@plt>
   13148:	ldr	r3, [pc, #92]	; 131ac <access_monster_buffer@@Base+0x484>
   1314c:	ldr	r2, [pc, #128]	; 131d4 <access_monster_buffer@@Base+0x4ac>
   13150:	ldr	r1, [pc, #88]	; 131b0 <access_monster_buffer@@Base+0x488>
   13154:	ldr	r0, [pc, #88]	; 131b4 <access_monster_buffer@@Base+0x48c>
   13158:	bl	11ffc <__assert_fail@plt>
   1315c:	ldrh	r7, [r3, #6]
   13160:	cmp	r7, #0
   13164:	beq	12f64 <access_monster_buffer@@Base+0x23c>
   13168:	ldrsh	r7, [r1, r7]
   1316c:	b	12f64 <access_monster_buffer@@Base+0x23c>
   13170:	mov	r2, #100	; 0x64
   13174:	mov	r7, #0
   13178:	b	12d64 <access_monster_buffer@@Base+0x3c>
   1317c:	mov	r9, r0
   13180:	b	12da8 <access_monster_buffer@@Base+0x80>
   13184:	cmp	ip, #7
   13188:	bls	12f28 <access_monster_buffer@@Base+0x200>
   1318c:	ldrh	r7, [r3, #6]
   13190:	cmp	r7, #0
   13194:	bne	13168 <access_monster_buffer@@Base+0x440>
   13198:	b	12f28 <access_monster_buffer@@Base+0x200>
   1319c:	svccc	0x00800000
   131a0:	andmi	r0, r0, r0
   131a4:	submi	r0, r0, r0
   131a8:			; <UNDEFINED> instruction: 0x000193b0
   131ac:	andeq	r9, r1, r8, ror #2
   131b0:			; <UNDEFINED> instruction: 0x000193b4
   131b4:	andeq	r9, r1, r8, asr #24
   131b8:	andeq	r0, r0, r5, lsl #2
   131bc:	andeq	r0, r0, pc, lsl #2
   131c0:	andeq	r0, r0, r3, lsl r1
   131c4:	andeq	r9, r1, r0, lsl r3
   131c8:	andeq	r0, r0, pc, lsl r1
   131cc:	andeq	r0, r0, lr, lsl r1
   131d0:	andeq	r0, r0, r7, lsl #2
   131d4:	andeq	r0, r0, fp, lsl #2

000131d8 <flatcc_builder_default_alloc@@Base>:
   131d8:	push	{r4, r5, r6, r7, r8, lr}
   131dc:	subs	r5, r2, #0
   131e0:	mov	r6, r1
   131e4:	bne	13208 <flatcc_builder_default_alloc@@Base+0x30>
   131e8:	ldr	r0, [r1]
   131ec:	cmp	r0, #0
   131f0:	popeq	{r4, r5, r6, r7, r8, pc}
   131f4:	bl	11f60 <free@plt>
   131f8:	str	r5, [r6]
   131fc:	str	r5, [r6, #4]
   13200:	mov	r0, r5
   13204:	pop	{r4, r5, r6, r7, r8, pc}
   13208:	mov	r7, r3
   1320c:	ldr	r3, [sp, #24]
   13210:	sub	r2, r3, #1
   13214:	cmp	r2, #6
   13218:	ldrls	pc, [pc, r2, lsl #2]
   1321c:	b	132b8 <flatcc_builder_default_alloc@@Base+0xe0>
   13220:	andeq	r3, r1, ip, lsl #5
   13224:			; <UNDEFINED> instruction: 0x000132b8
   13228:			; <UNDEFINED> instruction: 0x000132b8
   1322c:			; <UNDEFINED> instruction: 0x000132b0
   13230:	andeq	r3, r1, ip, lsr r2
   13234:			; <UNDEFINED> instruction: 0x000132b8
   13238:	andeq	r3, r1, r8, lsr #5
   1323c:	mov	r4, r5
   13240:	ldr	r3, [r6, #4]
   13244:	cmp	r5, r3
   13248:	bhi	13254 <flatcc_builder_default_alloc@@Base+0x7c>
   1324c:	cmp	r4, r3, lsr #1
   13250:	bls	132c0 <flatcc_builder_default_alloc@@Base+0xe8>
   13254:	mov	r1, r4
   13258:	ldr	r0, [r6]
   1325c:	bl	11f84 <realloc@plt>
   13260:	subs	r5, r0, #0
   13264:	beq	132dc <flatcc_builder_default_alloc@@Base+0x104>
   13268:	cmp	r7, #0
   1326c:	beq	1327c <flatcc_builder_default_alloc@@Base+0xa4>
   13270:	ldr	r0, [r6, #4]
   13274:	cmp	r0, r4
   13278:	bcc	132c8 <flatcc_builder_default_alloc@@Base+0xf0>
   1327c:	str	r5, [r6]
   13280:	str	r4, [r6, #4]
   13284:	mov	r0, #0
   13288:	pop	{r4, r5, r6, r7, r8, pc}
   1328c:	mov	r4, #256	; 0x100
   13290:	cmp	r5, r4
   13294:	bls	13240 <flatcc_builder_default_alloc@@Base+0x68>
   13298:	lsl	r4, r4, #1
   1329c:	cmp	r5, r4
   132a0:	bhi	13298 <flatcc_builder_default_alloc@@Base+0xc0>
   132a4:	b	13240 <flatcc_builder_default_alloc@@Base+0x68>
   132a8:	mov	r4, #64	; 0x40
   132ac:	b	13290 <flatcc_builder_default_alloc@@Base+0xb8>
   132b0:	mov	r4, #288	; 0x120
   132b4:	b	13290 <flatcc_builder_default_alloc@@Base+0xb8>
   132b8:	mov	r4, #32
   132bc:	b	13290 <flatcc_builder_default_alloc@@Base+0xb8>
   132c0:	mov	r0, #0
   132c4:	pop	{r4, r5, r6, r7, r8, pc}
   132c8:	sub	r2, r4, r0
   132cc:	mov	r1, #0
   132d0:	add	r0, r5, r0
   132d4:	bl	11fd8 <memset@plt>
   132d8:	b	1327c <flatcc_builder_default_alloc@@Base+0xa4>
   132dc:	mvn	r0, #0
   132e0:	pop	{r4, r5, r6, r7, r8, pc}
   132e4:	push	{r4, r5, r6, r7, r8, lr}
   132e8:	mov	r5, r0
   132ec:	ldrh	r0, [r0, #128]	; 0x80
   132f0:	sub	sp, sp, #88	; 0x58
   132f4:	mov	r7, #4
   132f8:	cmp	r0, #3
   132fc:	movls	r0, #4
   13300:	strhls	r0, [r5, #128]	; 0x80
   13304:	ldr	r0, [r5, #136]	; 0x88
   13308:	lsls	r4, r2, #2
   1330c:	mov	r8, #1
   13310:	str	r7, [sp, #16]
   13314:	str	r8, [sp, #20]
   13318:	and	ip, r0, #3
   1331c:	movne	r8, #2
   13320:	str	r7, [sp, #28]
   13324:	addne	r7, r4, r7
   13328:	strne	r4, [sp, #36]	; 0x24
   1332c:	add	lr, sp, #12
   13330:	strne	r1, [sp, #32]
   13334:	strne	r7, [sp, #16]
   13338:	strne	r8, [sp, #20]
   1333c:	movne	r4, #3
   13340:	moveq	r4, #2
   13344:	cmp	ip, #0
   13348:	str	r2, [sp, #12]
   1334c:	str	lr, [sp, #24]
   13350:	beq	1337c <flatcc_builder_default_alloc@@Base+0x1a4>
   13354:	add	lr, r8, #1
   13358:	add	r8, sp, #88	; 0x58
   1335c:	add	lr, r8, lr, lsl #3
   13360:	ldr	r6, [pc, #320]	; 134a8 <flatcc_builder_default_alloc@@Base+0x2d0>
   13364:	mov	r8, r4
   13368:	add	r7, r7, ip
   1336c:	str	ip, [lr, #-68]	; 0xffffffbc
   13370:	str	r7, [sp, #16]
   13374:	str	r4, [sp, #20]
   13378:	str	r6, [lr, #-72]	; 0xffffffb8
   1337c:	cmp	r2, #0
   13380:	sub	r4, r0, r7
   13384:	beq	13418 <flatcc_builder_default_alloc@@Base+0x240>
   13388:	cmp	r3, #0
   1338c:	addne	r6, r3, r2
   13390:	mvnne	r0, #3
   13394:	bne	133c8 <flatcc_builder_default_alloc@@Base+0x1f0>
   13398:	b	13454 <flatcc_builder_default_alloc@@Base+0x27c>
   1339c:	sub	lr, r0, r4
   133a0:	add	ip, lr, ip
   133a4:	str	ip, [r1]
   133a8:	ldrb	ip, [r3]
   133ac:	cmp	ip, #0
   133b0:	beq	1347c <flatcc_builder_default_alloc@@Base+0x2a4>
   133b4:	add	r3, r3, #1
   133b8:	cmp	r3, r6
   133bc:	add	r1, r1, #4
   133c0:	sub	r0, r0, #4
   133c4:	beq	13410 <flatcc_builder_default_alloc@@Base+0x238>
   133c8:	ldr	ip, [r1]
   133cc:	cmp	ip, #0
   133d0:	bne	1339c <flatcc_builder_default_alloc@@Base+0x1c4>
   133d4:	ldrb	ip, [r3]
   133d8:	cmp	ip, #0
   133dc:	beq	133b4 <flatcc_builder_default_alloc@@Base+0x1dc>
   133e0:	ldr	r3, [pc, #196]	; 134ac <flatcc_builder_default_alloc@@Base+0x2d4>
   133e4:	ldr	r2, [pc, #196]	; 134b0 <flatcc_builder_default_alloc@@Base+0x2d8>
   133e8:	ldr	r1, [pc, #196]	; 134b4 <flatcc_builder_default_alloc@@Base+0x2dc>
   133ec:	ldr	r0, [pc, #196]	; 134b8 <flatcc_builder_default_alloc@@Base+0x2e0>
   133f0:	bl	11ffc <__assert_fail@plt>
   133f4:	sub	r1, r0, r4
   133f8:	add	r3, r3, #1
   133fc:	add	r1, r1, lr
   13400:	cmp	r2, r3
   13404:	str	r1, [ip, #4]!
   13408:	sub	r0, r0, #4
   1340c:	bne	1345c <flatcc_builder_default_alloc@@Base+0x284>
   13410:	ldr	r0, [r5, #136]	; 0x88
   13414:	sub	r4, r0, r7
   13418:	cmp	r4, r0
   1341c:	bge	134a4 <flatcc_builder_default_alloc@@Base+0x2cc>
   13420:	ldr	r0, [r5, #36]	; 0x24
   13424:	mov	r2, r8
   13428:	str	r7, [sp]
   1342c:	mov	r3, r4
   13430:	ldr	r6, [r5, #44]	; 0x2c
   13434:	add	r1, sp, #24
   13438:	blx	r6
   1343c:	cmp	r0, #0
   13440:	bne	13490 <flatcc_builder_default_alloc@@Base+0x2b8>
   13444:	mov	r0, r4
   13448:	str	r4, [r5, #136]	; 0x88
   1344c:	add	sp, sp, #88	; 0x58
   13450:	pop	{r4, r5, r6, r7, r8, pc}
   13454:	sub	ip, r1, #4
   13458:	mvn	r0, #3
   1345c:	ldr	lr, [ip, #4]
   13460:	cmp	lr, #0
   13464:	bne	133f4 <flatcc_builder_default_alloc@@Base+0x21c>
   13468:	ldr	r3, [pc, #60]	; 134ac <flatcc_builder_default_alloc@@Base+0x2d4>
   1346c:	ldr	r2, [pc, #72]	; 134bc <flatcc_builder_default_alloc@@Base+0x2e4>
   13470:	ldr	r1, [pc, #60]	; 134b4 <flatcc_builder_default_alloc@@Base+0x2dc>
   13474:	ldr	r0, [pc, #68]	; 134c0 <flatcc_builder_default_alloc@@Base+0x2e8>
   13478:	bl	11ffc <__assert_fail@plt>
   1347c:	ldr	r3, [pc, #40]	; 134ac <flatcc_builder_default_alloc@@Base+0x2d4>
   13480:	ldr	r2, [pc, #60]	; 134c4 <flatcc_builder_default_alloc@@Base+0x2ec>
   13484:	ldr	r1, [pc, #40]	; 134b4 <flatcc_builder_default_alloc@@Base+0x2dc>
   13488:	ldr	r0, [pc, #56]	; 134c8 <flatcc_builder_default_alloc@@Base+0x2f0>
   1348c:	bl	11ffc <__assert_fail@plt>
   13490:	ldr	r3, [pc, #52]	; 134cc <flatcc_builder_default_alloc@@Base+0x2f4>
   13494:	ldr	r2, [pc, #52]	; 134d0 <flatcc_builder_default_alloc@@Base+0x2f8>
   13498:	ldr	r1, [pc, #20]	; 134b4 <flatcc_builder_default_alloc@@Base+0x2dc>
   1349c:	ldr	r0, [pc, #28]	; 134c0 <flatcc_builder_default_alloc@@Base+0x2e8>
   134a0:	bl	11ffc <__assert_fail@plt>
   134a4:	bl	120c0 <__assert_fail@plt+0xc4>
   134a8:	ldrdeq	r9, [r1], -r0
   134ac:	ldrdeq	r9, [r1], -r0
   134b0:			; <UNDEFINED> instruction: 0x000005b5
   134b4:	andeq	r9, r1, r8, lsl #23
   134b8:	andeq	r9, r1, ip, asr #24
   134bc:			; <UNDEFINED> instruction: 0x000005b7
   134c0:	andeq	r9, r1, r8, asr #24
   134c4:			; <UNDEFINED> instruction: 0x000005b1
   134c8:	andeq	r9, r1, ip, lsr ip
   134cc:	andeq	r9, r1, r4, asr r4
   134d0:	andeq	r0, r0, fp, lsl #5
   134d4:	ldrh	r3, [r0, #128]	; 0x80
   134d8:	push	{r4, r5, r6, r7, lr}
   134dc:	sub	sp, sp, #92	; 0x5c
   134e0:	cmp	r3, #3
   134e4:	movls	r3, #4
   134e8:	ldr	lr, [r0, #136]	; 0x88
   134ec:	mov	ip, #4
   134f0:	strhls	r3, [r0, #128]	; 0x80
   134f4:	mov	r4, r0
   134f8:	lsls	r6, r2, #2
   134fc:	mov	r0, #1
   13500:	add	r5, sp, #12
   13504:	str	ip, [sp, #16]
   13508:	str	r0, [sp, #20]
   1350c:	and	r3, lr, #3
   13510:	movne	r0, #2
   13514:	str	ip, [sp, #28]
   13518:	addne	ip, r6, ip
   1351c:	str	r5, [sp, #24]
   13520:	strne	r6, [sp, #36]	; 0x24
   13524:	strne	r1, [sp, #32]
   13528:	strne	ip, [sp, #16]
   1352c:	strne	r0, [sp, #20]
   13530:	movne	r5, r0
   13534:	movne	r6, #3
   13538:	moveq	r5, r0
   1353c:	moveq	r6, #2
   13540:	cmp	r3, #0
   13544:	str	r2, [sp, #12]
   13548:	beq	13574 <flatcc_builder_default_alloc@@Base+0x39c>
   1354c:	add	r0, r5, #1
   13550:	add	r5, sp, #88	; 0x58
   13554:	add	r0, r5, r0, lsl #3
   13558:	ldr	r7, [pc, #204]	; 1362c <flatcc_builder_default_alloc@@Base+0x454>
   1355c:	mov	r5, r6
   13560:	add	ip, ip, r3
   13564:	str	r3, [r0, #-68]	; 0xffffffbc
   13568:	str	ip, [sp, #16]
   1356c:	str	r6, [sp, #20]
   13570:	str	r7, [r0, #-72]	; 0xffffffb8
   13574:	cmp	r2, #0
   13578:	beq	135d4 <flatcc_builder_default_alloc@@Base+0x3fc>
   1357c:	ldr	r3, [r1]
   13580:	cmp	r3, #0
   13584:	beq	135bc <flatcc_builder_default_alloc@@Base+0x3e4>
   13588:	sub	r6, lr, ip
   1358c:	mov	r0, #0
   13590:	mvn	lr, #3
   13594:	sub	r3, r3, r6
   13598:	add	r0, r0, #1
   1359c:	add	r3, r3, lr
   135a0:	cmp	r2, r0
   135a4:	str	r3, [r1]
   135a8:	beq	135d0 <flatcc_builder_default_alloc@@Base+0x3f8>
   135ac:	ldr	r3, [r1, #4]!
   135b0:	sub	lr, lr, #4
   135b4:	cmp	r3, #0
   135b8:	bne	13594 <flatcc_builder_default_alloc@@Base+0x3bc>
   135bc:	ldr	r3, [pc, #108]	; 13630 <flatcc_builder_default_alloc@@Base+0x458>
   135c0:	ldr	r2, [pc, #108]	; 13634 <flatcc_builder_default_alloc@@Base+0x45c>
   135c4:	ldr	r1, [pc, #108]	; 13638 <flatcc_builder_default_alloc@@Base+0x460>
   135c8:	ldr	r0, [pc, #108]	; 1363c <flatcc_builder_default_alloc@@Base+0x464>
   135cc:	bl	11ffc <__assert_fail@plt>
   135d0:	ldr	lr, [r4, #136]	; 0x88
   135d4:	sub	r6, lr, ip
   135d8:	cmp	r6, lr
   135dc:	bge	13628 <flatcc_builder_default_alloc@@Base+0x450>
   135e0:	ldr	r0, [r4, #36]	; 0x24
   135e4:	mov	r2, r5
   135e8:	str	ip, [sp]
   135ec:	mov	r3, r6
   135f0:	ldr	r5, [r4, #44]	; 0x2c
   135f4:	add	r1, sp, #24
   135f8:	blx	r5
   135fc:	cmp	r0, #0
   13600:	bne	13614 <flatcc_builder_default_alloc@@Base+0x43c>
   13604:	mov	r0, r6
   13608:	str	r6, [r4, #136]	; 0x88
   1360c:	add	sp, sp, #92	; 0x5c
   13610:	pop	{r4, r5, r6, r7, pc}
   13614:	ldr	r3, [pc, #36]	; 13640 <flatcc_builder_default_alloc@@Base+0x468>
   13618:	ldr	r2, [pc, #36]	; 13644 <flatcc_builder_default_alloc@@Base+0x46c>
   1361c:	ldr	r1, [pc, #20]	; 13638 <flatcc_builder_default_alloc@@Base+0x460>
   13620:	ldr	r0, [pc, #20]	; 1363c <flatcc_builder_default_alloc@@Base+0x464>
   13624:	bl	11ffc <__assert_fail@plt>
   13628:	bl	120c0 <__assert_fail@plt+0xc4>
   1362c:	ldrdeq	r9, [r1], -r0
   13630:	ldrdeq	r9, [r1], -r0
   13634:			; <UNDEFINED> instruction: 0x000005b7
   13638:	andeq	r9, r1, r8, lsl #23
   1363c:	andeq	r9, r1, r8, asr #24
   13640:	andeq	r9, r1, r4, asr r4
   13644:	andeq	r0, r0, fp, lsl #5

00013648 <flatcc_builder_flush_vtable_cache@@Base>:
   13648:	ldr	r3, [r0, #116]	; 0x74
   1364c:	cmp	r3, #0
   13650:	bxeq	lr
   13654:	ldr	r2, [r0, #96]	; 0x60
   13658:	push	{r4, lr}
   1365c:	mov	r1, #0
   13660:	mov	r4, r0
   13664:	ldr	r0, [r0, #92]	; 0x5c
   13668:	bl	11fd8 <memset@plt>
   1366c:	mov	r2, #16
   13670:	mov	r3, #0
   13674:	str	r2, [r4, #124]	; 0x7c
   13678:	str	r3, [r4, #120]	; 0x78
   1367c:	pop	{r4, pc}

00013680 <flatcc_builder_custom_init@@Base>:
   13680:	push	{r4, r5, r6, r7, r8, lr}
   13684:	mov	r6, r1
   13688:	mov	r7, r2
   1368c:	mov	r1, #0
   13690:	mov	r2, #232	; 0xe8
   13694:	mov	r4, r0
   13698:	mov	r5, r3
   1369c:	ldr	r8, [sp, #24]
   136a0:	bl	11fd8 <memset@plt>
   136a4:	cmp	r6, #0
   136a8:	moveq	r3, #1
   136ac:	ldreq	r6, [pc, #40]	; 136dc <flatcc_builder_custom_init@@Base+0x5c>
   136b0:	addeq	r7, r4, #188	; 0xbc
   136b4:	str	r8, [r4, #40]	; 0x28
   136b8:	str	r7, [r4, #36]	; 0x24
   136bc:	str	r6, [r4, #44]	; 0x2c
   136c0:	mov	r0, #0
   136c4:	streq	r3, [r4, #184]	; 0xb8
   136c8:	ldr	r3, [pc, #16]	; 136e0 <flatcc_builder_custom_init@@Base+0x60>
   136cc:	cmp	r5, #0
   136d0:	moveq	r5, r3
   136d4:	str	r5, [r4, #48]	; 0x30
   136d8:	pop	{r4, r5, r6, r7, r8, pc}
   136dc:	andeq	r8, r1, r4, lsr ip
   136e0:	ldrdeq	r3, [r1], -r8

000136e4 <flatcc_builder_init@@Base>:
   136e4:	push	{r4, lr}
   136e8:	mov	r2, #232	; 0xe8
   136ec:	mov	r1, #0
   136f0:	mov	r4, r0
   136f4:	bl	11fd8 <memset@plt>
   136f8:	ldr	r1, [pc, #32]	; 13720 <flatcc_builder_init@@Base+0x3c>
   136fc:	ldr	r3, [pc, #32]	; 13724 <flatcc_builder_init@@Base+0x40>
   13700:	mov	r0, #1
   13704:	add	r2, r4, #188	; 0xbc
   13708:	str	r0, [r4, #184]	; 0xb8
   1370c:	str	r1, [r4, #48]	; 0x30
   13710:	str	r2, [r4, #36]	; 0x24
   13714:	str	r3, [r4, #44]	; 0x2c
   13718:	mov	r0, #0
   1371c:	pop	{r4, pc}
   13720:	ldrdeq	r3, [r1], -r8
   13724:	andeq	r8, r1, r4, lsr ip

00013728 <flatcc_builder_custom_reset@@Base>:
   13728:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1372c:	add	r7, r0, #52	; 0x34
   13730:	mov	r4, #0
   13734:	sub	sp, sp, #12
   13738:	mov	r5, r0
   1373c:	mov	sl, r1
   13740:	mov	r8, r2
   13744:	mov	r6, r7
   13748:	mov	r9, r4
   1374c:	mov	fp, #1
   13750:	b	137a4 <flatcc_builder_custom_reset@@Base+0x7c>
   13754:	cmp	r4, #5
   13758:	cmpne	r8, #0
   1375c:	beq	13788 <flatcc_builder_custom_reset@@Base+0x60>
   13760:	ldr	r0, [r5, #40]	; 0x28
   13764:	mov	r3, fp
   13768:	str	r4, [sp]
   1376c:	mov	r2, #1
   13770:	mov	r1, r6
   13774:	ldr	ip, [r5, #48]	; 0x30
   13778:	blx	ip
   1377c:	cmp	r0, #0
   13780:	bne	13858 <flatcc_builder_custom_reset@@Base+0x130>
   13784:	ldr	r0, [r7, r4, lsl #3]
   13788:	ldr	r2, [r6, #4]
   1378c:	mov	r1, r9
   13790:	bl	11fd8 <memset@plt>
   13794:	add	r4, r4, #1
   13798:	cmp	r4, #8
   1379c:	add	r6, r6, #8
   137a0:	beq	137d0 <flatcc_builder_custom_reset@@Base+0xa8>
   137a4:	ldr	r0, [r7, r4, lsl #3]
   137a8:	cmp	r0, #0
   137ac:	bne	13754 <flatcc_builder_custom_reset@@Base+0x2c>
   137b0:	ldr	r3, [r6, #4]
   137b4:	cmp	r3, #0
   137b8:	beq	13794 <flatcc_builder_custom_reset@@Base+0x6c>
   137bc:	ldr	r3, [pc, #156]	; 13860 <flatcc_builder_custom_reset@@Base+0x138>
   137c0:	ldr	r2, [pc, #156]	; 13864 <flatcc_builder_custom_reset@@Base+0x13c>
   137c4:	ldr	r1, [pc, #156]	; 13868 <flatcc_builder_custom_reset@@Base+0x140>
   137c8:	ldr	r0, [pc, #156]	; 1386c <flatcc_builder_custom_reset@@Base+0x144>
   137cc:	bl	11ffc <__assert_fail@plt>
   137d0:	ldr	r2, [r5, #124]	; 0x7c
   137d4:	mov	r3, #0
   137d8:	ldr	r0, [r5, #60]	; 0x3c
   137dc:	cmp	r2, r3
   137e0:	str	r3, [r5, #120]	; 0x78
   137e4:	ldr	r1, [r5, #76]	; 0x4c
   137e8:	movne	r3, #16
   137ec:	ldr	r2, [r5, #52]	; 0x34
   137f0:	str	r0, [r5, #16]
   137f4:	ldr	r0, [r5, #184]	; 0xb8
   137f8:	strne	r3, [r5, #124]	; 0x7c
   137fc:	mov	r3, #0
   13800:	cmp	sl, #0
   13804:	strne	r3, [r5, #172]	; 0xac
   13808:	strne	r3, [r5, #176]	; 0xb0
   1380c:	strne	r3, [r5, #180]	; 0xb4
   13810:	cmp	r0, #0
   13814:	stm	r5, {r1, r2}
   13818:	strh	r3, [r5, #128]	; 0x80
   1381c:	str	r3, [r5, #136]	; 0x88
   13820:	str	r3, [r5, #140]	; 0x8c
   13824:	str	r3, [r5, #156]	; 0x9c
   13828:	str	r3, [r5, #160]	; 0xa0
   1382c:	str	r3, [r5, #20]
   13830:	str	r3, [r5, #24]
   13834:	str	r3, [r5, #148]	; 0x94
   13838:	str	r3, [r5, #152]	; 0x98
   1383c:	str	r3, [r5, #32]
   13840:	beq	13850 <flatcc_builder_custom_reset@@Base+0x128>
   13844:	add	r0, r5, #188	; 0xbc
   13848:	bl	18b0c <flatcc_emitter_reset@@Base>
   1384c:	mov	r0, #0
   13850:	add	sp, sp, #12
   13854:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13858:	mvn	r0, #0
   1385c:	b	13850 <flatcc_builder_custom_reset@@Base+0x128>
   13860:	strdeq	r9, [r1], -r0
   13864:			; <UNDEFINED> instruction: 0x000001b2
   13868:	andeq	r9, r1, r8, lsl #23
   1386c:	andeq	r9, r1, ip, asr ip

00013870 <flatcc_builder_reset@@Base>:
   13870:	push	{r4, r5, r6, r7, r8, lr}
   13874:	mov	r5, r0
   13878:	add	r4, r0, #52	; 0x34
   1387c:	add	r6, r0, #116	; 0x74
   13880:	mov	r7, #0
   13884:	b	138a0 <flatcc_builder_reset@@Base+0x30>
   13888:	ldr	r2, [r4, #4]
   1388c:	mov	r1, r7
   13890:	bl	11fd8 <memset@plt>
   13894:	add	r4, r4, #8
   13898:	cmp	r6, r4
   1389c:	beq	138cc <flatcc_builder_reset@@Base+0x5c>
   138a0:	ldr	r0, [r4]
   138a4:	cmp	r0, #0
   138a8:	bne	13888 <flatcc_builder_reset@@Base+0x18>
   138ac:	ldr	r3, [r4, #4]
   138b0:	cmp	r3, #0
   138b4:	beq	13894 <flatcc_builder_reset@@Base+0x24>
   138b8:	ldr	r3, [pc, #128]	; 13940 <flatcc_builder_reset@@Base+0xd0>
   138bc:	ldr	r2, [pc, #128]	; 13944 <flatcc_builder_reset@@Base+0xd4>
   138c0:	ldr	r1, [pc, #128]	; 13948 <flatcc_builder_reset@@Base+0xd8>
   138c4:	ldr	r0, [pc, #128]	; 1394c <flatcc_builder_reset@@Base+0xdc>
   138c8:	bl	11ffc <__assert_fail@plt>
   138cc:	ldr	r2, [r5, #124]	; 0x7c
   138d0:	mov	r3, #0
   138d4:	cmp	r2, r3
   138d8:	str	r3, [r5, #120]	; 0x78
   138dc:	movne	r3, #16
   138e0:	strne	r3, [r5, #124]	; 0x7c
   138e4:	ldr	r1, [r5, #76]	; 0x4c
   138e8:	ldr	r3, [r5, #184]	; 0xb8
   138ec:	ldr	r2, [r5, #52]	; 0x34
   138f0:	ldr	r0, [r5, #60]	; 0x3c
   138f4:	cmp	r3, #0
   138f8:	mov	r3, #0
   138fc:	str	r0, [r5, #16]
   13900:	stm	r5, {r1, r2}
   13904:	strh	r3, [r5, #128]	; 0x80
   13908:	str	r3, [r5, #136]	; 0x88
   1390c:	str	r3, [r5, #140]	; 0x8c
   13910:	str	r3, [r5, #156]	; 0x9c
   13914:	str	r3, [r5, #160]	; 0xa0
   13918:	str	r3, [r5, #20]
   1391c:	str	r3, [r5, #24]
   13920:	str	r3, [r5, #148]	; 0x94
   13924:	str	r3, [r5, #152]	; 0x98
   13928:	str	r3, [r5, #32]
   1392c:	beq	13938 <flatcc_builder_reset@@Base+0xc8>
   13930:	add	r0, r5, #188	; 0xbc
   13934:	bl	18b0c <flatcc_emitter_reset@@Base>
   13938:	mov	r0, #0
   1393c:	pop	{r4, r5, r6, r7, r8, pc}
   13940:	strdeq	r9, [r1], -r0
   13944:			; <UNDEFINED> instruction: 0x000001b2
   13948:	andeq	r9, r1, r8, lsl #23
   1394c:	andeq	r9, r1, ip, asr ip

00013950 <flatcc_builder_clear@@Base>:
   13950:	push	{r4, r5, r6, r7, r8, lr}
   13954:	mov	r4, #0
   13958:	sub	sp, sp, #8
   1395c:	mov	r6, r0
   13960:	add	r5, r0, #52	; 0x34
   13964:	mov	r8, r4
   13968:	ldr	r0, [r6, #40]	; 0x28
   1396c:	mov	r1, r5
   13970:	str	r4, [sp]
   13974:	mov	r3, r8
   13978:	add	r4, r4, #1
   1397c:	ldr	r7, [r6, #48]	; 0x30
   13980:	mov	r2, #0
   13984:	blx	r7
   13988:	cmp	r4, #8
   1398c:	add	r5, r5, #8
   13990:	bne	13968 <flatcc_builder_clear@@Base+0x18>
   13994:	ldr	r3, [r6, #184]	; 0xb8
   13998:	cmp	r3, #0
   1399c:	beq	139a8 <flatcc_builder_clear@@Base+0x58>
   139a0:	add	r0, r6, #188	; 0xbc
   139a4:	bl	18bc8 <flatcc_emitter_clear@@Base>
   139a8:	mov	r0, r6
   139ac:	mov	r2, #232	; 0xe8
   139b0:	mov	r1, #0
   139b4:	add	sp, sp, #8
   139b8:	pop	{r4, r5, r6, r7, r8, lr}
   139bc:	b	11fd8 <memset@plt>

000139c0 <flatcc_builder_enter_user_frame_ptr@@Base>:
   139c0:	push	{r4, r5, r6, r7, r8, lr}
   139c4:	add	r4, r1, #3
   139c8:	bic	r4, r4, #3
   139cc:	ldr	r7, [r0, #228]	; 0xe4
   139d0:	add	r4, r4, #4
   139d4:	ldr	r3, [r0, #112]	; 0x70
   139d8:	add	r2, r4, r7
   139dc:	cmp	r2, r3
   139e0:	sub	sp, sp, #8
   139e4:	mov	r6, r0
   139e8:	bhi	13a30 <flatcc_builder_enter_user_frame_ptr@@Base+0x70>
   139ec:	ldr	r8, [r6, #108]	; 0x6c
   139f0:	adds	r5, r8, r7
   139f4:	beq	13a58 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   139f8:	mov	r2, r4
   139fc:	mov	r1, #0
   13a00:	mov	r0, r5
   13a04:	bl	11fd8 <memset@plt>
   13a08:	ldr	r3, [r6, #224]	; 0xe0
   13a0c:	add	r0, r5, #4
   13a10:	str	r3, [r8, r7]
   13a14:	ldr	r3, [r6, #228]	; 0xe4
   13a18:	add	r4, r4, r3
   13a1c:	add	r3, r3, #4
   13a20:	str	r4, [r6, #228]	; 0xe4
   13a24:	str	r3, [r6, #224]	; 0xe0
   13a28:	add	sp, sp, #8
   13a2c:	pop	{r4, r5, r6, r7, r8, pc}
   13a30:	mov	r3, #7
   13a34:	ldr	r0, [r0, #40]	; 0x28
   13a38:	add	r1, r6, #108	; 0x6c
   13a3c:	str	r3, [sp]
   13a40:	mov	r3, #0
   13a44:	ldr	r5, [r6, #48]	; 0x30
   13a48:	blx	r5
   13a4c:	cmp	r0, #0
   13a50:	beq	139ec <flatcc_builder_enter_user_frame_ptr@@Base+0x2c>
   13a54:	bl	12074 <__assert_fail@plt+0x78>
   13a58:	mov	r0, r5
   13a5c:	b	13a28 <flatcc_builder_enter_user_frame_ptr@@Base+0x68>

00013a60 <flatcc_builder_enter_user_frame@@Base>:
   13a60:	push	{r4, r5, r6, r7, lr}
   13a64:	add	r4, r1, #3
   13a68:	bic	r4, r4, #3
   13a6c:	ldr	r6, [r0, #228]	; 0xe4
   13a70:	add	r4, r4, #4
   13a74:	ldr	r3, [r0, #112]	; 0x70
   13a78:	add	r2, r4, r6
   13a7c:	cmp	r2, r3
   13a80:	sub	sp, sp, #12
   13a84:	mov	r5, r0
   13a88:	bhi	13ac8 <flatcc_builder_enter_user_frame@@Base+0x68>
   13a8c:	ldr	r7, [r5, #108]	; 0x6c
   13a90:	adds	r0, r7, r6
   13a94:	beq	13ac0 <flatcc_builder_enter_user_frame@@Base+0x60>
   13a98:	mov	r2, r4
   13a9c:	mov	r1, #0
   13aa0:	bl	11fd8 <memset@plt>
   13aa4:	ldr	r3, [r5, #224]	; 0xe0
   13aa8:	str	r3, [r7, r6]
   13aac:	ldr	r0, [r5, #228]	; 0xe4
   13ab0:	add	r4, r4, r0
   13ab4:	add	r0, r0, #4
   13ab8:	str	r4, [r5, #228]	; 0xe4
   13abc:	str	r0, [r5, #224]	; 0xe0
   13ac0:	add	sp, sp, #12
   13ac4:	pop	{r4, r5, r6, r7, pc}
   13ac8:	mov	r3, #7
   13acc:	ldr	r0, [r0, #40]	; 0x28
   13ad0:	add	r1, r5, #108	; 0x6c
   13ad4:	str	r3, [sp]
   13ad8:	mov	r3, #0
   13adc:	ldr	r7, [r5, #48]	; 0x30
   13ae0:	blx	r7
   13ae4:	cmp	r0, #0
   13ae8:	beq	13a8c <flatcc_builder_enter_user_frame@@Base+0x2c>
   13aec:	bl	12074 <__assert_fail@plt+0x78>

00013af0 <flatcc_builder_exit_user_frame@@Base>:
   13af0:	ldr	r3, [r0, #224]	; 0xe0
   13af4:	cmp	r3, #0
   13af8:	beq	13b1c <flatcc_builder_exit_user_frame@@Base+0x2c>
   13afc:	ldr	r2, [r0, #108]	; 0x6c
   13b00:	sub	r1, r3, #4
   13b04:	add	r3, r2, r3
   13b08:	str	r1, [r0, #228]	; 0xe4
   13b0c:	ldr	r3, [r3, #-4]
   13b10:	str	r3, [r0, #224]	; 0xe0
   13b14:	mov	r0, r3
   13b18:	bx	lr
   13b1c:	push	{r4, lr}
   13b20:	bl	1210c <__assert_fail@plt+0x110>

00013b24 <flatcc_builder_exit_user_frame_at@@Base>:
   13b24:	ldr	r3, [r0, #224]	; 0xe0
   13b28:	push	{r4, lr}
   13b2c:	cmp	r3, r1
   13b30:	bcc	13b60 <flatcc_builder_exit_user_frame_at@@Base+0x3c>
   13b34:	cmp	r1, #0
   13b38:	str	r1, [r0, #224]	; 0xe0
   13b3c:	beq	13b74 <flatcc_builder_exit_user_frame_at@@Base+0x50>
   13b40:	ldr	r3, [r0, #108]	; 0x6c
   13b44:	sub	r2, r1, #4
   13b48:	add	r1, r3, r1
   13b4c:	str	r2, [r0, #228]	; 0xe4
   13b50:	ldr	r3, [r1, #-4]
   13b54:	str	r3, [r0, #224]	; 0xe0
   13b58:	mov	r0, r3
   13b5c:	pop	{r4, pc}
   13b60:	ldr	r3, [pc, #16]	; 13b78 <flatcc_builder_exit_user_frame_at@@Base+0x54>
   13b64:	ldr	r2, [pc, #16]	; 13b7c <flatcc_builder_exit_user_frame_at@@Base+0x58>
   13b68:	ldr	r1, [pc, #16]	; 13b80 <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   13b6c:	ldr	r0, [pc, #16]	; 13b84 <flatcc_builder_exit_user_frame_at@@Base+0x60>
   13b70:	bl	11ffc <__assert_fail@plt>
   13b74:	bl	1210c <__assert_fail@plt+0x110>
   13b78:	andeq	r9, r1, ip, lsl #14
   13b7c:	andeq	r0, r0, r7, lsr #4
   13b80:	andeq	r9, r1, r8, lsl #23
   13b84:	andeq	r9, r1, r0, ror ip

00013b88 <flatcc_builder_get_current_user_frame@@Base>:
   13b88:	ldr	r0, [r0, #224]	; 0xe0
   13b8c:	bx	lr

00013b90 <flatcc_builder_get_user_frame_ptr@@Base>:
   13b90:	ldr	r0, [r0, #108]	; 0x6c
   13b94:	add	r0, r0, r1
   13b98:	bx	lr

00013b9c <flatcc_builder_embed_buffer@@Base>:
   13b9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ba0:	sub	sp, sp, #92	; 0x5c
   13ba4:	cmp	r1, #0
   13ba8:	ldr	r6, [sp, #132]	; 0x84
   13bac:	mov	r8, r2
   13bb0:	mov	r5, r0
   13bb4:	mov	r7, r3
   13bb8:	ldr	r2, [r0, #152]	; 0x98
   13bbc:	and	r6, r6, #2
   13bc0:	ldrh	r4, [sp, #128]	; 0x80
   13bc4:	bne	13bd4 <flatcc_builder_embed_buffer@@Base+0x38>
   13bc8:	ldrh	r1, [r0, #132]	; 0x84
   13bcc:	cmp	r1, #0
   13bd0:	beq	13d5c <flatcc_builder_embed_buffer@@Base+0x1c0>
   13bd4:	cmp	r4, #4
   13bd8:	movcc	r4, #4
   13bdc:	cmp	r1, r4
   13be0:	movcs	r4, r1
   13be4:	cmp	r2, #0
   13be8:	bne	13c50 <flatcc_builder_embed_buffer@@Base+0xb4>
   13bec:	ldr	r9, [r5, #140]	; 0x8c
   13bf0:	sub	r1, r1, #1
   13bf4:	ands	r1, r1, r9
   13bf8:	beq	13c50 <flatcc_builder_embed_buffer@@Base+0xb4>
   13bfc:	add	r3, r9, r1
   13c00:	ldr	sl, [pc, #420]	; 13dac <flatcc_builder_embed_buffer@@Base+0x210>
   13c04:	mov	r2, #1
   13c08:	cmp	r9, r3
   13c0c:	str	r1, [sp, #16]
   13c10:	str	r1, [sp, #28]
   13c14:	str	sl, [sp, #24]
   13c18:	str	r3, [r5, #140]	; 0x8c
   13c1c:	str	r2, [sp, #20]
   13c20:	bgt	13d80 <flatcc_builder_embed_buffer@@Base+0x1e4>
   13c24:	ldr	r0, [r5, #36]	; 0x24
   13c28:	mov	r3, r9
   13c2c:	str	r1, [sp]
   13c30:	add	r1, sp, #24
   13c34:	ldr	fp, [r5, #44]	; 0x2c
   13c38:	blx	fp
   13c3c:	cmp	r0, #0
   13c40:	bne	13d84 <flatcc_builder_embed_buffer@@Base+0x1e8>
   13c44:	cmn	r9, #1
   13c48:	beq	13d98 <flatcc_builder_embed_buffer@@Base+0x1fc>
   13c4c:	ldr	r2, [r5, #152]	; 0x98
   13c50:	ldr	r1, [r5, #136]	; 0x88
   13c54:	cmp	r6, #0
   13c58:	movne	r6, #4
   13c5c:	moveq	r6, #0
   13c60:	sub	r3, r1, r7
   13c64:	sub	r6, r3, r6
   13c68:	sub	r4, r4, #1
   13c6c:	and	r4, r4, r6
   13c70:	mov	r3, #0
   13c74:	add	r0, r7, r4
   13c78:	cmp	r2, #0
   13c7c:	str	r0, [sp, #12]
   13c80:	str	r3, [sp, #16]
   13c84:	str	r3, [sp, #20]
   13c88:	bne	13d34 <flatcc_builder_embed_buffer@@Base+0x198>
   13c8c:	mov	r3, r2
   13c90:	mov	ip, #2
   13c94:	mov	r0, #1
   13c98:	cmp	r7, #0
   13c9c:	beq	13cc8 <flatcc_builder_embed_buffer@@Base+0x12c>
   13ca0:	add	r2, r2, #1
   13ca4:	add	lr, sp, #88	; 0x58
   13ca8:	add	r2, lr, r2, lsl #3
   13cac:	add	r3, r3, r7
   13cb0:	str	r3, [sp, #16]
   13cb4:	str	r8, [r2, #-72]	; 0xffffffb8
   13cb8:	str	r7, [r2, #-68]	; 0xffffffbc
   13cbc:	mov	r2, r0
   13cc0:	str	r0, [sp, #20]
   13cc4:	mov	r0, ip
   13cc8:	cmp	r4, #0
   13ccc:	beq	13cf8 <flatcc_builder_embed_buffer@@Base+0x15c>
   13cd0:	add	r2, r2, #1
   13cd4:	add	ip, sp, #88	; 0x58
   13cd8:	add	ip, ip, r2, lsl #3
   13cdc:	ldr	lr, [pc, #200]	; 13dac <flatcc_builder_embed_buffer@@Base+0x210>
   13ce0:	mov	r2, r0
   13ce4:	add	r3, r3, r4
   13ce8:	str	r3, [sp, #16]
   13cec:	str	r4, [ip, #-68]	; 0xffffffbc
   13cf0:	str	lr, [ip, #-72]	; 0xffffffb8
   13cf4:	str	r0, [sp, #20]
   13cf8:	sub	r4, r1, r3
   13cfc:	cmp	r1, r4
   13d00:	ble	13d68 <flatcc_builder_embed_buffer@@Base+0x1cc>
   13d04:	ldr	r0, [r5, #36]	; 0x24
   13d08:	add	r1, sp, #24
   13d0c:	str	r3, [sp]
   13d10:	mov	r3, r4
   13d14:	ldr	r6, [r5, #44]	; 0x2c
   13d18:	blx	r6
   13d1c:	cmp	r0, #0
   13d20:	bne	13d6c <flatcc_builder_embed_buffer@@Base+0x1d0>
   13d24:	mov	r0, r4
   13d28:	str	r4, [r5, #136]	; 0x88
   13d2c:	add	sp, sp, #92	; 0x5c
   13d30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d34:	mov	r3, #4
   13d38:	add	r0, sp, #12
   13d3c:	mov	r2, #1
   13d40:	str	r0, [sp, #24]
   13d44:	str	r3, [sp, #16]
   13d48:	str	r3, [sp, #28]
   13d4c:	str	r2, [sp, #20]
   13d50:	mov	ip, #3
   13d54:	mov	r0, #2
   13d58:	b	13c98 <flatcc_builder_embed_buffer@@Base+0xfc>
   13d5c:	cmp	r4, #4
   13d60:	movcc	r4, #4
   13d64:	b	13c50 <flatcc_builder_embed_buffer@@Base+0xb4>
   13d68:	bl	120c0 <__assert_fail@plt+0xc4>
   13d6c:	ldr	r3, [pc, #60]	; 13db0 <flatcc_builder_embed_buffer@@Base+0x214>
   13d70:	ldr	r2, [pc, #60]	; 13db4 <flatcc_builder_embed_buffer@@Base+0x218>
   13d74:	ldr	r1, [pc, #60]	; 13db8 <flatcc_builder_embed_buffer@@Base+0x21c>
   13d78:	ldr	r0, [pc, #60]	; 13dbc <flatcc_builder_embed_buffer@@Base+0x220>
   13d7c:	bl	11ffc <__assert_fail@plt>
   13d80:	bl	12098 <__assert_fail@plt+0x9c>
   13d84:	ldr	r3, [pc, #52]	; 13dc0 <flatcc_builder_embed_buffer@@Base+0x224>
   13d88:	ldr	r2, [pc, #52]	; 13dc4 <flatcc_builder_embed_buffer@@Base+0x228>
   13d8c:	ldr	r1, [pc, #36]	; 13db8 <flatcc_builder_embed_buffer@@Base+0x21c>
   13d90:	ldr	r0, [pc, #36]	; 13dbc <flatcc_builder_embed_buffer@@Base+0x220>
   13d94:	bl	11ffc <__assert_fail@plt>
   13d98:	add	r3, sl, #608	; 0x260
   13d9c:	ldr	r2, [pc, #36]	; 13dc8 <flatcc_builder_embed_buffer@@Base+0x22c>
   13da0:	ldr	r1, [pc, #16]	; 13db8 <flatcc_builder_embed_buffer@@Base+0x21c>
   13da4:	ldr	r0, [pc, #16]	; 13dbc <flatcc_builder_embed_buffer@@Base+0x220>
   13da8:	bl	11ffc <__assert_fail@plt>
   13dac:	ldrdeq	r9, [r1], -r0
   13db0:	andeq	r9, r1, r4, asr r4
   13db4:	andeq	r0, r0, fp, lsl #5
   13db8:	andeq	r9, r1, r8, lsl #23
   13dbc:	andeq	r9, r1, r8, asr #24
   13dc0:	andeq	r9, r1, r8, asr #8
   13dc4:	andeq	r0, r0, r5, lsr #5
   13dc8:			; <UNDEFINED> instruction: 0x000002be

00013dcc <flatcc_builder_create_buffer@@Base>:
   13dcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dd0:	sub	sp, sp, #100	; 0x64
   13dd4:	mov	ip, #0
   13dd8:	ldr	r5, [sp, #140]	; 0x8c
   13ddc:	cmp	r2, #0
   13de0:	mov	r6, r0
   13de4:	mov	r8, r1
   13de8:	mov	sl, r3
   13dec:	and	r7, r5, #1
   13df0:	str	ip, [sp, #20]
   13df4:	ldrh	r4, [sp, #136]	; 0x88
   13df8:	bne	13e08 <flatcc_builder_create_buffer@@Base+0x3c>
   13dfc:	ldrh	r2, [r0, #132]	; 0x84
   13e00:	cmp	r2, ip
   13e04:	beq	14014 <flatcc_builder_create_buffer@@Base+0x248>
   13e08:	cmp	r4, #4
   13e0c:	movcc	r4, #4
   13e10:	cmp	r2, r4
   13e14:	movcs	r4, r2
   13e18:	cmp	r7, #0
   13e1c:	bne	13e80 <flatcc_builder_create_buffer@@Base+0xb4>
   13e20:	ldr	r9, [r6, #140]	; 0x8c
   13e24:	sub	r2, r2, #1
   13e28:	ands	r3, r2, r9
   13e2c:	beq	13e80 <flatcc_builder_create_buffer@@Base+0xb4>
   13e30:	add	r1, r9, r3
   13e34:	ldr	fp, [pc, #584]	; 14084 <flatcc_builder_create_buffer@@Base+0x2b8>
   13e38:	mov	r2, #1
   13e3c:	cmp	r9, r1
   13e40:	str	r3, [sp, #24]
   13e44:	str	r3, [sp, #36]	; 0x24
   13e48:	str	fp, [sp, #32]
   13e4c:	str	r1, [r6, #140]	; 0x8c
   13e50:	str	r2, [sp, #28]
   13e54:	bgt	1406c <flatcc_builder_create_buffer@@Base+0x2a0>
   13e58:	ldr	r0, [r6, #36]	; 0x24
   13e5c:	add	r1, sp, #32
   13e60:	str	r3, [sp]
   13e64:	mov	r3, r9
   13e68:	ldr	ip, [r6, #44]	; 0x2c
   13e6c:	blx	ip
   13e70:	cmp	r0, #0
   13e74:	bne	14070 <flatcc_builder_create_buffer@@Base+0x2a4>
   13e78:	cmn	r9, #1
   13e7c:	beq	1402c <flatcc_builder_create_buffer@@Base+0x260>
   13e80:	ldrh	r3, [r6, #128]	; 0x80
   13e84:	ldr	r0, [r6, #136]	; 0x88
   13e88:	uxtb	lr, r7
   13e8c:	cmp	r3, r4
   13e90:	strhcc	r4, [r6, #128]	; 0x80
   13e94:	cmp	r8, #0
   13e98:	ldreq	r1, [sp, #20]
   13e9c:	ldrne	r1, [r8]
   13ea0:	ldrne	r3, [r8]
   13ea4:	strne	r3, [sp, #20]
   13ea8:	cmp	r1, #0
   13eac:	movne	r1, #4
   13eb0:	moveq	r1, #0
   13eb4:	ands	r5, r5, #2
   13eb8:	bne	13fdc <flatcc_builder_create_buffer@@Base+0x210>
   13ebc:	sub	r3, r4, #1
   13ec0:	sub	r4, r0, #4
   13ec4:	cmp	lr, #0
   13ec8:	sub	r4, r4, r1
   13ecc:	and	r4, r4, r3
   13ed0:	moveq	r8, #3
   13ed4:	moveq	ip, #2
   13ed8:	moveq	r2, #1
   13edc:	moveq	r3, #4
   13ee0:	bne	13fec <flatcc_builder_create_buffer@@Base+0x220>
   13ee4:	add	r5, r5, #1
   13ee8:	add	r9, sp, #96	; 0x60
   13eec:	add	r5, r9, r5, lsl #3
   13ef0:	add	fp, sp, #12
   13ef4:	mov	r9, #4
   13ef8:	cmp	r1, #0
   13efc:	str	r3, [sp, #24]
   13f00:	str	fp, [r5, #-72]	; 0xffffffb8
   13f04:	str	r9, [r5, #-68]	; 0xffffffbc
   13f08:	str	r2, [sp, #28]
   13f0c:	beq	13f3c <flatcc_builder_create_buffer@@Base+0x170>
   13f10:	add	r2, r2, #1
   13f14:	add	r5, sp, #96	; 0x60
   13f18:	add	r2, r5, r2, lsl #3
   13f1c:	add	r3, r3, r1
   13f20:	add	r5, sp, #20
   13f24:	str	r3, [sp, #24]
   13f28:	str	r1, [r2, #-68]	; 0xffffffbc
   13f2c:	str	r5, [r2, #-72]	; 0xffffffb8
   13f30:	mov	r2, ip
   13f34:	str	ip, [sp, #28]
   13f38:	mov	ip, r8
   13f3c:	cmp	r4, #0
   13f40:	beq	13f6c <flatcc_builder_create_buffer@@Base+0x1a0>
   13f44:	add	r2, r2, #1
   13f48:	add	r1, sp, #96	; 0x60
   13f4c:	add	r1, r1, r2, lsl #3
   13f50:	ldr	r5, [pc, #300]	; 14084 <flatcc_builder_create_buffer@@Base+0x2b8>
   13f54:	mov	r2, ip
   13f58:	add	r3, r3, r4
   13f5c:	str	r3, [sp, #24]
   13f60:	str	r4, [r1, #-68]	; 0xffffffbc
   13f64:	str	r5, [r1, #-72]	; 0xffffffb8
   13f68:	str	ip, [sp, #28]
   13f6c:	sub	r4, r0, r3
   13f70:	cmp	lr, #0
   13f74:	mov	r1, r4
   13f78:	beq	14020 <flatcc_builder_create_buffer@@Base+0x254>
   13f7c:	cmp	r7, #0
   13f80:	add	r1, r4, #4
   13f84:	beq	14020 <flatcc_builder_create_buffer@@Base+0x254>
   13f88:	ldr	ip, [r6, #144]	; 0x90
   13f8c:	sub	ip, ip, r1
   13f90:	sub	sl, sl, r1
   13f94:	cmp	r4, r0
   13f98:	str	sl, [sp, #12]
   13f9c:	str	ip, [sp, #16]
   13fa0:	bge	14040 <flatcc_builder_create_buffer@@Base+0x274>
   13fa4:	ldr	r0, [r6, #36]	; 0x24
   13fa8:	add	r1, sp, #32
   13fac:	str	r3, [sp]
   13fb0:	mov	r3, r4
   13fb4:	ldr	r5, [r6, #44]	; 0x2c
   13fb8:	blx	r5
   13fbc:	cmp	r0, #0
   13fc0:	bne	14044 <flatcc_builder_create_buffer@@Base+0x278>
   13fc4:	cmp	r4, #0
   13fc8:	str	r4, [r6, #136]	; 0x88
   13fcc:	beq	14058 <flatcc_builder_create_buffer@@Base+0x28c>
   13fd0:	mov	r0, r4
   13fd4:	add	sp, sp, #100	; 0x64
   13fd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fdc:	sub	r3, r0, #8
   13fe0:	sub	r4, r4, #1
   13fe4:	sub	r3, r3, r1
   13fe8:	and	r4, r4, r3
   13fec:	add	r3, sp, #16
   13ff0:	mov	r8, #4
   13ff4:	mov	r5, #1
   13ff8:	str	r3, [sp, #32]
   13ffc:	str	r8, [sp, #36]	; 0x24
   14000:	mov	lr, r5
   14004:	mov	ip, #3
   14008:	mov	r2, #2
   1400c:	mov	r3, #8
   14010:	b	13ee4 <flatcc_builder_create_buffer@@Base+0x118>
   14014:	cmp	r4, #4
   14018:	movcc	r4, #4
   1401c:	b	13e80 <flatcc_builder_create_buffer@@Base+0xb4>
   14020:	ldr	ip, [r6, #140]	; 0x8c
   14024:	sub	ip, ip, r1
   14028:	b	13f90 <flatcc_builder_create_buffer@@Base+0x1c4>
   1402c:	add	r3, fp, #608	; 0x260
   14030:	ldr	r2, [pc, #80]	; 14088 <flatcc_builder_create_buffer@@Base+0x2bc>
   14034:	ldr	r1, [pc, #80]	; 1408c <flatcc_builder_create_buffer@@Base+0x2c0>
   14038:	ldr	r0, [pc, #80]	; 14090 <flatcc_builder_create_buffer@@Base+0x2c4>
   1403c:	bl	11ffc <__assert_fail@plt>
   14040:	bl	120c0 <__assert_fail@plt+0xc4>
   14044:	ldr	r3, [pc, #72]	; 14094 <flatcc_builder_create_buffer@@Base+0x2c8>
   14048:	ldr	r2, [pc, #72]	; 14098 <flatcc_builder_create_buffer@@Base+0x2cc>
   1404c:	ldr	r1, [pc, #56]	; 1408c <flatcc_builder_create_buffer@@Base+0x2c0>
   14050:	ldr	r0, [pc, #56]	; 14090 <flatcc_builder_create_buffer@@Base+0x2c4>
   14054:	bl	11ffc <__assert_fail@plt>
   14058:	ldr	r3, [pc, #60]	; 1409c <flatcc_builder_create_buffer@@Base+0x2d0>
   1405c:	mov	r2, #772	; 0x304
   14060:	ldr	r1, [pc, #36]	; 1408c <flatcc_builder_create_buffer@@Base+0x2c0>
   14064:	ldr	r0, [pc, #36]	; 14090 <flatcc_builder_create_buffer@@Base+0x2c4>
   14068:	bl	11ffc <__assert_fail@plt>
   1406c:	bl	12098 <__assert_fail@plt+0x9c>
   14070:	ldr	r3, [pc, #40]	; 140a0 <flatcc_builder_create_buffer@@Base+0x2d4>
   14074:	ldr	r2, [pc, #40]	; 140a4 <flatcc_builder_create_buffer@@Base+0x2d8>
   14078:	ldr	r1, [pc, #12]	; 1408c <flatcc_builder_create_buffer@@Base+0x2c0>
   1407c:	ldr	r0, [pc, #12]	; 14090 <flatcc_builder_create_buffer@@Base+0x2c4>
   14080:	bl	11ffc <__assert_fail@plt>
   14084:	ldrdeq	r9, [r1], -r0
   14088:			; <UNDEFINED> instruction: 0x000002be
   1408c:	andeq	r9, r1, r8, lsl #23
   14090:	andeq	r9, r1, r8, asr #24
   14094:	andeq	r9, r1, r4, asr r4
   14098:	andeq	r0, r0, fp, lsl #5
   1409c:	andeq	r9, r1, r0, asr #14
   140a0:	andeq	r9, r1, r8, asr #8
   140a4:	andeq	r0, r0, r5, lsr #5

000140a8 <flatcc_builder_create_struct@@Base>:
   140a8:	cmp	r3, #0
   140ac:	push	{r4, r5, r6, lr}
   140b0:	sub	sp, sp, #80	; 0x50
   140b4:	beq	141a0 <flatcc_builder_create_struct@@Base+0xf8>
   140b8:	mov	ip, r2
   140bc:	ldrh	r2, [r0, #128]	; 0x80
   140c0:	mov	r5, r0
   140c4:	cmp	r2, r3
   140c8:	strhcc	r3, [r0, #128]	; 0x80
   140cc:	ldr	r0, [r0, #136]	; 0x88
   140d0:	mov	r2, #0
   140d4:	sub	r3, r3, #1
   140d8:	sub	r4, r0, ip
   140dc:	cmp	ip, #0
   140e0:	and	r3, r3, r4
   140e4:	str	r2, [sp, #8]
   140e8:	str	r2, [sp, #12]
   140ec:	bne	14160 <flatcc_builder_create_struct@@Base+0xb8>
   140f0:	cmp	r3, #0
   140f4:	movne	r2, #1
   140f8:	movne	r1, ip
   140fc:	beq	14188 <flatcc_builder_create_struct@@Base+0xe0>
   14100:	add	r1, r1, #1
   14104:	add	r4, sp, #80	; 0x50
   14108:	add	ip, ip, r3
   1410c:	add	r1, r4, r1, lsl #3
   14110:	ldr	lr, [pc, #156]	; 141b4 <flatcc_builder_create_struct@@Base+0x10c>
   14114:	sub	r4, r0, ip
   14118:	str	r3, [r1, #-68]	; 0xffffffbc
   1411c:	str	ip, [sp, #8]
   14120:	str	r2, [sp, #12]
   14124:	str	lr, [r1, #-72]	; 0xffffffb8
   14128:	cmp	r0, r4
   1412c:	ble	14188 <flatcc_builder_create_struct@@Base+0xe0>
   14130:	ldr	r0, [r5, #36]	; 0x24
   14134:	mov	r3, r4
   14138:	str	ip, [sp]
   1413c:	add	r1, sp, #16
   14140:	ldr	r6, [r5, #44]	; 0x2c
   14144:	blx	r6
   14148:	cmp	r0, #0
   1414c:	bne	1418c <flatcc_builder_create_struct@@Base+0xe4>
   14150:	mov	r0, r4
   14154:	str	r4, [r5, #136]	; 0x88
   14158:	add	sp, sp, #80	; 0x50
   1415c:	pop	{r4, r5, r6, pc}
   14160:	cmp	r3, r2
   14164:	mov	r2, #1
   14168:	str	r1, [sp, #16]
   1416c:	str	r2, [sp, #12]
   14170:	movne	r1, r2
   14174:	str	ip, [sp, #8]
   14178:	str	ip, [sp, #20]
   1417c:	movne	r2, #2
   14180:	beq	14128 <flatcc_builder_create_struct@@Base+0x80>
   14184:	b	14100 <flatcc_builder_create_struct@@Base+0x58>
   14188:	bl	120c0 <__assert_fail@plt+0xc4>
   1418c:	ldr	r3, [pc, #36]	; 141b8 <flatcc_builder_create_struct@@Base+0x110>
   14190:	ldr	r2, [pc, #36]	; 141bc <flatcc_builder_create_struct@@Base+0x114>
   14194:	ldr	r1, [pc, #36]	; 141c0 <flatcc_builder_create_struct@@Base+0x118>
   14198:	ldr	r0, [pc, #36]	; 141c4 <flatcc_builder_create_struct@@Base+0x11c>
   1419c:	bl	11ffc <__assert_fail@plt>
   141a0:	ldr	r3, [pc, #32]	; 141c8 <flatcc_builder_create_struct@@Base+0x120>
   141a4:	ldr	r2, [pc, #32]	; 141cc <flatcc_builder_create_struct@@Base+0x124>
   141a8:	ldr	r1, [pc, #16]	; 141c0 <flatcc_builder_create_struct@@Base+0x118>
   141ac:	ldr	r0, [pc, #28]	; 141d0 <flatcc_builder_create_struct@@Base+0x128>
   141b0:	bl	11ffc <__assert_fail@plt>
   141b4:	ldrdeq	r9, [r1], -r0
   141b8:	andeq	r9, r1, r4, asr r4
   141bc:	andeq	r0, r0, fp, lsl #5
   141c0:	andeq	r9, r1, r8, lsl #23
   141c4:	andeq	r9, r1, r8, asr #24
   141c8:	andeq	r9, r1, r0, ror #14
   141cc:	andeq	r0, r0, pc, lsl #6
   141d0:	muleq	r1, r0, ip

000141d4 <flatcc_builder_start_buffer@@Base>:
   141d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   141d8:	mov	r4, r0
   141dc:	ldr	r0, [r0, #156]	; 0x9c
   141e0:	ldr	ip, [r4, #160]	; 0xa0
   141e4:	mov	r5, r1
   141e8:	add	r1, r0, #1
   141ec:	cmp	r1, ip
   141f0:	sub	sp, sp, #8
   141f4:	mov	r7, r2
   141f8:	mov	r6, r3
   141fc:	str	r1, [r4, #156]	; 0x9c
   14200:	ldrh	r8, [r4, #128]	; 0x80
   14204:	ble	14274 <flatcc_builder_start_buffer@@Base+0xa0>
   14208:	ldr	r3, [r4, #176]	; 0xb0
   1420c:	cmp	r3, #0
   14210:	cmpgt	r1, r3
   14214:	movgt	r3, #1
   14218:	movle	r3, #0
   1421c:	bgt	14350 <flatcc_builder_start_buffer@@Base+0x17c>
   14220:	add	r0, r0, r0, lsl #3
   14224:	ldr	r1, [r4, #88]	; 0x58
   14228:	lsl	r9, r0, #2
   1422c:	add	r2, r9, #36	; 0x24
   14230:	cmp	r2, r1
   14234:	bhi	1432c <flatcc_builder_start_buffer@@Base+0x158>
   14238:	ldr	r3, [r4, #84]	; 0x54
   1423c:	add	r3, r3, r9
   14240:	cmp	r3, #0
   14244:	str	r3, [r4, #32]
   14248:	beq	14350 <flatcc_builder_start_buffer@@Base+0x17c>
   1424c:	ldr	r2, [r4, #88]	; 0x58
   14250:	ldr	r0, [pc, #256]	; 14358 <flatcc_builder_start_buffer@@Base+0x184>
   14254:	ldr	r1, [r4, #176]	; 0xb0
   14258:	umull	r0, r2, r0, r2
   1425c:	lsr	r2, r2, #3
   14260:	cmp	r1, #0
   14264:	cmpgt	r2, r1
   14268:	str	r2, [r4, #160]	; 0xa0
   1426c:	strgt	r1, [r4, #160]	; 0xa0
   14270:	b	14280 <flatcc_builder_start_buffer@@Base+0xac>
   14274:	ldr	r3, [r4, #32]
   14278:	add	r3, r3, #36	; 0x24
   1427c:	str	r3, [r4, #32]
   14280:	ldr	r0, [r4, #20]
   14284:	ldr	r1, [r4, #28]
   14288:	ldrh	lr, [r4, #130]	; 0x82
   1428c:	ldrh	ip, [r4, #132]	; 0x84
   14290:	add	r2, r0, r1
   14294:	add	r2, r2, #7
   14298:	str	r0, [r3, #8]
   1429c:	strh	lr, [r3, #12]
   142a0:	bic	r2, r2, #7
   142a4:	strh	r8, [r4, #130]	; 0x82
   142a8:	mvn	lr, #3
   142ac:	str	r1, [r3]
   142b0:	mov	r0, #0
   142b4:	mov	r1, #1
   142b8:	str	lr, [r3, #4]
   142bc:	str	r2, [r4, #28]
   142c0:	str	r0, [r4, #20]
   142c4:	strh	r1, [r4, #128]	; 0x80
   142c8:	strh	ip, [r3, #34]	; 0x22
   142cc:	ldrh	r2, [r4, #164]	; 0xa4
   142d0:	strh	r7, [r4, #132]	; 0x84
   142d4:	ldr	ip, [pc, #128]	; 1435c <flatcc_builder_start_buffer@@Base+0x188>
   142d8:	strh	r2, [r3, #32]
   142dc:	ldr	r2, [r4, #144]	; 0x90
   142e0:	strh	r6, [r4, #164]	; 0xa4
   142e4:	str	r2, [r3, #20]
   142e8:	ldr	r2, [r4, #152]	; 0x98
   142ec:	cmp	r5, r0
   142f0:	str	r2, [r3, #28]
   142f4:	ldr	r2, [r4, #148]	; 0x94
   142f8:	ldr	lr, [r4, #136]	; 0x88
   142fc:	moveq	r5, ip
   14300:	ldr	ip, [r4, #168]	; 0xa8
   14304:	add	r6, r2, r1
   14308:	str	r2, [r4, #152]	; 0x98
   1430c:	str	r6, [r4, #148]	; 0x94
   14310:	str	lr, [r4, #144]	; 0x90
   14314:	str	ip, [r3, #16]
   14318:	ldr	r2, [r5]
   1431c:	str	r2, [r4, #168]	; 0xa8
   14320:	strh	r1, [r3, #14]
   14324:	add	sp, sp, #8
   14328:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1432c:	mov	r1, #4
   14330:	ldr	r0, [r4, #40]	; 0x28
   14334:	str	r1, [sp]
   14338:	add	r1, r4, #84	; 0x54
   1433c:	ldr	sl, [r4, #48]	; 0x30
   14340:	blx	sl
   14344:	cmp	r0, #0
   14348:	beq	14238 <flatcc_builder_start_buffer@@Base+0x64>
   1434c:	bl	12074 <__assert_fail@plt+0x78>
   14350:	mvn	r0, #0
   14354:	b	14324 <flatcc_builder_start_buffer@@Base+0x150>
   14358:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   1435c:	ldrdeq	r9, [r1], -r0

00014360 <flatcc_builder_end_buffer@@Base>:
   14360:	ldr	r3, [r0, #32]
   14364:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14368:	sub	sp, sp, #100	; 0x64
   1436c:	ldrh	r5, [r0, #164]	; 0xa4
   14370:	ldrh	r3, [r3, #14]
   14374:	ldr	r2, [r0, #152]	; 0x98
   14378:	and	r5, r5, #2
   1437c:	cmp	r2, #0
   14380:	orrne	r5, r5, #1
   14384:	cmp	r3, #1
   14388:	bne	14674 <flatcc_builder_end_buffer@@Base+0x314>
   1438c:	ldrh	r3, [r0, #132]	; 0x84
   14390:	ldrh	r2, [r0, #128]	; 0x80
   14394:	mov	r9, r1
   14398:	mov	r1, #0
   1439c:	cmp	r3, r2
   143a0:	movhi	r2, r3
   143a4:	strhhi	r3, [r0, #128]	; 0x80
   143a8:	cmp	r3, #0
   143ac:	mov	r4, r0
   143b0:	str	r1, [sp, #20]
   143b4:	and	r7, r5, #1
   143b8:	beq	14620 <flatcc_builder_end_buffer@@Base+0x2c0>
   143bc:	cmp	r3, #4
   143c0:	movcc	r6, #4
   143c4:	movcs	r6, r3
   143c8:	cmp	r6, r2
   143cc:	movcc	r6, r2
   143d0:	cmp	r7, r1
   143d4:	bne	1443c <flatcc_builder_end_buffer@@Base+0xdc>
   143d8:	ldr	r8, [r0, #140]	; 0x8c
   143dc:	sub	r3, r3, #1
   143e0:	ands	r3, r3, r8
   143e4:	beq	1443c <flatcc_builder_end_buffer@@Base+0xdc>
   143e8:	add	r1, r8, r3
   143ec:	ldr	sl, [pc, #748]	; 146e0 <flatcc_builder_end_buffer@@Base+0x380>
   143f0:	mov	r2, #1
   143f4:	cmp	r8, r1
   143f8:	str	r3, [sp, #24]
   143fc:	str	r3, [sp, #36]	; 0x24
   14400:	str	sl, [sp, #32]
   14404:	str	r1, [r0, #140]	; 0x8c
   14408:	str	r2, [sp, #28]
   1440c:	bgt	146c8 <flatcc_builder_end_buffer@@Base+0x368>
   14410:	ldr	r0, [r0, #36]	; 0x24
   14414:	add	r1, sp, #32
   14418:	str	r3, [sp]
   1441c:	mov	r3, r8
   14420:	ldr	fp, [r4, #44]	; 0x2c
   14424:	blx	fp
   14428:	cmp	r0, #0
   1442c:	bne	146cc <flatcc_builder_end_buffer@@Base+0x36c>
   14430:	cmn	r8, #1
   14434:	beq	146b4 <flatcc_builder_end_buffer@@Base+0x354>
   14438:	ldrh	r2, [r4, #128]	; 0x80
   1443c:	ldr	r3, [r4, #168]	; 0xa8
   14440:	cmp	r2, r6
   14444:	strhcc	r6, [r4, #128]	; 0x80
   14448:	cmp	r3, #0
   1444c:	movne	r1, #4
   14450:	moveq	r1, #0
   14454:	ands	r5, r5, #2
   14458:	uxtb	ip, r7
   1445c:	str	r3, [sp, #20]
   14460:	ldr	r0, [r4, #136]	; 0x88
   14464:	bne	14630 <flatcc_builder_end_buffer@@Base+0x2d0>
   14468:	sub	r3, r6, #1
   1446c:	sub	r6, r0, #4
   14470:	cmp	ip, #0
   14474:	sub	r6, r6, r1
   14478:	and	r6, r6, r3
   1447c:	moveq	r8, #3
   14480:	moveq	lr, #2
   14484:	moveq	r2, #1
   14488:	moveq	r3, #4
   1448c:	bne	14640 <flatcc_builder_end_buffer@@Base+0x2e0>
   14490:	add	r5, r5, #1
   14494:	add	sl, sp, #96	; 0x60
   14498:	add	r5, sl, r5, lsl #3
   1449c:	add	fp, sp, #12
   144a0:	mov	sl, #4
   144a4:	cmp	r1, #0
   144a8:	str	r3, [sp, #24]
   144ac:	str	fp, [r5, #-72]	; 0xffffffb8
   144b0:	str	sl, [r5, #-68]	; 0xffffffbc
   144b4:	str	r2, [sp, #28]
   144b8:	beq	144e8 <flatcc_builder_end_buffer@@Base+0x188>
   144bc:	add	r2, r2, #1
   144c0:	add	r5, sp, #96	; 0x60
   144c4:	add	r2, r5, r2, lsl #3
   144c8:	add	r3, r3, r1
   144cc:	add	r5, sp, #20
   144d0:	str	r3, [sp, #24]
   144d4:	str	r1, [r2, #-68]	; 0xffffffbc
   144d8:	str	r5, [r2, #-72]	; 0xffffffb8
   144dc:	mov	r2, lr
   144e0:	str	lr, [sp, #28]
   144e4:	mov	lr, r8
   144e8:	cmp	r6, #0
   144ec:	beq	14518 <flatcc_builder_end_buffer@@Base+0x1b8>
   144f0:	add	r2, r2, #1
   144f4:	add	r1, sp, #96	; 0x60
   144f8:	add	r1, r1, r2, lsl #3
   144fc:	ldr	r5, [pc, #476]	; 146e0 <flatcc_builder_end_buffer@@Base+0x380>
   14500:	mov	r2, lr
   14504:	add	r3, r3, r6
   14508:	str	r3, [sp, #24]
   1450c:	str	r6, [r1, #-68]	; 0xffffffbc
   14510:	str	r5, [r1, #-72]	; 0xffffffb8
   14514:	str	lr, [sp, #28]
   14518:	sub	r5, r0, r3
   1451c:	cmp	ip, #0
   14520:	mov	r1, r5
   14524:	beq	14668 <flatcc_builder_end_buffer@@Base+0x308>
   14528:	cmp	r7, #0
   1452c:	add	r1, r5, #4
   14530:	beq	14668 <flatcc_builder_end_buffer@@Base+0x308>
   14534:	ldr	ip, [r4, #144]	; 0x90
   14538:	sub	ip, ip, r1
   1453c:	sub	r9, r9, r1
   14540:	cmp	r5, r0
   14544:	str	r9, [sp, #12]
   14548:	str	ip, [sp, #16]
   1454c:	bge	14688 <flatcc_builder_end_buffer@@Base+0x328>
   14550:	ldr	r0, [r4, #36]	; 0x24
   14554:	add	r1, sp, #32
   14558:	str	r3, [sp]
   1455c:	mov	r3, r5
   14560:	ldr	r6, [r4, #44]	; 0x2c
   14564:	blx	r6
   14568:	subs	r1, r0, #0
   1456c:	bne	1468c <flatcc_builder_end_buffer@@Base+0x32c>
   14570:	cmp	r5, #0
   14574:	str	r5, [r4, #136]	; 0x88
   14578:	beq	146a0 <flatcc_builder_end_buffer@@Base+0x340>
   1457c:	ldr	r3, [r4, #32]
   14580:	ldr	r2, [r4, #20]
   14584:	ldr	r0, [r4, #16]
   14588:	ldr	ip, [r3, #20]
   1458c:	str	ip, [r4, #144]	; 0x90
   14590:	ldr	ip, [r3, #28]
   14594:	str	ip, [r4, #152]	; 0x98
   14598:	ldr	ip, [r3, #16]
   1459c:	str	ip, [r4, #168]	; 0xa8
   145a0:	ldrh	r3, [r3, #32]
   145a4:	strh	r3, [r4, #164]	; 0xa4
   145a8:	bl	11fd8 <memset@plt>
   145ac:	ldr	r3, [r4, #32]
   145b0:	ldr	r2, [r4, #64]	; 0x40
   145b4:	ldrh	lr, [r4, #130]	; 0x82
   145b8:	ldr	ip, [r3]
   145bc:	ldr	r1, [r3, #4]
   145c0:	ldrh	r0, [r4, #128]	; 0x80
   145c4:	sub	r2, r2, ip
   145c8:	cmp	r2, r1
   145cc:	movcs	r2, r1
   145d0:	cmp	r0, lr
   145d4:	ldr	r0, [r4, #60]	; 0x3c
   145d8:	ldr	r6, [r3, #8]
   145dc:	str	r2, [r4, #24]
   145e0:	add	r2, r0, ip
   145e4:	str	r2, [r4, #16]
   145e8:	str	r6, [r4, #20]
   145ec:	ldr	r2, [r4, #156]	; 0x9c
   145f0:	str	ip, [r4, #28]
   145f4:	str	r1, [r3, #4]
   145f8:	strhcc	lr, [r4, #128]	; 0x80
   145fc:	ldrh	r1, [r3, #12]
   14600:	sub	r2, r2, #1
   14604:	sub	r3, r3, #36	; 0x24
   14608:	mov	r0, r5
   1460c:	str	r2, [r4, #156]	; 0x9c
   14610:	strh	r1, [r4, #130]	; 0x82
   14614:	str	r3, [r4, #32]
   14618:	add	sp, sp, #100	; 0x64
   1461c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14620:	cmp	r2, #4
   14624:	movcs	r6, r2
   14628:	movcc	r6, #4
   1462c:	b	1443c <flatcc_builder_end_buffer@@Base+0xdc>
   14630:	sub	r3, r0, #8
   14634:	sub	r6, r6, #1
   14638:	sub	r3, r3, r1
   1463c:	and	r6, r6, r3
   14640:	add	r3, sp, #16
   14644:	mov	r8, #4
   14648:	mov	r5, #1
   1464c:	str	r3, [sp, #32]
   14650:	str	r8, [sp, #36]	; 0x24
   14654:	mov	ip, r5
   14658:	mov	lr, #3
   1465c:	mov	r2, #2
   14660:	mov	r3, #8
   14664:	b	14490 <flatcc_builder_end_buffer@@Base+0x130>
   14668:	ldr	ip, [r4, #140]	; 0x8c
   1466c:	sub	ip, ip, r1
   14670:	b	1453c <flatcc_builder_end_buffer@@Base+0x1dc>
   14674:	ldr	r3, [pc, #104]	; 146e4 <flatcc_builder_end_buffer@@Base+0x384>
   14678:	ldr	r2, [pc, #104]	; 146e8 <flatcc_builder_end_buffer@@Base+0x388>
   1467c:	ldr	r1, [pc, #104]	; 146ec <flatcc_builder_end_buffer@@Base+0x38c>
   14680:	ldr	r0, [pc, #104]	; 146f0 <flatcc_builder_end_buffer@@Base+0x390>
   14684:	bl	11ffc <__assert_fail@plt>
   14688:	bl	120c0 <__assert_fail@plt+0xc4>
   1468c:	ldr	r3, [pc, #96]	; 146f4 <flatcc_builder_end_buffer@@Base+0x394>
   14690:	ldr	r2, [pc, #96]	; 146f8 <flatcc_builder_end_buffer@@Base+0x398>
   14694:	ldr	r1, [pc, #80]	; 146ec <flatcc_builder_end_buffer@@Base+0x38c>
   14698:	ldr	r0, [pc, #92]	; 146fc <flatcc_builder_end_buffer@@Base+0x39c>
   1469c:	bl	11ffc <__assert_fail@plt>
   146a0:	ldr	r3, [pc, #88]	; 14700 <flatcc_builder_end_buffer@@Base+0x3a0>
   146a4:	mov	r2, #772	; 0x304
   146a8:	ldr	r1, [pc, #60]	; 146ec <flatcc_builder_end_buffer@@Base+0x38c>
   146ac:	ldr	r0, [pc, #72]	; 146fc <flatcc_builder_end_buffer@@Base+0x39c>
   146b0:	bl	11ffc <__assert_fail@plt>
   146b4:	add	r3, sl, #608	; 0x260
   146b8:	ldr	r2, [pc, #68]	; 14704 <flatcc_builder_end_buffer@@Base+0x3a4>
   146bc:	ldr	r1, [pc, #40]	; 146ec <flatcc_builder_end_buffer@@Base+0x38c>
   146c0:	ldr	r0, [pc, #52]	; 146fc <flatcc_builder_end_buffer@@Base+0x39c>
   146c4:	bl	11ffc <__assert_fail@plt>
   146c8:	bl	12098 <__assert_fail@plt+0x9c>
   146cc:	ldr	r3, [pc, #52]	; 14708 <flatcc_builder_end_buffer@@Base+0x3a8>
   146d0:	ldr	r2, [pc, #52]	; 1470c <flatcc_builder_end_buffer@@Base+0x3ac>
   146d4:	ldr	r1, [pc, #16]	; 146ec <flatcc_builder_end_buffer@@Base+0x38c>
   146d8:	ldr	r0, [pc, #28]	; 146fc <flatcc_builder_end_buffer@@Base+0x39c>
   146dc:	bl	11ffc <__assert_fail@plt>
   146e0:	ldrdeq	r9, [r1], -r0
   146e4:	andeq	r9, r1, r0, lsl #15
   146e8:	andeq	r0, r0, r6, asr #6
   146ec:	andeq	r9, r1, r8, lsl #23
   146f0:	muleq	r1, ip, ip
   146f4:	andeq	r9, r1, r4, asr r4
   146f8:	andeq	r0, r0, fp, lsl #5
   146fc:	andeq	r9, r1, r8, asr #24
   14700:	andeq	r9, r1, r0, asr #14
   14704:			; <UNDEFINED> instruction: 0x000002be
   14708:	andeq	r9, r1, r8, asr #8
   1470c:	andeq	r0, r0, r5, lsr #5

00014710 <flatcc_builder_start_struct@@Base>:
   14710:	push	{r4, r5, r6, r7, r8, lr}
   14714:	mov	r4, r0
   14718:	ldr	r0, [r0, #156]	; 0x9c
   1471c:	ldr	r3, [r4, #160]	; 0xa0
   14720:	mov	r6, r1
   14724:	add	r1, r0, #1
   14728:	cmp	r1, r3
   1472c:	sub	sp, sp, #8
   14730:	mov	r5, r2
   14734:	str	r1, [r4, #156]	; 0x9c
   14738:	ble	147a8 <flatcc_builder_start_struct@@Base+0x98>
   1473c:	ldr	r3, [r4, #176]	; 0xb0
   14740:	cmp	r3, #0
   14744:	cmpgt	r1, r3
   14748:	movgt	r3, #1
   1474c:	movle	r3, #0
   14750:	bgt	148b8 <flatcc_builder_start_struct@@Base+0x1a8>
   14754:	add	r0, r0, r0, lsl #3
   14758:	ldr	r1, [r4, #88]	; 0x58
   1475c:	lsl	r7, r0, #2
   14760:	add	r2, r7, #36	; 0x24
   14764:	cmp	r2, r1
   14768:	bhi	14894 <flatcc_builder_start_struct@@Base+0x184>
   1476c:	ldr	r3, [r4, #84]	; 0x54
   14770:	add	r3, r3, r7
   14774:	cmp	r3, #0
   14778:	str	r3, [r4, #32]
   1477c:	beq	148b8 <flatcc_builder_start_struct@@Base+0x1a8>
   14780:	ldr	r2, [r4, #88]	; 0x58
   14784:	ldr	r0, [pc, #308]	; 148c0 <flatcc_builder_start_struct@@Base+0x1b0>
   14788:	ldr	r1, [r4, #176]	; 0xb0
   1478c:	umull	r0, r2, r0, r2
   14790:	lsr	r2, r2, #3
   14794:	cmp	r1, #0
   14798:	cmpgt	r2, r1
   1479c:	str	r2, [r4, #160]	; 0xa0
   147a0:	strgt	r1, [r4, #160]	; 0xa0
   147a4:	b	147b4 <flatcc_builder_start_struct@@Base+0xa4>
   147a8:	ldr	r3, [r4, #32]
   147ac:	add	r3, r3, #36	; 0x24
   147b0:	str	r3, [r4, #32]
   147b4:	ldr	lr, [r4, #20]
   147b8:	ldr	ip, [r4, #28]
   147bc:	ldr	r1, [r4, #64]	; 0x40
   147c0:	add	r2, lr, ip
   147c4:	add	r2, r2, #7
   147c8:	ldrh	r7, [r4, #130]	; 0x82
   147cc:	bic	r2, r2, #7
   147d0:	sub	r1, r1, r2
   147d4:	ldr	r0, [r4, #60]	; 0x3c
   147d8:	cmn	r1, #4
   147dc:	str	lr, [r3, #8]
   147e0:	mvn	lr, #3
   147e4:	strh	r7, [r3, #12]
   147e8:	movhi	r1, lr
   147ec:	strh	r5, [r4, #130]	; 0x82
   147f0:	str	ip, [r3]
   147f4:	mov	r5, #0
   147f8:	mov	ip, #2
   147fc:	str	lr, [r3, #4]
   14800:	add	r0, r0, r2
   14804:	str	r5, [r4, #20]
   14808:	str	r2, [r4, #28]
   1480c:	mvn	r5, #3
   14810:	strh	ip, [r3, #14]
   14814:	strls	r1, [r4, #24]
   14818:	strhi	lr, [r4, #24]
   1481c:	cmp	r6, r1
   14820:	str	r0, [r4, #16]
   14824:	str	r5, [r3, #4]
   14828:	str	r6, [r4, #20]
   1482c:	bcs	14838 <flatcc_builder_start_struct@@Base+0x128>
   14830:	add	sp, sp, #8
   14834:	pop	{r4, r5, r6, r7, r8, pc}
   14838:	add	r6, r6, #1
   1483c:	mov	r3, #1
   14840:	ldr	r0, [r4, #40]	; 0x28
   14844:	add	r2, r6, r2
   14848:	str	r3, [sp]
   1484c:	add	r1, r4, #60	; 0x3c
   14850:	ldr	r6, [r4, #48]	; 0x30
   14854:	blx	r6
   14858:	cmp	r0, #0
   1485c:	bne	148b8 <flatcc_builder_start_struct@@Base+0x1a8>
   14860:	ldr	r2, [r4, #28]
   14864:	ldr	r3, [r4, #64]	; 0x40
   14868:	ldr	r0, [r4, #60]	; 0x3c
   1486c:	sub	r3, r3, r2
   14870:	ldr	r1, [r4, #32]
   14874:	cmp	r3, r5
   14878:	add	r0, r0, r2
   1487c:	movhi	r3, r5
   14880:	str	r3, [r4, #24]
   14884:	str	r0, [r4, #16]
   14888:	str	r5, [r1, #4]
   1488c:	add	sp, sp, #8
   14890:	pop	{r4, r5, r6, r7, r8, pc}
   14894:	mov	r1, #4
   14898:	ldr	r0, [r4, #40]	; 0x28
   1489c:	str	r1, [sp]
   148a0:	add	r1, r4, #84	; 0x54
   148a4:	ldr	r8, [r4, #48]	; 0x30
   148a8:	blx	r8
   148ac:	cmp	r0, #0
   148b0:	beq	1476c <flatcc_builder_start_struct@@Base+0x5c>
   148b4:	bl	12074 <__assert_fail@plt+0x78>
   148b8:	mov	r0, #0
   148bc:	b	14830 <flatcc_builder_start_struct@@Base+0x120>
   148c0:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

000148c4 <flatcc_builder_struct_edit@@Base>:
   148c4:	ldr	r0, [r0, #16]
   148c8:	bx	lr

000148cc <flatcc_builder_end_struct@@Base>:
   148cc:	ldr	r3, [r0, #32]
   148d0:	push	{r4, r5, r6, lr}
   148d4:	sub	sp, sp, #80	; 0x50
   148d8:	ldrh	r3, [r3, #14]
   148dc:	cmp	r3, #2
   148e0:	bne	14a6c <flatcc_builder_end_struct@@Base+0x1a0>
   148e4:	ldrh	r3, [r0, #130]	; 0x82
   148e8:	mov	r4, r0
   148ec:	ldr	r0, [r0, #16]
   148f0:	cmp	r3, #0
   148f4:	ldr	r1, [r4, #20]
   148f8:	beq	14a58 <flatcc_builder_end_struct@@Base+0x18c>
   148fc:	ldrh	r2, [r4, #128]	; 0x80
   14900:	ldr	ip, [r4, #136]	; 0x88
   14904:	cmp	r2, r3
   14908:	strhcc	r3, [r4, #128]	; 0x80
   1490c:	mov	r2, #0
   14910:	sub	r3, r3, #1
   14914:	sub	r5, ip, r1
   14918:	cmp	r1, #0
   1491c:	and	r3, r3, r5
   14920:	str	r2, [sp, #8]
   14924:	str	r2, [sp, #12]
   14928:	bne	14a18 <flatcc_builder_end_struct@@Base+0x14c>
   1492c:	cmp	r3, #0
   14930:	movne	r2, #1
   14934:	movne	r0, r1
   14938:	beq	14a40 <flatcc_builder_end_struct@@Base+0x174>
   1493c:	add	r0, r0, #1
   14940:	add	r5, sp, #80	; 0x50
   14944:	add	r1, r1, r3
   14948:	add	r0, r5, r0, lsl #3
   1494c:	ldr	lr, [pc, #300]	; 14a80 <flatcc_builder_end_struct@@Base+0x1b4>
   14950:	sub	r5, ip, r1
   14954:	str	r3, [r0, #-68]	; 0xffffffbc
   14958:	str	r1, [sp, #8]
   1495c:	str	r2, [sp, #12]
   14960:	str	lr, [r0, #-72]	; 0xffffffb8
   14964:	cmp	ip, r5
   14968:	ble	14a40 <flatcc_builder_end_struct@@Base+0x174>
   1496c:	ldr	r0, [r4, #36]	; 0x24
   14970:	mov	r3, r5
   14974:	str	r1, [sp]
   14978:	add	r1, sp, #16
   1497c:	ldr	r6, [r4, #44]	; 0x2c
   14980:	blx	r6
   14984:	subs	r1, r0, #0
   14988:	bne	14a44 <flatcc_builder_end_struct@@Base+0x178>
   1498c:	cmp	r5, #0
   14990:	str	r5, [r4, #136]	; 0x88
   14994:	beq	14a0c <flatcc_builder_end_struct@@Base+0x140>
   14998:	ldr	r2, [r4, #20]
   1499c:	ldr	r0, [r4, #16]
   149a0:	bl	11fd8 <memset@plt>
   149a4:	ldr	r3, [r4, #32]
   149a8:	ldr	r2, [r4, #64]	; 0x40
   149ac:	ldrh	lr, [r4, #130]	; 0x82
   149b0:	ldr	ip, [r3]
   149b4:	ldr	r1, [r3, #4]
   149b8:	ldrh	r0, [r4, #128]	; 0x80
   149bc:	sub	r2, r2, ip
   149c0:	cmp	r2, r1
   149c4:	movcs	r2, r1
   149c8:	cmp	r0, lr
   149cc:	ldr	r0, [r4, #60]	; 0x3c
   149d0:	ldr	r6, [r3, #8]
   149d4:	str	r2, [r4, #24]
   149d8:	add	r2, r0, ip
   149dc:	str	r2, [r4, #16]
   149e0:	str	r6, [r4, #20]
   149e4:	ldr	r2, [r4, #156]	; 0x9c
   149e8:	str	ip, [r4, #28]
   149ec:	str	r1, [r3, #4]
   149f0:	strhcc	lr, [r4, #128]	; 0x80
   149f4:	ldrh	r1, [r3, #12]
   149f8:	sub	r2, r2, #1
   149fc:	sub	r3, r3, #36	; 0x24
   14a00:	str	r2, [r4, #156]	; 0x9c
   14a04:	strh	r1, [r4, #130]	; 0x82
   14a08:	str	r3, [r4, #32]
   14a0c:	mov	r0, r5
   14a10:	add	sp, sp, #80	; 0x50
   14a14:	pop	{r4, r5, r6, pc}
   14a18:	cmp	r3, r2
   14a1c:	mov	r2, #1
   14a20:	str	r0, [sp, #16]
   14a24:	str	r2, [sp, #12]
   14a28:	movne	r0, r2
   14a2c:	str	r1, [sp, #8]
   14a30:	str	r1, [sp, #20]
   14a34:	movne	r2, #2
   14a38:	beq	14964 <flatcc_builder_end_struct@@Base+0x98>
   14a3c:	b	1493c <flatcc_builder_end_struct@@Base+0x70>
   14a40:	bl	120c0 <__assert_fail@plt+0xc4>
   14a44:	ldr	r3, [pc, #56]	; 14a84 <flatcc_builder_end_struct@@Base+0x1b8>
   14a48:	ldr	r2, [pc, #56]	; 14a88 <flatcc_builder_end_struct@@Base+0x1bc>
   14a4c:	ldr	r1, [pc, #56]	; 14a8c <flatcc_builder_end_struct@@Base+0x1c0>
   14a50:	ldr	r0, [pc, #56]	; 14a90 <flatcc_builder_end_struct@@Base+0x1c4>
   14a54:	bl	11ffc <__assert_fail@plt>
   14a58:	ldr	r3, [pc, #52]	; 14a94 <flatcc_builder_end_struct@@Base+0x1c8>
   14a5c:	ldr	r2, [pc, #52]	; 14a98 <flatcc_builder_end_struct@@Base+0x1cc>
   14a60:	ldr	r1, [pc, #36]	; 14a8c <flatcc_builder_end_struct@@Base+0x1c0>
   14a64:	ldr	r0, [pc, #48]	; 14a9c <flatcc_builder_end_struct@@Base+0x1d0>
   14a68:	bl	11ffc <__assert_fail@plt>
   14a6c:	ldr	r3, [pc, #44]	; 14aa0 <flatcc_builder_end_struct@@Base+0x1d4>
   14a70:	mov	r2, #872	; 0x368
   14a74:	ldr	r1, [pc, #16]	; 14a8c <flatcc_builder_end_struct@@Base+0x1c0>
   14a78:	ldr	r0, [pc, #36]	; 14aa4 <flatcc_builder_end_struct@@Base+0x1d8>
   14a7c:	bl	11ffc <__assert_fail@plt>
   14a80:	ldrdeq	r9, [r1], -r0
   14a84:	andeq	r9, r1, r4, asr r4
   14a88:	andeq	r0, r0, fp, lsl #5
   14a8c:	andeq	r9, r1, r8, lsl #23
   14a90:	andeq	r9, r1, r8, asr #24
   14a94:	andeq	r9, r1, r0, ror #14
   14a98:	andeq	r0, r0, pc, lsl #6
   14a9c:	muleq	r1, r0, ip
   14aa0:	muleq	r1, ip, r7
   14aa4:	andeq	r9, r1, r8, asr #25

00014aa8 <flatcc_builder_extend_vector@@Base>:
   14aa8:	ldr	r3, [r0, #32]
   14aac:	push	{r4, r5, r6, r7, lr}
   14ab0:	mov	r5, r0
   14ab4:	ldr	r0, [r3, #20]
   14ab8:	ldr	r4, [r3, #24]
   14abc:	add	ip, r1, r0
   14ac0:	cmp	r0, ip
   14ac4:	movls	r0, #0
   14ac8:	movhi	r0, #1
   14acc:	cmp	r4, ip
   14ad0:	movcs	r4, r0
   14ad4:	orrcc	r4, r0, #1
   14ad8:	cmp	r4, #0
   14adc:	sub	sp, sp, #12
   14ae0:	bne	14b7c <flatcc_builder_extend_vector@@Base+0xd4>
   14ae4:	ldr	r2, [r3, #16]
   14ae8:	str	ip, [r3, #20]
   14aec:	ldr	r6, [r5, #20]
   14af0:	ldr	r3, [r5, #24]
   14af4:	mla	r1, r2, r1, r6
   14af8:	cmp	r1, r3
   14afc:	str	r1, [r5, #20]
   14b00:	bcs	14b14 <flatcc_builder_extend_vector@@Base+0x6c>
   14b04:	ldr	r0, [r5, #16]
   14b08:	add	r0, r0, r6
   14b0c:	add	sp, sp, #12
   14b10:	pop	{r4, r5, r6, r7, pc}
   14b14:	ldr	r2, [r5, #28]
   14b18:	mov	r3, #1
   14b1c:	add	r2, r2, #1
   14b20:	ldr	r0, [r5, #40]	; 0x28
   14b24:	add	r2, r2, r1
   14b28:	str	r3, [sp]
   14b2c:	add	r1, r5, #60	; 0x3c
   14b30:	ldr	r7, [r5, #48]	; 0x30
   14b34:	blx	r7
   14b38:	cmp	r0, #0
   14b3c:	bne	14b74 <flatcc_builder_extend_vector@@Base+0xcc>
   14b40:	ldr	r2, [r5, #28]
   14b44:	ldr	r3, [r5, #64]	; 0x40
   14b48:	ldr	r0, [r5, #60]	; 0x3c
   14b4c:	sub	r3, r3, r2
   14b50:	cmn	r3, #4
   14b54:	mvnhi	r3, #3
   14b58:	str	r3, [r5, #24]
   14b5c:	ldr	r3, [r5, #32]
   14b60:	add	r0, r0, r2
   14b64:	mvn	r2, #3
   14b68:	str	r0, [r5, #16]
   14b6c:	str	r2, [r3, #4]
   14b70:	b	14b08 <flatcc_builder_extend_vector@@Base+0x60>
   14b74:	mov	r0, r4
   14b78:	b	14b0c <flatcc_builder_extend_vector@@Base+0x64>
   14b7c:	bl	120e8 <__assert_fail@plt+0xec>

00014b80 <flatcc_builder_vector_push@@Base>:
   14b80:	ldr	r3, [r0, #32]
   14b84:	push	{r4, r5, r6, r7, r8, lr}
   14b88:	sub	sp, sp, #8
   14b8c:	ldrh	r2, [r3, #14]
   14b90:	cmp	r2, #4
   14b94:	bne	14c7c <flatcc_builder_vector_push@@Base+0xfc>
   14b98:	mov	r5, r1
   14b9c:	ldr	r2, [r3, #20]
   14ba0:	ldr	r1, [r3, #24]
   14ba4:	cmp	r2, r1
   14ba8:	bhi	14c68 <flatcc_builder_vector_push@@Base+0xe8>
   14bac:	add	r2, r2, #1
   14bb0:	str	r2, [r3, #20]
   14bb4:	ldr	r7, [r3, #16]
   14bb8:	ldr	r6, [r0, #20]
   14bbc:	ldr	r3, [r0, #24]
   14bc0:	add	r1, r7, r6
   14bc4:	cmp	r1, r3
   14bc8:	mov	r4, r0
   14bcc:	str	r1, [r0, #20]
   14bd0:	bcs	14c00 <flatcc_builder_vector_push@@Base+0x80>
   14bd4:	ldr	r3, [r0, #16]
   14bd8:	adds	r3, r3, r6
   14bdc:	beq	14bf4 <flatcc_builder_vector_push@@Base+0x74>
   14be0:	mov	r0, r3
   14be4:	mov	r2, r7
   14be8:	mov	r1, r5
   14bec:	bl	11f6c <memcpy@plt>
   14bf0:	mov	r3, r0
   14bf4:	mov	r0, r3
   14bf8:	add	sp, sp, #8
   14bfc:	pop	{r4, r5, r6, r7, r8, pc}
   14c00:	ldr	r2, [r0, #28]
   14c04:	mov	r3, #1
   14c08:	add	r2, r2, #1
   14c0c:	ldr	r0, [r0, #40]	; 0x28
   14c10:	add	r2, r2, r1
   14c14:	str	r3, [sp]
   14c18:	add	r1, r4, #60	; 0x3c
   14c1c:	ldr	r8, [r4, #48]	; 0x30
   14c20:	blx	r8
   14c24:	cmp	r0, #0
   14c28:	bne	14c60 <flatcc_builder_vector_push@@Base+0xe0>
   14c2c:	ldr	r1, [r4, #28]
   14c30:	ldr	r2, [r4, #64]	; 0x40
   14c34:	ldr	r3, [r4, #60]	; 0x3c
   14c38:	sub	r2, r2, r1
   14c3c:	cmn	r2, #4
   14c40:	mvnhi	r2, #3
   14c44:	str	r2, [r4, #24]
   14c48:	ldr	r2, [r4, #32]
   14c4c:	add	r3, r3, r1
   14c50:	mvn	r1, #3
   14c54:	str	r3, [r4, #16]
   14c58:	str	r1, [r2, #4]
   14c5c:	b	14bd8 <flatcc_builder_vector_push@@Base+0x58>
   14c60:	mov	r3, #0
   14c64:	b	14bf4 <flatcc_builder_vector_push@@Base+0x74>
   14c68:	ldr	r3, [pc, #32]	; 14c90 <flatcc_builder_vector_push@@Base+0x110>
   14c6c:	mov	r2, #908	; 0x38c
   14c70:	ldr	r1, [pc, #28]	; 14c94 <flatcc_builder_vector_push@@Base+0x114>
   14c74:	ldr	r0, [pc, #28]	; 14c98 <flatcc_builder_vector_push@@Base+0x118>
   14c78:	bl	11ffc <__assert_fail@plt>
   14c7c:	ldr	r3, [pc, #12]	; 14c90 <flatcc_builder_vector_push@@Base+0x110>
   14c80:	ldr	r2, [pc, #20]	; 14c9c <flatcc_builder_vector_push@@Base+0x11c>
   14c84:	ldr	r1, [pc, #8]	; 14c94 <flatcc_builder_vector_push@@Base+0x114>
   14c88:	ldr	r0, [pc, #16]	; 14ca0 <flatcc_builder_vector_push@@Base+0x120>
   14c8c:	bl	11ffc <__assert_fail@plt>
   14c90:			; <UNDEFINED> instruction: 0x000197b8
   14c94:	andeq	r9, r1, r8, lsl #23
   14c98:	andeq	r9, r1, r0, lsr #26
   14c9c:	andeq	r0, r0, fp, lsl #7
   14ca0:	strdeq	r9, [r1], -r4

00014ca4 <flatcc_builder_append_vector@@Base>:
   14ca4:	push	{r4, r5, r6, r7, r8, r9, lr}
   14ca8:	mov	r5, r1
   14cac:	ldr	r1, [r0, #32]
   14cb0:	sub	sp, sp, #12
   14cb4:	ldrh	r3, [r1, #14]
   14cb8:	cmp	r3, #4
   14cbc:	bne	14dac <flatcc_builder_append_vector@@Base+0x108>
   14cc0:	ldr	r3, [r1, #20]
   14cc4:	mov	r6, r0
   14cc8:	add	r0, r2, r3
   14ccc:	cmp	r3, r0
   14cd0:	ldr	r4, [r1, #24]
   14cd4:	movls	r3, #0
   14cd8:	movhi	r3, #1
   14cdc:	cmp	r4, r0
   14ce0:	movcs	r4, r3
   14ce4:	orrcc	r4, r3, #1
   14ce8:	cmp	r4, #0
   14cec:	bne	14da8 <flatcc_builder_append_vector@@Base+0x104>
   14cf0:	ldr	r7, [r1, #16]
   14cf4:	str	r0, [r1, #20]
   14cf8:	ldr	r8, [r6, #20]
   14cfc:	mul	r7, r7, r2
   14d00:	ldr	r3, [r6, #24]
   14d04:	add	r1, r7, r8
   14d08:	cmp	r1, r3
   14d0c:	str	r1, [r6, #20]
   14d10:	bcs	14d40 <flatcc_builder_append_vector@@Base+0x9c>
   14d14:	ldr	r3, [r6, #16]
   14d18:	adds	r3, r3, r8
   14d1c:	beq	14d34 <flatcc_builder_append_vector@@Base+0x90>
   14d20:	mov	r0, r3
   14d24:	mov	r2, r7
   14d28:	mov	r1, r5
   14d2c:	bl	11f6c <memcpy@plt>
   14d30:	mov	r3, r0
   14d34:	mov	r0, r3
   14d38:	add	sp, sp, #12
   14d3c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14d40:	ldr	r2, [r6, #28]
   14d44:	mov	r3, #1
   14d48:	add	r2, r2, #1
   14d4c:	ldr	r0, [r6, #40]	; 0x28
   14d50:	add	r2, r2, r1
   14d54:	str	r3, [sp]
   14d58:	add	r1, r6, #60	; 0x3c
   14d5c:	ldr	r9, [r6, #48]	; 0x30
   14d60:	blx	r9
   14d64:	cmp	r0, #0
   14d68:	bne	14da0 <flatcc_builder_append_vector@@Base+0xfc>
   14d6c:	ldr	r1, [r6, #28]
   14d70:	ldr	r2, [r6, #64]	; 0x40
   14d74:	ldr	r3, [r6, #60]	; 0x3c
   14d78:	sub	r2, r2, r1
   14d7c:	cmn	r2, #4
   14d80:	mvnhi	r2, #3
   14d84:	str	r2, [r6, #24]
   14d88:	ldr	r2, [r6, #32]
   14d8c:	add	r3, r3, r1
   14d90:	mvn	r1, #3
   14d94:	str	r3, [r6, #16]
   14d98:	str	r1, [r2, #4]
   14d9c:	b	14d18 <flatcc_builder_append_vector@@Base+0x74>
   14da0:	mov	r3, r4
   14da4:	b	14d34 <flatcc_builder_append_vector@@Base+0x90>
   14da8:	bl	120e8 <__assert_fail@plt+0xec>
   14dac:	ldr	r3, [pc, #12]	; 14dc0 <flatcc_builder_append_vector@@Base+0x11c>
   14db0:	ldr	r2, [pc, #12]	; 14dc4 <flatcc_builder_append_vector@@Base+0x120>
   14db4:	ldr	r1, [pc, #12]	; 14dc8 <flatcc_builder_append_vector@@Base+0x124>
   14db8:	ldr	r0, [pc, #12]	; 14dcc <flatcc_builder_append_vector@@Base+0x128>
   14dbc:	bl	11ffc <__assert_fail@plt>
   14dc0:	ldrdeq	r9, [r1], -r4
   14dc4:	muleq	r0, r3, r3
   14dc8:	andeq	r9, r1, r8, lsl #23
   14dcc:	strdeq	r9, [r1], -r4

00014dd0 <flatcc_builder_extend_offset_vector@@Base>:
   14dd0:	ldr	ip, [r0, #32]
   14dd4:	push	{r4, r5, r6, r7, lr}
   14dd8:	mov	r4, r0
   14ddc:	ldr	r3, [ip, #20]
   14de0:	sub	sp, sp, #12
   14de4:	adds	r3, r1, r3
   14de8:	movcs	r2, #1
   14dec:	movcc	r2, #0
   14df0:	cmn	r3, #-1073741823	; 0xc0000001
   14df4:	movls	r0, #0
   14df8:	movhi	r0, #1
   14dfc:	orrs	r5, r2, r0
   14e00:	bne	14e98 <flatcc_builder_extend_offset_vector@@Base+0xc8>
   14e04:	str	r3, [ip, #20]
   14e08:	ldr	r6, [r4, #20]
   14e0c:	ldr	r3, [r4, #24]
   14e10:	add	r1, r6, r1, lsl #2
   14e14:	cmp	r1, r3
   14e18:	str	r1, [r4, #20]
   14e1c:	bcs	14e30 <flatcc_builder_extend_offset_vector@@Base+0x60>
   14e20:	ldr	r0, [r4, #16]
   14e24:	add	r0, r0, r6
   14e28:	add	sp, sp, #12
   14e2c:	pop	{r4, r5, r6, r7, pc}
   14e30:	ldr	r2, [r4, #28]
   14e34:	mov	r3, #1
   14e38:	add	r2, r2, #1
   14e3c:	ldr	r0, [r4, #40]	; 0x28
   14e40:	add	r2, r2, r1
   14e44:	str	r3, [sp]
   14e48:	add	r1, r4, #60	; 0x3c
   14e4c:	ldr	r7, [r4, #48]	; 0x30
   14e50:	blx	r7
   14e54:	cmp	r0, #0
   14e58:	bne	14e90 <flatcc_builder_extend_offset_vector@@Base+0xc0>
   14e5c:	ldr	r2, [r4, #28]
   14e60:	ldr	r3, [r4, #64]	; 0x40
   14e64:	ldr	r0, [r4, #60]	; 0x3c
   14e68:	sub	r3, r3, r2
   14e6c:	cmn	r3, #4
   14e70:	mvnhi	r3, #3
   14e74:	str	r3, [r4, #24]
   14e78:	ldr	r3, [r4, #32]
   14e7c:	add	r0, r0, r2
   14e80:	mvn	r2, #3
   14e84:	str	r0, [r4, #16]
   14e88:	str	r2, [r3, #4]
   14e8c:	b	14e24 <flatcc_builder_extend_offset_vector@@Base+0x54>
   14e90:	mov	r0, r5
   14e94:	b	14e28 <flatcc_builder_extend_offset_vector@@Base+0x58>
   14e98:	bl	120e8 <__assert_fail@plt+0xec>

00014e9c <flatcc_builder_offset_vector_push@@Base>:
   14e9c:	ldr	r2, [r0, #32]
   14ea0:	push	{r4, r5, r6, r7, lr}
   14ea4:	sub	sp, sp, #12
   14ea8:	ldrh	r3, [r2, #14]
   14eac:	cmp	r3, #5
   14eb0:	bne	14f68 <flatcc_builder_offset_vector_push@@Base+0xcc>
   14eb4:	ldr	r3, [r2, #20]
   14eb8:	cmn	r3, #-1073741823	; 0xc0000001
   14ebc:	beq	14f5c <flatcc_builder_offset_vector_push@@Base+0xc0>
   14ec0:	add	r3, r3, #1
   14ec4:	str	r3, [r2, #20]
   14ec8:	ldr	r5, [r0, #20]
   14ecc:	ldr	r2, [r0, #24]
   14ed0:	add	r3, r5, #4
   14ed4:	cmp	r3, r2
   14ed8:	mov	r4, r0
   14edc:	mov	r6, r1
   14ee0:	str	r3, [r0, #20]
   14ee4:	bcs	14efc <flatcc_builder_offset_vector_push@@Base+0x60>
   14ee8:	ldr	r3, [r0, #16]
   14eec:	adds	r0, r3, r5
   14ef0:	strne	r6, [r3, r5]
   14ef4:	add	sp, sp, #12
   14ef8:	pop	{r4, r5, r6, r7, pc}
   14efc:	ldr	r2, [r0, #28]
   14f00:	mov	r3, #1
   14f04:	add	r2, r5, r2
   14f08:	ldr	r0, [r0, #40]	; 0x28
   14f0c:	add	r2, r2, #5
   14f10:	str	r3, [sp]
   14f14:	add	r1, r4, #60	; 0x3c
   14f18:	ldr	r7, [r4, #48]	; 0x30
   14f1c:	blx	r7
   14f20:	cmp	r0, #0
   14f24:	bne	14f5c <flatcc_builder_offset_vector_push@@Base+0xc0>
   14f28:	ldr	r1, [r4, #28]
   14f2c:	ldr	r2, [r4, #64]	; 0x40
   14f30:	ldr	r3, [r4, #60]	; 0x3c
   14f34:	sub	r2, r2, r1
   14f38:	cmn	r2, #4
   14f3c:	mvnhi	r2, #3
   14f40:	str	r2, [r4, #24]
   14f44:	ldr	r2, [r4, #32]
   14f48:	add	r3, r3, r1
   14f4c:	mvn	r1, #3
   14f50:	str	r3, [r4, #16]
   14f54:	str	r1, [r2, #4]
   14f58:	b	14eec <flatcc_builder_offset_vector_push@@Base+0x50>
   14f5c:	mov	r0, #0
   14f60:	add	sp, sp, #12
   14f64:	pop	{r4, r5, r6, r7, pc}
   14f68:	ldr	r3, [pc, #12]	; 14f7c <flatcc_builder_offset_vector_push@@Base+0xe0>
   14f6c:	ldr	r2, [pc, #12]	; 14f80 <flatcc_builder_offset_vector_push@@Base+0xe4>
   14f70:	ldr	r1, [pc, #12]	; 14f84 <flatcc_builder_offset_vector_push@@Base+0xe8>
   14f74:	ldr	r0, [pc, #12]	; 14f88 <flatcc_builder_offset_vector_push@@Base+0xec>
   14f78:	bl	11ffc <__assert_fail@plt>
   14f7c:	strdeq	r9, [r1], -r4
   14f80:	andeq	r0, r0, r6, lsr #7
   14f84:	andeq	r9, r1, r8, lsl #23
   14f88:	andeq	r9, r1, r0, ror #26

00014f8c <flatcc_builder_append_offset_vector@@Base>:
   14f8c:	push	{r4, r5, r6, r7, r8, r9, lr}
   14f90:	mov	r5, r0
   14f94:	ldr	r0, [r0, #32]
   14f98:	sub	sp, sp, #12
   14f9c:	ldrh	r3, [r0, #14]
   14fa0:	cmp	r3, #5
   14fa4:	bne	15088 <flatcc_builder_append_offset_vector@@Base+0xfc>
   14fa8:	mov	r7, r1
   14fac:	ldr	r1, [r0, #20]
   14fb0:	adds	r1, r2, r1
   14fb4:	movcs	r4, #1
   14fb8:	movcc	r4, #0
   14fbc:	cmn	r1, #-1073741823	; 0xc0000001
   14fc0:	movls	r3, #0
   14fc4:	movhi	r3, #1
   14fc8:	orrs	r4, r4, r3
   14fcc:	bne	15084 <flatcc_builder_append_offset_vector@@Base+0xf8>
   14fd0:	str	r1, [r0, #20]
   14fd4:	ldr	r8, [r5, #20]
   14fd8:	lsl	r6, r2, #2
   14fdc:	ldr	r3, [r5, #24]
   14fe0:	add	r1, r6, r8
   14fe4:	cmp	r1, r3
   14fe8:	str	r1, [r5, #20]
   14fec:	bcs	1501c <flatcc_builder_append_offset_vector@@Base+0x90>
   14ff0:	ldr	r3, [r5, #16]
   14ff4:	adds	r3, r3, r8
   14ff8:	beq	15010 <flatcc_builder_append_offset_vector@@Base+0x84>
   14ffc:	mov	r0, r3
   15000:	mov	r2, r6
   15004:	mov	r1, r7
   15008:	bl	11f6c <memcpy@plt>
   1500c:	mov	r3, r0
   15010:	mov	r0, r3
   15014:	add	sp, sp, #12
   15018:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1501c:	ldr	r2, [r5, #28]
   15020:	mov	r3, #1
   15024:	add	r2, r2, #1
   15028:	ldr	r0, [r5, #40]	; 0x28
   1502c:	add	r2, r2, r1
   15030:	str	r3, [sp]
   15034:	add	r1, r5, #60	; 0x3c
   15038:	ldr	r9, [r5, #48]	; 0x30
   1503c:	blx	r9
   15040:	cmp	r0, #0
   15044:	bne	1507c <flatcc_builder_append_offset_vector@@Base+0xf0>
   15048:	ldr	r1, [r5, #28]
   1504c:	ldr	r2, [r5, #64]	; 0x40
   15050:	ldr	r3, [r5, #60]	; 0x3c
   15054:	sub	r2, r2, r1
   15058:	cmn	r2, #4
   1505c:	mvnhi	r2, #3
   15060:	str	r2, [r5, #24]
   15064:	ldr	r2, [r5, #32]
   15068:	add	r3, r3, r1
   1506c:	mvn	r1, #3
   15070:	str	r3, [r5, #16]
   15074:	str	r1, [r2, #4]
   15078:	b	14ff4 <flatcc_builder_append_offset_vector@@Base+0x68>
   1507c:	mov	r3, r4
   15080:	b	15010 <flatcc_builder_append_offset_vector@@Base+0x84>
   15084:	bl	120e8 <__assert_fail@plt+0xec>
   15088:	ldr	r3, [pc, #12]	; 1509c <flatcc_builder_append_offset_vector@@Base+0x110>
   1508c:	mov	r2, #948	; 0x3b4
   15090:	ldr	r1, [pc, #8]	; 150a0 <flatcc_builder_append_offset_vector@@Base+0x114>
   15094:	ldr	r0, [pc, #8]	; 150a4 <flatcc_builder_append_offset_vector@@Base+0x118>
   15098:	bl	11ffc <__assert_fail@plt>
   1509c:	andeq	r9, r1, r8, lsl r8
   150a0:	andeq	r9, r1, r8, lsl #23
   150a4:	andeq	r9, r1, r0, ror #26

000150a8 <flatcc_builder_extend_string@@Base>:
   150a8:	ldr	r2, [r0, #32]
   150ac:	push	{r4, r5, r6, lr}
   150b0:	sub	sp, sp, #8
   150b4:	ldrh	r3, [r2, #14]
   150b8:	cmp	r3, #6
   150bc:	bne	15168 <flatcc_builder_extend_string@@Base+0xc0>
   150c0:	ldr	r3, [r2, #20]
   150c4:	adds	r3, r1, r3
   150c8:	bcs	15164 <flatcc_builder_extend_string@@Base+0xbc>
   150cc:	str	r3, [r2, #20]
   150d0:	ldr	r5, [r0, #20]
   150d4:	ldr	r3, [r0, #24]
   150d8:	add	r1, r1, r5
   150dc:	cmp	r1, r3
   150e0:	mov	r4, r0
   150e4:	str	r1, [r0, #20]
   150e8:	bcs	150fc <flatcc_builder_extend_string@@Base+0x54>
   150ec:	ldr	r0, [r0, #16]
   150f0:	add	r0, r0, r5
   150f4:	add	sp, sp, #8
   150f8:	pop	{r4, r5, r6, pc}
   150fc:	ldr	r2, [r0, #28]
   15100:	mov	r3, #1
   15104:	add	r2, r2, #1
   15108:	ldr	r0, [r0, #40]	; 0x28
   1510c:	add	r2, r2, r1
   15110:	str	r3, [sp]
   15114:	add	r1, r4, #60	; 0x3c
   15118:	ldr	r6, [r4, #48]	; 0x30
   1511c:	blx	r6
   15120:	cmp	r0, #0
   15124:	bne	1515c <flatcc_builder_extend_string@@Base+0xb4>
   15128:	ldr	r2, [r4, #28]
   1512c:	ldr	r3, [r4, #64]	; 0x40
   15130:	ldr	r0, [r4, #60]	; 0x3c
   15134:	sub	r3, r3, r2
   15138:	cmn	r3, #4
   1513c:	mvnhi	r3, #3
   15140:	str	r3, [r4, #24]
   15144:	ldr	r3, [r4, #32]
   15148:	add	r0, r0, r2
   1514c:	mvn	r2, #3
   15150:	str	r0, [r4, #16]
   15154:	str	r2, [r3, #4]
   15158:	b	150f0 <flatcc_builder_extend_string@@Base+0x48>
   1515c:	mov	r0, #0
   15160:	b	150f4 <flatcc_builder_extend_string@@Base+0x4c>
   15164:	bl	120e8 <__assert_fail@plt+0xec>
   15168:	ldr	r3, [pc, #12]	; 1517c <flatcc_builder_extend_string@@Base+0xd4>
   1516c:	ldr	r2, [pc, #12]	; 15180 <flatcc_builder_extend_string@@Base+0xd8>
   15170:	ldr	r1, [pc, #12]	; 15184 <flatcc_builder_extend_string@@Base+0xdc>
   15174:	ldr	r0, [pc, #12]	; 15188 <flatcc_builder_extend_string@@Base+0xe0>
   15178:	bl	11ffc <__assert_fail@plt>
   1517c:	andeq	r9, r1, ip, lsr r8
   15180:			; <UNDEFINED> instruction: 0x000003bd
   15184:	andeq	r9, r1, r8, lsl #23
   15188:	andeq	r9, r1, r8, lsl #24

0001518c <flatcc_builder_append_string@@Base>:
   1518c:	push	{r4, r5, r6, r7, r8, lr}
   15190:	mov	r6, r1
   15194:	ldr	r1, [r0, #32]
   15198:	sub	sp, sp, #8
   1519c:	ldrh	r3, [r1, #14]
   151a0:	cmp	r3, #6
   151a4:	bne	15270 <flatcc_builder_append_string@@Base+0xe4>
   151a8:	ldr	r3, [r1, #20]
   151ac:	mov	r5, r2
   151b0:	adds	r3, r2, r3
   151b4:	bcs	1526c <flatcc_builder_append_string@@Base+0xe0>
   151b8:	str	r3, [r1, #20]
   151bc:	ldr	r7, [r0, #20]
   151c0:	ldr	r3, [r0, #24]
   151c4:	add	r1, r2, r7
   151c8:	cmp	r1, r3
   151cc:	mov	r4, r0
   151d0:	str	r1, [r0, #20]
   151d4:	bcs	15204 <flatcc_builder_append_string@@Base+0x78>
   151d8:	ldr	r3, [r0, #16]
   151dc:	adds	r3, r3, r7
   151e0:	beq	151f8 <flatcc_builder_append_string@@Base+0x6c>
   151e4:	mov	r0, r3
   151e8:	mov	r2, r5
   151ec:	mov	r1, r6
   151f0:	bl	11f6c <memcpy@plt>
   151f4:	mov	r3, r0
   151f8:	mov	r0, r3
   151fc:	add	sp, sp, #8
   15200:	pop	{r4, r5, r6, r7, r8, pc}
   15204:	ldr	r2, [r0, #28]
   15208:	mov	r3, #1
   1520c:	add	r2, r2, #1
   15210:	ldr	r0, [r0, #40]	; 0x28
   15214:	add	r2, r2, r1
   15218:	str	r3, [sp]
   1521c:	add	r1, r4, #60	; 0x3c
   15220:	ldr	r8, [r4, #48]	; 0x30
   15224:	blx	r8
   15228:	cmp	r0, #0
   1522c:	bne	15264 <flatcc_builder_append_string@@Base+0xd8>
   15230:	ldr	r1, [r4, #28]
   15234:	ldr	r2, [r4, #64]	; 0x40
   15238:	ldr	r3, [r4, #60]	; 0x3c
   1523c:	sub	r2, r2, r1
   15240:	cmn	r2, #4
   15244:	mvnhi	r2, #3
   15248:	str	r2, [r4, #24]
   1524c:	ldr	r2, [r4, #32]
   15250:	add	r3, r3, r1
   15254:	mvn	r1, #3
   15258:	str	r3, [r4, #16]
   1525c:	str	r1, [r2, #4]
   15260:	b	151dc <flatcc_builder_append_string@@Base+0x50>
   15264:	mov	r3, #0
   15268:	b	151f8 <flatcc_builder_append_string@@Base+0x6c>
   1526c:	bl	120e8 <__assert_fail@plt+0xec>
   15270:	bl	12134 <__assert_fail@plt+0x138>

00015274 <flatcc_builder_append_string_str@@Base>:
   15274:	push	{r4, r5, r6, r7, r8, lr}
   15278:	mov	r4, r0
   1527c:	sub	sp, sp, #8
   15280:	mov	r0, r1
   15284:	mov	r6, r1
   15288:	bl	11fc0 <strlen@plt>
   1528c:	ldr	r2, [r4, #32]
   15290:	ldrh	r3, [r2, #14]
   15294:	cmp	r3, #6
   15298:	bne	15360 <flatcc_builder_append_string_str@@Base+0xec>
   1529c:	ldr	r3, [r2, #20]
   152a0:	mov	r5, r0
   152a4:	adds	r3, r0, r3
   152a8:	bcs	1535c <flatcc_builder_append_string_str@@Base+0xe8>
   152ac:	str	r3, [r2, #20]
   152b0:	ldr	r7, [r4, #20]
   152b4:	ldr	r3, [r4, #24]
   152b8:	add	r1, r0, r7
   152bc:	cmp	r1, r3
   152c0:	str	r1, [r4, #20]
   152c4:	bcs	152f4 <flatcc_builder_append_string_str@@Base+0x80>
   152c8:	ldr	r3, [r4, #16]
   152cc:	adds	r3, r3, r7
   152d0:	beq	152e8 <flatcc_builder_append_string_str@@Base+0x74>
   152d4:	mov	r0, r3
   152d8:	mov	r2, r5
   152dc:	mov	r1, r6
   152e0:	bl	11f6c <memcpy@plt>
   152e4:	mov	r3, r0
   152e8:	mov	r0, r3
   152ec:	add	sp, sp, #8
   152f0:	pop	{r4, r5, r6, r7, r8, pc}
   152f4:	ldr	r2, [r4, #28]
   152f8:	mov	r3, #1
   152fc:	add	r2, r2, #1
   15300:	ldr	r0, [r4, #40]	; 0x28
   15304:	add	r2, r2, r1
   15308:	str	r3, [sp]
   1530c:	add	r1, r4, #60	; 0x3c
   15310:	ldr	r8, [r4, #48]	; 0x30
   15314:	blx	r8
   15318:	cmp	r0, #0
   1531c:	bne	15354 <flatcc_builder_append_string_str@@Base+0xe0>
   15320:	ldr	r1, [r4, #28]
   15324:	ldr	r2, [r4, #64]	; 0x40
   15328:	ldr	r3, [r4, #60]	; 0x3c
   1532c:	sub	r2, r2, r1
   15330:	cmn	r2, #4
   15334:	mvnhi	r2, #3
   15338:	str	r2, [r4, #24]
   1533c:	ldr	r2, [r4, #32]
   15340:	add	r3, r3, r1
   15344:	mvn	r1, #3
   15348:	str	r3, [r4, #16]
   1534c:	str	r1, [r2, #4]
   15350:	b	152cc <flatcc_builder_append_string_str@@Base+0x58>
   15354:	mov	r3, #0
   15358:	b	152e8 <flatcc_builder_append_string_str@@Base+0x74>
   1535c:	bl	120e8 <__assert_fail@plt+0xec>
   15360:	bl	12134 <__assert_fail@plt+0x138>

00015364 <flatcc_builder_append_string_strn@@Base>:
   15364:	push	{r4, r5, r6, r7, r8, lr}
   15368:	mov	r6, r1
   1536c:	mov	r4, r0
   15370:	sub	sp, sp, #8
   15374:	mov	r1, #0
   15378:	mov	r0, r6
   1537c:	mov	r5, r2
   15380:	bl	11fe4 <memchr@plt>
   15384:	ldr	r2, [r4, #32]
   15388:	ldrh	r3, [r2, #14]
   1538c:	cmp	r0, #0
   15390:	subne	r5, r0, r6
   15394:	cmp	r3, #6
   15398:	bne	1545c <flatcc_builder_append_string_strn@@Base+0xf8>
   1539c:	ldr	r3, [r2, #20]
   153a0:	adds	r3, r5, r3
   153a4:	bcs	15458 <flatcc_builder_append_string_strn@@Base+0xf4>
   153a8:	str	r3, [r2, #20]
   153ac:	ldr	r7, [r4, #20]
   153b0:	ldr	r3, [r4, #24]
   153b4:	add	r1, r5, r7
   153b8:	cmp	r1, r3
   153bc:	str	r1, [r4, #20]
   153c0:	bcs	153f0 <flatcc_builder_append_string_strn@@Base+0x8c>
   153c4:	ldr	r3, [r4, #16]
   153c8:	adds	r3, r3, r7
   153cc:	beq	153e4 <flatcc_builder_append_string_strn@@Base+0x80>
   153d0:	mov	r0, r3
   153d4:	mov	r2, r5
   153d8:	mov	r1, r6
   153dc:	bl	11f6c <memcpy@plt>
   153e0:	mov	r3, r0
   153e4:	mov	r0, r3
   153e8:	add	sp, sp, #8
   153ec:	pop	{r4, r5, r6, r7, r8, pc}
   153f0:	ldr	r2, [r4, #28]
   153f4:	mov	r3, #1
   153f8:	add	r2, r2, #1
   153fc:	ldr	r0, [r4, #40]	; 0x28
   15400:	add	r2, r2, r1
   15404:	str	r3, [sp]
   15408:	add	r1, r4, #60	; 0x3c
   1540c:	ldr	r8, [r4, #48]	; 0x30
   15410:	blx	r8
   15414:	cmp	r0, #0
   15418:	bne	15450 <flatcc_builder_append_string_strn@@Base+0xec>
   1541c:	ldr	r1, [r4, #28]
   15420:	ldr	r2, [r4, #64]	; 0x40
   15424:	ldr	r3, [r4, #60]	; 0x3c
   15428:	sub	r2, r2, r1
   1542c:	cmn	r2, #4
   15430:	mvnhi	r2, #3
   15434:	str	r2, [r4, #24]
   15438:	ldr	r2, [r4, #32]
   1543c:	add	r3, r3, r1
   15440:	mvn	r1, #3
   15444:	str	r3, [r4, #16]
   15448:	str	r1, [r2, #4]
   1544c:	b	153c8 <flatcc_builder_append_string_strn@@Base+0x64>
   15450:	mov	r3, #0
   15454:	b	153e4 <flatcc_builder_append_string_strn@@Base+0x80>
   15458:	bl	120e8 <__assert_fail@plt+0xec>
   1545c:	bl	12134 <__assert_fail@plt+0x138>

00015460 <flatcc_builder_truncate_vector@@Base>:
   15460:	ldr	r3, [r0, #32]
   15464:	push	{r4, lr}
   15468:	ldrh	r2, [r3, #14]
   1546c:	cmp	r2, #4
   15470:	bne	154b4 <flatcc_builder_truncate_vector@@Base+0x54>
   15474:	ldr	ip, [r3, #20]
   15478:	cmp	ip, r1
   1547c:	bcc	154c8 <flatcc_builder_truncate_vector@@Base+0x68>
   15480:	ldr	r2, [r3, #16]
   15484:	sub	ip, ip, r1
   15488:	str	ip, [r3, #20]
   1548c:	mul	r2, r2, r1
   15490:	ldr	r3, [r0, #20]
   15494:	ldr	r1, [r0, #16]
   15498:	sub	r3, r3, r2
   1549c:	str	r3, [r0, #20]
   154a0:	add	r0, r1, r3
   154a4:	mov	r1, #0
   154a8:	bl	11fd8 <memset@plt>
   154ac:	mov	r0, #0
   154b0:	pop	{r4, pc}
   154b4:	ldr	r3, [pc, #32]	; 154dc <flatcc_builder_truncate_vector@@Base+0x7c>
   154b8:	ldr	r2, [pc, #32]	; 154e0 <flatcc_builder_truncate_vector@@Base+0x80>
   154bc:	ldr	r1, [pc, #32]	; 154e4 <flatcc_builder_truncate_vector@@Base+0x84>
   154c0:	ldr	r0, [pc, #32]	; 154e8 <flatcc_builder_truncate_vector@@Base+0x88>
   154c4:	bl	11ffc <__assert_fail@plt>
   154c8:	ldr	r3, [pc, #12]	; 154dc <flatcc_builder_truncate_vector@@Base+0x7c>
   154cc:	ldr	r2, [pc, #24]	; 154ec <flatcc_builder_truncate_vector@@Base+0x8c>
   154d0:	ldr	r1, [pc, #12]	; 154e4 <flatcc_builder_truncate_vector@@Base+0x84>
   154d4:	ldr	r0, [pc, #20]	; 154f0 <flatcc_builder_truncate_vector@@Base+0x90>
   154d8:	bl	11ffc <__assert_fail@plt>
   154dc:	andeq	r9, r1, ip, asr r8
   154e0:	ldrdeq	r0, [r0], -r9
   154e4:	andeq	r9, r1, r8, lsl #23
   154e8:	strdeq	r9, [r1], -r4
   154ec:	ldrdeq	r0, [r0], -sl
   154f0:	muleq	r1, r4, sp

000154f4 <flatcc_builder_truncate_offset_vector@@Base>:
   154f4:	ldr	r3, [r0, #32]
   154f8:	push	{r4, lr}
   154fc:	ldrh	r2, [r3, #14]
   15500:	cmp	r2, #5
   15504:	bne	15548 <flatcc_builder_truncate_offset_vector@@Base+0x54>
   15508:	ldr	ip, [r3, #20]
   1550c:	cmp	ip, r1
   15510:	bcc	1555c <flatcc_builder_truncate_offset_vector@@Base+0x68>
   15514:	ldr	r2, [r3, #16]
   15518:	sub	ip, ip, r1
   1551c:	str	ip, [r3, #20]
   15520:	mul	r2, r2, r1
   15524:	ldr	r3, [r0, #20]
   15528:	ldr	r1, [r0, #16]
   1552c:	sub	r3, r3, r2
   15530:	str	r3, [r0, #20]
   15534:	add	r0, r1, r3
   15538:	mov	r1, #0
   1553c:	bl	11fd8 <memset@plt>
   15540:	mov	r0, #0
   15544:	pop	{r4, pc}
   15548:	ldr	r3, [pc, #32]	; 15570 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   1554c:	ldr	r2, [pc, #32]	; 15574 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   15550:	ldr	r1, [pc, #32]	; 15578 <flatcc_builder_truncate_offset_vector@@Base+0x84>
   15554:	ldr	r0, [pc, #32]	; 1557c <flatcc_builder_truncate_offset_vector@@Base+0x88>
   15558:	bl	11ffc <__assert_fail@plt>
   1555c:	ldr	r3, [pc, #12]	; 15570 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   15560:	ldr	r2, [pc, #24]	; 15580 <flatcc_builder_truncate_offset_vector@@Base+0x8c>
   15564:	ldr	r1, [pc, #12]	; 15578 <flatcc_builder_truncate_offset_vector@@Base+0x84>
   15568:	ldr	r0, [pc, #20]	; 15584 <flatcc_builder_truncate_offset_vector@@Base+0x90>
   1556c:	bl	11ffc <__assert_fail@plt>
   15570:	andeq	r9, r1, ip, ror r8
   15574:	andeq	r0, r0, r2, ror #7
   15578:	andeq	r9, r1, r8, lsl #23
   1557c:	andeq	r9, r1, r0, ror #26
   15580:	andeq	r0, r0, r3, ror #7
   15584:			; <UNDEFINED> instruction: 0x00019db8

00015588 <flatcc_builder_truncate_string@@Base>:
   15588:	ldr	r2, [r0, #32]
   1558c:	push	{r4, lr}
   15590:	ldrh	r3, [r2, #14]
   15594:	cmp	r3, #6
   15598:	bne	155d8 <flatcc_builder_truncate_string@@Base+0x50>
   1559c:	ldr	r3, [r2, #20]
   155a0:	cmp	r3, r1
   155a4:	bcc	155ec <flatcc_builder_truncate_string@@Base+0x64>
   155a8:	sub	r3, r3, r1
   155ac:	str	r3, [r2, #20]
   155b0:	ldr	r3, [r0, #20]
   155b4:	ldr	r2, [r0, #16]
   155b8:	sub	r3, r3, r1
   155bc:	str	r3, [r0, #20]
   155c0:	add	r0, r2, r3
   155c4:	mov	r2, r1
   155c8:	mov	r1, #0
   155cc:	bl	11fd8 <memset@plt>
   155d0:	mov	r0, #0
   155d4:	pop	{r4, pc}
   155d8:	ldr	r3, [pc, #32]	; 15600 <flatcc_builder_truncate_string@@Base+0x78>
   155dc:	ldr	r2, [pc, #32]	; 15604 <flatcc_builder_truncate_string@@Base+0x7c>
   155e0:	ldr	r1, [pc, #32]	; 15608 <flatcc_builder_truncate_string@@Base+0x80>
   155e4:	ldr	r0, [pc, #32]	; 1560c <flatcc_builder_truncate_string@@Base+0x84>
   155e8:	bl	11ffc <__assert_fail@plt>
   155ec:	ldr	r3, [pc, #12]	; 15600 <flatcc_builder_truncate_string@@Base+0x78>
   155f0:	mov	r2, #1004	; 0x3ec
   155f4:	ldr	r1, [pc, #12]	; 15608 <flatcc_builder_truncate_string@@Base+0x80>
   155f8:	ldr	r0, [pc, #16]	; 15610 <flatcc_builder_truncate_string@@Base+0x88>
   155fc:	bl	11ffc <__assert_fail@plt>
   15600:	andeq	r9, r1, r4, lsr #17
   15604:	andeq	r0, r0, fp, ror #7
   15608:	andeq	r9, r1, r8, lsl #23
   1560c:	andeq	r9, r1, r8, lsl #24
   15610:	strdeq	r9, [r1], -r4

00015614 <flatcc_builder_start_vector@@Base>:
   15614:	ldr	ip, [r0, #156]	; 0x9c
   15618:	push	{r4, r5, r6, r7, r8, r9, lr}
   1561c:	cmp	r2, #4
   15620:	ldr	lr, [r0, #160]	; 0xa0
   15624:	mov	r4, r0
   15628:	add	r0, ip, #1
   1562c:	movcs	r7, r2
   15630:	movcc	r7, #4
   15634:	cmp	r0, lr
   15638:	sub	sp, sp, #12
   1563c:	mov	r6, r1
   15640:	mov	r5, r3
   15644:	str	r0, [r4, #156]	; 0x9c
   15648:	ble	156b8 <flatcc_builder_start_vector@@Base+0xa4>
   1564c:	ldr	r3, [r4, #176]	; 0xb0
   15650:	cmp	r3, #0
   15654:	cmpgt	r0, r3
   15658:	movgt	r3, #1
   1565c:	movle	r3, #0
   15660:	bgt	15760 <flatcc_builder_start_vector@@Base+0x14c>
   15664:	add	ip, ip, ip, lsl #3
   15668:	ldr	r1, [r4, #88]	; 0x58
   1566c:	lsl	r8, ip, #2
   15670:	add	r2, r8, #36	; 0x24
   15674:	cmp	r2, r1
   15678:	bhi	1573c <flatcc_builder_start_vector@@Base+0x128>
   1567c:	ldr	r3, [r4, #84]	; 0x54
   15680:	add	r3, r3, r8
   15684:	cmp	r3, #0
   15688:	str	r3, [r4, #32]
   1568c:	beq	15760 <flatcc_builder_start_vector@@Base+0x14c>
   15690:	ldr	r2, [r4, #88]	; 0x58
   15694:	ldr	r0, [pc, #204]	; 15768 <flatcc_builder_start_vector@@Base+0x154>
   15698:	ldr	r1, [r4, #176]	; 0xb0
   1569c:	umull	r0, r2, r0, r2
   156a0:	lsr	r2, r2, #3
   156a4:	cmp	r1, #0
   156a8:	cmpgt	r2, r1
   156ac:	str	r2, [r4, #160]	; 0xa0
   156b0:	strgt	r1, [r4, #160]	; 0xa0
   156b4:	b	156c4 <flatcc_builder_start_vector@@Base+0xb0>
   156b8:	ldr	r3, [r4, #32]
   156bc:	add	r3, r3, #36	; 0x24
   156c0:	str	r3, [r4, #32]
   156c4:	ldr	r0, [r4, #20]
   156c8:	ldr	r1, [r4, #28]
   156cc:	ldrh	ip, [r4, #130]	; 0x82
   156d0:	add	r2, r0, r1
   156d4:	add	r2, r2, #7
   156d8:	str	r0, [r3, #8]
   156dc:	bic	r2, r2, #7
   156e0:	mov	r0, #0
   156e4:	strh	ip, [r3, #12]
   156e8:	strh	r7, [r4, #130]	; 0x82
   156ec:	str	r1, [r3]
   156f0:	str	r2, [r4, #28]
   156f4:	str	r0, [r4, #20]
   156f8:	str	r0, [r3, #20]
   156fc:	str	r6, [r3, #16]
   15700:	str	r5, [r3, #24]
   15704:	ldr	r1, [r4, #64]	; 0x40
   15708:	ldr	ip, [r4, #60]	; 0x3c
   1570c:	sub	r1, r1, r2
   15710:	mvn	lr, #3
   15714:	cmp	r1, lr
   15718:	add	r2, ip, r2
   1571c:	movhi	r1, lr
   15720:	mov	ip, #4
   15724:	strh	ip, [r3, #14]
   15728:	str	r2, [r4, #16]
   1572c:	str	r1, [r4, #24]
   15730:	str	lr, [r3, #4]
   15734:	add	sp, sp, #12
   15738:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1573c:	mov	r1, #4
   15740:	ldr	r0, [r4, #40]	; 0x28
   15744:	str	r1, [sp]
   15748:	add	r1, r4, #84	; 0x54
   1574c:	ldr	r9, [r4, #48]	; 0x30
   15750:	blx	r9
   15754:	cmp	r0, #0
   15758:	beq	1567c <flatcc_builder_start_vector@@Base+0x68>
   1575c:	bl	12074 <__assert_fail@plt+0x78>
   15760:	mvn	r0, #0
   15764:	b	15734 <flatcc_builder_start_vector@@Base+0x120>
   15768:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

0001576c <flatcc_builder_start_offset_vector@@Base>:
   1576c:	ldr	r1, [r0, #156]	; 0x9c
   15770:	ldr	r3, [r0, #160]	; 0xa0
   15774:	add	r2, r1, #1
   15778:	cmp	r2, r3
   1577c:	push	{r4, r5, r6, lr}
   15780:	mov	r4, r0
   15784:	sub	sp, sp, #8
   15788:	str	r2, [r0, #156]	; 0x9c
   1578c:	ble	157fc <flatcc_builder_start_offset_vector@@Base+0x90>
   15790:	ldr	r3, [r0, #176]	; 0xb0
   15794:	cmp	r3, #0
   15798:	cmpgt	r2, r3
   1579c:	movgt	r3, #1
   157a0:	movle	r3, #0
   157a4:	bgt	158a4 <flatcc_builder_start_offset_vector@@Base+0x138>
   157a8:	add	r1, r1, r1, lsl #3
   157ac:	ldr	r0, [r0, #88]	; 0x58
   157b0:	lsl	r5, r1, #2
   157b4:	add	r2, r5, #36	; 0x24
   157b8:	cmp	r2, r0
   157bc:	bhi	15880 <flatcc_builder_start_offset_vector@@Base+0x114>
   157c0:	ldr	r3, [r4, #84]	; 0x54
   157c4:	add	r3, r3, r5
   157c8:	cmp	r3, #0
   157cc:	str	r3, [r4, #32]
   157d0:	beq	158a4 <flatcc_builder_start_offset_vector@@Base+0x138>
   157d4:	ldr	r2, [r4, #88]	; 0x58
   157d8:	ldr	r0, [pc, #204]	; 158ac <flatcc_builder_start_offset_vector@@Base+0x140>
   157dc:	ldr	r1, [r4, #176]	; 0xb0
   157e0:	umull	r0, r2, r0, r2
   157e4:	lsr	r2, r2, #3
   157e8:	cmp	r1, #0
   157ec:	cmpgt	r2, r1
   157f0:	str	r2, [r4, #160]	; 0xa0
   157f4:	strgt	r1, [r4, #160]	; 0xa0
   157f8:	b	15808 <flatcc_builder_start_offset_vector@@Base+0x9c>
   157fc:	ldr	r3, [r0, #32]
   15800:	add	r3, r3, #36	; 0x24
   15804:	str	r3, [r0, #32]
   15808:	ldr	lr, [r4, #20]
   1580c:	ldr	ip, [r4, #28]
   15810:	ldrh	r5, [r4, #130]	; 0x82
   15814:	add	r2, lr, ip
   15818:	add	r2, r2, #7
   1581c:	bic	r2, r2, #7
   15820:	mov	r1, #4
   15824:	mov	r0, #0
   15828:	str	lr, [r3, #8]
   1582c:	strh	r5, [r3, #12]
   15830:	strh	r1, [r4, #130]	; 0x82
   15834:	str	ip, [r3]
   15838:	str	r2, [r4, #28]
   1583c:	str	r0, [r4, #20]
   15840:	str	r1, [r3, #16]
   15844:	str	r0, [r3, #20]
   15848:	ldr	r1, [r4, #64]	; 0x40
   1584c:	ldr	ip, [r4, #60]	; 0x3c
   15850:	sub	r1, r1, r2
   15854:	mvn	lr, #3
   15858:	cmp	r1, lr
   1585c:	add	r2, ip, r2
   15860:	movhi	r1, lr
   15864:	mov	ip, #5
   15868:	strh	ip, [r3, #14]
   1586c:	str	r2, [r4, #16]
   15870:	str	r1, [r4, #24]
   15874:	str	lr, [r3, #4]
   15878:	add	sp, sp, #8
   1587c:	pop	{r4, r5, r6, pc}
   15880:	mov	r1, #4
   15884:	ldr	r0, [r4, #40]	; 0x28
   15888:	str	r1, [sp]
   1588c:	add	r1, r4, #84	; 0x54
   15890:	ldr	r6, [r4, #48]	; 0x30
   15894:	blx	r6
   15898:	cmp	r0, #0
   1589c:	beq	157c0 <flatcc_builder_start_offset_vector@@Base+0x54>
   158a0:	bl	12074 <__assert_fail@plt+0x78>
   158a4:	mvn	r0, #0
   158a8:	b	15878 <flatcc_builder_start_offset_vector@@Base+0x10c>
   158ac:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

000158b0 <flatcc_builder_create_offset_vector@@Base>:
   158b0:	push	{r4, r5, r6, r7, r8, lr}
   158b4:	mov	r4, r0
   158b8:	ldr	r0, [r0, #156]	; 0x9c
   158bc:	ldr	r3, [r4, #160]	; 0xa0
   158c0:	mov	r7, r1
   158c4:	add	r1, r0, #1
   158c8:	cmp	r1, r3
   158cc:	sub	sp, sp, #8
   158d0:	mov	r5, r2
   158d4:	str	r1, [r4, #156]	; 0x9c
   158d8:	ble	15948 <flatcc_builder_create_offset_vector@@Base+0x98>
   158dc:	ldr	r3, [r4, #176]	; 0xb0
   158e0:	cmp	r1, r3
   158e4:	cmpgt	r3, #0
   158e8:	movgt	r3, #1
   158ec:	movle	r3, #0
   158f0:	bgt	15a18 <flatcc_builder_create_offset_vector@@Base+0x168>
   158f4:	add	r0, r0, r0, lsl #3
   158f8:	ldr	r1, [r4, #88]	; 0x58
   158fc:	lsl	r6, r0, #2
   15900:	add	r2, r6, #36	; 0x24
   15904:	cmp	r2, r1
   15908:	bhi	15a80 <flatcc_builder_create_offset_vector@@Base+0x1d0>
   1590c:	ldr	r3, [r4, #84]	; 0x54
   15910:	add	r3, r3, r6
   15914:	cmp	r3, #0
   15918:	str	r3, [r4, #32]
   1591c:	beq	15a18 <flatcc_builder_create_offset_vector@@Base+0x168>
   15920:	ldr	r2, [r4, #88]	; 0x58
   15924:	ldr	r0, [pc, #552]	; 15b54 <flatcc_builder_create_offset_vector@@Base+0x2a4>
   15928:	ldr	r1, [r4, #176]	; 0xb0
   1592c:	umull	r0, r2, r0, r2
   15930:	lsr	r2, r2, #3
   15934:	cmp	r1, #0
   15938:	cmpgt	r2, r1
   1593c:	str	r2, [r4, #160]	; 0xa0
   15940:	strgt	r1, [r4, #160]	; 0xa0
   15944:	b	15954 <flatcc_builder_create_offset_vector@@Base+0xa4>
   15948:	ldr	r3, [r4, #32]
   1594c:	add	r3, r3, #36	; 0x24
   15950:	str	r3, [r4, #32]
   15954:	ldr	r2, [r4, #20]
   15958:	ldr	ip, [r4, #28]
   1595c:	ldrh	r6, [r4, #130]	; 0x82
   15960:	add	r1, r2, ip
   15964:	mvn	lr, #3
   15968:	add	r1, r1, #7
   1596c:	str	r2, [r3, #8]
   15970:	bic	r1, r1, #7
   15974:	mov	r0, #4
   15978:	mov	r2, #0
   1597c:	strh	r6, [r3, #12]
   15980:	strh	r0, [r4, #130]	; 0x82
   15984:	stm	r3, {ip, lr}
   15988:	str	r2, [r4, #20]
   1598c:	str	r1, [r4, #28]
   15990:	str	r0, [r3, #16]
   15994:	str	r2, [r3, #20]
   15998:	ldr	r2, [r4, #64]	; 0x40
   1599c:	ldr	r0, [r4, #60]	; 0x3c
   159a0:	sub	r2, r2, r1
   159a4:	cmp	r2, lr
   159a8:	mov	ip, #5
   159ac:	strh	ip, [r3, #14]
   159b0:	add	r0, r0, r1
   159b4:	strls	r2, [r4, #24]
   159b8:	strhi	lr, [r4, #24]
   159bc:	movhi	r2, lr
   159c0:	mvn	r6, #3
   159c4:	cmn	r5, #-1073741823	; 0xc0000001
   159c8:	str	r0, [r4, #16]
   159cc:	str	r6, [r3, #4]
   159d0:	bhi	15b3c <flatcc_builder_create_offset_vector@@Base+0x28c>
   159d4:	lsl	r8, r5, #2
   159d8:	cmp	r8, r2
   159dc:	str	r5, [r3, #20]
   159e0:	str	r8, [r4, #20]
   159e4:	bcs	15a28 <flatcc_builder_create_offset_vector@@Base+0x178>
   159e8:	cmp	r0, #0
   159ec:	beq	15a18 <flatcc_builder_create_offset_vector@@Base+0x168>
   159f0:	mov	r2, r8
   159f4:	mov	r1, r7
   159f8:	bl	11f6c <memcpy@plt>
   159fc:	ldr	r3, [r4, #32]
   15a00:	ldrh	r2, [r3, #14]
   15a04:	cmp	r2, #5
   15a08:	bne	15b40 <flatcc_builder_create_offset_vector@@Base+0x290>
   15a0c:	ldr	r2, [r3, #20]
   15a10:	cmn	r2, #-1073741823	; 0xc0000001
   15a14:	bls	15aa4 <flatcc_builder_create_offset_vector@@Base+0x1f4>
   15a18:	mov	r5, #0
   15a1c:	mov	r0, r5
   15a20:	add	sp, sp, #8
   15a24:	pop	{r4, r5, r6, r7, r8, pc}
   15a28:	mov	r3, #1
   15a2c:	add	r2, r8, #1
   15a30:	ldr	r0, [r4, #40]	; 0x28
   15a34:	add	r2, r2, r1
   15a38:	str	r3, [sp]
   15a3c:	add	r1, r4, #60	; 0x3c
   15a40:	ldr	r5, [r4, #48]	; 0x30
   15a44:	blx	r5
   15a48:	cmp	r0, #0
   15a4c:	bne	15a18 <flatcc_builder_create_offset_vector@@Base+0x168>
   15a50:	ldr	r2, [r4, #28]
   15a54:	ldr	r3, [r4, #64]	; 0x40
   15a58:	ldr	r0, [r4, #60]	; 0x3c
   15a5c:	sub	r3, r3, r2
   15a60:	ldr	r1, [r4, #32]
   15a64:	cmn	r3, #4
   15a68:	movhi	r3, r6
   15a6c:	add	r0, r0, r2
   15a70:	str	r3, [r4, #24]
   15a74:	str	r0, [r4, #16]
   15a78:	str	r6, [r1, #4]
   15a7c:	b	159e8 <flatcc_builder_create_offset_vector@@Base+0x138>
   15a80:	mov	r1, #4
   15a84:	ldr	r0, [r4, #40]	; 0x28
   15a88:	str	r1, [sp]
   15a8c:	add	r1, r4, #84	; 0x54
   15a90:	ldr	r8, [r4, #48]	; 0x30
   15a94:	blx	r8
   15a98:	cmp	r0, #0
   15a9c:	beq	1590c <flatcc_builder_create_offset_vector@@Base+0x5c>
   15aa0:	bl	12074 <__assert_fail@plt+0x78>
   15aa4:	ldr	r1, [r4, #16]
   15aa8:	mov	r0, r4
   15aac:	bl	134d4 <flatcc_builder_default_alloc@@Base+0x2fc>
   15ab0:	subs	r5, r0, #0
   15ab4:	beq	15a18 <flatcc_builder_create_offset_vector@@Base+0x168>
   15ab8:	ldr	r2, [r4, #20]
   15abc:	mov	r1, #0
   15ac0:	ldr	r0, [r4, #16]
   15ac4:	bl	11fd8 <memset@plt>
   15ac8:	ldr	r3, [r4, #32]
   15acc:	ldr	r2, [r4, #64]	; 0x40
   15ad0:	ldrh	lr, [r4, #130]	; 0x82
   15ad4:	ldr	ip, [r3]
   15ad8:	ldr	r1, [r3, #4]
   15adc:	ldrh	r0, [r4, #128]	; 0x80
   15ae0:	sub	r2, r2, ip
   15ae4:	cmp	r2, r1
   15ae8:	movcs	r2, r1
   15aec:	cmp	r0, lr
   15af0:	ldr	r0, [r4, #60]	; 0x3c
   15af4:	ldr	r6, [r3, #8]
   15af8:	str	r2, [r4, #24]
   15afc:	add	r2, r0, ip
   15b00:	str	r2, [r4, #16]
   15b04:	str	r6, [r4, #20]
   15b08:	ldr	r2, [r4, #156]	; 0x9c
   15b0c:	str	ip, [r4, #28]
   15b10:	str	r1, [r3, #4]
   15b14:	strhcc	lr, [r4, #128]	; 0x80
   15b18:	ldrh	r1, [r3, #12]
   15b1c:	sub	r2, r2, #1
   15b20:	sub	r3, r3, #36	; 0x24
   15b24:	mov	r0, r5
   15b28:	str	r2, [r4, #156]	; 0x9c
   15b2c:	strh	r1, [r4, #130]	; 0x82
   15b30:	str	r3, [r4, #32]
   15b34:	add	sp, sp, #8
   15b38:	pop	{r4, r5, r6, r7, r8, pc}
   15b3c:	bl	120e8 <__assert_fail@plt+0xec>
   15b40:	ldr	r3, [pc, #16]	; 15b58 <flatcc_builder_create_offset_vector@@Base+0x2a8>
   15b44:	ldr	r2, [pc, #16]	; 15b5c <flatcc_builder_create_offset_vector@@Base+0x2ac>
   15b48:	ldr	r1, [pc, #16]	; 15b60 <flatcc_builder_create_offset_vector@@Base+0x2b0>
   15b4c:	ldr	r0, [pc, #16]	; 15b64 <flatcc_builder_create_offset_vector@@Base+0x2b4>
   15b50:	bl	11ffc <__assert_fail@plt>
   15b54:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   15b58:	andeq	r9, r1, r4, asr #17
   15b5c:	andeq	r0, r0, r8, asr #11
   15b60:	andeq	r9, r1, r8, lsl #23
   15b64:	andeq	r9, r1, r0, ror #26

00015b68 <flatcc_builder_start_string@@Base>:
   15b68:	ldr	r1, [r0, #156]	; 0x9c
   15b6c:	ldr	r3, [r0, #160]	; 0xa0
   15b70:	add	r2, r1, #1
   15b74:	cmp	r2, r3
   15b78:	push	{r4, r5, r6, lr}
   15b7c:	mov	r4, r0
   15b80:	sub	sp, sp, #8
   15b84:	str	r2, [r0, #156]	; 0x9c
   15b88:	ble	15bf8 <flatcc_builder_start_string@@Base+0x90>
   15b8c:	ldr	r3, [r0, #176]	; 0xb0
   15b90:	cmp	r3, #0
   15b94:	cmpgt	r2, r3
   15b98:	movgt	r3, #1
   15b9c:	movle	r3, #0
   15ba0:	bgt	15ca0 <flatcc_builder_start_string@@Base+0x138>
   15ba4:	add	r1, r1, r1, lsl #3
   15ba8:	ldr	r0, [r0, #88]	; 0x58
   15bac:	lsl	r5, r1, #2
   15bb0:	add	r2, r5, #36	; 0x24
   15bb4:	cmp	r2, r0
   15bb8:	bhi	15c7c <flatcc_builder_start_string@@Base+0x114>
   15bbc:	ldr	r3, [r4, #84]	; 0x54
   15bc0:	add	r3, r3, r5
   15bc4:	cmp	r3, #0
   15bc8:	str	r3, [r4, #32]
   15bcc:	beq	15ca0 <flatcc_builder_start_string@@Base+0x138>
   15bd0:	ldr	r2, [r4, #88]	; 0x58
   15bd4:	ldr	r0, [pc, #204]	; 15ca8 <flatcc_builder_start_string@@Base+0x140>
   15bd8:	ldr	r1, [r4, #176]	; 0xb0
   15bdc:	umull	r0, r2, r0, r2
   15be0:	lsr	r2, r2, #3
   15be4:	cmp	r1, #0
   15be8:	cmpgt	r2, r1
   15bec:	str	r2, [r4, #160]	; 0xa0
   15bf0:	strgt	r1, [r4, #160]	; 0xa0
   15bf4:	b	15c04 <flatcc_builder_start_string@@Base+0x9c>
   15bf8:	ldr	r3, [r0, #32]
   15bfc:	add	r3, r3, #36	; 0x24
   15c00:	str	r3, [r0, #32]
   15c04:	ldr	lr, [r4, #20]
   15c08:	ldr	ip, [r4, #28]
   15c0c:	ldrh	r5, [r4, #130]	; 0x82
   15c10:	add	r2, lr, ip
   15c14:	add	r2, r2, #7
   15c18:	bic	r2, r2, #7
   15c1c:	mov	r1, #1
   15c20:	mov	r0, #0
   15c24:	str	lr, [r3, #8]
   15c28:	strh	r5, [r3, #12]
   15c2c:	strh	r1, [r4, #130]	; 0x82
   15c30:	str	ip, [r3]
   15c34:	str	r2, [r4, #28]
   15c38:	str	r0, [r4, #20]
   15c3c:	str	r1, [r3, #16]
   15c40:	str	r0, [r3, #20]
   15c44:	ldr	r1, [r4, #64]	; 0x40
   15c48:	ldr	ip, [r4, #60]	; 0x3c
   15c4c:	sub	r1, r1, r2
   15c50:	mvn	lr, #3
   15c54:	cmp	r1, lr
   15c58:	add	r2, ip, r2
   15c5c:	movhi	r1, lr
   15c60:	mov	ip, #6
   15c64:	strh	ip, [r3, #14]
   15c68:	str	r2, [r4, #16]
   15c6c:	str	r1, [r4, #24]
   15c70:	str	lr, [r3, #4]
   15c74:	add	sp, sp, #8
   15c78:	pop	{r4, r5, r6, pc}
   15c7c:	mov	r1, #4
   15c80:	ldr	r0, [r4, #40]	; 0x28
   15c84:	str	r1, [sp]
   15c88:	add	r1, r4, #84	; 0x54
   15c8c:	ldr	r6, [r4, #48]	; 0x30
   15c90:	blx	r6
   15c94:	cmp	r0, #0
   15c98:	beq	15bbc <flatcc_builder_start_string@@Base+0x54>
   15c9c:	bl	12074 <__assert_fail@plt+0x78>
   15ca0:	mvn	r0, #0
   15ca4:	b	15c74 <flatcc_builder_start_string@@Base+0x10c>
   15ca8:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00015cac <flatcc_builder_reserve_table@@Base>:
   15cac:	cmp	r1, #0
   15cb0:	push	{r4, r5, r6, r7, lr}
   15cb4:	sub	sp, sp, #12
   15cb8:	blt	15d90 <flatcc_builder_reserve_table@@Base+0xe4>
   15cbc:	ldr	r2, [r0, #32]
   15cc0:	add	r1, r1, #2
   15cc4:	mov	r5, r0
   15cc8:	ldrh	r6, [r2, #28]
   15ccc:	ldr	r3, [r2, #16]
   15cd0:	ldr	r0, [r0, #56]	; 0x38
   15cd4:	lsl	r4, r1, #1
   15cd8:	add	r6, r3, r6, lsl #1
   15cdc:	add	r2, r6, r4
   15ce0:	cmp	r2, r0
   15ce4:	bhi	15d40 <flatcc_builder_reserve_table@@Base+0x94>
   15ce8:	ldr	r3, [r5, #52]	; 0x34
   15cec:	adds	r3, r3, r6
   15cf0:	streq	r3, [r5, #4]
   15cf4:	mvneq	r0, #0
   15cf8:	beq	15d38 <flatcc_builder_reserve_table@@Base+0x8c>
   15cfc:	ldr	r2, [r5, #32]
   15d00:	add	r3, r3, #4
   15d04:	str	r3, [r5, #4]
   15d08:	ldr	r6, [r2, #20]
   15d0c:	ldr	r3, [r5, #80]	; 0x50
   15d10:	add	r2, r4, r6
   15d14:	sub	r2, r2, #3
   15d18:	cmp	r2, r3
   15d1c:	bhi	15d68 <flatcc_builder_reserve_table@@Base+0xbc>
   15d20:	ldr	r3, [r5, #76]	; 0x4c
   15d24:	add	r3, r3, r6
   15d28:	cmp	r3, #0
   15d2c:	movne	r0, #0
   15d30:	mvneq	r0, #0
   15d34:	str	r3, [r5]
   15d38:	add	sp, sp, #12
   15d3c:	pop	{r4, r5, r6, r7, pc}
   15d40:	mov	r3, #0
   15d44:	ldr	r0, [r5, #40]	; 0x28
   15d48:	add	r1, r5, #52	; 0x34
   15d4c:	str	r3, [sp]
   15d50:	mov	r3, #1
   15d54:	ldr	r7, [r5, #48]	; 0x30
   15d58:	blx	r7
   15d5c:	cmp	r0, #0
   15d60:	beq	15ce8 <flatcc_builder_reserve_table@@Base+0x3c>
   15d64:	bl	12074 <__assert_fail@plt+0x78>
   15d68:	mov	r3, #3
   15d6c:	ldr	r0, [r5, #40]	; 0x28
   15d70:	add	r1, r5, #76	; 0x4c
   15d74:	str	r3, [sp]
   15d78:	mov	r3, #0
   15d7c:	ldr	r4, [r5, #48]	; 0x30
   15d80:	blx	r4
   15d84:	cmp	r0, #0
   15d88:	beq	15d20 <flatcc_builder_reserve_table@@Base+0x74>
   15d8c:	b	15d64 <flatcc_builder_reserve_table@@Base+0xb8>
   15d90:	ldr	r3, [pc, #12]	; 15da4 <flatcc_builder_reserve_table@@Base+0xf8>
   15d94:	ldr	r2, [pc, #12]	; 15da8 <flatcc_builder_reserve_table@@Base+0xfc>
   15d98:	ldr	r1, [pc, #12]	; 15dac <flatcc_builder_reserve_table@@Base+0x100>
   15d9c:	ldr	r0, [pc, #12]	; 15db0 <flatcc_builder_reserve_table@@Base+0x104>
   15da0:	bl	11ffc <__assert_fail@plt>
   15da4:	andeq	r9, r1, r8, ror #17
   15da8:	andeq	r0, r0, r9, lsr #8
   15dac:	andeq	r9, r1, r8, lsl #23
   15db0:	andeq	r9, r1, r8, lsl lr

00015db4 <flatcc_builder_start_table@@Base>:
   15db4:	push	{r4, r5, r6, r7, lr}
   15db8:	mov	r5, r1
   15dbc:	ldr	r1, [r0, #156]	; 0x9c
   15dc0:	ldr	r3, [r0, #160]	; 0xa0
   15dc4:	add	r2, r1, #1
   15dc8:	cmp	r2, r3
   15dcc:	sub	sp, sp, #12
   15dd0:	mov	r4, r0
   15dd4:	str	r2, [r0, #156]	; 0x9c
   15dd8:	ble	15e48 <flatcc_builder_start_table@@Base+0x94>
   15ddc:	ldr	r3, [r0, #176]	; 0xb0
   15de0:	cmp	r3, #0
   15de4:	cmpgt	r2, r3
   15de8:	movgt	r3, #1
   15dec:	movle	r3, #0
   15df0:	bgt	15fe8 <flatcc_builder_start_table@@Base+0x234>
   15df4:	add	r1, r1, r1, lsl #3
   15df8:	ldr	r0, [r0, #88]	; 0x58
   15dfc:	lsl	r6, r1, #2
   15e00:	add	r2, r6, #36	; 0x24
   15e04:	cmp	r2, r0
   15e08:	bhi	15fc4 <flatcc_builder_start_table@@Base+0x210>
   15e0c:	ldr	r3, [r4, #84]	; 0x54
   15e10:	add	r3, r3, r6
   15e14:	cmp	r3, #0
   15e18:	str	r3, [r4, #32]
   15e1c:	beq	15fe8 <flatcc_builder_start_table@@Base+0x234>
   15e20:	ldr	r2, [r4, #88]	; 0x58
   15e24:	ldr	r0, [pc, #452]	; 15ff0 <flatcc_builder_start_table@@Base+0x23c>
   15e28:	ldr	r1, [r4, #176]	; 0xb0
   15e2c:	umull	r0, r2, r0, r2
   15e30:	lsr	r2, r2, #3
   15e34:	cmp	r2, r1
   15e38:	cmpgt	r1, #0
   15e3c:	str	r2, [r4, #160]	; 0xa0
   15e40:	strgt	r1, [r4, #160]	; 0xa0
   15e44:	b	15e54 <flatcc_builder_start_table@@Base+0xa0>
   15e48:	ldr	r3, [r0, #32]
   15e4c:	add	r3, r3, #36	; 0x24
   15e50:	str	r3, [r0, #32]
   15e54:	ldr	ip, [r4, #20]
   15e58:	ldr	lr, [r4, #28]
   15e5c:	ldrh	r7, [r4, #130]	; 0x82
   15e60:	ldr	r6, [r4, #4]
   15e64:	ldr	r0, [r4, #52]	; 0x34
   15e68:	add	r2, ip, lr
   15e6c:	str	ip, [r3, #8]
   15e70:	add	r2, r2, #7
   15e74:	mov	ip, #4
   15e78:	strh	r7, [r3, #12]
   15e7c:	sub	r1, r6, r0
   15e80:	strh	ip, [r4, #130]	; 0x82
   15e84:	bic	r2, r2, #7
   15e88:	mvn	r6, #3
   15e8c:	mov	ip, #0
   15e90:	str	lr, [r3]
   15e94:	str	r6, [r3, #4]
   15e98:	str	r2, [r4, #28]
   15e9c:	str	ip, [r4, #20]
   15ea0:	str	r1, [r3, #16]
   15ea4:	ldr	lr, [r4, #76]	; 0x4c
   15ea8:	ldr	r2, [r4]
   15eac:	add	r5, r5, #2
   15eb0:	sub	r2, r2, lr
   15eb4:	str	r2, [r3, #20]
   15eb8:	ldr	r2, [r4, #12]
   15ebc:	lsl	r5, r5, #1
   15ec0:	str	r2, [r3, #24]
   15ec4:	ldrh	r6, [r4, #8]
   15ec8:	ldr	lr, [pc, #292]	; 15ff4 <flatcc_builder_start_table@@Base+0x240>
   15ecc:	strh	r6, [r3, #28]
   15ed0:	add	r6, r1, r6, lsl #1
   15ed4:	ldr	r1, [r4, #56]	; 0x38
   15ed8:	add	r2, r6, r5
   15edc:	cmp	r2, r1
   15ee0:	mov	r1, #3
   15ee4:	strh	ip, [r4, #8]
   15ee8:	str	lr, [r4, #12]
   15eec:	strh	r1, [r3, #14]
   15ef0:	bhi	15f74 <flatcc_builder_start_table@@Base+0x1c0>
   15ef4:	adds	r6, r6, r0
   15ef8:	streq	r6, [r4, #4]
   15efc:	beq	15fe8 <flatcc_builder_start_table@@Base+0x234>
   15f00:	ldr	r3, [r4, #32]
   15f04:	add	r6, r6, #4
   15f08:	str	r6, [r4, #4]
   15f0c:	ldr	r6, [r3, #20]
   15f10:	sub	r2, r5, #3
   15f14:	ldr	r3, [r4, #80]	; 0x50
   15f18:	add	r2, r2, r6
   15f1c:	cmp	r2, r3
   15f20:	bhi	15f9c <flatcc_builder_start_table@@Base+0x1e8>
   15f24:	ldr	r3, [r4, #76]	; 0x4c
   15f28:	add	r3, r3, r6
   15f2c:	cmp	r3, #0
   15f30:	str	r3, [r4]
   15f34:	beq	15fe8 <flatcc_builder_start_table@@Base+0x234>
   15f38:	ldr	ip, [r4, #28]
   15f3c:	ldr	r3, [r4, #64]	; 0x40
   15f40:	ldr	r2, [pc, #176]	; 15ff8 <flatcc_builder_start_table@@Base+0x244>
   15f44:	sub	r3, r3, ip
   15f48:	ldr	r1, [r4, #60]	; 0x3c
   15f4c:	ldr	lr, [r4, #32]
   15f50:	cmp	r3, r2
   15f54:	mov	r0, #0
   15f58:	add	r1, r1, ip
   15f5c:	movcs	r3, r2
   15f60:	str	r1, [r4, #16]
   15f64:	str	r3, [r4, #24]
   15f68:	str	r2, [lr, #4]
   15f6c:	add	sp, sp, #12
   15f70:	pop	{r4, r5, r6, r7, pc}
   15f74:	ldr	r0, [r4, #40]	; 0x28
   15f78:	mov	r3, #1
   15f7c:	str	ip, [sp]
   15f80:	add	r1, r4, #52	; 0x34
   15f84:	ldr	r7, [r4, #48]	; 0x30
   15f88:	blx	r7
   15f8c:	cmp	r0, #0
   15f90:	bne	15fc0 <flatcc_builder_start_table@@Base+0x20c>
   15f94:	ldr	r0, [r4, #52]	; 0x34
   15f98:	b	15ef4 <flatcc_builder_start_table@@Base+0x140>
   15f9c:	mov	r3, #3
   15fa0:	ldr	r0, [r4, #40]	; 0x28
   15fa4:	add	r1, r4, #76	; 0x4c
   15fa8:	str	r3, [sp]
   15fac:	mov	r3, #0
   15fb0:	ldr	r5, [r4, #48]	; 0x30
   15fb4:	blx	r5
   15fb8:	cmp	r0, #0
   15fbc:	beq	15f24 <flatcc_builder_start_table@@Base+0x170>
   15fc0:	bl	12074 <__assert_fail@plt+0x78>
   15fc4:	mov	r1, #4
   15fc8:	ldr	r0, [r4, #40]	; 0x28
   15fcc:	str	r1, [sp]
   15fd0:	add	r1, r4, #84	; 0x54
   15fd4:	ldr	r7, [r4, #48]	; 0x30
   15fd8:	blx	r7
   15fdc:	cmp	r0, #0
   15fe0:	beq	15e0c <flatcc_builder_start_table@@Base+0x58>
   15fe4:	b	15fc0 <flatcc_builder_start_table@@Base+0x20c>
   15fe8:	mvn	r0, #0
   15fec:	b	15f6c <flatcc_builder_start_table@@Base+0x1b8>
   15ff0:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   15ff4:	svccs	0x00693b52
   15ff8:	strdeq	pc, [r0], -ip

00015ffc <flatcc_builder_create_vtable@@Base>:
   15ffc:	push	{r4, r5, r6, lr}
   16000:	sub	sp, sp, #80	; 0x50
   16004:	mov	r3, #0
   16008:	cmp	r2, #0
   1600c:	str	r3, [sp, #8]
   16010:	str	r3, [sp, #12]
   16014:	mov	r4, r0
   16018:	ldr	r3, [r0, #152]	; 0x98
   1601c:	beq	16090 <flatcc_builder_create_vtable@@Base+0x94>
   16020:	mov	r0, #1
   16024:	cmp	r3, #0
   16028:	str	r1, [sp, #16]
   1602c:	str	r2, [sp, #8]
   16030:	str	r2, [sp, #20]
   16034:	str	r0, [sp, #12]
   16038:	mov	r1, r2
   1603c:	beq	160a8 <flatcc_builder_create_vtable@@Base+0xac>
   16040:	ldr	r3, [r4, #136]	; 0x88
   16044:	sub	r5, r3, r2
   16048:	cmp	r3, r5
   1604c:	ble	160a4 <flatcc_builder_create_vtable@@Base+0xa8>
   16050:	ldr	r0, [r4, #36]	; 0x24
   16054:	mov	r3, r5
   16058:	str	r2, [sp]
   1605c:	add	r1, sp, #16
   16060:	ldr	r6, [r4, #44]	; 0x2c
   16064:	mov	r2, #1
   16068:	blx	r6
   1606c:	cmp	r0, #0
   16070:	bne	1610c <flatcc_builder_create_vtable@@Base+0x110>
   16074:	cmp	r5, #0
   16078:	str	r5, [r4, #136]	; 0x88
   1607c:	beq	16084 <flatcc_builder_create_vtable@@Base+0x88>
   16080:	add	r5, r5, #1
   16084:	mov	r0, r5
   16088:	add	sp, sp, #80	; 0x50
   1608c:	pop	{r4, r5, r6, pc}
   16090:	cmp	r3, #0
   16094:	bne	160a4 <flatcc_builder_create_vtable@@Base+0xa8>
   16098:	ldr	r2, [r0, #180]	; 0xb4
   1609c:	cmp	r2, #0
   160a0:	beq	16100 <flatcc_builder_create_vtable@@Base+0x104>
   160a4:	bl	120c0 <__assert_fail@plt+0xc4>
   160a8:	ldr	r3, [r4, #180]	; 0xb4
   160ac:	cmp	r3, #0
   160b0:	bne	16040 <flatcc_builder_create_vtable@@Base+0x44>
   160b4:	ldr	r5, [r4, #140]	; 0x8c
   160b8:	add	r3, r5, r2
   160bc:	cmp	r5, r3
   160c0:	str	r3, [r4, #140]	; 0x8c
   160c4:	movle	r2, r0
   160c8:	bgt	16120 <flatcc_builder_create_vtable@@Base+0x124>
   160cc:	ldr	r0, [r4, #36]	; 0x24
   160d0:	mov	r3, r5
   160d4:	str	r1, [sp]
   160d8:	add	r1, sp, #16
   160dc:	ldr	r4, [r4, #44]	; 0x2c
   160e0:	blx	r4
   160e4:	cmp	r0, #0
   160e8:	beq	16080 <flatcc_builder_create_vtable@@Base+0x84>
   160ec:	ldr	r3, [pc, #48]	; 16124 <flatcc_builder_create_vtable@@Base+0x128>
   160f0:	ldr	r2, [pc, #48]	; 16128 <flatcc_builder_create_vtable@@Base+0x12c>
   160f4:	ldr	r1, [pc, #48]	; 1612c <flatcc_builder_create_vtable@@Base+0x130>
   160f8:	ldr	r0, [pc, #48]	; 16130 <flatcc_builder_create_vtable@@Base+0x134>
   160fc:	bl	11ffc <__assert_fail@plt>
   16100:	ldr	r5, [r4, #140]	; 0x8c
   16104:	mov	r1, r2
   16108:	b	160cc <flatcc_builder_create_vtable@@Base+0xd0>
   1610c:	ldr	r3, [pc, #32]	; 16134 <flatcc_builder_create_vtable@@Base+0x138>
   16110:	ldr	r2, [pc, #32]	; 16138 <flatcc_builder_create_vtable@@Base+0x13c>
   16114:	ldr	r1, [pc, #16]	; 1612c <flatcc_builder_create_vtable@@Base+0x130>
   16118:	ldr	r0, [pc, #16]	; 16130 <flatcc_builder_create_vtable@@Base+0x134>
   1611c:	bl	11ffc <__assert_fail@plt>
   16120:	bl	12098 <__assert_fail@plt+0x9c>
   16124:	andeq	r9, r1, r8, asr #8
   16128:	andeq	r0, r0, r5, lsr #5
   1612c:	andeq	r9, r1, r8, lsl #23
   16130:	andeq	r9, r1, r8, asr #24
   16134:	andeq	r9, r1, r4, asr r4
   16138:	andeq	r0, r0, fp, lsl #5

0001613c <flatcc_builder_create_cached_vtable@@Base>:
   1613c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16140:	sub	sp, sp, #28
   16144:	ldr	r4, [r0, #116]	; 0x74
   16148:	mov	sl, r3
   1614c:	cmp	r4, #0
   16150:	mov	r8, r0
   16154:	str	r1, [sp, #8]
   16158:	mov	r7, r2
   1615c:	rsbne	r3, r4, #32
   16160:	beq	162b8 <flatcc_builder_create_cached_vtable@@Base+0x17c>
   16164:	lsr	sl, sl, r3
   16168:	ldr	r3, [r8, #92]	; 0x5c
   1616c:	adds	r2, r3, sl, lsl #2
   16170:	str	r3, [sp, #16]
   16174:	str	r2, [sp, #20]
   16178:	beq	162ac <flatcc_builder_create_cached_vtable@@Base+0x170>
   1617c:	ldr	r5, [r3, sl, lsl #2]
   16180:	cmp	r5, #0
   16184:	beq	163a8 <flatcc_builder_create_cached_vtable@@Base+0x26c>
   16188:	mov	r3, #0
   1618c:	ldr	fp, [r8, #100]	; 0x64
   16190:	ldr	r6, [r8, #68]	; 0x44
   16194:	mov	r9, r2
   16198:	str	r3, [sp, #12]
   1619c:	b	161b0 <flatcc_builder_create_cached_vtable@@Base+0x74>
   161a0:	ldr	r5, [r4, #12]
   161a4:	add	r9, r4, #12
   161a8:	cmp	r5, #0
   161ac:	beq	16200 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   161b0:	add	r4, fp, r5
   161b4:	ldr	r2, [r4, #8]
   161b8:	add	r1, r6, r2
   161bc:	ldrh	r2, [r6, r2]
   161c0:	cmp	r2, r7
   161c4:	bne	161a0 <flatcc_builder_create_cached_vtable@@Base+0x64>
   161c8:	mov	r2, r7
   161cc:	ldr	r0, [sp, #8]
   161d0:	bl	11f78 <memcmp@plt>
   161d4:	cmp	r0, #0
   161d8:	bne	161a0 <flatcc_builder_create_cached_vtable@@Base+0x64>
   161dc:	ldr	r1, [r4, #4]
   161e0:	ldr	r2, [r8, #152]	; 0x98
   161e4:	cmp	r1, r2
   161e8:	beq	1627c <flatcc_builder_create_cached_vtable@@Base+0x140>
   161ec:	ldr	r5, [r4, #12]
   161f0:	add	r9, r4, #12
   161f4:	cmp	r5, #0
   161f8:	str	r4, [sp, #12]
   161fc:	bne	161b0 <flatcc_builder_create_cached_vtable@@Base+0x74>
   16200:	ldr	r4, [r8, #124]	; 0x7c
   16204:	ldr	r3, [r8, #104]	; 0x68
   16208:	add	r2, r4, #16
   1620c:	cmp	r2, r3
   16210:	bhi	16380 <flatcc_builder_create_cached_vtable@@Base+0x244>
   16214:	ldr	r5, [r8, #100]	; 0x64
   16218:	adds	r6, r5, r4
   1621c:	beq	162ac <flatcc_builder_create_cached_vtable@@Base+0x170>
   16220:	ldr	r3, [r8, #124]	; 0x7c
   16224:	ldr	r0, [sp, #16]
   16228:	ldr	r2, [r8, #152]	; 0x98
   1622c:	add	r1, r3, #16
   16230:	str	r1, [r8, #124]	; 0x7c
   16234:	str	r2, [r6, #4]
   16238:	ldr	r1, [r0, sl, lsl #2]
   1623c:	mov	r2, r7
   16240:	str	r1, [r6, #12]
   16244:	str	r3, [r0, sl, lsl #2]
   16248:	ldr	r1, [sp, #8]
   1624c:	mov	r0, r8
   16250:	bl	15ffc <flatcc_builder_create_vtable@@Base>
   16254:	cmp	r0, #0
   16258:	str	r0, [r5, r4]
   1625c:	beq	162ac <flatcc_builder_create_cached_vtable@@Base+0x170>
   16260:	ldr	r3, [sp, #12]
   16264:	cmp	r3, #0
   16268:	beq	163b0 <flatcc_builder_create_cached_vtable@@Base+0x274>
   1626c:	ldr	r3, [r3, #8]
   16270:	str	r3, [r6, #8]
   16274:	add	sp, sp, #28
   16278:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1627c:	ldr	r3, [sp, #20]
   16280:	cmp	r3, r9
   16284:	beq	162a0 <flatcc_builder_create_cached_vtable@@Base+0x164>
   16288:	ldr	r2, [sp, #16]
   1628c:	ldr	r3, [r4, #12]
   16290:	str	r3, [r9]
   16294:	ldr	r3, [r2, sl, lsl #2]
   16298:	str	r3, [r4, #12]
   1629c:	str	r5, [r2, sl, lsl #2]
   162a0:	ldr	r0, [r4]
   162a4:	add	sp, sp, #28
   162a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162ac:	mov	r0, #0
   162b0:	add	sp, sp, #28
   162b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162b8:	ldr	r3, [r0, #124]	; 0x7c
   162bc:	add	r5, r0, #92	; 0x5c
   162c0:	cmp	r3, #0
   162c4:	bne	16474 <flatcc_builder_create_cached_vtable@@Base+0x338>
   162c8:	ldr	r3, [r0, #104]	; 0x68
   162cc:	cmp	r3, #15
   162d0:	bls	16354 <flatcc_builder_create_cached_vtable@@Base+0x218>
   162d4:	ldr	r3, [r8, #100]	; 0x64
   162d8:	cmp	r3, #0
   162dc:	beq	162ac <flatcc_builder_create_cached_vtable@@Base+0x170>
   162e0:	mov	r2, #16
   162e4:	mov	r3, #5
   162e8:	str	r2, [r8, #124]	; 0x7c
   162ec:	ldr	r0, [r8, #40]	; 0x28
   162f0:	mov	r1, r5
   162f4:	str	r3, [sp]
   162f8:	mov	r2, #256	; 0x100
   162fc:	ldr	r5, [r8, #48]	; 0x30
   16300:	mov	r3, #1
   16304:	blx	r5
   16308:	cmp	r0, #0
   1630c:	bne	162ac <flatcc_builder_create_cached_vtable@@Base+0x170>
   16310:	ldr	r1, [r8, #96]	; 0x60
   16314:	mov	r3, #256	; 0x100
   16318:	b	16320 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   1631c:	mov	r3, r2
   16320:	lsl	r2, r3, #1
   16324:	cmp	r2, r1
   16328:	bls	1631c <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   1632c:	lsr	r3, r3, #2
   16330:	cmp	r3, #1
   16334:	bls	16400 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   16338:	mov	r2, #1
   1633c:	add	r4, r4, #1
   16340:	cmp	r3, r2, lsl r4
   16344:	bhi	1633c <flatcc_builder_create_cached_vtable@@Base+0x200>
   16348:	rsb	r3, r4, #32
   1634c:	str	r4, [r8, #116]	; 0x74
   16350:	b	16164 <flatcc_builder_create_cached_vtable@@Base+0x28>
   16354:	mov	r3, #6
   16358:	ldr	r0, [r0, #40]	; 0x28
   1635c:	mov	r2, #16
   16360:	str	r3, [sp]
   16364:	add	r1, r8, #100	; 0x64
   16368:	ldr	r6, [r8, #48]	; 0x30
   1636c:	mov	r3, r4
   16370:	blx	r6
   16374:	cmp	r0, #0
   16378:	beq	162d4 <flatcc_builder_create_cached_vtable@@Base+0x198>
   1637c:	b	16468 <flatcc_builder_create_cached_vtable@@Base+0x32c>
   16380:	mov	r3, #6
   16384:	ldr	r0, [r8, #40]	; 0x28
   16388:	add	r1, r8, #100	; 0x64
   1638c:	str	r3, [sp]
   16390:	mov	r3, #0
   16394:	ldr	r5, [r8, #48]	; 0x30
   16398:	blx	r5
   1639c:	cmp	r0, #0
   163a0:	beq	16214 <flatcc_builder_create_cached_vtable@@Base+0xd8>
   163a4:	b	16468 <flatcc_builder_create_cached_vtable@@Base+0x32c>
   163a8:	str	r5, [sp, #12]
   163ac:	b	16200 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   163b0:	ldr	r3, [r8, #172]	; 0xac
   163b4:	ldr	r9, [r8, #120]	; 0x78
   163b8:	cmp	r3, #0
   163bc:	add	r2, r9, r7
   163c0:	beq	16408 <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   163c4:	cmp	r3, r2
   163c8:	bcs	16408 <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   163cc:	ldr	r3, [r8, #116]	; 0x74
   163d0:	cmp	r3, #0
   163d4:	beq	16274 <flatcc_builder_create_cached_vtable@@Base+0x138>
   163d8:	ldr	r6, [sp, #12]
   163dc:	ldr	r2, [r8, #96]	; 0x60
   163e0:	mov	r1, r6
   163e4:	ldr	r0, [r8, #92]	; 0x5c
   163e8:	bl	11fd8 <memset@plt>
   163ec:	mov	r3, #16
   163f0:	ldr	r0, [r5, r4]
   163f4:	str	r6, [r8, #120]	; 0x78
   163f8:	str	r3, [r8, #124]	; 0x7c
   163fc:	b	16274 <flatcc_builder_create_cached_vtable@@Base+0x138>
   16400:	mov	r3, #32
   16404:	b	1634c <flatcc_builder_create_cached_vtable@@Base+0x210>
   16408:	ldr	r3, [r8, #72]	; 0x48
   1640c:	cmp	r3, r2
   16410:	bcc	16444 <flatcc_builder_create_cached_vtable@@Base+0x308>
   16414:	ldr	r3, [r8, #68]	; 0x44
   16418:	adds	r0, r3, r9
   1641c:	beq	1646c <flatcc_builder_create_cached_vtable@@Base+0x330>
   16420:	ldr	r3, [r8, #120]	; 0x78
   16424:	ldr	r1, [sp, #8]
   16428:	add	ip, r3, r7
   1642c:	str	r3, [r6, #8]
   16430:	mov	r2, r7
   16434:	str	ip, [r8, #120]	; 0x78
   16438:	bl	11f6c <memcpy@plt>
   1643c:	ldr	r0, [r5, r4]
   16440:	b	16274 <flatcc_builder_create_cached_vtable@@Base+0x138>
   16444:	mov	r3, #2
   16448:	ldr	r0, [r8, #40]	; 0x28
   1644c:	add	r1, r8, #68	; 0x44
   16450:	str	r3, [sp]
   16454:	mov	r3, #0
   16458:	ldr	sl, [r8, #48]	; 0x30
   1645c:	blx	sl
   16460:	cmp	r0, #0
   16464:	beq	16414 <flatcc_builder_create_cached_vtable@@Base+0x2d8>
   16468:	bl	12074 <__assert_fail@plt+0x78>
   1646c:	mvn	r0, #0
   16470:	b	16274 <flatcc_builder_create_cached_vtable@@Base+0x138>
   16474:	ldr	r3, [pc, #12]	; 16488 <flatcc_builder_create_cached_vtable@@Base+0x34c>
   16478:	ldr	r2, [pc, #12]	; 1648c <flatcc_builder_create_cached_vtable@@Base+0x350>
   1647c:	ldr	r1, [pc, #12]	; 16490 <flatcc_builder_create_cached_vtable@@Base+0x354>
   16480:	ldr	r0, [pc, #12]	; 16494 <flatcc_builder_create_cached_vtable@@Base+0x358>
   16484:	bl	11ffc <__assert_fail@plt>
   16488:	andeq	r9, r1, r8, lsl #18
   1648c:	andeq	r0, r0, r6, asr r1
   16490:	andeq	r9, r1, r8, lsl #23
   16494:	andeq	r9, r1, r4, lsr #28

00016498 <flatcc_builder_create_table@@Base>:
   16498:	push	{r4, r5, r6, r7, r8, lr}
   1649c:	sub	sp, sp, #88	; 0x58
   164a0:	ldr	r4, [sp, #116]	; 0x74
   164a4:	ldr	lr, [sp, #120]	; 0x78
   164a8:	cmp	r4, #0
   164ac:	blt	165e4 <flatcc_builder_create_table@@Base+0x14c>
   164b0:	mov	r8, r2
   164b4:	ands	r2, lr, #1
   164b8:	beq	16610 <flatcc_builder_create_table@@Base+0x178>
   164bc:	mov	r5, r0
   164c0:	ldrh	r0, [r0, #128]	; 0x80
   164c4:	cmp	r3, #4
   164c8:	movcc	r3, #4
   164cc:	ldr	ip, [r5, #136]	; 0x88
   164d0:	cmp	r0, r3
   164d4:	mvn	r0, #3
   164d8:	strhcc	r3, [r5, #128]	; 0x80
   164dc:	sub	r7, ip, r8
   164e0:	sub	r3, r3, #1
   164e4:	sub	r0, r0, r8
   164e8:	and	r7, r7, r3
   164ec:	add	r0, r0, ip
   164f0:	sub	lr, lr, #1
   164f4:	sub	r0, r0, r7
   164f8:	sub	lr, r0, lr
   164fc:	cmp	r4, #0
   16500:	str	lr, [sp, #12]
   16504:	beq	16538 <flatcc_builder_create_table@@Base+0xa0>
   16508:	ldr	ip, [sp, #112]	; 0x70
   1650c:	mvn	r6, #3
   16510:	add	r4, ip, r4, lsl #1
   16514:	sub	r6, r6, r0
   16518:	ldrh	r3, [ip], #2
   1651c:	sub	lr, r6, r3
   16520:	ldr	r0, [r1, r3]
   16524:	cmp	r4, ip
   16528:	add	r0, r0, lr
   1652c:	str	r0, [r1, r3]
   16530:	bne	16518 <flatcc_builder_create_table@@Base+0x80>
   16534:	ldr	ip, [r5, #136]	; 0x88
   16538:	cmp	r8, #0
   1653c:	mov	r3, #4
   16540:	mov	r0, #1
   16544:	str	r3, [sp, #16]
   16548:	movne	r2, #2
   1654c:	str	r3, [sp, #28]
   16550:	addne	r3, r8, r3
   16554:	str	r0, [sp, #20]
   16558:	add	lr, sp, #12
   1655c:	strne	r1, [sp, #32]
   16560:	strne	r8, [sp, #36]	; 0x24
   16564:	strne	r3, [sp, #16]
   16568:	strne	r2, [sp, #20]
   1656c:	movne	r0, #3
   16570:	moveq	r0, #2
   16574:	cmp	r7, #0
   16578:	str	lr, [sp, #24]
   1657c:	beq	165a8 <flatcc_builder_create_table@@Base+0x110>
   16580:	add	r2, r2, #1
   16584:	add	r1, sp, #88	; 0x58
   16588:	add	r1, r1, r2, lsl #3
   1658c:	ldr	lr, [pc, #144]	; 16624 <flatcc_builder_create_table@@Base+0x18c>
   16590:	mov	r2, r0
   16594:	add	r3, r3, r7
   16598:	str	r7, [r1, #-68]	; 0xffffffbc
   1659c:	str	r3, [sp, #16]
   165a0:	str	r0, [sp, #20]
   165a4:	str	lr, [r1, #-72]	; 0xffffffb8
   165a8:	sub	r4, ip, r3
   165ac:	cmp	r4, ip
   165b0:	bge	1660c <flatcc_builder_create_table@@Base+0x174>
   165b4:	ldr	r0, [r5, #36]	; 0x24
   165b8:	add	r1, sp, #24
   165bc:	str	r3, [sp]
   165c0:	mov	r3, r4
   165c4:	ldr	r6, [r5, #44]	; 0x2c
   165c8:	blx	r6
   165cc:	cmp	r0, #0
   165d0:	bne	165f8 <flatcc_builder_create_table@@Base+0x160>
   165d4:	mov	r0, r4
   165d8:	str	r4, [r5, #136]	; 0x88
   165dc:	add	sp, sp, #88	; 0x58
   165e0:	pop	{r4, r5, r6, r7, r8, pc}
   165e4:	ldr	r3, [pc, #60]	; 16628 <flatcc_builder_create_table@@Base+0x190>
   165e8:	ldr	r2, [pc, #60]	; 1662c <flatcc_builder_create_table@@Base+0x194>
   165ec:	ldr	r1, [pc, #60]	; 16630 <flatcc_builder_create_table@@Base+0x198>
   165f0:	ldr	r0, [pc, #60]	; 16634 <flatcc_builder_create_table@@Base+0x19c>
   165f4:	bl	11ffc <__assert_fail@plt>
   165f8:	ldr	r3, [pc, #56]	; 16638 <flatcc_builder_create_table@@Base+0x1a0>
   165fc:	ldr	r2, [pc, #56]	; 1663c <flatcc_builder_create_table@@Base+0x1a4>
   16600:	ldr	r1, [pc, #40]	; 16630 <flatcc_builder_create_table@@Base+0x198>
   16604:	ldr	r0, [pc, #52]	; 16640 <flatcc_builder_create_table@@Base+0x1a8>
   16608:	bl	11ffc <__assert_fail@plt>
   1660c:	bl	120c0 <__assert_fail@plt+0xc4>
   16610:	ldr	r3, [pc, #16]	; 16628 <flatcc_builder_create_table@@Base+0x190>
   16614:	ldr	r2, [pc, #40]	; 16644 <flatcc_builder_create_table@@Base+0x1ac>
   16618:	ldr	r1, [pc, #16]	; 16630 <flatcc_builder_create_table@@Base+0x198>
   1661c:	ldr	r0, [pc, #36]	; 16648 <flatcc_builder_create_table@@Base+0x1b0>
   16620:	bl	11ffc <__assert_fail@plt>
   16624:	ldrdeq	r9, [r1], -r0
   16628:	andeq	r9, r1, r4, lsl r9
   1662c:	ldrdeq	r0, [r0], -r5
   16630:	andeq	r9, r1, r8, lsl #23
   16634:	andeq	r9, r1, r4, lsr lr
   16638:	andeq	r9, r1, r4, asr r4
   1663c:	andeq	r0, r0, fp, lsl #5
   16640:	andeq	r9, r1, r8, asr #24
   16644:	ldrdeq	r0, [r0], -fp
   16648:	andeq	r9, r1, r8, asr #28

0001664c <flatcc_builder_check_required_field@@Base>:
   1664c:	ldr	r3, [r0, #32]
   16650:	ldrh	r3, [r3, #14]
   16654:	cmp	r3, #3
   16658:	bne	16684 <flatcc_builder_check_required_field@@Base+0x38>
   1665c:	ldrh	r3, [r0, #8]
   16660:	cmp	r3, r1
   16664:	movls	r0, #0
   16668:	bls	16680 <flatcc_builder_check_required_field@@Base+0x34>
   1666c:	ldr	r3, [r0, #4]
   16670:	lsl	r1, r1, #1
   16674:	ldrh	r0, [r3, r1]
   16678:	adds	r0, r0, #0
   1667c:	movne	r0, #1
   16680:	bx	lr
   16684:	push	{r4, lr}
   16688:	ldr	r3, [pc, #12]	; 1669c <flatcc_builder_check_required_field@@Base+0x50>
   1668c:	ldr	r2, [pc, #12]	; 166a0 <flatcc_builder_check_required_field@@Base+0x54>
   16690:	ldr	r1, [pc, #12]	; 166a4 <flatcc_builder_check_required_field@@Base+0x58>
   16694:	ldr	r0, [pc, #12]	; 166a8 <flatcc_builder_check_required_field@@Base+0x5c>
   16698:	bl	11ffc <__assert_fail@plt>
   1669c:	andeq	r9, r1, r0, lsr r9
   166a0:	strdeq	r0, [r0], -r8
   166a4:	andeq	r9, r1, r8, lsl #23
   166a8:	andeq	r9, r1, r4, asr lr

000166ac <flatcc_builder_check_union_field@@Base>:
   166ac:	ldr	r3, [r0, #32]
   166b0:	ldrh	r3, [r3, #14]
   166b4:	cmp	r3, #3
   166b8:	bne	16734 <flatcc_builder_check_union_field@@Base+0x88>
   166bc:	cmp	r1, #0
   166c0:	beq	1670c <flatcc_builder_check_union_field@@Base+0x60>
   166c4:	ldrh	r3, [r0, #8]
   166c8:	cmp	r3, r1
   166cc:	bls	1670c <flatcc_builder_check_union_field@@Base+0x60>
   166d0:	sub	r1, r1, #-2147483647	; 0x80000001
   166d4:	ldr	r3, [r0, #4]
   166d8:	lsl	r1, r1, #1
   166dc:	ldrh	r2, [r3, r1]
   166e0:	cmp	r2, #0
   166e4:	beq	16720 <flatcc_builder_check_union_field@@Base+0x74>
   166e8:	ldr	r0, [r0, #16]
   166ec:	add	r1, r3, r1
   166f0:	ldrb	r2, [r0, r2]
   166f4:	ldrh	r1, [r1, #2]
   166f8:	cmp	r2, #0
   166fc:	bne	16714 <flatcc_builder_check_union_field@@Base+0x68>
   16700:	clz	r0, r1
   16704:	lsr	r0, r0, #5
   16708:	bx	lr
   1670c:	mov	r0, #0
   16710:	bx	lr
   16714:	adds	r0, r1, #0
   16718:	movne	r0, #1
   1671c:	b	16710 <flatcc_builder_check_union_field@@Base+0x64>
   16720:	add	r1, r3, r1
   16724:	ldrh	r1, [r1, #2]
   16728:	clz	r0, r1
   1672c:	lsr	r0, r0, #5
   16730:	bx	lr
   16734:	push	{r4, lr}
   16738:	ldr	r3, [pc, #12]	; 1674c <flatcc_builder_check_union_field@@Base+0xa0>
   1673c:	ldr	r2, [pc, #12]	; 16750 <flatcc_builder_check_union_field@@Base+0xa4>
   16740:	ldr	r1, [pc, #12]	; 16754 <flatcc_builder_check_union_field@@Base+0xa8>
   16744:	ldr	r0, [pc, #12]	; 16758 <flatcc_builder_check_union_field@@Base+0xac>
   16748:	bl	11ffc <__assert_fail@plt>
   1674c:	andeq	r9, r1, r4, asr r9
   16750:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   16754:	andeq	r9, r1, r8, lsl #23
   16758:	andeq	r9, r1, r4, asr lr

0001675c <flatcc_builder_check_required@@Base>:
   1675c:	ldr	r3, [r0, #32]
   16760:	ldrh	r3, [r3, #14]
   16764:	cmp	r3, #3
   16768:	bne	167cc <flatcc_builder_check_required@@Base+0x70>
   1676c:	ldrh	r3, [r0, #8]
   16770:	cmp	r3, r2
   16774:	movlt	r0, #0
   16778:	blt	167c8 <flatcc_builder_check_required@@Base+0x6c>
   1677c:	cmp	r2, #0
   16780:	ble	167c4 <flatcc_builder_check_required@@Base+0x68>
   16784:	ldrh	r3, [r1]
   16788:	ldr	ip, [r0, #4]
   1678c:	lsl	r3, r3, #1
   16790:	ldrh	r0, [ip, r3]
   16794:	cmp	r0, #0
   16798:	beq	167c8 <flatcc_builder_check_required@@Base+0x6c>
   1679c:	add	r2, r1, r2, lsl #1
   167a0:	add	r1, r1, #2
   167a4:	b	167bc <flatcc_builder_check_required@@Base+0x60>
   167a8:	ldrh	r3, [r1], #2
   167ac:	lsl	r3, r3, #1
   167b0:	ldrh	r0, [ip, r3]
   167b4:	cmp	r0, #0
   167b8:	beq	167c8 <flatcc_builder_check_required@@Base+0x6c>
   167bc:	cmp	r1, r2
   167c0:	bne	167a8 <flatcc_builder_check_required@@Base+0x4c>
   167c4:	mov	r0, #1
   167c8:	bx	lr
   167cc:	push	{r4, lr}
   167d0:	ldr	r3, [pc, #12]	; 167e4 <flatcc_builder_check_required@@Base+0x88>
   167d4:	ldr	r2, [pc, #12]	; 167e8 <flatcc_builder_check_required@@Base+0x8c>
   167d8:	ldr	r1, [pc, #12]	; 167ec <flatcc_builder_check_required@@Base+0x90>
   167dc:	ldr	r0, [pc, #12]	; 167f0 <flatcc_builder_check_required@@Base+0x94>
   167e0:	bl	11ffc <__assert_fail@plt>
   167e4:	andeq	r9, r1, r8, ror r9
   167e8:	andeq	r0, r0, r1, lsl r5
   167ec:	andeq	r9, r1, r8, lsl #23
   167f0:	andeq	r9, r1, r4, asr lr

000167f4 <flatcc_builder_end_table@@Base>:
   167f4:	ldr	r3, [r0, #32]
   167f8:	push	{r4, r5, r6, r7, lr}
   167fc:	sub	sp, sp, #20
   16800:	ldrh	r3, [r3, #14]
   16804:	cmp	r3, #3
   16808:	bne	1698c <flatcc_builder_end_table@@Base+0x198>
   1680c:	ldrh	r5, [r0, #8]
   16810:	ldr	r3, [r0, #12]
   16814:	ldr	r1, [pc, #388]	; 169a0 <flatcc_builder_end_table@@Base+0x1ac>
   16818:	add	r5, r5, #2
   1681c:	ldr	r2, [r0, #20]
   16820:	lsl	r5, r5, #1
   16824:	add	r2, r2, #4
   16828:	uxth	r5, r5
   1682c:	eor	r3, r3, r5
   16830:	uxth	r2, r2
   16834:	mul	r3, r1, r3
   16838:	ldr	ip, [r0, #4]
   1683c:	eor	r3, r3, r2
   16840:	sub	r6, ip, #4
   16844:	mul	r1, r1, r3
   16848:	strh	r2, [ip, #-2]
   1684c:	strh	r5, [ip, #-4]
   16850:	mov	r3, r1
   16854:	str	r1, [r0, #12]
   16858:	mov	r2, r5
   1685c:	mov	r1, r6
   16860:	mov	r4, r0
   16864:	bl	1613c <flatcc_builder_create_cached_vtable@@Base>
   16868:	subs	r7, r0, #0
   1686c:	bne	16880 <flatcc_builder_end_table@@Base+0x8c>
   16870:	mov	r5, #0
   16874:	mov	r0, r5
   16878:	add	sp, sp, #20
   1687c:	pop	{r4, r5, r6, r7, pc}
   16880:	mov	r2, r5
   16884:	mov	r1, #0
   16888:	mov	r0, r6
   1688c:	bl	11fd8 <memset@plt>
   16890:	ldr	r3, [r4, #32]
   16894:	ldr	ip, [r4, #76]	; 0x4c
   16898:	ldr	r0, [r4]
   1689c:	ldr	r2, [r3, #20]
   168a0:	ldr	r1, [r4, #16]
   168a4:	add	ip, ip, r2
   168a8:	sub	r0, r0, ip
   168ac:	ldrh	r3, [r4, #130]	; 0x82
   168b0:	asr	r0, r0, #1
   168b4:	ldr	r2, [r4, #20]
   168b8:	str	r0, [sp, #4]
   168bc:	str	r7, [sp, #8]
   168c0:	str	ip, [sp]
   168c4:	mov	r0, r4
   168c8:	bl	16498 <flatcc_builder_create_table@@Base>
   168cc:	subs	r5, r0, #0
   168d0:	beq	16870 <flatcc_builder_end_table@@Base+0x7c>
   168d4:	ldr	r3, [r4, #32]
   168d8:	ldr	r0, [r4, #52]	; 0x34
   168dc:	ldr	ip, [r4, #76]	; 0x4c
   168e0:	ldr	r1, [r3, #24]
   168e4:	ldr	r2, [r4, #20]
   168e8:	str	r1, [r4, #12]
   168ec:	ldrh	lr, [r3, #28]
   168f0:	mov	r1, #0
   168f4:	strh	lr, [r4, #8]
   168f8:	ldr	lr, [r3, #16]
   168fc:	add	r0, r0, lr
   16900:	str	r0, [r4, #4]
   16904:	ldr	r3, [r3, #20]
   16908:	ldr	r0, [r4, #16]
   1690c:	add	r3, ip, r3
   16910:	str	r3, [r4]
   16914:	bl	11fd8 <memset@plt>
   16918:	ldr	r3, [r4, #32]
   1691c:	ldr	r2, [r4, #64]	; 0x40
   16920:	ldrh	lr, [r4, #130]	; 0x82
   16924:	ldr	ip, [r3]
   16928:	ldr	r1, [r3, #4]
   1692c:	ldrh	r0, [r4, #128]	; 0x80
   16930:	sub	r2, r2, ip
   16934:	cmp	r2, r1
   16938:	movcs	r2, r1
   1693c:	cmp	r0, lr
   16940:	ldr	r0, [r4, #60]	; 0x3c
   16944:	ldr	r6, [r3, #8]
   16948:	str	r2, [r4, #24]
   1694c:	add	r2, r0, ip
   16950:	str	r2, [r4, #16]
   16954:	str	r6, [r4, #20]
   16958:	ldr	r2, [r4, #156]	; 0x9c
   1695c:	str	ip, [r4, #28]
   16960:	str	r1, [r3, #4]
   16964:	strhcc	lr, [r4, #128]	; 0x80
   16968:	ldrh	r1, [r3, #12]
   1696c:	sub	r2, r2, #1
   16970:	sub	r3, r3, #36	; 0x24
   16974:	mov	r0, r5
   16978:	str	r2, [r4, #156]	; 0x9c
   1697c:	strh	r1, [r4, #130]	; 0x82
   16980:	str	r3, [r4, #32]
   16984:	add	sp, sp, #20
   16988:	pop	{r4, r5, r6, r7, pc}
   1698c:	ldr	r3, [pc, #16]	; 169a4 <flatcc_builder_end_table@@Base+0x1b0>
   16990:	ldr	r2, [pc, #16]	; 169a8 <flatcc_builder_end_table@@Base+0x1b4>
   16994:	ldr	r1, [pc, #16]	; 169ac <flatcc_builder_end_table@@Base+0x1b8>
   16998:	ldr	r0, [pc, #16]	; 169b0 <flatcc_builder_end_table@@Base+0x1bc>
   1699c:	bl	11ffc <__assert_fail@plt>
   169a0:			; <UNDEFINED> instruction: 0x9e3779b1
   169a4:	muleq	r1, r8, r9
   169a8:	andeq	r0, r0, r5, lsr #10
   169ac:	andeq	r9, r1, r8, lsl #23
   169b0:	andeq	r9, r1, r4, asr lr

000169b4 <flatcc_builder_create_vector@@Base>:
   169b4:	push	{r4, r5, r6, lr}
   169b8:	sub	sp, sp, #88	; 0x58
   169bc:	mov	r4, r0
   169c0:	ldr	ip, [sp, #108]	; 0x6c
   169c4:	ldrh	r0, [sp, #104]	; 0x68
   169c8:	cmp	r2, ip
   169cc:	bhi	16aa8 <flatcc_builder_create_vector@@Base+0xf4>
   169d0:	ldrh	ip, [r4, #128]	; 0x80
   169d4:	mul	r3, r3, r2
   169d8:	cmp	r0, #4
   169dc:	movcc	r0, #4
   169e0:	ldr	lr, [r4, #136]	; 0x88
   169e4:	cmp	ip, r0
   169e8:	sub	r6, lr, r3
   169ec:	mov	ip, #4
   169f0:	strhcc	r0, [r4, #128]	; 0x80
   169f4:	str	r2, [sp, #12]
   169f8:	cmp	r3, #0
   169fc:	mov	r2, #1
   16a00:	sub	r0, r0, #1
   16a04:	str	ip, [sp, #16]
   16a08:	str	r2, [sp, #20]
   16a0c:	and	r0, r0, r6
   16a10:	movne	r2, #2
   16a14:	str	ip, [sp, #28]
   16a18:	addne	ip, r3, ip
   16a1c:	strne	r3, [sp, #36]	; 0x24
   16a20:	add	r5, sp, #12
   16a24:	strne	r1, [sp, #32]
   16a28:	strne	ip, [sp, #16]
   16a2c:	strne	r2, [sp, #20]
   16a30:	movne	r3, #3
   16a34:	moveq	r3, #2
   16a38:	cmp	r0, #0
   16a3c:	str	r5, [sp, #24]
   16a40:	beq	16a6c <flatcc_builder_create_vector@@Base+0xb8>
   16a44:	add	r2, r2, #1
   16a48:	add	r1, sp, #88	; 0x58
   16a4c:	add	r1, r1, r2, lsl #3
   16a50:	ldr	r5, [pc, #124]	; 16ad4 <flatcc_builder_create_vector@@Base+0x120>
   16a54:	mov	r2, r3
   16a58:	add	ip, ip, r0
   16a5c:	str	r0, [r1, #-68]	; 0xffffffbc
   16a60:	str	ip, [sp, #16]
   16a64:	str	r3, [sp, #20]
   16a68:	str	r5, [r1, #-72]	; 0xffffffb8
   16a6c:	sub	r5, lr, ip
   16a70:	cmp	lr, r5
   16a74:	ble	16ad0 <flatcc_builder_create_vector@@Base+0x11c>
   16a78:	ldr	r0, [r4, #36]	; 0x24
   16a7c:	mov	r3, r5
   16a80:	str	ip, [sp]
   16a84:	add	r1, sp, #24
   16a88:	ldr	r6, [r4, #44]	; 0x2c
   16a8c:	blx	r6
   16a90:	cmp	r0, #0
   16a94:	bne	16abc <flatcc_builder_create_vector@@Base+0x108>
   16a98:	mov	r0, r5
   16a9c:	str	r5, [r4, #136]	; 0x88
   16aa0:	add	sp, sp, #88	; 0x58
   16aa4:	pop	{r4, r5, r6, pc}
   16aa8:	ldr	r3, [pc, #40]	; 16ad8 <flatcc_builder_create_vector@@Base+0x124>
   16aac:	ldr	r2, [pc, #40]	; 16adc <flatcc_builder_create_vector@@Base+0x128>
   16ab0:	ldr	r1, [pc, #40]	; 16ae0 <flatcc_builder_create_vector@@Base+0x12c>
   16ab4:	ldr	r0, [pc, #40]	; 16ae4 <flatcc_builder_create_vector@@Base+0x130>
   16ab8:	bl	11ffc <__assert_fail@plt>
   16abc:	ldr	r3, [pc, #36]	; 16ae8 <flatcc_builder_create_vector@@Base+0x134>
   16ac0:	ldr	r2, [pc, #36]	; 16aec <flatcc_builder_create_vector@@Base+0x138>
   16ac4:	ldr	r1, [pc, #20]	; 16ae0 <flatcc_builder_create_vector@@Base+0x12c>
   16ac8:	ldr	r0, [pc, #32]	; 16af0 <flatcc_builder_create_vector@@Base+0x13c>
   16acc:	bl	11ffc <__assert_fail@plt>
   16ad0:	bl	120c0 <__assert_fail@plt+0xc4>
   16ad4:	ldrdeq	r9, [r1], -r0
   16ad8:			; <UNDEFINED> instruction: 0x000199b4
   16adc:	andeq	r0, r0, r5, asr r5
   16ae0:	andeq	r9, r1, r8, lsl #23
   16ae4:	andeq	r9, r1, r0, lsl #29
   16ae8:	andeq	r9, r1, r4, asr r4
   16aec:	andeq	r0, r0, fp, lsl #5
   16af0:	andeq	r9, r1, r8, asr #24

00016af4 <flatcc_builder_end_vector@@Base>:
   16af4:	ldr	r3, [r0, #32]
   16af8:	push	{r4, r5, r6, lr}
   16afc:	sub	sp, sp, #88	; 0x58
   16b00:	ldrh	r2, [r3, #14]
   16b04:	cmp	r2, #4
   16b08:	bne	16cac <flatcc_builder_end_vector@@Base+0x1b8>
   16b0c:	ldr	lr, [r3, #20]
   16b10:	ldr	r2, [r3, #24]
   16b14:	ldr	r1, [r3, #16]
   16b18:	cmp	lr, r2
   16b1c:	mov	r4, r0
   16b20:	ldr	r5, [r0, #16]
   16b24:	ldrh	r3, [r0, #130]	; 0x82
   16b28:	bhi	16c98 <flatcc_builder_end_vector@@Base+0x1a4>
   16b2c:	ldrh	r2, [r0, #128]	; 0x80
   16b30:	mul	r1, r1, lr
   16b34:	cmp	r3, #4
   16b38:	movcc	r3, #4
   16b3c:	ldr	ip, [r0, #136]	; 0x88
   16b40:	cmp	r2, r3
   16b44:	strhcc	r3, [r0, #128]	; 0x80
   16b48:	sub	r2, r3, #1
   16b4c:	sub	r0, ip, r1
   16b50:	cmp	r1, #0
   16b54:	mov	r3, #4
   16b58:	and	r0, r0, r2
   16b5c:	mov	r2, #1
   16b60:	str	r3, [sp, #16]
   16b64:	str	r2, [sp, #20]
   16b68:	str	r3, [sp, #28]
   16b6c:	movne	r2, #2
   16b70:	addne	r3, r1, r3
   16b74:	strne	r1, [sp, #36]	; 0x24
   16b78:	str	lr, [sp, #12]
   16b7c:	strne	r5, [sp, #32]
   16b80:	add	lr, sp, #12
   16b84:	strne	r3, [sp, #16]
   16b88:	strne	r2, [sp, #20]
   16b8c:	movne	r1, #3
   16b90:	moveq	r1, #2
   16b94:	cmp	r0, #0
   16b98:	str	lr, [sp, #24]
   16b9c:	beq	16bc8 <flatcc_builder_end_vector@@Base+0xd4>
   16ba0:	add	r2, r2, #1
   16ba4:	add	lr, sp, #88	; 0x58
   16ba8:	add	lr, lr, r2, lsl #3
   16bac:	ldr	r5, [pc, #268]	; 16cc0 <flatcc_builder_end_vector@@Base+0x1cc>
   16bb0:	mov	r2, r1
   16bb4:	add	r3, r3, r0
   16bb8:	str	r0, [lr, #-68]	; 0xffffffbc
   16bbc:	str	r3, [sp, #16]
   16bc0:	str	r1, [sp, #20]
   16bc4:	str	r5, [lr, #-72]	; 0xffffffb8
   16bc8:	sub	r5, ip, r3
   16bcc:	cmp	ip, r5
   16bd0:	ble	16c94 <flatcc_builder_end_vector@@Base+0x1a0>
   16bd4:	ldr	r0, [r4, #36]	; 0x24
   16bd8:	add	r1, sp, #24
   16bdc:	str	r3, [sp]
   16be0:	mov	r3, r5
   16be4:	ldr	r6, [r4, #44]	; 0x2c
   16be8:	blx	r6
   16bec:	subs	r1, r0, #0
   16bf0:	bne	16c80 <flatcc_builder_end_vector@@Base+0x18c>
   16bf4:	cmp	r5, #0
   16bf8:	str	r5, [r4, #136]	; 0x88
   16bfc:	beq	16c74 <flatcc_builder_end_vector@@Base+0x180>
   16c00:	ldr	r2, [r4, #20]
   16c04:	ldr	r0, [r4, #16]
   16c08:	bl	11fd8 <memset@plt>
   16c0c:	ldr	r3, [r4, #32]
   16c10:	ldr	r2, [r4, #64]	; 0x40
   16c14:	ldrh	lr, [r4, #130]	; 0x82
   16c18:	ldr	ip, [r3]
   16c1c:	ldr	r1, [r3, #4]
   16c20:	ldrh	r0, [r4, #128]	; 0x80
   16c24:	sub	r2, r2, ip
   16c28:	cmp	r2, r1
   16c2c:	movcs	r2, r1
   16c30:	cmp	r0, lr
   16c34:	ldr	r0, [r4, #60]	; 0x3c
   16c38:	ldr	r6, [r3, #8]
   16c3c:	str	r2, [r4, #24]
   16c40:	add	r2, r0, ip
   16c44:	str	r2, [r4, #16]
   16c48:	str	r6, [r4, #20]
   16c4c:	ldr	r2, [r4, #156]	; 0x9c
   16c50:	str	ip, [r4, #28]
   16c54:	str	r1, [r3, #4]
   16c58:	strhcc	lr, [r4, #128]	; 0x80
   16c5c:	ldrh	r1, [r3, #12]
   16c60:	sub	r2, r2, #1
   16c64:	sub	r3, r3, #36	; 0x24
   16c68:	str	r2, [r4, #156]	; 0x9c
   16c6c:	strh	r1, [r4, #130]	; 0x82
   16c70:	str	r3, [r4, #32]
   16c74:	mov	r0, r5
   16c78:	add	sp, sp, #88	; 0x58
   16c7c:	pop	{r4, r5, r6, pc}
   16c80:	ldr	r3, [pc, #60]	; 16cc4 <flatcc_builder_end_vector@@Base+0x1d0>
   16c84:	ldr	r2, [pc, #60]	; 16cc8 <flatcc_builder_end_vector@@Base+0x1d4>
   16c88:	ldr	r1, [pc, #60]	; 16ccc <flatcc_builder_end_vector@@Base+0x1d8>
   16c8c:	ldr	r0, [pc, #60]	; 16cd0 <flatcc_builder_end_vector@@Base+0x1dc>
   16c90:	bl	11ffc <__assert_fail@plt>
   16c94:	bl	120c0 <__assert_fail@plt+0xc4>
   16c98:	ldr	r3, [pc, #52]	; 16cd4 <flatcc_builder_end_vector@@Base+0x1e0>
   16c9c:	ldr	r2, [pc, #52]	; 16cd8 <flatcc_builder_end_vector@@Base+0x1e4>
   16ca0:	ldr	r1, [pc, #36]	; 16ccc <flatcc_builder_end_vector@@Base+0x1d8>
   16ca4:	ldr	r0, [pc, #48]	; 16cdc <flatcc_builder_end_vector@@Base+0x1e8>
   16ca8:	bl	11ffc <__assert_fail@plt>
   16cac:	ldr	r3, [pc, #44]	; 16ce0 <flatcc_builder_end_vector@@Base+0x1ec>
   16cb0:	ldr	r2, [pc, #44]	; 16ce4 <flatcc_builder_end_vector@@Base+0x1f0>
   16cb4:	ldr	r1, [pc, #16]	; 16ccc <flatcc_builder_end_vector@@Base+0x1d8>
   16cb8:	ldr	r0, [pc, #40]	; 16ce8 <flatcc_builder_end_vector@@Base+0x1f4>
   16cbc:	bl	11ffc <__assert_fail@plt>
   16cc0:	ldrdeq	r9, [r1], -r0
   16cc4:	andeq	r9, r1, r4, asr r4
   16cc8:	andeq	r0, r0, fp, lsl #5
   16ccc:	andeq	r9, r1, r8, lsl #23
   16cd0:	andeq	r9, r1, r8, asr #24
   16cd4:			; <UNDEFINED> instruction: 0x000199b4
   16cd8:	andeq	r0, r0, r5, asr r5
   16cdc:	andeq	r9, r1, r0, lsl #29
   16ce0:	ldrdeq	r9, [r1], -r4
   16ce4:	andeq	r0, r0, r8, ror r5
   16ce8:	strdeq	r9, [r1], -r4

00016cec <flatcc_builder_vector_count@@Base>:
   16cec:	ldr	r3, [r0, #32]
   16cf0:	ldr	r0, [r3, #20]
   16cf4:	bx	lr

00016cf8 <flatcc_builder_vector_edit@@Base>:
   16cf8:	ldr	r0, [r0, #16]
   16cfc:	bx	lr

00016d00 <flatcc_builder_create_offset_vector_direct@@Base>:
   16d00:	cmn	r2, #-1073741823	; 0xc0000001
   16d04:	bls	16d10 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   16d08:	mov	r0, #0
   16d0c:	bx	lr
   16d10:	b	134d4 <flatcc_builder_default_alloc@@Base+0x2fc>

00016d14 <flatcc_builder_end_offset_vector@@Base>:
   16d14:	ldr	r3, [r0, #32]
   16d18:	push	{r4, r5, r6, lr}
   16d1c:	ldrh	r2, [r3, #14]
   16d20:	cmp	r2, #5
   16d24:	bne	16dd4 <flatcc_builder_end_offset_vector@@Base+0xc0>
   16d28:	ldr	r2, [r3, #20]
   16d2c:	cmn	r2, #-1073741823	; 0xc0000001
   16d30:	bls	16d40 <flatcc_builder_end_offset_vector@@Base+0x2c>
   16d34:	mov	r5, #0
   16d38:	mov	r0, r5
   16d3c:	pop	{r4, r5, r6, pc}
   16d40:	ldr	r1, [r0, #16]
   16d44:	mov	r4, r0
   16d48:	bl	134d4 <flatcc_builder_default_alloc@@Base+0x2fc>
   16d4c:	subs	r5, r0, #0
   16d50:	beq	16d34 <flatcc_builder_end_offset_vector@@Base+0x20>
   16d54:	ldr	r2, [r4, #20]
   16d58:	mov	r1, #0
   16d5c:	ldr	r0, [r4, #16]
   16d60:	bl	11fd8 <memset@plt>
   16d64:	ldr	r3, [r4, #32]
   16d68:	ldr	r2, [r4, #64]	; 0x40
   16d6c:	ldrh	lr, [r4, #130]	; 0x82
   16d70:	ldr	ip, [r3]
   16d74:	ldr	r1, [r3, #4]
   16d78:	ldrh	r0, [r4, #128]	; 0x80
   16d7c:	sub	r2, r2, ip
   16d80:	cmp	r2, r1
   16d84:	movcs	r2, r1
   16d88:	cmp	r0, lr
   16d8c:	ldr	r0, [r4, #60]	; 0x3c
   16d90:	ldr	r6, [r3, #8]
   16d94:	str	r2, [r4, #24]
   16d98:	add	r2, r0, ip
   16d9c:	str	r2, [r4, #16]
   16da0:	str	r6, [r4, #20]
   16da4:	ldr	r2, [r4, #156]	; 0x9c
   16da8:	str	ip, [r4, #28]
   16dac:	str	r1, [r3, #4]
   16db0:	strhcc	lr, [r4, #128]	; 0x80
   16db4:	ldrh	r1, [r3, #12]
   16db8:	sub	r2, r2, #1
   16dbc:	sub	r3, r3, #36	; 0x24
   16dc0:	str	r2, [r4, #156]	; 0x9c
   16dc4:	strh	r1, [r4, #130]	; 0x82
   16dc8:	str	r3, [r4, #32]
   16dcc:	mov	r0, r5
   16dd0:	pop	{r4, r5, r6, pc}
   16dd4:	ldr	r3, [pc, #12]	; 16de8 <flatcc_builder_end_offset_vector@@Base+0xd4>
   16dd8:	ldr	r2, [pc, #12]	; 16dec <flatcc_builder_end_offset_vector@@Base+0xd8>
   16ddc:	ldr	r1, [pc, #12]	; 16df0 <flatcc_builder_end_offset_vector@@Base+0xdc>
   16de0:	ldr	r0, [pc, #12]	; 16df4 <flatcc_builder_end_offset_vector@@Base+0xe0>
   16de4:	bl	11ffc <__assert_fail@plt>
   16de8:	andeq	r9, r1, r4, asr #17
   16dec:	andeq	r0, r0, r8, asr #11
   16df0:	andeq	r9, r1, r8, lsl #23
   16df4:	andeq	r9, r1, r0, ror #26

00016df8 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   16df8:	ldr	r2, [r0, #32]
   16dfc:	push	{r4, r5, r6, lr}
   16e00:	ldrh	ip, [r2, #14]
   16e04:	cmp	ip, #5
   16e08:	bne	16ebc <flatcc_builder_end_offset_vector_for_unions@@Base+0xc4>
   16e0c:	ldr	r2, [r2, #20]
   16e10:	cmn	r2, #-1073741823	; 0xc0000001
   16e14:	bls	16e24 <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   16e18:	mov	r5, #0
   16e1c:	mov	r0, r5
   16e20:	pop	{r4, r5, r6, pc}
   16e24:	mov	r3, r1
   16e28:	ldr	r1, [r0, #16]
   16e2c:	mov	r4, r0
   16e30:	bl	132e4 <flatcc_builder_default_alloc@@Base+0x10c>
   16e34:	subs	r5, r0, #0
   16e38:	beq	16e18 <flatcc_builder_end_offset_vector_for_unions@@Base+0x20>
   16e3c:	ldr	r2, [r4, #20]
   16e40:	mov	r1, #0
   16e44:	ldr	r0, [r4, #16]
   16e48:	bl	11fd8 <memset@plt>
   16e4c:	ldr	r3, [r4, #32]
   16e50:	ldr	r2, [r4, #64]	; 0x40
   16e54:	ldrh	lr, [r4, #130]	; 0x82
   16e58:	ldr	ip, [r3]
   16e5c:	ldr	r1, [r3, #4]
   16e60:	ldrh	r0, [r4, #128]	; 0x80
   16e64:	sub	r2, r2, ip
   16e68:	cmp	r2, r1
   16e6c:	movcs	r2, r1
   16e70:	cmp	r0, lr
   16e74:	ldr	r0, [r4, #60]	; 0x3c
   16e78:	ldr	r6, [r3, #8]
   16e7c:	str	r2, [r4, #24]
   16e80:	add	r2, r0, ip
   16e84:	str	r2, [r4, #16]
   16e88:	str	r6, [r4, #20]
   16e8c:	ldr	r2, [r4, #156]	; 0x9c
   16e90:	str	ip, [r4, #28]
   16e94:	str	r1, [r3, #4]
   16e98:	strhcc	lr, [r4, #128]	; 0x80
   16e9c:	ldrh	r1, [r3, #12]
   16ea0:	sub	r2, r2, #1
   16ea4:	sub	r3, r3, #36	; 0x24
   16ea8:	str	r2, [r4, #156]	; 0x9c
   16eac:	strh	r1, [r4, #130]	; 0x82
   16eb0:	str	r3, [r4, #32]
   16eb4:	mov	r0, r5
   16eb8:	pop	{r4, r5, r6, pc}
   16ebc:	ldr	r3, [pc, #12]	; 16ed0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd8>
   16ec0:	ldr	r2, [pc, #12]	; 16ed4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xdc>
   16ec4:	ldr	r1, [pc, #12]	; 16ed8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe0>
   16ec8:	ldr	r0, [pc, #12]	; 16edc <flatcc_builder_end_offset_vector_for_unions@@Base+0xe4>
   16ecc:	bl	11ffc <__assert_fail@plt>
   16ed0:	strdeq	r9, [r1], -r0
   16ed4:	ldrdeq	r0, [r0], -r5
   16ed8:	andeq	r9, r1, r8, lsl #23
   16edc:	andeq	r9, r1, r0, ror #26

00016ee0 <flatcc_builder_offset_vector_edit@@Base>:
   16ee0:	ldr	r0, [r0, #16]
   16ee4:	bx	lr

00016ee8 <flatcc_builder_offset_vector_count@@Base>:
   16ee8:	ldr	r3, [r0, #32]
   16eec:	ldr	r0, [r3, #20]
   16ef0:	bx	lr

00016ef4 <flatcc_builder_create_union_vector@@Base>:
   16ef4:	push	{r4, r5, r6, r7, r8, r9, lr}
   16ef8:	mov	r6, r0
   16efc:	ldr	r0, [r1, #156]	; 0x9c
   16f00:	ldr	ip, [r1, #160]	; 0xa0
   16f04:	mov	r4, r1
   16f08:	add	r1, r0, #1
   16f0c:	cmp	r1, ip
   16f10:	sub	sp, sp, #12
   16f14:	mov	r5, r2
   16f18:	mov	r7, r3
   16f1c:	str	r1, [r4, #156]	; 0x9c
   16f20:	ble	16fa8 <flatcc_builder_create_union_vector@@Base+0xb4>
   16f24:	ldr	r3, [r4, #176]	; 0xb0
   16f28:	cmp	r1, r3
   16f2c:	cmpgt	r3, #0
   16f30:	movgt	r3, #1
   16f34:	movle	r3, #0
   16f38:	bgt	16f90 <flatcc_builder_create_union_vector@@Base+0x9c>
   16f3c:	add	r0, r0, r0, lsl #3
   16f40:	ldr	r1, [r4, #88]	; 0x58
   16f44:	lsl	r8, r0, #2
   16f48:	add	r2, r8, #36	; 0x24
   16f4c:	cmp	r2, r1
   16f50:	bhi	171c4 <flatcc_builder_create_union_vector@@Base+0x2d0>
   16f54:	ldr	r3, [r4, #84]	; 0x54
   16f58:	add	r3, r3, r8
   16f5c:	cmp	r3, #0
   16f60:	str	r3, [r4, #32]
   16f64:	beq	16f90 <flatcc_builder_create_union_vector@@Base+0x9c>
   16f68:	ldr	r2, [r4, #88]	; 0x58
   16f6c:	ldr	r0, [pc, #732]	; 17250 <flatcc_builder_create_union_vector@@Base+0x35c>
   16f70:	ldr	r1, [r4, #176]	; 0xb0
   16f74:	umull	r0, r2, r0, r2
   16f78:	lsr	r2, r2, #3
   16f7c:	cmp	r1, #0
   16f80:	cmpgt	r2, r1
   16f84:	str	r2, [r4, #160]	; 0xa0
   16f88:	strgt	r1, [r4, #160]	; 0xa0
   16f8c:	b	16fb4 <flatcc_builder_create_union_vector@@Base+0xc0>
   16f90:	mov	r3, #0
   16f94:	mov	r0, r6
   16f98:	str	r3, [r6]
   16f9c:	str	r3, [r6, #4]
   16fa0:	add	sp, sp, #12
   16fa4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16fa8:	ldr	r3, [r4, #32]
   16fac:	add	r3, r3, #36	; 0x24
   16fb0:	str	r3, [r4, #32]
   16fb4:	ldr	r1, [r4, #20]
   16fb8:	ldr	ip, [r4, #28]
   16fbc:	ldrh	r8, [r4, #130]	; 0x82
   16fc0:	add	r2, r1, ip
   16fc4:	mvn	lr, #3
   16fc8:	add	r2, r2, #7
   16fcc:	str	r1, [r3, #8]
   16fd0:	bic	r2, r2, #7
   16fd4:	mov	r0, #4
   16fd8:	mov	r1, #0
   16fdc:	strh	r8, [r3, #12]
   16fe0:	strh	r0, [r4, #130]	; 0x82
   16fe4:	stm	r3, {ip, lr}
   16fe8:	str	r1, [r4, #20]
   16fec:	str	r2, [r4, #28]
   16ff0:	str	r0, [r3, #16]
   16ff4:	str	r1, [r3, #20]
   16ff8:	ldr	r0, [r4, #64]	; 0x40
   16ffc:	ldr	r1, [r4, #60]	; 0x3c
   17000:	sub	r0, r0, r2
   17004:	cmp	r0, lr
   17008:	mov	ip, #5
   1700c:	strh	ip, [r3, #14]
   17010:	add	r1, r1, r2
   17014:	strls	r0, [r4, #24]
   17018:	strhi	lr, [r4, #24]
   1701c:	movhi	r0, lr
   17020:	mvn	r8, #3
   17024:	cmn	r7, #-1073741823	; 0xc0000001
   17028:	str	r1, [r4, #16]
   1702c:	str	r8, [r3, #4]
   17030:	bhi	17244 <flatcc_builder_create_union_vector@@Base+0x350>
   17034:	lsl	ip, r7, #2
   17038:	cmp	ip, r0
   1703c:	str	r7, [r3, #20]
   17040:	str	ip, [r4, #20]
   17044:	bcs	1716c <flatcc_builder_create_union_vector@@Base+0x278>
   17048:	cmp	r1, #0
   1704c:	beq	16f90 <flatcc_builder_create_union_vector@@Base+0x9c>
   17050:	ldr	r8, [r4, #20]
   17054:	ldr	r0, [r4, #24]
   17058:	add	r3, r7, r8
   1705c:	cmp	r3, r0
   17060:	str	r3, [r4, #20]
   17064:	bcs	171e8 <flatcc_builder_create_union_vector@@Base+0x2f4>
   17068:	adds	r8, r1, r8
   1706c:	beq	16f90 <flatcc_builder_create_union_vector@@Base+0x9c>
   17070:	cmp	r7, #0
   17074:	movne	r2, r5
   17078:	addne	lr, r2, r7, lsl #3
   1707c:	subne	r0, r8, #1
   17080:	subne	r3, r1, #4
   17084:	beq	170a4 <flatcc_builder_create_union_vector@@Base+0x1b0>
   17088:	ldrb	ip, [r2]
   1708c:	add	r2, r2, #8
   17090:	strb	ip, [r0, #1]!
   17094:	ldr	ip, [r2, #-4]
   17098:	cmp	lr, r2
   1709c:	str	ip, [r3, #4]!
   170a0:	bne	17088 <flatcc_builder_create_union_vector@@Base+0x194>
   170a4:	mov	r3, r8
   170a8:	mov	r2, r7
   170ac:	mov	r0, r4
   170b0:	bl	132e4 <flatcc_builder_default_alloc@@Base+0x10c>
   170b4:	subs	r5, r0, #0
   170b8:	beq	17248 <flatcc_builder_create_union_vector@@Base+0x354>
   170bc:	mvn	r0, #0
   170c0:	mov	r3, #1
   170c4:	mov	r2, r7
   170c8:	str	r0, [sp, #4]
   170cc:	mov	r1, r8
   170d0:	str	r3, [sp]
   170d4:	mov	r0, r4
   170d8:	bl	169b4 <flatcc_builder_create_vector@@Base>
   170dc:	mov	r7, r0
   170e0:	ldr	r2, [r4, #20]
   170e4:	mov	r1, #0
   170e8:	ldr	r0, [r4, #16]
   170ec:	bl	11fd8 <memset@plt>
   170f0:	ldr	r3, [r4, #32]
   170f4:	ldr	r2, [r4, #64]	; 0x40
   170f8:	ldrh	lr, [r4, #130]	; 0x82
   170fc:	ldr	ip, [r3]
   17100:	ldr	r1, [r3, #4]
   17104:	ldrh	r0, [r4, #128]	; 0x80
   17108:	sub	r2, r2, ip
   1710c:	cmp	r2, r1
   17110:	movcs	r2, r1
   17114:	cmp	r0, lr
   17118:	ldr	r0, [r4, #60]	; 0x3c
   1711c:	ldr	r8, [r3, #8]
   17120:	str	r2, [r4, #24]
   17124:	add	r2, r0, ip
   17128:	str	r2, [r4, #16]
   1712c:	str	r8, [r4, #20]
   17130:	ldr	r2, [r4, #156]	; 0x9c
   17134:	str	ip, [r4, #28]
   17138:	str	r1, [r3, #4]
   1713c:	strhcc	lr, [r4, #128]	; 0x80
   17140:	ldrh	r1, [r3, #12]
   17144:	sub	r2, r2, #1
   17148:	sub	r3, r3, #36	; 0x24
   1714c:	mov	r0, r6
   17150:	str	r7, [r6]
   17154:	str	r5, [r6, #4]
   17158:	str	r2, [r4, #156]	; 0x9c
   1715c:	strh	r1, [r4, #130]	; 0x82
   17160:	str	r3, [r4, #32]
   17164:	add	sp, sp, #12
   17168:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1716c:	add	ip, ip, #1
   17170:	mov	r3, #1
   17174:	ldr	r0, [r4, #40]	; 0x28
   17178:	add	r2, ip, r2
   1717c:	str	r3, [sp]
   17180:	add	r1, r4, #60	; 0x3c
   17184:	ldr	r9, [r4, #48]	; 0x30
   17188:	blx	r9
   1718c:	cmp	r0, #0
   17190:	bne	16f90 <flatcc_builder_create_union_vector@@Base+0x9c>
   17194:	ldr	r2, [r4, #28]
   17198:	ldr	r3, [r4, #64]	; 0x40
   1719c:	ldr	r1, [r4, #60]	; 0x3c
   171a0:	sub	r3, r3, r2
   171a4:	ldr	r0, [r4, #32]
   171a8:	cmn	r3, #4
   171ac:	movhi	r3, r8
   171b0:	add	r1, r1, r2
   171b4:	str	r3, [r4, #24]
   171b8:	str	r1, [r4, #16]
   171bc:	str	r8, [r0, #4]
   171c0:	b	17048 <flatcc_builder_create_union_vector@@Base+0x154>
   171c4:	mov	r1, #4
   171c8:	ldr	r0, [r4, #40]	; 0x28
   171cc:	str	r1, [sp]
   171d0:	add	r1, r4, #84	; 0x54
   171d4:	ldr	r9, [r4, #48]	; 0x30
   171d8:	blx	r9
   171dc:	cmp	r0, #0
   171e0:	beq	16f54 <flatcc_builder_create_union_vector@@Base+0x60>
   171e4:	bl	12074 <__assert_fail@plt+0x78>
   171e8:	add	r1, r3, #1
   171ec:	mov	r3, #1
   171f0:	ldr	r0, [r4, #40]	; 0x28
   171f4:	add	r2, r1, r2
   171f8:	str	r3, [sp]
   171fc:	add	r1, r4, #60	; 0x3c
   17200:	ldr	r9, [r4, #48]	; 0x30
   17204:	blx	r9
   17208:	cmp	r0, #0
   1720c:	bne	16f90 <flatcc_builder_create_union_vector@@Base+0x9c>
   17210:	ldr	r2, [r4, #28]
   17214:	ldr	r3, [r4, #64]	; 0x40
   17218:	ldr	r1, [r4, #60]	; 0x3c
   1721c:	sub	r3, r3, r2
   17220:	cmn	r3, #4
   17224:	mvnhi	r3, #3
   17228:	str	r3, [r4, #24]
   1722c:	ldr	r3, [r4, #32]
   17230:	add	r1, r1, r2
   17234:	mvn	r2, #3
   17238:	str	r1, [r4, #16]
   1723c:	str	r2, [r3, #4]
   17240:	b	17068 <flatcc_builder_create_union_vector@@Base+0x174>
   17244:	bl	120e8 <__assert_fail@plt+0xec>
   17248:	mov	r7, r5
   1724c:	b	170e0 <flatcc_builder_create_union_vector@@Base+0x1ec>
   17250:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00017254 <flatcc_builder_create_union_vector_direct@@Base>:
   17254:	push	{r4, r5, r6, r7, r8, lr}
   17258:	sub	sp, sp, #88	; 0x58
   1725c:	mov	r4, r0
   17260:	ldr	r5, [sp, #112]	; 0x70
   17264:	cmn	r5, #-1073741823	; 0xc0000001
   17268:	bls	17284 <flatcc_builder_create_union_vector_direct@@Base+0x30>
   1726c:	mov	r3, #0
   17270:	mov	r0, r4
   17274:	str	r3, [r4]
   17278:	str	r3, [r4, #4]
   1727c:	add	sp, sp, #88	; 0x58
   17280:	pop	{r4, r5, r6, r7, r8, pc}
   17284:	mov	r6, r1
   17288:	mov	r8, r2
   1728c:	mov	r1, r3
   17290:	mov	r0, r6
   17294:	mov	r3, r2
   17298:	mov	r2, r5
   1729c:	bl	132e4 <flatcc_builder_default_alloc@@Base+0x10c>
   172a0:	subs	r7, r0, #0
   172a4:	beq	1726c <flatcc_builder_create_union_vector_direct@@Base+0x18>
   172a8:	ldrh	r3, [r6, #128]	; 0x80
   172ac:	ldr	r0, [r6, #136]	; 0x88
   172b0:	mov	r2, #1
   172b4:	cmp	r3, #3
   172b8:	movls	r3, #4
   172bc:	strhls	r3, [r6, #128]	; 0x80
   172c0:	sub	r1, r0, r5
   172c4:	cmp	r5, #0
   172c8:	mov	r3, #4
   172cc:	add	ip, sp, #12
   172d0:	str	r3, [sp, #16]
   172d4:	str	r2, [sp, #20]
   172d8:	and	r1, r1, #3
   172dc:	movne	r2, #2
   172e0:	str	r3, [sp, #28]
   172e4:	addne	r3, r5, r3
   172e8:	str	ip, [sp, #24]
   172ec:	strne	r8, [sp, #32]
   172f0:	strne	r5, [sp, #36]	; 0x24
   172f4:	strne	r3, [sp, #16]
   172f8:	strne	r2, [sp, #20]
   172fc:	movne	ip, #3
   17300:	moveq	ip, #2
   17304:	cmp	r1, #0
   17308:	str	r5, [sp, #12]
   1730c:	beq	17338 <flatcc_builder_create_union_vector_direct@@Base+0xe4>
   17310:	add	r2, r2, #1
   17314:	add	lr, sp, #88	; 0x58
   17318:	add	lr, lr, r2, lsl #3
   1731c:	ldr	r5, [pc, #108]	; 17390 <flatcc_builder_create_union_vector_direct@@Base+0x13c>
   17320:	mov	r2, ip
   17324:	add	r3, r3, r1
   17328:	str	r1, [lr, #-68]	; 0xffffffbc
   1732c:	str	r3, [sp, #16]
   17330:	str	ip, [sp, #20]
   17334:	str	r5, [lr, #-72]	; 0xffffffb8
   17338:	sub	r5, r0, r3
   1733c:	cmp	r0, r5
   17340:	ble	17378 <flatcc_builder_create_union_vector_direct@@Base+0x124>
   17344:	ldr	r0, [r6, #36]	; 0x24
   17348:	add	r1, sp, #24
   1734c:	str	r3, [sp]
   17350:	mov	r3, r5
   17354:	ldr	r8, [r6, #44]	; 0x2c
   17358:	blx	r8
   1735c:	cmp	r0, #0
   17360:	bne	1737c <flatcc_builder_create_union_vector_direct@@Base+0x128>
   17364:	mov	r0, r4
   17368:	str	r5, [r6, #136]	; 0x88
   1736c:	stm	r4, {r5, r7}
   17370:	add	sp, sp, #88	; 0x58
   17374:	pop	{r4, r5, r6, r7, r8, pc}
   17378:	bl	120c0 <__assert_fail@plt+0xc4>
   1737c:	ldr	r3, [pc, #16]	; 17394 <flatcc_builder_create_union_vector_direct@@Base+0x140>
   17380:	ldr	r2, [pc, #16]	; 17398 <flatcc_builder_create_union_vector_direct@@Base+0x144>
   17384:	ldr	r1, [pc, #16]	; 1739c <flatcc_builder_create_union_vector_direct@@Base+0x148>
   17388:	ldr	r0, [pc, #16]	; 173a0 <flatcc_builder_create_union_vector_direct@@Base+0x14c>
   1738c:	bl	11ffc <__assert_fail@plt>
   17390:	ldrdeq	r9, [r1], -r0
   17394:	andeq	r9, r1, r4, asr r4
   17398:	andeq	r0, r0, fp, lsl #5
   1739c:	andeq	r9, r1, r8, lsl #23
   173a0:	andeq	r9, r1, r8, asr #24

000173a4 <flatcc_builder_start_union_vector@@Base>:
   173a4:	ldr	r1, [r0, #156]	; 0x9c
   173a8:	ldr	r3, [r0, #160]	; 0xa0
   173ac:	add	r2, r1, #1
   173b0:	cmp	r2, r3
   173b4:	push	{r4, r5, r6, lr}
   173b8:	mov	r4, r0
   173bc:	sub	sp, sp, #8
   173c0:	str	r2, [r0, #156]	; 0x9c
   173c4:	ble	17434 <flatcc_builder_start_union_vector@@Base+0x90>
   173c8:	ldr	r3, [r0, #176]	; 0xb0
   173cc:	cmp	r3, #0
   173d0:	cmpgt	r2, r3
   173d4:	movgt	r3, #1
   173d8:	movle	r3, #0
   173dc:	bgt	174e0 <flatcc_builder_start_union_vector@@Base+0x13c>
   173e0:	add	r1, r1, r1, lsl #3
   173e4:	ldr	r0, [r0, #88]	; 0x58
   173e8:	lsl	r5, r1, #2
   173ec:	add	r2, r5, #36	; 0x24
   173f0:	cmp	r2, r0
   173f4:	bhi	174bc <flatcc_builder_start_union_vector@@Base+0x118>
   173f8:	ldr	r3, [r4, #84]	; 0x54
   173fc:	add	r3, r3, r5
   17400:	cmp	r3, #0
   17404:	str	r3, [r4, #32]
   17408:	beq	174e0 <flatcc_builder_start_union_vector@@Base+0x13c>
   1740c:	ldr	r2, [r4, #88]	; 0x58
   17410:	ldr	r0, [pc, #208]	; 174e8 <flatcc_builder_start_union_vector@@Base+0x144>
   17414:	ldr	r1, [r4, #176]	; 0xb0
   17418:	umull	r0, r2, r0, r2
   1741c:	lsr	r2, r2, #3
   17420:	cmp	r1, #0
   17424:	cmpgt	r2, r1
   17428:	str	r2, [r4, #160]	; 0xa0
   1742c:	strgt	r1, [r4, #160]	; 0xa0
   17430:	b	17440 <flatcc_builder_start_union_vector@@Base+0x9c>
   17434:	ldr	r3, [r0, #32]
   17438:	add	r3, r3, #36	; 0x24
   1743c:	str	r3, [r0, #32]
   17440:	ldr	ip, [r4, #20]
   17444:	ldr	r1, [r4, #28]
   17448:	ldrh	r5, [r4, #130]	; 0x82
   1744c:	add	r2, ip, r1
   17450:	add	r2, r2, #7
   17454:	str	ip, [r3, #8]
   17458:	bic	r2, r2, #7
   1745c:	mov	lr, #4
   17460:	mov	r0, #0
   17464:	mov	ip, #8
   17468:	strh	r5, [r3, #12]
   1746c:	strh	lr, [r4, #130]	; 0x82
   17470:	str	r1, [r3]
   17474:	str	r2, [r4, #28]
   17478:	str	r0, [r4, #20]
   1747c:	str	r0, [r3, #20]
   17480:	str	ip, [r3, #16]
   17484:	ldr	r1, [r4, #64]	; 0x40
   17488:	ldr	ip, [r4, #60]	; 0x3c
   1748c:	sub	r1, r1, r2
   17490:	mvn	lr, #3
   17494:	cmp	r1, lr
   17498:	add	r2, ip, r2
   1749c:	movhi	r1, lr
   174a0:	mov	ip, #7
   174a4:	strh	ip, [r3, #14]
   174a8:	str	r2, [r4, #16]
   174ac:	str	r1, [r4, #24]
   174b0:	str	lr, [r3, #4]
   174b4:	add	sp, sp, #8
   174b8:	pop	{r4, r5, r6, pc}
   174bc:	mov	r1, #4
   174c0:	ldr	r0, [r4, #40]	; 0x28
   174c4:	str	r1, [sp]
   174c8:	add	r1, r4, #84	; 0x54
   174cc:	ldr	r6, [r4, #48]	; 0x30
   174d0:	blx	r6
   174d4:	cmp	r0, #0
   174d8:	beq	173f8 <flatcc_builder_start_union_vector@@Base+0x54>
   174dc:	bl	12074 <__assert_fail@plt+0x78>
   174e0:	mvn	r0, #0
   174e4:	b	174b4 <flatcc_builder_start_union_vector@@Base+0x110>
   174e8:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

000174ec <flatcc_builder_end_union_vector@@Base>:
   174ec:	ldr	r3, [r1, #32]
   174f0:	push	{r4, r5, r6, r7, r8, r9, lr}
   174f4:	sub	sp, sp, #12
   174f8:	ldrh	r2, [r3, #14]
   174fc:	cmp	r2, #7
   17500:	bne	176c0 <flatcc_builder_end_union_vector@@Base+0x1d4>
   17504:	ldr	r5, [r3, #20]
   17508:	ldr	r8, [r1, #20]
   1750c:	ldr	r3, [r1, #24]
   17510:	lsl	r7, r5, #2
   17514:	add	r2, r7, r5
   17518:	add	r2, r2, r8
   1751c:	cmp	r2, r3
   17520:	mov	r4, r1
   17524:	mov	r6, r0
   17528:	str	r2, [r1, #20]
   1752c:	bcs	17608 <flatcc_builder_end_union_vector@@Base+0x11c>
   17530:	ldr	r3, [r1, #16]
   17534:	adds	r1, r3, r8
   17538:	beq	176a8 <flatcc_builder_end_union_vector@@Base+0x1bc>
   1753c:	cmp	r5, #0
   17540:	add	r7, r1, r7
   17544:	addne	lr, r3, r5, lsl #3
   17548:	subne	r0, r7, #1
   1754c:	subne	r2, r1, #4
   17550:	beq	17668 <flatcc_builder_end_union_vector@@Base+0x17c>
   17554:	ldrb	ip, [r3]
   17558:	add	r3, r3, #8
   1755c:	strb	ip, [r0, #1]!
   17560:	ldr	ip, [r3, #-4]
   17564:	cmp	lr, r3
   17568:	str	ip, [r2, #4]!
   1756c:	bne	17554 <flatcc_builder_end_union_vector@@Base+0x68>
   17570:	cmn	r5, #-1073741823	; 0xc0000001
   17574:	bls	17668 <flatcc_builder_end_union_vector@@Base+0x17c>
   17578:	mov	r8, #0
   1757c:	mov	r5, r8
   17580:	ldr	r2, [r4, #20]
   17584:	mov	r1, #0
   17588:	ldr	r0, [r4, #16]
   1758c:	bl	11fd8 <memset@plt>
   17590:	ldr	r3, [r4, #32]
   17594:	ldr	r2, [r4, #64]	; 0x40
   17598:	ldrh	lr, [r4, #130]	; 0x82
   1759c:	ldr	ip, [r3]
   175a0:	ldr	r1, [r3, #4]
   175a4:	ldrh	r0, [r4, #128]	; 0x80
   175a8:	sub	r2, r2, ip
   175ac:	cmp	r2, r1
   175b0:	movcs	r2, r1
   175b4:	cmp	r0, lr
   175b8:	ldr	r0, [r4, #60]	; 0x3c
   175bc:	ldr	r7, [r3, #8]
   175c0:	str	r2, [r4, #24]
   175c4:	add	r2, r0, ip
   175c8:	str	r2, [r4, #16]
   175cc:	str	r7, [r4, #20]
   175d0:	ldr	r2, [r4, #156]	; 0x9c
   175d4:	str	ip, [r4, #28]
   175d8:	str	r1, [r3, #4]
   175dc:	strhcc	lr, [r4, #128]	; 0x80
   175e0:	ldrh	r1, [r3, #12]
   175e4:	sub	r2, r2, #1
   175e8:	sub	r3, r3, #36	; 0x24
   175ec:	mov	r0, r6
   175f0:	stm	r6, {r5, r8}
   175f4:	str	r2, [r4, #156]	; 0x9c
   175f8:	strh	r1, [r4, #130]	; 0x82
   175fc:	str	r3, [r4, #32]
   17600:	add	sp, sp, #12
   17604:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17608:	ldr	r1, [r1, #28]
   1760c:	mov	r3, #1
   17610:	add	r1, r1, #1
   17614:	ldr	r0, [r4, #40]	; 0x28
   17618:	add	r2, r1, r2
   1761c:	str	r3, [sp]
   17620:	add	r1, r4, #60	; 0x3c
   17624:	ldr	r9, [r4, #48]	; 0x30
   17628:	blx	r9
   1762c:	cmp	r0, #0
   17630:	bne	176a8 <flatcc_builder_end_union_vector@@Base+0x1bc>
   17634:	ldr	r1, [r4, #28]
   17638:	ldr	r2, [r4, #64]	; 0x40
   1763c:	ldr	r3, [r4, #60]	; 0x3c
   17640:	sub	r2, r2, r1
   17644:	cmn	r2, #4
   17648:	mvnhi	r2, #3
   1764c:	str	r2, [r4, #24]
   17650:	ldr	r2, [r4, #32]
   17654:	add	r3, r3, r1
   17658:	mvn	r1, #3
   1765c:	str	r3, [r4, #16]
   17660:	str	r1, [r2, #4]
   17664:	b	17534 <flatcc_builder_end_union_vector@@Base+0x48>
   17668:	mov	r3, r7
   1766c:	mov	r2, r5
   17670:	mov	r0, r4
   17674:	bl	132e4 <flatcc_builder_default_alloc@@Base+0x10c>
   17678:	subs	r8, r0, #0
   1767c:	beq	17578 <flatcc_builder_end_union_vector@@Base+0x8c>
   17680:	mvn	r0, #0
   17684:	mov	r3, #1
   17688:	mov	r2, r5
   1768c:	str	r0, [sp, #4]
   17690:	mov	r1, r7
   17694:	str	r3, [sp]
   17698:	mov	r0, r4
   1769c:	bl	169b4 <flatcc_builder_create_vector@@Base>
   176a0:	mov	r5, r0
   176a4:	b	17580 <flatcc_builder_end_union_vector@@Base+0x94>
   176a8:	mov	r3, #0
   176ac:	mov	r0, r6
   176b0:	str	r3, [r6]
   176b4:	str	r3, [r6, #4]
   176b8:	add	sp, sp, #12
   176bc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   176c0:	ldr	r3, [pc, #12]	; 176d4 <flatcc_builder_end_union_vector@@Base+0x1e8>
   176c4:	ldr	r2, [pc, #12]	; 176d8 <flatcc_builder_end_union_vector@@Base+0x1ec>
   176c8:	ldr	r1, [pc, #12]	; 176dc <flatcc_builder_end_union_vector@@Base+0x1f0>
   176cc:	ldr	r0, [pc, #12]	; 176e0 <flatcc_builder_end_union_vector@@Base+0x1f4>
   176d0:	bl	11ffc <__assert_fail@plt>
   176d4:	andeq	r9, r1, ip, lsl sl
   176d8:	andeq	r0, r0, r1, asr r6
   176dc:	andeq	r9, r1, r8, lsl #23
   176e0:	muleq	r1, r4, lr

000176e4 <flatcc_builder_union_vector_edit@@Base>:
   176e4:	ldr	r0, [r0, #16]
   176e8:	bx	lr

000176ec <flatcc_builder_union_vector_count@@Base>:
   176ec:	ldr	r3, [r0, #32]
   176f0:	ldr	r0, [r3, #20]
   176f4:	bx	lr

000176f8 <flatcc_builder_extend_union_vector@@Base>:
   176f8:	ldr	ip, [r0, #32]
   176fc:	push	{r4, r5, r6, r7, lr}
   17700:	mov	r4, r0
   17704:	ldr	r3, [ip, #20]
   17708:	sub	sp, sp, #12
   1770c:	adds	r3, r1, r3
   17710:	movcs	r2, #1
   17714:	movcc	r2, #0
   17718:	cmn	r3, #-536870911	; 0xe0000001
   1771c:	movls	r0, #0
   17720:	movhi	r0, #1
   17724:	orrs	r5, r2, r0
   17728:	bne	177c0 <flatcc_builder_extend_union_vector@@Base+0xc8>
   1772c:	str	r3, [ip, #20]
   17730:	ldr	r6, [r4, #20]
   17734:	ldr	r3, [r4, #24]
   17738:	add	r1, r6, r1, lsl #3
   1773c:	cmp	r1, r3
   17740:	str	r1, [r4, #20]
   17744:	bcs	17758 <flatcc_builder_extend_union_vector@@Base+0x60>
   17748:	ldr	r0, [r4, #16]
   1774c:	add	r0, r0, r6
   17750:	add	sp, sp, #12
   17754:	pop	{r4, r5, r6, r7, pc}
   17758:	ldr	r2, [r4, #28]
   1775c:	mov	r3, #1
   17760:	add	r2, r2, #1
   17764:	ldr	r0, [r4, #40]	; 0x28
   17768:	add	r2, r2, r1
   1776c:	str	r3, [sp]
   17770:	add	r1, r4, #60	; 0x3c
   17774:	ldr	r7, [r4, #48]	; 0x30
   17778:	blx	r7
   1777c:	cmp	r0, #0
   17780:	bne	177b8 <flatcc_builder_extend_union_vector@@Base+0xc0>
   17784:	ldr	r2, [r4, #28]
   17788:	ldr	r3, [r4, #64]	; 0x40
   1778c:	ldr	r0, [r4, #60]	; 0x3c
   17790:	sub	r3, r3, r2
   17794:	cmn	r3, #4
   17798:	mvnhi	r3, #3
   1779c:	str	r3, [r4, #24]
   177a0:	ldr	r3, [r4, #32]
   177a4:	add	r0, r0, r2
   177a8:	mvn	r2, #3
   177ac:	str	r0, [r4, #16]
   177b0:	str	r2, [r3, #4]
   177b4:	b	1774c <flatcc_builder_extend_union_vector@@Base+0x54>
   177b8:	mov	r0, r5
   177bc:	b	17750 <flatcc_builder_extend_union_vector@@Base+0x58>
   177c0:	bl	120e8 <__assert_fail@plt+0xec>

000177c4 <flatcc_builder_truncate_union_vector@@Base>:
   177c4:	ldr	r3, [r0, #32]
   177c8:	push	{r4, lr}
   177cc:	ldrh	r2, [r3, #14]
   177d0:	cmp	r2, #7
   177d4:	bne	17818 <flatcc_builder_truncate_union_vector@@Base+0x54>
   177d8:	ldr	ip, [r3, #20]
   177dc:	cmp	ip, r1
   177e0:	bcc	1782c <flatcc_builder_truncate_union_vector@@Base+0x68>
   177e4:	ldr	r2, [r3, #16]
   177e8:	sub	ip, ip, r1
   177ec:	str	ip, [r3, #20]
   177f0:	mul	r2, r2, r1
   177f4:	ldr	r3, [r0, #20]
   177f8:	ldr	r1, [r0, #16]
   177fc:	sub	r3, r3, r2
   17800:	str	r3, [r0, #20]
   17804:	add	r0, r1, r3
   17808:	mov	r1, #0
   1780c:	bl	11fd8 <memset@plt>
   17810:	mov	r0, #0
   17814:	pop	{r4, pc}
   17818:	ldr	r3, [pc, #32]	; 17840 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   1781c:	ldr	r2, [pc, #32]	; 17844 <flatcc_builder_truncate_union_vector@@Base+0x80>
   17820:	ldr	r1, [pc, #32]	; 17848 <flatcc_builder_truncate_union_vector@@Base+0x84>
   17824:	ldr	r0, [pc, #32]	; 1784c <flatcc_builder_truncate_union_vector@@Base+0x88>
   17828:	bl	11ffc <__assert_fail@plt>
   1782c:	ldr	r3, [pc, #12]	; 17840 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   17830:	ldr	r2, [pc, #24]	; 17850 <flatcc_builder_truncate_union_vector@@Base+0x8c>
   17834:	ldr	r1, [pc, #12]	; 17848 <flatcc_builder_truncate_union_vector@@Base+0x84>
   17838:	ldr	r0, [pc, #20]	; 17854 <flatcc_builder_truncate_union_vector@@Base+0x90>
   1783c:	bl	11ffc <__assert_fail@plt>
   17840:	andeq	r9, r1, ip, lsr sl
   17844:	andeq	r0, r0, r1, lsl #13
   17848:	andeq	r9, r1, r8, lsl #23
   1784c:	muleq	r1, r4, lr
   17850:	andeq	r0, r0, r2, lsl #13
   17854:			; <UNDEFINED> instruction: 0x00019db8

00017858 <flatcc_builder_union_vector_push@@Base>:
   17858:	push	{r4, r5, r6, r7, lr}
   1785c:	mov	r4, r0
   17860:	ldr	r0, [r0, #32]
   17864:	sub	sp, sp, #20
   17868:	add	r5, sp, #8
   1786c:	ldrh	r3, [r0, #14]
   17870:	stm	r5, {r1, r2}
   17874:	cmp	r3, #7
   17878:	bne	1793c <flatcc_builder_union_vector_push@@Base+0xe4>
   1787c:	ldr	r3, [r0, #20]
   17880:	cmn	r3, #-536870911	; 0xe0000001
   17884:	beq	1792c <flatcc_builder_union_vector_push@@Base+0xd4>
   17888:	add	r3, r3, #1
   1788c:	str	r3, [r0, #20]
   17890:	ldr	r6, [r4, #20]
   17894:	ldr	r2, [r4, #24]
   17898:	add	r3, r6, #8
   1789c:	cmp	r3, r2
   178a0:	str	r3, [r4, #20]
   178a4:	bcs	178cc <flatcc_builder_union_vector_push@@Base+0x74>
   178a8:	ldr	r3, [r4, #16]
   178ac:	adds	r3, r3, r6
   178b0:	movne	r2, r3
   178b4:	ldmne	r5, {r0, r1}
   178b8:	moveq	r2, r3
   178bc:	stmne	r3, {r0, r1}
   178c0:	mov	r0, r2
   178c4:	add	sp, sp, #20
   178c8:	pop	{r4, r5, r6, r7, pc}
   178cc:	ldr	r2, [r4, #28]
   178d0:	mov	r3, #1
   178d4:	add	r2, r6, r2
   178d8:	ldr	r0, [r4, #40]	; 0x28
   178dc:	add	r2, r2, #9
   178e0:	str	r3, [sp]
   178e4:	add	r1, r4, #60	; 0x3c
   178e8:	ldr	r7, [r4, #48]	; 0x30
   178ec:	blx	r7
   178f0:	cmp	r0, #0
   178f4:	bne	1792c <flatcc_builder_union_vector_push@@Base+0xd4>
   178f8:	ldr	r1, [r4, #28]
   178fc:	ldr	r2, [r4, #64]	; 0x40
   17900:	ldr	r3, [r4, #60]	; 0x3c
   17904:	sub	r2, r2, r1
   17908:	cmn	r2, #4
   1790c:	mvnhi	r2, #3
   17910:	str	r2, [r4, #24]
   17914:	ldr	r2, [r4, #32]
   17918:	add	r3, r3, r1
   1791c:	mvn	r1, #3
   17920:	str	r3, [r4, #16]
   17924:	str	r1, [r2, #4]
   17928:	b	178ac <flatcc_builder_union_vector_push@@Base+0x54>
   1792c:	mov	r2, #0
   17930:	mov	r0, r2
   17934:	add	sp, sp, #20
   17938:	pop	{r4, r5, r6, r7, pc}
   1793c:	ldr	r3, [pc, #12]	; 17950 <flatcc_builder_union_vector_push@@Base+0xf8>
   17940:	ldr	r2, [pc, #12]	; 17954 <flatcc_builder_union_vector_push@@Base+0xfc>
   17944:	ldr	r1, [pc, #12]	; 17958 <flatcc_builder_union_vector_push@@Base+0x100>
   17948:	ldr	r0, [pc, #12]	; 1795c <flatcc_builder_union_vector_push@@Base+0x104>
   1794c:	bl	11ffc <__assert_fail@plt>
   17950:	andeq	r9, r1, r4, ror #20
   17954:	andeq	r0, r0, sp, lsl #13
   17958:	andeq	r9, r1, r8, lsl #23
   1795c:	muleq	r1, r4, lr

00017960 <flatcc_builder_append_union_vector@@Base>:
   17960:	push	{r4, r5, r6, r7, r8, r9, lr}
   17964:	mov	r5, r0
   17968:	ldr	r0, [r0, #32]
   1796c:	sub	sp, sp, #12
   17970:	ldrh	r3, [r0, #14]
   17974:	cmp	r3, #7
   17978:	bne	17a5c <flatcc_builder_append_union_vector@@Base+0xfc>
   1797c:	mov	r7, r1
   17980:	ldr	r1, [r0, #20]
   17984:	adds	r1, r2, r1
   17988:	movcs	r4, #1
   1798c:	movcc	r4, #0
   17990:	cmn	r1, #-536870911	; 0xe0000001
   17994:	movls	r3, #0
   17998:	movhi	r3, #1
   1799c:	orrs	r4, r4, r3
   179a0:	bne	17a58 <flatcc_builder_append_union_vector@@Base+0xf8>
   179a4:	str	r1, [r0, #20]
   179a8:	ldr	r8, [r5, #20]
   179ac:	lsl	r6, r2, #3
   179b0:	ldr	r3, [r5, #24]
   179b4:	add	r1, r6, r8
   179b8:	cmp	r1, r3
   179bc:	str	r1, [r5, #20]
   179c0:	bcs	179f0 <flatcc_builder_append_union_vector@@Base+0x90>
   179c4:	ldr	r3, [r5, #16]
   179c8:	adds	r3, r3, r8
   179cc:	beq	179e4 <flatcc_builder_append_union_vector@@Base+0x84>
   179d0:	mov	r0, r3
   179d4:	mov	r2, r6
   179d8:	mov	r1, r7
   179dc:	bl	11f6c <memcpy@plt>
   179e0:	mov	r3, r0
   179e4:	mov	r0, r3
   179e8:	add	sp, sp, #12
   179ec:	pop	{r4, r5, r6, r7, r8, r9, pc}
   179f0:	ldr	r2, [r5, #28]
   179f4:	mov	r3, #1
   179f8:	add	r2, r2, #1
   179fc:	ldr	r0, [r5, #40]	; 0x28
   17a00:	add	r2, r2, r1
   17a04:	str	r3, [sp]
   17a08:	add	r1, r5, #60	; 0x3c
   17a0c:	ldr	r9, [r5, #48]	; 0x30
   17a10:	blx	r9
   17a14:	cmp	r0, #0
   17a18:	bne	17a50 <flatcc_builder_append_union_vector@@Base+0xf0>
   17a1c:	ldr	r1, [r5, #28]
   17a20:	ldr	r2, [r5, #64]	; 0x40
   17a24:	ldr	r3, [r5, #60]	; 0x3c
   17a28:	sub	r2, r2, r1
   17a2c:	cmn	r2, #4
   17a30:	mvnhi	r2, #3
   17a34:	str	r2, [r5, #24]
   17a38:	ldr	r2, [r5, #32]
   17a3c:	add	r3, r3, r1
   17a40:	mvn	r1, #3
   17a44:	str	r3, [r5, #16]
   17a48:	str	r1, [r2, #4]
   17a4c:	b	179c8 <flatcc_builder_append_union_vector@@Base+0x68>
   17a50:	mov	r3, r4
   17a54:	b	179e4 <flatcc_builder_append_union_vector@@Base+0x84>
   17a58:	bl	120e8 <__assert_fail@plt+0xec>
   17a5c:	ldr	r3, [pc, #12]	; 17a70 <flatcc_builder_append_union_vector@@Base+0x110>
   17a60:	ldr	r2, [pc, #12]	; 17a74 <flatcc_builder_append_union_vector@@Base+0x114>
   17a64:	ldr	r1, [pc, #12]	; 17a78 <flatcc_builder_append_union_vector@@Base+0x118>
   17a68:	ldr	r0, [pc, #12]	; 17a7c <flatcc_builder_append_union_vector@@Base+0x11c>
   17a6c:	bl	11ffc <__assert_fail@plt>
   17a70:	andeq	r9, r1, r8, lsl #21
   17a74:	muleq	r0, ip, r6
   17a78:	andeq	r9, r1, r8, lsl #23
   17a7c:	muleq	r1, r4, lr

00017a80 <flatcc_builder_create_string@@Base>:
   17a80:	push	{r4, r5, r6, lr}
   17a84:	sub	sp, sp, #88	; 0x58
   17a88:	ldr	lr, [r0, #136]	; 0x88
   17a8c:	mov	r4, r0
   17a90:	add	r0, sp, #88	; 0x58
   17a94:	cmp	r2, #0
   17a98:	sub	r3, lr, r2
   17a9c:	str	r2, [r0, #-76]!	; 0xffffffb4
   17aa0:	sub	r3, r3, #1
   17aa4:	str	r0, [sp, #24]
   17aa8:	moveq	r0, #1
   17aac:	strne	r1, [sp, #32]
   17ab0:	mov	ip, #4
   17ab4:	moveq	r1, r0
   17ab8:	movne	r1, #2
   17abc:	and	r3, r3, #3
   17ac0:	str	ip, [sp, #28]
   17ac4:	add	r3, r3, #1
   17ac8:	addne	ip, r2, ip
   17acc:	add	r1, r1, #1
   17ad0:	add	ip, ip, r3
   17ad4:	add	r0, sp, #88	; 0x58
   17ad8:	add	r1, r0, r1, lsl #3
   17adc:	sub	r5, lr, ip
   17ae0:	ldr	r0, [pc, #104]	; 17b50 <flatcc_builder_create_string@@Base+0xd0>
   17ae4:	strne	r2, [sp, #36]	; 0x24
   17ae8:	moveq	r2, #2
   17aec:	movne	r2, #3
   17af0:	cmp	lr, r5
   17af4:	str	r3, [r1, #-68]	; 0xffffffbc
   17af8:	str	ip, [sp, #16]
   17afc:	str	r2, [sp, #20]
   17b00:	str	r0, [r1, #-72]	; 0xffffffb8
   17b04:	ble	17b38 <flatcc_builder_create_string@@Base+0xb8>
   17b08:	ldr	r0, [r4, #36]	; 0x24
   17b0c:	mov	r3, r5
   17b10:	str	ip, [sp]
   17b14:	add	r1, sp, #24
   17b18:	ldr	r6, [r4, #44]	; 0x2c
   17b1c:	blx	r6
   17b20:	cmp	r0, #0
   17b24:	bne	17b3c <flatcc_builder_create_string@@Base+0xbc>
   17b28:	mov	r0, r5
   17b2c:	str	r5, [r4, #136]	; 0x88
   17b30:	add	sp, sp, #88	; 0x58
   17b34:	pop	{r4, r5, r6, pc}
   17b38:	bl	120c0 <__assert_fail@plt+0xc4>
   17b3c:	ldr	r3, [pc, #16]	; 17b54 <flatcc_builder_create_string@@Base+0xd4>
   17b40:	ldr	r2, [pc, #16]	; 17b58 <flatcc_builder_create_string@@Base+0xd8>
   17b44:	ldr	r1, [pc, #16]	; 17b5c <flatcc_builder_create_string@@Base+0xdc>
   17b48:	ldr	r0, [pc, #16]	; 17b60 <flatcc_builder_create_string@@Base+0xe0>
   17b4c:	bl	11ffc <__assert_fail@plt>
   17b50:	ldrdeq	r9, [r1], -r0
   17b54:	andeq	r9, r1, r4, asr r4
   17b58:	andeq	r0, r0, fp, lsl #5
   17b5c:	andeq	r9, r1, r8, lsl #23
   17b60:	andeq	r9, r1, r8, asr #24

00017b64 <flatcc_builder_create_string_str@@Base>:
   17b64:	push	{r4, r5, r6, lr}
   17b68:	mov	r4, r0
   17b6c:	sub	sp, sp, #88	; 0x58
   17b70:	mov	r0, r1
   17b74:	mov	r5, r1
   17b78:	bl	11fc0 <strlen@plt>
   17b7c:	ldr	lr, [r4, #136]	; 0x88
   17b80:	add	r2, sp, #88	; 0x58
   17b84:	sub	r3, lr, #1
   17b88:	mov	ip, #4
   17b8c:	str	ip, [sp, #28]
   17b90:	cmp	r0, #0
   17b94:	str	r0, [r2, #-76]!	; 0xffffffb4
   17b98:	sub	r3, r3, r0
   17b9c:	str	r2, [sp, #24]
   17ba0:	moveq	r2, #1
   17ba4:	moveq	r1, r2
   17ba8:	movne	r1, #2
   17bac:	and	r3, r3, #3
   17bb0:	addne	ip, r0, ip
   17bb4:	add	r3, r3, #1
   17bb8:	add	r1, r1, #1
   17bbc:	strne	r0, [sp, #36]	; 0x24
   17bc0:	add	ip, ip, r3
   17bc4:	add	r0, sp, #88	; 0x58
   17bc8:	strne	r5, [sp, #32]
   17bcc:	add	r1, r0, r1, lsl #3
   17bd0:	sub	r5, lr, ip
   17bd4:	ldr	r0, [pc, #100]	; 17c40 <flatcc_builder_create_string_str@@Base+0xdc>
   17bd8:	movne	r2, #3
   17bdc:	moveq	r2, #2
   17be0:	cmp	lr, r5
   17be4:	str	r3, [r1, #-68]	; 0xffffffbc
   17be8:	str	ip, [sp, #16]
   17bec:	str	r2, [sp, #20]
   17bf0:	str	r0, [r1, #-72]	; 0xffffffb8
   17bf4:	ble	17c28 <flatcc_builder_create_string_str@@Base+0xc4>
   17bf8:	ldr	r0, [r4, #36]	; 0x24
   17bfc:	mov	r3, r5
   17c00:	str	ip, [sp]
   17c04:	add	r1, sp, #24
   17c08:	ldr	r6, [r4, #44]	; 0x2c
   17c0c:	blx	r6
   17c10:	cmp	r0, #0
   17c14:	bne	17c2c <flatcc_builder_create_string_str@@Base+0xc8>
   17c18:	mov	r0, r5
   17c1c:	str	r5, [r4, #136]	; 0x88
   17c20:	add	sp, sp, #88	; 0x58
   17c24:	pop	{r4, r5, r6, pc}
   17c28:	bl	120c0 <__assert_fail@plt+0xc4>
   17c2c:	ldr	r3, [pc, #16]	; 17c44 <flatcc_builder_create_string_str@@Base+0xe0>
   17c30:	ldr	r2, [pc, #16]	; 17c48 <flatcc_builder_create_string_str@@Base+0xe4>
   17c34:	ldr	r1, [pc, #16]	; 17c4c <flatcc_builder_create_string_str@@Base+0xe8>
   17c38:	ldr	r0, [pc, #16]	; 17c50 <flatcc_builder_create_string_str@@Base+0xec>
   17c3c:	bl	11ffc <__assert_fail@plt>
   17c40:	ldrdeq	r9, [r1], -r0
   17c44:	andeq	r9, r1, r4, asr r4
   17c48:	andeq	r0, r0, fp, lsl #5
   17c4c:	andeq	r9, r1, r8, lsl #23
   17c50:	andeq	r9, r1, r8, asr #24

00017c54 <flatcc_builder_create_string_strn@@Base>:
   17c54:	push	{r4, r5, r6, lr}
   17c58:	mov	r6, r1
   17c5c:	sub	sp, sp, #88	; 0x58
   17c60:	mov	r4, r0
   17c64:	mov	r1, #0
   17c68:	mov	r0, r6
   17c6c:	mov	r5, r2
   17c70:	bl	11fe4 <memchr@plt>
   17c74:	mov	ip, #4
   17c78:	mov	r1, #1
   17c7c:	add	r2, sp, #88	; 0x58
   17c80:	str	ip, [sp, #28]
   17c84:	add	lr, sp, #88	; 0x58
   17c88:	cmp	r0, #0
   17c8c:	subne	r5, r0, r6
   17c90:	ldr	r0, [r4, #136]	; 0x88
   17c94:	cmp	r5, #0
   17c98:	sub	r3, r0, #1
   17c9c:	sub	r3, r3, r5
   17ca0:	movne	r1, #2
   17ca4:	and	r3, r3, #3
   17ca8:	addne	ip, r5, ip
   17cac:	add	r3, r3, #1
   17cb0:	add	r1, r1, #1
   17cb4:	add	ip, r3, ip
   17cb8:	str	r5, [r2, #-76]!	; 0xffffffb4
   17cbc:	strne	r5, [sp, #36]	; 0x24
   17cc0:	add	r1, lr, r1, lsl #3
   17cc4:	sub	r5, r0, ip
   17cc8:	ldr	lr, [pc, #108]	; 17d3c <flatcc_builder_create_string_strn@@Base+0xe8>
   17ccc:	str	r2, [sp, #24]
   17cd0:	strne	r6, [sp, #32]
   17cd4:	movne	r2, #3
   17cd8:	moveq	r2, #2
   17cdc:	cmp	r0, r5
   17ce0:	str	r3, [r1, #-68]	; 0xffffffbc
   17ce4:	str	ip, [sp, #16]
   17ce8:	str	r2, [sp, #20]
   17cec:	str	lr, [r1, #-72]	; 0xffffffb8
   17cf0:	ble	17d24 <flatcc_builder_create_string_strn@@Base+0xd0>
   17cf4:	ldr	r0, [r4, #36]	; 0x24
   17cf8:	mov	r3, r5
   17cfc:	str	ip, [sp]
   17d00:	add	r1, sp, #24
   17d04:	ldr	r6, [r4, #44]	; 0x2c
   17d08:	blx	r6
   17d0c:	cmp	r0, #0
   17d10:	bne	17d28 <flatcc_builder_create_string_strn@@Base+0xd4>
   17d14:	mov	r0, r5
   17d18:	str	r5, [r4, #136]	; 0x88
   17d1c:	add	sp, sp, #88	; 0x58
   17d20:	pop	{r4, r5, r6, pc}
   17d24:	bl	120c0 <__assert_fail@plt+0xc4>
   17d28:	ldr	r3, [pc, #16]	; 17d40 <flatcc_builder_create_string_strn@@Base+0xec>
   17d2c:	ldr	r2, [pc, #16]	; 17d44 <flatcc_builder_create_string_strn@@Base+0xf0>
   17d30:	ldr	r1, [pc, #16]	; 17d48 <flatcc_builder_create_string_strn@@Base+0xf4>
   17d34:	ldr	r0, [pc, #16]	; 17d4c <flatcc_builder_create_string_strn@@Base+0xf8>
   17d38:	bl	11ffc <__assert_fail@plt>
   17d3c:	ldrdeq	r9, [r1], -r0
   17d40:	andeq	r9, r1, r4, asr r4
   17d44:	andeq	r0, r0, fp, lsl #5
   17d48:	andeq	r9, r1, r8, lsl #23
   17d4c:	andeq	r9, r1, r8, asr #24

00017d50 <flatcc_builder_end_string@@Base>:
   17d50:	ldr	r3, [r0, #32]
   17d54:	push	{r4, r5, r6, lr}
   17d58:	sub	sp, sp, #88	; 0x58
   17d5c:	ldrh	r2, [r3, #14]
   17d60:	cmp	r2, #6
   17d64:	bne	17ed0 <flatcc_builder_end_string@@Base+0x180>
   17d68:	ldr	r2, [r3, #20]
   17d6c:	ldr	r3, [r0, #20]
   17d70:	mov	r4, r0
   17d74:	cmp	r2, r3
   17d78:	bne	17ebc <flatcc_builder_end_string@@Base+0x16c>
   17d7c:	ldr	r0, [r0, #136]	; 0x88
   17d80:	add	r1, sp, #88	; 0x58
   17d84:	sub	r3, r0, #1
   17d88:	cmp	r2, #0
   17d8c:	sub	r3, r3, r2
   17d90:	str	r2, [r1, #-76]!	; 0xffffffb4
   17d94:	mov	ip, #4
   17d98:	str	r1, [sp, #24]
   17d9c:	ldr	lr, [r4, #16]
   17da0:	mov	r1, #1
   17da4:	and	r3, r3, #3
   17da8:	movne	r1, #2
   17dac:	str	ip, [sp, #28]
   17db0:	add	r3, r3, #1
   17db4:	addne	ip, r2, ip
   17db8:	add	r1, r1, #1
   17dbc:	strne	lr, [sp, #32]
   17dc0:	add	ip, ip, r3
   17dc4:	add	lr, sp, #88	; 0x58
   17dc8:	add	r1, lr, r1, lsl #3
   17dcc:	sub	r5, r0, ip
   17dd0:	ldr	lr, [pc, #268]	; 17ee4 <flatcc_builder_end_string@@Base+0x194>
   17dd4:	strne	r2, [sp, #36]	; 0x24
   17dd8:	moveq	r2, #2
   17ddc:	movne	r2, #3
   17de0:	cmp	r0, r5
   17de4:	str	r3, [r1, #-68]	; 0xffffffbc
   17de8:	str	ip, [sp, #16]
   17dec:	str	r2, [sp, #20]
   17df0:	str	lr, [r1, #-72]	; 0xffffffb8
   17df4:	ble	17eb8 <flatcc_builder_end_string@@Base+0x168>
   17df8:	ldr	r0, [r4, #36]	; 0x24
   17dfc:	add	r1, sp, #24
   17e00:	str	ip, [sp]
   17e04:	mov	r3, r5
   17e08:	ldr	r6, [r4, #44]	; 0x2c
   17e0c:	blx	r6
   17e10:	subs	r1, r0, #0
   17e14:	bne	17ea4 <flatcc_builder_end_string@@Base+0x154>
   17e18:	cmp	r5, #0
   17e1c:	str	r5, [r4, #136]	; 0x88
   17e20:	beq	17e98 <flatcc_builder_end_string@@Base+0x148>
   17e24:	ldr	r2, [r4, #20]
   17e28:	ldr	r0, [r4, #16]
   17e2c:	bl	11fd8 <memset@plt>
   17e30:	ldr	r3, [r4, #32]
   17e34:	ldr	r2, [r4, #64]	; 0x40
   17e38:	ldrh	lr, [r4, #130]	; 0x82
   17e3c:	ldr	ip, [r3]
   17e40:	ldr	r1, [r3, #4]
   17e44:	ldrh	r0, [r4, #128]	; 0x80
   17e48:	sub	r2, r2, ip
   17e4c:	cmp	r2, r1
   17e50:	movcs	r2, r1
   17e54:	cmp	r0, lr
   17e58:	ldr	r0, [r4, #60]	; 0x3c
   17e5c:	ldr	r6, [r3, #8]
   17e60:	str	r2, [r4, #24]
   17e64:	add	r2, r0, ip
   17e68:	str	r2, [r4, #16]
   17e6c:	str	r6, [r4, #20]
   17e70:	ldr	r2, [r4, #156]	; 0x9c
   17e74:	str	ip, [r4, #28]
   17e78:	str	r1, [r3, #4]
   17e7c:	strhcc	lr, [r4, #128]	; 0x80
   17e80:	ldrh	r1, [r3, #12]
   17e84:	sub	r2, r2, #1
   17e88:	sub	r3, r3, #36	; 0x24
   17e8c:	str	r2, [r4, #156]	; 0x9c
   17e90:	strh	r1, [r4, #130]	; 0x82
   17e94:	str	r3, [r4, #32]
   17e98:	mov	r0, r5
   17e9c:	add	sp, sp, #88	; 0x58
   17ea0:	pop	{r4, r5, r6, pc}
   17ea4:	ldr	r3, [pc, #60]	; 17ee8 <flatcc_builder_end_string@@Base+0x198>
   17ea8:	ldr	r2, [pc, #60]	; 17eec <flatcc_builder_end_string@@Base+0x19c>
   17eac:	ldr	r1, [pc, #60]	; 17ef0 <flatcc_builder_end_string@@Base+0x1a0>
   17eb0:	ldr	r0, [pc, #60]	; 17ef4 <flatcc_builder_end_string@@Base+0x1a4>
   17eb4:	bl	11ffc <__assert_fail@plt>
   17eb8:	bl	120c0 <__assert_fail@plt+0xc4>
   17ebc:	ldr	r3, [pc, #52]	; 17ef8 <flatcc_builder_end_string@@Base+0x1a8>
   17ec0:	ldr	r2, [pc, #52]	; 17efc <flatcc_builder_end_string@@Base+0x1ac>
   17ec4:	ldr	r1, [pc, #36]	; 17ef0 <flatcc_builder_end_string@@Base+0x1a0>
   17ec8:	ldr	r0, [pc, #48]	; 17f00 <flatcc_builder_end_string@@Base+0x1b0>
   17ecc:	bl	11ffc <__assert_fail@plt>
   17ed0:	ldr	r3, [pc, #32]	; 17ef8 <flatcc_builder_end_string@@Base+0x1a8>
   17ed4:	ldr	r2, [pc, #40]	; 17f04 <flatcc_builder_end_string@@Base+0x1b4>
   17ed8:	ldr	r1, [pc, #16]	; 17ef0 <flatcc_builder_end_string@@Base+0x1a0>
   17edc:	ldr	r0, [pc, #36]	; 17f08 <flatcc_builder_end_string@@Base+0x1b8>
   17ee0:	bl	11ffc <__assert_fail@plt>
   17ee4:	ldrdeq	r9, [r1], -r0
   17ee8:	andeq	r9, r1, r4, asr r4
   17eec:	andeq	r0, r0, fp, lsl #5
   17ef0:	andeq	r9, r1, r8, lsl #23
   17ef4:	andeq	r9, r1, r8, asr #24
   17ef8:	andeq	r9, r1, ip, lsr #21
   17efc:	andeq	r0, r0, r5, asr #13
   17f00:	andeq	r9, r1, r8, asr #29
   17f04:	andeq	r0, r0, r4, asr #13
   17f08:	andeq	r9, r1, r8, lsl #24

00017f0c <flatcc_builder_string_edit@@Base>:
   17f0c:	ldr	r0, [r0, #16]
   17f10:	bx	lr

00017f14 <flatcc_builder_string_len@@Base>:
   17f14:	ldr	r3, [r0, #32]
   17f18:	ldr	r0, [r3, #20]
   17f1c:	bx	lr

00017f20 <flatcc_builder_table_add@@Base>:
   17f20:	push	{r4, r5, r6, r7, r8, r9, lr}
   17f24:	mov	r4, r0
   17f28:	ldr	r0, [r0, #32]
   17f2c:	sub	sp, sp, #12
   17f30:	ldrh	r0, [r0, #14]
   17f34:	cmp	r0, #3
   17f38:	bne	18074 <flatcc_builder_table_add@@Base+0x154>
   17f3c:	ldr	r0, [pc, #324]	; 18088 <flatcc_builder_table_add@@Base+0x168>
   17f40:	cmp	r1, r0
   17f44:	bhi	18060 <flatcc_builder_table_add@@Base+0x140>
   17f48:	ldrh	r0, [r4, #130]	; 0x82
   17f4c:	lsl	r7, r1, #1
   17f50:	cmp	r0, r3
   17f54:	ldr	r0, [r4, #4]
   17f58:	strhcc	r3, [r4, #130]	; 0x82
   17f5c:	add	lr, r0, r7
   17f60:	ldrh	r6, [r0, r7]
   17f64:	cmp	r6, #0
   17f68:	bne	1804c <flatcc_builder_table_add@@Base+0x12c>
   17f6c:	ldr	ip, [r4, #12]
   17f70:	ldr	r9, [pc, #276]	; 1808c <flatcc_builder_table_add@@Base+0x16c>
   17f74:	eor	ip, ip, r1
   17f78:	uxth	r5, r1
   17f7c:	mul	r1, r9, ip
   17f80:	ldr	r0, [r4, #20]
   17f84:	eor	r1, r1, r2
   17f88:	sub	r8, r3, #1
   17f8c:	add	r8, r8, r0
   17f90:	rsb	r3, r3, #0
   17f94:	and	r8, r8, r3
   17f98:	mul	r1, r9, r1
   17f9c:	ldr	r3, [r4, #24]
   17fa0:	add	r2, r2, r8
   17fa4:	cmp	r2, r3
   17fa8:	str	r1, [r4, #12]
   17fac:	str	r2, [r4, #20]
   17fb0:	bcs	17fdc <flatcc_builder_table_add@@Base+0xbc>
   17fb4:	ldr	r0, [r4, #16]
   17fb8:	add	r3, r8, #4
   17fbc:	strh	r3, [lr]
   17fc0:	ldrh	r3, [r4, #8]
   17fc4:	add	r0, r0, r8
   17fc8:	cmp	r3, r5
   17fcc:	addls	r5, r5, #1
   17fd0:	strhls	r5, [r4, #8]
   17fd4:	add	sp, sp, #12
   17fd8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17fdc:	ldr	r1, [r4, #28]
   17fe0:	mov	r3, #1
   17fe4:	add	r1, r1, #1
   17fe8:	ldr	r0, [r4, #40]	; 0x28
   17fec:	add	r2, r1, r2
   17ff0:	str	r3, [sp]
   17ff4:	add	r1, r4, #60	; 0x3c
   17ff8:	ldr	r9, [r4, #48]	; 0x30
   17ffc:	blx	r9
   18000:	cmp	r0, #0
   18004:	bne	18044 <flatcc_builder_table_add@@Base+0x124>
   18008:	ldr	r6, [r4, #28]
   1800c:	ldr	r3, [r4, #64]	; 0x40
   18010:	ldr	r2, [pc, #120]	; 18090 <flatcc_builder_table_add@@Base+0x170>
   18014:	sub	r3, r3, r6
   18018:	ldr	r0, [r4, #60]	; 0x3c
   1801c:	ldr	r1, [r4, #32]
   18020:	ldr	lr, [r4, #4]
   18024:	cmp	r3, r2
   18028:	add	r0, r0, r6
   1802c:	movcs	r3, r2
   18030:	str	r0, [r4, #16]
   18034:	str	r3, [r4, #24]
   18038:	add	lr, lr, r7
   1803c:	str	r2, [r1, #4]
   18040:	b	17fb8 <flatcc_builder_table_add@@Base+0x98>
   18044:	mov	r0, r6
   18048:	b	17fd4 <flatcc_builder_table_add@@Base+0xb4>
   1804c:	ldr	r3, [pc, #64]	; 18094 <flatcc_builder_table_add@@Base+0x174>
   18050:	ldr	r2, [pc, #64]	; 18098 <flatcc_builder_table_add@@Base+0x178>
   18054:	ldr	r1, [pc, #64]	; 1809c <flatcc_builder_table_add@@Base+0x17c>
   18058:	ldr	r0, [pc, #64]	; 180a0 <flatcc_builder_table_add@@Base+0x180>
   1805c:	bl	11ffc <__assert_fail@plt>
   18060:	ldr	r3, [pc, #44]	; 18094 <flatcc_builder_table_add@@Base+0x174>
   18064:	ldr	r2, [pc, #56]	; 180a4 <flatcc_builder_table_add@@Base+0x184>
   18068:	ldr	r1, [pc, #44]	; 1809c <flatcc_builder_table_add@@Base+0x17c>
   1806c:	ldr	r0, [pc, #52]	; 180a8 <flatcc_builder_table_add@@Base+0x188>
   18070:	bl	11ffc <__assert_fail@plt>
   18074:	ldr	r3, [pc, #24]	; 18094 <flatcc_builder_table_add@@Base+0x174>
   18078:	ldr	r2, [pc, #44]	; 180ac <flatcc_builder_table_add@@Base+0x18c>
   1807c:	ldr	r1, [pc, #24]	; 1809c <flatcc_builder_table_add@@Base+0x17c>
   18080:	ldr	r0, [pc, #40]	; 180b0 <flatcc_builder_table_add@@Base+0x190>
   18084:	bl	11ffc <__assert_fail@plt>
   18088:	strdeq	r7, [r0], -ip
   1808c:			; <UNDEFINED> instruction: 0x9e3779b1
   18090:	strdeq	pc, [r0], -ip
   18094:	andeq	r9, r1, r8, asr #21
   18098:	strdeq	r0, [r0], -r8
   1809c:	andeq	r9, r1, r8, lsl #23
   180a0:	andeq	r9, r1, r8, asr #24
   180a4:	andeq	r0, r0, lr, ror #13
   180a8:	andeq	r9, r1, ip, ror #29
   180ac:	andeq	r0, r0, sp, ror #13
   180b0:	andeq	r9, r1, r4, asr lr

000180b4 <flatcc_builder_table_edit@@Base>:
   180b4:	ldr	r3, [r0, #32]
   180b8:	ldrh	r3, [r3, #14]
   180bc:	cmp	r3, #3
   180c0:	bne	180d8 <flatcc_builder_table_edit@@Base+0x24>
   180c4:	ldr	r3, [r0, #20]
   180c8:	ldr	r0, [r0, #16]
   180cc:	sub	r1, r3, r1
   180d0:	add	r0, r0, r1
   180d4:	bx	lr
   180d8:	push	{r4, lr}
   180dc:	ldr	r3, [pc, #12]	; 180f0 <flatcc_builder_table_edit@@Base+0x3c>
   180e0:	ldr	r2, [pc, #12]	; 180f4 <flatcc_builder_table_edit@@Base+0x40>
   180e4:	ldr	r1, [pc, #12]	; 180f8 <flatcc_builder_table_edit@@Base+0x44>
   180e8:	ldr	r0, [pc, #12]	; 180fc <flatcc_builder_table_edit@@Base+0x48>
   180ec:	bl	11ffc <__assert_fail@plt>
   180f0:	andeq	r9, r1, r4, ror #21
   180f4:	andeq	r0, r0, r2, lsl #14
   180f8:	andeq	r9, r1, r8, lsl #23
   180fc:	andeq	r9, r1, r4, asr lr

00018100 <flatcc_builder_table_add_copy@@Base>:
   18100:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18104:	mov	r4, r0
   18108:	ldr	r0, [r0, #32]
   1810c:	mov	r7, r3
   18110:	sub	sp, sp, #12
   18114:	ldrh	r3, [r0, #14]
   18118:	ldrh	ip, [sp, #48]	; 0x30
   1811c:	cmp	r3, #3
   18120:	bne	1827c <flatcc_builder_table_add_copy@@Base+0x17c>
   18124:	ldr	r3, [pc, #356]	; 18290 <flatcc_builder_table_add_copy@@Base+0x190>
   18128:	cmp	r1, r3
   1812c:	bhi	18268 <flatcc_builder_table_add_copy@@Base+0x168>
   18130:	ldrh	r3, [r4, #130]	; 0x82
   18134:	lsl	sl, r1, #1
   18138:	mov	r8, r2
   1813c:	cmp	r3, ip
   18140:	ldr	r3, [r4, #4]
   18144:	strhcc	ip, [r4, #130]	; 0x82
   18148:	add	r0, r3, sl
   1814c:	ldrh	r5, [r3, sl]
   18150:	cmp	r5, #0
   18154:	bne	18254 <flatcc_builder_table_add_copy@@Base+0x154>
   18158:	ldr	r2, [r4, #12]
   1815c:	ldr	lr, [pc, #304]	; 18294 <flatcc_builder_table_add_copy@@Base+0x194>
   18160:	eor	r2, r2, r1
   18164:	ldr	r6, [r4, #20]
   18168:	mul	r2, lr, r2
   1816c:	sub	r3, ip, #1
   18170:	eor	r2, r2, r7
   18174:	add	r3, r3, r6
   18178:	rsb	ip, ip, #0
   1817c:	and	r6, r3, ip
   18180:	mul	lr, lr, r2
   18184:	ldr	r3, [r4, #24]
   18188:	uxth	r9, r1
   1818c:	add	r1, r7, r6
   18190:	cmp	r1, r3
   18194:	str	lr, [r4, #12]
   18198:	str	r1, [r4, #20]
   1819c:	bcs	181e4 <flatcc_builder_table_add_copy@@Base+0xe4>
   181a0:	ldr	r3, [r4, #16]
   181a4:	add	r2, r6, #4
   181a8:	strh	r2, [r0]
   181ac:	ldrh	r2, [r4, #8]
   181b0:	cmp	r2, r9
   181b4:	addls	r9, r9, #1
   181b8:	strhls	r9, [r4, #8]
   181bc:	adds	r3, r3, r6
   181c0:	beq	181d8 <flatcc_builder_table_add_copy@@Base+0xd8>
   181c4:	mov	r0, r3
   181c8:	mov	r2, r7
   181cc:	mov	r1, r8
   181d0:	bl	11f6c <memcpy@plt>
   181d4:	mov	r3, r0
   181d8:	mov	r0, r3
   181dc:	add	sp, sp, #12
   181e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181e4:	ldr	r2, [r4, #28]
   181e8:	mov	r3, #1
   181ec:	add	r2, r2, #1
   181f0:	ldr	r0, [r4, #40]	; 0x28
   181f4:	add	r2, r2, r1
   181f8:	str	r3, [sp]
   181fc:	add	r1, r4, #60	; 0x3c
   18200:	ldr	fp, [r4, #48]	; 0x30
   18204:	blx	fp
   18208:	cmp	r0, #0
   1820c:	bne	1824c <flatcc_builder_table_add_copy@@Base+0x14c>
   18210:	ldr	r0, [r4, #28]
   18214:	ldr	r2, [r4, #64]	; 0x40
   18218:	ldr	r1, [pc, #120]	; 18298 <flatcc_builder_table_add_copy@@Base+0x198>
   1821c:	ldr	r3, [r4, #60]	; 0x3c
   18220:	sub	r2, r2, r0
   18224:	ldr	ip, [r4, #32]
   18228:	add	r3, r3, r0
   1822c:	cmp	r2, r1
   18230:	ldr	r0, [r4, #4]
   18234:	movcs	r2, r1
   18238:	str	r3, [r4, #16]
   1823c:	str	r2, [r4, #24]
   18240:	add	r0, r0, sl
   18244:	str	r1, [ip, #4]
   18248:	b	181a4 <flatcc_builder_table_add_copy@@Base+0xa4>
   1824c:	mov	r3, r5
   18250:	b	181d8 <flatcc_builder_table_add_copy@@Base+0xd8>
   18254:	ldr	r3, [pc, #64]	; 1829c <flatcc_builder_table_add_copy@@Base+0x19c>
   18258:	ldr	r2, [pc, #64]	; 182a0 <flatcc_builder_table_add_copy@@Base+0x1a0>
   1825c:	ldr	r1, [pc, #64]	; 182a4 <flatcc_builder_table_add_copy@@Base+0x1a4>
   18260:	ldr	r0, [pc, #64]	; 182a8 <flatcc_builder_table_add_copy@@Base+0x1a8>
   18264:	bl	11ffc <__assert_fail@plt>
   18268:	ldr	r3, [pc, #44]	; 1829c <flatcc_builder_table_add_copy@@Base+0x19c>
   1826c:	ldr	r2, [pc, #56]	; 182ac <flatcc_builder_table_add_copy@@Base+0x1ac>
   18270:	ldr	r1, [pc, #44]	; 182a4 <flatcc_builder_table_add_copy@@Base+0x1a4>
   18274:	ldr	r0, [pc, #52]	; 182b0 <flatcc_builder_table_add_copy@@Base+0x1b0>
   18278:	bl	11ffc <__assert_fail@plt>
   1827c:	ldr	r3, [pc, #24]	; 1829c <flatcc_builder_table_add_copy@@Base+0x19c>
   18280:	ldr	r2, [pc, #44]	; 182b4 <flatcc_builder_table_add_copy@@Base+0x1b4>
   18284:	ldr	r1, [pc, #24]	; 182a4 <flatcc_builder_table_add_copy@@Base+0x1a4>
   18288:	ldr	r0, [pc, #40]	; 182b8 <flatcc_builder_table_add_copy@@Base+0x1b8>
   1828c:	bl	11ffc <__assert_fail@plt>
   18290:	strdeq	r7, [r0], -ip
   18294:			; <UNDEFINED> instruction: 0x9e3779b1
   18298:	strdeq	pc, [r0], -ip
   1829c:	andeq	r9, r1, r8, asr #21
   182a0:	strdeq	r0, [r0], -r8
   182a4:	andeq	r9, r1, r8, lsl #23
   182a8:	andeq	r9, r1, r8, asr #24
   182ac:	andeq	r0, r0, lr, ror #13
   182b0:	andeq	r9, r1, ip, ror #29
   182b4:	andeq	r0, r0, sp, ror #13
   182b8:	andeq	r9, r1, r4, asr lr

000182bc <flatcc_builder_table_add_offset@@Base>:
   182bc:	ldr	r3, [r0, #32]
   182c0:	push	{r4, r5, r6, r7, r8, r9, lr}
   182c4:	sub	sp, sp, #12
   182c8:	ldrh	r3, [r3, #14]
   182cc:	cmp	r3, #3
   182d0:	bne	1840c <flatcc_builder_table_add_offset@@Base+0x150>
   182d4:	ldr	r3, [pc, #324]	; 18420 <flatcc_builder_table_add_offset@@Base+0x164>
   182d8:	cmp	r1, r3
   182dc:	bhi	183f8 <flatcc_builder_table_add_offset@@Base+0x13c>
   182e0:	ldr	r3, [r0, #4]
   182e4:	lsl	r7, r1, #1
   182e8:	mov	r4, r0
   182ec:	ldrh	r6, [r3, r7]
   182f0:	add	ip, r3, r7
   182f4:	cmp	r6, #0
   182f8:	bne	183e4 <flatcc_builder_table_add_offset@@Base+0x128>
   182fc:	ldr	r3, [r0, #12]
   18300:	ldr	r2, [pc, #284]	; 18424 <flatcc_builder_table_add_offset@@Base+0x168>
   18304:	eor	r3, r3, r1
   18308:	ldr	r5, [r0, #20]
   1830c:	mul	r3, r2, r3
   18310:	add	r5, r5, #3
   18314:	eor	r3, r3, #4
   18318:	ldr	r0, [r0, #24]
   1831c:	mul	r3, r2, r3
   18320:	bic	r5, r5, #3
   18324:	add	r2, r5, #4
   18328:	cmp	r2, r0
   1832c:	uxth	r8, r1
   18330:	str	r3, [r4, #12]
   18334:	str	r2, [r4, #20]
   18338:	bhi	18378 <flatcc_builder_table_add_offset@@Base+0xbc>
   1833c:	ldr	r0, [r4, #16]
   18340:	uxth	r2, r5
   18344:	add	r3, r2, #4
   18348:	strh	r3, [ip]
   1834c:	ldrh	r3, [r4, #8]
   18350:	add	r0, r0, r5
   18354:	cmp	r3, r8
   18358:	ldr	r3, [r4]
   1835c:	addls	r1, r8, #1
   18360:	strhls	r1, [r4, #8]
   18364:	add	r1, r3, #2
   18368:	str	r1, [r4]
   1836c:	strh	r2, [r3]
   18370:	add	sp, sp, #12
   18374:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18378:	ldr	r1, [r4, #28]
   1837c:	mov	r3, #1
   18380:	ldr	r0, [r4, #40]	; 0x28
   18384:	add	r2, r2, r1
   18388:	str	r3, [sp]
   1838c:	add	r1, r4, #60	; 0x3c
   18390:	ldr	r9, [r4, #48]	; 0x30
   18394:	blx	r9
   18398:	cmp	r0, #0
   1839c:	bne	183dc <flatcc_builder_table_add_offset@@Base+0x120>
   183a0:	ldr	r6, [r4, #28]
   183a4:	ldr	r3, [r4, #64]	; 0x40
   183a8:	ldr	r2, [pc, #120]	; 18428 <flatcc_builder_table_add_offset@@Base+0x16c>
   183ac:	sub	r3, r3, r6
   183b0:	ldr	r0, [r4, #60]	; 0x3c
   183b4:	ldr	r1, [r4, #32]
   183b8:	ldr	ip, [r4, #4]
   183bc:	cmp	r3, r2
   183c0:	add	r0, r0, r6
   183c4:	movcs	r3, r2
   183c8:	str	r0, [r4, #16]
   183cc:	str	r3, [r4, #24]
   183d0:	add	ip, ip, r7
   183d4:	str	r2, [r1, #4]
   183d8:	b	18340 <flatcc_builder_table_add_offset@@Base+0x84>
   183dc:	mov	r0, r6
   183e0:	b	18370 <flatcc_builder_table_add_offset@@Base+0xb4>
   183e4:	ldr	r3, [pc, #64]	; 1842c <flatcc_builder_table_add_offset@@Base+0x170>
   183e8:	ldr	r2, [pc, #64]	; 18430 <flatcc_builder_table_add_offset@@Base+0x174>
   183ec:	ldr	r1, [pc, #64]	; 18434 <flatcc_builder_table_add_offset@@Base+0x178>
   183f0:	ldr	r0, [pc, #64]	; 18438 <flatcc_builder_table_add_offset@@Base+0x17c>
   183f4:	bl	11ffc <__assert_fail@plt>
   183f8:	ldr	r3, [pc, #44]	; 1842c <flatcc_builder_table_add_offset@@Base+0x170>
   183fc:	ldr	r2, [pc, #56]	; 1843c <flatcc_builder_table_add_offset@@Base+0x180>
   18400:	ldr	r1, [pc, #44]	; 18434 <flatcc_builder_table_add_offset@@Base+0x178>
   18404:	ldr	r0, [pc, #52]	; 18440 <flatcc_builder_table_add_offset@@Base+0x184>
   18408:	bl	11ffc <__assert_fail@plt>
   1840c:	ldr	r3, [pc, #24]	; 1842c <flatcc_builder_table_add_offset@@Base+0x170>
   18410:	ldr	r2, [pc, #44]	; 18444 <flatcc_builder_table_add_offset@@Base+0x188>
   18414:	ldr	r1, [pc, #24]	; 18434 <flatcc_builder_table_add_offset@@Base+0x178>
   18418:	ldr	r0, [pc, #40]	; 18448 <flatcc_builder_table_add_offset@@Base+0x18c>
   1841c:	bl	11ffc <__assert_fail@plt>
   18420:	strdeq	r7, [r0], -ip
   18424:			; <UNDEFINED> instruction: 0x9e3779b1
   18428:	strdeq	pc, [r0], -ip
   1842c:	andeq	r9, r1, r0, lsl #22
   18430:	andeq	r0, r0, fp, lsl r7
   18434:	andeq	r9, r1, r8, lsl #23
   18438:	andeq	r9, r1, r8, asr #24
   1843c:	andeq	r0, r0, r4, lsl r7
   18440:	andeq	r9, r1, ip, ror #29
   18444:	andeq	r0, r0, r3, lsl r7
   18448:	andeq	r9, r1, r4, asr lr

0001844c <flatcc_builder_table_add_union@@Base>:
   1844c:	push	{r4, r5, r6, r7, r8, r9, lr}
   18450:	sub	sp, sp, #20
   18454:	add	ip, sp, #16
   18458:	stmdb	ip, {r2, r3}
   1845c:	ldr	r3, [r0, #32]
   18460:	ldrb	r6, [sp, #8]
   18464:	ldr	r5, [sp, #12]
   18468:	ldrh	r3, [r3, #14]
   1846c:	cmp	r3, #3
   18470:	bne	185fc <flatcc_builder_table_add_union@@Base+0x1b0>
   18474:	cmp	r6, #0
   18478:	mov	r4, r0
   1847c:	mov	r7, r1
   18480:	beq	18550 <flatcc_builder_table_add_union@@Base+0x104>
   18484:	cmp	r5, #0
   18488:	beq	184ac <flatcc_builder_table_add_union@@Base+0x60>
   1848c:	bl	182bc <flatcc_builder_table_add_offset@@Base>
   18490:	cmp	r0, #0
   18494:	beq	18638 <flatcc_builder_table_add_union@@Base+0x1ec>
   18498:	ldr	r3, [r4, #32]
   1849c:	str	r5, [r0]
   184a0:	ldrh	r3, [r3, #14]
   184a4:	cmp	r3, #3
   184a8:	bne	18610 <flatcc_builder_table_add_union@@Base+0x1c4>
   184ac:	ldr	r3, [pc, #408]	; 1864c <flatcc_builder_table_add_union@@Base+0x200>
   184b0:	sub	r1, r7, #1
   184b4:	cmp	r1, r3
   184b8:	bhi	18624 <flatcc_builder_table_add_union@@Base+0x1d8>
   184bc:	ldrh	r3, [r4, #130]	; 0x82
   184c0:	lsl	r5, r1, #1
   184c4:	cmp	r3, #0
   184c8:	moveq	r3, #1
   184cc:	strheq	r3, [r4, #130]	; 0x82
   184d0:	ldr	r3, [r4, #4]
   184d4:	add	r0, r3, r5
   184d8:	ldrh	r3, [r3, r5]
   184dc:	cmp	r3, #0
   184e0:	bne	185e8 <flatcc_builder_table_add_union@@Base+0x19c>
   184e4:	ldr	r3, [r4, #12]
   184e8:	ldr	r2, [pc, #352]	; 18650 <flatcc_builder_table_add_union@@Base+0x204>
   184ec:	eor	r3, r3, r1
   184f0:	ldr	r7, [r4, #20]
   184f4:	mul	r3, r2, r3
   184f8:	uxth	r8, r1
   184fc:	eor	r3, r3, #1
   18500:	ldr	r1, [r4, #24]
   18504:	mul	r3, r2, r3
   18508:	add	r2, r7, #1
   1850c:	cmp	r2, r1
   18510:	str	r3, [r4, #12]
   18514:	str	r2, [r4, #20]
   18518:	bcs	1856c <flatcc_builder_table_add_union@@Base+0x120>
   1851c:	ldr	r3, [r4, #16]
   18520:	add	r2, r7, #4
   18524:	strh	r2, [r0]
   18528:	ldrh	r2, [r4, #8]
   1852c:	cmp	r2, r8
   18530:	addls	r1, r8, #1
   18534:	strhls	r1, [r4, #8]
   18538:	cmn	r3, r7
   1853c:	beq	185d4 <flatcc_builder_table_add_union@@Base+0x188>
   18540:	mov	r0, #0
   18544:	strb	r6, [r3, r7]
   18548:	add	sp, sp, #20
   1854c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18550:	cmp	r5, #0
   18554:	beq	184ac <flatcc_builder_table_add_union@@Base+0x60>
   18558:	ldr	r3, [pc, #244]	; 18654 <flatcc_builder_table_add_union@@Base+0x208>
   1855c:	ldr	r2, [pc, #244]	; 18658 <flatcc_builder_table_add_union@@Base+0x20c>
   18560:	ldr	r1, [pc, #244]	; 1865c <flatcc_builder_table_add_union@@Base+0x210>
   18564:	ldr	r0, [pc, #244]	; 18660 <flatcc_builder_table_add_union@@Base+0x214>
   18568:	bl	11ffc <__assert_fail@plt>
   1856c:	ldr	r2, [r4, #28]
   18570:	mov	r3, #1
   18574:	add	r2, r7, r2
   18578:	ldr	r0, [r4, #40]	; 0x28
   1857c:	add	r2, r2, #2
   18580:	str	r3, [sp]
   18584:	add	r1, r4, #60	; 0x3c
   18588:	ldr	r9, [r4, #48]	; 0x30
   1858c:	blx	r9
   18590:	cmp	r0, #0
   18594:	bne	185d4 <flatcc_builder_table_add_union@@Base+0x188>
   18598:	ldr	r0, [r4, #28]
   1859c:	ldr	r2, [r4, #64]	; 0x40
   185a0:	ldr	r1, [pc, #188]	; 18664 <flatcc_builder_table_add_union@@Base+0x218>
   185a4:	ldr	r3, [r4, #60]	; 0x3c
   185a8:	sub	r2, r2, r0
   185ac:	ldr	ip, [r4, #32]
   185b0:	add	r3, r3, r0
   185b4:	cmp	r2, r1
   185b8:	ldr	r0, [r4, #4]
   185bc:	movcs	r2, r1
   185c0:	str	r3, [r4, #16]
   185c4:	str	r2, [r4, #24]
   185c8:	add	r0, r0, r5
   185cc:	str	r1, [ip, #4]
   185d0:	b	18520 <flatcc_builder_table_add_union@@Base+0xd4>
   185d4:	ldr	r3, [pc, #120]	; 18654 <flatcc_builder_table_add_union@@Base+0x208>
   185d8:	ldr	r2, [pc, #136]	; 18668 <flatcc_builder_table_add_union@@Base+0x21c>
   185dc:	ldr	r1, [pc, #120]	; 1865c <flatcc_builder_table_add_union@@Base+0x210>
   185e0:	ldr	r0, [pc, #132]	; 1866c <flatcc_builder_table_add_union@@Base+0x220>
   185e4:	bl	11ffc <__assert_fail@plt>
   185e8:	ldr	r3, [pc, #128]	; 18670 <flatcc_builder_table_add_union@@Base+0x224>
   185ec:	ldr	r2, [pc, #128]	; 18674 <flatcc_builder_table_add_union@@Base+0x228>
   185f0:	ldr	r1, [pc, #100]	; 1865c <flatcc_builder_table_add_union@@Base+0x210>
   185f4:	ldr	r0, [pc, #124]	; 18678 <flatcc_builder_table_add_union@@Base+0x22c>
   185f8:	bl	11ffc <__assert_fail@plt>
   185fc:	ldr	r3, [pc, #80]	; 18654 <flatcc_builder_table_add_union@@Base+0x208>
   18600:	ldr	r2, [pc, #116]	; 1867c <flatcc_builder_table_add_union@@Base+0x230>
   18604:	ldr	r1, [pc, #80]	; 1865c <flatcc_builder_table_add_union@@Base+0x210>
   18608:	ldr	r0, [pc, #112]	; 18680 <flatcc_builder_table_add_union@@Base+0x234>
   1860c:	bl	11ffc <__assert_fail@plt>
   18610:	ldr	r3, [pc, #88]	; 18670 <flatcc_builder_table_add_union@@Base+0x224>
   18614:	ldr	r2, [pc, #104]	; 18684 <flatcc_builder_table_add_union@@Base+0x238>
   18618:	ldr	r1, [pc, #60]	; 1865c <flatcc_builder_table_add_union@@Base+0x210>
   1861c:	ldr	r0, [pc, #92]	; 18680 <flatcc_builder_table_add_union@@Base+0x234>
   18620:	bl	11ffc <__assert_fail@plt>
   18624:	ldr	r3, [pc, #68]	; 18670 <flatcc_builder_table_add_union@@Base+0x224>
   18628:	ldr	r2, [pc, #88]	; 18688 <flatcc_builder_table_add_union@@Base+0x23c>
   1862c:	ldr	r1, [pc, #40]	; 1865c <flatcc_builder_table_add_union@@Base+0x210>
   18630:	ldr	r0, [pc, #84]	; 1868c <flatcc_builder_table_add_union@@Base+0x240>
   18634:	bl	11ffc <__assert_fail@plt>
   18638:	ldr	r3, [pc, #20]	; 18654 <flatcc_builder_table_add_union@@Base+0x208>
   1863c:	ldr	r2, [pc, #76]	; 18690 <flatcc_builder_table_add_union@@Base+0x244>
   18640:	ldr	r1, [pc, #20]	; 1865c <flatcc_builder_table_add_union@@Base+0x210>
   18644:	ldr	r0, [pc, #72]	; 18694 <flatcc_builder_table_add_union@@Base+0x248>
   18648:	bl	11ffc <__assert_fail@plt>
   1864c:	strdeq	r7, [r0], -ip
   18650:			; <UNDEFINED> instruction: 0x9e3779b1
   18654:	andeq	r9, r1, r0, lsr #22
   18658:	andeq	r0, r0, pc, ror #11
   1865c:	andeq	r9, r1, r8, lsl #23
   18660:	andeq	r9, r1, r0, lsr pc
   18664:	strdeq	pc, [r0], -ip
   18668:	strdeq	r0, [r0], -r6
   1866c:	andeq	r9, r1, r0, ror #30
   18670:	andeq	r9, r1, r8, asr #21
   18674:	strdeq	r0, [r0], -r8
   18678:	andeq	r9, r1, r8, asr #24
   1867c:	andeq	r0, r0, lr, ror #11
   18680:	andeq	r9, r1, r4, asr lr
   18684:	andeq	r0, r0, sp, ror #13
   18688:	andeq	r0, r0, lr, ror #13
   1868c:	andeq	r9, r1, ip, ror #29
   18690:	strdeq	r0, [r0], -r2
   18694:	andeq	r9, r1, r4, asr pc

00018698 <flatcc_builder_table_add_union_vector@@Base>:
   18698:	push	{r4, r5, r6, r7, lr}
   1869c:	sub	sp, sp, #12
   186a0:	add	ip, sp, #8
   186a4:	stmdb	ip, {r2, r3}
   186a8:	ldr	r3, [r0, #32]
   186ac:	ldr	r4, [sp]
   186b0:	ldr	r6, [sp, #4]
   186b4:	ldrh	r3, [r3, #14]
   186b8:	cmp	r3, #3
   186bc:	bne	1874c <flatcc_builder_table_add_union_vector@@Base+0xb4>
   186c0:	clz	r3, r6
   186c4:	clz	r2, r4
   186c8:	lsr	r3, r3, #5
   186cc:	lsr	r2, r2, #5
   186d0:	cmp	r2, r3
   186d4:	beq	186f4 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   186d8:	adds	r4, r4, #0
   186dc:	movne	r4, #1
   186e0:	cmp	r4, r3
   186e4:	mvnne	r0, #0
   186e8:	beq	18760 <flatcc_builder_table_add_union_vector@@Base+0xc8>
   186ec:	add	sp, sp, #12
   186f0:	pop	{r4, r5, r6, r7, pc}
   186f4:	cmp	r4, #0
   186f8:	moveq	r0, r4
   186fc:	beq	186ec <flatcc_builder_table_add_union_vector@@Base+0x54>
   18700:	mov	r7, r1
   18704:	sub	r1, r1, #1
   18708:	mov	r5, r0
   1870c:	bl	182bc <flatcc_builder_table_add_offset@@Base>
   18710:	cmp	r0, #0
   18714:	beq	18774 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   18718:	str	r4, [r0]
   1871c:	mov	r1, r7
   18720:	mov	r0, r5
   18724:	bl	182bc <flatcc_builder_table_add_offset@@Base>
   18728:	cmp	r0, #0
   1872c:	strne	r6, [r0]
   18730:	movne	r0, #0
   18734:	bne	186ec <flatcc_builder_table_add_union_vector@@Base+0x54>
   18738:	ldr	r3, [pc, #72]	; 18788 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   1873c:	ldr	r2, [pc, #72]	; 1878c <flatcc_builder_table_add_union_vector@@Base+0xf4>
   18740:	ldr	r1, [pc, #72]	; 18790 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   18744:	ldr	r0, [pc, #72]	; 18794 <flatcc_builder_table_add_union_vector@@Base+0xfc>
   18748:	bl	11ffc <__assert_fail@plt>
   1874c:	ldr	r3, [pc, #52]	; 18788 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   18750:	mov	r2, #1536	; 0x600
   18754:	ldr	r1, [pc, #52]	; 18790 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   18758:	ldr	r0, [pc, #56]	; 18798 <flatcc_builder_table_add_union_vector@@Base+0x100>
   1875c:	bl	11ffc <__assert_fail@plt>
   18760:	ldr	r3, [pc, #32]	; 18788 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   18764:	ldr	r2, [pc, #48]	; 1879c <flatcc_builder_table_add_union_vector@@Base+0x104>
   18768:	ldr	r1, [pc, #32]	; 18790 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   1876c:	ldr	r0, [pc, #44]	; 187a0 <flatcc_builder_table_add_union_vector@@Base+0x108>
   18770:	bl	11ffc <__assert_fail@plt>
   18774:	ldr	r3, [pc, #12]	; 18788 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   18778:	ldr	r2, [pc, #36]	; 187a4 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   1877c:	ldr	r1, [pc, #12]	; 18790 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   18780:	ldr	r0, [pc, #12]	; 18794 <flatcc_builder_table_add_union_vector@@Base+0xfc>
   18784:	bl	11ffc <__assert_fail@plt>
   18788:	andeq	r9, r1, r0, asr #22
   1878c:	andeq	r0, r0, r8, lsl #12
   18790:	andeq	r9, r1, r8, lsl #23
   18794:	andeq	r9, r1, r4, asr pc
   18798:	andeq	r9, r1, r4, asr lr
   1879c:	andeq	r0, r0, r1, lsl #12
   187a0:	andeq	r9, r1, ip, ror #30
   187a4:	andeq	r0, r0, r4, lsl #12

000187a8 <flatcc_builder_push_buffer_alignment@@Base>:
   187a8:	mov	r3, r0
   187ac:	mov	r2, #4
   187b0:	ldrh	r0, [r0, #128]	; 0x80
   187b4:	strh	r2, [r3, #128]	; 0x80
   187b8:	bx	lr

000187bc <flatcc_builder_pop_buffer_alignment@@Base>:
   187bc:	ldrh	r3, [r0, #128]	; 0x80
   187c0:	cmp	r3, r1
   187c4:	strhcc	r1, [r0, #128]	; 0x80
   187c8:	bx	lr

000187cc <flatcc_builder_get_buffer_alignment@@Base>:
   187cc:	ldrh	r0, [r0, #128]	; 0x80
   187d0:	bx	lr

000187d4 <flatcc_builder_set_vtable_clustering@@Base>:
   187d4:	clz	r1, r1
   187d8:	lsr	r1, r1, #5
   187dc:	str	r1, [r0, #180]	; 0xb4
   187e0:	bx	lr

000187e4 <flatcc_builder_set_block_align@@Base>:
   187e4:	strh	r1, [r0, #132]	; 0x84
   187e8:	bx	lr

000187ec <flatcc_builder_get_level@@Base>:
   187ec:	ldr	r0, [r0, #156]	; 0x9c
   187f0:	bx	lr

000187f4 <flatcc_builder_set_max_level@@Base>:
   187f4:	ldr	r3, [r0, #160]	; 0xa0
   187f8:	str	r1, [r0, #176]	; 0xb0
   187fc:	cmp	r1, r3
   18800:	strgt	r1, [r0, #160]	; 0xa0
   18804:	bx	lr

00018808 <flatcc_builder_get_buffer_size@@Base>:
   18808:	ldr	r2, [r0, #140]	; 0x8c
   1880c:	ldr	r0, [r0, #136]	; 0x88
   18810:	sub	r0, r2, r0
   18814:	bx	lr

00018818 <flatcc_builder_get_buffer_start@@Base>:
   18818:	ldr	r0, [r0, #136]	; 0x88
   1881c:	bx	lr

00018820 <flatcc_builder_get_buffer_end@@Base>:
   18820:	ldr	r0, [r0, #140]	; 0x8c
   18824:	bx	lr

00018828 <flatcc_builder_set_vtable_cache_limit@@Base>:
   18828:	str	r1, [r0, #172]	; 0xac
   1882c:	bx	lr

00018830 <flatcc_builder_set_identifier@@Base>:
   18830:	ldr	r3, [pc, #16]	; 18848 <flatcc_builder_set_identifier@@Base+0x18>
   18834:	cmp	r1, #0
   18838:	moveq	r1, r3
   1883c:	ldr	r3, [r1]
   18840:	str	r3, [r0, #168]	; 0xa8
   18844:	bx	lr
   18848:	ldrdeq	r9, [r1], -r0

0001884c <flatcc_builder_get_type@@Base>:
   1884c:	ldr	r0, [r0, #32]
   18850:	cmp	r0, #0
   18854:	ldrhne	r0, [r0, #14]
   18858:	bx	lr

0001885c <flatcc_builder_get_type_at@@Base>:
   1885c:	cmp	r1, #0
   18860:	ble	18888 <flatcc_builder_get_type_at@@Base+0x2c>
   18864:	ldr	r3, [r0, #156]	; 0x9c
   18868:	cmp	r1, r3
   1886c:	bgt	18888 <flatcc_builder_get_type_at@@Base+0x2c>
   18870:	sub	r1, r1, r3
   18874:	ldr	r3, [r0, #32]
   18878:	add	r1, r1, r1, lsl #3
   1887c:	add	r1, r3, r1, lsl #2
   18880:	ldrh	r0, [r1, #14]
   18884:	bx	lr
   18888:	mov	r0, #0
   1888c:	bx	lr

00018890 <flatcc_builder_get_direct_buffer@@Base>:
   18890:	ldr	r3, [r0, #184]	; 0xb8
   18894:	cmp	r3, #0
   18898:	beq	188ac <flatcc_builder_get_direct_buffer@@Base+0x1c>
   1889c:	ldr	r2, [r0, #188]	; 0xbc
   188a0:	ldr	r3, [r0, #192]	; 0xc0
   188a4:	cmp	r2, r3
   188a8:	beq	188c0 <flatcc_builder_get_direct_buffer@@Base+0x30>
   188ac:	cmp	r1, #0
   188b0:	movne	r0, #0
   188b4:	strne	r0, [r1]
   188b8:	moveq	r0, r1
   188bc:	bx	lr
   188c0:	cmp	r1, #0
   188c4:	ldrne	r3, [r0, #212]	; 0xd4
   188c8:	ldr	r0, [r0, #196]	; 0xc4
   188cc:	strne	r3, [r1]
   188d0:	bx	lr

000188d4 <flatcc_builder_copy_buffer@@Base>:
   188d4:	ldr	r3, [r0, #184]	; 0xb8
   188d8:	cmp	r3, #0
   188dc:	beq	188f8 <flatcc_builder_copy_buffer@@Base+0x24>
   188e0:	push	{r4, lr}
   188e4:	add	r0, r0, #188	; 0xbc
   188e8:	bl	18fac <flatcc_emitter_copy_buffer@@Base>
   188ec:	cmp	r0, #0
   188f0:	popne	{r4, pc}
   188f4:	bl	1215c <__assert_fail@plt+0x160>
   188f8:	mov	r0, r3
   188fc:	bx	lr

00018900 <flatcc_builder_finalize_buffer@@Base>:
   18900:	push	{r4, r5, r6, lr}
   18904:	cmp	r1, #0
   18908:	ldr	r4, [r0, #140]	; 0x8c
   1890c:	ldr	r2, [r0, #136]	; 0x88
   18910:	mov	r5, r0
   18914:	sub	r4, r4, r2
   18918:	strne	r4, [r1]
   1891c:	mov	r0, r4
   18920:	bl	11f9c <malloc@plt>
   18924:	subs	r6, r0, #0
   18928:	beq	1896c <flatcc_builder_finalize_buffer@@Base+0x6c>
   1892c:	ldr	r3, [r5, #184]	; 0xb8
   18930:	cmp	r3, #0
   18934:	beq	18958 <flatcc_builder_finalize_buffer@@Base+0x58>
   18938:	mov	r2, r4
   1893c:	add	r0, r5, #188	; 0xbc
   18940:	mov	r1, r6
   18944:	bl	18fac <flatcc_emitter_copy_buffer@@Base>
   18948:	cmp	r0, #0
   1894c:	beq	18980 <flatcc_builder_finalize_buffer@@Base+0x80>
   18950:	mov	r0, r6
   18954:	pop	{r4, r5, r6, pc}
   18958:	ldr	r3, [pc, #36]	; 18984 <flatcc_builder_finalize_buffer@@Base+0x84>
   1895c:	ldr	r2, [pc, #36]	; 18988 <flatcc_builder_finalize_buffer@@Base+0x88>
   18960:	ldr	r1, [pc, #36]	; 1898c <flatcc_builder_finalize_buffer@@Base+0x8c>
   18964:	ldr	r0, [pc, #36]	; 18990 <flatcc_builder_finalize_buffer@@Base+0x90>
   18968:	bl	11ffc <__assert_fail@plt>
   1896c:	ldr	r3, [pc, #16]	; 18984 <flatcc_builder_finalize_buffer@@Base+0x84>
   18970:	ldr	r2, [pc, #28]	; 18994 <flatcc_builder_finalize_buffer@@Base+0x94>
   18974:	ldr	r1, [pc, #16]	; 1898c <flatcc_builder_finalize_buffer@@Base+0x8c>
   18978:	ldr	r0, [pc, #16]	; 18990 <flatcc_builder_finalize_buffer@@Base+0x90>
   1897c:	bl	11ffc <__assert_fail@plt>
   18980:	bl	1215c <__assert_fail@plt+0x160>
   18984:	andeq	r9, r1, r8, ror #22
   18988:	muleq	r0, ip, r7
   1898c:	andeq	r9, r1, r8, lsl #23
   18990:	andeq	r9, r1, r8, asr #24
   18994:	muleq	r0, r8, r7

00018998 <flatcc_builder_finalize_aligned_buffer@@Base>:
   18998:	push	{r4, r5, r6, r7, lr}
   1899c:	subs	r7, r1, #0
   189a0:	ldrh	r1, [r0, #128]	; 0x80
   189a4:	ldr	r4, [r0, #140]	; 0x8c
   189a8:	ldr	r3, [r0, #136]	; 0x88
   189ac:	sub	sp, sp, #12
   189b0:	sub	r3, r4, r3
   189b4:	sub	r4, r1, #1
   189b8:	strne	r3, [r7]
   189bc:	add	r4, r4, r3
   189c0:	mov	r5, r0
   189c4:	rsb	r3, r1, #0
   189c8:	add	r0, sp, #8
   189cc:	cmp	r1, #4
   189d0:	mov	ip, #0
   189d4:	and	r4, r4, r3
   189d8:	movcc	r1, #4
   189dc:	mov	r2, r4
   189e0:	str	ip, [r0, #-4]!
   189e4:	bl	11fcc <posix_memalign@plt>
   189e8:	cmp	r0, #0
   189ec:	beq	18a1c <flatcc_builder_finalize_aligned_buffer@@Base+0x84>
   189f0:	ldr	r0, [sp, #4]
   189f4:	cmp	r0, #0
   189f8:	beq	18a00 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   189fc:	bl	11f60 <free@plt>
   18a00:	cmp	r7, #0
   18a04:	moveq	r6, r7
   18a08:	movne	r6, #0
   18a0c:	strne	r6, [r7]
   18a10:	mov	r0, r6
   18a14:	add	sp, sp, #12
   18a18:	pop	{r4, r5, r6, r7, pc}
   18a1c:	ldr	r6, [sp, #4]
   18a20:	cmp	r6, #0
   18a24:	beq	18a00 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   18a28:	ldr	r3, [r5, #184]	; 0xb8
   18a2c:	cmp	r3, #0
   18a30:	beq	18a50 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   18a34:	mov	r2, r4
   18a38:	add	r0, r5, #188	; 0xbc
   18a3c:	mov	r1, r6
   18a40:	bl	18fac <flatcc_emitter_copy_buffer@@Base>
   18a44:	cmp	r0, #0
   18a48:	bne	18a10 <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   18a4c:	bl	1215c <__assert_fail@plt+0x160>
   18a50:	mov	r0, r6
   18a54:	b	189fc <flatcc_builder_finalize_aligned_buffer@@Base+0x64>

00018a58 <flatcc_builder_aligned_alloc@@Base>:
   18a58:	push	{r4, lr}
   18a5c:	sub	sp, sp, #8
   18a60:	add	r3, sp, #8
   18a64:	cmp	r0, #4
   18a68:	mov	r4, #0
   18a6c:	mov	r2, r1
   18a70:	str	r4, [r3, #-4]!
   18a74:	movcs	r1, r0
   18a78:	movcc	r1, #4
   18a7c:	mov	r0, r3
   18a80:	bl	11fcc <posix_memalign@plt>
   18a84:	cmp	r0, r4
   18a88:	ldr	r0, [sp, #4]
   18a8c:	beq	18aa0 <flatcc_builder_aligned_alloc@@Base+0x48>
   18a90:	cmp	r0, #0
   18a94:	beq	18aa0 <flatcc_builder_aligned_alloc@@Base+0x48>
   18a98:	bl	11f60 <free@plt>
   18a9c:	mov	r0, r4
   18aa0:	add	sp, sp, #8
   18aa4:	pop	{r4, pc}

00018aa8 <flatcc_builder_aligned_free@@Base>:
   18aa8:	b	11f60 <free@plt>

00018aac <flatcc_builder_get_emit_context@@Base>:
   18aac:	ldr	r0, [r0, #36]	; 0x24
   18ab0:	bx	lr

00018ab4 <flatcc_emitter_recycle_page@@Base>:
   18ab4:	ldr	r3, [r0]
   18ab8:	cmp	r3, r1
   18abc:	beq	18b04 <flatcc_emitter_recycle_page@@Base+0x50>
   18ac0:	ldr	r2, [r0, #4]
   18ac4:	cmp	r1, r2
   18ac8:	beq	18b04 <flatcc_emitter_recycle_page@@Base+0x50>
   18acc:	ldr	ip, [r1, #2944]	; 0xb80
   18ad0:	ldr	r2, [r1, #2948]	; 0xb84
   18ad4:	push	{lr}		; (str lr, [sp, #-4]!)
   18ad8:	mov	r0, #0
   18adc:	str	r2, [ip, #2948]	; 0xb84
   18ae0:	ldr	r2, [r3, #2948]	; 0xb84
   18ae4:	ldr	lr, [r1, #2948]	; 0xb84
   18ae8:	str	ip, [lr, #2944]	; 0xb80
   18aec:	str	r3, [r1, #2944]	; 0xb80
   18af0:	str	r2, [r1, #2948]	; 0xb84
   18af4:	str	r1, [r2, #2944]	; 0xb80
   18af8:	ldr	r3, [r1, #2944]	; 0xb80
   18afc:	str	r1, [r3, #2948]	; 0xb84
   18b00:	pop	{pc}		; (ldr pc, [sp], #4)
   18b04:	mvn	r0, #0
   18b08:	bx	lr

00018b0c <flatcc_emitter_reset@@Base>:
   18b0c:	ldr	r2, [r0]
   18b10:	cmp	r2, #0
   18b14:	bxeq	lr
   18b18:	ldr	r3, [r0, #32]
   18b1c:	mov	r1, #1472	; 0x5c0
   18b20:	push	{r4, lr}
   18b24:	cmp	r3, #0
   18b28:	str	r1, [r0, #12]
   18b2c:	str	r1, [r0, #20]
   18b30:	ldr	r1, [r0, #24]
   18b34:	add	ip, r2, #1472	; 0x5c0
   18b38:	moveq	r3, r1
   18b3c:	stmib	r0, {r2, ip}
   18b40:	str	ip, [r0, #16]
   18b44:	add	ip, r3, r3, lsl #1
   18b48:	lsr	r3, r1, #2
   18b4c:	add	r3, r3, ip, lsr #2
   18b50:	ldr	ip, [r0, #28]
   18b54:	ldr	lr, [pc, #104]	; 18bc4 <flatcc_emitter_reset@@Base+0xb8>
   18b58:	cmp	ip, r3, lsl #1
   18b5c:	mov	r1, #0
   18b60:	str	lr, [r2, #2952]	; 0xb88
   18b64:	str	r3, [r0, #32]
   18b68:	str	r1, [r0, #24]
   18b6c:	popls	{r4, pc}
   18b70:	ldr	r3, [r2, #2944]	; 0xb80
   18b74:	mov	r4, r0
   18b78:	cmp	r2, r3
   18b7c:	popeq	{r4, pc}
   18b80:	ldr	r1, [r3, #2944]	; 0xb80
   18b84:	mov	r0, r3
   18b88:	str	r1, [r2, #2944]	; 0xb80
   18b8c:	ldr	r3, [r3, #2944]	; 0xb80
   18b90:	str	r2, [r3, #2948]	; 0xb84
   18b94:	bl	11f60 <free@plt>
   18b98:	ldr	r3, [r4, #28]
   18b9c:	ldr	r2, [r4, #32]
   18ba0:	sub	r3, r3, #2944	; 0xb80
   18ba4:	str	r3, [r4, #28]
   18ba8:	cmp	r3, r2, lsl #1
   18bac:	popls	{r4, pc}
   18bb0:	ldm	r4, {r1, r2}
   18bb4:	ldr	r3, [r2, #2944]	; 0xb80
   18bb8:	cmp	r3, r1
   18bbc:	bne	18b80 <flatcc_emitter_reset@@Base+0x74>
   18bc0:	pop	{r4, pc}
   18bc4:			; <UNDEFINED> instruction: 0xfffffa40

00018bc8 <flatcc_emitter_clear@@Base>:
   18bc8:	ldr	r3, [r0]
   18bcc:	cmp	r3, #0
   18bd0:	bxeq	lr
   18bd4:	ldr	r2, [r3, #2948]	; 0xb84
   18bd8:	mov	r1, #0
   18bdc:	push	{r4, r5, r6, lr}
   18be0:	mov	r5, r0
   18be4:	str	r1, [r2, #2944]	; 0xb80
   18be8:	ldr	r4, [r3, #2944]	; 0xb80
   18bec:	cmp	r4, r1
   18bf0:	bne	18bfc <flatcc_emitter_clear@@Base+0x34>
   18bf4:	b	18c2c <flatcc_emitter_clear@@Base+0x64>
   18bf8:	mov	r4, r3
   18bfc:	ldr	r0, [r4, #2948]	; 0xb84
   18c00:	bl	11f60 <free@plt>
   18c04:	ldr	r3, [r4, #2944]	; 0xb80
   18c08:	cmp	r3, #0
   18c0c:	bne	18bf8 <flatcc_emitter_clear@@Base+0x30>
   18c10:	mov	r0, r4
   18c14:	bl	11f60 <free@plt>
   18c18:	mov	r0, r5
   18c1c:	mov	r2, #36	; 0x24
   18c20:	mov	r1, #0
   18c24:	pop	{r4, r5, r6, lr}
   18c28:	b	11fd8 <memset@plt>
   18c2c:	mov	r4, r3
   18c30:	b	18c10 <flatcc_emitter_clear@@Base+0x48>

00018c34 <flatcc_emitter@@Base>:
   18c34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c38:	sub	sp, sp, #12
   18c3c:	mov	r5, r0
   18c40:	ldr	ip, [sp, #48]	; 0x30
   18c44:	ldr	r0, [r0, #24]
   18c48:	cmp	r3, #0
   18c4c:	add	r0, r0, ip
   18c50:	str	r0, [r5, #24]
   18c54:	blt	18e1c <flatcc_emitter@@Base+0x1e8>
   18c58:	ldr	r0, [r5, #20]
   18c5c:	cmp	ip, r0
   18c60:	bls	18cf0 <flatcc_emitter@@Base+0xbc>
   18c64:	cmp	r2, #0
   18c68:	addne	r7, r1, #8
   18c6c:	movne	r8, r2
   18c70:	movne	r9, #2944	; 0xb80
   18c74:	beq	18ce4 <flatcc_emitter@@Base+0xb0>
   18c78:	ldr	r6, [r7, #-4]
   18c7c:	ldr	sl, [r7, #-8]
   18c80:	cmp	r6, #0
   18c84:	movne	r4, r0
   18c88:	beq	18cd8 <flatcc_emitter@@Base+0xa4>
   18c8c:	cmp	r6, r4
   18c90:	bls	18d38 <flatcc_emitter@@Base+0x104>
   18c94:	cmp	r4, #0
   18c98:	beq	18d44 <flatcc_emitter@@Base+0x110>
   18c9c:	sub	r6, r6, r4
   18ca0:	mov	r2, r4
   18ca4:	mov	r1, sl
   18ca8:	ldr	r0, [r5, #16]
   18cac:	bl	11f6c <memcpy@plt>
   18cb0:	ldr	r0, [r5, #20]
   18cb4:	ldr	r3, [r5, #16]
   18cb8:	add	sl, sl, r4
   18cbc:	add	r3, r3, r4
   18cc0:	cmp	r6, #0
   18cc4:	sub	r4, r0, r4
   18cc8:	str	r3, [r5, #16]
   18ccc:	str	r4, [r5, #20]
   18cd0:	mov	r0, r4
   18cd4:	bne	18c8c <flatcc_emitter@@Base+0x58>
   18cd8:	subs	r8, r8, #1
   18cdc:	add	r7, r7, #8
   18ce0:	bne	18c78 <flatcc_emitter@@Base+0x44>
   18ce4:	mov	r0, #0
   18ce8:	add	sp, sp, #12
   18cec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cf0:	ldr	r3, [r5, #16]
   18cf4:	sub	r0, r0, ip
   18cf8:	add	ip, r3, ip
   18cfc:	str	r0, [r5, #20]
   18d00:	str	ip, [r5, #16]
   18d04:	cmp	r2, #0
   18d08:	addne	r4, r1, #8
   18d0c:	movne	r7, r2
   18d10:	beq	18ce4 <flatcc_emitter@@Base+0xb0>
   18d14:	ldmdb	r4, {r1, r2}
   18d18:	mov	r0, r3
   18d1c:	bl	11f6c <memcpy@plt>
   18d20:	ldr	r2, [r4, #-4]
   18d24:	subs	r7, r7, #1
   18d28:	add	r4, r4, #8
   18d2c:	add	r3, r0, r2
   18d30:	bne	18d14 <flatcc_emitter@@Base+0xe0>
   18d34:	b	18ce4 <flatcc_emitter@@Base+0xb0>
   18d38:	mov	r4, r6
   18d3c:	mov	r6, #0
   18d40:	b	18ca0 <flatcc_emitter@@Base+0x6c>
   18d44:	ldr	r4, [r5, #4]
   18d48:	cmp	r4, #0
   18d4c:	beq	18dbc <flatcc_emitter@@Base+0x188>
   18d50:	ldr	fp, [r4, #2944]	; 0xb80
   18d54:	ldr	r3, [r5]
   18d58:	cmp	fp, r3
   18d5c:	beq	18d84 <flatcc_emitter@@Base+0x150>
   18d60:	str	fp, [r5, #4]
   18d64:	ldr	r3, [fp, #2948]	; 0xb84
   18d68:	mov	r4, #2944	; 0xb80
   18d6c:	str	fp, [r5, #16]
   18d70:	ldr	r3, [r3, #2952]	; 0xb88
   18d74:	str	r9, [r5, #20]
   18d78:	add	r3, r3, r4
   18d7c:	str	r3, [fp, #2952]	; 0xb88
   18d80:	b	18c8c <flatcc_emitter@@Base+0x58>
   18d84:	ldr	r0, [pc, #540]	; 18fa8 <flatcc_emitter@@Base+0x374>
   18d88:	bl	11f9c <malloc@plt>
   18d8c:	cmp	r0, #0
   18d90:	beq	18dcc <flatcc_emitter@@Base+0x198>
   18d94:	ldr	r3, [r5, #28]
   18d98:	str	fp, [r0, #2944]	; 0xb80
   18d9c:	add	r3, r3, #2944	; 0xb80
   18da0:	str	r4, [r0, #2948]	; 0xb84
   18da4:	str	r3, [r5, #28]
   18da8:	str	r0, [fp, #2948]	; 0xb84
   18dac:	str	r0, [r4, #2944]	; 0xb80
   18db0:	mov	fp, r0
   18db4:	str	r0, [r5, #4]
   18db8:	b	18d64 <flatcc_emitter@@Base+0x130>
   18dbc:	ldr	r0, [pc, #484]	; 18fa8 <flatcc_emitter@@Base+0x374>
   18dc0:	bl	11f9c <malloc@plt>
   18dc4:	cmp	r0, #0
   18dc8:	bne	18dd8 <flatcc_emitter@@Base+0x1a4>
   18dcc:	mvn	r0, #0
   18dd0:	add	sp, sp, #12
   18dd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18dd8:	mov	r2, #1472	; 0x5c0
   18ddc:	ldr	r3, [r5, #28]
   18de0:	str	r2, [r5, #12]
   18de4:	str	r2, [r5, #20]
   18de8:	sub	r2, r2, #2944	; 0xb80
   18dec:	str	r2, [r0, #2952]	; 0xb88
   18df0:	str	r0, [r5]
   18df4:	add	r3, r3, #2944	; 0xb80
   18df8:	str	r0, [r5, #4]
   18dfc:	str	r0, [r0, #2944]	; 0xb80
   18e00:	str	r0, [r0, #2948]	; 0xb84
   18e04:	add	r0, r0, #1472	; 0x5c0
   18e08:	str	r0, [r5, #8]
   18e0c:	str	r0, [r5, #16]
   18e10:	str	r3, [r5, #28]
   18e14:	mov	r4, #1472	; 0x5c0
   18e18:	b	18c8c <flatcc_emitter@@Base+0x58>
   18e1c:	ldr	r0, [r5, #12]
   18e20:	cmp	ip, r0
   18e24:	bls	18ea4 <flatcc_emitter@@Base+0x270>
   18e28:	add	r6, r1, r2, lsl #3
   18e2c:	mov	r7, r2
   18e30:	mov	r9, #2944	; 0xb80
   18e34:	mov	r8, #0
   18e38:	cmp	r7, #0
   18e3c:	beq	18ce4 <flatcc_emitter@@Base+0xb0>
   18e40:	ldr	r4, [r6, #-4]
   18e44:	ldr	sl, [r6, #-8]
   18e48:	cmp	r4, #0
   18e4c:	add	sl, sl, r4
   18e50:	beq	18e98 <flatcc_emitter@@Base+0x264>
   18e54:	ldr	r2, [r5, #12]
   18e58:	cmp	r2, r4
   18e5c:	bcs	18ebc <flatcc_emitter@@Base+0x288>
   18e60:	cmp	r2, #0
   18e64:	beq	18ecc <flatcc_emitter@@Base+0x298>
   18e68:	sub	r4, r4, r2
   18e6c:	mov	r1, r8
   18e70:	ldr	r0, [r5, #8]
   18e74:	rsb	r3, r2, #0
   18e78:	add	r0, r0, r3
   18e7c:	add	sl, sl, r3
   18e80:	str	r1, [r5, #12]
   18e84:	str	r0, [r5, #8]
   18e88:	mov	r1, sl
   18e8c:	bl	11f6c <memcpy@plt>
   18e90:	cmp	r4, #0
   18e94:	bne	18e54 <flatcc_emitter@@Base+0x220>
   18e98:	sub	r6, r6, #8
   18e9c:	sub	r7, r7, #1
   18ea0:	b	18e38 <flatcc_emitter@@Base+0x204>
   18ea4:	ldr	r3, [r5, #8]
   18ea8:	sub	r0, r0, ip
   18eac:	sub	r3, r3, ip
   18eb0:	str	r0, [r5, #12]
   18eb4:	str	r3, [r5, #8]
   18eb8:	b	18d04 <flatcc_emitter@@Base+0xd0>
   18ebc:	sub	r1, r2, r4
   18ec0:	mov	r2, r4
   18ec4:	mov	r4, #0
   18ec8:	b	18e70 <flatcc_emitter@@Base+0x23c>
   18ecc:	ldr	r3, [r5]
   18ed0:	cmp	r3, #0
   18ed4:	beq	18f58 <flatcc_emitter@@Base+0x324>
   18ed8:	ldr	fp, [r3, #2948]	; 0xb84
   18edc:	ldr	r2, [r5, #4]
   18ee0:	cmp	fp, r2
   18ee4:	beq	18f18 <flatcc_emitter@@Base+0x2e4>
   18ee8:	ldr	r3, [r3, #2952]	; 0xb88
   18eec:	sub	r3, r3, #2944	; 0xb80
   18ef0:	str	r3, [fp, #2952]	; 0xb88
   18ef4:	str	fp, [r5]
   18ef8:	ldr	r3, [fp, #2944]	; 0xb80
   18efc:	add	r2, fp, #2944	; 0xb80
   18f00:	str	r9, [r5, #12]
   18f04:	ldr	r3, [r3, #2952]	; 0xb88
   18f08:	str	r2, [r5, #8]
   18f0c:	sub	r3, r3, #2944	; 0xb80
   18f10:	str	r3, [fp, #2952]	; 0xb88
   18f14:	b	18e54 <flatcc_emitter@@Base+0x220>
   18f18:	ldr	r0, [pc, #136]	; 18fa8 <flatcc_emitter@@Base+0x374>
   18f1c:	str	r3, [sp, #4]
   18f20:	bl	11f9c <malloc@plt>
   18f24:	ldr	r3, [sp, #4]
   18f28:	cmp	r0, #0
   18f2c:	beq	18dcc <flatcc_emitter@@Base+0x198>
   18f30:	ldr	r2, [r5, #28]
   18f34:	str	fp, [r0, #2948]	; 0xb84
   18f38:	add	r2, r2, #2944	; 0xb80
   18f3c:	str	r3, [r0, #2944]	; 0xb80
   18f40:	str	r2, [r5, #28]
   18f44:	str	r0, [r3, #2948]	; 0xb84
   18f48:	str	r0, [fp, #2944]	; 0xb80
   18f4c:	str	r0, [r5]
   18f50:	mov	fp, r0
   18f54:	b	18ef8 <flatcc_emitter@@Base+0x2c4>
   18f58:	ldr	r0, [pc, #72]	; 18fa8 <flatcc_emitter@@Base+0x374>
   18f5c:	bl	11f9c <malloc@plt>
   18f60:	cmp	r0, #0
   18f64:	beq	18dcc <flatcc_emitter@@Base+0x198>
   18f68:	mov	r2, #1472	; 0x5c0
   18f6c:	ldr	r3, [r5, #28]
   18f70:	str	r2, [r5, #12]
   18f74:	str	r2, [r5, #20]
   18f78:	sub	r2, r2, #2944	; 0xb80
   18f7c:	str	r2, [r0, #2952]	; 0xb88
   18f80:	str	r0, [r5]
   18f84:	add	r3, r3, #2944	; 0xb80
   18f88:	str	r0, [r5, #4]
   18f8c:	str	r0, [r0, #2944]	; 0xb80
   18f90:	str	r0, [r0, #2948]	; 0xb84
   18f94:	add	r0, r0, #1472	; 0x5c0
   18f98:	str	r0, [r5, #8]
   18f9c:	str	r0, [r5, #16]
   18fa0:	str	r3, [r5, #28]
   18fa4:	b	18e54 <flatcc_emitter@@Base+0x220>
   18fa8:	andeq	r0, r0, ip, lsl #23

00018fac <flatcc_emitter_copy_buffer@@Base>:
   18fac:	ldr	ip, [r0, #24]
   18fb0:	cmp	ip, r2
   18fb4:	bhi	19050 <flatcc_emitter_copy_buffer@@Base+0xa4>
   18fb8:	ldr	r2, [r0]
   18fbc:	cmp	r2, #0
   18fc0:	beq	19050 <flatcc_emitter_copy_buffer@@Base+0xa4>
   18fc4:	mov	r3, r1
   18fc8:	ldr	r1, [r0, #4]
   18fcc:	push	{r4, r5, r6, lr}
   18fd0:	cmp	r2, r1
   18fd4:	mov	r5, r0
   18fd8:	beq	1905c <flatcc_emitter_copy_buffer@@Base+0xb0>
   18fdc:	ldr	r4, [r0, #12]
   18fe0:	ldr	r1, [r5, #8]
   18fe4:	rsb	r4, r4, #2944	; 0xb80
   18fe8:	mov	r2, r4
   18fec:	mov	r0, r3
   18ff0:	bl	11f6c <memcpy@plt>
   18ff4:	ldr	r2, [r5]
   18ff8:	ldr	r1, [r5, #4]
   18ffc:	add	r3, r0, r4
   19000:	ldr	r4, [r2, #2944]	; 0xb80
   19004:	cmp	r4, r1
   19008:	beq	19034 <flatcc_emitter_copy_buffer@@Base+0x88>
   1900c:	mov	r6, #2944	; 0xb80
   19010:	mov	r1, r4
   19014:	mov	r0, r3
   19018:	mov	r2, r6
   1901c:	bl	11f6c <memcpy@plt>
   19020:	ldr	r4, [r4, #2944]	; 0xb80
   19024:	ldr	r1, [r5, #4]
   19028:	cmp	r1, r4
   1902c:	add	r3, r0, #2944	; 0xb80
   19030:	bne	19010 <flatcc_emitter_copy_buffer@@Base+0x64>
   19034:	ldr	r2, [r5, #20]
   19038:	mov	r0, r3
   1903c:	rsb	r2, r2, #2944	; 0xb80
   19040:	bl	11f6c <memcpy@plt>
   19044:	mov	r3, r0
   19048:	mov	r0, r3
   1904c:	pop	{r4, r5, r6, pc}
   19050:	mov	r3, #0
   19054:	mov	r0, r3
   19058:	bx	lr
   1905c:	ldr	r1, [r0, #8]
   19060:	mov	r2, ip
   19064:	mov	r0, r3
   19068:	bl	11f6c <memcpy@plt>
   1906c:	mov	r3, r0
   19070:	b	19048 <flatcc_emitter_copy_buffer@@Base+0x9c>

00019074 <__libc_csu_init@@Base>:
   19074:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19078:	mov	r7, r0
   1907c:	ldr	r6, [pc, #72]	; 190cc <__libc_csu_init@@Base+0x58>
   19080:	ldr	r5, [pc, #72]	; 190d0 <__libc_csu_init@@Base+0x5c>
   19084:	add	r6, pc, r6
   19088:	add	r5, pc, r5
   1908c:	sub	r6, r6, r5
   19090:	mov	r8, r1
   19094:	mov	r9, r2
   19098:	bl	11f34 <strcmp@plt-0x20>
   1909c:	asrs	r6, r6, #2
   190a0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   190a4:	mov	r4, #0
   190a8:	add	r4, r4, #1
   190ac:	ldr	r3, [r5], #4
   190b0:	mov	r2, r9
   190b4:	mov	r1, r8
   190b8:	mov	r0, r7
   190bc:	blx	r3
   190c0:	cmp	r6, r4
   190c4:	bne	190a8 <__libc_csu_init@@Base+0x34>
   190c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   190cc:	andeq	r1, r1, r4, lsl #29
   190d0:	andeq	r1, r1, ip, ror lr

000190d4 <__libc_csu_fini@@Base>:
   190d4:	bx	lr

Disassembly of section .fini:

000190d8 <.fini>:
   190d8:	push	{r3, lr}
   190dc:	pop	{r3, pc}
