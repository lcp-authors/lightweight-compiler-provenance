
../repos/coreutils/src/uniq:     file format elf32-littlearm


Disassembly of section .init:

00010d2c <.init>:
   10d2c:	push	{r3, lr}
   10d30:	bl	11b84 <__assert_fail@plt+0xb98>
   10d34:	pop	{r3, pc}

Disassembly of section .plt:

00010d38 <calloc@plt-0x14>:
   10d38:	push	{lr}		; (str lr, [sp, #-4]!)
   10d3c:	ldr	lr, [pc, #4]	; 10d48 <calloc@plt-0x4>
   10d40:	add	lr, pc, lr
   10d44:	ldr	pc, [lr, #8]!
   10d48:			; <UNDEFINED> instruction: 0x000172b8

00010d4c <calloc@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #94208	; 0x17000
   10d54:	ldr	pc, [ip, #696]!	; 0x2b8

00010d58 <fputs_unlocked@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #94208	; 0x17000
   10d60:	ldr	pc, [ip, #688]!	; 0x2b0

00010d64 <raise@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #94208	; 0x17000
   10d6c:	ldr	pc, [ip, #680]!	; 0x2a8

00010d70 <strcmp@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #94208	; 0x17000
   10d78:	ldr	pc, [ip, #672]!	; 0x2a0

00010d7c <strtol@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #94208	; 0x17000
   10d84:	ldr	pc, [ip, #664]!	; 0x298

00010d88 <posix_fadvise64@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #94208	; 0x17000
   10d90:	ldr	pc, [ip, #656]!	; 0x290

00010d94 <fflush@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #94208	; 0x17000
   10d9c:	ldr	pc, [ip, #648]!	; 0x288

00010da0 <free@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #94208	; 0x17000
   10da8:	ldr	pc, [ip, #640]!	; 0x280

00010dac <_exit@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #94208	; 0x17000
   10db4:	ldr	pc, [ip, #632]!	; 0x278

00010db8 <memcpy@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #94208	; 0x17000
   10dc0:	ldr	pc, [ip, #624]!	; 0x270

00010dc4 <__strtoull_internal@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #94208	; 0x17000
   10dcc:	ldr	pc, [ip, #616]!	; 0x268

00010dd0 <mbsinit@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #94208	; 0x17000
   10dd8:	ldr	pc, [ip, #608]!	; 0x260

00010ddc <fwrite_unlocked@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #94208	; 0x17000
   10de4:	ldr	pc, [ip, #600]!	; 0x258

00010de8 <memcmp@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #94208	; 0x17000
   10df0:	ldr	pc, [ip, #592]!	; 0x250

00010df4 <fputc_unlocked@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #94208	; 0x17000
   10dfc:	ldr	pc, [ip, #584]!	; 0x248

00010e00 <dcgettext@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #94208	; 0x17000
   10e08:	ldr	pc, [ip, #576]!	; 0x240

00010e0c <dup2@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #94208	; 0x17000
   10e14:	ldr	pc, [ip, #568]!	; 0x238

00010e18 <realloc@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #94208	; 0x17000
   10e20:	ldr	pc, [ip, #560]!	; 0x230

00010e24 <textdomain@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #94208	; 0x17000
   10e2c:	ldr	pc, [ip, #552]!	; 0x228

00010e30 <iswprint@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #94208	; 0x17000
   10e38:	ldr	pc, [ip, #544]!	; 0x220

00010e3c <fwrite@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #94208	; 0x17000
   10e44:	ldr	pc, [ip, #536]!	; 0x218

00010e48 <lseek64@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #94208	; 0x17000
   10e50:	ldr	pc, [ip, #528]!	; 0x210

00010e54 <__ctype_get_mb_cur_max@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #94208	; 0x17000
   10e5c:	ldr	pc, [ip, #520]!	; 0x208

00010e60 <__fpending@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #94208	; 0x17000
   10e68:	ldr	pc, [ip, #512]!	; 0x200

00010e6c <mbrtowc@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #94208	; 0x17000
   10e74:	ldr	pc, [ip, #504]!	; 0x1f8

00010e78 <error@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #94208	; 0x17000
   10e80:	ldr	pc, [ip, #496]!	; 0x1f0

00010e84 <open64@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #94208	; 0x17000
   10e8c:	ldr	pc, [ip, #488]!	; 0x1e8

00010e90 <getenv@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #94208	; 0x17000
   10e98:	ldr	pc, [ip, #480]!	; 0x1e0

00010e9c <malloc@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #94208	; 0x17000
   10ea4:	ldr	pc, [ip, #472]!	; 0x1d8

00010ea8 <__libc_start_main@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #94208	; 0x17000
   10eb0:	ldr	pc, [ip, #464]!	; 0x1d0

00010eb4 <__freading@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #94208	; 0x17000
   10ebc:	ldr	pc, [ip, #456]!	; 0x1c8

00010ec0 <__ctype_toupper_loc@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #94208	; 0x17000
   10ec8:	ldr	pc, [ip, #448]!	; 0x1c0

00010ecc <__gmon_start__@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #94208	; 0x17000
   10ed4:	ldr	pc, [ip, #440]!	; 0x1b8

00010ed8 <freopen64@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #94208	; 0x17000
   10ee0:	ldr	pc, [ip, #432]!	; 0x1b0

00010ee4 <getopt_long@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #94208	; 0x17000
   10eec:	ldr	pc, [ip, #424]!	; 0x1a8

00010ef0 <__ctype_b_loc@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #94208	; 0x17000
   10ef8:	ldr	pc, [ip, #416]!	; 0x1a0

00010efc <exit@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #94208	; 0x17000
   10f04:	ldr	pc, [ip, #408]!	; 0x198

00010f08 <strlen@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #94208	; 0x17000
   10f10:	ldr	pc, [ip, #400]!	; 0x190

00010f14 <strchr@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #94208	; 0x17000
   10f1c:	ldr	pc, [ip, #392]!	; 0x188

00010f20 <__errno_location@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #94208	; 0x17000
   10f28:	ldr	pc, [ip, #384]!	; 0x180

00010f2c <__cxa_atexit@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #94208	; 0x17000
   10f34:	ldr	pc, [ip, #376]!	; 0x178

00010f38 <memset@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #94208	; 0x17000
   10f40:	ldr	pc, [ip, #368]!	; 0x170

00010f44 <__printf_chk@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #94208	; 0x17000
   10f4c:	ldr	pc, [ip, #360]!	; 0x168

00010f50 <fileno@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #94208	; 0x17000
   10f58:	ldr	pc, [ip, #352]!	; 0x160

00010f5c <__fprintf_chk@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #94208	; 0x17000
   10f64:	ldr	pc, [ip, #344]!	; 0x158

00010f68 <fclose@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #94208	; 0x17000
   10f70:	ldr	pc, [ip, #336]!	; 0x150

00010f74 <fseeko64@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #94208	; 0x17000
   10f7c:	ldr	pc, [ip, #328]!	; 0x148

00010f80 <__uflow@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #94208	; 0x17000
   10f88:	ldr	pc, [ip, #320]!	; 0x140

00010f8c <__overflow@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #94208	; 0x17000
   10f94:	ldr	pc, [ip, #312]!	; 0x138

00010f98 <setlocale@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #94208	; 0x17000
   10fa0:	ldr	pc, [ip, #304]!	; 0x130

00010fa4 <strrchr@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #94208	; 0x17000
   10fac:	ldr	pc, [ip, #296]!	; 0x128

00010fb0 <nl_langinfo@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #94208	; 0x17000
   10fb8:	ldr	pc, [ip, #288]!	; 0x120

00010fbc <bindtextdomain@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #94208	; 0x17000
   10fc4:	ldr	pc, [ip, #280]!	; 0x118

00010fc8 <strncmp@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #94208	; 0x17000
   10fd0:	ldr	pc, [ip, #272]!	; 0x110

00010fd4 <abort@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #94208	; 0x17000
   10fdc:	ldr	pc, [ip, #264]!	; 0x108

00010fe0 <close@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #94208	; 0x17000
   10fe8:	ldr	pc, [ip, #256]!	; 0x100

00010fec <__assert_fail@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #94208	; 0x17000
   10ff4:	ldr	pc, [ip, #248]!	; 0xf8

Disassembly of section .text:

00010ff8 <.text>:
   10ff8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ffc:	mov	r8, r0
   11000:	sub	sp, sp, #84	; 0x54
   11004:	ldr	r0, [pc, #2732]	; 11ab8 <__assert_fail@plt+0xacc>
   11008:	mov	r7, r1
   1100c:	bl	10e90 <getenv@plt>
   11010:	ldr	r3, [pc, #2724]	; 11abc <__assert_fail@plt+0xad0>
   11014:	str	r3, [sp, #48]	; 0x30
   11018:	str	r3, [sp, #44]	; 0x2c
   1101c:	mov	r3, #10
   11020:	str	r3, [sp, #20]
   11024:	adds	sl, r0, #0
   11028:	ldr	r0, [r7]
   1102c:	movne	sl, #1
   11030:	bl	12d20 <__assert_fail@plt+0x1d34>
   11034:	ldr	r1, [pc, #2692]	; 11ac0 <__assert_fail@plt+0xad4>
   11038:	mov	r0, #6
   1103c:	bl	10f98 <setlocale@plt>
   11040:	ldr	r1, [pc, #2684]	; 11ac4 <__assert_fail@plt+0xad8>
   11044:	ldr	r0, [pc, #2684]	; 11ac8 <__assert_fail@plt+0xadc>
   11048:	bl	10fbc <bindtextdomain@plt>
   1104c:	ldr	r0, [pc, #2676]	; 11ac8 <__assert_fail@plt+0xadc>
   11050:	bl	10e24 <textdomain@plt>
   11054:	ldr	r0, [pc, #2672]	; 11acc <__assert_fail@plt+0xae0>
   11058:	bl	16618 <__assert_fail@plt+0x562c>
   1105c:	ldr	r2, [pc, #2668]	; 11ad0 <__assert_fail@plt+0xae4>
   11060:	mov	r3, #0
   11064:	str	r3, [sp, #24]
   11068:	mov	r4, r3
   1106c:	str	r3, [sp, #28]
   11070:	mov	r5, r3
   11074:	str	r3, [r2, #16]
   11078:	str	r3, [r2, #12]
   1107c:	strb	r3, [r2, #22]
   11080:	str	r3, [r2, #24]
   11084:	mvn	r3, #0
   11088:	str	r3, [r2]
   1108c:	mov	r3, #1
   11090:	strb	r3, [r2, #20]
   11094:	strb	r3, [r2, #21]
   11098:	str	r3, [r2, #8]
   1109c:	b	110d8 <__assert_fail@plt+0xec>
   110a0:	mov	r5, r0
   110a4:	ldr	r6, [pc, #2600]	; 11ad4 <__assert_fail@plt+0xae8>
   110a8:	ldr	r3, [r6]
   110ac:	cmp	r8, r3
   110b0:	ble	11290 <__assert_fail@plt+0x2a4>
   110b4:	cmp	r4, #2
   110b8:	beq	11a30 <__assert_fail@plt+0xa44>
   110bc:	add	r2, sp, #80	; 0x50
   110c0:	ldr	r1, [r7, r3, lsl #2]
   110c4:	add	r2, r2, r4, lsl #2
   110c8:	add	r4, r4, #1
   110cc:	add	r3, r3, #1
   110d0:	str	r1, [r2, #-36]	; 0xffffffdc
   110d4:	str	r3, [r6]
   110d8:	cmn	r5, #1
   110dc:	beq	110a4 <__assert_fail@plt+0xb8>
   110e0:	ldr	r9, [pc, #2544]	; 11ad8 <__assert_fail@plt+0xaec>
   110e4:	mov	fp, #0
   110e8:	mov	r0, r5
   110ec:	cmp	r4, #0
   110f0:	moveq	r6, #0
   110f4:	andne	r6, sl, #1
   110f8:	cmp	r6, #0
   110fc:	bne	110a0 <__assert_fail@plt+0xb4>
   11100:	str	r6, [sp]
   11104:	ldr	r3, [pc, #2512]	; 11adc <__assert_fail@plt+0xaf0>
   11108:	mov	r2, r9
   1110c:	mov	r1, r7
   11110:	mov	r0, r8
   11114:	bl	10ee4 <getopt_long@plt>
   11118:	cmn	r0, #1
   1111c:	beq	110a0 <__assert_fail@plt+0xb4>
   11120:	cmp	r0, #100	; 0x64
   11124:	beq	114b4 <__assert_fail@plt+0x4c8>
   11128:	ble	1115c <__assert_fail@plt+0x170>
   1112c:	cmp	r0, #117	; 0x75
   11130:	beq	114e8 <__assert_fail@plt+0x4fc>
   11134:	bgt	111c0 <__assert_fail@plt+0x1d4>
   11138:	cmp	r0, #105	; 0x69
   1113c:	mov	r5, r0
   11140:	beq	11230 <__assert_fail@plt+0x244>
   11144:	cmp	r0, #115	; 0x73
   11148:	beq	114cc <__assert_fail@plt+0x4e0>
   1114c:	cmp	r0, #102	; 0x66
   11150:	beq	11248 <__assert_fail@plt+0x25c>
   11154:	mov	r0, #1
   11158:	bl	11eb8 <__assert_fail@plt+0xecc>
   1115c:	cmp	r0, #57	; 0x39
   11160:	mov	r5, r0
   11164:	bgt	1126c <__assert_fail@plt+0x280>
   11168:	cmp	r0, #48	; 0x30
   1116c:	bge	11500 <__assert_fail@plt+0x514>
   11170:	cmn	r0, #2
   11174:	beq	115a4 <__assert_fail@plt+0x5b8>
   11178:	cmp	r0, #1
   1117c:	beq	111f8 <__assert_fail@plt+0x20c>
   11180:	cmn	r0, #3
   11184:	bne	11154 <__assert_fail@plt+0x168>
   11188:	ldr	r3, [pc, #2384]	; 11ae0 <__assert_fail@plt+0xaf4>
   1118c:	ldr	r0, [pc, #2384]	; 11ae4 <__assert_fail@plt+0xaf8>
   11190:	ldr	r1, [pc, #2384]	; 11ae8 <__assert_fail@plt+0xafc>
   11194:	ldr	r2, [pc, #2384]	; 11aec <__assert_fail@plt+0xb00>
   11198:	str	r6, [sp, #8]
   1119c:	ldr	r0, [r0]
   111a0:	ldr	r3, [r3]
   111a4:	str	r1, [sp, #4]
   111a8:	str	r2, [sp]
   111ac:	ldr	r1, [pc, #2364]	; 11af0 <__assert_fail@plt+0xb04>
   111b0:	ldr	r2, [pc, #2364]	; 11af4 <__assert_fail@plt+0xb08>
   111b4:	bl	1501c <__assert_fail@plt+0x4030>
   111b8:	mov	r0, r6
   111bc:	bl	10efc <exit@plt>
   111c0:	cmp	r0, #122	; 0x7a
   111c4:	beq	11240 <__assert_fail@plt+0x254>
   111c8:	cmp	r0, #256	; 0x100
   111cc:	mov	r5, r0
   111d0:	beq	115ac <__assert_fail@plt+0x5c0>
   111d4:	cmp	r0, #119	; 0x77
   111d8:	bne	11154 <__assert_fail@plt+0x168>
   111dc:	ldr	r3, [pc, #2324]	; 11af8 <__assert_fail@plt+0xb0c>
   111e0:	ldr	r1, [pc, #2324]	; 11afc <__assert_fail@plt+0xb10>
   111e4:	ldr	r0, [r3]
   111e8:	bl	11ce0 <__assert_fail@plt+0xcf4>
   111ec:	ldr	r3, [pc, #2268]	; 11ad0 <__assert_fail@plt+0xae4>
   111f0:	str	r0, [r3]
   111f4:	b	110e4 <__assert_fail@plt+0xf8>
   111f8:	ldr	r3, [pc, #2296]	; 11af8 <__assert_fail@plt+0xb0c>
   111fc:	ldr	r3, [r3]
   11200:	ldrb	r3, [r3]
   11204:	cmp	r3, #43	; 0x2b
   11208:	beq	11854 <__assert_fail@plt+0x868>
   1120c:	cmp	r4, #2
   11210:	beq	11a8c <__assert_fail@plt+0xaa0>
   11214:	ldr	r3, [pc, #2268]	; 11af8 <__assert_fail@plt+0xb0c>
   11218:	ldr	r2, [r3]
   1121c:	add	r3, sp, #80	; 0x50
   11220:	add	r3, r3, r4, lsl #2
   11224:	add	r4, r4, #1
   11228:	str	r2, [r3, #-36]	; 0xffffffdc
   1122c:	b	110e4 <__assert_fail@plt+0xf8>
   11230:	ldr	r2, [pc, #2200]	; 11ad0 <__assert_fail@plt+0xae4>
   11234:	mov	r3, #1
   11238:	strb	r3, [r2, #4]
   1123c:	b	110e4 <__assert_fail@plt+0xf8>
   11240:	str	fp, [sp, #20]
   11244:	b	110ec <__assert_fail@plt+0x100>
   11248:	ldr	r3, [pc, #2216]	; 11af8 <__assert_fail@plt+0xb0c>
   1124c:	ldr	r1, [pc, #2220]	; 11b00 <__assert_fail@plt+0xb14>
   11250:	ldr	r0, [r3]
   11254:	bl	11ce0 <__assert_fail@plt+0xcf4>
   11258:	mov	r3, #2
   1125c:	str	r3, [sp, #28]
   11260:	ldr	r3, [pc, #2152]	; 11ad0 <__assert_fail@plt+0xae4>
   11264:	str	r0, [r3, #12]
   11268:	b	110e4 <__assert_fail@plt+0xf8>
   1126c:	cmp	r0, #68	; 0x44
   11270:	beq	1153c <__assert_fail@plt+0x550>
   11274:	cmp	r0, #99	; 0x63
   11278:	bne	11154 <__assert_fail@plt+0x168>
   1127c:	ldr	r3, [pc, #2124]	; 11ad0 <__assert_fail@plt+0xae4>
   11280:	str	r6, [r3, #8]
   11284:	mov	r3, #1
   11288:	str	r3, [sp, #24]
   1128c:	b	110e4 <__assert_fail@plt+0xf8>
   11290:	ldr	r3, [pc, #2104]	; 11ad0 <__assert_fail@plt+0xae4>
   11294:	ldr	r3, [r3, #28]
   11298:	cmp	r3, #0
   1129c:	bne	11600 <__assert_fail@plt+0x614>
   112a0:	ldr	r3, [pc, #2088]	; 11ad0 <__assert_fail@plt+0xae4>
   112a4:	ldr	r4, [r3, #8]
   112a8:	cmp	r4, #0
   112ac:	bne	112c4 <__assert_fail@plt+0x2d8>
   112b0:	ldrb	r3, [r3, #22]
   112b4:	cmp	r3, #0
   112b8:	movne	r2, #5
   112bc:	ldrne	r1, [pc, #2112]	; 11b04 <__assert_fail@plt+0xb18>
   112c0:	bne	11a70 <__assert_fail@plt+0xa84>
   112c4:	ldr	r3, [sp, #44]	; 0x2c
   112c8:	ldr	r1, [pc, #2028]	; 11abc <__assert_fail@plt+0xad0>
   112cc:	mov	r0, r3
   112d0:	str	r3, [sp, #36]	; 0x24
   112d4:	bl	10d70 <strcmp@plt>
   112d8:	ldr	r4, [sp, #48]	; 0x30
   112dc:	cmp	r0, #0
   112e0:	bne	117bc <__assert_fail@plt+0x7d0>
   112e4:	ldr	r1, [pc, #2000]	; 11abc <__assert_fail@plt+0xad0>
   112e8:	mov	r0, r4
   112ec:	bl	10d70 <strcmp@plt>
   112f0:	cmp	r0, #0
   112f4:	beq	11314 <__assert_fail@plt+0x328>
   112f8:	ldr	r3, [pc, #2020]	; 11ae4 <__assert_fail@plt+0xaf8>
   112fc:	ldr	r1, [pc, #2052]	; 11b08 <__assert_fail@plt+0xb1c>
   11300:	mov	r0, r4
   11304:	ldr	r2, [r3]
   11308:	bl	12928 <__assert_fail@plt+0x193c>
   1130c:	subs	r5, r0, #0
   11310:	beq	11aac <__assert_fail@plt+0xac0>
   11314:	ldr	r3, [pc, #2032]	; 11b0c <__assert_fail@plt+0xb20>
   11318:	mov	r1, #2
   1131c:	ldr	r0, [r3]
   11320:	bl	1274c <__assert_fail@plt+0x1760>
   11324:	add	r0, sp, #52	; 0x34
   11328:	bl	12b3c <__assert_fail@plt+0x1b50>
   1132c:	add	r0, sp, #64	; 0x40
   11330:	bl	12b3c <__assert_fail@plt+0x1b50>
   11334:	ldr	r3, [pc, #1940]	; 11ad0 <__assert_fail@plt+0xae4>
   11338:	ldrb	r3, [r3, #21]
   1133c:	cmp	r3, #0
   11340:	beq	11360 <__assert_fail@plt+0x374>
   11344:	ldr	r3, [pc, #1924]	; 11ad0 <__assert_fail@plt+0xae4>
   11348:	ldrb	r9, [r3, #20]
   1134c:	cmp	r9, #0
   11350:	beq	11360 <__assert_fail@plt+0x374>
   11354:	ldr	r3, [r3, #8]
   11358:	cmp	r3, #1
   1135c:	beq	118b4 <__assert_fail@plt+0x8c8>
   11360:	ldr	r3, [pc, #1956]	; 11b0c <__assert_fail@plt+0xb20>
   11364:	ldr	r2, [sp, #20]
   11368:	add	r0, sp, #64	; 0x40
   1136c:	ldr	r1, [r3]
   11370:	bl	12b50 <__assert_fail@plt+0x1b64>
   11374:	cmp	r0, #0
   11378:	beq	11724 <__assert_fail@plt+0x738>
   1137c:	ldr	r9, [sp, #68]	; 0x44
   11380:	ldr	r4, [sp, #72]	; 0x48
   11384:	mov	r0, r9
   11388:	mov	r1, r4
   1138c:	bl	11dbc <__assert_fail@plt+0xdd0>
   11390:	sub	r9, r9, #1
   11394:	add	r7, sp, #64	; 0x40
   11398:	add	r5, sp, #52	; 0x34
   1139c:	mov	sl, #0
   113a0:	mov	fp, #0
   113a4:	mov	r3, #1
   113a8:	str	r3, [sp, #28]
   113ac:	sub	r4, r0, r4
   113b0:	sub	r9, r9, r4
   113b4:	str	r0, [sp, #24]
   113b8:	ldr	r3, [pc, #1868]	; 11b0c <__assert_fail@plt+0xb20>
   113bc:	ldr	r1, [r3]
   113c0:	ldr	r3, [r1]
   113c4:	tst	r3, #16
   113c8:	bne	116f4 <__assert_fail@plt+0x708>
   113cc:	ldr	r2, [sp, #20]
   113d0:	mov	r0, r5
   113d4:	bl	12b50 <__assert_fail@plt+0x1b64>
   113d8:	cmp	r0, #0
   113dc:	beq	11760 <__assert_fail@plt+0x774>
   113e0:	ldr	r8, [r5, #4]
   113e4:	ldr	r4, [r5, #8]
   113e8:	mov	r0, r8
   113ec:	mov	r1, r4
   113f0:	bl	11dbc <__assert_fail@plt+0xdd0>
   113f4:	sub	r3, r8, #1
   113f8:	ldr	r1, [sp, #24]
   113fc:	sub	r4, r0, r4
   11400:	sub	r4, r3, r4
   11404:	mov	r2, r4
   11408:	mov	r3, r9
   1140c:	mov	r6, r0
   11410:	bl	11c70 <__assert_fail@plt+0xc84>
   11414:	ldr	r2, [pc, #1716]	; 11ad0 <__assert_fail@plt+0xae4>
   11418:	mvn	r1, #0
   1141c:	ldr	r2, [r2, #24]
   11420:	eor	r3, r0, #1
   11424:	mov	r8, r0
   11428:	uxtb	r3, r3
   1142c:	adds	sl, sl, r3
   11430:	adc	fp, fp, #0
   11434:	cmp	fp, r1
   11438:	mvn	r0, #0
   1143c:	cmpeq	sl, r0
   11440:	mvneq	sl, #1
   11444:	mvneq	fp, #0
   11448:	cmp	r2, #0
   1144c:	beq	11660 <__assert_fail@plt+0x674>
   11450:	cmp	r8, #0
   11454:	beq	11698 <__assert_fail@plt+0x6ac>
   11458:	orrs	r3, sl, fp
   1145c:	beq	116e8 <__assert_fail@plt+0x6fc>
   11460:	add	r0, r7, #4
   11464:	add	r1, r7, #8
   11468:	mov	r3, #0
   1146c:	str	r3, [sp, #28]
   11470:	ldr	r3, [pc, #1624]	; 11ad0 <__assert_fail@plt+0xae4>
   11474:	ldrb	r3, [r3, #20]
   11478:	eor	r3, r3, #1
   1147c:	cmp	r3, #0
   11480:	bne	11490 <__assert_fail@plt+0x4a4>
   11484:	mov	r2, sl
   11488:	mov	r3, fp
   1148c:	bl	11d60 <__assert_fail@plt+0xd74>
   11490:	mov	r3, r5
   11494:	cmp	r8, #0
   11498:	mov	r5, r7
   1149c:	mov	r9, r4
   114a0:	str	r6, [sp, #24]
   114a4:	mov	r7, r3
   114a8:	movne	sl, #0
   114ac:	movne	fp, #0
   114b0:	b	113b8 <__assert_fail@plt+0x3cc>
   114b4:	ldr	r3, [pc, #1556]	; 11ad0 <__assert_fail@plt+0xae4>
   114b8:	mov	r5, r0
   114bc:	strb	r6, [r3, #21]
   114c0:	mov	r3, #1
   114c4:	str	r3, [sp, #24]
   114c8:	b	110e4 <__assert_fail@plt+0xf8>
   114cc:	ldr	r3, [pc, #1572]	; 11af8 <__assert_fail@plt+0xb0c>
   114d0:	ldr	r1, [pc, #1592]	; 11b10 <__assert_fail@plt+0xb24>
   114d4:	ldr	r0, [r3]
   114d8:	bl	11ce0 <__assert_fail@plt+0xcf4>
   114dc:	ldr	r3, [pc, #1516]	; 11ad0 <__assert_fail@plt+0xae4>
   114e0:	str	r0, [r3, #16]
   114e4:	b	110e4 <__assert_fail@plt+0xf8>
   114e8:	ldr	r3, [pc, #1504]	; 11ad0 <__assert_fail@plt+0xae4>
   114ec:	mov	r5, r0
   114f0:	strb	r6, [r3, #20]
   114f4:	mov	r3, #1
   114f8:	str	r3, [sp, #24]
   114fc:	b	110e4 <__assert_fail@plt+0xf8>
   11500:	ldr	r3, [sp, #28]
   11504:	cmp	r3, #2
   11508:	subeq	r2, r0, #48	; 0x30
   1150c:	beq	1164c <__assert_fail@plt+0x660>
   11510:	ldr	r3, [pc, #1464]	; 11ad0 <__assert_fail@plt+0xae4>
   11514:	ldr	r2, [pc, #1528]	; 11b14 <__assert_fail@plt+0xb28>
   11518:	ldr	r3, [r3, #12]
   1151c:	cmp	r3, r2
   11520:	bls	11638 <__assert_fail@plt+0x64c>
   11524:	ldr	r2, [pc, #1444]	; 11ad0 <__assert_fail@plt+0xae4>
   11528:	mvn	r3, #0
   1152c:	str	r3, [r2, #12]
   11530:	mov	r3, #1
   11534:	str	r3, [sp, #28]
   11538:	b	110d8 <__assert_fail@plt+0xec>
   1153c:	ldr	r3, [pc, #1460]	; 11af8 <__assert_fail@plt+0xb0c>
   11540:	mov	fp, #1
   11544:	ldr	r1, [r3]
   11548:	ldr	r3, [pc, #1408]	; 11ad0 <__assert_fail@plt+0xae4>
   1154c:	cmp	r1, #0
   11550:	streq	fp, [sp, #24]
   11554:	strb	r6, [r3, #21]
   11558:	strb	fp, [r3, #22]
   1155c:	streq	r1, [r3, #24]
   11560:	beq	110e4 <__assert_fail@plt+0xf8>
   11564:	ldr	r3, [pc, #1452]	; 11b18 <__assert_fail@plt+0xb2c>
   11568:	mov	r0, #4
   1156c:	ldr	r2, [r3]
   11570:	ldr	r3, [pc, #1444]	; 11b1c <__assert_fail@plt+0xb30>
   11574:	str	r0, [sp]
   11578:	stmib	sp, {r2, fp}
   1157c:	ldr	r0, [pc, #1436]	; 11b20 <__assert_fail@plt+0xb34>
   11580:	add	r2, r3, #12
   11584:	bl	12564 <__assert_fail@plt+0x1578>
   11588:	ldr	r3, [pc, #1428]	; 11b24 <__assert_fail@plt+0xb38>
   1158c:	ldr	r2, [pc, #1340]	; 11ad0 <__assert_fail@plt+0xae4>
   11590:	str	fp, [sp, #24]
   11594:	add	r0, r3, r0, lsl #2
   11598:	ldr	r3, [r0, #264]	; 0x108
   1159c:	str	r3, [r2, #24]
   115a0:	b	110e4 <__assert_fail@plt+0xf8>
   115a4:	mov	r0, r6
   115a8:	bl	11eb8 <__assert_fail@plt+0xecc>
   115ac:	ldr	r3, [pc, #1348]	; 11af8 <__assert_fail@plt+0xb0c>
   115b0:	ldr	r1, [r3]
   115b4:	cmp	r1, #0
   115b8:	beq	11628 <__assert_fail@plt+0x63c>
   115bc:	ldr	r3, [pc, #1364]	; 11b18 <__assert_fail@plt+0xb2c>
   115c0:	mov	ip, #1
   115c4:	mov	r0, #4
   115c8:	ldr	r2, [r3]
   115cc:	ldr	r3, [pc, #1364]	; 11b28 <__assert_fail@plt+0xb3c>
   115d0:	str	r2, [sp, #4]
   115d4:	str	r0, [sp]
   115d8:	add	r2, r3, #16
   115dc:	str	ip, [sp, #8]
   115e0:	ldr	r0, [pc, #1348]	; 11b2c <__assert_fail@plt+0xb40>
   115e4:	bl	12564 <__assert_fail@plt+0x1578>
   115e8:	ldr	r3, [pc, #1332]	; 11b24 <__assert_fail@plt+0xb38>
   115ec:	ldr	r2, [pc, #1244]	; 11ad0 <__assert_fail@plt+0xae4>
   115f0:	add	r0, r3, r0, lsl #2
   115f4:	ldr	r3, [r0, #292]	; 0x124
   115f8:	str	r3, [r2, #28]
   115fc:	b	110e4 <__assert_fail@plt+0xf8>
   11600:	ldr	r3, [sp, #24]
   11604:	cmp	r3, #0
   11608:	bne	11a68 <__assert_fail@plt+0xa7c>
   1160c:	ldr	r3, [pc, #1212]	; 11ad0 <__assert_fail@plt+0xae4>
   11610:	ldr	r3, [r3, #8]
   11614:	cmp	r3, #1
   11618:	movne	r2, #5
   1161c:	ldrne	r1, [pc, #1292]	; 11b30 <__assert_fail@plt+0xb44>
   11620:	beq	112c4 <__assert_fail@plt+0x2d8>
   11624:	b	11a70 <__assert_fail@plt+0xa84>
   11628:	ldr	r2, [pc, #1184]	; 11ad0 <__assert_fail@plt+0xae4>
   1162c:	mov	r3, #3
   11630:	str	r3, [r2, #28]
   11634:	b	110e4 <__assert_fail@plt+0xf8>
   11638:	mov	r2, #10
   1163c:	sub	r1, r0, #48	; 0x30
   11640:	mla	r2, r2, r3, r1
   11644:	cmp	r3, r2
   11648:	bhi	11524 <__assert_fail@plt+0x538>
   1164c:	ldr	r3, [pc, #1148]	; 11ad0 <__assert_fail@plt+0xae4>
   11650:	str	r2, [r3, #12]
   11654:	mov	r3, #1
   11658:	str	r3, [sp, #28]
   1165c:	b	110d8 <__assert_fail@plt+0xec>
   11660:	cmp	r8, #0
   11664:	bne	117a8 <__assert_fail@plt+0x7bc>
   11668:	ldr	r2, [pc, #1120]	; 11ad0 <__assert_fail@plt+0xae4>
   1166c:	ldrb	r2, [r2, #22]
   11670:	cmp	r2, #0
   11674:	beq	113b8 <__assert_fail@plt+0x3cc>
   11678:	orrs	r2, sl, fp
   1167c:	add	r0, r7, #4
   11680:	add	r1, r7, #8
   11684:	bne	116dc <__assert_fail@plt+0x6f0>
   11688:	ldr	r3, [pc, #1088]	; 11ad0 <__assert_fail@plt+0xae4>
   1168c:	ldrb	r3, [r3, #21]
   11690:	eor	r3, r3, #1
   11694:	b	1147c <__assert_fail@plt+0x490>
   11698:	cmp	fp, #0
   1169c:	cmpeq	sl, #1
   116a0:	bne	11668 <__assert_fail@plt+0x67c>
   116a4:	cmp	r2, #1
   116a8:	beq	11820 <__assert_fail@plt+0x834>
   116ac:	cmp	r2, #2
   116b0:	beq	11814 <__assert_fail@plt+0x828>
   116b4:	ldr	r3, [pc, #1044]	; 11ad0 <__assert_fail@plt+0xae4>
   116b8:	ldrb	r3, [r3, #22]
   116bc:	cmp	r3, #0
   116c0:	beq	113b8 <__assert_fail@plt+0x3cc>
   116c4:	add	r0, r7, #4
   116c8:	add	r1, r7, #8
   116cc:	ldr	r3, [pc, #1020]	; 11ad0 <__assert_fail@plt+0xae4>
   116d0:	ldrb	r3, [r3, #22]
   116d4:	eor	r3, r3, #1
   116d8:	b	1147c <__assert_fail@plt+0x490>
   116dc:	cmp	r3, #0
   116e0:	bne	116cc <__assert_fail@plt+0x6e0>
   116e4:	b	11470 <__assert_fail@plt+0x484>
   116e8:	add	r0, r7, #4
   116ec:	add	r1, r7, #8
   116f0:	b	11688 <__assert_fail@plt+0x69c>
   116f4:	orrs	r3, sl, fp
   116f8:	bne	11804 <__assert_fail@plt+0x818>
   116fc:	ldr	r3, [pc, #972]	; 11ad0 <__assert_fail@plt+0xae4>
   11700:	ldrb	r3, [r3, #21]
   11704:	eor	r3, r3, #1
   11708:	cmp	r3, #0
   1170c:	bne	11724 <__assert_fail@plt+0x738>
   11710:	mov	r2, sl
   11714:	mov	r3, fp
   11718:	add	r1, r7, #8
   1171c:	add	r0, r7, #4
   11720:	bl	11d60 <__assert_fail@plt+0xd74>
   11724:	ldr	r3, [pc, #992]	; 11b0c <__assert_fail@plt+0xb20>
   11728:	ldr	r0, [r3]
   1172c:	ldr	r3, [r0]
   11730:	tst	r3, #32
   11734:	bne	11774 <__assert_fail@plt+0x788>
   11738:	bl	12780 <__assert_fail@plt+0x1794>
   1173c:	subs	r4, r0, #0
   11740:	bne	11774 <__assert_fail@plt+0x788>
   11744:	ldr	r0, [sp, #60]	; 0x3c
   11748:	bl	12880 <__assert_fail@plt+0x1894>
   1174c:	ldr	r0, [sp, #72]	; 0x48
   11750:	bl	12880 <__assert_fail@plt+0x1894>
   11754:	mov	r0, r4
   11758:	add	sp, sp, #84	; 0x54
   1175c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11760:	ldr	r3, [pc, #932]	; 11b0c <__assert_fail@plt+0xb20>
   11764:	ldr	r3, [r3]
   11768:	ldr	r3, [r3]
   1176c:	tst	r3, #32
   11770:	beq	116f4 <__assert_fail@plt+0x708>
   11774:	mov	r2, #5
   11778:	ldr	r1, [pc, #948]	; 11b34 <__assert_fail@plt+0xb48>
   1177c:	mov	r0, #0
   11780:	bl	10e00 <dcgettext@plt>
   11784:	ldr	r1, [sp, #36]	; 0x24
   11788:	mov	r4, r0
   1178c:	mov	r0, #4
   11790:	bl	149a0 <__assert_fail@plt+0x39b4>
   11794:	mov	r2, r4
   11798:	mov	r1, #0
   1179c:	mov	r3, r0
   117a0:	mov	r0, #1
   117a4:	bl	10e78 <error@plt>
   117a8:	orrs	r3, sl, fp
   117ac:	add	r0, r7, #4
   117b0:	add	r1, r7, #8
   117b4:	beq	11688 <__assert_fail@plt+0x69c>
   117b8:	b	11470 <__assert_fail@plt+0x484>
   117bc:	ldr	r3, [pc, #840]	; 11b0c <__assert_fail@plt+0xb20>
   117c0:	ldr	r1, [pc, #880]	; 11b38 <__assert_fail@plt+0xb4c>
   117c4:	ldr	r0, [sp, #36]	; 0x24
   117c8:	ldr	r2, [r3]
   117cc:	bl	12928 <__assert_fail@plt+0x193c>
   117d0:	subs	r5, r0, #0
   117d4:	bne	112e4 <__assert_fail@plt+0x2f8>
   117d8:	bl	10f20 <__errno_location@plt>
   117dc:	ldr	r2, [sp, #36]	; 0x24
   117e0:	ldr	r4, [r0]
   117e4:	mov	r1, #3
   117e8:	mov	r0, r5
   117ec:	bl	14a5c <__assert_fail@plt+0x3a70>
   117f0:	mov	r1, r4
   117f4:	ldr	r2, [pc, #832]	; 11b3c <__assert_fail@plt+0xb50>
   117f8:	mov	r3, r0
   117fc:	mov	r0, #1
   11800:	bl	10e78 <error@plt>
   11804:	ldr	r3, [pc, #708]	; 11ad0 <__assert_fail@plt+0xae4>
   11808:	ldrb	r3, [r3, #20]
   1180c:	eor	r3, r3, #1
   11810:	b	11708 <__assert_fail@plt+0x71c>
   11814:	ldr	r3, [sp, #28]
   11818:	cmp	r3, #0
   1181c:	bne	116b4 <__assert_fail@plt+0x6c8>
   11820:	ldr	r3, [pc, #700]	; 11ae4 <__assert_fail@plt+0xaf8>
   11824:	ldr	r0, [r3]
   11828:	ldr	r2, [r0, #24]
   1182c:	ldr	r3, [r0, #20]
   11830:	cmp	r3, r2
   11834:	addcc	r2, r3, #1
   11838:	strcc	r2, [r0, #20]
   1183c:	ldrbcc	r2, [sp, #20]
   11840:	strbcc	r2, [r3]
   11844:	bcc	116b4 <__assert_fail@plt+0x6c8>
   11848:	ldr	r1, [sp, #20]
   1184c:	bl	10f8c <__overflow@plt>
   11850:	b	116b4 <__assert_fail@plt+0x6c8>
   11854:	bl	12cc0 <__assert_fail@plt+0x1cd4>
   11858:	sub	r3, r0, #199680	; 0x30c00
   1185c:	sub	r3, r3, #432	; 0x1b0
   11860:	cmp	r3, #696	; 0x2b8
   11864:	bls	1120c <__assert_fail@plt+0x220>
   11868:	ldr	r0, [pc, #648]	; 11af8 <__assert_fail@plt+0xb0c>
   1186c:	ldr	r2, [pc, #588]	; 11ac0 <__assert_fail@plt+0xad4>
   11870:	add	r3, sp, #64	; 0x40
   11874:	str	r2, [sp]
   11878:	mov	r1, #0
   1187c:	mov	r2, #10
   11880:	ldr	r0, [r0]
   11884:	bl	15738 <__assert_fail@plt+0x474c>
   11888:	cmp	r0, #0
   1188c:	bne	1120c <__assert_fail@plt+0x220>
   11890:	ldrd	r2, [sp, #64]	; 0x40
   11894:	mov	r1, #0
   11898:	mvn	r0, #0
   1189c:	cmp	r3, r1
   118a0:	cmpeq	r2, r0
   118a4:	bhi	1120c <__assert_fail@plt+0x220>
   118a8:	ldr	r1, [pc, #544]	; 11ad0 <__assert_fail@plt+0xae4>
   118ac:	str	r2, [r1, #16]
   118b0:	b	110e4 <__assert_fail@plt+0xf8>
   118b4:	mov	sl, #0
   118b8:	add	r6, sp, #64	; 0x40
   118bc:	add	r5, sp, #52	; 0x34
   118c0:	mov	r8, sl
   118c4:	str	r3, [sp, #24]
   118c8:	ldr	r3, [pc, #572]	; 11b0c <__assert_fail@plt+0xb20>
   118cc:	ldr	r1, [r3]
   118d0:	ldr	r3, [r1]
   118d4:	tst	r3, #16
   118d8:	bne	119dc <__assert_fail@plt+0x9f0>
   118dc:	ldr	r2, [sp, #20]
   118e0:	mov	r0, r5
   118e4:	bl	12b50 <__assert_fail@plt+0x1b64>
   118e8:	cmp	r0, #0
   118ec:	beq	119dc <__assert_fail@plt+0x9f0>
   118f0:	ldr	fp, [r5, #4]
   118f4:	ldr	r4, [r5, #8]
   118f8:	mov	r0, fp
   118fc:	mov	r1, r4
   11900:	bl	11dbc <__assert_fail@plt+0xdd0>
   11904:	sub	r3, fp, #1
   11908:	cmp	r8, #0
   1190c:	sub	r4, r0, r4
   11910:	mov	r7, r0
   11914:	sub	r4, r3, r4
   11918:	beq	11978 <__assert_fail@plt+0x98c>
   1191c:	ldr	r3, [sp, #32]
   11920:	mov	r2, r4
   11924:	mov	r1, r8
   11928:	bl	11c70 <__assert_fail@plt+0xc84>
   1192c:	cmp	r0, #0
   11930:	bne	11978 <__assert_fail@plt+0x98c>
   11934:	ldr	r3, [pc, #404]	; 11ad0 <__assert_fail@plt+0xae4>
   11938:	ldr	r3, [r3, #28]
   1193c:	cmp	r3, #0
   11940:	beq	118c8 <__assert_fail@plt+0x8dc>
   11944:	ldr	r3, [pc, #408]	; 11ae4 <__assert_fail@plt+0xaf8>
   11948:	ldr	r2, [r5, #4]
   1194c:	ldr	r0, [r5, #8]
   11950:	ldr	r3, [r3]
   11954:	ldr	r1, [sp, #24]
   11958:	bl	10ddc <fwrite_unlocked@plt>
   1195c:	mov	r3, r5
   11960:	str	r4, [sp, #32]
   11964:	mov	r5, r6
   11968:	mov	r8, r7
   1196c:	mov	sl, r9
   11970:	mov	r6, r3
   11974:	b	118c8 <__assert_fail@plt+0x8dc>
   11978:	ldr	r3, [pc, #336]	; 11ad0 <__assert_fail@plt+0xae4>
   1197c:	ldr	r3, [r3, #28]
   11980:	cmp	r3, #0
   11984:	beq	11944 <__assert_fail@plt+0x958>
   11988:	cmp	r3, #4
   1198c:	cmpne	r3, #1
   11990:	beq	119a8 <__assert_fail@plt+0x9bc>
   11994:	cmp	sl, #0
   11998:	beq	11944 <__assert_fail@plt+0x958>
   1199c:	sub	r3, r3, #2
   119a0:	cmp	r3, #1
   119a4:	bhi	11944 <__assert_fail@plt+0x958>
   119a8:	ldr	r3, [pc, #308]	; 11ae4 <__assert_fail@plt+0xaf8>
   119ac:	ldr	r0, [r3]
   119b0:	ldr	r2, [r0, #24]
   119b4:	ldr	r3, [r0, #20]
   119b8:	cmp	r3, r2
   119bc:	addcc	r2, r3, #1
   119c0:	strcc	r2, [r0, #20]
   119c4:	ldrbcc	r2, [sp, #20]
   119c8:	strbcc	r2, [r3]
   119cc:	bcc	11944 <__assert_fail@plt+0x958>
   119d0:	ldr	r1, [sp, #20]
   119d4:	bl	10f8c <__overflow@plt>
   119d8:	b	11944 <__assert_fail@plt+0x958>
   119dc:	ldr	r3, [pc, #236]	; 11ad0 <__assert_fail@plt+0xae4>
   119e0:	ldr	r3, [r3, #28]
   119e4:	sub	r3, r3, #2
   119e8:	bics	r3, r3, #2
   119ec:	movne	sl, #0
   119f0:	andeq	sl, sl, #1
   119f4:	cmp	sl, #0
   119f8:	beq	11724 <__assert_fail@plt+0x738>
   119fc:	ldr	r3, [pc, #224]	; 11ae4 <__assert_fail@plt+0xaf8>
   11a00:	ldr	r0, [r3]
   11a04:	ldr	r2, [r0, #24]
   11a08:	ldr	r3, [r0, #20]
   11a0c:	cmp	r3, r2
   11a10:	addcc	r2, r3, #1
   11a14:	strcc	r2, [r0, #20]
   11a18:	ldrbcc	r2, [sp, #20]
   11a1c:	strbcc	r2, [r3]
   11a20:	bcc	11724 <__assert_fail@plt+0x738>
   11a24:	ldr	r1, [sp, #20]
   11a28:	bl	10f8c <__overflow@plt>
   11a2c:	b	11724 <__assert_fail@plt+0x738>
   11a30:	mov	r2, #5
   11a34:	ldr	r1, [pc, #260]	; 11b40 <__assert_fail@plt+0xb54>
   11a38:	mov	r0, #0
   11a3c:	bl	10e00 <dcgettext@plt>
   11a40:	ldr	r3, [r6]
   11a44:	mov	r4, r0
   11a48:	ldr	r0, [r7, r3, lsl #2]
   11a4c:	bl	14be0 <__assert_fail@plt+0x3bf4>
   11a50:	mov	r1, #0
   11a54:	mov	r2, r4
   11a58:	mov	r3, r0
   11a5c:	mov	r0, r1
   11a60:	bl	10e78 <error@plt>
   11a64:	b	11154 <__assert_fail@plt+0x168>
   11a68:	ldr	r1, [pc, #212]	; 11b44 <__assert_fail@plt+0xb58>
   11a6c:	mov	r2, #5
   11a70:	mov	r0, #0
   11a74:	bl	10e00 <dcgettext@plt>
   11a78:	mov	r1, #0
   11a7c:	mov	r2, r0
   11a80:	mov	r0, r1
   11a84:	bl	10e78 <error@plt>
   11a88:	b	11154 <__assert_fail@plt+0x168>
   11a8c:	mov	r2, #5
   11a90:	ldr	r1, [pc, #168]	; 11b40 <__assert_fail@plt+0xb54>
   11a94:	mov	r0, #0
   11a98:	bl	10e00 <dcgettext@plt>
   11a9c:	ldr	r3, [pc, #84]	; 11af8 <__assert_fail@plt+0xb0c>
   11aa0:	mov	r4, r0
   11aa4:	ldr	r0, [r3]
   11aa8:	b	11a4c <__assert_fail@plt+0xa60>
   11aac:	bl	10f20 <__errno_location@plt>
   11ab0:	mov	r2, r4
   11ab4:	b	117e0 <__assert_fail@plt+0x7f4>
   11ab8:	ldrdeq	r6, [r1], -r4
   11abc:	andeq	r6, r1, r4, ror #29
   11ac0:	muleq	r1, r8, r8
   11ac4:	andeq	r6, r1, r8, ror #29
   11ac8:	andeq	r6, r1, ip, lsr #28
   11acc:	andeq	r2, r1, ip, asr r6
   11ad0:	andeq	r8, r2, r0, ror r1
   11ad4:	andeq	r8, r2, r0, asr r1
   11ad8:	andeq	r6, r1, r0, lsl #30
   11adc:	andeq	r6, r1, r4, ror r6
   11ae0:	strdeq	r8, [r2], -ip
   11ae4:	andeq	r8, r2, r4, ror #2
   11ae8:	andeq	r6, r1, ip, lsr #31
   11aec:			; <UNDEFINED> instruction: 0x00016fbc
   11af0:	muleq	r1, r4, r7
   11af4:	andeq	r6, r1, r8, lsr #28
   11af8:	andeq	r8, r2, r8, ror #2
   11afc:	andeq	r6, r1, r8, lsl #31
   11b00:	andeq	r6, r1, r4, asr #30
   11b04:	andeq	r7, r1, r4, lsr r0
   11b08:	andeq	r7, r1, r8, ror r0
   11b0c:	andeq	r8, r2, r0, ror #2
   11b10:	andeq	r6, r1, r8, ror #30
   11b14:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11b18:	andeq	r8, r2, r0, lsl #2
   11b1c:	andeq	r6, r1, r4, asr #14
   11b20:	andeq	r6, r1, ip, lsr #30
   11b24:	andeq	r6, r1, ip, lsr r6
   11b28:	andeq	r6, r1, r0, ror #14
   11b2c:	andeq	r6, r1, ip, lsr pc
   11b30:	andeq	r7, r1, r0
   11b34:	andeq	r7, r1, ip, ror r0
   11b38:	andeq	r7, r1, r4, ror r0
   11b3c:	andeq	r6, r1, r8, lsl #15
   11b40:	andeq	r6, r1, r8, lsl pc
   11b44:	ldrdeq	r6, [r1], -r0
   11b48:	mov	fp, #0
   11b4c:	mov	lr, #0
   11b50:	pop	{r1}		; (ldr r1, [sp], #4)
   11b54:	mov	r2, sp
   11b58:	push	{r2}		; (str r2, [sp, #-4]!)
   11b5c:	push	{r0}		; (str r0, [sp, #-4]!)
   11b60:	ldr	ip, [pc, #16]	; 11b78 <__assert_fail@plt+0xb8c>
   11b64:	push	{ip}		; (str ip, [sp, #-4]!)
   11b68:	ldr	r0, [pc, #12]	; 11b7c <__assert_fail@plt+0xb90>
   11b6c:	ldr	r3, [pc, #12]	; 11b80 <__assert_fail@plt+0xb94>
   11b70:	bl	10ea8 <__libc_start_main@plt>
   11b74:	bl	10fd4 <abort@plt>
   11b78:	andeq	r6, r1, r4, lsl r6
   11b7c:	strdeq	r0, [r1], -r8
   11b80:			; <UNDEFINED> instruction: 0x000165b4
   11b84:	ldr	r3, [pc, #20]	; 11ba0 <__assert_fail@plt+0xbb4>
   11b88:	ldr	r2, [pc, #20]	; 11ba4 <__assert_fail@plt+0xbb8>
   11b8c:	add	r3, pc, r3
   11b90:	ldr	r2, [r3, r2]
   11b94:	cmp	r2, #0
   11b98:	bxeq	lr
   11b9c:	b	10ecc <__gmon_start__@plt>
   11ba0:	andeq	r6, r1, ip, ror #8
   11ba4:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11ba8:	ldr	r3, [pc, #28]	; 11bcc <__assert_fail@plt+0xbe0>
   11bac:	ldr	r0, [pc, #28]	; 11bd0 <__assert_fail@plt+0xbe4>
   11bb0:	sub	r3, r3, r0
   11bb4:	cmp	r3, #6
   11bb8:	bxls	lr
   11bbc:	ldr	r3, [pc, #16]	; 11bd4 <__assert_fail@plt+0xbe8>
   11bc0:	cmp	r3, #0
   11bc4:	bxeq	lr
   11bc8:	bx	r3
   11bcc:	andeq	r8, r2, fp, asr #2
   11bd0:	andeq	r8, r2, r8, asr #2
   11bd4:	andeq	r0, r0, r0
   11bd8:	ldr	r1, [pc, #36]	; 11c04 <__assert_fail@plt+0xc18>
   11bdc:	ldr	r0, [pc, #36]	; 11c08 <__assert_fail@plt+0xc1c>
   11be0:	sub	r1, r1, r0
   11be4:	asr	r1, r1, #2
   11be8:	add	r1, r1, r1, lsr #31
   11bec:	asrs	r1, r1, #1
   11bf0:	bxeq	lr
   11bf4:	ldr	r3, [pc, #16]	; 11c0c <__assert_fail@plt+0xc20>
   11bf8:	cmp	r3, #0
   11bfc:	bxeq	lr
   11c00:	bx	r3
   11c04:	andeq	r8, r2, r8, asr #2
   11c08:	andeq	r8, r2, r8, asr #2
   11c0c:	andeq	r0, r0, r0
   11c10:	push	{r4, lr}
   11c14:	ldr	r4, [pc, #24]	; 11c34 <__assert_fail@plt+0xc48>
   11c18:	ldrb	r3, [r4]
   11c1c:	cmp	r3, #0
   11c20:	popne	{r4, pc}
   11c24:	bl	11ba8 <__assert_fail@plt+0xbbc>
   11c28:	mov	r3, #1
   11c2c:	strb	r3, [r4]
   11c30:	pop	{r4, pc}
   11c34:	andeq	r8, r2, ip, ror #2
   11c38:	ldr	r0, [pc, #40]	; 11c68 <__assert_fail@plt+0xc7c>
   11c3c:	ldr	r3, [r0]
   11c40:	cmp	r3, #0
   11c44:	bne	11c4c <__assert_fail@plt+0xc60>
   11c48:	b	11bd8 <__assert_fail@plt+0xbec>
   11c4c:	ldr	r3, [pc, #24]	; 11c6c <__assert_fail@plt+0xc80>
   11c50:	cmp	r3, #0
   11c54:	beq	11c48 <__assert_fail@plt+0xc5c>
   11c58:	push	{r4, lr}
   11c5c:	blx	r3
   11c60:	pop	{r4, lr}
   11c64:	b	11bd8 <__assert_fail@plt+0xbec>
   11c68:	andeq	r7, r2, r4, lsl pc
   11c6c:	andeq	r0, r0, r0
   11c70:	push	{r4, lr}
   11c74:	ldr	lr, [pc, #96]	; 11cdc <__assert_fail@plt+0xcf0>
   11c78:	ldr	ip, [lr]
   11c7c:	ldrb	lr, [lr, #4]
   11c80:	cmp	ip, r2
   11c84:	movcc	r2, ip
   11c88:	cmp	ip, r3
   11c8c:	movcc	r3, ip
   11c90:	cmp	lr, #0
   11c94:	beq	11ca8 <__assert_fail@plt+0xcbc>
   11c98:	cmp	r2, r3
   11c9c:	beq	11cc8 <__assert_fail@plt+0xcdc>
   11ca0:	mov	r0, lr
   11ca4:	pop	{r4, pc}
   11ca8:	cmp	r2, r3
   11cac:	movne	lr, #1
   11cb0:	bne	11ca0 <__assert_fail@plt+0xcb4>
   11cb4:	bl	10de8 <memcmp@plt>
   11cb8:	adds	lr, r0, #0
   11cbc:	movne	lr, #1
   11cc0:	mov	r0, lr
   11cc4:	pop	{r4, pc}
   11cc8:	bl	12c6c <__assert_fail@plt+0x1c80>
   11ccc:	adds	lr, r0, #0
   11cd0:	movne	lr, #1
   11cd4:	mov	r0, lr
   11cd8:	pop	{r4, pc}
   11cdc:	andeq	r8, r2, r0, ror r1
   11ce0:	push	{r4, r5, lr}
   11ce4:	sub	sp, sp, #20
   11ce8:	ldr	r3, [pc, #104]	; 11d58 <__assert_fail@plt+0xd6c>
   11cec:	mov	r5, r1
   11cf0:	str	r3, [sp]
   11cf4:	mov	r2, #10
   11cf8:	add	r3, sp, #8
   11cfc:	mov	r1, #0
   11d00:	mov	r4, r0
   11d04:	bl	15738 <__assert_fail@plt+0x474c>
   11d08:	cmp	r0, #1
   11d0c:	bhi	11d30 <__assert_fail@plt+0xd44>
   11d10:	ldrd	r0, [sp, #8]
   11d14:	mov	r3, #0
   11d18:	mvn	r2, #0
   11d1c:	cmp	r1, r3
   11d20:	cmpeq	r0, r2
   11d24:	movhi	r0, r2
   11d28:	add	sp, sp, #20
   11d2c:	pop	{r4, r5, pc}
   11d30:	mov	r1, r5
   11d34:	mov	r2, #5
   11d38:	mov	r0, #0
   11d3c:	bl	10e00 <dcgettext@plt>
   11d40:	mov	r3, r4
   11d44:	ldr	r2, [pc, #16]	; 11d5c <__assert_fail@plt+0xd70>
   11d48:	mov	r1, #0
   11d4c:	str	r0, [sp]
   11d50:	mov	r0, #1
   11d54:	bl	10e78 <error@plt>
   11d58:	muleq	r1, r8, r8
   11d5c:	andeq	r6, r1, r4, lsl #15
   11d60:	ldr	ip, [pc, #72]	; 11db0 <__assert_fail@plt+0xdc4>
   11d64:	push	{r4, r5, r6, lr}
   11d68:	mov	r4, r1
   11d6c:	ldr	r1, [ip, #8]
   11d70:	mov	r5, r0
   11d74:	cmp	r1, #0
   11d78:	beq	11d98 <__assert_fail@plt+0xdac>
   11d7c:	ldr	r3, [pc, #48]	; 11db4 <__assert_fail@plt+0xdc8>
   11d80:	ldr	r2, [r5]
   11d84:	ldr	r0, [r4]
   11d88:	ldr	r3, [r3]
   11d8c:	mov	r1, #1
   11d90:	pop	{r4, r5, r6, lr}
   11d94:	b	10ddc <fwrite_unlocked@plt>
   11d98:	adds	r2, r2, #1
   11d9c:	adc	r3, r3, #0
   11da0:	ldr	r1, [pc, #16]	; 11db8 <__assert_fail@plt+0xdcc>
   11da4:	mov	r0, #1
   11da8:	bl	10f44 <__printf_chk@plt>
   11dac:	b	11d7c <__assert_fail@plt+0xd90>
   11db0:	andeq	r8, r2, r0, ror r1
   11db4:	andeq	r8, r2, r4, ror #2
   11db8:	andeq	r6, r1, ip, lsl #15
   11dbc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11dc0:	sub	r8, r0, #1
   11dc4:	ldr	r7, [pc, #232]	; 11eb4 <__assert_fail@plt+0xec8>
   11dc8:	mov	r9, r1
   11dcc:	ldr	r6, [r7, #12]
   11dd0:	cmp	r6, #0
   11dd4:	cmpne	r0, #1
   11dd8:	movne	r0, #1
   11ddc:	moveq	r0, #0
   11de0:	beq	11eac <__assert_fail@plt+0xec0>
   11de4:	mov	r4, #0
   11de8:	mov	r5, r4
   11dec:	bl	10ef0 <__ctype_b_loc@plt>
   11df0:	add	r1, r9, r4
   11df4:	ldr	r0, [r0]
   11df8:	ldrb	r2, [r1], #1
   11dfc:	lsl	r3, r2, #1
   11e00:	ldrh	r3, [r0, r3]
   11e04:	and	r3, r3, #1
   11e08:	cmp	r2, #10
   11e0c:	movne	ip, r3
   11e10:	orreq	ip, r3, #1
   11e14:	cmp	ip, #0
   11e18:	bne	11e9c <__assert_fail@plt+0xeb0>
   11e1c:	cmp	r8, r4
   11e20:	bls	11e80 <__assert_fail@plt+0xe94>
   11e24:	add	r1, r9, r4
   11e28:	b	11e48 <__assert_fail@plt+0xe5c>
   11e2c:	add	r4, r4, #1
   11e30:	cmp	r4, r8
   11e34:	beq	11e80 <__assert_fail@plt+0xe94>
   11e38:	ldrb	r2, [r1, #1]!
   11e3c:	lsl	r3, r2, #1
   11e40:	ldrh	r3, [r0, r3]
   11e44:	and	r3, r3, #1
   11e48:	cmp	r2, #10
   11e4c:	orreq	r3, r3, #1
   11e50:	cmp	r3, #0
   11e54:	beq	11e2c <__assert_fail@plt+0xe40>
   11e58:	add	r5, r5, #1
   11e5c:	cmp	r5, r6
   11e60:	movcs	r3, #0
   11e64:	movcc	r3, #1
   11e68:	cmp	r8, r4
   11e6c:	movls	r3, #0
   11e70:	cmp	r3, #0
   11e74:	beq	11e80 <__assert_fail@plt+0xe94>
   11e78:	cmp	r8, r4
   11e7c:	bhi	11dec <__assert_fail@plt+0xe00>
   11e80:	ldr	r3, [r7, #16]
   11e84:	sub	r8, r8, r4
   11e88:	cmp	r8, r3
   11e8c:	addls	r4, r4, r8
   11e90:	addhi	r4, r4, r3
   11e94:	add	r0, r9, r4
   11e98:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e9c:	add	r4, r4, #1
   11ea0:	cmp	r4, r8
   11ea4:	bne	11df8 <__assert_fail@plt+0xe0c>
   11ea8:	b	11e58 <__assert_fail@plt+0xe6c>
   11eac:	mov	r4, r0
   11eb0:	b	11e80 <__assert_fail@plt+0xe94>
   11eb4:	andeq	r8, r2, r0, ror r1
   11eb8:	subs	r5, r0, #0
   11ebc:	push	{r7, lr}
   11ec0:	sub	sp, sp, #56	; 0x38
   11ec4:	beq	11f00 <__assert_fail@plt+0xf14>
   11ec8:	ldr	r3, [pc, #852]	; 12224 <__assert_fail@plt+0x1238>
   11ecc:	mov	r2, #5
   11ed0:	ldr	r1, [pc, #848]	; 12228 <__assert_fail@plt+0x123c>
   11ed4:	mov	r0, #0
   11ed8:	ldr	r4, [r3]
   11edc:	bl	10e00 <dcgettext@plt>
   11ee0:	ldr	r3, [pc, #836]	; 1222c <__assert_fail@plt+0x1240>
   11ee4:	mov	r1, #1
   11ee8:	ldr	r3, [r3]
   11eec:	mov	r2, r0
   11ef0:	mov	r0, r4
   11ef4:	bl	10f5c <__fprintf_chk@plt>
   11ef8:	mov	r0, r5
   11efc:	bl	10efc <exit@plt>
   11f00:	mov	r2, #5
   11f04:	ldr	r1, [pc, #804]	; 12230 <__assert_fail@plt+0x1244>
   11f08:	bl	10e00 <dcgettext@plt>
   11f0c:	ldr	r3, [pc, #792]	; 1222c <__assert_fail@plt+0x1240>
   11f10:	ldr	r6, [pc, #796]	; 12234 <__assert_fail@plt+0x1248>
   11f14:	ldr	r4, [pc, #796]	; 12238 <__assert_fail@plt+0x124c>
   11f18:	ldr	r2, [r3]
   11f1c:	mov	r1, r0
   11f20:	mov	r0, #1
   11f24:	bl	10f44 <__printf_chk@plt>
   11f28:	mov	r2, #5
   11f2c:	ldr	r1, [pc, #776]	; 1223c <__assert_fail@plt+0x1250>
   11f30:	mov	r0, r5
   11f34:	bl	10e00 <dcgettext@plt>
   11f38:	ldr	r1, [r6]
   11f3c:	bl	10d58 <fputs_unlocked@plt>
   11f40:	mov	r2, #5
   11f44:	ldr	r1, [pc, #756]	; 12240 <__assert_fail@plt+0x1254>
   11f48:	mov	r0, r5
   11f4c:	bl	10e00 <dcgettext@plt>
   11f50:	ldr	r1, [r6]
   11f54:	bl	10d58 <fputs_unlocked@plt>
   11f58:	mov	r2, #5
   11f5c:	ldr	r1, [pc, #736]	; 12244 <__assert_fail@plt+0x1258>
   11f60:	mov	r0, r5
   11f64:	bl	10e00 <dcgettext@plt>
   11f68:	ldr	r1, [r6]
   11f6c:	bl	10d58 <fputs_unlocked@plt>
   11f70:	mov	r2, #5
   11f74:	ldr	r1, [pc, #716]	; 12248 <__assert_fail@plt+0x125c>
   11f78:	mov	r0, r5
   11f7c:	bl	10e00 <dcgettext@plt>
   11f80:	ldr	r1, [r6]
   11f84:	bl	10d58 <fputs_unlocked@plt>
   11f88:	mov	r2, #5
   11f8c:	ldr	r1, [pc, #696]	; 1224c <__assert_fail@plt+0x1260>
   11f90:	mov	r0, r5
   11f94:	bl	10e00 <dcgettext@plt>
   11f98:	ldr	r1, [r6]
   11f9c:	bl	10d58 <fputs_unlocked@plt>
   11fa0:	mov	r2, #5
   11fa4:	ldr	r1, [pc, #676]	; 12250 <__assert_fail@plt+0x1264>
   11fa8:	mov	r0, r5
   11fac:	bl	10e00 <dcgettext@plt>
   11fb0:	ldr	r1, [r6]
   11fb4:	bl	10d58 <fputs_unlocked@plt>
   11fb8:	mov	r2, #5
   11fbc:	ldr	r1, [pc, #656]	; 12254 <__assert_fail@plt+0x1268>
   11fc0:	mov	r0, r5
   11fc4:	bl	10e00 <dcgettext@plt>
   11fc8:	ldr	r1, [r6]
   11fcc:	bl	10d58 <fputs_unlocked@plt>
   11fd0:	mov	r2, #5
   11fd4:	ldr	r1, [pc, #636]	; 12258 <__assert_fail@plt+0x126c>
   11fd8:	mov	r0, r5
   11fdc:	bl	10e00 <dcgettext@plt>
   11fe0:	ldr	r1, [r6]
   11fe4:	bl	10d58 <fputs_unlocked@plt>
   11fe8:	mov	r2, #5
   11fec:	ldr	r1, [pc, #616]	; 1225c <__assert_fail@plt+0x1270>
   11ff0:	mov	r0, r5
   11ff4:	bl	10e00 <dcgettext@plt>
   11ff8:	ldr	r1, [r6]
   11ffc:	bl	10d58 <fputs_unlocked@plt>
   12000:	mov	r2, #5
   12004:	ldr	r1, [pc, #596]	; 12260 <__assert_fail@plt+0x1274>
   12008:	mov	r0, r5
   1200c:	bl	10e00 <dcgettext@plt>
   12010:	ldr	r1, [r6]
   12014:	bl	10d58 <fputs_unlocked@plt>
   12018:	mov	r2, #5
   1201c:	ldr	r1, [pc, #576]	; 12264 <__assert_fail@plt+0x1278>
   12020:	mov	r0, r5
   12024:	bl	10e00 <dcgettext@plt>
   12028:	ldr	r1, [r6]
   1202c:	bl	10d58 <fputs_unlocked@plt>
   12030:	mov	r2, #5
   12034:	ldr	r1, [pc, #556]	; 12268 <__assert_fail@plt+0x127c>
   12038:	mov	r0, r5
   1203c:	bl	10e00 <dcgettext@plt>
   12040:	ldr	r1, [r6]
   12044:	bl	10d58 <fputs_unlocked@plt>
   12048:	mov	r2, #5
   1204c:	ldr	r1, [pc, #536]	; 1226c <__assert_fail@plt+0x1280>
   12050:	mov	r0, r5
   12054:	bl	10e00 <dcgettext@plt>
   12058:	ldr	r1, [r6]
   1205c:	bl	10d58 <fputs_unlocked@plt>
   12060:	ldm	r4!, {r0, r1, r2, r3}
   12064:	mov	lr, sp
   12068:	stmia	lr!, {r0, r1, r2, r3}
   1206c:	ldm	r4!, {r0, r1, r2, r3}
   12070:	ldr	ip, [sp]
   12074:	stmia	lr!, {r0, r1, r2, r3}
   12078:	cmp	ip, #0
   1207c:	ldm	r4!, {r0, r1, r2, r3}
   12080:	stmia	lr!, {r0, r1, r2, r3}
   12084:	ldm	r4, {r0, r1}
   12088:	moveq	r4, sp
   1208c:	stm	lr, {r0, r1}
   12090:	beq	120c0 <__assert_fail@plt+0x10d4>
   12094:	ldr	r7, [pc, #468]	; 12270 <__assert_fail@plt+0x1284>
   12098:	mov	r4, sp
   1209c:	b	120ac <__assert_fail@plt+0x10c0>
   120a0:	ldr	ip, [r4, #8]!
   120a4:	cmp	ip, #0
   120a8:	beq	120c0 <__assert_fail@plt+0x10d4>
   120ac:	mov	r1, ip
   120b0:	mov	r0, r7
   120b4:	bl	10d70 <strcmp@plt>
   120b8:	cmp	r0, #0
   120bc:	bne	120a0 <__assert_fail@plt+0x10b4>
   120c0:	ldr	r4, [r4, #4]
   120c4:	mov	r2, #5
   120c8:	cmp	r4, #0
   120cc:	ldr	r1, [pc, #416]	; 12274 <__assert_fail@plt+0x1288>
   120d0:	beq	12178 <__assert_fail@plt+0x118c>
   120d4:	mov	r0, #0
   120d8:	bl	10e00 <dcgettext@plt>
   120dc:	ldr	r3, [pc, #404]	; 12278 <__assert_fail@plt+0x128c>
   120e0:	ldr	r2, [pc, #404]	; 1227c <__assert_fail@plt+0x1290>
   120e4:	mov	r1, r0
   120e8:	mov	r0, #1
   120ec:	bl	10f44 <__printf_chk@plt>
   120f0:	mov	r1, #0
   120f4:	mov	r0, #5
   120f8:	bl	10f98 <setlocale@plt>
   120fc:	cmp	r0, #0
   12100:	ldreq	r7, [pc, #360]	; 12270 <__assert_fail@plt+0x1284>
   12104:	beq	12120 <__assert_fail@plt+0x1134>
   12108:	mov	r2, #3
   1210c:	ldr	r1, [pc, #364]	; 12280 <__assert_fail@plt+0x1294>
   12110:	bl	10fc8 <strncmp@plt>
   12114:	ldr	r7, [pc, #340]	; 12270 <__assert_fail@plt+0x1284>
   12118:	cmp	r0, #0
   1211c:	bne	12208 <__assert_fail@plt+0x121c>
   12120:	mov	r2, #5
   12124:	ldr	r1, [pc, #344]	; 12284 <__assert_fail@plt+0x1298>
   12128:	mov	r0, #0
   1212c:	bl	10e00 <dcgettext@plt>
   12130:	ldr	r3, [pc, #312]	; 12270 <__assert_fail@plt+0x1284>
   12134:	ldr	r2, [pc, #316]	; 12278 <__assert_fail@plt+0x128c>
   12138:	mov	r1, r0
   1213c:	mov	r0, #1
   12140:	bl	10f44 <__printf_chk@plt>
   12144:	mov	r2, #5
   12148:	ldr	r1, [pc, #312]	; 12288 <__assert_fail@plt+0x129c>
   1214c:	mov	r0, #0
   12150:	bl	10e00 <dcgettext@plt>
   12154:	ldr	r2, [pc, #304]	; 1228c <__assert_fail@plt+0x12a0>
   12158:	cmp	r4, r7
   1215c:	ldr	r3, [pc, #300]	; 12290 <__assert_fail@plt+0x12a4>
   12160:	movne	r3, r2
   12164:	mov	r1, r0
   12168:	mov	r2, r4
   1216c:	mov	r0, #1
   12170:	bl	10f44 <__printf_chk@plt>
   12174:	b	11ef8 <__assert_fail@plt+0xf0c>
   12178:	mov	r0, r4
   1217c:	bl	10e00 <dcgettext@plt>
   12180:	ldr	r3, [pc, #240]	; 12278 <__assert_fail@plt+0x128c>
   12184:	ldr	r2, [pc, #240]	; 1227c <__assert_fail@plt+0x1290>
   12188:	mov	r1, r0
   1218c:	mov	r0, #1
   12190:	bl	10f44 <__printf_chk@plt>
   12194:	mov	r1, r4
   12198:	mov	r0, #5
   1219c:	bl	10f98 <setlocale@plt>
   121a0:	cmp	r0, #0
   121a4:	beq	121bc <__assert_fail@plt+0x11d0>
   121a8:	mov	r2, #3
   121ac:	ldr	r1, [pc, #204]	; 12280 <__assert_fail@plt+0x1294>
   121b0:	bl	10fc8 <strncmp@plt>
   121b4:	cmp	r0, #0
   121b8:	bne	12200 <__assert_fail@plt+0x1214>
   121bc:	mov	r2, #5
   121c0:	ldr	r1, [pc, #188]	; 12284 <__assert_fail@plt+0x1298>
   121c4:	mov	r0, #0
   121c8:	bl	10e00 <dcgettext@plt>
   121cc:	ldr	r3, [pc, #156]	; 12270 <__assert_fail@plt+0x1284>
   121d0:	ldr	r2, [pc, #160]	; 12278 <__assert_fail@plt+0x128c>
   121d4:	mov	r4, r3
   121d8:	mov	r1, r0
   121dc:	mov	r0, #1
   121e0:	bl	10f44 <__printf_chk@plt>
   121e4:	ldr	r1, [pc, #156]	; 12288 <__assert_fail@plt+0x129c>
   121e8:	mov	r2, #5
   121ec:	mov	r0, #0
   121f0:	bl	10e00 <dcgettext@plt>
   121f4:	ldr	r3, [pc, #148]	; 12290 <__assert_fail@plt+0x12a4>
   121f8:	mov	r1, r0
   121fc:	b	12168 <__assert_fail@plt+0x117c>
   12200:	ldr	r7, [pc, #104]	; 12270 <__assert_fail@plt+0x1284>
   12204:	mov	r4, r7
   12208:	mov	r2, #5
   1220c:	ldr	r1, [pc, #128]	; 12294 <__assert_fail@plt+0x12a8>
   12210:	mov	r0, #0
   12214:	bl	10e00 <dcgettext@plt>
   12218:	ldr	r1, [r6]
   1221c:	bl	10d58 <fputs_unlocked@plt>
   12220:	b	12120 <__assert_fail@plt+0x1134>
   12224:	andeq	r8, r2, r8, asr r1
   12228:	muleq	r1, ip, r7
   1222c:	muleq	r2, r8, r1
   12230:	andeq	r6, r1, r4, asr #15
   12234:	andeq	r8, r2, r4, ror #2
   12238:	andeq	r6, r1, ip, lsr r6
   1223c:	andeq	r6, r1, ip, ror #15
   12240:	muleq	r1, ip, r8
   12244:	andeq	r6, r1, r8, ror #17
   12248:	andeq	r6, r1, r4, ror r9
   1224c:	andeq	r6, r1, ip, ror #20
   12250:	andeq	r6, r1, r8, lsr #21
   12254:	andeq	r6, r1, r0, asr #22
   12258:	strdeq	r6, [r1], -r4
   1225c:	andeq	r6, r1, r4, lsr ip
   12260:	andeq	r6, r1, r8, ror ip
   12264:	andeq	r6, r1, r8, lsr #25
   12268:	andeq	r6, r1, r0, ror #25
   1226c:	andeq	r6, r1, r8, asr sp
   12270:	muleq	r1, r4, r7
   12274:	andeq	r6, r1, r8, ror #27
   12278:	andeq	r6, r1, r0, lsl #28
   1227c:	andeq	r6, r1, r8, lsr #28
   12280:	andeq	r6, r1, r8, lsr lr
   12284:	andeq	r6, r1, r4, lsl #29
   12288:	andeq	r6, r1, r0, lsr #29
   1228c:	muleq	r1, r8, r8
   12290:	muleq	r1, r8, r0
   12294:	andeq	r6, r1, ip, lsr lr
   12298:	mov	r0, #1
   1229c:	b	11eb8 <__assert_fail@plt+0xecc>
   122a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122a4:	mov	r5, r1
   122a8:	sub	sp, sp, #12
   122ac:	mov	r4, r2
   122b0:	str	r2, [sp]
   122b4:	mov	r7, r3
   122b8:	mov	sl, r0
   122bc:	bl	10f08 <strlen@plt>
   122c0:	ldr	fp, [r5]
   122c4:	cmp	fp, #0
   122c8:	beq	12390 <__assert_fail@plt+0x13a4>
   122cc:	mov	r3, #0
   122d0:	mov	r8, r0
   122d4:	str	r3, [sp, #4]
   122d8:	mov	r6, r3
   122dc:	mvn	r9, #0
   122e0:	b	1230c <__assert_fail@plt+0x1320>
   122e4:	bl	10de8 <memcmp@plt>
   122e8:	ldr	r3, [sp, #4]
   122ec:	cmp	r0, #0
   122f0:	movne	r3, #1
   122f4:	str	r3, [sp, #4]
   122f8:	ldr	fp, [r5, #4]!
   122fc:	add	r6, r6, #1
   12300:	cmp	fp, #0
   12304:	add	r4, r4, r7
   12308:	beq	12368 <__assert_fail@plt+0x137c>
   1230c:	mov	r2, r8
   12310:	mov	r1, sl
   12314:	mov	r0, fp
   12318:	bl	10fc8 <strncmp@plt>
   1231c:	cmp	r0, #0
   12320:	mov	r0, fp
   12324:	bne	122f8 <__assert_fail@plt+0x130c>
   12328:	bl	10f08 <strlen@plt>
   1232c:	ldr	r3, [sp]
   12330:	mov	r2, r7
   12334:	mov	r1, r4
   12338:	cmp	r8, r0
   1233c:	mla	r0, r7, r9, r3
   12340:	beq	12380 <__assert_fail@plt+0x1394>
   12344:	cmn	r9, #1
   12348:	moveq	r9, r6
   1234c:	beq	122f8 <__assert_fail@plt+0x130c>
   12350:	ldr	r3, [sp]
   12354:	cmp	r3, #0
   12358:	bne	122e4 <__assert_fail@plt+0x12f8>
   1235c:	mov	r3, #1
   12360:	str	r3, [sp, #4]
   12364:	b	122f8 <__assert_fail@plt+0x130c>
   12368:	ldr	r3, [sp, #4]
   1236c:	cmp	r3, #0
   12370:	mvnne	r9, #1
   12374:	mov	r0, r9
   12378:	add	sp, sp, #12
   1237c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12380:	mov	r9, r6
   12384:	mov	r0, r9
   12388:	add	sp, sp, #12
   1238c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12390:	mvn	r9, #0
   12394:	b	12374 <__assert_fail@plt+0x1388>
   12398:	push	{r4, r5, r6, lr}
   1239c:	mov	r6, r0
   123a0:	ldr	r0, [r1]
   123a4:	cmp	r0, #0
   123a8:	beq	123e0 <__assert_fail@plt+0x13f4>
   123ac:	mov	r4, r1
   123b0:	mov	r5, #0
   123b4:	b	123c8 <__assert_fail@plt+0x13dc>
   123b8:	ldr	r0, [r4, #4]!
   123bc:	add	r5, r5, #1
   123c0:	cmp	r0, #0
   123c4:	beq	123e0 <__assert_fail@plt+0x13f4>
   123c8:	mov	r1, r6
   123cc:	bl	10d70 <strcmp@plt>
   123d0:	cmp	r0, #0
   123d4:	bne	123b8 <__assert_fail@plt+0x13cc>
   123d8:	mov	r0, r5
   123dc:	pop	{r4, r5, r6, pc}
   123e0:	mvn	r0, #0
   123e4:	pop	{r4, r5, r6, pc}
   123e8:	cmn	r2, #1
   123ec:	push	{r4, r5, r6, lr}
   123f0:	mov	r2, #5
   123f4:	sub	sp, sp, #8
   123f8:	mov	r4, r1
   123fc:	mov	r5, r0
   12400:	ldreq	r1, [pc, #76]	; 12454 <__assert_fail@plt+0x1468>
   12404:	ldrne	r1, [pc, #76]	; 12458 <__assert_fail@plt+0x146c>
   12408:	mov	r0, #0
   1240c:	bl	10e00 <dcgettext@plt>
   12410:	mov	r2, r4
   12414:	mov	r1, #8
   12418:	mov	r6, r0
   1241c:	mov	r0, #0
   12420:	bl	14934 <__assert_fail@plt+0x3948>
   12424:	mov	r1, r5
   12428:	mov	r4, r0
   1242c:	mov	r0, #1
   12430:	bl	14bd0 <__assert_fail@plt+0x3be4>
   12434:	mov	r1, #0
   12438:	mov	r3, r4
   1243c:	mov	r2, r6
   12440:	str	r0, [sp]
   12444:	mov	r0, r1
   12448:	bl	10e78 <error@plt>
   1244c:	add	sp, sp, #8
   12450:	pop	{r4, r5, r6, pc}
   12454:			; <UNDEFINED> instruction: 0x000171b0
   12458:	andeq	r7, r1, ip, asr #3
   1245c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12460:	mov	r6, r0
   12464:	ldr	r9, [pc, #232]	; 12554 <__assert_fail@plt+0x1568>
   12468:	mov	r4, r1
   1246c:	mov	r7, r2
   12470:	ldr	r1, [pc, #224]	; 12558 <__assert_fail@plt+0x156c>
   12474:	mov	r2, #5
   12478:	mov	r0, #0
   1247c:	bl	10e00 <dcgettext@plt>
   12480:	ldr	r1, [r9]
   12484:	bl	10d58 <fputs_unlocked@plt>
   12488:	ldr	fp, [r6]
   1248c:	cmp	fp, #0
   12490:	movne	r8, #0
   12494:	movne	r5, r8
   12498:	movne	sl, #1
   1249c:	bne	124dc <__assert_fail@plt+0x14f0>
   124a0:	b	12520 <__assert_fail@plt+0x1534>
   124a4:	mov	r0, fp
   124a8:	ldr	r8, [r9]
   124ac:	bl	14be0 <__assert_fail@plt+0x3bf4>
   124b0:	ldr	r2, [pc, #164]	; 1255c <__assert_fail@plt+0x1570>
   124b4:	mov	r1, sl
   124b8:	mov	r3, r0
   124bc:	mov	r0, r8
   124c0:	bl	10f5c <__fprintf_chk@plt>
   124c4:	mov	r8, r4
   124c8:	ldr	fp, [r6, #4]!
   124cc:	add	r5, r5, #1
   124d0:	cmp	fp, #0
   124d4:	add	r4, r4, r7
   124d8:	beq	12520 <__assert_fail@plt+0x1534>
   124dc:	cmp	r5, #0
   124e0:	mov	r1, r4
   124e4:	mov	r2, r7
   124e8:	mov	r0, r8
   124ec:	beq	124a4 <__assert_fail@plt+0x14b8>
   124f0:	bl	10de8 <memcmp@plt>
   124f4:	cmp	r0, #0
   124f8:	bne	124a4 <__assert_fail@plt+0x14b8>
   124fc:	mov	r0, fp
   12500:	ldr	fp, [r9]
   12504:	bl	14be0 <__assert_fail@plt+0x3bf4>
   12508:	ldr	r2, [pc, #80]	; 12560 <__assert_fail@plt+0x1574>
   1250c:	mov	r1, sl
   12510:	mov	r3, r0
   12514:	mov	r0, fp
   12518:	bl	10f5c <__fprintf_chk@plt>
   1251c:	b	124c8 <__assert_fail@plt+0x14dc>
   12520:	ldr	r0, [r9]
   12524:	ldr	r3, [r0, #20]
   12528:	ldr	r2, [r0, #24]
   1252c:	cmp	r3, r2
   12530:	bcs	12548 <__assert_fail@plt+0x155c>
   12534:	add	r1, r3, #1
   12538:	mov	r2, #10
   1253c:	str	r1, [r0, #20]
   12540:	strb	r2, [r3]
   12544:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12548:	mov	r1, #10
   1254c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12550:	b	10f8c <__overflow@plt>
   12554:	andeq	r8, r2, r8, asr r1
   12558:	andeq	r7, r1, ip, ror #3
   1255c:	andeq	r7, r1, r4, lsl #4
   12560:	andeq	r7, r1, ip, lsl #4
   12564:	push	{r4, r5, r6, r7, r8, lr}
   12568:	mov	r7, r0
   1256c:	ldrb	ip, [sp, #32]
   12570:	mov	r5, r1
   12574:	mov	r4, r2
   12578:	cmp	ip, #0
   1257c:	mov	r6, r3
   12580:	beq	125d0 <__assert_fail@plt+0x15e4>
   12584:	ldr	r3, [sp, #24]
   12588:	mov	r2, r6
   1258c:	mov	r1, r4
   12590:	mov	r0, r5
   12594:	bl	122a0 <__assert_fail@plt+0x12b4>
   12598:	cmp	r0, #0
   1259c:	popge	{r4, r5, r6, r7, r8, pc}
   125a0:	mov	r2, r0
   125a4:	mov	r1, r5
   125a8:	mov	r0, r7
   125ac:	bl	123e8 <__assert_fail@plt+0x13fc>
   125b0:	mov	r0, r4
   125b4:	ldr	r2, [sp, #24]
   125b8:	mov	r1, r6
   125bc:	bl	1245c <__assert_fail@plt+0x1470>
   125c0:	ldr	r3, [sp, #28]
   125c4:	blx	r3
   125c8:	mvn	r0, #0
   125cc:	pop	{r4, r5, r6, r7, r8, pc}
   125d0:	mov	r1, r2
   125d4:	mov	r0, r5
   125d8:	bl	12398 <__assert_fail@plt+0x13ac>
   125dc:	cmp	r0, #0
   125e0:	popge	{r4, r5, r6, r7, r8, pc}
   125e4:	b	125a0 <__assert_fail@plt+0x15b4>
   125e8:	push	{r4, r5, r6, r7, r8, lr}
   125ec:	ldr	r7, [r1]
   125f0:	cmp	r7, #0
   125f4:	beq	12634 <__assert_fail@plt+0x1648>
   125f8:	mov	r6, r3
   125fc:	mov	r8, r0
   12600:	mov	r4, r2
   12604:	mov	r5, r1
   12608:	b	12618 <__assert_fail@plt+0x162c>
   1260c:	ldr	r7, [r5, #4]!
   12610:	cmp	r7, #0
   12614:	beq	12634 <__assert_fail@plt+0x1648>
   12618:	mov	r1, r4
   1261c:	mov	r2, r6
   12620:	mov	r0, r8
   12624:	bl	10de8 <memcmp@plt>
   12628:	add	r4, r4, r6
   1262c:	cmp	r0, #0
   12630:	bne	1260c <__assert_fail@plt+0x1620>
   12634:	mov	r0, r7
   12638:	pop	{r4, r5, r6, r7, r8, pc}
   1263c:	ldr	r3, [pc, #4]	; 12648 <__assert_fail@plt+0x165c>
   12640:	str	r0, [r3]
   12644:	bx	lr
   12648:	muleq	r2, r0, r1
   1264c:	ldr	r3, [pc, #4]	; 12658 <__assert_fail@plt+0x166c>
   12650:	strb	r0, [r3, #4]
   12654:	bx	lr
   12658:	muleq	r2, r0, r1
   1265c:	ldr	r3, [pc, #192]	; 12724 <__assert_fail@plt+0x1738>
   12660:	push	{r4, r5, r6, lr}
   12664:	sub	sp, sp, #8
   12668:	ldr	r0, [r3]
   1266c:	bl	15db0 <__assert_fail@plt+0x4dc4>
   12670:	cmp	r0, #0
   12674:	beq	12698 <__assert_fail@plt+0x16ac>
   12678:	ldr	r4, [pc, #168]	; 12728 <__assert_fail@plt+0x173c>
   1267c:	ldrb	r3, [r4, #4]
   12680:	cmp	r3, #0
   12684:	beq	126b4 <__assert_fail@plt+0x16c8>
   12688:	bl	10f20 <__errno_location@plt>
   1268c:	ldr	r3, [r0]
   12690:	cmp	r3, #32
   12694:	bne	126b4 <__assert_fail@plt+0x16c8>
   12698:	ldr	r3, [pc, #140]	; 1272c <__assert_fail@plt+0x1740>
   1269c:	ldr	r0, [r3]
   126a0:	bl	15db0 <__assert_fail@plt+0x4dc4>
   126a4:	cmp	r0, #0
   126a8:	bne	126fc <__assert_fail@plt+0x1710>
   126ac:	add	sp, sp, #8
   126b0:	pop	{r4, r5, r6, pc}
   126b4:	mov	r2, #5
   126b8:	ldr	r1, [pc, #112]	; 12730 <__assert_fail@plt+0x1744>
   126bc:	mov	r0, #0
   126c0:	bl	10e00 <dcgettext@plt>
   126c4:	ldr	r4, [r4]
   126c8:	cmp	r4, #0
   126cc:	mov	r5, r0
   126d0:	beq	12708 <__assert_fail@plt+0x171c>
   126d4:	bl	10f20 <__errno_location@plt>
   126d8:	ldr	r6, [r0]
   126dc:	mov	r0, r4
   126e0:	bl	14a48 <__assert_fail@plt+0x3a5c>
   126e4:	mov	r1, r6
   126e8:	str	r5, [sp]
   126ec:	ldr	r2, [pc, #64]	; 12734 <__assert_fail@plt+0x1748>
   126f0:	mov	r3, r0
   126f4:	mov	r0, #0
   126f8:	bl	10e78 <error@plt>
   126fc:	ldr	r3, [pc, #52]	; 12738 <__assert_fail@plt+0x174c>
   12700:	ldr	r0, [r3]
   12704:	bl	10dac <_exit@plt>
   12708:	bl	10f20 <__errno_location@plt>
   1270c:	mov	r3, r5
   12710:	ldr	r2, [pc, #36]	; 1273c <__assert_fail@plt+0x1750>
   12714:	ldr	r1, [r0]
   12718:	mov	r0, r4
   1271c:	bl	10e78 <error@plt>
   12720:	b	126fc <__assert_fail@plt+0x1710>
   12724:	andeq	r8, r2, r4, ror #2
   12728:	muleq	r2, r0, r1
   1272c:	andeq	r8, r2, r8, asr r1
   12730:	andeq	r7, r1, r4, lsl r2
   12734:	andeq	r6, r1, r4, lsl #15
   12738:	andeq	r8, r2, r4, lsl #2
   1273c:	andeq	r6, r1, r8, lsl #15
   12740:	push	{r4, r5}
   12744:	pop	{r4, r5}
   12748:	b	10d88 <posix_fadvise64@plt>
   1274c:	cmp	r0, #0
   12750:	bxeq	lr
   12754:	push	{r4, lr}
   12758:	sub	sp, sp, #16
   1275c:	mov	r4, r1
   12760:	bl	10f50 <fileno@plt>
   12764:	mov	r2, #0
   12768:	mov	r3, #0
   1276c:	str	r4, [sp, #8]
   12770:	strd	r2, [sp]
   12774:	bl	10d88 <posix_fadvise64@plt>
   12778:	add	sp, sp, #16
   1277c:	pop	{r4, pc}
   12780:	push	{r4, r5, lr}
   12784:	sub	sp, sp, #12
   12788:	mov	r4, r0
   1278c:	bl	10f50 <fileno@plt>
   12790:	cmp	r0, #0
   12794:	mov	r0, r4
   12798:	blt	12814 <__assert_fail@plt+0x1828>
   1279c:	bl	10eb4 <__freading@plt>
   127a0:	cmp	r0, #0
   127a4:	bne	127e0 <__assert_fail@plt+0x17f4>
   127a8:	mov	r0, r4
   127ac:	bl	12820 <__assert_fail@plt+0x1834>
   127b0:	cmp	r0, #0
   127b4:	beq	12810 <__assert_fail@plt+0x1824>
   127b8:	bl	10f20 <__errno_location@plt>
   127bc:	mov	r5, r0
   127c0:	mov	r0, r4
   127c4:	ldr	r4, [r5]
   127c8:	bl	10f68 <fclose@plt>
   127cc:	cmp	r4, #0
   127d0:	mvnne	r0, #0
   127d4:	strne	r4, [r5]
   127d8:	add	sp, sp, #12
   127dc:	pop	{r4, r5, pc}
   127e0:	mov	r0, r4
   127e4:	bl	10f50 <fileno@plt>
   127e8:	mov	r3, #1
   127ec:	str	r3, [sp]
   127f0:	mov	r2, #0
   127f4:	mov	r3, #0
   127f8:	bl	10e48 <lseek64@plt>
   127fc:	mvn	r3, #0
   12800:	mvn	r2, #0
   12804:	cmp	r1, r3
   12808:	cmpeq	r0, r2
   1280c:	bne	127a8 <__assert_fail@plt+0x17bc>
   12810:	mov	r0, r4
   12814:	add	sp, sp, #12
   12818:	pop	{r4, r5, lr}
   1281c:	b	10f68 <fclose@plt>
   12820:	push	{r4, lr}
   12824:	subs	r4, r0, #0
   12828:	sub	sp, sp, #8
   1282c:	beq	12848 <__assert_fail@plt+0x185c>
   12830:	bl	10eb4 <__freading@plt>
   12834:	cmp	r0, #0
   12838:	beq	12848 <__assert_fail@plt+0x185c>
   1283c:	ldr	r3, [r4]
   12840:	tst	r3, #256	; 0x100
   12844:	bne	12858 <__assert_fail@plt+0x186c>
   12848:	mov	r0, r4
   1284c:	add	sp, sp, #8
   12850:	pop	{r4, lr}
   12854:	b	10d94 <fflush@plt>
   12858:	mov	r3, #1
   1285c:	str	r3, [sp]
   12860:	mov	r2, #0
   12864:	mov	r3, #0
   12868:	mov	r0, r4
   1286c:	bl	12a9c <__assert_fail@plt+0x1ab0>
   12870:	mov	r0, r4
   12874:	add	sp, sp, #8
   12878:	pop	{r4, lr}
   1287c:	b	10d94 <fflush@plt>
   12880:	push	{r4, r5, lr}
   12884:	sub	sp, sp, #12
   12888:	mov	r5, r0
   1288c:	bl	10f20 <__errno_location@plt>
   12890:	mov	r2, #0
   12894:	mov	r4, r0
   12898:	ldr	r3, [r0]
   1289c:	str	r2, [r4]
   128a0:	mov	r0, r5
   128a4:	str	r3, [sp]
   128a8:	str	r3, [sp, #4]
   128ac:	bl	10da0 <free@plt>
   128b0:	ldr	r3, [r4]
   128b4:	add	r2, sp, #8
   128b8:	cmp	r3, #0
   128bc:	moveq	r3, #4
   128c0:	movne	r3, #0
   128c4:	add	r3, r2, r3
   128c8:	ldr	r3, [r3, #-8]
   128cc:	str	r3, [r4]
   128d0:	add	sp, sp, #12
   128d4:	pop	{r4, r5, pc}
   128d8:	push	{r4, lr}
   128dc:	mov	r1, #0
   128e0:	mov	r4, r0
   128e4:	ldr	r0, [pc, #56]	; 12924 <__assert_fail@plt+0x1938>
   128e8:	bl	10e84 <open64@plt>
   128ec:	cmp	r4, r0
   128f0:	moveq	r3, #1
   128f4:	beq	1291c <__assert_fail@plt+0x1930>
   128f8:	cmp	r0, #0
   128fc:	mov	r3, r0
   12900:	movlt	r3, #0
   12904:	blt	1291c <__assert_fail@plt+0x1930>
   12908:	bl	10fe0 <close@plt>
   1290c:	bl	10f20 <__errno_location@plt>
   12910:	mov	r3, #0
   12914:	mov	r2, #9
   12918:	str	r2, [r0]
   1291c:	mov	r0, r3
   12920:	pop	{r4, pc}
   12924:	andeq	r7, r1, r0, lsr #4
   12928:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1292c:	mov	r9, r0
   12930:	mov	r0, r2
   12934:	mov	r7, r2
   12938:	mov	sl, r1
   1293c:	bl	10f50 <fileno@plt>
   12940:	cmp	r0, #1
   12944:	beq	12a74 <__assert_fail@plt+0x1a88>
   12948:	cmp	r0, #2
   1294c:	beq	12a6c <__assert_fail@plt+0x1a80>
   12950:	cmp	r0, #0
   12954:	beq	12a18 <__assert_fail@plt+0x1a2c>
   12958:	mov	r1, #2
   1295c:	mov	r0, r1
   12960:	bl	10e0c <dup2@plt>
   12964:	subs	r4, r0, #2
   12968:	movne	r4, #1
   1296c:	mov	r1, #1
   12970:	mov	r0, r1
   12974:	bl	10e0c <dup2@plt>
   12978:	mov	r1, #0
   1297c:	subs	r8, r0, #1
   12980:	mov	r0, r1
   12984:	movne	r8, #1
   12988:	bl	10e0c <dup2@plt>
   1298c:	subs	r6, r0, #0
   12990:	beq	129b0 <__assert_fail@plt+0x19c4>
   12994:	mov	r0, #0
   12998:	bl	128d8 <__assert_fail@plt+0x18ec>
   1299c:	cmp	r0, #0
   129a0:	mov	r6, r0
   129a4:	mov	r5, r0
   129a8:	moveq	r6, #1
   129ac:	beq	129e4 <__assert_fail@plt+0x19f8>
   129b0:	cmp	r8, #0
   129b4:	bne	12a58 <__assert_fail@plt+0x1a6c>
   129b8:	cmp	r4, #0
   129bc:	beq	129d0 <__assert_fail@plt+0x19e4>
   129c0:	mov	r0, #2
   129c4:	bl	128d8 <__assert_fail@plt+0x18ec>
   129c8:	subs	r5, r0, #0
   129cc:	beq	12a40 <__assert_fail@plt+0x1a54>
   129d0:	mov	r2, r7
   129d4:	mov	r1, sl
   129d8:	mov	r0, r9
   129dc:	bl	10ed8 <freopen64@plt>
   129e0:	mov	r5, r0
   129e4:	bl	10f20 <__errno_location@plt>
   129e8:	cmp	r4, #0
   129ec:	mov	r7, r0
   129f0:	ldr	r4, [r0]
   129f4:	bne	12a4c <__assert_fail@plt+0x1a60>
   129f8:	cmp	r8, #0
   129fc:	bne	12a34 <__assert_fail@plt+0x1a48>
   12a00:	cmp	r6, #0
   12a04:	bne	12a28 <__assert_fail@plt+0x1a3c>
   12a08:	cmp	r5, #0
   12a0c:	streq	r4, [r7]
   12a10:	mov	r0, r5
   12a14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12a18:	mov	r4, r0
   12a1c:	mov	r8, r0
   12a20:	mov	r6, r0
   12a24:	b	129d0 <__assert_fail@plt+0x19e4>
   12a28:	mov	r0, #0
   12a2c:	bl	10fe0 <close@plt>
   12a30:	b	12a08 <__assert_fail@plt+0x1a1c>
   12a34:	mov	r0, #1
   12a38:	bl	10fe0 <close@plt>
   12a3c:	b	12a00 <__assert_fail@plt+0x1a14>
   12a40:	bl	10f20 <__errno_location@plt>
   12a44:	ldr	r4, [r0]
   12a48:	mov	r7, r0
   12a4c:	mov	r0, #2
   12a50:	bl	10fe0 <close@plt>
   12a54:	b	129f8 <__assert_fail@plt+0x1a0c>
   12a58:	mov	r0, #1
   12a5c:	bl	128d8 <__assert_fail@plt+0x18ec>
   12a60:	cmp	r0, #0
   12a64:	bne	129b8 <__assert_fail@plt+0x19cc>
   12a68:	b	129e0 <__assert_fail@plt+0x19f4>
   12a6c:	mov	r4, #0
   12a70:	b	1296c <__assert_fail@plt+0x1980>
   12a74:	mov	r1, #0
   12a78:	mov	r0, r1
   12a7c:	bl	10e0c <dup2@plt>
   12a80:	subs	r4, r0, #0
   12a84:	moveq	r8, r4
   12a88:	moveq	r6, r4
   12a8c:	beq	129d0 <__assert_fail@plt+0x19e4>
   12a90:	mov	r4, #0
   12a94:	mov	r8, r4
   12a98:	b	12994 <__assert_fail@plt+0x19a8>
   12a9c:	push	{r4, r5, r6, r7, r8, lr}
   12aa0:	sub	sp, sp, #8
   12aa4:	ldmib	r0, {ip, lr}
   12aa8:	mov	r4, r0
   12aac:	ldr	r5, [sp, #32]
   12ab0:	cmp	lr, ip
   12ab4:	beq	12acc <__assert_fail@plt+0x1ae0>
   12ab8:	str	r5, [sp, #32]
   12abc:	mov	r0, r4
   12ac0:	add	sp, sp, #8
   12ac4:	pop	{r4, r5, r6, r7, r8, lr}
   12ac8:	b	10f74 <fseeko64@plt>
   12acc:	ldr	lr, [r0, #20]
   12ad0:	ldr	ip, [r0, #16]
   12ad4:	cmp	lr, ip
   12ad8:	bne	12ab8 <__assert_fail@plt+0x1acc>
   12adc:	ldr	r8, [r0, #36]	; 0x24
   12ae0:	cmp	r8, #0
   12ae4:	bne	12ab8 <__assert_fail@plt+0x1acc>
   12ae8:	mov	r6, r2
   12aec:	mov	r7, r3
   12af0:	bl	10f50 <fileno@plt>
   12af4:	mov	r2, r6
   12af8:	mov	r3, r7
   12afc:	str	r5, [sp]
   12b00:	bl	10e48 <lseek64@plt>
   12b04:	mvn	r3, #0
   12b08:	mvn	r2, #0
   12b0c:	cmp	r1, r3
   12b10:	cmpeq	r0, r2
   12b14:	beq	12b34 <__assert_fail@plt+0x1b48>
   12b18:	ldr	r3, [r4]
   12b1c:	strd	r0, [r4, #80]	; 0x50
   12b20:	mov	r0, r8
   12b24:	bic	r3, r3, #16
   12b28:	str	r3, [r4]
   12b2c:	add	sp, sp, #8
   12b30:	pop	{r4, r5, r6, r7, r8, pc}
   12b34:	mvn	r0, #0
   12b38:	b	12b2c <__assert_fail@plt+0x1b40>
   12b3c:	mov	r3, #0
   12b40:	str	r3, [r0]
   12b44:	str	r3, [r0, #4]
   12b48:	str	r3, [r0, #8]
   12b4c:	bx	lr
   12b50:	ldr	ip, [r1]
   12b54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b58:	tst	ip, #16
   12b5c:	ldr	fp, [r0, #8]
   12b60:	ldr	r3, [r0]
   12b64:	sub	sp, sp, #12
   12b68:	add	r8, fp, r3
   12b6c:	bne	12c50 <__assert_fail@plt+0x1c64>
   12b70:	mov	r6, r2
   12b74:	mov	r7, r0
   12b78:	mov	r5, r1
   12b7c:	mov	r4, fp
   12b80:	mov	r9, #1
   12b84:	b	12bac <__assert_fail@plt+0x1bc0>
   12b88:	add	r1, r3, #1
   12b8c:	str	r1, [r5, #4]
   12b90:	ldrb	sl, [r3]
   12b94:	cmp	r4, r8
   12b98:	beq	12bfc <__assert_fail@plt+0x1c10>
   12b9c:	cmp	sl, r6
   12ba0:	strb	sl, [r4]
   12ba4:	add	r4, r4, #1
   12ba8:	beq	12c3c <__assert_fail@plt+0x1c50>
   12bac:	ldr	r3, [r5, #4]
   12bb0:	ldr	r1, [r5, #8]
   12bb4:	cmp	r3, r1
   12bb8:	bcc	12b88 <__assert_fail@plt+0x1b9c>
   12bbc:	mov	r0, r5
   12bc0:	bl	10f80 <__uflow@plt>
   12bc4:	cmn	r0, #1
   12bc8:	mov	sl, r0
   12bcc:	bne	12b94 <__assert_fail@plt+0x1ba8>
   12bd0:	cmp	fp, r4
   12bd4:	beq	12c50 <__assert_fail@plt+0x1c64>
   12bd8:	ldr	r3, [r5]
   12bdc:	tst	r3, #32
   12be0:	bne	12c50 <__assert_fail@plt+0x1c64>
   12be4:	ldrb	r3, [r4, #-1]
   12be8:	cmp	r3, r6
   12bec:	beq	12c3c <__assert_fail@plt+0x1c50>
   12bf0:	cmp	r4, r8
   12bf4:	mov	sl, r6
   12bf8:	bne	12b9c <__assert_fail@plt+0x1bb0>
   12bfc:	str	r9, [sp]
   12c00:	mov	r0, fp
   12c04:	mov	r2, #1
   12c08:	mvn	r3, #0
   12c0c:	mov	r1, r7
   12c10:	ldr	r4, [r7]
   12c14:	bl	152a4 <__assert_fail@plt+0x42b8>
   12c18:	ldr	r2, [r7]
   12c1c:	cmp	sl, r6
   12c20:	add	r4, r0, r4
   12c24:	str	r0, [r7, #8]
   12c28:	mov	fp, r0
   12c2c:	strb	sl, [r4]
   12c30:	add	r8, r0, r2
   12c34:	add	r4, r4, #1
   12c38:	bne	12bac <__assert_fail@plt+0x1bc0>
   12c3c:	sub	r4, r4, fp
   12c40:	mov	r0, r7
   12c44:	str	r4, [r7, #4]
   12c48:	add	sp, sp, #12
   12c4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c50:	mov	r0, #0
   12c54:	add	sp, sp, #12
   12c58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c5c:	mov	r2, #10
   12c60:	b	12b50 <__assert_fail@plt+0x1b64>
   12c64:	ldr	r0, [r0, #8]
   12c68:	b	12880 <__assert_fail@plt+0x1894>
   12c6c:	push	{r4, r5, r6, lr}
   12c70:	subs	r6, r2, #0
   12c74:	beq	12cb8 <__assert_fail@plt+0x1ccc>
   12c78:	mov	r4, r0
   12c7c:	mov	r5, r1
   12c80:	bl	10ec0 <__ctype_toupper_loc@plt>
   12c84:	mov	r3, r4
   12c88:	sub	r1, r5, #1
   12c8c:	add	r4, r4, r6
   12c90:	ldr	ip, [r0]
   12c94:	ldrb	lr, [r3], #1
   12c98:	ldrb	r2, [r1, #1]!
   12c9c:	ldr	r0, [ip, lr, lsl #2]
   12ca0:	ldr	r2, [ip, r2, lsl #2]
   12ca4:	subs	r0, r0, r2
   12ca8:	popne	{r4, r5, r6, pc}
   12cac:	cmp	r4, r3
   12cb0:	bne	12c94 <__assert_fail@plt+0x1ca8>
   12cb4:	pop	{r4, r5, r6, pc}
   12cb8:	mov	r0, r6
   12cbc:	pop	{r4, r5, r6, pc}
   12cc0:	push	{lr}		; (str lr, [sp, #-4]!)
   12cc4:	sub	sp, sp, #12
   12cc8:	ldr	r0, [pc, #72]	; 12d18 <__assert_fail@plt+0x1d2c>
   12ccc:	bl	10e90 <getenv@plt>
   12cd0:	subs	r3, r0, #0
   12cd4:	beq	12ce4 <__assert_fail@plt+0x1cf8>
   12cd8:	ldrb	r3, [r3]
   12cdc:	cmp	r3, #0
   12ce0:	bne	12cf0 <__assert_fail@plt+0x1d04>
   12ce4:	ldr	r0, [pc, #48]	; 12d1c <__assert_fail@plt+0x1d30>
   12ce8:	add	sp, sp, #12
   12cec:	pop	{pc}		; (ldr pc, [sp], #4)
   12cf0:	mov	r2, #10
   12cf4:	add	r1, sp, #4
   12cf8:	bl	10d7c <strtol@plt>
   12cfc:	ldr	r2, [sp, #4]
   12d00:	ldr	r3, [pc, #20]	; 12d1c <__assert_fail@plt+0x1d30>
   12d04:	ldrb	r2, [r2]
   12d08:	cmp	r2, #0
   12d0c:	movne	r0, r3
   12d10:	add	sp, sp, #12
   12d14:	pop	{pc}		; (ldr pc, [sp], #4)
   12d18:	andeq	r7, r1, ip, lsr #4
   12d1c:	andeq	r1, r3, r9, rrx
   12d20:	push	{r4, r5, r6, lr}
   12d24:	subs	r4, r0, #0
   12d28:	beq	12d9c <__assert_fail@plt+0x1db0>
   12d2c:	mov	r1, #47	; 0x2f
   12d30:	bl	10fa4 <strrchr@plt>
   12d34:	subs	r5, r0, #0
   12d38:	beq	12d88 <__assert_fail@plt+0x1d9c>
   12d3c:	add	r6, r5, #1
   12d40:	sub	r3, r6, r4
   12d44:	cmp	r3, #6
   12d48:	ble	12d88 <__assert_fail@plt+0x1d9c>
   12d4c:	mov	r2, #7
   12d50:	ldr	r1, [pc, #96]	; 12db8 <__assert_fail@plt+0x1dcc>
   12d54:	sub	r0, r5, #6
   12d58:	bl	10fc8 <strncmp@plt>
   12d5c:	cmp	r0, #0
   12d60:	bne	12d88 <__assert_fail@plt+0x1d9c>
   12d64:	mov	r2, #3
   12d68:	ldr	r1, [pc, #76]	; 12dbc <__assert_fail@plt+0x1dd0>
   12d6c:	mov	r0, r6
   12d70:	bl	10fc8 <strncmp@plt>
   12d74:	cmp	r0, #0
   12d78:	movne	r4, r6
   12d7c:	ldreq	r3, [pc, #60]	; 12dc0 <__assert_fail@plt+0x1dd4>
   12d80:	addeq	r4, r5, #4
   12d84:	streq	r4, [r3]
   12d88:	ldr	r2, [pc, #52]	; 12dc4 <__assert_fail@plt+0x1dd8>
   12d8c:	ldr	r3, [pc, #52]	; 12dc8 <__assert_fail@plt+0x1ddc>
   12d90:	str	r4, [r2]
   12d94:	str	r4, [r3]
   12d98:	pop	{r4, r5, r6, pc}
   12d9c:	ldr	r3, [pc, #40]	; 12dcc <__assert_fail@plt+0x1de0>
   12da0:	mov	r2, #55	; 0x37
   12da4:	mov	r1, #1
   12da8:	ldr	r3, [r3]
   12dac:	ldr	r0, [pc, #28]	; 12dd0 <__assert_fail@plt+0x1de4>
   12db0:	bl	10e3c <fwrite@plt>
   12db4:	bl	10fd4 <abort@plt>
   12db8:	andeq	r7, r1, r4, ror r2
   12dbc:	andeq	r7, r1, ip, ror r2
   12dc0:	andeq	r8, r2, r8, asr #2
   12dc4:	muleq	r2, r8, r1
   12dc8:	andeq	r8, r2, ip, asr #2
   12dcc:	andeq	r8, r2, r8, asr r1
   12dd0:	andeq	r7, r1, ip, lsr r2
   12dd4:	push	{r4, r5, r6, lr}
   12dd8:	mov	r2, #48	; 0x30
   12ddc:	mov	r4, r1
   12de0:	mov	r1, #0
   12de4:	mov	r5, r0
   12de8:	bl	10f38 <memset@plt>
   12dec:	cmp	r4, #10
   12df0:	beq	12e00 <__assert_fail@plt+0x1e14>
   12df4:	str	r4, [r5]
   12df8:	mov	r0, r5
   12dfc:	pop	{r4, r5, r6, pc}
   12e00:	bl	10fd4 <abort@plt>
   12e04:	push	{r4, r5, r6, lr}
   12e08:	mov	r4, r0
   12e0c:	mov	r5, r1
   12e10:	bl	15e2c <__assert_fail@plt+0x4e40>
   12e14:	ldrb	r3, [r0]
   12e18:	bic	r3, r3, #32
   12e1c:	cmp	r3, #85	; 0x55
   12e20:	bne	12e80 <__assert_fail@plt+0x1e94>
   12e24:	ldrb	r3, [r0, #1]
   12e28:	bic	r3, r3, #32
   12e2c:	cmp	r3, #84	; 0x54
   12e30:	bne	12ebc <__assert_fail@plt+0x1ed0>
   12e34:	ldrb	r3, [r0, #2]
   12e38:	bic	r3, r3, #32
   12e3c:	cmp	r3, #70	; 0x46
   12e40:	bne	12ebc <__assert_fail@plt+0x1ed0>
   12e44:	ldrb	r3, [r0, #3]
   12e48:	cmp	r3, #45	; 0x2d
   12e4c:	bne	12ebc <__assert_fail@plt+0x1ed0>
   12e50:	ldrb	r3, [r0, #4]
   12e54:	cmp	r3, #56	; 0x38
   12e58:	bne	12ebc <__assert_fail@plt+0x1ed0>
   12e5c:	ldrb	r3, [r0, #5]
   12e60:	cmp	r3, #0
   12e64:	bne	12ebc <__assert_fail@plt+0x1ed0>
   12e68:	ldrb	r2, [r4]
   12e6c:	ldr	r3, [pc, #152]	; 12f0c <__assert_fail@plt+0x1f20>
   12e70:	ldr	r0, [pc, #152]	; 12f10 <__assert_fail@plt+0x1f24>
   12e74:	cmp	r2, #96	; 0x60
   12e78:	movne	r0, r3
   12e7c:	pop	{r4, r5, r6, pc}
   12e80:	cmp	r3, #71	; 0x47
   12e84:	bne	12ebc <__assert_fail@plt+0x1ed0>
   12e88:	ldrb	r3, [r0, #1]
   12e8c:	bic	r3, r3, #32
   12e90:	cmp	r3, #66	; 0x42
   12e94:	bne	12ebc <__assert_fail@plt+0x1ed0>
   12e98:	ldrb	r3, [r0, #2]
   12e9c:	cmp	r3, #49	; 0x31
   12ea0:	bne	12ebc <__assert_fail@plt+0x1ed0>
   12ea4:	ldrb	r3, [r0, #3]
   12ea8:	cmp	r3, #56	; 0x38
   12eac:	bne	12ebc <__assert_fail@plt+0x1ed0>
   12eb0:	ldrb	r3, [r0, #4]
   12eb4:	cmp	r3, #48	; 0x30
   12eb8:	beq	12ed0 <__assert_fail@plt+0x1ee4>
   12ebc:	ldr	r3, [pc, #80]	; 12f14 <__assert_fail@plt+0x1f28>
   12ec0:	cmp	r5, #9
   12ec4:	ldr	r0, [pc, #76]	; 12f18 <__assert_fail@plt+0x1f2c>
   12ec8:	movne	r0, r3
   12ecc:	pop	{r4, r5, r6, pc}
   12ed0:	ldrb	r3, [r0, #5]
   12ed4:	cmp	r3, #51	; 0x33
   12ed8:	bne	12ebc <__assert_fail@plt+0x1ed0>
   12edc:	ldrb	r3, [r0, #6]
   12ee0:	cmp	r3, #48	; 0x30
   12ee4:	bne	12ebc <__assert_fail@plt+0x1ed0>
   12ee8:	ldrb	r3, [r0, #7]
   12eec:	cmp	r3, #0
   12ef0:	bne	12ebc <__assert_fail@plt+0x1ed0>
   12ef4:	ldrb	r2, [r4]
   12ef8:	ldr	r3, [pc, #28]	; 12f1c <__assert_fail@plt+0x1f30>
   12efc:	ldr	r0, [pc, #28]	; 12f20 <__assert_fail@plt+0x1f34>
   12f00:	cmp	r2, #96	; 0x60
   12f04:	movne	r0, r3
   12f08:	pop	{r4, r5, r6, pc}
   12f0c:	ldrdeq	r7, [r1], -r8
   12f10:	ldrdeq	r7, [r1], -r4
   12f14:	andeq	r7, r1, r8, ror #5
   12f18:	andeq	r7, r1, r4, ror #5
   12f1c:	andeq	r7, r1, r0, ror #5
   12f20:	ldrdeq	r7, [r1], -ip
   12f24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f28:	sub	sp, sp, #116	; 0x74
   12f2c:	mov	sl, r0
   12f30:	str	r3, [sp, #24]
   12f34:	mov	r3, #1
   12f38:	mov	r8, r1
   12f3c:	str	r2, [sp, #56]	; 0x38
   12f40:	str	r3, [sp, #36]	; 0x24
   12f44:	bl	10e54 <__ctype_get_mb_cur_max@plt>
   12f48:	ldr	r3, [sp, #156]	; 0x9c
   12f4c:	mov	fp, r8
   12f50:	mov	r2, #0
   12f54:	lsr	r3, r3, #1
   12f58:	and	r3, r3, #1
   12f5c:	str	r2, [sp, #68]	; 0x44
   12f60:	str	r3, [sp, #28]
   12f64:	str	r2, [sp, #40]	; 0x28
   12f68:	str	r2, [sp, #44]	; 0x2c
   12f6c:	str	r2, [sp, #52]	; 0x34
   12f70:	str	r2, [sp, #64]	; 0x40
   12f74:	str	r2, [sp, #72]	; 0x48
   12f78:	str	sl, [sp, #32]
   12f7c:	str	r0, [sp, #76]	; 0x4c
   12f80:	ldr	r3, [sp, #152]	; 0x98
   12f84:	cmp	r3, #10
   12f88:	ldrls	pc, [pc, r3, lsl #2]
   12f8c:	b	1414c <__assert_fail@plt+0x3160>
   12f90:			; <UNDEFINED> instruction: 0x00012fbc
   12f94:	andeq	r3, r1, r4, lsr #5
   12f98:	andeq	r3, r1, r8, asr #5
   12f9c:	andeq	r3, r1, ip, ror #5
   12fa0:	andeq	r3, r1, r8, lsl r4
   12fa4:	andeq	r3, r1, ip, ror #7
   12fa8:	andeq	r3, r1, r4, asr #7
   12fac:	andeq	r3, r1, r0, lsl #6
   12fb0:	andeq	r3, r1, r8, lsl r3
   12fb4:	andeq	r3, r1, r8, lsl r3
   12fb8:	andeq	r3, r1, r8, lsl r3
   12fbc:	mov	r3, #0
   12fc0:	mov	r7, r3
   12fc4:	str	r3, [sp, #28]
   12fc8:	ldr	r3, [sp, #44]	; 0x2c
   12fcc:	mov	sl, #0
   12fd0:	eor	r3, r3, #1
   12fd4:	str	r3, [sp, #60]	; 0x3c
   12fd8:	ldr	r3, [sp, #24]
   12fdc:	cmn	r3, #1
   12fe0:	beq	13544 <__assert_fail@plt+0x2558>
   12fe4:	ldr	r3, [sp, #24]
   12fe8:	subs	r5, r3, sl
   12fec:	movne	r5, #1
   12ff0:	cmp	r5, #0
   12ff4:	beq	1355c <__assert_fail@plt+0x2570>
   12ff8:	ldr	r3, [sp, #152]	; 0x98
   12ffc:	ldr	r8, [sp, #44]	; 0x2c
   13000:	cmp	r3, #2
   13004:	moveq	r8, #0
   13008:	andne	r8, r8, #1
   1300c:	ldr	r3, [sp, #52]	; 0x34
   13010:	adds	r9, r3, #0
   13014:	movne	r9, #1
   13018:	ands	r6, r9, r8
   1301c:	beq	139c4 <__assert_fail@plt+0x29d8>
   13020:	ldr	r2, [sp, #52]	; 0x34
   13024:	ldr	r1, [sp, #24]
   13028:	cmp	r2, #1
   1302c:	mov	r3, r2
   13030:	movls	r3, #0
   13034:	movhi	r3, #1
   13038:	cmn	r1, #1
   1303c:	movne	r3, #0
   13040:	cmp	r3, #0
   13044:	add	r4, sl, r2
   13048:	beq	13058 <__assert_fail@plt+0x206c>
   1304c:	ldr	r0, [sp, #56]	; 0x38
   13050:	bl	10f08 <strlen@plt>
   13054:	str	r0, [sp, #24]
   13058:	ldr	r3, [sp, #24]
   1305c:	cmp	r3, r4
   13060:	ldr	r3, [sp, #56]	; 0x38
   13064:	add	r3, r3, sl
   13068:	str	r3, [sp, #48]	; 0x30
   1306c:	bcc	139d0 <__assert_fail@plt+0x29e4>
   13070:	mov	r0, r3
   13074:	ldr	r2, [sp, #52]	; 0x34
   13078:	ldr	r1, [sp, #64]	; 0x40
   1307c:	bl	10de8 <memcmp@plt>
   13080:	cmp	r0, #0
   13084:	bne	139d0 <__assert_fail@plt+0x29e4>
   13088:	ldr	r3, [sp, #28]
   1308c:	cmp	r3, #0
   13090:	bne	1424c <__assert_fail@plt+0x3260>
   13094:	ldr	r3, [sp, #48]	; 0x30
   13098:	ldrb	r4, [r3]
   1309c:	cmp	r4, #126	; 0x7e
   130a0:	ldrls	pc, [pc, r4, lsl #2]
   130a4:	b	13964 <__assert_fail@plt+0x2978>
   130a8:	andeq	r3, r1, r8, lsl #15
   130ac:	andeq	r3, r1, r4, ror #18
   130b0:	andeq	r3, r1, r4, ror #18
   130b4:	andeq	r3, r1, r4, ror #18
   130b8:	andeq	r3, r1, r4, ror #18
   130bc:	andeq	r3, r1, r4, ror #18
   130c0:	andeq	r3, r1, r4, ror #18
   130c4:	andeq	r3, r1, ip, ror #14
   130c8:	andeq	r3, r1, r0, asr r7
   130cc:	andeq	r3, r1, ip, asr #18
   130d0:			; <UNDEFINED> instruction: 0x000136b0
   130d4:	muleq	r1, r4, r6
   130d8:	andeq	r3, r1, r8, lsr #18
   130dc:	andeq	r3, r1, r4, lsl #18
   130e0:	andeq	r3, r1, r4, ror #18
   130e4:	andeq	r3, r1, r4, ror #18
   130e8:	andeq	r3, r1, r4, ror #18
   130ec:	andeq	r3, r1, r4, ror #18
   130f0:	andeq	r3, r1, r4, ror #18
   130f4:	andeq	r3, r1, r4, ror #18
   130f8:	andeq	r3, r1, r4, ror #18
   130fc:	andeq	r3, r1, r4, ror #18
   13100:	andeq	r3, r1, r4, ror #18
   13104:	andeq	r3, r1, r4, ror #18
   13108:	andeq	r3, r1, r4, ror #18
   1310c:	andeq	r3, r1, r4, ror #18
   13110:	andeq	r3, r1, r4, ror #18
   13114:	andeq	r3, r1, r4, ror #18
   13118:	andeq	r3, r1, r4, ror #18
   1311c:	andeq	r3, r1, r4, ror #18
   13120:	andeq	r3, r1, r4, ror #18
   13124:	andeq	r3, r1, r4, ror #18
   13128:	andeq	r3, r1, r4, asr #18
   1312c:	andeq	r3, r1, r8, ror r8
   13130:	andeq	r3, r1, r8, ror r8
   13134:	andeq	r3, r1, r8, lsl #9
   13138:	andeq	r3, r1, r8, ror r8
   1313c:	andeq	r3, r1, r0, lsl r9
   13140:	andeq	r3, r1, r8, ror r8
   13144:	andeq	r3, r1, r4, ror #17
   13148:	andeq	r3, r1, r8, ror r8
   1314c:	andeq	r3, r1, r8, ror r8
   13150:	andeq	r3, r1, r8, ror r8
   13154:	andeq	r3, r1, r0, lsl r9
   13158:	andeq	r3, r1, r0, lsl r9
   1315c:	andeq	r3, r1, r0, lsl r9
   13160:	andeq	r3, r1, r0, lsl r9
   13164:	andeq	r3, r1, r0, lsl r9
   13168:	andeq	r3, r1, r0, lsl r9
   1316c:	andeq	r3, r1, r0, lsl r9
   13170:	andeq	r3, r1, r0, lsl r9
   13174:	andeq	r3, r1, r0, lsl r9
   13178:	andeq	r3, r1, r0, lsl r9
   1317c:	andeq	r3, r1, r0, lsl r9
   13180:	andeq	r3, r1, r0, lsl r9
   13184:	andeq	r3, r1, r0, lsl r9
   13188:	andeq	r3, r1, r0, lsl r9
   1318c:	andeq	r3, r1, r0, lsl r9
   13190:	andeq	r3, r1, r0, lsl r9
   13194:	andeq	r3, r1, r8, ror r8
   13198:	andeq	r3, r1, r8, ror r8
   1319c:	andeq	r3, r1, r8, ror r8
   131a0:	andeq	r3, r1, r8, ror r8
   131a4:			; <UNDEFINED> instruction: 0x000138b4
   131a8:	andeq	r3, r1, r4, ror #18
   131ac:	andeq	r3, r1, r0, lsl r9
   131b0:	andeq	r3, r1, r0, lsl r9
   131b4:	andeq	r3, r1, r0, lsl r9
   131b8:	andeq	r3, r1, r0, lsl r9
   131bc:	andeq	r3, r1, r0, lsl r9
   131c0:	andeq	r3, r1, r0, lsl r9
   131c4:	andeq	r3, r1, r0, lsl r9
   131c8:	andeq	r3, r1, r0, lsl r9
   131cc:	andeq	r3, r1, r0, lsl r9
   131d0:	andeq	r3, r1, r0, lsl r9
   131d4:	andeq	r3, r1, r0, lsl r9
   131d8:	andeq	r3, r1, r0, lsl r9
   131dc:	andeq	r3, r1, r0, lsl r9
   131e0:	andeq	r3, r1, r0, lsl r9
   131e4:	andeq	r3, r1, r0, lsl r9
   131e8:	andeq	r3, r1, r0, lsl r9
   131ec:	andeq	r3, r1, r0, lsl r9
   131f0:	andeq	r3, r1, r0, lsl r9
   131f4:	andeq	r3, r1, r0, lsl r9
   131f8:	andeq	r3, r1, r0, lsl r9
   131fc:	andeq	r3, r1, r0, lsl r9
   13200:	andeq	r3, r1, r0, lsl r9
   13204:	andeq	r3, r1, r0, lsl r9
   13208:	andeq	r3, r1, r0, lsl r9
   1320c:	andeq	r3, r1, r0, lsl r9
   13210:	andeq	r3, r1, r0, lsl r9
   13214:	andeq	r3, r1, r8, ror r8
   13218:	ldrdeq	r3, [r1], -r4
   1321c:	andeq	r3, r1, r0, lsl r9
   13220:	andeq	r3, r1, r8, ror r8
   13224:	andeq	r3, r1, r0, lsl r9
   13228:	andeq	r3, r1, r8, ror r8
   1322c:	andeq	r3, r1, r0, lsl r9
   13230:	andeq	r3, r1, r0, lsl r9
   13234:	andeq	r3, r1, r0, lsl r9
   13238:	andeq	r3, r1, r0, lsl r9
   1323c:	andeq	r3, r1, r0, lsl r9
   13240:	andeq	r3, r1, r0, lsl r9
   13244:	andeq	r3, r1, r0, lsl r9
   13248:	andeq	r3, r1, r0, lsl r9
   1324c:	andeq	r3, r1, r0, lsl r9
   13250:	andeq	r3, r1, r0, lsl r9
   13254:	andeq	r3, r1, r0, lsl r9
   13258:	andeq	r3, r1, r0, lsl r9
   1325c:	andeq	r3, r1, r0, lsl r9
   13260:	andeq	r3, r1, r0, lsl r9
   13264:	andeq	r3, r1, r0, lsl r9
   13268:	andeq	r3, r1, r0, lsl r9
   1326c:	andeq	r3, r1, r0, lsl r9
   13270:	andeq	r3, r1, r0, lsl r9
   13274:	andeq	r3, r1, r0, lsl r9
   13278:	andeq	r3, r1, r0, lsl r9
   1327c:	andeq	r3, r1, r0, lsl r9
   13280:	andeq	r3, r1, r0, lsl r9
   13284:	andeq	r3, r1, r0, lsl r9
   13288:	andeq	r3, r1, r0, lsl r9
   1328c:	andeq	r3, r1, r0, lsl r9
   13290:	andeq	r3, r1, r0, lsl r9
   13294:	andeq	r3, r1, r8, ror #8
   13298:	andeq	r3, r1, r8, ror r8
   1329c:	andeq	r3, r1, r8, ror #8
   132a0:	andeq	r3, r1, r8, lsl #9
   132a4:	mov	r3, #1
   132a8:	str	r3, [sp, #28]
   132ac:	str	r3, [sp, #52]	; 0x34
   132b0:	ldr	r3, [pc, #4000]	; 14258 <__assert_fail@plt+0x326c>
   132b4:	mov	r7, #0
   132b8:	str	r3, [sp, #64]	; 0x40
   132bc:	mov	r3, #2
   132c0:	str	r3, [sp, #152]	; 0x98
   132c4:	b	12fc8 <__assert_fail@plt+0x1fdc>
   132c8:	ldr	r3, [sp, #28]
   132cc:	cmp	r3, #0
   132d0:	beq	1342c <__assert_fail@plt+0x2440>
   132d4:	mov	r3, #1
   132d8:	str	r3, [sp, #52]	; 0x34
   132dc:	ldr	r3, [pc, #3956]	; 14258 <__assert_fail@plt+0x326c>
   132e0:	mov	r7, #0
   132e4:	str	r3, [sp, #64]	; 0x40
   132e8:	b	12fc8 <__assert_fail@plt+0x1fdc>
   132ec:	mov	r3, #1
   132f0:	str	r3, [sp, #44]	; 0x2c
   132f4:	str	r3, [sp, #52]	; 0x34
   132f8:	str	r3, [sp, #28]
   132fc:	b	132b0 <__assert_fail@plt+0x22c4>
   13300:	mov	r3, #0
   13304:	str	r3, [sp, #28]
   13308:	mov	r3, #1
   1330c:	str	r3, [sp, #44]	; 0x2c
   13310:	mov	r7, #0
   13314:	b	12fc8 <__assert_fail@plt+0x1fdc>
   13318:	ldr	r3, [sp, #152]	; 0x98
   1331c:	cmp	r3, #10
   13320:	beq	13364 <__assert_fail@plt+0x2378>
   13324:	mov	r2, #5
   13328:	ldr	r1, [pc, #3884]	; 1425c <__assert_fail@plt+0x3270>
   1332c:	mov	r0, #0
   13330:	bl	10e00 <dcgettext@plt>
   13334:	ldr	r2, [pc, #3872]	; 1425c <__assert_fail@plt+0x3270>
   13338:	cmp	r0, r2
   1333c:	str	r0, [sp, #164]	; 0xa4
   13340:	beq	14348 <__assert_fail@plt+0x335c>
   13344:	mov	r2, #5
   13348:	ldr	r1, [pc, #3848]	; 14258 <__assert_fail@plt+0x326c>
   1334c:	mov	r0, #0
   13350:	bl	10e00 <dcgettext@plt>
   13354:	ldr	r2, [pc, #3836]	; 14258 <__assert_fail@plt+0x326c>
   13358:	cmp	r0, r2
   1335c:	str	r0, [sp, #168]	; 0xa8
   13360:	beq	14338 <__assert_fail@plt+0x334c>
   13364:	ldr	r7, [sp, #28]
   13368:	cmp	r7, #0
   1336c:	movne	r7, #0
   13370:	bne	133a4 <__assert_fail@plt+0x23b8>
   13374:	ldr	r3, [sp, #164]	; 0xa4
   13378:	ldrb	r3, [r3]
   1337c:	cmp	r3, #0
   13380:	beq	14358 <__assert_fail@plt+0x336c>
   13384:	ldr	r2, [sp, #164]	; 0xa4
   13388:	ldr	r1, [sp, #32]
   1338c:	cmp	fp, r7
   13390:	strbhi	r3, [r1, r7]
   13394:	ldrb	r3, [r2, #1]!
   13398:	add	r7, r7, #1
   1339c:	cmp	r3, #0
   133a0:	bne	1338c <__assert_fail@plt+0x23a0>
   133a4:	ldr	r0, [sp, #168]	; 0xa8
   133a8:	bl	10f08 <strlen@plt>
   133ac:	ldr	r3, [sp, #168]	; 0xa8
   133b0:	str	r3, [sp, #64]	; 0x40
   133b4:	mov	r3, #1
   133b8:	str	r3, [sp, #44]	; 0x2c
   133bc:	str	r0, [sp, #52]	; 0x34
   133c0:	b	12fc8 <__assert_fail@plt+0x1fdc>
   133c4:	mov	r3, #1
   133c8:	str	r3, [sp, #44]	; 0x2c
   133cc:	str	r3, [sp, #52]	; 0x34
   133d0:	str	r3, [sp, #28]
   133d4:	ldr	r3, [pc, #3716]	; 14260 <__assert_fail@plt+0x3274>
   133d8:	mov	r7, #0
   133dc:	str	r3, [sp, #64]	; 0x40
   133e0:	mov	r3, #5
   133e4:	str	r3, [sp, #152]	; 0x98
   133e8:	b	12fc8 <__assert_fail@plt+0x1fdc>
   133ec:	ldr	r3, [sp, #28]
   133f0:	cmp	r3, #0
   133f4:	beq	140f4 <__assert_fail@plt+0x3108>
   133f8:	ldr	r3, [sp, #28]
   133fc:	mov	r7, #0
   13400:	str	r3, [sp, #44]	; 0x2c
   13404:	mov	r3, #1
   13408:	str	r3, [sp, #52]	; 0x34
   1340c:	ldr	r3, [pc, #3660]	; 14260 <__assert_fail@plt+0x3274>
   13410:	str	r3, [sp, #64]	; 0x40
   13414:	b	12fc8 <__assert_fail@plt+0x1fdc>
   13418:	ldr	r3, [sp, #28]
   1341c:	cmp	r3, #0
   13420:	mov	r3, #1
   13424:	streq	r3, [sp, #44]	; 0x2c
   13428:	bne	132ac <__assert_fail@plt+0x22c0>
   1342c:	cmp	fp, #0
   13430:	beq	14124 <__assert_fail@plt+0x3138>
   13434:	ldr	r3, [sp, #32]
   13438:	mov	r2, #39	; 0x27
   1343c:	mov	r7, #1
   13440:	strb	r2, [r3]
   13444:	mov	r3, #0
   13448:	str	r3, [sp, #28]
   1344c:	mov	r3, #1
   13450:	str	r3, [sp, #52]	; 0x34
   13454:	ldr	r3, [pc, #3580]	; 14258 <__assert_fail@plt+0x326c>
   13458:	str	r3, [sp, #64]	; 0x40
   1345c:	mov	r3, #2
   13460:	str	r3, [sp, #152]	; 0x98
   13464:	b	12fc8 <__assert_fail@plt+0x1fdc>
   13468:	ldr	r3, [sp, #24]
   1346c:	cmn	r3, #1
   13470:	beq	14088 <__assert_fail@plt+0x309c>
   13474:	ldr	r3, [sp, #24]
   13478:	subs	r3, r3, #1
   1347c:	movne	r3, #1
   13480:	cmp	r3, #0
   13484:	bne	13490 <__assert_fail@plt+0x24a4>
   13488:	cmp	sl, #0
   1348c:	beq	1387c <__assert_fail@plt+0x2890>
   13490:	ldr	r3, [sp, #152]	; 0x98
   13494:	mov	r5, #0
   13498:	sub	r2, r3, #2
   1349c:	mov	r8, r5
   134a0:	clz	r2, r2
   134a4:	lsr	r2, r2, #5
   134a8:	ldr	r3, [sp, #60]	; 0x3c
   134ac:	ldr	r1, [sp, #28]
   134b0:	orr	r3, r2, r3
   134b4:	eor	r3, r3, #1
   134b8:	orr	r3, r1, r3
   134bc:	tst	r3, #255	; 0xff
   134c0:	bne	13bec <__assert_fail@plt+0x2c00>
   134c4:	cmp	r6, #0
   134c8:	bne	13618 <__assert_fail@plt+0x262c>
   134cc:	ldr	r3, [sp, #40]	; 0x28
   134d0:	eor	r8, r8, #1
   134d4:	and	r8, r8, r3
   134d8:	add	sl, sl, #1
   134dc:	uxtb	r6, r8
   134e0:	cmp	r6, #0
   134e4:	beq	13518 <__assert_fail@plt+0x252c>
   134e8:	cmp	fp, r7
   134ec:	movhi	r2, #39	; 0x27
   134f0:	ldrhi	r3, [sp, #32]
   134f4:	strbhi	r2, [r3, r7]
   134f8:	add	r3, r7, #1
   134fc:	cmp	fp, r3
   13500:	movhi	r1, #39	; 0x27
   13504:	ldrhi	r2, [sp, #32]
   13508:	add	r7, r7, #2
   1350c:	strbhi	r1, [r2, r3]
   13510:	mov	r3, #0
   13514:	str	r3, [sp, #40]	; 0x28
   13518:	cmp	r7, fp
   1351c:	ldrcc	r3, [sp, #32]
   13520:	strbcc	r4, [r3, r7]
   13524:	ldr	r3, [sp, #36]	; 0x24
   13528:	cmp	r5, #0
   1352c:	moveq	r3, #0
   13530:	str	r3, [sp, #36]	; 0x24
   13534:	ldr	r3, [sp, #24]
   13538:	add	r7, r7, #1
   1353c:	cmn	r3, #1
   13540:	bne	12fe4 <__assert_fail@plt+0x1ff8>
   13544:	ldr	r3, [sp, #56]	; 0x38
   13548:	ldrb	r5, [r3, sl]
   1354c:	adds	r5, r5, #0
   13550:	movne	r5, #1
   13554:	cmp	r5, #0
   13558:	bne	12ff8 <__assert_fail@plt+0x200c>
   1355c:	ldr	r3, [sp, #152]	; 0x98
   13560:	ldr	r1, [sp, #28]
   13564:	sub	r3, r3, #2
   13568:	clz	r3, r3
   1356c:	lsr	r3, r3, #5
   13570:	and	r9, r1, r3
   13574:	cmp	r7, #0
   13578:	movne	r2, #0
   1357c:	andeq	r2, r9, #1
   13580:	cmp	r2, #0
   13584:	bne	13f60 <__assert_fail@plt+0x2f74>
   13588:	eor	r2, r1, #1
   1358c:	ands	r3, r3, r2
   13590:	beq	1441c <__assert_fail@plt+0x3430>
   13594:	ldr	r2, [sp, #68]	; 0x44
   13598:	cmp	r2, #0
   1359c:	beq	14408 <__assert_fail@plt+0x341c>
   135a0:	ldr	r3, [sp, #36]	; 0x24
   135a4:	cmp	r3, #0
   135a8:	bne	143c0 <__assert_fail@plt+0x33d4>
   135ac:	ldr	r2, [sp, #72]	; 0x48
   135b0:	clz	r3, fp
   135b4:	cmp	r2, #0
   135b8:	lsr	r3, r3, #5
   135bc:	moveq	r3, #0
   135c0:	cmp	r3, #0
   135c4:	beq	14360 <__assert_fail@plt+0x3374>
   135c8:	str	r3, [sp, #68]	; 0x44
   135cc:	ldr	fp, [sp, #72]	; 0x48
   135d0:	b	12f80 <__assert_fail@plt+0x1f94>
   135d4:	ldr	r3, [sp, #152]	; 0x98
   135d8:	cmp	r3, #2
   135dc:	beq	13c30 <__assert_fail@plt+0x2c44>
   135e0:	ldr	r3, [sp, #44]	; 0x2c
   135e4:	ldr	r2, [sp, #28]
   135e8:	and	r2, r3, r2
   135ec:	ands	r2, r9, r2
   135f0:	bne	13c3c <__assert_fail@plt+0x2c50>
   135f4:	mov	r4, #92	; 0x5c
   135f8:	mov	r3, r4
   135fc:	ldr	r1, [sp, #44]	; 0x2c
   13600:	cmp	r1, #0
   13604:	moveq	r5, #0
   13608:	moveq	r8, r1
   1360c:	beq	134a8 <__assert_fail@plt+0x24bc>
   13610:	mov	r4, r3
   13614:	mov	r5, #0
   13618:	ldr	r3, [sp, #28]
   1361c:	cmp	r3, #0
   13620:	bne	13c24 <__assert_fail@plt+0x2c38>
   13624:	ldr	r3, [sp, #40]	; 0x28
   13628:	eor	r9, r3, #1
   1362c:	and	r9, r9, r2
   13630:	ands	r9, r9, #255	; 0xff
   13634:	beq	13678 <__assert_fail@plt+0x268c>
   13638:	cmp	fp, r7
   1363c:	movhi	r2, #39	; 0x27
   13640:	ldrhi	r3, [sp, #32]
   13644:	str	r9, [sp, #40]	; 0x28
   13648:	strbhi	r2, [r3, r7]
   1364c:	add	r3, r7, #1
   13650:	cmp	fp, r3
   13654:	movhi	r1, #36	; 0x24
   13658:	ldrhi	r2, [sp, #32]
   1365c:	strbhi	r1, [r2, r3]
   13660:	add	r3, r7, #2
   13664:	cmp	fp, r3
   13668:	add	r7, r7, #3
   1366c:	ldrhi	r2, [sp, #32]
   13670:	movhi	r1, #39	; 0x27
   13674:	strbhi	r1, [r2, r3]
   13678:	cmp	fp, r7
   1367c:	movhi	r2, #92	; 0x5c
   13680:	ldrhi	r3, [sp, #32]
   13684:	add	sl, sl, #1
   13688:	strbhi	r2, [r3, r7]
   1368c:	add	r7, r7, #1
   13690:	b	13518 <__assert_fail@plt+0x252c>
   13694:	ldr	r3, [sp, #152]	; 0x98
   13698:	mov	r4, #11
   1369c:	sub	r2, r3, #2
   136a0:	mov	r3, #118	; 0x76
   136a4:	clz	r2, r2
   136a8:	lsr	r2, r2, #5
   136ac:	b	135fc <__assert_fail@plt+0x2610>
   136b0:	mov	r4, #10
   136b4:	mov	r3, #110	; 0x6e
   136b8:	ldr	r2, [sp, #152]	; 0x98
   136bc:	ldr	r1, [sp, #28]
   136c0:	sub	r2, r2, #2
   136c4:	clz	r2, r2
   136c8:	lsr	r2, r2, #5
   136cc:	ands	r1, r1, r2
   136d0:	beq	135fc <__assert_fail@plt+0x2610>
   136d4:	ldr	sl, [sp, #32]
   136d8:	mov	r8, fp
   136dc:	mov	r2, r1
   136e0:	mov	r3, #2
   136e4:	str	r3, [sp, #152]	; 0x98
   136e8:	ldr	r9, [sp, #44]	; 0x2c
   136ec:	ldr	r3, [sp, #152]	; 0x98
   136f0:	and	r9, r9, r2
   136f4:	tst	r9, #255	; 0xff
   136f8:	movne	r3, #4
   136fc:	str	r3, [sp, #152]	; 0x98
   13700:	ldr	r3, [sp, #156]	; 0x9c
   13704:	mov	ip, #0
   13708:	bic	r3, r3, #2
   1370c:	str	r3, [sp, #4]
   13710:	ldr	r3, [sp, #168]	; 0xa8
   13714:	ldr	r2, [sp, #56]	; 0x38
   13718:	str	r3, [sp, #16]
   1371c:	ldr	r3, [sp, #164]	; 0xa4
   13720:	mov	r1, r8
   13724:	str	r3, [sp, #12]
   13728:	ldr	r3, [sp, #152]	; 0x98
   1372c:	mov	r0, sl
   13730:	str	r3, [sp]
   13734:	str	ip, [sp, #8]
   13738:	ldr	r3, [sp, #24]
   1373c:	bl	12f24 <__assert_fail@plt+0x1f38>
   13740:	mov	fp, r0
   13744:	mov	r0, fp
   13748:	add	sp, sp, #116	; 0x74
   1374c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13750:	ldr	r3, [sp, #152]	; 0x98
   13754:	mov	r4, #8
   13758:	sub	r2, r3, #2
   1375c:	mov	r3, #98	; 0x62
   13760:	clz	r2, r2
   13764:	lsr	r2, r2, #5
   13768:	b	135fc <__assert_fail@plt+0x2610>
   1376c:	ldr	r3, [sp, #152]	; 0x98
   13770:	mov	r4, #7
   13774:	sub	r2, r3, #2
   13778:	mov	r3, #97	; 0x61
   1377c:	clz	r2, r2
   13780:	lsr	r2, r2, #5
   13784:	b	135fc <__assert_fail@plt+0x2610>
   13788:	ldr	r3, [sp, #44]	; 0x2c
   1378c:	cmp	r3, #0
   13790:	beq	13f74 <__assert_fail@plt+0x2f88>
   13794:	ldr	r3, [sp, #28]
   13798:	cmp	r3, #0
   1379c:	bne	1424c <__assert_fail@plt+0x3260>
   137a0:	ldr	r3, [sp, #152]	; 0x98
   137a4:	sub	r2, r3, #2
   137a8:	ldr	r3, [sp, #40]	; 0x28
   137ac:	clz	r2, r2
   137b0:	eor	r3, r3, #1
   137b4:	lsr	r2, r2, #5
   137b8:	ands	r3, r2, r3
   137bc:	moveq	r1, r7
   137c0:	beq	13804 <__assert_fail@plt+0x2818>
   137c4:	cmp	fp, r7
   137c8:	movhi	r0, #39	; 0x27
   137cc:	ldrhi	r1, [sp, #32]
   137d0:	str	r3, [sp, #40]	; 0x28
   137d4:	strbhi	r0, [r1, r7]
   137d8:	add	r1, r7, #1
   137dc:	cmp	fp, r1
   137e0:	movhi	ip, #36	; 0x24
   137e4:	ldrhi	r0, [sp, #32]
   137e8:	strbhi	ip, [r0, r1]
   137ec:	add	r1, r7, #2
   137f0:	cmp	fp, r1
   137f4:	movhi	ip, #39	; 0x27
   137f8:	ldrhi	r0, [sp, #32]
   137fc:	strbhi	ip, [r0, r1]
   13800:	add	r1, r7, #3
   13804:	cmp	fp, r1
   13808:	movhi	r0, #92	; 0x5c
   1380c:	ldrhi	r3, [sp, #32]
   13810:	add	r7, r1, #1
   13814:	strbhi	r0, [r3, r1]
   13818:	cmp	r8, #0
   1381c:	beq	14160 <__assert_fail@plt+0x3174>
   13820:	ldr	r0, [sp, #24]
   13824:	add	r3, sl, #1
   13828:	cmp	r3, r0
   1382c:	bcs	1409c <__assert_fail@plt+0x30b0>
   13830:	ldr	r0, [sp, #56]	; 0x38
   13834:	ldrb	r3, [r0, r3]
   13838:	sub	r3, r3, #48	; 0x30
   1383c:	cmp	r3, #9
   13840:	bhi	1409c <__assert_fail@plt+0x30b0>
   13844:	cmp	fp, r7
   13848:	movhi	r3, #48	; 0x30
   1384c:	ldrhi	r0, [sp, #32]
   13850:	ldr	r5, [sp, #28]
   13854:	mov	r4, #48	; 0x30
   13858:	strbhi	r3, [r0, r7]
   1385c:	add	r3, r1, #2
   13860:	cmp	fp, r3
   13864:	movhi	r0, #48	; 0x30
   13868:	ldrhi	ip, [sp, #32]
   1386c:	add	r7, r1, #3
   13870:	strbhi	r0, [ip, r3]
   13874:	b	134a8 <__assert_fail@plt+0x24bc>
   13878:	mov	r5, #0
   1387c:	ldr	r3, [sp, #152]	; 0x98
   13880:	sub	r2, r3, #2
   13884:	ldr	r3, [sp, #28]
   13888:	clz	r2, r2
   1388c:	lsr	r2, r2, #5
   13890:	ands	r8, r3, r2
   13894:	beq	134a8 <__assert_fail@plt+0x24bc>
   13898:	mov	r3, r8
   1389c:	mov	r2, r3
   138a0:	mov	r3, #2
   138a4:	ldr	sl, [sp, #32]
   138a8:	mov	r8, fp
   138ac:	str	r3, [sp, #152]	; 0x98
   138b0:	b	136e8 <__assert_fail@plt+0x26fc>
   138b4:	ldr	r3, [sp, #152]	; 0x98
   138b8:	cmp	r3, #2
   138bc:	beq	13fe0 <__assert_fail@plt+0x2ff4>
   138c0:	cmp	r3, #5
   138c4:	beq	13fa0 <__assert_fail@plt+0x2fb4>
   138c8:	mov	r5, #0
   138cc:	sub	r2, r3, #2
   138d0:	mov	r8, r5
   138d4:	clz	r2, r2
   138d8:	mov	r4, #63	; 0x3f
   138dc:	lsr	r2, r2, #5
   138e0:	b	134a8 <__assert_fail@plt+0x24bc>
   138e4:	ldr	r3, [sp, #152]	; 0x98
   138e8:	cmp	r3, #2
   138ec:	beq	14000 <__assert_fail@plt+0x3014>
   138f0:	mov	r2, #0
   138f4:	str	r5, [sp, #68]	; 0x44
   138f8:	mov	r8, r2
   138fc:	mov	r4, #39	; 0x27
   13900:	b	134a8 <__assert_fail@plt+0x24bc>
   13904:	mov	r4, #13
   13908:	mov	r3, #114	; 0x72
   1390c:	b	136b8 <__assert_fail@plt+0x26cc>
   13910:	ldr	r3, [sp, #152]	; 0x98
   13914:	mov	r8, #0
   13918:	sub	r2, r3, #2
   1391c:	clz	r2, r2
   13920:	lsr	r2, r2, #5
   13924:	b	134a8 <__assert_fail@plt+0x24bc>
   13928:	ldr	r3, [sp, #152]	; 0x98
   1392c:	mov	r4, #12
   13930:	sub	r2, r3, #2
   13934:	mov	r3, #102	; 0x66
   13938:	clz	r2, r2
   1393c:	lsr	r2, r2, #5
   13940:	b	135fc <__assert_fail@plt+0x2610>
   13944:	mov	r5, r6
   13948:	b	1387c <__assert_fail@plt+0x2890>
   1394c:	ldr	r3, [sp, #152]	; 0x98
   13950:	sub	r2, r3, #2
   13954:	mov	r3, #116	; 0x74
   13958:	clz	r2, r2
   1395c:	lsr	r2, r2, #5
   13960:	b	135fc <__assert_fail@plt+0x2610>
   13964:	ldr	r8, [sp, #76]	; 0x4c
   13968:	cmp	r8, #1
   1396c:	bne	13e1c <__assert_fail@plt+0x2e30>
   13970:	bl	10ef0 <__ctype_b_loc@plt>
   13974:	sxth	r3, r4
   13978:	mov	ip, r8
   1397c:	lsl	r3, r3, #1
   13980:	ldr	r2, [r0]
   13984:	ldrh	r3, [r2, r3]
   13988:	and	r3, r3, #16384	; 0x4000
   1398c:	cmp	r3, #0
   13990:	movne	r5, #1
   13994:	moveq	r5, #0
   13998:	moveq	r3, #1
   1399c:	movne	r3, #0
   139a0:	ldr	r2, [sp, #44]	; 0x2c
   139a4:	and	r3, r3, r2
   139a8:	ands	r8, r3, #255	; 0xff
   139ac:	bne	13cb0 <__assert_fail@plt+0x2cc4>
   139b0:	ldr	r3, [sp, #152]	; 0x98
   139b4:	sub	r2, r3, #2
   139b8:	clz	r2, r2
   139bc:	lsr	r2, r2, #5
   139c0:	b	134a8 <__assert_fail@plt+0x24bc>
   139c4:	ldr	r3, [sp, #56]	; 0x38
   139c8:	add	r3, r3, sl
   139cc:	str	r3, [sp, #48]	; 0x30
   139d0:	ldr	r3, [sp, #48]	; 0x30
   139d4:	mov	r6, #0
   139d8:	ldrb	r4, [r3]
   139dc:	cmp	r4, #126	; 0x7e
   139e0:	ldrls	pc, [pc, r4, lsl #2]
   139e4:	b	13964 <__assert_fail@plt+0x2978>
   139e8:	andeq	r3, r1, r8, lsl #15
   139ec:	andeq	r3, r1, r4, ror #18
   139f0:	andeq	r3, r1, r4, ror #18
   139f4:	andeq	r3, r1, r4, ror #18
   139f8:	andeq	r3, r1, r4, ror #18
   139fc:	andeq	r3, r1, r4, ror #18
   13a00:	andeq	r3, r1, r4, ror #18
   13a04:	andeq	r3, r1, ip, ror #14
   13a08:	andeq	r3, r1, r0, asr r7
   13a0c:	andeq	r3, r1, r4, ror #23
   13a10:			; <UNDEFINED> instruction: 0x000136b0
   13a14:	muleq	r1, r4, r6
   13a18:	andeq	r3, r1, r8, lsr #18
   13a1c:	andeq	r3, r1, r4, lsl #18
   13a20:	andeq	r3, r1, r4, ror #18
   13a24:	andeq	r3, r1, r4, ror #18
   13a28:	andeq	r3, r1, r4, ror #18
   13a2c:	andeq	r3, r1, r4, ror #18
   13a30:	andeq	r3, r1, r4, ror #18
   13a34:	andeq	r3, r1, r4, ror #18
   13a38:	andeq	r3, r1, r4, ror #18
   13a3c:	andeq	r3, r1, r4, ror #18
   13a40:	andeq	r3, r1, r4, ror #18
   13a44:	andeq	r3, r1, r4, ror #18
   13a48:	andeq	r3, r1, r4, ror #18
   13a4c:	andeq	r3, r1, r4, ror #18
   13a50:	andeq	r3, r1, r4, ror #18
   13a54:	andeq	r3, r1, r4, ror #18
   13a58:	andeq	r3, r1, r4, ror #18
   13a5c:	andeq	r3, r1, r4, ror #18
   13a60:	andeq	r3, r1, r4, ror #18
   13a64:	andeq	r3, r1, r4, ror #18
   13a68:	andeq	r3, r1, ip, ror r8
   13a6c:	andeq	r3, r1, r8, ror r8
   13a70:	andeq	r3, r1, r8, ror r8
   13a74:	andeq	r3, r1, r8, lsl #9
   13a78:	andeq	r3, r1, r8, ror r8
   13a7c:	andeq	r3, r1, r0, lsl r9
   13a80:	andeq	r3, r1, r8, ror r8
   13a84:	andeq	r3, r1, r4, ror #17
   13a88:	andeq	r3, r1, r8, ror r8
   13a8c:	andeq	r3, r1, r8, ror r8
   13a90:	andeq	r3, r1, r8, ror r8
   13a94:	andeq	r3, r1, r0, lsl r9
   13a98:	andeq	r3, r1, r0, lsl r9
   13a9c:	andeq	r3, r1, r0, lsl r9
   13aa0:	andeq	r3, r1, r0, lsl r9
   13aa4:	andeq	r3, r1, r0, lsl r9
   13aa8:	andeq	r3, r1, r0, lsl r9
   13aac:	andeq	r3, r1, r0, lsl r9
   13ab0:	andeq	r3, r1, r0, lsl r9
   13ab4:	andeq	r3, r1, r0, lsl r9
   13ab8:	andeq	r3, r1, r0, lsl r9
   13abc:	andeq	r3, r1, r0, lsl r9
   13ac0:	andeq	r3, r1, r0, lsl r9
   13ac4:	andeq	r3, r1, r0, lsl r9
   13ac8:	andeq	r3, r1, r0, lsl r9
   13acc:	andeq	r3, r1, r0, lsl r9
   13ad0:	andeq	r3, r1, r0, lsl r9
   13ad4:	andeq	r3, r1, r8, ror r8
   13ad8:	andeq	r3, r1, r8, ror r8
   13adc:	andeq	r3, r1, r8, ror r8
   13ae0:	andeq	r3, r1, r8, ror r8
   13ae4:			; <UNDEFINED> instruction: 0x000138b4
   13ae8:	andeq	r3, r1, r4, ror #18
   13aec:	andeq	r3, r1, r0, lsl r9
   13af0:	andeq	r3, r1, r0, lsl r9
   13af4:	andeq	r3, r1, r0, lsl r9
   13af8:	andeq	r3, r1, r0, lsl r9
   13afc:	andeq	r3, r1, r0, lsl r9
   13b00:	andeq	r3, r1, r0, lsl r9
   13b04:	andeq	r3, r1, r0, lsl r9
   13b08:	andeq	r3, r1, r0, lsl r9
   13b0c:	andeq	r3, r1, r0, lsl r9
   13b10:	andeq	r3, r1, r0, lsl r9
   13b14:	andeq	r3, r1, r0, lsl r9
   13b18:	andeq	r3, r1, r0, lsl r9
   13b1c:	andeq	r3, r1, r0, lsl r9
   13b20:	andeq	r3, r1, r0, lsl r9
   13b24:	andeq	r3, r1, r0, lsl r9
   13b28:	andeq	r3, r1, r0, lsl r9
   13b2c:	andeq	r3, r1, r0, lsl r9
   13b30:	andeq	r3, r1, r0, lsl r9
   13b34:	andeq	r3, r1, r0, lsl r9
   13b38:	andeq	r3, r1, r0, lsl r9
   13b3c:	andeq	r3, r1, r0, lsl r9
   13b40:	andeq	r3, r1, r0, lsl r9
   13b44:	andeq	r3, r1, r0, lsl r9
   13b48:	andeq	r3, r1, r0, lsl r9
   13b4c:	andeq	r3, r1, r0, lsl r9
   13b50:	andeq	r3, r1, r0, lsl r9
   13b54:	andeq	r3, r1, r8, ror r8
   13b58:	ldrdeq	r3, [r1], -r4
   13b5c:	andeq	r3, r1, r0, lsl r9
   13b60:	andeq	r3, r1, r8, ror r8
   13b64:	andeq	r3, r1, r0, lsl r9
   13b68:	andeq	r3, r1, r8, ror r8
   13b6c:	andeq	r3, r1, r0, lsl r9
   13b70:	andeq	r3, r1, r0, lsl r9
   13b74:	andeq	r3, r1, r0, lsl r9
   13b78:	andeq	r3, r1, r0, lsl r9
   13b7c:	andeq	r3, r1, r0, lsl r9
   13b80:	andeq	r3, r1, r0, lsl r9
   13b84:	andeq	r3, r1, r0, lsl r9
   13b88:	andeq	r3, r1, r0, lsl r9
   13b8c:	andeq	r3, r1, r0, lsl r9
   13b90:	andeq	r3, r1, r0, lsl r9
   13b94:	andeq	r3, r1, r0, lsl r9
   13b98:	andeq	r3, r1, r0, lsl r9
   13b9c:	andeq	r3, r1, r0, lsl r9
   13ba0:	andeq	r3, r1, r0, lsl r9
   13ba4:	andeq	r3, r1, r0, lsl r9
   13ba8:	andeq	r3, r1, r0, lsl r9
   13bac:	andeq	r3, r1, r0, lsl r9
   13bb0:	andeq	r3, r1, r0, lsl r9
   13bb4:	andeq	r3, r1, r0, lsl r9
   13bb8:	andeq	r3, r1, r0, lsl r9
   13bbc:	andeq	r3, r1, r0, lsl r9
   13bc0:	andeq	r3, r1, r0, lsl r9
   13bc4:	andeq	r3, r1, r0, lsl r9
   13bc8:	andeq	r3, r1, r0, lsl r9
   13bcc:	andeq	r3, r1, r0, lsl r9
   13bd0:	andeq	r3, r1, r0, lsl r9
   13bd4:	andeq	r3, r1, r8, ror #8
   13bd8:	andeq	r3, r1, r8, ror r8
   13bdc:	andeq	r3, r1, r8, ror #8
   13be0:	andeq	r3, r1, r8, lsl #9
   13be4:	mov	r3, #116	; 0x74
   13be8:	b	136b8 <__assert_fail@plt+0x26cc>
   13bec:	ldr	r3, [sp, #160]	; 0xa0
   13bf0:	cmp	r3, #0
   13bf4:	beq	134c4 <__assert_fail@plt+0x24d8>
   13bf8:	lsr	r3, r4, #5
   13bfc:	ldr	r0, [sp, #160]	; 0xa0
   13c00:	uxtb	r3, r3
   13c04:	and	r1, r4, #31
   13c08:	ldr	r0, [r0, r3, lsl #2]
   13c0c:	lsr	r3, r0, r1
   13c10:	tst	r3, #1
   13c14:	beq	134c4 <__assert_fail@plt+0x24d8>
   13c18:	ldr	r3, [sp, #28]
   13c1c:	cmp	r3, #0
   13c20:	beq	13624 <__assert_fail@plt+0x2638>
   13c24:	ldr	sl, [sp, #32]
   13c28:	mov	r8, fp
   13c2c:	b	136e8 <__assert_fail@plt+0x26fc>
   13c30:	ldr	r3, [sp, #28]
   13c34:	cmp	r3, #0
   13c38:	bne	1418c <__assert_fail@plt+0x31a0>
   13c3c:	add	sl, sl, #1
   13c40:	ldr	r6, [sp, #40]	; 0x28
   13c44:	mov	r5, #0
   13c48:	mov	r4, #92	; 0x5c
   13c4c:	b	134e0 <__assert_fail@plt+0x24f4>
   13c50:	cmp	r9, r8
   13c54:	bne	13ec4 <__assert_fail@plt+0x2ed8>
   13c58:	ldr	r0, [sp, #100]	; 0x64
   13c5c:	bl	10e30 <iswprint@plt>
   13c60:	add	r5, r5, r4
   13c64:	cmp	r0, #0
   13c68:	add	r0, sp, #104	; 0x68
   13c6c:	moveq	r6, #0
   13c70:	bl	10dd0 <mbsinit@plt>
   13c74:	cmp	r0, #0
   13c78:	beq	13e58 <__assert_fail@plt+0x2e6c>
   13c7c:	mov	r2, r6
   13c80:	mov	ip, r5
   13c84:	eor	r5, r2, #1
   13c88:	ldr	r4, [sp, #80]	; 0x50
   13c8c:	ldr	r6, [sp, #84]	; 0x54
   13c90:	ldr	r7, [sp, #88]	; 0x58
   13c94:	uxtb	r5, r5
   13c98:	cmp	ip, #1
   13c9c:	bls	1419c <__assert_fail@plt+0x31b0>
   13ca0:	ldr	r3, [sp, #44]	; 0x2c
   13ca4:	and	r8, r3, r5
   13ca8:	mov	r5, r2
   13cac:	uxtb	r8, r8
   13cb0:	add	r2, sl, ip
   13cb4:	ldr	r0, [sp, #48]	; 0x30
   13cb8:	mov	r1, #0
   13cbc:	str	r5, [sp, #48]	; 0x30
   13cc0:	ldr	r9, [sp, #28]
   13cc4:	ldr	ip, [sp, #40]	; 0x28
   13cc8:	ldr	r3, [sp, #32]
   13ccc:	ldr	r5, [sp, #152]	; 0x98
   13cd0:	b	13d8c <__assert_fail@plt+0x2da0>
   13cd4:	cmp	r9, #0
   13cd8:	bne	140b0 <__assert_fail@plt+0x30c4>
   13cdc:	eor	r1, ip, #1
   13ce0:	cmp	r5, #2
   13ce4:	movne	r1, #0
   13ce8:	andeq	r1, r1, #1
   13cec:	cmp	r1, #0
   13cf0:	beq	13d28 <__assert_fail@plt+0x2d3c>
   13cf4:	cmp	fp, r7
   13cf8:	movhi	ip, #39	; 0x27
   13cfc:	strbhi	ip, [r3, r7]
   13d00:	add	ip, r7, #1
   13d04:	cmp	fp, ip
   13d08:	movhi	lr, #36	; 0x24
   13d0c:	strbhi	lr, [r3, ip]
   13d10:	add	ip, r7, #2
   13d14:	cmp	fp, ip
   13d18:	movhi	lr, #39	; 0x27
   13d1c:	strbhi	lr, [r3, ip]
   13d20:	add	r7, r7, #3
   13d24:	mov	ip, r1
   13d28:	cmp	fp, r7
   13d2c:	movhi	r1, #92	; 0x5c
   13d30:	strbhi	r1, [r3, r7]
   13d34:	add	r1, r7, #1
   13d38:	cmp	fp, r1
   13d3c:	lsrhi	lr, r4, #6
   13d40:	addhi	lr, lr, #48	; 0x30
   13d44:	strbhi	lr, [r3, r1]
   13d48:	add	lr, r7, #2
   13d4c:	cmp	fp, lr
   13d50:	lsrhi	r1, r4, #3
   13d54:	andhi	r1, r1, #7
   13d58:	addhi	r1, r1, #48	; 0x30
   13d5c:	add	sl, sl, #1
   13d60:	strbhi	r1, [r3, lr]
   13d64:	and	r4, r4, #7
   13d68:	cmp	r2, sl
   13d6c:	add	r4, r4, #48	; 0x30
   13d70:	add	r7, r7, #3
   13d74:	bls	140d4 <__assert_fail@plt+0x30e8>
   13d78:	mov	r1, r8
   13d7c:	cmp	fp, r7
   13d80:	strbhi	r4, [r3, r7]
   13d84:	ldrb	r4, [r0, #1]!
   13d88:	add	r7, r7, #1
   13d8c:	cmp	r8, #0
   13d90:	bne	13cd4 <__assert_fail@plt+0x2ce8>
   13d94:	cmp	r6, #0
   13d98:	bne	13de8 <__assert_fail@plt+0x2dfc>
   13d9c:	eor	r6, r1, #1
   13da0:	and	r6, r6, ip
   13da4:	add	sl, sl, #1
   13da8:	cmp	r2, sl
   13dac:	uxtb	r6, r6
   13db0:	bls	13e10 <__assert_fail@plt+0x2e24>
   13db4:	cmp	r6, #0
   13db8:	beq	13d7c <__assert_fail@plt+0x2d90>
   13dbc:	cmp	fp, r7
   13dc0:	movhi	ip, #39	; 0x27
   13dc4:	strbhi	ip, [r3, r7]
   13dc8:	add	ip, r7, #1
   13dcc:	cmp	fp, ip
   13dd0:	movhi	lr, #39	; 0x27
   13dd4:	strbhi	lr, [r3, ip]
   13dd8:	add	r7, r7, #2
   13ddc:	mov	r6, r8
   13de0:	mov	ip, r8
   13de4:	b	13d7c <__assert_fail@plt+0x2d90>
   13de8:	cmp	fp, r7
   13dec:	eor	r6, r1, #1
   13df0:	movhi	lr, #92	; 0x5c
   13df4:	and	r6, r6, ip
   13df8:	add	sl, sl, #1
   13dfc:	strbhi	lr, [r3, r7]
   13e00:	cmp	r2, sl
   13e04:	add	r7, r7, #1
   13e08:	uxtb	r6, r6
   13e0c:	bhi	13db4 <__assert_fail@plt+0x2dc8>
   13e10:	str	ip, [sp, #40]	; 0x28
   13e14:	ldr	r5, [sp, #48]	; 0x30
   13e18:	b	134e0 <__assert_fail@plt+0x24f4>
   13e1c:	ldr	r3, [sp, #24]
   13e20:	cmn	r3, #1
   13e24:	mov	r3, #0
   13e28:	str	r3, [sp, #104]	; 0x68
   13e2c:	str	r3, [sp, #108]	; 0x6c
   13e30:	beq	14150 <__assert_fail@plt+0x3164>
   13e34:	mov	r2, r5
   13e38:	mov	r3, #0
   13e3c:	str	r7, [sp, #88]	; 0x58
   13e40:	ldr	r7, [sp, #152]	; 0x98
   13e44:	str	r5, [sp, #92]	; 0x5c
   13e48:	str	r6, [sp, #84]	; 0x54
   13e4c:	mov	r5, r3
   13e50:	mov	r6, r2
   13e54:	str	r4, [sp, #80]	; 0x50
   13e58:	ldr	r3, [sp, #56]	; 0x38
   13e5c:	add	r9, sl, r5
   13e60:	add	r8, r3, r9
   13e64:	ldr	r3, [sp, #24]
   13e68:	mov	r1, r8
   13e6c:	sub	r2, r3, r9
   13e70:	add	r0, sp, #100	; 0x64
   13e74:	add	r3, sp, #104	; 0x68
   13e78:	bl	15e60 <__assert_fail@plt+0x4e74>
   13e7c:	subs	r4, r0, #0
   13e80:	beq	14228 <__assert_fail@plt+0x323c>
   13e84:	cmn	r4, #1
   13e88:	beq	14208 <__assert_fail@plt+0x321c>
   13e8c:	cmn	r4, #2
   13e90:	beq	141a8 <__assert_fail@plt+0x31bc>
   13e94:	ldr	r2, [sp, #28]
   13e98:	cmp	r7, #2
   13e9c:	movne	r2, #0
   13ea0:	andeq	r2, r2, #1
   13ea4:	cmp	r2, #0
   13ea8:	beq	13c58 <__assert_fail@plt+0x2c6c>
   13eac:	cmp	r4, #1
   13eb0:	beq	13c58 <__assert_fail@plt+0x2c6c>
   13eb4:	sub	r3, r4, #1
   13eb8:	add	r9, r3, r9
   13ebc:	ldr	r3, [sp, #56]	; 0x38
   13ec0:	add	r9, r3, r9
   13ec4:	ldrb	r3, [r8, #1]!
   13ec8:	sub	r3, r3, #91	; 0x5b
   13ecc:	cmp	r3, #33	; 0x21
   13ed0:	ldrls	pc, [pc, r3, lsl #2]
   13ed4:	b	13c50 <__assert_fail@plt+0x2c64>
   13ed8:	andeq	r3, r1, r0, ror #30
   13edc:	andeq	r3, r1, r0, ror #30
   13ee0:	andeq	r3, r1, r0, asr ip
   13ee4:	andeq	r3, r1, r0, ror #30
   13ee8:	andeq	r3, r1, r0, asr ip
   13eec:	andeq	r3, r1, r0, ror #30
   13ef0:	andeq	r3, r1, r0, asr ip
   13ef4:	andeq	r3, r1, r0, asr ip
   13ef8:	andeq	r3, r1, r0, asr ip
   13efc:	andeq	r3, r1, r0, asr ip
   13f00:	andeq	r3, r1, r0, asr ip
   13f04:	andeq	r3, r1, r0, asr ip
   13f08:	andeq	r3, r1, r0, asr ip
   13f0c:	andeq	r3, r1, r0, asr ip
   13f10:	andeq	r3, r1, r0, asr ip
   13f14:	andeq	r3, r1, r0, asr ip
   13f18:	andeq	r3, r1, r0, asr ip
   13f1c:	andeq	r3, r1, r0, asr ip
   13f20:	andeq	r3, r1, r0, asr ip
   13f24:	andeq	r3, r1, r0, asr ip
   13f28:	andeq	r3, r1, r0, asr ip
   13f2c:	andeq	r3, r1, r0, asr ip
   13f30:	andeq	r3, r1, r0, asr ip
   13f34:	andeq	r3, r1, r0, asr ip
   13f38:	andeq	r3, r1, r0, asr ip
   13f3c:	andeq	r3, r1, r0, asr ip
   13f40:	andeq	r3, r1, r0, asr ip
   13f44:	andeq	r3, r1, r0, asr ip
   13f48:	andeq	r3, r1, r0, asr ip
   13f4c:	andeq	r3, r1, r0, asr ip
   13f50:	andeq	r3, r1, r0, asr ip
   13f54:	andeq	r3, r1, r0, asr ip
   13f58:	andeq	r3, r1, r0, asr ip
   13f5c:	andeq	r3, r1, r0, ror #30
   13f60:	mov	r3, #2
   13f64:	ldr	sl, [sp, #32]
   13f68:	mov	r8, fp
   13f6c:	str	r3, [sp, #152]	; 0x98
   13f70:	b	136e8 <__assert_fail@plt+0x26fc>
   13f74:	ldr	r3, [sp, #156]	; 0x9c
   13f78:	tst	r3, #1
   13f7c:	bne	140a8 <__assert_fail@plt+0x30bc>
   13f80:	ldr	r3, [sp, #152]	; 0x98
   13f84:	ldr	r4, [sp, #44]	; 0x2c
   13f88:	sub	r2, r3, #2
   13f8c:	mov	r5, #0
   13f90:	clz	r2, r2
   13f94:	mov	r8, r4
   13f98:	lsr	r2, r2, #5
   13f9c:	b	134a8 <__assert_fail@plt+0x24bc>
   13fa0:	ldr	r3, [sp, #156]	; 0x9c
   13fa4:	ands	r9, r3, #4
   13fa8:	beq	140e0 <__assert_fail@plt+0x30f4>
   13fac:	ldr	r2, [sp, #24]
   13fb0:	add	r3, sl, #2
   13fb4:	cmp	r3, r2
   13fb8:	bcs	13fcc <__assert_fail@plt+0x2fe0>
   13fbc:	ldr	r2, [sp, #48]	; 0x30
   13fc0:	ldrb	r4, [r2, #1]
   13fc4:	cmp	r4, #63	; 0x3f
   13fc8:	beq	14268 <__assert_fail@plt+0x327c>
   13fcc:	mov	r2, #0
   13fd0:	mov	r8, r2
   13fd4:	mov	r5, r2
   13fd8:	mov	r4, #63	; 0x3f
   13fdc:	b	134a8 <__assert_fail@plt+0x24bc>
   13fe0:	ldr	r3, [sp, #28]
   13fe4:	cmp	r3, #0
   13fe8:	bne	1430c <__assert_fail@plt+0x3320>
   13fec:	mov	r2, r5
   13ff0:	mov	r8, r3
   13ff4:	mov	r5, #0
   13ff8:	mov	r4, #63	; 0x3f
   13ffc:	b	134a8 <__assert_fail@plt+0x24bc>
   14000:	ldr	r3, [sp, #28]
   14004:	cmp	r3, #0
   14008:	bne	1430c <__assert_fail@plt+0x3320>
   1400c:	ldr	r2, [sp, #72]	; 0x48
   14010:	adds	r3, fp, #0
   14014:	movne	r3, #1
   14018:	cmp	r2, #0
   1401c:	movne	r3, #0
   14020:	cmp	r3, #0
   14024:	strne	fp, [sp, #72]	; 0x48
   14028:	movne	fp, #0
   1402c:	bne	14068 <__assert_fail@plt+0x307c>
   14030:	cmp	fp, r7
   14034:	movhi	r2, #39	; 0x27
   14038:	ldrhi	r3, [sp, #32]
   1403c:	strbhi	r2, [r3, r7]
   14040:	add	r3, r7, #1
   14044:	cmp	fp, r3
   14048:	movhi	r1, #92	; 0x5c
   1404c:	ldrhi	r2, [sp, #32]
   14050:	strbhi	r1, [r2, r3]
   14054:	add	r3, r7, #2
   14058:	cmp	fp, r3
   1405c:	movhi	r1, #39	; 0x27
   14060:	ldrhi	r2, [sp, #32]
   14064:	strbhi	r1, [r2, r3]
   14068:	ldr	r3, [sp, #28]
   1406c:	add	r7, r7, #3
   14070:	mov	r2, r5
   14074:	mov	r8, r3
   14078:	str	r5, [sp, #68]	; 0x44
   1407c:	str	r3, [sp, #40]	; 0x28
   14080:	mov	r4, #39	; 0x27
   14084:	b	134a8 <__assert_fail@plt+0x24bc>
   14088:	ldr	r3, [sp, #56]	; 0x38
   1408c:	ldrb	r3, [r3, #1]
   14090:	adds	r3, r3, #0
   14094:	movne	r3, #1
   14098:	b	13480 <__assert_fail@plt+0x2494>
   1409c:	ldr	r5, [sp, #28]
   140a0:	mov	r4, #48	; 0x30
   140a4:	b	134a8 <__assert_fail@plt+0x24bc>
   140a8:	add	sl, sl, #1
   140ac:	b	12fd8 <__assert_fail@plt+0x1fec>
   140b0:	mov	sl, r3
   140b4:	ldr	r3, [sp, #28]
   140b8:	mov	r8, fp
   140bc:	str	r3, [sp, #44]	; 0x2c
   140c0:	ldr	r3, [sp, #152]	; 0x98
   140c4:	sub	r2, r3, #2
   140c8:	clz	r2, r2
   140cc:	lsr	r2, r2, #5
   140d0:	b	136e8 <__assert_fail@plt+0x26fc>
   140d4:	str	ip, [sp, #40]	; 0x28
   140d8:	ldr	r5, [sp, #48]	; 0x30
   140dc:	b	13518 <__assert_fail@plt+0x252c>
   140e0:	mov	r2, r9
   140e4:	mov	r8, r9
   140e8:	mov	r5, #0
   140ec:	mov	r4, #63	; 0x3f
   140f0:	b	134a8 <__assert_fail@plt+0x24bc>
   140f4:	cmp	fp, #0
   140f8:	beq	14170 <__assert_fail@plt+0x3184>
   140fc:	ldr	r1, [sp, #32]
   14100:	mov	r3, #34	; 0x22
   14104:	mov	r2, #1
   14108:	strb	r3, [r1]
   1410c:	ldr	r3, [pc, #332]	; 14260 <__assert_fail@plt+0x3274>
   14110:	str	r2, [sp, #52]	; 0x34
   14114:	mov	r7, r2
   14118:	str	r2, [sp, #44]	; 0x2c
   1411c:	str	r3, [sp, #64]	; 0x40
   14120:	b	12fc8 <__assert_fail@plt+0x1fdc>
   14124:	ldr	r3, [pc, #300]	; 14258 <__assert_fail@plt+0x326c>
   14128:	str	r3, [sp, #64]	; 0x40
   1412c:	mov	r3, #0
   14130:	str	r3, [sp, #28]
   14134:	mov	r3, #1
   14138:	str	r3, [sp, #52]	; 0x34
   1413c:	mov	r7, r3
   14140:	mov	r3, #2
   14144:	str	r3, [sp, #152]	; 0x98
   14148:	b	12fc8 <__assert_fail@plt+0x1fdc>
   1414c:	bl	10fd4 <abort@plt>
   14150:	ldr	r0, [sp, #56]	; 0x38
   14154:	bl	10f08 <strlen@plt>
   14158:	str	r0, [sp, #24]
   1415c:	b	13e34 <__assert_fail@plt+0x2e48>
   14160:	mov	r5, r8
   14164:	mov	r4, #48	; 0x30
   14168:	ldr	r8, [sp, #44]	; 0x2c
   1416c:	b	134a8 <__assert_fail@plt+0x24bc>
   14170:	mov	r3, #1
   14174:	str	r3, [sp, #52]	; 0x34
   14178:	mov	r7, r3
   1417c:	str	r3, [sp, #44]	; 0x2c
   14180:	ldr	r3, [pc, #216]	; 14260 <__assert_fail@plt+0x3274>
   14184:	str	r3, [sp, #64]	; 0x40
   14188:	b	12fc8 <__assert_fail@plt+0x1fdc>
   1418c:	ldr	sl, [sp, #32]
   14190:	mov	r8, fp
   14194:	mov	r2, r3
   14198:	b	136e8 <__assert_fail@plt+0x26fc>
   1419c:	mov	r3, r5
   141a0:	mov	r5, r2
   141a4:	b	139a0 <__assert_fail@plt+0x29b4>
   141a8:	ldr	r1, [sp, #24]
   141ac:	mov	r2, r5
   141b0:	cmp	r1, r9
   141b4:	mov	ip, r5
   141b8:	ldr	r4, [sp, #80]	; 0x50
   141bc:	ldr	r5, [sp, #92]	; 0x5c
   141c0:	ldr	r6, [sp, #84]	; 0x54
   141c4:	ldr	r7, [sp, #88]	; 0x58
   141c8:	bls	141fc <__assert_fail@plt+0x3210>
   141cc:	ldrb	r3, [r8]
   141d0:	cmp	r3, #0
   141d4:	bne	141e8 <__assert_fail@plt+0x31fc>
   141d8:	b	14200 <__assert_fail@plt+0x3214>
   141dc:	ldrb	r3, [r8, #1]!
   141e0:	cmp	r3, #0
   141e4:	beq	14300 <__assert_fail@plt+0x3314>
   141e8:	add	r2, r2, #1
   141ec:	add	r3, sl, r2
   141f0:	cmp	r1, r3
   141f4:	bhi	141dc <__assert_fail@plt+0x31f0>
   141f8:	mov	ip, r2
   141fc:	mov	r3, #0
   14200:	mov	r2, r3
   14204:	b	13c98 <__assert_fail@plt+0x2cac>
   14208:	mov	r3, #0
   1420c:	mov	ip, r5
   14210:	ldr	r4, [sp, #80]	; 0x50
   14214:	ldr	r5, [sp, #92]	; 0x5c
   14218:	ldr	r6, [sp, #84]	; 0x54
   1421c:	ldr	r7, [sp, #88]	; 0x58
   14220:	mov	r2, r3
   14224:	b	13c98 <__assert_fail@plt+0x2cac>
   14228:	mov	r3, r6
   1422c:	mov	ip, r5
   14230:	eor	r5, r3, #1
   14234:	mov	r2, r6
   14238:	ldr	r4, [sp, #80]	; 0x50
   1423c:	ldr	r6, [sp, #84]	; 0x54
   14240:	ldr	r7, [sp, #88]	; 0x58
   14244:	uxtb	r5, r5
   14248:	b	13c98 <__assert_fail@plt+0x2cac>
   1424c:	ldr	sl, [sp, #32]
   14250:	mov	r8, fp
   14254:	b	140bc <__assert_fail@plt+0x30d0>
   14258:	andeq	r7, r1, r8, ror #5
   1425c:	andeq	r7, r1, ip, ror #5
   14260:	andeq	r7, r1, r4, ror #5
   14264:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   14268:	ldr	r2, [sp, #56]	; 0x38
   1426c:	ldrb	r1, [r2, r3]
   14270:	sub	r2, r1, #33	; 0x21
   14274:	uxtb	r2, r2
   14278:	cmp	r2, #29
   1427c:	bhi	1431c <__assert_fail@plt+0x3330>
   14280:	ldr	r0, [pc, #-36]	; 14264 <__assert_fail@plt+0x3278>
   14284:	mov	ip, #1
   14288:	ands	r2, r0, ip, lsl r2
   1428c:	beq	1432c <__assert_fail@plt+0x3340>
   14290:	ldr	r2, [sp, #28]
   14294:	cmp	r2, #0
   14298:	bne	1442c <__assert_fail@plt+0x3440>
   1429c:	cmp	fp, r7
   142a0:	ldr	r8, [sp, #28]
   142a4:	ldrhi	r2, [sp, #32]
   142a8:	mov	sl, r3
   142ac:	mov	r5, r8
   142b0:	strbhi	r4, [r2, r7]
   142b4:	add	r2, r7, #1
   142b8:	cmp	fp, r2
   142bc:	movhi	r0, #34	; 0x22
   142c0:	ldrhi	ip, [sp, #32]
   142c4:	mov	r4, r1
   142c8:	strbhi	r0, [ip, r2]
   142cc:	add	r2, r7, #2
   142d0:	cmp	fp, r2
   142d4:	movhi	r0, #34	; 0x22
   142d8:	ldrhi	ip, [sp, #32]
   142dc:	strbhi	r0, [ip, r2]
   142e0:	add	r2, r7, #3
   142e4:	cmp	fp, r2
   142e8:	movhi	r0, #63	; 0x3f
   142ec:	ldrhi	ip, [sp, #32]
   142f0:	add	r7, r7, #4
   142f4:	strbhi	r0, [ip, r2]
   142f8:	mov	r2, r8
   142fc:	b	134a8 <__assert_fail@plt+0x24bc>
   14300:	mov	ip, r2
   14304:	mov	r2, r3
   14308:	b	13c98 <__assert_fail@plt+0x2cac>
   1430c:	ldr	sl, [sp, #32]
   14310:	mov	r8, fp
   14314:	ldr	r2, [sp, #28]
   14318:	b	136e8 <__assert_fail@plt+0x26fc>
   1431c:	mov	r2, #0
   14320:	mov	r8, r2
   14324:	mov	r5, r2
   14328:	b	134a8 <__assert_fail@plt+0x24bc>
   1432c:	mov	r8, r2
   14330:	mov	r5, #0
   14334:	b	134a8 <__assert_fail@plt+0x24bc>
   14338:	ldr	r1, [sp, #152]	; 0x98
   1433c:	bl	12e04 <__assert_fail@plt+0x1e18>
   14340:	str	r0, [sp, #168]	; 0xa8
   14344:	b	13364 <__assert_fail@plt+0x2378>
   14348:	ldr	r1, [sp, #152]	; 0x98
   1434c:	bl	12e04 <__assert_fail@plt+0x1e18>
   14350:	str	r0, [sp, #164]	; 0xa4
   14354:	b	13344 <__assert_fail@plt+0x2358>
   14358:	ldr	r7, [sp, #28]
   1435c:	b	133a4 <__assert_fail@plt+0x23b8>
   14360:	ldr	sl, [sp, #32]
   14364:	ldr	r2, [sp, #68]	; 0x44
   14368:	mov	r8, fp
   1436c:	mov	fp, r7
   14370:	ldr	r3, [sp, #64]	; 0x40
   14374:	cmp	r3, #0
   14378:	moveq	r2, #0
   1437c:	andne	r2, r2, #1
   14380:	cmp	r2, #0
   14384:	beq	143b0 <__assert_fail@plt+0x33c4>
   14388:	mov	r2, r3
   1438c:	ldrb	r3, [r3]
   14390:	cmp	r3, #0
   14394:	beq	143b0 <__assert_fail@plt+0x33c4>
   14398:	cmp	r8, fp
   1439c:	strbhi	r3, [sl, fp]
   143a0:	ldrb	r3, [r2, #1]!
   143a4:	add	fp, fp, #1
   143a8:	cmp	r3, #0
   143ac:	bne	14398 <__assert_fail@plt+0x33ac>
   143b0:	cmp	r8, fp
   143b4:	movhi	r3, #0
   143b8:	strbhi	r3, [sl, fp]
   143bc:	b	13744 <__assert_fail@plt+0x2758>
   143c0:	ldr	r3, [sp, #168]	; 0xa8
   143c4:	ldr	sl, [sp, #32]
   143c8:	str	r3, [sp, #16]
   143cc:	ldr	r3, [sp, #164]	; 0xa4
   143d0:	mov	ip, #5
   143d4:	str	r3, [sp, #12]
   143d8:	ldr	r3, [sp, #160]	; 0xa0
   143dc:	ldr	r2, [sp, #56]	; 0x38
   143e0:	str	r3, [sp, #8]
   143e4:	ldr	r3, [sp, #156]	; 0x9c
   143e8:	ldr	r1, [sp, #72]	; 0x48
   143ec:	str	r3, [sp, #4]
   143f0:	mov	r0, sl
   143f4:	ldr	r3, [sp, #24]
   143f8:	str	ip, [sp]
   143fc:	bl	12f24 <__assert_fail@plt+0x1f38>
   14400:	mov	fp, r0
   14404:	b	13744 <__assert_fail@plt+0x2758>
   14408:	mov	r8, fp
   1440c:	ldr	sl, [sp, #32]
   14410:	mov	fp, r7
   14414:	mov	r2, r3
   14418:	b	14370 <__assert_fail@plt+0x3384>
   1441c:	mov	r8, fp
   14420:	ldr	sl, [sp, #32]
   14424:	mov	fp, r7
   14428:	b	14370 <__assert_fail@plt+0x3384>
   1442c:	ldr	sl, [sp, #32]
   14430:	mov	r8, fp
   14434:	b	13700 <__assert_fail@plt+0x2714>
   14438:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1443c:	sub	sp, sp, #52	; 0x34
   14440:	mov	r4, r0
   14444:	mov	r5, r3
   14448:	mov	sl, r1
   1444c:	mov	fp, r2
   14450:	bl	10f20 <__errno_location@plt>
   14454:	ldr	r7, [pc, #412]	; 145f8 <__assert_fail@plt+0x360c>
   14458:	cmn	r4, #-2147483647	; 0x80000001
   1445c:	ldr	r6, [r7]
   14460:	mov	r8, r0
   14464:	movne	r0, #0
   14468:	moveq	r0, #1
   1446c:	ldr	r3, [r8]
   14470:	orrs	r0, r0, r4, lsr #31
   14474:	str	r3, [sp, #24]
   14478:	bne	145f4 <__assert_fail@plt+0x3608>
   1447c:	ldr	r2, [r7, #4]
   14480:	cmp	r4, r2
   14484:	blt	144e4 <__assert_fail@plt+0x34f8>
   14488:	add	r9, r7, #8
   1448c:	cmp	r6, r9
   14490:	str	r2, [sp, #44]	; 0x2c
   14494:	beq	145c4 <__assert_fail@plt+0x35d8>
   14498:	mov	r3, #8
   1449c:	sub	r2, r4, r2
   144a0:	mov	r0, r6
   144a4:	str	r3, [sp]
   144a8:	add	r2, r2, #1
   144ac:	mvn	r3, #-2147483648	; 0x80000000
   144b0:	add	r1, sp, #44	; 0x2c
   144b4:	bl	152a4 <__assert_fail@plt+0x42b8>
   144b8:	mov	r6, r0
   144bc:	str	r0, [r7]
   144c0:	ldr	r0, [r7, #4]
   144c4:	ldr	r2, [sp, #44]	; 0x2c
   144c8:	mov	r1, #0
   144cc:	sub	r2, r2, r0
   144d0:	add	r0, r6, r0, lsl #3
   144d4:	lsl	r2, r2, #3
   144d8:	bl	10f38 <memset@plt>
   144dc:	ldr	r3, [sp, #44]	; 0x2c
   144e0:	str	r3, [r7, #4]
   144e4:	add	r3, r6, r4, lsl #3
   144e8:	ldr	r1, [r5, #4]
   144ec:	ldr	r7, [r3, #4]
   144f0:	ldr	r9, [r6, r4, lsl #3]
   144f4:	ldr	r2, [r5, #40]	; 0x28
   144f8:	ldr	ip, [r5, #44]	; 0x2c
   144fc:	add	r0, r5, #8
   14500:	str	r3, [sp, #28]
   14504:	ldr	r3, [r5]
   14508:	orr	r1, r1, #1
   1450c:	mov	lr, r0
   14510:	str	r1, [sp, #32]
   14514:	str	r0, [sp, #36]	; 0x24
   14518:	str	r1, [sp, #4]
   1451c:	str	r2, [sp, #12]
   14520:	str	r3, [sp]
   14524:	mov	r0, r7
   14528:	mov	r1, r9
   1452c:	str	ip, [sp, #16]
   14530:	str	lr, [sp, #8]
   14534:	mov	r3, fp
   14538:	mov	r2, sl
   1453c:	bl	12f24 <__assert_fail@plt+0x1f38>
   14540:	cmp	r9, r0
   14544:	bhi	145b0 <__assert_fail@plt+0x35c4>
   14548:	ldr	r3, [pc, #172]	; 145fc <__assert_fail@plt+0x3610>
   1454c:	add	r9, r0, #1
   14550:	cmp	r7, r3
   14554:	str	r9, [r6, r4, lsl #3]
   14558:	beq	14564 <__assert_fail@plt+0x3578>
   1455c:	mov	r0, r7
   14560:	bl	12880 <__assert_fail@plt+0x1894>
   14564:	mov	r0, r9
   14568:	bl	15140 <__assert_fail@plt+0x4154>
   1456c:	ldr	lr, [sp, #28]
   14570:	ldr	ip, [r5, #44]	; 0x2c
   14574:	ldr	r4, [r5, #40]	; 0x28
   14578:	mov	r3, fp
   1457c:	mov	r2, sl
   14580:	mov	r1, r9
   14584:	str	r0, [lr, #4]
   14588:	ldr	lr, [r5]
   1458c:	ldr	r5, [sp, #36]	; 0x24
   14590:	str	ip, [sp, #16]
   14594:	str	r5, [sp, #8]
   14598:	ldr	r5, [sp, #32]
   1459c:	str	r4, [sp, #12]
   145a0:	str	r5, [sp, #4]
   145a4:	str	lr, [sp]
   145a8:	mov	r7, r0
   145ac:	bl	12f24 <__assert_fail@plt+0x1f38>
   145b0:	ldr	r3, [sp, #24]
   145b4:	mov	r0, r7
   145b8:	str	r3, [r8]
   145bc:	add	sp, sp, #52	; 0x34
   145c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145c4:	mov	r3, #8
   145c8:	sub	r2, r4, r2
   145cc:	str	r3, [sp]
   145d0:	add	r1, sp, #44	; 0x2c
   145d4:	add	r2, r2, #1
   145d8:	mvn	r3, #-2147483648	; 0x80000000
   145dc:	bl	152a4 <__assert_fail@plt+0x42b8>
   145e0:	mov	r6, r0
   145e4:	ldm	r9, {r0, r1}
   145e8:	str	r6, [r7]
   145ec:	stm	r6, {r0, r1}
   145f0:	b	144c0 <__assert_fail@plt+0x34d4>
   145f4:	bl	10fd4 <abort@plt>
   145f8:	andeq	r8, r2, r8, lsl #2
   145fc:	muleq	r2, ip, r1
   14600:	push	{r4, r5, r6, lr}
   14604:	mov	r5, r0
   14608:	bl	10f20 <__errno_location@plt>
   1460c:	cmp	r5, #0
   14610:	mov	r1, #48	; 0x30
   14614:	mov	r4, r0
   14618:	ldr	r0, [pc, #16]	; 14630 <__assert_fail@plt+0x3644>
   1461c:	ldr	r6, [r4]
   14620:	movne	r0, r5
   14624:	bl	155a0 <__assert_fail@plt+0x45b4>
   14628:	str	r6, [r4]
   1462c:	pop	{r4, r5, r6, pc}
   14630:	muleq	r2, ip, r2
   14634:	ldr	r3, [pc, #12]	; 14648 <__assert_fail@plt+0x365c>
   14638:	cmp	r0, #0
   1463c:	moveq	r0, r3
   14640:	ldr	r0, [r0]
   14644:	bx	lr
   14648:	muleq	r2, ip, r2
   1464c:	ldr	r3, [pc, #12]	; 14660 <__assert_fail@plt+0x3674>
   14650:	cmp	r0, #0
   14654:	moveq	r0, r3
   14658:	str	r1, [r0]
   1465c:	bx	lr
   14660:	muleq	r2, ip, r2
   14664:	ldr	r3, [pc, #52]	; 146a0 <__assert_fail@plt+0x36b4>
   14668:	cmp	r0, #0
   1466c:	moveq	r0, r3
   14670:	add	r3, r0, #8
   14674:	push	{lr}		; (str lr, [sp, #-4]!)
   14678:	lsr	lr, r1, #5
   1467c:	and	r1, r1, #31
   14680:	ldr	ip, [r3, lr, lsl #2]
   14684:	lsr	r0, ip, r1
   14688:	eor	r2, r2, r0
   1468c:	and	r2, r2, #1
   14690:	and	r0, r0, #1
   14694:	eor	r1, ip, r2, lsl r1
   14698:	str	r1, [r3, lr, lsl #2]
   1469c:	pop	{pc}		; (ldr pc, [sp], #4)
   146a0:	muleq	r2, ip, r2
   146a4:	ldr	r3, [pc, #16]	; 146bc <__assert_fail@plt+0x36d0>
   146a8:	cmp	r0, #0
   146ac:	movne	r3, r0
   146b0:	ldr	r0, [r3, #4]
   146b4:	str	r1, [r3, #4]
   146b8:	bx	lr
   146bc:	muleq	r2, ip, r2
   146c0:	ldr	r3, [pc, #44]	; 146f4 <__assert_fail@plt+0x3708>
   146c4:	cmp	r0, #0
   146c8:	moveq	r0, r3
   146cc:	mov	ip, #10
   146d0:	cmp	r2, #0
   146d4:	cmpne	r1, #0
   146d8:	str	ip, [r0]
   146dc:	beq	146ec <__assert_fail@plt+0x3700>
   146e0:	str	r1, [r0, #40]	; 0x28
   146e4:	str	r2, [r0, #44]	; 0x2c
   146e8:	bx	lr
   146ec:	push	{r4, lr}
   146f0:	bl	10fd4 <abort@plt>
   146f4:	muleq	r2, ip, r2
   146f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   146fc:	sub	sp, sp, #24
   14700:	ldr	ip, [pc, #108]	; 14774 <__assert_fail@plt+0x3788>
   14704:	ldr	r4, [sp, #56]	; 0x38
   14708:	mov	r9, r2
   1470c:	cmp	r4, #0
   14710:	moveq	r4, ip
   14714:	mov	sl, r3
   14718:	mov	r7, r0
   1471c:	mov	r8, r1
   14720:	bl	10f20 <__errno_location@plt>
   14724:	ldr	r3, [r4, #44]	; 0x2c
   14728:	mov	r1, r8
   1472c:	ldr	r6, [r0]
   14730:	str	r3, [sp, #16]
   14734:	ldr	r2, [r4, #40]	; 0x28
   14738:	add	r3, r4, #8
   1473c:	str	r3, [sp, #8]
   14740:	str	r2, [sp, #12]
   14744:	ldr	r2, [r4, #4]
   14748:	mov	r5, r0
   1474c:	str	r2, [sp, #4]
   14750:	ldr	ip, [r4]
   14754:	mov	r3, sl
   14758:	mov	r2, r9
   1475c:	mov	r0, r7
   14760:	str	ip, [sp]
   14764:	bl	12f24 <__assert_fail@plt+0x1f38>
   14768:	str	r6, [r5]
   1476c:	add	sp, sp, #24
   14770:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14774:	muleq	r2, ip, r2
   14778:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1477c:	cmp	r3, #0
   14780:	sub	sp, sp, #44	; 0x2c
   14784:	ldr	r4, [pc, #192]	; 1484c <__assert_fail@plt+0x3860>
   14788:	mov	r6, r2
   1478c:	movne	r4, r3
   14790:	mov	r9, r1
   14794:	mov	r8, r0
   14798:	bl	10f20 <__errno_location@plt>
   1479c:	ldr	r3, [r4, #44]	; 0x2c
   147a0:	ldr	r5, [r4, #4]
   147a4:	add	sl, r4, #8
   147a8:	cmp	r6, #0
   147ac:	orreq	r5, r5, #1
   147b0:	mov	r1, #0
   147b4:	ldr	r2, [r0]
   147b8:	str	r3, [sp, #16]
   147bc:	ldr	r3, [r4, #40]	; 0x28
   147c0:	stmib	sp, {r5, sl}
   147c4:	str	r3, [sp, #12]
   147c8:	ldr	r3, [r4]
   147cc:	mov	r7, r0
   147d0:	str	r2, [sp, #28]
   147d4:	str	r3, [sp]
   147d8:	mov	r2, r8
   147dc:	mov	r3, r9
   147e0:	mov	r0, r1
   147e4:	bl	12f24 <__assert_fail@plt+0x1f38>
   147e8:	add	r1, r0, #1
   147ec:	mov	fp, r0
   147f0:	mov	r0, r1
   147f4:	str	r1, [sp, #36]	; 0x24
   147f8:	bl	15140 <__assert_fail@plt+0x4154>
   147fc:	ldr	r3, [r4, #44]	; 0x2c
   14800:	mov	r2, r8
   14804:	str	r3, [sp, #16]
   14808:	ldr	r3, [r4, #40]	; 0x28
   1480c:	str	r5, [sp, #4]
   14810:	str	r3, [sp, #12]
   14814:	str	sl, [sp, #8]
   14818:	ldr	ip, [r4]
   1481c:	ldr	r1, [sp, #36]	; 0x24
   14820:	mov	r3, r9
   14824:	str	ip, [sp]
   14828:	str	r0, [sp, #32]
   1482c:	bl	12f24 <__assert_fail@plt+0x1f38>
   14830:	ldr	r2, [sp, #28]
   14834:	cmp	r6, #0
   14838:	str	r2, [r7]
   1483c:	ldr	r0, [sp, #32]
   14840:	strne	fp, [r6]
   14844:	add	sp, sp, #44	; 0x2c
   14848:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1484c:	muleq	r2, ip, r2
   14850:	mov	r3, r2
   14854:	mov	r2, #0
   14858:	b	14778 <__assert_fail@plt+0x378c>
   1485c:	push	{r4, r5, r6, r7, r8, lr}
   14860:	ldr	r6, [pc, #116]	; 148dc <__assert_fail@plt+0x38f0>
   14864:	ldr	r3, [r6, #4]
   14868:	ldr	r7, [r6]
   1486c:	cmp	r3, #1
   14870:	movgt	r5, r7
   14874:	movgt	r4, #1
   14878:	ble	14898 <__assert_fail@plt+0x38ac>
   1487c:	ldr	r0, [r5, #12]
   14880:	bl	12880 <__assert_fail@plt+0x1894>
   14884:	ldr	r3, [r6, #4]
   14888:	add	r4, r4, #1
   1488c:	cmp	r3, r4
   14890:	add	r5, r5, #8
   14894:	bgt	1487c <__assert_fail@plt+0x3890>
   14898:	ldr	r0, [r7, #4]
   1489c:	ldr	r4, [pc, #60]	; 148e0 <__assert_fail@plt+0x38f4>
   148a0:	cmp	r0, r4
   148a4:	beq	148b8 <__assert_fail@plt+0x38cc>
   148a8:	bl	12880 <__assert_fail@plt+0x1894>
   148ac:	mov	r3, #256	; 0x100
   148b0:	str	r4, [r6, #12]
   148b4:	str	r3, [r6, #8]
   148b8:	ldr	r4, [pc, #36]	; 148e4 <__assert_fail@plt+0x38f8>
   148bc:	cmp	r7, r4
   148c0:	beq	148d0 <__assert_fail@plt+0x38e4>
   148c4:	mov	r0, r7
   148c8:	bl	12880 <__assert_fail@plt+0x1894>
   148cc:	str	r4, [r6]
   148d0:	mov	r3, #1
   148d4:	str	r3, [r6, #4]
   148d8:	pop	{r4, r5, r6, r7, r8, pc}
   148dc:	andeq	r8, r2, r8, lsl #2
   148e0:	muleq	r2, ip, r1
   148e4:	andeq	r8, r2, r0, lsl r1
   148e8:	ldr	r3, [pc, #4]	; 148f4 <__assert_fail@plt+0x3908>
   148ec:	mvn	r2, #0
   148f0:	b	14438 <__assert_fail@plt+0x344c>
   148f4:	muleq	r2, ip, r2
   148f8:	ldr	r3, [pc]	; 14900 <__assert_fail@plt+0x3914>
   148fc:	b	14438 <__assert_fail@plt+0x344c>
   14900:	muleq	r2, ip, r2
   14904:	mov	r1, r0
   14908:	ldr	r3, [pc, #8]	; 14918 <__assert_fail@plt+0x392c>
   1490c:	mvn	r2, #0
   14910:	mov	r0, #0
   14914:	b	14438 <__assert_fail@plt+0x344c>
   14918:	muleq	r2, ip, r2
   1491c:	mov	r2, r1
   14920:	ldr	r3, [pc, #8]	; 14930 <__assert_fail@plt+0x3944>
   14924:	mov	r1, r0
   14928:	mov	r0, #0
   1492c:	b	14438 <__assert_fail@plt+0x344c>
   14930:	muleq	r2, ip, r2
   14934:	push	{r4, r5, lr}
   14938:	sub	sp, sp, #52	; 0x34
   1493c:	mov	r5, r2
   14940:	mov	r4, r0
   14944:	mov	r0, sp
   14948:	bl	12dd4 <__assert_fail@plt+0x1de8>
   1494c:	mov	r3, sp
   14950:	mov	r1, r5
   14954:	mov	r0, r4
   14958:	mvn	r2, #0
   1495c:	bl	14438 <__assert_fail@plt+0x344c>
   14960:	add	sp, sp, #52	; 0x34
   14964:	pop	{r4, r5, pc}
   14968:	push	{r4, r5, r6, lr}
   1496c:	sub	sp, sp, #48	; 0x30
   14970:	mov	r5, r2
   14974:	mov	r6, r3
   14978:	mov	r4, r0
   1497c:	mov	r0, sp
   14980:	bl	12dd4 <__assert_fail@plt+0x1de8>
   14984:	mov	r3, sp
   14988:	mov	r2, r6
   1498c:	mov	r1, r5
   14990:	mov	r0, r4
   14994:	bl	14438 <__assert_fail@plt+0x344c>
   14998:	add	sp, sp, #48	; 0x30
   1499c:	pop	{r4, r5, r6, pc}
   149a0:	mov	r2, r1
   149a4:	mov	r1, r0
   149a8:	mov	r0, #0
   149ac:	b	14934 <__assert_fail@plt+0x3948>
   149b0:	mov	r3, r2
   149b4:	mov	r2, r1
   149b8:	mov	r1, r0
   149bc:	mov	r0, #0
   149c0:	b	14968 <__assert_fail@plt+0x397c>
   149c4:	push	{r4, r5, r6, r7, r8, lr}
   149c8:	mov	r7, r0
   149cc:	ldr	lr, [pc, #100]	; 14a38 <__assert_fail@plt+0x3a4c>
   149d0:	mov	r8, r1
   149d4:	mov	r4, r2
   149d8:	ldm	lr!, {r0, r1, r2, r3}
   149dc:	sub	sp, sp, #48	; 0x30
   149e0:	mov	ip, sp
   149e4:	lsr	r5, r4, #5
   149e8:	stmia	ip!, {r0, r1, r2, r3}
   149ec:	add	r6, sp, #8
   149f0:	ldm	lr!, {r0, r1, r2, r3}
   149f4:	and	r4, r4, #31
   149f8:	stmia	ip!, {r0, r1, r2, r3}
   149fc:	ldm	lr, {r0, r1, r2, r3}
   14a00:	stm	ip, {r0, r1, r2, r3}
   14a04:	mov	r2, r8
   14a08:	ldr	lr, [r6, r5, lsl #2]
   14a0c:	mov	r1, r7
   14a10:	mov	r3, sp
   14a14:	lsr	ip, lr, r4
   14a18:	eor	ip, ip, #1
   14a1c:	and	ip, ip, #1
   14a20:	mov	r0, #0
   14a24:	eor	r4, lr, ip, lsl r4
   14a28:	str	r4, [r6, r5, lsl #2]
   14a2c:	bl	14438 <__assert_fail@plt+0x344c>
   14a30:	add	sp, sp, #48	; 0x30
   14a34:	pop	{r4, r5, r6, r7, r8, pc}
   14a38:	muleq	r2, ip, r2
   14a3c:	mov	r2, r1
   14a40:	mvn	r1, #0
   14a44:	b	149c4 <__assert_fail@plt+0x39d8>
   14a48:	mov	r2, #58	; 0x3a
   14a4c:	mvn	r1, #0
   14a50:	b	149c4 <__assert_fail@plt+0x39d8>
   14a54:	mov	r2, #58	; 0x3a
   14a58:	b	149c4 <__assert_fail@plt+0x39d8>
   14a5c:	push	{r4, r5, r6, r7, lr}
   14a60:	sub	sp, sp, #100	; 0x64
   14a64:	mov	r6, r0
   14a68:	mov	r0, sp
   14a6c:	mov	r7, r2
   14a70:	bl	12dd4 <__assert_fail@plt+0x1de8>
   14a74:	mov	ip, sp
   14a78:	add	lr, sp, #48	; 0x30
   14a7c:	ldm	ip!, {r0, r1, r2, r3}
   14a80:	stmia	lr!, {r0, r1, r2, r3}
   14a84:	ldm	ip!, {r0, r1, r2, r3}
   14a88:	ldr	r5, [sp, #60]	; 0x3c
   14a8c:	stmia	lr!, {r0, r1, r2, r3}
   14a90:	mvn	r4, r5
   14a94:	ldm	ip, {r0, r1, r2, r3}
   14a98:	and	ip, r4, #67108864	; 0x4000000
   14a9c:	eor	ip, ip, r5
   14aa0:	str	ip, [sp, #60]	; 0x3c
   14aa4:	stm	lr, {r0, r1, r2, r3}
   14aa8:	mov	r1, r7
   14aac:	mov	r0, r6
   14ab0:	add	r3, sp, #48	; 0x30
   14ab4:	mvn	r2, #0
   14ab8:	bl	14438 <__assert_fail@plt+0x344c>
   14abc:	add	sp, sp, #100	; 0x64
   14ac0:	pop	{r4, r5, r6, r7, pc}
   14ac4:	push	{r4, r5, r6, r7, r8, lr}
   14ac8:	mov	r5, r1
   14acc:	ldr	lr, [pc, #100]	; 14b38 <__assert_fail@plt+0x3b4c>
   14ad0:	mov	r4, r2
   14ad4:	mov	r7, r0
   14ad8:	mov	r8, r3
   14adc:	ldm	lr!, {r0, r1, r2, r3}
   14ae0:	sub	sp, sp, #48	; 0x30
   14ae4:	mov	ip, sp
   14ae8:	mov	r6, #10
   14aec:	stmia	ip!, {r0, r1, r2, r3}
   14af0:	cmp	r4, #0
   14af4:	cmpne	r5, #0
   14af8:	ldm	lr!, {r0, r1, r2, r3}
   14afc:	str	r6, [sp]
   14b00:	stmia	ip!, {r0, r1, r2, r3}
   14b04:	ldm	lr, {r0, r1, r2, r3}
   14b08:	stm	ip, {r0, r1, r2, r3}
   14b0c:	beq	14b34 <__assert_fail@plt+0x3b48>
   14b10:	mov	r3, sp
   14b14:	mov	r1, r8
   14b18:	mov	r0, r7
   14b1c:	ldr	r2, [sp, #72]	; 0x48
   14b20:	str	r5, [sp, #40]	; 0x28
   14b24:	str	r4, [sp, #44]	; 0x2c
   14b28:	bl	14438 <__assert_fail@plt+0x344c>
   14b2c:	add	sp, sp, #48	; 0x30
   14b30:	pop	{r4, r5, r6, r7, r8, pc}
   14b34:	bl	10fd4 <abort@plt>
   14b38:	muleq	r2, ip, r2
   14b3c:	push	{lr}		; (str lr, [sp, #-4]!)
   14b40:	sub	sp, sp, #12
   14b44:	mvn	ip, #0
   14b48:	str	ip, [sp]
   14b4c:	bl	14ac4 <__assert_fail@plt+0x3ad8>
   14b50:	add	sp, sp, #12
   14b54:	pop	{pc}		; (ldr pc, [sp], #4)
   14b58:	push	{lr}		; (str lr, [sp, #-4]!)
   14b5c:	sub	sp, sp, #12
   14b60:	mvn	ip, #0
   14b64:	mov	r3, r2
   14b68:	str	ip, [sp]
   14b6c:	mov	r2, r1
   14b70:	mov	r1, r0
   14b74:	mov	r0, #0
   14b78:	bl	14ac4 <__assert_fail@plt+0x3ad8>
   14b7c:	add	sp, sp, #12
   14b80:	pop	{pc}		; (ldr pc, [sp], #4)
   14b84:	push	{lr}		; (str lr, [sp, #-4]!)
   14b88:	sub	sp, sp, #12
   14b8c:	str	r3, [sp]
   14b90:	mov	r3, r2
   14b94:	mov	r2, r1
   14b98:	mov	r1, r0
   14b9c:	mov	r0, #0
   14ba0:	bl	14ac4 <__assert_fail@plt+0x3ad8>
   14ba4:	add	sp, sp, #12
   14ba8:	pop	{pc}		; (ldr pc, [sp], #4)
   14bac:	ldr	r3, [pc]	; 14bb4 <__assert_fail@plt+0x3bc8>
   14bb0:	b	14438 <__assert_fail@plt+0x344c>
   14bb4:	andeq	r8, r2, r8, lsl r1
   14bb8:	mov	r2, r1
   14bbc:	ldr	r3, [pc, #8]	; 14bcc <__assert_fail@plt+0x3be0>
   14bc0:	mov	r1, r0
   14bc4:	mov	r0, #0
   14bc8:	b	14438 <__assert_fail@plt+0x344c>
   14bcc:	andeq	r8, r2, r8, lsl r1
   14bd0:	ldr	r3, [pc, #4]	; 14bdc <__assert_fail@plt+0x3bf0>
   14bd4:	mvn	r2, #0
   14bd8:	b	14438 <__assert_fail@plt+0x344c>
   14bdc:	andeq	r8, r2, r8, lsl r1
   14be0:	mov	r1, r0
   14be4:	ldr	r3, [pc, #8]	; 14bf4 <__assert_fail@plt+0x3c08>
   14be8:	mvn	r2, #0
   14bec:	mov	r0, #0
   14bf0:	b	14438 <__assert_fail@plt+0x344c>
   14bf4:	andeq	r8, r2, r8, lsl r1
   14bf8:	push	{r4, r5, r6, lr}
   14bfc:	sub	sp, sp, #32
   14c00:	cmp	r1, #0
   14c04:	mov	r4, r0
   14c08:	ldr	r5, [sp, #48]	; 0x30
   14c0c:	ldr	r6, [sp, #52]	; 0x34
   14c10:	beq	14f28 <__assert_fail@plt+0x3f3c>
   14c14:	stm	sp, {r2, r3}
   14c18:	mov	r3, r1
   14c1c:	ldr	r2, [pc, #808]	; 14f4c <__assert_fail@plt+0x3f60>
   14c20:	mov	r1, #1
   14c24:	bl	10f5c <__fprintf_chk@plt>
   14c28:	mov	r2, #5
   14c2c:	ldr	r1, [pc, #796]	; 14f50 <__assert_fail@plt+0x3f64>
   14c30:	mov	r0, #0
   14c34:	bl	10e00 <dcgettext@plt>
   14c38:	ldr	r3, [pc, #788]	; 14f54 <__assert_fail@plt+0x3f68>
   14c3c:	ldr	r2, [pc, #788]	; 14f58 <__assert_fail@plt+0x3f6c>
   14c40:	str	r3, [sp]
   14c44:	mov	r1, #1
   14c48:	mov	r3, r0
   14c4c:	mov	r0, r4
   14c50:	bl	10f5c <__fprintf_chk@plt>
   14c54:	mov	r1, r4
   14c58:	mov	r0, #10
   14c5c:	bl	10df4 <fputc_unlocked@plt>
   14c60:	mov	r2, #5
   14c64:	ldr	r1, [pc, #752]	; 14f5c <__assert_fail@plt+0x3f70>
   14c68:	mov	r0, #0
   14c6c:	bl	10e00 <dcgettext@plt>
   14c70:	mov	r1, #1
   14c74:	ldr	r3, [pc, #740]	; 14f60 <__assert_fail@plt+0x3f74>
   14c78:	mov	r2, r0
   14c7c:	mov	r0, r4
   14c80:	bl	10f5c <__fprintf_chk@plt>
   14c84:	mov	r1, r4
   14c88:	mov	r0, #10
   14c8c:	bl	10df4 <fputc_unlocked@plt>
   14c90:	cmp	r6, #9
   14c94:	ldrls	pc, [pc, r6, lsl #2]
   14c98:	b	14f40 <__assert_fail@plt+0x3f54>
   14c9c:	andeq	r4, r1, r0, lsr #26
   14ca0:	andeq	r4, r1, r8, lsr #26
   14ca4:	andeq	r4, r1, r4, asr sp
   14ca8:	andeq	r4, r1, r8, lsl #27
   14cac:	andeq	r4, r1, r4, asr #27
   14cb0:	andeq	r4, r1, r0, lsl #28
   14cb4:	andeq	r4, r1, ip, lsr lr
   14cb8:	andeq	r4, r1, r0, lsl #29
   14cbc:	ldrdeq	r4, [r1], -r0
   14cc0:	andeq	r4, r1, r4, asr #25
   14cc4:	ldr	r1, [pc, #664]	; 14f64 <__assert_fail@plt+0x3f78>
   14cc8:	mov	r2, #5
   14ccc:	mov	r0, #0
   14cd0:	bl	10e00 <dcgettext@plt>
   14cd4:	ldr	ip, [r5, #32]
   14cd8:	ldr	r1, [r5, #28]
   14cdc:	ldr	r2, [r5, #24]
   14ce0:	ldr	r3, [r5]
   14ce4:	ldr	r6, [r5, #20]
   14ce8:	str	ip, [sp, #28]
   14cec:	ldr	lr, [r5, #16]
   14cf0:	str	r1, [sp, #24]
   14cf4:	ldr	ip, [r5, #12]
   14cf8:	str	r2, [sp, #20]
   14cfc:	ldr	r1, [r5, #8]
   14d00:	ldr	r2, [r5, #4]
   14d04:	str	r6, [sp, #16]
   14d08:	stmib	sp, {r1, ip, lr}
   14d0c:	mov	r1, #1
   14d10:	str	r2, [sp]
   14d14:	mov	r2, r0
   14d18:	mov	r0, r4
   14d1c:	bl	10f5c <__fprintf_chk@plt>
   14d20:	add	sp, sp, #32
   14d24:	pop	{r4, r5, r6, pc}
   14d28:	mov	r2, #5
   14d2c:	ldr	r1, [pc, #564]	; 14f68 <__assert_fail@plt+0x3f7c>
   14d30:	mov	r0, #0
   14d34:	bl	10e00 <dcgettext@plt>
   14d38:	ldr	r3, [r5]
   14d3c:	mov	r1, #1
   14d40:	mov	r2, r0
   14d44:	mov	r0, r4
   14d48:	add	sp, sp, #32
   14d4c:	pop	{r4, r5, r6, lr}
   14d50:	b	10f5c <__fprintf_chk@plt>
   14d54:	mov	r2, #5
   14d58:	ldr	r1, [pc, #524]	; 14f6c <__assert_fail@plt+0x3f80>
   14d5c:	mov	r0, #0
   14d60:	bl	10e00 <dcgettext@plt>
   14d64:	ldr	r2, [r5, #4]
   14d68:	ldr	r3, [r5]
   14d6c:	mov	r1, #1
   14d70:	str	r2, [sp, #48]	; 0x30
   14d74:	mov	r2, r0
   14d78:	mov	r0, r4
   14d7c:	add	sp, sp, #32
   14d80:	pop	{r4, r5, r6, lr}
   14d84:	b	10f5c <__fprintf_chk@plt>
   14d88:	mov	r2, #5
   14d8c:	ldr	r1, [pc, #476]	; 14f70 <__assert_fail@plt+0x3f84>
   14d90:	mov	r0, #0
   14d94:	bl	10e00 <dcgettext@plt>
   14d98:	ldr	r1, [r5, #8]
   14d9c:	ldr	r2, [r5, #4]
   14da0:	ldr	r3, [r5]
   14da4:	str	r1, [sp, #52]	; 0x34
   14da8:	str	r2, [sp, #48]	; 0x30
   14dac:	mov	r1, #1
   14db0:	mov	r2, r0
   14db4:	mov	r0, r4
   14db8:	add	sp, sp, #32
   14dbc:	pop	{r4, r5, r6, lr}
   14dc0:	b	10f5c <__fprintf_chk@plt>
   14dc4:	mov	r2, #5
   14dc8:	ldr	r1, [pc, #420]	; 14f74 <__assert_fail@plt+0x3f88>
   14dcc:	mov	r0, #0
   14dd0:	bl	10e00 <dcgettext@plt>
   14dd4:	ldr	r1, [r5, #8]
   14dd8:	ldr	ip, [r5, #12]
   14ddc:	ldr	r2, [r5, #4]
   14de0:	ldr	r3, [r5]
   14de4:	stmib	sp, {r1, ip}
   14de8:	str	r2, [sp]
   14dec:	mov	r1, #1
   14df0:	mov	r2, r0
   14df4:	mov	r0, r4
   14df8:	bl	10f5c <__fprintf_chk@plt>
   14dfc:	b	14d20 <__assert_fail@plt+0x3d34>
   14e00:	mov	r2, #5
   14e04:	ldr	r1, [pc, #364]	; 14f78 <__assert_fail@plt+0x3f8c>
   14e08:	mov	r0, #0
   14e0c:	bl	10e00 <dcgettext@plt>
   14e10:	add	r1, r5, #8
   14e14:	ldr	r2, [r5, #4]
   14e18:	ldm	r1, {r1, ip, lr}
   14e1c:	ldr	r3, [r5]
   14e20:	str	r2, [sp]
   14e24:	stmib	sp, {r1, ip, lr}
   14e28:	mov	r1, #1
   14e2c:	mov	r2, r0
   14e30:	mov	r0, r4
   14e34:	bl	10f5c <__fprintf_chk@plt>
   14e38:	b	14d20 <__assert_fail@plt+0x3d34>
   14e3c:	mov	r2, #5
   14e40:	ldr	r1, [pc, #308]	; 14f7c <__assert_fail@plt+0x3f90>
   14e44:	mov	r0, #0
   14e48:	bl	10e00 <dcgettext@plt>
   14e4c:	add	r1, r5, #8
   14e50:	ldr	r2, [r5, #4]
   14e54:	ldm	r1, {r1, ip, lr}
   14e58:	ldr	r6, [r5, #20]
   14e5c:	ldr	r3, [r5]
   14e60:	stmib	sp, {r1, ip, lr}
   14e64:	mov	r1, #1
   14e68:	str	r2, [sp]
   14e6c:	str	r6, [sp, #16]
   14e70:	mov	r2, r0
   14e74:	mov	r0, r4
   14e78:	bl	10f5c <__fprintf_chk@plt>
   14e7c:	b	14d20 <__assert_fail@plt+0x3d34>
   14e80:	mov	r2, #5
   14e84:	ldr	r1, [pc, #244]	; 14f80 <__assert_fail@plt+0x3f94>
   14e88:	mov	r0, #0
   14e8c:	bl	10e00 <dcgettext@plt>
   14e90:	ldr	r2, [r5, #24]
   14e94:	ldr	r3, [r5]
   14e98:	ldr	r6, [r5, #20]
   14e9c:	ldr	lr, [r5, #16]
   14ea0:	ldr	ip, [r5, #12]
   14ea4:	str	r2, [sp, #20]
   14ea8:	ldr	r1, [r5, #8]
   14eac:	ldr	r2, [r5, #4]
   14eb0:	str	r6, [sp, #16]
   14eb4:	stmib	sp, {r1, ip, lr}
   14eb8:	mov	r1, #1
   14ebc:	str	r2, [sp]
   14ec0:	mov	r2, r0
   14ec4:	mov	r0, r4
   14ec8:	bl	10f5c <__fprintf_chk@plt>
   14ecc:	b	14d20 <__assert_fail@plt+0x3d34>
   14ed0:	mov	r2, #5
   14ed4:	ldr	r1, [pc, #168]	; 14f84 <__assert_fail@plt+0x3f98>
   14ed8:	mov	r0, #0
   14edc:	bl	10e00 <dcgettext@plt>
   14ee0:	ldr	r1, [r5, #28]
   14ee4:	ldr	r2, [r5, #24]
   14ee8:	ldr	r3, [r5]
   14eec:	ldr	r6, [r5, #20]
   14ef0:	ldr	lr, [r5, #16]
   14ef4:	str	r1, [sp, #24]
   14ef8:	ldr	ip, [r5, #12]
   14efc:	str	r2, [sp, #20]
   14f00:	ldr	r1, [r5, #8]
   14f04:	ldr	r2, [r5, #4]
   14f08:	str	r6, [sp, #16]
   14f0c:	stmib	sp, {r1, ip, lr}
   14f10:	mov	r1, #1
   14f14:	str	r2, [sp]
   14f18:	mov	r2, r0
   14f1c:	mov	r0, r4
   14f20:	bl	10f5c <__fprintf_chk@plt>
   14f24:	b	14d20 <__assert_fail@plt+0x3d34>
   14f28:	str	r3, [sp]
   14f2c:	mov	r1, #1
   14f30:	mov	r3, r2
   14f34:	ldr	r2, [pc, #76]	; 14f88 <__assert_fail@plt+0x3f9c>
   14f38:	bl	10f5c <__fprintf_chk@plt>
   14f3c:	b	14c28 <__assert_fail@plt+0x3c3c>
   14f40:	mov	r2, #5
   14f44:	ldr	r1, [pc, #64]	; 14f8c <__assert_fail@plt+0x3fa0>
   14f48:	b	14ccc <__assert_fail@plt+0x3ce0>
   14f4c:	andeq	r7, r1, r4, asr r3
   14f50:	andeq	r7, r1, r8, ror #6
   14f54:	andeq	r0, r0, r6, ror #15
   14f58:	andeq	r7, r1, r0, asr #12
   14f5c:	andeq	r7, r1, ip, ror #6
   14f60:	andeq	r7, r1, r8, lsl r4
   14f64:	andeq	r7, r1, r8, asr #10
   14f68:	andeq	r7, r1, ip, lsr r4
   14f6c:	andeq	r7, r1, ip, asr #8
   14f70:	andeq	r7, r1, r4, ror #8
   14f74:	andeq	r7, r1, r0, lsl #9
   14f78:	andeq	r7, r1, r0, lsr #9
   14f7c:	andeq	r7, r1, r4, asr #9
   14f80:	andeq	r7, r1, ip, ror #9
   14f84:	andeq	r7, r1, r8, lsl r5
   14f88:	andeq	r7, r1, r0, ror #6
   14f8c:	andeq	r7, r1, ip, ror r5
   14f90:	push	{r4, r5, lr}
   14f94:	sub	sp, sp, #12
   14f98:	ldr	r5, [sp, #24]
   14f9c:	ldr	ip, [r5]
   14fa0:	cmp	ip, #0
   14fa4:	beq	14fc0 <__assert_fail@plt+0x3fd4>
   14fa8:	mov	lr, r5
   14fac:	mov	ip, #0
   14fb0:	ldr	r4, [lr, #4]!
   14fb4:	add	ip, ip, #1
   14fb8:	cmp	r4, #0
   14fbc:	bne	14fb0 <__assert_fail@plt+0x3fc4>
   14fc0:	stm	sp, {r5, ip}
   14fc4:	bl	14bf8 <__assert_fail@plt+0x3c0c>
   14fc8:	add	sp, sp, #12
   14fcc:	pop	{r4, r5, pc}
   14fd0:	push	{r4, r5, lr}
   14fd4:	sub	sp, sp, #52	; 0x34
   14fd8:	add	r5, sp, #4
   14fdc:	ldr	r4, [sp, #64]	; 0x40
   14fe0:	mov	ip, #0
   14fe4:	sub	r4, r4, #4
   14fe8:	ldr	lr, [r4, #4]!
   14fec:	cmp	lr, #0
   14ff0:	str	lr, [r5, #4]!
   14ff4:	beq	15004 <__assert_fail@plt+0x4018>
   14ff8:	add	ip, ip, #1
   14ffc:	cmp	ip, #10
   15000:	bne	14fe8 <__assert_fail@plt+0x3ffc>
   15004:	add	lr, sp, #8
   15008:	str	ip, [sp, #4]
   1500c:	str	lr, [sp]
   15010:	bl	14bf8 <__assert_fail@plt+0x3c0c>
   15014:	add	sp, sp, #52	; 0x34
   15018:	pop	{r4, r5, pc}
   1501c:	push	{r3}		; (str r3, [sp, #-4]!)
   15020:	push	{r4, lr}
   15024:	sub	sp, sp, #60	; 0x3c
   15028:	add	lr, sp, #56	; 0x38
   1502c:	add	r3, sp, #72	; 0x48
   15030:	str	r3, [lr, #-44]!	; 0xffffffd4
   15034:	add	r4, sp, #68	; 0x44
   15038:	mov	r3, #0
   1503c:	ldr	ip, [r4, #4]!
   15040:	cmp	ip, #0
   15044:	str	ip, [lr, #4]!
   15048:	beq	15058 <__assert_fail@plt+0x406c>
   1504c:	add	r3, r3, #1
   15050:	cmp	r3, #10
   15054:	bne	1503c <__assert_fail@plt+0x4050>
   15058:	add	ip, sp, #16
   1505c:	str	r3, [sp, #4]
   15060:	str	ip, [sp]
   15064:	ldr	r3, [sp, #68]	; 0x44
   15068:	bl	14bf8 <__assert_fail@plt+0x3c0c>
   1506c:	add	sp, sp, #60	; 0x3c
   15070:	pop	{r4, lr}
   15074:	add	sp, sp, #4
   15078:	bx	lr
   1507c:	ldr	r3, [pc, #116]	; 150f8 <__assert_fail@plt+0x410c>
   15080:	push	{r4, lr}
   15084:	mov	r0, #10
   15088:	ldr	r1, [r3]
   1508c:	bl	10df4 <fputc_unlocked@plt>
   15090:	mov	r2, #5
   15094:	ldr	r1, [pc, #96]	; 150fc <__assert_fail@plt+0x4110>
   15098:	mov	r0, #0
   1509c:	bl	10e00 <dcgettext@plt>
   150a0:	ldr	r2, [pc, #88]	; 15100 <__assert_fail@plt+0x4114>
   150a4:	mov	r1, r0
   150a8:	mov	r0, #1
   150ac:	bl	10f44 <__printf_chk@plt>
   150b0:	mov	r2, #5
   150b4:	ldr	r1, [pc, #72]	; 15104 <__assert_fail@plt+0x4118>
   150b8:	mov	r0, #0
   150bc:	bl	10e00 <dcgettext@plt>
   150c0:	ldr	r3, [pc, #64]	; 15108 <__assert_fail@plt+0x411c>
   150c4:	ldr	r2, [pc, #64]	; 1510c <__assert_fail@plt+0x4120>
   150c8:	mov	r1, r0
   150cc:	mov	r0, #1
   150d0:	bl	10f44 <__printf_chk@plt>
   150d4:	mov	r2, #5
   150d8:	ldr	r1, [pc, #48]	; 15110 <__assert_fail@plt+0x4124>
   150dc:	mov	r0, #0
   150e0:	bl	10e00 <dcgettext@plt>
   150e4:	ldr	r2, [pc, #40]	; 15114 <__assert_fail@plt+0x4128>
   150e8:	pop	{r4, lr}
   150ec:	mov	r1, r0
   150f0:	mov	r0, #1
   150f4:	b	10f44 <__printf_chk@plt>
   150f8:	andeq	r8, r2, r4, ror #2
   150fc:			; <UNDEFINED> instruction: 0x000175b8
   15100:	andeq	r7, r1, ip, asr #11
   15104:	andeq	r7, r1, r4, ror #11
   15108:	andeq	r6, r1, r0, lsl #28
   1510c:	andeq	r6, r1, r8, lsr #28
   15110:	strdeq	r7, [r1], -r8
   15114:	andeq	r7, r1, r0, lsr #12
   15118:	push	{r4, lr}
   1511c:	bl	15d28 <__assert_fail@plt+0x4d3c>
   15120:	cmp	r0, #0
   15124:	popne	{r4, pc}
   15128:	bl	15660 <__assert_fail@plt+0x4674>
   1512c:	push	{r4, lr}
   15130:	bl	15d28 <__assert_fail@plt+0x4d3c>
   15134:	cmp	r0, #0
   15138:	popne	{r4, pc}
   1513c:	bl	15660 <__assert_fail@plt+0x4674>
   15140:	push	{r4, lr}
   15144:	bl	15d28 <__assert_fail@plt+0x4d3c>
   15148:	cmp	r0, #0
   1514c:	popne	{r4, pc}
   15150:	bl	15660 <__assert_fail@plt+0x4674>
   15154:	push	{r4, r5, r6, lr}
   15158:	mov	r5, r0
   1515c:	mov	r4, r1
   15160:	bl	15d54 <__assert_fail@plt+0x4d68>
   15164:	cmp	r0, #0
   15168:	popne	{r4, r5, r6, pc}
   1516c:	adds	r4, r4, #0
   15170:	movne	r4, #1
   15174:	cmp	r5, #0
   15178:	orreq	r4, r4, #1
   1517c:	cmp	r4, #0
   15180:	popeq	{r4, r5, r6, pc}
   15184:	bl	15660 <__assert_fail@plt+0x4674>
   15188:	push	{r4, lr}
   1518c:	cmp	r1, #0
   15190:	orreq	r1, r1, #1
   15194:	bl	15d54 <__assert_fail@plt+0x4d68>
   15198:	cmp	r0, #0
   1519c:	popne	{r4, pc}
   151a0:	bl	15660 <__assert_fail@plt+0x4674>
   151a4:	push	{r4, r5, r6, lr}
   151a8:	mov	r6, r0
   151ac:	mov	r5, r1
   151b0:	mov	r4, r2
   151b4:	bl	15eb4 <__assert_fail@plt+0x4ec8>
   151b8:	cmp	r0, #0
   151bc:	popne	{r4, r5, r6, pc}
   151c0:	cmp	r6, #0
   151c4:	beq	151d4 <__assert_fail@plt+0x41e8>
   151c8:	cmp	r5, #0
   151cc:	cmpne	r4, #0
   151d0:	popeq	{r4, r5, r6, pc}
   151d4:	bl	15660 <__assert_fail@plt+0x4674>
   151d8:	b	151a4 <__assert_fail@plt+0x41b8>
   151dc:	cmp	r2, #0
   151e0:	cmpne	r1, #0
   151e4:	moveq	r2, #1
   151e8:	moveq	r1, r2
   151ec:	push	{r4, lr}
   151f0:	bl	15eb4 <__assert_fail@plt+0x4ec8>
   151f4:	cmp	r0, #0
   151f8:	popne	{r4, pc}
   151fc:	bl	15660 <__assert_fail@plt+0x4674>
   15200:	mov	r2, r1
   15204:	mov	r1, r0
   15208:	mov	r0, #0
   1520c:	b	151a4 <__assert_fail@plt+0x41b8>
   15210:	mov	r2, r1
   15214:	mov	r1, r0
   15218:	mov	r0, #0
   1521c:	b	151dc <__assert_fail@plt+0x41f0>
   15220:	push	{r4, r5, r6, lr}
   15224:	subs	r6, r0, #0
   15228:	sub	sp, sp, #8
   1522c:	mov	r5, r1
   15230:	ldr	r4, [r1]
   15234:	beq	15270 <__assert_fail@plt+0x4284>
   15238:	lsr	r1, r4, #1
   1523c:	add	r3, r1, #1
   15240:	mvn	r3, r3
   15244:	cmp	r4, r3
   15248:	bhi	1526c <__assert_fail@plt+0x4280>
   1524c:	add	r4, r4, #1
   15250:	add	r4, r4, r1
   15254:	mov	r0, r6
   15258:	mov	r1, r4
   1525c:	bl	151a4 <__assert_fail@plt+0x41b8>
   15260:	str	r4, [r5]
   15264:	add	sp, sp, #8
   15268:	pop	{r4, r5, r6, pc}
   1526c:	bl	15660 <__assert_fail@plt+0x4674>
   15270:	cmp	r4, #0
   15274:	bne	15254 <__assert_fail@plt+0x4268>
   15278:	mov	r1, r2
   1527c:	mov	r0, #64	; 0x40
   15280:	str	r2, [sp, #4]
   15284:	bl	15ff4 <__assert_fail@plt+0x5008>
   15288:	ldr	r2, [sp, #4]
   1528c:	cmp	r0, #0
   15290:	movne	r4, r0
   15294:	addeq	r4, r0, #1
   15298:	b	15254 <__assert_fail@plt+0x4268>
   1529c:	mov	r2, #1
   152a0:	b	15220 <__assert_fail@plt+0x4234>
   152a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152a8:	sub	sp, sp, #12
   152ac:	ldr	r6, [r1]
   152b0:	mov	sl, r1
   152b4:	mov	r9, r0
   152b8:	asrs	r4, r6, #1
   152bc:	mov	r5, r2
   152c0:	mov	fp, r3
   152c4:	ldr	r7, [sp, #48]	; 0x30
   152c8:	bmi	15434 <__assert_fail@plt+0x4448>
   152cc:	mvn	r3, #-2147483648	; 0x80000000
   152d0:	sub	r3, r3, r4
   152d4:	cmp	r6, r3
   152d8:	movle	r3, #0
   152dc:	movgt	r3, #1
   152e0:	mvn	r8, fp
   152e4:	cmp	r3, #0
   152e8:	addeq	r4, r4, r6
   152ec:	mvnne	r4, #-2147483648	; 0x80000000
   152f0:	lsr	r8, r8, #31
   152f4:	cmp	fp, r4
   152f8:	movge	r3, #0
   152fc:	andlt	r3, r8, #1
   15300:	cmp	r3, #0
   15304:	beq	153ec <__assert_fail@plt+0x4400>
   15308:	cmp	r7, #0
   1530c:	blt	154bc <__assert_fail@plt+0x44d0>
   15310:	bne	154b4 <__assert_fail@plt+0x44c8>
   15314:	mov	r2, #64	; 0x40
   15318:	mov	r1, r7
   1531c:	mov	r0, r2
   15320:	str	r2, [sp, #4]
   15324:	bl	16200 <__assert_fail@plt+0x5214>
   15328:	ldr	r2, [sp, #4]
   1532c:	mov	r1, r7
   15330:	mov	r4, r0
   15334:	mov	r0, r2
   15338:	bl	16420 <__assert_fail@plt+0x5434>
   1533c:	ldr	r2, [sp, #4]
   15340:	sub	r1, r2, r1
   15344:	cmp	r9, #0
   15348:	sub	r3, r4, r6
   1534c:	streq	r9, [sl]
   15350:	cmp	r3, r5
   15354:	bge	153d8 <__assert_fail@plt+0x43ec>
   15358:	cmp	r5, #0
   1535c:	blt	15448 <__assert_fail@plt+0x445c>
   15360:	cmp	r6, #0
   15364:	blt	15384 <__assert_fail@plt+0x4398>
   15368:	mvn	r3, #-2147483648	; 0x80000000
   1536c:	sub	r3, r3, r5
   15370:	cmp	r6, r3
   15374:	movle	r3, #0
   15378:	movgt	r3, #1
   1537c:	cmp	r3, #0
   15380:	bne	15544 <__assert_fail@plt+0x4558>
   15384:	add	r5, r6, r5
   15388:	cmp	fp, r5
   1538c:	movge	r8, #0
   15390:	andlt	r8, r8, #1
   15394:	cmp	r8, #0
   15398:	mov	r4, r5
   1539c:	bne	15544 <__assert_fail@plt+0x4558>
   153a0:	cmp	r7, #0
   153a4:	blt	1545c <__assert_fail@plt+0x4470>
   153a8:	beq	153d4 <__assert_fail@plt+0x43e8>
   153ac:	cmp	r5, #0
   153b0:	blt	15504 <__assert_fail@plt+0x4518>
   153b4:	mov	r1, r7
   153b8:	mvn	r0, #-2147483648	; 0x80000000
   153bc:	bl	16200 <__assert_fail@plt+0x5214>
   153c0:	cmp	r5, r0
   153c4:	movle	r0, #0
   153c8:	movgt	r0, #1
   153cc:	cmp	r0, #0
   153d0:	bne	15544 <__assert_fail@plt+0x4558>
   153d4:	mul	r1, r5, r7
   153d8:	mov	r0, r9
   153dc:	bl	15154 <__assert_fail@plt+0x4168>
   153e0:	str	r4, [sl]
   153e4:	add	sp, sp, #12
   153e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153ec:	cmp	r7, #0
   153f0:	blt	15488 <__assert_fail@plt+0x449c>
   153f4:	beq	15314 <__assert_fail@plt+0x4328>
   153f8:	cmp	r4, #0
   153fc:	blt	154c4 <__assert_fail@plt+0x44d8>
   15400:	mov	r1, r7
   15404:	mvn	r0, #-2147483648	; 0x80000000
   15408:	bl	16200 <__assert_fail@plt+0x5214>
   1540c:	cmp	r0, r4
   15410:	movge	r0, #0
   15414:	movlt	r0, #1
   15418:	cmp	r0, #0
   1541c:	mvnne	r2, #-2147483648	; 0x80000000
   15420:	bne	15318 <__assert_fail@plt+0x432c>
   15424:	mul	r1, r7, r4
   15428:	cmp	r1, #63	; 0x3f
   1542c:	bgt	15344 <__assert_fail@plt+0x4358>
   15430:	b	15314 <__assert_fail@plt+0x4328>
   15434:	rsb	r3, r4, #-2147483648	; 0x80000000
   15438:	cmp	r6, r3
   1543c:	movge	r3, #0
   15440:	movlt	r3, #1
   15444:	b	152e0 <__assert_fail@plt+0x42f4>
   15448:	rsb	r3, r5, #-2147483648	; 0x80000000
   1544c:	cmp	r6, r3
   15450:	movge	r3, #0
   15454:	movlt	r3, #1
   15458:	b	1537c <__assert_fail@plt+0x4390>
   1545c:	cmp	r5, #0
   15460:	blt	154e8 <__assert_fail@plt+0x44fc>
   15464:	cmn	r7, #1
   15468:	beq	153d4 <__assert_fail@plt+0x43e8>
   1546c:	mov	r1, r7
   15470:	mov	r0, #-2147483648	; 0x80000000
   15474:	bl	16200 <__assert_fail@plt+0x5214>
   15478:	cmp	r5, r0
   1547c:	movle	r0, #0
   15480:	movgt	r0, #1
   15484:	b	153cc <__assert_fail@plt+0x43e0>
   15488:	cmp	r4, #0
   1548c:	blt	15528 <__assert_fail@plt+0x453c>
   15490:	cmn	r7, #1
   15494:	beq	15424 <__assert_fail@plt+0x4438>
   15498:	mov	r1, r7
   1549c:	mov	r0, #-2147483648	; 0x80000000
   154a0:	bl	16200 <__assert_fail@plt+0x5214>
   154a4:	cmp	r0, r4
   154a8:	movge	r0, #0
   154ac:	movlt	r0, #1
   154b0:	b	15418 <__assert_fail@plt+0x442c>
   154b4:	mov	r4, fp
   154b8:	b	15400 <__assert_fail@plt+0x4414>
   154bc:	mov	r4, fp
   154c0:	b	15490 <__assert_fail@plt+0x44a4>
   154c4:	cmn	r4, #1
   154c8:	beq	15424 <__assert_fail@plt+0x4438>
   154cc:	mov	r1, r4
   154d0:	mov	r0, #-2147483648	; 0x80000000
   154d4:	bl	16200 <__assert_fail@plt+0x5214>
   154d8:	cmp	r7, r0
   154dc:	movle	r0, #0
   154e0:	movgt	r0, #1
   154e4:	b	15418 <__assert_fail@plt+0x442c>
   154e8:	mov	r1, r7
   154ec:	mvn	r0, #-2147483648	; 0x80000000
   154f0:	bl	16200 <__assert_fail@plt+0x5214>
   154f4:	cmp	r5, r0
   154f8:	movge	r0, #0
   154fc:	movlt	r0, #1
   15500:	b	153cc <__assert_fail@plt+0x43e0>
   15504:	cmn	r5, #1
   15508:	beq	153d4 <__assert_fail@plt+0x43e8>
   1550c:	mov	r1, r5
   15510:	mov	r0, #-2147483648	; 0x80000000
   15514:	bl	16200 <__assert_fail@plt+0x5214>
   15518:	cmp	r7, r0
   1551c:	movle	r0, #0
   15520:	movgt	r0, #1
   15524:	b	153cc <__assert_fail@plt+0x43e0>
   15528:	mov	r1, r7
   1552c:	mvn	r0, #-2147483648	; 0x80000000
   15530:	bl	16200 <__assert_fail@plt+0x5214>
   15534:	cmp	r0, r4
   15538:	movle	r0, #0
   1553c:	movgt	r0, #1
   15540:	b	15418 <__assert_fail@plt+0x442c>
   15544:	bl	15660 <__assert_fail@plt+0x4674>
   15548:	push	{r4, lr}
   1554c:	mov	r1, #1
   15550:	bl	15ce0 <__assert_fail@plt+0x4cf4>
   15554:	cmp	r0, #0
   15558:	popne	{r4, pc}
   1555c:	bl	15660 <__assert_fail@plt+0x4674>
   15560:	push	{r4, lr}
   15564:	mov	r1, #1
   15568:	bl	15ce0 <__assert_fail@plt+0x4cf4>
   1556c:	cmp	r0, #0
   15570:	popne	{r4, pc}
   15574:	bl	15660 <__assert_fail@plt+0x4674>
   15578:	push	{r4, lr}
   1557c:	bl	15ce0 <__assert_fail@plt+0x4cf4>
   15580:	cmp	r0, #0
   15584:	popne	{r4, pc}
   15588:	bl	15660 <__assert_fail@plt+0x4674>
   1558c:	push	{r4, lr}
   15590:	bl	15ce0 <__assert_fail@plt+0x4cf4>
   15594:	cmp	r0, #0
   15598:	popne	{r4, pc}
   1559c:	bl	15660 <__assert_fail@plt+0x4674>
   155a0:	push	{r4, r5, r6, lr}
   155a4:	mov	r6, r0
   155a8:	mov	r0, r1
   155ac:	mov	r4, r1
   155b0:	bl	15d28 <__assert_fail@plt+0x4d3c>
   155b4:	subs	r5, r0, #0
   155b8:	beq	155d0 <__assert_fail@plt+0x45e4>
   155bc:	mov	r2, r4
   155c0:	mov	r1, r6
   155c4:	bl	10db8 <memcpy@plt>
   155c8:	mov	r0, r5
   155cc:	pop	{r4, r5, r6, pc}
   155d0:	bl	15660 <__assert_fail@plt+0x4674>
   155d4:	push	{r4, r5, r6, lr}
   155d8:	mov	r6, r0
   155dc:	mov	r0, r1
   155e0:	mov	r4, r1
   155e4:	bl	15d28 <__assert_fail@plt+0x4d3c>
   155e8:	subs	r5, r0, #0
   155ec:	beq	15604 <__assert_fail@plt+0x4618>
   155f0:	mov	r2, r4
   155f4:	mov	r1, r6
   155f8:	bl	10db8 <memcpy@plt>
   155fc:	mov	r0, r5
   15600:	pop	{r4, r5, r6, pc}
   15604:	bl	15660 <__assert_fail@plt+0x4674>
   15608:	push	{r4, r5, r6, lr}
   1560c:	mov	r6, r0
   15610:	add	r0, r1, #1
   15614:	mov	r4, r1
   15618:	bl	15d28 <__assert_fail@plt+0x4d3c>
   1561c:	subs	r5, r0, #0
   15620:	beq	15640 <__assert_fail@plt+0x4654>
   15624:	mov	r3, #0
   15628:	mov	r1, r6
   1562c:	strb	r3, [r5, r4]
   15630:	mov	r2, r4
   15634:	bl	10db8 <memcpy@plt>
   15638:	mov	r0, r5
   1563c:	pop	{r4, r5, r6, pc}
   15640:	bl	15660 <__assert_fail@plt+0x4674>
   15644:	push	{r4, lr}
   15648:	mov	r4, r0
   1564c:	bl	10f08 <strlen@plt>
   15650:	add	r1, r0, #1
   15654:	mov	r0, r4
   15658:	pop	{r4, lr}
   1565c:	b	155a0 <__assert_fail@plt+0x45b4>
   15660:	ldr	r3, [pc, #44]	; 15694 <__assert_fail@plt+0x46a8>
   15664:	push	{r4, lr}
   15668:	mov	r2, #5
   1566c:	ldr	r1, [pc, #36]	; 15698 <__assert_fail@plt+0x46ac>
   15670:	mov	r0, #0
   15674:	ldr	r4, [r3]
   15678:	bl	10e00 <dcgettext@plt>
   1567c:	ldr	r2, [pc, #24]	; 1569c <__assert_fail@plt+0x46b0>
   15680:	mov	r1, #0
   15684:	mov	r3, r0
   15688:	mov	r0, r4
   1568c:	bl	10e78 <error@plt>
   15690:	bl	10fd4 <abort@plt>
   15694:	andeq	r8, r2, r4, lsl #2
   15698:	andeq	r7, r1, r0, ror r6
   1569c:	andeq	r6, r1, r8, lsl #15
   156a0:	push	{r4, r5, r6, r7, r8, lr}
   156a4:	subs	r5, r1, #0
   156a8:	mov	r4, r0
   156ac:	blt	15720 <__assert_fail@plt+0x4734>
   156b0:	moveq	r6, #0
   156b4:	moveq	r7, #0
   156b8:	bne	156e0 <__assert_fail@plt+0x46f4>
   156bc:	ldr	r2, [r4]
   156c0:	ldr	r1, [r4, #4]
   156c4:	mov	r0, #0
   156c8:	mul	ip, r2, r7
   156cc:	umull	r2, r3, r2, r5
   156d0:	mla	r5, r5, r1, ip
   156d4:	add	r3, r5, r3
   156d8:	strd	r2, [r4]
   156dc:	pop	{r4, r5, r6, r7, r8, pc}
   156e0:	asr	r7, r5, #31
   156e4:	mov	r2, r5
   156e8:	mov	r3, r7
   156ec:	mvn	r0, #0
   156f0:	mvn	r1, #0
   156f4:	bl	16440 <__assert_fail@plt+0x5454>
   156f8:	ldrd	r2, [r4]
   156fc:	mov	r6, r5
   15700:	cmp	r1, r3
   15704:	cmpeq	r0, r2
   15708:	bcs	156bc <__assert_fail@plt+0x46d0>
   1570c:	mvn	r2, #0
   15710:	mvn	r3, #0
   15714:	mov	r0, #1
   15718:	strd	r2, [r4]
   1571c:	pop	{r4, r5, r6, r7, r8, pc}
   15720:	ldrd	r2, [r0]
   15724:	orrs	r3, r2, r3
   15728:	moveq	r6, r5
   1572c:	asreq	r7, r6, #31
   15730:	bne	1570c <__assert_fail@plt+0x4720>
   15734:	b	156bc <__assert_fail@plt+0x46d0>
   15738:	cmp	r2, #36	; 0x24
   1573c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15740:	sub	sp, sp, #20
   15744:	bhi	15cb8 <__assert_fail@plt+0x4ccc>
   15748:	cmp	r1, #0
   1574c:	mov	r8, r2
   15750:	mov	r7, r0
   15754:	mov	r5, r1
   15758:	mov	r6, r3
   1575c:	addeq	r5, sp, #4
   15760:	bl	10f20 <__errno_location@plt>
   15764:	mov	r3, #0
   15768:	str	r3, [r0]
   1576c:	mov	r9, r0
   15770:	bl	10ef0 <__ctype_b_loc@plt>
   15774:	ldrb	r3, [r7]
   15778:	mov	r2, r7
   1577c:	ldr	r0, [r0]
   15780:	b	15788 <__assert_fail@plt+0x479c>
   15784:	ldrb	r3, [r2, #1]!
   15788:	lsl	r1, r3, #1
   1578c:	ldrh	r4, [r0, r1]
   15790:	ands	r4, r4, #8192	; 0x2000
   15794:	bne	15784 <__assert_fail@plt+0x4798>
   15798:	cmp	r3, #45	; 0x2d
   1579c:	bne	157b0 <__assert_fail@plt+0x47c4>
   157a0:	mov	r4, #4
   157a4:	mov	r0, r4
   157a8:	add	sp, sp, #20
   157ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157b0:	mov	r2, r8
   157b4:	mov	r3, r4
   157b8:	mov	r1, r5
   157bc:	mov	r0, r7
   157c0:	bl	10dc4 <__strtoull_internal@plt>
   157c4:	ldr	r8, [r5]
   157c8:	cmp	r7, r8
   157cc:	mov	r2, r0
   157d0:	str	r0, [sp, #8]
   157d4:	str	r1, [sp, #12]
   157d8:	beq	15824 <__assert_fail@plt+0x4838>
   157dc:	ldr	r4, [r9]
   157e0:	cmp	r4, #0
   157e4:	bne	15814 <__assert_fail@plt+0x4828>
   157e8:	ldr	r3, [sp, #56]	; 0x38
   157ec:	cmp	r3, #0
   157f0:	beq	15800 <__assert_fail@plt+0x4814>
   157f4:	ldrb	r9, [r8]
   157f8:	cmp	r9, #0
   157fc:	bne	1585c <__assert_fail@plt+0x4870>
   15800:	mov	r0, r4
   15804:	str	r2, [r6]
   15808:	str	r1, [r6, #4]
   1580c:	add	sp, sp, #20
   15810:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15814:	cmp	r4, #34	; 0x22
   15818:	bne	157a0 <__assert_fail@plt+0x47b4>
   1581c:	mov	r4, #1
   15820:	b	157e8 <__assert_fail@plt+0x47fc>
   15824:	ldr	r3, [sp, #56]	; 0x38
   15828:	cmp	r3, #0
   1582c:	beq	157a0 <__assert_fail@plt+0x47b4>
   15830:	ldrb	r1, [r8]
   15834:	cmp	r1, #0
   15838:	beq	157a0 <__assert_fail@plt+0x47b4>
   1583c:	mov	r0, r3
   15840:	bl	10f14 <strchr@plt>
   15844:	cmp	r0, #0
   15848:	beq	157a0 <__assert_fail@plt+0x47b4>
   1584c:	ldrb	r9, [r8]
   15850:	mov	r2, #1
   15854:	mov	r3, #0
   15858:	strd	r2, [sp, #8]
   1585c:	mov	r1, r9
   15860:	ldr	r0, [sp, #56]	; 0x38
   15864:	bl	10f14 <strchr@plt>
   15868:	cmp	r0, #0
   1586c:	beq	15c74 <__assert_fail@plt+0x4c88>
   15870:	sub	r3, r9, #69	; 0x45
   15874:	cmp	r3, #47	; 0x2f
   15878:	ldrls	pc, [pc, r3, lsl #2]
   1587c:	b	15940 <__assert_fail@plt+0x4954>
   15880:	andeq	r5, r1, r0, lsr sl
   15884:	andeq	r5, r1, r0, asr #18
   15888:	andeq	r5, r1, r0, lsr sl
   1588c:	andeq	r5, r1, r0, asr #18
   15890:	andeq	r5, r1, r0, asr #18
   15894:	andeq	r5, r1, r0, asr #18
   15898:	andeq	r5, r1, r0, lsr sl
   1589c:	andeq	r5, r1, r0, asr #18
   158a0:	andeq	r5, r1, r0, lsr sl
   158a4:	andeq	r5, r1, r0, asr #18
   158a8:	andeq	r5, r1, r0, asr #18
   158ac:	andeq	r5, r1, r0, lsr sl
   158b0:	andeq	r5, r1, r0, asr #18
   158b4:	andeq	r5, r1, r0, asr #18
   158b8:	andeq	r5, r1, r0, asr #18
   158bc:	andeq	r5, r1, r0, lsr sl
   158c0:	andeq	r5, r1, r0, asr #18
   158c4:	andeq	r5, r1, r0, asr #18
   158c8:	andeq	r5, r1, r0, asr #18
   158cc:	andeq	r5, r1, r0, asr #18
   158d0:	andeq	r5, r1, r0, lsr sl
   158d4:	andeq	r5, r1, r0, lsr sl
   158d8:	andeq	r5, r1, r0, asr #18
   158dc:	andeq	r5, r1, r0, asr #18
   158e0:	andeq	r5, r1, r0, asr #18
   158e4:	andeq	r5, r1, r0, asr #18
   158e8:	andeq	r5, r1, r0, asr #18
   158ec:	andeq	r5, r1, r0, asr #18
   158f0:	andeq	r5, r1, r0, asr #18
   158f4:	andeq	r5, r1, r0, asr #18
   158f8:	andeq	r5, r1, r0, asr #18
   158fc:	andeq	r5, r1, r0, asr #18
   15900:	andeq	r5, r1, r0, asr #18
   15904:	andeq	r5, r1, r0, asr #18
   15908:	andeq	r5, r1, r0, lsr sl
   1590c:	andeq	r5, r1, r0, asr #18
   15910:	andeq	r5, r1, r0, asr #18
   15914:	andeq	r5, r1, r0, asr #18
   15918:	andeq	r5, r1, r0, lsr sl
   1591c:	andeq	r5, r1, r0, asr #18
   15920:	andeq	r5, r1, r0, lsr sl
   15924:	andeq	r5, r1, r0, asr #18
   15928:	andeq	r5, r1, r0, asr #18
   1592c:	andeq	r5, r1, r0, asr #18
   15930:	andeq	r5, r1, r0, asr #18
   15934:	andeq	r5, r1, r0, asr #18
   15938:	andeq	r5, r1, r0, asr #18
   1593c:	andeq	r5, r1, r0, lsr sl
   15940:	mov	r7, #1
   15944:	mov	sl, #1024	; 0x400
   15948:	sub	r9, r9, #66	; 0x42
   1594c:	cmp	r9, #53	; 0x35
   15950:	ldrls	pc, [pc, r9, lsl #2]
   15954:	b	15c74 <__assert_fail@plt+0x4c88>
   15958:	andeq	r5, r1, r0, asr #23
   1595c:	andeq	r5, r1, r4, ror ip
   15960:	andeq	r5, r1, r4, ror ip
   15964:	muleq	r1, r8, fp
   15968:	andeq	r5, r1, r4, ror ip
   1596c:	andeq	r5, r1, r0, ror fp
   15970:	andeq	r5, r1, r4, ror ip
   15974:	andeq	r5, r1, r4, ror ip
   15978:	andeq	r5, r1, r4, ror ip
   1597c:	andeq	r5, r1, r0, asr fp
   15980:	andeq	r5, r1, r4, ror ip
   15984:	andeq	r5, r1, ip, lsl ip
   15988:	andeq	r5, r1, r4, ror ip
   1598c:	andeq	r5, r1, r4, ror ip
   15990:	strdeq	r5, [r1], -r4
   15994:	andeq	r5, r1, r4, ror ip
   15998:	andeq	r5, r1, r4, ror ip
   1599c:	andeq	r5, r1, r4, ror ip
   159a0:	andeq	r5, r1, ip, asr #24
   159a4:	andeq	r5, r1, r4, ror ip
   159a8:	andeq	r5, r1, r4, ror ip
   159ac:	andeq	r5, r1, r4, ror ip
   159b0:	andeq	r5, r1, r4, ror ip
   159b4:	andeq	r5, r1, r8, lsr #22
   159b8:	strdeq	r5, [r1], -r4
   159bc:	andeq	r5, r1, r4, ror ip
   159c0:	andeq	r5, r1, r4, ror ip
   159c4:	andeq	r5, r1, r4, ror ip
   159c8:	andeq	r5, r1, r4, ror ip
   159cc:	andeq	r5, r1, r4, ror ip
   159d0:	andeq	r5, r1, r4, ror ip
   159d4:	andeq	r5, r1, r4, ror ip
   159d8:	andeq	r5, r1, r0, asr #21
   159dc:			; <UNDEFINED> instruction: 0x00015ab0
   159e0:	andeq	r5, r1, r4, ror ip
   159e4:	andeq	r5, r1, r4, ror ip
   159e8:	andeq	r5, r1, r4, ror ip
   159ec:	andeq	r5, r1, r0, ror fp
   159f0:	andeq	r5, r1, r4, ror ip
   159f4:	andeq	r5, r1, r4, ror ip
   159f8:	andeq	r5, r1, r4, ror ip
   159fc:	andeq	r5, r1, r0, asr fp
   15a00:	andeq	r5, r1, r4, ror ip
   15a04:	andeq	r5, r1, ip, lsl ip
   15a08:	andeq	r5, r1, r4, ror ip
   15a0c:	andeq	r5, r1, r4, ror ip
   15a10:	andeq	r5, r1, r4, ror ip
   15a14:	andeq	r5, r1, r4, ror ip
   15a18:	andeq	r5, r1, r4, ror ip
   15a1c:	andeq	r5, r1, r4, ror ip
   15a20:	andeq	r5, r1, ip, asr #24
   15a24:	andeq	r5, r1, r4, ror ip
   15a28:	andeq	r5, r1, r4, ror ip
   15a2c:	andeq	r5, r1, ip, ror #20
   15a30:	mov	r1, #48	; 0x30
   15a34:	ldr	r0, [sp, #56]	; 0x38
   15a38:	bl	10f14 <strchr@plt>
   15a3c:	cmp	r0, #0
   15a40:	beq	15940 <__assert_fail@plt+0x4954>
   15a44:	ldrb	r3, [r8, #1]
   15a48:	cmp	r3, #68	; 0x44
   15a4c:	beq	15a60 <__assert_fail@plt+0x4a74>
   15a50:	cmp	r3, #105	; 0x69
   15a54:	beq	15c84 <__assert_fail@plt+0x4c98>
   15a58:	cmp	r3, #66	; 0x42
   15a5c:	bne	15940 <__assert_fail@plt+0x4954>
   15a60:	mov	r7, #2
   15a64:	mov	sl, #1000	; 0x3e8
   15a68:	b	15948 <__assert_fail@plt+0x495c>
   15a6c:	ldrd	r2, [sp, #8]
   15a70:	cmp	r2, #0
   15a74:	sbcs	r1, r3, #0
   15a78:	blt	15c9c <__assert_fail@plt+0x4cb0>
   15a7c:	adds	r2, r2, r2
   15a80:	adc	r3, r3, r3
   15a84:	mov	r1, r3
   15a88:	mov	r9, #0
   15a8c:	str	r2, [sp, #8]
   15a90:	str	r3, [sp, #12]
   15a94:	add	r3, r8, r7
   15a98:	str	r3, [r5]
   15a9c:	ldrb	r3, [r8, r7]
   15aa0:	orr	r4, r4, r9
   15aa4:	cmp	r3, #0
   15aa8:	orrne	r4, r4, #2
   15aac:	b	15800 <__assert_fail@plt+0x4814>
   15ab0:	ldr	r2, [sp, #8]
   15ab4:	ldr	r1, [sp, #12]
   15ab8:	mov	r9, #0
   15abc:	b	15a94 <__assert_fail@plt+0x4aa8>
   15ac0:	ldrd	r2, [sp, #8]
   15ac4:	ldr	r1, [pc, #512]	; 15ccc <__assert_fail@plt+0x4ce0>
   15ac8:	mvn	r0, #0
   15acc:	cmp	r3, r1
   15ad0:	cmpeq	r2, r0
   15ad4:	bhi	15c9c <__assert_fail@plt+0x4cb0>
   15ad8:	lsl	r1, r3, #9
   15adc:	orr	r1, r1, r2, lsr #23
   15ae0:	lsl	r2, r2, #9
   15ae4:	str	r1, [sp, #12]
   15ae8:	str	r2, [sp, #8]
   15aec:	mov	r9, #0
   15af0:	b	15a94 <__assert_fail@plt+0x4aa8>
   15af4:	mov	fp, #7
   15af8:	mov	r9, #0
   15afc:	add	r8, sp, #8
   15b00:	mov	r1, sl
   15b04:	mov	r0, r8
   15b08:	bl	156a0 <__assert_fail@plt+0x46b4>
   15b0c:	subs	fp, fp, #1
   15b10:	orr	r9, r9, r0
   15b14:	bne	15b00 <__assert_fail@plt+0x4b14>
   15b18:	ldr	r8, [r5]
   15b1c:	ldr	r2, [sp, #8]
   15b20:	ldr	r1, [sp, #12]
   15b24:	b	15a94 <__assert_fail@plt+0x4aa8>
   15b28:	mov	fp, #8
   15b2c:	mov	r9, #0
   15b30:	add	r8, sp, fp
   15b34:	mov	r1, sl
   15b38:	mov	r0, r8
   15b3c:	bl	156a0 <__assert_fail@plt+0x46b4>
   15b40:	subs	fp, fp, #1
   15b44:	orr	r9, r9, r0
   15b48:	bne	15b34 <__assert_fail@plt+0x4b48>
   15b4c:	b	15b18 <__assert_fail@plt+0x4b2c>
   15b50:	mov	r1, sl
   15b54:	add	r0, sp, #8
   15b58:	bl	156a0 <__assert_fail@plt+0x46b4>
   15b5c:	ldr	r8, [r5]
   15b60:	ldr	r2, [sp, #8]
   15b64:	ldr	r1, [sp, #12]
   15b68:	mov	r9, r0
   15b6c:	b	15a94 <__assert_fail@plt+0x4aa8>
   15b70:	mov	fp, #3
   15b74:	mov	r9, #0
   15b78:	add	r8, sp, #8
   15b7c:	mov	r1, sl
   15b80:	mov	r0, r8
   15b84:	bl	156a0 <__assert_fail@plt+0x46b4>
   15b88:	subs	fp, fp, #1
   15b8c:	orr	r9, r9, r0
   15b90:	bne	15b7c <__assert_fail@plt+0x4b90>
   15b94:	b	15b18 <__assert_fail@plt+0x4b2c>
   15b98:	mov	fp, #6
   15b9c:	mov	r9, #0
   15ba0:	add	r8, sp, #8
   15ba4:	mov	r1, sl
   15ba8:	mov	r0, r8
   15bac:	bl	156a0 <__assert_fail@plt+0x46b4>
   15bb0:	subs	fp, fp, #1
   15bb4:	orr	r9, r9, r0
   15bb8:	bne	15ba4 <__assert_fail@plt+0x4bb8>
   15bbc:	b	15b18 <__assert_fail@plt+0x4b2c>
   15bc0:	ldrd	r0, [sp, #8]
   15bc4:	ldr	r3, [pc, #260]	; 15cd0 <__assert_fail@plt+0x4ce4>
   15bc8:	mvn	r2, #0
   15bcc:	cmp	r1, r3
   15bd0:	cmpeq	r0, r2
   15bd4:	bhi	15c9c <__assert_fail@plt+0x4cb0>
   15bd8:	lsl	r1, r1, #10
   15bdc:	orr	r1, r1, r0, lsr #22
   15be0:	lsl	r2, r0, #10
   15be4:	str	r1, [sp, #12]
   15be8:	str	r2, [sp, #8]
   15bec:	mov	r9, #0
   15bf0:	b	15a94 <__assert_fail@plt+0x4aa8>
   15bf4:	mov	fp, #5
   15bf8:	mov	r9, #0
   15bfc:	add	r8, sp, #8
   15c00:	mov	r1, sl
   15c04:	mov	r0, r8
   15c08:	bl	156a0 <__assert_fail@plt+0x46b4>
   15c0c:	subs	fp, fp, #1
   15c10:	orr	r9, r9, r0
   15c14:	bne	15c00 <__assert_fail@plt+0x4c14>
   15c18:	b	15b18 <__assert_fail@plt+0x4b2c>
   15c1c:	mov	r1, sl
   15c20:	add	r0, sp, #8
   15c24:	bl	156a0 <__assert_fail@plt+0x46b4>
   15c28:	mov	r1, sl
   15c2c:	mov	r9, r0
   15c30:	add	r0, sp, #8
   15c34:	bl	156a0 <__assert_fail@plt+0x46b4>
   15c38:	ldr	r8, [r5]
   15c3c:	ldr	r2, [sp, #8]
   15c40:	ldr	r1, [sp, #12]
   15c44:	orr	r9, r9, r0
   15c48:	b	15a94 <__assert_fail@plt+0x4aa8>
   15c4c:	mov	fp, #4
   15c50:	mov	r9, #0
   15c54:	add	r8, sp, #8
   15c58:	mov	r1, sl
   15c5c:	mov	r0, r8
   15c60:	bl	156a0 <__assert_fail@plt+0x46b4>
   15c64:	subs	fp, fp, #1
   15c68:	orr	r9, r9, r0
   15c6c:	bne	15c58 <__assert_fail@plt+0x4c6c>
   15c70:	b	15b18 <__assert_fail@plt+0x4b2c>
   15c74:	ldrd	r2, [sp, #8]
   15c78:	orr	r4, r4, #2
   15c7c:	strd	r2, [r6]
   15c80:	b	157a4 <__assert_fail@plt+0x47b8>
   15c84:	ldrb	r7, [r8, #2]
   15c88:	mov	sl, #1024	; 0x400
   15c8c:	cmp	r7, #66	; 0x42
   15c90:	movne	r7, #1
   15c94:	moveq	r7, #3
   15c98:	b	15948 <__assert_fail@plt+0x495c>
   15c9c:	mvn	r1, #0
   15ca0:	mvn	r0, #0
   15ca4:	mvn	r2, #0
   15ca8:	strd	r0, [sp, #8]
   15cac:	mov	r9, #1
   15cb0:	mov	r1, r2
   15cb4:	b	15a94 <__assert_fail@plt+0x4aa8>
   15cb8:	ldr	r3, [pc, #20]	; 15cd4 <__assert_fail@plt+0x4ce8>
   15cbc:	mov	r2, #85	; 0x55
   15cc0:	ldr	r1, [pc, #16]	; 15cd8 <__assert_fail@plt+0x4cec>
   15cc4:	ldr	r0, [pc, #16]	; 15cdc <__assert_fail@plt+0x4cf0>
   15cc8:	bl	10fec <__assert_fail@plt>
   15ccc:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   15cd0:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   15cd4:	andeq	r7, r1, r4, lsl #13
   15cd8:	muleq	r1, r0, r6
   15cdc:	andeq	r7, r1, r0, lsr #13
   15ce0:	cmp	r1, #0
   15ce4:	cmpne	r0, #0
   15ce8:	moveq	r1, #1
   15cec:	moveq	r0, r1
   15cf0:	umull	r2, r3, r0, r1
   15cf4:	adds	r3, r3, #0
   15cf8:	movne	r3, #1
   15cfc:	cmp	r2, #0
   15d00:	blt	15d10 <__assert_fail@plt+0x4d24>
   15d04:	cmp	r3, #0
   15d08:	bne	15d10 <__assert_fail@plt+0x4d24>
   15d0c:	b	10d4c <calloc@plt>
   15d10:	push	{r4, lr}
   15d14:	bl	10f20 <__errno_location@plt>
   15d18:	mov	r3, #12
   15d1c:	str	r3, [r0]
   15d20:	mov	r0, #0
   15d24:	pop	{r4, pc}
   15d28:	cmp	r0, #0
   15d2c:	moveq	r0, #1
   15d30:	cmp	r0, #0
   15d34:	blt	15d3c <__assert_fail@plt+0x4d50>
   15d38:	b	10e9c <malloc@plt>
   15d3c:	push	{r4, lr}
   15d40:	bl	10f20 <__errno_location@plt>
   15d44:	mov	r3, #12
   15d48:	str	r3, [r0]
   15d4c:	mov	r0, #0
   15d50:	pop	{r4, pc}
   15d54:	cmp	r0, #0
   15d58:	beq	15d7c <__assert_fail@plt+0x4d90>
   15d5c:	cmp	r1, #0
   15d60:	push	{lr}		; (str lr, [sp, #-4]!)
   15d64:	sub	sp, sp, #12
   15d68:	beq	15d84 <__assert_fail@plt+0x4d98>
   15d6c:	blt	15d9c <__assert_fail@plt+0x4db0>
   15d70:	add	sp, sp, #12
   15d74:	pop	{lr}		; (ldr lr, [sp], #4)
   15d78:	b	10e18 <realloc@plt>
   15d7c:	mov	r0, r1
   15d80:	b	15d28 <__assert_fail@plt+0x4d3c>
   15d84:	str	r1, [sp, #4]
   15d88:	bl	12880 <__assert_fail@plt+0x1894>
   15d8c:	ldr	r3, [sp, #4]
   15d90:	mov	r0, r3
   15d94:	add	sp, sp, #12
   15d98:	pop	{pc}		; (ldr pc, [sp], #4)
   15d9c:	bl	10f20 <__errno_location@plt>
   15da0:	mov	r2, #12
   15da4:	mov	r3, #0
   15da8:	str	r2, [r0]
   15dac:	b	15d90 <__assert_fail@plt+0x4da4>
   15db0:	push	{r4, r5, r6, lr}
   15db4:	mov	r4, r0
   15db8:	bl	10e60 <__fpending@plt>
   15dbc:	ldr	r5, [r4]
   15dc0:	and	r5, r5, #32
   15dc4:	mov	r6, r0
   15dc8:	mov	r0, r4
   15dcc:	bl	12780 <__assert_fail@plt+0x1794>
   15dd0:	cmp	r5, #0
   15dd4:	mov	r4, r0
   15dd8:	bne	15df8 <__assert_fail@plt+0x4e0c>
   15ddc:	cmp	r0, #0
   15de0:	beq	15df0 <__assert_fail@plt+0x4e04>
   15de4:	cmp	r6, #0
   15de8:	beq	15e14 <__assert_fail@plt+0x4e28>
   15dec:	mvn	r4, #0
   15df0:	mov	r0, r4
   15df4:	pop	{r4, r5, r6, pc}
   15df8:	cmp	r0, #0
   15dfc:	bne	15dec <__assert_fail@plt+0x4e00>
   15e00:	bl	10f20 <__errno_location@plt>
   15e04:	str	r4, [r0]
   15e08:	mvn	r4, #0
   15e0c:	mov	r0, r4
   15e10:	pop	{r4, r5, r6, pc}
   15e14:	bl	10f20 <__errno_location@plt>
   15e18:	ldr	r4, [r0]
   15e1c:	subs	r4, r4, #9
   15e20:	mvnne	r4, #0
   15e24:	mov	r0, r4
   15e28:	pop	{r4, r5, r6, pc}
   15e2c:	push	{r4, lr}
   15e30:	mov	r0, #14
   15e34:	bl	10fb0 <nl_langinfo@plt>
   15e38:	cmp	r0, #0
   15e3c:	beq	15e54 <__assert_fail@plt+0x4e68>
   15e40:	ldrb	r2, [r0]
   15e44:	ldr	r3, [pc, #16]	; 15e5c <__assert_fail@plt+0x4e70>
   15e48:	cmp	r2, #0
   15e4c:	moveq	r0, r3
   15e50:	pop	{r4, pc}
   15e54:	ldr	r0, [pc]	; 15e5c <__assert_fail@plt+0x4e70>
   15e58:	pop	{r4, pc}
   15e5c:	andeq	r7, r1, r8, asr #13
   15e60:	push	{r4, r5, r6, r7, lr}
   15e64:	subs	r6, r0, #0
   15e68:	sub	sp, sp, #12
   15e6c:	addeq	r6, sp, #4
   15e70:	mov	r0, r6
   15e74:	mov	r5, r2
   15e78:	mov	r7, r1
   15e7c:	bl	10e6c <mbrtowc@plt>
   15e80:	cmp	r5, #0
   15e84:	cmnne	r0, #3
   15e88:	mov	r4, r0
   15e8c:	bls	15ea8 <__assert_fail@plt+0x4ebc>
   15e90:	mov	r0, #0
   15e94:	bl	15f00 <__assert_fail@plt+0x4f14>
   15e98:	cmp	r0, #0
   15e9c:	moveq	r4, #1
   15ea0:	ldrbeq	r3, [r7]
   15ea4:	streq	r3, [r6]
   15ea8:	mov	r0, r4
   15eac:	add	sp, sp, #12
   15eb0:	pop	{r4, r5, r6, r7, pc}
   15eb4:	push	{r4, r5, r6, lr}
   15eb8:	subs	r4, r2, #0
   15ebc:	mov	r6, r0
   15ec0:	mov	r5, r1
   15ec4:	beq	15ef0 <__assert_fail@plt+0x4f04>
   15ec8:	mov	r1, r4
   15ecc:	mvn	r0, #0
   15ed0:	bl	15ff4 <__assert_fail@plt+0x5008>
   15ed4:	cmp	r0, r5
   15ed8:	bcs	15ef0 <__assert_fail@plt+0x4f04>
   15edc:	bl	10f20 <__errno_location@plt>
   15ee0:	mov	r3, #12
   15ee4:	str	r3, [r0]
   15ee8:	mov	r0, #0
   15eec:	pop	{r4, r5, r6, pc}
   15ef0:	mul	r1, r5, r4
   15ef4:	mov	r0, r6
   15ef8:	pop	{r4, r5, r6, lr}
   15efc:	b	15d54 <__assert_fail@plt+0x4d68>
   15f00:	push	{lr}		; (str lr, [sp, #-4]!)
   15f04:	sub	sp, sp, #268	; 0x10c
   15f08:	add	r1, sp, #4
   15f0c:	ldr	r2, [pc, #60]	; 15f50 <__assert_fail@plt+0x4f64>
   15f10:	bl	15f5c <__assert_fail@plt+0x4f70>
   15f14:	cmp	r0, #0
   15f18:	movne	r0, #0
   15f1c:	bne	15f48 <__assert_fail@plt+0x4f5c>
   15f20:	ldr	r1, [pc, #44]	; 15f54 <__assert_fail@plt+0x4f68>
   15f24:	add	r0, sp, #4
   15f28:	bl	10d70 <strcmp@plt>
   15f2c:	cmp	r0, #0
   15f30:	beq	15f48 <__assert_fail@plt+0x4f5c>
   15f34:	add	r0, sp, #4
   15f38:	ldr	r1, [pc, #24]	; 15f58 <__assert_fail@plt+0x4f6c>
   15f3c:	bl	10d70 <strcmp@plt>
   15f40:	adds	r0, r0, #0
   15f44:	movne	r0, #1
   15f48:	add	sp, sp, #268	; 0x10c
   15f4c:	pop	{pc}		; (ldr pc, [sp], #4)
   15f50:	andeq	r0, r0, r1, lsl #2
   15f54:	ldrdeq	r7, [r1], -r0
   15f58:	ldrdeq	r7, [r1], -r4
   15f5c:	push	{r4, r5, r6, lr}
   15f60:	mov	r5, r1
   15f64:	mov	r1, #0
   15f68:	mov	r4, r2
   15f6c:	bl	10f98 <setlocale@plt>
   15f70:	subs	r6, r0, #0
   15f74:	beq	15fd0 <__assert_fail@plt+0x4fe4>
   15f78:	bl	10f08 <strlen@plt>
   15f7c:	cmp	r4, r0
   15f80:	bhi	15fb8 <__assert_fail@plt+0x4fcc>
   15f84:	cmp	r4, #0
   15f88:	bne	15f94 <__assert_fail@plt+0x4fa8>
   15f8c:	mov	r0, #34	; 0x22
   15f90:	pop	{r4, r5, r6, pc}
   15f94:	sub	r4, r4, #1
   15f98:	mov	r1, r6
   15f9c:	mov	r2, r4
   15fa0:	mov	r0, r5
   15fa4:	bl	10db8 <memcpy@plt>
   15fa8:	mov	r3, #0
   15fac:	strb	r3, [r5, r4]
   15fb0:	mov	r0, #34	; 0x22
   15fb4:	pop	{r4, r5, r6, pc}
   15fb8:	add	r2, r0, #1
   15fbc:	mov	r1, r6
   15fc0:	mov	r0, r5
   15fc4:	bl	10db8 <memcpy@plt>
   15fc8:	mov	r0, #0
   15fcc:	pop	{r4, r5, r6, pc}
   15fd0:	cmp	r4, #0
   15fd4:	beq	15fe4 <__assert_fail@plt+0x4ff8>
   15fd8:	strb	r6, [r5]
   15fdc:	mov	r0, #22
   15fe0:	pop	{r4, r5, r6, pc}
   15fe4:	mov	r0, #22
   15fe8:	pop	{r4, r5, r6, pc}
   15fec:	mov	r1, #0
   15ff0:	b	10f98 <setlocale@plt>
   15ff4:	subs	r2, r1, #1
   15ff8:	bxeq	lr
   15ffc:	bcc	161d4 <__assert_fail@plt+0x51e8>
   16000:	cmp	r0, r1
   16004:	bls	161b8 <__assert_fail@plt+0x51cc>
   16008:	tst	r1, r2
   1600c:	beq	161c4 <__assert_fail@plt+0x51d8>
   16010:	clz	r3, r0
   16014:	clz	r2, r1
   16018:	sub	r3, r2, r3
   1601c:	rsbs	r3, r3, #31
   16020:	addne	r3, r3, r3, lsl #1
   16024:	mov	r2, #0
   16028:	addne	pc, pc, r3, lsl #2
   1602c:	nop			; (mov r0, r0)
   16030:	cmp	r0, r1, lsl #31
   16034:	adc	r2, r2, r2
   16038:	subcs	r0, r0, r1, lsl #31
   1603c:	cmp	r0, r1, lsl #30
   16040:	adc	r2, r2, r2
   16044:	subcs	r0, r0, r1, lsl #30
   16048:	cmp	r0, r1, lsl #29
   1604c:	adc	r2, r2, r2
   16050:	subcs	r0, r0, r1, lsl #29
   16054:	cmp	r0, r1, lsl #28
   16058:	adc	r2, r2, r2
   1605c:	subcs	r0, r0, r1, lsl #28
   16060:	cmp	r0, r1, lsl #27
   16064:	adc	r2, r2, r2
   16068:	subcs	r0, r0, r1, lsl #27
   1606c:	cmp	r0, r1, lsl #26
   16070:	adc	r2, r2, r2
   16074:	subcs	r0, r0, r1, lsl #26
   16078:	cmp	r0, r1, lsl #25
   1607c:	adc	r2, r2, r2
   16080:	subcs	r0, r0, r1, lsl #25
   16084:	cmp	r0, r1, lsl #24
   16088:	adc	r2, r2, r2
   1608c:	subcs	r0, r0, r1, lsl #24
   16090:	cmp	r0, r1, lsl #23
   16094:	adc	r2, r2, r2
   16098:	subcs	r0, r0, r1, lsl #23
   1609c:	cmp	r0, r1, lsl #22
   160a0:	adc	r2, r2, r2
   160a4:	subcs	r0, r0, r1, lsl #22
   160a8:	cmp	r0, r1, lsl #21
   160ac:	adc	r2, r2, r2
   160b0:	subcs	r0, r0, r1, lsl #21
   160b4:	cmp	r0, r1, lsl #20
   160b8:	adc	r2, r2, r2
   160bc:	subcs	r0, r0, r1, lsl #20
   160c0:	cmp	r0, r1, lsl #19
   160c4:	adc	r2, r2, r2
   160c8:	subcs	r0, r0, r1, lsl #19
   160cc:	cmp	r0, r1, lsl #18
   160d0:	adc	r2, r2, r2
   160d4:	subcs	r0, r0, r1, lsl #18
   160d8:	cmp	r0, r1, lsl #17
   160dc:	adc	r2, r2, r2
   160e0:	subcs	r0, r0, r1, lsl #17
   160e4:	cmp	r0, r1, lsl #16
   160e8:	adc	r2, r2, r2
   160ec:	subcs	r0, r0, r1, lsl #16
   160f0:	cmp	r0, r1, lsl #15
   160f4:	adc	r2, r2, r2
   160f8:	subcs	r0, r0, r1, lsl #15
   160fc:	cmp	r0, r1, lsl #14
   16100:	adc	r2, r2, r2
   16104:	subcs	r0, r0, r1, lsl #14
   16108:	cmp	r0, r1, lsl #13
   1610c:	adc	r2, r2, r2
   16110:	subcs	r0, r0, r1, lsl #13
   16114:	cmp	r0, r1, lsl #12
   16118:	adc	r2, r2, r2
   1611c:	subcs	r0, r0, r1, lsl #12
   16120:	cmp	r0, r1, lsl #11
   16124:	adc	r2, r2, r2
   16128:	subcs	r0, r0, r1, lsl #11
   1612c:	cmp	r0, r1, lsl #10
   16130:	adc	r2, r2, r2
   16134:	subcs	r0, r0, r1, lsl #10
   16138:	cmp	r0, r1, lsl #9
   1613c:	adc	r2, r2, r2
   16140:	subcs	r0, r0, r1, lsl #9
   16144:	cmp	r0, r1, lsl #8
   16148:	adc	r2, r2, r2
   1614c:	subcs	r0, r0, r1, lsl #8
   16150:	cmp	r0, r1, lsl #7
   16154:	adc	r2, r2, r2
   16158:	subcs	r0, r0, r1, lsl #7
   1615c:	cmp	r0, r1, lsl #6
   16160:	adc	r2, r2, r2
   16164:	subcs	r0, r0, r1, lsl #6
   16168:	cmp	r0, r1, lsl #5
   1616c:	adc	r2, r2, r2
   16170:	subcs	r0, r0, r1, lsl #5
   16174:	cmp	r0, r1, lsl #4
   16178:	adc	r2, r2, r2
   1617c:	subcs	r0, r0, r1, lsl #4
   16180:	cmp	r0, r1, lsl #3
   16184:	adc	r2, r2, r2
   16188:	subcs	r0, r0, r1, lsl #3
   1618c:	cmp	r0, r1, lsl #2
   16190:	adc	r2, r2, r2
   16194:	subcs	r0, r0, r1, lsl #2
   16198:	cmp	r0, r1, lsl #1
   1619c:	adc	r2, r2, r2
   161a0:	subcs	r0, r0, r1, lsl #1
   161a4:	cmp	r0, r1
   161a8:	adc	r2, r2, r2
   161ac:	subcs	r0, r0, r1
   161b0:	mov	r0, r2
   161b4:	bx	lr
   161b8:	moveq	r0, #1
   161bc:	movne	r0, #0
   161c0:	bx	lr
   161c4:	clz	r2, r1
   161c8:	rsb	r2, r2, #31
   161cc:	lsr	r0, r0, r2
   161d0:	bx	lr
   161d4:	cmp	r0, #0
   161d8:	mvnne	r0, #0
   161dc:	b	1647c <__assert_fail@plt+0x5490>
   161e0:	cmp	r1, #0
   161e4:	beq	161d4 <__assert_fail@plt+0x51e8>
   161e8:	push	{r0, r1, lr}
   161ec:	bl	15ff4 <__assert_fail@plt+0x5008>
   161f0:	pop	{r1, r2, lr}
   161f4:	mul	r3, r2, r0
   161f8:	sub	r1, r1, r3
   161fc:	bx	lr
   16200:	cmp	r1, #0
   16204:	beq	16410 <__assert_fail@plt+0x5424>
   16208:	eor	ip, r0, r1
   1620c:	rsbmi	r1, r1, #0
   16210:	subs	r2, r1, #1
   16214:	beq	163dc <__assert_fail@plt+0x53f0>
   16218:	movs	r3, r0
   1621c:	rsbmi	r3, r0, #0
   16220:	cmp	r3, r1
   16224:	bls	163e8 <__assert_fail@plt+0x53fc>
   16228:	tst	r1, r2
   1622c:	beq	163f8 <__assert_fail@plt+0x540c>
   16230:	clz	r2, r3
   16234:	clz	r0, r1
   16238:	sub	r2, r0, r2
   1623c:	rsbs	r2, r2, #31
   16240:	addne	r2, r2, r2, lsl #1
   16244:	mov	r0, #0
   16248:	addne	pc, pc, r2, lsl #2
   1624c:	nop			; (mov r0, r0)
   16250:	cmp	r3, r1, lsl #31
   16254:	adc	r0, r0, r0
   16258:	subcs	r3, r3, r1, lsl #31
   1625c:	cmp	r3, r1, lsl #30
   16260:	adc	r0, r0, r0
   16264:	subcs	r3, r3, r1, lsl #30
   16268:	cmp	r3, r1, lsl #29
   1626c:	adc	r0, r0, r0
   16270:	subcs	r3, r3, r1, lsl #29
   16274:	cmp	r3, r1, lsl #28
   16278:	adc	r0, r0, r0
   1627c:	subcs	r3, r3, r1, lsl #28
   16280:	cmp	r3, r1, lsl #27
   16284:	adc	r0, r0, r0
   16288:	subcs	r3, r3, r1, lsl #27
   1628c:	cmp	r3, r1, lsl #26
   16290:	adc	r0, r0, r0
   16294:	subcs	r3, r3, r1, lsl #26
   16298:	cmp	r3, r1, lsl #25
   1629c:	adc	r0, r0, r0
   162a0:	subcs	r3, r3, r1, lsl #25
   162a4:	cmp	r3, r1, lsl #24
   162a8:	adc	r0, r0, r0
   162ac:	subcs	r3, r3, r1, lsl #24
   162b0:	cmp	r3, r1, lsl #23
   162b4:	adc	r0, r0, r0
   162b8:	subcs	r3, r3, r1, lsl #23
   162bc:	cmp	r3, r1, lsl #22
   162c0:	adc	r0, r0, r0
   162c4:	subcs	r3, r3, r1, lsl #22
   162c8:	cmp	r3, r1, lsl #21
   162cc:	adc	r0, r0, r0
   162d0:	subcs	r3, r3, r1, lsl #21
   162d4:	cmp	r3, r1, lsl #20
   162d8:	adc	r0, r0, r0
   162dc:	subcs	r3, r3, r1, lsl #20
   162e0:	cmp	r3, r1, lsl #19
   162e4:	adc	r0, r0, r0
   162e8:	subcs	r3, r3, r1, lsl #19
   162ec:	cmp	r3, r1, lsl #18
   162f0:	adc	r0, r0, r0
   162f4:	subcs	r3, r3, r1, lsl #18
   162f8:	cmp	r3, r1, lsl #17
   162fc:	adc	r0, r0, r0
   16300:	subcs	r3, r3, r1, lsl #17
   16304:	cmp	r3, r1, lsl #16
   16308:	adc	r0, r0, r0
   1630c:	subcs	r3, r3, r1, lsl #16
   16310:	cmp	r3, r1, lsl #15
   16314:	adc	r0, r0, r0
   16318:	subcs	r3, r3, r1, lsl #15
   1631c:	cmp	r3, r1, lsl #14
   16320:	adc	r0, r0, r0
   16324:	subcs	r3, r3, r1, lsl #14
   16328:	cmp	r3, r1, lsl #13
   1632c:	adc	r0, r0, r0
   16330:	subcs	r3, r3, r1, lsl #13
   16334:	cmp	r3, r1, lsl #12
   16338:	adc	r0, r0, r0
   1633c:	subcs	r3, r3, r1, lsl #12
   16340:	cmp	r3, r1, lsl #11
   16344:	adc	r0, r0, r0
   16348:	subcs	r3, r3, r1, lsl #11
   1634c:	cmp	r3, r1, lsl #10
   16350:	adc	r0, r0, r0
   16354:	subcs	r3, r3, r1, lsl #10
   16358:	cmp	r3, r1, lsl #9
   1635c:	adc	r0, r0, r0
   16360:	subcs	r3, r3, r1, lsl #9
   16364:	cmp	r3, r1, lsl #8
   16368:	adc	r0, r0, r0
   1636c:	subcs	r3, r3, r1, lsl #8
   16370:	cmp	r3, r1, lsl #7
   16374:	adc	r0, r0, r0
   16378:	subcs	r3, r3, r1, lsl #7
   1637c:	cmp	r3, r1, lsl #6
   16380:	adc	r0, r0, r0
   16384:	subcs	r3, r3, r1, lsl #6
   16388:	cmp	r3, r1, lsl #5
   1638c:	adc	r0, r0, r0
   16390:	subcs	r3, r3, r1, lsl #5
   16394:	cmp	r3, r1, lsl #4
   16398:	adc	r0, r0, r0
   1639c:	subcs	r3, r3, r1, lsl #4
   163a0:	cmp	r3, r1, lsl #3
   163a4:	adc	r0, r0, r0
   163a8:	subcs	r3, r3, r1, lsl #3
   163ac:	cmp	r3, r1, lsl #2
   163b0:	adc	r0, r0, r0
   163b4:	subcs	r3, r3, r1, lsl #2
   163b8:	cmp	r3, r1, lsl #1
   163bc:	adc	r0, r0, r0
   163c0:	subcs	r3, r3, r1, lsl #1
   163c4:	cmp	r3, r1
   163c8:	adc	r0, r0, r0
   163cc:	subcs	r3, r3, r1
   163d0:	cmp	ip, #0
   163d4:	rsbmi	r0, r0, #0
   163d8:	bx	lr
   163dc:	teq	ip, r0
   163e0:	rsbmi	r0, r0, #0
   163e4:	bx	lr
   163e8:	movcc	r0, #0
   163ec:	asreq	r0, ip, #31
   163f0:	orreq	r0, r0, #1
   163f4:	bx	lr
   163f8:	clz	r2, r1
   163fc:	rsb	r2, r2, #31
   16400:	cmp	ip, #0
   16404:	lsr	r0, r3, r2
   16408:	rsbmi	r0, r0, #0
   1640c:	bx	lr
   16410:	cmp	r0, #0
   16414:	mvngt	r0, #-2147483648	; 0x80000000
   16418:	movlt	r0, #-2147483648	; 0x80000000
   1641c:	b	1647c <__assert_fail@plt+0x5490>
   16420:	cmp	r1, #0
   16424:	beq	16410 <__assert_fail@plt+0x5424>
   16428:	push	{r0, r1, lr}
   1642c:	bl	16208 <__assert_fail@plt+0x521c>
   16430:	pop	{r1, r2, lr}
   16434:	mul	r3, r2, r0
   16438:	sub	r1, r1, r3
   1643c:	bx	lr
   16440:	cmp	r3, #0
   16444:	cmpeq	r2, #0
   16448:	bne	16460 <__assert_fail@plt+0x5474>
   1644c:	cmp	r1, #0
   16450:	cmpeq	r0, #0
   16454:	mvnne	r1, #0
   16458:	mvnne	r0, #0
   1645c:	b	1647c <__assert_fail@plt+0x5490>
   16460:	sub	sp, sp, #8
   16464:	push	{sp, lr}
   16468:	bl	1648c <__assert_fail@plt+0x54a0>
   1646c:	ldr	lr, [sp, #4]
   16470:	add	sp, sp, #8
   16474:	pop	{r2, r3}
   16478:	bx	lr
   1647c:	push	{r1, lr}
   16480:	mov	r0, #8
   16484:	bl	10d64 <raise@plt>
   16488:	pop	{r1, pc}
   1648c:	cmp	r1, r3
   16490:	push	{r4, r5, r6, r7, r8, r9, lr}
   16494:	cmpeq	r0, r2
   16498:	mov	r4, r0
   1649c:	mov	r5, r1
   164a0:	ldr	r9, [sp, #28]
   164a4:	movcc	r0, #0
   164a8:	movcc	r1, #0
   164ac:	bcc	165a4 <__assert_fail@plt+0x55b8>
   164b0:	cmp	r3, #0
   164b4:	clzeq	ip, r2
   164b8:	clzne	ip, r3
   164bc:	addeq	ip, ip, #32
   164c0:	cmp	r5, #0
   164c4:	clzeq	r1, r4
   164c8:	addeq	r1, r1, #32
   164cc:	clzne	r1, r5
   164d0:	sub	ip, ip, r1
   164d4:	sub	lr, ip, #32
   164d8:	lsl	r7, r3, ip
   164dc:	rsb	r8, ip, #32
   164e0:	orr	r7, r7, r2, lsl lr
   164e4:	orr	r7, r7, r2, lsr r8
   164e8:	lsl	r6, r2, ip
   164ec:	cmp	r5, r7
   164f0:	cmpeq	r4, r6
   164f4:	movcc	r0, #0
   164f8:	movcc	r1, #0
   164fc:	bcc	16518 <__assert_fail@plt+0x552c>
   16500:	mov	r3, #1
   16504:	subs	r4, r4, r6
   16508:	lsl	r1, r3, lr
   1650c:	lsl	r0, r3, ip
   16510:	orr	r1, r1, r3, lsr r8
   16514:	sbc	r5, r5, r7
   16518:	cmp	ip, #0
   1651c:	beq	165a4 <__assert_fail@plt+0x55b8>
   16520:	lsrs	r3, r7, #1
   16524:	rrx	r2, r6
   16528:	mov	r6, ip
   1652c:	b	16550 <__assert_fail@plt+0x5564>
   16530:	subs	r4, r4, r2
   16534:	sbc	r5, r5, r3
   16538:	adds	r4, r4, r4
   1653c:	adc	r5, r5, r5
   16540:	adds	r4, r4, #1
   16544:	adc	r5, r5, #0
   16548:	subs	r6, r6, #1
   1654c:	beq	1656c <__assert_fail@plt+0x5580>
   16550:	cmp	r5, r3
   16554:	cmpeq	r4, r2
   16558:	bcs	16530 <__assert_fail@plt+0x5544>
   1655c:	adds	r4, r4, r4
   16560:	adc	r5, r5, r5
   16564:	subs	r6, r6, #1
   16568:	bne	16550 <__assert_fail@plt+0x5564>
   1656c:	lsr	r6, r4, ip
   16570:	lsr	r7, r5, ip
   16574:	orr	r6, r6, r5, lsl r8
   16578:	adds	r2, r0, r4
   1657c:	orr	r6, r6, r5, lsr lr
   16580:	adc	r3, r1, r5
   16584:	lsl	r1, r7, ip
   16588:	orr	r1, r1, r6, lsl lr
   1658c:	lsl	r0, r6, ip
   16590:	orr	r1, r1, r6, lsr r8
   16594:	subs	r0, r2, r0
   16598:	mov	r4, r6
   1659c:	mov	r5, r7
   165a0:	sbc	r1, r3, r1
   165a4:	cmp	r9, #0
   165a8:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   165ac:	strd	r4, [r9]
   165b0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   165b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   165b8:	mov	r7, r0
   165bc:	ldr	r6, [pc, #72]	; 1660c <__assert_fail@plt+0x5620>
   165c0:	ldr	r5, [pc, #72]	; 16610 <__assert_fail@plt+0x5624>
   165c4:	add	r6, pc, r6
   165c8:	add	r5, pc, r5
   165cc:	sub	r6, r6, r5
   165d0:	mov	r8, r1
   165d4:	mov	r9, r2
   165d8:	bl	10d2c <calloc@plt-0x20>
   165dc:	asrs	r6, r6, #2
   165e0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   165e4:	mov	r4, #0
   165e8:	add	r4, r4, #1
   165ec:	ldr	r3, [r5], #4
   165f0:	mov	r2, r9
   165f4:	mov	r1, r8
   165f8:	mov	r0, r7
   165fc:	blx	r3
   16600:	cmp	r6, r4
   16604:	bne	165e8 <__assert_fail@plt+0x55fc>
   16608:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1660c:	andeq	r1, r1, r4, asr #18
   16610:	andeq	r1, r1, ip, lsr r9
   16614:	bx	lr
   16618:	ldr	r3, [pc, #12]	; 1662c <__assert_fail@plt+0x5640>
   1661c:	mov	r1, #0
   16620:	add	r3, pc, r3
   16624:	ldr	r2, [r3]
   16628:	b	10f2c <__cxa_atexit@plt>
   1662c:	ldrdeq	r1, [r1], -r0

Disassembly of section .fini:

00016630 <.fini>:
   16630:	push	{r3, lr}
   16634:	pop	{r3, pc}
